var data = {lines:[
{"lineNum":"    1","line":"// This file is part of Eigen, a lightweight C++ template library"},
{"lineNum":"    2","line":"// for linear algebra."},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Copyright (C) 2008-2010 Gael Guennebaud <gael.guennebaud@inria.fr>"},
{"lineNum":"    5","line":"//"},
{"lineNum":"    6","line":"// This Source Code Form is subject to the terms of the Mozilla"},
{"lineNum":"    7","line":"// Public License v. 2.0. If a copy of the MPL was not distributed"},
{"lineNum":"    8","line":"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/."},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef EIGEN_BINARY_FUNCTORS_H"},
{"lineNum":"   11","line":"#define EIGEN_BINARY_FUNCTORS_H"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"#include \"../InternalHeaderCheck.h\""},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"namespace Eigen {"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"namespace internal {"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"//---------- associative binary functors ----------"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"template<typename Arg1, typename Arg2>"},
{"lineNum":"   22","line":"struct binary_op_base"},
{"lineNum":"   23","line":"{"},
{"lineNum":"   24","line":"  typedef Arg1 first_argument_type;"},
{"lineNum":"   25","line":"  typedef Arg2 second_argument_type;"},
{"lineNum":"   26","line":"};"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"/** \\internal"},
{"lineNum":"   29","line":"  * \\brief Template functor to compute the sum of two scalars"},
{"lineNum":"   30","line":"  *"},
{"lineNum":"   31","line":"  * \\sa class CwiseBinaryOp, MatrixBase::operator+, class VectorwiseOp, DenseBase::sum()"},
{"lineNum":"   32","line":"  */"},
{"lineNum":"   33","line":"template<typename LhsScalar,typename RhsScalar>"},
{"lineNum":"   34","line":"struct scalar_sum_op : binary_op_base<LhsScalar,RhsScalar>"},
{"lineNum":"   35","line":"{"},
{"lineNum":"   36","line":"  typedef typename ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_sum_op>::ReturnType result_type;"},
{"lineNum":"   37","line":"#ifndef EIGEN_SCALAR_BINARY_OP_PLUGIN"},
{"lineNum":"   38","line":"  EIGEN_EMPTY_STRUCT_CTOR(scalar_sum_op)"},
{"lineNum":"   39","line":"#else"},
{"lineNum":"   40","line":"  scalar_sum_op() {"},
{"lineNum":"   41","line":"    EIGEN_SCALAR_BINARY_OP_PLUGIN"},
{"lineNum":"   42","line":"  }"},
{"lineNum":"   43","line":"#endif"},
{"lineNum":"   44","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }","class":"lineNoCov","hits":"0","possible_hits":"381",},
{"lineNum":"   45","line":"  template<typename Packet>"},
{"lineNum":"   46","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet packetOp(const Packet& a, const Packet& b) const"},
{"lineNum":"   47","line":"  { return internal::padd(a,b); }"},
{"lineNum":"   48","line":"  template<typename Packet>"},
{"lineNum":"   49","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type predux(const Packet& a) const"},
{"lineNum":"   50","line":"  { return internal::predux(a); }"},
{"lineNum":"   51","line":"};"},
{"lineNum":"   52","line":"template<typename LhsScalar,typename RhsScalar>"},
{"lineNum":"   53","line":"struct functor_traits<scalar_sum_op<LhsScalar,RhsScalar> > {"},
{"lineNum":"   54","line":"  enum {"},
{"lineNum":"   55","line":"    Cost = (int(NumTraits<LhsScalar>::AddCost) + int(NumTraits<RhsScalar>::AddCost)) / 2, // rough estimate!"},
{"lineNum":"   56","line":"    PacketAccess = is_same<LhsScalar,RhsScalar>::value && packet_traits<LhsScalar>::HasAdd && packet_traits<RhsScalar>::HasAdd"},
{"lineNum":"   57","line":"    // TODO vectorize mixed sum"},
{"lineNum":"   58","line":"  };"},
{"lineNum":"   59","line":"};"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"template<>"},
{"lineNum":"   63","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE bool scalar_sum_op<bool,bool>::operator() (const bool& a, const bool& b) const { return a || b; }"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"/** \\internal"},
{"lineNum":"   67","line":"  * \\brief Template functor to compute the product of two scalars"},
{"lineNum":"   68","line":"  *"},
{"lineNum":"   69","line":"  * \\sa class CwiseBinaryOp, Cwise::operator*(), class VectorwiseOp, MatrixBase::redux()"},
{"lineNum":"   70","line":"  */"},
{"lineNum":"   71","line":"template<typename LhsScalar,typename RhsScalar>"},
{"lineNum":"   72","line":"struct scalar_product_op  : binary_op_base<LhsScalar,RhsScalar>"},
{"lineNum":"   73","line":"{"},
{"lineNum":"   74","line":"  typedef typename ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_product_op>::ReturnType result_type;"},
{"lineNum":"   75","line":"#ifndef EIGEN_SCALAR_BINARY_OP_PLUGIN"},
{"lineNum":"   76","line":"  EIGEN_EMPTY_STRUCT_CTOR(scalar_product_op)"},
{"lineNum":"   77","line":"#else"},
{"lineNum":"   78","line":"  scalar_product_op() {"},
{"lineNum":"   79","line":"    EIGEN_SCALAR_BINARY_OP_PLUGIN"},
{"lineNum":"   80","line":"  }"},
{"lineNum":"   81","line":"#endif"},
{"lineNum":"   82","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }","class":"lineNoCov","hits":"0","possible_hits":"673",},
{"lineNum":"   83","line":"  template<typename Packet>"},
{"lineNum":"   84","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet packetOp(const Packet& a, const Packet& b) const"},
{"lineNum":"   85","line":"  { return internal::pmul(a,b); }"},
{"lineNum":"   86","line":"  template<typename Packet>"},
{"lineNum":"   87","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type predux(const Packet& a) const"},
{"lineNum":"   88","line":"  { return internal::predux_mul(a); }"},
{"lineNum":"   89","line":"};"},
{"lineNum":"   90","line":"template<typename LhsScalar,typename RhsScalar>"},
{"lineNum":"   91","line":"struct functor_traits<scalar_product_op<LhsScalar,RhsScalar> > {"},
{"lineNum":"   92","line":"  enum {"},
{"lineNum":"   93","line":"    Cost = (int(NumTraits<LhsScalar>::MulCost) + int(NumTraits<RhsScalar>::MulCost))/2, // rough estimate!"},
{"lineNum":"   94","line":"    PacketAccess = is_same<LhsScalar,RhsScalar>::value && packet_traits<LhsScalar>::HasMul && packet_traits<RhsScalar>::HasMul"},
{"lineNum":"   95","line":"    // TODO vectorize mixed product"},
{"lineNum":"   96","line":"  };"},
{"lineNum":"   97","line":"};"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"template<>"},
{"lineNum":"  100","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE bool scalar_product_op<bool,bool>::operator() (const bool& a, const bool& b) const { return a && b; }"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"/** \\internal"},
{"lineNum":"  104","line":"  * \\brief Template functor to compute the conjugate product of two scalars"},
{"lineNum":"  105","line":"  *"},
{"lineNum":"  106","line":"  * This is a short cut for conj(x) * y which is needed for optimization purpose; in Eigen2 support mode, this becomes x * conj(y)"},
{"lineNum":"  107","line":"  */"},
{"lineNum":"  108","line":"template<typename LhsScalar,typename RhsScalar>"},
{"lineNum":"  109","line":"struct scalar_conj_product_op  : binary_op_base<LhsScalar,RhsScalar>"},
{"lineNum":"  110","line":"{"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"  enum {"},
{"lineNum":"  113","line":"    Conj = NumTraits<LhsScalar>::IsComplex"},
{"lineNum":"  114","line":"  };"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"  typedef typename ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_conj_product_op>::ReturnType result_type;"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"  EIGEN_EMPTY_STRUCT_CTOR(scalar_conj_product_op)"},
{"lineNum":"  119","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const"},
{"lineNum":"  120","line":"  { return conj_helper<LhsScalar,RhsScalar,Conj,false>().pmul(a,b); }"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"  template<typename Packet>"},
{"lineNum":"  123","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet packetOp(const Packet& a, const Packet& b) const"},
{"lineNum":"  124","line":"  { return conj_helper<Packet,Packet,Conj,false>().pmul(a,b); }"},
{"lineNum":"  125","line":"};"},
{"lineNum":"  126","line":"template<typename LhsScalar,typename RhsScalar>"},
{"lineNum":"  127","line":"struct functor_traits<scalar_conj_product_op<LhsScalar,RhsScalar> > {"},
{"lineNum":"  128","line":"  enum {"},
{"lineNum":"  129","line":"    Cost = NumTraits<LhsScalar>::MulCost,"},
{"lineNum":"  130","line":"    PacketAccess = internal::is_same<LhsScalar, RhsScalar>::value && packet_traits<LhsScalar>::HasMul"},
{"lineNum":"  131","line":"  };"},
{"lineNum":"  132","line":"};"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"/** \\internal"},
{"lineNum":"  135","line":"  * \\brief Template functor to compute the min of two scalars"},
{"lineNum":"  136","line":"  *"},
{"lineNum":"  137","line":"  * \\sa class CwiseBinaryOp, MatrixBase::cwiseMin, class VectorwiseOp, MatrixBase::minCoeff()"},
{"lineNum":"  138","line":"  */"},
{"lineNum":"  139","line":"template<typename LhsScalar,typename RhsScalar, int NaNPropagation>"},
{"lineNum":"  140","line":"struct scalar_min_op : binary_op_base<LhsScalar,RhsScalar>"},
{"lineNum":"  141","line":"{"},
{"lineNum":"  142","line":"  typedef typename ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_min_op>::ReturnType result_type;"},
{"lineNum":"  143","line":"  EIGEN_EMPTY_STRUCT_CTOR(scalar_min_op)"},
{"lineNum":"  144","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const {"},
{"lineNum":"  145","line":"    return internal::pmin<NaNPropagation>(a, b);"},
{"lineNum":"  146","line":"  }"},
{"lineNum":"  147","line":"  template<typename Packet>"},
{"lineNum":"  148","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet packetOp(const Packet& a, const Packet& b) const"},
{"lineNum":"  149","line":"  {"},
{"lineNum":"  150","line":"    return internal::pmin<NaNPropagation>(a,b);"},
{"lineNum":"  151","line":"  }"},
{"lineNum":"  152","line":"  template<typename Packet>"},
{"lineNum":"  153","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type predux(const Packet& a) const"},
{"lineNum":"  154","line":"  {"},
{"lineNum":"  155","line":"    return internal::predux_min<NaNPropagation>(a);"},
{"lineNum":"  156","line":"  }"},
{"lineNum":"  157","line":"};"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"template<typename LhsScalar,typename RhsScalar, int NaNPropagation>"},
{"lineNum":"  160","line":"struct functor_traits<scalar_min_op<LhsScalar,RhsScalar, NaNPropagation> > {"},
{"lineNum":"  161","line":"  enum {"},
{"lineNum":"  162","line":"    Cost = (NumTraits<LhsScalar>::AddCost+NumTraits<RhsScalar>::AddCost)/2,"},
{"lineNum":"  163","line":"    PacketAccess = internal::is_same<LhsScalar, RhsScalar>::value && packet_traits<LhsScalar>::HasMin"},
{"lineNum":"  164","line":"  };"},
{"lineNum":"  165","line":"};"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"/** \\internal"},
{"lineNum":"  168","line":"  * \\brief Template functor to compute the max of two scalars"},
{"lineNum":"  169","line":"  *"},
{"lineNum":"  170","line":"  * \\sa class CwiseBinaryOp, MatrixBase::cwiseMax, class VectorwiseOp, MatrixBase::maxCoeff()"},
{"lineNum":"  171","line":"  */"},
{"lineNum":"  172","line":"template<typename LhsScalar,typename RhsScalar, int NaNPropagation>"},
{"lineNum":"  173","line":"struct scalar_max_op : binary_op_base<LhsScalar,RhsScalar>"},
{"lineNum":"  174","line":"{"},
{"lineNum":"  175","line":"  typedef typename ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_max_op>::ReturnType result_type;"},
{"lineNum":"  176","line":"  EIGEN_EMPTY_STRUCT_CTOR(scalar_max_op)"},
{"lineNum":"  177","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const {"},
{"lineNum":"  178","line":"    return internal::pmax<NaNPropagation>(a,b);"},
{"lineNum":"  179","line":"  }"},
{"lineNum":"  180","line":"  template<typename Packet>"},
{"lineNum":"  181","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet packetOp(const Packet& a, const Packet& b) const"},
{"lineNum":"  182","line":"  {"},
{"lineNum":"  183","line":"    return internal::pmax<NaNPropagation>(a,b);"},
{"lineNum":"  184","line":"  }"},
{"lineNum":"  185","line":"  template<typename Packet>"},
{"lineNum":"  186","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type predux(const Packet& a) const"},
{"lineNum":"  187","line":"  {"},
{"lineNum":"  188","line":"    return internal::predux_max<NaNPropagation>(a);"},
{"lineNum":"  189","line":"  }"},
{"lineNum":"  190","line":"};"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"template<typename LhsScalar,typename RhsScalar, int NaNPropagation>"},
{"lineNum":"  193","line":"struct functor_traits<scalar_max_op<LhsScalar,RhsScalar, NaNPropagation> > {"},
{"lineNum":"  194","line":"  enum {"},
{"lineNum":"  195","line":"    Cost = (NumTraits<LhsScalar>::AddCost+NumTraits<RhsScalar>::AddCost)/2,"},
{"lineNum":"  196","line":"    PacketAccess = internal::is_same<LhsScalar, RhsScalar>::value && packet_traits<LhsScalar>::HasMax"},
{"lineNum":"  197","line":"  };"},
{"lineNum":"  198","line":"};"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"/** \\internal"},
{"lineNum":"  201","line":"  * \\brief Template functors for comparison of two scalars"},
{"lineNum":"  202","line":"  * \\todo Implement packet-comparisons"},
{"lineNum":"  203","line":"  */"},
{"lineNum":"  204","line":"template<typename LhsScalar, typename RhsScalar, ComparisonName cmp> struct scalar_cmp_op;"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"template<typename LhsScalar, typename RhsScalar, ComparisonName cmp>"},
{"lineNum":"  207","line":"struct functor_traits<scalar_cmp_op<LhsScalar,RhsScalar, cmp> > {"},
{"lineNum":"  208","line":"  enum {"},
{"lineNum":"  209","line":"    Cost = (NumTraits<LhsScalar>::AddCost+NumTraits<RhsScalar>::AddCost)/2,"},
{"lineNum":"  210","line":"    PacketAccess = is_same<LhsScalar, RhsScalar>::value &&"},
{"lineNum":"  211","line":"        packet_traits<LhsScalar>::HasCmp &&"},
{"lineNum":"  212","line":"        // Since return type is bool, we currently require the inputs"},
{"lineNum":"  213","line":"        // to be bool to enable packet access."},
{"lineNum":"  214","line":"        is_same<LhsScalar, bool>::value"},
{"lineNum":"  215","line":"  };"},
{"lineNum":"  216","line":"};"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"template<ComparisonName Cmp, typename LhsScalar, typename RhsScalar>"},
{"lineNum":"  219","line":"struct result_of<scalar_cmp_op<LhsScalar, RhsScalar, Cmp>(LhsScalar,RhsScalar)> {"},
{"lineNum":"  220","line":"  typedef bool type;"},
{"lineNum":"  221","line":"};"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"template<typename LhsScalar, typename RhsScalar>"},
{"lineNum":"  225","line":"struct scalar_cmp_op<LhsScalar,RhsScalar, cmp_EQ> : binary_op_base<LhsScalar,RhsScalar>"},
{"lineNum":"  226","line":"{"},
{"lineNum":"  227","line":"  typedef bool result_type;"},
{"lineNum":"  228","line":"  EIGEN_EMPTY_STRUCT_CTOR(scalar_cmp_op)"},
{"lineNum":"  229","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE bool operator()(const LhsScalar& a, const RhsScalar& b) const {return a==b;}"},
{"lineNum":"  230","line":"  template<typename Packet>"},
{"lineNum":"  231","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet packetOp(const Packet& a, const Packet& b) const"},
{"lineNum":"  232","line":"  { return internal::pcmp_eq(a,b); }"},
{"lineNum":"  233","line":"};"},
{"lineNum":"  234","line":"template<typename LhsScalar, typename RhsScalar>"},
{"lineNum":"  235","line":"struct scalar_cmp_op<LhsScalar,RhsScalar, cmp_LT> : binary_op_base<LhsScalar,RhsScalar>"},
{"lineNum":"  236","line":"{"},
{"lineNum":"  237","line":"  typedef bool result_type;"},
{"lineNum":"  238","line":"  EIGEN_EMPTY_STRUCT_CTOR(scalar_cmp_op)"},
{"lineNum":"  239","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE bool operator()(const LhsScalar& a, const RhsScalar& b) const {return a<b;}"},
{"lineNum":"  240","line":"  template<typename Packet>"},
{"lineNum":"  241","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet packetOp(const Packet& a, const Packet& b) const"},
{"lineNum":"  242","line":"  { return internal::pcmp_lt(a,b); }"},
{"lineNum":"  243","line":"};"},
{"lineNum":"  244","line":"template<typename LhsScalar, typename RhsScalar>"},
{"lineNum":"  245","line":"struct scalar_cmp_op<LhsScalar,RhsScalar, cmp_LE> : binary_op_base<LhsScalar,RhsScalar>"},
{"lineNum":"  246","line":"{"},
{"lineNum":"  247","line":"  typedef bool result_type;"},
{"lineNum":"  248","line":"  EIGEN_EMPTY_STRUCT_CTOR(scalar_cmp_op)"},
{"lineNum":"  249","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE bool operator()(const LhsScalar& a, const RhsScalar& b) const {return a<=b;}"},
{"lineNum":"  250","line":"  template<typename Packet>"},
{"lineNum":"  251","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet packetOp(const Packet& a, const Packet& b) const"},
{"lineNum":"  252","line":"  { return internal::pcmp_le(a,b); }"},
{"lineNum":"  253","line":"};"},
{"lineNum":"  254","line":"template<typename LhsScalar, typename RhsScalar>"},
{"lineNum":"  255","line":"struct scalar_cmp_op<LhsScalar,RhsScalar, cmp_GT> : binary_op_base<LhsScalar,RhsScalar>"},
{"lineNum":"  256","line":"{"},
{"lineNum":"  257","line":"  typedef bool result_type;"},
{"lineNum":"  258","line":"  EIGEN_EMPTY_STRUCT_CTOR(scalar_cmp_op)"},
{"lineNum":"  259","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE bool operator()(const LhsScalar& a, const RhsScalar& b) const {return a>b;}"},
{"lineNum":"  260","line":"  template<typename Packet>"},
{"lineNum":"  261","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet packetOp(const Packet& a, const Packet& b) const"},
{"lineNum":"  262","line":"  { return internal::pcmp_lt(b,a); }"},
{"lineNum":"  263","line":"};"},
{"lineNum":"  264","line":"template<typename LhsScalar, typename RhsScalar>"},
{"lineNum":"  265","line":"struct scalar_cmp_op<LhsScalar,RhsScalar, cmp_GE> : binary_op_base<LhsScalar,RhsScalar>"},
{"lineNum":"  266","line":"{"},
{"lineNum":"  267","line":"  typedef bool result_type;"},
{"lineNum":"  268","line":"  EIGEN_EMPTY_STRUCT_CTOR(scalar_cmp_op)"},
{"lineNum":"  269","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE bool operator()(const LhsScalar& a, const RhsScalar& b) const {return a>=b;}"},
{"lineNum":"  270","line":"  template<typename Packet>"},
{"lineNum":"  271","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet packetOp(const Packet& a, const Packet& b) const"},
{"lineNum":"  272","line":"  { return internal::pcmp_le(b,a); }"},
{"lineNum":"  273","line":"};"},
{"lineNum":"  274","line":"template<typename LhsScalar, typename RhsScalar>"},
{"lineNum":"  275","line":"struct scalar_cmp_op<LhsScalar,RhsScalar, cmp_UNORD> : binary_op_base<LhsScalar,RhsScalar>"},
{"lineNum":"  276","line":"{"},
{"lineNum":"  277","line":"  typedef bool result_type;"},
{"lineNum":"  278","line":"  EIGEN_EMPTY_STRUCT_CTOR(scalar_cmp_op)"},
{"lineNum":"  279","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE bool operator()(const LhsScalar& a, const RhsScalar& b) const {return !(a<=b || b<=a);}"},
{"lineNum":"  280","line":"  template<typename Packet>"},
{"lineNum":"  281","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet packetOp(const Packet& a, const Packet& b) const"},
{"lineNum":"  282","line":"  { return internal::pcmp_eq(internal::por(internal::pcmp_le(a, b), internal::pcmp_le(b, a)), internal::pzero(a)); }"},
{"lineNum":"  283","line":"};"},
{"lineNum":"  284","line":"template<typename LhsScalar, typename RhsScalar>"},
{"lineNum":"  285","line":"struct scalar_cmp_op<LhsScalar,RhsScalar, cmp_NEQ> : binary_op_base<LhsScalar,RhsScalar>"},
{"lineNum":"  286","line":"{"},
{"lineNum":"  287","line":"  typedef bool result_type;"},
{"lineNum":"  288","line":"  EIGEN_EMPTY_STRUCT_CTOR(scalar_cmp_op)"},
{"lineNum":"  289","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE bool operator()(const LhsScalar& a, const RhsScalar& b) const {return a!=b;}"},
{"lineNum":"  290","line":"  template<typename Packet>"},
{"lineNum":"  291","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet packetOp(const Packet& a, const Packet& b) const"},
{"lineNum":"  292","line":"  { return internal::pcmp_eq(internal::pcmp_eq(a, b), internal::pzero(a)); }"},
{"lineNum":"  293","line":"};"},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":"/** \\internal"},
{"lineNum":"  296","line":"  * \\brief Template functor to compute the hypot of two \\b positive \\b and \\b real scalars"},
{"lineNum":"  297","line":"  *"},
{"lineNum":"  298","line":"  * \\sa MatrixBase::stableNorm(), class Redux"},
{"lineNum":"  299","line":"  */"},
{"lineNum":"  300","line":"template<typename Scalar>"},
{"lineNum":"  301","line":"struct scalar_hypot_op<Scalar,Scalar> : binary_op_base<Scalar,Scalar>"},
{"lineNum":"  302","line":"{"},
{"lineNum":"  303","line":"  EIGEN_EMPTY_STRUCT_CTOR(scalar_hypot_op)"},
{"lineNum":"  304","line":""},
{"lineNum":"  305","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar operator() (const Scalar &x, const Scalar &y) const"},
{"lineNum":"  306","line":"  {"},
{"lineNum":"  307","line":"    // This functor is used by hypotNorm only for which it is faster to first apply abs"},
{"lineNum":"  308","line":"    // on all coefficients prior to reduction through hypot."},
{"lineNum":"  309","line":"    // This way we avoid calling abs on positive and real entries, and this also permits"},
{"lineNum":"  310","line":"    // to seamlessly handle complexes. Otherwise we would have to handle both real and complexes"},
{"lineNum":"  311","line":"    // through the same functor..."},
{"lineNum":"  312","line":"    return internal::positive_real_hypot(x,y);"},
{"lineNum":"  313","line":"  }"},
{"lineNum":"  314","line":"};"},
{"lineNum":"  315","line":"template<typename Scalar>"},
{"lineNum":"  316","line":"struct functor_traits<scalar_hypot_op<Scalar,Scalar> > {"},
{"lineNum":"  317","line":"  enum"},
{"lineNum":"  318","line":"  {"},
{"lineNum":"  319","line":"    Cost = 3 * NumTraits<Scalar>::AddCost +"},
{"lineNum":"  320","line":"           2 * NumTraits<Scalar>::MulCost +"},
{"lineNum":"  321","line":"           2 * scalar_div_cost<Scalar,false>::value,"},
{"lineNum":"  322","line":"    PacketAccess = false"},
{"lineNum":"  323","line":"  };"},
{"lineNum":"  324","line":"};"},
{"lineNum":"  325","line":""},
{"lineNum":"  326","line":"/** \\internal"},
{"lineNum":"  327","line":"  * \\brief Template functor to compute the pow of two scalars"},
{"lineNum":"  328","line":"  * See the specification of pow in https://en.cppreference.com/w/cpp/numeric/math/pow"},
{"lineNum":"  329","line":"  */"},
{"lineNum":"  330","line":"template<typename Scalar, typename Exponent>"},
{"lineNum":"  331","line":"struct scalar_pow_op  : binary_op_base<Scalar,Exponent>"},
{"lineNum":"  332","line":"{"},
{"lineNum":"  333","line":"  typedef typename ScalarBinaryOpTraits<Scalar,Exponent,scalar_pow_op>::ReturnType result_type;"},
{"lineNum":"  334","line":"#ifndef EIGEN_SCALAR_BINARY_OP_PLUGIN"},
{"lineNum":"  335","line":"  EIGEN_EMPTY_STRUCT_CTOR(scalar_pow_op)"},
{"lineNum":"  336","line":"#else"},
{"lineNum":"  337","line":"  scalar_pow_op() {"},
{"lineNum":"  338","line":"    typedef Scalar LhsScalar;"},
{"lineNum":"  339","line":"    typedef Exponent RhsScalar;"},
{"lineNum":"  340","line":"    EIGEN_SCALAR_BINARY_OP_PLUGIN"},
{"lineNum":"  341","line":"  }"},
{"lineNum":"  342","line":"#endif"},
{"lineNum":"  343","line":""},
{"lineNum":"  344","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  345","line":"  inline result_type operator() (const Scalar& a, const Exponent& b) const { return numext::pow(a, b); }"},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"  template<typename Packet>"},
{"lineNum":"  348","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Packet packetOp(const Packet& a, const Packet& b) const"},
{"lineNum":"  349","line":"  {"},
{"lineNum":"  350","line":"    return generic_pow(a,b);"},
{"lineNum":"  351","line":"  }"},
{"lineNum":"  352","line":"};"},
{"lineNum":"  353","line":""},
{"lineNum":"  354","line":"template<typename Scalar, typename Exponent>"},
{"lineNum":"  355","line":"struct functor_traits<scalar_pow_op<Scalar,Exponent> > {"},
{"lineNum":"  356","line":"  enum {"},
{"lineNum":"  357","line":"    Cost = 5 * NumTraits<Scalar>::MulCost,"},
{"lineNum":"  358","line":"    PacketAccess = (!NumTraits<Scalar>::IsComplex && !NumTraits<Scalar>::IsInteger &&"},
{"lineNum":"  359","line":"                    packet_traits<Scalar>::HasExp && packet_traits<Scalar>::HasLog &&"},
{"lineNum":"  360","line":"                    packet_traits<Scalar>::HasRound && packet_traits<Scalar>::HasCmp &&"},
{"lineNum":"  361","line":"                    // Temporarily disable packet access for half/bfloat16 until"},
{"lineNum":"  362","line":"                    // accuracy is improved."},
{"lineNum":"  363","line":"                    !is_same<Scalar, half>::value && !is_same<Scalar, bfloat16>::value"},
{"lineNum":"  364","line":"                    )"},
{"lineNum":"  365","line":"  };"},
{"lineNum":"  366","line":"};"},
{"lineNum":"  367","line":""},
{"lineNum":"  368","line":"//---------- non associative binary functors ----------"},
{"lineNum":"  369","line":""},
{"lineNum":"  370","line":"/** \\internal"},
{"lineNum":"  371","line":"  * \\brief Template functor to compute the difference of two scalars"},
{"lineNum":"  372","line":"  *"},
{"lineNum":"  373","line":"  * \\sa class CwiseBinaryOp, MatrixBase::operator-"},
{"lineNum":"  374","line":"  */"},
{"lineNum":"  375","line":"template<typename LhsScalar,typename RhsScalar>"},
{"lineNum":"  376","line":"struct scalar_difference_op : binary_op_base<LhsScalar,RhsScalar>"},
{"lineNum":"  377","line":"{"},
{"lineNum":"  378","line":"  typedef typename ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_difference_op>::ReturnType result_type;"},
{"lineNum":"  379","line":"#ifndef EIGEN_SCALAR_BINARY_OP_PLUGIN"},
{"lineNum":"  380","line":"  EIGEN_EMPTY_STRUCT_CTOR(scalar_difference_op)"},
{"lineNum":"  381","line":"#else"},
{"lineNum":"  382","line":"  scalar_difference_op() {"},
{"lineNum":"  383","line":"    EIGEN_SCALAR_BINARY_OP_PLUGIN"},
{"lineNum":"  384","line":"  }"},
{"lineNum":"  385","line":"#endif"},
{"lineNum":"  386","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a - b; }","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"  387","line":"  template<typename Packet>"},
{"lineNum":"  388","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Packet packetOp(const Packet& a, const Packet& b) const"},
{"lineNum":"  389","line":"  { return internal::psub(a,b); }"},
{"lineNum":"  390","line":"};"},
{"lineNum":"  391","line":"template<typename LhsScalar,typename RhsScalar>"},
{"lineNum":"  392","line":"struct functor_traits<scalar_difference_op<LhsScalar,RhsScalar> > {"},
{"lineNum":"  393","line":"  enum {"},
{"lineNum":"  394","line":"    Cost = (int(NumTraits<LhsScalar>::AddCost) + int(NumTraits<RhsScalar>::AddCost)) / 2,"},
{"lineNum":"  395","line":"    PacketAccess = is_same<LhsScalar,RhsScalar>::value && packet_traits<LhsScalar>::HasSub && packet_traits<RhsScalar>::HasSub"},
{"lineNum":"  396","line":"  };"},
{"lineNum":"  397","line":"};"},
{"lineNum":"  398","line":""},
{"lineNum":"  399","line":"/** \\internal"},
{"lineNum":"  400","line":"  * \\brief Template functor to compute the quotient of two scalars"},
{"lineNum":"  401","line":"  *"},
{"lineNum":"  402","line":"  * \\sa class CwiseBinaryOp, Cwise::operator/()"},
{"lineNum":"  403","line":"  */"},
{"lineNum":"  404","line":"template<typename LhsScalar,typename RhsScalar>"},
{"lineNum":"  405","line":"struct scalar_quotient_op  : binary_op_base<LhsScalar,RhsScalar>"},
{"lineNum":"  406","line":"{"},
{"lineNum":"  407","line":"  typedef typename ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_quotient_op>::ReturnType result_type;"},
{"lineNum":"  408","line":"#ifndef EIGEN_SCALAR_BINARY_OP_PLUGIN"},
{"lineNum":"  409","line":"  EIGEN_EMPTY_STRUCT_CTOR(scalar_quotient_op)"},
{"lineNum":"  410","line":"#else"},
{"lineNum":"  411","line":"  scalar_quotient_op() {"},
{"lineNum":"  412","line":"    EIGEN_SCALAR_BINARY_OP_PLUGIN"},
{"lineNum":"  413","line":"  }"},
{"lineNum":"  414","line":"#endif"},
{"lineNum":"  415","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a / b; }","class":"lineNoCov","hits":"0","possible_hits":"26",},
{"lineNum":"  416","line":"  template<typename Packet>"},
{"lineNum":"  417","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Packet packetOp(const Packet& a, const Packet& b) const"},
{"lineNum":"  418","line":"  { return internal::pdiv(a,b); }"},
{"lineNum":"  419","line":"};"},
{"lineNum":"  420","line":"template<typename LhsScalar,typename RhsScalar>"},
{"lineNum":"  421","line":"struct functor_traits<scalar_quotient_op<LhsScalar,RhsScalar> > {"},
{"lineNum":"  422","line":"  typedef typename scalar_quotient_op<LhsScalar,RhsScalar>::result_type result_type;"},
{"lineNum":"  423","line":"  enum {"},
{"lineNum":"  424","line":"    PacketAccess = is_same<LhsScalar,RhsScalar>::value && packet_traits<LhsScalar>::HasDiv && packet_traits<RhsScalar>::HasDiv,"},
{"lineNum":"  425","line":"    Cost = scalar_div_cost<result_type,PacketAccess>::value"},
{"lineNum":"  426","line":"  };"},
{"lineNum":"  427","line":"};"},
{"lineNum":"  428","line":""},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":""},
{"lineNum":"  431","line":"/** \\internal"},
{"lineNum":"  432","line":"  * \\brief Template functor to compute the and of two booleans"},
{"lineNum":"  433","line":"  *"},
{"lineNum":"  434","line":"  * \\sa class CwiseBinaryOp, ArrayBase::operator&&"},
{"lineNum":"  435","line":"  */"},
{"lineNum":"  436","line":"struct scalar_boolean_and_op {"},
{"lineNum":"  437","line":"  EIGEN_EMPTY_STRUCT_CTOR(scalar_boolean_and_op)"},
{"lineNum":"  438","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE bool operator() (const bool& a, const bool& b) const { return a && b; }"},
{"lineNum":"  439","line":"  template<typename Packet>"},
{"lineNum":"  440","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Packet packetOp(const Packet& a, const Packet& b) const"},
{"lineNum":"  441","line":"  { return internal::pand(a,b); }"},
{"lineNum":"  442","line":"};"},
{"lineNum":"  443","line":"template<> struct functor_traits<scalar_boolean_and_op> {"},
{"lineNum":"  444","line":"  enum {"},
{"lineNum":"  445","line":"    Cost = NumTraits<bool>::AddCost,"},
{"lineNum":"  446","line":"    PacketAccess = true"},
{"lineNum":"  447","line":"  };"},
{"lineNum":"  448","line":"};"},
{"lineNum":"  449","line":""},
{"lineNum":"  450","line":"/** \\internal"},
{"lineNum":"  451","line":"  * \\brief Template functor to compute the or of two booleans"},
{"lineNum":"  452","line":"  *"},
{"lineNum":"  453","line":"  * \\sa class CwiseBinaryOp, ArrayBase::operator||"},
{"lineNum":"  454","line":"  */"},
{"lineNum":"  455","line":"struct scalar_boolean_or_op {"},
{"lineNum":"  456","line":"  EIGEN_EMPTY_STRUCT_CTOR(scalar_boolean_or_op)"},
{"lineNum":"  457","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE bool operator() (const bool& a, const bool& b) const { return a || b; }"},
{"lineNum":"  458","line":"  template<typename Packet>"},
{"lineNum":"  459","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Packet packetOp(const Packet& a, const Packet& b) const"},
{"lineNum":"  460","line":"  { return internal::por(a,b); }"},
{"lineNum":"  461","line":"};"},
{"lineNum":"  462","line":"template<> struct functor_traits<scalar_boolean_or_op> {"},
{"lineNum":"  463","line":"  enum {"},
{"lineNum":"  464","line":"    Cost = NumTraits<bool>::AddCost,"},
{"lineNum":"  465","line":"    PacketAccess = true"},
{"lineNum":"  466","line":"  };"},
{"lineNum":"  467","line":"};"},
{"lineNum":"  468","line":""},
{"lineNum":"  469","line":"/** \\internal"},
{"lineNum":"  470","line":" * \\brief Template functor to compute the xor of two booleans"},
{"lineNum":"  471","line":" *"},
{"lineNum":"  472","line":" * \\sa class CwiseBinaryOp, ArrayBase::operator^"},
{"lineNum":"  473","line":" */"},
{"lineNum":"  474","line":"struct scalar_boolean_xor_op {"},
{"lineNum":"  475","line":"  EIGEN_EMPTY_STRUCT_CTOR(scalar_boolean_xor_op)"},
{"lineNum":"  476","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE bool operator() (const bool& a, const bool& b) const { return a ^ b; }"},
{"lineNum":"  477","line":"  template<typename Packet>"},
{"lineNum":"  478","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Packet packetOp(const Packet& a, const Packet& b) const"},
{"lineNum":"  479","line":"  { return internal::pxor(a,b); }"},
{"lineNum":"  480","line":"};"},
{"lineNum":"  481","line":"template<> struct functor_traits<scalar_boolean_xor_op> {"},
{"lineNum":"  482","line":"  enum {"},
{"lineNum":"  483","line":"    Cost = NumTraits<bool>::AddCost,"},
{"lineNum":"  484","line":"    PacketAccess = true"},
{"lineNum":"  485","line":"  };"},
{"lineNum":"  486","line":"};"},
{"lineNum":"  487","line":""},
{"lineNum":"  488","line":"/** \\internal"},
{"lineNum":"  489","line":"  * \\brief Template functor to compute the absolute difference of two scalars"},
{"lineNum":"  490","line":"  *"},
{"lineNum":"  491","line":"  * \\sa class CwiseBinaryOp, MatrixBase::absolute_difference"},
{"lineNum":"  492","line":"  */"},
{"lineNum":"  493","line":"template<typename LhsScalar,typename RhsScalar>"},
{"lineNum":"  494","line":"struct scalar_absolute_difference_op : binary_op_base<LhsScalar,RhsScalar>"},
{"lineNum":"  495","line":"{"},
{"lineNum":"  496","line":"  typedef typename ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_absolute_difference_op>::ReturnType result_type;"},
{"lineNum":"  497","line":"#ifndef EIGEN_SCALAR_BINARY_OP_PLUGIN"},
{"lineNum":"  498","line":"  EIGEN_EMPTY_STRUCT_CTOR(scalar_absolute_difference_op)"},
{"lineNum":"  499","line":"#else"},
{"lineNum":"  500","line":"  scalar_absolute_difference_op() {"},
{"lineNum":"  501","line":"    EIGEN_SCALAR_BINARY_OP_PLUGIN"},
{"lineNum":"  502","line":"  }"},
{"lineNum":"  503","line":"#endif"},
{"lineNum":"  504","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const result_type operator() (const LhsScalar& a, const RhsScalar& b) const"},
{"lineNum":"  505","line":"  { return numext::absdiff(a,b); }"},
{"lineNum":"  506","line":"  template<typename Packet>"},
{"lineNum":"  507","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Packet packetOp(const Packet& a, const Packet& b) const"},
{"lineNum":"  508","line":"  { return internal::pabsdiff(a,b); }"},
{"lineNum":"  509","line":"};"},
{"lineNum":"  510","line":"template<typename LhsScalar,typename RhsScalar>"},
{"lineNum":"  511","line":"struct functor_traits<scalar_absolute_difference_op<LhsScalar,RhsScalar> > {"},
{"lineNum":"  512","line":"  enum {"},
{"lineNum":"  513","line":"    Cost = (NumTraits<LhsScalar>::AddCost+NumTraits<RhsScalar>::AddCost)/2,"},
{"lineNum":"  514","line":"    PacketAccess = is_same<LhsScalar,RhsScalar>::value && packet_traits<LhsScalar>::HasAbsDiff"},
{"lineNum":"  515","line":"  };"},
{"lineNum":"  516","line":"};"},
{"lineNum":"  517","line":""},
{"lineNum":"  518","line":""},
{"lineNum":"  519","line":""},
{"lineNum":"  520","line":"//---------- binary functors bound to a constant, thus appearing as a unary functor ----------"},
{"lineNum":"  521","line":""},
{"lineNum":"  522","line":"// The following two classes permits to turn any binary functor into a unary one with one argument bound to a constant value."},
{"lineNum":"  523","line":"// They are analogues to std::binder1st/binder2nd but with the following differences:"},
{"lineNum":"  524","line":"//  - they are compatible with packetOp"},
{"lineNum":"  525","line":"//  - they are portable across C++ versions (the std::binder* are deprecated in C++11)"},
{"lineNum":"  526","line":"template<typename BinaryOp> struct bind1st_op : BinaryOp {"},
{"lineNum":"  527","line":""},
{"lineNum":"  528","line":"  typedef typename BinaryOp::first_argument_type  first_argument_type;"},
{"lineNum":"  529","line":"  typedef typename BinaryOp::second_argument_type second_argument_type;"},
{"lineNum":"  530","line":"  typedef typename BinaryOp::result_type          result_type;"},
{"lineNum":"  531","line":""},
{"lineNum":"  532","line":"  EIGEN_DEVICE_FUNC explicit bind1st_op(const first_argument_type &val) : m_value(val) {}"},
{"lineNum":"  533","line":""},
{"lineNum":"  534","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const result_type operator() (const second_argument_type& b) const { return BinaryOp::operator()(m_value,b); }"},
{"lineNum":"  535","line":""},
{"lineNum":"  536","line":"  template<typename Packet>"},
{"lineNum":"  537","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Packet packetOp(const Packet& b) const"},
{"lineNum":"  538","line":"  { return BinaryOp::packetOp(internal::pset1<Packet>(m_value), b); }"},
{"lineNum":"  539","line":""},
{"lineNum":"  540","line":"  first_argument_type m_value;"},
{"lineNum":"  541","line":"};"},
{"lineNum":"  542","line":"template<typename BinaryOp> struct functor_traits<bind1st_op<BinaryOp> > : functor_traits<BinaryOp> {};"},
{"lineNum":"  543","line":""},
{"lineNum":"  544","line":""},
{"lineNum":"  545","line":"template<typename BinaryOp> struct bind2nd_op : BinaryOp {"},
{"lineNum":"  546","line":""},
{"lineNum":"  547","line":"  typedef typename BinaryOp::first_argument_type  first_argument_type;"},
{"lineNum":"  548","line":"  typedef typename BinaryOp::second_argument_type second_argument_type;"},
{"lineNum":"  549","line":"  typedef typename BinaryOp::result_type          result_type;"},
{"lineNum":"  550","line":""},
{"lineNum":"  551","line":"  EIGEN_DEVICE_FUNC explicit bind2nd_op(const second_argument_type &val) : m_value(val) {}"},
{"lineNum":"  552","line":""},
{"lineNum":"  553","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const result_type operator() (const first_argument_type& a) const { return BinaryOp::operator()(a,m_value); }"},
{"lineNum":"  554","line":""},
{"lineNum":"  555","line":"  template<typename Packet>"},
{"lineNum":"  556","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Packet packetOp(const Packet& a) const"},
{"lineNum":"  557","line":"  { return BinaryOp::packetOp(a,internal::pset1<Packet>(m_value)); }"},
{"lineNum":"  558","line":""},
{"lineNum":"  559","line":"  second_argument_type m_value;"},
{"lineNum":"  560","line":"};"},
{"lineNum":"  561","line":"template<typename BinaryOp> struct functor_traits<bind2nd_op<BinaryOp> > : functor_traits<BinaryOp> {};"},
{"lineNum":"  562","line":""},
{"lineNum":"  563","line":""},
{"lineNum":"  564","line":"} // end namespace internal"},
{"lineNum":"  565","line":""},
{"lineNum":"  566","line":"} // end namespace Eigen"},
{"lineNum":"  567","line":""},
{"lineNum":"  568","line":"#endif // EIGEN_BINARY_FUNCTORS_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 4, "covered" : 0,};
var merged_data = [];
