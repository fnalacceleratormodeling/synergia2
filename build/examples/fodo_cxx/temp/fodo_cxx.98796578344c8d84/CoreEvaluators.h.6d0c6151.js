var data = {lines:[
{"lineNum":"    1","line":"// This file is part of Eigen, a lightweight C++ template library"},
{"lineNum":"    2","line":"// for linear algebra."},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Copyright (C) 2011 Benoit Jacob <jacob.benoit.1@gmail.com>"},
{"lineNum":"    5","line":"// Copyright (C) 2011-2014 Gael Guennebaud <gael.guennebaud@inria.fr>"},
{"lineNum":"    6","line":"// Copyright (C) 2011-2012 Jitse Niesen <jitse@maths.leeds.ac.uk>"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"// This Source Code Form is subject to the terms of the Mozilla"},
{"lineNum":"    9","line":"// Public License v. 2.0. If a copy of the MPL was not distributed"},
{"lineNum":"   10","line":"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/."},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"#ifndef EIGEN_COREEVALUATORS_H"},
{"lineNum":"   14","line":"#define EIGEN_COREEVALUATORS_H"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"#include \"./InternalHeaderCheck.h\""},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"namespace Eigen {"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"namespace internal {"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"// This class returns the evaluator kind from the expression storage kind."},
{"lineNum":"   23","line":"// Default assumes index based accessors"},
{"lineNum":"   24","line":"template<typename StorageKind>"},
{"lineNum":"   25","line":"struct storage_kind_to_evaluator_kind {"},
{"lineNum":"   26","line":"  typedef IndexBased Kind;"},
{"lineNum":"   27","line":"};"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"// This class returns the evaluator shape from the expression storage kind."},
{"lineNum":"   30","line":"// It can be Dense, Sparse, Triangular, Diagonal, SelfAdjoint, Band, etc."},
{"lineNum":"   31","line":"template<typename StorageKind> struct storage_kind_to_shape;"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"template<> struct storage_kind_to_shape<Dense>                  { typedef DenseShape Shape;           };"},
{"lineNum":"   34","line":"template<> struct storage_kind_to_shape<SolverStorage>          { typedef SolverShape Shape;           };"},
{"lineNum":"   35","line":"template<> struct storage_kind_to_shape<PermutationStorage>     { typedef PermutationShape Shape;     };"},
{"lineNum":"   36","line":"template<> struct storage_kind_to_shape<TranspositionsStorage>  { typedef TranspositionsShape Shape;  };"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"// Evaluators have to be specialized with respect to various criteria such as:"},
{"lineNum":"   39","line":"//  - storage/structure/shape"},
{"lineNum":"   40","line":"//  - scalar type"},
{"lineNum":"   41","line":"//  - etc."},
{"lineNum":"   42","line":"// Therefore, we need specialization of evaluator providing additional template arguments for each kind of evaluators."},
{"lineNum":"   43","line":"// We currently distinguish the following kind of evaluators:"},
{"lineNum":"   44","line":"// - unary_evaluator    for expressions taking only one arguments (CwiseUnaryOp, CwiseUnaryView, Transpose, MatrixWrapper, ArrayWrapper, Reverse, Replicate)"},
{"lineNum":"   45","line":"// - binary_evaluator   for expression taking two arguments (CwiseBinaryOp)"},
{"lineNum":"   46","line":"// - ternary_evaluator   for expression taking three arguments (CwiseTernaryOp)"},
{"lineNum":"   47","line":"// - product_evaluator  for linear algebra products (Product); special case of binary_evaluator because it requires additional tags for dispatching."},
{"lineNum":"   48","line":"// - mapbase_evaluator  for Map, Block, Ref"},
{"lineNum":"   49","line":"// - block_evaluator    for Block (special dispatching to a mapbase_evaluator or unary_evaluator)"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"template< typename T,"},
{"lineNum":"   52","line":"          typename Arg1Kind   = typename evaluator_traits<typename T::Arg1>::Kind,"},
{"lineNum":"   53","line":"          typename Arg2Kind   = typename evaluator_traits<typename T::Arg2>::Kind,"},
{"lineNum":"   54","line":"          typename Arg3Kind   = typename evaluator_traits<typename T::Arg3>::Kind,"},
{"lineNum":"   55","line":"          typename Arg1Scalar = typename traits<typename T::Arg1>::Scalar,"},
{"lineNum":"   56","line":"          typename Arg2Scalar = typename traits<typename T::Arg2>::Scalar,"},
{"lineNum":"   57","line":"          typename Arg3Scalar = typename traits<typename T::Arg3>::Scalar> struct ternary_evaluator;"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"template< typename T,"},
{"lineNum":"   60","line":"          typename LhsKind   = typename evaluator_traits<typename T::Lhs>::Kind,"},
{"lineNum":"   61","line":"          typename RhsKind   = typename evaluator_traits<typename T::Rhs>::Kind,"},
{"lineNum":"   62","line":"          typename LhsScalar = typename traits<typename T::Lhs>::Scalar,"},
{"lineNum":"   63","line":"          typename RhsScalar = typename traits<typename T::Rhs>::Scalar> struct binary_evaluator;"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"template< typename T,"},
{"lineNum":"   66","line":"          typename Kind   = typename evaluator_traits<typename T::NestedExpression>::Kind,"},
{"lineNum":"   67","line":"          typename Scalar = typename T::Scalar> struct unary_evaluator;"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"// evaluator_traits<T> contains traits for evaluator<T>"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"template<typename T>"},
{"lineNum":"   72","line":"struct evaluator_traits_base"},
{"lineNum":"   73","line":"{"},
{"lineNum":"   74","line":"  // by default, get evaluator kind and shape from storage"},
{"lineNum":"   75","line":"  typedef typename storage_kind_to_evaluator_kind<typename traits<T>::StorageKind>::Kind Kind;"},
{"lineNum":"   76","line":"  typedef typename storage_kind_to_shape<typename traits<T>::StorageKind>::Shape Shape;"},
{"lineNum":"   77","line":"};"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"// Default evaluator traits"},
{"lineNum":"   80","line":"template<typename T>"},
{"lineNum":"   81","line":"struct evaluator_traits : public evaluator_traits_base<T>"},
{"lineNum":"   82","line":"{"},
{"lineNum":"   83","line":"};"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"template<typename T, typename Shape = typename evaluator_traits<T>::Shape >"},
{"lineNum":"   86","line":"struct evaluator_assume_aliasing {"},
{"lineNum":"   87","line":"  static const bool value = false;"},
{"lineNum":"   88","line":"};"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"// By default, we assume a unary expression:"},
{"lineNum":"   91","line":"template<typename T>"},
{"lineNum":"   92","line":"struct evaluator : public unary_evaluator<T>"},
{"lineNum":"   93","line":"{"},
{"lineNum":"   94","line":"  typedef unary_evaluator<T> Base;"},
{"lineNum":"   95","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"   96","line":"  explicit evaluator(const T& xpr) : Base(xpr) {}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   97","line":"};"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"// TODO: Think about const-correctness"},
{"lineNum":"  101","line":"template<typename T>"},
{"lineNum":"  102","line":"struct evaluator<const T>"},
{"lineNum":"  103","line":"  : evaluator<T>"},
{"lineNum":"  104","line":"{"},
{"lineNum":"  105","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  106","line":"  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  107","line":"};"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"// ---------- base class for all evaluators ----------"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"template<typename ExpressionType>"},
{"lineNum":"  112","line":"struct evaluator_base"},
{"lineNum":"  113","line":"{"},
{"lineNum":"  114","line":"  // TODO that\'s not very nice to have to propagate all these traits. They are currently only needed to handle outer,inner indices."},
{"lineNum":"  115","line":"  typedef traits<ExpressionType> ExpressionTraits;"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"  enum {"},
{"lineNum":"  118","line":"    Alignment = 0"},
{"lineNum":"  119","line":"  };"},
{"lineNum":"  120","line":"  // noncopyable:"},
{"lineNum":"  121","line":"  // Don\'t make this class inherit noncopyable as this kills EBO (Empty Base Optimization)"},
{"lineNum":"  122","line":"  // and make complex evaluator much larger than then should do."},
{"lineNum":"  123","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}"},
{"lineNum":"  124","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}"},
{"lineNum":"  125","line":"private:"},
{"lineNum":"  126","line":"  EIGEN_DEVICE_FUNC evaluator_base(const evaluator_base&);"},
{"lineNum":"  127","line":"  EIGEN_DEVICE_FUNC const evaluator_base& operator=(const evaluator_base&);"},
{"lineNum":"  128","line":"};"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"// -------------------- Matrix and Array --------------------"},
{"lineNum":"  131","line":"//"},
{"lineNum":"  132","line":"// evaluator<PlainObjectBase> is a common base class for the"},
{"lineNum":"  133","line":"// Matrix and Array evaluators."},
{"lineNum":"  134","line":"// Here we directly specialize evaluator. This is not really a unary expression, and it is, by definition, dense,"},
{"lineNum":"  135","line":"// so no need for more sophisticated dispatching."},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"// this helper permits to completely eliminate m_outerStride if it is known at compiletime."},
{"lineNum":"  138","line":"template<typename Scalar,int OuterStride> class plainobjectbase_evaluator_data {"},
{"lineNum":"  139","line":"public:"},
{"lineNum":"  140","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  141","line":"  plainobjectbase_evaluator_data(const Scalar* ptr, Index outerStride) : data(ptr)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  142","line":"  {"},
{"lineNum":"  143","line":"#ifndef EIGEN_INTERNAL_DEBUGGING"},
{"lineNum":"  144","line":"    EIGEN_UNUSED_VARIABLE(outerStride);"},
{"lineNum":"  145","line":"#endif"},
{"lineNum":"  146","line":"    eigen_internal_assert(outerStride==OuterStride);"},
{"lineNum":"  147","line":"  }"},
{"lineNum":"  148","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR"},
{"lineNum":"  149","line":"  Index outerStride() const EIGEN_NOEXCEPT { return OuterStride; }"},
{"lineNum":"  150","line":"  const Scalar *data;"},
{"lineNum":"  151","line":"};"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"template<typename Scalar> class plainobjectbase_evaluator_data<Scalar,Dynamic> {"},
{"lineNum":"  154","line":"public:"},
{"lineNum":"  155","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  156","line":"  plainobjectbase_evaluator_data(const Scalar* ptr, Index outerStride) : data(ptr), m_outerStride(outerStride) {}","class":"lineNoCov","hits":"0","possible_hits":"41",},
{"lineNum":"  157","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  158","line":"  Index outerStride() const { return m_outerStride; }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  159","line":"  const Scalar *data;"},
{"lineNum":"  160","line":"protected:"},
{"lineNum":"  161","line":"  Index m_outerStride;"},
{"lineNum":"  162","line":"};"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"template<typename Derived>"},
{"lineNum":"  165","line":"struct evaluator<PlainObjectBase<Derived> >"},
{"lineNum":"  166","line":"  : evaluator_base<Derived>"},
{"lineNum":"  167","line":"{"},
{"lineNum":"  168","line":"  typedef PlainObjectBase<Derived> PlainObjectType;"},
{"lineNum":"  169","line":"  typedef typename PlainObjectType::Scalar Scalar;"},
{"lineNum":"  170","line":"  typedef typename PlainObjectType::CoeffReturnType CoeffReturnType;"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"  enum {"},
{"lineNum":"  173","line":"    IsRowMajor = PlainObjectType::IsRowMajor,"},
{"lineNum":"  174","line":"    IsVectorAtCompileTime = PlainObjectType::IsVectorAtCompileTime,"},
{"lineNum":"  175","line":"    RowsAtCompileTime = PlainObjectType::RowsAtCompileTime,"},
{"lineNum":"  176","line":"    ColsAtCompileTime = PlainObjectType::ColsAtCompileTime,"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"    CoeffReadCost = NumTraits<Scalar>::ReadCost,"},
{"lineNum":"  179","line":"    Flags = traits<Derived>::EvaluatorFlags,"},
{"lineNum":"  180","line":"    Alignment = traits<Derived>::Alignment"},
{"lineNum":"  181","line":"  };"},
{"lineNum":"  182","line":"  enum {"},
{"lineNum":"  183","line":"    // We do not need to know the outer stride for vectors"},
{"lineNum":"  184","line":"    OuterStrideAtCompileTime = IsVectorAtCompileTime  ? 0"},
{"lineNum":"  185","line":"                                                      : int(IsRowMajor) ? ColsAtCompileTime"},
{"lineNum":"  186","line":"                                                                        : RowsAtCompileTime"},
{"lineNum":"  187","line":"  };"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  190","line":"  evaluator()"},
{"lineNum":"  191","line":"    : m_d(0,OuterStrideAtCompileTime)"},
{"lineNum":"  192","line":"  {"},
{"lineNum":"  193","line":"    EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost);"},
{"lineNum":"  194","line":"  }"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  197","line":"  explicit evaluator(const PlainObjectType& m)"},
{"lineNum":"  198","line":"    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())"},
{"lineNum":"  199","line":"  {"},
{"lineNum":"  200","line":"    EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost);"},
{"lineNum":"  201","line":"  }"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  204","line":"  CoeffReturnType coeff(Index row, Index col) const"},
{"lineNum":"  205","line":"  {"},
{"lineNum":"  206","line":"    if (IsRowMajor)"},
{"lineNum":"  207","line":"      return m_d.data[row * m_d.outerStride() + col];","class":"lineNoCov","hits":"0","possible_hits":"22",},
{"lineNum":"  208","line":"    else"},
{"lineNum":"  209","line":"      return m_d.data[row + col * m_d.outerStride()];","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"  210","line":"  }"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  213","line":"  CoeffReturnType coeff(Index index) const"},
{"lineNum":"  214","line":"  {"},
{"lineNum":"  215","line":"    return m_d.data[index];","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  216","line":"  }"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  219","line":"  Scalar& coeffRef(Index row, Index col)"},
{"lineNum":"  220","line":"  {"},
{"lineNum":"  221","line":"    if (IsRowMajor)"},
{"lineNum":"  222","line":"      return const_cast<Scalar*>(m_d.data)[row * m_d.outerStride() + col];","class":"lineNoCov","hits":"0","possible_hits":"27",},
{"lineNum":"  223","line":"    else"},
{"lineNum":"  224","line":"      return const_cast<Scalar*>(m_d.data)[row + col * m_d.outerStride()];","class":"lineNoCov","hits":"0","possible_hits":"17",},
{"lineNum":"  225","line":"  }"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  228","line":"  Scalar& coeffRef(Index index)"},
{"lineNum":"  229","line":"  {"},
{"lineNum":"  230","line":"    return const_cast<Scalar*>(m_d.data)[index];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  231","line":"  }"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"  template<int LoadMode, typename PacketType>"},
{"lineNum":"  234","line":"  EIGEN_STRONG_INLINE"},
{"lineNum":"  235","line":"  PacketType packet(Index row, Index col) const"},
{"lineNum":"  236","line":"  {"},
{"lineNum":"  237","line":"    if (IsRowMajor)"},
{"lineNum":"  238","line":"      return ploadt<PacketType, LoadMode>(m_d.data + row * m_d.outerStride() + col);","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  239","line":"    else"},
{"lineNum":"  240","line":"      return ploadt<PacketType, LoadMode>(m_d.data + row + col * m_d.outerStride());","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  241","line":"  }"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"  template<int LoadMode, typename PacketType>"},
{"lineNum":"  244","line":"  EIGEN_STRONG_INLINE"},
{"lineNum":"  245","line":"  PacketType packet(Index index) const"},
{"lineNum":"  246","line":"  {"},
{"lineNum":"  247","line":"    return ploadt<PacketType, LoadMode>(m_d.data + index);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  248","line":"  }"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"  template<int StoreMode,typename PacketType>"},
{"lineNum":"  251","line":"  EIGEN_STRONG_INLINE"},
{"lineNum":"  252","line":"  void writePacket(Index row, Index col, const PacketType& x)"},
{"lineNum":"  253","line":"  {"},
{"lineNum":"  254","line":"    if (IsRowMajor)"},
{"lineNum":"  255","line":"      return pstoret<Scalar, PacketType, StoreMode>"},
{"lineNum":"  256","line":"\t            (const_cast<Scalar*>(m_d.data) + row * m_d.outerStride() + col, x);"},
{"lineNum":"  257","line":"    else"},
{"lineNum":"  258","line":"      return pstoret<Scalar, PacketType, StoreMode>"},
{"lineNum":"  259","line":"                    (const_cast<Scalar*>(m_d.data) + row + col * m_d.outerStride(), x);"},
{"lineNum":"  260","line":"  }"},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"  template<int StoreMode, typename PacketType>"},
{"lineNum":"  263","line":"  EIGEN_STRONG_INLINE"},
{"lineNum":"  264","line":"  void writePacket(Index index, const PacketType& x)"},
{"lineNum":"  265","line":"  {"},
{"lineNum":"  266","line":"    return pstoret<Scalar, PacketType, StoreMode>(const_cast<Scalar*>(m_d.data) + index, x);"},
{"lineNum":"  267","line":"  }"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"protected:"},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"  plainobjectbase_evaluator_data<Scalar,OuterStrideAtCompileTime> m_d;"},
{"lineNum":"  272","line":"};"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"template<typename Scalar, int Rows, int Cols, int Options, int MaxRows, int MaxCols>"},
{"lineNum":"  275","line":"struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >"},
{"lineNum":"  276","line":"  : evaluator<PlainObjectBase<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> > >"},
{"lineNum":"  277","line":"{"},
{"lineNum":"  278","line":"  typedef Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> XprType;"},
{"lineNum":"  279","line":""},
{"lineNum":"  280","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  281","line":"  evaluator() {}"},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  284","line":"  explicit evaluator(const XprType& m)"},
{"lineNum":"  285","line":"    : evaluator<PlainObjectBase<XprType> >(m)"},
{"lineNum":"  286","line":"  { }"},
{"lineNum":"  287","line":"};"},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"template<typename Scalar, int Rows, int Cols, int Options, int MaxRows, int MaxCols>"},
{"lineNum":"  290","line":"struct evaluator<Array<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >"},
{"lineNum":"  291","line":"  : evaluator<PlainObjectBase<Array<Scalar, Rows, Cols, Options, MaxRows, MaxCols> > >"},
{"lineNum":"  292","line":"{"},
{"lineNum":"  293","line":"  typedef Array<Scalar, Rows, Cols, Options, MaxRows, MaxCols> XprType;"},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  296","line":"  evaluator() {}"},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  299","line":"  explicit evaluator(const XprType& m)"},
{"lineNum":"  300","line":"    : evaluator<PlainObjectBase<XprType> >(m)"},
{"lineNum":"  301","line":"  { }"},
{"lineNum":"  302","line":"};"},
{"lineNum":"  303","line":""},
{"lineNum":"  304","line":"// -------------------- Transpose --------------------"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"template<typename ArgType>"},
{"lineNum":"  307","line":"struct unary_evaluator<Transpose<ArgType>, IndexBased>"},
{"lineNum":"  308","line":"  : evaluator_base<Transpose<ArgType> >"},
{"lineNum":"  309","line":"{"},
{"lineNum":"  310","line":"  typedef Transpose<ArgType> XprType;"},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":"  enum {"},
{"lineNum":"  313","line":"    CoeffReadCost = evaluator<ArgType>::CoeffReadCost,"},
{"lineNum":"  314","line":"    Flags = evaluator<ArgType>::Flags ^ RowMajorBit,"},
{"lineNum":"  315","line":"    Alignment = evaluator<ArgType>::Alignment"},
{"lineNum":"  316","line":"  };"},
{"lineNum":"  317","line":""},
{"lineNum":"  318","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  319","line":"  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}"},
{"lineNum":"  320","line":""},
{"lineNum":"  321","line":"  typedef typename XprType::Scalar Scalar;"},
{"lineNum":"  322","line":"  typedef typename XprType::CoeffReturnType CoeffReturnType;"},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  325","line":"  CoeffReturnType coeff(Index row, Index col) const"},
{"lineNum":"  326","line":"  {"},
{"lineNum":"  327","line":"    return m_argImpl.coeff(col, row);","class":"lineNoCov","hits":"0","possible_hits":"37",},
{"lineNum":"  328","line":"  }"},
{"lineNum":"  329","line":""},
{"lineNum":"  330","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  331","line":"  CoeffReturnType coeff(Index index) const"},
{"lineNum":"  332","line":"  {"},
{"lineNum":"  333","line":"    return m_argImpl.coeff(index);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  334","line":"  }"},
{"lineNum":"  335","line":""},
{"lineNum":"  336","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  337","line":"  Scalar& coeffRef(Index row, Index col)"},
{"lineNum":"  338","line":"  {"},
{"lineNum":"  339","line":"    return m_argImpl.coeffRef(col, row);"},
{"lineNum":"  340","line":"  }"},
{"lineNum":"  341","line":""},
{"lineNum":"  342","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  343","line":"  typename XprType::Scalar& coeffRef(Index index)"},
{"lineNum":"  344","line":"  {"},
{"lineNum":"  345","line":"    return m_argImpl.coeffRef(index);"},
{"lineNum":"  346","line":"  }"},
{"lineNum":"  347","line":""},
{"lineNum":"  348","line":"  template<int LoadMode, typename PacketType>"},
{"lineNum":"  349","line":"  EIGEN_STRONG_INLINE"},
{"lineNum":"  350","line":"  PacketType packet(Index row, Index col) const"},
{"lineNum":"  351","line":"  {"},
{"lineNum":"  352","line":"    return m_argImpl.template packet<LoadMode,PacketType>(col, row);"},
{"lineNum":"  353","line":"  }"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"  template<int LoadMode, typename PacketType>"},
{"lineNum":"  356","line":"  EIGEN_STRONG_INLINE"},
{"lineNum":"  357","line":"  PacketType packet(Index index) const"},
{"lineNum":"  358","line":"  {"},
{"lineNum":"  359","line":"    return m_argImpl.template packet<LoadMode,PacketType>(index);"},
{"lineNum":"  360","line":"  }"},
{"lineNum":"  361","line":""},
{"lineNum":"  362","line":"  template<int StoreMode, typename PacketType>"},
{"lineNum":"  363","line":"  EIGEN_STRONG_INLINE"},
{"lineNum":"  364","line":"  void writePacket(Index row, Index col, const PacketType& x)"},
{"lineNum":"  365","line":"  {"},
{"lineNum":"  366","line":"    m_argImpl.template writePacket<StoreMode,PacketType>(col, row, x);"},
{"lineNum":"  367","line":"  }"},
{"lineNum":"  368","line":""},
{"lineNum":"  369","line":"  template<int StoreMode, typename PacketType>"},
{"lineNum":"  370","line":"  EIGEN_STRONG_INLINE"},
{"lineNum":"  371","line":"  void writePacket(Index index, const PacketType& x)"},
{"lineNum":"  372","line":"  {"},
{"lineNum":"  373","line":"    m_argImpl.template writePacket<StoreMode,PacketType>(index, x);"},
{"lineNum":"  374","line":"  }"},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"protected:"},
{"lineNum":"  377","line":"  evaluator<ArgType> m_argImpl;"},
{"lineNum":"  378","line":"};"},
{"lineNum":"  379","line":""},
{"lineNum":"  380","line":"// -------------------- CwiseNullaryOp --------------------"},
{"lineNum":"  381","line":"// Like Matrix and Array, this is not really a unary expression, so we directly specialize evaluator."},
{"lineNum":"  382","line":"// Likewise, there is not need to more sophisticated dispatching here."},
{"lineNum":"  383","line":""},
{"lineNum":"  384","line":"template<typename Scalar,typename NullaryOp,"},
{"lineNum":"  385","line":"         bool has_nullary = has_nullary_operator<NullaryOp>::value,"},
{"lineNum":"  386","line":"         bool has_unary   = has_unary_operator<NullaryOp>::value,"},
{"lineNum":"  387","line":"         bool has_binary  = has_binary_operator<NullaryOp>::value>"},
{"lineNum":"  388","line":"struct nullary_wrapper"},
{"lineNum":"  389","line":"{"},
{"lineNum":"  390","line":"  template <typename IndexType>"},
{"lineNum":"  391","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar operator()(const NullaryOp& op, IndexType i, IndexType j) const { return op(i,j); }"},
{"lineNum":"  392","line":"  template <typename IndexType>"},
{"lineNum":"  393","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar operator()(const NullaryOp& op, IndexType i) const { return op(i); }"},
{"lineNum":"  394","line":""},
{"lineNum":"  395","line":"  template <typename T, typename IndexType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T packetOp(const NullaryOp& op, IndexType i, IndexType j) const { return op.template packetOp<T>(i,j); }"},
{"lineNum":"  396","line":"  template <typename T, typename IndexType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T packetOp(const NullaryOp& op, IndexType i) const { return op.template packetOp<T>(i); }"},
{"lineNum":"  397","line":"};"},
{"lineNum":"  398","line":""},
{"lineNum":"  399","line":"template<typename Scalar,typename NullaryOp>"},
{"lineNum":"  400","line":"struct nullary_wrapper<Scalar,NullaryOp,true,false,false>"},
{"lineNum":"  401","line":"{"},
{"lineNum":"  402","line":"  template <typename IndexType>"},
{"lineNum":"  403","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar operator()(const NullaryOp& op, IndexType=0, IndexType=0) const { return op(); }"},
{"lineNum":"  404","line":"  template <typename T, typename IndexType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T packetOp(const NullaryOp& op, IndexType=0, IndexType=0) const { return op.template packetOp<T>(); }"},
{"lineNum":"  405","line":"};"},
{"lineNum":"  406","line":""},
{"lineNum":"  407","line":"template<typename Scalar,typename NullaryOp>"},
{"lineNum":"  408","line":"struct nullary_wrapper<Scalar,NullaryOp,false,false,true>"},
{"lineNum":"  409","line":"{"},
{"lineNum":"  410","line":"  template <typename IndexType>"},
{"lineNum":"  411","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar operator()(const NullaryOp& op, IndexType i, IndexType j=0) const { return op(i,j); }"},
{"lineNum":"  412","line":"  template <typename T, typename IndexType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T packetOp(const NullaryOp& op, IndexType i, IndexType j=0) const { return op.template packetOp<T>(i,j); }"},
{"lineNum":"  413","line":"};"},
{"lineNum":"  414","line":""},
{"lineNum":"  415","line":"// We need the following specialization for vector-only functors assigned to a runtime vector,"},
{"lineNum":"  416","line":"// for instance, using linspace and assigning a RowVectorXd to a MatrixXd or even a row of a MatrixXd."},
{"lineNum":"  417","line":"// In this case, i==0 and j is used for the actual iteration."},
{"lineNum":"  418","line":"template<typename Scalar,typename NullaryOp>"},
{"lineNum":"  419","line":"struct nullary_wrapper<Scalar,NullaryOp,false,true,false>"},
{"lineNum":"  420","line":"{"},
{"lineNum":"  421","line":"  template <typename IndexType>"},
{"lineNum":"  422","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar operator()(const NullaryOp& op, IndexType i, IndexType j) const {"},
{"lineNum":"  423","line":"    eigen_assert(i==0 || j==0);"},
{"lineNum":"  424","line":"    return op(i+j);"},
{"lineNum":"  425","line":"  }"},
{"lineNum":"  426","line":"  template <typename T, typename IndexType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T packetOp(const NullaryOp& op, IndexType i, IndexType j) const {"},
{"lineNum":"  427","line":"    eigen_assert(i==0 || j==0);"},
{"lineNum":"  428","line":"    return op.template packetOp<T>(i+j);"},
{"lineNum":"  429","line":"  }"},
{"lineNum":"  430","line":""},
{"lineNum":"  431","line":"  template <typename IndexType>"},
{"lineNum":"  432","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar operator()(const NullaryOp& op, IndexType i) const { return op(i); }"},
{"lineNum":"  433","line":"  template <typename T, typename IndexType>"},
{"lineNum":"  434","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T packetOp(const NullaryOp& op, IndexType i) const { return op.template packetOp<T>(i); }"},
{"lineNum":"  435","line":"};"},
{"lineNum":"  436","line":""},
{"lineNum":"  437","line":"template<typename Scalar,typename NullaryOp>"},
{"lineNum":"  438","line":"struct nullary_wrapper<Scalar,NullaryOp,false,false,false> {};"},
{"lineNum":"  439","line":""},
{"lineNum":"  440","line":"#if 0 && EIGEN_COMP_MSVC>0"},
{"lineNum":"  441","line":"// Disable this ugly workaround. This is now handled in traits<Ref>::match,"},
{"lineNum":"  442","line":"// but this piece of code might still become handly if some other weird compilation"},
{"lineNum":"  443","line":"// erros pop up again."},
{"lineNum":"  444","line":""},
{"lineNum":"  445","line":"// MSVC exhibits a weird compilation error when"},
{"lineNum":"  446","line":"// compiling:"},
{"lineNum":"  447","line":"//    Eigen::MatrixXf A = MatrixXf::Random(3,3);"},
{"lineNum":"  448","line":"//    Ref<const MatrixXf> R = 2.f*A;"},
{"lineNum":"  449","line":"// and that has_*ary_operator<scalar_constant_op<float>> have not been instantiated yet."},
{"lineNum":"  450","line":"// The \"problem\" is that evaluator<2.f*A> is instantiated by traits<Ref>::match<2.f*A>"},
{"lineNum":"  451","line":"// and at that time has_*ary_operator<T> returns true regardless of T."},
{"lineNum":"  452","line":"// Then nullary_wrapper is badly instantiated as nullary_wrapper<.,.,true,true,true>."},
{"lineNum":"  453","line":"// The trick is thus to defer the proper instantiation of nullary_wrapper when coeff(),"},
{"lineNum":"  454","line":"// and packet() are really instantiated as implemented below:"},
{"lineNum":"  455","line":""},
{"lineNum":"  456","line":"// This is a simple wrapper around Index to enforce the re-instantiation of"},
{"lineNum":"  457","line":"// has_*ary_operator when needed."},
{"lineNum":"  458","line":"template<typename T> struct nullary_wrapper_workaround_msvc {"},
{"lineNum":"  459","line":"  nullary_wrapper_workaround_msvc(const T&);"},
{"lineNum":"  460","line":"  operator T()const;"},
{"lineNum":"  461","line":"};"},
{"lineNum":"  462","line":""},
{"lineNum":"  463","line":"template<typename Scalar,typename NullaryOp>"},
{"lineNum":"  464","line":"struct nullary_wrapper<Scalar,NullaryOp,true,true,true>"},
{"lineNum":"  465","line":"{"},
{"lineNum":"  466","line":"  template <typename IndexType>"},
{"lineNum":"  467","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar operator()(const NullaryOp& op, IndexType i, IndexType j) const {"},
{"lineNum":"  468","line":"    return nullary_wrapper<Scalar,NullaryOp,"},
{"lineNum":"  469","line":"    has_nullary_operator<NullaryOp,nullary_wrapper_workaround_msvc<IndexType> >::value,"},
{"lineNum":"  470","line":"    has_unary_operator<NullaryOp,nullary_wrapper_workaround_msvc<IndexType> >::value,"},
{"lineNum":"  471","line":"    has_binary_operator<NullaryOp,nullary_wrapper_workaround_msvc<IndexType> >::value>().operator()(op,i,j);"},
{"lineNum":"  472","line":"  }"},
{"lineNum":"  473","line":"  template <typename IndexType>"},
{"lineNum":"  474","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar operator()(const NullaryOp& op, IndexType i) const {"},
{"lineNum":"  475","line":"    return nullary_wrapper<Scalar,NullaryOp,"},
{"lineNum":"  476","line":"    has_nullary_operator<NullaryOp,nullary_wrapper_workaround_msvc<IndexType> >::value,"},
{"lineNum":"  477","line":"    has_unary_operator<NullaryOp,nullary_wrapper_workaround_msvc<IndexType> >::value,"},
{"lineNum":"  478","line":"    has_binary_operator<NullaryOp,nullary_wrapper_workaround_msvc<IndexType> >::value>().operator()(op,i);"},
{"lineNum":"  479","line":"  }"},
{"lineNum":"  480","line":""},
{"lineNum":"  481","line":"  template <typename T, typename IndexType>"},
{"lineNum":"  482","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T packetOp(const NullaryOp& op, IndexType i, IndexType j) const {"},
{"lineNum":"  483","line":"    return nullary_wrapper<Scalar,NullaryOp,"},
{"lineNum":"  484","line":"    has_nullary_operator<NullaryOp,nullary_wrapper_workaround_msvc<IndexType> >::value,"},
{"lineNum":"  485","line":"    has_unary_operator<NullaryOp,nullary_wrapper_workaround_msvc<IndexType> >::value,"},
{"lineNum":"  486","line":"    has_binary_operator<NullaryOp,nullary_wrapper_workaround_msvc<IndexType> >::value>().template packetOp<T>(op,i,j);"},
{"lineNum":"  487","line":"  }"},
{"lineNum":"  488","line":"  template <typename T, typename IndexType>"},
{"lineNum":"  489","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T packetOp(const NullaryOp& op, IndexType i) const {"},
{"lineNum":"  490","line":"    return nullary_wrapper<Scalar,NullaryOp,"},
{"lineNum":"  491","line":"    has_nullary_operator<NullaryOp,nullary_wrapper_workaround_msvc<IndexType> >::value,"},
{"lineNum":"  492","line":"    has_unary_operator<NullaryOp,nullary_wrapper_workaround_msvc<IndexType> >::value,"},
{"lineNum":"  493","line":"    has_binary_operator<NullaryOp,nullary_wrapper_workaround_msvc<IndexType> >::value>().template packetOp<T>(op,i);"},
{"lineNum":"  494","line":"  }"},
{"lineNum":"  495","line":"};"},
{"lineNum":"  496","line":"#endif // MSVC workaround"},
{"lineNum":"  497","line":""},
{"lineNum":"  498","line":"template<typename NullaryOp, typename PlainObjectType>"},
{"lineNum":"  499","line":"struct evaluator<CwiseNullaryOp<NullaryOp,PlainObjectType> >"},
{"lineNum":"  500","line":"  : evaluator_base<CwiseNullaryOp<NullaryOp,PlainObjectType> >"},
{"lineNum":"  501","line":"{"},
{"lineNum":"  502","line":"  typedef CwiseNullaryOp<NullaryOp,PlainObjectType> XprType;"},
{"lineNum":"  503","line":"  typedef typename internal::remove_all<PlainObjectType>::type PlainObjectTypeCleaned;"},
{"lineNum":"  504","line":""},
{"lineNum":"  505","line":"  enum {"},
{"lineNum":"  506","line":"    CoeffReadCost = internal::functor_traits<NullaryOp>::Cost,"},
{"lineNum":"  507","line":""},
{"lineNum":"  508","line":"    Flags = (evaluator<PlainObjectTypeCleaned>::Flags"},
{"lineNum":"  509","line":"          &  (  HereditaryBits"},
{"lineNum":"  510","line":"              | (functor_has_linear_access<NullaryOp>::ret  ? LinearAccessBit : 0)"},
{"lineNum":"  511","line":"              | (functor_traits<NullaryOp>::PacketAccess    ? PacketAccessBit : 0)))"},
{"lineNum":"  512","line":"          | (functor_traits<NullaryOp>::IsRepeatable ? 0 : EvalBeforeNestingBit),"},
{"lineNum":"  513","line":"    Alignment = AlignedMax"},
{"lineNum":"  514","line":"  };"},
{"lineNum":"  515","line":""},
{"lineNum":"  516","line":"  EIGEN_DEVICE_FUNC explicit evaluator(const XprType& n)"},
{"lineNum":"  517","line":"    : m_functor(n.functor()), m_wrapper()"},
{"lineNum":"  518","line":"  {"},
{"lineNum":"  519","line":"    EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost);"},
{"lineNum":"  520","line":"  }"},
{"lineNum":"  521","line":""},
{"lineNum":"  522","line":"  typedef typename XprType::CoeffReturnType CoeffReturnType;"},
{"lineNum":"  523","line":""},
{"lineNum":"  524","line":"  template <typename IndexType>"},
{"lineNum":"  525","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  526","line":"  CoeffReturnType coeff(IndexType row, IndexType col) const"},
{"lineNum":"  527","line":"  {"},
{"lineNum":"  528","line":"    return m_wrapper(m_functor, row, col);"},
{"lineNum":"  529","line":"  }"},
{"lineNum":"  530","line":""},
{"lineNum":"  531","line":"  template <typename IndexType>"},
{"lineNum":"  532","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  533","line":"  CoeffReturnType coeff(IndexType index) const"},
{"lineNum":"  534","line":"  {"},
{"lineNum":"  535","line":"    return m_wrapper(m_functor,index);"},
{"lineNum":"  536","line":"  }"},
{"lineNum":"  537","line":""},
{"lineNum":"  538","line":"  template<int LoadMode, typename PacketType, typename IndexType>"},
{"lineNum":"  539","line":"  EIGEN_STRONG_INLINE"},
{"lineNum":"  540","line":"  PacketType packet(IndexType row, IndexType col) const"},
{"lineNum":"  541","line":"  {"},
{"lineNum":"  542","line":"    return m_wrapper.template packetOp<PacketType>(m_functor, row, col);"},
{"lineNum":"  543","line":"  }"},
{"lineNum":"  544","line":""},
{"lineNum":"  545","line":"  template<int LoadMode, typename PacketType, typename IndexType>"},
{"lineNum":"  546","line":"  EIGEN_STRONG_INLINE"},
{"lineNum":"  547","line":"  PacketType packet(IndexType index) const"},
{"lineNum":"  548","line":"  {"},
{"lineNum":"  549","line":"    return m_wrapper.template packetOp<PacketType>(m_functor, index);"},
{"lineNum":"  550","line":"  }"},
{"lineNum":"  551","line":""},
{"lineNum":"  552","line":"protected:"},
{"lineNum":"  553","line":"  const NullaryOp m_functor;"},
{"lineNum":"  554","line":"  const internal::nullary_wrapper<CoeffReturnType,NullaryOp> m_wrapper;"},
{"lineNum":"  555","line":"};"},
{"lineNum":"  556","line":""},
{"lineNum":"  557","line":"// -------------------- CwiseUnaryOp --------------------"},
{"lineNum":"  558","line":""},
{"lineNum":"  559","line":"template<typename UnaryOp, typename ArgType>"},
{"lineNum":"  560","line":"struct unary_evaluator<CwiseUnaryOp<UnaryOp, ArgType>, IndexBased >"},
{"lineNum":"  561","line":"  : evaluator_base<CwiseUnaryOp<UnaryOp, ArgType> >"},
{"lineNum":"  562","line":"{"},
{"lineNum":"  563","line":"  typedef CwiseUnaryOp<UnaryOp, ArgType> XprType;"},
{"lineNum":"  564","line":""},
{"lineNum":"  565","line":"  enum {"},
{"lineNum":"  566","line":"    CoeffReadCost = int(evaluator<ArgType>::CoeffReadCost) + int(functor_traits<UnaryOp>::Cost),"},
{"lineNum":"  567","line":""},
{"lineNum":"  568","line":"    Flags = evaluator<ArgType>::Flags"},
{"lineNum":"  569","line":"          & (HereditaryBits | LinearAccessBit | (functor_traits<UnaryOp>::PacketAccess ? PacketAccessBit : 0)),"},
{"lineNum":"  570","line":"    Alignment = evaluator<ArgType>::Alignment"},
{"lineNum":"  571","line":"  };"},
{"lineNum":"  572","line":""},
{"lineNum":"  573","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  574","line":"  explicit unary_evaluator(const XprType& op) : m_d(op)"},
{"lineNum":"  575","line":"  {"},
{"lineNum":"  576","line":"    EIGEN_INTERNAL_CHECK_COST_VALUE(functor_traits<UnaryOp>::Cost);"},
{"lineNum":"  577","line":"    EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost);"},
{"lineNum":"  578","line":"  }"},
{"lineNum":"  579","line":""},
{"lineNum":"  580","line":"  typedef typename XprType::CoeffReturnType CoeffReturnType;"},
{"lineNum":"  581","line":""},
{"lineNum":"  582","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  583","line":"  CoeffReturnType coeff(Index row, Index col) const"},
{"lineNum":"  584","line":"  {"},
{"lineNum":"  585","line":"    return m_d.func()(m_d.argImpl.coeff(row, col));"},
{"lineNum":"  586","line":"  }"},
{"lineNum":"  587","line":""},
{"lineNum":"  588","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  589","line":"  CoeffReturnType coeff(Index index) const"},
{"lineNum":"  590","line":"  {"},
{"lineNum":"  591","line":"    return m_d.func()(m_d.argImpl.coeff(index));"},
{"lineNum":"  592","line":"  }"},
{"lineNum":"  593","line":""},
{"lineNum":"  594","line":"  template<int LoadMode, typename PacketType>"},
{"lineNum":"  595","line":"  EIGEN_STRONG_INLINE"},
{"lineNum":"  596","line":"  PacketType packet(Index row, Index col) const"},
{"lineNum":"  597","line":"  {"},
{"lineNum":"  598","line":"    return m_d.func().packetOp(m_d.argImpl.template packet<LoadMode, PacketType>(row, col));"},
{"lineNum":"  599","line":"  }"},
{"lineNum":"  600","line":""},
{"lineNum":"  601","line":"  template<int LoadMode, typename PacketType>"},
{"lineNum":"  602","line":"  EIGEN_STRONG_INLINE"},
{"lineNum":"  603","line":"  PacketType packet(Index index) const"},
{"lineNum":"  604","line":"  {"},
{"lineNum":"  605","line":"    return m_d.func().packetOp(m_d.argImpl.template packet<LoadMode, PacketType>(index));"},
{"lineNum":"  606","line":"  }"},
{"lineNum":"  607","line":""},
{"lineNum":"  608","line":"protected:"},
{"lineNum":"  609","line":""},
{"lineNum":"  610","line":"  // this helper permits to completely eliminate the functor if it is empty"},
{"lineNum":"  611","line":"  struct Data"},
{"lineNum":"  612","line":"  {"},
{"lineNum":"  613","line":"    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  614","line":"    Data(const XprType& xpr) : op(xpr.functor()), argImpl(xpr.nestedExpression()) {}"},
{"lineNum":"  615","line":"    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  616","line":"    const UnaryOp& func() const { return op; }"},
{"lineNum":"  617","line":"    UnaryOp op;"},
{"lineNum":"  618","line":"    evaluator<ArgType> argImpl;"},
{"lineNum":"  619","line":"  };"},
{"lineNum":"  620","line":""},
{"lineNum":"  621","line":"  Data m_d;"},
{"lineNum":"  622","line":"};"},
{"lineNum":"  623","line":""},
{"lineNum":"  624","line":"// -------------------- CwiseTernaryOp --------------------"},
{"lineNum":"  625","line":""},
{"lineNum":"  626","line":"// this is a ternary expression"},
{"lineNum":"  627","line":"template<typename TernaryOp, typename Arg1, typename Arg2, typename Arg3>"},
{"lineNum":"  628","line":"struct evaluator<CwiseTernaryOp<TernaryOp, Arg1, Arg2, Arg3> >"},
{"lineNum":"  629","line":"  : public ternary_evaluator<CwiseTernaryOp<TernaryOp, Arg1, Arg2, Arg3> >"},
{"lineNum":"  630","line":"{"},
{"lineNum":"  631","line":"  typedef CwiseTernaryOp<TernaryOp, Arg1, Arg2, Arg3> XprType;"},
{"lineNum":"  632","line":"  typedef ternary_evaluator<CwiseTernaryOp<TernaryOp, Arg1, Arg2, Arg3> > Base;"},
{"lineNum":"  633","line":""},
{"lineNum":"  634","line":"  EIGEN_DEVICE_FUNC explicit evaluator(const XprType& xpr) : Base(xpr) {}"},
{"lineNum":"  635","line":"};"},
{"lineNum":"  636","line":""},
{"lineNum":"  637","line":"template<typename TernaryOp, typename Arg1, typename Arg2, typename Arg3>"},
{"lineNum":"  638","line":"struct ternary_evaluator<CwiseTernaryOp<TernaryOp, Arg1, Arg2, Arg3>, IndexBased, IndexBased>"},
{"lineNum":"  639","line":"  : evaluator_base<CwiseTernaryOp<TernaryOp, Arg1, Arg2, Arg3> >"},
{"lineNum":"  640","line":"{"},
{"lineNum":"  641","line":"  typedef CwiseTernaryOp<TernaryOp, Arg1, Arg2, Arg3> XprType;"},
{"lineNum":"  642","line":""},
{"lineNum":"  643","line":"  enum {"},
{"lineNum":"  644","line":"    CoeffReadCost = int(evaluator<Arg1>::CoeffReadCost) + int(evaluator<Arg2>::CoeffReadCost) + int(evaluator<Arg3>::CoeffReadCost) + int(functor_traits<TernaryOp>::Cost),"},
{"lineNum":"  645","line":""},
{"lineNum":"  646","line":"    Arg1Flags = evaluator<Arg1>::Flags,"},
{"lineNum":"  647","line":"    Arg2Flags = evaluator<Arg2>::Flags,"},
{"lineNum":"  648","line":"    Arg3Flags = evaluator<Arg3>::Flags,"},
{"lineNum":"  649","line":"    SameType = is_same<typename Arg1::Scalar,typename Arg2::Scalar>::value && is_same<typename Arg1::Scalar,typename Arg3::Scalar>::value,"},
{"lineNum":"  650","line":"    StorageOrdersAgree = (int(Arg1Flags)&RowMajorBit)==(int(Arg2Flags)&RowMajorBit) && (int(Arg1Flags)&RowMajorBit)==(int(Arg3Flags)&RowMajorBit),"},
{"lineNum":"  651","line":"    Flags0 = (int(Arg1Flags) | int(Arg2Flags) | int(Arg3Flags)) & ("},
{"lineNum":"  652","line":"        HereditaryBits"},
{"lineNum":"  653","line":"        | (int(Arg1Flags) & int(Arg2Flags) & int(Arg3Flags) &"},
{"lineNum":"  654","line":"           ( (StorageOrdersAgree ? LinearAccessBit : 0)"},
{"lineNum":"  655","line":"           | (functor_traits<TernaryOp>::PacketAccess && StorageOrdersAgree && SameType ? PacketAccessBit : 0)"},
{"lineNum":"  656","line":"           )"},
{"lineNum":"  657","line":"        )"},
{"lineNum":"  658","line":"     ),"},
{"lineNum":"  659","line":"    Flags = (Flags0 & ~RowMajorBit) | (Arg1Flags & RowMajorBit),"},
{"lineNum":"  660","line":"    Alignment = EIGEN_PLAIN_ENUM_MIN("},
{"lineNum":"  661","line":"        EIGEN_PLAIN_ENUM_MIN(evaluator<Arg1>::Alignment, evaluator<Arg2>::Alignment),"},
{"lineNum":"  662","line":"        evaluator<Arg3>::Alignment)"},
{"lineNum":"  663","line":"  };"},
{"lineNum":"  664","line":""},
{"lineNum":"  665","line":"  EIGEN_DEVICE_FUNC explicit ternary_evaluator(const XprType& xpr) : m_d(xpr)"},
{"lineNum":"  666","line":"  {"},
{"lineNum":"  667","line":"    EIGEN_INTERNAL_CHECK_COST_VALUE(functor_traits<TernaryOp>::Cost);"},
{"lineNum":"  668","line":"    EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost);"},
{"lineNum":"  669","line":"  }"},
{"lineNum":"  670","line":""},
{"lineNum":"  671","line":"  typedef typename XprType::CoeffReturnType CoeffReturnType;"},
{"lineNum":"  672","line":""},
{"lineNum":"  673","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  674","line":"  CoeffReturnType coeff(Index row, Index col) const"},
{"lineNum":"  675","line":"  {"},
{"lineNum":"  676","line":"    return m_d.func()(m_d.arg1Impl.coeff(row, col), m_d.arg2Impl.coeff(row, col), m_d.arg3Impl.coeff(row, col));"},
{"lineNum":"  677","line":"  }"},
{"lineNum":"  678","line":""},
{"lineNum":"  679","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  680","line":"  CoeffReturnType coeff(Index index) const"},
{"lineNum":"  681","line":"  {"},
{"lineNum":"  682","line":"    return m_d.func()(m_d.arg1Impl.coeff(index), m_d.arg2Impl.coeff(index), m_d.arg3Impl.coeff(index));"},
{"lineNum":"  683","line":"  }"},
{"lineNum":"  684","line":""},
{"lineNum":"  685","line":"  template<int LoadMode, typename PacketType>"},
{"lineNum":"  686","line":"  EIGEN_STRONG_INLINE"},
{"lineNum":"  687","line":"  PacketType packet(Index row, Index col) const"},
{"lineNum":"  688","line":"  {"},
{"lineNum":"  689","line":"    return m_d.func().packetOp(m_d.arg1Impl.template packet<LoadMode,PacketType>(row, col),"},
{"lineNum":"  690","line":"                               m_d.arg2Impl.template packet<LoadMode,PacketType>(row, col),"},
{"lineNum":"  691","line":"                               m_d.arg3Impl.template packet<LoadMode,PacketType>(row, col));"},
{"lineNum":"  692","line":"  }"},
{"lineNum":"  693","line":""},
{"lineNum":"  694","line":"  template<int LoadMode, typename PacketType>"},
{"lineNum":"  695","line":"  EIGEN_STRONG_INLINE"},
{"lineNum":"  696","line":"  PacketType packet(Index index) const"},
{"lineNum":"  697","line":"  {"},
{"lineNum":"  698","line":"    return m_d.func().packetOp(m_d.arg1Impl.template packet<LoadMode,PacketType>(index),"},
{"lineNum":"  699","line":"                               m_d.arg2Impl.template packet<LoadMode,PacketType>(index),"},
{"lineNum":"  700","line":"                               m_d.arg3Impl.template packet<LoadMode,PacketType>(index));"},
{"lineNum":"  701","line":"  }"},
{"lineNum":"  702","line":""},
{"lineNum":"  703","line":"protected:"},
{"lineNum":"  704","line":"  // this helper permits to completely eliminate the functor if it is empty"},
{"lineNum":"  705","line":"  struct Data"},
{"lineNum":"  706","line":"  {"},
{"lineNum":"  707","line":"    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  708","line":"    Data(const XprType& xpr) : op(xpr.functor()), arg1Impl(xpr.arg1()), arg2Impl(xpr.arg2()), arg3Impl(xpr.arg3()) {}"},
{"lineNum":"  709","line":"    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  710","line":"    const TernaryOp& func() const { return op; }"},
{"lineNum":"  711","line":"    TernaryOp op;"},
{"lineNum":"  712","line":"    evaluator<Arg1> arg1Impl;"},
{"lineNum":"  713","line":"    evaluator<Arg2> arg2Impl;"},
{"lineNum":"  714","line":"    evaluator<Arg3> arg3Impl;"},
{"lineNum":"  715","line":"  };"},
{"lineNum":"  716","line":""},
{"lineNum":"  717","line":"  Data m_d;"},
{"lineNum":"  718","line":"};"},
{"lineNum":"  719","line":""},
{"lineNum":"  720","line":"// -------------------- CwiseBinaryOp --------------------"},
{"lineNum":"  721","line":""},
{"lineNum":"  722","line":"// this is a binary expression"},
{"lineNum":"  723","line":"template<typename BinaryOp, typename Lhs, typename Rhs>"},
{"lineNum":"  724","line":"struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >"},
{"lineNum":"  725","line":"  : public binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >"},
{"lineNum":"  726","line":"{"},
{"lineNum":"  727","line":"  typedef CwiseBinaryOp<BinaryOp, Lhs, Rhs> XprType;"},
{"lineNum":"  728","line":"  typedef binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> > Base;"},
{"lineNum":"  729","line":""},
{"lineNum":"  730","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  731","line":"  explicit evaluator(const XprType& xpr) : Base(xpr) {}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  732","line":"};"},
{"lineNum":"  733","line":""},
{"lineNum":"  734","line":"template<typename BinaryOp, typename Lhs, typename Rhs>"},
{"lineNum":"  735","line":"struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>"},
{"lineNum":"  736","line":"  : evaluator_base<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >"},
{"lineNum":"  737","line":"{"},
{"lineNum":"  738","line":"  typedef CwiseBinaryOp<BinaryOp, Lhs, Rhs> XprType;"},
{"lineNum":"  739","line":""},
{"lineNum":"  740","line":"  enum {"},
{"lineNum":"  741","line":"    CoeffReadCost = int(evaluator<Lhs>::CoeffReadCost) + int(evaluator<Rhs>::CoeffReadCost) + int(functor_traits<BinaryOp>::Cost),"},
{"lineNum":"  742","line":""},
{"lineNum":"  743","line":"    LhsFlags = evaluator<Lhs>::Flags,"},
{"lineNum":"  744","line":"    RhsFlags = evaluator<Rhs>::Flags,"},
{"lineNum":"  745","line":"    SameType = is_same<typename Lhs::Scalar,typename Rhs::Scalar>::value,"},
{"lineNum":"  746","line":"    StorageOrdersAgree = (int(LhsFlags)&RowMajorBit)==(int(RhsFlags)&RowMajorBit),"},
{"lineNum":"  747","line":"    Flags0 = (int(LhsFlags) | int(RhsFlags)) & ("},
{"lineNum":"  748","line":"        HereditaryBits"},
{"lineNum":"  749","line":"      | (int(LhsFlags) & int(RhsFlags) &"},
{"lineNum":"  750","line":"           ( (StorageOrdersAgree ? LinearAccessBit : 0)"},
{"lineNum":"  751","line":"           | (functor_traits<BinaryOp>::PacketAccess && StorageOrdersAgree && SameType ? PacketAccessBit : 0)"},
{"lineNum":"  752","line":"           )"},
{"lineNum":"  753","line":"        )"},
{"lineNum":"  754","line":"     ),"},
{"lineNum":"  755","line":"    Flags = (Flags0 & ~RowMajorBit) | (LhsFlags & RowMajorBit),"},
{"lineNum":"  756","line":"    Alignment = EIGEN_PLAIN_ENUM_MIN(evaluator<Lhs>::Alignment,evaluator<Rhs>::Alignment)"},
{"lineNum":"  757","line":"  };"},
{"lineNum":"  758","line":""},
{"lineNum":"  759","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  760","line":"  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)"},
{"lineNum":"  761","line":"  {"},
{"lineNum":"  762","line":"    EIGEN_INTERNAL_CHECK_COST_VALUE(functor_traits<BinaryOp>::Cost);"},
{"lineNum":"  763","line":"    EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost);"},
{"lineNum":"  764","line":"  }"},
{"lineNum":"  765","line":""},
{"lineNum":"  766","line":"  typedef typename XprType::CoeffReturnType CoeffReturnType;"},
{"lineNum":"  767","line":""},
{"lineNum":"  768","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  769","line":"  CoeffReturnType coeff(Index row, Index col) const"},
{"lineNum":"  770","line":"  {"},
{"lineNum":"  771","line":"    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));"},
{"lineNum":"  772","line":"  }"},
{"lineNum":"  773","line":""},
{"lineNum":"  774","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  775","line":"  CoeffReturnType coeff(Index index) const"},
{"lineNum":"  776","line":"  {"},
{"lineNum":"  777","line":"    return m_d.func()(m_d.lhsImpl.coeff(index), m_d.rhsImpl.coeff(index));"},
{"lineNum":"  778","line":"  }"},
{"lineNum":"  779","line":""},
{"lineNum":"  780","line":"  template<int LoadMode, typename PacketType>"},
{"lineNum":"  781","line":"  EIGEN_STRONG_INLINE"},
{"lineNum":"  782","line":"  PacketType packet(Index row, Index col) const"},
{"lineNum":"  783","line":"  {"},
{"lineNum":"  784","line":"    return m_d.func().packetOp(m_d.lhsImpl.template packet<LoadMode,PacketType>(row, col),"},
{"lineNum":"  785","line":"                               m_d.rhsImpl.template packet<LoadMode,PacketType>(row, col));"},
{"lineNum":"  786","line":"  }"},
{"lineNum":"  787","line":""},
{"lineNum":"  788","line":"  template<int LoadMode, typename PacketType>"},
{"lineNum":"  789","line":"  EIGEN_STRONG_INLINE"},
{"lineNum":"  790","line":"  PacketType packet(Index index) const"},
{"lineNum":"  791","line":"  {"},
{"lineNum":"  792","line":"    return m_d.func().packetOp(m_d.lhsImpl.template packet<LoadMode,PacketType>(index),"},
{"lineNum":"  793","line":"                               m_d.rhsImpl.template packet<LoadMode,PacketType>(index));"},
{"lineNum":"  794","line":"  }"},
{"lineNum":"  795","line":""},
{"lineNum":"  796","line":"protected:"},
{"lineNum":"  797","line":""},
{"lineNum":"  798","line":"  // this helper permits to completely eliminate the functor if it is empty"},
{"lineNum":"  799","line":"  struct Data"},
{"lineNum":"  800","line":"  {"},
{"lineNum":"  801","line":"    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  802","line":"    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  803","line":"    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  804","line":"    const BinaryOp& func() const { return op; }"},
{"lineNum":"  805","line":"    BinaryOp op;"},
{"lineNum":"  806","line":"    evaluator<Lhs> lhsImpl;"},
{"lineNum":"  807","line":"    evaluator<Rhs> rhsImpl;"},
{"lineNum":"  808","line":"  };"},
{"lineNum":"  809","line":""},
{"lineNum":"  810","line":"  Data m_d;"},
{"lineNum":"  811","line":"};"},
{"lineNum":"  812","line":""},
{"lineNum":"  813","line":"// -------------------- CwiseUnaryView --------------------"},
{"lineNum":"  814","line":""},
{"lineNum":"  815","line":"template<typename UnaryOp, typename ArgType>"},
{"lineNum":"  816","line":"struct unary_evaluator<CwiseUnaryView<UnaryOp, ArgType>, IndexBased>"},
{"lineNum":"  817","line":"  : evaluator_base<CwiseUnaryView<UnaryOp, ArgType> >"},
{"lineNum":"  818","line":"{"},
{"lineNum":"  819","line":"  typedef CwiseUnaryView<UnaryOp, ArgType> XprType;"},
{"lineNum":"  820","line":""},
{"lineNum":"  821","line":"  enum {"},
{"lineNum":"  822","line":"    CoeffReadCost = int(evaluator<ArgType>::CoeffReadCost) + int(functor_traits<UnaryOp>::Cost),"},
{"lineNum":"  823","line":""},
{"lineNum":"  824","line":"    Flags = (evaluator<ArgType>::Flags & (HereditaryBits | LinearAccessBit | DirectAccessBit)),"},
{"lineNum":"  825","line":""},
{"lineNum":"  826","line":"    Alignment = 0 // FIXME it is not very clear why alignment is necessarily lost..."},
{"lineNum":"  827","line":"  };"},
{"lineNum":"  828","line":""},
{"lineNum":"  829","line":"  EIGEN_DEVICE_FUNC explicit unary_evaluator(const XprType& op) : m_d(op)"},
{"lineNum":"  830","line":"  {"},
{"lineNum":"  831","line":"    EIGEN_INTERNAL_CHECK_COST_VALUE(functor_traits<UnaryOp>::Cost);"},
{"lineNum":"  832","line":"    EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost);"},
{"lineNum":"  833","line":"  }"},
{"lineNum":"  834","line":""},
{"lineNum":"  835","line":"  typedef typename XprType::Scalar Scalar;"},
{"lineNum":"  836","line":"  typedef typename XprType::CoeffReturnType CoeffReturnType;"},
{"lineNum":"  837","line":""},
{"lineNum":"  838","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  839","line":"  CoeffReturnType coeff(Index row, Index col) const"},
{"lineNum":"  840","line":"  {"},
{"lineNum":"  841","line":"    return m_d.func()(m_d.argImpl.coeff(row, col));"},
{"lineNum":"  842","line":"  }"},
{"lineNum":"  843","line":""},
{"lineNum":"  844","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  845","line":"  CoeffReturnType coeff(Index index) const"},
{"lineNum":"  846","line":"  {"},
{"lineNum":"  847","line":"    return m_d.func()(m_d.argImpl.coeff(index));"},
{"lineNum":"  848","line":"  }"},
{"lineNum":"  849","line":""},
{"lineNum":"  850","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  851","line":"  Scalar& coeffRef(Index row, Index col)"},
{"lineNum":"  852","line":"  {"},
{"lineNum":"  853","line":"    return m_d.func()(m_d.argImpl.coeffRef(row, col));"},
{"lineNum":"  854","line":"  }"},
{"lineNum":"  855","line":""},
{"lineNum":"  856","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  857","line":"  Scalar& coeffRef(Index index)"},
{"lineNum":"  858","line":"  {"},
{"lineNum":"  859","line":"    return m_d.func()(m_d.argImpl.coeffRef(index));"},
{"lineNum":"  860","line":"  }"},
{"lineNum":"  861","line":""},
{"lineNum":"  862","line":"protected:"},
{"lineNum":"  863","line":""},
{"lineNum":"  864","line":"  // this helper permits to completely eliminate the functor if it is empty"},
{"lineNum":"  865","line":"  struct Data"},
{"lineNum":"  866","line":"  {"},
{"lineNum":"  867","line":"    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  868","line":"    Data(const XprType& xpr) : op(xpr.functor()), argImpl(xpr.nestedExpression()) {}"},
{"lineNum":"  869","line":"    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  870","line":"    const UnaryOp& func() const { return op; }"},
{"lineNum":"  871","line":"    UnaryOp op;"},
{"lineNum":"  872","line":"    evaluator<ArgType> argImpl;"},
{"lineNum":"  873","line":"  };"},
{"lineNum":"  874","line":""},
{"lineNum":"  875","line":"  Data m_d;"},
{"lineNum":"  876","line":"};"},
{"lineNum":"  877","line":""},
{"lineNum":"  878","line":"// -------------------- Map --------------------"},
{"lineNum":"  879","line":""},
{"lineNum":"  880","line":"// FIXME perhaps the PlainObjectType could be provided by Derived::PlainObject ?"},
{"lineNum":"  881","line":"// but that might complicate template specialization"},
{"lineNum":"  882","line":"template<typename Derived, typename PlainObjectType>"},
{"lineNum":"  883","line":"struct mapbase_evaluator;"},
{"lineNum":"  884","line":""},
{"lineNum":"  885","line":"template<typename Derived, typename PlainObjectType>"},
{"lineNum":"  886","line":"struct mapbase_evaluator : evaluator_base<Derived>"},
{"lineNum":"  887","line":"{"},
{"lineNum":"  888","line":"  typedef Derived  XprType;"},
{"lineNum":"  889","line":"  typedef typename XprType::PointerType PointerType;"},
{"lineNum":"  890","line":"  typedef typename XprType::Scalar Scalar;"},
{"lineNum":"  891","line":"  typedef typename XprType::CoeffReturnType CoeffReturnType;"},
{"lineNum":"  892","line":""},
{"lineNum":"  893","line":"  enum {"},
{"lineNum":"  894","line":"    IsRowMajor = XprType::RowsAtCompileTime,"},
{"lineNum":"  895","line":"    ColsAtCompileTime = XprType::ColsAtCompileTime,"},
{"lineNum":"  896","line":"    CoeffReadCost = NumTraits<Scalar>::ReadCost"},
{"lineNum":"  897","line":"  };"},
{"lineNum":"  898","line":""},
{"lineNum":"  899","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  900","line":"  explicit mapbase_evaluator(const XprType& map)"},
{"lineNum":"  901","line":"    : m_data(const_cast<PointerType>(map.data())),","class":"lineNoCov","hits":"0","possible_hits":"43",},
{"lineNum":"  902","line":"      m_innerStride(map.innerStride()),"},
{"lineNum":"  903","line":"      m_outerStride(map.outerStride())"},
{"lineNum":"  904","line":"  {"},
{"lineNum":"  905","line":"    EIGEN_STATIC_ASSERT(EIGEN_IMPLIES(evaluator<Derived>::Flags&PacketAccessBit, internal::inner_stride_at_compile_time<Derived>::ret==1),"},
{"lineNum":"  906","line":"                        PACKET_ACCESS_REQUIRES_TO_HAVE_INNER_STRIDE_FIXED_TO_1);"},
{"lineNum":"  907","line":"    EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost);"},
{"lineNum":"  908","line":"  }"},
{"lineNum":"  909","line":""},
{"lineNum":"  910","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  911","line":"  CoeffReturnType coeff(Index row, Index col) const"},
{"lineNum":"  912","line":"  {"},
{"lineNum":"  913","line":"    return m_data[col * colStride() + row * rowStride()];","class":"lineNoCov","hits":"0","possible_hits":"383",},
{"lineNum":"  914","line":"  }"},
{"lineNum":"  915","line":""},
{"lineNum":"  916","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  917","line":"  CoeffReturnType coeff(Index index) const"},
{"lineNum":"  918","line":"  {"},
{"lineNum":"  919","line":"    return m_data[index * m_innerStride.value()];","class":"lineNoCov","hits":"0","possible_hits":"160",},
{"lineNum":"  920","line":"  }"},
{"lineNum":"  921","line":""},
{"lineNum":"  922","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  923","line":"  Scalar& coeffRef(Index row, Index col)"},
{"lineNum":"  924","line":"  {"},
{"lineNum":"  925","line":"    return m_data[col * colStride() + row * rowStride()];","class":"lineNoCov","hits":"0","possible_hits":"35",},
{"lineNum":"  926","line":"  }"},
{"lineNum":"  927","line":""},
{"lineNum":"  928","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  929","line":"  Scalar& coeffRef(Index index)"},
{"lineNum":"  930","line":"  {"},
{"lineNum":"  931","line":"    return m_data[index * m_innerStride.value()];","class":"lineNoCov","hits":"0","possible_hits":"38",},
{"lineNum":"  932","line":"  }"},
{"lineNum":"  933","line":""},
{"lineNum":"  934","line":"  template<int LoadMode, typename PacketType>"},
{"lineNum":"  935","line":"  EIGEN_STRONG_INLINE"},
{"lineNum":"  936","line":"  PacketType packet(Index row, Index col) const"},
{"lineNum":"  937","line":"  {"},
{"lineNum":"  938","line":"    PointerType ptr = m_data + row * rowStride() + col * colStride();","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  939","line":"    return internal::ploadt<PacketType, LoadMode>(ptr);"},
{"lineNum":"  940","line":"  }"},
{"lineNum":"  941","line":""},
{"lineNum":"  942","line":"  template<int LoadMode, typename PacketType>"},
{"lineNum":"  943","line":"  EIGEN_STRONG_INLINE"},
{"lineNum":"  944","line":"  PacketType packet(Index index) const"},
{"lineNum":"  945","line":"  {"},
{"lineNum":"  946","line":"    return internal::ploadt<PacketType, LoadMode>(m_data + index * m_innerStride.value());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  947","line":"  }"},
{"lineNum":"  948","line":""},
{"lineNum":"  949","line":"  template<int StoreMode, typename PacketType>"},
{"lineNum":"  950","line":"  EIGEN_STRONG_INLINE"},
{"lineNum":"  951","line":"  void writePacket(Index row, Index col, const PacketType& x)"},
{"lineNum":"  952","line":"  {"},
{"lineNum":"  953","line":"    PointerType ptr = m_data + row * rowStride() + col * colStride();"},
{"lineNum":"  954","line":"    return internal::pstoret<Scalar, PacketType, StoreMode>(ptr, x);"},
{"lineNum":"  955","line":"  }"},
{"lineNum":"  956","line":""},
{"lineNum":"  957","line":"  template<int StoreMode, typename PacketType>"},
{"lineNum":"  958","line":"  EIGEN_STRONG_INLINE"},
{"lineNum":"  959","line":"  void writePacket(Index index, const PacketType& x)"},
{"lineNum":"  960","line":"  {"},
{"lineNum":"  961","line":"    internal::pstoret<Scalar, PacketType, StoreMode>(m_data + index * m_innerStride.value(), x);"},
{"lineNum":"  962","line":"  }"},
{"lineNum":"  963","line":"protected:"},
{"lineNum":"  964","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR"},
{"lineNum":"  965","line":"  Index rowStride() const EIGEN_NOEXCEPT {"},
{"lineNum":"  966","line":"    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();"},
{"lineNum":"  967","line":"  }"},
{"lineNum":"  968","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR"},
{"lineNum":"  969","line":"  Index colStride() const EIGEN_NOEXCEPT {"},
{"lineNum":"  970","line":"     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();"},
{"lineNum":"  971","line":"  }"},
{"lineNum":"  972","line":""},
{"lineNum":"  973","line":"  PointerType m_data;"},
{"lineNum":"  974","line":"  const internal::variable_if_dynamic<Index, XprType::InnerStrideAtCompileTime> m_innerStride;"},
{"lineNum":"  975","line":"  const internal::variable_if_dynamic<Index, XprType::OuterStrideAtCompileTime> m_outerStride;"},
{"lineNum":"  976","line":"};"},
{"lineNum":"  977","line":""},
{"lineNum":"  978","line":"template<typename PlainObjectType, int MapOptions, typename StrideType>"},
{"lineNum":"  979","line":"struct evaluator<Map<PlainObjectType, MapOptions, StrideType> >"},
{"lineNum":"  980","line":"  : public mapbase_evaluator<Map<PlainObjectType, MapOptions, StrideType>, PlainObjectType>"},
{"lineNum":"  981","line":"{"},
{"lineNum":"  982","line":"  typedef Map<PlainObjectType, MapOptions, StrideType> XprType;"},
{"lineNum":"  983","line":"  typedef typename XprType::Scalar Scalar;"},
{"lineNum":"  984","line":"  // TODO: should check for smaller packet types once we can handle multi-sized packet types"},
{"lineNum":"  985","line":"  typedef typename packet_traits<Scalar>::type PacketScalar;"},
{"lineNum":"  986","line":""},
{"lineNum":"  987","line":"  enum {"},
{"lineNum":"  988","line":"    InnerStrideAtCompileTime = StrideType::InnerStrideAtCompileTime == 0"},
{"lineNum":"  989","line":"                             ? int(PlainObjectType::InnerStrideAtCompileTime)"},
{"lineNum":"  990","line":"                             : int(StrideType::InnerStrideAtCompileTime),"},
{"lineNum":"  991","line":"    OuterStrideAtCompileTime = StrideType::OuterStrideAtCompileTime == 0"},
{"lineNum":"  992","line":"                             ? int(PlainObjectType::OuterStrideAtCompileTime)"},
{"lineNum":"  993","line":"                             : int(StrideType::OuterStrideAtCompileTime),"},
{"lineNum":"  994","line":"    HasNoInnerStride = InnerStrideAtCompileTime == 1,"},
{"lineNum":"  995","line":"    HasNoOuterStride = StrideType::OuterStrideAtCompileTime == 0,"},
{"lineNum":"  996","line":"    HasNoStride = HasNoInnerStride && HasNoOuterStride,"},
{"lineNum":"  997","line":"    IsDynamicSize = PlainObjectType::SizeAtCompileTime==Dynamic,"},
{"lineNum":"  998","line":""},
{"lineNum":"  999","line":"    PacketAccessMask = bool(HasNoInnerStride) ? ~int(0) : ~int(PacketAccessBit),"},
{"lineNum":" 1000","line":"    LinearAccessMask = bool(HasNoStride) || bool(PlainObjectType::IsVectorAtCompileTime) ? ~int(0) : ~int(LinearAccessBit),"},
{"lineNum":" 1001","line":"    Flags = int( evaluator<PlainObjectType>::Flags) & (LinearAccessMask&PacketAccessMask),"},
{"lineNum":" 1002","line":""},
{"lineNum":" 1003","line":"    Alignment = int(MapOptions)&int(AlignedMask)"},
{"lineNum":" 1004","line":"  };"},
{"lineNum":" 1005","line":""},
{"lineNum":" 1006","line":"  EIGEN_DEVICE_FUNC explicit evaluator(const XprType& map)"},
{"lineNum":" 1007","line":"    : mapbase_evaluator<XprType, PlainObjectType>(map)"},
{"lineNum":" 1008","line":"  { }"},
{"lineNum":" 1009","line":"};"},
{"lineNum":" 1010","line":""},
{"lineNum":" 1011","line":"// -------------------- Ref --------------------"},
{"lineNum":" 1012","line":""},
{"lineNum":" 1013","line":"template<typename PlainObjectType, int RefOptions, typename StrideType>"},
{"lineNum":" 1014","line":"struct evaluator<Ref<PlainObjectType, RefOptions, StrideType> >"},
{"lineNum":" 1015","line":"  : public mapbase_evaluator<Ref<PlainObjectType, RefOptions, StrideType>, PlainObjectType>"},
{"lineNum":" 1016","line":"{"},
{"lineNum":" 1017","line":"  typedef Ref<PlainObjectType, RefOptions, StrideType> XprType;"},
{"lineNum":" 1018","line":""},
{"lineNum":" 1019","line":"  enum {"},
{"lineNum":" 1020","line":"    Flags = evaluator<Map<PlainObjectType, RefOptions, StrideType> >::Flags,"},
{"lineNum":" 1021","line":"    Alignment = evaluator<Map<PlainObjectType, RefOptions, StrideType> >::Alignment"},
{"lineNum":" 1022","line":"  };"},
{"lineNum":" 1023","line":""},
{"lineNum":" 1024","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1025","line":"  explicit evaluator(const XprType& ref)"},
{"lineNum":" 1026","line":"    : mapbase_evaluator<XprType, PlainObjectType>(ref)"},
{"lineNum":" 1027","line":"  { }"},
{"lineNum":" 1028","line":"};"},
{"lineNum":" 1029","line":""},
{"lineNum":" 1030","line":"// -------------------- Block --------------------"},
{"lineNum":" 1031","line":""},
{"lineNum":" 1032","line":"template<typename ArgType, int BlockRows, int BlockCols, bool InnerPanel,"},
{"lineNum":" 1033","line":"         bool HasDirectAccess = internal::has_direct_access<ArgType>::ret> struct block_evaluator;"},
{"lineNum":" 1034","line":""},
{"lineNum":" 1035","line":"template<typename ArgType, int BlockRows, int BlockCols, bool InnerPanel>"},
{"lineNum":" 1036","line":"struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >"},
{"lineNum":" 1037","line":"  : block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel>"},
{"lineNum":" 1038","line":"{"},
{"lineNum":" 1039","line":"  typedef Block<ArgType, BlockRows, BlockCols, InnerPanel> XprType;"},
{"lineNum":" 1040","line":"  typedef typename XprType::Scalar Scalar;"},
{"lineNum":" 1041","line":"  // TODO: should check for smaller packet types once we can handle multi-sized packet types"},
{"lineNum":" 1042","line":"  typedef typename packet_traits<Scalar>::type PacketScalar;"},
{"lineNum":" 1043","line":""},
{"lineNum":" 1044","line":"  enum {"},
{"lineNum":" 1045","line":"    CoeffReadCost = evaluator<ArgType>::CoeffReadCost,"},
{"lineNum":" 1046","line":""},
{"lineNum":" 1047","line":"    RowsAtCompileTime = traits<XprType>::RowsAtCompileTime,"},
{"lineNum":" 1048","line":"    ColsAtCompileTime = traits<XprType>::ColsAtCompileTime,"},
{"lineNum":" 1049","line":"    MaxRowsAtCompileTime = traits<XprType>::MaxRowsAtCompileTime,"},
{"lineNum":" 1050","line":"    MaxColsAtCompileTime = traits<XprType>::MaxColsAtCompileTime,"},
{"lineNum":" 1051","line":""},
{"lineNum":" 1052","line":"    ArgTypeIsRowMajor = (int(evaluator<ArgType>::Flags)&RowMajorBit) != 0,"},
{"lineNum":" 1053","line":"    IsRowMajor = (MaxRowsAtCompileTime==1 && MaxColsAtCompileTime!=1) ? 1"},
{"lineNum":" 1054","line":"               : (MaxColsAtCompileTime==1 && MaxRowsAtCompileTime!=1) ? 0"},
{"lineNum":" 1055","line":"               : ArgTypeIsRowMajor,"},
{"lineNum":" 1056","line":"    HasSameStorageOrderAsArgType = (IsRowMajor == ArgTypeIsRowMajor),"},
{"lineNum":" 1057","line":"    InnerSize = IsRowMajor ? int(ColsAtCompileTime) : int(RowsAtCompileTime),"},
{"lineNum":" 1058","line":"    InnerStrideAtCompileTime = HasSameStorageOrderAsArgType"},
{"lineNum":" 1059","line":"                             ? int(inner_stride_at_compile_time<ArgType>::ret)"},
{"lineNum":" 1060","line":"                             : int(outer_stride_at_compile_time<ArgType>::ret),"},
{"lineNum":" 1061","line":"    OuterStrideAtCompileTime = HasSameStorageOrderAsArgType"},
{"lineNum":" 1062","line":"                             ? int(outer_stride_at_compile_time<ArgType>::ret)"},
{"lineNum":" 1063","line":"                             : int(inner_stride_at_compile_time<ArgType>::ret),"},
{"lineNum":" 1064","line":"    MaskPacketAccessBit = (InnerStrideAtCompileTime == 1 || HasSameStorageOrderAsArgType) ? PacketAccessBit : 0,"},
{"lineNum":" 1065","line":""},
{"lineNum":" 1066","line":"    FlagsLinearAccessBit = (RowsAtCompileTime == 1 || ColsAtCompileTime == 1 || (InnerPanel && (evaluator<ArgType>::Flags&LinearAccessBit))) ? LinearAccessBit : 0,"},
{"lineNum":" 1067","line":"    FlagsRowMajorBit = XprType::Flags&RowMajorBit,"},
{"lineNum":" 1068","line":"    Flags0 = evaluator<ArgType>::Flags & ( (HereditaryBits & ~RowMajorBit) |"},
{"lineNum":" 1069","line":"                                           DirectAccessBit |"},
{"lineNum":" 1070","line":"                                           MaskPacketAccessBit),"},
{"lineNum":" 1071","line":"    Flags = Flags0 | FlagsLinearAccessBit | FlagsRowMajorBit,"},
{"lineNum":" 1072","line":""},
{"lineNum":" 1073","line":"    PacketAlignment = unpacket_traits<PacketScalar>::alignment,"},
{"lineNum":" 1074","line":"    Alignment0 = (InnerPanel && (OuterStrideAtCompileTime!=Dynamic)"},
{"lineNum":" 1075","line":"                             && (OuterStrideAtCompileTime!=0)"},
{"lineNum":" 1076","line":"                             && (((OuterStrideAtCompileTime * int(sizeof(Scalar))) % int(PacketAlignment)) == 0)) ? int(PacketAlignment) : 0,"},
{"lineNum":" 1077","line":"    Alignment = EIGEN_PLAIN_ENUM_MIN(evaluator<ArgType>::Alignment, Alignment0)"},
{"lineNum":" 1078","line":"  };"},
{"lineNum":" 1079","line":"  typedef block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel> block_evaluator_type;"},
{"lineNum":" 1080","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1081","line":"  explicit evaluator(const XprType& block) : block_evaluator_type(block)"},
{"lineNum":" 1082","line":"  {"},
{"lineNum":" 1083","line":"    EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost);"},
{"lineNum":" 1084","line":"  }"},
{"lineNum":" 1085","line":"};"},
{"lineNum":" 1086","line":""},
{"lineNum":" 1087","line":"// no direct-access => dispatch to a unary evaluator"},
{"lineNum":" 1088","line":"template<typename ArgType, int BlockRows, int BlockCols, bool InnerPanel>"},
{"lineNum":" 1089","line":"struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /*HasDirectAccess*/ false>"},
{"lineNum":" 1090","line":"  : unary_evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >"},
{"lineNum":" 1091","line":"{"},
{"lineNum":" 1092","line":"  typedef Block<ArgType, BlockRows, BlockCols, InnerPanel> XprType;"},
{"lineNum":" 1093","line":""},
{"lineNum":" 1094","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1095","line":"  explicit block_evaluator(const XprType& block)"},
{"lineNum":" 1096","line":"    : unary_evaluator<XprType>(block)"},
{"lineNum":" 1097","line":"  {}"},
{"lineNum":" 1098","line":"};"},
{"lineNum":" 1099","line":""},
{"lineNum":" 1100","line":"template<typename ArgType, int BlockRows, int BlockCols, bool InnerPanel>"},
{"lineNum":" 1101","line":"struct unary_evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel>, IndexBased>"},
{"lineNum":" 1102","line":"  : evaluator_base<Block<ArgType, BlockRows, BlockCols, InnerPanel> >"},
{"lineNum":" 1103","line":"{"},
{"lineNum":" 1104","line":"  typedef Block<ArgType, BlockRows, BlockCols, InnerPanel> XprType;"},
{"lineNum":" 1105","line":""},
{"lineNum":" 1106","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1107","line":"  explicit unary_evaluator(const XprType& block)"},
{"lineNum":" 1108","line":"    : m_argImpl(block.nestedExpression()),"},
{"lineNum":" 1109","line":"      m_startRow(block.startRow()),"},
{"lineNum":" 1110","line":"      m_startCol(block.startCol()),"},
{"lineNum":" 1111","line":"      m_linear_offset(ForwardLinearAccess?(ArgType::IsRowMajor ? block.startRow()*block.nestedExpression().cols() + block.startCol() : block.startCol()*block.nestedExpression().rows() + block.startRow()):0)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1112","line":"  { }"},
{"lineNum":" 1113","line":""},
{"lineNum":" 1114","line":"  typedef typename XprType::Scalar Scalar;"},
{"lineNum":" 1115","line":"  typedef typename XprType::CoeffReturnType CoeffReturnType;"},
{"lineNum":" 1116","line":""},
{"lineNum":" 1117","line":"  enum {"},
{"lineNum":" 1118","line":"    RowsAtCompileTime = XprType::RowsAtCompileTime,"},
{"lineNum":" 1119","line":"    ForwardLinearAccess = (InnerPanel || int(XprType::IsRowMajor)==int(ArgType::IsRowMajor)) && bool(evaluator<ArgType>::Flags&LinearAccessBit)"},
{"lineNum":" 1120","line":"  };"},
{"lineNum":" 1121","line":""},
{"lineNum":" 1122","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1123","line":"  CoeffReturnType coeff(Index row, Index col) const"},
{"lineNum":" 1124","line":"  {"},
{"lineNum":" 1125","line":"    return m_argImpl.coeff(m_startRow.value() + row, m_startCol.value() + col);","class":"lineNoCov","hits":"0","possible_hits":"29",},
{"lineNum":" 1126","line":"  }"},
{"lineNum":" 1127","line":""},
{"lineNum":" 1128","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1129","line":"  CoeffReturnType coeff(Index index) const"},
{"lineNum":" 1130","line":"  {"},
{"lineNum":" 1131","line":"    return linear_coeff_impl(index, bool_constant<ForwardLinearAccess>());"},
{"lineNum":" 1132","line":"  }"},
{"lineNum":" 1133","line":""},
{"lineNum":" 1134","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1135","line":"  Scalar& coeffRef(Index row, Index col)"},
{"lineNum":" 1136","line":"  {"},
{"lineNum":" 1137","line":"    return m_argImpl.coeffRef(m_startRow.value() + row, m_startCol.value() + col);"},
{"lineNum":" 1138","line":"  }"},
{"lineNum":" 1139","line":""},
{"lineNum":" 1140","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1141","line":"  Scalar& coeffRef(Index index)"},
{"lineNum":" 1142","line":"  {"},
{"lineNum":" 1143","line":"    return linear_coeffRef_impl(index, bool_constant<ForwardLinearAccess>());"},
{"lineNum":" 1144","line":"  }"},
{"lineNum":" 1145","line":""},
{"lineNum":" 1146","line":"  template<int LoadMode, typename PacketType>"},
{"lineNum":" 1147","line":"  EIGEN_STRONG_INLINE"},
{"lineNum":" 1148","line":"  PacketType packet(Index row, Index col) const"},
{"lineNum":" 1149","line":"  {"},
{"lineNum":" 1150","line":"    return m_argImpl.template packet<LoadMode,PacketType>(m_startRow.value() + row, m_startCol.value() + col);"},
{"lineNum":" 1151","line":"  }"},
{"lineNum":" 1152","line":""},
{"lineNum":" 1153","line":"  template<int LoadMode, typename PacketType>"},
{"lineNum":" 1154","line":"  EIGEN_STRONG_INLINE"},
{"lineNum":" 1155","line":"  PacketType packet(Index index) const"},
{"lineNum":" 1156","line":"  {"},
{"lineNum":" 1157","line":"    if (ForwardLinearAccess)"},
{"lineNum":" 1158","line":"      return m_argImpl.template packet<LoadMode,PacketType>(m_linear_offset.value() + index);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1159","line":"    else"},
{"lineNum":" 1160","line":"      return packet<LoadMode,PacketType>(RowsAtCompileTime == 1 ? 0 : index,"},
{"lineNum":" 1161","line":"                                         RowsAtCompileTime == 1 ? index : 0);"},
{"lineNum":" 1162","line":"  }"},
{"lineNum":" 1163","line":""},
{"lineNum":" 1164","line":"  template<int StoreMode, typename PacketType>"},
{"lineNum":" 1165","line":"  EIGEN_STRONG_INLINE"},
{"lineNum":" 1166","line":"  void writePacket(Index row, Index col, const PacketType& x)"},
{"lineNum":" 1167","line":"  {"},
{"lineNum":" 1168","line":"    return m_argImpl.template writePacket<StoreMode,PacketType>(m_startRow.value() + row, m_startCol.value() + col, x);"},
{"lineNum":" 1169","line":"  }"},
{"lineNum":" 1170","line":""},
{"lineNum":" 1171","line":"  template<int StoreMode, typename PacketType>"},
{"lineNum":" 1172","line":"  EIGEN_STRONG_INLINE"},
{"lineNum":" 1173","line":"  void writePacket(Index index, const PacketType& x)"},
{"lineNum":" 1174","line":"  {"},
{"lineNum":" 1175","line":"    if (ForwardLinearAccess)"},
{"lineNum":" 1176","line":"      return m_argImpl.template writePacket<StoreMode,PacketType>(m_linear_offset.value() + index, x);"},
{"lineNum":" 1177","line":"    else"},
{"lineNum":" 1178","line":"      return writePacket<StoreMode,PacketType>(RowsAtCompileTime == 1 ? 0 : index,"},
{"lineNum":" 1179","line":"                                              RowsAtCompileTime == 1 ? index : 0,"},
{"lineNum":" 1180","line":"                                              x);"},
{"lineNum":" 1181","line":"  }"},
{"lineNum":" 1182","line":""},
{"lineNum":" 1183","line":"protected:"},
{"lineNum":" 1184","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1185","line":"  CoeffReturnType linear_coeff_impl(Index index, internal::true_type /* ForwardLinearAccess */) const"},
{"lineNum":" 1186","line":"  {"},
{"lineNum":" 1187","line":"    return m_argImpl.coeff(m_linear_offset.value() + index);","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 1188","line":"  }"},
{"lineNum":" 1189","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1190","line":"  CoeffReturnType linear_coeff_impl(Index index, internal::false_type /* not ForwardLinearAccess */) const"},
{"lineNum":" 1191","line":"  {"},
{"lineNum":" 1192","line":"    return coeff(RowsAtCompileTime == 1 ? 0 : index, RowsAtCompileTime == 1 ? index : 0);"},
{"lineNum":" 1193","line":"  }"},
{"lineNum":" 1194","line":""},
{"lineNum":" 1195","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1196","line":"  Scalar& linear_coeffRef_impl(Index index, internal::true_type /* ForwardLinearAccess */)"},
{"lineNum":" 1197","line":"  {"},
{"lineNum":" 1198","line":"    return m_argImpl.coeffRef(m_linear_offset.value() + index);"},
{"lineNum":" 1199","line":"  }"},
{"lineNum":" 1200","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1201","line":"  Scalar& linear_coeffRef_impl(Index index, internal::false_type /* not ForwardLinearAccess */)"},
{"lineNum":" 1202","line":"  {"},
{"lineNum":" 1203","line":"    return coeffRef(RowsAtCompileTime == 1 ? 0 : index, RowsAtCompileTime == 1 ? index : 0);"},
{"lineNum":" 1204","line":"  }"},
{"lineNum":" 1205","line":""},
{"lineNum":" 1206","line":"  evaluator<ArgType> m_argImpl;"},
{"lineNum":" 1207","line":"  const variable_if_dynamic<Index, (ArgType::RowsAtCompileTime == 1 && BlockRows==1) ? 0 : Dynamic> m_startRow;"},
{"lineNum":" 1208","line":"  const variable_if_dynamic<Index, (ArgType::ColsAtCompileTime == 1 && BlockCols==1) ? 0 : Dynamic> m_startCol;"},
{"lineNum":" 1209","line":"  const variable_if_dynamic<Index, ForwardLinearAccess ? Dynamic : 0> m_linear_offset;"},
{"lineNum":" 1210","line":"};"},
{"lineNum":" 1211","line":""},
{"lineNum":" 1212","line":"// TODO: This evaluator does not actually use the child evaluator;"},
{"lineNum":" 1213","line":"// all action is via the data() as returned by the Block expression."},
{"lineNum":" 1214","line":""},
{"lineNum":" 1215","line":"template<typename ArgType, int BlockRows, int BlockCols, bool InnerPanel>"},
{"lineNum":" 1216","line":"struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>"},
{"lineNum":" 1217","line":"  : mapbase_evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel>,"},
{"lineNum":" 1218","line":"                      typename Block<ArgType, BlockRows, BlockCols, InnerPanel>::PlainObject>"},
{"lineNum":" 1219","line":"{"},
{"lineNum":" 1220","line":"  typedef Block<ArgType, BlockRows, BlockCols, InnerPanel> XprType;"},
{"lineNum":" 1221","line":"  typedef typename XprType::Scalar Scalar;"},
{"lineNum":" 1222","line":""},
{"lineNum":" 1223","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1224","line":"  explicit block_evaluator(const XprType& block)"},
{"lineNum":" 1225","line":"    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)"},
{"lineNum":" 1226","line":"  {"},
{"lineNum":" 1227","line":"    // TODO: for the 3.3 release, this should be turned to an internal assertion, but let\'s keep it as is for the beta lifetime"},
{"lineNum":" 1228","line":"    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && \"data is not aligned\");"},
{"lineNum":" 1229","line":"  }"},
{"lineNum":" 1230","line":"};"},
{"lineNum":" 1231","line":""},
{"lineNum":" 1232","line":""},
{"lineNum":" 1233","line":"// -------------------- Select --------------------"},
{"lineNum":" 1234","line":"// NOTE shall we introduce a ternary_evaluator?"},
{"lineNum":" 1235","line":""},
{"lineNum":" 1236","line":"// TODO enable vectorization for Select"},
{"lineNum":" 1237","line":"template<typename ConditionMatrixType, typename ThenMatrixType, typename ElseMatrixType>"},
{"lineNum":" 1238","line":"struct evaluator<Select<ConditionMatrixType, ThenMatrixType, ElseMatrixType> >"},
{"lineNum":" 1239","line":"  : evaluator_base<Select<ConditionMatrixType, ThenMatrixType, ElseMatrixType> >"},
{"lineNum":" 1240","line":"{"},
{"lineNum":" 1241","line":"  typedef Select<ConditionMatrixType, ThenMatrixType, ElseMatrixType> XprType;"},
{"lineNum":" 1242","line":"  enum {"},
{"lineNum":" 1243","line":"    CoeffReadCost = evaluator<ConditionMatrixType>::CoeffReadCost"},
{"lineNum":" 1244","line":"                  + EIGEN_PLAIN_ENUM_MAX(evaluator<ThenMatrixType>::CoeffReadCost,"},
{"lineNum":" 1245","line":"                                         evaluator<ElseMatrixType>::CoeffReadCost),"},
{"lineNum":" 1246","line":""},
{"lineNum":" 1247","line":"    Flags = (unsigned int)evaluator<ThenMatrixType>::Flags & evaluator<ElseMatrixType>::Flags & HereditaryBits,"},
{"lineNum":" 1248","line":""},
{"lineNum":" 1249","line":"    Alignment = EIGEN_PLAIN_ENUM_MIN(evaluator<ThenMatrixType>::Alignment, evaluator<ElseMatrixType>::Alignment)"},
{"lineNum":" 1250","line":"  };"},
{"lineNum":" 1251","line":""},
{"lineNum":" 1252","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1253","line":"  explicit evaluator(const XprType& select)"},
{"lineNum":" 1254","line":"    : m_conditionImpl(select.conditionMatrix()),"},
{"lineNum":" 1255","line":"      m_thenImpl(select.thenMatrix()),"},
{"lineNum":" 1256","line":"      m_elseImpl(select.elseMatrix())"},
{"lineNum":" 1257","line":"  {"},
{"lineNum":" 1258","line":"    EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost);"},
{"lineNum":" 1259","line":"  }"},
{"lineNum":" 1260","line":""},
{"lineNum":" 1261","line":"  typedef typename XprType::CoeffReturnType CoeffReturnType;"},
{"lineNum":" 1262","line":""},
{"lineNum":" 1263","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1264","line":"  CoeffReturnType coeff(Index row, Index col) const"},
{"lineNum":" 1265","line":"  {"},
{"lineNum":" 1266","line":"    if (m_conditionImpl.coeff(row, col))"},
{"lineNum":" 1267","line":"      return m_thenImpl.coeff(row, col);"},
{"lineNum":" 1268","line":"    else"},
{"lineNum":" 1269","line":"      return m_elseImpl.coeff(row, col);"},
{"lineNum":" 1270","line":"  }"},
{"lineNum":" 1271","line":""},
{"lineNum":" 1272","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1273","line":"  CoeffReturnType coeff(Index index) const"},
{"lineNum":" 1274","line":"  {"},
{"lineNum":" 1275","line":"    if (m_conditionImpl.coeff(index))"},
{"lineNum":" 1276","line":"      return m_thenImpl.coeff(index);"},
{"lineNum":" 1277","line":"    else"},
{"lineNum":" 1278","line":"      return m_elseImpl.coeff(index);"},
{"lineNum":" 1279","line":"  }"},
{"lineNum":" 1280","line":""},
{"lineNum":" 1281","line":"protected:"},
{"lineNum":" 1282","line":"  evaluator<ConditionMatrixType> m_conditionImpl;"},
{"lineNum":" 1283","line":"  evaluator<ThenMatrixType> m_thenImpl;"},
{"lineNum":" 1284","line":"  evaluator<ElseMatrixType> m_elseImpl;"},
{"lineNum":" 1285","line":"};"},
{"lineNum":" 1286","line":""},
{"lineNum":" 1287","line":""},
{"lineNum":" 1288","line":"// -------------------- Replicate --------------------"},
{"lineNum":" 1289","line":""},
{"lineNum":" 1290","line":"template<typename ArgType, int RowFactor, int ColFactor>"},
{"lineNum":" 1291","line":"struct unary_evaluator<Replicate<ArgType, RowFactor, ColFactor> >"},
{"lineNum":" 1292","line":"  : evaluator_base<Replicate<ArgType, RowFactor, ColFactor> >"},
{"lineNum":" 1293","line":"{"},
{"lineNum":" 1294","line":"  typedef Replicate<ArgType, RowFactor, ColFactor> XprType;"},
{"lineNum":" 1295","line":"  typedef typename XprType::CoeffReturnType CoeffReturnType;"},
{"lineNum":" 1296","line":"  enum {"},
{"lineNum":" 1297","line":"    Factor = (RowFactor==Dynamic || ColFactor==Dynamic) ? Dynamic : RowFactor*ColFactor"},
{"lineNum":" 1298","line":"  };"},
{"lineNum":" 1299","line":"  typedef typename internal::nested_eval<ArgType,Factor>::type ArgTypeNested;"},
{"lineNum":" 1300","line":"  typedef typename internal::remove_all<ArgTypeNested>::type ArgTypeNestedCleaned;"},
{"lineNum":" 1301","line":""},
{"lineNum":" 1302","line":"  enum {"},
{"lineNum":" 1303","line":"    CoeffReadCost = evaluator<ArgTypeNestedCleaned>::CoeffReadCost,"},
{"lineNum":" 1304","line":"    LinearAccessMask = XprType::IsVectorAtCompileTime ? LinearAccessBit : 0,"},
{"lineNum":" 1305","line":"    Flags = (evaluator<ArgTypeNestedCleaned>::Flags & (HereditaryBits|LinearAccessMask) & ~RowMajorBit) | (traits<XprType>::Flags & RowMajorBit),"},
{"lineNum":" 1306","line":""},
{"lineNum":" 1307","line":"    Alignment = evaluator<ArgTypeNestedCleaned>::Alignment"},
{"lineNum":" 1308","line":"  };"},
{"lineNum":" 1309","line":""},
{"lineNum":" 1310","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1311","line":"  explicit unary_evaluator(const XprType& replicate)"},
{"lineNum":" 1312","line":"    : m_arg(replicate.nestedExpression()),"},
{"lineNum":" 1313","line":"      m_argImpl(m_arg),"},
{"lineNum":" 1314","line":"      m_rows(replicate.nestedExpression().rows()),"},
{"lineNum":" 1315","line":"      m_cols(replicate.nestedExpression().cols())"},
{"lineNum":" 1316","line":"  {}"},
{"lineNum":" 1317","line":""},
{"lineNum":" 1318","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1319","line":"  CoeffReturnType coeff(Index row, Index col) const"},
{"lineNum":" 1320","line":"  {"},
{"lineNum":" 1321","line":"    // try to avoid using modulo; this is a pure optimization strategy"},
{"lineNum":" 1322","line":"    const Index actual_row = internal::traits<XprType>::RowsAtCompileTime==1 ? 0"},
{"lineNum":" 1323","line":"                           : RowFactor==1 ? row"},
{"lineNum":" 1324","line":"                           : row % m_rows.value();"},
{"lineNum":" 1325","line":"    const Index actual_col = internal::traits<XprType>::ColsAtCompileTime==1 ? 0"},
{"lineNum":" 1326","line":"                           : ColFactor==1 ? col"},
{"lineNum":" 1327","line":"                           : col % m_cols.value();"},
{"lineNum":" 1328","line":""},
{"lineNum":" 1329","line":"    return m_argImpl.coeff(actual_row, actual_col);"},
{"lineNum":" 1330","line":"  }"},
{"lineNum":" 1331","line":""},
{"lineNum":" 1332","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1333","line":"  CoeffReturnType coeff(Index index) const"},
{"lineNum":" 1334","line":"  {"},
{"lineNum":" 1335","line":"    // try to avoid using modulo; this is a pure optimization strategy"},
{"lineNum":" 1336","line":"    const Index actual_index = internal::traits<XprType>::RowsAtCompileTime==1"},
{"lineNum":" 1337","line":"                                  ? (ColFactor==1 ?  index : index%m_cols.value())"},
{"lineNum":" 1338","line":"                                  : (RowFactor==1 ?  index : index%m_rows.value());"},
{"lineNum":" 1339","line":""},
{"lineNum":" 1340","line":"    return m_argImpl.coeff(actual_index);"},
{"lineNum":" 1341","line":"  }"},
{"lineNum":" 1342","line":""},
{"lineNum":" 1343","line":"  template<int LoadMode, typename PacketType>"},
{"lineNum":" 1344","line":"  EIGEN_STRONG_INLINE"},
{"lineNum":" 1345","line":"  PacketType packet(Index row, Index col) const"},
{"lineNum":" 1346","line":"  {"},
{"lineNum":" 1347","line":"    const Index actual_row = internal::traits<XprType>::RowsAtCompileTime==1 ? 0"},
{"lineNum":" 1348","line":"                           : RowFactor==1 ? row"},
{"lineNum":" 1349","line":"                           : row % m_rows.value();"},
{"lineNum":" 1350","line":"    const Index actual_col = internal::traits<XprType>::ColsAtCompileTime==1 ? 0"},
{"lineNum":" 1351","line":"                           : ColFactor==1 ? col"},
{"lineNum":" 1352","line":"                           : col % m_cols.value();"},
{"lineNum":" 1353","line":""},
{"lineNum":" 1354","line":"    return m_argImpl.template packet<LoadMode,PacketType>(actual_row, actual_col);"},
{"lineNum":" 1355","line":"  }"},
{"lineNum":" 1356","line":""},
{"lineNum":" 1357","line":"  template<int LoadMode, typename PacketType>"},
{"lineNum":" 1358","line":"  EIGEN_STRONG_INLINE"},
{"lineNum":" 1359","line":"  PacketType packet(Index index) const"},
{"lineNum":" 1360","line":"  {"},
{"lineNum":" 1361","line":"    const Index actual_index = internal::traits<XprType>::RowsAtCompileTime==1"},
{"lineNum":" 1362","line":"                                  ? (ColFactor==1 ?  index : index%m_cols.value())"},
{"lineNum":" 1363","line":"                                  : (RowFactor==1 ?  index : index%m_rows.value());"},
{"lineNum":" 1364","line":""},
{"lineNum":" 1365","line":"    return m_argImpl.template packet<LoadMode,PacketType>(actual_index);"},
{"lineNum":" 1366","line":"  }"},
{"lineNum":" 1367","line":""},
{"lineNum":" 1368","line":"protected:"},
{"lineNum":" 1369","line":"  const ArgTypeNested m_arg;"},
{"lineNum":" 1370","line":"  evaluator<ArgTypeNestedCleaned> m_argImpl;"},
{"lineNum":" 1371","line":"  const variable_if_dynamic<Index, ArgType::RowsAtCompileTime> m_rows;"},
{"lineNum":" 1372","line":"  const variable_if_dynamic<Index, ArgType::ColsAtCompileTime> m_cols;"},
{"lineNum":" 1373","line":"};"},
{"lineNum":" 1374","line":""},
{"lineNum":" 1375","line":"// -------------------- MatrixWrapper and ArrayWrapper --------------------"},
{"lineNum":" 1376","line":"//"},
{"lineNum":" 1377","line":"// evaluator_wrapper_base<T> is a common base class for the"},
{"lineNum":" 1378","line":"// MatrixWrapper and ArrayWrapper evaluators."},
{"lineNum":" 1379","line":""},
{"lineNum":" 1380","line":"template<typename XprType>"},
{"lineNum":" 1381","line":"struct evaluator_wrapper_base"},
{"lineNum":" 1382","line":"  : evaluator_base<XprType>"},
{"lineNum":" 1383","line":"{"},
{"lineNum":" 1384","line":"  typedef typename remove_all<typename XprType::NestedExpressionType>::type ArgType;"},
{"lineNum":" 1385","line":"  enum {"},
{"lineNum":" 1386","line":"    CoeffReadCost = evaluator<ArgType>::CoeffReadCost,"},
{"lineNum":" 1387","line":"    Flags = evaluator<ArgType>::Flags,"},
{"lineNum":" 1388","line":"    Alignment = evaluator<ArgType>::Alignment"},
{"lineNum":" 1389","line":"  };"},
{"lineNum":" 1390","line":""},
{"lineNum":" 1391","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1392","line":"  explicit evaluator_wrapper_base(const ArgType& arg) : m_argImpl(arg) {}"},
{"lineNum":" 1393","line":""},
{"lineNum":" 1394","line":"  typedef typename ArgType::Scalar Scalar;"},
{"lineNum":" 1395","line":"  typedef typename ArgType::CoeffReturnType CoeffReturnType;"},
{"lineNum":" 1396","line":""},
{"lineNum":" 1397","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1398","line":"  CoeffReturnType coeff(Index row, Index col) const"},
{"lineNum":" 1399","line":"  {"},
{"lineNum":" 1400","line":"    return m_argImpl.coeff(row, col);"},
{"lineNum":" 1401","line":"  }"},
{"lineNum":" 1402","line":""},
{"lineNum":" 1403","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1404","line":"  CoeffReturnType coeff(Index index) const"},
{"lineNum":" 1405","line":"  {"},
{"lineNum":" 1406","line":"    return m_argImpl.coeff(index);"},
{"lineNum":" 1407","line":"  }"},
{"lineNum":" 1408","line":""},
{"lineNum":" 1409","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1410","line":"  Scalar& coeffRef(Index row, Index col)"},
{"lineNum":" 1411","line":"  {"},
{"lineNum":" 1412","line":"    return m_argImpl.coeffRef(row, col);"},
{"lineNum":" 1413","line":"  }"},
{"lineNum":" 1414","line":""},
{"lineNum":" 1415","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1416","line":"  Scalar& coeffRef(Index index)"},
{"lineNum":" 1417","line":"  {"},
{"lineNum":" 1418","line":"    return m_argImpl.coeffRef(index);"},
{"lineNum":" 1419","line":"  }"},
{"lineNum":" 1420","line":""},
{"lineNum":" 1421","line":"  template<int LoadMode, typename PacketType>"},
{"lineNum":" 1422","line":"  EIGEN_STRONG_INLINE"},
{"lineNum":" 1423","line":"  PacketType packet(Index row, Index col) const"},
{"lineNum":" 1424","line":"  {"},
{"lineNum":" 1425","line":"    return m_argImpl.template packet<LoadMode,PacketType>(row, col);"},
{"lineNum":" 1426","line":"  }"},
{"lineNum":" 1427","line":""},
{"lineNum":" 1428","line":"  template<int LoadMode, typename PacketType>"},
{"lineNum":" 1429","line":"  EIGEN_STRONG_INLINE"},
{"lineNum":" 1430","line":"  PacketType packet(Index index) const"},
{"lineNum":" 1431","line":"  {"},
{"lineNum":" 1432","line":"    return m_argImpl.template packet<LoadMode,PacketType>(index);"},
{"lineNum":" 1433","line":"  }"},
{"lineNum":" 1434","line":""},
{"lineNum":" 1435","line":"  template<int StoreMode, typename PacketType>"},
{"lineNum":" 1436","line":"  EIGEN_STRONG_INLINE"},
{"lineNum":" 1437","line":"  void writePacket(Index row, Index col, const PacketType& x)"},
{"lineNum":" 1438","line":"  {"},
{"lineNum":" 1439","line":"    m_argImpl.template writePacket<StoreMode>(row, col, x);"},
{"lineNum":" 1440","line":"  }"},
{"lineNum":" 1441","line":""},
{"lineNum":" 1442","line":"  template<int StoreMode, typename PacketType>"},
{"lineNum":" 1443","line":"  EIGEN_STRONG_INLINE"},
{"lineNum":" 1444","line":"  void writePacket(Index index, const PacketType& x)"},
{"lineNum":" 1445","line":"  {"},
{"lineNum":" 1446","line":"    m_argImpl.template writePacket<StoreMode>(index, x);"},
{"lineNum":" 1447","line":"  }"},
{"lineNum":" 1448","line":""},
{"lineNum":" 1449","line":"protected:"},
{"lineNum":" 1450","line":"  evaluator<ArgType> m_argImpl;"},
{"lineNum":" 1451","line":"};"},
{"lineNum":" 1452","line":""},
{"lineNum":" 1453","line":"template<typename TArgType>"},
{"lineNum":" 1454","line":"struct unary_evaluator<MatrixWrapper<TArgType> >"},
{"lineNum":" 1455","line":"  : evaluator_wrapper_base<MatrixWrapper<TArgType> >"},
{"lineNum":" 1456","line":"{"},
{"lineNum":" 1457","line":"  typedef MatrixWrapper<TArgType> XprType;"},
{"lineNum":" 1458","line":""},
{"lineNum":" 1459","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1460","line":"  explicit unary_evaluator(const XprType& wrapper)"},
{"lineNum":" 1461","line":"    : evaluator_wrapper_base<MatrixWrapper<TArgType> >(wrapper.nestedExpression())"},
{"lineNum":" 1462","line":"  { }"},
{"lineNum":" 1463","line":"};"},
{"lineNum":" 1464","line":""},
{"lineNum":" 1465","line":"template<typename TArgType>"},
{"lineNum":" 1466","line":"struct unary_evaluator<ArrayWrapper<TArgType> >"},
{"lineNum":" 1467","line":"  : evaluator_wrapper_base<ArrayWrapper<TArgType> >"},
{"lineNum":" 1468","line":"{"},
{"lineNum":" 1469","line":"  typedef ArrayWrapper<TArgType> XprType;"},
{"lineNum":" 1470","line":""},
{"lineNum":" 1471","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1472","line":"  explicit unary_evaluator(const XprType& wrapper)"},
{"lineNum":" 1473","line":"    : evaluator_wrapper_base<ArrayWrapper<TArgType> >(wrapper.nestedExpression())"},
{"lineNum":" 1474","line":"  { }"},
{"lineNum":" 1475","line":"};"},
{"lineNum":" 1476","line":""},
{"lineNum":" 1477","line":""},
{"lineNum":" 1478","line":"// -------------------- Reverse --------------------"},
{"lineNum":" 1479","line":""},
{"lineNum":" 1480","line":"// defined in Reverse.h:"},
{"lineNum":" 1481","line":"template<typename PacketType, bool ReversePacket> struct reverse_packet_cond;"},
{"lineNum":" 1482","line":""},
{"lineNum":" 1483","line":"template<typename ArgType, int Direction>"},
{"lineNum":" 1484","line":"struct unary_evaluator<Reverse<ArgType, Direction> >"},
{"lineNum":" 1485","line":"  : evaluator_base<Reverse<ArgType, Direction> >"},
{"lineNum":" 1486","line":"{"},
{"lineNum":" 1487","line":"  typedef Reverse<ArgType, Direction> XprType;"},
{"lineNum":" 1488","line":"  typedef typename XprType::Scalar Scalar;"},
{"lineNum":" 1489","line":"  typedef typename XprType::CoeffReturnType CoeffReturnType;"},
{"lineNum":" 1490","line":""},
{"lineNum":" 1491","line":"  enum {"},
{"lineNum":" 1492","line":"    IsRowMajor = XprType::IsRowMajor,"},
{"lineNum":" 1493","line":"    IsColMajor = !IsRowMajor,"},
{"lineNum":" 1494","line":"    ReverseRow = (Direction == Vertical)   || (Direction == BothDirections),"},
{"lineNum":" 1495","line":"    ReverseCol = (Direction == Horizontal) || (Direction == BothDirections),"},
{"lineNum":" 1496","line":"    ReversePacket = (Direction == BothDirections)"},
{"lineNum":" 1497","line":"                    || ((Direction == Vertical)   && IsColMajor)"},
{"lineNum":" 1498","line":"                    || ((Direction == Horizontal) && IsRowMajor),"},
{"lineNum":" 1499","line":""},
{"lineNum":" 1500","line":"    CoeffReadCost = evaluator<ArgType>::CoeffReadCost,"},
{"lineNum":" 1501","line":""},
{"lineNum":" 1502","line":"    // let\'s enable LinearAccess only with vectorization because of the product overhead"},
{"lineNum":" 1503","line":"    // FIXME enable DirectAccess with negative strides?"},
{"lineNum":" 1504","line":"    Flags0 = evaluator<ArgType>::Flags,"},
{"lineNum":" 1505","line":"    LinearAccess = ( (Direction==BothDirections) && (int(Flags0)&PacketAccessBit) )"},
{"lineNum":" 1506","line":"                  || ((ReverseRow && XprType::ColsAtCompileTime==1) || (ReverseCol && XprType::RowsAtCompileTime==1))"},
{"lineNum":" 1507","line":"                 ? LinearAccessBit : 0,"},
{"lineNum":" 1508","line":""},
{"lineNum":" 1509","line":"    Flags = int(Flags0) & (HereditaryBits | PacketAccessBit | LinearAccess),"},
{"lineNum":" 1510","line":""},
{"lineNum":" 1511","line":"    Alignment = 0 // FIXME in some rare cases, Alignment could be preserved, like a Vector4f."},
{"lineNum":" 1512","line":"  };"},
{"lineNum":" 1513","line":""},
{"lineNum":" 1514","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1515","line":"  explicit unary_evaluator(const XprType& reverse)"},
{"lineNum":" 1516","line":"    : m_argImpl(reverse.nestedExpression()),"},
{"lineNum":" 1517","line":"      m_rows(ReverseRow ? reverse.nestedExpression().rows() : 1),"},
{"lineNum":" 1518","line":"      m_cols(ReverseCol ? reverse.nestedExpression().cols() : 1)"},
{"lineNum":" 1519","line":"  { }"},
{"lineNum":" 1520","line":""},
{"lineNum":" 1521","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1522","line":"  CoeffReturnType coeff(Index row, Index col) const"},
{"lineNum":" 1523","line":"  {"},
{"lineNum":" 1524","line":"    return m_argImpl.coeff(ReverseRow ? m_rows.value() - row - 1 : row,"},
{"lineNum":" 1525","line":"                           ReverseCol ? m_cols.value() - col - 1 : col);"},
{"lineNum":" 1526","line":"  }"},
{"lineNum":" 1527","line":""},
{"lineNum":" 1528","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1529","line":"  CoeffReturnType coeff(Index index) const"},
{"lineNum":" 1530","line":"  {"},
{"lineNum":" 1531","line":"    return m_argImpl.coeff(m_rows.value() * m_cols.value() - index - 1);"},
{"lineNum":" 1532","line":"  }"},
{"lineNum":" 1533","line":""},
{"lineNum":" 1534","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1535","line":"  Scalar& coeffRef(Index row, Index col)"},
{"lineNum":" 1536","line":"  {"},
{"lineNum":" 1537","line":"    return m_argImpl.coeffRef(ReverseRow ? m_rows.value() - row - 1 : row,"},
{"lineNum":" 1538","line":"                              ReverseCol ? m_cols.value() - col - 1 : col);"},
{"lineNum":" 1539","line":"  }"},
{"lineNum":" 1540","line":""},
{"lineNum":" 1541","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1542","line":"  Scalar& coeffRef(Index index)"},
{"lineNum":" 1543","line":"  {"},
{"lineNum":" 1544","line":"    return m_argImpl.coeffRef(m_rows.value() * m_cols.value() - index - 1);"},
{"lineNum":" 1545","line":"  }"},
{"lineNum":" 1546","line":""},
{"lineNum":" 1547","line":"  template<int LoadMode, typename PacketType>"},
{"lineNum":" 1548","line":"  EIGEN_STRONG_INLINE"},
{"lineNum":" 1549","line":"  PacketType packet(Index row, Index col) const"},
{"lineNum":" 1550","line":"  {"},
{"lineNum":" 1551","line":"    enum {"},
{"lineNum":" 1552","line":"      PacketSize = unpacket_traits<PacketType>::size,"},
{"lineNum":" 1553","line":"      OffsetRow  = ReverseRow && IsColMajor ? PacketSize : 1,"},
{"lineNum":" 1554","line":"      OffsetCol  = ReverseCol && IsRowMajor ? PacketSize : 1"},
{"lineNum":" 1555","line":"    };"},
{"lineNum":" 1556","line":"    typedef internal::reverse_packet_cond<PacketType,ReversePacket> reverse_packet;"},
{"lineNum":" 1557","line":"    return reverse_packet::run(m_argImpl.template packet<LoadMode,PacketType>("},
{"lineNum":" 1558","line":"                                  ReverseRow ? m_rows.value() - row - OffsetRow : row,"},
{"lineNum":" 1559","line":"                                  ReverseCol ? m_cols.value() - col - OffsetCol : col));"},
{"lineNum":" 1560","line":"  }"},
{"lineNum":" 1561","line":""},
{"lineNum":" 1562","line":"  template<int LoadMode, typename PacketType>"},
{"lineNum":" 1563","line":"  EIGEN_STRONG_INLINE"},
{"lineNum":" 1564","line":"  PacketType packet(Index index) const"},
{"lineNum":" 1565","line":"  {"},
{"lineNum":" 1566","line":"    enum { PacketSize = unpacket_traits<PacketType>::size };"},
{"lineNum":" 1567","line":"    return preverse(m_argImpl.template packet<LoadMode,PacketType>(m_rows.value() * m_cols.value() - index - PacketSize));"},
{"lineNum":" 1568","line":"  }"},
{"lineNum":" 1569","line":""},
{"lineNum":" 1570","line":"  template<int LoadMode, typename PacketType>"},
{"lineNum":" 1571","line":"  EIGEN_STRONG_INLINE"},
{"lineNum":" 1572","line":"  void writePacket(Index row, Index col, const PacketType& x)"},
{"lineNum":" 1573","line":"  {"},
{"lineNum":" 1574","line":"    // FIXME we could factorize some code with packet(i,j)"},
{"lineNum":" 1575","line":"    enum {"},
{"lineNum":" 1576","line":"      PacketSize = unpacket_traits<PacketType>::size,"},
{"lineNum":" 1577","line":"      OffsetRow  = ReverseRow && IsColMajor ? PacketSize : 1,"},
{"lineNum":" 1578","line":"      OffsetCol  = ReverseCol && IsRowMajor ? PacketSize : 1"},
{"lineNum":" 1579","line":"    };"},
{"lineNum":" 1580","line":"    typedef internal::reverse_packet_cond<PacketType,ReversePacket> reverse_packet;"},
{"lineNum":" 1581","line":"    m_argImpl.template writePacket<LoadMode>("},
{"lineNum":" 1582","line":"                                  ReverseRow ? m_rows.value() - row - OffsetRow : row,"},
{"lineNum":" 1583","line":"                                  ReverseCol ? m_cols.value() - col - OffsetCol : col,"},
{"lineNum":" 1584","line":"                                  reverse_packet::run(x));"},
{"lineNum":" 1585","line":"  }"},
{"lineNum":" 1586","line":""},
{"lineNum":" 1587","line":"  template<int LoadMode, typename PacketType>"},
{"lineNum":" 1588","line":"  EIGEN_STRONG_INLINE"},
{"lineNum":" 1589","line":"  void writePacket(Index index, const PacketType& x)"},
{"lineNum":" 1590","line":"  {"},
{"lineNum":" 1591","line":"    enum { PacketSize = unpacket_traits<PacketType>::size };"},
{"lineNum":" 1592","line":"    m_argImpl.template writePacket<LoadMode>"},
{"lineNum":" 1593","line":"      (m_rows.value() * m_cols.value() - index - PacketSize, preverse(x));"},
{"lineNum":" 1594","line":"  }"},
{"lineNum":" 1595","line":""},
{"lineNum":" 1596","line":"protected:"},
{"lineNum":" 1597","line":"  evaluator<ArgType> m_argImpl;"},
{"lineNum":" 1598","line":""},
{"lineNum":" 1599","line":"  // If we do not reverse rows, then we do not need to know the number of rows; same for columns"},
{"lineNum":" 1600","line":"  // Nonetheless, in this case it is important to set to 1 such that the coeff(index) method works fine for vectors."},
{"lineNum":" 1601","line":"  const variable_if_dynamic<Index, ReverseRow ? ArgType::RowsAtCompileTime : 1> m_rows;"},
{"lineNum":" 1602","line":"  const variable_if_dynamic<Index, ReverseCol ? ArgType::ColsAtCompileTime : 1> m_cols;"},
{"lineNum":" 1603","line":"};"},
{"lineNum":" 1604","line":""},
{"lineNum":" 1605","line":""},
{"lineNum":" 1606","line":"// -------------------- Diagonal --------------------"},
{"lineNum":" 1607","line":""},
{"lineNum":" 1608","line":"template<typename ArgType, int DiagIndex>"},
{"lineNum":" 1609","line":"struct evaluator<Diagonal<ArgType, DiagIndex> >"},
{"lineNum":" 1610","line":"  : evaluator_base<Diagonal<ArgType, DiagIndex> >"},
{"lineNum":" 1611","line":"{"},
{"lineNum":" 1612","line":"  typedef Diagonal<ArgType, DiagIndex> XprType;"},
{"lineNum":" 1613","line":""},
{"lineNum":" 1614","line":"  enum {"},
{"lineNum":" 1615","line":"    CoeffReadCost = evaluator<ArgType>::CoeffReadCost,"},
{"lineNum":" 1616","line":""},
{"lineNum":" 1617","line":"    Flags = (unsigned int)(evaluator<ArgType>::Flags & (HereditaryBits | DirectAccessBit) & ~RowMajorBit) | LinearAccessBit,"},
{"lineNum":" 1618","line":""},
{"lineNum":" 1619","line":"    Alignment = 0"},
{"lineNum":" 1620","line":"  };"},
{"lineNum":" 1621","line":""},
{"lineNum":" 1622","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1623","line":"  explicit evaluator(const XprType& diagonal)"},
{"lineNum":" 1624","line":"    : m_argImpl(diagonal.nestedExpression()),"},
{"lineNum":" 1625","line":"      m_index(diagonal.index())"},
{"lineNum":" 1626","line":"  { }"},
{"lineNum":" 1627","line":""},
{"lineNum":" 1628","line":"  typedef typename XprType::Scalar Scalar;"},
{"lineNum":" 1629","line":"  typedef typename XprType::CoeffReturnType CoeffReturnType;"},
{"lineNum":" 1630","line":""},
{"lineNum":" 1631","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1632","line":"  CoeffReturnType coeff(Index row, Index) const"},
{"lineNum":" 1633","line":"  {"},
{"lineNum":" 1634","line":"    return m_argImpl.coeff(row + rowOffset(), row + colOffset());","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":" 1635","line":"  }"},
{"lineNum":" 1636","line":""},
{"lineNum":" 1637","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1638","line":"  CoeffReturnType coeff(Index index) const"},
{"lineNum":" 1639","line":"  {"},
{"lineNum":" 1640","line":"    return m_argImpl.coeff(index + rowOffset(), index + colOffset());"},
{"lineNum":" 1641","line":"  }"},
{"lineNum":" 1642","line":""},
{"lineNum":" 1643","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1644","line":"  Scalar& coeffRef(Index row, Index)"},
{"lineNum":" 1645","line":"  {"},
{"lineNum":" 1646","line":"    return m_argImpl.coeffRef(row + rowOffset(), row + colOffset());"},
{"lineNum":" 1647","line":"  }"},
{"lineNum":" 1648","line":""},
{"lineNum":" 1649","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1650","line":"  Scalar& coeffRef(Index index)"},
{"lineNum":" 1651","line":"  {"},
{"lineNum":" 1652","line":"    return m_argImpl.coeffRef(index + rowOffset(), index + colOffset());"},
{"lineNum":" 1653","line":"  }"},
{"lineNum":" 1654","line":""},
{"lineNum":" 1655","line":"protected:"},
{"lineNum":" 1656","line":"  evaluator<ArgType> m_argImpl;"},
{"lineNum":" 1657","line":"  const internal::variable_if_dynamicindex<Index, XprType::DiagIndex> m_index;"},
{"lineNum":" 1658","line":""},
{"lineNum":" 1659","line":"private:"},
{"lineNum":" 1660","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR"},
{"lineNum":" 1661","line":"  Index rowOffset() const { return m_index.value() > 0 ? 0 : -m_index.value(); }"},
{"lineNum":" 1662","line":"  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR"},
{"lineNum":" 1663","line":"  Index colOffset() const { return m_index.value() > 0 ? m_index.value() : 0; }"},
{"lineNum":" 1664","line":"};"},
{"lineNum":" 1665","line":""},
{"lineNum":" 1666","line":""},
{"lineNum":" 1667","line":"//----------------------------------------------------------------------"},
{"lineNum":" 1668","line":"// deprecated code"},
{"lineNum":" 1669","line":"//----------------------------------------------------------------------"},
{"lineNum":" 1670","line":""},
{"lineNum":" 1671","line":"// -------------------- EvalToTemp --------------------"},
{"lineNum":" 1672","line":""},
{"lineNum":" 1673","line":"// expression class for evaluating nested expression to a temporary"},
{"lineNum":" 1674","line":""},
{"lineNum":" 1675","line":"template<typename ArgType> class EvalToTemp;"},
{"lineNum":" 1676","line":""},
{"lineNum":" 1677","line":"template<typename ArgType>"},
{"lineNum":" 1678","line":"struct traits<EvalToTemp<ArgType> >"},
{"lineNum":" 1679","line":"  : public traits<ArgType>"},
{"lineNum":" 1680","line":"{ };"},
{"lineNum":" 1681","line":""},
{"lineNum":" 1682","line":"template<typename ArgType>"},
{"lineNum":" 1683","line":"class EvalToTemp"},
{"lineNum":" 1684","line":"  : public dense_xpr_base<EvalToTemp<ArgType> >::type"},
{"lineNum":" 1685","line":"{"},
{"lineNum":" 1686","line":" public:"},
{"lineNum":" 1687","line":""},
{"lineNum":" 1688","line":"  typedef typename dense_xpr_base<EvalToTemp>::type Base;"},
{"lineNum":" 1689","line":"  EIGEN_GENERIC_PUBLIC_INTERFACE(EvalToTemp)"},
{"lineNum":" 1690","line":""},
{"lineNum":" 1691","line":"  explicit EvalToTemp(const ArgType& arg)"},
{"lineNum":" 1692","line":"    : m_arg(arg)"},
{"lineNum":" 1693","line":"  { }"},
{"lineNum":" 1694","line":""},
{"lineNum":" 1695","line":"  const ArgType& arg() const"},
{"lineNum":" 1696","line":"  {"},
{"lineNum":" 1697","line":"    return m_arg;"},
{"lineNum":" 1698","line":"  }"},
{"lineNum":" 1699","line":""},
{"lineNum":" 1700","line":"  EIGEN_CONSTEXPR Index rows() const EIGEN_NOEXCEPT"},
{"lineNum":" 1701","line":"  {"},
{"lineNum":" 1702","line":"    return m_arg.rows();"},
{"lineNum":" 1703","line":"  }"},
{"lineNum":" 1704","line":""},
{"lineNum":" 1705","line":"  EIGEN_CONSTEXPR Index cols() const EIGEN_NOEXCEPT"},
{"lineNum":" 1706","line":"  {"},
{"lineNum":" 1707","line":"    return m_arg.cols();"},
{"lineNum":" 1708","line":"  }"},
{"lineNum":" 1709","line":""},
{"lineNum":" 1710","line":" private:"},
{"lineNum":" 1711","line":"  const ArgType& m_arg;"},
{"lineNum":" 1712","line":"};"},
{"lineNum":" 1713","line":""},
{"lineNum":" 1714","line":"template<typename ArgType>"},
{"lineNum":" 1715","line":"struct evaluator<EvalToTemp<ArgType> >"},
{"lineNum":" 1716","line":"  : public evaluator<typename ArgType::PlainObject>"},
{"lineNum":" 1717","line":"{"},
{"lineNum":" 1718","line":"  typedef EvalToTemp<ArgType>                   XprType;"},
{"lineNum":" 1719","line":"  typedef typename ArgType::PlainObject         PlainObject;"},
{"lineNum":" 1720","line":"  typedef evaluator<PlainObject> Base;"},
{"lineNum":" 1721","line":""},
{"lineNum":" 1722","line":"  EIGEN_DEVICE_FUNC explicit evaluator(const XprType& xpr)"},
{"lineNum":" 1723","line":"    : m_result(xpr.arg())"},
{"lineNum":" 1724","line":"  {"},
{"lineNum":" 1725","line":"    ::new (static_cast<Base*>(this)) Base(m_result);"},
{"lineNum":" 1726","line":"  }"},
{"lineNum":" 1727","line":""},
{"lineNum":" 1728","line":"  // This constructor is used when nesting an EvalTo evaluator in another evaluator"},
{"lineNum":" 1729","line":"  EIGEN_DEVICE_FUNC evaluator(const ArgType& arg)"},
{"lineNum":" 1730","line":"    : m_result(arg)"},
{"lineNum":" 1731","line":"  {"},
{"lineNum":" 1732","line":"    ::new (static_cast<Base*>(this)) Base(m_result);"},
{"lineNum":" 1733","line":"  }"},
{"lineNum":" 1734","line":""},
{"lineNum":" 1735","line":"protected:"},
{"lineNum":" 1736","line":"  PlainObject m_result;"},
{"lineNum":" 1737","line":"};"},
{"lineNum":" 1738","line":""},
{"lineNum":" 1739","line":"} // namespace internal"},
{"lineNum":" 1740","line":""},
{"lineNum":" 1741","line":"} // end namespace Eigen"},
{"lineNum":" 1742","line":""},
{"lineNum":" 1743","line":"#endif // EIGEN_COREEVALUATORS_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 30, "covered" : 0,};
var merged_data = [];
