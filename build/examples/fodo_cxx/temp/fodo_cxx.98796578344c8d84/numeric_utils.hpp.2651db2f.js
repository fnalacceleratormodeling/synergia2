var data = {lines:[
{"lineNum":"    1","line":"/*============================================================================="},
{"lineNum":"    2","line":"    Copyright (c) 2001-2011 Joel de Guzman"},
{"lineNum":"    3","line":"    Copyright (c) 2011 Jan Frederick Eick"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"    Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    6","line":"    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    7","line":"==============================================================================*/"},
{"lineNum":"    8","line":"#if !defined(BOOST_SPIRIT_NUMERIC_UTILS_APRIL_17_2006_0830AM)"},
{"lineNum":"    9","line":"#define BOOST_SPIRIT_NUMERIC_UTILS_APRIL_17_2006_0830AM"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"#if defined(_MSC_VER)"},
{"lineNum":"   12","line":"#pragma once"},
{"lineNum":"   13","line":"#endif"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"#include <boost/spirit/home/support/assert_msg.hpp>"},
{"lineNum":"   16","line":"#include <boost/spirit/home/qi/detail/assign_to.hpp>"},
{"lineNum":"   17","line":"#include <boost/spirit/home/qi/numeric/detail/numeric_utils.hpp>"},
{"lineNum":"   18","line":"#include <boost/assert.hpp>"},
{"lineNum":"   19","line":"#include <boost/mpl/assert.hpp>"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"namespace boost { namespace spirit { namespace qi"},
{"lineNum":"   22","line":"{"},
{"lineNum":"   23","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   24","line":"    //  Extract the prefix sign (- or +), return true if a \'-\' was found"},
{"lineNum":"   25","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   26","line":"    template <typename Iterator>"},
{"lineNum":"   27","line":"    inline bool"},
{"lineNum":"   28","line":"    extract_sign(Iterator& first, Iterator const& last)"},
{"lineNum":"   29","line":"    {"},
{"lineNum":"   30","line":"        (void)last;                  // silence unused warnings"},
{"lineNum":"   31","line":"        BOOST_ASSERT(first != last); // precondition"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"        // Extract the sign"},
{"lineNum":"   34","line":"        bool neg = *first == \'-\';","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   35","line":"        if (neg || (*first == \'+\'))","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   36","line":"        {"},
{"lineNum":"   37","line":"            ++first;"},
{"lineNum":"   38","line":"            return neg;"},
{"lineNum":"   39","line":"        }"},
{"lineNum":"   40","line":"        return false;"},
{"lineNum":"   41","line":"    }"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   44","line":"    // Low level unsigned integer parser"},
{"lineNum":"   45","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   46","line":"    template <typename T, unsigned Radix, unsigned MinDigits, int MaxDigits"},
{"lineNum":"   47","line":"      , bool Accumulate = false, bool IgnoreOverflowDigits = false>"},
{"lineNum":"   48","line":"    struct extract_uint"},
{"lineNum":"   49","line":"    {"},
{"lineNum":"   50","line":"        // check template parameter \'Radix\' for validity"},
{"lineNum":"   51","line":"        BOOST_SPIRIT_ASSERT_MSG("},
{"lineNum":"   52","line":"            Radix >= 2 && Radix <= 36,"},
{"lineNum":"   53","line":"            not_supported_radix, ());"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"        template <typename Iterator>"},
{"lineNum":"   56","line":"        inline static bool call(Iterator& first, Iterator const& last, T& attr_)"},
{"lineNum":"   57","line":"        {"},
{"lineNum":"   58","line":"            if (first == last)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   59","line":"                return false;"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"            typedef detail::extract_int<"},
{"lineNum":"   62","line":"                T"},
{"lineNum":"   63","line":"              , Radix"},
{"lineNum":"   64","line":"              , MinDigits"},
{"lineNum":"   65","line":"              , MaxDigits"},
{"lineNum":"   66","line":"              , detail::positive_accumulator<Radix>"},
{"lineNum":"   67","line":"              , Accumulate"},
{"lineNum":"   68","line":"              , IgnoreOverflowDigits>"},
{"lineNum":"   69","line":"            extract_type;"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"            Iterator save = first;"},
{"lineNum":"   72","line":"            if (!extract_type::parse(first, last, attr_))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   73","line":"            {"},
{"lineNum":"   74","line":"                first = save;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   75","line":"                return false;"},
{"lineNum":"   76","line":"            }"},
{"lineNum":"   77","line":"            return true;"},
{"lineNum":"   78","line":"        }"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"        template <typename Iterator, typename Attribute>"},
{"lineNum":"   81","line":"        inline static bool call(Iterator& first, Iterator const& last, Attribute& attr_)"},
{"lineNum":"   82","line":"        {"},
{"lineNum":"   83","line":"            // this case is called when Attribute is not T"},
{"lineNum":"   84","line":"            T attr_local;"},
{"lineNum":"   85","line":"            if (call(first, last, attr_local))"},
{"lineNum":"   86","line":"            {"},
{"lineNum":"   87","line":"                traits::assign_to(attr_local, attr_);"},
{"lineNum":"   88","line":"                return true;"},
{"lineNum":"   89","line":"            }"},
{"lineNum":"   90","line":"            return false;"},
{"lineNum":"   91","line":"        }"},
{"lineNum":"   92","line":"    };"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   95","line":"    // Low level signed integer parser"},
{"lineNum":"   96","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   97","line":"    template <typename T, unsigned Radix, unsigned MinDigits, int MaxDigits>"},
{"lineNum":"   98","line":"    struct extract_int"},
{"lineNum":"   99","line":"    {"},
{"lineNum":"  100","line":"        // check template parameter \'Radix\' for validity"},
{"lineNum":"  101","line":"        BOOST_SPIRIT_ASSERT_MSG("},
{"lineNum":"  102","line":"            Radix == 2 || Radix == 8 || Radix == 10 || Radix == 16,"},
{"lineNum":"  103","line":"            not_supported_radix, ());"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"        template <typename Iterator>"},
{"lineNum":"  106","line":"        inline static bool call(Iterator& first, Iterator const& last, T& attr_)"},
{"lineNum":"  107","line":"        {"},
{"lineNum":"  108","line":"            if (first == last)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  109","line":"                return false;"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"            typedef detail::extract_int<"},
{"lineNum":"  112","line":"                T, Radix, MinDigits, MaxDigits>"},
{"lineNum":"  113","line":"            extract_pos_type;"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"            typedef detail::extract_int<"},
{"lineNum":"  116","line":"                T, Radix, MinDigits, MaxDigits, detail::negative_accumulator<Radix> >"},
{"lineNum":"  117","line":"            extract_neg_type;"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"            Iterator save = first;"},
{"lineNum":"  120","line":"            bool hit = extract_sign(first, last);"},
{"lineNum":"  121","line":"            if (hit)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  122","line":"                hit = extract_neg_type::parse(first, last, attr_);"},
{"lineNum":"  123","line":"            else"},
{"lineNum":"  124","line":"                hit = extract_pos_type::parse(first, last, attr_);"},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"            if (!hit)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  127","line":"            {"},
{"lineNum":"  128","line":"                first = save;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  129","line":"                return false;"},
{"lineNum":"  130","line":"            }"},
{"lineNum":"  131","line":"            return true;"},
{"lineNum":"  132","line":"        }"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"        template <typename Iterator, typename Attribute>"},
{"lineNum":"  135","line":"        inline static bool call(Iterator& first, Iterator const& last, Attribute& attr_)"},
{"lineNum":"  136","line":"        {"},
{"lineNum":"  137","line":"            // this case is called when Attribute is not T"},
{"lineNum":"  138","line":"            T attr_local;"},
{"lineNum":"  139","line":"            if (call(first, last, attr_local))"},
{"lineNum":"  140","line":"            {"},
{"lineNum":"  141","line":"                traits::assign_to(attr_local, attr_);"},
{"lineNum":"  142","line":"                return true;"},
{"lineNum":"  143","line":"            }"},
{"lineNum":"  144","line":"            return false;"},
{"lineNum":"  145","line":"        }"},
{"lineNum":"  146","line":"    };"},
{"lineNum":"  147","line":"}}}"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 9, "covered" : 0,};
var merged_data = [];
