var data = {lines:[
{"lineNum":"    1","line":"#ifndef DISTRIBUTION_H_"},
{"lineNum":"    2","line":"#define DISTRIBUTION_H_"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#include \"synergia/utils/commxx.h\""},
{"lineNum":"    5","line":"#include <gsl/gsl_rng.h>"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"/// Distribution is a virtual base class for obtaining the next number or set"},
{"lineNum":"    8","line":"/// of numbers from a sequence according to a limited set of shapes."},
{"lineNum":"    9","line":"class Distribution"},
{"lineNum":"   10","line":"{"},
{"lineNum":"   11","line":"public:"},
{"lineNum":"   12","line":"    virtual ~Distribution() = default;"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"    /// Get the next number in the sequence (between 0 and 1)."},
{"lineNum":"   15","line":"    virtual double get() = 0;"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"    /// Fill a one-dimensional array uniformly between min and max."},
{"lineNum":"   18","line":"    virtual double get_uniform(double min, double max) = 0;"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"    /// Fill a one-dimensional array with Gaussian distribution of"},
{"lineNum":"   21","line":"    /// zero mean and unit standard deviation."},
{"lineNum":"   22","line":"    virtual double get_unit_gaussian() = 0;"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"    /// Fill two one-dimensional arrays such that (x,y) are distributed"},
{"lineNum":"   25","line":"    /// uniformly in the unit disk."},
{"lineNum":"   26","line":"    /// virtual void fill_unit_disk(double* x_array, double* y_array) = 0;"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"    /// Skip ahead the random number generator by delta"},
{"lineNum":"   29","line":"    virtual void advance(uint64_t delta) = 0;"},
{"lineNum":"   30","line":"};"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"/// Random_distribution provides a Distribution of random numbers. The random seed"},
{"lineNum":"   33","line":"/// is maintained across multiple processors. The implementation uses random numbers"},
{"lineNum":"   34","line":"/// from the GNU Scientific Library."},
{"lineNum":"   35","line":"class Random_distribution : public Distribution"},
{"lineNum":"   36","line":"{"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"private:"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"    gsl_rng *rng;"},
{"lineNum":"   41","line":"    const gsl_rng_type * rng_type;"},
{"lineNum":"   42","line":"    int rank;"},
{"lineNum":"   43","line":"    unsigned long int original_seed;"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"public:"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"    enum Generator { ranlxd2, mt19937 };"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"    /// Construct a Random_distribution."},
{"lineNum":"   50","line":"    /// @param seed The random number seed. If seed == 0, the seed is"},
{"lineNum":"   51","line":"    /// obtained from Random_distribution::get_default_seed()."},
{"lineNum":"   52","line":"    /// @param comm Distribute the seed across the processors in this"},
{"lineNum":"   53","line":"    /// communicator."},
{"lineNum":"   54","line":"    /// @param generator The underlying random number generator to be used."},
{"lineNum":"   55","line":"    Random_distribution( unsigned long int seed,"},
{"lineNum":"   56","line":"                         Commxx const & comm,"},
{"lineNum":"   57","line":"                         Generator generator = ranlxd2 );"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"    virtual ~Random_distribution();"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"    /// Generate a random seed. Attempt to read from device if present."},
{"lineNum":"   62","line":"    /// Otherwise, use the system clock."},
{"lineNum":"   63","line":"    /// @param device Read from pathname device."},
{"lineNum":"   64","line":"    static unsigned long int get_default_seed(const char * device = \"/dev/urandom\");"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"    /// Set the random number generator seed."},
{"lineNum":"   67","line":"    /// @param seed The seed."},
{"lineNum":"   68","line":"    void set_seed(unsigned long int seed);"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"    /// Get the seed used to start the random number generator."},
{"lineNum":"   71","line":"    unsigned long int get_original_seed() const;"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"    /// Get the next random number between 0 and 1."},
{"lineNum":"   74","line":"    double get() override;"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"    /// Fill a one-dimensional array uniformly between min and max."},
{"lineNum":"   77","line":"    double get_uniform(double min, double max) override;"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"    /// Fill a one-dimensional array with Gaussian distribution of"},
{"lineNum":"   80","line":"    /// zero mean and unit standard deviation."},
{"lineNum":"   81","line":"    double get_unit_gaussian() override;"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"    /// Fill two one-dimensional arrays such that (x,y) are distributed"},
{"lineNum":"   84","line":"    /// uniformly in the unit disk."},
{"lineNum":"   85","line":"    /// void fill_unit_disk(double* x_array, double* y_array) override;"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"    void advance(uint64_t delta) override"},
{"lineNum":"   88","line":"    { }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"    void test();"},
{"lineNum":"   91","line":"};"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"#endif /* DISTRIBUTION_H_ */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 1, "covered" : 0,};
var merged_data = [];
