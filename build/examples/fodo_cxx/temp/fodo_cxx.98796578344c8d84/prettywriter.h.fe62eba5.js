var data = {lines:[
{"lineNum":"    1","line":"// Tencent is pleased to support the open source community by making RapidJSON available."},
{"lineNum":"    2","line":"//"},
{"lineNum":"    3","line":"// Copyright (C) 2015 THL A29 Limited, a Tencent company, and Milo Yip. All rights reserved."},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// Licensed under the MIT License (the \"License\"); you may not use this file except"},
{"lineNum":"    6","line":"// in compliance with the License. You may obtain a copy of the License at"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"// http://opensource.org/licenses/MIT"},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// Unless required by applicable law or agreed to in writing, software distributed"},
{"lineNum":"   11","line":"// under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR"},
{"lineNum":"   12","line":"// CONDITIONS OF ANY KIND, either express or implied. See the License for the"},
{"lineNum":"   13","line":"// specific language governing permissions and limitations under the License."},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"#ifndef CEREAL_RAPIDJSON_PRETTYWRITER_H_"},
{"lineNum":"   16","line":"#define CEREAL_RAPIDJSON_PRETTYWRITER_H_"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"#include \"writer.h\""},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"#ifdef __GNUC__"},
{"lineNum":"   21","line":"CEREAL_RAPIDJSON_DIAG_PUSH"},
{"lineNum":"   22","line":"CEREAL_RAPIDJSON_DIAG_OFF(effc++)"},
{"lineNum":"   23","line":"#endif"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"#if defined(__clang__)"},
{"lineNum":"   26","line":"CEREAL_RAPIDJSON_DIAG_PUSH"},
{"lineNum":"   27","line":"CEREAL_RAPIDJSON_DIAG_OFF(c++98-compat)"},
{"lineNum":"   28","line":"#endif"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"CEREAL_RAPIDJSON_NAMESPACE_BEGIN"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"//! Combination of PrettyWriter format flags."},
{"lineNum":"   33","line":"/*! \\see PrettyWriter::SetFormatOptions"},
{"lineNum":"   34","line":" */"},
{"lineNum":"   35","line":"enum PrettyFormatOptions {"},
{"lineNum":"   36","line":"    kFormatDefault = 0,         //!< Default pretty formatting."},
{"lineNum":"   37","line":"    kFormatSingleLineArray = 1  //!< Format arrays on a single line."},
{"lineNum":"   38","line":"};"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"//! Writer with indentation and spacing."},
{"lineNum":"   41","line":"/*!"},
{"lineNum":"   42","line":"    \\tparam OutputStream Type of output os."},
{"lineNum":"   43","line":"    \\tparam SourceEncoding Encoding of source string."},
{"lineNum":"   44","line":"    \\tparam TargetEncoding Encoding of output stream."},
{"lineNum":"   45","line":"    \\tparam StackAllocator Type of allocator for allocating memory of stack."},
{"lineNum":"   46","line":"*/"},
{"lineNum":"   47","line":"template<typename OutputStream, typename SourceEncoding = UTF8<>, typename TargetEncoding = UTF8<>, typename StackAllocator = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags>"},
{"lineNum":"   48","line":"class PrettyWriter : public Writer<OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags> {"},
{"lineNum":"   49","line":"public:"},
{"lineNum":"   50","line":"    typedef Writer<OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags> Base;"},
{"lineNum":"   51","line":"    typedef typename Base::Ch Ch;"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"    //! Constructor"},
{"lineNum":"   54","line":"    /*! \\param os Output stream."},
{"lineNum":"   55","line":"        \\param allocator User supplied allocator. If it is null, it will create a private one."},
{"lineNum":"   56","line":"        \\param levelDepth Initial capacity of stack."},
{"lineNum":"   57","line":"    */"},
{"lineNum":"   58","line":"    explicit PrettyWriter(OutputStream& os, StackAllocator* allocator = 0, size_t levelDepth = Base::kDefaultLevelDepth) :"},
{"lineNum":"   59","line":"        Base(os, allocator, levelDepth), indentChar_(\' \'), indentCharCount_(4), formatOptions_(kFormatDefault) {}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"    explicit PrettyWriter(StackAllocator* allocator = 0, size_t levelDepth = Base::kDefaultLevelDepth) :"},
{"lineNum":"   63","line":"        Base(allocator, levelDepth), indentChar_(\' \'), indentCharCount_(4) {}"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"#if CEREAL_RAPIDJSON_HAS_CXX11_RVALUE_REFS"},
{"lineNum":"   66","line":"    PrettyWriter(PrettyWriter&& rhs) :"},
{"lineNum":"   67","line":"        Base(std::forward<PrettyWriter>(rhs)), indentChar_(rhs.indentChar_), indentCharCount_(rhs.indentCharCount_), formatOptions_(rhs.formatOptions_) {}"},
{"lineNum":"   68","line":"#endif"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"    //! Set custom indentation."},
{"lineNum":"   71","line":"    /*! \\param indentChar       Character for indentation. Must be whitespace character (\' \', \'\\\\t\', \'\\\\n\', \'\\\\r\')."},
{"lineNum":"   72","line":"        \\param indentCharCount  Number of indent characters for each indentation level."},
{"lineNum":"   73","line":"        \\note The default indentation is 4 spaces."},
{"lineNum":"   74","line":"    */"},
{"lineNum":"   75","line":"    PrettyWriter& SetIndent(Ch indentChar, unsigned indentCharCount) {"},
{"lineNum":"   76","line":"        CEREAL_RAPIDJSON_ASSERT(indentChar == \' \' || indentChar == \'\\t\' || indentChar == \'\\n\' || indentChar == \'\\r\');","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   77","line":"        indentChar_ = indentChar;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   78","line":"        indentCharCount_ = indentCharCount;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   79","line":"        return *this;"},
{"lineNum":"   80","line":"    }"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"    //! Set pretty writer formatting options."},
{"lineNum":"   83","line":"    /*! \\param options Formatting options."},
{"lineNum":"   84","line":"    */"},
{"lineNum":"   85","line":"    PrettyWriter& SetFormatOptions(PrettyFormatOptions options) {"},
{"lineNum":"   86","line":"        formatOptions_ = options;"},
{"lineNum":"   87","line":"        return *this;"},
{"lineNum":"   88","line":"    }"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"    /*! @name Implementation of Handler"},
{"lineNum":"   91","line":"        \\see Handler"},
{"lineNum":"   92","line":"    */"},
{"lineNum":"   93","line":"    //@{"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"    bool Null()                 { PrettyPrefix(kNullType);   return Base::EndValue(Base::WriteNull()); }"},
{"lineNum":"   96","line":"    bool Bool(bool b)           { PrettyPrefix(b ? kTrueType : kFalseType); return Base::EndValue(Base::WriteBool(b)); }","class":"lineNoCov","hits":"0","possible_hits":"24",},
{"lineNum":"   97","line":"    bool Int(int i)             { PrettyPrefix(kNumberType); return Base::EndValue(Base::WriteInt(i)); }","class":"lineNoCov","hits":"0","possible_hits":"60",},
{"lineNum":"   98","line":"    bool Uint(unsigned u)       { PrettyPrefix(kNumberType); return Base::EndValue(Base::WriteUint(u)); }","class":"lineNoCov","hits":"0","possible_hits":"47",},
{"lineNum":"   99","line":"    bool Int64(int64_t i64)     { PrettyPrefix(kNumberType); return Base::EndValue(Base::WriteInt64(i64)); }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  100","line":"    bool Uint64(uint64_t u64)   { PrettyPrefix(kNumberType); return Base::EndValue(Base::WriteUint64(u64));  }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  101","line":"    bool Double(double d)       { PrettyPrefix(kNumberType); return Base::EndValue(Base::WriteDouble(d)); }","class":"lineNoCov","hits":"0","possible_hits":"26",},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"    bool RawNumber(const Ch* str, SizeType length, bool copy = false) {"},
{"lineNum":"  104","line":"        CEREAL_RAPIDJSON_ASSERT(str != 0);"},
{"lineNum":"  105","line":"        (void)copy;"},
{"lineNum":"  106","line":"        PrettyPrefix(kNumberType);"},
{"lineNum":"  107","line":"        return Base::EndValue(Base::WriteString(str, length));"},
{"lineNum":"  108","line":"    }"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"    bool String(const Ch* str, SizeType length, bool copy = false) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  111","line":"        CEREAL_RAPIDJSON_ASSERT(str != 0);","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  112","line":"        (void)copy;"},
{"lineNum":"  113","line":"        PrettyPrefix(kStringType);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  114","line":"        return Base::EndValue(Base::WriteString(str, length));","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  115","line":"    }"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"#if CEREAL_RAPIDJSON_HAS_STDSTRING"},
{"lineNum":"  118","line":"    bool String(const std::basic_string<Ch>& str) {"},
{"lineNum":"  119","line":"        return String(str.data(), SizeType(str.size()));"},
{"lineNum":"  120","line":"    }"},
{"lineNum":"  121","line":"#endif"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"    bool StartObject() {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  124","line":"        PrettyPrefix(kObjectType);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  125","line":"        new (Base::level_stack_.template Push<typename Base::Level>()) typename Base::Level(false);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  126","line":"        return Base::WriteStartObject();","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  127","line":"    }"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"    bool Key(const Ch* str, SizeType length, bool copy = false) { return String(str, length, copy); }"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"#if CEREAL_RAPIDJSON_HAS_STDSTRING"},
{"lineNum":"  132","line":"    bool Key(const std::basic_string<Ch>& str) {"},
{"lineNum":"  133","line":"        return Key(str.data(), SizeType(str.size()));"},
{"lineNum":"  134","line":"    }"},
{"lineNum":"  135","line":"#endif"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"    bool EndObject(SizeType memberCount = 0) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  138","line":"        (void)memberCount;"},
{"lineNum":"  139","line":"        CEREAL_RAPIDJSON_ASSERT(Base::level_stack_.GetSize() >= sizeof(typename Base::Level)); // not inside an Object","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  140","line":"        CEREAL_RAPIDJSON_ASSERT(!Base::level_stack_.template Top<typename Base::Level>()->inArray); // currently inside an Array, not Object","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  141","line":"        CEREAL_RAPIDJSON_ASSERT(0 == Base::level_stack_.template Top<typename Base::Level>()->valueCount % 2); // Object has a Key without a Value","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"        bool empty = Base::level_stack_.template Pop<typename Base::Level>(1)->valueCount == 0;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"        if (!empty) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  146","line":"            Base::os_->Put(\'\\n\');","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  147","line":"            WriteIndent();"},
{"lineNum":"  148","line":"        }"},
{"lineNum":"  149","line":"        bool ret = Base::EndValue(Base::WriteEndObject());"},
{"lineNum":"  150","line":"        (void)ret;"},
{"lineNum":"  151","line":"        CEREAL_RAPIDJSON_ASSERT(ret == true);"},
{"lineNum":"  152","line":"        if (Base::level_stack_.Empty()) // end of json text","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  153","line":"            Base::Flush();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  154","line":"        return true;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  155","line":"    }"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"    bool StartArray() {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  158","line":"        PrettyPrefix(kArrayType);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  159","line":"        new (Base::level_stack_.template Push<typename Base::Level>()) typename Base::Level(true);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  160","line":"        return Base::WriteStartArray();","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  161","line":"    }"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"    bool EndArray(SizeType memberCount = 0) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  164","line":"        (void)memberCount;"},
{"lineNum":"  165","line":"        CEREAL_RAPIDJSON_ASSERT(Base::level_stack_.GetSize() >= sizeof(typename Base::Level));","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  166","line":"        CEREAL_RAPIDJSON_ASSERT(Base::level_stack_.template Top<typename Base::Level>()->inArray);","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  167","line":"        bool empty = Base::level_stack_.template Pop<typename Base::Level>(1)->valueCount == 0;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"        if (!empty && !(formatOptions_ & kFormatSingleLineArray)) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  170","line":"            Base::os_->Put(\'\\n\');","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  171","line":"            WriteIndent();"},
{"lineNum":"  172","line":"        }"},
{"lineNum":"  173","line":"        bool ret = Base::EndValue(Base::WriteEndArray());"},
{"lineNum":"  174","line":"        (void)ret;"},
{"lineNum":"  175","line":"        CEREAL_RAPIDJSON_ASSERT(ret == true);"},
{"lineNum":"  176","line":"        if (Base::level_stack_.Empty()) // end of json text","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  177","line":"            Base::Flush();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  178","line":"        return true;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  179","line":"    }"},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"    //@}"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"    /*! @name Convenience extensions */"},
{"lineNum":"  184","line":"    //@{"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"    //! Simpler but slower overload."},
{"lineNum":"  187","line":"    bool String(const Ch* str) { return String(str, internal::StrLen(str)); }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  188","line":"    bool Key(const Ch* str) { return Key(str, internal::StrLen(str)); }"},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"    //@}"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"    //! Write a raw JSON value."},
{"lineNum":"  193","line":"    /*!"},
{"lineNum":"  194","line":"        For user to write a stringified JSON as a value."},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"        \\param json A well-formed JSON value. It should not contain null character within [0, length - 1] range."},
{"lineNum":"  197","line":"        \\param length Length of the json."},
{"lineNum":"  198","line":"        \\param type Type of the root of json."},
{"lineNum":"  199","line":"        \\note When using PrettyWriter::RawValue(), the result json may not be indented correctly."},
{"lineNum":"  200","line":"    */"},
{"lineNum":"  201","line":"    bool RawValue(const Ch* json, size_t length, Type type) {"},
{"lineNum":"  202","line":"        CEREAL_RAPIDJSON_ASSERT(json != 0);"},
{"lineNum":"  203","line":"        PrettyPrefix(type);"},
{"lineNum":"  204","line":"        return Base::EndValue(Base::WriteRawValue(json, length));"},
{"lineNum":"  205","line":"    }"},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"protected:"},
{"lineNum":"  208","line":"    void PrettyPrefix(Type type) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  209","line":"        (void)type;"},
{"lineNum":"  210","line":"        if (Base::level_stack_.GetSize() != 0) { // this value is not at root","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  211","line":"            typename Base::Level* level = Base::level_stack_.template Top<typename Base::Level>();"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"            if (level->inArray) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  214","line":"                if (level->valueCount > 0) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  215","line":"                    Base::os_->Put(\',\'); // add comma if it is not the first element in array","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  216","line":"                    if (formatOptions_ & kFormatSingleLineArray)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  217","line":"                        Base::os_->Put(\' \');","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  218","line":"                }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"                if (!(formatOptions_ & kFormatSingleLineArray)) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  221","line":"                    Base::os_->Put(\'\\n\');","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  222","line":"                    WriteIndent();"},
{"lineNum":"  223","line":"                }"},
{"lineNum":"  224","line":"            }"},
{"lineNum":"  225","line":"            else {  // in object"},
{"lineNum":"  226","line":"                if (level->valueCount > 0) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  227","line":"                    if (level->valueCount % 2 == 0) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  228","line":"                        Base::os_->Put(\',\');","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  229","line":"                        Base::os_->Put(\'\\n\');"},
{"lineNum":"  230","line":"                    }"},
{"lineNum":"  231","line":"                    else {"},
{"lineNum":"  232","line":"                        Base::os_->Put(\':\');","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  233","line":"                        Base::os_->Put(\' \');"},
{"lineNum":"  234","line":"                    }"},
{"lineNum":"  235","line":"                }"},
{"lineNum":"  236","line":"                else"},
{"lineNum":"  237","line":"                    Base::os_->Put(\'\\n\');","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"                if (level->valueCount % 2 == 0)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  240","line":"                    WriteIndent();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  241","line":"            }"},
{"lineNum":"  242","line":"            if (!level->inArray && level->valueCount % 2 == 0)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  243","line":"                CEREAL_RAPIDJSON_ASSERT(type == kStringType);  // if it\'s in object, then even number should be a name","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  244","line":"            level->valueCount++;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  245","line":"        }"},
{"lineNum":"  246","line":"        else {"},
{"lineNum":"  247","line":"            CEREAL_RAPIDJSON_ASSERT(!Base::hasRoot_);  // Should only has one and only one root.","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  248","line":"            Base::hasRoot_ = true;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  249","line":"        }"},
{"lineNum":"  250","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"    void WriteIndent()  {"},
{"lineNum":"  253","line":"        size_t count = (Base::level_stack_.GetSize() / sizeof(typename Base::Level)) * indentCharCount_;","class":"lineNoCov","hits":"0","possible_hits":"17",},
{"lineNum":"  254","line":"        PutN(*Base::os_, static_cast<typename OutputStream::Ch>(indentChar_), count);","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  255","line":"    }"},
{"lineNum":"  256","line":""},
{"lineNum":"  257","line":"    Ch indentChar_;"},
{"lineNum":"  258","line":"    unsigned indentCharCount_;"},
{"lineNum":"  259","line":"    PrettyFormatOptions formatOptions_;"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"private:"},
{"lineNum":"  262","line":"    // Prohibit copy constructor & assignment operator."},
{"lineNum":"  263","line":"    PrettyWriter(const PrettyWriter&);"},
{"lineNum":"  264","line":"    PrettyWriter& operator=(const PrettyWriter&);"},
{"lineNum":"  265","line":"};"},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"CEREAL_RAPIDJSON_NAMESPACE_END"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"#if defined(__clang__)"},
{"lineNum":"  270","line":"CEREAL_RAPIDJSON_DIAG_POP"},
{"lineNum":"  271","line":"#endif"},
{"lineNum":"  272","line":""},
{"lineNum":"  273","line":"#ifdef __GNUC__"},
{"lineNum":"  274","line":"CEREAL_RAPIDJSON_DIAG_POP"},
{"lineNum":"  275","line":"#endif"},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"#endif // CEREAL_RAPIDJSON_CEREAL_RAPIDJSON_H_"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 67, "covered" : 0,};
var merged_data = [];
