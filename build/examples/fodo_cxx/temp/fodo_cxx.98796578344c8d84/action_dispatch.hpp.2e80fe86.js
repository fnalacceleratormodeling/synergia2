var data = {lines:[
{"lineNum":"    1","line":"/*============================================================================="},
{"lineNum":"    2","line":"    Copyright (c) 2001-2011 Joel de Guzman"},
{"lineNum":"    3","line":"    Copyright (c) 2001-2011 Hartmut Kaiser"},
{"lineNum":"    4","line":"    http://spirit.sourceforge.net/"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"    Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    7","line":"    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    8","line":"=============================================================================*/"},
{"lineNum":"    9","line":"#if !defined(BOOST_SPIRIT_ACTION_DISPATCH_APRIL_18_2008_0720AM)"},
{"lineNum":"   10","line":"#define BOOST_SPIRIT_ACTION_DISPATCH_APRIL_18_2008_0720AM"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"#if defined(_MSC_VER)"},
{"lineNum":"   13","line":"#pragma once"},
{"lineNum":"   14","line":"#endif"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"#include<boost/config.hpp>"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"#if !defined(BOOST_NO_CXX11_RVALUE_REFERENCES) && !defined(BOOST_NO_CXX11_LAMBDAS) && \\"},
{"lineNum":"   19","line":"    !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES) && !defined(BOOST_NO_CXX11_DECLTYPE)"},
{"lineNum":"   20","line":"#include <utility>"},
{"lineNum":"   21","line":"#include <type_traits>"},
{"lineNum":"   22","line":"#endif"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"#include <boost/spirit/include/phoenix_core.hpp>"},
{"lineNum":"   26","line":"#include <boost/spirit/home/support/attributes.hpp>"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"namespace boost { namespace spirit { namespace traits"},
{"lineNum":"   29","line":"{"},
{"lineNum":"   30","line":"    template <typename Component>"},
{"lineNum":"   31","line":"    struct action_dispatch"},
{"lineNum":"   32","line":"    {"},
{"lineNum":"   33","line":"#if !defined(BOOST_NO_CXX11_RVALUE_REFERENCES) && !defined(BOOST_NO_CXX11_LAMBDAS) && \\"},
{"lineNum":"   34","line":"    !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES) && !defined(BOOST_NO_CXX11_DECLTYPE)"},
{"lineNum":"   35","line":"        // omit function parameters without specializing for each possible"},
{"lineNum":"   36","line":"        // type of callable entity"},
{"lineNum":"   37","line":"        // many thanks to Eelis/##iso-c++ for this contribution"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"    private:"},
{"lineNum":"   40","line":"        // this will be used to pass around POD types which are safe"},
{"lineNum":"   41","line":"        // to go through the ellipsis operator (if ever used)"},
{"lineNum":"   42","line":"        template <typename>"},
{"lineNum":"   43","line":"        struct fwd_tag {};"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"        // the first parameter is a placeholder to obtain SFINAE when"},
{"lineNum":"   46","line":"        // doing overload resolution, the second one is the actual"},
{"lineNum":"   47","line":"        // forwarder, where we can apply our implementation"},
{"lineNum":"   48","line":"        template <typename, typename T>"},
{"lineNum":"   49","line":"        struct fwd_storage { typedef T type; };"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"        // gcc should accept fake<T>() but it prints a sorry, needs"},
{"lineNum":"   52","line":"        // a check once the bug is sorted out, use a FAKE_CALL macro for now"},
{"lineNum":"   53","line":"        template <typename T>"},
{"lineNum":"   54","line":"        T fake_call();"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"#define BOOST_SPIRIT_FAKE_CALL(T) (*(T*)0)"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"        // the forwarders, here we could tweak the implementation of"},
{"lineNum":"   59","line":"        // how parameters are passed to the functions, if needed"},
{"lineNum":"   60","line":"        struct fwd_none"},
{"lineNum":"   61","line":"        {"},
{"lineNum":"   62","line":"            template<typename F, typename... Rest>"},
{"lineNum":"   63","line":"            auto operator()(F && f, Rest&&...) -> decltype(f())"},
{"lineNum":"   64","line":"            {"},
{"lineNum":"   65","line":"                return f();"},
{"lineNum":"   66","line":"            }"},
{"lineNum":"   67","line":"        };"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"        struct fwd_attrib"},
{"lineNum":"   70","line":"        {"},
{"lineNum":"   71","line":"            template<typename F, typename A, typename... Rest>"},
{"lineNum":"   72","line":"            auto operator()(F && f, A && a, Rest&&...) -> decltype(f(a))"},
{"lineNum":"   73","line":"            {"},
{"lineNum":"   74","line":"                 return f(a);"},
{"lineNum":"   75","line":"            }"},
{"lineNum":"   76","line":"        };"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"        struct fwd_attrib_context"},
{"lineNum":"   79","line":"        {"},
{"lineNum":"   80","line":"             template<typename F, typename A, typename B, typename... Rest>"},
{"lineNum":"   81","line":"             auto operator()(F && f, A && a, B && b, Rest&&...)"},
{"lineNum":"   82","line":"                -> decltype(f(a, b))"},
{"lineNum":"   83","line":"             {"},
{"lineNum":"   84","line":"                 return f(a, b);"},
{"lineNum":"   85","line":"             }"},
{"lineNum":"   86","line":"        };"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"        struct fwd_attrib_context_pass"},
{"lineNum":"   89","line":"        {"},
{"lineNum":"   90","line":"            template<typename F, typename A, typename B, typename C"},
{"lineNum":"   91","line":"              , typename... Rest>"},
{"lineNum":"   92","line":"            auto operator()(F && f, A && a, B && b, C && c, Rest&&...)"},
{"lineNum":"   93","line":"               -> decltype(f(a, b, c))"},
{"lineNum":"   94","line":"            {"},
{"lineNum":"   95","line":"                return f(a, b, c);"},
{"lineNum":"   96","line":"            }"},
{"lineNum":"   97","line":"        };"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"        // SFINAE for our calling syntax, the forwarders are stored based"},
{"lineNum":"  100","line":"        // on what function call gives a proper result"},
{"lineNum":"  101","line":"        // this code can probably be more generic once implementations are"},
{"lineNum":"  102","line":"        // steady"},
{"lineNum":"  103","line":"        template <typename F>"},
{"lineNum":"  104","line":"        static auto do_call(F && f, ...)"},
{"lineNum":"  105","line":"           -> typename fwd_storage<decltype(f()), fwd_none>::type"},
{"lineNum":"  106","line":"        {"},
{"lineNum":"  107","line":"            return {};"},
{"lineNum":"  108","line":"        }"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"        template <typename F, typename A>"},
{"lineNum":"  111","line":"        static auto do_call(F && f, fwd_tag<A>, ...)"},
{"lineNum":"  112","line":"           -> typename fwd_storage<decltype(f(BOOST_SPIRIT_FAKE_CALL(A)))"},
{"lineNum":"  113","line":"                 , fwd_attrib>::type"},
{"lineNum":"  114","line":"        {"},
{"lineNum":"  115","line":"            return {};"},
{"lineNum":"  116","line":"        }"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"        template <typename F, typename A, typename B>"},
{"lineNum":"  119","line":"        static auto do_call(F && f, fwd_tag<A>, fwd_tag<B>, ...)"},
{"lineNum":"  120","line":"           -> typename fwd_storage<"},
{"lineNum":"  121","line":"                    decltype(f(BOOST_SPIRIT_FAKE_CALL(A), BOOST_SPIRIT_FAKE_CALL(B)))"},
{"lineNum":"  122","line":"                , fwd_attrib_context>::type"},
{"lineNum":"  123","line":"        {"},
{"lineNum":"  124","line":"            return {};"},
{"lineNum":"  125","line":"        }"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"        template <typename F, typename A, typename B, typename C>"},
{"lineNum":"  128","line":"        static auto do_call(F && f, fwd_tag<A>, fwd_tag<B>, fwd_tag<C>, ...)"},
{"lineNum":"  129","line":"           -> typename fwd_storage<"},
{"lineNum":"  130","line":"                  decltype(f(BOOST_SPIRIT_FAKE_CALL(A), BOOST_SPIRIT_FAKE_CALL(B)"},
{"lineNum":"  131","line":"                    , BOOST_SPIRIT_FAKE_CALL(C)))"},
{"lineNum":"  132","line":"                , fwd_attrib_context_pass>::type"},
{"lineNum":"  133","line":"        {"},
{"lineNum":"  134","line":"            return {};"},
{"lineNum":"  135","line":"        }"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"        // this function calls the forwarder and is responsible for"},
{"lineNum":"  138","line":"        // stripping the tail of the parameters"},
{"lineNum":"  139","line":"        template <typename F, typename... A>"},
{"lineNum":"  140","line":"        static void caller(F && f, A && ... a)"},
{"lineNum":"  141","line":"        {"},
{"lineNum":"  142","line":"            do_call(f, fwd_tag<typename std::remove_reference<A>::type>()...)"},
{"lineNum":"  143","line":"                (std::forward<F>(f), std::forward<A>(a)...);"},
{"lineNum":"  144","line":"        }"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"#undef BOOST_SPIRIT_FAKE_CALL"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"    public:"},
{"lineNum":"  149","line":"        template <typename F, typename Attribute, typename Context>"},
{"lineNum":"  150","line":"        bool operator()(F const& f, Attribute& attr, Context& context)"},
{"lineNum":"  151","line":"        {"},
{"lineNum":"  152","line":"            bool pass = true;"},
{"lineNum":"  153","line":"            caller(f, attr, context, pass);"},
{"lineNum":"  154","line":"            return pass;"},
{"lineNum":"  155","line":"        }"},
{"lineNum":"  156","line":"#else"},
{"lineNum":"  157","line":"        // general handler for everything not explicitly specialized below"},
{"lineNum":"  158","line":"        template <typename F, typename Attribute, typename Context>"},
{"lineNum":"  159","line":"        bool operator()(F const& f, Attribute& attr, Context& context)"},
{"lineNum":"  160","line":"        {"},
{"lineNum":"  161","line":"            bool pass = true;"},
{"lineNum":"  162","line":"            f(attr, context, pass);"},
{"lineNum":"  163","line":"            return pass;"},
{"lineNum":"  164","line":"        }"},
{"lineNum":"  165","line":"#endif"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"        // handler for phoenix actors"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"        // If the component this action has to be invoked for is a tuple, we"},
{"lineNum":"  170","line":"        // wrap any non-fusion tuple into a fusion tuple (done by pass_attribute)"},
{"lineNum":"  171","line":"        // and pass through any fusion tuple."},
{"lineNum":"  172","line":"        template <typename Eval, typename Attribute, typename Context>"},
{"lineNum":"  173","line":"        bool operator()(phoenix::actor<Eval> const& f"},
{"lineNum":"  174","line":"          , Attribute& attr, Context& context)"},
{"lineNum":"  175","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  176","line":"            bool pass = true;","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  177","line":"            typename pass_attribute<Component, Attribute>::type attr_wrap(attr);"},
{"lineNum":"  178","line":"            f(attr_wrap, context, pass);"},
{"lineNum":"  179","line":"            return pass;","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  180","line":"        }"},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"        // specializations for plain function pointers taking different number of"},
{"lineNum":"  183","line":"        // arguments"},
{"lineNum":"  184","line":"        template <typename RT, typename A0, typename A1, typename A2"},
{"lineNum":"  185","line":"          , typename Attribute, typename Context>"},
{"lineNum":"  186","line":"        bool operator()(RT(*f)(A0, A1, A2), Attribute& attr, Context& context)"},
{"lineNum":"  187","line":"        {"},
{"lineNum":"  188","line":"            bool pass = true;"},
{"lineNum":"  189","line":"            f(attr, context, pass);"},
{"lineNum":"  190","line":"            return pass;"},
{"lineNum":"  191","line":"        }"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"        template <typename RT, typename A0, typename A1"},
{"lineNum":"  194","line":"          , typename Attribute, typename Context>"},
{"lineNum":"  195","line":"        bool operator()(RT(*f)(A0, A1), Attribute& attr, Context& context)"},
{"lineNum":"  196","line":"        {"},
{"lineNum":"  197","line":"            f(attr, context);"},
{"lineNum":"  198","line":"            return true;"},
{"lineNum":"  199","line":"        }"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"        template <typename RT, typename A0, typename Attribute, typename Context>"},
{"lineNum":"  202","line":"        bool operator()(RT(*f)(A0), Attribute& attr, Context&)"},
{"lineNum":"  203","line":"        {"},
{"lineNum":"  204","line":"            f(attr);"},
{"lineNum":"  205","line":"            return true;"},
{"lineNum":"  206","line":"        }"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"        template <typename RT, typename Attribute, typename Context>"},
{"lineNum":"  209","line":"        bool operator()(RT(*f)(), Attribute&, Context&)"},
{"lineNum":"  210","line":"        {"},
{"lineNum":"  211","line":"            f();"},
{"lineNum":"  212","line":"            return true;"},
{"lineNum":"  213","line":"        }"},
{"lineNum":"  214","line":"    };"},
{"lineNum":"  215","line":"}}}"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 3, "covered" : 0,};
var merged_data = [];
