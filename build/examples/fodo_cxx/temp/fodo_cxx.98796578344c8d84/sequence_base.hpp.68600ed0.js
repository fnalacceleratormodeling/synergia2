var data = {lines:[
{"lineNum":"    1","line":"/*============================================================================="},
{"lineNum":"    2","line":"    Copyright (c) 2001-2011 Joel de Guzman"},
{"lineNum":"    3","line":"    Copyright (c) 2001-2011 Hartmut Kaiser"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"    Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    6","line":"    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    7","line":"=============================================================================*/"},
{"lineNum":"    8","line":"#if !defined(SPIRIT_SEQUENCE_BASE_APRIL_22_2006_0811AM)"},
{"lineNum":"    9","line":"#define SPIRIT_SEQUENCE_BASE_APRIL_22_2006_0811AM"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"#if defined(_MSC_VER)"},
{"lineNum":"   12","line":"#pragma once"},
{"lineNum":"   13","line":"#endif"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"#include <boost/spirit/home/qi/domain.hpp>"},
{"lineNum":"   16","line":"#include <boost/spirit/home/qi/detail/pass_container.hpp>"},
{"lineNum":"   17","line":"#include <boost/spirit/home/qi/detail/attributes.hpp>"},
{"lineNum":"   18","line":"#include <boost/spirit/home/support/algorithm/any_if.hpp>"},
{"lineNum":"   19","line":"#include <boost/spirit/home/support/detail/what_function.hpp>"},
{"lineNum":"   20","line":"#include <boost/spirit/home/support/unused.hpp>"},
{"lineNum":"   21","line":"#include <boost/spirit/home/support/info.hpp>"},
{"lineNum":"   22","line":"#include <boost/spirit/home/support/sequence_base_id.hpp>"},
{"lineNum":"   23","line":"#include <boost/spirit/home/support/has_semantic_action.hpp>"},
{"lineNum":"   24","line":"#include <boost/spirit/home/qi/parser.hpp>"},
{"lineNum":"   25","line":"#include <boost/fusion/include/as_vector.hpp>"},
{"lineNum":"   26","line":"#include <boost/fusion/include/vector.hpp>"},
{"lineNum":"   27","line":"#include <boost/fusion/include/for_each.hpp>"},
{"lineNum":"   28","line":"#include <boost/mpl/identity.hpp>"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"namespace boost { namespace spirit { namespace qi"},
{"lineNum":"   31","line":"{"},
{"lineNum":"   32","line":"    template <typename Derived, typename Elements>"},
{"lineNum":"   33","line":"    struct sequence_base // this class is shared by sequence and expect","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"   34","line":"      : nary_parser<Derived>"},
{"lineNum":"   35","line":"    {"},
{"lineNum":"   36","line":"        typedef Elements elements_type;"},
{"lineNum":"   37","line":"        struct sequence_base_id;"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"        template <typename Context, typename Iterator>"},
{"lineNum":"   40","line":"        struct attribute"},
{"lineNum":"   41","line":"        {"},
{"lineNum":"   42","line":"            // Put all the element attributes in a tuple"},
{"lineNum":"   43","line":"            typedef typename traits::build_attribute_sequence<"},
{"lineNum":"   44","line":"                Elements, Context, traits::sequence_attribute_transform"},
{"lineNum":"   45","line":"              , Iterator, qi::domain"},
{"lineNum":"   46","line":"            >::type all_attributes;"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"            // Now, build a fusion vector over the attributes. Note"},
{"lineNum":"   49","line":"            // that build_fusion_vector 1) removes all unused attributes"},
{"lineNum":"   50","line":"            // and 2) may return unused_type if all elements have"},
{"lineNum":"   51","line":"            // unused_type(s)."},
{"lineNum":"   52","line":"            typedef typename"},
{"lineNum":"   53","line":"                traits::build_fusion_vector<all_attributes>::type"},
{"lineNum":"   54","line":"            type_;"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"            // Finally, strip single element vectors into its"},
{"lineNum":"   57","line":"            // naked form: vector1<T> --> T"},
{"lineNum":"   58","line":"            typedef typename"},
{"lineNum":"   59","line":"                traits::strip_single_element_vector<type_>::type"},
{"lineNum":"   60","line":"            type;"},
{"lineNum":"   61","line":"        };"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"        sequence_base(Elements const& elements_)"},
{"lineNum":"   64","line":"          : elements(elements_) {}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"        // standard case. Attribute is a fusion tuple"},
{"lineNum":"   67","line":"        template <typename Iterator, typename Context"},
{"lineNum":"   68","line":"          , typename Skipper, typename Attribute>"},
{"lineNum":"   69","line":"        bool parse_impl(Iterator& first, Iterator const& last"},
{"lineNum":"   70","line":"          , Context& context, Skipper const& skipper"},
{"lineNum":"   71","line":"          , Attribute& attr_, mpl::false_) const"},
{"lineNum":"   72","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   73","line":"            Iterator iter = first;","class":"lineNoCov","hits":"0","possible_hits":"28",},
{"lineNum":"   74","line":"            typedef traits::attribute_not_unused<Context, Iterator> predicate;"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"            // wrap the attribute in a tuple if it is not a tuple or if the"},
{"lineNum":"   77","line":"            // attribute of this sequence is a single element tuple"},
{"lineNum":"   78","line":"            typedef typename attribute<Context, Iterator>::type_ attr_type_;"},
{"lineNum":"   79","line":"            typename traits::wrap_if_not_tuple<Attribute"},
{"lineNum":"   80","line":"              , typename mpl::and_<"},
{"lineNum":"   81","line":"                    traits::one_element_sequence<attr_type_>"},
{"lineNum":"   82","line":"                  , mpl::not_<traits::one_element_sequence<Attribute> >"},
{"lineNum":"   83","line":"                >::type"},
{"lineNum":"   84","line":"            >::type attr_local(attr_);"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"            // return false if *any* of the parsers fail"},
{"lineNum":"   87","line":"            if (spirit::any_if(elements, attr_local","class":"lineNoCov","hits":"0","possible_hits":"23",},
{"lineNum":"   88","line":"              , Derived::fail_function(iter, last, context, skipper), predicate()))"},
{"lineNum":"   89","line":"                return false;"},
{"lineNum":"   90","line":"            first = iter;","class":"lineNoCov","hits":"0","possible_hits":"30",},
{"lineNum":"   91","line":"            return true;"},
{"lineNum":"   92","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"        // Special case when Attribute is an stl container"},
{"lineNum":"   95","line":"        template <typename Iterator, typename Context"},
{"lineNum":"   96","line":"          , typename Skipper, typename Attribute>"},
{"lineNum":"   97","line":"        bool parse_impl(Iterator& first, Iterator const& last"},
{"lineNum":"   98","line":"          , Context& context, Skipper const& skipper"},
{"lineNum":"   99","line":"          , Attribute& attr_, mpl::true_) const"},
{"lineNum":"  100","line":"        {"},
{"lineNum":"  101","line":"            // ensure the attribute is actually a container type"},
{"lineNum":"  102","line":"            traits::make_container(attr_);"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"            Iterator iter = first;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  105","line":"            // return false if *any* of the parsers fail"},
{"lineNum":"  106","line":"            if (fusion::any(elements","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  107","line":"              , detail::make_sequence_pass_container("},
{"lineNum":"  108","line":"                    Derived::fail_function(iter, last, context, skipper), attr_))"},
{"lineNum":"  109","line":"                )"},
{"lineNum":"  110","line":"                return false;"},
{"lineNum":"  111","line":"            first = iter;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  112","line":"            return true;"},
{"lineNum":"  113","line":"        }"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"        // main parse function. Dispatches to parse_impl depending"},
{"lineNum":"  116","line":"        // on the Attribute type."},
{"lineNum":"  117","line":"        template <typename Iterator, typename Context"},
{"lineNum":"  118","line":"          , typename Skipper, typename Attribute>"},
{"lineNum":"  119","line":"        bool parse(Iterator& first, Iterator const& last"},
{"lineNum":"  120","line":"          , Context& context, Skipper const& skipper"},
{"lineNum":"  121","line":"          , Attribute& attr_) const"},
{"lineNum":"  122","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  123","line":"            return parse_impl(first, last, context, skipper, attr_","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  124","line":"              , traits::is_container<Attribute>());"},
{"lineNum":"  125","line":"        }"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"        template <typename Context>"},
{"lineNum":"  128","line":"        info what(Context& context) const"},
{"lineNum":"  129","line":"        {"},
{"lineNum":"  130","line":"            info result(this->derived().id());"},
{"lineNum":"  131","line":"            fusion::for_each(elements,"},
{"lineNum":"  132","line":"                spirit::detail::what_function<Context>(result, context));"},
{"lineNum":"  133","line":"            return result;"},
{"lineNum":"  134","line":"        }"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"        Elements elements;"},
{"lineNum":"  137","line":"    };"},
{"lineNum":"  138","line":"}}}"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 12, "covered" : 0,};
var merged_data = [];
