var data = {lines:[
{"lineNum":"    1","line":"// Tencent is pleased to support the open source community by making RapidJSON available."},
{"lineNum":"    2","line":"//"},
{"lineNum":"    3","line":"// Copyright (C) 2015 THL A29 Limited, a Tencent company, and Milo Yip. All rights reserved."},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// Licensed under the MIT License (the \"License\"); you may not use this file except"},
{"lineNum":"    6","line":"// in compliance with the License. You may obtain a copy of the License at"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"// http://opensource.org/licenses/MIT"},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// Unless required by applicable law or agreed to in writing, software distributed"},
{"lineNum":"   11","line":"// under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR"},
{"lineNum":"   12","line":"// CONDITIONS OF ANY KIND, either express or implied. See the License for the"},
{"lineNum":"   13","line":"// specific language governing permissions and limitations under the License."},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"#ifndef CEREAL_RAPIDJSON_BIGINTEGER_H_"},
{"lineNum":"   16","line":"#define CEREAL_RAPIDJSON_BIGINTEGER_H_"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"#include \"../rapidjson.h\""},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"#if defined(_MSC_VER) && !__INTEL_COMPILER && defined(_M_AMD64)"},
{"lineNum":"   21","line":"#include <intrin.h> // for _umul128"},
{"lineNum":"   22","line":"#pragma intrinsic(_umul128)"},
{"lineNum":"   23","line":"#endif"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"CEREAL_RAPIDJSON_NAMESPACE_BEGIN"},
{"lineNum":"   26","line":"namespace internal {"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"class BigInteger {"},
{"lineNum":"   29","line":"public:"},
{"lineNum":"   30","line":"    typedef uint64_t Type;"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"    BigInteger(const BigInteger& rhs) : count_(rhs.count_) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   33","line":"        std::memcpy(digits_, rhs.digits_, count_ * sizeof(Type));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   34","line":"    }"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"    explicit BigInteger(uint64_t u) : count_(1) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   37","line":"        digits_[0] = u;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   38","line":"    }"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"    BigInteger(const char* decimals, size_t length) : count_(1) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   41","line":"        CEREAL_RAPIDJSON_ASSERT(length > 0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   42","line":"        digits_[0] = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   43","line":"        size_t i = 0;"},
{"lineNum":"   44","line":"        const size_t kMaxDigitPerIteration = 19;  // 2^64 = 18446744073709551616 > 10^19"},
{"lineNum":"   45","line":"        while (length >= kMaxDigitPerIteration) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   46","line":"            AppendDecimal64(decimals + i, decimals + i + kMaxDigitPerIteration);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   47","line":"            length -= kMaxDigitPerIteration;"},
{"lineNum":"   48","line":"            i += kMaxDigitPerIteration;"},
{"lineNum":"   49","line":"        }"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"        if (length > 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   52","line":"            AppendDecimal64(decimals + i, decimals + i + length);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   53","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"    BigInteger& operator=(const BigInteger &rhs)"},
{"lineNum":"   56","line":"    {"},
{"lineNum":"   57","line":"        if (this != &rhs) {"},
{"lineNum":"   58","line":"            count_ = rhs.count_;"},
{"lineNum":"   59","line":"            std::memcpy(digits_, rhs.digits_, count_ * sizeof(Type));"},
{"lineNum":"   60","line":"        }"},
{"lineNum":"   61","line":"        return *this;"},
{"lineNum":"   62","line":"    }"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"    BigInteger& operator=(uint64_t u) {"},
{"lineNum":"   65","line":"        digits_[0] = u;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   66","line":"        count_ = 1;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   67","line":"        return *this;"},
{"lineNum":"   68","line":"    }"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"    BigInteger& operator+=(uint64_t u) {"},
{"lineNum":"   71","line":"        Type backup = digits_[0];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   72","line":"        digits_[0] += u;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   73","line":"        for (size_t i = 0; i < count_ - 1; i++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   74","line":"            if (digits_[i] >= backup)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   75","line":"                return *this; // no carry"},
{"lineNum":"   76","line":"            backup = digits_[i + 1];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   77","line":"            digits_[i + 1] += 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   78","line":"        }"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"        // Last carry"},
{"lineNum":"   81","line":"        if (digits_[count_ - 1] < backup)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   82","line":"            PushBack(1);"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"        return *this;"},
{"lineNum":"   85","line":"    }"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"    BigInteger& operator*=(uint64_t u) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   88","line":"        if (u == 0) return *this = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   89","line":"        if (u == 1) return *this;"},
{"lineNum":"   90","line":"        if (*this == 1) return *this = u;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"        uint64_t k = 0;"},
{"lineNum":"   93","line":"        for (size_t i = 0; i < count_; i++) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   94","line":"            uint64_t hi;"},
{"lineNum":"   95","line":"            digits_[i] = MulAdd64(digits_[i], u, k, &hi);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   96","line":"            k = hi;"},
{"lineNum":"   97","line":"        }"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"        if (k > 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  100","line":"            PushBack(k);"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"        return *this;"},
{"lineNum":"  103","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"    BigInteger& operator*=(uint32_t u) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  106","line":"        if (u == 0) return *this = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  107","line":"        if (u == 1) return *this;"},
{"lineNum":"  108","line":"        if (*this == 1) return *this = u;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"        uint64_t k = 0;"},
{"lineNum":"  111","line":"        for (size_t i = 0; i < count_; i++) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  112","line":"            const uint64_t c = digits_[i] >> 32;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  113","line":"            const uint64_t d = digits_[i] & 0xFFFFFFFF;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  114","line":"            const uint64_t uc = u * c;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  115","line":"            const uint64_t ud = u * d;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  116","line":"            const uint64_t p0 = ud + k;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  117","line":"            const uint64_t p1 = uc + (p0 >> 32);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  118","line":"            digits_[i] = (p0 & 0xFFFFFFFF) | (p1 << 32);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  119","line":"            k = p1 >> 32;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  120","line":"        }"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"        if (k > 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  123","line":"            PushBack(k);"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"        return *this;"},
{"lineNum":"  126","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"    BigInteger& operator<<=(size_t shift) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  129","line":"        if (IsZero() || shift == 0) return *this;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"        size_t offset = shift / kTypeBit;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  132","line":"        size_t interShift = shift % kTypeBit;"},
{"lineNum":"  133","line":"        CEREAL_RAPIDJSON_ASSERT(count_ + offset <= kCapacity);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"        if (interShift == 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  136","line":"            std::memmove(digits_ + offset, digits_, count_ * sizeof(Type));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  137","line":"            count_ += offset;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  138","line":"        }"},
{"lineNum":"  139","line":"        else {"},
{"lineNum":"  140","line":"            digits_[count_] = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  141","line":"            for (size_t i = count_; i > 0; i--)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  142","line":"                digits_[i + offset] = (digits_[i] << interShift) | (digits_[i - 1] >> (kTypeBit - interShift));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  143","line":"            digits_[offset] = digits_[0] << interShift;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  144","line":"            count_ += offset;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  145","line":"            if (digits_[count_])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  146","line":"                count_++;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  147","line":"        }"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"        std::memset(digits_, 0, offset * sizeof(Type));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"        return *this;"},
{"lineNum":"  152","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"    bool operator==(const BigInteger& rhs) const {"},
{"lineNum":"  155","line":"        return count_ == rhs.count_ && std::memcmp(digits_, rhs.digits_, count_ * sizeof(Type)) == 0;"},
{"lineNum":"  156","line":"    }"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"    bool operator==(const Type rhs) const {"},
{"lineNum":"  159","line":"        return count_ == 1 && digits_[0] == rhs;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  160","line":"    }"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"    BigInteger& MultiplyPow5(unsigned exp) {"},
{"lineNum":"  163","line":"        static const uint32_t kPow5[12] = {"},
{"lineNum":"  164","line":"            5,"},
{"lineNum":"  165","line":"            5 * 5,"},
{"lineNum":"  166","line":"            5 * 5 * 5,"},
{"lineNum":"  167","line":"            5 * 5 * 5 * 5,"},
{"lineNum":"  168","line":"            5 * 5 * 5 * 5 * 5,"},
{"lineNum":"  169","line":"            5 * 5 * 5 * 5 * 5 * 5,"},
{"lineNum":"  170","line":"            5 * 5 * 5 * 5 * 5 * 5 * 5,"},
{"lineNum":"  171","line":"            5 * 5 * 5 * 5 * 5 * 5 * 5 * 5,"},
{"lineNum":"  172","line":"            5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5,"},
{"lineNum":"  173","line":"            5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5,"},
{"lineNum":"  174","line":"            5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5,"},
{"lineNum":"  175","line":"            5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5"},
{"lineNum":"  176","line":"        };"},
{"lineNum":"  177","line":"        if (exp == 0) return *this;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  178","line":"        for (; exp >= 27; exp -= 27) *this *= CEREAL_RAPIDJSON_UINT64_C2(0X6765C793, 0XFA10079D); // 5^27","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  179","line":"        for (; exp >= 13; exp -= 13) *this *= static_cast<uint32_t>(1220703125u); // 5^13","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  180","line":"        if (exp > 0)                 *this *= kPow5[exp - 1];","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  181","line":"        return *this;"},
{"lineNum":"  182","line":"    }"},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"    // Compute absolute difference of this and rhs."},
{"lineNum":"  185","line":"    // Assume this != rhs"},
{"lineNum":"  186","line":"    bool Difference(const BigInteger& rhs, BigInteger* out) const {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  187","line":"        int cmp = Compare(rhs);"},
{"lineNum":"  188","line":"        CEREAL_RAPIDJSON_ASSERT(cmp != 0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  189","line":"        const BigInteger *a, *b;  // Makes a > b"},
{"lineNum":"  190","line":"        bool ret;"},
{"lineNum":"  191","line":"        if (cmp < 0) { a = &rhs; b = this; ret = true; }"},
{"lineNum":"  192","line":"        else         { a = this; b = &rhs; ret = false; }"},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"        Type borrow = 0;"},
{"lineNum":"  195","line":"        for (size_t i = 0; i < a->count_; i++) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  196","line":"            Type d = a->digits_[i] - borrow;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  197","line":"            if (i < b->count_)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  198","line":"                d -= b->digits_[i];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  199","line":"            borrow = (d > a->digits_[i]) ? 1 : 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  200","line":"            out->digits_[i] = d;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  201","line":"            if (d != 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  202","line":"                out->count_ = i + 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  203","line":"        }"},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"        return ret;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  206","line":"    }"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"    int Compare(const BigInteger& rhs) const {"},
{"lineNum":"  209","line":"        if (count_ != rhs.count_)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  210","line":"            return count_ < rhs.count_ ? -1 : 1;"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"        for (size_t i = count_; i-- > 0;)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  213","line":"            if (digits_[i] != rhs.digits_[i])","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  214","line":"                return digits_[i] < rhs.digits_[i] ? -1 : 1;"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"        return 0;"},
{"lineNum":"  217","line":"    }"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"    size_t GetCount() const { return count_; }"},
{"lineNum":"  220","line":"    Type GetDigit(size_t index) const { CEREAL_RAPIDJSON_ASSERT(index < count_); return digits_[index]; }"},
{"lineNum":"  221","line":"    bool IsZero() const { return count_ == 1 && digits_[0] == 0; }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"private:"},
{"lineNum":"  224","line":"    void AppendDecimal64(const char* begin, const char* end) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  225","line":"        uint64_t u = ParseUint64(begin, end);"},
{"lineNum":"  226","line":"        if (IsZero())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  227","line":"            *this = u;"},
{"lineNum":"  228","line":"        else {"},
{"lineNum":"  229","line":"            unsigned exp = static_cast<unsigned>(end - begin);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  230","line":"            (MultiplyPow5(exp) <<= exp) += u;   // *this = *this * 10^exp + u","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  231","line":"        }"},
{"lineNum":"  232","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"    void PushBack(Type digit) {"},
{"lineNum":"  235","line":"        CEREAL_RAPIDJSON_ASSERT(count_ < kCapacity);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  236","line":"        digits_[count_++] = digit;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  237","line":"    }"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"    static uint64_t ParseUint64(const char* begin, const char* end) {"},
{"lineNum":"  240","line":"        uint64_t r = 0;"},
{"lineNum":"  241","line":"        for (const char* p = begin; p != end; ++p) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  242","line":"            CEREAL_RAPIDJSON_ASSERT(*p >= \'0\' && *p <= \'9\');","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  243","line":"            r = r * 10u + static_cast<unsigned>(*p - \'0\');","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  244","line":"        }"},
{"lineNum":"  245","line":"        return r;"},
{"lineNum":"  246","line":"    }"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"    // Assume a * b + k < 2^128"},
{"lineNum":"  249","line":"    static uint64_t MulAdd64(uint64_t a, uint64_t b, uint64_t k, uint64_t* outHigh) {"},
{"lineNum":"  250","line":"#if defined(_MSC_VER) && defined(_M_AMD64)"},
{"lineNum":"  251","line":"        uint64_t low = _umul128(a, b, outHigh) + k;"},
{"lineNum":"  252","line":"        if (low < k)"},
{"lineNum":"  253","line":"            (*outHigh)++;"},
{"lineNum":"  254","line":"        return low;"},
{"lineNum":"  255","line":"#elif (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)) && defined(__x86_64__)"},
{"lineNum":"  256","line":"        __extension__ typedef unsigned __int128 uint128;"},
{"lineNum":"  257","line":"        uint128 p = static_cast<uint128>(a) * static_cast<uint128>(b);"},
{"lineNum":"  258","line":"        p += k;"},
{"lineNum":"  259","line":"        *outHigh = static_cast<uint64_t>(p >> 64);"},
{"lineNum":"  260","line":"        return static_cast<uint64_t>(p);"},
{"lineNum":"  261","line":"#else"},
{"lineNum":"  262","line":"        const uint64_t a0 = a & 0xFFFFFFFF, a1 = a >> 32, b0 = b & 0xFFFFFFFF, b1 = b >> 32;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  263","line":"        uint64_t x0 = a0 * b0, x1 = a0 * b1, x2 = a1 * b0, x3 = a1 * b1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  264","line":"        x1 += (x0 >> 32); // can\'t give carry","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  265","line":"        x1 += x2;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  266","line":"        if (x1 < x2)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  267","line":"            x3 += (static_cast<uint64_t>(1) << 32);"},
{"lineNum":"  268","line":"        uint64_t lo = (x1 << 32) + (x0 & 0xFFFFFFFF);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  269","line":"        uint64_t hi = x3 + (x1 >> 32);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"        lo += k;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  272","line":"        if (lo < k)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  273","line":"            hi++;"},
{"lineNum":"  274","line":"        *outHigh = hi;"},
{"lineNum":"  275","line":"        return lo;"},
{"lineNum":"  276","line":"#endif"},
{"lineNum":"  277","line":"    }"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"    static const size_t kBitCount = 3328;  // 64bit * 54 > 10^1000"},
{"lineNum":"  280","line":"    static const size_t kCapacity = kBitCount / sizeof(Type);"},
{"lineNum":"  281","line":"    static const size_t kTypeBit = sizeof(Type) * 8;"},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"    Type digits_[kCapacity];"},
{"lineNum":"  284","line":"    size_t count_;"},
{"lineNum":"  285","line":"};"},
{"lineNum":"  286","line":""},
{"lineNum":"  287","line":"} // namespace internal"},
{"lineNum":"  288","line":"CEREAL_RAPIDJSON_NAMESPACE_END"},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"#endif // CEREAL_RAPIDJSON_BIGINTEGER_H_"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 97, "covered" : 0,};
var merged_data = [];
