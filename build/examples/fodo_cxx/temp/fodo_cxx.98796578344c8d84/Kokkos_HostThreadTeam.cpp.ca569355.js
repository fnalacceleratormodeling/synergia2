var data = {lines:[
{"lineNum":"    1","line":"/*"},
{"lineNum":"    2","line":"//@HEADER"},
{"lineNum":"    3","line":"// ************************************************************************"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"//                        Kokkos v. 3.0"},
{"lineNum":"    6","line":"//       Copyright (2020) National Technology & Engineering"},
{"lineNum":"    7","line":"//               Solutions of Sandia, LLC (NTESS)."},
{"lineNum":"    8","line":"//"},
{"lineNum":"    9","line":"// Under the terms of Contract DE-NA0003525 with NTESS,"},
{"lineNum":"   10","line":"// the U.S. Government retains certain rights in this software."},
{"lineNum":"   11","line":"//"},
{"lineNum":"   12","line":"// Redistribution and use in source and binary forms, with or without"},
{"lineNum":"   13","line":"// modification, are permitted provided that the following conditions are"},
{"lineNum":"   14","line":"// met:"},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"// 1. Redistributions of source code must retain the above copyright"},
{"lineNum":"   17","line":"// notice, this list of conditions and the following disclaimer."},
{"lineNum":"   18","line":"//"},
{"lineNum":"   19","line":"// 2. Redistributions in binary form must reproduce the above copyright"},
{"lineNum":"   20","line":"// notice, this list of conditions and the following disclaimer in the"},
{"lineNum":"   21","line":"// documentation and/or other materials provided with the distribution."},
{"lineNum":"   22","line":"//"},
{"lineNum":"   23","line":"// 3. Neither the name of the Corporation nor the names of the"},
{"lineNum":"   24","line":"// contributors may be used to endorse or promote products derived from"},
{"lineNum":"   25","line":"// this software without specific prior written permission."},
{"lineNum":"   26","line":"//"},
{"lineNum":"   27","line":"// THIS SOFTWARE IS PROVIDED BY NTESS \"AS IS\" AND ANY"},
{"lineNum":"   28","line":"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"},
{"lineNum":"   29","line":"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR"},
{"lineNum":"   30","line":"// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NTESS OR THE"},
{"lineNum":"   31","line":"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,"},
{"lineNum":"   32","line":"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,"},
{"lineNum":"   33","line":"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR"},
{"lineNum":"   34","line":"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF"},
{"lineNum":"   35","line":"// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING"},
{"lineNum":"   36","line":"// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"},
{"lineNum":"   37","line":"// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   38","line":"//"},
{"lineNum":"   39","line":"// Questions? Contact Christian R. Trott (crtrott@sandia.gov)"},
{"lineNum":"   40","line":"//"},
{"lineNum":"   41","line":"// ************************************************************************"},
{"lineNum":"   42","line":"//@HEADER"},
{"lineNum":"   43","line":"*/"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"#include <limits>"},
{"lineNum":"   46","line":"#include <Kokkos_Macros.hpp>"},
{"lineNum":"   47","line":"#include <impl/Kokkos_HostThreadTeam.hpp>"},
{"lineNum":"   48","line":"#include <impl/Kokkos_Error.hpp>"},
{"lineNum":"   49","line":"#include <impl/Kokkos_Spinwait.hpp>"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"//----------------------------------------------------------------------------"},
{"lineNum":"   52","line":"//----------------------------------------------------------------------------"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"namespace Kokkos {"},
{"lineNum":"   55","line":"namespace Impl {"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"void HostThreadTeamData::organize_pool(HostThreadTeamData *members[],"},
{"lineNum":"   58","line":"                                       const int size) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   59","line":"  bool ok = true;"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"  memory_fence();"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"  // Verify not already a member of a pool:"},
{"lineNum":"   64","line":"  for (int rank = 0; rank < size && ok; ++rank) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   65","line":"    ok = (nullptr != members[rank]) &&","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   66","line":"         (nullptr == members[rank]->m_pool_scratch);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   67","line":"  }"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"  if (ok) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   70","line":"    int64_t *const root_scratch = members[0]->m_scratch;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"    for (int i = m_pool_rendezvous; i < m_pool_reduce; ++i) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   73","line":"      root_scratch[i] = 0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   74","line":"    }"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"    {"},
{"lineNum":"   77","line":"      HostThreadTeamData **const pool ="},
{"lineNum":"   78","line":"          (HostThreadTeamData **)(root_scratch + m_pool_members);"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"      // team size == 1, league size == pool_size"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"      for (int rank = 0; rank < size; ++rank) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   83","line":"        HostThreadTeamData *const mem = members[rank];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   84","line":"        mem->m_pool_scratch           = root_scratch;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   85","line":"        mem->m_team_scratch           = mem->m_scratch;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   86","line":"        mem->m_pool_rank              = rank;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   87","line":"        mem->m_pool_size              = size;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   88","line":"        mem->m_team_base              = rank;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   89","line":"        mem->m_team_rank              = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   90","line":"        mem->m_team_size              = 1;"},
{"lineNum":"   91","line":"        mem->m_team_alloc             = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   92","line":"        mem->m_league_rank            = rank;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   93","line":"        mem->m_league_size            = size;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   94","line":"        mem->m_team_rendezvous_step   = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   95","line":"        pool[rank]                    = mem;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   96","line":"      }"},
{"lineNum":"   97","line":"    }"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"    Kokkos::memory_fence();"},
{"lineNum":"  100","line":"  } else {"},
{"lineNum":"  101","line":"    Kokkos::Impl::throw_runtime_exception(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  102","line":"        \"Kokkos::Impl::HostThreadTeamData::organize_pool ERROR pool already \""},
{"lineNum":"  103","line":"        \"exists\");"},
{"lineNum":"  104","line":"  }"},
{"lineNum":"  105","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"void HostThreadTeamData::disband_pool() {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  108","line":"  m_work_range.first     = -1;"},
{"lineNum":"  109","line":"  m_work_range.second    = -1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  110","line":"  m_pool_scratch         = nullptr;"},
{"lineNum":"  111","line":"  m_team_scratch         = nullptr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  112","line":"  m_pool_rank            = 0;"},
{"lineNum":"  113","line":"  m_pool_size            = 1;"},
{"lineNum":"  114","line":"  m_team_base            = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  115","line":"  m_team_rank            = 0;"},
{"lineNum":"  116","line":"  m_team_size            = 1;"},
{"lineNum":"  117","line":"  m_team_alloc           = 1;"},
{"lineNum":"  118","line":"  m_league_rank          = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  119","line":"  m_league_size          = 1;"},
{"lineNum":"  120","line":"  m_team_rendezvous_step = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  121","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"int HostThreadTeamData::organize_team(const int team_size) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  124","line":"  // Pool is initialized"},
{"lineNum":"  125","line":"  const bool ok_pool = nullptr != m_pool_scratch;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"  // Team is not set"},
{"lineNum":"  128","line":"  const bool ok_team ="},
{"lineNum":"  129","line":"      m_team_scratch == m_scratch && m_team_base == m_pool_rank &&","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  130","line":"      m_team_rank == 0 && m_team_size == 1 && m_team_alloc == 1 &&","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  131","line":"      m_league_rank == m_pool_rank && m_league_size == m_pool_size;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"  if (ok_pool && ok_team) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  134","line":"    if (team_size <= 0) return 0;  // No teams to organize","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"    if (team_size == 1) return 1;  // Already organized in teams of one","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"    HostThreadTeamData *const *const pool ="},
{"lineNum":"  139","line":"        (HostThreadTeamData **)(m_pool_scratch + m_pool_members);"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"    // \"league_size\" in this context is the number of concurrent teams"},
{"lineNum":"  142","line":"    // that the pool can accommodate.  Excess threads are idle."},
{"lineNum":"  143","line":"    const int league_size     = m_pool_size / team_size;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  144","line":"    const int team_alloc_size = m_pool_size / league_size;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  145","line":"    const int team_alloc_rank = m_pool_rank % team_alloc_size;"},
{"lineNum":"  146","line":"    const int league_rank     = m_pool_rank / team_alloc_size;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  147","line":"    const int team_base_rank  = league_rank * team_alloc_size;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"    m_team_scratch = pool[team_base_rank]->m_scratch;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  150","line":"    m_team_base    = team_base_rank;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  151","line":"    // This needs to check overflow, if m_pool_size % team_alloc_size !=0"},
{"lineNum":"  152","line":"    // there are two corner cases:"},
{"lineNum":"  153","line":"    // (i) if team_alloc_size == team_size there might be a non-full"},
{"lineNum":"  154","line":"    //     zombi team around (for example m_pool_size = 5 and team_size = 2"},
{"lineNum":"  155","line":"    // (ii) if team_alloc > team_size then the last team might have less"},
{"lineNum":"  156","line":"    //      threads than the others"},
{"lineNum":"  157","line":"    m_team_rank = (team_base_rank + team_size <= m_pool_size) &&","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  158","line":"                          (team_alloc_rank < team_size)"},
{"lineNum":"  159","line":"                      ? team_alloc_rank"},
{"lineNum":"  160","line":"                      : -1;"},
{"lineNum":"  161","line":"    m_team_size            = team_size;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  162","line":"    m_team_alloc           = team_alloc_size;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  163","line":"    m_league_rank          = league_rank;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  164","line":"    m_league_size          = league_size;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  165","line":"    m_team_rendezvous_step = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"    if (team_base_rank == m_pool_rank) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  168","line":"      // Initialize team\'s rendezvous memory"},
{"lineNum":"  169","line":"      for (int i = m_team_rendezvous; i < m_pool_reduce; ++i) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  170","line":"        m_scratch[i] = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  171","line":"      }"},
{"lineNum":"  172","line":"      // Make sure team\'s rendezvous memory initialized"},
{"lineNum":"  173","line":"      // is written before proceeding."},
{"lineNum":"  174","line":"      Kokkos::memory_fence();"},
{"lineNum":"  175","line":"    }"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"    // Organizing threads into a team performs a barrier across the"},
{"lineNum":"  178","line":"    // entire pool to insure proper initialization of the team"},
{"lineNum":"  179","line":"    // rendezvous mechanism before a team rendezvous can be performed."},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"    if (pool_rendezvous()) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  182","line":"      pool_rendezvous_release();"},
{"lineNum":"  183","line":"    }"},
{"lineNum":"  184","line":"  } else {"},
{"lineNum":"  185","line":"    Kokkos::Impl::throw_runtime_exception(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  186","line":"        \"Kokkos::Impl::HostThreadTeamData::organize_team ERROR\");"},
{"lineNum":"  187","line":"  }"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"  return 0 <= m_team_rank;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  190","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"void HostThreadTeamData::disband_team() {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  193","line":"  m_team_scratch         = m_scratch;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  194","line":"  m_team_base            = m_pool_rank;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  195","line":"  m_team_rank            = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  196","line":"  m_team_size            = 1;"},
{"lineNum":"  197","line":"  m_team_alloc           = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  198","line":"  m_league_rank          = m_pool_rank;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  199","line":"  m_league_size          = m_pool_size;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  200","line":"  m_team_rendezvous_step = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  201","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"int HostThreadTeamData::get_work_stealing() noexcept {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  206","line":"  pair_int_t w(-1, -1);"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"  // TODO DJS 3-17-2018:"},
{"lineNum":"  209","line":"  // Discover why the work stealing algorithm only works when called"},
{"lineNum":"  210","line":"  // by the master thread of the team.  If we can refactor this section to"},
{"lineNum":"  211","line":"  // remove that requirement we should be able to remove the split_master_wait"},
{"lineNum":"  212","line":"  // behavior in the team and pool rendezvous algorithms"},
{"lineNum":"  213","line":"  if (1 == m_team_size || team_rendezvous()) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  214","line":"    // Attempt first from beginning of my work range"},
{"lineNum":"  215","line":"    for (int attempt = m_work_range.first < m_work_range.second; attempt;) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  216","line":"      // Query and attempt to update m_work_range"},
{"lineNum":"  217","line":"      //   from: [ w.first     , w.second )"},
{"lineNum":"  218","line":"      //   to:   [ w.first + 1 , w.second ) = w_new"},
{"lineNum":"  219","line":"      //"},
{"lineNum":"  220","line":"      // If w is invalid then is just a query."},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"      const pair_int_t w_new(w.first + 1, w.second);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"      w = Kokkos::atomic_compare_exchange(&m_work_range, w, w_new);"},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"      if (w.first < w.second) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  227","line":"        // m_work_range is viable"},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"        // If steal is successful then don\'t repeat attempt to steal"},
{"lineNum":"  230","line":"        attempt = !(w_new.first == w.first + 1 && w_new.second == w.second);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  231","line":"      } else {"},
{"lineNum":"  232","line":"        // m_work_range is not viable"},
{"lineNum":"  233","line":"        w.first  = -1;"},
{"lineNum":"  234","line":"        w.second = -1;"},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":"        attempt = 0;"},
{"lineNum":"  237","line":"      }"},
{"lineNum":"  238","line":"    }"},
{"lineNum":"  239","line":""},
{"lineNum":"  240","line":"    if (w.first == -1 && m_steal_rank != m_pool_rank) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  241","line":"      HostThreadTeamData *const *const pool ="},
{"lineNum":"  242","line":"          (HostThreadTeamData **)(m_pool_scratch + m_pool_members);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"      // Attempt from beginning failed, try to steal from end of neighbor"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"      pair_int_t volatile *steal_range = &(pool[m_steal_rank]->m_work_range);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"      for (int attempt = true; attempt;) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  249","line":"        // Query and attempt to update steal_work_range"},
{"lineNum":"  250","line":"        //   from: [ w.first , w.second )"},
{"lineNum":"  251","line":"        //   to:   [ w.first , w.second - 1 ) = w_new"},
{"lineNum":"  252","line":"        //"},
{"lineNum":"  253","line":"        // If w is invalid then is just a query."},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"        const pair_int_t w_new(w.first, w.second - 1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  256","line":""},
{"lineNum":"  257","line":"        w = Kokkos::atomic_compare_exchange(steal_range, w, w_new);"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"        if (w.first < w.second) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  260","line":"          // steal_work_range is viable"},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"          // If steal is successful then don\'t repeat attempt to steal"},
{"lineNum":"  263","line":"          attempt = !(w_new.first == w.first && w_new.second == w.second - 1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  264","line":"        } else {"},
{"lineNum":"  265","line":"          // steal_work_range is not viable, move to next member"},
{"lineNum":"  266","line":"          w.first  = -1;"},
{"lineNum":"  267","line":"          w.second = -1;"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"          // We need to figure out whether the next team is active"},
{"lineNum":"  270","line":"          // m_steal_rank + m_team_alloc could be the next base_rank to steal"},
{"lineNum":"  271","line":"          // from but only if there are another m_team_size threads available so"},
{"lineNum":"  272","line":"          // that that base rank has a full team."},
{"lineNum":"  273","line":"          m_steal_rank =","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  274","line":"              m_steal_rank + m_team_alloc + m_team_size <= m_pool_size","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  275","line":"                  ? m_steal_rank + m_team_alloc"},
{"lineNum":"  276","line":"                  : 0;"},
{"lineNum":"  277","line":""},
{"lineNum":"  278","line":"          steal_range = &(pool[m_steal_rank]->m_work_range);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  279","line":""},
{"lineNum":"  280","line":"          // If tried all other members then don\'t repeat attempt to steal"},
{"lineNum":"  281","line":"          attempt = m_steal_rank != m_pool_rank;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  282","line":"        }"},
{"lineNum":"  283","line":"      }"},
{"lineNum":"  284","line":""},
{"lineNum":"  285","line":"      if (w.first != -1) w.first = w.second - 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  286","line":"    }"},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"    if (1 < m_team_size) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  289","line":"      // Must share the work index"},
{"lineNum":"  290","line":"      *((int volatile *)team_reduce()) = w.first;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"      team_rendezvous_release();"},
{"lineNum":"  293","line":"    }"},
{"lineNum":"  294","line":"  } else if (1 < m_team_size) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  295","line":"    w.first = *((int volatile *)team_reduce());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  296","line":"  }"},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":"  // May exit because successfully stole work and w is good."},
{"lineNum":"  299","line":"  // May exit because no work left to steal and w = (-1,-1)."},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"#if 0"},
{"lineNum":"  302","line":"fprintf(stdout,\"HostThreadTeamData::get_work_stealing() pool(%d of %d) %d\\n\""},
{"lineNum":"  303","line":"       , m_pool_rank , m_pool_size , w.first );"},
{"lineNum":"  304","line":"fflush(stdout);"},
{"lineNum":"  305","line":"#endif"},
{"lineNum":"  306","line":""},
{"lineNum":"  307","line":"  return w.first;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  308","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  309","line":""},
{"lineNum":"  310","line":"}  // namespace Impl"},
{"lineNum":"  311","line":"}  // namespace Kokkos"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 90, "covered" : 0,};
var merged_data = [];
