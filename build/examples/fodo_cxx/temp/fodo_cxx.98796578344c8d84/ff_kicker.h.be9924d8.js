var data = {lines:[
{"lineNum":"    1","line":"#ifndef FF_HKICKER_H"},
{"lineNum":"    2","line":"#define FF_HKICKER_H"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#include \"synergia/libFF/ff_algorithm.h\""},
{"lineNum":"    5","line":"#include \"synergia/libFF/ff_patterned_propagator.h\""},
{"lineNum":"    6","line":"#include \"synergia/utils/simple_timer.h\""},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"namespace FF_kicker"},
{"lineNum":"    9","line":"{"},
{"lineNum":"   10","line":"    template<class T>"},
{"lineNum":"   11","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   12","line":"    void kick(T const&x, T& xp, T const& y, T& yp, T const&, double const* kL)"},
{"lineNum":"   13","line":"    { FF_algorithm::thin_kicker_unit(xp, yp, kL); }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"    template<class BunchT>"},
{"lineNum":"   17","line":"    void apply(Lattice_element_slice const& slice, BunchT& bunch)"},
{"lineNum":"   18","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   19","line":"        scoped_simple_timer timer(\"libFF_kicker\");"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"        auto const& elem = slice.get_lattice_element();"},
{"lineNum":"   22","line":"        const double length = slice.get_right() - slice.get_left();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"        // hk and vk are the hk/vk under lattice reference momentum"},
{"lineNum":"   25","line":"        double    l = elem.get_double_attribute(\"l\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   26","line":"        double  hk0 = elem.get_double_attribute(\"hkick\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   27","line":"        double  vk0 = elem.get_double_attribute(\"vkick\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   28","line":"        double tilt = elem.get_double_attribute(\"tilt\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"        // tilt"},
{"lineNum":"   31","line":"        double hk = cos(tilt)*hk0 - sin(tilt)*vk0;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   32","line":"        double vk = sin(tilt)*hk0 + cos(tilt)*vk0;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"        //double k = elem.get_double_attribute(k_attr, 0.0);"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"        auto& ref_lattice = bunch.get_design_reference_particle();"},
{"lineNum":"   37","line":"        auto const& ref_bunch = bunch.get_reference_particle();"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"        double plattice = ref_lattice.get_momentum();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   40","line":"        double pbunch = ref_bunch.get_momentum();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"        // scale is to scale the kick strength defined relative to the lattice momentum to"},
{"lineNum":"   43","line":"        // the scale of the bunch particles defined relative to the bunch momentum"},
{"lineNum":"   44","line":"        double scale = plattice/pbunch;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"        // kick strength is defined as momentum change/reference momentum"},
{"lineNum":"   47","line":"        double b_hk = hk * ( ref_bunch.get_charge() / ref_lattice.get_charge() ) * scale;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   48","line":"        double b_vk = vk * ( ref_bunch.get_charge() / ref_lattice.get_charge() ) * scale;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"        double k[2] = {hk, vk};","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   51","line":"        double sk[2] = {b_hk, b_vk};","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"        using gsv_t = typename BunchT::gsv_t;"},
{"lineNum":"   54","line":"        using pp = FF_patterned_propagator<BunchT, gsv_t,"},
{"lineNum":"   55","line":"              kick<gsv_t>, kick<double>>;"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"        if ( close_to_zero(length) )","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   58","line":"        {"},
{"lineNum":"   59","line":"            // the reference time is calculated with the design reference"},
{"lineNum":"   60","line":"            // particle which is relative to the p-lattice."},
{"lineNum":"   61","line":"            // also update the reference particle"},
{"lineNum":"   62","line":"            pp::get_reference_cdt_zero(ref_lattice, k);"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"            pp::apply_thin_kick(bunch, ParticleGroup::regular, sk);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   65","line":"            pp::apply_thin_kick(bunch, ParticleGroup::spectator, sk);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   66","line":"        }"},
{"lineNum":"   67","line":"        else"},
{"lineNum":"   68","line":"        {"},
{"lineNum":"   69","line":"            // simple drift-kick-drift scheme"},
{"lineNum":"   70","line":"            double simple_d = slice"},
{"lineNum":"   71","line":"                .get_lattice_element()"},
{"lineNum":"   72","line":"                .get_double_attribute(\"simple\", 0.0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"            bool simple = fabs(simple_d) > 1e-16;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"            // strength per unit length"},
{"lineNum":"   77","line":"            k[0] = k[0]/l;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   78","line":"            k[1] = k[1]/l;"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"            sk[0] = sk[0]/l;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   81","line":"            sk[1] = sk[1]/l;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"            double pref = bunch.get_reference_particle().get_momentum();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   84","line":"            double mass = bunch.get_mass();"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"            if (simple)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   87","line":"            {"},
{"lineNum":"   88","line":"                // use un-scaled k_pul"},
{"lineNum":"   89","line":"                double ref_cdt = pp::get_reference_cdt_simple(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   90","line":"                        ref_lattice, length, k);"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"                pp::apply_simple_kick(bunch, ParticleGroup::regular,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   93","line":"                        pref, mass, ref_cdt, length, sk);"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"                pp::apply_simple_kick(bunch, ParticleGroup::spectator,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   96","line":"                        pref, mass, ref_cdt, length, sk);"},
{"lineNum":"   97","line":"            }"},
{"lineNum":"   98","line":"            else"},
{"lineNum":"   99","line":"            {"},
{"lineNum":"  100","line":"                // yoshida steps"},
{"lineNum":"  101","line":"                int steps = (int)elem.get_double_attribute(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  102","line":"                        \"yoshida_steps\", 4.0);"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"                // use drift for reference particle:"},
{"lineNum":"  105","line":"                // MadX uses drift for reference particle if a closed"},
{"lineNum":"  106","line":"                // orbit is not found. libFF also gives an option of"},
{"lineNum":"  107","line":"                // using the drift, but mostly for testing purposes"},
{"lineNum":"  108","line":"                int use_drift = (int)elem.get_double_attribute(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  109","line":"                        \"cdt_use_drift\", 0.0);"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"                // use un-scaled k_pul"},
{"lineNum":"  112","line":"                double ref_cdt = pp::get_reference_cdt_yoshida(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  113","line":"                        ref_lattice, length, k, steps, use_drift);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"                pp::apply_yoshida_kick(bunch, ParticleGroup::regular,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  116","line":"                        pref, mass, ref_cdt, length, sk, steps);"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"                pp::apply_yoshida_kick(bunch, ParticleGroup::spectator,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  119","line":"                        pref, mass, ref_cdt, length, sk, steps);"},
{"lineNum":"  120","line":"            }"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"            bunch.get_reference_particle().increment_trajectory(length);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  123","line":"        }"},
{"lineNum":"  124","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  125","line":"}"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"#endif // FF_HKICKER_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 37, "covered" : 0,};
var merged_data = [];
