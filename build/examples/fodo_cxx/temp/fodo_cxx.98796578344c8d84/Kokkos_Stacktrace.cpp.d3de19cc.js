var data = {lines:[
{"lineNum":"    1","line":"#include \"Kokkos_Macros.hpp\""},
{"lineNum":"    2","line":"#include \"Kokkos_Stacktrace.hpp\""},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#ifdef KOKKOS_IMPL_ENABLE_STACKTRACE"},
{"lineNum":"    5","line":"// backtrace() function for retrieving the stacktrace"},
{"lineNum":"    6","line":"#include <execinfo.h>"},
{"lineNum":"    7","line":"#endif"},
{"lineNum":"    8","line":"#ifdef KOKKOS_IMPL_ENABLE_CXXABI"},
{"lineNum":"    9","line":"#include <cxxabi.h>"},
{"lineNum":"   10","line":"#endif  // KOKKOS_ENABLE_CXXABI"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"#include <exception>"},
{"lineNum":"   13","line":"#include <iostream>"},
{"lineNum":"   14","line":"#include <tuple>"},
{"lineNum":"   15","line":"#include <vector>"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"namespace Kokkos {"},
{"lineNum":"   18","line":"namespace Impl {"},
{"lineNum":"   19","line":"#ifndef KOKKOS_IMPL_ENABLE_STACKTRACE"},
{"lineNum":"   20","line":"int backtrace(void**, int) { return 0; }"},
{"lineNum":"   21","line":"char** backtrace_symbols(void* const*, int) { return nullptr; }"},
{"lineNum":"   22","line":"#endif"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"std::string demangle(const std::string& name) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   25","line":"#ifndef KOKKOS_IMPL_ENABLE_CXXABI"},
{"lineNum":"   26","line":"  return name;"},
{"lineNum":"   27","line":"#else"},
{"lineNum":"   28","line":"  size_t found_end = name.find_first_of(\"+)\", 0, 2);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   29","line":"  if (found_end == std::string::npos) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   30","line":"    found_end = name.size();"},
{"lineNum":"   31","line":"  }"},
{"lineNum":"   32","line":"  size_t found_parenthesis = name.find_first_of(\"(\");"},
{"lineNum":"   33","line":"  size_t start             = found_parenthesis + 1;"},
{"lineNum":"   34","line":"  if (found_parenthesis == std::string::npos) start = 0;"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"  std::string s = name.substr(start, found_end - start);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"  if (s.length() != 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   39","line":"    int status          = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   40","line":"    char* output_buffer = nullptr;"},
{"lineNum":"   41","line":"    size_t length       = s.length();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   42","line":"    char* d = abi::__cxa_demangle(s.c_str(), output_buffer, &length, &status);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   43","line":"    if (d != nullptr) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   44","line":"      s = d;"},
{"lineNum":"   45","line":"      free(d);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   46","line":"    }"},
{"lineNum":"   47","line":"  }"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"  // Special cases for \"main\" and \"start\" on Mac"},
{"lineNum":"   50","line":"  if (s.length() == 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   51","line":"    if (name == \"main\" || name == \"start\") {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   52","line":"      s = name;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   53","line":"    }"},
{"lineNum":"   54","line":"  }"},
{"lineNum":"   55","line":"  return s;"},
{"lineNum":"   56","line":"#endif  // KOKKOS_ENABLE_CXXABI"},
{"lineNum":"   57","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"class Stacktrace {"},
{"lineNum":"   60","line":" public:"},
{"lineNum":"   61","line":"  Stacktrace()                  = delete;"},
{"lineNum":"   62","line":"  Stacktrace(const Stacktrace&) = delete;"},
{"lineNum":"   63","line":"  Stacktrace& operator=(const Stacktrace&) = delete;"},
{"lineNum":"   64","line":"  Stacktrace(Stacktrace&&)                 = delete;"},
{"lineNum":"   65","line":"  Stacktrace& operator=(Stacktrace&&) = delete;"},
{"lineNum":"   66","line":"  ~Stacktrace()                       = delete;"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"  // These are public only to avoid wasting an extra stacktrace line."},
{"lineNum":"   69","line":"  // See save_stacktrace below."},
{"lineNum":"   70","line":"  static constexpr int capacity = 100;"},
{"lineNum":"   71","line":"  static void* buffer[capacity];"},
{"lineNum":"   72","line":"  static int length;"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"  static std::vector<std::string> lines() {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   75","line":"    char** symbols = backtrace_symbols(buffer, length);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   76","line":"    if (symbols == nullptr) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   77","line":"      return {};"},
{"lineNum":"   78","line":"    } else {"},
{"lineNum":"   79","line":"      std::vector<std::string> trace(length);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   80","line":"      for (int i = 0; i < length; ++i) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   81","line":"        if (symbols[i] != nullptr) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   82","line":"          trace[i] = std::string(symbols[i]);"},
{"lineNum":"   83","line":"        }"},
{"lineNum":"   84","line":"      }"},
{"lineNum":"   85","line":"      free(symbols);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   86","line":"      return trace;"},
{"lineNum":"   87","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   88","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   89","line":"};"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"int Stacktrace::length = 0;"},
{"lineNum":"   92","line":"void* Stacktrace::buffer[Stacktrace::capacity];"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"void save_stacktrace() {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   95","line":"  Stacktrace::length = backtrace(Stacktrace::buffer, Stacktrace::capacity);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   96","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"size_t find_first_non_whitespace(const std::string& s, const size_t start_pos) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   99","line":"  constexpr size_t num_ws_chars = 3;"},
{"lineNum":"  100","line":"  const char ws_chars[]         = \"\\n\\t \";","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  101","line":"  return s.find_first_not_of(ws_chars, start_pos, num_ws_chars);","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  102","line":"}"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"size_t find_first_whitespace(const std::string& s, const size_t start_pos) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  105","line":"  constexpr size_t num_ws_chars = 3;"},
{"lineNum":"  106","line":"  const char ws_chars[]         = \"\\n\\t \";","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  107","line":"  return s.find_first_of(ws_chars, start_pos, num_ws_chars);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  108","line":"}"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"template <class Callback>"},
{"lineNum":"  111","line":"void for_each_token(const std::string& s, Callback c) {"},
{"lineNum":"  112","line":"  size_t cur = find_first_non_whitespace(s, 0);"},
{"lineNum":"  113","line":"  while (cur != std::string::npos) {","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  114","line":"    const size_t end   = find_first_whitespace(s, cur);"},
{"lineNum":"  115","line":"    const bool last    = (end == std::string::npos);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  116","line":"    const size_t count = last ? end : size_t(end - cur);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  117","line":"    c(s.substr(cur, count), last);"},
{"lineNum":"  118","line":"    cur = find_first_non_whitespace(s, end);"},
{"lineNum":"  119","line":"  }"},
{"lineNum":"  120","line":"}"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"// Search the whole backtrace, column by column, for \"main\"."},
{"lineNum":"  123","line":"// This tells us what column has the function names."},
{"lineNum":"  124","line":"// While we\'re doing that, figure out the longest column,"},
{"lineNum":"  125","line":"// so we can compute spacing correctly."},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"struct main_column_info {"},
{"lineNum":"  128","line":"  bool found_main;"},
{"lineNum":"  129","line":"  size_t main_col;"},
{"lineNum":"  130","line":"  std::vector<size_t> main_col_lens;"},
{"lineNum":"  131","line":"};"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"main_column_info find_main_column(const std::vector<std::string>& traceback) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  134","line":"  bool found_main = false;"},
{"lineNum":"  135","line":"  size_t main_col = 0;"},
{"lineNum":"  136","line":"  for (auto&& entry : traceback) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  137","line":"    size_t col_count = 0;"},
{"lineNum":"  138","line":"    for_each_token(entry, [&](const std::string& s, bool) {"},
{"lineNum":"  139","line":"      const size_t pos = s.find(\"main\");"},
{"lineNum":"  140","line":"      if (pos != std::string::npos) {"},
{"lineNum":"  141","line":"        found_main = true;"},
{"lineNum":"  142","line":"        main_col   = col_count;"},
{"lineNum":"  143","line":"      }"},
{"lineNum":"  144","line":"      ++col_count;"},
{"lineNum":"  145","line":"    });"},
{"lineNum":"  146","line":"    if (found_main) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  147","line":"      break;"},
{"lineNum":"  148","line":"    }"},
{"lineNum":"  149","line":"  }"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"  // Make another pass to get the column lengths."},
{"lineNum":"  152","line":"  // Only demangle the column of functions."},
{"lineNum":"  153","line":"  std::vector<size_t> max_col_lengths;"},
{"lineNum":"  154","line":"  for (auto&& entry : traceback) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  155","line":"    size_t col_count = 0;"},
{"lineNum":"  156","line":"    for_each_token(entry, [&](const std::string& s, bool) {"},
{"lineNum":"  157","line":"      const size_t cur_col_len ="},
{"lineNum":"  158","line":"          (found_main && col_count == main_col) ? demangle(s).size() : s.size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  159","line":"      ++col_count;"},
{"lineNum":"  160","line":"      if (max_col_lengths.size() < col_count) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  161","line":"        max_col_lengths.push_back(cur_col_len);"},
{"lineNum":"  162","line":"      } else {"},
{"lineNum":"  163","line":"        const size_t old_max_len = max_col_lengths[col_count - 1];"},
{"lineNum":"  164","line":"        if (old_max_len < cur_col_len) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  165","line":"          max_col_lengths[col_count - 1] = cur_col_len;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  166","line":"        }"},
{"lineNum":"  167","line":"      }"},
{"lineNum":"  168","line":"    });"},
{"lineNum":"  169","line":"  }"},
{"lineNum":"  170","line":"  return main_column_info{found_main, main_col, max_col_lengths};","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  171","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"void demangle_and_print_traceback_entry("},
{"lineNum":"  174","line":"    std::ostream& out, const std::string& traceback_entry,"},
{"lineNum":"  175","line":"    const bool found_main, const size_t main_col,"},
{"lineNum":"  176","line":"    const std::vector<size_t>& max_col_lens) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  177","line":"  std::vector<std::string> tokens;"},
{"lineNum":"  178","line":"  size_t cur_col = 0;"},
{"lineNum":"  179","line":"  for_each_token(traceback_entry, [&](const std::string& s, bool last) {"},
{"lineNum":"  180","line":"    const size_t old_width(out.width());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  181","line":"    out.width(max_col_lens[cur_col]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  182","line":"    try {"},
{"lineNum":"  183","line":"      if (found_main && cur_col == main_col) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  184","line":"        out << demangle(s);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  185","line":"      } else {"},
{"lineNum":"  186","line":"        out << s;"},
{"lineNum":"  187","line":"      }"},
{"lineNum":"  188","line":"      if (!last) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  189","line":"        out << \" \";"},
{"lineNum":"  190","line":"      }"},
{"lineNum":"  191","line":"      ++cur_col;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  192","line":"    } catch (...) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  193","line":"      out.width(old_width);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  194","line":"      throw;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  195","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  196","line":"    out.width(old_width);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  197","line":"  });"},
{"lineNum":"  198","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"void demangle_and_print_traceback(std::ostream& out,"},
{"lineNum":"  201","line":"                                  const std::vector<std::string>& traceback) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  202","line":"  const auto result = find_main_column(traceback);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  203","line":"  for (auto&& entry : traceback) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  204","line":"    demangle_and_print_traceback_entry(out, entry, result.found_main,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  205","line":"                                       result.main_col, result.main_col_lens);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  206","line":"    out << std::endl;"},
{"lineNum":"  207","line":"  }"},
{"lineNum":"  208","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"void print_saved_stacktrace(std::ostream& out) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  211","line":"  auto lines = Stacktrace::lines();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  212","line":"  for (auto&& entry : lines) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  213","line":"    out << entry << std::endl;"},
{"lineNum":"  214","line":"  }"},
{"lineNum":"  215","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"void print_demangled_saved_stacktrace(std::ostream& out) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  218","line":"  demangle_and_print_traceback(out, Stacktrace::lines());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  219","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  220","line":""},
{"lineNum":"  221","line":"std::function<void()> user_terminate_handler_post_ = nullptr;"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"void kokkos_terminate_handler() {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  224","line":"  using std::cerr;"},
{"lineNum":"  225","line":"  using std::endl;"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"  cerr << \"Kokkos observes that std::terminate has been called.  \""},
{"lineNum":"  228","line":"          \"Here is the last saved stack trace.  Note that this does not \""},
{"lineNum":"  229","line":"          \"necessarily show what called std::terminate.\""},
{"lineNum":"  230","line":"       << endl"},
{"lineNum":"  231","line":"       << endl;"},
{"lineNum":"  232","line":"  print_demangled_saved_stacktrace(std::cerr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"  if (user_terminate_handler_post_ != nullptr) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  235","line":"    user_terminate_handler_post_();"},
{"lineNum":"  236","line":"  } else {"},
{"lineNum":"  237","line":"    std::abort();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  238","line":"  }"},
{"lineNum":"  239","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"void set_kokkos_terminate_handler(std::function<void()> user_post) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  242","line":"  user_terminate_handler_post_ = user_post;"},
{"lineNum":"  243","line":"  std::set_terminate(kokkos_terminate_handler);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  244","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"}  // namespace Impl"},
{"lineNum":"  247","line":"}  // namespace Kokkos"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 79, "covered" : 0,};
var merged_data = [];
