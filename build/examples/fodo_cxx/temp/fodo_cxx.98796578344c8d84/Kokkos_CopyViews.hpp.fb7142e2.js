var data = {lines:[
{"lineNum":"    1","line":"/*"},
{"lineNum":"    2","line":"//@HEADER"},
{"lineNum":"    3","line":"// ************************************************************************"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"//                        Kokkos v. 3.0"},
{"lineNum":"    6","line":"//       Copyright (2020) National Technology & Engineering"},
{"lineNum":"    7","line":"//               Solutions of Sandia, LLC (NTESS)."},
{"lineNum":"    8","line":"//"},
{"lineNum":"    9","line":"// Under the terms of Contract DE-NA0003525 with NTESS,"},
{"lineNum":"   10","line":"// the U.S. Government retains certain rights in this software."},
{"lineNum":"   11","line":"//"},
{"lineNum":"   12","line":"// Redistribution and use in source and binary forms, with or without"},
{"lineNum":"   13","line":"// modification, are permitted provided that the following conditions are"},
{"lineNum":"   14","line":"// met:"},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"// 1. Redistributions of source code must retain the above copyright"},
{"lineNum":"   17","line":"// notice, this list of conditions and the following disclaimer."},
{"lineNum":"   18","line":"//"},
{"lineNum":"   19","line":"// 2. Redistributions in binary form must reproduce the above copyright"},
{"lineNum":"   20","line":"// notice, this list of conditions and the following disclaimer in the"},
{"lineNum":"   21","line":"// documentation and/or other materials provided with the distribution."},
{"lineNum":"   22","line":"//"},
{"lineNum":"   23","line":"// 3. Neither the name of the Corporation nor the names of the"},
{"lineNum":"   24","line":"// contributors may be used to endorse or promote products derived from"},
{"lineNum":"   25","line":"// this software without specific prior written permission."},
{"lineNum":"   26","line":"//"},
{"lineNum":"   27","line":"// THIS SOFTWARE IS PROVIDED BY NTESS \"AS IS\" AND ANY"},
{"lineNum":"   28","line":"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"},
{"lineNum":"   29","line":"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR"},
{"lineNum":"   30","line":"// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NTESS OR THE"},
{"lineNum":"   31","line":"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,"},
{"lineNum":"   32","line":"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,"},
{"lineNum":"   33","line":"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR"},
{"lineNum":"   34","line":"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF"},
{"lineNum":"   35","line":"// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING"},
{"lineNum":"   36","line":"// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"},
{"lineNum":"   37","line":"// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   38","line":"//"},
{"lineNum":"   39","line":"// Questions? Contact Christian R. Trott (crtrott@sandia.gov)"},
{"lineNum":"   40","line":"//"},
{"lineNum":"   41","line":"// ************************************************************************"},
{"lineNum":"   42","line":"//@HEADER"},
{"lineNum":"   43","line":"*/"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"#ifndef KOKKOS_COPYVIEWS_HPP_"},
{"lineNum":"   46","line":"#define KOKKOS_COPYVIEWS_HPP_"},
{"lineNum":"   47","line":"#include <string>"},
{"lineNum":"   48","line":"#include <Kokkos_Parallel.hpp>"},
{"lineNum":"   49","line":"#include <KokkosExp_MDRangePolicy.hpp>"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"//----------------------------------------------------------------------------"},
{"lineNum":"   52","line":"//----------------------------------------------------------------------------"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"namespace Kokkos {"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"namespace Impl {"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"template <class Layout>"},
{"lineNum":"   59","line":"struct ViewFillLayoutSelector {};"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"template <>"},
{"lineNum":"   62","line":"struct ViewFillLayoutSelector<Kokkos::LayoutLeft> {"},
{"lineNum":"   63","line":"  static const Kokkos::Iterate iterate = Kokkos::Iterate::Left;"},
{"lineNum":"   64","line":"};"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"template <>"},
{"lineNum":"   67","line":"struct ViewFillLayoutSelector<Kokkos::LayoutRight> {"},
{"lineNum":"   68","line":"  static const Kokkos::Iterate iterate = Kokkos::Iterate::Right;"},
{"lineNum":"   69","line":"};"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"}  // namespace Impl"},
{"lineNum":"   72","line":"}  // namespace Kokkos"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"namespace Kokkos {"},
{"lineNum":"   75","line":"namespace Impl {"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"template <class ViewType, class Layout, class ExecSpace, typename iType>"},
{"lineNum":"   78","line":"struct ViewFill<ViewType, Layout, ExecSpace, 0, iType> {"},
{"lineNum":"   79","line":"  using ST = typename ViewType::non_const_value_type;"},
{"lineNum":"   80","line":"  ViewFill(const ViewType& a, const ST& val, const ExecSpace& space) {"},
{"lineNum":"   81","line":"    Kokkos::Impl::DeepCopy<typename ViewType::memory_space, Kokkos::HostSpace,"},
{"lineNum":"   82","line":"                           ExecSpace>(space, a.data(), &val, sizeof(ST));"},
{"lineNum":"   83","line":"  }"},
{"lineNum":"   84","line":"};"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"template <class ViewType, class Layout, class ExecSpace, typename iType>"},
{"lineNum":"   87","line":"struct ViewFill<ViewType, Layout, ExecSpace, 1, iType> {"},
{"lineNum":"   88","line":"  ViewType a;"},
{"lineNum":"   89","line":"  typename ViewType::const_value_type val;"},
{"lineNum":"   90","line":"  using policy_type = Kokkos::RangePolicy<ExecSpace, Kokkos::IndexType<iType>>;"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"  ViewFill(const ViewType& a_, typename ViewType::const_value_type& val_,"},
{"lineNum":"   93","line":"           const ExecSpace& space)"},
{"lineNum":"   94","line":"      : a(a_), val(val_) {"},
{"lineNum":"   95","line":"    Kokkos::parallel_for(\"Kokkos::ViewFill-1D\","},
{"lineNum":"   96","line":"                         policy_type(space, 0, a.extent(0)), *this);"},
{"lineNum":"   97","line":"  }"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  100","line":"  void operator()(const iType& i) const { a(i) = val; };"},
{"lineNum":"  101","line":"};"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"template <class ViewType, class Layout, class ExecSpace, typename iType>"},
{"lineNum":"  104","line":"struct ViewFill<ViewType, Layout, ExecSpace, 2, iType> {"},
{"lineNum":"  105","line":"  ViewType a;"},
{"lineNum":"  106","line":"  typename ViewType::const_value_type val;"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"  using iterate_type = Kokkos::Rank<2, ViewFillLayoutSelector<Layout>::iterate,"},
{"lineNum":"  109","line":"                                    ViewFillLayoutSelector<Layout>::iterate>;"},
{"lineNum":"  110","line":"  using policy_type ="},
{"lineNum":"  111","line":"      Kokkos::MDRangePolicy<ExecSpace, iterate_type, Kokkos::IndexType<iType>>;"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"  ViewFill(const ViewType& a_, typename ViewType::const_value_type& val_,"},
{"lineNum":"  114","line":"           const ExecSpace& space)"},
{"lineNum":"  115","line":"      : a(a_), val(val_) {"},
{"lineNum":"  116","line":"    Kokkos::parallel_for(\"Kokkos::ViewFill-2D\","},
{"lineNum":"  117","line":"                         policy_type(space, {0, 0}, {a.extent(0), a.extent(1)}),"},
{"lineNum":"  118","line":"                         *this);"},
{"lineNum":"  119","line":"  }"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  122","line":"  void operator()(const iType& i0, const iType& i1) const { a(i0, i1) = val; };"},
{"lineNum":"  123","line":"};"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"template <class ViewType, class Layout, class ExecSpace, typename iType>"},
{"lineNum":"  126","line":"struct ViewFill<ViewType, Layout, ExecSpace, 3, iType> {"},
{"lineNum":"  127","line":"  ViewType a;"},
{"lineNum":"  128","line":"  typename ViewType::const_value_type val;"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"  using iterate_type = Kokkos::Rank<3, ViewFillLayoutSelector<Layout>::iterate,"},
{"lineNum":"  131","line":"                                    ViewFillLayoutSelector<Layout>::iterate>;"},
{"lineNum":"  132","line":"  using policy_type ="},
{"lineNum":"  133","line":"      Kokkos::MDRangePolicy<ExecSpace, iterate_type, Kokkos::IndexType<iType>>;"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"  ViewFill(const ViewType& a_, typename ViewType::const_value_type& val_,"},
{"lineNum":"  136","line":"           const ExecSpace& space)"},
{"lineNum":"  137","line":"      : a(a_), val(val_) {"},
{"lineNum":"  138","line":"    Kokkos::parallel_for("},
{"lineNum":"  139","line":"        \"Kokkos::ViewFill-3D\","},
{"lineNum":"  140","line":"        policy_type(space, {0, 0, 0}, {a.extent(0), a.extent(1), a.extent(2)}),"},
{"lineNum":"  141","line":"        *this);"},
{"lineNum":"  142","line":"  }"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  145","line":"  void operator()(const iType& i0, const iType& i1, const iType& i2) const {"},
{"lineNum":"  146","line":"    a(i0, i1, i2) = val;"},
{"lineNum":"  147","line":"  };"},
{"lineNum":"  148","line":"};"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"template <class ViewType, class Layout, class ExecSpace, typename iType>"},
{"lineNum":"  151","line":"struct ViewFill<ViewType, Layout, ExecSpace, 4, iType> {"},
{"lineNum":"  152","line":"  ViewType a;"},
{"lineNum":"  153","line":"  typename ViewType::const_value_type val;"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"  using iterate_type = Kokkos::Rank<4, ViewFillLayoutSelector<Layout>::iterate,"},
{"lineNum":"  156","line":"                                    ViewFillLayoutSelector<Layout>::iterate>;"},
{"lineNum":"  157","line":"  using policy_type ="},
{"lineNum":"  158","line":"      Kokkos::MDRangePolicy<ExecSpace, iterate_type, Kokkos::IndexType<iType>>;"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"  ViewFill(const ViewType& a_, typename ViewType::const_value_type& val_,"},
{"lineNum":"  161","line":"           const ExecSpace& space)"},
{"lineNum":"  162","line":"      : a(a_), val(val_) {"},
{"lineNum":"  163","line":"    Kokkos::parallel_for("},
{"lineNum":"  164","line":"        \"Kokkos::ViewFill-4D\","},
{"lineNum":"  165","line":"        policy_type(space, {0, 0, 0, 0},"},
{"lineNum":"  166","line":"                    {a.extent(0), a.extent(1), a.extent(2), a.extent(3)}),"},
{"lineNum":"  167","line":"        *this);"},
{"lineNum":"  168","line":"  }"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  171","line":"  void operator()(const iType& i0, const iType& i1, const iType& i2,"},
{"lineNum":"  172","line":"                  const iType& i3) const {"},
{"lineNum":"  173","line":"    a(i0, i1, i2, i3) = val;"},
{"lineNum":"  174","line":"  };"},
{"lineNum":"  175","line":"};"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"template <class ViewType, class Layout, class ExecSpace, typename iType>"},
{"lineNum":"  178","line":"struct ViewFill<ViewType, Layout, ExecSpace, 5, iType> {"},
{"lineNum":"  179","line":"  ViewType a;"},
{"lineNum":"  180","line":"  typename ViewType::const_value_type val;"},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"  using iterate_type = Kokkos::Rank<5, ViewFillLayoutSelector<Layout>::iterate,"},
{"lineNum":"  183","line":"                                    ViewFillLayoutSelector<Layout>::iterate>;"},
{"lineNum":"  184","line":"  using policy_type ="},
{"lineNum":"  185","line":"      Kokkos::MDRangePolicy<ExecSpace, iterate_type, Kokkos::IndexType<iType>>;"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"  ViewFill(const ViewType& a_, typename ViewType::const_value_type& val_,"},
{"lineNum":"  188","line":"           const ExecSpace& space)"},
{"lineNum":"  189","line":"      : a(a_), val(val_) {"},
{"lineNum":"  190","line":"    Kokkos::parallel_for(\"Kokkos::ViewFill-5D\","},
{"lineNum":"  191","line":"                         policy_type(space, {0, 0, 0, 0, 0},"},
{"lineNum":"  192","line":"                                     {a.extent(0), a.extent(1), a.extent(2),"},
{"lineNum":"  193","line":"                                      a.extent(3), a.extent(4)}),"},
{"lineNum":"  194","line":"                         *this);"},
{"lineNum":"  195","line":"  }"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  198","line":"  void operator()(const iType& i0, const iType& i1, const iType& i2,"},
{"lineNum":"  199","line":"                  const iType& i3, const iType& i4) const {"},
{"lineNum":"  200","line":"    a(i0, i1, i2, i3, i4) = val;"},
{"lineNum":"  201","line":"  };"},
{"lineNum":"  202","line":"};"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"template <class ViewType, class Layout, class ExecSpace, typename iType>"},
{"lineNum":"  205","line":"struct ViewFill<ViewType, Layout, ExecSpace, 6, iType> {"},
{"lineNum":"  206","line":"  ViewType a;"},
{"lineNum":"  207","line":"  typename ViewType::const_value_type val;"},
{"lineNum":"  208","line":""},
{"lineNum":"  209","line":"  using iterate_type = Kokkos::Rank<6, ViewFillLayoutSelector<Layout>::iterate,"},
{"lineNum":"  210","line":"                                    ViewFillLayoutSelector<Layout>::iterate>;"},
{"lineNum":"  211","line":"  using policy_type ="},
{"lineNum":"  212","line":"      Kokkos::MDRangePolicy<ExecSpace, iterate_type, Kokkos::IndexType<iType>>;"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"  ViewFill(const ViewType& a_, typename ViewType::const_value_type& val_,"},
{"lineNum":"  215","line":"           const ExecSpace& space)"},
{"lineNum":"  216","line":"      : a(a_), val(val_) {"},
{"lineNum":"  217","line":"    Kokkos::parallel_for(\"Kokkos::ViewFill-6D\","},
{"lineNum":"  218","line":"                         policy_type(space, {0, 0, 0, 0, 0, 0},"},
{"lineNum":"  219","line":"                                     {a.extent(0), a.extent(1), a.extent(2),"},
{"lineNum":"  220","line":"                                      a.extent(3), a.extent(4), a.extent(5)}),"},
{"lineNum":"  221","line":"                         *this);"},
{"lineNum":"  222","line":"  }"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  225","line":"  void operator()(const iType& i0, const iType& i1, const iType& i2,"},
{"lineNum":"  226","line":"                  const iType& i3, const iType& i4, const iType& i5) const {"},
{"lineNum":"  227","line":"    a(i0, i1, i2, i3, i4, i5) = val;"},
{"lineNum":"  228","line":"  };"},
{"lineNum":"  229","line":"};"},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"template <class ViewType, class Layout, class ExecSpace, typename iType>"},
{"lineNum":"  232","line":"struct ViewFill<ViewType, Layout, ExecSpace, 7, iType> {"},
{"lineNum":"  233","line":"  ViewType a;"},
{"lineNum":"  234","line":"  typename ViewType::const_value_type val;"},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":"  using iterate_type = Kokkos::Rank<6, ViewFillLayoutSelector<Layout>::iterate,"},
{"lineNum":"  237","line":"                                    ViewFillLayoutSelector<Layout>::iterate>;"},
{"lineNum":"  238","line":"  using policy_type ="},
{"lineNum":"  239","line":"      Kokkos::MDRangePolicy<ExecSpace, iterate_type, Kokkos::IndexType<iType>>;"},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"  ViewFill(const ViewType& a_, typename ViewType::const_value_type& val_,"},
{"lineNum":"  242","line":"           const ExecSpace& space)"},
{"lineNum":"  243","line":"      : a(a_), val(val_) {"},
{"lineNum":"  244","line":"    Kokkos::parallel_for(\"Kokkos::ViewFill-7D\","},
{"lineNum":"  245","line":"                         policy_type(space, {0, 0, 0, 0, 0, 0},"},
{"lineNum":"  246","line":"                                     {a.extent(0), a.extent(1), a.extent(2),"},
{"lineNum":"  247","line":"                                      a.extent(3), a.extent(5), a.extent(6)}),"},
{"lineNum":"  248","line":"                         *this);"},
{"lineNum":"  249","line":"  }"},
{"lineNum":"  250","line":""},
{"lineNum":"  251","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  252","line":"  void operator()(const iType& i0, const iType& i1, const iType& i3,"},
{"lineNum":"  253","line":"                  const iType& i4, const iType& i5, const iType& i6) const {"},
{"lineNum":"  254","line":"    for (iType i2 = 0; i2 < iType(a.extent(2)); i2++)"},
{"lineNum":"  255","line":"      a(i0, i1, i2, i3, i4, i5, i6) = val;"},
{"lineNum":"  256","line":"  };"},
{"lineNum":"  257","line":"};"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"template <class ViewType, class Layout, class ExecSpace, typename iType>"},
{"lineNum":"  260","line":"struct ViewFill<ViewType, Layout, ExecSpace, 8, iType> {"},
{"lineNum":"  261","line":"  ViewType a;"},
{"lineNum":"  262","line":"  typename ViewType::const_value_type val;"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"  using iterate_type = Kokkos::Rank<6, ViewFillLayoutSelector<Layout>::iterate,"},
{"lineNum":"  265","line":"                                    ViewFillLayoutSelector<Layout>::iterate>;"},
{"lineNum":"  266","line":"  using policy_type ="},
{"lineNum":"  267","line":"      Kokkos::MDRangePolicy<ExecSpace, iterate_type, Kokkos::IndexType<iType>>;"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"  ViewFill(const ViewType& a_, typename ViewType::const_value_type& val_,"},
{"lineNum":"  270","line":"           const ExecSpace& space)"},
{"lineNum":"  271","line":"      : a(a_), val(val_) {"},
{"lineNum":"  272","line":"    Kokkos::parallel_for(\"Kokkos::ViewFill-8D\","},
{"lineNum":"  273","line":"                         policy_type(space, {0, 0, 0, 0, 0, 0},"},
{"lineNum":"  274","line":"                                     {a.extent(0), a.extent(1), a.extent(3),"},
{"lineNum":"  275","line":"                                      a.extent(5), a.extent(6), a.extent(7)}),"},
{"lineNum":"  276","line":"                         *this);"},
{"lineNum":"  277","line":"  }"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  280","line":"  void operator()(const iType& i0, const iType& i1, const iType& i3,"},
{"lineNum":"  281","line":"                  const iType& i5, const iType& i6, const iType& i7) const {"},
{"lineNum":"  282","line":"    for (iType i2 = 0; i2 < iType(a.extent(2)); i2++)"},
{"lineNum":"  283","line":"      for (iType i4 = 0; i4 < iType(a.extent(4)); i4++)"},
{"lineNum":"  284","line":"        a(i0, i1, i2, i3, i4, i5, i6, i7) = val;"},
{"lineNum":"  285","line":"  };"},
{"lineNum":"  286","line":"};"},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"template <class ViewTypeA, class ViewTypeB, class Layout, class ExecSpace,"},
{"lineNum":"  289","line":"          typename iType>"},
{"lineNum":"  290","line":"struct ViewCopy<ViewTypeA, ViewTypeB, Layout, ExecSpace, 1, iType> {"},
{"lineNum":"  291","line":"  ViewTypeA a;"},
{"lineNum":"  292","line":"  ViewTypeB b;"},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"  using policy_type = Kokkos::RangePolicy<ExecSpace, Kokkos::IndexType<iType>>;"},
{"lineNum":"  295","line":"  using value_type  = typename ViewTypeA::value_type;"},
{"lineNum":"  296","line":""},
{"lineNum":"  297","line":"  ViewCopy(const ViewTypeA& a_, const ViewTypeB& b_,"},
{"lineNum":"  298","line":"           const ExecSpace space = ExecSpace())"},
{"lineNum":"  299","line":"      : a(a_), b(b_) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  300","line":"    Kokkos::parallel_for(\"Kokkos::ViewCopy-1D\","},
{"lineNum":"  301","line":"                         policy_type(space, 0, a.extent(0)), *this);"},
{"lineNum":"  302","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  303","line":""},
{"lineNum":"  304","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  305","line":"  void operator()(const iType& i0) const {"},
{"lineNum":"  306","line":"    a(i0) = static_cast<value_type>(b(i0));","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"  307","line":"  };"},
{"lineNum":"  308","line":"};"},
{"lineNum":"  309","line":""},
{"lineNum":"  310","line":"template <class ViewTypeA, class ViewTypeB, class Layout, class ExecSpace,"},
{"lineNum":"  311","line":"          typename iType>"},
{"lineNum":"  312","line":"struct ViewCopy<ViewTypeA, ViewTypeB, Layout, ExecSpace, 2, iType> {"},
{"lineNum":"  313","line":"  ViewTypeA a;"},
{"lineNum":"  314","line":"  ViewTypeB b;"},
{"lineNum":"  315","line":"  static const Kokkos::Iterate outer_iteration_pattern ="},
{"lineNum":"  316","line":"      Kokkos::layout_iterate_type_selector<Layout>::outer_iteration_pattern;"},
{"lineNum":"  317","line":"  static const Kokkos::Iterate inner_iteration_pattern ="},
{"lineNum":"  318","line":"      Kokkos::layout_iterate_type_selector<Layout>::inner_iteration_pattern;"},
{"lineNum":"  319","line":"  using iterate_type ="},
{"lineNum":"  320","line":"      Kokkos::Rank<2, outer_iteration_pattern, inner_iteration_pattern>;"},
{"lineNum":"  321","line":"  using policy_type ="},
{"lineNum":"  322","line":"      Kokkos::MDRangePolicy<ExecSpace, iterate_type, Kokkos::IndexType<iType>>;"},
{"lineNum":"  323","line":"  using value_type = typename ViewTypeA::value_type;"},
{"lineNum":"  324","line":""},
{"lineNum":"  325","line":"  ViewCopy(const ViewTypeA& a_, const ViewTypeB& b_,"},
{"lineNum":"  326","line":"           const ExecSpace space = ExecSpace())"},
{"lineNum":"  327","line":"      : a(a_), b(b_) {","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  328","line":"    Kokkos::parallel_for(\"Kokkos::ViewCopy-2D\",","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  329","line":"                         policy_type(space, {0, 0}, {a.extent(0), a.extent(1)}),","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  330","line":"                         *this);"},
{"lineNum":"  331","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"26",},
{"lineNum":"  332","line":""},
{"lineNum":"  333","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  334","line":"  void operator()(const iType& i0, const iType& i1) const {"},
{"lineNum":"  335","line":"    a(i0, i1) = static_cast<value_type>(b(i0, i1));","class":"lineNoCov","hits":"0","possible_hits":"126",},
{"lineNum":"  336","line":"  };"},
{"lineNum":"  337","line":"};"},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"template <class ViewTypeA, class ViewTypeB, class Layout, class ExecSpace,"},
{"lineNum":"  340","line":"          typename iType>"},
{"lineNum":"  341","line":"struct ViewCopy<ViewTypeA, ViewTypeB, Layout, ExecSpace, 3, iType> {"},
{"lineNum":"  342","line":"  ViewTypeA a;"},
{"lineNum":"  343","line":"  ViewTypeB b;"},
{"lineNum":"  344","line":""},
{"lineNum":"  345","line":"  static const Kokkos::Iterate outer_iteration_pattern ="},
{"lineNum":"  346","line":"      Kokkos::layout_iterate_type_selector<Layout>::outer_iteration_pattern;"},
{"lineNum":"  347","line":"  static const Kokkos::Iterate inner_iteration_pattern ="},
{"lineNum":"  348","line":"      Kokkos::layout_iterate_type_selector<Layout>::inner_iteration_pattern;"},
{"lineNum":"  349","line":"  using iterate_type ="},
{"lineNum":"  350","line":"      Kokkos::Rank<3, outer_iteration_pattern, inner_iteration_pattern>;"},
{"lineNum":"  351","line":"  using policy_type ="},
{"lineNum":"  352","line":"      Kokkos::MDRangePolicy<ExecSpace, iterate_type, Kokkos::IndexType<iType>>;"},
{"lineNum":"  353","line":"  using value_type = typename ViewTypeA::value_type;"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"  ViewCopy(const ViewTypeA& a_, const ViewTypeB& b_,"},
{"lineNum":"  356","line":"           const ExecSpace space = ExecSpace())"},
{"lineNum":"  357","line":"      : a(a_), b(b_) {"},
{"lineNum":"  358","line":"    Kokkos::parallel_for("},
{"lineNum":"  359","line":"        \"Kokkos::ViewCopy-3D\","},
{"lineNum":"  360","line":"        policy_type(space, {0, 0, 0}, {a.extent(0), a.extent(1), a.extent(2)}),"},
{"lineNum":"  361","line":"        *this);"},
{"lineNum":"  362","line":"  }"},
{"lineNum":"  363","line":""},
{"lineNum":"  364","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  365","line":"  void operator()(const iType& i0, const iType& i1, const iType& i2) const {"},
{"lineNum":"  366","line":"    a(i0, i1, i2) = static_cast<value_type>(b(i0, i1, i2));"},
{"lineNum":"  367","line":"  };"},
{"lineNum":"  368","line":"};"},
{"lineNum":"  369","line":""},
{"lineNum":"  370","line":"template <class ViewTypeA, class ViewTypeB, class Layout, class ExecSpace,"},
{"lineNum":"  371","line":"          typename iType>"},
{"lineNum":"  372","line":"struct ViewCopy<ViewTypeA, ViewTypeB, Layout, ExecSpace, 4, iType> {"},
{"lineNum":"  373","line":"  ViewTypeA a;"},
{"lineNum":"  374","line":"  ViewTypeB b;"},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"  static const Kokkos::Iterate outer_iteration_pattern ="},
{"lineNum":"  377","line":"      Kokkos::layout_iterate_type_selector<Layout>::outer_iteration_pattern;"},
{"lineNum":"  378","line":"  static const Kokkos::Iterate inner_iteration_pattern ="},
{"lineNum":"  379","line":"      Kokkos::layout_iterate_type_selector<Layout>::inner_iteration_pattern;"},
{"lineNum":"  380","line":"  using iterate_type ="},
{"lineNum":"  381","line":"      Kokkos::Rank<4, outer_iteration_pattern, inner_iteration_pattern>;"},
{"lineNum":"  382","line":"  using policy_type ="},
{"lineNum":"  383","line":"      Kokkos::MDRangePolicy<ExecSpace, iterate_type, Kokkos::IndexType<iType>>;"},
{"lineNum":"  384","line":""},
{"lineNum":"  385","line":"  ViewCopy(const ViewTypeA& a_, const ViewTypeB& b_,"},
{"lineNum":"  386","line":"           const ExecSpace space = ExecSpace())"},
{"lineNum":"  387","line":"      : a(a_), b(b_) {"},
{"lineNum":"  388","line":"    Kokkos::parallel_for("},
{"lineNum":"  389","line":"        \"Kokkos::ViewCopy-4D\","},
{"lineNum":"  390","line":"        policy_type(space, {0, 0, 0, 0},"},
{"lineNum":"  391","line":"                    {a.extent(0), a.extent(1), a.extent(2), a.extent(3)}),"},
{"lineNum":"  392","line":"        *this);"},
{"lineNum":"  393","line":"  }"},
{"lineNum":"  394","line":""},
{"lineNum":"  395","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  396","line":"  void operator()(const iType& i0, const iType& i1, const iType& i2,"},
{"lineNum":"  397","line":"                  const iType& i3) const {"},
{"lineNum":"  398","line":"    a(i0, i1, i2, i3) = b(i0, i1, i2, i3);"},
{"lineNum":"  399","line":"  };"},
{"lineNum":"  400","line":"};"},
{"lineNum":"  401","line":""},
{"lineNum":"  402","line":"template <class ViewTypeA, class ViewTypeB, class Layout, class ExecSpace,"},
{"lineNum":"  403","line":"          typename iType>"},
{"lineNum":"  404","line":"struct ViewCopy<ViewTypeA, ViewTypeB, Layout, ExecSpace, 5, iType> {"},
{"lineNum":"  405","line":"  ViewTypeA a;"},
{"lineNum":"  406","line":"  ViewTypeB b;"},
{"lineNum":"  407","line":""},
{"lineNum":"  408","line":"  static const Kokkos::Iterate outer_iteration_pattern ="},
{"lineNum":"  409","line":"      Kokkos::layout_iterate_type_selector<Layout>::outer_iteration_pattern;"},
{"lineNum":"  410","line":"  static const Kokkos::Iterate inner_iteration_pattern ="},
{"lineNum":"  411","line":"      Kokkos::layout_iterate_type_selector<Layout>::inner_iteration_pattern;"},
{"lineNum":"  412","line":"  using iterate_type ="},
{"lineNum":"  413","line":"      Kokkos::Rank<5, outer_iteration_pattern, inner_iteration_pattern>;"},
{"lineNum":"  414","line":"  using policy_type ="},
{"lineNum":"  415","line":"      Kokkos::MDRangePolicy<ExecSpace, iterate_type, Kokkos::IndexType<iType>>;"},
{"lineNum":"  416","line":""},
{"lineNum":"  417","line":"  ViewCopy(const ViewTypeA& a_, const ViewTypeB& b_,"},
{"lineNum":"  418","line":"           const ExecSpace space = ExecSpace())"},
{"lineNum":"  419","line":"      : a(a_), b(b_) {"},
{"lineNum":"  420","line":"    Kokkos::parallel_for(\"Kokkos::ViewCopy-5D\","},
{"lineNum":"  421","line":"                         policy_type(space, {0, 0, 0, 0, 0},"},
{"lineNum":"  422","line":"                                     {a.extent(0), a.extent(1), a.extent(2),"},
{"lineNum":"  423","line":"                                      a.extent(3), a.extent(4)}),"},
{"lineNum":"  424","line":"                         *this);"},
{"lineNum":"  425","line":"  }"},
{"lineNum":"  426","line":""},
{"lineNum":"  427","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  428","line":"  void operator()(const iType& i0, const iType& i1, const iType& i2,"},
{"lineNum":"  429","line":"                  const iType& i3, const iType& i4) const {"},
{"lineNum":"  430","line":"    a(i0, i1, i2, i3, i4) = b(i0, i1, i2, i3, i4);"},
{"lineNum":"  431","line":"  };"},
{"lineNum":"  432","line":"};"},
{"lineNum":"  433","line":""},
{"lineNum":"  434","line":"template <class ViewTypeA, class ViewTypeB, class Layout, class ExecSpace,"},
{"lineNum":"  435","line":"          typename iType>"},
{"lineNum":"  436","line":"struct ViewCopy<ViewTypeA, ViewTypeB, Layout, ExecSpace, 6, iType> {"},
{"lineNum":"  437","line":"  ViewTypeA a;"},
{"lineNum":"  438","line":"  ViewTypeB b;"},
{"lineNum":"  439","line":""},
{"lineNum":"  440","line":"  static const Kokkos::Iterate outer_iteration_pattern ="},
{"lineNum":"  441","line":"      Kokkos::layout_iterate_type_selector<Layout>::outer_iteration_pattern;"},
{"lineNum":"  442","line":"  static const Kokkos::Iterate inner_iteration_pattern ="},
{"lineNum":"  443","line":"      Kokkos::layout_iterate_type_selector<Layout>::inner_iteration_pattern;"},
{"lineNum":"  444","line":"  using iterate_type ="},
{"lineNum":"  445","line":"      Kokkos::Rank<6, outer_iteration_pattern, inner_iteration_pattern>;"},
{"lineNum":"  446","line":"  using policy_type ="},
{"lineNum":"  447","line":"      Kokkos::MDRangePolicy<ExecSpace, iterate_type, Kokkos::IndexType<iType>>;"},
{"lineNum":"  448","line":""},
{"lineNum":"  449","line":"  ViewCopy(const ViewTypeA& a_, const ViewTypeB& b_,"},
{"lineNum":"  450","line":"           const ExecSpace space = ExecSpace())"},
{"lineNum":"  451","line":"      : a(a_), b(b_) {"},
{"lineNum":"  452","line":"    Kokkos::parallel_for(\"Kokkos::ViewCopy-6D\","},
{"lineNum":"  453","line":"                         policy_type(space, {0, 0, 0, 0, 0, 0},"},
{"lineNum":"  454","line":"                                     {a.extent(0), a.extent(1), a.extent(2),"},
{"lineNum":"  455","line":"                                      a.extent(3), a.extent(4), a.extent(5)}),"},
{"lineNum":"  456","line":"                         *this);"},
{"lineNum":"  457","line":"  }"},
{"lineNum":"  458","line":""},
{"lineNum":"  459","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  460","line":"  void operator()(const iType& i0, const iType& i1, const iType& i2,"},
{"lineNum":"  461","line":"                  const iType& i3, const iType& i4, const iType& i5) const {"},
{"lineNum":"  462","line":"    a(i0, i1, i2, i3, i4, i5) = b(i0, i1, i2, i3, i4, i5);"},
{"lineNum":"  463","line":"  };"},
{"lineNum":"  464","line":"};"},
{"lineNum":"  465","line":""},
{"lineNum":"  466","line":"template <class ViewTypeA, class ViewTypeB, class Layout, class ExecSpace,"},
{"lineNum":"  467","line":"          typename iType>"},
{"lineNum":"  468","line":"struct ViewCopy<ViewTypeA, ViewTypeB, Layout, ExecSpace, 7, iType> {"},
{"lineNum":"  469","line":"  ViewTypeA a;"},
{"lineNum":"  470","line":"  ViewTypeB b;"},
{"lineNum":"  471","line":""},
{"lineNum":"  472","line":"  static const Kokkos::Iterate outer_iteration_pattern ="},
{"lineNum":"  473","line":"      Kokkos::layout_iterate_type_selector<Layout>::outer_iteration_pattern;"},
{"lineNum":"  474","line":"  static const Kokkos::Iterate inner_iteration_pattern ="},
{"lineNum":"  475","line":"      Kokkos::layout_iterate_type_selector<Layout>::inner_iteration_pattern;"},
{"lineNum":"  476","line":"  using iterate_type ="},
{"lineNum":"  477","line":"      Kokkos::Rank<6, outer_iteration_pattern, inner_iteration_pattern>;"},
{"lineNum":"  478","line":"  using policy_type ="},
{"lineNum":"  479","line":"      Kokkos::MDRangePolicy<ExecSpace, iterate_type, Kokkos::IndexType<iType>>;"},
{"lineNum":"  480","line":""},
{"lineNum":"  481","line":"  ViewCopy(const ViewTypeA& a_, const ViewTypeB& b_,"},
{"lineNum":"  482","line":"           const ExecSpace space = ExecSpace())"},
{"lineNum":"  483","line":"      : a(a_), b(b_) {"},
{"lineNum":"  484","line":"    Kokkos::parallel_for(\"Kokkos::ViewCopy-7D\","},
{"lineNum":"  485","line":"                         policy_type(space, {0, 0, 0, 0, 0, 0},"},
{"lineNum":"  486","line":"                                     {a.extent(0), a.extent(1), a.extent(3),"},
{"lineNum":"  487","line":"                                      a.extent(4), a.extent(5), a.extent(6)}),"},
{"lineNum":"  488","line":"                         *this);"},
{"lineNum":"  489","line":"  }"},
{"lineNum":"  490","line":""},
{"lineNum":"  491","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  492","line":"  void operator()(const iType& i0, const iType& i1, const iType& i3,"},
{"lineNum":"  493","line":"                  const iType& i4, const iType& i5, const iType& i6) const {"},
{"lineNum":"  494","line":"    for (iType i2 = 0; i2 < iType(a.extent(2)); i2++)"},
{"lineNum":"  495","line":"      a(i0, i1, i2, i3, i4, i5, i6) = b(i0, i1, i2, i3, i4, i5, i6);"},
{"lineNum":"  496","line":"  };"},
{"lineNum":"  497","line":"};"},
{"lineNum":"  498","line":""},
{"lineNum":"  499","line":"template <class ViewTypeA, class ViewTypeB, class Layout, class ExecSpace,"},
{"lineNum":"  500","line":"          typename iType>"},
{"lineNum":"  501","line":"struct ViewCopy<ViewTypeA, ViewTypeB, Layout, ExecSpace, 8, iType> {"},
{"lineNum":"  502","line":"  ViewTypeA a;"},
{"lineNum":"  503","line":"  ViewTypeB b;"},
{"lineNum":"  504","line":""},
{"lineNum":"  505","line":"  static const Kokkos::Iterate outer_iteration_pattern ="},
{"lineNum":"  506","line":"      Kokkos::layout_iterate_type_selector<Layout>::outer_iteration_pattern;"},
{"lineNum":"  507","line":"  static const Kokkos::Iterate inner_iteration_pattern ="},
{"lineNum":"  508","line":"      Kokkos::layout_iterate_type_selector<Layout>::inner_iteration_pattern;"},
{"lineNum":"  509","line":"  using iterate_type ="},
{"lineNum":"  510","line":"      Kokkos::Rank<6, outer_iteration_pattern, inner_iteration_pattern>;"},
{"lineNum":"  511","line":"  using policy_type ="},
{"lineNum":"  512","line":"      Kokkos::MDRangePolicy<ExecSpace, iterate_type, Kokkos::IndexType<iType>>;"},
{"lineNum":"  513","line":""},
{"lineNum":"  514","line":"  ViewCopy(const ViewTypeA& a_, const ViewTypeB& b_,"},
{"lineNum":"  515","line":"           const ExecSpace space = ExecSpace())"},
{"lineNum":"  516","line":"      : a(a_), b(b_) {"},
{"lineNum":"  517","line":"    Kokkos::parallel_for(\"Kokkos::ViewCopy-8D\","},
{"lineNum":"  518","line":"                         policy_type(space, {0, 0, 0, 0, 0, 0},"},
{"lineNum":"  519","line":"                                     {a.extent(0), a.extent(1), a.extent(3),"},
{"lineNum":"  520","line":"                                      a.extent(5), a.extent(6), a.extent(7)}),"},
{"lineNum":"  521","line":"                         *this);"},
{"lineNum":"  522","line":"  }"},
{"lineNum":"  523","line":""},
{"lineNum":"  524","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  525","line":"  void operator()(const iType& i0, const iType& i1, const iType& i3,"},
{"lineNum":"  526","line":"                  const iType& i5, const iType& i6, const iType& i7) const {"},
{"lineNum":"  527","line":"    for (iType i2 = 0; i2 < iType(a.extent(2)); i2++)"},
{"lineNum":"  528","line":"      for (iType i4 = 0; i4 < iType(a.extent(4)); i4++)"},
{"lineNum":"  529","line":"        a(i0, i1, i2, i3, i4, i5, i6, i7) = b(i0, i1, i2, i3, i4, i5, i6, i7);"},
{"lineNum":"  530","line":"  };"},
{"lineNum":"  531","line":"};"},
{"lineNum":"  532","line":""},
{"lineNum":"  533","line":"}  // namespace Impl"},
{"lineNum":"  534","line":"}  // namespace Kokkos"},
{"lineNum":"  535","line":""},
{"lineNum":"  536","line":"namespace Kokkos {"},
{"lineNum":"  537","line":"namespace Impl {"},
{"lineNum":"  538","line":""},
{"lineNum":"  539","line":"template <class ExecutionSpace, class DstType, class SrcType>"},
{"lineNum":"  540","line":"void view_copy(const ExecutionSpace& space, const DstType& dst,"},
{"lineNum":"  541","line":"               const SrcType& src) {"},
{"lineNum":"  542","line":"  using dst_memory_space = typename DstType::memory_space;"},
{"lineNum":"  543","line":"  using src_memory_space = typename SrcType::memory_space;"},
{"lineNum":"  544","line":""},
{"lineNum":"  545","line":"  enum {"},
{"lineNum":"  546","line":"    ExecCanAccessSrc ="},
{"lineNum":"  547","line":"        Kokkos::Impl::SpaceAccessibility<ExecutionSpace,"},
{"lineNum":"  548","line":"                                         src_memory_space>::accessible"},
{"lineNum":"  549","line":"  };"},
{"lineNum":"  550","line":"  enum {"},
{"lineNum":"  551","line":"    ExecCanAccessDst ="},
{"lineNum":"  552","line":"        Kokkos::Impl::SpaceAccessibility<ExecutionSpace,"},
{"lineNum":"  553","line":"                                         dst_memory_space>::accessible"},
{"lineNum":"  554","line":"  };"},
{"lineNum":"  555","line":""},
{"lineNum":"  556","line":"  if (!(ExecCanAccessSrc && ExecCanAccessDst)) {"},
{"lineNum":"  557","line":"    Kokkos::Impl::throw_runtime_exception("},
{"lineNum":"  558","line":"        \"Kokkos::Impl::view_copy called with invalid execution space\");"},
{"lineNum":"  559","line":"  } else {"},
{"lineNum":"  560","line":"    // Figure out iteration order in case we need it"},
{"lineNum":"  561","line":"    int64_t strides[DstType::Rank + 1];"},
{"lineNum":"  562","line":"    dst.stride(strides);"},
{"lineNum":"  563","line":"    Kokkos::Iterate iterate;"},
{"lineNum":"  564","line":"    if (Kokkos::is_layouttiled<typename DstType::array_layout>::value) {"},
{"lineNum":"  565","line":"      iterate = Kokkos::layout_iterate_type_selector<"},
{"lineNum":"  566","line":"          typename DstType::array_layout>::outer_iteration_pattern;"},
{"lineNum":"  567","line":"    } else if (std::is_same<typename DstType::array_layout,"},
{"lineNum":"  568","line":"                            Kokkos::LayoutRight>::value) {"},
{"lineNum":"  569","line":"      iterate = Kokkos::Iterate::Right;"},
{"lineNum":"  570","line":"    } else if (std::is_same<typename DstType::array_layout,"},
{"lineNum":"  571","line":"                            Kokkos::LayoutLeft>::value) {"},
{"lineNum":"  572","line":"      iterate = Kokkos::Iterate::Left;"},
{"lineNum":"  573","line":"    } else if (std::is_same<typename DstType::array_layout,"},
{"lineNum":"  574","line":"                            Kokkos::LayoutStride>::value) {"},
{"lineNum":"  575","line":"      if (strides[0] > strides[DstType::Rank - 1])"},
{"lineNum":"  576","line":"        iterate = Kokkos::Iterate::Right;"},
{"lineNum":"  577","line":"      else"},
{"lineNum":"  578","line":"        iterate = Kokkos::Iterate::Left;"},
{"lineNum":"  579","line":"    } else {"},
{"lineNum":"  580","line":"      if (std::is_same<typename DstType::execution_space::array_layout,"},
{"lineNum":"  581","line":"                       Kokkos::LayoutRight>::value)"},
{"lineNum":"  582","line":"        iterate = Kokkos::Iterate::Right;"},
{"lineNum":"  583","line":"      else"},
{"lineNum":"  584","line":"        iterate = Kokkos::Iterate::Left;"},
{"lineNum":"  585","line":"    }"},
{"lineNum":"  586","line":""},
{"lineNum":"  587","line":"    if ((dst.span() >= size_t(std::numeric_limits<int>::max())) ||"},
{"lineNum":"  588","line":"        (src.span() >= size_t(std::numeric_limits<int>::max()))) {"},
{"lineNum":"  589","line":"      if (iterate == Kokkos::Iterate::Right)"},
{"lineNum":"  590","line":"        Kokkos::Impl::ViewCopy<"},
{"lineNum":"  591","line":"            typename DstType::uniform_runtime_nomemspace_type,"},
{"lineNum":"  592","line":"            typename SrcType::uniform_runtime_const_nomemspace_type,"},
{"lineNum":"  593","line":"            Kokkos::LayoutRight, ExecutionSpace, DstType::Rank, int64_t>("},
{"lineNum":"  594","line":"            dst, src, space);"},
{"lineNum":"  595","line":"      else"},
{"lineNum":"  596","line":"        Kokkos::Impl::ViewCopy<"},
{"lineNum":"  597","line":"            typename DstType::uniform_runtime_nomemspace_type,"},
{"lineNum":"  598","line":"            typename SrcType::uniform_runtime_const_nomemspace_type,"},
{"lineNum":"  599","line":"            Kokkos::LayoutLeft, ExecutionSpace, DstType::Rank, int64_t>("},
{"lineNum":"  600","line":"            dst, src, space);"},
{"lineNum":"  601","line":"    } else {"},
{"lineNum":"  602","line":"      if (iterate == Kokkos::Iterate::Right)"},
{"lineNum":"  603","line":"        Kokkos::Impl::ViewCopy<"},
{"lineNum":"  604","line":"            typename DstType::uniform_runtime_nomemspace_type,"},
{"lineNum":"  605","line":"            typename SrcType::uniform_runtime_const_nomemspace_type,"},
{"lineNum":"  606","line":"            Kokkos::LayoutRight, ExecutionSpace, DstType::Rank, int>(dst, src,"},
{"lineNum":"  607","line":"                                                                     space);"},
{"lineNum":"  608","line":"      else"},
{"lineNum":"  609","line":"        Kokkos::Impl::ViewCopy<"},
{"lineNum":"  610","line":"            typename DstType::uniform_runtime_nomemspace_type,"},
{"lineNum":"  611","line":"            typename SrcType::uniform_runtime_const_nomemspace_type,"},
{"lineNum":"  612","line":"            Kokkos::LayoutLeft, ExecutionSpace, DstType::Rank, int>(dst, src,"},
{"lineNum":"  613","line":"                                                                    space);"},
{"lineNum":"  614","line":"    }"},
{"lineNum":"  615","line":"  }"},
{"lineNum":"  616","line":"}"},
{"lineNum":"  617","line":""},
{"lineNum":"  618","line":"template <class DstType, class SrcType>"},
{"lineNum":"  619","line":"void view_copy(const DstType& dst, const SrcType& src) {","class":"lineNoCov","hits":"0","possible_hits":"17",},
{"lineNum":"  620","line":"  using dst_execution_space = typename DstType::execution_space;"},
{"lineNum":"  621","line":"  using src_execution_space = typename SrcType::execution_space;"},
{"lineNum":"  622","line":"  using dst_memory_space    = typename DstType::memory_space;"},
{"lineNum":"  623","line":"  using src_memory_space    = typename SrcType::memory_space;"},
{"lineNum":"  624","line":""},
{"lineNum":"  625","line":"  enum {"},
{"lineNum":"  626","line":"    DstExecCanAccessSrc ="},
{"lineNum":"  627","line":"        Kokkos::Impl::SpaceAccessibility<dst_execution_space,"},
{"lineNum":"  628","line":"                                         src_memory_space>::accessible"},
{"lineNum":"  629","line":"  };"},
{"lineNum":"  630","line":""},
{"lineNum":"  631","line":"  enum {"},
{"lineNum":"  632","line":"    SrcExecCanAccessDst ="},
{"lineNum":"  633","line":"        Kokkos::Impl::SpaceAccessibility<src_execution_space,"},
{"lineNum":"  634","line":"                                         dst_memory_space>::accessible"},
{"lineNum":"  635","line":"  };"},
{"lineNum":"  636","line":""},
{"lineNum":"  637","line":"  if (!DstExecCanAccessSrc && !SrcExecCanAccessDst) {"},
{"lineNum":"  638","line":"    std::string message("},
{"lineNum":"  639","line":"        \"Error: Kokkos::deep_copy with no available copy mechanism: \");"},
{"lineNum":"  640","line":"    message += src.label();"},
{"lineNum":"  641","line":"    message += \" to \";"},
{"lineNum":"  642","line":"    message += dst.label();"},
{"lineNum":"  643","line":"    Kokkos::Impl::throw_runtime_exception(message);"},
{"lineNum":"  644","line":"  }"},
{"lineNum":"  645","line":""},
{"lineNum":"  646","line":"  // Figure out iteration order in case we need it"},
{"lineNum":"  647","line":"  int64_t strides[DstType::Rank + 1];"},
{"lineNum":"  648","line":"  dst.stride(strides);"},
{"lineNum":"  649","line":"  Kokkos::Iterate iterate;"},
{"lineNum":"  650","line":"  if (Kokkos::is_layouttiled<typename DstType::array_layout>::value) {"},
{"lineNum":"  651","line":"    iterate = Kokkos::layout_iterate_type_selector<"},
{"lineNum":"  652","line":"        typename DstType::array_layout>::outer_iteration_pattern;"},
{"lineNum":"  653","line":"  } else if (std::is_same<typename DstType::array_layout,"},
{"lineNum":"  654","line":"                          Kokkos::LayoutRight>::value) {"},
{"lineNum":"  655","line":"    iterate = Kokkos::Iterate::Right;"},
{"lineNum":"  656","line":"  } else if (std::is_same<typename DstType::array_layout,"},
{"lineNum":"  657","line":"                          Kokkos::LayoutLeft>::value) {"},
{"lineNum":"  658","line":"    iterate = Kokkos::Iterate::Left;"},
{"lineNum":"  659","line":"  } else if (std::is_same<typename DstType::array_layout,"},
{"lineNum":"  660","line":"                          Kokkos::LayoutStride>::value) {"},
{"lineNum":"  661","line":"    if (strides[0] > strides[DstType::Rank - 1])"},
{"lineNum":"  662","line":"      iterate = Kokkos::Iterate::Right;"},
{"lineNum":"  663","line":"    else"},
{"lineNum":"  664","line":"      iterate = Kokkos::Iterate::Left;"},
{"lineNum":"  665","line":"  } else {"},
{"lineNum":"  666","line":"    if (std::is_same<typename DstType::execution_space::array_layout,"},
{"lineNum":"  667","line":"                     Kokkos::LayoutRight>::value)"},
{"lineNum":"  668","line":"      iterate = Kokkos::Iterate::Right;"},
{"lineNum":"  669","line":"    else"},
{"lineNum":"  670","line":"      iterate = Kokkos::Iterate::Left;"},
{"lineNum":"  671","line":"  }"},
{"lineNum":"  672","line":""},
{"lineNum":"  673","line":"  if ((dst.span() >= size_t(std::numeric_limits<int>::max())) ||","class":"lineNoCov","hits":"0","possible_hits":"34",},
{"lineNum":"  674","line":"      (src.span() >= size_t(std::numeric_limits<int>::max()))) {","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  675","line":"    if (DstExecCanAccessSrc) {"},
{"lineNum":"  676","line":"      if (iterate == Kokkos::Iterate::Right)"},
{"lineNum":"  677","line":"        Kokkos::Impl::ViewCopy<","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  678","line":"            typename DstType::uniform_runtime_nomemspace_type,"},
{"lineNum":"  679","line":"            typename SrcType::uniform_runtime_const_nomemspace_type,"},
{"lineNum":"  680","line":"            Kokkos::LayoutRight, dst_execution_space, DstType::Rank, int64_t>("},
{"lineNum":"  681","line":"            dst, src);"},
{"lineNum":"  682","line":"      else"},
{"lineNum":"  683","line":"        Kokkos::Impl::ViewCopy<","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  684","line":"            typename DstType::uniform_runtime_nomemspace_type,"},
{"lineNum":"  685","line":"            typename SrcType::uniform_runtime_const_nomemspace_type,"},
{"lineNum":"  686","line":"            Kokkos::LayoutLeft, dst_execution_space, DstType::Rank, int64_t>("},
{"lineNum":"  687","line":"            dst, src);"},
{"lineNum":"  688","line":"    } else {"},
{"lineNum":"  689","line":"      if (iterate == Kokkos::Iterate::Right)"},
{"lineNum":"  690","line":"        Kokkos::Impl::ViewCopy<"},
{"lineNum":"  691","line":"            typename DstType::uniform_runtime_nomemspace_type,"},
{"lineNum":"  692","line":"            typename SrcType::uniform_runtime_const_nomemspace_type,"},
{"lineNum":"  693","line":"            Kokkos::LayoutRight, src_execution_space, DstType::Rank, int64_t>("},
{"lineNum":"  694","line":"            dst, src);"},
{"lineNum":"  695","line":"      else"},
{"lineNum":"  696","line":"        Kokkos::Impl::ViewCopy<"},
{"lineNum":"  697","line":"            typename DstType::uniform_runtime_nomemspace_type,"},
{"lineNum":"  698","line":"            typename SrcType::uniform_runtime_const_nomemspace_type,"},
{"lineNum":"  699","line":"            Kokkos::LayoutLeft, src_execution_space, DstType::Rank, int64_t>("},
{"lineNum":"  700","line":"            dst, src);"},
{"lineNum":"  701","line":"    }"},
{"lineNum":"  702","line":"  } else {"},
{"lineNum":"  703","line":"    if (DstExecCanAccessSrc) {"},
{"lineNum":"  704","line":"      if (iterate == Kokkos::Iterate::Right)"},
{"lineNum":"  705","line":"        Kokkos::Impl::ViewCopy<","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  706","line":"            typename DstType::uniform_runtime_nomemspace_type,"},
{"lineNum":"  707","line":"            typename SrcType::uniform_runtime_const_nomemspace_type,"},
{"lineNum":"  708","line":"            Kokkos::LayoutRight, dst_execution_space, DstType::Rank, int>(dst,"},
{"lineNum":"  709","line":"                                                                          src);"},
{"lineNum":"  710","line":"      else"},
{"lineNum":"  711","line":"        Kokkos::Impl::ViewCopy<","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  712","line":"            typename DstType::uniform_runtime_nomemspace_type,"},
{"lineNum":"  713","line":"            typename SrcType::uniform_runtime_const_nomemspace_type,"},
{"lineNum":"  714","line":"            Kokkos::LayoutLeft, dst_execution_space, DstType::Rank, int>(dst,"},
{"lineNum":"  715","line":"                                                                         src);"},
{"lineNum":"  716","line":"    } else {"},
{"lineNum":"  717","line":"      if (iterate == Kokkos::Iterate::Right)"},
{"lineNum":"  718","line":"        Kokkos::Impl::ViewCopy<"},
{"lineNum":"  719","line":"            typename DstType::uniform_runtime_nomemspace_type,"},
{"lineNum":"  720","line":"            typename SrcType::uniform_runtime_const_nomemspace_type,"},
{"lineNum":"  721","line":"            Kokkos::LayoutRight, src_execution_space, DstType::Rank, int>(dst,"},
{"lineNum":"  722","line":"                                                                          src);"},
{"lineNum":"  723","line":"      else"},
{"lineNum":"  724","line":"        Kokkos::Impl::ViewCopy<"},
{"lineNum":"  725","line":"            typename DstType::uniform_runtime_nomemspace_type,"},
{"lineNum":"  726","line":"            typename SrcType::uniform_runtime_const_nomemspace_type,"},
{"lineNum":"  727","line":"            Kokkos::LayoutLeft, src_execution_space, DstType::Rank, int>(dst,"},
{"lineNum":"  728","line":"                                                                         src);"},
{"lineNum":"  729","line":"    }"},
{"lineNum":"  730","line":"  }"},
{"lineNum":"  731","line":"}","class":"lineNoCov","hits":"0","possible_hits":"17",},
{"lineNum":"  732","line":""},
{"lineNum":"  733","line":"template <class DstType, class SrcType, int Rank, class... Args>"},
{"lineNum":"  734","line":"struct CommonSubview;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  735","line":""},
{"lineNum":"  736","line":"template <class DstType, class SrcType, class Arg0, class... Args>"},
{"lineNum":"  737","line":"struct CommonSubview<DstType, SrcType, 1, Arg0, Args...> {"},
{"lineNum":"  738","line":"  using dst_subview_type = typename Kokkos::Subview<DstType, Arg0>;"},
{"lineNum":"  739","line":"  using src_subview_type = typename Kokkos::Subview<SrcType, Arg0>;"},
{"lineNum":"  740","line":"  dst_subview_type dst_sub;"},
{"lineNum":"  741","line":"  src_subview_type src_sub;"},
{"lineNum":"  742","line":"  CommonSubview(const DstType& dst, const SrcType& src, const Arg0& arg0,"},
{"lineNum":"  743","line":"                Args...)"},
{"lineNum":"  744","line":"      : dst_sub(dst, arg0), src_sub(src, arg0) {}"},
{"lineNum":"  745","line":"};"},
{"lineNum":"  746","line":""},
{"lineNum":"  747","line":"template <class DstType, class SrcType, class Arg0, class Arg1, class... Args>"},
{"lineNum":"  748","line":"struct CommonSubview<DstType, SrcType, 2, Arg0, Arg1, Args...> {"},
{"lineNum":"  749","line":"  using dst_subview_type = typename Kokkos::Subview<DstType, Arg0, Arg1>;"},
{"lineNum":"  750","line":"  using src_subview_type = typename Kokkos::Subview<SrcType, Arg0, Arg1>;"},
{"lineNum":"  751","line":"  dst_subview_type dst_sub;"},
{"lineNum":"  752","line":"  src_subview_type src_sub;"},
{"lineNum":"  753","line":"  CommonSubview(const DstType& dst, const SrcType& src, const Arg0& arg0,"},
{"lineNum":"  754","line":"                const Arg1& arg1, Args...)"},
{"lineNum":"  755","line":"      : dst_sub(dst, arg0, arg1), src_sub(src, arg0, arg1) {}","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"  756","line":"};"},
{"lineNum":"  757","line":""},
{"lineNum":"  758","line":"template <class DstType, class SrcType, class Arg0, class Arg1, class Arg2,"},
{"lineNum":"  759","line":"          class... Args>"},
{"lineNum":"  760","line":"struct CommonSubview<DstType, SrcType, 3, Arg0, Arg1, Arg2, Args...> {"},
{"lineNum":"  761","line":"  using dst_subview_type = typename Kokkos::Subview<DstType, Arg0, Arg1, Arg2>;"},
{"lineNum":"  762","line":"  using src_subview_type = typename Kokkos::Subview<SrcType, Arg0, Arg1, Arg2>;"},
{"lineNum":"  763","line":"  dst_subview_type dst_sub;"},
{"lineNum":"  764","line":"  src_subview_type src_sub;"},
{"lineNum":"  765","line":"  CommonSubview(const DstType& dst, const SrcType& src, const Arg0& arg0,"},
{"lineNum":"  766","line":"                const Arg1& arg1, const Arg2& arg2, Args...)"},
{"lineNum":"  767","line":"      : dst_sub(dst, arg0, arg1, arg2), src_sub(src, arg0, arg1, arg2) {}"},
{"lineNum":"  768","line":"};"},
{"lineNum":"  769","line":""},
{"lineNum":"  770","line":"template <class DstType, class SrcType, class Arg0, class Arg1, class Arg2,"},
{"lineNum":"  771","line":"          class Arg3, class... Args>"},
{"lineNum":"  772","line":"struct CommonSubview<DstType, SrcType, 4, Arg0, Arg1, Arg2, Arg3, Args...> {"},
{"lineNum":"  773","line":"  using dst_subview_type ="},
{"lineNum":"  774","line":"      typename Kokkos::Subview<DstType, Arg0, Arg1, Arg2, Arg3>;"},
{"lineNum":"  775","line":"  using src_subview_type ="},
{"lineNum":"  776","line":"      typename Kokkos::Subview<SrcType, Arg0, Arg1, Arg2, Arg3>;"},
{"lineNum":"  777","line":"  dst_subview_type dst_sub;"},
{"lineNum":"  778","line":"  src_subview_type src_sub;"},
{"lineNum":"  779","line":"  CommonSubview(const DstType& dst, const SrcType& src, const Arg0& arg0,"},
{"lineNum":"  780","line":"                const Arg1& arg1, const Arg2& arg2, const Arg3& arg3,"},
{"lineNum":"  781","line":"                const Args...)"},
{"lineNum":"  782","line":"      : dst_sub(dst, arg0, arg1, arg2, arg3),"},
{"lineNum":"  783","line":"        src_sub(src, arg0, arg1, arg2, arg3) {}"},
{"lineNum":"  784","line":"};"},
{"lineNum":"  785","line":""},
{"lineNum":"  786","line":"template <class DstType, class SrcType, class Arg0, class Arg1, class Arg2,"},
{"lineNum":"  787","line":"          class Arg3, class Arg4, class... Args>"},
{"lineNum":"  788","line":"struct CommonSubview<DstType, SrcType, 5, Arg0, Arg1, Arg2, Arg3, Arg4,"},
{"lineNum":"  789","line":"                     Args...> {"},
{"lineNum":"  790","line":"  using dst_subview_type ="},
{"lineNum":"  791","line":"      typename Kokkos::Subview<DstType, Arg0, Arg1, Arg2, Arg3, Arg4>;"},
{"lineNum":"  792","line":"  using src_subview_type ="},
{"lineNum":"  793","line":"      typename Kokkos::Subview<SrcType, Arg0, Arg1, Arg2, Arg3, Arg4>;"},
{"lineNum":"  794","line":"  dst_subview_type dst_sub;"},
{"lineNum":"  795","line":"  src_subview_type src_sub;"},
{"lineNum":"  796","line":"  CommonSubview(const DstType& dst, const SrcType& src, const Arg0& arg0,"},
{"lineNum":"  797","line":"                const Arg1& arg1, const Arg2& arg2, const Arg3& arg3,"},
{"lineNum":"  798","line":"                const Arg4& arg4, const Args...)"},
{"lineNum":"  799","line":"      : dst_sub(dst, arg0, arg1, arg2, arg3, arg4),"},
{"lineNum":"  800","line":"        src_sub(src, arg0, arg1, arg2, arg3, arg4) {}"},
{"lineNum":"  801","line":"};"},
{"lineNum":"  802","line":""},
{"lineNum":"  803","line":"template <class DstType, class SrcType, class Arg0, class Arg1, class Arg2,"},
{"lineNum":"  804","line":"          class Arg3, class Arg4, class Arg5, class... Args>"},
{"lineNum":"  805","line":"struct CommonSubview<DstType, SrcType, 6, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5,"},
{"lineNum":"  806","line":"                     Args...> {"},
{"lineNum":"  807","line":"  using dst_subview_type ="},
{"lineNum":"  808","line":"      typename Kokkos::Subview<DstType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5>;"},
{"lineNum":"  809","line":"  using src_subview_type ="},
{"lineNum":"  810","line":"      typename Kokkos::Subview<SrcType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5>;"},
{"lineNum":"  811","line":"  dst_subview_type dst_sub;"},
{"lineNum":"  812","line":"  src_subview_type src_sub;"},
{"lineNum":"  813","line":"  CommonSubview(const DstType& dst, const SrcType& src, const Arg0& arg0,"},
{"lineNum":"  814","line":"                const Arg1& arg1, const Arg2& arg2, const Arg3& arg3,"},
{"lineNum":"  815","line":"                const Arg4& arg4, const Arg5& arg5, const Args...)"},
{"lineNum":"  816","line":"      : dst_sub(dst, arg0, arg1, arg2, arg3, arg4, arg5),"},
{"lineNum":"  817","line":"        src_sub(src, arg0, arg1, arg2, arg3, arg4, arg5) {}"},
{"lineNum":"  818","line":"};"},
{"lineNum":"  819","line":""},
{"lineNum":"  820","line":"template <class DstType, class SrcType, class Arg0, class Arg1, class Arg2,"},
{"lineNum":"  821","line":"          class Arg3, class Arg4, class Arg5, class Arg6, class... Args>"},
{"lineNum":"  822","line":"struct CommonSubview<DstType, SrcType, 7, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5,"},
{"lineNum":"  823","line":"                     Arg6, Args...> {"},
{"lineNum":"  824","line":"  using dst_subview_type = typename Kokkos::Subview<DstType, Arg0, Arg1, Arg2,"},
{"lineNum":"  825","line":"                                                    Arg3, Arg4, Arg5, Arg6>;"},
{"lineNum":"  826","line":"  using src_subview_type = typename Kokkos::Subview<SrcType, Arg0, Arg1, Arg2,"},
{"lineNum":"  827","line":"                                                    Arg3, Arg4, Arg5, Arg6>;"},
{"lineNum":"  828","line":"  dst_subview_type dst_sub;"},
{"lineNum":"  829","line":"  src_subview_type src_sub;"},
{"lineNum":"  830","line":"  CommonSubview(const DstType& dst, const SrcType& src, const Arg0& arg0,"},
{"lineNum":"  831","line":"                const Arg1& arg1, const Arg2& arg2, const Arg3& arg3,"},
{"lineNum":"  832","line":"                const Arg4& arg4, const Arg5& arg5, const Arg6& arg6, Args...)"},
{"lineNum":"  833","line":"      : dst_sub(dst, arg0, arg1, arg2, arg3, arg4, arg5, arg6),"},
{"lineNum":"  834","line":"        src_sub(src, arg0, arg1, arg2, arg3, arg4, arg5, arg6) {}"},
{"lineNum":"  835","line":"};"},
{"lineNum":"  836","line":""},
{"lineNum":"  837","line":"template <class DstType, class SrcType, class Arg0, class Arg1, class Arg2,"},
{"lineNum":"  838","line":"          class Arg3, class Arg4, class Arg5, class Arg6, class Arg7>"},
{"lineNum":"  839","line":"struct CommonSubview<DstType, SrcType, 8, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5,"},
{"lineNum":"  840","line":"                     Arg6, Arg7> {"},
{"lineNum":"  841","line":"  using dst_subview_type ="},
{"lineNum":"  842","line":"      typename Kokkos::Subview<DstType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5,"},
{"lineNum":"  843","line":"                               Arg6, Arg7>;"},
{"lineNum":"  844","line":"  using src_subview_type ="},
{"lineNum":"  845","line":"      typename Kokkos::Subview<SrcType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5,"},
{"lineNum":"  846","line":"                               Arg6, Arg7>;"},
{"lineNum":"  847","line":"  dst_subview_type dst_sub;"},
{"lineNum":"  848","line":"  src_subview_type src_sub;"},
{"lineNum":"  849","line":"  CommonSubview(const DstType& dst, const SrcType& src, const Arg0& arg0,"},
{"lineNum":"  850","line":"                const Arg1& arg1, const Arg2& arg2, const Arg3& arg3,"},
{"lineNum":"  851","line":"                const Arg4& arg4, const Arg5& arg5, const Arg6& arg6,"},
{"lineNum":"  852","line":"                const Arg7& arg7)"},
{"lineNum":"  853","line":"      : dst_sub(dst, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7),"},
{"lineNum":"  854","line":"        src_sub(src, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7) {}"},
{"lineNum":"  855","line":"};"},
{"lineNum":"  856","line":""},
{"lineNum":"  857","line":"template <class DstType, class SrcType,"},
{"lineNum":"  858","line":"          class ExecSpace = typename DstType::execution_space,"},
{"lineNum":"  859","line":"          int Rank        = DstType::Rank>"},
{"lineNum":"  860","line":"struct ViewRemap;"},
{"lineNum":"  861","line":""},
{"lineNum":"  862","line":"template <class DstType, class SrcType, class ExecSpace>"},
{"lineNum":"  863","line":"struct ViewRemap<DstType, SrcType, ExecSpace, 1> {"},
{"lineNum":"  864","line":"  using p_type = Kokkos::pair<int64_t, int64_t>;"},
{"lineNum":"  865","line":""},
{"lineNum":"  866","line":"  ViewRemap(const DstType& dst, const SrcType& src) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  867","line":"    if (dst.extent(0) == src.extent(0)) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  868","line":"      view_copy(dst, src);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  869","line":"    } else {"},
{"lineNum":"  870","line":"      p_type ext0(0, std::min(dst.extent(0), src.extent(0)));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  871","line":"      using sv_adapter_type = CommonSubview<DstType, SrcType, 1, p_type>;"},
{"lineNum":"  872","line":"      sv_adapter_type common_subview(dst, src, ext0);"},
{"lineNum":"  873","line":"      view_copy(common_subview.dst_sub, common_subview.src_sub);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  874","line":"    }"},
{"lineNum":"  875","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  876","line":"};"},
{"lineNum":"  877","line":""},
{"lineNum":"  878","line":"template <class DstType, class SrcType, class ExecSpace>"},
{"lineNum":"  879","line":"struct ViewRemap<DstType, SrcType, ExecSpace, 2> {"},
{"lineNum":"  880","line":"  using p_type = Kokkos::pair<int64_t, int64_t>;"},
{"lineNum":"  881","line":""},
{"lineNum":"  882","line":"  ViewRemap(const DstType& dst, const SrcType& src) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  883","line":"    if (dst.extent(0) == src.extent(0)) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  884","line":"      if (dst.extent(1) == src.extent(1)) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  885","line":"        view_copy(dst, src);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  886","line":"      } else {"},
{"lineNum":"  887","line":"        p_type ext1(0, std::min(dst.extent(1), src.extent(1)));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  888","line":"        using sv_adapter_type ="},
{"lineNum":"  889","line":"            CommonSubview<DstType, SrcType, 2, Kokkos::Impl::ALL_t, p_type>;"},
{"lineNum":"  890","line":"        sv_adapter_type common_subview(dst, src, Kokkos::ALL, ext1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  891","line":"        view_copy(common_subview.dst_sub, common_subview.src_sub);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  892","line":"      }"},
{"lineNum":"  893","line":"    } else {"},
{"lineNum":"  894","line":"      if (dst.extent(1) == src.extent(1)) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  895","line":"        p_type ext0(0, std::min(dst.extent(0), src.extent(0)));","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  896","line":"        using sv_adapter_type ="},
{"lineNum":"  897","line":"            CommonSubview<DstType, SrcType, 2, p_type, Kokkos::Impl::ALL_t>;"},
{"lineNum":"  898","line":"        sv_adapter_type common_subview(dst, src, ext0, Kokkos::ALL);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  899","line":"        view_copy(common_subview.dst_sub, common_subview.src_sub);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  900","line":"      } else {"},
{"lineNum":"  901","line":"        p_type ext0(0, std::min(dst.extent(0), src.extent(0)));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  902","line":"        p_type ext1(0, std::min(dst.extent(1), src.extent(1)));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  903","line":"        using sv_adapter_type ="},
{"lineNum":"  904","line":"            CommonSubview<DstType, SrcType, 2, p_type, p_type>;"},
{"lineNum":"  905","line":"        sv_adapter_type common_subview(dst, src, ext0, ext1);"},
{"lineNum":"  906","line":"        view_copy(common_subview.dst_sub, common_subview.src_sub);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  907","line":"      }"},
{"lineNum":"  908","line":"    }"},
{"lineNum":"  909","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  910","line":"};"},
{"lineNum":"  911","line":""},
{"lineNum":"  912","line":"template <class DstType, class SrcType, class ExecSpace>"},
{"lineNum":"  913","line":"struct ViewRemap<DstType, SrcType, ExecSpace, 3> {"},
{"lineNum":"  914","line":"  using p_type = Kokkos::pair<int64_t, int64_t>;"},
{"lineNum":"  915","line":""},
{"lineNum":"  916","line":"  ViewRemap(const DstType& dst, const SrcType& src) {"},
{"lineNum":"  917","line":"    if (dst.extent(0) == src.extent(0)) {"},
{"lineNum":"  918","line":"      if (dst.extent(2) == src.extent(2)) {"},
{"lineNum":"  919","line":"        p_type ext1(0, std::min(dst.extent(1), src.extent(1)));"},
{"lineNum":"  920","line":"        using sv_adapter_type ="},
{"lineNum":"  921","line":"            CommonSubview<DstType, SrcType, 3, Kokkos::Impl::ALL_t, p_type,"},
{"lineNum":"  922","line":"                          Kokkos::Impl::ALL_t>;"},
{"lineNum":"  923","line":"        sv_adapter_type common_subview(dst, src, Kokkos::ALL, ext1,"},
{"lineNum":"  924","line":"                                       Kokkos::ALL);"},
{"lineNum":"  925","line":"        view_copy(common_subview.dst_sub, common_subview.src_sub);"},
{"lineNum":"  926","line":"      } else {"},
{"lineNum":"  927","line":"        p_type ext1(0, std::min(dst.extent(1), src.extent(1)));"},
{"lineNum":"  928","line":"        p_type ext2(0, std::min(dst.extent(2), src.extent(2)));"},
{"lineNum":"  929","line":"        using sv_adapter_type ="},
{"lineNum":"  930","line":"            CommonSubview<DstType, SrcType, 3, Kokkos::Impl::ALL_t, p_type,"},
{"lineNum":"  931","line":"                          p_type>;"},
{"lineNum":"  932","line":"        sv_adapter_type common_subview(dst, src, Kokkos::ALL, ext1, ext2);"},
{"lineNum":"  933","line":"        view_copy(common_subview.dst_sub, common_subview.src_sub);"},
{"lineNum":"  934","line":"      }"},
{"lineNum":"  935","line":"    } else {"},
{"lineNum":"  936","line":"      if (dst.extent(2) == src.extent(2)) {"},
{"lineNum":"  937","line":"        p_type ext0(0, std::min(dst.extent(0), src.extent(0)));"},
{"lineNum":"  938","line":"        p_type ext1(0, std::min(dst.extent(1), src.extent(1)));"},
{"lineNum":"  939","line":"        using sv_adapter_type = CommonSubview<DstType, SrcType, 3, p_type,"},
{"lineNum":"  940","line":"                                              p_type, Kokkos::Impl::ALL_t>;"},
{"lineNum":"  941","line":"        sv_adapter_type common_subview(dst, src, ext0, ext1, Kokkos::ALL);"},
{"lineNum":"  942","line":"        view_copy(common_subview.dst_sub, common_subview.src_sub);"},
{"lineNum":"  943","line":"      } else {"},
{"lineNum":"  944","line":"        p_type ext0(0, std::min(dst.extent(0), src.extent(0)));"},
{"lineNum":"  945","line":"        p_type ext1(0, std::min(dst.extent(1), src.extent(1)));"},
{"lineNum":"  946","line":"        p_type ext2(0, std::min(dst.extent(2), src.extent(2)));"},
{"lineNum":"  947","line":"        using sv_adapter_type ="},
{"lineNum":"  948","line":"            CommonSubview<DstType, SrcType, 3, p_type, p_type, p_type>;"},
{"lineNum":"  949","line":"        sv_adapter_type common_subview(dst, src, ext0, ext1, ext2);"},
{"lineNum":"  950","line":"        view_copy(common_subview.dst_sub, common_subview.src_sub);"},
{"lineNum":"  951","line":"      }"},
{"lineNum":"  952","line":"    }"},
{"lineNum":"  953","line":"  }"},
{"lineNum":"  954","line":"};"},
{"lineNum":"  955","line":""},
{"lineNum":"  956","line":"template <class DstType, class SrcType, class ExecSpace>"},
{"lineNum":"  957","line":"struct ViewRemap<DstType, SrcType, ExecSpace, 4> {"},
{"lineNum":"  958","line":"  using p_type = Kokkos::pair<int64_t, int64_t>;"},
{"lineNum":"  959","line":""},
{"lineNum":"  960","line":"  ViewRemap(const DstType& dst, const SrcType& src) {"},
{"lineNum":"  961","line":"    if (dst.extent(0) == src.extent(0)) {"},
{"lineNum":"  962","line":"      if (dst.extent(3) == src.extent(3)) {"},
{"lineNum":"  963","line":"        p_type ext1(0, std::min(dst.extent(1), src.extent(1)));"},
{"lineNum":"  964","line":"        p_type ext2(0, std::min(dst.extent(2), src.extent(2)));"},
{"lineNum":"  965","line":"        using sv_adapter_type ="},
{"lineNum":"  966","line":"            CommonSubview<DstType, SrcType, 4, Kokkos::Impl::ALL_t, p_type,"},
{"lineNum":"  967","line":"                          p_type, Kokkos::Impl::ALL_t>;"},
{"lineNum":"  968","line":"        sv_adapter_type common_subview(dst, src, Kokkos::ALL, ext1, ext2,"},
{"lineNum":"  969","line":"                                       Kokkos::ALL);"},
{"lineNum":"  970","line":"        view_copy(common_subview.dst_sub, common_subview.src_sub);"},
{"lineNum":"  971","line":"      } else {"},
{"lineNum":"  972","line":"        p_type ext1(0, std::min(dst.extent(1), src.extent(1)));"},
{"lineNum":"  973","line":"        p_type ext2(0, std::min(dst.extent(2), src.extent(2)));"},
{"lineNum":"  974","line":"        p_type ext3(0, std::min(dst.extent(3), src.extent(3)));"},
{"lineNum":"  975","line":"        using sv_adapter_type ="},
{"lineNum":"  976","line":"            CommonSubview<DstType, SrcType, 4, Kokkos::Impl::ALL_t, p_type,"},
{"lineNum":"  977","line":"                          p_type, p_type>;"},
{"lineNum":"  978","line":"        sv_adapter_type common_subview(dst, src, Kokkos::ALL, ext1, ext2, ext3);"},
{"lineNum":"  979","line":"        view_copy(common_subview.dst_sub, common_subview.src_sub);"},
{"lineNum":"  980","line":"      }"},
{"lineNum":"  981","line":"    } else {"},
{"lineNum":"  982","line":"      if (dst.extent(7) == src.extent(7)) {"},
{"lineNum":"  983","line":"        p_type ext0(0, std::min(dst.extent(0), src.extent(0)));"},
{"lineNum":"  984","line":"        p_type ext1(0, std::min(dst.extent(1), src.extent(1)));"},
{"lineNum":"  985","line":"        p_type ext2(0, std::min(dst.extent(2), src.extent(2)));"},
{"lineNum":"  986","line":"        using sv_adapter_type ="},
{"lineNum":"  987","line":"            CommonSubview<DstType, SrcType, 4, p_type, p_type, p_type,"},
{"lineNum":"  988","line":"                          Kokkos::Impl::ALL_t>;"},
{"lineNum":"  989","line":"        sv_adapter_type common_subview(dst, src, ext0, ext1, ext2, Kokkos::ALL);"},
{"lineNum":"  990","line":"        view_copy(common_subview.dst_sub, common_subview.src_sub);"},
{"lineNum":"  991","line":"      } else {"},
{"lineNum":"  992","line":"        p_type ext0(0, std::min(dst.extent(0), src.extent(0)));"},
{"lineNum":"  993","line":"        p_type ext1(0, std::min(dst.extent(1), src.extent(1)));"},
{"lineNum":"  994","line":"        p_type ext2(0, std::min(dst.extent(2), src.extent(2)));"},
{"lineNum":"  995","line":"        p_type ext3(0, std::min(dst.extent(3), src.extent(3)));"},
{"lineNum":"  996","line":"        using sv_adapter_type ="},
{"lineNum":"  997","line":"            CommonSubview<DstType, SrcType, 4, p_type, p_type, p_type, p_type>;"},
{"lineNum":"  998","line":"        sv_adapter_type common_subview(dst, src, ext0, ext1, ext2, ext3);"},
{"lineNum":"  999","line":"        view_copy(common_subview.dst_sub, common_subview.src_sub);"},
{"lineNum":" 1000","line":"      }"},
{"lineNum":" 1001","line":"    }"},
{"lineNum":" 1002","line":"  }"},
{"lineNum":" 1003","line":"};"},
{"lineNum":" 1004","line":""},
{"lineNum":" 1005","line":"template <class DstType, class SrcType, class ExecSpace>"},
{"lineNum":" 1006","line":"struct ViewRemap<DstType, SrcType, ExecSpace, 5> {"},
{"lineNum":" 1007","line":"  using p_type = Kokkos::pair<int64_t, int64_t>;"},
{"lineNum":" 1008","line":""},
{"lineNum":" 1009","line":"  ViewRemap(const DstType& dst, const SrcType& src) {"},
{"lineNum":" 1010","line":"    if (dst.extent(0) == src.extent(0)) {"},
{"lineNum":" 1011","line":"      if (dst.extent(4) == src.extent(4)) {"},
{"lineNum":" 1012","line":"        p_type ext1(0, std::min(dst.extent(1), src.extent(1)));"},
{"lineNum":" 1013","line":"        p_type ext2(0, std::min(dst.extent(2), src.extent(2)));"},
{"lineNum":" 1014","line":"        p_type ext3(0, std::min(dst.extent(3), src.extent(3)));"},
{"lineNum":" 1015","line":"        using sv_adapter_type ="},
{"lineNum":" 1016","line":"            CommonSubview<DstType, SrcType, 5, Kokkos::Impl::ALL_t, p_type,"},
{"lineNum":" 1017","line":"                          p_type, p_type, Kokkos::Impl::ALL_t>;"},
{"lineNum":" 1018","line":"        sv_adapter_type common_subview(dst, src, Kokkos::ALL, ext1, ext2, ext3,"},
{"lineNum":" 1019","line":"                                       Kokkos::ALL);"},
{"lineNum":" 1020","line":"        view_copy(common_subview.dst_sub, common_subview.src_sub);"},
{"lineNum":" 1021","line":"      } else {"},
{"lineNum":" 1022","line":"        p_type ext1(0, std::min(dst.extent(1), src.extent(1)));"},
{"lineNum":" 1023","line":"        p_type ext2(0, std::min(dst.extent(2), src.extent(2)));"},
{"lineNum":" 1024","line":"        p_type ext3(0, std::min(dst.extent(3), src.extent(3)));"},
{"lineNum":" 1025","line":"        p_type ext4(0, std::min(dst.extent(4), src.extent(4)));"},
{"lineNum":" 1026","line":"        using sv_adapter_type ="},
{"lineNum":" 1027","line":"            CommonSubview<DstType, SrcType, 5, Kokkos::Impl::ALL_t, p_type,"},
{"lineNum":" 1028","line":"                          p_type, p_type, p_type>;"},
{"lineNum":" 1029","line":"        sv_adapter_type common_subview(dst, src, Kokkos::ALL, ext1, ext2, ext3,"},
{"lineNum":" 1030","line":"                                       ext4);"},
{"lineNum":" 1031","line":"        view_copy(common_subview.dst_sub, common_subview.src_sub);"},
{"lineNum":" 1032","line":"      }"},
{"lineNum":" 1033","line":"    } else {"},
{"lineNum":" 1034","line":"      if (dst.extent(4) == src.extent(4)) {"},
{"lineNum":" 1035","line":"        p_type ext0(0, std::min(dst.extent(0), src.extent(0)));"},
{"lineNum":" 1036","line":"        p_type ext1(0, std::min(dst.extent(1), src.extent(1)));"},
{"lineNum":" 1037","line":"        p_type ext2(0, std::min(dst.extent(2), src.extent(2)));"},
{"lineNum":" 1038","line":"        p_type ext3(0, std::min(dst.extent(3), src.extent(3)));"},
{"lineNum":" 1039","line":"        using sv_adapter_type ="},
{"lineNum":" 1040","line":"            CommonSubview<DstType, SrcType, 5, p_type, p_type, p_type, p_type,"},
{"lineNum":" 1041","line":"                          Kokkos::Impl::ALL_t>;"},
{"lineNum":" 1042","line":"        sv_adapter_type common_subview(dst, src, ext0, ext1, ext2, ext3,"},
{"lineNum":" 1043","line":"                                       Kokkos::ALL);"},
{"lineNum":" 1044","line":"        view_copy(common_subview.dst_sub, common_subview.src_sub);"},
{"lineNum":" 1045","line":"      } else {"},
{"lineNum":" 1046","line":"        p_type ext0(0, std::min(dst.extent(0), src.extent(0)));"},
{"lineNum":" 1047","line":"        p_type ext1(0, std::min(dst.extent(1), src.extent(1)));"},
{"lineNum":" 1048","line":"        p_type ext2(0, std::min(dst.extent(2), src.extent(2)));"},
{"lineNum":" 1049","line":"        p_type ext3(0, std::min(dst.extent(3), src.extent(3)));"},
{"lineNum":" 1050","line":"        p_type ext4(0, std::min(dst.extent(4), src.extent(4)));"},
{"lineNum":" 1051","line":"        using sv_adapter_type = CommonSubview<DstType, SrcType, 5, p_type,"},
{"lineNum":" 1052","line":"                                              p_type, p_type, p_type, p_type>;"},
{"lineNum":" 1053","line":"        sv_adapter_type common_subview(dst, src, ext0, ext1, ext2, ext3, ext4);"},
{"lineNum":" 1054","line":"        view_copy(common_subview.dst_sub, common_subview.src_sub);"},
{"lineNum":" 1055","line":"      }"},
{"lineNum":" 1056","line":"    }"},
{"lineNum":" 1057","line":"  }"},
{"lineNum":" 1058","line":"};"},
{"lineNum":" 1059","line":"template <class DstType, class SrcType, class ExecSpace>"},
{"lineNum":" 1060","line":"struct ViewRemap<DstType, SrcType, ExecSpace, 6> {"},
{"lineNum":" 1061","line":"  using p_type = Kokkos::pair<int64_t, int64_t>;"},
{"lineNum":" 1062","line":""},
{"lineNum":" 1063","line":"  ViewRemap(const DstType& dst, const SrcType& src) {"},
{"lineNum":" 1064","line":"    if (dst.extent(0) == src.extent(0)) {"},
{"lineNum":" 1065","line":"      if (dst.extent(5) == src.extent(5)) {"},
{"lineNum":" 1066","line":"        p_type ext1(0, std::min(dst.extent(1), src.extent(1)));"},
{"lineNum":" 1067","line":"        p_type ext2(0, std::min(dst.extent(2), src.extent(2)));"},
{"lineNum":" 1068","line":"        p_type ext3(0, std::min(dst.extent(3), src.extent(3)));"},
{"lineNum":" 1069","line":"        p_type ext4(0, std::min(dst.extent(4), src.extent(4)));"},
{"lineNum":" 1070","line":"        using sv_adapter_type ="},
{"lineNum":" 1071","line":"            CommonSubview<DstType, SrcType, 6, Kokkos::Impl::ALL_t, p_type,"},
{"lineNum":" 1072","line":"                          p_type, p_type, p_type, Kokkos::Impl::ALL_t>;"},
{"lineNum":" 1073","line":"        sv_adapter_type common_subview(dst, src, Kokkos::ALL, ext1, ext2, ext3,"},
{"lineNum":" 1074","line":"                                       ext4, Kokkos::ALL);"},
{"lineNum":" 1075","line":"        view_copy(common_subview.dst_sub, common_subview.src_sub);"},
{"lineNum":" 1076","line":"      } else {"},
{"lineNum":" 1077","line":"        p_type ext1(0, std::min(dst.extent(1), src.extent(1)));"},
{"lineNum":" 1078","line":"        p_type ext2(0, std::min(dst.extent(2), src.extent(2)));"},
{"lineNum":" 1079","line":"        p_type ext3(0, std::min(dst.extent(3), src.extent(3)));"},
{"lineNum":" 1080","line":"        p_type ext4(0, std::min(dst.extent(4), src.extent(4)));"},
{"lineNum":" 1081","line":"        p_type ext5(0, std::min(dst.extent(5), src.extent(5)));"},
{"lineNum":" 1082","line":"        using sv_adapter_type ="},
{"lineNum":" 1083","line":"            CommonSubview<DstType, SrcType, 6, Kokkos::Impl::ALL_t, p_type,"},
{"lineNum":" 1084","line":"                          p_type, p_type, p_type, p_type>;"},
{"lineNum":" 1085","line":"        sv_adapter_type common_subview(dst, src, Kokkos::ALL, ext1, ext2, ext3,"},
{"lineNum":" 1086","line":"                                       ext4, ext5);"},
{"lineNum":" 1087","line":"        view_copy(common_subview.dst_sub, common_subview.src_sub);"},
{"lineNum":" 1088","line":"      }"},
{"lineNum":" 1089","line":"    } else {"},
{"lineNum":" 1090","line":"      if (dst.extent(5) == src.extent(5)) {"},
{"lineNum":" 1091","line":"        p_type ext0(0, std::min(dst.extent(0), src.extent(0)));"},
{"lineNum":" 1092","line":"        p_type ext1(0, std::min(dst.extent(1), src.extent(1)));"},
{"lineNum":" 1093","line":"        p_type ext2(0, std::min(dst.extent(2), src.extent(2)));"},
{"lineNum":" 1094","line":"        p_type ext3(0, std::min(dst.extent(3), src.extent(3)));"},
{"lineNum":" 1095","line":"        p_type ext4(0, std::min(dst.extent(4), src.extent(4)));"},
{"lineNum":" 1096","line":""},
{"lineNum":" 1097","line":"        using sv_adapter_type ="},
{"lineNum":" 1098","line":"            CommonSubview<DstType, SrcType, 6, p_type, p_type, p_type, p_type,"},
{"lineNum":" 1099","line":"                          p_type, Kokkos::Impl::ALL_t>;"},
{"lineNum":" 1100","line":"        sv_adapter_type common_subview(dst, src, ext0, ext1, ext2, ext3, ext4,"},
{"lineNum":" 1101","line":"                                       Kokkos::ALL);"},
{"lineNum":" 1102","line":"        view_copy(common_subview.dst_sub, common_subview.src_sub);"},
{"lineNum":" 1103","line":"      } else {"},
{"lineNum":" 1104","line":"        p_type ext0(0, std::min(dst.extent(0), src.extent(0)));"},
{"lineNum":" 1105","line":"        p_type ext1(0, std::min(dst.extent(1), src.extent(1)));"},
{"lineNum":" 1106","line":"        p_type ext2(0, std::min(dst.extent(2), src.extent(2)));"},
{"lineNum":" 1107","line":"        p_type ext3(0, std::min(dst.extent(3), src.extent(3)));"},
{"lineNum":" 1108","line":"        p_type ext4(0, std::min(dst.extent(4), src.extent(4)));"},
{"lineNum":" 1109","line":"        p_type ext5(0, std::min(dst.extent(5), src.extent(5)));"},
{"lineNum":" 1110","line":""},
{"lineNum":" 1111","line":"        using sv_adapter_type ="},
{"lineNum":" 1112","line":"            CommonSubview<DstType, SrcType, 6, p_type, p_type, p_type, p_type,"},
{"lineNum":" 1113","line":"                          p_type, p_type>;"},
{"lineNum":" 1114","line":"        sv_adapter_type common_subview(dst, src, ext0, ext1, ext2, ext3, ext4,"},
{"lineNum":" 1115","line":"                                       ext5);"},
{"lineNum":" 1116","line":"        view_copy(common_subview.dst_sub, common_subview.src_sub);"},
{"lineNum":" 1117","line":"      }"},
{"lineNum":" 1118","line":"    }"},
{"lineNum":" 1119","line":"  }"},
{"lineNum":" 1120","line":"};"},
{"lineNum":" 1121","line":""},
{"lineNum":" 1122","line":"template <class DstType, class SrcType, class ExecSpace>"},
{"lineNum":" 1123","line":"struct ViewRemap<DstType, SrcType, ExecSpace, 7> {"},
{"lineNum":" 1124","line":"  using p_type = Kokkos::pair<int64_t, int64_t>;"},
{"lineNum":" 1125","line":""},
{"lineNum":" 1126","line":"  ViewRemap(const DstType& dst, const SrcType& src) {"},
{"lineNum":" 1127","line":"    if (dst.extent(0) == src.extent(0)) {"},
{"lineNum":" 1128","line":"      if (dst.extent(6) == src.extent(6)) {"},
{"lineNum":" 1129","line":"        p_type ext1(0, std::min(dst.extent(1), src.extent(1)));"},
{"lineNum":" 1130","line":"        p_type ext2(0, std::min(dst.extent(2), src.extent(2)));"},
{"lineNum":" 1131","line":"        p_type ext3(0, std::min(dst.extent(3), src.extent(3)));"},
{"lineNum":" 1132","line":"        p_type ext4(0, std::min(dst.extent(4), src.extent(4)));"},
{"lineNum":" 1133","line":"        p_type ext5(0, std::min(dst.extent(5), src.extent(5)));"},
{"lineNum":" 1134","line":"        using sv_adapter_type ="},
{"lineNum":" 1135","line":"            CommonSubview<DstType, SrcType, 7, Kokkos::Impl::ALL_t, p_type,"},
{"lineNum":" 1136","line":"                          p_type, p_type, p_type, p_type, Kokkos::Impl::ALL_t>;"},
{"lineNum":" 1137","line":"        sv_adapter_type common_subview(dst, src, Kokkos::ALL, ext1, ext2, ext3,"},
{"lineNum":" 1138","line":"                                       ext4, ext5, Kokkos::ALL);"},
{"lineNum":" 1139","line":"        view_copy(common_subview.dst_sub, common_subview.src_sub);"},
{"lineNum":" 1140","line":"      } else {"},
{"lineNum":" 1141","line":"        p_type ext1(0, std::min(dst.extent(1), src.extent(1)));"},
{"lineNum":" 1142","line":"        p_type ext2(0, std::min(dst.extent(2), src.extent(2)));"},
{"lineNum":" 1143","line":"        p_type ext3(0, std::min(dst.extent(3), src.extent(3)));"},
{"lineNum":" 1144","line":"        p_type ext4(0, std::min(dst.extent(4), src.extent(4)));"},
{"lineNum":" 1145","line":"        p_type ext5(0, std::min(dst.extent(5), src.extent(5)));"},
{"lineNum":" 1146","line":"        p_type ext6(0, std::min(dst.extent(6), src.extent(6)));"},
{"lineNum":" 1147","line":"        using sv_adapter_type ="},
{"lineNum":" 1148","line":"            CommonSubview<DstType, SrcType, 7, Kokkos::Impl::ALL_t, p_type,"},
{"lineNum":" 1149","line":"                          p_type, p_type, p_type, p_type, p_type>;"},
{"lineNum":" 1150","line":"        sv_adapter_type common_subview(dst, src, Kokkos::ALL, ext1, ext2, ext3,"},
{"lineNum":" 1151","line":"                                       ext4, ext5, ext6);"},
{"lineNum":" 1152","line":"        view_copy(common_subview.dst_sub, common_subview.src_sub);"},
{"lineNum":" 1153","line":"      }"},
{"lineNum":" 1154","line":"    } else {"},
{"lineNum":" 1155","line":"      if (dst.extent(6) == src.extent(6)) {"},
{"lineNum":" 1156","line":"        p_type ext0(0, std::min(dst.extent(0), src.extent(0)));"},
{"lineNum":" 1157","line":"        p_type ext1(0, std::min(dst.extent(1), src.extent(1)));"},
{"lineNum":" 1158","line":"        p_type ext2(0, std::min(dst.extent(2), src.extent(2)));"},
{"lineNum":" 1159","line":"        p_type ext3(0, std::min(dst.extent(3), src.extent(3)));"},
{"lineNum":" 1160","line":"        p_type ext4(0, std::min(dst.extent(4), src.extent(4)));"},
{"lineNum":" 1161","line":"        p_type ext5(0, std::min(dst.extent(5), src.extent(5)));"},
{"lineNum":" 1162","line":"        using sv_adapter_type ="},
{"lineNum":" 1163","line":"            CommonSubview<DstType, SrcType, 7, p_type, p_type, p_type, p_type,"},
{"lineNum":" 1164","line":"                          p_type, p_type, Kokkos::Impl::ALL_t>;"},
{"lineNum":" 1165","line":"        sv_adapter_type common_subview(dst, src, ext0, ext1, ext2, ext3, ext4,"},
{"lineNum":" 1166","line":"                                       ext5, Kokkos::ALL);"},
{"lineNum":" 1167","line":"        view_copy(common_subview.dst_sub, common_subview.src_sub);"},
{"lineNum":" 1168","line":"      } else {"},
{"lineNum":" 1169","line":"        p_type ext0(0, std::min(dst.extent(0), src.extent(0)));"},
{"lineNum":" 1170","line":"        p_type ext1(0, std::min(dst.extent(1), src.extent(1)));"},
{"lineNum":" 1171","line":"        p_type ext2(0, std::min(dst.extent(2), src.extent(2)));"},
{"lineNum":" 1172","line":"        p_type ext3(0, std::min(dst.extent(3), src.extent(3)));"},
{"lineNum":" 1173","line":"        p_type ext4(0, std::min(dst.extent(4), src.extent(4)));"},
{"lineNum":" 1174","line":"        p_type ext5(0, std::min(dst.extent(5), src.extent(5)));"},
{"lineNum":" 1175","line":"        p_type ext6(0, std::min(dst.extent(6), src.extent(6)));"},
{"lineNum":" 1176","line":"        using sv_adapter_type ="},
{"lineNum":" 1177","line":"            CommonSubview<DstType, SrcType, 7, p_type, p_type, p_type, p_type,"},
{"lineNum":" 1178","line":"                          p_type, p_type, p_type>;"},
{"lineNum":" 1179","line":"        sv_adapter_type common_subview(dst, src, ext0, ext1, ext2, ext3, ext4,"},
{"lineNum":" 1180","line":"                                       ext5, ext6);"},
{"lineNum":" 1181","line":"        view_copy(common_subview.dst_sub, common_subview.src_sub);"},
{"lineNum":" 1182","line":"      }"},
{"lineNum":" 1183","line":"    }"},
{"lineNum":" 1184","line":"  }"},
{"lineNum":" 1185","line":"};"},
{"lineNum":" 1186","line":""},
{"lineNum":" 1187","line":"template <class DstType, class SrcType, class ExecSpace>"},
{"lineNum":" 1188","line":"struct ViewRemap<DstType, SrcType, ExecSpace, 8> {"},
{"lineNum":" 1189","line":"  using p_type = Kokkos::pair<int64_t, int64_t>;"},
{"lineNum":" 1190","line":""},
{"lineNum":" 1191","line":"  ViewRemap(const DstType& dst, const SrcType& src) {"},
{"lineNum":" 1192","line":"    if (dst.extent(0) == src.extent(0)) {"},
{"lineNum":" 1193","line":"      if (dst.extent(7) == src.extent(7)) {"},
{"lineNum":" 1194","line":"        p_type ext1(0, std::min(dst.extent(1), src.extent(1)));"},
{"lineNum":" 1195","line":"        p_type ext2(0, std::min(dst.extent(2), src.extent(2)));"},
{"lineNum":" 1196","line":"        p_type ext3(0, std::min(dst.extent(3), src.extent(3)));"},
{"lineNum":" 1197","line":"        p_type ext4(0, std::min(dst.extent(4), src.extent(4)));"},
{"lineNum":" 1198","line":"        p_type ext5(0, std::min(dst.extent(5), src.extent(5)));"},
{"lineNum":" 1199","line":"        p_type ext6(0, std::min(dst.extent(6), src.extent(6)));"},
{"lineNum":" 1200","line":"        using sv_adapter_type ="},
{"lineNum":" 1201","line":"            CommonSubview<DstType, SrcType, 8, Kokkos::Impl::ALL_t, p_type,"},
{"lineNum":" 1202","line":"                          p_type, p_type, p_type, p_type, p_type,"},
{"lineNum":" 1203","line":"                          Kokkos::Impl::ALL_t>;"},
{"lineNum":" 1204","line":"        sv_adapter_type common_subview(dst, src, Kokkos::ALL, ext1, ext2, ext3,"},
{"lineNum":" 1205","line":"                                       ext4, ext5, ext6, Kokkos::ALL);"},
{"lineNum":" 1206","line":"        view_copy(common_subview.dst_sub, common_subview.src_sub);"},
{"lineNum":" 1207","line":"      } else {"},
{"lineNum":" 1208","line":"        p_type ext1(0, std::min(dst.extent(1), src.extent(1)));"},
{"lineNum":" 1209","line":"        p_type ext2(0, std::min(dst.extent(2), src.extent(2)));"},
{"lineNum":" 1210","line":"        p_type ext3(0, std::min(dst.extent(3), src.extent(3)));"},
{"lineNum":" 1211","line":"        p_type ext4(0, std::min(dst.extent(4), src.extent(4)));"},
{"lineNum":" 1212","line":"        p_type ext5(0, std::min(dst.extent(5), src.extent(5)));"},
{"lineNum":" 1213","line":"        p_type ext6(0, std::min(dst.extent(6), src.extent(6)));"},
{"lineNum":" 1214","line":"        p_type ext7(0, std::min(dst.extent(7), src.extent(7)));"},
{"lineNum":" 1215","line":"        using sv_adapter_type ="},
{"lineNum":" 1216","line":"            CommonSubview<DstType, SrcType, 8, Kokkos::Impl::ALL_t, p_type,"},
{"lineNum":" 1217","line":"                          p_type, p_type, p_type, p_type, p_type, p_type>;"},
{"lineNum":" 1218","line":"        sv_adapter_type common_subview(dst, src, Kokkos::ALL, ext1, ext2, ext3,"},
{"lineNum":" 1219","line":"                                       ext4, ext5, ext6, ext7);"},
{"lineNum":" 1220","line":"        view_copy(common_subview.dst_sub, common_subview.src_sub);"},
{"lineNum":" 1221","line":"      }"},
{"lineNum":" 1222","line":"    } else {"},
{"lineNum":" 1223","line":"      if (dst.extent(7) == src.extent(7)) {"},
{"lineNum":" 1224","line":"        p_type ext0(0, std::min(dst.extent(0), src.extent(0)));"},
{"lineNum":" 1225","line":"        p_type ext1(0, std::min(dst.extent(1), src.extent(1)));"},
{"lineNum":" 1226","line":"        p_type ext2(0, std::min(dst.extent(2), src.extent(2)));"},
{"lineNum":" 1227","line":"        p_type ext3(0, std::min(dst.extent(3), src.extent(3)));"},
{"lineNum":" 1228","line":"        p_type ext4(0, std::min(dst.extent(4), src.extent(4)));"},
{"lineNum":" 1229","line":"        p_type ext5(0, std::min(dst.extent(5), src.extent(5)));"},
{"lineNum":" 1230","line":"        p_type ext6(0, std::min(dst.extent(6), src.extent(6)));"},
{"lineNum":" 1231","line":"        using sv_adapter_type ="},
{"lineNum":" 1232","line":"            CommonSubview<DstType, SrcType, 8, p_type, p_type, p_type, p_type,"},
{"lineNum":" 1233","line":"                          p_type, p_type, p_type, Kokkos::Impl::ALL_t>;"},
{"lineNum":" 1234","line":"        sv_adapter_type common_subview(dst, src, ext0, ext1, ext2, ext3, ext4,"},
{"lineNum":" 1235","line":"                                       ext5, ext6, Kokkos::ALL);"},
{"lineNum":" 1236","line":"        view_copy(common_subview.dst_sub, common_subview.src_sub);"},
{"lineNum":" 1237","line":"      } else {"},
{"lineNum":" 1238","line":"        p_type ext0(0, std::min(dst.extent(0), src.extent(0)));"},
{"lineNum":" 1239","line":"        p_type ext1(0, std::min(dst.extent(1), src.extent(1)));"},
{"lineNum":" 1240","line":"        p_type ext2(0, std::min(dst.extent(2), src.extent(2)));"},
{"lineNum":" 1241","line":"        p_type ext3(0, std::min(dst.extent(3), src.extent(3)));"},
{"lineNum":" 1242","line":"        p_type ext4(0, std::min(dst.extent(4), src.extent(4)));"},
{"lineNum":" 1243","line":"        p_type ext5(0, std::min(dst.extent(5), src.extent(5)));"},
{"lineNum":" 1244","line":"        p_type ext6(0, std::min(dst.extent(6), src.extent(6)));"},
{"lineNum":" 1245","line":"        p_type ext7(0, std::min(dst.extent(7), src.extent(7)));"},
{"lineNum":" 1246","line":"        using sv_adapter_type ="},
{"lineNum":" 1247","line":"            CommonSubview<DstType, SrcType, 8, p_type, p_type, p_type, p_type,"},
{"lineNum":" 1248","line":"                          p_type, p_type, p_type, p_type>;"},
{"lineNum":" 1249","line":"        sv_adapter_type common_subview(dst, src, ext0, ext1, ext2, ext3, ext4,"},
{"lineNum":" 1250","line":"                                       ext5, ext6, ext7);"},
{"lineNum":" 1251","line":"        view_copy(common_subview.dst_sub, common_subview.src_sub);"},
{"lineNum":" 1252","line":"      }"},
{"lineNum":" 1253","line":"    }"},
{"lineNum":" 1254","line":"  }"},
{"lineNum":" 1255","line":"};"},
{"lineNum":" 1256","line":""},
{"lineNum":" 1257","line":"}  // namespace Impl"},
{"lineNum":" 1258","line":""},
{"lineNum":" 1259","line":"/** \\brief  Deep copy a value from Host memory into a view.  */"},
{"lineNum":" 1260","line":"template <class DT, class... DP>"},
{"lineNum":" 1261","line":"inline void deep_copy("},
{"lineNum":" 1262","line":"    const View<DT, DP...>& dst,"},
{"lineNum":" 1263","line":"    typename ViewTraits<DT, DP...>::const_value_type& value,"},
{"lineNum":" 1264","line":"    typename std::enable_if<std::is_same<"},
{"lineNum":" 1265","line":"        typename ViewTraits<DT, DP...>::specialize, void>::value>::type* ="},
{"lineNum":" 1266","line":"        nullptr) {"},
{"lineNum":" 1267","line":"  using ViewType        = View<DT, DP...>;"},
{"lineNum":" 1268","line":"  using exec_space_type = typename ViewType::execution_space;"},
{"lineNum":" 1269","line":""},
{"lineNum":" 1270","line":"  if (Kokkos::Tools::Experimental::get_callbacks().begin_deep_copy != nullptr) {"},
{"lineNum":" 1271","line":"    Kokkos::Profiling::beginDeepCopy("},
{"lineNum":" 1272","line":"        Kokkos::Profiling::make_space_handle(ViewType::memory_space::name()),"},
{"lineNum":" 1273","line":"        dst.label(), dst.data(),"},
{"lineNum":" 1274","line":"        Kokkos::Profiling::make_space_handle(Kokkos::HostSpace::name()),"},
{"lineNum":" 1275","line":"        \"Scalar\", &value, dst.span() * sizeof(typename ViewType::value_type));"},
{"lineNum":" 1276","line":"  }"},
{"lineNum":" 1277","line":""},
{"lineNum":" 1278","line":"  if (dst.data() == nullptr) {"},
{"lineNum":" 1279","line":"    Kokkos::fence();"},
{"lineNum":" 1280","line":"    if (Kokkos::Tools::Experimental::get_callbacks().end_deep_copy != nullptr) {"},
{"lineNum":" 1281","line":"      Kokkos::Profiling::endDeepCopy();"},
{"lineNum":" 1282","line":"    }"},
{"lineNum":" 1283","line":"    return;"},
{"lineNum":" 1284","line":"  }"},
{"lineNum":" 1285","line":""},
{"lineNum":" 1286","line":"  Kokkos::fence();"},
{"lineNum":" 1287","line":"  static_assert(std::is_same<typename ViewType::non_const_value_type,"},
{"lineNum":" 1288","line":"                             typename ViewType::value_type>::value,"},
{"lineNum":" 1289","line":"                \"deep_copy requires non-const type\");"},
{"lineNum":" 1290","line":""},
{"lineNum":" 1291","line":"  // If contiguous we can simply do a 1D flat loop"},
{"lineNum":" 1292","line":"  if (dst.span_is_contiguous()) {"},
{"lineNum":" 1293","line":"    using ViewTypeFlat = Kokkos::View<"},
{"lineNum":" 1294","line":"        typename ViewType::value_type*, Kokkos::LayoutRight,"},
{"lineNum":" 1295","line":"        Kokkos::Device<typename ViewType::execution_space,"},
{"lineNum":" 1296","line":"                       typename std::conditional<"},
{"lineNum":" 1297","line":"                           ViewType::Rank == 0, typename ViewType::memory_space,"},
{"lineNum":" 1298","line":"                           Kokkos::AnonymousSpace>::type>,"},
{"lineNum":" 1299","line":"        Kokkos::MemoryTraits<0>>;"},
{"lineNum":" 1300","line":""},
{"lineNum":" 1301","line":"    ViewTypeFlat dst_flat(dst.data(), dst.size());"},
{"lineNum":" 1302","line":"    if (dst.span() < static_cast<size_t>(std::numeric_limits<int>::max())) {"},
{"lineNum":" 1303","line":"      Kokkos::Impl::ViewFill<ViewTypeFlat, Kokkos::LayoutRight, exec_space_type,"},
{"lineNum":" 1304","line":"                             ViewTypeFlat::Rank, int>(dst_flat, value,"},
{"lineNum":" 1305","line":"                                                      exec_space_type());"},
{"lineNum":" 1306","line":"    } else"},
{"lineNum":" 1307","line":"      Kokkos::Impl::ViewFill<ViewTypeFlat, Kokkos::LayoutRight, exec_space_type,"},
{"lineNum":" 1308","line":"                             ViewTypeFlat::Rank, int64_t>(dst_flat, value,"},
{"lineNum":" 1309","line":"                                                          exec_space_type());"},
{"lineNum":" 1310","line":"    Kokkos::fence();"},
{"lineNum":" 1311","line":"    if (Kokkos::Tools::Experimental::get_callbacks().end_deep_copy != nullptr) {"},
{"lineNum":" 1312","line":"      Kokkos::Profiling::endDeepCopy();"},
{"lineNum":" 1313","line":"    }"},
{"lineNum":" 1314","line":"    return;"},
{"lineNum":" 1315","line":"  }"},
{"lineNum":" 1316","line":""},
{"lineNum":" 1317","line":"  // Figure out iteration order to do the ViewFill"},
{"lineNum":" 1318","line":"  int64_t strides[ViewType::Rank + 1];"},
{"lineNum":" 1319","line":"  dst.stride(strides);"},
{"lineNum":" 1320","line":"  Kokkos::Iterate iterate;"},
{"lineNum":" 1321","line":"  if (std::is_same<typename ViewType::array_layout,"},
{"lineNum":" 1322","line":"                   Kokkos::LayoutRight>::value) {"},
{"lineNum":" 1323","line":"    iterate = Kokkos::Iterate::Right;"},
{"lineNum":" 1324","line":"  } else if (std::is_same<typename ViewType::array_layout,"},
{"lineNum":" 1325","line":"                          Kokkos::LayoutLeft>::value) {"},
{"lineNum":" 1326","line":"    iterate = Kokkos::Iterate::Left;"},
{"lineNum":" 1327","line":"  } else if (std::is_same<typename ViewType::array_layout,"},
{"lineNum":" 1328","line":"                          Kokkos::LayoutStride>::value) {"},
{"lineNum":" 1329","line":"    if (strides[0] > strides[ViewType::Rank > 0 ? ViewType::Rank - 1 : 0])"},
{"lineNum":" 1330","line":"      iterate = Kokkos::Iterate::Right;"},
{"lineNum":" 1331","line":"    else"},
{"lineNum":" 1332","line":"      iterate = Kokkos::Iterate::Left;"},
{"lineNum":" 1333","line":"  } else {"},
{"lineNum":" 1334","line":"    if (std::is_same<typename ViewType::execution_space::array_layout,"},
{"lineNum":" 1335","line":"                     Kokkos::LayoutRight>::value)"},
{"lineNum":" 1336","line":"      iterate = Kokkos::Iterate::Right;"},
{"lineNum":" 1337","line":"    else"},
{"lineNum":" 1338","line":"      iterate = Kokkos::Iterate::Left;"},
{"lineNum":" 1339","line":"  }"},
{"lineNum":" 1340","line":""},
{"lineNum":" 1341","line":"  // Lets call the right ViewFill functor based on integer space needed and"},
{"lineNum":" 1342","line":"  // iteration type"},
{"lineNum":" 1343","line":"  using ViewTypeUniform = typename std::conditional<"},
{"lineNum":" 1344","line":"      ViewType::Rank == 0, typename ViewType::uniform_runtime_type,"},
{"lineNum":" 1345","line":"      typename ViewType::uniform_runtime_nomemspace_type>::type;"},
{"lineNum":" 1346","line":"  if (dst.span() > static_cast<size_t>(std::numeric_limits<int>::max())) {"},
{"lineNum":" 1347","line":"    if (iterate == Kokkos::Iterate::Right)"},
{"lineNum":" 1348","line":"      Kokkos::Impl::ViewFill<ViewTypeUniform, Kokkos::LayoutRight,"},
{"lineNum":" 1349","line":"                             exec_space_type, ViewType::Rank, int64_t>("},
{"lineNum":" 1350","line":"          dst, value, exec_space_type());"},
{"lineNum":" 1351","line":"    else"},
{"lineNum":" 1352","line":"      Kokkos::Impl::ViewFill<ViewTypeUniform, Kokkos::LayoutLeft,"},
{"lineNum":" 1353","line":"                             exec_space_type, ViewType::Rank, int64_t>("},
{"lineNum":" 1354","line":"          dst, value, exec_space_type());"},
{"lineNum":" 1355","line":"  } else {"},
{"lineNum":" 1356","line":"    if (iterate == Kokkos::Iterate::Right)"},
{"lineNum":" 1357","line":"      Kokkos::Impl::ViewFill<ViewTypeUniform, Kokkos::LayoutRight,"},
{"lineNum":" 1358","line":"                             exec_space_type, ViewType::Rank, int>("},
{"lineNum":" 1359","line":"          dst, value, exec_space_type());"},
{"lineNum":" 1360","line":"    else"},
{"lineNum":" 1361","line":"      Kokkos::Impl::ViewFill<ViewTypeUniform, Kokkos::LayoutLeft,"},
{"lineNum":" 1362","line":"                             exec_space_type, ViewType::Rank, int>("},
{"lineNum":" 1363","line":"          dst, value, exec_space_type());"},
{"lineNum":" 1364","line":"  }"},
{"lineNum":" 1365","line":"  Kokkos::fence();"},
{"lineNum":" 1366","line":""},
{"lineNum":" 1367","line":"  if (Kokkos::Tools::Experimental::get_callbacks().end_deep_copy != nullptr) {"},
{"lineNum":" 1368","line":"    Kokkos::Profiling::endDeepCopy();"},
{"lineNum":" 1369","line":"  }"},
{"lineNum":" 1370","line":"}"},
{"lineNum":" 1371","line":""},
{"lineNum":" 1372","line":"/** \\brief  Deep copy into a value in Host memory from a view.  */"},
{"lineNum":" 1373","line":"template <class ST, class... SP>"},
{"lineNum":" 1374","line":"inline void deep_copy("},
{"lineNum":" 1375","line":"    typename ViewTraits<ST, SP...>::non_const_value_type& dst,"},
{"lineNum":" 1376","line":"    const View<ST, SP...>& src,"},
{"lineNum":" 1377","line":"    typename std::enable_if<std::is_same<"},
{"lineNum":" 1378","line":"        typename ViewTraits<ST, SP...>::specialize, void>::value>::type* ="},
{"lineNum":" 1379","line":"        nullptr) {"},
{"lineNum":" 1380","line":"  using src_traits       = ViewTraits<ST, SP...>;"},
{"lineNum":" 1381","line":"  using src_memory_space = typename src_traits::memory_space;"},
{"lineNum":" 1382","line":""},
{"lineNum":" 1383","line":"  static_assert(src_traits::rank == 0,"},
{"lineNum":" 1384","line":"                \"ERROR: Non-rank-zero view in deep_copy( value , View )\");"},
{"lineNum":" 1385","line":""},
{"lineNum":" 1386","line":"  if (Kokkos::Tools::Experimental::get_callbacks().begin_deep_copy != nullptr) {"},
{"lineNum":" 1387","line":"    Kokkos::Profiling::beginDeepCopy("},
{"lineNum":" 1388","line":"        Kokkos::Profiling::make_space_handle(Kokkos::HostSpace::name()),"},
{"lineNum":" 1389","line":"        \"Scalar\", &dst,"},
{"lineNum":" 1390","line":"        Kokkos::Profiling::make_space_handle(src_memory_space::name()),"},
{"lineNum":" 1391","line":"        src.label(), src.data(),"},
{"lineNum":" 1392","line":"        src.span() * sizeof(typename src_traits::value_type));"},
{"lineNum":" 1393","line":"  }"},
{"lineNum":" 1394","line":""},
{"lineNum":" 1395","line":"  if (src.data() == nullptr) {"},
{"lineNum":" 1396","line":"    Kokkos::fence();"},
{"lineNum":" 1397","line":"    if (Kokkos::Tools::Experimental::get_callbacks().end_deep_copy != nullptr) {"},
{"lineNum":" 1398","line":"      Kokkos::Profiling::endDeepCopy();"},
{"lineNum":" 1399","line":"    }"},
{"lineNum":" 1400","line":"    return;"},
{"lineNum":" 1401","line":"  }"},
{"lineNum":" 1402","line":""},
{"lineNum":" 1403","line":"  Kokkos::Impl::DeepCopy<HostSpace, src_memory_space>(&dst, src.data(),"},
{"lineNum":" 1404","line":"                                                      sizeof(ST));"},
{"lineNum":" 1405","line":"  if (Kokkos::Tools::Experimental::get_callbacks().end_deep_copy != nullptr) {"},
{"lineNum":" 1406","line":"    Kokkos::Profiling::endDeepCopy();"},
{"lineNum":" 1407","line":"  }"},
{"lineNum":" 1408","line":"}"},
{"lineNum":" 1409","line":""},
{"lineNum":" 1410","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1411","line":"/** \\brief  A deep copy between views of compatible type, and rank zero.  */"},
{"lineNum":" 1412","line":"template <class DT, class... DP, class ST, class... SP>"},
{"lineNum":" 1413","line":"inline void deep_copy("},
{"lineNum":" 1414","line":"    const View<DT, DP...>& dst, const View<ST, SP...>& src,"},
{"lineNum":" 1415","line":"    typename std::enable_if<("},
{"lineNum":" 1416","line":"        std::is_same<typename ViewTraits<DT, DP...>::specialize, void>::value &&"},
{"lineNum":" 1417","line":"        std::is_same<typename ViewTraits<ST, SP...>::specialize, void>::value &&"},
{"lineNum":" 1418","line":"        (unsigned(ViewTraits<DT, DP...>::rank) == unsigned(0) &&"},
{"lineNum":" 1419","line":"         unsigned(ViewTraits<ST, SP...>::rank) == unsigned(0)))>::type* ="},
{"lineNum":" 1420","line":"        nullptr) {"},
{"lineNum":" 1421","line":"  using dst_type = View<DT, DP...>;"},
{"lineNum":" 1422","line":"  using src_type = View<ST, SP...>;"},
{"lineNum":" 1423","line":""},
{"lineNum":" 1424","line":"  using value_type       = typename dst_type::value_type;"},
{"lineNum":" 1425","line":"  using dst_memory_space = typename dst_type::memory_space;"},
{"lineNum":" 1426","line":"  using src_memory_space = typename src_type::memory_space;"},
{"lineNum":" 1427","line":""},
{"lineNum":" 1428","line":"  static_assert(std::is_same<typename dst_type::value_type,"},
{"lineNum":" 1429","line":"                             typename src_type::non_const_value_type>::value,"},
{"lineNum":" 1430","line":"                \"deep_copy requires matching non-const destination type\");"},
{"lineNum":" 1431","line":""},
{"lineNum":" 1432","line":"  if (Kokkos::Tools::Experimental::get_callbacks().begin_deep_copy != nullptr) {"},
{"lineNum":" 1433","line":"    Kokkos::Profiling::beginDeepCopy("},
{"lineNum":" 1434","line":"        Kokkos::Profiling::make_space_handle(dst_memory_space::name()),"},
{"lineNum":" 1435","line":"        dst.label(), dst.data(),"},
{"lineNum":" 1436","line":"        Kokkos::Profiling::make_space_handle(src_memory_space::name()),"},
{"lineNum":" 1437","line":"        src.label(), src.data(),"},
{"lineNum":" 1438","line":"        src.span() * sizeof(typename dst_type::value_type));"},
{"lineNum":" 1439","line":"  }"},
{"lineNum":" 1440","line":""},
{"lineNum":" 1441","line":"  if (dst.data() == nullptr && src.data() == nullptr) {"},
{"lineNum":" 1442","line":"    Kokkos::fence();"},
{"lineNum":" 1443","line":"    if (Kokkos::Tools::Experimental::get_callbacks().end_deep_copy != nullptr) {"},
{"lineNum":" 1444","line":"      Kokkos::Profiling::endDeepCopy();"},
{"lineNum":" 1445","line":"    }"},
{"lineNum":" 1446","line":"    return;"},
{"lineNum":" 1447","line":"  }"},
{"lineNum":" 1448","line":""},
{"lineNum":" 1449","line":"  Kokkos::fence();"},
{"lineNum":" 1450","line":"  if (dst.data() != src.data()) {"},
{"lineNum":" 1451","line":"    Kokkos::Impl::DeepCopy<dst_memory_space, src_memory_space>("},
{"lineNum":" 1452","line":"        dst.data(), src.data(), sizeof(value_type));"},
{"lineNum":" 1453","line":"    Kokkos::fence();"},
{"lineNum":" 1454","line":"  }"},
{"lineNum":" 1455","line":"  if (Kokkos::Tools::Experimental::get_callbacks().end_deep_copy != nullptr) {"},
{"lineNum":" 1456","line":"    Kokkos::Profiling::endDeepCopy();"},
{"lineNum":" 1457","line":"  }"},
{"lineNum":" 1458","line":"}"},
{"lineNum":" 1459","line":""},
{"lineNum":" 1460","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1461","line":"/** \\brief  A deep copy between views of the default specialization, compatible"},
{"lineNum":" 1462","line":" * type, same non-zero rank, same contiguous layout."},
{"lineNum":" 1463","line":" */"},
{"lineNum":" 1464","line":"template <class DT, class... DP, class ST, class... SP>"},
{"lineNum":" 1465","line":"inline void deep_copy("},
{"lineNum":" 1466","line":"    const View<DT, DP...>& dst, const View<ST, SP...>& src,"},
{"lineNum":" 1467","line":"    typename std::enable_if<("},
{"lineNum":" 1468","line":"        std::is_same<typename ViewTraits<DT, DP...>::specialize, void>::value &&"},
{"lineNum":" 1469","line":"        std::is_same<typename ViewTraits<ST, SP...>::specialize, void>::value &&"},
{"lineNum":" 1470","line":"        (unsigned(ViewTraits<DT, DP...>::rank) != 0 ||"},
{"lineNum":" 1471","line":"         unsigned(ViewTraits<ST, SP...>::rank) != 0))>::type* = nullptr) {","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":" 1472","line":"  using dst_type            = View<DT, DP...>;"},
{"lineNum":" 1473","line":"  using src_type            = View<ST, SP...>;"},
{"lineNum":" 1474","line":"  using dst_execution_space = typename dst_type::execution_space;"},
{"lineNum":" 1475","line":"  using src_execution_space = typename src_type::execution_space;"},
{"lineNum":" 1476","line":"  using dst_memory_space    = typename dst_type::memory_space;"},
{"lineNum":" 1477","line":"  using src_memory_space    = typename src_type::memory_space;"},
{"lineNum":" 1478","line":"  using dst_value_type      = typename dst_type::value_type;"},
{"lineNum":" 1479","line":"  using src_value_type      = typename src_type::value_type;"},
{"lineNum":" 1480","line":""},
{"lineNum":" 1481","line":"  static_assert(std::is_same<typename dst_type::value_type,"},
{"lineNum":" 1482","line":"                             typename dst_type::non_const_value_type>::value,"},
{"lineNum":" 1483","line":"                \"deep_copy requires non-const destination type\");"},
{"lineNum":" 1484","line":""},
{"lineNum":" 1485","line":"  static_assert((unsigned(dst_type::rank) == unsigned(src_type::rank)),"},
{"lineNum":" 1486","line":"                \"deep_copy requires Views of equal rank\");"},
{"lineNum":" 1487","line":""},
{"lineNum":" 1488","line":"  if (Kokkos::Tools::Experimental::get_callbacks().begin_deep_copy != nullptr) {","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":" 1489","line":"    Kokkos::Profiling::beginDeepCopy(","class":"lineNoCov","hits":"0","possible_hits":"23",},
{"lineNum":" 1490","line":"        Kokkos::Profiling::make_space_handle(dst_memory_space::name()),","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":" 1491","line":"        dst.label(), dst.data(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1492","line":"        Kokkos::Profiling::make_space_handle(src_memory_space::name()),","class":"lineNoCov","hits":"0","possible_hits":"22",},
{"lineNum":" 1493","line":"        src.label(), src.data(),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1494","line":"        src.span() * sizeof(typename dst_type::value_type));","class":"lineNoCov","hits":"0","possible_hits":"26",},
{"lineNum":" 1495","line":"  }"},
{"lineNum":" 1496","line":""},
{"lineNum":" 1497","line":"  if (dst.data() == nullptr || src.data() == nullptr) {","class":"lineNoCov","hits":"0","possible_hits":"42",},
{"lineNum":" 1498","line":"    // throw if dimension mismatch"},
{"lineNum":" 1499","line":"    if ((src.extent(0) != dst.extent(0)) || (src.extent(1) != dst.extent(1)) ||","class":"lineNoCov","hits":"0","possible_hits":"37",},
{"lineNum":" 1500","line":"        (src.extent(2) != dst.extent(2)) || (src.extent(3) != dst.extent(3)) ||","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1501","line":"        (src.extent(4) != dst.extent(4)) || (src.extent(5) != dst.extent(5)) ||","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1502","line":"        (src.extent(6) != dst.extent(6)) || (src.extent(7) != dst.extent(7))) {","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":" 1503","line":"      std::string message("},
{"lineNum":" 1504","line":"          \"Deprecation Error: Kokkos::deep_copy extents of views don\'t \""},
{"lineNum":" 1505","line":"          \"match: \");"},
{"lineNum":" 1506","line":"      message += dst.label();"},
{"lineNum":" 1507","line":"      message += \"(\";"},
{"lineNum":" 1508","line":"      for (int r = 0; r < dst_type::Rank - 1; r++) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1509","line":"        message += std::to_string(dst.extent(r));","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1510","line":"        message += \",\";"},
{"lineNum":" 1511","line":"      }"},
{"lineNum":" 1512","line":"      message += std::to_string(dst.extent(dst_type::Rank - 1));","class":"lineNoCov","hits":"0","possible_hits":"23",},
{"lineNum":" 1513","line":"      message += \") \";"},
{"lineNum":" 1514","line":"      message += src.label();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1515","line":"      message += \"(\";"},
{"lineNum":" 1516","line":"      for (int r = 0; r < src_type::Rank - 1; r++) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1517","line":"        message += std::to_string(src.extent(r));","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1518","line":"        message += \",\";"},
{"lineNum":" 1519","line":"      }"},
{"lineNum":" 1520","line":"      message += std::to_string(src.extent(src_type::Rank - 1));","class":"lineNoCov","hits":"0","possible_hits":"23",},
{"lineNum":" 1521","line":"      message += \") \";"},
{"lineNum":" 1522","line":""},
{"lineNum":" 1523","line":"      Kokkos::Impl::throw_runtime_exception(message);","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":" 1524","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1525","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1526","line":"    if (Kokkos::Tools::Experimental::get_callbacks().end_deep_copy != nullptr) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1527","line":"      Kokkos::Profiling::endDeepCopy();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1528","line":"    }"},
{"lineNum":" 1529","line":"    return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1530","line":"  }"},
{"lineNum":" 1531","line":""},
{"lineNum":" 1532","line":"  enum {"},
{"lineNum":" 1533","line":"    DstExecCanAccessSrc ="},
{"lineNum":" 1534","line":"        Kokkos::Impl::SpaceAccessibility<dst_execution_space,"},
{"lineNum":" 1535","line":"                                         src_memory_space>::accessible"},
{"lineNum":" 1536","line":"  };"},
{"lineNum":" 1537","line":""},
{"lineNum":" 1538","line":"  enum {"},
{"lineNum":" 1539","line":"    SrcExecCanAccessDst ="},
{"lineNum":" 1540","line":"        Kokkos::Impl::SpaceAccessibility<src_execution_space,"},
{"lineNum":" 1541","line":"                                         dst_memory_space>::accessible"},
{"lineNum":" 1542","line":"  };"},
{"lineNum":" 1543","line":""},
{"lineNum":" 1544","line":"  // Checking for Overlapping Views."},
{"lineNum":" 1545","line":"  dst_value_type* dst_start = dst.data();"},
{"lineNum":" 1546","line":"  dst_value_type* dst_end   = dst.data() + dst.span();","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":" 1547","line":"  src_value_type* src_start = src.data();"},
{"lineNum":" 1548","line":"  src_value_type* src_end   = src.data() + src.span();","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":" 1549","line":"  if (((std::ptrdiff_t)dst_start == (std::ptrdiff_t)src_start) &&","class":"lineNoCov","hits":"0","possible_hits":"22",},
{"lineNum":" 1550","line":"      ((std::ptrdiff_t)dst_end == (std::ptrdiff_t)src_end) &&","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1551","line":"      (dst.span_is_contiguous() && src.span_is_contiguous())) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1552","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1553","line":"    if (Kokkos::Tools::Experimental::get_callbacks().end_deep_copy != nullptr) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1554","line":"      Kokkos::Profiling::endDeepCopy();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1555","line":"    }"},
{"lineNum":" 1556","line":"    return;"},
{"lineNum":" 1557","line":"  }"},
{"lineNum":" 1558","line":""},
{"lineNum":" 1559","line":"  if ((((std::ptrdiff_t)dst_start < (std::ptrdiff_t)src_end) &&","class":"lineNoCov","hits":"0","possible_hits":"22",},
{"lineNum":" 1560","line":"       ((std::ptrdiff_t)dst_end > (std::ptrdiff_t)src_start)) &&","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":" 1561","line":"      ((dst.span_is_contiguous() && src.span_is_contiguous()))) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1562","line":"    std::string message(\"Error: Kokkos::deep_copy of overlapping views: \");"},
{"lineNum":" 1563","line":"    message += dst.label();"},
{"lineNum":" 1564","line":"    message += \"(\";"},
{"lineNum":" 1565","line":"    message += std::to_string((std::ptrdiff_t)dst_start);","class":"lineNoCov","hits":"0","possible_hits":"23",},
{"lineNum":" 1566","line":"    message += \",\";"},
{"lineNum":" 1567","line":"    message += std::to_string((std::ptrdiff_t)dst_end);","class":"lineNoCov","hits":"0","possible_hits":"23",},
{"lineNum":" 1568","line":"    message += \") \";"},
{"lineNum":" 1569","line":"    message += src.label();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1570","line":"    message += \"(\";"},
{"lineNum":" 1571","line":"    message += std::to_string((std::ptrdiff_t)src_start);","class":"lineNoCov","hits":"0","possible_hits":"23",},
{"lineNum":" 1572","line":"    message += \",\";"},
{"lineNum":" 1573","line":"    message += std::to_string((std::ptrdiff_t)src_end);","class":"lineNoCov","hits":"0","possible_hits":"23",},
{"lineNum":" 1574","line":"    message += \") \";"},
{"lineNum":" 1575","line":"    Kokkos::Impl::throw_runtime_exception(message);","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":" 1576","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1577","line":""},
{"lineNum":" 1578","line":"  // Check for same extents"},
{"lineNum":" 1579","line":"  if ((src.extent(0) != dst.extent(0)) || (src.extent(1) != dst.extent(1)) ||","class":"lineNoCov","hits":"0","possible_hits":"37",},
{"lineNum":" 1580","line":"      (src.extent(2) != dst.extent(2)) || (src.extent(3) != dst.extent(3)) ||","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1581","line":"      (src.extent(4) != dst.extent(4)) || (src.extent(5) != dst.extent(5)) ||","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1582","line":"      (src.extent(6) != dst.extent(6)) || (src.extent(7) != dst.extent(7))) {","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":" 1583","line":"    std::string message("},
{"lineNum":" 1584","line":"        \"Deprecation Error: Kokkos::deep_copy extents of views don\'t match: \");"},
{"lineNum":" 1585","line":"    message += dst.label();"},
{"lineNum":" 1586","line":"    message += \"(\";"},
{"lineNum":" 1587","line":"    for (int r = 0; r < dst_type::Rank - 1; r++) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1588","line":"      message += std::to_string(dst.extent(r));","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1589","line":"      message += \",\";"},
{"lineNum":" 1590","line":"    }"},
{"lineNum":" 1591","line":"    message += std::to_string(dst.extent(dst_type::Rank - 1));","class":"lineNoCov","hits":"0","possible_hits":"23",},
{"lineNum":" 1592","line":"    message += \") \";"},
{"lineNum":" 1593","line":"    message += src.label();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1594","line":"    message += \"(\";"},
{"lineNum":" 1595","line":"    for (int r = 0; r < src_type::Rank - 1; r++) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1596","line":"      message += std::to_string(src.extent(r));","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1597","line":"      message += \",\";"},
{"lineNum":" 1598","line":"    }"},
{"lineNum":" 1599","line":"    message += std::to_string(src.extent(src_type::Rank - 1));","class":"lineNoCov","hits":"0","possible_hits":"23",},
{"lineNum":" 1600","line":"    message += \") \";"},
{"lineNum":" 1601","line":""},
{"lineNum":" 1602","line":"    Kokkos::Impl::throw_runtime_exception(message);","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":" 1603","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1604","line":""},
{"lineNum":" 1605","line":"  // If same type, equal layout, equal dimensions, equal span, and contiguous"},
{"lineNum":" 1606","line":"  // memory then can byte-wise copy"},
{"lineNum":" 1607","line":""},
{"lineNum":" 1608","line":"  if (std::is_same<typename dst_type::value_type,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1609","line":"                   typename src_type::non_const_value_type>::value &&"},
{"lineNum":" 1610","line":"      (std::is_same<typename dst_type::array_layout,"},
{"lineNum":" 1611","line":"                    typename src_type::array_layout>::value ||"},
{"lineNum":" 1612","line":"       (dst_type::rank == 1 && src_type::rank == 1)) &&"},
{"lineNum":" 1613","line":"      dst.span_is_contiguous() && src.span_is_contiguous() &&","class":"lineNoCov","hits":"0","possible_hits":"19",},
{"lineNum":" 1614","line":"      ((dst_type::rank < 1) || (dst.stride_0() == src.stride_0())) &&","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1615","line":"      ((dst_type::rank < 2) || (dst.stride_1() == src.stride_1())) &&","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1616","line":"      ((dst_type::rank < 3) || (dst.stride_2() == src.stride_2())) &&"},
{"lineNum":" 1617","line":"      ((dst_type::rank < 4) || (dst.stride_3() == src.stride_3())) &&"},
{"lineNum":" 1618","line":"      ((dst_type::rank < 5) || (dst.stride_4() == src.stride_4())) &&"},
{"lineNum":" 1619","line":"      ((dst_type::rank < 6) || (dst.stride_5() == src.stride_5())) &&"},
{"lineNum":" 1620","line":"      ((dst_type::rank < 7) || (dst.stride_6() == src.stride_6())) &&"},
{"lineNum":" 1621","line":"      ((dst_type::rank < 8) || (dst.stride_7() == src.stride_7()))) {"},
{"lineNum":" 1622","line":"    const size_t nbytes = sizeof(typename dst_type::value_type) * dst.span();","class":"lineNoCov","hits":"0","possible_hits":"17",},
{"lineNum":" 1623","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":" 1624","line":"    if ((void*)dst.data() != (void*)src.data()) {","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":" 1625","line":"      Kokkos::Impl::DeepCopy<dst_memory_space, src_memory_space>("},
{"lineNum":" 1626","line":"          dst.data(), src.data(), nbytes);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1627","line":"      Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1628","line":"    }"},
{"lineNum":" 1629","line":"  } else {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1630","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1631","line":"    Impl::view_copy(dst, src);","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1632","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1633","line":"  }"},
{"lineNum":" 1634","line":"  if (Kokkos::Tools::Experimental::get_callbacks().end_deep_copy != nullptr) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1635","line":"    Kokkos::Profiling::endDeepCopy();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1636","line":"  }"},
{"lineNum":" 1637","line":"}","class":"lineNoCov","hits":"0","possible_hits":"24",},
{"lineNum":" 1638","line":""},
{"lineNum":" 1639","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1640","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1641","line":"namespace Experimental {"},
{"lineNum":" 1642","line":"/** \\brief  A local deep copy between views of the default specialization,"},
{"lineNum":" 1643","line":" * compatible type, same non-zero rank."},
{"lineNum":" 1644","line":" */"},
{"lineNum":" 1645","line":"template <class TeamType, class DT, class... DP, class ST, class... SP>"},
{"lineNum":" 1646","line":"void KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1647","line":"local_deep_copy_contiguous(const TeamType& team, const View<DT, DP...>& dst,"},
{"lineNum":" 1648","line":"                           const View<ST, SP...>& src) {"},
{"lineNum":" 1649","line":"  Kokkos::parallel_for(Kokkos::TeamThreadRange(team, src.span()),"},
{"lineNum":" 1650","line":"                       [&](const int& i) { dst.data()[i] = src.data()[i]; });"},
{"lineNum":" 1651","line":"}"},
{"lineNum":" 1652","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1653","line":"template <class DT, class... DP, class ST, class... SP>"},
{"lineNum":" 1654","line":"void KOKKOS_INLINE_FUNCTION local_deep_copy_contiguous("},
{"lineNum":" 1655","line":"    const View<DT, DP...>& dst, const View<ST, SP...>& src) {"},
{"lineNum":" 1656","line":"  for (size_t i = 0; i < src.span(); ++i) {"},
{"lineNum":" 1657","line":"    dst.data()[i] = src.data()[i];"},
{"lineNum":" 1658","line":"  }"},
{"lineNum":" 1659","line":"}"},
{"lineNum":" 1660","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1661","line":"template <class TeamType, class DT, class... DP, class ST, class... SP>"},
{"lineNum":" 1662","line":"void KOKKOS_INLINE_FUNCTION local_deep_copy("},
{"lineNum":" 1663","line":"    const TeamType& team, const View<DT, DP...>& dst,"},
{"lineNum":" 1664","line":"    const View<ST, SP...>& src,"},
{"lineNum":" 1665","line":"    typename std::enable_if<(unsigned(ViewTraits<DT, DP...>::rank) == 1 &&"},
{"lineNum":" 1666","line":"                             unsigned(ViewTraits<ST, SP...>::rank) =="},
{"lineNum":" 1667","line":"                                 1)>::type* = nullptr) {"},
{"lineNum":" 1668","line":"  if (dst.data() == nullptr) {"},
{"lineNum":" 1669","line":"    return;"},
{"lineNum":" 1670","line":"  }"},
{"lineNum":" 1671","line":""},
{"lineNum":" 1672","line":"  const size_t N = dst.extent(0);"},
{"lineNum":" 1673","line":""},
{"lineNum":" 1674","line":"  team.team_barrier();"},
{"lineNum":" 1675","line":"  Kokkos::parallel_for(Kokkos::TeamThreadRange(team, N),"},
{"lineNum":" 1676","line":"                       [&](const int& i) { dst(i) = src(i); });"},
{"lineNum":" 1677","line":"  team.team_barrier();"},
{"lineNum":" 1678","line":"}"},
{"lineNum":" 1679","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1680","line":"template <class TeamType, class DT, class... DP, class ST, class... SP>"},
{"lineNum":" 1681","line":"void KOKKOS_INLINE_FUNCTION local_deep_copy("},
{"lineNum":" 1682","line":"    const TeamType& team, const View<DT, DP...>& dst,"},
{"lineNum":" 1683","line":"    const View<ST, SP...>& src,"},
{"lineNum":" 1684","line":"    typename std::enable_if<(unsigned(ViewTraits<DT, DP...>::rank) == 2 &&"},
{"lineNum":" 1685","line":"                             unsigned(ViewTraits<ST, SP...>::rank) =="},
{"lineNum":" 1686","line":"                                 2)>::type* = nullptr) {"},
{"lineNum":" 1687","line":"  if (dst.data() == nullptr) {"},
{"lineNum":" 1688","line":"    return;"},
{"lineNum":" 1689","line":"  }"},
{"lineNum":" 1690","line":""},
{"lineNum":" 1691","line":"  const size_t N = dst.extent(0) * dst.extent(1);"},
{"lineNum":" 1692","line":""},
{"lineNum":" 1693","line":"  if (dst.span_is_contiguous() && src.span_is_contiguous()) {"},
{"lineNum":" 1694","line":"    team.team_barrier();"},
{"lineNum":" 1695","line":"    local_deep_copy_contiguous(team, dst, src);"},
{"lineNum":" 1696","line":"    team.team_barrier();"},
{"lineNum":" 1697","line":"  } else {"},
{"lineNum":" 1698","line":"    team.team_barrier();"},
{"lineNum":" 1699","line":"    Kokkos::parallel_for(Kokkos::TeamThreadRange(team, N), [&](const int& i) {"},
{"lineNum":" 1700","line":"      int i0      = i % dst.extent(0);"},
{"lineNum":" 1701","line":"      int i1      = i / dst.extent(0);"},
{"lineNum":" 1702","line":"      dst(i0, i1) = src(i0, i1);"},
{"lineNum":" 1703","line":"    });"},
{"lineNum":" 1704","line":"    team.team_barrier();"},
{"lineNum":" 1705","line":"  }"},
{"lineNum":" 1706","line":"}"},
{"lineNum":" 1707","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1708","line":"template <class TeamType, class DT, class... DP, class ST, class... SP>"},
{"lineNum":" 1709","line":"void KOKKOS_INLINE_FUNCTION local_deep_copy("},
{"lineNum":" 1710","line":"    const TeamType& team, const View<DT, DP...>& dst,"},
{"lineNum":" 1711","line":"    const View<ST, SP...>& src,"},
{"lineNum":" 1712","line":"    typename std::enable_if<(unsigned(ViewTraits<DT, DP...>::rank) == 3 &&"},
{"lineNum":" 1713","line":"                             unsigned(ViewTraits<ST, SP...>::rank) =="},
{"lineNum":" 1714","line":"                                 3)>::type* = nullptr) {"},
{"lineNum":" 1715","line":"  if (dst.data() == nullptr) {"},
{"lineNum":" 1716","line":"    return;"},
{"lineNum":" 1717","line":"  }"},
{"lineNum":" 1718","line":""},
{"lineNum":" 1719","line":"  const size_t N = dst.extent(0) * dst.extent(1) * dst.extent(2);"},
{"lineNum":" 1720","line":""},
{"lineNum":" 1721","line":"  if (dst.span_is_contiguous() && src.span_is_contiguous()) {"},
{"lineNum":" 1722","line":"    team.team_barrier();"},
{"lineNum":" 1723","line":"    local_deep_copy_contiguous(team, dst, src);"},
{"lineNum":" 1724","line":"    team.team_barrier();"},
{"lineNum":" 1725","line":"  } else {"},
{"lineNum":" 1726","line":"    team.team_barrier();"},
{"lineNum":" 1727","line":"    Kokkos::parallel_for(Kokkos::TeamThreadRange(team, N), [&](const int& i) {"},
{"lineNum":" 1728","line":"      int i0          = i % dst.extent(0);"},
{"lineNum":" 1729","line":"      int itmp        = i / dst.extent(0);"},
{"lineNum":" 1730","line":"      int i1          = itmp % dst.extent(1);"},
{"lineNum":" 1731","line":"      int i2          = itmp / dst.extent(1);"},
{"lineNum":" 1732","line":"      dst(i0, i1, i2) = src(i0, i1, i2);"},
{"lineNum":" 1733","line":"    });"},
{"lineNum":" 1734","line":"    team.team_barrier();"},
{"lineNum":" 1735","line":"  }"},
{"lineNum":" 1736","line":"}"},
{"lineNum":" 1737","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1738","line":"template <class TeamType, class DT, class... DP, class ST, class... SP>"},
{"lineNum":" 1739","line":"void KOKKOS_INLINE_FUNCTION local_deep_copy("},
{"lineNum":" 1740","line":"    const TeamType& team, const View<DT, DP...>& dst,"},
{"lineNum":" 1741","line":"    const View<ST, SP...>& src,"},
{"lineNum":" 1742","line":"    typename std::enable_if<(unsigned(ViewTraits<DT, DP...>::rank) == 4 &&"},
{"lineNum":" 1743","line":"                             unsigned(ViewTraits<ST, SP...>::rank) =="},
{"lineNum":" 1744","line":"                                 4)>::type* = nullptr) {"},
{"lineNum":" 1745","line":"  if (dst.data() == nullptr) {"},
{"lineNum":" 1746","line":"    return;"},
{"lineNum":" 1747","line":"  }"},
{"lineNum":" 1748","line":""},
{"lineNum":" 1749","line":"  const size_t N ="},
{"lineNum":" 1750","line":"      dst.extent(0) * dst.extent(1) * dst.extent(2) * dst.extent(3);"},
{"lineNum":" 1751","line":""},
{"lineNum":" 1752","line":"  if (dst.span_is_contiguous() && src.span_is_contiguous()) {"},
{"lineNum":" 1753","line":"    team.team_barrier();"},
{"lineNum":" 1754","line":"    local_deep_copy_contiguous(team, dst, src);"},
{"lineNum":" 1755","line":"    team.team_barrier();"},
{"lineNum":" 1756","line":"  } else {"},
{"lineNum":" 1757","line":"    team.team_barrier();"},
{"lineNum":" 1758","line":"    Kokkos::parallel_for(Kokkos::TeamThreadRange(team, N), [&](const int& i) {"},
{"lineNum":" 1759","line":"      int i0              = i % dst.extent(0);"},
{"lineNum":" 1760","line":"      int itmp            = i / dst.extent(0);"},
{"lineNum":" 1761","line":"      int i1              = itmp % dst.extent(1);"},
{"lineNum":" 1762","line":"      itmp                = itmp / dst.extent(1);"},
{"lineNum":" 1763","line":"      int i2              = itmp % dst.extent(2);"},
{"lineNum":" 1764","line":"      int i3              = itmp / dst.extent(2);"},
{"lineNum":" 1765","line":"      dst(i0, i1, i2, i3) = src(i0, i1, i2, i3);"},
{"lineNum":" 1766","line":"    });"},
{"lineNum":" 1767","line":"    team.team_barrier();"},
{"lineNum":" 1768","line":"  }"},
{"lineNum":" 1769","line":"}"},
{"lineNum":" 1770","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1771","line":"template <class TeamType, class DT, class... DP, class ST, class... SP>"},
{"lineNum":" 1772","line":"void KOKKOS_INLINE_FUNCTION local_deep_copy("},
{"lineNum":" 1773","line":"    const TeamType& team, const View<DT, DP...>& dst,"},
{"lineNum":" 1774","line":"    const View<ST, SP...>& src,"},
{"lineNum":" 1775","line":"    typename std::enable_if<(unsigned(ViewTraits<DT, DP...>::rank) == 5 &&"},
{"lineNum":" 1776","line":"                             unsigned(ViewTraits<ST, SP...>::rank) =="},
{"lineNum":" 1777","line":"                                 5)>::type* = nullptr) {"},
{"lineNum":" 1778","line":"  if (dst.data() == nullptr) {"},
{"lineNum":" 1779","line":"    return;"},
{"lineNum":" 1780","line":"  }"},
{"lineNum":" 1781","line":""},
{"lineNum":" 1782","line":"  const size_t N = dst.extent(0) * dst.extent(1) * dst.extent(2) *"},
{"lineNum":" 1783","line":"                   dst.extent(3) * dst.extent(4);"},
{"lineNum":" 1784","line":""},
{"lineNum":" 1785","line":"  if (dst.span_is_contiguous() && src.span_is_contiguous()) {"},
{"lineNum":" 1786","line":"    team.team_barrier();"},
{"lineNum":" 1787","line":"    local_deep_copy_contiguous(team, dst, src);"},
{"lineNum":" 1788","line":"    team.team_barrier();"},
{"lineNum":" 1789","line":"  } else {"},
{"lineNum":" 1790","line":"    team.team_barrier();"},
{"lineNum":" 1791","line":"    Kokkos::parallel_for(Kokkos::TeamThreadRange(team, N), [&](const int& i) {"},
{"lineNum":" 1792","line":"      int i0                  = i % dst.extent(0);"},
{"lineNum":" 1793","line":"      int itmp                = i / dst.extent(0);"},
{"lineNum":" 1794","line":"      int i1                  = itmp % dst.extent(1);"},
{"lineNum":" 1795","line":"      itmp                    = itmp / dst.extent(1);"},
{"lineNum":" 1796","line":"      int i2                  = itmp % dst.extent(2);"},
{"lineNum":" 1797","line":"      itmp                    = itmp / dst.extent(2);"},
{"lineNum":" 1798","line":"      int i3                  = itmp % dst.extent(3);"},
{"lineNum":" 1799","line":"      int i4                  = itmp / dst.extent(3);"},
{"lineNum":" 1800","line":"      dst(i0, i1, i2, i3, i4) = src(i0, i1, i2, i3, i4);"},
{"lineNum":" 1801","line":"    });"},
{"lineNum":" 1802","line":"    team.team_barrier();"},
{"lineNum":" 1803","line":"  }"},
{"lineNum":" 1804","line":"}"},
{"lineNum":" 1805","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1806","line":"template <class TeamType, class DT, class... DP, class ST, class... SP>"},
{"lineNum":" 1807","line":"void KOKKOS_INLINE_FUNCTION local_deep_copy("},
{"lineNum":" 1808","line":"    const TeamType& team, const View<DT, DP...>& dst,"},
{"lineNum":" 1809","line":"    const View<ST, SP...>& src,"},
{"lineNum":" 1810","line":"    typename std::enable_if<(unsigned(ViewTraits<DT, DP...>::rank) == 6 &&"},
{"lineNum":" 1811","line":"                             unsigned(ViewTraits<ST, SP...>::rank) =="},
{"lineNum":" 1812","line":"                                 6)>::type* = nullptr) {"},
{"lineNum":" 1813","line":"  if (dst.data() == nullptr) {"},
{"lineNum":" 1814","line":"    return;"},
{"lineNum":" 1815","line":"  }"},
{"lineNum":" 1816","line":""},
{"lineNum":" 1817","line":"  const size_t N = dst.extent(0) * dst.extent(1) * dst.extent(2) *"},
{"lineNum":" 1818","line":"                   dst.extent(3) * dst.extent(4) * dst.extent(5);"},
{"lineNum":" 1819","line":""},
{"lineNum":" 1820","line":"  if (dst.span_is_contiguous() && src.span_is_contiguous()) {"},
{"lineNum":" 1821","line":"    team.team_barrier();"},
{"lineNum":" 1822","line":"    local_deep_copy_contiguous(team, dst, src);"},
{"lineNum":" 1823","line":"    team.team_barrier();"},
{"lineNum":" 1824","line":"  } else {"},
{"lineNum":" 1825","line":"    team.team_barrier();"},
{"lineNum":" 1826","line":"    Kokkos::parallel_for(Kokkos::TeamThreadRange(team, N), [&](const int& i) {"},
{"lineNum":" 1827","line":"      int i0                      = i % dst.extent(0);"},
{"lineNum":" 1828","line":"      int itmp                    = i / dst.extent(0);"},
{"lineNum":" 1829","line":"      int i1                      = itmp % dst.extent(1);"},
{"lineNum":" 1830","line":"      itmp                        = itmp / dst.extent(1);"},
{"lineNum":" 1831","line":"      int i2                      = itmp % dst.extent(2);"},
{"lineNum":" 1832","line":"      itmp                        = itmp / dst.extent(2);"},
{"lineNum":" 1833","line":"      int i3                      = itmp % dst.extent(3);"},
{"lineNum":" 1834","line":"      itmp                        = itmp / dst.extent(3);"},
{"lineNum":" 1835","line":"      int i4                      = itmp % dst.extent(4);"},
{"lineNum":" 1836","line":"      int i5                      = itmp / dst.extent(4);"},
{"lineNum":" 1837","line":"      dst(i0, i1, i2, i3, i4, i5) = src(i0, i1, i2, i3, i4, i5);"},
{"lineNum":" 1838","line":"    });"},
{"lineNum":" 1839","line":"    team.team_barrier();"},
{"lineNum":" 1840","line":"  }"},
{"lineNum":" 1841","line":"}"},
{"lineNum":" 1842","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1843","line":"template <class TeamType, class DT, class... DP, class ST, class... SP>"},
{"lineNum":" 1844","line":"void KOKKOS_INLINE_FUNCTION local_deep_copy("},
{"lineNum":" 1845","line":"    const TeamType& team, const View<DT, DP...>& dst,"},
{"lineNum":" 1846","line":"    const View<ST, SP...>& src,"},
{"lineNum":" 1847","line":"    typename std::enable_if<(unsigned(ViewTraits<DT, DP...>::rank) == 7 &&"},
{"lineNum":" 1848","line":"                             unsigned(ViewTraits<ST, SP...>::rank) =="},
{"lineNum":" 1849","line":"                                 7)>::type* = nullptr) {"},
{"lineNum":" 1850","line":"  if (dst.data() == nullptr) {"},
{"lineNum":" 1851","line":"    return;"},
{"lineNum":" 1852","line":"  }"},
{"lineNum":" 1853","line":""},
{"lineNum":" 1854","line":"  const size_t N = dst.extent(0) * dst.extent(1) * dst.extent(2) *"},
{"lineNum":" 1855","line":"                   dst.extent(3) * dst.extent(4) * dst.extent(5) *"},
{"lineNum":" 1856","line":"                   dst.extent(6);"},
{"lineNum":" 1857","line":""},
{"lineNum":" 1858","line":"  if (dst.span_is_contiguous() && src.span_is_contiguous()) {"},
{"lineNum":" 1859","line":"    team.team_barrier();"},
{"lineNum":" 1860","line":"    local_deep_copy_contiguous(team, dst, src);"},
{"lineNum":" 1861","line":"    team.team_barrier();"},
{"lineNum":" 1862","line":"  } else {"},
{"lineNum":" 1863","line":"    team.team_barrier();"},
{"lineNum":" 1864","line":"    Kokkos::parallel_for(Kokkos::TeamThreadRange(team, N), [&](const int& i) {"},
{"lineNum":" 1865","line":"      int i0                          = i % dst.extent(0);"},
{"lineNum":" 1866","line":"      int itmp                        = i / dst.extent(0);"},
{"lineNum":" 1867","line":"      int i1                          = itmp % dst.extent(1);"},
{"lineNum":" 1868","line":"      itmp                            = itmp / dst.extent(1);"},
{"lineNum":" 1869","line":"      int i2                          = itmp % dst.extent(2);"},
{"lineNum":" 1870","line":"      itmp                            = itmp / dst.extent(2);"},
{"lineNum":" 1871","line":"      int i3                          = itmp % dst.extent(3);"},
{"lineNum":" 1872","line":"      itmp                            = itmp / dst.extent(3);"},
{"lineNum":" 1873","line":"      int i4                          = itmp % dst.extent(4);"},
{"lineNum":" 1874","line":"      itmp                            = itmp / dst.extent(4);"},
{"lineNum":" 1875","line":"      int i5                          = itmp % dst.extent(5);"},
{"lineNum":" 1876","line":"      int i6                          = itmp / dst.extent(5);"},
{"lineNum":" 1877","line":"      dst(i0, i1, i2, i3, i4, i5, i6) = src(i0, i1, i2, i3, i4, i5, i6);"},
{"lineNum":" 1878","line":"    });"},
{"lineNum":" 1879","line":"    team.team_barrier();"},
{"lineNum":" 1880","line":"  }"},
{"lineNum":" 1881","line":"}"},
{"lineNum":" 1882","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1883","line":"template <class DT, class... DP, class ST, class... SP>"},
{"lineNum":" 1884","line":"void KOKKOS_INLINE_FUNCTION local_deep_copy("},
{"lineNum":" 1885","line":"    const View<DT, DP...>& dst, const View<ST, SP...>& src,"},
{"lineNum":" 1886","line":"    typename std::enable_if<(unsigned(ViewTraits<DT, DP...>::rank) == 1 &&"},
{"lineNum":" 1887","line":"                             unsigned(ViewTraits<ST, SP...>::rank) =="},
{"lineNum":" 1888","line":"                                 1)>::type* = nullptr) {"},
{"lineNum":" 1889","line":"  if (dst.data() == nullptr) {"},
{"lineNum":" 1890","line":"    return;"},
{"lineNum":" 1891","line":"  }"},
{"lineNum":" 1892","line":""},
{"lineNum":" 1893","line":"  const size_t N = dst.extent(0);"},
{"lineNum":" 1894","line":""},
{"lineNum":" 1895","line":"  for (size_t i = 0; i < N; ++i) {"},
{"lineNum":" 1896","line":"    dst(i) = src(i);"},
{"lineNum":" 1897","line":"  }"},
{"lineNum":" 1898","line":"}"},
{"lineNum":" 1899","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1900","line":"template <class DT, class... DP, class ST, class... SP>"},
{"lineNum":" 1901","line":"void KOKKOS_INLINE_FUNCTION local_deep_copy("},
{"lineNum":" 1902","line":"    const View<DT, DP...>& dst, const View<ST, SP...>& src,"},
{"lineNum":" 1903","line":"    typename std::enable_if<(unsigned(ViewTraits<DT, DP...>::rank) == 2 &&"},
{"lineNum":" 1904","line":"                             unsigned(ViewTraits<ST, SP...>::rank) =="},
{"lineNum":" 1905","line":"                                 2)>::type* = nullptr) {"},
{"lineNum":" 1906","line":"  if (dst.data() == nullptr) {"},
{"lineNum":" 1907","line":"    return;"},
{"lineNum":" 1908","line":"  }"},
{"lineNum":" 1909","line":""},
{"lineNum":" 1910","line":"  if (dst.span_is_contiguous() && src.span_is_contiguous()) {"},
{"lineNum":" 1911","line":"    local_deep_copy_contiguous(dst, src);"},
{"lineNum":" 1912","line":"  } else {"},
{"lineNum":" 1913","line":"    for (size_t i0 = 0; i0 < dst.extent(0); ++i0)"},
{"lineNum":" 1914","line":"      for (size_t i1 = 0; i1 < dst.extent(1); ++i1) dst(i0, i1) = src(i0, i1);"},
{"lineNum":" 1915","line":"  }"},
{"lineNum":" 1916","line":"}"},
{"lineNum":" 1917","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1918","line":"template <class DT, class... DP, class ST, class... SP>"},
{"lineNum":" 1919","line":"void KOKKOS_INLINE_FUNCTION local_deep_copy("},
{"lineNum":" 1920","line":"    const View<DT, DP...>& dst, const View<ST, SP...>& src,"},
{"lineNum":" 1921","line":"    typename std::enable_if<(unsigned(ViewTraits<DT, DP...>::rank) == 3 &&"},
{"lineNum":" 1922","line":"                             unsigned(ViewTraits<ST, SP...>::rank) =="},
{"lineNum":" 1923","line":"                                 3)>::type* = nullptr) {"},
{"lineNum":" 1924","line":"  if (dst.data() == nullptr) {"},
{"lineNum":" 1925","line":"    return;"},
{"lineNum":" 1926","line":"  }"},
{"lineNum":" 1927","line":""},
{"lineNum":" 1928","line":"  if (dst.span_is_contiguous() && src.span_is_contiguous()) {"},
{"lineNum":" 1929","line":"    local_deep_copy_contiguous(dst, src);"},
{"lineNum":" 1930","line":"  } else {"},
{"lineNum":" 1931","line":"    for (size_t i0 = 0; i0 < dst.extent(0); ++i0)"},
{"lineNum":" 1932","line":"      for (size_t i1 = 0; i1 < dst.extent(1); ++i1)"},
{"lineNum":" 1933","line":"        for (size_t i2 = 0; i2 < dst.extent(2); ++i2)"},
{"lineNum":" 1934","line":"          dst(i0, i1, i2) = src(i0, i1, i2);"},
{"lineNum":" 1935","line":"  }"},
{"lineNum":" 1936","line":"}"},
{"lineNum":" 1937","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1938","line":"template <class DT, class... DP, class ST, class... SP>"},
{"lineNum":" 1939","line":"void KOKKOS_INLINE_FUNCTION local_deep_copy("},
{"lineNum":" 1940","line":"    const View<DT, DP...>& dst, const View<ST, SP...>& src,"},
{"lineNum":" 1941","line":"    typename std::enable_if<(unsigned(ViewTraits<DT, DP...>::rank) == 4 &&"},
{"lineNum":" 1942","line":"                             unsigned(ViewTraits<ST, SP...>::rank) =="},
{"lineNum":" 1943","line":"                                 4)>::type* = nullptr) {"},
{"lineNum":" 1944","line":"  if (dst.data() == nullptr) {"},
{"lineNum":" 1945","line":"    return;"},
{"lineNum":" 1946","line":"  }"},
{"lineNum":" 1947","line":""},
{"lineNum":" 1948","line":"  if (dst.span_is_contiguous() && src.span_is_contiguous()) {"},
{"lineNum":" 1949","line":"    local_deep_copy_contiguous(dst, src);"},
{"lineNum":" 1950","line":"  } else {"},
{"lineNum":" 1951","line":"    for (size_t i0 = 0; i0 < dst.extent(0); ++i0)"},
{"lineNum":" 1952","line":"      for (size_t i1 = 0; i1 < dst.extent(1); ++i1)"},
{"lineNum":" 1953","line":"        for (size_t i2 = 0; i2 < dst.extent(2); ++i2)"},
{"lineNum":" 1954","line":"          for (size_t i3 = 0; i3 < dst.extent(3); ++i3)"},
{"lineNum":" 1955","line":"            dst(i0, i1, i2, i3) = src(i0, i1, i2, i3);"},
{"lineNum":" 1956","line":"  }"},
{"lineNum":" 1957","line":"}"},
{"lineNum":" 1958","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1959","line":"template <class DT, class... DP, class ST, class... SP>"},
{"lineNum":" 1960","line":"void KOKKOS_INLINE_FUNCTION local_deep_copy("},
{"lineNum":" 1961","line":"    const View<DT, DP...>& dst, const View<ST, SP...>& src,"},
{"lineNum":" 1962","line":"    typename std::enable_if<(unsigned(ViewTraits<DT, DP...>::rank) == 5 &&"},
{"lineNum":" 1963","line":"                             unsigned(ViewTraits<ST, SP...>::rank) =="},
{"lineNum":" 1964","line":"                                 5)>::type* = nullptr) {"},
{"lineNum":" 1965","line":"  if (dst.data() == nullptr) {"},
{"lineNum":" 1966","line":"    return;"},
{"lineNum":" 1967","line":"  }"},
{"lineNum":" 1968","line":""},
{"lineNum":" 1969","line":"  if (dst.span_is_contiguous() && src.span_is_contiguous()) {"},
{"lineNum":" 1970","line":"    local_deep_copy_contiguous(dst, src);"},
{"lineNum":" 1971","line":"  } else {"},
{"lineNum":" 1972","line":"    for (size_t i0 = 0; i0 < dst.extent(0); ++i0)"},
{"lineNum":" 1973","line":"      for (size_t i1 = 0; i1 < dst.extent(1); ++i1)"},
{"lineNum":" 1974","line":"        for (size_t i2 = 0; i2 < dst.extent(2); ++i2)"},
{"lineNum":" 1975","line":"          for (size_t i3 = 0; i3 < dst.extent(3); ++i3)"},
{"lineNum":" 1976","line":"            for (size_t i4 = 0; i4 < dst.extent(4); ++i4)"},
{"lineNum":" 1977","line":"              dst(i0, i1, i2, i3, i4) = src(i0, i1, i2, i3, i4);"},
{"lineNum":" 1978","line":"  }"},
{"lineNum":" 1979","line":"}"},
{"lineNum":" 1980","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1981","line":"template <class DT, class... DP, class ST, class... SP>"},
{"lineNum":" 1982","line":"void KOKKOS_INLINE_FUNCTION local_deep_copy("},
{"lineNum":" 1983","line":"    const View<DT, DP...>& dst, const View<ST, SP...>& src,"},
{"lineNum":" 1984","line":"    typename std::enable_if<(unsigned(ViewTraits<DT, DP...>::rank) == 6 &&"},
{"lineNum":" 1985","line":"                             unsigned(ViewTraits<ST, SP...>::rank) =="},
{"lineNum":" 1986","line":"                                 6)>::type* = nullptr) {"},
{"lineNum":" 1987","line":"  if (dst.data() == nullptr) {"},
{"lineNum":" 1988","line":"    return;"},
{"lineNum":" 1989","line":"  }"},
{"lineNum":" 1990","line":""},
{"lineNum":" 1991","line":"  if (dst.span_is_contiguous() && src.span_is_contiguous()) {"},
{"lineNum":" 1992","line":"    local_deep_copy_contiguous(dst, src);"},
{"lineNum":" 1993","line":"  } else {"},
{"lineNum":" 1994","line":"    for (size_t i0 = 0; i0 < dst.extent(0); ++i0)"},
{"lineNum":" 1995","line":"      for (size_t i1 = 0; i1 < dst.extent(1); ++i1)"},
{"lineNum":" 1996","line":"        for (size_t i2 = 0; i2 < dst.extent(2); ++i2)"},
{"lineNum":" 1997","line":"          for (size_t i3 = 0; i3 < dst.extent(3); ++i3)"},
{"lineNum":" 1998","line":"            for (size_t i4 = 0; i4 < dst.extent(4); ++i4)"},
{"lineNum":" 1999","line":"              for (size_t i5 = 0; i5 < dst.extent(5); ++i5)"},
{"lineNum":" 2000","line":"                dst(i0, i1, i2, i3, i4, i5) = src(i0, i1, i2, i3, i4, i5);"},
{"lineNum":" 2001","line":"  }"},
{"lineNum":" 2002","line":"}"},
{"lineNum":" 2003","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 2004","line":"template <class DT, class... DP, class ST, class... SP>"},
{"lineNum":" 2005","line":"void KOKKOS_INLINE_FUNCTION local_deep_copy("},
{"lineNum":" 2006","line":"    const View<DT, DP...>& dst, const View<ST, SP...>& src,"},
{"lineNum":" 2007","line":"    typename std::enable_if<(unsigned(ViewTraits<DT, DP...>::rank) == 7 &&"},
{"lineNum":" 2008","line":"                             unsigned(ViewTraits<ST, SP...>::rank) =="},
{"lineNum":" 2009","line":"                                 7)>::type* = nullptr) {"},
{"lineNum":" 2010","line":"  if (dst.data() == nullptr) {"},
{"lineNum":" 2011","line":"    return;"},
{"lineNum":" 2012","line":"  }"},
{"lineNum":" 2013","line":""},
{"lineNum":" 2014","line":"  if (dst.span_is_contiguous() && src.span_is_contiguous()) {"},
{"lineNum":" 2015","line":"    local_deep_copy_contiguous(dst, src);"},
{"lineNum":" 2016","line":"  } else {"},
{"lineNum":" 2017","line":"    for (size_t i0 = 0; i0 < dst.extent(0); ++i0)"},
{"lineNum":" 2018","line":"      for (size_t i1 = 0; i1 < dst.extent(1); ++i1)"},
{"lineNum":" 2019","line":"        for (size_t i2 = 0; i2 < dst.extent(2); ++i2)"},
{"lineNum":" 2020","line":"          for (size_t i3 = 0; i3 < dst.extent(3); ++i3)"},
{"lineNum":" 2021","line":"            for (size_t i4 = 0; i4 < dst.extent(4); ++i4)"},
{"lineNum":" 2022","line":"              for (size_t i5 = 0; i5 < dst.extent(5); ++i5)"},
{"lineNum":" 2023","line":"                for (size_t i6 = 0; i6 < dst.extent(6); ++i6)"},
{"lineNum":" 2024","line":"                  dst(i0, i1, i2, i3, i4, i5, i6) ="},
{"lineNum":" 2025","line":"                      src(i0, i1, i2, i3, i4, i5, i6);"},
{"lineNum":" 2026","line":"  }"},
{"lineNum":" 2027","line":"}"},
{"lineNum":" 2028","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 2029","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 2030","line":"/** \\brief  Deep copy a value into a view.  */"},
{"lineNum":" 2031","line":"template <class TeamType, class DT, class... DP>"},
{"lineNum":" 2032","line":"void KOKKOS_INLINE_FUNCTION local_deep_copy_contiguous("},
{"lineNum":" 2033","line":"    const TeamType& team, const View<DT, DP...>& dst,"},
{"lineNum":" 2034","line":"    typename ViewTraits<DT, DP...>::const_value_type& value) {"},
{"lineNum":" 2035","line":"  Kokkos::parallel_for(Kokkos::TeamThreadRange(team, dst.span()),"},
{"lineNum":" 2036","line":"                       [&](const int& i) { dst.data()[i] = value; });"},
{"lineNum":" 2037","line":"}"},
{"lineNum":" 2038","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 2039","line":"template <class DT, class... DP>"},
{"lineNum":" 2040","line":"void KOKKOS_INLINE_FUNCTION local_deep_copy_contiguous("},
{"lineNum":" 2041","line":"    const View<DT, DP...>& dst,"},
{"lineNum":" 2042","line":"    typename ViewTraits<DT, DP...>::const_value_type& value) {"},
{"lineNum":" 2043","line":"  for (size_t i = 0; i < dst.span(); ++i) {"},
{"lineNum":" 2044","line":"    dst.data()[i] = value;"},
{"lineNum":" 2045","line":"  }"},
{"lineNum":" 2046","line":"}"},
{"lineNum":" 2047","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 2048","line":"template <class TeamType, class DT, class... DP>"},
{"lineNum":" 2049","line":"void KOKKOS_INLINE_FUNCTION local_deep_copy("},
{"lineNum":" 2050","line":"    const TeamType& team, const View<DT, DP...>& dst,"},
{"lineNum":" 2051","line":"    typename ViewTraits<DT, DP...>::const_value_type& value,"},
{"lineNum":" 2052","line":"    typename std::enable_if<(unsigned(ViewTraits<DT, DP...>::rank) =="},
{"lineNum":" 2053","line":"                             1)>::type* = nullptr) {"},
{"lineNum":" 2054","line":"  if (dst.data() == nullptr) {"},
{"lineNum":" 2055","line":"    return;"},
{"lineNum":" 2056","line":"  }"},
{"lineNum":" 2057","line":""},
{"lineNum":" 2058","line":"  const size_t N = dst.extent(0);"},
{"lineNum":" 2059","line":""},
{"lineNum":" 2060","line":"  team.team_barrier();"},
{"lineNum":" 2061","line":"  Kokkos::parallel_for(Kokkos::TeamThreadRange(team, N),"},
{"lineNum":" 2062","line":"                       [&](const int& i) { dst(i) = value; });"},
{"lineNum":" 2063","line":"  team.team_barrier();"},
{"lineNum":" 2064","line":"}"},
{"lineNum":" 2065","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 2066","line":"template <class TeamType, class DT, class... DP>"},
{"lineNum":" 2067","line":"void KOKKOS_INLINE_FUNCTION local_deep_copy("},
{"lineNum":" 2068","line":"    const TeamType& team, const View<DT, DP...>& dst,"},
{"lineNum":" 2069","line":"    typename ViewTraits<DT, DP...>::const_value_type& value,"},
{"lineNum":" 2070","line":"    typename std::enable_if<(unsigned(ViewTraits<DT, DP...>::rank) =="},
{"lineNum":" 2071","line":"                             2)>::type* = nullptr) {"},
{"lineNum":" 2072","line":"  if (dst.data() == nullptr) {"},
{"lineNum":" 2073","line":"    return;"},
{"lineNum":" 2074","line":"  }"},
{"lineNum":" 2075","line":""},
{"lineNum":" 2076","line":"  const size_t N = dst.extent(0) * dst.extent(1);"},
{"lineNum":" 2077","line":""},
{"lineNum":" 2078","line":"  if (dst.span_is_contiguous()) {"},
{"lineNum":" 2079","line":"    team.team_barrier();"},
{"lineNum":" 2080","line":"    local_deep_copy_contiguous(team, dst, value);"},
{"lineNum":" 2081","line":"    team.team_barrier();"},
{"lineNum":" 2082","line":"  } else {"},
{"lineNum":" 2083","line":"    team.team_barrier();"},
{"lineNum":" 2084","line":"    Kokkos::parallel_for(Kokkos::TeamThreadRange(team, N), [&](const int& i) {"},
{"lineNum":" 2085","line":"      int i0      = i % dst.extent(0);"},
{"lineNum":" 2086","line":"      int i1      = i / dst.extent(0);"},
{"lineNum":" 2087","line":"      dst(i0, i1) = value;"},
{"lineNum":" 2088","line":"    });"},
{"lineNum":" 2089","line":"    team.team_barrier();"},
{"lineNum":" 2090","line":"  }"},
{"lineNum":" 2091","line":"}"},
{"lineNum":" 2092","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 2093","line":"template <class TeamType, class DT, class... DP>"},
{"lineNum":" 2094","line":"void KOKKOS_INLINE_FUNCTION local_deep_copy("},
{"lineNum":" 2095","line":"    const TeamType& team, const View<DT, DP...>& dst,"},
{"lineNum":" 2096","line":"    typename ViewTraits<DT, DP...>::const_value_type& value,"},
{"lineNum":" 2097","line":"    typename std::enable_if<(unsigned(ViewTraits<DT, DP...>::rank) =="},
{"lineNum":" 2098","line":"                             3)>::type* = nullptr) {"},
{"lineNum":" 2099","line":"  if (dst.data() == nullptr) {"},
{"lineNum":" 2100","line":"    return;"},
{"lineNum":" 2101","line":"  }"},
{"lineNum":" 2102","line":""},
{"lineNum":" 2103","line":"  const size_t N = dst.extent(0) * dst.extent(1) * dst.extent(2);"},
{"lineNum":" 2104","line":""},
{"lineNum":" 2105","line":"  if (dst.span_is_contiguous()) {"},
{"lineNum":" 2106","line":"    team.team_barrier();"},
{"lineNum":" 2107","line":"    local_deep_copy_contiguous(team, dst, value);"},
{"lineNum":" 2108","line":"    team.team_barrier();"},
{"lineNum":" 2109","line":"  } else {"},
{"lineNum":" 2110","line":"    team.team_barrier();"},
{"lineNum":" 2111","line":"    Kokkos::parallel_for(Kokkos::TeamThreadRange(team, N), [&](const int& i) {"},
{"lineNum":" 2112","line":"      int i0          = i % dst.extent(0);"},
{"lineNum":" 2113","line":"      int itmp        = i / dst.extent(0);"},
{"lineNum":" 2114","line":"      int i1          = itmp % dst.extent(1);"},
{"lineNum":" 2115","line":"      int i2          = itmp / dst.extent(1);"},
{"lineNum":" 2116","line":"      dst(i0, i1, i2) = value;"},
{"lineNum":" 2117","line":"    });"},
{"lineNum":" 2118","line":"    team.team_barrier();"},
{"lineNum":" 2119","line":"  }"},
{"lineNum":" 2120","line":"}"},
{"lineNum":" 2121","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 2122","line":"template <class TeamType, class DT, class... DP>"},
{"lineNum":" 2123","line":"void KOKKOS_INLINE_FUNCTION local_deep_copy("},
{"lineNum":" 2124","line":"    const TeamType& team, const View<DT, DP...>& dst,"},
{"lineNum":" 2125","line":"    typename ViewTraits<DT, DP...>::const_value_type& value,"},
{"lineNum":" 2126","line":"    typename std::enable_if<(unsigned(ViewTraits<DT, DP...>::rank) =="},
{"lineNum":" 2127","line":"                             4)>::type* = nullptr) {"},
{"lineNum":" 2128","line":"  if (dst.data() == nullptr) {"},
{"lineNum":" 2129","line":"    return;"},
{"lineNum":" 2130","line":"  }"},
{"lineNum":" 2131","line":""},
{"lineNum":" 2132","line":"  const size_t N ="},
{"lineNum":" 2133","line":"      dst.extent(0) * dst.extent(1) * dst.extent(2) * dst.extent(3);"},
{"lineNum":" 2134","line":""},
{"lineNum":" 2135","line":"  if (dst.span_is_contiguous()) {"},
{"lineNum":" 2136","line":"    team.team_barrier();"},
{"lineNum":" 2137","line":"    local_deep_copy_contiguous(team, dst, value);"},
{"lineNum":" 2138","line":"    team.team_barrier();"},
{"lineNum":" 2139","line":"  } else {"},
{"lineNum":" 2140","line":"    team.team_barrier();"},
{"lineNum":" 2141","line":"    Kokkos::parallel_for(Kokkos::TeamThreadRange(team, N), [&](const int& i) {"},
{"lineNum":" 2142","line":"      int i0              = i % dst.extent(0);"},
{"lineNum":" 2143","line":"      int itmp            = i / dst.extent(0);"},
{"lineNum":" 2144","line":"      int i1              = itmp % dst.extent(1);"},
{"lineNum":" 2145","line":"      itmp                = itmp / dst.extent(1);"},
{"lineNum":" 2146","line":"      int i2              = itmp % dst.extent(2);"},
{"lineNum":" 2147","line":"      int i3              = itmp / dst.extent(2);"},
{"lineNum":" 2148","line":"      dst(i0, i1, i2, i3) = value;"},
{"lineNum":" 2149","line":"    });"},
{"lineNum":" 2150","line":"    team.team_barrier();"},
{"lineNum":" 2151","line":"  }"},
{"lineNum":" 2152","line":"}"},
{"lineNum":" 2153","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 2154","line":"template <class TeamType, class DT, class... DP>"},
{"lineNum":" 2155","line":"void KOKKOS_INLINE_FUNCTION local_deep_copy("},
{"lineNum":" 2156","line":"    const TeamType& team, const View<DT, DP...>& dst,"},
{"lineNum":" 2157","line":"    typename ViewTraits<DT, DP...>::const_value_type& value,"},
{"lineNum":" 2158","line":"    typename std::enable_if<(unsigned(ViewTraits<DT, DP...>::rank) =="},
{"lineNum":" 2159","line":"                             5)>::type* = nullptr) {"},
{"lineNum":" 2160","line":"  if (dst.data() == nullptr) {"},
{"lineNum":" 2161","line":"    return;"},
{"lineNum":" 2162","line":"  }"},
{"lineNum":" 2163","line":""},
{"lineNum":" 2164","line":"  const size_t N = dst.extent(0) * dst.extent(1) * dst.extent(2) *"},
{"lineNum":" 2165","line":"                   dst.extent(3) * dst.extent(4);"},
{"lineNum":" 2166","line":""},
{"lineNum":" 2167","line":"  if (dst.span_is_contiguous()) {"},
{"lineNum":" 2168","line":"    team.team_barrier();"},
{"lineNum":" 2169","line":"    local_deep_copy_contiguous(team, dst, value);"},
{"lineNum":" 2170","line":"    team.team_barrier();"},
{"lineNum":" 2171","line":"  } else {"},
{"lineNum":" 2172","line":"    team.team_barrier();"},
{"lineNum":" 2173","line":"    Kokkos::parallel_for(Kokkos::TeamThreadRange(team, N), [&](const int& i) {"},
{"lineNum":" 2174","line":"      int i0                  = i % dst.extent(0);"},
{"lineNum":" 2175","line":"      int itmp                = i / dst.extent(0);"},
{"lineNum":" 2176","line":"      int i1                  = itmp % dst.extent(1);"},
{"lineNum":" 2177","line":"      itmp                    = itmp / dst.extent(1);"},
{"lineNum":" 2178","line":"      int i2                  = itmp % dst.extent(2);"},
{"lineNum":" 2179","line":"      itmp                    = itmp / dst.extent(2);"},
{"lineNum":" 2180","line":"      int i3                  = itmp % dst.extent(3);"},
{"lineNum":" 2181","line":"      int i4                  = itmp / dst.extent(3);"},
{"lineNum":" 2182","line":"      dst(i0, i1, i2, i3, i4) = value;"},
{"lineNum":" 2183","line":"    });"},
{"lineNum":" 2184","line":"    team.team_barrier();"},
{"lineNum":" 2185","line":"  }"},
{"lineNum":" 2186","line":"}"},
{"lineNum":" 2187","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 2188","line":"template <class TeamType, class DT, class... DP>"},
{"lineNum":" 2189","line":"void KOKKOS_INLINE_FUNCTION local_deep_copy("},
{"lineNum":" 2190","line":"    const TeamType& team, const View<DT, DP...>& dst,"},
{"lineNum":" 2191","line":"    typename ViewTraits<DT, DP...>::const_value_type& value,"},
{"lineNum":" 2192","line":"    typename std::enable_if<(unsigned(ViewTraits<DT, DP...>::rank) =="},
{"lineNum":" 2193","line":"                             6)>::type* = nullptr) {"},
{"lineNum":" 2194","line":"  if (dst.data() == nullptr) {"},
{"lineNum":" 2195","line":"    return;"},
{"lineNum":" 2196","line":"  }"},
{"lineNum":" 2197","line":""},
{"lineNum":" 2198","line":"  const size_t N = dst.extent(0) * dst.extent(1) * dst.extent(2) *"},
{"lineNum":" 2199","line":"                   dst.extent(3) * dst.extent(4) * dst.extent(5);"},
{"lineNum":" 2200","line":""},
{"lineNum":" 2201","line":"  if (dst.span_is_contiguous()) {"},
{"lineNum":" 2202","line":"    team.team_barrier();"},
{"lineNum":" 2203","line":"    local_deep_copy_contiguous(team, dst, value);"},
{"lineNum":" 2204","line":"    team.team_barrier();"},
{"lineNum":" 2205","line":"  } else {"},
{"lineNum":" 2206","line":"    team.team_barrier();"},
{"lineNum":" 2207","line":"    Kokkos::parallel_for(Kokkos::TeamThreadRange(team, N), [&](const int& i) {"},
{"lineNum":" 2208","line":"      int i0                      = i % dst.extent(0);"},
{"lineNum":" 2209","line":"      int itmp                    = i / dst.extent(0);"},
{"lineNum":" 2210","line":"      int i1                      = itmp % dst.extent(1);"},
{"lineNum":" 2211","line":"      itmp                        = itmp / dst.extent(1);"},
{"lineNum":" 2212","line":"      int i2                      = itmp % dst.extent(2);"},
{"lineNum":" 2213","line":"      itmp                        = itmp / dst.extent(2);"},
{"lineNum":" 2214","line":"      int i3                      = itmp % dst.extent(3);"},
{"lineNum":" 2215","line":"      itmp                        = itmp / dst.extent(3);"},
{"lineNum":" 2216","line":"      int i4                      = itmp % dst.extent(4);"},
{"lineNum":" 2217","line":"      int i5                      = itmp / dst.extent(4);"},
{"lineNum":" 2218","line":"      dst(i0, i1, i2, i3, i4, i5) = value;"},
{"lineNum":" 2219","line":"    });"},
{"lineNum":" 2220","line":"    team.team_barrier();"},
{"lineNum":" 2221","line":"  }"},
{"lineNum":" 2222","line":"}"},
{"lineNum":" 2223","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 2224","line":"template <class TeamType, class DT, class... DP>"},
{"lineNum":" 2225","line":"void KOKKOS_INLINE_FUNCTION local_deep_copy("},
{"lineNum":" 2226","line":"    const TeamType& team, const View<DT, DP...>& dst,"},
{"lineNum":" 2227","line":"    typename ViewTraits<DT, DP...>::const_value_type& value,"},
{"lineNum":" 2228","line":"    typename std::enable_if<(unsigned(ViewTraits<DT, DP...>::rank) =="},
{"lineNum":" 2229","line":"                             7)>::type* = nullptr) {"},
{"lineNum":" 2230","line":"  if (dst.data() == nullptr) {"},
{"lineNum":" 2231","line":"    return;"},
{"lineNum":" 2232","line":"  }"},
{"lineNum":" 2233","line":""},
{"lineNum":" 2234","line":"  const size_t N = dst.extent(0) * dst.extent(1) * dst.extent(2) *"},
{"lineNum":" 2235","line":"                   dst.extent(3) * dst.extent(4) * dst.extent(5) *"},
{"lineNum":" 2236","line":"                   dst.extent(6);"},
{"lineNum":" 2237","line":""},
{"lineNum":" 2238","line":"  if (dst.span_is_contiguous()) {"},
{"lineNum":" 2239","line":"    team.team_barrier();"},
{"lineNum":" 2240","line":"    local_deep_copy_contiguous(team, dst, value);"},
{"lineNum":" 2241","line":"    team.team_barrier();"},
{"lineNum":" 2242","line":"  } else {"},
{"lineNum":" 2243","line":"    team.team_barrier();"},
{"lineNum":" 2244","line":"    Kokkos::parallel_for(Kokkos::TeamThreadRange(team, N), [&](const int& i) {"},
{"lineNum":" 2245","line":"      int i0                          = i % dst.extent(0);"},
{"lineNum":" 2246","line":"      int itmp                        = i / dst.extent(0);"},
{"lineNum":" 2247","line":"      int i1                          = itmp % dst.extent(1);"},
{"lineNum":" 2248","line":"      itmp                            = itmp / dst.extent(1);"},
{"lineNum":" 2249","line":"      int i2                          = itmp % dst.extent(2);"},
{"lineNum":" 2250","line":"      itmp                            = itmp / dst.extent(2);"},
{"lineNum":" 2251","line":"      int i3                          = itmp % dst.extent(3);"},
{"lineNum":" 2252","line":"      itmp                            = itmp / dst.extent(3);"},
{"lineNum":" 2253","line":"      int i4                          = itmp % dst.extent(4);"},
{"lineNum":" 2254","line":"      itmp                            = itmp / dst.extent(4);"},
{"lineNum":" 2255","line":"      int i5                          = itmp % dst.extent(5);"},
{"lineNum":" 2256","line":"      int i6                          = itmp / dst.extent(5);"},
{"lineNum":" 2257","line":"      dst(i0, i1, i2, i3, i4, i5, i6) = value;"},
{"lineNum":" 2258","line":"    });"},
{"lineNum":" 2259","line":"    team.team_barrier();"},
{"lineNum":" 2260","line":"  }"},
{"lineNum":" 2261","line":"}"},
{"lineNum":" 2262","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 2263","line":"template <class DT, class... DP>"},
{"lineNum":" 2264","line":"void KOKKOS_INLINE_FUNCTION local_deep_copy("},
{"lineNum":" 2265","line":"    const View<DT, DP...>& dst,"},
{"lineNum":" 2266","line":"    typename ViewTraits<DT, DP...>::const_value_type& value,"},
{"lineNum":" 2267","line":"    typename std::enable_if<(unsigned(ViewTraits<DT, DP...>::rank) =="},
{"lineNum":" 2268","line":"                             1)>::type* = nullptr) {"},
{"lineNum":" 2269","line":"  if (dst.data() == nullptr) {"},
{"lineNum":" 2270","line":"    return;"},
{"lineNum":" 2271","line":"  }"},
{"lineNum":" 2272","line":""},
{"lineNum":" 2273","line":"  const size_t N = dst.extent(0);"},
{"lineNum":" 2274","line":""},
{"lineNum":" 2275","line":"  for (size_t i = 0; i < N; ++i) {"},
{"lineNum":" 2276","line":"    dst(i) = value;"},
{"lineNum":" 2277","line":"  }"},
{"lineNum":" 2278","line":"}"},
{"lineNum":" 2279","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 2280","line":"template <class DT, class... DP>"},
{"lineNum":" 2281","line":"void KOKKOS_INLINE_FUNCTION local_deep_copy("},
{"lineNum":" 2282","line":"    const View<DT, DP...>& dst,"},
{"lineNum":" 2283","line":"    typename ViewTraits<DT, DP...>::const_value_type& value,"},
{"lineNum":" 2284","line":"    typename std::enable_if<(unsigned(ViewTraits<DT, DP...>::rank) =="},
{"lineNum":" 2285","line":"                             2)>::type* = nullptr) {"},
{"lineNum":" 2286","line":"  if (dst.data() == nullptr) {"},
{"lineNum":" 2287","line":"    return;"},
{"lineNum":" 2288","line":"  }"},
{"lineNum":" 2289","line":""},
{"lineNum":" 2290","line":"  if (dst.span_is_contiguous()) {"},
{"lineNum":" 2291","line":"    local_deep_copy_contiguous(dst, value);"},
{"lineNum":" 2292","line":"  } else {"},
{"lineNum":" 2293","line":"    for (size_t i0 = 0; i0 < dst.extent(0); ++i0)"},
{"lineNum":" 2294","line":"      for (size_t i1 = 0; i1 < dst.extent(1); ++i1) dst(i0, i1) = value;"},
{"lineNum":" 2295","line":"  }"},
{"lineNum":" 2296","line":"}"},
{"lineNum":" 2297","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 2298","line":"template <class DT, class... DP>"},
{"lineNum":" 2299","line":"void KOKKOS_INLINE_FUNCTION local_deep_copy("},
{"lineNum":" 2300","line":"    const View<DT, DP...>& dst,"},
{"lineNum":" 2301","line":"    typename ViewTraits<DT, DP...>::const_value_type& value,"},
{"lineNum":" 2302","line":"    typename std::enable_if<(unsigned(ViewTraits<DT, DP...>::rank) =="},
{"lineNum":" 2303","line":"                             3)>::type* = nullptr) {"},
{"lineNum":" 2304","line":"  if (dst.data() == nullptr) {"},
{"lineNum":" 2305","line":"    return;"},
{"lineNum":" 2306","line":"  }"},
{"lineNum":" 2307","line":""},
{"lineNum":" 2308","line":"  if (dst.span_is_contiguous()) {"},
{"lineNum":" 2309","line":"    local_deep_copy_contiguous(dst, value);"},
{"lineNum":" 2310","line":"  } else {"},
{"lineNum":" 2311","line":"    for (size_t i0 = 0; i0 < dst.extent(0); ++i0)"},
{"lineNum":" 2312","line":"      for (size_t i1 = 0; i1 < dst.extent(1); ++i1)"},
{"lineNum":" 2313","line":"        for (size_t i2 = 0; i2 < dst.extent(2); ++i2) dst(i0, i1, i2) = value;"},
{"lineNum":" 2314","line":"  }"},
{"lineNum":" 2315","line":"}"},
{"lineNum":" 2316","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 2317","line":"template <class DT, class... DP>"},
{"lineNum":" 2318","line":"void KOKKOS_INLINE_FUNCTION local_deep_copy("},
{"lineNum":" 2319","line":"    const View<DT, DP...>& dst,"},
{"lineNum":" 2320","line":"    typename ViewTraits<DT, DP...>::const_value_type& value,"},
{"lineNum":" 2321","line":"    typename std::enable_if<(unsigned(ViewTraits<DT, DP...>::rank) =="},
{"lineNum":" 2322","line":"                             4)>::type* = nullptr) {"},
{"lineNum":" 2323","line":"  if (dst.data() == nullptr) {"},
{"lineNum":" 2324","line":"    return;"},
{"lineNum":" 2325","line":"  }"},
{"lineNum":" 2326","line":""},
{"lineNum":" 2327","line":"  if (dst.span_is_contiguous()) {"},
{"lineNum":" 2328","line":"    local_deep_copy_contiguous(dst, value);"},
{"lineNum":" 2329","line":"  } else {"},
{"lineNum":" 2330","line":"    for (size_t i0 = 0; i0 < dst.extent(0); ++i0)"},
{"lineNum":" 2331","line":"      for (size_t i1 = 0; i1 < dst.extent(1); ++i1)"},
{"lineNum":" 2332","line":"        for (size_t i2 = 0; i2 < dst.extent(2); ++i2)"},
{"lineNum":" 2333","line":"          for (size_t i3 = 0; i3 < dst.extent(3); ++i3)"},
{"lineNum":" 2334","line":"            dst(i0, i1, i2, i3) = value;"},
{"lineNum":" 2335","line":"  }"},
{"lineNum":" 2336","line":"}"},
{"lineNum":" 2337","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 2338","line":"template <class DT, class... DP>"},
{"lineNum":" 2339","line":"void KOKKOS_INLINE_FUNCTION local_deep_copy("},
{"lineNum":" 2340","line":"    const View<DT, DP...>& dst,"},
{"lineNum":" 2341","line":"    typename ViewTraits<DT, DP...>::const_value_type& value,"},
{"lineNum":" 2342","line":"    typename std::enable_if<(unsigned(ViewTraits<DT, DP...>::rank) =="},
{"lineNum":" 2343","line":"                             5)>::type* = nullptr) {"},
{"lineNum":" 2344","line":"  if (dst.data() == nullptr) {"},
{"lineNum":" 2345","line":"    return;"},
{"lineNum":" 2346","line":"  }"},
{"lineNum":" 2347","line":""},
{"lineNum":" 2348","line":"  if (dst.span_is_contiguous()) {"},
{"lineNum":" 2349","line":"    local_deep_copy_contiguous(dst, value);"},
{"lineNum":" 2350","line":"  } else {"},
{"lineNum":" 2351","line":"    for (size_t i0 = 0; i0 < dst.extent(0); ++i0)"},
{"lineNum":" 2352","line":"      for (size_t i1 = 0; i1 < dst.extent(1); ++i1)"},
{"lineNum":" 2353","line":"        for (size_t i2 = 0; i2 < dst.extent(2); ++i2)"},
{"lineNum":" 2354","line":"          for (size_t i3 = 0; i3 < dst.extent(3); ++i3)"},
{"lineNum":" 2355","line":"            for (size_t i4 = 0; i4 < dst.extent(4); ++i4)"},
{"lineNum":" 2356","line":"              dst(i0, i1, i2, i3, i4) = value;"},
{"lineNum":" 2357","line":"  }"},
{"lineNum":" 2358","line":"}"},
{"lineNum":" 2359","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 2360","line":"template <class DT, class... DP>"},
{"lineNum":" 2361","line":"void KOKKOS_INLINE_FUNCTION local_deep_copy("},
{"lineNum":" 2362","line":"    const View<DT, DP...>& dst,"},
{"lineNum":" 2363","line":"    typename ViewTraits<DT, DP...>::const_value_type& value,"},
{"lineNum":" 2364","line":"    typename std::enable_if<(unsigned(ViewTraits<DT, DP...>::rank) =="},
{"lineNum":" 2365","line":"                             6)>::type* = nullptr) {"},
{"lineNum":" 2366","line":"  if (dst.data() == nullptr) {"},
{"lineNum":" 2367","line":"    return;"},
{"lineNum":" 2368","line":"  }"},
{"lineNum":" 2369","line":""},
{"lineNum":" 2370","line":"  if (dst.span_is_contiguous()) {"},
{"lineNum":" 2371","line":"    local_deep_copy_contiguous(dst, value);"},
{"lineNum":" 2372","line":"  } else {"},
{"lineNum":" 2373","line":"    for (size_t i0 = 0; i0 < dst.extent(0); ++i0)"},
{"lineNum":" 2374","line":"      for (size_t i1 = 0; i1 < dst.extent(1); ++i1)"},
{"lineNum":" 2375","line":"        for (size_t i2 = 0; i2 < dst.extent(2); ++i2)"},
{"lineNum":" 2376","line":"          for (size_t i3 = 0; i3 < dst.extent(3); ++i3)"},
{"lineNum":" 2377","line":"            for (size_t i4 = 0; i4 < dst.extent(4); ++i4)"},
{"lineNum":" 2378","line":"              for (size_t i5 = 0; i5 < dst.extent(5); ++i5)"},
{"lineNum":" 2379","line":"                dst(i0, i1, i2, i3, i4, i5) = value;"},
{"lineNum":" 2380","line":"  }"},
{"lineNum":" 2381","line":"}"},
{"lineNum":" 2382","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 2383","line":"template <class DT, class... DP>"},
{"lineNum":" 2384","line":"void KOKKOS_INLINE_FUNCTION local_deep_copy("},
{"lineNum":" 2385","line":"    const View<DT, DP...>& dst,"},
{"lineNum":" 2386","line":"    typename ViewTraits<DT, DP...>::const_value_type& value,"},
{"lineNum":" 2387","line":"    typename std::enable_if<(unsigned(ViewTraits<DT, DP...>::rank) =="},
{"lineNum":" 2388","line":"                             7)>::type* = nullptr) {"},
{"lineNum":" 2389","line":"  if (dst.data() == nullptr) {"},
{"lineNum":" 2390","line":"    return;"},
{"lineNum":" 2391","line":"  }"},
{"lineNum":" 2392","line":""},
{"lineNum":" 2393","line":"  if (dst.span_is_contiguous()) {"},
{"lineNum":" 2394","line":"    local_deep_copy_contiguous(dst, value);"},
{"lineNum":" 2395","line":"  } else {"},
{"lineNum":" 2396","line":"    for (size_t i0 = 0; i0 < dst.extent(0); ++i0)"},
{"lineNum":" 2397","line":"      for (size_t i1 = 0; i1 < dst.extent(1); ++i1)"},
{"lineNum":" 2398","line":"        for (size_t i2 = 0; i2 < dst.extent(2); ++i2)"},
{"lineNum":" 2399","line":"          for (size_t i3 = 0; i3 < dst.extent(3); ++i3)"},
{"lineNum":" 2400","line":"            for (size_t i4 = 0; i4 < dst.extent(4); ++i4)"},
{"lineNum":" 2401","line":"              for (size_t i5 = 0; i5 < dst.extent(5); ++i5)"},
{"lineNum":" 2402","line":"                for (size_t i6 = 0; i6 < dst.extent(6); ++i6)"},
{"lineNum":" 2403","line":"                  dst(i0, i1, i2, i3, i4, i5, i6) = value;"},
{"lineNum":" 2404","line":"  }"},
{"lineNum":" 2405","line":"}"},
{"lineNum":" 2406","line":"} /* namespace Experimental */"},
{"lineNum":" 2407","line":"} /* namespace Kokkos */"},
{"lineNum":" 2408","line":""},
{"lineNum":" 2409","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 2410","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 2411","line":""},
{"lineNum":" 2412","line":"namespace Kokkos {"},
{"lineNum":" 2413","line":""},
{"lineNum":" 2414","line":"/** \\brief  Deep copy a value from Host memory into a view. ExecSpace can access"},
{"lineNum":" 2415","line":" * dst */"},
{"lineNum":" 2416","line":"template <class ExecSpace, class DT, class... DP>"},
{"lineNum":" 2417","line":"inline void deep_copy("},
{"lineNum":" 2418","line":"    const ExecSpace& space, const View<DT, DP...>& dst,"},
{"lineNum":" 2419","line":"    typename ViewTraits<DT, DP...>::const_value_type& value,"},
{"lineNum":" 2420","line":"    typename std::enable_if<"},
{"lineNum":" 2421","line":"        Kokkos::Impl::is_execution_space<ExecSpace>::value &&"},
{"lineNum":" 2422","line":"        std::is_same<typename ViewTraits<DT, DP...>::specialize, void>::value &&"},
{"lineNum":" 2423","line":"        Kokkos::Impl::SpaceAccessibility<"},
{"lineNum":" 2424","line":"            ExecSpace,"},
{"lineNum":" 2425","line":"            typename ViewTraits<DT, DP...>::memory_space>::accessible>::type* ="},
{"lineNum":" 2426","line":"        nullptr) {"},
{"lineNum":" 2427","line":"  using dst_traits = ViewTraits<DT, DP...>;"},
{"lineNum":" 2428","line":"  static_assert(std::is_same<typename dst_traits::non_const_value_type,"},
{"lineNum":" 2429","line":"                             typename dst_traits::value_type>::value,"},
{"lineNum":" 2430","line":"                \"deep_copy requires non-const type\");"},
{"lineNum":" 2431","line":"  using dst_memory_space = typename dst_traits::memory_space;"},
{"lineNum":" 2432","line":"  if (Kokkos::Tools::Experimental::get_callbacks().begin_deep_copy != nullptr) {"},
{"lineNum":" 2433","line":"    Kokkos::Profiling::beginDeepCopy("},
{"lineNum":" 2434","line":"        Kokkos::Profiling::make_space_handle(dst_memory_space::name()),"},
{"lineNum":" 2435","line":"        dst.label(), dst.data(),"},
{"lineNum":" 2436","line":"        Kokkos::Profiling::make_space_handle(Kokkos::HostSpace::name()),"},
{"lineNum":" 2437","line":"        \"(none)\", &value, dst.span() * sizeof(typename dst_traits::value_type));"},
{"lineNum":" 2438","line":"  }"},
{"lineNum":" 2439","line":"  if (dst.data() == nullptr) {"},
{"lineNum":" 2440","line":"    space.fence();"},
{"lineNum":" 2441","line":"  } else {"},
{"lineNum":" 2442","line":"    using ViewTypeUniform = typename std::conditional<"},
{"lineNum":" 2443","line":"        View<DT, DP...>::Rank == 0,"},
{"lineNum":" 2444","line":"        typename View<DT, DP...>::uniform_runtime_type,"},
{"lineNum":" 2445","line":"        typename View<DT, DP...>::uniform_runtime_nomemspace_type>::type;"},
{"lineNum":" 2446","line":"    Kokkos::Impl::ViewFill<ViewTypeUniform, typename dst_traits::array_layout,"},
{"lineNum":" 2447","line":"                           ExecSpace>(dst, value, space);"},
{"lineNum":" 2448","line":"  }"},
{"lineNum":" 2449","line":"  if (Kokkos::Tools::Experimental::get_callbacks().end_deep_copy != nullptr) {"},
{"lineNum":" 2450","line":"    Kokkos::Profiling::endDeepCopy();"},
{"lineNum":" 2451","line":"  }"},
{"lineNum":" 2452","line":"}"},
{"lineNum":" 2453","line":""},
{"lineNum":" 2454","line":"/** \\brief  Deep copy a value from Host memory into a view. ExecSpace can not"},
{"lineNum":" 2455","line":" * access dst */"},
{"lineNum":" 2456","line":"template <class ExecSpace, class DT, class... DP>"},
{"lineNum":" 2457","line":"inline void deep_copy("},
{"lineNum":" 2458","line":"    const ExecSpace& space, const View<DT, DP...>& dst,"},
{"lineNum":" 2459","line":"    typename ViewTraits<DT, DP...>::const_value_type& value,"},
{"lineNum":" 2460","line":"    typename std::enable_if<"},
{"lineNum":" 2461","line":"        Kokkos::Impl::is_execution_space<ExecSpace>::value &&"},
{"lineNum":" 2462","line":"        std::is_same<typename ViewTraits<DT, DP...>::specialize, void>::value &&"},
{"lineNum":" 2463","line":"        !Kokkos::Impl::SpaceAccessibility<"},
{"lineNum":" 2464","line":"            ExecSpace,"},
{"lineNum":" 2465","line":"            typename ViewTraits<DT, DP...>::memory_space>::accessible>::type* ="},
{"lineNum":" 2466","line":"        nullptr) {"},
{"lineNum":" 2467","line":"  using dst_traits = ViewTraits<DT, DP...>;"},
{"lineNum":" 2468","line":"  static_assert(std::is_same<typename dst_traits::non_const_value_type,"},
{"lineNum":" 2469","line":"                             typename dst_traits::value_type>::value,"},
{"lineNum":" 2470","line":"                \"deep_copy requires non-const type\");"},
{"lineNum":" 2471","line":"  using dst_memory_space = typename dst_traits::memory_space;"},
{"lineNum":" 2472","line":"  if (Kokkos::Tools::Experimental::get_callbacks().begin_deep_copy != nullptr) {"},
{"lineNum":" 2473","line":"    Kokkos::Profiling::beginDeepCopy("},
{"lineNum":" 2474","line":"        Kokkos::Profiling::make_space_handle(dst_memory_space::name()),"},
{"lineNum":" 2475","line":"        dst.label(), dst.data(),"},
{"lineNum":" 2476","line":"        Kokkos::Profiling::make_space_handle(Kokkos::HostSpace::name()),"},
{"lineNum":" 2477","line":"        \"(none)\", &value, dst.span() * sizeof(typename dst_traits::value_type));"},
{"lineNum":" 2478","line":"  }"},
{"lineNum":" 2479","line":"  if (dst.data() == nullptr) {"},
{"lineNum":" 2480","line":"    space.fence();"},
{"lineNum":" 2481","line":"  } else {"},
{"lineNum":" 2482","line":"    space.fence();"},
{"lineNum":" 2483","line":"    using ViewTypeUniform = typename std::conditional<"},
{"lineNum":" 2484","line":"        View<DT, DP...>::Rank == 0,"},
{"lineNum":" 2485","line":"        typename View<DT, DP...>::uniform_runtime_type,"},
{"lineNum":" 2486","line":"        typename View<DT, DP...>::uniform_runtime_nomemspace_type>::type;"},
{"lineNum":" 2487","line":"    using fill_exec_space = typename dst_traits::memory_space::execution_space;"},
{"lineNum":" 2488","line":"    Kokkos::Impl::ViewFill<ViewTypeUniform, typename dst_traits::array_layout,"},
{"lineNum":" 2489","line":"                           fill_exec_space>(dst, value, fill_exec_space());"},
{"lineNum":" 2490","line":"    fill_exec_space().fence();"},
{"lineNum":" 2491","line":"  }"},
{"lineNum":" 2492","line":"  if (Kokkos::Tools::Experimental::get_callbacks().end_deep_copy != nullptr) {"},
{"lineNum":" 2493","line":"    Kokkos::Profiling::endDeepCopy();"},
{"lineNum":" 2494","line":"  }"},
{"lineNum":" 2495","line":"}"},
{"lineNum":" 2496","line":""},
{"lineNum":" 2497","line":"/** \\brief  Deep copy into a value in Host memory from a view.  */"},
{"lineNum":" 2498","line":"template <class ExecSpace, class ST, class... SP>"},
{"lineNum":" 2499","line":"inline void deep_copy("},
{"lineNum":" 2500","line":"    const ExecSpace& exec_space,"},
{"lineNum":" 2501","line":"    typename ViewTraits<ST, SP...>::non_const_value_type& dst,"},
{"lineNum":" 2502","line":"    const View<ST, SP...>& src,"},
{"lineNum":" 2503","line":"    typename std::enable_if<"},
{"lineNum":" 2504","line":"        Kokkos::Impl::is_execution_space<ExecSpace>::value &&"},
{"lineNum":" 2505","line":"        std::is_same<typename ViewTraits<ST, SP...>::specialize,"},
{"lineNum":" 2506","line":"                     void>::value>::type* = nullptr) {"},
{"lineNum":" 2507","line":"  using src_traits       = ViewTraits<ST, SP...>;"},
{"lineNum":" 2508","line":"  using src_memory_space = typename src_traits::memory_space;"},
{"lineNum":" 2509","line":"  static_assert(src_traits::rank == 0,"},
{"lineNum":" 2510","line":"                \"ERROR: Non-rank-zero view in deep_copy( value , View )\");"},
{"lineNum":" 2511","line":"  if (Kokkos::Tools::Experimental::get_callbacks().begin_deep_copy != nullptr) {"},
{"lineNum":" 2512","line":"    Kokkos::Profiling::beginDeepCopy("},
{"lineNum":" 2513","line":"        Kokkos::Profiling::make_space_handle(Kokkos::HostSpace::name()),"},
{"lineNum":" 2514","line":"        \"(none)\", &dst,"},
{"lineNum":" 2515","line":"        Kokkos::Profiling::make_space_handle(src_memory_space::name()),"},
{"lineNum":" 2516","line":"        src.label(), src.data(), sizeof(ST));"},
{"lineNum":" 2517","line":"  }"},
{"lineNum":" 2518","line":""},
{"lineNum":" 2519","line":"  if (src.data() == nullptr) {"},
{"lineNum":" 2520","line":"    exec_space.fence();"},
{"lineNum":" 2521","line":"    if (Kokkos::Tools::Experimental::get_callbacks().end_deep_copy != nullptr) {"},
{"lineNum":" 2522","line":"      Kokkos::Profiling::endDeepCopy();"},
{"lineNum":" 2523","line":"    }"},
{"lineNum":" 2524","line":"    return;"},
{"lineNum":" 2525","line":"  }"},
{"lineNum":" 2526","line":""},
{"lineNum":" 2527","line":"  Kokkos::Impl::DeepCopy<HostSpace, src_memory_space, ExecSpace>("},
{"lineNum":" 2528","line":"      exec_space, &dst, src.data(), sizeof(ST));"},
{"lineNum":" 2529","line":"  if (Kokkos::Tools::Experimental::get_callbacks().end_deep_copy != nullptr) {"},
{"lineNum":" 2530","line":"    Kokkos::Profiling::endDeepCopy();"},
{"lineNum":" 2531","line":"  }"},
{"lineNum":" 2532","line":"}"},
{"lineNum":" 2533","line":""},
{"lineNum":" 2534","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 2535","line":"/** \\brief  A deep copy between views of compatible type, and rank zero.  */"},
{"lineNum":" 2536","line":"template <class ExecSpace, class DT, class... DP, class ST, class... SP>"},
{"lineNum":" 2537","line":"inline void deep_copy("},
{"lineNum":" 2538","line":"    const ExecSpace& exec_space, const View<DT, DP...>& dst,"},
{"lineNum":" 2539","line":"    const View<ST, SP...>& src,"},
{"lineNum":" 2540","line":"    typename std::enable_if<("},
{"lineNum":" 2541","line":"        Kokkos::Impl::is_execution_space<ExecSpace>::value &&"},
{"lineNum":" 2542","line":"        std::is_same<typename ViewTraits<DT, DP...>::specialize, void>::value &&"},
{"lineNum":" 2543","line":"        std::is_same<typename ViewTraits<ST, SP...>::specialize, void>::value &&"},
{"lineNum":" 2544","line":"        (unsigned(ViewTraits<DT, DP...>::rank) == unsigned(0) &&"},
{"lineNum":" 2545","line":"         unsigned(ViewTraits<ST, SP...>::rank) == unsigned(0)))>::type* ="},
{"lineNum":" 2546","line":"        nullptr) {"},
{"lineNum":" 2547","line":"  using src_traits = ViewTraits<ST, SP...>;"},
{"lineNum":" 2548","line":"  using dst_traits = ViewTraits<DT, DP...>;"},
{"lineNum":" 2549","line":""},
{"lineNum":" 2550","line":"  using src_memory_space = typename src_traits::memory_space;"},
{"lineNum":" 2551","line":"  using dst_memory_space = typename dst_traits::memory_space;"},
{"lineNum":" 2552","line":"  static_assert(std::is_same<typename dst_traits::value_type,"},
{"lineNum":" 2553","line":"                             typename src_traits::non_const_value_type>::value,"},
{"lineNum":" 2554","line":"                \"deep_copy requires matching non-const destination type\");"},
{"lineNum":" 2555","line":""},
{"lineNum":" 2556","line":"  if (Kokkos::Tools::Experimental::get_callbacks().begin_deep_copy != nullptr) {"},
{"lineNum":" 2557","line":"    Kokkos::Profiling::beginDeepCopy("},
{"lineNum":" 2558","line":"        Kokkos::Profiling::make_space_handle(dst_memory_space::name()),"},
{"lineNum":" 2559","line":"        dst.label(), dst.data(),"},
{"lineNum":" 2560","line":"        Kokkos::Profiling::make_space_handle(src_memory_space::name()),"},
{"lineNum":" 2561","line":"        src.label(), src.data(), sizeof(DT));"},
{"lineNum":" 2562","line":"  }"},
{"lineNum":" 2563","line":""},
{"lineNum":" 2564","line":"  if (dst.data() == nullptr && src.data() == nullptr) {"},
{"lineNum":" 2565","line":"    exec_space.fence();"},
{"lineNum":" 2566","line":"    if (Kokkos::Tools::Experimental::get_callbacks().end_deep_copy != nullptr) {"},
{"lineNum":" 2567","line":"      Kokkos::Profiling::endDeepCopy();"},
{"lineNum":" 2568","line":"    }"},
{"lineNum":" 2569","line":"    return;"},
{"lineNum":" 2570","line":"  }"},
{"lineNum":" 2571","line":""},
{"lineNum":" 2572","line":"  if (dst.data() != src.data()) {"},
{"lineNum":" 2573","line":"    Kokkos::Impl::DeepCopy<dst_memory_space, src_memory_space, ExecSpace>("},
{"lineNum":" 2574","line":"        exec_space, dst.data(), src.data(),"},
{"lineNum":" 2575","line":"        sizeof(typename dst_traits::value_type));"},
{"lineNum":" 2576","line":"  }"},
{"lineNum":" 2577","line":"  if (Kokkos::Tools::Experimental::get_callbacks().end_deep_copy != nullptr) {"},
{"lineNum":" 2578","line":"    Kokkos::Profiling::endDeepCopy();"},
{"lineNum":" 2579","line":"  }"},
{"lineNum":" 2580","line":"}"},
{"lineNum":" 2581","line":""},
{"lineNum":" 2582","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 2583","line":"/** \\brief  A deep copy between views of the default specialization, compatible"},
{"lineNum":" 2584","line":" * type, same non-zero rank"},
{"lineNum":" 2585","line":" */"},
{"lineNum":" 2586","line":"template <class ExecSpace, class DT, class... DP, class ST, class... SP>"},
{"lineNum":" 2587","line":"inline void deep_copy("},
{"lineNum":" 2588","line":"    const ExecSpace& exec_space, const View<DT, DP...>& dst,"},
{"lineNum":" 2589","line":"    const View<ST, SP...>& src,"},
{"lineNum":" 2590","line":"    typename std::enable_if<("},
{"lineNum":" 2591","line":"        Kokkos::Impl::is_execution_space<ExecSpace>::value &&"},
{"lineNum":" 2592","line":"        std::is_same<typename ViewTraits<DT, DP...>::specialize, void>::value &&"},
{"lineNum":" 2593","line":"        std::is_same<typename ViewTraits<ST, SP...>::specialize, void>::value &&"},
{"lineNum":" 2594","line":"        (unsigned(ViewTraits<DT, DP...>::rank) != 0 ||"},
{"lineNum":" 2595","line":"         unsigned(ViewTraits<ST, SP...>::rank) != 0))>::type* = nullptr) {"},
{"lineNum":" 2596","line":"  using dst_type = View<DT, DP...>;"},
{"lineNum":" 2597","line":"  using src_type = View<ST, SP...>;"},
{"lineNum":" 2598","line":""},
{"lineNum":" 2599","line":"  static_assert(std::is_same<typename dst_type::value_type,"},
{"lineNum":" 2600","line":"                             typename dst_type::non_const_value_type>::value,"},
{"lineNum":" 2601","line":"                \"deep_copy requires non-const destination type\");"},
{"lineNum":" 2602","line":""},
{"lineNum":" 2603","line":"  static_assert((unsigned(dst_type::rank) == unsigned(src_type::rank)),"},
{"lineNum":" 2604","line":"                \"deep_copy requires Views of equal rank\");"},
{"lineNum":" 2605","line":""},
{"lineNum":" 2606","line":"  using dst_execution_space = typename dst_type::execution_space;"},
{"lineNum":" 2607","line":"  using src_execution_space = typename src_type::execution_space;"},
{"lineNum":" 2608","line":"  using dst_memory_space    = typename dst_type::memory_space;"},
{"lineNum":" 2609","line":"  using src_memory_space    = typename src_type::memory_space;"},
{"lineNum":" 2610","line":"  using dst_value_type      = typename dst_type::value_type;"},
{"lineNum":" 2611","line":"  using src_value_type      = typename src_type::value_type;"},
{"lineNum":" 2612","line":""},
{"lineNum":" 2613","line":"  if (Kokkos::Tools::Experimental::get_callbacks().begin_deep_copy != nullptr) {"},
{"lineNum":" 2614","line":"    Kokkos::Profiling::beginDeepCopy("},
{"lineNum":" 2615","line":"        Kokkos::Profiling::make_space_handle(dst_memory_space::name()),"},
{"lineNum":" 2616","line":"        dst.label(), dst.data(),"},
{"lineNum":" 2617","line":"        Kokkos::Profiling::make_space_handle(src_memory_space::name()),"},
{"lineNum":" 2618","line":"        src.label(), src.data(), dst.span() * sizeof(dst_value_type));"},
{"lineNum":" 2619","line":"  }"},
{"lineNum":" 2620","line":""},
{"lineNum":" 2621","line":"  dst_value_type* dst_start = dst.data();"},
{"lineNum":" 2622","line":"  dst_value_type* dst_end   = dst.data() + dst.span();"},
{"lineNum":" 2623","line":"  src_value_type* src_start = src.data();"},
{"lineNum":" 2624","line":"  src_value_type* src_end   = src.data() + src.span();"},
{"lineNum":" 2625","line":""},
{"lineNum":" 2626","line":"  // Early dropout if identical range"},
{"lineNum":" 2627","line":"  if ((dst_start == nullptr || src_start == nullptr) ||"},
{"lineNum":" 2628","line":"      ((std::ptrdiff_t(dst_start) == std::ptrdiff_t(src_start)) &&"},
{"lineNum":" 2629","line":"       (std::ptrdiff_t(dst_end) == std::ptrdiff_t(src_end)))) {"},
{"lineNum":" 2630","line":"    // throw if dimension mismatch"},
{"lineNum":" 2631","line":"    if ((src.extent(0) != dst.extent(0)) || (src.extent(1) != dst.extent(1)) ||"},
{"lineNum":" 2632","line":"        (src.extent(2) != dst.extent(2)) || (src.extent(3) != dst.extent(3)) ||"},
{"lineNum":" 2633","line":"        (src.extent(4) != dst.extent(4)) || (src.extent(5) != dst.extent(5)) ||"},
{"lineNum":" 2634","line":"        (src.extent(6) != dst.extent(6)) || (src.extent(7) != dst.extent(7))) {"},
{"lineNum":" 2635","line":"      std::string message("},
{"lineNum":" 2636","line":"          \"Deprecation Error: Kokkos::deep_copy extents of views don\'t \""},
{"lineNum":" 2637","line":"          \"match: \");"},
{"lineNum":" 2638","line":"      message += dst.label();"},
{"lineNum":" 2639","line":"      message += \"(\";"},
{"lineNum":" 2640","line":"      for (int r = 0; r < dst_type::Rank - 1; r++) {"},
{"lineNum":" 2641","line":"        message += std::to_string(dst.extent(r));"},
{"lineNum":" 2642","line":"        message += \",\";"},
{"lineNum":" 2643","line":"      }"},
{"lineNum":" 2644","line":"      message += std::to_string(dst.extent(dst_type::Rank - 1));"},
{"lineNum":" 2645","line":"      message += \") \";"},
{"lineNum":" 2646","line":"      message += src.label();"},
{"lineNum":" 2647","line":"      message += \"(\";"},
{"lineNum":" 2648","line":"      for (int r = 0; r < src_type::Rank - 1; r++) {"},
{"lineNum":" 2649","line":"        message += std::to_string(src.extent(r));"},
{"lineNum":" 2650","line":"        message += \",\";"},
{"lineNum":" 2651","line":"      }"},
{"lineNum":" 2652","line":"      message += std::to_string(src.extent(src_type::Rank - 1));"},
{"lineNum":" 2653","line":"      message += \") \";"},
{"lineNum":" 2654","line":""},
{"lineNum":" 2655","line":"      Kokkos::Impl::throw_runtime_exception(message);"},
{"lineNum":" 2656","line":"    }"},
{"lineNum":" 2657","line":"    if (Kokkos::Tools::Experimental::get_callbacks().end_deep_copy != nullptr) {"},
{"lineNum":" 2658","line":"      Kokkos::Profiling::endDeepCopy();"},
{"lineNum":" 2659","line":"    }"},
{"lineNum":" 2660","line":"    return;"},
{"lineNum":" 2661","line":"  }"},
{"lineNum":" 2662","line":""},
{"lineNum":" 2663","line":"  enum {"},
{"lineNum":" 2664","line":"    ExecCanAccessSrcDst ="},
{"lineNum":" 2665","line":"        Kokkos::Impl::SpaceAccessibility<ExecSpace,"},
{"lineNum":" 2666","line":"                                         dst_memory_space>::accessible &&"},
{"lineNum":" 2667","line":"        Kokkos::Impl::SpaceAccessibility<ExecSpace,"},
{"lineNum":" 2668","line":"                                         src_memory_space>::accessible"},
{"lineNum":" 2669","line":"  };"},
{"lineNum":" 2670","line":"  enum {"},
{"lineNum":" 2671","line":"    DstExecCanAccessSrc ="},
{"lineNum":" 2672","line":"        Kokkos::Impl::SpaceAccessibility<dst_execution_space,"},
{"lineNum":" 2673","line":"                                         src_memory_space>::accessible"},
{"lineNum":" 2674","line":"  };"},
{"lineNum":" 2675","line":""},
{"lineNum":" 2676","line":"  enum {"},
{"lineNum":" 2677","line":"    SrcExecCanAccessDst ="},
{"lineNum":" 2678","line":"        Kokkos::Impl::SpaceAccessibility<src_execution_space,"},
{"lineNum":" 2679","line":"                                         dst_memory_space>::accessible"},
{"lineNum":" 2680","line":"  };"},
{"lineNum":" 2681","line":""},
{"lineNum":" 2682","line":"  // Error out for non-identical overlapping views."},
{"lineNum":" 2683","line":"  if ((((std::ptrdiff_t)dst_start < (std::ptrdiff_t)src_end) &&"},
{"lineNum":" 2684","line":"       ((std::ptrdiff_t)dst_end > (std::ptrdiff_t)src_start)) &&"},
{"lineNum":" 2685","line":"      ((dst.span_is_contiguous() && src.span_is_contiguous()))) {"},
{"lineNum":" 2686","line":"    std::string message(\"Error: Kokkos::deep_copy of overlapping views: \");"},
{"lineNum":" 2687","line":"    message += dst.label();"},
{"lineNum":" 2688","line":"    message += \"(\";"},
{"lineNum":" 2689","line":"    message += std::to_string((std::ptrdiff_t)dst_start);"},
{"lineNum":" 2690","line":"    message += \",\";"},
{"lineNum":" 2691","line":"    message += std::to_string((std::ptrdiff_t)dst_end);"},
{"lineNum":" 2692","line":"    message += \") \";"},
{"lineNum":" 2693","line":"    message += src.label();"},
{"lineNum":" 2694","line":"    message += \"(\";"},
{"lineNum":" 2695","line":"    message += std::to_string((std::ptrdiff_t)src_start);"},
{"lineNum":" 2696","line":"    message += \",\";"},
{"lineNum":" 2697","line":"    message += std::to_string((std::ptrdiff_t)src_end);"},
{"lineNum":" 2698","line":"    message += \") \";"},
{"lineNum":" 2699","line":"    Kokkos::Impl::throw_runtime_exception(message);"},
{"lineNum":" 2700","line":"  }"},
{"lineNum":" 2701","line":""},
{"lineNum":" 2702","line":"  // Check for same extents"},
{"lineNum":" 2703","line":"  if ((src.extent(0) != dst.extent(0)) || (src.extent(1) != dst.extent(1)) ||"},
{"lineNum":" 2704","line":"      (src.extent(2) != dst.extent(2)) || (src.extent(3) != dst.extent(3)) ||"},
{"lineNum":" 2705","line":"      (src.extent(4) != dst.extent(4)) || (src.extent(5) != dst.extent(5)) ||"},
{"lineNum":" 2706","line":"      (src.extent(6) != dst.extent(6)) || (src.extent(7) != dst.extent(7))) {"},
{"lineNum":" 2707","line":"    std::string message("},
{"lineNum":" 2708","line":"        \"Deprecation Error: Kokkos::deep_copy extents of views don\'t match: \");"},
{"lineNum":" 2709","line":"    message += dst.label();"},
{"lineNum":" 2710","line":"    message += \"(\";"},
{"lineNum":" 2711","line":"    for (int r = 0; r < dst_type::Rank - 1; r++) {"},
{"lineNum":" 2712","line":"      message += std::to_string(dst.extent(r));"},
{"lineNum":" 2713","line":"      message += \",\";"},
{"lineNum":" 2714","line":"    }"},
{"lineNum":" 2715","line":"    message += std::to_string(dst.extent(dst_type::Rank - 1));"},
{"lineNum":" 2716","line":"    message += \") \";"},
{"lineNum":" 2717","line":"    message += src.label();"},
{"lineNum":" 2718","line":"    message += \"(\";"},
{"lineNum":" 2719","line":"    for (int r = 0; r < src_type::Rank - 1; r++) {"},
{"lineNum":" 2720","line":"      message += std::to_string(src.extent(r));"},
{"lineNum":" 2721","line":"      message += \",\";"},
{"lineNum":" 2722","line":"    }"},
{"lineNum":" 2723","line":"    message += std::to_string(src.extent(src_type::Rank - 1));"},
{"lineNum":" 2724","line":"    message += \") \";"},
{"lineNum":" 2725","line":""},
{"lineNum":" 2726","line":"    Kokkos::Impl::throw_runtime_exception(message);"},
{"lineNum":" 2727","line":"  }"},
{"lineNum":" 2728","line":""},
{"lineNum":" 2729","line":"  // If same type, equal layout, equal dimensions, equal span, and contiguous"},
{"lineNum":" 2730","line":"  // memory then can byte-wise copy"},
{"lineNum":" 2731","line":""},
{"lineNum":" 2732","line":"  if (std::is_same<typename dst_type::value_type,"},
{"lineNum":" 2733","line":"                   typename src_type::non_const_value_type>::value &&"},
{"lineNum":" 2734","line":"      (std::is_same<typename dst_type::array_layout,"},
{"lineNum":" 2735","line":"                    typename src_type::array_layout>::value ||"},
{"lineNum":" 2736","line":"       (dst_type::rank == 1 && src_type::rank == 1)) &&"},
{"lineNum":" 2737","line":"      dst.span_is_contiguous() && src.span_is_contiguous() &&"},
{"lineNum":" 2738","line":"      ((dst_type::rank < 1) || (dst.stride_0() == src.stride_0())) &&"},
{"lineNum":" 2739","line":"      ((dst_type::rank < 2) || (dst.stride_1() == src.stride_1())) &&"},
{"lineNum":" 2740","line":"      ((dst_type::rank < 3) || (dst.stride_2() == src.stride_2())) &&"},
{"lineNum":" 2741","line":"      ((dst_type::rank < 4) || (dst.stride_3() == src.stride_3())) &&"},
{"lineNum":" 2742","line":"      ((dst_type::rank < 5) || (dst.stride_4() == src.stride_4())) &&"},
{"lineNum":" 2743","line":"      ((dst_type::rank < 6) || (dst.stride_5() == src.stride_5())) &&"},
{"lineNum":" 2744","line":"      ((dst_type::rank < 7) || (dst.stride_6() == src.stride_6())) &&"},
{"lineNum":" 2745","line":"      ((dst_type::rank < 8) || (dst.stride_7() == src.stride_7()))) {"},
{"lineNum":" 2746","line":"    const size_t nbytes = sizeof(typename dst_type::value_type) * dst.span();"},
{"lineNum":" 2747","line":"    if ((void*)dst.data() != (void*)src.data()) {"},
{"lineNum":" 2748","line":"      Kokkos::Impl::DeepCopy<dst_memory_space, src_memory_space, ExecSpace>("},
{"lineNum":" 2749","line":"          exec_space, dst.data(), src.data(), nbytes);"},
{"lineNum":" 2750","line":"    }"},
{"lineNum":" 2751","line":"  } else {"},
{"lineNum":" 2752","line":"    // Copying data between views in accessible memory spaces and either"},
{"lineNum":" 2753","line":"    // non-contiguous or incompatible shape."},
{"lineNum":" 2754","line":"    if (ExecCanAccessSrcDst) {"},
{"lineNum":" 2755","line":"      Impl::view_copy(exec_space, dst, src);"},
{"lineNum":" 2756","line":"    } else if (DstExecCanAccessSrc || SrcExecCanAccessDst) {"},
{"lineNum":" 2757","line":"      using cpy_exec_space ="},
{"lineNum":" 2758","line":"          typename std::conditional<DstExecCanAccessSrc, dst_execution_space,"},
{"lineNum":" 2759","line":"                                    src_execution_space>::type;"},
{"lineNum":" 2760","line":"      exec_space.fence();"},
{"lineNum":" 2761","line":"      Impl::view_copy(cpy_exec_space(), dst, src);"},
{"lineNum":" 2762","line":"      cpy_exec_space().fence();"},
{"lineNum":" 2763","line":"    } else {"},
{"lineNum":" 2764","line":"      Kokkos::Impl::throw_runtime_exception("},
{"lineNum":" 2765","line":"          \"deep_copy given views that would require a temporary allocation\");"},
{"lineNum":" 2766","line":"    }"},
{"lineNum":" 2767","line":"  }"},
{"lineNum":" 2768","line":"  if (Kokkos::Tools::Experimental::get_callbacks().end_deep_copy != nullptr) {"},
{"lineNum":" 2769","line":"    Kokkos::Profiling::endDeepCopy();"},
{"lineNum":" 2770","line":"  }"},
{"lineNum":" 2771","line":"}"},
{"lineNum":" 2772","line":""},
{"lineNum":" 2773","line":"} /* namespace Kokkos */"},
{"lineNum":" 2774","line":""},
{"lineNum":" 2775","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 2776","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 2777","line":""},
{"lineNum":" 2778","line":"namespace Kokkos {"},
{"lineNum":" 2779","line":""},
{"lineNum":" 2780","line":"/** \\brief  Resize a view with copying old data to new data at the corresponding"},
{"lineNum":" 2781","line":" * indices. */"},
{"lineNum":" 2782","line":"template <class T, class... P>"},
{"lineNum":" 2783","line":"inline typename std::enable_if<"},
{"lineNum":" 2784","line":"    std::is_same<typename Kokkos::View<T, P...>::array_layout,"},
{"lineNum":" 2785","line":"                 Kokkos::LayoutLeft>::value ||"},
{"lineNum":" 2786","line":"    std::is_same<typename Kokkos::View<T, P...>::array_layout,"},
{"lineNum":" 2787","line":"                 Kokkos::LayoutRight>::value>::type"},
{"lineNum":" 2788","line":"resize(Kokkos::View<T, P...>& v, const size_t n0 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 2789","line":"       const size_t n1 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 2790","line":"       const size_t n2 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 2791","line":"       const size_t n3 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 2792","line":"       const size_t n4 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 2793","line":"       const size_t n5 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 2794","line":"       const size_t n6 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 2795","line":"       const size_t n7 = KOKKOS_IMPL_CTOR_DEFAULT_ARG) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2796","line":"  using view_type = Kokkos::View<T, P...>;"},
{"lineNum":" 2797","line":""},
{"lineNum":" 2798","line":"  static_assert(Kokkos::ViewTraits<T, P...>::is_managed,"},
{"lineNum":" 2799","line":"                \"Can only resize managed views\");"},
{"lineNum":" 2800","line":""},
{"lineNum":" 2801","line":"  // Fix #904 by checking dimensions before actually resizing."},
{"lineNum":" 2802","line":"  //"},
{"lineNum":" 2803","line":"  // Rank is known at compile time, so hopefully the compiler will"},
{"lineNum":" 2804","line":"  // remove branches that are compile-time false.  The upcoming \"if"},
{"lineNum":" 2805","line":"  // constexpr\" language feature would make this certain."},
{"lineNum":" 2806","line":"  if (view_type::Rank == 1 && n0 == static_cast<size_t>(v.extent(0))) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2807","line":"    return;"},
{"lineNum":" 2808","line":"  }"},
{"lineNum":" 2809","line":"  if (view_type::Rank == 2 && n0 == static_cast<size_t>(v.extent(0)) &&","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2810","line":"      n1 == static_cast<size_t>(v.extent(1))) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2811","line":"    return;"},
{"lineNum":" 2812","line":"  }"},
{"lineNum":" 2813","line":"  if (view_type::Rank == 3 && n0 == static_cast<size_t>(v.extent(0)) &&"},
{"lineNum":" 2814","line":"      n1 == static_cast<size_t>(v.extent(1)) &&"},
{"lineNum":" 2815","line":"      n2 == static_cast<size_t>(v.extent(2))) {"},
{"lineNum":" 2816","line":"    return;"},
{"lineNum":" 2817","line":"  }"},
{"lineNum":" 2818","line":"  if (view_type::Rank == 4 && n0 == static_cast<size_t>(v.extent(0)) &&"},
{"lineNum":" 2819","line":"      n1 == static_cast<size_t>(v.extent(1)) &&"},
{"lineNum":" 2820","line":"      n2 == static_cast<size_t>(v.extent(2)) &&"},
{"lineNum":" 2821","line":"      n3 == static_cast<size_t>(v.extent(3))) {"},
{"lineNum":" 2822","line":"    return;"},
{"lineNum":" 2823","line":"  }"},
{"lineNum":" 2824","line":"  if (view_type::Rank == 5 && n0 == static_cast<size_t>(v.extent(0)) &&"},
{"lineNum":" 2825","line":"      n1 == static_cast<size_t>(v.extent(1)) &&"},
{"lineNum":" 2826","line":"      n2 == static_cast<size_t>(v.extent(2)) &&"},
{"lineNum":" 2827","line":"      n3 == static_cast<size_t>(v.extent(3)) &&"},
{"lineNum":" 2828","line":"      n4 == static_cast<size_t>(v.extent(4))) {"},
{"lineNum":" 2829","line":"    return;"},
{"lineNum":" 2830","line":"  }"},
{"lineNum":" 2831","line":"  if (view_type::Rank == 6 && n0 == static_cast<size_t>(v.extent(0)) &&"},
{"lineNum":" 2832","line":"      n1 == static_cast<size_t>(v.extent(1)) &&"},
{"lineNum":" 2833","line":"      n2 == static_cast<size_t>(v.extent(2)) &&"},
{"lineNum":" 2834","line":"      n3 == static_cast<size_t>(v.extent(3)) &&"},
{"lineNum":" 2835","line":"      n4 == static_cast<size_t>(v.extent(4)) &&"},
{"lineNum":" 2836","line":"      n5 == static_cast<size_t>(v.extent(5))) {"},
{"lineNum":" 2837","line":"    return;"},
{"lineNum":" 2838","line":"  }"},
{"lineNum":" 2839","line":"  if (view_type::Rank == 7 && n0 == static_cast<size_t>(v.extent(0)) &&"},
{"lineNum":" 2840","line":"      n1 == static_cast<size_t>(v.extent(1)) &&"},
{"lineNum":" 2841","line":"      n2 == static_cast<size_t>(v.extent(2)) &&"},
{"lineNum":" 2842","line":"      n3 == static_cast<size_t>(v.extent(3)) &&"},
{"lineNum":" 2843","line":"      n4 == static_cast<size_t>(v.extent(4)) &&"},
{"lineNum":" 2844","line":"      n5 == static_cast<size_t>(v.extent(5)) &&"},
{"lineNum":" 2845","line":"      n6 == static_cast<size_t>(v.extent(6))) {"},
{"lineNum":" 2846","line":"    return;"},
{"lineNum":" 2847","line":"  }"},
{"lineNum":" 2848","line":"  if (view_type::Rank == 8 && n0 == static_cast<size_t>(v.extent(0)) &&"},
{"lineNum":" 2849","line":"      n1 == static_cast<size_t>(v.extent(1)) &&"},
{"lineNum":" 2850","line":"      n2 == static_cast<size_t>(v.extent(2)) &&"},
{"lineNum":" 2851","line":"      n3 == static_cast<size_t>(v.extent(3)) &&"},
{"lineNum":" 2852","line":"      n4 == static_cast<size_t>(v.extent(4)) &&"},
{"lineNum":" 2853","line":"      n5 == static_cast<size_t>(v.extent(5)) &&"},
{"lineNum":" 2854","line":"      n6 == static_cast<size_t>(v.extent(6)) &&"},
{"lineNum":" 2855","line":"      n7 == static_cast<size_t>(v.extent(7))) {"},
{"lineNum":" 2856","line":"    return;"},
{"lineNum":" 2857","line":"  }"},
{"lineNum":" 2858","line":"  // If Kokkos ever supports Views of rank > 8, the above code won\'t"},
{"lineNum":" 2859","line":"  // be incorrect, because avoiding reallocation in resize() is just"},
{"lineNum":" 2860","line":"  // an optimization."},
{"lineNum":" 2861","line":""},
{"lineNum":" 2862","line":"  // TODO (mfh 27 Jun 2017) If the old View has enough space but just"},
{"lineNum":" 2863","line":"  // different dimensions (e.g., if the product of the dimensions,"},
{"lineNum":" 2864","line":"  // including extra space for alignment, will not change), then"},
{"lineNum":" 2865","line":"  // consider just reusing storage.  For now, Kokkos always"},
{"lineNum":" 2866","line":"  // reallocates if any of the dimensions change, even if the old View"},
{"lineNum":" 2867","line":"  // has enough space."},
{"lineNum":" 2868","line":""},
{"lineNum":" 2869","line":"  view_type v_resized(v.label(), n0, n1, n2, n3, n4, n5, n6, n7);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2870","line":""},
{"lineNum":" 2871","line":"  Kokkos::Impl::ViewRemap<view_type, view_type>(v_resized, v);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2872","line":""},
{"lineNum":" 2873","line":"  v = v_resized;"},
{"lineNum":" 2874","line":"}","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 2875","line":""},
{"lineNum":" 2876","line":"/** \\brief  Resize a view with copying old data to new data at the corresponding"},
{"lineNum":" 2877","line":" * indices. */"},
{"lineNum":" 2878","line":"template <class I, class T, class... P>"},
{"lineNum":" 2879","line":"inline typename std::enable_if<"},
{"lineNum":" 2880","line":"    std::is_same<typename Kokkos::View<T, P...>::array_layout,"},
{"lineNum":" 2881","line":"                 Kokkos::LayoutLeft>::value ||"},
{"lineNum":" 2882","line":"    std::is_same<typename Kokkos::View<T, P...>::array_layout,"},
{"lineNum":" 2883","line":"                 Kokkos::LayoutRight>::value>::type"},
{"lineNum":" 2884","line":"resize(const I& arg_prop, Kokkos::View<T, P...>& v,"},
{"lineNum":" 2885","line":"       const size_t n0 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 2886","line":"       const size_t n1 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 2887","line":"       const size_t n2 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 2888","line":"       const size_t n3 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 2889","line":"       const size_t n4 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 2890","line":"       const size_t n5 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 2891","line":"       const size_t n6 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 2892","line":"       const size_t n7 = KOKKOS_IMPL_CTOR_DEFAULT_ARG) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2893","line":"  using view_type = Kokkos::View<T, P...>;"},
{"lineNum":" 2894","line":""},
{"lineNum":" 2895","line":"  static_assert(Kokkos::ViewTraits<T, P...>::is_managed,"},
{"lineNum":" 2896","line":"                \"Can only resize managed views\");"},
{"lineNum":" 2897","line":""},
{"lineNum":" 2898","line":"  // Fix #904 by checking dimensions before actually resizing."},
{"lineNum":" 2899","line":"  //"},
{"lineNum":" 2900","line":"  // Rank is known at compile time, so hopefully the compiler will"},
{"lineNum":" 2901","line":"  // remove branches that are compile-time false.  The upcoming \"if"},
{"lineNum":" 2902","line":"  // constexpr\" language feature would make this certain."},
{"lineNum":" 2903","line":"  if (view_type::Rank == 1 && n0 == static_cast<size_t>(v.extent(0))) {"},
{"lineNum":" 2904","line":"    return;"},
{"lineNum":" 2905","line":"  }"},
{"lineNum":" 2906","line":"  if (view_type::Rank == 2 && n0 == static_cast<size_t>(v.extent(0)) &&","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2907","line":"      n1 == static_cast<size_t>(v.extent(1))) {"},
{"lineNum":" 2908","line":"    return;"},
{"lineNum":" 2909","line":"  }"},
{"lineNum":" 2910","line":"  if (view_type::Rank == 3 && n0 == static_cast<size_t>(v.extent(0)) &&"},
{"lineNum":" 2911","line":"      n1 == static_cast<size_t>(v.extent(1)) &&"},
{"lineNum":" 2912","line":"      n2 == static_cast<size_t>(v.extent(2))) {"},
{"lineNum":" 2913","line":"    return;"},
{"lineNum":" 2914","line":"  }"},
{"lineNum":" 2915","line":"  if (view_type::Rank == 4 && n0 == static_cast<size_t>(v.extent(0)) &&"},
{"lineNum":" 2916","line":"      n1 == static_cast<size_t>(v.extent(1)) &&"},
{"lineNum":" 2917","line":"      n2 == static_cast<size_t>(v.extent(2)) &&"},
{"lineNum":" 2918","line":"      n3 == static_cast<size_t>(v.extent(3))) {"},
{"lineNum":" 2919","line":"    return;"},
{"lineNum":" 2920","line":"  }"},
{"lineNum":" 2921","line":"  if (view_type::Rank == 5 && n0 == static_cast<size_t>(v.extent(0)) &&"},
{"lineNum":" 2922","line":"      n1 == static_cast<size_t>(v.extent(1)) &&"},
{"lineNum":" 2923","line":"      n2 == static_cast<size_t>(v.extent(2)) &&"},
{"lineNum":" 2924","line":"      n3 == static_cast<size_t>(v.extent(3)) &&"},
{"lineNum":" 2925","line":"      n4 == static_cast<size_t>(v.extent(4))) {"},
{"lineNum":" 2926","line":"    return;"},
{"lineNum":" 2927","line":"  }"},
{"lineNum":" 2928","line":"  if (view_type::Rank == 6 && n0 == static_cast<size_t>(v.extent(0)) &&"},
{"lineNum":" 2929","line":"      n1 == static_cast<size_t>(v.extent(1)) &&"},
{"lineNum":" 2930","line":"      n2 == static_cast<size_t>(v.extent(2)) &&"},
{"lineNum":" 2931","line":"      n3 == static_cast<size_t>(v.extent(3)) &&"},
{"lineNum":" 2932","line":"      n4 == static_cast<size_t>(v.extent(4)) &&"},
{"lineNum":" 2933","line":"      n5 == static_cast<size_t>(v.extent(5))) {"},
{"lineNum":" 2934","line":"    return;"},
{"lineNum":" 2935","line":"  }"},
{"lineNum":" 2936","line":"  if (view_type::Rank == 7 && n0 == static_cast<size_t>(v.extent(0)) &&"},
{"lineNum":" 2937","line":"      n1 == static_cast<size_t>(v.extent(1)) &&"},
{"lineNum":" 2938","line":"      n2 == static_cast<size_t>(v.extent(2)) &&"},
{"lineNum":" 2939","line":"      n3 == static_cast<size_t>(v.extent(3)) &&"},
{"lineNum":" 2940","line":"      n4 == static_cast<size_t>(v.extent(4)) &&"},
{"lineNum":" 2941","line":"      n5 == static_cast<size_t>(v.extent(5)) &&"},
{"lineNum":" 2942","line":"      n6 == static_cast<size_t>(v.extent(6))) {"},
{"lineNum":" 2943","line":"    return;"},
{"lineNum":" 2944","line":"  }"},
{"lineNum":" 2945","line":"  if (view_type::Rank == 8 && n0 == static_cast<size_t>(v.extent(0)) &&"},
{"lineNum":" 2946","line":"      n1 == static_cast<size_t>(v.extent(1)) &&"},
{"lineNum":" 2947","line":"      n2 == static_cast<size_t>(v.extent(2)) &&"},
{"lineNum":" 2948","line":"      n3 == static_cast<size_t>(v.extent(3)) &&"},
{"lineNum":" 2949","line":"      n4 == static_cast<size_t>(v.extent(4)) &&"},
{"lineNum":" 2950","line":"      n5 == static_cast<size_t>(v.extent(5)) &&"},
{"lineNum":" 2951","line":"      n6 == static_cast<size_t>(v.extent(6)) &&"},
{"lineNum":" 2952","line":"      n7 == static_cast<size_t>(v.extent(7))) {"},
{"lineNum":" 2953","line":"    return;"},
{"lineNum":" 2954","line":"  }"},
{"lineNum":" 2955","line":"  // If Kokkos ever supports Views of rank > 8, the above code won\'t"},
{"lineNum":" 2956","line":"  // be incorrect, because avoiding reallocation in resize() is just"},
{"lineNum":" 2957","line":"  // an optimization."},
{"lineNum":" 2958","line":""},
{"lineNum":" 2959","line":"  // TODO (mfh 27 Jun 2017) If the old View has enough space but just"},
{"lineNum":" 2960","line":"  // different dimensions (e.g., if the product of the dimensions,"},
{"lineNum":" 2961","line":"  // including extra space for alignment, will not change), then"},
{"lineNum":" 2962","line":"  // consider just reusing storage.  For now, Kokkos always"},
{"lineNum":" 2963","line":"  // reallocates if any of the dimensions change, even if the old View"},
{"lineNum":" 2964","line":"  // has enough space."},
{"lineNum":" 2965","line":""},
{"lineNum":" 2966","line":"  view_type v_resized(view_alloc(v.label(), std::forward<const I>(arg_prop)),"},
{"lineNum":" 2967","line":"                      n0, n1, n2, n3, n4, n5, n6, n7);"},
{"lineNum":" 2968","line":""},
{"lineNum":" 2969","line":"  Kokkos::Impl::ViewRemap<view_type, view_type>(v_resized, v);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2970","line":""},
{"lineNum":" 2971","line":"  v = v_resized;"},
{"lineNum":" 2972","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2973","line":""},
{"lineNum":" 2974","line":"/** \\brief  Resize a view with copying old data to new data at the corresponding"},
{"lineNum":" 2975","line":" * indices. */"},
{"lineNum":" 2976","line":"template <class T, class... P>"},
{"lineNum":" 2977","line":"inline void resize(Kokkos::View<T, P...>& v,"},
{"lineNum":" 2978","line":"                   const typename Kokkos::View<T, P...>::array_layout& layout) {"},
{"lineNum":" 2979","line":"  using view_type = Kokkos::View<T, P...>;"},
{"lineNum":" 2980","line":""},
{"lineNum":" 2981","line":"  static_assert(Kokkos::ViewTraits<T, P...>::is_managed,"},
{"lineNum":" 2982","line":"                \"Can only resize managed views\");"},
{"lineNum":" 2983","line":""},
{"lineNum":" 2984","line":"  view_type v_resized(v.label(), layout);"},
{"lineNum":" 2985","line":""},
{"lineNum":" 2986","line":"  Kokkos::Impl::ViewRemap<view_type, view_type>(v_resized, v);"},
{"lineNum":" 2987","line":""},
{"lineNum":" 2988","line":"  v = v_resized;"},
{"lineNum":" 2989","line":"}"},
{"lineNum":" 2990","line":""},
{"lineNum":" 2991","line":"/** \\brief  Resize a view with discarding old data. */"},
{"lineNum":" 2992","line":"template <class T, class... P>"},
{"lineNum":" 2993","line":"inline typename std::enable_if<"},
{"lineNum":" 2994","line":"    std::is_same<typename Kokkos::View<T, P...>::array_layout,"},
{"lineNum":" 2995","line":"                 Kokkos::LayoutLeft>::value ||"},
{"lineNum":" 2996","line":"    std::is_same<typename Kokkos::View<T, P...>::array_layout,"},
{"lineNum":" 2997","line":"                 Kokkos::LayoutRight>::value>::type"},
{"lineNum":" 2998","line":"realloc(Kokkos::View<T, P...>& v,"},
{"lineNum":" 2999","line":"        const size_t n0 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 3000","line":"        const size_t n1 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 3001","line":"        const size_t n2 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 3002","line":"        const size_t n3 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 3003","line":"        const size_t n4 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 3004","line":"        const size_t n5 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 3005","line":"        const size_t n6 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 3006","line":"        const size_t n7 = KOKKOS_IMPL_CTOR_DEFAULT_ARG) {"},
{"lineNum":" 3007","line":"  using view_type = Kokkos::View<T, P...>;"},
{"lineNum":" 3008","line":""},
{"lineNum":" 3009","line":"  static_assert(Kokkos::ViewTraits<T, P...>::is_managed,"},
{"lineNum":" 3010","line":"                \"Can only realloc managed views\");"},
{"lineNum":" 3011","line":""},
{"lineNum":" 3012","line":"  const std::string label = v.label();"},
{"lineNum":" 3013","line":""},
{"lineNum":" 3014","line":"  v = view_type();  // Deallocate first, if the only view to allocation"},
{"lineNum":" 3015","line":"  v = view_type(label, n0, n1, n2, n3, n4, n5, n6, n7);"},
{"lineNum":" 3016","line":"}"},
{"lineNum":" 3017","line":""},
{"lineNum":" 3018","line":"/** \\brief  Resize a view with discarding old data. */"},
{"lineNum":" 3019","line":"template <class T, class... P>"},
{"lineNum":" 3020","line":"inline void realloc("},
{"lineNum":" 3021","line":"    Kokkos::View<T, P...>& v,"},
{"lineNum":" 3022","line":"    const typename Kokkos::View<T, P...>::array_layout& layout) {"},
{"lineNum":" 3023","line":"  using view_type = Kokkos::View<T, P...>;"},
{"lineNum":" 3024","line":""},
{"lineNum":" 3025","line":"  static_assert(Kokkos::ViewTraits<T, P...>::is_managed,"},
{"lineNum":" 3026","line":"                \"Can only realloc managed views\");"},
{"lineNum":" 3027","line":""},
{"lineNum":" 3028","line":"  const std::string label = v.label();"},
{"lineNum":" 3029","line":""},
{"lineNum":" 3030","line":"  v = view_type();  // Deallocate first, if the only view to allocation"},
{"lineNum":" 3031","line":"  v = view_type(label, layout);"},
{"lineNum":" 3032","line":"}"},
{"lineNum":" 3033","line":"} /* namespace Kokkos */"},
{"lineNum":" 3034","line":""},
{"lineNum":" 3035","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 3036","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 3037","line":""},
{"lineNum":" 3038","line":"namespace Kokkos {"},
{"lineNum":" 3039","line":"namespace Impl {"},
{"lineNum":" 3040","line":""},
{"lineNum":" 3041","line":"// Deduce Mirror Types"},
{"lineNum":" 3042","line":"template <class Space, class T, class... P>"},
{"lineNum":" 3043","line":"struct MirrorViewType {"},
{"lineNum":" 3044","line":"  // The incoming view_type"},
{"lineNum":" 3045","line":"  using src_view_type = typename Kokkos::View<T, P...>;"},
{"lineNum":" 3046","line":"  // The memory space for the mirror view"},
{"lineNum":" 3047","line":"  using memory_space = typename Space::memory_space;"},
{"lineNum":" 3048","line":"  // Check whether it is the same memory space"},
{"lineNum":" 3049","line":"  enum {"},
{"lineNum":" 3050","line":"    is_same_memspace ="},
{"lineNum":" 3051","line":"        std::is_same<memory_space, typename src_view_type::memory_space>::value"},
{"lineNum":" 3052","line":"  };"},
{"lineNum":" 3053","line":"  // The array_layout"},
{"lineNum":" 3054","line":"  using array_layout = typename src_view_type::array_layout;"},
{"lineNum":" 3055","line":"  // The data type (we probably want it non-const since otherwise we can\'t even"},
{"lineNum":" 3056","line":"  // deep_copy to it."},
{"lineNum":" 3057","line":"  using data_type = typename src_view_type::non_const_data_type;"},
{"lineNum":" 3058","line":"  // The destination view type if it is not the same memory space"},
{"lineNum":" 3059","line":"  using dest_view_type = Kokkos::View<data_type, array_layout, Space>;"},
{"lineNum":" 3060","line":"  // If it is the same memory_space return the existsing view_type"},
{"lineNum":" 3061","line":"  // This will also keep the unmanaged trait if necessary"},
{"lineNum":" 3062","line":"  using view_type = typename std::conditional<is_same_memspace, src_view_type,"},
{"lineNum":" 3063","line":"                                              dest_view_type>::type;"},
{"lineNum":" 3064","line":"};"},
{"lineNum":" 3065","line":""},
{"lineNum":" 3066","line":"template <class Space, class T, class... P>"},
{"lineNum":" 3067","line":"struct MirrorType {"},
{"lineNum":" 3068","line":"  // The incoming view_type"},
{"lineNum":" 3069","line":"  using src_view_type = typename Kokkos::View<T, P...>;"},
{"lineNum":" 3070","line":"  // The memory space for the mirror view"},
{"lineNum":" 3071","line":"  using memory_space = typename Space::memory_space;"},
{"lineNum":" 3072","line":"  // Check whether it is the same memory space"},
{"lineNum":" 3073","line":"  enum {"},
{"lineNum":" 3074","line":"    is_same_memspace ="},
{"lineNum":" 3075","line":"        std::is_same<memory_space, typename src_view_type::memory_space>::value"},
{"lineNum":" 3076","line":"  };"},
{"lineNum":" 3077","line":"  // The array_layout"},
{"lineNum":" 3078","line":"  using array_layout = typename src_view_type::array_layout;"},
{"lineNum":" 3079","line":"  // The data type (we probably want it non-const since otherwise we can\'t even"},
{"lineNum":" 3080","line":"  // deep_copy to it."},
{"lineNum":" 3081","line":"  using data_type = typename src_view_type::non_const_data_type;"},
{"lineNum":" 3082","line":"  // The destination view type if it is not the same memory space"},
{"lineNum":" 3083","line":"  using view_type = Kokkos::View<data_type, array_layout, Space>;"},
{"lineNum":" 3084","line":"};"},
{"lineNum":" 3085","line":""},
{"lineNum":" 3086","line":"}  // namespace Impl"},
{"lineNum":" 3087","line":""},
{"lineNum":" 3088","line":"template <class T, class... P>"},
{"lineNum":" 3089","line":"inline typename Kokkos::View<T, P...>::HostMirror create_mirror("},
{"lineNum":" 3090","line":"    const Kokkos::View<T, P...>& src,"},
{"lineNum":" 3091","line":"    typename std::enable_if<"},
{"lineNum":" 3092","line":"        std::is_same<typename ViewTraits<T, P...>::specialize, void>::value &&"},
{"lineNum":" 3093","line":"        !std::is_same<typename Kokkos::ViewTraits<T, P...>::array_layout,"},
{"lineNum":" 3094","line":"                      Kokkos::LayoutStride>::value>::type* = nullptr) {"},
{"lineNum":" 3095","line":"  using src_type = View<T, P...>;"},
{"lineNum":" 3096","line":"  using dst_type = typename src_type::HostMirror;"},
{"lineNum":" 3097","line":""},
{"lineNum":" 3098","line":"  return dst_type("},
{"lineNum":" 3099","line":"      std::string(src.label()).append(\"_mirror\"),"},
{"lineNum":" 3100","line":"      src.rank_dynamic > 0 ? src.extent(0) : KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 3101","line":"      src.rank_dynamic > 1 ? src.extent(1) : KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 3102","line":"      src.rank_dynamic > 2 ? src.extent(2) : KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 3103","line":"      src.rank_dynamic > 3 ? src.extent(3) : KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 3104","line":"      src.rank_dynamic > 4 ? src.extent(4) : KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 3105","line":"      src.rank_dynamic > 5 ? src.extent(5) : KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 3106","line":"      src.rank_dynamic > 6 ? src.extent(6) : KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 3107","line":"      src.rank_dynamic > 7 ? src.extent(7) : KOKKOS_IMPL_CTOR_DEFAULT_ARG);"},
{"lineNum":" 3108","line":"}"},
{"lineNum":" 3109","line":""},
{"lineNum":" 3110","line":"template <class T, class... P>"},
{"lineNum":" 3111","line":"inline typename Kokkos::View<T, P...>::HostMirror create_mirror("},
{"lineNum":" 3112","line":"    const Kokkos::View<T, P...>& src,"},
{"lineNum":" 3113","line":"    typename std::enable_if<"},
{"lineNum":" 3114","line":"        std::is_same<typename ViewTraits<T, P...>::specialize, void>::value &&"},
{"lineNum":" 3115","line":"        std::is_same<typename Kokkos::ViewTraits<T, P...>::array_layout,"},
{"lineNum":" 3116","line":"                     Kokkos::LayoutStride>::value>::type* = nullptr) {"},
{"lineNum":" 3117","line":"  using src_type = View<T, P...>;"},
{"lineNum":" 3118","line":"  using dst_type = typename src_type::HostMirror;"},
{"lineNum":" 3119","line":""},
{"lineNum":" 3120","line":"  Kokkos::LayoutStride layout;"},
{"lineNum":" 3121","line":""},
{"lineNum":" 3122","line":"  layout.dimension[0] = src.extent(0);"},
{"lineNum":" 3123","line":"  layout.dimension[1] = src.extent(1);"},
{"lineNum":" 3124","line":"  layout.dimension[2] = src.extent(2);"},
{"lineNum":" 3125","line":"  layout.dimension[3] = src.extent(3);"},
{"lineNum":" 3126","line":"  layout.dimension[4] = src.extent(4);"},
{"lineNum":" 3127","line":"  layout.dimension[5] = src.extent(5);"},
{"lineNum":" 3128","line":"  layout.dimension[6] = src.extent(6);"},
{"lineNum":" 3129","line":"  layout.dimension[7] = src.extent(7);"},
{"lineNum":" 3130","line":""},
{"lineNum":" 3131","line":"  layout.stride[0] = src.stride_0();"},
{"lineNum":" 3132","line":"  layout.stride[1] = src.stride_1();"},
{"lineNum":" 3133","line":"  layout.stride[2] = src.stride_2();"},
{"lineNum":" 3134","line":"  layout.stride[3] = src.stride_3();"},
{"lineNum":" 3135","line":"  layout.stride[4] = src.stride_4();"},
{"lineNum":" 3136","line":"  layout.stride[5] = src.stride_5();"},
{"lineNum":" 3137","line":"  layout.stride[6] = src.stride_6();"},
{"lineNum":" 3138","line":"  layout.stride[7] = src.stride_7();"},
{"lineNum":" 3139","line":""},
{"lineNum":" 3140","line":"  return dst_type(std::string(src.label()).append(\"_mirror\"), layout);"},
{"lineNum":" 3141","line":"}"},
{"lineNum":" 3142","line":""},
{"lineNum":" 3143","line":"// Create a mirror in a new space (specialization for different space)"},
{"lineNum":" 3144","line":"template <class Space, class T, class... P>"},
{"lineNum":" 3145","line":"typename Impl::MirrorType<Space, T, P...>::view_type create_mirror("},
{"lineNum":" 3146","line":"    const Space&, const Kokkos::View<T, P...>& src,"},
{"lineNum":" 3147","line":"    typename std::enable_if<std::is_same<"},
{"lineNum":" 3148","line":"        typename ViewTraits<T, P...>::specialize, void>::value>::type* ="},
{"lineNum":" 3149","line":"        nullptr) {"},
{"lineNum":" 3150","line":"  return typename Impl::MirrorType<Space, T, P...>::view_type(src.label(),"},
{"lineNum":" 3151","line":"                                                              src.layout());"},
{"lineNum":" 3152","line":"}"},
{"lineNum":" 3153","line":""},
{"lineNum":" 3154","line":"template <class T, class... P>"},
{"lineNum":" 3155","line":"inline typename Kokkos::View<T, P...>::HostMirror create_mirror_view("},
{"lineNum":" 3156","line":"    const Kokkos::View<T, P...>& src,"},
{"lineNum":" 3157","line":"    typename std::enable_if<"},
{"lineNum":" 3158","line":"        (std::is_same<"},
{"lineNum":" 3159","line":"             typename Kokkos::View<T, P...>::memory_space,"},
{"lineNum":" 3160","line":"             typename Kokkos::View<T, P...>::HostMirror::memory_space>::value &&"},
{"lineNum":" 3161","line":"         std::is_same<typename Kokkos::View<T, P...>::data_type,"},
{"lineNum":" 3162","line":"                      typename Kokkos::View<T, P...>::HostMirror::data_type>::"},
{"lineNum":" 3163","line":"             value)>::type* = nullptr) {"},
{"lineNum":" 3164","line":"  return src;"},
{"lineNum":" 3165","line":"}"},
{"lineNum":" 3166","line":""},
{"lineNum":" 3167","line":"template <class T, class... P>"},
{"lineNum":" 3168","line":"inline typename Kokkos::View<T, P...>::HostMirror create_mirror_view("},
{"lineNum":" 3169","line":"    const Kokkos::View<T, P...>& src,"},
{"lineNum":" 3170","line":"    typename std::enable_if<!("},
{"lineNum":" 3171","line":"        std::is_same<"},
{"lineNum":" 3172","line":"            typename Kokkos::View<T, P...>::memory_space,"},
{"lineNum":" 3173","line":"            typename Kokkos::View<T, P...>::HostMirror::memory_space>::value &&"},
{"lineNum":" 3174","line":"        std::is_same<typename Kokkos::View<T, P...>::data_type,"},
{"lineNum":" 3175","line":"                     typename Kokkos::View<T, P...>::HostMirror::data_type>::"},
{"lineNum":" 3176","line":"            value)>::type* = nullptr) {"},
{"lineNum":" 3177","line":"  return Kokkos::create_mirror(src);"},
{"lineNum":" 3178","line":"}"},
{"lineNum":" 3179","line":""},
{"lineNum":" 3180","line":"// Create a mirror view in a new space (specialization for same space)"},
{"lineNum":" 3181","line":"template <class Space, class T, class... P>"},
{"lineNum":" 3182","line":"typename Impl::MirrorViewType<Space, T, P...>::view_type create_mirror_view("},
{"lineNum":" 3183","line":"    const Space&, const Kokkos::View<T, P...>& src,"},
{"lineNum":" 3184","line":"    typename std::enable_if<"},
{"lineNum":" 3185","line":"        Impl::MirrorViewType<Space, T, P...>::is_same_memspace>::type* ="},
{"lineNum":" 3186","line":"        nullptr) {"},
{"lineNum":" 3187","line":"  return src;"},
{"lineNum":" 3188","line":"}"},
{"lineNum":" 3189","line":""},
{"lineNum":" 3190","line":"// Create a mirror view in a new space (specialization for different space)"},
{"lineNum":" 3191","line":"template <class Space, class T, class... P>"},
{"lineNum":" 3192","line":"typename Impl::MirrorViewType<Space, T, P...>::view_type create_mirror_view("},
{"lineNum":" 3193","line":"    const Space&, const Kokkos::View<T, P...>& src,"},
{"lineNum":" 3194","line":"    typename std::enable_if<"},
{"lineNum":" 3195","line":"        !Impl::MirrorViewType<Space, T, P...>::is_same_memspace>::type* ="},
{"lineNum":" 3196","line":"        nullptr) {"},
{"lineNum":" 3197","line":"  return typename Impl::MirrorViewType<Space, T, P...>::view_type(src.label(),"},
{"lineNum":" 3198","line":"                                                                  src.layout());"},
{"lineNum":" 3199","line":"}"},
{"lineNum":" 3200","line":""},
{"lineNum":" 3201","line":"// Create a mirror view and deep_copy in a new space (specialization for same"},
{"lineNum":" 3202","line":"// space)"},
{"lineNum":" 3203","line":"template <class Space, class T, class... P>"},
{"lineNum":" 3204","line":"typename Impl::MirrorViewType<Space, T, P...>::view_type"},
{"lineNum":" 3205","line":"create_mirror_view_and_copy("},
{"lineNum":" 3206","line":"    const Space&, const Kokkos::View<T, P...>& src,"},
{"lineNum":" 3207","line":"    std::string const& name = \"\","},
{"lineNum":" 3208","line":"    typename std::enable_if<"},
{"lineNum":" 3209","line":"        Impl::MirrorViewType<Space, T, P...>::is_same_memspace>::type* ="},
{"lineNum":" 3210","line":"        nullptr) {"},
{"lineNum":" 3211","line":"  (void)name;"},
{"lineNum":" 3212","line":"  fence();  // same behavior as deep_copy(src, src)"},
{"lineNum":" 3213","line":"  return src;"},
{"lineNum":" 3214","line":"}"},
{"lineNum":" 3215","line":""},
{"lineNum":" 3216","line":"// Create a mirror view and deep_copy in a new space (specialization for"},
{"lineNum":" 3217","line":"// different space)"},
{"lineNum":" 3218","line":"template <class Space, class T, class... P>"},
{"lineNum":" 3219","line":"typename Impl::MirrorViewType<Space, T, P...>::view_type"},
{"lineNum":" 3220","line":"create_mirror_view_and_copy("},
{"lineNum":" 3221","line":"    const Space&, const Kokkos::View<T, P...>& src,"},
{"lineNum":" 3222","line":"    std::string const& name = \"\","},
{"lineNum":" 3223","line":"    typename std::enable_if<"},
{"lineNum":" 3224","line":"        !Impl::MirrorViewType<Space, T, P...>::is_same_memspace>::type* ="},
{"lineNum":" 3225","line":"        nullptr) {"},
{"lineNum":" 3226","line":"  using Mirror      = typename Impl::MirrorViewType<Space, T, P...>::view_type;"},
{"lineNum":" 3227","line":"  std::string label = name.empty() ? src.label() : name;"},
{"lineNum":" 3228","line":"  auto mirror       = typename Mirror::non_const_type{"},
{"lineNum":" 3229","line":"      view_alloc(WithoutInitializing, label), src.layout()};"},
{"lineNum":" 3230","line":"  deep_copy(mirror, src);"},
{"lineNum":" 3231","line":"  return mirror;"},
{"lineNum":" 3232","line":"}"},
{"lineNum":" 3233","line":""},
{"lineNum":" 3234","line":"// Create a mirror view in a new space without initializing (specialization for"},
{"lineNum":" 3235","line":"// same space)"},
{"lineNum":" 3236","line":"template <class Space, class T, class... P>"},
{"lineNum":" 3237","line":"typename Impl::MirrorViewType<Space, T, P...>::view_type create_mirror_view("},
{"lineNum":" 3238","line":"    const Space&, const Kokkos::View<T, P...>& src,"},
{"lineNum":" 3239","line":"    Kokkos::Impl::WithoutInitializing_t,"},
{"lineNum":" 3240","line":"    typename std::enable_if<"},
{"lineNum":" 3241","line":"        Impl::MirrorViewType<Space, T, P...>::is_same_memspace>::type* ="},
{"lineNum":" 3242","line":"        nullptr) {"},
{"lineNum":" 3243","line":"  return src;"},
{"lineNum":" 3244","line":"}"},
{"lineNum":" 3245","line":""},
{"lineNum":" 3246","line":"// Create a mirror view in a new space without initializing (specialization for"},
{"lineNum":" 3247","line":"// different space)"},
{"lineNum":" 3248","line":"template <class Space, class T, class... P>"},
{"lineNum":" 3249","line":"typename Impl::MirrorViewType<Space, T, P...>::view_type create_mirror_view("},
{"lineNum":" 3250","line":"    const Space&, const Kokkos::View<T, P...>& src,"},
{"lineNum":" 3251","line":"    Kokkos::Impl::WithoutInitializing_t,"},
{"lineNum":" 3252","line":"    typename std::enable_if<"},
{"lineNum":" 3253","line":"        !Impl::MirrorViewType<Space, T, P...>::is_same_memspace>::type* ="},
{"lineNum":" 3254","line":"        nullptr) {"},
{"lineNum":" 3255","line":"  using Mirror = typename Impl::MirrorViewType<Space, T, P...>::view_type;"},
{"lineNum":" 3256","line":"  return Mirror(view_alloc(WithoutInitializing, src.label()), src.layout());"},
{"lineNum":" 3257","line":"}"},
{"lineNum":" 3258","line":""},
{"lineNum":" 3259","line":"} /* namespace Kokkos */"},
{"lineNum":" 3260","line":""},
{"lineNum":" 3261","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 3262","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 3263","line":""},
{"lineNum":" 3264","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 123, "covered" : 0,};
var merged_data = [];
