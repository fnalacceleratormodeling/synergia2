var data = {lines:[
{"lineNum":"    1","line":"// -*- C++ -*-"},
{"lineNum":"    2","line":"//===--------------------------- tuple ------------------------------------===//"},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions."},
{"lineNum":"    5","line":"// See https://llvm.org/LICENSE.txt for license information."},
{"lineNum":"    6","line":"// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef _LIBCPP_TUPLE"},
{"lineNum":"   11","line":"#define _LIBCPP_TUPLE"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"/*"},
{"lineNum":"   14","line":"    tuple synopsis"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"namespace std"},
{"lineNum":"   17","line":"{"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"template <class... T>"},
{"lineNum":"   20","line":"class tuple {"},
{"lineNum":"   21","line":"public:"},
{"lineNum":"   22","line":"    explicit(see-below) constexpr tuple();"},
{"lineNum":"   23","line":"    explicit(see-below) tuple(const T&...);  // constexpr in C++14"},
{"lineNum":"   24","line":"    template <class... U>"},
{"lineNum":"   25","line":"        explicit(see-below) tuple(U&&...);  // constexpr in C++14"},
{"lineNum":"   26","line":"    tuple(const tuple&) = default;"},
{"lineNum":"   27","line":"    tuple(tuple&&) = default;"},
{"lineNum":"   28","line":"    template <class... U>"},
{"lineNum":"   29","line":"        explicit(see-below) tuple(const tuple<U...>&);  // constexpr in C++14"},
{"lineNum":"   30","line":"    template <class... U>"},
{"lineNum":"   31","line":"        explicit(see-below) tuple(tuple<U...>&&);  // constexpr in C++14"},
{"lineNum":"   32","line":"    template <class U1, class U2>"},
{"lineNum":"   33","line":"        explicit(see-below) tuple(const pair<U1, U2>&); // iff sizeof...(T) == 2 // constexpr in C++14"},
{"lineNum":"   34","line":"    template <class U1, class U2>"},
{"lineNum":"   35","line":"        explicit(see-below) tuple(pair<U1, U2>&&); // iff sizeof...(T) == 2  // constexpr in C++14"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"    // allocator-extended constructors"},
{"lineNum":"   38","line":"    template <class Alloc>"},
{"lineNum":"   39","line":"        tuple(allocator_arg_t, const Alloc& a);"},
{"lineNum":"   40","line":"    template <class Alloc>"},
{"lineNum":"   41","line":"        explicit(see-below) tuple(allocator_arg_t, const Alloc& a, const T&...);          // constexpr in C++20"},
{"lineNum":"   42","line":"    template <class Alloc, class... U>"},
{"lineNum":"   43","line":"        explicit(see-below) tuple(allocator_arg_t, const Alloc& a, U&&...);               // constexpr in C++20"},
{"lineNum":"   44","line":"    template <class Alloc>"},
{"lineNum":"   45","line":"        tuple(allocator_arg_t, const Alloc& a, const tuple&);                             // constexpr in C++20"},
{"lineNum":"   46","line":"    template <class Alloc>"},
{"lineNum":"   47","line":"        tuple(allocator_arg_t, const Alloc& a, tuple&&);                                  // constexpr in C++20"},
{"lineNum":"   48","line":"    template <class Alloc, class... U>"},
{"lineNum":"   49","line":"        explicit(see-below) tuple(allocator_arg_t, const Alloc& a, const tuple<U...>&);   // constexpr in C++20"},
{"lineNum":"   50","line":"    template <class Alloc, class... U>"},
{"lineNum":"   51","line":"        explicit(see-below) tuple(allocator_arg_t, const Alloc& a, tuple<U...>&&);        // constexpr in C++20"},
{"lineNum":"   52","line":"    template <class Alloc, class U1, class U2>"},
{"lineNum":"   53","line":"        explicit(see-below) tuple(allocator_arg_t, const Alloc& a, const pair<U1, U2>&);  // constexpr in C++20"},
{"lineNum":"   54","line":"    template <class Alloc, class U1, class U2>"},
{"lineNum":"   55","line":"        explicit(see-below) tuple(allocator_arg_t, const Alloc& a, pair<U1, U2>&&);       // constexpr in C++20"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"    tuple& operator=(const tuple&);                                                       // constexpr in C++20"},
{"lineNum":"   58","line":"    tuple& operator=(tuple&&) noexcept(is_nothrow_move_assignable_v<T> && ...);           // constexpr in C++20"},
{"lineNum":"   59","line":"    template <class... U>"},
{"lineNum":"   60","line":"        tuple& operator=(const tuple<U...>&);                                             // constexpr in C++20"},
{"lineNum":"   61","line":"    template <class... U>"},
{"lineNum":"   62","line":"        tuple& operator=(tuple<U...>&&);                                                  // constexpr in C++20"},
{"lineNum":"   63","line":"    template <class U1, class U2>"},
{"lineNum":"   64","line":"        tuple& operator=(const pair<U1, U2>&); // iff sizeof...(T) == 2                   // constexpr in C++20"},
{"lineNum":"   65","line":"    template <class U1, class U2>"},
{"lineNum":"   66","line":"        tuple& operator=(pair<U1, U2>&&); // iff sizeof...(T) == 2                        // constexpr in C++20"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"    template<class U, size_t N>"},
{"lineNum":"   69","line":"        tuple& operator=(array<U, N> const&) // iff sizeof...(T) == N, EXTENSION"},
{"lineNum":"   70","line":"    template<class U, size_t N>"},
{"lineNum":"   71","line":"        tuple& operator=(array<U, N>&&) // iff sizeof...(T) == N, EXTENSION"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"    void swap(tuple&) noexcept(AND(swap(declval<T&>(), declval<T&>())...));               // constexpr in C++20"},
{"lineNum":"   74","line":"};"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"template <class ...T>"},
{"lineNum":"   77","line":"tuple(T...) -> tuple<T...>;                                         // since C++17"},
{"lineNum":"   78","line":"template <class T1, class T2>"},
{"lineNum":"   79","line":"tuple(pair<T1, T2>) -> tuple<T1, T2>;                               // since C++17"},
{"lineNum":"   80","line":"template <class Alloc, class ...T>"},
{"lineNum":"   81","line":"tuple(allocator_arg_t, Alloc, T...) -> tuple<T...>;                 // since C++17"},
{"lineNum":"   82","line":"template <class Alloc, class T1, class T2>"},
{"lineNum":"   83","line":"tuple(allocator_arg_t, Alloc, pair<T1, T2>) -> tuple<T1, T2>;       // since C++17"},
{"lineNum":"   84","line":"template <class Alloc, class ...T>"},
{"lineNum":"   85","line":"tuple(allocator_arg_t, Alloc, tuple<T...>) -> tuple<T...>;          // since C++17"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"inline constexpr unspecified ignore;"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"template <class... T> tuple<V...>  make_tuple(T&&...); // constexpr in C++14"},
{"lineNum":"   90","line":"template <class... T> tuple<ATypes...> forward_as_tuple(T&&...) noexcept; // constexpr in C++14"},
{"lineNum":"   91","line":"template <class... T> tuple<T&...> tie(T&...) noexcept; // constexpr in C++14"},
{"lineNum":"   92","line":"template <class... Tuples> tuple<CTypes...> tuple_cat(Tuples&&... tpls); // constexpr in C++14"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"// [tuple.apply], calling a function with a tuple of arguments:"},
{"lineNum":"   95","line":"template <class F, class Tuple>"},
{"lineNum":"   96","line":"  constexpr decltype(auto) apply(F&& f, Tuple&& t); // C++17"},
{"lineNum":"   97","line":"template <class T, class Tuple>"},
{"lineNum":"   98","line":"  constexpr T make_from_tuple(Tuple&& t); // C++17"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"// 20.4.1.4, tuple helper classes:"},
{"lineNum":"  101","line":"template <class T> struct tuple_size; // undefined"},
{"lineNum":"  102","line":"template <class... T> struct tuple_size<tuple<T...>>;"},
{"lineNum":"  103","line":"template <class T>"},
{"lineNum":"  104","line":" inline constexpr size_t tuple_size_v = tuple_size<T>::value; // C++17"},
{"lineNum":"  105","line":"template <size_t I, class T> struct tuple_element; // undefined"},
{"lineNum":"  106","line":"template <size_t I, class... T> struct tuple_element<I, tuple<T...>>;"},
{"lineNum":"  107","line":"template <size_t I, class T>"},
{"lineNum":"  108","line":"  using tuple_element_t = typename tuple_element <I, T>::type; // C++14"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"// 20.4.1.5, element access:"},
{"lineNum":"  111","line":"template <size_t I, class... T>"},
{"lineNum":"  112","line":"    typename tuple_element<I, tuple<T...>>::type&"},
{"lineNum":"  113","line":"    get(tuple<T...>&) noexcept; // constexpr in C++14"},
{"lineNum":"  114","line":"template <size_t I, class... T>"},
{"lineNum":"  115","line":"    const typename tuple_element<I, tuple<T...>>::type&"},
{"lineNum":"  116","line":"    get(const tuple<T...>&) noexcept; // constexpr in C++14"},
{"lineNum":"  117","line":"template <size_t I, class... T>"},
{"lineNum":"  118","line":"    typename tuple_element<I, tuple<T...>>::type&&"},
{"lineNum":"  119","line":"    get(tuple<T...>&&) noexcept; // constexpr in C++14"},
{"lineNum":"  120","line":"template <size_t I, class... T>"},
{"lineNum":"  121","line":"    const typename tuple_element<I, tuple<T...>>::type&&"},
{"lineNum":"  122","line":"    get(const tuple<T...>&&) noexcept; // constexpr in C++14"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"template <class T1, class... T>"},
{"lineNum":"  125","line":"    constexpr T1& get(tuple<T...>&) noexcept;  // C++14"},
{"lineNum":"  126","line":"template <class T1, class... T>"},
{"lineNum":"  127","line":"    constexpr const T1& get(const tuple<T...>&) noexcept;   // C++14"},
{"lineNum":"  128","line":"template <class T1, class... T>"},
{"lineNum":"  129","line":"    constexpr T1&& get(tuple<T...>&&) noexcept;   // C++14"},
{"lineNum":"  130","line":"template <class T1, class... T>"},
{"lineNum":"  131","line":"    constexpr const T1&& get(const tuple<T...>&&) noexcept;   // C++14"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"// 20.4.1.6, relational operators:"},
{"lineNum":"  134","line":"template<class... T, class... U> bool operator==(const tuple<T...>&, const tuple<U...>&); // constexpr in C++14"},
{"lineNum":"  135","line":"template<class... T, class... U> bool operator<(const tuple<T...>&, const tuple<U...>&);  // constexpr in C++14"},
{"lineNum":"  136","line":"template<class... T, class... U> bool operator!=(const tuple<T...>&, const tuple<U...>&); // constexpr in C++14"},
{"lineNum":"  137","line":"template<class... T, class... U> bool operator>(const tuple<T...>&, const tuple<U...>&);  // constexpr in C++14"},
{"lineNum":"  138","line":"template<class... T, class... U> bool operator<=(const tuple<T...>&, const tuple<U...>&); // constexpr in C++14"},
{"lineNum":"  139","line":"template<class... T, class... U> bool operator>=(const tuple<T...>&, const tuple<U...>&); // constexpr in C++14"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"template <class... Types, class Alloc>"},
{"lineNum":"  142","line":"  struct uses_allocator<tuple<Types...>, Alloc>;"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"template <class... Types>"},
{"lineNum":"  145","line":"  void"},
{"lineNum":"  146","line":"  swap(tuple<Types...>& x, tuple<Types...>& y) noexcept(noexcept(x.swap(y)));"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"}  // std"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"*/"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"#include <__config>"},
{"lineNum":"  153","line":"#include <__functional/unwrap_ref.h>"},
{"lineNum":"  154","line":"#include <__functional_base>"},
{"lineNum":"  155","line":"#include <__memory/allocator_arg_t.h>"},
{"lineNum":"  156","line":"#include <__memory/uses_allocator.h>"},
{"lineNum":"  157","line":"#include <__tuple>"},
{"lineNum":"  158","line":"#include <__utility/forward.h>"},
{"lineNum":"  159","line":"#include <__utility/move.h>"},
{"lineNum":"  160","line":"#include <compare>"},
{"lineNum":"  161","line":"#include <cstddef>"},
{"lineNum":"  162","line":"#include <type_traits>"},
{"lineNum":"  163","line":"#include <utility>"},
{"lineNum":"  164","line":"#include <version>"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"},
{"lineNum":"  167","line":"#pragma GCC system_header"},
{"lineNum":"  168","line":"#endif"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"_LIBCPP_BEGIN_NAMESPACE_STD"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"// __tuple_leaf"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"template <size_t _Ip, class _Hp,"},
{"lineNum":"  178","line":"          bool=is_empty<_Hp>::value && !__libcpp_is_final<_Hp>::value"},
{"lineNum":"  179","line":"         >"},
{"lineNum":"  180","line":"class __tuple_leaf;"},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"template <size_t _Ip, class _Hp, bool _Ep>"},
{"lineNum":"  183","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  184","line":"void swap(__tuple_leaf<_Ip, _Hp, _Ep>& __x, __tuple_leaf<_Ip, _Hp, _Ep>& __y)"},
{"lineNum":"  185","line":"    _NOEXCEPT_(__is_nothrow_swappable<_Hp>::value)"},
{"lineNum":"  186","line":"{"},
{"lineNum":"  187","line":"    swap(__x.get(), __y.get());"},
{"lineNum":"  188","line":"}"},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"template <size_t _Ip, class _Hp, bool>"},
{"lineNum":"  191","line":"class __tuple_leaf"},
{"lineNum":"  192","line":"{"},
{"lineNum":"  193","line":"    _Hp __value_;"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"    template <class _Tp>"},
{"lineNum":"  196","line":"    static constexpr bool __can_bind_reference() {"},
{"lineNum":"  197","line":"#if __has_keyword(__reference_binds_to_temporary)"},
{"lineNum":"  198","line":"      return !__reference_binds_to_temporary(_Hp, _Tp);"},
{"lineNum":"  199","line":"#else"},
{"lineNum":"  200","line":"      return true;"},
{"lineNum":"  201","line":"#endif"},
{"lineNum":"  202","line":"    }"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"    _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  205","line":"    __tuple_leaf& operator=(const __tuple_leaf&);"},
{"lineNum":"  206","line":"public:"},
{"lineNum":"  207","line":"    _LIBCPP_INLINE_VISIBILITY constexpr __tuple_leaf()"},
{"lineNum":"  208","line":"             _NOEXCEPT_(is_nothrow_default_constructible<_Hp>::value) : __value_()"},
{"lineNum":"  209","line":"       {static_assert(!is_reference<_Hp>::value,"},
{"lineNum":"  210","line":"              \"Attempted to default construct a reference element in a tuple\");}"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"    template <class _Alloc>"},
{"lineNum":"  213","line":"        _LIBCPP_INLINE_VISIBILITY constexpr"},
{"lineNum":"  214","line":"        __tuple_leaf(integral_constant<int, 0>, const _Alloc&)"},
{"lineNum":"  215","line":"            : __value_()"},
{"lineNum":"  216","line":"        {static_assert(!is_reference<_Hp>::value,"},
{"lineNum":"  217","line":"              \"Attempted to default construct a reference element in a tuple\");}"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"    template <class _Alloc>"},
{"lineNum":"  220","line":"        _LIBCPP_INLINE_VISIBILITY constexpr"},
{"lineNum":"  221","line":"        __tuple_leaf(integral_constant<int, 1>, const _Alloc& __a)"},
{"lineNum":"  222","line":"            : __value_(allocator_arg_t(), __a)"},
{"lineNum":"  223","line":"        {static_assert(!is_reference<_Hp>::value,"},
{"lineNum":"  224","line":"              \"Attempted to default construct a reference element in a tuple\");}"},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"    template <class _Alloc>"},
{"lineNum":"  227","line":"        _LIBCPP_INLINE_VISIBILITY constexpr"},
{"lineNum":"  228","line":"        __tuple_leaf(integral_constant<int, 2>, const _Alloc& __a)"},
{"lineNum":"  229","line":"            : __value_(__a)"},
{"lineNum":"  230","line":"        {static_assert(!is_reference<_Hp>::value,"},
{"lineNum":"  231","line":"              \"Attempted to default construct a reference element in a tuple\");}"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"    template <class _Tp,"},
{"lineNum":"  234","line":"              class = _EnableIf<"},
{"lineNum":"  235","line":"                  _And<"},
{"lineNum":"  236","line":"                      _IsNotSame<__uncvref_t<_Tp>, __tuple_leaf>,"},
{"lineNum":"  237","line":"                      is_constructible<_Hp, _Tp>"},
{"lineNum":"  238","line":"                    >::value"},
{"lineNum":"  239","line":"                >"},
{"lineNum":"  240","line":"            >"},
{"lineNum":"  241","line":"        _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  242","line":"        explicit __tuple_leaf(_Tp&& __t) _NOEXCEPT_((is_nothrow_constructible<_Hp, _Tp>::value))"},
{"lineNum":"  243","line":"            : __value_(_VSTD::forward<_Tp>(__t))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  244","line":"        {static_assert(__can_bind_reference<_Tp&&>(),"},
{"lineNum":"  245","line":"       \"Attempted construction of reference element binds to a temporary whose lifetime has ended\");}"},
{"lineNum":"  246","line":""},
{"lineNum":"  247","line":"    template <class _Tp, class _Alloc>"},
{"lineNum":"  248","line":"        _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  249","line":"        explicit __tuple_leaf(integral_constant<int, 0>, const _Alloc&, _Tp&& __t)"},
{"lineNum":"  250","line":"            : __value_(_VSTD::forward<_Tp>(__t))"},
{"lineNum":"  251","line":"        {static_assert(__can_bind_reference<_Tp&&>(),"},
{"lineNum":"  252","line":"       \"Attempted construction of reference element binds to a temporary whose lifetime has ended\");}"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"    template <class _Tp, class _Alloc>"},
{"lineNum":"  255","line":"        _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  256","line":"        explicit __tuple_leaf(integral_constant<int, 1>, const _Alloc& __a, _Tp&& __t)"},
{"lineNum":"  257","line":"            : __value_(allocator_arg_t(), __a, _VSTD::forward<_Tp>(__t))"},
{"lineNum":"  258","line":"        {static_assert(!is_reference<_Hp>::value,"},
{"lineNum":"  259","line":"            \"Attempted to uses-allocator construct a reference element in a tuple\");}"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"    template <class _Tp, class _Alloc>"},
{"lineNum":"  262","line":"        _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  263","line":"        explicit __tuple_leaf(integral_constant<int, 2>, const _Alloc& __a, _Tp&& __t)"},
{"lineNum":"  264","line":"            : __value_(_VSTD::forward<_Tp>(__t), __a)"},
{"lineNum":"  265","line":"        {static_assert(!is_reference<_Hp>::value,"},
{"lineNum":"  266","line":"           \"Attempted to uses-allocator construct a reference element in a tuple\");}"},
{"lineNum":"  267","line":""},
{"lineNum":"  268","line":"    __tuple_leaf(const __tuple_leaf& __t) = default;"},
{"lineNum":"  269","line":"    __tuple_leaf(__tuple_leaf&& __t) = default;"},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  272","line":"    int swap(__tuple_leaf& __t) _NOEXCEPT_(__is_nothrow_swappable<__tuple_leaf>::value)"},
{"lineNum":"  273","line":"    {"},
{"lineNum":"  274","line":"        _VSTD::swap(*this, __t);"},
{"lineNum":"  275","line":"        return 0;"},
{"lineNum":"  276","line":"    }"},
{"lineNum":"  277","line":""},
{"lineNum":"  278","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11       _Hp& get()       _NOEXCEPT {return __value_;}"},
{"lineNum":"  279","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 const _Hp& get() const _NOEXCEPT {return __value_;}"},
{"lineNum":"  280","line":"};"},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"template <size_t _Ip, class _Hp>"},
{"lineNum":"  283","line":"class __tuple_leaf<_Ip, _Hp, true>"},
{"lineNum":"  284","line":"    : private _Hp"},
{"lineNum":"  285","line":"{"},
{"lineNum":"  286","line":"    _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  287","line":"    __tuple_leaf& operator=(const __tuple_leaf&);"},
{"lineNum":"  288","line":"public:"},
{"lineNum":"  289","line":"    _LIBCPP_INLINE_VISIBILITY constexpr __tuple_leaf()"},
{"lineNum":"  290","line":"             _NOEXCEPT_(is_nothrow_default_constructible<_Hp>::value) {}"},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"    template <class _Alloc>"},
{"lineNum":"  293","line":"        _LIBCPP_INLINE_VISIBILITY constexpr"},
{"lineNum":"  294","line":"        __tuple_leaf(integral_constant<int, 0>, const _Alloc&) {}"},
{"lineNum":"  295","line":""},
{"lineNum":"  296","line":"    template <class _Alloc>"},
{"lineNum":"  297","line":"        _LIBCPP_INLINE_VISIBILITY constexpr"},
{"lineNum":"  298","line":"        __tuple_leaf(integral_constant<int, 1>, const _Alloc& __a)"},
{"lineNum":"  299","line":"            : _Hp(allocator_arg_t(), __a) {}"},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"    template <class _Alloc>"},
{"lineNum":"  302","line":"        _LIBCPP_INLINE_VISIBILITY constexpr"},
{"lineNum":"  303","line":"        __tuple_leaf(integral_constant<int, 2>, const _Alloc& __a)"},
{"lineNum":"  304","line":"            : _Hp(__a) {}"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"    template <class _Tp,"},
{"lineNum":"  307","line":"              class = _EnableIf<"},
{"lineNum":"  308","line":"                  _And<"},
{"lineNum":"  309","line":"                    _IsNotSame<__uncvref_t<_Tp>, __tuple_leaf>,"},
{"lineNum":"  310","line":"                    is_constructible<_Hp, _Tp>"},
{"lineNum":"  311","line":"                  >::value"},
{"lineNum":"  312","line":"                >"},
{"lineNum":"  313","line":"            >"},
{"lineNum":"  314","line":"        _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  315","line":"        explicit __tuple_leaf(_Tp&& __t) _NOEXCEPT_((is_nothrow_constructible<_Hp, _Tp>::value))"},
{"lineNum":"  316","line":"            : _Hp(_VSTD::forward<_Tp>(__t)) {}"},
{"lineNum":"  317","line":""},
{"lineNum":"  318","line":"    template <class _Tp, class _Alloc>"},
{"lineNum":"  319","line":"        _LIBCPP_INLINE_VISIBILITY constexpr"},
{"lineNum":"  320","line":"        explicit __tuple_leaf(integral_constant<int, 0>, const _Alloc&, _Tp&& __t)"},
{"lineNum":"  321","line":"            : _Hp(_VSTD::forward<_Tp>(__t)) {}"},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"    template <class _Tp, class _Alloc>"},
{"lineNum":"  324","line":"        _LIBCPP_INLINE_VISIBILITY constexpr"},
{"lineNum":"  325","line":"        explicit __tuple_leaf(integral_constant<int, 1>, const _Alloc& __a, _Tp&& __t)"},
{"lineNum":"  326","line":"            : _Hp(allocator_arg_t(), __a, _VSTD::forward<_Tp>(__t)) {}"},
{"lineNum":"  327","line":""},
{"lineNum":"  328","line":"    template <class _Tp, class _Alloc>"},
{"lineNum":"  329","line":"        _LIBCPP_INLINE_VISIBILITY constexpr"},
{"lineNum":"  330","line":"        explicit __tuple_leaf(integral_constant<int, 2>, const _Alloc& __a, _Tp&& __t)"},
{"lineNum":"  331","line":"            : _Hp(_VSTD::forward<_Tp>(__t), __a) {}"},
{"lineNum":"  332","line":""},
{"lineNum":"  333","line":"    __tuple_leaf(__tuple_leaf const &) = default;"},
{"lineNum":"  334","line":"    __tuple_leaf(__tuple_leaf &&) = default;"},
{"lineNum":"  335","line":""},
{"lineNum":"  336","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  337","line":"    int"},
{"lineNum":"  338","line":"    swap(__tuple_leaf& __t) _NOEXCEPT_(__is_nothrow_swappable<__tuple_leaf>::value)"},
{"lineNum":"  339","line":"    {"},
{"lineNum":"  340","line":"        _VSTD::swap(*this, __t);"},
{"lineNum":"  341","line":"        return 0;"},
{"lineNum":"  342","line":"    }"},
{"lineNum":"  343","line":""},
{"lineNum":"  344","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11       _Hp& get()       _NOEXCEPT {return static_cast<_Hp&>(*this);}"},
{"lineNum":"  345","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 const _Hp& get() const _NOEXCEPT {return static_cast<const _Hp&>(*this);}"},
{"lineNum":"  346","line":"};"},
{"lineNum":"  347","line":""},
{"lineNum":"  348","line":"template <class ..._Tp>"},
{"lineNum":"  349","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  350","line":"void __swallow(_Tp&&...) _NOEXCEPT {}"},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"template <class _Tp>"},
{"lineNum":"  353","line":"struct __all_default_constructible;"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"template <class ..._Tp>"},
{"lineNum":"  356","line":"struct __all_default_constructible<__tuple_types<_Tp...>>"},
{"lineNum":"  357","line":"    : __all<is_default_constructible<_Tp>::value...>"},
{"lineNum":"  358","line":"{ };"},
{"lineNum":"  359","line":""},
{"lineNum":"  360","line":"// __tuple_impl"},
{"lineNum":"  361","line":""},
{"lineNum":"  362","line":"template<class _Indx, class ..._Tp> struct __tuple_impl;"},
{"lineNum":"  363","line":""},
{"lineNum":"  364","line":"template<size_t ..._Indx, class ..._Tp>"},
{"lineNum":"  365","line":"struct _LIBCPP_DECLSPEC_EMPTY_BASES __tuple_impl<__tuple_indices<_Indx...>, _Tp...>"},
{"lineNum":"  366","line":"    : public __tuple_leaf<_Indx, _Tp>..."},
{"lineNum":"  367","line":"{"},
{"lineNum":"  368","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  369","line":"    constexpr __tuple_impl()"},
{"lineNum":"  370","line":"        _NOEXCEPT_(__all<is_nothrow_default_constructible<_Tp>::value...>::value) {}"},
{"lineNum":"  371","line":""},
{"lineNum":"  372","line":"    template <size_t ..._Uf, class ..._Tf,"},
{"lineNum":"  373","line":"              size_t ..._Ul, class ..._Tl, class ..._Up>"},
{"lineNum":"  374","line":"        _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  375","line":"        explicit"},
{"lineNum":"  376","line":"        __tuple_impl(__tuple_indices<_Uf...>, __tuple_types<_Tf...>,"},
{"lineNum":"  377","line":"                     __tuple_indices<_Ul...>, __tuple_types<_Tl...>,"},
{"lineNum":"  378","line":"                     _Up&&... __u)"},
{"lineNum":"  379","line":"                     _NOEXCEPT_((__all<is_nothrow_constructible<_Tf, _Up>::value...>::value &&"},
{"lineNum":"  380","line":"                                 __all<is_nothrow_default_constructible<_Tl>::value...>::value)) :"},
{"lineNum":"  381","line":"            __tuple_leaf<_Uf, _Tf>(_VSTD::forward<_Up>(__u))...,"},
{"lineNum":"  382","line":"            __tuple_leaf<_Ul, _Tl>()..."},
{"lineNum":"  383","line":"            {}"},
{"lineNum":"  384","line":""},
{"lineNum":"  385","line":"    template <class _Alloc, size_t ..._Uf, class ..._Tf,"},
{"lineNum":"  386","line":"              size_t ..._Ul, class ..._Tl, class ..._Up>"},
{"lineNum":"  387","line":"        _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  388","line":"        explicit"},
{"lineNum":"  389","line":"        __tuple_impl(allocator_arg_t, const _Alloc& __a,"},
{"lineNum":"  390","line":"                     __tuple_indices<_Uf...>, __tuple_types<_Tf...>,"},
{"lineNum":"  391","line":"                     __tuple_indices<_Ul...>, __tuple_types<_Tl...>,"},
{"lineNum":"  392","line":"                     _Up&&... __u) :"},
{"lineNum":"  393","line":"            __tuple_leaf<_Uf, _Tf>(__uses_alloc_ctor<_Tf, _Alloc, _Up>(), __a,"},
{"lineNum":"  394","line":"            _VSTD::forward<_Up>(__u))...,"},
{"lineNum":"  395","line":"            __tuple_leaf<_Ul, _Tl>(__uses_alloc_ctor<_Tl, _Alloc>(), __a)..."},
{"lineNum":"  396","line":"            {}"},
{"lineNum":"  397","line":""},
{"lineNum":"  398","line":"    template <class _Tuple,"},
{"lineNum":"  399","line":"              class = typename enable_if"},
{"lineNum":"  400","line":"                      <"},
{"lineNum":"  401","line":"                         __tuple_constructible<_Tuple, tuple<_Tp...> >::value"},
{"lineNum":"  402","line":"                      >::type"},
{"lineNum":"  403","line":"             >"},
{"lineNum":"  404","line":"        _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  405","line":"        __tuple_impl(_Tuple&& __t) _NOEXCEPT_((__all<is_nothrow_constructible<_Tp, typename tuple_element<_Indx,"},
{"lineNum":"  406","line":"                                       typename __make_tuple_types<_Tuple>::type>::type>::value...>::value))"},
{"lineNum":"  407","line":"            : __tuple_leaf<_Indx, _Tp>(_VSTD::forward<typename tuple_element<_Indx,"},
{"lineNum":"  408","line":"                                       typename __make_tuple_types<_Tuple>::type>::type>(_VSTD::get<_Indx>(__t)))..."},
{"lineNum":"  409","line":"            {}"},
{"lineNum":"  410","line":""},
{"lineNum":"  411","line":"    template <class _Alloc, class _Tuple,"},
{"lineNum":"  412","line":"              class = typename enable_if"},
{"lineNum":"  413","line":"                      <"},
{"lineNum":"  414","line":"                         __tuple_constructible<_Tuple, tuple<_Tp...> >::value"},
{"lineNum":"  415","line":"                      >::type"},
{"lineNum":"  416","line":"             >"},
{"lineNum":"  417","line":"        _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  418","line":"        __tuple_impl(allocator_arg_t, const _Alloc& __a, _Tuple&& __t)"},
{"lineNum":"  419","line":"            : __tuple_leaf<_Indx, _Tp>(__uses_alloc_ctor<_Tp, _Alloc, typename tuple_element<_Indx,"},
{"lineNum":"  420","line":"                                       typename __make_tuple_types<_Tuple>::type>::type>(), __a,"},
{"lineNum":"  421","line":"                                       _VSTD::forward<typename tuple_element<_Indx,"},
{"lineNum":"  422","line":"                                       typename __make_tuple_types<_Tuple>::type>::type>(_VSTD::get<_Indx>(__t)))..."},
{"lineNum":"  423","line":"            {}"},
{"lineNum":"  424","line":""},
{"lineNum":"  425","line":"    __tuple_impl(const __tuple_impl&) = default;"},
{"lineNum":"  426","line":"    __tuple_impl(__tuple_impl&&) = default;"},
{"lineNum":"  427","line":""},
{"lineNum":"  428","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  429","line":"    void swap(__tuple_impl& __t)"},
{"lineNum":"  430","line":"        _NOEXCEPT_(__all<__is_nothrow_swappable<_Tp>::value...>::value)"},
{"lineNum":"  431","line":"    {"},
{"lineNum":"  432","line":"        _VSTD::__swallow(__tuple_leaf<_Indx, _Tp>::swap(static_cast<__tuple_leaf<_Indx, _Tp>&>(__t))...);"},
{"lineNum":"  433","line":"    }"},
{"lineNum":"  434","line":"};"},
{"lineNum":"  435","line":""},
{"lineNum":"  436","line":"template<class _Dest, class _Source, size_t ..._Np>"},
{"lineNum":"  437","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  438","line":"void __memberwise_copy_assign(_Dest& __dest, _Source const& __source, __tuple_indices<_Np...>) {"},
{"lineNum":"  439","line":"    _VSTD::__swallow(((_VSTD::get<_Np>(__dest) = _VSTD::get<_Np>(__source)), void(), 0)...);"},
{"lineNum":"  440","line":"}"},
{"lineNum":"  441","line":""},
{"lineNum":"  442","line":"template<class _Dest, class _Source, class ..._Up, size_t ..._Np>"},
{"lineNum":"  443","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  444","line":"void __memberwise_forward_assign(_Dest& __dest, _Source&& __source, __tuple_types<_Up...>, __tuple_indices<_Np...>) {"},
{"lineNum":"  445","line":"    _VSTD::__swallow((("},
{"lineNum":"  446","line":"        _VSTD::get<_Np>(__dest) = _VSTD::forward<_Up>(_VSTD::get<_Np>(__source))"},
{"lineNum":"  447","line":"    ), void(), 0)...);"},
{"lineNum":"  448","line":"}"},
{"lineNum":"  449","line":""},
{"lineNum":"  450","line":"template <class ..._Tp>"},
{"lineNum":"  451","line":"class _LIBCPP_TEMPLATE_VIS tuple"},
{"lineNum":"  452","line":"{"},
{"lineNum":"  453","line":"    typedef __tuple_impl<typename __make_tuple_indices<sizeof...(_Tp)>::type, _Tp...> _BaseT;"},
{"lineNum":"  454","line":""},
{"lineNum":"  455","line":"    _BaseT __base_;"},
{"lineNum":"  456","line":""},
{"lineNum":"  457","line":"    template <size_t _Jp, class ..._Up> friend _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  458","line":"        typename tuple_element<_Jp, tuple<_Up...> >::type& get(tuple<_Up...>&) _NOEXCEPT;"},
{"lineNum":"  459","line":"    template <size_t _Jp, class ..._Up> friend _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  460","line":"        const typename tuple_element<_Jp, tuple<_Up...> >::type& get(const tuple<_Up...>&) _NOEXCEPT;"},
{"lineNum":"  461","line":"    template <size_t _Jp, class ..._Up> friend _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  462","line":"        typename tuple_element<_Jp, tuple<_Up...> >::type&& get(tuple<_Up...>&&) _NOEXCEPT;"},
{"lineNum":"  463","line":"    template <size_t _Jp, class ..._Up> friend _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  464","line":"        const typename tuple_element<_Jp, tuple<_Up...> >::type&& get(const tuple<_Up...>&&) _NOEXCEPT;"},
{"lineNum":"  465","line":"public:"},
{"lineNum":"  466","line":"    // [tuple.cnstr]"},
{"lineNum":"  467","line":""},
{"lineNum":"  468","line":"    // tuple() constructors (including allocator_arg_t variants)"},
{"lineNum":"  469","line":"    template <template<class...> class _IsImpDefault = __is_implicitly_default_constructible, _EnableIf<"},
{"lineNum":"  470","line":"        _And<"},
{"lineNum":"  471","line":"            _IsImpDefault<_Tp>... // explicit check"},
{"lineNum":"  472","line":"        >::value"},
{"lineNum":"  473","line":"    , int> = 0>"},
{"lineNum":"  474","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":"  475","line":"    tuple()"},
{"lineNum":"  476","line":"        _NOEXCEPT_(_And<is_nothrow_default_constructible<_Tp>...>::value)"},
{"lineNum":"  477","line":"    { }"},
{"lineNum":"  478","line":""},
{"lineNum":"  479","line":"    template <template<class...> class _IsImpDefault = __is_implicitly_default_constructible,"},
{"lineNum":"  480","line":"              template<class...> class _IsDefault = is_default_constructible, _EnableIf<"},
{"lineNum":"  481","line":"        _And<"},
{"lineNum":"  482","line":"            _IsDefault<_Tp>...,"},
{"lineNum":"  483","line":"            _Not<_Lazy<_And, _IsImpDefault<_Tp>...> > // explicit check"},
{"lineNum":"  484","line":"        >::value"},
{"lineNum":"  485","line":"    , int> = 0>"},
{"lineNum":"  486","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":"  487","line":"    explicit tuple()"},
{"lineNum":"  488","line":"        _NOEXCEPT_(_And<is_nothrow_default_constructible<_Tp>...>::value)"},
{"lineNum":"  489","line":"    { }"},
{"lineNum":"  490","line":""},
{"lineNum":"  491","line":"    template <class _Alloc, template<class...> class _IsImpDefault = __is_implicitly_default_constructible, _EnableIf<"},
{"lineNum":"  492","line":"        _And<"},
{"lineNum":"  493","line":"            _IsImpDefault<_Tp>... // explicit check"},
{"lineNum":"  494","line":"        >::value"},
{"lineNum":"  495","line":"    , int> = 0>"},
{"lineNum":"  496","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  497","line":"    tuple(allocator_arg_t, _Alloc const& __a)"},
{"lineNum":"  498","line":"      : __base_(allocator_arg_t(), __a,"},
{"lineNum":"  499","line":"                    __tuple_indices<>(), __tuple_types<>(),"},
{"lineNum":"  500","line":"                    typename __make_tuple_indices<sizeof...(_Tp), 0>::type(),"},
{"lineNum":"  501","line":"                    __tuple_types<_Tp...>()) {}"},
{"lineNum":"  502","line":""},
{"lineNum":"  503","line":"    template <class _Alloc,"},
{"lineNum":"  504","line":"              template<class...> class _IsImpDefault = __is_implicitly_default_constructible,"},
{"lineNum":"  505","line":"              template<class...> class _IsDefault = is_default_constructible, _EnableIf<"},
{"lineNum":"  506","line":"        _And<"},
{"lineNum":"  507","line":"            _IsDefault<_Tp>...,"},
{"lineNum":"  508","line":"            _Not<_Lazy<_And, _IsImpDefault<_Tp>...> > // explicit check"},
{"lineNum":"  509","line":"        >::value"},
{"lineNum":"  510","line":"    , int> = 0>"},
{"lineNum":"  511","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  512","line":"    explicit tuple(allocator_arg_t, _Alloc const& __a)"},
{"lineNum":"  513","line":"      : __base_(allocator_arg_t(), __a,"},
{"lineNum":"  514","line":"                    __tuple_indices<>(), __tuple_types<>(),"},
{"lineNum":"  515","line":"                    typename __make_tuple_indices<sizeof...(_Tp), 0>::type(),"},
{"lineNum":"  516","line":"                    __tuple_types<_Tp...>()) {}"},
{"lineNum":"  517","line":""},
{"lineNum":"  518","line":"    // tuple(const T&...) constructors (including allocator_arg_t variants)"},
{"lineNum":"  519","line":"    template <template<class...> class _And = _And, _EnableIf<"},
{"lineNum":"  520","line":"        _And<"},
{"lineNum":"  521","line":"            _BoolConstant<sizeof...(_Tp) >= 1>,"},
{"lineNum":"  522","line":"            is_copy_constructible<_Tp>...,"},
{"lineNum":"  523","line":"            is_convertible<const _Tp&, _Tp>... // explicit check"},
{"lineNum":"  524","line":"        >::value"},
{"lineNum":"  525","line":"    , int> = 0>"},
{"lineNum":"  526","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  527","line":"    tuple(const _Tp& ... __t)"},
{"lineNum":"  528","line":"        _NOEXCEPT_(_And<is_nothrow_copy_constructible<_Tp>...>::value)"},
{"lineNum":"  529","line":"        : __base_(typename __make_tuple_indices<sizeof...(_Tp)>::type(),"},
{"lineNum":"  530","line":"                typename __make_tuple_types<tuple, sizeof...(_Tp)>::type(),"},
{"lineNum":"  531","line":"                typename __make_tuple_indices<0>::type(),"},
{"lineNum":"  532","line":"                typename __make_tuple_types<tuple, 0>::type(),"},
{"lineNum":"  533","line":"                __t..."},
{"lineNum":"  534","line":"               ) {}"},
{"lineNum":"  535","line":""},
{"lineNum":"  536","line":"    template <template<class...> class _And = _And, _EnableIf<"},
{"lineNum":"  537","line":"        _And<"},
{"lineNum":"  538","line":"            _BoolConstant<sizeof...(_Tp) >= 1>,"},
{"lineNum":"  539","line":"            is_copy_constructible<_Tp>...,"},
{"lineNum":"  540","line":"            _Not<_Lazy<_And, is_convertible<const _Tp&, _Tp>...> > // explicit check"},
{"lineNum":"  541","line":"        >::value"},
{"lineNum":"  542","line":"    , int> = 0>"},
{"lineNum":"  543","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  544","line":"    explicit tuple(const _Tp& ... __t)"},
{"lineNum":"  545","line":"        _NOEXCEPT_(_And<is_nothrow_copy_constructible<_Tp>...>::value)"},
{"lineNum":"  546","line":"        : __base_(typename __make_tuple_indices<sizeof...(_Tp)>::type(),"},
{"lineNum":"  547","line":"                typename __make_tuple_types<tuple, sizeof...(_Tp)>::type(),"},
{"lineNum":"  548","line":"                typename __make_tuple_indices<0>::type(),"},
{"lineNum":"  549","line":"                typename __make_tuple_types<tuple, 0>::type(),"},
{"lineNum":"  550","line":"                __t..."},
{"lineNum":"  551","line":"               ) {}"},
{"lineNum":"  552","line":""},
{"lineNum":"  553","line":"    template <class _Alloc, template<class...> class _And = _And, _EnableIf<"},
{"lineNum":"  554","line":"        _And<"},
{"lineNum":"  555","line":"            _BoolConstant<sizeof...(_Tp) >= 1>,"},
{"lineNum":"  556","line":"            is_copy_constructible<_Tp>...,"},
{"lineNum":"  557","line":"            is_convertible<const _Tp&, _Tp>... // explicit check"},
{"lineNum":"  558","line":"        >::value"},
{"lineNum":"  559","line":"    , int> = 0>"},
{"lineNum":"  560","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  561","line":"    tuple(allocator_arg_t, const _Alloc& __a, const _Tp& ... __t)"},
{"lineNum":"  562","line":"        : __base_(allocator_arg_t(), __a,"},
{"lineNum":"  563","line":"                typename __make_tuple_indices<sizeof...(_Tp)>::type(),"},
{"lineNum":"  564","line":"                typename __make_tuple_types<tuple, sizeof...(_Tp)>::type(),"},
{"lineNum":"  565","line":"                typename __make_tuple_indices<0>::type(),"},
{"lineNum":"  566","line":"                typename __make_tuple_types<tuple, 0>::type(),"},
{"lineNum":"  567","line":"                __t..."},
{"lineNum":"  568","line":"               ) {}"},
{"lineNum":"  569","line":""},
{"lineNum":"  570","line":"    template <class _Alloc, template<class...> class _And = _And, _EnableIf<"},
{"lineNum":"  571","line":"        _And<"},
{"lineNum":"  572","line":"            _BoolConstant<sizeof...(_Tp) >= 1>,"},
{"lineNum":"  573","line":"            is_copy_constructible<_Tp>...,"},
{"lineNum":"  574","line":"            _Not<_Lazy<_And, is_convertible<const _Tp&, _Tp>...> > // explicit check"},
{"lineNum":"  575","line":"        >::value"},
{"lineNum":"  576","line":"    , int> = 0>"},
{"lineNum":"  577","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  578","line":"    explicit tuple(allocator_arg_t, const _Alloc& __a, const _Tp& ... __t)"},
{"lineNum":"  579","line":"        : __base_(allocator_arg_t(), __a,"},
{"lineNum":"  580","line":"                typename __make_tuple_indices<sizeof...(_Tp)>::type(),"},
{"lineNum":"  581","line":"                typename __make_tuple_types<tuple, sizeof...(_Tp)>::type(),"},
{"lineNum":"  582","line":"                typename __make_tuple_indices<0>::type(),"},
{"lineNum":"  583","line":"                typename __make_tuple_types<tuple, 0>::type(),"},
{"lineNum":"  584","line":"                __t..."},
{"lineNum":"  585","line":"               ) {}"},
{"lineNum":"  586","line":""},
{"lineNum":"  587","line":"    // tuple(U&& ...) constructors (including allocator_arg_t variants)"},
{"lineNum":"  588","line":"    template <class ..._Up> struct _IsThisTuple : false_type { };"},
{"lineNum":"  589","line":"    template <class _Up> struct _IsThisTuple<_Up> : is_same<__uncvref_t<_Up>, tuple> { };"},
{"lineNum":"  590","line":""},
{"lineNum":"  591","line":"    template <class ..._Up>"},
{"lineNum":"  592","line":"    struct _EnableUTypesCtor : _And<"},
{"lineNum":"  593","line":"        _BoolConstant<sizeof...(_Tp) >= 1>,"},
{"lineNum":"  594","line":"        _Not<_IsThisTuple<_Up...> >, // extension to allow mis-behaved user constructors"},
{"lineNum":"  595","line":"        is_constructible<_Tp, _Up>..."},
{"lineNum":"  596","line":"    > { };"},
{"lineNum":"  597","line":""},
{"lineNum":"  598","line":"    template <class ..._Up, _EnableIf<"},
{"lineNum":"  599","line":"        _And<"},
{"lineNum":"  600","line":"            _BoolConstant<sizeof...(_Up) == sizeof...(_Tp)>,"},
{"lineNum":"  601","line":"            _EnableUTypesCtor<_Up...>,"},
{"lineNum":"  602","line":"            is_convertible<_Up, _Tp>... // explicit check"},
{"lineNum":"  603","line":"        >::value"},
{"lineNum":"  604","line":"    , int> = 0>"},
{"lineNum":"  605","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  606","line":"    tuple(_Up&&... __u)"},
{"lineNum":"  607","line":"        _NOEXCEPT_((_And<is_nothrow_constructible<_Tp, _Up>...>::value))"},
{"lineNum":"  608","line":"        : __base_(typename __make_tuple_indices<sizeof...(_Up)>::type(),"},
{"lineNum":"  609","line":"                    typename __make_tuple_types<tuple, sizeof...(_Up)>::type(),"},
{"lineNum":"  610","line":"                    typename __make_tuple_indices<sizeof...(_Tp), sizeof...(_Up)>::type(),"},
{"lineNum":"  611","line":"                    typename __make_tuple_types<tuple, sizeof...(_Tp), sizeof...(_Up)>::type(),"},
{"lineNum":"  612","line":"                    _VSTD::forward<_Up>(__u)...) {}"},
{"lineNum":"  613","line":""},
{"lineNum":"  614","line":"    template <class ..._Up, _EnableIf<"},
{"lineNum":"  615","line":"        _And<"},
{"lineNum":"  616","line":"            _BoolConstant<sizeof...(_Up) == sizeof...(_Tp)>,"},
{"lineNum":"  617","line":"            _EnableUTypesCtor<_Up...>,"},
{"lineNum":"  618","line":"            _Not<_Lazy<_And, is_convertible<_Up, _Tp>...> > // explicit check"},
{"lineNum":"  619","line":"        >::value"},
{"lineNum":"  620","line":"    , int> = 0>"},
{"lineNum":"  621","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  622","line":"    explicit tuple(_Up&&... __u)"},
{"lineNum":"  623","line":"        _NOEXCEPT_((_And<is_nothrow_constructible<_Tp, _Up>...>::value))"},
{"lineNum":"  624","line":"        : __base_(typename __make_tuple_indices<sizeof...(_Up)>::type(),"},
{"lineNum":"  625","line":"                    typename __make_tuple_types<tuple, sizeof...(_Up)>::type(),"},
{"lineNum":"  626","line":"                    typename __make_tuple_indices<sizeof...(_Tp), sizeof...(_Up)>::type(),"},
{"lineNum":"  627","line":"                    typename __make_tuple_types<tuple, sizeof...(_Tp), sizeof...(_Up)>::type(),"},
{"lineNum":"  628","line":"                    _VSTD::forward<_Up>(__u)...) {}"},
{"lineNum":"  629","line":""},
{"lineNum":"  630","line":"    template <class _Alloc, class ..._Up, _EnableIf<"},
{"lineNum":"  631","line":"        _And<"},
{"lineNum":"  632","line":"            _BoolConstant<sizeof...(_Up) == sizeof...(_Tp)>,"},
{"lineNum":"  633","line":"            _EnableUTypesCtor<_Up...>,"},
{"lineNum":"  634","line":"            is_convertible<_Up, _Tp>... // explicit check"},
{"lineNum":"  635","line":"        >::value"},
{"lineNum":"  636","line":"    , int> = 0>"},
{"lineNum":"  637","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  638","line":"    tuple(allocator_arg_t, const _Alloc& __a, _Up&&... __u)"},
{"lineNum":"  639","line":"        : __base_(allocator_arg_t(), __a,"},
{"lineNum":"  640","line":"                    typename __make_tuple_indices<sizeof...(_Up)>::type(),"},
{"lineNum":"  641","line":"                    typename __make_tuple_types<tuple, sizeof...(_Up)>::type(),"},
{"lineNum":"  642","line":"                    typename __make_tuple_indices<sizeof...(_Tp), sizeof...(_Up)>::type(),"},
{"lineNum":"  643","line":"                    typename __make_tuple_types<tuple, sizeof...(_Tp), sizeof...(_Up)>::type(),"},
{"lineNum":"  644","line":"                    _VSTD::forward<_Up>(__u)...) {}"},
{"lineNum":"  645","line":""},
{"lineNum":"  646","line":"    template <class _Alloc, class ..._Up, _EnableIf<"},
{"lineNum":"  647","line":"        _And<"},
{"lineNum":"  648","line":"            _BoolConstant<sizeof...(_Up) == sizeof...(_Tp)>,"},
{"lineNum":"  649","line":"            _EnableUTypesCtor<_Up...>,"},
{"lineNum":"  650","line":"            _Not<_Lazy<_And, is_convertible<_Up, _Tp>...> > // explicit check"},
{"lineNum":"  651","line":"        >::value"},
{"lineNum":"  652","line":"    , int> = 0>"},
{"lineNum":"  653","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  654","line":"    explicit tuple(allocator_arg_t, const _Alloc& __a, _Up&&... __u)"},
{"lineNum":"  655","line":"        : __base_(allocator_arg_t(), __a,"},
{"lineNum":"  656","line":"                    typename __make_tuple_indices<sizeof...(_Up)>::type(),"},
{"lineNum":"  657","line":"                    typename __make_tuple_types<tuple, sizeof...(_Up)>::type(),"},
{"lineNum":"  658","line":"                    typename __make_tuple_indices<sizeof...(_Tp), sizeof...(_Up)>::type(),"},
{"lineNum":"  659","line":"                    typename __make_tuple_types<tuple, sizeof...(_Tp), sizeof...(_Up)>::type(),"},
{"lineNum":"  660","line":"                    _VSTD::forward<_Up>(__u)...) {}"},
{"lineNum":"  661","line":""},
{"lineNum":"  662","line":"    // Copy and move constructors (including the allocator_arg_t variants)"},
{"lineNum":"  663","line":"    tuple(const tuple&) = default;"},
{"lineNum":"  664","line":"    tuple(tuple&&) = default;"},
{"lineNum":"  665","line":""},
{"lineNum":"  666","line":"    template <class _Alloc, template<class...> class _And = _And, _EnableIf<"},
{"lineNum":"  667","line":"        _And<is_copy_constructible<_Tp>...>::value"},
{"lineNum":"  668","line":"    , int> = 0>"},
{"lineNum":"  669","line":"    tuple(allocator_arg_t, const _Alloc& __alloc, const tuple& __t)"},
{"lineNum":"  670","line":"        : __base_(allocator_arg_t(), __alloc, __t)"},
{"lineNum":"  671","line":"    { }"},
{"lineNum":"  672","line":""},
{"lineNum":"  673","line":"    template <class _Alloc, template<class...> class _And = _And, _EnableIf<"},
{"lineNum":"  674","line":"        _And<is_move_constructible<_Tp>...>::value"},
{"lineNum":"  675","line":"    , int> = 0>"},
{"lineNum":"  676","line":"    tuple(allocator_arg_t, const _Alloc& __alloc, tuple&& __t)"},
{"lineNum":"  677","line":"        : __base_(allocator_arg_t(), __alloc, _VSTD::move(__t))"},
{"lineNum":"  678","line":"    { }"},
{"lineNum":"  679","line":""},
{"lineNum":"  680","line":"    // tuple(const tuple<U...>&) constructors (including allocator_arg_t variants)"},
{"lineNum":"  681","line":"    template <class ..._Up>"},
{"lineNum":"  682","line":"    struct _EnableCopyFromOtherTuple : _And<"},
{"lineNum":"  683","line":"        _Not<is_same<tuple<_Tp...>, tuple<_Up...> > >,"},
{"lineNum":"  684","line":"        _Lazy<_Or,"},
{"lineNum":"  685","line":"            _BoolConstant<sizeof...(_Tp) != 1>,"},
{"lineNum":"  686","line":"            // _Tp and _Up are 1-element packs - the pack expansions look"},
{"lineNum":"  687","line":"            // weird to avoid tripping up the type traits in degenerate cases"},
{"lineNum":"  688","line":"            _Lazy<_And,"},
{"lineNum":"  689","line":"                _Not<is_convertible<const tuple<_Up>&, _Tp> >...,"},
{"lineNum":"  690","line":"                _Not<is_constructible<_Tp, const tuple<_Up>&> >..."},
{"lineNum":"  691","line":"            >"},
{"lineNum":"  692","line":"        >,"},
{"lineNum":"  693","line":"        is_constructible<_Tp, const _Up&>..."},
{"lineNum":"  694","line":"    > { };"},
{"lineNum":"  695","line":""},
{"lineNum":"  696","line":"    template <class ..._Up, _EnableIf<"},
{"lineNum":"  697","line":"        _And<"},
{"lineNum":"  698","line":"            _BoolConstant<sizeof...(_Up) == sizeof...(_Tp)>,"},
{"lineNum":"  699","line":"            _EnableCopyFromOtherTuple<_Up...>,"},
{"lineNum":"  700","line":"            is_convertible<const _Up&, _Tp>... // explicit check"},
{"lineNum":"  701","line":"        >::value"},
{"lineNum":"  702","line":"    , int> = 0>"},
{"lineNum":"  703","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  704","line":"    tuple(const tuple<_Up...>& __t)"},
{"lineNum":"  705","line":"        _NOEXCEPT_((_And<is_nothrow_constructible<_Tp, const _Up&>...>::value))"},
{"lineNum":"  706","line":"        : __base_(__t)"},
{"lineNum":"  707","line":"    { }"},
{"lineNum":"  708","line":""},
{"lineNum":"  709","line":"    template <class ..._Up, _EnableIf<"},
{"lineNum":"  710","line":"        _And<"},
{"lineNum":"  711","line":"            _BoolConstant<sizeof...(_Up) == sizeof...(_Tp)>,"},
{"lineNum":"  712","line":"            _EnableCopyFromOtherTuple<_Up...>,"},
{"lineNum":"  713","line":"            _Not<_Lazy<_And, is_convertible<const _Up&, _Tp>...> > // explicit check"},
{"lineNum":"  714","line":"        >::value"},
{"lineNum":"  715","line":"    , int> = 0>"},
{"lineNum":"  716","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  717","line":"    explicit tuple(const tuple<_Up...>& __t)"},
{"lineNum":"  718","line":"        _NOEXCEPT_((_And<is_nothrow_constructible<_Tp, const _Up&>...>::value))"},
{"lineNum":"  719","line":"        : __base_(__t)"},
{"lineNum":"  720","line":"    { }"},
{"lineNum":"  721","line":""},
{"lineNum":"  722","line":"    template <class ..._Up, class _Alloc, _EnableIf<"},
{"lineNum":"  723","line":"        _And<"},
{"lineNum":"  724","line":"            _BoolConstant<sizeof...(_Up) == sizeof...(_Tp)>,"},
{"lineNum":"  725","line":"            _EnableCopyFromOtherTuple<_Up...>,"},
{"lineNum":"  726","line":"            is_convertible<const _Up&, _Tp>... // explicit check"},
{"lineNum":"  727","line":"        >::value"},
{"lineNum":"  728","line":"    , int> = 0>"},
{"lineNum":"  729","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  730","line":"    tuple(allocator_arg_t, const _Alloc& __a, const tuple<_Up...>& __t)"},
{"lineNum":"  731","line":"        : __base_(allocator_arg_t(), __a, __t)"},
{"lineNum":"  732","line":"    { }"},
{"lineNum":"  733","line":""},
{"lineNum":"  734","line":"    template <class ..._Up, class _Alloc, _EnableIf<"},
{"lineNum":"  735","line":"        _And<"},
{"lineNum":"  736","line":"            _BoolConstant<sizeof...(_Up) == sizeof...(_Tp)>,"},
{"lineNum":"  737","line":"            _EnableCopyFromOtherTuple<_Up...>,"},
{"lineNum":"  738","line":"            _Not<_Lazy<_And, is_convertible<const _Up&, _Tp>...> > // explicit check"},
{"lineNum":"  739","line":"        >::value"},
{"lineNum":"  740","line":"    , int> = 0>"},
{"lineNum":"  741","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  742","line":"    explicit tuple(allocator_arg_t, const _Alloc& __a, const tuple<_Up...>& __t)"},
{"lineNum":"  743","line":"        : __base_(allocator_arg_t(), __a, __t)"},
{"lineNum":"  744","line":"    { }"},
{"lineNum":"  745","line":""},
{"lineNum":"  746","line":"    // tuple(tuple<U...>&&) constructors (including allocator_arg_t variants)"},
{"lineNum":"  747","line":"    template <class ..._Up>"},
{"lineNum":"  748","line":"    struct _EnableMoveFromOtherTuple : _And<"},
{"lineNum":"  749","line":"        _Not<is_same<tuple<_Tp...>, tuple<_Up...> > >,"},
{"lineNum":"  750","line":"        _Lazy<_Or,"},
{"lineNum":"  751","line":"            _BoolConstant<sizeof...(_Tp) != 1>,"},
{"lineNum":"  752","line":"            // _Tp and _Up are 1-element packs - the pack expansions look"},
{"lineNum":"  753","line":"            // weird to avoid tripping up the type traits in degenerate cases"},
{"lineNum":"  754","line":"            _Lazy<_And,"},
{"lineNum":"  755","line":"                _Not<is_convertible<tuple<_Up>, _Tp> >...,"},
{"lineNum":"  756","line":"                _Not<is_constructible<_Tp, tuple<_Up> > >..."},
{"lineNum":"  757","line":"            >"},
{"lineNum":"  758","line":"        >,"},
{"lineNum":"  759","line":"        is_constructible<_Tp, _Up>..."},
{"lineNum":"  760","line":"    > { };"},
{"lineNum":"  761","line":""},
{"lineNum":"  762","line":"    template <class ..._Up, _EnableIf<"},
{"lineNum":"  763","line":"        _And<"},
{"lineNum":"  764","line":"            _BoolConstant<sizeof...(_Up) == sizeof...(_Tp)>,"},
{"lineNum":"  765","line":"            _EnableMoveFromOtherTuple<_Up...>,"},
{"lineNum":"  766","line":"            is_convertible<_Up, _Tp>... // explicit check"},
{"lineNum":"  767","line":"        >::value"},
{"lineNum":"  768","line":"    , int> = 0>"},
{"lineNum":"  769","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  770","line":"    tuple(tuple<_Up...>&& __t)"},
{"lineNum":"  771","line":"        _NOEXCEPT_((_And<is_nothrow_constructible<_Tp, _Up>...>::value))"},
{"lineNum":"  772","line":"        : __base_(_VSTD::move(__t))"},
{"lineNum":"  773","line":"    { }"},
{"lineNum":"  774","line":""},
{"lineNum":"  775","line":"    template <class ..._Up, _EnableIf<"},
{"lineNum":"  776","line":"        _And<"},
{"lineNum":"  777","line":"            _BoolConstant<sizeof...(_Up) == sizeof...(_Tp)>,"},
{"lineNum":"  778","line":"            _EnableMoveFromOtherTuple<_Up...>,"},
{"lineNum":"  779","line":"            _Not<_Lazy<_And, is_convertible<_Up, _Tp>...> > // explicit check"},
{"lineNum":"  780","line":"        >::value"},
{"lineNum":"  781","line":"    , int> = 0>"},
{"lineNum":"  782","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  783","line":"    explicit tuple(tuple<_Up...>&& __t)"},
{"lineNum":"  784","line":"        _NOEXCEPT_((_And<is_nothrow_constructible<_Tp, _Up>...>::value))"},
{"lineNum":"  785","line":"        : __base_(_VSTD::move(__t))"},
{"lineNum":"  786","line":"    { }"},
{"lineNum":"  787","line":""},
{"lineNum":"  788","line":"    template <class _Alloc, class ..._Up, _EnableIf<"},
{"lineNum":"  789","line":"        _And<"},
{"lineNum":"  790","line":"            _BoolConstant<sizeof...(_Up) == sizeof...(_Tp)>,"},
{"lineNum":"  791","line":"            _EnableMoveFromOtherTuple<_Up...>,"},
{"lineNum":"  792","line":"            is_convertible<_Up, _Tp>... // explicit check"},
{"lineNum":"  793","line":"        >::value"},
{"lineNum":"  794","line":"    , int> = 0>"},
{"lineNum":"  795","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  796","line":"    tuple(allocator_arg_t, const _Alloc& __a, tuple<_Up...>&& __t)"},
{"lineNum":"  797","line":"        : __base_(allocator_arg_t(), __a, _VSTD::move(__t))"},
{"lineNum":"  798","line":"    { }"},
{"lineNum":"  799","line":""},
{"lineNum":"  800","line":"    template <class _Alloc, class ..._Up, _EnableIf<"},
{"lineNum":"  801","line":"        _And<"},
{"lineNum":"  802","line":"            _BoolConstant<sizeof...(_Up) == sizeof...(_Tp)>,"},
{"lineNum":"  803","line":"            _EnableMoveFromOtherTuple<_Up...>,"},
{"lineNum":"  804","line":"            _Not<_Lazy<_And, is_convertible<_Up, _Tp>...> > // explicit check"},
{"lineNum":"  805","line":"        >::value"},
{"lineNum":"  806","line":"    , int> = 0>"},
{"lineNum":"  807","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  808","line":"    explicit tuple(allocator_arg_t, const _Alloc& __a, tuple<_Up...>&& __t)"},
{"lineNum":"  809","line":"        : __base_(allocator_arg_t(), __a, _VSTD::move(__t))"},
{"lineNum":"  810","line":"    { }"},
{"lineNum":"  811","line":""},
{"lineNum":"  812","line":"    // tuple(const pair<U1, U2>&) constructors (including allocator_arg_t variants)"},
{"lineNum":"  813","line":"    template <class _Up1, class _Up2, class ..._DependentTp>"},
{"lineNum":"  814","line":"    struct _EnableImplicitCopyFromPair : _And<"},
{"lineNum":"  815","line":"        is_constructible<_FirstType<_DependentTp...>, const _Up1&>,"},
{"lineNum":"  816","line":"        is_constructible<_SecondType<_DependentTp...>, const _Up2&>,"},
{"lineNum":"  817","line":"        is_convertible<const _Up1&, _FirstType<_DependentTp...> >, // explicit check"},
{"lineNum":"  818","line":"        is_convertible<const _Up2&, _SecondType<_DependentTp...> >"},
{"lineNum":"  819","line":"    > { };"},
{"lineNum":"  820","line":""},
{"lineNum":"  821","line":"    template <class _Up1, class _Up2, class ..._DependentTp>"},
{"lineNum":"  822","line":"    struct _EnableExplicitCopyFromPair : _And<"},
{"lineNum":"  823","line":"        is_constructible<_FirstType<_DependentTp...>, const _Up1&>,"},
{"lineNum":"  824","line":"        is_constructible<_SecondType<_DependentTp...>, const _Up2&>,"},
{"lineNum":"  825","line":"        _Not<is_convertible<const _Up1&, _FirstType<_DependentTp...> > >, // explicit check"},
{"lineNum":"  826","line":"        _Not<is_convertible<const _Up2&, _SecondType<_DependentTp...> > >"},
{"lineNum":"  827","line":"    > { };"},
{"lineNum":"  828","line":""},
{"lineNum":"  829","line":"    template <class _Up1, class _Up2, template<class...> class _And = _And, _EnableIf<"},
{"lineNum":"  830","line":"        _And<"},
{"lineNum":"  831","line":"            _BoolConstant<sizeof...(_Tp) == 2>,"},
{"lineNum":"  832","line":"            _EnableImplicitCopyFromPair<_Up1, _Up2, _Tp...>"},
{"lineNum":"  833","line":"        >::value"},
{"lineNum":"  834","line":"    , int> = 0>"},
{"lineNum":"  835","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  836","line":"    tuple(const pair<_Up1, _Up2>& __p)"},
{"lineNum":"  837","line":"        _NOEXCEPT_((_And<"},
{"lineNum":"  838","line":"            is_nothrow_constructible<_FirstType<_Tp...>, const _Up1&>,"},
{"lineNum":"  839","line":"            is_nothrow_constructible<_SecondType<_Tp...>, const _Up2&>"},
{"lineNum":"  840","line":"        >::value))"},
{"lineNum":"  841","line":"        : __base_(__p)"},
{"lineNum":"  842","line":"    { }"},
{"lineNum":"  843","line":""},
{"lineNum":"  844","line":"    template <class _Up1, class _Up2, template<class...> class _And = _And, _EnableIf<"},
{"lineNum":"  845","line":"        _And<"},
{"lineNum":"  846","line":"            _BoolConstant<sizeof...(_Tp) == 2>,"},
{"lineNum":"  847","line":"            _EnableExplicitCopyFromPair<_Up1, _Up2, _Tp...>"},
{"lineNum":"  848","line":"        >::value"},
{"lineNum":"  849","line":"    , int> = 0>"},
{"lineNum":"  850","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  851","line":"    explicit tuple(const pair<_Up1, _Up2>& __p)"},
{"lineNum":"  852","line":"        _NOEXCEPT_((_And<"},
{"lineNum":"  853","line":"            is_nothrow_constructible<_FirstType<_Tp...>, const _Up1&>,"},
{"lineNum":"  854","line":"            is_nothrow_constructible<_SecondType<_Tp...>, const _Up2&>"},
{"lineNum":"  855","line":"        >::value))"},
{"lineNum":"  856","line":"        : __base_(__p)"},
{"lineNum":"  857","line":"    { }"},
{"lineNum":"  858","line":""},
{"lineNum":"  859","line":"    template <class _Alloc, class _Up1, class _Up2, template<class...> class _And = _And, _EnableIf<"},
{"lineNum":"  860","line":"        _And<"},
{"lineNum":"  861","line":"            _BoolConstant<sizeof...(_Tp) == 2>,"},
{"lineNum":"  862","line":"            _EnableImplicitCopyFromPair<_Up1, _Up2, _Tp...>"},
{"lineNum":"  863","line":"        >::value"},
{"lineNum":"  864","line":"    , int> = 0>"},
{"lineNum":"  865","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  866","line":"    tuple(allocator_arg_t, const _Alloc& __a, const pair<_Up1, _Up2>& __p)"},
{"lineNum":"  867","line":"        : __base_(allocator_arg_t(), __a, __p)"},
{"lineNum":"  868","line":"    { }"},
{"lineNum":"  869","line":""},
{"lineNum":"  870","line":"    template <class _Alloc, class _Up1, class _Up2, template<class...> class _And = _And, _EnableIf<"},
{"lineNum":"  871","line":"        _And<"},
{"lineNum":"  872","line":"            _BoolConstant<sizeof...(_Tp) == 2>,"},
{"lineNum":"  873","line":"            _EnableExplicitCopyFromPair<_Up1, _Up2, _Tp...>"},
{"lineNum":"  874","line":"        >::value"},
{"lineNum":"  875","line":"    , int> = 0>"},
{"lineNum":"  876","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  877","line":"    explicit tuple(allocator_arg_t, const _Alloc& __a, const pair<_Up1, _Up2>& __p)"},
{"lineNum":"  878","line":"        : __base_(allocator_arg_t(), __a, __p)"},
{"lineNum":"  879","line":"    { }"},
{"lineNum":"  880","line":""},
{"lineNum":"  881","line":"    // tuple(pair<U1, U2>&&) constructors (including allocator_arg_t variants)"},
{"lineNum":"  882","line":"    template <class _Up1, class _Up2, class ..._DependentTp>"},
{"lineNum":"  883","line":"    struct _EnableImplicitMoveFromPair : _And<"},
{"lineNum":"  884","line":"        is_constructible<_FirstType<_DependentTp...>, _Up1>,"},
{"lineNum":"  885","line":"        is_constructible<_SecondType<_DependentTp...>, _Up2>,"},
{"lineNum":"  886","line":"        is_convertible<_Up1, _FirstType<_DependentTp...> >, // explicit check"},
{"lineNum":"  887","line":"        is_convertible<_Up2, _SecondType<_DependentTp...> >"},
{"lineNum":"  888","line":"    > { };"},
{"lineNum":"  889","line":""},
{"lineNum":"  890","line":"    template <class _Up1, class _Up2, class ..._DependentTp>"},
{"lineNum":"  891","line":"    struct _EnableExplicitMoveFromPair : _And<"},
{"lineNum":"  892","line":"        is_constructible<_FirstType<_DependentTp...>, _Up1>,"},
{"lineNum":"  893","line":"        is_constructible<_SecondType<_DependentTp...>, _Up2>,"},
{"lineNum":"  894","line":"        _Not<is_convertible<_Up1, _FirstType<_DependentTp...> > >, // explicit check"},
{"lineNum":"  895","line":"        _Not<is_convertible<_Up2, _SecondType<_DependentTp...> > >"},
{"lineNum":"  896","line":"    > { };"},
{"lineNum":"  897","line":""},
{"lineNum":"  898","line":"    template <class _Up1, class _Up2, template<class...> class _And = _And, _EnableIf<"},
{"lineNum":"  899","line":"        _And<"},
{"lineNum":"  900","line":"            _BoolConstant<sizeof...(_Tp) == 2>,"},
{"lineNum":"  901","line":"            _EnableImplicitMoveFromPair<_Up1, _Up2, _Tp...>"},
{"lineNum":"  902","line":"        >::value"},
{"lineNum":"  903","line":"    , int> = 0>"},
{"lineNum":"  904","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  905","line":"    tuple(pair<_Up1, _Up2>&& __p)"},
{"lineNum":"  906","line":"        _NOEXCEPT_((_And<"},
{"lineNum":"  907","line":"            is_nothrow_constructible<_FirstType<_Tp...>, _Up1>,"},
{"lineNum":"  908","line":"            is_nothrow_constructible<_SecondType<_Tp...>, _Up2>"},
{"lineNum":"  909","line":"        >::value))"},
{"lineNum":"  910","line":"        : __base_(_VSTD::move(__p))"},
{"lineNum":"  911","line":"    { }"},
{"lineNum":"  912","line":""},
{"lineNum":"  913","line":"    template <class _Up1, class _Up2, template<class...> class _And = _And, _EnableIf<"},
{"lineNum":"  914","line":"        _And<"},
{"lineNum":"  915","line":"            _BoolConstant<sizeof...(_Tp) == 2>,"},
{"lineNum":"  916","line":"            _EnableExplicitMoveFromPair<_Up1, _Up2, _Tp...>"},
{"lineNum":"  917","line":"        >::value"},
{"lineNum":"  918","line":"    , int> = 0>"},
{"lineNum":"  919","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  920","line":"    explicit tuple(pair<_Up1, _Up2>&& __p)"},
{"lineNum":"  921","line":"        _NOEXCEPT_((_And<"},
{"lineNum":"  922","line":"            is_nothrow_constructible<_FirstType<_Tp...>, _Up1>,"},
{"lineNum":"  923","line":"            is_nothrow_constructible<_SecondType<_Tp...>, _Up2>"},
{"lineNum":"  924","line":"        >::value))"},
{"lineNum":"  925","line":"        : __base_(_VSTD::move(__p))"},
{"lineNum":"  926","line":"    { }"},
{"lineNum":"  927","line":""},
{"lineNum":"  928","line":"    template <class _Alloc, class _Up1, class _Up2, template<class...> class _And = _And, _EnableIf<"},
{"lineNum":"  929","line":"        _And<"},
{"lineNum":"  930","line":"            _BoolConstant<sizeof...(_Tp) == 2>,"},
{"lineNum":"  931","line":"            _EnableImplicitMoveFromPair<_Up1, _Up2, _Tp...>"},
{"lineNum":"  932","line":"        >::value"},
{"lineNum":"  933","line":"    , int> = 0>"},
{"lineNum":"  934","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  935","line":"    tuple(allocator_arg_t, const _Alloc& __a, pair<_Up1, _Up2>&& __p)"},
{"lineNum":"  936","line":"        : __base_(allocator_arg_t(), __a, _VSTD::move(__p))"},
{"lineNum":"  937","line":"    { }"},
{"lineNum":"  938","line":""},
{"lineNum":"  939","line":"    template <class _Alloc, class _Up1, class _Up2, template<class...> class _And = _And, _EnableIf<"},
{"lineNum":"  940","line":"        _And<"},
{"lineNum":"  941","line":"            _BoolConstant<sizeof...(_Tp) == 2>,"},
{"lineNum":"  942","line":"            _EnableExplicitMoveFromPair<_Up1, _Up2, _Tp...>"},
{"lineNum":"  943","line":"        >::value"},
{"lineNum":"  944","line":"    , int> = 0>"},
{"lineNum":"  945","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  946","line":"    explicit tuple(allocator_arg_t, const _Alloc& __a, pair<_Up1, _Up2>&& __p)"},
{"lineNum":"  947","line":"        : __base_(allocator_arg_t(), __a, _VSTD::move(__p))"},
{"lineNum":"  948","line":"    { }"},
{"lineNum":"  949","line":""},
{"lineNum":"  950","line":"    // [tuple.assign]"},
{"lineNum":"  951","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  952","line":"    tuple& operator=(_If<_And<is_copy_assignable<_Tp>...>::value, tuple, __nat> const& __tuple)"},
{"lineNum":"  953","line":"        _NOEXCEPT_((_And<is_nothrow_copy_assignable<_Tp>...>::value))"},
{"lineNum":"  954","line":"    {"},
{"lineNum":"  955","line":"        _VSTD::__memberwise_copy_assign(*this, __tuple,"},
{"lineNum":"  956","line":"            typename __make_tuple_indices<sizeof...(_Tp)>::type());"},
{"lineNum":"  957","line":"        return *this;"},
{"lineNum":"  958","line":"    }"},
{"lineNum":"  959","line":""},
{"lineNum":"  960","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  961","line":"    tuple& operator=(_If<_And<is_move_assignable<_Tp>...>::value, tuple, __nat>&& __tuple)"},
{"lineNum":"  962","line":"        _NOEXCEPT_((_And<is_nothrow_move_assignable<_Tp>...>::value))"},
{"lineNum":"  963","line":"    {"},
{"lineNum":"  964","line":"        _VSTD::__memberwise_forward_assign(*this, _VSTD::move(__tuple),"},
{"lineNum":"  965","line":"            __tuple_types<_Tp...>(),"},
{"lineNum":"  966","line":"            typename __make_tuple_indices<sizeof...(_Tp)>::type());"},
{"lineNum":"  967","line":"        return *this;"},
{"lineNum":"  968","line":"    }"},
{"lineNum":"  969","line":""},
{"lineNum":"  970","line":"    template<class... _Up, _EnableIf<"},
{"lineNum":"  971","line":"        _And<"},
{"lineNum":"  972","line":"            _BoolConstant<sizeof...(_Tp) == sizeof...(_Up)>,"},
{"lineNum":"  973","line":"            is_assignable<_Tp&, _Up const&>..."},
{"lineNum":"  974","line":"        >::value"},
{"lineNum":"  975","line":"    ,int> = 0>"},
{"lineNum":"  976","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  977","line":"    tuple& operator=(tuple<_Up...> const& __tuple)"},
{"lineNum":"  978","line":"        _NOEXCEPT_((_And<is_nothrow_assignable<_Tp&, _Up const&>...>::value))"},
{"lineNum":"  979","line":"    {"},
{"lineNum":"  980","line":"        _VSTD::__memberwise_copy_assign(*this, __tuple,"},
{"lineNum":"  981","line":"            typename __make_tuple_indices<sizeof...(_Tp)>::type());"},
{"lineNum":"  982","line":"        return *this;"},
{"lineNum":"  983","line":"    }"},
{"lineNum":"  984","line":""},
{"lineNum":"  985","line":"    template<class... _Up, _EnableIf<"},
{"lineNum":"  986","line":"        _And<"},
{"lineNum":"  987","line":"            _BoolConstant<sizeof...(_Tp) == sizeof...(_Up)>,"},
{"lineNum":"  988","line":"            is_assignable<_Tp&, _Up>..."},
{"lineNum":"  989","line":"        >::value"},
{"lineNum":"  990","line":"    ,int> = 0>"},
{"lineNum":"  991","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  992","line":"    tuple& operator=(tuple<_Up...>&& __tuple)"},
{"lineNum":"  993","line":"        _NOEXCEPT_((_And<is_nothrow_assignable<_Tp&, _Up>...>::value))"},
{"lineNum":"  994","line":"    {"},
{"lineNum":"  995","line":"        _VSTD::__memberwise_forward_assign(*this, _VSTD::move(__tuple),"},
{"lineNum":"  996","line":"            __tuple_types<_Up...>(),"},
{"lineNum":"  997","line":"            typename __make_tuple_indices<sizeof...(_Tp)>::type());"},
{"lineNum":"  998","line":"        return *this;"},
{"lineNum":"  999","line":"    }"},
{"lineNum":" 1000","line":""},
{"lineNum":" 1001","line":"    template<class _Up1, class _Up2, class _Dep = true_type, _EnableIf<"},
{"lineNum":" 1002","line":"        _And<_Dep,"},
{"lineNum":" 1003","line":"            _BoolConstant<sizeof...(_Tp) == 2>,"},
{"lineNum":" 1004","line":"            is_assignable<_FirstType<_Tp..., _Dep>&, _Up1 const&>,"},
{"lineNum":" 1005","line":"            is_assignable<_SecondType<_Tp..., _Dep>&, _Up2 const&>"},
{"lineNum":" 1006","line":"        >::value"},
{"lineNum":" 1007","line":"    ,int> = 0>"},
{"lineNum":" 1008","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":" 1009","line":"    tuple& operator=(pair<_Up1, _Up2> const& __pair)"},
{"lineNum":" 1010","line":"        _NOEXCEPT_((_And<"},
{"lineNum":" 1011","line":"            is_nothrow_assignable<_FirstType<_Tp...>&, _Up1 const&>,"},
{"lineNum":" 1012","line":"            is_nothrow_assignable<_SecondType<_Tp...>&, _Up2 const&>"},
{"lineNum":" 1013","line":"        >::value))"},
{"lineNum":" 1014","line":"    {"},
{"lineNum":" 1015","line":"        _VSTD::get<0>(*this) = __pair.first;"},
{"lineNum":" 1016","line":"        _VSTD::get<1>(*this) = __pair.second;"},
{"lineNum":" 1017","line":"        return *this;"},
{"lineNum":" 1018","line":"    }"},
{"lineNum":" 1019","line":""},
{"lineNum":" 1020","line":"    template<class _Up1, class _Up2, class _Dep = true_type, _EnableIf<"},
{"lineNum":" 1021","line":"        _And<_Dep,"},
{"lineNum":" 1022","line":"            _BoolConstant<sizeof...(_Tp) == 2>,"},
{"lineNum":" 1023","line":"            is_assignable<_FirstType<_Tp..., _Dep>&, _Up1>,"},
{"lineNum":" 1024","line":"            is_assignable<_SecondType<_Tp..., _Dep>&, _Up2>"},
{"lineNum":" 1025","line":"        >::value"},
{"lineNum":" 1026","line":"    ,int> = 0>"},
{"lineNum":" 1027","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":" 1028","line":"    tuple& operator=(pair<_Up1, _Up2>&& __pair)"},
{"lineNum":" 1029","line":"        _NOEXCEPT_((_And<"},
{"lineNum":" 1030","line":"            is_nothrow_assignable<_FirstType<_Tp...>&, _Up1>,"},
{"lineNum":" 1031","line":"            is_nothrow_assignable<_SecondType<_Tp...>&, _Up2>"},
{"lineNum":" 1032","line":"        >::value))"},
{"lineNum":" 1033","line":"    {"},
{"lineNum":" 1034","line":"        _VSTD::get<0>(*this) = _VSTD::forward<_Up1>(__pair.first);"},
{"lineNum":" 1035","line":"        _VSTD::get<1>(*this) = _VSTD::forward<_Up2>(__pair.second);"},
{"lineNum":" 1036","line":"        return *this;"},
{"lineNum":" 1037","line":"    }"},
{"lineNum":" 1038","line":""},
{"lineNum":" 1039","line":"    // EXTENSION"},
{"lineNum":" 1040","line":"    template<class _Up, size_t _Np, class = _EnableIf<"},
{"lineNum":" 1041","line":"        _And<"},
{"lineNum":" 1042","line":"            _BoolConstant<_Np == sizeof...(_Tp)>,"},
{"lineNum":" 1043","line":"            is_assignable<_Tp&, _Up const&>..."},
{"lineNum":" 1044","line":"        >::value"},
{"lineNum":" 1045","line":"    > >"},
{"lineNum":" 1046","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":" 1047","line":"    tuple& operator=(array<_Up, _Np> const& __array)"},
{"lineNum":" 1048","line":"        _NOEXCEPT_((_And<is_nothrow_assignable<_Tp&, _Up const&>...>::value))"},
{"lineNum":" 1049","line":"    {"},
{"lineNum":" 1050","line":"        _VSTD::__memberwise_copy_assign(*this, __array,"},
{"lineNum":" 1051","line":"            typename __make_tuple_indices<sizeof...(_Tp)>::type());"},
{"lineNum":" 1052","line":"        return *this;"},
{"lineNum":" 1053","line":"    }"},
{"lineNum":" 1054","line":""},
{"lineNum":" 1055","line":"    // EXTENSION"},
{"lineNum":" 1056","line":"    template<class _Up, size_t _Np, class = void, class = _EnableIf<"},
{"lineNum":" 1057","line":"        _And<"},
{"lineNum":" 1058","line":"            _BoolConstant<_Np == sizeof...(_Tp)>,"},
{"lineNum":" 1059","line":"            is_assignable<_Tp&, _Up>..."},
{"lineNum":" 1060","line":"        >::value"},
{"lineNum":" 1061","line":"    > >"},
{"lineNum":" 1062","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":" 1063","line":"    tuple& operator=(array<_Up, _Np>&& __array)"},
{"lineNum":" 1064","line":"        _NOEXCEPT_((_And<is_nothrow_assignable<_Tp&, _Up>...>::value))"},
{"lineNum":" 1065","line":"    {"},
{"lineNum":" 1066","line":"        _VSTD::__memberwise_forward_assign(*this, _VSTD::move(__array),"},
{"lineNum":" 1067","line":"            __tuple_types<_If<true, _Up, _Tp>...>(),"},
{"lineNum":" 1068","line":"            typename __make_tuple_indices<sizeof...(_Tp)>::type());"},
{"lineNum":" 1069","line":"        return *this;"},
{"lineNum":" 1070","line":"    }"},
{"lineNum":" 1071","line":""},
{"lineNum":" 1072","line":"    // [tuple.swap]"},
{"lineNum":" 1073","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":" 1074","line":"    void swap(tuple& __t) _NOEXCEPT_(__all<__is_nothrow_swappable<_Tp>::value...>::value)"},
{"lineNum":" 1075","line":"        {__base_.swap(__t.__base_);}"},
{"lineNum":" 1076","line":"};"},
{"lineNum":" 1077","line":""},
{"lineNum":" 1078","line":"template <>"},
{"lineNum":" 1079","line":"class _LIBCPP_TEMPLATE_VIS tuple<>"},
{"lineNum":" 1080","line":"{"},
{"lineNum":" 1081","line":"public:"},
{"lineNum":" 1082","line":"    _LIBCPP_INLINE_VISIBILITY constexpr"},
{"lineNum":" 1083","line":"        tuple() _NOEXCEPT = default;"},
{"lineNum":" 1084","line":"    template <class _Alloc>"},
{"lineNum":" 1085","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":" 1086","line":"        tuple(allocator_arg_t, const _Alloc&) _NOEXCEPT {}"},
{"lineNum":" 1087","line":"    template <class _Alloc>"},
{"lineNum":" 1088","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":" 1089","line":"        tuple(allocator_arg_t, const _Alloc&, const tuple&) _NOEXCEPT {}"},
{"lineNum":" 1090","line":"    template <class _Up>"},
{"lineNum":" 1091","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":" 1092","line":"        tuple(array<_Up, 0>) _NOEXCEPT {}"},
{"lineNum":" 1093","line":"    template <class _Alloc, class _Up>"},
{"lineNum":" 1094","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":" 1095","line":"        tuple(allocator_arg_t, const _Alloc&, array<_Up, 0>) _NOEXCEPT {}"},
{"lineNum":" 1096","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":" 1097","line":"    void swap(tuple&) _NOEXCEPT {}"},
{"lineNum":" 1098","line":"};"},
{"lineNum":" 1099","line":""},
{"lineNum":" 1100","line":"#ifndef _LIBCPP_HAS_NO_DEDUCTION_GUIDES"},
{"lineNum":" 1101","line":"template <class ..._Tp>"},
{"lineNum":" 1102","line":"tuple(_Tp...) -> tuple<_Tp...>;"},
{"lineNum":" 1103","line":"template <class _Tp1, class _Tp2>"},
{"lineNum":" 1104","line":"tuple(pair<_Tp1, _Tp2>) -> tuple<_Tp1, _Tp2>;"},
{"lineNum":" 1105","line":"template <class _Alloc, class ..._Tp>"},
{"lineNum":" 1106","line":"tuple(allocator_arg_t, _Alloc, _Tp...) -> tuple<_Tp...>;"},
{"lineNum":" 1107","line":"template <class _Alloc, class _Tp1, class _Tp2>"},
{"lineNum":" 1108","line":"tuple(allocator_arg_t, _Alloc, pair<_Tp1, _Tp2>) -> tuple<_Tp1, _Tp2>;"},
{"lineNum":" 1109","line":"template <class _Alloc, class ..._Tp>"},
{"lineNum":" 1110","line":"tuple(allocator_arg_t, _Alloc, tuple<_Tp...>) -> tuple<_Tp...>;"},
{"lineNum":" 1111","line":"#endif"},
{"lineNum":" 1112","line":""},
{"lineNum":" 1113","line":"template <class ..._Tp>"},
{"lineNum":" 1114","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":" 1115","line":"typename enable_if"},
{"lineNum":" 1116","line":"<"},
{"lineNum":" 1117","line":"    __all<__is_swappable<_Tp>::value...>::value,"},
{"lineNum":" 1118","line":"    void"},
{"lineNum":" 1119","line":">::type"},
{"lineNum":" 1120","line":"swap(tuple<_Tp...>& __t, tuple<_Tp...>& __u)"},
{"lineNum":" 1121","line":"                 _NOEXCEPT_(__all<__is_nothrow_swappable<_Tp>::value...>::value)"},
{"lineNum":" 1122","line":"    {__t.swap(__u);}"},
{"lineNum":" 1123","line":""},
{"lineNum":" 1124","line":"// get"},
{"lineNum":" 1125","line":""},
{"lineNum":" 1126","line":"template <size_t _Ip, class ..._Tp>"},
{"lineNum":" 1127","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":" 1128","line":"typename tuple_element<_Ip, tuple<_Tp...> >::type&"},
{"lineNum":" 1129","line":"get(tuple<_Tp...>& __t) _NOEXCEPT"},
{"lineNum":" 1130","line":"{"},
{"lineNum":" 1131","line":"    typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type;"},
{"lineNum":" 1132","line":"    return static_cast<__tuple_leaf<_Ip, type>&>(__t.__base_).get();"},
{"lineNum":" 1133","line":"}"},
{"lineNum":" 1134","line":""},
{"lineNum":" 1135","line":"template <size_t _Ip, class ..._Tp>"},
{"lineNum":" 1136","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":" 1137","line":"const typename tuple_element<_Ip, tuple<_Tp...> >::type&"},
{"lineNum":" 1138","line":"get(const tuple<_Tp...>& __t) _NOEXCEPT"},
{"lineNum":" 1139","line":"{"},
{"lineNum":" 1140","line":"    typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type;"},
{"lineNum":" 1141","line":"    return static_cast<const __tuple_leaf<_Ip, type>&>(__t.__base_).get();"},
{"lineNum":" 1142","line":"}"},
{"lineNum":" 1143","line":""},
{"lineNum":" 1144","line":"template <size_t _Ip, class ..._Tp>"},
{"lineNum":" 1145","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":" 1146","line":"typename tuple_element<_Ip, tuple<_Tp...> >::type&&"},
{"lineNum":" 1147","line":"get(tuple<_Tp...>&& __t) _NOEXCEPT"},
{"lineNum":" 1148","line":"{"},
{"lineNum":" 1149","line":"    typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type;"},
{"lineNum":" 1150","line":"    return static_cast<type&&>("},
{"lineNum":" 1151","line":"             static_cast<__tuple_leaf<_Ip, type>&&>(__t.__base_).get());"},
{"lineNum":" 1152","line":"}"},
{"lineNum":" 1153","line":""},
{"lineNum":" 1154","line":"template <size_t _Ip, class ..._Tp>"},
{"lineNum":" 1155","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":" 1156","line":"const typename tuple_element<_Ip, tuple<_Tp...> >::type&&"},
{"lineNum":" 1157","line":"get(const tuple<_Tp...>&& __t) _NOEXCEPT"},
{"lineNum":" 1158","line":"{"},
{"lineNum":" 1159","line":"    typedef _LIBCPP_NODEBUG_TYPE typename tuple_element<_Ip, tuple<_Tp...> >::type type;"},
{"lineNum":" 1160","line":"    return static_cast<const type&&>("},
{"lineNum":" 1161","line":"             static_cast<const __tuple_leaf<_Ip, type>&&>(__t.__base_).get());"},
{"lineNum":" 1162","line":"}"},
{"lineNum":" 1163","line":""},
{"lineNum":" 1164","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 1165","line":""},
{"lineNum":" 1166","line":"namespace __find_detail {"},
{"lineNum":" 1167","line":""},
{"lineNum":" 1168","line":"static constexpr size_t __not_found = static_cast<size_t>(-1);"},
{"lineNum":" 1169","line":"static constexpr size_t __ambiguous = __not_found - 1;"},
{"lineNum":" 1170","line":""},
{"lineNum":" 1171","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1172","line":"constexpr size_t __find_idx_return(size_t __curr_i, size_t __res, bool __matches) {"},
{"lineNum":" 1173","line":"    return !__matches ? __res :"},
{"lineNum":" 1174","line":"        (__res == __not_found ? __curr_i : __ambiguous);"},
{"lineNum":" 1175","line":"}"},
{"lineNum":" 1176","line":""},
{"lineNum":" 1177","line":"template <size_t _Nx>"},
{"lineNum":" 1178","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1179","line":"constexpr size_t __find_idx(size_t __i, const bool (&__matches)[_Nx]) {"},
{"lineNum":" 1180","line":"  return __i == _Nx ? __not_found :"},
{"lineNum":" 1181","line":"      __find_idx_return(__i, __find_idx(__i + 1, __matches), __matches[__i]);"},
{"lineNum":" 1182","line":"}"},
{"lineNum":" 1183","line":""},
{"lineNum":" 1184","line":"template <class _T1, class ..._Args>"},
{"lineNum":" 1185","line":"struct __find_exactly_one_checked {"},
{"lineNum":" 1186","line":"    static constexpr bool __matches[sizeof...(_Args)] = {is_same<_T1, _Args>::value...};"},
{"lineNum":" 1187","line":"    static constexpr size_t value = __find_detail::__find_idx(0, __matches);"},
{"lineNum":" 1188","line":"    static_assert(value != __not_found, \"type not found in type list\" );"},
{"lineNum":" 1189","line":"    static_assert(value != __ambiguous, \"type occurs more than once in type list\");"},
{"lineNum":" 1190","line":"};"},
{"lineNum":" 1191","line":""},
{"lineNum":" 1192","line":"template <class _T1>"},
{"lineNum":" 1193","line":"struct __find_exactly_one_checked<_T1> {"},
{"lineNum":" 1194","line":"    static_assert(!is_same<_T1, _T1>::value, \"type not in empty type list\");"},
{"lineNum":" 1195","line":"};"},
{"lineNum":" 1196","line":""},
{"lineNum":" 1197","line":"} // namespace __find_detail;"},
{"lineNum":" 1198","line":""},
{"lineNum":" 1199","line":"template <typename _T1, typename... _Args>"},
{"lineNum":" 1200","line":"struct __find_exactly_one_t"},
{"lineNum":" 1201","line":"    : public __find_detail::__find_exactly_one_checked<_T1, _Args...> {"},
{"lineNum":" 1202","line":"};"},
{"lineNum":" 1203","line":""},
{"lineNum":" 1204","line":"template <class _T1, class... _Args>"},
{"lineNum":" 1205","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1206","line":"constexpr _T1& get(tuple<_Args...>& __tup) noexcept"},
{"lineNum":" 1207","line":"{"},
{"lineNum":" 1208","line":"    return _VSTD::get<__find_exactly_one_t<_T1, _Args...>::value>(__tup);"},
{"lineNum":" 1209","line":"}"},
{"lineNum":" 1210","line":""},
{"lineNum":" 1211","line":"template <class _T1, class... _Args>"},
{"lineNum":" 1212","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1213","line":"constexpr _T1 const& get(tuple<_Args...> const& __tup) noexcept"},
{"lineNum":" 1214","line":"{"},
{"lineNum":" 1215","line":"    return _VSTD::get<__find_exactly_one_t<_T1, _Args...>::value>(__tup);"},
{"lineNum":" 1216","line":"}"},
{"lineNum":" 1217","line":""},
{"lineNum":" 1218","line":"template <class _T1, class... _Args>"},
{"lineNum":" 1219","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1220","line":"constexpr _T1&& get(tuple<_Args...>&& __tup) noexcept"},
{"lineNum":" 1221","line":"{"},
{"lineNum":" 1222","line":"    return _VSTD::get<__find_exactly_one_t<_T1, _Args...>::value>(_VSTD::move(__tup));"},
{"lineNum":" 1223","line":"}"},
{"lineNum":" 1224","line":""},
{"lineNum":" 1225","line":"template <class _T1, class... _Args>"},
{"lineNum":" 1226","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1227","line":"constexpr _T1 const&& get(tuple<_Args...> const&& __tup) noexcept"},
{"lineNum":" 1228","line":"{"},
{"lineNum":" 1229","line":"    return _VSTD::get<__find_exactly_one_t<_T1, _Args...>::value>(_VSTD::move(__tup));"},
{"lineNum":" 1230","line":"}"},
{"lineNum":" 1231","line":""},
{"lineNum":" 1232","line":"#endif"},
{"lineNum":" 1233","line":""},
{"lineNum":" 1234","line":"// tie"},
{"lineNum":" 1235","line":""},
{"lineNum":" 1236","line":"template <class ..._Tp>"},
{"lineNum":" 1237","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":" 1238","line":"tuple<_Tp&...>"},
{"lineNum":" 1239","line":"tie(_Tp&... __t) _NOEXCEPT"},
{"lineNum":" 1240","line":"{"},
{"lineNum":" 1241","line":"    return tuple<_Tp&...>(__t...);"},
{"lineNum":" 1242","line":"}"},
{"lineNum":" 1243","line":""},
{"lineNum":" 1244","line":"template <class _Up>"},
{"lineNum":" 1245","line":"struct __ignore_t"},
{"lineNum":" 1246","line":"{"},
{"lineNum":" 1247","line":"    template <class _Tp>"},
{"lineNum":" 1248","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":" 1249","line":"    const __ignore_t& operator=(_Tp&&) const {return *this;}"},
{"lineNum":" 1250","line":"};"},
{"lineNum":" 1251","line":""},
{"lineNum":" 1252","line":"namespace {"},
{"lineNum":" 1253","line":"  _LIBCPP_INLINE_VAR constexpr __ignore_t<unsigned char> ignore = __ignore_t<unsigned char>();"},
{"lineNum":" 1254","line":"}"},
{"lineNum":" 1255","line":""},
{"lineNum":" 1256","line":"template <class... _Tp>"},
{"lineNum":" 1257","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":" 1258","line":"tuple<typename __unwrap_ref_decay<_Tp>::type...>"},
{"lineNum":" 1259","line":"make_tuple(_Tp&&... __t)"},
{"lineNum":" 1260","line":"{"},
{"lineNum":" 1261","line":"    return tuple<typename __unwrap_ref_decay<_Tp>::type...>(_VSTD::forward<_Tp>(__t)...);"},
{"lineNum":" 1262","line":"}"},
{"lineNum":" 1263","line":""},
{"lineNum":" 1264","line":"template <class... _Tp>"},
{"lineNum":" 1265","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":" 1266","line":"tuple<_Tp&&...>"},
{"lineNum":" 1267","line":"forward_as_tuple(_Tp&&... __t) _NOEXCEPT"},
{"lineNum":" 1268","line":"{"},
{"lineNum":" 1269","line":"    return tuple<_Tp&&...>(_VSTD::forward<_Tp>(__t)...);","class":"linePartCov","hits":"15","order":"301","possible_hits":"60",},
{"lineNum":" 1270","line":"}"},
{"lineNum":" 1271","line":""},
{"lineNum":" 1272","line":"template <size_t _Ip>"},
{"lineNum":" 1273","line":"struct __tuple_equal"},
{"lineNum":" 1274","line":"{"},
{"lineNum":" 1275","line":"    template <class _Tp, class _Up>"},
{"lineNum":" 1276","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":" 1277","line":"    bool operator()(const _Tp& __x, const _Up& __y)"},
{"lineNum":" 1278","line":"    {"},
{"lineNum":" 1279","line":"        return __tuple_equal<_Ip - 1>()(__x, __y) && _VSTD::get<_Ip-1>(__x) == _VSTD::get<_Ip-1>(__y);"},
{"lineNum":" 1280","line":"    }"},
{"lineNum":" 1281","line":"};"},
{"lineNum":" 1282","line":""},
{"lineNum":" 1283","line":"template <>"},
{"lineNum":" 1284","line":"struct __tuple_equal<0>"},
{"lineNum":" 1285","line":"{"},
{"lineNum":" 1286","line":"    template <class _Tp, class _Up>"},
{"lineNum":" 1287","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":" 1288","line":"    bool operator()(const _Tp&, const _Up&)"},
{"lineNum":" 1289","line":"    {"},
{"lineNum":" 1290","line":"        return true;"},
{"lineNum":" 1291","line":"    }"},
{"lineNum":" 1292","line":"};"},
{"lineNum":" 1293","line":""},
{"lineNum":" 1294","line":"template <class ..._Tp, class ..._Up>"},
{"lineNum":" 1295","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":" 1296","line":"bool"},
{"lineNum":" 1297","line":"operator==(const tuple<_Tp...>& __x, const tuple<_Up...>& __y)"},
{"lineNum":" 1298","line":"{"},
{"lineNum":" 1299","line":"    static_assert (sizeof...(_Tp) == sizeof...(_Up), \"Can\'t compare tuples of different sizes\");"},
{"lineNum":" 1300","line":"    return __tuple_equal<sizeof...(_Tp)>()(__x, __y);"},
{"lineNum":" 1301","line":"}"},
{"lineNum":" 1302","line":""},
{"lineNum":" 1303","line":"template <class ..._Tp, class ..._Up>"},
{"lineNum":" 1304","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":" 1305","line":"bool"},
{"lineNum":" 1306","line":"operator!=(const tuple<_Tp...>& __x, const tuple<_Up...>& __y)"},
{"lineNum":" 1307","line":"{"},
{"lineNum":" 1308","line":"    return !(__x == __y);"},
{"lineNum":" 1309","line":"}"},
{"lineNum":" 1310","line":""},
{"lineNum":" 1311","line":"template <size_t _Ip>"},
{"lineNum":" 1312","line":"struct __tuple_less"},
{"lineNum":" 1313","line":"{"},
{"lineNum":" 1314","line":"    template <class _Tp, class _Up>"},
{"lineNum":" 1315","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":" 1316","line":"    bool operator()(const _Tp& __x, const _Up& __y)"},
{"lineNum":" 1317","line":"    {"},
{"lineNum":" 1318","line":"        const size_t __idx = tuple_size<_Tp>::value - _Ip;"},
{"lineNum":" 1319","line":"        if (_VSTD::get<__idx>(__x) < _VSTD::get<__idx>(__y))"},
{"lineNum":" 1320","line":"            return true;"},
{"lineNum":" 1321","line":"        if (_VSTD::get<__idx>(__y) < _VSTD::get<__idx>(__x))"},
{"lineNum":" 1322","line":"            return false;"},
{"lineNum":" 1323","line":"        return __tuple_less<_Ip-1>()(__x, __y);"},
{"lineNum":" 1324","line":"    }"},
{"lineNum":" 1325","line":"};"},
{"lineNum":" 1326","line":""},
{"lineNum":" 1327","line":"template <>"},
{"lineNum":" 1328","line":"struct __tuple_less<0>"},
{"lineNum":" 1329","line":"{"},
{"lineNum":" 1330","line":"    template <class _Tp, class _Up>"},
{"lineNum":" 1331","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":" 1332","line":"    bool operator()(const _Tp&, const _Up&)"},
{"lineNum":" 1333","line":"    {"},
{"lineNum":" 1334","line":"        return false;"},
{"lineNum":" 1335","line":"    }"},
{"lineNum":" 1336","line":"};"},
{"lineNum":" 1337","line":""},
{"lineNum":" 1338","line":"template <class ..._Tp, class ..._Up>"},
{"lineNum":" 1339","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":" 1340","line":"bool"},
{"lineNum":" 1341","line":"operator<(const tuple<_Tp...>& __x, const tuple<_Up...>& __y)"},
{"lineNum":" 1342","line":"{"},
{"lineNum":" 1343","line":"    static_assert (sizeof...(_Tp) == sizeof...(_Up), \"Can\'t compare tuples of different sizes\");"},
{"lineNum":" 1344","line":"    return __tuple_less<sizeof...(_Tp)>()(__x, __y);"},
{"lineNum":" 1345","line":"}"},
{"lineNum":" 1346","line":""},
{"lineNum":" 1347","line":"template <class ..._Tp, class ..._Up>"},
{"lineNum":" 1348","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":" 1349","line":"bool"},
{"lineNum":" 1350","line":"operator>(const tuple<_Tp...>& __x, const tuple<_Up...>& __y)"},
{"lineNum":" 1351","line":"{"},
{"lineNum":" 1352","line":"    return __y < __x;"},
{"lineNum":" 1353","line":"}"},
{"lineNum":" 1354","line":""},
{"lineNum":" 1355","line":"template <class ..._Tp, class ..._Up>"},
{"lineNum":" 1356","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":" 1357","line":"bool"},
{"lineNum":" 1358","line":"operator>=(const tuple<_Tp...>& __x, const tuple<_Up...>& __y)"},
{"lineNum":" 1359","line":"{"},
{"lineNum":" 1360","line":"    return !(__x < __y);"},
{"lineNum":" 1361","line":"}"},
{"lineNum":" 1362","line":""},
{"lineNum":" 1363","line":"template <class ..._Tp, class ..._Up>"},
{"lineNum":" 1364","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":" 1365","line":"bool"},
{"lineNum":" 1366","line":"operator<=(const tuple<_Tp...>& __x, const tuple<_Up...>& __y)"},
{"lineNum":" 1367","line":"{"},
{"lineNum":" 1368","line":"    return !(__y < __x);"},
{"lineNum":" 1369","line":"}"},
{"lineNum":" 1370","line":""},
{"lineNum":" 1371","line":"// tuple_cat"},
{"lineNum":" 1372","line":""},
{"lineNum":" 1373","line":"template <class _Tp, class _Up> struct __tuple_cat_type;"},
{"lineNum":" 1374","line":""},
{"lineNum":" 1375","line":"template <class ..._Ttypes, class ..._Utypes>"},
{"lineNum":" 1376","line":"struct __tuple_cat_type<tuple<_Ttypes...>, __tuple_types<_Utypes...> >"},
{"lineNum":" 1377","line":"{"},
{"lineNum":" 1378","line":"    typedef _LIBCPP_NODEBUG_TYPE tuple<_Ttypes..., _Utypes...> type;"},
{"lineNum":" 1379","line":"};"},
{"lineNum":" 1380","line":""},
{"lineNum":" 1381","line":"template <class _ResultTuple, bool _Is_Tuple0TupleLike, class ..._Tuples>"},
{"lineNum":" 1382","line":"struct __tuple_cat_return_1"},
{"lineNum":" 1383","line":"{"},
{"lineNum":" 1384","line":"};"},
{"lineNum":" 1385","line":""},
{"lineNum":" 1386","line":"template <class ..._Types, class _Tuple0>"},
{"lineNum":" 1387","line":"struct __tuple_cat_return_1<tuple<_Types...>, true, _Tuple0>"},
{"lineNum":" 1388","line":"{"},
{"lineNum":" 1389","line":"    typedef _LIBCPP_NODEBUG_TYPE typename __tuple_cat_type<tuple<_Types...>,"},
{"lineNum":" 1390","line":"            typename __make_tuple_types<typename __uncvref<_Tuple0>::type>::type>::type"},
{"lineNum":" 1391","line":"                                                                           type;"},
{"lineNum":" 1392","line":"};"},
{"lineNum":" 1393","line":""},
{"lineNum":" 1394","line":"template <class ..._Types, class _Tuple0, class _Tuple1, class ..._Tuples>"},
{"lineNum":" 1395","line":"struct __tuple_cat_return_1<tuple<_Types...>, true, _Tuple0, _Tuple1, _Tuples...>"},
{"lineNum":" 1396","line":"    : public __tuple_cat_return_1<"},
{"lineNum":" 1397","line":"                 typename __tuple_cat_type<"},
{"lineNum":" 1398","line":"                     tuple<_Types...>,"},
{"lineNum":" 1399","line":"                     typename __make_tuple_types<typename __uncvref<_Tuple0>::type>::type"},
{"lineNum":" 1400","line":"                 >::type,"},
{"lineNum":" 1401","line":"                 __tuple_like<typename remove_reference<_Tuple1>::type>::value,"},
{"lineNum":" 1402","line":"                 _Tuple1, _Tuples...>"},
{"lineNum":" 1403","line":"{"},
{"lineNum":" 1404","line":"};"},
{"lineNum":" 1405","line":""},
{"lineNum":" 1406","line":"template <class ..._Tuples> struct __tuple_cat_return;"},
{"lineNum":" 1407","line":""},
{"lineNum":" 1408","line":"template <class _Tuple0, class ..._Tuples>"},
{"lineNum":" 1409","line":"struct __tuple_cat_return<_Tuple0, _Tuples...>"},
{"lineNum":" 1410","line":"    : public __tuple_cat_return_1<tuple<>,"},
{"lineNum":" 1411","line":"         __tuple_like<typename remove_reference<_Tuple0>::type>::value, _Tuple0,"},
{"lineNum":" 1412","line":"                                                                     _Tuples...>"},
{"lineNum":" 1413","line":"{"},
{"lineNum":" 1414","line":"};"},
{"lineNum":" 1415","line":""},
{"lineNum":" 1416","line":"template <>"},
{"lineNum":" 1417","line":"struct __tuple_cat_return<>"},
{"lineNum":" 1418","line":"{"},
{"lineNum":" 1419","line":"    typedef _LIBCPP_NODEBUG_TYPE tuple<> type;"},
{"lineNum":" 1420","line":"};"},
{"lineNum":" 1421","line":""},
{"lineNum":" 1422","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":" 1423","line":"tuple<>"},
{"lineNum":" 1424","line":"tuple_cat()"},
{"lineNum":" 1425","line":"{"},
{"lineNum":" 1426","line":"    return tuple<>();"},
{"lineNum":" 1427","line":"}"},
{"lineNum":" 1428","line":""},
{"lineNum":" 1429","line":"template <class _Rp, class _Indices, class _Tuple0, class ..._Tuples>"},
{"lineNum":" 1430","line":"struct __tuple_cat_return_ref_imp;"},
{"lineNum":" 1431","line":""},
{"lineNum":" 1432","line":"template <class ..._Types, size_t ..._I0, class _Tuple0>"},
{"lineNum":" 1433","line":"struct __tuple_cat_return_ref_imp<tuple<_Types...>, __tuple_indices<_I0...>, _Tuple0>"},
{"lineNum":" 1434","line":"{"},
{"lineNum":" 1435","line":"    typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tuple0>::type _T0;"},
{"lineNum":" 1436","line":"    typedef tuple<_Types..., typename __apply_cv<_Tuple0,"},
{"lineNum":" 1437","line":"                          typename tuple_element<_I0, _T0>::type>::type&&...> type;"},
{"lineNum":" 1438","line":"};"},
{"lineNum":" 1439","line":""},
{"lineNum":" 1440","line":"template <class ..._Types, size_t ..._I0, class _Tuple0, class _Tuple1, class ..._Tuples>"},
{"lineNum":" 1441","line":"struct __tuple_cat_return_ref_imp<tuple<_Types...>, __tuple_indices<_I0...>,"},
{"lineNum":" 1442","line":"                                  _Tuple0, _Tuple1, _Tuples...>"},
{"lineNum":" 1443","line":"    : public __tuple_cat_return_ref_imp<"},
{"lineNum":" 1444","line":"         tuple<_Types..., typename __apply_cv<_Tuple0,"},
{"lineNum":" 1445","line":"               typename tuple_element<_I0,"},
{"lineNum":" 1446","line":"                  typename remove_reference<_Tuple0>::type>::type>::type&&...>,"},
{"lineNum":" 1447","line":"         typename __make_tuple_indices<tuple_size<typename"},
{"lineNum":" 1448","line":"                                 remove_reference<_Tuple1>::type>::value>::type,"},
{"lineNum":" 1449","line":"         _Tuple1, _Tuples...>"},
{"lineNum":" 1450","line":"{"},
{"lineNum":" 1451","line":"};"},
{"lineNum":" 1452","line":""},
{"lineNum":" 1453","line":"template <class _Tuple0, class ..._Tuples>"},
{"lineNum":" 1454","line":"struct __tuple_cat_return_ref"},
{"lineNum":" 1455","line":"    : public __tuple_cat_return_ref_imp<tuple<>,"},
{"lineNum":" 1456","line":"               typename __make_tuple_indices<"},
{"lineNum":" 1457","line":"                        tuple_size<typename remove_reference<_Tuple0>::type>::value"},
{"lineNum":" 1458","line":"               >::type, _Tuple0, _Tuples...>"},
{"lineNum":" 1459","line":"{"},
{"lineNum":" 1460","line":"};"},
{"lineNum":" 1461","line":""},
{"lineNum":" 1462","line":"template <class _Types, class _I0, class _J0>"},
{"lineNum":" 1463","line":"struct __tuple_cat;"},
{"lineNum":" 1464","line":""},
{"lineNum":" 1465","line":"template <class ..._Types, size_t ..._I0, size_t ..._J0>"},
{"lineNum":" 1466","line":"struct __tuple_cat<tuple<_Types...>, __tuple_indices<_I0...>, __tuple_indices<_J0...> >"},
{"lineNum":" 1467","line":"{"},
{"lineNum":" 1468","line":"    template <class _Tuple0>"},
{"lineNum":" 1469","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":" 1470","line":"    typename __tuple_cat_return_ref<tuple<_Types...>&&, _Tuple0&&>::type"},
{"lineNum":" 1471","line":"    operator()(tuple<_Types...> __t, _Tuple0&& __t0)"},
{"lineNum":" 1472","line":"    {"},
{"lineNum":" 1473","line":"        return _VSTD::forward_as_tuple("},
{"lineNum":" 1474","line":"            _VSTD::forward<_Types>(_VSTD::get<_I0>(__t))...,"},
{"lineNum":" 1475","line":"            _VSTD::get<_J0>(_VSTD::forward<_Tuple0>(__t0))...);"},
{"lineNum":" 1476","line":"    }"},
{"lineNum":" 1477","line":""},
{"lineNum":" 1478","line":"    template <class _Tuple0, class _Tuple1, class ..._Tuples>"},
{"lineNum":" 1479","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":" 1480","line":"    typename __tuple_cat_return_ref<tuple<_Types...>&&, _Tuple0&&, _Tuple1&&, _Tuples&&...>::type"},
{"lineNum":" 1481","line":"    operator()(tuple<_Types...> __t, _Tuple0&& __t0, _Tuple1&& __t1, _Tuples&& ...__tpls)"},
{"lineNum":" 1482","line":"    {"},
{"lineNum":" 1483","line":"        typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tuple0>::type _T0;"},
{"lineNum":" 1484","line":"        typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tuple1>::type _T1;"},
{"lineNum":" 1485","line":"        return __tuple_cat<"},
{"lineNum":" 1486","line":"            tuple<_Types...,"},
{"lineNum":" 1487","line":"                  typename __apply_cv<_Tuple0, typename tuple_element<"},
{"lineNum":" 1488","line":"                                                   _J0, _T0>::type>::type&&...>,"},
{"lineNum":" 1489","line":"            typename __make_tuple_indices<sizeof...(_Types) +"},
{"lineNum":" 1490","line":"                                          tuple_size<_T0>::value>::type,"},
{"lineNum":" 1491","line":"            typename __make_tuple_indices<tuple_size<_T1>::value>::type>()("},
{"lineNum":" 1492","line":"            _VSTD::forward_as_tuple("},
{"lineNum":" 1493","line":"                _VSTD::forward<_Types>(_VSTD::get<_I0>(__t))...,"},
{"lineNum":" 1494","line":"                _VSTD::get<_J0>(_VSTD::forward<_Tuple0>(__t0))...),"},
{"lineNum":" 1495","line":"            _VSTD::forward<_Tuple1>(__t1), _VSTD::forward<_Tuples>(__tpls)...);"},
{"lineNum":" 1496","line":"    }"},
{"lineNum":" 1497","line":"};"},
{"lineNum":" 1498","line":""},
{"lineNum":" 1499","line":"template <class _Tuple0, class... _Tuples>"},
{"lineNum":" 1500","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":" 1501","line":"typename __tuple_cat_return<_Tuple0, _Tuples...>::type"},
{"lineNum":" 1502","line":"tuple_cat(_Tuple0&& __t0, _Tuples&&... __tpls)"},
{"lineNum":" 1503","line":"{"},
{"lineNum":" 1504","line":"    typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tuple0>::type _T0;"},
{"lineNum":" 1505","line":"    return __tuple_cat<tuple<>, __tuple_indices<>,"},
{"lineNum":" 1506","line":"                  typename __make_tuple_indices<tuple_size<_T0>::value>::type>()"},
{"lineNum":" 1507","line":"                  (tuple<>(), _VSTD::forward<_Tuple0>(__t0),"},
{"lineNum":" 1508","line":"                                            _VSTD::forward<_Tuples>(__tpls)...);"},
{"lineNum":" 1509","line":"}"},
{"lineNum":" 1510","line":""},
{"lineNum":" 1511","line":"template <class ..._Tp, class _Alloc>"},
{"lineNum":" 1512","line":"struct _LIBCPP_TEMPLATE_VIS uses_allocator<tuple<_Tp...>, _Alloc>"},
{"lineNum":" 1513","line":"    : true_type {};"},
{"lineNum":" 1514","line":""},
{"lineNum":" 1515","line":"template <class _T1, class _T2>"},
{"lineNum":" 1516","line":"template <class... _Args1, class... _Args2, size_t ..._I1, size_t ..._I2>"},
{"lineNum":" 1517","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":" 1518","line":"pair<_T1, _T2>::pair(piecewise_construct_t,"},
{"lineNum":" 1519","line":"                     tuple<_Args1...>& __first_args, tuple<_Args2...>& __second_args,"},
{"lineNum":" 1520","line":"                     __tuple_indices<_I1...>, __tuple_indices<_I2...>)"},
{"lineNum":" 1521","line":"    :  first(_VSTD::forward<_Args1>(_VSTD::get<_I1>( __first_args))...),","class":"linePartCov","hits":"2","order":"654","possible_hits":"24",},
{"lineNum":" 1522","line":"      second(_VSTD::forward<_Args2>(_VSTD::get<_I2>(__second_args))...)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1523","line":"{"},
{"lineNum":" 1524","line":"}"},
{"lineNum":" 1525","line":""},
{"lineNum":" 1526","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 1527","line":"template <class _Tp>"},
{"lineNum":" 1528","line":"_LIBCPP_INLINE_VAR constexpr size_t tuple_size_v = tuple_size<_Tp>::value;"},
{"lineNum":" 1529","line":""},
{"lineNum":" 1530","line":"#define _LIBCPP_NOEXCEPT_RETURN(...) noexcept(noexcept(__VA_ARGS__)) { return __VA_ARGS__; }"},
{"lineNum":" 1531","line":""},
{"lineNum":" 1532","line":"template <class _Fn, class _Tuple, size_t ..._Id>"},
{"lineNum":" 1533","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1534","line":"constexpr decltype(auto) __apply_tuple_impl(_Fn && __f, _Tuple && __t,"},
{"lineNum":" 1535","line":"                                            __tuple_indices<_Id...>)"},
{"lineNum":" 1536","line":"_LIBCPP_NOEXCEPT_RETURN("},
{"lineNum":" 1537","line":"    _VSTD::__invoke_constexpr("},
{"lineNum":" 1538","line":"        _VSTD::forward<_Fn>(__f),"},
{"lineNum":" 1539","line":"        _VSTD::get<_Id>(_VSTD::forward<_Tuple>(__t))...)"},
{"lineNum":" 1540","line":")"},
{"lineNum":" 1541","line":""},
{"lineNum":" 1542","line":"template <class _Fn, class _Tuple>"},
{"lineNum":" 1543","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1544","line":"constexpr decltype(auto) apply(_Fn && __f, _Tuple && __t)"},
{"lineNum":" 1545","line":"_LIBCPP_NOEXCEPT_RETURN("},
{"lineNum":" 1546","line":"    _VSTD::__apply_tuple_impl("},
{"lineNum":" 1547","line":"        _VSTD::forward<_Fn>(__f), _VSTD::forward<_Tuple>(__t),"},
{"lineNum":" 1548","line":"        typename __make_tuple_indices<tuple_size_v<remove_reference_t<_Tuple>>>::type{})"},
{"lineNum":" 1549","line":")"},
{"lineNum":" 1550","line":""},
{"lineNum":" 1551","line":"template <class _Tp, class _Tuple, size_t... _Idx>"},
{"lineNum":" 1552","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1553","line":"constexpr _Tp __make_from_tuple_impl(_Tuple&& __t, __tuple_indices<_Idx...>)"},
{"lineNum":" 1554","line":"_LIBCPP_NOEXCEPT_RETURN("},
{"lineNum":" 1555","line":"    _Tp(_VSTD::get<_Idx>(_VSTD::forward<_Tuple>(__t))...)"},
{"lineNum":" 1556","line":")"},
{"lineNum":" 1557","line":""},
{"lineNum":" 1558","line":"template <class _Tp, class _Tuple>"},
{"lineNum":" 1559","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1560","line":"constexpr _Tp make_from_tuple(_Tuple&& __t)"},
{"lineNum":" 1561","line":"_LIBCPP_NOEXCEPT_RETURN("},
{"lineNum":" 1562","line":"    _VSTD::__make_from_tuple_impl<_Tp>(_VSTD::forward<_Tuple>(__t),"},
{"lineNum":" 1563","line":"        typename __make_tuple_indices<tuple_size_v<remove_reference_t<_Tuple>>>::type{})"},
{"lineNum":" 1564","line":")"},
{"lineNum":" 1565","line":""},
{"lineNum":" 1566","line":"#undef _LIBCPP_NOEXCEPT_RETURN"},
{"lineNum":" 1567","line":""},
{"lineNum":" 1568","line":"#endif // _LIBCPP_STD_VER > 14"},
{"lineNum":" 1569","line":""},
{"lineNum":" 1570","line":"#endif // !defined(_LIBCPP_CXX03_LANG)"},
{"lineNum":" 1571","line":""},
{"lineNum":" 1572","line":"_LIBCPP_END_NAMESPACE_STD"},
{"lineNum":" 1573","line":""},
{"lineNum":" 1574","line":"#endif // _LIBCPP_TUPLE"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 4, "covered" : 2,};
var merged_data = [];
