var data = {lines:[
{"lineNum":"    1","line":"/*============================================================================="},
{"lineNum":"    2","line":"    Copyright (c) 2001-2011 Joel de Guzman"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"    Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    5","line":"    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    6","line":"==============================================================================*/"},
{"lineNum":"    7","line":"#if !defined(BOOST_SPIRIT_STRING_PARSE_APR_18_2006_1125PM)"},
{"lineNum":"    8","line":"#define BOOST_SPIRIT_STRING_PARSE_APR_18_2006_1125PM"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#if defined(_MSC_VER)"},
{"lineNum":"   11","line":"#pragma once"},
{"lineNum":"   12","line":"#endif"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"#include <boost/spirit/home/qi/detail/assign_to.hpp>"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"namespace boost { namespace spirit { namespace qi { namespace detail"},
{"lineNum":"   17","line":"{"},
{"lineNum":"   18","line":"    template <typename Char, typename Iterator, typename Attribute>"},
{"lineNum":"   19","line":"    inline bool string_parse("},
{"lineNum":"   20","line":"        Char const* str"},
{"lineNum":"   21","line":"      , Iterator& first, Iterator const& last, Attribute& attr)"},
{"lineNum":"   22","line":"    {"},
{"lineNum":"   23","line":"        Iterator i = first;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   24","line":"        Char ch = *str;"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"        for (; !!ch; ++i)","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"   27","line":"        {"},
{"lineNum":"   28","line":"            if (i == last || (ch != *i))","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   29","line":"                return false;"},
{"lineNum":"   30","line":"            ch = *++str;"},
{"lineNum":"   31","line":"        }"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"        spirit::traits::assign_to(first, i, attr);"},
{"lineNum":"   34","line":"        first = i;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   35","line":"        return true;"},
{"lineNum":"   36","line":"    }"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"    template <typename String, typename Iterator, typename Attribute>"},
{"lineNum":"   39","line":"    inline bool string_parse("},
{"lineNum":"   40","line":"        String const& str"},
{"lineNum":"   41","line":"      , Iterator& first, Iterator const& last, Attribute& attr)"},
{"lineNum":"   42","line":"    {"},
{"lineNum":"   43","line":"        Iterator i = first;"},
{"lineNum":"   44","line":"        typename String::const_iterator stri = str.begin();"},
{"lineNum":"   45","line":"        typename String::const_iterator str_last = str.end();"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"        for (; stri != str_last; ++stri, ++i)"},
{"lineNum":"   48","line":"            if (i == last || (*stri != *i))"},
{"lineNum":"   49","line":"                return false;"},
{"lineNum":"   50","line":"        spirit::traits::assign_to(first, i, attr);"},
{"lineNum":"   51","line":"        first = i;"},
{"lineNum":"   52","line":"        return true;"},
{"lineNum":"   53","line":"    }"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"    template <typename Char, typename Iterator, typename Attribute>"},
{"lineNum":"   56","line":"    inline bool string_parse("},
{"lineNum":"   57","line":"        Char const* uc_i, Char const* lc_i"},
{"lineNum":"   58","line":"      , Iterator& first, Iterator const& last, Attribute& attr)"},
{"lineNum":"   59","line":"    {"},
{"lineNum":"   60","line":"        Iterator i = first;"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"        for (; *uc_i && *lc_i; ++uc_i, ++lc_i, ++i)"},
{"lineNum":"   63","line":"            if (i == last || ((*uc_i != *i) && (*lc_i != *i)))","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"   64","line":"                return false;"},
{"lineNum":"   65","line":"        spirit::traits::assign_to(first, i, attr);"},
{"lineNum":"   66","line":"        first = i;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   67","line":"        return true;"},
{"lineNum":"   68","line":"    }"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"    template <typename String, typename Iterator, typename Attribute>"},
{"lineNum":"   71","line":"    inline bool string_parse("},
{"lineNum":"   72","line":"        String const& ucstr, String const& lcstr"},
{"lineNum":"   73","line":"      , Iterator& first, Iterator const& last, Attribute& attr)"},
{"lineNum":"   74","line":"    {"},
{"lineNum":"   75","line":"        typename String::const_iterator uc_i = ucstr.begin();"},
{"lineNum":"   76","line":"        typename String::const_iterator uc_last = ucstr.end();"},
{"lineNum":"   77","line":"        typename String::const_iterator lc_i = lcstr.begin();"},
{"lineNum":"   78","line":"        Iterator i = first;","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"        for (; uc_i != uc_last; ++uc_i, ++lc_i, ++i)","class":"lineNoCov","hits":"0","possible_hits":"19",},
{"lineNum":"   81","line":"            if (i == last || ((*uc_i != *i) && (*lc_i != *i)))","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   82","line":"                return false;"},
{"lineNum":"   83","line":"        spirit::traits::assign_to(first, i, attr);"},
{"lineNum":"   84","line":"        first = i;","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   85","line":"        return true;"},
{"lineNum":"   86","line":"    }"},
{"lineNum":"   87","line":"}}}}"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 10, "covered" : 0,};
var merged_data = [];
