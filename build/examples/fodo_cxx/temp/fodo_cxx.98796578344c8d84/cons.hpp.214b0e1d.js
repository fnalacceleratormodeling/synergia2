var data = {lines:[
{"lineNum":"    1","line":"/*============================================================================="},
{"lineNum":"    2","line":"    Copyright (c) 2001-2011 Joel de Guzman"},
{"lineNum":"    3","line":"    Copyright (c) 2005 Eric Niebler"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"    Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    6","line":"    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    7","line":"==============================================================================*/"},
{"lineNum":"    8","line":"#if !defined(FUSION_CONS_07172005_0843)"},
{"lineNum":"    9","line":"#define FUSION_CONS_07172005_0843"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"#include <boost/fusion/support/config.hpp>"},
{"lineNum":"   12","line":"#include <boost/fusion/support/void.hpp>"},
{"lineNum":"   13","line":"#include <boost/fusion/support/detail/enabler.hpp>"},
{"lineNum":"   14","line":"#include <boost/fusion/container/list/cons_fwd.hpp>"},
{"lineNum":"   15","line":"#include <boost/fusion/support/detail/access.hpp>"},
{"lineNum":"   16","line":"#include <boost/fusion/sequence/intrinsic/begin.hpp>"},
{"lineNum":"   17","line":"#include <boost/fusion/sequence/intrinsic/end.hpp>"},
{"lineNum":"   18","line":"#include <boost/fusion/iterator/next.hpp>"},
{"lineNum":"   19","line":"#include <boost/fusion/iterator/deref.hpp>"},
{"lineNum":"   20","line":"#include <boost/fusion/container/list/nil.hpp>"},
{"lineNum":"   21","line":"#include <boost/fusion/container/list/cons_iterator.hpp>"},
{"lineNum":"   22","line":"#include <boost/fusion/container/list/detail/begin_impl.hpp>"},
{"lineNum":"   23","line":"#include <boost/fusion/container/list/detail/end_impl.hpp>"},
{"lineNum":"   24","line":"#include <boost/fusion/container/list/detail/at_impl.hpp>"},
{"lineNum":"   25","line":"#include <boost/fusion/container/list/detail/value_at_impl.hpp>"},
{"lineNum":"   26","line":"#include <boost/fusion/container/list/detail/empty_impl.hpp>"},
{"lineNum":"   27","line":"#include <boost/type_traits/is_convertible.hpp>"},
{"lineNum":"   28","line":"#include <boost/type_traits/is_base_of.hpp>"},
{"lineNum":"   29","line":"#include <boost/utility/enable_if.hpp>"},
{"lineNum":"   30","line":"#include <boost/fusion/support/sequence_base.hpp>"},
{"lineNum":"   31","line":"#include <boost/fusion/support/is_sequence.hpp>"},
{"lineNum":"   32","line":"#include <boost/mpl/int.hpp>"},
{"lineNum":"   33","line":"#include <boost/mpl/bool.hpp>"},
{"lineNum":"   34","line":"#include <boost/mpl/and.hpp>"},
{"lineNum":"   35","line":"#include <boost/mpl/not.hpp>"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"namespace boost { namespace fusion"},
{"lineNum":"   38","line":"{"},
{"lineNum":"   39","line":"    struct cons_tag;"},
{"lineNum":"   40","line":"    struct forward_traversal_tag;"},
{"lineNum":"   41","line":"    struct fusion_sequence_tag;"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"    template <typename Car, typename Cdr /*= nil_*/>"},
{"lineNum":"   44","line":"    struct cons : sequence_base<cons<Car, Cdr> >","class":"lineNoCov","hits":"0","possible_hits":"98",},
{"lineNum":"   45","line":"    {"},
{"lineNum":"   46","line":"        typedef mpl::int_<Cdr::size::value+1> size;"},
{"lineNum":"   47","line":"        typedef cons_tag fusion_tag;"},
{"lineNum":"   48","line":"        typedef fusion_sequence_tag tag; // this gets picked up by MPL"},
{"lineNum":"   49","line":"        typedef mpl::false_ is_view;"},
{"lineNum":"   50","line":"        typedef forward_traversal_tag category;"},
{"lineNum":"   51","line":"        typedef Car car_type;"},
{"lineNum":"   52","line":"        typedef Cdr cdr_type;"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"        BOOST_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"   55","line":"        cons()"},
{"lineNum":"   56","line":"            : car(), cdr() {}"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"        BOOST_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"   59","line":"        explicit cons(typename detail::call_param<Car>::type in_car)"},
{"lineNum":"   60","line":"            : car(in_car), cdr() {}","class":"lineNoCov","hits":"0","possible_hits":"91",},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"        BOOST_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"   63","line":"        cons("},
{"lineNum":"   64","line":"            typename detail::call_param<Car>::type in_car"},
{"lineNum":"   65","line":"          , typename detail::call_param<Cdr>::type in_cdr)"},
{"lineNum":"   66","line":"            : car(in_car), cdr(in_cdr) {}","class":"lineNoCov","hits":"0","possible_hits":"140",},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"        template <typename Car2, typename Cdr2>"},
{"lineNum":"   69","line":"        BOOST_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"   70","line":"        cons(cons<Car2, Cdr2> const& rhs)"},
{"lineNum":"   71","line":"            : car(rhs.car), cdr(rhs.cdr) {}"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"#if BOOST_WORKAROUND(BOOST_GCC, / 100 == 406) && !defined(BOOST_NO_CXX11_FUNCTION_TEMPLATE_DEFAULT_ARGS)"},
{"lineNum":"   74","line":"        // Workaround for `array used as initializer` compile error on gcc 4.6 w/ c++0x."},
{"lineNum":"   75","line":"        template <typename = void>"},
{"lineNum":"   76","line":"#endif"},
{"lineNum":"   77","line":"        BOOST_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"   78","line":"        cons(cons const& rhs)"},
{"lineNum":"   79","line":"            : car(rhs.car), cdr(rhs.cdr) {}","class":"lineNoCov","hits":"0","possible_hits":"256",},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"        template <typename Sequence>"},
{"lineNum":"   82","line":"        BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"   83","line":"        cons("},
{"lineNum":"   84","line":"            Sequence const& seq"},
{"lineNum":"   85","line":"          , typename boost::enable_if<"},
{"lineNum":"   86","line":"                mpl::and_<"},
{"lineNum":"   87","line":"                    traits::is_sequence<Sequence>"},
{"lineNum":"   88","line":"                  , mpl::not_<is_base_of<cons, Sequence> >"},
{"lineNum":"   89","line":"                  , mpl::not_<is_convertible<Sequence, Car> > > // use copy to car instead"},
{"lineNum":"   90","line":"              , detail::enabler_"},
{"lineNum":"   91","line":"            >::type = detail::enabler"},
{"lineNum":"   92","line":"        )"},
{"lineNum":"   93","line":"            : car(*fusion::begin(seq))"},
{"lineNum":"   94","line":"            , cdr(fusion::next(fusion::begin(seq)), mpl::true_()) {}"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"        template <typename Iterator>"},
{"lineNum":"   97","line":"        BOOST_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"   98","line":"        cons(Iterator const& iter, mpl::true_ /*this_is_an_iterator*/)"},
{"lineNum":"   99","line":"            : car(*iter)"},
{"lineNum":"  100","line":"            , cdr(fusion::next(iter), mpl::true_()) {}"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"        template <typename Car2, typename Cdr2>"},
{"lineNum":"  103","line":"        BOOST_CXX14_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"  104","line":"        cons& operator=(cons<Car2, Cdr2> const& rhs)"},
{"lineNum":"  105","line":"        {"},
{"lineNum":"  106","line":"            car = rhs.car;"},
{"lineNum":"  107","line":"            cdr = rhs.cdr;"},
{"lineNum":"  108","line":"            return *this;"},
{"lineNum":"  109","line":"        }"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"        BOOST_CXX14_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"  112","line":"        cons& operator=(cons const& rhs)"},
{"lineNum":"  113","line":"        {"},
{"lineNum":"  114","line":"            car = rhs.car;"},
{"lineNum":"  115","line":"            cdr = rhs.cdr;"},
{"lineNum":"  116","line":"            return *this;"},
{"lineNum":"  117","line":"        }"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"        template <typename Sequence>"},
{"lineNum":"  120","line":"        BOOST_CXX14_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"  121","line":"        typename boost::enable_if<"},
{"lineNum":"  122","line":"            mpl::and_<"},
{"lineNum":"  123","line":"                traits::is_sequence<Sequence>"},
{"lineNum":"  124","line":"              , mpl::not_<is_convertible<Sequence, Car> > >"},
{"lineNum":"  125","line":"          , cons&>::type"},
{"lineNum":"  126","line":"        operator=(Sequence const& seq)"},
{"lineNum":"  127","line":"        {"},
{"lineNum":"  128","line":"            typedef typename result_of::begin<Sequence const>::type Iterator;"},
{"lineNum":"  129","line":"            Iterator iter = fusion::begin(seq);"},
{"lineNum":"  130","line":"            this->assign_from_iter(iter);"},
{"lineNum":"  131","line":"            return *this;"},
{"lineNum":"  132","line":"        }"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"        template <typename Iterator>"},
{"lineNum":"  135","line":"        BOOST_CXX14_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"  136","line":"        void assign_from_iter(Iterator const& iter)"},
{"lineNum":"  137","line":"        {"},
{"lineNum":"  138","line":"            car = *iter;"},
{"lineNum":"  139","line":"            cdr.assign_from_iter(fusion::next(iter));"},
{"lineNum":"  140","line":"        }"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"        car_type car;"},
{"lineNum":"  143","line":"        cdr_type cdr;"},
{"lineNum":"  144","line":"    };"},
{"lineNum":"  145","line":"}}"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"#endif"},
{"lineNum":"  148","line":""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 4, "covered" : 0,};
var merged_data = [];
