var data = {lines:[
{"lineNum":"    1","line":"/*"},
{"lineNum":"    2","line":"//@HEADER"},
{"lineNum":"    3","line":"// ************************************************************************"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"//                        Kokkos v. 3.0"},
{"lineNum":"    6","line":"//       Copyright (2020) National Technology & Engineering"},
{"lineNum":"    7","line":"//               Solutions of Sandia, LLC (NTESS)."},
{"lineNum":"    8","line":"//"},
{"lineNum":"    9","line":"// Under the terms of Contract DE-NA0003525 with NTESS,"},
{"lineNum":"   10","line":"// the U.S. Government retains certain rights in this software."},
{"lineNum":"   11","line":"//"},
{"lineNum":"   12","line":"// Redistribution and use in source and binary forms, with or without"},
{"lineNum":"   13","line":"// modification, are permitted provided that the following conditions are"},
{"lineNum":"   14","line":"// met:"},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"// 1. Redistributions of source code must retain the above copyright"},
{"lineNum":"   17","line":"// notice, this list of conditions and the following disclaimer."},
{"lineNum":"   18","line":"//"},
{"lineNum":"   19","line":"// 2. Redistributions in binary form must reproduce the above copyright"},
{"lineNum":"   20","line":"// notice, this list of conditions and the following disclaimer in the"},
{"lineNum":"   21","line":"// documentation and/or other materials provided with the distribution."},
{"lineNum":"   22","line":"//"},
{"lineNum":"   23","line":"// 3. Neither the name of the Corporation nor the names of the"},
{"lineNum":"   24","line":"// contributors may be used to endorse or promote products derived from"},
{"lineNum":"   25","line":"// this software without specific prior written permission."},
{"lineNum":"   26","line":"//"},
{"lineNum":"   27","line":"// THIS SOFTWARE IS PROVIDED BY NTESS \"AS IS\" AND ANY"},
{"lineNum":"   28","line":"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"},
{"lineNum":"   29","line":"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR"},
{"lineNum":"   30","line":"// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NTESS OR THE"},
{"lineNum":"   31","line":"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,"},
{"lineNum":"   32","line":"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,"},
{"lineNum":"   33","line":"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR"},
{"lineNum":"   34","line":"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF"},
{"lineNum":"   35","line":"// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING"},
{"lineNum":"   36","line":"// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"},
{"lineNum":"   37","line":"// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   38","line":"//"},
{"lineNum":"   39","line":"// Questions? Contact Christian R. Trott (crtrott@sandia.gov)"},
{"lineNum":"   40","line":"//"},
{"lineNum":"   41","line":"// ************************************************************************"},
{"lineNum":"   42","line":"//@HEADER"},
{"lineNum":"   43","line":"*/"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"#include <Kokkos_Macros.hpp>"},
{"lineNum":"   46","line":"#if defined(KOKKOS_ENABLE_OPENMP)"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"#include <cstdio>"},
{"lineNum":"   49","line":"#include <cstdlib>"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"#include <limits>"},
{"lineNum":"   52","line":"#include <iostream>"},
{"lineNum":"   53","line":"#include <vector>"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"#include <Kokkos_Core.hpp>"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"#include <impl/Kokkos_Error.hpp>"},
{"lineNum":"   58","line":"#include <impl/Kokkos_CPUDiscovery.hpp>"},
{"lineNum":"   59","line":"#include <impl/Kokkos_Tools.hpp>"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"namespace Kokkos {"},
{"lineNum":"   62","line":"namespace Impl {"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"int g_openmp_hardware_max_threads = 1;"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"__thread int t_openmp_hardware_id            = 0;"},
{"lineNum":"   67","line":"__thread Impl::OpenMPExec *t_openmp_instance = nullptr;"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"void OpenMPExec::validate_partition(const int nthreads, int &num_partitions,"},
{"lineNum":"   70","line":"                                    int &partition_size) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   71","line":"  if (nthreads == 1) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   72","line":"    num_partitions = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   73","line":"    partition_size = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   74","line":"  } else if (num_partitions < 1 && partition_size < 1) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   75","line":"    int idle = nthreads;"},
{"lineNum":"   76","line":"    for (int np = 2; np <= nthreads; ++np) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   77","line":"      for (int ps = 1; ps <= nthreads / np; ++ps) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   78","line":"        if (nthreads - np * ps < idle) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   79","line":"          idle           = nthreads - np * ps;"},
{"lineNum":"   80","line":"          num_partitions = np;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   81","line":"          partition_size = ps;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   82","line":"        }"},
{"lineNum":"   83","line":"        if (idle == 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   84","line":"          break;"},
{"lineNum":"   85","line":"        }"},
{"lineNum":"   86","line":"      }"},
{"lineNum":"   87","line":"    }"},
{"lineNum":"   88","line":"  } else if (num_partitions < 1 && partition_size > 0) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   89","line":"    if (partition_size <= nthreads) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   90","line":"      num_partitions = nthreads / partition_size;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   91","line":"    } else {"},
{"lineNum":"   92","line":"      num_partitions = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   93","line":"      partition_size = nthreads;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   94","line":"    }"},
{"lineNum":"   95","line":"  } else if (num_partitions > 0 && partition_size < 1) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   96","line":"    if (num_partitions <= nthreads) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   97","line":"      partition_size = nthreads / num_partitions;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   98","line":"    } else {"},
{"lineNum":"   99","line":"      num_partitions = nthreads;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  100","line":"      partition_size = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  101","line":"    }"},
{"lineNum":"  102","line":"  } else if (num_partitions * partition_size > nthreads) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  103","line":"    int idle     = nthreads;"},
{"lineNum":"  104","line":"    const int NP = num_partitions;"},
{"lineNum":"  105","line":"    const int PS = partition_size;"},
{"lineNum":"  106","line":"    for (int np = NP; np > 0; --np) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  107","line":"      for (int ps = PS; ps > 0; --ps) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  108","line":"        if ((np * ps <= nthreads) && (nthreads - np * ps < idle)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  109","line":"          idle           = nthreads - np * ps;"},
{"lineNum":"  110","line":"          num_partitions = np;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  111","line":"          partition_size = ps;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  112","line":"        }"},
{"lineNum":"  113","line":"        if (idle == 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  114","line":"          break;"},
{"lineNum":"  115","line":"        }"},
{"lineNum":"  116","line":"      }"},
{"lineNum":"  117","line":"    }"},
{"lineNum":"  118","line":"  }"},
{"lineNum":"  119","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"void OpenMPExec::verify_is_master(const char *const label) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  122","line":"  if (!t_openmp_instance) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  123","line":"    std::string msg(label);"},
{"lineNum":"  124","line":"    msg.append(\" ERROR: in parallel or not initialized\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  125","line":"    Kokkos::Impl::throw_runtime_exception(msg);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  126","line":"  }"},
{"lineNum":"  127","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"}  // namespace Impl"},
{"lineNum":"  130","line":"}  // namespace Kokkos"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  133","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"namespace Kokkos {"},
{"lineNum":"  136","line":"namespace Impl {"},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"void OpenMPExec::clear_thread_data() {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  139","line":"  const size_t member_bytes ="},
{"lineNum":"  140","line":"      sizeof(int64_t) *"},
{"lineNum":"  141","line":"      HostThreadTeamData::align_to_int64(sizeof(HostThreadTeamData));"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"  const int old_alloc_bytes =","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  144","line":"      m_pool[0] ? (member_bytes + m_pool[0]->scratch_bytes()) : 0;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"  OpenMP::memory_space space;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"#pragma omp parallel num_threads(m_pool_size)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  149","line":"  {"},
{"lineNum":"  150","line":"    const int rank = omp_get_thread_num();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"    if (nullptr != m_pool[rank]) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  153","line":"      m_pool[rank]->disband_pool();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"      space.deallocate(m_pool[rank], old_alloc_bytes);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"      m_pool[rank] = nullptr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  158","line":"    }"},
{"lineNum":"  159","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  160","line":"  /* END #pragma omp parallel */"},
{"lineNum":"  161","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"void OpenMPExec::resize_thread_data(size_t pool_reduce_bytes,"},
{"lineNum":"  164","line":"                                    size_t team_reduce_bytes,"},
{"lineNum":"  165","line":"                                    size_t team_shared_bytes,"},
{"lineNum":"  166","line":"                                    size_t thread_local_bytes) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  167","line":"  const size_t member_bytes ="},
{"lineNum":"  168","line":"      sizeof(int64_t) *"},
{"lineNum":"  169","line":"      HostThreadTeamData::align_to_int64(sizeof(HostThreadTeamData));"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"  HostThreadTeamData *root = m_pool[0];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"  const size_t old_pool_reduce  = root ? root->pool_reduce_bytes() : 0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  174","line":"  const size_t old_team_reduce  = root ? root->team_reduce_bytes() : 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  175","line":"  const size_t old_team_shared  = root ? root->team_shared_bytes() : 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  176","line":"  const size_t old_thread_local = root ? root->thread_local_bytes() : 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  177","line":"  const size_t old_alloc_bytes =","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  178","line":"      root ? (member_bytes + root->scratch_bytes()) : 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"  // Allocate if any of the old allocation is tool small:"},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"  const bool allocate = (old_pool_reduce < pool_reduce_bytes) ||","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  183","line":"                        (old_team_reduce < team_reduce_bytes) ||"},
{"lineNum":"  184","line":"                        (old_team_shared < team_shared_bytes) ||"},
{"lineNum":"  185","line":"                        (old_thread_local < thread_local_bytes);"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"  if (allocate) {"},
{"lineNum":"  188","line":"    if (pool_reduce_bytes < old_pool_reduce) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  189","line":"      pool_reduce_bytes = old_pool_reduce;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  190","line":"    }"},
{"lineNum":"  191","line":"    if (team_reduce_bytes < old_team_reduce) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  192","line":"      team_reduce_bytes = old_team_reduce;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  193","line":"    }"},
{"lineNum":"  194","line":"    if (team_shared_bytes < old_team_shared) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  195","line":"      team_shared_bytes = old_team_shared;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  196","line":"    }"},
{"lineNum":"  197","line":"    if (thread_local_bytes < old_thread_local) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  198","line":"      thread_local_bytes = old_thread_local;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  199","line":"    }"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"    const size_t alloc_bytes =","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  202","line":"        member_bytes +","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  203","line":"        HostThreadTeamData::scratch_size(pool_reduce_bytes, team_reduce_bytes,"},
{"lineNum":"  204","line":"                                         team_shared_bytes, thread_local_bytes);"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"    OpenMP::memory_space space;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"    memory_fence();"},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"#pragma omp parallel num_threads(m_pool_size)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  211","line":"    {"},
{"lineNum":"  212","line":"      const int rank = omp_get_thread_num();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"      if (nullptr != m_pool[rank]) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  215","line":"        m_pool[rank]->disband_pool();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"        space.deallocate(m_pool[rank], old_alloc_bytes);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  218","line":"      }"},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"      void *ptr = nullptr;"},
{"lineNum":"  221","line":"      try {"},
{"lineNum":"  222","line":"        ptr = space.allocate(alloc_bytes);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  223","line":"      } catch (","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  224","line":"          Kokkos::Experimental::RawMemoryAllocationFailure const &failure) {"},
{"lineNum":"  225","line":"        // For now, just rethrow the error message the existing way"},
{"lineNum":"  226","line":"        Kokkos::Impl::throw_runtime_exception(failure.get_error_message());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  227","line":"      }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"      m_pool[rank] = new (ptr) HostThreadTeamData();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"      m_pool[rank]->scratch_assign(((char *)ptr) + member_bytes, alloc_bytes,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  232","line":"                                   pool_reduce_bytes, team_reduce_bytes,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  233","line":"                                   team_shared_bytes, thread_local_bytes);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"      memory_fence();"},
{"lineNum":"  236","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  237","line":"    /* END #pragma omp parallel */"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"    HostThreadTeamData::organize_pool(m_pool, m_pool_size);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  240","line":"  }"},
{"lineNum":"  241","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"}  // namespace Impl"},
{"lineNum":"  244","line":"}  // namespace Kokkos"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  247","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"namespace Kokkos {"},
{"lineNum":"  250","line":""},
{"lineNum":"  251","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  252","line":""},
{"lineNum":"  253","line":"int OpenMP::impl_get_current_max_threads() noexcept {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  254","line":"  // Using omp_get_max_threads(); is problematic in conjunction with"},
{"lineNum":"  255","line":"  // Hwloc on Intel (essentially an initial call to the OpenMP runtime"},
{"lineNum":"  256","line":"  // without a parallel region before will set a process mask for a single core"},
{"lineNum":"  257","line":"  // The runtime will than bind threads for a parallel region to other cores on"},
{"lineNum":"  258","line":"  // the entering the first parallel region and make the process mask the"},
{"lineNum":"  259","line":"  // aggregate of the thread masks. The intend seems to be to make serial code"},
{"lineNum":"  260","line":"  // run fast, if you compile with OpenMP enabled but don\'t actually use"},
{"lineNum":"  261","line":"  // parallel regions or so static int omp_max_threads = omp_get_max_threads();"},
{"lineNum":"  262","line":""},
{"lineNum":"  263","line":"  int count = 0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  264","line":"#pragma omp parallel","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  265","line":"  {"},
{"lineNum":"  266","line":"#pragma omp atomic"},
{"lineNum":"  267","line":"    ++count;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  268","line":"  }"},
{"lineNum":"  269","line":"  return count;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  270","line":"}"},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"void OpenMP::impl_initialize(int thread_count) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  273","line":"  if (omp_in_parallel()) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  274","line":"    std::string msg(\"Kokkos::OpenMP::initialize ERROR : in parallel\");"},
{"lineNum":"  275","line":"    Kokkos::Impl::throw_runtime_exception(msg);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  276","line":"  }"},
{"lineNum":"  277","line":""},
{"lineNum":"  278","line":"  if (Impl::t_openmp_instance) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  279","line":"    finalize();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  280","line":"  }"},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"  {"},
{"lineNum":"  283","line":"    if (Kokkos::show_warnings() && nullptr == std::getenv(\"OMP_PROC_BIND\")) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  284","line":"      printf(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  285","line":"          \"Kokkos::OpenMP::initialize WARNING: OMP_PROC_BIND environment \""},
{"lineNum":"  286","line":"          \"variable not set\\n\");"},
{"lineNum":"  287","line":"      printf(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  288","line":"          \"  In general, for best performance with OpenMP 4.0 or better set \""},
{"lineNum":"  289","line":"          \"OMP_PROC_BIND=spread and OMP_PLACES=threads\\n\");"},
{"lineNum":"  290","line":"      printf(\"  For best performance with OpenMP 3.1 set OMP_PROC_BIND=true\\n\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  291","line":"      printf(\"  For unit testing set OMP_PROC_BIND=false\\n\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  292","line":"    }"},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"    OpenMP::memory_space space;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  295","line":""},
{"lineNum":"  296","line":"    // Before any other call to OMP query the maximum number of threads"},
{"lineNum":"  297","line":"    // and save the value for re-initialization unit testing."},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"    Impl::g_openmp_hardware_max_threads = impl_get_current_max_threads();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"    int process_num_threads = Impl::g_openmp_hardware_max_threads;"},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"    if (Kokkos::hwloc::available()) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  304","line":"      process_num_threads = Kokkos::hwloc::get_available_numa_count() *","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  305","line":"                            Kokkos::hwloc::get_available_cores_per_numa() *","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  306","line":"                            Kokkos::hwloc::get_available_threads_per_core();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  307","line":"    }"},
{"lineNum":"  308","line":""},
{"lineNum":"  309","line":"    // if thread_count  < 0, use g_openmp_hardware_max_threads;"},
{"lineNum":"  310","line":"    // if thread_count == 0, set g_openmp_hardware_max_threads to"},
{"lineNum":"  311","line":"    // process_num_threads if thread_count  > 0, set"},
{"lineNum":"  312","line":"    // g_openmp_hardware_max_threads to thread_count"},
{"lineNum":"  313","line":"    if (thread_count < 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  314","line":"      thread_count = Impl::g_openmp_hardware_max_threads;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  315","line":"    } else if (thread_count == 0 &&","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  316","line":"               Impl::g_openmp_hardware_max_threads != process_num_threads) {"},
{"lineNum":"  317","line":"      Impl::g_openmp_hardware_max_threads = process_num_threads;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  318","line":"      omp_set_num_threads(Impl::g_openmp_hardware_max_threads);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  319","line":"    } else {"},
{"lineNum":"  320","line":"      if (Kokkos::show_warnings() && thread_count > process_num_threads) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  321","line":"        printf(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  322","line":"            \"Kokkos::OpenMP::initialize WARNING: You are likely \""},
{"lineNum":"  323","line":"            \"oversubscribing your CPU cores.\\n\");"},
{"lineNum":"  324","line":"        printf(\"  process threads available : %3d,  requested thread : %3d\\n\",","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  325","line":"               process_num_threads, thread_count);"},
{"lineNum":"  326","line":"      }"},
{"lineNum":"  327","line":"      Impl::g_openmp_hardware_max_threads = thread_count;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  328","line":"      omp_set_num_threads(Impl::g_openmp_hardware_max_threads);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  329","line":"    }"},
{"lineNum":"  330","line":""},
{"lineNum":"  331","line":"// setup thread local"},
{"lineNum":"  332","line":"#pragma omp parallel num_threads(Impl::g_openmp_hardware_max_threads)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  333","line":"    {"},
{"lineNum":"  334","line":"      Impl::t_openmp_instance    = nullptr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  335","line":"      Impl::t_openmp_hardware_id = omp_get_thread_num();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  336","line":"      Impl::SharedAllocationRecord<void, void>::tracking_enable();"},
{"lineNum":"  337","line":"    }"},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"    void *ptr = nullptr;"},
{"lineNum":"  340","line":"    try {"},
{"lineNum":"  341","line":"      ptr = space.allocate(sizeof(Impl::OpenMPExec));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  342","line":"    } catch (Kokkos::Experimental::RawMemoryAllocationFailure const &f) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  343","line":"      // For now, just rethrow the error message the existing way"},
{"lineNum":"  344","line":"      Kokkos::Impl::throw_runtime_exception(f.get_error_message());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  345","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"    Impl::t_openmp_instance =","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  348","line":"        new (ptr) Impl::OpenMPExec(Impl::g_openmp_hardware_max_threads);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  349","line":""},
{"lineNum":"  350","line":"    // New, unified host thread team data:"},
{"lineNum":"  351","line":"    {"},
{"lineNum":"  352","line":"      size_t pool_reduce_bytes  = 32 * thread_count;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  353","line":"      size_t team_reduce_bytes  = 32 * thread_count;"},
{"lineNum":"  354","line":"      size_t team_shared_bytes  = 1024 * thread_count;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  355","line":"      size_t thread_local_bytes = 1024;"},
{"lineNum":"  356","line":""},
{"lineNum":"  357","line":"      Impl::t_openmp_instance->resize_thread_data(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  358","line":"          pool_reduce_bytes, team_reduce_bytes, team_shared_bytes,"},
{"lineNum":"  359","line":"          thread_local_bytes);"},
{"lineNum":"  360","line":"    }"},
{"lineNum":"  361","line":"  }"},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"  // Check for over-subscription"},
{"lineNum":"  364","line":"  if (Kokkos::show_warnings() &&","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  365","line":"      (Impl::mpi_ranks_per_node() * long(thread_count) >","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  366","line":"       Impl::processors_per_node())) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  367","line":"    std::cerr << \"Kokkos::OpenMP::initialize WARNING: You are likely \""},
{"lineNum":"  368","line":"                 \"oversubscribing your CPU cores.\""},
{"lineNum":"  369","line":"              << std::endl;"},
{"lineNum":"  370","line":"    std::cerr << \"                                    Detected: \""},
{"lineNum":"  371","line":"              << Impl::processors_per_node() << \" cores per node.\" << std::endl;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  372","line":"    std::cerr << \"                                    Detected: \""},
{"lineNum":"  373","line":"              << Impl::mpi_ranks_per_node() << \" MPI_ranks per node.\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  374","line":"              << std::endl;"},
{"lineNum":"  375","line":"    std::cerr << \"                                    Requested: \""},
{"lineNum":"  376","line":"              << thread_count << \" threads per process.\" << std::endl;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  377","line":"  }"},
{"lineNum":"  378","line":"  // Init the array for used for arbitrarily sized atomics"},
{"lineNum":"  379","line":"  Impl::init_lock_array_host_space();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  380","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  381","line":""},
{"lineNum":"  382","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  383","line":""},
{"lineNum":"  384","line":"void OpenMP::impl_finalize() {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  385","line":"  if (omp_in_parallel()) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  386","line":"    std::string msg(\"Kokkos::OpenMP::finalize ERROR \");"},
{"lineNum":"  387","line":"    if (!Impl::t_openmp_instance) msg.append(\": not initialized\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  388","line":"    if (omp_in_parallel()) msg.append(\": in parallel\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  389","line":"    Kokkos::Impl::throw_runtime_exception(msg);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  390","line":"  }"},
{"lineNum":"  391","line":""},
{"lineNum":"  392","line":"  if (Impl::t_openmp_instance) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  393","line":"    // Silence Cuda Warning"},
{"lineNum":"  394","line":"    const int nthreads = Impl::t_openmp_instance->m_pool_size <=","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  395","line":"                                 Impl::g_openmp_hardware_max_threads","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  396","line":"                             ? Impl::g_openmp_hardware_max_threads"},
{"lineNum":"  397","line":"                             : Impl::t_openmp_instance->m_pool_size;"},
{"lineNum":"  398","line":"    (void)nthreads;"},
{"lineNum":"  399","line":""},
{"lineNum":"  400","line":"    using Exec     = Impl::OpenMPExec;"},
{"lineNum":"  401","line":"    Exec *instance = Impl::t_openmp_instance;"},
{"lineNum":"  402","line":"    instance->~Exec();"},
{"lineNum":"  403","line":""},
{"lineNum":"  404","line":"    OpenMP::memory_space space;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  405","line":"    space.deallocate(instance, sizeof(Exec));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  406","line":""},
{"lineNum":"  407","line":"#pragma omp parallel num_threads(nthreads)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  408","line":"    {"},
{"lineNum":"  409","line":"      Impl::t_openmp_hardware_id = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  410","line":"      Impl::t_openmp_instance    = nullptr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  411","line":"      Impl::SharedAllocationRecord<void, void>::tracking_disable();"},
{"lineNum":"  412","line":"    }"},
{"lineNum":"  413","line":""},
{"lineNum":"  414","line":"    // allow main thread to track"},
{"lineNum":"  415","line":"    Impl::SharedAllocationRecord<void, void>::tracking_enable();"},
{"lineNum":"  416","line":""},
{"lineNum":"  417","line":"    Impl::g_openmp_hardware_max_threads = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  418","line":"  }"},
{"lineNum":"  419","line":""},
{"lineNum":"  420","line":"  Kokkos::Profiling::finalize();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  421","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  422","line":""},
{"lineNum":"  423","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  424","line":""},
{"lineNum":"  425","line":"void OpenMP::print_configuration(std::ostream &s, const bool /*verbose*/) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  426","line":"  s << \"Kokkos::OpenMP\";"},
{"lineNum":"  427","line":""},
{"lineNum":"  428","line":"  const bool is_initialized = Impl::t_openmp_instance != nullptr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":"  if (is_initialized) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  431","line":"    Impl::OpenMPExec::verify_is_master(\"OpenMP::print_configuration\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  432","line":""},
{"lineNum":"  433","line":"    const int numa_count      = 1;"},
{"lineNum":"  434","line":"    const int core_per_numa   = Impl::g_openmp_hardware_max_threads;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  435","line":"    const int thread_per_core = 1;"},
{"lineNum":"  436","line":""},
{"lineNum":"  437","line":"    s << \" thread_pool_topology[ \" << numa_count << \" x \" << core_per_numa","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  438","line":"      << \" x \" << thread_per_core << \" ]\" << std::endl;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  439","line":"  } else {"},
{"lineNum":"  440","line":"    s << \" not initialized\" << std::endl;"},
{"lineNum":"  441","line":"  }"},
{"lineNum":"  442","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  443","line":""},
{"lineNum":"  444","line":"std::vector<OpenMP> OpenMP::partition(...) { return std::vector<OpenMP>(1); }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  445","line":""},
{"lineNum":"  446","line":"OpenMP OpenMP::create_instance(...) { return OpenMP(); }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  447","line":""},
{"lineNum":"  448","line":"int OpenMP::concurrency() { return Impl::g_openmp_hardware_max_threads; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  449","line":""},
{"lineNum":"  450","line":"void OpenMP::fence() const {}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  451","line":""},
{"lineNum":"  452","line":"namespace Impl {"},
{"lineNum":"  453","line":""},
{"lineNum":"  454","line":"int g_openmp_space_factory_initialized ="},
{"lineNum":"  455","line":"    initialize_space_factory<OpenMPSpaceInitializer>(\"050_OpenMP\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  456","line":""},
{"lineNum":"  457","line":"void OpenMPSpaceInitializer::initialize(const InitArguments &args) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  458","line":"  // Prevent \"unused variable\" warning for \'args\' input struct.  If"},
{"lineNum":"  459","line":"  // Serial::initialize() ever needs to take arguments from the input"},
{"lineNum":"  460","line":"  // struct, you may remove this line of code."},
{"lineNum":"  461","line":"  const int num_threads = args.num_threads;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  462","line":""},
{"lineNum":"  463","line":"  if (std::is_same<Kokkos::OpenMP, Kokkos::DefaultExecutionSpace>::value ||"},
{"lineNum":"  464","line":"      std::is_same<Kokkos::OpenMP, Kokkos::HostSpace::execution_space>::value) {"},
{"lineNum":"  465","line":"    Kokkos::OpenMP::impl_initialize(num_threads);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  466","line":"  } else {"},
{"lineNum":"  467","line":"    // std::cout << \"Kokkos::initialize() fyi: OpenMP enabled but not"},
{"lineNum":"  468","line":"    // initialized\" << std::endl ;"},
{"lineNum":"  469","line":"  }"},
{"lineNum":"  470","line":"}"},
{"lineNum":"  471","line":""},
{"lineNum":"  472","line":"void OpenMPSpaceInitializer::finalize(const bool) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  473","line":"  if (Kokkos::OpenMP::impl_is_initialized()) Kokkos::OpenMP::impl_finalize();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  474","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  475","line":""},
{"lineNum":"  476","line":"void OpenMPSpaceInitializer::fence() { Kokkos::OpenMP::impl_static_fence(); }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  477","line":""},
{"lineNum":"  478","line":"void OpenMPSpaceInitializer::print_configuration(std::ostream &msg,"},
{"lineNum":"  479","line":"                                                 const bool detail) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  480","line":"  msg << \"Host Parallel Execution Space:\" << std::endl;"},
{"lineNum":"  481","line":"  msg << \"  KOKKOS_ENABLE_OPENMP: \";"},
{"lineNum":"  482","line":"  msg << \"yes\" << std::endl;"},
{"lineNum":"  483","line":""},
{"lineNum":"  484","line":"  msg << \"OpenMP Atomics:\" << std::endl;"},
{"lineNum":"  485","line":"  msg << \"  KOKKOS_ENABLE_OPENMP_ATOMICS: \";"},
{"lineNum":"  486","line":"#ifdef KOKKOS_ENABLE_OPENMP_ATOMICS"},
{"lineNum":"  487","line":"  msg << \"yes\" << std::endl;"},
{"lineNum":"  488","line":"#else"},
{"lineNum":"  489","line":"  msg << \"no\" << std::endl;"},
{"lineNum":"  490","line":"#endif"},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"  msg << \"\\nOpenMP Runtime Configuration:\" << std::endl;"},
{"lineNum":"  493","line":"  OpenMP::print_configuration(msg, detail);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  494","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  495","line":""},
{"lineNum":"  496","line":"}  // namespace Impl"},
{"lineNum":"  497","line":"}  // namespace Kokkos"},
{"lineNum":"  498","line":""},
{"lineNum":"  499","line":"#else"},
{"lineNum":"  500","line":"void KOKKOS_CORE_SRC_OPENMP_EXEC_PREVENT_LINK_ERROR() {}"},
{"lineNum":"  501","line":"#endif  // KOKKOS_ENABLE_OPENMP"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 172, "covered" : 0,};
var merged_data = [];
