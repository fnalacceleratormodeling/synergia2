var data = {lines:[
{"lineNum":"    1","line":"#ifndef BOOST_SMART_PTR_SHARED_PTR_HPP_INCLUDED"},
{"lineNum":"    2","line":"#define BOOST_SMART_PTR_SHARED_PTR_HPP_INCLUDED"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"//  shared_ptr.hpp"},
{"lineNum":"    6","line":"//"},
{"lineNum":"    7","line":"//  (C) Copyright Greg Colvin and Beman Dawes 1998, 1999."},
{"lineNum":"    8","line":"//  Copyright (c) 2001-2008 Peter Dimov"},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"//  Distributed under the Boost Software License, Version 1.0. (See"},
{"lineNum":"   11","line":"//  accompanying file LICENSE_1_0.txt or copy at"},
{"lineNum":"   12","line":"//  http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"   13","line":"//"},
{"lineNum":"   14","line":"//  See http://www.boost.org/libs/smart_ptr/ for documentation."},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"#include <boost/config.hpp>   // for broken compiler workarounds"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"// In order to avoid circular dependencies with Boost.TR1"},
{"lineNum":"   20","line":"// we make sure that our include of <memory> doesn\'t try to"},
{"lineNum":"   21","line":"// pull in the TR1 headers: that\'s why we use this header"},
{"lineNum":"   22","line":"// rather than including <memory> directly:"},
{"lineNum":"   23","line":"#include <boost/config/no_tr1/memory.hpp>  // std::auto_ptr"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"#include <boost/assert.hpp>"},
{"lineNum":"   26","line":"#include <boost/checked_delete.hpp>"},
{"lineNum":"   27","line":"#include <boost/throw_exception.hpp>"},
{"lineNum":"   28","line":"#include <boost/smart_ptr/detail/shared_count.hpp>"},
{"lineNum":"   29","line":"#include <boost/detail/workaround.hpp>"},
{"lineNum":"   30","line":"#include <boost/smart_ptr/detail/sp_convertible.hpp>"},
{"lineNum":"   31","line":"#include <boost/smart_ptr/detail/sp_nullptr_t.hpp>"},
{"lineNum":"   32","line":"#include <boost/smart_ptr/detail/sp_disable_deprecated.hpp>"},
{"lineNum":"   33","line":"#include <boost/smart_ptr/detail/sp_noexcept.hpp>"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"#if !defined(BOOST_SP_NO_ATOMIC_ACCESS)"},
{"lineNum":"   36","line":"#include <boost/smart_ptr/detail/spinlock_pool.hpp>"},
{"lineNum":"   37","line":"#endif"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"#include <algorithm>            // for std::swap"},
{"lineNum":"   40","line":"#include <functional>           // for std::less"},
{"lineNum":"   41","line":"#include <typeinfo>             // for std::bad_cast"},
{"lineNum":"   42","line":"#include <cstddef>              // for std::size_t"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"#if !defined(BOOST_NO_IOSTREAM)"},
{"lineNum":"   45","line":"#if !defined(BOOST_NO_IOSFWD)"},
{"lineNum":"   46","line":"#include <iosfwd>               // for std::basic_ostream"},
{"lineNum":"   47","line":"#else"},
{"lineNum":"   48","line":"#include <ostream>"},
{"lineNum":"   49","line":"#endif"},
{"lineNum":"   50","line":"#endif"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"#if defined( BOOST_SP_DISABLE_DEPRECATED )"},
{"lineNum":"   53","line":"#pragma GCC diagnostic push"},
{"lineNum":"   54","line":"#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\""},
{"lineNum":"   55","line":"#endif"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"namespace boost"},
{"lineNum":"   58","line":"{"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"template<class T> class shared_ptr;"},
{"lineNum":"   61","line":"template<class T> class weak_ptr;"},
{"lineNum":"   62","line":"template<class T> class enable_shared_from_this;"},
{"lineNum":"   63","line":"class enable_shared_from_raw;"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"namespace movelib"},
{"lineNum":"   66","line":"{"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"    template< class T, class D > class unique_ptr;"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"} // namespace movelib"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"namespace detail"},
{"lineNum":"   73","line":"{"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"// sp_element, element_type"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"template< class T > struct sp_element"},
{"lineNum":"   78","line":"{"},
{"lineNum":"   79","line":"    typedef T type;"},
{"lineNum":"   80","line":"};"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"#if !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"template< class T > struct sp_element< T[] >"},
{"lineNum":"   85","line":"{"},
{"lineNum":"   86","line":"    typedef T type;"},
{"lineNum":"   87","line":"};"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"#if !defined( __BORLANDC__ ) || !BOOST_WORKAROUND( __BORLANDC__, < 0x600 )"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"template< class T, std::size_t N > struct sp_element< T[N] >"},
{"lineNum":"   92","line":"{"},
{"lineNum":"   93","line":"    typedef T type;"},
{"lineNum":"   94","line":"};"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"#endif"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"#endif // !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"// sp_dereference, return type of operator*"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"template< class T > struct sp_dereference"},
{"lineNum":"  103","line":"{"},
{"lineNum":"  104","line":"    typedef T & type;"},
{"lineNum":"  105","line":"};"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"template<> struct sp_dereference< void >"},
{"lineNum":"  108","line":"{"},
{"lineNum":"  109","line":"    typedef void type;"},
{"lineNum":"  110","line":"};"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"#if !defined(BOOST_NO_CV_VOID_SPECIALIZATIONS)"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"template<> struct sp_dereference< void const >"},
{"lineNum":"  115","line":"{"},
{"lineNum":"  116","line":"    typedef void type;"},
{"lineNum":"  117","line":"};"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"template<> struct sp_dereference< void volatile >"},
{"lineNum":"  120","line":"{"},
{"lineNum":"  121","line":"    typedef void type;"},
{"lineNum":"  122","line":"};"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"template<> struct sp_dereference< void const volatile >"},
{"lineNum":"  125","line":"{"},
{"lineNum":"  126","line":"    typedef void type;"},
{"lineNum":"  127","line":"};"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"#endif // !defined(BOOST_NO_CV_VOID_SPECIALIZATIONS)"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"#if !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"template< class T > struct sp_dereference< T[] >"},
{"lineNum":"  134","line":"{"},
{"lineNum":"  135","line":"    typedef void type;"},
{"lineNum":"  136","line":"};"},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"#if !defined( __BORLANDC__ ) || !BOOST_WORKAROUND( __BORLANDC__, < 0x600 )"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"template< class T, std::size_t N > struct sp_dereference< T[N] >"},
{"lineNum":"  141","line":"{"},
{"lineNum":"  142","line":"    typedef void type;"},
{"lineNum":"  143","line":"};"},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"#endif"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"#endif // !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"// sp_member_access, return type of operator->"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"template< class T > struct sp_member_access"},
{"lineNum":"  152","line":"{"},
{"lineNum":"  153","line":"    typedef T * type;"},
{"lineNum":"  154","line":"};"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"#if !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"template< class T > struct sp_member_access< T[] >"},
{"lineNum":"  159","line":"{"},
{"lineNum":"  160","line":"    typedef void type;"},
{"lineNum":"  161","line":"};"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"#if !defined( __BORLANDC__ ) || !BOOST_WORKAROUND( __BORLANDC__, < 0x600 )"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"template< class T, std::size_t N > struct sp_member_access< T[N] >"},
{"lineNum":"  166","line":"{"},
{"lineNum":"  167","line":"    typedef void type;"},
{"lineNum":"  168","line":"};"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"#endif"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"#endif // !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )"},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"// sp_array_access, return type of operator[]"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"template< class T > struct sp_array_access"},
{"lineNum":"  177","line":"{"},
{"lineNum":"  178","line":"    typedef void type;"},
{"lineNum":"  179","line":"};"},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"#if !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"template< class T > struct sp_array_access< T[] >"},
{"lineNum":"  184","line":"{"},
{"lineNum":"  185","line":"    typedef T & type;"},
{"lineNum":"  186","line":"};"},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"#if !defined( __BORLANDC__ ) || !BOOST_WORKAROUND( __BORLANDC__, < 0x600 )"},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"template< class T, std::size_t N > struct sp_array_access< T[N] >"},
{"lineNum":"  191","line":"{"},
{"lineNum":"  192","line":"    typedef T & type;"},
{"lineNum":"  193","line":"};"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"#endif"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"#endif // !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )"},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"// sp_extent, for operator[] index check"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"template< class T > struct sp_extent"},
{"lineNum":"  202","line":"{"},
{"lineNum":"  203","line":"    enum _vt { value = 0 };"},
{"lineNum":"  204","line":"};"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"#if !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"template< class T, std::size_t N > struct sp_extent< T[N] >"},
{"lineNum":"  209","line":"{"},
{"lineNum":"  210","line":"    enum _vt { value = N };"},
{"lineNum":"  211","line":"};"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"#endif // !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )"},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"// enable_shared_from_this support"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"template< class X, class Y, class T > inline void sp_enable_shared_from_this( boost::shared_ptr<X> const * ppx, Y const * py, boost::enable_shared_from_this< T > const * pe )"},
{"lineNum":"  218","line":"{"},
{"lineNum":"  219","line":"    if( pe != 0 )"},
{"lineNum":"  220","line":"    {"},
{"lineNum":"  221","line":"        pe->_internal_accept_owner( ppx, const_cast< Y* >( py ) );"},
{"lineNum":"  222","line":"    }"},
{"lineNum":"  223","line":"}"},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"template< class X, class Y > inline void sp_enable_shared_from_this( boost::shared_ptr<X> * ppx, Y const * py, boost::enable_shared_from_raw const * pe );"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"#ifdef _MANAGED"},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"// Avoid C4793, ... causes native code generation"},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"struct sp_any_pointer"},
{"lineNum":"  232","line":"{"},
{"lineNum":"  233","line":"    template<class T> sp_any_pointer( T* ) {}"},
{"lineNum":"  234","line":"};"},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":"inline void sp_enable_shared_from_this( sp_any_pointer, sp_any_pointer, sp_any_pointer )"},
{"lineNum":"  237","line":"{"},
{"lineNum":"  238","line":"}"},
{"lineNum":"  239","line":""},
{"lineNum":"  240","line":"#else // _MANAGED"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"inline void sp_enable_shared_from_this( ... )"},
{"lineNum":"  243","line":"{"},
{"lineNum":"  244","line":"}"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"#endif // _MANAGED"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"#if !defined( BOOST_NO_SFINAE ) && !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION ) && !defined( BOOST_NO_AUTO_PTR )"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"// rvalue auto_ptr support based on a technique by Dave Abrahams"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"template< class T, class R > struct sp_enable_if_auto_ptr"},
{"lineNum":"  253","line":"{"},
{"lineNum":"  254","line":"};"},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"template< class T, class R > struct sp_enable_if_auto_ptr< std::auto_ptr< T >, R >"},
{"lineNum":"  257","line":"{"},
{"lineNum":"  258","line":"    typedef R type;"},
{"lineNum":"  259","line":"};"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"#endif"},
{"lineNum":"  262","line":""},
{"lineNum":"  263","line":"// sp_assert_convertible"},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"template< class Y, class T > inline void sp_assert_convertible() BOOST_SP_NOEXCEPT"},
{"lineNum":"  266","line":"{"},
{"lineNum":"  267","line":"#if !defined( BOOST_SP_NO_SP_CONVERTIBLE )"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"    // static_assert( sp_convertible< Y, T >::value );"},
{"lineNum":"  270","line":"    typedef char tmp[ sp_convertible< Y, T >::value? 1: -1 ];"},
{"lineNum":"  271","line":"    (void)sizeof( tmp );"},
{"lineNum":"  272","line":""},
{"lineNum":"  273","line":"#else"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"    T* p = static_cast< Y* >( 0 );"},
{"lineNum":"  276","line":"    (void)p;"},
{"lineNum":"  277","line":""},
{"lineNum":"  278","line":"#endif"},
{"lineNum":"  279","line":"}"},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"// pointer constructor helper"},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"template< class T, class Y > inline void sp_pointer_construct( boost::shared_ptr< T > * ppx, Y * p, boost::detail::shared_count & pn )"},
{"lineNum":"  284","line":"{","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  285","line":"    boost::detail::shared_count( p ).swap( pn );"},
{"lineNum":"  286","line":"    boost::detail::sp_enable_shared_from_this( ppx, p, p );"},
{"lineNum":"  287","line":"}","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"#if !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )"},
{"lineNum":"  290","line":""},
{"lineNum":"  291","line":"template< class T, class Y > inline void sp_pointer_construct( boost::shared_ptr< T[] > * /*ppx*/, Y * p, boost::detail::shared_count & pn )"},
{"lineNum":"  292","line":"{"},
{"lineNum":"  293","line":"    sp_assert_convertible< Y[], T[] >();"},
{"lineNum":"  294","line":"    boost::detail::shared_count( p, boost::checked_array_deleter< T >() ).swap( pn );"},
{"lineNum":"  295","line":"}"},
{"lineNum":"  296","line":""},
{"lineNum":"  297","line":"template< class T, std::size_t N, class Y > inline void sp_pointer_construct( boost::shared_ptr< T[N] > * /*ppx*/, Y * p, boost::detail::shared_count & pn )"},
{"lineNum":"  298","line":"{"},
{"lineNum":"  299","line":"    sp_assert_convertible< Y[N], T[N] >();"},
{"lineNum":"  300","line":"    boost::detail::shared_count( p, boost::checked_array_deleter< T >() ).swap( pn );"},
{"lineNum":"  301","line":"}"},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"#endif // !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )"},
{"lineNum":"  304","line":""},
{"lineNum":"  305","line":"// deleter constructor helper"},
{"lineNum":"  306","line":""},
{"lineNum":"  307","line":"template< class T, class Y > inline void sp_deleter_construct( boost::shared_ptr< T > * ppx, Y * p )"},
{"lineNum":"  308","line":"{"},
{"lineNum":"  309","line":"    boost::detail::sp_enable_shared_from_this( ppx, p, p );"},
{"lineNum":"  310","line":"}"},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":"#if !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )"},
{"lineNum":"  313","line":""},
{"lineNum":"  314","line":"template< class T, class Y > inline void sp_deleter_construct( boost::shared_ptr< T[] > * /*ppx*/, Y * /*p*/ )"},
{"lineNum":"  315","line":"{"},
{"lineNum":"  316","line":"    sp_assert_convertible< Y[], T[] >();"},
{"lineNum":"  317","line":"}"},
{"lineNum":"  318","line":""},
{"lineNum":"  319","line":"template< class T, std::size_t N, class Y > inline void sp_deleter_construct( boost::shared_ptr< T[N] > * /*ppx*/, Y * /*p*/ )"},
{"lineNum":"  320","line":"{"},
{"lineNum":"  321","line":"    sp_assert_convertible< Y[N], T[N] >();"},
{"lineNum":"  322","line":"}"},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"#endif // !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )"},
{"lineNum":"  325","line":""},
{"lineNum":"  326","line":"struct sp_internal_constructor_tag"},
{"lineNum":"  327","line":"{"},
{"lineNum":"  328","line":"};"},
{"lineNum":"  329","line":""},
{"lineNum":"  330","line":"} // namespace detail"},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":""},
{"lineNum":"  333","line":"//"},
{"lineNum":"  334","line":"//  shared_ptr"},
{"lineNum":"  335","line":"//"},
{"lineNum":"  336","line":"//  An enhanced relative of scoped_ptr with reference counted copy semantics."},
{"lineNum":"  337","line":"//  The object pointed to is deleted when the last shared_ptr pointing to it"},
{"lineNum":"  338","line":"//  is destroyed or reset."},
{"lineNum":"  339","line":"//"},
{"lineNum":"  340","line":""},
{"lineNum":"  341","line":"template<class T> class shared_ptr","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  342","line":"{"},
{"lineNum":"  343","line":"private:"},
{"lineNum":"  344","line":""},
{"lineNum":"  345","line":"    // Borland 5.5.1 specific workaround"},
{"lineNum":"  346","line":"    typedef shared_ptr<T> this_type;"},
{"lineNum":"  347","line":""},
{"lineNum":"  348","line":"public:"},
{"lineNum":"  349","line":""},
{"lineNum":"  350","line":"    typedef typename boost::detail::sp_element< T >::type element_type;"},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"    BOOST_CONSTEXPR shared_ptr() BOOST_SP_NOEXCEPT : px( 0 ), pn()"},
{"lineNum":"  353","line":"    {"},
{"lineNum":"  354","line":"    }"},
{"lineNum":"  355","line":""},
{"lineNum":"  356","line":"#if !defined( BOOST_NO_CXX11_NULLPTR )"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"    BOOST_CONSTEXPR shared_ptr( boost::detail::sp_nullptr_t ) BOOST_SP_NOEXCEPT : px( 0 ), pn()"},
{"lineNum":"  359","line":"    {"},
{"lineNum":"  360","line":"    }"},
{"lineNum":"  361","line":""},
{"lineNum":"  362","line":"#endif"},
{"lineNum":"  363","line":""},
{"lineNum":"  364","line":"    BOOST_CONSTEXPR shared_ptr( boost::detail::sp_internal_constructor_tag, element_type * px_, boost::detail::shared_count const & pn_ ) BOOST_SP_NOEXCEPT : px( px_ ), pn( pn_ )"},
{"lineNum":"  365","line":"    {"},
{"lineNum":"  366","line":"    }"},
{"lineNum":"  367","line":""},
{"lineNum":"  368","line":"#if !defined( BOOST_NO_CXX11_RVALUE_REFERENCES )"},
{"lineNum":"  369","line":""},
{"lineNum":"  370","line":"    BOOST_CONSTEXPR shared_ptr( boost::detail::sp_internal_constructor_tag, element_type * px_, boost::detail::shared_count && pn_ ) BOOST_SP_NOEXCEPT : px( px_ ), pn( std::move( pn_ ) )"},
{"lineNum":"  371","line":"    {"},
{"lineNum":"  372","line":"    }"},
{"lineNum":"  373","line":""},
{"lineNum":"  374","line":"#endif"},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"    template<class Y>"},
{"lineNum":"  377","line":"    explicit shared_ptr( Y * p ): px( p ), pn() // Y must be complete","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  378","line":"    {"},
{"lineNum":"  379","line":"        boost::detail::sp_pointer_construct( this, p, pn );","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  380","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  381","line":""},
{"lineNum":"  382","line":"    //"},
{"lineNum":"  383","line":"    // Requirements: D\'s copy constructor must not throw"},
{"lineNum":"  384","line":"    //"},
{"lineNum":"  385","line":"    // shared_ptr will release p by calling d(p)"},
{"lineNum":"  386","line":"    //"},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"    template<class Y, class D> shared_ptr( Y * p, D d ): px( p ), pn( p, d )"},
{"lineNum":"  389","line":"    {"},
{"lineNum":"  390","line":"        boost::detail::sp_deleter_construct( this, p );"},
{"lineNum":"  391","line":"    }"},
{"lineNum":"  392","line":""},
{"lineNum":"  393","line":"#if !defined( BOOST_NO_CXX11_NULLPTR )"},
{"lineNum":"  394","line":""},
{"lineNum":"  395","line":"    template<class D> shared_ptr( boost::detail::sp_nullptr_t p, D d ): px( p ), pn( p, d )"},
{"lineNum":"  396","line":"    {"},
{"lineNum":"  397","line":"    }"},
{"lineNum":"  398","line":""},
{"lineNum":"  399","line":"#endif"},
{"lineNum":"  400","line":""},
{"lineNum":"  401","line":"    // As above, but with allocator. A\'s copy constructor shall not throw."},
{"lineNum":"  402","line":""},
{"lineNum":"  403","line":"    template<class Y, class D, class A> shared_ptr( Y * p, D d, A a ): px( p ), pn( p, d, a )"},
{"lineNum":"  404","line":"    {"},
{"lineNum":"  405","line":"        boost::detail::sp_deleter_construct( this, p );"},
{"lineNum":"  406","line":"    }"},
{"lineNum":"  407","line":""},
{"lineNum":"  408","line":"#if !defined( BOOST_NO_CXX11_NULLPTR )"},
{"lineNum":"  409","line":""},
{"lineNum":"  410","line":"    template<class D, class A> shared_ptr( boost::detail::sp_nullptr_t p, D d, A a ): px( p ), pn( p, d, a )"},
{"lineNum":"  411","line":"    {"},
{"lineNum":"  412","line":"    }"},
{"lineNum":"  413","line":""},
{"lineNum":"  414","line":"#endif"},
{"lineNum":"  415","line":""},
{"lineNum":"  416","line":"//  generated copy constructor, destructor are fine..."},
{"lineNum":"  417","line":""},
{"lineNum":"  418","line":"#if !defined( BOOST_NO_CXX11_RVALUE_REFERENCES )"},
{"lineNum":"  419","line":""},
{"lineNum":"  420","line":"// ... except in C++0x, move disables the implicit copy"},
{"lineNum":"  421","line":""},
{"lineNum":"  422","line":"    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )","class":"lineNoCov","hits":"0","possible_hits":"70",},
{"lineNum":"  423","line":"    {"},
{"lineNum":"  424","line":"    }"},
{"lineNum":"  425","line":""},
{"lineNum":"  426","line":"#endif"},
{"lineNum":"  427","line":""},
{"lineNum":"  428","line":"    template<class Y>"},
{"lineNum":"  429","line":"    explicit shared_ptr( weak_ptr<Y> const & r ): pn( r.pn ) // may throw"},
{"lineNum":"  430","line":"    {"},
{"lineNum":"  431","line":"        boost::detail::sp_assert_convertible< Y, T >();"},
{"lineNum":"  432","line":""},
{"lineNum":"  433","line":"        // it is now safe to copy r.px, as pn(r.pn) did not throw"},
{"lineNum":"  434","line":"        px = r.px;"},
{"lineNum":"  435","line":"    }"},
{"lineNum":"  436","line":""},
{"lineNum":"  437","line":"    template<class Y>"},
{"lineNum":"  438","line":"    shared_ptr( weak_ptr<Y> const & r, boost::detail::sp_nothrow_tag )"},
{"lineNum":"  439","line":"    BOOST_SP_NOEXCEPT : px( 0 ), pn( r.pn, boost::detail::sp_nothrow_tag() )"},
{"lineNum":"  440","line":"    {"},
{"lineNum":"  441","line":"        if( !pn.empty() )"},
{"lineNum":"  442","line":"        {"},
{"lineNum":"  443","line":"            px = r.px;"},
{"lineNum":"  444","line":"        }"},
{"lineNum":"  445","line":"    }"},
{"lineNum":"  446","line":""},
{"lineNum":"  447","line":"    template<class Y>"},
{"lineNum":"  448","line":"#if !defined( BOOST_SP_NO_SP_CONVERTIBLE )"},
{"lineNum":"  449","line":""},
{"lineNum":"  450","line":"    shared_ptr( shared_ptr<Y> const & r, typename boost::detail::sp_enable_if_convertible<Y,T>::type = boost::detail::sp_empty() )"},
{"lineNum":"  451","line":""},
{"lineNum":"  452","line":"#else"},
{"lineNum":"  453","line":""},
{"lineNum":"  454","line":"    shared_ptr( shared_ptr<Y> const & r )"},
{"lineNum":"  455","line":""},
{"lineNum":"  456","line":"#endif"},
{"lineNum":"  457","line":"    BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )"},
{"lineNum":"  458","line":"    {"},
{"lineNum":"  459","line":"        boost::detail::sp_assert_convertible< Y, T >();"},
{"lineNum":"  460","line":"    }"},
{"lineNum":"  461","line":""},
{"lineNum":"  462","line":"    // aliasing"},
{"lineNum":"  463","line":"    template< class Y >"},
{"lineNum":"  464","line":"    shared_ptr( shared_ptr<Y> const & r, element_type * p ) BOOST_SP_NOEXCEPT : px( p ), pn( r.pn )"},
{"lineNum":"  465","line":"    {"},
{"lineNum":"  466","line":"    }"},
{"lineNum":"  467","line":""},
{"lineNum":"  468","line":"#ifndef BOOST_NO_AUTO_PTR"},
{"lineNum":"  469","line":""},
{"lineNum":"  470","line":"    template<class Y>"},
{"lineNum":"  471","line":"    explicit shared_ptr( std::auto_ptr<Y> & r ): px(r.get()), pn()"},
{"lineNum":"  472","line":"    {"},
{"lineNum":"  473","line":"        boost::detail::sp_assert_convertible< Y, T >();"},
{"lineNum":"  474","line":""},
{"lineNum":"  475","line":"        Y * tmp = r.get();"},
{"lineNum":"  476","line":"        pn = boost::detail::shared_count( r );"},
{"lineNum":"  477","line":""},
{"lineNum":"  478","line":"        boost::detail::sp_deleter_construct( this, tmp );"},
{"lineNum":"  479","line":"    }"},
{"lineNum":"  480","line":""},
{"lineNum":"  481","line":"#if !defined( BOOST_NO_CXX11_RVALUE_REFERENCES )"},
{"lineNum":"  482","line":""},
{"lineNum":"  483","line":"    template<class Y>"},
{"lineNum":"  484","line":"    shared_ptr( std::auto_ptr<Y> && r ): px(r.get()), pn()"},
{"lineNum":"  485","line":"    {"},
{"lineNum":"  486","line":"        boost::detail::sp_assert_convertible< Y, T >();"},
{"lineNum":"  487","line":""},
{"lineNum":"  488","line":"        Y * tmp = r.get();"},
{"lineNum":"  489","line":"        pn = boost::detail::shared_count( r );"},
{"lineNum":"  490","line":""},
{"lineNum":"  491","line":"        boost::detail::sp_deleter_construct( this, tmp );"},
{"lineNum":"  492","line":"    }"},
{"lineNum":"  493","line":""},
{"lineNum":"  494","line":"#elif !defined( BOOST_NO_SFINAE ) && !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )"},
{"lineNum":"  495","line":""},
{"lineNum":"  496","line":"    template<class Ap>"},
{"lineNum":"  497","line":"    explicit shared_ptr( Ap r, typename boost::detail::sp_enable_if_auto_ptr<Ap, int>::type = 0 ): px( r.get() ), pn()"},
{"lineNum":"  498","line":"    {"},
{"lineNum":"  499","line":"        typedef typename Ap::element_type Y;"},
{"lineNum":"  500","line":""},
{"lineNum":"  501","line":"        boost::detail::sp_assert_convertible< Y, T >();"},
{"lineNum":"  502","line":""},
{"lineNum":"  503","line":"        Y * tmp = r.get();"},
{"lineNum":"  504","line":"        pn = boost::detail::shared_count( r );"},
{"lineNum":"  505","line":""},
{"lineNum":"  506","line":"        boost::detail::sp_deleter_construct( this, tmp );"},
{"lineNum":"  507","line":"    }"},
{"lineNum":"  508","line":""},
{"lineNum":"  509","line":"#endif // BOOST_NO_SFINAE, BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION"},
{"lineNum":"  510","line":""},
{"lineNum":"  511","line":"#endif // BOOST_NO_AUTO_PTR"},
{"lineNum":"  512","line":""},
{"lineNum":"  513","line":"#if !defined( BOOST_NO_CXX11_SMART_PTR ) && !defined( BOOST_NO_CXX11_RVALUE_REFERENCES )"},
{"lineNum":"  514","line":""},
{"lineNum":"  515","line":"    template< class Y, class D >"},
{"lineNum":"  516","line":"    shared_ptr( std::unique_ptr< Y, D > && r ): px( r.get() ), pn()"},
{"lineNum":"  517","line":"    {"},
{"lineNum":"  518","line":"        boost::detail::sp_assert_convertible< Y, T >();"},
{"lineNum":"  519","line":""},
{"lineNum":"  520","line":"        typename std::unique_ptr< Y, D >::pointer tmp = r.get();"},
{"lineNum":"  521","line":""},
{"lineNum":"  522","line":"        if( tmp != 0 )"},
{"lineNum":"  523","line":"        {"},
{"lineNum":"  524","line":"            pn = boost::detail::shared_count( r );"},
{"lineNum":"  525","line":"            boost::detail::sp_deleter_construct( this, tmp );"},
{"lineNum":"  526","line":"        }"},
{"lineNum":"  527","line":"    }"},
{"lineNum":"  528","line":""},
{"lineNum":"  529","line":"#endif"},
{"lineNum":"  530","line":""},
{"lineNum":"  531","line":"    template< class Y, class D >"},
{"lineNum":"  532","line":"    shared_ptr( boost::movelib::unique_ptr< Y, D > r ): px( r.get() ), pn()"},
{"lineNum":"  533","line":"    {"},
{"lineNum":"  534","line":"        boost::detail::sp_assert_convertible< Y, T >();"},
{"lineNum":"  535","line":""},
{"lineNum":"  536","line":"        typename boost::movelib::unique_ptr< Y, D >::pointer tmp = r.get();"},
{"lineNum":"  537","line":""},
{"lineNum":"  538","line":"        if( tmp != 0 )"},
{"lineNum":"  539","line":"        {"},
{"lineNum":"  540","line":"            pn = boost::detail::shared_count( r );"},
{"lineNum":"  541","line":"            boost::detail::sp_deleter_construct( this, tmp );"},
{"lineNum":"  542","line":"        }"},
{"lineNum":"  543","line":"    }"},
{"lineNum":"  544","line":""},
{"lineNum":"  545","line":"    // assignment"},
{"lineNum":"  546","line":""},
{"lineNum":"  547","line":"    shared_ptr & operator=( shared_ptr const & r ) BOOST_SP_NOEXCEPT"},
{"lineNum":"  548","line":"    {"},
{"lineNum":"  549","line":"        this_type(r).swap(*this);"},
{"lineNum":"  550","line":"        return *this;"},
{"lineNum":"  551","line":"    }"},
{"lineNum":"  552","line":""},
{"lineNum":"  553","line":"#if !defined(BOOST_MSVC) || (BOOST_MSVC >= 1400)"},
{"lineNum":"  554","line":""},
{"lineNum":"  555","line":"    template<class Y>"},
{"lineNum":"  556","line":"    shared_ptr & operator=(shared_ptr<Y> const & r) BOOST_SP_NOEXCEPT"},
{"lineNum":"  557","line":"    {"},
{"lineNum":"  558","line":"        this_type(r).swap(*this);"},
{"lineNum":"  559","line":"        return *this;"},
{"lineNum":"  560","line":"    }"},
{"lineNum":"  561","line":""},
{"lineNum":"  562","line":"#endif"},
{"lineNum":"  563","line":""},
{"lineNum":"  564","line":"#ifndef BOOST_NO_AUTO_PTR"},
{"lineNum":"  565","line":""},
{"lineNum":"  566","line":"    template<class Y>"},
{"lineNum":"  567","line":"    shared_ptr & operator=( std::auto_ptr<Y> & r )"},
{"lineNum":"  568","line":"    {"},
{"lineNum":"  569","line":"        this_type( r ).swap( *this );"},
{"lineNum":"  570","line":"        return *this;"},
{"lineNum":"  571","line":"    }"},
{"lineNum":"  572","line":""},
{"lineNum":"  573","line":"#if !defined( BOOST_NO_CXX11_RVALUE_REFERENCES )"},
{"lineNum":"  574","line":""},
{"lineNum":"  575","line":"    template<class Y>"},
{"lineNum":"  576","line":"    shared_ptr & operator=( std::auto_ptr<Y> && r )"},
{"lineNum":"  577","line":"    {"},
{"lineNum":"  578","line":"        this_type( static_cast< std::auto_ptr<Y> && >( r ) ).swap( *this );"},
{"lineNum":"  579","line":"        return *this;"},
{"lineNum":"  580","line":"    }"},
{"lineNum":"  581","line":""},
{"lineNum":"  582","line":"#elif !defined( BOOST_NO_SFINAE ) && !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )"},
{"lineNum":"  583","line":""},
{"lineNum":"  584","line":"    template<class Ap>"},
{"lineNum":"  585","line":"    typename boost::detail::sp_enable_if_auto_ptr< Ap, shared_ptr & >::type operator=( Ap r )"},
{"lineNum":"  586","line":"    {"},
{"lineNum":"  587","line":"        this_type( r ).swap( *this );"},
{"lineNum":"  588","line":"        return *this;"},
{"lineNum":"  589","line":"    }"},
{"lineNum":"  590","line":""},
{"lineNum":"  591","line":"#endif // BOOST_NO_SFINAE, BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION"},
{"lineNum":"  592","line":""},
{"lineNum":"  593","line":"#endif // BOOST_NO_AUTO_PTR"},
{"lineNum":"  594","line":""},
{"lineNum":"  595","line":"#if !defined( BOOST_NO_CXX11_SMART_PTR ) && !defined( BOOST_NO_CXX11_RVALUE_REFERENCES )"},
{"lineNum":"  596","line":""},
{"lineNum":"  597","line":"    template<class Y, class D>"},
{"lineNum":"  598","line":"    shared_ptr & operator=( std::unique_ptr<Y, D> && r )"},
{"lineNum":"  599","line":"    {"},
{"lineNum":"  600","line":"        this_type( static_cast< std::unique_ptr<Y, D> && >( r ) ).swap(*this);"},
{"lineNum":"  601","line":"        return *this;"},
{"lineNum":"  602","line":"    }"},
{"lineNum":"  603","line":""},
{"lineNum":"  604","line":"#endif"},
{"lineNum":"  605","line":""},
{"lineNum":"  606","line":"    template<class Y, class D>"},
{"lineNum":"  607","line":"    shared_ptr & operator=( boost::movelib::unique_ptr<Y, D> r )"},
{"lineNum":"  608","line":"    {"},
{"lineNum":"  609","line":"        // this_type( static_cast< unique_ptr<Y, D> && >( r ) ).swap( *this );"},
{"lineNum":"  610","line":""},
{"lineNum":"  611","line":"        boost::detail::sp_assert_convertible< Y, T >();"},
{"lineNum":"  612","line":""},
{"lineNum":"  613","line":"        typename boost::movelib::unique_ptr< Y, D >::pointer p = r.get();"},
{"lineNum":"  614","line":""},
{"lineNum":"  615","line":"        shared_ptr tmp;"},
{"lineNum":"  616","line":""},
{"lineNum":"  617","line":"        if( p != 0 )"},
{"lineNum":"  618","line":"        {"},
{"lineNum":"  619","line":"            tmp.px = p;"},
{"lineNum":"  620","line":"            tmp.pn = boost::detail::shared_count( r );"},
{"lineNum":"  621","line":""},
{"lineNum":"  622","line":"            boost::detail::sp_deleter_construct( &tmp, p );"},
{"lineNum":"  623","line":"        }"},
{"lineNum":"  624","line":""},
{"lineNum":"  625","line":"        tmp.swap( *this );"},
{"lineNum":"  626","line":""},
{"lineNum":"  627","line":"        return *this;"},
{"lineNum":"  628","line":"    }"},
{"lineNum":"  629","line":""},
{"lineNum":"  630","line":"// Move support"},
{"lineNum":"  631","line":""},
{"lineNum":"  632","line":"#if !defined( BOOST_NO_CXX11_RVALUE_REFERENCES )"},
{"lineNum":"  633","line":""},
{"lineNum":"  634","line":"    shared_ptr( shared_ptr && r ) BOOST_SP_NOEXCEPT : px( r.px ), pn()"},
{"lineNum":"  635","line":"    {"},
{"lineNum":"  636","line":"        pn.swap( r.pn );"},
{"lineNum":"  637","line":"        r.px = 0;"},
{"lineNum":"  638","line":"    }"},
{"lineNum":"  639","line":""},
{"lineNum":"  640","line":"    template<class Y>"},
{"lineNum":"  641","line":"#if !defined( BOOST_SP_NO_SP_CONVERTIBLE )"},
{"lineNum":"  642","line":""},
{"lineNum":"  643","line":"    shared_ptr( shared_ptr<Y> && r, typename boost::detail::sp_enable_if_convertible<Y,T>::type = boost::detail::sp_empty() )"},
{"lineNum":"  644","line":""},
{"lineNum":"  645","line":"#else"},
{"lineNum":"  646","line":""},
{"lineNum":"  647","line":"    shared_ptr( shared_ptr<Y> && r )"},
{"lineNum":"  648","line":""},
{"lineNum":"  649","line":"#endif"},
{"lineNum":"  650","line":"    BOOST_SP_NOEXCEPT : px( r.px ), pn()"},
{"lineNum":"  651","line":"    {"},
{"lineNum":"  652","line":"        boost::detail::sp_assert_convertible< Y, T >();"},
{"lineNum":"  653","line":""},
{"lineNum":"  654","line":"        pn.swap( r.pn );"},
{"lineNum":"  655","line":"        r.px = 0;"},
{"lineNum":"  656","line":"    }"},
{"lineNum":"  657","line":""},
{"lineNum":"  658","line":"    shared_ptr & operator=( shared_ptr && r ) BOOST_SP_NOEXCEPT"},
{"lineNum":"  659","line":"    {"},
{"lineNum":"  660","line":"        this_type( static_cast< shared_ptr && >( r ) ).swap( *this );"},
{"lineNum":"  661","line":"        return *this;"},
{"lineNum":"  662","line":"    }"},
{"lineNum":"  663","line":""},
{"lineNum":"  664","line":"    template<class Y>"},
{"lineNum":"  665","line":"    shared_ptr & operator=( shared_ptr<Y> && r ) BOOST_SP_NOEXCEPT"},
{"lineNum":"  666","line":"    {"},
{"lineNum":"  667","line":"        this_type( static_cast< shared_ptr<Y> && >( r ) ).swap( *this );"},
{"lineNum":"  668","line":"        return *this;"},
{"lineNum":"  669","line":"    }"},
{"lineNum":"  670","line":""},
{"lineNum":"  671","line":"    // aliasing move"},
{"lineNum":"  672","line":"    template<class Y>"},
{"lineNum":"  673","line":"    shared_ptr( shared_ptr<Y> && r, element_type * p ) BOOST_SP_NOEXCEPT : px( p ), pn()"},
{"lineNum":"  674","line":"    {"},
{"lineNum":"  675","line":"        pn.swap( r.pn );"},
{"lineNum":"  676","line":"        r.px = 0;"},
{"lineNum":"  677","line":"    }"},
{"lineNum":"  678","line":""},
{"lineNum":"  679","line":"#endif"},
{"lineNum":"  680","line":""},
{"lineNum":"  681","line":"#if !defined( BOOST_NO_CXX11_NULLPTR )"},
{"lineNum":"  682","line":""},
{"lineNum":"  683","line":"    shared_ptr & operator=( boost::detail::sp_nullptr_t ) BOOST_SP_NOEXCEPT"},
{"lineNum":"  684","line":"    {"},
{"lineNum":"  685","line":"        this_type().swap(*this);"},
{"lineNum":"  686","line":"        return *this;"},
{"lineNum":"  687","line":"    }"},
{"lineNum":"  688","line":""},
{"lineNum":"  689","line":"#endif"},
{"lineNum":"  690","line":""},
{"lineNum":"  691","line":"    void reset() BOOST_SP_NOEXCEPT"},
{"lineNum":"  692","line":"    {"},
{"lineNum":"  693","line":"        this_type().swap(*this);"},
{"lineNum":"  694","line":"    }"},
{"lineNum":"  695","line":""},
{"lineNum":"  696","line":"    template<class Y> void reset( Y * p ) // Y must be complete"},
{"lineNum":"  697","line":"    {"},
{"lineNum":"  698","line":"        BOOST_ASSERT( p == 0 || p != px ); // catch self-reset errors"},
{"lineNum":"  699","line":"        this_type( p ).swap( *this );"},
{"lineNum":"  700","line":"    }"},
{"lineNum":"  701","line":""},
{"lineNum":"  702","line":"    template<class Y, class D> void reset( Y * p, D d )"},
{"lineNum":"  703","line":"    {"},
{"lineNum":"  704","line":"        this_type( p, d ).swap( *this );"},
{"lineNum":"  705","line":"    }"},
{"lineNum":"  706","line":""},
{"lineNum":"  707","line":"    template<class Y, class D, class A> void reset( Y * p, D d, A a )"},
{"lineNum":"  708","line":"    {"},
{"lineNum":"  709","line":"        this_type( p, d, a ).swap( *this );"},
{"lineNum":"  710","line":"    }"},
{"lineNum":"  711","line":""},
{"lineNum":"  712","line":"    template<class Y> void reset( shared_ptr<Y> const & r, element_type * p ) BOOST_SP_NOEXCEPT"},
{"lineNum":"  713","line":"    {"},
{"lineNum":"  714","line":"        this_type( r, p ).swap( *this );"},
{"lineNum":"  715","line":"    }"},
{"lineNum":"  716","line":""},
{"lineNum":"  717","line":"#if !defined( BOOST_NO_CXX11_RVALUE_REFERENCES )"},
{"lineNum":"  718","line":""},
{"lineNum":"  719","line":"    template<class Y> void reset( shared_ptr<Y> && r, element_type * p ) BOOST_SP_NOEXCEPT"},
{"lineNum":"  720","line":"    {"},
{"lineNum":"  721","line":"        this_type( static_cast< shared_ptr<Y> && >( r ), p ).swap( *this );"},
{"lineNum":"  722","line":"    }"},
{"lineNum":"  723","line":""},
{"lineNum":"  724","line":"#endif"},
{"lineNum":"  725","line":""},
{"lineNum":"  726","line":"    typename boost::detail::sp_dereference< T >::type operator* () const BOOST_SP_NOEXCEPT_WITH_ASSERT"},
{"lineNum":"  727","line":"    {"},
{"lineNum":"  728","line":"        BOOST_ASSERT( px != 0 );"},
{"lineNum":"  729","line":"        return *px;"},
{"lineNum":"  730","line":"    }"},
{"lineNum":"  731","line":""},
{"lineNum":"  732","line":"    typename boost::detail::sp_member_access< T >::type operator-> () const BOOST_SP_NOEXCEPT_WITH_ASSERT"},
{"lineNum":"  733","line":"    {"},
{"lineNum":"  734","line":"        BOOST_ASSERT( px != 0 );"},
{"lineNum":"  735","line":"        return px;","class":"lineNoCov","hits":"0","possible_hits":"53",},
{"lineNum":"  736","line":"    }"},
{"lineNum":"  737","line":""},
{"lineNum":"  738","line":"    typename boost::detail::sp_array_access< T >::type operator[] ( std::ptrdiff_t i ) const BOOST_SP_NOEXCEPT_WITH_ASSERT"},
{"lineNum":"  739","line":"    {"},
{"lineNum":"  740","line":"        BOOST_ASSERT( px != 0 );"},
{"lineNum":"  741","line":"        BOOST_ASSERT( i >= 0 && ( i < boost::detail::sp_extent< T >::value || boost::detail::sp_extent< T >::value == 0 ) );"},
{"lineNum":"  742","line":""},
{"lineNum":"  743","line":"        return static_cast< typename boost::detail::sp_array_access< T >::type >( px[ i ] );"},
{"lineNum":"  744","line":"    }"},
{"lineNum":"  745","line":""},
{"lineNum":"  746","line":"    element_type * get() const BOOST_SP_NOEXCEPT"},
{"lineNum":"  747","line":"    {"},
{"lineNum":"  748","line":"        return px;"},
{"lineNum":"  749","line":"    }"},
{"lineNum":"  750","line":""},
{"lineNum":"  751","line":"// implicit conversion to \"bool\""},
{"lineNum":"  752","line":"#include <boost/smart_ptr/detail/operator_bool.hpp>"},
{"lineNum":"  753","line":""},
{"lineNum":"  754","line":"    bool unique() const BOOST_SP_NOEXCEPT"},
{"lineNum":"  755","line":"    {"},
{"lineNum":"  756","line":"        return pn.unique();"},
{"lineNum":"  757","line":"    }"},
{"lineNum":"  758","line":""},
{"lineNum":"  759","line":"    long use_count() const BOOST_SP_NOEXCEPT"},
{"lineNum":"  760","line":"    {"},
{"lineNum":"  761","line":"        return pn.use_count();"},
{"lineNum":"  762","line":"    }"},
{"lineNum":"  763","line":""},
{"lineNum":"  764","line":"    void swap( shared_ptr & other ) BOOST_SP_NOEXCEPT"},
{"lineNum":"  765","line":"    {"},
{"lineNum":"  766","line":"        std::swap(px, other.px);"},
{"lineNum":"  767","line":"        pn.swap(other.pn);"},
{"lineNum":"  768","line":"    }"},
{"lineNum":"  769","line":""},
{"lineNum":"  770","line":"    template<class Y> bool owner_before( shared_ptr<Y> const & rhs ) const BOOST_SP_NOEXCEPT"},
{"lineNum":"  771","line":"    {"},
{"lineNum":"  772","line":"        return pn < rhs.pn;"},
{"lineNum":"  773","line":"    }"},
{"lineNum":"  774","line":""},
{"lineNum":"  775","line":"    template<class Y> bool owner_before( weak_ptr<Y> const & rhs ) const BOOST_SP_NOEXCEPT"},
{"lineNum":"  776","line":"    {"},
{"lineNum":"  777","line":"        return pn < rhs.pn;"},
{"lineNum":"  778","line":"    }"},
{"lineNum":"  779","line":""},
{"lineNum":"  780","line":"    void * _internal_get_deleter( boost::detail::sp_typeinfo const & ti ) const BOOST_SP_NOEXCEPT"},
{"lineNum":"  781","line":"    {"},
{"lineNum":"  782","line":"        return pn.get_deleter( ti );"},
{"lineNum":"  783","line":"    }"},
{"lineNum":"  784","line":""},
{"lineNum":"  785","line":"    void * _internal_get_local_deleter( boost::detail::sp_typeinfo const & ti ) const BOOST_SP_NOEXCEPT"},
{"lineNum":"  786","line":"    {"},
{"lineNum":"  787","line":"        return pn.get_local_deleter( ti );"},
{"lineNum":"  788","line":"    }"},
{"lineNum":"  789","line":""},
{"lineNum":"  790","line":"    void * _internal_get_untyped_deleter() const BOOST_SP_NOEXCEPT"},
{"lineNum":"  791","line":"    {"},
{"lineNum":"  792","line":"        return pn.get_untyped_deleter();"},
{"lineNum":"  793","line":"    }"},
{"lineNum":"  794","line":""},
{"lineNum":"  795","line":"    bool _internal_equiv( shared_ptr const & r ) const BOOST_SP_NOEXCEPT"},
{"lineNum":"  796","line":"    {"},
{"lineNum":"  797","line":"        return px == r.px && pn == r.pn;"},
{"lineNum":"  798","line":"    }"},
{"lineNum":"  799","line":""},
{"lineNum":"  800","line":"    boost::detail::shared_count _internal_count() const BOOST_SP_NOEXCEPT"},
{"lineNum":"  801","line":"    {"},
{"lineNum":"  802","line":"        return pn;"},
{"lineNum":"  803","line":"    }"},
{"lineNum":"  804","line":""},
{"lineNum":"  805","line":"// Tasteless as this may seem, making all members public allows member templates"},
{"lineNum":"  806","line":"// to work in the absence of member template friends. (Matthew Langston)"},
{"lineNum":"  807","line":""},
{"lineNum":"  808","line":"#ifndef BOOST_NO_MEMBER_TEMPLATE_FRIENDS"},
{"lineNum":"  809","line":""},
{"lineNum":"  810","line":"private:"},
{"lineNum":"  811","line":""},
{"lineNum":"  812","line":"    template<class Y> friend class shared_ptr;"},
{"lineNum":"  813","line":"    template<class Y> friend class weak_ptr;"},
{"lineNum":"  814","line":""},
{"lineNum":"  815","line":""},
{"lineNum":"  816","line":"#endif"},
{"lineNum":"  817","line":""},
{"lineNum":"  818","line":"    element_type * px;                 // contained pointer"},
{"lineNum":"  819","line":"    boost::detail::shared_count pn;    // reference counter"},
{"lineNum":"  820","line":""},
{"lineNum":"  821","line":"};  // shared_ptr"},
{"lineNum":"  822","line":""},
{"lineNum":"  823","line":"template<class T, class U> inline bool operator==(shared_ptr<T> const & a, shared_ptr<U> const & b) BOOST_SP_NOEXCEPT"},
{"lineNum":"  824","line":"{"},
{"lineNum":"  825","line":"    return a.get() == b.get();"},
{"lineNum":"  826","line":"}"},
{"lineNum":"  827","line":""},
{"lineNum":"  828","line":"template<class T, class U> inline bool operator!=(shared_ptr<T> const & a, shared_ptr<U> const & b) BOOST_SP_NOEXCEPT"},
{"lineNum":"  829","line":"{"},
{"lineNum":"  830","line":"    return a.get() != b.get();"},
{"lineNum":"  831","line":"}"},
{"lineNum":"  832","line":""},
{"lineNum":"  833","line":"#if __GNUC__ == 2 && __GNUC_MINOR__ <= 96"},
{"lineNum":"  834","line":""},
{"lineNum":"  835","line":"// Resolve the ambiguity between our op!= and the one in rel_ops"},
{"lineNum":"  836","line":""},
{"lineNum":"  837","line":"template<class T> inline bool operator!=(shared_ptr<T> const & a, shared_ptr<T> const & b) BOOST_SP_NOEXCEPT"},
{"lineNum":"  838","line":"{"},
{"lineNum":"  839","line":"    return a.get() != b.get();"},
{"lineNum":"  840","line":"}"},
{"lineNum":"  841","line":""},
{"lineNum":"  842","line":"#endif"},
{"lineNum":"  843","line":""},
{"lineNum":"  844","line":"#if !defined( BOOST_NO_CXX11_NULLPTR )"},
{"lineNum":"  845","line":""},
{"lineNum":"  846","line":"template<class T> inline bool operator==( shared_ptr<T> const & p, boost::detail::sp_nullptr_t ) BOOST_SP_NOEXCEPT"},
{"lineNum":"  847","line":"{"},
{"lineNum":"  848","line":"    return p.get() == 0;"},
{"lineNum":"  849","line":"}"},
{"lineNum":"  850","line":""},
{"lineNum":"  851","line":"template<class T> inline bool operator==( boost::detail::sp_nullptr_t, shared_ptr<T> const & p ) BOOST_SP_NOEXCEPT"},
{"lineNum":"  852","line":"{"},
{"lineNum":"  853","line":"    return p.get() == 0;"},
{"lineNum":"  854","line":"}"},
{"lineNum":"  855","line":""},
{"lineNum":"  856","line":"template<class T> inline bool operator!=( shared_ptr<T> const & p, boost::detail::sp_nullptr_t ) BOOST_SP_NOEXCEPT"},
{"lineNum":"  857","line":"{"},
{"lineNum":"  858","line":"    return p.get() != 0;"},
{"lineNum":"  859","line":"}"},
{"lineNum":"  860","line":""},
{"lineNum":"  861","line":"template<class T> inline bool operator!=( boost::detail::sp_nullptr_t, shared_ptr<T> const & p ) BOOST_SP_NOEXCEPT"},
{"lineNum":"  862","line":"{"},
{"lineNum":"  863","line":"    return p.get() != 0;"},
{"lineNum":"  864","line":"}"},
{"lineNum":"  865","line":""},
{"lineNum":"  866","line":"#endif"},
{"lineNum":"  867","line":""},
{"lineNum":"  868","line":"template<class T, class U> inline bool operator<(shared_ptr<T> const & a, shared_ptr<U> const & b) BOOST_SP_NOEXCEPT"},
{"lineNum":"  869","line":"{"},
{"lineNum":"  870","line":"    return a.owner_before( b );"},
{"lineNum":"  871","line":"}"},
{"lineNum":"  872","line":""},
{"lineNum":"  873","line":"template<class T> inline void swap(shared_ptr<T> & a, shared_ptr<T> & b) BOOST_SP_NOEXCEPT"},
{"lineNum":"  874","line":"{"},
{"lineNum":"  875","line":"    a.swap(b);"},
{"lineNum":"  876","line":"}"},
{"lineNum":"  877","line":""},
{"lineNum":"  878","line":"template<class T, class U> shared_ptr<T> static_pointer_cast( shared_ptr<U> const & r ) BOOST_SP_NOEXCEPT"},
{"lineNum":"  879","line":"{"},
{"lineNum":"  880","line":"    (void) static_cast< T* >( static_cast< U* >( 0 ) );"},
{"lineNum":"  881","line":""},
{"lineNum":"  882","line":"    typedef typename shared_ptr<T>::element_type E;"},
{"lineNum":"  883","line":""},
{"lineNum":"  884","line":"    E * p = static_cast< E* >( r.get() );"},
{"lineNum":"  885","line":"    return shared_ptr<T>( r, p );"},
{"lineNum":"  886","line":"}"},
{"lineNum":"  887","line":""},
{"lineNum":"  888","line":"template<class T, class U> shared_ptr<T> const_pointer_cast( shared_ptr<U> const & r ) BOOST_SP_NOEXCEPT"},
{"lineNum":"  889","line":"{"},
{"lineNum":"  890","line":"    (void) const_cast< T* >( static_cast< U* >( 0 ) );"},
{"lineNum":"  891","line":""},
{"lineNum":"  892","line":"    typedef typename shared_ptr<T>::element_type E;"},
{"lineNum":"  893","line":""},
{"lineNum":"  894","line":"    E * p = const_cast< E* >( r.get() );"},
{"lineNum":"  895","line":"    return shared_ptr<T>( r, p );"},
{"lineNum":"  896","line":"}"},
{"lineNum":"  897","line":""},
{"lineNum":"  898","line":"template<class T, class U> shared_ptr<T> dynamic_pointer_cast( shared_ptr<U> const & r ) BOOST_SP_NOEXCEPT"},
{"lineNum":"  899","line":"{"},
{"lineNum":"  900","line":"    (void) dynamic_cast< T* >( static_cast< U* >( 0 ) );"},
{"lineNum":"  901","line":""},
{"lineNum":"  902","line":"    typedef typename shared_ptr<T>::element_type E;"},
{"lineNum":"  903","line":""},
{"lineNum":"  904","line":"    E * p = dynamic_cast< E* >( r.get() );"},
{"lineNum":"  905","line":"    return p? shared_ptr<T>( r, p ): shared_ptr<T>();"},
{"lineNum":"  906","line":"}"},
{"lineNum":"  907","line":""},
{"lineNum":"  908","line":"template<class T, class U> shared_ptr<T> reinterpret_pointer_cast( shared_ptr<U> const & r ) BOOST_SP_NOEXCEPT"},
{"lineNum":"  909","line":"{"},
{"lineNum":"  910","line":"    (void) reinterpret_cast< T* >( static_cast< U* >( 0 ) );"},
{"lineNum":"  911","line":""},
{"lineNum":"  912","line":"    typedef typename shared_ptr<T>::element_type E;"},
{"lineNum":"  913","line":""},
{"lineNum":"  914","line":"    E * p = reinterpret_cast< E* >( r.get() );"},
{"lineNum":"  915","line":"    return shared_ptr<T>( r, p );"},
{"lineNum":"  916","line":"}"},
{"lineNum":"  917","line":""},
{"lineNum":"  918","line":"#if !defined( BOOST_NO_CXX11_RVALUE_REFERENCES )"},
{"lineNum":"  919","line":""},
{"lineNum":"  920","line":"template<class T, class U> shared_ptr<T> static_pointer_cast( shared_ptr<U> && r ) BOOST_SP_NOEXCEPT"},
{"lineNum":"  921","line":"{"},
{"lineNum":"  922","line":"    (void) static_cast< T* >( static_cast< U* >( 0 ) );"},
{"lineNum":"  923","line":""},
{"lineNum":"  924","line":"    typedef typename shared_ptr<T>::element_type E;"},
{"lineNum":"  925","line":""},
{"lineNum":"  926","line":"    E * p = static_cast< E* >( r.get() );"},
{"lineNum":"  927","line":"    return shared_ptr<T>( std::move(r), p );"},
{"lineNum":"  928","line":"}"},
{"lineNum":"  929","line":""},
{"lineNum":"  930","line":"template<class T, class U> shared_ptr<T> const_pointer_cast( shared_ptr<U> && r ) BOOST_SP_NOEXCEPT"},
{"lineNum":"  931","line":"{"},
{"lineNum":"  932","line":"    (void) const_cast< T* >( static_cast< U* >( 0 ) );"},
{"lineNum":"  933","line":""},
{"lineNum":"  934","line":"    typedef typename shared_ptr<T>::element_type E;"},
{"lineNum":"  935","line":""},
{"lineNum":"  936","line":"    E * p = const_cast< E* >( r.get() );"},
{"lineNum":"  937","line":"    return shared_ptr<T>( std::move(r), p );"},
{"lineNum":"  938","line":"}"},
{"lineNum":"  939","line":""},
{"lineNum":"  940","line":"template<class T, class U> shared_ptr<T> dynamic_pointer_cast( shared_ptr<U> && r ) BOOST_SP_NOEXCEPT"},
{"lineNum":"  941","line":"{"},
{"lineNum":"  942","line":"    (void) dynamic_cast< T* >( static_cast< U* >( 0 ) );"},
{"lineNum":"  943","line":""},
{"lineNum":"  944","line":"    typedef typename shared_ptr<T>::element_type E;"},
{"lineNum":"  945","line":""},
{"lineNum":"  946","line":"    E * p = dynamic_cast< E* >( r.get() );"},
{"lineNum":"  947","line":"    return p? shared_ptr<T>( std::move(r), p ): shared_ptr<T>();"},
{"lineNum":"  948","line":"}"},
{"lineNum":"  949","line":""},
{"lineNum":"  950","line":"template<class T, class U> shared_ptr<T> reinterpret_pointer_cast( shared_ptr<U> && r ) BOOST_SP_NOEXCEPT"},
{"lineNum":"  951","line":"{"},
{"lineNum":"  952","line":"    (void) reinterpret_cast< T* >( static_cast< U* >( 0 ) );"},
{"lineNum":"  953","line":""},
{"lineNum":"  954","line":"    typedef typename shared_ptr<T>::element_type E;"},
{"lineNum":"  955","line":""},
{"lineNum":"  956","line":"    E * p = reinterpret_cast< E* >( r.get() );"},
{"lineNum":"  957","line":"    return shared_ptr<T>( std::move(r), p );"},
{"lineNum":"  958","line":"}"},
{"lineNum":"  959","line":""},
{"lineNum":"  960","line":"#endif // !defined( BOOST_NO_CXX11_RVALUE_REFERENCES )"},
{"lineNum":"  961","line":""},
{"lineNum":"  962","line":"// get_pointer() enables boost::mem_fn to recognize shared_ptr"},
{"lineNum":"  963","line":""},
{"lineNum":"  964","line":"template<class T> inline typename shared_ptr<T>::element_type * get_pointer(shared_ptr<T> const & p) BOOST_SP_NOEXCEPT"},
{"lineNum":"  965","line":"{"},
{"lineNum":"  966","line":"    return p.get();"},
{"lineNum":"  967","line":"}"},
{"lineNum":"  968","line":""},
{"lineNum":"  969","line":"// operator<<"},
{"lineNum":"  970","line":""},
{"lineNum":"  971","line":"#if !defined(BOOST_NO_IOSTREAM)"},
{"lineNum":"  972","line":""},
{"lineNum":"  973","line":"#if defined(BOOST_NO_TEMPLATED_IOSTREAMS) || ( defined(__GNUC__) &&  (__GNUC__ < 3) )"},
{"lineNum":"  974","line":""},
{"lineNum":"  975","line":"template<class Y> std::ostream & operator<< (std::ostream & os, shared_ptr<Y> const & p)"},
{"lineNum":"  976","line":"{"},
{"lineNum":"  977","line":"    os << p.get();"},
{"lineNum":"  978","line":"    return os;"},
{"lineNum":"  979","line":"}"},
{"lineNum":"  980","line":""},
{"lineNum":"  981","line":"#else"},
{"lineNum":"  982","line":""},
{"lineNum":"  983","line":"// in STLport\'s no-iostreams mode no iostream symbols can be used"},
{"lineNum":"  984","line":"#ifndef _STLP_NO_IOSTREAMS"},
{"lineNum":"  985","line":""},
{"lineNum":"  986","line":"# if defined(BOOST_MSVC) && BOOST_WORKAROUND(BOOST_MSVC, < 1300 && __SGI_STL_PORT)"},
{"lineNum":"  987","line":"// MSVC6 has problems finding std::basic_ostream through the using declaration in namespace _STL"},
{"lineNum":"  988","line":"using std::basic_ostream;"},
{"lineNum":"  989","line":"template<class E, class T, class Y> basic_ostream<E, T> & operator<< (basic_ostream<E, T> & os, shared_ptr<Y> const & p)"},
{"lineNum":"  990","line":"# else"},
{"lineNum":"  991","line":"template<class E, class T, class Y> std::basic_ostream<E, T> & operator<< (std::basic_ostream<E, T> & os, shared_ptr<Y> const & p)"},
{"lineNum":"  992","line":"# endif"},
{"lineNum":"  993","line":"{"},
{"lineNum":"  994","line":"    os << p.get();"},
{"lineNum":"  995","line":"    return os;"},
{"lineNum":"  996","line":"}"},
{"lineNum":"  997","line":""},
{"lineNum":"  998","line":"#endif // _STLP_NO_IOSTREAMS"},
{"lineNum":"  999","line":""},
{"lineNum":" 1000","line":"#endif // __GNUC__ < 3"},
{"lineNum":" 1001","line":""},
{"lineNum":" 1002","line":"#endif // !defined(BOOST_NO_IOSTREAM)"},
{"lineNum":" 1003","line":""},
{"lineNum":" 1004","line":"// get_deleter"},
{"lineNum":" 1005","line":""},
{"lineNum":" 1006","line":"namespace detail"},
{"lineNum":" 1007","line":"{"},
{"lineNum":" 1008","line":""},
{"lineNum":" 1009","line":"template<class D, class T> D * basic_get_deleter( shared_ptr<T> const & p ) BOOST_SP_NOEXCEPT"},
{"lineNum":" 1010","line":"{"},
{"lineNum":" 1011","line":"    return static_cast<D *>( p._internal_get_deleter(BOOST_SP_TYPEID(D)) );"},
{"lineNum":" 1012","line":"}"},
{"lineNum":" 1013","line":""},
{"lineNum":" 1014","line":"template<class D, class T> D * basic_get_local_deleter( D *, shared_ptr<T> const & p ) BOOST_SP_NOEXCEPT;"},
{"lineNum":" 1015","line":"template<class D, class T> D const * basic_get_local_deleter( D const *, shared_ptr<T> const & p ) BOOST_SP_NOEXCEPT;"},
{"lineNum":" 1016","line":""},
{"lineNum":" 1017","line":"class esft2_deleter_wrapper"},
{"lineNum":" 1018","line":"{"},
{"lineNum":" 1019","line":"private:"},
{"lineNum":" 1020","line":""},
{"lineNum":" 1021","line":"    shared_ptr<void const volatile> deleter_;"},
{"lineNum":" 1022","line":""},
{"lineNum":" 1023","line":"public:"},
{"lineNum":" 1024","line":""},
{"lineNum":" 1025","line":"    esft2_deleter_wrapper() BOOST_SP_NOEXCEPT"},
{"lineNum":" 1026","line":"    {"},
{"lineNum":" 1027","line":"    }"},
{"lineNum":" 1028","line":""},
{"lineNum":" 1029","line":"    template< class T > void set_deleter( shared_ptr<T> const & deleter ) BOOST_SP_NOEXCEPT"},
{"lineNum":" 1030","line":"    {"},
{"lineNum":" 1031","line":"        deleter_ = deleter;"},
{"lineNum":" 1032","line":"    }"},
{"lineNum":" 1033","line":""},
{"lineNum":" 1034","line":"    template<typename D> D* get_deleter() const BOOST_SP_NOEXCEPT"},
{"lineNum":" 1035","line":"    {"},
{"lineNum":" 1036","line":"        return boost::detail::basic_get_deleter<D>( deleter_ );"},
{"lineNum":" 1037","line":"    }"},
{"lineNum":" 1038","line":""},
{"lineNum":" 1039","line":"    template< class T> void operator()( T* ) BOOST_SP_NOEXCEPT_WITH_ASSERT"},
{"lineNum":" 1040","line":"    {"},
{"lineNum":" 1041","line":"        BOOST_ASSERT( deleter_.use_count() <= 1 );"},
{"lineNum":" 1042","line":"        deleter_.reset();"},
{"lineNum":" 1043","line":"    }"},
{"lineNum":" 1044","line":"};"},
{"lineNum":" 1045","line":""},
{"lineNum":" 1046","line":"} // namespace detail"},
{"lineNum":" 1047","line":""},
{"lineNum":" 1048","line":"template<class D, class T> D * get_deleter( shared_ptr<T> const & p ) BOOST_SP_NOEXCEPT"},
{"lineNum":" 1049","line":"{"},
{"lineNum":" 1050","line":"    D * d = boost::detail::basic_get_deleter<D>( p );"},
{"lineNum":" 1051","line":""},
{"lineNum":" 1052","line":"    if( d == 0 )"},
{"lineNum":" 1053","line":"    {"},
{"lineNum":" 1054","line":"        d = boost::detail::basic_get_local_deleter( d, p );"},
{"lineNum":" 1055","line":"    }"},
{"lineNum":" 1056","line":""},
{"lineNum":" 1057","line":"    if( d == 0 )"},
{"lineNum":" 1058","line":"    {"},
{"lineNum":" 1059","line":"        boost::detail::esft2_deleter_wrapper *del_wrapper = boost::detail::basic_get_deleter<boost::detail::esft2_deleter_wrapper>(p);"},
{"lineNum":" 1060","line":"// The following get_deleter method call is fully qualified because"},
{"lineNum":" 1061","line":"// older versions of gcc (2.95, 3.2.3) fail to compile it when written del_wrapper->get_deleter<D>()"},
{"lineNum":" 1062","line":"        if(del_wrapper) d = del_wrapper->::boost::detail::esft2_deleter_wrapper::get_deleter<D>();"},
{"lineNum":" 1063","line":"    }"},
{"lineNum":" 1064","line":""},
{"lineNum":" 1065","line":"    return d;"},
{"lineNum":" 1066","line":"}"},
{"lineNum":" 1067","line":""},
{"lineNum":" 1068","line":"// atomic access"},
{"lineNum":" 1069","line":""},
{"lineNum":" 1070","line":"#if !defined(BOOST_SP_NO_ATOMIC_ACCESS)"},
{"lineNum":" 1071","line":""},
{"lineNum":" 1072","line":"template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * /*p*/ ) BOOST_SP_NOEXCEPT"},
{"lineNum":" 1073","line":"{"},
{"lineNum":" 1074","line":"    return false;"},
{"lineNum":" 1075","line":"}"},
{"lineNum":" 1076","line":""},
{"lineNum":" 1077","line":"template<class T> shared_ptr<T> atomic_load( shared_ptr<T> const * p ) BOOST_SP_NOEXCEPT"},
{"lineNum":" 1078","line":"{"},
{"lineNum":" 1079","line":"    boost::detail::spinlock_pool<2>::scoped_lock lock( p );"},
{"lineNum":" 1080","line":"    return *p;"},
{"lineNum":" 1081","line":"}"},
{"lineNum":" 1082","line":""},
{"lineNum":" 1083","line":"template<class T, class M> inline shared_ptr<T> atomic_load_explicit( shared_ptr<T> const * p, /*memory_order mo*/ M ) BOOST_SP_NOEXCEPT"},
{"lineNum":" 1084","line":"{"},
{"lineNum":" 1085","line":"    return atomic_load( p );"},
{"lineNum":" 1086","line":"}"},
{"lineNum":" 1087","line":""},
{"lineNum":" 1088","line":"template<class T> void atomic_store( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT"},
{"lineNum":" 1089","line":"{"},
{"lineNum":" 1090","line":"    boost::detail::spinlock_pool<2>::scoped_lock lock( p );"},
{"lineNum":" 1091","line":"    p->swap( r );"},
{"lineNum":" 1092","line":"}"},
{"lineNum":" 1093","line":""},
{"lineNum":" 1094","line":"template<class T, class M> inline void atomic_store_explicit( shared_ptr<T> * p, shared_ptr<T> r, /*memory_order mo*/ M ) BOOST_SP_NOEXCEPT"},
{"lineNum":" 1095","line":"{"},
{"lineNum":" 1096","line":"    atomic_store( p, r ); // std::move( r )"},
{"lineNum":" 1097","line":"}"},
{"lineNum":" 1098","line":""},
{"lineNum":" 1099","line":"template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_ptr<T> r ) BOOST_SP_NOEXCEPT"},
{"lineNum":" 1100","line":"{"},
{"lineNum":" 1101","line":"    boost::detail::spinlock & sp = boost::detail::spinlock_pool<2>::spinlock_for( p );"},
{"lineNum":" 1102","line":""},
{"lineNum":" 1103","line":"    sp.lock();"},
{"lineNum":" 1104","line":"    p->swap( r );"},
{"lineNum":" 1105","line":"    sp.unlock();"},
{"lineNum":" 1106","line":""},
{"lineNum":" 1107","line":"    return r; // return std::move( r )"},
{"lineNum":" 1108","line":"}"},
{"lineNum":" 1109","line":""},
{"lineNum":" 1110","line":"template<class T, class M> shared_ptr<T> inline atomic_exchange_explicit( shared_ptr<T> * p, shared_ptr<T> r, /*memory_order mo*/ M ) BOOST_SP_NOEXCEPT"},
{"lineNum":" 1111","line":"{"},
{"lineNum":" 1112","line":"    return atomic_exchange( p, r ); // std::move( r )"},
{"lineNum":" 1113","line":"}"},
{"lineNum":" 1114","line":""},
{"lineNum":" 1115","line":"template<class T> bool atomic_compare_exchange( shared_ptr<T> * p, shared_ptr<T> * v, shared_ptr<T> w ) BOOST_SP_NOEXCEPT"},
{"lineNum":" 1116","line":"{"},
{"lineNum":" 1117","line":"    boost::detail::spinlock & sp = boost::detail::spinlock_pool<2>::spinlock_for( p );"},
{"lineNum":" 1118","line":""},
{"lineNum":" 1119","line":"    sp.lock();"},
{"lineNum":" 1120","line":""},
{"lineNum":" 1121","line":"    if( p->_internal_equiv( *v ) )"},
{"lineNum":" 1122","line":"    {"},
{"lineNum":" 1123","line":"        p->swap( w );"},
{"lineNum":" 1124","line":""},
{"lineNum":" 1125","line":"        sp.unlock();"},
{"lineNum":" 1126","line":""},
{"lineNum":" 1127","line":"        return true;"},
{"lineNum":" 1128","line":"    }"},
{"lineNum":" 1129","line":"    else"},
{"lineNum":" 1130","line":"    {"},
{"lineNum":" 1131","line":"        shared_ptr<T> tmp( *p );"},
{"lineNum":" 1132","line":""},
{"lineNum":" 1133","line":"        sp.unlock();"},
{"lineNum":" 1134","line":""},
{"lineNum":" 1135","line":"        tmp.swap( *v );"},
{"lineNum":" 1136","line":"        return false;"},
{"lineNum":" 1137","line":"    }"},
{"lineNum":" 1138","line":"}"},
{"lineNum":" 1139","line":""},
{"lineNum":" 1140","line":"template<class T, class M> inline bool atomic_compare_exchange_explicit( shared_ptr<T> * p, shared_ptr<T> * v, shared_ptr<T> w, /*memory_order success*/ M, /*memory_order failure*/ M ) BOOST_SP_NOEXCEPT"},
{"lineNum":" 1141","line":"{"},
{"lineNum":" 1142","line":"    return atomic_compare_exchange( p, v, w ); // std::move( w )"},
{"lineNum":" 1143","line":"}"},
{"lineNum":" 1144","line":""},
{"lineNum":" 1145","line":"#endif // !defined(BOOST_SP_NO_ATOMIC_ACCESS)"},
{"lineNum":" 1146","line":""},
{"lineNum":" 1147","line":"// hash_value"},
{"lineNum":" 1148","line":""},
{"lineNum":" 1149","line":"template< class T > struct hash;"},
{"lineNum":" 1150","line":""},
{"lineNum":" 1151","line":"template< class T > std::size_t hash_value( boost::shared_ptr<T> const & p ) BOOST_SP_NOEXCEPT"},
{"lineNum":" 1152","line":"{"},
{"lineNum":" 1153","line":"    return boost::hash< typename boost::shared_ptr<T>::element_type* >()( p.get() );"},
{"lineNum":" 1154","line":"}"},
{"lineNum":" 1155","line":""},
{"lineNum":" 1156","line":"} // namespace boost"},
{"lineNum":" 1157","line":""},
{"lineNum":" 1158","line":"#include <boost/smart_ptr/detail/local_sp_deleter.hpp>"},
{"lineNum":" 1159","line":""},
{"lineNum":" 1160","line":"namespace boost"},
{"lineNum":" 1161","line":"{"},
{"lineNum":" 1162","line":""},
{"lineNum":" 1163","line":"namespace detail"},
{"lineNum":" 1164","line":"{"},
{"lineNum":" 1165","line":""},
{"lineNum":" 1166","line":"template<class D, class T> D * basic_get_local_deleter( D *, shared_ptr<T> const & p ) BOOST_SP_NOEXCEPT"},
{"lineNum":" 1167","line":"{"},
{"lineNum":" 1168","line":"    return static_cast<D *>( p._internal_get_local_deleter( BOOST_SP_TYPEID(local_sp_deleter<D>) ) );"},
{"lineNum":" 1169","line":"}"},
{"lineNum":" 1170","line":""},
{"lineNum":" 1171","line":"template<class D, class T> D const * basic_get_local_deleter( D const *, shared_ptr<T> const & p ) BOOST_SP_NOEXCEPT"},
{"lineNum":" 1172","line":"{"},
{"lineNum":" 1173","line":"    return static_cast<D *>( p._internal_get_local_deleter( BOOST_SP_TYPEID(local_sp_deleter<D>) ) );"},
{"lineNum":" 1174","line":"}"},
{"lineNum":" 1175","line":""},
{"lineNum":" 1176","line":"} // namespace detail"},
{"lineNum":" 1177","line":""},
{"lineNum":" 1178","line":"} // namespace boost"},
{"lineNum":" 1179","line":""},
{"lineNum":" 1180","line":"#if defined( BOOST_SP_DISABLE_DEPRECATED )"},
{"lineNum":" 1181","line":"#pragma GCC diagnostic pop"},
{"lineNum":" 1182","line":"#endif"},
{"lineNum":" 1183","line":""},
{"lineNum":" 1184","line":"#endif  // #ifndef BOOST_SMART_PTR_SHARED_PTR_HPP_INCLUDED"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 8, "covered" : 0,};
var merged_data = [];
