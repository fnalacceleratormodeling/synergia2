var data = {lines:[
{"lineNum":"    1","line":"/*============================================================================="},
{"lineNum":"    2","line":"    Copyright (c) 2001-2011 Joel de Guzman"},
{"lineNum":"    3","line":"    Copyright (c)      2011 Bryce Lelbach"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"    Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    6","line":"    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    7","line":"==============================================================================*/"},
{"lineNum":"    8","line":"#if !defined(BOOST_SPIRIT_INT_APR_17_2006_0830AM)"},
{"lineNum":"    9","line":"#define BOOST_SPIRIT_INT_APR_17_2006_0830AM"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"#if defined(_MSC_VER)"},
{"lineNum":"   12","line":"#pragma once"},
{"lineNum":"   13","line":"#endif"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"#include <boost/spirit/home/qi/skip_over.hpp>"},
{"lineNum":"   16","line":"#include <boost/spirit/home/qi/detail/enable_lit.hpp>"},
{"lineNum":"   17","line":"#include <boost/spirit/home/qi/numeric/numeric_utils.hpp>"},
{"lineNum":"   18","line":"#include <boost/spirit/home/qi/meta_compiler.hpp>"},
{"lineNum":"   19","line":"#include <boost/spirit/home/qi/parser.hpp>"},
{"lineNum":"   20","line":"#include <boost/spirit/home/support/common_terminals.hpp>"},
{"lineNum":"   21","line":"#include <boost/spirit/home/support/info.hpp>"},
{"lineNum":"   22","line":"#include <boost/spirit/home/support/detail/is_spirit_tag.hpp>"},
{"lineNum":"   23","line":"#include <boost/mpl/assert.hpp>"},
{"lineNum":"   24","line":"#include <boost/type_traits/is_same.hpp>"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"namespace boost { namespace spirit"},
{"lineNum":"   27","line":"{"},
{"lineNum":"   28","line":"    namespace tag"},
{"lineNum":"   29","line":"    {"},
{"lineNum":"   30","line":"        template <typename T, unsigned Radix, unsigned MinDigits"},
{"lineNum":"   31","line":"                , int MaxDigits>"},
{"lineNum":"   32","line":"        struct int_parser"},
{"lineNum":"   33","line":"        {"},
{"lineNum":"   34","line":"            BOOST_SPIRIT_IS_TAG()"},
{"lineNum":"   35","line":"        };"},
{"lineNum":"   36","line":"    }"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"    namespace qi"},
{"lineNum":"   39","line":"    {"},
{"lineNum":"   40","line":"        ///////////////////////////////////////////////////////////////////////"},
{"lineNum":"   41","line":"        // This one is the class that the user can instantiate directly in"},
{"lineNum":"   42","line":"        // order to create a customized int parser"},
{"lineNum":"   43","line":"        template <typename T = int, unsigned Radix = 10, unsigned MinDigits = 1"},
{"lineNum":"   44","line":"                , int MaxDigits = -1>"},
{"lineNum":"   45","line":"        struct int_parser"},
{"lineNum":"   46","line":"          : spirit::terminal<tag::int_parser<T, Radix, MinDigits, MaxDigits> >"},
{"lineNum":"   47","line":"        {};"},
{"lineNum":"   48","line":"    }"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   51","line":"    // Enablers"},
{"lineNum":"   52","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   53","line":"    //[primitive_parsers_enable_short"},
{"lineNum":"   54","line":"    template <> // enables short_"},
{"lineNum":"   55","line":"    struct use_terminal<qi::domain, tag::short_> : mpl::true_ {};"},
{"lineNum":"   56","line":"    //]"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"    template <typename A0> // enables lit(n)"},
{"lineNum":"   59","line":"    struct use_terminal<qi::domain"},
{"lineNum":"   60","line":"        , terminal_ex<tag::lit, fusion::vector1<A0> >"},
{"lineNum":"   61","line":"        , typename enable_if<is_same<A0, signed short> >::type>"},
{"lineNum":"   62","line":"      : mpl::true_ {};"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"    template <typename A0> // enables short_(n)"},
{"lineNum":"   65","line":"    struct use_terminal<qi::domain"},
{"lineNum":"   66","line":"        , terminal_ex<tag::short_, fusion::vector1<A0> > >"},
{"lineNum":"   67","line":"      : is_arithmetic<A0> {};"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"    template <> // enables *lazy* short_(n)"},
{"lineNum":"   70","line":"    struct use_lazy_terminal<qi::domain, tag::short_, 1> : mpl::true_ {};"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   73","line":"    //[primitive_parsers_enable_int"},
{"lineNum":"   74","line":"    template <> // enables int_"},
{"lineNum":"   75","line":"    struct use_terminal<qi::domain, tag::int_> : mpl::true_ {};"},
{"lineNum":"   76","line":"    //]"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"    template <typename A0> // enables lit(n)"},
{"lineNum":"   79","line":"    struct use_terminal<qi::domain"},
{"lineNum":"   80","line":"        , terminal_ex<tag::lit, fusion::vector1<A0> >"},
{"lineNum":"   81","line":"        , typename enable_if<is_same<A0, signed> >::type>"},
{"lineNum":"   82","line":"      : mpl::true_ {};"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"    template <typename A0> // enables int_(n)"},
{"lineNum":"   85","line":"    struct use_terminal<qi::domain"},
{"lineNum":"   86","line":"        , terminal_ex<tag::int_, fusion::vector1<A0> > >"},
{"lineNum":"   87","line":"      : is_arithmetic<A0> {};"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"    template <> // enables *lazy* int_(n)"},
{"lineNum":"   90","line":"    struct use_lazy_terminal<qi::domain, tag::int_, 1> : mpl::true_ {};"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   93","line":"    //[primitive_parsers_enable_long"},
{"lineNum":"   94","line":"    template <> // enables long_"},
{"lineNum":"   95","line":"    struct use_terminal<qi::domain, tag::long_> : mpl::true_ {};"},
{"lineNum":"   96","line":"    //]"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"    template <typename A0> // enables lit(n)"},
{"lineNum":"   99","line":"    struct use_terminal<qi::domain"},
{"lineNum":"  100","line":"        , terminal_ex<tag::lit, fusion::vector1<A0> >"},
{"lineNum":"  101","line":"        , typename enable_if<is_same<A0, signed long> >::type>"},
{"lineNum":"  102","line":"      : mpl::true_ {};"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"    template <typename A0> // enables long_(n)"},
{"lineNum":"  105","line":"    struct use_terminal<qi::domain"},
{"lineNum":"  106","line":"        , terminal_ex<tag::long_, fusion::vector1<A0> > >"},
{"lineNum":"  107","line":"      : is_arithmetic<A0> {};"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"    template <> // enables *lazy* long_(n)"},
{"lineNum":"  110","line":"    struct use_lazy_terminal<qi::domain, tag::long_, 1> : mpl::true_ {};"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  113","line":"#ifdef BOOST_HAS_LONG_LONG"},
{"lineNum":"  114","line":"    //[primitive_parsers_enable_long_long"},
{"lineNum":"  115","line":"    template <> // enables long_long"},
{"lineNum":"  116","line":"    struct use_terminal<qi::domain, tag::long_long> : mpl::true_ {};"},
{"lineNum":"  117","line":"    //]"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"    template <typename A0> // enables lit(n)"},
{"lineNum":"  120","line":"    struct use_terminal<qi::domain"},
{"lineNum":"  121","line":"        , terminal_ex<tag::lit, fusion::vector1<A0> >"},
{"lineNum":"  122","line":"        , typename enable_if<is_same<A0, boost::long_long_type> >::type>"},
{"lineNum":"  123","line":"      : mpl::true_ {};"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"    template <typename A0> // enables long_long(n)"},
{"lineNum":"  126","line":"    struct use_terminal<qi::domain"},
{"lineNum":"  127","line":"        , terminal_ex<tag::long_long, fusion::vector1<A0> > >"},
{"lineNum":"  128","line":"      : is_arithmetic<A0> {};"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"    template <> // enables *lazy* long_long(n)"},
{"lineNum":"  131","line":"    struct use_lazy_terminal<qi::domain, tag::long_long, 1> : mpl::true_ {};"},
{"lineNum":"  132","line":"#endif"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  135","line":"    // enables any custom int_parser"},
{"lineNum":"  136","line":"    template <typename T, unsigned Radix, unsigned MinDigits"},
{"lineNum":"  137","line":"            , int MaxDigits>"},
{"lineNum":"  138","line":"    struct use_terminal<qi::domain"},
{"lineNum":"  139","line":"        , tag::int_parser<T, Radix, MinDigits, MaxDigits> >"},
{"lineNum":"  140","line":"      : mpl::true_ {};"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"    // enables any custom int_parser(n)"},
{"lineNum":"  143","line":"    template <typename T, unsigned Radix, unsigned MinDigits"},
{"lineNum":"  144","line":"            , int MaxDigits, typename A0>"},
{"lineNum":"  145","line":"    struct use_terminal<qi::domain"},
{"lineNum":"  146","line":"        , terminal_ex<tag::int_parser<T, Radix, MinDigits, MaxDigits>"},
{"lineNum":"  147","line":"                  , fusion::vector1<A0> >"},
{"lineNum":"  148","line":"    > : mpl::true_ {};"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"    // enables *lazy* custom int_parser(n)"},
{"lineNum":"  151","line":"    template <typename T, unsigned Radix, unsigned MinDigits"},
{"lineNum":"  152","line":"            , int MaxDigits>"},
{"lineNum":"  153","line":"    struct use_lazy_terminal<qi::domain"},
{"lineNum":"  154","line":"      , tag::int_parser<T, Radix, MinDigits, MaxDigits>, 1"},
{"lineNum":"  155","line":"    > : mpl::true_ {};"},
{"lineNum":"  156","line":"}}"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"namespace boost { namespace spirit { namespace qi"},
{"lineNum":"  159","line":"{"},
{"lineNum":"  160","line":"#ifndef BOOST_SPIRIT_NO_PREDEFINED_TERMINALS"},
{"lineNum":"  161","line":"    using spirit::short_;"},
{"lineNum":"  162","line":"    using spirit::int_;"},
{"lineNum":"  163","line":"    using spirit::long_;"},
{"lineNum":"  164","line":"#ifdef BOOST_HAS_LONG_LONG"},
{"lineNum":"  165","line":"    using spirit::long_long;"},
{"lineNum":"  166","line":"#endif"},
{"lineNum":"  167","line":"    using spirit::lit;    // lit(1) is equivalent to 1"},
{"lineNum":"  168","line":"#endif"},
{"lineNum":"  169","line":"    using spirit::short_type;"},
{"lineNum":"  170","line":"    using spirit::int_type;"},
{"lineNum":"  171","line":"    using spirit::long_type;"},
{"lineNum":"  172","line":"    using spirit::lit_type;"},
{"lineNum":"  173","line":"#ifdef BOOST_HAS_LONG_LONG"},
{"lineNum":"  174","line":"    using spirit::long_long_type;"},
{"lineNum":"  175","line":"#endif"},
{"lineNum":"  176","line":"    using spirit::lit_type;"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  179","line":"    // This is the actual int parser"},
{"lineNum":"  180","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  181","line":"    //[primitive_parsers_int_parser"},
{"lineNum":"  182","line":"    template <"},
{"lineNum":"  183","line":"        typename T"},
{"lineNum":"  184","line":"      , unsigned Radix = 10"},
{"lineNum":"  185","line":"      , unsigned MinDigits = 1"},
{"lineNum":"  186","line":"      , int MaxDigits = -1>"},
{"lineNum":"  187","line":"    struct any_int_parser"},
{"lineNum":"  188","line":"      : primitive_parser<any_int_parser<T, Radix, MinDigits, MaxDigits> >"},
{"lineNum":"  189","line":"    {"},
{"lineNum":"  190","line":"        // check template parameter \'Radix\' for validity"},
{"lineNum":"  191","line":"        BOOST_SPIRIT_ASSERT_MSG("},
{"lineNum":"  192","line":"            Radix == 2 || Radix == 8 || Radix == 10 || Radix == 16,"},
{"lineNum":"  193","line":"            not_supported_radix, ());"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"        template <typename Context, typename Iterator>"},
{"lineNum":"  196","line":"        struct attribute"},
{"lineNum":"  197","line":"        {"},
{"lineNum":"  198","line":"            typedef T type;"},
{"lineNum":"  199","line":"        };"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"        template <typename Iterator, typename Context"},
{"lineNum":"  202","line":"          , typename Skipper, typename Attribute>"},
{"lineNum":"  203","line":"        bool parse(Iterator& first, Iterator const& last"},
{"lineNum":"  204","line":"          , Context& /*context*/, Skipper const& skipper"},
{"lineNum":"  205","line":"          , Attribute& attr_) const"},
{"lineNum":"  206","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  207","line":"            typedef extract_int<T, Radix, MinDigits, MaxDigits> extract;"},
{"lineNum":"  208","line":"            qi::skip_over(first, last, skipper);"},
{"lineNum":"  209","line":"            return extract::call(first, last, attr_);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  210","line":"        }"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"        template <typename Context>"},
{"lineNum":"  213","line":"        info what(Context& /*context*/) const"},
{"lineNum":"  214","line":"        {"},
{"lineNum":"  215","line":"            return info(\"integer\");"},
{"lineNum":"  216","line":"        }"},
{"lineNum":"  217","line":"    };"},
{"lineNum":"  218","line":"    //]"},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"    template <typename T, unsigned Radix = 10, unsigned MinDigits = 1"},
{"lineNum":"  221","line":"            , int MaxDigits = -1, bool no_attribute = true>"},
{"lineNum":"  222","line":"    struct literal_int_parser"},
{"lineNum":"  223","line":"      : primitive_parser<literal_int_parser<T, Radix, MinDigits, MaxDigits"},
{"lineNum":"  224","line":"        , no_attribute> >"},
{"lineNum":"  225","line":"    {"},
{"lineNum":"  226","line":"        // check template parameter \'Radix\' for validity"},
{"lineNum":"  227","line":"        BOOST_SPIRIT_ASSERT_MSG("},
{"lineNum":"  228","line":"            Radix == 2 || Radix == 8 || Radix == 10 || Radix == 16,"},
{"lineNum":"  229","line":"            not_supported_radix, ());"},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"        template <typename Value>"},
{"lineNum":"  232","line":"        literal_int_parser(Value const& n) : n_(n) {}"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"        template <typename Context, typename Iterator>"},
{"lineNum":"  235","line":"        struct attribute"},
{"lineNum":"  236","line":"          : mpl::if_c<no_attribute, unused_type, T>"},
{"lineNum":"  237","line":"        {};"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"        template <typename Iterator, typename Context"},
{"lineNum":"  240","line":"          , typename Skipper, typename Attribute>"},
{"lineNum":"  241","line":"        bool parse(Iterator& first, Iterator const& last"},
{"lineNum":"  242","line":"          , Context& /*context*/, Skipper const& skipper"},
{"lineNum":"  243","line":"          , Attribute& attr_param) const"},
{"lineNum":"  244","line":"        {"},
{"lineNum":"  245","line":"            typedef extract_int<T, Radix, MinDigits, MaxDigits> extract;"},
{"lineNum":"  246","line":"            qi::skip_over(first, last, skipper);"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"            Iterator save = first;"},
{"lineNum":"  249","line":"            T attr_;"},
{"lineNum":"  250","line":""},
{"lineNum":"  251","line":"            if (extract::call(first, last, attr_) && (attr_ == n_))"},
{"lineNum":"  252","line":"            {"},
{"lineNum":"  253","line":"                traits::assign_to(attr_, attr_param);"},
{"lineNum":"  254","line":"                return true;"},
{"lineNum":"  255","line":"            }"},
{"lineNum":"  256","line":""},
{"lineNum":"  257","line":"            first = save;"},
{"lineNum":"  258","line":"            return false;"},
{"lineNum":"  259","line":"        }"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"        template <typename Context>"},
{"lineNum":"  262","line":"        info what(Context& /*context*/) const"},
{"lineNum":"  263","line":"        {"},
{"lineNum":"  264","line":"            return info(\"integer\");"},
{"lineNum":"  265","line":"        }"},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"        T n_;"},
{"lineNum":"  268","line":"    };"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  271","line":"    // Parser generators: make_xxx function (objects)"},
{"lineNum":"  272","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  273","line":"    //[primitive_parsers_make_int"},
{"lineNum":"  274","line":"    template <"},
{"lineNum":"  275","line":"        typename T"},
{"lineNum":"  276","line":"      , unsigned Radix = 10"},
{"lineNum":"  277","line":"      , unsigned MinDigits = 1"},
{"lineNum":"  278","line":"      , int MaxDigits = -1>"},
{"lineNum":"  279","line":"    struct make_int"},
{"lineNum":"  280","line":"    {"},
{"lineNum":"  281","line":"        typedef any_int_parser<T, Radix, MinDigits, MaxDigits> result_type;"},
{"lineNum":"  282","line":"        result_type operator()(unused_type, unused_type) const"},
{"lineNum":"  283","line":"        {"},
{"lineNum":"  284","line":"            return result_type();"},
{"lineNum":"  285","line":"        }"},
{"lineNum":"  286","line":"    };"},
{"lineNum":"  287","line":"    //]"},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"    template <typename T, unsigned Radix = 10, unsigned MinDigits = 1"},
{"lineNum":"  290","line":"            , int MaxDigits = -1>"},
{"lineNum":"  291","line":"    struct make_direct_int"},
{"lineNum":"  292","line":"    {"},
{"lineNum":"  293","line":"        typedef literal_int_parser<T, Radix, MinDigits, MaxDigits, false>"},
{"lineNum":"  294","line":"            result_type;"},
{"lineNum":"  295","line":"        template <typename Terminal>"},
{"lineNum":"  296","line":"        result_type operator()(Terminal const& term, unused_type) const"},
{"lineNum":"  297","line":"        {"},
{"lineNum":"  298","line":"            return result_type(fusion::at_c<0>(term.args));"},
{"lineNum":"  299","line":"        }"},
{"lineNum":"  300","line":"    };"},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":"    template <typename T, unsigned Radix = 10, unsigned MinDigits = 1"},
{"lineNum":"  303","line":"            , int MaxDigits = -1>"},
{"lineNum":"  304","line":"    struct make_literal_int"},
{"lineNum":"  305","line":"    {"},
{"lineNum":"  306","line":"        typedef literal_int_parser<T, Radix, MinDigits, MaxDigits> result_type;"},
{"lineNum":"  307","line":"        template <typename Terminal>"},
{"lineNum":"  308","line":"        result_type operator()(Terminal const& term, unused_type) const"},
{"lineNum":"  309","line":"        {"},
{"lineNum":"  310","line":"            return result_type(fusion::at_c<0>(term.args));"},
{"lineNum":"  311","line":"        }"},
{"lineNum":"  312","line":"    };"},
{"lineNum":"  313","line":""},
{"lineNum":"  314","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  315","line":"    template <typename Modifiers, typename A0>"},
{"lineNum":"  316","line":"    struct make_primitive<"},
{"lineNum":"  317","line":"          terminal_ex<tag::lit, fusion::vector1<A0> >"},
{"lineNum":"  318","line":"        , Modifiers, typename enable_if<is_same<A0, signed short> >::type>"},
{"lineNum":"  319","line":"      : make_literal_int<signed short> {};"},
{"lineNum":"  320","line":""},
{"lineNum":"  321","line":"    template <typename Modifiers, typename A0>"},
{"lineNum":"  322","line":"    struct make_primitive<"},
{"lineNum":"  323","line":"          terminal_ex<tag::lit, fusion::vector1<A0> >"},
{"lineNum":"  324","line":"        , Modifiers, typename enable_if<is_same<A0, signed> >::type>"},
{"lineNum":"  325","line":"      : make_literal_int<signed> {};"},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"    template <typename Modifiers, typename A0>"},
{"lineNum":"  328","line":"    struct make_primitive<"},
{"lineNum":"  329","line":"          terminal_ex<tag::lit, fusion::vector1<A0> >"},
{"lineNum":"  330","line":"        , Modifiers, typename enable_if<is_same<A0, signed long> >::type>"},
{"lineNum":"  331","line":"      : make_literal_int<signed long> {};"},
{"lineNum":"  332","line":""},
{"lineNum":"  333","line":"#ifdef BOOST_HAS_LONG_LONG"},
{"lineNum":"  334","line":"    template <typename Modifiers, typename A0>"},
{"lineNum":"  335","line":"    struct make_primitive<"},
{"lineNum":"  336","line":"          terminal_ex<tag::lit, fusion::vector1<A0> >"},
{"lineNum":"  337","line":"        , Modifiers, typename enable_if<is_same<A0, boost::long_long_type> >::type>"},
{"lineNum":"  338","line":"      : make_literal_int<boost::long_long_type> {};"},
{"lineNum":"  339","line":"#endif"},
{"lineNum":"  340","line":""},
{"lineNum":"  341","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  342","line":"    template <typename T, unsigned Radix, unsigned MinDigits, int MaxDigits"},
{"lineNum":"  343","line":"            , typename Modifiers>"},
{"lineNum":"  344","line":"    struct make_primitive<"},
{"lineNum":"  345","line":"        tag::int_parser<T, Radix, MinDigits, MaxDigits>"},
{"lineNum":"  346","line":"      , Modifiers>"},
{"lineNum":"  347","line":"      : make_int<T, Radix, MinDigits, MaxDigits> {};"},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"    template <typename T, unsigned Radix, unsigned MinDigits, int MaxDigits"},
{"lineNum":"  350","line":"            , typename A0, typename Modifiers>"},
{"lineNum":"  351","line":"    struct make_primitive<"},
{"lineNum":"  352","line":"        terminal_ex<tag::int_parser<T, Radix, MinDigits, MaxDigits>"},
{"lineNum":"  353","line":"      , fusion::vector1<A0> >, Modifiers>"},
{"lineNum":"  354","line":"      : make_direct_int<T, Radix, MinDigits, MaxDigits> {};"},
{"lineNum":"  355","line":""},
{"lineNum":"  356","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  357","line":"    //[primitive_parsers_short_primitive"},
{"lineNum":"  358","line":"    template <typename Modifiers>"},
{"lineNum":"  359","line":"    struct make_primitive<tag::short_, Modifiers>"},
{"lineNum":"  360","line":"      : make_int<short> {};"},
{"lineNum":"  361","line":"    //]"},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"    template <typename Modifiers, typename A0>"},
{"lineNum":"  364","line":"    struct make_primitive<"},
{"lineNum":"  365","line":"        terminal_ex<tag::short_"},
{"lineNum":"  366","line":"      , fusion::vector1<A0> > , Modifiers>"},
{"lineNum":"  367","line":"      : make_direct_int<short> {};"},
{"lineNum":"  368","line":""},
{"lineNum":"  369","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  370","line":"    //[primitive_parsers_int_primitive"},
{"lineNum":"  371","line":"    template <typename Modifiers>"},
{"lineNum":"  372","line":"    struct make_primitive<tag::int_, Modifiers>"},
{"lineNum":"  373","line":"      : make_int<int> {};"},
{"lineNum":"  374","line":"    //]"},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"    template <typename Modifiers, typename A0>"},
{"lineNum":"  377","line":"    struct make_primitive<"},
{"lineNum":"  378","line":"        terminal_ex<tag::int_"},
{"lineNum":"  379","line":"      , fusion::vector1<A0> > , Modifiers>"},
{"lineNum":"  380","line":"      : make_direct_int<int> {};"},
{"lineNum":"  381","line":""},
{"lineNum":"  382","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  383","line":"    //[primitive_parsers_long_primitive"},
{"lineNum":"  384","line":"    template <typename Modifiers>"},
{"lineNum":"  385","line":"    struct make_primitive<tag::long_, Modifiers>"},
{"lineNum":"  386","line":"      : make_int<long> {};"},
{"lineNum":"  387","line":"    //]"},
{"lineNum":"  388","line":""},
{"lineNum":"  389","line":"    template <typename Modifiers, typename A0>"},
{"lineNum":"  390","line":"    struct make_primitive<"},
{"lineNum":"  391","line":"        terminal_ex<tag::long_"},
{"lineNum":"  392","line":"      , fusion::vector1<A0> > , Modifiers>"},
{"lineNum":"  393","line":"      : make_direct_int<long> {};"},
{"lineNum":"  394","line":""},
{"lineNum":"  395","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  396","line":"#ifdef BOOST_HAS_LONG_LONG"},
{"lineNum":"  397","line":"    //[primitive_parsers_long_long_primitive"},
{"lineNum":"  398","line":"    template <typename Modifiers>"},
{"lineNum":"  399","line":"    struct make_primitive<tag::long_long, Modifiers>"},
{"lineNum":"  400","line":"      : make_int<boost::long_long_type> {};"},
{"lineNum":"  401","line":"    //]"},
{"lineNum":"  402","line":""},
{"lineNum":"  403","line":"    template <typename Modifiers, typename A0>"},
{"lineNum":"  404","line":"    struct make_primitive<"},
{"lineNum":"  405","line":"        terminal_ex<tag::long_long"},
{"lineNum":"  406","line":"      , fusion::vector1<A0> > , Modifiers>"},
{"lineNum":"  407","line":"      : make_direct_int<boost::long_long_type> {};"},
{"lineNum":"  408","line":"#endif"},
{"lineNum":"  409","line":"}}}"},
{"lineNum":"  410","line":""},
{"lineNum":"  411","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 2, "covered" : 0,};
var merged_data = [];
