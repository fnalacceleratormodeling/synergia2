var data = {lines:[
{"lineNum":"    1","line":"// -*- C++ -*-"},
{"lineNum":"    2","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions."},
{"lineNum":"    5","line":"// See https://llvm.org/LICENSE.txt for license information."},
{"lineNum":"    6","line":"// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef _LIBCPP___ALGORITHM_SEARCH_H"},
{"lineNum":"   11","line":"#define _LIBCPP___ALGORITHM_SEARCH_H"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"#include <__algorithm/comp.h>"},
{"lineNum":"   14","line":"#include <__config>"},
{"lineNum":"   15","line":"#include <__iterator/iterator_traits.h>"},
{"lineNum":"   16","line":"#include <type_traits>"},
{"lineNum":"   17","line":"#include <utility>"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"},
{"lineNum":"   20","line":"#pragma GCC system_header"},
{"lineNum":"   21","line":"#endif"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"_LIBCPP_PUSH_MACROS"},
{"lineNum":"   24","line":"#include <__undef_macros>"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"_LIBCPP_BEGIN_NAMESPACE_STD"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"template <class _BinaryPredicate, class _ForwardIterator1, class _ForwardIterator2>"},
{"lineNum":"   29","line":"pair<_ForwardIterator1, _ForwardIterator1>"},
{"lineNum":"   30","line":"    _LIBCPP_CONSTEXPR_AFTER_CXX11 __search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,"},
{"lineNum":"   31","line":"                                           _ForwardIterator2 __first2, _ForwardIterator2 __last2,"},
{"lineNum":"   32","line":"                                           _BinaryPredicate __pred, forward_iterator_tag, forward_iterator_tag) {"},
{"lineNum":"   33","line":"  if (__first2 == __last2)"},
{"lineNum":"   34","line":"    return _VSTD::make_pair(__first1, __first1); // Everything matches an empty sequence"},
{"lineNum":"   35","line":"  while (true) {"},
{"lineNum":"   36","line":"    // Find first element in sequence 1 that matchs *__first2, with a mininum of loop checks"},
{"lineNum":"   37","line":"    while (true) {"},
{"lineNum":"   38","line":"      if (__first1 == __last1) // return __last1 if no element matches *__first2"},
{"lineNum":"   39","line":"        return _VSTD::make_pair(__last1, __last1);"},
{"lineNum":"   40","line":"      if (__pred(*__first1, *__first2))"},
{"lineNum":"   41","line":"        break;"},
{"lineNum":"   42","line":"      ++__first1;"},
{"lineNum":"   43","line":"    }"},
{"lineNum":"   44","line":"    // *__first1 matches *__first2, now match elements after here"},
{"lineNum":"   45","line":"    _ForwardIterator1 __m1 = __first1;"},
{"lineNum":"   46","line":"    _ForwardIterator2 __m2 = __first2;"},
{"lineNum":"   47","line":"    while (true) {"},
{"lineNum":"   48","line":"      if (++__m2 == __last2) // If pattern exhausted, __first1 is the answer (works for 1 element pattern)"},
{"lineNum":"   49","line":"        return _VSTD::make_pair(__first1, __m1);"},
{"lineNum":"   50","line":"      if (++__m1 == __last1) // Otherwise if source exhaused, pattern not found"},
{"lineNum":"   51","line":"        return _VSTD::make_pair(__last1, __last1);"},
{"lineNum":"   52","line":"      if (!__pred(*__m1, *__m2)) // if there is a mismatch, restart with a new __first1"},
{"lineNum":"   53","line":"      {"},
{"lineNum":"   54","line":"        ++__first1;"},
{"lineNum":"   55","line":"        break;"},
{"lineNum":"   56","line":"      } // else there is a match, check next elements"},
{"lineNum":"   57","line":"    }"},
{"lineNum":"   58","line":"  }"},
{"lineNum":"   59","line":"}"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"template <class _BinaryPredicate, class _RandomAccessIterator1, class _RandomAccessIterator2>"},
{"lineNum":"   62","line":"_LIBCPP_CONSTEXPR_AFTER_CXX11 pair<_RandomAccessIterator1, _RandomAccessIterator1>"},
{"lineNum":"   63","line":"__search(_RandomAccessIterator1 __first1, _RandomAccessIterator1 __last1, _RandomAccessIterator2 __first2,"},
{"lineNum":"   64","line":"         _RandomAccessIterator2 __last2, _BinaryPredicate __pred, random_access_iterator_tag,"},
{"lineNum":"   65","line":"         random_access_iterator_tag) {"},
{"lineNum":"   66","line":"  typedef typename iterator_traits<_RandomAccessIterator1>::difference_type _D1;"},
{"lineNum":"   67","line":"  typedef typename iterator_traits<_RandomAccessIterator2>::difference_type _D2;"},
{"lineNum":"   68","line":"  // Take advantage of knowing source and pattern lengths.  Stop short when source is smaller than pattern"},
{"lineNum":"   69","line":"  const _D2 __len2 = __last2 - __first2;"},
{"lineNum":"   70","line":"  if (__len2 == 0)"},
{"lineNum":"   71","line":"    return _VSTD::make_pair(__first1, __first1);"},
{"lineNum":"   72","line":"  const _D1 __len1 = __last1 - __first1;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   73","line":"  if (__len1 < __len2)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   74","line":"    return _VSTD::make_pair(__last1, __last1);"},
{"lineNum":"   75","line":"  const _RandomAccessIterator1 __s = __last1 - (__len2 - 1); // Start of pattern match can\'t go beyond here","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"  while (true) {"},
{"lineNum":"   78","line":"    while (true) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   79","line":"      if (__first1 == __s)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   80","line":"        return _VSTD::make_pair(__last1, __last1);"},
{"lineNum":"   81","line":"      if (__pred(*__first1, *__first2))","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   82","line":"        break;"},
{"lineNum":"   83","line":"      ++__first1;"},
{"lineNum":"   84","line":"    }"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"    _RandomAccessIterator1 __m1 = __first1;"},
{"lineNum":"   87","line":"    _RandomAccessIterator2 __m2 = __first2;"},
{"lineNum":"   88","line":"    while (true) {"},
{"lineNum":"   89","line":"      if (++__m2 == __last2)"},
{"lineNum":"   90","line":"        return _VSTD::make_pair(__first1, __first1 + __len2);"},
{"lineNum":"   91","line":"      ++__m1; // no need to check range on __m1 because __s guarantees we have enough source"},
{"lineNum":"   92","line":"      if (!__pred(*__m1, *__m2)) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   93","line":"        ++__first1;"},
{"lineNum":"   94","line":"        break;"},
{"lineNum":"   95","line":"      }"},
{"lineNum":"   96","line":"    }"},
{"lineNum":"   97","line":"  }"},
{"lineNum":"   98","line":"}"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"template <class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>"},
{"lineNum":"  101","line":"_LIBCPP_NODISCARD_EXT inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 _ForwardIterator1"},
{"lineNum":"  102","line":"search(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2,"},
{"lineNum":"  103","line":"       _BinaryPredicate __pred) {"},
{"lineNum":"  104","line":"  return _VSTD::__search<typename add_lvalue_reference<_BinaryPredicate>::type>("},
{"lineNum":"  105","line":"             __first1, __last1, __first2, __last2, __pred,"},
{"lineNum":"  106","line":"             typename iterator_traits<_ForwardIterator1>::iterator_category(),"},
{"lineNum":"  107","line":"             typename iterator_traits<_ForwardIterator2>::iterator_category()).first;"},
{"lineNum":"  108","line":"}"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"template <class _ForwardIterator1, class _ForwardIterator2>"},
{"lineNum":"  111","line":"_LIBCPP_NODISCARD_EXT inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 _ForwardIterator1"},
{"lineNum":"  112","line":"search(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2) {"},
{"lineNum":"  113","line":"  typedef typename iterator_traits<_ForwardIterator1>::value_type __v1;"},
{"lineNum":"  114","line":"  typedef typename iterator_traits<_ForwardIterator2>::value_type __v2;"},
{"lineNum":"  115","line":"  return _VSTD::search(__first1, __last1, __first2, __last2, __equal_to<__v1, __v2>());"},
{"lineNum":"  116","line":"}"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":"  119","line":"template <class _ForwardIterator, class _Searcher>"},
{"lineNum":"  120","line":"_LIBCPP_NODISCARD_EXT _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 _ForwardIterator"},
{"lineNum":"  121","line":"search(_ForwardIterator __f, _ForwardIterator __l, const _Searcher& __s) {"},
{"lineNum":"  122","line":"  return __s(__f, __l).first;"},
{"lineNum":"  123","line":"}"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"#endif"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"_LIBCPP_END_NAMESPACE_STD"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"_LIBCPP_POP_MACROS"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"#endif // _LIBCPP___ALGORITHM_SEARCH_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 7, "covered" : 0,};
var merged_data = [];
