var data = {lines:[
{"lineNum":"    1","line":"/* Copyright (C) 1991-2020 Free Software Foundation, Inc."},
{"lineNum":"    2","line":"   This file is part of the GNU C Library."},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"   The GNU C Library is free software; you can redistribute it and/or"},
{"lineNum":"    5","line":"   modify it under the terms of the GNU Lesser General Public"},
{"lineNum":"    6","line":"   License as published by the Free Software Foundation; either"},
{"lineNum":"    7","line":"   version 2.1 of the License, or (at your option) any later version."},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"   The GNU C Library is distributed in the hope that it will be useful,"},
{"lineNum":"   10","line":"   but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   11","line":"   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU"},
{"lineNum":"   12","line":"   Lesser General Public License for more details."},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"   You should have received a copy of the GNU Lesser General Public"},
{"lineNum":"   15","line":"   License along with the GNU C Library; if not, see"},
{"lineNum":"   16","line":"   <https://www.gnu.org/licenses/>.  */"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"/*"},
{"lineNum":"   19","line":" *\tISO C99 Standard 7.4: Character handling\t<ctype.h>"},
{"lineNum":"   20","line":" */"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"#ifndef\t_CTYPE_H"},
{"lineNum":"   23","line":"#define\t_CTYPE_H\t1"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"#include <features.h>"},
{"lineNum":"   26","line":"#include <bits/types.h>"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"__BEGIN_DECLS"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"#ifndef _ISbit"},
{"lineNum":"   31","line":"/* These are all the characteristics of characters."},
{"lineNum":"   32","line":"   If there get to be more than 16 distinct characteristics,"},
{"lineNum":"   33","line":"   many things must be changed that use `unsigned short int\'s."},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"   The characteristics are stored always in network byte order (big"},
{"lineNum":"   36","line":"   endian).  We define the bit value interpretations here dependent on the"},
{"lineNum":"   37","line":"   machine\'s byte order.  */"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"# include <bits/endian.h>"},
{"lineNum":"   40","line":"# if __BYTE_ORDER == __BIG_ENDIAN"},
{"lineNum":"   41","line":"#  define _ISbit(bit)\t(1 << (bit))"},
{"lineNum":"   42","line":"# else /* __BYTE_ORDER == __LITTLE_ENDIAN */"},
{"lineNum":"   43","line":"#  define _ISbit(bit)\t((bit) < 8 ? ((1 << (bit)) << 8) : ((1 << (bit)) >> 8))"},
{"lineNum":"   44","line":"# endif"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"enum"},
{"lineNum":"   47","line":"{"},
{"lineNum":"   48","line":"  _ISupper = _ISbit (0),\t/* UPPERCASE.  */"},
{"lineNum":"   49","line":"  _ISlower = _ISbit (1),\t/* lowercase.  */"},
{"lineNum":"   50","line":"  _ISalpha = _ISbit (2),\t/* Alphabetic.  */"},
{"lineNum":"   51","line":"  _ISdigit = _ISbit (3),\t/* Numeric.  */"},
{"lineNum":"   52","line":"  _ISxdigit = _ISbit (4),\t/* Hexadecimal numeric.  */"},
{"lineNum":"   53","line":"  _ISspace = _ISbit (5),\t/* Whitespace.  */"},
{"lineNum":"   54","line":"  _ISprint = _ISbit (6),\t/* Printing.  */"},
{"lineNum":"   55","line":"  _ISgraph = _ISbit (7),\t/* Graphical.  */"},
{"lineNum":"   56","line":"  _ISblank = _ISbit (8),\t/* Blank (usually SPC and TAB).  */"},
{"lineNum":"   57","line":"  _IScntrl = _ISbit (9),\t/* Control character.  */"},
{"lineNum":"   58","line":"  _ISpunct = _ISbit (10),\t/* Punctuation.  */"},
{"lineNum":"   59","line":"  _ISalnum = _ISbit (11)\t/* Alphanumeric.  */"},
{"lineNum":"   60","line":"};"},
{"lineNum":"   61","line":"#endif /* ! _ISbit  */"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"/* These are defined in ctype-info.c."},
{"lineNum":"   64","line":"   The declarations here must match those in localeinfo.h."},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"   In the thread-specific locale model (see `uselocale\' in <locale.h>)"},
{"lineNum":"   67","line":"   we cannot use global variables for these as was done in the past."},
{"lineNum":"   68","line":"   Instead, the following accessor functions return the address of"},
{"lineNum":"   69","line":"   each variable, which is local to the current thread if multithreaded."},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"   These point into arrays of 384, so they can be indexed by any `unsigned"},
{"lineNum":"   72","line":"   char\' value [0,255]; by EOF (-1); or by any `signed char\' value"},
{"lineNum":"   73","line":"   [-128,-1).  ISO C requires that the ctype functions work for `unsigned"},
{"lineNum":"   74","line":"   char\' values and for EOF; we also support negative `signed char\' values"},
{"lineNum":"   75","line":"   for broken old programs.  The case conversion arrays are of `int\'s"},
{"lineNum":"   76","line":"   rather than `unsigned char\'s because tolower (EOF) must be EOF, which"},
{"lineNum":"   77","line":"   doesn\'t fit into an `unsigned char\'.  But today more important is that"},
{"lineNum":"   78","line":"   the arrays are also used for multi-byte character sets.  */"},
{"lineNum":"   79","line":"extern const unsigned short int **__ctype_b_loc (void)"},
{"lineNum":"   80","line":"     __THROW __attribute__ ((__const__));"},
{"lineNum":"   81","line":"extern const __int32_t **__ctype_tolower_loc (void)"},
{"lineNum":"   82","line":"     __THROW __attribute__ ((__const__));"},
{"lineNum":"   83","line":"extern const __int32_t **__ctype_toupper_loc (void)"},
{"lineNum":"   84","line":"     __THROW __attribute__ ((__const__));"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"#ifndef __cplusplus"},
{"lineNum":"   88","line":"# define __isctype(c, type) \\"},
{"lineNum":"   89","line":"  ((*__ctype_b_loc ())[(int) (c)] & (unsigned short int) type)"},
{"lineNum":"   90","line":"#elif defined __USE_EXTERN_INLINES"},
{"lineNum":"   91","line":"# define __isctype_f(type) \\"},
{"lineNum":"   92","line":"  __extern_inline int\t\t\t\t\t\t\t      \\"},
{"lineNum":"   93","line":"  is##type (int __c) __THROW\t\t\t\t\t\t      \\"},
{"lineNum":"   94","line":"  {\t\t\t\t\t\t\t\t\t      \\"},
{"lineNum":"   95","line":"    return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _IS##type; \\"},
{"lineNum":"   96","line":"  }"},
{"lineNum":"   97","line":"#endif"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"#define\t__isascii(c)\t(((c) & ~0x7f) == 0)\t/* If C is a 7 bit value.  */"},
{"lineNum":"  100","line":"#define\t__toascii(c)\t((c) & 0x7f)\t\t/* Mask off high bits.  */"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"#define\t__exctype(name)\textern int name (int) __THROW"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"/* The following names are all functions:"},
{"lineNum":"  105","line":"     int isCHARACTERISTIC(int c);"},
{"lineNum":"  106","line":"   which return nonzero iff C has CHARACTERISTIC."},
{"lineNum":"  107","line":"   For the meaning of the characteristic names, see the `enum\' above.  */"},
{"lineNum":"  108","line":"__exctype (isalnum);"},
{"lineNum":"  109","line":"__exctype (isalpha);"},
{"lineNum":"  110","line":"__exctype (iscntrl);"},
{"lineNum":"  111","line":"__exctype (isdigit);"},
{"lineNum":"  112","line":"__exctype (islower);"},
{"lineNum":"  113","line":"__exctype (isgraph);"},
{"lineNum":"  114","line":"__exctype (isprint);"},
{"lineNum":"  115","line":"__exctype (ispunct);"},
{"lineNum":"  116","line":"__exctype (isspace);"},
{"lineNum":"  117","line":"__exctype (isupper);"},
{"lineNum":"  118","line":"__exctype (isxdigit);"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"/* Return the lowercase version of C.  */"},
{"lineNum":"  122","line":"extern int tolower (int __c) __THROW;"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"/* Return the uppercase version of C.  */"},
{"lineNum":"  125","line":"extern int toupper (int __c) __THROW;"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"/* ISO C99 introduced one new function.  */"},
{"lineNum":"  129","line":"#ifdef\t__USE_ISOC99"},
{"lineNum":"  130","line":"__exctype (isblank);"},
{"lineNum":"  131","line":"#endif"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"#ifdef __USE_GNU"},
{"lineNum":"  134","line":"/* Test C for a set of character classes according to MASK.  */"},
{"lineNum":"  135","line":"extern int isctype (int __c, int __mask) __THROW;"},
{"lineNum":"  136","line":"#endif"},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"#if defined __USE_MISC || defined __USE_XOPEN"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"/* Return nonzero iff C is in the ASCII set"},
{"lineNum":"  141","line":"   (i.e., is no more than 7 bits wide).  */"},
{"lineNum":"  142","line":"extern int isascii (int __c) __THROW;"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"/* Return the part of C that is in the ASCII set"},
{"lineNum":"  145","line":"   (i.e., the low-order 7 bits of C).  */"},
{"lineNum":"  146","line":"extern int toascii (int __c) __THROW;"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"/* These are the same as `toupper\' and `tolower\' except that they do not"},
{"lineNum":"  149","line":"   check the argument for being in the range of a `char\'.  */"},
{"lineNum":"  150","line":"__exctype (_toupper);"},
{"lineNum":"  151","line":"__exctype (_tolower);"},
{"lineNum":"  152","line":"#endif /* Use X/Open or use misc.  */"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"/* This code is needed for the optimized mapping functions.  */"},
{"lineNum":"  155","line":"#define __tobody(c, f, a, args) \\"},
{"lineNum":"  156","line":"  (__extension__\t\t\t\t\t\t\t      \\"},
{"lineNum":"  157","line":"   ({ int __res;\t\t\t\t\t\t\t      \\"},
{"lineNum":"  158","line":"      if (sizeof (c) > 1)\t\t\t\t\t\t      \\"},
{"lineNum":"  159","line":"\t{\t\t\t\t\t\t\t\t      \\"},
{"lineNum":"  160","line":"\t  if (__builtin_constant_p (c))\t\t\t\t\t      \\"},
{"lineNum":"  161","line":"\t    {\t\t\t\t\t\t\t\t      \\"},
{"lineNum":"  162","line":"\t      int __c = (c);\t\t\t\t\t\t      \\"},
{"lineNum":"  163","line":"\t      __res = __c < -128 || __c > 255 ? __c : (a)[__c];\t\t      \\"},
{"lineNum":"  164","line":"\t    }\t\t\t\t\t\t\t\t      \\"},
{"lineNum":"  165","line":"\t  else\t\t\t\t\t\t\t\t      \\"},
{"lineNum":"  166","line":"\t    __res = f args;\t\t\t\t\t\t      \\"},
{"lineNum":"  167","line":"\t}\t\t\t\t\t\t\t\t      \\"},
{"lineNum":"  168","line":"      else\t\t\t\t\t\t\t\t      \\"},
{"lineNum":"  169","line":"\t__res = (a)[(int) (c)];\t\t\t\t\t\t      \\"},
{"lineNum":"  170","line":"      __res; }))"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"#if !defined __NO_CTYPE"},
{"lineNum":"  173","line":"# ifdef __isctype_f"},
{"lineNum":"  174","line":"__isctype_f (alnum)","class":"lineNoCov","hits":"0","possible_hits":"22",},
{"lineNum":"  175","line":"__isctype_f (alpha)"},
{"lineNum":"  176","line":"__isctype_f (cntrl)"},
{"lineNum":"  177","line":"__isctype_f (digit)"},
{"lineNum":"  178","line":"__isctype_f (lower)"},
{"lineNum":"  179","line":"__isctype_f (graph)"},
{"lineNum":"  180","line":"__isctype_f (print)"},
{"lineNum":"  181","line":"__isctype_f (punct)"},
{"lineNum":"  182","line":"__isctype_f (space)"},
{"lineNum":"  183","line":"__isctype_f (upper)"},
{"lineNum":"  184","line":"__isctype_f (xdigit)"},
{"lineNum":"  185","line":"#  ifdef __USE_ISOC99"},
{"lineNum":"  186","line":"__isctype_f (blank)"},
{"lineNum":"  187","line":"#  endif"},
{"lineNum":"  188","line":"# elif defined __isctype"},
{"lineNum":"  189","line":"# define isalnum(c)\t__isctype((c), _ISalnum)"},
{"lineNum":"  190","line":"# define isalpha(c)\t__isctype((c), _ISalpha)"},
{"lineNum":"  191","line":"# define iscntrl(c)\t__isctype((c), _IScntrl)"},
{"lineNum":"  192","line":"# define isdigit(c)\t__isctype((c), _ISdigit)"},
{"lineNum":"  193","line":"# define islower(c)\t__isctype((c), _ISlower)"},
{"lineNum":"  194","line":"# define isgraph(c)\t__isctype((c), _ISgraph)"},
{"lineNum":"  195","line":"# define isprint(c)\t__isctype((c), _ISprint)"},
{"lineNum":"  196","line":"# define ispunct(c)\t__isctype((c), _ISpunct)"},
{"lineNum":"  197","line":"# define isspace(c)\t__isctype((c), _ISspace)"},
{"lineNum":"  198","line":"# define isupper(c)\t__isctype((c), _ISupper)"},
{"lineNum":"  199","line":"# define isxdigit(c)\t__isctype((c), _ISxdigit)"},
{"lineNum":"  200","line":"#  ifdef __USE_ISOC99"},
{"lineNum":"  201","line":"#   define isblank(c)\t__isctype((c), _ISblank)"},
{"lineNum":"  202","line":"#  endif"},
{"lineNum":"  203","line":"# endif"},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"# ifdef __USE_EXTERN_INLINES"},
{"lineNum":"  206","line":"__extern_inline int"},
{"lineNum":"  207","line":"__NTH (tolower (int __c))"},
{"lineNum":"  208","line":"{"},
{"lineNum":"  209","line":"  return __c >= -128 && __c < 256 ? (*__ctype_tolower_loc ())[__c] : __c;","class":"lineNoCov","hits":"0","possible_hits":"552",},
{"lineNum":"  210","line":"}"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"__extern_inline int"},
{"lineNum":"  213","line":"__NTH (toupper (int __c))"},
{"lineNum":"  214","line":"{"},
{"lineNum":"  215","line":"  return __c >= -128 && __c < 256 ? (*__ctype_toupper_loc ())[__c] : __c;","class":"lineNoCov","hits":"0","possible_hits":"17",},
{"lineNum":"  216","line":"}"},
{"lineNum":"  217","line":"# endif"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"# if __GNUC__ >= 2 && defined __OPTIMIZE__ && !defined __cplusplus"},
{"lineNum":"  220","line":"#  define tolower(c)\t__tobody (c, tolower, *__ctype_tolower_loc (), (c))"},
{"lineNum":"  221","line":"#  define toupper(c)\t__tobody (c, toupper, *__ctype_toupper_loc (), (c))"},
{"lineNum":"  222","line":"# endif /* Optimizing gcc */"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"# if defined __USE_MISC || defined __USE_XOPEN"},
{"lineNum":"  225","line":"#  define isascii(c)\t__isascii (c)"},
{"lineNum":"  226","line":"#  define toascii(c)\t__toascii (c)"},
{"lineNum":"  227","line":""},
{"lineNum":"  228","line":"#  define _tolower(c)\t((int) (*__ctype_tolower_loc ())[(int) (c)])"},
{"lineNum":"  229","line":"#  define _toupper(c)\t((int) (*__ctype_toupper_loc ())[(int) (c)])"},
{"lineNum":"  230","line":"# endif"},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"#endif /* Not __NO_CTYPE.  */"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"#ifdef __USE_XOPEN2K8"},
{"lineNum":"  236","line":"/* POSIX.1-2008 extended locale interface (see locale.h).  */"},
{"lineNum":"  237","line":"# include <bits/types/locale_t.h>"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"/* These definitions are similar to the ones above but all functions"},
{"lineNum":"  240","line":"   take as an argument a handle for the locale which shall be used.  */"},
{"lineNum":"  241","line":"#  define __isctype_l(c, type, locale) \\"},
{"lineNum":"  242","line":"  ((locale)->__ctype_b[(int) (c)] & (unsigned short int) type)"},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"# define __exctype_l(name) \t\t\t\t\t\t      \\"},
{"lineNum":"  245","line":"  extern int name (int, locale_t) __THROW"},
{"lineNum":"  246","line":""},
{"lineNum":"  247","line":"/* The following names are all functions:"},
{"lineNum":"  248","line":"     int isCHARACTERISTIC(int c, locale_t *locale);"},
{"lineNum":"  249","line":"   which return nonzero iff C has CHARACTERISTIC."},
{"lineNum":"  250","line":"   For the meaning of the characteristic names, see the `enum\' above.  */"},
{"lineNum":"  251","line":"__exctype_l (isalnum_l);"},
{"lineNum":"  252","line":"__exctype_l (isalpha_l);"},
{"lineNum":"  253","line":"__exctype_l (iscntrl_l);"},
{"lineNum":"  254","line":"__exctype_l (isdigit_l);"},
{"lineNum":"  255","line":"__exctype_l (islower_l);"},
{"lineNum":"  256","line":"__exctype_l (isgraph_l);"},
{"lineNum":"  257","line":"__exctype_l (isprint_l);"},
{"lineNum":"  258","line":"__exctype_l (ispunct_l);"},
{"lineNum":"  259","line":"__exctype_l (isspace_l);"},
{"lineNum":"  260","line":"__exctype_l (isupper_l);"},
{"lineNum":"  261","line":"__exctype_l (isxdigit_l);"},
{"lineNum":"  262","line":""},
{"lineNum":"  263","line":"__exctype_l (isblank_l);"},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":""},
{"lineNum":"  266","line":"/* Return the lowercase version of C in locale L.  */"},
{"lineNum":"  267","line":"extern int __tolower_l (int __c, locale_t __l) __THROW;"},
{"lineNum":"  268","line":"extern int tolower_l (int __c, locale_t __l) __THROW;"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"/* Return the uppercase version of C.  */"},
{"lineNum":"  271","line":"extern int __toupper_l (int __c, locale_t __l) __THROW;"},
{"lineNum":"  272","line":"extern int toupper_l (int __c, locale_t __l) __THROW;"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"# if __GNUC__ >= 2 && defined __OPTIMIZE__ && !defined __cplusplus"},
{"lineNum":"  275","line":"#  define __tolower_l(c, locale) \\"},
{"lineNum":"  276","line":"  __tobody (c, __tolower_l, (locale)->__ctype_tolower, (c, locale))"},
{"lineNum":"  277","line":"#  define __toupper_l(c, locale) \\"},
{"lineNum":"  278","line":"  __tobody (c, __toupper_l, (locale)->__ctype_toupper, (c, locale))"},
{"lineNum":"  279","line":"#  define tolower_l(c, locale)\t__tolower_l ((c), (locale))"},
{"lineNum":"  280","line":"#  define toupper_l(c, locale)\t__toupper_l ((c), (locale))"},
{"lineNum":"  281","line":"# endif\t/* Optimizing gcc */"},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"# ifndef __NO_CTYPE"},
{"lineNum":"  285","line":"#  define __isalnum_l(c,l)\t__isctype_l((c), _ISalnum, (l))"},
{"lineNum":"  286","line":"#  define __isalpha_l(c,l)\t__isctype_l((c), _ISalpha, (l))"},
{"lineNum":"  287","line":"#  define __iscntrl_l(c,l)\t__isctype_l((c), _IScntrl, (l))"},
{"lineNum":"  288","line":"#  define __isdigit_l(c,l)\t__isctype_l((c), _ISdigit, (l))"},
{"lineNum":"  289","line":"#  define __islower_l(c,l)\t__isctype_l((c), _ISlower, (l))"},
{"lineNum":"  290","line":"#  define __isgraph_l(c,l)\t__isctype_l((c), _ISgraph, (l))"},
{"lineNum":"  291","line":"#  define __isprint_l(c,l)\t__isctype_l((c), _ISprint, (l))"},
{"lineNum":"  292","line":"#  define __ispunct_l(c,l)\t__isctype_l((c), _ISpunct, (l))"},
{"lineNum":"  293","line":"#  define __isspace_l(c,l)\t__isctype_l((c), _ISspace, (l))"},
{"lineNum":"  294","line":"#  define __isupper_l(c,l)\t__isctype_l((c), _ISupper, (l))"},
{"lineNum":"  295","line":"#  define __isxdigit_l(c,l)\t__isctype_l((c), _ISxdigit, (l))"},
{"lineNum":"  296","line":""},
{"lineNum":"  297","line":"#  define __isblank_l(c,l)\t__isctype_l((c), _ISblank, (l))"},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"#  ifdef __USE_MISC"},
{"lineNum":"  300","line":"#   define __isascii_l(c,l)\t((l), __isascii (c))"},
{"lineNum":"  301","line":"#   define __toascii_l(c,l)\t((l), __toascii (c))"},
{"lineNum":"  302","line":"#  endif"},
{"lineNum":"  303","line":""},
{"lineNum":"  304","line":"#  define isalnum_l(c,l)\t__isalnum_l ((c), (l))"},
{"lineNum":"  305","line":"#  define isalpha_l(c,l)\t__isalpha_l ((c), (l))"},
{"lineNum":"  306","line":"#  define iscntrl_l(c,l)\t__iscntrl_l ((c), (l))"},
{"lineNum":"  307","line":"#  define isdigit_l(c,l)\t__isdigit_l ((c), (l))"},
{"lineNum":"  308","line":"#  define islower_l(c,l)\t__islower_l ((c), (l))"},
{"lineNum":"  309","line":"#  define isgraph_l(c,l)\t__isgraph_l ((c), (l))"},
{"lineNum":"  310","line":"#  define isprint_l(c,l)\t__isprint_l ((c), (l))"},
{"lineNum":"  311","line":"#  define ispunct_l(c,l)\t__ispunct_l ((c), (l))"},
{"lineNum":"  312","line":"#  define isspace_l(c,l)\t__isspace_l ((c), (l))"},
{"lineNum":"  313","line":"#  define isupper_l(c,l)\t__isupper_l ((c), (l))"},
{"lineNum":"  314","line":"#  define isxdigit_l(c,l)\t__isxdigit_l ((c), (l))"},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":"#  define isblank_l(c,l)\t__isblank_l ((c), (l))"},
{"lineNum":"  317","line":""},
{"lineNum":"  318","line":"#  ifdef __USE_MISC"},
{"lineNum":"  319","line":"#   define isascii_l(c,l)\t__isascii_l ((c), (l))"},
{"lineNum":"  320","line":"#   define toascii_l(c,l)\t__toascii_l ((c), (l))"},
{"lineNum":"  321","line":"#  endif"},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"# endif /* Not __NO_CTYPE.  */"},
{"lineNum":"  324","line":""},
{"lineNum":"  325","line":"#endif /* Use POSIX 2008.  */"},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"__END_DECLS"},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"#endif /* ctype.h  */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-14 19:20:37", "instrumented" : 3, "covered" : 0,};
var merged_data = [];
