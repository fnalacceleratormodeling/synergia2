var data = {lines:[
{"lineNum":"    1","line":"// This file is part of Eigen, a lightweight C++ template library"},
{"lineNum":"    2","line":"// for linear algebra."},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Copyright (C) 2009 Benoit Jacob <jacob.benoit.1@gmail.com>"},
{"lineNum":"    5","line":"// Copyright (C) 2009-2015 Gael Guennebaud <gael.guennebaud@inria.fr>"},
{"lineNum":"    6","line":"//"},
{"lineNum":"    7","line":"// This Source Code Form is subject to the terms of the Mozilla"},
{"lineNum":"    8","line":"// Public License v. 2.0. If a copy of the MPL was not distributed"},
{"lineNum":"    9","line":"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/."},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"#ifndef EIGEN_PERMUTATIONMATRIX_H"},
{"lineNum":"   12","line":"#define EIGEN_PERMUTATIONMATRIX_H"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"#include \"./InternalHeaderCheck.h\""},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"namespace Eigen {"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"namespace internal {"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"enum PermPermProduct_t {PermPermProduct};"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"} // end namespace internal"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"/** \\class PermutationBase"},
{"lineNum":"   25","line":"  * \\ingroup Core_Module"},
{"lineNum":"   26","line":"  *"},
{"lineNum":"   27","line":"  * \\brief Base class for permutations"},
{"lineNum":"   28","line":"  *"},
{"lineNum":"   29","line":"  * \\tparam Derived the derived class"},
{"lineNum":"   30","line":"  *"},
{"lineNum":"   31","line":"  * This class is the base class for all expressions representing a permutation matrix,"},
{"lineNum":"   32","line":"  * internally stored as a vector of integers."},
{"lineNum":"   33","line":"  * The convention followed here is that if \\f$ \\sigma \\f$ is a permutation, the corresponding permutation matrix"},
{"lineNum":"   34","line":"  * \\f$ P_\\sigma \\f$ is such that if \\f$ (e_1,\\ldots,e_p) \\f$ is the canonical basis, we have:"},
{"lineNum":"   35","line":"  *  \\f[ P_\\sigma(e_i) = e_{\\sigma(i)}. \\f]"},
{"lineNum":"   36","line":"  * This convention ensures that for any two permutations \\f$ \\sigma, \\tau \\f$, we have:"},
{"lineNum":"   37","line":"  *  \\f[ P_{\\sigma\\circ\\tau} = P_\\sigma P_\\tau. \\f]"},
{"lineNum":"   38","line":"  *"},
{"lineNum":"   39","line":"  * Permutation matrices are square and invertible."},
{"lineNum":"   40","line":"  *"},
{"lineNum":"   41","line":"  * Notice that in addition to the member functions and operators listed here, there also are non-member"},
{"lineNum":"   42","line":"  * operator* to multiply any kind of permutation object with any kind of matrix expression (MatrixBase)"},
{"lineNum":"   43","line":"  * on either side."},
{"lineNum":"   44","line":"  *"},
{"lineNum":"   45","line":"  * \\sa class PermutationMatrix, class PermutationWrapper"},
{"lineNum":"   46","line":"  */"},
{"lineNum":"   47","line":"template<typename Derived>"},
{"lineNum":"   48","line":"class PermutationBase : public EigenBase<Derived>"},
{"lineNum":"   49","line":"{"},
{"lineNum":"   50","line":"    typedef internal::traits<Derived> Traits;"},
{"lineNum":"   51","line":"    typedef EigenBase<Derived> Base;"},
{"lineNum":"   52","line":"  public:"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"    #ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"   55","line":"    typedef typename Traits::IndicesType IndicesType;"},
{"lineNum":"   56","line":"    enum {"},
{"lineNum":"   57","line":"      Flags = Traits::Flags,"},
{"lineNum":"   58","line":"      RowsAtCompileTime = Traits::RowsAtCompileTime,"},
{"lineNum":"   59","line":"      ColsAtCompileTime = Traits::ColsAtCompileTime,"},
{"lineNum":"   60","line":"      MaxRowsAtCompileTime = Traits::MaxRowsAtCompileTime,"},
{"lineNum":"   61","line":"      MaxColsAtCompileTime = Traits::MaxColsAtCompileTime"},
{"lineNum":"   62","line":"    };"},
{"lineNum":"   63","line":"    typedef typename Traits::StorageIndex StorageIndex;"},
{"lineNum":"   64","line":"    typedef Matrix<StorageIndex,RowsAtCompileTime,ColsAtCompileTime,0,MaxRowsAtCompileTime,MaxColsAtCompileTime>"},
{"lineNum":"   65","line":"            DenseMatrixType;"},
{"lineNum":"   66","line":"    typedef PermutationMatrix<IndicesType::SizeAtCompileTime,IndicesType::MaxSizeAtCompileTime,StorageIndex>"},
{"lineNum":"   67","line":"            PlainPermutationType;"},
{"lineNum":"   68","line":"    typedef PlainPermutationType PlainObject;"},
{"lineNum":"   69","line":"    using Base::derived;"},
{"lineNum":"   70","line":"    typedef Inverse<Derived> InverseReturnType;"},
{"lineNum":"   71","line":"    typedef void Scalar;"},
{"lineNum":"   72","line":"    #endif"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"    /** Copies the other permutation into *this */"},
{"lineNum":"   75","line":"    template<typename OtherDerived>"},
{"lineNum":"   76","line":"    Derived& operator=(const PermutationBase<OtherDerived>& other)"},
{"lineNum":"   77","line":"    {"},
{"lineNum":"   78","line":"      indices() = other.indices();"},
{"lineNum":"   79","line":"      return derived();"},
{"lineNum":"   80","line":"    }"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"    /** Assignment from the Transpositions \\a tr */"},
{"lineNum":"   83","line":"    template<typename OtherDerived>"},
{"lineNum":"   84","line":"    Derived& operator=(const TranspositionsBase<OtherDerived>& tr)"},
{"lineNum":"   85","line":"    {"},
{"lineNum":"   86","line":"      setIdentity(tr.size());"},
{"lineNum":"   87","line":"      for(Index k=size()-1; k>=0; --k)","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"   88","line":"        applyTranspositionOnTheRight(k,tr.coeff(k));","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":"   89","line":"      return derived();"},
{"lineNum":"   90","line":"    }"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"    /** \\returns the number of rows */"},
{"lineNum":"   93","line":"    inline EIGEN_DEVICE_FUNC Index rows() const { return Index(indices().size()); }"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"    /** \\returns the number of columns */"},
{"lineNum":"   96","line":"    inline EIGEN_DEVICE_FUNC Index cols() const { return Index(indices().size()); }"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"    /** \\returns the size of a side of the respective square matrix, i.e., the number of indices */"},
{"lineNum":"   99","line":"    inline EIGEN_DEVICE_FUNC Index size() const { return Index(indices().size()); }"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"    #ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"  102","line":"    template<typename DenseDerived>"},
{"lineNum":"  103","line":"    void evalTo(MatrixBase<DenseDerived>& other) const"},
{"lineNum":"  104","line":"    {"},
{"lineNum":"  105","line":"      other.setZero();"},
{"lineNum":"  106","line":"      for (Index i=0; i<rows(); ++i)"},
{"lineNum":"  107","line":"        other.coeffRef(indices().coeff(i),i) = typename DenseDerived::Scalar(1);"},
{"lineNum":"  108","line":"    }"},
{"lineNum":"  109","line":"    #endif"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"    /** \\returns a Matrix object initialized from this permutation matrix. Notice that it"},
{"lineNum":"  112","line":"      * is inefficient to return this Matrix object by value. For efficiency, favor using"},
{"lineNum":"  113","line":"      * the Matrix constructor taking EigenBase objects."},
{"lineNum":"  114","line":"      */"},
{"lineNum":"  115","line":"    DenseMatrixType toDenseMatrix() const"},
{"lineNum":"  116","line":"    {"},
{"lineNum":"  117","line":"      return derived();"},
{"lineNum":"  118","line":"    }"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"    /** const version of indices(). */"},
{"lineNum":"  121","line":"    const IndicesType& indices() const { return derived().indices(); }"},
{"lineNum":"  122","line":"    /** \\returns a reference to the stored array representing the permutation. */"},
{"lineNum":"  123","line":"    IndicesType& indices() { return derived().indices(); }"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"    /** Resizes to given size."},
{"lineNum":"  126","line":"      */"},
{"lineNum":"  127","line":"    inline void resize(Index newSize)"},
{"lineNum":"  128","line":"    {"},
{"lineNum":"  129","line":"      indices().resize(newSize);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  130","line":"    }"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"    /** Sets *this to be the identity permutation matrix */"},
{"lineNum":"  133","line":"    void setIdentity()"},
{"lineNum":"  134","line":"    {"},
{"lineNum":"  135","line":"      StorageIndex n = StorageIndex(size());"},
{"lineNum":"  136","line":"      for(StorageIndex i = 0; i < n; ++i)","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  137","line":"        indices().coeffRef(i) = i;","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  138","line":"    }"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"    /** Sets *this to be the identity permutation matrix of given size."},
{"lineNum":"  141","line":"      */"},
{"lineNum":"  142","line":"    void setIdentity(Index newSize)"},
{"lineNum":"  143","line":"    {"},
{"lineNum":"  144","line":"      resize(newSize);"},
{"lineNum":"  145","line":"      setIdentity();"},
{"lineNum":"  146","line":"    }"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"    /** Multiplies *this by the transposition \\f$(ij)\\f$ on the left."},
{"lineNum":"  149","line":"      *"},
{"lineNum":"  150","line":"      * \\returns a reference to *this."},
{"lineNum":"  151","line":"      *"},
{"lineNum":"  152","line":"      * \\warning This is much slower than applyTranspositionOnTheRight(Index,Index):"},
{"lineNum":"  153","line":"      * this has linear complexity and requires a lot of branching."},
{"lineNum":"  154","line":"      *"},
{"lineNum":"  155","line":"      * \\sa applyTranspositionOnTheRight(Index,Index)"},
{"lineNum":"  156","line":"      */"},
{"lineNum":"  157","line":"    Derived& applyTranspositionOnTheLeft(Index i, Index j)"},
{"lineNum":"  158","line":"    {"},
{"lineNum":"  159","line":"      eigen_assert(i>=0 && j>=0 && i<size() && j<size());"},
{"lineNum":"  160","line":"      for(Index k = 0; k < size(); ++k)"},
{"lineNum":"  161","line":"      {"},
{"lineNum":"  162","line":"        if(indices().coeff(k) == i) indices().coeffRef(k) = StorageIndex(j);"},
{"lineNum":"  163","line":"        else if(indices().coeff(k) == j) indices().coeffRef(k) = StorageIndex(i);"},
{"lineNum":"  164","line":"      }"},
{"lineNum":"  165","line":"      return derived();"},
{"lineNum":"  166","line":"    }"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"    /** Multiplies *this by the transposition \\f$(ij)\\f$ on the right."},
{"lineNum":"  169","line":"      *"},
{"lineNum":"  170","line":"      * \\returns a reference to *this."},
{"lineNum":"  171","line":"      *"},
{"lineNum":"  172","line":"      * This is a fast operation, it only consists in swapping two indices."},
{"lineNum":"  173","line":"      *"},
{"lineNum":"  174","line":"      * \\sa applyTranspositionOnTheLeft(Index,Index)"},
{"lineNum":"  175","line":"      */"},
{"lineNum":"  176","line":"    Derived& applyTranspositionOnTheRight(Index i, Index j)"},
{"lineNum":"  177","line":"    {"},
{"lineNum":"  178","line":"      eigen_assert(i>=0 && j>=0 && i<size() && j<size());"},
{"lineNum":"  179","line":"      std::swap(indices().coeffRef(i), indices().coeffRef(j));"},
{"lineNum":"  180","line":"      return derived();"},
{"lineNum":"  181","line":"    }"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"    /** \\returns the inverse permutation matrix."},
{"lineNum":"  184","line":"      *"},
{"lineNum":"  185","line":"      * \\note \\blank \\note_try_to_help_rvo"},
{"lineNum":"  186","line":"      */"},
{"lineNum":"  187","line":"    inline InverseReturnType inverse() const"},
{"lineNum":"  188","line":"    { return InverseReturnType(derived()); }"},
{"lineNum":"  189","line":"    /** \\returns the tranpose permutation matrix."},
{"lineNum":"  190","line":"      *"},
{"lineNum":"  191","line":"      * \\note \\blank \\note_try_to_help_rvo"},
{"lineNum":"  192","line":"      */"},
{"lineNum":"  193","line":"    inline InverseReturnType transpose() const"},
{"lineNum":"  194","line":"    { return InverseReturnType(derived()); }"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"    /**** multiplication helpers to hopefully get RVO ****/"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"#ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"  200","line":"  protected:"},
{"lineNum":"  201","line":"    template<typename OtherDerived>"},
{"lineNum":"  202","line":"    void assignTranspose(const PermutationBase<OtherDerived>& other)"},
{"lineNum":"  203","line":"    {"},
{"lineNum":"  204","line":"      for (Index i=0; i<rows();++i) indices().coeffRef(other.indices().coeff(i)) = i;"},
{"lineNum":"  205","line":"    }"},
{"lineNum":"  206","line":"    template<typename Lhs,typename Rhs>"},
{"lineNum":"  207","line":"    void assignProduct(const Lhs& lhs, const Rhs& rhs)"},
{"lineNum":"  208","line":"    {"},
{"lineNum":"  209","line":"      eigen_assert(lhs.cols() == rhs.rows());"},
{"lineNum":"  210","line":"      for (Index i=0; i<rows();++i) indices().coeffRef(i) = lhs.indices().coeff(rhs.indices().coeff(i));"},
{"lineNum":"  211","line":"    }"},
{"lineNum":"  212","line":"#endif"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"  public:"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"    /** \\returns the product permutation matrix."},
{"lineNum":"  217","line":"      *"},
{"lineNum":"  218","line":"      * \\note \\blank \\note_try_to_help_rvo"},
{"lineNum":"  219","line":"      */"},
{"lineNum":"  220","line":"    template<typename Other>"},
{"lineNum":"  221","line":"    inline PlainPermutationType operator*(const PermutationBase<Other>& other) const"},
{"lineNum":"  222","line":"    { return PlainPermutationType(internal::PermPermProduct, derived(), other.derived()); }"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"    /** \\returns the product of a permutation with another inverse permutation."},
{"lineNum":"  225","line":"      *"},
{"lineNum":"  226","line":"      * \\note \\blank \\note_try_to_help_rvo"},
{"lineNum":"  227","line":"      */"},
{"lineNum":"  228","line":"    template<typename Other>"},
{"lineNum":"  229","line":"    inline PlainPermutationType operator*(const InverseImpl<Other,PermutationStorage>& other) const"},
{"lineNum":"  230","line":"    { return PlainPermutationType(internal::PermPermProduct, *this, other.eval()); }"},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"    /** \\returns the product of an inverse permutation with another permutation."},
{"lineNum":"  233","line":"      *"},
{"lineNum":"  234","line":"      * \\note \\blank \\note_try_to_help_rvo"},
{"lineNum":"  235","line":"      */"},
{"lineNum":"  236","line":"    template<typename Other> friend"},
{"lineNum":"  237","line":"    inline PlainPermutationType operator*(const InverseImpl<Other, PermutationStorage>& other, const PermutationBase& perm)"},
{"lineNum":"  238","line":"    { return PlainPermutationType(internal::PermPermProduct, other.eval(), perm); }"},
{"lineNum":"  239","line":""},
{"lineNum":"  240","line":"    /** \\returns the determinant of the permutation matrix, which is either 1 or -1 depending on the parity of the permutation."},
{"lineNum":"  241","line":"      *"},
{"lineNum":"  242","line":"      * This function is O(\\c n) procedure allocating a buffer of \\c n booleans."},
{"lineNum":"  243","line":"      */"},
{"lineNum":"  244","line":"    Index determinant() const"},
{"lineNum":"  245","line":"    {"},
{"lineNum":"  246","line":"      Index res = 1;"},
{"lineNum":"  247","line":"      Index n = size();"},
{"lineNum":"  248","line":"      Matrix<bool,RowsAtCompileTime,1,0,MaxRowsAtCompileTime> mask(n);"},
{"lineNum":"  249","line":"      mask.fill(false);"},
{"lineNum":"  250","line":"      Index r = 0;"},
{"lineNum":"  251","line":"      while(r < n)"},
{"lineNum":"  252","line":"      {"},
{"lineNum":"  253","line":"        // search for the next seed"},
{"lineNum":"  254","line":"        while(r<n && mask[r]) r++;"},
{"lineNum":"  255","line":"        if(r>=n)"},
{"lineNum":"  256","line":"          break;"},
{"lineNum":"  257","line":"        // we got one, let\'s follow it until we are back to the seed"},
{"lineNum":"  258","line":"        Index k0 = r++;"},
{"lineNum":"  259","line":"        mask.coeffRef(k0) = true;"},
{"lineNum":"  260","line":"        for(Index k=indices().coeff(k0); k!=k0; k=indices().coeff(k))"},
{"lineNum":"  261","line":"        {"},
{"lineNum":"  262","line":"          mask.coeffRef(k) = true;"},
{"lineNum":"  263","line":"          res = -res;"},
{"lineNum":"  264","line":"        }"},
{"lineNum":"  265","line":"      }"},
{"lineNum":"  266","line":"      return res;"},
{"lineNum":"  267","line":"    }"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"  protected:"},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"};"},
{"lineNum":"  272","line":""},
{"lineNum":"  273","line":"namespace internal {"},
{"lineNum":"  274","line":"template<int SizeAtCompileTime, int MaxSizeAtCompileTime, typename StorageIndex_>"},
{"lineNum":"  275","line":"struct traits<PermutationMatrix<SizeAtCompileTime, MaxSizeAtCompileTime, StorageIndex_> >"},
{"lineNum":"  276","line":" : traits<Matrix<StorageIndex_,SizeAtCompileTime,SizeAtCompileTime,0,MaxSizeAtCompileTime,MaxSizeAtCompileTime> >"},
{"lineNum":"  277","line":"{"},
{"lineNum":"  278","line":"  typedef PermutationStorage StorageKind;"},
{"lineNum":"  279","line":"  typedef Matrix<StorageIndex_, SizeAtCompileTime, 1, 0, MaxSizeAtCompileTime, 1> IndicesType;"},
{"lineNum":"  280","line":"  typedef StorageIndex_ StorageIndex;"},
{"lineNum":"  281","line":"  typedef void Scalar;"},
{"lineNum":"  282","line":"};"},
{"lineNum":"  283","line":"}"},
{"lineNum":"  284","line":""},
{"lineNum":"  285","line":"/** \\class PermutationMatrix"},
{"lineNum":"  286","line":"  * \\ingroup Core_Module"},
{"lineNum":"  287","line":"  *"},
{"lineNum":"  288","line":"  * \\brief Permutation matrix"},
{"lineNum":"  289","line":"  *"},
{"lineNum":"  290","line":"  * \\tparam SizeAtCompileTime the number of rows/cols, or Dynamic"},
{"lineNum":"  291","line":"  * \\tparam MaxSizeAtCompileTime the maximum number of rows/cols, or Dynamic. This optional parameter defaults to SizeAtCompileTime. Most of the time, you should not have to specify it."},
{"lineNum":"  292","line":"  * \\tparam StorageIndex_ the integer type of the indices"},
{"lineNum":"  293","line":"  *"},
{"lineNum":"  294","line":"  * This class represents a permutation matrix, internally stored as a vector of integers."},
{"lineNum":"  295","line":"  *"},
{"lineNum":"  296","line":"  * \\sa class PermutationBase, class PermutationWrapper, class DiagonalMatrix"},
{"lineNum":"  297","line":"  */"},
{"lineNum":"  298","line":"template<int SizeAtCompileTime, int MaxSizeAtCompileTime, typename StorageIndex_>"},
{"lineNum":"  299","line":"class PermutationMatrix : public PermutationBase<PermutationMatrix<SizeAtCompileTime, MaxSizeAtCompileTime, StorageIndex_> >","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  300","line":"{"},
{"lineNum":"  301","line":"    typedef PermutationBase<PermutationMatrix> Base;"},
{"lineNum":"  302","line":"    typedef internal::traits<PermutationMatrix> Traits;"},
{"lineNum":"  303","line":"  public:"},
{"lineNum":"  304","line":""},
{"lineNum":"  305","line":"    typedef const PermutationMatrix& Nested;"},
{"lineNum":"  306","line":""},
{"lineNum":"  307","line":"    #ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"  308","line":"    typedef typename Traits::IndicesType IndicesType;"},
{"lineNum":"  309","line":"    typedef typename Traits::StorageIndex StorageIndex;"},
{"lineNum":"  310","line":"    #endif"},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":"    inline PermutationMatrix()"},
{"lineNum":"  313","line":"    {}"},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"    /** Constructs an uninitialized permutation matrix of given size."},
{"lineNum":"  316","line":"      */"},
{"lineNum":"  317","line":"    explicit inline PermutationMatrix(Index size) : m_indices(size)"},
{"lineNum":"  318","line":"    {"},
{"lineNum":"  319","line":"      eigen_internal_assert(size <= NumTraits<StorageIndex>::highest());"},
{"lineNum":"  320","line":"    }"},
{"lineNum":"  321","line":""},
{"lineNum":"  322","line":"    /** Copy constructor. */"},
{"lineNum":"  323","line":"    template<typename OtherDerived>"},
{"lineNum":"  324","line":"    inline PermutationMatrix(const PermutationBase<OtherDerived>& other)"},
{"lineNum":"  325","line":"      : m_indices(other.indices()) {}"},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"    /** Generic constructor from expression of the indices. The indices"},
{"lineNum":"  328","line":"      * array has the meaning that the permutations sends each integer i to indices[i]."},
{"lineNum":"  329","line":"      *"},
{"lineNum":"  330","line":"      * \\warning It is your responsibility to check that the indices array that you passes actually"},
{"lineNum":"  331","line":"      * describes a permutation, i.e., each value between 0 and n-1 occurs exactly once, where n is the"},
{"lineNum":"  332","line":"      * array\'s size."},
{"lineNum":"  333","line":"      */"},
{"lineNum":"  334","line":"    template<typename Other>"},
{"lineNum":"  335","line":"    explicit inline PermutationMatrix(const MatrixBase<Other>& indices) : m_indices(indices)"},
{"lineNum":"  336","line":"    {}"},
{"lineNum":"  337","line":""},
{"lineNum":"  338","line":"    /** Convert the Transpositions \\a tr to a permutation matrix */"},
{"lineNum":"  339","line":"    template<typename Other>"},
{"lineNum":"  340","line":"    explicit PermutationMatrix(const TranspositionsBase<Other>& tr)"},
{"lineNum":"  341","line":"      : m_indices(tr.size())"},
{"lineNum":"  342","line":"    {"},
{"lineNum":"  343","line":"      *this = tr;"},
{"lineNum":"  344","line":"    }"},
{"lineNum":"  345","line":""},
{"lineNum":"  346","line":"    /** Copies the other permutation into *this */"},
{"lineNum":"  347","line":"    template<typename Other>"},
{"lineNum":"  348","line":"    PermutationMatrix& operator=(const PermutationBase<Other>& other)"},
{"lineNum":"  349","line":"    {"},
{"lineNum":"  350","line":"      m_indices = other.indices();"},
{"lineNum":"  351","line":"      return *this;"},
{"lineNum":"  352","line":"    }"},
{"lineNum":"  353","line":""},
{"lineNum":"  354","line":"    /** Assignment from the Transpositions \\a tr */"},
{"lineNum":"  355","line":"    template<typename Other>"},
{"lineNum":"  356","line":"    PermutationMatrix& operator=(const TranspositionsBase<Other>& tr)"},
{"lineNum":"  357","line":"    {"},
{"lineNum":"  358","line":"      return Base::operator=(tr.derived());"},
{"lineNum":"  359","line":"    }"},
{"lineNum":"  360","line":""},
{"lineNum":"  361","line":"    /** const version of indices(). */"},
{"lineNum":"  362","line":"    const IndicesType& indices() const { return m_indices; }"},
{"lineNum":"  363","line":"    /** \\returns a reference to the stored array representing the permutation. */"},
{"lineNum":"  364","line":"    IndicesType& indices() { return m_indices; }"},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":""},
{"lineNum":"  367","line":"    /**** multiplication helpers to hopefully get RVO ****/"},
{"lineNum":"  368","line":""},
{"lineNum":"  369","line":"#ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"  370","line":"    template<typename Other>"},
{"lineNum":"  371","line":"    PermutationMatrix(const InverseImpl<Other,PermutationStorage>& other)"},
{"lineNum":"  372","line":"      : m_indices(other.derived().nestedExpression().size())"},
{"lineNum":"  373","line":"    {"},
{"lineNum":"  374","line":"      eigen_internal_assert(m_indices.size() <= NumTraits<StorageIndex>::highest());"},
{"lineNum":"  375","line":"      StorageIndex end = StorageIndex(m_indices.size());"},
{"lineNum":"  376","line":"      for (StorageIndex i=0; i<end;++i)"},
{"lineNum":"  377","line":"        m_indices.coeffRef(other.derived().nestedExpression().indices().coeff(i)) = i;"},
{"lineNum":"  378","line":"    }"},
{"lineNum":"  379","line":"    template<typename Lhs,typename Rhs>"},
{"lineNum":"  380","line":"    PermutationMatrix(internal::PermPermProduct_t, const Lhs& lhs, const Rhs& rhs)"},
{"lineNum":"  381","line":"      : m_indices(lhs.indices().size())"},
{"lineNum":"  382","line":"    {"},
{"lineNum":"  383","line":"      Base::assignProduct(lhs,rhs);"},
{"lineNum":"  384","line":"    }"},
{"lineNum":"  385","line":"#endif"},
{"lineNum":"  386","line":""},
{"lineNum":"  387","line":"  protected:"},
{"lineNum":"  388","line":""},
{"lineNum":"  389","line":"    IndicesType m_indices;"},
{"lineNum":"  390","line":"};"},
{"lineNum":"  391","line":""},
{"lineNum":"  392","line":""},
{"lineNum":"  393","line":"namespace internal {"},
{"lineNum":"  394","line":"template<int SizeAtCompileTime, int MaxSizeAtCompileTime, typename StorageIndex_, int _PacketAccess>"},
{"lineNum":"  395","line":"struct traits<Map<PermutationMatrix<SizeAtCompileTime, MaxSizeAtCompileTime, StorageIndex_>,_PacketAccess> >"},
{"lineNum":"  396","line":" : traits<Matrix<StorageIndex_,SizeAtCompileTime,SizeAtCompileTime,0,MaxSizeAtCompileTime,MaxSizeAtCompileTime> >"},
{"lineNum":"  397","line":"{"},
{"lineNum":"  398","line":"  typedef PermutationStorage StorageKind;"},
{"lineNum":"  399","line":"  typedef Map<const Matrix<StorageIndex_, SizeAtCompileTime, 1, 0, MaxSizeAtCompileTime, 1>, _PacketAccess> IndicesType;"},
{"lineNum":"  400","line":"  typedef StorageIndex_ StorageIndex;"},
{"lineNum":"  401","line":"  typedef void Scalar;"},
{"lineNum":"  402","line":"};"},
{"lineNum":"  403","line":"}"},
{"lineNum":"  404","line":""},
{"lineNum":"  405","line":"template<int SizeAtCompileTime, int MaxSizeAtCompileTime, typename StorageIndex_, int _PacketAccess>"},
{"lineNum":"  406","line":"class Map<PermutationMatrix<SizeAtCompileTime, MaxSizeAtCompileTime, StorageIndex_>,_PacketAccess>"},
{"lineNum":"  407","line":"  : public PermutationBase<Map<PermutationMatrix<SizeAtCompileTime, MaxSizeAtCompileTime, StorageIndex_>,_PacketAccess> >"},
{"lineNum":"  408","line":"{"},
{"lineNum":"  409","line":"    typedef PermutationBase<Map> Base;"},
{"lineNum":"  410","line":"    typedef internal::traits<Map> Traits;"},
{"lineNum":"  411","line":"  public:"},
{"lineNum":"  412","line":""},
{"lineNum":"  413","line":"    #ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"  414","line":"    typedef typename Traits::IndicesType IndicesType;"},
{"lineNum":"  415","line":"    typedef typename IndicesType::Scalar StorageIndex;"},
{"lineNum":"  416","line":"    #endif"},
{"lineNum":"  417","line":""},
{"lineNum":"  418","line":"    inline Map(const StorageIndex* indicesPtr)"},
{"lineNum":"  419","line":"      : m_indices(indicesPtr)"},
{"lineNum":"  420","line":"    {}"},
{"lineNum":"  421","line":""},
{"lineNum":"  422","line":"    inline Map(const StorageIndex* indicesPtr, Index size)"},
{"lineNum":"  423","line":"      : m_indices(indicesPtr,size)"},
{"lineNum":"  424","line":"    {}"},
{"lineNum":"  425","line":""},
{"lineNum":"  426","line":"    /** Copies the other permutation into *this */"},
{"lineNum":"  427","line":"    template<typename Other>"},
{"lineNum":"  428","line":"    Map& operator=(const PermutationBase<Other>& other)"},
{"lineNum":"  429","line":"    { return Base::operator=(other.derived()); }"},
{"lineNum":"  430","line":""},
{"lineNum":"  431","line":"    /** Assignment from the Transpositions \\a tr */"},
{"lineNum":"  432","line":"    template<typename Other>"},
{"lineNum":"  433","line":"    Map& operator=(const TranspositionsBase<Other>& tr)"},
{"lineNum":"  434","line":"    { return Base::operator=(tr.derived()); }"},
{"lineNum":"  435","line":""},
{"lineNum":"  436","line":"    #ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"  437","line":"    /** This is a special case of the templated operator=. Its purpose is to"},
{"lineNum":"  438","line":"      * prevent a default operator= from hiding the templated operator=."},
{"lineNum":"  439","line":"      */"},
{"lineNum":"  440","line":"    Map& operator=(const Map& other)"},
{"lineNum":"  441","line":"    {"},
{"lineNum":"  442","line":"      m_indices = other.m_indices;"},
{"lineNum":"  443","line":"      return *this;"},
{"lineNum":"  444","line":"    }"},
{"lineNum":"  445","line":"    #endif"},
{"lineNum":"  446","line":""},
{"lineNum":"  447","line":"    /** const version of indices(). */"},
{"lineNum":"  448","line":"    const IndicesType& indices() const { return m_indices; }"},
{"lineNum":"  449","line":"    /** \\returns a reference to the stored array representing the permutation. */"},
{"lineNum":"  450","line":"    IndicesType& indices() { return m_indices; }"},
{"lineNum":"  451","line":""},
{"lineNum":"  452","line":"  protected:"},
{"lineNum":"  453","line":""},
{"lineNum":"  454","line":"    IndicesType m_indices;"},
{"lineNum":"  455","line":"};"},
{"lineNum":"  456","line":""},
{"lineNum":"  457","line":"template<typename IndicesType_> class TranspositionsWrapper;"},
{"lineNum":"  458","line":"namespace internal {"},
{"lineNum":"  459","line":"template<typename IndicesType_>"},
{"lineNum":"  460","line":"struct traits<PermutationWrapper<IndicesType_> >"},
{"lineNum":"  461","line":"{"},
{"lineNum":"  462","line":"  typedef PermutationStorage StorageKind;"},
{"lineNum":"  463","line":"  typedef void Scalar;"},
{"lineNum":"  464","line":"  typedef typename IndicesType_::Scalar StorageIndex;"},
{"lineNum":"  465","line":"  typedef IndicesType_ IndicesType;"},
{"lineNum":"  466","line":"  enum {"},
{"lineNum":"  467","line":"    RowsAtCompileTime = IndicesType_::SizeAtCompileTime,"},
{"lineNum":"  468","line":"    ColsAtCompileTime = IndicesType_::SizeAtCompileTime,"},
{"lineNum":"  469","line":"    MaxRowsAtCompileTime = IndicesType::MaxSizeAtCompileTime,"},
{"lineNum":"  470","line":"    MaxColsAtCompileTime = IndicesType::MaxSizeAtCompileTime,"},
{"lineNum":"  471","line":"    Flags = 0"},
{"lineNum":"  472","line":"  };"},
{"lineNum":"  473","line":"};"},
{"lineNum":"  474","line":"}"},
{"lineNum":"  475","line":""},
{"lineNum":"  476","line":"/** \\class PermutationWrapper"},
{"lineNum":"  477","line":"  * \\ingroup Core_Module"},
{"lineNum":"  478","line":"  *"},
{"lineNum":"  479","line":"  * \\brief Class to view a vector of integers as a permutation matrix"},
{"lineNum":"  480","line":"  *"},
{"lineNum":"  481","line":"  * \\tparam IndicesType_ the type of the vector of integer (can be any compatible expression)"},
{"lineNum":"  482","line":"  *"},
{"lineNum":"  483","line":"  * This class allows to view any vector expression of integers as a permutation matrix."},
{"lineNum":"  484","line":"  *"},
{"lineNum":"  485","line":"  * \\sa class PermutationBase, class PermutationMatrix"},
{"lineNum":"  486","line":"  */"},
{"lineNum":"  487","line":"template<typename IndicesType_>"},
{"lineNum":"  488","line":"class PermutationWrapper : public PermutationBase<PermutationWrapper<IndicesType_> >"},
{"lineNum":"  489","line":"{"},
{"lineNum":"  490","line":"    typedef PermutationBase<PermutationWrapper> Base;"},
{"lineNum":"  491","line":"    typedef internal::traits<PermutationWrapper> Traits;"},
{"lineNum":"  492","line":"  public:"},
{"lineNum":"  493","line":""},
{"lineNum":"  494","line":"    #ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"  495","line":"    typedef typename Traits::IndicesType IndicesType;"},
{"lineNum":"  496","line":"    #endif"},
{"lineNum":"  497","line":""},
{"lineNum":"  498","line":"    inline PermutationWrapper(const IndicesType& indices)"},
{"lineNum":"  499","line":"      : m_indices(indices)"},
{"lineNum":"  500","line":"    {}"},
{"lineNum":"  501","line":""},
{"lineNum":"  502","line":"    /** const version of indices(). */"},
{"lineNum":"  503","line":"    const typename internal::remove_all<typename IndicesType::Nested>::type&"},
{"lineNum":"  504","line":"    indices() const { return m_indices; }"},
{"lineNum":"  505","line":""},
{"lineNum":"  506","line":"  protected:"},
{"lineNum":"  507","line":""},
{"lineNum":"  508","line":"    typename IndicesType::Nested m_indices;"},
{"lineNum":"  509","line":"};"},
{"lineNum":"  510","line":""},
{"lineNum":"  511","line":""},
{"lineNum":"  512","line":"/** \\returns the matrix with the permutation applied to the columns."},
{"lineNum":"  513","line":"  */"},
{"lineNum":"  514","line":"template<typename MatrixDerived, typename PermutationDerived>"},
{"lineNum":"  515","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":"  516","line":"const Product<MatrixDerived, PermutationDerived, AliasFreeProduct>"},
{"lineNum":"  517","line":"operator*(const MatrixBase<MatrixDerived> &matrix,"},
{"lineNum":"  518","line":"          const PermutationBase<PermutationDerived>& permutation)"},
{"lineNum":"  519","line":"{"},
{"lineNum":"  520","line":"  return Product<MatrixDerived, PermutationDerived, AliasFreeProduct>"},
{"lineNum":"  521","line":"            (matrix.derived(), permutation.derived());"},
{"lineNum":"  522","line":"}"},
{"lineNum":"  523","line":""},
{"lineNum":"  524","line":"/** \\returns the matrix with the permutation applied to the rows."},
{"lineNum":"  525","line":"  */"},
{"lineNum":"  526","line":"template<typename PermutationDerived, typename MatrixDerived>"},
{"lineNum":"  527","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":"  528","line":"const Product<PermutationDerived, MatrixDerived, AliasFreeProduct>"},
{"lineNum":"  529","line":"operator*(const PermutationBase<PermutationDerived> &permutation,"},
{"lineNum":"  530","line":"          const MatrixBase<MatrixDerived>& matrix)"},
{"lineNum":"  531","line":"{"},
{"lineNum":"  532","line":"  return Product<PermutationDerived, MatrixDerived, AliasFreeProduct>"},
{"lineNum":"  533","line":"            (permutation.derived(), matrix.derived());"},
{"lineNum":"  534","line":"}"},
{"lineNum":"  535","line":""},
{"lineNum":"  536","line":""},
{"lineNum":"  537","line":"template<typename PermutationType>"},
{"lineNum":"  538","line":"class InverseImpl<PermutationType, PermutationStorage>"},
{"lineNum":"  539","line":"  : public EigenBase<Inverse<PermutationType> >"},
{"lineNum":"  540","line":"{"},
{"lineNum":"  541","line":"    typedef typename PermutationType::PlainPermutationType PlainPermutationType;"},
{"lineNum":"  542","line":"    typedef internal::traits<PermutationType> PermTraits;"},
{"lineNum":"  543","line":"  protected:"},
{"lineNum":"  544","line":"    InverseImpl() {}"},
{"lineNum":"  545","line":"  public:"},
{"lineNum":"  546","line":"    typedef Inverse<PermutationType> InverseType;"},
{"lineNum":"  547","line":"    using EigenBase<Inverse<PermutationType> >::derived;"},
{"lineNum":"  548","line":""},
{"lineNum":"  549","line":"    #ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"  550","line":"    typedef typename PermutationType::DenseMatrixType DenseMatrixType;"},
{"lineNum":"  551","line":"    enum {"},
{"lineNum":"  552","line":"      RowsAtCompileTime = PermTraits::RowsAtCompileTime,"},
{"lineNum":"  553","line":"      ColsAtCompileTime = PermTraits::ColsAtCompileTime,"},
{"lineNum":"  554","line":"      MaxRowsAtCompileTime = PermTraits::MaxRowsAtCompileTime,"},
{"lineNum":"  555","line":"      MaxColsAtCompileTime = PermTraits::MaxColsAtCompileTime"},
{"lineNum":"  556","line":"    };"},
{"lineNum":"  557","line":"    #endif"},
{"lineNum":"  558","line":""},
{"lineNum":"  559","line":"    #ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"  560","line":"    template<typename DenseDerived>"},
{"lineNum":"  561","line":"    void evalTo(MatrixBase<DenseDerived>& other) const"},
{"lineNum":"  562","line":"    {"},
{"lineNum":"  563","line":"      other.setZero();"},
{"lineNum":"  564","line":"      for (Index i=0; i<derived().rows();++i)"},
{"lineNum":"  565","line":"        other.coeffRef(i, derived().nestedExpression().indices().coeff(i)) = typename DenseDerived::Scalar(1);"},
{"lineNum":"  566","line":"    }"},
{"lineNum":"  567","line":"    #endif"},
{"lineNum":"  568","line":""},
{"lineNum":"  569","line":"    /** \\return the equivalent permutation matrix */"},
{"lineNum":"  570","line":"    PlainPermutationType eval() const { return derived(); }"},
{"lineNum":"  571","line":""},
{"lineNum":"  572","line":"    DenseMatrixType toDenseMatrix() const { return derived(); }"},
{"lineNum":"  573","line":""},
{"lineNum":"  574","line":"    /** \\returns the matrix with the inverse permutation applied to the columns."},
{"lineNum":"  575","line":"      */"},
{"lineNum":"  576","line":"    template<typename OtherDerived> friend"},
{"lineNum":"  577","line":"    const Product<OtherDerived, InverseType, AliasFreeProduct>"},
{"lineNum":"  578","line":"    operator*(const MatrixBase<OtherDerived>& matrix, const InverseType& trPerm)"},
{"lineNum":"  579","line":"    {"},
{"lineNum":"  580","line":"      return Product<OtherDerived, InverseType, AliasFreeProduct>(matrix.derived(), trPerm.derived());"},
{"lineNum":"  581","line":"    }"},
{"lineNum":"  582","line":""},
{"lineNum":"  583","line":"    /** \\returns the matrix with the inverse permutation applied to the rows."},
{"lineNum":"  584","line":"      */"},
{"lineNum":"  585","line":"    template<typename OtherDerived>"},
{"lineNum":"  586","line":"    const Product<InverseType, OtherDerived, AliasFreeProduct>"},
{"lineNum":"  587","line":"    operator*(const MatrixBase<OtherDerived>& matrix) const"},
{"lineNum":"  588","line":"    {"},
{"lineNum":"  589","line":"      return Product<InverseType, OtherDerived, AliasFreeProduct>(derived(), matrix.derived());"},
{"lineNum":"  590","line":"    }"},
{"lineNum":"  591","line":"};"},
{"lineNum":"  592","line":""},
{"lineNum":"  593","line":"template<typename Derived>"},
{"lineNum":"  594","line":"const PermutationWrapper<const Derived> MatrixBase<Derived>::asPermutation() const"},
{"lineNum":"  595","line":"{"},
{"lineNum":"  596","line":"  return derived();"},
{"lineNum":"  597","line":"}"},
{"lineNum":"  598","line":""},
{"lineNum":"  599","line":"namespace internal {"},
{"lineNum":"  600","line":""},
{"lineNum":"  601","line":"template<> struct AssignmentKind<DenseShape,PermutationShape> { typedef EigenBase2EigenBase Kind; };"},
{"lineNum":"  602","line":""},
{"lineNum":"  603","line":"} // end namespace internal"},
{"lineNum":"  604","line":""},
{"lineNum":"  605","line":"} // end namespace Eigen"},
{"lineNum":"  606","line":""},
{"lineNum":"  607","line":"#endif // EIGEN_PERMUTATIONMATRIX_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 6, "covered" : 0,};
var merged_data = [];
