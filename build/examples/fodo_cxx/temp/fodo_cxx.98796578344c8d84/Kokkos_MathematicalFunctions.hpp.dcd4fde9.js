var data = {lines:[
{"lineNum":"    1","line":"/*"},
{"lineNum":"    2","line":"//@HEADER"},
{"lineNum":"    3","line":"// ************************************************************************"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"//                        Kokkos v. 3.0"},
{"lineNum":"    6","line":"//       Copyright (2020) National Technology & Engineering"},
{"lineNum":"    7","line":"//               Solutions of Sandia, LLC (NTESS)."},
{"lineNum":"    8","line":"//"},
{"lineNum":"    9","line":"// Under the terms of Contract DE-NA0003525 with NTESS,"},
{"lineNum":"   10","line":"// the U.S. Government retains certain rights in this software."},
{"lineNum":"   11","line":"//"},
{"lineNum":"   12","line":"// Redistribution and use in source and binary forms, with or without"},
{"lineNum":"   13","line":"// modification, are permitted provided that the following conditions are"},
{"lineNum":"   14","line":"// met:"},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"// 1. Redistributions of source code must retain the above copyright"},
{"lineNum":"   17","line":"// notice, this list of conditions and the following disclaimer."},
{"lineNum":"   18","line":"//"},
{"lineNum":"   19","line":"// 2. Redistributions in binary form must reproduce the above copyright"},
{"lineNum":"   20","line":"// notice, this list of conditions and the following disclaimer in the"},
{"lineNum":"   21","line":"// documentation and/or other materials provided with the distribution."},
{"lineNum":"   22","line":"//"},
{"lineNum":"   23","line":"// 3. Neither the name of the Corporation nor the names of the"},
{"lineNum":"   24","line":"// contributors may be used to endorse or promote products derived from"},
{"lineNum":"   25","line":"// this software without specific prior written permission."},
{"lineNum":"   26","line":"//"},
{"lineNum":"   27","line":"// THIS SOFTWARE IS PROVIDED BY NTESS \"AS IS\" AND ANY"},
{"lineNum":"   28","line":"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"},
{"lineNum":"   29","line":"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR"},
{"lineNum":"   30","line":"// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NTESS OR THE"},
{"lineNum":"   31","line":"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,"},
{"lineNum":"   32","line":"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,"},
{"lineNum":"   33","line":"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR"},
{"lineNum":"   34","line":"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF"},
{"lineNum":"   35","line":"// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING"},
{"lineNum":"   36","line":"// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"},
{"lineNum":"   37","line":"// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   38","line":"//"},
{"lineNum":"   39","line":"// Questions? Contact Christian R. Trott (crtrott@sandia.gov)"},
{"lineNum":"   40","line":"//"},
{"lineNum":"   41","line":"// ************************************************************************"},
{"lineNum":"   42","line":"//@HEADER"},
{"lineNum":"   43","line":"*/"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"#ifndef KOKKOS_MATHEMATICAL_FUNCTIONS_HPP"},
{"lineNum":"   46","line":"#define KOKKOS_MATHEMATICAL_FUNCTIONS_HPP"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"#include <Kokkos_Macros.hpp>"},
{"lineNum":"   49","line":"#include <cmath>"},
{"lineNum":"   50","line":"#include <algorithm>"},
{"lineNum":"   51","line":"#include <type_traits>"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"#ifdef KOKKOS_ENABLE_SYCL"},
{"lineNum":"   54","line":"#include <CL/sycl.hpp>"},
{"lineNum":"   55","line":"#endif"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"namespace Kokkos {"},
{"lineNum":"   58","line":"namespace Experimental {"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"#if defined(KOKKOS_ENABLE_SYCL)"},
{"lineNum":"   61","line":"#define NAMESPACE_MATH_FUNCTIONS sycl"},
{"lineNum":"   62","line":"#else"},
{"lineNum":"   63","line":"#define NAMESPACE_MATH_FUNCTIONS std"},
{"lineNum":"   64","line":"#endif"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"#define KOKKOS_IMPL_UNARY_FUNCTION_FLOATING_POINT(FUNC, RETURNTYPE, ARGTYPE) \\"},
{"lineNum":"   67","line":"  KOKKOS_INLINE_FUNCTION RETURNTYPE FUNC(ARGTYPE x) {                        \\"},
{"lineNum":"   68","line":"    using NAMESPACE_MATH_FUNCTIONS::FUNC;                                    \\"},
{"lineNum":"   69","line":"    return FUNC(x);                                                          \\"},
{"lineNum":"   70","line":"  }"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"#define KOKKOS_IMPL_UNARY_FUNCTION_INTEGRAL(FUNC, RETURNTYPE)              \\"},
{"lineNum":"   73","line":"  template <typename Integer,                                              \\"},
{"lineNum":"   74","line":"            typename = std::enable_if_t<std::is_integral<Integer>::value>> \\"},
{"lineNum":"   75","line":"  KOKKOS_INLINE_FUNCTION RETURNTYPE FUNC(Integer x) {                      \\"},
{"lineNum":"   76","line":"    return Kokkos::Experimental::FUNC(static_cast<double>(x));             \\"},
{"lineNum":"   77","line":"  }"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"#define KOKKOS_IMPL_BINARY_FUNCTION_FLOATING_POINT(FUNC, TYPE) \\"},
{"lineNum":"   80","line":"  KOKKOS_INLINE_FUNCTION TYPE FUNC(TYPE x, TYPE y) {           \\"},
{"lineNum":"   81","line":"    using NAMESPACE_MATH_FUNCTIONS::FUNC;                      \\"},
{"lineNum":"   82","line":"    return FUNC(x, y);                                         \\"},
{"lineNum":"   83","line":"  }"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"// NOTE long double overloads are not available on the device"},
{"lineNum":"   86","line":"#if defined(KOKKOS_ENABLE_CUDA) || defined(KOKKOS_ENABLE_HIP) || \\"},
{"lineNum":"   87","line":"    defined(KOKKOS_ENABLE_SYCL) || defined(KOKKOS_ENABLE_OPENMPTARGET)"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"#define KOKKOS_IMPL_BINARY_FUNCTION_ARITHMETIC(FUNC)                         \\"},
{"lineNum":"   90","line":"  template <typename Arithmetic1, typename Arithmetic2,                      \\"},
{"lineNum":"   91","line":"            typename = std::enable_if_t<                                     \\"},
{"lineNum":"   92","line":"                std::is_arithmetic<Arithmetic1>::value &&                    \\"},
{"lineNum":"   93","line":"                std::is_arithmetic<Arithmetic2>::value &&                    \\"},
{"lineNum":"   94","line":"                !std::is_same<Arithmetic1, long double>::value &&            \\"},
{"lineNum":"   95","line":"                !std::is_same<Arithmetic2, long double>::value>>             \\"},
{"lineNum":"   96","line":"  KOKKOS_INLINE_FUNCTION double FUNC(Arithmetic1 x, Arithmetic2 y) {         \\"},
{"lineNum":"   97","line":"    return Kokkos::Experimental::FUNC(                                       \\"},
{"lineNum":"   98","line":"        static_cast<std::conditional_t<std::is_integral<Arithmetic1>::value, \\"},
{"lineNum":"   99","line":"                                       double, Arithmetic1>>(x),             \\"},
{"lineNum":"  100","line":"        static_cast<std::conditional_t<std::is_integral<Arithmetic2>::value, \\"},
{"lineNum":"  101","line":"                                       double, Arithmetic2>>(y));            \\"},
{"lineNum":"  102","line":"  }"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"#define KOKKOS_IMPL_MATH_UNARY_FUNCTION(FUNC)                     \\"},
{"lineNum":"  105","line":"  KOKKOS_IMPL_UNARY_FUNCTION_FLOATING_POINT(FUNC, float, float)   \\"},
{"lineNum":"  106","line":"  KOKKOS_IMPL_UNARY_FUNCTION_FLOATING_POINT(FUNC, double, double) \\"},
{"lineNum":"  107","line":"  KOKKOS_IMPL_UNARY_FUNCTION_INTEGRAL(FUNC, double)"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"#define KOKKOS_IMPL_MATH_UNARY_PREDICATE(FUNC)                  \\"},
{"lineNum":"  110","line":"  KOKKOS_IMPL_UNARY_FUNCTION_FLOATING_POINT(FUNC, bool, float)  \\"},
{"lineNum":"  111","line":"  KOKKOS_IMPL_UNARY_FUNCTION_FLOATING_POINT(FUNC, bool, double) \\"},
{"lineNum":"  112","line":"  KOKKOS_IMPL_UNARY_FUNCTION_INTEGRAL(FUNC, bool)"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"#define KOKKOS_IMPL_MATH_BINARY_FUNCTION(FUNC)             \\"},
{"lineNum":"  115","line":"  KOKKOS_IMPL_BINARY_FUNCTION_FLOATING_POINT(FUNC, float)  \\"},
{"lineNum":"  116","line":"  KOKKOS_IMPL_BINARY_FUNCTION_FLOATING_POINT(FUNC, double) \\"},
{"lineNum":"  117","line":"  KOKKOS_IMPL_BINARY_FUNCTION_ARITHMETIC(FUNC)"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"#define KOKKOS_IMPL_MATH_NAN()                                        \\"},
{"lineNum":"  120","line":"  KOKKOS_IMPL_UNARY_FUNCTION_FLOATING_POINT(nanf, float, char const*) \\"},
{"lineNum":"  121","line":"  KOKKOS_IMPL_UNARY_FUNCTION_FLOATING_POINT(nan, double, char const*)"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"#else  // long double overloads are available"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"#define KOKKOS_IMPL_BINARY_FUNCTION_ARITHMETIC(FUNC)                         \\"},
{"lineNum":"  126","line":"  template <typename Arithmetic1, typename Arithmetic2,                      \\"},
{"lineNum":"  127","line":"            typename =                                                       \\"},
{"lineNum":"  128","line":"                std::enable_if_t<std::is_arithmetic<Arithmetic1>::value &&   \\"},
{"lineNum":"  129","line":"                                 std::is_arithmetic<Arithmetic2>::value>,    \\"},
{"lineNum":"  130","line":"            typename Promoted = std::conditional_t<                          \\"},
{"lineNum":"  131","line":"                std::is_same<Arithmetic1, long double>::value ||             \\"},
{"lineNum":"  132","line":"                    std::is_same<Arithmetic2, long double>::value,           \\"},
{"lineNum":"  133","line":"                long double, double>>                                        \\"},
{"lineNum":"  134","line":"  KOKKOS_INLINE_FUNCTION Promoted FUNC(Arithmetic1 x, Arithmetic2 y) {       \\"},
{"lineNum":"  135","line":"    return Kokkos::Experimental::FUNC(                                       \\"},
{"lineNum":"  136","line":"        static_cast<std::conditional_t<std::is_integral<Arithmetic1>::value, \\"},
{"lineNum":"  137","line":"                                       double, Arithmetic1>>(x),             \\"},
{"lineNum":"  138","line":"        static_cast<std::conditional_t<std::is_integral<Arithmetic2>::value, \\"},
{"lineNum":"  139","line":"                                       double, Arithmetic2>>(y));            \\"},
{"lineNum":"  140","line":"  }"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"#define KOKKOS_IMPL_MATH_UNARY_FUNCTION(FUNC)                               \\"},
{"lineNum":"  143","line":"  KOKKOS_IMPL_UNARY_FUNCTION_FLOATING_POINT(FUNC, float, float)             \\"},
{"lineNum":"  144","line":"  KOKKOS_IMPL_UNARY_FUNCTION_FLOATING_POINT(FUNC, double, double)           \\"},
{"lineNum":"  145","line":"  KOKKOS_IMPL_UNARY_FUNCTION_FLOATING_POINT(FUNC, long double, long double) \\"},
{"lineNum":"  146","line":"  KOKKOS_IMPL_UNARY_FUNCTION_INTEGRAL(FUNC, double)"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"#define KOKKOS_IMPL_MATH_UNARY_PREDICATE(FUNC)                       \\"},
{"lineNum":"  149","line":"  KOKKOS_IMPL_UNARY_FUNCTION_FLOATING_POINT(FUNC, bool, float)       \\"},
{"lineNum":"  150","line":"  KOKKOS_IMPL_UNARY_FUNCTION_FLOATING_POINT(FUNC, bool, double)      \\"},
{"lineNum":"  151","line":"  KOKKOS_IMPL_UNARY_FUNCTION_FLOATING_POINT(FUNC, bool, long double) \\"},
{"lineNum":"  152","line":"  KOKKOS_IMPL_UNARY_FUNCTION_INTEGRAL(FUNC, bool)"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"#define KOKKOS_IMPL_MATH_BINARY_FUNCTION(FUNC)                  \\"},
{"lineNum":"  155","line":"  KOKKOS_IMPL_BINARY_FUNCTION_FLOATING_POINT(FUNC, float)       \\"},
{"lineNum":"  156","line":"  KOKKOS_IMPL_BINARY_FUNCTION_FLOATING_POINT(FUNC, double)      \\"},
{"lineNum":"  157","line":"  KOKKOS_IMPL_BINARY_FUNCTION_FLOATING_POINT(FUNC, long double) \\"},
{"lineNum":"  158","line":"  KOKKOS_IMPL_BINARY_FUNCTION_ARITHMETIC(FUNC)"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"#define KOKKOS_IMPL_MATH_NAN()                                        \\"},
{"lineNum":"  161","line":"  KOKKOS_IMPL_UNARY_FUNCTION_FLOATING_POINT(nanf, float, char const*) \\"},
{"lineNum":"  162","line":"  KOKKOS_IMPL_UNARY_FUNCTION_FLOATING_POINT(nan, double, char const*) \\"},
{"lineNum":"  163","line":"  KOKKOS_IMPL_UNARY_FUNCTION_FLOATING_POINT(nanl, long double, char const*)"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"#endif"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"// Basic operations"},
{"lineNum":"  168","line":"KOKKOS_IMPL_MATH_UNARY_FUNCTION(fabs)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  169","line":"KOKKOS_IMPL_MATH_BINARY_FUNCTION(fmod)"},
{"lineNum":"  170","line":"KOKKOS_IMPL_MATH_BINARY_FUNCTION(remainder)"},
{"lineNum":"  171","line":"KOKKOS_IMPL_MATH_BINARY_FUNCTION(fmin)"},
{"lineNum":"  172","line":"KOKKOS_IMPL_MATH_BINARY_FUNCTION(fmax)"},
{"lineNum":"  173","line":"KOKKOS_IMPL_MATH_BINARY_FUNCTION(fdim)"},
{"lineNum":"  174","line":"#ifndef KOKKOS_ENABLE_SYCL"},
{"lineNum":"  175","line":"KOKKOS_IMPL_MATH_NAN()"},
{"lineNum":"  176","line":"#endif"},
{"lineNum":"  177","line":"// Power functions"},
{"lineNum":"  178","line":"KOKKOS_IMPL_MATH_BINARY_FUNCTION(pow)"},
{"lineNum":"  179","line":"KOKKOS_IMPL_MATH_UNARY_FUNCTION(sqrt)"},
{"lineNum":"  180","line":"KOKKOS_IMPL_MATH_UNARY_FUNCTION(cbrt)"},
{"lineNum":"  181","line":"KOKKOS_IMPL_MATH_BINARY_FUNCTION(hypot)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  182","line":"// Exponential functions"},
{"lineNum":"  183","line":"KOKKOS_IMPL_MATH_UNARY_FUNCTION(exp)"},
{"lineNum":"  184","line":"KOKKOS_IMPL_MATH_UNARY_FUNCTION(exp2)"},
{"lineNum":"  185","line":"KOKKOS_IMPL_MATH_UNARY_FUNCTION(expm1)"},
{"lineNum":"  186","line":"KOKKOS_IMPL_MATH_UNARY_FUNCTION(log)"},
{"lineNum":"  187","line":"KOKKOS_IMPL_MATH_UNARY_FUNCTION(log10)"},
{"lineNum":"  188","line":"KOKKOS_IMPL_MATH_UNARY_FUNCTION(log2)"},
{"lineNum":"  189","line":"KOKKOS_IMPL_MATH_UNARY_FUNCTION(log1p)"},
{"lineNum":"  190","line":"// Trigonometric functions"},
{"lineNum":"  191","line":"KOKKOS_IMPL_MATH_UNARY_FUNCTION(sin)","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":"  192","line":"KOKKOS_IMPL_MATH_UNARY_FUNCTION(cos)","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":"  193","line":"KOKKOS_IMPL_MATH_UNARY_FUNCTION(tan)"},
{"lineNum":"  194","line":"KOKKOS_IMPL_MATH_UNARY_FUNCTION(asin)"},
{"lineNum":"  195","line":"KOKKOS_IMPL_MATH_UNARY_FUNCTION(acos)"},
{"lineNum":"  196","line":"KOKKOS_IMPL_MATH_UNARY_FUNCTION(atan)"},
{"lineNum":"  197","line":"KOKKOS_IMPL_MATH_BINARY_FUNCTION(atan2)"},
{"lineNum":"  198","line":"// Hyperbolic functions"},
{"lineNum":"  199","line":"KOKKOS_IMPL_MATH_UNARY_FUNCTION(sinh)"},
{"lineNum":"  200","line":"KOKKOS_IMPL_MATH_UNARY_FUNCTION(cosh)"},
{"lineNum":"  201","line":"KOKKOS_IMPL_MATH_UNARY_FUNCTION(tanh)"},
{"lineNum":"  202","line":"KOKKOS_IMPL_MATH_UNARY_FUNCTION(asinh)"},
{"lineNum":"  203","line":"KOKKOS_IMPL_MATH_UNARY_FUNCTION(acosh)"},
{"lineNum":"  204","line":"KOKKOS_IMPL_MATH_UNARY_FUNCTION(atanh)"},
{"lineNum":"  205","line":"// Error and gamma functions"},
{"lineNum":"  206","line":"KOKKOS_IMPL_MATH_UNARY_FUNCTION(erf)"},
{"lineNum":"  207","line":"KOKKOS_IMPL_MATH_UNARY_FUNCTION(erfc)"},
{"lineNum":"  208","line":"KOKKOS_IMPL_MATH_UNARY_FUNCTION(tgamma)"},
{"lineNum":"  209","line":"KOKKOS_IMPL_MATH_UNARY_FUNCTION(lgamma)"},
{"lineNum":"  210","line":"// Nearest integer floating point operations"},
{"lineNum":"  211","line":"KOKKOS_IMPL_MATH_UNARY_FUNCTION(ceil)"},
{"lineNum":"  212","line":"KOKKOS_IMPL_MATH_UNARY_FUNCTION(floor)"},
{"lineNum":"  213","line":"KOKKOS_IMPL_MATH_UNARY_FUNCTION(trunc)"},
{"lineNum":"  214","line":"#ifndef KOKKOS_ENABLE_SYCL"},
{"lineNum":"  215","line":"KOKKOS_IMPL_MATH_UNARY_FUNCTION(nearbyint)"},
{"lineNum":"  216","line":"#endif"},
{"lineNum":"  217","line":"// Classification and comparison"},
{"lineNum":"  218","line":"KOKKOS_IMPL_MATH_UNARY_PREDICATE(isfinite)"},
{"lineNum":"  219","line":"KOKKOS_IMPL_MATH_UNARY_PREDICATE(isinf)"},
{"lineNum":"  220","line":"KOKKOS_IMPL_MATH_UNARY_PREDICATE(isnan)"},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"#undef KOKKOS_IMPL_UNARY_FUNCTION_FLOATING_POINT"},
{"lineNum":"  223","line":"#undef KOKKOS_IMPL_UNARY_FUNCTION_INTEGRAL"},
{"lineNum":"  224","line":"#undef KOKKOS_IMPL_BINARY_FUNCTION_FLOATING_POINT"},
{"lineNum":"  225","line":"#undef KOKKOS_IMPL_BINARY_FUNCTION_ARITHMETIC"},
{"lineNum":"  226","line":"#undef KOKKOS_IMPL_MATH_UNARY_FUNCTION"},
{"lineNum":"  227","line":"#undef KOKKOS_IMPL_MATH_UNARY_PREDICATE"},
{"lineNum":"  228","line":"#undef KOKKOS_IMPL_MATH_BINARY_FUNCTION"},
{"lineNum":"  229","line":"#undef KOKKOS_IMPL_MATH_NAN"},
{"lineNum":"  230","line":"}  // namespace Experimental"},
{"lineNum":"  231","line":"}  // namespace Kokkos"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 4, "covered" : 0,};
var merged_data = [];
