var data = {lines:[
{"lineNum":"    1","line":"/*============================================================================="},
{"lineNum":"    2","line":"    Copyright (c) 2001-2011 Joel de Guzman"},
{"lineNum":"    3","line":"    Copyright (c) 2001-2011 Hartmut Kaiser"},
{"lineNum":"    4","line":"    Copyright (c)      2010 Bryce Lelbach"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"    Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    7","line":"    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    8","line":"==============================================================================*/"},
{"lineNum":"    9","line":"#if !defined(BOOST_SPIRIT_CHAR_APRIL_16_2006_1051AM)"},
{"lineNum":"   10","line":"#define BOOST_SPIRIT_CHAR_APRIL_16_2006_1051AM"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"#if defined(_MSC_VER)"},
{"lineNum":"   13","line":"#pragma once"},
{"lineNum":"   14","line":"#endif"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"#include <boost/spirit/home/support/common_terminals.hpp>"},
{"lineNum":"   17","line":"#include <boost/spirit/home/support/string_traits.hpp>"},
{"lineNum":"   18","line":"#include <boost/spirit/home/support/info.hpp>"},
{"lineNum":"   19","line":"#include <boost/spirit/home/support/detail/get_encoding.hpp>"},
{"lineNum":"   20","line":"#include <boost/spirit/home/support/char_set/basic_chset.hpp>"},
{"lineNum":"   21","line":"#include <boost/spirit/home/qi/char/char_parser.hpp>"},
{"lineNum":"   22","line":"#include <boost/spirit/home/qi/char/char_class.hpp>"},
{"lineNum":"   23","line":"#include <boost/spirit/home/qi/meta_compiler.hpp>"},
{"lineNum":"   24","line":"#include <boost/spirit/home/qi/auxiliary/lazy.hpp>"},
{"lineNum":"   25","line":"#include <boost/spirit/home/qi/detail/enable_lit.hpp>"},
{"lineNum":"   26","line":"#include <boost/fusion/include/at.hpp>"},
{"lineNum":"   27","line":"#include <boost/mpl/if.hpp>"},
{"lineNum":"   28","line":"#include <boost/mpl/assert.hpp>"},
{"lineNum":"   29","line":"#include <boost/mpl/identity.hpp>"},
{"lineNum":"   30","line":"#include <boost/utility/enable_if.hpp>"},
{"lineNum":"   31","line":"#include <boost/type_traits/remove_const.hpp>"},
{"lineNum":"   32","line":"#include <string>"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"#if defined(_MSC_VER)"},
{"lineNum":"   35","line":"#pragma once"},
{"lineNum":"   36","line":"#endif"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"namespace boost { namespace spirit"},
{"lineNum":"   39","line":"{"},
{"lineNum":"   40","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   41","line":"    // Enablers"},
{"lineNum":"   42","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   43","line":"    template <typename CharEncoding>"},
{"lineNum":"   44","line":"    struct use_terminal<qi::domain"},
{"lineNum":"   45","line":"      , terminal<"},
{"lineNum":"   46","line":"            tag::char_code<tag::char_, CharEncoding>    // enables char_"},
{"lineNum":"   47","line":"        >"},
{"lineNum":"   48","line":"    > : mpl::true_ {};"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"    template <typename CharEncoding, typename A0>"},
{"lineNum":"   51","line":"    struct use_terminal<qi::domain"},
{"lineNum":"   52","line":"      , terminal_ex<"},
{"lineNum":"   53","line":"            tag::char_code<tag::char_, CharEncoding>    // enables char_(\'x\'), char_(\"x\")"},
{"lineNum":"   54","line":"          , fusion::vector1<A0>                         // and char_(\"a-z0-9\")"},
{"lineNum":"   55","line":"        >"},
{"lineNum":"   56","line":"    > : mpl::true_ {};"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"    template <typename CharEncoding, typename A0, typename A1>"},
{"lineNum":"   59","line":"    struct use_terminal<qi::domain"},
{"lineNum":"   60","line":"      , terminal_ex<"},
{"lineNum":"   61","line":"            tag::char_code<tag::char_, CharEncoding>    // enables char_(\'a\',\'z\')"},
{"lineNum":"   62","line":"          , fusion::vector2<A0, A1>"},
{"lineNum":"   63","line":"        >"},
{"lineNum":"   64","line":"    > : mpl::true_ {};"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"    template <typename CharEncoding>                    // enables *lazy* char_(\'x\'), char_(\"x\")"},
{"lineNum":"   67","line":"    struct use_lazy_terminal<                           // and char_(\"a-z0-9\")"},
{"lineNum":"   68","line":"        qi::domain"},
{"lineNum":"   69","line":"      , tag::char_code<tag::char_, CharEncoding>"},
{"lineNum":"   70","line":"      , 1 // arity"},
{"lineNum":"   71","line":"    > : mpl::true_ {};"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"    template <typename CharEncoding>                    // enables *lazy* char_(\'a\',\'z\')"},
{"lineNum":"   74","line":"    struct use_lazy_terminal<"},
{"lineNum":"   75","line":"        qi::domain"},
{"lineNum":"   76","line":"      , tag::char_code<tag::char_, CharEncoding>"},
{"lineNum":"   77","line":"      , 2 // arity"},
{"lineNum":"   78","line":"    > : mpl::true_ {};"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"    template <>"},
{"lineNum":"   81","line":"    struct use_terminal<qi::domain, char>               // enables \'x\'"},
{"lineNum":"   82","line":"      : mpl::true_ {};"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"    template <>"},
{"lineNum":"   85","line":"    struct use_terminal<qi::domain, char[2]>            // enables \"x\""},
{"lineNum":"   86","line":"      : mpl::true_ {};"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"    template <>"},
{"lineNum":"   89","line":"    struct use_terminal<qi::domain, wchar_t>            // enables wchar_t"},
{"lineNum":"   90","line":"      : mpl::true_ {};"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"    template <>"},
{"lineNum":"   93","line":"    struct use_terminal<qi::domain, wchar_t[2]>         // enables L\"x\""},
{"lineNum":"   94","line":"      : mpl::true_ {};"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"    // enables lit(...)"},
{"lineNum":"   97","line":"    template <typename A0>"},
{"lineNum":"   98","line":"    struct use_terminal<qi::domain"},
{"lineNum":"   99","line":"          , terminal_ex<tag::lit, fusion::vector1<A0> >"},
{"lineNum":"  100","line":"          , typename enable_if<traits::is_char<A0> >::type>"},
{"lineNum":"  101","line":"      : mpl::true_ {};"},
{"lineNum":"  102","line":"}}"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"namespace boost { namespace spirit { namespace qi"},
{"lineNum":"  105","line":"{"},
{"lineNum":"  106","line":"#ifndef BOOST_SPIRIT_NO_PREDEFINED_TERMINALS"},
{"lineNum":"  107","line":"    using spirit::lit; // lit(\'x\') is equivalent to \'x\'"},
{"lineNum":"  108","line":"#endif"},
{"lineNum":"  109","line":"    using spirit::lit_type;"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  112","line":"    // Parser for a single character"},
{"lineNum":"  113","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  114","line":"    template <typename CharEncoding, bool no_attribute, bool no_case = false>"},
{"lineNum":"  115","line":"    struct literal_char"},
{"lineNum":"  116","line":"      : char_parser<"},
{"lineNum":"  117","line":"            literal_char<CharEncoding, no_attribute, false>"},
{"lineNum":"  118","line":"          , typename CharEncoding::char_type"},
{"lineNum":"  119","line":"          , typename mpl::if_c<no_attribute, unused_type"},
{"lineNum":"  120","line":"              , typename CharEncoding::char_type>::type>"},
{"lineNum":"  121","line":"    {"},
{"lineNum":"  122","line":"        typedef typename CharEncoding::char_type char_type;"},
{"lineNum":"  123","line":"        typedef CharEncoding char_encoding;"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"        template <typename Char>"},
{"lineNum":"  126","line":"        literal_char(Char ch_)"},
{"lineNum":"  127","line":"          : ch(static_cast<char_type>(ch_)) {}"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"        template <typename Context, typename Iterator>"},
{"lineNum":"  130","line":"        struct attribute"},
{"lineNum":"  131","line":"        {"},
{"lineNum":"  132","line":"            typedef typename mpl::if_c<"},
{"lineNum":"  133","line":"                no_attribute, unused_type, char_type>::type"},
{"lineNum":"  134","line":"            type;"},
{"lineNum":"  135","line":"        };"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"        template <typename CharParam, typename Context>"},
{"lineNum":"  138","line":"        bool test(CharParam ch_, Context&) const"},
{"lineNum":"  139","line":"        {"},
{"lineNum":"  140","line":"            return traits::ischar<CharParam, char_encoding>::call(ch_) &&","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"  141","line":"                   ch == char_type(ch_);"},
{"lineNum":"  142","line":"        }"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"        template <typename Context>"},
{"lineNum":"  145","line":"        info what(Context& /*context*/) const"},
{"lineNum":"  146","line":"        {"},
{"lineNum":"  147","line":"            return info(\"literal-char\", char_encoding::toucs4(ch));"},
{"lineNum":"  148","line":"        }"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"        char_type ch;"},
{"lineNum":"  151","line":"    };"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"    template <typename CharEncoding, bool no_attribute>"},
{"lineNum":"  154","line":"    struct literal_char<CharEncoding, no_attribute, true> // case insensitive"},
{"lineNum":"  155","line":"      : char_parser<"},
{"lineNum":"  156","line":"            literal_char<CharEncoding, no_attribute, true>"},
{"lineNum":"  157","line":"          , typename mpl::if_c<no_attribute, unused_type"},
{"lineNum":"  158","line":"              , typename CharEncoding::char_type>::type>"},
{"lineNum":"  159","line":"    {"},
{"lineNum":"  160","line":"        typedef typename CharEncoding::char_type char_type;"},
{"lineNum":"  161","line":"        typedef CharEncoding char_encoding;"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"        literal_char(char_type ch)"},
{"lineNum":"  164","line":"          : lo(static_cast<char_type>(char_encoding::tolower(ch)))"},
{"lineNum":"  165","line":"          , hi(static_cast<char_type>(char_encoding::toupper(ch))) {}"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"        template <typename Context, typename Iterator>"},
{"lineNum":"  168","line":"        struct attribute"},
{"lineNum":"  169","line":"        {"},
{"lineNum":"  170","line":"            typedef typename mpl::if_c<"},
{"lineNum":"  171","line":"                no_attribute, unused_type, char_type>::type"},
{"lineNum":"  172","line":"            type;"},
{"lineNum":"  173","line":"        };"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"        template <typename CharParam, typename Context>"},
{"lineNum":"  176","line":"        bool test(CharParam ch_, Context&) const"},
{"lineNum":"  177","line":"        {"},
{"lineNum":"  178","line":"            if (!traits::ischar<CharParam, char_encoding>::call(ch_))"},
{"lineNum":"  179","line":"                return false;"},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"            char_type ch = char_type(ch_);  // optimize for token based parsing"},
{"lineNum":"  182","line":"            return this->lo == ch || this->hi == ch;"},
{"lineNum":"  183","line":"        }"},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"        template <typename Context>"},
{"lineNum":"  186","line":"        info what(Context& /*context*/) const"},
{"lineNum":"  187","line":"        {"},
{"lineNum":"  188","line":"            return info(\"no-case-literal-char\", char_encoding::toucs4(lo));"},
{"lineNum":"  189","line":"        }"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"        char_type lo, hi;"},
{"lineNum":"  192","line":"    };"},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  195","line":"    // Parser for a character range"},
{"lineNum":"  196","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  197","line":"    template <typename CharEncoding, bool no_case = false>"},
{"lineNum":"  198","line":"    struct char_range"},
{"lineNum":"  199","line":"      : char_parser<char_range<CharEncoding, false>, typename CharEncoding::char_type>"},
{"lineNum":"  200","line":"    {"},
{"lineNum":"  201","line":"        typedef typename CharEncoding::char_type char_type;"},
{"lineNum":"  202","line":"        typedef CharEncoding char_encoding;"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"        char_range(char_type from_, char_type to_)"},
{"lineNum":"  205","line":"          : from(from_), to(to_) {}"},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"        template <typename CharParam, typename Context>"},
{"lineNum":"  208","line":"        bool test(CharParam ch_, Context&) const"},
{"lineNum":"  209","line":"        {"},
{"lineNum":"  210","line":"            if (!traits::ischar<CharParam, char_encoding>::call(ch_))"},
{"lineNum":"  211","line":"                return false;"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"            char_type ch = char_type(ch_);  // optimize for token based parsing"},
{"lineNum":"  214","line":"            return !(ch < from) && !(to < ch);"},
{"lineNum":"  215","line":"        }"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"        template <typename Context>"},
{"lineNum":"  218","line":"        info what(Context& /*context*/) const"},
{"lineNum":"  219","line":"        {"},
{"lineNum":"  220","line":"            info result(\"char-range\", char_encoding::toucs4(from));"},
{"lineNum":"  221","line":"            boost::get<std::string>(result.value) += \'-\';"},
{"lineNum":"  222","line":"            boost::get<std::string>(result.value) += to_utf8(char_encoding::toucs4(to));"},
{"lineNum":"  223","line":"            return result;"},
{"lineNum":"  224","line":"        }"},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"        char_type from, to;"},
{"lineNum":"  227","line":"    };"},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"    template <typename CharEncoding>"},
{"lineNum":"  230","line":"    struct char_range<CharEncoding, true> // case insensitive"},
{"lineNum":"  231","line":"      : char_parser<char_range<CharEncoding, true>, typename CharEncoding::char_type>"},
{"lineNum":"  232","line":"    {"},
{"lineNum":"  233","line":"        typedef typename CharEncoding::char_type char_type;"},
{"lineNum":"  234","line":"        typedef CharEncoding char_encoding;"},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":"        char_range(char_type from, char_type to)"},
{"lineNum":"  237","line":"          : from_lo(static_cast<char_type>(char_encoding::tolower(from)))"},
{"lineNum":"  238","line":"          , to_lo(static_cast<char_type>(char_encoding::tolower(to)))"},
{"lineNum":"  239","line":"          , from_hi(static_cast<char_type>(char_encoding::toupper(from)))"},
{"lineNum":"  240","line":"          , to_hi(static_cast<char_type>(char_encoding::toupper(to)))"},
{"lineNum":"  241","line":"        {}"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"        template <typename CharParam, typename Context>"},
{"lineNum":"  244","line":"        bool test(CharParam ch_, Context&) const"},
{"lineNum":"  245","line":"        {"},
{"lineNum":"  246","line":"            if (!traits::ischar<CharParam, char_encoding>::call(ch_))"},
{"lineNum":"  247","line":"                return false;"},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"            char_type ch = char_type(ch_);  // optimize for token based parsing"},
{"lineNum":"  250","line":"            return (!(ch < from_lo) && !(to_lo < ch))"},
{"lineNum":"  251","line":"                || (!(ch < from_hi) && !(to_hi < ch))"},
{"lineNum":"  252","line":"            ;"},
{"lineNum":"  253","line":"        }"},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"        template <typename Context>"},
{"lineNum":"  256","line":"        info what(Context& /*context*/) const"},
{"lineNum":"  257","line":"        {"},
{"lineNum":"  258","line":"            info result(\"no-case-char-range\", char_encoding::toucs4(from_lo));"},
{"lineNum":"  259","line":"            boost::get<std::string>(result.value) += \'-\';"},
{"lineNum":"  260","line":"            boost::get<std::string>(result.value) += to_utf8(char_encoding::toucs4(to_lo));"},
{"lineNum":"  261","line":"            return result;"},
{"lineNum":"  262","line":"        }"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"        char_type from_lo, to_lo, from_hi, to_hi;"},
{"lineNum":"  265","line":"    };"},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  268","line":"    // Parser for a character set"},
{"lineNum":"  269","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  270","line":"    template <typename CharEncoding, bool no_attribute, bool no_case = false>"},
{"lineNum":"  271","line":"    struct char_set"},
{"lineNum":"  272","line":"      : char_parser<char_set<CharEncoding, no_attribute, false>"},
{"lineNum":"  273","line":"          , typename mpl::if_c<no_attribute, unused_type"},
{"lineNum":"  274","line":"              , typename CharEncoding::char_type>::type>"},
{"lineNum":"  275","line":"    {"},
{"lineNum":"  276","line":"        typedef typename CharEncoding::char_type char_type;"},
{"lineNum":"  277","line":"        typedef CharEncoding char_encoding;"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"        template <typename String>"},
{"lineNum":"  280","line":"        char_set(String const& str)"},
{"lineNum":"  281","line":"        {"},
{"lineNum":"  282","line":"            using spirit::detail::cast_char;"},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"            typedef typename"},
{"lineNum":"  285","line":"                remove_const<"},
{"lineNum":"  286","line":"                    typename traits::char_type_of<String>::type"},
{"lineNum":"  287","line":"                >::type"},
{"lineNum":"  288","line":"            in_type;"},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"            BOOST_SPIRIT_ASSERT_MSG(("},
{"lineNum":"  291","line":"                (sizeof(char_type) >= sizeof(in_type))"},
{"lineNum":"  292","line":"            ), cannot_convert_string, (String));"},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"            in_type const* definition ="},
{"lineNum":"  295","line":"                (in_type const*)traits::get_c_string(str);"},
{"lineNum":"  296","line":"            in_type ch = *definition++;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  297","line":"            while (ch)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  298","line":"            {"},
{"lineNum":"  299","line":"                in_type next = *definition++;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  300","line":"                if (next == \'-\')","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  301","line":"                {"},
{"lineNum":"  302","line":"                    next = *definition++;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  303","line":"                    if (next == 0)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  304","line":"                    {"},
{"lineNum":"  305","line":"                        chset.set(cast_char<char_type>(ch));"},
{"lineNum":"  306","line":"                        chset.set(\'-\');"},
{"lineNum":"  307","line":"                        break;"},
{"lineNum":"  308","line":"                    }"},
{"lineNum":"  309","line":"                    chset.set("},
{"lineNum":"  310","line":"                        cast_char<char_type>(ch),"},
{"lineNum":"  311","line":"                        cast_char<char_type>(next)"},
{"lineNum":"  312","line":"                    );"},
{"lineNum":"  313","line":"                }"},
{"lineNum":"  314","line":"                else"},
{"lineNum":"  315","line":"                {"},
{"lineNum":"  316","line":"                    chset.set(cast_char<char_type>(ch));"},
{"lineNum":"  317","line":"                }"},
{"lineNum":"  318","line":"                ch = next;"},
{"lineNum":"  319","line":"            }"},
{"lineNum":"  320","line":"        }"},
{"lineNum":"  321","line":""},
{"lineNum":"  322","line":"        template <typename CharParam, typename Context>"},
{"lineNum":"  323","line":"        bool test(CharParam ch, Context&) const"},
{"lineNum":"  324","line":"        {"},
{"lineNum":"  325","line":"            return traits::ischar<CharParam, char_encoding>::call(ch) &&"},
{"lineNum":"  326","line":"                   chset.test(char_type(ch));"},
{"lineNum":"  327","line":"        }"},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"        template <typename Context>"},
{"lineNum":"  330","line":"        info what(Context& /*context*/) const"},
{"lineNum":"  331","line":"        {"},
{"lineNum":"  332","line":"            return info(\"char-set\");"},
{"lineNum":"  333","line":"        }"},
{"lineNum":"  334","line":""},
{"lineNum":"  335","line":"        support::detail::basic_chset<char_type> chset;"},
{"lineNum":"  336","line":"    };"},
{"lineNum":"  337","line":""},
{"lineNum":"  338","line":"    template <typename CharEncoding, bool no_attribute>"},
{"lineNum":"  339","line":"    struct char_set<CharEncoding, no_attribute, true> // case insensitive"},
{"lineNum":"  340","line":"      : char_parser<char_set<CharEncoding, no_attribute, true>"},
{"lineNum":"  341","line":"          , typename mpl::if_c<no_attribute, unused_type"},
{"lineNum":"  342","line":"              , typename CharEncoding::char_type>::type>"},
{"lineNum":"  343","line":"    {"},
{"lineNum":"  344","line":"        typedef typename CharEncoding::char_type char_type;"},
{"lineNum":"  345","line":"        typedef CharEncoding char_encoding;"},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"        template <typename String>"},
{"lineNum":"  348","line":"        char_set(String const& str)"},
{"lineNum":"  349","line":"        {"},
{"lineNum":"  350","line":"            typedef typename traits::char_type_of<String>::type in_type;"},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"            BOOST_SPIRIT_ASSERT_MSG(("},
{"lineNum":"  353","line":"                (sizeof(char_type) == sizeof(in_type))"},
{"lineNum":"  354","line":"            ), cannot_convert_string, (String));"},
{"lineNum":"  355","line":""},
{"lineNum":"  356","line":"            char_type const* definition ="},
{"lineNum":"  357","line":"                (char_type const*)traits::get_c_string(str);"},
{"lineNum":"  358","line":"            char_type ch = *definition++;"},
{"lineNum":"  359","line":"            while (ch)"},
{"lineNum":"  360","line":"            {"},
{"lineNum":"  361","line":"                char_type next = *definition++;"},
{"lineNum":"  362","line":"                if (next == \'-\')"},
{"lineNum":"  363","line":"                {"},
{"lineNum":"  364","line":"                    next = *definition++;"},
{"lineNum":"  365","line":"                    if (next == 0)"},
{"lineNum":"  366","line":"                    {"},
{"lineNum":"  367","line":"                        chset.set(static_cast<char_type>(CharEncoding::tolower(ch)));"},
{"lineNum":"  368","line":"                        chset.set(static_cast<char_type>(CharEncoding::toupper(ch)));"},
{"lineNum":"  369","line":"                        chset.set(\'-\');"},
{"lineNum":"  370","line":"                        break;"},
{"lineNum":"  371","line":"                    }"},
{"lineNum":"  372","line":"                    chset.set(static_cast<char_type>(CharEncoding::tolower(ch))"},
{"lineNum":"  373","line":"                      , static_cast<char_type>(CharEncoding::tolower(next)));"},
{"lineNum":"  374","line":"                    chset.set(static_cast<char_type>(CharEncoding::toupper(ch))"},
{"lineNum":"  375","line":"                      , static_cast<char_type>(CharEncoding::toupper(next)));"},
{"lineNum":"  376","line":"                }"},
{"lineNum":"  377","line":"                else"},
{"lineNum":"  378","line":"                {"},
{"lineNum":"  379","line":"                    chset.set(static_cast<char_type>(CharEncoding::tolower(ch)));"},
{"lineNum":"  380","line":"                    chset.set(static_cast<char_type>(CharEncoding::toupper(ch)));"},
{"lineNum":"  381","line":"                }"},
{"lineNum":"  382","line":"                ch = next;"},
{"lineNum":"  383","line":"            }"},
{"lineNum":"  384","line":"        }"},
{"lineNum":"  385","line":""},
{"lineNum":"  386","line":"        template <typename CharParam, typename Context>"},
{"lineNum":"  387","line":"        bool test(CharParam ch, Context&) const"},
{"lineNum":"  388","line":"        {"},
{"lineNum":"  389","line":"            return traits::ischar<CharParam, char_encoding>::call(ch) &&"},
{"lineNum":"  390","line":"                   chset.test(char_type(ch));"},
{"lineNum":"  391","line":"        }"},
{"lineNum":"  392","line":""},
{"lineNum":"  393","line":"        template <typename Context>"},
{"lineNum":"  394","line":"        info what(Context& /*context*/) const"},
{"lineNum":"  395","line":"        {"},
{"lineNum":"  396","line":"            return info(\"no-case-char-set\");"},
{"lineNum":"  397","line":"        }"},
{"lineNum":"  398","line":""},
{"lineNum":"  399","line":"        support::detail::basic_chset<char_type> chset;"},
{"lineNum":"  400","line":"    };"},
{"lineNum":"  401","line":""},
{"lineNum":"  402","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  403","line":"    // Parser generators: make_xxx function (objects)"},
{"lineNum":"  404","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  405","line":"    namespace detail"},
{"lineNum":"  406","line":"    {"},
{"lineNum":"  407","line":"        template <typename Modifiers, typename Encoding>"},
{"lineNum":"  408","line":"        struct basic_literal"},
{"lineNum":"  409","line":"        {"},
{"lineNum":"  410","line":"            static bool const no_case ="},
{"lineNum":"  411","line":"                has_modifier<"},
{"lineNum":"  412","line":"                    Modifiers"},
{"lineNum":"  413","line":"                  , tag::char_code_base<tag::no_case>"},
{"lineNum":"  414","line":"                >::value;"},
{"lineNum":"  415","line":""},
{"lineNum":"  416","line":"            static bool const no_attr ="},
{"lineNum":"  417","line":"                !has_modifier<"},
{"lineNum":"  418","line":"                    Modifiers"},
{"lineNum":"  419","line":"                  , tag::lazy_eval"},
{"lineNum":"  420","line":"                >::value;"},
{"lineNum":"  421","line":""},
{"lineNum":"  422","line":"            typedef literal_char<"},
{"lineNum":"  423","line":"                typename spirit::detail::get_encoding_with_case<"},
{"lineNum":"  424","line":"                    Modifiers, Encoding, no_case>::type"},
{"lineNum":"  425","line":"              , no_attr"},
{"lineNum":"  426","line":"              , no_case>"},
{"lineNum":"  427","line":"            result_type;"},
{"lineNum":"  428","line":""},
{"lineNum":"  429","line":"            template <typename Char>"},
{"lineNum":"  430","line":"            result_type operator()(Char ch, unused_type) const"},
{"lineNum":"  431","line":"            {"},
{"lineNum":"  432","line":"                return result_type(ch);"},
{"lineNum":"  433","line":"            }"},
{"lineNum":"  434","line":""},
{"lineNum":"  435","line":"            template <typename Char>"},
{"lineNum":"  436","line":"            result_type operator()(Char const* str, unused_type) const"},
{"lineNum":"  437","line":"            {"},
{"lineNum":"  438","line":"                return result_type(str[0]);"},
{"lineNum":"  439","line":"            }"},
{"lineNum":"  440","line":"        };"},
{"lineNum":"  441","line":"    }"},
{"lineNum":"  442","line":""},
{"lineNum":"  443","line":"    template <typename Modifiers>"},
{"lineNum":"  444","line":"    struct make_primitive<char, Modifiers>"},
{"lineNum":"  445","line":"      : detail::basic_literal<Modifiers, char_encoding::standard> {};"},
{"lineNum":"  446","line":""},
{"lineNum":"  447","line":"    template <typename Modifiers>"},
{"lineNum":"  448","line":"    struct make_primitive<char const(&)[2], Modifiers>"},
{"lineNum":"  449","line":"      : detail::basic_literal<Modifiers, char_encoding::standard> {};"},
{"lineNum":"  450","line":""},
{"lineNum":"  451","line":"    template <typename Modifiers>"},
{"lineNum":"  452","line":"    struct make_primitive<wchar_t, Modifiers>"},
{"lineNum":"  453","line":"      : detail::basic_literal<Modifiers, char_encoding::standard_wide> {};"},
{"lineNum":"  454","line":""},
{"lineNum":"  455","line":"    template <typename Modifiers>"},
{"lineNum":"  456","line":"    struct make_primitive<wchar_t const(&)[2], Modifiers>"},
{"lineNum":"  457","line":"      : detail::basic_literal<Modifiers, char_encoding::standard_wide> {};"},
{"lineNum":"  458","line":""},
{"lineNum":"  459","line":"    template <typename CharEncoding, typename Modifiers>"},
{"lineNum":"  460","line":"    struct make_primitive<"},
{"lineNum":"  461","line":"        terminal<tag::char_code<tag::char_, CharEncoding> >, Modifiers>"},
{"lineNum":"  462","line":"    {"},
{"lineNum":"  463","line":"        typedef typename"},
{"lineNum":"  464","line":"            spirit::detail::get_encoding<Modifiers, CharEncoding>::type"},
{"lineNum":"  465","line":"        char_encoding;"},
{"lineNum":"  466","line":""},
{"lineNum":"  467","line":"        typedef tag::char_code<tag::char_, char_encoding> tag;"},
{"lineNum":"  468","line":"        typedef char_class<tag> result_type;"},
{"lineNum":"  469","line":"        result_type operator()(unused_type, unused_type) const"},
{"lineNum":"  470","line":"        {"},
{"lineNum":"  471","line":"            return result_type();"},
{"lineNum":"  472","line":"        }"},
{"lineNum":"  473","line":"    };"},
{"lineNum":"  474","line":""},
{"lineNum":"  475","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  476","line":"    // char_(\'x\')"},
{"lineNum":"  477","line":"    template <typename CharEncoding, typename Modifiers, typename A0>"},
{"lineNum":"  478","line":"    struct make_primitive<"},
{"lineNum":"  479","line":"        terminal_ex<"},
{"lineNum":"  480","line":"            tag::char_code<tag::char_, CharEncoding>"},
{"lineNum":"  481","line":"          , fusion::vector1<A0> >"},
{"lineNum":"  482","line":"      , Modifiers>"},
{"lineNum":"  483","line":"    {"},
{"lineNum":"  484","line":"        static bool const no_case ="},
{"lineNum":"  485","line":"            has_modifier<Modifiers, tag::char_code_base<tag::no_case> >::value;"},
{"lineNum":"  486","line":""},
{"lineNum":"  487","line":"        typedef typename"},
{"lineNum":"  488","line":"            spirit::detail::get_encoding<Modifiers, CharEncoding>::type"},
{"lineNum":"  489","line":"        char_encoding;"},
{"lineNum":"  490","line":""},
{"lineNum":"  491","line":"        typedef typename"},
{"lineNum":"  492","line":"            mpl::if_<"},
{"lineNum":"  493","line":"                traits::is_string<A0>"},
{"lineNum":"  494","line":"              , char_set<char_encoding, false, no_case>"},
{"lineNum":"  495","line":"              , literal_char<char_encoding, false, no_case>"},
{"lineNum":"  496","line":"            >::type"},
{"lineNum":"  497","line":"        result_type;"},
{"lineNum":"  498","line":""},
{"lineNum":"  499","line":"        template <typename Terminal>"},
{"lineNum":"  500","line":"        result_type operator()(Terminal const& term, unused_type) const"},
{"lineNum":"  501","line":"        {"},
{"lineNum":"  502","line":"            return result_type(fusion::at_c<0>(term.args));"},
{"lineNum":"  503","line":"        }"},
{"lineNum":"  504","line":"    };"},
{"lineNum":"  505","line":""},
{"lineNum":"  506","line":"    // lit(\'x\')"},
{"lineNum":"  507","line":"    template <typename Modifiers, typename A0>"},
{"lineNum":"  508","line":"    struct make_primitive<"},
{"lineNum":"  509","line":"        terminal_ex<tag::lit, fusion::vector1<A0> >"},
{"lineNum":"  510","line":"      , Modifiers"},
{"lineNum":"  511","line":"      , typename enable_if<traits::is_char<A0> >::type>"},
{"lineNum":"  512","line":"    {"},
{"lineNum":"  513","line":"        static bool const no_case ="},
{"lineNum":"  514","line":"            has_modifier<"},
{"lineNum":"  515","line":"                Modifiers"},
{"lineNum":"  516","line":"              , tag::char_code_base<tag::no_case>"},
{"lineNum":"  517","line":"            >::value;"},
{"lineNum":"  518","line":""},
{"lineNum":"  519","line":"        typedef typename traits::char_encoding_from_char<"},
{"lineNum":"  520","line":"                typename traits::char_type_of<A0>::type>::type encoding;"},
{"lineNum":"  521","line":""},
{"lineNum":"  522","line":"        typedef literal_char<"},
{"lineNum":"  523","line":"            typename spirit::detail::get_encoding_with_case<"},
{"lineNum":"  524","line":"                Modifiers, encoding, no_case>::type"},
{"lineNum":"  525","line":"          , true, no_case>"},
{"lineNum":"  526","line":"        result_type;"},
{"lineNum":"  527","line":""},
{"lineNum":"  528","line":"        template <typename Terminal>"},
{"lineNum":"  529","line":"        result_type operator()(Terminal const& term, unused_type) const"},
{"lineNum":"  530","line":"        {"},
{"lineNum":"  531","line":"            return result_type(fusion::at_c<0>(term.args));"},
{"lineNum":"  532","line":"        }"},
{"lineNum":"  533","line":"    };"},
{"lineNum":"  534","line":""},
{"lineNum":"  535","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  536","line":"    template <typename CharEncoding, typename Modifiers, typename Char>"},
{"lineNum":"  537","line":"    struct make_primitive<"},
{"lineNum":"  538","line":"        terminal_ex<"},
{"lineNum":"  539","line":"            tag::char_code<tag::char_, CharEncoding>"},
{"lineNum":"  540","line":"          , fusion::vector1<Char(&)[2]> // For single char strings"},
{"lineNum":"  541","line":"        >"},
{"lineNum":"  542","line":"      , Modifiers>"},
{"lineNum":"  543","line":"    {"},
{"lineNum":"  544","line":"        static bool const no_case ="},
{"lineNum":"  545","line":"            has_modifier<Modifiers, tag::char_code_base<tag::no_case> >::value;"},
{"lineNum":"  546","line":""},
{"lineNum":"  547","line":"        typedef typename"},
{"lineNum":"  548","line":"            spirit::detail::get_encoding<Modifiers, CharEncoding>::type"},
{"lineNum":"  549","line":"        char_encoding;"},
{"lineNum":"  550","line":""},
{"lineNum":"  551","line":"        typedef literal_char<char_encoding, false, no_case> result_type;"},
{"lineNum":"  552","line":""},
{"lineNum":"  553","line":"        template <typename Terminal>"},
{"lineNum":"  554","line":"        result_type operator()(Terminal const& term, unused_type) const"},
{"lineNum":"  555","line":"        {"},
{"lineNum":"  556","line":"            return result_type(fusion::at_c<0>(term.args)[0]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  557","line":"        }"},
{"lineNum":"  558","line":"    };"},
{"lineNum":"  559","line":""},
{"lineNum":"  560","line":"    template <typename CharEncoding, typename Modifiers, typename A0, typename A1>"},
{"lineNum":"  561","line":"    struct make_primitive<"},
{"lineNum":"  562","line":"        terminal_ex<"},
{"lineNum":"  563","line":"            tag::char_code<tag::char_, CharEncoding>"},
{"lineNum":"  564","line":"          , fusion::vector2<A0, A1>"},
{"lineNum":"  565","line":"        >"},
{"lineNum":"  566","line":"      , Modifiers>"},
{"lineNum":"  567","line":"    {"},
{"lineNum":"  568","line":"        static bool const no_case ="},
{"lineNum":"  569","line":"            has_modifier<Modifiers, tag::char_code_base<tag::no_case> >::value;"},
{"lineNum":"  570","line":""},
{"lineNum":"  571","line":"        typedef typename"},
{"lineNum":"  572","line":"            spirit::detail::get_encoding<Modifiers, CharEncoding>::type"},
{"lineNum":"  573","line":"        char_encoding;"},
{"lineNum":"  574","line":""},
{"lineNum":"  575","line":"        typedef char_range<char_encoding, no_case> result_type;"},
{"lineNum":"  576","line":""},
{"lineNum":"  577","line":"        template <typename Terminal>"},
{"lineNum":"  578","line":"        result_type operator()(Terminal const& term, unused_type) const"},
{"lineNum":"  579","line":"        {"},
{"lineNum":"  580","line":"            return result_type("},
{"lineNum":"  581","line":"                fusion::at_c<0>(term.args)"},
{"lineNum":"  582","line":"              , fusion::at_c<1>(term.args)"},
{"lineNum":"  583","line":"            );"},
{"lineNum":"  584","line":"        }"},
{"lineNum":"  585","line":"    };"},
{"lineNum":"  586","line":""},
{"lineNum":"  587","line":"    template <typename CharEncoding, typename Modifiers, typename Char>"},
{"lineNum":"  588","line":"    struct make_primitive<"},
{"lineNum":"  589","line":"        terminal_ex<"},
{"lineNum":"  590","line":"            tag::char_code<tag::char_, CharEncoding>"},
{"lineNum":"  591","line":"          , fusion::vector2<Char(&)[2], Char(&)[2]> // For single char strings"},
{"lineNum":"  592","line":"        >"},
{"lineNum":"  593","line":"      , Modifiers>"},
{"lineNum":"  594","line":"    {"},
{"lineNum":"  595","line":"        static bool const no_case ="},
{"lineNum":"  596","line":"            has_modifier<Modifiers, tag::char_code_base<tag::no_case> >::value;"},
{"lineNum":"  597","line":""},
{"lineNum":"  598","line":"        typedef typename"},
{"lineNum":"  599","line":"            spirit::detail::get_encoding<Modifiers, CharEncoding>::type"},
{"lineNum":"  600","line":"        char_encoding;"},
{"lineNum":"  601","line":""},
{"lineNum":"  602","line":"        typedef char_range<char_encoding, no_case> result_type;"},
{"lineNum":"  603","line":""},
{"lineNum":"  604","line":"        template <typename Terminal>"},
{"lineNum":"  605","line":"        result_type operator()(Terminal const& term, unused_type) const"},
{"lineNum":"  606","line":"        {"},
{"lineNum":"  607","line":"            return result_type("},
{"lineNum":"  608","line":"                fusion::at_c<0>(term.args)[0]"},
{"lineNum":"  609","line":"              , fusion::at_c<1>(term.args)[0]"},
{"lineNum":"  610","line":"            );"},
{"lineNum":"  611","line":"        }"},
{"lineNum":"  612","line":"    };"},
{"lineNum":"  613","line":"}}}"},
{"lineNum":"  614","line":""},
{"lineNum":"  615","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 8, "covered" : 0,};
var merged_data = [];
