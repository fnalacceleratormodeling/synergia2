var data = {lines:[
{"lineNum":"    1","line":"#include <sstream>"},
{"lineNum":"    2","line":"#include <stdexcept>"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#include \"synergia/bunch/populate_global.h\""},
{"lineNum":"    5","line":"#include \"synergia/bunch/core_diagnostics.h\""},
{"lineNum":"    6","line":"#include \"synergia/utils/floating_point.h\""},
{"lineNum":"    7","line":"#include \"synergia/foundation/math_constants.h\""},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"#include \"synergia/utils/pcg/pcg_random.hpp\""},
{"lineNum":"   10","line":"#include <random>"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"using mconstants::pi;"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"namespace"},
{"lineNum":"   16","line":"{"},
{"lineNum":"   17","line":"    void fill_unit_6d("},
{"lineNum":"   18","line":"            std::vector<pcg64>& rngs,"},
{"lineNum":"   19","line":"            HostParticles parts,"},
{"lineNum":"   20","line":"            HostParticleMasks masks,"},
{"lineNum":"   21","line":"            HostParticleMasks valid,"},
{"lineNum":"   22","line":"            const_karray2d_row covariances )"},
{"lineNum":"   23","line":"    {"},
{"lineNum":"   24","line":"        const int np = valid.extent(0);"},
{"lineNum":"   25","line":"        std::uniform_real_distribution<double> dist(0.0, 1.0);"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"        for (int j = 0; j < 6; ++j)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   28","line":"        {"},
{"lineNum":"   29","line":"            const double scale = sqrt( covariances(j, j) );","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"            for(int p=0; p<np; ++p)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   32","line":"            {"},
{"lineNum":"   33","line":"                if (masks(p) && !valid(p))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   34","line":"                    parts(p, j) = dist(rngs[p]) * scale;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   35","line":"            }"},
{"lineNum":"   36","line":"        }"},
{"lineNum":"   37","line":"    }"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"    void fill_unit_6d("},
{"lineNum":"   40","line":"            uint64_t seed,"},
{"lineNum":"   41","line":"            HostParticles parts,"},
{"lineNum":"   42","line":"            HostParticleMasks masks,"},
{"lineNum":"   43","line":"            int np,"},
{"lineNum":"   44","line":"            const_karray2d_row covariances )"},
{"lineNum":"   45","line":"    {"},
{"lineNum":"   46","line":"        std::uniform_real_distribution<double> dist(0.0, 1.0);"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"        std::array<double, 6> scales;"},
{"lineNum":"   49","line":"        for(int j=0; j<6; ++j) scales[j] = sqrt(covariances(j, j));","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"        for(int p=0; p<np; ++p)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   52","line":"        {"},
{"lineNum":"   53","line":"            if (!masks(p)) continue;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"            pcg64 rng(seed, (uint64_t)parts(p, 6));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"            for(int j=0; j<6; ++j)"},
{"lineNum":"   58","line":"                parts(p, j) = dist(rng) * scales[j];","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   59","line":"        }"},
{"lineNum":"   60","line":"    }"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"    inline bool good("},
{"lineNum":"   63","line":"            ConstHostParticles parts,"},
{"lineNum":"   64","line":"            int index,"},
{"lineNum":"   65","line":"            const_karray1d limits )"},
{"lineNum":"   66","line":"    {"},
{"lineNum":"   67","line":"        bool retval = true;"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"        for (int i = 0; i < 6; ++i)"},
{"lineNum":"   70","line":"        {"},
{"lineNum":"   71","line":"            double val = parts(index, i);"},
{"lineNum":"   72","line":"            double limit = limits[i];","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"            if ((limit > 0) && ((val > limit) or (val < -limit)))","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   75","line":"                retval = false;"},
{"lineNum":"   76","line":"        }"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"        return retval;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   79","line":"    }"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"    int strip_unit_6d("},
{"lineNum":"   82","line":"            ConstHostParticles parts,"},
{"lineNum":"   83","line":"            HostParticleMasks masks,"},
{"lineNum":"   84","line":"            HostParticleMasks valid,"},
{"lineNum":"   85","line":"            const_karray1d limits )"},
{"lineNum":"   86","line":"    {"},
{"lineNum":"   87","line":"        const int np = valid.extent(0);"},
{"lineNum":"   88","line":"        int failed_num = 0;"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"        for (int p=0; p<np; ++p)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   91","line":"        {"},
{"lineNum":"   92","line":"            if (masks(p) && !valid(p))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   93","line":"            {"},
{"lineNum":"   94","line":"                if (good(parts, p, limits)) valid(p) = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   95","line":"                else ++failed_num;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   96","line":"            }"},
{"lineNum":"   97","line":"        }"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"        return failed_num;"},
{"lineNum":"  100","line":"    }"},
{"lineNum":"  101","line":"}"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"void"},
{"lineNum":"  104","line":"populate_global_6d("},
{"lineNum":"  105","line":"        uint64_t seed,"},
{"lineNum":"  106","line":"        Bunch& bunch,"},
{"lineNum":"  107","line":"        const_karray1d means,"},
{"lineNum":"  108","line":"        const_karray2d_row covariances )"},
{"lineNum":"  109","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  110","line":"    karray1d limits(\"limits\", 6);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  111","line":"    for(int i=0; i<6; ++i) limits[i] = 0.0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"    populate_global_6d_truncated(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  114","line":"            seed, bunch, means, covariances, limits);"},
{"lineNum":"  115","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"void"},
{"lineNum":"  118","line":"populate_global_6d_truncated("},
{"lineNum":"  119","line":"        uint64_t seed,"},
{"lineNum":"  120","line":"        Bunch& bunch,"},
{"lineNum":"  121","line":"        const_karray1d means,"},
{"lineNum":"  122","line":"        const_karray2d_row covariances,"},
{"lineNum":"  123","line":"        const_karray1d limits )"},
{"lineNum":"  124","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  125","line":"#if 0"},
{"lineNum":"  126","line":"    multi_array_assert_size(means, 6, \"populate_6d: means\");"},
{"lineNum":"  127","line":"    multi_array_assert_size(covariances, 6, 6, \"populate_6d: covariances\");"},
{"lineNum":"  128","line":"    multi_array_assert_size(limits, 6, \"populate_6d: limits\");"},
{"lineNum":"  129","line":"#endif"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"    // deep copy from device to host"},
{"lineNum":"  132","line":"    // not for particles, but for masks"},
{"lineNum":"  133","line":"    bunch.checkout_particles();"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"    const int np = bunch.size();"},
{"lineNum":"  136","line":"    auto parts = bunch.get_host_particles();"},
{"lineNum":"  137","line":"    auto masks = bunch.get_host_particle_masks();"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"    karray2d_row unit_covariances(\"unit_covariances\", 6, 6);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  140","line":"    karray1d zero_means(\"zero_means\", 6);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"    bool truncated(false);"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"    for (int i = 0; i < 6; ++i)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  145","line":"    {"},
{"lineNum":"  146","line":"        double n = limits[i];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"        if (n > 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  149","line":"        {"},
{"lineNum":"  150","line":"            truncated = true;"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"            double cutoff_integral ="},
{"lineNum":"  153","line":"                ( exp(-n*n/2.0) ) *","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  154","line":"                ( sqrt(pi) * exp(n*n/2.0) * erf(n/sqrt(2.0)) - sqrt(2.0)*n ) /","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  155","line":"                ( sqrt(pi) );"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"            unit_covariances(i, i) = 1.0 / (cutoff_integral * cutoff_integral);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  158","line":"        }"},
{"lineNum":"  159","line":"        else"},
{"lineNum":"  160","line":"        {"},
{"lineNum":"  161","line":"            unit_covariances(i, i) = 1.0;"},
{"lineNum":"  162","line":"        }"},
{"lineNum":"  163","line":"    }"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"    if (truncated)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  166","line":"    {"},
{"lineNum":"  167","line":"        // a mask indicating whether the generated particle is valid"},
{"lineNum":"  168","line":"        // defaults to 0 for all particles"},
{"lineNum":"  169","line":"        HostParticleMasks valid(\"valid\", np);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"        // random number generators, one for each particle"},
{"lineNum":"  172","line":"        std::vector<pcg64> rngs;"},
{"lineNum":"  173","line":"        rngs.reserve(np);"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"        for(int i=0; i<np; ++i)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  176","line":"            rngs[i] = pcg64(seed, (uint64_t)parts(i, 6));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"        // loop to generate all particles"},
{"lineNum":"  179","line":"        // total_bad is init to 1 because the MPI_Allreduce has to be"},
{"lineNum":"  180","line":"        // called by all ranks in the bunch. If the total_bad is init"},
{"lineNum":"  181","line":"        // to np, then its possible that some of the ranks who does not"},
{"lineNum":"  182","line":"        // have local particles will not run the allreduce."},
{"lineNum":"  183","line":"        const int max_iters = 50;"},
{"lineNum":"  184","line":"        int iter = 0;"},
{"lineNum":"  185","line":"        int total_bad = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"        while(total_bad && iter<max_iters)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  188","line":"        {"},
{"lineNum":"  189","line":"            fill_unit_6d(rngs, parts, masks, valid, unit_covariances);"},
{"lineNum":"  190","line":"            adjust_moments(bunch, zero_means, unit_covariances);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  191","line":"            int bad = strip_unit_6d(parts, masks, valid, limits);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"            MPI_Allreduce(&bad, &total_bad, 1,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  194","line":"                    MPI_INT, MPI_SUM, bunch.get_comm());"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"            ++iter;"},
{"lineNum":"  197","line":"        }"},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"        if (total_bad)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  200","line":"        {"},
{"lineNum":"  201","line":"            throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  202","line":"                    \"populate_6d_truncated: \""},
{"lineNum":"  203","line":"                    \"maximum number of truncation iterations exceeded. \""},
{"lineNum":"  204","line":"                    \"Algorithm known to fail ~< 2.5 sigma.\" );"},
{"lineNum":"  205","line":"        }"},
{"lineNum":"  206","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  207","line":"    else"},
{"lineNum":"  208","line":"    {"},
{"lineNum":"  209","line":"        fill_unit_6d(seed, parts, masks, np, unit_covariances);"},
{"lineNum":"  210","line":"    }"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"    // adjust"},
{"lineNum":"  213","line":"    adjust_moments(bunch, means, covariances);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"    // copy to device"},
{"lineNum":"  216","line":"    bunch.checkin_particles();"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"    // check"},
{"lineNum":"  219","line":"    bunch.check_pz2_positive();"},
{"lineNum":"  220","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 45, "covered" : 0,};
var merged_data = [];
