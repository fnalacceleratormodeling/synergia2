var data = {lines:[
{"lineNum":"    1","line":"#ifndef FF_SBEND_H"},
{"lineNum":"    2","line":"#define FF_SBEND_H"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#include \"synergia/libFF/ff_algorithm.h\""},
{"lineNum":"    5","line":"#include \"synergia/utils/simple_timer.h\""},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"// p [Gev/c] = -- * B*rho [ Tesla meters ]"},
{"lineNum":"    9","line":"#define PH_CNV_brho_to_p   (1.0e-9 * pconstants::c)"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"namespace sbend_impl"},
{"lineNum":"   13","line":"{"},
{"lineNum":"   14","line":"    struct SbendParams"},
{"lineNum":"   15","line":"    {"},
{"lineNum":"   16","line":"        bool ledge;"},
{"lineNum":"   17","line":"        bool redge;"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"        double length;"},
{"lineNum":"   20","line":"        double angle;"},
{"lineNum":"   21","line":"        double r0;"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"        int    steps;"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"        double k_l[10];  // up to decapole"},
{"lineNum":"   26","line":"        double scale;"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"        double strength;"},
{"lineNum":"   29","line":"        double pref_b;"},
{"lineNum":"   30","line":"        double m_b;"},
{"lineNum":"   31","line":"        double ref_cdt;"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"        double e1;  // usFaceAngle,  usAngle"},
{"lineNum":"   34","line":"        double e2;  // dsFaceAngle, -dsAngle"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"        double ce1;"},
{"lineNum":"   37","line":"        double se1;"},
{"lineNum":"   38","line":"        double ce2;"},
{"lineNum":"   39","line":"        double se2;"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"        double us_edge_k;"},
{"lineNum":"   42","line":"        double ds_edge_k;"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"        double us_edge_k_p;"},
{"lineNum":"   45","line":"        double ds_edge_k_p;"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"        double us_edge_k_x;"},
{"lineNum":"   48","line":"        double us_edge_k_y;"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"        double ds_edge_k_x;"},
{"lineNum":"   51","line":"        double ds_edge_k_y;"},
{"lineNum":"   52","line":"    };"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"    template<class BP>"},
{"lineNum":"   55","line":"    struct PropSbend"},
{"lineNum":"   56","line":"    {"},
{"lineNum":"   57","line":"        typename BP::parts_t p;"},
{"lineNum":"   58","line":"        typename BP::const_masks_t masks;"},
{"lineNum":"   59","line":"        const SbendParams sp;"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"        const double dphi;"},
{"lineNum":"   62","line":"        const Kokkos::complex<double> phase;"},
{"lineNum":"   63","line":"        const Kokkos::complex<double> term;"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"        PropSbend(BP & bp, SbendParams const& sp)"},
{"lineNum":"   66","line":"            : p(bp.parts), masks(bp.masks), sp(sp)"},
{"lineNum":"   67","line":"            , dphi( -(sp.angle - (sp.e1 + sp.e2)) )   // -psi"},
{"lineNum":"   68","line":"            , phase(std::exp(std::complex<double>(0.0, -dphi)))"},
{"lineNum":"   69","line":"            , term( std::complex<double>(0.0, sp.length / sp.angle) *"},
{"lineNum":"   70","line":"                    std::complex<double>(1.0 - cos(sp.angle), - sin(sp.angle)) *"},
{"lineNum":"   71","line":"                    std::complex<double>(cos(sp.e2), -sin(sp.e2)) )"},
{"lineNum":"   72","line":"        { }"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   75","line":"        void operator()(const int i) const"},
{"lineNum":"   76","line":"        {"},
{"lineNum":"   77","line":"            if (masks(i))"},
{"lineNum":"   78","line":"            {"},
{"lineNum":"   79","line":"                if (sp.ledge)"},
{"lineNum":"   80","line":"                {"},
{"lineNum":"   81","line":"                    // slot"},
{"lineNum":"   82","line":"                    FF_algorithm::slot_unit("},
{"lineNum":"   83","line":"                            p(i,0), p(i,1), p(i,2), p(i,3), p(i,4), p(i,5),"},
{"lineNum":"   84","line":"                            sp.ce1, sp.se1, sp.pref_b, sp.m_b );"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"                    // edge:"},
{"lineNum":"   87","line":"                    // 1. chef fixed angle (only kicks yp)"},
{"lineNum":"   88","line":"                    // FF_algorithm::edge_unit("},
{"lineNum":"   89","line":"                    //        p(i,2), p(i,3), us_edge_k );"},
{"lineNum":"   90","line":"                    //"},
{"lineNum":"   91","line":"                    // 2. chef per-particle angle"},
{"lineNum":"   92","line":"                    // FF_algorithm::edge_unit("},
{"lineNum":"   93","line":"                    //        p(i,2), p(i,1), p(i,3), dpop, us_edge_k_p);"},
{"lineNum":"   94","line":"                    //"},
{"lineNum":"   95","line":"                    // 3. ref particle angle (kicks both xp and yp)"},
{"lineNum":"   96","line":"                    FF_algorithm::edge_unit("},
{"lineNum":"   97","line":"                            p(i,2), p(i,1), p(i,3),"},
{"lineNum":"   98","line":"                            sp.us_edge_k_x, sp.us_edge_k_y, 0);"},
{"lineNum":"   99","line":"                }"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"                // bend"},
{"lineNum":"  102","line":"                FF_algorithm::bend_unit("},
{"lineNum":"  103","line":"                        p(i,0), p(i,1), p(i,2), p(i,3), p(i,4), p(i,5),"},
{"lineNum":"  104","line":"                        dphi, sp.strength, sp.pref_b, sp.m_b, sp.ref_cdt,"},
{"lineNum":"  105","line":"                        phase, term );"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"                if (sp.redge)"},
{"lineNum":"  108","line":"                {"},
{"lineNum":"  109","line":"                    // edge"},
{"lineNum":"  110","line":"                    // FF_algorithm::edge_unit(y, yp, ds_edge_k);"},
{"lineNum":"  111","line":"                    // FF_algorithm::edge_unit(y, xp, yp, dpop, ds_edge_k_p);"},
{"lineNum":"  112","line":"                    FF_algorithm::edge_unit("},
{"lineNum":"  113","line":"                            p(i,2), p(i,1), p(i,3),"},
{"lineNum":"  114","line":"                            sp.ds_edge_k_x, sp.ds_edge_k_y, 0);"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"                    // slot"},
{"lineNum":"  117","line":"                    FF_algorithm::slot_unit("},
{"lineNum":"  118","line":"                            p(i,0), p(i,1), p(i,2), p(i,3), p(i,4), p(i,5),"},
{"lineNum":"  119","line":"                            sp.ce2, sp.se2, sp.pref_b, sp.m_b);"},
{"lineNum":"  120","line":"                }"},
{"lineNum":"  121","line":"            }"},
{"lineNum":"  122","line":"        }"},
{"lineNum":"  123","line":"    };"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"    template<class BP>"},
{"lineNum":"  126","line":"    struct PropSbendSimd","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  127","line":"    {"},
{"lineNum":"  128","line":"        using gsv_t = typename BP::gsv_t;"},
{"lineNum":"  129","line":"        using parts_t = typename BP::parts_t;"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"        typename BP::parts_t p;"},
{"lineNum":"  132","line":"        typename BP::const_masks_t masks;"},
{"lineNum":"  133","line":"        const SbendParams sp;"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"        const double dphi;"},
{"lineNum":"  136","line":"        const Kokkos::complex<double> phase;"},
{"lineNum":"  137","line":"        const Kokkos::complex<double> term;"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"        PropSbendSimd(BP & bp, SbendParams const& sp)"},
{"lineNum":"  140","line":"            : p(bp.parts), masks(bp.masks), sp(sp)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  141","line":"            , dphi( -(sp.angle - (sp.e1 + sp.e2)) )   // -psi","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  142","line":"            , phase(std::exp(std::complex<double>(0.0, -dphi)))"},
{"lineNum":"  143","line":"            , term( std::complex<double>(0.0, sp.length / sp.angle) *","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  144","line":"                    std::complex<double>(1.0 - cos(sp.angle), - sin(sp.angle)) *","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  145","line":"                    std::complex<double>(cos(sp.e2), -sin(sp.e2)) )","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  146","line":"        { }","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  149","line":"        void operator()(const int idx) const"},
{"lineNum":"  150","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  151","line":"            int i = idx * gsv_t::size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"            int m = 0;"},
{"lineNum":"  154","line":"            for(int x=i; x<i+gsv_t::size(); ++x) m |= masks(x);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"            if (m)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  157","line":"            {"},
{"lineNum":"  158","line":"                gsv_t p0(&p(i, 0));"},
{"lineNum":"  159","line":"                gsv_t p1(&p(i, 1));"},
{"lineNum":"  160","line":"                gsv_t p2(&p(i, 2));"},
{"lineNum":"  161","line":"                gsv_t p3(&p(i, 3));"},
{"lineNum":"  162","line":"                gsv_t p4(&p(i, 4));"},
{"lineNum":"  163","line":"                gsv_t p5(&p(i, 5));"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"                if (sp.ledge)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  166","line":"                {"},
{"lineNum":"  167","line":"                    // slot"},
{"lineNum":"  168","line":"                    FF_algorithm::slot_unit<gsv_t>(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  169","line":"                            p0, p1, p2, p3, p4, p5,"},
{"lineNum":"  170","line":"                            sp.ce1, sp.se1, sp.pref_b, sp.m_b );","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"                    // edge:"},
{"lineNum":"  173","line":"                    // 1. chef fixed angle (only kicks yp)"},
{"lineNum":"  174","line":"                    // FF_algorithm::edge_unit<gsv_t>("},
{"lineNum":"  175","line":"                    //        p2, p3, sp.us_edge_k );"},
{"lineNum":"  176","line":"                    //"},
{"lineNum":"  177","line":"                    // 2. chef per-particle angle"},
{"lineNum":"  178","line":"                    // FF_algorithm::edge_unit<gsv_t>("},
{"lineNum":"  179","line":"                    //        p2, p1, p3, p5, sp.us_edge_k_p);"},
{"lineNum":"  180","line":"                    //"},
{"lineNum":"  181","line":"                    // 3. ref particle angle (kicks both xp and yp)"},
{"lineNum":"  182","line":"                    FF_algorithm::edge_unit<gsv_t>(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  183","line":"                            p2, p1, p3, sp.us_edge_k_x, sp.us_edge_k_y, 0);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  184","line":"                }"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"                // bend"},
{"lineNum":"  187","line":"                FF_algorithm::bend_unit<gsv_t>(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  188","line":"                        p0, p1, p2, p3, p4, p5,"},
{"lineNum":"  189","line":"                        dphi, sp.strength, sp.pref_b, sp.m_b, sp.ref_cdt,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  190","line":"                        phase, term );","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"                if (sp.redge)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  193","line":"                {"},
{"lineNum":"  194","line":"                    // edge"},
{"lineNum":"  195","line":"                    // FF_algorithm::edge_unit<gsv_t>(p2, p3, sp.ds_edge_k);"},
{"lineNum":"  196","line":"                    // FF_algorithm::edge_unit<gsv_t>(p2, p1, p3, p5, sp.ds_edge_k_p);"},
{"lineNum":"  197","line":"                    FF_algorithm::edge_unit<gsv_t>(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  198","line":"                            p2, p1, p3, sp.ds_edge_k_x, sp.ds_edge_k_y, 0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"                    // slot"},
{"lineNum":"  201","line":"                    FF_algorithm::slot_unit<gsv_t>(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  202","line":"                            p0, p1, p2, p3, p4, p5,"},
{"lineNum":"  203","line":"                            sp.ce2, sp.se2, sp.pref_b, sp.m_b);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  204","line":"                }"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"                p0.store(&p(i, 0));"},
{"lineNum":"  207","line":"                p1.store(&p(i, 1));"},
{"lineNum":"  208","line":"                p2.store(&p(i, 2));"},
{"lineNum":"  209","line":"                p3.store(&p(i, 3));"},
{"lineNum":"  210","line":"                p4.store(&p(i, 4));"},
{"lineNum":"  211","line":"                p5.store(&p(i, 5));"},
{"lineNum":"  212","line":"            }"},
{"lineNum":"  213","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  214","line":"    };"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"    namespace fa  = ::FF_algorithm;"},
{"lineNum":"  217","line":"    namespace by6 = ::FF_algorithm::yoshida_constants::bend_yoshida6;"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"    template<class BP>"},
{"lineNum":"  220","line":"    struct PropSbendCF"},
{"lineNum":"  221","line":"    {"},
{"lineNum":"  222","line":"        using gsv_t = typename BP::gsv_t;"},
{"lineNum":"  223","line":"        using parts_t = typename BP::parts_t;"},
{"lineNum":"  224","line":"        using const_masks_t = typename BP::const_masks_t;"},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"        parts_t p;"},
{"lineNum":"  227","line":"        const_masks_t masks;"},
{"lineNum":"  228","line":"        const SbendParams sp;"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"        const double step_angle;"},
{"lineNum":"  231","line":"        const double step_ref_cdt;"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"        const double step_kl[10];"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"        const Kokkos::complex<double> phase_e1;"},
{"lineNum":"  236","line":"        const Kokkos::complex<double> phase_e2;"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"        const Kokkos::complex<double> step_phase[4];"},
{"lineNum":"  239","line":"        const Kokkos::complex<double> step_term[4];"},
{"lineNum":"  240","line":"        const double step_dphi[4];"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"        PropSbendCF( BP & bp, SbendParams const& sp )"},
{"lineNum":"  243","line":"            : p(bp.parts), masks(bp.masks), sp(sp)"},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"            , step_angle(sp.angle/sp.steps)"},
{"lineNum":"  246","line":"            , step_ref_cdt(sp.ref_cdt/sp.steps)"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"            , step_kl{  // k_b[i] = k_l[i] * scale"},
{"lineNum":"  249","line":"                sp.k_l[0] * sp.scale * sp.length / sp.steps,"},
{"lineNum":"  250","line":"                sp.k_l[1] * sp.scale * sp.length / sp.steps,"},
{"lineNum":"  251","line":"                sp.k_l[2] * sp.scale * sp.length / sp.steps,"},
{"lineNum":"  252","line":"                sp.k_l[3] * sp.scale * sp.length / sp.steps,"},
{"lineNum":"  253","line":"                sp.k_l[4] * sp.scale * sp.length / sp.steps,"},
{"lineNum":"  254","line":"                sp.k_l[5] * sp.scale * sp.length / sp.steps,"},
{"lineNum":"  255","line":"                sp.k_l[6] * sp.scale * sp.length / sp.steps,"},
{"lineNum":"  256","line":"                sp.k_l[7] * sp.scale * sp.length / sp.steps,"},
{"lineNum":"  257","line":"                sp.k_l[8] * sp.scale * sp.length / sp.steps,"},
{"lineNum":"  258","line":"                sp.k_l[9] * sp.scale * sp.length / sp.steps }"},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"            , phase_e1(fa::bend_edge_phase(sp.e1))"},
{"lineNum":"  261","line":"            , phase_e2(fa::bend_edge_phase(sp.e2))"},
{"lineNum":"  262","line":""},
{"lineNum":"  263","line":"            , step_phase{"},
{"lineNum":"  264","line":"                fa::sbend_unit_phase(by6::c1, step_angle),"},
{"lineNum":"  265","line":"                fa::sbend_unit_phase(by6::c2, step_angle),"},
{"lineNum":"  266","line":"                fa::sbend_unit_phase(by6::c3, step_angle),"},
{"lineNum":"  267","line":"                fa::sbend_unit_phase(by6::c4, step_angle) }"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"            , step_term{"},
{"lineNum":"  270","line":"                fa::sbend_unit_term(by6::c1, step_angle, sp.r0),"},
{"lineNum":"  271","line":"                fa::sbend_unit_term(by6::c2, step_angle, sp.r0),"},
{"lineNum":"  272","line":"                fa::sbend_unit_term(by6::c3, step_angle, sp.r0),"},
{"lineNum":"  273","line":"                fa::sbend_unit_term(by6::c4, step_angle, sp.r0) }"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"            , step_dphi{"},
{"lineNum":"  276","line":"                fa::sbend_dphi(by6::c1, step_angle),"},
{"lineNum":"  277","line":"                fa::sbend_dphi(by6::c2, step_angle),"},
{"lineNum":"  278","line":"                fa::sbend_dphi(by6::c3, step_angle),"},
{"lineNum":"  279","line":"                fa::sbend_dphi(by6::c4, step_angle) }"},
{"lineNum":"  280","line":"        { }"},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  283","line":"        void operator()(const int i) const"},
{"lineNum":"  284","line":"        {"},
{"lineNum":"  285","line":"            if (masks(i))"},
{"lineNum":"  286","line":"            {"},
{"lineNum":"  287","line":"                if (sp.ledge)"},
{"lineNum":"  288","line":"                {"},
{"lineNum":"  289","line":"                    // slot"},
{"lineNum":"  290","line":"                    FF_algorithm::slot_unit("},
{"lineNum":"  291","line":"                            p(i,0), p(i,1), p(i,2), p(i,3), p(i,4), p(i,5),"},
{"lineNum":"  292","line":"                            sp.ce1, sp.se1, sp.pref_b, sp.m_b );"},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"                    // edge"},
{"lineNum":"  295","line":"                    //FF_algorithm::edge_unit(y, yp, us_edge_k);"},
{"lineNum":"  296","line":"                    //FF_algorithm::edge_unit(y, xp, yp, dpop, us_edge_k_p);"},
{"lineNum":"  297","line":"                    FF_algorithm::edge_unit("},
{"lineNum":"  298","line":"                            p(i,2), p(i,1), p(i,3),"},
{"lineNum":"  299","line":"                            sp.us_edge_k_x, sp.us_edge_k_y, 0);"},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"                    // bend edge (thin, but with face angle)"},
{"lineNum":"  302","line":"                    FF_algorithm::bend_edge("},
{"lineNum":"  303","line":"                            p(i,0), p(i,1), p(i,2), p(i,3), p(i,4), p(i,5),"},
{"lineNum":"  304","line":"                            sp.e1, phase_e1, sp.strength, sp.pref_b, sp.m_b);"},
{"lineNum":"  305","line":"                }"},
{"lineNum":"  306","line":""},
{"lineNum":"  307","line":"                // bend body"},
{"lineNum":"  308","line":"                FF_algorithm::bend_yoshida6<typename BP::part_t,"},
{"lineNum":"  309","line":"                    fa::thin_cf_kick_5<typename BP::part_t>, 5> ("},
{"lineNum":"  310","line":"                            p(i,0), p(i,1), p(i,2),"},
{"lineNum":"  311","line":"                            p(i,3), p(i,4), p(i,5),"},
{"lineNum":"  312","line":"                            sp.pref_b, sp.m_b, step_ref_cdt,"},
{"lineNum":"  313","line":"                            step_kl, step_dphi, step_phase, step_term,"},
{"lineNum":"  314","line":"                            sp.r0, sp.strength, sp.steps );"},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":"                if (sp.redge)"},
{"lineNum":"  317","line":"                {"},
{"lineNum":"  318","line":"                    // bend edge (thin, but with face angle)"},
{"lineNum":"  319","line":"                    FF_algorithm::bend_edge("},
{"lineNum":"  320","line":"                            p(i,0), p(i,1), p(i,2), p(i,3), p(i,4), p(i,5),"},
{"lineNum":"  321","line":"                            sp.e2, phase_e2, sp.strength, sp.pref_b, sp.m_b);"},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"                    // edge"},
{"lineNum":"  324","line":"                    //FF_algorithm::edge_unit(y, yp, ds_edge_k);"},
{"lineNum":"  325","line":"                    //FF_algorithm::edge_unit(y, xp, yp, dpop, ds_edge_k_p);"},
{"lineNum":"  326","line":"                    FF_algorithm::edge_unit("},
{"lineNum":"  327","line":"                            p(i,2), p(i,1), p(i,3),"},
{"lineNum":"  328","line":"                            sp.ds_edge_k_x, sp.ds_edge_k_y, 0);"},
{"lineNum":"  329","line":""},
{"lineNum":"  330","line":"                    // slot"},
{"lineNum":"  331","line":"                    FF_algorithm::slot_unit("},
{"lineNum":"  332","line":"                            p(i,0), p(i,1), p(i,2), p(i,3), p(i,4), p(i,5),"},
{"lineNum":"  333","line":"                            sp.ce2, sp.se2, sp.pref_b, sp.m_b);"},
{"lineNum":"  334","line":"                }"},
{"lineNum":"  335","line":"            }"},
{"lineNum":"  336","line":"        }"},
{"lineNum":"  337","line":"    };"},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"    template<class BP>"},
{"lineNum":"  340","line":"    struct PropSbendCFSimd","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  341","line":"    {"},
{"lineNum":"  342","line":"        using gsv_t = typename BP::gsv_t;"},
{"lineNum":"  343","line":"        using parts_t = typename BP::parts_t;"},
{"lineNum":"  344","line":"        using const_masks_t = typename BP::const_masks_t;"},
{"lineNum":"  345","line":""},
{"lineNum":"  346","line":"        parts_t p;"},
{"lineNum":"  347","line":"        const_masks_t masks;"},
{"lineNum":"  348","line":"        const SbendParams sp;"},
{"lineNum":"  349","line":""},
{"lineNum":"  350","line":"        const double step_angle;"},
{"lineNum":"  351","line":"        const double step_ref_cdt;"},
{"lineNum":"  352","line":""},
{"lineNum":"  353","line":"        const double step_kl[10];"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"        const Kokkos::complex<double> phase_e1;"},
{"lineNum":"  356","line":"        const Kokkos::complex<double> phase_e2;"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"        const Kokkos::complex<double> step_phase[4];"},
{"lineNum":"  359","line":"        const Kokkos::complex<double> step_term[4];"},
{"lineNum":"  360","line":"        const double step_dphi[4];"},
{"lineNum":"  361","line":""},
{"lineNum":"  362","line":"        PropSbendCFSimd( BP & bp, SbendParams const& sp )"},
{"lineNum":"  363","line":"            : p(bp.parts), masks(bp.masks), sp(sp)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  364","line":""},
{"lineNum":"  365","line":"            , step_angle(sp.angle/sp.steps)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  366","line":"            , step_ref_cdt(sp.ref_cdt/sp.steps)"},
{"lineNum":"  367","line":""},
{"lineNum":"  368","line":"            , step_kl{  // k_b[i] = k_l[i] * scale","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"  369","line":"                sp.k_l[0] * sp.scale * sp.length / sp.steps,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  370","line":"                sp.k_l[1] * sp.scale * sp.length / sp.steps,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  371","line":"                sp.k_l[2] * sp.scale * sp.length / sp.steps,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  372","line":"                sp.k_l[3] * sp.scale * sp.length / sp.steps,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  373","line":"                sp.k_l[4] * sp.scale * sp.length / sp.steps,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  374","line":"                sp.k_l[5] * sp.scale * sp.length / sp.steps,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  375","line":"                sp.k_l[6] * sp.scale * sp.length / sp.steps,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  376","line":"                sp.k_l[7] * sp.scale * sp.length / sp.steps,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  377","line":"                sp.k_l[8] * sp.scale * sp.length / sp.steps,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  378","line":"                sp.k_l[9] * sp.scale * sp.length / sp.steps }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  379","line":""},
{"lineNum":"  380","line":"            , phase_e1(fa::bend_edge_phase(sp.e1))","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  381","line":"            , phase_e2(fa::bend_edge_phase(sp.e2))","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"            , step_phase{"},
{"lineNum":"  384","line":"                fa::sbend_unit_phase(by6::c1, step_angle),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  385","line":"                fa::sbend_unit_phase(by6::c2, step_angle),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  386","line":"                fa::sbend_unit_phase(by6::c3, step_angle),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  387","line":"                fa::sbend_unit_phase(by6::c4, step_angle) }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  388","line":""},
{"lineNum":"  389","line":"            , step_term{"},
{"lineNum":"  390","line":"                fa::sbend_unit_term(by6::c1, step_angle, sp.r0),","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  391","line":"                fa::sbend_unit_term(by6::c2, step_angle, sp.r0),","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  392","line":"                fa::sbend_unit_term(by6::c3, step_angle, sp.r0),","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  393","line":"                fa::sbend_unit_term(by6::c4, step_angle, sp.r0) }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  394","line":""},
{"lineNum":"  395","line":"            , step_dphi{","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  396","line":"                fa::sbend_dphi(by6::c1, step_angle),"},
{"lineNum":"  397","line":"                fa::sbend_dphi(by6::c2, step_angle),"},
{"lineNum":"  398","line":"                fa::sbend_dphi(by6::c3, step_angle),"},
{"lineNum":"  399","line":"                fa::sbend_dphi(by6::c4, step_angle) }"},
{"lineNum":"  400","line":"        { }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  401","line":""},
{"lineNum":"  402","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  403","line":"        void operator()(const int idx) const"},
{"lineNum":"  404","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  405","line":"            int i = idx * gsv_t::size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  406","line":""},
{"lineNum":"  407","line":"            int m = 0;"},
{"lineNum":"  408","line":"            for(int x=i; x<i+gsv_t::size(); ++x) m |= masks(x);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  409","line":""},
{"lineNum":"  410","line":"            if (m)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  411","line":"            {"},
{"lineNum":"  412","line":"                gsv_t p0(&p(i, 0));"},
{"lineNum":"  413","line":"                gsv_t p1(&p(i, 1));"},
{"lineNum":"  414","line":"                gsv_t p2(&p(i, 2));"},
{"lineNum":"  415","line":"                gsv_t p3(&p(i, 3));"},
{"lineNum":"  416","line":"                gsv_t p4(&p(i, 4));"},
{"lineNum":"  417","line":"                gsv_t p5(&p(i, 5));"},
{"lineNum":"  418","line":""},
{"lineNum":"  419","line":"                if (sp.ledge)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  420","line":"                {"},
{"lineNum":"  421","line":"                    // slot"},
{"lineNum":"  422","line":"                    FF_algorithm::slot_unit<gsv_t>(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  423","line":"                            p0, p1, p2, p3, p4, p5,"},
{"lineNum":"  424","line":"                            sp.ce1, sp.se1, sp.pref_b, sp.m_b );","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  425","line":""},
{"lineNum":"  426","line":"                    // edge"},
{"lineNum":"  427","line":"                    //FF_algorithm::edge_unit(y, yp, us_edge_k);"},
{"lineNum":"  428","line":"                    //FF_algorithm::edge_unit(y, xp, yp, dpop, us_edge_k_p);"},
{"lineNum":"  429","line":"                    FF_algorithm::edge_unit<gsv_t>(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  430","line":"                            p2, p1, p3,"},
{"lineNum":"  431","line":"                            sp.us_edge_k_x, sp.us_edge_k_y, 0);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  432","line":""},
{"lineNum":"  433","line":"                    // bend edge (thin, but with face angle)"},
{"lineNum":"  434","line":"                    FF_algorithm::bend_edge<gsv_t>(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  435","line":"                            p0, p1, p2, p3, p4, p5,"},
{"lineNum":"  436","line":"                            sp.e1, phase_e1, sp.strength, sp.pref_b, sp.m_b);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  437","line":"                }"},
{"lineNum":"  438","line":""},
{"lineNum":"  439","line":"                // bend body"},
{"lineNum":"  440","line":"                FF_algorithm::bend_yoshida6<gsv_t,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  441","line":"                    fa::thin_cf_kick_5<gsv_t>, 5> ("},
{"lineNum":"  442","line":"                            p0, p1, p2, p3, p4, p5,"},
{"lineNum":"  443","line":"                            sp.pref_b, sp.m_b, step_ref_cdt,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  444","line":"                            step_kl, step_dphi, step_phase, step_term,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  445","line":"                            sp.r0, sp.strength, sp.steps );","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  446","line":""},
{"lineNum":"  447","line":"                if (sp.redge)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  448","line":"                {"},
{"lineNum":"  449","line":"                    // bend edge (thin, but with face angle)"},
{"lineNum":"  450","line":"                    FF_algorithm::bend_edge<gsv_t>(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  451","line":"                            p0, p1, p2, p3, p4, p5,"},
{"lineNum":"  452","line":"                            sp.e2, phase_e2, sp.strength, sp.pref_b, sp.m_b);","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  453","line":""},
{"lineNum":"  454","line":"                    // edge"},
{"lineNum":"  455","line":"                    //FF_algorithm::edge_unit(y, yp, ds_edge_k);"},
{"lineNum":"  456","line":"                    //FF_algorithm::edge_unit(y, xp, yp, dpop, ds_edge_k_p);"},
{"lineNum":"  457","line":"                    FF_algorithm::edge_unit<gsv_t>(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  458","line":"                            p2, p1, p3,"},
{"lineNum":"  459","line":"                            sp.ds_edge_k_x, sp.ds_edge_k_y, 0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  460","line":""},
{"lineNum":"  461","line":"                    // slot"},
{"lineNum":"  462","line":"                    FF_algorithm::slot_unit<gsv_t>(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  463","line":"                            p0, p1, p2, p3, p4, p5,"},
{"lineNum":"  464","line":"                            sp.ce2, sp.se2, sp.pref_b, sp.m_b);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  465","line":"                }"},
{"lineNum":"  466","line":""},
{"lineNum":"  467","line":"                p0.store(&p(i, 0));"},
{"lineNum":"  468","line":"                p1.store(&p(i, 1));"},
{"lineNum":"  469","line":"                p2.store(&p(i, 2));"},
{"lineNum":"  470","line":"                p3.store(&p(i, 3));"},
{"lineNum":"  471","line":"                p4.store(&p(i, 4));"},
{"lineNum":"  472","line":"                p5.store(&p(i, 5));"},
{"lineNum":"  473","line":"            }"},
{"lineNum":"  474","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  475","line":"    };"},
{"lineNum":"  476","line":""},
{"lineNum":"  477","line":"    inline void prop_reference("},
{"lineNum":"  478","line":"            Reference_particle & ref_l,"},
{"lineNum":"  479","line":"            SbendParams & sp )"},
{"lineNum":"  480","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  481","line":"        double pref_l = ref_l.get_momentum();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  482","line":"        double    m_l = ref_l.get_mass();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  483","line":""},
{"lineNum":"  484","line":"        // propagate the reference particle, and set the edge kick strength"},
{"lineNum":"  485","line":"        // from the reference particle"},
{"lineNum":"  486","line":"        double    x_l = ref_l.get_state()[Bunch::x];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  487","line":"        double   xp_l = ref_l.get_state()[Bunch::xp];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  488","line":"        double    y_l = ref_l.get_state()[Bunch::y];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  489","line":"        double   yp_l = ref_l.get_state()[Bunch::yp];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  490","line":"        double  cdt_l = 0.0;"},
{"lineNum":"  491","line":"        double dpop_l = ref_l.get_state()[Bunch::dpop];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  492","line":""},
{"lineNum":"  493","line":"        double dphi =  -(sp.angle - (sp.e1 + sp.e2));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  494","line":""},
{"lineNum":"  495","line":"        Kokkos::complex<double> phase ="},
{"lineNum":"  496","line":"            std::exp(std::complex<double>(0.0, -dphi));"},
{"lineNum":"  497","line":""},
{"lineNum":"  498","line":"        Kokkos::complex<double> term  ="},
{"lineNum":"  499","line":"            std::complex<double>(0.0, sp.length / sp.angle) *","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  500","line":"            std::complex<double>(1.0 - cos(sp.angle), - sin(sp.angle)) *","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  501","line":"            std::complex<double>(cos(sp.e2), -sin(sp.e2));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  502","line":""},
{"lineNum":"  503","line":"        if (sp.ledge)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  504","line":"        {"},
{"lineNum":"  505","line":"            // slot"},
{"lineNum":"  506","line":"            FF_algorithm::slot_unit("},
{"lineNum":"  507","line":"                    x_l, xp_l, y_l, yp_l, cdt_l, dpop_l,"},
{"lineNum":"  508","line":"                    sp.ce1, sp.se1, pref_l, m_l);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  509","line":""},
{"lineNum":"  510","line":"            double p_l = 1.0 + dpop_l;"},
{"lineNum":"  511","line":"            double zp_l = sqrt(p_l*p_l - xp_l*xp_l - yp_l*yp_l);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  512","line":""},
{"lineNum":"  513","line":"            sp.us_edge_k_x = sp.us_edge_k_p * (xp_l/zp_l);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  514","line":"            sp.us_edge_k_y = sp.us_edge_k_p * (yp_l/zp_l);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  515","line":""},
{"lineNum":"  516","line":"            // edge kick that is in accordance with"},
{"lineNum":"  517","line":"            // method 1 (chef fixed angle)"},
{"lineNum":"  518","line":"            // double brho_l = pref_l / PH_CNV_brho_to_p;"},
{"lineNum":"  519","line":"            // sp.us_edge_k = sp.strength * tan(atan2(xp_l, zp_l)) / brho_l;"},
{"lineNum":"  520","line":"            // FF_algorithm::edge_unit(y_l, yp_l, sp.us_edge_k );"},
{"lineNum":"  521","line":""},
{"lineNum":"  522","line":"            // edge kick strenth are scaled to bunch. so need to div by \"scale\" to scale"},
{"lineNum":"  523","line":"            // it to the lattice reference"},
{"lineNum":"  524","line":"            // in accordance with method 3"},
{"lineNum":"  525","line":"            FF_algorithm::edge_unit(y_l, xp_l, yp_l,"},
{"lineNum":"  526","line":"                    sp.us_edge_k_x/sp.scale, sp.us_edge_k_y/sp.scale, 0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  527","line":""},
{"lineNum":"  528","line":"        }"},
{"lineNum":"  529","line":""},
{"lineNum":"  530","line":"        FF_algorithm::bend_complete("},
{"lineNum":"  531","line":"                x_l, xp_l, y_l, yp_l, cdt_l, dpop_l,"},
{"lineNum":"  532","line":"                dphi, sp.strength, pref_l, m_l, 0.0/*ref cdt*/,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  533","line":"                phase, term);"},
{"lineNum":"  534","line":""},
{"lineNum":"  535","line":"        if (sp.redge)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  536","line":"        {"},
{"lineNum":"  537","line":"            double p_l = 1.0 + dpop_l;"},
{"lineNum":"  538","line":"            double zp_l = sqrt(p_l*p_l - xp_l*xp_l - yp_l*yp_l);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  539","line":""},
{"lineNum":"  540","line":"            sp.ds_edge_k_x = sp.ds_edge_k_p * (xp_l/zp_l);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  541","line":"            sp.ds_edge_k_y = sp.ds_edge_k_p * (yp_l/zp_l);"},
{"lineNum":"  542","line":""},
{"lineNum":"  543","line":"            // edge kick that is in accordance with"},
{"lineNum":"  544","line":"            // method 1 (chef fixed angle)"},
{"lineNum":"  545","line":"            // double brho_l = pref_l / PH_CNV_brho_to_p;"},
{"lineNum":"  546","line":"            // sp.ds_edge_k = - sp.strength * tan(atan2(xp_l, zp_l)) / brho_l;"},
{"lineNum":"  547","line":"            // FF_algorithm::edge_unit(y_l, yp_l, sp.ds_edge_k );"},
{"lineNum":"  548","line":""},
{"lineNum":"  549","line":"            // edge kick strenth are scaled to bunch. so need to div by \"scale\" to scale"},
{"lineNum":"  550","line":"            // it to the lattice reference"},
{"lineNum":"  551","line":"            FF_algorithm::edge_unit(y_l, xp_l, yp_l,"},
{"lineNum":"  552","line":"                    sp.ds_edge_k_x/sp.scale, sp.ds_edge_k_y/sp.scale, 0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  553","line":""},
{"lineNum":"  554","line":"            // slot"},
{"lineNum":"  555","line":"            FF_algorithm::slot_unit("},
{"lineNum":"  556","line":"                    x_l, xp_l, y_l, yp_l, cdt_l, dpop_l,"},
{"lineNum":"  557","line":"                    sp.ce2, sp.se2, pref_l, m_l);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  558","line":"        }"},
{"lineNum":"  559","line":""},
{"lineNum":"  560","line":"        ref_l.set_state(x_l, xp_l, y_l, yp_l, cdt_l, dpop_l);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  561","line":"        sp.ref_cdt = cdt_l;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  562","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  563","line":""},
{"lineNum":"  564","line":"    inline void prop_reference_cf("},
{"lineNum":"  565","line":"            Reference_particle & ref_l,"},
{"lineNum":"  566","line":"            SbendParams & sp )"},
{"lineNum":"  567","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  568","line":"        double pref_l = ref_l.get_momentum();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  569","line":"        double    m_l = ref_l.get_mass();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  570","line":""},
{"lineNum":"  571","line":"        // propagate the reference particle, and set the edge kick strength"},
{"lineNum":"  572","line":"        // from the reference particle"},
{"lineNum":"  573","line":"        double    x_l = ref_l.get_state()[Bunch::x];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  574","line":"        double   xp_l = ref_l.get_state()[Bunch::xp];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  575","line":"        double    y_l = ref_l.get_state()[Bunch::y];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  576","line":"        double   yp_l = ref_l.get_state()[Bunch::yp];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  577","line":"        double  cdt_l = 0.0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  578","line":"        double dpop_l = ref_l.get_state()[Bunch::dpop];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  579","line":""},
{"lineNum":"  580","line":"        double step_length = sp.length / sp.steps;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  581","line":"        double step_angle = sp.angle/sp.steps;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  582","line":""},
{"lineNum":"  583","line":"        // step strength for reference"},
{"lineNum":"  584","line":"        double step_kl[10];"},
{"lineNum":"  585","line":"        for (int i=0; i<10; ++i) step_kl[i] = sp.k_l[i] * step_length;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  586","line":""},
{"lineNum":"  587","line":"        Kokkos::complex<double> phase_e1 = FF_algorithm::bend_edge_phase(sp.e1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  588","line":"        Kokkos::complex<double> phase_e2 = FF_algorithm::bend_edge_phase(sp.e2);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  589","line":""},
{"lineNum":"  590","line":"        Kokkos::complex<double> step_phase[4] = {"},
{"lineNum":"  591","line":"            fa::sbend_unit_phase(by6::c1, step_angle),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  592","line":"            fa::sbend_unit_phase(by6::c2, step_angle),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  593","line":"            fa::sbend_unit_phase(by6::c3, step_angle),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  594","line":"            fa::sbend_unit_phase(by6::c4, step_angle)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  595","line":"        };"},
{"lineNum":"  596","line":""},
{"lineNum":"  597","line":"        Kokkos::complex<double> step_term[4] = {"},
{"lineNum":"  598","line":"            fa::sbend_unit_term(by6::c1, step_angle, sp.r0),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  599","line":"            fa::sbend_unit_term(by6::c2, step_angle, sp.r0),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  600","line":"            fa::sbend_unit_term(by6::c3, step_angle, sp.r0),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  601","line":"            fa::sbend_unit_term(by6::c4, step_angle, sp.r0)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  602","line":"        };"},
{"lineNum":"  603","line":""},
{"lineNum":"  604","line":"        double step_dphi[4] = {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  605","line":"            fa::sbend_dphi(by6::c1, step_angle),"},
{"lineNum":"  606","line":"            fa::sbend_dphi(by6::c2, step_angle),"},
{"lineNum":"  607","line":"            fa::sbend_dphi(by6::c3, step_angle),"},
{"lineNum":"  608","line":"            fa::sbend_dphi(by6::c4, step_angle),"},
{"lineNum":"  609","line":"        };"},
{"lineNum":"  610","line":""},
{"lineNum":"  611","line":"        if (sp.ledge)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  612","line":"        {"},
{"lineNum":"  613","line":"            // slot"},
{"lineNum":"  614","line":"            FF_algorithm::slot_unit("},
{"lineNum":"  615","line":"                    x_l, xp_l, y_l, yp_l, cdt_l, dpop_l,"},
{"lineNum":"  616","line":"                    sp.ce1, sp.se1, pref_l, m_l);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  617","line":""},
{"lineNum":"  618","line":"            double p_l = 1.0 + dpop_l;"},
{"lineNum":"  619","line":"            double zp_l = sqrt(p_l*p_l - xp_l*xp_l - yp_l*yp_l);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  620","line":""},
{"lineNum":"  621","line":"            sp.us_edge_k_x = sp.us_edge_k_p * (xp_l/zp_l);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  622","line":"            sp.us_edge_k_y = sp.us_edge_k_p * (yp_l/zp_l);"},
{"lineNum":"  623","line":""},
{"lineNum":"  624","line":"            // edge"},
{"lineNum":"  625","line":"            //FF_algorithm::edge_unit(y_l, yp_l, us_edge_k/scale);"},
{"lineNum":"  626","line":"            //FF_algorithm::edge_unit(y_l, xp_l, yp_l, dpop_l, us_edge_k_p/scale);"},
{"lineNum":"  627","line":"            FF_algorithm::edge_unit(y_l, xp_l, yp_l,"},
{"lineNum":"  628","line":"                    sp.us_edge_k_x/sp.scale, sp.us_edge_k_y/sp.scale, 0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  629","line":""},
{"lineNum":"  630","line":"            // bend edge (thin)"},
{"lineNum":"  631","line":"            FF_algorithm::bend_edge("},
{"lineNum":"  632","line":"                    x_l, xp_l, y_l, yp_l, cdt_l, dpop_l,"},
{"lineNum":"  633","line":"                    sp.e1, phase_e1, sp.strength, pref_l, m_l);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  634","line":"        }"},
{"lineNum":"  635","line":""},
{"lineNum":"  636","line":"        FF_algorithm::bend_yoshida6<double,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  637","line":"            FF_algorithm::thin_cf_kick_5<double>, 5> ("},
{"lineNum":"  638","line":"                    x_l, xp_l, y_l, yp_l, cdt_l, dpop_l,"},
{"lineNum":"  639","line":"                    pref_l, m_l, 0.0 /* step ref_cdt */,"},
{"lineNum":"  640","line":"                    step_kl, step_dphi, step_phase, step_term,"},
{"lineNum":"  641","line":"                    sp.r0, sp.strength, sp.steps);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  642","line":""},
{"lineNum":"  643","line":"        if (sp.redge)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  644","line":"        {"},
{"lineNum":"  645","line":"            // bend edge (thin)"},
{"lineNum":"  646","line":"            FF_algorithm::bend_edge("},
{"lineNum":"  647","line":"                    x_l, xp_l, y_l, yp_l, cdt_l, dpop_l,"},
{"lineNum":"  648","line":"                    sp.e2, phase_e2, sp.strength, pref_l, m_l);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  649","line":""},
{"lineNum":"  650","line":"            double p_l = 1.0 + dpop_l;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  651","line":"            double zp_l = sqrt(p_l*p_l - xp_l*xp_l - yp_l*yp_l);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  652","line":""},
{"lineNum":"  653","line":"            sp.ds_edge_k_x = sp.ds_edge_k_p * (xp_l/zp_l);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  654","line":"            sp.ds_edge_k_y = sp.ds_edge_k_p * (yp_l/zp_l);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  655","line":""},
{"lineNum":"  656","line":"            // edge"},
{"lineNum":"  657","line":"            //FF_algorithm::edge_unit(y_l, yp_l, ds_edge_k);"},
{"lineNum":"  658","line":"            //FF_algorithm::edge_unit(y_l, xp_l, yp_l, dpop_l, ds_edge_k_p/scale);"},
{"lineNum":"  659","line":"            FF_algorithm::edge_unit(y_l, xp_l, yp_l,"},
{"lineNum":"  660","line":"                    sp.ds_edge_k_x/sp.scale, sp.ds_edge_k_y/sp.scale, 0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  661","line":""},
{"lineNum":"  662","line":"            // slot"},
{"lineNum":"  663","line":"            FF_algorithm::slot_unit("},
{"lineNum":"  664","line":"                    x_l, xp_l, y_l, yp_l, cdt_l, dpop_l,"},
{"lineNum":"  665","line":"                    sp.ce2, sp.se2, pref_l, m_l);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  666","line":"        }"},
{"lineNum":"  667","line":""},
{"lineNum":"  668","line":"        ref_l.set_state(x_l, xp_l, y_l, yp_l, cdt_l, dpop_l);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  669","line":"        sp.ref_cdt = cdt_l;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  670","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  671","line":""},
{"lineNum":"  672","line":"    // max multipole moments"},
{"lineNum":"  673","line":"    constexpr const int max_mp_order = 5;"},
{"lineNum":"  674","line":""},
{"lineNum":"  675","line":"    template<class BP>"},
{"lineNum":"  676","line":"    struct PropThinPoleSimd"},
{"lineNum":"  677","line":"    {"},
{"lineNum":"  678","line":"        using gsv_t = typename BP::gsv_t;"},
{"lineNum":"  679","line":""},
{"lineNum":"  680","line":"        typename BP::parts_t p;"},
{"lineNum":"  681","line":"        typename BP::const_masks_t masks;"},
{"lineNum":"  682","line":"        kt::arr_t<double, 2*max_mp_order> k;"},
{"lineNum":"  683","line":""},
{"lineNum":"  684","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  685","line":"        void operator()(const int idx) const"},
{"lineNum":"  686","line":"        {"},
{"lineNum":"  687","line":"            int i = idx * gsv_t::size();"},
{"lineNum":"  688","line":""},
{"lineNum":"  689","line":"            int m = 0;"},
{"lineNum":"  690","line":"            for(int x=i; x<i+gsv_t::size(); ++x) m |= masks(x);"},
{"lineNum":"  691","line":""},
{"lineNum":"  692","line":"            if (m)"},
{"lineNum":"  693","line":"            {"},
{"lineNum":"  694","line":"                gsv_t  x(&p(i, 0));"},
{"lineNum":"  695","line":"                gsv_t xp(&p(i, 1));"},
{"lineNum":"  696","line":"                gsv_t  y(&p(i, 2));"},
{"lineNum":"  697","line":"                gsv_t yp(&p(i, 3));"},
{"lineNum":"  698","line":""},
{"lineNum":"  699","line":"                if (k[2] || k[3])"},
{"lineNum":"  700","line":"                    FF_algorithm::thin_quadrupole_unit(x, xp, y, yp, k.data+2);"},
{"lineNum":"  701","line":""},
{"lineNum":"  702","line":"                if (k[4] || k[5])"},
{"lineNum":"  703","line":"                    FF_algorithm::thin_sextupole_unit(x, xp, y, yp, k.data+4);"},
{"lineNum":"  704","line":""},
{"lineNum":"  705","line":"                if (k[6] || k[7])"},
{"lineNum":"  706","line":"                    FF_algorithm::thin_octupole_unit(x, xp, y, yp, k.data+6);"},
{"lineNum":"  707","line":""},
{"lineNum":"  708","line":"                if (k[8] || k[9])"},
{"lineNum":"  709","line":"                    FF_algorithm::thin_magnet_unit(x, xp, y, yp, k.data+8, 5);"},
{"lineNum":"  710","line":""},
{"lineNum":"  711","line":"#if 0"},
{"lineNum":"  712","line":"                if (k[10] || k[11])"},
{"lineNum":"  713","line":"                    FF_algorithm::thin_magnet_unit(x, xp, y, yp, k.data+10, 6);"},
{"lineNum":"  714","line":""},
{"lineNum":"  715","line":"                if (k[12] || k[13])"},
{"lineNum":"  716","line":"                    FF_algorithm::thin_magnet_unit(x, xp, y, yp, k.data+12, 7);"},
{"lineNum":"  717","line":""},
{"lineNum":"  718","line":"                if (k[14] || k[15])"},
{"lineNum":"  719","line":"                    FF_algorithm::thin_magnet_unit(x, xp, y, yp, k.data+14, 8);"},
{"lineNum":"  720","line":"#endif"},
{"lineNum":"  721","line":""},
{"lineNum":"  722","line":"                xp.store(&p(i, 1));"},
{"lineNum":"  723","line":"                yp.store(&p(i, 3));"},
{"lineNum":"  724","line":"            }"},
{"lineNum":"  725","line":"        }"},
{"lineNum":"  726","line":"    };"},
{"lineNum":"  727","line":""},
{"lineNum":"  728","line":""},
{"lineNum":"  729","line":"}"},
{"lineNum":"  730","line":""},
{"lineNum":"  731","line":"namespace FF_sbend"},
{"lineNum":"  732","line":"{"},
{"lineNum":"  733","line":""},
{"lineNum":"  734","line":"template<class BunchT>"},
{"lineNum":"  735","line":"inline void apply(Lattice_element_slice const& slice, BunchT & bunch)"},
{"lineNum":"  736","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  737","line":"    using namespace sbend_impl;"},
{"lineNum":"  738","line":""},
{"lineNum":"  739","line":"    scoped_simple_timer timer(\"libFF_sbend\");"},
{"lineNum":"  740","line":""},
{"lineNum":"  741","line":"    auto const& ele = slice.get_lattice_element();"},
{"lineNum":"  742","line":""},
{"lineNum":"  743","line":"    SbendParams sp;"},
{"lineNum":"  744","line":""},
{"lineNum":"  745","line":"    double a = ele.get_double_attribute(\"angle\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  746","line":"    double l = ele.get_double_attribute(\"l\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  747","line":""},
{"lineNum":"  748","line":"    sp.length = slice.get_right() - slice.get_left();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  749","line":"    sp.angle  = ( sp.length / l ) * a;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  750","line":"    sp.r0     = l / a;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  751","line":"    sp.steps  = FF_algorithm::default_steps;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  752","line":""},
{"lineNum":"  753","line":"    sp.ledge = slice.has_left_edge();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  754","line":"    sp.redge = slice.has_right_edge();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  755","line":""},
{"lineNum":"  756","line":"    sp.e1 = ele.get_double_attribute(\"e1\", 0.0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  757","line":"    sp.e2 = ele.get_double_attribute(\"e2\", 0.0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  758","line":""},
{"lineNum":"  759","line":"    Reference_particle       & ref_l = bunch.get_design_reference_particle();"},
{"lineNum":"  760","line":"    Reference_particle const & ref_b = bunch.get_reference_particle();"},
{"lineNum":"  761","line":""},
{"lineNum":"  762","line":"    // quad, sextupole, and octupole components"},
{"lineNum":"  763","line":"    sp.k_l[0] = ele.get_double_attribute(\"k1\", 0.0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  764","line":"    sp.k_l[2] = ele.get_double_attribute(\"k2\", 0.0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  765","line":"    sp.k_l[4] = ele.get_double_attribute(\"k3\", 0.0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  766","line":"    sp.k_l[6] = ele.get_double_attribute(\"k4\", 0.0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  767","line":"    sp.k_l[8] = ele.get_double_attribute(\"k5\", 0.0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  768","line":""},
{"lineNum":"  769","line":"    sp.k_l[1] = ele.get_double_attribute(\"k1s\", 0.0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  770","line":"    sp.k_l[3] = ele.get_double_attribute(\"k2s\", 0.0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  771","line":"    sp.k_l[5] = ele.get_double_attribute(\"k3s\", 0.0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  772","line":"    sp.k_l[7] = ele.get_double_attribute(\"k4s\", 0.0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  773","line":"    sp.k_l[9] = ele.get_double_attribute(\"k5s\", 0.0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  774","line":""},
{"lineNum":"  775","line":"    int cf = 0;  // combined function"},
{"lineNum":"  776","line":""},
{"lineNum":"  777","line":"    if ((sp.k_l[0] != 0.0) || (sp.k_l[1] != 0.0)) cf = 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  778","line":"    if ((sp.k_l[2] != 0.0) || (sp.k_l[3] != 0.0)) cf = 2;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  779","line":"    if ((sp.k_l[4] != 0.0) || (sp.k_l[5] != 0.0)) cf = 3;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  780","line":"    if ((sp.k_l[6] != 0.0) || (sp.k_l[7] != 0.0)) cf = 4;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  781","line":"    if ((sp.k_l[8] != 0.0) || (sp.k_l[9] != 0.0)) cf = 5;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  782","line":""},
{"lineNum":"  783","line":"    // error multipole terms"},
{"lineNum":"  784","line":"    kt::arr_t<double, 2*max_mp_order> kn;"},
{"lineNum":"  785","line":""},
{"lineNum":"  786","line":"    // multipole moments"},
{"lineNum":"  787","line":"    // kn[2] ... kn[2*max_mp_order-1]"},
{"lineNum":"  788","line":"    bool has_mp = false;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  789","line":""},
{"lineNum":"  790","line":"    std::string a_attr = \"a0\";"},
{"lineNum":"  791","line":"    std::string b_attr = \"b0\";"},
{"lineNum":"  792","line":""},
{"lineNum":"  793","line":"    for(int i=1; i<max_mp_order; ++i)"},
{"lineNum":"  794","line":"    {"},
{"lineNum":"  795","line":"        a_attr[1] = \'0\' + i;","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  796","line":"        b_attr[1] = \'0\' + i;","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  797","line":""},
{"lineNum":"  798","line":"        kn[i*2+0] = ele.get_double_attribute(b_attr, 0.0);","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  799","line":"        kn[i*2+1] = ele.get_double_attribute(a_attr, 0.0);","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  800","line":""},
{"lineNum":"  801","line":"        if (kn[i*2+0] || kn[i*2+1])","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  802","line":"        {"},
{"lineNum":"  803","line":"            has_mp = true;","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  804","line":""},
{"lineNum":"  805","line":"            double coeff = FF_algorithm::factorial(i);"},
{"lineNum":"  806","line":""},
{"lineNum":"  807","line":"            kn[i*2+0] *= a * coeff;"},
{"lineNum":"  808","line":"            kn[i*2+1] *= a * coeff;"},
{"lineNum":"  809","line":""},
{"lineNum":"  810","line":"            if (sp.k_l[(i-1)*2+0] || sp.k_l[(i-1)*2+1])","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  811","line":"            {"},
{"lineNum":"  812","line":"                throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  813","line":"                        \"having both kn/ks and a/b coefficents are forbidden in sbends\");"},
{"lineNum":"  814","line":"            }"},
{"lineNum":"  815","line":""},
{"lineNum":"  816","line":"            sp.k_l[(i-1)*2+0] = kn[i*2+0];","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  817","line":"            sp.k_l[(i-1)*2+1] = kn[i*2+1];"},
{"lineNum":"  818","line":"        }"},
{"lineNum":"  819","line":"    }"},
{"lineNum":"  820","line":""},
{"lineNum":"  821","line":""},
{"lineNum":"  822","line":"    sp.scale = ref_l.get_momentum() /","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  823","line":"        (ref_b.get_momentum() * (1.0 + ref_b.get_state()[Bunch::dpop]));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  824","line":""},
{"lineNum":"  825","line":"    if (!sp.redge) sp.e2 = 0;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  826","line":"    if (!sp.ledge) sp.e1 = 0;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  827","line":""},
{"lineNum":"  828","line":"    // lattice reference"},
{"lineNum":"  829","line":"    double pref_l = ref_l.get_momentum();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  830","line":"    double brho_l = pref_l / PH_CNV_brho_to_p;"},
{"lineNum":"  831","line":"    double    m_l = ref_l.get_mass();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  832","line":"    int  charge_l = ref_l.get_charge();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  833","line":""},
{"lineNum":"  834","line":"    // the particle dpop is with respect to this momentum which goes with the bunch"},
{"lineNum":"  835","line":"    double pref_b = ref_b.get_momentum();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  836","line":"    double brho_b = pref_b / PH_CNV_brho_to_p;"},
{"lineNum":"  837","line":"    double    m_b = bunch.get_mass();"},
{"lineNum":"  838","line":""},
{"lineNum":"  839","line":"    // common"},
{"lineNum":"  840","line":"    sp.strength = brho_l * a / l;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  841","line":"    sp.pref_b   = pref_b;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  842","line":"    sp.m_b      = m_b;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  843","line":""},
{"lineNum":"  844","line":"    sp.ce1 = cos(-sp.e1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  845","line":"    sp.se1 = sin(-sp.e1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  846","line":"    sp.ce2 = cos(-sp.e2);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  847","line":"    sp.se2 = sin(-sp.e2);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  848","line":""},
{"lineNum":"  849","line":"    // edge kick strength (scaled to particle)"},
{"lineNum":"  850","line":"    sp.us_edge_k =   ((charge_l > 0) ? 1.0 : -1.0) * sp.strength * tan( sp.e1) / brho_b;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  851","line":"    sp.ds_edge_k = - ((charge_l > 0) ? 1.0 : -1.0) * sp.strength * tan(-sp.e2) / brho_b;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  852","line":""},
{"lineNum":"  853","line":"    // edge kick (per) particle (full strength, angles are calculated at each particle)"},
{"lineNum":"  854","line":"    sp.us_edge_k_p =   ((charge_l > 0) ? 1.0 : -1.0) * sp.strength / brho_b;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  855","line":"    sp.ds_edge_k_p = - ((charge_l > 0) ? 1.0 : -1.0) * sp.strength / brho_b;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  856","line":""},
{"lineNum":"  857","line":"    // edge kick x/y"},
{"lineNum":"  858","line":"    sp.us_edge_k_x = 0.0;"},
{"lineNum":"  859","line":"    sp.us_edge_k_y = 0.0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  860","line":""},
{"lineNum":"  861","line":"    sp.ds_edge_k_x = 0.0;"},
{"lineNum":"  862","line":"    sp.ds_edge_k_y = 0.0;"},
{"lineNum":"  863","line":""},
{"lineNum":"  864","line":"    using namespace Kokkos;"},
{"lineNum":"  865","line":"    using exec = typename BunchT::exec_space;"},
{"lineNum":"  866","line":""},
{"lineNum":"  867","line":"    if (cf == 0)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  868","line":"    {"},
{"lineNum":"  869","line":"        auto apply = [&](ParticleGroup pg) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  870","line":"            auto bp = bunch.get_bunch_particles(pg);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  871","line":"            if (!bp.num_valid()) return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  872","line":""},
{"lineNum":"  873","line":"#if LIBFF_USE_GSV"},
{"lineNum":"  874","line":"            if (has_mp)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  875","line":"            {"},
{"lineNum":"  876","line":"#if 0"},
{"lineNum":"  877","line":"                // bend - multipole kick - bend"},
{"lineNum":"  878","line":"                auto range = RangePolicy<exec>(0, bp.size_in_gsv());"},
{"lineNum":"  879","line":""},
{"lineNum":"  880","line":"                auto sp1 = sp;"},
{"lineNum":"  881","line":"                auto sp2 = sp;"},
{"lineNum":"  882","line":""},
{"lineNum":"  883","line":"                sp1.redge = false;"},
{"lineNum":"  884","line":"                sp1.length *= 0.5;"},
{"lineNum":"  885","line":"                sp1.angle *= 0.5;"},
{"lineNum":"  886","line":"                sp1.e2 = 0.0;"},
{"lineNum":"  887","line":""},
{"lineNum":"  888","line":"                sp2.ledge = false;"},
{"lineNum":"  889","line":"                sp2.length *= 0.5;"},
{"lineNum":"  890","line":"                sp2.angle *= 0.5;"},
{"lineNum":"  891","line":"                sp2.e1 = 0.0;"},
{"lineNum":"  892","line":""},
{"lineNum":"  893","line":"                prop_reference(ref_l, sp1);"},
{"lineNum":"  894","line":"                prop_reference(ref_l, sp2);"},
{"lineNum":"  895","line":""},
{"lineNum":"  896","line":"                PropSbendSimd<typename BunchT::bp_t> sbend1(bp, sp1);"},
{"lineNum":"  897","line":"                Kokkos::parallel_for(range, sbend1);"},
{"lineNum":"  898","line":""},
{"lineNum":"  899","line":"                PropThinPoleSimd<typename BunchT::bp_t> ptp{"},
{"lineNum":"  900","line":"                    bp.parts, bp.masks, kn};"},
{"lineNum":"  901","line":"                Kokkos::parallel_for(range, ptp);"},
{"lineNum":"  902","line":""},
{"lineNum":"  903","line":"                PropSbendSimd<typename BunchT::bp_t> sbend2(bp, sp2);"},
{"lineNum":"  904","line":"                Kokkos::parallel_for(range, sbend2);"},
{"lineNum":"  905","line":"#else"},
{"lineNum":"  906","line":""},
{"lineNum":"  907","line":"                // Yoshida (same to the CF sbends)"},
{"lineNum":"  908","line":"                prop_reference_cf(ref_l, sp);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  909","line":""},
{"lineNum":"  910","line":"                auto range = RangePolicy<exec>(0, bp.size_in_gsv());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  911","line":"                PropSbendCFSimd<typename BunchT::bp_t> sbend(bp, sp);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  912","line":"                Kokkos::parallel_for(range, sbend);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  913","line":"#endif"},
{"lineNum":"  914","line":"            }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  915","line":"            else"},
{"lineNum":"  916","line":"            {"},
{"lineNum":"  917","line":"                prop_reference(ref_l, sp);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  918","line":""},
{"lineNum":"  919","line":"                auto range = RangePolicy<exec>(0, bp.size_in_gsv());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  920","line":"                PropSbendSimd<typename BunchT::bp_t> sbend(bp, sp);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  921","line":"                Kokkos::parallel_for(range, sbend);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  922","line":"            }"},
{"lineNum":"  923","line":"#else"},
{"lineNum":"  924","line":"            auto range = RangePolicy<exec>(0, bp.size());"},
{"lineNum":"  925","line":"            PropSbend<typename BunchT::bp_t> sbend(bp, sp);"},
{"lineNum":"  926","line":"            Kokkos::parallel_for(range, sbend);"},
{"lineNum":"  927","line":"#endif"},
{"lineNum":"  928","line":"        };","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  929","line":""},
{"lineNum":"  930","line":"        apply(ParticleGroup::regular);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  931","line":"        apply(ParticleGroup::spectator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  932","line":"    }"},
{"lineNum":"  933","line":"    else"},
{"lineNum":"  934","line":"    {"},
{"lineNum":"  935","line":"        // propagate reference"},
{"lineNum":"  936","line":"        prop_reference_cf(ref_l, sp);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  937","line":""},
{"lineNum":"  938","line":"        auto apply = [&](ParticleGroup pg) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  939","line":"            auto bp = bunch.get_bunch_particles(pg);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  940","line":"            if (!bp.num_valid()) return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  941","line":""},
{"lineNum":"  942","line":"#if LIBFF_USE_GSV"},
{"lineNum":"  943","line":"            auto range = RangePolicy<exec>(0, bp.size_in_gsv());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  944","line":"            PropSbendCFSimd<typename BunchT::bp_t> sbend(bp, sp);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  945","line":"            Kokkos::parallel_for(range, sbend);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  946","line":"#else"},
{"lineNum":"  947","line":"            auto range = RangePolicy<exec>(0, bp.size());"},
{"lineNum":"  948","line":"            PropSbendCF<typename BunchT::bp_t> sbend(bp, sp);"},
{"lineNum":"  949","line":"            Kokkos::parallel_for(range, sbend);"},
{"lineNum":"  950","line":"#endif"},
{"lineNum":"  951","line":"        };","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  952","line":""},
{"lineNum":"  953","line":"        apply(ParticleGroup::regular);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  954","line":"        apply(ParticleGroup::spectator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  955","line":"    }"},
{"lineNum":"  956","line":""},
{"lineNum":"  957","line":"    bunch.get_reference_particle().increment_trajectory(sp.length);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  958","line":""},
{"lineNum":"  959","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  960","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  961","line":""},
{"lineNum":"  962","line":"}"},
{"lineNum":"  963","line":""},
{"lineNum":"  964","line":"#endif // FF_SBEND_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 229, "covered" : 0,};
var merged_data = [];
