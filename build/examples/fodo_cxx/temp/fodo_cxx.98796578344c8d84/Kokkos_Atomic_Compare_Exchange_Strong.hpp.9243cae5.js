var data = {lines:[
{"lineNum":"    1","line":"/*"},
{"lineNum":"    2","line":"//@HEADER"},
{"lineNum":"    3","line":"// ************************************************************************"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"//                        Kokkos v. 3.0"},
{"lineNum":"    6","line":"//       Copyright (2020) National Technology & Engineering"},
{"lineNum":"    7","line":"//               Solutions of Sandia, LLC (NTESS)."},
{"lineNum":"    8","line":"//"},
{"lineNum":"    9","line":"// Under the terms of Contract DE-NA0003525 with NTESS,"},
{"lineNum":"   10","line":"// the U.S. Government retains certain rights in this software."},
{"lineNum":"   11","line":"//"},
{"lineNum":"   12","line":"// Redistribution and use in source and binary forms, with or without"},
{"lineNum":"   13","line":"// modification, are permitted provided that the following conditions are"},
{"lineNum":"   14","line":"// met:"},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"// 1. Redistributions of source code must retain the above copyright"},
{"lineNum":"   17","line":"// notice, this list of conditions and the following disclaimer."},
{"lineNum":"   18","line":"//"},
{"lineNum":"   19","line":"// 2. Redistributions in binary form must reproduce the above copyright"},
{"lineNum":"   20","line":"// notice, this list of conditions and the following disclaimer in the"},
{"lineNum":"   21","line":"// documentation and/or other materials provided with the distribution."},
{"lineNum":"   22","line":"//"},
{"lineNum":"   23","line":"// 3. Neither the name of the Corporation nor the names of the"},
{"lineNum":"   24","line":"// contributors may be used to endorse or promote products derived from"},
{"lineNum":"   25","line":"// this software without specific prior written permission."},
{"lineNum":"   26","line":"//"},
{"lineNum":"   27","line":"// THIS SOFTWARE IS PROVIDED BY NTESS \"AS IS\" AND ANY"},
{"lineNum":"   28","line":"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"},
{"lineNum":"   29","line":"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR"},
{"lineNum":"   30","line":"// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NTESS OR THE"},
{"lineNum":"   31","line":"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,"},
{"lineNum":"   32","line":"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,"},
{"lineNum":"   33","line":"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR"},
{"lineNum":"   34","line":"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF"},
{"lineNum":"   35","line":"// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING"},
{"lineNum":"   36","line":"// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"},
{"lineNum":"   37","line":"// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   38","line":"//"},
{"lineNum":"   39","line":"// Questions? Contact Christian R. Trott (crtrott@sandia.gov)"},
{"lineNum":"   40","line":"//"},
{"lineNum":"   41","line":"// ************************************************************************"},
{"lineNum":"   42","line":"//@HEADER"},
{"lineNum":"   43","line":"*/"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"#if defined(KOKKOS_ENABLE_RFO_PREFETCH)"},
{"lineNum":"   46","line":"#include <xmmintrin.h>"},
{"lineNum":"   47","line":"#endif"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"#include <Kokkos_Macros.hpp>"},
{"lineNum":"   50","line":"#if defined(KOKKOS_ATOMIC_HPP) && \\"},
{"lineNum":"   51","line":"    !defined(KOKKOS_ATOMIC_COMPARE_EXCHANGE_STRONG_HPP)"},
{"lineNum":"   52","line":"#define KOKKOS_ATOMIC_COMPARE_EXCHANGE_STRONG_HPP"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"#if defined(KOKKOS_ENABLE_CUDA)"},
{"lineNum":"   55","line":"#include <Cuda/Kokkos_Cuda_Version_9_8_Compatibility.hpp>"},
{"lineNum":"   56","line":"#endif"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"#include <impl/Kokkos_Atomic_Memory_Order.hpp>"},
{"lineNum":"   59","line":"#include <impl/Kokkos_Memory_Fence.hpp>"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"#if defined(KOKKOS_ENABLE_CUDA)"},
{"lineNum":"   62","line":"#include <Cuda/Kokkos_Cuda_Atomic_Intrinsics.hpp>"},
{"lineNum":"   63","line":"#endif"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"namespace Kokkos {"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"//----------------------------------------------------------------------------"},
{"lineNum":"   68","line":"// Cuda native CAS supports int, unsigned int, and unsigned long long int"},
{"lineNum":"   69","line":"// (non-standard type). Must cast-away \'volatile\' for the CAS call."},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"#if defined(KOKKOS_ENABLE_CUDA)"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"#if defined(__CUDA_ARCH__) || defined(KOKKOS_IMPL_CUDA_CLANG_WORKAROUND)"},
{"lineNum":"   74","line":"__inline__ __device__ int atomic_compare_exchange(volatile int* const dest,"},
{"lineNum":"   75","line":"                                                  const int compare,"},
{"lineNum":"   76","line":"                                                  const int val) {"},
{"lineNum":"   77","line":"  return atomicCAS((int*)dest, compare, val);"},
{"lineNum":"   78","line":"}"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"__inline__ __device__ unsigned int atomic_compare_exchange("},
{"lineNum":"   81","line":"    volatile unsigned int* const dest, const unsigned int compare,"},
{"lineNum":"   82","line":"    const unsigned int val) {"},
{"lineNum":"   83","line":"  return atomicCAS((unsigned int*)dest, compare, val);"},
{"lineNum":"   84","line":"}"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"__inline__ __device__ unsigned long long int atomic_compare_exchange("},
{"lineNum":"   87","line":"    volatile unsigned long long int* const dest,"},
{"lineNum":"   88","line":"    const unsigned long long int compare, const unsigned long long int val) {"},
{"lineNum":"   89","line":"  return atomicCAS((unsigned long long int*)dest, compare, val);"},
{"lineNum":"   90","line":"}"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"template <typename T>"},
{"lineNum":"   93","line":"__inline__ __device__ T atomic_compare_exchange("},
{"lineNum":"   94","line":"    volatile T* const dest, const T& compare,"},
{"lineNum":"   95","line":"    typename std::enable_if<sizeof(T) == sizeof(int), const T&>::type val) {"},
{"lineNum":"   96","line":"  const int tmp = atomicCAS((int*)dest, *((int*)&compare), *((int*)&val));"},
{"lineNum":"   97","line":"  return *((T*)&tmp);"},
{"lineNum":"   98","line":"}"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"template <typename T>"},
{"lineNum":"  101","line":"__inline__ __device__ T atomic_compare_exchange("},
{"lineNum":"  102","line":"    volatile T* const dest, const T& compare,"},
{"lineNum":"  103","line":"    typename std::enable_if<sizeof(T) != sizeof(int) &&"},
{"lineNum":"  104","line":"                                sizeof(T) == sizeof(unsigned long long int),"},
{"lineNum":"  105","line":"                            const T&>::type val) {"},
{"lineNum":"  106","line":"  using type     = unsigned long long int;"},
{"lineNum":"  107","line":"  const type tmp = atomicCAS((type*)dest, *((type*)&compare), *((type*)&val));"},
{"lineNum":"  108","line":"  return *((T*)&tmp);"},
{"lineNum":"  109","line":"}"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"template <typename T>"},
{"lineNum":"  112","line":"__inline__ __device__ T atomic_compare_exchange("},
{"lineNum":"  113","line":"    volatile T* const dest, const T& compare,"},
{"lineNum":"  114","line":"    typename std::enable_if<(sizeof(T) != 4) && (sizeof(T) != 8),"},
{"lineNum":"  115","line":"                            const T>::type& val) {"},
{"lineNum":"  116","line":"  T return_val;"},
{"lineNum":"  117","line":"  // This is a way to (hopefully) avoid dead lock in a warp"},
{"lineNum":"  118","line":"  int done = 0;"},
{"lineNum":"  119","line":"#ifdef KOKKOS_IMPL_CUDA_SYNCWARP_NEEDS_MASK"},
{"lineNum":"  120","line":"  unsigned int mask   = KOKKOS_IMPL_CUDA_ACTIVEMASK;"},
{"lineNum":"  121","line":"  unsigned int active = KOKKOS_IMPL_CUDA_BALLOT_MASK(mask, 1);"},
{"lineNum":"  122","line":"#else"},
{"lineNum":"  123","line":"  unsigned int active = KOKKOS_IMPL_CUDA_BALLOT(1);"},
{"lineNum":"  124","line":"#endif"},
{"lineNum":"  125","line":"  unsigned int done_active = 0;"},
{"lineNum":"  126","line":"  while (active != done_active) {"},
{"lineNum":"  127","line":"    if (!done) {"},
{"lineNum":"  128","line":"      if (Impl::lock_address_cuda_space((void*)dest)) {"},
{"lineNum":"  129","line":"        Kokkos::memory_fence();"},
{"lineNum":"  130","line":"        return_val = *dest;"},
{"lineNum":"  131","line":"        if (return_val == compare) *dest = val;"},
{"lineNum":"  132","line":"        Kokkos::memory_fence();"},
{"lineNum":"  133","line":"        Impl::unlock_address_cuda_space((void*)dest);"},
{"lineNum":"  134","line":"        done = 1;"},
{"lineNum":"  135","line":"      }"},
{"lineNum":"  136","line":"    }"},
{"lineNum":"  137","line":"#ifdef KOKKOS_IMPL_CUDA_SYNCWARP_NEEDS_MASK"},
{"lineNum":"  138","line":"    done_active = KOKKOS_IMPL_CUDA_BALLOT_MASK(mask, done);"},
{"lineNum":"  139","line":"#else"},
{"lineNum":"  140","line":"    done_active = KOKKOS_IMPL_CUDA_BALLOT(done);"},
{"lineNum":"  141","line":"#endif"},
{"lineNum":"  142","line":"  }"},
{"lineNum":"  143","line":"  return return_val;"},
{"lineNum":"  144","line":"}"},
{"lineNum":"  145","line":"#endif"},
{"lineNum":"  146","line":"#endif"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  149","line":"// GCC native CAS supports int, long, unsigned int, unsigned long."},
{"lineNum":"  150","line":"// Intel native CAS support int and long with the same interface as GCC."},
{"lineNum":"  151","line":"#if !defined(__CUDA_ARCH__) || defined(KOKKOS_IMPL_CUDA_CLANG_WORKAROUND)"},
{"lineNum":"  152","line":"#if defined(KOKKOS_ENABLE_WINDOWS_ATOMICS)"},
{"lineNum":"  153","line":"// atomic_compare_exchange are already defined in Kokkos_Atomic_Windows.hpp"},
{"lineNum":"  154","line":"#elif defined(KOKKOS_ENABLE_GNU_ATOMICS) || defined(KOKKOS_ENABLE_INTEL_ATOMICS)"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"inline int atomic_compare_exchange(volatile int* const dest, const int compare,"},
{"lineNum":"  157","line":"                                   const int val) {"},
{"lineNum":"  158","line":"#if defined(KOKKOS_ENABLE_RFO_PREFETCH)"},
{"lineNum":"  159","line":"  _mm_prefetch((const char*)dest, _MM_HINT_ET0);"},
{"lineNum":"  160","line":"#endif"},
{"lineNum":"  161","line":"  return __sync_val_compare_and_swap(dest, compare, val);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  162","line":"}"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"inline long atomic_compare_exchange(volatile long* const dest,"},
{"lineNum":"  165","line":"                                    const long compare, const long val) {"},
{"lineNum":"  166","line":"#if defined(KOKKOS_ENABLE_RFO_PREFETCH)"},
{"lineNum":"  167","line":"  _mm_prefetch((const char*)dest, _MM_HINT_ET0);"},
{"lineNum":"  168","line":"#endif"},
{"lineNum":"  169","line":"  return __sync_val_compare_and_swap(dest, compare, val);"},
{"lineNum":"  170","line":"}"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"#if defined(KOKKOS_ENABLE_GNU_ATOMICS)"},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"// GCC supports unsigned"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"inline unsigned int atomic_compare_exchange(volatile unsigned int* const dest,"},
{"lineNum":"  177","line":"                                            const unsigned int compare,"},
{"lineNum":"  178","line":"                                            const unsigned int val) {"},
{"lineNum":"  179","line":"  return __sync_val_compare_and_swap(dest, compare, val);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  180","line":"}"},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"inline unsigned long atomic_compare_exchange(volatile unsigned long* const dest,"},
{"lineNum":"  183","line":"                                             const unsigned long compare,"},
{"lineNum":"  184","line":"                                             const unsigned long val) {"},
{"lineNum":"  185","line":"  return __sync_val_compare_and_swap(dest, compare, val);"},
{"lineNum":"  186","line":"}"},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"inline unsigned long long atomic_compare_exchange("},
{"lineNum":"  189","line":"    volatile unsigned long long* const dest, const unsigned long long compare,"},
{"lineNum":"  190","line":"    const unsigned long long val) {"},
{"lineNum":"  191","line":"  return __sync_val_compare_and_swap(dest, compare, val);"},
{"lineNum":"  192","line":"}"},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"#endif"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"template <typename T>"},
{"lineNum":"  197","line":"inline T atomic_compare_exchange("},
{"lineNum":"  198","line":"    volatile T* const dest, const T& compare,"},
{"lineNum":"  199","line":"    typename std::enable_if<sizeof(T) == sizeof(int), const T&>::type val) {"},
{"lineNum":"  200","line":"  union U {"},
{"lineNum":"  201","line":"    int i;"},
{"lineNum":"  202","line":"    T t;"},
{"lineNum":"  203","line":"    KOKKOS_INLINE_FUNCTION U() {}"},
{"lineNum":"  204","line":"  } tmp;"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"#if defined(KOKKOS_ENABLE_RFO_PREFETCH)"},
{"lineNum":"  207","line":"  _mm_prefetch((const char*)dest, _MM_HINT_ET0);"},
{"lineNum":"  208","line":"#endif"},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"  tmp.i ="},
{"lineNum":"  211","line":"      __sync_val_compare_and_swap((int*)dest, *((int*)&compare), *((int*)&val));"},
{"lineNum":"  212","line":"  return tmp.t;"},
{"lineNum":"  213","line":"}"},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"template <typename T>"},
{"lineNum":"  216","line":"inline T atomic_compare_exchange("},
{"lineNum":"  217","line":"    volatile T* const dest, const T& compare,"},
{"lineNum":"  218","line":"    typename std::enable_if<sizeof(T) != sizeof(int) &&"},
{"lineNum":"  219","line":"                                sizeof(T) == sizeof(long),"},
{"lineNum":"  220","line":"                            const T&>::type val) {"},
{"lineNum":"  221","line":"  union U {"},
{"lineNum":"  222","line":"    long i;"},
{"lineNum":"  223","line":"    T t;"},
{"lineNum":"  224","line":"    KOKKOS_INLINE_FUNCTION U() {}"},
{"lineNum":"  225","line":"  } tmp;"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"#if defined(KOKKOS_ENABLE_RFO_PREFETCH)"},
{"lineNum":"  228","line":"  _mm_prefetch((const char*)dest, _MM_HINT_ET0);"},
{"lineNum":"  229","line":"#endif"},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"  tmp.i = __sync_val_compare_and_swap((long*)dest, *((long*)&compare),","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  232","line":"                                      *((long*)&val));"},
{"lineNum":"  233","line":"  return tmp.t;"},
{"lineNum":"  234","line":"}"},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":"#if defined(KOKKOS_ENABLE_ASM) && defined(KOKKOS_ENABLE_ISA_X86_64)"},
{"lineNum":"  237","line":"template <typename T>"},
{"lineNum":"  238","line":"inline T atomic_compare_exchange("},
{"lineNum":"  239","line":"    volatile T* const dest, const T& compare,"},
{"lineNum":"  240","line":"    typename std::enable_if<sizeof(T) != sizeof(int) &&"},
{"lineNum":"  241","line":"                                sizeof(T) != sizeof(long) &&"},
{"lineNum":"  242","line":"                                sizeof(T) == sizeof(Impl::cas128_t),"},
{"lineNum":"  243","line":"                            const T&>::type val) {"},
{"lineNum":"  244","line":"  union U {"},
{"lineNum":"  245","line":"    Impl::cas128_t i;"},
{"lineNum":"  246","line":"    T t;"},
{"lineNum":"  247","line":"    KOKKOS_INLINE_FUNCTION U() {}"},
{"lineNum":"  248","line":"  } tmp;"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"#if defined(KOKKOS_ENABLE_RFO_PREFETCH)"},
{"lineNum":"  251","line":"  _mm_prefetch((const char*)dest, _MM_HINT_ET0);"},
{"lineNum":"  252","line":"#endif"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"  tmp.i = Impl::cas128((Impl::cas128_t*)dest, *((Impl::cas128_t*)&compare),"},
{"lineNum":"  255","line":"                       *((Impl::cas128_t*)&val));"},
{"lineNum":"  256","line":"  return tmp.t;"},
{"lineNum":"  257","line":"}"},
{"lineNum":"  258","line":"#endif"},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"template <typename T>"},
{"lineNum":"  261","line":"inline T atomic_compare_exchange("},
{"lineNum":"  262","line":"    volatile T* const dest, const T compare,"},
{"lineNum":"  263","line":"    typename std::enable_if<(sizeof(T) != 4) && (sizeof(T) != 8)"},
{"lineNum":"  264","line":"#if defined(KOKKOS_ENABLE_ASM) && defined(KOKKOS_ENABLE_ISA_X86_64)"},
{"lineNum":"  265","line":"                                && (sizeof(T) != 16)"},
{"lineNum":"  266","line":"#endif"},
{"lineNum":"  267","line":"                                ,"},
{"lineNum":"  268","line":"                            const T>::type& val) {"},
{"lineNum":"  269","line":"#if defined(KOKKOS_ENABLE_RFO_PREFETCH)"},
{"lineNum":"  270","line":"  _mm_prefetch((const char*)dest, _MM_HINT_ET0);"},
{"lineNum":"  271","line":"#endif"},
{"lineNum":"  272","line":""},
{"lineNum":"  273","line":"  while (!Impl::lock_address_host_space((void*)dest))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  274","line":"    ;"},
{"lineNum":"  275","line":"  Kokkos::memory_fence();"},
{"lineNum":"  276","line":"  T return_val = *dest;"},
{"lineNum":"  277","line":"  if (return_val == compare) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  278","line":"    // Don\'t use the following line of code here:"},
{"lineNum":"  279","line":"    //"},
{"lineNum":"  280","line":"    // const T tmp = *dest = val;"},
{"lineNum":"  281","line":"    //"},
{"lineNum":"  282","line":"    // Instead, put each assignment in its own statement.  This is"},
{"lineNum":"  283","line":"    // because the overload of T::operator= for volatile *this should"},
{"lineNum":"  284","line":"    // return void, not volatile T&.  See Kokkos #177:"},
{"lineNum":"  285","line":"    //"},
{"lineNum":"  286","line":"    // https://github.com/kokkos/kokkos/issues/177"},
{"lineNum":"  287","line":"    *dest       = val;"},
{"lineNum":"  288","line":"    const T tmp = *dest;"},
{"lineNum":"  289","line":"#ifndef KOKKOS_COMPILER_CLANG"},
{"lineNum":"  290","line":"    (void)tmp;"},
{"lineNum":"  291","line":"#endif"},
{"lineNum":"  292","line":"    Kokkos::memory_fence();"},
{"lineNum":"  293","line":"  }"},
{"lineNum":"  294","line":"  Impl::unlock_address_host_space((void*)dest);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  295","line":"  return return_val;"},
{"lineNum":"  296","line":"}"},
{"lineNum":"  297","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"#elif defined(KOKKOS_ENABLE_OPENMP_ATOMICS)"},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"template <typename T>"},
{"lineNum":"  302","line":"KOKKOS_INLINE_FUNCTION T atomic_compare_exchange(volatile T* const dest,"},
{"lineNum":"  303","line":"                                                 const T compare, const T val) {"},
{"lineNum":"  304","line":"  T retval;"},
{"lineNum":"  305","line":"#pragma omp critical"},
{"lineNum":"  306","line":"  {"},
{"lineNum":"  307","line":"    retval = dest[0];"},
{"lineNum":"  308","line":"    if (retval == compare) dest[0] = val;"},
{"lineNum":"  309","line":"  }"},
{"lineNum":"  310","line":"  return retval;"},
{"lineNum":"  311","line":"}"},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":"#elif defined(KOKKOS_ENABLE_SERIAL_ATOMICS)"},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"template <typename T>"},
{"lineNum":"  316","line":"KOKKOS_INLINE_FUNCTION T atomic_compare_exchange(volatile T* const dest_v,"},
{"lineNum":"  317","line":"                                                 const T compare, const T val) {"},
{"lineNum":"  318","line":"  T* dest  = const_cast<T*>(dest_v);"},
{"lineNum":"  319","line":"  T retval = *dest;"},
{"lineNum":"  320","line":"  if (retval == compare) *dest = val;"},
{"lineNum":"  321","line":"  return retval;"},
{"lineNum":"  322","line":"}"},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"#endif"},
{"lineNum":"  325","line":"#endif"},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"// dummy for non-CUDA Kokkos headers being processed by NVCC"},
{"lineNum":"  328","line":"#if defined(__CUDA_ARCH__) && !defined(KOKKOS_ENABLE_CUDA)"},
{"lineNum":"  329","line":"template <typename T>"},
{"lineNum":"  330","line":"__inline__ __device__ T"},
{"lineNum":"  331","line":"atomic_compare_exchange(volatile T* const, const Kokkos::Impl::identity_t<T>,"},
{"lineNum":"  332","line":"                        const Kokkos::Impl::identity_t<T>) {"},
{"lineNum":"  333","line":"  return T();"},
{"lineNum":"  334","line":"}"},
{"lineNum":"  335","line":"#endif"},
{"lineNum":"  336","line":""},
{"lineNum":"  337","line":"template <typename T>"},
{"lineNum":"  338","line":"KOKKOS_INLINE_FUNCTION bool atomic_compare_exchange_strong("},
{"lineNum":"  339","line":"    volatile T* const dest, const T compare, const T val) {"},
{"lineNum":"  340","line":"  return compare == atomic_compare_exchange(dest, compare, val);"},
{"lineNum":"  341","line":"}"},
{"lineNum":"  342","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  343","line":""},
{"lineNum":"  344","line":"namespace Impl {"},
{"lineNum":"  345","line":"// memory-ordered versions are in the Impl namespace"},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"template <class T, class MemoryOrderFailure>"},
{"lineNum":"  348","line":"KOKKOS_INLINE_FUNCTION bool _atomic_compare_exchange_strong_fallback("},
{"lineNum":"  349","line":"    T* dest, T compare, T val, memory_order_seq_cst_t, MemoryOrderFailure) {"},
{"lineNum":"  350","line":"  Kokkos::memory_fence();"},
{"lineNum":"  351","line":"  auto rv = Kokkos::atomic_compare_exchange_strong(dest, compare, val);"},
{"lineNum":"  352","line":"  Kokkos::memory_fence();"},
{"lineNum":"  353","line":"  return rv;"},
{"lineNum":"  354","line":"}"},
{"lineNum":"  355","line":""},
{"lineNum":"  356","line":"template <class T, class MemoryOrderFailure>"},
{"lineNum":"  357","line":"KOKKOS_INLINE_FUNCTION bool _atomic_compare_exchange_strong_fallback("},
{"lineNum":"  358","line":"    T* dest, T compare, T val, memory_order_acquire_t, MemoryOrderFailure) {"},
{"lineNum":"  359","line":"  auto rv = Kokkos::atomic_compare_exchange_strong(dest, compare, val);"},
{"lineNum":"  360","line":"  Kokkos::memory_fence();"},
{"lineNum":"  361","line":"  return rv;"},
{"lineNum":"  362","line":"}"},
{"lineNum":"  363","line":""},
{"lineNum":"  364","line":"template <class T, class MemoryOrderFailure>"},
{"lineNum":"  365","line":"KOKKOS_INLINE_FUNCTION bool _atomic_compare_exchange_strong_fallback("},
{"lineNum":"  366","line":"    T* dest, T compare, T val, memory_order_release_t, MemoryOrderFailure) {"},
{"lineNum":"  367","line":"  Kokkos::memory_fence();"},
{"lineNum":"  368","line":"  return Kokkos::atomic_compare_exchange_strong(dest, compare, val);"},
{"lineNum":"  369","line":"}"},
{"lineNum":"  370","line":""},
{"lineNum":"  371","line":"template <class T, class MemoryOrderFailure>"},
{"lineNum":"  372","line":"KOKKOS_INLINE_FUNCTION bool _atomic_compare_exchange_strong_fallback("},
{"lineNum":"  373","line":"    T* dest, T compare, T val, memory_order_relaxed_t, MemoryOrderFailure) {"},
{"lineNum":"  374","line":"  return Kokkos::atomic_compare_exchange_strong(dest, compare, val);"},
{"lineNum":"  375","line":"}"},
{"lineNum":"  376","line":""},
{"lineNum":"  377","line":"#if (defined(KOKKOS_ENABLE_GNU_ATOMICS) && !defined(__CUDA_ARCH__)) ||   \\"},
{"lineNum":"  378","line":"    (defined(KOKKOS_ENABLE_INTEL_ATOMICS) && !defined(__CUDA_ARCH__)) || \\"},
{"lineNum":"  379","line":"    defined(KOKKOS_ENABLE_CUDA_ASM_ATOMICS)"},
{"lineNum":"  380","line":""},
{"lineNum":"  381","line":"#if defined(__CUDA_ARCH__)"},
{"lineNum":"  382","line":"#define KOKKOS_INTERNAL_INLINE_DEVICE_IF_CUDA_ARCH __inline__ __device__"},
{"lineNum":"  383","line":"#else"},
{"lineNum":"  384","line":"#define KOKKOS_INTERNAL_INLINE_DEVICE_IF_CUDA_ARCH inline"},
{"lineNum":"  385","line":"#endif"},
{"lineNum":"  386","line":""},
{"lineNum":"  387","line":"template <class T, class MemoryOrderSuccess, class MemoryOrderFailure>"},
{"lineNum":"  388","line":"KOKKOS_INTERNAL_INLINE_DEVICE_IF_CUDA_ARCH bool _atomic_compare_exchange_strong("},
{"lineNum":"  389","line":"    T* dest, T compare, T val, MemoryOrderSuccess, MemoryOrderFailure,"},
{"lineNum":"  390","line":"    typename std::enable_if<"},
{"lineNum":"  391","line":"        (sizeof(T) == 1 || sizeof(T) == 2 || sizeof(T) == 4 || sizeof(T) == 8 ||"},
{"lineNum":"  392","line":"         sizeof(T) == 16) &&"},
{"lineNum":"  393","line":"            std::is_same<"},
{"lineNum":"  394","line":"                typename MemoryOrderSuccess::memory_order,"},
{"lineNum":"  395","line":"                typename std::remove_cv<MemoryOrderSuccess>::type>::value &&"},
{"lineNum":"  396","line":"            std::is_same<"},
{"lineNum":"  397","line":"                typename MemoryOrderFailure::memory_order,"},
{"lineNum":"  398","line":"                typename std::remove_cv<MemoryOrderFailure>::type>::value,"},
{"lineNum":"  399","line":"        void const**>::type = nullptr) {"},
{"lineNum":"  400","line":"  return __atomic_compare_exchange_n(dest, &compare, val, /* weak = */ false,"},
{"lineNum":"  401","line":"                                     MemoryOrderSuccess::gnu_constant,"},
{"lineNum":"  402","line":"                                     MemoryOrderFailure::gnu_constant);"},
{"lineNum":"  403","line":"}"},
{"lineNum":"  404","line":""},
{"lineNum":"  405","line":"template <class T, class MemoryOrderSuccess, class MemoryOrderFailure>"},
{"lineNum":"  406","line":"KOKKOS_INTERNAL_INLINE_DEVICE_IF_CUDA_ARCH bool _atomic_compare_exchange_strong("},
{"lineNum":"  407","line":"    T* dest, T compare, T val, MemoryOrderSuccess order_success,"},
{"lineNum":"  408","line":"    MemoryOrderFailure order_failure,"},
{"lineNum":"  409","line":"    typename std::enable_if<"},
{"lineNum":"  410","line":"        !(sizeof(T) == 1 || sizeof(T) == 2 || sizeof(T) == 4 ||"},
{"lineNum":"  411","line":"          sizeof(T) == 8 || sizeof(T) == 16) &&"},
{"lineNum":"  412","line":"            std::is_same<"},
{"lineNum":"  413","line":"                typename MemoryOrderSuccess::memory_order,"},
{"lineNum":"  414","line":"                typename std::remove_cv<MemoryOrderSuccess>::type>::value &&"},
{"lineNum":"  415","line":"            std::is_same<"},
{"lineNum":"  416","line":"                typename MemoryOrderFailure::memory_order,"},
{"lineNum":"  417","line":"                typename std::remove_cv<MemoryOrderFailure>::type>::value,"},
{"lineNum":"  418","line":"        void const**>::type = nullptr) {"},
{"lineNum":"  419","line":"  return _atomic_compare_exchange_fallback(dest, compare, val, order_success,"},
{"lineNum":"  420","line":"                                           order_failure);"},
{"lineNum":"  421","line":"}"},
{"lineNum":"  422","line":""},
{"lineNum":"  423","line":"#else"},
{"lineNum":"  424","line":""},
{"lineNum":"  425","line":"template <class T, class MemoryOrderSuccess, class MemoryOrderFailure>"},
{"lineNum":"  426","line":"KOKKOS_INLINE_FUNCTION bool _atomic_compare_exchange_strong("},
{"lineNum":"  427","line":"    T* dest, T compare, T val, MemoryOrderSuccess order_success,"},
{"lineNum":"  428","line":"    MemoryOrderFailure order_failure) {"},
{"lineNum":"  429","line":"  return _atomic_compare_exchange_strong_fallback(dest, compare, val,"},
{"lineNum":"  430","line":"                                                  order_success, order_failure);"},
{"lineNum":"  431","line":"}"},
{"lineNum":"  432","line":""},
{"lineNum":"  433","line":"#endif"},
{"lineNum":"  434","line":""},
{"lineNum":"  435","line":"// TODO static asserts in overloads that don\'t make sense (as listed in"},
{"lineNum":"  436","line":"// https://gcc.gnu.org/onlinedocs/gcc-5.2.0/gcc/_005f_005fatomic-Builtins.html)"},
{"lineNum":"  437","line":"template <class T, class MemoryOrderSuccess, class MemoryOrderFailure>"},
{"lineNum":"  438","line":"KOKKOS_FORCEINLINE_FUNCTION bool atomic_compare_exchange_strong("},
{"lineNum":"  439","line":"    T* dest, T compare, T val, MemoryOrderSuccess order_success,"},
{"lineNum":"  440","line":"    MemoryOrderFailure order_failure) {"},
{"lineNum":"  441","line":"  return _atomic_compare_exchange_strong(dest, compare, val, order_success,"},
{"lineNum":"  442","line":"                                         order_failure);"},
{"lineNum":"  443","line":"}"},
{"lineNum":"  444","line":""},
{"lineNum":"  445","line":"}  // end namespace Impl"},
{"lineNum":"  446","line":""},
{"lineNum":"  447","line":"}  // namespace Kokkos"},
{"lineNum":"  448","line":""},
{"lineNum":"  449","line":"#if defined(KOKKOS_ENABLE_CUDA)"},
{"lineNum":"  450","line":"#include <Cuda/Kokkos_Cuda_Atomic_Intrinsics_Restore_Builtins.hpp>"},
{"lineNum":"  451","line":"#endif"},
{"lineNum":"  452","line":""},
{"lineNum":"  453","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 6, "covered" : 0,};
var merged_data = [];
