var data = {lines:[
{"lineNum":"    1","line":"/*"},
{"lineNum":"    2","line":"//@HEADER"},
{"lineNum":"    3","line":"// ************************************************************************"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"//                        Kokkos v. 3.0"},
{"lineNum":"    6","line":"//       Copyright (2020) National Technology & Engineering"},
{"lineNum":"    7","line":"//               Solutions of Sandia, LLC (NTESS)."},
{"lineNum":"    8","line":"//"},
{"lineNum":"    9","line":"// Under the terms of Contract DE-NA0003525 with NTESS,"},
{"lineNum":"   10","line":"// the U.S. Government retains certain rights in this software."},
{"lineNum":"   11","line":"//"},
{"lineNum":"   12","line":"// Redistribution and use in source and binary forms, with or without"},
{"lineNum":"   13","line":"// modification, are permitted provided that the following conditions are"},
{"lineNum":"   14","line":"// met:"},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"// 1. Redistributions of source code must retain the above copyright"},
{"lineNum":"   17","line":"// notice, this list of conditions and the following disclaimer."},
{"lineNum":"   18","line":"//"},
{"lineNum":"   19","line":"// 2. Redistributions in binary form must reproduce the above copyright"},
{"lineNum":"   20","line":"// notice, this list of conditions and the following disclaimer in the"},
{"lineNum":"   21","line":"// documentation and/or other materials provided with the distribution."},
{"lineNum":"   22","line":"//"},
{"lineNum":"   23","line":"// 3. Neither the name of the Corporation nor the names of the"},
{"lineNum":"   24","line":"// contributors may be used to endorse or promote products derived from"},
{"lineNum":"   25","line":"// this software without specific prior written permission."},
{"lineNum":"   26","line":"//"},
{"lineNum":"   27","line":"// THIS SOFTWARE IS PROVIDED BY NTESS \"AS IS\" AND ANY"},
{"lineNum":"   28","line":"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"},
{"lineNum":"   29","line":"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR"},
{"lineNum":"   30","line":"// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NTESS OR THE"},
{"lineNum":"   31","line":"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,"},
{"lineNum":"   32","line":"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,"},
{"lineNum":"   33","line":"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR"},
{"lineNum":"   34","line":"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF"},
{"lineNum":"   35","line":"// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING"},
{"lineNum":"   36","line":"// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"},
{"lineNum":"   37","line":"// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   38","line":"//"},
{"lineNum":"   39","line":"// Questions? Contact Christian R. Trott (crtrott@sandia.gov)"},
{"lineNum":"   40","line":"//"},
{"lineNum":"   41","line":"// ************************************************************************"},
{"lineNum":"   42","line":"//@HEADER"},
{"lineNum":"   43","line":"*/"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"#ifndef KOKKOS_HOSTSPACE_HPP"},
{"lineNum":"   46","line":"#define KOKKOS_HOSTSPACE_HPP"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"#include <cstring>"},
{"lineNum":"   49","line":"#include <string>"},
{"lineNum":"   50","line":"#include <iosfwd>"},
{"lineNum":"   51","line":"#include <typeinfo>"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"#include <Kokkos_Core_fwd.hpp>"},
{"lineNum":"   54","line":"#include <Kokkos_Concepts.hpp>"},
{"lineNum":"   55","line":"#include <Kokkos_MemoryTraits.hpp>"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"#include <impl/Kokkos_Traits.hpp>"},
{"lineNum":"   58","line":"#include <impl/Kokkos_Error.hpp>"},
{"lineNum":"   59","line":"#include <impl/Kokkos_SharedAlloc.hpp>"},
{"lineNum":"   60","line":"#include <impl/Kokkos_Tools.hpp>"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"#include \"impl/Kokkos_HostSpace_deepcopy.hpp\""},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"/*--------------------------------------------------------------------------*/"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"namespace Kokkos {"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"namespace Impl {"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"/// \\brief Initialize lock array for arbitrary size atomics."},
{"lineNum":"   71","line":"///"},
{"lineNum":"   72","line":"/// Arbitrary atomics are implemented using a hash table of locks"},
{"lineNum":"   73","line":"/// where the hash value is derived from the address of the"},
{"lineNum":"   74","line":"/// object for which an atomic operation is performed."},
{"lineNum":"   75","line":"/// This function initializes the locks to zero (unset)."},
{"lineNum":"   76","line":"void init_lock_array_host_space();"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"/// \\brief Acquire a lock for the address"},
{"lineNum":"   79","line":"///"},
{"lineNum":"   80","line":"/// This function tries to acquire the lock for the hash value derived"},
{"lineNum":"   81","line":"/// from the provided ptr. If the lock is successfully acquired the"},
{"lineNum":"   82","line":"/// function returns true. Otherwise it returns false."},
{"lineNum":"   83","line":"bool lock_address_host_space(void* ptr);"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"/// \\brief Release lock for the address"},
{"lineNum":"   86","line":"///"},
{"lineNum":"   87","line":"/// This function releases the lock for the hash value derived"},
{"lineNum":"   88","line":"/// from the provided ptr. This function should only be called"},
{"lineNum":"   89","line":"/// after previously successfully acquiring a lock with"},
{"lineNum":"   90","line":"/// lock_address."},
{"lineNum":"   91","line":"void unlock_address_host_space(void* ptr);"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"}  // namespace Impl"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"}  // namespace Kokkos"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"namespace Kokkos {"},
{"lineNum":"   98","line":"/// \\class HostSpace"},
{"lineNum":"   99","line":"/// \\brief Memory management for host memory."},
{"lineNum":"  100","line":"///"},
{"lineNum":"  101","line":"/// HostSpace is a memory space that governs host memory.  \"Host\""},
{"lineNum":"  102","line":"/// memory means the usual CPU-accessible memory."},
{"lineNum":"  103","line":"class HostSpace {"},
{"lineNum":"  104","line":" public:"},
{"lineNum":"  105","line":"  //! Tag this class as a kokkos memory space"},
{"lineNum":"  106","line":"  using memory_space = HostSpace;"},
{"lineNum":"  107","line":"  using size_type    = size_t;"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"  /// \\typedef execution_space"},
{"lineNum":"  110","line":"  /// \\brief Default execution space for this memory space."},
{"lineNum":"  111","line":"  ///"},
{"lineNum":"  112","line":"  /// Every memory space has a default execution space.  This is"},
{"lineNum":"  113","line":"  /// useful for things like initializing a View (which happens in"},
{"lineNum":"  114","line":"  /// parallel using the View\'s default execution space)."},
{"lineNum":"  115","line":"#if defined(KOKKOS_ENABLE_DEFAULT_DEVICE_TYPE_OPENMP)"},
{"lineNum":"  116","line":"  using execution_space = Kokkos::OpenMP;"},
{"lineNum":"  117","line":"#elif defined(KOKKOS_ENABLE_DEFAULT_DEVICE_TYPE_THREADS)"},
{"lineNum":"  118","line":"  using execution_space = Kokkos::Threads;"},
{"lineNum":"  119","line":"#elif defined(KOKKOS_ENABLE_DEFAULT_DEVICE_TYPE_HPX)"},
{"lineNum":"  120","line":"  using execution_space = Kokkos::Experimental::HPX;"},
{"lineNum":"  121","line":"#elif defined(KOKKOS_ENABLE_OPENMP)"},
{"lineNum":"  122","line":"  using execution_space = Kokkos::OpenMP;"},
{"lineNum":"  123","line":"#elif defined(KOKKOS_ENABLE_THREADS)"},
{"lineNum":"  124","line":"  using execution_space = Kokkos::Threads;"},
{"lineNum":"  125","line":"#elif defined(KOKKOS_ENABLE_HPX)"},
{"lineNum":"  126","line":"  using execution_space = Kokkos::Experimental::HPX;"},
{"lineNum":"  127","line":"#elif defined(KOKKOS_ENABLE_SERIAL)"},
{"lineNum":"  128","line":"  using execution_space = Kokkos::Serial;"},
{"lineNum":"  129","line":"#else"},
{"lineNum":"  130","line":"#error \\"},
{"lineNum":"  131","line":"    \"At least one of the following host execution spaces must be defined: Kokkos::OpenMP, Kokkos::Threads, or Kokkos::Serial.  You might be seeing this message if you disabled the Kokkos::Serial device explicitly using the Kokkos_ENABLE_Serial:BOOL=OFF CMake option, but did not enable any of the other host execution space devices.\""},
{"lineNum":"  132","line":"#endif"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"  //! This memory space preferred device_type"},
{"lineNum":"  135","line":"  using device_type = Kokkos::Device<execution_space, memory_space>;"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"  /**\\brief  Default memory space instance */"},
{"lineNum":"  138","line":"  HostSpace();"},
{"lineNum":"  139","line":"  HostSpace(HostSpace&& rhs)      = default;"},
{"lineNum":"  140","line":"  HostSpace(const HostSpace& rhs) = default;"},
{"lineNum":"  141","line":"  HostSpace& operator=(HostSpace&&) = default;"},
{"lineNum":"  142","line":"  HostSpace& operator=(const HostSpace&) = default;"},
{"lineNum":"  143","line":"  ~HostSpace()                           = default;"},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"  /**\\brief  Non-default memory space instance to choose allocation mechansim,"},
{"lineNum":"  146","line":"   * if available */"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"  enum AllocationMechanism {"},
{"lineNum":"  149","line":"    STD_MALLOC,"},
{"lineNum":"  150","line":"    POSIX_MEMALIGN,"},
{"lineNum":"  151","line":"    POSIX_MMAP,"},
{"lineNum":"  152","line":"    INTEL_MM_ALLOC"},
{"lineNum":"  153","line":"  };"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"  explicit HostSpace(const AllocationMechanism&);"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"  /**\\brief  Allocate untracked memory in the space */"},
{"lineNum":"  158","line":"  void* allocate(const size_t arg_alloc_size) const;"},
{"lineNum":"  159","line":"  void* allocate(const char* arg_label, const size_t arg_alloc_size,"},
{"lineNum":"  160","line":"                 const size_t arg_logical_size = 0) const;"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"  /**\\brief  Deallocate untracked memory in the space */"},
{"lineNum":"  163","line":"  void deallocate(void* const arg_alloc_ptr, const size_t arg_alloc_size) const;"},
{"lineNum":"  164","line":"  void deallocate(const char* arg_label, void* const arg_alloc_ptr,"},
{"lineNum":"  165","line":"                  const size_t arg_alloc_size,"},
{"lineNum":"  166","line":"                  const size_t arg_logical_size = 0) const;"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":" private:"},
{"lineNum":"  169","line":"  template <class, class, class, class>"},
{"lineNum":"  170","line":"  friend class Kokkos::Experimental::LogicalMemorySpace;"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"  void* impl_allocate(const char* arg_label, const size_t arg_alloc_size,"},
{"lineNum":"  173","line":"                      const size_t arg_logical_size = 0,"},
{"lineNum":"  174","line":"                      const Kokkos::Tools::SpaceHandle ="},
{"lineNum":"  175","line":"                          Kokkos::Tools::make_space_handle(name())) const;"},
{"lineNum":"  176","line":"  void impl_deallocate(const char* arg_label, void* const arg_alloc_ptr,"},
{"lineNum":"  177","line":"                       const size_t arg_alloc_size,"},
{"lineNum":"  178","line":"                       const size_t arg_logical_size = 0,"},
{"lineNum":"  179","line":"                       const Kokkos::Tools::SpaceHandle ="},
{"lineNum":"  180","line":"                           Kokkos::Tools::make_space_handle(name())) const;"},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":" public:"},
{"lineNum":"  183","line":"  /**\\brief Return Name of the MemorySpace */"},
{"lineNum":"  184","line":"  static constexpr const char* name() { return m_name; }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":" private:"},
{"lineNum":"  187","line":"  AllocationMechanism m_alloc_mech;"},
{"lineNum":"  188","line":"  static constexpr const char* m_name = \"Host\";"},
{"lineNum":"  189","line":"  friend class Kokkos::Impl::SharedAllocationRecord<Kokkos::HostSpace, void>;"},
{"lineNum":"  190","line":"};"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"}  // namespace Kokkos"},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"namespace Kokkos {"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"namespace Impl {"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"static_assert(Kokkos::Impl::MemorySpaceAccess<Kokkos::HostSpace,"},
{"lineNum":"  201","line":"                                              Kokkos::HostSpace>::assignable,"},
{"lineNum":"  202","line":"              \"\");"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"template <typename S>"},
{"lineNum":"  205","line":"struct HostMirror {"},
{"lineNum":"  206","line":" private:"},
{"lineNum":"  207","line":"  // If input execution space can access HostSpace then keep it."},
{"lineNum":"  208","line":"  // Example: Kokkos::OpenMP can access, Kokkos::Cuda cannot"},
{"lineNum":"  209","line":"  enum {"},
{"lineNum":"  210","line":"    keep_exe = Kokkos::Impl::MemorySpaceAccess<"},
{"lineNum":"  211","line":"        typename S::execution_space::memory_space,"},
{"lineNum":"  212","line":"        Kokkos::HostSpace>::accessible"},
{"lineNum":"  213","line":"  };"},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"  // If HostSpace can access memory space then keep it."},
{"lineNum":"  216","line":"  // Example:  Cannot access Kokkos::CudaSpace, can access Kokkos::CudaUVMSpace"},
{"lineNum":"  217","line":"  enum {"},
{"lineNum":"  218","line":"    keep_mem ="},
{"lineNum":"  219","line":"        Kokkos::Impl::MemorySpaceAccess<Kokkos::HostSpace,"},
{"lineNum":"  220","line":"                                        typename S::memory_space>::accessible"},
{"lineNum":"  221","line":"  };"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":" public:"},
{"lineNum":"  224","line":"  using Space = typename std::conditional<"},
{"lineNum":"  225","line":"      keep_exe && keep_mem, S,"},
{"lineNum":"  226","line":"      typename std::conditional<"},
{"lineNum":"  227","line":"          keep_mem,"},
{"lineNum":"  228","line":"          Kokkos::Device<Kokkos::HostSpace::execution_space,"},
{"lineNum":"  229","line":"                         typename S::memory_space>,"},
{"lineNum":"  230","line":"          Kokkos::HostSpace>::type>::type;"},
{"lineNum":"  231","line":"};"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"}  // namespace Impl"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"}  // namespace Kokkos"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"namespace Kokkos {"},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"namespace Impl {"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"template <>"},
{"lineNum":"  244","line":"class SharedAllocationRecord<Kokkos::HostSpace, void>"},
{"lineNum":"  245","line":"    : public SharedAllocationRecordCommon<Kokkos::HostSpace> {"},
{"lineNum":"  246","line":" private:"},
{"lineNum":"  247","line":"  friend Kokkos::HostSpace;"},
{"lineNum":"  248","line":"  friend class SharedAllocationRecordCommon<Kokkos::HostSpace>;"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"  using base_t     = SharedAllocationRecordCommon<Kokkos::HostSpace>;"},
{"lineNum":"  251","line":"  using RecordBase = SharedAllocationRecord<void, void>;"},
{"lineNum":"  252","line":""},
{"lineNum":"  253","line":"  SharedAllocationRecord(const SharedAllocationRecord&) = delete;"},
{"lineNum":"  254","line":"  SharedAllocationRecord& operator=(const SharedAllocationRecord&) = delete;"},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"#ifdef KOKKOS_ENABLE_DEBUG"},
{"lineNum":"  257","line":"  /**\\brief  Root record for tracked allocations from this HostSpace instance */"},
{"lineNum":"  258","line":"  static RecordBase s_root_record;"},
{"lineNum":"  259","line":"#endif"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"  const Kokkos::HostSpace m_space;"},
{"lineNum":"  262","line":""},
{"lineNum":"  263","line":" protected:"},
{"lineNum":"  264","line":"  ~SharedAllocationRecord()"},
{"lineNum":"  265","line":"#if defined( \\"},
{"lineNum":"  266","line":"    KOKKOS_IMPL_INTEL_WORKAROUND_NOEXCEPT_SPECIFICATION_VIRTUAL_FUNCTION)"},
{"lineNum":"  267","line":"      noexcept"},
{"lineNum":"  268","line":"#endif"},
{"lineNum":"  269","line":"      ;"},
{"lineNum":"  270","line":"  SharedAllocationRecord() = default;"},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"  SharedAllocationRecord("},
{"lineNum":"  273","line":"      const Kokkos::HostSpace& arg_space, const std::string& arg_label,"},
{"lineNum":"  274","line":"      const size_t arg_alloc_size,"},
{"lineNum":"  275","line":"      const RecordBase::function_type arg_dealloc = &deallocate);"},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":" public:"},
{"lineNum":"  278","line":"  KOKKOS_INLINE_FUNCTION static SharedAllocationRecord* allocate("},
{"lineNum":"  279","line":"      const Kokkos::HostSpace& arg_space, const std::string& arg_label,"},
{"lineNum":"  280","line":"      const size_t arg_alloc_size) {"},
{"lineNum":"  281","line":"#if defined(KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_HOST)"},
{"lineNum":"  282","line":"    return new SharedAllocationRecord(arg_space, arg_label, arg_alloc_size);"},
{"lineNum":"  283","line":"#else"},
{"lineNum":"  284","line":"    (void)arg_space;"},
{"lineNum":"  285","line":"    (void)arg_label;"},
{"lineNum":"  286","line":"    (void)arg_alloc_size;"},
{"lineNum":"  287","line":"    return (SharedAllocationRecord*)0;"},
{"lineNum":"  288","line":"#endif"},
{"lineNum":"  289","line":"  }"},
{"lineNum":"  290","line":"};"},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"}  // namespace Impl"},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"}  // namespace Kokkos"},
{"lineNum":"  295","line":""},
{"lineNum":"  296","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":"namespace Kokkos {"},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"namespace Impl {"},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":"template <class ExecutionSpace>"},
{"lineNum":"  303","line":"struct DeepCopy<HostSpace, HostSpace, ExecutionSpace> {"},
{"lineNum":"  304","line":"  DeepCopy(void* dst, const void* src, size_t n) {"},
{"lineNum":"  305","line":"    hostspace_parallel_deepcopy(dst, src, n);","class":"lineNoCov","hits":"0","possible_hits":"22",},
{"lineNum":"  306","line":"  }"},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"  DeepCopy(const ExecutionSpace& exec, void* dst, const void* src, size_t n) {"},
{"lineNum":"  309","line":"    exec.fence();"},
{"lineNum":"  310","line":"    hostspace_parallel_deepcopy(dst, src, n);"},
{"lineNum":"  311","line":"    exec.fence();"},
{"lineNum":"  312","line":"  }"},
{"lineNum":"  313","line":"};"},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"}  // namespace Impl"},
{"lineNum":"  316","line":""},
{"lineNum":"  317","line":"}  // namespace Kokkos"},
{"lineNum":"  318","line":""},
{"lineNum":"  319","line":"#endif  // #define KOKKOS_HOSTSPACE_HPP"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 2, "covered" : 0,};
var merged_data = [];
