var data = {lines:[
{"lineNum":"    1","line":"// -*- C++ -*-"},
{"lineNum":"    2","line":"//===----------------------------- new ------------------------------------===//"},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions."},
{"lineNum":"    5","line":"// See https://llvm.org/LICENSE.txt for license information."},
{"lineNum":"    6","line":"// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef _LIBCPP_NEW"},
{"lineNum":"   11","line":"#define _LIBCPP_NEW"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"/*"},
{"lineNum":"   14","line":"    new synopsis"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"namespace std"},
{"lineNum":"   17","line":"{"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"class bad_alloc"},
{"lineNum":"   20","line":"    : public exception"},
{"lineNum":"   21","line":"{"},
{"lineNum":"   22","line":"public:"},
{"lineNum":"   23","line":"    bad_alloc() noexcept;"},
{"lineNum":"   24","line":"    bad_alloc(const bad_alloc&) noexcept;"},
{"lineNum":"   25","line":"    bad_alloc& operator=(const bad_alloc&) noexcept;"},
{"lineNum":"   26","line":"    virtual const char* what() const noexcept;"},
{"lineNum":"   27","line":"};"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"class bad_array_new_length : public bad_alloc // C++14"},
{"lineNum":"   30","line":"{"},
{"lineNum":"   31","line":"public:"},
{"lineNum":"   32","line":"    bad_array_new_length() noexcept;"},
{"lineNum":"   33","line":"};"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"enum class align_val_t : size_t {}; // C++17"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"struct destroying_delete_t { // C++20"},
{"lineNum":"   38","line":"  explicit destroying_delete_t() = default;"},
{"lineNum":"   39","line":"};"},
{"lineNum":"   40","line":"inline constexpr destroying_delete_t destroying_delete{}; // C++20"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"struct nothrow_t { explicit nothrow_t() = default; };"},
{"lineNum":"   43","line":"extern const nothrow_t nothrow;"},
{"lineNum":"   44","line":"typedef void (*new_handler)();"},
{"lineNum":"   45","line":"new_handler set_new_handler(new_handler new_p) noexcept;"},
{"lineNum":"   46","line":"new_handler get_new_handler() noexcept;"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"// 21.6.4, pointer optimization barrier"},
{"lineNum":"   49","line":"template <class T> constexpr T* launder(T* p) noexcept; // C++17"},
{"lineNum":"   50","line":"}  // std"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"void* operator new(std::size_t size);                                   // replaceable, nodiscard in C++20"},
{"lineNum":"   53","line":"void* operator new(std::size_t size, std::align_val_t alignment);       // replaceable, C++17, nodiscard in C++20"},
{"lineNum":"   54","line":"void* operator new(std::size_t size, const std::nothrow_t&) noexcept;   // replaceable, nodiscard in C++20"},
{"lineNum":"   55","line":"void* operator new(std::size_t size, std::align_val_t alignment,"},
{"lineNum":"   56","line":"                   const std::nothrow_t&) noexcept;                     // replaceable, C++17, nodiscard in C++20"},
{"lineNum":"   57","line":"void  operator delete(void* ptr) noexcept;                              // replaceable"},
{"lineNum":"   58","line":"void  operator delete(void* ptr, std::size_t size) noexcept;            // replaceable, C++14"},
{"lineNum":"   59","line":"void  operator delete(void* ptr, std::align_val_t alignment) noexcept;  // replaceable, C++17"},
{"lineNum":"   60","line":"void  operator delete(void* ptr, std::size_t size,"},
{"lineNum":"   61","line":"                      std::align_val_t alignment) noexcept;             // replaceable, C++17"},
{"lineNum":"   62","line":"void  operator delete(void* ptr, const std::nothrow_t&) noexcept;       // replaceable"},
{"lineNum":"   63","line":"void  operator delete(void* ptr, std:align_val_t alignment,"},
{"lineNum":"   64","line":"                      const std::nothrow_t&) noexcept;                  // replaceable, C++17"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"void* operator new[](std::size_t size);                                 // replaceable, nodiscard in C++20"},
{"lineNum":"   67","line":"void* operator new[](std::size_t size,"},
{"lineNum":"   68","line":"                     std::align_val_t alignment) noexcept;              // replaceable, C++17, nodiscard in C++20"},
{"lineNum":"   69","line":"void* operator new[](std::size_t size, const std::nothrow_t&) noexcept; // replaceable, nodiscard in C++20"},
{"lineNum":"   70","line":"void* operator new[](std::size_t size, std::align_val_t alignment,"},
{"lineNum":"   71","line":"                     const std::nothrow_t&) noexcept;                   // replaceable, C++17, nodiscard in C++20"},
{"lineNum":"   72","line":"void  operator delete[](void* ptr) noexcept;                            // replaceable"},
{"lineNum":"   73","line":"void  operator delete[](void* ptr, std::size_t size) noexcept;          // replaceable, C++14"},
{"lineNum":"   74","line":"void  operator delete[](void* ptr,"},
{"lineNum":"   75","line":"                        std::align_val_t alignment) noexcept;           // replaceable, C++17"},
{"lineNum":"   76","line":"void  operator delete[](void* ptr, std::size_t size,"},
{"lineNum":"   77","line":"                        std::align_val_t alignment) noexcept;           // replaceable, C++17"},
{"lineNum":"   78","line":"void  operator delete[](void* ptr, const std::nothrow_t&) noexcept;     // replaceable"},
{"lineNum":"   79","line":"void  operator delete[](void* ptr, std::align_val_t alignment,"},
{"lineNum":"   80","line":"                        const std::nothrow_t&) noexcept;                // replaceable, C++17"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"void* operator new  (std::size_t size, void* ptr) noexcept;             // nodiscard in C++20"},
{"lineNum":"   83","line":"void* operator new[](std::size_t size, void* ptr) noexcept;             // nodiscard in C++20"},
{"lineNum":"   84","line":"void  operator delete  (void* ptr, void*) noexcept;"},
{"lineNum":"   85","line":"void  operator delete[](void* ptr, void*) noexcept;"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"*/"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"#include <__availability>"},
{"lineNum":"   90","line":"#include <__config>"},
{"lineNum":"   91","line":"#include <cstddef>"},
{"lineNum":"   92","line":"#include <cstdlib>"},
{"lineNum":"   93","line":"#include <exception>"},
{"lineNum":"   94","line":"#include <type_traits>"},
{"lineNum":"   95","line":"#include <version>"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"#if defined(_LIBCPP_ABI_VCRUNTIME)"},
{"lineNum":"   98","line":"#include <new.h>"},
{"lineNum":"   99","line":"#endif"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"},
{"lineNum":"  102","line":"#pragma GCC system_header"},
{"lineNum":"  103","line":"#endif"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"#if !defined(__cpp_sized_deallocation) || __cpp_sized_deallocation  < 201309L"},
{"lineNum":"  106","line":"#define _LIBCPP_HAS_NO_LANGUAGE_SIZED_DEALLOCATION"},
{"lineNum":"  107","line":"#endif"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"#if !defined(_LIBCPP_BUILDING_LIBRARY) && _LIBCPP_STD_VER < 14 && \\"},
{"lineNum":"  110","line":"    defined(_LIBCPP_HAS_NO_LANGUAGE_SIZED_DEALLOCATION)"},
{"lineNum":"  111","line":"# define _LIBCPP_HAS_NO_LIBRARY_SIZED_DEALLOCATION"},
{"lineNum":"  112","line":"#endif"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"#if defined(_LIBCPP_HAS_NO_LIBRARY_SIZED_DEALLOCATION) || \\"},
{"lineNum":"  115","line":"    defined(_LIBCPP_HAS_NO_LANGUAGE_SIZED_DEALLOCATION)"},
{"lineNum":"  116","line":"# define _LIBCPP_HAS_NO_SIZED_DEALLOCATION"},
{"lineNum":"  117","line":"#endif"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"namespace std  // purposefully not using versioning namespace"},
{"lineNum":"  120","line":"{"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"#if !defined(_LIBCPP_ABI_VCRUNTIME)"},
{"lineNum":"  123","line":"struct _LIBCPP_TYPE_VIS nothrow_t { explicit nothrow_t() = default; };"},
{"lineNum":"  124","line":"extern _LIBCPP_FUNC_VIS const nothrow_t nothrow;"},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"class _LIBCPP_EXCEPTION_ABI bad_alloc"},
{"lineNum":"  127","line":"    : public exception"},
{"lineNum":"  128","line":"{"},
{"lineNum":"  129","line":"public:"},
{"lineNum":"  130","line":"    bad_alloc() _NOEXCEPT;"},
{"lineNum":"  131","line":"    virtual ~bad_alloc() _NOEXCEPT;"},
{"lineNum":"  132","line":"    virtual const char* what() const _NOEXCEPT;"},
{"lineNum":"  133","line":"};"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"class _LIBCPP_EXCEPTION_ABI bad_array_new_length"},
{"lineNum":"  136","line":"    : public bad_alloc"},
{"lineNum":"  137","line":"{"},
{"lineNum":"  138","line":"public:"},
{"lineNum":"  139","line":"    bad_array_new_length() _NOEXCEPT;"},
{"lineNum":"  140","line":"    virtual ~bad_array_new_length() _NOEXCEPT;"},
{"lineNum":"  141","line":"    virtual const char* what() const _NOEXCEPT;"},
{"lineNum":"  142","line":"};"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"typedef void (*new_handler)();"},
{"lineNum":"  145","line":"_LIBCPP_FUNC_VIS new_handler set_new_handler(new_handler) _NOEXCEPT;"},
{"lineNum":"  146","line":"_LIBCPP_FUNC_VIS new_handler get_new_handler() _NOEXCEPT;"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"#endif // !_LIBCPP_ABI_VCRUNTIME"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"_LIBCPP_NORETURN _LIBCPP_FUNC_VIS void __throw_bad_alloc();  // not in C++ spec"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"#if !defined(_LIBCPP_HAS_NO_LIBRARY_ALIGNED_ALLOCATION) && \\"},
{"lineNum":"  153","line":"    !defined(_LIBCPP_ABI_VCRUNTIME)"},
{"lineNum":"  154","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  155","line":"enum class _LIBCPP_ENUM_VIS align_val_t : size_t { };"},
{"lineNum":"  156","line":"#else"},
{"lineNum":"  157","line":"enum align_val_t { __zero = 0, __max = (size_t)-1 };"},
{"lineNum":"  158","line":"#endif"},
{"lineNum":"  159","line":"#endif"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":"  162","line":"// Enable the declaration even if the compiler doesn\'t support the language"},
{"lineNum":"  163","line":"// feature."},
{"lineNum":"  164","line":"struct destroying_delete_t {"},
{"lineNum":"  165","line":"  explicit destroying_delete_t() = default;"},
{"lineNum":"  166","line":"};"},
{"lineNum":"  167","line":"_LIBCPP_INLINE_VAR constexpr destroying_delete_t destroying_delete{};"},
{"lineNum":"  168","line":"#endif // _LIBCPP_STD_VER > 17"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"}  // std"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"#if defined(_LIBCPP_CXX03_LANG)"},
{"lineNum":"  173","line":"#define _THROW_BAD_ALLOC throw(std::bad_alloc)"},
{"lineNum":"  174","line":"#else"},
{"lineNum":"  175","line":"#define _THROW_BAD_ALLOC"},
{"lineNum":"  176","line":"#endif"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"#if !defined(_LIBCPP_ABI_VCRUNTIME)"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"_LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_OVERRIDABLE_FUNC_VIS void* operator new(std::size_t __sz) _THROW_BAD_ALLOC;"},
{"lineNum":"  181","line":"_LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_OVERRIDABLE_FUNC_VIS void* operator new(std::size_t __sz, const std::nothrow_t&) _NOEXCEPT _LIBCPP_NOALIAS;"},
{"lineNum":"  182","line":"_LIBCPP_OVERRIDABLE_FUNC_VIS void  operator delete(void* __p) _NOEXCEPT;"},
{"lineNum":"  183","line":"_LIBCPP_OVERRIDABLE_FUNC_VIS void  operator delete(void* __p, const std::nothrow_t&) _NOEXCEPT;"},
{"lineNum":"  184","line":"#ifndef _LIBCPP_HAS_NO_LIBRARY_SIZED_DEALLOCATION"},
{"lineNum":"  185","line":"_LIBCPP_OVERRIDABLE_FUNC_VIS _LIBCPP_AVAILABILITY_SIZED_NEW_DELETE void  operator delete(void* __p, std::size_t __sz) _NOEXCEPT;"},
{"lineNum":"  186","line":"#endif"},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"_LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_OVERRIDABLE_FUNC_VIS void* operator new[](std::size_t __sz) _THROW_BAD_ALLOC;"},
{"lineNum":"  189","line":"_LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_OVERRIDABLE_FUNC_VIS void* operator new[](std::size_t __sz, const std::nothrow_t&) _NOEXCEPT _LIBCPP_NOALIAS;"},
{"lineNum":"  190","line":"_LIBCPP_OVERRIDABLE_FUNC_VIS void  operator delete[](void* __p) _NOEXCEPT;"},
{"lineNum":"  191","line":"_LIBCPP_OVERRIDABLE_FUNC_VIS void  operator delete[](void* __p, const std::nothrow_t&) _NOEXCEPT;"},
{"lineNum":"  192","line":"#ifndef _LIBCPP_HAS_NO_LIBRARY_SIZED_DEALLOCATION"},
{"lineNum":"  193","line":"_LIBCPP_OVERRIDABLE_FUNC_VIS _LIBCPP_AVAILABILITY_SIZED_NEW_DELETE void  operator delete[](void* __p, std::size_t __sz) _NOEXCEPT;"},
{"lineNum":"  194","line":"#endif"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"#ifndef _LIBCPP_HAS_NO_LIBRARY_ALIGNED_ALLOCATION"},
{"lineNum":"  197","line":"_LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_OVERRIDABLE_FUNC_VIS void* operator new(std::size_t __sz, std::align_val_t) _THROW_BAD_ALLOC;"},
{"lineNum":"  198","line":"_LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_OVERRIDABLE_FUNC_VIS void* operator new(std::size_t __sz, std::align_val_t, const std::nothrow_t&) _NOEXCEPT _LIBCPP_NOALIAS;"},
{"lineNum":"  199","line":"_LIBCPP_OVERRIDABLE_FUNC_VIS void  operator delete(void* __p, std::align_val_t) _NOEXCEPT;"},
{"lineNum":"  200","line":"_LIBCPP_OVERRIDABLE_FUNC_VIS void  operator delete(void* __p, std::align_val_t, const std::nothrow_t&) _NOEXCEPT;"},
{"lineNum":"  201","line":"#ifndef _LIBCPP_HAS_NO_LIBRARY_SIZED_DEALLOCATION"},
{"lineNum":"  202","line":"_LIBCPP_OVERRIDABLE_FUNC_VIS _LIBCPP_AVAILABILITY_SIZED_NEW_DELETE void  operator delete(void* __p, std::size_t __sz, std::align_val_t) _NOEXCEPT;"},
{"lineNum":"  203","line":"#endif"},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"_LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_OVERRIDABLE_FUNC_VIS void* operator new[](std::size_t __sz, std::align_val_t) _THROW_BAD_ALLOC;"},
{"lineNum":"  206","line":"_LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_OVERRIDABLE_FUNC_VIS void* operator new[](std::size_t __sz, std::align_val_t, const std::nothrow_t&) _NOEXCEPT _LIBCPP_NOALIAS;"},
{"lineNum":"  207","line":"_LIBCPP_OVERRIDABLE_FUNC_VIS void  operator delete[](void* __p, std::align_val_t) _NOEXCEPT;"},
{"lineNum":"  208","line":"_LIBCPP_OVERRIDABLE_FUNC_VIS void  operator delete[](void* __p, std::align_val_t, const std::nothrow_t&) _NOEXCEPT;"},
{"lineNum":"  209","line":"#ifndef _LIBCPP_HAS_NO_LIBRARY_SIZED_DEALLOCATION"},
{"lineNum":"  210","line":"_LIBCPP_OVERRIDABLE_FUNC_VIS _LIBCPP_AVAILABILITY_SIZED_NEW_DELETE void  operator delete[](void* __p, std::size_t __sz, std::align_val_t) _NOEXCEPT;"},
{"lineNum":"  211","line":"#endif"},
{"lineNum":"  212","line":"#endif"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"_LIBCPP_NODISCARD_AFTER_CXX17 inline _LIBCPP_INLINE_VISIBILITY void* operator new  (std::size_t, void* __p) _NOEXCEPT {return __p;}"},
{"lineNum":"  215","line":"_LIBCPP_NODISCARD_AFTER_CXX17 inline _LIBCPP_INLINE_VISIBILITY void* operator new[](std::size_t, void* __p) _NOEXCEPT {return __p;}"},
{"lineNum":"  216","line":"inline _LIBCPP_INLINE_VISIBILITY void  operator delete  (void*, void*) _NOEXCEPT {}"},
{"lineNum":"  217","line":"inline _LIBCPP_INLINE_VISIBILITY void  operator delete[](void*, void*) _NOEXCEPT {}"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"#endif // !_LIBCPP_ABI_VCRUNTIME"},
{"lineNum":"  220","line":""},
{"lineNum":"  221","line":"_LIBCPP_BEGIN_NAMESPACE_STD"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"_LIBCPP_CONSTEXPR inline _LIBCPP_INLINE_VISIBILITY bool __is_overaligned_for_new(size_t __align) _NOEXCEPT {"},
{"lineNum":"  224","line":"#ifdef __STDCPP_DEFAULT_NEW_ALIGNMENT__"},
{"lineNum":"  225","line":"  return __align > __STDCPP_DEFAULT_NEW_ALIGNMENT__;"},
{"lineNum":"  226","line":"#else"},
{"lineNum":"  227","line":"  return __align > alignment_of<max_align_t>::value;"},
{"lineNum":"  228","line":"#endif"},
{"lineNum":"  229","line":"}"},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"template <class ..._Args>"},
{"lineNum":"  232","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  233","line":"void* __libcpp_operator_new(_Args ...__args) {"},
{"lineNum":"  234","line":"#if __has_builtin(__builtin_operator_new) && __has_builtin(__builtin_operator_delete)"},
{"lineNum":"  235","line":"  return __builtin_operator_new(__args...);","class":"linePartCov","hits":"20","order":"75","possible_hits":"1960",},
{"lineNum":"  236","line":"#else"},
{"lineNum":"  237","line":"  return ::operator new(__args...);"},
{"lineNum":"  238","line":"#endif"},
{"lineNum":"  239","line":"}"},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"template <class ..._Args>"},
{"lineNum":"  242","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  243","line":"void __libcpp_operator_delete(_Args ...__args) {"},
{"lineNum":"  244","line":"#if __has_builtin(__builtin_operator_new) && __has_builtin(__builtin_operator_delete)"},
{"lineNum":"  245","line":"  __builtin_operator_delete(__args...);","class":"linePartCov","hits":"13","order":"342","possible_hits":"9350",},
{"lineNum":"  246","line":"#else"},
{"lineNum":"  247","line":"  ::operator delete(__args...);"},
{"lineNum":"  248","line":"#endif"},
{"lineNum":"  249","line":"}"},
{"lineNum":"  250","line":""},
{"lineNum":"  251","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  252","line":"void *__libcpp_allocate(size_t __size, size_t __align) {"},
{"lineNum":"  253","line":"#ifndef _LIBCPP_HAS_NO_ALIGNED_ALLOCATION"},
{"lineNum":"  254","line":"  if (__is_overaligned_for_new(__align)) {"},
{"lineNum":"  255","line":"    const align_val_t __align_val = static_cast<align_val_t>(__align);"},
{"lineNum":"  256","line":"    return __libcpp_operator_new(__size, __align_val);"},
{"lineNum":"  257","line":"  }"},
{"lineNum":"  258","line":"#endif"},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"  (void)__align;"},
{"lineNum":"  261","line":"  return __libcpp_operator_new(__size);","class":"linePartCov","hits":"20","order":"73","possible_hits":"171",},
{"lineNum":"  262","line":"}"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"template <class ..._Args>"},
{"lineNum":"  265","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  266","line":"void __do_deallocate_handle_size(void *__ptr, size_t __size, _Args ...__args) {"},
{"lineNum":"  267","line":"#ifdef _LIBCPP_HAS_NO_SIZED_DEALLOCATION"},
{"lineNum":"  268","line":"  (void)__size;"},
{"lineNum":"  269","line":"  return __libcpp_operator_delete(__ptr, __args...);"},
{"lineNum":"  270","line":"#else"},
{"lineNum":"  271","line":"  return __libcpp_operator_delete(__ptr, __size, __args...);"},
{"lineNum":"  272","line":"#endif"},
{"lineNum":"  273","line":"}"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  276","line":"void __libcpp_deallocate(void* __ptr, size_t __size, size_t __align) {"},
{"lineNum":"  277","line":"#if defined(_LIBCPP_HAS_NO_ALIGNED_ALLOCATION)"},
{"lineNum":"  278","line":"    (void)__align;"},
{"lineNum":"  279","line":"    return __do_deallocate_handle_size(__ptr, __size);"},
{"lineNum":"  280","line":"#else"},
{"lineNum":"  281","line":"    if (__is_overaligned_for_new(__align)) {"},
{"lineNum":"  282","line":"      const align_val_t __align_val = static_cast<align_val_t>(__align);"},
{"lineNum":"  283","line":"      return __do_deallocate_handle_size(__ptr, __size, __align_val);"},
{"lineNum":"  284","line":"    } else {"},
{"lineNum":"  285","line":"      return __do_deallocate_handle_size(__ptr, __size);","class":"linePartCov","hits":"13","order":"341","possible_hits":"757",},
{"lineNum":"  286","line":"    }"},
{"lineNum":"  287","line":"#endif"},
{"lineNum":"  288","line":"}"},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"inline _LIBCPP_INLINE_VISIBILITY void __libcpp_deallocate_unsized(void* __ptr, size_t __align) {"},
{"lineNum":"  291","line":"#if defined(_LIBCPP_HAS_NO_ALIGNED_ALLOCATION)"},
{"lineNum":"  292","line":"    (void)__align;"},
{"lineNum":"  293","line":"    return __libcpp_operator_delete(__ptr);"},
{"lineNum":"  294","line":"#else"},
{"lineNum":"  295","line":"    if (__is_overaligned_for_new(__align)) {"},
{"lineNum":"  296","line":"      const align_val_t __align_val = static_cast<align_val_t>(__align);"},
{"lineNum":"  297","line":"      return __libcpp_operator_delete(__ptr, __align_val);"},
{"lineNum":"  298","line":"    } else {"},
{"lineNum":"  299","line":"      return __libcpp_operator_delete(__ptr);"},
{"lineNum":"  300","line":"    }"},
{"lineNum":"  301","line":"#endif"},
{"lineNum":"  302","line":"}"},
{"lineNum":"  303","line":""},
{"lineNum":"  304","line":"#if !defined(_LIBCPP_HAS_NO_LIBRARY_ALIGNED_ALLOCATION)"},
{"lineNum":"  305","line":"// Low-level helpers to call the aligned allocation and deallocation functions"},
{"lineNum":"  306","line":"// on the target platform. This is used to implement libc++\'s own memory"},
{"lineNum":"  307","line":"// allocation routines -- if you need to allocate memory inside the library,"},
{"lineNum":"  308","line":"// chances are that you want to use `__libcpp_allocate` instead."},
{"lineNum":"  309","line":"//"},
{"lineNum":"  310","line":"// Returns the allocated memory, or `nullptr` on failure."},
{"lineNum":"  311","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  312","line":"void* __libcpp_aligned_alloc(std::size_t __alignment, std::size_t __size) {"},
{"lineNum":"  313","line":"#if defined(_LIBCPP_MSVCRT_LIKE)"},
{"lineNum":"  314","line":"  return ::_aligned_malloc(__size, __alignment);"},
{"lineNum":"  315","line":"#else"},
{"lineNum":"  316","line":"  void* __result = nullptr;"},
{"lineNum":"  317","line":"  (void)::posix_memalign(&__result, __alignment, __size);"},
{"lineNum":"  318","line":"  // If posix_memalign fails, __result is unmodified so we still return `nullptr`."},
{"lineNum":"  319","line":"  return __result;"},
{"lineNum":"  320","line":"#endif"},
{"lineNum":"  321","line":"}"},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  324","line":"void __libcpp_aligned_free(void* __ptr) {"},
{"lineNum":"  325","line":"#if defined(_LIBCPP_MSVCRT_LIKE)"},
{"lineNum":"  326","line":"  ::_aligned_free(__ptr);"},
{"lineNum":"  327","line":"#else"},
{"lineNum":"  328","line":"  ::free(__ptr);"},
{"lineNum":"  329","line":"#endif"},
{"lineNum":"  330","line":"}"},
{"lineNum":"  331","line":"#endif // !_LIBCPP_HAS_NO_ALIGNED_ALLOCATION"},
{"lineNum":"  332","line":""},
{"lineNum":"  333","line":""},
{"lineNum":"  334","line":"template <class _Tp>"},
{"lineNum":"  335","line":"_LIBCPP_NODISCARD_AFTER_CXX17 inline"},
{"lineNum":"  336","line":"_LIBCPP_CONSTEXPR _Tp* __launder(_Tp* __p) _NOEXCEPT"},
{"lineNum":"  337","line":"{"},
{"lineNum":"  338","line":"    static_assert (!(is_function<_Tp>::value), \"can\'t launder functions\" );"},
{"lineNum":"  339","line":"    static_assert (!(is_same<void, typename remove_cv<_Tp>::type>::value), \"can\'t launder cv-void\" );"},
{"lineNum":"  340","line":"#ifdef _LIBCPP_COMPILER_HAS_BUILTIN_LAUNDER"},
{"lineNum":"  341","line":"    return __builtin_launder(__p);"},
{"lineNum":"  342","line":"#else"},
{"lineNum":"  343","line":"    return __p;"},
{"lineNum":"  344","line":"#endif"},
{"lineNum":"  345","line":"}"},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":""},
{"lineNum":"  348","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":"  349","line":"template <class _Tp>"},
{"lineNum":"  350","line":"_LIBCPP_NODISCARD_AFTER_CXX17 inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  351","line":"constexpr _Tp* launder(_Tp* __p) noexcept"},
{"lineNum":"  352","line":"{"},
{"lineNum":"  353","line":"    return _VSTD::__launder(__p);"},
{"lineNum":"  354","line":"}"},
{"lineNum":"  355","line":"#endif"},
{"lineNum":"  356","line":""},
{"lineNum":"  357","line":"_LIBCPP_END_NAMESPACE_STD"},
{"lineNum":"  358","line":""},
{"lineNum":"  359","line":"#endif // _LIBCPP_NEW"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 4, "covered" : 4,};
var merged_data = [];
