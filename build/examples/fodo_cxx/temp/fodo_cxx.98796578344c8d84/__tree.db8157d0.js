var data = {lines:[
{"lineNum":"    1","line":"// -*- C++ -*-"},
{"lineNum":"    2","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions."},
{"lineNum":"    5","line":"// See https://llvm.org/LICENSE.txt for license information."},
{"lineNum":"    6","line":"// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef _LIBCPP___TREE"},
{"lineNum":"   11","line":"#define _LIBCPP___TREE"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"#include <__config>"},
{"lineNum":"   14","line":"#include <__utility/forward.h>"},
{"lineNum":"   15","line":"#include <algorithm>"},
{"lineNum":"   16","line":"#include <iterator>"},
{"lineNum":"   17","line":"#include <limits>"},
{"lineNum":"   18","line":"#include <memory>"},
{"lineNum":"   19","line":"#include <stdexcept>"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"},
{"lineNum":"   22","line":"#pragma GCC system_header"},
{"lineNum":"   23","line":"#endif"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"_LIBCPP_PUSH_MACROS"},
{"lineNum":"   26","line":"#include <__undef_macros>"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"_LIBCPP_BEGIN_NAMESPACE_STD"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"#if defined(__GNUC__) && !defined(__clang__) // gcc.gnu.org/PR37804"},
{"lineNum":"   32","line":"template <class, class, class, class> class _LIBCPP_TEMPLATE_VIS map;"},
{"lineNum":"   33","line":"template <class, class, class, class> class _LIBCPP_TEMPLATE_VIS multimap;"},
{"lineNum":"   34","line":"template <class, class, class> class _LIBCPP_TEMPLATE_VIS set;"},
{"lineNum":"   35","line":"template <class, class, class> class _LIBCPP_TEMPLATE_VIS multiset;"},
{"lineNum":"   36","line":"#endif"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"template <class _Tp, class _Compare, class _Allocator> class __tree;"},
{"lineNum":"   39","line":"template <class _Tp, class _NodePtr, class _DiffType>"},
{"lineNum":"   40","line":"    class _LIBCPP_TEMPLATE_VIS __tree_iterator;"},
{"lineNum":"   41","line":"template <class _Tp, class _ConstNodePtr, class _DiffType>"},
{"lineNum":"   42","line":"    class _LIBCPP_TEMPLATE_VIS __tree_const_iterator;"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"template <class _Pointer> class __tree_end_node;"},
{"lineNum":"   45","line":"template <class _VoidPtr> class __tree_node_base;"},
{"lineNum":"   46","line":"template <class _Tp, class _VoidPtr> class __tree_node;"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"template <class _Key, class _Value>"},
{"lineNum":"   49","line":"struct __value_type;"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"template <class _Allocator> class __map_node_destructor;"},
{"lineNum":"   52","line":"template <class _TreeIterator> class _LIBCPP_TEMPLATE_VIS __map_iterator;"},
{"lineNum":"   53","line":"template <class _TreeIterator> class _LIBCPP_TEMPLATE_VIS __map_const_iterator;"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"/*"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"_NodePtr algorithms"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"The algorithms taking _NodePtr are red black tree algorithms.  Those"},
{"lineNum":"   60","line":"algorithms taking a parameter named __root should assume that __root"},
{"lineNum":"   61","line":"points to a proper red black tree (unless otherwise specified)."},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"Each algorithm herein assumes that __root->__parent_ points to a non-null"},
{"lineNum":"   64","line":"structure which has a member __left_ which points back to __root.  No other"},
{"lineNum":"   65","line":"member is read or written to at __root->__parent_."},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"__root->__parent_ will be referred to below (in comments only) as end_node."},
{"lineNum":"   68","line":"end_node->__left_ is an externably accessible lvalue for __root, and can be"},
{"lineNum":"   69","line":"changed by node insertion and removal (without explicit reference to end_node)."},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"All nodes (with the exception of end_node), even the node referred to as"},
{"lineNum":"   72","line":"__root, have a non-null __parent_ field."},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"*/"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"// Returns:  true if __x is a left child of its parent, else false"},
{"lineNum":"   77","line":"// Precondition:  __x != nullptr."},
{"lineNum":"   78","line":"template <class _NodePtr>"},
{"lineNum":"   79","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"   80","line":"bool"},
{"lineNum":"   81","line":"__tree_is_left_child(_NodePtr __x) _NOEXCEPT"},
{"lineNum":"   82","line":"{"},
{"lineNum":"   83","line":"    return __x == __x->__parent_->__left_;","class":"linePartCov","hits":"16","order":"458","possible_hits":"450",},
{"lineNum":"   84","line":"}"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"// Determines if the subtree rooted at __x is a proper red black subtree.  If"},
{"lineNum":"   87","line":"//    __x is a proper subtree, returns the black height (null counts as 1).  If"},
{"lineNum":"   88","line":"//    __x is an improper subtree, returns 0."},
{"lineNum":"   89","line":"template <class _NodePtr>"},
{"lineNum":"   90","line":"unsigned"},
{"lineNum":"   91","line":"__tree_sub_invariant(_NodePtr __x)"},
{"lineNum":"   92","line":"{"},
{"lineNum":"   93","line":"    if (__x == nullptr)"},
{"lineNum":"   94","line":"        return 1;"},
{"lineNum":"   95","line":"    // parent consistency checked by caller"},
{"lineNum":"   96","line":"    // check __x->__left_ consistency"},
{"lineNum":"   97","line":"    if (__x->__left_ != nullptr && __x->__left_->__parent_ != __x)"},
{"lineNum":"   98","line":"        return 0;"},
{"lineNum":"   99","line":"    // check __x->__right_ consistency"},
{"lineNum":"  100","line":"    if (__x->__right_ != nullptr && __x->__right_->__parent_ != __x)"},
{"lineNum":"  101","line":"        return 0;"},
{"lineNum":"  102","line":"    // check __x->__left_ != __x->__right_ unless both are nullptr"},
{"lineNum":"  103","line":"    if (__x->__left_ == __x->__right_ && __x->__left_ != nullptr)"},
{"lineNum":"  104","line":"        return 0;"},
{"lineNum":"  105","line":"    // If this is red, neither child can be red"},
{"lineNum":"  106","line":"    if (!__x->__is_black_)"},
{"lineNum":"  107","line":"    {"},
{"lineNum":"  108","line":"        if (__x->__left_ && !__x->__left_->__is_black_)"},
{"lineNum":"  109","line":"            return 0;"},
{"lineNum":"  110","line":"        if (__x->__right_ && !__x->__right_->__is_black_)"},
{"lineNum":"  111","line":"            return 0;"},
{"lineNum":"  112","line":"    }"},
{"lineNum":"  113","line":"    unsigned __h = _VSTD::__tree_sub_invariant(__x->__left_);"},
{"lineNum":"  114","line":"    if (__h == 0)"},
{"lineNum":"  115","line":"        return 0;  // invalid left subtree"},
{"lineNum":"  116","line":"    if (__h != _VSTD::__tree_sub_invariant(__x->__right_))"},
{"lineNum":"  117","line":"        return 0;  // invalid or different height right subtree"},
{"lineNum":"  118","line":"    return __h + __x->__is_black_;  // return black height of this node"},
{"lineNum":"  119","line":"}"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"// Determines if the red black tree rooted at __root is a proper red black tree."},
{"lineNum":"  122","line":"//    __root == nullptr is a proper tree.  Returns true is __root is a proper"},
{"lineNum":"  123","line":"//    red black tree, else returns false."},
{"lineNum":"  124","line":"template <class _NodePtr>"},
{"lineNum":"  125","line":"bool"},
{"lineNum":"  126","line":"__tree_invariant(_NodePtr __root)"},
{"lineNum":"  127","line":"{"},
{"lineNum":"  128","line":"    if (__root == nullptr)"},
{"lineNum":"  129","line":"        return true;"},
{"lineNum":"  130","line":"    // check __x->__parent_ consistency"},
{"lineNum":"  131","line":"    if (__root->__parent_ == nullptr)"},
{"lineNum":"  132","line":"        return false;"},
{"lineNum":"  133","line":"    if (!_VSTD::__tree_is_left_child(__root))"},
{"lineNum":"  134","line":"        return false;"},
{"lineNum":"  135","line":"    // root must be black"},
{"lineNum":"  136","line":"    if (!__root->__is_black_)"},
{"lineNum":"  137","line":"        return false;"},
{"lineNum":"  138","line":"    // do normal node checks"},
{"lineNum":"  139","line":"    return _VSTD::__tree_sub_invariant(__root) != 0;"},
{"lineNum":"  140","line":"}"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"// Returns:  pointer to the left-most node under __x."},
{"lineNum":"  143","line":"// Precondition:  __x != nullptr."},
{"lineNum":"  144","line":"template <class _NodePtr>"},
{"lineNum":"  145","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  146","line":"_NodePtr"},
{"lineNum":"  147","line":"__tree_min(_NodePtr __x) _NOEXCEPT"},
{"lineNum":"  148","line":"{"},
{"lineNum":"  149","line":"    while (__x->__left_ != nullptr)","class":"lineNoCov","hits":"0","possible_hits":"137",},
{"lineNum":"  150","line":"        __x = __x->__left_;","class":"lineNoCov","hits":"0","possible_hits":"28",},
{"lineNum":"  151","line":"    return __x;"},
{"lineNum":"  152","line":"}"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"// Returns:  pointer to the right-most node under __x."},
{"lineNum":"  155","line":"// Precondition:  __x != nullptr."},
{"lineNum":"  156","line":"template <class _NodePtr>"},
{"lineNum":"  157","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  158","line":"_NodePtr"},
{"lineNum":"  159","line":"__tree_max(_NodePtr __x) _NOEXCEPT"},
{"lineNum":"  160","line":"{"},
{"lineNum":"  161","line":"    while (__x->__right_ != nullptr)","class":"linePartCov","hits":"9","order":"451","possible_hits":"27",},
{"lineNum":"  162","line":"        __x = __x->__right_;","class":"lineCov","hits":"6","order":"506","possible_hits":"6",},
{"lineNum":"  163","line":"    return __x;"},
{"lineNum":"  164","line":"}"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"// Returns:  pointer to the next in-order node after __x."},
{"lineNum":"  167","line":"// Precondition:  __x != nullptr."},
{"lineNum":"  168","line":"template <class _NodePtr>"},
{"lineNum":"  169","line":"_NodePtr"},
{"lineNum":"  170","line":"__tree_next(_NodePtr __x) _NOEXCEPT"},
{"lineNum":"  171","line":"{"},
{"lineNum":"  172","line":"    if (__x->__right_ != nullptr)"},
{"lineNum":"  173","line":"        return _VSTD::__tree_min(__x->__right_);"},
{"lineNum":"  174","line":"    while (!_VSTD::__tree_is_left_child(__x))"},
{"lineNum":"  175","line":"        __x = __x->__parent_unsafe();"},
{"lineNum":"  176","line":"    return __x->__parent_unsafe();"},
{"lineNum":"  177","line":"}"},
{"lineNum":"  178","line":""},
{"lineNum":"  179","line":"template <class _EndNodePtr, class _NodePtr>"},
{"lineNum":"  180","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  181","line":"_EndNodePtr"},
{"lineNum":"  182","line":"__tree_next_iter(_NodePtr __x) _NOEXCEPT"},
{"lineNum":"  183","line":"{"},
{"lineNum":"  184","line":"    if (__x->__right_ != nullptr)","class":"lineNoCov","hits":"0","possible_hits":"126",},
{"lineNum":"  185","line":"        return static_cast<_EndNodePtr>(_VSTD::__tree_min(__x->__right_));","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  186","line":"    while (!_VSTD::__tree_is_left_child(__x))","class":"lineNoCov","hits":"0","possible_hits":"182",},
{"lineNum":"  187","line":"        __x = __x->__parent_unsafe();","class":"lineNoCov","hits":"0","possible_hits":"28",},
{"lineNum":"  188","line":"    return static_cast<_EndNodePtr>(__x->__parent_);"},
{"lineNum":"  189","line":"}"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"// Returns:  pointer to the previous in-order node before __x."},
{"lineNum":"  192","line":"// Precondition:  __x != nullptr."},
{"lineNum":"  193","line":"// Note: __x may be the end node."},
{"lineNum":"  194","line":"template <class _NodePtr, class _EndNodePtr>"},
{"lineNum":"  195","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  196","line":"_NodePtr"},
{"lineNum":"  197","line":"__tree_prev_iter(_EndNodePtr __x) _NOEXCEPT"},
{"lineNum":"  198","line":"{"},
{"lineNum":"  199","line":"    if (__x->__left_ != nullptr)","class":"linePartCov","hits":"3","order":"449","possible_hits":"21",},
{"lineNum":"  200","line":"        return _VSTD::__tree_max(__x->__left_);","class":"lineCov","hits":"3","order":"450","possible_hits":"3",},
{"lineNum":"  201","line":"    _NodePtr __xx = static_cast<_NodePtr>(__x);","class":"lineCov","hits":"3","order":"503","possible_hits":"3",},
{"lineNum":"  202","line":"    while (_VSTD::__tree_is_left_child(__xx))","class":"linePartCov","hits":"12","order":"504","possible_hits":"48",},
{"lineNum":"  203","line":"        __xx = __xx->__parent_unsafe();","class":"lineCov","hits":"6","order":"690","possible_hits":"6",},
{"lineNum":"  204","line":"    return __xx->__parent_unsafe();"},
{"lineNum":"  205","line":"}"},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"// Returns:  pointer to a node which has no children"},
{"lineNum":"  208","line":"// Precondition:  __x != nullptr."},
{"lineNum":"  209","line":"template <class _NodePtr>"},
{"lineNum":"  210","line":"_NodePtr"},
{"lineNum":"  211","line":"__tree_leaf(_NodePtr __x) _NOEXCEPT"},
{"lineNum":"  212","line":"{"},
{"lineNum":"  213","line":"    while (true)"},
{"lineNum":"  214","line":"    {"},
{"lineNum":"  215","line":"        if (__x->__left_ != nullptr)","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"  216","line":"        {"},
{"lineNum":"  217","line":"            __x = __x->__left_;"},
{"lineNum":"  218","line":"            continue;"},
{"lineNum":"  219","line":"        }"},
{"lineNum":"  220","line":"        if (__x->__right_ != nullptr)","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  221","line":"        {"},
{"lineNum":"  222","line":"            __x = __x->__right_;"},
{"lineNum":"  223","line":"            continue;"},
{"lineNum":"  224","line":"        }"},
{"lineNum":"  225","line":"        break;"},
{"lineNum":"  226","line":"    }"},
{"lineNum":"  227","line":"    return __x;"},
{"lineNum":"  228","line":"}"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"// Effects:  Makes __x->__right_ the subtree root with __x as its left child"},
{"lineNum":"  231","line":"//           while preserving in-order order."},
{"lineNum":"  232","line":"// Precondition:  __x->__right_ != nullptr"},
{"lineNum":"  233","line":"template <class _NodePtr>"},
{"lineNum":"  234","line":"void"},
{"lineNum":"  235","line":"__tree_left_rotate(_NodePtr __x) _NOEXCEPT"},
{"lineNum":"  236","line":"{"},
{"lineNum":"  237","line":"    _NodePtr __y = __x->__right_;","class":"linePartCov","hits":"2","order":"476","possible_hits":"14",},
{"lineNum":"  238","line":"    __x->__right_ = __y->__left_;","class":"linePartCov","hits":"2","order":"477","possible_hits":"15",},
{"lineNum":"  239","line":"    if (__x->__right_ != nullptr)","class":"linePartCov","hits":"2","order":"478","possible_hits":"15",},
{"lineNum":"  240","line":"        __x->__right_->__set_parent(__x);","class":"linePartCov","hits":"1","order":"683","possible_hits":"2",},
{"lineNum":"  241","line":"    __y->__parent_ = __x->__parent_;","class":"linePartCov","hits":"2","order":"479","possible_hits":"20",},
{"lineNum":"  242","line":"    if (_VSTD::__tree_is_left_child(__x))","class":"lineCov","hits":"2","order":"480","possible_hits":"2",},
{"lineNum":"  243","line":"        __x->__parent_->__left_ = __y;","class":"lineCov","hits":"2","order":"481","possible_hits":"2",},
{"lineNum":"  244","line":"    else"},
{"lineNum":"  245","line":"        __x->__parent_unsafe()->__right_ = __y;","class":"linePartCov","hits":"2","order":"680","possible_hits":"4",},
{"lineNum":"  246","line":"    __y->__left_ = __x;","class":"linePartCov","hits":"2","order":"482","possible_hits":"15",},
{"lineNum":"  247","line":"    __x->__set_parent(__y);"},
{"lineNum":"  248","line":"}"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"// Effects:  Makes __x->__left_ the subtree root with __x as its right child"},
{"lineNum":"  251","line":"//           while preserving in-order order."},
{"lineNum":"  252","line":"// Precondition:  __x->__left_ != nullptr"},
{"lineNum":"  253","line":"template <class _NodePtr>"},
{"lineNum":"  254","line":"void"},
{"lineNum":"  255","line":"__tree_right_rotate(_NodePtr __x) _NOEXCEPT"},
{"lineNum":"  256","line":"{"},
{"lineNum":"  257","line":"    _NodePtr __y = __x->__left_;","class":"linePartCov","hits":"2","order":"464","possible_hits":"8",},
{"lineNum":"  258","line":"    __x->__left_ = __y->__right_;","class":"linePartCov","hits":"2","order":"465","possible_hits":"15",},
{"lineNum":"  259","line":"    if (__x->__left_ != nullptr)","class":"linePartCov","hits":"2","order":"466","possible_hits":"15",},
{"lineNum":"  260","line":"        __x->__left_->__set_parent(__x);","class":"linePartCov","hits":"1","order":"691","possible_hits":"2",},
{"lineNum":"  261","line":"    __y->__parent_ = __x->__parent_;","class":"linePartCov","hits":"2","order":"467","possible_hits":"20",},
{"lineNum":"  262","line":"    if (_VSTD::__tree_is_left_child(__x))","class":"lineCov","hits":"2","order":"468","possible_hits":"2",},
{"lineNum":"  263","line":"        __x->__parent_->__left_ = __y;","class":"linePartCov","hits":"1","order":"528","possible_hits":"2",},
{"lineNum":"  264","line":"    else"},
{"lineNum":"  265","line":"        __x->__parent_unsafe()->__right_ = __y;","class":"lineCov","hits":"4","order":"469","possible_hits":"4",},
{"lineNum":"  266","line":"    __y->__right_ = __x;","class":"linePartCov","hits":"2","order":"470","possible_hits":"15",},
{"lineNum":"  267","line":"    __x->__set_parent(__y);"},
{"lineNum":"  268","line":"}"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"// Effects:  Rebalances __root after attaching __x to a leaf."},
{"lineNum":"  271","line":"// Precondition:  __root != nulptr && __x != nullptr."},
{"lineNum":"  272","line":"//                __x has no children."},
{"lineNum":"  273","line":"//                __x == __root or == a direct or indirect child of __root."},
{"lineNum":"  274","line":"//                If __x were to be unlinked from __root (setting __root to"},
{"lineNum":"  275","line":"//                  nullptr if __root == __x), __tree_invariant(__root) == true."},
{"lineNum":"  276","line":"// Postcondition: __tree_invariant(end_node->__left_) == true.  end_node->__left_"},
{"lineNum":"  277","line":"//                may be different than the value passed in as __root."},
{"lineNum":"  278","line":"template <class _NodePtr>"},
{"lineNum":"  279","line":"void"},
{"lineNum":"  280","line":"__tree_balance_after_insert(_NodePtr __root, _NodePtr __x) _NOEXCEPT"},
{"lineNum":"  281","line":"{","class":"linePartCov","hits":"1","order":"1","possible_hits":"6",},
{"lineNum":"  282","line":"    __x->__is_black_ = __x == __root;","class":"linePartCov","hits":"1","order":"2","possible_hits":"6",},
{"lineNum":"  283","line":"    while (__x != __root && !__x->__parent_unsafe()->__is_black_)","class":"linePartCov","hits":"2","order":"3","possible_hits":"17",},
{"lineNum":"  284","line":"    {"},
{"lineNum":"  285","line":"        // __x->__parent_ != __root because __x->__parent_->__is_black == false"},
{"lineNum":"  286","line":"        if (_VSTD::__tree_is_left_child(__x->__parent_unsafe()))","class":"linePartCov","hits":"1","order":"459","possible_hits":"6",},
{"lineNum":"  287","line":"        {"},
{"lineNum":"  288","line":"            _NodePtr __y = __x->__parent_unsafe()->__parent_unsafe()->__right_;","class":"linePartCov","hits":"2","order":"520","possible_hits":"7",},
{"lineNum":"  289","line":"            if (__y != nullptr && !__y->__is_black_)","class":"linePartCov","hits":"1","order":"521","possible_hits":"6",},
{"lineNum":"  290","line":"            {"},
{"lineNum":"  291","line":"                __x = __x->__parent_unsafe();","class":"lineCov","hits":"2","order":"669","possible_hits":"2",},
{"lineNum":"  292","line":"                __x->__is_black_ = true;","class":"lineCov","hits":"1","order":"670","possible_hits":"1",},
{"lineNum":"  293","line":"                __x = __x->__parent_unsafe();","class":"lineCov","hits":"1","order":"671","possible_hits":"1",},
{"lineNum":"  294","line":"                __x->__is_black_ = __x == __root;","class":"lineCov","hits":"1","order":"672","possible_hits":"1",},
{"lineNum":"  295","line":"                __y->__is_black_ = true;","class":"lineCov","hits":"1","order":"673","possible_hits":"1",},
{"lineNum":"  296","line":"            }"},
{"lineNum":"  297","line":"            else"},
{"lineNum":"  298","line":"            {"},
{"lineNum":"  299","line":"                if (!_VSTD::__tree_is_left_child(__x))","class":"linePartCov","hits":"1","order":"522","possible_hits":"6",},
{"lineNum":"  300","line":"                {"},
{"lineNum":"  301","line":"                    __x = __x->__parent_unsafe();","class":"lineCov","hits":"2","order":"523","possible_hits":"2",},
{"lineNum":"  302","line":"                    _VSTD::__tree_left_rotate(__x);"},
{"lineNum":"  303","line":"                }"},
{"lineNum":"  304","line":"                __x = __x->__parent_unsafe();","class":"lineCov","hits":"1","order":"524","possible_hits":"1",},
{"lineNum":"  305","line":"                __x->__is_black_ = true;","class":"linePartCov","hits":"1","order":"525","possible_hits":"6",},
{"lineNum":"  306","line":"                __x = __x->__parent_unsafe();","class":"lineCov","hits":"1","order":"526","possible_hits":"1",},
{"lineNum":"  307","line":"                __x->__is_black_ = false;","class":"linePartCov","hits":"1","order":"527","possible_hits":"6",},
{"lineNum":"  308","line":"                _VSTD::__tree_right_rotate(__x);"},
{"lineNum":"  309","line":"                break;"},
{"lineNum":"  310","line":"            }"},
{"lineNum":"  311","line":"        }","class":"lineCov","hits":"1","order":"674","possible_hits":"1",},
{"lineNum":"  312","line":"        else"},
{"lineNum":"  313","line":"        {"},
{"lineNum":"  314","line":"            _NodePtr __y = __x->__parent_unsafe()->__parent_->__left_;","class":"lineCov","hits":"1","order":"460","possible_hits":"1",},
{"lineNum":"  315","line":"            if (__y != nullptr && !__y->__is_black_)","class":"linePartCov","hits":"1","order":"461","possible_hits":"6",},
{"lineNum":"  316","line":"            {"},
{"lineNum":"  317","line":"                __x = __x->__parent_unsafe();","class":"lineCov","hits":"2","order":"507","possible_hits":"2",},
{"lineNum":"  318","line":"                __x->__is_black_ = true;","class":"lineCov","hits":"1","order":"508","possible_hits":"1",},
{"lineNum":"  319","line":"                __x = __x->__parent_unsafe();","class":"lineCov","hits":"1","order":"509","possible_hits":"1",},
{"lineNum":"  320","line":"                __x->__is_black_ = __x == __root;","class":"lineCov","hits":"1","order":"510","possible_hits":"1",},
{"lineNum":"  321","line":"                __y->__is_black_ = true;","class":"lineCov","hits":"1","order":"511","possible_hits":"1",},
{"lineNum":"  322","line":"            }"},
{"lineNum":"  323","line":"            else"},
{"lineNum":"  324","line":"            {"},
{"lineNum":"  325","line":"                if (_VSTD::__tree_is_left_child(__x))","class":"linePartCov","hits":"1","order":"462","possible_hits":"6",},
{"lineNum":"  326","line":"                {"},
{"lineNum":"  327","line":"                    __x = __x->__parent_unsafe();","class":"lineCov","hits":"2","order":"463","possible_hits":"2",},
{"lineNum":"  328","line":"                    _VSTD::__tree_right_rotate(__x);"},
{"lineNum":"  329","line":"                }"},
{"lineNum":"  330","line":"                __x = __x->__parent_unsafe();","class":"lineCov","hits":"1","order":"472","possible_hits":"1",},
{"lineNum":"  331","line":"                __x->__is_black_ = true;","class":"linePartCov","hits":"1","order":"473","possible_hits":"6",},
{"lineNum":"  332","line":"                __x = __x->__parent_unsafe();","class":"lineCov","hits":"1","order":"474","possible_hits":"1",},
{"lineNum":"  333","line":"                __x->__is_black_ = false;","class":"linePartCov","hits":"1","order":"475","possible_hits":"6",},
{"lineNum":"  334","line":"                _VSTD::__tree_left_rotate(__x);"},
{"lineNum":"  335","line":"                break;"},
{"lineNum":"  336","line":"            }"},
{"lineNum":"  337","line":"        }"},
{"lineNum":"  338","line":"    }"},
{"lineNum":"  339","line":"}","class":"linePartCov","hits":"2","order":"4","possible_hits":"23",},
{"lineNum":"  340","line":""},
{"lineNum":"  341","line":"// Precondition:  __root != nullptr && __z != nullptr."},
{"lineNum":"  342","line":"//                __tree_invariant(__root) == true."},
{"lineNum":"  343","line":"//                __z == __root or == a direct or indirect child of __root."},
{"lineNum":"  344","line":"// Effects:  unlinks __z from the tree rooted at __root, rebalancing as needed."},
{"lineNum":"  345","line":"// Postcondition: __tree_invariant(end_node->__left_) == true && end_node->__left_"},
{"lineNum":"  346","line":"//                nor any of its children refer to __z.  end_node->__left_"},
{"lineNum":"  347","line":"//                may be different than the value passed in as __root."},
{"lineNum":"  348","line":"template <class _NodePtr>"},
{"lineNum":"  349","line":"void"},
{"lineNum":"  350","line":"__tree_remove(_NodePtr __root, _NodePtr __z) _NOEXCEPT"},
{"lineNum":"  351","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  352","line":"    // __z will be removed from the tree.  Client still needs to destruct/deallocate it"},
{"lineNum":"  353","line":"    // __y is either __z, or if __z has two children, __tree_next(__z)."},
{"lineNum":"  354","line":"    // __y will have at most one child."},
{"lineNum":"  355","line":"    // __y will be the initial hole in the tree (make the hole at a leaf)"},
{"lineNum":"  356","line":"    _NodePtr __y = (__z->__left_ == nullptr || __z->__right_ == nullptr) ?","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  357","line":"                    __z : _VSTD::__tree_next(__z);"},
{"lineNum":"  358","line":"    // __x is __y\'s possibly null single child"},
{"lineNum":"  359","line":"    _NodePtr __x = __y->__left_ != nullptr ? __y->__left_ : __y->__right_;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  360","line":"    // __w is __x\'s possibly null uncle (will become __x\'s sibling)"},
{"lineNum":"  361","line":"    _NodePtr __w = nullptr;"},
{"lineNum":"  362","line":"    // link __x to __y\'s parent, and find __w"},
{"lineNum":"  363","line":"    if (__x != nullptr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  364","line":"        __x->__parent_ = __y->__parent_;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  365","line":"    if (_VSTD::__tree_is_left_child(__y))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  366","line":"    {"},
{"lineNum":"  367","line":"        __y->__parent_->__left_ = __x;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  368","line":"        if (__y != __root)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  369","line":"            __w = __y->__parent_unsafe()->__right_;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  370","line":"        else"},
{"lineNum":"  371","line":"            __root = __x;  // __w == nullptr"},
{"lineNum":"  372","line":"    }"},
{"lineNum":"  373","line":"    else"},
{"lineNum":"  374","line":"    {"},
{"lineNum":"  375","line":"        __y->__parent_unsafe()->__right_ = __x;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  376","line":"        // __y can\'t be root if it is a right child"},
{"lineNum":"  377","line":"        __w = __y->__parent_->__left_;"},
{"lineNum":"  378","line":"    }"},
{"lineNum":"  379","line":"    bool __removed_black = __y->__is_black_;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  380","line":"    // If we didn\'t remove __z, do so now by splicing in __y for __z,"},
{"lineNum":"  381","line":"    //    but copy __z\'s color.  This does not impact __x or __w."},
{"lineNum":"  382","line":"    if (__y != __z)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  383","line":"    {"},
{"lineNum":"  384","line":"        // __z->__left_ != nulptr but __z->__right_ might == __x == nullptr"},
{"lineNum":"  385","line":"        __y->__parent_ = __z->__parent_;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  386","line":"        if (_VSTD::__tree_is_left_child(__z))"},
{"lineNum":"  387","line":"            __y->__parent_->__left_ = __y;"},
{"lineNum":"  388","line":"        else"},
{"lineNum":"  389","line":"            __y->__parent_unsafe()->__right_ = __y;"},
{"lineNum":"  390","line":"        __y->__left_ = __z->__left_;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  391","line":"        __y->__left_->__set_parent(__y);"},
{"lineNum":"  392","line":"        __y->__right_ = __z->__right_;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  393","line":"        if (__y->__right_ != nullptr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  394","line":"            __y->__right_->__set_parent(__y);"},
{"lineNum":"  395","line":"        __y->__is_black_ = __z->__is_black_;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  396","line":"        if (__root == __z)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  397","line":"            __root = __y;"},
{"lineNum":"  398","line":"    }"},
{"lineNum":"  399","line":"    // There is no need to rebalance if we removed a red, or if we removed"},
{"lineNum":"  400","line":"    //     the last node."},
{"lineNum":"  401","line":"    if (__removed_black && __root != nullptr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  402","line":"    {"},
{"lineNum":"  403","line":"        // Rebalance:"},
{"lineNum":"  404","line":"        // __x has an implicit black color (transferred from the removed __y)"},
{"lineNum":"  405","line":"        //    associated with it, no matter what its color is."},
{"lineNum":"  406","line":"        // If __x is __root (in which case it can\'t be null), it is supposed"},
{"lineNum":"  407","line":"        //    to be black anyway, and if it is doubly black, then the double"},
{"lineNum":"  408","line":"        //    can just be ignored."},
{"lineNum":"  409","line":"        // If __x is red (in which case it can\'t be null), then it can absorb"},
{"lineNum":"  410","line":"        //    the implicit black just by setting its color to black."},
{"lineNum":"  411","line":"        // Since __y was black and only had one child (which __x points to), __x"},
{"lineNum":"  412","line":"        //   is either red with no children, else null, otherwise __y would have"},
{"lineNum":"  413","line":"        //   different black heights under left and right pointers."},
{"lineNum":"  414","line":"        // if (__x == __root || __x != nullptr && !__x->__is_black_)"},
{"lineNum":"  415","line":"        if (__x != nullptr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  416","line":"            __x->__is_black_ = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  417","line":"        else"},
{"lineNum":"  418","line":"        {"},
{"lineNum":"  419","line":"            //  Else __x isn\'t root, and is \"doubly black\", even though it may"},
{"lineNum":"  420","line":"            //     be null.  __w can not be null here, else the parent would"},
{"lineNum":"  421","line":"            //     see a black height >= 2 on the __x side and a black height"},
{"lineNum":"  422","line":"            //     of 1 on the __w side (__w must be a non-null black or a red"},
{"lineNum":"  423","line":"            //     with a non-null black child)."},
{"lineNum":"  424","line":"            while (true)"},
{"lineNum":"  425","line":"            {"},
{"lineNum":"  426","line":"                if (!_VSTD::__tree_is_left_child(__w))  // if x is left child","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  427","line":"                {"},
{"lineNum":"  428","line":"                    if (!__w->__is_black_)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  429","line":"                    {"},
{"lineNum":"  430","line":"                        __w->__is_black_ = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  431","line":"                        __w->__parent_unsafe()->__is_black_ = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  432","line":"                        _VSTD::__tree_left_rotate(__w->__parent_unsafe());"},
{"lineNum":"  433","line":"                        // __x is still valid"},
{"lineNum":"  434","line":"                        // reset __root only if necessary"},
{"lineNum":"  435","line":"                        if (__root == __w->__left_)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  436","line":"                            __root = __w;"},
{"lineNum":"  437","line":"                        // reset sibling, and it still can\'t be null"},
{"lineNum":"  438","line":"                        __w = __w->__left_->__right_;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  439","line":"                    }"},
{"lineNum":"  440","line":"                    // __w->__is_black_ is now true, __w may have null children"},
{"lineNum":"  441","line":"                    if ((__w->__left_  == nullptr || __w->__left_->__is_black_) &&","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  442","line":"                        (__w->__right_ == nullptr || __w->__right_->__is_black_))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  443","line":"                    {"},
{"lineNum":"  444","line":"                        __w->__is_black_ = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  445","line":"                        __x = __w->__parent_unsafe();"},
{"lineNum":"  446","line":"                        // __x can no longer be null"},
{"lineNum":"  447","line":"                        if (__x == __root || !__x->__is_black_)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  448","line":"                        {"},
{"lineNum":"  449","line":"                            __x->__is_black_ = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  450","line":"                            break;"},
{"lineNum":"  451","line":"                        }"},
{"lineNum":"  452","line":"                        // reset sibling, and it still can\'t be null"},
{"lineNum":"  453","line":"                        __w = _VSTD::__tree_is_left_child(__x) ?"},
{"lineNum":"  454","line":"                                    __x->__parent_unsafe()->__right_ :"},
{"lineNum":"  455","line":"                                    __x->__parent_->__left_;"},
{"lineNum":"  456","line":"                        // continue;"},
{"lineNum":"  457","line":"                    }"},
{"lineNum":"  458","line":"                    else  // __w has a red child"},
{"lineNum":"  459","line":"                    {"},
{"lineNum":"  460","line":"                        if (__w->__right_ == nullptr || __w->__right_->__is_black_)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  461","line":"                        {"},
{"lineNum":"  462","line":"                            // __w left child is non-null and red"},
{"lineNum":"  463","line":"                            __w->__left_->__is_black_ = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  464","line":"                            __w->__is_black_ = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  465","line":"                            _VSTD::__tree_right_rotate(__w);"},
{"lineNum":"  466","line":"                            // __w is known not to be root, so root hasn\'t changed"},
{"lineNum":"  467","line":"                            // reset sibling, and it still can\'t be null"},
{"lineNum":"  468","line":"                            __w = __w->__parent_unsafe();"},
{"lineNum":"  469","line":"                        }"},
{"lineNum":"  470","line":"                        // __w has a right red child, left child may be null"},
{"lineNum":"  471","line":"                        __w->__is_black_ = __w->__parent_unsafe()->__is_black_;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  472","line":"                        __w->__parent_unsafe()->__is_black_ = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  473","line":"                        __w->__right_->__is_black_ = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  474","line":"                        _VSTD::__tree_left_rotate(__w->__parent_unsafe());"},
{"lineNum":"  475","line":"                        break;"},
{"lineNum":"  476","line":"                    }"},
{"lineNum":"  477","line":"                }"},
{"lineNum":"  478","line":"                else"},
{"lineNum":"  479","line":"                {"},
{"lineNum":"  480","line":"                    if (!__w->__is_black_)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  481","line":"                    {"},
{"lineNum":"  482","line":"                        __w->__is_black_ = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  483","line":"                        __w->__parent_unsafe()->__is_black_ = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  484","line":"                        _VSTD::__tree_right_rotate(__w->__parent_unsafe());"},
{"lineNum":"  485","line":"                        // __x is still valid"},
{"lineNum":"  486","line":"                        // reset __root only if necessary"},
{"lineNum":"  487","line":"                        if (__root == __w->__right_)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  488","line":"                            __root = __w;"},
{"lineNum":"  489","line":"                        // reset sibling, and it still can\'t be null"},
{"lineNum":"  490","line":"                        __w = __w->__right_->__left_;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  491","line":"                    }"},
{"lineNum":"  492","line":"                    // __w->__is_black_ is now true, __w may have null children"},
{"lineNum":"  493","line":"                    if ((__w->__left_  == nullptr || __w->__left_->__is_black_) &&","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  494","line":"                        (__w->__right_ == nullptr || __w->__right_->__is_black_))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  495","line":"                    {"},
{"lineNum":"  496","line":"                        __w->__is_black_ = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  497","line":"                        __x = __w->__parent_unsafe();"},
{"lineNum":"  498","line":"                        // __x can no longer be null"},
{"lineNum":"  499","line":"                        if (!__x->__is_black_ || __x == __root)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  500","line":"                        {"},
{"lineNum":"  501","line":"                            __x->__is_black_ = true;"},
{"lineNum":"  502","line":"                            break;"},
{"lineNum":"  503","line":"                        }"},
{"lineNum":"  504","line":"                        // reset sibling, and it still can\'t be null"},
{"lineNum":"  505","line":"                        __w = _VSTD::__tree_is_left_child(__x) ?"},
{"lineNum":"  506","line":"                                    __x->__parent_unsafe()->__right_ :"},
{"lineNum":"  507","line":"                                    __x->__parent_->__left_;"},
{"lineNum":"  508","line":"                        // continue;"},
{"lineNum":"  509","line":"                    }"},
{"lineNum":"  510","line":"                    else  // __w has a red child"},
{"lineNum":"  511","line":"                    {"},
{"lineNum":"  512","line":"                        if (__w->__left_ == nullptr || __w->__left_->__is_black_)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  513","line":"                        {"},
{"lineNum":"  514","line":"                            // __w right child is non-null and red"},
{"lineNum":"  515","line":"                            __w->__right_->__is_black_ = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  516","line":"                            __w->__is_black_ = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  517","line":"                            _VSTD::__tree_left_rotate(__w);"},
{"lineNum":"  518","line":"                            // __w is known not to be root, so root hasn\'t changed"},
{"lineNum":"  519","line":"                            // reset sibling, and it still can\'t be null"},
{"lineNum":"  520","line":"                            __w = __w->__parent_unsafe();"},
{"lineNum":"  521","line":"                        }"},
{"lineNum":"  522","line":"                        // __w has a left red child, right child may be null"},
{"lineNum":"  523","line":"                        __w->__is_black_ = __w->__parent_unsafe()->__is_black_;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  524","line":"                        __w->__parent_unsafe()->__is_black_ = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  525","line":"                        __w->__left_->__is_black_ = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  526","line":"                        _VSTD::__tree_right_rotate(__w->__parent_unsafe());"},
{"lineNum":"  527","line":"                        break;"},
{"lineNum":"  528","line":"                    }"},
{"lineNum":"  529","line":"                }"},
{"lineNum":"  530","line":"            }"},
{"lineNum":"  531","line":"        }"},
{"lineNum":"  532","line":"    }"},
{"lineNum":"  533","line":"}","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  534","line":""},
{"lineNum":"  535","line":"// node traits"},
{"lineNum":"  536","line":""},
{"lineNum":"  537","line":""},
{"lineNum":"  538","line":"template <class _Tp>"},
{"lineNum":"  539","line":"struct __is_tree_value_type_imp : false_type {};"},
{"lineNum":"  540","line":""},
{"lineNum":"  541","line":"template <class _Key, class _Value>"},
{"lineNum":"  542","line":"struct __is_tree_value_type_imp<__value_type<_Key, _Value> > : true_type {};"},
{"lineNum":"  543","line":""},
{"lineNum":"  544","line":"template <class ..._Args>"},
{"lineNum":"  545","line":"struct __is_tree_value_type : false_type {};"},
{"lineNum":"  546","line":""},
{"lineNum":"  547","line":"template <class _One>"},
{"lineNum":"  548","line":"struct __is_tree_value_type<_One> : __is_tree_value_type_imp<typename __uncvref<_One>::type> {};"},
{"lineNum":"  549","line":""},
{"lineNum":"  550","line":"template <class _Tp>"},
{"lineNum":"  551","line":"struct __tree_key_value_types {"},
{"lineNum":"  552","line":"  typedef _Tp key_type;"},
{"lineNum":"  553","line":"  typedef _Tp __node_value_type;"},
{"lineNum":"  554","line":"  typedef _Tp __container_value_type;"},
{"lineNum":"  555","line":"  static const bool __is_map = false;"},
{"lineNum":"  556","line":""},
{"lineNum":"  557","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  558","line":"  static key_type const& __get_key(_Tp const& __v) {"},
{"lineNum":"  559","line":"    return __v;"},
{"lineNum":"  560","line":"  }"},
{"lineNum":"  561","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  562","line":"  static __container_value_type const& __get_value(__node_value_type const& __v) {"},
{"lineNum":"  563","line":"    return __v;"},
{"lineNum":"  564","line":"  }"},
{"lineNum":"  565","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  566","line":"  static __container_value_type* __get_ptr(__node_value_type& __n) {"},
{"lineNum":"  567","line":"    return _VSTD::addressof(__n);"},
{"lineNum":"  568","line":"  }"},
{"lineNum":"  569","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  570","line":"  static __container_value_type&& __move(__node_value_type& __v) {"},
{"lineNum":"  571","line":"    return _VSTD::move(__v);"},
{"lineNum":"  572","line":"  }"},
{"lineNum":"  573","line":"};"},
{"lineNum":"  574","line":""},
{"lineNum":"  575","line":"template <class _Key, class _Tp>"},
{"lineNum":"  576","line":"struct __tree_key_value_types<__value_type<_Key, _Tp> > {"},
{"lineNum":"  577","line":"  typedef _Key                                         key_type;"},
{"lineNum":"  578","line":"  typedef _Tp                                          mapped_type;"},
{"lineNum":"  579","line":"  typedef __value_type<_Key, _Tp>                      __node_value_type;"},
{"lineNum":"  580","line":"  typedef pair<const _Key, _Tp>                        __container_value_type;"},
{"lineNum":"  581","line":"  typedef __container_value_type                       __map_value_type;"},
{"lineNum":"  582","line":"  static const bool __is_map = true;"},
{"lineNum":"  583","line":""},
{"lineNum":"  584","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  585","line":"  static key_type const&"},
{"lineNum":"  586","line":"  __get_key(__node_value_type const& __t) {"},
{"lineNum":"  587","line":"    return __t.__get_value().first;","class":"lineCov","hits":"1","order":"232","possible_hits":"1",},
{"lineNum":"  588","line":"  }"},
{"lineNum":"  589","line":""},
{"lineNum":"  590","line":"  template <class _Up>"},
{"lineNum":"  591","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  592","line":"  static typename enable_if<__is_same_uncvref<_Up, __container_value_type>::value,"},
{"lineNum":"  593","line":"      key_type const&>::type"},
{"lineNum":"  594","line":"  __get_key(_Up& __t) {"},
{"lineNum":"  595","line":"    return __t.first;"},
{"lineNum":"  596","line":"  }"},
{"lineNum":"  597","line":""},
{"lineNum":"  598","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  599","line":"  static __container_value_type const&"},
{"lineNum":"  600","line":"  __get_value(__node_value_type const& __t) {"},
{"lineNum":"  601","line":"    return __t.__get_value();"},
{"lineNum":"  602","line":"  }"},
{"lineNum":"  603","line":""},
{"lineNum":"  604","line":"  template <class _Up>"},
{"lineNum":"  605","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  606","line":"  static typename enable_if<__is_same_uncvref<_Up, __container_value_type>::value,"},
{"lineNum":"  607","line":"      __container_value_type const&>::type"},
{"lineNum":"  608","line":"  __get_value(_Up& __t) {"},
{"lineNum":"  609","line":"    return __t;"},
{"lineNum":"  610","line":"  }"},
{"lineNum":"  611","line":""},
{"lineNum":"  612","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  613","line":"  static __container_value_type* __get_ptr(__node_value_type& __n) {"},
{"lineNum":"  614","line":"    return _VSTD::addressof(__n.__get_value());"},
{"lineNum":"  615","line":"  }"},
{"lineNum":"  616","line":""},
{"lineNum":"  617","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  618","line":"  static pair<key_type&&, mapped_type&&> __move(__node_value_type& __v) {"},
{"lineNum":"  619","line":"    return __v.__move();"},
{"lineNum":"  620","line":"  }"},
{"lineNum":"  621","line":"};"},
{"lineNum":"  622","line":""},
{"lineNum":"  623","line":"template <class _VoidPtr>"},
{"lineNum":"  624","line":"struct __tree_node_base_types {"},
{"lineNum":"  625","line":"  typedef _VoidPtr                                               __void_pointer;"},
{"lineNum":"  626","line":""},
{"lineNum":"  627","line":"  typedef __tree_node_base<__void_pointer>                      __node_base_type;"},
{"lineNum":"  628","line":"  typedef typename __rebind_pointer<_VoidPtr, __node_base_type>::type"},
{"lineNum":"  629","line":"                                                             __node_base_pointer;"},
{"lineNum":"  630","line":""},
{"lineNum":"  631","line":"  typedef __tree_end_node<__node_base_pointer>                  __end_node_type;"},
{"lineNum":"  632","line":"  typedef typename __rebind_pointer<_VoidPtr, __end_node_type>::type"},
{"lineNum":"  633","line":"                                                             __end_node_pointer;"},
{"lineNum":"  634","line":"#if defined(_LIBCPP_ABI_TREE_REMOVE_NODE_POINTER_UB)"},
{"lineNum":"  635","line":"  typedef __end_node_pointer __parent_pointer;"},
{"lineNum":"  636","line":"#else"},
{"lineNum":"  637","line":"  typedef typename conditional<"},
{"lineNum":"  638","line":"      is_pointer<__end_node_pointer>::value,"},
{"lineNum":"  639","line":"        __end_node_pointer,"},
{"lineNum":"  640","line":"        __node_base_pointer>::type __parent_pointer;"},
{"lineNum":"  641","line":"#endif"},
{"lineNum":"  642","line":""},
{"lineNum":"  643","line":"private:"},
{"lineNum":"  644","line":"  static_assert((is_same<typename pointer_traits<_VoidPtr>::element_type, void>::value),"},
{"lineNum":"  645","line":"                  \"_VoidPtr does not point to unqualified void type\");"},
{"lineNum":"  646","line":"};"},
{"lineNum":"  647","line":""},
{"lineNum":"  648","line":"template <class _Tp, class _AllocPtr, class _KVTypes = __tree_key_value_types<_Tp>,"},
{"lineNum":"  649","line":"         bool = _KVTypes::__is_map>"},
{"lineNum":"  650","line":"struct __tree_map_pointer_types {};"},
{"lineNum":"  651","line":""},
{"lineNum":"  652","line":"template <class _Tp, class _AllocPtr, class _KVTypes>"},
{"lineNum":"  653","line":"struct __tree_map_pointer_types<_Tp, _AllocPtr, _KVTypes, true> {"},
{"lineNum":"  654","line":"  typedef typename _KVTypes::__map_value_type   _Mv;"},
{"lineNum":"  655","line":"  typedef typename __rebind_pointer<_AllocPtr, _Mv>::type"},
{"lineNum":"  656","line":"                                                       __map_value_type_pointer;"},
{"lineNum":"  657","line":"  typedef typename __rebind_pointer<_AllocPtr, const _Mv>::type"},
{"lineNum":"  658","line":"                                                 __const_map_value_type_pointer;"},
{"lineNum":"  659","line":"};"},
{"lineNum":"  660","line":""},
{"lineNum":"  661","line":"template <class _NodePtr, class _NodeT = typename pointer_traits<_NodePtr>::element_type>"},
{"lineNum":"  662","line":"struct __tree_node_types;"},
{"lineNum":"  663","line":""},
{"lineNum":"  664","line":"template <class _NodePtr, class _Tp, class _VoidPtr>"},
{"lineNum":"  665","line":"struct __tree_node_types<_NodePtr, __tree_node<_Tp, _VoidPtr> >"},
{"lineNum":"  666","line":"    : public __tree_node_base_types<_VoidPtr>,"},
{"lineNum":"  667","line":"             __tree_key_value_types<_Tp>,"},
{"lineNum":"  668","line":"             __tree_map_pointer_types<_Tp, _VoidPtr>"},
{"lineNum":"  669","line":"{"},
{"lineNum":"  670","line":"  typedef __tree_node_base_types<_VoidPtr> __base;"},
{"lineNum":"  671","line":"  typedef __tree_key_value_types<_Tp>      __key_base;"},
{"lineNum":"  672","line":"  typedef __tree_map_pointer_types<_Tp, _VoidPtr> __map_pointer_base;"},
{"lineNum":"  673","line":"public:"},
{"lineNum":"  674","line":""},
{"lineNum":"  675","line":"  typedef typename pointer_traits<_NodePtr>::element_type       __node_type;"},
{"lineNum":"  676","line":"  typedef _NodePtr                                              __node_pointer;"},
{"lineNum":"  677","line":""},
{"lineNum":"  678","line":"  typedef _Tp                                                 __node_value_type;"},
{"lineNum":"  679","line":"  typedef typename __rebind_pointer<_VoidPtr, __node_value_type>::type"},
{"lineNum":"  680","line":"                                                      __node_value_type_pointer;"},
{"lineNum":"  681","line":"  typedef typename __rebind_pointer<_VoidPtr, const __node_value_type>::type"},
{"lineNum":"  682","line":"                                                __const_node_value_type_pointer;"},
{"lineNum":"  683","line":"#if defined(_LIBCPP_ABI_TREE_REMOVE_NODE_POINTER_UB)"},
{"lineNum":"  684","line":"  typedef typename __base::__end_node_pointer __iter_pointer;"},
{"lineNum":"  685","line":"#else"},
{"lineNum":"  686","line":"  typedef typename conditional<"},
{"lineNum":"  687","line":"      is_pointer<__node_pointer>::value,"},
{"lineNum":"  688","line":"        typename __base::__end_node_pointer,"},
{"lineNum":"  689","line":"        __node_pointer>::type __iter_pointer;"},
{"lineNum":"  690","line":"#endif"},
{"lineNum":"  691","line":"private:"},
{"lineNum":"  692","line":"    static_assert(!is_const<__node_type>::value,"},
{"lineNum":"  693","line":"                \"_NodePtr should never be a pointer to const\");"},
{"lineNum":"  694","line":"    static_assert((is_same<typename __rebind_pointer<_VoidPtr, __node_type>::type,"},
{"lineNum":"  695","line":"                          _NodePtr>::value), \"_VoidPtr does not rebind to _NodePtr.\");"},
{"lineNum":"  696","line":"};"},
{"lineNum":"  697","line":""},
{"lineNum":"  698","line":"template <class _ValueTp, class _VoidPtr>"},
{"lineNum":"  699","line":"struct __make_tree_node_types {"},
{"lineNum":"  700","line":"  typedef typename __rebind_pointer<_VoidPtr, __tree_node<_ValueTp, _VoidPtr> >::type"},
{"lineNum":"  701","line":"                                                                        _NodePtr;"},
{"lineNum":"  702","line":"  typedef __tree_node_types<_NodePtr> type;"},
{"lineNum":"  703","line":"};"},
{"lineNum":"  704","line":""},
{"lineNum":"  705","line":"// node"},
{"lineNum":"  706","line":""},
{"lineNum":"  707","line":"template <class _Pointer>"},
{"lineNum":"  708","line":"class __tree_end_node"},
{"lineNum":"  709","line":"{"},
{"lineNum":"  710","line":"public:"},
{"lineNum":"  711","line":"    typedef _Pointer pointer;"},
{"lineNum":"  712","line":"    pointer __left_;"},
{"lineNum":"  713","line":""},
{"lineNum":"  714","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  715","line":"    __tree_end_node() _NOEXCEPT : __left_() {}","class":"linePartCov","hits":"7","order":"11","possible_hits":"57",},
{"lineNum":"  716","line":"};"},
{"lineNum":"  717","line":""},
{"lineNum":"  718","line":"template <class _VoidPtr>"},
{"lineNum":"  719","line":"class _LIBCPP_STANDALONE_DEBUG __tree_node_base"},
{"lineNum":"  720","line":"    : public __tree_node_base_types<_VoidPtr>::__end_node_type"},
{"lineNum":"  721","line":"{"},
{"lineNum":"  722","line":"    typedef __tree_node_base_types<_VoidPtr> _NodeBaseTypes;"},
{"lineNum":"  723","line":""},
{"lineNum":"  724","line":"public:"},
{"lineNum":"  725","line":"    typedef typename _NodeBaseTypes::__node_base_pointer pointer;"},
{"lineNum":"  726","line":"    typedef typename _NodeBaseTypes::__parent_pointer __parent_pointer;"},
{"lineNum":"  727","line":""},
{"lineNum":"  728","line":"    pointer          __right_;"},
{"lineNum":"  729","line":"    __parent_pointer __parent_;"},
{"lineNum":"  730","line":"    bool __is_black_;"},
{"lineNum":"  731","line":""},
{"lineNum":"  732","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  733","line":"    pointer __parent_unsafe() const { return static_cast<pointer>(__parent_);}","class":"linePartCov","hits":"20","order":"421","possible_hits":"184",},
{"lineNum":"  734","line":""},
{"lineNum":"  735","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  736","line":"    void __set_parent(pointer __p) {"},
{"lineNum":"  737","line":"        __parent_ = static_cast<__parent_pointer>(__p);","class":"linePartCov","hits":"4","order":"471","possible_hits":"48",},
{"lineNum":"  738","line":"    }"},
{"lineNum":"  739","line":""},
{"lineNum":"  740","line":"private:"},
{"lineNum":"  741","line":"  ~__tree_node_base() _LIBCPP_EQUAL_DELETE;"},
{"lineNum":"  742","line":"  __tree_node_base(__tree_node_base const&) _LIBCPP_EQUAL_DELETE;"},
{"lineNum":"  743","line":"  __tree_node_base& operator=(__tree_node_base const&) _LIBCPP_EQUAL_DELETE;"},
{"lineNum":"  744","line":"};"},
{"lineNum":"  745","line":""},
{"lineNum":"  746","line":"template <class _Tp, class _VoidPtr>"},
{"lineNum":"  747","line":"class _LIBCPP_STANDALONE_DEBUG __tree_node"},
{"lineNum":"  748","line":"    : public __tree_node_base<_VoidPtr>"},
{"lineNum":"  749","line":"{"},
{"lineNum":"  750","line":"public:"},
{"lineNum":"  751","line":"    typedef _Tp __node_value_type;"},
{"lineNum":"  752","line":""},
{"lineNum":"  753","line":"    __node_value_type __value_;"},
{"lineNum":"  754","line":""},
{"lineNum":"  755","line":"private:"},
{"lineNum":"  756","line":"  ~__tree_node() _LIBCPP_EQUAL_DELETE;"},
{"lineNum":"  757","line":"  __tree_node(__tree_node const&) _LIBCPP_EQUAL_DELETE;"},
{"lineNum":"  758","line":"  __tree_node& operator=(__tree_node const&) _LIBCPP_EQUAL_DELETE;"},
{"lineNum":"  759","line":"};"},
{"lineNum":"  760","line":""},
{"lineNum":"  761","line":""},
{"lineNum":"  762","line":"template <class _Allocator>"},
{"lineNum":"  763","line":"class __tree_node_destructor"},
{"lineNum":"  764","line":"{"},
{"lineNum":"  765","line":"    typedef _Allocator                                      allocator_type;"},
{"lineNum":"  766","line":"    typedef allocator_traits<allocator_type>                __alloc_traits;"},
{"lineNum":"  767","line":""},
{"lineNum":"  768","line":"public:"},
{"lineNum":"  769","line":"    typedef typename __alloc_traits::pointer                pointer;"},
{"lineNum":"  770","line":"private:"},
{"lineNum":"  771","line":"    typedef __tree_node_types<pointer> _NodeTypes;"},
{"lineNum":"  772","line":"    allocator_type& __na_;"},
{"lineNum":"  773","line":""},
{"lineNum":"  774","line":""},
{"lineNum":"  775","line":"public:"},
{"lineNum":"  776","line":"    bool __value_constructed;"},
{"lineNum":"  777","line":""},
{"lineNum":"  778","line":""},
{"lineNum":"  779","line":"    __tree_node_destructor(const __tree_node_destructor &) = default;"},
{"lineNum":"  780","line":"    __tree_node_destructor& operator=(const __tree_node_destructor&) = delete;"},
{"lineNum":"  781","line":""},
{"lineNum":"  782","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  783","line":"    explicit __tree_node_destructor(allocator_type& __na, bool __val = false) _NOEXCEPT"},
{"lineNum":"  784","line":"        : __na_(__na),"},
{"lineNum":"  785","line":"          __value_constructed(__val)"},
{"lineNum":"  786","line":"        {}"},
{"lineNum":"  787","line":""},
{"lineNum":"  788","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  789","line":"    void operator()(pointer __p) _NOEXCEPT"},
{"lineNum":"  790","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  791","line":"        if (__value_constructed)","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  792","line":"            __alloc_traits::destroy(__na_, _NodeTypes::__get_ptr(__p->__value_));","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  793","line":"        if (__p)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  794","line":"            __alloc_traits::deallocate(__na_, __p, 1);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  795","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  796","line":""},
{"lineNum":"  797","line":"    template <class> friend class __map_node_destructor;"},
{"lineNum":"  798","line":"};"},
{"lineNum":"  799","line":""},
{"lineNum":"  800","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":"  801","line":"template <class _NodeType, class _Alloc>"},
{"lineNum":"  802","line":"struct __generic_container_node_destructor;"},
{"lineNum":"  803","line":"template <class _Tp, class _VoidPtr, class _Alloc>"},
{"lineNum":"  804","line":"struct __generic_container_node_destructor<__tree_node<_Tp, _VoidPtr>, _Alloc>"},
{"lineNum":"  805","line":"    : __tree_node_destructor<_Alloc>"},
{"lineNum":"  806","line":"{"},
{"lineNum":"  807","line":"    using __tree_node_destructor<_Alloc>::__tree_node_destructor;"},
{"lineNum":"  808","line":"};"},
{"lineNum":"  809","line":"#endif"},
{"lineNum":"  810","line":""},
{"lineNum":"  811","line":"template <class _Tp, class _NodePtr, class _DiffType>"},
{"lineNum":"  812","line":"class _LIBCPP_TEMPLATE_VIS __tree_iterator"},
{"lineNum":"  813","line":"{"},
{"lineNum":"  814","line":"    typedef __tree_node_types<_NodePtr>                     _NodeTypes;"},
{"lineNum":"  815","line":"    typedef _NodePtr                                        __node_pointer;"},
{"lineNum":"  816","line":"    typedef typename _NodeTypes::__node_base_pointer        __node_base_pointer;"},
{"lineNum":"  817","line":"    typedef typename _NodeTypes::__end_node_pointer         __end_node_pointer;"},
{"lineNum":"  818","line":"    typedef typename _NodeTypes::__iter_pointer             __iter_pointer;"},
{"lineNum":"  819","line":"    typedef pointer_traits<__node_pointer> __pointer_traits;"},
{"lineNum":"  820","line":""},
{"lineNum":"  821","line":"    __iter_pointer __ptr_;"},
{"lineNum":"  822","line":""},
{"lineNum":"  823","line":"public:"},
{"lineNum":"  824","line":"    typedef bidirectional_iterator_tag                     iterator_category;"},
{"lineNum":"  825","line":"    typedef _Tp                                            value_type;"},
{"lineNum":"  826","line":"    typedef _DiffType                                      difference_type;"},
{"lineNum":"  827","line":"    typedef value_type&                                    reference;"},
{"lineNum":"  828","line":"    typedef typename _NodeTypes::__node_value_type_pointer pointer;"},
{"lineNum":"  829","line":""},
{"lineNum":"  830","line":"    _LIBCPP_INLINE_VISIBILITY __tree_iterator() _NOEXCEPT"},
{"lineNum":"  831","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":"  832","line":"    : __ptr_(nullptr)"},
{"lineNum":"  833","line":"#endif"},
{"lineNum":"  834","line":"    {}"},
{"lineNum":"  835","line":""},
{"lineNum":"  836","line":"    _LIBCPP_INLINE_VISIBILITY reference operator*() const"},
{"lineNum":"  837","line":"        {return __get_np()->__value_;}"},
{"lineNum":"  838","line":"    _LIBCPP_INLINE_VISIBILITY pointer operator->() const"},
{"lineNum":"  839","line":"        {return pointer_traits<pointer>::pointer_to(__get_np()->__value_);}"},
{"lineNum":"  840","line":""},
{"lineNum":"  841","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  842","line":"    __tree_iterator& operator++() {"},
{"lineNum":"  843","line":"      __ptr_ = static_cast<__iter_pointer>("},
{"lineNum":"  844","line":"          _VSTD::__tree_next_iter<__end_node_pointer>(static_cast<__node_base_pointer>(__ptr_)));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  845","line":"      return *this;"},
{"lineNum":"  846","line":"    }"},
{"lineNum":"  847","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  848","line":"    __tree_iterator operator++(int)"},
{"lineNum":"  849","line":"        {__tree_iterator __t(*this); ++(*this); return __t;}"},
{"lineNum":"  850","line":""},
{"lineNum":"  851","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  852","line":"    __tree_iterator& operator--() {"},
{"lineNum":"  853","line":"      __ptr_ = static_cast<__iter_pointer>(_VSTD::__tree_prev_iter<__node_base_pointer>("},
{"lineNum":"  854","line":"          static_cast<__end_node_pointer>(__ptr_)));"},
{"lineNum":"  855","line":"      return *this;"},
{"lineNum":"  856","line":"    }"},
{"lineNum":"  857","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  858","line":"    __tree_iterator operator--(int)"},
{"lineNum":"  859","line":"        {__tree_iterator __t(*this); --(*this); return __t;}"},
{"lineNum":"  860","line":""},
{"lineNum":"  861","line":"    friend _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  862","line":"        bool operator==(const __tree_iterator& __x, const __tree_iterator& __y)"},
{"lineNum":"  863","line":"        {return __x.__ptr_ == __y.__ptr_;}","class":"linePartCov","hits":"65","order":"21","possible_hits":"266",},
{"lineNum":"  864","line":"    friend _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  865","line":"        bool operator!=(const __tree_iterator& __x, const __tree_iterator& __y)"},
{"lineNum":"  866","line":"        {return !(__x == __y);}"},
{"lineNum":"  867","line":""},
{"lineNum":"  868","line":"private:"},
{"lineNum":"  869","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  870","line":"    explicit __tree_iterator(__node_pointer __p) _NOEXCEPT : __ptr_(__p) {}"},
{"lineNum":"  871","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  872","line":"    explicit __tree_iterator(__end_node_pointer __p) _NOEXCEPT : __ptr_(__p) {}"},
{"lineNum":"  873","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  874","line":"    __node_pointer __get_np() const { return static_cast<__node_pointer>(__ptr_); }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  875","line":"    template <class, class, class> friend class __tree;"},
{"lineNum":"  876","line":"    template <class, class, class> friend class _LIBCPP_TEMPLATE_VIS __tree_const_iterator;"},
{"lineNum":"  877","line":"    template <class> friend class _LIBCPP_TEMPLATE_VIS __map_iterator;"},
{"lineNum":"  878","line":"    template <class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS map;"},
{"lineNum":"  879","line":"    template <class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS multimap;"},
{"lineNum":"  880","line":"    template <class, class, class> friend class _LIBCPP_TEMPLATE_VIS set;"},
{"lineNum":"  881","line":"    template <class, class, class> friend class _LIBCPP_TEMPLATE_VIS multiset;"},
{"lineNum":"  882","line":"};"},
{"lineNum":"  883","line":""},
{"lineNum":"  884","line":"template <class _Tp, class _NodePtr, class _DiffType>"},
{"lineNum":"  885","line":"class _LIBCPP_TEMPLATE_VIS __tree_const_iterator"},
{"lineNum":"  886","line":"{"},
{"lineNum":"  887","line":"    typedef __tree_node_types<_NodePtr>                     _NodeTypes;"},
{"lineNum":"  888","line":"    typedef typename _NodeTypes::__node_pointer             __node_pointer;"},
{"lineNum":"  889","line":"    typedef typename _NodeTypes::__node_base_pointer        __node_base_pointer;"},
{"lineNum":"  890","line":"    typedef typename _NodeTypes::__end_node_pointer         __end_node_pointer;"},
{"lineNum":"  891","line":"    typedef typename _NodeTypes::__iter_pointer             __iter_pointer;"},
{"lineNum":"  892","line":"    typedef pointer_traits<__node_pointer> __pointer_traits;"},
{"lineNum":"  893","line":""},
{"lineNum":"  894","line":"    __iter_pointer __ptr_;"},
{"lineNum":"  895","line":""},
{"lineNum":"  896","line":"public:"},
{"lineNum":"  897","line":"    typedef bidirectional_iterator_tag                           iterator_category;"},
{"lineNum":"  898","line":"    typedef _Tp                                                  value_type;"},
{"lineNum":"  899","line":"    typedef _DiffType                                            difference_type;"},
{"lineNum":"  900","line":"    typedef const value_type&                                    reference;"},
{"lineNum":"  901","line":"    typedef typename _NodeTypes::__const_node_value_type_pointer pointer;"},
{"lineNum":"  902","line":""},
{"lineNum":"  903","line":"    _LIBCPP_INLINE_VISIBILITY __tree_const_iterator() _NOEXCEPT"},
{"lineNum":"  904","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":"  905","line":"    : __ptr_(nullptr)"},
{"lineNum":"  906","line":"#endif"},
{"lineNum":"  907","line":"    {}"},
{"lineNum":"  908","line":""},
{"lineNum":"  909","line":"private:"},
{"lineNum":"  910","line":"    typedef __tree_iterator<value_type, __node_pointer, difference_type>"},
{"lineNum":"  911","line":"                                                           __non_const_iterator;"},
{"lineNum":"  912","line":"public:"},
{"lineNum":"  913","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  914","line":"    __tree_const_iterator(__non_const_iterator __p) _NOEXCEPT"},
{"lineNum":"  915","line":"        : __ptr_(__p.__ptr_) {}"},
{"lineNum":"  916","line":""},
{"lineNum":"  917","line":"    _LIBCPP_INLINE_VISIBILITY reference operator*() const"},
{"lineNum":"  918","line":"        {return __get_np()->__value_;}","class":"linePartCov","hits":"6","order":"452","possible_hits":"20",},
{"lineNum":"  919","line":"    _LIBCPP_INLINE_VISIBILITY pointer operator->() const"},
{"lineNum":"  920","line":"        {return pointer_traits<pointer>::pointer_to(__get_np()->__value_);}"},
{"lineNum":"  921","line":""},
{"lineNum":"  922","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  923","line":"    __tree_const_iterator& operator++() {"},
{"lineNum":"  924","line":"      __ptr_ = static_cast<__iter_pointer>("},
{"lineNum":"  925","line":"          _VSTD::__tree_next_iter<__end_node_pointer>(static_cast<__node_base_pointer>(__ptr_)));"},
{"lineNum":"  926","line":"      return *this;"},
{"lineNum":"  927","line":"    }"},
{"lineNum":"  928","line":""},
{"lineNum":"  929","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  930","line":"    __tree_const_iterator operator++(int)"},
{"lineNum":"  931","line":"        {__tree_const_iterator __t(*this); ++(*this); return __t;}"},
{"lineNum":"  932","line":""},
{"lineNum":"  933","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  934","line":"    __tree_const_iterator& operator--() {"},
{"lineNum":"  935","line":"      __ptr_ = static_cast<__iter_pointer>(_VSTD::__tree_prev_iter<__node_base_pointer>("},
{"lineNum":"  936","line":"          static_cast<__end_node_pointer>(__ptr_)));"},
{"lineNum":"  937","line":"      return *this;"},
{"lineNum":"  938","line":"    }"},
{"lineNum":"  939","line":""},
{"lineNum":"  940","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  941","line":"    __tree_const_iterator operator--(int)"},
{"lineNum":"  942","line":"        {__tree_const_iterator __t(*this); --(*this); return __t;}"},
{"lineNum":"  943","line":""},
{"lineNum":"  944","line":"    friend _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  945","line":"        bool operator==(const __tree_const_iterator& __x, const __tree_const_iterator& __y)"},
{"lineNum":"  946","line":"        {return __x.__ptr_ == __y.__ptr_;}","class":"linePartCov","hits":"6","order":"397","possible_hits":"181",},
{"lineNum":"  947","line":"    friend _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  948","line":"        bool operator!=(const __tree_const_iterator& __x, const __tree_const_iterator& __y)"},
{"lineNum":"  949","line":"        {return !(__x == __y);}"},
{"lineNum":"  950","line":""},
{"lineNum":"  951","line":"private:"},
{"lineNum":"  952","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  953","line":"    explicit __tree_const_iterator(__node_pointer __p) _NOEXCEPT"},
{"lineNum":"  954","line":"        : __ptr_(__p) {}"},
{"lineNum":"  955","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  956","line":"    explicit __tree_const_iterator(__end_node_pointer __p) _NOEXCEPT"},
{"lineNum":"  957","line":"        : __ptr_(__p) {}"},
{"lineNum":"  958","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  959","line":"    __node_pointer __get_np() const { return static_cast<__node_pointer>(__ptr_); }"},
{"lineNum":"  960","line":""},
{"lineNum":"  961","line":"    template <class, class, class> friend class __tree;"},
{"lineNum":"  962","line":"    template <class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS map;"},
{"lineNum":"  963","line":"    template <class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS multimap;"},
{"lineNum":"  964","line":"    template <class, class, class> friend class _LIBCPP_TEMPLATE_VIS set;"},
{"lineNum":"  965","line":"    template <class, class, class> friend class _LIBCPP_TEMPLATE_VIS multiset;"},
{"lineNum":"  966","line":"    template <class> friend class _LIBCPP_TEMPLATE_VIS __map_const_iterator;"},
{"lineNum":"  967","line":""},
{"lineNum":"  968","line":"};"},
{"lineNum":"  969","line":""},
{"lineNum":"  970","line":"template<class _Tp, class _Compare>"},
{"lineNum":"  971","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  972","line":"    _LIBCPP_DIAGNOSE_WARNING(!__invokable<_Compare const&, _Tp const&, _Tp const&>::value,"},
{"lineNum":"  973","line":"        \"the specified comparator type does not provide a viable const call operator\")"},
{"lineNum":"  974","line":"#endif"},
{"lineNum":"  975","line":"int __diagnose_non_const_comparator();"},
{"lineNum":"  976","line":""},
{"lineNum":"  977","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":"  978","line":"class __tree"},
{"lineNum":"  979","line":"{"},
{"lineNum":"  980","line":"public:"},
{"lineNum":"  981","line":"    typedef _Tp                                      value_type;"},
{"lineNum":"  982","line":"    typedef _Compare                                 value_compare;"},
{"lineNum":"  983","line":"    typedef _Allocator                               allocator_type;"},
{"lineNum":"  984","line":""},
{"lineNum":"  985","line":"private:"},
{"lineNum":"  986","line":"    typedef allocator_traits<allocator_type>         __alloc_traits;"},
{"lineNum":"  987","line":"    typedef typename __make_tree_node_types<value_type,"},
{"lineNum":"  988","line":"        typename __alloc_traits::void_pointer>::type"},
{"lineNum":"  989","line":"                                                    _NodeTypes;"},
{"lineNum":"  990","line":"    typedef typename _NodeTypes::key_type           key_type;"},
{"lineNum":"  991","line":"public:"},
{"lineNum":"  992","line":"    typedef typename _NodeTypes::__node_value_type      __node_value_type;"},
{"lineNum":"  993","line":"    typedef typename _NodeTypes::__container_value_type __container_value_type;"},
{"lineNum":"  994","line":""},
{"lineNum":"  995","line":"    typedef typename __alloc_traits::pointer         pointer;"},
{"lineNum":"  996","line":"    typedef typename __alloc_traits::const_pointer   const_pointer;"},
{"lineNum":"  997","line":"    typedef typename __alloc_traits::size_type       size_type;"},
{"lineNum":"  998","line":"    typedef typename __alloc_traits::difference_type difference_type;"},
{"lineNum":"  999","line":""},
{"lineNum":" 1000","line":"public:"},
{"lineNum":" 1001","line":"    typedef typename _NodeTypes::__void_pointer        __void_pointer;"},
{"lineNum":" 1002","line":""},
{"lineNum":" 1003","line":"    typedef typename _NodeTypes::__node_type           __node;"},
{"lineNum":" 1004","line":"    typedef typename _NodeTypes::__node_pointer        __node_pointer;"},
{"lineNum":" 1005","line":""},
{"lineNum":" 1006","line":"    typedef typename _NodeTypes::__node_base_type      __node_base;"},
{"lineNum":" 1007","line":"    typedef typename _NodeTypes::__node_base_pointer   __node_base_pointer;"},
{"lineNum":" 1008","line":""},
{"lineNum":" 1009","line":"    typedef typename _NodeTypes::__end_node_type       __end_node_t;"},
{"lineNum":" 1010","line":"    typedef typename _NodeTypes::__end_node_pointer    __end_node_ptr;"},
{"lineNum":" 1011","line":""},
{"lineNum":" 1012","line":"    typedef typename _NodeTypes::__parent_pointer      __parent_pointer;"},
{"lineNum":" 1013","line":"    typedef typename _NodeTypes::__iter_pointer        __iter_pointer;"},
{"lineNum":" 1014","line":""},
{"lineNum":" 1015","line":"    typedef typename __rebind_alloc_helper<__alloc_traits, __node>::type __node_allocator;"},
{"lineNum":" 1016","line":"    typedef allocator_traits<__node_allocator>         __node_traits;"},
{"lineNum":" 1017","line":""},
{"lineNum":" 1018","line":"private:"},
{"lineNum":" 1019","line":"    // check for sane allocator pointer rebinding semantics. Rebinding the"},
{"lineNum":" 1020","line":"    // allocator for a new pointer type should be exactly the same as rebinding"},
{"lineNum":" 1021","line":"    // the pointer using \'pointer_traits\'."},
{"lineNum":" 1022","line":"    static_assert((is_same<__node_pointer, typename __node_traits::pointer>::value),"},
{"lineNum":" 1023","line":"                  \"Allocator does not rebind pointers in a sane manner.\");"},
{"lineNum":" 1024","line":"    typedef typename __rebind_alloc_helper<__node_traits, __node_base>::type"},
{"lineNum":" 1025","line":"        __node_base_allocator;"},
{"lineNum":" 1026","line":"    typedef allocator_traits<__node_base_allocator> __node_base_traits;"},
{"lineNum":" 1027","line":"    static_assert((is_same<__node_base_pointer, typename __node_base_traits::pointer>::value),"},
{"lineNum":" 1028","line":"                 \"Allocator does not rebind pointers in a sane manner.\");"},
{"lineNum":" 1029","line":""},
{"lineNum":" 1030","line":"private:"},
{"lineNum":" 1031","line":"    __iter_pointer                                     __begin_node_;"},
{"lineNum":" 1032","line":"    __compressed_pair<__end_node_t, __node_allocator>  __pair1_;"},
{"lineNum":" 1033","line":"    __compressed_pair<size_type, value_compare>        __pair3_;"},
{"lineNum":" 1034","line":""},
{"lineNum":" 1035","line":"public:"},
{"lineNum":" 1036","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1037","line":"    __iter_pointer __end_node() _NOEXCEPT"},
{"lineNum":" 1038","line":"    {"},
{"lineNum":" 1039","line":"        return static_cast<__iter_pointer>("},
{"lineNum":" 1040","line":"                pointer_traits<__end_node_ptr>::pointer_to(__pair1_.first())"},
{"lineNum":" 1041","line":"        );"},
{"lineNum":" 1042","line":"    }"},
{"lineNum":" 1043","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1044","line":"    __iter_pointer __end_node() const _NOEXCEPT"},
{"lineNum":" 1045","line":"    {"},
{"lineNum":" 1046","line":"        return static_cast<__iter_pointer>("},
{"lineNum":" 1047","line":"            pointer_traits<__end_node_ptr>::pointer_to("},
{"lineNum":" 1048","line":"                const_cast<__end_node_t&>(__pair1_.first())"},
{"lineNum":" 1049","line":"            )"},
{"lineNum":" 1050","line":"        );"},
{"lineNum":" 1051","line":"    }"},
{"lineNum":" 1052","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1053","line":"          __node_allocator& __node_alloc() _NOEXCEPT {return __pair1_.second();}","class":"linePartCov","hits":"7","order":"74","possible_hits":"14",},
{"lineNum":" 1054","line":"private:"},
{"lineNum":" 1055","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1056","line":"    const __node_allocator& __node_alloc() const _NOEXCEPT"},
{"lineNum":" 1057","line":"        {return __pair1_.second();}"},
{"lineNum":" 1058","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1059","line":"          __iter_pointer& __begin_node() _NOEXCEPT {return __begin_node_;}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1060","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1061","line":"    const __iter_pointer& __begin_node() const _NOEXCEPT {return __begin_node_;}"},
{"lineNum":" 1062","line":"public:"},
{"lineNum":" 1063","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1064","line":"    allocator_type __alloc() const _NOEXCEPT"},
{"lineNum":" 1065","line":"        {return allocator_type(__node_alloc());}"},
{"lineNum":" 1066","line":"private:"},
{"lineNum":" 1067","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1068","line":"          size_type& size() _NOEXCEPT {return __pair3_.first();}"},
{"lineNum":" 1069","line":"public:"},
{"lineNum":" 1070","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1071","line":"    const size_type& size() const _NOEXCEPT {return __pair3_.first();}"},
{"lineNum":" 1072","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1073","line":"          value_compare& value_comp() _NOEXCEPT {return __pair3_.second();}"},
{"lineNum":" 1074","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1075","line":"    const value_compare& value_comp() const _NOEXCEPT"},
{"lineNum":" 1076","line":"        {return __pair3_.second();}"},
{"lineNum":" 1077","line":"public:"},
{"lineNum":" 1078","line":""},
{"lineNum":" 1079","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1080","line":"    __node_pointer __root() const _NOEXCEPT"},
{"lineNum":" 1081","line":"        {return static_cast<__node_pointer>(__end_node()->__left_);}","class":"linePartCov","hits":"35","order":"15","possible_hits":"364",},
{"lineNum":" 1082","line":""},
{"lineNum":" 1083","line":"    __node_base_pointer* __root_ptr() const _NOEXCEPT {"},
{"lineNum":" 1084","line":"        return _VSTD::addressof(__end_node()->__left_);","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1085","line":"    }"},
{"lineNum":" 1086","line":""},
{"lineNum":" 1087","line":"    typedef __tree_iterator<value_type, __node_pointer, difference_type>             iterator;"},
{"lineNum":" 1088","line":"    typedef __tree_const_iterator<value_type, __node_pointer, difference_type> const_iterator;"},
{"lineNum":" 1089","line":""},
{"lineNum":" 1090","line":"    explicit __tree(const value_compare& __comp)"},
{"lineNum":" 1091","line":"        _NOEXCEPT_("},
{"lineNum":" 1092","line":"            is_nothrow_default_constructible<__node_allocator>::value &&"},
{"lineNum":" 1093","line":"            is_nothrow_copy_constructible<value_compare>::value);"},
{"lineNum":" 1094","line":"    explicit __tree(const allocator_type& __a);"},
{"lineNum":" 1095","line":"    __tree(const value_compare& __comp, const allocator_type& __a);"},
{"lineNum":" 1096","line":"    __tree(const __tree& __t);"},
{"lineNum":" 1097","line":"    __tree& operator=(const __tree& __t);"},
{"lineNum":" 1098","line":"    template <class _ForwardIterator>"},
{"lineNum":" 1099","line":"        void __assign_unique(_ForwardIterator __first, _ForwardIterator __last);"},
{"lineNum":" 1100","line":"    template <class _InputIterator>"},
{"lineNum":" 1101","line":"        void __assign_multi(_InputIterator __first, _InputIterator __last);"},
{"lineNum":" 1102","line":"    __tree(__tree&& __t)"},
{"lineNum":" 1103","line":"        _NOEXCEPT_("},
{"lineNum":" 1104","line":"            is_nothrow_move_constructible<__node_allocator>::value &&"},
{"lineNum":" 1105","line":"            is_nothrow_move_constructible<value_compare>::value);"},
{"lineNum":" 1106","line":"    __tree(__tree&& __t, const allocator_type& __a);"},
{"lineNum":" 1107","line":"    __tree& operator=(__tree&& __t)"},
{"lineNum":" 1108","line":"        _NOEXCEPT_("},
{"lineNum":" 1109","line":"            __node_traits::propagate_on_container_move_assignment::value &&"},
{"lineNum":" 1110","line":"            is_nothrow_move_assignable<value_compare>::value &&"},
{"lineNum":" 1111","line":"            is_nothrow_move_assignable<__node_allocator>::value);"},
{"lineNum":" 1112","line":"    ~__tree();"},
{"lineNum":" 1113","line":""},
{"lineNum":" 1114","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1115","line":"          iterator begin()  _NOEXCEPT {return       iterator(__begin_node());}","class":"linePartCov","hits":"3","order":"399","possible_hits":"16",},
{"lineNum":" 1116","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1117","line":"    const_iterator begin() const _NOEXCEPT {return const_iterator(__begin_node());}","class":"lineNoCov","hits":"0","possible_hits":"33",},
{"lineNum":" 1118","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1119","line":"          iterator end() _NOEXCEPT {return       iterator(__end_node());}"},
{"lineNum":" 1120","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1121","line":"    const_iterator end() const _NOEXCEPT {return const_iterator(__end_node());}"},
{"lineNum":" 1122","line":""},
{"lineNum":" 1123","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1124","line":"    size_type max_size() const _NOEXCEPT"},
{"lineNum":" 1125","line":"        {return _VSTD::min<size_type>("},
{"lineNum":" 1126","line":"                __node_traits::max_size(__node_alloc()),"},
{"lineNum":" 1127","line":"                numeric_limits<difference_type >::max());}"},
{"lineNum":" 1128","line":""},
{"lineNum":" 1129","line":"    void clear() _NOEXCEPT;"},
{"lineNum":" 1130","line":""},
{"lineNum":" 1131","line":"    void swap(__tree& __t)"},
{"lineNum":" 1132","line":"#if _LIBCPP_STD_VER <= 11"},
{"lineNum":" 1133","line":"        _NOEXCEPT_("},
{"lineNum":" 1134","line":"            __is_nothrow_swappable<value_compare>::value"},
{"lineNum":" 1135","line":"            && (!__node_traits::propagate_on_container_swap::value ||"},
{"lineNum":" 1136","line":"                 __is_nothrow_swappable<__node_allocator>::value)"},
{"lineNum":" 1137","line":"            );"},
{"lineNum":" 1138","line":"#else"},
{"lineNum":" 1139","line":"        _NOEXCEPT_(__is_nothrow_swappable<value_compare>::value);"},
{"lineNum":" 1140","line":"#endif"},
{"lineNum":" 1141","line":""},
{"lineNum":" 1142","line":"    template <class _Key, class ..._Args>"},
{"lineNum":" 1143","line":"    pair<iterator, bool>"},
{"lineNum":" 1144","line":"    __emplace_unique_key_args(_Key const&, _Args&&... __args);"},
{"lineNum":" 1145","line":"    template <class _Key, class ..._Args>"},
{"lineNum":" 1146","line":"    pair<iterator, bool>"},
{"lineNum":" 1147","line":"    __emplace_hint_unique_key_args(const_iterator, _Key const&, _Args&&...);"},
{"lineNum":" 1148","line":""},
{"lineNum":" 1149","line":"    template <class... _Args>"},
{"lineNum":" 1150","line":"    pair<iterator, bool> __emplace_unique_impl(_Args&&... __args);"},
{"lineNum":" 1151","line":""},
{"lineNum":" 1152","line":"    template <class... _Args>"},
{"lineNum":" 1153","line":"    iterator __emplace_hint_unique_impl(const_iterator __p, _Args&&... __args);"},
{"lineNum":" 1154","line":""},
{"lineNum":" 1155","line":"    template <class... _Args>"},
{"lineNum":" 1156","line":"    iterator __emplace_multi(_Args&&... __args);"},
{"lineNum":" 1157","line":""},
{"lineNum":" 1158","line":"    template <class... _Args>"},
{"lineNum":" 1159","line":"    iterator __emplace_hint_multi(const_iterator __p, _Args&&... __args);"},
{"lineNum":" 1160","line":""},
{"lineNum":" 1161","line":"    template <class _Pp>"},
{"lineNum":" 1162","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1163","line":"    pair<iterator, bool> __emplace_unique(_Pp&& __x) {"},
{"lineNum":" 1164","line":"        return __emplace_unique_extract_key(_VSTD::forward<_Pp>(__x),"},
{"lineNum":" 1165","line":"                                            __can_extract_key<_Pp, key_type>());"},
{"lineNum":" 1166","line":"    }"},
{"lineNum":" 1167","line":""},
{"lineNum":" 1168","line":"    template <class _First, class _Second>"},
{"lineNum":" 1169","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1170","line":"    typename enable_if<"},
{"lineNum":" 1171","line":"        __can_extract_map_key<_First, key_type, __container_value_type>::value,"},
{"lineNum":" 1172","line":"        pair<iterator, bool>"},
{"lineNum":" 1173","line":"    >::type __emplace_unique(_First&& __f, _Second&& __s) {"},
{"lineNum":" 1174","line":"        return __emplace_unique_key_args(__f, _VSTD::forward<_First>(__f),","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1175","line":"                                              _VSTD::forward<_Second>(__s));"},
{"lineNum":" 1176","line":"    }"},
{"lineNum":" 1177","line":""},
{"lineNum":" 1178","line":"    template <class... _Args>"},
{"lineNum":" 1179","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1180","line":"    pair<iterator, bool> __emplace_unique(_Args&&... __args) {"},
{"lineNum":" 1181","line":"        return __emplace_unique_impl(_VSTD::forward<_Args>(__args)...);"},
{"lineNum":" 1182","line":"    }"},
{"lineNum":" 1183","line":""},
{"lineNum":" 1184","line":"    template <class _Pp>"},
{"lineNum":" 1185","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1186","line":"    pair<iterator, bool>"},
{"lineNum":" 1187","line":"    __emplace_unique_extract_key(_Pp&& __x, __extract_key_fail_tag) {"},
{"lineNum":" 1188","line":"      return __emplace_unique_impl(_VSTD::forward<_Pp>(__x));"},
{"lineNum":" 1189","line":"    }"},
{"lineNum":" 1190","line":""},
{"lineNum":" 1191","line":"    template <class _Pp>"},
{"lineNum":" 1192","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1193","line":"    pair<iterator, bool>"},
{"lineNum":" 1194","line":"    __emplace_unique_extract_key(_Pp&& __x, __extract_key_self_tag) {"},
{"lineNum":" 1195","line":"      return __emplace_unique_key_args(__x, _VSTD::forward<_Pp>(__x));"},
{"lineNum":" 1196","line":"    }"},
{"lineNum":" 1197","line":""},
{"lineNum":" 1198","line":"    template <class _Pp>"},
{"lineNum":" 1199","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1200","line":"    pair<iterator, bool>"},
{"lineNum":" 1201","line":"    __emplace_unique_extract_key(_Pp&& __x, __extract_key_first_tag) {"},
{"lineNum":" 1202","line":"      return __emplace_unique_key_args(__x.first, _VSTD::forward<_Pp>(__x));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1203","line":"    }"},
{"lineNum":" 1204","line":""},
{"lineNum":" 1205","line":"    template <class _Pp>"},
{"lineNum":" 1206","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1207","line":"    iterator __emplace_hint_unique(const_iterator __p, _Pp&& __x) {"},
{"lineNum":" 1208","line":"        return __emplace_hint_unique_extract_key(__p, _VSTD::forward<_Pp>(__x),"},
{"lineNum":" 1209","line":"                                            __can_extract_key<_Pp, key_type>());"},
{"lineNum":" 1210","line":"    }"},
{"lineNum":" 1211","line":""},
{"lineNum":" 1212","line":"    template <class _First, class _Second>"},
{"lineNum":" 1213","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1214","line":"    typename enable_if<"},
{"lineNum":" 1215","line":"        __can_extract_map_key<_First, key_type, __container_value_type>::value,"},
{"lineNum":" 1216","line":"        iterator"},
{"lineNum":" 1217","line":"    >::type __emplace_hint_unique(const_iterator __p, _First&& __f, _Second&& __s) {"},
{"lineNum":" 1218","line":"        return __emplace_hint_unique_key_args(__p, __f,"},
{"lineNum":" 1219","line":"                                              _VSTD::forward<_First>(__f),"},
{"lineNum":" 1220","line":"                                              _VSTD::forward<_Second>(__s)).first;"},
{"lineNum":" 1221","line":"    }"},
{"lineNum":" 1222","line":""},
{"lineNum":" 1223","line":"    template <class... _Args>"},
{"lineNum":" 1224","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1225","line":"    iterator __emplace_hint_unique(const_iterator __p, _Args&&... __args) {"},
{"lineNum":" 1226","line":"        return __emplace_hint_unique_impl(__p, _VSTD::forward<_Args>(__args)...);"},
{"lineNum":" 1227","line":"    }"},
{"lineNum":" 1228","line":""},
{"lineNum":" 1229","line":"    template <class _Pp>"},
{"lineNum":" 1230","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1231","line":"    iterator"},
{"lineNum":" 1232","line":"    __emplace_hint_unique_extract_key(const_iterator __p, _Pp&& __x, __extract_key_fail_tag) {"},
{"lineNum":" 1233","line":"      return __emplace_hint_unique_impl(__p, _VSTD::forward<_Pp>(__x));"},
{"lineNum":" 1234","line":"    }"},
{"lineNum":" 1235","line":""},
{"lineNum":" 1236","line":"    template <class _Pp>"},
{"lineNum":" 1237","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1238","line":"    iterator"},
{"lineNum":" 1239","line":"    __emplace_hint_unique_extract_key(const_iterator __p, _Pp&& __x, __extract_key_self_tag) {"},
{"lineNum":" 1240","line":"      return __emplace_hint_unique_key_args(__p, __x, _VSTD::forward<_Pp>(__x)).first;"},
{"lineNum":" 1241","line":"    }"},
{"lineNum":" 1242","line":""},
{"lineNum":" 1243","line":"    template <class _Pp>"},
{"lineNum":" 1244","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1245","line":"    iterator"},
{"lineNum":" 1246","line":"    __emplace_hint_unique_extract_key(const_iterator __p, _Pp&& __x, __extract_key_first_tag) {"},
{"lineNum":" 1247","line":"      return __emplace_hint_unique_key_args(__p, __x.first, _VSTD::forward<_Pp>(__x)).first;"},
{"lineNum":" 1248","line":"    }"},
{"lineNum":" 1249","line":""},
{"lineNum":" 1250","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1251","line":"    pair<iterator, bool> __insert_unique(const __container_value_type& __v) {"},
{"lineNum":" 1252","line":"        return __emplace_unique_key_args(_NodeTypes::__get_key(__v), __v);"},
{"lineNum":" 1253","line":"    }"},
{"lineNum":" 1254","line":""},
{"lineNum":" 1255","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1256","line":"    iterator __insert_unique(const_iterator __p, const __container_value_type& __v) {"},
{"lineNum":" 1257","line":"        return __emplace_hint_unique_key_args(__p, _NodeTypes::__get_key(__v), __v).first;","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":" 1258","line":"    }"},
{"lineNum":" 1259","line":""},
{"lineNum":" 1260","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1261","line":"    pair<iterator, bool> __insert_unique(__container_value_type&& __v) {"},
{"lineNum":" 1262","line":"        return __emplace_unique_key_args(_NodeTypes::__get_key(__v), _VSTD::move(__v));","class":"linePartCov","hits":"27","order":"62","possible_hits":"81",},
{"lineNum":" 1263","line":"    }"},
{"lineNum":" 1264","line":""},
{"lineNum":" 1265","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1266","line":"    iterator __insert_unique(const_iterator __p, __container_value_type&& __v) {"},
{"lineNum":" 1267","line":"        return __emplace_hint_unique_key_args(__p, _NodeTypes::__get_key(__v), _VSTD::move(__v)).first;","class":"linePartCov","hits":"27","order":"393","possible_hits":"81",},
{"lineNum":" 1268","line":"    }"},
{"lineNum":" 1269","line":""},
{"lineNum":" 1270","line":"    template <class _Vp, class = typename enable_if<"},
{"lineNum":" 1271","line":"            !is_same<typename __unconstref<_Vp>::type,"},
{"lineNum":" 1272","line":"                     __container_value_type"},
{"lineNum":" 1273","line":"            >::value"},
{"lineNum":" 1274","line":"        >::type>"},
{"lineNum":" 1275","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1276","line":"    pair<iterator, bool> __insert_unique(_Vp&& __v) {"},
{"lineNum":" 1277","line":"        return __emplace_unique(_VSTD::forward<_Vp>(__v));"},
{"lineNum":" 1278","line":"    }"},
{"lineNum":" 1279","line":""},
{"lineNum":" 1280","line":"    template <class _Vp, class = typename enable_if<"},
{"lineNum":" 1281","line":"            !is_same<typename __unconstref<_Vp>::type,"},
{"lineNum":" 1282","line":"                     __container_value_type"},
{"lineNum":" 1283","line":"            >::value"},
{"lineNum":" 1284","line":"        >::type>"},
{"lineNum":" 1285","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1286","line":"    iterator __insert_unique(const_iterator __p, _Vp&& __v) {"},
{"lineNum":" 1287","line":"        return __emplace_hint_unique(__p, _VSTD::forward<_Vp>(__v));"},
{"lineNum":" 1288","line":"    }"},
{"lineNum":" 1289","line":""},
{"lineNum":" 1290","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1291","line":"    iterator __insert_multi(__container_value_type&& __v) {"},
{"lineNum":" 1292","line":"        return __emplace_multi(_VSTD::move(__v));"},
{"lineNum":" 1293","line":"    }"},
{"lineNum":" 1294","line":""},
{"lineNum":" 1295","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1296","line":"    iterator __insert_multi(const_iterator __p, __container_value_type&& __v) {"},
{"lineNum":" 1297","line":"        return __emplace_hint_multi(__p, _VSTD::move(__v));"},
{"lineNum":" 1298","line":"    }"},
{"lineNum":" 1299","line":""},
{"lineNum":" 1300","line":"    template <class _Vp>"},
{"lineNum":" 1301","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1302","line":"    iterator __insert_multi(_Vp&& __v) {"},
{"lineNum":" 1303","line":"        return __emplace_multi(_VSTD::forward<_Vp>(__v));","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1304","line":"    }"},
{"lineNum":" 1305","line":""},
{"lineNum":" 1306","line":"    template <class _Vp>"},
{"lineNum":" 1307","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1308","line":"    iterator __insert_multi(const_iterator __p, _Vp&& __v) {"},
{"lineNum":" 1309","line":"        return __emplace_hint_multi(__p, _VSTD::forward<_Vp>(__v));"},
{"lineNum":" 1310","line":"    }"},
{"lineNum":" 1311","line":""},
{"lineNum":" 1312","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1313","line":"    pair<iterator, bool> __node_assign_unique(const __container_value_type& __v, __node_pointer __dest);"},
{"lineNum":" 1314","line":""},
{"lineNum":" 1315","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1316","line":"    iterator __node_insert_multi(__node_pointer __nd);"},
{"lineNum":" 1317","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1318","line":"    iterator __node_insert_multi(const_iterator __p, __node_pointer __nd);"},
{"lineNum":" 1319","line":""},
{"lineNum":" 1320","line":""},
{"lineNum":" 1321","line":"    _LIBCPP_INLINE_VISIBILITY iterator"},
{"lineNum":" 1322","line":"    __remove_node_pointer(__node_pointer) _NOEXCEPT;"},
{"lineNum":" 1323","line":""},
{"lineNum":" 1324","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 1325","line":"    template <class _NodeHandle, class _InsertReturnType>"},
{"lineNum":" 1326","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1327","line":"    _InsertReturnType __node_handle_insert_unique(_NodeHandle&&);"},
{"lineNum":" 1328","line":"    template <class _NodeHandle>"},
{"lineNum":" 1329","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1330","line":"    iterator __node_handle_insert_unique(const_iterator, _NodeHandle&&);"},
{"lineNum":" 1331","line":"    template <class _Tree>"},
{"lineNum":" 1332","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1333","line":"    void __node_handle_merge_unique(_Tree& __source);"},
{"lineNum":" 1334","line":""},
{"lineNum":" 1335","line":"    template <class _NodeHandle>"},
{"lineNum":" 1336","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1337","line":"    iterator __node_handle_insert_multi(_NodeHandle&&);"},
{"lineNum":" 1338","line":"    template <class _NodeHandle>"},
{"lineNum":" 1339","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1340","line":"    iterator __node_handle_insert_multi(const_iterator, _NodeHandle&&);"},
{"lineNum":" 1341","line":"    template <class _Tree>"},
{"lineNum":" 1342","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1343","line":"    void __node_handle_merge_multi(_Tree& __source);"},
{"lineNum":" 1344","line":""},
{"lineNum":" 1345","line":""},
{"lineNum":" 1346","line":"    template <class _NodeHandle>"},
{"lineNum":" 1347","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1348","line":"    _NodeHandle __node_handle_extract(key_type const&);"},
{"lineNum":" 1349","line":"    template <class _NodeHandle>"},
{"lineNum":" 1350","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1351","line":"    _NodeHandle __node_handle_extract(const_iterator);"},
{"lineNum":" 1352","line":"#endif"},
{"lineNum":" 1353","line":""},
{"lineNum":" 1354","line":"    iterator erase(const_iterator __p);"},
{"lineNum":" 1355","line":"    iterator erase(const_iterator __f, const_iterator __l);"},
{"lineNum":" 1356","line":"    template <class _Key>"},
{"lineNum":" 1357","line":"        size_type __erase_unique(const _Key& __k);"},
{"lineNum":" 1358","line":"    template <class _Key>"},
{"lineNum":" 1359","line":"        size_type __erase_multi(const _Key& __k);"},
{"lineNum":" 1360","line":""},
{"lineNum":" 1361","line":"    void __insert_node_at(__parent_pointer     __parent,"},
{"lineNum":" 1362","line":"                          __node_base_pointer& __child,"},
{"lineNum":" 1363","line":"                          __node_base_pointer __new_node) _NOEXCEPT;"},
{"lineNum":" 1364","line":""},
{"lineNum":" 1365","line":"    template <class _Key>"},
{"lineNum":" 1366","line":"        iterator find(const _Key& __v);"},
{"lineNum":" 1367","line":"    template <class _Key>"},
{"lineNum":" 1368","line":"        const_iterator find(const _Key& __v) const;"},
{"lineNum":" 1369","line":""},
{"lineNum":" 1370","line":"    template <class _Key>"},
{"lineNum":" 1371","line":"        size_type __count_unique(const _Key& __k) const;"},
{"lineNum":" 1372","line":"    template <class _Key>"},
{"lineNum":" 1373","line":"        size_type __count_multi(const _Key& __k) const;"},
{"lineNum":" 1374","line":""},
{"lineNum":" 1375","line":"    template <class _Key>"},
{"lineNum":" 1376","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1377","line":"        iterator lower_bound(const _Key& __v)"},
{"lineNum":" 1378","line":"            {return __lower_bound(__v, __root(), __end_node());}","class":"linePartCov","hits":"33","order":"17","possible_hits":"36",},
{"lineNum":" 1379","line":"    template <class _Key>"},
{"lineNum":" 1380","line":"        iterator __lower_bound(const _Key& __v,"},
{"lineNum":" 1381","line":"                               __node_pointer __root,"},
{"lineNum":" 1382","line":"                               __iter_pointer __result);"},
{"lineNum":" 1383","line":"    template <class _Key>"},
{"lineNum":" 1384","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1385","line":"        const_iterator lower_bound(const _Key& __v) const"},
{"lineNum":" 1386","line":"            {return __lower_bound(__v, __root(), __end_node());}"},
{"lineNum":" 1387","line":"    template <class _Key>"},
{"lineNum":" 1388","line":"        const_iterator __lower_bound(const _Key& __v,"},
{"lineNum":" 1389","line":"                                     __node_pointer __root,"},
{"lineNum":" 1390","line":"                                     __iter_pointer __result) const;"},
{"lineNum":" 1391","line":"    template <class _Key>"},
{"lineNum":" 1392","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1393","line":"        iterator upper_bound(const _Key& __v)"},
{"lineNum":" 1394","line":"            {return __upper_bound(__v, __root(), __end_node());}"},
{"lineNum":" 1395","line":"    template <class _Key>"},
{"lineNum":" 1396","line":"        iterator __upper_bound(const _Key& __v,"},
{"lineNum":" 1397","line":"                               __node_pointer __root,"},
{"lineNum":" 1398","line":"                               __iter_pointer __result);"},
{"lineNum":" 1399","line":"    template <class _Key>"},
{"lineNum":" 1400","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1401","line":"        const_iterator upper_bound(const _Key& __v) const"},
{"lineNum":" 1402","line":"            {return __upper_bound(__v, __root(), __end_node());}"},
{"lineNum":" 1403","line":"    template <class _Key>"},
{"lineNum":" 1404","line":"        const_iterator __upper_bound(const _Key& __v,"},
{"lineNum":" 1405","line":"                                     __node_pointer __root,"},
{"lineNum":" 1406","line":"                                     __iter_pointer __result) const;"},
{"lineNum":" 1407","line":"    template <class _Key>"},
{"lineNum":" 1408","line":"        pair<iterator, iterator>"},
{"lineNum":" 1409","line":"        __equal_range_unique(const _Key& __k);"},
{"lineNum":" 1410","line":"    template <class _Key>"},
{"lineNum":" 1411","line":"        pair<const_iterator, const_iterator>"},
{"lineNum":" 1412","line":"        __equal_range_unique(const _Key& __k) const;"},
{"lineNum":" 1413","line":""},
{"lineNum":" 1414","line":"    template <class _Key>"},
{"lineNum":" 1415","line":"        pair<iterator, iterator>"},
{"lineNum":" 1416","line":"        __equal_range_multi(const _Key& __k);"},
{"lineNum":" 1417","line":"    template <class _Key>"},
{"lineNum":" 1418","line":"        pair<const_iterator, const_iterator>"},
{"lineNum":" 1419","line":"        __equal_range_multi(const _Key& __k) const;"},
{"lineNum":" 1420","line":""},
{"lineNum":" 1421","line":"    typedef __tree_node_destructor<__node_allocator> _Dp;"},
{"lineNum":" 1422","line":"    typedef unique_ptr<__node, _Dp> __node_holder;"},
{"lineNum":" 1423","line":""},
{"lineNum":" 1424","line":"    __node_holder remove(const_iterator __p) _NOEXCEPT;"},
{"lineNum":" 1425","line":"private:"},
{"lineNum":" 1426","line":"    __node_base_pointer&"},
{"lineNum":" 1427","line":"        __find_leaf_low(__parent_pointer& __parent, const key_type& __v);"},
{"lineNum":" 1428","line":"    __node_base_pointer&"},
{"lineNum":" 1429","line":"        __find_leaf_high(__parent_pointer& __parent, const key_type& __v);"},
{"lineNum":" 1430","line":"    __node_base_pointer&"},
{"lineNum":" 1431","line":"        __find_leaf(const_iterator __hint,"},
{"lineNum":" 1432","line":"                    __parent_pointer& __parent, const key_type& __v);"},
{"lineNum":" 1433","line":"    // FIXME: Make this function const qualified. Unfortunately doing so"},
{"lineNum":" 1434","line":"    // breaks existing code which uses non-const callable comparators."},
{"lineNum":" 1435","line":"    template <class _Key>"},
{"lineNum":" 1436","line":"    __node_base_pointer&"},
{"lineNum":" 1437","line":"        __find_equal(__parent_pointer& __parent, const _Key& __v);"},
{"lineNum":" 1438","line":"    template <class _Key>"},
{"lineNum":" 1439","line":"    _LIBCPP_INLINE_VISIBILITY __node_base_pointer&"},
{"lineNum":" 1440","line":"    __find_equal(__parent_pointer& __parent, const _Key& __v) const {"},
{"lineNum":" 1441","line":"      return const_cast<__tree*>(this)->__find_equal(__parent, __v);"},
{"lineNum":" 1442","line":"    }"},
{"lineNum":" 1443","line":"    template <class _Key>"},
{"lineNum":" 1444","line":"    __node_base_pointer&"},
{"lineNum":" 1445","line":"        __find_equal(const_iterator __hint, __parent_pointer& __parent,"},
{"lineNum":" 1446","line":"                     __node_base_pointer& __dummy,"},
{"lineNum":" 1447","line":"                     const _Key& __v);"},
{"lineNum":" 1448","line":""},
{"lineNum":" 1449","line":"    template <class ..._Args>"},
{"lineNum":" 1450","line":"    __node_holder __construct_node(_Args&& ...__args);"},
{"lineNum":" 1451","line":""},
{"lineNum":" 1452","line":"    void destroy(__node_pointer __nd) _NOEXCEPT;"},
{"lineNum":" 1453","line":""},
{"lineNum":" 1454","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1455","line":"    void __copy_assign_alloc(const __tree& __t)"},
{"lineNum":" 1456","line":"        {__copy_assign_alloc(__t, integral_constant<bool,"},
{"lineNum":" 1457","line":"             __node_traits::propagate_on_container_copy_assignment::value>());}"},
{"lineNum":" 1458","line":""},
{"lineNum":" 1459","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1460","line":"    void __copy_assign_alloc(const __tree& __t, true_type)"},
{"lineNum":" 1461","line":"        {"},
{"lineNum":" 1462","line":"        if (__node_alloc() != __t.__node_alloc())"},
{"lineNum":" 1463","line":"            clear();"},
{"lineNum":" 1464","line":"        __node_alloc() = __t.__node_alloc();"},
{"lineNum":" 1465","line":"        }"},
{"lineNum":" 1466","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1467","line":"    void __copy_assign_alloc(const __tree&, false_type) {}"},
{"lineNum":" 1468","line":""},
{"lineNum":" 1469","line":"    void __move_assign(__tree& __t, false_type);"},
{"lineNum":" 1470","line":"    void __move_assign(__tree& __t, true_type)"},
{"lineNum":" 1471","line":"        _NOEXCEPT_(is_nothrow_move_assignable<value_compare>::value &&"},
{"lineNum":" 1472","line":"                   is_nothrow_move_assignable<__node_allocator>::value);"},
{"lineNum":" 1473","line":""},
{"lineNum":" 1474","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1475","line":"    void __move_assign_alloc(__tree& __t)"},
{"lineNum":" 1476","line":"        _NOEXCEPT_("},
{"lineNum":" 1477","line":"            !__node_traits::propagate_on_container_move_assignment::value ||"},
{"lineNum":" 1478","line":"            is_nothrow_move_assignable<__node_allocator>::value)"},
{"lineNum":" 1479","line":"        {__move_assign_alloc(__t, integral_constant<bool,"},
{"lineNum":" 1480","line":"             __node_traits::propagate_on_container_move_assignment::value>());}"},
{"lineNum":" 1481","line":""},
{"lineNum":" 1482","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1483","line":"    void __move_assign_alloc(__tree& __t, true_type)"},
{"lineNum":" 1484","line":"        _NOEXCEPT_(is_nothrow_move_assignable<__node_allocator>::value)"},
{"lineNum":" 1485","line":"        {__node_alloc() = _VSTD::move(__t.__node_alloc());}"},
{"lineNum":" 1486","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1487","line":"    void __move_assign_alloc(__tree&, false_type) _NOEXCEPT {}"},
{"lineNum":" 1488","line":""},
{"lineNum":" 1489","line":"    struct _DetachedTreeCache {"},
{"lineNum":" 1490","line":"      _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1491","line":"      explicit _DetachedTreeCache(__tree *__t) _NOEXCEPT : __t_(__t),","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1492","line":"        __cache_root_(__detach_from_tree(__t)) {"},
{"lineNum":" 1493","line":"          __advance();"},
{"lineNum":" 1494","line":"        }"},
{"lineNum":" 1495","line":""},
{"lineNum":" 1496","line":"      _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1497","line":"      __node_pointer __get() const _NOEXCEPT {"},
{"lineNum":" 1498","line":"        return __cache_elem_;"},
{"lineNum":" 1499","line":"      }"},
{"lineNum":" 1500","line":""},
{"lineNum":" 1501","line":"      _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1502","line":"      void __advance() _NOEXCEPT {"},
{"lineNum":" 1503","line":"        __cache_elem_ = __cache_root_;","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 1504","line":"        if (__cache_root_) {","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 1505","line":"          __cache_root_ = __detach_next(__cache_root_);","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 1506","line":"        }"},
{"lineNum":" 1507","line":"      }"},
{"lineNum":" 1508","line":""},
{"lineNum":" 1509","line":"      _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1510","line":"      ~_DetachedTreeCache() {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1511","line":"        __t_->destroy(__cache_elem_);","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":" 1512","line":"        if (__cache_root_) {","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 1513","line":"          while (__cache_root_->__parent_ != nullptr)","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 1514","line":"            __cache_root_ = static_cast<__node_pointer>(__cache_root_->__parent_);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1515","line":"          __t_->destroy(__cache_root_);","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 1516","line":"        }"},
{"lineNum":" 1517","line":"      }","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 1518","line":""},
{"lineNum":" 1519","line":"       _DetachedTreeCache(_DetachedTreeCache const&) = delete;"},
{"lineNum":" 1520","line":"       _DetachedTreeCache& operator=(_DetachedTreeCache const&) = delete;"},
{"lineNum":" 1521","line":""},
{"lineNum":" 1522","line":"    private:"},
{"lineNum":" 1523","line":"      _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1524","line":"      static __node_pointer __detach_from_tree(__tree *__t) _NOEXCEPT;"},
{"lineNum":" 1525","line":"      _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1526","line":"      static __node_pointer __detach_next(__node_pointer) _NOEXCEPT;"},
{"lineNum":" 1527","line":""},
{"lineNum":" 1528","line":"      __tree *__t_;"},
{"lineNum":" 1529","line":"      __node_pointer __cache_root_;"},
{"lineNum":" 1530","line":"      __node_pointer __cache_elem_;"},
{"lineNum":" 1531","line":"    };"},
{"lineNum":" 1532","line":""},
{"lineNum":" 1533","line":""},
{"lineNum":" 1534","line":"    template <class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS map;"},
{"lineNum":" 1535","line":"    template <class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS multimap;"},
{"lineNum":" 1536","line":"};"},
{"lineNum":" 1537","line":""},
{"lineNum":" 1538","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 1539","line":"__tree<_Tp, _Compare, _Allocator>::__tree(const value_compare& __comp)"},
{"lineNum":" 1540","line":"        _NOEXCEPT_("},
{"lineNum":" 1541","line":"            is_nothrow_default_constructible<__node_allocator>::value &&"},
{"lineNum":" 1542","line":"            is_nothrow_copy_constructible<value_compare>::value)"},
{"lineNum":" 1543","line":"    : __pair3_(0, __comp)","class":"linePartCov","hits":"7","order":"10","possible_hits":"14",},
{"lineNum":" 1544","line":"{"},
{"lineNum":" 1545","line":"    __begin_node() = __end_node();","class":"linePartCov","hits":"7","order":"13","possible_hits":"356",},
{"lineNum":" 1546","line":"}"},
{"lineNum":" 1547","line":""},
{"lineNum":" 1548","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 1549","line":"__tree<_Tp, _Compare, _Allocator>::__tree(const allocator_type& __a)"},
{"lineNum":" 1550","line":"    : __begin_node_(__iter_pointer()),"},
{"lineNum":" 1551","line":"      __pair1_(__default_init_tag(), __node_allocator(__a)),"},
{"lineNum":" 1552","line":"      __pair3_(0, __default_init_tag())"},
{"lineNum":" 1553","line":"{"},
{"lineNum":" 1554","line":"    __begin_node() = __end_node();"},
{"lineNum":" 1555","line":"}"},
{"lineNum":" 1556","line":""},
{"lineNum":" 1557","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 1558","line":"__tree<_Tp, _Compare, _Allocator>::__tree(const value_compare& __comp,"},
{"lineNum":" 1559","line":"                                           const allocator_type& __a)"},
{"lineNum":" 1560","line":"    : __begin_node_(__iter_pointer()),"},
{"lineNum":" 1561","line":"      __pair1_(__default_init_tag(), __node_allocator(__a)),"},
{"lineNum":" 1562","line":"      __pair3_(0, __comp)"},
{"lineNum":" 1563","line":"{"},
{"lineNum":" 1564","line":"    __begin_node() = __end_node();"},
{"lineNum":" 1565","line":"}"},
{"lineNum":" 1566","line":""},
{"lineNum":" 1567","line":"// Precondition:  size() != 0"},
{"lineNum":" 1568","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 1569","line":"typename __tree<_Tp, _Compare, _Allocator>::__node_pointer"},
{"lineNum":" 1570","line":"__tree<_Tp, _Compare, _Allocator>::_DetachedTreeCache::__detach_from_tree(__tree *__t) _NOEXCEPT"},
{"lineNum":" 1571","line":"{"},
{"lineNum":" 1572","line":"    __node_pointer __cache = static_cast<__node_pointer>(__t->__begin_node());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1573","line":"    __t->__begin_node() = __t->__end_node();","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1574","line":"    __t->__end_node()->__left_->__parent_ = nullptr;","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 1575","line":"    __t->__end_node()->__left_ = nullptr;"},
{"lineNum":" 1576","line":"    __t->size() = 0;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1577","line":"    // __cache->__left_ == nullptr"},
{"lineNum":" 1578","line":"    if (__cache->__right_ != nullptr)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1579","line":"        __cache = static_cast<__node_pointer>(__cache->__right_);"},
{"lineNum":" 1580","line":"    // __cache->__left_ == nullptr"},
{"lineNum":" 1581","line":"    // __cache->__right_ == nullptr"},
{"lineNum":" 1582","line":"    return __cache;"},
{"lineNum":" 1583","line":"}"},
{"lineNum":" 1584","line":""},
{"lineNum":" 1585","line":"// Precondition:  __cache != nullptr"},
{"lineNum":" 1586","line":"//    __cache->left_ == nullptr"},
{"lineNum":" 1587","line":"//    __cache->right_ == nullptr"},
{"lineNum":" 1588","line":"//    This is no longer a red-black tree"},
{"lineNum":" 1589","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 1590","line":"typename __tree<_Tp, _Compare, _Allocator>::__node_pointer"},
{"lineNum":" 1591","line":"__tree<_Tp, _Compare, _Allocator>::_DetachedTreeCache::__detach_next(__node_pointer __cache) _NOEXCEPT"},
{"lineNum":" 1592","line":"{"},
{"lineNum":" 1593","line":"    if (__cache->__parent_ == nullptr)","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 1594","line":"        return nullptr;"},
{"lineNum":" 1595","line":"    if (_VSTD::__tree_is_left_child(static_cast<__node_base_pointer>(__cache)))","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 1596","line":"    {"},
{"lineNum":" 1597","line":"        __cache->__parent_->__left_ = nullptr;","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 1598","line":"        __cache = static_cast<__node_pointer>(__cache->__parent_);"},
{"lineNum":" 1599","line":"        if (__cache->__right_ == nullptr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1600","line":"            return __cache;"},
{"lineNum":" 1601","line":"        return static_cast<__node_pointer>(_VSTD::__tree_leaf(__cache->__right_));"},
{"lineNum":" 1602","line":"    }"},
{"lineNum":" 1603","line":"    // __cache is right child"},
{"lineNum":" 1604","line":"    __cache->__parent_unsafe()->__right_ = nullptr;","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 1605","line":"    __cache = static_cast<__node_pointer>(__cache->__parent_);"},
{"lineNum":" 1606","line":"    if (__cache->__left_ == nullptr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1607","line":"        return __cache;"},
{"lineNum":" 1608","line":"    return static_cast<__node_pointer>(_VSTD::__tree_leaf(__cache->__left_));"},
{"lineNum":" 1609","line":"}"},
{"lineNum":" 1610","line":""},
{"lineNum":" 1611","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 1612","line":"__tree<_Tp, _Compare, _Allocator>&"},
{"lineNum":" 1613","line":"__tree<_Tp, _Compare, _Allocator>::operator=(const __tree& __t)"},
{"lineNum":" 1614","line":"{"},
{"lineNum":" 1615","line":"    if (this != &__t)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1616","line":"    {"},
{"lineNum":" 1617","line":"        value_comp() = __t.value_comp();"},
{"lineNum":" 1618","line":"        __copy_assign_alloc(__t);"},
{"lineNum":" 1619","line":"        __assign_multi(__t.begin(), __t.end());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1620","line":"    }"},
{"lineNum":" 1621","line":"    return *this;"},
{"lineNum":" 1622","line":"}"},
{"lineNum":" 1623","line":""},
{"lineNum":" 1624","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 1625","line":"template <class _ForwardIterator>"},
{"lineNum":" 1626","line":"void"},
{"lineNum":" 1627","line":"__tree<_Tp, _Compare, _Allocator>::__assign_unique(_ForwardIterator __first, _ForwardIterator __last)"},
{"lineNum":" 1628","line":"{"},
{"lineNum":" 1629","line":"    typedef iterator_traits<_ForwardIterator> _ITraits;"},
{"lineNum":" 1630","line":"    typedef typename _ITraits::value_type _ItValueType;"},
{"lineNum":" 1631","line":"    static_assert((is_same<_ItValueType, __container_value_type>::value),"},
{"lineNum":" 1632","line":"                  \"__assign_unique may only be called with the containers value type\");"},
{"lineNum":" 1633","line":"    static_assert(__is_cpp17_forward_iterator<_ForwardIterator>::value,"},
{"lineNum":" 1634","line":"                  \"__assign_unique requires a forward iterator\");"},
{"lineNum":" 1635","line":"    if (size() != 0)"},
{"lineNum":" 1636","line":"    {"},
{"lineNum":" 1637","line":"        _DetachedTreeCache __cache(this);"},
{"lineNum":" 1638","line":"          for (; __cache.__get() != nullptr && __first != __last; ++__first) {"},
{"lineNum":" 1639","line":"              if (__node_assign_unique(*__first, __cache.__get()).second)"},
{"lineNum":" 1640","line":"                  __cache.__advance();"},
{"lineNum":" 1641","line":"            }"},
{"lineNum":" 1642","line":"    }"},
{"lineNum":" 1643","line":"    for (; __first != __last; ++__first)"},
{"lineNum":" 1644","line":"        __insert_unique(*__first);"},
{"lineNum":" 1645","line":"}"},
{"lineNum":" 1646","line":""},
{"lineNum":" 1647","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 1648","line":"template <class _InputIterator>"},
{"lineNum":" 1649","line":"void"},
{"lineNum":" 1650","line":"__tree<_Tp, _Compare, _Allocator>::__assign_multi(_InputIterator __first, _InputIterator __last)"},
{"lineNum":" 1651","line":"{","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1652","line":"    typedef iterator_traits<_InputIterator> _ITraits;"},
{"lineNum":" 1653","line":"    typedef typename _ITraits::value_type _ItValueType;"},
{"lineNum":" 1654","line":"    static_assert((is_same<_ItValueType, __container_value_type>::value ||"},
{"lineNum":" 1655","line":"                  is_same<_ItValueType, __node_value_type>::value),"},
{"lineNum":" 1656","line":"                  \"__assign_multi may only be called with the containers value type\""},
{"lineNum":" 1657","line":"                  \" or the nodes value type\");"},
{"lineNum":" 1658","line":"    if (size() != 0)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1659","line":"    {"},
{"lineNum":" 1660","line":"        _DetachedTreeCache __cache(this);"},
{"lineNum":" 1661","line":"        for (; __cache.__get() && __first != __last; ++__first) {","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 1662","line":"            __cache.__get()->__value_ = *__first;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1663","line":"            __node_insert_multi(__cache.__get());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1664","line":"            __cache.__advance();"},
{"lineNum":" 1665","line":"        }"},
{"lineNum":" 1666","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1667","line":"    for (; __first != __last; ++__first)","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":" 1668","line":"        __insert_multi(_NodeTypes::__get_value(*__first));"},
{"lineNum":" 1669","line":"}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1670","line":""},
{"lineNum":" 1671","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 1672","line":"__tree<_Tp, _Compare, _Allocator>::__tree(const __tree& __t)"},
{"lineNum":" 1673","line":"    : __begin_node_(__iter_pointer()),"},
{"lineNum":" 1674","line":"      __pair1_(__default_init_tag(), __node_traits::select_on_container_copy_construction(__t.__node_alloc())),"},
{"lineNum":" 1675","line":"      __pair3_(0, __t.value_comp())"},
{"lineNum":" 1676","line":"{"},
{"lineNum":" 1677","line":"    __begin_node() = __end_node();","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1678","line":"}"},
{"lineNum":" 1679","line":""},
{"lineNum":" 1680","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 1681","line":"__tree<_Tp, _Compare, _Allocator>::__tree(__tree&& __t)"},
{"lineNum":" 1682","line":"    _NOEXCEPT_("},
{"lineNum":" 1683","line":"        is_nothrow_move_constructible<__node_allocator>::value &&"},
{"lineNum":" 1684","line":"        is_nothrow_move_constructible<value_compare>::value)"},
{"lineNum":" 1685","line":"    : __begin_node_(_VSTD::move(__t.__begin_node_)),","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1686","line":"      __pair1_(_VSTD::move(__t.__pair1_)),","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1687","line":"      __pair3_(_VSTD::move(__t.__pair3_))","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1688","line":"{"},
{"lineNum":" 1689","line":"    if (size() == 0)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1690","line":"        __begin_node() = __end_node();","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1691","line":"    else"},
{"lineNum":" 1692","line":"    {"},
{"lineNum":" 1693","line":"        __end_node()->__left_->__parent_ = static_cast<__parent_pointer>(__end_node());","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1694","line":"        __t.__begin_node() = __t.__end_node();","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1695","line":"        __t.__end_node()->__left_ = nullptr;"},
{"lineNum":" 1696","line":"        __t.size() = 0;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1697","line":"    }"},
{"lineNum":" 1698","line":"}"},
{"lineNum":" 1699","line":""},
{"lineNum":" 1700","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 1701","line":"__tree<_Tp, _Compare, _Allocator>::__tree(__tree&& __t, const allocator_type& __a)"},
{"lineNum":" 1702","line":"    : __pair1_(__default_init_tag(), __node_allocator(__a)),"},
{"lineNum":" 1703","line":"      __pair3_(0, _VSTD::move(__t.value_comp()))"},
{"lineNum":" 1704","line":"{"},
{"lineNum":" 1705","line":"    if (__a == __t.__alloc())"},
{"lineNum":" 1706","line":"    {"},
{"lineNum":" 1707","line":"        if (__t.size() == 0)"},
{"lineNum":" 1708","line":"            __begin_node() = __end_node();"},
{"lineNum":" 1709","line":"        else"},
{"lineNum":" 1710","line":"        {"},
{"lineNum":" 1711","line":"            __begin_node() = __t.__begin_node();"},
{"lineNum":" 1712","line":"            __end_node()->__left_ = __t.__end_node()->__left_;"},
{"lineNum":" 1713","line":"            __end_node()->__left_->__parent_ = static_cast<__parent_pointer>(__end_node());"},
{"lineNum":" 1714","line":"            size() = __t.size();"},
{"lineNum":" 1715","line":"            __t.__begin_node() = __t.__end_node();"},
{"lineNum":" 1716","line":"            __t.__end_node()->__left_ = nullptr;"},
{"lineNum":" 1717","line":"            __t.size() = 0;"},
{"lineNum":" 1718","line":"        }"},
{"lineNum":" 1719","line":"    }"},
{"lineNum":" 1720","line":"    else"},
{"lineNum":" 1721","line":"    {"},
{"lineNum":" 1722","line":"        __begin_node() = __end_node();"},
{"lineNum":" 1723","line":"    }"},
{"lineNum":" 1724","line":"}"},
{"lineNum":" 1725","line":""},
{"lineNum":" 1726","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 1727","line":"void"},
{"lineNum":" 1728","line":"__tree<_Tp, _Compare, _Allocator>::__move_assign(__tree& __t, true_type)"},
{"lineNum":" 1729","line":"    _NOEXCEPT_(is_nothrow_move_assignable<value_compare>::value &&"},
{"lineNum":" 1730","line":"               is_nothrow_move_assignable<__node_allocator>::value)"},
{"lineNum":" 1731","line":"{"},
{"lineNum":" 1732","line":"    destroy(static_cast<__node_pointer>(__end_node()->__left_));"},
{"lineNum":" 1733","line":"    __begin_node_ = __t.__begin_node_;"},
{"lineNum":" 1734","line":"    __pair1_.first() = __t.__pair1_.first();"},
{"lineNum":" 1735","line":"    __move_assign_alloc(__t);"},
{"lineNum":" 1736","line":"    __pair3_ = _VSTD::move(__t.__pair3_);"},
{"lineNum":" 1737","line":"    if (size() == 0)"},
{"lineNum":" 1738","line":"        __begin_node() = __end_node();"},
{"lineNum":" 1739","line":"    else"},
{"lineNum":" 1740","line":"    {"},
{"lineNum":" 1741","line":"        __end_node()->__left_->__parent_ = static_cast<__parent_pointer>(__end_node());"},
{"lineNum":" 1742","line":"        __t.__begin_node() = __t.__end_node();"},
{"lineNum":" 1743","line":"        __t.__end_node()->__left_ = nullptr;"},
{"lineNum":" 1744","line":"        __t.size() = 0;"},
{"lineNum":" 1745","line":"    }"},
{"lineNum":" 1746","line":"}"},
{"lineNum":" 1747","line":""},
{"lineNum":" 1748","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 1749","line":"void"},
{"lineNum":" 1750","line":"__tree<_Tp, _Compare, _Allocator>::__move_assign(__tree& __t, false_type)"},
{"lineNum":" 1751","line":"{"},
{"lineNum":" 1752","line":"    if (__node_alloc() == __t.__node_alloc())"},
{"lineNum":" 1753","line":"        __move_assign(__t, true_type());"},
{"lineNum":" 1754","line":"    else"},
{"lineNum":" 1755","line":"    {"},
{"lineNum":" 1756","line":"        value_comp() = _VSTD::move(__t.value_comp());"},
{"lineNum":" 1757","line":"        const_iterator __e = end();"},
{"lineNum":" 1758","line":"        if (size() != 0)"},
{"lineNum":" 1759","line":"        {"},
{"lineNum":" 1760","line":"            _DetachedTreeCache __cache(this);"},
{"lineNum":" 1761","line":"            while (__cache.__get() != nullptr && __t.size() != 0) {"},
{"lineNum":" 1762","line":"              __cache.__get()->__value_ = _VSTD::move(__t.remove(__t.begin())->__value_);"},
{"lineNum":" 1763","line":"              __node_insert_multi(__cache.__get());"},
{"lineNum":" 1764","line":"              __cache.__advance();"},
{"lineNum":" 1765","line":"            }"},
{"lineNum":" 1766","line":"        }"},
{"lineNum":" 1767","line":"        while (__t.size() != 0)"},
{"lineNum":" 1768","line":"            __insert_multi(__e, _NodeTypes::__move(__t.remove(__t.begin())->__value_));"},
{"lineNum":" 1769","line":"    }"},
{"lineNum":" 1770","line":"}"},
{"lineNum":" 1771","line":""},
{"lineNum":" 1772","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 1773","line":"__tree<_Tp, _Compare, _Allocator>&"},
{"lineNum":" 1774","line":"__tree<_Tp, _Compare, _Allocator>::operator=(__tree&& __t)"},
{"lineNum":" 1775","line":"    _NOEXCEPT_("},
{"lineNum":" 1776","line":"        __node_traits::propagate_on_container_move_assignment::value &&"},
{"lineNum":" 1777","line":"        is_nothrow_move_assignable<value_compare>::value &&"},
{"lineNum":" 1778","line":"        is_nothrow_move_assignable<__node_allocator>::value)"},
{"lineNum":" 1779","line":""},
{"lineNum":" 1780","line":"{"},
{"lineNum":" 1781","line":"    __move_assign(__t, integral_constant<bool,"},
{"lineNum":" 1782","line":"                  __node_traits::propagate_on_container_move_assignment::value>());"},
{"lineNum":" 1783","line":"    return *this;"},
{"lineNum":" 1784","line":"}"},
{"lineNum":" 1785","line":""},
{"lineNum":" 1786","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 1787","line":"__tree<_Tp, _Compare, _Allocator>::~__tree()"},
{"lineNum":" 1788","line":"{"},
{"lineNum":" 1789","line":"    static_assert((is_copy_constructible<value_compare>::value),"},
{"lineNum":" 1790","line":"                 \"Comparator must be copy-constructible.\");"},
{"lineNum":" 1791","line":"  destroy(__root());","class":"lineNoCov","hits":"0","possible_hits":"139",},
{"lineNum":" 1792","line":"}"},
{"lineNum":" 1793","line":""},
{"lineNum":" 1794","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 1795","line":"void"},
{"lineNum":" 1796","line":"__tree<_Tp, _Compare, _Allocator>::destroy(__node_pointer __nd) _NOEXCEPT"},
{"lineNum":" 1797","line":"{","class":"lineNoCov","hits":"0","possible_hits":"70",},
{"lineNum":" 1798","line":"    if (__nd != nullptr)","class":"lineNoCov","hits":"0","possible_hits":"70",},
{"lineNum":" 1799","line":"    {"},
{"lineNum":" 1800","line":"        destroy(static_cast<__node_pointer>(__nd->__left_));","class":"lineNoCov","hits":"0","possible_hits":"70",},
{"lineNum":" 1801","line":"        destroy(static_cast<__node_pointer>(__nd->__right_));","class":"lineNoCov","hits":"0","possible_hits":"70",},
{"lineNum":" 1802","line":"        __node_allocator& __na = __node_alloc();"},
{"lineNum":" 1803","line":"        __node_traits::destroy(__na, _NodeTypes::__get_ptr(__nd->__value_));","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":" 1804","line":"        __node_traits::deallocate(__na, __nd, 1);","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":" 1805","line":"    }"},
{"lineNum":" 1806","line":"}","class":"lineNoCov","hits":"0","possible_hits":"109",},
{"lineNum":" 1807","line":""},
{"lineNum":" 1808","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 1809","line":"void"},
{"lineNum":" 1810","line":"__tree<_Tp, _Compare, _Allocator>::swap(__tree& __t)"},
{"lineNum":" 1811","line":"#if _LIBCPP_STD_VER <= 11"},
{"lineNum":" 1812","line":"        _NOEXCEPT_("},
{"lineNum":" 1813","line":"            __is_nothrow_swappable<value_compare>::value"},
{"lineNum":" 1814","line":"            && (!__node_traits::propagate_on_container_swap::value ||"},
{"lineNum":" 1815","line":"                 __is_nothrow_swappable<__node_allocator>::value)"},
{"lineNum":" 1816","line":"            )"},
{"lineNum":" 1817","line":"#else"},
{"lineNum":" 1818","line":"        _NOEXCEPT_(__is_nothrow_swappable<value_compare>::value)"},
{"lineNum":" 1819","line":"#endif"},
{"lineNum":" 1820","line":"{"},
{"lineNum":" 1821","line":"    using _VSTD::swap;"},
{"lineNum":" 1822","line":"    swap(__begin_node_, __t.__begin_node_);"},
{"lineNum":" 1823","line":"    swap(__pair1_.first(), __t.__pair1_.first());"},
{"lineNum":" 1824","line":"    _VSTD::__swap_allocator(__node_alloc(), __t.__node_alloc());"},
{"lineNum":" 1825","line":"    __pair3_.swap(__t.__pair3_);"},
{"lineNum":" 1826","line":"    if (size() == 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1827","line":"        __begin_node() = __end_node();"},
{"lineNum":" 1828","line":"    else"},
{"lineNum":" 1829","line":"        __end_node()->__left_->__parent_ = static_cast<__parent_pointer>(__end_node());"},
{"lineNum":" 1830","line":"    if (__t.size() == 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1831","line":"        __t.__begin_node() = __t.__end_node();"},
{"lineNum":" 1832","line":"    else"},
{"lineNum":" 1833","line":"        __t.__end_node()->__left_->__parent_ = static_cast<__parent_pointer>(__t.__end_node());"},
{"lineNum":" 1834","line":"}"},
{"lineNum":" 1835","line":""},
{"lineNum":" 1836","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 1837","line":"void"},
{"lineNum":" 1838","line":"__tree<_Tp, _Compare, _Allocator>::clear() _NOEXCEPT"},
{"lineNum":" 1839","line":"{"},
{"lineNum":" 1840","line":"    destroy(__root());","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1841","line":"    size() = 0;"},
{"lineNum":" 1842","line":"    __begin_node() = __end_node();","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1843","line":"    __end_node()->__left_ = nullptr;","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":" 1844","line":"}"},
{"lineNum":" 1845","line":""},
{"lineNum":" 1846","line":"// Find lower_bound place to insert"},
{"lineNum":" 1847","line":"// Set __parent to parent of null leaf"},
{"lineNum":" 1848","line":"// Return reference to null leaf"},
{"lineNum":" 1849","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 1850","line":"typename __tree<_Tp, _Compare, _Allocator>::__node_base_pointer&"},
{"lineNum":" 1851","line":"__tree<_Tp, _Compare, _Allocator>::__find_leaf_low(__parent_pointer& __parent,"},
{"lineNum":" 1852","line":"                                                   const key_type& __v)"},
{"lineNum":" 1853","line":"{"},
{"lineNum":" 1854","line":"    __node_pointer __nd = __root();"},
{"lineNum":" 1855","line":"    if (__nd != nullptr)"},
{"lineNum":" 1856","line":"    {"},
{"lineNum":" 1857","line":"        while (true)"},
{"lineNum":" 1858","line":"        {"},
{"lineNum":" 1859","line":"            if (value_comp()(__nd->__value_, __v))"},
{"lineNum":" 1860","line":"            {"},
{"lineNum":" 1861","line":"                if (__nd->__right_ != nullptr)"},
{"lineNum":" 1862","line":"                    __nd = static_cast<__node_pointer>(__nd->__right_);"},
{"lineNum":" 1863","line":"                else"},
{"lineNum":" 1864","line":"                {"},
{"lineNum":" 1865","line":"                    __parent = static_cast<__parent_pointer>(__nd);"},
{"lineNum":" 1866","line":"                    return __nd->__right_;"},
{"lineNum":" 1867","line":"                }"},
{"lineNum":" 1868","line":"            }"},
{"lineNum":" 1869","line":"            else"},
{"lineNum":" 1870","line":"            {"},
{"lineNum":" 1871","line":"                if (__nd->__left_ != nullptr)"},
{"lineNum":" 1872","line":"                    __nd = static_cast<__node_pointer>(__nd->__left_);"},
{"lineNum":" 1873","line":"                else"},
{"lineNum":" 1874","line":"                {"},
{"lineNum":" 1875","line":"                    __parent = static_cast<__parent_pointer>(__nd);"},
{"lineNum":" 1876","line":"                    return __parent->__left_;"},
{"lineNum":" 1877","line":"                }"},
{"lineNum":" 1878","line":"            }"},
{"lineNum":" 1879","line":"        }"},
{"lineNum":" 1880","line":"    }"},
{"lineNum":" 1881","line":"    __parent = static_cast<__parent_pointer>(__end_node());"},
{"lineNum":" 1882","line":"    return __parent->__left_;"},
{"lineNum":" 1883","line":"}"},
{"lineNum":" 1884","line":""},
{"lineNum":" 1885","line":"// Find upper_bound place to insert"},
{"lineNum":" 1886","line":"// Set __parent to parent of null leaf"},
{"lineNum":" 1887","line":"// Return reference to null leaf"},
{"lineNum":" 1888","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 1889","line":"typename __tree<_Tp, _Compare, _Allocator>::__node_base_pointer&"},
{"lineNum":" 1890","line":"__tree<_Tp, _Compare, _Allocator>::__find_leaf_high(__parent_pointer& __parent,"},
{"lineNum":" 1891","line":"                                                    const key_type& __v)"},
{"lineNum":" 1892","line":"{","class":"lineCov","hits":"1","order":"234","possible_hits":"1",},
{"lineNum":" 1893","line":"    __node_pointer __nd = __root();"},
{"lineNum":" 1894","line":"    if (__nd != nullptr)","class":"linePartCov","hits":"1","order":"235","possible_hits":"57",},
{"lineNum":" 1895","line":"    {"},
{"lineNum":" 1896","line":"        while (true)","class":"lineCov","hits":"1","order":"427","possible_hits":"1",},
{"lineNum":" 1897","line":"        {"},
{"lineNum":" 1898","line":"            if (value_comp()(__v, __nd->__value_))","class":"linePartCov","hits":"1","order":"428","possible_hits":"57",},
{"lineNum":" 1899","line":"            {"},
{"lineNum":" 1900","line":"                if (__nd->__left_ != nullptr)","class":"linePartCov","hits":"1","order":"495","possible_hits":"57",},
{"lineNum":" 1901","line":"                    __nd = static_cast<__node_pointer>(__nd->__left_);"},
{"lineNum":" 1902","line":"                else"},
{"lineNum":" 1903","line":"                {"},
{"lineNum":" 1904","line":"                    __parent = static_cast<__parent_pointer>(__nd);","class":"lineCov","hits":"1","order":"496","possible_hits":"1",},
{"lineNum":" 1905","line":"                    return __parent->__left_;"},
{"lineNum":" 1906","line":"                }"},
{"lineNum":" 1907","line":"            }","class":"lineCov","hits":"1","order":"515","possible_hits":"1",},
{"lineNum":" 1908","line":"            else"},
{"lineNum":" 1909","line":"            {"},
{"lineNum":" 1910","line":"                if (__nd->__right_ != nullptr)","class":"linePartCov","hits":"1","order":"429","possible_hits":"107",},
{"lineNum":" 1911","line":"                    __nd = static_cast<__node_pointer>(__nd->__right_);","class":"lineCov","hits":"1","order":"494","possible_hits":"1",},
{"lineNum":" 1912","line":"                else"},
{"lineNum":" 1913","line":"                {"},
{"lineNum":" 1914","line":"                    __parent = static_cast<__parent_pointer>(__nd);","class":"lineCov","hits":"1","order":"430","possible_hits":"1",},
{"lineNum":" 1915","line":"                    return __nd->__right_;"},
{"lineNum":" 1916","line":"                }"},
{"lineNum":" 1917","line":"            }"},
{"lineNum":" 1918","line":"        }"},
{"lineNum":" 1919","line":"    }"},
{"lineNum":" 1920","line":"    __parent = static_cast<__parent_pointer>(__end_node());","class":"lineCov","hits":"1","order":"236","possible_hits":"1",},
{"lineNum":" 1921","line":"    return __parent->__left_;"},
{"lineNum":" 1922","line":"}","class":"linePartCov","hits":"1","order":"237","possible_hits":"2",},
{"lineNum":" 1923","line":""},
{"lineNum":" 1924","line":"// Find leaf place to insert closest to __hint"},
{"lineNum":" 1925","line":"// First check prior to __hint."},
{"lineNum":" 1926","line":"// Next check after __hint."},
{"lineNum":" 1927","line":"// Next do O(log N) search."},
{"lineNum":" 1928","line":"// Set __parent to parent of null leaf"},
{"lineNum":" 1929","line":"// Return reference to null leaf"},
{"lineNum":" 1930","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 1931","line":"typename __tree<_Tp, _Compare, _Allocator>::__node_base_pointer&"},
{"lineNum":" 1932","line":"__tree<_Tp, _Compare, _Allocator>::__find_leaf(const_iterator __hint,"},
{"lineNum":" 1933","line":"                                               __parent_pointer& __parent,"},
{"lineNum":" 1934","line":"                                               const key_type& __v)"},
{"lineNum":" 1935","line":"{"},
{"lineNum":" 1936","line":"    if (__hint == end() || !value_comp()(*__hint, __v))  // check before"},
{"lineNum":" 1937","line":"    {"},
{"lineNum":" 1938","line":"        // __v <= *__hint"},
{"lineNum":" 1939","line":"        const_iterator __prior = __hint;"},
{"lineNum":" 1940","line":"        if (__prior == begin() || !value_comp()(__v, *--__prior))"},
{"lineNum":" 1941","line":"        {"},
{"lineNum":" 1942","line":"            // *prev(__hint) <= __v <= *__hint"},
{"lineNum":" 1943","line":"            if (__hint.__ptr_->__left_ == nullptr)"},
{"lineNum":" 1944","line":"            {"},
{"lineNum":" 1945","line":"                __parent = static_cast<__parent_pointer>(__hint.__ptr_);"},
{"lineNum":" 1946","line":"                return __parent->__left_;"},
{"lineNum":" 1947","line":"            }"},
{"lineNum":" 1948","line":"            else"},
{"lineNum":" 1949","line":"            {"},
{"lineNum":" 1950","line":"                __parent = static_cast<__parent_pointer>(__prior.__ptr_);"},
{"lineNum":" 1951","line":"                return static_cast<__node_base_pointer>(__prior.__ptr_)->__right_;"},
{"lineNum":" 1952","line":"            }"},
{"lineNum":" 1953","line":"        }"},
{"lineNum":" 1954","line":"        // __v < *prev(__hint)"},
{"lineNum":" 1955","line":"        return __find_leaf_high(__parent, __v);"},
{"lineNum":" 1956","line":"    }"},
{"lineNum":" 1957","line":"    // else __v > *__hint"},
{"lineNum":" 1958","line":"    return __find_leaf_low(__parent, __v);"},
{"lineNum":" 1959","line":"}"},
{"lineNum":" 1960","line":""},
{"lineNum":" 1961","line":"// Find place to insert if __v doesn\'t exist"},
{"lineNum":" 1962","line":"// Set __parent to parent of null leaf"},
{"lineNum":" 1963","line":"// Return reference to null leaf"},
{"lineNum":" 1964","line":"// If __v exists, set parent to node of __v and return reference to node of __v"},
{"lineNum":" 1965","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 1966","line":"template <class _Key>"},
{"lineNum":" 1967","line":"typename __tree<_Tp, _Compare, _Allocator>::__node_base_pointer&"},
{"lineNum":" 1968","line":"__tree<_Tp, _Compare, _Allocator>::__find_equal(__parent_pointer& __parent,"},
{"lineNum":" 1969","line":"                                                const _Key& __v)"},
{"lineNum":" 1970","line":"{","class":"linePartCov","hits":"3","order":"65","possible_hits":"32",},
{"lineNum":" 1971","line":"    __node_pointer __nd = __root();"},
{"lineNum":" 1972","line":"    __node_base_pointer* __nd_ptr = __root_ptr();"},
{"lineNum":" 1973","line":"    if (__nd != nullptr)","class":"linePartCov","hits":"3","order":"66","possible_hits":"41",},
{"lineNum":" 1974","line":"    {"},
{"lineNum":" 1975","line":"        while (true)","class":"lineCov","hits":"3","order":"416","possible_hits":"3",},
{"lineNum":" 1976","line":"        {"},
{"lineNum":" 1977","line":"            if (value_comp()(__v, __nd->__value_))","class":"linePartCov","hits":"3","order":"417","possible_hits":"41",},
{"lineNum":" 1978","line":"            {"},
{"lineNum":" 1979","line":"                if (__nd->__left_ != nullptr) {","class":"linePartCov","hits":"3","order":"456","possible_hits":"41",},
{"lineNum":" 1980","line":"                    __nd_ptr = _VSTD::addressof(__nd->__left_);"},
{"lineNum":" 1981","line":"                    __nd = static_cast<__node_pointer>(__nd->__left_);","class":"linePartCov","hits":"3","order":"513","possible_hits":"6",},
{"lineNum":" 1982","line":"                } else {"},
{"lineNum":" 1983","line":"                    __parent = static_cast<__parent_pointer>(__nd);","class":"linePartCov","hits":"3","order":"457","possible_hits":"32",},
{"lineNum":" 1984","line":"                    return __parent->__left_;"},
{"lineNum":" 1985","line":"                }"},
{"lineNum":" 1986","line":"            }","class":"linePartCov","hits":"3","order":"514","possible_hits":"6",},
{"lineNum":" 1987","line":"            else if (value_comp()(__nd->__value_, __v))","class":"linePartCov","hits":"3","order":"418","possible_hits":"15",},
{"lineNum":" 1988","line":"            {"},
{"lineNum":" 1989","line":"                if (__nd->__right_ != nullptr) {","class":"linePartCov","hits":"3","order":"419","possible_hits":"41",},
{"lineNum":" 1990","line":"                    __nd_ptr = _VSTD::addressof(__nd->__right_);"},
{"lineNum":" 1991","line":"                    __nd = static_cast<__node_pointer>(__nd->__right_);"},
{"lineNum":" 1992","line":"                } else {"},
{"lineNum":" 1993","line":"                    __parent = static_cast<__parent_pointer>(__nd);","class":"linePartCov","hits":"3","order":"420","possible_hits":"32",},
{"lineNum":" 1994","line":"                    return __nd->__right_;"},
{"lineNum":" 1995","line":"                }"},
{"lineNum":" 1996","line":"            }"},
{"lineNum":" 1997","line":"            else"},
{"lineNum":" 1998","line":"            {"},
{"lineNum":" 1999","line":"                __parent = static_cast<__parent_pointer>(__nd);","class":"lineNoCov","hits":"0","possible_hits":"32",},
{"lineNum":" 2000","line":"                return *__nd_ptr;"},
{"lineNum":" 2001","line":"            }"},
{"lineNum":" 2002","line":"        }"},
{"lineNum":" 2003","line":"    }"},
{"lineNum":" 2004","line":"    __parent = static_cast<__parent_pointer>(__end_node());","class":"linePartCov","hits":"3","order":"67","possible_hits":"32",},
{"lineNum":" 2005","line":"    return __parent->__left_;"},
{"lineNum":" 2006","line":"}","class":"linePartCov","hits":"3","order":"68","possible_hits":"64",},
{"lineNum":" 2007","line":""},
{"lineNum":" 2008","line":"// Find place to insert if __v doesn\'t exist"},
{"lineNum":" 2009","line":"// First check prior to __hint."},
{"lineNum":" 2010","line":"// Next check after __hint."},
{"lineNum":" 2011","line":"// Next do O(log N) search."},
{"lineNum":" 2012","line":"// Set __parent to parent of null leaf"},
{"lineNum":" 2013","line":"// Return reference to null leaf"},
{"lineNum":" 2014","line":"// If __v exists, set parent to node of __v and return reference to node of __v"},
{"lineNum":" 2015","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2016","line":"template <class _Key>"},
{"lineNum":" 2017","line":"typename __tree<_Tp, _Compare, _Allocator>::__node_base_pointer&"},
{"lineNum":" 2018","line":"__tree<_Tp, _Compare, _Allocator>::__find_equal(const_iterator __hint,"},
{"lineNum":" 2019","line":"                                                __parent_pointer& __parent,"},
{"lineNum":" 2020","line":"                                                __node_base_pointer& __dummy,"},
{"lineNum":" 2021","line":"                                                const _Key& __v)"},
{"lineNum":" 2022","line":"{","class":"linePartCov","hits":"3","order":"396","possible_hits":"21",},
{"lineNum":" 2023","line":"    if (__hint == end() || value_comp()(__v, *__hint))  // check before","class":"linePartCov","hits":"6","order":"398","possible_hits":"42",},
{"lineNum":" 2024","line":"    {"},
{"lineNum":" 2025","line":"        // __v < *__hint"},
{"lineNum":" 2026","line":"        const_iterator __prior = __hint;"},
{"lineNum":" 2027","line":"        if (__prior == begin() || value_comp()(*--__prior, __v))","class":"linePartCov","hits":"6","order":"400","possible_hits":"42",},
{"lineNum":" 2028","line":"        {"},
{"lineNum":" 2029","line":"            // *prev(__hint) < __v < *__hint"},
{"lineNum":" 2030","line":"            if (__hint.__ptr_->__left_ == nullptr)","class":"linePartCov","hits":"3","order":"401","possible_hits":"21",},
{"lineNum":" 2031","line":"            {"},
{"lineNum":" 2032","line":"                __parent = static_cast<__parent_pointer>(__hint.__ptr_);","class":"linePartCov","hits":"3","order":"402","possible_hits":"21",},
{"lineNum":" 2033","line":"                return __parent->__left_;"},
{"lineNum":" 2034","line":"            }"},
{"lineNum":" 2035","line":"            else"},
{"lineNum":" 2036","line":"            {"},
{"lineNum":" 2037","line":"                __parent = static_cast<__parent_pointer>(__prior.__ptr_);","class":"linePartCov","hits":"3","order":"453","possible_hits":"21",},
{"lineNum":" 2038","line":"                return static_cast<__node_base_pointer>(__prior.__ptr_)->__right_;","class":"linePartCov","hits":"3","order":"454","possible_hits":"21",},
{"lineNum":" 2039","line":"            }"},
{"lineNum":" 2040","line":"        }"},
{"lineNum":" 2041","line":"        // __v <= *prev(__hint)"},
{"lineNum":" 2042","line":"        return __find_equal(__parent, __v);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2043","line":"    }"},
{"lineNum":" 2044","line":"    else if (value_comp()(*__hint, __v))  // check after","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":" 2045","line":"    {"},
{"lineNum":" 2046","line":"        // *__hint < __v"},
{"lineNum":" 2047","line":"        const_iterator __next = _VSTD::next(__hint);"},
{"lineNum":" 2048","line":"        if (__next == end() || value_comp()(__v, *__next))","class":"lineNoCov","hits":"0","possible_hits":"42",},
{"lineNum":" 2049","line":"        {"},
{"lineNum":" 2050","line":"            // *__hint < __v < *_VSTD::next(__hint)"},
{"lineNum":" 2051","line":"            if (__hint.__get_np()->__right_ == nullptr)","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":" 2052","line":"            {"},
{"lineNum":" 2053","line":"                __parent = static_cast<__parent_pointer>(__hint.__ptr_);","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":" 2054","line":"                return static_cast<__node_base_pointer>(__hint.__ptr_)->__right_;"},
{"lineNum":" 2055","line":"            }"},
{"lineNum":" 2056","line":"            else"},
{"lineNum":" 2057","line":"            {"},
{"lineNum":" 2058","line":"                __parent = static_cast<__parent_pointer>(__next.__ptr_);","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":" 2059","line":"                return __parent->__left_;"},
{"lineNum":" 2060","line":"            }"},
{"lineNum":" 2061","line":"        }"},
{"lineNum":" 2062","line":"        // *next(__hint) <= __v"},
{"lineNum":" 2063","line":"        return __find_equal(__parent, __v);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2064","line":"    }"},
{"lineNum":" 2065","line":"    // else __v == *__hint"},
{"lineNum":" 2066","line":"    __parent = static_cast<__parent_pointer>(__hint.__ptr_);","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":" 2067","line":"    __dummy = static_cast<__node_base_pointer>(__hint.__ptr_);","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":" 2068","line":"    return __dummy;"},
{"lineNum":" 2069","line":"}","class":"linePartCov","hits":"3","order":"403","possible_hits":"24",},
{"lineNum":" 2070","line":""},
{"lineNum":" 2071","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2072","line":"void __tree<_Tp, _Compare, _Allocator>::__insert_node_at("},
{"lineNum":" 2073","line":"    __parent_pointer __parent, __node_base_pointer& __child,"},
{"lineNum":" 2074","line":"    __node_base_pointer __new_node) _NOEXCEPT"},
{"lineNum":" 2075","line":"{","class":"lineCov","hits":"7","order":"82","possible_hits":"7",},
{"lineNum":" 2076","line":"    __new_node->__left_   = nullptr;"},
{"lineNum":" 2077","line":"    __new_node->__right_  = nullptr;","class":"linePartCov","hits":"7","order":"83","possible_hits":"142",},
{"lineNum":" 2078","line":"    __new_node->__parent_ = __parent;","class":"linePartCov","hits":"7","order":"84","possible_hits":"118",},
{"lineNum":" 2079","line":"    // __new_node->__is_black_ is initialized in __tree_balance_after_insert"},
{"lineNum":" 2080","line":"    __child = __new_node;","class":"linePartCov","hits":"7","order":"85","possible_hits":"118",},
{"lineNum":" 2081","line":"    if (__begin_node()->__left_ != nullptr)","class":"linePartCov","hits":"7","order":"86","possible_hits":"118",},
{"lineNum":" 2082","line":"        __begin_node() = static_cast<__iter_pointer>(__begin_node()->__left_);","class":"linePartCov","hits":"7","order":"87","possible_hits":"118",},
{"lineNum":" 2083","line":"    _VSTD::__tree_balance_after_insert(__end_node()->__left_, __child);","class":"linePartCov","hits":"7","order":"88","possible_hits":"143",},
{"lineNum":" 2084","line":"    ++size();","class":"linePartCov","hits":"7","order":"89","possible_hits":"118",},
{"lineNum":" 2085","line":"}","class":"linePartCov","hits":"7","order":"90","possible_hits":"14",},
{"lineNum":" 2086","line":""},
{"lineNum":" 2087","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2088","line":"template <class _Key, class... _Args>"},
{"lineNum":" 2089","line":"pair<typename __tree<_Tp, _Compare, _Allocator>::iterator, bool>"},
{"lineNum":" 2090","line":"__tree<_Tp, _Compare, _Allocator>::__emplace_unique_key_args(_Key const& __k, _Args&&... __args)"},
{"lineNum":" 2091","line":"{","class":"linePartCov","hits":"3","order":"63","possible_hits":"25",},
{"lineNum":" 2092","line":"    __parent_pointer __parent;"},
{"lineNum":" 2093","line":"    __node_base_pointer& __child = __find_equal(__parent, __k);","class":"linePartCov","hits":"3","order":"64","possible_hits":"28",},
{"lineNum":" 2094","line":"    __node_pointer __r = static_cast<__node_pointer>(__child);","class":"linePartCov","hits":"3","order":"69","possible_hits":"33",},
{"lineNum":" 2095","line":"    bool __inserted = false;"},
{"lineNum":" 2096","line":"    if (__child == nullptr)","class":"linePartCov","hits":"3","order":"70","possible_hits":"37",},
{"lineNum":" 2097","line":"    {"},
{"lineNum":" 2098","line":"        __node_holder __h = __construct_node(_VSTD::forward<_Args>(__args)...);","class":"lineCov","hits":"3","order":"71","possible_hits":"3",},
{"lineNum":" 2099","line":"        __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__h.get()));","class":"linePartCov","hits":"6","order":"80","possible_hits":"31",},
{"lineNum":" 2100","line":"        __r = __h.release();"},
{"lineNum":" 2101","line":"        __inserted = true;"},
{"lineNum":" 2102","line":"    }"},
{"lineNum":" 2103","line":"    return pair<iterator, bool>(iterator(__r), __inserted);"},
{"lineNum":" 2104","line":"}","class":"linePartCov","hits":"3","order":"92","possible_hits":"30",},
{"lineNum":" 2105","line":""},
{"lineNum":" 2106","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2107","line":"template <class _Key, class... _Args>"},
{"lineNum":" 2108","line":"pair<typename __tree<_Tp, _Compare, _Allocator>::iterator, bool>"},
{"lineNum":" 2109","line":"__tree<_Tp, _Compare, _Allocator>::__emplace_hint_unique_key_args("},
{"lineNum":" 2110","line":"    const_iterator __p, _Key const& __k, _Args&&... __args)"},
{"lineNum":" 2111","line":"{","class":"linePartCov","hits":"3","order":"394","possible_hits":"21",},
{"lineNum":" 2112","line":"    __parent_pointer __parent;"},
{"lineNum":" 2113","line":"    __node_base_pointer __dummy;"},
{"lineNum":" 2114","line":"    __node_base_pointer& __child = __find_equal(__p, __parent, __dummy, __k);","class":"linePartCov","hits":"3","order":"395","possible_hits":"24",},
{"lineNum":" 2115","line":"    __node_pointer __r = static_cast<__node_pointer>(__child);","class":"linePartCov","hits":"3","order":"404","possible_hits":"24",},
{"lineNum":" 2116","line":"    bool __inserted = false;"},
{"lineNum":" 2117","line":"    if (__child == nullptr)","class":"linePartCov","hits":"3","order":"405","possible_hits":"24",},
{"lineNum":" 2118","line":"    {"},
{"lineNum":" 2119","line":"        __node_holder __h = __construct_node(_VSTD::forward<_Args>(__args)...);","class":"lineCov","hits":"3","order":"406","possible_hits":"3",},
{"lineNum":" 2120","line":"        __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__h.get()));","class":"linePartCov","hits":"6","order":"407","possible_hits":"27",},
{"lineNum":" 2121","line":"        __r = __h.release();"},
{"lineNum":" 2122","line":"        __inserted = true;"},
{"lineNum":" 2123","line":"    }"},
{"lineNum":" 2124","line":"    return pair<iterator, bool>(iterator(__r), __inserted);"},
{"lineNum":" 2125","line":"}","class":"linePartCov","hits":"3","order":"408","possible_hits":"24",},
{"lineNum":" 2126","line":""},
{"lineNum":" 2127","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2128","line":"template <class ..._Args>"},
{"lineNum":" 2129","line":"typename __tree<_Tp, _Compare, _Allocator>::__node_holder"},
{"lineNum":" 2130","line":"__tree<_Tp, _Compare, _Allocator>::__construct_node(_Args&& ...__args)"},
{"lineNum":" 2131","line":"{","class":"lineCov","hits":"7","order":"72","possible_hits":"7",},
{"lineNum":" 2132","line":"    static_assert(!__is_tree_value_type<_Args...>::value,"},
{"lineNum":" 2133","line":"                  \"Cannot construct from __value_type\");"},
{"lineNum":" 2134","line":"    __node_allocator& __na = __node_alloc();"},
{"lineNum":" 2135","line":"    __node_holder __h(__node_traits::allocate(__na, 1), _Dp(__na));"},
{"lineNum":" 2136","line":"    __node_traits::construct(__na, _NodeTypes::__get_ptr(__h->__value_), _VSTD::forward<_Args>(__args)...);","class":"lineCov","hits":"7","order":"76","possible_hits":"7",},
{"lineNum":" 2137","line":"    __h.get_deleter().__value_constructed = true;","class":"lineCov","hits":"8","order":"78","possible_hits":"8",},
{"lineNum":" 2138","line":"    return __h;"},
{"lineNum":" 2139","line":"}","class":"linePartCov","hits":"7","order":"79","possible_hits":"20",},
{"lineNum":" 2140","line":""},
{"lineNum":" 2141","line":""},
{"lineNum":" 2142","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2143","line":"template <class... _Args>"},
{"lineNum":" 2144","line":"pair<typename __tree<_Tp, _Compare, _Allocator>::iterator, bool>"},
{"lineNum":" 2145","line":"__tree<_Tp, _Compare, _Allocator>::__emplace_unique_impl(_Args&&... __args)"},
{"lineNum":" 2146","line":"{"},
{"lineNum":" 2147","line":"    __node_holder __h = __construct_node(_VSTD::forward<_Args>(__args)...);"},
{"lineNum":" 2148","line":"    __parent_pointer __parent;"},
{"lineNum":" 2149","line":"    __node_base_pointer& __child = __find_equal(__parent, __h->__value_);"},
{"lineNum":" 2150","line":"    __node_pointer __r = static_cast<__node_pointer>(__child);"},
{"lineNum":" 2151","line":"    bool __inserted = false;"},
{"lineNum":" 2152","line":"    if (__child == nullptr)"},
{"lineNum":" 2153","line":"    {"},
{"lineNum":" 2154","line":"        __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__h.get()));"},
{"lineNum":" 2155","line":"        __r = __h.release();"},
{"lineNum":" 2156","line":"        __inserted = true;"},
{"lineNum":" 2157","line":"    }"},
{"lineNum":" 2158","line":"    return pair<iterator, bool>(iterator(__r), __inserted);"},
{"lineNum":" 2159","line":"}"},
{"lineNum":" 2160","line":""},
{"lineNum":" 2161","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2162","line":"template <class... _Args>"},
{"lineNum":" 2163","line":"typename __tree<_Tp, _Compare, _Allocator>::iterator"},
{"lineNum":" 2164","line":"__tree<_Tp, _Compare, _Allocator>::__emplace_hint_unique_impl(const_iterator __p, _Args&&... __args)"},
{"lineNum":" 2165","line":"{"},
{"lineNum":" 2166","line":"    __node_holder __h = __construct_node(_VSTD::forward<_Args>(__args)...);"},
{"lineNum":" 2167","line":"    __parent_pointer __parent;"},
{"lineNum":" 2168","line":"    __node_base_pointer __dummy;"},
{"lineNum":" 2169","line":"    __node_base_pointer& __child = __find_equal(__p, __parent, __dummy, __h->__value_);"},
{"lineNum":" 2170","line":"    __node_pointer __r = static_cast<__node_pointer>(__child);"},
{"lineNum":" 2171","line":"    if (__child == nullptr)"},
{"lineNum":" 2172","line":"    {"},
{"lineNum":" 2173","line":"        __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__h.get()));"},
{"lineNum":" 2174","line":"        __r = __h.release();"},
{"lineNum":" 2175","line":"    }"},
{"lineNum":" 2176","line":"    return iterator(__r);"},
{"lineNum":" 2177","line":"}"},
{"lineNum":" 2178","line":""},
{"lineNum":" 2179","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2180","line":"template <class... _Args>"},
{"lineNum":" 2181","line":"typename __tree<_Tp, _Compare, _Allocator>::iterator"},
{"lineNum":" 2182","line":"__tree<_Tp, _Compare, _Allocator>::__emplace_multi(_Args&&... __args)"},
{"lineNum":" 2183","line":"{","class":"linePartCov","hits":"1","order":"230","possible_hits":"5",},
{"lineNum":" 2184","line":"    __node_holder __h = __construct_node(_VSTD::forward<_Args>(__args)...);","class":"lineCov","hits":"1","order":"231","possible_hits":"1",},
{"lineNum":" 2185","line":"    __parent_pointer __parent;"},
{"lineNum":" 2186","line":"    __node_base_pointer& __child = __find_leaf_high(__parent, _NodeTypes::__get_key(__h->__value_));","class":"lineCov","hits":"1","order":"233","possible_hits":"1",},
{"lineNum":" 2187","line":"    __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__h.get()));","class":"lineCov","hits":"2","order":"238","possible_hits":"2",},
{"lineNum":" 2188","line":"    return iterator(static_cast<__node_pointer>(__h.release()));"},
{"lineNum":" 2189","line":"}","class":"linePartCov","hits":"1","order":"239","possible_hits":"5",},
{"lineNum":" 2190","line":""},
{"lineNum":" 2191","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2192","line":"template <class... _Args>"},
{"lineNum":" 2193","line":"typename __tree<_Tp, _Compare, _Allocator>::iterator"},
{"lineNum":" 2194","line":"__tree<_Tp, _Compare, _Allocator>::__emplace_hint_multi(const_iterator __p,"},
{"lineNum":" 2195","line":"                                                        _Args&&... __args)"},
{"lineNum":" 2196","line":"{"},
{"lineNum":" 2197","line":"    __node_holder __h = __construct_node(_VSTD::forward<_Args>(__args)...);"},
{"lineNum":" 2198","line":"    __parent_pointer __parent;"},
{"lineNum":" 2199","line":"    __node_base_pointer& __child = __find_leaf(__p, __parent, _NodeTypes::__get_key(__h->__value_));"},
{"lineNum":" 2200","line":"    __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__h.get()));"},
{"lineNum":" 2201","line":"    return iterator(static_cast<__node_pointer>(__h.release()));"},
{"lineNum":" 2202","line":"}"},
{"lineNum":" 2203","line":""},
{"lineNum":" 2204","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2205","line":"pair<typename __tree<_Tp, _Compare, _Allocator>::iterator, bool>"},
{"lineNum":" 2206","line":"__tree<_Tp, _Compare, _Allocator>::__node_assign_unique(const __container_value_type& __v, __node_pointer __nd)"},
{"lineNum":" 2207","line":"{"},
{"lineNum":" 2208","line":"    __parent_pointer __parent;"},
{"lineNum":" 2209","line":"    __node_base_pointer& __child = __find_equal(__parent, _NodeTypes::__get_key(__v));"},
{"lineNum":" 2210","line":"    __node_pointer __r = static_cast<__node_pointer>(__child);"},
{"lineNum":" 2211","line":"    bool __inserted = false;"},
{"lineNum":" 2212","line":"    if (__child == nullptr)"},
{"lineNum":" 2213","line":"    {"},
{"lineNum":" 2214","line":"        __nd->__value_ = __v;"},
{"lineNum":" 2215","line":"        __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__nd));"},
{"lineNum":" 2216","line":"        __r = __nd;"},
{"lineNum":" 2217","line":"        __inserted = true;"},
{"lineNum":" 2218","line":"    }"},
{"lineNum":" 2219","line":"    return pair<iterator, bool>(iterator(__r), __inserted);"},
{"lineNum":" 2220","line":"}"},
{"lineNum":" 2221","line":""},
{"lineNum":" 2222","line":""},
{"lineNum":" 2223","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2224","line":"typename __tree<_Tp, _Compare, _Allocator>::iterator"},
{"lineNum":" 2225","line":"__tree<_Tp, _Compare, _Allocator>::__node_insert_multi(__node_pointer __nd)"},
{"lineNum":" 2226","line":"{","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2227","line":"    __parent_pointer __parent;"},
{"lineNum":" 2228","line":"    __node_base_pointer& __child = __find_leaf_high(__parent, _NodeTypes::__get_key(__nd->__value_));"},
{"lineNum":" 2229","line":"    __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__nd));"},
{"lineNum":" 2230","line":"    return iterator(__nd);"},
{"lineNum":" 2231","line":"}","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 2232","line":""},
{"lineNum":" 2233","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2234","line":"typename __tree<_Tp, _Compare, _Allocator>::iterator"},
{"lineNum":" 2235","line":"__tree<_Tp, _Compare, _Allocator>::__node_insert_multi(const_iterator __p,"},
{"lineNum":" 2236","line":"                                                       __node_pointer __nd)"},
{"lineNum":" 2237","line":"{"},
{"lineNum":" 2238","line":"    __parent_pointer __parent;"},
{"lineNum":" 2239","line":"    __node_base_pointer& __child = __find_leaf(__p, __parent, _NodeTypes::__get_key(__nd->__value_));"},
{"lineNum":" 2240","line":"    __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__nd));"},
{"lineNum":" 2241","line":"    return iterator(__nd);"},
{"lineNum":" 2242","line":"}"},
{"lineNum":" 2243","line":""},
{"lineNum":" 2244","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2245","line":"typename __tree<_Tp, _Compare, _Allocator>::iterator"},
{"lineNum":" 2246","line":"__tree<_Tp, _Compare, _Allocator>::__remove_node_pointer(__node_pointer __ptr) _NOEXCEPT"},
{"lineNum":" 2247","line":"{"},
{"lineNum":" 2248","line":"    iterator __r(__ptr);"},
{"lineNum":" 2249","line":"    ++__r;"},
{"lineNum":" 2250","line":"    if (__begin_node() == __ptr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2251","line":"        __begin_node() = __r.__ptr_;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2252","line":"    --size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2253","line":"    _VSTD::__tree_remove(__end_node()->__left_,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2254","line":"                         static_cast<__node_base_pointer>(__ptr));"},
{"lineNum":" 2255","line":"    return __r;"},
{"lineNum":" 2256","line":"}"},
{"lineNum":" 2257","line":""},
{"lineNum":" 2258","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 2259","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2260","line":"template <class _NodeHandle, class _InsertReturnType>"},
{"lineNum":" 2261","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2262","line":"_InsertReturnType"},
{"lineNum":" 2263","line":"__tree<_Tp, _Compare, _Allocator>::__node_handle_insert_unique("},
{"lineNum":" 2264","line":"    _NodeHandle&& __nh)"},
{"lineNum":" 2265","line":"{"},
{"lineNum":" 2266","line":"    if (__nh.empty())"},
{"lineNum":" 2267","line":"        return _InsertReturnType{end(), false, _NodeHandle()};"},
{"lineNum":" 2268","line":""},
{"lineNum":" 2269","line":"    __node_pointer __ptr = __nh.__ptr_;"},
{"lineNum":" 2270","line":"    __parent_pointer __parent;"},
{"lineNum":" 2271","line":"    __node_base_pointer& __child = __find_equal(__parent,"},
{"lineNum":" 2272","line":"                                                __ptr->__value_);"},
{"lineNum":" 2273","line":"    if (__child != nullptr)"},
{"lineNum":" 2274","line":"        return _InsertReturnType{"},
{"lineNum":" 2275","line":"            iterator(static_cast<__node_pointer>(__child)),"},
{"lineNum":" 2276","line":"            false, _VSTD::move(__nh)};"},
{"lineNum":" 2277","line":""},
{"lineNum":" 2278","line":"    __insert_node_at(__parent, __child,"},
{"lineNum":" 2279","line":"                     static_cast<__node_base_pointer>(__ptr));"},
{"lineNum":" 2280","line":"    __nh.__release_ptr();"},
{"lineNum":" 2281","line":"    return _InsertReturnType{iterator(__ptr), true, _NodeHandle()};"},
{"lineNum":" 2282","line":"}"},
{"lineNum":" 2283","line":""},
{"lineNum":" 2284","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2285","line":"template <class _NodeHandle>"},
{"lineNum":" 2286","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2287","line":"typename __tree<_Tp, _Compare, _Allocator>::iterator"},
{"lineNum":" 2288","line":"__tree<_Tp, _Compare, _Allocator>::__node_handle_insert_unique("},
{"lineNum":" 2289","line":"    const_iterator __hint, _NodeHandle&& __nh)"},
{"lineNum":" 2290","line":"{"},
{"lineNum":" 2291","line":"    if (__nh.empty())"},
{"lineNum":" 2292","line":"        return end();"},
{"lineNum":" 2293","line":""},
{"lineNum":" 2294","line":"    __node_pointer __ptr = __nh.__ptr_;"},
{"lineNum":" 2295","line":"    __parent_pointer __parent;"},
{"lineNum":" 2296","line":"    __node_base_pointer __dummy;"},
{"lineNum":" 2297","line":"    __node_base_pointer& __child = __find_equal(__hint, __parent, __dummy,"},
{"lineNum":" 2298","line":"                                                __ptr->__value_);"},
{"lineNum":" 2299","line":"    __node_pointer __r = static_cast<__node_pointer>(__child);"},
{"lineNum":" 2300","line":"    if (__child == nullptr)"},
{"lineNum":" 2301","line":"    {"},
{"lineNum":" 2302","line":"        __insert_node_at(__parent, __child,"},
{"lineNum":" 2303","line":"                         static_cast<__node_base_pointer>(__ptr));"},
{"lineNum":" 2304","line":"        __r = __ptr;"},
{"lineNum":" 2305","line":"        __nh.__release_ptr();"},
{"lineNum":" 2306","line":"    }"},
{"lineNum":" 2307","line":"    return iterator(__r);"},
{"lineNum":" 2308","line":"}"},
{"lineNum":" 2309","line":""},
{"lineNum":" 2310","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2311","line":"template <class _NodeHandle>"},
{"lineNum":" 2312","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2313","line":"_NodeHandle"},
{"lineNum":" 2314","line":"__tree<_Tp, _Compare, _Allocator>::__node_handle_extract(key_type const& __key)"},
{"lineNum":" 2315","line":"{"},
{"lineNum":" 2316","line":"    iterator __it = find(__key);"},
{"lineNum":" 2317","line":"    if (__it == end())"},
{"lineNum":" 2318","line":"        return _NodeHandle();"},
{"lineNum":" 2319","line":"    return __node_handle_extract<_NodeHandle>(__it);"},
{"lineNum":" 2320","line":"}"},
{"lineNum":" 2321","line":""},
{"lineNum":" 2322","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2323","line":"template <class _NodeHandle>"},
{"lineNum":" 2324","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2325","line":"_NodeHandle"},
{"lineNum":" 2326","line":"__tree<_Tp, _Compare, _Allocator>::__node_handle_extract(const_iterator __p)"},
{"lineNum":" 2327","line":"{"},
{"lineNum":" 2328","line":"    __node_pointer __np = __p.__get_np();"},
{"lineNum":" 2329","line":"    __remove_node_pointer(__np);"},
{"lineNum":" 2330","line":"    return _NodeHandle(__np, __alloc());"},
{"lineNum":" 2331","line":"}"},
{"lineNum":" 2332","line":""},
{"lineNum":" 2333","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2334","line":"template <class _Tree>"},
{"lineNum":" 2335","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2336","line":"void"},
{"lineNum":" 2337","line":"__tree<_Tp, _Compare, _Allocator>::__node_handle_merge_unique(_Tree& __source)"},
{"lineNum":" 2338","line":"{"},
{"lineNum":" 2339","line":"    static_assert(is_same<typename _Tree::__node_pointer, __node_pointer>::value, \"\");"},
{"lineNum":" 2340","line":""},
{"lineNum":" 2341","line":"    for (typename _Tree::iterator __i = __source.begin();"},
{"lineNum":" 2342","line":"         __i != __source.end();)"},
{"lineNum":" 2343","line":"    {"},
{"lineNum":" 2344","line":"        __node_pointer __src_ptr = __i.__get_np();"},
{"lineNum":" 2345","line":"        __parent_pointer __parent;"},
{"lineNum":" 2346","line":"        __node_base_pointer& __child ="},
{"lineNum":" 2347","line":"            __find_equal(__parent, _NodeTypes::__get_key(__src_ptr->__value_));"},
{"lineNum":" 2348","line":"        ++__i;"},
{"lineNum":" 2349","line":"        if (__child != nullptr)"},
{"lineNum":" 2350","line":"            continue;"},
{"lineNum":" 2351","line":"        __source.__remove_node_pointer(__src_ptr);"},
{"lineNum":" 2352","line":"        __insert_node_at(__parent, __child,"},
{"lineNum":" 2353","line":"                         static_cast<__node_base_pointer>(__src_ptr));"},
{"lineNum":" 2354","line":"    }"},
{"lineNum":" 2355","line":"}"},
{"lineNum":" 2356","line":""},
{"lineNum":" 2357","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2358","line":"template <class _NodeHandle>"},
{"lineNum":" 2359","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2360","line":"typename __tree<_Tp, _Compare, _Allocator>::iterator"},
{"lineNum":" 2361","line":"__tree<_Tp, _Compare, _Allocator>::__node_handle_insert_multi(_NodeHandle&& __nh)"},
{"lineNum":" 2362","line":"{"},
{"lineNum":" 2363","line":"    if (__nh.empty())"},
{"lineNum":" 2364","line":"        return end();"},
{"lineNum":" 2365","line":"    __node_pointer __ptr = __nh.__ptr_;"},
{"lineNum":" 2366","line":"    __parent_pointer __parent;"},
{"lineNum":" 2367","line":"    __node_base_pointer& __child = __find_leaf_high("},
{"lineNum":" 2368","line":"        __parent, _NodeTypes::__get_key(__ptr->__value_));"},
{"lineNum":" 2369","line":"    __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__ptr));"},
{"lineNum":" 2370","line":"    __nh.__release_ptr();"},
{"lineNum":" 2371","line":"    return iterator(__ptr);"},
{"lineNum":" 2372","line":"}"},
{"lineNum":" 2373","line":""},
{"lineNum":" 2374","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2375","line":"template <class _NodeHandle>"},
{"lineNum":" 2376","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2377","line":"typename __tree<_Tp, _Compare, _Allocator>::iterator"},
{"lineNum":" 2378","line":"__tree<_Tp, _Compare, _Allocator>::__node_handle_insert_multi("},
{"lineNum":" 2379","line":"    const_iterator __hint, _NodeHandle&& __nh)"},
{"lineNum":" 2380","line":"{"},
{"lineNum":" 2381","line":"    if (__nh.empty())"},
{"lineNum":" 2382","line":"        return end();"},
{"lineNum":" 2383","line":""},
{"lineNum":" 2384","line":"    __node_pointer __ptr = __nh.__ptr_;"},
{"lineNum":" 2385","line":"    __parent_pointer __parent;"},
{"lineNum":" 2386","line":"    __node_base_pointer& __child = __find_leaf(__hint, __parent,"},
{"lineNum":" 2387","line":"                                               _NodeTypes::__get_key(__ptr->__value_));"},
{"lineNum":" 2388","line":"    __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__ptr));"},
{"lineNum":" 2389","line":"    __nh.__release_ptr();"},
{"lineNum":" 2390","line":"    return iterator(__ptr);"},
{"lineNum":" 2391","line":"}"},
{"lineNum":" 2392","line":""},
{"lineNum":" 2393","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2394","line":"template <class _Tree>"},
{"lineNum":" 2395","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2396","line":"void"},
{"lineNum":" 2397","line":"__tree<_Tp, _Compare, _Allocator>::__node_handle_merge_multi(_Tree& __source)"},
{"lineNum":" 2398","line":"{"},
{"lineNum":" 2399","line":"    static_assert(is_same<typename _Tree::__node_pointer, __node_pointer>::value, \"\");"},
{"lineNum":" 2400","line":""},
{"lineNum":" 2401","line":"    for (typename _Tree::iterator __i = __source.begin();"},
{"lineNum":" 2402","line":"         __i != __source.end();)"},
{"lineNum":" 2403","line":"    {"},
{"lineNum":" 2404","line":"        __node_pointer __src_ptr = __i.__get_np();"},
{"lineNum":" 2405","line":"        __parent_pointer __parent;"},
{"lineNum":" 2406","line":"        __node_base_pointer& __child = __find_leaf_high("},
{"lineNum":" 2407","line":"            __parent, _NodeTypes::__get_key(__src_ptr->__value_));"},
{"lineNum":" 2408","line":"        ++__i;"},
{"lineNum":" 2409","line":"        __source.__remove_node_pointer(__src_ptr);"},
{"lineNum":" 2410","line":"        __insert_node_at(__parent, __child,"},
{"lineNum":" 2411","line":"                         static_cast<__node_base_pointer>(__src_ptr));"},
{"lineNum":" 2412","line":"    }"},
{"lineNum":" 2413","line":"}"},
{"lineNum":" 2414","line":""},
{"lineNum":" 2415","line":"#endif // _LIBCPP_STD_VER > 14"},
{"lineNum":" 2416","line":""},
{"lineNum":" 2417","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2418","line":"typename __tree<_Tp, _Compare, _Allocator>::iterator"},
{"lineNum":" 2419","line":"__tree<_Tp, _Compare, _Allocator>::erase(const_iterator __p)"},
{"lineNum":" 2420","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2421","line":"    __node_pointer __np = __p.__get_np();"},
{"lineNum":" 2422","line":"    iterator __r = __remove_node_pointer(__np);"},
{"lineNum":" 2423","line":"    __node_allocator& __na = __node_alloc();"},
{"lineNum":" 2424","line":"    __node_traits::destroy(__na, _NodeTypes::__get_ptr("},
{"lineNum":" 2425","line":"        const_cast<__node_value_type&>(*__p)));"},
{"lineNum":" 2426","line":"    __node_traits::deallocate(__na, __np, 1);"},
{"lineNum":" 2427","line":"    return __r;"},
{"lineNum":" 2428","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2429","line":""},
{"lineNum":" 2430","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2431","line":"typename __tree<_Tp, _Compare, _Allocator>::iterator"},
{"lineNum":" 2432","line":"__tree<_Tp, _Compare, _Allocator>::erase(const_iterator __f, const_iterator __l)"},
{"lineNum":" 2433","line":"{"},
{"lineNum":" 2434","line":"    while (__f != __l)"},
{"lineNum":" 2435","line":"        __f = erase(__f);"},
{"lineNum":" 2436","line":"    return iterator(__l.__ptr_);"},
{"lineNum":" 2437","line":"}"},
{"lineNum":" 2438","line":""},
{"lineNum":" 2439","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2440","line":"template <class _Key>"},
{"lineNum":" 2441","line":"typename __tree<_Tp, _Compare, _Allocator>::size_type"},
{"lineNum":" 2442","line":"__tree<_Tp, _Compare, _Allocator>::__erase_unique(const _Key& __k)"},
{"lineNum":" 2443","line":"{"},
{"lineNum":" 2444","line":"    iterator __i = find(__k);"},
{"lineNum":" 2445","line":"    if (__i == end())"},
{"lineNum":" 2446","line":"        return 0;"},
{"lineNum":" 2447","line":"    erase(__i);"},
{"lineNum":" 2448","line":"    return 1;"},
{"lineNum":" 2449","line":"}"},
{"lineNum":" 2450","line":""},
{"lineNum":" 2451","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2452","line":"template <class _Key>"},
{"lineNum":" 2453","line":"typename __tree<_Tp, _Compare, _Allocator>::size_type"},
{"lineNum":" 2454","line":"__tree<_Tp, _Compare, _Allocator>::__erase_multi(const _Key& __k)"},
{"lineNum":" 2455","line":"{"},
{"lineNum":" 2456","line":"    pair<iterator, iterator> __p = __equal_range_multi(__k);"},
{"lineNum":" 2457","line":"    size_type __r = 0;"},
{"lineNum":" 2458","line":"    for (; __p.first != __p.second; ++__r)"},
{"lineNum":" 2459","line":"        __p.first = erase(__p.first);"},
{"lineNum":" 2460","line":"    return __r;"},
{"lineNum":" 2461","line":"}"},
{"lineNum":" 2462","line":""},
{"lineNum":" 2463","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2464","line":"template <class _Key>"},
{"lineNum":" 2465","line":"typename __tree<_Tp, _Compare, _Allocator>::iterator"},
{"lineNum":" 2466","line":"__tree<_Tp, _Compare, _Allocator>::find(const _Key& __v)"},
{"lineNum":" 2467","line":"{","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2468","line":"    iterator __p = __lower_bound(__v, __root(), __end_node());"},
{"lineNum":" 2469","line":"    if (__p != end() && !value_comp()(__v, *__p))","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 2470","line":"        return __p;"},
{"lineNum":" 2471","line":"    return end();"},
{"lineNum":" 2472","line":"}","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 2473","line":""},
{"lineNum":" 2474","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2475","line":"template <class _Key>"},
{"lineNum":" 2476","line":"typename __tree<_Tp, _Compare, _Allocator>::const_iterator"},
{"lineNum":" 2477","line":"__tree<_Tp, _Compare, _Allocator>::find(const _Key& __v) const"},
{"lineNum":" 2478","line":"{","class":"lineNoCov","hits":"0","possible_hits":"17",},
{"lineNum":" 2479","line":"    const_iterator __p = __lower_bound(__v, __root(), __end_node());","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2480","line":"    if (__p != end() && !value_comp()(__v, *__p))","class":"lineNoCov","hits":"0","possible_hits":"46",},
{"lineNum":" 2481","line":"        return __p;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 2482","line":"    return end();","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 2483","line":"}","class":"lineNoCov","hits":"0","possible_hits":"34",},
{"lineNum":" 2484","line":""},
{"lineNum":" 2485","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2486","line":"template <class _Key>"},
{"lineNum":" 2487","line":"typename __tree<_Tp, _Compare, _Allocator>::size_type"},
{"lineNum":" 2488","line":"__tree<_Tp, _Compare, _Allocator>::__count_unique(const _Key& __k) const"},
{"lineNum":" 2489","line":"{","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2490","line":"    __node_pointer __rt = __root();"},
{"lineNum":" 2491","line":"    while (__rt != nullptr)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 2492","line":"    {"},
{"lineNum":" 2493","line":"        if (value_comp()(__k, __rt->__value_))","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2494","line":"        {"},
{"lineNum":" 2495","line":"            __rt = static_cast<__node_pointer>(__rt->__left_);"},
{"lineNum":" 2496","line":"        }"},
{"lineNum":" 2497","line":"        else if (value_comp()(__rt->__value_, __k))","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2498","line":"            __rt = static_cast<__node_pointer>(__rt->__right_);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2499","line":"        else"},
{"lineNum":" 2500","line":"            return 1;"},
{"lineNum":" 2501","line":"    }"},
{"lineNum":" 2502","line":"    return 0;"},
{"lineNum":" 2503","line":"}","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 2504","line":""},
{"lineNum":" 2505","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2506","line":"template <class _Key>"},
{"lineNum":" 2507","line":"typename __tree<_Tp, _Compare, _Allocator>::size_type"},
{"lineNum":" 2508","line":"__tree<_Tp, _Compare, _Allocator>::__count_multi(const _Key& __k) const"},
{"lineNum":" 2509","line":"{"},
{"lineNum":" 2510","line":"    __iter_pointer __result = __end_node();"},
{"lineNum":" 2511","line":"    __node_pointer __rt = __root();"},
{"lineNum":" 2512","line":"    while (__rt != nullptr)"},
{"lineNum":" 2513","line":"    {"},
{"lineNum":" 2514","line":"        if (value_comp()(__k, __rt->__value_))"},
{"lineNum":" 2515","line":"        {"},
{"lineNum":" 2516","line":"            __result = static_cast<__iter_pointer>(__rt);"},
{"lineNum":" 2517","line":"            __rt = static_cast<__node_pointer>(__rt->__left_);"},
{"lineNum":" 2518","line":"        }"},
{"lineNum":" 2519","line":"        else if (value_comp()(__rt->__value_, __k))"},
{"lineNum":" 2520","line":"            __rt = static_cast<__node_pointer>(__rt->__right_);"},
{"lineNum":" 2521","line":"        else"},
{"lineNum":" 2522","line":"            return _VSTD::distance("},
{"lineNum":" 2523","line":"                __lower_bound(__k, static_cast<__node_pointer>(__rt->__left_), static_cast<__iter_pointer>(__rt)),"},
{"lineNum":" 2524","line":"                __upper_bound(__k, static_cast<__node_pointer>(__rt->__right_), __result)"},
{"lineNum":" 2525","line":"            );"},
{"lineNum":" 2526","line":"    }"},
{"lineNum":" 2527","line":"    return 0;"},
{"lineNum":" 2528","line":"}"},
{"lineNum":" 2529","line":""},
{"lineNum":" 2530","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2531","line":"template <class _Key>"},
{"lineNum":" 2532","line":"typename __tree<_Tp, _Compare, _Allocator>::iterator"},
{"lineNum":" 2533","line":"__tree<_Tp, _Compare, _Allocator>::__lower_bound(const _Key& __v,"},
{"lineNum":" 2534","line":"                                                 __node_pointer __root,"},
{"lineNum":" 2535","line":"                                                 __iter_pointer __result)"},
{"lineNum":" 2536","line":"{","class":"linePartCov","hits":"3","order":"18","possible_hits":"4",},
{"lineNum":" 2537","line":"    while (__root != nullptr)","class":"linePartCov","hits":"12","order":"19","possible_hits":"284",},
{"lineNum":" 2538","line":"    {"},
{"lineNum":" 2539","line":"        if (!value_comp()(__root->__value_, __v))","class":"linePartCov","hits":"6","order":"414","possible_hits":"199",},
{"lineNum":" 2540","line":"        {"},
{"lineNum":" 2541","line":"            __result = static_cast<__iter_pointer>(__root);","class":"linePartCov","hits":"6","order":"455","possible_hits":"7",},
{"lineNum":" 2542","line":"            __root = static_cast<__node_pointer>(__root->__left_);"},
{"lineNum":" 2543","line":"        }"},
{"lineNum":" 2544","line":"        else"},
{"lineNum":" 2545","line":"            __root = static_cast<__node_pointer>(__root->__right_);","class":"linePartCov","hits":"6","order":"415","possible_hits":"7",},
{"lineNum":" 2546","line":"    }"},
{"lineNum":" 2547","line":"    return iterator(__result);","class":"linePartCov","hits":"3","order":"20","possible_hits":"8",},
{"lineNum":" 2548","line":"}"},
{"lineNum":" 2549","line":""},
{"lineNum":" 2550","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2551","line":"template <class _Key>"},
{"lineNum":" 2552","line":"typename __tree<_Tp, _Compare, _Allocator>::const_iterator"},
{"lineNum":" 2553","line":"__tree<_Tp, _Compare, _Allocator>::__lower_bound(const _Key& __v,"},
{"lineNum":" 2554","line":"                                                 __node_pointer __root,"},
{"lineNum":" 2555","line":"                                                 __iter_pointer __result) const"},
{"lineNum":" 2556","line":"{","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2557","line":"    while (__root != nullptr)","class":"lineNoCov","hits":"0","possible_hits":"46",},
{"lineNum":" 2558","line":"    {"},
{"lineNum":" 2559","line":"        if (!value_comp()(__root->__value_, __v))","class":"lineNoCov","hits":"0","possible_hits":"34",},
{"lineNum":" 2560","line":"        {"},
{"lineNum":" 2561","line":"            __result = static_cast<__iter_pointer>(__root);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 2562","line":"            __root = static_cast<__node_pointer>(__root->__left_);"},
{"lineNum":" 2563","line":"        }"},
{"lineNum":" 2564","line":"        else"},
{"lineNum":" 2565","line":"            __root = static_cast<__node_pointer>(__root->__right_);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 2566","line":"    }"},
{"lineNum":" 2567","line":"    return const_iterator(__result);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 2568","line":"}"},
{"lineNum":" 2569","line":""},
{"lineNum":" 2570","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2571","line":"template <class _Key>"},
{"lineNum":" 2572","line":"typename __tree<_Tp, _Compare, _Allocator>::iterator"},
{"lineNum":" 2573","line":"__tree<_Tp, _Compare, _Allocator>::__upper_bound(const _Key& __v,"},
{"lineNum":" 2574","line":"                                                 __node_pointer __root,"},
{"lineNum":" 2575","line":"                                                 __iter_pointer __result)"},
{"lineNum":" 2576","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2577","line":"    while (__root != nullptr)","class":"lineNoCov","hits":"0","possible_hits":"50",},
{"lineNum":" 2578","line":"    {"},
{"lineNum":" 2579","line":"        if (value_comp()(__v, __root->__value_))","class":"lineNoCov","hits":"0","possible_hits":"25",},
{"lineNum":" 2580","line":"        {"},
{"lineNum":" 2581","line":"            __result = static_cast<__iter_pointer>(__root);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2582","line":"            __root = static_cast<__node_pointer>(__root->__left_);"},
{"lineNum":" 2583","line":"        }"},
{"lineNum":" 2584","line":"        else"},
{"lineNum":" 2585","line":"            __root = static_cast<__node_pointer>(__root->__right_);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2586","line":"    }"},
{"lineNum":" 2587","line":"    return iterator(__result);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2588","line":"}"},
{"lineNum":" 2589","line":""},
{"lineNum":" 2590","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2591","line":"template <class _Key>"},
{"lineNum":" 2592","line":"typename __tree<_Tp, _Compare, _Allocator>::const_iterator"},
{"lineNum":" 2593","line":"__tree<_Tp, _Compare, _Allocator>::__upper_bound(const _Key& __v,"},
{"lineNum":" 2594","line":"                                                 __node_pointer __root,"},
{"lineNum":" 2595","line":"                                                 __iter_pointer __result) const"},
{"lineNum":" 2596","line":"{"},
{"lineNum":" 2597","line":"    while (__root != nullptr)"},
{"lineNum":" 2598","line":"    {"},
{"lineNum":" 2599","line":"        if (value_comp()(__v, __root->__value_))"},
{"lineNum":" 2600","line":"        {"},
{"lineNum":" 2601","line":"            __result = static_cast<__iter_pointer>(__root);"},
{"lineNum":" 2602","line":"            __root = static_cast<__node_pointer>(__root->__left_);"},
{"lineNum":" 2603","line":"        }"},
{"lineNum":" 2604","line":"        else"},
{"lineNum":" 2605","line":"            __root = static_cast<__node_pointer>(__root->__right_);"},
{"lineNum":" 2606","line":"    }"},
{"lineNum":" 2607","line":"    return const_iterator(__result);"},
{"lineNum":" 2608","line":"}"},
{"lineNum":" 2609","line":""},
{"lineNum":" 2610","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2611","line":"template <class _Key>"},
{"lineNum":" 2612","line":"pair<typename __tree<_Tp, _Compare, _Allocator>::iterator,"},
{"lineNum":" 2613","line":"     typename __tree<_Tp, _Compare, _Allocator>::iterator>"},
{"lineNum":" 2614","line":"__tree<_Tp, _Compare, _Allocator>::__equal_range_unique(const _Key& __k)"},
{"lineNum":" 2615","line":"{"},
{"lineNum":" 2616","line":"    typedef pair<iterator, iterator> _Pp;"},
{"lineNum":" 2617","line":"    __iter_pointer __result = __end_node();"},
{"lineNum":" 2618","line":"    __node_pointer __rt = __root();"},
{"lineNum":" 2619","line":"    while (__rt != nullptr)"},
{"lineNum":" 2620","line":"    {"},
{"lineNum":" 2621","line":"        if (value_comp()(__k, __rt->__value_))"},
{"lineNum":" 2622","line":"        {"},
{"lineNum":" 2623","line":"            __result = static_cast<__iter_pointer>(__rt);"},
{"lineNum":" 2624","line":"            __rt = static_cast<__node_pointer>(__rt->__left_);"},
{"lineNum":" 2625","line":"        }"},
{"lineNum":" 2626","line":"        else if (value_comp()(__rt->__value_, __k))"},
{"lineNum":" 2627","line":"            __rt = static_cast<__node_pointer>(__rt->__right_);"},
{"lineNum":" 2628","line":"        else"},
{"lineNum":" 2629","line":"            return _Pp(iterator(__rt),"},
{"lineNum":" 2630","line":"                      iterator("},
{"lineNum":" 2631","line":"                          __rt->__right_ != nullptr ?"},
{"lineNum":" 2632","line":"                              static_cast<__iter_pointer>(_VSTD::__tree_min(__rt->__right_))"},
{"lineNum":" 2633","line":"                            : __result));"},
{"lineNum":" 2634","line":"    }"},
{"lineNum":" 2635","line":"    return _Pp(iterator(__result), iterator(__result));"},
{"lineNum":" 2636","line":"}"},
{"lineNum":" 2637","line":""},
{"lineNum":" 2638","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2639","line":"template <class _Key>"},
{"lineNum":" 2640","line":"pair<typename __tree<_Tp, _Compare, _Allocator>::const_iterator,"},
{"lineNum":" 2641","line":"     typename __tree<_Tp, _Compare, _Allocator>::const_iterator>"},
{"lineNum":" 2642","line":"__tree<_Tp, _Compare, _Allocator>::__equal_range_unique(const _Key& __k) const"},
{"lineNum":" 2643","line":"{"},
{"lineNum":" 2644","line":"    typedef pair<const_iterator, const_iterator> _Pp;"},
{"lineNum":" 2645","line":"    __iter_pointer __result = __end_node();"},
{"lineNum":" 2646","line":"    __node_pointer __rt = __root();"},
{"lineNum":" 2647","line":"    while (__rt != nullptr)"},
{"lineNum":" 2648","line":"    {"},
{"lineNum":" 2649","line":"        if (value_comp()(__k, __rt->__value_))"},
{"lineNum":" 2650","line":"        {"},
{"lineNum":" 2651","line":"            __result = static_cast<__iter_pointer>(__rt);"},
{"lineNum":" 2652","line":"            __rt = static_cast<__node_pointer>(__rt->__left_);"},
{"lineNum":" 2653","line":"        }"},
{"lineNum":" 2654","line":"        else if (value_comp()(__rt->__value_, __k))"},
{"lineNum":" 2655","line":"            __rt = static_cast<__node_pointer>(__rt->__right_);"},
{"lineNum":" 2656","line":"        else"},
{"lineNum":" 2657","line":"            return _Pp(const_iterator(__rt),"},
{"lineNum":" 2658","line":"                      const_iterator("},
{"lineNum":" 2659","line":"                          __rt->__right_ != nullptr ?"},
{"lineNum":" 2660","line":"                              static_cast<__iter_pointer>(_VSTD::__tree_min(__rt->__right_))"},
{"lineNum":" 2661","line":"                            : __result));"},
{"lineNum":" 2662","line":"    }"},
{"lineNum":" 2663","line":"    return _Pp(const_iterator(__result), const_iterator(__result));"},
{"lineNum":" 2664","line":"}"},
{"lineNum":" 2665","line":""},
{"lineNum":" 2666","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2667","line":"template <class _Key>"},
{"lineNum":" 2668","line":"pair<typename __tree<_Tp, _Compare, _Allocator>::iterator,"},
{"lineNum":" 2669","line":"     typename __tree<_Tp, _Compare, _Allocator>::iterator>"},
{"lineNum":" 2670","line":"__tree<_Tp, _Compare, _Allocator>::__equal_range_multi(const _Key& __k)"},
{"lineNum":" 2671","line":"{","class":"lineCov","hits":"1","order":"344","possible_hits":"1",},
{"lineNum":" 2672","line":"    typedef pair<iterator, iterator> _Pp;"},
{"lineNum":" 2673","line":"    __iter_pointer __result = __end_node();"},
{"lineNum":" 2674","line":"    __node_pointer __rt = __root();"},
{"lineNum":" 2675","line":"    while (__rt != nullptr)","class":"linePartCov","hits":"2","order":"345","possible_hits":"26",},
{"lineNum":" 2676","line":"    {"},
{"lineNum":" 2677","line":"        if (value_comp()(__k, __rt->__value_))","class":"linePartCov","hits":"1","order":"349","possible_hits":"25",},
{"lineNum":" 2678","line":"        {"},
{"lineNum":" 2679","line":"            __result = static_cast<__iter_pointer>(__rt);","class":"lineCov","hits":"1","order":"350","possible_hits":"1",},
{"lineNum":" 2680","line":"            __rt = static_cast<__node_pointer>(__rt->__left_);","class":"lineCov","hits":"1","order":"351","possible_hits":"1",},
{"lineNum":" 2681","line":"        }"},
{"lineNum":" 2682","line":"        else if (value_comp()(__rt->__value_, __k))","class":"linePartCov","hits":"1","order":"516","possible_hits":"25",},
{"lineNum":" 2683","line":"            __rt = static_cast<__node_pointer>(__rt->__right_);","class":"linePartCov","hits":"1","order":"517","possible_hits":"25",},
{"lineNum":" 2684","line":"        else"},
{"lineNum":" 2685","line":"            return _Pp(__lower_bound(__k, static_cast<__node_pointer>(__rt->__left_), static_cast<__iter_pointer>(__rt)),","class":"lineNoCov","hits":"0","possible_hits":"25",},
{"lineNum":" 2686","line":"                      __upper_bound(__k, static_cast<__node_pointer>(__rt->__right_), __result));","class":"lineNoCov","hits":"0","possible_hits":"25",},
{"lineNum":" 2687","line":"    }"},
{"lineNum":" 2688","line":"    return _Pp(iterator(__result), iterator(__result));","class":"lineCov","hits":"1","order":"352","possible_hits":"1",},
{"lineNum":" 2689","line":"}","class":"linePartCov","hits":"1","order":"353","possible_hits":"2",},
{"lineNum":" 2690","line":""},
{"lineNum":" 2691","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2692","line":"template <class _Key>"},
{"lineNum":" 2693","line":"pair<typename __tree<_Tp, _Compare, _Allocator>::const_iterator,"},
{"lineNum":" 2694","line":"     typename __tree<_Tp, _Compare, _Allocator>::const_iterator>"},
{"lineNum":" 2695","line":"__tree<_Tp, _Compare, _Allocator>::__equal_range_multi(const _Key& __k) const"},
{"lineNum":" 2696","line":"{"},
{"lineNum":" 2697","line":"    typedef pair<const_iterator, const_iterator> _Pp;"},
{"lineNum":" 2698","line":"    __iter_pointer __result = __end_node();"},
{"lineNum":" 2699","line":"    __node_pointer __rt = __root();"},
{"lineNum":" 2700","line":"    while (__rt != nullptr)"},
{"lineNum":" 2701","line":"    {"},
{"lineNum":" 2702","line":"        if (value_comp()(__k, __rt->__value_))"},
{"lineNum":" 2703","line":"        {"},
{"lineNum":" 2704","line":"            __result = static_cast<__iter_pointer>(__rt);"},
{"lineNum":" 2705","line":"            __rt = static_cast<__node_pointer>(__rt->__left_);"},
{"lineNum":" 2706","line":"        }"},
{"lineNum":" 2707","line":"        else if (value_comp()(__rt->__value_, __k))"},
{"lineNum":" 2708","line":"            __rt = static_cast<__node_pointer>(__rt->__right_);"},
{"lineNum":" 2709","line":"        else"},
{"lineNum":" 2710","line":"            return _Pp(__lower_bound(__k, static_cast<__node_pointer>(__rt->__left_), static_cast<__iter_pointer>(__rt)),"},
{"lineNum":" 2711","line":"                      __upper_bound(__k, static_cast<__node_pointer>(__rt->__right_), __result));"},
{"lineNum":" 2712","line":"    }"},
{"lineNum":" 2713","line":"    return _Pp(const_iterator(__result), const_iterator(__result));"},
{"lineNum":" 2714","line":"}"},
{"lineNum":" 2715","line":""},
{"lineNum":" 2716","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2717","line":"typename __tree<_Tp, _Compare, _Allocator>::__node_holder"},
{"lineNum":" 2718","line":"__tree<_Tp, _Compare, _Allocator>::remove(const_iterator __p) _NOEXCEPT"},
{"lineNum":" 2719","line":"{"},
{"lineNum":" 2720","line":"    __node_pointer __np = __p.__get_np();"},
{"lineNum":" 2721","line":"    if (__begin_node() == __p.__ptr_)"},
{"lineNum":" 2722","line":"    {"},
{"lineNum":" 2723","line":"        if (__np->__right_ != nullptr)"},
{"lineNum":" 2724","line":"            __begin_node() = static_cast<__iter_pointer>(__np->__right_);"},
{"lineNum":" 2725","line":"        else"},
{"lineNum":" 2726","line":"            __begin_node() = static_cast<__iter_pointer>(__np->__parent_);"},
{"lineNum":" 2727","line":"    }"},
{"lineNum":" 2728","line":"    --size();"},
{"lineNum":" 2729","line":"    _VSTD::__tree_remove(__end_node()->__left_,"},
{"lineNum":" 2730","line":"                         static_cast<__node_base_pointer>(__np));"},
{"lineNum":" 2731","line":"    return __node_holder(__np, _Dp(__node_alloc(), true));"},
{"lineNum":" 2732","line":"}"},
{"lineNum":" 2733","line":""},
{"lineNum":" 2734","line":"template <class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2735","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2736","line":"void"},
{"lineNum":" 2737","line":"swap(__tree<_Tp, _Compare, _Allocator>& __x,"},
{"lineNum":" 2738","line":"     __tree<_Tp, _Compare, _Allocator>& __y)"},
{"lineNum":" 2739","line":"    _NOEXCEPT_(_NOEXCEPT_(__x.swap(__y)))"},
{"lineNum":" 2740","line":"{"},
{"lineNum":" 2741","line":"    __x.swap(__y);"},
{"lineNum":" 2742","line":"}"},
{"lineNum":" 2743","line":""},
{"lineNum":" 2744","line":"_LIBCPP_END_NAMESPACE_STD"},
{"lineNum":" 2745","line":""},
{"lineNum":" 2746","line":"_LIBCPP_POP_MACROS"},
{"lineNum":" 2747","line":""},
{"lineNum":" 2748","line":"#endif // _LIBCPP___TREE"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 331, "covered" : 153,};
var merged_data = [];
