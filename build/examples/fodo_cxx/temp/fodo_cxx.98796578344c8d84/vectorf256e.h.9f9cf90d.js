var data = {lines:[
{"lineNum":"    1","line":"/****************************  vectorf256e.h   *******************************"},
{"lineNum":"    2","line":"* Author:        Agner Fog"},
{"lineNum":"    3","line":"* Date created:  2012-05-30"},
{"lineNum":"    4","line":"* Last modified: 2019-08-01"},
{"lineNum":"    5","line":"* Version:       1.40.00"},
{"lineNum":"    6","line":"* Project:       vector class library"},
{"lineNum":"    7","line":"* Description:"},
{"lineNum":"    8","line":"* Header file defining 256-bit floating point vector classes"},
{"lineNum":"    9","line":"* Emulated for processors without AVX instruction set."},
{"lineNum":"   10","line":"*"},
{"lineNum":"   11","line":"* Instructions: see vcl_manual.pdf"},
{"lineNum":"   12","line":"*"},
{"lineNum":"   13","line":"* The following vector classes are defined here:"},
{"lineNum":"   14","line":"* Vec8f     Vector of 8 single precision floating point numbers"},
{"lineNum":"   15","line":"* Vec8fb    Vector of 8 Booleans for use with Vec8f"},
{"lineNum":"   16","line":"* Vec4d     Vector of 4 double precision floating point numbers"},
{"lineNum":"   17","line":"* Vec4db    Vector of 4 Booleans for use with Vec4d"},
{"lineNum":"   18","line":"*"},
{"lineNum":"   19","line":"* Each vector object is represented internally in the CPU as two 128-bit registers."},
{"lineNum":"   20","line":"* This header file defines operators and functions for these vectors."},
{"lineNum":"   21","line":"*"},
{"lineNum":"   22","line":"* (c) Copyright 2012-2019 Agner Fog."},
{"lineNum":"   23","line":"* Apache License version 2.0 or later."},
{"lineNum":"   24","line":"*****************************************************************************/"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"// check combination of header files"},
{"lineNum":"   27","line":"#ifndef VECTORCLASS_H"},
{"lineNum":"   28","line":"#include \"vectorclass.h\""},
{"lineNum":"   29","line":"#endif"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"#if VECTORCLASS_H > 19999"},
{"lineNum":"   32","line":"#error Incompatible versions of vector class library mixed"},
{"lineNum":"   33","line":"#endif"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"#ifndef VECTORF256E_H"},
{"lineNum":"   36","line":"#define VECTORF256E_H  1"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"#ifdef VECTORF256_H"},
{"lineNum":"   39","line":"#error Two different versions of vectorf256.h included"},
{"lineNum":"   40","line":"#endif"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"#ifdef VCL_NAMESPACE"},
{"lineNum":"   44","line":"namespace VCL_NAMESPACE {"},
{"lineNum":"   45","line":"#endif"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"/*****************************************************************************"},
{"lineNum":"   48","line":"*"},
{"lineNum":"   49","line":"*          base class Vec256fe and Vec256de"},
{"lineNum":"   50","line":"*"},
{"lineNum":"   51","line":"*****************************************************************************/"},
{"lineNum":"   52","line":"// base class to replace __m256 when AVX is not supported"},
{"lineNum":"   53","line":"class Vec256fe {"},
{"lineNum":"   54","line":"protected:"},
{"lineNum":"   55","line":"    __m128 y0;                         // low half"},
{"lineNum":"   56","line":"    __m128 y1;                         // high half"},
{"lineNum":"   57","line":"public:"},
{"lineNum":"   58","line":"    Vec256fe(void) {};                 // default constructor"},
{"lineNum":"   59","line":"    Vec256fe(__m128 x0, __m128 x1) {   // constructor to build from two __m128"},
{"lineNum":"   60","line":"        y0 = x0;  y1 = x1;"},
{"lineNum":"   61","line":"    }"},
{"lineNum":"   62","line":"    __m128 get_low() const {           // get low half"},
{"lineNum":"   63","line":"        return y0;"},
{"lineNum":"   64","line":"    }"},
{"lineNum":"   65","line":"    __m128 get_high() const {          // get high half"},
{"lineNum":"   66","line":"        return y1;"},
{"lineNum":"   67","line":"    }"},
{"lineNum":"   68","line":"};"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"// base class to replace __m256d when AVX is not supported"},
{"lineNum":"   71","line":"class Vec256de {"},
{"lineNum":"   72","line":"public:"},
{"lineNum":"   73","line":"    Vec256de() {};                     // default constructor"},
{"lineNum":"   74","line":"    Vec256de(__m128d x0, __m128d x1) { // constructor to build from two __m128d"},
{"lineNum":"   75","line":"        y0 = x0;  y1 = x1;"},
{"lineNum":"   76","line":"    }"},
{"lineNum":"   77","line":"    __m128d get_low() const {          // get low half"},
{"lineNum":"   78","line":"        return y0;"},
{"lineNum":"   79","line":"    }"},
{"lineNum":"   80","line":"    __m128d get_high() const {         // get high half"},
{"lineNum":"   81","line":"        return y1;"},
{"lineNum":"   82","line":"    }"},
{"lineNum":"   83","line":"protected:"},
{"lineNum":"   84","line":"    __m128d y0;                        // low half"},
{"lineNum":"   85","line":"    __m128d y1;                        // high half"},
{"lineNum":"   86","line":"};"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"/*****************************************************************************"},
{"lineNum":"   90","line":"*"},
{"lineNum":"   91","line":"*          select functions"},
{"lineNum":"   92","line":"*"},
{"lineNum":"   93","line":"*****************************************************************************/"},
{"lineNum":"   94","line":"// Select between two Vec256fe sources, element by element. Used in various functions"},
{"lineNum":"   95","line":"// and operators. Corresponds to this pseudocode:"},
{"lineNum":"   96","line":"// for (int i = 0; i < 8; i++) result[i] = s[i] ? a[i] : b[i];"},
{"lineNum":"   97","line":"// Each element in s must be either 0 (false) or 0xFFFFFFFF (true)."},
{"lineNum":"   98","line":"static inline Vec256fe selectf (Vec256fe const & s, Vec256fe const & a, Vec256fe const & b) {"},
{"lineNum":"   99","line":"    return Vec256fe(selectf(b.get_low(), a.get_low(), s.get_low()), selectf(b.get_high(), a.get_high(), s.get_high()));"},
{"lineNum":"  100","line":"}"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"// Same, with two Vec256de sources."},
{"lineNum":"  103","line":"// and operators. Corresponds to this pseudocode:"},
{"lineNum":"  104","line":"// for (int i = 0; i < 4; i++) result[i] = s[i] ? a[i] : b[i];"},
{"lineNum":"  105","line":"// Each element in s must be either 0 (false) or 0xFFFFFFFFFFFFFFFF (true). No other"},
{"lineNum":"  106","line":"// values are allowed."},
{"lineNum":"  107","line":"static inline Vec256de selectd (Vec256de const & s, Vec256de const & a, Vec256de const & b) {"},
{"lineNum":"  108","line":"    return Vec256de(selectd(b.get_low(), a.get_low(), s.get_low()), selectd(b.get_high(), a.get_high(), s.get_high()));"},
{"lineNum":"  109","line":"}"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"/*****************************************************************************"},
{"lineNum":"  114","line":"*"},
{"lineNum":"  115","line":"*          Generate compile-time constant vector"},
{"lineNum":"  116","line":"*"},
{"lineNum":"  117","line":"*****************************************************************************/"},
{"lineNum":"  118","line":"// Generate a constant vector of 8 integers stored in memory,"},
{"lineNum":"  119","line":"// load as __m256"},
{"lineNum":"  120","line":"template <int i0, int i1, int i2, int i3, int i4, int i5, int i6, int i7>"},
{"lineNum":"  121","line":"static inline Vec256fe constant8f() {"},
{"lineNum":"  122","line":"    static const union {"},
{"lineNum":"  123","line":"        int      i[8];"},
{"lineNum":"  124","line":"        __m128   y[2];"},
{"lineNum":"  125","line":"    } u = {{i0,i1,i2,i3,i4,i5,i6,i7}};"},
{"lineNum":"  126","line":"    return Vec256fe(u.y[0], u.y[1]);"},
{"lineNum":"  127","line":"}"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"/*****************************************************************************"},
{"lineNum":"  131","line":"*"},
{"lineNum":"  132","line":"*          Vec8fb: Vector of 8 Booleans for use with Vec8f"},
{"lineNum":"  133","line":"*"},
{"lineNum":"  134","line":"*****************************************************************************/"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"class Vec8fb : public Vec256fe {"},
{"lineNum":"  137","line":"public:"},
{"lineNum":"  138","line":"    // Default constructor:"},
{"lineNum":"  139","line":"    Vec8fb() {"},
{"lineNum":"  140","line":"    }"},
{"lineNum":"  141","line":"    // Constructor to build from all elements:"},
{"lineNum":"  142","line":"    Vec8fb(bool b0, bool b1, bool b2, bool b3, bool b4, bool b5, bool b6, bool b7) {"},
{"lineNum":"  143","line":"        y0 = Vec4fb(b0, b1, b2, b3);"},
{"lineNum":"  144","line":"        y1 = Vec4fb(b4, b5, b6, b7);"},
{"lineNum":"  145","line":"    }"},
{"lineNum":"  146","line":"    // Constructor to build from two Vec4fb:"},
{"lineNum":"  147","line":"    Vec8fb(Vec4fb const & a0, Vec4fb const & a1) {"},
{"lineNum":"  148","line":"        y0 = a0;  y1 = a1;"},
{"lineNum":"  149","line":"    }"},
{"lineNum":"  150","line":"    // Constructor to convert from type Vec256fe"},
{"lineNum":"  151","line":"    Vec8fb(Vec256fe const & x) {"},
{"lineNum":"  152","line":"        y0 = x.get_low();  y1 = x.get_high();"},
{"lineNum":"  153","line":"    }"},
{"lineNum":"  154","line":"    // Constructor to broadcast scalar value:"},
{"lineNum":"  155","line":"    Vec8fb(bool b) {"},
{"lineNum":"  156","line":"        y0 = y1 = Vec4fb(b);"},
{"lineNum":"  157","line":"    }"},
{"lineNum":"  158","line":"    // Assignment operator to convert from type Vec256fe"},
{"lineNum":"  159","line":"    Vec8fb & operator = (Vec256fe const & x) {"},
{"lineNum":"  160","line":"        y0 = x.get_low();  y1 = x.get_high();"},
{"lineNum":"  161","line":"        return *this;"},
{"lineNum":"  162","line":"    }"},
{"lineNum":"  163","line":"#if defined (VECTORI256_H) || defined (VECTORI256E_H)  // 256 bit integer vectors are available"},
{"lineNum":"  164","line":"// -- #ifdef VECTORI256_H  // 256 bit integer vectors are available"},
{"lineNum":"  165","line":"    // Constructor to convert from type Vec8ib used as Boolean for integer vectors"},
{"lineNum":"  166","line":"    Vec8fb(Vec8ib const & x) {"},
{"lineNum":"  167","line":"        y0 = _mm_castsi128_ps(Vec8i(x).get_low());"},
{"lineNum":"  168","line":"        y1 = _mm_castsi128_ps(Vec8i(x).get_high());"},
{"lineNum":"  169","line":"    }"},
{"lineNum":"  170","line":"    // Assignment operator to convert from type Vec8ib used as Boolean for integer vectors"},
{"lineNum":"  171","line":"    Vec8fb & operator = (Vec8ib const & x) {"},
{"lineNum":"  172","line":"        y0 = _mm_castsi128_ps(Vec8i(x).get_low());"},
{"lineNum":"  173","line":"        y1 = _mm_castsi128_ps(Vec8i(x).get_high());"},
{"lineNum":"  174","line":"        return *this;"},
{"lineNum":"  175","line":"    }"},
{"lineNum":"  176","line":"    // Assignment operator to broadcast scalar value:"},
{"lineNum":"  177","line":"    Vec8fb & operator = (bool b) {"},
{"lineNum":"  178","line":"        y0 = y1 = Vec4fb(b);"},
{"lineNum":"  179","line":"        return *this;"},
{"lineNum":"  180","line":"    }"},
{"lineNum":"  181","line":"    // Type cast operator to convert to type Vec8ib used as Boolean for integer vectors"},
{"lineNum":"  182","line":"    operator Vec8ib() const {"},
{"lineNum":"  183","line":"        return Vec8i(_mm_castps_si128(y0), _mm_castps_si128(y1));"},
{"lineNum":"  184","line":"    }"},
{"lineNum":"  185","line":"#endif // VECTORI256_H"},
{"lineNum":"  186","line":"    // Member function to change a single element in vector"},
{"lineNum":"  187","line":"    // Note: This function is inefficient. Use load function if changing more than one element"},
{"lineNum":"  188","line":"    Vec8fb const & insert(int index, bool value) {"},
{"lineNum":"  189","line":"        if ((uint32_t)index < 4) {"},
{"lineNum":"  190","line":"            y0 = Vec4fb(y0).insert(index, value);"},
{"lineNum":"  191","line":"        }"},
{"lineNum":"  192","line":"        else {"},
{"lineNum":"  193","line":"            y1 = Vec4fb(y1).insert(index-4, value);"},
{"lineNum":"  194","line":"        }"},
{"lineNum":"  195","line":"        return *this;"},
{"lineNum":"  196","line":"    }"},
{"lineNum":"  197","line":"    // Member function extract a single element from vector"},
{"lineNum":"  198","line":"    // Note: This function is inefficient. Use store function if extracting more than one element"},
{"lineNum":"  199","line":"    bool extract(int index) const {"},
{"lineNum":"  200","line":"        if ((uint32_t)index < 4) {"},
{"lineNum":"  201","line":"            return Vec4fb(y0).extract(index);"},
{"lineNum":"  202","line":"        }"},
{"lineNum":"  203","line":"        else {"},
{"lineNum":"  204","line":"            return Vec4fb(y1).extract(index-4);"},
{"lineNum":"  205","line":"        }"},
{"lineNum":"  206","line":"    }"},
{"lineNum":"  207","line":"    // Extract a single element. Operator [] can only read an element, not write."},
{"lineNum":"  208","line":"    bool operator [] (int index) const {"},
{"lineNum":"  209","line":"        return extract(index);"},
{"lineNum":"  210","line":"    }"},
{"lineNum":"  211","line":"    // Member functions to split into two Vec4fb:"},
{"lineNum":"  212","line":"    Vec4fb get_low() const {"},
{"lineNum":"  213","line":"        return y0;"},
{"lineNum":"  214","line":"    }"},
{"lineNum":"  215","line":"    Vec4fb get_high() const {"},
{"lineNum":"  216","line":"        return y1;"},
{"lineNum":"  217","line":"    }"},
{"lineNum":"  218","line":"    // Member function to change a bitfield to a boolean vector"},
{"lineNum":"  219","line":"    Vec8fb & load_bits(uint8_t a) {"},
{"lineNum":"  220","line":"        y0 = Vec4fb().load_bits(a);"},
{"lineNum":"  221","line":"        y1 = Vec4fb().load_bits(uint8_t(a>>4u));"},
{"lineNum":"  222","line":"        return *this;"},
{"lineNum":"  223","line":"    }"},
{"lineNum":"  224","line":"    static int size () {"},
{"lineNum":"  225","line":"        return 8;"},
{"lineNum":"  226","line":"    }"},
{"lineNum":"  227","line":"    static int elementtype() {"},
{"lineNum":"  228","line":"        return 3;"},
{"lineNum":"  229","line":"    }"},
{"lineNum":"  230","line":"private: // Prevent constructing from int, etc."},
{"lineNum":"  231","line":"    Vec8fb(int b);"},
{"lineNum":"  232","line":"    Vec8fb & operator = (int x);"},
{"lineNum":"  233","line":"};"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":"/*****************************************************************************"},
{"lineNum":"  237","line":"*"},
{"lineNum":"  238","line":"*          Operators for Vec8fb"},
{"lineNum":"  239","line":"*"},
{"lineNum":"  240","line":"*****************************************************************************/"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"// vector operator & : bitwise and"},
{"lineNum":"  243","line":"static inline Vec8fb operator & (Vec8fb const & a, Vec8fb const & b) {"},
{"lineNum":"  244","line":"    return Vec8fb(a.get_low() & b.get_low(), a.get_high() & b.get_high());"},
{"lineNum":"  245","line":"}"},
{"lineNum":"  246","line":""},
{"lineNum":"  247","line":"static inline Vec8fb operator && (Vec8fb const & a, Vec8fb const & b) {"},
{"lineNum":"  248","line":"    return a & b;"},
{"lineNum":"  249","line":"}"},
{"lineNum":"  250","line":""},
{"lineNum":"  251","line":"// vector operator &= : bitwise and"},
{"lineNum":"  252","line":"static inline Vec8fb & operator &= (Vec8fb & a, Vec8fb const & b) {"},
{"lineNum":"  253","line":"    a = a & b;"},
{"lineNum":"  254","line":"    return a;"},
{"lineNum":"  255","line":"}"},
{"lineNum":"  256","line":""},
{"lineNum":"  257","line":"// vector operator | : bitwise or"},
{"lineNum":"  258","line":"static inline Vec8fb operator | (Vec8fb const & a, Vec8fb const & b) {"},
{"lineNum":"  259","line":"    return Vec8fb(a.get_low() | b.get_low(), a.get_high() | b.get_high());"},
{"lineNum":"  260","line":"}"},
{"lineNum":"  261","line":"static inline Vec8fb operator || (Vec8fb const & a, Vec8fb const & b) {"},
{"lineNum":"  262","line":"    return a | b;"},
{"lineNum":"  263","line":"}"},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"// vector operator |= : bitwise or"},
{"lineNum":"  266","line":"static inline Vec8fb & operator |= (Vec8fb & a, Vec8fb const & b) {"},
{"lineNum":"  267","line":"    a = a | b;"},
{"lineNum":"  268","line":"    return a;"},
{"lineNum":"  269","line":"}"},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"// vector operator ^ : bitwise xor"},
{"lineNum":"  272","line":"static inline Vec8fb operator ^ (Vec8fb const & a, Vec8fb const & b) {"},
{"lineNum":"  273","line":"    return Vec8fb(a.get_low() ^ b.get_low(), a.get_high() ^ b.get_high());"},
{"lineNum":"  274","line":"}"},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"// vector operator ^= : bitwise xor"},
{"lineNum":"  277","line":"static inline Vec8fb & operator ^= (Vec8fb & a, Vec8fb const & b) {"},
{"lineNum":"  278","line":"    a = a ^ b;"},
{"lineNum":"  279","line":"    return a;"},
{"lineNum":"  280","line":"}"},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"// vector operator ~ : bitwise not"},
{"lineNum":"  283","line":"static inline Vec8fb operator ~ (Vec8fb const & a) {"},
{"lineNum":"  284","line":"    return Vec8fb(~a.get_low(), ~a.get_high());"},
{"lineNum":"  285","line":"}"},
{"lineNum":"  286","line":""},
{"lineNum":"  287","line":"// vector operator == : xnor"},
{"lineNum":"  288","line":"static inline Vec8fb operator == (Vec8fb const & a, Vec8fb const & b) {"},
{"lineNum":"  289","line":"    return Vec8fb(Vec8fb(a) ^ Vec8fb(~b));"},
{"lineNum":"  290","line":"}"},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"// vector operator != : xor"},
{"lineNum":"  293","line":"static inline Vec8fb operator != (Vec8fb const & a, Vec8fb const & b) {"},
{"lineNum":"  294","line":"    return Vec8fb(a ^ b);"},
{"lineNum":"  295","line":"}"},
{"lineNum":"  296","line":""},
{"lineNum":"  297","line":"// vector operator ! : logical not"},
{"lineNum":"  298","line":"// (operator ! is less efficient than operator ~. Use only where not"},
{"lineNum":"  299","line":"// all bits in an element are the same)"},
{"lineNum":"  300","line":"static inline Vec8fb operator ! (Vec8fb const & a) {"},
{"lineNum":"  301","line":"    return Vec8fb(!a.get_low(), !a.get_high());"},
{"lineNum":"  302","line":"}"},
{"lineNum":"  303","line":""},
{"lineNum":"  304","line":"// Functions for Vec8fb"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"// andnot: a & ~ b"},
{"lineNum":"  307","line":"static inline Vec8fb andnot(Vec8fb const & a, Vec8fb const & b) {"},
{"lineNum":"  308","line":"    return Vec8fb(andnot(a.get_low(), b.get_low()), andnot(a.get_high(), b.get_high()));"},
{"lineNum":"  309","line":"}"},
{"lineNum":"  310","line":""},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":"/*****************************************************************************"},
{"lineNum":"  314","line":"*"},
{"lineNum":"  315","line":"*          Horizontal Boolean functions"},
{"lineNum":"  316","line":"*"},
{"lineNum":"  317","line":"*****************************************************************************/"},
{"lineNum":"  318","line":""},
{"lineNum":"  319","line":"// horizontal_and. Returns true if all bits are 1"},
{"lineNum":"  320","line":"static inline bool horizontal_and (Vec8fb const & a) {"},
{"lineNum":"  321","line":"    return horizontal_and(a.get_low() & a.get_high());"},
{"lineNum":"  322","line":"}"},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"// horizontal_or. Returns true if at least one bit is 1"},
{"lineNum":"  325","line":"static inline bool horizontal_or (Vec8fb const & a) {"},
{"lineNum":"  326","line":"    return horizontal_or(a.get_low() | a.get_high());"},
{"lineNum":"  327","line":"}"},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":""},
{"lineNum":"  330","line":""},
{"lineNum":"  331","line":"/*****************************************************************************"},
{"lineNum":"  332","line":"*"},
{"lineNum":"  333","line":"*          Vec4db: Vector of 4 Booleans for use with Vec4d"},
{"lineNum":"  334","line":"*"},
{"lineNum":"  335","line":"*****************************************************************************/"},
{"lineNum":"  336","line":""},
{"lineNum":"  337","line":"class Vec4db : public Vec256de {"},
{"lineNum":"  338","line":"public:"},
{"lineNum":"  339","line":"    // Default constructor:"},
{"lineNum":"  340","line":"    Vec4db() {"},
{"lineNum":"  341","line":"    }"},
{"lineNum":"  342","line":"    // Constructor to build from all elements:"},
{"lineNum":"  343","line":"    Vec4db(bool b0, bool b1, bool b2, bool b3) {"},
{"lineNum":"  344","line":"        y0 = Vec2db(b0, b1);"},
{"lineNum":"  345","line":"        y1 = Vec2db(b2, b3);"},
{"lineNum":"  346","line":"    }"},
{"lineNum":"  347","line":"    // Constructor to build from two Vec2db:"},
{"lineNum":"  348","line":"    Vec4db(Vec2db const & a0, Vec2db const & a1) {"},
{"lineNum":"  349","line":"        y0 = a0;  y1 = a1;"},
{"lineNum":"  350","line":"    }"},
{"lineNum":"  351","line":"    // Constructor to convert from type Vec256de"},
{"lineNum":"  352","line":"    Vec4db(Vec256de const & x) {"},
{"lineNum":"  353","line":"        y0 = x.get_low();  y1 = x.get_high();"},
{"lineNum":"  354","line":"    }"},
{"lineNum":"  355","line":"    // Constructor to broadcast scalar value:"},
{"lineNum":"  356","line":"    Vec4db(bool b) {"},
{"lineNum":"  357","line":"        y0 = y1 = Vec2db(b);"},
{"lineNum":"  358","line":"    }"},
{"lineNum":"  359","line":"    // Assignment operator to convert from type Vec256de"},
{"lineNum":"  360","line":"    Vec4db & operator = (Vec256de const & x) {"},
{"lineNum":"  361","line":"        y0 = x.get_low();  y1 = x.get_high();"},
{"lineNum":"  362","line":"        return *this;"},
{"lineNum":"  363","line":"    }"},
{"lineNum":"  364","line":"#if defined (VECTORI256_H) || defined (VECTORI256E_H)  // 256 bit integer vectors are available"},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":"// --#ifdef VECTORI256_H  // 256 bit integer vectors are available"},
{"lineNum":"  367","line":"    // Constructor to convert from type Vec4qb used as Boolean for integer vectors"},
{"lineNum":"  368","line":"    Vec4db(Vec4qb const & x) {"},
{"lineNum":"  369","line":"        y0 = _mm_castsi128_pd(Vec4q(x).get_low());"},
{"lineNum":"  370","line":"        y1 = _mm_castsi128_pd(Vec4q(x).get_high());"},
{"lineNum":"  371","line":"    }"},
{"lineNum":"  372","line":"    // Assignment operator to convert from type Vec4qb used as Boolean for integer vectors"},
{"lineNum":"  373","line":"    Vec4db & operator = (Vec4qb const & x) {"},
{"lineNum":"  374","line":"        y0 = _mm_castsi128_pd(Vec4q(x).get_low());"},
{"lineNum":"  375","line":"        y1 = _mm_castsi128_pd(Vec4q(x).get_high());"},
{"lineNum":"  376","line":"        return *this;"},
{"lineNum":"  377","line":"    }"},
{"lineNum":"  378","line":"    // Assignment operator to broadcast scalar value:"},
{"lineNum":"  379","line":"    Vec4db & operator = (bool b) {"},
{"lineNum":"  380","line":"        y0 = y1 = Vec2db(b);"},
{"lineNum":"  381","line":"        return *this;"},
{"lineNum":"  382","line":"    }"},
{"lineNum":"  383","line":"    // Type cast operator to convert to type Vec4qb used as Boolean for integer vectors"},
{"lineNum":"  384","line":"    operator Vec4qb() const {"},
{"lineNum":"  385","line":"        return Vec4q(_mm_castpd_si128(y0), _mm_castpd_si128(y1));"},
{"lineNum":"  386","line":"    }"},
{"lineNum":"  387","line":"#endif // VECTORI256_H"},
{"lineNum":"  388","line":""},
{"lineNum":"  389","line":"    // Member function to change a single element in vector"},
{"lineNum":"  390","line":"    // Note: This function is inefficient. Use load function if changing more than one element"},
{"lineNum":"  391","line":"    Vec4db const & insert(int index, bool value) {"},
{"lineNum":"  392","line":"        if ((uint32_t)index < 2) {"},
{"lineNum":"  393","line":"            y0 = Vec2db(y0).insert(index, value);"},
{"lineNum":"  394","line":"        }"},
{"lineNum":"  395","line":"        else {"},
{"lineNum":"  396","line":"            y1 = Vec2db(y1).insert(index - 2, value);"},
{"lineNum":"  397","line":"        }"},
{"lineNum":"  398","line":"        return *this;"},
{"lineNum":"  399","line":"    }"},
{"lineNum":"  400","line":"    // Member function extract a single element from vector"},
{"lineNum":"  401","line":"    // Note: This function is inefficient. Use store function if extracting more than one element"},
{"lineNum":"  402","line":"    bool extract(int index) const {"},
{"lineNum":"  403","line":"        if ((uint32_t)index < 2) {"},
{"lineNum":"  404","line":"            return Vec2db(y0).extract(index);"},
{"lineNum":"  405","line":"        }"},
{"lineNum":"  406","line":"        else {"},
{"lineNum":"  407","line":"            return Vec2db(y1).extract(index - 2);"},
{"lineNum":"  408","line":"        }"},
{"lineNum":"  409","line":"    }"},
{"lineNum":"  410","line":"    // Extract a single element. Operator [] can only read an element, not write."},
{"lineNum":"  411","line":"    bool operator [] (int index) const {"},
{"lineNum":"  412","line":"        return extract(index);"},
{"lineNum":"  413","line":"    }"},
{"lineNum":"  414","line":"    // Member functions to split into two Vec4fb:"},
{"lineNum":"  415","line":"    Vec2db get_low() const {"},
{"lineNum":"  416","line":"        return y0;"},
{"lineNum":"  417","line":"    }"},
{"lineNum":"  418","line":"    Vec2db get_high() const {"},
{"lineNum":"  419","line":"        return y1;"},
{"lineNum":"  420","line":"    }"},
{"lineNum":"  421","line":"    // Member function to change a bitfield to a boolean vector"},
{"lineNum":"  422","line":"    Vec4db & load_bits(uint8_t a) {"},
{"lineNum":"  423","line":"        y0 = Vec2db().load_bits(a);"},
{"lineNum":"  424","line":"        y1 = Vec2db().load_bits(uint8_t(a>>2u));"},
{"lineNum":"  425","line":"        return *this;"},
{"lineNum":"  426","line":"    }"},
{"lineNum":"  427","line":"    static int size () {"},
{"lineNum":"  428","line":"        return 4;"},
{"lineNum":"  429","line":"    }"},
{"lineNum":"  430","line":"    static int elementtype() {"},
{"lineNum":"  431","line":"        return 3;"},
{"lineNum":"  432","line":"    }"},
{"lineNum":"  433","line":"private: // Prevent constructing from int, etc."},
{"lineNum":"  434","line":"    Vec4db(int b);"},
{"lineNum":"  435","line":"    Vec4db & operator = (int x);"},
{"lineNum":"  436","line":"};"},
{"lineNum":"  437","line":""},
{"lineNum":"  438","line":""},
{"lineNum":"  439","line":"/*****************************************************************************"},
{"lineNum":"  440","line":"*"},
{"lineNum":"  441","line":"*          Operators for Vec4db"},
{"lineNum":"  442","line":"*"},
{"lineNum":"  443","line":"*****************************************************************************/"},
{"lineNum":"  444","line":""},
{"lineNum":"  445","line":"// vector operator & : bitwise and"},
{"lineNum":"  446","line":"static inline Vec4db operator & (Vec4db const & a, Vec4db const & b) {"},
{"lineNum":"  447","line":"    return Vec4db(a.get_low() & b.get_low(), a.get_high() & b.get_high());"},
{"lineNum":"  448","line":"}"},
{"lineNum":"  449","line":"static inline Vec4db operator && (Vec4db const & a, Vec4db const & b) {"},
{"lineNum":"  450","line":"    return a & b;"},
{"lineNum":"  451","line":"}"},
{"lineNum":"  452","line":""},
{"lineNum":"  453","line":"// vector operator &= : bitwise and"},
{"lineNum":"  454","line":"static inline Vec4db & operator &= (Vec4db & a, Vec4db const & b) {"},
{"lineNum":"  455","line":"    a = a & b;"},
{"lineNum":"  456","line":"    return a;"},
{"lineNum":"  457","line":"}"},
{"lineNum":"  458","line":""},
{"lineNum":"  459","line":"// vector operator | : bitwise or"},
{"lineNum":"  460","line":"static inline Vec4db operator | (Vec4db const & a, Vec4db const & b) {"},
{"lineNum":"  461","line":"    return Vec4db(a.get_low() | b.get_low(), a.get_high() | b.get_high());"},
{"lineNum":"  462","line":"}"},
{"lineNum":"  463","line":"static inline Vec4db operator || (Vec4db const & a, Vec4db const & b) {"},
{"lineNum":"  464","line":"    return a | b;"},
{"lineNum":"  465","line":"}"},
{"lineNum":"  466","line":""},
{"lineNum":"  467","line":"// vector operator |= : bitwise or"},
{"lineNum":"  468","line":"static inline Vec4db & operator |= (Vec4db & a, Vec4db const & b) {"},
{"lineNum":"  469","line":"    a = a | b;"},
{"lineNum":"  470","line":"    return a;"},
{"lineNum":"  471","line":"}"},
{"lineNum":"  472","line":""},
{"lineNum":"  473","line":"// vector operator ^ : bitwise xor"},
{"lineNum":"  474","line":"static inline Vec4db operator ^ (Vec4db const & a, Vec4db const & b) {"},
{"lineNum":"  475","line":"    return Vec4db(a.get_low() ^ b.get_low(), a.get_high() ^ b.get_high());"},
{"lineNum":"  476","line":""},
{"lineNum":"  477","line":"}"},
{"lineNum":"  478","line":""},
{"lineNum":"  479","line":"// vector operator ^= : bitwise xor"},
{"lineNum":"  480","line":"static inline Vec4db & operator ^= (Vec4db & a, Vec4db const & b) {"},
{"lineNum":"  481","line":"    a = a ^ b;"},
{"lineNum":"  482","line":"    return a;"},
{"lineNum":"  483","line":"}"},
{"lineNum":"  484","line":""},
{"lineNum":"  485","line":"// vector operator ~ : bitwise not"},
{"lineNum":"  486","line":"static inline Vec4db operator ~ (Vec4db const & a) {"},
{"lineNum":"  487","line":"    return Vec4db(~a.get_low(), ~a.get_high());"},
{"lineNum":"  488","line":"}"},
{"lineNum":"  489","line":""},
{"lineNum":"  490","line":"// vector operator == : xnor"},
{"lineNum":"  491","line":"static inline Vec4db operator == (Vec4db const & a, Vec4db const & b) {"},
{"lineNum":"  492","line":"    return Vec4db(Vec4db(a) ^ Vec4db(~b));"},
{"lineNum":"  493","line":"}"},
{"lineNum":"  494","line":""},
{"lineNum":"  495","line":"// vector operator != : xor"},
{"lineNum":"  496","line":"static inline Vec4db operator != (Vec4db const & a, Vec4db const & b) {"},
{"lineNum":"  497","line":"    return Vec4db(a ^ b);"},
{"lineNum":"  498","line":"}"},
{"lineNum":"  499","line":""},
{"lineNum":"  500","line":"// vector operator ! : logical not"},
{"lineNum":"  501","line":"// (operator ! is less efficient than operator ~. Use only where not"},
{"lineNum":"  502","line":"// all bits in an element are the same)"},
{"lineNum":"  503","line":"static inline Vec4db operator ! (Vec4db const & a) {"},
{"lineNum":"  504","line":"    return Vec4db(!a.get_low(), !a.get_high());"},
{"lineNum":"  505","line":"}"},
{"lineNum":"  506","line":""},
{"lineNum":"  507","line":"// Functions for Vec4db"},
{"lineNum":"  508","line":""},
{"lineNum":"  509","line":"// andnot: a & ~ b"},
{"lineNum":"  510","line":"static inline Vec4db andnot(Vec4db const & a, Vec4db const & b) {"},
{"lineNum":"  511","line":"    return Vec4db(andnot(a.get_low(), b.get_low()), andnot(a.get_high(), b.get_high()));"},
{"lineNum":"  512","line":"}"},
{"lineNum":"  513","line":""},
{"lineNum":"  514","line":""},
{"lineNum":"  515","line":"/*****************************************************************************"},
{"lineNum":"  516","line":"*"},
{"lineNum":"  517","line":"*          Horizontal Boolean functions"},
{"lineNum":"  518","line":"*"},
{"lineNum":"  519","line":"*****************************************************************************/"},
{"lineNum":"  520","line":""},
{"lineNum":"  521","line":"// horizontal_and. Returns true if all bits are 1"},
{"lineNum":"  522","line":"static inline bool horizontal_and (Vec4db const & a) {"},
{"lineNum":"  523","line":"    return horizontal_and(a.get_low() & a.get_high());"},
{"lineNum":"  524","line":"}"},
{"lineNum":"  525","line":""},
{"lineNum":"  526","line":"// horizontal_or. Returns true if at least one bit is 1"},
{"lineNum":"  527","line":"static inline bool horizontal_or (Vec4db const & a) {"},
{"lineNum":"  528","line":"    return horizontal_or(a.get_low() | a.get_high());"},
{"lineNum":"  529","line":"}"},
{"lineNum":"  530","line":""},
{"lineNum":"  531","line":""},
{"lineNum":"  532","line":""},
{"lineNum":"  533","line":"/*****************************************************************************"},
{"lineNum":"  534","line":"*"},
{"lineNum":"  535","line":"*          Vec8f: Vector of 8 single precision floating point values"},
{"lineNum":"  536","line":"*"},
{"lineNum":"  537","line":"*****************************************************************************/"},
{"lineNum":"  538","line":""},
{"lineNum":"  539","line":"class Vec8f : public Vec256fe {"},
{"lineNum":"  540","line":"public:"},
{"lineNum":"  541","line":"    // Default constructor:"},
{"lineNum":"  542","line":"    Vec8f() {"},
{"lineNum":"  543","line":"    }"},
{"lineNum":"  544","line":"    // Constructor to broadcast the same value into all elements:"},
{"lineNum":"  545","line":"    Vec8f(float f) {"},
{"lineNum":"  546","line":"        y1 = y0 = _mm_set1_ps(f);"},
{"lineNum":"  547","line":"    }"},
{"lineNum":"  548","line":"    // Constructor to build from all elements:"},
{"lineNum":"  549","line":"    Vec8f(float f0, float f1, float f2, float f3, float f4, float f5, float f6, float f7) {"},
{"lineNum":"  550","line":"        y0 = _mm_setr_ps(f0, f1, f2, f3);"},
{"lineNum":"  551","line":"        y1 = _mm_setr_ps(f4, f5, f6, f7);"},
{"lineNum":"  552","line":"    }"},
{"lineNum":"  553","line":"    // Constructor to build from two Vec4f:"},
{"lineNum":"  554","line":"    Vec8f(Vec4f const & a0, Vec4f const & a1) {"},
{"lineNum":"  555","line":"        y0 = a0;  y1 = a1;"},
{"lineNum":"  556","line":"    }"},
{"lineNum":"  557","line":"    // Constructor to convert from type Vec256fe"},
{"lineNum":"  558","line":"    Vec8f(Vec256fe const & x) {"},
{"lineNum":"  559","line":"        y0 = x.get_low();  y1 = x.get_high();"},
{"lineNum":"  560","line":"    }"},
{"lineNum":"  561","line":"    // Assignment operator to convert from type Vec256fe"},
{"lineNum":"  562","line":"    Vec8f & operator = (Vec256fe const & x) {"},
{"lineNum":"  563","line":"        y0 = x.get_low();  y1 = x.get_high();"},
{"lineNum":"  564","line":"        return *this;"},
{"lineNum":"  565","line":"    }"},
{"lineNum":"  566","line":"    // Member function to load from array (unaligned)"},
{"lineNum":"  567","line":"    Vec8f & load(float const * p) {"},
{"lineNum":"  568","line":"        y0 = _mm_loadu_ps(p);"},
{"lineNum":"  569","line":"        y1 = _mm_loadu_ps(p+4);"},
{"lineNum":"  570","line":"        return *this;"},
{"lineNum":"  571","line":"    }"},
{"lineNum":"  572","line":"    // Member function to load from array, aligned by 32"},
{"lineNum":"  573","line":"    // You may use load_a instead of load if you are certain that p points to an address"},
{"lineNum":"  574","line":"    // divisible by 32."},
{"lineNum":"  575","line":"    Vec8f & load_a(float const * p) {"},
{"lineNum":"  576","line":"        y0 = _mm_load_ps(p);"},
{"lineNum":"  577","line":"        y1 = _mm_load_ps(p+4);"},
{"lineNum":"  578","line":"        return *this;"},
{"lineNum":"  579","line":"    }"},
{"lineNum":"  580","line":"    // Member function to store into array (unaligned)"},
{"lineNum":"  581","line":"    void store(float * p) const {"},
{"lineNum":"  582","line":"        _mm_storeu_ps(p,   y0);"},
{"lineNum":"  583","line":"        _mm_storeu_ps(p+4, y1);"},
{"lineNum":"  584","line":"    }"},
{"lineNum":"  585","line":"    // Member function to store into array, aligned by 32"},
{"lineNum":"  586","line":"    // You may use store_a instead of store if you are certain that p points to an address"},
{"lineNum":"  587","line":"    // divisible by 32."},
{"lineNum":"  588","line":"    void store_a(float * p) const {"},
{"lineNum":"  589","line":"        _mm_store_ps(p,   y0);"},
{"lineNum":"  590","line":"        _mm_store_ps(p+4, y1);"},
{"lineNum":"  591","line":"    }"},
{"lineNum":"  592","line":"    // Partial load. Load n elements and set the rest to 0"},
{"lineNum":"  593","line":"    Vec8f & load_partial(int n, float const * p) {"},
{"lineNum":"  594","line":"        if (n > 0 && n <= 4) {"},
{"lineNum":"  595","line":"            *this = Vec8f(Vec4f().load_partial(n, p),_mm_setzero_ps());"},
{"lineNum":"  596","line":"        }"},
{"lineNum":"  597","line":"        else if (n > 4 && n <= 8) {"},
{"lineNum":"  598","line":"            *this = Vec8f(Vec4f().load(p), Vec4f().load_partial(n - 4, p + 4));"},
{"lineNum":"  599","line":"        }"},
{"lineNum":"  600","line":"        else {"},
{"lineNum":"  601","line":"            y1 = y0 = _mm_setzero_ps();"},
{"lineNum":"  602","line":"        }"},
{"lineNum":"  603","line":"        return *this;"},
{"lineNum":"  604","line":"    }"},
{"lineNum":"  605","line":"    // Partial store. Store n elements"},
{"lineNum":"  606","line":"    void store_partial(int n, float * p) const {"},
{"lineNum":"  607","line":"        if (n <= 4) {"},
{"lineNum":"  608","line":"            get_low().store_partial(n, p);"},
{"lineNum":"  609","line":"        }"},
{"lineNum":"  610","line":"        else if (n <= 8) {"},
{"lineNum":"  611","line":"            get_low().store(p);"},
{"lineNum":"  612","line":"            get_high().store_partial(n - 4, p + 4);"},
{"lineNum":"  613","line":"        }"},
{"lineNum":"  614","line":"    }"},
{"lineNum":"  615","line":"    // cut off vector to n elements. The last 8-n elements are set to zero"},
{"lineNum":"  616","line":"    Vec8f & cutoff(int n) {"},
{"lineNum":"  617","line":"        if (uint32_t(n) >= 8) return *this;"},
{"lineNum":"  618","line":"        else if (n >= 4) {"},
{"lineNum":"  619","line":"            y1 = Vec4f(y1).cutoff(n - 4);"},
{"lineNum":"  620","line":"        }"},
{"lineNum":"  621","line":"        else {"},
{"lineNum":"  622","line":"            y0 = Vec4f(y0).cutoff(n);"},
{"lineNum":"  623","line":"            y1 = Vec4f(0.0f);"},
{"lineNum":"  624","line":"        }"},
{"lineNum":"  625","line":"        return *this;"},
{"lineNum":"  626","line":"    }"},
{"lineNum":"  627","line":"    // Member function to change a single element in vector"},
{"lineNum":"  628","line":"    // Note: This function is inefficient. Use load function if changing more than one element"},
{"lineNum":"  629","line":"    Vec8f const & insert(int index, float value) {"},
{"lineNum":"  630","line":"        if ((uint32_t)index < 4) {"},
{"lineNum":"  631","line":"            y0 = Vec4f(y0).insert(index, value);"},
{"lineNum":"  632","line":"        }"},
{"lineNum":"  633","line":"        else {"},
{"lineNum":"  634","line":"            y1 = Vec4f(y1).insert(index - 4, value);"},
{"lineNum":"  635","line":"        }"},
{"lineNum":"  636","line":"        return *this;"},
{"lineNum":"  637","line":"    }"},
{"lineNum":"  638","line":"    // Member function extract a single element from vector"},
{"lineNum":"  639","line":"    // Note: This function is inefficient. Use store function if extracting more than one element"},
{"lineNum":"  640","line":"    float extract(int index) const {"},
{"lineNum":"  641","line":"        if ((uint32_t)index < 4) {"},
{"lineNum":"  642","line":"            return Vec4f(y0).extract(index);"},
{"lineNum":"  643","line":"        }"},
{"lineNum":"  644","line":"        else {"},
{"lineNum":"  645","line":"            return Vec4f(y1).extract(index - 4);"},
{"lineNum":"  646","line":"        }"},
{"lineNum":"  647","line":"    }"},
{"lineNum":"  648","line":"    // Extract a single element. Use store function if extracting more than one element."},
{"lineNum":"  649","line":"    // Operator [] can only read an element, not write."},
{"lineNum":"  650","line":"    float operator [] (int index) const {"},
{"lineNum":"  651","line":"        return extract(index);"},
{"lineNum":"  652","line":"    }"},
{"lineNum":"  653","line":"    // Member functions to split into two Vec4f:"},
{"lineNum":"  654","line":"    Vec4f get_low() const {"},
{"lineNum":"  655","line":"        return y0;"},
{"lineNum":"  656","line":"    }"},
{"lineNum":"  657","line":"    Vec4f get_high() const {"},
{"lineNum":"  658","line":"        return y1;"},
{"lineNum":"  659","line":"    }"},
{"lineNum":"  660","line":"    static int size () {"},
{"lineNum":"  661","line":"        return 8;"},
{"lineNum":"  662","line":"    }"},
{"lineNum":"  663","line":"    static int elementtype() {"},
{"lineNum":"  664","line":"        return 16;"},
{"lineNum":"  665","line":"    }"},
{"lineNum":"  666","line":"};"},
{"lineNum":"  667","line":""},
{"lineNum":"  668","line":""},
{"lineNum":"  669","line":"/*****************************************************************************"},
{"lineNum":"  670","line":"*"},
{"lineNum":"  671","line":"*          Operators for Vec8f"},
{"lineNum":"  672","line":"*"},
{"lineNum":"  673","line":"*****************************************************************************/"},
{"lineNum":"  674","line":""},
{"lineNum":"  675","line":"// vector operator + : add element by element"},
{"lineNum":"  676","line":"static inline Vec8f operator + (Vec8f const & a, Vec8f const & b) {"},
{"lineNum":"  677","line":"    return Vec8f(a.get_low() + b.get_low(), a.get_high() + b.get_high());"},
{"lineNum":"  678","line":"}"},
{"lineNum":"  679","line":""},
{"lineNum":"  680","line":"// vector operator + : add vector and scalar"},
{"lineNum":"  681","line":"static inline Vec8f operator + (Vec8f const & a, float b) {"},
{"lineNum":"  682","line":"    return a + Vec8f(b);"},
{"lineNum":"  683","line":"}"},
{"lineNum":"  684","line":"static inline Vec8f operator + (float a, Vec8f const & b) {"},
{"lineNum":"  685","line":"    return Vec8f(a) + b;"},
{"lineNum":"  686","line":"}"},
{"lineNum":"  687","line":""},
{"lineNum":"  688","line":"// vector operator += : add"},
{"lineNum":"  689","line":"static inline Vec8f & operator += (Vec8f & a, Vec8f const & b) {"},
{"lineNum":"  690","line":"    a = a + b;"},
{"lineNum":"  691","line":"    return a;"},
{"lineNum":"  692","line":"}"},
{"lineNum":"  693","line":""},
{"lineNum":"  694","line":"// postfix operator ++"},
{"lineNum":"  695","line":"static inline Vec8f operator ++ (Vec8f & a, int) {"},
{"lineNum":"  696","line":"    Vec8f a0 = a;"},
{"lineNum":"  697","line":"    a = a + 1.0f;"},
{"lineNum":"  698","line":"    return a0;"},
{"lineNum":"  699","line":"}"},
{"lineNum":"  700","line":""},
{"lineNum":"  701","line":"// prefix operator ++"},
{"lineNum":"  702","line":"static inline Vec8f & operator ++ (Vec8f & a) {"},
{"lineNum":"  703","line":"    a = a + 1.0f;"},
{"lineNum":"  704","line":"    return a;"},
{"lineNum":"  705","line":"}"},
{"lineNum":"  706","line":""},
{"lineNum":"  707","line":"// vector operator - : subtract element by element"},
{"lineNum":"  708","line":"static inline Vec8f operator - (Vec8f const & a, Vec8f const & b) {"},
{"lineNum":"  709","line":"    return Vec8f(a.get_low() - b.get_low(), a.get_high() - b.get_high());"},
{"lineNum":"  710","line":"}"},
{"lineNum":"  711","line":""},
{"lineNum":"  712","line":"// vector operator - : subtract vector and scalar"},
{"lineNum":"  713","line":"static inline Vec8f operator - (Vec8f const & a, float b) {"},
{"lineNum":"  714","line":"    return a - Vec8f(b);"},
{"lineNum":"  715","line":"}"},
{"lineNum":"  716","line":"static inline Vec8f operator - (float a, Vec8f const & b) {"},
{"lineNum":"  717","line":"    return Vec8f(a) - b;"},
{"lineNum":"  718","line":"}"},
{"lineNum":"  719","line":""},
{"lineNum":"  720","line":"// vector operator - : unary minus"},
{"lineNum":"  721","line":"// Change sign bit, even for 0, INF and NAN"},
{"lineNum":"  722","line":"static inline Vec8f operator - (Vec8f const & a) {"},
{"lineNum":"  723","line":"    return Vec8f(-a.get_low(), -a.get_high());"},
{"lineNum":"  724","line":"}"},
{"lineNum":"  725","line":""},
{"lineNum":"  726","line":"// vector operator -= : subtract"},
{"lineNum":"  727","line":"static inline Vec8f & operator -= (Vec8f & a, Vec8f const & b) {"},
{"lineNum":"  728","line":"    a = a - b;"},
{"lineNum":"  729","line":"    return a;"},
{"lineNum":"  730","line":"}"},
{"lineNum":"  731","line":""},
{"lineNum":"  732","line":"// postfix operator --"},
{"lineNum":"  733","line":"static inline Vec8f operator -- (Vec8f & a, int) {"},
{"lineNum":"  734","line":"    Vec8f a0 = a;"},
{"lineNum":"  735","line":"    a = a - 1.0f;"},
{"lineNum":"  736","line":"    return a0;"},
{"lineNum":"  737","line":"}"},
{"lineNum":"  738","line":""},
{"lineNum":"  739","line":"// prefix operator --"},
{"lineNum":"  740","line":"static inline Vec8f & operator -- (Vec8f & a) {"},
{"lineNum":"  741","line":"    a = a - 1.0f;"},
{"lineNum":"  742","line":"    return a;"},
{"lineNum":"  743","line":"}"},
{"lineNum":"  744","line":""},
{"lineNum":"  745","line":"// vector operator * : multiply element by element"},
{"lineNum":"  746","line":"static inline Vec8f operator * (Vec8f const & a, Vec8f const & b) {"},
{"lineNum":"  747","line":"    return Vec8f(a.get_low() * b.get_low(), a.get_high() * b.get_high());"},
{"lineNum":"  748","line":"}"},
{"lineNum":"  749","line":""},
{"lineNum":"  750","line":"// vector operator * : multiply vector and scalar"},
{"lineNum":"  751","line":"static inline Vec8f operator * (Vec8f const & a, float b) {"},
{"lineNum":"  752","line":"    return a * Vec8f(b);"},
{"lineNum":"  753","line":"}"},
{"lineNum":"  754","line":"static inline Vec8f operator * (float a, Vec8f const & b) {"},
{"lineNum":"  755","line":"    return Vec8f(a) * b;"},
{"lineNum":"  756","line":"}"},
{"lineNum":"  757","line":""},
{"lineNum":"  758","line":"// vector operator *= : multiply"},
{"lineNum":"  759","line":"static inline Vec8f & operator *= (Vec8f & a, Vec8f const & b) {"},
{"lineNum":"  760","line":"    a = a * b;"},
{"lineNum":"  761","line":"    return a;"},
{"lineNum":"  762","line":"}"},
{"lineNum":"  763","line":""},
{"lineNum":"  764","line":"// vector operator / : divide all elements by same integer"},
{"lineNum":"  765","line":"static inline Vec8f operator / (Vec8f const & a, Vec8f const & b) {"},
{"lineNum":"  766","line":"    return Vec8f(a.get_low() / b.get_low(), a.get_high() / b.get_high());"},
{"lineNum":"  767","line":"}"},
{"lineNum":"  768","line":""},
{"lineNum":"  769","line":"// vector operator / : divide vector and scalar"},
{"lineNum":"  770","line":"static inline Vec8f operator / (Vec8f const & a, float b) {"},
{"lineNum":"  771","line":"    return a / Vec8f(b);"},
{"lineNum":"  772","line":"}"},
{"lineNum":"  773","line":"static inline Vec8f operator / (float a, Vec8f const & b) {"},
{"lineNum":"  774","line":"    return Vec8f(a) / b;"},
{"lineNum":"  775","line":"}"},
{"lineNum":"  776","line":""},
{"lineNum":"  777","line":"// vector operator /= : divide"},
{"lineNum":"  778","line":"static inline Vec8f & operator /= (Vec8f & a, Vec8f const & b) {"},
{"lineNum":"  779","line":"    a = a / b;"},
{"lineNum":"  780","line":"    return a;"},
{"lineNum":"  781","line":"}"},
{"lineNum":"  782","line":""},
{"lineNum":"  783","line":"// vector operator == : returns true for elements for which a == b"},
{"lineNum":"  784","line":"static inline Vec8fb operator == (Vec8f const & a, Vec8f const & b) {"},
{"lineNum":"  785","line":"    return Vec8fb(a.get_low() == b.get_low(), a.get_high() == b.get_high());"},
{"lineNum":"  786","line":"}"},
{"lineNum":"  787","line":""},
{"lineNum":"  788","line":"// vector operator != : returns true for elements for which a != b"},
{"lineNum":"  789","line":"static inline Vec8fb operator != (Vec8f const & a, Vec8f const & b) {"},
{"lineNum":"  790","line":"    return Vec8fb(a.get_low() != b.get_low(), a.get_high() != b.get_high());"},
{"lineNum":"  791","line":"}"},
{"lineNum":"  792","line":""},
{"lineNum":"  793","line":"// vector operator < : returns true for elements for which a < b"},
{"lineNum":"  794","line":"static inline Vec8fb operator < (Vec8f const & a, Vec8f const & b) {"},
{"lineNum":"  795","line":"    return Vec8fb(a.get_low() < b.get_low(), a.get_high() < b.get_high());"},
{"lineNum":"  796","line":"}"},
{"lineNum":"  797","line":""},
{"lineNum":"  798","line":"// vector operator <= : returns true for elements for which a <= b"},
{"lineNum":"  799","line":"static inline Vec8fb operator <= (Vec8f const & a, Vec8f const & b) {"},
{"lineNum":"  800","line":"    return Vec8fb(a.get_low() <= b.get_low(), a.get_high() <= b.get_high());"},
{"lineNum":"  801","line":"}"},
{"lineNum":"  802","line":""},
{"lineNum":"  803","line":"// vector operator > : returns true for elements for which a > b"},
{"lineNum":"  804","line":"static inline Vec8fb operator > (Vec8f const & a, Vec8f const & b) {"},
{"lineNum":"  805","line":"    return Vec8fb(a.get_low() > b.get_low(), a.get_high() > b.get_high());"},
{"lineNum":"  806","line":"}"},
{"lineNum":"  807","line":""},
{"lineNum":"  808","line":"// vector operator >= : returns true for elements for which a >= b"},
{"lineNum":"  809","line":"static inline Vec8fb operator >= (Vec8f const & a, Vec8f const & b) {"},
{"lineNum":"  810","line":"    return Vec8fb(a.get_low() >= b.get_low(), a.get_high() >= b.get_high());"},
{"lineNum":"  811","line":"}"},
{"lineNum":"  812","line":""},
{"lineNum":"  813","line":"// Bitwise logical operators"},
{"lineNum":"  814","line":""},
{"lineNum":"  815","line":"// vector operator & : bitwise and"},
{"lineNum":"  816","line":"static inline Vec8f operator & (Vec8f const & a, Vec8f const & b) {"},
{"lineNum":"  817","line":"    return Vec8f(a.get_low() & b.get_low(), a.get_high() & b.get_high());"},
{"lineNum":"  818","line":"}"},
{"lineNum":"  819","line":""},
{"lineNum":"  820","line":"// vector operator &= : bitwise and"},
{"lineNum":"  821","line":"static inline Vec8f & operator &= (Vec8f & a, Vec8f const & b) {"},
{"lineNum":"  822","line":"    a = a & b;"},
{"lineNum":"  823","line":"    return a;"},
{"lineNum":"  824","line":"}"},
{"lineNum":"  825","line":""},
{"lineNum":"  826","line":"// vector operator & : bitwise and of Vec8f and Vec8fb"},
{"lineNum":"  827","line":"static inline Vec8f operator & (Vec8f const & a, Vec8fb const & b) {"},
{"lineNum":"  828","line":"    return Vec8f(a.get_low() & b.get_low(), a.get_high() & b.get_high());"},
{"lineNum":"  829","line":"}"},
{"lineNum":"  830","line":"static inline Vec8f operator & (Vec8fb const & a, Vec8f const & b) {"},
{"lineNum":"  831","line":"    return Vec8f(a.get_low() & b.get_low(), a.get_high() & b.get_high());"},
{"lineNum":"  832","line":"}"},
{"lineNum":"  833","line":""},
{"lineNum":"  834","line":"// vector operator | : bitwise or"},
{"lineNum":"  835","line":"static inline Vec8f operator | (Vec8f const & a, Vec8f const & b) {"},
{"lineNum":"  836","line":"    return Vec8f(a.get_low() | b.get_low(), a.get_high() | b.get_high());"},
{"lineNum":"  837","line":"}"},
{"lineNum":"  838","line":""},
{"lineNum":"  839","line":"// vector operator |= : bitwise or"},
{"lineNum":"  840","line":"static inline Vec8f & operator |= (Vec8f & a, Vec8f const & b) {"},
{"lineNum":"  841","line":"    a = a | b;"},
{"lineNum":"  842","line":"    return a;"},
{"lineNum":"  843","line":"}"},
{"lineNum":"  844","line":""},
{"lineNum":"  845","line":"// vector operator ^ : bitwise xor"},
{"lineNum":"  846","line":"static inline Vec8f operator ^ (Vec8f const & a, Vec8f const & b) {"},
{"lineNum":"  847","line":"    return Vec8f(a.get_low() ^ b.get_low(), a.get_high() ^ b.get_high());"},
{"lineNum":"  848","line":"}"},
{"lineNum":"  849","line":""},
{"lineNum":"  850","line":"// vector operator ^= : bitwise xor"},
{"lineNum":"  851","line":"static inline Vec8f & operator ^= (Vec8f & a, Vec8f const & b) {"},
{"lineNum":"  852","line":"    a = a ^ b;"},
{"lineNum":"  853","line":"    return a;"},
{"lineNum":"  854","line":"}"},
{"lineNum":"  855","line":""},
{"lineNum":"  856","line":"// vector operator ! : logical not. Returns Boolean vector"},
{"lineNum":"  857","line":"static inline Vec8fb operator ! (Vec8f const & a) {"},
{"lineNum":"  858","line":"    return Vec8fb(!a.get_low(), !a.get_high());"},
{"lineNum":"  859","line":"}"},
{"lineNum":"  860","line":""},
{"lineNum":"  861","line":""},
{"lineNum":"  862","line":"/*****************************************************************************"},
{"lineNum":"  863","line":"*"},
{"lineNum":"  864","line":"*          Functions for Vec8f"},
{"lineNum":"  865","line":"*"},
{"lineNum":"  866","line":"*****************************************************************************/"},
{"lineNum":"  867","line":""},
{"lineNum":"  868","line":"// Select between two operands. Corresponds to this pseudocode:"},
{"lineNum":"  869","line":"// for (int i = 0; i < 8; i++) result[i] = s[i] ? a[i] : b[i];"},
{"lineNum":"  870","line":"// Each byte in s must be either 0 (false) or 0xFFFFFFFF (true). No other values are allowed."},
{"lineNum":"  871","line":"static inline Vec8f select (Vec8fb const & s, Vec8f const & a, Vec8f const & b) {"},
{"lineNum":"  872","line":"    return Vec8f(select(s.get_low(),a.get_low(),b.get_low()), select(s.get_high(),a.get_high(),b.get_high()));"},
{"lineNum":"  873","line":"}"},
{"lineNum":"  874","line":""},
{"lineNum":"  875","line":"// Conditional add: For all vector elements i: result[i] = f[i] ? (a[i] + b[i]) : a[i]"},
{"lineNum":"  876","line":"static inline Vec8f if_add (Vec8fb const & f, Vec8f const & a, Vec8f const & b) {"},
{"lineNum":"  877","line":"    return a + (Vec8f(f) & b);"},
{"lineNum":"  878","line":"}"},
{"lineNum":"  879","line":""},
{"lineNum":"  880","line":"// Conditional sub: For all vector elements i: result[i] = f[i] ? (a[i] - b[i]) : a[i]"},
{"lineNum":"  881","line":"static inline Vec8f if_sub (Vec8fb const & f, Vec8f const & a, Vec8f const & b) {"},
{"lineNum":"  882","line":"    return a - (Vec8f(f) & b);"},
{"lineNum":"  883","line":"}"},
{"lineNum":"  884","line":""},
{"lineNum":"  885","line":"// Conditional multiply: For all vector elements i: result[i] = f[i] ? (a[i] * b[i]) : a[i]"},
{"lineNum":"  886","line":"static inline Vec8f if_mul (Vec8fb const & f, Vec8f const & a, Vec8f const & b) {"},
{"lineNum":"  887","line":"    return a * select(f, b, 1.f);"},
{"lineNum":"  888","line":"}"},
{"lineNum":"  889","line":""},
{"lineNum":"  890","line":"// Conditional divide: For all vector elements i: result[i] = f[i] ? (a[i] / b[i]) : a[i]"},
{"lineNum":"  891","line":"static inline Vec8f if_div (Vec8fb const & f, Vec8f const & a, Vec8f const & b) {"},
{"lineNum":"  892","line":"    return a / select(f, b, 1.f);"},
{"lineNum":"  893","line":"}"},
{"lineNum":"  894","line":""},
{"lineNum":"  895","line":""},
{"lineNum":"  896","line":"// General arithmetic functions, etc."},
{"lineNum":"  897","line":""},
{"lineNum":"  898","line":"// Horizontal add: Calculates the sum of all vector elements."},
{"lineNum":"  899","line":"static inline float horizontal_add (Vec8f const & a) {"},
{"lineNum":"  900","line":"    return horizontal_add(a.get_low() + a.get_high());"},
{"lineNum":"  901","line":"}"},
{"lineNum":"  902","line":""},
{"lineNum":"  903","line":"// function max: a > b ? a : b"},
{"lineNum":"  904","line":"static inline Vec8f max(Vec8f const & a, Vec8f const & b) {"},
{"lineNum":"  905","line":"    return Vec8f(max(a.get_low(),b.get_low()), max(a.get_high(),b.get_high()));"},
{"lineNum":"  906","line":"}"},
{"lineNum":"  907","line":""},
{"lineNum":"  908","line":"// function min: a < b ? a : b"},
{"lineNum":"  909","line":"static inline Vec8f min(Vec8f const & a, Vec8f const & b) {"},
{"lineNum":"  910","line":"    return Vec8f(min(a.get_low(),b.get_low()), min(a.get_high(),b.get_high()));"},
{"lineNum":"  911","line":"}"},
{"lineNum":"  912","line":""},
{"lineNum":"  913","line":"// same as max, NAN-safe"},
{"lineNum":"  914","line":"static inline Vec8f maximum(Vec8f const & a, Vec8f const & b) {"},
{"lineNum":"  915","line":"    return Vec8f(maximum(a.get_low(),b.get_low()), maximum(a.get_high(),b.get_high()));"},
{"lineNum":"  916","line":"}"},
{"lineNum":"  917","line":""},
{"lineNum":"  918","line":"// same as min, NAN-safe"},
{"lineNum":"  919","line":"static inline Vec8f minimum(Vec8f const & a, Vec8f const & b) {"},
{"lineNum":"  920","line":"    return Vec8f(minimum(a.get_low(),b.get_low()), minimum(a.get_high(),b.get_high()));"},
{"lineNum":"  921","line":"}"},
{"lineNum":"  922","line":""},
{"lineNum":"  923","line":"// function abs: absolute value"},
{"lineNum":"  924","line":"// Removes sign bit, even for -0.0f, -INF and -NAN"},
{"lineNum":"  925","line":"static inline Vec8f abs(Vec8f const & a) {"},
{"lineNum":"  926","line":"    return Vec8f(abs(a.get_low()), abs(a.get_high()));"},
{"lineNum":"  927","line":"}"},
{"lineNum":"  928","line":""},
{"lineNum":"  929","line":"// function sqrt: square root"},
{"lineNum":"  930","line":"static inline Vec8f sqrt(Vec8f const & a) {"},
{"lineNum":"  931","line":"    return Vec8f(sqrt(a.get_low()), sqrt(a.get_high()));"},
{"lineNum":"  932","line":"}"},
{"lineNum":"  933","line":""},
{"lineNum":"  934","line":"// function square: a * a"},
{"lineNum":"  935","line":"static inline Vec8f square(Vec8f const & a) {"},
{"lineNum":"  936","line":"    return Vec8f(square(a.get_low()), square(a.get_high()));"},
{"lineNum":"  937","line":"}"},
{"lineNum":"  938","line":""},
{"lineNum":"  939","line":"// pow(Vec8f, int):"},
{"lineNum":"  940","line":"template <typename TT> static Vec8f pow(Vec8f const & a, TT const & n);"},
{"lineNum":"  941","line":""},
{"lineNum":"  942","line":"// Raise floating point numbers to integer power n"},
{"lineNum":"  943","line":"template <>"},
{"lineNum":"  944","line":"inline Vec8f pow<int>(Vec8f const & x0, int const & n) {"},
{"lineNum":"  945","line":"    return pow_template_i<Vec8f>(x0, n);"},
{"lineNum":"  946","line":"}"},
{"lineNum":"  947","line":""},
{"lineNum":"  948","line":"// allow conversion from unsigned int"},
{"lineNum":"  949","line":"template <>"},
{"lineNum":"  950","line":"inline Vec8f pow<uint32_t>(Vec8f const & x0, uint32_t const & n) {"},
{"lineNum":"  951","line":"    return pow_template_i<Vec8f>(x0, (int)n);"},
{"lineNum":"  952","line":"}"},
{"lineNum":"  953","line":""},
{"lineNum":"  954","line":""},
{"lineNum":"  955","line":"// Raise floating point numbers to integer power n, where n is a compile-time constant"},
{"lineNum":"  956","line":"// implement as function pow(vector, const_int)"},
{"lineNum":"  957","line":"template <int n>"},
{"lineNum":"  958","line":"static inline Vec8f pow(Vec8f const & a, Const_int_t<n>) {"},
{"lineNum":"  959","line":"    return pow_n<Vec8f, n>(a);"},
{"lineNum":"  960","line":"}"},
{"lineNum":"  961","line":""},
{"lineNum":"  962","line":""},
{"lineNum":"  963","line":"// function round: round to nearest integer (even). (result as float vector)"},
{"lineNum":"  964","line":"static inline Vec8f round(Vec8f const & a) {"},
{"lineNum":"  965","line":"    return Vec8f(round(a.get_low()), round(a.get_high()));"},
{"lineNum":"  966","line":"}"},
{"lineNum":"  967","line":""},
{"lineNum":"  968","line":"// function truncate: round towards zero. (result as float vector)"},
{"lineNum":"  969","line":"static inline Vec8f truncate(Vec8f const & a) {"},
{"lineNum":"  970","line":"    return Vec8f(truncate(a.get_low()), truncate(a.get_high()));"},
{"lineNum":"  971","line":"}"},
{"lineNum":"  972","line":""},
{"lineNum":"  973","line":"// function floor: round towards minus infinity. (result as float vector)"},
{"lineNum":"  974","line":"static inline Vec8f floor(Vec8f const & a) {"},
{"lineNum":"  975","line":"    return Vec8f(floor(a.get_low()), floor(a.get_high()));"},
{"lineNum":"  976","line":"}"},
{"lineNum":"  977","line":""},
{"lineNum":"  978","line":"// function ceil: round towards plus infinity. (result as float vector)"},
{"lineNum":"  979","line":"static inline Vec8f ceil(Vec8f const & a) {"},
{"lineNum":"  980","line":"    return Vec8f(ceil(a.get_low()), ceil(a.get_high()));"},
{"lineNum":"  981","line":"}"},
{"lineNum":"  982","line":""},
{"lineNum":"  983","line":"#if defined (VECTORI256_H) || defined (VECTORI256E_H)  // 256 bit integer vectors are available"},
{"lineNum":"  984","line":"// function roundi: round to nearest integer (even). (result as integer vector)"},
{"lineNum":"  985","line":"static inline Vec8i roundi(Vec8f const & a) {"},
{"lineNum":"  986","line":"    return Vec8i(round_to_int(a.get_low()), round_to_int(a.get_high()));"},
{"lineNum":"  987","line":"}"},
{"lineNum":"  988","line":"static inline Vec8i round_to_int(Vec8f const & a) {return roundi(a);} // deprecated"},
{"lineNum":"  989","line":""},
{"lineNum":"  990","line":""},
{"lineNum":"  991","line":"// function truncatei: round towards zero. (result as integer vector)"},
{"lineNum":"  992","line":"static inline Vec8i truncatei(Vec8f const & a) {"},
{"lineNum":"  993","line":"    return Vec8i(truncatei(a.get_low()), truncatei(a.get_high()));"},
{"lineNum":"  994","line":"}"},
{"lineNum":"  995","line":"static inline Vec8i truncate_to_int(Vec8f const & a) {return truncatei(a);} // deprecated"},
{"lineNum":"  996","line":""},
{"lineNum":"  997","line":"// function to_float: convert integer vector to float vector"},
{"lineNum":"  998","line":"static inline Vec8f to_float(Vec8i const & a) {"},
{"lineNum":"  999","line":"    return Vec8f(to_float(a.get_low()), to_float(a.get_high()));"},
{"lineNum":" 1000","line":"}"},
{"lineNum":" 1001","line":""},
{"lineNum":" 1002","line":"// function to_float: convert unsigned integer vector to float vector"},
{"lineNum":" 1003","line":"static inline Vec8f to_float(Vec8ui const & a) {"},
{"lineNum":" 1004","line":"    return Vec8f(to_float(a.get_low()), to_float(a.get_high()));"},
{"lineNum":" 1005","line":"}"},
{"lineNum":" 1006","line":"#endif // VECTORI256_H"},
{"lineNum":" 1007","line":""},
{"lineNum":" 1008","line":""},
{"lineNum":" 1009","line":"// Approximate math functions"},
{"lineNum":" 1010","line":""},
{"lineNum":" 1011","line":"// approximate reciprocal (Faster than 1.f / a. relative accuracy better than 2^-11)"},
{"lineNum":" 1012","line":"static inline Vec8f approx_recipr(Vec8f const & a) {"},
{"lineNum":" 1013","line":"    return Vec8f(approx_recipr(a.get_low()), approx_recipr(a.get_high()));"},
{"lineNum":" 1014","line":"}"},
{"lineNum":" 1015","line":""},
{"lineNum":" 1016","line":"// approximate reciprocal squareroot (Faster than 1.f / sqrt(a). Relative accuracy better than 2^-11)"},
{"lineNum":" 1017","line":"static inline Vec8f approx_rsqrt(Vec8f const & a) {"},
{"lineNum":" 1018","line":"    return Vec8f(approx_rsqrt(a.get_low()), approx_rsqrt(a.get_high()));"},
{"lineNum":" 1019","line":"}"},
{"lineNum":" 1020","line":""},
{"lineNum":" 1021","line":"// Fused multiply and add functions"},
{"lineNum":" 1022","line":""},
{"lineNum":" 1023","line":"// Multiply and add"},
{"lineNum":" 1024","line":"static inline Vec8f mul_add(Vec8f const & a, Vec8f const & b, Vec8f const & c) {"},
{"lineNum":" 1025","line":"    return Vec8f(mul_add(a.get_low(),b.get_low(),c.get_low()), mul_add(a.get_high(),b.get_high(),c.get_high()));"},
{"lineNum":" 1026","line":"}"},
{"lineNum":" 1027","line":""},
{"lineNum":" 1028","line":"// Multiply and subtract"},
{"lineNum":" 1029","line":"static inline Vec8f mul_sub(Vec8f const & a, Vec8f const & b, Vec8f const & c) {"},
{"lineNum":" 1030","line":"    return Vec8f(mul_sub(a.get_low(),b.get_low(),c.get_low()), mul_sub(a.get_high(),b.get_high(),c.get_high()));"},
{"lineNum":" 1031","line":"}"},
{"lineNum":" 1032","line":""},
{"lineNum":" 1033","line":"// Multiply and inverse subtract"},
{"lineNum":" 1034","line":"static inline Vec8f nmul_add(Vec8f const & a, Vec8f const & b, Vec8f const & c) {"},
{"lineNum":" 1035","line":"    return Vec8f(nmul_add(a.get_low(),b.get_low(),c.get_low()), nmul_add(a.get_high(),b.get_high(),c.get_high()));"},
{"lineNum":" 1036","line":"}"},
{"lineNum":" 1037","line":""},
{"lineNum":" 1038","line":""},
{"lineNum":" 1039","line":"// Multiply and subtract with extra precision on the intermediate calculations,"},
{"lineNum":" 1040","line":"// even if FMA instructions not supported, using Veltkamp-Dekker split"},
{"lineNum":" 1041","line":"static inline Vec8f mul_sub_x(Vec8f const & a, Vec8f const & b, Vec8f const & c) {"},
{"lineNum":" 1042","line":"    return Vec8f(mul_sub_x(a.get_low(),b.get_low(),c.get_low()), mul_sub_x(a.get_high(),b.get_high(),c.get_high()));"},
{"lineNum":" 1043","line":"}"},
{"lineNum":" 1044","line":""},
{"lineNum":" 1045","line":""},
{"lineNum":" 1046","line":"// Math functions using fast bit manipulation"},
{"lineNum":" 1047","line":""},
{"lineNum":" 1048","line":"#if defined(VECTORI256_H) ||  defined(VECTORI256E_H)  // 256 bit integer vectors are available"},
{"lineNum":" 1049","line":"// Extract the exponent as an integer"},
{"lineNum":" 1050","line":"// exponent(a) = floor(log2(abs(a)));"},
{"lineNum":" 1051","line":"// exponent(1.0f) = 0, exponent(0.0f) = -127, exponent(INF) = +128, exponent(NAN) = +128"},
{"lineNum":" 1052","line":"static inline Vec8i exponent(Vec8f const & a) {"},
{"lineNum":" 1053","line":"    return Vec8i(exponent(a.get_low()), exponent(a.get_high()));"},
{"lineNum":" 1054","line":"}"},
{"lineNum":" 1055","line":""},
{"lineNum":" 1056","line":"// Fast calculation of pow(2,n) with n integer"},
{"lineNum":" 1057","line":"// n  =    0 gives 1.0f"},
{"lineNum":" 1058","line":"// n >=  128 gives +INF"},
{"lineNum":" 1059","line":"// n <= -127 gives 0.0f"},
{"lineNum":" 1060","line":"// This function will never produce denormals, and never raise exceptions"},
{"lineNum":" 1061","line":"static inline Vec8f exp2(Vec8i const & a) {"},
{"lineNum":" 1062","line":"    return Vec8f(exp2(a.get_low()), exp2(a.get_high()));"},
{"lineNum":" 1063","line":"}"},
{"lineNum":" 1064","line":"//static Vec8f exp2(Vec8f const & x); // defined in vectormath_exp.h"},
{"lineNum":" 1065","line":"#endif"},
{"lineNum":" 1066","line":""},
{"lineNum":" 1067","line":"// Extract the fraction part of a floating point number"},
{"lineNum":" 1068","line":"// a = 2^exponent(a) * fraction(a), except for a = 0"},
{"lineNum":" 1069","line":"// fraction(1.0f) = 1.0f, fraction(5.0f) = 1.25f"},
{"lineNum":" 1070","line":"static inline Vec8f fraction(Vec8f const & a) {"},
{"lineNum":" 1071","line":"    return Vec8f(fraction(a.get_low()), fraction(a.get_high()));"},
{"lineNum":" 1072","line":"}"},
{"lineNum":" 1073","line":""},
{"lineNum":" 1074","line":""},
{"lineNum":" 1075","line":"// Categorization functions"},
{"lineNum":" 1076","line":""},
{"lineNum":" 1077","line":"// Function sign_bit: gives true for elements that have the sign bit set"},
{"lineNum":" 1078","line":"// even for -0.0f, -INF and -NAN"},
{"lineNum":" 1079","line":"// Note that sign_bit(Vec8f(-0.0f)) gives true, while Vec8f(-0.0f) < Vec8f(0.0f) gives false"},
{"lineNum":" 1080","line":"// (the underscore in the name avoids a conflict with a macro in Intel\'s mathimf.h)"},
{"lineNum":" 1081","line":"static inline Vec8fb sign_bit(Vec8f const & a) {"},
{"lineNum":" 1082","line":"    return Vec8fb(sign_bit(a.get_low()), sign_bit(a.get_high()));"},
{"lineNum":" 1083","line":"}"},
{"lineNum":" 1084","line":""},
{"lineNum":" 1085","line":"// Function sign_combine: changes the sign of a when b has the sign bit set"},
{"lineNum":" 1086","line":"// same as select(sign_bit(b), -a, a)"},
{"lineNum":" 1087","line":"static inline Vec8f sign_combine(Vec8f const & a, Vec8f const & b) {"},
{"lineNum":" 1088","line":"    return Vec8f(sign_combine(a.get_low(), b.get_low()), sign_combine(a.get_high(), b.get_high()));"},
{"lineNum":" 1089","line":"}"},
{"lineNum":" 1090","line":""},
{"lineNum":" 1091","line":"// Function is_finite: gives true for elements that are normal, denormal or zero,"},
{"lineNum":" 1092","line":"// false for INF and NAN"},
{"lineNum":" 1093","line":"// (the underscore in the name avoids a conflict with a macro in Intel\'s mathimf.h)"},
{"lineNum":" 1094","line":"static inline Vec8fb is_finite(Vec8f const & a) {"},
{"lineNum":" 1095","line":"    return Vec8fb(is_finite(a.get_low()), is_finite(a.get_high()));"},
{"lineNum":" 1096","line":"}"},
{"lineNum":" 1097","line":""},
{"lineNum":" 1098","line":"// Function is_inf: gives true for elements that are +INF or -INF"},
{"lineNum":" 1099","line":"// false for finite numbers and NAN"},
{"lineNum":" 1100","line":"// (the underscore in the name avoids a conflict with a macro in Intel\'s mathimf.h)"},
{"lineNum":" 1101","line":"static inline Vec8fb is_inf(Vec8f const & a) {"},
{"lineNum":" 1102","line":"    return Vec8fb(is_inf(a.get_low()), is_inf(a.get_high()));"},
{"lineNum":" 1103","line":"}"},
{"lineNum":" 1104","line":""},
{"lineNum":" 1105","line":"// Function is_nan: gives true for elements that are +NAN or -NAN"},
{"lineNum":" 1106","line":"// false for finite numbers and +/-INF"},
{"lineNum":" 1107","line":"// (the underscore in the name avoids a conflict with a macro in Intel\'s mathimf.h)"},
{"lineNum":" 1108","line":"static inline Vec8fb is_nan(Vec8f const & a) {"},
{"lineNum":" 1109","line":"    return Vec8fb(is_nan(a.get_low()), is_nan(a.get_high()));"},
{"lineNum":" 1110","line":"}"},
{"lineNum":" 1111","line":""},
{"lineNum":" 1112","line":"// Function is_subnormal: gives true for elements that are denormal (subnormal)"},
{"lineNum":" 1113","line":"// false for finite numbers, zero, NAN and INF"},
{"lineNum":" 1114","line":"static inline Vec8fb is_subnormal(Vec8f const & a) {"},
{"lineNum":" 1115","line":"    return Vec8fb(is_subnormal(a.get_low()), is_subnormal(a.get_high()));"},
{"lineNum":" 1116","line":"}"},
{"lineNum":" 1117","line":""},
{"lineNum":" 1118","line":"// Function is_zero_or_subnormal: gives true for elements that are zero or subnormal (denormal)"},
{"lineNum":" 1119","line":"// false for finite numbers, NAN and INF"},
{"lineNum":" 1120","line":"static inline Vec8fb is_zero_or_subnormal(Vec8f const & a) {"},
{"lineNum":" 1121","line":"    return Vec8fb(is_zero_or_subnormal(a.get_low()), is_zero_or_subnormal(a.get_high()));"},
{"lineNum":" 1122","line":"}"},
{"lineNum":" 1123","line":""},
{"lineNum":" 1124","line":"// Function infinite4f: returns a vector where all elements are +INF"},
{"lineNum":" 1125","line":"static inline Vec8f infinite8f() {"},
{"lineNum":" 1126","line":"    return constant8f<0x7F800000,0x7F800000,0x7F800000,0x7F800000,0x7F800000,0x7F800000,0x7F800000,0x7F800000>();"},
{"lineNum":" 1127","line":"}"},
{"lineNum":" 1128","line":""},
{"lineNum":" 1129","line":"// Function nan4f: returns a vector where all elements are +NAN (quiet)"},
{"lineNum":" 1130","line":"static inline Vec8f nan8f(int n = 0x10) {"},
{"lineNum":" 1131","line":"    return Vec8f(nan4f(n), nan4f(n));"},
{"lineNum":" 1132","line":"}"},
{"lineNum":" 1133","line":""},
{"lineNum":" 1134","line":"// change signs on vectors Vec8f"},
{"lineNum":" 1135","line":"// Each index i0 - i7 is 1 for changing sign on the corresponding element, 0 for no change"},
{"lineNum":" 1136","line":"template <int i0, int i1, int i2, int i3, int i4, int i5, int i6, int i7>"},
{"lineNum":" 1137","line":"static inline Vec8f change_sign(Vec8f const & a) {"},
{"lineNum":" 1138","line":"    if ((i0 | i1 | i2 | i3 | i4 | i5 | i6 | i7) == 0) return a;"},
{"lineNum":" 1139","line":"    Vec4f lo = change_sign<i0,i1,i2,i3>(a.get_low());"},
{"lineNum":" 1140","line":"    Vec4f hi = change_sign<i4,i5,i6,i7>(a.get_high());"},
{"lineNum":" 1141","line":"    return Vec8f(lo, hi);"},
{"lineNum":" 1142","line":"}"},
{"lineNum":" 1143","line":""},
{"lineNum":" 1144","line":""},
{"lineNum":" 1145","line":"/*****************************************************************************"},
{"lineNum":" 1146","line":"*"},
{"lineNum":" 1147","line":"*          Vec2d: Vector of 2 double precision floating point values"},
{"lineNum":" 1148","line":"*"},
{"lineNum":" 1149","line":"*****************************************************************************/"},
{"lineNum":" 1150","line":""},
{"lineNum":" 1151","line":"class Vec4d : public Vec256de {"},
{"lineNum":" 1152","line":"public:"},
{"lineNum":" 1153","line":"    // Default constructor:"},
{"lineNum":" 1154","line":"    Vec4d() {"},
{"lineNum":" 1155","line":"    }"},
{"lineNum":" 1156","line":"    // Constructor to broadcast the same value into all elements:"},
{"lineNum":" 1157","line":"    Vec4d(double d) {"},
{"lineNum":" 1158","line":"        y1 = y0 = _mm_set1_pd(d);","class":"lineNoCov","hits":"0","possible_hits":"99",},
{"lineNum":" 1159","line":"    }"},
{"lineNum":" 1160","line":"    // Constructor to build from all elements:"},
{"lineNum":" 1161","line":"    Vec4d(double d0, double d1, double d2, double d3) {"},
{"lineNum":" 1162","line":"        y0 = _mm_setr_pd(d0, d1);"},
{"lineNum":" 1163","line":"        y1 = _mm_setr_pd(d2, d3);"},
{"lineNum":" 1164","line":"    }"},
{"lineNum":" 1165","line":"    // Constructor to build from two Vec4f:"},
{"lineNum":" 1166","line":"    Vec4d(Vec2d const & a0, Vec2d const & a1) {"},
{"lineNum":" 1167","line":"        y0 = a0;  y1 = a1;"},
{"lineNum":" 1168","line":"    }"},
{"lineNum":" 1169","line":"    // Constructor to convert from type Vec256de"},
{"lineNum":" 1170","line":"    Vec4d(Vec256de const & x) {"},
{"lineNum":" 1171","line":"        y0 = x.get_low();"},
{"lineNum":" 1172","line":"        y1 = x.get_high();"},
{"lineNum":" 1173","line":"    }"},
{"lineNum":" 1174","line":"    // Assignment operator to convert from type Vec256de"},
{"lineNum":" 1175","line":"    Vec4d & operator = (Vec256de const & x) {"},
{"lineNum":" 1176","line":"        y0 = x.get_low();"},
{"lineNum":" 1177","line":"        y1 = x.get_high();"},
{"lineNum":" 1178","line":"        return *this;"},
{"lineNum":" 1179","line":"    }"},
{"lineNum":" 1180","line":"    // Member function to load from array (unaligned)"},
{"lineNum":" 1181","line":"    Vec4d & load(double const * p) {"},
{"lineNum":" 1182","line":"        y0 = _mm_loadu_pd(p);"},
{"lineNum":" 1183","line":"        y1 = _mm_loadu_pd(p+2);"},
{"lineNum":" 1184","line":"        return *this;"},
{"lineNum":" 1185","line":"    }"},
{"lineNum":" 1186","line":"    // Member function to load from array, aligned by 32"},
{"lineNum":" 1187","line":"    // You may use load_a instead of load if you are certain that p points to an address"},
{"lineNum":" 1188","line":"    // divisible by 32"},
{"lineNum":" 1189","line":"    Vec4d & load_a(double const * p) {"},
{"lineNum":" 1190","line":"        y0 = _mm_load_pd(p);","class":"lineNoCov","hits":"0","possible_hits":"150",},
{"lineNum":" 1191","line":"        y1 = _mm_load_pd(p+2);","class":"lineNoCov","hits":"0","possible_hits":"150",},
{"lineNum":" 1192","line":"        return *this;"},
{"lineNum":" 1193","line":"    }"},
{"lineNum":" 1194","line":"    // Member function to store into array (unaligned)"},
{"lineNum":" 1195","line":"    void store(double * p) const {"},
{"lineNum":" 1196","line":"        _mm_storeu_pd(p,   y0);"},
{"lineNum":" 1197","line":"        _mm_storeu_pd(p+2, y1);"},
{"lineNum":" 1198","line":"    }"},
{"lineNum":" 1199","line":"    // Member function to store into array, aligned by 32"},
{"lineNum":" 1200","line":"    // You may use store_a instead of store if you are certain that p points to an address"},
{"lineNum":" 1201","line":"    // divisible by 32"},
{"lineNum":" 1202","line":"    void store_a(double * p) const {"},
{"lineNum":" 1203","line":"        _mm_store_pd(p,   y0);","class":"lineNoCov","hits":"0","possible_hits":"140",},
{"lineNum":" 1204","line":"        _mm_store_pd(p+2, y1);","class":"lineNoCov","hits":"0","possible_hits":"138",},
{"lineNum":" 1205","line":"    }"},
{"lineNum":" 1206","line":"    // Partial load. Load n elements and set the rest to 0"},
{"lineNum":" 1207","line":"    Vec4d & load_partial(int n, double const * p) {"},
{"lineNum":" 1208","line":"        if (n > 0 && n <= 2) {"},
{"lineNum":" 1209","line":"            *this = Vec4d(Vec2d().load_partial(n, p), _mm_setzero_pd());"},
{"lineNum":" 1210","line":"        }"},
{"lineNum":" 1211","line":"        else if (n > 2 && n <= 4) {"},
{"lineNum":" 1212","line":"            *this = Vec4d(Vec2d().load(p), Vec2d().load_partial(n - 2, p + 2));"},
{"lineNum":" 1213","line":"        }"},
{"lineNum":" 1214","line":"        else {"},
{"lineNum":" 1215","line":"            y1 = y0 = _mm_setzero_pd();"},
{"lineNum":" 1216","line":"        }"},
{"lineNum":" 1217","line":"        return *this;"},
{"lineNum":" 1218","line":"    }"},
{"lineNum":" 1219","line":"    // Partial store. Store n elements"},
{"lineNum":" 1220","line":"    void store_partial(int n, double * p) const {"},
{"lineNum":" 1221","line":"        if (n <= 2) {"},
{"lineNum":" 1222","line":"            get_low().store_partial(n, p);"},
{"lineNum":" 1223","line":"        }"},
{"lineNum":" 1224","line":"        else if (n <= 4) {"},
{"lineNum":" 1225","line":"            get_low().store(p);"},
{"lineNum":" 1226","line":"            get_high().store_partial(n - 2, p + 2);"},
{"lineNum":" 1227","line":"        }"},
{"lineNum":" 1228","line":"    }"},
{"lineNum":" 1229","line":"    Vec4d & cutoff(int n) {"},
{"lineNum":" 1230","line":"        if (uint32_t(n) >= 4) return *this;"},
{"lineNum":" 1231","line":"        else if (n >= 2) {"},
{"lineNum":" 1232","line":"            y1 = Vec2d(y1).cutoff(n - 2);"},
{"lineNum":" 1233","line":"        }"},
{"lineNum":" 1234","line":"        else {"},
{"lineNum":" 1235","line":"            y0 = Vec2d(y0).cutoff(n);"},
{"lineNum":" 1236","line":"            y1 = Vec2d(0.0);"},
{"lineNum":" 1237","line":"        }"},
{"lineNum":" 1238","line":"        return *this;"},
{"lineNum":" 1239","line":"    }"},
{"lineNum":" 1240","line":"    // Member function to change a single element in vector"},
{"lineNum":" 1241","line":"    // Note: This function is inefficient. Use load function if changing more than one element"},
{"lineNum":" 1242","line":"    Vec4d const & insert(int index, double value) {"},
{"lineNum":" 1243","line":"        if ((uint32_t)index < 2) {"},
{"lineNum":" 1244","line":"            y0 = Vec2d(y0).insert(index, value);"},
{"lineNum":" 1245","line":"        }"},
{"lineNum":" 1246","line":"        else {"},
{"lineNum":" 1247","line":"            y1 = Vec2d(y1).insert(index-2, value);"},
{"lineNum":" 1248","line":"        }"},
{"lineNum":" 1249","line":"        return *this;"},
{"lineNum":" 1250","line":"    }"},
{"lineNum":" 1251","line":"    // Member function extract a single element from vector"},
{"lineNum":" 1252","line":"    // Note: This function is inefficient. Use store function if extracting more than one element"},
{"lineNum":" 1253","line":"    double extract(int index) const {"},
{"lineNum":" 1254","line":"        if ((uint32_t)index < 2) {"},
{"lineNum":" 1255","line":"            return Vec2d(y0).extract(index);"},
{"lineNum":" 1256","line":"        }"},
{"lineNum":" 1257","line":"        else {"},
{"lineNum":" 1258","line":"            return Vec2d(y1).extract(index-2);"},
{"lineNum":" 1259","line":"        }"},
{"lineNum":" 1260","line":"    }"},
{"lineNum":" 1261","line":"    // Extract a single element. Use store function if extracting more than one element."},
{"lineNum":" 1262","line":"    // Operator [] can only read an element, not write."},
{"lineNum":" 1263","line":"    double operator [] (int index) const {"},
{"lineNum":" 1264","line":"        return extract(index);"},
{"lineNum":" 1265","line":"    }"},
{"lineNum":" 1266","line":"    // Member functions to split into two Vec2d:"},
{"lineNum":" 1267","line":"    Vec2d get_low() const {"},
{"lineNum":" 1268","line":"        return y0;"},
{"lineNum":" 1269","line":"    }"},
{"lineNum":" 1270","line":"    Vec2d get_high() const {"},
{"lineNum":" 1271","line":"        return y1;"},
{"lineNum":" 1272","line":"    }"},
{"lineNum":" 1273","line":"    static int size () {"},
{"lineNum":" 1274","line":"        return 4;"},
{"lineNum":" 1275","line":"    }"},
{"lineNum":" 1276","line":"    static int elementtype() {"},
{"lineNum":" 1277","line":"        return 17;"},
{"lineNum":" 1278","line":"    }"},
{"lineNum":" 1279","line":"};"},
{"lineNum":" 1280","line":""},
{"lineNum":" 1281","line":""},
{"lineNum":" 1282","line":""},
{"lineNum":" 1283","line":"/*****************************************************************************"},
{"lineNum":" 1284","line":"*"},
{"lineNum":" 1285","line":"*          Operators for Vec4d"},
{"lineNum":" 1286","line":"*"},
{"lineNum":" 1287","line":"*****************************************************************************/"},
{"lineNum":" 1288","line":""},
{"lineNum":" 1289","line":"// vector operator + : add element by element"},
{"lineNum":" 1290","line":"static inline Vec4d operator + (Vec4d const & a, Vec4d const & b) {"},
{"lineNum":" 1291","line":"    return Vec4d(a.get_low() + b.get_low(), a.get_high() + b.get_high());"},
{"lineNum":" 1292","line":"}"},
{"lineNum":" 1293","line":""},
{"lineNum":" 1294","line":"// vector operator + : add vector and scalar"},
{"lineNum":" 1295","line":"static inline Vec4d operator + (Vec4d const & a, double b) {"},
{"lineNum":" 1296","line":"    return a + Vec4d(b);"},
{"lineNum":" 1297","line":"}"},
{"lineNum":" 1298","line":"static inline Vec4d operator + (double a, Vec4d const & b) {"},
{"lineNum":" 1299","line":"    return Vec4d(a) + b;"},
{"lineNum":" 1300","line":"}"},
{"lineNum":" 1301","line":""},
{"lineNum":" 1302","line":"// vector operator += : add"},
{"lineNum":" 1303","line":"static inline Vec4d & operator += (Vec4d & a, Vec4d const & b) {"},
{"lineNum":" 1304","line":"    a = a + b;"},
{"lineNum":" 1305","line":"    return a;"},
{"lineNum":" 1306","line":"}"},
{"lineNum":" 1307","line":""},
{"lineNum":" 1308","line":"// postfix operator ++"},
{"lineNum":" 1309","line":"static inline Vec4d operator ++ (Vec4d & a, int) {"},
{"lineNum":" 1310","line":"    Vec4d a0 = a;"},
{"lineNum":" 1311","line":"    a = a + 1.0;"},
{"lineNum":" 1312","line":"    return a0;"},
{"lineNum":" 1313","line":"}"},
{"lineNum":" 1314","line":""},
{"lineNum":" 1315","line":"// prefix operator ++"},
{"lineNum":" 1316","line":"static inline Vec4d & operator ++ (Vec4d & a) {"},
{"lineNum":" 1317","line":"    a = a + 1.0;"},
{"lineNum":" 1318","line":"    return a;"},
{"lineNum":" 1319","line":"}"},
{"lineNum":" 1320","line":""},
{"lineNum":" 1321","line":"// vector operator - : subtract element by element"},
{"lineNum":" 1322","line":"static inline Vec4d operator - (Vec4d const & a, Vec4d const & b) {"},
{"lineNum":" 1323","line":"    return Vec4d(a.get_low() - b.get_low(), a.get_high() - b.get_high());"},
{"lineNum":" 1324","line":"}"},
{"lineNum":" 1325","line":""},
{"lineNum":" 1326","line":"// vector operator - : subtract vector and scalar"},
{"lineNum":" 1327","line":"static inline Vec4d operator - (Vec4d const & a, double b) {"},
{"lineNum":" 1328","line":"    return a - Vec4d(b);"},
{"lineNum":" 1329","line":"}"},
{"lineNum":" 1330","line":"static inline Vec4d operator - (double a, Vec4d const & b) {"},
{"lineNum":" 1331","line":"    return Vec4d(a) - b;"},
{"lineNum":" 1332","line":"}"},
{"lineNum":" 1333","line":""},
{"lineNum":" 1334","line":"// vector operator - : unary minus"},
{"lineNum":" 1335","line":"// Change sign bit, even for 0, INF and NAN"},
{"lineNum":" 1336","line":"static inline Vec4d operator - (Vec4d const & a) {"},
{"lineNum":" 1337","line":"    return Vec4d(-a.get_low(), -a.get_high());"},
{"lineNum":" 1338","line":"}"},
{"lineNum":" 1339","line":""},
{"lineNum":" 1340","line":"// vector operator -= : subtract"},
{"lineNum":" 1341","line":"static inline Vec4d & operator -= (Vec4d & a, Vec4d const & b) {"},
{"lineNum":" 1342","line":"    a = a - b;"},
{"lineNum":" 1343","line":"    return a;"},
{"lineNum":" 1344","line":"}"},
{"lineNum":" 1345","line":""},
{"lineNum":" 1346","line":"// postfix operator --"},
{"lineNum":" 1347","line":"static inline Vec4d operator -- (Vec4d & a, int) {"},
{"lineNum":" 1348","line":"    Vec4d a0 = a;"},
{"lineNum":" 1349","line":"    a = a - 1.0;"},
{"lineNum":" 1350","line":"    return a0;"},
{"lineNum":" 1351","line":"}"},
{"lineNum":" 1352","line":""},
{"lineNum":" 1353","line":"// prefix operator --"},
{"lineNum":" 1354","line":"static inline Vec4d & operator -- (Vec4d & a) {"},
{"lineNum":" 1355","line":"    a = a - 1.0;"},
{"lineNum":" 1356","line":"    return a;"},
{"lineNum":" 1357","line":"}"},
{"lineNum":" 1358","line":""},
{"lineNum":" 1359","line":"// vector operator * : multiply element by element"},
{"lineNum":" 1360","line":"static inline Vec4d operator * (Vec4d const & a, Vec4d const & b) {"},
{"lineNum":" 1361","line":"    return Vec4d(a.get_low() * b.get_low(), a.get_high() * b.get_high());"},
{"lineNum":" 1362","line":"}"},
{"lineNum":" 1363","line":""},
{"lineNum":" 1364","line":"// vector operator * : multiply vector and scalar"},
{"lineNum":" 1365","line":"static inline Vec4d operator * (Vec4d const & a, double b) {"},
{"lineNum":" 1366","line":"    return a * Vec4d(b);"},
{"lineNum":" 1367","line":"}"},
{"lineNum":" 1368","line":"static inline Vec4d operator * (double a, Vec4d const & b) {"},
{"lineNum":" 1369","line":"    return Vec4d(a) * b;"},
{"lineNum":" 1370","line":"}"},
{"lineNum":" 1371","line":""},
{"lineNum":" 1372","line":"// vector operator *= : multiply"},
{"lineNum":" 1373","line":"static inline Vec4d & operator *= (Vec4d & a, Vec4d const & b) {"},
{"lineNum":" 1374","line":"    a = a * b;"},
{"lineNum":" 1375","line":"    return a;"},
{"lineNum":" 1376","line":"}"},
{"lineNum":" 1377","line":""},
{"lineNum":" 1378","line":"// vector operator / : divide all elements by same integer"},
{"lineNum":" 1379","line":"static inline Vec4d operator / (Vec4d const & a, Vec4d const & b) {"},
{"lineNum":" 1380","line":"    return Vec4d(a.get_low() / b.get_low(), a.get_high() / b.get_high());"},
{"lineNum":" 1381","line":"}"},
{"lineNum":" 1382","line":""},
{"lineNum":" 1383","line":"// vector operator / : divide vector and scalar"},
{"lineNum":" 1384","line":"static inline Vec4d operator / (Vec4d const & a, double b) {"},
{"lineNum":" 1385","line":"    return a / Vec4d(b);"},
{"lineNum":" 1386","line":"}"},
{"lineNum":" 1387","line":"static inline Vec4d operator / (double a, Vec4d const & b) {"},
{"lineNum":" 1388","line":"    return Vec4d(a) / b;"},
{"lineNum":" 1389","line":"}"},
{"lineNum":" 1390","line":""},
{"lineNum":" 1391","line":"// vector operator /= : divide"},
{"lineNum":" 1392","line":"static inline Vec4d & operator /= (Vec4d & a, Vec4d const & b) {"},
{"lineNum":" 1393","line":"    a = a / b;"},
{"lineNum":" 1394","line":"    return a;"},
{"lineNum":" 1395","line":"}"},
{"lineNum":" 1396","line":""},
{"lineNum":" 1397","line":"// vector operator == : returns true for elements for which a == b"},
{"lineNum":" 1398","line":"static inline Vec4db operator == (Vec4d const & a, Vec4d const & b) {"},
{"lineNum":" 1399","line":"    return Vec4db(a.get_low() == b.get_low(), a.get_high() == b.get_high());"},
{"lineNum":" 1400","line":"}"},
{"lineNum":" 1401","line":""},
{"lineNum":" 1402","line":"// vector operator != : returns true for elements for which a != b"},
{"lineNum":" 1403","line":"static inline Vec4db operator != (Vec4d const & a, Vec4d const & b) {"},
{"lineNum":" 1404","line":"    return Vec4db(a.get_low() != b.get_low(), a.get_high() != b.get_high());"},
{"lineNum":" 1405","line":"}"},
{"lineNum":" 1406","line":""},
{"lineNum":" 1407","line":"// vector operator < : returns true for elements for which a < b"},
{"lineNum":" 1408","line":"static inline Vec4db operator < (Vec4d const & a, Vec4d const & b) {"},
{"lineNum":" 1409","line":"    return Vec4db(a.get_low() < b.get_low(), a.get_high() < b.get_high());"},
{"lineNum":" 1410","line":"}"},
{"lineNum":" 1411","line":""},
{"lineNum":" 1412","line":"// vector operator <= : returns true for elements for which a <= b"},
{"lineNum":" 1413","line":"static inline Vec4db operator <= (Vec4d const & a, Vec4d const & b) {"},
{"lineNum":" 1414","line":"    return Vec4db(a.get_low() <= b.get_low(), a.get_high() <= b.get_high());"},
{"lineNum":" 1415","line":"}"},
{"lineNum":" 1416","line":""},
{"lineNum":" 1417","line":"// vector operator > : returns true for elements for which a > b"},
{"lineNum":" 1418","line":"static inline Vec4db operator > (Vec4d const & a, Vec4d const & b) {"},
{"lineNum":" 1419","line":"    return Vec4db(a.get_low() > b.get_low(), a.get_high() > b.get_high());"},
{"lineNum":" 1420","line":"}"},
{"lineNum":" 1421","line":""},
{"lineNum":" 1422","line":"// vector operator >= : returns true for elements for which a >= b"},
{"lineNum":" 1423","line":"static inline Vec4db operator >= (Vec4d const & a, Vec4d const & b) {"},
{"lineNum":" 1424","line":"    return Vec4db(a.get_low() >= b.get_low(), a.get_high() >= b.get_high());"},
{"lineNum":" 1425","line":"}"},
{"lineNum":" 1426","line":""},
{"lineNum":" 1427","line":"// Bitwise logical operators"},
{"lineNum":" 1428","line":""},
{"lineNum":" 1429","line":"// vector operator & : bitwise and"},
{"lineNum":" 1430","line":"static inline Vec4d operator & (Vec4d const & a, Vec4d const & b) {"},
{"lineNum":" 1431","line":"    return Vec4d(a.get_low() & b.get_low(), a.get_high() & b.get_high());"},
{"lineNum":" 1432","line":"}"},
{"lineNum":" 1433","line":""},
{"lineNum":" 1434","line":"// vector operator &= : bitwise and"},
{"lineNum":" 1435","line":"static inline Vec4d & operator &= (Vec4d & a, Vec4d const & b) {"},
{"lineNum":" 1436","line":"    a = a & b;"},
{"lineNum":" 1437","line":"    return a;"},
{"lineNum":" 1438","line":"}"},
{"lineNum":" 1439","line":""},
{"lineNum":" 1440","line":"// vector operator & : bitwise and of Vec4d and Vec4db"},
{"lineNum":" 1441","line":"static inline Vec4d operator & (Vec4d const & a, Vec4db const & b) {"},
{"lineNum":" 1442","line":"    return Vec4d(a.get_low() & b.get_low(), a.get_high() & b.get_high());"},
{"lineNum":" 1443","line":"}"},
{"lineNum":" 1444","line":"static inline Vec4d operator & (Vec4db const & a, Vec4d const & b) {"},
{"lineNum":" 1445","line":"    return Vec4d(a.get_low() & b.get_low(), a.get_high() & b.get_high());"},
{"lineNum":" 1446","line":"}"},
{"lineNum":" 1447","line":""},
{"lineNum":" 1448","line":"// vector operator | : bitwise or"},
{"lineNum":" 1449","line":"static inline Vec4d operator | (Vec4d const & a, Vec4d const & b) {"},
{"lineNum":" 1450","line":"    return Vec4d(a.get_low() | b.get_low(), a.get_high() | b.get_high());"},
{"lineNum":" 1451","line":"}"},
{"lineNum":" 1452","line":""},
{"lineNum":" 1453","line":"// vector operator |= : bitwise or"},
{"lineNum":" 1454","line":"static inline Vec4d & operator |= (Vec4d & a, Vec4d const & b) {"},
{"lineNum":" 1455","line":"    a = a | b;"},
{"lineNum":" 1456","line":"    return a;"},
{"lineNum":" 1457","line":"}"},
{"lineNum":" 1458","line":""},
{"lineNum":" 1459","line":"// vector operator ^ : bitwise xor"},
{"lineNum":" 1460","line":"static inline Vec4d operator ^ (Vec4d const & a, Vec4d const & b) {"},
{"lineNum":" 1461","line":"    return Vec4d(a.get_low() ^ b.get_low(), a.get_high() ^ b.get_high());"},
{"lineNum":" 1462","line":"}"},
{"lineNum":" 1463","line":""},
{"lineNum":" 1464","line":"// vector operator ^= : bitwise xor"},
{"lineNum":" 1465","line":"static inline Vec4d & operator ^= (Vec4d & a, Vec4d const & b) {"},
{"lineNum":" 1466","line":"    a = a ^ b;"},
{"lineNum":" 1467","line":"    return a;"},
{"lineNum":" 1468","line":"}"},
{"lineNum":" 1469","line":""},
{"lineNum":" 1470","line":"// vector operator ! : logical not. Returns Boolean vector"},
{"lineNum":" 1471","line":"static inline Vec4db operator ! (Vec4d const & a) {"},
{"lineNum":" 1472","line":"    return Vec4db(!a.get_low(), !a.get_high());"},
{"lineNum":" 1473","line":"}"},
{"lineNum":" 1474","line":""},
{"lineNum":" 1475","line":""},
{"lineNum":" 1476","line":"/*****************************************************************************"},
{"lineNum":" 1477","line":"*"},
{"lineNum":" 1478","line":"*          Functions for Vec4d"},
{"lineNum":" 1479","line":"*"},
{"lineNum":" 1480","line":"*****************************************************************************/"},
{"lineNum":" 1481","line":""},
{"lineNum":" 1482","line":"// Select between two operands. Corresponds to this pseudocode:"},
{"lineNum":" 1483","line":"// for (int i = 0; i < 2; i++) result[i] = s[i] ? a[i] : b[i];"},
{"lineNum":" 1484","line":"// Each byte in s must be either 0 (false) or 0xFFFFFFFFFFFFFFFF (true)."},
{"lineNum":" 1485","line":"// No other values are allowed."},
{"lineNum":" 1486","line":"static inline Vec4d select (Vec4db const & s, Vec4d const & a, Vec4d const & b) {"},
{"lineNum":" 1487","line":"    return Vec4d(select(s.get_low(), a.get_low(), b.get_low()), select(s.get_high(), a.get_high(), b.get_high()));"},
{"lineNum":" 1488","line":"}"},
{"lineNum":" 1489","line":""},
{"lineNum":" 1490","line":"// Conditional add: For all vector elements i: result[i] = f[i] ? (a[i] + b[i]) : a[i]"},
{"lineNum":" 1491","line":"static inline Vec4d if_add (Vec4db const & f, Vec4d const & a, Vec4d const & b) {"},
{"lineNum":" 1492","line":"    return a + (Vec4d(f) & b);"},
{"lineNum":" 1493","line":"}"},
{"lineNum":" 1494","line":""},
{"lineNum":" 1495","line":"// Conditional sub: For all vector elements i: result[i] = f[i] ? (a[i] - b[i]) : a[i]"},
{"lineNum":" 1496","line":"static inline Vec4d if_sub (Vec4db const & f, Vec4d const & a, Vec4d const & b) {"},
{"lineNum":" 1497","line":"    return a - (Vec4d(f) & b);"},
{"lineNum":" 1498","line":"}"},
{"lineNum":" 1499","line":""},
{"lineNum":" 1500","line":"// Conditional multiply: For all vector elements i: result[i] = f[i] ? (a[i] * b[i]) : a[i]"},
{"lineNum":" 1501","line":"static inline Vec4d if_mul (Vec4db const & f, Vec4d const & a, Vec4d const & b) {"},
{"lineNum":" 1502","line":"    return a * select(f, b, 1.f);"},
{"lineNum":" 1503","line":"}"},
{"lineNum":" 1504","line":""},
{"lineNum":" 1505","line":"// Conditional divide: For all vector elements i: result[i] = f[i] ? (a[i] / b[i]) : a[i]"},
{"lineNum":" 1506","line":"static inline Vec4d if_div (Vec4db const & f, Vec4d const & a, Vec4d const & b) {"},
{"lineNum":" 1507","line":"    return a / select(f, b, 1.);"},
{"lineNum":" 1508","line":"}"},
{"lineNum":" 1509","line":""},
{"lineNum":" 1510","line":""},
{"lineNum":" 1511","line":"// General arithmetic functions, etc."},
{"lineNum":" 1512","line":""},
{"lineNum":" 1513","line":"// Horizontal add: Calculates the sum of all vector elements."},
{"lineNum":" 1514","line":"static inline double horizontal_add (Vec4d const & a) {"},
{"lineNum":" 1515","line":"    return horizontal_add(a.get_low() + a.get_high());"},
{"lineNum":" 1516","line":"}"},
{"lineNum":" 1517","line":""},
{"lineNum":" 1518","line":"// function max: a > b ? a : b"},
{"lineNum":" 1519","line":"static inline Vec4d max(Vec4d const & a, Vec4d const & b) {"},
{"lineNum":" 1520","line":"    return Vec4d(max(a.get_low(),b.get_low()), max(a.get_high(),b.get_high()));"},
{"lineNum":" 1521","line":"}"},
{"lineNum":" 1522","line":""},
{"lineNum":" 1523","line":"// function min: a < b ? a : b"},
{"lineNum":" 1524","line":"static inline Vec4d min(Vec4d const & a, Vec4d const & b) {"},
{"lineNum":" 1525","line":"    return Vec4d(min(a.get_low(),b.get_low()), min(a.get_high(),b.get_high()));"},
{"lineNum":" 1526","line":"}"},
{"lineNum":" 1527","line":""},
{"lineNum":" 1528","line":"// same as max, NAN-safe"},
{"lineNum":" 1529","line":"static inline Vec4d maximum(Vec4d const & a, Vec4d const & b) {"},
{"lineNum":" 1530","line":"    return Vec4d(maximum(a.get_low(),b.get_low()), maximum(a.get_high(),b.get_high()));"},
{"lineNum":" 1531","line":"}"},
{"lineNum":" 1532","line":""},
{"lineNum":" 1533","line":"// same as min, NAN-safe"},
{"lineNum":" 1534","line":"static inline Vec4d minimum(Vec4d const & a, Vec4d const & b) {"},
{"lineNum":" 1535","line":"    return Vec4d(minimum(a.get_low(),b.get_low()), minimum(a.get_high(),b.get_high()));"},
{"lineNum":" 1536","line":"}"},
{"lineNum":" 1537","line":""},
{"lineNum":" 1538","line":"// function abs: absolute value"},
{"lineNum":" 1539","line":"// Removes sign bit, even for -0.0f, -INF and -NAN"},
{"lineNum":" 1540","line":"static inline Vec4d abs(Vec4d const & a) {"},
{"lineNum":" 1541","line":"    return Vec4d(abs(a.get_low()), abs(a.get_high()));"},
{"lineNum":" 1542","line":"}"},
{"lineNum":" 1543","line":""},
{"lineNum":" 1544","line":"// function sqrt: square root"},
{"lineNum":" 1545","line":"static inline Vec4d sqrt(Vec4d const & a) {"},
{"lineNum":" 1546","line":"    return Vec4d(sqrt(a.get_low()), sqrt(a.get_high()));"},
{"lineNum":" 1547","line":"}"},
{"lineNum":" 1548","line":""},
{"lineNum":" 1549","line":"// function square: a * a"},
{"lineNum":" 1550","line":"static inline Vec4d square(Vec4d const & a) {"},
{"lineNum":" 1551","line":"    return Vec4d(square(a.get_low()), square(a.get_high()));"},
{"lineNum":" 1552","line":"}"},
{"lineNum":" 1553","line":""},
{"lineNum":" 1554","line":"// pow(Vec4d, int):"},
{"lineNum":" 1555","line":"// Raise floating point numbers to integer power n"},
{"lineNum":" 1556","line":"template <typename TT> static Vec4d pow(Vec4d const & a, TT const & n);"},
{"lineNum":" 1557","line":""},
{"lineNum":" 1558","line":"// Raise floating point numbers to integer power n"},
{"lineNum":" 1559","line":"template <>"},
{"lineNum":" 1560","line":"inline Vec4d pow<int>(Vec4d const & x0, int const & n) {"},
{"lineNum":" 1561","line":"    return pow_template_i<Vec4d>(x0, n);"},
{"lineNum":" 1562","line":"}"},
{"lineNum":" 1563","line":""},
{"lineNum":" 1564","line":"// allow conversion from unsigned int"},
{"lineNum":" 1565","line":"template <>"},
{"lineNum":" 1566","line":"inline Vec4d pow<uint32_t>(Vec4d const & x0, uint32_t const & n) {"},
{"lineNum":" 1567","line":"    return pow_template_i<Vec4d>(x0, (int)n);"},
{"lineNum":" 1568","line":"}"},
{"lineNum":" 1569","line":""},
{"lineNum":" 1570","line":"// Raise floating point numbers to integer power n, where n is a compile-time constant"},
{"lineNum":" 1571","line":"// implement as function pow(vector, const_int)"},
{"lineNum":" 1572","line":"template <int n>"},
{"lineNum":" 1573","line":"static inline Vec4d pow(Vec4d const & a, Const_int_t<n>) {"},
{"lineNum":" 1574","line":"    return pow_n<Vec4d, n>(a);"},
{"lineNum":" 1575","line":"}"},
{"lineNum":" 1576","line":""},
{"lineNum":" 1577","line":""},
{"lineNum":" 1578","line":"// function round: round to nearest integer (even). (result as double vector)"},
{"lineNum":" 1579","line":"static inline Vec4d round(Vec4d const & a) {"},
{"lineNum":" 1580","line":"    return Vec4d(round(a.get_low()), round(a.get_high()));","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1581","line":"}"},
{"lineNum":" 1582","line":""},
{"lineNum":" 1583","line":"// function truncate: round towards zero. (result as double vector)"},
{"lineNum":" 1584","line":"static inline Vec4d truncate(Vec4d const & a) {"},
{"lineNum":" 1585","line":"    return Vec4d(truncate(a.get_low()), truncate(a.get_high()));"},
{"lineNum":" 1586","line":"}"},
{"lineNum":" 1587","line":""},
{"lineNum":" 1588","line":"// function floor: round towards minus infinity. (result as double vector)"},
{"lineNum":" 1589","line":"static inline Vec4d floor(Vec4d const & a) {"},
{"lineNum":" 1590","line":"    return Vec4d(floor(a.get_low()), floor(a.get_high()));"},
{"lineNum":" 1591","line":"}"},
{"lineNum":" 1592","line":""},
{"lineNum":" 1593","line":"// function ceil: round towards plus infinity. (result as double vector)"},
{"lineNum":" 1594","line":"static inline Vec4d ceil(Vec4d const & a) {"},
{"lineNum":" 1595","line":"    return Vec4d(ceil(a.get_low()), ceil(a.get_high()));"},
{"lineNum":" 1596","line":"}"},
{"lineNum":" 1597","line":""},
{"lineNum":" 1598","line":"// function round_to_int32: round to nearest integer (even). (result as integer vector)"},
{"lineNum":" 1599","line":"static inline Vec4i round_to_int32(Vec4d const & a) {"},
{"lineNum":" 1600","line":"    return round_to_int32(a.get_low(), a.get_high());"},
{"lineNum":" 1601","line":"}"},
{"lineNum":" 1602","line":"static inline Vec4i round_to_int(Vec4d const & a) {return round_to_int32(a);} // deprecated"},
{"lineNum":" 1603","line":""},
{"lineNum":" 1604","line":"// function truncate_to_int32: round towards zero. (result as integer vector)"},
{"lineNum":" 1605","line":"static inline Vec4i truncate_to_int32(Vec4d const & a) {"},
{"lineNum":" 1606","line":"    return truncate_to_int32(a.get_low(), a.get_high());"},
{"lineNum":" 1607","line":"}"},
{"lineNum":" 1608","line":"static inline Vec4i truncate_to_int(Vec4d const & a) {return truncate_to_int32(a);} // deprecated"},
{"lineNum":" 1609","line":""},
{"lineNum":" 1610","line":"#if defined(VECTORI256_H) || defined(VECTORI256E_H)  // 256 bit integer vectors are available"},
{"lineNum":" 1611","line":""},
{"lineNum":" 1612","line":"// function truncatei: round towards zero. (inefficient)"},
{"lineNum":" 1613","line":"static inline Vec4q truncatei(Vec4d const & a) {"},
{"lineNum":" 1614","line":"    double aa[4];"},
{"lineNum":" 1615","line":"    a.store(aa);"},
{"lineNum":" 1616","line":"    return Vec4q(int64_t(aa[0]), int64_t(aa[1]), int64_t(aa[2]), int64_t(aa[3]));","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":" 1617","line":"}"},
{"lineNum":" 1618","line":"static inline Vec4q truncate_to_int64(Vec4d const & a) {return truncatei(a);} // deprecated"},
{"lineNum":" 1619","line":""},
{"lineNum":" 1620","line":"// function roundi: round to nearest or even. (inefficient)"},
{"lineNum":" 1621","line":"static inline Vec4q roundi(Vec4d const & a) {"},
{"lineNum":" 1622","line":"    return truncate_to_int64(round(a));"},
{"lineNum":" 1623","line":"}"},
{"lineNum":" 1624","line":"static inline Vec4q round_to_int64(Vec4d const & a) {return roundi(a);} // deprecated"},
{"lineNum":" 1625","line":""},
{"lineNum":" 1626","line":"// function to_double: convert integer vector elements to double vector (inefficient)"},
{"lineNum":" 1627","line":"static inline Vec4d to_double(Vec4q const & a) {"},
{"lineNum":" 1628","line":"    int64_t aa[4];"},
{"lineNum":" 1629","line":"    a.store(aa);"},
{"lineNum":" 1630","line":"    return Vec4d(double(aa[0]), double(aa[1]), double(aa[2]), double(aa[3]));"},
{"lineNum":" 1631","line":"}"},
{"lineNum":" 1632","line":""},
{"lineNum":" 1633","line":"// function to_double: convert unsigned integer vector elements to double vector (inefficient)"},
{"lineNum":" 1634","line":"static inline Vec4d to_double(Vec4uq const & a) {"},
{"lineNum":" 1635","line":"    uint64_t aa[4];"},
{"lineNum":" 1636","line":"    a.store(aa);"},
{"lineNum":" 1637","line":"    return Vec4d(double(aa[0]), double(aa[1]), double(aa[2]), double(aa[3]));"},
{"lineNum":" 1638","line":"}"},
{"lineNum":" 1639","line":""},
{"lineNum":" 1640","line":"#endif  // VECTORI256_H"},
{"lineNum":" 1641","line":""},
{"lineNum":" 1642","line":""},
{"lineNum":" 1643","line":"// function to_double: convert integer vector to double vector"},
{"lineNum":" 1644","line":"static inline Vec4d to_double(Vec4i const & a) {"},
{"lineNum":" 1645","line":"    return Vec4d(to_double_low(a), to_double_high(a));"},
{"lineNum":" 1646","line":"}"},
{"lineNum":" 1647","line":""},
{"lineNum":" 1648","line":"// function compress: convert two Vec4d to one Vec8f"},
{"lineNum":" 1649","line":"static inline Vec8f compress (Vec4d const & low, Vec4d const & high) {"},
{"lineNum":" 1650","line":"    return Vec8f(compress(low.get_low(), low.get_high()), compress(high.get_low(), high.get_high()));"},
{"lineNum":" 1651","line":"}"},
{"lineNum":" 1652","line":""},
{"lineNum":" 1653","line":"// Function extend_low : convert Vec8f vector elements 0 - 3 to Vec4d"},
{"lineNum":" 1654","line":"static inline Vec4d extend_low (Vec8f const & a) {"},
{"lineNum":" 1655","line":"    return Vec4d(extend_low(a.get_low()), extend_high(a.get_low()));"},
{"lineNum":" 1656","line":"}"},
{"lineNum":" 1657","line":""},
{"lineNum":" 1658","line":"// Function extend_high : convert Vec8f vector elements 4 - 7 to Vec4d"},
{"lineNum":" 1659","line":"static inline Vec4d extend_high (Vec8f const & a) {"},
{"lineNum":" 1660","line":"    return Vec4d(extend_low(a.get_high()), extend_high(a.get_high()));"},
{"lineNum":" 1661","line":"}"},
{"lineNum":" 1662","line":""},
{"lineNum":" 1663","line":""},
{"lineNum":" 1664","line":"// Fused multiply and add functions"},
{"lineNum":" 1665","line":""},
{"lineNum":" 1666","line":"// Multiply and add"},
{"lineNum":" 1667","line":"static inline Vec4d mul_add(Vec4d const & a, Vec4d const & b, Vec4d const & c) {"},
{"lineNum":" 1668","line":"    return Vec4d(mul_add(a.get_low(),b.get_low(),c.get_low()), mul_add(a.get_high(),b.get_high(),c.get_high()));"},
{"lineNum":" 1669","line":"}"},
{"lineNum":" 1670","line":""},
{"lineNum":" 1671","line":"// Multiply and subtract"},
{"lineNum":" 1672","line":"static inline Vec4d mul_sub(Vec4d const & a, Vec4d const & b, Vec4d const & c) {"},
{"lineNum":" 1673","line":"    return Vec4d(mul_sub(a.get_low(),b.get_low(),c.get_low()), mul_sub(a.get_high(),b.get_high(),c.get_high()));"},
{"lineNum":" 1674","line":"}"},
{"lineNum":" 1675","line":""},
{"lineNum":" 1676","line":"// Multiply and inverse subtract"},
{"lineNum":" 1677","line":"static inline Vec4d nmul_add(Vec4d const & a, Vec4d const & b, Vec4d const & c) {"},
{"lineNum":" 1678","line":"    return Vec4d(nmul_add(a.get_low(),b.get_low(),c.get_low()), nmul_add(a.get_high(),b.get_high(),c.get_high()));"},
{"lineNum":" 1679","line":"}"},
{"lineNum":" 1680","line":""},
{"lineNum":" 1681","line":"// Multiply and subtract with extra precision on the intermediate calculations,"},
{"lineNum":" 1682","line":"// even if FMA instructions not supported, using Veltkamp-Dekker split"},
{"lineNum":" 1683","line":"static inline Vec4d mul_sub_x(Vec4d const & a, Vec4d const & b, Vec4d const & c) {"},
{"lineNum":" 1684","line":"    return Vec4d(mul_sub_x(a.get_low(),b.get_low(),c.get_low()), mul_sub_x(a.get_high(),b.get_high(),c.get_high()));"},
{"lineNum":" 1685","line":"}"},
{"lineNum":" 1686","line":""},
{"lineNum":" 1687","line":""},
{"lineNum":" 1688","line":"// Math functions using fast bit manipulation"},
{"lineNum":" 1689","line":""},
{"lineNum":" 1690","line":"#if defined(VECTORI256_H) || defined(VECTORI256E_H)  // 256 bit integer vectors are available, AVX2"},
{"lineNum":" 1691","line":"// Extract the exponent as an integer"},
{"lineNum":" 1692","line":"// exponent(a) = floor(log2(abs(a)));"},
{"lineNum":" 1693","line":"// exponent(1.0) = 0, exponent(0.0) = -1023, exponent(INF) = +1024, exponent(NAN) = +1024"},
{"lineNum":" 1694","line":"static inline Vec4q exponent(Vec4d const & a) {"},
{"lineNum":" 1695","line":"    return Vec4q(exponent(a.get_low()), exponent(a.get_high()));"},
{"lineNum":" 1696","line":"}"},
{"lineNum":" 1697","line":""},
{"lineNum":" 1698","line":"// Extract the fraction part of a floating point number"},
{"lineNum":" 1699","line":"// a = 2^exponent(a) * fraction(a), except for a = 0"},
{"lineNum":" 1700","line":"// fraction(1.0) = 1.0, fraction(5.0) = 1.25"},
{"lineNum":" 1701","line":"static inline Vec4d fraction(Vec4d const & a) {"},
{"lineNum":" 1702","line":"    return Vec4d(fraction(a.get_low()), fraction(a.get_high()));"},
{"lineNum":" 1703","line":"}"},
{"lineNum":" 1704","line":""},
{"lineNum":" 1705","line":"// Fast calculation of pow(2,n) with n integer"},
{"lineNum":" 1706","line":"// n  =     0 gives 1.0"},
{"lineNum":" 1707","line":"// n >=  1024 gives +INF"},
{"lineNum":" 1708","line":"// n <= -1023 gives 0.0"},
{"lineNum":" 1709","line":"// This function will never produce denormals, and never raise exceptions"},
{"lineNum":" 1710","line":"static inline Vec4d exp2(Vec4q const & a) {"},
{"lineNum":" 1711","line":"    return Vec4d(exp2(a.get_low()), exp2(a.get_high()));"},
{"lineNum":" 1712","line":"}"},
{"lineNum":" 1713","line":"//static Vec4d exp2(Vec4d const & x); // defined in vectormath_exp.h"},
{"lineNum":" 1714","line":"#endif"},
{"lineNum":" 1715","line":""},
{"lineNum":" 1716","line":""},
{"lineNum":" 1717","line":"// Categorization functions"},
{"lineNum":" 1718","line":""},
{"lineNum":" 1719","line":"// Function sign_bit: gives true for elements that have the sign bit set"},
{"lineNum":" 1720","line":"// even for -0.0, -INF and -NAN"},
{"lineNum":" 1721","line":"// Note that sign_bit(Vec4d(-0.0)) gives true, while Vec4d(-0.0) < Vec4d(0.0) gives false"},
{"lineNum":" 1722","line":"static inline Vec4db sign_bit(Vec4d const & a) {"},
{"lineNum":" 1723","line":"    return Vec4db(sign_bit(a.get_low()), sign_bit(a.get_high()));"},
{"lineNum":" 1724","line":"}"},
{"lineNum":" 1725","line":""},
{"lineNum":" 1726","line":"// Function sign_combine: changes the sign of a when b has the sign bit set"},
{"lineNum":" 1727","line":"// same as select(sign_bit(b), -a, a)"},
{"lineNum":" 1728","line":"static inline Vec4d sign_combine(Vec4d const & a, Vec4d const & b) {"},
{"lineNum":" 1729","line":"    return Vec4d(sign_combine(a.get_low(), b.get_low()), sign_combine(a.get_high(), b.get_high()));"},
{"lineNum":" 1730","line":"}"},
{"lineNum":" 1731","line":""},
{"lineNum":" 1732","line":"// Function is_finite: gives true for elements that are normal, denormal or zero,"},
{"lineNum":" 1733","line":"// false for INF and NAN"},
{"lineNum":" 1734","line":"static inline Vec4db is_finite(Vec4d const & a) {"},
{"lineNum":" 1735","line":"    return Vec4db(is_finite(a.get_low()), is_finite(a.get_high()));"},
{"lineNum":" 1736","line":"}"},
{"lineNum":" 1737","line":""},
{"lineNum":" 1738","line":"// Function is_inf: gives true for elements that are +INF or -INF"},
{"lineNum":" 1739","line":"// false for finite numbers and NAN"},
{"lineNum":" 1740","line":"static inline Vec4db is_inf(Vec4d const & a) {"},
{"lineNum":" 1741","line":"    return Vec4db(is_inf(a.get_low()), is_inf(a.get_high()));"},
{"lineNum":" 1742","line":"}"},
{"lineNum":" 1743","line":""},
{"lineNum":" 1744","line":"// Function is_nan: gives true for elements that are +NAN or -NAN"},
{"lineNum":" 1745","line":"// false for finite numbers and +/-INF"},
{"lineNum":" 1746","line":"static inline Vec4db is_nan(Vec4d const & a) {"},
{"lineNum":" 1747","line":"    return Vec4db(is_nan(a.get_low()), is_nan(a.get_high()));"},
{"lineNum":" 1748","line":"}"},
{"lineNum":" 1749","line":""},
{"lineNum":" 1750","line":"// Function is_subnormal: gives true for elements that are denormal (subnormal)"},
{"lineNum":" 1751","line":"// false for finite numbers, zero, NAN and INF"},
{"lineNum":" 1752","line":"static inline Vec4db is_subnormal(Vec4d const & a) {"},
{"lineNum":" 1753","line":"    return Vec4db(is_subnormal(a.get_low()), is_subnormal(a.get_high()));"},
{"lineNum":" 1754","line":"}"},
{"lineNum":" 1755","line":""},
{"lineNum":" 1756","line":"// Function is_zero_or_subnormal: gives true for elements that are zero or subnormal (denormal)"},
{"lineNum":" 1757","line":"// false for finite numbers, NAN and INF"},
{"lineNum":" 1758","line":"static inline Vec4db is_zero_or_subnormal(Vec4d const & a) {"},
{"lineNum":" 1759","line":"    return Vec4db(is_zero_or_subnormal(a.get_low()),is_zero_or_subnormal(a.get_high()));"},
{"lineNum":" 1760","line":"}"},
{"lineNum":" 1761","line":""},
{"lineNum":" 1762","line":"// Function infinite2d: returns a vector where all elements are +INF"},
{"lineNum":" 1763","line":"static inline Vec4d infinite4d() {"},
{"lineNum":" 1764","line":"    return Vec4d(infinite2d(), infinite2d());"},
{"lineNum":" 1765","line":"}"},
{"lineNum":" 1766","line":""},
{"lineNum":" 1767","line":"// Function nan2d: returns a vector where all elements are +NAN (quiet)"},
{"lineNum":" 1768","line":"static inline Vec4d nan4d(int n = 0x10) {"},
{"lineNum":" 1769","line":"    return Vec4d(nan2d(n), nan2d(n));"},
{"lineNum":" 1770","line":"}"},
{"lineNum":" 1771","line":""},
{"lineNum":" 1772","line":"// change signs on vectors Vec4d"},
{"lineNum":" 1773","line":"// Each index i0 - i3 is 1 for changing sign on the corresponding element, 0 for no change"},
{"lineNum":" 1774","line":"template <int i0, int i1, int i2, int i3>"},
{"lineNum":" 1775","line":"static inline Vec4d change_sign(Vec4d const & a) {"},
{"lineNum":" 1776","line":"    if ((i0 | i1 | i2 | i3) == 0) return a;"},
{"lineNum":" 1777","line":"    Vec2d lo = change_sign<i0,i1>(a.get_low());"},
{"lineNum":" 1778","line":"    Vec2d hi = change_sign<i2,i3>(a.get_high());"},
{"lineNum":" 1779","line":"    return Vec4d(lo, hi);"},
{"lineNum":" 1780","line":"}"},
{"lineNum":" 1781","line":""},
{"lineNum":" 1782","line":""},
{"lineNum":" 1783","line":"/*****************************************************************************"},
{"lineNum":" 1784","line":"*"},
{"lineNum":" 1785","line":"*          Functions for reinterpretation between vector types"},
{"lineNum":" 1786","line":"*"},
{"lineNum":" 1787","line":"*****************************************************************************/"},
{"lineNum":" 1788","line":""},
{"lineNum":" 1789","line":"static inline Vec256ie reinterpret_i (Vec256ie const & x) {"},
{"lineNum":" 1790","line":"    return x;"},
{"lineNum":" 1791","line":"}"},
{"lineNum":" 1792","line":""},
{"lineNum":" 1793","line":"static inline Vec256ie reinterpret_i (Vec256fe  const & x) {"},
{"lineNum":" 1794","line":"    return Vec256ie(reinterpret_i(x.get_low()), reinterpret_i(x.get_high()));"},
{"lineNum":" 1795","line":"}"},
{"lineNum":" 1796","line":""},
{"lineNum":" 1797","line":"static inline Vec256ie reinterpret_i (Vec256de const & x) {"},
{"lineNum":" 1798","line":"    return Vec256ie(reinterpret_i(x.get_low()), reinterpret_i(x.get_high()));"},
{"lineNum":" 1799","line":"}"},
{"lineNum":" 1800","line":""},
{"lineNum":" 1801","line":"static inline Vec256fe  reinterpret_f (Vec256ie const & x) {"},
{"lineNum":" 1802","line":"    return Vec256fe(reinterpret_f(x.get_low()), reinterpret_f(x.get_high()));"},
{"lineNum":" 1803","line":"}"},
{"lineNum":" 1804","line":""},
{"lineNum":" 1805","line":"static inline Vec256fe  reinterpret_f (Vec256fe  const & x) {"},
{"lineNum":" 1806","line":"    return x;"},
{"lineNum":" 1807","line":"}"},
{"lineNum":" 1808","line":""},
{"lineNum":" 1809","line":"static inline Vec256fe  reinterpret_f (Vec256de const & x) {"},
{"lineNum":" 1810","line":"    return Vec256fe(reinterpret_f(x.get_low()), reinterpret_f(x.get_high()));"},
{"lineNum":" 1811","line":"}"},
{"lineNum":" 1812","line":""},
{"lineNum":" 1813","line":"static inline Vec256de reinterpret_d (Vec256ie const & x) {"},
{"lineNum":" 1814","line":"    return Vec256de(reinterpret_d(x.get_low()), reinterpret_d(x.get_high()));"},
{"lineNum":" 1815","line":"}"},
{"lineNum":" 1816","line":""},
{"lineNum":" 1817","line":"static inline Vec256de reinterpret_d (Vec256fe  const & x) {"},
{"lineNum":" 1818","line":"    return Vec256de(reinterpret_d(x.get_low()), reinterpret_d(x.get_high()));"},
{"lineNum":" 1819","line":"}"},
{"lineNum":" 1820","line":""},
{"lineNum":" 1821","line":"static inline Vec256de reinterpret_d (Vec256de const & x) {"},
{"lineNum":" 1822","line":"    return x;"},
{"lineNum":" 1823","line":"}"},
{"lineNum":" 1824","line":""},
{"lineNum":" 1825","line":""},
{"lineNum":" 1826","line":"/*****************************************************************************"},
{"lineNum":" 1827","line":"*"},
{"lineNum":" 1828","line":"*          Vector permute and blend functions"},
{"lineNum":" 1829","line":"*"},
{"lineNum":" 1830","line":"******************************************************************************"},
{"lineNum":" 1831","line":"*"},
{"lineNum":" 1832","line":"* The permute function can reorder the elements of a vector and optionally"},
{"lineNum":" 1833","line":"* set some elements to zero."},
{"lineNum":" 1834","line":"*"},
{"lineNum":" 1835","line":"* The indexes are inserted as template parameters in <>. These indexes must be"},
{"lineNum":" 1836","line":"* constants. Each template parameter is an index to the element you want to"},
{"lineNum":" 1837","line":"* select. An index of -1 will generate zero. An index of -256 means don\'t care."},
{"lineNum":" 1838","line":"*"},
{"lineNum":" 1839","line":"* Example:"},
{"lineNum":" 1840","line":"* Vec4d a(10., 11., 12., 13.);    // a is (10, 11, 12, 13)"},
{"lineNum":" 1841","line":"* Vec4d b;"},
{"lineNum":" 1842","line":"* b = permute4<1,0,-1,3>(a);     // b is (11, 10,  0, 13)"},
{"lineNum":" 1843","line":"*"},
{"lineNum":" 1844","line":"*"},
{"lineNum":" 1845","line":"* The blend function can mix elements from two different vectors and"},
{"lineNum":" 1846","line":"* optionally set some elements to zero."},
{"lineNum":" 1847","line":"*"},
{"lineNum":" 1848","line":"* The indexes are inserted as template parameters in <>. These indexes must be"},
{"lineNum":" 1849","line":"* constants. Each template parameter is an index to the element you want to"},
{"lineNum":" 1850","line":"* select, where indexes 0 - 3 indicate an element from the first source"},
{"lineNum":" 1851","line":"* vector and indexes 4 - 7 indicate an element from the second source vector."},
{"lineNum":" 1852","line":"* A negative index will generate zero."},
{"lineNum":" 1853","line":"*"},
{"lineNum":" 1854","line":"*"},
{"lineNum":" 1855","line":"* Example:"},
{"lineNum":" 1856","line":"* Vec4d a(10., 11., 12., 13.);    // a is (10, 11, 12, 13)"},
{"lineNum":" 1857","line":"* Vec4d b(20., 21., 22., 23.);    // a is (20, 21, 22, 23)"},
{"lineNum":" 1858","line":"* Vec4d c;"},
{"lineNum":" 1859","line":"* c = blend4<4,3,7,-1> (a,b);    // c is (20, 13, 23,  0)"},
{"lineNum":" 1860","line":"*****************************************************************************/"},
{"lineNum":" 1861","line":""},
{"lineNum":" 1862","line":"// permute vector Vec4d"},
{"lineNum":" 1863","line":"template <int i0, int i1, int i2, int i3>"},
{"lineNum":" 1864","line":"static inline Vec4d permute4(Vec4d const & a) {"},
{"lineNum":" 1865","line":"    return Vec4d(blend2<i0,i1> (a.get_low(), a.get_high()),"},
{"lineNum":" 1866","line":"           blend2<i2,i3> (a.get_low(), a.get_high()));"},
{"lineNum":" 1867","line":"}"},
{"lineNum":" 1868","line":""},
{"lineNum":" 1869","line":"// helper function used below"},
{"lineNum":" 1870","line":"template <int n>"},
{"lineNum":" 1871","line":"static inline Vec2d select4(Vec4d const & a, Vec4d const & b) {"},
{"lineNum":" 1872","line":"    switch (n) {"},
{"lineNum":" 1873","line":"    case 0:"},
{"lineNum":" 1874","line":"        return a.get_low();"},
{"lineNum":" 1875","line":"    case 1:"},
{"lineNum":" 1876","line":"        return a.get_high();"},
{"lineNum":" 1877","line":"    case 2:"},
{"lineNum":" 1878","line":"        return b.get_low();"},
{"lineNum":" 1879","line":"    case 3:"},
{"lineNum":" 1880","line":"        return b.get_high();"},
{"lineNum":" 1881","line":"    default:;"},
{"lineNum":" 1882","line":"    }"},
{"lineNum":" 1883","line":"    return _mm_setzero_pd();"},
{"lineNum":" 1884","line":"}"},
{"lineNum":" 1885","line":""},
{"lineNum":" 1886","line":"// blend vectors Vec4d"},
{"lineNum":" 1887","line":"template <int i0, int i1, int i2, int i3>"},
{"lineNum":" 1888","line":"static inline Vec4d blend4(Vec4d const & a, Vec4d const & b) {"},
{"lineNum":" 1889","line":"    const int j0 = i0 >= 0 ? i0/2 : i0;"},
{"lineNum":" 1890","line":"    const int j1 = i1 >= 0 ? i1/2 : i1;"},
{"lineNum":" 1891","line":"    const int j2 = i2 >= 0 ? i2/2 : i2;"},
{"lineNum":" 1892","line":"    const int j3 = i3 >= 0 ? i3/2 : i3;"},
{"lineNum":" 1893","line":"    Vec2d x0, x1;"},
{"lineNum":" 1894","line":""},
{"lineNum":" 1895","line":"    if (j0 == j1 || i0 < 0 || i1 < 0) {  // both from same"},
{"lineNum":" 1896","line":"        const int k0 = j0 >= 0 ? j0 : j1;"},
{"lineNum":" 1897","line":"        x0 = permute2<i0 & -7, i1 & -7> (select4<k0> (a,b));"},
{"lineNum":" 1898","line":"    }"},
{"lineNum":" 1899","line":"    else {"},
{"lineNum":" 1900","line":"        x0 = blend2<i0 & -7, (i1 & -7) | 2> (select4<j0>(a,b), select4<j1>(a,b));"},
{"lineNum":" 1901","line":"    }"},
{"lineNum":" 1902","line":"    if (j2 == j3 || i2 < 0 || i3 < 0) {  // both from same"},
{"lineNum":" 1903","line":"        const int k1 = j2 >= 0 ? j2 : j3;"},
{"lineNum":" 1904","line":"        x1 = permute2<i2 & -7, i3 & -7> (select4<k1> (a,b));"},
{"lineNum":" 1905","line":"    }"},
{"lineNum":" 1906","line":"    else {"},
{"lineNum":" 1907","line":"        x1 = blend2<i2 & -7, (i3 & -7) | 2> (select4<j2>(a,b), select4<j3>(a,b));"},
{"lineNum":" 1908","line":"    }"},
{"lineNum":" 1909","line":"    return Vec4d(x0,x1);"},
{"lineNum":" 1910","line":"}"},
{"lineNum":" 1911","line":""},
{"lineNum":" 1912","line":"/*****************************************************************************"},
{"lineNum":" 1913","line":"*"},
{"lineNum":" 1914","line":"*          Vector Vec8f permute and blend functions"},
{"lineNum":" 1915","line":"*"},
{"lineNum":" 1916","line":"*****************************************************************************/"},
{"lineNum":" 1917","line":""},
{"lineNum":" 1918","line":"// permute vector Vec8f"},
{"lineNum":" 1919","line":"template <int i0, int i1, int i2, int i3, int i4, int i5, int i6, int i7>"},
{"lineNum":" 1920","line":"static inline Vec8f permute8(Vec8f const & a) {"},
{"lineNum":" 1921","line":"    return Vec8f(blend4<i0,i1,i2,i3> (a.get_low(), a.get_high()),"},
{"lineNum":" 1922","line":"                 blend4<i4,i5,i6,i7> (a.get_low(), a.get_high()));"},
{"lineNum":" 1923","line":"}"},
{"lineNum":" 1924","line":""},
{"lineNum":" 1925","line":"// helper function used below"},
{"lineNum":" 1926","line":"template <int n>"},
{"lineNum":" 1927","line":"static inline Vec4f select4(Vec8f const & a, Vec8f const & b) {"},
{"lineNum":" 1928","line":"    switch (n) {"},
{"lineNum":" 1929","line":"    case 0:"},
{"lineNum":" 1930","line":"        return a.get_low();"},
{"lineNum":" 1931","line":"    case 1:"},
{"lineNum":" 1932","line":"        return a.get_high();"},
{"lineNum":" 1933","line":"    case 2:"},
{"lineNum":" 1934","line":"        return b.get_low();"},
{"lineNum":" 1935","line":"    case 3:"},
{"lineNum":" 1936","line":"        return b.get_high();"},
{"lineNum":" 1937","line":"    default:;"},
{"lineNum":" 1938","line":"    }"},
{"lineNum":" 1939","line":"    return _mm_setzero_ps();"},
{"lineNum":" 1940","line":"}"},
{"lineNum":" 1941","line":""},
{"lineNum":" 1942","line":"// blend vectors Vec8f"},
{"lineNum":" 1943","line":"template <int i0, int i1, int i2, int i3, int i4, int i5, int i6, int i7>"},
{"lineNum":" 1944","line":"static inline Vec8f blend8(Vec8f const & a, Vec8f const & b) {"},
{"lineNum":" 1945","line":"    const int j0 = i0 >= 0 ? i0/4 : i0;"},
{"lineNum":" 1946","line":"    const int j1 = i1 >= 0 ? i1/4 : i1;"},
{"lineNum":" 1947","line":"    const int j2 = i2 >= 0 ? i2/4 : i2;"},
{"lineNum":" 1948","line":"    const int j3 = i3 >= 0 ? i3/4 : i3;"},
{"lineNum":" 1949","line":"    const int j4 = i4 >= 0 ? i4/4 : i4;"},
{"lineNum":" 1950","line":"    const int j5 = i5 >= 0 ? i5/4 : i5;"},
{"lineNum":" 1951","line":"    const int j6 = i6 >= 0 ? i6/4 : i6;"},
{"lineNum":" 1952","line":"    const int j7 = i7 >= 0 ? i7/4 : i7;"},
{"lineNum":" 1953","line":"    Vec4f x0, x1;"},
{"lineNum":" 1954","line":""},
{"lineNum":" 1955","line":"    const int r0 = j0 >= 0 ? j0 : j1 >= 0 ? j1 : j2 >= 0 ? j2 : j3;"},
{"lineNum":" 1956","line":"    const int r1 = j4 >= 0 ? j4 : j5 >= 0 ? j5 : j6 >= 0 ? j6 : j7;"},
{"lineNum":" 1957","line":"    const int s0 = (j1 >= 0 && j1 != r0) ? j1 : (j2 >= 0 && j2 != r0) ? j2 : j3;"},
{"lineNum":" 1958","line":"    const int s1 = (j5 >= 0 && j5 != r1) ? j5 : (j6 >= 0 && j6 != r1) ? j6 : j7;"},
{"lineNum":" 1959","line":""},
{"lineNum":" 1960","line":"    // Combine all the indexes into a single bitfield, with 4 bits for each"},
{"lineNum":" 1961","line":"    const int m1 = (i0&0xF) | (i1&0xF)<<4 | (i2&0xF)<<8 | (i3&0xF)<<12 | (i4&0xF)<<16 | (i5&0xF)<<20 | (i6&0xF)<<24 | (i7&0xF)<<28;"},
{"lineNum":" 1962","line":""},
{"lineNum":" 1963","line":"    // Mask to zero out negative indexes"},
{"lineNum":" 1964","line":"    const int mz = (i0<0?0:0xF) | (i1<0?0:0xF)<<4 | (i2<0?0:0xF)<<8 | (i3<0?0:0xF)<<12 | (i4<0?0:0xF)<<16 | (i5<0?0:0xF)<<20 | (i6<0?0:0xF)<<24 | (i7<0?0:0xF)<<28;"},
{"lineNum":" 1965","line":""},
{"lineNum":" 1966","line":"    if (r0 < 0) {"},
{"lineNum":" 1967","line":"        x0 = _mm_setzero_ps();"},
{"lineNum":" 1968","line":"    }"},
{"lineNum":" 1969","line":"    else if (((m1 ^ r0*0x4444) & 0xCCCC & mz) == 0) {"},
{"lineNum":" 1970","line":"        // i0 - i3 all from same source"},
{"lineNum":" 1971","line":"        x0 = permute4<i0 & -13, i1 & -13, i2 & -13, i3 & -13> (select4<r0> (a,b));"},
{"lineNum":" 1972","line":"    }"},
{"lineNum":" 1973","line":"    else if ((j2 < 0 || j2 == r0 || j2 == s0) && (j3 < 0 || j3 == r0 || j3 == s0)) {"},
{"lineNum":" 1974","line":"        // i0 - i3 all from two sources"},
{"lineNum":" 1975","line":"        const int k0 =  i0 >= 0 ? i0 & 3 : i0;"},
{"lineNum":" 1976","line":"        const int k1 = (i1 >= 0 ? i1 & 3 : i1) | (j1 == s0 ? 4 : 0);"},
{"lineNum":" 1977","line":"        const int k2 = (i2 >= 0 ? i2 & 3 : i2) | (j2 == s0 ? 4 : 0);"},
{"lineNum":" 1978","line":"        const int k3 = (i3 >= 0 ? i3 & 3 : i3) | (j3 == s0 ? 4 : 0);"},
{"lineNum":" 1979","line":"        x0 = blend4<k0,k1,k2,k3> (select4<r0>(a,b), select4<s0>(a,b));"},
{"lineNum":" 1980","line":"    }"},
{"lineNum":" 1981","line":"    else {"},
{"lineNum":" 1982","line":"        // i0 - i3 from three or four different sources"},
{"lineNum":" 1983","line":"        x0 = blend4<0,1,6,7> ("},
{"lineNum":" 1984","line":"             blend4<i0 & -13, (i1 & -13) | 4, -0x100, -0x100> (select4<j0>(a,b), select4<j1>(a,b)),"},
{"lineNum":" 1985","line":"             blend4<-0x100, -0x100, i2 & -13, (i3 & -13) | 4> (select4<j2>(a,b), select4<j3>(a,b)));"},
{"lineNum":" 1986","line":"    }"},
{"lineNum":" 1987","line":""},
{"lineNum":" 1988","line":"    if (r1 < 0) {"},
{"lineNum":" 1989","line":"        x1 = _mm_setzero_ps();"},
{"lineNum":" 1990","line":"    }"},
{"lineNum":" 1991","line":"    else if (((m1 ^ r1*0x44440000u) & 0xCCCC0000 & mz) == 0) {"},
{"lineNum":" 1992","line":"        // i4 - i7 all from same source"},
{"lineNum":" 1993","line":"        x1 = permute4<i4 & -13, i5 & -13, i6 & -13, i7 & -13> (select4<r1> (a,b));"},
{"lineNum":" 1994","line":"    }"},
{"lineNum":" 1995","line":"    else if ((j6 < 0 || j6 == r1 || j6 == s1) && (j7 < 0 || j7 == r1 || j7 == s1)) {"},
{"lineNum":" 1996","line":"        // i4 - i7 all from two sources"},
{"lineNum":" 1997","line":"        const int k4 =  i4 >= 0 ? i4 & 3 : i4;"},
{"lineNum":" 1998","line":"        const int k5 = (i5 >= 0 ? i5 & 3 : i5) | (j5 == s1 ? 4 : 0);"},
{"lineNum":" 1999","line":"        const int k6 = (i6 >= 0 ? i6 & 3 : i6) | (j6 == s1 ? 4 : 0);"},
{"lineNum":" 2000","line":"        const int k7 = (i7 >= 0 ? i7 & 3 : i7) | (j7 == s1 ? 4 : 0);"},
{"lineNum":" 2001","line":"        x1 = blend4<k4,k5,k6,k7> (select4<r1>(a,b), select4<s1>(a,b));"},
{"lineNum":" 2002","line":"    }"},
{"lineNum":" 2003","line":"    else {"},
{"lineNum":" 2004","line":"        // i4 - i7 from three or four different sources"},
{"lineNum":" 2005","line":"        x1 = blend4<0,1,6,7> ("},
{"lineNum":" 2006","line":"             blend4<i4 & -13, (i5 & -13) | 4, -0x100, -0x100> (select4<j4>(a,b), select4<j5>(a,b)),"},
{"lineNum":" 2007","line":"             blend4<-0x100, -0x100, i6 & -13, (i7 & -13) | 4> (select4<j6>(a,b), select4<j7>(a,b)));"},
{"lineNum":" 2008","line":"    }"},
{"lineNum":" 2009","line":""},
{"lineNum":" 2010","line":"    return Vec8f(x0,x1);"},
{"lineNum":" 2011","line":"}"},
{"lineNum":" 2012","line":""},
{"lineNum":" 2013","line":"// Support names prior to version 1.40 (now deprecated)"},
{"lineNum":" 2014","line":"#define permute4d  permute4"},
{"lineNum":" 2015","line":"#define permute8f  permute8"},
{"lineNum":" 2016","line":"#define blend4d    blend4"},
{"lineNum":" 2017","line":"#define blend8f    blend8"},
{"lineNum":" 2018","line":""},
{"lineNum":" 2019","line":""},
{"lineNum":" 2020","line":"/*****************************************************************************"},
{"lineNum":" 2021","line":"*"},
{"lineNum":" 2022","line":"*          Vector lookup functions"},
{"lineNum":" 2023","line":"*"},
{"lineNum":" 2024","line":"******************************************************************************"},
{"lineNum":" 2025","line":"*"},
{"lineNum":" 2026","line":"* These functions use vector elements as indexes into a table."},
{"lineNum":" 2027","line":"* The table is given as one or more vectors or as an array."},
{"lineNum":" 2028","line":"*"},
{"lineNum":" 2029","line":"* This can be used for several purposes:"},
{"lineNum":" 2030","line":"*  - table lookup"},
{"lineNum":" 2031","line":"*  - permute or blend with variable indexes"},
{"lineNum":" 2032","line":"*  - blend from more than two sources"},
{"lineNum":" 2033","line":"*  - gather non-contiguous data"},
{"lineNum":" 2034","line":"*"},
{"lineNum":" 2035","line":"* An index out of range may produce any value - the actual value produced is"},
{"lineNum":" 2036","line":"* implementation dependent and may be different for different instruction"},
{"lineNum":" 2037","line":"* sets. An index out of range does not produce an error message or exception."},
{"lineNum":" 2038","line":"*"},
{"lineNum":" 2039","line":"* Example:"},
{"lineNum":" 2040","line":"* Vec4i a(2,0,0,3);               // index  a is (  2,   0,   0,   3)"},
{"lineNum":" 2041","line":"* Vec4f b(1.0f,1.1f,1.2f,1.3f);   // table  b is (1.0, 1.1, 1.2, 1.3)"},
{"lineNum":" 2042","line":"* Vec4f c;"},
{"lineNum":" 2043","line":"* c = lookup4 (a,b);              // result c is (1.2, 1.0, 1.0, 1.3)"},
{"lineNum":" 2044","line":"*"},
{"lineNum":" 2045","line":"*****************************************************************************/"},
{"lineNum":" 2046","line":""},
{"lineNum":" 2047","line":"#if defined (VECTORI256_H) ||  defined (VECTORI256E_H)  // Vec8i and Vec4q must be defined"},
{"lineNum":" 2048","line":""},
{"lineNum":" 2049","line":"static inline Vec8f lookup8(Vec8i const & index, Vec8f const & table) {"},
{"lineNum":" 2050","line":"    Vec4f  r0 = lookup8(index.get_low() , table.get_low(), table.get_high());"},
{"lineNum":" 2051","line":"    Vec4f  r1 = lookup8(index.get_high(), table.get_low(), table.get_high());"},
{"lineNum":" 2052","line":"    return Vec8f(r0, r1);"},
{"lineNum":" 2053","line":"}"},
{"lineNum":" 2054","line":""},
{"lineNum":" 2055","line":"template <int n>"},
{"lineNum":" 2056","line":"static inline Vec8f lookup(Vec8i const & index, float const * table) {"},
{"lineNum":" 2057","line":"    if (n <= 0) return 0;"},
{"lineNum":" 2058","line":"    if (n <= 4) {"},
{"lineNum":" 2059","line":"        Vec4f table1 = Vec4f().load(table);"},
{"lineNum":" 2060","line":"        return Vec8f("},
{"lineNum":" 2061","line":"            lookup4 (index.get_low(),  table1),"},
{"lineNum":" 2062","line":"            lookup4 (index.get_high(), table1));"},
{"lineNum":" 2063","line":"    }"},
{"lineNum":" 2064","line":"    if (n <= 8) {"},
{"lineNum":" 2065","line":"        return lookup8(index, Vec8f().load(table));"},
{"lineNum":" 2066","line":"    }"},
{"lineNum":" 2067","line":"    // Limit index"},
{"lineNum":" 2068","line":"    Vec8ui index1;"},
{"lineNum":" 2069","line":"    if ((n & (n-1)) == 0) {"},
{"lineNum":" 2070","line":"        // n is a power of 2, make index modulo n"},
{"lineNum":" 2071","line":"        index1 = Vec8ui(index) & (n-1);"},
{"lineNum":" 2072","line":"    }"},
{"lineNum":" 2073","line":"    else {"},
{"lineNum":" 2074","line":"        // n is not a power of 2, limit to n-1"},
{"lineNum":" 2075","line":"        index1 = min(Vec8ui(index), n-1);"},
{"lineNum":" 2076","line":"    }"},
{"lineNum":" 2077","line":"    return Vec8f(table[index1[0]],table[index1[1]],table[index1[2]],table[index1[3]],"},
{"lineNum":" 2078","line":"    table[index1[4]],table[index1[5]],table[index1[6]],table[index1[7]]);"},
{"lineNum":" 2079","line":"}"},
{"lineNum":" 2080","line":""},
{"lineNum":" 2081","line":"static inline Vec4d lookup4(Vec4q const & index, Vec4d const & table) {"},
{"lineNum":" 2082","line":"    Vec2d  r0 = lookup4(index.get_low() , table.get_low(), table.get_high());"},
{"lineNum":" 2083","line":"    Vec2d  r1 = lookup4(index.get_high(), table.get_low(), table.get_high());"},
{"lineNum":" 2084","line":"    return Vec4d(r0, r1);"},
{"lineNum":" 2085","line":"}"},
{"lineNum":" 2086","line":""},
{"lineNum":" 2087","line":"template <int n>"},
{"lineNum":" 2088","line":"static inline Vec4d lookup(Vec4q const & index, double const * table) {"},
{"lineNum":" 2089","line":"    if (n <= 0) return 0;"},
{"lineNum":" 2090","line":"    if (n <= 2) {"},
{"lineNum":" 2091","line":"        Vec2d table1 = Vec2d().load(table);"},
{"lineNum":" 2092","line":"        return Vec4d("},
{"lineNum":" 2093","line":"            lookup2 (index.get_low(),  table1),"},
{"lineNum":" 2094","line":"            lookup2 (index.get_high(), table1));"},
{"lineNum":" 2095","line":"    }"},
{"lineNum":" 2096","line":"    // Limit index"},
{"lineNum":" 2097","line":"    Vec8ui index1;"},
{"lineNum":" 2098","line":"    if ((n & (n-1)) == 0) {"},
{"lineNum":" 2099","line":"        // n is a power of 2, make index modulo n"},
{"lineNum":" 2100","line":"        index1 = Vec8ui(index) & constant8i<n-1, 0, n-1, 0, n-1, 0, n-1, 0>();"},
{"lineNum":" 2101","line":"    }"},
{"lineNum":" 2102","line":"    else {"},
{"lineNum":" 2103","line":"        // n is not a power of 2, limit to n-1"},
{"lineNum":" 2104","line":"        index1 = min(Vec8ui(index), constant8i<n-1, 0, n-1, 0, n-1, 0, n-1, 0>() );"},
{"lineNum":" 2105","line":"    }"},
{"lineNum":" 2106","line":"    Vec4q index2 = Vec4q(index1);"},
{"lineNum":" 2107","line":"    return Vec4d(table[index2[0]],table[index2[1]],table[index2[2]],table[index2[3]]);"},
{"lineNum":" 2108","line":"}"},
{"lineNum":" 2109","line":"#endif  // VECTORI256_H"},
{"lineNum":" 2110","line":""},
{"lineNum":" 2111","line":"/*****************************************************************************"},
{"lineNum":" 2112","line":"*"},
{"lineNum":" 2113","line":"*          Gather functions with fixed indexes"},
{"lineNum":" 2114","line":"*"},
{"lineNum":" 2115","line":"*****************************************************************************/"},
{"lineNum":" 2116","line":"// Load elements from array a with indices i0, i1, i2, i3, .."},
{"lineNum":" 2117","line":"template <int i0, int i1, int i2, int i3, int i4, int i5, int i6, int i7>"},
{"lineNum":" 2118","line":"static inline Vec8f gather8f(void const * a) {"},
{"lineNum":" 2119","line":"    return reinterpret_f(gather8i<i0, i1, i2, i3, i4, i5, i6, i7>(a));"},
{"lineNum":" 2120","line":"}"},
{"lineNum":" 2121","line":""},
{"lineNum":" 2122","line":"// Load elements from array a with indices i0, i1, i2, i3"},
{"lineNum":" 2123","line":"template <int i0, int i1, int i2, int i3>"},
{"lineNum":" 2124","line":"static inline Vec4d gather4d(void const * a) {"},
{"lineNum":" 2125","line":"    return reinterpret_d(gather4q<i0, i1, i2, i3>(a));"},
{"lineNum":" 2126","line":"}"},
{"lineNum":" 2127","line":""},
{"lineNum":" 2128","line":""},
{"lineNum":" 2129","line":"/*****************************************************************************"},
{"lineNum":" 2130","line":"*"},
{"lineNum":" 2131","line":"*          Vector scatter functions"},
{"lineNum":" 2132","line":"*"},
{"lineNum":" 2133","line":"******************************************************************************"},
{"lineNum":" 2134","line":"*"},
{"lineNum":" 2135","line":"* These functions write the elements of a vector to arbitrary positions in an"},
{"lineNum":" 2136","line":"* array in memory. Each vector element is written to an array position"},
{"lineNum":" 2137","line":"* determined by an index. An element is not written if the corresponding"},
{"lineNum":" 2138","line":"* index is out of range."},
{"lineNum":" 2139","line":"* The indexes can be specified as constant template parameters or as an"},
{"lineNum":" 2140","line":"* integer vector."},
{"lineNum":" 2141","line":"*"},
{"lineNum":" 2142","line":"* The scatter functions are useful if the data are distributed in a sparce"},
{"lineNum":" 2143","line":"* manner into the array. If the array is dense then it is more efficient"},
{"lineNum":" 2144","line":"* to permute the data into the right positions and then write the whole"},
{"lineNum":" 2145","line":"* permuted vector into the array."},
{"lineNum":" 2146","line":"*"},
{"lineNum":" 2147","line":"* Example:"},
{"lineNum":" 2148","line":"* Vec8d a(10,11,12,13,14,15,16,17);"},
{"lineNum":" 2149","line":"* double b[16] = {0};"},
{"lineNum":" 2150","line":"* scatter<0,2,14,10,1,-1,5,9>(a,b);"},
{"lineNum":" 2151","line":"* // Now, b = {10,14,11,0,0,16,0,0,0,17,13,0,0,0,12,0}"},
{"lineNum":" 2152","line":"*"},
{"lineNum":" 2153","line":"*****************************************************************************/"},
{"lineNum":" 2154","line":""},
{"lineNum":" 2155","line":"template <int i0, int i1, int i2, int i3, int i4, int i5, int i6, int i7>"},
{"lineNum":" 2156","line":"static inline void scatter(Vec8f const & data, float * array) {"},
{"lineNum":" 2157","line":"    const int index[8] = {i0,i1,i2,i3,i4,i5,i6,i7};"},
{"lineNum":" 2158","line":"    for (int i = 0; i < 8; i++) {"},
{"lineNum":" 2159","line":"        if (index[i] >= 0) array[index[i]] = data[i];"},
{"lineNum":" 2160","line":"    }"},
{"lineNum":" 2161","line":"}"},
{"lineNum":" 2162","line":""},
{"lineNum":" 2163","line":"template <int i0, int i1, int i2, int i3>"},
{"lineNum":" 2164","line":"static inline void scatter(Vec4d const & data, double * array) {"},
{"lineNum":" 2165","line":"    const int index[4] = {i0,i1,i2,i3};"},
{"lineNum":" 2166","line":"    for (int i = 0; i < 4; i++) {"},
{"lineNum":" 2167","line":"        if (index[i] >= 0) array[index[i]] = data[i];"},
{"lineNum":" 2168","line":"    }"},
{"lineNum":" 2169","line":"}"},
{"lineNum":" 2170","line":""},
{"lineNum":" 2171","line":"// scatter functions with variable indexes"},
{"lineNum":" 2172","line":""},
{"lineNum":" 2173","line":"static inline void scatter(Vec8i const & index, uint32_t limit, Vec8f const & data, float * destination) {"},
{"lineNum":" 2174","line":"    for (int i = 0; i < 8; i++) {"},
{"lineNum":" 2175","line":"        if (uint32_t(index[i]) < limit) destination[index[i]] = data[i];"},
{"lineNum":" 2176","line":"    }"},
{"lineNum":" 2177","line":"}"},
{"lineNum":" 2178","line":""},
{"lineNum":" 2179","line":"static inline void scatter(Vec4q const & index, uint32_t limit, Vec4d const & data, double * destination) {"},
{"lineNum":" 2180","line":"    for (int i = 0; i < 4; i++) {"},
{"lineNum":" 2181","line":"        if (uint64_t(index[i]) < uint64_t(limit)) destination[index[i]] = data[i];"},
{"lineNum":" 2182","line":"    }"},
{"lineNum":" 2183","line":"}"},
{"lineNum":" 2184","line":""},
{"lineNum":" 2185","line":"static inline void scatter(Vec4i const & index, uint32_t limit, Vec4d const & data, double * destination) {"},
{"lineNum":" 2186","line":"    for (int i = 0; i < 4; i++) {"},
{"lineNum":" 2187","line":"        if (uint32_t(index[i]) < limit) destination[index[i]] = data[i];"},
{"lineNum":" 2188","line":"    }"},
{"lineNum":" 2189","line":"}"},
{"lineNum":" 2190","line":""},
{"lineNum":" 2191","line":"/*****************************************************************************"},
{"lineNum":" 2192","line":"*"},
{"lineNum":" 2193","line":"*          Horizontal scan functions"},
{"lineNum":" 2194","line":"*"},
{"lineNum":" 2195","line":"*****************************************************************************/"},
{"lineNum":" 2196","line":""},
{"lineNum":" 2197","line":"// Get index to the first element that is true. Return -1 if all are false"},
{"lineNum":" 2198","line":""},
{"lineNum":" 2199","line":"static inline int horizontal_find_first(Vec8fb const & x) {"},
{"lineNum":" 2200","line":"    return horizontal_find_first(Vec8ib(reinterpret_i(x)));"},
{"lineNum":" 2201","line":"}"},
{"lineNum":" 2202","line":""},
{"lineNum":" 2203","line":"static inline int horizontal_find_first(Vec4db const & x) {"},
{"lineNum":" 2204","line":"    return horizontal_find_first(Vec4qb(reinterpret_i(x)));"},
{"lineNum":" 2205","line":"}"},
{"lineNum":" 2206","line":""},
{"lineNum":" 2207","line":"// Count the number of elements that are true"},
{"lineNum":" 2208","line":"static inline uint32_t horizontal_count(Vec8fb const & x) {"},
{"lineNum":" 2209","line":"    return horizontal_count(Vec8ib(reinterpret_i(x)));"},
{"lineNum":" 2210","line":"}"},
{"lineNum":" 2211","line":""},
{"lineNum":" 2212","line":"static inline uint32_t horizontal_count(Vec4db const & x) {"},
{"lineNum":" 2213","line":"    return horizontal_count(Vec4qb(reinterpret_i(x)));"},
{"lineNum":" 2214","line":"}"},
{"lineNum":" 2215","line":""},
{"lineNum":" 2216","line":"/*****************************************************************************"},
{"lineNum":" 2217","line":"*"},
{"lineNum":" 2218","line":"*          Boolean <-> bitfield conversion functions"},
{"lineNum":" 2219","line":"*"},
{"lineNum":" 2220","line":"*****************************************************************************/"},
{"lineNum":" 2221","line":""},
{"lineNum":" 2222","line":"// to_bits: convert boolean vector to integer bitfield"},
{"lineNum":" 2223","line":"static inline uint8_t to_bits(Vec8fb const & x) {"},
{"lineNum":" 2224","line":"    return to_bits(Vec8ib(reinterpret_i(x)));"},
{"lineNum":" 2225","line":"}"},
{"lineNum":" 2226","line":""},
{"lineNum":" 2227","line":"// to_Vec8fb: convert integer bitfield to boolean vector"},
{"lineNum":" 2228","line":"// DEPRECATED. REPLACED BY load_bits"},
{"lineNum":" 2229","line":"static inline Vec8fb to_Vec8fb(uint8_t x) {"},
{"lineNum":" 2230","line":"    return Vec8fb().load_bits(x);"},
{"lineNum":" 2231","line":"}"},
{"lineNum":" 2232","line":""},
{"lineNum":" 2233","line":"// to_bits: convert boolean vector to integer bitfield"},
{"lineNum":" 2234","line":"static inline uint8_t to_bits(Vec4db const & x) {"},
{"lineNum":" 2235","line":"    return to_bits(Vec4qb(reinterpret_i(x)));"},
{"lineNum":" 2236","line":"}"},
{"lineNum":" 2237","line":""},
{"lineNum":" 2238","line":"// to_Vec4db: convert integer bitfield to boolean vector"},
{"lineNum":" 2239","line":"// DEPRECATED. REPLACED BY load_bits"},
{"lineNum":" 2240","line":"static inline Vec4db to_Vec4db(uint8_t x) {"},
{"lineNum":" 2241","line":"    return Vec4db().load_bits(x);"},
{"lineNum":" 2242","line":"}"},
{"lineNum":" 2243","line":""},
{"lineNum":" 2244","line":"#ifdef VCL_NAMESPACE"},
{"lineNum":" 2245","line":"}"},
{"lineNum":" 2246","line":"#endif"},
{"lineNum":" 2247","line":""},
{"lineNum":" 2248","line":"#endif // VECTORF256E_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 7, "covered" : 0,};
var merged_data = [];
