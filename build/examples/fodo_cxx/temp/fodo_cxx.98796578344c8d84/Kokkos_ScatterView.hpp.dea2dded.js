var data = {lines:[
{"lineNum":"    1","line":"/*"},
{"lineNum":"    2","line":"//@HEADER"},
{"lineNum":"    3","line":"// ************************************************************************"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"//                        Kokkos v. 3.0"},
{"lineNum":"    6","line":"//       Copyright (2020) National Technology & Engineering"},
{"lineNum":"    7","line":"//               Solutions of Sandia, LLC (NTESS)."},
{"lineNum":"    8","line":"//"},
{"lineNum":"    9","line":"// Under the terms of Contract DE-NA0003525 with NTESS,"},
{"lineNum":"   10","line":"// the U.S. Government retains certain rights in this software."},
{"lineNum":"   11","line":"//"},
{"lineNum":"   12","line":"// Redistribution and use in source and binary forms, with or without"},
{"lineNum":"   13","line":"// modification, are permitted provided that the following conditions are"},
{"lineNum":"   14","line":"// met:"},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"// 1. Redistributions of source code must retain the above copyright"},
{"lineNum":"   17","line":"// notice, this list of conditions and the following disclaimer."},
{"lineNum":"   18","line":"//"},
{"lineNum":"   19","line":"// 2. Redistributions in binary form must reproduce the above copyright"},
{"lineNum":"   20","line":"// notice, this list of conditions and the following disclaimer in the"},
{"lineNum":"   21","line":"// documentation and/or other materials provided with the distribution."},
{"lineNum":"   22","line":"//"},
{"lineNum":"   23","line":"// 3. Neither the name of the Corporation nor the names of the"},
{"lineNum":"   24","line":"// contributors may be used to endorse or promote products derived from"},
{"lineNum":"   25","line":"// this software without specific prior written permission."},
{"lineNum":"   26","line":"//"},
{"lineNum":"   27","line":"// THIS SOFTWARE IS PROVIDED BY NTESS \"AS IS\" AND ANY"},
{"lineNum":"   28","line":"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"},
{"lineNum":"   29","line":"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR"},
{"lineNum":"   30","line":"// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NTESS OR THE"},
{"lineNum":"   31","line":"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,"},
{"lineNum":"   32","line":"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,"},
{"lineNum":"   33","line":"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR"},
{"lineNum":"   34","line":"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF"},
{"lineNum":"   35","line":"// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING"},
{"lineNum":"   36","line":"// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"},
{"lineNum":"   37","line":"// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   38","line":"//"},
{"lineNum":"   39","line":"// Questions? Contact Christian R. Trott (crtrott@sandia.gov)"},
{"lineNum":"   40","line":"//"},
{"lineNum":"   41","line":"// ************************************************************************"},
{"lineNum":"   42","line":"//@HEADER"},
{"lineNum":"   43","line":"*/"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"/// \\file Kokkos_ScatterView.hpp"},
{"lineNum":"   46","line":"/// \\brief Declaration and definition of Kokkos::ScatterView."},
{"lineNum":"   47","line":"///"},
{"lineNum":"   48","line":"/// This header file declares and defines Kokkos::ScatterView and its"},
{"lineNum":"   49","line":"/// related nonmember functions."},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"#ifndef KOKKOS_SCATTER_VIEW_HPP"},
{"lineNum":"   52","line":"#define KOKKOS_SCATTER_VIEW_HPP"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"#include <Kokkos_Core.hpp>"},
{"lineNum":"   55","line":"#include <utility>"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"namespace Kokkos {"},
{"lineNum":"   58","line":"namespace Experimental {"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"/*"},
{"lineNum":"   61","line":" * Reduction Type list"},
{"lineNum":"   62","line":" *  - These corresponds to subset of the reducers in parallel_reduce"},
{"lineNum":"   63","line":" *  - See Implementations of ScatterValue for details."},
{"lineNum":"   64","line":" */"},
{"lineNum":"   65","line":"struct ScatterSum {};"},
{"lineNum":"   66","line":"struct ScatterProd {};"},
{"lineNum":"   67","line":"struct ScatterMax {};"},
{"lineNum":"   68","line":"struct ScatterMin {};"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"struct ScatterNonDuplicated {};"},
{"lineNum":"   71","line":"struct ScatterDuplicated {};"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"struct ScatterNonAtomic {};"},
{"lineNum":"   74","line":"struct ScatterAtomic {};"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"}  // namespace Experimental"},
{"lineNum":"   77","line":"}  // namespace Kokkos"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"namespace Kokkos {"},
{"lineNum":"   80","line":"namespace Impl {"},
{"lineNum":"   81","line":"namespace Experimental {"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"template <typename ExecSpace>"},
{"lineNum":"   84","line":"struct DefaultDuplication;"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"template <typename ExecSpace, typename Duplication>"},
{"lineNum":"   87","line":"struct DefaultContribution;"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"#ifdef KOKKOS_ENABLE_SERIAL"},
{"lineNum":"   90","line":"template <>"},
{"lineNum":"   91","line":"struct DefaultDuplication<Kokkos::Serial> {"},
{"lineNum":"   92","line":"  using type = Kokkos::Experimental::ScatterNonDuplicated;"},
{"lineNum":"   93","line":"};"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"template <>"},
{"lineNum":"   96","line":"struct DefaultContribution<Kokkos::Serial,"},
{"lineNum":"   97","line":"                           Kokkos::Experimental::ScatterNonDuplicated> {"},
{"lineNum":"   98","line":"  using type = Kokkos::Experimental::ScatterNonAtomic;"},
{"lineNum":"   99","line":"};"},
{"lineNum":"  100","line":"template <>"},
{"lineNum":"  101","line":"struct DefaultContribution<Kokkos::Serial,"},
{"lineNum":"  102","line":"                           Kokkos::Experimental::ScatterDuplicated> {"},
{"lineNum":"  103","line":"  using type = Kokkos::Experimental::ScatterNonAtomic;"},
{"lineNum":"  104","line":"};"},
{"lineNum":"  105","line":"#endif"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"#ifdef KOKKOS_ENABLE_OPENMP"},
{"lineNum":"  108","line":"template <>"},
{"lineNum":"  109","line":"struct DefaultDuplication<Kokkos::OpenMP> {"},
{"lineNum":"  110","line":"  using type = Kokkos::Experimental::ScatterDuplicated;"},
{"lineNum":"  111","line":"};"},
{"lineNum":"  112","line":"template <>"},
{"lineNum":"  113","line":"struct DefaultContribution<Kokkos::OpenMP,"},
{"lineNum":"  114","line":"                           Kokkos::Experimental::ScatterNonDuplicated> {"},
{"lineNum":"  115","line":"  using type = Kokkos::Experimental::ScatterAtomic;"},
{"lineNum":"  116","line":"};"},
{"lineNum":"  117","line":"template <>"},
{"lineNum":"  118","line":"struct DefaultContribution<Kokkos::OpenMP,"},
{"lineNum":"  119","line":"                           Kokkos::Experimental::ScatterDuplicated> {"},
{"lineNum":"  120","line":"  using type = Kokkos::Experimental::ScatterNonAtomic;"},
{"lineNum":"  121","line":"};"},
{"lineNum":"  122","line":"#endif"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"#ifdef KOKKOS_ENABLE_OPENMPTARGET"},
{"lineNum":"  125","line":"template <>"},
{"lineNum":"  126","line":"struct DefaultDuplication<Kokkos::Experimental::OpenMPTarget> {"},
{"lineNum":"  127","line":"  using type = Kokkos::Experimental::ScatterNonDuplicated;"},
{"lineNum":"  128","line":"};"},
{"lineNum":"  129","line":"template <>"},
{"lineNum":"  130","line":"struct DefaultContribution<Kokkos::Experimental::OpenMPTarget,"},
{"lineNum":"  131","line":"                           Kokkos::Experimental::ScatterNonDuplicated> {"},
{"lineNum":"  132","line":"  using type = Kokkos::Experimental::ScatterAtomic;"},
{"lineNum":"  133","line":"};"},
{"lineNum":"  134","line":"template <>"},
{"lineNum":"  135","line":"struct DefaultContribution<Kokkos::Experimental::OpenMPTarget,"},
{"lineNum":"  136","line":"                           Kokkos::Experimental::ScatterDuplicated> {"},
{"lineNum":"  137","line":"  using type = Kokkos::Experimental::ScatterNonAtomic;"},
{"lineNum":"  138","line":"};"},
{"lineNum":"  139","line":"#endif"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"#ifdef KOKKOS_ENABLE_HPX"},
{"lineNum":"  142","line":"template <>"},
{"lineNum":"  143","line":"struct DefaultDuplication<Kokkos::Experimental::HPX> {"},
{"lineNum":"  144","line":"  using type = Kokkos::Experimental::ScatterDuplicated;"},
{"lineNum":"  145","line":"};"},
{"lineNum":"  146","line":"template <>"},
{"lineNum":"  147","line":"struct DefaultContribution<Kokkos::Experimental::HPX,"},
{"lineNum":"  148","line":"                           Kokkos::Experimental::ScatterNonDuplicated> {"},
{"lineNum":"  149","line":"  using type = Kokkos::Experimental::ScatterAtomic;"},
{"lineNum":"  150","line":"};"},
{"lineNum":"  151","line":"template <>"},
{"lineNum":"  152","line":"struct DefaultContribution<Kokkos::Experimental::HPX,"},
{"lineNum":"  153","line":"                           Kokkos::Experimental::ScatterDuplicated> {"},
{"lineNum":"  154","line":"  using type = Kokkos::Experimental::ScatterNonAtomic;"},
{"lineNum":"  155","line":"};"},
{"lineNum":"  156","line":"#endif"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"#ifdef KOKKOS_ENABLE_THREADS"},
{"lineNum":"  159","line":"template <>"},
{"lineNum":"  160","line":"struct DefaultDuplication<Kokkos::Threads> {"},
{"lineNum":"  161","line":"  using type = Kokkos::Experimental::ScatterDuplicated;"},
{"lineNum":"  162","line":"};"},
{"lineNum":"  163","line":"template <>"},
{"lineNum":"  164","line":"struct DefaultContribution<Kokkos::Threads,"},
{"lineNum":"  165","line":"                           Kokkos::Experimental::ScatterNonDuplicated> {"},
{"lineNum":"  166","line":"  using type = Kokkos::Experimental::ScatterAtomic;"},
{"lineNum":"  167","line":"};"},
{"lineNum":"  168","line":"template <>"},
{"lineNum":"  169","line":"struct DefaultContribution<Kokkos::Threads,"},
{"lineNum":"  170","line":"                           Kokkos::Experimental::ScatterDuplicated> {"},
{"lineNum":"  171","line":"  using type = Kokkos::Experimental::ScatterNonAtomic;"},
{"lineNum":"  172","line":"};"},
{"lineNum":"  173","line":"#endif"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"#ifdef KOKKOS_ENABLE_CUDA"},
{"lineNum":"  176","line":"template <>"},
{"lineNum":"  177","line":"struct DefaultDuplication<Kokkos::Cuda> {"},
{"lineNum":"  178","line":"  using type = Kokkos::Experimental::ScatterNonDuplicated;"},
{"lineNum":"  179","line":"};"},
{"lineNum":"  180","line":"template <>"},
{"lineNum":"  181","line":"struct DefaultContribution<Kokkos::Cuda,"},
{"lineNum":"  182","line":"                           Kokkos::Experimental::ScatterNonDuplicated> {"},
{"lineNum":"  183","line":"  using type = Kokkos::Experimental::ScatterAtomic;"},
{"lineNum":"  184","line":"};"},
{"lineNum":"  185","line":"template <>"},
{"lineNum":"  186","line":"struct DefaultContribution<Kokkos::Cuda,"},
{"lineNum":"  187","line":"                           Kokkos::Experimental::ScatterDuplicated> {"},
{"lineNum":"  188","line":"  using type = Kokkos::Experimental::ScatterAtomic;"},
{"lineNum":"  189","line":"};"},
{"lineNum":"  190","line":"#endif"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"#ifdef KOKKOS_ENABLE_HIP"},
{"lineNum":"  193","line":"template <>"},
{"lineNum":"  194","line":"struct DefaultDuplication<Kokkos::Experimental::HIP> {"},
{"lineNum":"  195","line":"  using type = Kokkos::Experimental::ScatterNonDuplicated;"},
{"lineNum":"  196","line":"};"},
{"lineNum":"  197","line":"template <>"},
{"lineNum":"  198","line":"struct DefaultContribution<Kokkos::Experimental::HIP,"},
{"lineNum":"  199","line":"                           Kokkos::Experimental::ScatterNonDuplicated> {"},
{"lineNum":"  200","line":"  using type = Kokkos::Experimental::ScatterAtomic;"},
{"lineNum":"  201","line":"};"},
{"lineNum":"  202","line":"template <>"},
{"lineNum":"  203","line":"struct DefaultContribution<Kokkos::Experimental::HIP,"},
{"lineNum":"  204","line":"                           Kokkos::Experimental::ScatterDuplicated> {"},
{"lineNum":"  205","line":"  using type = Kokkos::Experimental::ScatterAtomic;"},
{"lineNum":"  206","line":"};"},
{"lineNum":"  207","line":"#endif"},
{"lineNum":"  208","line":""},
{"lineNum":"  209","line":"#ifdef KOKKOS_ENABLE_SYCL"},
{"lineNum":"  210","line":"template <>"},
{"lineNum":"  211","line":"struct DefaultDuplication<Kokkos::Experimental::SYCL> {"},
{"lineNum":"  212","line":"  using type = Kokkos::Experimental::ScatterNonDuplicated;"},
{"lineNum":"  213","line":"};"},
{"lineNum":"  214","line":"template <>"},
{"lineNum":"  215","line":"struct DefaultContribution<Kokkos::Experimental::SYCL,"},
{"lineNum":"  216","line":"                           Kokkos::Experimental::ScatterNonDuplicated> {"},
{"lineNum":"  217","line":"  using type = Kokkos::Experimental::ScatterAtomic;"},
{"lineNum":"  218","line":"};"},
{"lineNum":"  219","line":"template <>"},
{"lineNum":"  220","line":"struct DefaultContribution<Kokkos::Experimental::SYCL,"},
{"lineNum":"  221","line":"                           Kokkos::Experimental::ScatterDuplicated> {"},
{"lineNum":"  222","line":"  using type = Kokkos::Experimental::ScatterAtomic;"},
{"lineNum":"  223","line":"};"},
{"lineNum":"  224","line":"#endif"},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"// FIXME All these scatter values need overhaul:"},
{"lineNum":"  227","line":"//   - like should they be copyable at all?"},
{"lineNum":"  228","line":"//   - what is the internal handle type"},
{"lineNum":"  229","line":"//   - remove join"},
{"lineNum":"  230","line":"//   - consistently use the update function in operators"},
{"lineNum":"  231","line":"template <typename ValueType, typename Op, typename DeviceType,"},
{"lineNum":"  232","line":"          typename Contribution>"},
{"lineNum":"  233","line":"struct ScatterValue;"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"/* ScatterValue <Op=ScatterSum, Contribution=ScatterNonAtomic> is"},
{"lineNum":"  236","line":"   the object returned by the access operator() of ScatterAccess. This class"},
{"lineNum":"  237","line":"   inherits from the Sum<> reducer and it wraps join(dest, src) with convenient"},
{"lineNum":"  238","line":"   operator+=, etc. Note the addition of update(ValueType const& rhs) and"},
{"lineNum":"  239","line":"   reset()  so that all reducers can have common functions See ReduceDuplicates"},
{"lineNum":"  240","line":"   and ResetDuplicates ) */"},
{"lineNum":"  241","line":"template <typename ValueType, typename DeviceType>"},
{"lineNum":"  242","line":"struct ScatterValue<ValueType, Kokkos::Experimental::ScatterSum, DeviceType,"},
{"lineNum":"  243","line":"                    Kokkos::Experimental::ScatterNonAtomic> {"},
{"lineNum":"  244","line":"  ValueType& value;"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":" public:"},
{"lineNum":"  247","line":"  KOKKOS_FORCEINLINE_FUNCTION ScatterValue(ValueType& value_in)"},
{"lineNum":"  248","line":"      : value(value_in) {}"},
{"lineNum":"  249","line":"  KOKKOS_FORCEINLINE_FUNCTION ScatterValue(ScatterValue&& other)"},
{"lineNum":"  250","line":"      : value(other.value) {}"},
{"lineNum":"  251","line":"  KOKKOS_FORCEINLINE_FUNCTION void operator+=(ValueType const& rhs) {"},
{"lineNum":"  252","line":"    update(rhs);"},
{"lineNum":"  253","line":"  }"},
{"lineNum":"  254","line":"  KOKKOS_FORCEINLINE_FUNCTION void operator++() { update(1); }"},
{"lineNum":"  255","line":"  KOKKOS_FORCEINLINE_FUNCTION void operator++(int) { update(1); }"},
{"lineNum":"  256","line":"  KOKKOS_FORCEINLINE_FUNCTION void operator-=(ValueType const& rhs) {"},
{"lineNum":"  257","line":"    update(ValueType(-rhs));"},
{"lineNum":"  258","line":"  }"},
{"lineNum":"  259","line":"  KOKKOS_FORCEINLINE_FUNCTION void operator--() { update(ValueType(-1)); }"},
{"lineNum":"  260","line":"  KOKKOS_FORCEINLINE_FUNCTION void operator--(int) { update(ValueType(-1)); }"},
{"lineNum":"  261","line":"  KOKKOS_FORCEINLINE_FUNCTION void update(ValueType const& rhs) {"},
{"lineNum":"  262","line":"    value += rhs;","class":"lineNoCov","hits":"0","possible_hits":"38",},
{"lineNum":"  263","line":"  }"},
{"lineNum":"  264","line":"  KOKKOS_FORCEINLINE_FUNCTION void reset() {"},
{"lineNum":"  265","line":"    value = reduction_identity<ValueType>::sum();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  266","line":"  }"},
{"lineNum":"  267","line":"};"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"/* ScatterValue <Op=ScatterSum, Contribution=ScatterAtomic> is the"},
{"lineNum":"  270","line":" object returned by the access operator() of ScatterAccess. This class inherits"},
{"lineNum":"  271","line":" from the Sum<> reducer, and similar to that returned by an Atomic View, it"},
{"lineNum":"  272","line":" wraps Kokkos::atomic_add with convenient operator+=, etc. This version also has"},
{"lineNum":"  273","line":" the update(rhs) and reset() functions. */"},
{"lineNum":"  274","line":"template <typename ValueType, typename DeviceType>"},
{"lineNum":"  275","line":"struct ScatterValue<ValueType, Kokkos::Experimental::ScatterSum, DeviceType,"},
{"lineNum":"  276","line":"                    Kokkos::Experimental::ScatterAtomic> {"},
{"lineNum":"  277","line":"  ValueType& value;"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":" public:"},
{"lineNum":"  280","line":"  KOKKOS_FORCEINLINE_FUNCTION ScatterValue(ValueType& value_in)"},
{"lineNum":"  281","line":"      : value(value_in) {}"},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"  KOKKOS_FORCEINLINE_FUNCTION void operator+=(ValueType const& rhs) {"},
{"lineNum":"  284","line":"    this->join(value, rhs);"},
{"lineNum":"  285","line":"  }"},
{"lineNum":"  286","line":"  KOKKOS_FORCEINLINE_FUNCTION void operator++() { this->join(value, 1); }"},
{"lineNum":"  287","line":"  KOKKOS_FORCEINLINE_FUNCTION void operator++(int) { this->join(value, 1); }"},
{"lineNum":"  288","line":"  KOKKOS_FORCEINLINE_FUNCTION void operator-=(ValueType const& rhs) {"},
{"lineNum":"  289","line":"    this->join(value, ValueType(-rhs));"},
{"lineNum":"  290","line":"  }"},
{"lineNum":"  291","line":"  KOKKOS_FORCEINLINE_FUNCTION void operator--() {"},
{"lineNum":"  292","line":"    this->join(value, ValueType(-1));"},
{"lineNum":"  293","line":"  }"},
{"lineNum":"  294","line":"  KOKKOS_FORCEINLINE_FUNCTION void operator--(int) {"},
{"lineNum":"  295","line":"    this->join(value, ValueType(-1));"},
{"lineNum":"  296","line":"  }"},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  299","line":"  void join(ValueType& dest, const ValueType& src) const {"},
{"lineNum":"  300","line":"    Kokkos::atomic_add(&dest, src);"},
{"lineNum":"  301","line":"  }"},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  304","line":"  void join(volatile ValueType& dest, const volatile ValueType& src) const {"},
{"lineNum":"  305","line":"    Kokkos::atomic_add(&dest, src);"},
{"lineNum":"  306","line":"  }"},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"  KOKKOS_FORCEINLINE_FUNCTION void update(ValueType const& rhs) {"},
{"lineNum":"  309","line":"    this->join(value, rhs);"},
{"lineNum":"  310","line":"  }"},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":"  KOKKOS_FORCEINLINE_FUNCTION void reset() {"},
{"lineNum":"  313","line":"    value = reduction_identity<ValueType>::sum();"},
{"lineNum":"  314","line":"  }"},
{"lineNum":"  315","line":"};"},
{"lineNum":"  316","line":""},
{"lineNum":"  317","line":"/* ScatterValue <Op=ScatterProd, Contribution=ScatterNonAtomic> is"},
{"lineNum":"  318","line":"   the object returned by the access operator() of ScatterAccess.  This class"},
{"lineNum":"  319","line":"   inherits from the Prod<> reducer, and it wraps join(dest, src) with"},
{"lineNum":"  320","line":"   convenient operator*=, etc. Note the addition of update(ValueType const& rhs)"},
{"lineNum":"  321","line":"   and reset()  so that all reducers can have common functions See"},
{"lineNum":"  322","line":"   ReduceDuplicates and ResetDuplicates ) */"},
{"lineNum":"  323","line":"template <typename ValueType, typename DeviceType>"},
{"lineNum":"  324","line":"struct ScatterValue<ValueType, Kokkos::Experimental::ScatterProd, DeviceType,"},
{"lineNum":"  325","line":"                    Kokkos::Experimental::ScatterNonAtomic> {"},
{"lineNum":"  326","line":"  ValueType& value;"},
{"lineNum":"  327","line":""},
{"lineNum":"  328","line":" public:"},
{"lineNum":"  329","line":"  KOKKOS_FORCEINLINE_FUNCTION ScatterValue(ValueType& value_in)"},
{"lineNum":"  330","line":"      : value(value_in) {}"},
{"lineNum":"  331","line":"  KOKKOS_FORCEINLINE_FUNCTION ScatterValue(ScatterValue&& other)"},
{"lineNum":"  332","line":"      : value(other.value) {}"},
{"lineNum":"  333","line":"  KOKKOS_FORCEINLINE_FUNCTION void operator*=(ValueType const& rhs) {"},
{"lineNum":"  334","line":"    value *= rhs;"},
{"lineNum":"  335","line":"  }"},
{"lineNum":"  336","line":"  KOKKOS_FORCEINLINE_FUNCTION void operator/=(ValueType const& rhs) {"},
{"lineNum":"  337","line":"    value /= rhs;"},
{"lineNum":"  338","line":"  }"},
{"lineNum":"  339","line":""},
{"lineNum":"  340","line":"  KOKKOS_FORCEINLINE_FUNCTION void update(ValueType const& rhs) {"},
{"lineNum":"  341","line":"    value *= rhs;"},
{"lineNum":"  342","line":"  }"},
{"lineNum":"  343","line":"  KOKKOS_FORCEINLINE_FUNCTION void reset() {"},
{"lineNum":"  344","line":"    value = reduction_identity<ValueType>::prod();"},
{"lineNum":"  345","line":"  }"},
{"lineNum":"  346","line":"};"},
{"lineNum":"  347","line":""},
{"lineNum":"  348","line":"/* ScatterValue <Op=ScatterProd, Contribution=ScatterAtomic> is the"},
{"lineNum":"  349","line":" object returned by the access operator() of ScatterAccess.  This class"},
{"lineNum":"  350","line":" inherits from the Prod<> reducer, and similar to that returned by an Atomic"},
{"lineNum":"  351","line":" View, it wraps and atomic_prod with convenient operator*=, etc. atomic_prod"},
{"lineNum":"  352","line":" uses the atomic_compare_exchange. This version also has the update(rhs)"},
{"lineNum":"  353","line":" and reset() functions. */"},
{"lineNum":"  354","line":"template <typename ValueType, typename DeviceType>"},
{"lineNum":"  355","line":"struct ScatterValue<ValueType, Kokkos::Experimental::ScatterProd, DeviceType,"},
{"lineNum":"  356","line":"                    Kokkos::Experimental::ScatterAtomic> {"},
{"lineNum":"  357","line":"  ValueType& value;"},
{"lineNum":"  358","line":""},
{"lineNum":"  359","line":" public:"},
{"lineNum":"  360","line":"  KOKKOS_FORCEINLINE_FUNCTION ScatterValue(ValueType& value_in)"},
{"lineNum":"  361","line":"      : value(value_in) {}"},
{"lineNum":"  362","line":"  KOKKOS_FORCEINLINE_FUNCTION ScatterValue(ScatterValue&& other)"},
{"lineNum":"  363","line":"      : value(other.value) {}"},
{"lineNum":"  364","line":""},
{"lineNum":"  365","line":"  KOKKOS_FORCEINLINE_FUNCTION void operator*=(ValueType const& rhs) {"},
{"lineNum":"  366","line":"    Kokkos::atomic_mul(&value, rhs);"},
{"lineNum":"  367","line":"  }"},
{"lineNum":"  368","line":"  KOKKOS_FORCEINLINE_FUNCTION void operator/=(ValueType const& rhs) {"},
{"lineNum":"  369","line":"    Kokkos::atomic_div(&value, rhs);"},
{"lineNum":"  370","line":"  }"},
{"lineNum":"  371","line":""},
{"lineNum":"  372","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":"  373","line":"  void atomic_prod(ValueType& dest, const ValueType& src) const {"},
{"lineNum":"  374","line":"    bool success = false;"},
{"lineNum":"  375","line":"    while (!success) {"},
{"lineNum":"  376","line":"      ValueType dest_old = dest;"},
{"lineNum":"  377","line":"      ValueType dest_new = dest_old * src;"},
{"lineNum":"  378","line":"      dest_new ="},
{"lineNum":"  379","line":"          Kokkos::atomic_compare_exchange<ValueType>(&dest, dest_old, dest_new);"},
{"lineNum":"  380","line":"      success = ((dest_new - dest_old) / dest_old <= 1e-15);"},
{"lineNum":"  381","line":"    }"},
{"lineNum":"  382","line":"  }"},
{"lineNum":"  383","line":""},
{"lineNum":"  384","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  385","line":"  void join(ValueType& dest, const ValueType& src) const {"},
{"lineNum":"  386","line":"    atomic_prod(&dest, src);"},
{"lineNum":"  387","line":"  }"},
{"lineNum":"  388","line":""},
{"lineNum":"  389","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  390","line":"  void join(volatile ValueType& dest, const volatile ValueType& src) const {"},
{"lineNum":"  391","line":"    atomic_prod(&dest, src);"},
{"lineNum":"  392","line":"  }"},
{"lineNum":"  393","line":""},
{"lineNum":"  394","line":"  KOKKOS_FORCEINLINE_FUNCTION void update(ValueType const& rhs) {"},
{"lineNum":"  395","line":"    atomic_prod(&value, rhs);"},
{"lineNum":"  396","line":"  }"},
{"lineNum":"  397","line":"  KOKKOS_FORCEINLINE_FUNCTION void reset() {"},
{"lineNum":"  398","line":"    value = reduction_identity<ValueType>::prod();"},
{"lineNum":"  399","line":"  }"},
{"lineNum":"  400","line":"};"},
{"lineNum":"  401","line":""},
{"lineNum":"  402","line":"/* ScatterValue <Op=ScatterMin, Contribution=ScatterNonAtomic> is"},
{"lineNum":"  403","line":"   the object returned by the access operator() of ScatterAccess. This class"},
{"lineNum":"  404","line":"   inherits from the Min<> reducer and it wraps join(dest, src) with convenient"},
{"lineNum":"  405","line":"   update(rhs). Note the addition of update(ValueType const& rhs) and reset()"},
{"lineNum":"  406","line":"   are so that all reducers can have a common update function See"},
{"lineNum":"  407","line":"   ReduceDuplicates and ResetDuplicates ) */"},
{"lineNum":"  408","line":"template <typename ValueType, typename DeviceType>"},
{"lineNum":"  409","line":"struct ScatterValue<ValueType, Kokkos::Experimental::ScatterMin, DeviceType,"},
{"lineNum":"  410","line":"                    Kokkos::Experimental::ScatterNonAtomic> {"},
{"lineNum":"  411","line":"  ValueType& value;"},
{"lineNum":"  412","line":"  KOKKOS_FORCEINLINE_FUNCTION ScatterValue(ValueType& value_in)"},
{"lineNum":"  413","line":"      : value(value_in) {}"},
{"lineNum":"  414","line":"  KOKKOS_FORCEINLINE_FUNCTION ScatterValue(ScatterValue&& other)"},
{"lineNum":"  415","line":"      : value(other.value) {}"},
{"lineNum":"  416","line":""},
{"lineNum":"  417","line":" public:"},
{"lineNum":"  418","line":"  KOKKOS_FORCEINLINE_FUNCTION void update(ValueType const& rhs) {"},
{"lineNum":"  419","line":"    value = rhs < value ? rhs : value;"},
{"lineNum":"  420","line":"  }"},
{"lineNum":"  421","line":"  KOKKOS_FORCEINLINE_FUNCTION void reset() {"},
{"lineNum":"  422","line":"    value = reduction_identity<ValueType>::min();"},
{"lineNum":"  423","line":"  }"},
{"lineNum":"  424","line":"};"},
{"lineNum":"  425","line":""},
{"lineNum":"  426","line":"/* ScatterValue <Op=ScatterMin, Contribution=ScatterAtomic> is the"},
{"lineNum":"  427","line":"   object returned by the access operator() of ScatterAccess. This class"},
{"lineNum":"  428","line":"   inherits from the Min<> reducer, and similar to that returned by an Atomic"},
{"lineNum":"  429","line":"   View, it wraps atomic_min with join(), etc. atomic_min uses the"},
{"lineNum":"  430","line":"   atomic_compare_exchange. This version also has the update(rhs) and reset()"},
{"lineNum":"  431","line":"   functions. */"},
{"lineNum":"  432","line":"template <typename ValueType, typename DeviceType>"},
{"lineNum":"  433","line":"struct ScatterValue<ValueType, Kokkos::Experimental::ScatterMin, DeviceType,"},
{"lineNum":"  434","line":"                    Kokkos::Experimental::ScatterAtomic> {"},
{"lineNum":"  435","line":"  ValueType& value;"},
{"lineNum":"  436","line":""},
{"lineNum":"  437","line":" public:"},
{"lineNum":"  438","line":"  KOKKOS_FORCEINLINE_FUNCTION ScatterValue(ValueType& value_in)"},
{"lineNum":"  439","line":"      : value(value_in) {}"},
{"lineNum":"  440","line":"  KOKKOS_FORCEINLINE_FUNCTION ScatterValue(ScatterValue&& other)"},
{"lineNum":"  441","line":"      : value(other.value) {}"},
{"lineNum":"  442","line":""},
{"lineNum":"  443","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":"  444","line":"  void atomic_min(ValueType& dest, const ValueType& src) const {"},
{"lineNum":"  445","line":"    bool success = false;"},
{"lineNum":"  446","line":"    while (!success) {"},
{"lineNum":"  447","line":"      ValueType dest_old = dest;"},
{"lineNum":"  448","line":"      ValueType dest_new = (dest_old > src) ? src : dest_old;"},
{"lineNum":"  449","line":"      dest_new ="},
{"lineNum":"  450","line":"          Kokkos::atomic_compare_exchange<ValueType>(&dest, dest_old, dest_new);"},
{"lineNum":"  451","line":"      success = ((dest_new - dest_old) / dest_old <= 1e-15);"},
{"lineNum":"  452","line":"    }"},
{"lineNum":"  453","line":"  }"},
{"lineNum":"  454","line":""},
{"lineNum":"  455","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  456","line":"  void join(ValueType& dest, const ValueType& src) const {"},
{"lineNum":"  457","line":"    atomic_min(dest, src);"},
{"lineNum":"  458","line":"  }"},
{"lineNum":"  459","line":""},
{"lineNum":"  460","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  461","line":"  void join(volatile ValueType& dest, const volatile ValueType& src) const {"},
{"lineNum":"  462","line":"    atomic_min(dest, src);"},
{"lineNum":"  463","line":"  }"},
{"lineNum":"  464","line":""},
{"lineNum":"  465","line":"  KOKKOS_FORCEINLINE_FUNCTION void update(ValueType const& rhs) {"},
{"lineNum":"  466","line":"    this->join(value, rhs);"},
{"lineNum":"  467","line":"  }"},
{"lineNum":"  468","line":"  KOKKOS_FORCEINLINE_FUNCTION void reset() {"},
{"lineNum":"  469","line":"    value = reduction_identity<ValueType>::min();"},
{"lineNum":"  470","line":"  }"},
{"lineNum":"  471","line":"};"},
{"lineNum":"  472","line":""},
{"lineNum":"  473","line":"/* ScatterValue <Op=ScatterMax, Contribution=ScatterNonAtomic> is"},
{"lineNum":"  474","line":"   the object returned by the access operator() of ScatterAccess. This class"},
{"lineNum":"  475","line":"   inherits from the Max<> reducer and it wraps join(dest, src) with convenient"},
{"lineNum":"  476","line":"   update(rhs). Note the addition of update(ValueType const& rhs) and reset()"},
{"lineNum":"  477","line":"   are so that all reducers can have a common update function See"},
{"lineNum":"  478","line":"   ReduceDuplicates and ResetDuplicates ) */"},
{"lineNum":"  479","line":"template <typename ValueType, typename DeviceType>"},
{"lineNum":"  480","line":"struct ScatterValue<ValueType, Kokkos::Experimental::ScatterMax, DeviceType,"},
{"lineNum":"  481","line":"                    Kokkos::Experimental::ScatterNonAtomic> {"},
{"lineNum":"  482","line":"  ValueType& value;"},
{"lineNum":"  483","line":""},
{"lineNum":"  484","line":" public:"},
{"lineNum":"  485","line":"  KOKKOS_FORCEINLINE_FUNCTION ScatterValue(ValueType& value_in)"},
{"lineNum":"  486","line":"      : value(value_in) {}"},
{"lineNum":"  487","line":"  KOKKOS_FORCEINLINE_FUNCTION ScatterValue(ScatterValue&& other)"},
{"lineNum":"  488","line":"      : value(other.value) {}"},
{"lineNum":"  489","line":"  KOKKOS_FORCEINLINE_FUNCTION void update(ValueType const& rhs) {"},
{"lineNum":"  490","line":"    value = rhs > value ? rhs : value;"},
{"lineNum":"  491","line":"  }"},
{"lineNum":"  492","line":"  KOKKOS_FORCEINLINE_FUNCTION void reset() {"},
{"lineNum":"  493","line":"    value = reduction_identity<ValueType>::max();"},
{"lineNum":"  494","line":"  }"},
{"lineNum":"  495","line":"};"},
{"lineNum":"  496","line":""},
{"lineNum":"  497","line":"/* ScatterValue <Op=ScatterMax, Contribution=ScatterAtomic> is the"},
{"lineNum":"  498","line":"   object returned by the access operator() of ScatterAccess. This class"},
{"lineNum":"  499","line":"   inherits from the Max<> reducer, and similar to that returned by an Atomic"},
{"lineNum":"  500","line":"   View, it wraps atomic_max with join(), etc. atomic_max uses the"},
{"lineNum":"  501","line":"   atomic_compare_exchange. This version also has the update(rhs) and reset()"},
{"lineNum":"  502","line":"   functions. */"},
{"lineNum":"  503","line":"template <typename ValueType, typename DeviceType>"},
{"lineNum":"  504","line":"struct ScatterValue<ValueType, Kokkos::Experimental::ScatterMax, DeviceType,"},
{"lineNum":"  505","line":"                    Kokkos::Experimental::ScatterAtomic> {"},
{"lineNum":"  506","line":"  ValueType& value;"},
{"lineNum":"  507","line":""},
{"lineNum":"  508","line":" public:"},
{"lineNum":"  509","line":"  KOKKOS_FORCEINLINE_FUNCTION ScatterValue(ValueType& value_in)"},
{"lineNum":"  510","line":"      : value(value_in) {}"},
{"lineNum":"  511","line":"  KOKKOS_FORCEINLINE_FUNCTION ScatterValue(ScatterValue&& other)"},
{"lineNum":"  512","line":"      : value(other.value) {}"},
{"lineNum":"  513","line":""},
{"lineNum":"  514","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":"  515","line":"  void atomic_max(ValueType& dest, const ValueType& src) const {"},
{"lineNum":"  516","line":"    bool success = false;"},
{"lineNum":"  517","line":"    while (!success) {"},
{"lineNum":"  518","line":"      ValueType dest_old = dest;"},
{"lineNum":"  519","line":"      ValueType dest_new = (dest_old < src) ? src : dest_old;"},
{"lineNum":"  520","line":"      dest_new ="},
{"lineNum":"  521","line":"          Kokkos::atomic_compare_exchange<ValueType>(&dest, dest_old, dest_new);"},
{"lineNum":"  522","line":"      success = ((dest_new - dest_old) / dest_old <= 1e-15);"},
{"lineNum":"  523","line":"    }"},
{"lineNum":"  524","line":"  }"},
{"lineNum":"  525","line":""},
{"lineNum":"  526","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  527","line":"  void join(ValueType& dest, const ValueType& src) const {"},
{"lineNum":"  528","line":"    atomic_max(dest, src);"},
{"lineNum":"  529","line":"  }"},
{"lineNum":"  530","line":""},
{"lineNum":"  531","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  532","line":"  void join(volatile ValueType& dest, const volatile ValueType& src) const {"},
{"lineNum":"  533","line":"    atomic_max(dest, src);"},
{"lineNum":"  534","line":"  }"},
{"lineNum":"  535","line":""},
{"lineNum":"  536","line":"  KOKKOS_FORCEINLINE_FUNCTION void update(ValueType const& rhs) {"},
{"lineNum":"  537","line":"    this->join(value, rhs);"},
{"lineNum":"  538","line":"  }"},
{"lineNum":"  539","line":"  KOKKOS_FORCEINLINE_FUNCTION void reset() {"},
{"lineNum":"  540","line":"    value = reduction_identity<ValueType>::max();"},
{"lineNum":"  541","line":"  }"},
{"lineNum":"  542","line":"};"},
{"lineNum":"  543","line":""},
{"lineNum":"  544","line":"/* DuplicatedDataType, given a View DataType, will create a new DataType"},
{"lineNum":"  545","line":"   that has a new runtime dimension which becomes the largest-stride dimension."},
{"lineNum":"  546","line":"   In the case of LayoutLeft, due to the limitation induced by the design of"},
{"lineNum":"  547","line":"   DataType itself, it must convert any existing compile-time dimensions into"},
{"lineNum":"  548","line":"   runtime dimensions. */"},
{"lineNum":"  549","line":"template <typename T, typename Layout>"},
{"lineNum":"  550","line":"struct DuplicatedDataType;"},
{"lineNum":"  551","line":""},
{"lineNum":"  552","line":"template <typename T>"},
{"lineNum":"  553","line":"struct DuplicatedDataType<T, Kokkos::LayoutRight> {"},
{"lineNum":"  554","line":"  using value_type = T*;  // For LayoutRight, add a star all the way on the left"},
{"lineNum":"  555","line":"};"},
{"lineNum":"  556","line":""},
{"lineNum":"  557","line":"template <typename T, size_t N>"},
{"lineNum":"  558","line":"struct DuplicatedDataType<T[N], Kokkos::LayoutRight> {"},
{"lineNum":"  559","line":"  using value_type ="},
{"lineNum":"  560","line":"      typename DuplicatedDataType<T, Kokkos::LayoutRight>::value_type[N];"},
{"lineNum":"  561","line":"};"},
{"lineNum":"  562","line":""},
{"lineNum":"  563","line":"template <typename T>"},
{"lineNum":"  564","line":"struct DuplicatedDataType<T[], Kokkos::LayoutRight> {"},
{"lineNum":"  565","line":"  using value_type ="},
{"lineNum":"  566","line":"      typename DuplicatedDataType<T, Kokkos::LayoutRight>::value_type[];"},
{"lineNum":"  567","line":"};"},
{"lineNum":"  568","line":""},
{"lineNum":"  569","line":"template <typename T>"},
{"lineNum":"  570","line":"struct DuplicatedDataType<T*, Kokkos::LayoutRight> {"},
{"lineNum":"  571","line":"  using value_type ="},
{"lineNum":"  572","line":"      typename DuplicatedDataType<T, Kokkos::LayoutRight>::value_type*;"},
{"lineNum":"  573","line":"};"},
{"lineNum":"  574","line":""},
{"lineNum":"  575","line":"template <typename T>"},
{"lineNum":"  576","line":"struct DuplicatedDataType<T, Kokkos::LayoutLeft> {"},
{"lineNum":"  577","line":"  using value_type = T*;"},
{"lineNum":"  578","line":"};"},
{"lineNum":"  579","line":""},
{"lineNum":"  580","line":"template <typename T, size_t N>"},
{"lineNum":"  581","line":"struct DuplicatedDataType<T[N], Kokkos::LayoutLeft> {"},
{"lineNum":"  582","line":"  using value_type ="},
{"lineNum":"  583","line":"      typename DuplicatedDataType<T, Kokkos::LayoutLeft>::value_type*;"},
{"lineNum":"  584","line":"};"},
{"lineNum":"  585","line":""},
{"lineNum":"  586","line":"template <typename T>"},
{"lineNum":"  587","line":"struct DuplicatedDataType<T[], Kokkos::LayoutLeft> {"},
{"lineNum":"  588","line":"  using value_type ="},
{"lineNum":"  589","line":"      typename DuplicatedDataType<T, Kokkos::LayoutLeft>::value_type*;"},
{"lineNum":"  590","line":"};"},
{"lineNum":"  591","line":""},
{"lineNum":"  592","line":"template <typename T>"},
{"lineNum":"  593","line":"struct DuplicatedDataType<T*, Kokkos::LayoutLeft> {"},
{"lineNum":"  594","line":"  using value_type ="},
{"lineNum":"  595","line":"      typename DuplicatedDataType<T, Kokkos::LayoutLeft>::value_type*;"},
{"lineNum":"  596","line":"};"},
{"lineNum":"  597","line":""},
{"lineNum":"  598","line":"/* Insert integer argument pack into array */"},
{"lineNum":"  599","line":""},
{"lineNum":"  600","line":"template <class T>"},
{"lineNum":"  601","line":"void args_to_array(size_t* array, int pos, T dim0) {"},
{"lineNum":"  602","line":"  array[pos] = dim0;"},
{"lineNum":"  603","line":"}"},
{"lineNum":"  604","line":"template <class T, class... Dims>"},
{"lineNum":"  605","line":"void args_to_array(size_t* array, int pos, T dim0, Dims... dims) {"},
{"lineNum":"  606","line":"  array[pos] = dim0;"},
{"lineNum":"  607","line":"  args_to_array(array, pos + 1, dims...);"},
{"lineNum":"  608","line":"}"},
{"lineNum":"  609","line":""},
{"lineNum":"  610","line":"/* Slice is just responsible for stuffing the correct number of Kokkos::ALL"},
{"lineNum":"  611","line":"   arguments on the correct side of the index in a call to subview() to get a"},
{"lineNum":"  612","line":"   subview where the index specified is the largest-stride one. */"},
{"lineNum":"  613","line":"template <typename Layout, int rank, typename V, typename... Args>"},
{"lineNum":"  614","line":"struct Slice {"},
{"lineNum":"  615","line":"  using next       = Slice<Layout, rank - 1, V, Kokkos::Impl::ALL_t, Args...>;"},
{"lineNum":"  616","line":"  using value_type = typename next::value_type;"},
{"lineNum":"  617","line":""},
{"lineNum":"  618","line":"  static value_type get(V const& src, const size_t i, Args... args) {"},
{"lineNum":"  619","line":"    return next::get(src, i, Kokkos::ALL, args...);"},
{"lineNum":"  620","line":"  }"},
{"lineNum":"  621","line":"};"},
{"lineNum":"  622","line":""},
{"lineNum":"  623","line":"template <typename V, typename... Args>"},
{"lineNum":"  624","line":"struct Slice<Kokkos::LayoutRight, 1, V, Args...> {"},
{"lineNum":"  625","line":"  using value_type ="},
{"lineNum":"  626","line":"      typename Kokkos::Impl::ViewMapping<void, V, const size_t, Args...>::type;"},
{"lineNum":"  627","line":"  static value_type get(V const& src, const size_t i, Args... args) {"},
{"lineNum":"  628","line":"    return Kokkos::subview(src, i, args...);"},
{"lineNum":"  629","line":"  }"},
{"lineNum":"  630","line":"};"},
{"lineNum":"  631","line":""},
{"lineNum":"  632","line":"template <typename V, typename... Args>"},
{"lineNum":"  633","line":"struct Slice<Kokkos::LayoutLeft, 1, V, Args...> {"},
{"lineNum":"  634","line":"  using value_type ="},
{"lineNum":"  635","line":"      typename Kokkos::Impl::ViewMapping<void, V, Args..., const size_t>::type;"},
{"lineNum":"  636","line":"  static value_type get(V const& src, const size_t i, Args... args) {"},
{"lineNum":"  637","line":"    return Kokkos::subview(src, args..., i);"},
{"lineNum":"  638","line":"  }"},
{"lineNum":"  639","line":"};"},
{"lineNum":"  640","line":""},
{"lineNum":"  641","line":"template <typename ExecSpace, typename ValueType, typename Op>"},
{"lineNum":"  642","line":"struct ReduceDuplicates;"},
{"lineNum":"  643","line":""},
{"lineNum":"  644","line":"template <typename ExecSpace, typename ValueType, typename Op>"},
{"lineNum":"  645","line":"struct ReduceDuplicatesBase {"},
{"lineNum":"  646","line":"  using Derived = ReduceDuplicates<ExecSpace, ValueType, Op>;"},
{"lineNum":"  647","line":"  ValueType const* src;"},
{"lineNum":"  648","line":"  ValueType* dst;"},
{"lineNum":"  649","line":"  size_t stride;"},
{"lineNum":"  650","line":"  size_t start;"},
{"lineNum":"  651","line":"  size_t n;"},
{"lineNum":"  652","line":"  ReduceDuplicatesBase(ExecSpace const& exec_space, ValueType const* src_in,"},
{"lineNum":"  653","line":"                       ValueType* dest_in, size_t stride_in, size_t start_in,"},
{"lineNum":"  654","line":"                       size_t n_in, std::string const& name)"},
{"lineNum":"  655","line":"      : src(src_in), dst(dest_in), stride(stride_in), start(start_in), n(n_in) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  656","line":"    parallel_for("},
{"lineNum":"  657","line":"        std::string(\"Kokkos::ScatterView::ReduceDuplicates [\") + name + \"]\","},
{"lineNum":"  658","line":"        RangePolicy<ExecSpace, size_t>(exec_space, 0, stride),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  659","line":"        static_cast<Derived const&>(*this));"},
{"lineNum":"  660","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  661","line":"};"},
{"lineNum":"  662","line":""},
{"lineNum":"  663","line":"/* ReduceDuplicates -- Perform reduction on destination array using strided"},
{"lineNum":"  664","line":" * source Use ScatterValue<> specific to operation to wrap destination array so"},
{"lineNum":"  665","line":" * that the reduction operation can be accessed via the update(rhs) function */"},
{"lineNum":"  666","line":"template <typename ExecSpace, typename ValueType, typename Op>"},
{"lineNum":"  667","line":"struct ReduceDuplicates"},
{"lineNum":"  668","line":"    : public ReduceDuplicatesBase<ExecSpace, ValueType, Op> {"},
{"lineNum":"  669","line":"  using Base = ReduceDuplicatesBase<ExecSpace, ValueType, Op>;"},
{"lineNum":"  670","line":"  ReduceDuplicates(ExecSpace const& exec_space, ValueType const* src_in,"},
{"lineNum":"  671","line":"                   ValueType* dst_in, size_t stride_in, size_t start_in,"},
{"lineNum":"  672","line":"                   size_t n_in, std::string const& name)"},
{"lineNum":"  673","line":"      : Base(exec_space, src_in, dst_in, stride_in, start_in, n_in, name) {}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  674","line":"  KOKKOS_FORCEINLINE_FUNCTION void operator()(size_t i) const {"},
{"lineNum":"  675","line":"    for (size_t j = Base::start; j < Base::n; ++j) {","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  676","line":"      ScatterValue<ValueType, Op, ExecSpace,"},
{"lineNum":"  677","line":"                   Kokkos::Experimental::ScatterNonAtomic>"},
{"lineNum":"  678","line":"          sv(Base::dst[i]);"},
{"lineNum":"  679","line":"      sv.update(Base::src[i + Base::stride * j]);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  680","line":"    }"},
{"lineNum":"  681","line":"  }"},
{"lineNum":"  682","line":"};"},
{"lineNum":"  683","line":""},
{"lineNum":"  684","line":"template <typename ExecSpace, typename ValueType, typename Op>"},
{"lineNum":"  685","line":"struct ResetDuplicates;"},
{"lineNum":"  686","line":""},
{"lineNum":"  687","line":"template <typename ExecSpace, typename ValueType, typename Op>"},
{"lineNum":"  688","line":"struct ResetDuplicatesBase {"},
{"lineNum":"  689","line":"  using Derived = ResetDuplicates<ExecSpace, ValueType, Op>;"},
{"lineNum":"  690","line":"  ValueType* data;"},
{"lineNum":"  691","line":"  ResetDuplicatesBase(ExecSpace const& exec_space, ValueType* data_in,"},
{"lineNum":"  692","line":"                      size_t size_in, std::string const& name)"},
{"lineNum":"  693","line":"      : data(data_in) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  694","line":"    parallel_for("},
{"lineNum":"  695","line":"        std::string(\"Kokkos::ScatterView::ResetDuplicates [\") + name + \"]\","},
{"lineNum":"  696","line":"        RangePolicy<ExecSpace, size_t>(exec_space, 0, size_in),"},
{"lineNum":"  697","line":"        static_cast<Derived const&>(*this));"},
{"lineNum":"  698","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  699","line":"};"},
{"lineNum":"  700","line":""},
{"lineNum":"  701","line":"/* ResetDuplicates -- Perform reset on destination array"},
{"lineNum":"  702","line":" *    Use ScatterValue<> specific to operation to wrap destination array so that"},
{"lineNum":"  703","line":" *    the reset operation can be accessed via the reset() function */"},
{"lineNum":"  704","line":"template <typename ExecSpace, typename ValueType, typename Op>"},
{"lineNum":"  705","line":"struct ResetDuplicates : public ResetDuplicatesBase<ExecSpace, ValueType, Op> {"},
{"lineNum":"  706","line":"  using Base = ResetDuplicatesBase<ExecSpace, ValueType, Op>;"},
{"lineNum":"  707","line":"  ResetDuplicates(ExecSpace const& exec_space, ValueType* data_in,"},
{"lineNum":"  708","line":"                  size_t size_in, std::string const& name)"},
{"lineNum":"  709","line":"      : Base(exec_space, data_in, size_in, name) {}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  710","line":"  KOKKOS_FORCEINLINE_FUNCTION void operator()(size_t i) const {"},
{"lineNum":"  711","line":"    ScatterValue<ValueType, Op, ExecSpace,"},
{"lineNum":"  712","line":"                 Kokkos::Experimental::ScatterNonAtomic>"},
{"lineNum":"  713","line":"        sv(Base::data[i]);"},
{"lineNum":"  714","line":"    sv.reset();"},
{"lineNum":"  715","line":"  }"},
{"lineNum":"  716","line":"};"},
{"lineNum":"  717","line":""},
{"lineNum":"  718","line":"template <typename... P>"},
{"lineNum":"  719","line":"void check_scatter_view_allocation_properties_argument("},
{"lineNum":"  720","line":"    ViewCtorProp<P...> const&) {"},
{"lineNum":"  721","line":"  static_assert(ViewCtorProp<P...>::has_execution_space &&"},
{"lineNum":"  722","line":"                    ViewCtorProp<P...>::has_label &&"},
{"lineNum":"  723","line":"                    ViewCtorProp<P...>::initialize,"},
{"lineNum":"  724","line":"                \"Allocation property must have an execution name as well as a \""},
{"lineNum":"  725","line":"                \"label, and must perform the view initialization\");"},
{"lineNum":"  726","line":"}"},
{"lineNum":"  727","line":""},
{"lineNum":"  728","line":"}  // namespace Experimental"},
{"lineNum":"  729","line":"}  // namespace Impl"},
{"lineNum":"  730","line":"}  // namespace Kokkos"},
{"lineNum":"  731","line":""},
{"lineNum":"  732","line":"namespace Kokkos {"},
{"lineNum":"  733","line":"namespace Experimental {"},
{"lineNum":"  734","line":""},
{"lineNum":"  735","line":"template <typename DataType,"},
{"lineNum":"  736","line":"          typename Layout      = Kokkos::DefaultExecutionSpace::array_layout,"},
{"lineNum":"  737","line":"          typename DeviceType  = Kokkos::DefaultExecutionSpace,"},
{"lineNum":"  738","line":"          typename Op          = Kokkos::Experimental::ScatterSum,"},
{"lineNum":"  739","line":"          typename Duplication = typename Kokkos::Impl::Experimental::"},
{"lineNum":"  740","line":"              DefaultDuplication<typename DeviceType::execution_space>::type,"},
{"lineNum":"  741","line":"          typename Contribution ="},
{"lineNum":"  742","line":"              typename Kokkos::Impl::Experimental::DefaultContribution<"},
{"lineNum":"  743","line":"                  typename DeviceType::execution_space, Duplication>::type>"},
{"lineNum":"  744","line":"class ScatterView;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  745","line":""},
{"lineNum":"  746","line":"template <typename DataType, typename Op, typename DeviceType, typename Layout,"},
{"lineNum":"  747","line":"          typename Duplication, typename Contribution,"},
{"lineNum":"  748","line":"          typename OverrideContribution>"},
{"lineNum":"  749","line":"class ScatterAccess;"},
{"lineNum":"  750","line":""},
{"lineNum":"  751","line":"// non-duplicated implementation"},
{"lineNum":"  752","line":"template <typename DataType, typename Op, typename DeviceType, typename Layout,"},
{"lineNum":"  753","line":"          typename Contribution>"},
{"lineNum":"  754","line":"class ScatterView<DataType, Layout, DeviceType, Op, ScatterNonDuplicated,"},
{"lineNum":"  755","line":"                  Contribution> {"},
{"lineNum":"  756","line":" public:"},
{"lineNum":"  757","line":"  using execution_space         = typename DeviceType::execution_space;"},
{"lineNum":"  758","line":"  using memory_space            = typename DeviceType::memory_space;"},
{"lineNum":"  759","line":"  using device_type             = Kokkos::Device<execution_space, memory_space>;"},
{"lineNum":"  760","line":"  using original_view_type      = Kokkos::View<DataType, Layout, device_type>;"},
{"lineNum":"  761","line":"  using original_value_type     = typename original_view_type::value_type;"},
{"lineNum":"  762","line":"  using original_reference_type = typename original_view_type::reference_type;"},
{"lineNum":"  763","line":"  friend class ScatterAccess<DataType, Op, DeviceType, Layout,"},
{"lineNum":"  764","line":"                             ScatterNonDuplicated, Contribution,"},
{"lineNum":"  765","line":"                             ScatterNonAtomic>;"},
{"lineNum":"  766","line":"  friend class ScatterAccess<DataType, Op, DeviceType, Layout,"},
{"lineNum":"  767","line":"                             ScatterNonDuplicated, Contribution, ScatterAtomic>;"},
{"lineNum":"  768","line":"  template <class, class, class, class, class, class>"},
{"lineNum":"  769","line":"  friend class ScatterView;"},
{"lineNum":"  770","line":""},
{"lineNum":"  771","line":"  ScatterView() = default;"},
{"lineNum":"  772","line":""},
{"lineNum":"  773","line":"  template <typename RT, typename... RP>"},
{"lineNum":"  774","line":"  ScatterView(View<RT, RP...> const& original_view)"},
{"lineNum":"  775","line":"      : internal_view(original_view) {}"},
{"lineNum":"  776","line":""},
{"lineNum":"  777","line":"  template <typename RT, typename... P, typename... RP>"},
{"lineNum":"  778","line":"  ScatterView(execution_space const& /* exec_space */,"},
{"lineNum":"  779","line":"              View<RT, RP...> const& original_view)"},
{"lineNum":"  780","line":"      : internal_view(original_view) {}"},
{"lineNum":"  781","line":""},
{"lineNum":"  782","line":"  template <typename... Dims>"},
{"lineNum":"  783","line":"  ScatterView(std::string const& name, Dims... dims)"},
{"lineNum":"  784","line":"      : internal_view(name, dims...) {}"},
{"lineNum":"  785","line":""},
{"lineNum":"  786","line":"  // This overload allows specifying an execution space instance to be"},
{"lineNum":"  787","line":"  // used by passing, e.g., Kokkos::view_alloc(exec_space, \"label\") as"},
{"lineNum":"  788","line":"  // first argument."},
{"lineNum":"  789","line":"  template <typename... P, typename... Dims>"},
{"lineNum":"  790","line":"  ScatterView(::Kokkos::Impl::ViewCtorProp<P...> const& arg_prop, Dims... dims)"},
{"lineNum":"  791","line":"      : internal_view(arg_prop, dims...) {"},
{"lineNum":"  792","line":"    using ::Kokkos::Impl::Experimental::"},
{"lineNum":"  793","line":"        check_scatter_view_allocation_properties_argument;"},
{"lineNum":"  794","line":"    check_scatter_view_allocation_properties_argument(arg_prop);"},
{"lineNum":"  795","line":"  }"},
{"lineNum":"  796","line":""},
{"lineNum":"  797","line":"  template <typename OtherDataType, typename OtherDeviceType>"},
{"lineNum":"  798","line":"  KOKKOS_FUNCTION ScatterView("},
{"lineNum":"  799","line":"      const ScatterView<OtherDataType, Layout, OtherDeviceType, Op,"},
{"lineNum":"  800","line":"                        ScatterNonDuplicated, Contribution>& other_view)"},
{"lineNum":"  801","line":"      : internal_view(other_view.internal_view) {}"},
{"lineNum":"  802","line":""},
{"lineNum":"  803","line":"  template <typename OtherDataType, typename OtherDeviceType>"},
{"lineNum":"  804","line":"  KOKKOS_FUNCTION void operator=("},
{"lineNum":"  805","line":"      const ScatterView<OtherDataType, Layout, OtherDeviceType, Op,"},
{"lineNum":"  806","line":"                        ScatterNonDuplicated, Contribution>& other_view) {"},
{"lineNum":"  807","line":"    internal_view = other_view.internal_view;"},
{"lineNum":"  808","line":"  }"},
{"lineNum":"  809","line":""},
{"lineNum":"  810","line":"  template <typename OverrideContribution = Contribution>"},
{"lineNum":"  811","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":"  812","line":"      ScatterAccess<DataType, Op, DeviceType, Layout, ScatterNonDuplicated,"},
{"lineNum":"  813","line":"                    Contribution, OverrideContribution>"},
{"lineNum":"  814","line":"      access() const {"},
{"lineNum":"  815","line":"    return ScatterAccess<DataType, Op, DeviceType, Layout, ScatterNonDuplicated,"},
{"lineNum":"  816","line":"                         Contribution, OverrideContribution>(*this);"},
{"lineNum":"  817","line":"  }"},
{"lineNum":"  818","line":""},
{"lineNum":"  819","line":"  original_view_type subview() const { return internal_view; }"},
{"lineNum":"  820","line":""},
{"lineNum":"  821","line":"  KOKKOS_INLINE_FUNCTION constexpr bool is_allocated() const {"},
{"lineNum":"  822","line":"    return internal_view.is_allocated();"},
{"lineNum":"  823","line":"  }"},
{"lineNum":"  824","line":""},
{"lineNum":"  825","line":"  template <typename DT, typename... RP>"},
{"lineNum":"  826","line":"  void contribute_into(View<DT, RP...> const& dest) const {"},
{"lineNum":"  827","line":"    contribute_into(execution_space(), dest);"},
{"lineNum":"  828","line":"  }"},
{"lineNum":"  829","line":""},
{"lineNum":"  830","line":"  template <typename DT, typename... RP>"},
{"lineNum":"  831","line":"  void contribute_into(execution_space const& exec_space,"},
{"lineNum":"  832","line":"                       View<DT, RP...> const& dest) const {"},
{"lineNum":"  833","line":"    using dest_type = View<DT, RP...>;"},
{"lineNum":"  834","line":"    static_assert(std::is_same<typename dest_type::array_layout, Layout>::value,"},
{"lineNum":"  835","line":"                  \"ScatterView contribute destination has different layout\");"},
{"lineNum":"  836","line":"    static_assert("},
{"lineNum":"  837","line":"        Kokkos::Impl::SpaceAccessibility<"},
{"lineNum":"  838","line":"            execution_space, typename dest_type::memory_space>::accessible,"},
{"lineNum":"  839","line":"        \"ScatterView contribute destination memory space not accessible\");"},
{"lineNum":"  840","line":"    if (dest.data() == internal_view.data()) return;"},
{"lineNum":"  841","line":"    Kokkos::Impl::Experimental::ReduceDuplicates<execution_space,"},
{"lineNum":"  842","line":"                                                 original_value_type, Op>("},
{"lineNum":"  843","line":"        exec_space, internal_view.data(), dest.data(), 0, 0, 1,"},
{"lineNum":"  844","line":"        internal_view.label());"},
{"lineNum":"  845","line":"  }"},
{"lineNum":"  846","line":""},
{"lineNum":"  847","line":"  void reset(execution_space const& exec_space = execution_space()) {"},
{"lineNum":"  848","line":"    Kokkos::Impl::Experimental::ResetDuplicates<execution_space,"},
{"lineNum":"  849","line":"                                                original_value_type, Op>("},
{"lineNum":"  850","line":"        exec_space, internal_view.data(), internal_view.size(),"},
{"lineNum":"  851","line":"        internal_view.label());"},
{"lineNum":"  852","line":"  }"},
{"lineNum":"  853","line":"  template <typename DT, typename... RP>"},
{"lineNum":"  854","line":"  void reset_except(View<DT, RP...> const& view) {"},
{"lineNum":"  855","line":"    reset_except(execution_space(), view);"},
{"lineNum":"  856","line":"  }"},
{"lineNum":"  857","line":""},
{"lineNum":"  858","line":"  template <typename DT, typename... RP>"},
{"lineNum":"  859","line":"  void reset_except(const execution_space& exec_space,"},
{"lineNum":"  860","line":"                    View<DT, RP...> const& view) {"},
{"lineNum":"  861","line":"    if (view.data() != internal_view.data()) reset(exec_space);"},
{"lineNum":"  862","line":"  }"},
{"lineNum":"  863","line":""},
{"lineNum":"  864","line":"  void resize(const size_t n0 = 0, const size_t n1 = 0, const size_t n2 = 0,"},
{"lineNum":"  865","line":"              const size_t n3 = 0, const size_t n4 = 0, const size_t n5 = 0,"},
{"lineNum":"  866","line":"              const size_t n6 = 0, const size_t n7 = 0) {"},
{"lineNum":"  867","line":"    ::Kokkos::resize(internal_view, n0, n1, n2, n3, n4, n5, n6, n7);"},
{"lineNum":"  868","line":"  }"},
{"lineNum":"  869","line":""},
{"lineNum":"  870","line":"  void realloc(const size_t n0 = 0, const size_t n1 = 0, const size_t n2 = 0,"},
{"lineNum":"  871","line":"               const size_t n3 = 0, const size_t n4 = 0, const size_t n5 = 0,"},
{"lineNum":"  872","line":"               const size_t n6 = 0, const size_t n7 = 0) {"},
{"lineNum":"  873","line":"    ::Kokkos::realloc(internal_view, n0, n1, n2, n3, n4, n5, n6, n7);"},
{"lineNum":"  874","line":"  }"},
{"lineNum":"  875","line":""},
{"lineNum":"  876","line":" protected:"},
{"lineNum":"  877","line":"  template <typename... Args>"},
{"lineNum":"  878","line":"  KOKKOS_FORCEINLINE_FUNCTION original_reference_type at(Args... args) const {"},
{"lineNum":"  879","line":"    return internal_view(args...);"},
{"lineNum":"  880","line":"  }"},
{"lineNum":"  881","line":""},
{"lineNum":"  882","line":" private:"},
{"lineNum":"  883","line":"  using internal_view_type = original_view_type;"},
{"lineNum":"  884","line":"  internal_view_type internal_view;"},
{"lineNum":"  885","line":"};"},
{"lineNum":"  886","line":""},
{"lineNum":"  887","line":"template <typename DataType, typename Op, typename DeviceType, typename Layout,"},
{"lineNum":"  888","line":"          typename Contribution, typename OverrideContribution>"},
{"lineNum":"  889","line":"class ScatterAccess<DataType, Op, DeviceType, Layout, ScatterNonDuplicated,"},
{"lineNum":"  890","line":"                    Contribution, OverrideContribution> {"},
{"lineNum":"  891","line":" public:"},
{"lineNum":"  892","line":"  using view_type           = ScatterView<DataType, Layout, DeviceType, Op,"},
{"lineNum":"  893","line":"                                ScatterNonDuplicated, Contribution>;"},
{"lineNum":"  894","line":"  using original_value_type = typename view_type::original_value_type;"},
{"lineNum":"  895","line":"  using value_type          = Kokkos::Impl::Experimental::ScatterValue<"},
{"lineNum":"  896","line":"      original_value_type, Op, DeviceType, OverrideContribution>;"},
{"lineNum":"  897","line":""},
{"lineNum":"  898","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  899","line":"  ScatterAccess() : view(view_type()) {}"},
{"lineNum":"  900","line":""},
{"lineNum":"  901","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  902","line":"  ScatterAccess(view_type const& view_in) : view(view_in) {}"},
{"lineNum":"  903","line":"  KOKKOS_DEFAULTED_FUNCTION"},
{"lineNum":"  904","line":"  ~ScatterAccess() = default;"},
{"lineNum":"  905","line":""},
{"lineNum":"  906","line":"  template <typename... Args>"},
{"lineNum":"  907","line":"  KOKKOS_FORCEINLINE_FUNCTION value_type operator()(Args... args) const {"},
{"lineNum":"  908","line":"    return view.at(args...);"},
{"lineNum":"  909","line":"  }"},
{"lineNum":"  910","line":""},
{"lineNum":"  911","line":"  template <typename Arg>"},
{"lineNum":"  912","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":"  913","line":"      typename std::enable_if<view_type::original_view_type::rank == 1 &&"},
{"lineNum":"  914","line":"                                  std::is_integral<Arg>::value,"},
{"lineNum":"  915","line":"                              value_type>::type"},
{"lineNum":"  916","line":"      operator[](Arg arg) const {"},
{"lineNum":"  917","line":"    return view.at(arg);"},
{"lineNum":"  918","line":"  }"},
{"lineNum":"  919","line":""},
{"lineNum":"  920","line":" private:"},
{"lineNum":"  921","line":"  view_type const& view;"},
{"lineNum":"  922","line":"};"},
{"lineNum":"  923","line":""},
{"lineNum":"  924","line":"// duplicated implementation"},
{"lineNum":"  925","line":"// LayoutLeft and LayoutRight are different enough that we\'ll just specialize"},
{"lineNum":"  926","line":"// each"},
{"lineNum":"  927","line":""},
{"lineNum":"  928","line":"template <typename DataType, typename Op, typename DeviceType,"},
{"lineNum":"  929","line":"          typename Contribution>"},
{"lineNum":"  930","line":"class ScatterView<DataType, Kokkos::LayoutRight, DeviceType, Op,"},
{"lineNum":"  931","line":"                  ScatterDuplicated, Contribution> {"},
{"lineNum":"  932","line":" public:"},
{"lineNum":"  933","line":"  using execution_space = typename DeviceType::execution_space;"},
{"lineNum":"  934","line":"  using memory_space    = typename DeviceType::memory_space;"},
{"lineNum":"  935","line":"  using device_type     = Kokkos::Device<execution_space, memory_space>;"},
{"lineNum":"  936","line":"  using original_view_type ="},
{"lineNum":"  937","line":"      Kokkos::View<DataType, Kokkos::LayoutRight, device_type>;"},
{"lineNum":"  938","line":"  using original_value_type     = typename original_view_type::value_type;"},
{"lineNum":"  939","line":"  using original_reference_type = typename original_view_type::reference_type;"},
{"lineNum":"  940","line":"  friend class ScatterAccess<DataType, Op, DeviceType, Kokkos::LayoutRight,"},
{"lineNum":"  941","line":"                             ScatterDuplicated, Contribution, ScatterNonAtomic>;"},
{"lineNum":"  942","line":"  friend class ScatterAccess<DataType, Op, DeviceType, Kokkos::LayoutRight,"},
{"lineNum":"  943","line":"                             ScatterDuplicated, Contribution, ScatterAtomic>;"},
{"lineNum":"  944","line":"  template <class, class, class, class, class, class>"},
{"lineNum":"  945","line":"  friend class ScatterView;"},
{"lineNum":"  946","line":""},
{"lineNum":"  947","line":"  using data_type_info ="},
{"lineNum":"  948","line":"      typename Kokkos::Impl::Experimental::DuplicatedDataType<"},
{"lineNum":"  949","line":"          DataType, Kokkos::LayoutRight>;"},
{"lineNum":"  950","line":"  using internal_data_type = typename data_type_info::value_type;"},
{"lineNum":"  951","line":"  using internal_view_type ="},
{"lineNum":"  952","line":"      Kokkos::View<internal_data_type, Kokkos::LayoutRight, device_type>;"},
{"lineNum":"  953","line":""},
{"lineNum":"  954","line":"  ScatterView() = default;"},
{"lineNum":"  955","line":""},
{"lineNum":"  956","line":"  template <typename OtherDataType, typename OtherDeviceType>"},
{"lineNum":"  957","line":"  KOKKOS_FUNCTION ScatterView("},
{"lineNum":"  958","line":"      const ScatterView<OtherDataType, Kokkos::LayoutRight, OtherDeviceType, Op,"},
{"lineNum":"  959","line":"                        ScatterDuplicated, Contribution>& other_view)"},
{"lineNum":"  960","line":"      : unique_token(other_view.unique_token),"},
{"lineNum":"  961","line":"        internal_view(other_view.internal_view) {}"},
{"lineNum":"  962","line":""},
{"lineNum":"  963","line":"  template <typename OtherDataType, typename OtherDeviceType>"},
{"lineNum":"  964","line":"  KOKKOS_FUNCTION void operator=("},
{"lineNum":"  965","line":"      const ScatterView<OtherDataType, Kokkos::LayoutRight, OtherDeviceType, Op,"},
{"lineNum":"  966","line":"                        ScatterDuplicated, Contribution>& other_view) {"},
{"lineNum":"  967","line":"    unique_token  = other_view.unique_token;"},
{"lineNum":"  968","line":"    internal_view = other_view.internal_view;"},
{"lineNum":"  969","line":"  }"},
{"lineNum":"  970","line":""},
{"lineNum":"  971","line":"  template <typename RT, typename... RP>"},
{"lineNum":"  972","line":"  ScatterView(View<RT, RP...> const& original_view)"},
{"lineNum":"  973","line":"      : ScatterView(execution_space(), original_view) {}"},
{"lineNum":"  974","line":""},
{"lineNum":"  975","line":"  template <typename RT, typename... P, typename... RP>"},
{"lineNum":"  976","line":"  ScatterView(execution_space const& exec_space,"},
{"lineNum":"  977","line":"              View<RT, RP...> const& original_view)"},
{"lineNum":"  978","line":"      : unique_token(),"},
{"lineNum":"  979","line":"        internal_view("},
{"lineNum":"  980","line":"            view_alloc(WithoutInitializing,"},
{"lineNum":"  981","line":"                       std::string(\"duplicated_\") + original_view.label(),"},
{"lineNum":"  982","line":"                       exec_space),"},
{"lineNum":"  983","line":"            unique_token.size(),"},
{"lineNum":"  984","line":"            original_view.rank_dynamic > 0 ? original_view.extent(0)"},
{"lineNum":"  985","line":"                                           : KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":"  986","line":"            original_view.rank_dynamic > 1 ? original_view.extent(1)"},
{"lineNum":"  987","line":"                                           : KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":"  988","line":"            original_view.rank_dynamic > 2 ? original_view.extent(2)"},
{"lineNum":"  989","line":"                                           : KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":"  990","line":"            original_view.rank_dynamic > 3 ? original_view.extent(3)"},
{"lineNum":"  991","line":"                                           : KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":"  992","line":"            original_view.rank_dynamic > 4 ? original_view.extent(4)"},
{"lineNum":"  993","line":"                                           : KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":"  994","line":"            original_view.rank_dynamic > 5 ? original_view.extent(5)"},
{"lineNum":"  995","line":"                                           : KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":"  996","line":"            original_view.rank_dynamic > 6 ? original_view.extent(6)"},
{"lineNum":"  997","line":"                                           : KOKKOS_IMPL_CTOR_DEFAULT_ARG)"},
{"lineNum":"  998","line":""},
{"lineNum":"  999","line":"  {"},
{"lineNum":" 1000","line":"    reset(exec_space);"},
{"lineNum":" 1001","line":"  }"},
{"lineNum":" 1002","line":""},
{"lineNum":" 1003","line":"  template <typename... Dims>"},
{"lineNum":" 1004","line":"  ScatterView(std::string const& name, Dims... dims)"},
{"lineNum":" 1005","line":"      : ScatterView(view_alloc(execution_space(), name), dims...) {}"},
{"lineNum":" 1006","line":""},
{"lineNum":" 1007","line":"  // This overload allows specifying an execution space instance to be"},
{"lineNum":" 1008","line":"  // used by passing, e.g., Kokkos::view_alloc(exec_space, \"label\") as"},
{"lineNum":" 1009","line":"  // first argument."},
{"lineNum":" 1010","line":"  template <typename... P, typename... Dims>"},
{"lineNum":" 1011","line":"  ScatterView(::Kokkos::Impl::ViewCtorProp<P...> const& arg_prop, Dims... dims)"},
{"lineNum":" 1012","line":"      : internal_view(view_alloc(WithoutInitializing,"},
{"lineNum":" 1013","line":"                                 static_cast<::Kokkos::Impl::ViewCtorProp<"},
{"lineNum":" 1014","line":"                                     void, std::string> const&>(arg_prop)"},
{"lineNum":" 1015","line":"                                     .value),"},
{"lineNum":" 1016","line":"                      unique_token.size(), dims...) {"},
{"lineNum":" 1017","line":"    using ::Kokkos::Impl::Experimental::"},
{"lineNum":" 1018","line":"        check_scatter_view_allocation_properties_argument;"},
{"lineNum":" 1019","line":"    check_scatter_view_allocation_properties_argument(arg_prop);"},
{"lineNum":" 1020","line":""},
{"lineNum":" 1021","line":"    auto const exec_space ="},
{"lineNum":" 1022","line":"        static_cast<::Kokkos::Impl::ViewCtorProp<void, execution_space> const&>("},
{"lineNum":" 1023","line":"            arg_prop)"},
{"lineNum":" 1024","line":"            .value;"},
{"lineNum":" 1025","line":"    reset(exec_space);"},
{"lineNum":" 1026","line":"  }"},
{"lineNum":" 1027","line":""},
{"lineNum":" 1028","line":"  template <typename OverrideContribution = Contribution>"},
{"lineNum":" 1029","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":" 1030","line":"      ScatterAccess<DataType, Op, DeviceType, Kokkos::LayoutRight,"},
{"lineNum":" 1031","line":"                    ScatterDuplicated, Contribution, OverrideContribution>"},
{"lineNum":" 1032","line":"      access() const {"},
{"lineNum":" 1033","line":"    return ScatterAccess<DataType, Op, DeviceType, Kokkos::LayoutRight,"},
{"lineNum":" 1034","line":"                         ScatterDuplicated, Contribution, OverrideContribution>("},
{"lineNum":" 1035","line":"        *this);"},
{"lineNum":" 1036","line":"  }"},
{"lineNum":" 1037","line":""},
{"lineNum":" 1038","line":"  typename Kokkos::Impl::Experimental::Slice<Kokkos::LayoutRight,"},
{"lineNum":" 1039","line":"                                             internal_view_type::rank,"},
{"lineNum":" 1040","line":"                                             internal_view_type>::value_type"},
{"lineNum":" 1041","line":"  subview() const {"},
{"lineNum":" 1042","line":"    return Kokkos::Impl::Experimental::Slice<"},
{"lineNum":" 1043","line":"        Kokkos::LayoutRight, internal_view_type::Rank,"},
{"lineNum":" 1044","line":"        internal_view_type>::get(internal_view, 0);"},
{"lineNum":" 1045","line":"  }"},
{"lineNum":" 1046","line":""},
{"lineNum":" 1047","line":"  KOKKOS_INLINE_FUNCTION constexpr bool is_allocated() const {"},
{"lineNum":" 1048","line":"    return internal_view.is_allocated();"},
{"lineNum":" 1049","line":"  }"},
{"lineNum":" 1050","line":""},
{"lineNum":" 1051","line":"  template <typename DT, typename... RP>"},
{"lineNum":" 1052","line":"  void contribute_into(View<DT, RP...> const& dest) const {"},
{"lineNum":" 1053","line":"    contribute_into(execution_space(), dest);"},
{"lineNum":" 1054","line":"  }"},
{"lineNum":" 1055","line":""},
{"lineNum":" 1056","line":"  template <typename DT, typename... RP>"},
{"lineNum":" 1057","line":"  void contribute_into(execution_space const& exec_space,"},
{"lineNum":" 1058","line":"                       View<DT, RP...> const& dest) const {"},
{"lineNum":" 1059","line":"    using dest_type = View<DT, RP...>;"},
{"lineNum":" 1060","line":"    static_assert(std::is_same<typename dest_type::array_layout,"},
{"lineNum":" 1061","line":"                               Kokkos::LayoutRight>::value,"},
{"lineNum":" 1062","line":"                  \"ScatterView deep_copy destination has different layout\");"},
{"lineNum":" 1063","line":"    static_assert("},
{"lineNum":" 1064","line":"        Kokkos::Impl::SpaceAccessibility<"},
{"lineNum":" 1065","line":"            execution_space, typename dest_type::memory_space>::accessible,"},
{"lineNum":" 1066","line":"        \"ScatterView deep_copy destination memory space not accessible\");"},
{"lineNum":" 1067","line":"    bool is_equal = (dest.data() == internal_view.data());"},
{"lineNum":" 1068","line":"    size_t start  = is_equal ? 1 : 0;"},
{"lineNum":" 1069","line":"    Kokkos::Impl::Experimental::ReduceDuplicates<execution_space,"},
{"lineNum":" 1070","line":"                                                 original_value_type, Op>("},
{"lineNum":" 1071","line":"        exec_space, internal_view.data(), dest.data(), internal_view.stride(0),"},
{"lineNum":" 1072","line":"        start, internal_view.extent(0), internal_view.label());"},
{"lineNum":" 1073","line":"  }"},
{"lineNum":" 1074","line":""},
{"lineNum":" 1075","line":"  void reset(execution_space const& exec_space = execution_space()) {"},
{"lineNum":" 1076","line":"    Kokkos::Impl::Experimental::ResetDuplicates<execution_space,"},
{"lineNum":" 1077","line":"                                                original_value_type, Op>("},
{"lineNum":" 1078","line":"        exec_space, internal_view.data(), internal_view.size(),"},
{"lineNum":" 1079","line":"        internal_view.label());"},
{"lineNum":" 1080","line":"  }"},
{"lineNum":" 1081","line":""},
{"lineNum":" 1082","line":"  template <typename DT, typename... RP>"},
{"lineNum":" 1083","line":"  void reset_except(View<DT, RP...> const& view) {"},
{"lineNum":" 1084","line":"    reset_except(execution_space(), view);"},
{"lineNum":" 1085","line":"  }"},
{"lineNum":" 1086","line":""},
{"lineNum":" 1087","line":"  template <typename DT, typename... RP>"},
{"lineNum":" 1088","line":"  void reset_except(execution_space const& exec_space,"},
{"lineNum":" 1089","line":"                    View<DT, RP...> const& view) {"},
{"lineNum":" 1090","line":"    if (view.data() != internal_view.data()) {"},
{"lineNum":" 1091","line":"      reset(exec_space);"},
{"lineNum":" 1092","line":"      return;"},
{"lineNum":" 1093","line":"    }"},
{"lineNum":" 1094","line":"    Kokkos::Impl::Experimental::ResetDuplicates<execution_space,"},
{"lineNum":" 1095","line":"                                                original_value_type, Op>("},
{"lineNum":" 1096","line":"        exec_space, internal_view.data() + view.size(),"},
{"lineNum":" 1097","line":"        internal_view.size() - view.size(), internal_view.label());"},
{"lineNum":" 1098","line":"  }"},
{"lineNum":" 1099","line":""},
{"lineNum":" 1100","line":"  void resize(const size_t n0 = 0, const size_t n1 = 0, const size_t n2 = 0,"},
{"lineNum":" 1101","line":"              const size_t n3 = 0, const size_t n4 = 0, const size_t n5 = 0,"},
{"lineNum":" 1102","line":"              const size_t n6 = 0) {"},
{"lineNum":" 1103","line":"    ::Kokkos::resize(internal_view, unique_token.size(), n0, n1, n2, n3, n4, n5,"},
{"lineNum":" 1104","line":"                     n6);"},
{"lineNum":" 1105","line":"  }"},
{"lineNum":" 1106","line":""},
{"lineNum":" 1107","line":"  void realloc(const size_t n0 = 0, const size_t n1 = 0, const size_t n2 = 0,"},
{"lineNum":" 1108","line":"               const size_t n3 = 0, const size_t n4 = 0, const size_t n5 = 0,"},
{"lineNum":" 1109","line":"               const size_t n6 = 0) {"},
{"lineNum":" 1110","line":"    ::Kokkos::realloc(internal_view, unique_token.size(), n0, n1, n2, n3, n4,"},
{"lineNum":" 1111","line":"                      n5, n6);"},
{"lineNum":" 1112","line":"  }"},
{"lineNum":" 1113","line":""},
{"lineNum":" 1114","line":" protected:"},
{"lineNum":" 1115","line":"  template <typename... Args>"},
{"lineNum":" 1116","line":"  KOKKOS_FORCEINLINE_FUNCTION original_reference_type at(int rank,"},
{"lineNum":" 1117","line":"                                                         Args... args) const {"},
{"lineNum":" 1118","line":"    return internal_view(rank, args...);"},
{"lineNum":" 1119","line":"  }"},
{"lineNum":" 1120","line":""},
{"lineNum":" 1121","line":" protected:"},
{"lineNum":" 1122","line":"  using unique_token_type = Kokkos::Experimental::UniqueToken<"},
{"lineNum":" 1123","line":"      execution_space, Kokkos::Experimental::UniqueTokenScope::Global>;"},
{"lineNum":" 1124","line":""},
{"lineNum":" 1125","line":"  unique_token_type unique_token;"},
{"lineNum":" 1126","line":"  internal_view_type internal_view;"},
{"lineNum":" 1127","line":"};"},
{"lineNum":" 1128","line":""},
{"lineNum":" 1129","line":"template <typename DataType, typename Op, typename DeviceType,"},
{"lineNum":" 1130","line":"          typename Contribution>"},
{"lineNum":" 1131","line":"class ScatterView<DataType, Kokkos::LayoutLeft, DeviceType, Op,"},
{"lineNum":" 1132","line":"                  ScatterDuplicated, Contribution> {"},
{"lineNum":" 1133","line":" public:"},
{"lineNum":" 1134","line":"  using execution_space = typename DeviceType::execution_space;"},
{"lineNum":" 1135","line":"  using memory_space    = typename DeviceType::memory_space;"},
{"lineNum":" 1136","line":"  using device_type     = Kokkos::Device<execution_space, memory_space>;"},
{"lineNum":" 1137","line":"  using original_view_type ="},
{"lineNum":" 1138","line":"      Kokkos::View<DataType, Kokkos::LayoutLeft, device_type>;"},
{"lineNum":" 1139","line":"  using original_value_type     = typename original_view_type::value_type;"},
{"lineNum":" 1140","line":"  using original_reference_type = typename original_view_type::reference_type;"},
{"lineNum":" 1141","line":"  friend class ScatterAccess<DataType, Op, DeviceType, Kokkos::LayoutLeft,"},
{"lineNum":" 1142","line":"                             ScatterDuplicated, Contribution, ScatterNonAtomic>;"},
{"lineNum":" 1143","line":"  friend class ScatterAccess<DataType, Op, DeviceType, Kokkos::LayoutLeft,"},
{"lineNum":" 1144","line":"                             ScatterDuplicated, Contribution, ScatterAtomic>;"},
{"lineNum":" 1145","line":"  template <class, class, class, class, class, class>"},
{"lineNum":" 1146","line":"  friend class ScatterView;"},
{"lineNum":" 1147","line":""},
{"lineNum":" 1148","line":"  using data_type_info ="},
{"lineNum":" 1149","line":"      typename Kokkos::Impl::Experimental::DuplicatedDataType<"},
{"lineNum":" 1150","line":"          DataType, Kokkos::LayoutLeft>;"},
{"lineNum":" 1151","line":"  using internal_data_type = typename data_type_info::value_type;"},
{"lineNum":" 1152","line":"  using internal_view_type ="},
{"lineNum":" 1153","line":"      Kokkos::View<internal_data_type, Kokkos::LayoutLeft, device_type>;"},
{"lineNum":" 1154","line":""},
{"lineNum":" 1155","line":"  ScatterView() = default;"},
{"lineNum":" 1156","line":""},
{"lineNum":" 1157","line":"  template <typename RT, typename... RP>"},
{"lineNum":" 1158","line":"  ScatterView(View<RT, RP...> const& original_view)"},
{"lineNum":" 1159","line":"      : ScatterView(execution_space(), original_view) {}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1160","line":""},
{"lineNum":" 1161","line":"  template <typename RT, typename... P, typename... RP>"},
{"lineNum":" 1162","line":"  ScatterView(execution_space const& exec_space,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1163","line":"              View<RT, RP...> const& original_view)"},
{"lineNum":" 1164","line":"      : unique_token() {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1165","line":"    size_t arg_N[8] = {original_view.rank > 0 ? original_view.extent(0)"},
{"lineNum":" 1166","line":"                                              : KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1167","line":"                       original_view.rank > 1 ? original_view.extent(1)"},
{"lineNum":" 1168","line":"                                              : KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1169","line":"                       original_view.rank > 2 ? original_view.extent(2)"},
{"lineNum":" 1170","line":"                                              : KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1171","line":"                       original_view.rank > 3 ? original_view.extent(3)"},
{"lineNum":" 1172","line":"                                              : KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1173","line":"                       original_view.rank > 4 ? original_view.extent(4)"},
{"lineNum":" 1174","line":"                                              : KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1175","line":"                       original_view.rank > 5 ? original_view.extent(5)"},
{"lineNum":" 1176","line":"                                              : KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1177","line":"                       original_view.rank > 6 ? original_view.extent(6)"},
{"lineNum":" 1178","line":"                                              : KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1179","line":"                       KOKKOS_IMPL_CTOR_DEFAULT_ARG};"},
{"lineNum":" 1180","line":"    arg_N[internal_view_type::rank - 1] = unique_token.size();"},
{"lineNum":" 1181","line":"    internal_view                       = internal_view_type("},
{"lineNum":" 1182","line":"        view_alloc(WithoutInitializing,"},
{"lineNum":" 1183","line":"                   std::string(\"duplicated_\") + original_view.label(),"},
{"lineNum":" 1184","line":"                   exec_space),"},
{"lineNum":" 1185","line":"        arg_N[0], arg_N[1], arg_N[2], arg_N[3], arg_N[4], arg_N[5], arg_N[6],"},
{"lineNum":" 1186","line":"        arg_N[7]);"},
{"lineNum":" 1187","line":"    reset(exec_space);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1188","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1189","line":""},
{"lineNum":" 1190","line":"  template <typename... Dims>"},
{"lineNum":" 1191","line":"  ScatterView(std::string const& name, Dims... dims)"},
{"lineNum":" 1192","line":"      : ScatterView(view_alloc(execution_space(), name), dims...) {}"},
{"lineNum":" 1193","line":""},
{"lineNum":" 1194","line":"  // This overload allows specifying an execution space instance to be"},
{"lineNum":" 1195","line":"  // used by passing, e.g., Kokkos::view_alloc(exec_space, \"label\") as"},
{"lineNum":" 1196","line":"  // first argument."},
{"lineNum":" 1197","line":"  template <typename... P, typename... Dims>"},
{"lineNum":" 1198","line":"  ScatterView(::Kokkos::Impl::ViewCtorProp<P...> const& arg_prop,"},
{"lineNum":" 1199","line":"              Dims... dims) {"},
{"lineNum":" 1200","line":"    using ::Kokkos::Impl::Experimental::"},
{"lineNum":" 1201","line":"        check_scatter_view_allocation_properties_argument;"},
{"lineNum":" 1202","line":"    check_scatter_view_allocation_properties_argument(arg_prop);"},
{"lineNum":" 1203","line":""},
{"lineNum":" 1204","line":"    original_view_type original_view;"},
{"lineNum":" 1205","line":"    size_t arg_N[8] = {original_view.rank > 0 ? original_view.static_extent(0)"},
{"lineNum":" 1206","line":"                                              : KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1207","line":"                       original_view.rank > 1 ? original_view.static_extent(1)"},
{"lineNum":" 1208","line":"                                              : KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1209","line":"                       original_view.rank > 2 ? original_view.static_extent(2)"},
{"lineNum":" 1210","line":"                                              : KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1211","line":"                       original_view.rank > 3 ? original_view.static_extent(3)"},
{"lineNum":" 1212","line":"                                              : KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1213","line":"                       original_view.rank > 4 ? original_view.static_extent(4)"},
{"lineNum":" 1214","line":"                                              : KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1215","line":"                       original_view.rank > 5 ? original_view.static_extent(5)"},
{"lineNum":" 1216","line":"                                              : KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1217","line":"                       original_view.rank > 6 ? original_view.static_extent(6)"},
{"lineNum":" 1218","line":"                                              : KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1219","line":"                       KOKKOS_IMPL_CTOR_DEFAULT_ARG};"},
{"lineNum":" 1220","line":"    Kokkos::Impl::Experimental::args_to_array(arg_N, 0, dims...);"},
{"lineNum":" 1221","line":"    arg_N[internal_view_type::rank - 1] = unique_token.size();"},
{"lineNum":" 1222","line":""},
{"lineNum":" 1223","line":"    auto const name ="},
{"lineNum":" 1224","line":"        static_cast<::Kokkos::Impl::ViewCtorProp<void, std::string> const&>("},
{"lineNum":" 1225","line":"            arg_prop)"},
{"lineNum":" 1226","line":"            .value;"},
{"lineNum":" 1227","line":"    internal_view = internal_view_type(view_alloc(WithoutInitializing, name),"},
{"lineNum":" 1228","line":"                                       arg_N[0], arg_N[1], arg_N[2], arg_N[3],"},
{"lineNum":" 1229","line":"                                       arg_N[4], arg_N[5], arg_N[6], arg_N[7]);"},
{"lineNum":" 1230","line":""},
{"lineNum":" 1231","line":"    auto const exec_space ="},
{"lineNum":" 1232","line":"        static_cast<::Kokkos::Impl::ViewCtorProp<void, execution_space> const&>("},
{"lineNum":" 1233","line":"            arg_prop)"},
{"lineNum":" 1234","line":"            .value;"},
{"lineNum":" 1235","line":"    reset(exec_space);"},
{"lineNum":" 1236","line":"  }"},
{"lineNum":" 1237","line":""},
{"lineNum":" 1238","line":"  template <typename OtherDataType, typename OtherDeviceType>"},
{"lineNum":" 1239","line":"  KOKKOS_FUNCTION ScatterView("},
{"lineNum":" 1240","line":"      const ScatterView<OtherDataType, Kokkos::LayoutLeft, OtherDeviceType, Op,"},
{"lineNum":" 1241","line":"                        ScatterDuplicated, Contribution>& other_view)"},
{"lineNum":" 1242","line":"      : unique_token(other_view.unique_token),"},
{"lineNum":" 1243","line":"        internal_view(other_view.internal_view) {}"},
{"lineNum":" 1244","line":""},
{"lineNum":" 1245","line":"  template <typename OtherDataType, typename OtherDeviceType>"},
{"lineNum":" 1246","line":"  KOKKOS_FUNCTION void operator=("},
{"lineNum":" 1247","line":"      const ScatterView<OtherDataType, Kokkos::LayoutLeft, OtherDeviceType, Op,"},
{"lineNum":" 1248","line":"                        ScatterDuplicated, Contribution>& other_view) {"},
{"lineNum":" 1249","line":"    unique_token  = other_view.unique_token;"},
{"lineNum":" 1250","line":"    internal_view = other_view.internal_view;"},
{"lineNum":" 1251","line":"  }"},
{"lineNum":" 1252","line":""},
{"lineNum":" 1253","line":"  template <typename OverrideContribution = Contribution>"},
{"lineNum":" 1254","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":" 1255","line":"      ScatterAccess<DataType, Op, DeviceType, Kokkos::LayoutLeft,"},
{"lineNum":" 1256","line":"                    ScatterDuplicated, Contribution, OverrideContribution>"},
{"lineNum":" 1257","line":"      access() const {"},
{"lineNum":" 1258","line":"    return ScatterAccess<DataType, Op, DeviceType, Kokkos::LayoutLeft,"},
{"lineNum":" 1259","line":"                         ScatterDuplicated, Contribution, OverrideContribution>("},
{"lineNum":" 1260","line":"        *this);"},
{"lineNum":" 1261","line":"  }"},
{"lineNum":" 1262","line":""},
{"lineNum":" 1263","line":"  typename Kokkos::Impl::Experimental::Slice<Kokkos::LayoutLeft,"},
{"lineNum":" 1264","line":"                                             internal_view_type::rank,"},
{"lineNum":" 1265","line":"                                             internal_view_type>::value_type"},
{"lineNum":" 1266","line":"  subview() const {"},
{"lineNum":" 1267","line":"    return Kokkos::Impl::Experimental::Slice<"},
{"lineNum":" 1268","line":"        Kokkos::LayoutLeft, internal_view_type::rank,"},
{"lineNum":" 1269","line":"        internal_view_type>::get(internal_view, 0);"},
{"lineNum":" 1270","line":"  }"},
{"lineNum":" 1271","line":""},
{"lineNum":" 1272","line":"  KOKKOS_INLINE_FUNCTION constexpr bool is_allocated() const {"},
{"lineNum":" 1273","line":"    return internal_view.is_allocated();"},
{"lineNum":" 1274","line":"  }"},
{"lineNum":" 1275","line":""},
{"lineNum":" 1276","line":"  template <typename... RP>"},
{"lineNum":" 1277","line":"  void contribute_into(View<RP...> const& dest) const {"},
{"lineNum":" 1278","line":"    contribute_into(execution_space(), dest);"},
{"lineNum":" 1279","line":"  }"},
{"lineNum":" 1280","line":""},
{"lineNum":" 1281","line":"  template <typename... RP>"},
{"lineNum":" 1282","line":"  void contribute_into(execution_space const& exec_space,"},
{"lineNum":" 1283","line":"                       View<RP...> const& dest) const {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1284","line":"    using dest_type = View<RP...>;"},
{"lineNum":" 1285","line":"    static_assert("},
{"lineNum":" 1286","line":"        std::is_same<typename dest_type::value_type,"},
{"lineNum":" 1287","line":"                     typename original_view_type::non_const_value_type>::value,"},
{"lineNum":" 1288","line":"        \"ScatterView deep_copy destination has wrong value_type\");"},
{"lineNum":" 1289","line":"    static_assert(std::is_same<typename dest_type::array_layout,"},
{"lineNum":" 1290","line":"                               Kokkos::LayoutLeft>::value,"},
{"lineNum":" 1291","line":"                  \"ScatterView deep_copy destination has different layout\");"},
{"lineNum":" 1292","line":"    static_assert("},
{"lineNum":" 1293","line":"        Kokkos::Impl::SpaceAccessibility<"},
{"lineNum":" 1294","line":"            execution_space, typename dest_type::memory_space>::accessible,"},
{"lineNum":" 1295","line":"        \"ScatterView deep_copy destination memory space not accessible\");"},
{"lineNum":" 1296","line":"    auto extent   = internal_view.extent(internal_view_type::rank - 1);"},
{"lineNum":" 1297","line":"    bool is_equal = (dest.data() == internal_view.data());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1298","line":"    size_t start  = is_equal ? 1 : 0;"},
{"lineNum":" 1299","line":"    Kokkos::Impl::Experimental::ReduceDuplicates<execution_space,"},
{"lineNum":" 1300","line":"                                                 original_value_type, Op>("},
{"lineNum":" 1301","line":"        exec_space, internal_view.data(), dest.data(),"},
{"lineNum":" 1302","line":"        internal_view.stride(internal_view_type::rank - 1), start, extent,"},
{"lineNum":" 1303","line":"        internal_view.label());"},
{"lineNum":" 1304","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1305","line":""},
{"lineNum":" 1306","line":"  void reset(execution_space const& exec_space = execution_space()) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1307","line":"    Kokkos::Impl::Experimental::ResetDuplicates<execution_space,"},
{"lineNum":" 1308","line":"                                                original_value_type, Op>("},
{"lineNum":" 1309","line":"        exec_space, internal_view.data(), internal_view.size(),"},
{"lineNum":" 1310","line":"        internal_view.label());"},
{"lineNum":" 1311","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1312","line":""},
{"lineNum":" 1313","line":"  template <typename DT, typename... RP>"},
{"lineNum":" 1314","line":"  void reset_except(View<DT, RP...> const& view) {"},
{"lineNum":" 1315","line":"    reset_except(execution_space(), view);"},
{"lineNum":" 1316","line":"  }"},
{"lineNum":" 1317","line":""},
{"lineNum":" 1318","line":"  template <typename DT, typename... RP>"},
{"lineNum":" 1319","line":"  void reset_except(execution_space const& exec_space,"},
{"lineNum":" 1320","line":"                    View<DT, RP...> const& view) {"},
{"lineNum":" 1321","line":"    if (view.data() != internal_view.data()) {"},
{"lineNum":" 1322","line":"      reset(exec_space);"},
{"lineNum":" 1323","line":"      return;"},
{"lineNum":" 1324","line":"    }"},
{"lineNum":" 1325","line":"    Kokkos::Impl::Experimental::ResetDuplicates<execution_space,"},
{"lineNum":" 1326","line":"                                                original_value_type, Op>("},
{"lineNum":" 1327","line":"        exec_space, internal_view.data() + view.size(),"},
{"lineNum":" 1328","line":"        internal_view.size() - view.size(), internal_view.label());"},
{"lineNum":" 1329","line":"  }"},
{"lineNum":" 1330","line":""},
{"lineNum":" 1331","line":"  void resize(const size_t n0 = 0, const size_t n1 = 0, const size_t n2 = 0,"},
{"lineNum":" 1332","line":"              const size_t n3 = 0, const size_t n4 = 0, const size_t n5 = 0,"},
{"lineNum":" 1333","line":"              const size_t n6 = 0) {"},
{"lineNum":" 1334","line":"    size_t arg_N[8] = {n0, n1, n2, n3, n4, n5, n6, 0};"},
{"lineNum":" 1335","line":"    const int i     = internal_view.rank - 1;"},
{"lineNum":" 1336","line":"    arg_N[i]        = unique_token.size();"},
{"lineNum":" 1337","line":""},
{"lineNum":" 1338","line":"    ::Kokkos::resize(internal_view, arg_N[0], arg_N[1], arg_N[2], arg_N[3],"},
{"lineNum":" 1339","line":"                     arg_N[4], arg_N[5], arg_N[6], arg_N[7]);"},
{"lineNum":" 1340","line":"  }"},
{"lineNum":" 1341","line":""},
{"lineNum":" 1342","line":"  void realloc(const size_t n0 = 0, const size_t n1 = 0, const size_t n2 = 0,"},
{"lineNum":" 1343","line":"               const size_t n3 = 0, const size_t n4 = 0, const size_t n5 = 0,"},
{"lineNum":" 1344","line":"               const size_t n6 = 0) {"},
{"lineNum":" 1345","line":"    size_t arg_N[8] = {n0, n1, n2, n3, n4, n5, n6, 0};"},
{"lineNum":" 1346","line":"    const int i     = internal_view.rank - 1;"},
{"lineNum":" 1347","line":"    arg_N[i]        = unique_token.size();"},
{"lineNum":" 1348","line":""},
{"lineNum":" 1349","line":"    ::Kokkos::realloc(internal_view, arg_N[0], arg_N[1], arg_N[2], arg_N[3],"},
{"lineNum":" 1350","line":"                      arg_N[4], arg_N[5], arg_N[6], arg_N[7]);"},
{"lineNum":" 1351","line":"  }"},
{"lineNum":" 1352","line":""},
{"lineNum":" 1353","line":" protected:"},
{"lineNum":" 1354","line":"  template <typename... Args>"},
{"lineNum":" 1355","line":"  KOKKOS_FORCEINLINE_FUNCTION original_reference_type at(int thread_id,"},
{"lineNum":" 1356","line":"                                                         Args... args) const {"},
{"lineNum":" 1357","line":"    return internal_view(args..., thread_id);"},
{"lineNum":" 1358","line":"  }"},
{"lineNum":" 1359","line":""},
{"lineNum":" 1360","line":" protected:"},
{"lineNum":" 1361","line":"  using unique_token_type = Kokkos::Experimental::UniqueToken<"},
{"lineNum":" 1362","line":"      execution_space, Kokkos::Experimental::UniqueTokenScope::Global>;"},
{"lineNum":" 1363","line":""},
{"lineNum":" 1364","line":"  unique_token_type unique_token;"},
{"lineNum":" 1365","line":"  internal_view_type internal_view;"},
{"lineNum":" 1366","line":"};"},
{"lineNum":" 1367","line":""},
{"lineNum":" 1368","line":"/* This object has to be separate in order to store the thread ID, which cannot"},
{"lineNum":" 1369","line":"   be obtained until one is inside a parallel construct, and may be relatively"},
{"lineNum":" 1370","line":"   expensive to obtain at every contribution"},
{"lineNum":" 1371","line":"   (calls a non-inlined function, looks up a thread-local variable)."},
{"lineNum":" 1372","line":"   Due to the expense, it is sensible to query it at most once per parallel"},
{"lineNum":" 1373","line":"   iterate (ideally once per thread, but parallel_for doesn\'t expose that) and"},
{"lineNum":" 1374","line":"   then store it in a stack variable."},
{"lineNum":" 1375","line":"   ScatterAccess serves as a non-const object on the stack which can store the"},
{"lineNum":" 1376","line":"   thread ID */"},
{"lineNum":" 1377","line":""},
{"lineNum":" 1378","line":"template <typename DataType, typename Op, typename DeviceType, typename Layout,"},
{"lineNum":" 1379","line":"          typename Contribution, typename OverrideContribution>"},
{"lineNum":" 1380","line":"class ScatterAccess<DataType, Op, DeviceType, Layout, ScatterDuplicated,"},
{"lineNum":" 1381","line":"                    Contribution, OverrideContribution> {"},
{"lineNum":" 1382","line":" public:"},
{"lineNum":" 1383","line":"  using view_type           = ScatterView<DataType, Layout, DeviceType, Op,"},
{"lineNum":" 1384","line":"                                ScatterDuplicated, Contribution>;"},
{"lineNum":" 1385","line":"  using original_value_type = typename view_type::original_value_type;"},
{"lineNum":" 1386","line":"  using value_type          = Kokkos::Impl::Experimental::ScatterValue<"},
{"lineNum":" 1387","line":"      original_value_type, Op, DeviceType, OverrideContribution>;"},
{"lineNum":" 1388","line":""},
{"lineNum":" 1389","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":" 1390","line":"  ScatterAccess(view_type const& view_in)"},
{"lineNum":" 1391","line":"      : view(view_in), thread_id(view_in.unique_token.acquire()) {}"},
{"lineNum":" 1392","line":""},
{"lineNum":" 1393","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":" 1394","line":"  ~ScatterAccess() {"},
{"lineNum":" 1395","line":"    if (thread_id != ~thread_id_type(0)) view.unique_token.release(thread_id);"},
{"lineNum":" 1396","line":"  }"},
{"lineNum":" 1397","line":""},
{"lineNum":" 1398","line":"  template <typename... Args>"},
{"lineNum":" 1399","line":"  KOKKOS_FORCEINLINE_FUNCTION value_type operator()(Args... args) const {"},
{"lineNum":" 1400","line":"    return view.at(thread_id, args...);"},
{"lineNum":" 1401","line":"  }"},
{"lineNum":" 1402","line":""},
{"lineNum":" 1403","line":"  template <typename Arg>"},
{"lineNum":" 1404","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":" 1405","line":"      typename std::enable_if<view_type::original_view_type::rank == 1 &&"},
{"lineNum":" 1406","line":"                                  std::is_integral<Arg>::value,"},
{"lineNum":" 1407","line":"                              value_type>::type"},
{"lineNum":" 1408","line":"      operator[](Arg arg) const {"},
{"lineNum":" 1409","line":"    return view.at(thread_id, arg);"},
{"lineNum":" 1410","line":"  }"},
{"lineNum":" 1411","line":""},
{"lineNum":" 1412","line":" private:"},
{"lineNum":" 1413","line":"  view_type const& view;"},
{"lineNum":" 1414","line":""},
{"lineNum":" 1415","line":"  // simplify RAII by disallowing copies"},
{"lineNum":" 1416","line":"  ScatterAccess(ScatterAccess const& other) = delete;"},
{"lineNum":" 1417","line":"  ScatterAccess& operator=(ScatterAccess const& other) = delete;"},
{"lineNum":" 1418","line":"  ScatterAccess& operator=(ScatterAccess&& other) = delete;"},
{"lineNum":" 1419","line":""},
{"lineNum":" 1420","line":" public:"},
{"lineNum":" 1421","line":"  // do need to allow moves though, for the common"},
{"lineNum":" 1422","line":"  // auto b = a.access();"},
{"lineNum":" 1423","line":"  // that assignments turns into a move constructor call"},
{"lineNum":" 1424","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":" 1425","line":"  ScatterAccess(ScatterAccess&& other)"},
{"lineNum":" 1426","line":"      : view(other.view), thread_id(other.thread_id) {"},
{"lineNum":" 1427","line":"    other.thread_id = ~thread_id_type(0);"},
{"lineNum":" 1428","line":"  }"},
{"lineNum":" 1429","line":""},
{"lineNum":" 1430","line":" private:"},
{"lineNum":" 1431","line":"  using unique_token_type = typename view_type::unique_token_type;"},
{"lineNum":" 1432","line":"  using thread_id_type    = typename unique_token_type::size_type;"},
{"lineNum":" 1433","line":"  thread_id_type thread_id;"},
{"lineNum":" 1434","line":"};"},
{"lineNum":" 1435","line":""},
{"lineNum":" 1436","line":"template <typename Op          = Kokkos::Experimental::ScatterSum,"},
{"lineNum":" 1437","line":"          typename Duplication = void, typename Contribution = void,"},
{"lineNum":" 1438","line":"          typename RT, typename... RP>"},
{"lineNum":" 1439","line":"ScatterView<"},
{"lineNum":" 1440","line":"    RT, typename ViewTraits<RT, RP...>::array_layout,"},
{"lineNum":" 1441","line":"    typename ViewTraits<RT, RP...>::device_type, Op,"},
{"lineNum":" 1442","line":"    std::conditional_t<"},
{"lineNum":" 1443","line":"        std::is_same<Duplication, void>::value,"},
{"lineNum":" 1444","line":"        typename Kokkos::Impl::Experimental::DefaultDuplication<"},
{"lineNum":" 1445","line":"            typename ViewTraits<RT, RP...>::execution_space>::type,"},
{"lineNum":" 1446","line":"        Duplication>,"},
{"lineNum":" 1447","line":"    std::conditional_t<"},
{"lineNum":" 1448","line":"        std::is_same<Contribution, void>::value,"},
{"lineNum":" 1449","line":"        typename Kokkos::Impl::Experimental::DefaultContribution<"},
{"lineNum":" 1450","line":"            typename ViewTraits<RT, RP...>::execution_space,"},
{"lineNum":" 1451","line":"            typename std::conditional_t<"},
{"lineNum":" 1452","line":"                std::is_same<Duplication, void>::value,"},
{"lineNum":" 1453","line":"                typename Kokkos::Impl::Experimental::DefaultDuplication<"},
{"lineNum":" 1454","line":"                    typename ViewTraits<RT, RP...>::execution_space>::type,"},
{"lineNum":" 1455","line":"                Duplication>>::type,"},
{"lineNum":" 1456","line":"        Contribution>>"},
{"lineNum":" 1457","line":"create_scatter_view(View<RT, RP...> const& original_view) {"},
{"lineNum":" 1458","line":"  return original_view;  // implicit ScatterView constructor call"},
{"lineNum":" 1459","line":"}"},
{"lineNum":" 1460","line":""},
{"lineNum":" 1461","line":"template <typename Op, typename RT, typename... RP>"},
{"lineNum":" 1462","line":"ScatterView<"},
{"lineNum":" 1463","line":"    RT, typename ViewTraits<RT, RP...>::array_layout,"},
{"lineNum":" 1464","line":"    typename ViewTraits<RT, RP...>::device_type, Op,"},
{"lineNum":" 1465","line":"    typename Kokkos::Impl::Experimental::DefaultDuplication<"},
{"lineNum":" 1466","line":"        typename ViewTraits<RT, RP...>::execution_space>::type,"},
{"lineNum":" 1467","line":"    typename Kokkos::Impl::Experimental::DefaultContribution<"},
{"lineNum":" 1468","line":"        typename ViewTraits<RT, RP...>::execution_space,"},
{"lineNum":" 1469","line":"        typename Kokkos::Impl::Experimental::DefaultDuplication<"},
{"lineNum":" 1470","line":"            typename ViewTraits<RT, RP...>::execution_space>::type>::type>"},
{"lineNum":" 1471","line":"create_scatter_view(Op, View<RT, RP...> const& original_view) {"},
{"lineNum":" 1472","line":"  return original_view;  // implicit ScatterView constructor call"},
{"lineNum":" 1473","line":"}"},
{"lineNum":" 1474","line":""},
{"lineNum":" 1475","line":"template <typename Op, typename Duplication, typename Contribution, typename RT,"},
{"lineNum":" 1476","line":"          typename... RP>"},
{"lineNum":" 1477","line":"ScatterView<RT, typename ViewTraits<RT, RP...>::array_layout,"},
{"lineNum":" 1478","line":"            typename ViewTraits<RT, RP...>::device_type, Op, Duplication,"},
{"lineNum":" 1479","line":"            Contribution>"},
{"lineNum":" 1480","line":"create_scatter_view(Op, Duplication, Contribution,"},
{"lineNum":" 1481","line":"                    View<RT, RP...> const& original_view) {"},
{"lineNum":" 1482","line":"  return original_view;  // implicit ScatterView constructor call"},
{"lineNum":" 1483","line":"}"},
{"lineNum":" 1484","line":""},
{"lineNum":" 1485","line":"}  // namespace Experimental"},
{"lineNum":" 1486","line":"}  // namespace Kokkos"},
{"lineNum":" 1487","line":""},
{"lineNum":" 1488","line":"namespace Kokkos {"},
{"lineNum":" 1489","line":"namespace Experimental {"},
{"lineNum":" 1490","line":""},
{"lineNum":" 1491","line":"template <typename DT1, typename DT2, typename LY, typename ES, typename OP,"},
{"lineNum":" 1492","line":"          typename CT, typename DP, typename... VP>"},
{"lineNum":" 1493","line":"void contribute("},
{"lineNum":" 1494","line":"    typename ES::execution_space const& exec_space, View<DT1, VP...>& dest,"},
{"lineNum":" 1495","line":"    Kokkos::Experimental::ScatterView<DT2, LY, ES, OP, CT, DP> const& src) {"},
{"lineNum":" 1496","line":"  src.contribute_into(exec_space, dest);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1497","line":"}"},
{"lineNum":" 1498","line":""},
{"lineNum":" 1499","line":"template <typename DT1, typename DT2, typename LY, typename ES, typename OP,"},
{"lineNum":" 1500","line":"          typename CT, typename DP, typename... VP>"},
{"lineNum":" 1501","line":"void contribute("},
{"lineNum":" 1502","line":"    View<DT1, VP...>& dest,"},
{"lineNum":" 1503","line":"    Kokkos::Experimental::ScatterView<DT2, LY, ES, OP, CT, DP> const& src) {"},
{"lineNum":" 1504","line":"  using execution_space = typename ES::execution_space;"},
{"lineNum":" 1505","line":"  contribute(execution_space{}, dest, src);"},
{"lineNum":" 1506","line":"}"},
{"lineNum":" 1507","line":""},
{"lineNum":" 1508","line":"}  // namespace Experimental"},
{"lineNum":" 1509","line":"}  // namespace Kokkos"},
{"lineNum":" 1510","line":""},
{"lineNum":" 1511","line":"namespace Kokkos {"},
{"lineNum":" 1512","line":""},
{"lineNum":" 1513","line":"template <typename DT, typename LY, typename ES, typename OP, typename CT,"},
{"lineNum":" 1514","line":"          typename DP, typename... IS>"},
{"lineNum":" 1515","line":"void realloc("},
{"lineNum":" 1516","line":"    Kokkos::Experimental::ScatterView<DT, LY, ES, OP, CT, DP>& scatter_view,"},
{"lineNum":" 1517","line":"    IS... is) {"},
{"lineNum":" 1518","line":"  scatter_view.realloc(is...);"},
{"lineNum":" 1519","line":"}"},
{"lineNum":" 1520","line":""},
{"lineNum":" 1521","line":"template <typename DT, typename LY, typename ES, typename OP, typename CT,"},
{"lineNum":" 1522","line":"          typename DP, typename... IS>"},
{"lineNum":" 1523","line":"void resize("},
{"lineNum":" 1524","line":"    Kokkos::Experimental::ScatterView<DT, LY, ES, OP, CT, DP>& scatter_view,"},
{"lineNum":" 1525","line":"    IS... is) {"},
{"lineNum":" 1526","line":"  scatter_view.resize(is...);"},
{"lineNum":" 1527","line":"}"},
{"lineNum":" 1528","line":""},
{"lineNum":" 1529","line":"}  // namespace Kokkos"},
{"lineNum":" 1530","line":""},
{"lineNum":" 1531","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 23, "covered" : 0,};
var merged_data = [];
