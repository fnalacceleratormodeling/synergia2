var data = {lines:[
{"lineNum":"    1","line":"// -*- C++ -*-"},
{"lineNum":"    2","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions."},
{"lineNum":"    5","line":"// See https://llvm.org/LICENSE.txt for license information."},
{"lineNum":"    6","line":"// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef _LIBCPP__HASH_TABLE"},
{"lineNum":"   11","line":"#define _LIBCPP__HASH_TABLE"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"#include <__bits> // __libcpp_clz"},
{"lineNum":"   14","line":"#include <__config>"},
{"lineNum":"   15","line":"#include <__debug>"},
{"lineNum":"   16","line":"#include <algorithm>"},
{"lineNum":"   17","line":"#include <cmath>"},
{"lineNum":"   18","line":"#include <initializer_list>"},
{"lineNum":"   19","line":"#include <iterator>"},
{"lineNum":"   20","line":"#include <memory>"},
{"lineNum":"   21","line":"#include <type_traits>"},
{"lineNum":"   22","line":"#include <utility>"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"},
{"lineNum":"   25","line":"#pragma GCC system_header"},
{"lineNum":"   26","line":"#endif"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"_LIBCPP_PUSH_MACROS"},
{"lineNum":"   29","line":"#include <__undef_macros>"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"_LIBCPP_BEGIN_NAMESPACE_STD"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"template <class _Key, class _Tp>"},
{"lineNum":"   35","line":"struct __hash_value_type;"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"template <class _Tp>"},
{"lineNum":"   38","line":"struct __is_hash_value_type_imp : false_type {};"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"template <class _Key, class _Value>"},
{"lineNum":"   41","line":"struct __is_hash_value_type_imp<__hash_value_type<_Key, _Value> > : true_type {};"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"template <class ..._Args>"},
{"lineNum":"   44","line":"struct __is_hash_value_type : false_type {};"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"template <class _One>"},
{"lineNum":"   47","line":"struct __is_hash_value_type<_One> : __is_hash_value_type_imp<typename __uncvref<_One>::type> {};"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"_LIBCPP_FUNC_VIS"},
{"lineNum":"   50","line":"size_t __next_prime(size_t __n);"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"template <class _NodePtr>"},
{"lineNum":"   53","line":"struct __hash_node_base"},
{"lineNum":"   54","line":"{"},
{"lineNum":"   55","line":"    typedef typename pointer_traits<_NodePtr>::element_type __node_type;"},
{"lineNum":"   56","line":"    typedef __hash_node_base __first_node;"},
{"lineNum":"   57","line":"    typedef typename __rebind_pointer<_NodePtr, __first_node>::type __node_base_pointer;"},
{"lineNum":"   58","line":"    typedef _NodePtr __node_pointer;"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"#if defined(_LIBCPP_ABI_FIX_UNORDERED_NODE_POINTER_UB)"},
{"lineNum":"   61","line":"  typedef __node_base_pointer __next_pointer;"},
{"lineNum":"   62","line":"#else"},
{"lineNum":"   63","line":"  typedef typename conditional<"},
{"lineNum":"   64","line":"      is_pointer<__node_pointer>::value,"},
{"lineNum":"   65","line":"      __node_base_pointer,"},
{"lineNum":"   66","line":"      __node_pointer>::type   __next_pointer;"},
{"lineNum":"   67","line":"#endif"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"    __next_pointer    __next_;"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"   72","line":"    __next_pointer __ptr() _NOEXCEPT {"},
{"lineNum":"   73","line":"        return static_cast<__next_pointer>("},
{"lineNum":"   74","line":"            pointer_traits<__node_base_pointer>::pointer_to(*this));"},
{"lineNum":"   75","line":"    }"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"   78","line":"    __node_pointer __upcast() _NOEXCEPT {"},
{"lineNum":"   79","line":"        return static_cast<__node_pointer>("},
{"lineNum":"   80","line":"            pointer_traits<__node_base_pointer>::pointer_to(*this));"},
{"lineNum":"   81","line":"    }"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"   84","line":"    size_t __hash() const _NOEXCEPT {"},
{"lineNum":"   85","line":"        return static_cast<__node_type const&>(*this).__hash_;","class":"linePartCov","hits":"15","order":"306","possible_hits":"466",},
{"lineNum":"   86","line":"    }"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"    _LIBCPP_INLINE_VISIBILITY __hash_node_base() _NOEXCEPT : __next_(nullptr) {}","class":"linePartCov","hits":"3","order":"99","possible_hits":"204",},
{"lineNum":"   89","line":"};"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"template <class _Tp, class _VoidPtr>"},
{"lineNum":"   92","line":"struct _LIBCPP_STANDALONE_DEBUG __hash_node"},
{"lineNum":"   93","line":"    : public __hash_node_base"},
{"lineNum":"   94","line":"             <"},
{"lineNum":"   95","line":"                 typename __rebind_pointer<_VoidPtr, __hash_node<_Tp, _VoidPtr> >::type"},
{"lineNum":"   96","line":"             >"},
{"lineNum":"   97","line":"{"},
{"lineNum":"   98","line":"    typedef _Tp __node_value_type;"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"    size_t            __hash_;"},
{"lineNum":"  101","line":"    __node_value_type __value_;"},
{"lineNum":"  102","line":"};"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  105","line":"bool"},
{"lineNum":"  106","line":"__is_hash_power2(size_t __bc)"},
{"lineNum":"  107","line":"{"},
{"lineNum":"  108","line":"    return __bc > 2 && !(__bc & (__bc - 1));","class":"linePartCov","hits":"4","order":"129","possible_hits":"79",},
{"lineNum":"  109","line":"}"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  112","line":"size_t"},
{"lineNum":"  113","line":"__constrain_hash(size_t __h, size_t __bc)"},
{"lineNum":"  114","line":"{"},
{"lineNum":"  115","line":"    return !(__bc & (__bc - 1)) ? __h & (__bc - 1) :","class":"linePartCov","hits":"26","order":"153","possible_hits":"886",},
{"lineNum":"  116","line":"        (__h < __bc ? __h : __h % __bc);","class":"linePartCov","hits":"28","order":"487","possible_hits":"964",},
{"lineNum":"  117","line":"}"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  120","line":"size_t"},
{"lineNum":"  121","line":"__next_hash_pow2(size_t __n)"},
{"lineNum":"  122","line":"{"},
{"lineNum":"  123","line":"    return __n < 2 ? __n : (size_t(1) << (numeric_limits<size_t>::digits - __libcpp_clz(__n-1)));","class":"lineNoCov","hits":"0","possible_hits":"74",},
{"lineNum":"  124","line":"}"},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc> class __hash_table;"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"template <class _NodePtr>      class _LIBCPP_TEMPLATE_VIS __hash_iterator;"},
{"lineNum":"  130","line":"template <class _ConstNodePtr> class _LIBCPP_TEMPLATE_VIS __hash_const_iterator;"},
{"lineNum":"  131","line":"template <class _NodePtr>      class _LIBCPP_TEMPLATE_VIS __hash_local_iterator;"},
{"lineNum":"  132","line":"template <class _ConstNodePtr> class _LIBCPP_TEMPLATE_VIS __hash_const_local_iterator;"},
{"lineNum":"  133","line":"template <class _HashIterator> class _LIBCPP_TEMPLATE_VIS __hash_map_iterator;"},
{"lineNum":"  134","line":"template <class _HashIterator> class _LIBCPP_TEMPLATE_VIS __hash_map_const_iterator;"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"template <class _Tp>"},
{"lineNum":"  137","line":"struct __hash_key_value_types {"},
{"lineNum":"  138","line":"  static_assert(!is_reference<_Tp>::value && !is_const<_Tp>::value, \"\");"},
{"lineNum":"  139","line":"  typedef _Tp key_type;"},
{"lineNum":"  140","line":"  typedef _Tp __node_value_type;"},
{"lineNum":"  141","line":"  typedef _Tp __container_value_type;"},
{"lineNum":"  142","line":"  static const bool __is_map = false;"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  145","line":"  static key_type const& __get_key(_Tp const& __v) {"},
{"lineNum":"  146","line":"    return __v;"},
{"lineNum":"  147","line":"  }"},
{"lineNum":"  148","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  149","line":"  static __container_value_type const& __get_value(__node_value_type const& __v) {"},
{"lineNum":"  150","line":"    return __v;"},
{"lineNum":"  151","line":"  }"},
{"lineNum":"  152","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  153","line":"  static __container_value_type* __get_ptr(__node_value_type& __n) {"},
{"lineNum":"  154","line":"    return _VSTD::addressof(__n);"},
{"lineNum":"  155","line":"  }"},
{"lineNum":"  156","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  157","line":"  static __container_value_type&& __move(__node_value_type& __v) {"},
{"lineNum":"  158","line":"    return _VSTD::move(__v);"},
{"lineNum":"  159","line":"  }"},
{"lineNum":"  160","line":"};"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"template <class _Key, class _Tp>"},
{"lineNum":"  163","line":"struct __hash_key_value_types<__hash_value_type<_Key, _Tp> > {"},
{"lineNum":"  164","line":"  typedef _Key                                         key_type;"},
{"lineNum":"  165","line":"  typedef _Tp                                          mapped_type;"},
{"lineNum":"  166","line":"  typedef __hash_value_type<_Key, _Tp>                 __node_value_type;"},
{"lineNum":"  167","line":"  typedef pair<const _Key, _Tp>                        __container_value_type;"},
{"lineNum":"  168","line":"  typedef __container_value_type                       __map_value_type;"},
{"lineNum":"  169","line":"  static const bool __is_map = true;"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  172","line":"  static key_type const& __get_key(__container_value_type const& __v) {"},
{"lineNum":"  173","line":"    return __v.first;"},
{"lineNum":"  174","line":"  }"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"  template <class _Up>"},
{"lineNum":"  177","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  178","line":"  static typename enable_if<__is_same_uncvref<_Up, __node_value_type>::value,"},
{"lineNum":"  179","line":"      __container_value_type const&>::type"},
{"lineNum":"  180","line":"  __get_value(_Up& __t) {"},
{"lineNum":"  181","line":"    return __t.__get_value();"},
{"lineNum":"  182","line":"  }"},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"  template <class _Up>"},
{"lineNum":"  185","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  186","line":"  static typename enable_if<__is_same_uncvref<_Up, __container_value_type>::value,"},
{"lineNum":"  187","line":"      __container_value_type const&>::type"},
{"lineNum":"  188","line":"  __get_value(_Up& __t) {"},
{"lineNum":"  189","line":"    return __t;"},
{"lineNum":"  190","line":"  }"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  193","line":"  static __container_value_type* __get_ptr(__node_value_type& __n) {"},
{"lineNum":"  194","line":"    return _VSTD::addressof(__n.__get_value());"},
{"lineNum":"  195","line":"  }"},
{"lineNum":"  196","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  197","line":"  static pair<key_type&&, mapped_type&&> __move(__node_value_type& __v) {"},
{"lineNum":"  198","line":"    return __v.__move();"},
{"lineNum":"  199","line":"  }"},
{"lineNum":"  200","line":"};"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"template <class _Tp, class _AllocPtr, class _KVTypes = __hash_key_value_types<_Tp>,"},
{"lineNum":"  203","line":"          bool = _KVTypes::__is_map>"},
{"lineNum":"  204","line":"struct __hash_map_pointer_types {};"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"template <class _Tp, class _AllocPtr, class _KVTypes>"},
{"lineNum":"  207","line":"struct __hash_map_pointer_types<_Tp, _AllocPtr, _KVTypes, true> {"},
{"lineNum":"  208","line":"  typedef typename _KVTypes::__map_value_type   _Mv;"},
{"lineNum":"  209","line":"  typedef typename __rebind_pointer<_AllocPtr, _Mv>::type"},
{"lineNum":"  210","line":"                                                       __map_value_type_pointer;"},
{"lineNum":"  211","line":"  typedef typename __rebind_pointer<_AllocPtr, const _Mv>::type"},
{"lineNum":"  212","line":"                                                 __const_map_value_type_pointer;"},
{"lineNum":"  213","line":"};"},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"template <class _NodePtr, class _NodeT = typename pointer_traits<_NodePtr>::element_type>"},
{"lineNum":"  216","line":"struct __hash_node_types;"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"template <class _NodePtr, class _Tp, class _VoidPtr>"},
{"lineNum":"  219","line":"struct __hash_node_types<_NodePtr, __hash_node<_Tp, _VoidPtr> >"},
{"lineNum":"  220","line":"    : public __hash_key_value_types<_Tp>, __hash_map_pointer_types<_Tp, _VoidPtr>"},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"{"},
{"lineNum":"  223","line":"  typedef __hash_key_value_types<_Tp>           __base;"},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"public:"},
{"lineNum":"  226","line":"  typedef ptrdiff_t difference_type;"},
{"lineNum":"  227","line":"  typedef size_t size_type;"},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"  typedef typename __rebind_pointer<_NodePtr, void>::type       __void_pointer;"},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"  typedef typename pointer_traits<_NodePtr>::element_type       __node_type;"},
{"lineNum":"  232","line":"  typedef _NodePtr                                              __node_pointer;"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"  typedef __hash_node_base<__node_pointer>                      __node_base_type;"},
{"lineNum":"  235","line":"  typedef typename __rebind_pointer<_NodePtr, __node_base_type>::type"},
{"lineNum":"  236","line":"                                                             __node_base_pointer;"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"  typedef typename __node_base_type::__next_pointer          __next_pointer;"},
{"lineNum":"  239","line":""},
{"lineNum":"  240","line":"  typedef _Tp                                                 __node_value_type;"},
{"lineNum":"  241","line":"  typedef typename __rebind_pointer<_VoidPtr, __node_value_type>::type"},
{"lineNum":"  242","line":"                                                      __node_value_type_pointer;"},
{"lineNum":"  243","line":"  typedef typename __rebind_pointer<_VoidPtr, const __node_value_type>::type"},
{"lineNum":"  244","line":"                                                __const_node_value_type_pointer;"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"private:"},
{"lineNum":"  247","line":"    static_assert(!is_const<__node_type>::value,"},
{"lineNum":"  248","line":"                \"_NodePtr should never be a pointer to const\");"},
{"lineNum":"  249","line":"    static_assert((is_same<typename pointer_traits<_VoidPtr>::element_type, void>::value),"},
{"lineNum":"  250","line":"                  \"_VoidPtr does not point to unqualified void type\");"},
{"lineNum":"  251","line":"    static_assert((is_same<typename __rebind_pointer<_VoidPtr, __node_type>::type,"},
{"lineNum":"  252","line":"                          _NodePtr>::value), \"_VoidPtr does not rebind to _NodePtr.\");"},
{"lineNum":"  253","line":"};"},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"template <class _HashIterator>"},
{"lineNum":"  256","line":"struct __hash_node_types_from_iterator;"},
{"lineNum":"  257","line":"template <class _NodePtr>"},
{"lineNum":"  258","line":"struct __hash_node_types_from_iterator<__hash_iterator<_NodePtr> > : __hash_node_types<_NodePtr> {};"},
{"lineNum":"  259","line":"template <class _NodePtr>"},
{"lineNum":"  260","line":"struct __hash_node_types_from_iterator<__hash_const_iterator<_NodePtr> > : __hash_node_types<_NodePtr> {};"},
{"lineNum":"  261","line":"template <class _NodePtr>"},
{"lineNum":"  262","line":"struct __hash_node_types_from_iterator<__hash_local_iterator<_NodePtr> > : __hash_node_types<_NodePtr> {};"},
{"lineNum":"  263","line":"template <class _NodePtr>"},
{"lineNum":"  264","line":"struct __hash_node_types_from_iterator<__hash_const_local_iterator<_NodePtr> > : __hash_node_types<_NodePtr> {};"},
{"lineNum":"  265","line":""},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"template <class _NodeValueTp, class _VoidPtr>"},
{"lineNum":"  268","line":"struct __make_hash_node_types {"},
{"lineNum":"  269","line":"  typedef __hash_node<_NodeValueTp, _VoidPtr> _NodeTp;"},
{"lineNum":"  270","line":"  typedef typename __rebind_pointer<_VoidPtr, _NodeTp>::type _NodePtr;"},
{"lineNum":"  271","line":"  typedef __hash_node_types<_NodePtr> type;"},
{"lineNum":"  272","line":"};"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"template <class _NodePtr>"},
{"lineNum":"  275","line":"class _LIBCPP_TEMPLATE_VIS __hash_iterator"},
{"lineNum":"  276","line":"{"},
{"lineNum":"  277","line":"    typedef __hash_node_types<_NodePtr> _NodeTypes;"},
{"lineNum":"  278","line":"    typedef _NodePtr                            __node_pointer;"},
{"lineNum":"  279","line":"    typedef typename _NodeTypes::__next_pointer __next_pointer;"},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"    __next_pointer            __node_;"},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"public:"},
{"lineNum":"  284","line":"    typedef forward_iterator_tag                           iterator_category;"},
{"lineNum":"  285","line":"    typedef typename _NodeTypes::__node_value_type         value_type;"},
{"lineNum":"  286","line":"    typedef typename _NodeTypes::difference_type           difference_type;"},
{"lineNum":"  287","line":"    typedef value_type&                                    reference;"},
{"lineNum":"  288","line":"    typedef typename _NodeTypes::__node_value_type_pointer pointer;"},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"    _LIBCPP_INLINE_VISIBILITY __hash_iterator() _NOEXCEPT : __node_(nullptr) {"},
{"lineNum":"  291","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  292","line":"        __get_db()->__insert_i(this);"},
{"lineNum":"  293","line":"#endif"},
{"lineNum":"  294","line":"    }"},
{"lineNum":"  295","line":""},
{"lineNum":"  296","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  297","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  298","line":"    __hash_iterator(const __hash_iterator& __i)"},
{"lineNum":"  299","line":"        : __node_(__i.__node_)"},
{"lineNum":"  300","line":"    {"},
{"lineNum":"  301","line":"        __get_db()->__iterator_copy(this, &__i);"},
{"lineNum":"  302","line":"    }"},
{"lineNum":"  303","line":""},
{"lineNum":"  304","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  305","line":"    ~__hash_iterator()"},
{"lineNum":"  306","line":"    {"},
{"lineNum":"  307","line":"        __get_db()->__erase_i(this);"},
{"lineNum":"  308","line":"    }"},
{"lineNum":"  309","line":""},
{"lineNum":"  310","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  311","line":"    __hash_iterator& operator=(const __hash_iterator& __i)"},
{"lineNum":"  312","line":"    {"},
{"lineNum":"  313","line":"        if (this != &__i)"},
{"lineNum":"  314","line":"        {"},
{"lineNum":"  315","line":"            __get_db()->__iterator_copy(this, &__i);"},
{"lineNum":"  316","line":"            __node_ = __i.__node_;"},
{"lineNum":"  317","line":"        }"},
{"lineNum":"  318","line":"        return *this;"},
{"lineNum":"  319","line":"    }"},
{"lineNum":"  320","line":"#endif // _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  321","line":""},
{"lineNum":"  322","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  323","line":"    reference operator*() const {"},
{"lineNum":"  324","line":"        _LIBCPP_DEBUG_ASSERT(__get_const_db()->__dereferenceable(this),"},
{"lineNum":"  325","line":"                             \"Attempted to dereference a non-dereferenceable unordered container iterator\");"},
{"lineNum":"  326","line":"        return __node_->__upcast()->__value_;"},
{"lineNum":"  327","line":"    }"},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  330","line":"    pointer operator->() const {"},
{"lineNum":"  331","line":"        _LIBCPP_DEBUG_ASSERT(__get_const_db()->__dereferenceable(this),"},
{"lineNum":"  332","line":"                           \"Attempted to dereference a non-dereferenceable unordered container iterator\");"},
{"lineNum":"  333","line":"        return pointer_traits<pointer>::pointer_to(__node_->__upcast()->__value_);"},
{"lineNum":"  334","line":"    }"},
{"lineNum":"  335","line":""},
{"lineNum":"  336","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  337","line":"    __hash_iterator& operator++() {"},
{"lineNum":"  338","line":"        _LIBCPP_DEBUG_ASSERT(__get_const_db()->__dereferenceable(this),"},
{"lineNum":"  339","line":"                       \"Attempted to increment a non-incrementable unordered container iterator\");"},
{"lineNum":"  340","line":"        __node_ = __node_->__next_;","class":"linePartCov","hits":"15","order":"337","possible_hits":"117",},
{"lineNum":"  341","line":"        return *this;"},
{"lineNum":"  342","line":"    }"},
{"lineNum":"  343","line":""},
{"lineNum":"  344","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  345","line":"    __hash_iterator operator++(int)"},
{"lineNum":"  346","line":"    {"},
{"lineNum":"  347","line":"        __hash_iterator __t(*this);"},
{"lineNum":"  348","line":"        ++(*this);"},
{"lineNum":"  349","line":"        return __t;"},
{"lineNum":"  350","line":"    }"},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"    friend _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  353","line":"    bool operator==(const __hash_iterator& __x, const __hash_iterator& __y)"},
{"lineNum":"  354","line":"    {"},
{"lineNum":"  355","line":"        return __x.__node_ == __y.__node_;","class":"linePartCov","hits":"33","order":"314","possible_hits":"318",},
{"lineNum":"  356","line":"    }"},
{"lineNum":"  357","line":"    friend _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  358","line":"    bool operator!=(const __hash_iterator& __x, const __hash_iterator& __y)"},
{"lineNum":"  359","line":"        {return !(__x == __y);}"},
{"lineNum":"  360","line":""},
{"lineNum":"  361","line":"private:"},
{"lineNum":"  362","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  363","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  364","line":"    __hash_iterator(__next_pointer __node, const void* __c) _NOEXCEPT"},
{"lineNum":"  365","line":"        : __node_(__node)"},
{"lineNum":"  366","line":"        {"},
{"lineNum":"  367","line":"            __get_db()->__insert_ic(this, __c);"},
{"lineNum":"  368","line":"        }"},
{"lineNum":"  369","line":"#else"},
{"lineNum":"  370","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  371","line":"    __hash_iterator(__next_pointer __node) _NOEXCEPT"},
{"lineNum":"  372","line":"        : __node_(__node)"},
{"lineNum":"  373","line":"        {}"},
{"lineNum":"  374","line":"#endif"},
{"lineNum":"  375","line":"    template <class, class, class, class> friend class __hash_table;"},
{"lineNum":"  376","line":"    template <class> friend class _LIBCPP_TEMPLATE_VIS __hash_const_iterator;"},
{"lineNum":"  377","line":"    template <class> friend class _LIBCPP_TEMPLATE_VIS __hash_map_iterator;"},
{"lineNum":"  378","line":"    template <class, class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS unordered_map;"},
{"lineNum":"  379","line":"    template <class, class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS unordered_multimap;"},
{"lineNum":"  380","line":"};"},
{"lineNum":"  381","line":""},
{"lineNum":"  382","line":"template <class _NodePtr>"},
{"lineNum":"  383","line":"class _LIBCPP_TEMPLATE_VIS __hash_const_iterator"},
{"lineNum":"  384","line":"{"},
{"lineNum":"  385","line":"    static_assert(!is_const<typename pointer_traits<_NodePtr>::element_type>::value, \"\");"},
{"lineNum":"  386","line":"    typedef __hash_node_types<_NodePtr> _NodeTypes;"},
{"lineNum":"  387","line":"    typedef _NodePtr                            __node_pointer;"},
{"lineNum":"  388","line":"    typedef typename _NodeTypes::__next_pointer __next_pointer;"},
{"lineNum":"  389","line":""},
{"lineNum":"  390","line":"    __next_pointer __node_;"},
{"lineNum":"  391","line":""},
{"lineNum":"  392","line":"public:"},
{"lineNum":"  393","line":"    typedef __hash_iterator<_NodePtr> __non_const_iterator;"},
{"lineNum":"  394","line":""},
{"lineNum":"  395","line":"    typedef forward_iterator_tag                                 iterator_category;"},
{"lineNum":"  396","line":"    typedef typename _NodeTypes::__node_value_type               value_type;"},
{"lineNum":"  397","line":"    typedef typename _NodeTypes::difference_type                 difference_type;"},
{"lineNum":"  398","line":"    typedef const value_type&                                    reference;"},
{"lineNum":"  399","line":"    typedef typename _NodeTypes::__const_node_value_type_pointer pointer;"},
{"lineNum":"  400","line":""},
{"lineNum":"  401","line":""},
{"lineNum":"  402","line":"    _LIBCPP_INLINE_VISIBILITY __hash_const_iterator() _NOEXCEPT : __node_(nullptr) {"},
{"lineNum":"  403","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  404","line":"        __get_db()->__insert_i(this);"},
{"lineNum":"  405","line":"#endif"},
{"lineNum":"  406","line":"    }"},
{"lineNum":"  407","line":""},
{"lineNum":"  408","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  409","line":"    __hash_const_iterator(const __non_const_iterator& __x) _NOEXCEPT"},
{"lineNum":"  410","line":"        : __node_(__x.__node_)"},
{"lineNum":"  411","line":"    {"},
{"lineNum":"  412","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  413","line":"        __get_db()->__iterator_copy(this, &__x);"},
{"lineNum":"  414","line":"#endif"},
{"lineNum":"  415","line":"    }"},
{"lineNum":"  416","line":""},
{"lineNum":"  417","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  418","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  419","line":"    __hash_const_iterator(const __hash_const_iterator& __i)"},
{"lineNum":"  420","line":"        : __node_(__i.__node_)"},
{"lineNum":"  421","line":"    {"},
{"lineNum":"  422","line":"        __get_db()->__iterator_copy(this, &__i);"},
{"lineNum":"  423","line":"    }"},
{"lineNum":"  424","line":""},
{"lineNum":"  425","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  426","line":"    ~__hash_const_iterator()"},
{"lineNum":"  427","line":"    {"},
{"lineNum":"  428","line":"        __get_db()->__erase_i(this);"},
{"lineNum":"  429","line":"    }"},
{"lineNum":"  430","line":""},
{"lineNum":"  431","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  432","line":"    __hash_const_iterator& operator=(const __hash_const_iterator& __i)"},
{"lineNum":"  433","line":"    {"},
{"lineNum":"  434","line":"        if (this != &__i)"},
{"lineNum":"  435","line":"        {"},
{"lineNum":"  436","line":"            __get_db()->__iterator_copy(this, &__i);"},
{"lineNum":"  437","line":"            __node_ = __i.__node_;"},
{"lineNum":"  438","line":"        }"},
{"lineNum":"  439","line":"        return *this;"},
{"lineNum":"  440","line":"    }"},
{"lineNum":"  441","line":"#endif // _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  442","line":""},
{"lineNum":"  443","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  444","line":"    reference operator*() const {"},
{"lineNum":"  445","line":"        _LIBCPP_DEBUG_ASSERT(__get_const_db()->__dereferenceable(this),"},
{"lineNum":"  446","line":"                           \"Attempted to dereference a non-dereferenceable unordered container const_iterator\");"},
{"lineNum":"  447","line":"        return __node_->__upcast()->__value_;"},
{"lineNum":"  448","line":"    }"},
{"lineNum":"  449","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  450","line":"    pointer operator->() const {"},
{"lineNum":"  451","line":"        _LIBCPP_DEBUG_ASSERT(__get_const_db()->__dereferenceable(this),"},
{"lineNum":"  452","line":"                           \"Attempted to dereference a non-dereferenceable unordered container const_iterator\");"},
{"lineNum":"  453","line":"        return pointer_traits<pointer>::pointer_to(__node_->__upcast()->__value_);"},
{"lineNum":"  454","line":"    }"},
{"lineNum":"  455","line":""},
{"lineNum":"  456","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  457","line":"    __hash_const_iterator& operator++() {"},
{"lineNum":"  458","line":"        _LIBCPP_DEBUG_ASSERT(__get_const_db()->__dereferenceable(this),"},
{"lineNum":"  459","line":"                             \"Attempted to increment a non-incrementable unordered container const_iterator\");"},
{"lineNum":"  460","line":"        __node_ = __node_->__next_;"},
{"lineNum":"  461","line":"        return *this;"},
{"lineNum":"  462","line":"    }"},
{"lineNum":"  463","line":""},
{"lineNum":"  464","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  465","line":"    __hash_const_iterator operator++(int)"},
{"lineNum":"  466","line":"    {"},
{"lineNum":"  467","line":"        __hash_const_iterator __t(*this);"},
{"lineNum":"  468","line":"        ++(*this);"},
{"lineNum":"  469","line":"        return __t;"},
{"lineNum":"  470","line":"    }"},
{"lineNum":"  471","line":""},
{"lineNum":"  472","line":"    friend _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  473","line":"    bool operator==(const __hash_const_iterator& __x, const __hash_const_iterator& __y)"},
{"lineNum":"  474","line":"    {"},
{"lineNum":"  475","line":"        return __x.__node_ == __y.__node_;","class":"linePartCov","hits":"14","order":"335","possible_hits":"83",},
{"lineNum":"  476","line":"    }"},
{"lineNum":"  477","line":"    friend _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  478","line":"    bool operator!=(const __hash_const_iterator& __x, const __hash_const_iterator& __y)"},
{"lineNum":"  479","line":"        {return !(__x == __y);}"},
{"lineNum":"  480","line":""},
{"lineNum":"  481","line":"private:"},
{"lineNum":"  482","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  483","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  484","line":"    __hash_const_iterator(__next_pointer __node, const void* __c) _NOEXCEPT"},
{"lineNum":"  485","line":"        : __node_(__node)"},
{"lineNum":"  486","line":"        {"},
{"lineNum":"  487","line":"            __get_db()->__insert_ic(this, __c);"},
{"lineNum":"  488","line":"        }"},
{"lineNum":"  489","line":"#else"},
{"lineNum":"  490","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  491","line":"    __hash_const_iterator(__next_pointer __node) _NOEXCEPT"},
{"lineNum":"  492","line":"        : __node_(__node)"},
{"lineNum":"  493","line":"        {}"},
{"lineNum":"  494","line":"#endif"},
{"lineNum":"  495","line":"    template <class, class, class, class> friend class __hash_table;"},
{"lineNum":"  496","line":"    template <class> friend class _LIBCPP_TEMPLATE_VIS __hash_map_const_iterator;"},
{"lineNum":"  497","line":"    template <class, class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS unordered_map;"},
{"lineNum":"  498","line":"    template <class, class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS unordered_multimap;"},
{"lineNum":"  499","line":"};"},
{"lineNum":"  500","line":""},
{"lineNum":"  501","line":"template <class _NodePtr>"},
{"lineNum":"  502","line":"class _LIBCPP_TEMPLATE_VIS __hash_local_iterator"},
{"lineNum":"  503","line":"{"},
{"lineNum":"  504","line":"    typedef __hash_node_types<_NodePtr> _NodeTypes;"},
{"lineNum":"  505","line":"    typedef _NodePtr                            __node_pointer;"},
{"lineNum":"  506","line":"    typedef typename _NodeTypes::__next_pointer __next_pointer;"},
{"lineNum":"  507","line":""},
{"lineNum":"  508","line":"    __next_pointer         __node_;"},
{"lineNum":"  509","line":"    size_t                 __bucket_;"},
{"lineNum":"  510","line":"    size_t                 __bucket_count_;"},
{"lineNum":"  511","line":""},
{"lineNum":"  512","line":"public:"},
{"lineNum":"  513","line":"    typedef forward_iterator_tag                                iterator_category;"},
{"lineNum":"  514","line":"    typedef typename _NodeTypes::__node_value_type              value_type;"},
{"lineNum":"  515","line":"    typedef typename _NodeTypes::difference_type                difference_type;"},
{"lineNum":"  516","line":"    typedef value_type&                                         reference;"},
{"lineNum":"  517","line":"    typedef typename _NodeTypes::__node_value_type_pointer      pointer;"},
{"lineNum":"  518","line":""},
{"lineNum":"  519","line":"    _LIBCPP_INLINE_VISIBILITY __hash_local_iterator() _NOEXCEPT : __node_(nullptr) {"},
{"lineNum":"  520","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  521","line":"        __get_db()->__insert_i(this);"},
{"lineNum":"  522","line":"#endif"},
{"lineNum":"  523","line":"    }"},
{"lineNum":"  524","line":""},
{"lineNum":"  525","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  526","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  527","line":"    __hash_local_iterator(const __hash_local_iterator& __i)"},
{"lineNum":"  528","line":"        : __node_(__i.__node_),"},
{"lineNum":"  529","line":"          __bucket_(__i.__bucket_),"},
{"lineNum":"  530","line":"          __bucket_count_(__i.__bucket_count_)"},
{"lineNum":"  531","line":"    {"},
{"lineNum":"  532","line":"        __get_db()->__iterator_copy(this, &__i);"},
{"lineNum":"  533","line":"    }"},
{"lineNum":"  534","line":""},
{"lineNum":"  535","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  536","line":"    ~__hash_local_iterator()"},
{"lineNum":"  537","line":"    {"},
{"lineNum":"  538","line":"        __get_db()->__erase_i(this);"},
{"lineNum":"  539","line":"    }"},
{"lineNum":"  540","line":""},
{"lineNum":"  541","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  542","line":"    __hash_local_iterator& operator=(const __hash_local_iterator& __i)"},
{"lineNum":"  543","line":"    {"},
{"lineNum":"  544","line":"        if (this != &__i)"},
{"lineNum":"  545","line":"        {"},
{"lineNum":"  546","line":"            __get_db()->__iterator_copy(this, &__i);"},
{"lineNum":"  547","line":"            __node_ = __i.__node_;"},
{"lineNum":"  548","line":"            __bucket_ = __i.__bucket_;"},
{"lineNum":"  549","line":"            __bucket_count_ = __i.__bucket_count_;"},
{"lineNum":"  550","line":"        }"},
{"lineNum":"  551","line":"        return *this;"},
{"lineNum":"  552","line":"    }"},
{"lineNum":"  553","line":"#endif // _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  554","line":""},
{"lineNum":"  555","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  556","line":"    reference operator*() const {"},
{"lineNum":"  557","line":"        _LIBCPP_DEBUG_ASSERT(__get_const_db()->__dereferenceable(this),"},
{"lineNum":"  558","line":"                           \"Attempted to dereference a non-dereferenceable unordered container local_iterator\");"},
{"lineNum":"  559","line":"        return __node_->__upcast()->__value_;"},
{"lineNum":"  560","line":"    }"},
{"lineNum":"  561","line":""},
{"lineNum":"  562","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  563","line":"    pointer operator->() const {"},
{"lineNum":"  564","line":"        _LIBCPP_DEBUG_ASSERT(__get_const_db()->__dereferenceable(this),"},
{"lineNum":"  565","line":"                             \"Attempted to dereference a non-dereferenceable unordered container local_iterator\");"},
{"lineNum":"  566","line":"        return pointer_traits<pointer>::pointer_to(__node_->__upcast()->__value_);"},
{"lineNum":"  567","line":"    }"},
{"lineNum":"  568","line":""},
{"lineNum":"  569","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  570","line":"    __hash_local_iterator& operator++() {"},
{"lineNum":"  571","line":"        _LIBCPP_DEBUG_ASSERT(__get_const_db()->__dereferenceable(this),"},
{"lineNum":"  572","line":"                       \"Attempted to increment a non-incrementable unordered container local_iterator\");"},
{"lineNum":"  573","line":"        __node_ = __node_->__next_;"},
{"lineNum":"  574","line":"        if (__node_ != nullptr && __constrain_hash(__node_->__hash(), __bucket_count_) != __bucket_)"},
{"lineNum":"  575","line":"            __node_ = nullptr;"},
{"lineNum":"  576","line":"        return *this;"},
{"lineNum":"  577","line":"    }"},
{"lineNum":"  578","line":""},
{"lineNum":"  579","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  580","line":"    __hash_local_iterator operator++(int)"},
{"lineNum":"  581","line":"    {"},
{"lineNum":"  582","line":"        __hash_local_iterator __t(*this);"},
{"lineNum":"  583","line":"        ++(*this);"},
{"lineNum":"  584","line":"        return __t;"},
{"lineNum":"  585","line":"    }"},
{"lineNum":"  586","line":""},
{"lineNum":"  587","line":"    friend _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  588","line":"    bool operator==(const __hash_local_iterator& __x, const __hash_local_iterator& __y)"},
{"lineNum":"  589","line":"    {"},
{"lineNum":"  590","line":"        return __x.__node_ == __y.__node_;"},
{"lineNum":"  591","line":"    }"},
{"lineNum":"  592","line":"    friend _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  593","line":"    bool operator!=(const __hash_local_iterator& __x, const __hash_local_iterator& __y)"},
{"lineNum":"  594","line":"        {return !(__x == __y);}"},
{"lineNum":"  595","line":""},
{"lineNum":"  596","line":"private:"},
{"lineNum":"  597","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  598","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  599","line":"    __hash_local_iterator(__next_pointer __node, size_t __bucket,"},
{"lineNum":"  600","line":"                          size_t __bucket_count, const void* __c) _NOEXCEPT"},
{"lineNum":"  601","line":"        : __node_(__node),"},
{"lineNum":"  602","line":"          __bucket_(__bucket),"},
{"lineNum":"  603","line":"          __bucket_count_(__bucket_count)"},
{"lineNum":"  604","line":"        {"},
{"lineNum":"  605","line":"            __get_db()->__insert_ic(this, __c);"},
{"lineNum":"  606","line":"            if (__node_ != nullptr)"},
{"lineNum":"  607","line":"                __node_ = __node_->__next_;"},
{"lineNum":"  608","line":"        }"},
{"lineNum":"  609","line":"#else"},
{"lineNum":"  610","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  611","line":"    __hash_local_iterator(__next_pointer __node, size_t __bucket,"},
{"lineNum":"  612","line":"                          size_t __bucket_count) _NOEXCEPT"},
{"lineNum":"  613","line":"        : __node_(__node),"},
{"lineNum":"  614","line":"          __bucket_(__bucket),"},
{"lineNum":"  615","line":"          __bucket_count_(__bucket_count)"},
{"lineNum":"  616","line":"        {"},
{"lineNum":"  617","line":"            if (__node_ != nullptr)"},
{"lineNum":"  618","line":"                __node_ = __node_->__next_;"},
{"lineNum":"  619","line":"        }"},
{"lineNum":"  620","line":"#endif"},
{"lineNum":"  621","line":"    template <class, class, class, class> friend class __hash_table;"},
{"lineNum":"  622","line":"    template <class> friend class _LIBCPP_TEMPLATE_VIS __hash_const_local_iterator;"},
{"lineNum":"  623","line":"    template <class> friend class _LIBCPP_TEMPLATE_VIS __hash_map_iterator;"},
{"lineNum":"  624","line":"};"},
{"lineNum":"  625","line":""},
{"lineNum":"  626","line":"template <class _ConstNodePtr>"},
{"lineNum":"  627","line":"class _LIBCPP_TEMPLATE_VIS __hash_const_local_iterator"},
{"lineNum":"  628","line":"{"},
{"lineNum":"  629","line":"    typedef __hash_node_types<_ConstNodePtr> _NodeTypes;"},
{"lineNum":"  630","line":"    typedef _ConstNodePtr                       __node_pointer;"},
{"lineNum":"  631","line":"    typedef typename _NodeTypes::__next_pointer __next_pointer;"},
{"lineNum":"  632","line":""},
{"lineNum":"  633","line":"    __next_pointer         __node_;"},
{"lineNum":"  634","line":"    size_t                 __bucket_;"},
{"lineNum":"  635","line":"    size_t                 __bucket_count_;"},
{"lineNum":"  636","line":""},
{"lineNum":"  637","line":"    typedef pointer_traits<__node_pointer>          __pointer_traits;"},
{"lineNum":"  638","line":"    typedef typename __pointer_traits::element_type __node;"},
{"lineNum":"  639","line":"    typedef typename remove_const<__node>::type     __non_const_node;"},
{"lineNum":"  640","line":"    typedef typename __rebind_pointer<__node_pointer, __non_const_node>::type"},
{"lineNum":"  641","line":"        __non_const_node_pointer;"},
{"lineNum":"  642","line":"public:"},
{"lineNum":"  643","line":"    typedef __hash_local_iterator<__non_const_node_pointer>"},
{"lineNum":"  644","line":"                                                    __non_const_iterator;"},
{"lineNum":"  645","line":""},
{"lineNum":"  646","line":"    typedef forward_iterator_tag                                 iterator_category;"},
{"lineNum":"  647","line":"    typedef typename _NodeTypes::__node_value_type               value_type;"},
{"lineNum":"  648","line":"    typedef typename _NodeTypes::difference_type                 difference_type;"},
{"lineNum":"  649","line":"    typedef const value_type&                                    reference;"},
{"lineNum":"  650","line":"    typedef typename _NodeTypes::__const_node_value_type_pointer pointer;"},
{"lineNum":"  651","line":""},
{"lineNum":"  652","line":""},
{"lineNum":"  653","line":"    _LIBCPP_INLINE_VISIBILITY __hash_const_local_iterator() _NOEXCEPT : __node_(nullptr) {"},
{"lineNum":"  654","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  655","line":"        __get_db()->__insert_i(this);"},
{"lineNum":"  656","line":"#endif"},
{"lineNum":"  657","line":"    }"},
{"lineNum":"  658","line":""},
{"lineNum":"  659","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  660","line":"    __hash_const_local_iterator(const __non_const_iterator& __x) _NOEXCEPT"},
{"lineNum":"  661","line":"        : __node_(__x.__node_),"},
{"lineNum":"  662","line":"          __bucket_(__x.__bucket_),"},
{"lineNum":"  663","line":"          __bucket_count_(__x.__bucket_count_)"},
{"lineNum":"  664","line":"    {"},
{"lineNum":"  665","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  666","line":"        __get_db()->__iterator_copy(this, &__x);"},
{"lineNum":"  667","line":"#endif"},
{"lineNum":"  668","line":"    }"},
{"lineNum":"  669","line":""},
{"lineNum":"  670","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  671","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  672","line":"    __hash_const_local_iterator(const __hash_const_local_iterator& __i)"},
{"lineNum":"  673","line":"        : __node_(__i.__node_),"},
{"lineNum":"  674","line":"          __bucket_(__i.__bucket_),"},
{"lineNum":"  675","line":"          __bucket_count_(__i.__bucket_count_)"},
{"lineNum":"  676","line":"    {"},
{"lineNum":"  677","line":"        __get_db()->__iterator_copy(this, &__i);"},
{"lineNum":"  678","line":"    }"},
{"lineNum":"  679","line":""},
{"lineNum":"  680","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  681","line":"    ~__hash_const_local_iterator()"},
{"lineNum":"  682","line":"    {"},
{"lineNum":"  683","line":"        __get_db()->__erase_i(this);"},
{"lineNum":"  684","line":"    }"},
{"lineNum":"  685","line":""},
{"lineNum":"  686","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  687","line":"    __hash_const_local_iterator& operator=(const __hash_const_local_iterator& __i)"},
{"lineNum":"  688","line":"    {"},
{"lineNum":"  689","line":"        if (this != &__i)"},
{"lineNum":"  690","line":"        {"},
{"lineNum":"  691","line":"            __get_db()->__iterator_copy(this, &__i);"},
{"lineNum":"  692","line":"            __node_ = __i.__node_;"},
{"lineNum":"  693","line":"            __bucket_ = __i.__bucket_;"},
{"lineNum":"  694","line":"            __bucket_count_ = __i.__bucket_count_;"},
{"lineNum":"  695","line":"        }"},
{"lineNum":"  696","line":"        return *this;"},
{"lineNum":"  697","line":"    }"},
{"lineNum":"  698","line":"#endif // _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  699","line":""},
{"lineNum":"  700","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  701","line":"    reference operator*() const {"},
{"lineNum":"  702","line":"        _LIBCPP_DEBUG_ASSERT(__get_const_db()->__dereferenceable(this),"},
{"lineNum":"  703","line":"                           \"Attempted to dereference a non-dereferenceable unordered container const_local_iterator\");"},
{"lineNum":"  704","line":"        return __node_->__upcast()->__value_;"},
{"lineNum":"  705","line":"    }"},
{"lineNum":"  706","line":""},
{"lineNum":"  707","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  708","line":"    pointer operator->() const {"},
{"lineNum":"  709","line":"        _LIBCPP_DEBUG_ASSERT(__get_const_db()->__dereferenceable(this),"},
{"lineNum":"  710","line":"                           \"Attempted to dereference a non-dereferenceable unordered container const_local_iterator\");"},
{"lineNum":"  711","line":"        return pointer_traits<pointer>::pointer_to(__node_->__upcast()->__value_);"},
{"lineNum":"  712","line":"    }"},
{"lineNum":"  713","line":""},
{"lineNum":"  714","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  715","line":"    __hash_const_local_iterator& operator++() {"},
{"lineNum":"  716","line":"        _LIBCPP_DEBUG_ASSERT(__get_const_db()->__dereferenceable(this),"},
{"lineNum":"  717","line":"                       \"Attempted to increment a non-incrementable unordered container const_local_iterator\");"},
{"lineNum":"  718","line":"        __node_ = __node_->__next_;"},
{"lineNum":"  719","line":"        if (__node_ != nullptr && __constrain_hash(__node_->__hash(), __bucket_count_) != __bucket_)"},
{"lineNum":"  720","line":"            __node_ = nullptr;"},
{"lineNum":"  721","line":"        return *this;"},
{"lineNum":"  722","line":"    }"},
{"lineNum":"  723","line":""},
{"lineNum":"  724","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  725","line":"    __hash_const_local_iterator operator++(int)"},
{"lineNum":"  726","line":"    {"},
{"lineNum":"  727","line":"        __hash_const_local_iterator __t(*this);"},
{"lineNum":"  728","line":"        ++(*this);"},
{"lineNum":"  729","line":"        return __t;"},
{"lineNum":"  730","line":"    }"},
{"lineNum":"  731","line":""},
{"lineNum":"  732","line":"    friend _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  733","line":"    bool operator==(const __hash_const_local_iterator& __x, const __hash_const_local_iterator& __y)"},
{"lineNum":"  734","line":"    {"},
{"lineNum":"  735","line":"        return __x.__node_ == __y.__node_;"},
{"lineNum":"  736","line":"    }"},
{"lineNum":"  737","line":"    friend _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  738","line":"    bool operator!=(const __hash_const_local_iterator& __x, const __hash_const_local_iterator& __y)"},
{"lineNum":"  739","line":"        {return !(__x == __y);}"},
{"lineNum":"  740","line":""},
{"lineNum":"  741","line":"private:"},
{"lineNum":"  742","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  743","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  744","line":"    __hash_const_local_iterator(__next_pointer __node_ptr, size_t __bucket,"},
{"lineNum":"  745","line":"                                size_t __bucket_count, const void* __c) _NOEXCEPT"},
{"lineNum":"  746","line":"        : __node_(__node_ptr),"},
{"lineNum":"  747","line":"          __bucket_(__bucket),"},
{"lineNum":"  748","line":"          __bucket_count_(__bucket_count)"},
{"lineNum":"  749","line":"        {"},
{"lineNum":"  750","line":"            __get_db()->__insert_ic(this, __c);"},
{"lineNum":"  751","line":"            if (__node_ != nullptr)"},
{"lineNum":"  752","line":"                __node_ = __node_->__next_;"},
{"lineNum":"  753","line":"        }"},
{"lineNum":"  754","line":"#else"},
{"lineNum":"  755","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  756","line":"    __hash_const_local_iterator(__next_pointer __node_ptr, size_t __bucket,"},
{"lineNum":"  757","line":"                                size_t __bucket_count) _NOEXCEPT"},
{"lineNum":"  758","line":"        : __node_(__node_ptr),"},
{"lineNum":"  759","line":"          __bucket_(__bucket),"},
{"lineNum":"  760","line":"          __bucket_count_(__bucket_count)"},
{"lineNum":"  761","line":"        {"},
{"lineNum":"  762","line":"            if (__node_ != nullptr)"},
{"lineNum":"  763","line":"                __node_ = __node_->__next_;"},
{"lineNum":"  764","line":"        }"},
{"lineNum":"  765","line":"#endif"},
{"lineNum":"  766","line":"    template <class, class, class, class> friend class __hash_table;"},
{"lineNum":"  767","line":"    template <class> friend class _LIBCPP_TEMPLATE_VIS __hash_map_const_iterator;"},
{"lineNum":"  768","line":"};"},
{"lineNum":"  769","line":""},
{"lineNum":"  770","line":"template <class _Alloc>"},
{"lineNum":"  771","line":"class __bucket_list_deallocator"},
{"lineNum":"  772","line":"{"},
{"lineNum":"  773","line":"    typedef _Alloc                                          allocator_type;"},
{"lineNum":"  774","line":"    typedef allocator_traits<allocator_type>                __alloc_traits;"},
{"lineNum":"  775","line":"    typedef typename __alloc_traits::size_type              size_type;"},
{"lineNum":"  776","line":""},
{"lineNum":"  777","line":"    __compressed_pair<size_type, allocator_type> __data_;"},
{"lineNum":"  778","line":"public:"},
{"lineNum":"  779","line":"    typedef typename __alloc_traits::pointer pointer;"},
{"lineNum":"  780","line":""},
{"lineNum":"  781","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  782","line":"    __bucket_list_deallocator()"},
{"lineNum":"  783","line":"        _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value)"},
{"lineNum":"  784","line":"        : __data_(0, __default_init_tag()) {}"},
{"lineNum":"  785","line":""},
{"lineNum":"  786","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  787","line":"    __bucket_list_deallocator(const allocator_type& __a, size_type __size)"},
{"lineNum":"  788","line":"        _NOEXCEPT_(is_nothrow_copy_constructible<allocator_type>::value)"},
{"lineNum":"  789","line":"        : __data_(__size, __a) {}"},
{"lineNum":"  790","line":""},
{"lineNum":"  791","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  792","line":"    __bucket_list_deallocator(__bucket_list_deallocator&& __x)"},
{"lineNum":"  793","line":"        _NOEXCEPT_(is_nothrow_move_constructible<allocator_type>::value)"},
{"lineNum":"  794","line":"        : __data_(_VSTD::move(__x.__data_))","class":"linePartCov","hits":"1","order":"106","possible_hits":"28",},
{"lineNum":"  795","line":"    {"},
{"lineNum":"  796","line":"        __x.size() = 0;","class":"linePartCov","hits":"1","order":"107","possible_hits":"4",},
{"lineNum":"  797","line":"    }"},
{"lineNum":"  798","line":""},
{"lineNum":"  799","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  800","line":"    size_type& size() _NOEXCEPT {return __data_.first();}"},
{"lineNum":"  801","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  802","line":"    size_type  size() const _NOEXCEPT {return __data_.first();}","class":"linePartCov","hits":"17","order":"117","possible_hits":"433",},
{"lineNum":"  803","line":""},
{"lineNum":"  804","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  805","line":"    allocator_type& __alloc() _NOEXCEPT {return __data_.second();}"},
{"lineNum":"  806","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  807","line":"    const allocator_type& __alloc() const _NOEXCEPT {return __data_.second();}"},
{"lineNum":"  808","line":""},
{"lineNum":"  809","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  810","line":"    void operator()(pointer __p) _NOEXCEPT"},
{"lineNum":"  811","line":"    {"},
{"lineNum":"  812","line":"        __alloc_traits::deallocate(__alloc(), __p, size());"},
{"lineNum":"  813","line":"    }"},
{"lineNum":"  814","line":"};"},
{"lineNum":"  815","line":""},
{"lineNum":"  816","line":"template <class _Alloc> class __hash_map_node_destructor;"},
{"lineNum":"  817","line":""},
{"lineNum":"  818","line":"template <class _Alloc>"},
{"lineNum":"  819","line":"class __hash_node_destructor"},
{"lineNum":"  820","line":"{"},
{"lineNum":"  821","line":"    typedef _Alloc                                          allocator_type;"},
{"lineNum":"  822","line":"    typedef allocator_traits<allocator_type>                __alloc_traits;"},
{"lineNum":"  823","line":""},
{"lineNum":"  824","line":"public:"},
{"lineNum":"  825","line":"    typedef typename __alloc_traits::pointer                pointer;"},
{"lineNum":"  826","line":"private:"},
{"lineNum":"  827","line":"    typedef __hash_node_types<pointer> _NodeTypes;"},
{"lineNum":"  828","line":""},
{"lineNum":"  829","line":"    allocator_type& __na_;"},
{"lineNum":"  830","line":""},
{"lineNum":"  831","line":"public:"},
{"lineNum":"  832","line":"    bool __value_constructed;"},
{"lineNum":"  833","line":""},
{"lineNum":"  834","line":"    __hash_node_destructor(__hash_node_destructor const&) = default;"},
{"lineNum":"  835","line":"    __hash_node_destructor& operator=(const __hash_node_destructor&) = delete;"},
{"lineNum":"  836","line":""},
{"lineNum":"  837","line":""},
{"lineNum":"  838","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  839","line":"    explicit __hash_node_destructor(allocator_type& __na,"},
{"lineNum":"  840","line":"                                    bool __constructed = false) _NOEXCEPT"},
{"lineNum":"  841","line":"        : __na_(__na),"},
{"lineNum":"  842","line":"          __value_constructed(__constructed)"},
{"lineNum":"  843","line":"        {}"},
{"lineNum":"  844","line":""},
{"lineNum":"  845","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  846","line":"    void operator()(pointer __p) _NOEXCEPT"},
{"lineNum":"  847","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  848","line":"        if (__value_constructed)","class":"lineNoCov","hits":"0","possible_hits":"46",},
{"lineNum":"  849","line":"            __alloc_traits::destroy(__na_, _NodeTypes::__get_ptr(__p->__value_));","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  850","line":"        if (__p)","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  851","line":"            __alloc_traits::deallocate(__na_, __p, 1);","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  852","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"15",},
{"lineNum":"  853","line":""},
{"lineNum":"  854","line":"    template <class> friend class __hash_map_node_destructor;"},
{"lineNum":"  855","line":"};"},
{"lineNum":"  856","line":""},
{"lineNum":"  857","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":"  858","line":"template <class _NodeType, class _Alloc>"},
{"lineNum":"  859","line":"struct __generic_container_node_destructor;"},
{"lineNum":"  860","line":""},
{"lineNum":"  861","line":"template <class _Tp, class _VoidPtr, class _Alloc>"},
{"lineNum":"  862","line":"struct __generic_container_node_destructor<__hash_node<_Tp, _VoidPtr>, _Alloc>"},
{"lineNum":"  863","line":"    : __hash_node_destructor<_Alloc>"},
{"lineNum":"  864","line":"{"},
{"lineNum":"  865","line":"    using __hash_node_destructor<_Alloc>::__hash_node_destructor;"},
{"lineNum":"  866","line":"};"},
{"lineNum":"  867","line":"#endif"},
{"lineNum":"  868","line":""},
{"lineNum":"  869","line":"template <class _Key, class _Hash, class _Equal>"},
{"lineNum":"  870","line":"struct __enforce_unordered_container_requirements {"},
{"lineNum":"  871","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  872","line":"    static_assert(__check_hash_requirements<_Key, _Hash>::value,"},
{"lineNum":"  873","line":"    \"the specified hash does not meet the Hash requirements\");"},
{"lineNum":"  874","line":"    static_assert(is_copy_constructible<_Equal>::value,"},
{"lineNum":"  875","line":"    \"the specified comparator is required to be copy constructible\");"},
{"lineNum":"  876","line":"#endif"},
{"lineNum":"  877","line":"    typedef int type;"},
{"lineNum":"  878","line":"};"},
{"lineNum":"  879","line":""},
{"lineNum":"  880","line":"template <class _Key, class _Hash, class _Equal>"},
{"lineNum":"  881","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  882","line":"    _LIBCPP_DIAGNOSE_WARNING(!__invokable<_Equal const&, _Key const&, _Key const&>::value,"},
{"lineNum":"  883","line":"    \"the specified comparator type does not provide a viable const call operator\")"},
{"lineNum":"  884","line":"    _LIBCPP_DIAGNOSE_WARNING(!__invokable<_Hash const&, _Key const&>::value,"},
{"lineNum":"  885","line":"    \"the specified hash functor does not provide a viable const call operator\")"},
{"lineNum":"  886","line":"#endif"},
{"lineNum":"  887","line":"typename __enforce_unordered_container_requirements<_Key, _Hash, _Equal>::type"},
{"lineNum":"  888","line":"__diagnose_unordered_container_requirements(int);"},
{"lineNum":"  889","line":""},
{"lineNum":"  890","line":"// This dummy overload is used so that the compiler won\'t emit a spurious"},
{"lineNum":"  891","line":"// \"no matching function for call to __diagnose_unordered_xxx\" diagnostic"},
{"lineNum":"  892","line":"// when the overload above causes a hard error."},
{"lineNum":"  893","line":"template <class _Key, class _Hash, class _Equal>"},
{"lineNum":"  894","line":"int __diagnose_unordered_container_requirements(void*);"},
{"lineNum":"  895","line":""},
{"lineNum":"  896","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":"  897","line":"class __hash_table"},
{"lineNum":"  898","line":"{"},
{"lineNum":"  899","line":"public:"},
{"lineNum":"  900","line":"    typedef _Tp    value_type;"},
{"lineNum":"  901","line":"    typedef _Hash  hasher;"},
{"lineNum":"  902","line":"    typedef _Equal key_equal;"},
{"lineNum":"  903","line":"    typedef _Alloc allocator_type;"},
{"lineNum":"  904","line":""},
{"lineNum":"  905","line":"private:"},
{"lineNum":"  906","line":"    typedef allocator_traits<allocator_type> __alloc_traits;"},
{"lineNum":"  907","line":"    typedef typename"},
{"lineNum":"  908","line":"      __make_hash_node_types<value_type, typename __alloc_traits::void_pointer>::type"},
{"lineNum":"  909","line":"                                                                     _NodeTypes;"},
{"lineNum":"  910","line":"public:"},
{"lineNum":"  911","line":""},
{"lineNum":"  912","line":"    typedef typename _NodeTypes::__node_value_type           __node_value_type;"},
{"lineNum":"  913","line":"    typedef typename _NodeTypes::__container_value_type      __container_value_type;"},
{"lineNum":"  914","line":"    typedef typename _NodeTypes::key_type                    key_type;"},
{"lineNum":"  915","line":"    typedef value_type&                              reference;"},
{"lineNum":"  916","line":"    typedef const value_type&                        const_reference;"},
{"lineNum":"  917","line":"    typedef typename __alloc_traits::pointer         pointer;"},
{"lineNum":"  918","line":"    typedef typename __alloc_traits::const_pointer   const_pointer;"},
{"lineNum":"  919","line":"#ifndef _LIBCPP_ABI_FIX_UNORDERED_CONTAINER_SIZE_TYPE"},
{"lineNum":"  920","line":"    typedef typename __alloc_traits::size_type       size_type;"},
{"lineNum":"  921","line":"#else"},
{"lineNum":"  922","line":"    typedef typename _NodeTypes::size_type           size_type;"},
{"lineNum":"  923","line":"#endif"},
{"lineNum":"  924","line":"    typedef typename _NodeTypes::difference_type     difference_type;"},
{"lineNum":"  925","line":"public:"},
{"lineNum":"  926","line":"    // Create __node"},
{"lineNum":"  927","line":""},
{"lineNum":"  928","line":"    typedef typename _NodeTypes::__node_type __node;"},
{"lineNum":"  929","line":"    typedef typename __rebind_alloc_helper<__alloc_traits, __node>::type __node_allocator;"},
{"lineNum":"  930","line":"    typedef allocator_traits<__node_allocator>       __node_traits;"},
{"lineNum":"  931","line":"    typedef typename _NodeTypes::__void_pointer      __void_pointer;"},
{"lineNum":"  932","line":"    typedef typename _NodeTypes::__node_pointer      __node_pointer;"},
{"lineNum":"  933","line":"    typedef typename _NodeTypes::__node_pointer      __node_const_pointer;"},
{"lineNum":"  934","line":"    typedef typename _NodeTypes::__node_base_type    __first_node;"},
{"lineNum":"  935","line":"    typedef typename _NodeTypes::__node_base_pointer __node_base_pointer;"},
{"lineNum":"  936","line":"    typedef typename _NodeTypes::__next_pointer      __next_pointer;"},
{"lineNum":"  937","line":""},
{"lineNum":"  938","line":"private:"},
{"lineNum":"  939","line":"    // check for sane allocator pointer rebinding semantics. Rebinding the"},
{"lineNum":"  940","line":"    // allocator for a new pointer type should be exactly the same as rebinding"},
{"lineNum":"  941","line":"    // the pointer using \'pointer_traits\'."},
{"lineNum":"  942","line":"    static_assert((is_same<__node_pointer, typename __node_traits::pointer>::value),"},
{"lineNum":"  943","line":"                  \"Allocator does not rebind pointers in a sane manner.\");"},
{"lineNum":"  944","line":"    typedef typename __rebind_alloc_helper<__node_traits, __first_node>::type"},
{"lineNum":"  945","line":"        __node_base_allocator;"},
{"lineNum":"  946","line":"    typedef allocator_traits<__node_base_allocator> __node_base_traits;"},
{"lineNum":"  947","line":"    static_assert((is_same<__node_base_pointer, typename __node_base_traits::pointer>::value),"},
{"lineNum":"  948","line":"                 \"Allocator does not rebind pointers in a sane manner.\");"},
{"lineNum":"  949","line":""},
{"lineNum":"  950","line":"private:"},
{"lineNum":"  951","line":""},
{"lineNum":"  952","line":"    typedef typename __rebind_alloc_helper<__node_traits, __next_pointer>::type __pointer_allocator;"},
{"lineNum":"  953","line":"    typedef __bucket_list_deallocator<__pointer_allocator> __bucket_list_deleter;"},
{"lineNum":"  954","line":"    typedef unique_ptr<__next_pointer[], __bucket_list_deleter> __bucket_list;"},
{"lineNum":"  955","line":"    typedef allocator_traits<__pointer_allocator>          __pointer_alloc_traits;"},
{"lineNum":"  956","line":"    typedef typename __bucket_list_deleter::pointer       __node_pointer_pointer;"},
{"lineNum":"  957","line":""},
{"lineNum":"  958","line":"    // --- Member data begin ---"},
{"lineNum":"  959","line":"    __bucket_list                                         __bucket_list_;"},
{"lineNum":"  960","line":"    __compressed_pair<__first_node, __node_allocator>     __p1_;"},
{"lineNum":"  961","line":"    __compressed_pair<size_type, hasher>                  __p2_;"},
{"lineNum":"  962","line":"    __compressed_pair<float, key_equal>                   __p3_;"},
{"lineNum":"  963","line":"    // --- Member data end ---"},
{"lineNum":"  964","line":""},
{"lineNum":"  965","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  966","line":"    size_type& size() _NOEXCEPT {return __p2_.first();}"},
{"lineNum":"  967","line":"public:"},
{"lineNum":"  968","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  969","line":"    size_type  size() const _NOEXCEPT {return __p2_.first();}"},
{"lineNum":"  970","line":""},
{"lineNum":"  971","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  972","line":"    hasher& hash_function() _NOEXCEPT {return __p2_.second();}"},
{"lineNum":"  973","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  974","line":"    const hasher& hash_function() const _NOEXCEPT {return __p2_.second();}"},
{"lineNum":"  975","line":""},
{"lineNum":"  976","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  977","line":"    float& max_load_factor() _NOEXCEPT {return __p3_.first();}"},
{"lineNum":"  978","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  979","line":"    float  max_load_factor() const _NOEXCEPT {return __p3_.first();}"},
{"lineNum":"  980","line":""},
{"lineNum":"  981","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  982","line":"    key_equal& key_eq() _NOEXCEPT {return __p3_.second();}"},
{"lineNum":"  983","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  984","line":"    const key_equal& key_eq() const _NOEXCEPT {return __p3_.second();}"},
{"lineNum":"  985","line":""},
{"lineNum":"  986","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  987","line":"    __node_allocator& __node_alloc() _NOEXCEPT {return __p1_.second();}","class":"linePartCov","hits":"4","order":"121","possible_hits":"31",},
{"lineNum":"  988","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  989","line":"    const __node_allocator& __node_alloc() const _NOEXCEPT"},
{"lineNum":"  990","line":"        {return __p1_.second();}"},
{"lineNum":"  991","line":""},
{"lineNum":"  992","line":"public:"},
{"lineNum":"  993","line":"    typedef __hash_iterator<__node_pointer>                   iterator;"},
{"lineNum":"  994","line":"    typedef __hash_const_iterator<__node_pointer>             const_iterator;"},
{"lineNum":"  995","line":"    typedef __hash_local_iterator<__node_pointer>             local_iterator;"},
{"lineNum":"  996","line":"    typedef __hash_const_local_iterator<__node_pointer>       const_local_iterator;"},
{"lineNum":"  997","line":""},
{"lineNum":"  998","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  999","line":"    __hash_table()"},
{"lineNum":" 1000","line":"        _NOEXCEPT_("},
{"lineNum":" 1001","line":"            is_nothrow_default_constructible<__bucket_list>::value &&"},
{"lineNum":" 1002","line":"            is_nothrow_default_constructible<__first_node>::value &&"},
{"lineNum":" 1003","line":"            is_nothrow_default_constructible<__node_allocator>::value &&"},
{"lineNum":" 1004","line":"            is_nothrow_default_constructible<hasher>::value &&"},
{"lineNum":" 1005","line":"            is_nothrow_default_constructible<key_equal>::value);"},
{"lineNum":" 1006","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1007","line":"    __hash_table(const hasher& __hf, const key_equal& __eql);"},
{"lineNum":" 1008","line":"    __hash_table(const hasher& __hf, const key_equal& __eql,"},
{"lineNum":" 1009","line":"                 const allocator_type& __a);"},
{"lineNum":" 1010","line":"    explicit __hash_table(const allocator_type& __a);"},
{"lineNum":" 1011","line":"    __hash_table(const __hash_table& __u);"},
{"lineNum":" 1012","line":"    __hash_table(const __hash_table& __u, const allocator_type& __a);"},
{"lineNum":" 1013","line":"    __hash_table(__hash_table&& __u)"},
{"lineNum":" 1014","line":"        _NOEXCEPT_("},
{"lineNum":" 1015","line":"            is_nothrow_move_constructible<__bucket_list>::value &&"},
{"lineNum":" 1016","line":"            is_nothrow_move_constructible<__first_node>::value &&"},
{"lineNum":" 1017","line":"            is_nothrow_move_constructible<__node_allocator>::value &&"},
{"lineNum":" 1018","line":"            is_nothrow_move_constructible<hasher>::value &&"},
{"lineNum":" 1019","line":"            is_nothrow_move_constructible<key_equal>::value);"},
{"lineNum":" 1020","line":"    __hash_table(__hash_table&& __u, const allocator_type& __a);"},
{"lineNum":" 1021","line":"    ~__hash_table();"},
{"lineNum":" 1022","line":""},
{"lineNum":" 1023","line":"    __hash_table& operator=(const __hash_table& __u);"},
{"lineNum":" 1024","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1025","line":"    __hash_table& operator=(__hash_table&& __u)"},
{"lineNum":" 1026","line":"        _NOEXCEPT_("},
{"lineNum":" 1027","line":"            __node_traits::propagate_on_container_move_assignment::value &&"},
{"lineNum":" 1028","line":"            is_nothrow_move_assignable<__node_allocator>::value &&"},
{"lineNum":" 1029","line":"            is_nothrow_move_assignable<hasher>::value &&"},
{"lineNum":" 1030","line":"            is_nothrow_move_assignable<key_equal>::value);"},
{"lineNum":" 1031","line":"    template <class _InputIterator>"},
{"lineNum":" 1032","line":"        void __assign_unique(_InputIterator __first, _InputIterator __last);"},
{"lineNum":" 1033","line":"    template <class _InputIterator>"},
{"lineNum":" 1034","line":"        void __assign_multi(_InputIterator __first, _InputIterator __last);"},
{"lineNum":" 1035","line":""},
{"lineNum":" 1036","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1037","line":"    size_type max_size() const _NOEXCEPT"},
{"lineNum":" 1038","line":"    {"},
{"lineNum":" 1039","line":"        return _VSTD::min<size_type>("},
{"lineNum":" 1040","line":"            __node_traits::max_size(__node_alloc()),"},
{"lineNum":" 1041","line":"            numeric_limits<difference_type >::max()"},
{"lineNum":" 1042","line":"        );"},
{"lineNum":" 1043","line":"    }"},
{"lineNum":" 1044","line":""},
{"lineNum":" 1045","line":"private:"},
{"lineNum":" 1046","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1047","line":"    __next_pointer __node_insert_multi_prepare(size_t __cp_hash,"},
{"lineNum":" 1048","line":"                                               value_type& __cp_val);"},
{"lineNum":" 1049","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1050","line":"    void __node_insert_multi_perform(__node_pointer __cp,"},
{"lineNum":" 1051","line":"                                     __next_pointer __pn) _NOEXCEPT;"},
{"lineNum":" 1052","line":""},
{"lineNum":" 1053","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1054","line":"    __next_pointer __node_insert_unique_prepare(size_t __nd_hash,"},
{"lineNum":" 1055","line":"                                                value_type& __nd_val);"},
{"lineNum":" 1056","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1057","line":"    void __node_insert_unique_perform(__node_pointer __ptr) _NOEXCEPT;"},
{"lineNum":" 1058","line":""},
{"lineNum":" 1059","line":"public:"},
{"lineNum":" 1060","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1061","line":"    pair<iterator, bool> __node_insert_unique(__node_pointer __nd);"},
{"lineNum":" 1062","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1063","line":"    iterator             __node_insert_multi(__node_pointer __nd);"},
{"lineNum":" 1064","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1065","line":"    iterator             __node_insert_multi(const_iterator __p,"},
{"lineNum":" 1066","line":"                                             __node_pointer __nd);"},
{"lineNum":" 1067","line":""},
{"lineNum":" 1068","line":"    template <class _Key, class ..._Args>"},
{"lineNum":" 1069","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1070","line":"    pair<iterator, bool> __emplace_unique_key_args(_Key const& __k, _Args&&... __args);"},
{"lineNum":" 1071","line":""},
{"lineNum":" 1072","line":"    template <class... _Args>"},
{"lineNum":" 1073","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1074","line":"    pair<iterator, bool> __emplace_unique_impl(_Args&&... __args);"},
{"lineNum":" 1075","line":""},
{"lineNum":" 1076","line":"    template <class _Pp>"},
{"lineNum":" 1077","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1078","line":"    pair<iterator, bool> __emplace_unique(_Pp&& __x) {"},
{"lineNum":" 1079","line":"      return __emplace_unique_extract_key(_VSTD::forward<_Pp>(__x),"},
{"lineNum":" 1080","line":"                                          __can_extract_key<_Pp, key_type>());"},
{"lineNum":" 1081","line":"    }"},
{"lineNum":" 1082","line":""},
{"lineNum":" 1083","line":"    template <class _First, class _Second>"},
{"lineNum":" 1084","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1085","line":"    typename enable_if<"},
{"lineNum":" 1086","line":"        __can_extract_map_key<_First, key_type, __container_value_type>::value,"},
{"lineNum":" 1087","line":"        pair<iterator, bool>"},
{"lineNum":" 1088","line":"    >::type __emplace_unique(_First&& __f, _Second&& __s) {"},
{"lineNum":" 1089","line":"        return __emplace_unique_key_args(__f, _VSTD::forward<_First>(__f),"},
{"lineNum":" 1090","line":"                                              _VSTD::forward<_Second>(__s));"},
{"lineNum":" 1091","line":"    }"},
{"lineNum":" 1092","line":""},
{"lineNum":" 1093","line":"    template <class... _Args>"},
{"lineNum":" 1094","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1095","line":"    pair<iterator, bool> __emplace_unique(_Args&&... __args) {"},
{"lineNum":" 1096","line":"      return __emplace_unique_impl(_VSTD::forward<_Args>(__args)...);"},
{"lineNum":" 1097","line":"    }"},
{"lineNum":" 1098","line":""},
{"lineNum":" 1099","line":"    template <class _Pp>"},
{"lineNum":" 1100","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1101","line":"    pair<iterator, bool>"},
{"lineNum":" 1102","line":"    __emplace_unique_extract_key(_Pp&& __x, __extract_key_fail_tag) {"},
{"lineNum":" 1103","line":"      return __emplace_unique_impl(_VSTD::forward<_Pp>(__x));"},
{"lineNum":" 1104","line":"    }"},
{"lineNum":" 1105","line":"    template <class _Pp>"},
{"lineNum":" 1106","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1107","line":"    pair<iterator, bool>"},
{"lineNum":" 1108","line":"    __emplace_unique_extract_key(_Pp&& __x, __extract_key_self_tag) {"},
{"lineNum":" 1109","line":"      return __emplace_unique_key_args(__x, _VSTD::forward<_Pp>(__x));"},
{"lineNum":" 1110","line":"    }"},
{"lineNum":" 1111","line":"    template <class _Pp>"},
{"lineNum":" 1112","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1113","line":"    pair<iterator, bool>"},
{"lineNum":" 1114","line":"    __emplace_unique_extract_key(_Pp&& __x, __extract_key_first_tag) {"},
{"lineNum":" 1115","line":"      return __emplace_unique_key_args(__x.first, _VSTD::forward<_Pp>(__x));"},
{"lineNum":" 1116","line":"    }"},
{"lineNum":" 1117","line":""},
{"lineNum":" 1118","line":"    template <class... _Args>"},
{"lineNum":" 1119","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1120","line":"    iterator __emplace_multi(_Args&&... __args);"},
{"lineNum":" 1121","line":"    template <class... _Args>"},
{"lineNum":" 1122","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1123","line":"    iterator __emplace_hint_multi(const_iterator __p, _Args&&... __args);"},
{"lineNum":" 1124","line":""},
{"lineNum":" 1125","line":""},
{"lineNum":" 1126","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1127","line":"    pair<iterator, bool>"},
{"lineNum":" 1128","line":"    __insert_unique(__container_value_type&& __x) {"},
{"lineNum":" 1129","line":"      return __emplace_unique_key_args(_NodeTypes::__get_key(__x), _VSTD::move(__x));","class":"linePartCov","hits":"22","order":"113","possible_hits":"146",},
{"lineNum":" 1130","line":"    }"},
{"lineNum":" 1131","line":""},
{"lineNum":" 1132","line":"    template <class _Pp, class = typename enable_if<"},
{"lineNum":" 1133","line":"            !__is_same_uncvref<_Pp, __container_value_type>::value"},
{"lineNum":" 1134","line":"        >::type>"},
{"lineNum":" 1135","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1136","line":"    pair<iterator, bool> __insert_unique(_Pp&& __x) {"},
{"lineNum":" 1137","line":"      return __emplace_unique(_VSTD::forward<_Pp>(__x));"},
{"lineNum":" 1138","line":"    }"},
{"lineNum":" 1139","line":""},
{"lineNum":" 1140","line":"    template <class _Pp>"},
{"lineNum":" 1141","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1142","line":"    iterator __insert_multi(_Pp&& __x) {"},
{"lineNum":" 1143","line":"      return __emplace_multi(_VSTD::forward<_Pp>(__x));"},
{"lineNum":" 1144","line":"    }"},
{"lineNum":" 1145","line":""},
{"lineNum":" 1146","line":"    template <class _Pp>"},
{"lineNum":" 1147","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1148","line":"    iterator __insert_multi(const_iterator __p, _Pp&& __x) {"},
{"lineNum":" 1149","line":"        return __emplace_hint_multi(__p, _VSTD::forward<_Pp>(__x));"},
{"lineNum":" 1150","line":"    }"},
{"lineNum":" 1151","line":""},
{"lineNum":" 1152","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1153","line":"    pair<iterator, bool> __insert_unique(const __container_value_type& __x) {"},
{"lineNum":" 1154","line":"        return __emplace_unique_key_args(_NodeTypes::__get_key(__x), __x);","class":"lineNoCov","hits":"0","possible_hits":"42",},
{"lineNum":" 1155","line":"    }"},
{"lineNum":" 1156","line":""},
{"lineNum":" 1157","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 1158","line":"    template <class _NodeHandle, class _InsertReturnType>"},
{"lineNum":" 1159","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1160","line":"    _InsertReturnType __node_handle_insert_unique(_NodeHandle&& __nh);"},
{"lineNum":" 1161","line":"    template <class _NodeHandle>"},
{"lineNum":" 1162","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1163","line":"    iterator __node_handle_insert_unique(const_iterator __hint,"},
{"lineNum":" 1164","line":"                                         _NodeHandle&& __nh);"},
{"lineNum":" 1165","line":"    template <class _Table>"},
{"lineNum":" 1166","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1167","line":"    void __node_handle_merge_unique(_Table& __source);"},
{"lineNum":" 1168","line":""},
{"lineNum":" 1169","line":"    template <class _NodeHandle>"},
{"lineNum":" 1170","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1171","line":"    iterator __node_handle_insert_multi(_NodeHandle&& __nh);"},
{"lineNum":" 1172","line":"    template <class _NodeHandle>"},
{"lineNum":" 1173","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1174","line":"    iterator __node_handle_insert_multi(const_iterator __hint, _NodeHandle&& __nh);"},
{"lineNum":" 1175","line":"    template <class _Table>"},
{"lineNum":" 1176","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1177","line":"    void __node_handle_merge_multi(_Table& __source);"},
{"lineNum":" 1178","line":""},
{"lineNum":" 1179","line":"    template <class _NodeHandle>"},
{"lineNum":" 1180","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1181","line":"    _NodeHandle __node_handle_extract(key_type const& __key);"},
{"lineNum":" 1182","line":"    template <class _NodeHandle>"},
{"lineNum":" 1183","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1184","line":"    _NodeHandle __node_handle_extract(const_iterator __it);"},
{"lineNum":" 1185","line":"#endif"},
{"lineNum":" 1186","line":""},
{"lineNum":" 1187","line":"    void clear() _NOEXCEPT;"},
{"lineNum":" 1188","line":"    void rehash(size_type __n);"},
{"lineNum":" 1189","line":"    _LIBCPP_INLINE_VISIBILITY void reserve(size_type __n)"},
{"lineNum":" 1190","line":"        {rehash(static_cast<size_type>(ceil(__n / max_load_factor())));}"},
{"lineNum":" 1191","line":""},
{"lineNum":" 1192","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1193","line":"    size_type bucket_count() const _NOEXCEPT"},
{"lineNum":" 1194","line":"    {"},
{"lineNum":" 1195","line":"        return __bucket_list_.get_deleter().size();"},
{"lineNum":" 1196","line":"    }"},
{"lineNum":" 1197","line":""},
{"lineNum":" 1198","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1199","line":"    iterator       begin() _NOEXCEPT;"},
{"lineNum":" 1200","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1201","line":"    iterator       end() _NOEXCEPT;"},
{"lineNum":" 1202","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1203","line":"    const_iterator begin() const _NOEXCEPT;"},
{"lineNum":" 1204","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1205","line":"    const_iterator end() const _NOEXCEPT;"},
{"lineNum":" 1206","line":""},
{"lineNum":" 1207","line":"    template <class _Key>"},
{"lineNum":" 1208","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1209","line":"        size_type bucket(const _Key& __k) const"},
{"lineNum":" 1210","line":"        {"},
{"lineNum":" 1211","line":"            _LIBCPP_ASSERT(bucket_count() > 0,"},
{"lineNum":" 1212","line":"                \"unordered container::bucket(key) called when bucket_count() == 0\");"},
{"lineNum":" 1213","line":"            return __constrain_hash(hash_function()(__k), bucket_count());"},
{"lineNum":" 1214","line":"        }"},
{"lineNum":" 1215","line":""},
{"lineNum":" 1216","line":"    template <class _Key>"},
{"lineNum":" 1217","line":"        iterator       find(const _Key& __x);"},
{"lineNum":" 1218","line":"    template <class _Key>"},
{"lineNum":" 1219","line":"        const_iterator find(const _Key& __x) const;"},
{"lineNum":" 1220","line":""},
{"lineNum":" 1221","line":"    typedef __hash_node_destructor<__node_allocator> _Dp;"},
{"lineNum":" 1222","line":"    typedef unique_ptr<__node, _Dp> __node_holder;"},
{"lineNum":" 1223","line":""},
{"lineNum":" 1224","line":"    iterator erase(const_iterator __p);"},
{"lineNum":" 1225","line":"    iterator erase(const_iterator __first, const_iterator __last);"},
{"lineNum":" 1226","line":"    template <class _Key>"},
{"lineNum":" 1227","line":"        size_type __erase_unique(const _Key& __k);"},
{"lineNum":" 1228","line":"    template <class _Key>"},
{"lineNum":" 1229","line":"        size_type __erase_multi(const _Key& __k);"},
{"lineNum":" 1230","line":"    __node_holder remove(const_iterator __p) _NOEXCEPT;"},
{"lineNum":" 1231","line":""},
{"lineNum":" 1232","line":"    template <class _Key>"},
{"lineNum":" 1233","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1234","line":"        size_type __count_unique(const _Key& __k) const;"},
{"lineNum":" 1235","line":"    template <class _Key>"},
{"lineNum":" 1236","line":"        size_type __count_multi(const _Key& __k) const;"},
{"lineNum":" 1237","line":""},
{"lineNum":" 1238","line":"    template <class _Key>"},
{"lineNum":" 1239","line":"        pair<iterator, iterator>"},
{"lineNum":" 1240","line":"        __equal_range_unique(const _Key& __k);"},
{"lineNum":" 1241","line":"    template <class _Key>"},
{"lineNum":" 1242","line":"        pair<const_iterator, const_iterator>"},
{"lineNum":" 1243","line":"        __equal_range_unique(const _Key& __k) const;"},
{"lineNum":" 1244","line":""},
{"lineNum":" 1245","line":"    template <class _Key>"},
{"lineNum":" 1246","line":"        pair<iterator, iterator>"},
{"lineNum":" 1247","line":"        __equal_range_multi(const _Key& __k);"},
{"lineNum":" 1248","line":"    template <class _Key>"},
{"lineNum":" 1249","line":"        pair<const_iterator, const_iterator>"},
{"lineNum":" 1250","line":"        __equal_range_multi(const _Key& __k) const;"},
{"lineNum":" 1251","line":""},
{"lineNum":" 1252","line":"    void swap(__hash_table& __u)"},
{"lineNum":" 1253","line":"#if _LIBCPP_STD_VER <= 11"},
{"lineNum":" 1254","line":"        _NOEXCEPT_("},
{"lineNum":" 1255","line":"            __is_nothrow_swappable<hasher>::value && __is_nothrow_swappable<key_equal>::value"},
{"lineNum":" 1256","line":"            && (!allocator_traits<__pointer_allocator>::propagate_on_container_swap::value"},
{"lineNum":" 1257","line":"                  || __is_nothrow_swappable<__pointer_allocator>::value)"},
{"lineNum":" 1258","line":"            && (!__node_traits::propagate_on_container_swap::value"},
{"lineNum":" 1259","line":"                  || __is_nothrow_swappable<__node_allocator>::value)"},
{"lineNum":" 1260","line":"            );"},
{"lineNum":" 1261","line":"#else"},
{"lineNum":" 1262","line":"     _NOEXCEPT_(__is_nothrow_swappable<hasher>::value && __is_nothrow_swappable<key_equal>::value);"},
{"lineNum":" 1263","line":"#endif"},
{"lineNum":" 1264","line":""},
{"lineNum":" 1265","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1266","line":"    size_type max_bucket_count() const _NOEXCEPT"},
{"lineNum":" 1267","line":"        {return max_size(); }"},
{"lineNum":" 1268","line":"    size_type bucket_size(size_type __n) const;"},
{"lineNum":" 1269","line":"    _LIBCPP_INLINE_VISIBILITY float load_factor() const _NOEXCEPT"},
{"lineNum":" 1270","line":"    {"},
{"lineNum":" 1271","line":"        size_type __bc = bucket_count();"},
{"lineNum":" 1272","line":"        return __bc != 0 ? (float)size() / __bc : 0.f;"},
{"lineNum":" 1273","line":"    }"},
{"lineNum":" 1274","line":"    _LIBCPP_INLINE_VISIBILITY void max_load_factor(float __mlf) _NOEXCEPT"},
{"lineNum":" 1275","line":"    {"},
{"lineNum":" 1276","line":"        _LIBCPP_ASSERT(__mlf > 0,"},
{"lineNum":" 1277","line":"            \"unordered container::max_load_factor(lf) called with lf <= 0\");"},
{"lineNum":" 1278","line":"        max_load_factor() = _VSTD::max(__mlf, load_factor());"},
{"lineNum":" 1279","line":"    }"},
{"lineNum":" 1280","line":""},
{"lineNum":" 1281","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1282","line":"    local_iterator"},
{"lineNum":" 1283","line":"    begin(size_type __n)"},
{"lineNum":" 1284","line":"    {"},
{"lineNum":" 1285","line":"        _LIBCPP_ASSERT(__n < bucket_count(),"},
{"lineNum":" 1286","line":"            \"unordered container::begin(n) called with n >= bucket_count()\");"},
{"lineNum":" 1287","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1288","line":"        return local_iterator(__bucket_list_[__n], __n, bucket_count(), this);"},
{"lineNum":" 1289","line":"#else"},
{"lineNum":" 1290","line":"        return local_iterator(__bucket_list_[__n], __n, bucket_count());"},
{"lineNum":" 1291","line":"#endif"},
{"lineNum":" 1292","line":"    }"},
{"lineNum":" 1293","line":""},
{"lineNum":" 1294","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1295","line":"    local_iterator"},
{"lineNum":" 1296","line":"    end(size_type __n)"},
{"lineNum":" 1297","line":"    {"},
{"lineNum":" 1298","line":"        _LIBCPP_ASSERT(__n < bucket_count(),"},
{"lineNum":" 1299","line":"            \"unordered container::end(n) called with n >= bucket_count()\");"},
{"lineNum":" 1300","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1301","line":"        return local_iterator(nullptr, __n, bucket_count(), this);"},
{"lineNum":" 1302","line":"#else"},
{"lineNum":" 1303","line":"        return local_iterator(nullptr, __n, bucket_count());"},
{"lineNum":" 1304","line":"#endif"},
{"lineNum":" 1305","line":"    }"},
{"lineNum":" 1306","line":""},
{"lineNum":" 1307","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1308","line":"    const_local_iterator"},
{"lineNum":" 1309","line":"    cbegin(size_type __n) const"},
{"lineNum":" 1310","line":"    {"},
{"lineNum":" 1311","line":"        _LIBCPP_ASSERT(__n < bucket_count(),"},
{"lineNum":" 1312","line":"            \"unordered container::cbegin(n) called with n >= bucket_count()\");"},
{"lineNum":" 1313","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1314","line":"        return const_local_iterator(__bucket_list_[__n], __n, bucket_count(), this);"},
{"lineNum":" 1315","line":"#else"},
{"lineNum":" 1316","line":"        return const_local_iterator(__bucket_list_[__n], __n, bucket_count());"},
{"lineNum":" 1317","line":"#endif"},
{"lineNum":" 1318","line":"    }"},
{"lineNum":" 1319","line":""},
{"lineNum":" 1320","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1321","line":"    const_local_iterator"},
{"lineNum":" 1322","line":"    cend(size_type __n) const"},
{"lineNum":" 1323","line":"    {"},
{"lineNum":" 1324","line":"        _LIBCPP_ASSERT(__n < bucket_count(),"},
{"lineNum":" 1325","line":"            \"unordered container::cend(n) called with n >= bucket_count()\");"},
{"lineNum":" 1326","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1327","line":"        return const_local_iterator(nullptr, __n, bucket_count(), this);"},
{"lineNum":" 1328","line":"#else"},
{"lineNum":" 1329","line":"        return const_local_iterator(nullptr, __n, bucket_count());"},
{"lineNum":" 1330","line":"#endif"},
{"lineNum":" 1331","line":"    }"},
{"lineNum":" 1332","line":""},
{"lineNum":" 1333","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1334","line":""},
{"lineNum":" 1335","line":"    bool __dereferenceable(const const_iterator* __i) const;"},
{"lineNum":" 1336","line":"    bool __decrementable(const const_iterator* __i) const;"},
{"lineNum":" 1337","line":"    bool __addable(const const_iterator* __i, ptrdiff_t __n) const;"},
{"lineNum":" 1338","line":"    bool __subscriptable(const const_iterator* __i, ptrdiff_t __n) const;"},
{"lineNum":" 1339","line":""},
{"lineNum":" 1340","line":"#endif // _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1341","line":""},
{"lineNum":" 1342","line":"private:"},
{"lineNum":" 1343","line":"    void __rehash(size_type __n);"},
{"lineNum":" 1344","line":""},
{"lineNum":" 1345","line":"    template <class ..._Args>"},
{"lineNum":" 1346","line":"    __node_holder __construct_node(_Args&& ...__args);"},
{"lineNum":" 1347","line":""},
{"lineNum":" 1348","line":"    template <class _First, class ..._Rest>"},
{"lineNum":" 1349","line":"    __node_holder __construct_node_hash(size_t __hash, _First&& __f, _Rest&&... __rest);"},
{"lineNum":" 1350","line":""},
{"lineNum":" 1351","line":""},
{"lineNum":" 1352","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1353","line":"    void __copy_assign_alloc(const __hash_table& __u)"},
{"lineNum":" 1354","line":"        {__copy_assign_alloc(__u, integral_constant<bool,"},
{"lineNum":" 1355","line":"             __node_traits::propagate_on_container_copy_assignment::value>());}"},
{"lineNum":" 1356","line":"    void __copy_assign_alloc(const __hash_table& __u, true_type);"},
{"lineNum":" 1357","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1358","line":"        void __copy_assign_alloc(const __hash_table&, false_type) {}"},
{"lineNum":" 1359","line":""},
{"lineNum":" 1360","line":"    void __move_assign(__hash_table& __u, false_type);"},
{"lineNum":" 1361","line":"    void __move_assign(__hash_table& __u, true_type)"},
{"lineNum":" 1362","line":"        _NOEXCEPT_("},
{"lineNum":" 1363","line":"            is_nothrow_move_assignable<__node_allocator>::value &&"},
{"lineNum":" 1364","line":"            is_nothrow_move_assignable<hasher>::value &&"},
{"lineNum":" 1365","line":"            is_nothrow_move_assignable<key_equal>::value);"},
{"lineNum":" 1366","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1367","line":"    void __move_assign_alloc(__hash_table& __u)"},
{"lineNum":" 1368","line":"        _NOEXCEPT_("},
{"lineNum":" 1369","line":"            !__node_traits::propagate_on_container_move_assignment::value ||"},
{"lineNum":" 1370","line":"            (is_nothrow_move_assignable<__pointer_allocator>::value &&"},
{"lineNum":" 1371","line":"             is_nothrow_move_assignable<__node_allocator>::value))"},
{"lineNum":" 1372","line":"        {__move_assign_alloc(__u, integral_constant<bool,"},
{"lineNum":" 1373","line":"             __node_traits::propagate_on_container_move_assignment::value>());}"},
{"lineNum":" 1374","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1375","line":"    void __move_assign_alloc(__hash_table& __u, true_type)"},
{"lineNum":" 1376","line":"        _NOEXCEPT_("},
{"lineNum":" 1377","line":"            is_nothrow_move_assignable<__pointer_allocator>::value &&"},
{"lineNum":" 1378","line":"            is_nothrow_move_assignable<__node_allocator>::value)"},
{"lineNum":" 1379","line":"    {"},
{"lineNum":" 1380","line":"        __bucket_list_.get_deleter().__alloc() ="},
{"lineNum":" 1381","line":"                _VSTD::move(__u.__bucket_list_.get_deleter().__alloc());"},
{"lineNum":" 1382","line":"        __node_alloc() = _VSTD::move(__u.__node_alloc());"},
{"lineNum":" 1383","line":"    }"},
{"lineNum":" 1384","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1385","line":"        void __move_assign_alloc(__hash_table&, false_type) _NOEXCEPT {}"},
{"lineNum":" 1386","line":""},
{"lineNum":" 1387","line":"    void __deallocate_node(__next_pointer __np) _NOEXCEPT;"},
{"lineNum":" 1388","line":"    __next_pointer __detach() _NOEXCEPT;"},
{"lineNum":" 1389","line":""},
{"lineNum":" 1390","line":"    template <class, class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS unordered_map;"},
{"lineNum":" 1391","line":"    template <class, class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS unordered_multimap;"},
{"lineNum":" 1392","line":"};"},
{"lineNum":" 1393","line":""},
{"lineNum":" 1394","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 1395","line":"inline"},
{"lineNum":" 1396","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__hash_table()"},
{"lineNum":" 1397","line":"    _NOEXCEPT_("},
{"lineNum":" 1398","line":"        is_nothrow_default_constructible<__bucket_list>::value &&"},
{"lineNum":" 1399","line":"        is_nothrow_default_constructible<__first_node>::value &&"},
{"lineNum":" 1400","line":"        is_nothrow_default_constructible<__node_allocator>::value &&"},
{"lineNum":" 1401","line":"        is_nothrow_default_constructible<hasher>::value &&"},
{"lineNum":" 1402","line":"        is_nothrow_default_constructible<key_equal>::value)"},
{"lineNum":" 1403","line":"    : __p2_(0, __default_init_tag()),","class":"linePartCov","hits":"3","order":"100","possible_hits":"4",},
{"lineNum":" 1404","line":"      __p3_(1.0f, __default_init_tag())"},
{"lineNum":" 1405","line":"{"},
{"lineNum":" 1406","line":"}"},
{"lineNum":" 1407","line":""},
{"lineNum":" 1408","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 1409","line":"inline"},
{"lineNum":" 1410","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__hash_table(const hasher& __hf,"},
{"lineNum":" 1411","line":"                                                       const key_equal& __eql)"},
{"lineNum":" 1412","line":"    : __bucket_list_(nullptr, __bucket_list_deleter()),"},
{"lineNum":" 1413","line":"      __p1_(),"},
{"lineNum":" 1414","line":"      __p2_(0, __hf),"},
{"lineNum":" 1415","line":"      __p3_(1.0f, __eql)"},
{"lineNum":" 1416","line":"{"},
{"lineNum":" 1417","line":"}"},
{"lineNum":" 1418","line":""},
{"lineNum":" 1419","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 1420","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__hash_table(const hasher& __hf,"},
{"lineNum":" 1421","line":"                                                       const key_equal& __eql,"},
{"lineNum":" 1422","line":"                                                       const allocator_type& __a)"},
{"lineNum":" 1423","line":"    : __bucket_list_(nullptr, __bucket_list_deleter(__pointer_allocator(__a), 0)),"},
{"lineNum":" 1424","line":"      __p1_(__default_init_tag(), __node_allocator(__a)),"},
{"lineNum":" 1425","line":"      __p2_(0, __hf),"},
{"lineNum":" 1426","line":"      __p3_(1.0f, __eql)"},
{"lineNum":" 1427","line":"{"},
{"lineNum":" 1428","line":"}"},
{"lineNum":" 1429","line":""},
{"lineNum":" 1430","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 1431","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__hash_table(const allocator_type& __a)"},
{"lineNum":" 1432","line":"    : __bucket_list_(nullptr, __bucket_list_deleter(__pointer_allocator(__a), 0)),"},
{"lineNum":" 1433","line":"      __p1_(__default_init_tag(), __node_allocator(__a)),"},
{"lineNum":" 1434","line":"      __p2_(0, __default_init_tag()),"},
{"lineNum":" 1435","line":"      __p3_(1.0f, __default_init_tag())"},
{"lineNum":" 1436","line":"{"},
{"lineNum":" 1437","line":"}"},
{"lineNum":" 1438","line":""},
{"lineNum":" 1439","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 1440","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__hash_table(const __hash_table& __u)"},
{"lineNum":" 1441","line":"    : __bucket_list_(nullptr,"},
{"lineNum":" 1442","line":"          __bucket_list_deleter(allocator_traits<__pointer_allocator>::"},
{"lineNum":" 1443","line":"              select_on_container_copy_construction("},
{"lineNum":" 1444","line":"                  __u.__bucket_list_.get_deleter().__alloc()), 0)),"},
{"lineNum":" 1445","line":"      __p1_(__default_init_tag(), allocator_traits<__node_allocator>::"},
{"lineNum":" 1446","line":"          select_on_container_copy_construction(__u.__node_alloc())),"},
{"lineNum":" 1447","line":"      __p2_(0, __u.hash_function()),"},
{"lineNum":" 1448","line":"      __p3_(__u.__p3_)"},
{"lineNum":" 1449","line":"{"},
{"lineNum":" 1450","line":"}"},
{"lineNum":" 1451","line":""},
{"lineNum":" 1452","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 1453","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__hash_table(const __hash_table& __u,"},
{"lineNum":" 1454","line":"                                                       const allocator_type& __a)"},
{"lineNum":" 1455","line":"    : __bucket_list_(nullptr, __bucket_list_deleter(__pointer_allocator(__a), 0)),"},
{"lineNum":" 1456","line":"      __p1_(__default_init_tag(), __node_allocator(__a)),"},
{"lineNum":" 1457","line":"      __p2_(0, __u.hash_function()),"},
{"lineNum":" 1458","line":"      __p3_(__u.__p3_)"},
{"lineNum":" 1459","line":"{"},
{"lineNum":" 1460","line":"}"},
{"lineNum":" 1461","line":""},
{"lineNum":" 1462","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 1463","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__hash_table(__hash_table&& __u)"},
{"lineNum":" 1464","line":"        _NOEXCEPT_("},
{"lineNum":" 1465","line":"            is_nothrow_move_constructible<__bucket_list>::value &&"},
{"lineNum":" 1466","line":"            is_nothrow_move_constructible<__first_node>::value &&"},
{"lineNum":" 1467","line":"            is_nothrow_move_constructible<__node_allocator>::value &&"},
{"lineNum":" 1468","line":"            is_nothrow_move_constructible<hasher>::value &&"},
{"lineNum":" 1469","line":"            is_nothrow_move_constructible<key_equal>::value)"},
{"lineNum":" 1470","line":"    : __bucket_list_(_VSTD::move(__u.__bucket_list_)),"},
{"lineNum":" 1471","line":"      __p1_(_VSTD::move(__u.__p1_)),","class":"linePartCov","hits":"1","order":"108","possible_hits":"4",},
{"lineNum":" 1472","line":"      __p2_(_VSTD::move(__u.__p2_)),","class":"linePartCov","hits":"1","order":"109","possible_hits":"28",},
{"lineNum":" 1473","line":"      __p3_(_VSTD::move(__u.__p3_))","class":"linePartCov","hits":"1","order":"110","possible_hits":"28",},
{"lineNum":" 1474","line":"{","class":"lineCov","hits":"1","order":"103","possible_hits":"1",},
{"lineNum":" 1475","line":"    if (size() > 0)","class":"linePartCov","hits":"1","order":"111","possible_hits":"4",},
{"lineNum":" 1476","line":"    {"},
{"lineNum":" 1477","line":"        __bucket_list_[__constrain_hash(__p1_.first().__next_->__hash(), bucket_count())] =","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1478","line":"            __p1_.first().__ptr();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1479","line":"        __u.__p1_.first().__next_ = nullptr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1480","line":"        __u.size() = 0;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1481","line":"    }"},
{"lineNum":" 1482","line":"}","class":"linePartCov","hits":"1","order":"112","possible_hits":"2",},
{"lineNum":" 1483","line":""},
{"lineNum":" 1484","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 1485","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__hash_table(__hash_table&& __u,"},
{"lineNum":" 1486","line":"                                                       const allocator_type& __a)"},
{"lineNum":" 1487","line":"    : __bucket_list_(nullptr, __bucket_list_deleter(__pointer_allocator(__a), 0)),"},
{"lineNum":" 1488","line":"      __p1_(__default_init_tag(), __node_allocator(__a)),"},
{"lineNum":" 1489","line":"      __p2_(0, _VSTD::move(__u.hash_function())),"},
{"lineNum":" 1490","line":"      __p3_(_VSTD::move(__u.__p3_))"},
{"lineNum":" 1491","line":"{"},
{"lineNum":" 1492","line":"    if (__a == allocator_type(__u.__node_alloc()))"},
{"lineNum":" 1493","line":"    {"},
{"lineNum":" 1494","line":"        __bucket_list_.reset(__u.__bucket_list_.release());"},
{"lineNum":" 1495","line":"        __bucket_list_.get_deleter().size() = __u.__bucket_list_.get_deleter().size();"},
{"lineNum":" 1496","line":"        __u.__bucket_list_.get_deleter().size() = 0;"},
{"lineNum":" 1497","line":"        if (__u.size() > 0)"},
{"lineNum":" 1498","line":"        {"},
{"lineNum":" 1499","line":"            __p1_.first().__next_ = __u.__p1_.first().__next_;"},
{"lineNum":" 1500","line":"            __u.__p1_.first().__next_ = nullptr;"},
{"lineNum":" 1501","line":"            __bucket_list_[__constrain_hash(__p1_.first().__next_->__hash(), bucket_count())] ="},
{"lineNum":" 1502","line":"                __p1_.first().__ptr();"},
{"lineNum":" 1503","line":"            size() = __u.size();"},
{"lineNum":" 1504","line":"            __u.size() = 0;"},
{"lineNum":" 1505","line":"        }"},
{"lineNum":" 1506","line":"    }"},
{"lineNum":" 1507","line":"}"},
{"lineNum":" 1508","line":""},
{"lineNum":" 1509","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 1510","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::~__hash_table()"},
{"lineNum":" 1511","line":"{","class":"linePartCov","hits":"3","order":"166","possible_hits":"15",},
{"lineNum":" 1512","line":"#if defined(_LIBCPP_CXX03_LANG)"},
{"lineNum":" 1513","line":"    static_assert((is_copy_constructible<key_equal>::value),"},
{"lineNum":" 1514","line":"                 \"Predicate must be copy-constructible.\");"},
{"lineNum":" 1515","line":"    static_assert((is_copy_constructible<hasher>::value),"},
{"lineNum":" 1516","line":"                 \"Hasher must be copy-constructible.\");"},
{"lineNum":" 1517","line":"#endif"},
{"lineNum":" 1518","line":""},
{"lineNum":" 1519","line":"    __deallocate_node(__p1_.first().__next_);","class":"linePartCov","hits":"3","order":"167","possible_hits":"164",},
{"lineNum":" 1520","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1521","line":"    __get_db()->__erase_c(this);"},
{"lineNum":" 1522","line":"#endif"},
{"lineNum":" 1523","line":"}","class":"linePartCov","hits":"3","order":"174","possible_hits":"28",},
{"lineNum":" 1524","line":""},
{"lineNum":" 1525","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 1526","line":"void"},
{"lineNum":" 1527","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__copy_assign_alloc("},
{"lineNum":" 1528","line":"        const __hash_table& __u, true_type)"},
{"lineNum":" 1529","line":"{"},
{"lineNum":" 1530","line":"    if (__node_alloc() != __u.__node_alloc())"},
{"lineNum":" 1531","line":"    {"},
{"lineNum":" 1532","line":"        clear();"},
{"lineNum":" 1533","line":"        __bucket_list_.reset();"},
{"lineNum":" 1534","line":"        __bucket_list_.get_deleter().size() = 0;"},
{"lineNum":" 1535","line":"    }"},
{"lineNum":" 1536","line":"    __bucket_list_.get_deleter().__alloc() = __u.__bucket_list_.get_deleter().__alloc();"},
{"lineNum":" 1537","line":"    __node_alloc() = __u.__node_alloc();"},
{"lineNum":" 1538","line":"}"},
{"lineNum":" 1539","line":""},
{"lineNum":" 1540","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 1541","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>&"},
{"lineNum":" 1542","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::operator=(const __hash_table& __u)"},
{"lineNum":" 1543","line":"{"},
{"lineNum":" 1544","line":"    if (this != &__u)"},
{"lineNum":" 1545","line":"    {"},
{"lineNum":" 1546","line":"        __copy_assign_alloc(__u);"},
{"lineNum":" 1547","line":"        hash_function() = __u.hash_function();"},
{"lineNum":" 1548","line":"        key_eq() = __u.key_eq();"},
{"lineNum":" 1549","line":"        max_load_factor() = __u.max_load_factor();"},
{"lineNum":" 1550","line":"        __assign_multi(__u.begin(), __u.end());"},
{"lineNum":" 1551","line":"    }"},
{"lineNum":" 1552","line":"    return *this;"},
{"lineNum":" 1553","line":"}"},
{"lineNum":" 1554","line":""},
{"lineNum":" 1555","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 1556","line":"void"},
{"lineNum":" 1557","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__deallocate_node(__next_pointer __np)"},
{"lineNum":" 1558","line":"    _NOEXCEPT"},
{"lineNum":" 1559","line":"{","class":"linePartCov","hits":"3","order":"168","possible_hits":"4",},
{"lineNum":" 1560","line":"    __node_allocator& __na = __node_alloc();"},
{"lineNum":" 1561","line":"    while (__np != nullptr)","class":"linePartCov","hits":"4","order":"169","possible_hits":"327",},
{"lineNum":" 1562","line":"    {"},
{"lineNum":" 1563","line":"        __next_pointer __next = __np->__next_;","class":"linePartCov","hits":"1","order":"675","possible_hits":"164",},
{"lineNum":" 1564","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1565","line":"        __c_node* __c = __get_db()->__find_c_and_lock(this);"},
{"lineNum":" 1566","line":"        for (__i_node** __p = __c->end_; __p != __c->beg_; )"},
{"lineNum":" 1567","line":"        {"},
{"lineNum":" 1568","line":"            --__p;"},
{"lineNum":" 1569","line":"            iterator* __i = static_cast<iterator*>((*__p)->__i_);"},
{"lineNum":" 1570","line":"            if (__i->__node_ == __np)"},
{"lineNum":" 1571","line":"            {"},
{"lineNum":" 1572","line":"                (*__p)->__c_ = nullptr;"},
{"lineNum":" 1573","line":"                if (--__c->end_ != __p)"},
{"lineNum":" 1574","line":"                    _VSTD::memmove(__p, __p+1, (__c->end_ - __p)*sizeof(__i_node*));"},
{"lineNum":" 1575","line":"            }"},
{"lineNum":" 1576","line":"        }"},
{"lineNum":" 1577","line":"        __get_db()->unlock();"},
{"lineNum":" 1578","line":"#endif"},
{"lineNum":" 1579","line":"        __node_pointer __real_np = __np->__upcast();"},
{"lineNum":" 1580","line":"        __node_traits::destroy(__na, _NodeTypes::__get_ptr(__real_np->__value_));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1581","line":"        __node_traits::deallocate(__na, __real_np, 1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1582","line":"        __np = __next;"},
{"lineNum":" 1583","line":"    }"},
{"lineNum":" 1584","line":"}","class":"linePartCov","hits":"3","order":"170","possible_hits":"8",},
{"lineNum":" 1585","line":""},
{"lineNum":" 1586","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 1587","line":"typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::__next_pointer"},
{"lineNum":" 1588","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__detach() _NOEXCEPT"},
{"lineNum":" 1589","line":"{"},
{"lineNum":" 1590","line":"    size_type __bc = bucket_count();"},
{"lineNum":" 1591","line":"    for (size_type __i = 0; __i < __bc; ++__i)"},
{"lineNum":" 1592","line":"        __bucket_list_[__i] = nullptr;"},
{"lineNum":" 1593","line":"    size() = 0;"},
{"lineNum":" 1594","line":"    __next_pointer __cache = __p1_.first().__next_;"},
{"lineNum":" 1595","line":"    __p1_.first().__next_ = nullptr;"},
{"lineNum":" 1596","line":"    return __cache;"},
{"lineNum":" 1597","line":"}"},
{"lineNum":" 1598","line":""},
{"lineNum":" 1599","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 1600","line":"void"},
{"lineNum":" 1601","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__move_assign("},
{"lineNum":" 1602","line":"        __hash_table& __u, true_type)"},
{"lineNum":" 1603","line":"    _NOEXCEPT_("},
{"lineNum":" 1604","line":"        is_nothrow_move_assignable<__node_allocator>::value &&"},
{"lineNum":" 1605","line":"        is_nothrow_move_assignable<hasher>::value &&"},
{"lineNum":" 1606","line":"        is_nothrow_move_assignable<key_equal>::value)"},
{"lineNum":" 1607","line":"{"},
{"lineNum":" 1608","line":"    clear();"},
{"lineNum":" 1609","line":"    __bucket_list_.reset(__u.__bucket_list_.release());"},
{"lineNum":" 1610","line":"    __bucket_list_.get_deleter().size() = __u.__bucket_list_.get_deleter().size();"},
{"lineNum":" 1611","line":"    __u.__bucket_list_.get_deleter().size() = 0;"},
{"lineNum":" 1612","line":"    __move_assign_alloc(__u);"},
{"lineNum":" 1613","line":"    size() = __u.size();"},
{"lineNum":" 1614","line":"    hash_function() = _VSTD::move(__u.hash_function());"},
{"lineNum":" 1615","line":"    max_load_factor() = __u.max_load_factor();"},
{"lineNum":" 1616","line":"    key_eq() = _VSTD::move(__u.key_eq());"},
{"lineNum":" 1617","line":"    __p1_.first().__next_ = __u.__p1_.first().__next_;"},
{"lineNum":" 1618","line":"    if (size() > 0)"},
{"lineNum":" 1619","line":"    {"},
{"lineNum":" 1620","line":"        __bucket_list_[__constrain_hash(__p1_.first().__next_->__hash(), bucket_count())] ="},
{"lineNum":" 1621","line":"            __p1_.first().__ptr();"},
{"lineNum":" 1622","line":"        __u.__p1_.first().__next_ = nullptr;"},
{"lineNum":" 1623","line":"        __u.size() = 0;"},
{"lineNum":" 1624","line":"    }"},
{"lineNum":" 1625","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1626","line":"    __get_db()->swap(this, &__u);"},
{"lineNum":" 1627","line":"#endif"},
{"lineNum":" 1628","line":"}"},
{"lineNum":" 1629","line":""},
{"lineNum":" 1630","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 1631","line":"void"},
{"lineNum":" 1632","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__move_assign("},
{"lineNum":" 1633","line":"        __hash_table& __u, false_type)"},
{"lineNum":" 1634","line":"{"},
{"lineNum":" 1635","line":"    if (__node_alloc() == __u.__node_alloc())"},
{"lineNum":" 1636","line":"        __move_assign(__u, true_type());"},
{"lineNum":" 1637","line":"    else"},
{"lineNum":" 1638","line":"    {"},
{"lineNum":" 1639","line":"        hash_function() = _VSTD::move(__u.hash_function());"},
{"lineNum":" 1640","line":"        key_eq() = _VSTD::move(__u.key_eq());"},
{"lineNum":" 1641","line":"        max_load_factor() = __u.max_load_factor();"},
{"lineNum":" 1642","line":"        if (bucket_count() != 0)"},
{"lineNum":" 1643","line":"        {"},
{"lineNum":" 1644","line":"            __next_pointer __cache = __detach();"},
{"lineNum":" 1645","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1646","line":"            try"},
{"lineNum":" 1647","line":"            {"},
{"lineNum":" 1648","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1649","line":"                const_iterator __i = __u.begin();"},
{"lineNum":" 1650","line":"                while (__cache != nullptr && __u.size() != 0)"},
{"lineNum":" 1651","line":"                {"},
{"lineNum":" 1652","line":"                    __cache->__upcast()->__value_ ="},
{"lineNum":" 1653","line":"                        _VSTD::move(__u.remove(__i++)->__value_);"},
{"lineNum":" 1654","line":"                    __next_pointer __next = __cache->__next_;"},
{"lineNum":" 1655","line":"                    __node_insert_multi(__cache->__upcast());"},
{"lineNum":" 1656","line":"                    __cache = __next;"},
{"lineNum":" 1657","line":"                }"},
{"lineNum":" 1658","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1659","line":"            }"},
{"lineNum":" 1660","line":"            catch (...)"},
{"lineNum":" 1661","line":"            {"},
{"lineNum":" 1662","line":"                __deallocate_node(__cache);"},
{"lineNum":" 1663","line":"                throw;"},
{"lineNum":" 1664","line":"            }"},
{"lineNum":" 1665","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1666","line":"            __deallocate_node(__cache);"},
{"lineNum":" 1667","line":"        }"},
{"lineNum":" 1668","line":"        const_iterator __i = __u.begin();"},
{"lineNum":" 1669","line":"        while (__u.size() != 0)"},
{"lineNum":" 1670","line":"        {"},
{"lineNum":" 1671","line":"            __node_holder __h = __construct_node(_NodeTypes::__move(__u.remove(__i++)->__value_));"},
{"lineNum":" 1672","line":"            __node_insert_multi(__h.get());"},
{"lineNum":" 1673","line":"            __h.release();"},
{"lineNum":" 1674","line":"        }"},
{"lineNum":" 1675","line":"    }"},
{"lineNum":" 1676","line":"}"},
{"lineNum":" 1677","line":""},
{"lineNum":" 1678","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 1679","line":"inline"},
{"lineNum":" 1680","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>&"},
{"lineNum":" 1681","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::operator=(__hash_table&& __u)"},
{"lineNum":" 1682","line":"    _NOEXCEPT_("},
{"lineNum":" 1683","line":"        __node_traits::propagate_on_container_move_assignment::value &&"},
{"lineNum":" 1684","line":"        is_nothrow_move_assignable<__node_allocator>::value &&"},
{"lineNum":" 1685","line":"        is_nothrow_move_assignable<hasher>::value &&"},
{"lineNum":" 1686","line":"        is_nothrow_move_assignable<key_equal>::value)"},
{"lineNum":" 1687","line":"{"},
{"lineNum":" 1688","line":"    __move_assign(__u, integral_constant<bool,"},
{"lineNum":" 1689","line":"                  __node_traits::propagate_on_container_move_assignment::value>());"},
{"lineNum":" 1690","line":"    return *this;"},
{"lineNum":" 1691","line":"}"},
{"lineNum":" 1692","line":""},
{"lineNum":" 1693","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 1694","line":"template <class _InputIterator>"},
{"lineNum":" 1695","line":"void"},
{"lineNum":" 1696","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__assign_unique(_InputIterator __first,"},
{"lineNum":" 1697","line":"                                                          _InputIterator __last)"},
{"lineNum":" 1698","line":"{"},
{"lineNum":" 1699","line":"    typedef iterator_traits<_InputIterator> _ITraits;"},
{"lineNum":" 1700","line":"    typedef typename _ITraits::value_type _ItValueType;"},
{"lineNum":" 1701","line":"    static_assert((is_same<_ItValueType, __container_value_type>::value),"},
{"lineNum":" 1702","line":"                  \"__assign_unique may only be called with the containers value type\");"},
{"lineNum":" 1703","line":""},
{"lineNum":" 1704","line":"    if (bucket_count() != 0)"},
{"lineNum":" 1705","line":"    {"},
{"lineNum":" 1706","line":"        __next_pointer __cache = __detach();"},
{"lineNum":" 1707","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1708","line":"        try"},
{"lineNum":" 1709","line":"        {"},
{"lineNum":" 1710","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1711","line":"            for (; __cache != nullptr && __first != __last; ++__first)"},
{"lineNum":" 1712","line":"            {"},
{"lineNum":" 1713","line":"                __cache->__upcast()->__value_ = *__first;"},
{"lineNum":" 1714","line":"                __next_pointer __next = __cache->__next_;"},
{"lineNum":" 1715","line":"                __node_insert_unique(__cache->__upcast());"},
{"lineNum":" 1716","line":"                __cache = __next;"},
{"lineNum":" 1717","line":"            }"},
{"lineNum":" 1718","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1719","line":"        }"},
{"lineNum":" 1720","line":"        catch (...)"},
{"lineNum":" 1721","line":"        {"},
{"lineNum":" 1722","line":"            __deallocate_node(__cache);"},
{"lineNum":" 1723","line":"            throw;"},
{"lineNum":" 1724","line":"        }"},
{"lineNum":" 1725","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1726","line":"        __deallocate_node(__cache);"},
{"lineNum":" 1727","line":"    }"},
{"lineNum":" 1728","line":"    for (; __first != __last; ++__first)"},
{"lineNum":" 1729","line":"        __insert_unique(*__first);"},
{"lineNum":" 1730","line":"}"},
{"lineNum":" 1731","line":""},
{"lineNum":" 1732","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 1733","line":"template <class _InputIterator>"},
{"lineNum":" 1734","line":"void"},
{"lineNum":" 1735","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__assign_multi(_InputIterator __first,"},
{"lineNum":" 1736","line":"                                                         _InputIterator __last)"},
{"lineNum":" 1737","line":"{"},
{"lineNum":" 1738","line":"    typedef iterator_traits<_InputIterator> _ITraits;"},
{"lineNum":" 1739","line":"    typedef typename _ITraits::value_type _ItValueType;"},
{"lineNum":" 1740","line":"    static_assert((is_same<_ItValueType, __container_value_type>::value ||"},
{"lineNum":" 1741","line":"                  is_same<_ItValueType, __node_value_type>::value),"},
{"lineNum":" 1742","line":"                  \"__assign_multi may only be called with the containers value type\""},
{"lineNum":" 1743","line":"                  \" or the nodes value type\");"},
{"lineNum":" 1744","line":"    if (bucket_count() != 0)"},
{"lineNum":" 1745","line":"    {"},
{"lineNum":" 1746","line":"        __next_pointer __cache = __detach();"},
{"lineNum":" 1747","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1748","line":"        try"},
{"lineNum":" 1749","line":"        {"},
{"lineNum":" 1750","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1751","line":"            for (; __cache != nullptr && __first != __last; ++__first)"},
{"lineNum":" 1752","line":"            {"},
{"lineNum":" 1753","line":"                __cache->__upcast()->__value_ = *__first;"},
{"lineNum":" 1754","line":"                __next_pointer __next = __cache->__next_;"},
{"lineNum":" 1755","line":"                __node_insert_multi(__cache->__upcast());"},
{"lineNum":" 1756","line":"                __cache = __next;"},
{"lineNum":" 1757","line":"            }"},
{"lineNum":" 1758","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1759","line":"        }"},
{"lineNum":" 1760","line":"        catch (...)"},
{"lineNum":" 1761","line":"        {"},
{"lineNum":" 1762","line":"            __deallocate_node(__cache);"},
{"lineNum":" 1763","line":"            throw;"},
{"lineNum":" 1764","line":"        }"},
{"lineNum":" 1765","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1766","line":"        __deallocate_node(__cache);"},
{"lineNum":" 1767","line":"    }"},
{"lineNum":" 1768","line":"    for (; __first != __last; ++__first)"},
{"lineNum":" 1769","line":"        __insert_multi(_NodeTypes::__get_value(*__first));"},
{"lineNum":" 1770","line":"}"},
{"lineNum":" 1771","line":""},
{"lineNum":" 1772","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 1773","line":"inline"},
{"lineNum":" 1774","line":"typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator"},
{"lineNum":" 1775","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::begin() _NOEXCEPT"},
{"lineNum":" 1776","line":"{"},
{"lineNum":" 1777","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1778","line":"    return iterator(__p1_.first().__next_, this);"},
{"lineNum":" 1779","line":"#else"},
{"lineNum":" 1780","line":"    return iterator(__p1_.first().__next_);","class":"linePartCov","hits":"24","order":"313","possible_hits":"57",},
{"lineNum":" 1781","line":"#endif"},
{"lineNum":" 1782","line":"}"},
{"lineNum":" 1783","line":""},
{"lineNum":" 1784","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 1785","line":"inline"},
{"lineNum":" 1786","line":"typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator"},
{"lineNum":" 1787","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::end() _NOEXCEPT"},
{"lineNum":" 1788","line":"{"},
{"lineNum":" 1789","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1790","line":"    return iterator(nullptr, this);"},
{"lineNum":" 1791","line":"#else"},
{"lineNum":" 1792","line":"    return iterator(nullptr);"},
{"lineNum":" 1793","line":"#endif"},
{"lineNum":" 1794","line":"}"},
{"lineNum":" 1795","line":""},
{"lineNum":" 1796","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 1797","line":"inline"},
{"lineNum":" 1798","line":"typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::const_iterator"},
{"lineNum":" 1799","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::begin() const _NOEXCEPT"},
{"lineNum":" 1800","line":"{"},
{"lineNum":" 1801","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1802","line":"    return const_iterator(__p1_.first().__next_, this);"},
{"lineNum":" 1803","line":"#else"},
{"lineNum":" 1804","line":"    return const_iterator(__p1_.first().__next_);"},
{"lineNum":" 1805","line":"#endif"},
{"lineNum":" 1806","line":"}"},
{"lineNum":" 1807","line":""},
{"lineNum":" 1808","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 1809","line":"inline"},
{"lineNum":" 1810","line":"typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::const_iterator"},
{"lineNum":" 1811","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::end() const _NOEXCEPT"},
{"lineNum":" 1812","line":"{"},
{"lineNum":" 1813","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1814","line":"    return const_iterator(nullptr, this);"},
{"lineNum":" 1815","line":"#else"},
{"lineNum":" 1816","line":"    return const_iterator(nullptr);"},
{"lineNum":" 1817","line":"#endif"},
{"lineNum":" 1818","line":"}"},
{"lineNum":" 1819","line":""},
{"lineNum":" 1820","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 1821","line":"void"},
{"lineNum":" 1822","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::clear() _NOEXCEPT"},
{"lineNum":" 1823","line":"{"},
{"lineNum":" 1824","line":"    if (size() > 0)"},
{"lineNum":" 1825","line":"    {"},
{"lineNum":" 1826","line":"        __deallocate_node(__p1_.first().__next_);"},
{"lineNum":" 1827","line":"        __p1_.first().__next_ = nullptr;"},
{"lineNum":" 1828","line":"        size_type __bc = bucket_count();"},
{"lineNum":" 1829","line":"        for (size_type __i = 0; __i < __bc; ++__i)"},
{"lineNum":" 1830","line":"            __bucket_list_[__i] = nullptr;"},
{"lineNum":" 1831","line":"        size() = 0;"},
{"lineNum":" 1832","line":"    }"},
{"lineNum":" 1833","line":"}"},
{"lineNum":" 1834","line":""},
{"lineNum":" 1835","line":""},
{"lineNum":" 1836","line":"// Prepare the container for an insertion of the value __value with the hash"},
{"lineNum":" 1837","line":"// __hash. This does a lookup into the container to see if __value is already"},
{"lineNum":" 1838","line":"// present, and performs a rehash if necessary. Returns a pointer to the"},
{"lineNum":" 1839","line":"// existing element if it exists, otherwise nullptr."},
{"lineNum":" 1840","line":"//"},
{"lineNum":" 1841","line":"// Note that this function does forward exceptions if key_eq() throws, and never"},
{"lineNum":" 1842","line":"// mutates __value or actually inserts into the map."},
{"lineNum":" 1843","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 1844","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1845","line":"typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::__next_pointer"},
{"lineNum":" 1846","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_insert_unique_prepare("},
{"lineNum":" 1847","line":"    size_t __hash, value_type& __value)"},
{"lineNum":" 1848","line":"{"},
{"lineNum":" 1849","line":"    size_type __bc = bucket_count();"},
{"lineNum":" 1850","line":""},
{"lineNum":" 1851","line":"    if (__bc != 0)"},
{"lineNum":" 1852","line":"    {"},
{"lineNum":" 1853","line":"        size_t __chash = __constrain_hash(__hash, __bc);"},
{"lineNum":" 1854","line":"        __next_pointer __ndptr = __bucket_list_[__chash];"},
{"lineNum":" 1855","line":"        if (__ndptr != nullptr)"},
{"lineNum":" 1856","line":"        {"},
{"lineNum":" 1857","line":"            for (__ndptr = __ndptr->__next_; __ndptr != nullptr &&"},
{"lineNum":" 1858","line":"                                             __constrain_hash(__ndptr->__hash(), __bc) == __chash;"},
{"lineNum":" 1859","line":"                                                     __ndptr = __ndptr->__next_)"},
{"lineNum":" 1860","line":"            {"},
{"lineNum":" 1861","line":"                if (key_eq()(__ndptr->__upcast()->__value_, __value))"},
{"lineNum":" 1862","line":"                    return __ndptr;"},
{"lineNum":" 1863","line":"            }"},
{"lineNum":" 1864","line":"        }"},
{"lineNum":" 1865","line":"    }"},
{"lineNum":" 1866","line":"    if (size()+1 > __bc * max_load_factor() || __bc == 0)"},
{"lineNum":" 1867","line":"    {"},
{"lineNum":" 1868","line":"        rehash(_VSTD::max<size_type>(2 * __bc + !__is_hash_power2(__bc),"},
{"lineNum":" 1869","line":"                                     size_type(ceil(float(size() + 1) / max_load_factor()))));"},
{"lineNum":" 1870","line":"    }"},
{"lineNum":" 1871","line":"    return nullptr;"},
{"lineNum":" 1872","line":"}"},
{"lineNum":" 1873","line":""},
{"lineNum":" 1874","line":"// Insert the node __nd into the container by pushing it into the right bucket,"},
{"lineNum":" 1875","line":"// and updating size(). Assumes that __nd->__hash is up-to-date, and that"},
{"lineNum":" 1876","line":"// rehashing has already occurred and that no element with the same key exists"},
{"lineNum":" 1877","line":"// in the map."},
{"lineNum":" 1878","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 1879","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1880","line":"void"},
{"lineNum":" 1881","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_insert_unique_perform("},
{"lineNum":" 1882","line":"    __node_pointer __nd) _NOEXCEPT"},
{"lineNum":" 1883","line":"{"},
{"lineNum":" 1884","line":"    size_type __bc = bucket_count();"},
{"lineNum":" 1885","line":"    size_t __chash = __constrain_hash(__nd->__hash(), __bc);"},
{"lineNum":" 1886","line":"    // insert_after __bucket_list_[__chash], or __first_node if bucket is null"},
{"lineNum":" 1887","line":"    __next_pointer __pn = __bucket_list_[__chash];"},
{"lineNum":" 1888","line":"    if (__pn == nullptr)"},
{"lineNum":" 1889","line":"    {"},
{"lineNum":" 1890","line":"        __pn =__p1_.first().__ptr();"},
{"lineNum":" 1891","line":"        __nd->__next_ = __pn->__next_;"},
{"lineNum":" 1892","line":"        __pn->__next_ = __nd->__ptr();"},
{"lineNum":" 1893","line":"        // fix up __bucket_list_"},
{"lineNum":" 1894","line":"        __bucket_list_[__chash] = __pn;"},
{"lineNum":" 1895","line":"        if (__nd->__next_ != nullptr)"},
{"lineNum":" 1896","line":"            __bucket_list_[__constrain_hash(__nd->__next_->__hash(), __bc)] = __nd->__ptr();"},
{"lineNum":" 1897","line":"    }"},
{"lineNum":" 1898","line":"    else"},
{"lineNum":" 1899","line":"    {"},
{"lineNum":" 1900","line":"        __nd->__next_ = __pn->__next_;"},
{"lineNum":" 1901","line":"        __pn->__next_ = __nd->__ptr();"},
{"lineNum":" 1902","line":"    }"},
{"lineNum":" 1903","line":"    ++size();"},
{"lineNum":" 1904","line":"}"},
{"lineNum":" 1905","line":""},
{"lineNum":" 1906","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 1907","line":"pair<typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator, bool>"},
{"lineNum":" 1908","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_insert_unique(__node_pointer __nd)"},
{"lineNum":" 1909","line":"{"},
{"lineNum":" 1910","line":"    __nd->__hash_ = hash_function()(__nd->__value_);"},
{"lineNum":" 1911","line":"    __next_pointer __existing_node ="},
{"lineNum":" 1912","line":"        __node_insert_unique_prepare(__nd->__hash(), __nd->__value_);"},
{"lineNum":" 1913","line":""},
{"lineNum":" 1914","line":"    // Insert the node, unless it already exists in the container."},
{"lineNum":" 1915","line":"    bool __inserted = false;"},
{"lineNum":" 1916","line":"    if (__existing_node == nullptr)"},
{"lineNum":" 1917","line":"    {"},
{"lineNum":" 1918","line":"        __node_insert_unique_perform(__nd);"},
{"lineNum":" 1919","line":"        __existing_node = __nd->__ptr();"},
{"lineNum":" 1920","line":"        __inserted = true;"},
{"lineNum":" 1921","line":"    }"},
{"lineNum":" 1922","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1923","line":"    return pair<iterator, bool>(iterator(__existing_node, this), __inserted);"},
{"lineNum":" 1924","line":"#else"},
{"lineNum":" 1925","line":"    return pair<iterator, bool>(iterator(__existing_node), __inserted);"},
{"lineNum":" 1926","line":"#endif"},
{"lineNum":" 1927","line":"}"},
{"lineNum":" 1928","line":""},
{"lineNum":" 1929","line":"// Prepare the container for an insertion of the value __cp_val with the hash"},
{"lineNum":" 1930","line":"// __cp_hash. This does a lookup into the container to see if __cp_value is"},
{"lineNum":" 1931","line":"// already present, and performs a rehash if necessary. Returns a pointer to the"},
{"lineNum":" 1932","line":"// last occurrence of __cp_val in the map."},
{"lineNum":" 1933","line":"//"},
{"lineNum":" 1934","line":"// Note that this function does forward exceptions if key_eq() throws, and never"},
{"lineNum":" 1935","line":"// mutates __value or actually inserts into the map."},
{"lineNum":" 1936","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 1937","line":"typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::__next_pointer"},
{"lineNum":" 1938","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_insert_multi_prepare("},
{"lineNum":" 1939","line":"    size_t __cp_hash, value_type& __cp_val)"},
{"lineNum":" 1940","line":"{","class":"linePartCov","hits":"1","order":"620","possible_hits":"4",},
{"lineNum":" 1941","line":"    size_type __bc = bucket_count();"},
{"lineNum":" 1942","line":"    if (size()+1 > __bc * max_load_factor() || __bc == 0)","class":"linePartCov","hits":"1","order":"621","possible_hits":"4",},
{"lineNum":" 1943","line":"    {"},
{"lineNum":" 1944","line":"        rehash(_VSTD::max<size_type>(2 * __bc + !__is_hash_power2(__bc),","class":"linePartCov","hits":"3","order":"622","possible_hits":"12",},
{"lineNum":" 1945","line":"                       size_type(ceil(float(size() + 1) / max_load_factor()))));","class":"linePartCov","hits":"2","order":"623","possible_hits":"8",},
{"lineNum":" 1946","line":"        __bc = bucket_count();"},
{"lineNum":" 1947","line":"    }"},
{"lineNum":" 1948","line":"    size_t __chash = __constrain_hash(__cp_hash, __bc);"},
{"lineNum":" 1949","line":"    __next_pointer __pn = __bucket_list_[__chash];","class":"linePartCov","hits":"1","order":"624","possible_hits":"4",},
{"lineNum":" 1950","line":"    if (__pn != nullptr)","class":"linePartCov","hits":"1","order":"625","possible_hits":"4",},
{"lineNum":" 1951","line":"    {"},
{"lineNum":" 1952","line":"        for (bool __found = false; __pn->__next_ != nullptr &&","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":" 1953","line":"                                   __constrain_hash(__pn->__next_->__hash(), __bc) == __chash;","class":"lineNoCov","hits":"0","possible_hits":"15",},
{"lineNum":" 1954","line":"                                                           __pn = __pn->__next_)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1955","line":"        {"},
{"lineNum":" 1956","line":"            //      __found    key_eq()     action"},
{"lineNum":" 1957","line":"            //      false       false       loop"},
{"lineNum":" 1958","line":"            //      true        true        loop"},
{"lineNum":" 1959","line":"            //      false       true        set __found to true"},
{"lineNum":" 1960","line":"            //      true        false       break"},
{"lineNum":" 1961","line":"            if (__found != (__pn->__next_->__hash() == __cp_hash &&","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1962","line":"                            key_eq()(__pn->__next_->__upcast()->__value_, __cp_val)))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1963","line":"            {"},
{"lineNum":" 1964","line":"                if (!__found)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1965","line":"                    __found = true;"},
{"lineNum":" 1966","line":"                else"},
{"lineNum":" 1967","line":"                    break;"},
{"lineNum":" 1968","line":"            }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1969","line":"        }"},
{"lineNum":" 1970","line":"    }"},
{"lineNum":" 1971","line":"    return __pn;","class":"linePartCov","hits":"1","order":"626","possible_hits":"8",},
{"lineNum":" 1972","line":"}"},
{"lineNum":" 1973","line":""},
{"lineNum":" 1974","line":"// Insert the node __cp into the container after __pn (which is the last node in"},
{"lineNum":" 1975","line":"// the bucket that compares equal to __cp). Rehashing, and checking for"},
{"lineNum":" 1976","line":"// uniqueness has already been performed (in __node_insert_multi_prepare), so"},
{"lineNum":" 1977","line":"// all we need to do is update the bucket and size(). Assumes that __cp->__hash"},
{"lineNum":" 1978","line":"// is up-to-date."},
{"lineNum":" 1979","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 1980","line":"void"},
{"lineNum":" 1981","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_insert_multi_perform("},
{"lineNum":" 1982","line":"    __node_pointer __cp, __next_pointer __pn) _NOEXCEPT"},
{"lineNum":" 1983","line":"{","class":"lineCov","hits":"1","order":"628","possible_hits":"1",},
{"lineNum":" 1984","line":"    size_type __bc = bucket_count();"},
{"lineNum":" 1985","line":"    size_t __chash = __constrain_hash(__cp->__hash_, __bc);","class":"linePartCov","hits":"1","order":"629","possible_hits":"4",},
{"lineNum":" 1986","line":"    if (__pn == nullptr)","class":"linePartCov","hits":"1","order":"630","possible_hits":"13",},
{"lineNum":" 1987","line":"    {"},
{"lineNum":" 1988","line":"        __pn =__p1_.first().__ptr();"},
{"lineNum":" 1989","line":"        __cp->__next_ = __pn->__next_;","class":"linePartCov","hits":"1","order":"631","possible_hits":"4",},
{"lineNum":" 1990","line":"        __pn->__next_ = __cp->__ptr();","class":"linePartCov","hits":"1","order":"632","possible_hits":"4",},
{"lineNum":" 1991","line":"        // fix up __bucket_list_"},
{"lineNum":" 1992","line":"        __bucket_list_[__chash] = __pn;","class":"linePartCov","hits":"1","order":"633","possible_hits":"4",},
{"lineNum":" 1993","line":"        if (__cp->__next_ != nullptr)","class":"linePartCov","hits":"1","order":"634","possible_hits":"4",},
{"lineNum":" 1994","line":"            __bucket_list_[__constrain_hash(__cp->__next_->__hash(), __bc)]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1995","line":"                = __cp->__ptr();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1996","line":"    }","class":"lineCov","hits":"1","order":"635","possible_hits":"1",},
{"lineNum":" 1997","line":"    else"},
{"lineNum":" 1998","line":"    {"},
{"lineNum":" 1999","line":"        __cp->__next_ = __pn->__next_;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2000","line":"        __pn->__next_ = __cp->__ptr();","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2001","line":"        if (__cp->__next_ != nullptr)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2002","line":"        {"},
{"lineNum":" 2003","line":"            size_t __nhash = __constrain_hash(__cp->__next_->__hash(), __bc);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2004","line":"            if (__nhash != __chash)","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":" 2005","line":"                __bucket_list_[__nhash] = __cp->__ptr();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2006","line":"        }"},
{"lineNum":" 2007","line":"    }"},
{"lineNum":" 2008","line":"    ++size();","class":"lineCov","hits":"1","order":"636","possible_hits":"1",},
{"lineNum":" 2009","line":"}","class":"linePartCov","hits":"1","order":"637","possible_hits":"2",},
{"lineNum":" 2010","line":""},
{"lineNum":" 2011","line":""},
{"lineNum":" 2012","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2013","line":"typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator"},
{"lineNum":" 2014","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_insert_multi(__node_pointer __cp)"},
{"lineNum":" 2015","line":"{","class":"lineCov","hits":"1","order":"617","possible_hits":"1",},
{"lineNum":" 2016","line":"    __cp->__hash_ = hash_function()(__cp->__value_);","class":"linePartCov","hits":"2","order":"618","possible_hits":"5",},
{"lineNum":" 2017","line":"    __next_pointer __pn = __node_insert_multi_prepare(__cp->__hash(), __cp->__value_);","class":"linePartCov","hits":"1","order":"619","possible_hits":"4",},
{"lineNum":" 2018","line":"    __node_insert_multi_perform(__cp, __pn);","class":"lineCov","hits":"1","order":"627","possible_hits":"1",},
{"lineNum":" 2019","line":""},
{"lineNum":" 2020","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2021","line":"    return iterator(__cp->__ptr(), this);"},
{"lineNum":" 2022","line":"#else"},
{"lineNum":" 2023","line":"    return iterator(__cp->__ptr());"},
{"lineNum":" 2024","line":"#endif"},
{"lineNum":" 2025","line":"}","class":"linePartCov","hits":"1","order":"638","possible_hits":"2",},
{"lineNum":" 2026","line":""},
{"lineNum":" 2027","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2028","line":"typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator"},
{"lineNum":" 2029","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_insert_multi("},
{"lineNum":" 2030","line":"        const_iterator __p, __node_pointer __cp)"},
{"lineNum":" 2031","line":"{","class":"linePartCov","hits":"1","order":"614","possible_hits":"4",},
{"lineNum":" 2032","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2033","line":"    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__p) == this,"},
{"lineNum":" 2034","line":"        \"unordered container::emplace_hint(const_iterator, args...) called with an iterator not\""},
{"lineNum":" 2035","line":"        \" referring to this unordered container\");"},
{"lineNum":" 2036","line":"#endif"},
{"lineNum":" 2037","line":"    if (__p != end() && key_eq()(*__p, __cp->__value_))","class":"linePartCov","hits":"1","order":"615","possible_hits":"8",},
{"lineNum":" 2038","line":"    {"},
{"lineNum":" 2039","line":"        __next_pointer __np = __p.__node_;"},
{"lineNum":" 2040","line":"        __cp->__hash_ = __np->__hash();","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2041","line":"        size_type __bc = bucket_count();"},
{"lineNum":" 2042","line":"        if (size()+1 > __bc * max_load_factor() || __bc == 0)","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":" 2043","line":"        {"},
{"lineNum":" 2044","line":"            rehash(_VSTD::max<size_type>(2 * __bc + !__is_hash_power2(__bc),","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":" 2045","line":"                           size_type(ceil(float(size() + 1) / max_load_factor()))));","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 2046","line":"            __bc = bucket_count();"},
{"lineNum":" 2047","line":"        }"},
{"lineNum":" 2048","line":"        size_t __chash = __constrain_hash(__cp->__hash_, __bc);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2049","line":"        __next_pointer __pp = __bucket_list_[__chash];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2050","line":"        while (__pp->__next_ != __np)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 2051","line":"            __pp = __pp->__next_;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2052","line":"        __cp->__next_ = __np;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2053","line":"        __pp->__next_ = static_cast<__next_pointer>(__cp);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2054","line":"        ++size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2055","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2056","line":"        return iterator(static_cast<__next_pointer>(__cp), this);"},
{"lineNum":" 2057","line":"#else"},
{"lineNum":" 2058","line":"        return iterator(static_cast<__next_pointer>(__cp));"},
{"lineNum":" 2059","line":"#endif"},
{"lineNum":" 2060","line":"    }"},
{"lineNum":" 2061","line":"    return __node_insert_multi(__cp);","class":"lineCov","hits":"1","order":"616","possible_hits":"1",},
{"lineNum":" 2062","line":"}","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 2063","line":""},
{"lineNum":" 2064","line":""},
{"lineNum":" 2065","line":""},
{"lineNum":" 2066","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2067","line":"template <class _Key, class ..._Args>"},
{"lineNum":" 2068","line":"pair<typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator, bool>"},
{"lineNum":" 2069","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__emplace_unique_key_args(_Key const& __k, _Args&&... __args)"},
{"lineNum":" 2070","line":"{","class":"linePartCov","hits":"4","order":"114","possible_hits":"38",},
{"lineNum":" 2071","line":""},
{"lineNum":" 2072","line":"    size_t __hash = hash_function()(__k);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2073","line":"    size_type __bc = bucket_count();"},
{"lineNum":" 2074","line":"    bool __inserted = false;"},
{"lineNum":" 2075","line":"    __next_pointer __nd;"},
{"lineNum":" 2076","line":"    size_t __chash;"},
{"lineNum":" 2077","line":"    if (__bc != 0)","class":"linePartCov","hits":"7","order":"118","possible_hits":"47",},
{"lineNum":" 2078","line":"    {"},
{"lineNum":" 2079","line":"        __chash = __constrain_hash(__hash, __bc);"},
{"lineNum":" 2080","line":"        __nd = __bucket_list_[__chash];","class":"linePartCov","hits":"4","order":"303","possible_hits":"38",},
{"lineNum":" 2081","line":"        if (__nd != nullptr)","class":"linePartCov","hits":"4","order":"304","possible_hits":"38",},
{"lineNum":" 2082","line":"        {"},
{"lineNum":" 2083","line":"            for (__nd = __nd->__next_; __nd != nullptr &&","class":"linePartCov","hits":"12","order":"305","possible_hits":"89",},
{"lineNum":" 2084","line":"                (__nd->__hash() == __hash || __constrain_hash(__nd->__hash(), __bc) == __chash);","class":"linePartCov","hits":"8","order":"307","possible_hits":"84",},
{"lineNum":" 2085","line":"                                                           __nd = __nd->__next_)","class":"linePartCov","hits":"4","order":"422","possible_hits":"9",},
{"lineNum":" 2086","line":"            {"},
{"lineNum":" 2087","line":"                if (key_eq()(__nd->__upcast()->__value_, __k))","class":"linePartCov","hits":"4","order":"311","possible_hits":"36",},
{"lineNum":" 2088","line":"                    goto __done;","class":"linePartCov","hits":"2","order":"312","possible_hits":"9",},
{"lineNum":" 2089","line":"            }"},
{"lineNum":" 2090","line":"        }","class":"linePartCov","hits":"3","order":"423","possible_hits":"9",},
{"lineNum":" 2091","line":"    }","class":"linePartCov","hits":"3","order":"424","possible_hits":"9",},
{"lineNum":" 2092","line":"    {"},
{"lineNum":" 2093","line":"        __node_holder __h = __construct_node_hash(__hash, _VSTD::forward<_Args>(__args)...);","class":"linePartCov","hits":"3","order":"119","possible_hits":"9",},
{"lineNum":" 2094","line":"        if (size()+1 > __bc * max_load_factor() || __bc == 0)","class":"linePartCov","hits":"9","order":"127","possible_hits":"56",},
{"lineNum":" 2095","line":"        {"},
{"lineNum":" 2096","line":"            rehash(_VSTD::max<size_type>(2 * __bc + !__is_hash_power2(__bc),","class":"linePartCov","hits":"9","order":"128","possible_hits":"114",},
{"lineNum":" 2097","line":"                           size_type(ceil(float(size() + 1) / max_load_factor()))));","class":"linePartCov","hits":"6","order":"130","possible_hits":"85",},
{"lineNum":" 2098","line":"            __bc = bucket_count();"},
{"lineNum":" 2099","line":"            __chash = __constrain_hash(__hash, __bc);"},
{"lineNum":" 2100","line":"        }"},
{"lineNum":" 2101","line":"        // insert_after __bucket_list_[__chash], or __first_node if bucket is null"},
{"lineNum":" 2102","line":"        __next_pointer __pn = __bucket_list_[__chash];","class":"linePartCov","hits":"3","order":"154","possible_hits":"38",},
{"lineNum":" 2103","line":"        if (__pn == nullptr)","class":"linePartCov","hits":"3","order":"155","possible_hits":"38",},
{"lineNum":" 2104","line":"        {"},
{"lineNum":" 2105","line":"            __pn = __p1_.first().__ptr();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2106","line":"            __h->__next_ = __pn->__next_;","class":"linePartCov","hits":"6","order":"156","possible_hits":"50",},
{"lineNum":" 2107","line":"            __pn->__next_ = __h.get()->__ptr();","class":"linePartCov","hits":"3","order":"158","possible_hits":"38",},
{"lineNum":" 2108","line":"            // fix up __bucket_list_"},
{"lineNum":" 2109","line":"            __bucket_list_[__chash] = __pn;","class":"linePartCov","hits":"3","order":"160","possible_hits":"38",},
{"lineNum":" 2110","line":"            if (__h->__next_ != nullptr)","class":"linePartCov","hits":"3","order":"161","possible_hits":"38",},
{"lineNum":" 2111","line":"                __bucket_list_[__constrain_hash(__h->__next_->__hash(), __bc)]","class":"linePartCov","hits":"3","order":"493","possible_hits":"9",},
{"lineNum":" 2112","line":"                    = __h.get()->__ptr();","class":"linePartCov","hits":"6","order":"492","possible_hits":"47",},
{"lineNum":" 2113","line":"        }","class":"linePartCov","hits":"3","order":"162","possible_hits":"9",},
{"lineNum":" 2114","line":"        else"},
{"lineNum":" 2115","line":"        {"},
{"lineNum":" 2116","line":"            __h->__next_ = __pn->__next_;","class":"linePartCov","hits":"6","order":"425","possible_hits":"50",},
{"lineNum":" 2117","line":"            __pn->__next_ = static_cast<__next_pointer>(__h.get());","class":"linePartCov","hits":"3","order":"426","possible_hits":"38",},
{"lineNum":" 2118","line":"        }"},
{"lineNum":" 2119","line":"        __nd = static_cast<__next_pointer>(__h.release());"},
{"lineNum":" 2120","line":"        // increment size"},
{"lineNum":" 2121","line":"        ++size();","class":"linePartCov","hits":"3","order":"163","possible_hits":"38",},
{"lineNum":" 2122","line":"        __inserted = true;"},
{"lineNum":" 2123","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"26",},
{"lineNum":" 2124","line":"__done:"},
{"lineNum":" 2125","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2126","line":"    return pair<iterator, bool>(iterator(__nd, this), __inserted);"},
{"lineNum":" 2127","line":"#else"},
{"lineNum":" 2128","line":"    return pair<iterator, bool>(iterator(__nd), __inserted);"},
{"lineNum":" 2129","line":"#endif"},
{"lineNum":" 2130","line":"}","class":"linePartCov","hits":"4","order":"164","possible_hits":"50",},
{"lineNum":" 2131","line":""},
{"lineNum":" 2132","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2133","line":"template <class... _Args>"},
{"lineNum":" 2134","line":"pair<typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator, bool>"},
{"lineNum":" 2135","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__emplace_unique_impl(_Args&&... __args)"},
{"lineNum":" 2136","line":"{"},
{"lineNum":" 2137","line":"    __node_holder __h = __construct_node(_VSTD::forward<_Args>(__args)...);"},
{"lineNum":" 2138","line":"    pair<iterator, bool> __r = __node_insert_unique(__h.get());"},
{"lineNum":" 2139","line":"    if (__r.second)"},
{"lineNum":" 2140","line":"        __h.release();"},
{"lineNum":" 2141","line":"    return __r;"},
{"lineNum":" 2142","line":"}"},
{"lineNum":" 2143","line":""},
{"lineNum":" 2144","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2145","line":"template <class... _Args>"},
{"lineNum":" 2146","line":"typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator"},
{"lineNum":" 2147","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__emplace_multi(_Args&&... __args)"},
{"lineNum":" 2148","line":"{"},
{"lineNum":" 2149","line":"    __node_holder __h = __construct_node(_VSTD::forward<_Args>(__args)...);"},
{"lineNum":" 2150","line":"    iterator __r = __node_insert_multi(__h.get());"},
{"lineNum":" 2151","line":"    __h.release();"},
{"lineNum":" 2152","line":"    return __r;"},
{"lineNum":" 2153","line":"}"},
{"lineNum":" 2154","line":""},
{"lineNum":" 2155","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2156","line":"template <class... _Args>"},
{"lineNum":" 2157","line":"typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator"},
{"lineNum":" 2158","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__emplace_hint_multi("},
{"lineNum":" 2159","line":"        const_iterator __p, _Args&&... __args)"},
{"lineNum":" 2160","line":"{","class":"lineCov","hits":"1","order":"603","possible_hits":"1",},
{"lineNum":" 2161","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2162","line":"    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__p) == this,"},
{"lineNum":" 2163","line":"        \"unordered container::emplace_hint(const_iterator, args...) called with an iterator not\""},
{"lineNum":" 2164","line":"        \" referring to this unordered container\");"},
{"lineNum":" 2165","line":"#endif"},
{"lineNum":" 2166","line":"    __node_holder __h = __construct_node(_VSTD::forward<_Args>(__args)...);","class":"linePartCov","hits":"1","order":"604","possible_hits":"25",},
{"lineNum":" 2167","line":"    iterator __r = __node_insert_multi(__p, __h.get());","class":"linePartCov","hits":"1","order":"613","possible_hits":"25",},
{"lineNum":" 2168","line":"    __h.release();"},
{"lineNum":" 2169","line":"    return __r;"},
{"lineNum":" 2170","line":"}","class":"lineCov","hits":"1","order":"639","possible_hits":"1",},
{"lineNum":" 2171","line":""},
{"lineNum":" 2172","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 2173","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2174","line":"template <class _NodeHandle, class _InsertReturnType>"},
{"lineNum":" 2175","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2176","line":"_InsertReturnType"},
{"lineNum":" 2177","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_handle_insert_unique("},
{"lineNum":" 2178","line":"    _NodeHandle&& __nh)"},
{"lineNum":" 2179","line":"{"},
{"lineNum":" 2180","line":"    if (__nh.empty())"},
{"lineNum":" 2181","line":"        return _InsertReturnType{end(), false, _NodeHandle()};"},
{"lineNum":" 2182","line":"    pair<iterator, bool> __result = __node_insert_unique(__nh.__ptr_);"},
{"lineNum":" 2183","line":"    if (__result.second)"},
{"lineNum":" 2184","line":"        __nh.__release_ptr();"},
{"lineNum":" 2185","line":"    return _InsertReturnType{__result.first, __result.second, _VSTD::move(__nh)};"},
{"lineNum":" 2186","line":"}"},
{"lineNum":" 2187","line":""},
{"lineNum":" 2188","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2189","line":"template <class _NodeHandle>"},
{"lineNum":" 2190","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2191","line":"typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator"},
{"lineNum":" 2192","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_handle_insert_unique("},
{"lineNum":" 2193","line":"    const_iterator, _NodeHandle&& __nh)"},
{"lineNum":" 2194","line":"{"},
{"lineNum":" 2195","line":"    if (__nh.empty())"},
{"lineNum":" 2196","line":"        return end();"},
{"lineNum":" 2197","line":"    pair<iterator, bool> __result = __node_insert_unique(__nh.__ptr_);"},
{"lineNum":" 2198","line":"    if (__result.second)"},
{"lineNum":" 2199","line":"        __nh.__release_ptr();"},
{"lineNum":" 2200","line":"    return __result.first;"},
{"lineNum":" 2201","line":"}"},
{"lineNum":" 2202","line":""},
{"lineNum":" 2203","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2204","line":"template <class _NodeHandle>"},
{"lineNum":" 2205","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2206","line":"_NodeHandle"},
{"lineNum":" 2207","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_handle_extract("},
{"lineNum":" 2208","line":"    key_type const& __key)"},
{"lineNum":" 2209","line":"{"},
{"lineNum":" 2210","line":"    iterator __i = find(__key);"},
{"lineNum":" 2211","line":"    if (__i == end())"},
{"lineNum":" 2212","line":"        return _NodeHandle();"},
{"lineNum":" 2213","line":"    return __node_handle_extract<_NodeHandle>(__i);"},
{"lineNum":" 2214","line":"}"},
{"lineNum":" 2215","line":""},
{"lineNum":" 2216","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2217","line":"template <class _NodeHandle>"},
{"lineNum":" 2218","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2219","line":"_NodeHandle"},
{"lineNum":" 2220","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_handle_extract("},
{"lineNum":" 2221","line":"    const_iterator __p)"},
{"lineNum":" 2222","line":"{"},
{"lineNum":" 2223","line":"    allocator_type __alloc(__node_alloc());"},
{"lineNum":" 2224","line":"    return _NodeHandle(remove(__p).release(), __alloc);"},
{"lineNum":" 2225","line":"}"},
{"lineNum":" 2226","line":""},
{"lineNum":" 2227","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2228","line":"template <class _Table>"},
{"lineNum":" 2229","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2230","line":"void"},
{"lineNum":" 2231","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_handle_merge_unique("},
{"lineNum":" 2232","line":"    _Table& __source)"},
{"lineNum":" 2233","line":"{"},
{"lineNum":" 2234","line":"    static_assert(is_same<__node, typename _Table::__node>::value, \"\");"},
{"lineNum":" 2235","line":""},
{"lineNum":" 2236","line":"    for (typename _Table::iterator __it = __source.begin();"},
{"lineNum":" 2237","line":"         __it != __source.end();)"},
{"lineNum":" 2238","line":"    {"},
{"lineNum":" 2239","line":"        __node_pointer __src_ptr = __it.__node_->__upcast();"},
{"lineNum":" 2240","line":"        size_t __hash = hash_function()(__src_ptr->__value_);"},
{"lineNum":" 2241","line":"        __next_pointer __existing_node ="},
{"lineNum":" 2242","line":"            __node_insert_unique_prepare(__hash, __src_ptr->__value_);"},
{"lineNum":" 2243","line":"        auto __prev_iter = __it++;"},
{"lineNum":" 2244","line":"        if (__existing_node == nullptr)"},
{"lineNum":" 2245","line":"        {"},
{"lineNum":" 2246","line":"            (void)__source.remove(__prev_iter).release();"},
{"lineNum":" 2247","line":"            __src_ptr->__hash_ = __hash;"},
{"lineNum":" 2248","line":"            __node_insert_unique_perform(__src_ptr);"},
{"lineNum":" 2249","line":"        }"},
{"lineNum":" 2250","line":"    }"},
{"lineNum":" 2251","line":"}"},
{"lineNum":" 2252","line":""},
{"lineNum":" 2253","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2254","line":"template <class _NodeHandle>"},
{"lineNum":" 2255","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2256","line":"typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator"},
{"lineNum":" 2257","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_handle_insert_multi("},
{"lineNum":" 2258","line":"    _NodeHandle&& __nh)"},
{"lineNum":" 2259","line":"{"},
{"lineNum":" 2260","line":"    if (__nh.empty())"},
{"lineNum":" 2261","line":"        return end();"},
{"lineNum":" 2262","line":"    iterator __result = __node_insert_multi(__nh.__ptr_);"},
{"lineNum":" 2263","line":"    __nh.__release_ptr();"},
{"lineNum":" 2264","line":"    return __result;"},
{"lineNum":" 2265","line":"}"},
{"lineNum":" 2266","line":""},
{"lineNum":" 2267","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2268","line":"template <class _NodeHandle>"},
{"lineNum":" 2269","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2270","line":"typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator"},
{"lineNum":" 2271","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_handle_insert_multi("},
{"lineNum":" 2272","line":"    const_iterator __hint, _NodeHandle&& __nh)"},
{"lineNum":" 2273","line":"{"},
{"lineNum":" 2274","line":"    if (__nh.empty())"},
{"lineNum":" 2275","line":"        return end();"},
{"lineNum":" 2276","line":"    iterator __result = __node_insert_multi(__hint, __nh.__ptr_);"},
{"lineNum":" 2277","line":"    __nh.__release_ptr();"},
{"lineNum":" 2278","line":"    return __result;"},
{"lineNum":" 2279","line":"}"},
{"lineNum":" 2280","line":""},
{"lineNum":" 2281","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2282","line":"template <class _Table>"},
{"lineNum":" 2283","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2284","line":"void"},
{"lineNum":" 2285","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_handle_merge_multi("},
{"lineNum":" 2286","line":"    _Table& __source)"},
{"lineNum":" 2287","line":"{"},
{"lineNum":" 2288","line":"    static_assert(is_same<typename _Table::__node, __node>::value, \"\");"},
{"lineNum":" 2289","line":""},
{"lineNum":" 2290","line":"    for (typename _Table::iterator __it = __source.begin();"},
{"lineNum":" 2291","line":"         __it != __source.end();)"},
{"lineNum":" 2292","line":"    {"},
{"lineNum":" 2293","line":"        __node_pointer __src_ptr = __it.__node_->__upcast();"},
{"lineNum":" 2294","line":"        size_t __src_hash = hash_function()(__src_ptr->__value_);"},
{"lineNum":" 2295","line":"        __next_pointer __pn ="},
{"lineNum":" 2296","line":"            __node_insert_multi_prepare(__src_hash, __src_ptr->__value_);"},
{"lineNum":" 2297","line":"        (void)__source.remove(__it++).release();"},
{"lineNum":" 2298","line":"        __src_ptr->__hash_ = __src_hash;"},
{"lineNum":" 2299","line":"        __node_insert_multi_perform(__src_ptr, __pn);"},
{"lineNum":" 2300","line":"    }"},
{"lineNum":" 2301","line":"}"},
{"lineNum":" 2302","line":"#endif // _LIBCPP_STD_VER > 14"},
{"lineNum":" 2303","line":""},
{"lineNum":" 2304","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2305","line":"void"},
{"lineNum":" 2306","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::rehash(size_type __n)"},
{"lineNum":" 2307","line":"_LIBCPP_DISABLE_UBSAN_UNSIGNED_INTEGER_CHECK"},
{"lineNum":" 2308","line":"{","class":"linePartCov","hits":"3","order":"132","possible_hits":"33",},
{"lineNum":" 2309","line":"    if (__n == 1)","class":"linePartCov","hits":"3","order":"133","possible_hits":"33",},
{"lineNum":" 2310","line":"        __n = 2;"},
{"lineNum":" 2311","line":"    else if (__n & (__n - 1))","class":"linePartCov","hits":"2","order":"483","possible_hits":"33",},
{"lineNum":" 2312","line":"        __n = __next_prime(__n);","class":"linePartCov","hits":"2","order":"484","possible_hits":"33",},
{"lineNum":" 2313","line":"    size_type __bc = bucket_count();"},
{"lineNum":" 2314","line":"    if (__n > __bc)","class":"linePartCov","hits":"3","order":"134","possible_hits":"33",},
{"lineNum":" 2315","line":"        __rehash(__n);","class":"linePartCov","hits":"3","order":"135","possible_hits":"8",},
{"lineNum":" 2316","line":"    else if (__n < __bc)","class":"lineNoCov","hits":"0","possible_hits":"33",},
{"lineNum":" 2317","line":"    {"},
{"lineNum":" 2318","line":"        __n = _VSTD::max<size_type>","class":"lineNoCov","hits":"0","possible_hits":"33",},
{"lineNum":" 2319","line":"              ("},
{"lineNum":" 2320","line":"                  __n,"},
{"lineNum":" 2321","line":"                  __is_hash_power2(__bc) ? __next_hash_pow2(size_t(ceil(float(size()) / max_load_factor()))) :","class":"lineNoCov","hits":"0","possible_hits":"24",},
{"lineNum":" 2322","line":"                                           __next_prime(size_t(ceil(float(size()) / max_load_factor())))","class":"lineNoCov","hits":"0","possible_hits":"41",},
{"lineNum":" 2323","line":"              );"},
{"lineNum":" 2324","line":"        if (__n < __bc)","class":"lineNoCov","hits":"0","possible_hits":"33",},
{"lineNum":" 2325","line":"            __rehash(__n);","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 2326","line":"    }"},
{"lineNum":" 2327","line":"}","class":"lineNoCov","hits":"0","possible_hits":"58",},
{"lineNum":" 2328","line":""},
{"lineNum":" 2329","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2330","line":"void"},
{"lineNum":" 2331","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__rehash(size_type __nbc)"},
{"lineNum":" 2332","line":"{","class":"linePartCov","hits":"3","order":"136","possible_hits":"33",},
{"lineNum":" 2333","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2334","line":"    __get_db()->__invalidate_all(this);"},
{"lineNum":" 2335","line":"#endif"},
{"lineNum":" 2336","line":"    __pointer_allocator& __npa = __bucket_list_.get_deleter().__alloc();"},
{"lineNum":" 2337","line":"    __bucket_list_.reset(__nbc > 0 ?","class":"linePartCov","hits":"6","order":"137","possible_hits":"49",},
{"lineNum":" 2338","line":"                      __pointer_alloc_traits::allocate(__npa, __nbc) : nullptr);","class":"linePartCov","hits":"3","order":"138","possible_hits":"8",},
{"lineNum":" 2339","line":"    __bucket_list_.get_deleter().size() = __nbc;","class":"linePartCov","hits":"3","order":"144","possible_hits":"58",},
{"lineNum":" 2340","line":"    if (__nbc > 0)","class":"linePartCov","hits":"3","order":"145","possible_hits":"8",},
{"lineNum":" 2341","line":"    {"},
{"lineNum":" 2342","line":"        for (size_type __i = 0; __i < __nbc; ++__i)","class":"linePartCov","hits":"3","order":"148","possible_hits":"108",},
{"lineNum":" 2343","line":"            __bucket_list_[__i] = nullptr;","class":"linePartCov","hits":"3","order":"147","possible_hits":"133",},
{"lineNum":" 2344","line":"        __next_pointer __pp = __p1_.first().__ptr();"},
{"lineNum":" 2345","line":"        __next_pointer __cp = __pp->__next_;","class":"linePartCov","hits":"3","order":"149","possible_hits":"33",},
{"lineNum":" 2346","line":"        if (__cp != nullptr)","class":"linePartCov","hits":"3","order":"150","possible_hits":"33",},
{"lineNum":" 2347","line":"        {"},
{"lineNum":" 2348","line":"            size_type __chash = __constrain_hash(__cp->__hash(), __nbc);","class":"linePartCov","hits":"2","order":"486","possible_hits":"8",},
{"lineNum":" 2349","line":"            __bucket_list_[__chash] = __pp;","class":"linePartCov","hits":"2","order":"488","possible_hits":"33",},
{"lineNum":" 2350","line":"            size_type __phash = __chash;"},
{"lineNum":" 2351","line":"            for (__pp = __cp, __cp = __cp->__next_; __cp != nullptr;","class":"linePartCov","hits":"4","order":"489","possible_hits":"41",},
{"lineNum":" 2352","line":"                                                           __cp = __pp->__next_)"},
{"lineNum":" 2353","line":"            {"},
{"lineNum":" 2354","line":"                __chash = __constrain_hash(__cp->__hash(), __nbc);"},
{"lineNum":" 2355","line":"                if (__chash == __phash)","class":"linePartCov","hits":"4","order":"490","possible_hits":"107",},
{"lineNum":" 2356","line":"                    __pp = __cp;","class":"linePartCov","hits":"2","order":"491","possible_hits":"8",},
{"lineNum":" 2357","line":"                else"},
{"lineNum":" 2358","line":"                {"},
{"lineNum":" 2359","line":"                    if (__bucket_list_[__chash] == nullptr)","class":"linePartCov","hits":"2","order":"518","possible_hits":"33",},
{"lineNum":" 2360","line":"                    {"},
{"lineNum":" 2361","line":"                        __bucket_list_[__chash] = __pp;","class":"linePartCov","hits":"4","order":"519","possible_hits":"41",},
{"lineNum":" 2362","line":"                        __pp = __cp;"},
{"lineNum":" 2363","line":"                        __phash = __chash;"},
{"lineNum":" 2364","line":"                    }"},
{"lineNum":" 2365","line":"                    else"},
{"lineNum":" 2366","line":"                    {"},
{"lineNum":" 2367","line":"                        __next_pointer __np = __cp;"},
{"lineNum":" 2368","line":"                        for (; __np->__next_ != nullptr &&","class":"linePartCov","hits":"3","order":"684","possible_hits":"82",},
{"lineNum":" 2369","line":"                               key_eq()(__cp->__upcast()->__value_,","class":"linePartCov","hits":"2","order":"685","possible_hits":"16",},
{"lineNum":" 2370","line":"                                        __np->__next_->__upcast()->__value_);","class":"linePartCov","hits":"1","order":"686","possible_hits":"8",},
{"lineNum":" 2371","line":"                                                           __np = __np->__next_)","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 2372","line":"                            ;"},
{"lineNum":" 2373","line":"                        __pp->__next_ = __np->__next_;","class":"linePartCov","hits":"1","order":"687","possible_hits":"33",},
{"lineNum":" 2374","line":"                        __np->__next_ = __bucket_list_[__chash]->__next_;","class":"linePartCov","hits":"1","order":"688","possible_hits":"33",},
{"lineNum":" 2375","line":"                        __bucket_list_[__chash]->__next_ = __cp;","class":"linePartCov","hits":"1","order":"689","possible_hits":"33",},
{"lineNum":" 2376","line":""},
{"lineNum":" 2377","line":"                    }"},
{"lineNum":" 2378","line":"                }"},
{"lineNum":" 2379","line":"            }"},
{"lineNum":" 2380","line":"        }"},
{"lineNum":" 2381","line":"    }","class":"linePartCov","hits":"3","order":"151","possible_hits":"8",},
{"lineNum":" 2382","line":"}","class":"linePartCov","hits":"3","order":"152","possible_hits":"33",},
{"lineNum":" 2383","line":""},
{"lineNum":" 2384","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2385","line":"template <class _Key>"},
{"lineNum":" 2386","line":"typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator"},
{"lineNum":" 2387","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::find(const _Key& __k)"},
{"lineNum":" 2388","line":"{","class":"linePartCov","hits":"2","order":"594","possible_hits":"6",},
{"lineNum":" 2389","line":"    size_t __hash = hash_function()(__k);"},
{"lineNum":" 2390","line":"    size_type __bc = bucket_count();"},
{"lineNum":" 2391","line":"    if (__bc != 0)","class":"linePartCov","hits":"2","order":"595","possible_hits":"129",},
{"lineNum":" 2392","line":"    {"},
{"lineNum":" 2393","line":"        size_t __chash = __constrain_hash(__hash, __bc);"},
{"lineNum":" 2394","line":"        __next_pointer __nd = __bucket_list_[__chash];","class":"linePartCov","hits":"1","order":"645","possible_hits":"129",},
{"lineNum":" 2395","line":"        if (__nd != nullptr)","class":"linePartCov","hits":"1","order":"646","possible_hits":"129",},
{"lineNum":" 2396","line":"        {"},
{"lineNum":" 2397","line":"            for (__nd = __nd->__next_; __nd != nullptr &&","class":"linePartCov","hits":"3","order":"647","possible_hits":"363",},
{"lineNum":" 2398","line":"                (__nd->__hash() == __hash","class":"linePartCov","hits":"1","order":"648","possible_hits":"129",},
{"lineNum":" 2399","line":"                  || __constrain_hash(__nd->__hash(), __bc) == __chash);","class":"linePartCov","hits":"2","order":"649","possible_hits":"306",},
{"lineNum":" 2400","line":"                                                           __nd = __nd->__next_)","class":"linePartCov","hits":"1","order":"693","possible_hits":"6",},
{"lineNum":" 2401","line":"            {"},
{"lineNum":" 2402","line":"                if ((__nd->__hash() == __hash)","class":"linePartCov","hits":"2","order":"650","possible_hits":"135",},
{"lineNum":" 2403","line":"                    && key_eq()(__nd->__upcast()->__value_, __k))","class":"linePartCov","hits":"1","order":"651","possible_hits":"6",},
{"lineNum":" 2404","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2405","line":"                    return iterator(__nd, this);"},
{"lineNum":" 2406","line":"#else"},
{"lineNum":" 2407","line":"                    return iterator(__nd);"},
{"lineNum":" 2408","line":"#endif"},
{"lineNum":" 2409","line":"            }"},
{"lineNum":" 2410","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 2411","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 2412","line":"    return end();","class":"linePartCov","hits":"1","order":"596","possible_hits":"6",},
{"lineNum":" 2413","line":"}","class":"linePartCov","hits":"2","order":"597","possible_hits":"12",},
{"lineNum":" 2414","line":""},
{"lineNum":" 2415","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2416","line":"template <class _Key>"},
{"lineNum":" 2417","line":"typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::const_iterator"},
{"lineNum":" 2418","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::find(const _Key& __k) const"},
{"lineNum":" 2419","line":"{","class":"linePartCov","hits":"2","order":"320","possible_hits":"4",},
{"lineNum":" 2420","line":"    size_t __hash = hash_function()(__k);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2421","line":"    size_type __bc = bucket_count();"},
{"lineNum":" 2422","line":"    if (__bc != 0)","class":"linePartCov","hits":"2","order":"321","possible_hits":"174",},
{"lineNum":" 2423","line":"    {"},
{"lineNum":" 2424","line":"        size_t __chash = __constrain_hash(__hash, __bc);"},
{"lineNum":" 2425","line":"        __next_pointer __nd = __bucket_list_[__chash];","class":"linePartCov","hits":"2","order":"322","possible_hits":"174",},
{"lineNum":" 2426","line":"        if (__nd != nullptr)","class":"linePartCov","hits":"2","order":"323","possible_hits":"174",},
{"lineNum":" 2427","line":"        {"},
{"lineNum":" 2428","line":"            for (__nd = __nd->__next_; __nd != nullptr &&","class":"linePartCov","hits":"6","order":"324","possible_hits":"489",},
{"lineNum":" 2429","line":"                (__hash == __nd->__hash()","class":"linePartCov","hits":"2","order":"325","possible_hits":"174",},
{"lineNum":" 2430","line":"                    || __constrain_hash(__nd->__hash(), __bc) == __chash);","class":"linePartCov","hits":"4","order":"326","possible_hits":"402",},
{"lineNum":" 2431","line":"                                                           __nd = __nd->__next_)","class":"linePartCov","hits":"2","order":"329","possible_hits":"3",},
{"lineNum":" 2432","line":"            {"},
{"lineNum":" 2433","line":"                if ((__nd->__hash() == __hash)","class":"linePartCov","hits":"4","order":"327","possible_hits":"176",},
{"lineNum":" 2434","line":"                    && key_eq()(__nd->__upcast()->__value_, __k))","class":"linePartCov","hits":"2","order":"328","possible_hits":"3",},
{"lineNum":" 2435","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2436","line":"                    return const_iterator(__nd, this);"},
{"lineNum":" 2437","line":"#else"},
{"lineNum":" 2438","line":"                    return const_iterator(__nd);"},
{"lineNum":" 2439","line":"#endif"},
{"lineNum":" 2440","line":"            }"},
{"lineNum":" 2441","line":"        }","class":"linePartCov","hits":"2","order":"330","possible_hits":"3",},
{"lineNum":" 2442","line":""},
{"lineNum":" 2443","line":"    }","class":"linePartCov","hits":"2","order":"331","possible_hits":"3",},
{"lineNum":" 2444","line":"    return end();","class":"linePartCov","hits":"2","order":"332","possible_hits":"3",},
{"lineNum":" 2445","line":"}","class":"linePartCov","hits":"2","order":"333","possible_hits":"7",},
{"lineNum":" 2446","line":""},
{"lineNum":" 2447","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2448","line":"template <class ..._Args>"},
{"lineNum":" 2449","line":"typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_holder"},
{"lineNum":" 2450","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__construct_node(_Args&& ...__args)"},
{"lineNum":" 2451","line":"{","class":"linePartCov","hits":"1","order":"605","possible_hits":"4",},
{"lineNum":" 2452","line":"    static_assert(!__is_hash_value_type<_Args...>::value,"},
{"lineNum":" 2453","line":"                  \"Construct cannot be called with a hash value type\");"},
{"lineNum":" 2454","line":"    __node_allocator& __na = __node_alloc();"},
{"lineNum":" 2455","line":"    __node_holder __h(__node_traits::allocate(__na, 1), _Dp(__na));"},
{"lineNum":" 2456","line":"    __node_traits::construct(__na, _NodeTypes::__get_ptr(__h->__value_), _VSTD::forward<_Args>(__args)...);","class":"lineCov","hits":"1","order":"606","possible_hits":"1",},
{"lineNum":" 2457","line":"    __h.get_deleter().__value_constructed = true;","class":"linePartCov","hits":"1","order":"608","possible_hits":"4",},
{"lineNum":" 2458","line":"    __h->__hash_ = hash_function()(__h->__value_);","class":"linePartCov","hits":"1","order":"610","possible_hits":"4",},
{"lineNum":" 2459","line":"    __h->__next_ = nullptr;","class":"linePartCov","hits":"1","order":"611","possible_hits":"4",},
{"lineNum":" 2460","line":"    return __h;"},
{"lineNum":" 2461","line":"}","class":"linePartCov","hits":"1","order":"612","possible_hits":"7",},
{"lineNum":" 2462","line":""},
{"lineNum":" 2463","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2464","line":"template <class _First, class ..._Rest>"},
{"lineNum":" 2465","line":"typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_holder"},
{"lineNum":" 2466","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__construct_node_hash("},
{"lineNum":" 2467","line":"    size_t __hash, _First&& __f, _Rest&& ...__rest)"},
{"lineNum":" 2468","line":"{","class":"linePartCov","hits":"3","order":"120","possible_hits":"9",},
{"lineNum":" 2469","line":"    static_assert(!__is_hash_value_type<_First, _Rest...>::value,"},
{"lineNum":" 2470","line":"                  \"Construct cannot be called with a hash value type\");"},
{"lineNum":" 2471","line":"    __node_allocator& __na = __node_alloc();"},
{"lineNum":" 2472","line":"    __node_holder __h(__node_traits::allocate(__na, 1), _Dp(__na));"},
{"lineNum":" 2473","line":"    __node_traits::construct(__na, _NodeTypes::__get_ptr(__h->__value_),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2474","line":"                             _VSTD::forward<_First>(__f),","class":"linePartCov","hits":"3","order":"122","possible_hits":"9",},
{"lineNum":" 2475","line":"                             _VSTD::forward<_Rest>(__rest)...);"},
{"lineNum":" 2476","line":"    __h.get_deleter().__value_constructed = true;","class":"linePartCov","hits":"4","order":"123","possible_hits":"32",},
{"lineNum":" 2477","line":"    __h->__hash_ = __hash;","class":"linePartCov","hits":"3","order":"124","possible_hits":"38",},
{"lineNum":" 2478","line":"    __h->__next_ = nullptr;","class":"linePartCov","hits":"3","order":"125","possible_hits":"38",},
{"lineNum":" 2479","line":"    return __h;"},
{"lineNum":" 2480","line":"}","class":"linePartCov","hits":"3","order":"126","possible_hits":"18",},
{"lineNum":" 2481","line":""},
{"lineNum":" 2482","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2483","line":"typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator"},
{"lineNum":" 2484","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::erase(const_iterator __p)"},
{"lineNum":" 2485","line":"{"},
{"lineNum":" 2486","line":"    __next_pointer __np = __p.__node_;"},
{"lineNum":" 2487","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2488","line":"    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__p) == this,"},
{"lineNum":" 2489","line":"        \"unordered container erase(iterator) called with an iterator not\""},
{"lineNum":" 2490","line":"        \" referring to this container\");"},
{"lineNum":" 2491","line":"    _LIBCPP_ASSERT(__p != end(),"},
{"lineNum":" 2492","line":"        \"unordered container erase(iterator) called with a non-dereferenceable iterator\");"},
{"lineNum":" 2493","line":"    iterator __r(__np, this);"},
{"lineNum":" 2494","line":"#else"},
{"lineNum":" 2495","line":"    iterator __r(__np);"},
{"lineNum":" 2496","line":"#endif"},
{"lineNum":" 2497","line":"    ++__r;"},
{"lineNum":" 2498","line":"    remove(__p);"},
{"lineNum":" 2499","line":"    return __r;"},
{"lineNum":" 2500","line":"}"},
{"lineNum":" 2501","line":""},
{"lineNum":" 2502","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2503","line":"typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator"},
{"lineNum":" 2504","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::erase(const_iterator __first,"},
{"lineNum":" 2505","line":"                                                const_iterator __last)"},
{"lineNum":" 2506","line":"{"},
{"lineNum":" 2507","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2508","line":"    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__first) == this,"},
{"lineNum":" 2509","line":"        \"unordered container::erase(iterator, iterator) called with an iterator not\""},
{"lineNum":" 2510","line":"        \" referring to this container\");"},
{"lineNum":" 2511","line":"    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__last) == this,"},
{"lineNum":" 2512","line":"        \"unordered container::erase(iterator, iterator) called with an iterator not\""},
{"lineNum":" 2513","line":"        \" referring to this container\");"},
{"lineNum":" 2514","line":"#endif"},
{"lineNum":" 2515","line":"    for (const_iterator __p = __first; __first != __last; __p = __first)"},
{"lineNum":" 2516","line":"    {"},
{"lineNum":" 2517","line":"        ++__first;"},
{"lineNum":" 2518","line":"        erase(__p);"},
{"lineNum":" 2519","line":"    }"},
{"lineNum":" 2520","line":"    __next_pointer __np = __last.__node_;"},
{"lineNum":" 2521","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2522","line":"    return iterator (__np, this);"},
{"lineNum":" 2523","line":"#else"},
{"lineNum":" 2524","line":"    return iterator (__np);"},
{"lineNum":" 2525","line":"#endif"},
{"lineNum":" 2526","line":"}"},
{"lineNum":" 2527","line":""},
{"lineNum":" 2528","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2529","line":"template <class _Key>"},
{"lineNum":" 2530","line":"typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::size_type"},
{"lineNum":" 2531","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__erase_unique(const _Key& __k)"},
{"lineNum":" 2532","line":"{"},
{"lineNum":" 2533","line":"    iterator __i = find(__k);"},
{"lineNum":" 2534","line":"    if (__i == end())"},
{"lineNum":" 2535","line":"        return 0;"},
{"lineNum":" 2536","line":"    erase(__i);"},
{"lineNum":" 2537","line":"    return 1;"},
{"lineNum":" 2538","line":"}"},
{"lineNum":" 2539","line":""},
{"lineNum":" 2540","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2541","line":"template <class _Key>"},
{"lineNum":" 2542","line":"typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::size_type"},
{"lineNum":" 2543","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__erase_multi(const _Key& __k)"},
{"lineNum":" 2544","line":"{"},
{"lineNum":" 2545","line":"    size_type __r = 0;"},
{"lineNum":" 2546","line":"    iterator __i = find(__k);"},
{"lineNum":" 2547","line":"    if (__i != end())"},
{"lineNum":" 2548","line":"    {"},
{"lineNum":" 2549","line":"        iterator __e = end();"},
{"lineNum":" 2550","line":"        do"},
{"lineNum":" 2551","line":"        {"},
{"lineNum":" 2552","line":"            erase(__i++);"},
{"lineNum":" 2553","line":"            ++__r;"},
{"lineNum":" 2554","line":"        } while (__i != __e && key_eq()(*__i, __k));"},
{"lineNum":" 2555","line":"    }"},
{"lineNum":" 2556","line":"    return __r;"},
{"lineNum":" 2557","line":"}"},
{"lineNum":" 2558","line":""},
{"lineNum":" 2559","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2560","line":"typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_holder"},
{"lineNum":" 2561","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::remove(const_iterator __p) _NOEXCEPT"},
{"lineNum":" 2562","line":"{"},
{"lineNum":" 2563","line":"    // current node"},
{"lineNum":" 2564","line":"    __next_pointer __cn = __p.__node_;"},
{"lineNum":" 2565","line":"    size_type __bc = bucket_count();"},
{"lineNum":" 2566","line":"    size_t __chash = __constrain_hash(__cn->__hash(), __bc);"},
{"lineNum":" 2567","line":"    // find previous node"},
{"lineNum":" 2568","line":"    __next_pointer __pn = __bucket_list_[__chash];"},
{"lineNum":" 2569","line":"    for (; __pn->__next_ != __cn; __pn = __pn->__next_)"},
{"lineNum":" 2570","line":"        ;"},
{"lineNum":" 2571","line":"    // Fix up __bucket_list_"},
{"lineNum":" 2572","line":"        // if __pn is not in same bucket (before begin is not in same bucket) &&"},
{"lineNum":" 2573","line":"        //    if __cn->__next_ is not in same bucket (nullptr is not in same bucket)"},
{"lineNum":" 2574","line":"    if (__pn == __p1_.first().__ptr()"},
{"lineNum":" 2575","line":"            || __constrain_hash(__pn->__hash(), __bc) != __chash)"},
{"lineNum":" 2576","line":"    {"},
{"lineNum":" 2577","line":"        if (__cn->__next_ == nullptr"},
{"lineNum":" 2578","line":"            || __constrain_hash(__cn->__next_->__hash(), __bc) != __chash)"},
{"lineNum":" 2579","line":"            __bucket_list_[__chash] = nullptr;"},
{"lineNum":" 2580","line":"    }"},
{"lineNum":" 2581","line":"        // if __cn->__next_ is not in same bucket (nullptr is in same bucket)"},
{"lineNum":" 2582","line":"    if (__cn->__next_ != nullptr)"},
{"lineNum":" 2583","line":"    {"},
{"lineNum":" 2584","line":"        size_t __nhash = __constrain_hash(__cn->__next_->__hash(), __bc);"},
{"lineNum":" 2585","line":"        if (__nhash != __chash)"},
{"lineNum":" 2586","line":"            __bucket_list_[__nhash] = __pn;"},
{"lineNum":" 2587","line":"    }"},
{"lineNum":" 2588","line":"    // remove __cn"},
{"lineNum":" 2589","line":"    __pn->__next_ = __cn->__next_;"},
{"lineNum":" 2590","line":"    __cn->__next_ = nullptr;"},
{"lineNum":" 2591","line":"    --size();"},
{"lineNum":" 2592","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2593","line":"    __c_node* __c = __get_db()->__find_c_and_lock(this);"},
{"lineNum":" 2594","line":"    for (__i_node** __dp = __c->end_; __dp != __c->beg_; )"},
{"lineNum":" 2595","line":"    {"},
{"lineNum":" 2596","line":"        --__dp;"},
{"lineNum":" 2597","line":"        iterator* __i = static_cast<iterator*>((*__dp)->__i_);"},
{"lineNum":" 2598","line":"        if (__i->__node_ == __cn)"},
{"lineNum":" 2599","line":"        {"},
{"lineNum":" 2600","line":"            (*__dp)->__c_ = nullptr;"},
{"lineNum":" 2601","line":"            if (--__c->end_ != __dp)"},
{"lineNum":" 2602","line":"                _VSTD::memmove(__dp, __dp+1, (__c->end_ - __dp)*sizeof(__i_node*));"},
{"lineNum":" 2603","line":"        }"},
{"lineNum":" 2604","line":"    }"},
{"lineNum":" 2605","line":"    __get_db()->unlock();"},
{"lineNum":" 2606","line":"#endif"},
{"lineNum":" 2607","line":"    return __node_holder(__cn->__upcast(), _Dp(__node_alloc(), true));"},
{"lineNum":" 2608","line":"}"},
{"lineNum":" 2609","line":""},
{"lineNum":" 2610","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2611","line":"template <class _Key>"},
{"lineNum":" 2612","line":"inline"},
{"lineNum":" 2613","line":"typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::size_type"},
{"lineNum":" 2614","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__count_unique(const _Key& __k) const"},
{"lineNum":" 2615","line":"{"},
{"lineNum":" 2616","line":"    return static_cast<size_type>(find(__k) != end());","class":"linePartCov","hits":"11","order":"319","possible_hits":"23",},
{"lineNum":" 2617","line":"}"},
{"lineNum":" 2618","line":""},
{"lineNum":" 2619","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2620","line":"template <class _Key>"},
{"lineNum":" 2621","line":"typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::size_type"},
{"lineNum":" 2622","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__count_multi(const _Key& __k) const"},
{"lineNum":" 2623","line":"{"},
{"lineNum":" 2624","line":"    size_type __r = 0;"},
{"lineNum":" 2625","line":"    const_iterator __i = find(__k);"},
{"lineNum":" 2626","line":"    if (__i != end())"},
{"lineNum":" 2627","line":"    {"},
{"lineNum":" 2628","line":"        const_iterator __e = end();"},
{"lineNum":" 2629","line":"        do"},
{"lineNum":" 2630","line":"        {"},
{"lineNum":" 2631","line":"            ++__i;"},
{"lineNum":" 2632","line":"            ++__r;"},
{"lineNum":" 2633","line":"        } while (__i != __e && key_eq()(*__i, __k));"},
{"lineNum":" 2634","line":"    }"},
{"lineNum":" 2635","line":"    return __r;"},
{"lineNum":" 2636","line":"}"},
{"lineNum":" 2637","line":""},
{"lineNum":" 2638","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2639","line":"template <class _Key>"},
{"lineNum":" 2640","line":"pair<typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator,"},
{"lineNum":" 2641","line":"     typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator>"},
{"lineNum":" 2642","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__equal_range_unique("},
{"lineNum":" 2643","line":"        const _Key& __k)"},
{"lineNum":" 2644","line":"{"},
{"lineNum":" 2645","line":"    iterator __i = find(__k);"},
{"lineNum":" 2646","line":"    iterator __j = __i;"},
{"lineNum":" 2647","line":"    if (__i != end())"},
{"lineNum":" 2648","line":"        ++__j;"},
{"lineNum":" 2649","line":"    return pair<iterator, iterator>(__i, __j);"},
{"lineNum":" 2650","line":"}"},
{"lineNum":" 2651","line":""},
{"lineNum":" 2652","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2653","line":"template <class _Key>"},
{"lineNum":" 2654","line":"pair<typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::const_iterator,"},
{"lineNum":" 2655","line":"     typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::const_iterator>"},
{"lineNum":" 2656","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__equal_range_unique("},
{"lineNum":" 2657","line":"        const _Key& __k) const"},
{"lineNum":" 2658","line":"{"},
{"lineNum":" 2659","line":"    const_iterator __i = find(__k);"},
{"lineNum":" 2660","line":"    const_iterator __j = __i;"},
{"lineNum":" 2661","line":"    if (__i != end())"},
{"lineNum":" 2662","line":"        ++__j;"},
{"lineNum":" 2663","line":"    return pair<const_iterator, const_iterator>(__i, __j);"},
{"lineNum":" 2664","line":"}"},
{"lineNum":" 2665","line":""},
{"lineNum":" 2666","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2667","line":"template <class _Key>"},
{"lineNum":" 2668","line":"pair<typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator,"},
{"lineNum":" 2669","line":"     typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator>"},
{"lineNum":" 2670","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__equal_range_multi("},
{"lineNum":" 2671","line":"        const _Key& __k)"},
{"lineNum":" 2672","line":"{","class":"lineCov","hits":"1","order":"592","possible_hits":"1",},
{"lineNum":" 2673","line":"    iterator __i = find(__k);","class":"lineCov","hits":"1","order":"593","possible_hits":"1",},
{"lineNum":" 2674","line":"    iterator __j = __i;"},
{"lineNum":" 2675","line":"    if (__i != end())","class":"lineCov","hits":"1","order":"598","possible_hits":"1",},
{"lineNum":" 2676","line":"    {"},
{"lineNum":" 2677","line":"        iterator __e = end();"},
{"lineNum":" 2678","line":"        do","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2679","line":"        {"},
{"lineNum":" 2680","line":"            ++__j;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2681","line":"        } while (__j != __e && key_eq()(*__j, __k));","class":"lineNoCov","hits":"0","possible_hits":"51",},
{"lineNum":" 2682","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2683","line":"    return pair<iterator, iterator>(__i, __j);"},
{"lineNum":" 2684","line":"}","class":"linePartCov","hits":"1","order":"599","possible_hits":"2",},
{"lineNum":" 2685","line":""},
{"lineNum":" 2686","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2687","line":"template <class _Key>"},
{"lineNum":" 2688","line":"pair<typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::const_iterator,"},
{"lineNum":" 2689","line":"     typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::const_iterator>"},
{"lineNum":" 2690","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__equal_range_multi("},
{"lineNum":" 2691","line":"        const _Key& __k) const"},
{"lineNum":" 2692","line":"{"},
{"lineNum":" 2693","line":"    const_iterator __i = find(__k);"},
{"lineNum":" 2694","line":"    const_iterator __j = __i;"},
{"lineNum":" 2695","line":"    if (__i != end())"},
{"lineNum":" 2696","line":"    {"},
{"lineNum":" 2697","line":"        const_iterator __e = end();"},
{"lineNum":" 2698","line":"        do"},
{"lineNum":" 2699","line":"        {"},
{"lineNum":" 2700","line":"            ++__j;"},
{"lineNum":" 2701","line":"        } while (__j != __e && key_eq()(*__j, __k));"},
{"lineNum":" 2702","line":"    }"},
{"lineNum":" 2703","line":"    return pair<const_iterator, const_iterator>(__i, __j);"},
{"lineNum":" 2704","line":"}"},
{"lineNum":" 2705","line":""},
{"lineNum":" 2706","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2707","line":"void"},
{"lineNum":" 2708","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::swap(__hash_table& __u)"},
{"lineNum":" 2709","line":"#if _LIBCPP_STD_VER <= 11"},
{"lineNum":" 2710","line":"    _NOEXCEPT_("},
{"lineNum":" 2711","line":"        __is_nothrow_swappable<hasher>::value && __is_nothrow_swappable<key_equal>::value"},
{"lineNum":" 2712","line":"        && (!allocator_traits<__pointer_allocator>::propagate_on_container_swap::value"},
{"lineNum":" 2713","line":"              || __is_nothrow_swappable<__pointer_allocator>::value)"},
{"lineNum":" 2714","line":"        && (!__node_traits::propagate_on_container_swap::value"},
{"lineNum":" 2715","line":"              || __is_nothrow_swappable<__node_allocator>::value)"},
{"lineNum":" 2716","line":"            )"},
{"lineNum":" 2717","line":"#else"},
{"lineNum":" 2718","line":"  _NOEXCEPT_(__is_nothrow_swappable<hasher>::value && __is_nothrow_swappable<key_equal>::value)"},
{"lineNum":" 2719","line":"#endif"},
{"lineNum":" 2720","line":"{"},
{"lineNum":" 2721","line":"    _LIBCPP_ASSERT(__node_traits::propagate_on_container_swap::value ||"},
{"lineNum":" 2722","line":"                   this->__node_alloc() == __u.__node_alloc(),"},
{"lineNum":" 2723","line":"                   \"list::swap: Either propagate_on_container_swap must be true\""},
{"lineNum":" 2724","line":"                   \" or the allocators must compare equal\");"},
{"lineNum":" 2725","line":"    {"},
{"lineNum":" 2726","line":"    __node_pointer_pointer __npp = __bucket_list_.release();"},
{"lineNum":" 2727","line":"    __bucket_list_.reset(__u.__bucket_list_.release());"},
{"lineNum":" 2728","line":"    __u.__bucket_list_.reset(__npp);"},
{"lineNum":" 2729","line":"    }"},
{"lineNum":" 2730","line":"    _VSTD::swap(__bucket_list_.get_deleter().size(), __u.__bucket_list_.get_deleter().size());"},
{"lineNum":" 2731","line":"    _VSTD::__swap_allocator(__bucket_list_.get_deleter().__alloc(),"},
{"lineNum":" 2732","line":"             __u.__bucket_list_.get_deleter().__alloc());"},
{"lineNum":" 2733","line":"    _VSTD::__swap_allocator(__node_alloc(), __u.__node_alloc());"},
{"lineNum":" 2734","line":"    _VSTD::swap(__p1_.first().__next_, __u.__p1_.first().__next_);"},
{"lineNum":" 2735","line":"    __p2_.swap(__u.__p2_);"},
{"lineNum":" 2736","line":"    __p3_.swap(__u.__p3_);"},
{"lineNum":" 2737","line":"    if (size() > 0)"},
{"lineNum":" 2738","line":"        __bucket_list_[__constrain_hash(__p1_.first().__next_->__hash(), bucket_count())] ="},
{"lineNum":" 2739","line":"            __p1_.first().__ptr();"},
{"lineNum":" 2740","line":"    if (__u.size() > 0)"},
{"lineNum":" 2741","line":"        __u.__bucket_list_[__constrain_hash(__u.__p1_.first().__next_->__hash(), __u.bucket_count())] ="},
{"lineNum":" 2742","line":"            __u.__p1_.first().__ptr();"},
{"lineNum":" 2743","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2744","line":"    __get_db()->swap(this, &__u);"},
{"lineNum":" 2745","line":"#endif"},
{"lineNum":" 2746","line":"}"},
{"lineNum":" 2747","line":""},
{"lineNum":" 2748","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2749","line":"typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::size_type"},
{"lineNum":" 2750","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::bucket_size(size_type __n) const"},
{"lineNum":" 2751","line":"{"},
{"lineNum":" 2752","line":"    _LIBCPP_ASSERT(__n < bucket_count(),"},
{"lineNum":" 2753","line":"        \"unordered container::bucket_size(n) called with n >= bucket_count()\");"},
{"lineNum":" 2754","line":"    __next_pointer __np = __bucket_list_[__n];"},
{"lineNum":" 2755","line":"    size_type __bc = bucket_count();"},
{"lineNum":" 2756","line":"    size_type __r = 0;"},
{"lineNum":" 2757","line":"    if (__np != nullptr)"},
{"lineNum":" 2758","line":"    {"},
{"lineNum":" 2759","line":"        for (__np = __np->__next_; __np != nullptr &&"},
{"lineNum":" 2760","line":"                                   __constrain_hash(__np->__hash(), __bc) == __n;"},
{"lineNum":" 2761","line":"                                                    __np = __np->__next_, ++__r)"},
{"lineNum":" 2762","line":"            ;"},
{"lineNum":" 2763","line":"    }"},
{"lineNum":" 2764","line":"    return __r;"},
{"lineNum":" 2765","line":"}"},
{"lineNum":" 2766","line":""},
{"lineNum":" 2767","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2768","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2769","line":"void"},
{"lineNum":" 2770","line":"swap(__hash_table<_Tp, _Hash, _Equal, _Alloc>& __x,"},
{"lineNum":" 2771","line":"     __hash_table<_Tp, _Hash, _Equal, _Alloc>& __y)"},
{"lineNum":" 2772","line":"    _NOEXCEPT_(_NOEXCEPT_(__x.swap(__y)))"},
{"lineNum":" 2773","line":"{"},
{"lineNum":" 2774","line":"    __x.swap(__y);"},
{"lineNum":" 2775","line":"}"},
{"lineNum":" 2776","line":""},
{"lineNum":" 2777","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2778","line":""},
{"lineNum":" 2779","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2780","line":"bool"},
{"lineNum":" 2781","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__dereferenceable(const const_iterator* __i) const"},
{"lineNum":" 2782","line":"{"},
{"lineNum":" 2783","line":"    return __i->__node_ != nullptr;"},
{"lineNum":" 2784","line":"}"},
{"lineNum":" 2785","line":""},
{"lineNum":" 2786","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2787","line":"bool"},
{"lineNum":" 2788","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__decrementable(const const_iterator*) const"},
{"lineNum":" 2789","line":"{"},
{"lineNum":" 2790","line":"    return false;"},
{"lineNum":" 2791","line":"}"},
{"lineNum":" 2792","line":""},
{"lineNum":" 2793","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2794","line":"bool"},
{"lineNum":" 2795","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__addable(const const_iterator*, ptrdiff_t) const"},
{"lineNum":" 2796","line":"{"},
{"lineNum":" 2797","line":"    return false;"},
{"lineNum":" 2798","line":"}"},
{"lineNum":" 2799","line":""},
{"lineNum":" 2800","line":"template <class _Tp, class _Hash, class _Equal, class _Alloc>"},
{"lineNum":" 2801","line":"bool"},
{"lineNum":" 2802","line":"__hash_table<_Tp, _Hash, _Equal, _Alloc>::__subscriptable(const const_iterator*, ptrdiff_t) const"},
{"lineNum":" 2803","line":"{"},
{"lineNum":" 2804","line":"    return false;"},
{"lineNum":" 2805","line":"}"},
{"lineNum":" 2806","line":""},
{"lineNum":" 2807","line":"#endif // _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2808","line":""},
{"lineNum":" 2809","line":"_LIBCPP_END_NAMESPACE_STD"},
{"lineNum":" 2810","line":""},
{"lineNum":" 2811","line":"_LIBCPP_POP_MACROS"},
{"lineNum":" 2812","line":""},
{"lineNum":" 2813","line":"#endif // _LIBCPP__HASH_TABLE"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 218, "covered" : 158,};
var merged_data = [];
