var data = {lines:[
{"lineNum":"    1","line":"/* Copyright (C) 1991-2020 Free Software Foundation, Inc."},
{"lineNum":"    2","line":"   This file is part of the GNU C Library."},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"   The GNU C Library is free software; you can redistribute it and/or"},
{"lineNum":"    5","line":"   modify it under the terms of the GNU Lesser General Public"},
{"lineNum":"    6","line":"   License as published by the Free Software Foundation; either"},
{"lineNum":"    7","line":"   version 2.1 of the License, or (at your option) any later version."},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"   The GNU C Library is distributed in the hope that it will be useful,"},
{"lineNum":"   10","line":"   but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   11","line":"   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU"},
{"lineNum":"   12","line":"   Lesser General Public License for more details."},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"   You should have received a copy of the GNU Lesser General Public"},
{"lineNum":"   15","line":"   License along with the GNU C Library; if not, see"},
{"lineNum":"   16","line":"   <https://www.gnu.org/licenses/>.  */"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"/*"},
{"lineNum":"   19","line":" *\tPOSIX Standard: 5.6 File Characteristics\t<sys/stat.h>"},
{"lineNum":"   20","line":" */"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"#ifndef\t_SYS_STAT_H"},
{"lineNum":"   23","line":"#define\t_SYS_STAT_H\t1"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"#include <features.h>"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"#include <bits/types.h>\t\t/* For __mode_t and __dev_t.  */"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"#ifdef __USE_XOPEN2K8"},
{"lineNum":"   30","line":"# include <bits/types/struct_timespec.h>"},
{"lineNum":"   31","line":"#endif"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"#if defined __USE_XOPEN || defined __USE_XOPEN2K"},
{"lineNum":"   34","line":"/* The Single Unix specification says that some more types are"},
{"lineNum":"   35","line":"   available here.  */"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"# include <bits/types/time_t.h>"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"# ifndef __dev_t_defined"},
{"lineNum":"   40","line":"typedef __dev_t dev_t;"},
{"lineNum":"   41","line":"#  define __dev_t_defined"},
{"lineNum":"   42","line":"# endif"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"# ifndef __gid_t_defined"},
{"lineNum":"   45","line":"typedef __gid_t gid_t;"},
{"lineNum":"   46","line":"#  define __gid_t_defined"},
{"lineNum":"   47","line":"# endif"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"# ifndef __ino_t_defined"},
{"lineNum":"   50","line":"#  ifndef __USE_FILE_OFFSET64"},
{"lineNum":"   51","line":"typedef __ino_t ino_t;"},
{"lineNum":"   52","line":"#  else"},
{"lineNum":"   53","line":"typedef __ino64_t ino_t;"},
{"lineNum":"   54","line":"#  endif"},
{"lineNum":"   55","line":"#  define __ino_t_defined"},
{"lineNum":"   56","line":"# endif"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"# ifndef __mode_t_defined"},
{"lineNum":"   59","line":"typedef __mode_t mode_t;"},
{"lineNum":"   60","line":"#  define __mode_t_defined"},
{"lineNum":"   61","line":"# endif"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"# ifndef __nlink_t_defined"},
{"lineNum":"   64","line":"typedef __nlink_t nlink_t;"},
{"lineNum":"   65","line":"#  define __nlink_t_defined"},
{"lineNum":"   66","line":"# endif"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"# ifndef __off_t_defined"},
{"lineNum":"   69","line":"#  ifndef __USE_FILE_OFFSET64"},
{"lineNum":"   70","line":"typedef __off_t off_t;"},
{"lineNum":"   71","line":"#  else"},
{"lineNum":"   72","line":"typedef __off64_t off_t;"},
{"lineNum":"   73","line":"#  endif"},
{"lineNum":"   74","line":"#  define __off_t_defined"},
{"lineNum":"   75","line":"# endif"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"# ifndef __uid_t_defined"},
{"lineNum":"   78","line":"typedef __uid_t uid_t;"},
{"lineNum":"   79","line":"#  define __uid_t_defined"},
{"lineNum":"   80","line":"# endif"},
{"lineNum":"   81","line":"#endif\t/* X/Open */"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"#ifdef __USE_UNIX98"},
{"lineNum":"   84","line":"# ifndef __blkcnt_t_defined"},
{"lineNum":"   85","line":"#  ifndef __USE_FILE_OFFSET64"},
{"lineNum":"   86","line":"typedef __blkcnt_t blkcnt_t;"},
{"lineNum":"   87","line":"#  else"},
{"lineNum":"   88","line":"typedef __blkcnt64_t blkcnt_t;"},
{"lineNum":"   89","line":"#  endif"},
{"lineNum":"   90","line":"#  define __blkcnt_t_defined"},
{"lineNum":"   91","line":"# endif"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"# ifndef __blksize_t_defined"},
{"lineNum":"   94","line":"typedef __blksize_t blksize_t;"},
{"lineNum":"   95","line":"#  define __blksize_t_defined"},
{"lineNum":"   96","line":"# endif"},
{"lineNum":"   97","line":"#endif\t/* Unix98 */"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"__BEGIN_DECLS"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"#include <bits/stat.h>"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"#if defined __USE_MISC || defined __USE_XOPEN"},
{"lineNum":"  104","line":"# define S_IFMT\t\t__S_IFMT"},
{"lineNum":"  105","line":"# define S_IFDIR\t__S_IFDIR"},
{"lineNum":"  106","line":"# define S_IFCHR\t__S_IFCHR"},
{"lineNum":"  107","line":"# define S_IFBLK\t__S_IFBLK"},
{"lineNum":"  108","line":"# define S_IFREG\t__S_IFREG"},
{"lineNum":"  109","line":"# ifdef __S_IFIFO"},
{"lineNum":"  110","line":"#  define S_IFIFO\t__S_IFIFO"},
{"lineNum":"  111","line":"# endif"},
{"lineNum":"  112","line":"# ifdef __S_IFLNK"},
{"lineNum":"  113","line":"#  define S_IFLNK\t__S_IFLNK"},
{"lineNum":"  114","line":"# endif"},
{"lineNum":"  115","line":"# if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) \\"},
{"lineNum":"  116","line":"     && defined __S_IFSOCK"},
{"lineNum":"  117","line":"#  define S_IFSOCK\t__S_IFSOCK"},
{"lineNum":"  118","line":"# endif"},
{"lineNum":"  119","line":"#endif"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"/* Test macros for file types.\t*/"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"#define\t__S_ISTYPE(mode, mask)\t(((mode) & __S_IFMT) == (mask))"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"#define\tS_ISDIR(mode)\t __S_ISTYPE((mode), __S_IFDIR)"},
{"lineNum":"  126","line":"#define\tS_ISCHR(mode)\t __S_ISTYPE((mode), __S_IFCHR)"},
{"lineNum":"  127","line":"#define\tS_ISBLK(mode)\t __S_ISTYPE((mode), __S_IFBLK)"},
{"lineNum":"  128","line":"#define\tS_ISREG(mode)\t __S_ISTYPE((mode), __S_IFREG)"},
{"lineNum":"  129","line":"#ifdef __S_IFIFO"},
{"lineNum":"  130","line":"# define S_ISFIFO(mode)\t __S_ISTYPE((mode), __S_IFIFO)"},
{"lineNum":"  131","line":"#endif"},
{"lineNum":"  132","line":"#ifdef __S_IFLNK"},
{"lineNum":"  133","line":"# define S_ISLNK(mode)\t __S_ISTYPE((mode), __S_IFLNK)"},
{"lineNum":"  134","line":"#endif"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"#if defined __USE_MISC && !defined __S_IFLNK"},
{"lineNum":"  137","line":"# define S_ISLNK(mode)  0"},
{"lineNum":"  138","line":"#endif"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"#if (defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K) \\"},
{"lineNum":"  141","line":"    && defined __S_IFSOCK"},
{"lineNum":"  142","line":"# define S_ISSOCK(mode) __S_ISTYPE((mode), __S_IFSOCK)"},
{"lineNum":"  143","line":"#elif defined __USE_XOPEN2K"},
{"lineNum":"  144","line":"# define S_ISSOCK(mode) 0"},
{"lineNum":"  145","line":"#endif"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"/* These are from POSIX.1b.  If the objects are not implemented using separate"},
{"lineNum":"  148","line":"   distinct file types, the macros always will evaluate to zero.  Unlike the"},
{"lineNum":"  149","line":"   other S_* macros the following three take a pointer to a `struct stat\'"},
{"lineNum":"  150","line":"   object as the argument.  */"},
{"lineNum":"  151","line":"#ifdef\t__USE_POSIX199309"},
{"lineNum":"  152","line":"# define S_TYPEISMQ(buf) __S_TYPEISMQ(buf)"},
{"lineNum":"  153","line":"# define S_TYPEISSEM(buf) __S_TYPEISSEM(buf)"},
{"lineNum":"  154","line":"# define S_TYPEISSHM(buf) __S_TYPEISSHM(buf)"},
{"lineNum":"  155","line":"#endif"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"/* Protection bits.  */"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"#define\tS_ISUID __S_ISUID\t/* Set user ID on execution.  */"},
{"lineNum":"  161","line":"#define\tS_ISGID\t__S_ISGID\t/* Set group ID on execution.  */"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"#if defined __USE_MISC || defined __USE_XOPEN"},
{"lineNum":"  164","line":"/* Save swapped text after use (sticky bit).  This is pretty well obsolete.  */"},
{"lineNum":"  165","line":"# define S_ISVTX\t__S_ISVTX"},
{"lineNum":"  166","line":"#endif"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"#define\tS_IRUSR\t__S_IREAD\t/* Read by owner.  */"},
{"lineNum":"  169","line":"#define\tS_IWUSR\t__S_IWRITE\t/* Write by owner.  */"},
{"lineNum":"  170","line":"#define\tS_IXUSR\t__S_IEXEC\t/* Execute by owner.  */"},
{"lineNum":"  171","line":"/* Read, write, and execute by owner.  */"},
{"lineNum":"  172","line":"#define\tS_IRWXU\t(__S_IREAD|__S_IWRITE|__S_IEXEC)"},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"#ifdef __USE_MISC"},
{"lineNum":"  175","line":"# define S_IREAD\tS_IRUSR"},
{"lineNum":"  176","line":"# define S_IWRITE\tS_IWUSR"},
{"lineNum":"  177","line":"# define S_IEXEC\tS_IXUSR"},
{"lineNum":"  178","line":"#endif"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"#define\tS_IRGRP\t(S_IRUSR >> 3)\t/* Read by group.  */"},
{"lineNum":"  181","line":"#define\tS_IWGRP\t(S_IWUSR >> 3)\t/* Write by group.  */"},
{"lineNum":"  182","line":"#define\tS_IXGRP\t(S_IXUSR >> 3)\t/* Execute by group.  */"},
{"lineNum":"  183","line":"/* Read, write, and execute by group.  */"},
{"lineNum":"  184","line":"#define\tS_IRWXG\t(S_IRWXU >> 3)"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"#define\tS_IROTH\t(S_IRGRP >> 3)\t/* Read by others.  */"},
{"lineNum":"  187","line":"#define\tS_IWOTH\t(S_IWGRP >> 3)\t/* Write by others.  */"},
{"lineNum":"  188","line":"#define\tS_IXOTH\t(S_IXGRP >> 3)\t/* Execute by others.  */"},
{"lineNum":"  189","line":"/* Read, write, and execute by others.  */"},
{"lineNum":"  190","line":"#define\tS_IRWXO\t(S_IRWXG >> 3)"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"#ifdef\t__USE_MISC"},
{"lineNum":"  194","line":"/* Macros for common mode bit masks.  */"},
{"lineNum":"  195","line":"# define ACCESSPERMS (S_IRWXU|S_IRWXG|S_IRWXO) /* 0777 */"},
{"lineNum":"  196","line":"# define ALLPERMS (S_ISUID|S_ISGID|S_ISVTX|S_IRWXU|S_IRWXG|S_IRWXO)/* 07777 */"},
{"lineNum":"  197","line":"# define DEFFILEMODE (S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH|S_IWOTH)/* 0666*/"},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"# define S_BLKSIZE\t512\t/* Block size for `st_blocks\'.  */"},
{"lineNum":"  200","line":"#endif"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"#ifndef __USE_FILE_OFFSET64"},
{"lineNum":"  204","line":"/* Get file attributes for FILE and put them in BUF.  */"},
{"lineNum":"  205","line":"extern int stat (const char *__restrict __file,"},
{"lineNum":"  206","line":"\t\t struct stat *__restrict __buf) __THROW __nonnull ((1, 2));"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"/* Get file attributes for the file, device, pipe, or socket"},
{"lineNum":"  209","line":"   that file descriptor FD is open on and put them in BUF.  */"},
{"lineNum":"  210","line":"extern int fstat (int __fd, struct stat *__buf) __THROW __nonnull ((2));"},
{"lineNum":"  211","line":"#else"},
{"lineNum":"  212","line":"# ifdef __REDIRECT_NTH"},
{"lineNum":"  213","line":"extern int __REDIRECT_NTH (stat, (const char *__restrict __file,"},
{"lineNum":"  214","line":"\t\t\t\t  struct stat *__restrict __buf), stat64)"},
{"lineNum":"  215","line":"     __nonnull ((1, 2));"},
{"lineNum":"  216","line":"extern int __REDIRECT_NTH (fstat, (int __fd, struct stat *__buf), fstat64)"},
{"lineNum":"  217","line":"     __nonnull ((2));"},
{"lineNum":"  218","line":"# else"},
{"lineNum":"  219","line":"#  define stat stat64"},
{"lineNum":"  220","line":"#  define fstat fstat64"},
{"lineNum":"  221","line":"# endif"},
{"lineNum":"  222","line":"#endif"},
{"lineNum":"  223","line":"#ifdef __USE_LARGEFILE64"},
{"lineNum":"  224","line":"extern int stat64 (const char *__restrict __file,"},
{"lineNum":"  225","line":"\t\t   struct stat64 *__restrict __buf) __THROW __nonnull ((1, 2));"},
{"lineNum":"  226","line":"extern int fstat64 (int __fd, struct stat64 *__buf) __THROW __nonnull ((2));"},
{"lineNum":"  227","line":"#endif"},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"#ifdef __USE_ATFILE"},
{"lineNum":"  230","line":"/* Similar to stat, get the attributes for FILE and put them in BUF."},
{"lineNum":"  231","line":"   Relative path names are interpreted relative to FD unless FD is"},
{"lineNum":"  232","line":"   AT_FDCWD.  */"},
{"lineNum":"  233","line":"# ifndef __USE_FILE_OFFSET64"},
{"lineNum":"  234","line":"extern int fstatat (int __fd, const char *__restrict __file,"},
{"lineNum":"  235","line":"\t\t    struct stat *__restrict __buf, int __flag)"},
{"lineNum":"  236","line":"     __THROW __nonnull ((2, 3));"},
{"lineNum":"  237","line":"# else"},
{"lineNum":"  238","line":"#  ifdef __REDIRECT_NTH"},
{"lineNum":"  239","line":"extern int __REDIRECT_NTH (fstatat, (int __fd, const char *__restrict __file,"},
{"lineNum":"  240","line":"\t\t\t\t     struct stat *__restrict __buf,"},
{"lineNum":"  241","line":"\t\t\t\t     int __flag),"},
{"lineNum":"  242","line":"\t\t\t   fstatat64) __nonnull ((2, 3));"},
{"lineNum":"  243","line":"#  else"},
{"lineNum":"  244","line":"#   define fstatat fstatat64"},
{"lineNum":"  245","line":"#  endif"},
{"lineNum":"  246","line":"# endif"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"# ifdef __USE_LARGEFILE64"},
{"lineNum":"  249","line":"extern int fstatat64 (int __fd, const char *__restrict __file,"},
{"lineNum":"  250","line":"\t\t      struct stat64 *__restrict __buf, int __flag)"},
{"lineNum":"  251","line":"     __THROW __nonnull ((2, 3));"},
{"lineNum":"  252","line":"# endif"},
{"lineNum":"  253","line":"#endif"},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"#if defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K"},
{"lineNum":"  256","line":"# ifndef __USE_FILE_OFFSET64"},
{"lineNum":"  257","line":"/* Get file attributes about FILE and put them in BUF."},
{"lineNum":"  258","line":"   If FILE is a symbolic link, do not follow it.  */"},
{"lineNum":"  259","line":"extern int lstat (const char *__restrict __file,"},
{"lineNum":"  260","line":"\t\t  struct stat *__restrict __buf) __THROW __nonnull ((1, 2));"},
{"lineNum":"  261","line":"# else"},
{"lineNum":"  262","line":"#  ifdef __REDIRECT_NTH"},
{"lineNum":"  263","line":"extern int __REDIRECT_NTH (lstat,"},
{"lineNum":"  264","line":"\t\t\t   (const char *__restrict __file,"},
{"lineNum":"  265","line":"\t\t\t    struct stat *__restrict __buf), lstat64)"},
{"lineNum":"  266","line":"     __nonnull ((1, 2));"},
{"lineNum":"  267","line":"#  else"},
{"lineNum":"  268","line":"#   define lstat lstat64"},
{"lineNum":"  269","line":"#  endif"},
{"lineNum":"  270","line":"# endif"},
{"lineNum":"  271","line":"# ifdef __USE_LARGEFILE64"},
{"lineNum":"  272","line":"extern int lstat64 (const char *__restrict __file,"},
{"lineNum":"  273","line":"\t\t    struct stat64 *__restrict __buf)"},
{"lineNum":"  274","line":"     __THROW __nonnull ((1, 2));"},
{"lineNum":"  275","line":"# endif"},
{"lineNum":"  276","line":"#endif"},
{"lineNum":"  277","line":""},
{"lineNum":"  278","line":"/* Set file access permissions for FILE to MODE."},
{"lineNum":"  279","line":"   If FILE is a symbolic link, this affects its target instead.  */"},
{"lineNum":"  280","line":"extern int chmod (const char *__file, __mode_t __mode)"},
{"lineNum":"  281","line":"     __THROW __nonnull ((1));"},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"#ifdef __USE_MISC"},
{"lineNum":"  284","line":"/* Set file access permissions for FILE to MODE."},
{"lineNum":"  285","line":"   If FILE is a symbolic link, this affects the link itself"},
{"lineNum":"  286","line":"   rather than its target.  */"},
{"lineNum":"  287","line":"extern int lchmod (const char *__file, __mode_t __mode)"},
{"lineNum":"  288","line":"     __THROW __nonnull ((1));"},
{"lineNum":"  289","line":"#endif"},
{"lineNum":"  290","line":""},
{"lineNum":"  291","line":"/* Set file access permissions of the file FD is open on to MODE.  */"},
{"lineNum":"  292","line":"#if defined __USE_POSIX199309 || defined __USE_XOPEN_EXTENDED"},
{"lineNum":"  293","line":"extern int fchmod (int __fd, __mode_t __mode) __THROW;"},
{"lineNum":"  294","line":"#endif"},
{"lineNum":"  295","line":""},
{"lineNum":"  296","line":"#ifdef __USE_ATFILE"},
{"lineNum":"  297","line":"/* Set file access permissions of FILE relative to"},
{"lineNum":"  298","line":"   the directory FD is open on.  */"},
{"lineNum":"  299","line":"extern int fchmodat (int __fd, const char *__file, __mode_t __mode,"},
{"lineNum":"  300","line":"\t\t     int __flag)"},
{"lineNum":"  301","line":"     __THROW __nonnull ((2)) __wur;"},
{"lineNum":"  302","line":"#endif /* Use ATFILE.  */"},
{"lineNum":"  303","line":""},
{"lineNum":"  304","line":""},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"/* Set the file creation mask of the current process to MASK,"},
{"lineNum":"  307","line":"   and return the old creation mask.  */"},
{"lineNum":"  308","line":"extern __mode_t umask (__mode_t __mask) __THROW;"},
{"lineNum":"  309","line":""},
{"lineNum":"  310","line":"#ifdef\t__USE_GNU"},
{"lineNum":"  311","line":"/* Get the current `umask\' value without changing it."},
{"lineNum":"  312","line":"   This function is only available under the GNU Hurd.  */"},
{"lineNum":"  313","line":"extern __mode_t getumask (void) __THROW;"},
{"lineNum":"  314","line":"#endif"},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":"/* Create a new directory named PATH, with permission bits MODE.  */"},
{"lineNum":"  317","line":"extern int mkdir (const char *__path, __mode_t __mode)"},
{"lineNum":"  318","line":"     __THROW __nonnull ((1));"},
{"lineNum":"  319","line":""},
{"lineNum":"  320","line":"#ifdef __USE_ATFILE"},
{"lineNum":"  321","line":"/* Like mkdir, create a new directory with permission bits MODE.  But"},
{"lineNum":"  322","line":"   interpret relative PATH names relative to the directory associated"},
{"lineNum":"  323","line":"   with FD.  */"},
{"lineNum":"  324","line":"extern int mkdirat (int __fd, const char *__path, __mode_t __mode)"},
{"lineNum":"  325","line":"     __THROW __nonnull ((2));"},
{"lineNum":"  326","line":"#endif"},
{"lineNum":"  327","line":""},
{"lineNum":"  328","line":"/* Create a device file named PATH, with permission and special bits MODE"},
{"lineNum":"  329","line":"   and device number DEV (which can be constructed from major and minor"},
{"lineNum":"  330","line":"   device numbers with the `makedev\' macro above).  */"},
{"lineNum":"  331","line":"#if defined __USE_MISC || defined __USE_XOPEN_EXTENDED"},
{"lineNum":"  332","line":"extern int mknod (const char *__path, __mode_t __mode, __dev_t __dev)"},
{"lineNum":"  333","line":"     __THROW __nonnull ((1));"},
{"lineNum":"  334","line":""},
{"lineNum":"  335","line":"# ifdef __USE_ATFILE"},
{"lineNum":"  336","line":"/* Like mknod, create a new device file with permission bits MODE and"},
{"lineNum":"  337","line":"   device number DEV.  But interpret relative PATH names relative to"},
{"lineNum":"  338","line":"   the directory associated with FD.  */"},
{"lineNum":"  339","line":"extern int mknodat (int __fd, const char *__path, __mode_t __mode,"},
{"lineNum":"  340","line":"\t\t    __dev_t __dev) __THROW __nonnull ((2));"},
{"lineNum":"  341","line":"# endif"},
{"lineNum":"  342","line":"#endif"},
{"lineNum":"  343","line":""},
{"lineNum":"  344","line":""},
{"lineNum":"  345","line":"/* Create a new FIFO named PATH, with permission bits MODE.  */"},
{"lineNum":"  346","line":"extern int mkfifo (const char *__path, __mode_t __mode)"},
{"lineNum":"  347","line":"     __THROW __nonnull ((1));"},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"#ifdef __USE_ATFILE"},
{"lineNum":"  350","line":"/* Like mkfifo, create a new FIFO with permission bits MODE.  But"},
{"lineNum":"  351","line":"   interpret relative PATH names relative to the directory associated"},
{"lineNum":"  352","line":"   with FD.  */"},
{"lineNum":"  353","line":"extern int mkfifoat (int __fd, const char *__path, __mode_t __mode)"},
{"lineNum":"  354","line":"     __THROW __nonnull ((2));"},
{"lineNum":"  355","line":"#endif"},
{"lineNum":"  356","line":""},
{"lineNum":"  357","line":"#ifdef __USE_ATFILE"},
{"lineNum":"  358","line":"/* Set file access and modification times relative to directory file"},
{"lineNum":"  359","line":"   descriptor.  */"},
{"lineNum":"  360","line":"extern int utimensat (int __fd, const char *__path,"},
{"lineNum":"  361","line":"\t\t      const struct timespec __times[2],"},
{"lineNum":"  362","line":"\t\t      int __flags)"},
{"lineNum":"  363","line":"     __THROW __nonnull ((2));"},
{"lineNum":"  364","line":"#endif"},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":"#ifdef __USE_XOPEN2K8"},
{"lineNum":"  367","line":"/* Set file access and modification times of the file associated with FD.  */"},
{"lineNum":"  368","line":"extern int futimens (int __fd, const struct timespec __times[2]) __THROW;"},
{"lineNum":"  369","line":"#endif"},
{"lineNum":"  370","line":""},
{"lineNum":"  371","line":"/* To allow the `struct stat\' structure and the file type `mode_t\'"},
{"lineNum":"  372","line":"   bits to vary without changing shared library major version number,"},
{"lineNum":"  373","line":"   the `stat\' family of functions and `mknod\' are in fact inline"},
{"lineNum":"  374","line":"   wrappers around calls to `xstat\', `fxstat\', `lxstat\', and `xmknod\',"},
{"lineNum":"  375","line":"   which all take a leading version-number argument designating the"},
{"lineNum":"  376","line":"   data structure and bits used.  <bits/stat.h> defines _STAT_VER with"},
{"lineNum":"  377","line":"   the version number corresponding to `struct stat\' as defined in"},
{"lineNum":"  378","line":"   that file; and _MKNOD_VER with the version number corresponding to"},
{"lineNum":"  379","line":"   the S_IF* macros defined therein.  It is arranged that when not"},
{"lineNum":"  380","line":"   inlined these function are always statically linked; that way a"},
{"lineNum":"  381","line":"   dynamically-linked executable always encodes the version number"},
{"lineNum":"  382","line":"   corresponding to the data structures it uses, so the `x\' functions"},
{"lineNum":"  383","line":"   in the shared library can adapt without needing to recompile all"},
{"lineNum":"  384","line":"   callers.  */"},
{"lineNum":"  385","line":""},
{"lineNum":"  386","line":"#ifndef _STAT_VER"},
{"lineNum":"  387","line":"# define _STAT_VER\t0"},
{"lineNum":"  388","line":"#endif"},
{"lineNum":"  389","line":"#ifndef _MKNOD_VER"},
{"lineNum":"  390","line":"# define _MKNOD_VER\t0"},
{"lineNum":"  391","line":"#endif"},
{"lineNum":"  392","line":""},
{"lineNum":"  393","line":"/* Wrappers for stat and mknod system calls.  */"},
{"lineNum":"  394","line":"#ifndef __USE_FILE_OFFSET64"},
{"lineNum":"  395","line":"extern int __fxstat (int __ver, int __fildes, struct stat *__stat_buf)"},
{"lineNum":"  396","line":"     __THROW __nonnull ((3));"},
{"lineNum":"  397","line":"extern int __xstat (int __ver, const char *__filename,"},
{"lineNum":"  398","line":"\t\t    struct stat *__stat_buf) __THROW __nonnull ((2, 3));"},
{"lineNum":"  399","line":"extern int __lxstat (int __ver, const char *__filename,"},
{"lineNum":"  400","line":"\t\t     struct stat *__stat_buf) __THROW __nonnull ((2, 3));"},
{"lineNum":"  401","line":"extern int __fxstatat (int __ver, int __fildes, const char *__filename,"},
{"lineNum":"  402","line":"\t\t       struct stat *__stat_buf, int __flag)"},
{"lineNum":"  403","line":"     __THROW __nonnull ((3, 4));"},
{"lineNum":"  404","line":"#else"},
{"lineNum":"  405","line":"# ifdef __REDIRECT_NTH"},
{"lineNum":"  406","line":"extern int __REDIRECT_NTH (__fxstat, (int __ver, int __fildes,"},
{"lineNum":"  407","line":"\t\t\t\t      struct stat *__stat_buf), __fxstat64)"},
{"lineNum":"  408","line":"     __nonnull ((3));"},
{"lineNum":"  409","line":"extern int __REDIRECT_NTH (__xstat, (int __ver, const char *__filename,"},
{"lineNum":"  410","line":"\t\t\t\t     struct stat *__stat_buf), __xstat64)"},
{"lineNum":"  411","line":"     __nonnull ((2, 3));"},
{"lineNum":"  412","line":"extern int __REDIRECT_NTH (__lxstat, (int __ver, const char *__filename,"},
{"lineNum":"  413","line":"\t\t\t\t      struct stat *__stat_buf), __lxstat64)"},
{"lineNum":"  414","line":"     __nonnull ((2, 3));"},
{"lineNum":"  415","line":"extern int __REDIRECT_NTH (__fxstatat, (int __ver, int __fildes,"},
{"lineNum":"  416","line":"\t\t\t\t\tconst char *__filename,"},
{"lineNum":"  417","line":"\t\t\t\t\tstruct stat *__stat_buf, int __flag),"},
{"lineNum":"  418","line":"\t\t\t   __fxstatat64) __nonnull ((3, 4));"},
{"lineNum":"  419","line":""},
{"lineNum":"  420","line":"# else"},
{"lineNum":"  421","line":"#  define __fxstat __fxstat64"},
{"lineNum":"  422","line":"#  define __xstat __xstat64"},
{"lineNum":"  423","line":"#  define __lxstat __lxstat64"},
{"lineNum":"  424","line":"# endif"},
{"lineNum":"  425","line":"#endif"},
{"lineNum":"  426","line":""},
{"lineNum":"  427","line":"#ifdef __USE_LARGEFILE64"},
{"lineNum":"  428","line":"extern int __fxstat64 (int __ver, int __fildes, struct stat64 *__stat_buf)"},
{"lineNum":"  429","line":"     __THROW __nonnull ((3));"},
{"lineNum":"  430","line":"extern int __xstat64 (int __ver, const char *__filename,"},
{"lineNum":"  431","line":"\t\t      struct stat64 *__stat_buf) __THROW __nonnull ((2, 3));"},
{"lineNum":"  432","line":"extern int __lxstat64 (int __ver, const char *__filename,"},
{"lineNum":"  433","line":"\t\t       struct stat64 *__stat_buf) __THROW __nonnull ((2, 3));"},
{"lineNum":"  434","line":"extern int __fxstatat64 (int __ver, int __fildes, const char *__filename,"},
{"lineNum":"  435","line":"\t\t\t struct stat64 *__stat_buf, int __flag)"},
{"lineNum":"  436","line":"     __THROW __nonnull ((3, 4));"},
{"lineNum":"  437","line":"#endif"},
{"lineNum":"  438","line":"extern int __xmknod (int __ver, const char *__path, __mode_t __mode,"},
{"lineNum":"  439","line":"\t\t     __dev_t *__dev) __THROW __nonnull ((2, 4));"},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"extern int __xmknodat (int __ver, int __fd, const char *__path,"},
{"lineNum":"  442","line":"\t\t       __mode_t __mode, __dev_t *__dev)"},
{"lineNum":"  443","line":"     __THROW __nonnull ((3, 5));"},
{"lineNum":"  444","line":""},
{"lineNum":"  445","line":"#ifdef __USE_GNU"},
{"lineNum":"  446","line":"# include <bits/statx.h>"},
{"lineNum":"  447","line":"#endif"},
{"lineNum":"  448","line":""},
{"lineNum":"  449","line":"#ifdef __USE_EXTERN_INLINES"},
{"lineNum":"  450","line":"/* Inlined versions of the real stat and mknod functions.  */"},
{"lineNum":"  451","line":""},
{"lineNum":"  452","line":"__extern_inline int"},
{"lineNum":"  453","line":"__NTH (stat (const char *__path, struct stat *__statbuf))"},
{"lineNum":"  454","line":"{"},
{"lineNum":"  455","line":"  return __xstat (_STAT_VER, __path, __statbuf);","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  456","line":"}"},
{"lineNum":"  457","line":""},
{"lineNum":"  458","line":"# if defined __USE_MISC || defined __USE_XOPEN_EXTENDED"},
{"lineNum":"  459","line":"__extern_inline int"},
{"lineNum":"  460","line":"__NTH (lstat (const char *__path, struct stat *__statbuf))"},
{"lineNum":"  461","line":"{"},
{"lineNum":"  462","line":"  return __lxstat (_STAT_VER, __path, __statbuf);"},
{"lineNum":"  463","line":"}"},
{"lineNum":"  464","line":"# endif"},
{"lineNum":"  465","line":""},
{"lineNum":"  466","line":"__extern_inline int"},
{"lineNum":"  467","line":"__NTH (fstat (int __fd, struct stat *__statbuf))"},
{"lineNum":"  468","line":"{"},
{"lineNum":"  469","line":"  return __fxstat (_STAT_VER, __fd, __statbuf);","class":"linePartCov","hits":"1","order":"2691","possible_hits":"3",},
{"lineNum":"  470","line":"}"},
{"lineNum":"  471","line":""},
{"lineNum":"  472","line":"# ifdef __USE_ATFILE"},
{"lineNum":"  473","line":"__extern_inline int"},
{"lineNum":"  474","line":"__NTH (fstatat (int __fd, const char *__filename, struct stat *__statbuf,"},
{"lineNum":"  475","line":"\t\tint __flag))"},
{"lineNum":"  476","line":"{"},
{"lineNum":"  477","line":"  return __fxstatat (_STAT_VER, __fd, __filename, __statbuf, __flag);","class":"linePartCov","hits":"5","order":"1650","possible_hits":"8",},
{"lineNum":"  478","line":"}"},
{"lineNum":"  479","line":"# endif"},
{"lineNum":"  480","line":""},
{"lineNum":"  481","line":"# ifdef __USE_MISC"},
{"lineNum":"  482","line":"__extern_inline int"},
{"lineNum":"  483","line":"__NTH (mknod (const char *__path, __mode_t __mode, __dev_t __dev))"},
{"lineNum":"  484","line":"{"},
{"lineNum":"  485","line":"  return __xmknod (_MKNOD_VER, __path, __mode, &__dev);"},
{"lineNum":"  486","line":"}"},
{"lineNum":"  487","line":"# endif"},
{"lineNum":"  488","line":""},
{"lineNum":"  489","line":"# ifdef __USE_ATFILE"},
{"lineNum":"  490","line":"__extern_inline int"},
{"lineNum":"  491","line":"__NTH (mknodat (int __fd, const char *__path, __mode_t __mode,"},
{"lineNum":"  492","line":"\t\t__dev_t __dev))"},
{"lineNum":"  493","line":"{"},
{"lineNum":"  494","line":"  return __xmknodat (_MKNOD_VER, __fd, __path, __mode, &__dev);"},
{"lineNum":"  495","line":"}"},
{"lineNum":"  496","line":"# endif"},
{"lineNum":"  497","line":""},
{"lineNum":"  498","line":"# if defined __USE_LARGEFILE64 \\"},
{"lineNum":"  499","line":"  && (! defined __USE_FILE_OFFSET64 \\"},
{"lineNum":"  500","line":"      || (defined __REDIRECT_NTH && defined __OPTIMIZE__))"},
{"lineNum":"  501","line":"__extern_inline int"},
{"lineNum":"  502","line":"__NTH (stat64 (const char *__path, struct stat64 *__statbuf))"},
{"lineNum":"  503","line":"{"},
{"lineNum":"  504","line":"  return __xstat64 (_STAT_VER, __path, __statbuf);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  505","line":"}"},
{"lineNum":"  506","line":""},
{"lineNum":"  507","line":"#  if defined __USE_MISC || defined __USE_XOPEN_EXTENDED"},
{"lineNum":"  508","line":"__extern_inline int"},
{"lineNum":"  509","line":"__NTH (lstat64 (const char *__path, struct stat64 *__statbuf))"},
{"lineNum":"  510","line":"{"},
{"lineNum":"  511","line":"  return __lxstat64 (_STAT_VER, __path, __statbuf);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  512","line":"}"},
{"lineNum":"  513","line":"#  endif"},
{"lineNum":"  514","line":""},
{"lineNum":"  515","line":"__extern_inline int"},
{"lineNum":"  516","line":"__NTH (fstat64 (int __fd, struct stat64 *__statbuf))"},
{"lineNum":"  517","line":"{"},
{"lineNum":"  518","line":"  return __fxstat64 (_STAT_VER, __fd, __statbuf);","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  519","line":"}"},
{"lineNum":"  520","line":""},
{"lineNum":"  521","line":"#  ifdef __USE_ATFILE"},
{"lineNum":"  522","line":"__extern_inline int"},
{"lineNum":"  523","line":"__NTH (fstatat64 (int __fd, const char *__filename, struct stat64 *__statbuf,"},
{"lineNum":"  524","line":"\t\t  int __flag))"},
{"lineNum":"  525","line":"{"},
{"lineNum":"  526","line":"  return __fxstatat64 (_STAT_VER, __fd, __filename, __statbuf, __flag);"},
{"lineNum":"  527","line":"}"},
{"lineNum":"  528","line":"#  endif"},
{"lineNum":"  529","line":""},
{"lineNum":"  530","line":"# endif"},
{"lineNum":"  531","line":""},
{"lineNum":"  532","line":"#endif"},
{"lineNum":"  533","line":""},
{"lineNum":"  534","line":"__END_DECLS"},
{"lineNum":"  535","line":""},
{"lineNum":"  536","line":""},
{"lineNum":"  537","line":"#endif /* sys/stat.h  */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-14 19:20:37", "instrumented" : 6, "covered" : 2,};
var merged_data = [];
