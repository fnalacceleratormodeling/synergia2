var data = {lines:[
{"lineNum":"    1","line":"#ifndef SPLIT_OPERATOR_STEPPER_H_"},
{"lineNum":"    2","line":"#define SPLIT_OPERATOR_STEPPER_H_"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#include \"synergia/simulation/stepper.h\""},
{"lineNum":"    5","line":"#include \"synergia/collective/dummy_collective_operator.h\""},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"/// The Split_operator_stepper class generates evenly-spaced split-operator"},
{"lineNum":"    8","line":"/// steps through a Lattice. One or more collective effects are included per"},
{"lineNum":"    9","line":"/// step."},
{"lineNum":"   10","line":"class Split_operator_stepper : public Stepper","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"   11","line":"{"},
{"lineNum":"   12","line":"private:"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"    int num_steps;"},
{"lineNum":"   15","line":"    std::vector<std::shared_ptr<const CO_options>> co_ops;"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"    std::vector<Step>"},
{"lineNum":"   18","line":"    apply_impl(Lattice const & lattice) const override;"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"public:"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"    Split_operator_stepper("},
{"lineNum":"   23","line":"            CO_options const& coo = Dummy_CO_options(),"},
{"lineNum":"   24","line":"            int num_steps = 1 )"},
{"lineNum":"   25","line":"        : num_steps(num_steps)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   26","line":"        , co_ops{std::shared_ptr<const CO_options>(coo.clone())}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   27","line":"    { }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"    template<class ...ARGS>"},
{"lineNum":"   30","line":"    Split_operator_stepper(int num_steps, ARGS const& ... args)"},
{"lineNum":"   31","line":"    : num_steps(num_steps)"},
{"lineNum":"   32","line":"    , co_ops({(std::shared_ptr<const CO_options>(args.clone()))...})"},
{"lineNum":"   33","line":"    { }"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"    void append_collective_op(CO_options const& coo)"},
{"lineNum":"   37","line":"    { co_ops.push_back(std::shared_ptr<const CO_options>(coo.clone())); }"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"    std::unique_ptr<Stepper> clone() const override"},
{"lineNum":"   40","line":"    { return std::make_unique<Split_operator_stepper>(*this); }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"private:"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"    friend class cereal::access;"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"    template<class Archive>"},
{"lineNum":"   47","line":"    void serialize(Archive & ar)"},
{"lineNum":"   48","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   49","line":"        ar(cereal::virtual_base_class<Stepper>(this));"},
{"lineNum":"   50","line":"        ar(num_steps);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   51","line":"        ar(co_ops);","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   52","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   53","line":"};"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"CEREAL_REGISTER_TYPE(Split_operator_stepper)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"#endif /* SPLIT_OPERATOR_STEPPER_H_ */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 10, "covered" : 0,};
var merged_data = [];
