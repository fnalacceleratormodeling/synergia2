var data = {lines:[
{"lineNum":"    1","line":"// This file is part of Eigen, a lightweight C++ template library"},
{"lineNum":"    2","line":"// for linear algebra."},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Copyright (C) 2010 Benoit Jacob <jacob.benoit.1@gmail.com>"},
{"lineNum":"    5","line":"// Copyright (C) 2009 Gael Guennebaud <gael.guennebaud@inria.fr>"},
{"lineNum":"    6","line":"//"},
{"lineNum":"    7","line":"// This Source Code Form is subject to the terms of the Mozilla"},
{"lineNum":"    8","line":"// Public License v. 2.0. If a copy of the MPL was not distributed"},
{"lineNum":"    9","line":"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/."},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"#ifndef EIGEN_HOUSEHOLDER_H"},
{"lineNum":"   12","line":"#define EIGEN_HOUSEHOLDER_H"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"#include \"./InternalHeaderCheck.h\""},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"namespace Eigen {"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"namespace internal {"},
{"lineNum":"   19","line":"template<int n> struct decrement_size"},
{"lineNum":"   20","line":"{"},
{"lineNum":"   21","line":"  enum {"},
{"lineNum":"   22","line":"    ret = n==Dynamic ? n : n-1"},
{"lineNum":"   23","line":"  };"},
{"lineNum":"   24","line":"};"},
{"lineNum":"   25","line":"}"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"/** Computes the elementary reflector H such that:"},
{"lineNum":"   28","line":"  * \\f$ H *this = [ beta 0 ... 0]^T \\f$"},
{"lineNum":"   29","line":"  * where the transformation H is:"},
{"lineNum":"   30","line":"  * \\f$ H = I - tau v v^*\\f$"},
{"lineNum":"   31","line":"  * and the vector v is:"},
{"lineNum":"   32","line":"  * \\f$ v^T = [1 essential^T] \\f$"},
{"lineNum":"   33","line":"  *"},
{"lineNum":"   34","line":"  * The essential part of the vector \\c v is stored in *this."},
{"lineNum":"   35","line":"  *"},
{"lineNum":"   36","line":"  * On output:"},
{"lineNum":"   37","line":"  * \\param tau the scaling factor of the Householder transformation"},
{"lineNum":"   38","line":"  * \\param beta the result of H * \\c *this"},
{"lineNum":"   39","line":"  *"},
{"lineNum":"   40","line":"  * \\sa MatrixBase::makeHouseholder(), MatrixBase::applyHouseholderOnTheLeft(),"},
{"lineNum":"   41","line":"  *     MatrixBase::applyHouseholderOnTheRight()"},
{"lineNum":"   42","line":"  */"},
{"lineNum":"   43","line":"template<typename Derived>"},
{"lineNum":"   44","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":"   45","line":"void MatrixBase<Derived>::makeHouseholderInPlace(Scalar& tau, RealScalar& beta)"},
{"lineNum":"   46","line":"{"},
{"lineNum":"   47","line":"  VectorBlock<Derived, internal::decrement_size<Base::SizeAtCompileTime>::ret> essentialPart(derived(), 1, size()-1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   48","line":"  makeHouseholder(essentialPart, tau, beta);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   49","line":"}"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"/** Computes the elementary reflector H such that:"},
{"lineNum":"   52","line":"  * \\f$ H *this = [ beta 0 ... 0]^T \\f$"},
{"lineNum":"   53","line":"  * where the transformation H is:"},
{"lineNum":"   54","line":"  * \\f$ H = I - tau v v^*\\f$"},
{"lineNum":"   55","line":"  * and the vector v is:"},
{"lineNum":"   56","line":"  * \\f$ v^T = [1 essential^T] \\f$"},
{"lineNum":"   57","line":"  *"},
{"lineNum":"   58","line":"  * On output:"},
{"lineNum":"   59","line":"  * \\param essential the essential part of the vector \\c v"},
{"lineNum":"   60","line":"  * \\param tau the scaling factor of the Householder transformation"},
{"lineNum":"   61","line":"  * \\param beta the result of H * \\c *this"},
{"lineNum":"   62","line":"  *"},
{"lineNum":"   63","line":"  * \\sa MatrixBase::makeHouseholderInPlace(), MatrixBase::applyHouseholderOnTheLeft(),"},
{"lineNum":"   64","line":"  *     MatrixBase::applyHouseholderOnTheRight()"},
{"lineNum":"   65","line":"  */"},
{"lineNum":"   66","line":"template<typename Derived>"},
{"lineNum":"   67","line":"template<typename EssentialPart>"},
{"lineNum":"   68","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":"   69","line":"void MatrixBase<Derived>::makeHouseholder("},
{"lineNum":"   70","line":"  EssentialPart& essential,"},
{"lineNum":"   71","line":"  Scalar& tau,"},
{"lineNum":"   72","line":"  RealScalar& beta) const"},
{"lineNum":"   73","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   74","line":"  using std::sqrt;"},
{"lineNum":"   75","line":"  using numext::conj;"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"  EIGEN_STATIC_ASSERT_VECTOR_ONLY(EssentialPart)"},
{"lineNum":"   78","line":"  VectorBlock<const Derived, EssentialPart::SizeAtCompileTime> tail(derived(), 1, size()-1);"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"  RealScalar tailSqNorm = size()==1 ? RealScalar(0) : tail.squaredNorm();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   81","line":"  Scalar c0 = coeff(0);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   82","line":"  const RealScalar tol = (std::numeric_limits<RealScalar>::min)();"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"  if(tailSqNorm <= tol && numext::abs2(numext::imag(c0))<=tol)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   85","line":"  {"},
{"lineNum":"   86","line":"    tau = RealScalar(0);","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   87","line":"    beta = numext::real(c0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   88","line":"    essential.setZero();"},
{"lineNum":"   89","line":"  }"},
{"lineNum":"   90","line":"  else"},
{"lineNum":"   91","line":"  {"},
{"lineNum":"   92","line":"    beta = sqrt(numext::abs2(c0) + tailSqNorm);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   93","line":"    if (numext::real(c0)>=RealScalar(0))","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"   94","line":"      beta = -beta;"},
{"lineNum":"   95","line":"    essential = tail / (c0 - beta);","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   96","line":"    tau = conj((beta - c0) / beta);","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"   97","line":"  }"},
{"lineNum":"   98","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"/** Apply the elementary reflector H given by"},
{"lineNum":"  101","line":"  * \\f$ H = I - tau v v^*\\f$"},
{"lineNum":"  102","line":"  * with"},
{"lineNum":"  103","line":"  * \\f$ v^T = [1 essential^T] \\f$"},
{"lineNum":"  104","line":"  * from the left to a vector or matrix."},
{"lineNum":"  105","line":"  *"},
{"lineNum":"  106","line":"  * On input:"},
{"lineNum":"  107","line":"  * \\param essential the essential part of the vector \\c v"},
{"lineNum":"  108","line":"  * \\param tau the scaling factor of the Householder transformation"},
{"lineNum":"  109","line":"  * \\param workspace a pointer to working space with at least"},
{"lineNum":"  110","line":"  *                  this->cols() entries"},
{"lineNum":"  111","line":"  *"},
{"lineNum":"  112","line":"  * \\sa MatrixBase::makeHouseholder(), MatrixBase::makeHouseholderInPlace(),"},
{"lineNum":"  113","line":"  *     MatrixBase::applyHouseholderOnTheRight()"},
{"lineNum":"  114","line":"  */"},
{"lineNum":"  115","line":"template<typename Derived>"},
{"lineNum":"  116","line":"template<typename EssentialPart>"},
{"lineNum":"  117","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":"  118","line":"void MatrixBase<Derived>::applyHouseholderOnTheLeft("},
{"lineNum":"  119","line":"  const EssentialPart& essential,"},
{"lineNum":"  120","line":"  const Scalar& tau,"},
{"lineNum":"  121","line":"  Scalar* workspace)"},
{"lineNum":"  122","line":"{","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  123","line":"  if(rows() == 1)","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  124","line":"  {"},
{"lineNum":"  125","line":"    *this *= Scalar(1)-tau;","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  126","line":"  }"},
{"lineNum":"  127","line":"  else if(tau!=Scalar(0))","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  128","line":"  {"},
{"lineNum":"  129","line":"    Map<typename internal::plain_row_type<PlainObject>::type> tmp(workspace,cols());"},
{"lineNum":"  130","line":"    Block<Derived, EssentialPart::SizeAtCompileTime, Derived::ColsAtCompileTime> bottom(derived(), 1, 0, rows()-1, cols());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  131","line":"    tmp.noalias() = essential.adjoint() * bottom;"},
{"lineNum":"  132","line":"    tmp += this->row(0);"},
{"lineNum":"  133","line":"    this->row(0) -= tau * tmp;"},
{"lineNum":"  134","line":"    bottom.noalias() -= tau * essential * tmp;"},
{"lineNum":"  135","line":"  }"},
{"lineNum":"  136","line":"}","class":"lineNoCov","hits":"0","possible_hits":"15",},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"/** Apply the elementary reflector H given by"},
{"lineNum":"  139","line":"  * \\f$ H = I - tau v v^*\\f$"},
{"lineNum":"  140","line":"  * with"},
{"lineNum":"  141","line":"  * \\f$ v^T = [1 essential^T] \\f$"},
{"lineNum":"  142","line":"  * from the right to a vector or matrix."},
{"lineNum":"  143","line":"  *"},
{"lineNum":"  144","line":"  * On input:"},
{"lineNum":"  145","line":"  * \\param essential the essential part of the vector \\c v"},
{"lineNum":"  146","line":"  * \\param tau the scaling factor of the Householder transformation"},
{"lineNum":"  147","line":"  * \\param workspace a pointer to working space with at least"},
{"lineNum":"  148","line":"  *                  this->rows() entries"},
{"lineNum":"  149","line":"  *"},
{"lineNum":"  150","line":"  * \\sa MatrixBase::makeHouseholder(), MatrixBase::makeHouseholderInPlace(),"},
{"lineNum":"  151","line":"  *     MatrixBase::applyHouseholderOnTheLeft()"},
{"lineNum":"  152","line":"  */"},
{"lineNum":"  153","line":"template<typename Derived>"},
{"lineNum":"  154","line":"template<typename EssentialPart>"},
{"lineNum":"  155","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":"  156","line":"void MatrixBase<Derived>::applyHouseholderOnTheRight("},
{"lineNum":"  157","line":"  const EssentialPart& essential,"},
{"lineNum":"  158","line":"  const Scalar& tau,"},
{"lineNum":"  159","line":"  Scalar* workspace)"},
{"lineNum":"  160","line":"{","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  161","line":"  if(cols() == 1)","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  162","line":"  {"},
{"lineNum":"  163","line":"    *this *= Scalar(1)-tau;","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  164","line":"  }"},
{"lineNum":"  165","line":"  else if(tau!=Scalar(0))","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  166","line":"  {"},
{"lineNum":"  167","line":"    Map<typename internal::plain_col_type<PlainObject>::type> tmp(workspace,rows());"},
{"lineNum":"  168","line":"    Block<Derived, Derived::RowsAtCompileTime, EssentialPart::SizeAtCompileTime> right(derived(), 0, 1, rows(), cols()-1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  169","line":"    tmp.noalias() = right * essential;"},
{"lineNum":"  170","line":"    tmp += this->col(0);"},
{"lineNum":"  171","line":"    this->col(0) -= tau * tmp;"},
{"lineNum":"  172","line":"    right.noalias() -= tau * tmp * essential.adjoint();"},
{"lineNum":"  173","line":"  }"},
{"lineNum":"  174","line":"}","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"} // end namespace Eigen"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"#endif // EIGEN_HOUSEHOLDER_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 25, "covered" : 0,};
var merged_data = [];
