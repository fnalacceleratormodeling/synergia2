var data = {lines:[
{"lineNum":"    1","line":"// This file is part of Eigen, a lightweight C++ template library"},
{"lineNum":"    2","line":"// for linear algebra."},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Copyright (C) 2009 Benoit Jacob <jacob.benoit.1@gmail.com>"},
{"lineNum":"    5","line":"// Copyright (C) 2009 Gael Guennebaud <gael.guennebaud@inria.fr>"},
{"lineNum":"    6","line":"//"},
{"lineNum":"    7","line":"// This Source Code Form is subject to the terms of the Mozilla"},
{"lineNum":"    8","line":"// Public License v. 2.0. If a copy of the MPL was not distributed"},
{"lineNum":"    9","line":"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/."},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"#ifndef EIGEN_EIGENBASE_H"},
{"lineNum":"   12","line":"#define EIGEN_EIGENBASE_H"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"#include \"./InternalHeaderCheck.h\""},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"namespace Eigen {"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"/** \\class EigenBase"},
{"lineNum":"   19","line":"  * \\ingroup Core_Module"},
{"lineNum":"   20","line":"  *"},
{"lineNum":"   21","line":"  * Common base class for all classes T such that MatrixBase has an operator=(T) and a constructor MatrixBase(T)."},
{"lineNum":"   22","line":"  *"},
{"lineNum":"   23","line":"  * In other words, an EigenBase object is an object that can be copied into a MatrixBase."},
{"lineNum":"   24","line":"  *"},
{"lineNum":"   25","line":"  * Besides MatrixBase-derived classes, this also includes special matrix classes such as diagonal matrices, etc."},
{"lineNum":"   26","line":"  *"},
{"lineNum":"   27","line":"  * Notice that this class is trivial, it is only used to disambiguate overloaded functions."},
{"lineNum":"   28","line":"  *"},
{"lineNum":"   29","line":"  * \\sa \\blank \\ref TopicClassHierarchy"},
{"lineNum":"   30","line":"  */"},
{"lineNum":"   31","line":"template<typename Derived> struct EigenBase"},
{"lineNum":"   32","line":"{"},
{"lineNum":"   33","line":"//   typedef typename internal::plain_matrix_type<Derived>::type PlainObject;"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"  /** \\brief The interface type of indices"},
{"lineNum":"   36","line":"    * \\details To change this, \\c \\#define the preprocessor symbol \\c EIGEN_DEFAULT_DENSE_INDEX_TYPE."},
{"lineNum":"   37","line":"    * \\sa StorageIndex, \\ref TopicPreprocessorDirectives."},
{"lineNum":"   38","line":"    * DEPRECATED: Since Eigen 3.3, its usage is deprecated. Use Eigen::Index instead."},
{"lineNum":"   39","line":"    * Deprecation is not marked with a doxygen comment because there are too many existing usages to add the deprecation attribute."},
{"lineNum":"   40","line":"    */"},
{"lineNum":"   41","line":"  typedef Eigen::Index Index;"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"  // FIXME is it needed?"},
{"lineNum":"   44","line":"  typedef typename internal::traits<Derived>::StorageKind StorageKind;"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"  /** \\returns a reference to the derived object */"},
{"lineNum":"   47","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"   48","line":"  Derived& derived() { return *static_cast<Derived*>(this); }"},
{"lineNum":"   49","line":"  /** \\returns a const reference to the derived object */"},
{"lineNum":"   50","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"   51","line":"  const Derived& derived() const { return *static_cast<const Derived*>(this); }"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"   54","line":"  inline Derived& const_cast_derived() const"},
{"lineNum":"   55","line":"  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }"},
{"lineNum":"   56","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"   57","line":"  inline const Derived& const_derived() const"},
{"lineNum":"   58","line":"  { return *static_cast<const Derived*>(this); }"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"  /** \\returns the number of rows. \\sa cols(), RowsAtCompileTime */"},
{"lineNum":"   61","line":"  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR"},
{"lineNum":"   62","line":"  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }"},
{"lineNum":"   63","line":"  /** \\returns the number of columns. \\sa rows(), ColsAtCompileTime*/"},
{"lineNum":"   64","line":"  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR"},
{"lineNum":"   65","line":"  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }"},
{"lineNum":"   66","line":"  /** \\returns the number of coefficients, which is rows()*cols()."},
{"lineNum":"   67","line":"    * \\sa rows(), cols(), SizeAtCompileTime. */"},
{"lineNum":"   68","line":"  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR"},
{"lineNum":"   69","line":"  inline Index size() const EIGEN_NOEXCEPT { return rows() * cols(); }","class":"lineNoCov","hits":"0","possible_hits":"34",},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"  /** \\internal Don\'t use it, but do the equivalent: \\code dst = *this; \\endcode */"},
{"lineNum":"   72","line":"  template<typename Dest>"},
{"lineNum":"   73","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"   74","line":"  inline void evalTo(Dest& dst) const"},
{"lineNum":"   75","line":"  { derived().evalTo(dst); }"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"  /** \\internal Don\'t use it, but do the equivalent: \\code dst += *this; \\endcode */"},
{"lineNum":"   78","line":"  template<typename Dest>"},
{"lineNum":"   79","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"   80","line":"  inline void addTo(Dest& dst) const"},
{"lineNum":"   81","line":"  {"},
{"lineNum":"   82","line":"    // This is the default implementation,"},
{"lineNum":"   83","line":"    // derived class can reimplement it in a more optimized way."},
{"lineNum":"   84","line":"    typename Dest::PlainObject res(rows(),cols());"},
{"lineNum":"   85","line":"    evalTo(res);"},
{"lineNum":"   86","line":"    dst += res;"},
{"lineNum":"   87","line":"  }"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"  /** \\internal Don\'t use it, but do the equivalent: \\code dst -= *this; \\endcode */"},
{"lineNum":"   90","line":"  template<typename Dest>"},
{"lineNum":"   91","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"   92","line":"  inline void subTo(Dest& dst) const"},
{"lineNum":"   93","line":"  {"},
{"lineNum":"   94","line":"    // This is the default implementation,"},
{"lineNum":"   95","line":"    // derived class can reimplement it in a more optimized way."},
{"lineNum":"   96","line":"    typename Dest::PlainObject res(rows(),cols());"},
{"lineNum":"   97","line":"    evalTo(res);"},
{"lineNum":"   98","line":"    dst -= res;"},
{"lineNum":"   99","line":"  }"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"  /** \\internal Don\'t use it, but do the equivalent: \\code dst.applyOnTheRight(*this); \\endcode */"},
{"lineNum":"  102","line":"  template<typename Dest>"},
{"lineNum":"  103","line":"  EIGEN_DEVICE_FUNC inline void applyThisOnTheRight(Dest& dst) const"},
{"lineNum":"  104","line":"  {"},
{"lineNum":"  105","line":"    // This is the default implementation,"},
{"lineNum":"  106","line":"    // derived class can reimplement it in a more optimized way."},
{"lineNum":"  107","line":"    dst = dst * this->derived();"},
{"lineNum":"  108","line":"  }"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"  /** \\internal Don\'t use it, but do the equivalent: \\code dst.applyOnTheLeft(*this); \\endcode */"},
{"lineNum":"  111","line":"  template<typename Dest>"},
{"lineNum":"  112","line":"  EIGEN_DEVICE_FUNC inline void applyThisOnTheLeft(Dest& dst) const"},
{"lineNum":"  113","line":"  {"},
{"lineNum":"  114","line":"    // This is the default implementation,"},
{"lineNum":"  115","line":"    // derived class can reimplement it in a more optimized way."},
{"lineNum":"  116","line":"    dst = this->derived() * dst;"},
{"lineNum":"  117","line":"  }"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"};"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"/***************************************************************************"},
{"lineNum":"  122","line":"* Implementation of matrix base methods"},
{"lineNum":"  123","line":"***************************************************************************/"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"/** \\brief Copies the generic expression \\a other into *this."},
{"lineNum":"  126","line":"  *"},
{"lineNum":"  127","line":"  * \\details The expression must provide a (templated) evalTo(Derived& dst) const"},
{"lineNum":"  128","line":"  * function which does the actual job. In practice, this allows any user to write"},
{"lineNum":"  129","line":"  * its own special matrix without having to modify MatrixBase"},
{"lineNum":"  130","line":"  *"},
{"lineNum":"  131","line":"  * \\returns a reference to *this."},
{"lineNum":"  132","line":"  */"},
{"lineNum":"  133","line":"template<typename Derived>"},
{"lineNum":"  134","line":"template<typename OtherDerived>"},
{"lineNum":"  135","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":"  136","line":"Derived& DenseBase<Derived>::operator=(const EigenBase<OtherDerived> &other)"},
{"lineNum":"  137","line":"{"},
{"lineNum":"  138","line":"  call_assignment(derived(), other.derived());"},
{"lineNum":"  139","line":"  return derived();"},
{"lineNum":"  140","line":"}"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"template<typename Derived>"},
{"lineNum":"  143","line":"template<typename OtherDerived>"},
{"lineNum":"  144","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":"  145","line":"Derived& DenseBase<Derived>::operator+=(const EigenBase<OtherDerived> &other)"},
{"lineNum":"  146","line":"{"},
{"lineNum":"  147","line":"  call_assignment(derived(), other.derived(), internal::add_assign_op<Scalar,typename OtherDerived::Scalar>());"},
{"lineNum":"  148","line":"  return derived();"},
{"lineNum":"  149","line":"}"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"template<typename Derived>"},
{"lineNum":"  152","line":"template<typename OtherDerived>"},
{"lineNum":"  153","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":"  154","line":"Derived& DenseBase<Derived>::operator-=(const EigenBase<OtherDerived> &other)"},
{"lineNum":"  155","line":"{"},
{"lineNum":"  156","line":"  call_assignment(derived(), other.derived(), internal::sub_assign_op<Scalar,typename OtherDerived::Scalar>());"},
{"lineNum":"  157","line":"  return derived();"},
{"lineNum":"  158","line":"}"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"} // end namespace Eigen"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"#endif // EIGEN_EIGENBASE_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 1, "covered" : 0,};
var merged_data = [];
