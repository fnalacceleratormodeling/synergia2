var data = {lines:[
{"lineNum":"    1","line":"// -*- C++ -*-"},
{"lineNum":"    2","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions."},
{"lineNum":"    5","line":"// See https://llvm.org/LICENSE.txt for license information."},
{"lineNum":"    6","line":"// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef _LIBCPP___FUNCTIONAL_FUNCTION_H"},
{"lineNum":"   11","line":"#define _LIBCPP___FUNCTIONAL_FUNCTION_H"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"#include <__config>"},
{"lineNum":"   14","line":"#include <__functional/binary_function.h>"},
{"lineNum":"   15","line":"#include <__functional/invoke.h>"},
{"lineNum":"   16","line":"#include <__functional/unary_function.h>"},
{"lineNum":"   17","line":"#include <__iterator/iterator_traits.h>"},
{"lineNum":"   18","line":"#include <__memory/allocator_traits.h>"},
{"lineNum":"   19","line":"#include <__memory/compressed_pair.h>"},
{"lineNum":"   20","line":"#include <__memory/shared_ptr.h>"},
{"lineNum":"   21","line":"#include <exception>"},
{"lineNum":"   22","line":"#include <memory> // TODO: replace with <__memory/__builtin_new_allocator.h>"},
{"lineNum":"   23","line":"#include <type_traits>"},
{"lineNum":"   24","line":"#include <utility>"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"},
{"lineNum":"   27","line":"#pragma GCC system_header"},
{"lineNum":"   28","line":"#endif"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"_LIBCPP_BEGIN_NAMESPACE_STD"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"// bad_function_call"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"class _LIBCPP_EXCEPTION_ABI bad_function_call","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"   35","line":"    : public exception"},
{"lineNum":"   36","line":"{"},
{"lineNum":"   37","line":"#ifdef _LIBCPP_ABI_BAD_FUNCTION_CALL_KEY_FUNCTION"},
{"lineNum":"   38","line":"public:"},
{"lineNum":"   39","line":"    virtual ~bad_function_call() _NOEXCEPT;"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"    virtual const char* what() const _NOEXCEPT;"},
{"lineNum":"   42","line":"#endif"},
{"lineNum":"   43","line":"};"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"_LIBCPP_NORETURN inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"   46","line":"void __throw_bad_function_call()"},
{"lineNum":"   47","line":"{","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   48","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"   49","line":"    throw bad_function_call();","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   50","line":"#else"},
{"lineNum":"   51","line":"    _VSTD::abort();"},
{"lineNum":"   52","line":"#endif"},
{"lineNum":"   53","line":"}"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"#if defined(_LIBCPP_CXX03_LANG) && !defined(_LIBCPP_DISABLE_DEPRECATION_WARNINGS) && __has_attribute(deprecated)"},
{"lineNum":"   56","line":"#   define _LIBCPP_DEPRECATED_CXX03_FUNCTION \\"},
{"lineNum":"   57","line":"        __attribute__((deprecated(\"Using std::function in C++03 is not supported anymore. Please upgrade to C++11 or later, or use a different type\")))"},
{"lineNum":"   58","line":"#else"},
{"lineNum":"   59","line":"#   define _LIBCPP_DEPRECATED_CXX03_FUNCTION /* nothing */"},
{"lineNum":"   60","line":"#endif"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"template<class _Fp> class _LIBCPP_DEPRECATED_CXX03_FUNCTION _LIBCPP_TEMPLATE_VIS function; // undefined"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"namespace __function"},
{"lineNum":"   65","line":"{"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"template<class _Rp>"},
{"lineNum":"   68","line":"struct __maybe_derive_from_unary_function"},
{"lineNum":"   69","line":"{"},
{"lineNum":"   70","line":"};"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"template<class _Rp, class _A1>"},
{"lineNum":"   73","line":"struct __maybe_derive_from_unary_function<_Rp(_A1)>"},
{"lineNum":"   74","line":"    : public unary_function<_A1, _Rp>"},
{"lineNum":"   75","line":"{"},
{"lineNum":"   76","line":"};"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"template<class _Rp>"},
{"lineNum":"   79","line":"struct __maybe_derive_from_binary_function"},
{"lineNum":"   80","line":"{"},
{"lineNum":"   81","line":"};"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"template<class _Rp, class _A1, class _A2>"},
{"lineNum":"   84","line":"struct __maybe_derive_from_binary_function<_Rp(_A1, _A2)>"},
{"lineNum":"   85","line":"    : public binary_function<_A1, _A2, _Rp>"},
{"lineNum":"   86","line":"{"},
{"lineNum":"   87","line":"};"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"template <class _Fp>"},
{"lineNum":"   90","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"   91","line":"bool __not_null(_Fp const&) { return true; }"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"template <class _Fp>"},
{"lineNum":"   94","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"   95","line":"bool __not_null(_Fp* __ptr) { return __ptr; }"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"template <class _Ret, class _Class>"},
{"lineNum":"   98","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"   99","line":"bool __not_null(_Ret _Class::*__ptr) { return __ptr; }"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"template <class _Fp>"},
{"lineNum":"  102","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  103","line":"bool __not_null(function<_Fp> const& __f) { return !!__f; }"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"#ifdef _LIBCPP_HAS_EXTENSION_BLOCKS"},
{"lineNum":"  106","line":"template <class _Rp, class ..._Args>"},
{"lineNum":"  107","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  108","line":"bool __not_null(_Rp (^__p)(_Args...)) { return __p; }"},
{"lineNum":"  109","line":"#endif"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"} // namespace __function"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"namespace __function {"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"// __alloc_func holds a functor and an allocator."},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"template <class _Fp, class _Ap, class _FB> class __alloc_func;"},
{"lineNum":"  120","line":"template <class _Fp, class _FB>"},
{"lineNum":"  121","line":"class __default_alloc_func;"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"template <class _Fp, class _Ap, class _Rp, class... _ArgTypes>"},
{"lineNum":"  124","line":"class __alloc_func<_Fp, _Ap, _Rp(_ArgTypes...)>"},
{"lineNum":"  125","line":"{"},
{"lineNum":"  126","line":"    __compressed_pair<_Fp, _Ap> __f_;"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"  public:"},
{"lineNum":"  129","line":"    typedef _LIBCPP_NODEBUG_TYPE _Fp _Target;"},
{"lineNum":"  130","line":"    typedef _LIBCPP_NODEBUG_TYPE _Ap _Alloc;"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  133","line":"    const _Target& __target() const { return __f_.first(); }"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"    // WIN32 APIs may define __allocator, so use __get_allocator instead."},
{"lineNum":"  136","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  137","line":"    const _Alloc& __get_allocator() const { return __f_.second(); }"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  140","line":"    explicit __alloc_func(_Target&& __f)"},
{"lineNum":"  141","line":"        : __f_(piecewise_construct, _VSTD::forward_as_tuple(_VSTD::move(__f)),"},
{"lineNum":"  142","line":"               _VSTD::forward_as_tuple())"},
{"lineNum":"  143","line":"    {"},
{"lineNum":"  144","line":"    }"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  147","line":"    explicit __alloc_func(const _Target& __f, const _Alloc& __a)"},
{"lineNum":"  148","line":"        : __f_(piecewise_construct, _VSTD::forward_as_tuple(__f),"},
{"lineNum":"  149","line":"               _VSTD::forward_as_tuple(__a))"},
{"lineNum":"  150","line":"    {","class":"linePartCov","hits":"108","order":"42","possible_hits":"114",},
{"lineNum":"  151","line":"    }","class":"linePartCov","hits":"108","order":"43","possible_hits":"228",},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  154","line":"    explicit __alloc_func(const _Target& __f, _Alloc&& __a)"},
{"lineNum":"  155","line":"        : __f_(piecewise_construct, _VSTD::forward_as_tuple(__f),"},
{"lineNum":"  156","line":"               _VSTD::forward_as_tuple(_VSTD::move(__a)))"},
{"lineNum":"  157","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"114",},
{"lineNum":"  158","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"228",},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  161","line":"    explicit __alloc_func(_Target&& __f, _Alloc&& __a)"},
{"lineNum":"  162","line":"        : __f_(piecewise_construct, _VSTD::forward_as_tuple(_VSTD::move(__f)),"},
{"lineNum":"  163","line":"               _VSTD::forward_as_tuple(_VSTD::move(__a)))"},
{"lineNum":"  164","line":"    {","class":"linePartCov","hits":"108","order":"30","possible_hits":"114",},
{"lineNum":"  165","line":"    }","class":"linePartCov","hits":"108","order":"31","possible_hits":"228",},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  168","line":"    _Rp operator()(_ArgTypes&&... __arg)"},
{"lineNum":"  169","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  170","line":"        typedef __invoke_void_return_wrapper<_Rp> _Invoker;"},
{"lineNum":"  171","line":"        return _Invoker::__call(__f_.first(),","class":"lineNoCov","hits":"0","possible_hits":"140",},
{"lineNum":"  172","line":"                                _VSTD::forward<_ArgTypes>(__arg)...);"},
{"lineNum":"  173","line":"    }"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  176","line":"    __alloc_func* __clone() const"},
{"lineNum":"  177","line":"    {"},
{"lineNum":"  178","line":"        typedef allocator_traits<_Alloc> __alloc_traits;"},
{"lineNum":"  179","line":"        typedef"},
{"lineNum":"  180","line":"            typename __rebind_alloc_helper<__alloc_traits, __alloc_func>::type"},
{"lineNum":"  181","line":"                _AA;"},
{"lineNum":"  182","line":"        _AA __a(__f_.second());"},
{"lineNum":"  183","line":"        typedef __allocator_destructor<_AA> _Dp;"},
{"lineNum":"  184","line":"        unique_ptr<__alloc_func, _Dp> __hold(__a.allocate(1), _Dp(__a, 1));"},
{"lineNum":"  185","line":"        ::new ((void*)__hold.get()) __alloc_func(__f_.first(), _Alloc(__a));"},
{"lineNum":"  186","line":"        return __hold.release();"},
{"lineNum":"  187","line":"    }"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  190","line":"    void destroy() _NOEXCEPT { __f_.~__compressed_pair<_Target, _Alloc>(); }"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"    static void __destroy_and_delete(__alloc_func* __f) {"},
{"lineNum":"  193","line":"      typedef allocator_traits<_Alloc> __alloc_traits;"},
{"lineNum":"  194","line":"      typedef typename __rebind_alloc_helper<__alloc_traits, __alloc_func>::type"},
{"lineNum":"  195","line":"          _FunAlloc;"},
{"lineNum":"  196","line":"      _FunAlloc __a(__f->__get_allocator());"},
{"lineNum":"  197","line":"      __f->destroy();"},
{"lineNum":"  198","line":"      __a.deallocate(__f, 1);"},
{"lineNum":"  199","line":"    }"},
{"lineNum":"  200","line":"};"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"template <class _Fp, class _Rp, class... _ArgTypes>"},
{"lineNum":"  203","line":"class __default_alloc_func<_Fp, _Rp(_ArgTypes...)> {"},
{"lineNum":"  204","line":"  _Fp __f_;"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"public:"},
{"lineNum":"  207","line":"  typedef _LIBCPP_NODEBUG_TYPE _Fp _Target;"},
{"lineNum":"  208","line":""},
{"lineNum":"  209","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  210","line":"  const _Target& __target() const { return __f_; }"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  213","line":"  explicit __default_alloc_func(_Target&& __f) : __f_(_VSTD::move(__f)) {}"},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  216","line":"  explicit __default_alloc_func(const _Target& __f) : __f_(__f) {}"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  219","line":"  _Rp operator()(_ArgTypes&&... __arg) {"},
{"lineNum":"  220","line":"    typedef __invoke_void_return_wrapper<_Rp> _Invoker;"},
{"lineNum":"  221","line":"    return _Invoker::__call(__f_, _VSTD::forward<_ArgTypes>(__arg)...);"},
{"lineNum":"  222","line":"  }"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  225","line":"  __default_alloc_func* __clone() const {"},
{"lineNum":"  226","line":"      __builtin_new_allocator::__holder_t __hold ="},
{"lineNum":"  227","line":"        __builtin_new_allocator::__allocate_type<__default_alloc_func>(1);"},
{"lineNum":"  228","line":"    __default_alloc_func* __res ="},
{"lineNum":"  229","line":"        ::new ((void*)__hold.get()) __default_alloc_func(__f_);"},
{"lineNum":"  230","line":"    (void)__hold.release();"},
{"lineNum":"  231","line":"    return __res;"},
{"lineNum":"  232","line":"  }"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  235","line":"  void destroy() _NOEXCEPT { __f_.~_Target(); }"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"  static void __destroy_and_delete(__default_alloc_func* __f) {"},
{"lineNum":"  238","line":"    __f->destroy();"},
{"lineNum":"  239","line":"      __builtin_new_allocator::__deallocate_type<__default_alloc_func>(__f, 1);"},
{"lineNum":"  240","line":"  }"},
{"lineNum":"  241","line":"};"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"// __base provides an abstract interface for copyable functors."},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"template<class _Fp> class _LIBCPP_TEMPLATE_VIS __base;"},
{"lineNum":"  246","line":""},
{"lineNum":"  247","line":"template<class _Rp, class ..._ArgTypes>"},
{"lineNum":"  248","line":"class __base<_Rp(_ArgTypes...)>"},
{"lineNum":"  249","line":"{"},
{"lineNum":"  250","line":"    __base(const __base&);"},
{"lineNum":"  251","line":"    __base& operator=(const __base&);"},
{"lineNum":"  252","line":"public:"},
{"lineNum":"  253","line":"    _LIBCPP_INLINE_VISIBILITY __base() {}"},
{"lineNum":"  254","line":"    _LIBCPP_INLINE_VISIBILITY virtual ~__base() {}","class":"lineNoCov","hits":"0","possible_hits":"29",},
{"lineNum":"  255","line":"    virtual __base* __clone() const = 0;"},
{"lineNum":"  256","line":"    virtual void __clone(__base*) const = 0;"},
{"lineNum":"  257","line":"    virtual void destroy() _NOEXCEPT = 0;"},
{"lineNum":"  258","line":"    virtual void destroy_deallocate() _NOEXCEPT = 0;"},
{"lineNum":"  259","line":"    virtual _Rp operator()(_ArgTypes&& ...) = 0;"},
{"lineNum":"  260","line":"#ifndef _LIBCPP_NO_RTTI"},
{"lineNum":"  261","line":"    virtual const void* target(const type_info&) const _NOEXCEPT = 0;"},
{"lineNum":"  262","line":"    virtual const std::type_info& target_type() const _NOEXCEPT = 0;"},
{"lineNum":"  263","line":"#endif // _LIBCPP_NO_RTTI"},
{"lineNum":"  264","line":"};"},
{"lineNum":"  265","line":""},
{"lineNum":"  266","line":"// __func implements __base for a given functor type."},
{"lineNum":"  267","line":""},
{"lineNum":"  268","line":"template<class _FD, class _Alloc, class _FB> class __func;","class":"lineNoCov","hits":"0","possible_hits":"803",},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"template<class _Fp, class _Alloc, class _Rp, class ..._ArgTypes>"},
{"lineNum":"  271","line":"class __func<_Fp, _Alloc, _Rp(_ArgTypes...)>"},
{"lineNum":"  272","line":"    : public  __base<_Rp(_ArgTypes...)>"},
{"lineNum":"  273","line":"{"},
{"lineNum":"  274","line":"    __alloc_func<_Fp, _Alloc, _Rp(_ArgTypes...)> __f_;"},
{"lineNum":"  275","line":"public:"},
{"lineNum":"  276","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  277","line":"    explicit __func(_Fp&& __f)"},
{"lineNum":"  278","line":"        : __f_(_VSTD::move(__f)) {}"},
{"lineNum":"  279","line":""},
{"lineNum":"  280","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  281","line":"    explicit __func(const _Fp& __f, const _Alloc& __a)"},
{"lineNum":"  282","line":"        : __f_(__f, __a) {}","class":"linePartCov","hits":"108","order":"41","possible_hits":"567",},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  285","line":"    explicit __func(const _Fp& __f, _Alloc&& __a)"},
{"lineNum":"  286","line":"        : __f_(__f, _VSTD::move(__a)) {}","class":"lineNoCov","hits":"0","possible_hits":"453",},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  289","line":"    explicit __func(_Fp&& __f, _Alloc&& __a)"},
{"lineNum":"  290","line":"        : __f_(_VSTD::move(__f), _VSTD::move(__a)) {}","class":"linePartCov","hits":"108","order":"29","possible_hits":"567",},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"    virtual __base<_Rp(_ArgTypes...)>* __clone() const;"},
{"lineNum":"  293","line":"    virtual void __clone(__base<_Rp(_ArgTypes...)>*) const;"},
{"lineNum":"  294","line":"    virtual void destroy() _NOEXCEPT;"},
{"lineNum":"  295","line":"    virtual void destroy_deallocate() _NOEXCEPT;"},
{"lineNum":"  296","line":"    virtual _Rp operator()(_ArgTypes&&... __arg);"},
{"lineNum":"  297","line":"#ifndef _LIBCPP_NO_RTTI"},
{"lineNum":"  298","line":"    virtual const void* target(const type_info&) const _NOEXCEPT;"},
{"lineNum":"  299","line":"    virtual const std::type_info& target_type() const _NOEXCEPT;"},
{"lineNum":"  300","line":"#endif // _LIBCPP_NO_RTTI"},
{"lineNum":"  301","line":"};"},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"template<class _Fp, class _Alloc, class _Rp, class ..._ArgTypes>"},
{"lineNum":"  304","line":"__base<_Rp(_ArgTypes...)>*"},
{"lineNum":"  305","line":"__func<_Fp, _Alloc, _Rp(_ArgTypes...)>::__clone() const"},
{"lineNum":"  306","line":"{","class":"lineNoCov","hits":"0","possible_hits":"339",},
{"lineNum":"  307","line":"    typedef allocator_traits<_Alloc> __alloc_traits;"},
{"lineNum":"  308","line":"    typedef typename __rebind_alloc_helper<__alloc_traits, __func>::type _Ap;"},
{"lineNum":"  309","line":"    _Ap __a(__f_.__get_allocator());","class":"lineNoCov","hits":"0","possible_hits":"114",},
{"lineNum":"  310","line":"    typedef __allocator_destructor<_Ap> _Dp;"},
{"lineNum":"  311","line":"    unique_ptr<__func, _Dp> __hold(__a.allocate(1), _Dp(__a, 1));"},
{"lineNum":"  312","line":"    ::new ((void*)__hold.get()) __func(__f_.__target(), _Alloc(__a));","class":"lineNoCov","hits":"0","possible_hits":"114",},
{"lineNum":"  313","line":"    return __hold.release();"},
{"lineNum":"  314","line":"}","class":"lineNoCov","hits":"0","possible_hits":"675",},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":"template<class _Fp, class _Alloc, class _Rp, class ..._ArgTypes>"},
{"lineNum":"  317","line":"void"},
{"lineNum":"  318","line":"__func<_Fp, _Alloc, _Rp(_ArgTypes...)>::__clone(__base<_Rp(_ArgTypes...)>* __p) const"},
{"lineNum":"  319","line":"{","class":"linePartCov","hits":"108","order":"39","possible_hits":"339",},
{"lineNum":"  320","line":"    ::new ((void*)__p) __func(__f_.__target(), __f_.__get_allocator());","class":"linePartCov","hits":"108","order":"40","possible_hits":"114",},
{"lineNum":"  321","line":"}","class":"linePartCov","hits":"108","order":"44","possible_hits":"563",},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"template<class _Fp, class _Alloc, class _Rp, class ..._ArgTypes>"},
{"lineNum":"  324","line":"void"},
{"lineNum":"  325","line":"__func<_Fp, _Alloc, _Rp(_ArgTypes...)>::destroy() _NOEXCEPT"},
{"lineNum":"  326","line":"{","class":"linePartCov","hits":"108","order":"46","possible_hits":"339",},
{"lineNum":"  327","line":"    __f_.destroy();"},
{"lineNum":"  328","line":"}","class":"linePartCov","hits":"108","order":"47","possible_hits":"677",},
{"lineNum":"  329","line":""},
{"lineNum":"  330","line":"template<class _Fp, class _Alloc, class _Rp, class ..._ArgTypes>"},
{"lineNum":"  331","line":"void"},
{"lineNum":"  332","line":"__func<_Fp, _Alloc, _Rp(_ArgTypes...)>::destroy_deallocate() _NOEXCEPT"},
{"lineNum":"  333","line":"{","class":"lineNoCov","hits":"0","possible_hits":"339",},
{"lineNum":"  334","line":"    typedef allocator_traits<_Alloc> __alloc_traits;"},
{"lineNum":"  335","line":"    typedef typename __rebind_alloc_helper<__alloc_traits, __func>::type _Ap;"},
{"lineNum":"  336","line":"    _Ap __a(__f_.__get_allocator());"},
{"lineNum":"  337","line":"    __f_.destroy();"},
{"lineNum":"  338","line":"    __a.deallocate(this, 1);"},
{"lineNum":"  339","line":"}"},
{"lineNum":"  340","line":""},
{"lineNum":"  341","line":"template<class _Fp, class _Alloc, class _Rp, class ..._ArgTypes>"},
{"lineNum":"  342","line":"_Rp"},
{"lineNum":"  343","line":"__func<_Fp, _Alloc, _Rp(_ArgTypes...)>::operator()(_ArgTypes&& ... __arg)"},
{"lineNum":"  344","line":"{","class":"lineNoCov","hits":"0","possible_hits":"339",},
{"lineNum":"  345","line":"    return __f_(_VSTD::forward<_ArgTypes>(__arg)...);","class":"lineNoCov","hits":"0","possible_hits":"360",},
{"lineNum":"  346","line":"}"},
{"lineNum":"  347","line":""},
{"lineNum":"  348","line":"#ifndef _LIBCPP_NO_RTTI"},
{"lineNum":"  349","line":""},
{"lineNum":"  350","line":"template<class _Fp, class _Alloc, class _Rp, class ..._ArgTypes>"},
{"lineNum":"  351","line":"const void*"},
{"lineNum":"  352","line":"__func<_Fp, _Alloc, _Rp(_ArgTypes...)>::target(const type_info& __ti) const _NOEXCEPT"},
{"lineNum":"  353","line":"{","class":"lineNoCov","hits":"0","possible_hits":"339",},
{"lineNum":"  354","line":"    if (__ti == typeid(_Fp))","class":"lineNoCov","hits":"0","possible_hits":"564",},
{"lineNum":"  355","line":"        return &__f_.__target();","class":"lineNoCov","hits":"0","possible_hits":"114",},
{"lineNum":"  356","line":"    return nullptr;","class":"lineNoCov","hits":"0","possible_hits":"114",},
{"lineNum":"  357","line":"}","class":"lineNoCov","hits":"0","possible_hits":"791",},
{"lineNum":"  358","line":""},
{"lineNum":"  359","line":"template<class _Fp, class _Alloc, class _Rp, class ..._ArgTypes>"},
{"lineNum":"  360","line":"const std::type_info&"},
{"lineNum":"  361","line":"__func<_Fp, _Alloc, _Rp(_ArgTypes...)>::target_type() const _NOEXCEPT"},
{"lineNum":"  362","line":"{","class":"lineNoCov","hits":"0","possible_hits":"339",},
{"lineNum":"  363","line":"    return typeid(_Fp);","class":"lineNoCov","hits":"0","possible_hits":"677",},
{"lineNum":"  364","line":"}"},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":"#endif // _LIBCPP_NO_RTTI"},
{"lineNum":"  367","line":""},
{"lineNum":"  368","line":"// __value_func creates a value-type from a __func."},
{"lineNum":"  369","line":""},
{"lineNum":"  370","line":"template <class _Fp> class __value_func;"},
{"lineNum":"  371","line":""},
{"lineNum":"  372","line":"template <class _Rp, class... _ArgTypes> class __value_func<_Rp(_ArgTypes...)>"},
{"lineNum":"  373","line":"{"},
{"lineNum":"  374","line":"    typename aligned_storage<3 * sizeof(void*)>::type __buf_;"},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"    typedef __base<_Rp(_ArgTypes...)> __func;"},
{"lineNum":"  377","line":"    __func* __f_;"},
{"lineNum":"  378","line":""},
{"lineNum":"  379","line":"    _LIBCPP_NO_CFI static __func* __as_base(void* p)"},
{"lineNum":"  380","line":"    {"},
{"lineNum":"  381","line":"        return reinterpret_cast<__func*>(p);"},
{"lineNum":"  382","line":"    }"},
{"lineNum":"  383","line":""},
{"lineNum":"  384","line":"  public:"},
{"lineNum":"  385","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  386","line":"    __value_func() _NOEXCEPT : __f_(nullptr) {}","class":"linePartCov","hits":"54","order":"23","possible_hits":"172",},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"    template <class _Fp, class _Alloc>"},
{"lineNum":"  389","line":"    _LIBCPP_INLINE_VISIBILITY __value_func(_Fp&& __f, const _Alloc& __a)"},
{"lineNum":"  390","line":"        : __f_(nullptr)","class":"linePartCov","hits":"108","order":"28","possible_hits":"116",},
{"lineNum":"  391","line":"    {","class":"linePartCov","hits":"108","order":"27","possible_hits":"114",},
{"lineNum":"  392","line":"        typedef allocator_traits<_Alloc> __alloc_traits;"},
{"lineNum":"  393","line":"        typedef __function::__func<_Fp, _Alloc, _Rp(_ArgTypes...)> _Fun;"},
{"lineNum":"  394","line":"        typedef typename __rebind_alloc_helper<__alloc_traits, _Fun>::type"},
{"lineNum":"  395","line":"            _FunAlloc;"},
{"lineNum":"  396","line":""},
{"lineNum":"  397","line":"        if (__function::__not_null(__f))"},
{"lineNum":"  398","line":"        {"},
{"lineNum":"  399","line":"            _FunAlloc __af(__a);"},
{"lineNum":"  400","line":"            if (sizeof(_Fun) <= sizeof(__buf_) &&"},
{"lineNum":"  401","line":"                is_nothrow_copy_constructible<_Fp>::value &&"},
{"lineNum":"  402","line":"                is_nothrow_copy_constructible<_FunAlloc>::value)"},
{"lineNum":"  403","line":"            {"},
{"lineNum":"  404","line":"                __f_ =","class":"linePartCov","hits":"108","order":"32","possible_hits":"337",},
{"lineNum":"  405","line":"                    ::new ((void*)&__buf_) _Fun(_VSTD::move(__f), _Alloc(__af));"},
{"lineNum":"  406","line":"            }"},
{"lineNum":"  407","line":"            else"},
{"lineNum":"  408","line":"            {"},
{"lineNum":"  409","line":"                typedef __allocator_destructor<_FunAlloc> _Dp;"},
{"lineNum":"  410","line":"                unique_ptr<__func, _Dp> __hold(__af.allocate(1), _Dp(__af, 1));"},
{"lineNum":"  411","line":"                ::new ((void*)__hold.get()) _Fun(_VSTD::move(__f), _Alloc(__a));"},
{"lineNum":"  412","line":"                __f_ = __hold.release();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  413","line":"            }"},
{"lineNum":"  414","line":"        }"},
{"lineNum":"  415","line":"    }","class":"linePartCov","hits":"108","order":"33","possible_hits":"114",},
{"lineNum":"  416","line":""},
{"lineNum":"  417","line":"    template <class _Fp,"},
{"lineNum":"  418","line":"        class = typename enable_if<!is_same<typename decay<_Fp>::type, __value_func>::value>::type>"},
{"lineNum":"  419","line":"    _LIBCPP_INLINE_VISIBILITY explicit __value_func(_Fp&& __f)"},
{"lineNum":"  420","line":"        : __value_func(_VSTD::forward<_Fp>(__f), allocator<_Fp>()) {}","class":"linePartCov","hits":"108","order":"26","possible_hits":"114",},
{"lineNum":"  421","line":""},
{"lineNum":"  422","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  423","line":"    __value_func(const __value_func& __f)"},
{"lineNum":"  424","line":"    {"},
{"lineNum":"  425","line":"        if (__f.__f_ == nullptr)","class":"lineNoCov","hits":"0","possible_hits":"33",},
{"lineNum":"  426","line":"            __f_ = nullptr;","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"  427","line":"        else if ((void*)__f.__f_ == &__f.__buf_)","class":"lineNoCov","hits":"0","possible_hits":"32",},
{"lineNum":"  428","line":"        {"},
{"lineNum":"  429","line":"            __f_ = __as_base(&__buf_);","class":"lineNoCov","hits":"0","possible_hits":"32",},
{"lineNum":"  430","line":"            __f.__f_->__clone(__f_);","class":"lineNoCov","hits":"0","possible_hits":"32",},
{"lineNum":"  431","line":"        }"},
{"lineNum":"  432","line":"        else"},
{"lineNum":"  433","line":"            __f_ = __f.__f_->__clone();","class":"lineNoCov","hits":"0","possible_hits":"32",},
{"lineNum":"  434","line":"    }"},
{"lineNum":"  435","line":""},
{"lineNum":"  436","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  437","line":"    __value_func(__value_func&& __f) _NOEXCEPT"},
{"lineNum":"  438","line":"    {"},
{"lineNum":"  439","line":"        if (__f.__f_ == nullptr)","class":"linePartCov","hits":"12","order":"57","possible_hits":"272",},
{"lineNum":"  440","line":"            __f_ = nullptr;","class":"lineNoCov","hits":"0","possible_hits":"272",},
{"lineNum":"  441","line":"        else if ((void*)__f.__f_ == &__f.__buf_)","class":"linePartCov","hits":"12","order":"58","possible_hits":"272",},
{"lineNum":"  442","line":"        {"},
{"lineNum":"  443","line":"            __f_ = __as_base(&__buf_);","class":"linePartCov","hits":"12","order":"59","possible_hits":"272",},
{"lineNum":"  444","line":"            __f.__f_->__clone(__f_);","class":"linePartCov","hits":"12","order":"60","possible_hits":"409",},
{"lineNum":"  445","line":"        }","class":"lineCov","hits":"12","order":"61","possible_hits":"12",},
{"lineNum":"  446","line":"        else"},
{"lineNum":"  447","line":"        {"},
{"lineNum":"  448","line":"            __f_ = __f.__f_;","class":"lineNoCov","hits":"0","possible_hits":"274",},
{"lineNum":"  449","line":"            __f.__f_ = nullptr;","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  450","line":"        }"},
{"lineNum":"  451","line":"    }"},
{"lineNum":"  452","line":""},
{"lineNum":"  453","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  454","line":"    ~__value_func()"},
{"lineNum":"  455","line":"    {"},
{"lineNum":"  456","line":"        if ((void*)__f_ == &__buf_)","class":"linePartCov","hits":"276","order":"51","possible_hits":"1158",},
{"lineNum":"  457","line":"            __f_->destroy();"},
{"lineNum":"  458","line":"        else if (__f_)","class":"linePartCov","hits":"108","order":"52","possible_hits":"1149",},
{"lineNum":"  459","line":"            __f_->destroy_deallocate();"},
{"lineNum":"  460","line":"    }"},
{"lineNum":"  461","line":""},
{"lineNum":"  462","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  463","line":"    __value_func& operator=(__value_func&& __f)"},
{"lineNum":"  464","line":"    {"},
{"lineNum":"  465","line":"        *this = nullptr;"},
{"lineNum":"  466","line":"        if (__f.__f_ == nullptr)"},
{"lineNum":"  467","line":"            __f_ = nullptr;"},
{"lineNum":"  468","line":"        else if ((void*)__f.__f_ == &__f.__buf_)"},
{"lineNum":"  469","line":"        {"},
{"lineNum":"  470","line":"            __f_ = __as_base(&__buf_);"},
{"lineNum":"  471","line":"            __f.__f_->__clone(__f_);"},
{"lineNum":"  472","line":"        }"},
{"lineNum":"  473","line":"        else"},
{"lineNum":"  474","line":"        {"},
{"lineNum":"  475","line":"            __f_ = __f.__f_;"},
{"lineNum":"  476","line":"            __f.__f_ = nullptr;"},
{"lineNum":"  477","line":"        }"},
{"lineNum":"  478","line":"        return *this;"},
{"lineNum":"  479","line":"    }"},
{"lineNum":"  480","line":""},
{"lineNum":"  481","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  482","line":"    __value_func& operator=(nullptr_t)"},
{"lineNum":"  483","line":"    {"},
{"lineNum":"  484","line":"        __func* __f = __f_;"},
{"lineNum":"  485","line":"        __f_ = nullptr;"},
{"lineNum":"  486","line":"        if ((void*)__f == &__buf_)"},
{"lineNum":"  487","line":"            __f->destroy();"},
{"lineNum":"  488","line":"        else if (__f)"},
{"lineNum":"  489","line":"            __f->destroy_deallocate();"},
{"lineNum":"  490","line":"        return *this;"},
{"lineNum":"  491","line":"    }"},
{"lineNum":"  492","line":""},
{"lineNum":"  493","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  494","line":"    _Rp operator()(_ArgTypes&&... __args) const"},
{"lineNum":"  495","line":"    {"},
{"lineNum":"  496","line":"        if (__f_ == nullptr)","class":"lineNoCov","hits":"0","possible_hits":"36",},
{"lineNum":"  497","line":"            __throw_bad_function_call();","class":"lineNoCov","hits":"0","possible_hits":"39",},
{"lineNum":"  498","line":"        return (*__f_)(_VSTD::forward<_ArgTypes>(__args)...);","class":"lineNoCov","hits":"0","possible_hits":"36",},
{"lineNum":"  499","line":"    }"},
{"lineNum":"  500","line":""},
{"lineNum":"  501","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  502","line":"    void swap(__value_func& __f) _NOEXCEPT"},
{"lineNum":"  503","line":"    {","class":"linePartCov","hits":"3","order":"35","possible_hits":"13",},
{"lineNum":"  504","line":"        if (&__f == this)","class":"linePartCov","hits":"3","order":"36","possible_hits":"13",},
{"lineNum":"  505","line":"            return;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  506","line":"        if ((void*)__f_ == &__buf_ && (void*)__f.__f_ == &__f.__buf_)","class":"linePartCov","hits":"6","order":"37","possible_hits":"26",},
{"lineNum":"  507","line":"        {"},
{"lineNum":"  508","line":"            typename aligned_storage<sizeof(__buf_)>::type __tempbuf;"},
{"lineNum":"  509","line":"            __func* __t = __as_base(&__tempbuf);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  510","line":"            __f_->__clone(__t);","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"  511","line":"            __f_->destroy();","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"  512","line":"            __f_ = nullptr;","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"  513","line":"            __f.__f_->__clone(__as_base(&__buf_));","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"  514","line":"            __f.__f_->destroy();","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"  515","line":"            __f.__f_ = nullptr;","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"  516","line":"            __f_ = __as_base(&__buf_);","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"  517","line":"            __t->__clone(__as_base(&__f.__buf_));","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"  518","line":"            __t->destroy();","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"  519","line":"            __f.__f_ = __as_base(&__f.__buf_);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  520","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"  521","line":"        else if ((void*)__f_ == &__buf_)"},
{"lineNum":"  522","line":"        {"},
{"lineNum":"  523","line":"            __f_->__clone(__as_base(&__f.__buf_));","class":"linePartCov","hits":"3","order":"38","possible_hits":"39",},
{"lineNum":"  524","line":"            __f_->destroy();","class":"linePartCov","hits":"3","order":"45","possible_hits":"13",},
{"lineNum":"  525","line":"            __f_ = __f.__f_;","class":"linePartCov","hits":"3","order":"48","possible_hits":"13",},
{"lineNum":"  526","line":"            __f.__f_ = __as_base(&__f.__buf_);","class":"lineCov","hits":"3","order":"49","possible_hits":"3",},
{"lineNum":"  527","line":"        }"},
{"lineNum":"  528","line":"        else if ((void*)__f.__f_ == &__f.__buf_)","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"  529","line":"        {"},
{"lineNum":"  530","line":"            __f.__f_->__clone(__as_base(&__buf_));","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"  531","line":"            __f.__f_->destroy();","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"  532","line":"            __f.__f_ = __f_;","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"  533","line":"            __f_ = __as_base(&__buf_);","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"  534","line":"        }"},
{"lineNum":"  535","line":"        else"},
{"lineNum":"  536","line":"            _VSTD::swap(__f_, __f.__f_);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  537","line":"    }","class":"linePartCov","hits":"3","order":"50","possible_hits":"13",},
{"lineNum":"  538","line":""},
{"lineNum":"  539","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  540","line":"    explicit operator bool() const _NOEXCEPT { return __f_ != nullptr; }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  541","line":""},
{"lineNum":"  542","line":"#ifndef _LIBCPP_NO_RTTI"},
{"lineNum":"  543","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  544","line":"    const std::type_info& target_type() const _NOEXCEPT"},
{"lineNum":"  545","line":"    {"},
{"lineNum":"  546","line":"        if (__f_ == nullptr)"},
{"lineNum":"  547","line":"            return typeid(void);"},
{"lineNum":"  548","line":"        return __f_->target_type();"},
{"lineNum":"  549","line":"    }"},
{"lineNum":"  550","line":""},
{"lineNum":"  551","line":"    template <typename _Tp>"},
{"lineNum":"  552","line":"    _LIBCPP_INLINE_VISIBILITY const _Tp* target() const _NOEXCEPT"},
{"lineNum":"  553","line":"    {"},
{"lineNum":"  554","line":"        if (__f_ == nullptr)"},
{"lineNum":"  555","line":"            return nullptr;"},
{"lineNum":"  556","line":"        return (const _Tp*)__f_->target(typeid(_Tp));"},
{"lineNum":"  557","line":"    }"},
{"lineNum":"  558","line":"#endif // _LIBCPP_NO_RTTI"},
{"lineNum":"  559","line":"};"},
{"lineNum":"  560","line":""},
{"lineNum":"  561","line":"// Storage for a functor object, to be used with __policy to manage copy and"},
{"lineNum":"  562","line":"// destruction."},
{"lineNum":"  563","line":"union __policy_storage"},
{"lineNum":"  564","line":"{"},
{"lineNum":"  565","line":"    mutable char __small[sizeof(void*) * 2];"},
{"lineNum":"  566","line":"    void* __large;"},
{"lineNum":"  567","line":"};"},
{"lineNum":"  568","line":""},
{"lineNum":"  569","line":"// True if _Fun can safely be held in __policy_storage.__small."},
{"lineNum":"  570","line":"template <typename _Fun>"},
{"lineNum":"  571","line":"struct __use_small_storage"},
{"lineNum":"  572","line":"    : public integral_constant<"},
{"lineNum":"  573","line":"          bool, sizeof(_Fun) <= sizeof(__policy_storage) &&"},
{"lineNum":"  574","line":"                    _LIBCPP_ALIGNOF(_Fun) <= _LIBCPP_ALIGNOF(__policy_storage) &&"},
{"lineNum":"  575","line":"                    is_trivially_copy_constructible<_Fun>::value &&"},
{"lineNum":"  576","line":"                    is_trivially_destructible<_Fun>::value> {};"},
{"lineNum":"  577","line":""},
{"lineNum":"  578","line":"// Policy contains information about how to copy, destroy, and move the"},
{"lineNum":"  579","line":"// underlying functor. You can think of it as a vtable of sorts."},
{"lineNum":"  580","line":"struct __policy"},
{"lineNum":"  581","line":"{"},
{"lineNum":"  582","line":"    // Used to copy or destroy __large values. null for trivial objects."},
{"lineNum":"  583","line":"    void* (*const __clone)(const void*);"},
{"lineNum":"  584","line":"    void (*const __destroy)(void*);"},
{"lineNum":"  585","line":""},
{"lineNum":"  586","line":"    // True if this is the null policy (no value)."},
{"lineNum":"  587","line":"    const bool __is_null;"},
{"lineNum":"  588","line":""},
{"lineNum":"  589","line":"    // The target type. May be null if RTTI is disabled."},
{"lineNum":"  590","line":"    const std::type_info* const __type_info;"},
{"lineNum":"  591","line":""},
{"lineNum":"  592","line":"    // Returns a pointer to a static policy object suitable for the functor"},
{"lineNum":"  593","line":"    // type."},
{"lineNum":"  594","line":"    template <typename _Fun>"},
{"lineNum":"  595","line":"    _LIBCPP_INLINE_VISIBILITY static const __policy* __create()"},
{"lineNum":"  596","line":"    {"},
{"lineNum":"  597","line":"        return __choose_policy<_Fun>(__use_small_storage<_Fun>());"},
{"lineNum":"  598","line":"    }"},
{"lineNum":"  599","line":""},
{"lineNum":"  600","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  601","line":"    static const __policy* __create_empty()"},
{"lineNum":"  602","line":"    {"},
{"lineNum":"  603","line":"        static const _LIBCPP_CONSTEXPR __policy __policy_ = {nullptr, nullptr,"},
{"lineNum":"  604","line":"                                                             true,"},
{"lineNum":"  605","line":"#ifndef _LIBCPP_NO_RTTI"},
{"lineNum":"  606","line":"                                                             &typeid(void)"},
{"lineNum":"  607","line":"#else"},
{"lineNum":"  608","line":"                                                             nullptr"},
{"lineNum":"  609","line":"#endif"},
{"lineNum":"  610","line":"        };"},
{"lineNum":"  611","line":"        return &__policy_;"},
{"lineNum":"  612","line":"    }"},
{"lineNum":"  613","line":""},
{"lineNum":"  614","line":"  private:"},
{"lineNum":"  615","line":"    template <typename _Fun> static void* __large_clone(const void* __s)"},
{"lineNum":"  616","line":"    {"},
{"lineNum":"  617","line":"        const _Fun* __f = static_cast<const _Fun*>(__s);"},
{"lineNum":"  618","line":"        return __f->__clone();"},
{"lineNum":"  619","line":"    }"},
{"lineNum":"  620","line":""},
{"lineNum":"  621","line":"    template <typename _Fun>"},
{"lineNum":"  622","line":"    static void __large_destroy(void* __s) {"},
{"lineNum":"  623","line":"      _Fun::__destroy_and_delete(static_cast<_Fun*>(__s));"},
{"lineNum":"  624","line":"    }"},
{"lineNum":"  625","line":""},
{"lineNum":"  626","line":"    template <typename _Fun>"},
{"lineNum":"  627","line":"    _LIBCPP_INLINE_VISIBILITY static const __policy*"},
{"lineNum":"  628","line":"    __choose_policy(/* is_small = */ false_type) {"},
{"lineNum":"  629","line":"      static const _LIBCPP_CONSTEXPR __policy __policy_ = {"},
{"lineNum":"  630","line":"          &__large_clone<_Fun>, &__large_destroy<_Fun>, false,"},
{"lineNum":"  631","line":"#ifndef _LIBCPP_NO_RTTI"},
{"lineNum":"  632","line":"          &typeid(typename _Fun::_Target)"},
{"lineNum":"  633","line":"#else"},
{"lineNum":"  634","line":"          nullptr"},
{"lineNum":"  635","line":"#endif"},
{"lineNum":"  636","line":"      };"},
{"lineNum":"  637","line":"        return &__policy_;"},
{"lineNum":"  638","line":"    }"},
{"lineNum":"  639","line":""},
{"lineNum":"  640","line":"    template <typename _Fun>"},
{"lineNum":"  641","line":"    _LIBCPP_INLINE_VISIBILITY static const __policy*"},
{"lineNum":"  642","line":"        __choose_policy(/* is_small = */ true_type)"},
{"lineNum":"  643","line":"    {"},
{"lineNum":"  644","line":"        static const _LIBCPP_CONSTEXPR __policy __policy_ = {"},
{"lineNum":"  645","line":"            nullptr, nullptr, false,"},
{"lineNum":"  646","line":"#ifndef _LIBCPP_NO_RTTI"},
{"lineNum":"  647","line":"            &typeid(typename _Fun::_Target)"},
{"lineNum":"  648","line":"#else"},
{"lineNum":"  649","line":"            nullptr"},
{"lineNum":"  650","line":"#endif"},
{"lineNum":"  651","line":"        };"},
{"lineNum":"  652","line":"        return &__policy_;"},
{"lineNum":"  653","line":"    }"},
{"lineNum":"  654","line":"};"},
{"lineNum":"  655","line":""},
{"lineNum":"  656","line":"// Used to choose between perfect forwarding or pass-by-value. Pass-by-value is"},
{"lineNum":"  657","line":"// faster for types that can be passed in registers."},
{"lineNum":"  658","line":"template <typename _Tp>"},
{"lineNum":"  659","line":"using __fast_forward ="},
{"lineNum":"  660","line":"    typename conditional<is_scalar<_Tp>::value, _Tp, _Tp&&>::type;"},
{"lineNum":"  661","line":""},
{"lineNum":"  662","line":"// __policy_invoker calls an instance of __alloc_func held in __policy_storage."},
{"lineNum":"  663","line":""},
{"lineNum":"  664","line":"template <class _Fp> struct __policy_invoker;"},
{"lineNum":"  665","line":""},
{"lineNum":"  666","line":"template <class _Rp, class... _ArgTypes>"},
{"lineNum":"  667","line":"struct __policy_invoker<_Rp(_ArgTypes...)>"},
{"lineNum":"  668","line":"{"},
{"lineNum":"  669","line":"    typedef _Rp (*__Call)(const __policy_storage*,"},
{"lineNum":"  670","line":"                          __fast_forward<_ArgTypes>...);"},
{"lineNum":"  671","line":""},
{"lineNum":"  672","line":"    __Call __call_;"},
{"lineNum":"  673","line":""},
{"lineNum":"  674","line":"    // Creates an invoker that throws bad_function_call."},
{"lineNum":"  675","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  676","line":"    __policy_invoker() : __call_(&__call_empty) {}"},
{"lineNum":"  677","line":""},
{"lineNum":"  678","line":"    // Creates an invoker that calls the given instance of __func."},
{"lineNum":"  679","line":"    template <typename _Fun>"},
{"lineNum":"  680","line":"    _LIBCPP_INLINE_VISIBILITY static __policy_invoker __create()"},
{"lineNum":"  681","line":"    {"},
{"lineNum":"  682","line":"        return __policy_invoker(&__call_impl<_Fun>);"},
{"lineNum":"  683","line":"    }"},
{"lineNum":"  684","line":""},
{"lineNum":"  685","line":"  private:"},
{"lineNum":"  686","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  687","line":"    explicit __policy_invoker(__Call __c) : __call_(__c) {}"},
{"lineNum":"  688","line":""},
{"lineNum":"  689","line":"    static _Rp __call_empty(const __policy_storage*,"},
{"lineNum":"  690","line":"                            __fast_forward<_ArgTypes>...)"},
{"lineNum":"  691","line":"    {"},
{"lineNum":"  692","line":"        __throw_bad_function_call();"},
{"lineNum":"  693","line":"    }"},
{"lineNum":"  694","line":""},
{"lineNum":"  695","line":"    template <typename _Fun>"},
{"lineNum":"  696","line":"    static _Rp __call_impl(const __policy_storage* __buf,"},
{"lineNum":"  697","line":"                           __fast_forward<_ArgTypes>... __args)"},
{"lineNum":"  698","line":"    {"},
{"lineNum":"  699","line":"        _Fun* __f = reinterpret_cast<_Fun*>(__use_small_storage<_Fun>::value"},
{"lineNum":"  700","line":"                                                ? &__buf->__small"},
{"lineNum":"  701","line":"                                                : __buf->__large);"},
{"lineNum":"  702","line":"        return (*__f)(_VSTD::forward<_ArgTypes>(__args)...);"},
{"lineNum":"  703","line":"    }"},
{"lineNum":"  704","line":"};"},
{"lineNum":"  705","line":""},
{"lineNum":"  706","line":"// __policy_func uses a __policy and __policy_invoker to create a type-erased,"},
{"lineNum":"  707","line":"// copyable functor."},
{"lineNum":"  708","line":""},
{"lineNum":"  709","line":"template <class _Fp> class __policy_func;"},
{"lineNum":"  710","line":""},
{"lineNum":"  711","line":"template <class _Rp, class... _ArgTypes> class __policy_func<_Rp(_ArgTypes...)>"},
{"lineNum":"  712","line":"{"},
{"lineNum":"  713","line":"    // Inline storage for small objects."},
{"lineNum":"  714","line":"    __policy_storage __buf_;"},
{"lineNum":"  715","line":""},
{"lineNum":"  716","line":"    // Calls the value stored in __buf_. This could technically be part of"},
{"lineNum":"  717","line":"    // policy, but storing it here eliminates a level of indirection inside"},
{"lineNum":"  718","line":"    // operator()."},
{"lineNum":"  719","line":"    typedef __function::__policy_invoker<_Rp(_ArgTypes...)> __invoker;"},
{"lineNum":"  720","line":"    __invoker __invoker_;"},
{"lineNum":"  721","line":""},
{"lineNum":"  722","line":"    // The policy that describes how to move / copy / destroy __buf_. Never"},
{"lineNum":"  723","line":"    // null, even if the function is empty."},
{"lineNum":"  724","line":"    const __policy* __policy_;"},
{"lineNum":"  725","line":""},
{"lineNum":"  726","line":"  public:"},
{"lineNum":"  727","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  728","line":"    __policy_func() : __policy_(__policy::__create_empty()) {}"},
{"lineNum":"  729","line":""},
{"lineNum":"  730","line":"    template <class _Fp, class _Alloc>"},
{"lineNum":"  731","line":"    _LIBCPP_INLINE_VISIBILITY __policy_func(_Fp&& __f, const _Alloc& __a)"},
{"lineNum":"  732","line":"        : __policy_(__policy::__create_empty())"},
{"lineNum":"  733","line":"    {"},
{"lineNum":"  734","line":"        typedef __alloc_func<_Fp, _Alloc, _Rp(_ArgTypes...)> _Fun;"},
{"lineNum":"  735","line":"        typedef allocator_traits<_Alloc> __alloc_traits;"},
{"lineNum":"  736","line":"        typedef typename __rebind_alloc_helper<__alloc_traits, _Fun>::type"},
{"lineNum":"  737","line":"            _FunAlloc;"},
{"lineNum":"  738","line":""},
{"lineNum":"  739","line":"        if (__function::__not_null(__f))"},
{"lineNum":"  740","line":"        {"},
{"lineNum":"  741","line":"            __invoker_ = __invoker::template __create<_Fun>();"},
{"lineNum":"  742","line":"            __policy_ = __policy::__create<_Fun>();"},
{"lineNum":"  743","line":""},
{"lineNum":"  744","line":"            _FunAlloc __af(__a);"},
{"lineNum":"  745","line":"            if (__use_small_storage<_Fun>())"},
{"lineNum":"  746","line":"            {"},
{"lineNum":"  747","line":"                ::new ((void*)&__buf_.__small)"},
{"lineNum":"  748","line":"                    _Fun(_VSTD::move(__f), _Alloc(__af));"},
{"lineNum":"  749","line":"            }"},
{"lineNum":"  750","line":"            else"},
{"lineNum":"  751","line":"            {"},
{"lineNum":"  752","line":"                typedef __allocator_destructor<_FunAlloc> _Dp;"},
{"lineNum":"  753","line":"                unique_ptr<_Fun, _Dp> __hold(__af.allocate(1), _Dp(__af, 1));"},
{"lineNum":"  754","line":"                ::new ((void*)__hold.get())"},
{"lineNum":"  755","line":"                    _Fun(_VSTD::move(__f), _Alloc(__af));"},
{"lineNum":"  756","line":"                __buf_.__large = __hold.release();"},
{"lineNum":"  757","line":"            }"},
{"lineNum":"  758","line":"        }"},
{"lineNum":"  759","line":"    }"},
{"lineNum":"  760","line":""},
{"lineNum":"  761","line":"    template <class _Fp, class = typename enable_if<!is_same<typename decay<_Fp>::type, __policy_func>::value>::type>"},
{"lineNum":"  762","line":"    _LIBCPP_INLINE_VISIBILITY explicit __policy_func(_Fp&& __f)"},
{"lineNum":"  763","line":"        : __policy_(__policy::__create_empty()) {"},
{"lineNum":"  764","line":"      typedef __default_alloc_func<_Fp, _Rp(_ArgTypes...)> _Fun;"},
{"lineNum":"  765","line":""},
{"lineNum":"  766","line":"      if (__function::__not_null(__f)) {"},
{"lineNum":"  767","line":"        __invoker_ = __invoker::template __create<_Fun>();"},
{"lineNum":"  768","line":"        __policy_ = __policy::__create<_Fun>();"},
{"lineNum":"  769","line":"        if (__use_small_storage<_Fun>()) {"},
{"lineNum":"  770","line":"          ::new ((void*)&__buf_.__small) _Fun(_VSTD::move(__f));"},
{"lineNum":"  771","line":"        } else {"},
{"lineNum":"  772","line":"          __builtin_new_allocator::__holder_t __hold ="},
{"lineNum":"  773","line":"              __builtin_new_allocator::__allocate_type<_Fun>(1);"},
{"lineNum":"  774","line":"          __buf_.__large = ::new ((void*)__hold.get()) _Fun(_VSTD::move(__f));"},
{"lineNum":"  775","line":"          (void)__hold.release();"},
{"lineNum":"  776","line":"        }"},
{"lineNum":"  777","line":"      }"},
{"lineNum":"  778","line":"    }"},
{"lineNum":"  779","line":""},
{"lineNum":"  780","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  781","line":"    __policy_func(const __policy_func& __f)"},
{"lineNum":"  782","line":"        : __buf_(__f.__buf_), __invoker_(__f.__invoker_),"},
{"lineNum":"  783","line":"          __policy_(__f.__policy_)"},
{"lineNum":"  784","line":"    {"},
{"lineNum":"  785","line":"        if (__policy_->__clone)"},
{"lineNum":"  786","line":"            __buf_.__large = __policy_->__clone(__f.__buf_.__large);"},
{"lineNum":"  787","line":"    }"},
{"lineNum":"  788","line":""},
{"lineNum":"  789","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  790","line":"    __policy_func(__policy_func&& __f)"},
{"lineNum":"  791","line":"        : __buf_(__f.__buf_), __invoker_(__f.__invoker_),"},
{"lineNum":"  792","line":"          __policy_(__f.__policy_)"},
{"lineNum":"  793","line":"    {"},
{"lineNum":"  794","line":"        if (__policy_->__destroy)"},
{"lineNum":"  795","line":"        {"},
{"lineNum":"  796","line":"            __f.__policy_ = __policy::__create_empty();"},
{"lineNum":"  797","line":"            __f.__invoker_ = __invoker();"},
{"lineNum":"  798","line":"        }"},
{"lineNum":"  799","line":"    }"},
{"lineNum":"  800","line":""},
{"lineNum":"  801","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  802","line":"    ~__policy_func()"},
{"lineNum":"  803","line":"    {"},
{"lineNum":"  804","line":"        if (__policy_->__destroy)"},
{"lineNum":"  805","line":"            __policy_->__destroy(__buf_.__large);"},
{"lineNum":"  806","line":"    }"},
{"lineNum":"  807","line":""},
{"lineNum":"  808","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  809","line":"    __policy_func& operator=(__policy_func&& __f)"},
{"lineNum":"  810","line":"    {"},
{"lineNum":"  811","line":"        *this = nullptr;"},
{"lineNum":"  812","line":"        __buf_ = __f.__buf_;"},
{"lineNum":"  813","line":"        __invoker_ = __f.__invoker_;"},
{"lineNum":"  814","line":"        __policy_ = __f.__policy_;"},
{"lineNum":"  815","line":"        __f.__policy_ = __policy::__create_empty();"},
{"lineNum":"  816","line":"        __f.__invoker_ = __invoker();"},
{"lineNum":"  817","line":"        return *this;"},
{"lineNum":"  818","line":"    }"},
{"lineNum":"  819","line":""},
{"lineNum":"  820","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  821","line":"    __policy_func& operator=(nullptr_t)"},
{"lineNum":"  822","line":"    {"},
{"lineNum":"  823","line":"        const __policy* __p = __policy_;"},
{"lineNum":"  824","line":"        __policy_ = __policy::__create_empty();"},
{"lineNum":"  825","line":"        __invoker_ = __invoker();"},
{"lineNum":"  826","line":"        if (__p->__destroy)"},
{"lineNum":"  827","line":"            __p->__destroy(__buf_.__large);"},
{"lineNum":"  828","line":"        return *this;"},
{"lineNum":"  829","line":"    }"},
{"lineNum":"  830","line":""},
{"lineNum":"  831","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  832","line":"    _Rp operator()(_ArgTypes&&... __args) const"},
{"lineNum":"  833","line":"    {"},
{"lineNum":"  834","line":"        return __invoker_.__call_(_VSTD::addressof(__buf_),"},
{"lineNum":"  835","line":"                                  _VSTD::forward<_ArgTypes>(__args)...);"},
{"lineNum":"  836","line":"    }"},
{"lineNum":"  837","line":""},
{"lineNum":"  838","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  839","line":"    void swap(__policy_func& __f)"},
{"lineNum":"  840","line":"    {"},
{"lineNum":"  841","line":"        _VSTD::swap(__invoker_, __f.__invoker_);"},
{"lineNum":"  842","line":"        _VSTD::swap(__policy_, __f.__policy_);"},
{"lineNum":"  843","line":"        _VSTD::swap(__buf_, __f.__buf_);"},
{"lineNum":"  844","line":"    }"},
{"lineNum":"  845","line":""},
{"lineNum":"  846","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  847","line":"    explicit operator bool() const _NOEXCEPT"},
{"lineNum":"  848","line":"    {"},
{"lineNum":"  849","line":"        return !__policy_->__is_null;"},
{"lineNum":"  850","line":"    }"},
{"lineNum":"  851","line":""},
{"lineNum":"  852","line":"#ifndef _LIBCPP_NO_RTTI"},
{"lineNum":"  853","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  854","line":"    const std::type_info& target_type() const _NOEXCEPT"},
{"lineNum":"  855","line":"    {"},
{"lineNum":"  856","line":"        return *__policy_->__type_info;"},
{"lineNum":"  857","line":"    }"},
{"lineNum":"  858","line":""},
{"lineNum":"  859","line":"    template <typename _Tp>"},
{"lineNum":"  860","line":"    _LIBCPP_INLINE_VISIBILITY const _Tp* target() const _NOEXCEPT"},
{"lineNum":"  861","line":"    {"},
{"lineNum":"  862","line":"        if (__policy_->__is_null || typeid(_Tp) != *__policy_->__type_info)"},
{"lineNum":"  863","line":"            return nullptr;"},
{"lineNum":"  864","line":"        if (__policy_->__clone) // Out of line storage."},
{"lineNum":"  865","line":"            return reinterpret_cast<const _Tp*>(__buf_.__large);"},
{"lineNum":"  866","line":"        else"},
{"lineNum":"  867","line":"            return reinterpret_cast<const _Tp*>(&__buf_.__small);"},
{"lineNum":"  868","line":"    }"},
{"lineNum":"  869","line":"#endif // _LIBCPP_NO_RTTI"},
{"lineNum":"  870","line":"};"},
{"lineNum":"  871","line":""},
{"lineNum":"  872","line":"#if defined(_LIBCPP_HAS_BLOCKS_RUNTIME) && !defined(_LIBCPP_HAS_OBJC_ARC)"},
{"lineNum":"  873","line":""},
{"lineNum":"  874","line":"extern \"C\" void *_Block_copy(const void *);"},
{"lineNum":"  875","line":"extern \"C\" void _Block_release(const void *);"},
{"lineNum":"  876","line":""},
{"lineNum":"  877","line":"template<class _Rp1, class ..._ArgTypes1, class _Alloc, class _Rp, class ..._ArgTypes>"},
{"lineNum":"  878","line":"class __func<_Rp1(^)(_ArgTypes1...), _Alloc, _Rp(_ArgTypes...)>"},
{"lineNum":"  879","line":"    : public  __base<_Rp(_ArgTypes...)>"},
{"lineNum":"  880","line":"{"},
{"lineNum":"  881","line":"    typedef _Rp1(^__block_type)(_ArgTypes1...);"},
{"lineNum":"  882","line":"    __block_type __f_;"},
{"lineNum":"  883","line":""},
{"lineNum":"  884","line":"public:"},
{"lineNum":"  885","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  886","line":"    explicit __func(__block_type const& __f)"},
{"lineNum":"  887","line":"        : __f_(reinterpret_cast<__block_type>(__f ? _Block_copy(__f) : nullptr))"},
{"lineNum":"  888","line":"    { }"},
{"lineNum":"  889","line":""},
{"lineNum":"  890","line":"    // [TODO] add && to save on a retain"},
{"lineNum":"  891","line":""},
{"lineNum":"  892","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  893","line":"    explicit __func(__block_type __f, const _Alloc& /* unused */)"},
{"lineNum":"  894","line":"        : __f_(reinterpret_cast<__block_type>(__f ? _Block_copy(__f) : nullptr))"},
{"lineNum":"  895","line":"    { }"},
{"lineNum":"  896","line":""},
{"lineNum":"  897","line":"    virtual __base<_Rp(_ArgTypes...)>* __clone() const {"},
{"lineNum":"  898","line":"        _LIBCPP_ASSERT(false,"},
{"lineNum":"  899","line":"            \"Block pointers are just pointers, so they should always fit into \""},
{"lineNum":"  900","line":"            \"std::function\'s small buffer optimization. This function should \""},
{"lineNum":"  901","line":"            \"never be invoked.\");"},
{"lineNum":"  902","line":"        return nullptr;"},
{"lineNum":"  903","line":"    }"},
{"lineNum":"  904","line":""},
{"lineNum":"  905","line":"    virtual void __clone(__base<_Rp(_ArgTypes...)>* __p) const {"},
{"lineNum":"  906","line":"        ::new ((void*)__p) __func(__f_);"},
{"lineNum":"  907","line":"    }"},
{"lineNum":"  908","line":""},
{"lineNum":"  909","line":"    virtual void destroy() _NOEXCEPT {"},
{"lineNum":"  910","line":"        if (__f_)"},
{"lineNum":"  911","line":"            _Block_release(__f_);"},
{"lineNum":"  912","line":"        __f_ = 0;"},
{"lineNum":"  913","line":"    }"},
{"lineNum":"  914","line":""},
{"lineNum":"  915","line":"    virtual void destroy_deallocate() _NOEXCEPT {"},
{"lineNum":"  916","line":"        _LIBCPP_ASSERT(false,"},
{"lineNum":"  917","line":"            \"Block pointers are just pointers, so they should always fit into \""},
{"lineNum":"  918","line":"            \"std::function\'s small buffer optimization. This function should \""},
{"lineNum":"  919","line":"            \"never be invoked.\");"},
{"lineNum":"  920","line":"    }"},
{"lineNum":"  921","line":""},
{"lineNum":"  922","line":"    virtual _Rp operator()(_ArgTypes&& ... __arg) {"},
{"lineNum":"  923","line":"        return _VSTD::__invoke(__f_, _VSTD::forward<_ArgTypes>(__arg)...);"},
{"lineNum":"  924","line":"    }"},
{"lineNum":"  925","line":""},
{"lineNum":"  926","line":"#ifndef _LIBCPP_NO_RTTI"},
{"lineNum":"  927","line":"    virtual const void* target(type_info const& __ti) const _NOEXCEPT {"},
{"lineNum":"  928","line":"        if (__ti == typeid(__func::__block_type))"},
{"lineNum":"  929","line":"            return &__f_;"},
{"lineNum":"  930","line":"        return (const void*)nullptr;"},
{"lineNum":"  931","line":"    }"},
{"lineNum":"  932","line":""},
{"lineNum":"  933","line":"    virtual const std::type_info& target_type() const _NOEXCEPT {"},
{"lineNum":"  934","line":"        return typeid(__func::__block_type);"},
{"lineNum":"  935","line":"    }"},
{"lineNum":"  936","line":"#endif // _LIBCPP_NO_RTTI"},
{"lineNum":"  937","line":"};"},
{"lineNum":"  938","line":""},
{"lineNum":"  939","line":"#endif // _LIBCPP_HAS_EXTENSION_BLOCKS && !_LIBCPP_HAS_OBJC_ARC"},
{"lineNum":"  940","line":""},
{"lineNum":"  941","line":"}  // __function"},
{"lineNum":"  942","line":""},
{"lineNum":"  943","line":"template<class _Rp, class ..._ArgTypes>"},
{"lineNum":"  944","line":"class _LIBCPP_TEMPLATE_VIS function<_Rp(_ArgTypes...)>"},
{"lineNum":"  945","line":"#if _LIBCPP_STD_VER <= 17 || !defined(_LIBCPP_ABI_NO_BINDER_BASES)"},
{"lineNum":"  946","line":"    : public __function::__maybe_derive_from_unary_function<_Rp(_ArgTypes...)>,"},
{"lineNum":"  947","line":"      public __function::__maybe_derive_from_binary_function<_Rp(_ArgTypes...)>"},
{"lineNum":"  948","line":"#endif"},
{"lineNum":"  949","line":"{"},
{"lineNum":"  950","line":"#ifndef _LIBCPP_ABI_OPTIMIZED_FUNCTION"},
{"lineNum":"  951","line":"    typedef __function::__value_func<_Rp(_ArgTypes...)> __func;"},
{"lineNum":"  952","line":"#else"},
{"lineNum":"  953","line":"    typedef __function::__policy_func<_Rp(_ArgTypes...)> __func;"},
{"lineNum":"  954","line":"#endif"},
{"lineNum":"  955","line":""},
{"lineNum":"  956","line":"    __func __f_;"},
{"lineNum":"  957","line":""},
{"lineNum":"  958","line":"    template <class _Fp, bool = _And<"},
{"lineNum":"  959","line":"        _IsNotSame<__uncvref_t<_Fp>, function>,"},
{"lineNum":"  960","line":"        __invokable<_Fp, _ArgTypes...>"},
{"lineNum":"  961","line":"    >::value>"},
{"lineNum":"  962","line":"    struct __callable;"},
{"lineNum":"  963","line":"    template <class _Fp>"},
{"lineNum":"  964","line":"        struct __callable<_Fp, true>"},
{"lineNum":"  965","line":"        {"},
{"lineNum":"  966","line":"            static const bool value = is_void<_Rp>::value ||"},
{"lineNum":"  967","line":"                __is_core_convertible<typename __invoke_of<_Fp, _ArgTypes...>::type,"},
{"lineNum":"  968","line":"                                      _Rp>::value;"},
{"lineNum":"  969","line":"        };"},
{"lineNum":"  970","line":"    template <class _Fp>"},
{"lineNum":"  971","line":"        struct __callable<_Fp, false>"},
{"lineNum":"  972","line":"        {"},
{"lineNum":"  973","line":"            static const bool value = false;"},
{"lineNum":"  974","line":"        };"},
{"lineNum":"  975","line":""},
{"lineNum":"  976","line":"  template <class _Fp>"},
{"lineNum":"  977","line":"  using _EnableIfLValueCallable = typename enable_if<__callable<_Fp&>::value>::type;"},
{"lineNum":"  978","line":"public:"},
{"lineNum":"  979","line":"    typedef _Rp result_type;"},
{"lineNum":"  980","line":""},
{"lineNum":"  981","line":"    // construct/copy/destroy:"},
{"lineNum":"  982","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  983","line":"    function() _NOEXCEPT { }"},
{"lineNum":"  984","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  985","line":"    function(nullptr_t) _NOEXCEPT {}"},
{"lineNum":"  986","line":"    function(const function&);"},
{"lineNum":"  987","line":"    function(function&&) _NOEXCEPT;"},
{"lineNum":"  988","line":"    template<class _Fp, class = _EnableIfLValueCallable<_Fp>>"},
{"lineNum":"  989","line":"    function(_Fp);"},
{"lineNum":"  990","line":""},
{"lineNum":"  991","line":"#if _LIBCPP_STD_VER <= 14"},
{"lineNum":"  992","line":"    template<class _Alloc>"},
{"lineNum":"  993","line":"      _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  994","line":"      function(allocator_arg_t, const _Alloc&) _NOEXCEPT {}"},
{"lineNum":"  995","line":"    template<class _Alloc>"},
{"lineNum":"  996","line":"      _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  997","line":"      function(allocator_arg_t, const _Alloc&, nullptr_t) _NOEXCEPT {}"},
{"lineNum":"  998","line":"    template<class _Alloc>"},
{"lineNum":"  999","line":"      function(allocator_arg_t, const _Alloc&, const function&);"},
{"lineNum":" 1000","line":"    template<class _Alloc>"},
{"lineNum":" 1001","line":"      function(allocator_arg_t, const _Alloc&, function&&);"},
{"lineNum":" 1002","line":"    template<class _Fp, class _Alloc, class = _EnableIfLValueCallable<_Fp>>"},
{"lineNum":" 1003","line":"      function(allocator_arg_t, const _Alloc& __a, _Fp __f);"},
{"lineNum":" 1004","line":"#endif"},
{"lineNum":" 1005","line":""},
{"lineNum":" 1006","line":"    function& operator=(const function&);"},
{"lineNum":" 1007","line":"    function& operator=(function&&) _NOEXCEPT;"},
{"lineNum":" 1008","line":"    function& operator=(nullptr_t) _NOEXCEPT;"},
{"lineNum":" 1009","line":"    template<class _Fp, class = _EnableIfLValueCallable<typename decay<_Fp>::type>>"},
{"lineNum":" 1010","line":"    function& operator=(_Fp&&);"},
{"lineNum":" 1011","line":""},
{"lineNum":" 1012","line":"    ~function();"},
{"lineNum":" 1013","line":""},
{"lineNum":" 1014","line":"    // function modifiers:"},
{"lineNum":" 1015","line":"    void swap(function&) _NOEXCEPT;"},
{"lineNum":" 1016","line":""},
{"lineNum":" 1017","line":"#if _LIBCPP_STD_VER <= 14"},
{"lineNum":" 1018","line":"    template<class _Fp, class _Alloc>"},
{"lineNum":" 1019","line":"      _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1020","line":"      void assign(_Fp&& __f, const _Alloc& __a)"},
{"lineNum":" 1021","line":"        {function(allocator_arg, __a, _VSTD::forward<_Fp>(__f)).swap(*this);}"},
{"lineNum":" 1022","line":"#endif"},
{"lineNum":" 1023","line":""},
{"lineNum":" 1024","line":"    // function capacity:"},
{"lineNum":" 1025","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1026","line":"    explicit operator bool() const _NOEXCEPT {"},
{"lineNum":" 1027","line":"      return static_cast<bool>(__f_);"},
{"lineNum":" 1028","line":"    }"},
{"lineNum":" 1029","line":""},
{"lineNum":" 1030","line":"    // deleted overloads close possible hole in the type system"},
{"lineNum":" 1031","line":"    template<class _R2, class... _ArgTypes2>"},
{"lineNum":" 1032","line":"      bool operator==(const function<_R2(_ArgTypes2...)>&) const = delete;"},
{"lineNum":" 1033","line":"    template<class _R2, class... _ArgTypes2>"},
{"lineNum":" 1034","line":"      bool operator!=(const function<_R2(_ArgTypes2...)>&) const = delete;"},
{"lineNum":" 1035","line":"public:"},
{"lineNum":" 1036","line":"    // function invocation:"},
{"lineNum":" 1037","line":"    _Rp operator()(_ArgTypes...) const;"},
{"lineNum":" 1038","line":""},
{"lineNum":" 1039","line":"#ifndef _LIBCPP_NO_RTTI"},
{"lineNum":" 1040","line":"    // function target access:"},
{"lineNum":" 1041","line":"    const std::type_info& target_type() const _NOEXCEPT;"},
{"lineNum":" 1042","line":"    template <typename _Tp> _Tp* target() _NOEXCEPT;"},
{"lineNum":" 1043","line":"    template <typename _Tp> const _Tp* target() const _NOEXCEPT;"},
{"lineNum":" 1044","line":"#endif // _LIBCPP_NO_RTTI"},
{"lineNum":" 1045","line":"};"},
{"lineNum":" 1046","line":""},
{"lineNum":" 1047","line":"#ifndef _LIBCPP_HAS_NO_DEDUCTION_GUIDES"},
{"lineNum":" 1048","line":"template<class _Rp, class ..._Ap>"},
{"lineNum":" 1049","line":"function(_Rp(*)(_Ap...)) -> function<_Rp(_Ap...)>;"},
{"lineNum":" 1050","line":""},
{"lineNum":" 1051","line":"template<class _Fp>"},
{"lineNum":" 1052","line":"struct __strip_signature;"},
{"lineNum":" 1053","line":""},
{"lineNum":" 1054","line":"template<class _Rp, class _Gp, class ..._Ap>"},
{"lineNum":" 1055","line":"struct __strip_signature<_Rp (_Gp::*) (_Ap...)> { using type = _Rp(_Ap...); };"},
{"lineNum":" 1056","line":"template<class _Rp, class _Gp, class ..._Ap>"},
{"lineNum":" 1057","line":"struct __strip_signature<_Rp (_Gp::*) (_Ap...) const> { using type = _Rp(_Ap...); };"},
{"lineNum":" 1058","line":"template<class _Rp, class _Gp, class ..._Ap>"},
{"lineNum":" 1059","line":"struct __strip_signature<_Rp (_Gp::*) (_Ap...) volatile> { using type = _Rp(_Ap...); };"},
{"lineNum":" 1060","line":"template<class _Rp, class _Gp, class ..._Ap>"},
{"lineNum":" 1061","line":"struct __strip_signature<_Rp (_Gp::*) (_Ap...) const volatile> { using type = _Rp(_Ap...); };"},
{"lineNum":" 1062","line":""},
{"lineNum":" 1063","line":"template<class _Rp, class _Gp, class ..._Ap>"},
{"lineNum":" 1064","line":"struct __strip_signature<_Rp (_Gp::*) (_Ap...) &> { using type = _Rp(_Ap...); };"},
{"lineNum":" 1065","line":"template<class _Rp, class _Gp, class ..._Ap>"},
{"lineNum":" 1066","line":"struct __strip_signature<_Rp (_Gp::*) (_Ap...) const &> { using type = _Rp(_Ap...); };"},
{"lineNum":" 1067","line":"template<class _Rp, class _Gp, class ..._Ap>"},
{"lineNum":" 1068","line":"struct __strip_signature<_Rp (_Gp::*) (_Ap...) volatile &> { using type = _Rp(_Ap...); };"},
{"lineNum":" 1069","line":"template<class _Rp, class _Gp, class ..._Ap>"},
{"lineNum":" 1070","line":"struct __strip_signature<_Rp (_Gp::*) (_Ap...) const volatile &> { using type = _Rp(_Ap...); };"},
{"lineNum":" 1071","line":""},
{"lineNum":" 1072","line":"template<class _Rp, class _Gp, class ..._Ap>"},
{"lineNum":" 1073","line":"struct __strip_signature<_Rp (_Gp::*) (_Ap...) noexcept> { using type = _Rp(_Ap...); };"},
{"lineNum":" 1074","line":"template<class _Rp, class _Gp, class ..._Ap>"},
{"lineNum":" 1075","line":"struct __strip_signature<_Rp (_Gp::*) (_Ap...) const noexcept> { using type = _Rp(_Ap...); };"},
{"lineNum":" 1076","line":"template<class _Rp, class _Gp, class ..._Ap>"},
{"lineNum":" 1077","line":"struct __strip_signature<_Rp (_Gp::*) (_Ap...) volatile noexcept> { using type = _Rp(_Ap...); };"},
{"lineNum":" 1078","line":"template<class _Rp, class _Gp, class ..._Ap>"},
{"lineNum":" 1079","line":"struct __strip_signature<_Rp (_Gp::*) (_Ap...) const volatile noexcept> { using type = _Rp(_Ap...); };"},
{"lineNum":" 1080","line":""},
{"lineNum":" 1081","line":"template<class _Rp, class _Gp, class ..._Ap>"},
{"lineNum":" 1082","line":"struct __strip_signature<_Rp (_Gp::*) (_Ap...) & noexcept> { using type = _Rp(_Ap...); };"},
{"lineNum":" 1083","line":"template<class _Rp, class _Gp, class ..._Ap>"},
{"lineNum":" 1084","line":"struct __strip_signature<_Rp (_Gp::*) (_Ap...) const & noexcept> { using type = _Rp(_Ap...); };"},
{"lineNum":" 1085","line":"template<class _Rp, class _Gp, class ..._Ap>"},
{"lineNum":" 1086","line":"struct __strip_signature<_Rp (_Gp::*) (_Ap...) volatile & noexcept> { using type = _Rp(_Ap...); };"},
{"lineNum":" 1087","line":"template<class _Rp, class _Gp, class ..._Ap>"},
{"lineNum":" 1088","line":"struct __strip_signature<_Rp (_Gp::*) (_Ap...) const volatile & noexcept> { using type = _Rp(_Ap...); };"},
{"lineNum":" 1089","line":""},
{"lineNum":" 1090","line":"template<class _Fp, class _Stripped = typename __strip_signature<decltype(&_Fp::operator())>::type>"},
{"lineNum":" 1091","line":"function(_Fp) -> function<_Stripped>;"},
{"lineNum":" 1092","line":"#endif // !_LIBCPP_HAS_NO_DEDUCTION_GUIDES"},
{"lineNum":" 1093","line":""},
{"lineNum":" 1094","line":"template<class _Rp, class ..._ArgTypes>"},
{"lineNum":" 1095","line":"function<_Rp(_ArgTypes...)>::function(const function& __f) : __f_(__f.__f_) {}"},
{"lineNum":" 1096","line":""},
{"lineNum":" 1097","line":"#if _LIBCPP_STD_VER <= 14"},
{"lineNum":" 1098","line":"template<class _Rp, class ..._ArgTypes>"},
{"lineNum":" 1099","line":"template <class _Alloc>"},
{"lineNum":" 1100","line":"function<_Rp(_ArgTypes...)>::function(allocator_arg_t, const _Alloc&,"},
{"lineNum":" 1101","line":"                                     const function& __f) : __f_(__f.__f_) {}"},
{"lineNum":" 1102","line":"#endif"},
{"lineNum":" 1103","line":""},
{"lineNum":" 1104","line":"template <class _Rp, class... _ArgTypes>"},
{"lineNum":" 1105","line":"function<_Rp(_ArgTypes...)>::function(function&& __f) _NOEXCEPT"},
{"lineNum":" 1106","line":"    : __f_(_VSTD::move(__f.__f_)) {}"},
{"lineNum":" 1107","line":""},
{"lineNum":" 1108","line":"#if _LIBCPP_STD_VER <= 14"},
{"lineNum":" 1109","line":"template<class _Rp, class ..._ArgTypes>"},
{"lineNum":" 1110","line":"template <class _Alloc>"},
{"lineNum":" 1111","line":"function<_Rp(_ArgTypes...)>::function(allocator_arg_t, const _Alloc&,"},
{"lineNum":" 1112","line":"                                      function&& __f)"},
{"lineNum":" 1113","line":"    : __f_(_VSTD::move(__f.__f_)) {}"},
{"lineNum":" 1114","line":"#endif"},
{"lineNum":" 1115","line":""},
{"lineNum":" 1116","line":"template <class _Rp, class... _ArgTypes>"},
{"lineNum":" 1117","line":"template <class _Fp, class>"},
{"lineNum":" 1118","line":"function<_Rp(_ArgTypes...)>::function(_Fp __f) : __f_(_VSTD::move(__f)) {}"},
{"lineNum":" 1119","line":""},
{"lineNum":" 1120","line":"#if _LIBCPP_STD_VER <= 14"},
{"lineNum":" 1121","line":"template <class _Rp, class... _ArgTypes>"},
{"lineNum":" 1122","line":"template <class _Fp, class _Alloc, class>"},
{"lineNum":" 1123","line":"function<_Rp(_ArgTypes...)>::function(allocator_arg_t, const _Alloc& __a,"},
{"lineNum":" 1124","line":"                                      _Fp __f)"},
{"lineNum":" 1125","line":"    : __f_(_VSTD::move(__f), __a) {}"},
{"lineNum":" 1126","line":"#endif"},
{"lineNum":" 1127","line":""},
{"lineNum":" 1128","line":"template<class _Rp, class ..._ArgTypes>"},
{"lineNum":" 1129","line":"function<_Rp(_ArgTypes...)>&"},
{"lineNum":" 1130","line":"function<_Rp(_ArgTypes...)>::operator=(const function& __f)"},
{"lineNum":" 1131","line":"{"},
{"lineNum":" 1132","line":"    function(__f).swap(*this);"},
{"lineNum":" 1133","line":"    return *this;"},
{"lineNum":" 1134","line":"}"},
{"lineNum":" 1135","line":""},
{"lineNum":" 1136","line":"template<class _Rp, class ..._ArgTypes>"},
{"lineNum":" 1137","line":"function<_Rp(_ArgTypes...)>&"},
{"lineNum":" 1138","line":"function<_Rp(_ArgTypes...)>::operator=(function&& __f) _NOEXCEPT"},
{"lineNum":" 1139","line":"{"},
{"lineNum":" 1140","line":"    __f_ = _VSTD::move(__f.__f_);"},
{"lineNum":" 1141","line":"    return *this;"},
{"lineNum":" 1142","line":"}"},
{"lineNum":" 1143","line":""},
{"lineNum":" 1144","line":"template<class _Rp, class ..._ArgTypes>"},
{"lineNum":" 1145","line":"function<_Rp(_ArgTypes...)>&"},
{"lineNum":" 1146","line":"function<_Rp(_ArgTypes...)>::operator=(nullptr_t) _NOEXCEPT"},
{"lineNum":" 1147","line":"{"},
{"lineNum":" 1148","line":"    __f_ = nullptr;"},
{"lineNum":" 1149","line":"    return *this;"},
{"lineNum":" 1150","line":"}"},
{"lineNum":" 1151","line":""},
{"lineNum":" 1152","line":"template<class _Rp, class ..._ArgTypes>"},
{"lineNum":" 1153","line":"template <class _Fp, class>"},
{"lineNum":" 1154","line":"function<_Rp(_ArgTypes...)>&"},
{"lineNum":" 1155","line":"function<_Rp(_ArgTypes...)>::operator=(_Fp&& __f)"},
{"lineNum":" 1156","line":"{","class":"linePartCov","hits":"108","order":"25","possible_hits":"114",},
{"lineNum":" 1157","line":"    function(_VSTD::forward<_Fp>(__f)).swap(*this);"},
{"lineNum":" 1158","line":"    return *this;","class":"linePartCov","hits":"108","order":"53","possible_hits":"228",},
{"lineNum":" 1159","line":"}"},
{"lineNum":" 1160","line":""},
{"lineNum":" 1161","line":"template<class _Rp, class ..._ArgTypes>"},
{"lineNum":" 1162","line":"function<_Rp(_ArgTypes...)>::~function() {}","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1163","line":""},
{"lineNum":" 1164","line":"template<class _Rp, class ..._ArgTypes>"},
{"lineNum":" 1165","line":"void"},
{"lineNum":" 1166","line":"function<_Rp(_ArgTypes...)>::swap(function& __f) _NOEXCEPT"},
{"lineNum":" 1167","line":"{"},
{"lineNum":" 1168","line":"    __f_.swap(__f.__f_);","class":"linePartCov","hits":"108","order":"34","possible_hits":"337",},
{"lineNum":" 1169","line":"}"},
{"lineNum":" 1170","line":""},
{"lineNum":" 1171","line":"template<class _Rp, class ..._ArgTypes>"},
{"lineNum":" 1172","line":"_Rp"},
{"lineNum":" 1173","line":"function<_Rp(_ArgTypes...)>::operator()(_ArgTypes... __arg) const"},
{"lineNum":" 1174","line":"{"},
{"lineNum":" 1175","line":"    return __f_(_VSTD::forward<_ArgTypes>(__arg)...);"},
{"lineNum":" 1176","line":"}"},
{"lineNum":" 1177","line":""},
{"lineNum":" 1178","line":"#ifndef _LIBCPP_NO_RTTI"},
{"lineNum":" 1179","line":""},
{"lineNum":" 1180","line":"template<class _Rp, class ..._ArgTypes>"},
{"lineNum":" 1181","line":"const std::type_info&"},
{"lineNum":" 1182","line":"function<_Rp(_ArgTypes...)>::target_type() const _NOEXCEPT"},
{"lineNum":" 1183","line":"{"},
{"lineNum":" 1184","line":"    return __f_.target_type();"},
{"lineNum":" 1185","line":"}"},
{"lineNum":" 1186","line":""},
{"lineNum":" 1187","line":"template<class _Rp, class ..._ArgTypes>"},
{"lineNum":" 1188","line":"template <typename _Tp>"},
{"lineNum":" 1189","line":"_Tp*"},
{"lineNum":" 1190","line":"function<_Rp(_ArgTypes...)>::target() _NOEXCEPT"},
{"lineNum":" 1191","line":"{"},
{"lineNum":" 1192","line":"    return (_Tp*)(__f_.template target<_Tp>());"},
{"lineNum":" 1193","line":"}"},
{"lineNum":" 1194","line":""},
{"lineNum":" 1195","line":"template<class _Rp, class ..._ArgTypes>"},
{"lineNum":" 1196","line":"template <typename _Tp>"},
{"lineNum":" 1197","line":"const _Tp*"},
{"lineNum":" 1198","line":"function<_Rp(_ArgTypes...)>::target() const _NOEXCEPT"},
{"lineNum":" 1199","line":"{"},
{"lineNum":" 1200","line":"    return __f_.template target<_Tp>();"},
{"lineNum":" 1201","line":"}"},
{"lineNum":" 1202","line":""},
{"lineNum":" 1203","line":"#endif // _LIBCPP_NO_RTTI"},
{"lineNum":" 1204","line":""},
{"lineNum":" 1205","line":"template <class _Rp, class... _ArgTypes>"},
{"lineNum":" 1206","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1207","line":"bool"},
{"lineNum":" 1208","line":"operator==(const function<_Rp(_ArgTypes...)>& __f, nullptr_t) _NOEXCEPT {return !__f;}"},
{"lineNum":" 1209","line":""},
{"lineNum":" 1210","line":"template <class _Rp, class... _ArgTypes>"},
{"lineNum":" 1211","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1212","line":"bool"},
{"lineNum":" 1213","line":"operator==(nullptr_t, const function<_Rp(_ArgTypes...)>& __f) _NOEXCEPT {return !__f;}"},
{"lineNum":" 1214","line":""},
{"lineNum":" 1215","line":"template <class _Rp, class... _ArgTypes>"},
{"lineNum":" 1216","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1217","line":"bool"},
{"lineNum":" 1218","line":"operator!=(const function<_Rp(_ArgTypes...)>& __f, nullptr_t) _NOEXCEPT {return (bool)__f;}"},
{"lineNum":" 1219","line":""},
{"lineNum":" 1220","line":"template <class _Rp, class... _ArgTypes>"},
{"lineNum":" 1221","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1222","line":"bool"},
{"lineNum":" 1223","line":"operator!=(nullptr_t, const function<_Rp(_ArgTypes...)>& __f) _NOEXCEPT {return (bool)__f;}"},
{"lineNum":" 1224","line":""},
{"lineNum":" 1225","line":"template <class _Rp, class... _ArgTypes>"},
{"lineNum":" 1226","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1227","line":"void"},
{"lineNum":" 1228","line":"swap(function<_Rp(_ArgTypes...)>& __x, function<_Rp(_ArgTypes...)>& __y) _NOEXCEPT"},
{"lineNum":" 1229","line":"{return __x.swap(__y);}"},
{"lineNum":" 1230","line":""},
{"lineNum":" 1231","line":"#else // _LIBCPP_CXX03_LANG"},
{"lineNum":" 1232","line":""},
{"lineNum":" 1233","line":"namespace __function {"},
{"lineNum":" 1234","line":""},
{"lineNum":" 1235","line":"template<class _Fp> class __base;"},
{"lineNum":" 1236","line":""},
{"lineNum":" 1237","line":"template<class _Rp>"},
{"lineNum":" 1238","line":"class __base<_Rp()>"},
{"lineNum":" 1239","line":"{"},
{"lineNum":" 1240","line":"    __base(const __base&);"},
{"lineNum":" 1241","line":"    __base& operator=(const __base&);"},
{"lineNum":" 1242","line":"public:"},
{"lineNum":" 1243","line":"    __base() {}"},
{"lineNum":" 1244","line":"    virtual ~__base() {}"},
{"lineNum":" 1245","line":"    virtual __base* __clone() const = 0;"},
{"lineNum":" 1246","line":"    virtual void __clone(__base*) const = 0;"},
{"lineNum":" 1247","line":"    virtual void destroy() = 0;"},
{"lineNum":" 1248","line":"    virtual void destroy_deallocate() = 0;"},
{"lineNum":" 1249","line":"    virtual _Rp operator()() = 0;"},
{"lineNum":" 1250","line":"#ifndef _LIBCPP_NO_RTTI"},
{"lineNum":" 1251","line":"    virtual const void* target(const type_info&) const = 0;"},
{"lineNum":" 1252","line":"    virtual const std::type_info& target_type() const = 0;"},
{"lineNum":" 1253","line":"#endif // _LIBCPP_NO_RTTI"},
{"lineNum":" 1254","line":"};"},
{"lineNum":" 1255","line":""},
{"lineNum":" 1256","line":"template<class _Rp, class _A0>"},
{"lineNum":" 1257","line":"class __base<_Rp(_A0)>"},
{"lineNum":" 1258","line":"{"},
{"lineNum":" 1259","line":"    __base(const __base&);"},
{"lineNum":" 1260","line":"    __base& operator=(const __base&);"},
{"lineNum":" 1261","line":"public:"},
{"lineNum":" 1262","line":"    __base() {}"},
{"lineNum":" 1263","line":"    virtual ~__base() {}"},
{"lineNum":" 1264","line":"    virtual __base* __clone() const = 0;"},
{"lineNum":" 1265","line":"    virtual void __clone(__base*) const = 0;"},
{"lineNum":" 1266","line":"    virtual void destroy() = 0;"},
{"lineNum":" 1267","line":"    virtual void destroy_deallocate() = 0;"},
{"lineNum":" 1268","line":"    virtual _Rp operator()(_A0) = 0;"},
{"lineNum":" 1269","line":"#ifndef _LIBCPP_NO_RTTI"},
{"lineNum":" 1270","line":"    virtual const void* target(const type_info&) const = 0;"},
{"lineNum":" 1271","line":"    virtual const std::type_info& target_type() const = 0;"},
{"lineNum":" 1272","line":"#endif // _LIBCPP_NO_RTTI"},
{"lineNum":" 1273","line":"};"},
{"lineNum":" 1274","line":""},
{"lineNum":" 1275","line":"template<class _Rp, class _A0, class _A1>"},
{"lineNum":" 1276","line":"class __base<_Rp(_A0, _A1)>"},
{"lineNum":" 1277","line":"{"},
{"lineNum":" 1278","line":"    __base(const __base&);"},
{"lineNum":" 1279","line":"    __base& operator=(const __base&);"},
{"lineNum":" 1280","line":"public:"},
{"lineNum":" 1281","line":"    __base() {}"},
{"lineNum":" 1282","line":"    virtual ~__base() {}"},
{"lineNum":" 1283","line":"    virtual __base* __clone() const = 0;"},
{"lineNum":" 1284","line":"    virtual void __clone(__base*) const = 0;"},
{"lineNum":" 1285","line":"    virtual void destroy() = 0;"},
{"lineNum":" 1286","line":"    virtual void destroy_deallocate() = 0;"},
{"lineNum":" 1287","line":"    virtual _Rp operator()(_A0, _A1) = 0;"},
{"lineNum":" 1288","line":"#ifndef _LIBCPP_NO_RTTI"},
{"lineNum":" 1289","line":"    virtual const void* target(const type_info&) const = 0;"},
{"lineNum":" 1290","line":"    virtual const std::type_info& target_type() const = 0;"},
{"lineNum":" 1291","line":"#endif // _LIBCPP_NO_RTTI"},
{"lineNum":" 1292","line":"};"},
{"lineNum":" 1293","line":""},
{"lineNum":" 1294","line":"template<class _Rp, class _A0, class _A1, class _A2>"},
{"lineNum":" 1295","line":"class __base<_Rp(_A0, _A1, _A2)>"},
{"lineNum":" 1296","line":"{"},
{"lineNum":" 1297","line":"    __base(const __base&);"},
{"lineNum":" 1298","line":"    __base& operator=(const __base&);"},
{"lineNum":" 1299","line":"public:"},
{"lineNum":" 1300","line":"    __base() {}"},
{"lineNum":" 1301","line":"    virtual ~__base() {}"},
{"lineNum":" 1302","line":"    virtual __base* __clone() const = 0;"},
{"lineNum":" 1303","line":"    virtual void __clone(__base*) const = 0;"},
{"lineNum":" 1304","line":"    virtual void destroy() = 0;"},
{"lineNum":" 1305","line":"    virtual void destroy_deallocate() = 0;"},
{"lineNum":" 1306","line":"    virtual _Rp operator()(_A0, _A1, _A2) = 0;"},
{"lineNum":" 1307","line":"#ifndef _LIBCPP_NO_RTTI"},
{"lineNum":" 1308","line":"    virtual const void* target(const type_info&) const = 0;"},
{"lineNum":" 1309","line":"    virtual const std::type_info& target_type() const = 0;"},
{"lineNum":" 1310","line":"#endif // _LIBCPP_NO_RTTI"},
{"lineNum":" 1311","line":"};"},
{"lineNum":" 1312","line":""},
{"lineNum":" 1313","line":"template<class _FD, class _Alloc, class _FB> class __func;"},
{"lineNum":" 1314","line":""},
{"lineNum":" 1315","line":"template<class _Fp, class _Alloc, class _Rp>"},
{"lineNum":" 1316","line":"class __func<_Fp, _Alloc, _Rp()>"},
{"lineNum":" 1317","line":"    : public  __base<_Rp()>"},
{"lineNum":" 1318","line":"{"},
{"lineNum":" 1319","line":"    __compressed_pair<_Fp, _Alloc> __f_;"},
{"lineNum":" 1320","line":"public:"},
{"lineNum":" 1321","line":"    explicit __func(_Fp __f) : __f_(_VSTD::move(__f), __default_init_tag()) {}"},
{"lineNum":" 1322","line":"    explicit __func(_Fp __f, _Alloc __a) : __f_(_VSTD::move(__f), _VSTD::move(__a)) {}"},
{"lineNum":" 1323","line":"    virtual __base<_Rp()>* __clone() const;"},
{"lineNum":" 1324","line":"    virtual void __clone(__base<_Rp()>*) const;"},
{"lineNum":" 1325","line":"    virtual void destroy();"},
{"lineNum":" 1326","line":"    virtual void destroy_deallocate();"},
{"lineNum":" 1327","line":"    virtual _Rp operator()();"},
{"lineNum":" 1328","line":"#ifndef _LIBCPP_NO_RTTI"},
{"lineNum":" 1329","line":"    virtual const void* target(const type_info&) const;"},
{"lineNum":" 1330","line":"    virtual const std::type_info& target_type() const;"},
{"lineNum":" 1331","line":"#endif // _LIBCPP_NO_RTTI"},
{"lineNum":" 1332","line":"};"},
{"lineNum":" 1333","line":""},
{"lineNum":" 1334","line":"template<class _Fp, class _Alloc, class _Rp>"},
{"lineNum":" 1335","line":"__base<_Rp()>*"},
{"lineNum":" 1336","line":"__func<_Fp, _Alloc, _Rp()>::__clone() const"},
{"lineNum":" 1337","line":"{"},
{"lineNum":" 1338","line":"    typedef allocator_traits<_Alloc> __alloc_traits;"},
{"lineNum":" 1339","line":"    typedef typename __rebind_alloc_helper<__alloc_traits, __func>::type _Ap;"},
{"lineNum":" 1340","line":"    _Ap __a(__f_.second());"},
{"lineNum":" 1341","line":"    typedef __allocator_destructor<_Ap> _Dp;"},
{"lineNum":" 1342","line":"    unique_ptr<__func, _Dp> __hold(__a.allocate(1), _Dp(__a, 1));"},
{"lineNum":" 1343","line":"    ::new ((void*)__hold.get()) __func(__f_.first(), _Alloc(__a));"},
{"lineNum":" 1344","line":"    return __hold.release();"},
{"lineNum":" 1345","line":"}"},
{"lineNum":" 1346","line":""},
{"lineNum":" 1347","line":"template<class _Fp, class _Alloc, class _Rp>"},
{"lineNum":" 1348","line":"void"},
{"lineNum":" 1349","line":"__func<_Fp, _Alloc, _Rp()>::__clone(__base<_Rp()>* __p) const"},
{"lineNum":" 1350","line":"{"},
{"lineNum":" 1351","line":"    ::new ((void*)__p) __func(__f_.first(), __f_.second());"},
{"lineNum":" 1352","line":"}"},
{"lineNum":" 1353","line":""},
{"lineNum":" 1354","line":"template<class _Fp, class _Alloc, class _Rp>"},
{"lineNum":" 1355","line":"void"},
{"lineNum":" 1356","line":"__func<_Fp, _Alloc, _Rp()>::destroy()"},
{"lineNum":" 1357","line":"{"},
{"lineNum":" 1358","line":"    __f_.~__compressed_pair<_Fp, _Alloc>();"},
{"lineNum":" 1359","line":"}"},
{"lineNum":" 1360","line":""},
{"lineNum":" 1361","line":"template<class _Fp, class _Alloc, class _Rp>"},
{"lineNum":" 1362","line":"void"},
{"lineNum":" 1363","line":"__func<_Fp, _Alloc, _Rp()>::destroy_deallocate()"},
{"lineNum":" 1364","line":"{"},
{"lineNum":" 1365","line":"    typedef allocator_traits<_Alloc> __alloc_traits;"},
{"lineNum":" 1366","line":"    typedef typename __rebind_alloc_helper<__alloc_traits, __func>::type _Ap;"},
{"lineNum":" 1367","line":"    _Ap __a(__f_.second());"},
{"lineNum":" 1368","line":"    __f_.~__compressed_pair<_Fp, _Alloc>();"},
{"lineNum":" 1369","line":"    __a.deallocate(this, 1);"},
{"lineNum":" 1370","line":"}"},
{"lineNum":" 1371","line":""},
{"lineNum":" 1372","line":"template<class _Fp, class _Alloc, class _Rp>"},
{"lineNum":" 1373","line":"_Rp"},
{"lineNum":" 1374","line":"__func<_Fp, _Alloc, _Rp()>::operator()()"},
{"lineNum":" 1375","line":"{"},
{"lineNum":" 1376","line":"    typedef __invoke_void_return_wrapper<_Rp> _Invoker;"},
{"lineNum":" 1377","line":"    return _Invoker::__call(__f_.first());"},
{"lineNum":" 1378","line":"}"},
{"lineNum":" 1379","line":""},
{"lineNum":" 1380","line":"#ifndef _LIBCPP_NO_RTTI"},
{"lineNum":" 1381","line":""},
{"lineNum":" 1382","line":"template<class _Fp, class _Alloc, class _Rp>"},
{"lineNum":" 1383","line":"const void*"},
{"lineNum":" 1384","line":"__func<_Fp, _Alloc, _Rp()>::target(const type_info& __ti) const"},
{"lineNum":" 1385","line":"{"},
{"lineNum":" 1386","line":"    if (__ti == typeid(_Fp))"},
{"lineNum":" 1387","line":"        return &__f_.first();"},
{"lineNum":" 1388","line":"    return (const void*)0;"},
{"lineNum":" 1389","line":"}"},
{"lineNum":" 1390","line":""},
{"lineNum":" 1391","line":"template<class _Fp, class _Alloc, class _Rp>"},
{"lineNum":" 1392","line":"const std::type_info&"},
{"lineNum":" 1393","line":"__func<_Fp, _Alloc, _Rp()>::target_type() const"},
{"lineNum":" 1394","line":"{"},
{"lineNum":" 1395","line":"    return typeid(_Fp);"},
{"lineNum":" 1396","line":"}"},
{"lineNum":" 1397","line":""},
{"lineNum":" 1398","line":"#endif // _LIBCPP_NO_RTTI"},
{"lineNum":" 1399","line":""},
{"lineNum":" 1400","line":"template<class _Fp, class _Alloc, class _Rp, class _A0>"},
{"lineNum":" 1401","line":"class __func<_Fp, _Alloc, _Rp(_A0)>"},
{"lineNum":" 1402","line":"    : public  __base<_Rp(_A0)>"},
{"lineNum":" 1403","line":"{"},
{"lineNum":" 1404","line":"    __compressed_pair<_Fp, _Alloc> __f_;"},
{"lineNum":" 1405","line":"public:"},
{"lineNum":" 1406","line":"    _LIBCPP_INLINE_VISIBILITY explicit __func(_Fp __f) : __f_(_VSTD::move(__f), __default_init_tag()) {}"},
{"lineNum":" 1407","line":"    _LIBCPP_INLINE_VISIBILITY explicit __func(_Fp __f, _Alloc __a)"},
{"lineNum":" 1408","line":"        : __f_(_VSTD::move(__f), _VSTD::move(__a)) {}"},
{"lineNum":" 1409","line":"    virtual __base<_Rp(_A0)>* __clone() const;"},
{"lineNum":" 1410","line":"    virtual void __clone(__base<_Rp(_A0)>*) const;"},
{"lineNum":" 1411","line":"    virtual void destroy();"},
{"lineNum":" 1412","line":"    virtual void destroy_deallocate();"},
{"lineNum":" 1413","line":"    virtual _Rp operator()(_A0);"},
{"lineNum":" 1414","line":"#ifndef _LIBCPP_NO_RTTI"},
{"lineNum":" 1415","line":"    virtual const void* target(const type_info&) const;"},
{"lineNum":" 1416","line":"    virtual const std::type_info& target_type() const;"},
{"lineNum":" 1417","line":"#endif // _LIBCPP_NO_RTTI"},
{"lineNum":" 1418","line":"};"},
{"lineNum":" 1419","line":""},
{"lineNum":" 1420","line":"template<class _Fp, class _Alloc, class _Rp, class _A0>"},
{"lineNum":" 1421","line":"__base<_Rp(_A0)>*"},
{"lineNum":" 1422","line":"__func<_Fp, _Alloc, _Rp(_A0)>::__clone() const"},
{"lineNum":" 1423","line":"{"},
{"lineNum":" 1424","line":"    typedef allocator_traits<_Alloc> __alloc_traits;"},
{"lineNum":" 1425","line":"    typedef typename __rebind_alloc_helper<__alloc_traits, __func>::type _Ap;"},
{"lineNum":" 1426","line":"    _Ap __a(__f_.second());"},
{"lineNum":" 1427","line":"    typedef __allocator_destructor<_Ap> _Dp;"},
{"lineNum":" 1428","line":"    unique_ptr<__func, _Dp> __hold(__a.allocate(1), _Dp(__a, 1));"},
{"lineNum":" 1429","line":"    ::new ((void*)__hold.get()) __func(__f_.first(), _Alloc(__a));"},
{"lineNum":" 1430","line":"    return __hold.release();"},
{"lineNum":" 1431","line":"}"},
{"lineNum":" 1432","line":""},
{"lineNum":" 1433","line":"template<class _Fp, class _Alloc, class _Rp, class _A0>"},
{"lineNum":" 1434","line":"void"},
{"lineNum":" 1435","line":"__func<_Fp, _Alloc, _Rp(_A0)>::__clone(__base<_Rp(_A0)>* __p) const"},
{"lineNum":" 1436","line":"{"},
{"lineNum":" 1437","line":"    ::new ((void*)__p) __func(__f_.first(), __f_.second());"},
{"lineNum":" 1438","line":"}"},
{"lineNum":" 1439","line":""},
{"lineNum":" 1440","line":"template<class _Fp, class _Alloc, class _Rp, class _A0>"},
{"lineNum":" 1441","line":"void"},
{"lineNum":" 1442","line":"__func<_Fp, _Alloc, _Rp(_A0)>::destroy()"},
{"lineNum":" 1443","line":"{"},
{"lineNum":" 1444","line":"    __f_.~__compressed_pair<_Fp, _Alloc>();"},
{"lineNum":" 1445","line":"}"},
{"lineNum":" 1446","line":""},
{"lineNum":" 1447","line":"template<class _Fp, class _Alloc, class _Rp, class _A0>"},
{"lineNum":" 1448","line":"void"},
{"lineNum":" 1449","line":"__func<_Fp, _Alloc, _Rp(_A0)>::destroy_deallocate()"},
{"lineNum":" 1450","line":"{"},
{"lineNum":" 1451","line":"    typedef allocator_traits<_Alloc> __alloc_traits;"},
{"lineNum":" 1452","line":"    typedef typename __rebind_alloc_helper<__alloc_traits, __func>::type _Ap;"},
{"lineNum":" 1453","line":"    _Ap __a(__f_.second());"},
{"lineNum":" 1454","line":"    __f_.~__compressed_pair<_Fp, _Alloc>();"},
{"lineNum":" 1455","line":"    __a.deallocate(this, 1);"},
{"lineNum":" 1456","line":"}"},
{"lineNum":" 1457","line":""},
{"lineNum":" 1458","line":"template<class _Fp, class _Alloc, class _Rp, class _A0>"},
{"lineNum":" 1459","line":"_Rp"},
{"lineNum":" 1460","line":"__func<_Fp, _Alloc, _Rp(_A0)>::operator()(_A0 __a0)"},
{"lineNum":" 1461","line":"{"},
{"lineNum":" 1462","line":"    typedef __invoke_void_return_wrapper<_Rp> _Invoker;"},
{"lineNum":" 1463","line":"    return _Invoker::__call(__f_.first(), __a0);"},
{"lineNum":" 1464","line":"}"},
{"lineNum":" 1465","line":""},
{"lineNum":" 1466","line":"#ifndef _LIBCPP_NO_RTTI"},
{"lineNum":" 1467","line":""},
{"lineNum":" 1468","line":"template<class _Fp, class _Alloc, class _Rp, class _A0>"},
{"lineNum":" 1469","line":"const void*"},
{"lineNum":" 1470","line":"__func<_Fp, _Alloc, _Rp(_A0)>::target(const type_info& __ti) const"},
{"lineNum":" 1471","line":"{"},
{"lineNum":" 1472","line":"    if (__ti == typeid(_Fp))"},
{"lineNum":" 1473","line":"        return &__f_.first();"},
{"lineNum":" 1474","line":"    return (const void*)0;"},
{"lineNum":" 1475","line":"}"},
{"lineNum":" 1476","line":""},
{"lineNum":" 1477","line":"template<class _Fp, class _Alloc, class _Rp, class _A0>"},
{"lineNum":" 1478","line":"const std::type_info&"},
{"lineNum":" 1479","line":"__func<_Fp, _Alloc, _Rp(_A0)>::target_type() const"},
{"lineNum":" 1480","line":"{"},
{"lineNum":" 1481","line":"    return typeid(_Fp);"},
{"lineNum":" 1482","line":"}"},
{"lineNum":" 1483","line":""},
{"lineNum":" 1484","line":"#endif // _LIBCPP_NO_RTTI"},
{"lineNum":" 1485","line":""},
{"lineNum":" 1486","line":"template<class _Fp, class _Alloc, class _Rp, class _A0, class _A1>"},
{"lineNum":" 1487","line":"class __func<_Fp, _Alloc, _Rp(_A0, _A1)>"},
{"lineNum":" 1488","line":"    : public  __base<_Rp(_A0, _A1)>"},
{"lineNum":" 1489","line":"{"},
{"lineNum":" 1490","line":"    __compressed_pair<_Fp, _Alloc> __f_;"},
{"lineNum":" 1491","line":"public:"},
{"lineNum":" 1492","line":"    _LIBCPP_INLINE_VISIBILITY explicit __func(_Fp __f) : __f_(_VSTD::move(__f), __default_init_tag()) {}"},
{"lineNum":" 1493","line":"    _LIBCPP_INLINE_VISIBILITY explicit __func(_Fp __f, _Alloc __a)"},
{"lineNum":" 1494","line":"        : __f_(_VSTD::move(__f), _VSTD::move(__a)) {}"},
{"lineNum":" 1495","line":"    virtual __base<_Rp(_A0, _A1)>* __clone() const;"},
{"lineNum":" 1496","line":"    virtual void __clone(__base<_Rp(_A0, _A1)>*) const;"},
{"lineNum":" 1497","line":"    virtual void destroy();"},
{"lineNum":" 1498","line":"    virtual void destroy_deallocate();"},
{"lineNum":" 1499","line":"    virtual _Rp operator()(_A0, _A1);"},
{"lineNum":" 1500","line":"#ifndef _LIBCPP_NO_RTTI"},
{"lineNum":" 1501","line":"    virtual const void* target(const type_info&) const;"},
{"lineNum":" 1502","line":"    virtual const std::type_info& target_type() const;"},
{"lineNum":" 1503","line":"#endif // _LIBCPP_NO_RTTI"},
{"lineNum":" 1504","line":"};"},
{"lineNum":" 1505","line":""},
{"lineNum":" 1506","line":"template<class _Fp, class _Alloc, class _Rp, class _A0, class _A1>"},
{"lineNum":" 1507","line":"__base<_Rp(_A0, _A1)>*"},
{"lineNum":" 1508","line":"__func<_Fp, _Alloc, _Rp(_A0, _A1)>::__clone() const"},
{"lineNum":" 1509","line":"{"},
{"lineNum":" 1510","line":"    typedef allocator_traits<_Alloc> __alloc_traits;"},
{"lineNum":" 1511","line":"    typedef typename __rebind_alloc_helper<__alloc_traits, __func>::type _Ap;"},
{"lineNum":" 1512","line":"    _Ap __a(__f_.second());"},
{"lineNum":" 1513","line":"    typedef __allocator_destructor<_Ap> _Dp;"},
{"lineNum":" 1514","line":"    unique_ptr<__func, _Dp> __hold(__a.allocate(1), _Dp(__a, 1));"},
{"lineNum":" 1515","line":"    ::new ((void*)__hold.get()) __func(__f_.first(), _Alloc(__a));"},
{"lineNum":" 1516","line":"    return __hold.release();"},
{"lineNum":" 1517","line":"}"},
{"lineNum":" 1518","line":""},
{"lineNum":" 1519","line":"template<class _Fp, class _Alloc, class _Rp, class _A0, class _A1>"},
{"lineNum":" 1520","line":"void"},
{"lineNum":" 1521","line":"__func<_Fp, _Alloc, _Rp(_A0, _A1)>::__clone(__base<_Rp(_A0, _A1)>* __p) const"},
{"lineNum":" 1522","line":"{"},
{"lineNum":" 1523","line":"    ::new ((void*)__p) __func(__f_.first(), __f_.second());"},
{"lineNum":" 1524","line":"}"},
{"lineNum":" 1525","line":""},
{"lineNum":" 1526","line":"template<class _Fp, class _Alloc, class _Rp, class _A0, class _A1>"},
{"lineNum":" 1527","line":"void"},
{"lineNum":" 1528","line":"__func<_Fp, _Alloc, _Rp(_A0, _A1)>::destroy()"},
{"lineNum":" 1529","line":"{"},
{"lineNum":" 1530","line":"    __f_.~__compressed_pair<_Fp, _Alloc>();"},
{"lineNum":" 1531","line":"}"},
{"lineNum":" 1532","line":""},
{"lineNum":" 1533","line":"template<class _Fp, class _Alloc, class _Rp, class _A0, class _A1>"},
{"lineNum":" 1534","line":"void"},
{"lineNum":" 1535","line":"__func<_Fp, _Alloc, _Rp(_A0, _A1)>::destroy_deallocate()"},
{"lineNum":" 1536","line":"{"},
{"lineNum":" 1537","line":"    typedef allocator_traits<_Alloc> __alloc_traits;"},
{"lineNum":" 1538","line":"    typedef typename __rebind_alloc_helper<__alloc_traits, __func>::type _Ap;"},
{"lineNum":" 1539","line":"    _Ap __a(__f_.second());"},
{"lineNum":" 1540","line":"    __f_.~__compressed_pair<_Fp, _Alloc>();"},
{"lineNum":" 1541","line":"    __a.deallocate(this, 1);"},
{"lineNum":" 1542","line":"}"},
{"lineNum":" 1543","line":""},
{"lineNum":" 1544","line":"template<class _Fp, class _Alloc, class _Rp, class _A0, class _A1>"},
{"lineNum":" 1545","line":"_Rp"},
{"lineNum":" 1546","line":"__func<_Fp, _Alloc, _Rp(_A0, _A1)>::operator()(_A0 __a0, _A1 __a1)"},
{"lineNum":" 1547","line":"{"},
{"lineNum":" 1548","line":"    typedef __invoke_void_return_wrapper<_Rp> _Invoker;"},
{"lineNum":" 1549","line":"    return _Invoker::__call(__f_.first(), __a0, __a1);"},
{"lineNum":" 1550","line":"}"},
{"lineNum":" 1551","line":""},
{"lineNum":" 1552","line":"#ifndef _LIBCPP_NO_RTTI"},
{"lineNum":" 1553","line":""},
{"lineNum":" 1554","line":"template<class _Fp, class _Alloc, class _Rp, class _A0, class _A1>"},
{"lineNum":" 1555","line":"const void*"},
{"lineNum":" 1556","line":"__func<_Fp, _Alloc, _Rp(_A0, _A1)>::target(const type_info& __ti) const"},
{"lineNum":" 1557","line":"{"},
{"lineNum":" 1558","line":"    if (__ti == typeid(_Fp))"},
{"lineNum":" 1559","line":"        return &__f_.first();"},
{"lineNum":" 1560","line":"    return (const void*)0;"},
{"lineNum":" 1561","line":"}"},
{"lineNum":" 1562","line":""},
{"lineNum":" 1563","line":"template<class _Fp, class _Alloc, class _Rp, class _A0, class _A1>"},
{"lineNum":" 1564","line":"const std::type_info&"},
{"lineNum":" 1565","line":"__func<_Fp, _Alloc, _Rp(_A0, _A1)>::target_type() const"},
{"lineNum":" 1566","line":"{"},
{"lineNum":" 1567","line":"    return typeid(_Fp);"},
{"lineNum":" 1568","line":"}"},
{"lineNum":" 1569","line":""},
{"lineNum":" 1570","line":"#endif // _LIBCPP_NO_RTTI"},
{"lineNum":" 1571","line":""},
{"lineNum":" 1572","line":"template<class _Fp, class _Alloc, class _Rp, class _A0, class _A1, class _A2>"},
{"lineNum":" 1573","line":"class __func<_Fp, _Alloc, _Rp(_A0, _A1, _A2)>"},
{"lineNum":" 1574","line":"    : public  __base<_Rp(_A0, _A1, _A2)>"},
{"lineNum":" 1575","line":"{"},
{"lineNum":" 1576","line":"    __compressed_pair<_Fp, _Alloc> __f_;"},
{"lineNum":" 1577","line":"public:"},
{"lineNum":" 1578","line":"    _LIBCPP_INLINE_VISIBILITY explicit __func(_Fp __f) : __f_(_VSTD::move(__f), __default_init_tag()) {}"},
{"lineNum":" 1579","line":"    _LIBCPP_INLINE_VISIBILITY explicit __func(_Fp __f, _Alloc __a)"},
{"lineNum":" 1580","line":"        : __f_(_VSTD::move(__f), _VSTD::move(__a)) {}"},
{"lineNum":" 1581","line":"    virtual __base<_Rp(_A0, _A1, _A2)>* __clone() const;"},
{"lineNum":" 1582","line":"    virtual void __clone(__base<_Rp(_A0, _A1, _A2)>*) const;"},
{"lineNum":" 1583","line":"    virtual void destroy();"},
{"lineNum":" 1584","line":"    virtual void destroy_deallocate();"},
{"lineNum":" 1585","line":"    virtual _Rp operator()(_A0, _A1, _A2);"},
{"lineNum":" 1586","line":"#ifndef _LIBCPP_NO_RTTI"},
{"lineNum":" 1587","line":"    virtual const void* target(const type_info&) const;"},
{"lineNum":" 1588","line":"    virtual const std::type_info& target_type() const;"},
{"lineNum":" 1589","line":"#endif // _LIBCPP_NO_RTTI"},
{"lineNum":" 1590","line":"};"},
{"lineNum":" 1591","line":""},
{"lineNum":" 1592","line":"template<class _Fp, class _Alloc, class _Rp, class _A0, class _A1, class _A2>"},
{"lineNum":" 1593","line":"__base<_Rp(_A0, _A1, _A2)>*"},
{"lineNum":" 1594","line":"__func<_Fp, _Alloc, _Rp(_A0, _A1, _A2)>::__clone() const"},
{"lineNum":" 1595","line":"{"},
{"lineNum":" 1596","line":"    typedef allocator_traits<_Alloc> __alloc_traits;"},
{"lineNum":" 1597","line":"    typedef typename __rebind_alloc_helper<__alloc_traits, __func>::type _Ap;"},
{"lineNum":" 1598","line":"    _Ap __a(__f_.second());"},
{"lineNum":" 1599","line":"    typedef __allocator_destructor<_Ap> _Dp;"},
{"lineNum":" 1600","line":"    unique_ptr<__func, _Dp> __hold(__a.allocate(1), _Dp(__a, 1));"},
{"lineNum":" 1601","line":"    ::new ((void*)__hold.get()) __func(__f_.first(), _Alloc(__a));"},
{"lineNum":" 1602","line":"    return __hold.release();"},
{"lineNum":" 1603","line":"}"},
{"lineNum":" 1604","line":""},
{"lineNum":" 1605","line":"template<class _Fp, class _Alloc, class _Rp, class _A0, class _A1, class _A2>"},
{"lineNum":" 1606","line":"void"},
{"lineNum":" 1607","line":"__func<_Fp, _Alloc, _Rp(_A0, _A1, _A2)>::__clone(__base<_Rp(_A0, _A1, _A2)>* __p) const"},
{"lineNum":" 1608","line":"{"},
{"lineNum":" 1609","line":"    ::new ((void*)__p) __func(__f_.first(), __f_.second());"},
{"lineNum":" 1610","line":"}"},
{"lineNum":" 1611","line":""},
{"lineNum":" 1612","line":"template<class _Fp, class _Alloc, class _Rp, class _A0, class _A1, class _A2>"},
{"lineNum":" 1613","line":"void"},
{"lineNum":" 1614","line":"__func<_Fp, _Alloc, _Rp(_A0, _A1, _A2)>::destroy()"},
{"lineNum":" 1615","line":"{"},
{"lineNum":" 1616","line":"    __f_.~__compressed_pair<_Fp, _Alloc>();"},
{"lineNum":" 1617","line":"}"},
{"lineNum":" 1618","line":""},
{"lineNum":" 1619","line":"template<class _Fp, class _Alloc, class _Rp, class _A0, class _A1, class _A2>"},
{"lineNum":" 1620","line":"void"},
{"lineNum":" 1621","line":"__func<_Fp, _Alloc, _Rp(_A0, _A1, _A2)>::destroy_deallocate()"},
{"lineNum":" 1622","line":"{"},
{"lineNum":" 1623","line":"    typedef allocator_traits<_Alloc> __alloc_traits;"},
{"lineNum":" 1624","line":"    typedef typename __rebind_alloc_helper<__alloc_traits, __func>::type _Ap;"},
{"lineNum":" 1625","line":"    _Ap __a(__f_.second());"},
{"lineNum":" 1626","line":"    __f_.~__compressed_pair<_Fp, _Alloc>();"},
{"lineNum":" 1627","line":"    __a.deallocate(this, 1);"},
{"lineNum":" 1628","line":"}"},
{"lineNum":" 1629","line":""},
{"lineNum":" 1630","line":"template<class _Fp, class _Alloc, class _Rp, class _A0, class _A1, class _A2>"},
{"lineNum":" 1631","line":"_Rp"},
{"lineNum":" 1632","line":"__func<_Fp, _Alloc, _Rp(_A0, _A1, _A2)>::operator()(_A0 __a0, _A1 __a1, _A2 __a2)"},
{"lineNum":" 1633","line":"{"},
{"lineNum":" 1634","line":"    typedef __invoke_void_return_wrapper<_Rp> _Invoker;"},
{"lineNum":" 1635","line":"    return _Invoker::__call(__f_.first(), __a0, __a1, __a2);"},
{"lineNum":" 1636","line":"}"},
{"lineNum":" 1637","line":""},
{"lineNum":" 1638","line":"#ifndef _LIBCPP_NO_RTTI"},
{"lineNum":" 1639","line":""},
{"lineNum":" 1640","line":"template<class _Fp, class _Alloc, class _Rp, class _A0, class _A1, class _A2>"},
{"lineNum":" 1641","line":"const void*"},
{"lineNum":" 1642","line":"__func<_Fp, _Alloc, _Rp(_A0, _A1, _A2)>::target(const type_info& __ti) const"},
{"lineNum":" 1643","line":"{"},
{"lineNum":" 1644","line":"    if (__ti == typeid(_Fp))"},
{"lineNum":" 1645","line":"        return &__f_.first();"},
{"lineNum":" 1646","line":"    return (const void*)0;"},
{"lineNum":" 1647","line":"}"},
{"lineNum":" 1648","line":""},
{"lineNum":" 1649","line":"template<class _Fp, class _Alloc, class _Rp, class _A0, class _A1, class _A2>"},
{"lineNum":" 1650","line":"const std::type_info&"},
{"lineNum":" 1651","line":"__func<_Fp, _Alloc, _Rp(_A0, _A1, _A2)>::target_type() const"},
{"lineNum":" 1652","line":"{"},
{"lineNum":" 1653","line":"    return typeid(_Fp);"},
{"lineNum":" 1654","line":"}"},
{"lineNum":" 1655","line":""},
{"lineNum":" 1656","line":"#endif // _LIBCPP_NO_RTTI"},
{"lineNum":" 1657","line":""},
{"lineNum":" 1658","line":"}  // __function"},
{"lineNum":" 1659","line":""},
{"lineNum":" 1660","line":"template<class _Rp>"},
{"lineNum":" 1661","line":"class _LIBCPP_TEMPLATE_VIS function<_Rp()>"},
{"lineNum":" 1662","line":"{"},
{"lineNum":" 1663","line":"    typedef __function::__base<_Rp()> __base;"},
{"lineNum":" 1664","line":"    aligned_storage<3*sizeof(void*)>::type __buf_;"},
{"lineNum":" 1665","line":"    __base* __f_;"},
{"lineNum":" 1666","line":""},
{"lineNum":" 1667","line":"public:"},
{"lineNum":" 1668","line":"    typedef _Rp result_type;"},
{"lineNum":" 1669","line":""},
{"lineNum":" 1670","line":"    // 20.7.16.2.1, construct/copy/destroy:"},
{"lineNum":" 1671","line":"    _LIBCPP_INLINE_VISIBILITY explicit function() : __f_(0) {}"},
{"lineNum":" 1672","line":"    _LIBCPP_INLINE_VISIBILITY function(nullptr_t) : __f_(0) {}"},
{"lineNum":" 1673","line":"    function(const function&);"},
{"lineNum":" 1674","line":"    template<class _Fp>"},
{"lineNum":" 1675","line":"      function(_Fp,"},
{"lineNum":" 1676","line":"               typename enable_if<!is_integral<_Fp>::value>::type* = 0);"},
{"lineNum":" 1677","line":""},
{"lineNum":" 1678","line":"    template<class _Alloc>"},
{"lineNum":" 1679","line":"      _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1680","line":"      function(allocator_arg_t, const _Alloc&) : __f_(0) {}"},
{"lineNum":" 1681","line":"    template<class _Alloc>"},
{"lineNum":" 1682","line":"      _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1683","line":"      function(allocator_arg_t, const _Alloc&, nullptr_t) : __f_(0) {}"},
{"lineNum":" 1684","line":"    template<class _Alloc>"},
{"lineNum":" 1685","line":"      function(allocator_arg_t, const _Alloc&, const function&);"},
{"lineNum":" 1686","line":"    template<class _Fp, class _Alloc>"},
{"lineNum":" 1687","line":"      function(allocator_arg_t, const _Alloc& __a, _Fp __f,"},
{"lineNum":" 1688","line":"               typename enable_if<!is_integral<_Fp>::value>::type* = 0);"},
{"lineNum":" 1689","line":""},
{"lineNum":" 1690","line":"    function& operator=(const function&);"},
{"lineNum":" 1691","line":"    function& operator=(nullptr_t);"},
{"lineNum":" 1692","line":"    template<class _Fp>"},
{"lineNum":" 1693","line":"      typename enable_if"},
{"lineNum":" 1694","line":"      <"},
{"lineNum":" 1695","line":"        !is_integral<_Fp>::value,"},
{"lineNum":" 1696","line":"        function&"},
{"lineNum":" 1697","line":"      >::type"},
{"lineNum":" 1698","line":"      operator=(_Fp);"},
{"lineNum":" 1699","line":""},
{"lineNum":" 1700","line":"    ~function();"},
{"lineNum":" 1701","line":""},
{"lineNum":" 1702","line":"    // 20.7.16.2.2, function modifiers:"},
{"lineNum":" 1703","line":"    void swap(function&);"},
{"lineNum":" 1704","line":"    template<class _Fp, class _Alloc>"},
{"lineNum":" 1705","line":"      _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1706","line":"      void assign(_Fp __f, const _Alloc& __a)"},
{"lineNum":" 1707","line":"        {function(allocator_arg, __a, __f).swap(*this);}"},
{"lineNum":" 1708","line":""},
{"lineNum":" 1709","line":"    // 20.7.16.2.3, function capacity:"},
{"lineNum":" 1710","line":"    _LIBCPP_INLINE_VISIBILITY explicit operator bool() const {return __f_;}"},
{"lineNum":" 1711","line":""},
{"lineNum":" 1712","line":"private:"},
{"lineNum":" 1713","line":"    // deleted overloads close possible hole in the type system"},
{"lineNum":" 1714","line":"    template<class _R2>"},
{"lineNum":" 1715","line":"      bool operator==(const function<_R2()>&) const;// = delete;"},
{"lineNum":" 1716","line":"    template<class _R2>"},
{"lineNum":" 1717","line":"      bool operator!=(const function<_R2()>&) const;// = delete;"},
{"lineNum":" 1718","line":"public:"},
{"lineNum":" 1719","line":"    // 20.7.16.2.4, function invocation:"},
{"lineNum":" 1720","line":"    _Rp operator()() const;"},
{"lineNum":" 1721","line":""},
{"lineNum":" 1722","line":"#ifndef _LIBCPP_NO_RTTI"},
{"lineNum":" 1723","line":"    // 20.7.16.2.5, function target access:"},
{"lineNum":" 1724","line":"    const std::type_info& target_type() const;"},
{"lineNum":" 1725","line":"    template <typename _Tp> _Tp* target();"},
{"lineNum":" 1726","line":"    template <typename _Tp> const _Tp* target() const;"},
{"lineNum":" 1727","line":"#endif // _LIBCPP_NO_RTTI"},
{"lineNum":" 1728","line":"};"},
{"lineNum":" 1729","line":""},
{"lineNum":" 1730","line":"template<class _Rp>"},
{"lineNum":" 1731","line":"function<_Rp()>::function(const function& __f)"},
{"lineNum":" 1732","line":"{"},
{"lineNum":" 1733","line":"    if (__f.__f_ == 0)"},
{"lineNum":" 1734","line":"        __f_ = 0;"},
{"lineNum":" 1735","line":"    else if (__f.__f_ == (const __base*)&__f.__buf_)"},
{"lineNum":" 1736","line":"    {"},
{"lineNum":" 1737","line":"        __f_ = (__base*)&__buf_;"},
{"lineNum":" 1738","line":"        __f.__f_->__clone(__f_);"},
{"lineNum":" 1739","line":"    }"},
{"lineNum":" 1740","line":"    else"},
{"lineNum":" 1741","line":"        __f_ = __f.__f_->__clone();"},
{"lineNum":" 1742","line":"}"},
{"lineNum":" 1743","line":""},
{"lineNum":" 1744","line":"template<class _Rp>"},
{"lineNum":" 1745","line":"template<class _Alloc>"},
{"lineNum":" 1746","line":"function<_Rp()>::function(allocator_arg_t, const _Alloc&, const function& __f)"},
{"lineNum":" 1747","line":"{"},
{"lineNum":" 1748","line":"    if (__f.__f_ == 0)"},
{"lineNum":" 1749","line":"        __f_ = 0;"},
{"lineNum":" 1750","line":"    else if (__f.__f_ == (const __base*)&__f.__buf_)"},
{"lineNum":" 1751","line":"    {"},
{"lineNum":" 1752","line":"        __f_ = (__base*)&__buf_;"},
{"lineNum":" 1753","line":"        __f.__f_->__clone(__f_);"},
{"lineNum":" 1754","line":"    }"},
{"lineNum":" 1755","line":"    else"},
{"lineNum":" 1756","line":"        __f_ = __f.__f_->__clone();"},
{"lineNum":" 1757","line":"}"},
{"lineNum":" 1758","line":""},
{"lineNum":" 1759","line":"template<class _Rp>"},
{"lineNum":" 1760","line":"template <class _Fp>"},
{"lineNum":" 1761","line":"function<_Rp()>::function(_Fp __f,"},
{"lineNum":" 1762","line":"                                     typename enable_if<!is_integral<_Fp>::value>::type*)"},
{"lineNum":" 1763","line":"    : __f_(0)"},
{"lineNum":" 1764","line":"{"},
{"lineNum":" 1765","line":"    if (__function::__not_null(__f))"},
{"lineNum":" 1766","line":"    {"},
{"lineNum":" 1767","line":"        typedef __function::__func<_Fp, allocator<_Fp>, _Rp()> _FF;"},
{"lineNum":" 1768","line":"        if (sizeof(_FF) <= sizeof(__buf_))"},
{"lineNum":" 1769","line":"        {"},
{"lineNum":" 1770","line":"            __f_ = (__base*)&__buf_;"},
{"lineNum":" 1771","line":"            ::new ((void*)__f_) _FF(__f);"},
{"lineNum":" 1772","line":"        }"},
{"lineNum":" 1773","line":"        else"},
{"lineNum":" 1774","line":"        {"},
{"lineNum":" 1775","line":"            typedef allocator<_FF> _Ap;"},
{"lineNum":" 1776","line":"            _Ap __a;"},
{"lineNum":" 1777","line":"            typedef __allocator_destructor<_Ap> _Dp;"},
{"lineNum":" 1778","line":"            unique_ptr<__base, _Dp> __hold(__a.allocate(1), _Dp(__a, 1));"},
{"lineNum":" 1779","line":"            ::new ((void*)__hold.get()) _FF(__f, allocator<_Fp>(__a));"},
{"lineNum":" 1780","line":"            __f_ = __hold.release();"},
{"lineNum":" 1781","line":"        }"},
{"lineNum":" 1782","line":"    }"},
{"lineNum":" 1783","line":"}"},
{"lineNum":" 1784","line":""},
{"lineNum":" 1785","line":"template<class _Rp>"},
{"lineNum":" 1786","line":"template <class _Fp, class _Alloc>"},
{"lineNum":" 1787","line":"function<_Rp()>::function(allocator_arg_t, const _Alloc& __a0, _Fp __f,"},
{"lineNum":" 1788","line":"                                     typename enable_if<!is_integral<_Fp>::value>::type*)"},
{"lineNum":" 1789","line":"    : __f_(0)"},
{"lineNum":" 1790","line":"{"},
{"lineNum":" 1791","line":"    typedef allocator_traits<_Alloc> __alloc_traits;"},
{"lineNum":" 1792","line":"    if (__function::__not_null(__f))"},
{"lineNum":" 1793","line":"    {"},
{"lineNum":" 1794","line":"        typedef __function::__func<_Fp, _Alloc, _Rp()> _FF;"},
{"lineNum":" 1795","line":"        if (sizeof(_FF) <= sizeof(__buf_))"},
{"lineNum":" 1796","line":"        {"},
{"lineNum":" 1797","line":"            __f_ = (__base*)&__buf_;"},
{"lineNum":" 1798","line":"            ::new ((void*)__f_) _FF(__f, __a0);"},
{"lineNum":" 1799","line":"        }"},
{"lineNum":" 1800","line":"        else"},
{"lineNum":" 1801","line":"        {"},
{"lineNum":" 1802","line":"            typedef typename __rebind_alloc_helper<__alloc_traits, _FF>::type _Ap;"},
{"lineNum":" 1803","line":"            _Ap __a(__a0);"},
{"lineNum":" 1804","line":"            typedef __allocator_destructor<_Ap> _Dp;"},
{"lineNum":" 1805","line":"            unique_ptr<__base, _Dp> __hold(__a.allocate(1), _Dp(__a, 1));"},
{"lineNum":" 1806","line":"            ::new ((void*)__hold.get()) _FF(__f, _Alloc(__a));"},
{"lineNum":" 1807","line":"            __f_ = __hold.release();"},
{"lineNum":" 1808","line":"        }"},
{"lineNum":" 1809","line":"    }"},
{"lineNum":" 1810","line":"}"},
{"lineNum":" 1811","line":""},
{"lineNum":" 1812","line":"template<class _Rp>"},
{"lineNum":" 1813","line":"function<_Rp()>&"},
{"lineNum":" 1814","line":"function<_Rp()>::operator=(const function& __f)"},
{"lineNum":" 1815","line":"{"},
{"lineNum":" 1816","line":"    if (__f)"},
{"lineNum":" 1817","line":"        function(__f).swap(*this);"},
{"lineNum":" 1818","line":"    else"},
{"lineNum":" 1819","line":"        *this = nullptr;"},
{"lineNum":" 1820","line":"    return *this;"},
{"lineNum":" 1821","line":"}"},
{"lineNum":" 1822","line":""},
{"lineNum":" 1823","line":"template<class _Rp>"},
{"lineNum":" 1824","line":"function<_Rp()>&"},
{"lineNum":" 1825","line":"function<_Rp()>::operator=(nullptr_t)"},
{"lineNum":" 1826","line":"{"},
{"lineNum":" 1827","line":"    __base* __t = __f_;"},
{"lineNum":" 1828","line":"    __f_ = 0;"},
{"lineNum":" 1829","line":"    if (__t == (__base*)&__buf_)"},
{"lineNum":" 1830","line":"        __t->destroy();"},
{"lineNum":" 1831","line":"    else if (__t)"},
{"lineNum":" 1832","line":"        __t->destroy_deallocate();"},
{"lineNum":" 1833","line":"    return *this;"},
{"lineNum":" 1834","line":"}"},
{"lineNum":" 1835","line":""},
{"lineNum":" 1836","line":"template<class _Rp>"},
{"lineNum":" 1837","line":"template <class _Fp>"},
{"lineNum":" 1838","line":"typename enable_if"},
{"lineNum":" 1839","line":"<"},
{"lineNum":" 1840","line":"    !is_integral<_Fp>::value,"},
{"lineNum":" 1841","line":"    function<_Rp()>&"},
{"lineNum":" 1842","line":">::type"},
{"lineNum":" 1843","line":"function<_Rp()>::operator=(_Fp __f)"},
{"lineNum":" 1844","line":"{"},
{"lineNum":" 1845","line":"    function(_VSTD::move(__f)).swap(*this);"},
{"lineNum":" 1846","line":"    return *this;"},
{"lineNum":" 1847","line":"}"},
{"lineNum":" 1848","line":""},
{"lineNum":" 1849","line":"template<class _Rp>"},
{"lineNum":" 1850","line":"function<_Rp()>::~function()"},
{"lineNum":" 1851","line":"{"},
{"lineNum":" 1852","line":"    if (__f_ == (__base*)&__buf_)"},
{"lineNum":" 1853","line":"        __f_->destroy();"},
{"lineNum":" 1854","line":"    else if (__f_)"},
{"lineNum":" 1855","line":"        __f_->destroy_deallocate();"},
{"lineNum":" 1856","line":"}"},
{"lineNum":" 1857","line":""},
{"lineNum":" 1858","line":"template<class _Rp>"},
{"lineNum":" 1859","line":"void"},
{"lineNum":" 1860","line":"function<_Rp()>::swap(function& __f)"},
{"lineNum":" 1861","line":"{"},
{"lineNum":" 1862","line":"    if (_VSTD::addressof(__f) == this)"},
{"lineNum":" 1863","line":"      return;"},
{"lineNum":" 1864","line":"    if (__f_ == (__base*)&__buf_ && __f.__f_ == (__base*)&__f.__buf_)"},
{"lineNum":" 1865","line":"    {"},
{"lineNum":" 1866","line":"        typename aligned_storage<sizeof(__buf_)>::type __tempbuf;"},
{"lineNum":" 1867","line":"        __base* __t = (__base*)&__tempbuf;"},
{"lineNum":" 1868","line":"        __f_->__clone(__t);"},
{"lineNum":" 1869","line":"        __f_->destroy();"},
{"lineNum":" 1870","line":"        __f_ = 0;"},
{"lineNum":" 1871","line":"        __f.__f_->__clone((__base*)&__buf_);"},
{"lineNum":" 1872","line":"        __f.__f_->destroy();"},
{"lineNum":" 1873","line":"        __f.__f_ = 0;"},
{"lineNum":" 1874","line":"        __f_ = (__base*)&__buf_;"},
{"lineNum":" 1875","line":"        __t->__clone((__base*)&__f.__buf_);"},
{"lineNum":" 1876","line":"        __t->destroy();"},
{"lineNum":" 1877","line":"        __f.__f_ = (__base*)&__f.__buf_;"},
{"lineNum":" 1878","line":"    }"},
{"lineNum":" 1879","line":"    else if (__f_ == (__base*)&__buf_)"},
{"lineNum":" 1880","line":"    {"},
{"lineNum":" 1881","line":"        __f_->__clone((__base*)&__f.__buf_);"},
{"lineNum":" 1882","line":"        __f_->destroy();"},
{"lineNum":" 1883","line":"        __f_ = __f.__f_;"},
{"lineNum":" 1884","line":"        __f.__f_ = (__base*)&__f.__buf_;"},
{"lineNum":" 1885","line":"    }"},
{"lineNum":" 1886","line":"    else if (__f.__f_ == (__base*)&__f.__buf_)"},
{"lineNum":" 1887","line":"    {"},
{"lineNum":" 1888","line":"        __f.__f_->__clone((__base*)&__buf_);"},
{"lineNum":" 1889","line":"        __f.__f_->destroy();"},
{"lineNum":" 1890","line":"        __f.__f_ = __f_;"},
{"lineNum":" 1891","line":"        __f_ = (__base*)&__buf_;"},
{"lineNum":" 1892","line":"    }"},
{"lineNum":" 1893","line":"    else"},
{"lineNum":" 1894","line":"        _VSTD::swap(__f_, __f.__f_);"},
{"lineNum":" 1895","line":"}"},
{"lineNum":" 1896","line":""},
{"lineNum":" 1897","line":"template<class _Rp>"},
{"lineNum":" 1898","line":"_Rp"},
{"lineNum":" 1899","line":"function<_Rp()>::operator()() const"},
{"lineNum":" 1900","line":"{"},
{"lineNum":" 1901","line":"    if (__f_ == 0)"},
{"lineNum":" 1902","line":"        __throw_bad_function_call();"},
{"lineNum":" 1903","line":"    return (*__f_)();"},
{"lineNum":" 1904","line":"}"},
{"lineNum":" 1905","line":""},
{"lineNum":" 1906","line":"#ifndef _LIBCPP_NO_RTTI"},
{"lineNum":" 1907","line":""},
{"lineNum":" 1908","line":"template<class _Rp>"},
{"lineNum":" 1909","line":"const std::type_info&"},
{"lineNum":" 1910","line":"function<_Rp()>::target_type() const"},
{"lineNum":" 1911","line":"{"},
{"lineNum":" 1912","line":"    if (__f_ == 0)"},
{"lineNum":" 1913","line":"        return typeid(void);"},
{"lineNum":" 1914","line":"    return __f_->target_type();"},
{"lineNum":" 1915","line":"}"},
{"lineNum":" 1916","line":""},
{"lineNum":" 1917","line":"template<class _Rp>"},
{"lineNum":" 1918","line":"template <typename _Tp>"},
{"lineNum":" 1919","line":"_Tp*"},
{"lineNum":" 1920","line":"function<_Rp()>::target()"},
{"lineNum":" 1921","line":"{"},
{"lineNum":" 1922","line":"    if (__f_ == 0)"},
{"lineNum":" 1923","line":"        return (_Tp*)0;"},
{"lineNum":" 1924","line":"    return (_Tp*) const_cast<void *>(__f_->target(typeid(_Tp)));"},
{"lineNum":" 1925","line":"}"},
{"lineNum":" 1926","line":""},
{"lineNum":" 1927","line":"template<class _Rp>"},
{"lineNum":" 1928","line":"template <typename _Tp>"},
{"lineNum":" 1929","line":"const _Tp*"},
{"lineNum":" 1930","line":"function<_Rp()>::target() const"},
{"lineNum":" 1931","line":"{"},
{"lineNum":" 1932","line":"    if (__f_ == 0)"},
{"lineNum":" 1933","line":"        return (const _Tp*)0;"},
{"lineNum":" 1934","line":"    return (const _Tp*)__f_->target(typeid(_Tp));"},
{"lineNum":" 1935","line":"}"},
{"lineNum":" 1936","line":""},
{"lineNum":" 1937","line":"#endif // _LIBCPP_NO_RTTI"},
{"lineNum":" 1938","line":""},
{"lineNum":" 1939","line":"template<class _Rp, class _A0>"},
{"lineNum":" 1940","line":"class _LIBCPP_TEMPLATE_VIS function<_Rp(_A0)>"},
{"lineNum":" 1941","line":"    : public unary_function<_A0, _Rp>"},
{"lineNum":" 1942","line":"{"},
{"lineNum":" 1943","line":"    typedef __function::__base<_Rp(_A0)> __base;"},
{"lineNum":" 1944","line":"    aligned_storage<3*sizeof(void*)>::type __buf_;"},
{"lineNum":" 1945","line":"    __base* __f_;"},
{"lineNum":" 1946","line":""},
{"lineNum":" 1947","line":"public:"},
{"lineNum":" 1948","line":"    typedef _Rp result_type;"},
{"lineNum":" 1949","line":""},
{"lineNum":" 1950","line":"    // 20.7.16.2.1, construct/copy/destroy:"},
{"lineNum":" 1951","line":"    _LIBCPP_INLINE_VISIBILITY explicit function() : __f_(0) {}"},
{"lineNum":" 1952","line":"    _LIBCPP_INLINE_VISIBILITY function(nullptr_t) : __f_(0) {}"},
{"lineNum":" 1953","line":"    function(const function&);"},
{"lineNum":" 1954","line":"    template<class _Fp>"},
{"lineNum":" 1955","line":"      function(_Fp,"},
{"lineNum":" 1956","line":"               typename enable_if<!is_integral<_Fp>::value>::type* = 0);"},
{"lineNum":" 1957","line":""},
{"lineNum":" 1958","line":"    template<class _Alloc>"},
{"lineNum":" 1959","line":"      _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1960","line":"      function(allocator_arg_t, const _Alloc&) : __f_(0) {}"},
{"lineNum":" 1961","line":"    template<class _Alloc>"},
{"lineNum":" 1962","line":"      _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1963","line":"      function(allocator_arg_t, const _Alloc&, nullptr_t) : __f_(0) {}"},
{"lineNum":" 1964","line":"    template<class _Alloc>"},
{"lineNum":" 1965","line":"      function(allocator_arg_t, const _Alloc&, const function&);"},
{"lineNum":" 1966","line":"    template<class _Fp, class _Alloc>"},
{"lineNum":" 1967","line":"      function(allocator_arg_t, const _Alloc& __a, _Fp __f,"},
{"lineNum":" 1968","line":"               typename enable_if<!is_integral<_Fp>::value>::type* = 0);"},
{"lineNum":" 1969","line":""},
{"lineNum":" 1970","line":"    function& operator=(const function&);"},
{"lineNum":" 1971","line":"    function& operator=(nullptr_t);"},
{"lineNum":" 1972","line":"    template<class _Fp>"},
{"lineNum":" 1973","line":"      typename enable_if"},
{"lineNum":" 1974","line":"      <"},
{"lineNum":" 1975","line":"        !is_integral<_Fp>::value,"},
{"lineNum":" 1976","line":"        function&"},
{"lineNum":" 1977","line":"      >::type"},
{"lineNum":" 1978","line":"      operator=(_Fp);"},
{"lineNum":" 1979","line":""},
{"lineNum":" 1980","line":"    ~function();"},
{"lineNum":" 1981","line":""},
{"lineNum":" 1982","line":"    // 20.7.16.2.2, function modifiers:"},
{"lineNum":" 1983","line":"    void swap(function&);"},
{"lineNum":" 1984","line":"    template<class _Fp, class _Alloc>"},
{"lineNum":" 1985","line":"      _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1986","line":"      void assign(_Fp __f, const _Alloc& __a)"},
{"lineNum":" 1987","line":"        {function(allocator_arg, __a, __f).swap(*this);}"},
{"lineNum":" 1988","line":""},
{"lineNum":" 1989","line":"    // 20.7.16.2.3, function capacity:"},
{"lineNum":" 1990","line":"    _LIBCPP_INLINE_VISIBILITY explicit operator bool() const {return __f_;}"},
{"lineNum":" 1991","line":""},
{"lineNum":" 1992","line":"private:"},
{"lineNum":" 1993","line":"    // deleted overloads close possible hole in the type system"},
{"lineNum":" 1994","line":"    template<class _R2, class _B0>"},
{"lineNum":" 1995","line":"      bool operator==(const function<_R2(_B0)>&) const;// = delete;"},
{"lineNum":" 1996","line":"    template<class _R2, class _B0>"},
{"lineNum":" 1997","line":"      bool operator!=(const function<_R2(_B0)>&) const;// = delete;"},
{"lineNum":" 1998","line":"public:"},
{"lineNum":" 1999","line":"    // 20.7.16.2.4, function invocation:"},
{"lineNum":" 2000","line":"    _Rp operator()(_A0) const;"},
{"lineNum":" 2001","line":""},
{"lineNum":" 2002","line":"#ifndef _LIBCPP_NO_RTTI"},
{"lineNum":" 2003","line":"    // 20.7.16.2.5, function target access:"},
{"lineNum":" 2004","line":"    const std::type_info& target_type() const;"},
{"lineNum":" 2005","line":"    template <typename _Tp> _Tp* target();"},
{"lineNum":" 2006","line":"    template <typename _Tp> const _Tp* target() const;"},
{"lineNum":" 2007","line":"#endif // _LIBCPP_NO_RTTI"},
{"lineNum":" 2008","line":"};"},
{"lineNum":" 2009","line":""},
{"lineNum":" 2010","line":"template<class _Rp, class _A0>"},
{"lineNum":" 2011","line":"function<_Rp(_A0)>::function(const function& __f)"},
{"lineNum":" 2012","line":"{"},
{"lineNum":" 2013","line":"    if (__f.__f_ == 0)"},
{"lineNum":" 2014","line":"        __f_ = 0;"},
{"lineNum":" 2015","line":"    else if (__f.__f_ == (const __base*)&__f.__buf_)"},
{"lineNum":" 2016","line":"    {"},
{"lineNum":" 2017","line":"        __f_ = (__base*)&__buf_;"},
{"lineNum":" 2018","line":"        __f.__f_->__clone(__f_);"},
{"lineNum":" 2019","line":"    }"},
{"lineNum":" 2020","line":"    else"},
{"lineNum":" 2021","line":"        __f_ = __f.__f_->__clone();"},
{"lineNum":" 2022","line":"}"},
{"lineNum":" 2023","line":""},
{"lineNum":" 2024","line":"template<class _Rp, class _A0>"},
{"lineNum":" 2025","line":"template<class _Alloc>"},
{"lineNum":" 2026","line":"function<_Rp(_A0)>::function(allocator_arg_t, const _Alloc&, const function& __f)"},
{"lineNum":" 2027","line":"{"},
{"lineNum":" 2028","line":"    if (__f.__f_ == 0)"},
{"lineNum":" 2029","line":"        __f_ = 0;"},
{"lineNum":" 2030","line":"    else if (__f.__f_ == (const __base*)&__f.__buf_)"},
{"lineNum":" 2031","line":"    {"},
{"lineNum":" 2032","line":"        __f_ = (__base*)&__buf_;"},
{"lineNum":" 2033","line":"        __f.__f_->__clone(__f_);"},
{"lineNum":" 2034","line":"    }"},
{"lineNum":" 2035","line":"    else"},
{"lineNum":" 2036","line":"        __f_ = __f.__f_->__clone();"},
{"lineNum":" 2037","line":"}"},
{"lineNum":" 2038","line":""},
{"lineNum":" 2039","line":"template<class _Rp, class _A0>"},
{"lineNum":" 2040","line":"template <class _Fp>"},
{"lineNum":" 2041","line":"function<_Rp(_A0)>::function(_Fp __f,"},
{"lineNum":" 2042","line":"                                     typename enable_if<!is_integral<_Fp>::value>::type*)"},
{"lineNum":" 2043","line":"    : __f_(0)"},
{"lineNum":" 2044","line":"{"},
{"lineNum":" 2045","line":"    if (__function::__not_null(__f))"},
{"lineNum":" 2046","line":"    {"},
{"lineNum":" 2047","line":"        typedef __function::__func<_Fp, allocator<_Fp>, _Rp(_A0)> _FF;"},
{"lineNum":" 2048","line":"        if (sizeof(_FF) <= sizeof(__buf_))"},
{"lineNum":" 2049","line":"        {"},
{"lineNum":" 2050","line":"            __f_ = (__base*)&__buf_;"},
{"lineNum":" 2051","line":"            ::new ((void*)__f_) _FF(__f);"},
{"lineNum":" 2052","line":"        }"},
{"lineNum":" 2053","line":"        else"},
{"lineNum":" 2054","line":"        {"},
{"lineNum":" 2055","line":"            typedef allocator<_FF> _Ap;"},
{"lineNum":" 2056","line":"            _Ap __a;"},
{"lineNum":" 2057","line":"            typedef __allocator_destructor<_Ap> _Dp;"},
{"lineNum":" 2058","line":"            unique_ptr<__base, _Dp> __hold(__a.allocate(1), _Dp(__a, 1));"},
{"lineNum":" 2059","line":"            ::new ((void*)__hold.get()) _FF(__f, allocator<_Fp>(__a));"},
{"lineNum":" 2060","line":"            __f_ = __hold.release();"},
{"lineNum":" 2061","line":"        }"},
{"lineNum":" 2062","line":"    }"},
{"lineNum":" 2063","line":"}"},
{"lineNum":" 2064","line":""},
{"lineNum":" 2065","line":"template<class _Rp, class _A0>"},
{"lineNum":" 2066","line":"template <class _Fp, class _Alloc>"},
{"lineNum":" 2067","line":"function<_Rp(_A0)>::function(allocator_arg_t, const _Alloc& __a0, _Fp __f,"},
{"lineNum":" 2068","line":"                                     typename enable_if<!is_integral<_Fp>::value>::type*)"},
{"lineNum":" 2069","line":"    : __f_(0)"},
{"lineNum":" 2070","line":"{"},
{"lineNum":" 2071","line":"    typedef allocator_traits<_Alloc> __alloc_traits;"},
{"lineNum":" 2072","line":"    if (__function::__not_null(__f))"},
{"lineNum":" 2073","line":"    {"},
{"lineNum":" 2074","line":"        typedef __function::__func<_Fp, _Alloc, _Rp(_A0)> _FF;"},
{"lineNum":" 2075","line":"        if (sizeof(_FF) <= sizeof(__buf_))"},
{"lineNum":" 2076","line":"        {"},
{"lineNum":" 2077","line":"            __f_ = (__base*)&__buf_;"},
{"lineNum":" 2078","line":"            ::new ((void*)__f_) _FF(__f, __a0);"},
{"lineNum":" 2079","line":"        }"},
{"lineNum":" 2080","line":"        else"},
{"lineNum":" 2081","line":"        {"},
{"lineNum":" 2082","line":"            typedef typename __rebind_alloc_helper<__alloc_traits, _FF>::type _Ap;"},
{"lineNum":" 2083","line":"            _Ap __a(__a0);"},
{"lineNum":" 2084","line":"            typedef __allocator_destructor<_Ap> _Dp;"},
{"lineNum":" 2085","line":"            unique_ptr<__base, _Dp> __hold(__a.allocate(1), _Dp(__a, 1));"},
{"lineNum":" 2086","line":"            ::new ((void*)__hold.get()) _FF(__f, _Alloc(__a));"},
{"lineNum":" 2087","line":"            __f_ = __hold.release();"},
{"lineNum":" 2088","line":"        }"},
{"lineNum":" 2089","line":"    }"},
{"lineNum":" 2090","line":"}"},
{"lineNum":" 2091","line":""},
{"lineNum":" 2092","line":"template<class _Rp, class _A0>"},
{"lineNum":" 2093","line":"function<_Rp(_A0)>&"},
{"lineNum":" 2094","line":"function<_Rp(_A0)>::operator=(const function& __f)"},
{"lineNum":" 2095","line":"{"},
{"lineNum":" 2096","line":"    if (__f)"},
{"lineNum":" 2097","line":"        function(__f).swap(*this);"},
{"lineNum":" 2098","line":"    else"},
{"lineNum":" 2099","line":"        *this = nullptr;"},
{"lineNum":" 2100","line":"    return *this;"},
{"lineNum":" 2101","line":"}"},
{"lineNum":" 2102","line":""},
{"lineNum":" 2103","line":"template<class _Rp, class _A0>"},
{"lineNum":" 2104","line":"function<_Rp(_A0)>&"},
{"lineNum":" 2105","line":"function<_Rp(_A0)>::operator=(nullptr_t)"},
{"lineNum":" 2106","line":"{"},
{"lineNum":" 2107","line":"    __base* __t = __f_;"},
{"lineNum":" 2108","line":"    __f_ = 0;"},
{"lineNum":" 2109","line":"    if (__t == (__base*)&__buf_)"},
{"lineNum":" 2110","line":"        __t->destroy();"},
{"lineNum":" 2111","line":"    else if (__t)"},
{"lineNum":" 2112","line":"        __t->destroy_deallocate();"},
{"lineNum":" 2113","line":"    return *this;"},
{"lineNum":" 2114","line":"}"},
{"lineNum":" 2115","line":""},
{"lineNum":" 2116","line":"template<class _Rp, class _A0>"},
{"lineNum":" 2117","line":"template <class _Fp>"},
{"lineNum":" 2118","line":"typename enable_if"},
{"lineNum":" 2119","line":"<"},
{"lineNum":" 2120","line":"    !is_integral<_Fp>::value,"},
{"lineNum":" 2121","line":"    function<_Rp(_A0)>&"},
{"lineNum":" 2122","line":">::type"},
{"lineNum":" 2123","line":"function<_Rp(_A0)>::operator=(_Fp __f)"},
{"lineNum":" 2124","line":"{"},
{"lineNum":" 2125","line":"    function(_VSTD::move(__f)).swap(*this);"},
{"lineNum":" 2126","line":"    return *this;"},
{"lineNum":" 2127","line":"}"},
{"lineNum":" 2128","line":""},
{"lineNum":" 2129","line":"template<class _Rp, class _A0>"},
{"lineNum":" 2130","line":"function<_Rp(_A0)>::~function()"},
{"lineNum":" 2131","line":"{"},
{"lineNum":" 2132","line":"    if (__f_ == (__base*)&__buf_)"},
{"lineNum":" 2133","line":"        __f_->destroy();"},
{"lineNum":" 2134","line":"    else if (__f_)"},
{"lineNum":" 2135","line":"        __f_->destroy_deallocate();"},
{"lineNum":" 2136","line":"}"},
{"lineNum":" 2137","line":""},
{"lineNum":" 2138","line":"template<class _Rp, class _A0>"},
{"lineNum":" 2139","line":"void"},
{"lineNum":" 2140","line":"function<_Rp(_A0)>::swap(function& __f)"},
{"lineNum":" 2141","line":"{"},
{"lineNum":" 2142","line":"    if (_VSTD::addressof(__f) == this)"},
{"lineNum":" 2143","line":"      return;"},
{"lineNum":" 2144","line":"    if (__f_ == (__base*)&__buf_ && __f.__f_ == (__base*)&__f.__buf_)"},
{"lineNum":" 2145","line":"    {"},
{"lineNum":" 2146","line":"        typename aligned_storage<sizeof(__buf_)>::type __tempbuf;"},
{"lineNum":" 2147","line":"        __base* __t = (__base*)&__tempbuf;"},
{"lineNum":" 2148","line":"        __f_->__clone(__t);"},
{"lineNum":" 2149","line":"        __f_->destroy();"},
{"lineNum":" 2150","line":"        __f_ = 0;"},
{"lineNum":" 2151","line":"        __f.__f_->__clone((__base*)&__buf_);"},
{"lineNum":" 2152","line":"        __f.__f_->destroy();"},
{"lineNum":" 2153","line":"        __f.__f_ = 0;"},
{"lineNum":" 2154","line":"        __f_ = (__base*)&__buf_;"},
{"lineNum":" 2155","line":"        __t->__clone((__base*)&__f.__buf_);"},
{"lineNum":" 2156","line":"        __t->destroy();"},
{"lineNum":" 2157","line":"        __f.__f_ = (__base*)&__f.__buf_;"},
{"lineNum":" 2158","line":"    }"},
{"lineNum":" 2159","line":"    else if (__f_ == (__base*)&__buf_)"},
{"lineNum":" 2160","line":"    {"},
{"lineNum":" 2161","line":"        __f_->__clone((__base*)&__f.__buf_);"},
{"lineNum":" 2162","line":"        __f_->destroy();"},
{"lineNum":" 2163","line":"        __f_ = __f.__f_;"},
{"lineNum":" 2164","line":"        __f.__f_ = (__base*)&__f.__buf_;"},
{"lineNum":" 2165","line":"    }"},
{"lineNum":" 2166","line":"    else if (__f.__f_ == (__base*)&__f.__buf_)"},
{"lineNum":" 2167","line":"    {"},
{"lineNum":" 2168","line":"        __f.__f_->__clone((__base*)&__buf_);"},
{"lineNum":" 2169","line":"        __f.__f_->destroy();"},
{"lineNum":" 2170","line":"        __f.__f_ = __f_;"},
{"lineNum":" 2171","line":"        __f_ = (__base*)&__buf_;"},
{"lineNum":" 2172","line":"    }"},
{"lineNum":" 2173","line":"    else"},
{"lineNum":" 2174","line":"        _VSTD::swap(__f_, __f.__f_);"},
{"lineNum":" 2175","line":"}"},
{"lineNum":" 2176","line":""},
{"lineNum":" 2177","line":"template<class _Rp, class _A0>"},
{"lineNum":" 2178","line":"_Rp"},
{"lineNum":" 2179","line":"function<_Rp(_A0)>::operator()(_A0 __a0) const"},
{"lineNum":" 2180","line":"{"},
{"lineNum":" 2181","line":"    if (__f_ == 0)"},
{"lineNum":" 2182","line":"        __throw_bad_function_call();"},
{"lineNum":" 2183","line":"    return (*__f_)(__a0);"},
{"lineNum":" 2184","line":"}"},
{"lineNum":" 2185","line":""},
{"lineNum":" 2186","line":"#ifndef _LIBCPP_NO_RTTI"},
{"lineNum":" 2187","line":""},
{"lineNum":" 2188","line":"template<class _Rp, class _A0>"},
{"lineNum":" 2189","line":"const std::type_info&"},
{"lineNum":" 2190","line":"function<_Rp(_A0)>::target_type() const"},
{"lineNum":" 2191","line":"{"},
{"lineNum":" 2192","line":"    if (__f_ == 0)"},
{"lineNum":" 2193","line":"        return typeid(void);"},
{"lineNum":" 2194","line":"    return __f_->target_type();"},
{"lineNum":" 2195","line":"}"},
{"lineNum":" 2196","line":""},
{"lineNum":" 2197","line":"template<class _Rp, class _A0>"},
{"lineNum":" 2198","line":"template <typename _Tp>"},
{"lineNum":" 2199","line":"_Tp*"},
{"lineNum":" 2200","line":"function<_Rp(_A0)>::target()"},
{"lineNum":" 2201","line":"{"},
{"lineNum":" 2202","line":"    if (__f_ == 0)"},
{"lineNum":" 2203","line":"        return (_Tp*)0;"},
{"lineNum":" 2204","line":"    return (_Tp*) const_cast<void *>(__f_->target(typeid(_Tp)));"},
{"lineNum":" 2205","line":"}"},
{"lineNum":" 2206","line":""},
{"lineNum":" 2207","line":"template<class _Rp, class _A0>"},
{"lineNum":" 2208","line":"template <typename _Tp>"},
{"lineNum":" 2209","line":"const _Tp*"},
{"lineNum":" 2210","line":"function<_Rp(_A0)>::target() const"},
{"lineNum":" 2211","line":"{"},
{"lineNum":" 2212","line":"    if (__f_ == 0)"},
{"lineNum":" 2213","line":"        return (const _Tp*)0;"},
{"lineNum":" 2214","line":"    return (const _Tp*)__f_->target(typeid(_Tp));"},
{"lineNum":" 2215","line":"}"},
{"lineNum":" 2216","line":""},
{"lineNum":" 2217","line":"#endif // _LIBCPP_NO_RTTI"},
{"lineNum":" 2218","line":""},
{"lineNum":" 2219","line":"template<class _Rp, class _A0, class _A1>"},
{"lineNum":" 2220","line":"class _LIBCPP_TEMPLATE_VIS function<_Rp(_A0, _A1)>"},
{"lineNum":" 2221","line":"    : public binary_function<_A0, _A1, _Rp>"},
{"lineNum":" 2222","line":"{"},
{"lineNum":" 2223","line":"    typedef __function::__base<_Rp(_A0, _A1)> __base;"},
{"lineNum":" 2224","line":"    aligned_storage<3*sizeof(void*)>::type __buf_;"},
{"lineNum":" 2225","line":"    __base* __f_;"},
{"lineNum":" 2226","line":""},
{"lineNum":" 2227","line":"public:"},
{"lineNum":" 2228","line":"    typedef _Rp result_type;"},
{"lineNum":" 2229","line":""},
{"lineNum":" 2230","line":"    // 20.7.16.2.1, construct/copy/destroy:"},
{"lineNum":" 2231","line":"    _LIBCPP_INLINE_VISIBILITY explicit function() : __f_(0) {}"},
{"lineNum":" 2232","line":"    _LIBCPP_INLINE_VISIBILITY function(nullptr_t) : __f_(0) {}"},
{"lineNum":" 2233","line":"    function(const function&);"},
{"lineNum":" 2234","line":"    template<class _Fp>"},
{"lineNum":" 2235","line":"      function(_Fp,"},
{"lineNum":" 2236","line":"               typename enable_if<!is_integral<_Fp>::value>::type* = 0);"},
{"lineNum":" 2237","line":""},
{"lineNum":" 2238","line":"    template<class _Alloc>"},
{"lineNum":" 2239","line":"      _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2240","line":"      function(allocator_arg_t, const _Alloc&) : __f_(0) {}"},
{"lineNum":" 2241","line":"    template<class _Alloc>"},
{"lineNum":" 2242","line":"      _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2243","line":"      function(allocator_arg_t, const _Alloc&, nullptr_t) : __f_(0) {}"},
{"lineNum":" 2244","line":"    template<class _Alloc>"},
{"lineNum":" 2245","line":"      function(allocator_arg_t, const _Alloc&, const function&);"},
{"lineNum":" 2246","line":"    template<class _Fp, class _Alloc>"},
{"lineNum":" 2247","line":"      function(allocator_arg_t, const _Alloc& __a, _Fp __f,"},
{"lineNum":" 2248","line":"               typename enable_if<!is_integral<_Fp>::value>::type* = 0);"},
{"lineNum":" 2249","line":""},
{"lineNum":" 2250","line":"    function& operator=(const function&);"},
{"lineNum":" 2251","line":"    function& operator=(nullptr_t);"},
{"lineNum":" 2252","line":"    template<class _Fp>"},
{"lineNum":" 2253","line":"      typename enable_if"},
{"lineNum":" 2254","line":"      <"},
{"lineNum":" 2255","line":"        !is_integral<_Fp>::value,"},
{"lineNum":" 2256","line":"        function&"},
{"lineNum":" 2257","line":"      >::type"},
{"lineNum":" 2258","line":"      operator=(_Fp);"},
{"lineNum":" 2259","line":""},
{"lineNum":" 2260","line":"    ~function();"},
{"lineNum":" 2261","line":""},
{"lineNum":" 2262","line":"    // 20.7.16.2.2, function modifiers:"},
{"lineNum":" 2263","line":"    void swap(function&);"},
{"lineNum":" 2264","line":"    template<class _Fp, class _Alloc>"},
{"lineNum":" 2265","line":"      _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2266","line":"      void assign(_Fp __f, const _Alloc& __a)"},
{"lineNum":" 2267","line":"        {function(allocator_arg, __a, __f).swap(*this);}"},
{"lineNum":" 2268","line":""},
{"lineNum":" 2269","line":"    // 20.7.16.2.3, function capacity:"},
{"lineNum":" 2270","line":"    _LIBCPP_INLINE_VISIBILITY explicit operator bool() const {return __f_;}"},
{"lineNum":" 2271","line":""},
{"lineNum":" 2272","line":"private:"},
{"lineNum":" 2273","line":"    // deleted overloads close possible hole in the type system"},
{"lineNum":" 2274","line":"    template<class _R2, class _B0, class _B1>"},
{"lineNum":" 2275","line":"      bool operator==(const function<_R2(_B0, _B1)>&) const;// = delete;"},
{"lineNum":" 2276","line":"    template<class _R2, class _B0, class _B1>"},
{"lineNum":" 2277","line":"      bool operator!=(const function<_R2(_B0, _B1)>&) const;// = delete;"},
{"lineNum":" 2278","line":"public:"},
{"lineNum":" 2279","line":"    // 20.7.16.2.4, function invocation:"},
{"lineNum":" 2280","line":"    _Rp operator()(_A0, _A1) const;"},
{"lineNum":" 2281","line":""},
{"lineNum":" 2282","line":"#ifndef _LIBCPP_NO_RTTI"},
{"lineNum":" 2283","line":"    // 20.7.16.2.5, function target access:"},
{"lineNum":" 2284","line":"    const std::type_info& target_type() const;"},
{"lineNum":" 2285","line":"    template <typename _Tp> _Tp* target();"},
{"lineNum":" 2286","line":"    template <typename _Tp> const _Tp* target() const;"},
{"lineNum":" 2287","line":"#endif // _LIBCPP_NO_RTTI"},
{"lineNum":" 2288","line":"};"},
{"lineNum":" 2289","line":""},
{"lineNum":" 2290","line":"template<class _Rp, class _A0, class _A1>"},
{"lineNum":" 2291","line":"function<_Rp(_A0, _A1)>::function(const function& __f)"},
{"lineNum":" 2292","line":"{"},
{"lineNum":" 2293","line":"    if (__f.__f_ == 0)"},
{"lineNum":" 2294","line":"        __f_ = 0;"},
{"lineNum":" 2295","line":"    else if (__f.__f_ == (const __base*)&__f.__buf_)"},
{"lineNum":" 2296","line":"    {"},
{"lineNum":" 2297","line":"        __f_ = (__base*)&__buf_;"},
{"lineNum":" 2298","line":"        __f.__f_->__clone(__f_);"},
{"lineNum":" 2299","line":"    }"},
{"lineNum":" 2300","line":"    else"},
{"lineNum":" 2301","line":"        __f_ = __f.__f_->__clone();"},
{"lineNum":" 2302","line":"}"},
{"lineNum":" 2303","line":""},
{"lineNum":" 2304","line":"template<class _Rp, class _A0, class _A1>"},
{"lineNum":" 2305","line":"template<class _Alloc>"},
{"lineNum":" 2306","line":"function<_Rp(_A0, _A1)>::function(allocator_arg_t, const _Alloc&, const function& __f)"},
{"lineNum":" 2307","line":"{"},
{"lineNum":" 2308","line":"    if (__f.__f_ == 0)"},
{"lineNum":" 2309","line":"        __f_ = 0;"},
{"lineNum":" 2310","line":"    else if (__f.__f_ == (const __base*)&__f.__buf_)"},
{"lineNum":" 2311","line":"    {"},
{"lineNum":" 2312","line":"        __f_ = (__base*)&__buf_;"},
{"lineNum":" 2313","line":"        __f.__f_->__clone(__f_);"},
{"lineNum":" 2314","line":"    }"},
{"lineNum":" 2315","line":"    else"},
{"lineNum":" 2316","line":"        __f_ = __f.__f_->__clone();"},
{"lineNum":" 2317","line":"}"},
{"lineNum":" 2318","line":""},
{"lineNum":" 2319","line":"template<class _Rp, class _A0, class _A1>"},
{"lineNum":" 2320","line":"template <class _Fp>"},
{"lineNum":" 2321","line":"function<_Rp(_A0, _A1)>::function(_Fp __f,"},
{"lineNum":" 2322","line":"                                 typename enable_if<!is_integral<_Fp>::value>::type*)"},
{"lineNum":" 2323","line":"    : __f_(0)"},
{"lineNum":" 2324","line":"{"},
{"lineNum":" 2325","line":"    if (__function::__not_null(__f))"},
{"lineNum":" 2326","line":"    {"},
{"lineNum":" 2327","line":"        typedef __function::__func<_Fp, allocator<_Fp>, _Rp(_A0, _A1)> _FF;"},
{"lineNum":" 2328","line":"        if (sizeof(_FF) <= sizeof(__buf_))"},
{"lineNum":" 2329","line":"        {"},
{"lineNum":" 2330","line":"            __f_ = (__base*)&__buf_;"},
{"lineNum":" 2331","line":"            ::new ((void*)__f_) _FF(__f);"},
{"lineNum":" 2332","line":"        }"},
{"lineNum":" 2333","line":"        else"},
{"lineNum":" 2334","line":"        {"},
{"lineNum":" 2335","line":"            typedef allocator<_FF> _Ap;"},
{"lineNum":" 2336","line":"            _Ap __a;"},
{"lineNum":" 2337","line":"            typedef __allocator_destructor<_Ap> _Dp;"},
{"lineNum":" 2338","line":"            unique_ptr<__base, _Dp> __hold(__a.allocate(1), _Dp(__a, 1));"},
{"lineNum":" 2339","line":"            ::new ((void*)__hold.get()) _FF(__f, allocator<_Fp>(__a));"},
{"lineNum":" 2340","line":"            __f_ = __hold.release();"},
{"lineNum":" 2341","line":"        }"},
{"lineNum":" 2342","line":"    }"},
{"lineNum":" 2343","line":"}"},
{"lineNum":" 2344","line":""},
{"lineNum":" 2345","line":"template<class _Rp, class _A0, class _A1>"},
{"lineNum":" 2346","line":"template <class _Fp, class _Alloc>"},
{"lineNum":" 2347","line":"function<_Rp(_A0, _A1)>::function(allocator_arg_t, const _Alloc& __a0, _Fp __f,"},
{"lineNum":" 2348","line":"                                 typename enable_if<!is_integral<_Fp>::value>::type*)"},
{"lineNum":" 2349","line":"    : __f_(0)"},
{"lineNum":" 2350","line":"{"},
{"lineNum":" 2351","line":"    typedef allocator_traits<_Alloc> __alloc_traits;"},
{"lineNum":" 2352","line":"    if (__function::__not_null(__f))"},
{"lineNum":" 2353","line":"    {"},
{"lineNum":" 2354","line":"        typedef __function::__func<_Fp, _Alloc, _Rp(_A0, _A1)> _FF;"},
{"lineNum":" 2355","line":"        if (sizeof(_FF) <= sizeof(__buf_))"},
{"lineNum":" 2356","line":"        {"},
{"lineNum":" 2357","line":"            __f_ = (__base*)&__buf_;"},
{"lineNum":" 2358","line":"            ::new ((void*)__f_) _FF(__f, __a0);"},
{"lineNum":" 2359","line":"        }"},
{"lineNum":" 2360","line":"        else"},
{"lineNum":" 2361","line":"        {"},
{"lineNum":" 2362","line":"            typedef typename __rebind_alloc_helper<__alloc_traits, _FF>::type _Ap;"},
{"lineNum":" 2363","line":"            _Ap __a(__a0);"},
{"lineNum":" 2364","line":"            typedef __allocator_destructor<_Ap> _Dp;"},
{"lineNum":" 2365","line":"            unique_ptr<__base, _Dp> __hold(__a.allocate(1), _Dp(__a, 1));"},
{"lineNum":" 2366","line":"            ::new ((void*)__hold.get()) _FF(__f, _Alloc(__a));"},
{"lineNum":" 2367","line":"            __f_ = __hold.release();"},
{"lineNum":" 2368","line":"        }"},
{"lineNum":" 2369","line":"    }"},
{"lineNum":" 2370","line":"}"},
{"lineNum":" 2371","line":""},
{"lineNum":" 2372","line":"template<class _Rp, class _A0, class _A1>"},
{"lineNum":" 2373","line":"function<_Rp(_A0, _A1)>&"},
{"lineNum":" 2374","line":"function<_Rp(_A0, _A1)>::operator=(const function& __f)"},
{"lineNum":" 2375","line":"{"},
{"lineNum":" 2376","line":"    if (__f)"},
{"lineNum":" 2377","line":"        function(__f).swap(*this);"},
{"lineNum":" 2378","line":"    else"},
{"lineNum":" 2379","line":"        *this = nullptr;"},
{"lineNum":" 2380","line":"    return *this;"},
{"lineNum":" 2381","line":"}"},
{"lineNum":" 2382","line":""},
{"lineNum":" 2383","line":"template<class _Rp, class _A0, class _A1>"},
{"lineNum":" 2384","line":"function<_Rp(_A0, _A1)>&"},
{"lineNum":" 2385","line":"function<_Rp(_A0, _A1)>::operator=(nullptr_t)"},
{"lineNum":" 2386","line":"{"},
{"lineNum":" 2387","line":"    __base* __t = __f_;"},
{"lineNum":" 2388","line":"    __f_ = 0;"},
{"lineNum":" 2389","line":"    if (__t == (__base*)&__buf_)"},
{"lineNum":" 2390","line":"        __t->destroy();"},
{"lineNum":" 2391","line":"    else if (__t)"},
{"lineNum":" 2392","line":"        __t->destroy_deallocate();"},
{"lineNum":" 2393","line":"    return *this;"},
{"lineNum":" 2394","line":"}"},
{"lineNum":" 2395","line":""},
{"lineNum":" 2396","line":"template<class _Rp, class _A0, class _A1>"},
{"lineNum":" 2397","line":"template <class _Fp>"},
{"lineNum":" 2398","line":"typename enable_if"},
{"lineNum":" 2399","line":"<"},
{"lineNum":" 2400","line":"    !is_integral<_Fp>::value,"},
{"lineNum":" 2401","line":"    function<_Rp(_A0, _A1)>&"},
{"lineNum":" 2402","line":">::type"},
{"lineNum":" 2403","line":"function<_Rp(_A0, _A1)>::operator=(_Fp __f)"},
{"lineNum":" 2404","line":"{"},
{"lineNum":" 2405","line":"    function(_VSTD::move(__f)).swap(*this);"},
{"lineNum":" 2406","line":"    return *this;"},
{"lineNum":" 2407","line":"}"},
{"lineNum":" 2408","line":""},
{"lineNum":" 2409","line":"template<class _Rp, class _A0, class _A1>"},
{"lineNum":" 2410","line":"function<_Rp(_A0, _A1)>::~function()"},
{"lineNum":" 2411","line":"{"},
{"lineNum":" 2412","line":"    if (__f_ == (__base*)&__buf_)"},
{"lineNum":" 2413","line":"        __f_->destroy();"},
{"lineNum":" 2414","line":"    else if (__f_)"},
{"lineNum":" 2415","line":"        __f_->destroy_deallocate();"},
{"lineNum":" 2416","line":"}"},
{"lineNum":" 2417","line":""},
{"lineNum":" 2418","line":"template<class _Rp, class _A0, class _A1>"},
{"lineNum":" 2419","line":"void"},
{"lineNum":" 2420","line":"function<_Rp(_A0, _A1)>::swap(function& __f)"},
{"lineNum":" 2421","line":"{"},
{"lineNum":" 2422","line":"    if (_VSTD::addressof(__f) == this)"},
{"lineNum":" 2423","line":"      return;"},
{"lineNum":" 2424","line":"    if (__f_ == (__base*)&__buf_ && __f.__f_ == (__base*)&__f.__buf_)"},
{"lineNum":" 2425","line":"    {"},
{"lineNum":" 2426","line":"        typename aligned_storage<sizeof(__buf_)>::type __tempbuf;"},
{"lineNum":" 2427","line":"        __base* __t = (__base*)&__tempbuf;"},
{"lineNum":" 2428","line":"        __f_->__clone(__t);"},
{"lineNum":" 2429","line":"        __f_->destroy();"},
{"lineNum":" 2430","line":"        __f_ = 0;"},
{"lineNum":" 2431","line":"        __f.__f_->__clone((__base*)&__buf_);"},
{"lineNum":" 2432","line":"        __f.__f_->destroy();"},
{"lineNum":" 2433","line":"        __f.__f_ = 0;"},
{"lineNum":" 2434","line":"        __f_ = (__base*)&__buf_;"},
{"lineNum":" 2435","line":"        __t->__clone((__base*)&__f.__buf_);"},
{"lineNum":" 2436","line":"        __t->destroy();"},
{"lineNum":" 2437","line":"        __f.__f_ = (__base*)&__f.__buf_;"},
{"lineNum":" 2438","line":"    }"},
{"lineNum":" 2439","line":"    else if (__f_ == (__base*)&__buf_)"},
{"lineNum":" 2440","line":"    {"},
{"lineNum":" 2441","line":"        __f_->__clone((__base*)&__f.__buf_);"},
{"lineNum":" 2442","line":"        __f_->destroy();"},
{"lineNum":" 2443","line":"        __f_ = __f.__f_;"},
{"lineNum":" 2444","line":"        __f.__f_ = (__base*)&__f.__buf_;"},
{"lineNum":" 2445","line":"    }"},
{"lineNum":" 2446","line":"    else if (__f.__f_ == (__base*)&__f.__buf_)"},
{"lineNum":" 2447","line":"    {"},
{"lineNum":" 2448","line":"        __f.__f_->__clone((__base*)&__buf_);"},
{"lineNum":" 2449","line":"        __f.__f_->destroy();"},
{"lineNum":" 2450","line":"        __f.__f_ = __f_;"},
{"lineNum":" 2451","line":"        __f_ = (__base*)&__buf_;"},
{"lineNum":" 2452","line":"    }"},
{"lineNum":" 2453","line":"    else"},
{"lineNum":" 2454","line":"        _VSTD::swap(__f_, __f.__f_);"},
{"lineNum":" 2455","line":"}"},
{"lineNum":" 2456","line":""},
{"lineNum":" 2457","line":"template<class _Rp, class _A0, class _A1>"},
{"lineNum":" 2458","line":"_Rp"},
{"lineNum":" 2459","line":"function<_Rp(_A0, _A1)>::operator()(_A0 __a0, _A1 __a1) const"},
{"lineNum":" 2460","line":"{"},
{"lineNum":" 2461","line":"    if (__f_ == 0)"},
{"lineNum":" 2462","line":"        __throw_bad_function_call();"},
{"lineNum":" 2463","line":"    return (*__f_)(__a0, __a1);"},
{"lineNum":" 2464","line":"}"},
{"lineNum":" 2465","line":""},
{"lineNum":" 2466","line":"#ifndef _LIBCPP_NO_RTTI"},
{"lineNum":" 2467","line":""},
{"lineNum":" 2468","line":"template<class _Rp, class _A0, class _A1>"},
{"lineNum":" 2469","line":"const std::type_info&"},
{"lineNum":" 2470","line":"function<_Rp(_A0, _A1)>::target_type() const"},
{"lineNum":" 2471","line":"{"},
{"lineNum":" 2472","line":"    if (__f_ == 0)"},
{"lineNum":" 2473","line":"        return typeid(void);"},
{"lineNum":" 2474","line":"    return __f_->target_type();"},
{"lineNum":" 2475","line":"}"},
{"lineNum":" 2476","line":""},
{"lineNum":" 2477","line":"template<class _Rp, class _A0, class _A1>"},
{"lineNum":" 2478","line":"template <typename _Tp>"},
{"lineNum":" 2479","line":"_Tp*"},
{"lineNum":" 2480","line":"function<_Rp(_A0, _A1)>::target()"},
{"lineNum":" 2481","line":"{"},
{"lineNum":" 2482","line":"    if (__f_ == 0)"},
{"lineNum":" 2483","line":"        return (_Tp*)0;"},
{"lineNum":" 2484","line":"    return (_Tp*) const_cast<void *>(__f_->target(typeid(_Tp)));"},
{"lineNum":" 2485","line":"}"},
{"lineNum":" 2486","line":""},
{"lineNum":" 2487","line":"template<class _Rp, class _A0, class _A1>"},
{"lineNum":" 2488","line":"template <typename _Tp>"},
{"lineNum":" 2489","line":"const _Tp*"},
{"lineNum":" 2490","line":"function<_Rp(_A0, _A1)>::target() const"},
{"lineNum":" 2491","line":"{"},
{"lineNum":" 2492","line":"    if (__f_ == 0)"},
{"lineNum":" 2493","line":"        return (const _Tp*)0;"},
{"lineNum":" 2494","line":"    return (const _Tp*)__f_->target(typeid(_Tp));"},
{"lineNum":" 2495","line":"}"},
{"lineNum":" 2496","line":""},
{"lineNum":" 2497","line":"#endif // _LIBCPP_NO_RTTI"},
{"lineNum":" 2498","line":""},
{"lineNum":" 2499","line":"template<class _Rp, class _A0, class _A1, class _A2>"},
{"lineNum":" 2500","line":"class _LIBCPP_TEMPLATE_VIS function<_Rp(_A0, _A1, _A2)>"},
{"lineNum":" 2501","line":"{"},
{"lineNum":" 2502","line":"    typedef __function::__base<_Rp(_A0, _A1, _A2)> __base;"},
{"lineNum":" 2503","line":"    aligned_storage<3*sizeof(void*)>::type __buf_;"},
{"lineNum":" 2504","line":"    __base* __f_;"},
{"lineNum":" 2505","line":""},
{"lineNum":" 2506","line":"public:"},
{"lineNum":" 2507","line":"    typedef _Rp result_type;"},
{"lineNum":" 2508","line":""},
{"lineNum":" 2509","line":"    // 20.7.16.2.1, construct/copy/destroy:"},
{"lineNum":" 2510","line":"    _LIBCPP_INLINE_VISIBILITY explicit function() : __f_(0) {}"},
{"lineNum":" 2511","line":"    _LIBCPP_INLINE_VISIBILITY function(nullptr_t) : __f_(0) {}"},
{"lineNum":" 2512","line":"    function(const function&);"},
{"lineNum":" 2513","line":"    template<class _Fp>"},
{"lineNum":" 2514","line":"      function(_Fp,"},
{"lineNum":" 2515","line":"               typename enable_if<!is_integral<_Fp>::value>::type* = 0);"},
{"lineNum":" 2516","line":""},
{"lineNum":" 2517","line":"    template<class _Alloc>"},
{"lineNum":" 2518","line":"      _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2519","line":"      function(allocator_arg_t, const _Alloc&) : __f_(0) {}"},
{"lineNum":" 2520","line":"    template<class _Alloc>"},
{"lineNum":" 2521","line":"      _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2522","line":"      function(allocator_arg_t, const _Alloc&, nullptr_t) : __f_(0) {}"},
{"lineNum":" 2523","line":"    template<class _Alloc>"},
{"lineNum":" 2524","line":"      function(allocator_arg_t, const _Alloc&, const function&);"},
{"lineNum":" 2525","line":"    template<class _Fp, class _Alloc>"},
{"lineNum":" 2526","line":"      function(allocator_arg_t, const _Alloc& __a, _Fp __f,"},
{"lineNum":" 2527","line":"               typename enable_if<!is_integral<_Fp>::value>::type* = 0);"},
{"lineNum":" 2528","line":""},
{"lineNum":" 2529","line":"    function& operator=(const function&);"},
{"lineNum":" 2530","line":"    function& operator=(nullptr_t);"},
{"lineNum":" 2531","line":"    template<class _Fp>"},
{"lineNum":" 2532","line":"      typename enable_if"},
{"lineNum":" 2533","line":"      <"},
{"lineNum":" 2534","line":"        !is_integral<_Fp>::value,"},
{"lineNum":" 2535","line":"        function&"},
{"lineNum":" 2536","line":"      >::type"},
{"lineNum":" 2537","line":"      operator=(_Fp);"},
{"lineNum":" 2538","line":""},
{"lineNum":" 2539","line":"    ~function();"},
{"lineNum":" 2540","line":""},
{"lineNum":" 2541","line":"    // 20.7.16.2.2, function modifiers:"},
{"lineNum":" 2542","line":"    void swap(function&);"},
{"lineNum":" 2543","line":"    template<class _Fp, class _Alloc>"},
{"lineNum":" 2544","line":"      _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2545","line":"      void assign(_Fp __f, const _Alloc& __a)"},
{"lineNum":" 2546","line":"        {function(allocator_arg, __a, __f).swap(*this);}"},
{"lineNum":" 2547","line":""},
{"lineNum":" 2548","line":"    // 20.7.16.2.3, function capacity:"},
{"lineNum":" 2549","line":"    _LIBCPP_INLINE_VISIBILITY explicit operator bool() const {return __f_;}"},
{"lineNum":" 2550","line":""},
{"lineNum":" 2551","line":"private:"},
{"lineNum":" 2552","line":"    // deleted overloads close possible hole in the type system"},
{"lineNum":" 2553","line":"    template<class _R2, class _B0, class _B1, class _B2>"},
{"lineNum":" 2554","line":"      bool operator==(const function<_R2(_B0, _B1, _B2)>&) const;// = delete;"},
{"lineNum":" 2555","line":"    template<class _R2, class _B0, class _B1, class _B2>"},
{"lineNum":" 2556","line":"      bool operator!=(const function<_R2(_B0, _B1, _B2)>&) const;// = delete;"},
{"lineNum":" 2557","line":"public:"},
{"lineNum":" 2558","line":"    // 20.7.16.2.4, function invocation:"},
{"lineNum":" 2559","line":"    _Rp operator()(_A0, _A1, _A2) const;"},
{"lineNum":" 2560","line":""},
{"lineNum":" 2561","line":"#ifndef _LIBCPP_NO_RTTI"},
{"lineNum":" 2562","line":"    // 20.7.16.2.5, function target access:"},
{"lineNum":" 2563","line":"    const std::type_info& target_type() const;"},
{"lineNum":" 2564","line":"    template <typename _Tp> _Tp* target();"},
{"lineNum":" 2565","line":"    template <typename _Tp> const _Tp* target() const;"},
{"lineNum":" 2566","line":"#endif // _LIBCPP_NO_RTTI"},
{"lineNum":" 2567","line":"};"},
{"lineNum":" 2568","line":""},
{"lineNum":" 2569","line":"template<class _Rp, class _A0, class _A1, class _A2>"},
{"lineNum":" 2570","line":"function<_Rp(_A0, _A1, _A2)>::function(const function& __f)"},
{"lineNum":" 2571","line":"{"},
{"lineNum":" 2572","line":"    if (__f.__f_ == 0)"},
{"lineNum":" 2573","line":"        __f_ = 0;"},
{"lineNum":" 2574","line":"    else if (__f.__f_ == (const __base*)&__f.__buf_)"},
{"lineNum":" 2575","line":"    {"},
{"lineNum":" 2576","line":"        __f_ = (__base*)&__buf_;"},
{"lineNum":" 2577","line":"        __f.__f_->__clone(__f_);"},
{"lineNum":" 2578","line":"    }"},
{"lineNum":" 2579","line":"    else"},
{"lineNum":" 2580","line":"        __f_ = __f.__f_->__clone();"},
{"lineNum":" 2581","line":"}"},
{"lineNum":" 2582","line":""},
{"lineNum":" 2583","line":"template<class _Rp, class _A0, class _A1, class _A2>"},
{"lineNum":" 2584","line":"template<class _Alloc>"},
{"lineNum":" 2585","line":"function<_Rp(_A0, _A1, _A2)>::function(allocator_arg_t, const _Alloc&,"},
{"lineNum":" 2586","line":"                                      const function& __f)"},
{"lineNum":" 2587","line":"{"},
{"lineNum":" 2588","line":"    if (__f.__f_ == 0)"},
{"lineNum":" 2589","line":"        __f_ = 0;"},
{"lineNum":" 2590","line":"    else if (__f.__f_ == (const __base*)&__f.__buf_)"},
{"lineNum":" 2591","line":"    {"},
{"lineNum":" 2592","line":"        __f_ = (__base*)&__buf_;"},
{"lineNum":" 2593","line":"        __f.__f_->__clone(__f_);"},
{"lineNum":" 2594","line":"    }"},
{"lineNum":" 2595","line":"    else"},
{"lineNum":" 2596","line":"        __f_ = __f.__f_->__clone();"},
{"lineNum":" 2597","line":"}"},
{"lineNum":" 2598","line":""},
{"lineNum":" 2599","line":"template<class _Rp, class _A0, class _A1, class _A2>"},
{"lineNum":" 2600","line":"template <class _Fp>"},
{"lineNum":" 2601","line":"function<_Rp(_A0, _A1, _A2)>::function(_Fp __f,"},
{"lineNum":" 2602","line":"                                     typename enable_if<!is_integral<_Fp>::value>::type*)"},
{"lineNum":" 2603","line":"    : __f_(0)"},
{"lineNum":" 2604","line":"{"},
{"lineNum":" 2605","line":"    if (__function::__not_null(__f))"},
{"lineNum":" 2606","line":"    {"},
{"lineNum":" 2607","line":"        typedef __function::__func<_Fp, allocator<_Fp>, _Rp(_A0, _A1, _A2)> _FF;"},
{"lineNum":" 2608","line":"        if (sizeof(_FF) <= sizeof(__buf_))"},
{"lineNum":" 2609","line":"        {"},
{"lineNum":" 2610","line":"            __f_ = (__base*)&__buf_;"},
{"lineNum":" 2611","line":"            ::new ((void*)__f_) _FF(__f);"},
{"lineNum":" 2612","line":"        }"},
{"lineNum":" 2613","line":"        else"},
{"lineNum":" 2614","line":"        {"},
{"lineNum":" 2615","line":"            typedef allocator<_FF> _Ap;"},
{"lineNum":" 2616","line":"            _Ap __a;"},
{"lineNum":" 2617","line":"            typedef __allocator_destructor<_Ap> _Dp;"},
{"lineNum":" 2618","line":"            unique_ptr<__base, _Dp> __hold(__a.allocate(1), _Dp(__a, 1));"},
{"lineNum":" 2619","line":"            ::new ((void*)__hold.get()) _FF(__f, allocator<_Fp>(__a));"},
{"lineNum":" 2620","line":"            __f_ = __hold.release();"},
{"lineNum":" 2621","line":"        }"},
{"lineNum":" 2622","line":"    }"},
{"lineNum":" 2623","line":"}"},
{"lineNum":" 2624","line":""},
{"lineNum":" 2625","line":"template<class _Rp, class _A0, class _A1, class _A2>"},
{"lineNum":" 2626","line":"template <class _Fp, class _Alloc>"},
{"lineNum":" 2627","line":"function<_Rp(_A0, _A1, _A2)>::function(allocator_arg_t, const _Alloc& __a0, _Fp __f,"},
{"lineNum":" 2628","line":"                                     typename enable_if<!is_integral<_Fp>::value>::type*)"},
{"lineNum":" 2629","line":"    : __f_(0)"},
{"lineNum":" 2630","line":"{"},
{"lineNum":" 2631","line":"    typedef allocator_traits<_Alloc> __alloc_traits;"},
{"lineNum":" 2632","line":"    if (__function::__not_null(__f))"},
{"lineNum":" 2633","line":"    {"},
{"lineNum":" 2634","line":"        typedef __function::__func<_Fp, _Alloc, _Rp(_A0, _A1, _A2)> _FF;"},
{"lineNum":" 2635","line":"        if (sizeof(_FF) <= sizeof(__buf_))"},
{"lineNum":" 2636","line":"        {"},
{"lineNum":" 2637","line":"            __f_ = (__base*)&__buf_;"},
{"lineNum":" 2638","line":"            ::new ((void*)__f_) _FF(__f, __a0);"},
{"lineNum":" 2639","line":"        }"},
{"lineNum":" 2640","line":"        else"},
{"lineNum":" 2641","line":"        {"},
{"lineNum":" 2642","line":"            typedef typename __rebind_alloc_helper<__alloc_traits, _FF>::type _Ap;"},
{"lineNum":" 2643","line":"            _Ap __a(__a0);"},
{"lineNum":" 2644","line":"            typedef __allocator_destructor<_Ap> _Dp;"},
{"lineNum":" 2645","line":"            unique_ptr<__base, _Dp> __hold(__a.allocate(1), _Dp(__a, 1));"},
{"lineNum":" 2646","line":"            ::new ((void*)__hold.get()) _FF(__f, _Alloc(__a));"},
{"lineNum":" 2647","line":"            __f_ = __hold.release();"},
{"lineNum":" 2648","line":"        }"},
{"lineNum":" 2649","line":"    }"},
{"lineNum":" 2650","line":"}"},
{"lineNum":" 2651","line":""},
{"lineNum":" 2652","line":"template<class _Rp, class _A0, class _A1, class _A2>"},
{"lineNum":" 2653","line":"function<_Rp(_A0, _A1, _A2)>&"},
{"lineNum":" 2654","line":"function<_Rp(_A0, _A1, _A2)>::operator=(const function& __f)"},
{"lineNum":" 2655","line":"{"},
{"lineNum":" 2656","line":"    if (__f)"},
{"lineNum":" 2657","line":"        function(__f).swap(*this);"},
{"lineNum":" 2658","line":"    else"},
{"lineNum":" 2659","line":"        *this = nullptr;"},
{"lineNum":" 2660","line":"    return *this;"},
{"lineNum":" 2661","line":"}"},
{"lineNum":" 2662","line":""},
{"lineNum":" 2663","line":"template<class _Rp, class _A0, class _A1, class _A2>"},
{"lineNum":" 2664","line":"function<_Rp(_A0, _A1, _A2)>&"},
{"lineNum":" 2665","line":"function<_Rp(_A0, _A1, _A2)>::operator=(nullptr_t)"},
{"lineNum":" 2666","line":"{"},
{"lineNum":" 2667","line":"    __base* __t = __f_;"},
{"lineNum":" 2668","line":"    __f_ = 0;"},
{"lineNum":" 2669","line":"    if (__t == (__base*)&__buf_)"},
{"lineNum":" 2670","line":"        __t->destroy();"},
{"lineNum":" 2671","line":"    else if (__t)"},
{"lineNum":" 2672","line":"        __t->destroy_deallocate();"},
{"lineNum":" 2673","line":"    return *this;"},
{"lineNum":" 2674","line":"}"},
{"lineNum":" 2675","line":""},
{"lineNum":" 2676","line":"template<class _Rp, class _A0, class _A1, class _A2>"},
{"lineNum":" 2677","line":"template <class _Fp>"},
{"lineNum":" 2678","line":"typename enable_if"},
{"lineNum":" 2679","line":"<"},
{"lineNum":" 2680","line":"    !is_integral<_Fp>::value,"},
{"lineNum":" 2681","line":"    function<_Rp(_A0, _A1, _A2)>&"},
{"lineNum":" 2682","line":">::type"},
{"lineNum":" 2683","line":"function<_Rp(_A0, _A1, _A2)>::operator=(_Fp __f)"},
{"lineNum":" 2684","line":"{"},
{"lineNum":" 2685","line":"    function(_VSTD::move(__f)).swap(*this);"},
{"lineNum":" 2686","line":"    return *this;"},
{"lineNum":" 2687","line":"}"},
{"lineNum":" 2688","line":""},
{"lineNum":" 2689","line":"template<class _Rp, class _A0, class _A1, class _A2>"},
{"lineNum":" 2690","line":"function<_Rp(_A0, _A1, _A2)>::~function()"},
{"lineNum":" 2691","line":"{"},
{"lineNum":" 2692","line":"    if (__f_ == (__base*)&__buf_)"},
{"lineNum":" 2693","line":"        __f_->destroy();"},
{"lineNum":" 2694","line":"    else if (__f_)"},
{"lineNum":" 2695","line":"        __f_->destroy_deallocate();"},
{"lineNum":" 2696","line":"}"},
{"lineNum":" 2697","line":""},
{"lineNum":" 2698","line":"template<class _Rp, class _A0, class _A1, class _A2>"},
{"lineNum":" 2699","line":"void"},
{"lineNum":" 2700","line":"function<_Rp(_A0, _A1, _A2)>::swap(function& __f)"},
{"lineNum":" 2701","line":"{"},
{"lineNum":" 2702","line":"    if (_VSTD::addressof(__f) == this)"},
{"lineNum":" 2703","line":"      return;"},
{"lineNum":" 2704","line":"    if (__f_ == (__base*)&__buf_ && __f.__f_ == (__base*)&__f.__buf_)"},
{"lineNum":" 2705","line":"    {"},
{"lineNum":" 2706","line":"        typename aligned_storage<sizeof(__buf_)>::type __tempbuf;"},
{"lineNum":" 2707","line":"        __base* __t = (__base*)&__tempbuf;"},
{"lineNum":" 2708","line":"        __f_->__clone(__t);"},
{"lineNum":" 2709","line":"        __f_->destroy();"},
{"lineNum":" 2710","line":"        __f_ = 0;"},
{"lineNum":" 2711","line":"        __f.__f_->__clone((__base*)&__buf_);"},
{"lineNum":" 2712","line":"        __f.__f_->destroy();"},
{"lineNum":" 2713","line":"        __f.__f_ = 0;"},
{"lineNum":" 2714","line":"        __f_ = (__base*)&__buf_;"},
{"lineNum":" 2715","line":"        __t->__clone((__base*)&__f.__buf_);"},
{"lineNum":" 2716","line":"        __t->destroy();"},
{"lineNum":" 2717","line":"        __f.__f_ = (__base*)&__f.__buf_;"},
{"lineNum":" 2718","line":"    }"},
{"lineNum":" 2719","line":"    else if (__f_ == (__base*)&__buf_)"},
{"lineNum":" 2720","line":"    {"},
{"lineNum":" 2721","line":"        __f_->__clone((__base*)&__f.__buf_);"},
{"lineNum":" 2722","line":"        __f_->destroy();"},
{"lineNum":" 2723","line":"        __f_ = __f.__f_;"},
{"lineNum":" 2724","line":"        __f.__f_ = (__base*)&__f.__buf_;"},
{"lineNum":" 2725","line":"    }"},
{"lineNum":" 2726","line":"    else if (__f.__f_ == (__base*)&__f.__buf_)"},
{"lineNum":" 2727","line":"    {"},
{"lineNum":" 2728","line":"        __f.__f_->__clone((__base*)&__buf_);"},
{"lineNum":" 2729","line":"        __f.__f_->destroy();"},
{"lineNum":" 2730","line":"        __f.__f_ = __f_;"},
{"lineNum":" 2731","line":"        __f_ = (__base*)&__buf_;"},
{"lineNum":" 2732","line":"    }"},
{"lineNum":" 2733","line":"    else"},
{"lineNum":" 2734","line":"        _VSTD::swap(__f_, __f.__f_);"},
{"lineNum":" 2735","line":"}"},
{"lineNum":" 2736","line":""},
{"lineNum":" 2737","line":"template<class _Rp, class _A0, class _A1, class _A2>"},
{"lineNum":" 2738","line":"_Rp"},
{"lineNum":" 2739","line":"function<_Rp(_A0, _A1, _A2)>::operator()(_A0 __a0, _A1 __a1, _A2 __a2) const"},
{"lineNum":" 2740","line":"{"},
{"lineNum":" 2741","line":"    if (__f_ == 0)"},
{"lineNum":" 2742","line":"        __throw_bad_function_call();"},
{"lineNum":" 2743","line":"    return (*__f_)(__a0, __a1, __a2);"},
{"lineNum":" 2744","line":"}"},
{"lineNum":" 2745","line":""},
{"lineNum":" 2746","line":"#ifndef _LIBCPP_NO_RTTI"},
{"lineNum":" 2747","line":""},
{"lineNum":" 2748","line":"template<class _Rp, class _A0, class _A1, class _A2>"},
{"lineNum":" 2749","line":"const std::type_info&"},
{"lineNum":" 2750","line":"function<_Rp(_A0, _A1, _A2)>::target_type() const"},
{"lineNum":" 2751","line":"{"},
{"lineNum":" 2752","line":"    if (__f_ == 0)"},
{"lineNum":" 2753","line":"        return typeid(void);"},
{"lineNum":" 2754","line":"    return __f_->target_type();"},
{"lineNum":" 2755","line":"}"},
{"lineNum":" 2756","line":""},
{"lineNum":" 2757","line":"template<class _Rp, class _A0, class _A1, class _A2>"},
{"lineNum":" 2758","line":"template <typename _Tp>"},
{"lineNum":" 2759","line":"_Tp*"},
{"lineNum":" 2760","line":"function<_Rp(_A0, _A1, _A2)>::target()"},
{"lineNum":" 2761","line":"{"},
{"lineNum":" 2762","line":"    if (__f_ == 0)"},
{"lineNum":" 2763","line":"        return (_Tp*)0;"},
{"lineNum":" 2764","line":"    return (_Tp*) const_cast<void *>(__f_->target(typeid(_Tp)));"},
{"lineNum":" 2765","line":"}"},
{"lineNum":" 2766","line":""},
{"lineNum":" 2767","line":"template<class _Rp, class _A0, class _A1, class _A2>"},
{"lineNum":" 2768","line":"template <typename _Tp>"},
{"lineNum":" 2769","line":"const _Tp*"},
{"lineNum":" 2770","line":"function<_Rp(_A0, _A1, _A2)>::target() const"},
{"lineNum":" 2771","line":"{"},
{"lineNum":" 2772","line":"    if (__f_ == 0)"},
{"lineNum":" 2773","line":"        return (const _Tp*)0;"},
{"lineNum":" 2774","line":"    return (const _Tp*)__f_->target(typeid(_Tp));"},
{"lineNum":" 2775","line":"}"},
{"lineNum":" 2776","line":""},
{"lineNum":" 2777","line":"#endif // _LIBCPP_NO_RTTI"},
{"lineNum":" 2778","line":""},
{"lineNum":" 2779","line":"template <class _Fp>"},
{"lineNum":" 2780","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2781","line":"bool"},
{"lineNum":" 2782","line":"operator==(const function<_Fp>& __f, nullptr_t) {return !__f;}"},
{"lineNum":" 2783","line":""},
{"lineNum":" 2784","line":"template <class _Fp>"},
{"lineNum":" 2785","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2786","line":"bool"},
{"lineNum":" 2787","line":"operator==(nullptr_t, const function<_Fp>& __f) {return !__f;}"},
{"lineNum":" 2788","line":""},
{"lineNum":" 2789","line":"template <class _Fp>"},
{"lineNum":" 2790","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2791","line":"bool"},
{"lineNum":" 2792","line":"operator!=(const function<_Fp>& __f, nullptr_t) {return (bool)__f;}"},
{"lineNum":" 2793","line":""},
{"lineNum":" 2794","line":"template <class _Fp>"},
{"lineNum":" 2795","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2796","line":"bool"},
{"lineNum":" 2797","line":"operator!=(nullptr_t, const function<_Fp>& __f) {return (bool)__f;}"},
{"lineNum":" 2798","line":""},
{"lineNum":" 2799","line":"template <class _Fp>"},
{"lineNum":" 2800","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2801","line":"void"},
{"lineNum":" 2802","line":"swap(function<_Fp>& __x, function<_Fp>& __y)"},
{"lineNum":" 2803","line":"{return __x.swap(__y);}"},
{"lineNum":" 2804","line":""},
{"lineNum":" 2805","line":"#endif"},
{"lineNum":" 2806","line":""},
{"lineNum":" 2807","line":"_LIBCPP_END_NAMESPACE_STD"},
{"lineNum":" 2808","line":""},
{"lineNum":" 2809","line":"#endif // _LIBCPP___FUNCTIONAL_FUNCTION_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 93, "covered" : 35,};
var merged_data = [];
