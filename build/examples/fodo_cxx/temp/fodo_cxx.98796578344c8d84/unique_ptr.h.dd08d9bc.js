var data = {lines:[
{"lineNum":"    1","line":"// -*- C++ -*-"},
{"lineNum":"    2","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions."},
{"lineNum":"    5","line":"// See https://llvm.org/LICENSE.txt for license information."},
{"lineNum":"    6","line":"// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef _LIBCPP___MEMORY_UNIQUE_PTR_H"},
{"lineNum":"   11","line":"#define _LIBCPP___MEMORY_UNIQUE_PTR_H"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"#include <__config>"},
{"lineNum":"   14","line":"#include <__functional_base>"},
{"lineNum":"   15","line":"#include <__functional/hash.h>"},
{"lineNum":"   16","line":"#include <__functional/operations.h>"},
{"lineNum":"   17","line":"#include <__memory/allocator_traits.h> // __pointer"},
{"lineNum":"   18","line":"#include <__memory/compressed_pair.h>"},
{"lineNum":"   19","line":"#include <__utility/forward.h>"},
{"lineNum":"   20","line":"#include <cstddef>"},
{"lineNum":"   21","line":"#include <type_traits>"},
{"lineNum":"   22","line":"#include <utility>"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)"},
{"lineNum":"   25","line":"#   include <__memory/auto_ptr.h>"},
{"lineNum":"   26","line":"#endif"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"},
{"lineNum":"   29","line":"#pragma GCC system_header"},
{"lineNum":"   30","line":"#endif"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"_LIBCPP_PUSH_MACROS"},
{"lineNum":"   33","line":"#include <__undef_macros>"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"_LIBCPP_BEGIN_NAMESPACE_STD"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"template <class _Tp>"},
{"lineNum":"   38","line":"struct _LIBCPP_TEMPLATE_VIS default_delete {"},
{"lineNum":"   39","line":"    static_assert(!is_function<_Tp>::value,"},
{"lineNum":"   40","line":"                  \"default_delete cannot be instantiated for function types\");"},
{"lineNum":"   41","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"   42","line":"  _LIBCPP_INLINE_VISIBILITY constexpr default_delete() _NOEXCEPT = default;"},
{"lineNum":"   43","line":"#else"},
{"lineNum":"   44","line":"  _LIBCPP_INLINE_VISIBILITY default_delete() {}"},
{"lineNum":"   45","line":"#endif"},
{"lineNum":"   46","line":"  template <class _Up>"},
{"lineNum":"   47","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"   48","line":"  default_delete(const default_delete<_Up>&,"},
{"lineNum":"   49","line":"                 typename enable_if<is_convertible<_Up*, _Tp*>::value>::type* ="},
{"lineNum":"   50","line":"                     0) _NOEXCEPT {}"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"  _LIBCPP_INLINE_VISIBILITY void operator()(_Tp* __ptr) const _NOEXCEPT {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   53","line":"    static_assert(sizeof(_Tp) > 0,"},
{"lineNum":"   54","line":"                  \"default_delete can not delete incomplete type\");"},
{"lineNum":"   55","line":"    static_assert(!is_void<_Tp>::value,"},
{"lineNum":"   56","line":"                  \"default_delete can not delete incomplete type\");"},
{"lineNum":"   57","line":"    delete __ptr;","class":"lineNoCov","hits":"0","possible_hits":"340",},
{"lineNum":"   58","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   59","line":"};"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"template <class _Tp>"},
{"lineNum":"   62","line":"struct _LIBCPP_TEMPLATE_VIS default_delete<_Tp[]> {"},
{"lineNum":"   63","line":"private:"},
{"lineNum":"   64","line":"  template <class _Up>"},
{"lineNum":"   65","line":"  struct _EnableIfConvertible"},
{"lineNum":"   66","line":"      : enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value> {};"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"public:"},
{"lineNum":"   69","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"   70","line":"  _LIBCPP_INLINE_VISIBILITY constexpr default_delete() _NOEXCEPT = default;"},
{"lineNum":"   71","line":"#else"},
{"lineNum":"   72","line":"  _LIBCPP_INLINE_VISIBILITY default_delete() {}"},
{"lineNum":"   73","line":"#endif"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"  template <class _Up>"},
{"lineNum":"   76","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"   77","line":"  default_delete(const default_delete<_Up[]>&,"},
{"lineNum":"   78","line":"                 typename _EnableIfConvertible<_Up>::type* = 0) _NOEXCEPT {}"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"  template <class _Up>"},
{"lineNum":"   81","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"   82","line":"  typename _EnableIfConvertible<_Up>::type"},
{"lineNum":"   83","line":"  operator()(_Up* __ptr) const _NOEXCEPT {"},
{"lineNum":"   84","line":"    static_assert(sizeof(_Tp) > 0,"},
{"lineNum":"   85","line":"                  \"default_delete can not delete incomplete type\");"},
{"lineNum":"   86","line":"    static_assert(!is_void<_Tp>::value,"},
{"lineNum":"   87","line":"                  \"default_delete can not delete void type\");"},
{"lineNum":"   88","line":"    delete[] __ptr;"},
{"lineNum":"   89","line":"  }"},
{"lineNum":"   90","line":"};"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"template <class _Deleter>"},
{"lineNum":"   93","line":"struct __unique_ptr_deleter_sfinae {"},
{"lineNum":"   94","line":"  static_assert(!is_reference<_Deleter>::value, \"incorrect specialization\");"},
{"lineNum":"   95","line":"  typedef const _Deleter& __lval_ref_type;"},
{"lineNum":"   96","line":"  typedef _Deleter&& __good_rval_ref_type;"},
{"lineNum":"   97","line":"  typedef true_type __enable_rval_overload;"},
{"lineNum":"   98","line":"};"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"template <class _Deleter>"},
{"lineNum":"  101","line":"struct __unique_ptr_deleter_sfinae<_Deleter const&> {"},
{"lineNum":"  102","line":"  typedef const _Deleter& __lval_ref_type;"},
{"lineNum":"  103","line":"  typedef const _Deleter&& __bad_rval_ref_type;"},
{"lineNum":"  104","line":"  typedef false_type __enable_rval_overload;"},
{"lineNum":"  105","line":"};"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"template <class _Deleter>"},
{"lineNum":"  108","line":"struct __unique_ptr_deleter_sfinae<_Deleter&> {"},
{"lineNum":"  109","line":"  typedef _Deleter& __lval_ref_type;"},
{"lineNum":"  110","line":"  typedef _Deleter&& __bad_rval_ref_type;"},
{"lineNum":"  111","line":"  typedef false_type __enable_rval_overload;"},
{"lineNum":"  112","line":"};"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"#if defined(_LIBCPP_ABI_ENABLE_UNIQUE_PTR_TRIVIAL_ABI)"},
{"lineNum":"  115","line":"#  define _LIBCPP_UNIQUE_PTR_TRIVIAL_ABI __attribute__((trivial_abi))"},
{"lineNum":"  116","line":"#else"},
{"lineNum":"  117","line":"#  define _LIBCPP_UNIQUE_PTR_TRIVIAL_ABI"},
{"lineNum":"  118","line":"#endif"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"template <class _Tp, class _Dp = default_delete<_Tp> >"},
{"lineNum":"  121","line":"class _LIBCPP_UNIQUE_PTR_TRIVIAL_ABI _LIBCPP_TEMPLATE_VIS unique_ptr {"},
{"lineNum":"  122","line":"public:"},
{"lineNum":"  123","line":"  typedef _Tp element_type;"},
{"lineNum":"  124","line":"  typedef _Dp deleter_type;"},
{"lineNum":"  125","line":"  typedef _LIBCPP_NODEBUG_TYPE typename __pointer<_Tp, deleter_type>::type pointer;"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"  static_assert(!is_rvalue_reference<deleter_type>::value,"},
{"lineNum":"  128","line":"                \"the specified deleter type cannot be an rvalue reference\");"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"private:"},
{"lineNum":"  131","line":"  __compressed_pair<pointer, deleter_type> __ptr_;"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"  struct __nat { int __for_bool_; };"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"  typedef _LIBCPP_NODEBUG_TYPE __unique_ptr_deleter_sfinae<_Dp> _DeleterSFINAE;"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"  template <bool _Dummy>"},
{"lineNum":"  138","line":"  using _LValRefType _LIBCPP_NODEBUG_TYPE ="},
{"lineNum":"  139","line":"      typename __dependent_type<_DeleterSFINAE, _Dummy>::__lval_ref_type;"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"  template <bool _Dummy>"},
{"lineNum":"  142","line":"  using _GoodRValRefType _LIBCPP_NODEBUG_TYPE ="},
{"lineNum":"  143","line":"      typename __dependent_type<_DeleterSFINAE, _Dummy>::__good_rval_ref_type;"},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"  template <bool _Dummy>"},
{"lineNum":"  146","line":"  using _BadRValRefType _LIBCPP_NODEBUG_TYPE  ="},
{"lineNum":"  147","line":"      typename __dependent_type<_DeleterSFINAE, _Dummy>::__bad_rval_ref_type;"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"  template <bool _Dummy, class _Deleter = typename __dependent_type<"},
{"lineNum":"  150","line":"                             __identity<deleter_type>, _Dummy>::type>"},
{"lineNum":"  151","line":"  using _EnableIfDeleterDefaultConstructible _LIBCPP_NODEBUG_TYPE ="},
{"lineNum":"  152","line":"      typename enable_if<is_default_constructible<_Deleter>::value &&"},
{"lineNum":"  153","line":"                         !is_pointer<_Deleter>::value>::type;"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"  template <class _ArgType>"},
{"lineNum":"  156","line":"  using _EnableIfDeleterConstructible _LIBCPP_NODEBUG_TYPE  ="},
{"lineNum":"  157","line":"      typename enable_if<is_constructible<deleter_type, _ArgType>::value>::type;"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"  template <class _UPtr, class _Up>"},
{"lineNum":"  160","line":"  using _EnableIfMoveConvertible _LIBCPP_NODEBUG_TYPE  = typename enable_if<"},
{"lineNum":"  161","line":"      is_convertible<typename _UPtr::pointer, pointer>::value &&"},
{"lineNum":"  162","line":"      !is_array<_Up>::value"},
{"lineNum":"  163","line":"  >::type;"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"  template <class _UDel>"},
{"lineNum":"  166","line":"  using _EnableIfDeleterConvertible _LIBCPP_NODEBUG_TYPE  = typename enable_if<"},
{"lineNum":"  167","line":"      (is_reference<_Dp>::value && is_same<_Dp, _UDel>::value) ||"},
{"lineNum":"  168","line":"      (!is_reference<_Dp>::value && is_convertible<_UDel, _Dp>::value)"},
{"lineNum":"  169","line":"    >::type;"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"  template <class _UDel>"},
{"lineNum":"  172","line":"  using _EnableIfDeleterAssignable = typename enable_if<"},
{"lineNum":"  173","line":"      is_assignable<_Dp&, _UDel&&>::value"},
{"lineNum":"  174","line":"    >::type;"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"public:"},
{"lineNum":"  177","line":"  template <bool _Dummy = true,"},
{"lineNum":"  178","line":"            class = _EnableIfDeleterDefaultConstructible<_Dummy> >"},
{"lineNum":"  179","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  180","line":"  _LIBCPP_CONSTEXPR unique_ptr() _NOEXCEPT : __ptr_(pointer(), __default_init_tag()) {}"},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"  template <bool _Dummy = true,"},
{"lineNum":"  183","line":"            class = _EnableIfDeleterDefaultConstructible<_Dummy> >"},
{"lineNum":"  184","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  185","line":"  _LIBCPP_CONSTEXPR unique_ptr(nullptr_t) _NOEXCEPT : __ptr_(pointer(), __default_init_tag()) {}"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"  template <bool _Dummy = true,"},
{"lineNum":"  188","line":"            class = _EnableIfDeleterDefaultConstructible<_Dummy> >"},
{"lineNum":"  189","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  190","line":"  explicit unique_ptr(pointer __p) _NOEXCEPT : __ptr_(__p, __default_init_tag()) {}"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"  template <bool _Dummy = true,"},
{"lineNum":"  193","line":"            class = _EnableIfDeleterConstructible<_LValRefType<_Dummy> > >"},
{"lineNum":"  194","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  195","line":"  unique_ptr(pointer __p, _LValRefType<_Dummy> __d) _NOEXCEPT"},
{"lineNum":"  196","line":"      : __ptr_(__p, __d) {}"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"  template <bool _Dummy = true,"},
{"lineNum":"  199","line":"            class = _EnableIfDeleterConstructible<_GoodRValRefType<_Dummy> > >"},
{"lineNum":"  200","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  201","line":"  unique_ptr(pointer __p, _GoodRValRefType<_Dummy> __d) _NOEXCEPT"},
{"lineNum":"  202","line":"      : __ptr_(__p, _VSTD::move(__d)) {"},
{"lineNum":"  203","line":"    static_assert(!is_reference<deleter_type>::value,"},
{"lineNum":"  204","line":"                  \"rvalue deleter bound to reference\");"},
{"lineNum":"  205","line":"  }"},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"  template <bool _Dummy = true,"},
{"lineNum":"  208","line":"            class = _EnableIfDeleterConstructible<_BadRValRefType<_Dummy> > >"},
{"lineNum":"  209","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  210","line":"  unique_ptr(pointer __p, _BadRValRefType<_Dummy> __d) = delete;"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  213","line":"  unique_ptr(unique_ptr&& __u) _NOEXCEPT"},
{"lineNum":"  214","line":"      : __ptr_(__u.release(), _VSTD::forward<deleter_type>(__u.get_deleter())) {"},
{"lineNum":"  215","line":"  }"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"  template <class _Up, class _Ep,"},
{"lineNum":"  218","line":"      class = _EnableIfMoveConvertible<unique_ptr<_Up, _Ep>, _Up>,"},
{"lineNum":"  219","line":"      class = _EnableIfDeleterConvertible<_Ep>"},
{"lineNum":"  220","line":"  >"},
{"lineNum":"  221","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  222","line":"  unique_ptr(unique_ptr<_Up, _Ep>&& __u) _NOEXCEPT"},
{"lineNum":"  223","line":"      : __ptr_(__u.release(), _VSTD::forward<_Ep>(__u.get_deleter())) {}"},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)"},
{"lineNum":"  226","line":"  template <class _Up>"},
{"lineNum":"  227","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  228","line":"  unique_ptr(auto_ptr<_Up>&& __p,"},
{"lineNum":"  229","line":"             typename enable_if<is_convertible<_Up*, _Tp*>::value &&"},
{"lineNum":"  230","line":"                                    is_same<_Dp, default_delete<_Tp> >::value,"},
{"lineNum":"  231","line":"                                __nat>::type = __nat()) _NOEXCEPT"},
{"lineNum":"  232","line":"      : __ptr_(__p.release(), __default_init_tag()) {}"},
{"lineNum":"  233","line":"#endif"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  236","line":"  unique_ptr& operator=(unique_ptr&& __u) _NOEXCEPT {","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  237","line":"    reset(__u.release());"},
{"lineNum":"  238","line":"    __ptr_.second() = _VSTD::forward<deleter_type>(__u.get_deleter());"},
{"lineNum":"  239","line":"    return *this;","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":"  240","line":"  }"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"  template <class _Up, class _Ep,"},
{"lineNum":"  243","line":"      class = _EnableIfMoveConvertible<unique_ptr<_Up, _Ep>, _Up>,"},
{"lineNum":"  244","line":"      class = _EnableIfDeleterAssignable<_Ep>"},
{"lineNum":"  245","line":"  >"},
{"lineNum":"  246","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  247","line":"  unique_ptr& operator=(unique_ptr<_Up, _Ep>&& __u) _NOEXCEPT {"},
{"lineNum":"  248","line":"    reset(__u.release());"},
{"lineNum":"  249","line":"    __ptr_.second() = _VSTD::forward<_Ep>(__u.get_deleter());"},
{"lineNum":"  250","line":"    return *this;"},
{"lineNum":"  251","line":"  }"},
{"lineNum":"  252","line":""},
{"lineNum":"  253","line":"#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)"},
{"lineNum":"  254","line":"  template <class _Up>"},
{"lineNum":"  255","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  256","line":"      typename enable_if<is_convertible<_Up*, _Tp*>::value &&"},
{"lineNum":"  257","line":"                             is_same<_Dp, default_delete<_Tp> >::value,"},
{"lineNum":"  258","line":"                         unique_ptr&>::type"},
{"lineNum":"  259","line":"      operator=(auto_ptr<_Up> __p) {"},
{"lineNum":"  260","line":"    reset(__p.release());"},
{"lineNum":"  261","line":"    return *this;"},
{"lineNum":"  262","line":"  }"},
{"lineNum":"  263","line":"#endif"},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"#ifdef _LIBCPP_CXX03_LANG"},
{"lineNum":"  266","line":"  unique_ptr(unique_ptr const&) = delete;"},
{"lineNum":"  267","line":"  unique_ptr& operator=(unique_ptr const&) = delete;"},
{"lineNum":"  268","line":"#endif"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  272","line":"  ~unique_ptr() { reset(); }","class":"lineNoCov","hits":"0","possible_hits":"268",},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  275","line":"  unique_ptr& operator=(nullptr_t) _NOEXCEPT {"},
{"lineNum":"  276","line":"    reset();"},
{"lineNum":"  277","line":"    return *this;"},
{"lineNum":"  278","line":"  }"},
{"lineNum":"  279","line":""},
{"lineNum":"  280","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  281","line":"  typename add_lvalue_reference<_Tp>::type"},
{"lineNum":"  282","line":"  operator*() const {"},
{"lineNum":"  283","line":"    return *__ptr_.first();","class":"lineNoCov","hits":"0","possible_hits":"67",},
{"lineNum":"  284","line":"  }"},
{"lineNum":"  285","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  286","line":"  pointer operator->() const _NOEXCEPT {"},
{"lineNum":"  287","line":"    return __ptr_.first();","class":"linePartCov","hits":"12","order":"157","possible_hits":"75",},
{"lineNum":"  288","line":"  }"},
{"lineNum":"  289","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  290","line":"  pointer get() const _NOEXCEPT {"},
{"lineNum":"  291","line":"    return __ptr_.first();","class":"linePartCov","hits":"14","order":"81","possible_hits":"57",},
{"lineNum":"  292","line":"  }"},
{"lineNum":"  293","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  294","line":"  deleter_type& get_deleter() _NOEXCEPT {"},
{"lineNum":"  295","line":"    return __ptr_.second();"},
{"lineNum":"  296","line":"  }"},
{"lineNum":"  297","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  298","line":"  const deleter_type& get_deleter() const _NOEXCEPT {"},
{"lineNum":"  299","line":"    return __ptr_.second();"},
{"lineNum":"  300","line":"  }"},
{"lineNum":"  301","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  302","line":"  explicit operator bool() const _NOEXCEPT {"},
{"lineNum":"  303","line":"    return __ptr_.first() != nullptr;","class":"lineNoCov","hits":"0","possible_hits":"93",},
{"lineNum":"  304","line":"  }"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  307","line":"  pointer release() _NOEXCEPT {"},
{"lineNum":"  308","line":"    pointer __t = __ptr_.first();","class":"linePartCov","hits":"10","order":"91","possible_hits":"142",},
{"lineNum":"  309","line":"    __ptr_.first() = pointer();","class":"linePartCov","hits":"1","order":"264","possible_hits":"114",},
{"lineNum":"  310","line":"    return __t;"},
{"lineNum":"  311","line":"  }"},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  314","line":"  void reset(pointer __p = pointer()) _NOEXCEPT {","class":"lineNoCov","hits":"0","possible_hits":"126",},
{"lineNum":"  315","line":"    pointer __tmp = __ptr_.first();","class":"lineNoCov","hits":"0","possible_hits":"499",},
{"lineNum":"  316","line":"    __ptr_.first() = __p;","class":"lineNoCov","hits":"0","possible_hits":"596",},
{"lineNum":"  317","line":"    if (__tmp)","class":"lineNoCov","hits":"0","possible_hits":"528",},
{"lineNum":"  318","line":"      __ptr_.second()(__tmp);","class":"lineNoCov","hits":"0","possible_hits":"269",},
{"lineNum":"  319","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"252",},
{"lineNum":"  320","line":""},
{"lineNum":"  321","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  322","line":"  void swap(unique_ptr& __u) _NOEXCEPT {"},
{"lineNum":"  323","line":"    __ptr_.swap(__u.__ptr_);"},
{"lineNum":"  324","line":"  }"},
{"lineNum":"  325","line":"};"},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":""},
{"lineNum":"  328","line":"template <class _Tp, class _Dp>"},
{"lineNum":"  329","line":"class _LIBCPP_UNIQUE_PTR_TRIVIAL_ABI _LIBCPP_TEMPLATE_VIS unique_ptr<_Tp[], _Dp> {"},
{"lineNum":"  330","line":"public:"},
{"lineNum":"  331","line":"  typedef _Tp element_type;"},
{"lineNum":"  332","line":"  typedef _Dp deleter_type;"},
{"lineNum":"  333","line":"  typedef typename __pointer<_Tp, deleter_type>::type pointer;"},
{"lineNum":"  334","line":""},
{"lineNum":"  335","line":"private:"},
{"lineNum":"  336","line":"  __compressed_pair<pointer, deleter_type> __ptr_;"},
{"lineNum":"  337","line":""},
{"lineNum":"  338","line":"  template <class _From>"},
{"lineNum":"  339","line":"  struct _CheckArrayPointerConversion : is_same<_From, pointer> {};"},
{"lineNum":"  340","line":""},
{"lineNum":"  341","line":"  template <class _FromElem>"},
{"lineNum":"  342","line":"  struct _CheckArrayPointerConversion<_FromElem*>"},
{"lineNum":"  343","line":"      : integral_constant<bool,"},
{"lineNum":"  344","line":"          is_same<_FromElem*, pointer>::value ||"},
{"lineNum":"  345","line":"            (is_same<pointer, element_type*>::value &&"},
{"lineNum":"  346","line":"             is_convertible<_FromElem(*)[], element_type(*)[]>::value)"},
{"lineNum":"  347","line":"      >"},
{"lineNum":"  348","line":"  {};"},
{"lineNum":"  349","line":""},
{"lineNum":"  350","line":"  typedef __unique_ptr_deleter_sfinae<_Dp> _DeleterSFINAE;"},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"  template <bool _Dummy>"},
{"lineNum":"  353","line":"  using _LValRefType _LIBCPP_NODEBUG_TYPE ="},
{"lineNum":"  354","line":"      typename __dependent_type<_DeleterSFINAE, _Dummy>::__lval_ref_type;"},
{"lineNum":"  355","line":""},
{"lineNum":"  356","line":"  template <bool _Dummy>"},
{"lineNum":"  357","line":"  using _GoodRValRefType _LIBCPP_NODEBUG_TYPE ="},
{"lineNum":"  358","line":"      typename __dependent_type<_DeleterSFINAE, _Dummy>::__good_rval_ref_type;"},
{"lineNum":"  359","line":""},
{"lineNum":"  360","line":"  template <bool _Dummy>"},
{"lineNum":"  361","line":"  using _BadRValRefType _LIBCPP_NODEBUG_TYPE ="},
{"lineNum":"  362","line":"      typename __dependent_type<_DeleterSFINAE, _Dummy>::__bad_rval_ref_type;"},
{"lineNum":"  363","line":""},
{"lineNum":"  364","line":"  template <bool _Dummy, class _Deleter = typename __dependent_type<"},
{"lineNum":"  365","line":"                             __identity<deleter_type>, _Dummy>::type>"},
{"lineNum":"  366","line":"  using _EnableIfDeleterDefaultConstructible _LIBCPP_NODEBUG_TYPE  ="},
{"lineNum":"  367","line":"      typename enable_if<is_default_constructible<_Deleter>::value &&"},
{"lineNum":"  368","line":"                         !is_pointer<_Deleter>::value>::type;"},
{"lineNum":"  369","line":""},
{"lineNum":"  370","line":"  template <class _ArgType>"},
{"lineNum":"  371","line":"  using _EnableIfDeleterConstructible _LIBCPP_NODEBUG_TYPE  ="},
{"lineNum":"  372","line":"      typename enable_if<is_constructible<deleter_type, _ArgType>::value>::type;"},
{"lineNum":"  373","line":""},
{"lineNum":"  374","line":"  template <class _Pp>"},
{"lineNum":"  375","line":"  using _EnableIfPointerConvertible _LIBCPP_NODEBUG_TYPE  = typename enable_if<"},
{"lineNum":"  376","line":"      _CheckArrayPointerConversion<_Pp>::value"},
{"lineNum":"  377","line":"  >::type;"},
{"lineNum":"  378","line":""},
{"lineNum":"  379","line":"  template <class _UPtr, class _Up,"},
{"lineNum":"  380","line":"        class _ElemT = typename _UPtr::element_type>"},
{"lineNum":"  381","line":"  using _EnableIfMoveConvertible _LIBCPP_NODEBUG_TYPE  = typename enable_if<"},
{"lineNum":"  382","line":"      is_array<_Up>::value &&"},
{"lineNum":"  383","line":"      is_same<pointer, element_type*>::value &&"},
{"lineNum":"  384","line":"      is_same<typename _UPtr::pointer, _ElemT*>::value &&"},
{"lineNum":"  385","line":"      is_convertible<_ElemT(*)[], element_type(*)[]>::value"},
{"lineNum":"  386","line":"    >::type;"},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"  template <class _UDel>"},
{"lineNum":"  389","line":"  using _EnableIfDeleterConvertible _LIBCPP_NODEBUG_TYPE  = typename enable_if<"},
{"lineNum":"  390","line":"      (is_reference<_Dp>::value && is_same<_Dp, _UDel>::value) ||"},
{"lineNum":"  391","line":"      (!is_reference<_Dp>::value && is_convertible<_UDel, _Dp>::value)"},
{"lineNum":"  392","line":"    >::type;"},
{"lineNum":"  393","line":""},
{"lineNum":"  394","line":"  template <class _UDel>"},
{"lineNum":"  395","line":"  using _EnableIfDeleterAssignable _LIBCPP_NODEBUG_TYPE  = typename enable_if<"},
{"lineNum":"  396","line":"      is_assignable<_Dp&, _UDel&&>::value"},
{"lineNum":"  397","line":"    >::type;"},
{"lineNum":"  398","line":""},
{"lineNum":"  399","line":"public:"},
{"lineNum":"  400","line":"  template <bool _Dummy = true,"},
{"lineNum":"  401","line":"            class = _EnableIfDeleterDefaultConstructible<_Dummy> >"},
{"lineNum":"  402","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  403","line":"  _LIBCPP_CONSTEXPR unique_ptr() _NOEXCEPT : __ptr_(pointer(), __default_init_tag()) {}"},
{"lineNum":"  404","line":""},
{"lineNum":"  405","line":"  template <bool _Dummy = true,"},
{"lineNum":"  406","line":"            class = _EnableIfDeleterDefaultConstructible<_Dummy> >"},
{"lineNum":"  407","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  408","line":"  _LIBCPP_CONSTEXPR unique_ptr(nullptr_t) _NOEXCEPT : __ptr_(pointer(), __default_init_tag()) {}"},
{"lineNum":"  409","line":""},
{"lineNum":"  410","line":"  template <class _Pp, bool _Dummy = true,"},
{"lineNum":"  411","line":"            class = _EnableIfDeleterDefaultConstructible<_Dummy>,"},
{"lineNum":"  412","line":"            class = _EnableIfPointerConvertible<_Pp> >"},
{"lineNum":"  413","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  414","line":"  explicit unique_ptr(_Pp __p) _NOEXCEPT"},
{"lineNum":"  415","line":"      : __ptr_(__p, __default_init_tag()) {}"},
{"lineNum":"  416","line":""},
{"lineNum":"  417","line":"  template <class _Pp, bool _Dummy = true,"},
{"lineNum":"  418","line":"            class = _EnableIfDeleterConstructible<_LValRefType<_Dummy> >,"},
{"lineNum":"  419","line":"            class = _EnableIfPointerConvertible<_Pp> >"},
{"lineNum":"  420","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  421","line":"  unique_ptr(_Pp __p, _LValRefType<_Dummy> __d) _NOEXCEPT"},
{"lineNum":"  422","line":"      : __ptr_(__p, __d) {}"},
{"lineNum":"  423","line":""},
{"lineNum":"  424","line":"  template <bool _Dummy = true,"},
{"lineNum":"  425","line":"            class = _EnableIfDeleterConstructible<_LValRefType<_Dummy> > >"},
{"lineNum":"  426","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  427","line":"  unique_ptr(nullptr_t, _LValRefType<_Dummy> __d) _NOEXCEPT"},
{"lineNum":"  428","line":"      : __ptr_(nullptr, __d) {}"},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":"  template <class _Pp, bool _Dummy = true,"},
{"lineNum":"  431","line":"            class = _EnableIfDeleterConstructible<_GoodRValRefType<_Dummy> >,"},
{"lineNum":"  432","line":"            class = _EnableIfPointerConvertible<_Pp> >"},
{"lineNum":"  433","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  434","line":"  unique_ptr(_Pp __p, _GoodRValRefType<_Dummy> __d) _NOEXCEPT"},
{"lineNum":"  435","line":"      : __ptr_(__p, _VSTD::move(__d)) {"},
{"lineNum":"  436","line":"    static_assert(!is_reference<deleter_type>::value,"},
{"lineNum":"  437","line":"                  \"rvalue deleter bound to reference\");"},
{"lineNum":"  438","line":"  }"},
{"lineNum":"  439","line":""},
{"lineNum":"  440","line":"  template <bool _Dummy = true,"},
{"lineNum":"  441","line":"            class = _EnableIfDeleterConstructible<_GoodRValRefType<_Dummy> > >"},
{"lineNum":"  442","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  443","line":"  unique_ptr(nullptr_t, _GoodRValRefType<_Dummy> __d) _NOEXCEPT"},
{"lineNum":"  444","line":"      : __ptr_(nullptr, _VSTD::move(__d)) {"},
{"lineNum":"  445","line":"    static_assert(!is_reference<deleter_type>::value,"},
{"lineNum":"  446","line":"                  \"rvalue deleter bound to reference\");"},
{"lineNum":"  447","line":"  }"},
{"lineNum":"  448","line":""},
{"lineNum":"  449","line":"  template <class _Pp, bool _Dummy = true,"},
{"lineNum":"  450","line":"            class = _EnableIfDeleterConstructible<_BadRValRefType<_Dummy> >,"},
{"lineNum":"  451","line":"            class = _EnableIfPointerConvertible<_Pp> >"},
{"lineNum":"  452","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  453","line":"  unique_ptr(_Pp __p, _BadRValRefType<_Dummy> __d) = delete;"},
{"lineNum":"  454","line":""},
{"lineNum":"  455","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  456","line":"  unique_ptr(unique_ptr&& __u) _NOEXCEPT"},
{"lineNum":"  457","line":"      : __ptr_(__u.release(), _VSTD::forward<deleter_type>(__u.get_deleter())) {"},
{"lineNum":"  458","line":"  }"},
{"lineNum":"  459","line":""},
{"lineNum":"  460","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  461","line":"  unique_ptr& operator=(unique_ptr&& __u) _NOEXCEPT {"},
{"lineNum":"  462","line":"    reset(__u.release());"},
{"lineNum":"  463","line":"    __ptr_.second() = _VSTD::forward<deleter_type>(__u.get_deleter());"},
{"lineNum":"  464","line":"    return *this;"},
{"lineNum":"  465","line":"  }"},
{"lineNum":"  466","line":""},
{"lineNum":"  467","line":"  template <class _Up, class _Ep,"},
{"lineNum":"  468","line":"      class = _EnableIfMoveConvertible<unique_ptr<_Up, _Ep>, _Up>,"},
{"lineNum":"  469","line":"      class = _EnableIfDeleterConvertible<_Ep>"},
{"lineNum":"  470","line":"  >"},
{"lineNum":"  471","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  472","line":"  unique_ptr(unique_ptr<_Up, _Ep>&& __u) _NOEXCEPT"},
{"lineNum":"  473","line":"      : __ptr_(__u.release(), _VSTD::forward<_Ep>(__u.get_deleter())) {"},
{"lineNum":"  474","line":"  }"},
{"lineNum":"  475","line":""},
{"lineNum":"  476","line":"  template <class _Up, class _Ep,"},
{"lineNum":"  477","line":"      class = _EnableIfMoveConvertible<unique_ptr<_Up, _Ep>, _Up>,"},
{"lineNum":"  478","line":"      class = _EnableIfDeleterAssignable<_Ep>"},
{"lineNum":"  479","line":"  >"},
{"lineNum":"  480","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  481","line":"  unique_ptr&"},
{"lineNum":"  482","line":"  operator=(unique_ptr<_Up, _Ep>&& __u) _NOEXCEPT {"},
{"lineNum":"  483","line":"    reset(__u.release());"},
{"lineNum":"  484","line":"    __ptr_.second() = _VSTD::forward<_Ep>(__u.get_deleter());"},
{"lineNum":"  485","line":"    return *this;"},
{"lineNum":"  486","line":"  }"},
{"lineNum":"  487","line":""},
{"lineNum":"  488","line":"#ifdef _LIBCPP_CXX03_LANG"},
{"lineNum":"  489","line":"  unique_ptr(unique_ptr const&) = delete;"},
{"lineNum":"  490","line":"  unique_ptr& operator=(unique_ptr const&) = delete;"},
{"lineNum":"  491","line":"#endif"},
{"lineNum":"  492","line":""},
{"lineNum":"  493","line":"public:"},
{"lineNum":"  494","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  495","line":"  ~unique_ptr() { reset(); }"},
{"lineNum":"  496","line":""},
{"lineNum":"  497","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  498","line":"  unique_ptr& operator=(nullptr_t) _NOEXCEPT {"},
{"lineNum":"  499","line":"    reset();"},
{"lineNum":"  500","line":"    return *this;"},
{"lineNum":"  501","line":"  }"},
{"lineNum":"  502","line":""},
{"lineNum":"  503","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  504","line":"  typename add_lvalue_reference<_Tp>::type"},
{"lineNum":"  505","line":"  operator[](size_t __i) const {"},
{"lineNum":"  506","line":"    return __ptr_.first()[__i];","class":"linePartCov","hits":"29","order":"146","possible_hits":"716",},
{"lineNum":"  507","line":"  }"},
{"lineNum":"  508","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  509","line":"  pointer get() const _NOEXCEPT {"},
{"lineNum":"  510","line":"    return __ptr_.first();"},
{"lineNum":"  511","line":"  }"},
{"lineNum":"  512","line":""},
{"lineNum":"  513","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  514","line":"  deleter_type& get_deleter() _NOEXCEPT {"},
{"lineNum":"  515","line":"    return __ptr_.second();"},
{"lineNum":"  516","line":"  }"},
{"lineNum":"  517","line":""},
{"lineNum":"  518","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  519","line":"  const deleter_type& get_deleter() const _NOEXCEPT {"},
{"lineNum":"  520","line":"    return __ptr_.second();"},
{"lineNum":"  521","line":"  }"},
{"lineNum":"  522","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  523","line":"  explicit operator bool() const _NOEXCEPT {"},
{"lineNum":"  524","line":"    return __ptr_.first() != nullptr;"},
{"lineNum":"  525","line":"  }"},
{"lineNum":"  526","line":""},
{"lineNum":"  527","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  528","line":"  pointer release() _NOEXCEPT {"},
{"lineNum":"  529","line":"    pointer __t = __ptr_.first();","class":"linePartCov","hits":"1","order":"104","possible_hits":"4",},
{"lineNum":"  530","line":"    __ptr_.first() = pointer();","class":"linePartCov","hits":"1","order":"105","possible_hits":"28",},
{"lineNum":"  531","line":"    return __t;"},
{"lineNum":"  532","line":"  }"},
{"lineNum":"  533","line":""},
{"lineNum":"  534","line":"  template <class _Pp>"},
{"lineNum":"  535","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  536","line":"  typename enable_if<"},
{"lineNum":"  537","line":"      _CheckArrayPointerConversion<_Pp>::value"},
{"lineNum":"  538","line":"  >::type"},
{"lineNum":"  539","line":"  reset(_Pp __p) _NOEXCEPT {"},
{"lineNum":"  540","line":"    pointer __tmp = __ptr_.first();","class":"linePartCov","hits":"3","order":"141","possible_hits":"58",},
{"lineNum":"  541","line":"    __ptr_.first() = __p;","class":"linePartCov","hits":"3","order":"142","possible_hits":"58",},
{"lineNum":"  542","line":"    if (__tmp)","class":"linePartCov","hits":"3","order":"143","possible_hits":"58",},
{"lineNum":"  543","line":"      __ptr_.second()(__tmp);","class":"linePartCov","hits":"2","order":"485","possible_hits":"8",},
{"lineNum":"  544","line":"  }"},
{"lineNum":"  545","line":""},
{"lineNum":"  546","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  547","line":"  void reset(nullptr_t = nullptr) _NOEXCEPT {"},
{"lineNum":"  548","line":"    pointer __tmp = __ptr_.first();","class":"linePartCov","hits":"3","order":"171","possible_hits":"164",},
{"lineNum":"  549","line":"    __ptr_.first() = nullptr;","class":"linePartCov","hits":"3","order":"172","possible_hits":"164",},
{"lineNum":"  550","line":"    if (__tmp)","class":"linePartCov","hits":"3","order":"173","possible_hits":"164",},
{"lineNum":"  551","line":"      __ptr_.second()(__tmp);","class":"linePartCov","hits":"1","order":"676","possible_hits":"4",},
{"lineNum":"  552","line":"  }"},
{"lineNum":"  553","line":""},
{"lineNum":"  554","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  555","line":"  void swap(unique_ptr& __u) _NOEXCEPT {"},
{"lineNum":"  556","line":"    __ptr_.swap(__u.__ptr_);"},
{"lineNum":"  557","line":"  }"},
{"lineNum":"  558","line":""},
{"lineNum":"  559","line":"};"},
{"lineNum":"  560","line":""},
{"lineNum":"  561","line":"template <class _Tp, class _Dp>"},
{"lineNum":"  562","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  563","line":"typename enable_if<"},
{"lineNum":"  564","line":"    __is_swappable<_Dp>::value,"},
{"lineNum":"  565","line":"    void"},
{"lineNum":"  566","line":">::type"},
{"lineNum":"  567","line":"swap(unique_ptr<_Tp, _Dp>& __x, unique_ptr<_Tp, _Dp>& __y) _NOEXCEPT {__x.swap(__y);}"},
{"lineNum":"  568","line":""},
{"lineNum":"  569","line":"template <class _T1, class _D1, class _T2, class _D2>"},
{"lineNum":"  570","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  571","line":"bool"},
{"lineNum":"  572","line":"operator==(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return __x.get() == __y.get();}"},
{"lineNum":"  573","line":""},
{"lineNum":"  574","line":"template <class _T1, class _D1, class _T2, class _D2>"},
{"lineNum":"  575","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  576","line":"bool"},
{"lineNum":"  577","line":"operator!=(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return !(__x == __y);}"},
{"lineNum":"  578","line":""},
{"lineNum":"  579","line":"template <class _T1, class _D1, class _T2, class _D2>"},
{"lineNum":"  580","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  581","line":"bool"},
{"lineNum":"  582","line":"operator< (const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y)"},
{"lineNum":"  583","line":"{"},
{"lineNum":"  584","line":"    typedef typename unique_ptr<_T1, _D1>::pointer _P1;"},
{"lineNum":"  585","line":"    typedef typename unique_ptr<_T2, _D2>::pointer _P2;"},
{"lineNum":"  586","line":"    typedef typename common_type<_P1, _P2>::type _Vp;"},
{"lineNum":"  587","line":"    return less<_Vp>()(__x.get(), __y.get());"},
{"lineNum":"  588","line":"}"},
{"lineNum":"  589","line":""},
{"lineNum":"  590","line":"template <class _T1, class _D1, class _T2, class _D2>"},
{"lineNum":"  591","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  592","line":"bool"},
{"lineNum":"  593","line":"operator> (const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return __y < __x;}"},
{"lineNum":"  594","line":""},
{"lineNum":"  595","line":"template <class _T1, class _D1, class _T2, class _D2>"},
{"lineNum":"  596","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  597","line":"bool"},
{"lineNum":"  598","line":"operator<=(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return !(__y < __x);}"},
{"lineNum":"  599","line":""},
{"lineNum":"  600","line":"template <class _T1, class _D1, class _T2, class _D2>"},
{"lineNum":"  601","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  602","line":"bool"},
{"lineNum":"  603","line":"operator>=(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return !(__x < __y);}"},
{"lineNum":"  604","line":""},
{"lineNum":"  605","line":"template <class _T1, class _D1>"},
{"lineNum":"  606","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  607","line":"bool"},
{"lineNum":"  608","line":"operator==(const unique_ptr<_T1, _D1>& __x, nullptr_t) _NOEXCEPT"},
{"lineNum":"  609","line":"{"},
{"lineNum":"  610","line":"    return !__x;"},
{"lineNum":"  611","line":"}"},
{"lineNum":"  612","line":""},
{"lineNum":"  613","line":"template <class _T1, class _D1>"},
{"lineNum":"  614","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  615","line":"bool"},
{"lineNum":"  616","line":"operator==(nullptr_t, const unique_ptr<_T1, _D1>& __x) _NOEXCEPT"},
{"lineNum":"  617","line":"{"},
{"lineNum":"  618","line":"    return !__x;"},
{"lineNum":"  619","line":"}"},
{"lineNum":"  620","line":""},
{"lineNum":"  621","line":"template <class _T1, class _D1>"},
{"lineNum":"  622","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  623","line":"bool"},
{"lineNum":"  624","line":"operator!=(const unique_ptr<_T1, _D1>& __x, nullptr_t) _NOEXCEPT"},
{"lineNum":"  625","line":"{"},
{"lineNum":"  626","line":"    return static_cast<bool>(__x);"},
{"lineNum":"  627","line":"}"},
{"lineNum":"  628","line":""},
{"lineNum":"  629","line":"template <class _T1, class _D1>"},
{"lineNum":"  630","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  631","line":"bool"},
{"lineNum":"  632","line":"operator!=(nullptr_t, const unique_ptr<_T1, _D1>& __x) _NOEXCEPT"},
{"lineNum":"  633","line":"{"},
{"lineNum":"  634","line":"    return static_cast<bool>(__x);"},
{"lineNum":"  635","line":"}"},
{"lineNum":"  636","line":""},
{"lineNum":"  637","line":"template <class _T1, class _D1>"},
{"lineNum":"  638","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  639","line":"bool"},
{"lineNum":"  640","line":"operator<(const unique_ptr<_T1, _D1>& __x, nullptr_t)"},
{"lineNum":"  641","line":"{"},
{"lineNum":"  642","line":"    typedef typename unique_ptr<_T1, _D1>::pointer _P1;"},
{"lineNum":"  643","line":"    return less<_P1>()(__x.get(), nullptr);"},
{"lineNum":"  644","line":"}"},
{"lineNum":"  645","line":""},
{"lineNum":"  646","line":"template <class _T1, class _D1>"},
{"lineNum":"  647","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  648","line":"bool"},
{"lineNum":"  649","line":"operator<(nullptr_t, const unique_ptr<_T1, _D1>& __x)"},
{"lineNum":"  650","line":"{"},
{"lineNum":"  651","line":"    typedef typename unique_ptr<_T1, _D1>::pointer _P1;"},
{"lineNum":"  652","line":"    return less<_P1>()(nullptr, __x.get());"},
{"lineNum":"  653","line":"}"},
{"lineNum":"  654","line":""},
{"lineNum":"  655","line":"template <class _T1, class _D1>"},
{"lineNum":"  656","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  657","line":"bool"},
{"lineNum":"  658","line":"operator>(const unique_ptr<_T1, _D1>& __x, nullptr_t)"},
{"lineNum":"  659","line":"{"},
{"lineNum":"  660","line":"    return nullptr < __x;"},
{"lineNum":"  661","line":"}"},
{"lineNum":"  662","line":""},
{"lineNum":"  663","line":"template <class _T1, class _D1>"},
{"lineNum":"  664","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  665","line":"bool"},
{"lineNum":"  666","line":"operator>(nullptr_t, const unique_ptr<_T1, _D1>& __x)"},
{"lineNum":"  667","line":"{"},
{"lineNum":"  668","line":"    return __x < nullptr;"},
{"lineNum":"  669","line":"}"},
{"lineNum":"  670","line":""},
{"lineNum":"  671","line":"template <class _T1, class _D1>"},
{"lineNum":"  672","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  673","line":"bool"},
{"lineNum":"  674","line":"operator<=(const unique_ptr<_T1, _D1>& __x, nullptr_t)"},
{"lineNum":"  675","line":"{"},
{"lineNum":"  676","line":"    return !(nullptr < __x);"},
{"lineNum":"  677","line":"}"},
{"lineNum":"  678","line":""},
{"lineNum":"  679","line":"template <class _T1, class _D1>"},
{"lineNum":"  680","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  681","line":"bool"},
{"lineNum":"  682","line":"operator<=(nullptr_t, const unique_ptr<_T1, _D1>& __x)"},
{"lineNum":"  683","line":"{"},
{"lineNum":"  684","line":"    return !(__x < nullptr);"},
{"lineNum":"  685","line":"}"},
{"lineNum":"  686","line":""},
{"lineNum":"  687","line":"template <class _T1, class _D1>"},
{"lineNum":"  688","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  689","line":"bool"},
{"lineNum":"  690","line":"operator>=(const unique_ptr<_T1, _D1>& __x, nullptr_t)"},
{"lineNum":"  691","line":"{"},
{"lineNum":"  692","line":"    return !(__x < nullptr);"},
{"lineNum":"  693","line":"}"},
{"lineNum":"  694","line":""},
{"lineNum":"  695","line":"template <class _T1, class _D1>"},
{"lineNum":"  696","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  697","line":"bool"},
{"lineNum":"  698","line":"operator>=(nullptr_t, const unique_ptr<_T1, _D1>& __x)"},
{"lineNum":"  699","line":"{"},
{"lineNum":"  700","line":"    return !(nullptr < __x);"},
{"lineNum":"  701","line":"}"},
{"lineNum":"  702","line":""},
{"lineNum":"  703","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":"  704","line":""},
{"lineNum":"  705","line":"template<class _Tp>"},
{"lineNum":"  706","line":"struct __unique_if"},
{"lineNum":"  707","line":"{"},
{"lineNum":"  708","line":"    typedef unique_ptr<_Tp> __unique_single;"},
{"lineNum":"  709","line":"};"},
{"lineNum":"  710","line":""},
{"lineNum":"  711","line":"template<class _Tp>"},
{"lineNum":"  712","line":"struct __unique_if<_Tp[]>"},
{"lineNum":"  713","line":"{"},
{"lineNum":"  714","line":"    typedef unique_ptr<_Tp[]> __unique_array_unknown_bound;"},
{"lineNum":"  715","line":"};"},
{"lineNum":"  716","line":""},
{"lineNum":"  717","line":"template<class _Tp, size_t _Np>"},
{"lineNum":"  718","line":"struct __unique_if<_Tp[_Np]>"},
{"lineNum":"  719","line":"{"},
{"lineNum":"  720","line":"    typedef void __unique_array_known_bound;"},
{"lineNum":"  721","line":"};"},
{"lineNum":"  722","line":""},
{"lineNum":"  723","line":"template<class _Tp, class... _Args>"},
{"lineNum":"  724","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  725","line":"typename __unique_if<_Tp>::__unique_single"},
{"lineNum":"  726","line":"make_unique(_Args&&... __args)"},
{"lineNum":"  727","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  728","line":"    return unique_ptr<_Tp>(new _Tp(_VSTD::forward<_Args>(__args)...));","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"  729","line":"}"},
{"lineNum":"  730","line":""},
{"lineNum":"  731","line":"template<class _Tp>"},
{"lineNum":"  732","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  733","line":"typename __unique_if<_Tp>::__unique_array_unknown_bound"},
{"lineNum":"  734","line":"make_unique(size_t __n)"},
{"lineNum":"  735","line":"{"},
{"lineNum":"  736","line":"    typedef typename remove_extent<_Tp>::type _Up;"},
{"lineNum":"  737","line":"    return unique_ptr<_Tp>(new _Up[__n]());"},
{"lineNum":"  738","line":"}"},
{"lineNum":"  739","line":""},
{"lineNum":"  740","line":"template<class _Tp, class... _Args>"},
{"lineNum":"  741","line":"    typename __unique_if<_Tp>::__unique_array_known_bound"},
{"lineNum":"  742","line":"    make_unique(_Args&&...) = delete;"},
{"lineNum":"  743","line":""},
{"lineNum":"  744","line":"#endif // _LIBCPP_STD_VER > 11"},
{"lineNum":"  745","line":""},
{"lineNum":"  746","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS hash;"},
{"lineNum":"  747","line":""},
{"lineNum":"  748","line":"template <class _Tp, class _Dp>"},
{"lineNum":"  749","line":"#ifdef _LIBCPP_CXX03_LANG"},
{"lineNum":"  750","line":"struct _LIBCPP_TEMPLATE_VIS hash<unique_ptr<_Tp, _Dp> >"},
{"lineNum":"  751","line":"#else"},
{"lineNum":"  752","line":"struct _LIBCPP_TEMPLATE_VIS hash<__enable_hash_helper<"},
{"lineNum":"  753","line":"    unique_ptr<_Tp, _Dp>, typename unique_ptr<_Tp, _Dp>::pointer> >"},
{"lineNum":"  754","line":"#endif"},
{"lineNum":"  755","line":"{"},
{"lineNum":"  756","line":"#if _LIBCPP_STD_VER <= 17 || defined(_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS)"},
{"lineNum":"  757","line":"    _LIBCPP_DEPRECATED_IN_CXX17 typedef unique_ptr<_Tp, _Dp> argument_type;"},
{"lineNum":"  758","line":"    _LIBCPP_DEPRECATED_IN_CXX17 typedef size_t               result_type;"},
{"lineNum":"  759","line":"#endif"},
{"lineNum":"  760","line":""},
{"lineNum":"  761","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  762","line":"    size_t operator()(const unique_ptr<_Tp, _Dp>& __ptr) const"},
{"lineNum":"  763","line":"    {"},
{"lineNum":"  764","line":"        typedef typename unique_ptr<_Tp, _Dp>::pointer pointer;"},
{"lineNum":"  765","line":"        return hash<pointer>()(__ptr.get());"},
{"lineNum":"  766","line":"    }"},
{"lineNum":"  767","line":"};"},
{"lineNum":"  768","line":""},
{"lineNum":"  769","line":"_LIBCPP_END_NAMESPACE_STD"},
{"lineNum":"  770","line":""},
{"lineNum":"  771","line":"_LIBCPP_POP_MACROS"},
{"lineNum":"  772","line":""},
{"lineNum":"  773","line":"#endif // _LIBCPP___MEMORY_UNIQUE_PTR_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 31, "covered" : 15,};
var merged_data = [];
