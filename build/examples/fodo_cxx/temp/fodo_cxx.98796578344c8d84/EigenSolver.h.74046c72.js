var data = {lines:[
{"lineNum":"    1","line":"// This file is part of Eigen, a lightweight C++ template library"},
{"lineNum":"    2","line":"// for linear algebra."},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Copyright (C) 2008 Gael Guennebaud <gael.guennebaud@inria.fr>"},
{"lineNum":"    5","line":"// Copyright (C) 2010,2012 Jitse Niesen <jitse@maths.leeds.ac.uk>"},
{"lineNum":"    6","line":"//"},
{"lineNum":"    7","line":"// This Source Code Form is subject to the terms of the Mozilla"},
{"lineNum":"    8","line":"// Public License v. 2.0. If a copy of the MPL was not distributed"},
{"lineNum":"    9","line":"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/."},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"#ifndef EIGEN_EIGENSOLVER_H"},
{"lineNum":"   12","line":"#define EIGEN_EIGENSOLVER_H"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"#include \"./RealSchur.h\""},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"#include \"./InternalHeaderCheck.h\""},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"namespace Eigen {"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"/** \\eigenvalues_module \\ingroup Eigenvalues_Module"},
{"lineNum":"   21","line":"  *"},
{"lineNum":"   22","line":"  *"},
{"lineNum":"   23","line":"  * \\class EigenSolver"},
{"lineNum":"   24","line":"  *"},
{"lineNum":"   25","line":"  * \\brief Computes eigenvalues and eigenvectors of general matrices"},
{"lineNum":"   26","line":"  *"},
{"lineNum":"   27","line":"  * \\tparam MatrixType_ the type of the matrix of which we are computing the"},
{"lineNum":"   28","line":"  * eigendecomposition; this is expected to be an instantiation of the Matrix"},
{"lineNum":"   29","line":"  * class template. Currently, only real matrices are supported."},
{"lineNum":"   30","line":"  *"},
{"lineNum":"   31","line":"  * The eigenvalues and eigenvectors of a matrix \\f$ A \\f$ are scalars"},
{"lineNum":"   32","line":"  * \\f$ \\lambda \\f$ and vectors \\f$ v \\f$ such that \\f$ Av = \\lambda v \\f$.  If"},
{"lineNum":"   33","line":"  * \\f$ D \\f$ is a diagonal matrix with the eigenvalues on the diagonal, and"},
{"lineNum":"   34","line":"  * \\f$ V \\f$ is a matrix with the eigenvectors as its columns, then \\f$ A V ="},
{"lineNum":"   35","line":"  * V D \\f$. The matrix \\f$ V \\f$ is almost always invertible, in which case we"},
{"lineNum":"   36","line":"  * have \\f$ A = V D V^{-1} \\f$. This is called the eigendecomposition."},
{"lineNum":"   37","line":"  *"},
{"lineNum":"   38","line":"  * The eigenvalues and eigenvectors of a matrix may be complex, even when the"},
{"lineNum":"   39","line":"  * matrix is real. However, we can choose real matrices \\f$ V \\f$ and \\f$ D"},
{"lineNum":"   40","line":"  * \\f$ satisfying \\f$ A V = V D \\f$, just like the eigendecomposition, if the"},
{"lineNum":"   41","line":"  * matrix \\f$ D \\f$ is not required to be diagonal, but if it is allowed to"},
{"lineNum":"   42","line":"  * have blocks of the form"},
{"lineNum":"   43","line":"  * \\f[ \\begin{bmatrix} u & v \\\\ -v & u \\end{bmatrix} \\f]"},
{"lineNum":"   44","line":"  * (where \\f$ u \\f$ and \\f$ v \\f$ are real numbers) on the diagonal.  These"},
{"lineNum":"   45","line":"  * blocks correspond to complex eigenvalue pairs \\f$ u \\pm iv \\f$. We call"},
{"lineNum":"   46","line":"  * this variant of the eigendecomposition the pseudo-eigendecomposition."},
{"lineNum":"   47","line":"  *"},
{"lineNum":"   48","line":"  * Call the function compute() to compute the eigenvalues and eigenvectors of"},
{"lineNum":"   49","line":"  * a given matrix. Alternatively, you can use the"},
{"lineNum":"   50","line":"  * EigenSolver(const MatrixType&, bool) constructor which computes the"},
{"lineNum":"   51","line":"  * eigenvalues and eigenvectors at construction time. Once the eigenvalue and"},
{"lineNum":"   52","line":"  * eigenvectors are computed, they can be retrieved with the eigenvalues() and"},
{"lineNum":"   53","line":"  * eigenvectors() functions. The pseudoEigenvalueMatrix() and"},
{"lineNum":"   54","line":"  * pseudoEigenvectors() methods allow the construction of the"},
{"lineNum":"   55","line":"  * pseudo-eigendecomposition."},
{"lineNum":"   56","line":"  *"},
{"lineNum":"   57","line":"  * The documentation for EigenSolver(const MatrixType&, bool) contains an"},
{"lineNum":"   58","line":"  * example of the typical use of this class."},
{"lineNum":"   59","line":"  *"},
{"lineNum":"   60","line":"  * \\note The implementation is adapted from"},
{"lineNum":"   61","line":"  * <a href=\"http://math.nist.gov/javanumerics/jama/\">JAMA</a> (public domain)."},
{"lineNum":"   62","line":"  * Their code is based on EISPACK."},
{"lineNum":"   63","line":"  *"},
{"lineNum":"   64","line":"  * \\sa MatrixBase::eigenvalues(), class ComplexEigenSolver, class SelfAdjointEigenSolver"},
{"lineNum":"   65","line":"  */"},
{"lineNum":"   66","line":"template<typename MatrixType_> class EigenSolver","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   67","line":"{"},
{"lineNum":"   68","line":"  public:"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"    /** \\brief Synonym for the template parameter \\p MatrixType_. */"},
{"lineNum":"   71","line":"    typedef MatrixType_ MatrixType;"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"    enum {"},
{"lineNum":"   74","line":"      RowsAtCompileTime = MatrixType::RowsAtCompileTime,"},
{"lineNum":"   75","line":"      ColsAtCompileTime = MatrixType::ColsAtCompileTime,"},
{"lineNum":"   76","line":"      Options = MatrixType::Options,"},
{"lineNum":"   77","line":"      MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,"},
{"lineNum":"   78","line":"      MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime"},
{"lineNum":"   79","line":"    };"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"    /** \\brief Scalar type for matrices of type #MatrixType. */"},
{"lineNum":"   82","line":"    typedef typename MatrixType::Scalar Scalar;"},
{"lineNum":"   83","line":"    typedef typename NumTraits<Scalar>::Real RealScalar;"},
{"lineNum":"   84","line":"    typedef Eigen::Index Index; ///< \\deprecated since Eigen 3.3"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"    /** \\brief Complex scalar type for #MatrixType."},
{"lineNum":"   87","line":"      *"},
{"lineNum":"   88","line":"      * This is \\c std::complex<Scalar> if #Scalar is real (e.g.,"},
{"lineNum":"   89","line":"      * \\c float or \\c double) and just \\c Scalar if #Scalar is"},
{"lineNum":"   90","line":"      * complex."},
{"lineNum":"   91","line":"      */"},
{"lineNum":"   92","line":"    typedef std::complex<RealScalar> ComplexScalar;"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"    /** \\brief Type for vector of eigenvalues as returned by eigenvalues()."},
{"lineNum":"   95","line":"      *"},
{"lineNum":"   96","line":"      * This is a column vector with entries of type #ComplexScalar."},
{"lineNum":"   97","line":"      * The length of the vector is the size of #MatrixType."},
{"lineNum":"   98","line":"      */"},
{"lineNum":"   99","line":"    typedef Matrix<ComplexScalar, ColsAtCompileTime, 1, Options & ~RowMajor, MaxColsAtCompileTime, 1> EigenvalueType;"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"    /** \\brief Type for matrix of eigenvectors as returned by eigenvectors()."},
{"lineNum":"  102","line":"      *"},
{"lineNum":"  103","line":"      * This is a square matrix with entries of type #ComplexScalar."},
{"lineNum":"  104","line":"      * The size is the same as the size of #MatrixType."},
{"lineNum":"  105","line":"      */"},
{"lineNum":"  106","line":"    typedef Matrix<ComplexScalar, RowsAtCompileTime, ColsAtCompileTime, Options, MaxRowsAtCompileTime, MaxColsAtCompileTime> EigenvectorsType;"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"    /** \\brief Default constructor."},
{"lineNum":"  109","line":"      *"},
{"lineNum":"  110","line":"      * The default constructor is useful in cases in which the user intends to"},
{"lineNum":"  111","line":"      * perform decompositions via EigenSolver::compute(const MatrixType&, bool)."},
{"lineNum":"  112","line":"      *"},
{"lineNum":"  113","line":"      * \\sa compute() for an example."},
{"lineNum":"  114","line":"      */"},
{"lineNum":"  115","line":"    EigenSolver() : m_eivec(), m_eivalues(), m_isInitialized(false), m_eigenvectorsOk(false), m_realSchur(), m_matT(), m_tmp() {}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"    /** \\brief Default constructor with memory preallocation"},
{"lineNum":"  118","line":"      *"},
{"lineNum":"  119","line":"      * Like the default constructor but with preallocation of the internal data"},
{"lineNum":"  120","line":"      * according to the specified problem \\a size."},
{"lineNum":"  121","line":"      * \\sa EigenSolver()"},
{"lineNum":"  122","line":"      */"},
{"lineNum":"  123","line":"    explicit EigenSolver(Index size)"},
{"lineNum":"  124","line":"      : m_eivec(size, size),"},
{"lineNum":"  125","line":"        m_eivalues(size),"},
{"lineNum":"  126","line":"        m_isInitialized(false),"},
{"lineNum":"  127","line":"        m_eigenvectorsOk(false),"},
{"lineNum":"  128","line":"        m_realSchur(size),"},
{"lineNum":"  129","line":"        m_matT(size, size),"},
{"lineNum":"  130","line":"        m_tmp(size)"},
{"lineNum":"  131","line":"    {}"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"    /** \\brief Constructor; computes eigendecomposition of given matrix."},
{"lineNum":"  134","line":"      *"},
{"lineNum":"  135","line":"      * \\param[in]  matrix  Square matrix whose eigendecomposition is to be computed."},
{"lineNum":"  136","line":"      * \\param[in]  computeEigenvectors  If true, both the eigenvectors and the"},
{"lineNum":"  137","line":"      *    eigenvalues are computed; if false, only the eigenvalues are"},
{"lineNum":"  138","line":"      *    computed."},
{"lineNum":"  139","line":"      *"},
{"lineNum":"  140","line":"      * This constructor calls compute() to compute the eigenvalues"},
{"lineNum":"  141","line":"      * and eigenvectors."},
{"lineNum":"  142","line":"      *"},
{"lineNum":"  143","line":"      * Example: \\include EigenSolver_EigenSolver_MatrixType.cpp"},
{"lineNum":"  144","line":"      * Output: \\verbinclude EigenSolver_EigenSolver_MatrixType.out"},
{"lineNum":"  145","line":"      *"},
{"lineNum":"  146","line":"      * \\sa compute()"},
{"lineNum":"  147","line":"      */"},
{"lineNum":"  148","line":"    template<typename InputType>"},
{"lineNum":"  149","line":"    explicit EigenSolver(const EigenBase<InputType>& matrix, bool computeEigenvectors = true)"},
{"lineNum":"  150","line":"      : m_eivec(matrix.rows(), matrix.cols()),"},
{"lineNum":"  151","line":"        m_eivalues(matrix.cols()),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  152","line":"        m_isInitialized(false),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  153","line":"        m_eigenvectorsOk(false),"},
{"lineNum":"  154","line":"        m_realSchur(matrix.cols()),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  155","line":"        m_matT(matrix.rows(), matrix.cols()),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  156","line":"        m_tmp(matrix.cols())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  157","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  158","line":"      compute(matrix.derived(), computeEigenvectors);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  159","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"    /** \\brief Returns the eigenvectors of given matrix."},
{"lineNum":"  162","line":"      *"},
{"lineNum":"  163","line":"      * \\returns  %Matrix whose columns are the (possibly complex) eigenvectors."},
{"lineNum":"  164","line":"      *"},
{"lineNum":"  165","line":"      * \\pre Either the constructor"},
{"lineNum":"  166","line":"      * EigenSolver(const MatrixType&,bool) or the member function"},
{"lineNum":"  167","line":"      * compute(const MatrixType&, bool) has been called before, and"},
{"lineNum":"  168","line":"      * \\p computeEigenvectors was set to true (the default)."},
{"lineNum":"  169","line":"      *"},
{"lineNum":"  170","line":"      * Column \\f$ k \\f$ of the returned matrix is an eigenvector corresponding"},
{"lineNum":"  171","line":"      * to eigenvalue number \\f$ k \\f$ as returned by eigenvalues().  The"},
{"lineNum":"  172","line":"      * eigenvectors are normalized to have (Euclidean) norm equal to one. The"},
{"lineNum":"  173","line":"      * matrix returned by this function is the matrix \\f$ V \\f$ in the"},
{"lineNum":"  174","line":"      * eigendecomposition \\f$ A = V D V^{-1} \\f$, if it exists."},
{"lineNum":"  175","line":"      *"},
{"lineNum":"  176","line":"      * Example: \\include EigenSolver_eigenvectors.cpp"},
{"lineNum":"  177","line":"      * Output: \\verbinclude EigenSolver_eigenvectors.out"},
{"lineNum":"  178","line":"      *"},
{"lineNum":"  179","line":"      * \\sa eigenvalues(), pseudoEigenvectors()"},
{"lineNum":"  180","line":"      */"},
{"lineNum":"  181","line":"    EigenvectorsType eigenvectors() const;"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"    /** \\brief Returns the pseudo-eigenvectors of given matrix."},
{"lineNum":"  184","line":"      *"},
{"lineNum":"  185","line":"      * \\returns  Const reference to matrix whose columns are the pseudo-eigenvectors."},
{"lineNum":"  186","line":"      *"},
{"lineNum":"  187","line":"      * \\pre Either the constructor"},
{"lineNum":"  188","line":"      * EigenSolver(const MatrixType&,bool) or the member function"},
{"lineNum":"  189","line":"      * compute(const MatrixType&, bool) has been called before, and"},
{"lineNum":"  190","line":"      * \\p computeEigenvectors was set to true (the default)."},
{"lineNum":"  191","line":"      *"},
{"lineNum":"  192","line":"      * The real matrix \\f$ V \\f$ returned by this function and the"},
{"lineNum":"  193","line":"      * block-diagonal matrix \\f$ D \\f$ returned by pseudoEigenvalueMatrix()"},
{"lineNum":"  194","line":"      * satisfy \\f$ AV = VD \\f$."},
{"lineNum":"  195","line":"      *"},
{"lineNum":"  196","line":"      * Example: \\include EigenSolver_pseudoEigenvectors.cpp"},
{"lineNum":"  197","line":"      * Output: \\verbinclude EigenSolver_pseudoEigenvectors.out"},
{"lineNum":"  198","line":"      *"},
{"lineNum":"  199","line":"      * \\sa pseudoEigenvalueMatrix(), eigenvectors()"},
{"lineNum":"  200","line":"      */"},
{"lineNum":"  201","line":"    const MatrixType& pseudoEigenvectors() const"},
{"lineNum":"  202","line":"    {"},
{"lineNum":"  203","line":"      eigen_assert(m_isInitialized && \"EigenSolver is not initialized.\");"},
{"lineNum":"  204","line":"      eigen_assert(m_eigenvectorsOk && \"The eigenvectors have not been computed together with the eigenvalues.\");"},
{"lineNum":"  205","line":"      return m_eivec;"},
{"lineNum":"  206","line":"    }"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"    /** \\brief Returns the block-diagonal matrix in the pseudo-eigendecomposition."},
{"lineNum":"  209","line":"      *"},
{"lineNum":"  210","line":"      * \\returns  A block-diagonal matrix."},
{"lineNum":"  211","line":"      *"},
{"lineNum":"  212","line":"      * \\pre Either the constructor"},
{"lineNum":"  213","line":"      * EigenSolver(const MatrixType&,bool) or the member function"},
{"lineNum":"  214","line":"      * compute(const MatrixType&, bool) has been called before."},
{"lineNum":"  215","line":"      *"},
{"lineNum":"  216","line":"      * The matrix \\f$ D \\f$ returned by this function is real and"},
{"lineNum":"  217","line":"      * block-diagonal. The blocks on the diagonal are either 1-by-1 or 2-by-2"},
{"lineNum":"  218","line":"      * blocks of the form"},
{"lineNum":"  219","line":"      * \\f$ \\begin{bmatrix} u & v \\\\ -v & u \\end{bmatrix} \\f$."},
{"lineNum":"  220","line":"      * These blocks are not sorted in any particular order."},
{"lineNum":"  221","line":"      * The matrix \\f$ D \\f$ and the matrix \\f$ V \\f$ returned by"},
{"lineNum":"  222","line":"      * pseudoEigenvectors() satisfy \\f$ AV = VD \\f$."},
{"lineNum":"  223","line":"      *"},
{"lineNum":"  224","line":"      * \\sa pseudoEigenvectors() for an example, eigenvalues()"},
{"lineNum":"  225","line":"      */"},
{"lineNum":"  226","line":"    MatrixType pseudoEigenvalueMatrix() const;"},
{"lineNum":"  227","line":""},
{"lineNum":"  228","line":"    /** \\brief Returns the eigenvalues of given matrix."},
{"lineNum":"  229","line":"      *"},
{"lineNum":"  230","line":"      * \\returns A const reference to the column vector containing the eigenvalues."},
{"lineNum":"  231","line":"      *"},
{"lineNum":"  232","line":"      * \\pre Either the constructor"},
{"lineNum":"  233","line":"      * EigenSolver(const MatrixType&,bool) or the member function"},
{"lineNum":"  234","line":"      * compute(const MatrixType&, bool) has been called before."},
{"lineNum":"  235","line":"      *"},
{"lineNum":"  236","line":"      * The eigenvalues are repeated according to their algebraic multiplicity,"},
{"lineNum":"  237","line":"      * so there are as many eigenvalues as rows in the matrix. The eigenvalues"},
{"lineNum":"  238","line":"      * are not sorted in any particular order."},
{"lineNum":"  239","line":"      *"},
{"lineNum":"  240","line":"      * Example: \\include EigenSolver_eigenvalues.cpp"},
{"lineNum":"  241","line":"      * Output: \\verbinclude EigenSolver_eigenvalues.out"},
{"lineNum":"  242","line":"      *"},
{"lineNum":"  243","line":"      * \\sa eigenvectors(), pseudoEigenvalueMatrix(),"},
{"lineNum":"  244","line":"      *     MatrixBase::eigenvalues()"},
{"lineNum":"  245","line":"      */"},
{"lineNum":"  246","line":"    const EigenvalueType& eigenvalues() const"},
{"lineNum":"  247","line":"    {"},
{"lineNum":"  248","line":"      eigen_assert(m_isInitialized && \"EigenSolver is not initialized.\");"},
{"lineNum":"  249","line":"      return m_eivalues;"},
{"lineNum":"  250","line":"    }"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"    /** \\brief Computes eigendecomposition of given matrix."},
{"lineNum":"  253","line":"      *"},
{"lineNum":"  254","line":"      * \\param[in]  matrix  Square matrix whose eigendecomposition is to be computed."},
{"lineNum":"  255","line":"      * \\param[in]  computeEigenvectors  If true, both the eigenvectors and the"},
{"lineNum":"  256","line":"      *    eigenvalues are computed; if false, only the eigenvalues are"},
{"lineNum":"  257","line":"      *    computed."},
{"lineNum":"  258","line":"      * \\returns    Reference to \\c *this"},
{"lineNum":"  259","line":"      *"},
{"lineNum":"  260","line":"      * This function computes the eigenvalues of the real matrix \\p matrix."},
{"lineNum":"  261","line":"      * The eigenvalues() function can be used to retrieve them.  If"},
{"lineNum":"  262","line":"      * \\p computeEigenvectors is true, then the eigenvectors are also computed"},
{"lineNum":"  263","line":"      * and can be retrieved by calling eigenvectors()."},
{"lineNum":"  264","line":"      *"},
{"lineNum":"  265","line":"      * The matrix is first reduced to real Schur form using the RealSchur"},
{"lineNum":"  266","line":"      * class. The Schur decomposition is then used to compute the eigenvalues"},
{"lineNum":"  267","line":"      * and eigenvectors."},
{"lineNum":"  268","line":"      *"},
{"lineNum":"  269","line":"      * The cost of the computation is dominated by the cost of the"},
{"lineNum":"  270","line":"      * Schur decomposition, which is very approximately \\f$ 25n^3 \\f$"},
{"lineNum":"  271","line":"      * (where \\f$ n \\f$ is the size of the matrix) if \\p computeEigenvectors"},
{"lineNum":"  272","line":"      * is true, and \\f$ 10n^3 \\f$ if \\p computeEigenvectors is false."},
{"lineNum":"  273","line":"      *"},
{"lineNum":"  274","line":"      * This method reuses of the allocated data in the EigenSolver object."},
{"lineNum":"  275","line":"      *"},
{"lineNum":"  276","line":"      * Example: \\include EigenSolver_compute.cpp"},
{"lineNum":"  277","line":"      * Output: \\verbinclude EigenSolver_compute.out"},
{"lineNum":"  278","line":"      */"},
{"lineNum":"  279","line":"    template<typename InputType>"},
{"lineNum":"  280","line":"    EigenSolver& compute(const EigenBase<InputType>& matrix, bool computeEigenvectors = true);"},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"    /** \\returns NumericalIssue if the input contains INF or NaN values or overflow occurred. Returns Success otherwise. */"},
{"lineNum":"  283","line":"    ComputationInfo info() const"},
{"lineNum":"  284","line":"    {"},
{"lineNum":"  285","line":"      eigen_assert(m_isInitialized && \"EigenSolver is not initialized.\");"},
{"lineNum":"  286","line":"      return m_info;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  287","line":"    }"},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"    /** \\brief Sets the maximum number of iterations allowed. */"},
{"lineNum":"  290","line":"    EigenSolver& setMaxIterations(Index maxIters)"},
{"lineNum":"  291","line":"    {"},
{"lineNum":"  292","line":"      m_realSchur.setMaxIterations(maxIters);"},
{"lineNum":"  293","line":"      return *this;"},
{"lineNum":"  294","line":"    }"},
{"lineNum":"  295","line":""},
{"lineNum":"  296","line":"    /** \\brief Returns the maximum number of iterations. */"},
{"lineNum":"  297","line":"    Index getMaxIterations()"},
{"lineNum":"  298","line":"    {"},
{"lineNum":"  299","line":"      return m_realSchur.getMaxIterations();"},
{"lineNum":"  300","line":"    }"},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":"  private:"},
{"lineNum":"  303","line":"    void doComputeEigenvectors();"},
{"lineNum":"  304","line":""},
{"lineNum":"  305","line":"  protected:"},
{"lineNum":"  306","line":""},
{"lineNum":"  307","line":"    static void check_template_parameters()"},
{"lineNum":"  308","line":"    {"},
{"lineNum":"  309","line":"      EIGEN_STATIC_ASSERT_NON_INTEGER(Scalar);"},
{"lineNum":"  310","line":"      EIGEN_STATIC_ASSERT(!NumTraits<Scalar>::IsComplex, NUMERIC_TYPE_MUST_BE_REAL);"},
{"lineNum":"  311","line":"    }"},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":"    MatrixType m_eivec;"},
{"lineNum":"  314","line":"    EigenvalueType m_eivalues;"},
{"lineNum":"  315","line":"    bool m_isInitialized;"},
{"lineNum":"  316","line":"    bool m_eigenvectorsOk;"},
{"lineNum":"  317","line":"    ComputationInfo m_info;"},
{"lineNum":"  318","line":"    RealSchur<MatrixType> m_realSchur;"},
{"lineNum":"  319","line":"    MatrixType m_matT;"},
{"lineNum":"  320","line":""},
{"lineNum":"  321","line":"    typedef Matrix<Scalar, ColsAtCompileTime, 1, Options & ~RowMajor, MaxColsAtCompileTime, 1> ColumnVectorType;"},
{"lineNum":"  322","line":"    ColumnVectorType m_tmp;"},
{"lineNum":"  323","line":"};"},
{"lineNum":"  324","line":""},
{"lineNum":"  325","line":"template<typename MatrixType>"},
{"lineNum":"  326","line":"MatrixType EigenSolver<MatrixType>::pseudoEigenvalueMatrix() const"},
{"lineNum":"  327","line":"{"},
{"lineNum":"  328","line":"  eigen_assert(m_isInitialized && \"EigenSolver is not initialized.\");"},
{"lineNum":"  329","line":"  const RealScalar precision = RealScalar(2)*NumTraits<RealScalar>::epsilon();"},
{"lineNum":"  330","line":"  Index n = m_eivalues.rows();"},
{"lineNum":"  331","line":"  MatrixType matD = MatrixType::Zero(n,n);"},
{"lineNum":"  332","line":"  for (Index i=0; i<n; ++i)"},
{"lineNum":"  333","line":"  {"},
{"lineNum":"  334","line":"    if (internal::isMuchSmallerThan(numext::imag(m_eivalues.coeff(i)), numext::real(m_eivalues.coeff(i)), precision))"},
{"lineNum":"  335","line":"      matD.coeffRef(i,i) = numext::real(m_eivalues.coeff(i));"},
{"lineNum":"  336","line":"    else"},
{"lineNum":"  337","line":"    {"},
{"lineNum":"  338","line":"      matD.template block<2,2>(i,i) <<  numext::real(m_eivalues.coeff(i)), numext::imag(m_eivalues.coeff(i)),"},
{"lineNum":"  339","line":"                                       -numext::imag(m_eivalues.coeff(i)), numext::real(m_eivalues.coeff(i));"},
{"lineNum":"  340","line":"      ++i;"},
{"lineNum":"  341","line":"    }"},
{"lineNum":"  342","line":"  }"},
{"lineNum":"  343","line":"  return matD;"},
{"lineNum":"  344","line":"}"},
{"lineNum":"  345","line":""},
{"lineNum":"  346","line":"template<typename MatrixType>"},
{"lineNum":"  347","line":"typename EigenSolver<MatrixType>::EigenvectorsType EigenSolver<MatrixType>::eigenvectors() const"},
{"lineNum":"  348","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  349","line":"  eigen_assert(m_isInitialized && \"EigenSolver is not initialized.\");"},
{"lineNum":"  350","line":"  eigen_assert(m_eigenvectorsOk && \"The eigenvectors have not been computed together with the eigenvalues.\");"},
{"lineNum":"  351","line":"  const RealScalar precision = RealScalar(2)*NumTraits<RealScalar>::epsilon();"},
{"lineNum":"  352","line":"  Index n = m_eivec.cols();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  353","line":"  EigenvectorsType matV(n,n);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  354","line":"  for (Index j=0; j<n; ++j)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  355","line":"  {"},
{"lineNum":"  356","line":"    if (internal::isMuchSmallerThan(numext::imag(m_eivalues.coeff(j)), numext::real(m_eivalues.coeff(j)), precision) || j+1==n)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  357","line":"    {"},
{"lineNum":"  358","line":"      // we have a real eigen value"},
{"lineNum":"  359","line":"      matV.col(j) = m_eivec.col(j).template cast<ComplexScalar>();"},
{"lineNum":"  360","line":"      matV.col(j).normalize();"},
{"lineNum":"  361","line":"    }"},
{"lineNum":"  362","line":"    else"},
{"lineNum":"  363","line":"    {"},
{"lineNum":"  364","line":"      // we have a pair of complex eigen values"},
{"lineNum":"  365","line":"      for (Index i=0; i<n; ++i)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  366","line":"      {"},
{"lineNum":"  367","line":"        matV.coeffRef(i,j)   = ComplexScalar(m_eivec.coeff(i,j),  m_eivec.coeff(i,j+1));","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  368","line":"        matV.coeffRef(i,j+1) = ComplexScalar(m_eivec.coeff(i,j), -m_eivec.coeff(i,j+1));","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  369","line":"      }"},
{"lineNum":"  370","line":"      matV.col(j).normalize();"},
{"lineNum":"  371","line":"      matV.col(j+1).normalize();"},
{"lineNum":"  372","line":"      ++j;"},
{"lineNum":"  373","line":"    }"},
{"lineNum":"  374","line":"  }"},
{"lineNum":"  375","line":"  return matV;"},
{"lineNum":"  376","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  377","line":""},
{"lineNum":"  378","line":"template<typename MatrixType>"},
{"lineNum":"  379","line":"template<typename InputType>"},
{"lineNum":"  380","line":"EigenSolver<MatrixType>&"},
{"lineNum":"  381","line":"EigenSolver<MatrixType>::compute(const EigenBase<InputType>& matrix, bool computeEigenvectors)"},
{"lineNum":"  382","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  383","line":"  check_template_parameters();"},
{"lineNum":"  384","line":""},
{"lineNum":"  385","line":"  using std::sqrt;"},
{"lineNum":"  386","line":"  using std::abs;"},
{"lineNum":"  387","line":"  using numext::isfinite;"},
{"lineNum":"  388","line":"  eigen_assert(matrix.cols() == matrix.rows());"},
{"lineNum":"  389","line":""},
{"lineNum":"  390","line":"  // Reduce to real Schur form."},
{"lineNum":"  391","line":"  m_realSchur.compute(matrix.derived(), computeEigenvectors);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  392","line":""},
{"lineNum":"  393","line":"  m_info = m_realSchur.info();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  394","line":""},
{"lineNum":"  395","line":"  if (m_info == Success)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  396","line":"  {"},
{"lineNum":"  397","line":"    m_matT = m_realSchur.matrixT();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  398","line":"    if (computeEigenvectors)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  399","line":"      m_eivec = m_realSchur.matrixU();"},
{"lineNum":"  400","line":""},
{"lineNum":"  401","line":"    // Compute eigenvalues from matT"},
{"lineNum":"  402","line":"    m_eivalues.resize(matrix.cols());"},
{"lineNum":"  403","line":"    Index i = 0;"},
{"lineNum":"  404","line":"    while (i < matrix.cols())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  405","line":"    {"},
{"lineNum":"  406","line":"      if (i == matrix.cols() - 1 || m_matT.coeff(i+1, i) == Scalar(0))","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  407","line":"      {"},
{"lineNum":"  408","line":"        m_eivalues.coeffRef(i) = m_matT.coeff(i, i);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  409","line":"        if(!(isfinite)(m_eivalues.coeffRef(i)))"},
{"lineNum":"  410","line":"        {"},
{"lineNum":"  411","line":"          m_isInitialized = true;"},
{"lineNum":"  412","line":"          m_eigenvectorsOk = false;"},
{"lineNum":"  413","line":"          m_info = NumericalIssue;"},
{"lineNum":"  414","line":"          return *this;"},
{"lineNum":"  415","line":"        }"},
{"lineNum":"  416","line":"        ++i;"},
{"lineNum":"  417","line":"      }"},
{"lineNum":"  418","line":"      else"},
{"lineNum":"  419","line":"      {"},
{"lineNum":"  420","line":"        Scalar p = Scalar(0.5) * (m_matT.coeff(i, i) - m_matT.coeff(i+1, i+1));","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  421","line":"        Scalar z;"},
{"lineNum":"  422","line":"        // Compute z = sqrt(abs(p * p + m_matT.coeff(i+1, i) * m_matT.coeff(i, i+1)));"},
{"lineNum":"  423","line":"        // without overflow"},
{"lineNum":"  424","line":"        {"},
{"lineNum":"  425","line":"          Scalar t0 = m_matT.coeff(i+1, i);"},
{"lineNum":"  426","line":"          Scalar t1 = m_matT.coeff(i, i+1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  427","line":"          Scalar maxval = numext::maxi<Scalar>(abs(p),numext::maxi<Scalar>(abs(t0),abs(t1)));"},
{"lineNum":"  428","line":"          t0 /= maxval;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  429","line":"          t1 /= maxval;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  430","line":"          Scalar p0 = p/maxval;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  431","line":"          z = maxval * sqrt(abs(p0 * p0 + t0 * t1));","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  432","line":"        }"},
{"lineNum":"  433","line":""},
{"lineNum":"  434","line":"        m_eivalues.coeffRef(i)   = ComplexScalar(m_matT.coeff(i+1, i+1) + p, z);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  435","line":"        m_eivalues.coeffRef(i+1) = ComplexScalar(m_matT.coeff(i+1, i+1) + p, -z);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  436","line":"        if(!((isfinite)(m_eivalues.coeffRef(i)) && (isfinite)(m_eivalues.coeffRef(i+1))))","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  437","line":"        {"},
{"lineNum":"  438","line":"          m_isInitialized = true;"},
{"lineNum":"  439","line":"          m_eigenvectorsOk = false;"},
{"lineNum":"  440","line":"          m_info = NumericalIssue;"},
{"lineNum":"  441","line":"          return *this;"},
{"lineNum":"  442","line":"        }"},
{"lineNum":"  443","line":"        i += 2;"},
{"lineNum":"  444","line":"      }"},
{"lineNum":"  445","line":"    }"},
{"lineNum":"  446","line":""},
{"lineNum":"  447","line":"    // Compute eigenvectors."},
{"lineNum":"  448","line":"    if (computeEigenvectors)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  449","line":"      doComputeEigenvectors();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  450","line":"  }"},
{"lineNum":"  451","line":""},
{"lineNum":"  452","line":"  m_isInitialized = true;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  453","line":"  m_eigenvectorsOk = computeEigenvectors;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  454","line":""},
{"lineNum":"  455","line":"  return *this;"},
{"lineNum":"  456","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  457","line":""},
{"lineNum":"  458","line":""},
{"lineNum":"  459","line":"template<typename MatrixType>"},
{"lineNum":"  460","line":"void EigenSolver<MatrixType>::doComputeEigenvectors()"},
{"lineNum":"  461","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  462","line":"  using std::abs;"},
{"lineNum":"  463","line":"  const Index size = m_eivec.cols();"},
{"lineNum":"  464","line":"  const Scalar eps = NumTraits<Scalar>::epsilon();"},
{"lineNum":"  465","line":""},
{"lineNum":"  466","line":"  // inefficient! this is already computed in RealSchur"},
{"lineNum":"  467","line":"  Scalar norm(0);"},
{"lineNum":"  468","line":"  for (Index j = 0; j < size; ++j)","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  469","line":"  {"},
{"lineNum":"  470","line":"    norm += m_matT.row(j).segment((std::max)(j-1,Index(0)), size-(std::max)(j-1,Index(0))).cwiseAbs().sum();","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  471","line":"  }"},
{"lineNum":"  472","line":""},
{"lineNum":"  473","line":"  // Backsubstitute to find vectors of upper triangular form"},
{"lineNum":"  474","line":"  if (norm == Scalar(0))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  475","line":"  {"},
{"lineNum":"  476","line":"    return;"},
{"lineNum":"  477","line":"  }"},
{"lineNum":"  478","line":""},
{"lineNum":"  479","line":"  for (Index n = size-1; n >= 0; n--)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  480","line":"  {"},
{"lineNum":"  481","line":"    Scalar p = m_eivalues.coeff(n).real();"},
{"lineNum":"  482","line":"    Scalar q = m_eivalues.coeff(n).imag();"},
{"lineNum":"  483","line":""},
{"lineNum":"  484","line":"    // Scalar vector"},
{"lineNum":"  485","line":"    if (q == Scalar(0))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  486","line":"    {"},
{"lineNum":"  487","line":"      Scalar lastr(0), lastw(0);"},
{"lineNum":"  488","line":"      Index l = n;"},
{"lineNum":"  489","line":""},
{"lineNum":"  490","line":"      m_matT.coeffRef(n,n) = Scalar(1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  491","line":"      for (Index i = n-1; i >= 0; i--)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  492","line":"      {"},
{"lineNum":"  493","line":"        Scalar w = m_matT.coeff(i,i) - p;"},
{"lineNum":"  494","line":"        Scalar r = m_matT.row(i).segment(l,n-l+1).dot(m_matT.col(n).segment(l, n-l+1));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  495","line":""},
{"lineNum":"  496","line":"        if (m_eivalues.coeff(i).imag() < Scalar(0))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  497","line":"        {"},
{"lineNum":"  498","line":"          lastw = w;"},
{"lineNum":"  499","line":"          lastr = r;"},
{"lineNum":"  500","line":"        }"},
{"lineNum":"  501","line":"        else"},
{"lineNum":"  502","line":"        {"},
{"lineNum":"  503","line":"          l = i;"},
{"lineNum":"  504","line":"          if (m_eivalues.coeff(i).imag() == Scalar(0))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  505","line":"          {"},
{"lineNum":"  506","line":"            if (w != Scalar(0))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  507","line":"              m_matT.coeffRef(i,n) = -r / w;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  508","line":"            else"},
{"lineNum":"  509","line":"              m_matT.coeffRef(i,n) = -r / (eps * norm);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  510","line":"          }"},
{"lineNum":"  511","line":"          else // Solve real equations"},
{"lineNum":"  512","line":"          {"},
{"lineNum":"  513","line":"            Scalar x = m_matT.coeff(i,i+1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  514","line":"            Scalar y = m_matT.coeff(i+1,i);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  515","line":"            Scalar denom = (m_eivalues.coeff(i).real() - p) * (m_eivalues.coeff(i).real() - p) + m_eivalues.coeff(i).imag() * m_eivalues.coeff(i).imag();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  516","line":"            Scalar t = (x * lastr - lastw * r) / denom;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  517","line":"            m_matT.coeffRef(i,n) = t;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  518","line":"            if (abs(x) > abs(lastw))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  519","line":"              m_matT.coeffRef(i+1,n) = (-r - w * t) / x;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  520","line":"            else"},
{"lineNum":"  521","line":"              m_matT.coeffRef(i+1,n) = (-lastr - y * t) / lastw;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  522","line":"          }"},
{"lineNum":"  523","line":""},
{"lineNum":"  524","line":"          // Overflow control"},
{"lineNum":"  525","line":"          Scalar t = abs(m_matT.coeff(i,n));"},
{"lineNum":"  526","line":"          if ((eps * t) * t > Scalar(1))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  527","line":"            m_matT.col(n).tail(size-i) /= t;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  528","line":"        }"},
{"lineNum":"  529","line":"      }"},
{"lineNum":"  530","line":"    }"},
{"lineNum":"  531","line":"    else if (q < Scalar(0) && n > 0) // Complex vector","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  532","line":"    {"},
{"lineNum":"  533","line":"      Scalar lastra(0), lastsa(0), lastw(0);"},
{"lineNum":"  534","line":"      Index l = n-1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  535","line":""},
{"lineNum":"  536","line":"      // Last vector component imaginary so matrix is triangular"},
{"lineNum":"  537","line":"      if (abs(m_matT.coeff(n,n-1)) > abs(m_matT.coeff(n-1,n)))","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  538","line":"      {"},
{"lineNum":"  539","line":"        m_matT.coeffRef(n-1,n-1) = q / m_matT.coeff(n,n-1);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  540","line":"        m_matT.coeffRef(n-1,n) = -(m_matT.coeff(n,n) - p) / m_matT.coeff(n,n-1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  541","line":"      }"},
{"lineNum":"  542","line":"      else"},
{"lineNum":"  543","line":"      {"},
{"lineNum":"  544","line":"        ComplexScalar cc = ComplexScalar(Scalar(0),-m_matT.coeff(n-1,n)) / ComplexScalar(m_matT.coeff(n-1,n-1)-p,q);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  545","line":"        m_matT.coeffRef(n-1,n-1) = numext::real(cc);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  546","line":"        m_matT.coeffRef(n-1,n) = numext::imag(cc);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  547","line":"      }"},
{"lineNum":"  548","line":"      m_matT.coeffRef(n,n-1) = Scalar(0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  549","line":"      m_matT.coeffRef(n,n) = Scalar(1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  550","line":"      for (Index i = n-2; i >= 0; i--)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  551","line":"      {"},
{"lineNum":"  552","line":"        Scalar ra = m_matT.row(i).segment(l, n-l+1).dot(m_matT.col(n-1).segment(l, n-l+1));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  553","line":"        Scalar sa = m_matT.row(i).segment(l, n-l+1).dot(m_matT.col(n).segment(l, n-l+1));"},
{"lineNum":"  554","line":"        Scalar w = m_matT.coeff(i,i) - p;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  555","line":""},
{"lineNum":"  556","line":"        if (m_eivalues.coeff(i).imag() < Scalar(0))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  557","line":"        {"},
{"lineNum":"  558","line":"          lastw = w;"},
{"lineNum":"  559","line":"          lastra = ra;"},
{"lineNum":"  560","line":"          lastsa = sa;"},
{"lineNum":"  561","line":"        }"},
{"lineNum":"  562","line":"        else"},
{"lineNum":"  563","line":"        {"},
{"lineNum":"  564","line":"          l = i;"},
{"lineNum":"  565","line":"          if (m_eivalues.coeff(i).imag() == RealScalar(0))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  566","line":"          {"},
{"lineNum":"  567","line":"            ComplexScalar cc = ComplexScalar(-ra,-sa) / ComplexScalar(w,q);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  568","line":"            m_matT.coeffRef(i,n-1) = numext::real(cc);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  569","line":"            m_matT.coeffRef(i,n) = numext::imag(cc);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  570","line":"          }"},
{"lineNum":"  571","line":"          else"},
{"lineNum":"  572","line":"          {"},
{"lineNum":"  573","line":"            // Solve complex equations"},
{"lineNum":"  574","line":"            Scalar x = m_matT.coeff(i,i+1);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  575","line":"            Scalar y = m_matT.coeff(i+1,i);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  576","line":"            Scalar vr = (m_eivalues.coeff(i).real() - p) * (m_eivalues.coeff(i).real() - p) + m_eivalues.coeff(i).imag() * m_eivalues.coeff(i).imag() - q * q;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  577","line":"            Scalar vi = (m_eivalues.coeff(i).real() - p) * Scalar(2) * q;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  578","line":"            if ((vr == Scalar(0)) && (vi == Scalar(0)))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  579","line":"              vr = eps * norm * (abs(w) + abs(q) + abs(x) + abs(y) + abs(lastw));","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  580","line":""},
{"lineNum":"  581","line":"            ComplexScalar cc = ComplexScalar(x*lastra-lastw*ra+q*sa,x*lastsa-lastw*sa-q*ra) / ComplexScalar(vr,vi);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  582","line":"            m_matT.coeffRef(i,n-1) = numext::real(cc);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  583","line":"            m_matT.coeffRef(i,n) = numext::imag(cc);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  584","line":"            if (abs(x) > (abs(lastw) + abs(q)))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  585","line":"            {"},
{"lineNum":"  586","line":"              m_matT.coeffRef(i+1,n-1) = (-ra - w * m_matT.coeff(i,n-1) + q * m_matT.coeff(i,n)) / x;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  587","line":"              m_matT.coeffRef(i+1,n) = (-sa - w * m_matT.coeff(i,n) - q * m_matT.coeff(i,n-1)) / x;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  588","line":"            }"},
{"lineNum":"  589","line":"            else"},
{"lineNum":"  590","line":"            {"},
{"lineNum":"  591","line":"              cc = ComplexScalar(-lastra-y*m_matT.coeff(i,n-1),-lastsa-y*m_matT.coeff(i,n)) / ComplexScalar(lastw,q);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  592","line":"              m_matT.coeffRef(i+1,n-1) = numext::real(cc);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  593","line":"              m_matT.coeffRef(i+1,n) = numext::imag(cc);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  594","line":"            }"},
{"lineNum":"  595","line":"          }"},
{"lineNum":"  596","line":""},
{"lineNum":"  597","line":"          // Overflow control"},
{"lineNum":"  598","line":"          Scalar t = numext::maxi<Scalar>(abs(m_matT.coeff(i,n-1)),abs(m_matT.coeff(i,n)));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  599","line":"          if ((eps * t) * t > Scalar(1))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  600","line":"            m_matT.block(i, n-1, size-i, 2) /= t;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  601","line":""},
{"lineNum":"  602","line":"        }"},
{"lineNum":"  603","line":"      }"},
{"lineNum":"  604","line":""},
{"lineNum":"  605","line":"      // We handled a pair of complex conjugate eigenvalues, so need to skip them both"},
{"lineNum":"  606","line":"      n--;"},
{"lineNum":"  607","line":"    }"},
{"lineNum":"  608","line":"    else"},
{"lineNum":"  609","line":"    {"},
{"lineNum":"  610","line":"      eigen_assert(0 && \"Internal bug in EigenSolver (INF or NaN has not been detected)\"); // this should not happen"},
{"lineNum":"  611","line":"    }"},
{"lineNum":"  612","line":"  }"},
{"lineNum":"  613","line":""},
{"lineNum":"  614","line":"  // Back transformation to get eigenvectors of original matrix"},
{"lineNum":"  615","line":"  for (Index j = size-1; j >= 0; j--)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  616","line":"  {"},
{"lineNum":"  617","line":"    m_tmp.noalias() = m_eivec.leftCols(j+1) * m_matT.col(j).segment(0, j+1);"},
{"lineNum":"  618","line":"    m_eivec.col(j) = m_tmp;"},
{"lineNum":"  619","line":"  }"},
{"lineNum":"  620","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  621","line":""},
{"lineNum":"  622","line":"} // end namespace Eigen"},
{"lineNum":"  623","line":""},
{"lineNum":"  624","line":"#endif // EIGEN_EIGENSOLVER_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 105, "covered" : 0,};
var merged_data = [];
