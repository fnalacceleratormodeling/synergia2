var data = {lines:[
{"lineNum":"    1","line":"#ifndef INDEPENDENT_OPERATION_H_"},
{"lineNum":"    2","line":"#define INDEPENDENT_OPERATION_H_"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#include \"synergia/bunch/bunch.h\""},
{"lineNum":"    5","line":"#include \"synergia/lattice/lattice_element_slice.h\""},
{"lineNum":"    6","line":"#include \"synergia/utils/logger.h\""},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"class Independent_operation"},
{"lineNum":"    9","line":"{"},
{"lineNum":"   10","line":"private:"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"    std::string type;"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"private:"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"    virtual void print_impl(Logger & logger) const { }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   17","line":"    virtual void apply_impl(Bunch & bunch, Logger & logger) const = 0;"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"public:"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"    Independent_operation(std::string const & type) : type(type) { }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   22","line":"    virtual ~Independent_operation() = default;","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"    void apply(Bunch & bunch, Logger & logger) const"},
{"lineNum":"   25","line":"    { apply_impl(bunch, logger); }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"    std::string const & get_type() const"},
{"lineNum":"   28","line":"    { return type; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"    void print(Logger & logger) const"},
{"lineNum":"   31","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   32","line":"        logger(LoggerV::INFO_OPN) << \"\\ttype = \" << type << \", \";","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   33","line":"        print_impl(logger);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   34","line":"    }"},
{"lineNum":"   35","line":"};"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"class LibFF_operation : public Independent_operation","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   39","line":"{"},
{"lineNum":"   40","line":"private:"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"    std::vector<Lattice_element_slice> slices;"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"private:"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"    void print_impl(Logger & logger) const override { }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   47","line":"    void apply_impl(Bunch & bunch, Logger & logger) const override;"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"public:"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"    LibFF_operation(std::vector<Lattice_element_slice> const& slices)"},
{"lineNum":"   52","line":"        : Independent_operation(\"LibFF\"), slices(slices)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   53","line":"    { }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   54","line":"};"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"#endif /* INDEPENDENT_OPERATION_H_ */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 12, "covered" : 0,};
var merged_data = [];
