var data = {lines:[
{"lineNum":"    1","line":"/*============================================================================="},
{"lineNum":"    2","line":"    Copyright (c) 2001-2011 Joel de Guzman"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"    Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    5","line":"    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    6","line":"=============================================================================*/"},
{"lineNum":"    7","line":"#if !defined(SPIRIT_ACTION_JANUARY_07_2007_1128AM)"},
{"lineNum":"    8","line":"#define SPIRIT_ACTION_JANUARY_07_2007_1128AM"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#if defined(_MSC_VER)"},
{"lineNum":"   11","line":"#pragma once"},
{"lineNum":"   12","line":"#endif"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"#include <boost/spirit/home/qi/meta_compiler.hpp>"},
{"lineNum":"   15","line":"#include <boost/spirit/home/qi/parser.hpp>"},
{"lineNum":"   16","line":"#include <boost/spirit/home/qi/detail/attributes.hpp>"},
{"lineNum":"   17","line":"#include <boost/spirit/home/support/argument.hpp>"},
{"lineNum":"   18","line":"#include <boost/spirit/home/support/context.hpp>"},
{"lineNum":"   19","line":"#include <boost/spirit/home/support/unused.hpp>"},
{"lineNum":"   20","line":"#include <boost/spirit/home/support/info.hpp>"},
{"lineNum":"   21","line":"#include <boost/spirit/home/support/action_dispatch.hpp>"},
{"lineNum":"   22","line":"#include <boost/spirit/home/support/handles_container.hpp>"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"#include <boost/mpl/bool.hpp>"},
{"lineNum":"   25","line":"#include <boost/mpl/if.hpp>"},
{"lineNum":"   26","line":"#include <boost/type_traits/remove_const.hpp>"},
{"lineNum":"   27","line":"#include <boost/type_traits/is_same.hpp>"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"namespace boost { namespace spirit { namespace qi"},
{"lineNum":"   30","line":"{"},
{"lineNum":"   31","line":"    BOOST_PP_REPEAT(SPIRIT_ARGUMENTS_LIMIT, SPIRIT_USING_ARGUMENT, _)"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"    template <typename Subject, typename Action>"},
{"lineNum":"   34","line":"    struct action : unary_parser<action<Subject, Action> >","class":"lineNoCov","hits":"0","possible_hits":"149",},
{"lineNum":"   35","line":"    {"},
{"lineNum":"   36","line":"        typedef Subject subject_type;"},
{"lineNum":"   37","line":"        typedef Action action_type;"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"        template <typename Context, typename Iterator>"},
{"lineNum":"   40","line":"        struct attribute"},
{"lineNum":"   41","line":"          : traits::attribute_of<Subject, Context, Iterator>"},
{"lineNum":"   42","line":"        {};"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"        action(Subject const& subject_, Action f_)"},
{"lineNum":"   45","line":"          : subject(subject_), f(f_) {}","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"#ifndef BOOST_SPIRIT_ACTIONS_ALLOW_ATTR_COMPAT"},
{"lineNum":"   48","line":"        template <typename Iterator, typename Context"},
{"lineNum":"   49","line":"          , typename Skipper, typename Attribute>"},
{"lineNum":"   50","line":"        bool parse(Iterator& first, Iterator const& last"},
{"lineNum":"   51","line":"          , Context& context, Skipper const& skipper"},
{"lineNum":"   52","line":"          , Attribute& attr_) const"},
{"lineNum":"   53","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"36",},
{"lineNum":"   54","line":"            typedef typename attribute<Context, Iterator>::type attr_type;"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"            // create an attribute if one is not supplied"},
{"lineNum":"   57","line":"            typedef traits::transform_attribute<"},
{"lineNum":"   58","line":"                Attribute, attr_type, domain> transform;"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"            typename transform::type attr = transform::pre(attr_);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"            Iterator save = first;","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   63","line":"            if (subject.parse(first, last, context, skipper, attr))","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   64","line":"            {"},
{"lineNum":"   65","line":"                // call the function, passing the attribute, the context."},
{"lineNum":"   66","line":"                // The client can return false to fail parsing."},
{"lineNum":"   67","line":"                if (traits::action_dispatch<Subject>()(f, attr, context))","class":"lineNoCov","hits":"0","possible_hits":"19",},
{"lineNum":"   68","line":"                {"},
{"lineNum":"   69","line":"                    // Do up-stream transformation, this integrates the results"},
{"lineNum":"   70","line":"                    // back into the original attribute value, if appropriate."},
{"lineNum":"   71","line":"                    transform::post(attr_, attr);"},
{"lineNum":"   72","line":"                    return true;"},
{"lineNum":"   73","line":"                }"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"                // reset iterators if semantic action failed the match"},
{"lineNum":"   76","line":"                // retrospectively"},
{"lineNum":"   77","line":"                first = save;","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"   78","line":"            }"},
{"lineNum":"   79","line":"            return false;"},
{"lineNum":"   80","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"52",},
{"lineNum":"   81","line":"#else"},
{"lineNum":"   82","line":"        template <typename Iterator, typename Context"},
{"lineNum":"   83","line":"          , typename Skipper, typename Attribute>"},
{"lineNum":"   84","line":"        bool parse(Iterator& first, Iterator const& last"},
{"lineNum":"   85","line":"          , Context& context, Skipper const& skipper"},
{"lineNum":"   86","line":"          , Attribute& attr) const"},
{"lineNum":"   87","line":"        {"},
{"lineNum":"   88","line":"            Iterator save = first;"},
{"lineNum":"   89","line":"            if (subject.parse(first, last, context, skipper, attr)) // Use the attribute as-is"},
{"lineNum":"   90","line":"            {"},
{"lineNum":"   91","line":"                // call the function, passing the attribute, the context."},
{"lineNum":"   92","line":"                // The client can return false to fail parsing."},
{"lineNum":"   93","line":"                if (traits::action_dispatch<Subject>()(f, attr, context))"},
{"lineNum":"   94","line":"                    return true;"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"                // reset iterators if semantic action failed the match"},
{"lineNum":"   97","line":"                // retrospectively"},
{"lineNum":"   98","line":"                first = save;"},
{"lineNum":"   99","line":"            }"},
{"lineNum":"  100","line":"            return false;"},
{"lineNum":"  101","line":"        }"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"        template <typename Iterator, typename Context"},
{"lineNum":"  104","line":"          , typename Skipper>"},
{"lineNum":"  105","line":"        bool parse(Iterator& first, Iterator const& last"},
{"lineNum":"  106","line":"          , Context& context, Skipper const& skipper"},
{"lineNum":"  107","line":"          , unused_type) const"},
{"lineNum":"  108","line":"        {"},
{"lineNum":"  109","line":"            typedef typename attribute<Context, Iterator>::type attr_type;"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"            // synthesize the attribute since one is not supplied"},
{"lineNum":"  112","line":"            attr_type attr = attr_type();"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"            Iterator save = first;"},
{"lineNum":"  115","line":"            if (subject.parse(first, last, context, skipper, attr))"},
{"lineNum":"  116","line":"            {"},
{"lineNum":"  117","line":"                // call the function, passing the attribute, the context."},
{"lineNum":"  118","line":"                // The client can return false to fail parsing."},
{"lineNum":"  119","line":"                if (traits::action_dispatch<Subject>()(f, attr, context))"},
{"lineNum":"  120","line":"                    return true;"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"                // reset iterators if semantic action failed the match"},
{"lineNum":"  123","line":"                // retrospectively"},
{"lineNum":"  124","line":"                first = save;"},
{"lineNum":"  125","line":"            }"},
{"lineNum":"  126","line":"            return false;"},
{"lineNum":"  127","line":"        }"},
{"lineNum":"  128","line":"#endif"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"        template <typename Context>"},
{"lineNum":"  131","line":"        info what(Context& context) const"},
{"lineNum":"  132","line":"        {"},
{"lineNum":"  133","line":"            // the action is transparent (does not add any info)"},
{"lineNum":"  134","line":"            return subject.what(context);"},
{"lineNum":"  135","line":"        }"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"        Subject subject;"},
{"lineNum":"  138","line":"        Action f;"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"    private:"},
{"lineNum":"  141","line":"        // silence MSVC warning C4512: assignment operator could not be generated"},
{"lineNum":"  142","line":"        action& operator= (action const&);"},
{"lineNum":"  143","line":"    };"},
{"lineNum":"  144","line":"}}}"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"namespace boost { namespace spirit"},
{"lineNum":"  147","line":"{"},
{"lineNum":"  148","line":"    // Qi action meta-compiler"},
{"lineNum":"  149","line":"    template <>"},
{"lineNum":"  150","line":"    struct make_component<qi::domain, tag::action>"},
{"lineNum":"  151","line":"    {"},
{"lineNum":"  152","line":"        template <typename Sig>"},
{"lineNum":"  153","line":"        struct result;"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"        template <typename This, typename Elements, typename Modifiers>"},
{"lineNum":"  156","line":"        struct result<This(Elements, Modifiers)>"},
{"lineNum":"  157","line":"        {"},
{"lineNum":"  158","line":"            typedef typename"},
{"lineNum":"  159","line":"                remove_const<typename Elements::car_type>::type"},
{"lineNum":"  160","line":"            subject_type;"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"            typedef typename"},
{"lineNum":"  163","line":"                remove_const<typename Elements::cdr_type::car_type>::type"},
{"lineNum":"  164","line":"            action_type;"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"            typedef qi::action<subject_type, action_type> type;"},
{"lineNum":"  167","line":"        };"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"        template <typename Elements>"},
{"lineNum":"  170","line":"        typename result<make_component(Elements, unused_type)>::type"},
{"lineNum":"  171","line":"        operator()(Elements const& elements, unused_type) const"},
{"lineNum":"  172","line":"        {"},
{"lineNum":"  173","line":"            typename result<make_component(Elements, unused_type)>::type"},
{"lineNum":"  174","line":"                result(elements.car, elements.cdr.car);","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  175","line":"            return result;"},
{"lineNum":"  176","line":"        }"},
{"lineNum":"  177","line":"    };"},
{"lineNum":"  178","line":"}}"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"namespace boost { namespace spirit { namespace traits"},
{"lineNum":"  181","line":"{"},
{"lineNum":"  182","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  183","line":"    template <typename Subject, typename Action>"},
{"lineNum":"  184","line":"    struct has_semantic_action<qi::action<Subject, Action> >"},
{"lineNum":"  185","line":"      : mpl::true_ {};"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  188","line":"    template <typename Subject, typename Action, typename Attribute"},
{"lineNum":"  189","line":"        , typename Context, typename Iterator>"},
{"lineNum":"  190","line":"    struct handles_container<qi::action<Subject, Action>, Attribute"},
{"lineNum":"  191","line":"        , Context, Iterator>"},
{"lineNum":"  192","line":"      : unary_handles_container<Subject, Attribute, Context, Iterator> {};"},
{"lineNum":"  193","line":"}}}"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 10, "covered" : 0,};
var merged_data = [];
