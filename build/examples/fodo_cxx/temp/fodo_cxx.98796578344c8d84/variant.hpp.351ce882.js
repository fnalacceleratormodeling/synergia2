var data = {lines:[
{"lineNum":"    1","line":"//-----------------------------------------------------------------------------"},
{"lineNum":"    2","line":"// boost variant/variant.hpp header file"},
{"lineNum":"    3","line":"// See http://www.boost.org for updates, documentation, and revision history."},
{"lineNum":"    4","line":"//-----------------------------------------------------------------------------"},
{"lineNum":"    5","line":"//"},
{"lineNum":"    6","line":"// Copyright (c) 2002-2003 Eric Friedman, Itay Maman"},
{"lineNum":"    7","line":"// Copyright (c) 2012-2019 Antony Polukhin"},
{"lineNum":"    8","line":"//"},
{"lineNum":"    9","line":"// Distributed under the Boost Software License, Version 1.0. (See"},
{"lineNum":"   10","line":"// accompanying file LICENSE_1_0.txt or copy at"},
{"lineNum":"   11","line":"// http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"// Thanks to Adam Romanek for providing patches for exception-disabled env."},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"#ifndef BOOST_VARIANT_VARIANT_HPP"},
{"lineNum":"   16","line":"#define BOOST_VARIANT_VARIANT_HPP"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"#include <cstddef> // for std::size_t"},
{"lineNum":"   19","line":"#include <new> // for placement new"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"#include <boost/type_index.hpp>"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"#include <boost/variant/detail/config.hpp>"},
{"lineNum":"   24","line":"#include <boost/mpl/aux_/value_wknd.hpp>"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"#include <boost/variant/variant_fwd.hpp>"},
{"lineNum":"   27","line":"#include <boost/variant/detail/backup_holder.hpp>"},
{"lineNum":"   28","line":"#include <boost/variant/detail/enable_recursive_fwd.hpp>"},
{"lineNum":"   29","line":"#include <boost/variant/detail/forced_return.hpp>"},
{"lineNum":"   30","line":"#include <boost/variant/detail/initializer.hpp>"},
{"lineNum":"   31","line":"#include <boost/variant/detail/make_variant_list.hpp>"},
{"lineNum":"   32","line":"#include <boost/variant/detail/over_sequence.hpp>"},
{"lineNum":"   33","line":"#include <boost/variant/detail/visitation_impl.hpp>"},
{"lineNum":"   34","line":"#include <boost/variant/detail/hash_variant.hpp>"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"#include <boost/variant/detail/move.hpp>"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"#include <boost/detail/no_exceptions_support.hpp>"},
{"lineNum":"   39","line":"#include <boost/detail/reference_content.hpp>"},
{"lineNum":"   40","line":"#include <boost/aligned_storage.hpp>"},
{"lineNum":"   41","line":"#include <boost/blank.hpp>"},
{"lineNum":"   42","line":"#include <boost/integer/common_factor_ct.hpp>"},
{"lineNum":"   43","line":"#include <boost/static_assert.hpp>"},
{"lineNum":"   44","line":"#include <boost/preprocessor/cat.hpp>"},
{"lineNum":"   45","line":"#include <boost/preprocessor/repeat.hpp>"},
{"lineNum":"   46","line":"#include <boost/type_traits/alignment_of.hpp>"},
{"lineNum":"   47","line":"#include <boost/type_traits/add_const.hpp>"},
{"lineNum":"   48","line":"#include <boost/type_traits/has_nothrow_constructor.hpp>"},
{"lineNum":"   49","line":"#include <boost/type_traits/has_nothrow_copy.hpp>"},
{"lineNum":"   50","line":"#include <boost/type_traits/is_nothrow_move_assignable.hpp>"},
{"lineNum":"   51","line":"#include <boost/type_traits/is_nothrow_move_constructible.hpp>"},
{"lineNum":"   52","line":"#include <boost/type_traits/is_const.hpp>"},
{"lineNum":"   53","line":"#include <boost/type_traits/is_same.hpp>"},
{"lineNum":"   54","line":"#include <boost/type_traits/is_rvalue_reference.hpp>"},
{"lineNum":"   55","line":"#include <boost/type_traits/is_constructible.hpp>"},
{"lineNum":"   56","line":"#include <boost/type_traits/add_lvalue_reference.hpp>"},
{"lineNum":"   57","line":"#include <boost/utility/enable_if.hpp>"},
{"lineNum":"   58","line":"#include <boost/utility/declval.hpp>"},
{"lineNum":"   59","line":"#include <boost/variant/recursive_wrapper_fwd.hpp>"},
{"lineNum":"   60","line":"#include <boost/variant/static_visitor.hpp>"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"#include <boost/mpl/assert.hpp>"},
{"lineNum":"   63","line":"#include <boost/mpl/begin_end.hpp>"},
{"lineNum":"   64","line":"#include <boost/mpl/bool.hpp>"},
{"lineNum":"   65","line":"#include <boost/mpl/deref.hpp>"},
{"lineNum":"   66","line":"#include <boost/mpl/empty.hpp>"},
{"lineNum":"   67","line":"#include <boost/mpl/eval_if.hpp>"},
{"lineNum":"   68","line":"#include <boost/mpl/find_if.hpp>"},
{"lineNum":"   69","line":"#include <boost/mpl/fold.hpp>"},
{"lineNum":"   70","line":"#include <boost/mpl/front.hpp>"},
{"lineNum":"   71","line":"#include <boost/mpl/identity.hpp>"},
{"lineNum":"   72","line":"#include <boost/mpl/if.hpp>"},
{"lineNum":"   73","line":"#include <boost/mpl/insert_range.hpp>"},
{"lineNum":"   74","line":"#include <boost/mpl/int.hpp>"},
{"lineNum":"   75","line":"#include <boost/mpl/is_sequence.hpp>"},
{"lineNum":"   76","line":"#include <boost/mpl/iterator_range.hpp>"},
{"lineNum":"   77","line":"#include <boost/mpl/iter_fold_if.hpp>"},
{"lineNum":"   78","line":"#include <boost/mpl/list.hpp>"},
{"lineNum":"   79","line":"#include <boost/mpl/logical.hpp>"},
{"lineNum":"   80","line":"#include <boost/mpl/max_element.hpp>"},
{"lineNum":"   81","line":"#include <boost/mpl/next.hpp>"},
{"lineNum":"   82","line":"#include <boost/mpl/not.hpp>"},
{"lineNum":"   83","line":"#include <boost/mpl/pair.hpp>"},
{"lineNum":"   84","line":"#include <boost/mpl/protect.hpp>"},
{"lineNum":"   85","line":"#include <boost/mpl/push_front.hpp>"},
{"lineNum":"   86","line":"#include <boost/mpl/same_as.hpp>"},
{"lineNum":"   87","line":"#include <boost/mpl/size_t.hpp>"},
{"lineNum":"   88","line":"#include <boost/mpl/sizeof.hpp>"},
{"lineNum":"   89","line":"#include <boost/mpl/transform.hpp>"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   92","line":"// Implementation Macros:"},
{"lineNum":"   93","line":"//"},
{"lineNum":"   94","line":"// BOOST_VARIANT_VISITATION_UNROLLING_LIMIT"},
{"lineNum":"   95","line":"//   Defined in boost/variant/detail/visitation_impl.hpp."},
{"lineNum":"   96","line":"//"},
{"lineNum":"   97","line":"// BOOST_VARIANT_MINIMIZE_SIZE"},
{"lineNum":"   98","line":"//   When #defined, implementation employs all known means to minimize the"},
{"lineNum":"   99","line":"//   size of variant obje   cts. However, often unsuccessful due to alignment"},
{"lineNum":"  100","line":"//   issues, and potentially harmful to runtime speed, so not enabled by"},
{"lineNum":"  101","line":"//   default. (TODO: Investigate further.)"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"#if defined(BOOST_VARIANT_MINIMIZE_SIZE)"},
{"lineNum":"  104","line":"#   include <climits> // for SCHAR_MAX"},
{"lineNum":"  105","line":"#   include <boost/mpl/eval_if.hpp>"},
{"lineNum":"  106","line":"#   include <boost/mpl/equal_to.hpp>"},
{"lineNum":"  107","line":"#   include <boost/mpl/identity.hpp>"},
{"lineNum":"  108","line":"#   include <boost/mpl/int.hpp>"},
{"lineNum":"  109","line":"#   include <boost/mpl/if.hpp>"},
{"lineNum":"  110","line":"#   include <boost/mpl/less.hpp>"},
{"lineNum":"  111","line":"#   include <boost/mpl/long.hpp>"},
{"lineNum":"  112","line":"#   include <boost/mpl/O1_size.hpp>"},
{"lineNum":"  113","line":"#endif"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"namespace boost {"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"namespace detail { namespace variant {"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  121","line":"// (detail) metafunction max_value"},
{"lineNum":"  122","line":"//"},
{"lineNum":"  123","line":"// Finds the maximum value of the unary metafunction F over Sequence."},
{"lineNum":"  124","line":"//"},
{"lineNum":"  125","line":"template <typename Sequence, typename F>"},
{"lineNum":"  126","line":"struct max_value"},
{"lineNum":"  127","line":"{"},
{"lineNum":"  128","line":"private: // helpers, for metafunction result (below)"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"    typedef typename mpl::transform1<Sequence, F>::type transformed_;"},
{"lineNum":"  131","line":"    typedef typename mpl::max_element<transformed_"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"        >::type max_it;"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"public: // metafunction result"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"    typedef typename mpl::deref<max_it>::type"},
{"lineNum":"  138","line":"        type;"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"};"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"struct add_alignment"},
{"lineNum":"  143","line":"{"},
{"lineNum":"  144","line":"    template <typename State, typename Item>"},
{"lineNum":"  145","line":"    struct apply"},
{"lineNum":"  146","line":"        : mpl::size_t<"},
{"lineNum":"  147","line":"              ::boost::integer::static_lcm<"},
{"lineNum":"  148","line":"                  BOOST_MPL_AUX_VALUE_WKND(State)::value"},
{"lineNum":"  149","line":"                , ::boost::alignment_of<Item>::value"},
{"lineNum":"  150","line":"                >::value"},
{"lineNum":"  151","line":"            >"},
{"lineNum":"  152","line":"    {};"},
{"lineNum":"  153","line":"};"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  156","line":"// (detail) metafunction find_fallback_type"},
{"lineNum":"  157","line":"//"},
{"lineNum":"  158","line":"// Provides a fallback (i.e., nothrow default-constructible) type from the"},
{"lineNum":"  159","line":"// specified sequence, or no_fallback_type if not found."},
{"lineNum":"  160","line":"//"},
{"lineNum":"  161","line":"// This implementation is designed to prefer boost::blank over other potential"},
{"lineNum":"  162","line":"// fallback types, regardless of its position in the specified sequence."},
{"lineNum":"  163","line":"//"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"class no_fallback_type;"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"struct find_fallback_type_pred"},
{"lineNum":"  168","line":"{"},
{"lineNum":"  169","line":"    template <typename Iterator>"},
{"lineNum":"  170","line":"    struct apply"},
{"lineNum":"  171","line":"    {"},
{"lineNum":"  172","line":"    private:"},
{"lineNum":"  173","line":"        typedef typename mpl::deref<Iterator>::type t_;"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"    public:"},
{"lineNum":"  176","line":"        typedef mpl::not_< has_nothrow_constructor<t_> > type;"},
{"lineNum":"  177","line":"    };"},
{"lineNum":"  178","line":"};"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"template <typename Types>"},
{"lineNum":"  181","line":"struct find_fallback_type"},
{"lineNum":"  182","line":"{"},
{"lineNum":"  183","line":"private: // helpers, for metafunction result (below)"},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"    typedef typename mpl::end<Types>::type end_it;"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"    // [Find the first suitable fallback type...]"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"    typedef typename mpl::iter_fold_if<"},
{"lineNum":"  190","line":"          Types"},
{"lineNum":"  191","line":"        , mpl::int_<0>, mpl::protect< mpl::next<> >"},
{"lineNum":"  192","line":"        , mpl::protect< find_fallback_type_pred >"},
{"lineNum":"  193","line":"        >::type first_result_;"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"    typedef typename first_result_::first first_result_index;"},
{"lineNum":"  196","line":"    typedef typename first_result_::second first_result_it;"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"    // [...now search the rest of the sequence for boost::blank...]"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"    typedef typename mpl::iter_fold_if<"},
{"lineNum":"  201","line":"          mpl::iterator_range< first_result_it,end_it >"},
{"lineNum":"  202","line":"        , first_result_index, mpl::protect< mpl::next<> >"},
{"lineNum":"  203","line":"        , mpl::protect< mpl::not_same_as<boost::blank> >"},
{"lineNum":"  204","line":"        >::type second_result_;"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"    typedef typename second_result_::second second_result_it;"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"public: // metafunction result"},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"    // [...and return the results of the search:]"},
{"lineNum":"  211","line":"    typedef typename mpl::eval_if<"},
{"lineNum":"  212","line":"          is_same< second_result_it,end_it >"},
{"lineNum":"  213","line":"        , mpl::if_<"},
{"lineNum":"  214","line":"              is_same< first_result_it,end_it >"},
{"lineNum":"  215","line":"            , mpl::pair< no_fallback_type,no_fallback_type >"},
{"lineNum":"  216","line":"            , first_result_"},
{"lineNum":"  217","line":"            >"},
{"lineNum":"  218","line":"        , mpl::identity< second_result_ >"},
{"lineNum":"  219","line":"        >::type type;"},
{"lineNum":"  220","line":""},
{"lineNum":"  221","line":"};"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"#ifndef BOOST_NO_CXX11_NOEXCEPT"},
{"lineNum":"  224","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  225","line":"// (detail) metafunction is_variant_move_noexcept_constructible"},
{"lineNum":"  226","line":"//"},
{"lineNum":"  227","line":"// Returns true_type if all the types are nothrow move constructible."},
{"lineNum":"  228","line":"//"},
{"lineNum":"  229","line":"template <class Types>"},
{"lineNum":"  230","line":"struct is_variant_move_noexcept_constructible {"},
{"lineNum":"  231","line":"    typedef typename boost::mpl::find_if<"},
{"lineNum":"  232","line":"        Types, mpl::not_<boost::is_nothrow_move_constructible<boost::mpl::_1> >"},
{"lineNum":"  233","line":"    >::type iterator_t;"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"    typedef typename boost::mpl::end<Types>::type end_t;"},
{"lineNum":"  236","line":"    typedef typename boost::is_same<"},
{"lineNum":"  237","line":"        iterator_t, end_t"},
{"lineNum":"  238","line":"    >::type type;"},
{"lineNum":"  239","line":"};"},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  242","line":"// (detail) metafunction is_variant_move_noexcept_assignable"},
{"lineNum":"  243","line":"//"},
{"lineNum":"  244","line":"// Returns true_type if all the types are nothrow move constructible."},
{"lineNum":"  245","line":"//"},
{"lineNum":"  246","line":"template <class Types>"},
{"lineNum":"  247","line":"struct is_variant_move_noexcept_assignable {"},
{"lineNum":"  248","line":"    typedef typename boost::mpl::find_if<"},
{"lineNum":"  249","line":"        Types, mpl::not_<boost::is_nothrow_move_assignable<boost::mpl::_1> >"},
{"lineNum":"  250","line":"    >::type iterator_t;"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"    typedef typename boost::mpl::end<Types>::type end_t;"},
{"lineNum":"  253","line":"    typedef typename boost::is_same<"},
{"lineNum":"  254","line":"        iterator_t, end_t"},
{"lineNum":"  255","line":"    >::type type;"},
{"lineNum":"  256","line":"};"},
{"lineNum":"  257","line":"#endif // BOOST_NO_CXX11_NOEXCEPT"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  260","line":"// (detail) metafunction is_variant_constructible_from"},
{"lineNum":"  261","line":"//"},
{"lineNum":"  262","line":"// Derives from true_type if at least one variant\'s type is constructible from T."},
{"lineNum":"  263","line":"//"},
{"lineNum":"  264","line":"template <class T1, class T2>"},
{"lineNum":"  265","line":"struct is_constructible_ext:"},
{"lineNum":"  266","line":"    boost::mpl::or_<"},
{"lineNum":"  267","line":"        boost::is_constructible<"},
{"lineNum":"  268","line":"            T1,"},
{"lineNum":"  269","line":"            T2"},
{"lineNum":"  270","line":"        >,"},
{"lineNum":"  271","line":"        boost::is_constructible<"},
{"lineNum":"  272","line":"            T1,"},
{"lineNum":"  273","line":"            typename boost::add_lvalue_reference<T2>::type"},
{"lineNum":"  274","line":"        >"},
{"lineNum":"  275","line":"    >"},
{"lineNum":"  276","line":"{};"},
{"lineNum":"  277","line":""},
{"lineNum":"  278","line":"template <class T, class Types>"},
{"lineNum":"  279","line":"struct is_variant_constructible_from:"},
{"lineNum":"  280","line":"    boost::mpl::not_< boost::is_same<"},
{"lineNum":"  281","line":"        typename boost::mpl::find_if<"},
{"lineNum":"  282","line":"            Types,"},
{"lineNum":"  283","line":"            is_constructible_ext<boost::mpl::_1, T>"},
{"lineNum":"  284","line":"        >::type,"},
{"lineNum":"  285","line":"        typename boost::mpl::end<Types>::type"},
{"lineNum":"  286","line":"    > >"},
{"lineNum":"  287","line":"{};"},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"template <BOOST_VARIANT_ENUM_PARAMS(typename T), class Types>"},
{"lineNum":"  290","line":"struct is_variant_constructible_from< boost::variant<BOOST_VARIANT_ENUM_PARAMS(T)>, Types >:"},
{"lineNum":"  291","line":"    boost::is_same<"},
{"lineNum":"  292","line":"        typename boost::mpl::find_if<"},
{"lineNum":"  293","line":"            typename boost::variant<BOOST_VARIANT_ENUM_PARAMS(T)>::recursive_enabled_types,"},
{"lineNum":"  294","line":"            mpl::not_< is_variant_constructible_from< boost::mpl::_1, Types> >"},
{"lineNum":"  295","line":"        >::type,"},
{"lineNum":"  296","line":"        typename boost::mpl::end< typename boost::variant<BOOST_VARIANT_ENUM_PARAMS(T)>::recursive_enabled_types >::type"},
{"lineNum":"  297","line":"    >"},
{"lineNum":"  298","line":"{};"},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"template <BOOST_VARIANT_ENUM_PARAMS(typename T), class Types>"},
{"lineNum":"  301","line":"struct is_variant_constructible_from< const boost::variant<BOOST_VARIANT_ENUM_PARAMS(T)>& , Types >:"},
{"lineNum":"  302","line":"    is_variant_constructible_from<boost::variant<BOOST_VARIANT_ENUM_PARAMS(T)>, Types >"},
{"lineNum":"  303","line":"{};"},
{"lineNum":"  304","line":""},
{"lineNum":"  305","line":"template <BOOST_VARIANT_ENUM_PARAMS(typename T), class Types>"},
{"lineNum":"  306","line":"struct is_variant_constructible_from< boost::variant<BOOST_VARIANT_ENUM_PARAMS(T)>& , Types >:"},
{"lineNum":"  307","line":"    is_variant_constructible_from<boost::variant<BOOST_VARIANT_ENUM_PARAMS(T)>, Types >"},
{"lineNum":"  308","line":"{};"},
{"lineNum":"  309","line":""},
{"lineNum":"  310","line":"#ifndef BOOST_NO_CXX11_RVALUE_REFERENCES"},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":"template <BOOST_VARIANT_ENUM_PARAMS(typename T), class Types>"},
{"lineNum":"  313","line":"struct is_variant_constructible_from< boost::variant<BOOST_VARIANT_ENUM_PARAMS(T)>&& , Types >:"},
{"lineNum":"  314","line":"    is_variant_constructible_from<boost::variant<BOOST_VARIANT_ENUM_PARAMS(T)>, Types >"},
{"lineNum":"  315","line":"{};"},
{"lineNum":"  316","line":""},
{"lineNum":"  317","line":"template <BOOST_VARIANT_ENUM_PARAMS(typename T), class Types>"},
{"lineNum":"  318","line":"struct is_variant_constructible_from< boost::variant<BOOST_VARIANT_ENUM_PARAMS(T)> const && , Types >:"},
{"lineNum":"  319","line":"    is_variant_constructible_from<boost::variant<BOOST_VARIANT_ENUM_PARAMS(T)>, Types >"},
{"lineNum":"  320","line":"{};"},
{"lineNum":"  321","line":""},
{"lineNum":"  322","line":"#endif // #ifndef BOOST_NO_CXX11_RVALUE_REFERENCE"},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":""},
{"lineNum":"  325","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  326","line":"// (detail) metafunction make_storage"},
{"lineNum":"  327","line":"//"},
{"lineNum":"  328","line":"// Provides an aligned storage type capable of holding any of the types"},
{"lineNum":"  329","line":"// specified in the given type-sequence."},
{"lineNum":"  330","line":"//"},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"template <typename Types, typename NeverUsesBackupFlag>"},
{"lineNum":"  333","line":"struct make_storage"},
{"lineNum":"  334","line":"{"},
{"lineNum":"  335","line":"private: // helpers, for metafunction result (below)"},
{"lineNum":"  336","line":""},
{"lineNum":"  337","line":"    typedef typename mpl::eval_if<"},
{"lineNum":"  338","line":"          NeverUsesBackupFlag"},
{"lineNum":"  339","line":"        , mpl::identity< Types >"},
{"lineNum":"  340","line":"        , mpl::push_front<"},
{"lineNum":"  341","line":"              Types, backup_holder<void*>"},
{"lineNum":"  342","line":"            >"},
{"lineNum":"  343","line":"        >::type types;"},
{"lineNum":"  344","line":""},
{"lineNum":"  345","line":"    typedef typename max_value<"},
{"lineNum":"  346","line":"          types, mpl::sizeof_<mpl::_1>"},
{"lineNum":"  347","line":"        >::type max_size;"},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"#if !BOOST_WORKAROUND(__BORLANDC__, BOOST_TESTED_AT(0x0551))"},
{"lineNum":"  350","line":""},
{"lineNum":"  351","line":"    typedef typename mpl::fold<"},
{"lineNum":"  352","line":"          types"},
{"lineNum":"  353","line":"        , mpl::size_t<1>"},
{"lineNum":"  354","line":"        , add_alignment"},
{"lineNum":"  355","line":"        >::type max_alignment;"},
{"lineNum":"  356","line":""},
{"lineNum":"  357","line":"#else // borland"},
{"lineNum":"  358","line":""},
{"lineNum":"  359","line":"    // temporary workaround -- use maximal alignment"},
{"lineNum":"  360","line":"    typedef mpl::size_t< -1 > max_alignment;"},
{"lineNum":"  361","line":""},
{"lineNum":"  362","line":"#endif // borland workaround"},
{"lineNum":"  363","line":""},
{"lineNum":"  364","line":"public: // metafunction result"},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":"    typedef ::boost::aligned_storage<"},
{"lineNum":"  367","line":"          BOOST_MPL_AUX_VALUE_WKND(max_size)::value"},
{"lineNum":"  368","line":"        , BOOST_MPL_AUX_VALUE_WKND(max_alignment)::value"},
{"lineNum":"  369","line":"        > type;"},
{"lineNum":"  370","line":"};"},
{"lineNum":"  371","line":""},
{"lineNum":"  372","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  373","line":"// (detail) class destroyer"},
{"lineNum":"  374","line":"//"},
{"lineNum":"  375","line":"// Internal visitor that destroys the value it visits."},
{"lineNum":"  376","line":"//"},
{"lineNum":"  377","line":"struct destroyer"},
{"lineNum":"  378","line":"    : public static_visitor<>"},
{"lineNum":"  379","line":"{"},
{"lineNum":"  380","line":"public: // visitor interfaces"},
{"lineNum":"  381","line":""},
{"lineNum":"  382","line":"    template <typename T>"},
{"lineNum":"  383","line":"    void internal_visit(T& operand, int) const BOOST_NOEXCEPT"},
{"lineNum":"  384","line":"    {"},
{"lineNum":"  385","line":"        operand.~T(); // must be noexcept"},
{"lineNum":"  386","line":""},
{"lineNum":"  387","line":"#if BOOST_WORKAROUND(__BORLANDC__, BOOST_TESTED_AT(0x0551)) || \\"},
{"lineNum":"  388","line":"    BOOST_WORKAROUND(BOOST_MSVC, BOOST_TESTED_AT(1600))"},
{"lineNum":"  389","line":"        (void)operand; // suppresses warnings"},
{"lineNum":"  390","line":"#endif"},
{"lineNum":"  391","line":"    }"},
{"lineNum":"  392","line":""},
{"lineNum":"  393","line":"};"},
{"lineNum":"  394","line":""},
{"lineNum":"  395","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  396","line":"// (detail) class template known_get"},
{"lineNum":"  397","line":"//"},
{"lineNum":"  398","line":"// Visitor that returns a reference to content of the specified type."},
{"lineNum":"  399","line":"//"},
{"lineNum":"  400","line":"// Precondition: visited variant MUST contain logical content of type T."},
{"lineNum":"  401","line":"//"},
{"lineNum":"  402","line":"template <typename T>"},
{"lineNum":"  403","line":"class known_get"},
{"lineNum":"  404","line":"    : public static_visitor<T&>"},
{"lineNum":"  405","line":"{"},
{"lineNum":"  406","line":""},
{"lineNum":"  407","line":"public: // visitor interface"},
{"lineNum":"  408","line":""},
{"lineNum":"  409","line":"    T& operator()(T& operand) const BOOST_NOEXCEPT"},
{"lineNum":"  410","line":"    {"},
{"lineNum":"  411","line":"        return operand;"},
{"lineNum":"  412","line":"    }"},
{"lineNum":"  413","line":""},
{"lineNum":"  414","line":"    template <typename U>"},
{"lineNum":"  415","line":"    T& operator()(U&) const"},
{"lineNum":"  416","line":"    {"},
{"lineNum":"  417","line":"        // logical error to be here: see precondition above"},
{"lineNum":"  418","line":"        return ::boost::detail::variant::forced_return< T& >();"},
{"lineNum":"  419","line":"    }"},
{"lineNum":"  420","line":"};"},
{"lineNum":"  421","line":""},
{"lineNum":"  422","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  423","line":"// (detail) class copy_into"},
{"lineNum":"  424","line":"//"},
{"lineNum":"  425","line":"// Internal visitor that copies the value it visits into the given buffer."},
{"lineNum":"  426","line":"//"},
{"lineNum":"  427","line":"class copy_into"},
{"lineNum":"  428","line":"    : public static_visitor<>"},
{"lineNum":"  429","line":"{"},
{"lineNum":"  430","line":"private: // representation"},
{"lineNum":"  431","line":""},
{"lineNum":"  432","line":"    void* storage_;"},
{"lineNum":"  433","line":""},
{"lineNum":"  434","line":"public: // structors"},
{"lineNum":"  435","line":""},
{"lineNum":"  436","line":"    explicit copy_into(void* storage) BOOST_NOEXCEPT"},
{"lineNum":"  437","line":"        : storage_(storage)","class":"lineNoCov","hits":"0","possible_hits":"41",},
{"lineNum":"  438","line":"    {"},
{"lineNum":"  439","line":"    }"},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"public: // internal visitor interface"},
{"lineNum":"  442","line":""},
{"lineNum":"  443","line":"    template <typename T>"},
{"lineNum":"  444","line":"    void internal_visit(boost::detail::variant::backup_holder<T>& operand, long) const"},
{"lineNum":"  445","line":"    {"},
{"lineNum":"  446","line":"        new(storage_) T( operand.get() );"},
{"lineNum":"  447","line":"    }"},
{"lineNum":"  448","line":""},
{"lineNum":"  449","line":"    template <typename T>"},
{"lineNum":"  450","line":"    void internal_visit(const boost::detail::variant::backup_holder<T>& operand, long) const"},
{"lineNum":"  451","line":"    {"},
{"lineNum":"  452","line":"        new(storage_) T( operand.get() );"},
{"lineNum":"  453","line":"    }"},
{"lineNum":"  454","line":""},
{"lineNum":"  455","line":"    template <typename T>"},
{"lineNum":"  456","line":"    void internal_visit(const T& operand, int) const"},
{"lineNum":"  457","line":"    {"},
{"lineNum":"  458","line":"        new(storage_) T(operand);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  459","line":"    }"},
{"lineNum":"  460","line":""},
{"lineNum":"  461","line":"};"},
{"lineNum":"  462","line":""},
{"lineNum":"  463","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  464","line":"// (detail) class move_into"},
{"lineNum":"  465","line":"//"},
{"lineNum":"  466","line":"// Internal visitor that moves the value it visits into the given buffer."},
{"lineNum":"  467","line":"//"},
{"lineNum":"  468","line":"#ifndef BOOST_NO_CXX11_RVALUE_REFERENCES"},
{"lineNum":"  469","line":"class move_into"},
{"lineNum":"  470","line":"    : public static_visitor<>"},
{"lineNum":"  471","line":"{"},
{"lineNum":"  472","line":"private: // representation"},
{"lineNum":"  473","line":""},
{"lineNum":"  474","line":"    void* storage_;"},
{"lineNum":"  475","line":""},
{"lineNum":"  476","line":"public: // structors"},
{"lineNum":"  477","line":""},
{"lineNum":"  478","line":"    explicit move_into(void* storage) BOOST_NOEXCEPT"},
{"lineNum":"  479","line":"        : storage_(storage)","class":"lineNoCov","hits":"0","possible_hits":"15",},
{"lineNum":"  480","line":"    {"},
{"lineNum":"  481","line":"    }"},
{"lineNum":"  482","line":""},
{"lineNum":"  483","line":"public: // internal visitor interface"},
{"lineNum":"  484","line":""},
{"lineNum":"  485","line":"    template <typename T>"},
{"lineNum":"  486","line":"    void internal_visit(boost::detail::variant::backup_holder<T>& operand, long) const"},
{"lineNum":"  487","line":"    {"},
{"lineNum":"  488","line":"        new(storage_) T( ::boost::detail::variant::move(operand.get()) );"},
{"lineNum":"  489","line":"    }"},
{"lineNum":"  490","line":""},
{"lineNum":"  491","line":"    template <typename T>"},
{"lineNum":"  492","line":"    void internal_visit(T& operand, int) const BOOST_NOEXCEPT_IF(BOOST_NOEXCEPT_EXPR(T(boost::declval<T>())))"},
{"lineNum":"  493","line":"    {"},
{"lineNum":"  494","line":"        new(storage_) T(::boost::detail::variant::move(operand));","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  495","line":"    }"},
{"lineNum":"  496","line":"};"},
{"lineNum":"  497","line":"#endif"},
{"lineNum":"  498","line":""},
{"lineNum":"  499","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  500","line":"// (detail) class assign_storage"},
{"lineNum":"  501","line":"//"},
{"lineNum":"  502","line":"// Internal visitor that assigns the given storage (which must be a"},
{"lineNum":"  503","line":"// constructed value of the same type) to the value it visits."},
{"lineNum":"  504","line":"//"},
{"lineNum":"  505","line":"struct assign_storage"},
{"lineNum":"  506","line":"    : public static_visitor<>"},
{"lineNum":"  507","line":"{"},
{"lineNum":"  508","line":"private: // representation"},
{"lineNum":"  509","line":""},
{"lineNum":"  510","line":"    const void* rhs_storage_;"},
{"lineNum":"  511","line":""},
{"lineNum":"  512","line":"public: // structors"},
{"lineNum":"  513","line":""},
{"lineNum":"  514","line":"    explicit assign_storage(const void* rhs_storage) BOOST_NOEXCEPT"},
{"lineNum":"  515","line":"        : rhs_storage_(rhs_storage)","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  516","line":"    {"},
{"lineNum":"  517","line":"    }"},
{"lineNum":"  518","line":""},
{"lineNum":"  519","line":"public: // internal visitor interfaces"},
{"lineNum":"  520","line":""},
{"lineNum":"  521","line":"    template <typename T>"},
{"lineNum":"  522","line":"    void internal_visit(backup_holder<T>& lhs_content, long) const"},
{"lineNum":"  523","line":"    {"},
{"lineNum":"  524","line":"        lhs_content.get()"},
{"lineNum":"  525","line":"            = static_cast< const backup_holder<T>* >(rhs_storage_)->get();"},
{"lineNum":"  526","line":"    }"},
{"lineNum":"  527","line":""},
{"lineNum":"  528","line":"    template <typename T>"},
{"lineNum":"  529","line":"    void internal_visit(const backup_holder<T>& lhs_content, long) const"},
{"lineNum":"  530","line":"    {"},
{"lineNum":"  531","line":"        lhs_content.get()"},
{"lineNum":"  532","line":"            = static_cast< const backup_holder<T>* >(rhs_storage_)->get();"},
{"lineNum":"  533","line":"    }"},
{"lineNum":"  534","line":""},
{"lineNum":"  535","line":"    template <typename T>"},
{"lineNum":"  536","line":"    void internal_visit(T& lhs_content, int) const"},
{"lineNum":"  537","line":"    {"},
{"lineNum":"  538","line":"        // NOTE TO USER :"},
{"lineNum":"  539","line":"        // Compile error here indicates one of variant\'s bounded types does"},
{"lineNum":"  540","line":"        // not meet the requirements of the Assignable concept. Thus,"},
{"lineNum":"  541","line":"        // variant is not Assignable."},
{"lineNum":"  542","line":"        //"},
{"lineNum":"  543","line":"        // Hint: Are any of the bounded types const-qualified or references?"},
{"lineNum":"  544","line":"        //"},
{"lineNum":"  545","line":"        lhs_content = *static_cast< const T* >(rhs_storage_);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  546","line":"    }"},
{"lineNum":"  547","line":""},
{"lineNum":"  548","line":"};"},
{"lineNum":"  549","line":""},
{"lineNum":"  550","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  551","line":"// (detail) class move_storage"},
{"lineNum":"  552","line":"//"},
{"lineNum":"  553","line":"// Internal visitor that moves the given storage (which must be a"},
{"lineNum":"  554","line":"// constructed value of the same type) to the value it visits."},
{"lineNum":"  555","line":"//"},
{"lineNum":"  556","line":"struct move_storage"},
{"lineNum":"  557","line":"    : public static_visitor<>"},
{"lineNum":"  558","line":"{"},
{"lineNum":"  559","line":"private: // representation"},
{"lineNum":"  560","line":""},
{"lineNum":"  561","line":"    void* rhs_storage_;"},
{"lineNum":"  562","line":""},
{"lineNum":"  563","line":"public: // structors"},
{"lineNum":"  564","line":""},
{"lineNum":"  565","line":"    explicit move_storage(void* rhs_storage) BOOST_NOEXCEPT"},
{"lineNum":"  566","line":"        : rhs_storage_(rhs_storage)","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  567","line":"    {"},
{"lineNum":"  568","line":"    }"},
{"lineNum":"  569","line":""},
{"lineNum":"  570","line":"public: // internal visitor interfaces"},
{"lineNum":"  571","line":""},
{"lineNum":"  572","line":"    template <typename T>"},
{"lineNum":"  573","line":"    void internal_visit(backup_holder<T>& lhs_content, long) const"},
{"lineNum":"  574","line":"    {"},
{"lineNum":"  575","line":"        lhs_content.get()"},
{"lineNum":"  576","line":"            = ::boost::detail::variant::move(static_cast<backup_holder<T>* >(rhs_storage_)->get());"},
{"lineNum":"  577","line":"    }"},
{"lineNum":"  578","line":""},
{"lineNum":"  579","line":"    template <typename T>"},
{"lineNum":"  580","line":"    void internal_visit(const backup_holder<T>& lhs_content, long) const"},
{"lineNum":"  581","line":"    {"},
{"lineNum":"  582","line":"        lhs_content.get()"},
{"lineNum":"  583","line":"            = ::boost::detail::variant::move(static_cast<backup_holder<T>* >(rhs_storage_)->get());"},
{"lineNum":"  584","line":"    }"},
{"lineNum":"  585","line":""},
{"lineNum":"  586","line":"    template <typename T>"},
{"lineNum":"  587","line":"    void internal_visit(T& lhs_content, int) const"},
{"lineNum":"  588","line":"    {"},
{"lineNum":"  589","line":"        // NOTE TO USER :"},
{"lineNum":"  590","line":"        // Compile error here indicates one of variant\'s bounded types does"},
{"lineNum":"  591","line":"        // not meet the requirements of the Assignable concept. Thus,"},
{"lineNum":"  592","line":"        // variant is not Assignable."},
{"lineNum":"  593","line":"        //"},
{"lineNum":"  594","line":"        // Hint: Are any of the bounded types const-qualified or references?"},
{"lineNum":"  595","line":"        //"},
{"lineNum":"  596","line":"        lhs_content = ::boost::detail::variant::move(*static_cast<T* >(rhs_storage_));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  597","line":"    }"},
{"lineNum":"  598","line":""},
{"lineNum":"  599","line":"};"},
{"lineNum":"  600","line":""},
{"lineNum":"  601","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  602","line":"// (detail) class direct_assigner"},
{"lineNum":"  603","line":"//"},
{"lineNum":"  604","line":"// Generic static visitor that: if and only if the visited value is of the"},
{"lineNum":"  605","line":"// specified type, assigns the given value to the visited value and returns"},
{"lineNum":"  606","line":"// true; else returns false."},
{"lineNum":"  607","line":"//"},
{"lineNum":"  608","line":"template <typename T>"},
{"lineNum":"  609","line":"class direct_assigner"},
{"lineNum":"  610","line":"    : public static_visitor<bool>"},
{"lineNum":"  611","line":"{"},
{"lineNum":"  612","line":"private: // representation"},
{"lineNum":"  613","line":""},
{"lineNum":"  614","line":"    const T& rhs_;"},
{"lineNum":"  615","line":""},
{"lineNum":"  616","line":"public: // structors"},
{"lineNum":"  617","line":""},
{"lineNum":"  618","line":"    explicit direct_assigner(const T& rhs) BOOST_NOEXCEPT"},
{"lineNum":"  619","line":"        : rhs_(rhs)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  620","line":"    {"},
{"lineNum":"  621","line":"    }"},
{"lineNum":"  622","line":""},
{"lineNum":"  623","line":"public: // visitor interface"},
{"lineNum":"  624","line":""},
{"lineNum":"  625","line":"    bool operator()(T& lhs)"},
{"lineNum":"  626","line":"    {"},
{"lineNum":"  627","line":"        lhs = rhs_;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  628","line":"        return true;"},
{"lineNum":"  629","line":"    }"},
{"lineNum":"  630","line":""},
{"lineNum":"  631","line":"    template <typename U>"},
{"lineNum":"  632","line":"    bool operator()(U&) BOOST_NOEXCEPT"},
{"lineNum":"  633","line":"    {"},
{"lineNum":"  634","line":"        return false;"},
{"lineNum":"  635","line":"    }"},
{"lineNum":"  636","line":""},
{"lineNum":"  637","line":"#if BOOST_WORKAROUND(BOOST_MSVC, BOOST_TESTED_AT(1600))"},
{"lineNum":"  638","line":"private:"},
{"lineNum":"  639","line":"    // silence MSVC warning C4512: assignment operator could not be generated"},
{"lineNum":"  640","line":"    direct_assigner& operator= (direct_assigner const&);"},
{"lineNum":"  641","line":"#endif"},
{"lineNum":"  642","line":"};"},
{"lineNum":"  643","line":""},
{"lineNum":"  644","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  645","line":"// (detail) class direct_mover"},
{"lineNum":"  646","line":"//"},
{"lineNum":"  647","line":"// Generic static visitor that: if and only if the visited value is of the"},
{"lineNum":"  648","line":"// specified type, move assigns the given value to the visited value and returns"},
{"lineNum":"  649","line":"// true; else returns false."},
{"lineNum":"  650","line":"//"},
{"lineNum":"  651","line":"template <typename T>"},
{"lineNum":"  652","line":"class direct_mover"},
{"lineNum":"  653","line":"    : public static_visitor<bool>"},
{"lineNum":"  654","line":"{"},
{"lineNum":"  655","line":"private: // representation"},
{"lineNum":"  656","line":""},
{"lineNum":"  657","line":"    T& rhs_;"},
{"lineNum":"  658","line":""},
{"lineNum":"  659","line":"public: // structors"},
{"lineNum":"  660","line":""},
{"lineNum":"  661","line":"    explicit direct_mover(T& rhs) BOOST_NOEXCEPT"},
{"lineNum":"  662","line":"        : rhs_(rhs)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  663","line":"    {"},
{"lineNum":"  664","line":"    }"},
{"lineNum":"  665","line":""},
{"lineNum":"  666","line":"public: // visitor interface"},
{"lineNum":"  667","line":""},
{"lineNum":"  668","line":"    bool operator()(T& lhs)"},
{"lineNum":"  669","line":"    {"},
{"lineNum":"  670","line":"        lhs = ::boost::detail::variant::move(rhs_);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  671","line":"        return true;"},
{"lineNum":"  672","line":"    }"},
{"lineNum":"  673","line":""},
{"lineNum":"  674","line":"    template <typename U>"},
{"lineNum":"  675","line":"    bool operator()(U&) BOOST_NOEXCEPT"},
{"lineNum":"  676","line":"    {"},
{"lineNum":"  677","line":"        return false;"},
{"lineNum":"  678","line":"    }"},
{"lineNum":"  679","line":""},
{"lineNum":"  680","line":"#if BOOST_WORKAROUND(BOOST_MSVC, BOOST_TESTED_AT(1600))"},
{"lineNum":"  681","line":"private:"},
{"lineNum":"  682","line":"    // silence MSVC warning C4512: assignment operator could not be generated"},
{"lineNum":"  683","line":"    direct_mover& operator= (direct_mover const&);"},
{"lineNum":"  684","line":"#endif"},
{"lineNum":"  685","line":"};"},
{"lineNum":"  686","line":""},
{"lineNum":"  687","line":""},
{"lineNum":"  688","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  689","line":"// (detail) class backup_assigner"},
{"lineNum":"  690","line":"//"},
{"lineNum":"  691","line":"// Internal visitor that \"assigns\" the given value to the visited value,"},
{"lineNum":"  692","line":"// using backup to recover if the destroy-copy sequence fails."},
{"lineNum":"  693","line":"//"},
{"lineNum":"  694","line":"// NOTE: This needs to be a friend of variant, as it needs access to"},
{"lineNum":"  695","line":"// indicate_which, indicate_backup_which, etc."},
{"lineNum":"  696","line":"//"},
{"lineNum":"  697","line":"template <typename Variant>"},
{"lineNum":"  698","line":"class backup_assigner"},
{"lineNum":"  699","line":"    : public static_visitor<>"},
{"lineNum":"  700","line":"{"},
{"lineNum":"  701","line":"private: // representation"},
{"lineNum":"  702","line":""},
{"lineNum":"  703","line":"    Variant& lhs_;"},
{"lineNum":"  704","line":"    int rhs_which_;"},
{"lineNum":"  705","line":"    const void* rhs_content_;"},
{"lineNum":"  706","line":"    void (*copy_rhs_content_)(void*, const void*);"},
{"lineNum":"  707","line":""},
{"lineNum":"  708","line":"public: // structors"},
{"lineNum":"  709","line":""},
{"lineNum":"  710","line":"    template<class RhsT>"},
{"lineNum":"  711","line":"    backup_assigner(Variant& lhs, int rhs_which, const RhsT& rhs_content)"},
{"lineNum":"  712","line":"        : lhs_(lhs)"},
{"lineNum":"  713","line":"        , rhs_which_(rhs_which)"},
{"lineNum":"  714","line":"        , rhs_content_(&rhs_content)"},
{"lineNum":"  715","line":"        , copy_rhs_content_(&construct_impl<RhsT>)"},
{"lineNum":"  716","line":"    {"},
{"lineNum":"  717","line":"    }"},
{"lineNum":"  718","line":""},
{"lineNum":"  719","line":"private: // helpers, for visitor interface (below)"},
{"lineNum":"  720","line":""},
{"lineNum":"  721","line":"    template<class RhsT>"},
{"lineNum":"  722","line":"    static void construct_impl(void* addr, const void* obj)"},
{"lineNum":"  723","line":"    {"},
{"lineNum":"  724","line":"        new(addr) RhsT(*static_cast<const RhsT*>(obj));"},
{"lineNum":"  725","line":"    }"},
{"lineNum":"  726","line":""},
{"lineNum":"  727","line":"    template <typename LhsT>"},
{"lineNum":"  728","line":"    void backup_assign_impl("},
{"lineNum":"  729","line":"          backup_holder<LhsT>& lhs_content"},
{"lineNum":"  730","line":"        , mpl::false_ // is_nothrow_move_constructible"},
{"lineNum":"  731","line":"        , long"},
{"lineNum":"  732","line":"        )"},
{"lineNum":"  733","line":"    {"},
{"lineNum":"  734","line":"        // Move lhs content to backup..."},
{"lineNum":"  735","line":"        backup_holder<LhsT> backup_lhs_content(0);"},
{"lineNum":"  736","line":"        backup_lhs_content.swap(lhs_content); // nothrow"},
{"lineNum":"  737","line":""},
{"lineNum":"  738","line":"        // ...destroy lhs content..."},
{"lineNum":"  739","line":"        lhs_content.~backup_holder<LhsT>(); // nothrow"},
{"lineNum":"  740","line":""},
{"lineNum":"  741","line":"        BOOST_TRY"},
{"lineNum":"  742","line":"        {"},
{"lineNum":"  743","line":"            // ...and attempt to copy rhs content into lhs storage:"},
{"lineNum":"  744","line":"            copy_rhs_content_(lhs_.storage_.address(), rhs_content_);"},
{"lineNum":"  745","line":"        }"},
{"lineNum":"  746","line":"        BOOST_CATCH (...)"},
{"lineNum":"  747","line":"        {"},
{"lineNum":"  748","line":"            // In case of failure, copy backup pointer to lhs storage..."},
{"lineNum":"  749","line":"            new(lhs_.storage_.address())"},
{"lineNum":"  750","line":"                    backup_holder<LhsT>( 0 ); // nothrow"},
{"lineNum":"  751","line":""},
{"lineNum":"  752","line":"            static_cast<backup_holder<LhsT>* >(lhs_.storage_.address())"},
{"lineNum":"  753","line":"                    ->swap(backup_lhs_content); // nothrow"},
{"lineNum":"  754","line":""},
{"lineNum":"  755","line":"            // ...and rethrow:"},
{"lineNum":"  756","line":"            BOOST_RETHROW;"},
{"lineNum":"  757","line":"        }"},
{"lineNum":"  758","line":"        BOOST_CATCH_END"},
{"lineNum":"  759","line":""},
{"lineNum":"  760","line":"        // In case of success, indicate new content type:"},
{"lineNum":"  761","line":"        lhs_.indicate_which(rhs_which_); // nothrow"},
{"lineNum":"  762","line":"    }"},
{"lineNum":"  763","line":""},
{"lineNum":"  764","line":"    template <typename LhsT>"},
{"lineNum":"  765","line":"    void backup_assign_impl("},
{"lineNum":"  766","line":"          LhsT& lhs_content"},
{"lineNum":"  767","line":"        , mpl::true_ // is_nothrow_move_constructible"},
{"lineNum":"  768","line":"        , int"},
{"lineNum":"  769","line":"        )"},
{"lineNum":"  770","line":"    {"},
{"lineNum":"  771","line":"        // Move lhs content to backup..."},
{"lineNum":"  772","line":"        LhsT backup_lhs_content("},
{"lineNum":"  773","line":"              ::boost::detail::variant::move(lhs_content)"},
{"lineNum":"  774","line":"            ); // nothrow"},
{"lineNum":"  775","line":""},
{"lineNum":"  776","line":"        // ...destroy lhs content..."},
{"lineNum":"  777","line":"        lhs_content.~LhsT(); // nothrow"},
{"lineNum":"  778","line":""},
{"lineNum":"  779","line":"        BOOST_TRY"},
{"lineNum":"  780","line":"        {"},
{"lineNum":"  781","line":"            // ...and attempt to copy rhs content into lhs storage:"},
{"lineNum":"  782","line":"            copy_rhs_content_(lhs_.storage_.address(), rhs_content_);"},
{"lineNum":"  783","line":"        }"},
{"lineNum":"  784","line":"        BOOST_CATCH (...)"},
{"lineNum":"  785","line":"        {"},
{"lineNum":"  786","line":"            // In case of failure, restore backup content to lhs storage..."},
{"lineNum":"  787","line":"            new(lhs_.storage_.address())"},
{"lineNum":"  788","line":"                LhsT("},
{"lineNum":"  789","line":"                      ::boost::detail::variant::move(backup_lhs_content)"},
{"lineNum":"  790","line":"                    ); // nothrow"},
{"lineNum":"  791","line":""},
{"lineNum":"  792","line":"            // ...and rethrow:"},
{"lineNum":"  793","line":"            BOOST_RETHROW;"},
{"lineNum":"  794","line":"        }"},
{"lineNum":"  795","line":"        BOOST_CATCH_END"},
{"lineNum":"  796","line":""},
{"lineNum":"  797","line":"        // In case of success, indicate new content type:"},
{"lineNum":"  798","line":"        lhs_.indicate_which(rhs_which_); // nothrow"},
{"lineNum":"  799","line":"    }"},
{"lineNum":"  800","line":""},
{"lineNum":"  801","line":"    template <typename LhsT>"},
{"lineNum":"  802","line":"    void backup_assign_impl("},
{"lineNum":"  803","line":"          LhsT& lhs_content"},
{"lineNum":"  804","line":"        , mpl::false_ // is_nothrow_move_constructible"},
{"lineNum":"  805","line":"        , int"},
{"lineNum":"  806","line":"        )"},
{"lineNum":"  807","line":"    {"},
{"lineNum":"  808","line":"        // Backup lhs content..."},
{"lineNum":"  809","line":"        LhsT* backup_lhs_ptr = new LhsT(lhs_content);"},
{"lineNum":"  810","line":""},
{"lineNum":"  811","line":"        // ...destroy lhs content..."},
{"lineNum":"  812","line":"        lhs_content.~LhsT(); // nothrow"},
{"lineNum":"  813","line":""},
{"lineNum":"  814","line":"        BOOST_TRY"},
{"lineNum":"  815","line":"        {"},
{"lineNum":"  816","line":"            // ...and attempt to copy rhs content into lhs storage:"},
{"lineNum":"  817","line":"            copy_rhs_content_(lhs_.storage_.address(), rhs_content_);"},
{"lineNum":"  818","line":"        }"},
{"lineNum":"  819","line":"        BOOST_CATCH (...)"},
{"lineNum":"  820","line":"        {"},
{"lineNum":"  821","line":"            // In case of failure, copy backup pointer to lhs storage..."},
{"lineNum":"  822","line":"            new(lhs_.storage_.address())"},
{"lineNum":"  823","line":"                backup_holder<LhsT>( backup_lhs_ptr ); // nothrow"},
{"lineNum":"  824","line":""},
{"lineNum":"  825","line":"            // ...indicate now using backup..."},
{"lineNum":"  826","line":"            lhs_.indicate_backup_which( lhs_.which() ); // nothrow"},
{"lineNum":"  827","line":""},
{"lineNum":"  828","line":"            // ...and rethrow:"},
{"lineNum":"  829","line":"            BOOST_RETHROW;"},
{"lineNum":"  830","line":"        }"},
{"lineNum":"  831","line":"        BOOST_CATCH_END"},
{"lineNum":"  832","line":""},
{"lineNum":"  833","line":"        // In case of success, indicate new content type..."},
{"lineNum":"  834","line":"        lhs_.indicate_which(rhs_which_); // nothrow"},
{"lineNum":"  835","line":""},
{"lineNum":"  836","line":"        // ...and delete backup:"},
{"lineNum":"  837","line":"        delete backup_lhs_ptr; // nothrow"},
{"lineNum":"  838","line":"    }"},
{"lineNum":"  839","line":""},
{"lineNum":"  840","line":"public: // visitor interface"},
{"lineNum":"  841","line":""},
{"lineNum":"  842","line":"    template <typename LhsT>"},
{"lineNum":"  843","line":"    void internal_visit(LhsT& lhs_content, int)"},
{"lineNum":"  844","line":"    {"},
{"lineNum":"  845","line":"        typedef typename is_nothrow_move_constructible<LhsT>::type"},
{"lineNum":"  846","line":"            nothrow_move;"},
{"lineNum":"  847","line":""},
{"lineNum":"  848","line":"        backup_assign_impl( lhs_content, nothrow_move(), 1L);"},
{"lineNum":"  849","line":"    }"},
{"lineNum":"  850","line":""},
{"lineNum":"  851","line":"#if BOOST_WORKAROUND(BOOST_MSVC, BOOST_TESTED_AT(1600))"},
{"lineNum":"  852","line":"private:"},
{"lineNum":"  853","line":"    // silence MSVC warning C4512: assignment operator could not be generated"},
{"lineNum":"  854","line":"    backup_assigner& operator= (backup_assigner const&);"},
{"lineNum":"  855","line":"#endif"},
{"lineNum":"  856","line":"};"},
{"lineNum":"  857","line":""},
{"lineNum":"  858","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  859","line":"// (detail) class swap_with"},
{"lineNum":"  860","line":"//"},
{"lineNum":"  861","line":"// Visitor that swaps visited value with content of given variant."},
{"lineNum":"  862","line":"//"},
{"lineNum":"  863","line":"// Precondition: Given variant MUST have same logical type as visited value."},
{"lineNum":"  864","line":"//"},
{"lineNum":"  865","line":"template <typename Variant>"},
{"lineNum":"  866","line":"struct swap_with"},
{"lineNum":"  867","line":"    : public static_visitor<>"},
{"lineNum":"  868","line":"{"},
{"lineNum":"  869","line":"private: // representation"},
{"lineNum":"  870","line":""},
{"lineNum":"  871","line":"    Variant& toswap_;"},
{"lineNum":"  872","line":""},
{"lineNum":"  873","line":"public: // structors"},
{"lineNum":"  874","line":""},
{"lineNum":"  875","line":"    explicit swap_with(Variant& toswap) BOOST_NOEXCEPT"},
{"lineNum":"  876","line":"        : toswap_(toswap)"},
{"lineNum":"  877","line":"    {"},
{"lineNum":"  878","line":"    }"},
{"lineNum":"  879","line":""},
{"lineNum":"  880","line":"public: // internal visitor interfaces"},
{"lineNum":"  881","line":""},
{"lineNum":"  882","line":"    template <typename T>"},
{"lineNum":"  883","line":"    void operator()(T& operand) const"},
{"lineNum":"  884","line":"    {"},
{"lineNum":"  885","line":"        // Since the precondition ensures types are same, get T..."},
{"lineNum":"  886","line":"        known_get<T> getter;"},
{"lineNum":"  887","line":"        T& other = toswap_.apply_visitor(getter);"},
{"lineNum":"  888","line":""},
{"lineNum":"  889","line":"        // ...and swap:"},
{"lineNum":"  890","line":"        ::boost::detail::variant::move_swap( operand, other );"},
{"lineNum":"  891","line":"    }"},
{"lineNum":"  892","line":""},
{"lineNum":"  893","line":"private:"},
{"lineNum":"  894","line":"    swap_with& operator=(const swap_with&);"},
{"lineNum":"  895","line":""},
{"lineNum":"  896","line":"};"},
{"lineNum":"  897","line":""},
{"lineNum":"  898","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  899","line":"// (detail) class reflect"},
{"lineNum":"  900","line":"//"},
{"lineNum":"  901","line":"// Generic static visitor that performs a typeid on the value it visits."},
{"lineNum":"  902","line":"//"},
{"lineNum":"  903","line":""},
{"lineNum":"  904","line":"class reflect"},
{"lineNum":"  905","line":"    : public static_visitor<const boost::typeindex::type_info&>"},
{"lineNum":"  906","line":"{"},
{"lineNum":"  907","line":"public: // visitor interfaces"},
{"lineNum":"  908","line":""},
{"lineNum":"  909","line":"    template <typename T>"},
{"lineNum":"  910","line":"    const boost::typeindex::type_info& operator()(const T&) const BOOST_NOEXCEPT"},
{"lineNum":"  911","line":"    {"},
{"lineNum":"  912","line":"        return boost::typeindex::type_id<T>().type_info();"},
{"lineNum":"  913","line":"    }"},
{"lineNum":"  914","line":""},
{"lineNum":"  915","line":"};"},
{"lineNum":"  916","line":""},
{"lineNum":"  917","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  918","line":"// (detail) class comparer"},
{"lineNum":"  919","line":"//"},
{"lineNum":"  920","line":"// Generic static visitor that compares the content of the given lhs variant"},
{"lineNum":"  921","line":"// with the visited rhs content using Comp."},
{"lineNum":"  922","line":"//"},
{"lineNum":"  923","line":"// Precondition: lhs.which() == rhs.which()"},
{"lineNum":"  924","line":"//"},
{"lineNum":"  925","line":"template <typename Variant, typename Comp>"},
{"lineNum":"  926","line":"class comparer"},
{"lineNum":"  927","line":"    : public static_visitor<bool>"},
{"lineNum":"  928","line":"{"},
{"lineNum":"  929","line":"private: // representation"},
{"lineNum":"  930","line":""},
{"lineNum":"  931","line":"    const Variant& lhs_;"},
{"lineNum":"  932","line":""},
{"lineNum":"  933","line":"public: // structors"},
{"lineNum":"  934","line":""},
{"lineNum":"  935","line":"    explicit comparer(const Variant& lhs) BOOST_NOEXCEPT"},
{"lineNum":"  936","line":"        : lhs_(lhs)"},
{"lineNum":"  937","line":"    {"},
{"lineNum":"  938","line":"    }"},
{"lineNum":"  939","line":""},
{"lineNum":"  940","line":"public: // visitor interfaces"},
{"lineNum":"  941","line":""},
{"lineNum":"  942","line":"    template <typename T>"},
{"lineNum":"  943","line":"    bool operator()(T& rhs_content) const"},
{"lineNum":"  944","line":"    {"},
{"lineNum":"  945","line":"        // Since the precondition ensures lhs and rhs types are same, get T..."},
{"lineNum":"  946","line":"        known_get<T> getter;"},
{"lineNum":"  947","line":"        const T& lhs_content = lhs_.apply_visitor(getter);"},
{"lineNum":"  948","line":""},
{"lineNum":"  949","line":"        // ...and compare lhs and rhs contents:"},
{"lineNum":"  950","line":"        return Comp()(lhs_content, rhs_content);"},
{"lineNum":"  951","line":"    }"},
{"lineNum":"  952","line":""},
{"lineNum":"  953","line":"private:"},
{"lineNum":"  954","line":"    comparer& operator=(const comparer&);"},
{"lineNum":"  955","line":""},
{"lineNum":"  956","line":"};"},
{"lineNum":"  957","line":""},
{"lineNum":"  958","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  959","line":"// (detail) class equal_comp"},
{"lineNum":"  960","line":"//"},
{"lineNum":"  961","line":"// Generic function object compares lhs with rhs using operator==."},
{"lineNum":"  962","line":"//"},
{"lineNum":"  963","line":"struct equal_comp"},
{"lineNum":"  964","line":"{"},
{"lineNum":"  965","line":"    template <typename T>"},
{"lineNum":"  966","line":"    bool operator()(const T& lhs, const T& rhs) const"},
{"lineNum":"  967","line":"    {"},
{"lineNum":"  968","line":"        return lhs == rhs;"},
{"lineNum":"  969","line":"    }"},
{"lineNum":"  970","line":"};"},
{"lineNum":"  971","line":""},
{"lineNum":"  972","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  973","line":"// (detail) class less_comp"},
{"lineNum":"  974","line":"//"},
{"lineNum":"  975","line":"// Generic function object compares lhs with rhs using operator<."},
{"lineNum":"  976","line":"//"},
{"lineNum":"  977","line":"struct less_comp"},
{"lineNum":"  978","line":"{"},
{"lineNum":"  979","line":"    template <typename T>"},
{"lineNum":"  980","line":"    bool operator()(const T& lhs, const T& rhs) const"},
{"lineNum":"  981","line":"    {"},
{"lineNum":"  982","line":"        return lhs < rhs;"},
{"lineNum":"  983","line":"    }"},
{"lineNum":"  984","line":"};"},
{"lineNum":"  985","line":""},
{"lineNum":"  986","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  987","line":"// (detail) class template invoke_visitor"},
{"lineNum":"  988","line":"//"},
{"lineNum":"  989","line":"// Internal visitor that invokes the given visitor using:"},
{"lineNum":"  990","line":"//  * for wrappers (e.g., recursive_wrapper), the wrapper\'s held value."},
{"lineNum":"  991","line":"//  * for all other values, the value itself."},
{"lineNum":"  992","line":"//"},
{"lineNum":"  993","line":"template <typename Visitor, bool MoveSemantics>"},
{"lineNum":"  994","line":"class invoke_visitor"},
{"lineNum":"  995","line":"{"},
{"lineNum":"  996","line":"private: // representation"},
{"lineNum":"  997","line":""},
{"lineNum":"  998","line":"    Visitor& visitor_;"},
{"lineNum":"  999","line":""},
{"lineNum":" 1000","line":"public: // visitor typedefs"},
{"lineNum":" 1001","line":""},
{"lineNum":" 1002","line":"    typedef typename Visitor::result_type"},
{"lineNum":" 1003","line":"        result_type;"},
{"lineNum":" 1004","line":""},
{"lineNum":" 1005","line":"public: // structors"},
{"lineNum":" 1006","line":""},
{"lineNum":" 1007","line":"    explicit invoke_visitor(Visitor& visitor) BOOST_NOEXCEPT"},
{"lineNum":" 1008","line":"        : visitor_(visitor)","class":"lineNoCov","hits":"0","possible_hits":"42",},
{"lineNum":" 1009","line":"    {"},
{"lineNum":" 1010","line":"    }"},
{"lineNum":" 1011","line":""},
{"lineNum":" 1012","line":"public: // internal visitor interfaces"},
{"lineNum":" 1013","line":""},
{"lineNum":" 1014","line":"#ifndef BOOST_NO_CXX11_RVALUE_REFERENCES"},
{"lineNum":" 1015","line":""},
{"lineNum":" 1016","line":"    //using workaround with is_same<T, T> to prenvent compilation error, because we need to use T in enable_if to make SFINAE work"},
{"lineNum":" 1017","line":"    template <typename T>"},
{"lineNum":" 1018","line":"    typename enable_if_c<MoveSemantics && is_same<T, T>::value, result_type>::type internal_visit(T&& operand, int)"},
{"lineNum":" 1019","line":"    {"},
{"lineNum":" 1020","line":"        return visitor_(::boost::move<T>(operand));"},
{"lineNum":" 1021","line":"    }"},
{"lineNum":" 1022","line":""},
{"lineNum":" 1023","line":"    //using workaround with is_same<T, T> to prenvent compilation error, because we need to use T in enable_if to make SFINAE work"},
{"lineNum":" 1024","line":"    template <typename T>"},
{"lineNum":" 1025","line":"    typename disable_if_c<MoveSemantics && is_same<T, T>::value, result_type>::type internal_visit(T&& operand, int)"},
{"lineNum":" 1026","line":"    {"},
{"lineNum":" 1027","line":"        return visitor_(operand);","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":" 1028","line":"    }"},
{"lineNum":" 1029","line":""},
{"lineNum":" 1030","line":"#else"},
{"lineNum":" 1031","line":""},
{"lineNum":" 1032","line":"    template <typename T>"},
{"lineNum":" 1033","line":"    result_type internal_visit(T& operand, int)"},
{"lineNum":" 1034","line":"    {"},
{"lineNum":" 1035","line":"        return visitor_(operand);"},
{"lineNum":" 1036","line":"    }"},
{"lineNum":" 1037","line":""},
{"lineNum":" 1038","line":"#   if BOOST_WORKAROUND(__BORLANDC__, BOOST_TESTED_AT(0x0564))"},
{"lineNum":" 1039","line":"    template <typename T>"},
{"lineNum":" 1040","line":"    result_type internal_visit(const T& operand, int)"},
{"lineNum":" 1041","line":"    {"},
{"lineNum":" 1042","line":"        return visitor_(operand);"},
{"lineNum":" 1043","line":"    }"},
{"lineNum":" 1044","line":"#   endif //BORLAND"},
{"lineNum":" 1045","line":""},
{"lineNum":" 1046","line":"#endif //RVALUE REFERENCES"},
{"lineNum":" 1047","line":""},
{"lineNum":" 1048","line":"public: // internal visitor interfaces, cont."},
{"lineNum":" 1049","line":""},
{"lineNum":" 1050","line":"    template <typename T>"},
{"lineNum":" 1051","line":"    result_type internal_visit(boost::recursive_wrapper<T>& operand, long)"},
{"lineNum":" 1052","line":"    {"},
{"lineNum":" 1053","line":"        return internal_visit( operand.get(), 1L );"},
{"lineNum":" 1054","line":"    }"},
{"lineNum":" 1055","line":""},
{"lineNum":" 1056","line":"    template <typename T>"},
{"lineNum":" 1057","line":"    result_type internal_visit(const boost::recursive_wrapper<T>& operand, long)"},
{"lineNum":" 1058","line":"    {"},
{"lineNum":" 1059","line":"        return internal_visit( operand.get(), 1L );"},
{"lineNum":" 1060","line":"    }"},
{"lineNum":" 1061","line":""},
{"lineNum":" 1062","line":"    template <typename T>"},
{"lineNum":" 1063","line":"    result_type internal_visit(boost::detail::reference_content<T>& operand, long)"},
{"lineNum":" 1064","line":"    {"},
{"lineNum":" 1065","line":"        return internal_visit( operand.get(), 1L );"},
{"lineNum":" 1066","line":"    }"},
{"lineNum":" 1067","line":""},
{"lineNum":" 1068","line":"    template <typename T>"},
{"lineNum":" 1069","line":"    result_type internal_visit(const boost::detail::reference_content<T>& operand, long)"},
{"lineNum":" 1070","line":"    {"},
{"lineNum":" 1071","line":"        return internal_visit( operand.get(), 1L );"},
{"lineNum":" 1072","line":"    }"},
{"lineNum":" 1073","line":""},
{"lineNum":" 1074","line":"    template <typename T>"},
{"lineNum":" 1075","line":"    result_type internal_visit(boost::detail::variant::backup_holder<T>& operand, long)"},
{"lineNum":" 1076","line":"    {"},
{"lineNum":" 1077","line":"        return internal_visit( operand.get(), 1L );"},
{"lineNum":" 1078","line":"    }"},
{"lineNum":" 1079","line":""},
{"lineNum":" 1080","line":"    template <typename T>"},
{"lineNum":" 1081","line":"    result_type internal_visit(const boost::detail::variant::backup_holder<T>& operand, long)"},
{"lineNum":" 1082","line":"    {"},
{"lineNum":" 1083","line":"        return internal_visit( operand.get(), 1L );"},
{"lineNum":" 1084","line":"    }"},
{"lineNum":" 1085","line":""},
{"lineNum":" 1086","line":"#if BOOST_WORKAROUND(BOOST_MSVC, BOOST_TESTED_AT(1600))"},
{"lineNum":" 1087","line":"private:"},
{"lineNum":" 1088","line":"    // silence MSVC warning C4512: assignment operator could not be generated"},
{"lineNum":" 1089","line":"    invoke_visitor& operator= (invoke_visitor const&);"},
{"lineNum":" 1090","line":"#endif"},
{"lineNum":" 1091","line":"};"},
{"lineNum":" 1092","line":""},
{"lineNum":" 1093","line":"}} // namespace detail::variant"},
{"lineNum":" 1094","line":""},
{"lineNum":" 1095","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":" 1096","line":"// class template variant (concept inspired by Andrei Alexandrescu)"},
{"lineNum":" 1097","line":"//"},
{"lineNum":" 1098","line":"// See docs and boost/variant/variant_fwd.hpp for more information."},
{"lineNum":" 1099","line":"//"},
{"lineNum":" 1100","line":"template <"},
{"lineNum":" 1101","line":"      typename T0_"},
{"lineNum":" 1102","line":"    , BOOST_VARIANT_ENUM_SHIFTED_PARAMS(typename T)"},
{"lineNum":" 1103","line":"    >"},
{"lineNum":" 1104","line":"class variant"},
{"lineNum":" 1105","line":"{"},
{"lineNum":" 1106","line":"private: // helpers, for typedefs (below)"},
{"lineNum":" 1107","line":""},
{"lineNum":" 1108","line":"    typedef variant wknd_self_t;"},
{"lineNum":" 1109","line":""},
{"lineNum":" 1110","line":"    struct is_recursive_"},
{"lineNum":" 1111","line":"        : detail::variant::is_recursive_flag<T0_>"},
{"lineNum":" 1112","line":"    {"},
{"lineNum":" 1113","line":"    };"},
{"lineNum":" 1114","line":""},
{"lineNum":" 1115","line":"    typedef typename mpl::eval_if<"},
{"lineNum":" 1116","line":"          is_recursive_"},
{"lineNum":" 1117","line":"        , T0_"},
{"lineNum":" 1118","line":"        , mpl::identity< T0_ >"},
{"lineNum":" 1119","line":"        >::type unwrapped_T0_;"},
{"lineNum":" 1120","line":""},
{"lineNum":" 1121","line":"    struct is_sequence_based_"},
{"lineNum":" 1122","line":"        : detail::variant::is_over_sequence<unwrapped_T0_>"},
{"lineNum":" 1123","line":"    {"},
{"lineNum":" 1124","line":"    };"},
{"lineNum":" 1125","line":""},
{"lineNum":" 1126","line":"#if !defined(BOOST_VARIANT_NO_TYPE_SEQUENCE_SUPPORT)"},
{"lineNum":" 1127","line":""},
{"lineNum":" 1128","line":"private: // helpers, for typedefs (below)"},
{"lineNum":" 1129","line":""},
{"lineNum":" 1130","line":"    typedef typename mpl::eval_if<"},
{"lineNum":" 1131","line":"          is_sequence_based_"},
{"lineNum":" 1132","line":"        , unwrapped_T0_ // over_sequence<...>::type"},
{"lineNum":" 1133","line":"        , detail::variant::make_variant_list<"},
{"lineNum":" 1134","line":"              unwrapped_T0_"},
{"lineNum":" 1135","line":"            , BOOST_VARIANT_ENUM_SHIFTED_PARAMS(T)"},
{"lineNum":" 1136","line":"            >"},
{"lineNum":" 1137","line":"        >::type specified_types;"},
{"lineNum":" 1138","line":""},
{"lineNum":" 1139","line":"    BOOST_STATIC_ASSERT(("},
{"lineNum":" 1140","line":"          ::boost::mpl::not_< mpl::empty<specified_types> >::value"},
{"lineNum":" 1141","line":"        ));"},
{"lineNum":" 1142","line":""},
{"lineNum":" 1143","line":"public: // public typedefs"},
{"lineNum":" 1144","line":"    typedef typename mpl::eval_if<"},
{"lineNum":" 1145","line":"          is_recursive_"},
{"lineNum":" 1146","line":"        , mpl::transform<"},
{"lineNum":" 1147","line":"              specified_types"},
{"lineNum":" 1148","line":"            , mpl::protect<"},
{"lineNum":" 1149","line":"                  detail::variant::quoted_enable_recursive<wknd_self_t>"},
{"lineNum":" 1150","line":"                >"},
{"lineNum":" 1151","line":"            >"},
{"lineNum":" 1152","line":"        , mpl::identity< specified_types >"},
{"lineNum":" 1153","line":"        >::type recursive_enabled_types;    // used by is_variant_constructible_from<> trait"},
{"lineNum":" 1154","line":""},
{"lineNum":" 1155","line":"    typedef typename mpl::transform<"},
{"lineNum":" 1156","line":"          recursive_enabled_types"},
{"lineNum":" 1157","line":"        , unwrap_recursive<mpl::_1>"},
{"lineNum":" 1158","line":"        >::type types;"},
{"lineNum":" 1159","line":""},
{"lineNum":" 1160","line":"private: // internal typedefs"},
{"lineNum":" 1161","line":""},
{"lineNum":" 1162","line":"    typedef typename mpl::transform<"},
{"lineNum":" 1163","line":"          recursive_enabled_types"},
{"lineNum":" 1164","line":"        , mpl::protect< detail::make_reference_content<> >"},
{"lineNum":" 1165","line":"        >::type internal_types;"},
{"lineNum":" 1166","line":""},
{"lineNum":" 1167","line":"    typedef typename mpl::front<"},
{"lineNum":" 1168","line":"          internal_types"},
{"lineNum":" 1169","line":"        >::type internal_T0;"},
{"lineNum":" 1170","line":""},
{"lineNum":" 1171","line":"#else // defined(BOOST_VARIANT_NO_TYPE_SEQUENCE_SUPPORT)"},
{"lineNum":" 1172","line":""},
{"lineNum":" 1173","line":"private: // helpers, for typedefs (below)"},
{"lineNum":" 1174","line":""},
{"lineNum":" 1175","line":"    typedef unwrapped_T0_ T0;"},
{"lineNum":" 1176","line":""},
{"lineNum":" 1177","line":"    #define BOOST_VARIANT_AUX_ENABLE_RECURSIVE_TYPEDEFS(z,N,_) \\"},
{"lineNum":" 1178","line":"        typedef typename mpl::eval_if< \\"},
{"lineNum":" 1179","line":"              is_recursive_ \\"},
{"lineNum":" 1180","line":"            , detail::variant::enable_recursive< \\"},
{"lineNum":" 1181","line":"                  BOOST_PP_CAT(T,N) \\"},
{"lineNum":" 1182","line":"                , wknd_self_t \\"},
{"lineNum":" 1183","line":"                > \\"},
{"lineNum":" 1184","line":"            , mpl::identity< BOOST_PP_CAT(T,N) > \\"},
{"lineNum":" 1185","line":"            >::type BOOST_PP_CAT(recursive_enabled_T,N); \\"},
{"lineNum":" 1186","line":"        /**/"},
{"lineNum":" 1187","line":""},
{"lineNum":" 1188","line":"    BOOST_PP_REPEAT("},
{"lineNum":" 1189","line":"          BOOST_VARIANT_LIMIT_TYPES"},
{"lineNum":" 1190","line":"        , BOOST_VARIANT_AUX_ENABLE_RECURSIVE_TYPEDEFS"},
{"lineNum":" 1191","line":"        , _"},
{"lineNum":" 1192","line":"        )"},
{"lineNum":" 1193","line":""},
{"lineNum":" 1194","line":"    #undef BOOST_VARIANT_AUX_ENABLE_RECURSIVE_TYPEDEFS"},
{"lineNum":" 1195","line":""},
{"lineNum":" 1196","line":"    #define BOOST_VARIANT_AUX_UNWRAP_RECURSIVE_TYPEDEFS(z,N,_) \\"},
{"lineNum":" 1197","line":"        typedef typename unwrap_recursive< \\"},
{"lineNum":" 1198","line":"              BOOST_PP_CAT(recursive_enabled_T,N) \\"},
{"lineNum":" 1199","line":"            >::type BOOST_PP_CAT(public_T,N); \\"},
{"lineNum":" 1200","line":"        /**/"},
{"lineNum":" 1201","line":""},
{"lineNum":" 1202","line":"    BOOST_PP_REPEAT("},
{"lineNum":" 1203","line":"          BOOST_VARIANT_LIMIT_TYPES"},
{"lineNum":" 1204","line":"        , BOOST_VARIANT_AUX_UNWRAP_RECURSIVE_TYPEDEFS"},
{"lineNum":" 1205","line":"        , _"},
{"lineNum":" 1206","line":"        )"},
{"lineNum":" 1207","line":""},
{"lineNum":" 1208","line":"    #undef BOOST_VARIANT_AUX_UNWRAP_RECURSIVE_TYPEDEFS"},
{"lineNum":" 1209","line":""},
{"lineNum":" 1210","line":"public: // public typedefs"},
{"lineNum":" 1211","line":""},
{"lineNum":" 1212","line":"    typedef typename detail::variant::make_variant_list<"},
{"lineNum":" 1213","line":"          BOOST_VARIANT_ENUM_PARAMS(public_T)"},
{"lineNum":" 1214","line":"        >::type types;"},
{"lineNum":" 1215","line":""},
{"lineNum":" 1216","line":"private: // helpers, for internal typedefs (below)"},
{"lineNum":" 1217","line":""},
{"lineNum":" 1218","line":"    #define BOOST_VARIANT_AUX_MAKE_REFERENCE_CONTENT_TYPEDEFS(z,N,_) \\"},
{"lineNum":" 1219","line":"        typedef detail::make_reference_content< \\"},
{"lineNum":" 1220","line":"              BOOST_PP_CAT(recursive_enabled_T,N) \\"},
{"lineNum":" 1221","line":"            >::type BOOST_PP_CAT(internal_T,N); \\"},
{"lineNum":" 1222","line":"        /**/"},
{"lineNum":" 1223","line":""},
{"lineNum":" 1224","line":"    BOOST_PP_REPEAT("},
{"lineNum":" 1225","line":"          BOOST_VARIANT_LIMIT_TYPES"},
{"lineNum":" 1226","line":"        , BOOST_VARIANT_AUX_MAKE_REFERENCE_CONTENT_TYPEDEFS"},
{"lineNum":" 1227","line":"        , _"},
{"lineNum":" 1228","line":"        )"},
{"lineNum":" 1229","line":""},
{"lineNum":" 1230","line":"    #undef BOOST_VARIANT_AUX_MAKE_REFERENCE_CONTENT_TYPEDEFS"},
{"lineNum":" 1231","line":""},
{"lineNum":" 1232","line":"private: // internal typedefs"},
{"lineNum":" 1233","line":""},
{"lineNum":" 1234","line":"    typedef typename detail::variant::make_variant_list<"},
{"lineNum":" 1235","line":"          BOOST_VARIANT_ENUM_PARAMS(internal_T)"},
{"lineNum":" 1236","line":"        >::type internal_types;"},
{"lineNum":" 1237","line":""},
{"lineNum":" 1238","line":"private: // static precondition assertions"},
{"lineNum":" 1239","line":""},
{"lineNum":" 1240","line":"    // NOTE TO USER :"},
{"lineNum":" 1241","line":"    // variant< type-sequence > syntax is not supported on this compiler!"},
{"lineNum":" 1242","line":"    //"},
{"lineNum":" 1243","line":"    BOOST_MPL_ASSERT_NOT(( is_sequence_based_ ));"},
{"lineNum":" 1244","line":""},
{"lineNum":" 1245","line":"#endif // BOOST_VARIANT_NO_TYPE_SEQUENCE_SUPPORT workaround"},
{"lineNum":" 1246","line":""},
{"lineNum":" 1247","line":"private: // helpers, for representation (below)"},
{"lineNum":" 1248","line":""},
{"lineNum":" 1249","line":"    typedef typename detail::variant::find_fallback_type<"},
{"lineNum":" 1250","line":"          internal_types"},
{"lineNum":" 1251","line":"        >::type fallback_type_result_;"},
{"lineNum":" 1252","line":""},
{"lineNum":" 1253","line":"    typedef typename fallback_type_result_::first"},
{"lineNum":" 1254","line":"        fallback_type_index_;"},
{"lineNum":" 1255","line":"    typedef typename fallback_type_result_::second"},
{"lineNum":" 1256","line":"        fallback_type_;"},
{"lineNum":" 1257","line":""},
{"lineNum":" 1258","line":"    struct has_fallback_type_"},
{"lineNum":" 1259","line":"        : mpl::not_<"},
{"lineNum":" 1260","line":"              is_same< fallback_type_, detail::variant::no_fallback_type >"},
{"lineNum":" 1261","line":"            >"},
{"lineNum":" 1262","line":"    {"},
{"lineNum":" 1263","line":"    };"},
{"lineNum":" 1264","line":""},
{"lineNum":" 1265","line":"    typedef has_fallback_type_"},
{"lineNum":" 1266","line":"        never_uses_backup_flag;"},
{"lineNum":" 1267","line":""},
{"lineNum":" 1268","line":"    typedef typename detail::variant::make_storage<"},
{"lineNum":" 1269","line":"          internal_types, never_uses_backup_flag"},
{"lineNum":" 1270","line":"        >::type storage_t;"},
{"lineNum":" 1271","line":""},
{"lineNum":" 1272","line":"#ifndef BOOST_NO_CXX11_NOEXCEPT"},
{"lineNum":" 1273","line":"    typedef typename detail::variant::is_variant_move_noexcept_constructible<"},
{"lineNum":" 1274","line":"        internal_types"},
{"lineNum":" 1275","line":"    > variant_move_noexcept_constructible;"},
{"lineNum":" 1276","line":""},
{"lineNum":" 1277","line":"    typedef typename detail::variant::is_variant_move_noexcept_assignable<"},
{"lineNum":" 1278","line":"        internal_types"},
{"lineNum":" 1279","line":"    > variant_move_noexcept_assignable;"},
{"lineNum":" 1280","line":""},
{"lineNum":" 1281","line":"#endif"},
{"lineNum":" 1282","line":""},
{"lineNum":" 1283","line":"private: // helpers, for representation (below)"},
{"lineNum":" 1284","line":""},
{"lineNum":" 1285","line":"    // which_ on:"},
{"lineNum":" 1286","line":"    // * [0,  size<internal_types>) indicates stack content"},
{"lineNum":" 1287","line":"    // * [-size<internal_types>, 0) indicates pointer to heap backup"},
{"lineNum":" 1288","line":"    // if which_ >= 0:"},
{"lineNum":" 1289","line":"    // * then which() -> which_"},
{"lineNum":" 1290","line":"    // * else which() -> -(which_ + 1)"},
{"lineNum":" 1291","line":""},
{"lineNum":" 1292","line":"#if !defined(BOOST_VARIANT_MINIMIZE_SIZE)"},
{"lineNum":" 1293","line":""},
{"lineNum":" 1294","line":"    typedef int which_t;"},
{"lineNum":" 1295","line":""},
{"lineNum":" 1296","line":"#else // defined(BOOST_VARIANT_MINIMIZE_SIZE)"},
{"lineNum":" 1297","line":""},
{"lineNum":" 1298","line":"    // [if O1_size available, then attempt which_t size optimization...]"},
{"lineNum":" 1299","line":"    // [select signed char if fewer than SCHAR_MAX types, else signed int:]"},
{"lineNum":" 1300","line":"    typedef typename mpl::eval_if<"},
{"lineNum":" 1301","line":"          mpl::equal_to< mpl::O1_size<internal_types>, mpl::long_<-1> >"},
{"lineNum":" 1302","line":"        , mpl::identity< int >"},
{"lineNum":" 1303","line":"        , mpl::if_<"},
{"lineNum":" 1304","line":"              mpl::less< mpl::O1_size<internal_types>, mpl::int_<SCHAR_MAX> >"},
{"lineNum":" 1305","line":"            , signed char"},
{"lineNum":" 1306","line":"            , int"},
{"lineNum":" 1307","line":"            >"},
{"lineNum":" 1308","line":"        >::type which_t;"},
{"lineNum":" 1309","line":""},
{"lineNum":" 1310","line":"#endif // BOOST_VARIANT_MINIMIZE_SIZE switch"},
{"lineNum":" 1311","line":""},
{"lineNum":" 1312","line":"// representation -- private when possible"},
{"lineNum":" 1313","line":"#if !defined(BOOST_NO_MEMBER_TEMPLATE_FRIENDS)"},
{"lineNum":" 1314","line":"    private:"},
{"lineNum":" 1315","line":"#else"},
{"lineNum":" 1316","line":"    public:"},
{"lineNum":" 1317","line":"#endif"},
{"lineNum":" 1318","line":""},
{"lineNum":" 1319","line":"    which_t which_;"},
{"lineNum":" 1320","line":"    storage_t storage_;"},
{"lineNum":" 1321","line":""},
{"lineNum":" 1322","line":"    void indicate_which(int which_arg) BOOST_NOEXCEPT"},
{"lineNum":" 1323","line":"    {"},
{"lineNum":" 1324","line":"        which_ = static_cast<which_t>( which_arg );","class":"lineNoCov","hits":"0","possible_hits":"105",},
{"lineNum":" 1325","line":"    }"},
{"lineNum":" 1326","line":""},
{"lineNum":" 1327","line":"    void indicate_backup_which(int which_arg) BOOST_NOEXCEPT"},
{"lineNum":" 1328","line":"    {"},
{"lineNum":" 1329","line":"        which_ = static_cast<which_t>( -(which_arg + 1) );"},
{"lineNum":" 1330","line":"    }"},
{"lineNum":" 1331","line":""},
{"lineNum":" 1332","line":"private: // helpers, for queries (below)"},
{"lineNum":" 1333","line":""},
{"lineNum":" 1334","line":"    bool using_backup() const BOOST_NOEXCEPT"},
{"lineNum":" 1335","line":"    {"},
{"lineNum":" 1336","line":"        return which_ < 0;","class":"lineNoCov","hits":"0","possible_hits":"56",},
{"lineNum":" 1337","line":"    }"},
{"lineNum":" 1338","line":""},
{"lineNum":" 1339","line":"public: // queries"},
{"lineNum":" 1340","line":""},
{"lineNum":" 1341","line":"    int which() const BOOST_NOEXCEPT"},
{"lineNum":" 1342","line":"    {"},
{"lineNum":" 1343","line":"        // If using heap backup..."},
{"lineNum":" 1344","line":"        if (using_backup())","class":"lineNoCov","hits":"0","possible_hits":"302",},
{"lineNum":" 1345","line":"            // ...then return adjusted which_:"},
{"lineNum":" 1346","line":"            return -(which_ + 1);"},
{"lineNum":" 1347","line":""},
{"lineNum":" 1348","line":"        // Otherwise, return which_ directly:"},
{"lineNum":" 1349","line":"        return which_;"},
{"lineNum":" 1350","line":"    }"},
{"lineNum":" 1351","line":""},
{"lineNum":" 1352","line":"private: // helpers, for structors (below)"},
{"lineNum":" 1353","line":""},
{"lineNum":" 1354","line":"    struct initializer"},
{"lineNum":" 1355","line":"        : BOOST_VARIANT_AUX_INITIALIZER_T("},
{"lineNum":" 1356","line":"              recursive_enabled_types, recursive_enabled_T"},
{"lineNum":" 1357","line":"            )"},
{"lineNum":" 1358","line":"    {"},
{"lineNum":" 1359","line":"    };"},
{"lineNum":" 1360","line":""},
{"lineNum":" 1361","line":"    void destroy_content() BOOST_NOEXCEPT"},
{"lineNum":" 1362","line":"    {"},
{"lineNum":" 1363","line":"        detail::variant::destroyer visitor;"},
{"lineNum":" 1364","line":"        this->internal_apply_visitor(visitor);"},
{"lineNum":" 1365","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"108",},
{"lineNum":" 1366","line":""},
{"lineNum":" 1367","line":"public: // structors"},
{"lineNum":" 1368","line":""},
{"lineNum":" 1369","line":"    ~variant() BOOST_NOEXCEPT"},
{"lineNum":" 1370","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1371","line":"        destroy_content();"},
{"lineNum":" 1372","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1373","line":""},
{"lineNum":" 1374","line":"    variant()"},
{"lineNum":" 1375","line":"#if !(defined(__SUNPRO_CC) && BOOST_WORKAROUND(__SUNPRO_CC, <= 0x5130))"},
{"lineNum":" 1376","line":"              BOOST_NOEXCEPT_IF(boost::has_nothrow_constructor<internal_T0>::value)"},
{"lineNum":" 1377","line":"#endif"},
{"lineNum":" 1378","line":"    {"},
{"lineNum":" 1379","line":"#ifdef _MSC_VER"},
{"lineNum":" 1380","line":"#pragma warning( push )"},
{"lineNum":" 1381","line":"// behavior change: an object of POD type constructed with an initializer of the form () will be default-initialized"},
{"lineNum":" 1382","line":"#pragma warning( disable : 4345 )"},
{"lineNum":" 1383","line":"#endif"},
{"lineNum":" 1384","line":"        // NOTE TO USER :"},
{"lineNum":" 1385","line":"        // Compile error from here indicates that the first bound"},
{"lineNum":" 1386","line":"        // type is not default-constructible, and so variant cannot"},
{"lineNum":" 1387","line":"        // support its own default-construction."},
{"lineNum":" 1388","line":"        //"},
{"lineNum":" 1389","line":"        new( storage_.address() ) internal_T0();","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":" 1390","line":"        indicate_which(0); // zero is the index of the first bounded type"},
{"lineNum":" 1391","line":"#ifdef _MSC_VER"},
{"lineNum":" 1392","line":"#pragma warning( pop )"},
{"lineNum":" 1393","line":"#endif"},
{"lineNum":" 1394","line":"    }"},
{"lineNum":" 1395","line":""},
{"lineNum":" 1396","line":"private: // helpers, for structors, cont. (below)"},
{"lineNum":" 1397","line":""},
{"lineNum":" 1398","line":"    class convert_copy_into"},
{"lineNum":" 1399","line":"        : public static_visitor<int>"},
{"lineNum":" 1400","line":"    {"},
{"lineNum":" 1401","line":"    private: // representation"},
{"lineNum":" 1402","line":""},
{"lineNum":" 1403","line":"        void* storage_;"},
{"lineNum":" 1404","line":""},
{"lineNum":" 1405","line":"    public: // structors"},
{"lineNum":" 1406","line":""},
{"lineNum":" 1407","line":"        explicit convert_copy_into(void* storage) BOOST_NOEXCEPT"},
{"lineNum":" 1408","line":"            : storage_(storage)"},
{"lineNum":" 1409","line":"        {"},
{"lineNum":" 1410","line":"        }"},
{"lineNum":" 1411","line":""},
{"lineNum":" 1412","line":"    public: // internal visitor interfaces (below)"},
{"lineNum":" 1413","line":""},
{"lineNum":" 1414","line":"        template <typename T>"},
{"lineNum":" 1415","line":"        int internal_visit(T& operand, int) const"},
{"lineNum":" 1416","line":"        {"},
{"lineNum":" 1417","line":"            // NOTE TO USER :"},
{"lineNum":" 1418","line":"            // Compile error here indicates one of the source variant\'s types"},
{"lineNum":" 1419","line":"            // cannot be unambiguously converted to the destination variant\'s"},
{"lineNum":" 1420","line":"            // types (or that no conversion exists)."},
{"lineNum":" 1421","line":"            //"},
{"lineNum":" 1422","line":"            return initializer::initialize(storage_, operand);"},
{"lineNum":" 1423","line":"        }"},
{"lineNum":" 1424","line":""},
{"lineNum":" 1425","line":"#   if BOOST_WORKAROUND(__BORLANDC__, BOOST_TESTED_AT(0x0564))"},
{"lineNum":" 1426","line":"        template <typename T>"},
{"lineNum":" 1427","line":"        result_type internal_visit(const T& operand, int) const"},
{"lineNum":" 1428","line":"        {"},
{"lineNum":" 1429","line":"            return initializer::initialize(storage_, operand);"},
{"lineNum":" 1430","line":"        }"},
{"lineNum":" 1431","line":"#   endif"},
{"lineNum":" 1432","line":""},
{"lineNum":" 1433","line":"        template <typename T>"},
{"lineNum":" 1434","line":"        int internal_visit(boost::detail::reference_content<T>& operand, long) const"},
{"lineNum":" 1435","line":"        {"},
{"lineNum":" 1436","line":"            return internal_visit( operand.get(), 1L );"},
{"lineNum":" 1437","line":"        }"},
{"lineNum":" 1438","line":""},
{"lineNum":" 1439","line":"        template <typename T>"},
{"lineNum":" 1440","line":"        int internal_visit(const boost::detail::reference_content<T>& operand, long) const"},
{"lineNum":" 1441","line":"        {"},
{"lineNum":" 1442","line":"            return internal_visit( operand.get(), 1L );"},
{"lineNum":" 1443","line":"        }"},
{"lineNum":" 1444","line":""},
{"lineNum":" 1445","line":"        template <typename T>"},
{"lineNum":" 1446","line":"        int internal_visit(boost::detail::variant::backup_holder<T>& operand, long) const"},
{"lineNum":" 1447","line":"        {"},
{"lineNum":" 1448","line":"            return internal_visit( operand.get(), 1L );"},
{"lineNum":" 1449","line":"        }"},
{"lineNum":" 1450","line":""},
{"lineNum":" 1451","line":"        template <typename T>"},
{"lineNum":" 1452","line":"        int internal_visit(const boost::detail::variant::backup_holder<T>& operand, long) const"},
{"lineNum":" 1453","line":"        {"},
{"lineNum":" 1454","line":"            return internal_visit( operand.get(), 1L );"},
{"lineNum":" 1455","line":"        }"},
{"lineNum":" 1456","line":""},
{"lineNum":" 1457","line":"        template <typename T>"},
{"lineNum":" 1458","line":"        int internal_visit(boost::recursive_wrapper<T>& operand, long) const"},
{"lineNum":" 1459","line":"        {"},
{"lineNum":" 1460","line":"            return internal_visit( operand.get(), 1L );"},
{"lineNum":" 1461","line":"        }"},
{"lineNum":" 1462","line":""},
{"lineNum":" 1463","line":"        template <typename T>"},
{"lineNum":" 1464","line":"        int internal_visit(const boost::recursive_wrapper<T>& operand, long) const"},
{"lineNum":" 1465","line":"        {"},
{"lineNum":" 1466","line":"            return internal_visit( operand.get(), 1L );"},
{"lineNum":" 1467","line":"        }"},
{"lineNum":" 1468","line":""},
{"lineNum":" 1469","line":"    };"},
{"lineNum":" 1470","line":""},
{"lineNum":" 1471","line":"    friend class convert_copy_into;"},
{"lineNum":" 1472","line":""},
{"lineNum":" 1473","line":"#ifndef BOOST_NO_CXX11_RVALUE_REFERENCES"},
{"lineNum":" 1474","line":"    class convert_move_into"},
{"lineNum":" 1475","line":"        : public static_visitor<int>"},
{"lineNum":" 1476","line":"    {"},
{"lineNum":" 1477","line":"    private: // representation"},
{"lineNum":" 1478","line":""},
{"lineNum":" 1479","line":"        void* storage_;"},
{"lineNum":" 1480","line":""},
{"lineNum":" 1481","line":"    public: // structors"},
{"lineNum":" 1482","line":""},
{"lineNum":" 1483","line":"        explicit convert_move_into(void* storage) BOOST_NOEXCEPT"},
{"lineNum":" 1484","line":"            : storage_(storage)"},
{"lineNum":" 1485","line":"        {"},
{"lineNum":" 1486","line":"        }"},
{"lineNum":" 1487","line":""},
{"lineNum":" 1488","line":"    public: // internal visitor interfaces (below)"},
{"lineNum":" 1489","line":""},
{"lineNum":" 1490","line":"        template <typename T>"},
{"lineNum":" 1491","line":"        int internal_visit(T& operand, int) const"},
{"lineNum":" 1492","line":"        {"},
{"lineNum":" 1493","line":"            // NOTE TO USER :"},
{"lineNum":" 1494","line":"            // Compile error here indicates one of the source variant\'s types"},
{"lineNum":" 1495","line":"            // cannot be unambiguously converted to the destination variant\'s"},
{"lineNum":" 1496","line":"            // types (or that no conversion exists)."},
{"lineNum":" 1497","line":"            //"},
{"lineNum":" 1498","line":"            return initializer::initialize(storage_, detail::variant::move(operand) );"},
{"lineNum":" 1499","line":"        }"},
{"lineNum":" 1500","line":""},
{"lineNum":" 1501","line":"        template <typename T>"},
{"lineNum":" 1502","line":"        int internal_visit(boost::detail::reference_content<T>& operand, long) const"},
{"lineNum":" 1503","line":"        {"},
{"lineNum":" 1504","line":"            return internal_visit( operand.get(), 1L );"},
{"lineNum":" 1505","line":"        }"},
{"lineNum":" 1506","line":""},
{"lineNum":" 1507","line":"        template <typename T>"},
{"lineNum":" 1508","line":"        int internal_visit(const boost::detail::reference_content<T>& operand, long) const"},
{"lineNum":" 1509","line":"        {"},
{"lineNum":" 1510","line":"            return internal_visit( operand.get(), 1L );"},
{"lineNum":" 1511","line":"        }"},
{"lineNum":" 1512","line":""},
{"lineNum":" 1513","line":"        template <typename T>"},
{"lineNum":" 1514","line":"        int internal_visit(boost::detail::variant::backup_holder<T>& operand, long) const"},
{"lineNum":" 1515","line":"        {"},
{"lineNum":" 1516","line":"            return internal_visit( operand.get(), 1L );"},
{"lineNum":" 1517","line":"        }"},
{"lineNum":" 1518","line":""},
{"lineNum":" 1519","line":"        template <typename T>"},
{"lineNum":" 1520","line":"        int internal_visit(const boost::detail::variant::backup_holder<T>& operand, long) const"},
{"lineNum":" 1521","line":"        {"},
{"lineNum":" 1522","line":"            return internal_visit( operand.get(), 1L );"},
{"lineNum":" 1523","line":"        }"},
{"lineNum":" 1524","line":""},
{"lineNum":" 1525","line":"        template <typename T>"},
{"lineNum":" 1526","line":"        int internal_visit(boost::recursive_wrapper<T>& operand, long) const"},
{"lineNum":" 1527","line":"        {"},
{"lineNum":" 1528","line":"            return internal_visit( operand.get(), 1L );"},
{"lineNum":" 1529","line":"        }"},
{"lineNum":" 1530","line":""},
{"lineNum":" 1531","line":"        template <typename T>"},
{"lineNum":" 1532","line":"        int internal_visit(const boost::recursive_wrapper<T>& operand, long) const"},
{"lineNum":" 1533","line":"        {"},
{"lineNum":" 1534","line":"            return internal_visit( operand.get(), 1L );"},
{"lineNum":" 1535","line":"        }"},
{"lineNum":" 1536","line":"    };"},
{"lineNum":" 1537","line":""},
{"lineNum":" 1538","line":"    friend class convert_move_into;"},
{"lineNum":" 1539","line":"#endif"},
{"lineNum":" 1540","line":""},
{"lineNum":" 1541","line":"private: // helpers, for structors, below"},
{"lineNum":" 1542","line":""},
{"lineNum":" 1543","line":"    template <typename T>"},
{"lineNum":" 1544","line":"    void convert_construct("},
{"lineNum":" 1545","line":"          T& operand"},
{"lineNum":" 1546","line":"        , int"},
{"lineNum":" 1547","line":"        , mpl::false_ = mpl::false_() // is_foreign_variant"},
{"lineNum":" 1548","line":"        )"},
{"lineNum":" 1549","line":"    {"},
{"lineNum":" 1550","line":"        // NOTE TO USER :"},
{"lineNum":" 1551","line":"        // Compile error here indicates that the given type is not"},
{"lineNum":" 1552","line":"        // unambiguously convertible to one of the variant\'s types"},
{"lineNum":" 1553","line":"        // (or that no conversion exists)."},
{"lineNum":" 1554","line":"        //"},
{"lineNum":" 1555","line":"        indicate_which("},
{"lineNum":" 1556","line":"              initializer::initialize("},
{"lineNum":" 1557","line":"                  storage_.address()"},
{"lineNum":" 1558","line":"                , operand"},
{"lineNum":" 1559","line":"                )"},
{"lineNum":" 1560","line":"            );"},
{"lineNum":" 1561","line":"    }"},
{"lineNum":" 1562","line":""},
{"lineNum":" 1563","line":"#ifndef BOOST_NO_CXX11_RVALUE_REFERENCES"},
{"lineNum":" 1564","line":"    template <typename T>"},
{"lineNum":" 1565","line":"    typename boost::enable_if<boost::is_rvalue_reference<T&&> >::type convert_construct("},
{"lineNum":" 1566","line":"          T&& operand"},
{"lineNum":" 1567","line":"        , int"},
{"lineNum":" 1568","line":"        , mpl::false_ = mpl::false_() // is_foreign_variant"},
{"lineNum":" 1569","line":"        )"},
{"lineNum":" 1570","line":"    {"},
{"lineNum":" 1571","line":"        // NOTE TO USER :"},
{"lineNum":" 1572","line":"        // Compile error here indicates that the given type is not"},
{"lineNum":" 1573","line":"        // unambiguously convertible to one of the variant\'s types"},
{"lineNum":" 1574","line":"        // (or that no conversion exists)."},
{"lineNum":" 1575","line":"        //"},
{"lineNum":" 1576","line":"        indicate_which("},
{"lineNum":" 1577","line":"              initializer::initialize("},
{"lineNum":" 1578","line":"                  storage_.address()"},
{"lineNum":" 1579","line":"                , detail::variant::move(operand)"},
{"lineNum":" 1580","line":"                )"},
{"lineNum":" 1581","line":"            );"},
{"lineNum":" 1582","line":"    }"},
{"lineNum":" 1583","line":"#endif"},
{"lineNum":" 1584","line":""},
{"lineNum":" 1585","line":"    template <typename Variant>"},
{"lineNum":" 1586","line":"    void convert_construct("},
{"lineNum":" 1587","line":"          Variant& operand"},
{"lineNum":" 1588","line":"        , long"},
{"lineNum":" 1589","line":"        , mpl::true_// is_foreign_variant"},
{"lineNum":" 1590","line":"        )"},
{"lineNum":" 1591","line":"    {"},
{"lineNum":" 1592","line":"        convert_copy_into visitor(storage_.address());"},
{"lineNum":" 1593","line":"        indicate_which("},
{"lineNum":" 1594","line":"              operand.internal_apply_visitor(visitor)"},
{"lineNum":" 1595","line":"            );"},
{"lineNum":" 1596","line":"    }"},
{"lineNum":" 1597","line":""},
{"lineNum":" 1598","line":"#ifndef BOOST_NO_CXX11_RVALUE_REFERENCES"},
{"lineNum":" 1599","line":"    template <typename Variant>"},
{"lineNum":" 1600","line":"    typename boost::enable_if<boost::is_rvalue_reference<Variant&&> >::type convert_construct("},
{"lineNum":" 1601","line":"          Variant&& operand"},
{"lineNum":" 1602","line":"        , long"},
{"lineNum":" 1603","line":"        , mpl::true_// is_foreign_variant"},
{"lineNum":" 1604","line":"        )"},
{"lineNum":" 1605","line":"    {"},
{"lineNum":" 1606","line":"        convert_move_into visitor(storage_.address());"},
{"lineNum":" 1607","line":"        indicate_which("},
{"lineNum":" 1608","line":"              operand.internal_apply_visitor(visitor)"},
{"lineNum":" 1609","line":"            );"},
{"lineNum":" 1610","line":"    }"},
{"lineNum":" 1611","line":"#endif"},
{"lineNum":" 1612","line":""},
{"lineNum":" 1613","line":"    template <typename Variant>"},
{"lineNum":" 1614","line":"    void convert_construct_variant(Variant& operand)"},
{"lineNum":" 1615","line":"    {"},
{"lineNum":" 1616","line":"        // [Determine if the given variant is itself a bounded type, or if its"},
{"lineNum":" 1617","line":"        //  content needs to be converted (i.e., it is a \'foreign\' variant):]"},
{"lineNum":" 1618","line":"        //"},
{"lineNum":" 1619","line":""},
{"lineNum":" 1620","line":"        typedef typename mpl::find_if<"},
{"lineNum":" 1621","line":"              types"},
{"lineNum":" 1622","line":"            , is_same<"},
{"lineNum":" 1623","line":"                  add_const<mpl::_1>"},
{"lineNum":" 1624","line":"                , const Variant"},
{"lineNum":" 1625","line":"                >"},
{"lineNum":" 1626","line":"            >::type found_it;"},
{"lineNum":" 1627","line":""},
{"lineNum":" 1628","line":"        typedef typename mpl::end<types>::type not_found;"},
{"lineNum":" 1629","line":"        typedef typename is_same<"},
{"lineNum":" 1630","line":"              found_it, not_found"},
{"lineNum":" 1631","line":"            >::type is_foreign_variant;"},
{"lineNum":" 1632","line":""},
{"lineNum":" 1633","line":"        // Convert construct from operand:"},
{"lineNum":" 1634","line":"        convert_construct("},
{"lineNum":" 1635","line":"              operand, 1L"},
{"lineNum":" 1636","line":"            , is_foreign_variant()"},
{"lineNum":" 1637","line":"            );"},
{"lineNum":" 1638","line":"    }"},
{"lineNum":" 1639","line":""},
{"lineNum":" 1640","line":"#ifndef BOOST_NO_CXX11_RVALUE_REFERENCES"},
{"lineNum":" 1641","line":"    template <typename Variant>"},
{"lineNum":" 1642","line":"    typename boost::enable_if<boost::is_rvalue_reference<Variant&&> >::type convert_construct_variant(Variant&& operand)"},
{"lineNum":" 1643","line":"    {"},
{"lineNum":" 1644","line":"        // [Determine if the given variant is itself a bounded type, or if its"},
{"lineNum":" 1645","line":"        //  content needs to be converted (i.e., it is a \'foreign\' variant):]"},
{"lineNum":" 1646","line":"        //"},
{"lineNum":" 1647","line":""},
{"lineNum":" 1648","line":"        typedef typename mpl::find_if<"},
{"lineNum":" 1649","line":"              types"},
{"lineNum":" 1650","line":"            , is_same<"},
{"lineNum":" 1651","line":"                  add_const<mpl::_1>"},
{"lineNum":" 1652","line":"                , const Variant"},
{"lineNum":" 1653","line":"                >"},
{"lineNum":" 1654","line":"            >::type found_it;"},
{"lineNum":" 1655","line":""},
{"lineNum":" 1656","line":"        typedef typename mpl::end<types>::type not_found;"},
{"lineNum":" 1657","line":"        typedef typename is_same<"},
{"lineNum":" 1658","line":"              found_it, not_found"},
{"lineNum":" 1659","line":"            >::type is_foreign_variant;"},
{"lineNum":" 1660","line":""},
{"lineNum":" 1661","line":"        // Convert move construct from operand:"},
{"lineNum":" 1662","line":"        convert_construct("},
{"lineNum":" 1663","line":"              detail::variant::move(operand), 1L"},
{"lineNum":" 1664","line":"            , is_foreign_variant()"},
{"lineNum":" 1665","line":"            );"},
{"lineNum":" 1666","line":"    }"},
{"lineNum":" 1667","line":"#endif"},
{"lineNum":" 1668","line":""},
{"lineNum":" 1669","line":"    template <BOOST_VARIANT_ENUM_PARAMS(typename U)>"},
{"lineNum":" 1670","line":"    typename boost::enable_if<mpl::or_<"},
{"lineNum":" 1671","line":"        boost::is_same<boost::variant<BOOST_VARIANT_ENUM_PARAMS(U)>, variant>,"},
{"lineNum":" 1672","line":"        boost::detail::variant::is_variant_constructible_from<boost::variant<BOOST_VARIANT_ENUM_PARAMS(U)>&, internal_types>"},
{"lineNum":" 1673","line":"    > >::type convert_construct("},
{"lineNum":" 1674","line":"          boost::variant<BOOST_VARIANT_ENUM_PARAMS(U)>& operand"},
{"lineNum":" 1675","line":"        , long"},
{"lineNum":" 1676","line":"        )"},
{"lineNum":" 1677","line":"    {"},
{"lineNum":" 1678","line":"        convert_construct_variant(operand);"},
{"lineNum":" 1679","line":"    }"},
{"lineNum":" 1680","line":""},
{"lineNum":" 1681","line":"    template <BOOST_VARIANT_ENUM_PARAMS(typename U)>"},
{"lineNum":" 1682","line":"    typename boost::enable_if<mpl::or_<"},
{"lineNum":" 1683","line":"        boost::is_same<boost::variant<BOOST_VARIANT_ENUM_PARAMS(U)>, variant>,"},
{"lineNum":" 1684","line":"        boost::detail::variant::is_variant_constructible_from<const boost::variant<BOOST_VARIANT_ENUM_PARAMS(U)>&, internal_types>"},
{"lineNum":" 1685","line":"    > >::type convert_construct("},
{"lineNum":" 1686","line":"          const boost::variant<BOOST_VARIANT_ENUM_PARAMS(U)>& operand"},
{"lineNum":" 1687","line":"        , long"},
{"lineNum":" 1688","line":"        )"},
{"lineNum":" 1689","line":"    {"},
{"lineNum":" 1690","line":"        convert_construct_variant(operand);"},
{"lineNum":" 1691","line":"    }"},
{"lineNum":" 1692","line":""},
{"lineNum":" 1693","line":"#ifndef BOOST_NO_CXX11_RVALUE_REFERENCES"},
{"lineNum":" 1694","line":"    template <BOOST_VARIANT_ENUM_PARAMS(typename U)>"},
{"lineNum":" 1695","line":"    typename boost::enable_if<mpl::or_<"},
{"lineNum":" 1696","line":"        boost::is_same<boost::variant<BOOST_VARIANT_ENUM_PARAMS(U)>, variant>,"},
{"lineNum":" 1697","line":"        boost::detail::variant::is_variant_constructible_from<boost::variant<BOOST_VARIANT_ENUM_PARAMS(U)>&&, internal_types>"},
{"lineNum":" 1698","line":"    > >::type convert_construct("},
{"lineNum":" 1699","line":"          boost::variant<BOOST_VARIANT_ENUM_PARAMS(U)>&& operand"},
{"lineNum":" 1700","line":"        , long"},
{"lineNum":" 1701","line":"        )"},
{"lineNum":" 1702","line":"    {"},
{"lineNum":" 1703","line":"        convert_construct_variant( detail::variant::move(operand) );"},
{"lineNum":" 1704","line":"    }"},
{"lineNum":" 1705","line":"#endif"},
{"lineNum":" 1706","line":""},
{"lineNum":" 1707","line":"public: // structors, cont."},
{"lineNum":" 1708","line":""},
{"lineNum":" 1709","line":"    template <typename T>"},
{"lineNum":" 1710","line":"    variant(const T& operand,"},
{"lineNum":" 1711","line":"        typename boost::enable_if<mpl::or_<"},
{"lineNum":" 1712","line":"            mpl::and_<"},
{"lineNum":" 1713","line":"                mpl::not_< boost::is_same<T, variant> >,"},
{"lineNum":" 1714","line":"                boost::detail::variant::is_variant_constructible_from<const T&, internal_types>"},
{"lineNum":" 1715","line":"            >,"},
{"lineNum":" 1716","line":"            boost::is_same<T, boost::recursive_variant_> > >::type* = 0)"},
{"lineNum":" 1717","line":"    {"},
{"lineNum":" 1718","line":"        convert_construct(operand, 1L);"},
{"lineNum":" 1719","line":"    }"},
{"lineNum":" 1720","line":""},
{"lineNum":" 1721","line":"    template <typename T>"},
{"lineNum":" 1722","line":"    variant("},
{"lineNum":" 1723","line":"          T& operand"},
{"lineNum":" 1724","line":"        , typename boost::enable_if<mpl::or_<"},
{"lineNum":" 1725","line":"            mpl::and_<"},
{"lineNum":" 1726","line":"                mpl::not_< is_const<T> >,"},
{"lineNum":" 1727","line":"                mpl::not_< boost::is_same<T, variant> >,"},
{"lineNum":" 1728","line":"                boost::detail::variant::is_variant_constructible_from<T&, internal_types>"},
{"lineNum":" 1729","line":"            >,"},
{"lineNum":" 1730","line":"            boost::is_same<T, boost::recursive_variant_> > >::type* = 0"},
{"lineNum":" 1731","line":"        )"},
{"lineNum":" 1732","line":"    {"},
{"lineNum":" 1733","line":"        convert_construct(operand, 1L);"},
{"lineNum":" 1734","line":"    }"},
{"lineNum":" 1735","line":""},
{"lineNum":" 1736","line":"#ifndef BOOST_NO_CXX11_RVALUE_REFERENCES"},
{"lineNum":" 1737","line":"    template <class T>"},
{"lineNum":" 1738","line":"    variant(T&& operand,"},
{"lineNum":" 1739","line":"        typename boost::enable_if<mpl::or_<"},
{"lineNum":" 1740","line":"            mpl::and_<"},
{"lineNum":" 1741","line":"                boost::is_rvalue_reference<T&&>,"},
{"lineNum":" 1742","line":"                mpl::not_< boost::is_const<T> >,"},
{"lineNum":" 1743","line":"                mpl::not_< boost::is_same<T, variant> >,"},
{"lineNum":" 1744","line":"                boost::detail::variant::is_variant_constructible_from<T&&, internal_types>"},
{"lineNum":" 1745","line":"            >,"},
{"lineNum":" 1746","line":"            boost::is_same<T, boost::recursive_variant_> > >::type* = 0)"},
{"lineNum":" 1747","line":"    {"},
{"lineNum":" 1748","line":"        convert_construct( detail::variant::move(operand), 1L);"},
{"lineNum":" 1749","line":"    }"},
{"lineNum":" 1750","line":"#endif"},
{"lineNum":" 1751","line":""},
{"lineNum":" 1752","line":"public: // structors, cont."},
{"lineNum":" 1753","line":""},
{"lineNum":" 1754","line":"    // [MSVC6 requires copy constructor appear after template constructors]"},
{"lineNum":" 1755","line":"    variant(const variant& operand)"},
{"lineNum":" 1756","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1757","line":"        // Copy the value of operand into *this..."},
{"lineNum":" 1758","line":"        detail::variant::copy_into visitor( storage_.address() );"},
{"lineNum":" 1759","line":"        operand.internal_apply_visitor(visitor);"},
{"lineNum":" 1760","line":""},
{"lineNum":" 1761","line":"        // ...and activate the *this\'s primary storage on success:"},
{"lineNum":" 1762","line":"        indicate_which(operand.which());"},
{"lineNum":" 1763","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1764","line":""},
{"lineNum":" 1765","line":"#ifndef BOOST_NO_CXX11_RVALUE_REFERENCES"},
{"lineNum":" 1766","line":"    variant(variant&& operand) BOOST_NOEXCEPT_IF(variant_move_noexcept_constructible::type::value)"},
{"lineNum":" 1767","line":"    {"},
{"lineNum":" 1768","line":"        // Move the value of operand into *this..."},
{"lineNum":" 1769","line":"        detail::variant::move_into visitor( storage_.address() );"},
{"lineNum":" 1770","line":"        operand.internal_apply_visitor(visitor);"},
{"lineNum":" 1771","line":""},
{"lineNum":" 1772","line":"        // ...and activate the *this\'s primary storage on success:"},
{"lineNum":" 1773","line":"        indicate_which(operand.which());"},
{"lineNum":" 1774","line":"    }"},
{"lineNum":" 1775","line":"#endif"},
{"lineNum":" 1776","line":""},
{"lineNum":" 1777","line":"private: // helpers, for modifiers (below)"},
{"lineNum":" 1778","line":""},
{"lineNum":" 1779","line":"#   if !defined(BOOST_NO_MEMBER_TEMPLATE_FRIENDS)"},
{"lineNum":" 1780","line":"    template <typename Variant>"},
{"lineNum":" 1781","line":"    friend class detail::variant::backup_assigner;"},
{"lineNum":" 1782","line":"#   endif"},
{"lineNum":" 1783","line":""},
{"lineNum":" 1784","line":"    // class assigner"},
{"lineNum":" 1785","line":"    //"},
{"lineNum":" 1786","line":"    // Internal visitor that \"assigns\" the visited value to the given variant"},
{"lineNum":" 1787","line":"    // by appropriate destruction and copy-construction."},
{"lineNum":" 1788","line":"    //"},
{"lineNum":" 1789","line":""},
{"lineNum":" 1790","line":"    class assigner"},
{"lineNum":" 1791","line":"        : public static_visitor<>"},
{"lineNum":" 1792","line":"    {"},
{"lineNum":" 1793","line":"    protected: // representation"},
{"lineNum":" 1794","line":""},
{"lineNum":" 1795","line":"        variant& lhs_;"},
{"lineNum":" 1796","line":"        const int rhs_which_;"},
{"lineNum":" 1797","line":""},
{"lineNum":" 1798","line":"    public: // structors"},
{"lineNum":" 1799","line":""},
{"lineNum":" 1800","line":"        assigner(variant& lhs, int rhs_which) BOOST_NOEXCEPT"},
{"lineNum":" 1801","line":"            : lhs_(lhs)","class":"lineNoCov","hits":"0","possible_hits":"26",},
{"lineNum":" 1802","line":"            , rhs_which_(rhs_which)","class":"lineNoCov","hits":"0","possible_hits":"26",},
{"lineNum":" 1803","line":"        {"},
{"lineNum":" 1804","line":"        }"},
{"lineNum":" 1805","line":""},
{"lineNum":" 1806","line":"    protected: // helpers, for internal visitor interface (below)"},
{"lineNum":" 1807","line":""},
{"lineNum":" 1808","line":"        template <typename RhsT, typename B1, typename B2>"},
{"lineNum":" 1809","line":"        void assign_impl("},
{"lineNum":" 1810","line":"              const RhsT& rhs_content"},
{"lineNum":" 1811","line":"            , mpl::true_ // has_nothrow_copy"},
{"lineNum":" 1812","line":"            , B1 // is_nothrow_move_constructible"},
{"lineNum":" 1813","line":"            , B2 // has_fallback_type"},
{"lineNum":" 1814","line":"            ) const BOOST_NOEXCEPT"},
{"lineNum":" 1815","line":"        {"},
{"lineNum":" 1816","line":"            // Destroy lhs\'s content..."},
{"lineNum":" 1817","line":"            lhs_.destroy_content(); // nothrow","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1818","line":""},
{"lineNum":" 1819","line":"            // ...copy rhs content into lhs\'s storage..."},
{"lineNum":" 1820","line":"            new(lhs_.storage_.address())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1821","line":"                RhsT( rhs_content ); // nothrow","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1822","line":""},
{"lineNum":" 1823","line":"            // ...and indicate new content type:"},
{"lineNum":" 1824","line":"            lhs_.indicate_which(rhs_which_); // nothrow","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1825","line":"        }"},
{"lineNum":" 1826","line":""},
{"lineNum":" 1827","line":"        template <typename RhsT, typename B>"},
{"lineNum":" 1828","line":"        void assign_impl("},
{"lineNum":" 1829","line":"              const RhsT& rhs_content"},
{"lineNum":" 1830","line":"            , mpl::false_ // has_nothrow_copy"},
{"lineNum":" 1831","line":"            , mpl::true_ // is_nothrow_move_constructible"},
{"lineNum":" 1832","line":"            , B // has_fallback_type"},
{"lineNum":" 1833","line":"            ) const"},
{"lineNum":" 1834","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1835","line":"            // Attempt to make a temporary copy (so as to move it below)..."},
{"lineNum":" 1836","line":"            RhsT temp(rhs_content);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1837","line":""},
{"lineNum":" 1838","line":"            // ...and upon success destroy lhs\'s content..."},
{"lineNum":" 1839","line":"            lhs_.destroy_content(); // nothrow","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1840","line":""},
{"lineNum":" 1841","line":"            // ...move the temporary copy into lhs\'s storage..."},
{"lineNum":" 1842","line":"            new(lhs_.storage_.address())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1843","line":"                RhsT( detail::variant::move(temp) ); // nothrow"},
{"lineNum":" 1844","line":""},
{"lineNum":" 1845","line":"            // ...and indicate new content type:"},
{"lineNum":" 1846","line":"            lhs_.indicate_which(rhs_which_); // nothrow","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1847","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1848","line":""},
{"lineNum":" 1849","line":"        void construct_fallback() const BOOST_NOEXCEPT {"},
{"lineNum":" 1850","line":"            // In case of failure, default-construct fallback type in lhs\'s storage..."},
{"lineNum":" 1851","line":"            new (lhs_.storage_.address())","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1852","line":"                fallback_type_; // nothrow"},
{"lineNum":" 1853","line":""},
{"lineNum":" 1854","line":"            // ...indicate construction of fallback type..."},
{"lineNum":" 1855","line":"            lhs_.indicate_which("},
{"lineNum":" 1856","line":"                  BOOST_MPL_AUX_VALUE_WKND(fallback_type_index_)::value"},
{"lineNum":" 1857","line":"                ); // nothrow"},
{"lineNum":" 1858","line":"        }"},
{"lineNum":" 1859","line":""},
{"lineNum":" 1860","line":"        template <typename RhsT>"},
{"lineNum":" 1861","line":"        void assign_impl("},
{"lineNum":" 1862","line":"              const RhsT& rhs_content"},
{"lineNum":" 1863","line":"            , mpl::false_ // has_nothrow_copy"},
{"lineNum":" 1864","line":"            , mpl::false_ // is_nothrow_move_constructible"},
{"lineNum":" 1865","line":"            , mpl::true_ // has_fallback_type"},
{"lineNum":" 1866","line":"            ) const"},
{"lineNum":" 1867","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1868","line":"            // Destroy lhs\'s content..."},
{"lineNum":" 1869","line":"            lhs_.destroy_content(); // nothrow","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1870","line":""},
{"lineNum":" 1871","line":"            BOOST_TRY"},
{"lineNum":" 1872","line":"            {"},
{"lineNum":" 1873","line":"                // ...and attempt to copy rhs\'s content into lhs\'s storage:"},
{"lineNum":" 1874","line":"                new(lhs_.storage_.address())","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1875","line":"                    RhsT( rhs_content );","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1876","line":"            }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1877","line":"            BOOST_CATCH (...)"},
{"lineNum":" 1878","line":"            {"},
{"lineNum":" 1879","line":"                construct_fallback();"},
{"lineNum":" 1880","line":""},
{"lineNum":" 1881","line":"                // ...and rethrow:"},
{"lineNum":" 1882","line":"                BOOST_RETHROW;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1883","line":"            }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1884","line":"            BOOST_CATCH_END"},
{"lineNum":" 1885","line":""},
{"lineNum":" 1886","line":"            // In the event of success, indicate new content type:"},
{"lineNum":" 1887","line":"            lhs_.indicate_which(rhs_which_); // nothrow","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1888","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1889","line":""},
{"lineNum":" 1890","line":"        template <typename RhsT>"},
{"lineNum":" 1891","line":"        void assign_impl("},
{"lineNum":" 1892","line":"              const RhsT& rhs_content"},
{"lineNum":" 1893","line":"            , mpl::false_ // has_nothrow_copy"},
{"lineNum":" 1894","line":"            , mpl::false_ // is_nothrow_move_constructible"},
{"lineNum":" 1895","line":"            , mpl::false_ // has_fallback_type"},
{"lineNum":" 1896","line":"            ) const"},
{"lineNum":" 1897","line":"        {"},
{"lineNum":" 1898","line":"            detail::variant::backup_assigner<wknd_self_t>"},
{"lineNum":" 1899","line":"                visitor(lhs_, rhs_which_, rhs_content);"},
{"lineNum":" 1900","line":"            lhs_.internal_apply_visitor(visitor);"},
{"lineNum":" 1901","line":"        }"},
{"lineNum":" 1902","line":""},
{"lineNum":" 1903","line":"    public: // internal visitor interfaces"},
{"lineNum":" 1904","line":""},
{"lineNum":" 1905","line":"        template <typename RhsT>"},
{"lineNum":" 1906","line":"        void internal_visit(const RhsT& rhs_content, int) const"},
{"lineNum":" 1907","line":"        {"},
{"lineNum":" 1908","line":"            typedef typename has_nothrow_copy<RhsT>::type"},
{"lineNum":" 1909","line":"                nothrow_copy;"},
{"lineNum":" 1910","line":"            typedef typename mpl::or_< // reduces compile-time"},
{"lineNum":" 1911","line":"                  nothrow_copy"},
{"lineNum":" 1912","line":"                , is_nothrow_move_constructible<RhsT>"},
{"lineNum":" 1913","line":"                >::type nothrow_move_constructor;"},
{"lineNum":" 1914","line":""},
{"lineNum":" 1915","line":"            assign_impl(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1916","line":"                  rhs_content"},
{"lineNum":" 1917","line":"                , nothrow_copy()"},
{"lineNum":" 1918","line":"                , nothrow_move_constructor()"},
{"lineNum":" 1919","line":"                , has_fallback_type_()"},
{"lineNum":" 1920","line":"                );"},
{"lineNum":" 1921","line":"        }"},
{"lineNum":" 1922","line":""},
{"lineNum":" 1923","line":"#if BOOST_WORKAROUND(BOOST_MSVC, BOOST_TESTED_AT(1600))"},
{"lineNum":" 1924","line":"    private:"},
{"lineNum":" 1925","line":"        // silence MSVC warning C4512: assignment operator could not be generated"},
{"lineNum":" 1926","line":"        assigner& operator= (assigner const&);"},
{"lineNum":" 1927","line":"#endif"},
{"lineNum":" 1928","line":"    };"},
{"lineNum":" 1929","line":""},
{"lineNum":" 1930","line":"    friend class assigner;"},
{"lineNum":" 1931","line":""},
{"lineNum":" 1932","line":"#ifndef BOOST_NO_CXX11_RVALUE_REFERENCES"},
{"lineNum":" 1933","line":"    // class move_assigner"},
{"lineNum":" 1934","line":"    //"},
{"lineNum":" 1935","line":"    // Internal visitor that \"move assigns\" the visited value to the given variant"},
{"lineNum":" 1936","line":"    // by appropriate destruction and move-construction."},
{"lineNum":" 1937","line":"    //"},
{"lineNum":" 1938","line":""},
{"lineNum":" 1939","line":"    class move_assigner"},
{"lineNum":" 1940","line":"        : public assigner"},
{"lineNum":" 1941","line":"    {"},
{"lineNum":" 1942","line":"    public: // structors"},
{"lineNum":" 1943","line":""},
{"lineNum":" 1944","line":"        move_assigner(variant& lhs, int rhs_which) BOOST_NOEXCEPT"},
{"lineNum":" 1945","line":"            : assigner(lhs, rhs_which)"},
{"lineNum":" 1946","line":"        {"},
{"lineNum":" 1947","line":"        }"},
{"lineNum":" 1948","line":""},
{"lineNum":" 1949","line":"    private: // helpers, for internal visitor interface (below)"},
{"lineNum":" 1950","line":""},
{"lineNum":" 1951","line":"        template <typename RhsT, typename B2>"},
{"lineNum":" 1952","line":"        void assign_impl("},
{"lineNum":" 1953","line":"              RhsT& rhs_content"},
{"lineNum":" 1954","line":"            , mpl::true_ // has_nothrow_copy"},
{"lineNum":" 1955","line":"            , mpl::false_ // is_nothrow_move_constructible"},
{"lineNum":" 1956","line":"            , B2 // has_fallback_type"},
{"lineNum":" 1957","line":"            ) const BOOST_NOEXCEPT"},
{"lineNum":" 1958","line":"        {"},
{"lineNum":" 1959","line":"            assigner::assign_impl(rhs_content, mpl::true_(), mpl::false_(), B2());"},
{"lineNum":" 1960","line":"        }"},
{"lineNum":" 1961","line":""},
{"lineNum":" 1962","line":"        template <typename RhsT, typename B, typename B2>"},
{"lineNum":" 1963","line":"        void assign_impl("},
{"lineNum":" 1964","line":"              RhsT& rhs_content"},
{"lineNum":" 1965","line":"            , B // has_nothrow_copy"},
{"lineNum":" 1966","line":"            , mpl::true_ // is_nothrow_move_constructible"},
{"lineNum":" 1967","line":"            , B2 // has_fallback_type"},
{"lineNum":" 1968","line":"            ) const BOOST_NOEXCEPT"},
{"lineNum":" 1969","line":"        {"},
{"lineNum":" 1970","line":"            // ...destroy lhs\'s content..."},
{"lineNum":" 1971","line":"            assigner::lhs_.destroy_content(); // nothrow","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1972","line":""},
{"lineNum":" 1973","line":"            // ...move the rhs_content into lhs\'s storage..."},
{"lineNum":" 1974","line":"            new(assigner::lhs_.storage_.address())","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1975","line":"                RhsT( detail::variant::move(rhs_content) ); // nothrow","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1976","line":""},
{"lineNum":" 1977","line":"            // ...and indicate new content type:"},
{"lineNum":" 1978","line":"            assigner::lhs_.indicate_which(assigner::rhs_which_); // nothrow"},
{"lineNum":" 1979","line":"        }"},
{"lineNum":" 1980","line":""},
{"lineNum":" 1981","line":"        template <typename RhsT>"},
{"lineNum":" 1982","line":"        void assign_impl("},
{"lineNum":" 1983","line":"              RhsT& rhs_content"},
{"lineNum":" 1984","line":"            , mpl::false_ // has_nothrow_copy"},
{"lineNum":" 1985","line":"            , mpl::false_ // is_nothrow_move_constructible"},
{"lineNum":" 1986","line":"            , mpl::true_ // has_fallback_type"},
{"lineNum":" 1987","line":"            ) const"},
{"lineNum":" 1988","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1989","line":"            // Destroy lhs\'s content..."},
{"lineNum":" 1990","line":"            assigner::lhs_.destroy_content(); // nothrow","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1991","line":""},
{"lineNum":" 1992","line":"            BOOST_TRY"},
{"lineNum":" 1993","line":"            {"},
{"lineNum":" 1994","line":"                // ...and attempt to copy rhs\'s content into lhs\'s storage:"},
{"lineNum":" 1995","line":"                new(assigner::lhs_.storage_.address())","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1996","line":"                    RhsT( detail::variant::move(rhs_content) );","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1997","line":"            }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1998","line":"            BOOST_CATCH (...)"},
{"lineNum":" 1999","line":"            {"},
{"lineNum":" 2000","line":"                assigner::construct_fallback();"},
{"lineNum":" 2001","line":""},
{"lineNum":" 2002","line":"                // ...and rethrow:"},
{"lineNum":" 2003","line":"                BOOST_RETHROW;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2004","line":"            }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2005","line":"            BOOST_CATCH_END"},
{"lineNum":" 2006","line":""},
{"lineNum":" 2007","line":"            // In the event of success, indicate new content type:"},
{"lineNum":" 2008","line":"            assigner::lhs_.indicate_which(assigner::rhs_which_); // nothrow","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2009","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2010","line":""},
{"lineNum":" 2011","line":"        template <typename RhsT>"},
{"lineNum":" 2012","line":"        void assign_impl("},
{"lineNum":" 2013","line":"              RhsT& rhs_content"},
{"lineNum":" 2014","line":"            , mpl::false_ // has_nothrow_copy"},
{"lineNum":" 2015","line":"            , mpl::false_ // is_nothrow_move_constructible"},
{"lineNum":" 2016","line":"            , mpl::false_ // has_fallback_type"},
{"lineNum":" 2017","line":"            ) const"},
{"lineNum":" 2018","line":"        {"},
{"lineNum":" 2019","line":"            assigner::assign_impl(rhs_content, mpl::false_(), mpl::false_(), mpl::false_());"},
{"lineNum":" 2020","line":"        }"},
{"lineNum":" 2021","line":""},
{"lineNum":" 2022","line":"    public: // internal visitor interfaces"},
{"lineNum":" 2023","line":""},
{"lineNum":" 2024","line":"        template <typename RhsT>"},
{"lineNum":" 2025","line":"        void internal_visit(RhsT& rhs_content, int) const"},
{"lineNum":" 2026","line":"        {"},
{"lineNum":" 2027","line":"            typedef typename is_nothrow_move_constructible<RhsT>::type"},
{"lineNum":" 2028","line":"                nothrow_move_constructor;"},
{"lineNum":" 2029","line":"            typedef typename mpl::or_< // reduces compile-time"},
{"lineNum":" 2030","line":"                  nothrow_move_constructor"},
{"lineNum":" 2031","line":"                , has_nothrow_copy<RhsT>"},
{"lineNum":" 2032","line":"                >::type nothrow_copy;"},
{"lineNum":" 2033","line":""},
{"lineNum":" 2034","line":"            assign_impl(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2035","line":"                  rhs_content"},
{"lineNum":" 2036","line":"                , nothrow_copy()"},
{"lineNum":" 2037","line":"                , nothrow_move_constructor()"},
{"lineNum":" 2038","line":"                , has_fallback_type_()"},
{"lineNum":" 2039","line":"                );"},
{"lineNum":" 2040","line":"        }"},
{"lineNum":" 2041","line":""},
{"lineNum":" 2042","line":"#if BOOST_WORKAROUND(BOOST_MSVC, BOOST_TESTED_AT(1600))"},
{"lineNum":" 2043","line":"    private:"},
{"lineNum":" 2044","line":"        // silence MSVC warning C4512: assignment operator could not be generated"},
{"lineNum":" 2045","line":"        move_assigner& operator= (move_assigner const&);"},
{"lineNum":" 2046","line":"#endif"},
{"lineNum":" 2047","line":"    };"},
{"lineNum":" 2048","line":""},
{"lineNum":" 2049","line":"    friend class move_assigner;"},
{"lineNum":" 2050","line":"#endif // BOOST_NO_CXX11_RVALUE_REFERENCES"},
{"lineNum":" 2051","line":""},
{"lineNum":" 2052","line":"    void variant_assign(const variant& rhs)"},
{"lineNum":" 2053","line":"    {"},
{"lineNum":" 2054","line":"        // If the contained types are EXACTLY the same..."},
{"lineNum":" 2055","line":"        if (which_ == rhs.which_)","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":" 2056","line":"        {"},
{"lineNum":" 2057","line":"            // ...then assign rhs\'s storage to lhs\'s content:"},
{"lineNum":" 2058","line":"            detail::variant::assign_storage visitor(rhs.storage_.address());"},
{"lineNum":" 2059","line":"            this->internal_apply_visitor(visitor);"},
{"lineNum":" 2060","line":"        }"},
{"lineNum":" 2061","line":"        else"},
{"lineNum":" 2062","line":"        {"},
{"lineNum":" 2063","line":"            // Otherwise, perform general (copy-based) variant assignment:"},
{"lineNum":" 2064","line":"            assigner visitor(*this, rhs.which());"},
{"lineNum":" 2065","line":"            rhs.internal_apply_visitor(visitor);"},
{"lineNum":" 2066","line":"        }"},
{"lineNum":" 2067","line":"    }"},
{"lineNum":" 2068","line":""},
{"lineNum":" 2069","line":"#ifndef BOOST_NO_CXX11_RVALUE_REFERENCES"},
{"lineNum":" 2070","line":"    void variant_assign(variant&& rhs)"},
{"lineNum":" 2071","line":"    {"},
{"lineNum":" 2072","line":"        // If the contained types are EXACTLY the same..."},
{"lineNum":" 2073","line":"        if (which_ == rhs.which_)","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":" 2074","line":"        {"},
{"lineNum":" 2075","line":"            // ...then move rhs\'s storage to lhs\'s content:"},
{"lineNum":" 2076","line":"            detail::variant::move_storage visitor(rhs.storage_.address());"},
{"lineNum":" 2077","line":"            this->internal_apply_visitor(visitor);"},
{"lineNum":" 2078","line":"        }"},
{"lineNum":" 2079","line":"        else"},
{"lineNum":" 2080","line":"        {"},
{"lineNum":" 2081","line":"            // Otherwise, perform general (move-based) variant assignment:"},
{"lineNum":" 2082","line":"            move_assigner visitor(*this, rhs.which());"},
{"lineNum":" 2083","line":"            rhs.internal_apply_visitor(visitor);"},
{"lineNum":" 2084","line":"        }"},
{"lineNum":" 2085","line":"    }"},
{"lineNum":" 2086","line":"#endif // BOOST_NO_CXX11_RVALUE_REFERENCES"},
{"lineNum":" 2087","line":""},
{"lineNum":" 2088","line":"private: // helpers, for modifiers (below)"},
{"lineNum":" 2089","line":""},
{"lineNum":" 2090","line":"    template <typename T>"},
{"lineNum":" 2091","line":"    void assign(const T& rhs)"},
{"lineNum":" 2092","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2093","line":"        // If direct T-to-T assignment is not possible..."},
{"lineNum":" 2094","line":"        detail::variant::direct_assigner<T> direct_assign(rhs);"},
{"lineNum":" 2095","line":"        if (this->apply_visitor(direct_assign) == false)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2096","line":"        {"},
{"lineNum":" 2097","line":"            // ...then convert rhs to variant and assign:"},
{"lineNum":" 2098","line":"            //"},
{"lineNum":" 2099","line":"            // While potentially inefficient, the following construction of a"},
{"lineNum":" 2100","line":"            // variant allows T as any type convertible to one of the bounded"},
{"lineNum":" 2101","line":"            // types without excessive code redundancy."},
{"lineNum":" 2102","line":"            //"},
{"lineNum":" 2103","line":"            variant temp(rhs);"},
{"lineNum":" 2104","line":"            variant_assign( detail::variant::move(temp) );"},
{"lineNum":" 2105","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2106","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2107","line":""},
{"lineNum":" 2108","line":"#ifndef BOOST_NO_CXX11_RVALUE_REFERENCES"},
{"lineNum":" 2109","line":"    template <typename T>"},
{"lineNum":" 2110","line":"    void move_assign(T&& rhs)"},
{"lineNum":" 2111","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2112","line":"        // If direct T-to-T move assignment is not possible..."},
{"lineNum":" 2113","line":"        detail::variant::direct_mover<T> direct_move(rhs);"},
{"lineNum":" 2114","line":"        if (this->apply_visitor(direct_move) == false)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2115","line":"        {"},
{"lineNum":" 2116","line":"            // ...then convert rhs to variant and assign:"},
{"lineNum":" 2117","line":"            //"},
{"lineNum":" 2118","line":"            // While potentially inefficient, the following construction of a"},
{"lineNum":" 2119","line":"            // variant allows T as any type convertible to one of the bounded"},
{"lineNum":" 2120","line":"            // types without excessive code redundancy."},
{"lineNum":" 2121","line":"            //"},
{"lineNum":" 2122","line":"            variant temp( detail::variant::move(rhs) );"},
{"lineNum":" 2123","line":"            variant_assign( detail::variant::move(temp) );"},
{"lineNum":" 2124","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2125","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2126","line":"#endif // BOOST_NO_CXX11_RVALUE_REFERENCES"},
{"lineNum":" 2127","line":""},
{"lineNum":" 2128","line":"public: // modifiers"},
{"lineNum":" 2129","line":""},
{"lineNum":" 2130","line":"#ifndef BOOST_NO_CXX11_RVALUE_REFERENCES"},
{"lineNum":" 2131","line":"    template <class T>"},
{"lineNum":" 2132","line":"    typename boost::enable_if<"},
{"lineNum":" 2133","line":"        boost::mpl::and_<"},
{"lineNum":" 2134","line":"            boost::is_rvalue_reference<T&&>,"},
{"lineNum":" 2135","line":"            mpl::not_< boost::is_const<T> >,"},
{"lineNum":" 2136","line":"            boost::detail::variant::is_variant_constructible_from<T&&, internal_types>"},
{"lineNum":" 2137","line":"        >,"},
{"lineNum":" 2138","line":"        variant&"},
{"lineNum":" 2139","line":"    >::type operator=(T&& rhs)"},
{"lineNum":" 2140","line":"    {"},
{"lineNum":" 2141","line":"        move_assign( detail::variant::move(rhs) );","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2142","line":"        return *this;"},
{"lineNum":" 2143","line":"    }"},
{"lineNum":" 2144","line":"#endif // BOOST_NO_CXX11_RVALUE_REFERENCES"},
{"lineNum":" 2145","line":""},
{"lineNum":" 2146","line":"    template <typename T>"},
{"lineNum":" 2147","line":"    typename boost::enable_if<"},
{"lineNum":" 2148","line":"        mpl::or_<"},
{"lineNum":" 2149","line":"            boost::is_same<T, variant>,"},
{"lineNum":" 2150","line":"            boost::detail::variant::is_variant_constructible_from<const T&, internal_types>"},
{"lineNum":" 2151","line":"        >,"},
{"lineNum":" 2152","line":"        variant&"},
{"lineNum":" 2153","line":"    >::type operator=(const T& rhs)"},
{"lineNum":" 2154","line":"    {"},
{"lineNum":" 2155","line":"        assign(rhs);","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 2156","line":"        return *this;"},
{"lineNum":" 2157","line":"    }"},
{"lineNum":" 2158","line":""},
{"lineNum":" 2159","line":"    // [MSVC6 requires copy assign appear after templated operator=]"},
{"lineNum":" 2160","line":"    variant& operator=(const variant& rhs)"},
{"lineNum":" 2161","line":"    {"},
{"lineNum":" 2162","line":"        variant_assign(rhs);"},
{"lineNum":" 2163","line":"        return *this;"},
{"lineNum":" 2164","line":"    }"},
{"lineNum":" 2165","line":""},
{"lineNum":" 2166","line":"#ifndef BOOST_NO_CXX11_RVALUE_REFERENCES"},
{"lineNum":" 2167","line":"    variant& operator=(variant&& rhs)"},
{"lineNum":" 2168","line":"#if !defined(__GNUC__) || (__GNUC__ != 4) || (__GNUC_MINOR__ > 6) || defined(__clang__)"},
{"lineNum":" 2169","line":"        BOOST_NOEXCEPT_IF(variant_move_noexcept_constructible::type::value && variant_move_noexcept_assignable::type::value)"},
{"lineNum":" 2170","line":"#endif"},
{"lineNum":" 2171","line":"    {"},
{"lineNum":" 2172","line":"        variant_assign( detail::variant::move(rhs) );"},
{"lineNum":" 2173","line":"        return *this;"},
{"lineNum":" 2174","line":"    }"},
{"lineNum":" 2175","line":"#endif // BOOST_NO_CXX11_RVALUE_REFERENCES"},
{"lineNum":" 2176","line":""},
{"lineNum":" 2177","line":"    void swap(variant& rhs)"},
{"lineNum":" 2178","line":"    {"},
{"lineNum":" 2179","line":"        // If the contained types are the same..."},
{"lineNum":" 2180","line":"        if (which() == rhs.which())"},
{"lineNum":" 2181","line":"        {"},
{"lineNum":" 2182","line":"            // ...then swap the values directly:"},
{"lineNum":" 2183","line":"            detail::variant::swap_with<variant> visitor(rhs);"},
{"lineNum":" 2184","line":"            this->apply_visitor(visitor);"},
{"lineNum":" 2185","line":"        }"},
{"lineNum":" 2186","line":"        else"},
{"lineNum":" 2187","line":"        {"},
{"lineNum":" 2188","line":"            // ...otherwise, perform general variant swap:"},
{"lineNum":" 2189","line":"            variant tmp( detail::variant::move(rhs) );"},
{"lineNum":" 2190","line":"            rhs = detail::variant::move(*this);"},
{"lineNum":" 2191","line":"            *this = detail::variant::move(tmp);"},
{"lineNum":" 2192","line":"        }"},
{"lineNum":" 2193","line":"    }"},
{"lineNum":" 2194","line":""},
{"lineNum":" 2195","line":"public: // queries"},
{"lineNum":" 2196","line":""},
{"lineNum":" 2197","line":"    //"},
{"lineNum":" 2198","line":"    // NOTE: member which() defined above."},
{"lineNum":" 2199","line":"    //"},
{"lineNum":" 2200","line":""},
{"lineNum":" 2201","line":"    bool empty() const BOOST_NOEXCEPT"},
{"lineNum":" 2202","line":"    {"},
{"lineNum":" 2203","line":"        return false;"},
{"lineNum":" 2204","line":"    }"},
{"lineNum":" 2205","line":""},
{"lineNum":" 2206","line":"    const boost::typeindex::type_info& type() const"},
{"lineNum":" 2207","line":"    {"},
{"lineNum":" 2208","line":"        detail::variant::reflect visitor;"},
{"lineNum":" 2209","line":"        return this->apply_visitor(visitor);"},
{"lineNum":" 2210","line":"    }"},
{"lineNum":" 2211","line":""},
{"lineNum":" 2212","line":"public: // prevent comparison with foreign types"},
{"lineNum":" 2213","line":""},
{"lineNum":" 2214","line":"    template <typename U>"},
{"lineNum":" 2215","line":"    void operator==(const U&) const"},
{"lineNum":" 2216","line":"    {"},
{"lineNum":" 2217","line":"        BOOST_STATIC_ASSERT( false && sizeof(U) );"},
{"lineNum":" 2218","line":"    }"},
{"lineNum":" 2219","line":""},
{"lineNum":" 2220","line":"    template <typename U>"},
{"lineNum":" 2221","line":"    void operator<(const U&) const"},
{"lineNum":" 2222","line":"    {"},
{"lineNum":" 2223","line":"        BOOST_STATIC_ASSERT( false && sizeof(U) );"},
{"lineNum":" 2224","line":"    }"},
{"lineNum":" 2225","line":""},
{"lineNum":" 2226","line":"    template <typename U>"},
{"lineNum":" 2227","line":"    void operator!=(const U&) const"},
{"lineNum":" 2228","line":"    {"},
{"lineNum":" 2229","line":"        BOOST_STATIC_ASSERT( false && sizeof(U) );"},
{"lineNum":" 2230","line":"    }"},
{"lineNum":" 2231","line":""},
{"lineNum":" 2232","line":"    template <typename U>"},
{"lineNum":" 2233","line":"    void operator>(const U&) const"},
{"lineNum":" 2234","line":"    {"},
{"lineNum":" 2235","line":"        BOOST_STATIC_ASSERT( false && sizeof(U) );"},
{"lineNum":" 2236","line":"    }"},
{"lineNum":" 2237","line":""},
{"lineNum":" 2238","line":"    template <typename U>"},
{"lineNum":" 2239","line":"    void operator<=(const U&) const"},
{"lineNum":" 2240","line":"    {"},
{"lineNum":" 2241","line":"        BOOST_STATIC_ASSERT( false && sizeof(U) );"},
{"lineNum":" 2242","line":"    }"},
{"lineNum":" 2243","line":""},
{"lineNum":" 2244","line":"    template <typename U>"},
{"lineNum":" 2245","line":"    void operator>=(const U&) const"},
{"lineNum":" 2246","line":"    {"},
{"lineNum":" 2247","line":"        BOOST_STATIC_ASSERT( false && sizeof(U) );"},
{"lineNum":" 2248","line":"    }"},
{"lineNum":" 2249","line":""},
{"lineNum":" 2250","line":"public: // comparison operators"},
{"lineNum":" 2251","line":""},
{"lineNum":" 2252","line":"    // [MSVC6 requires these operators appear after template operators]"},
{"lineNum":" 2253","line":""},
{"lineNum":" 2254","line":"    bool operator==(const variant& rhs) const"},
{"lineNum":" 2255","line":"    {"},
{"lineNum":" 2256","line":"        if (this->which() != rhs.which())"},
{"lineNum":" 2257","line":"            return false;"},
{"lineNum":" 2258","line":""},
{"lineNum":" 2259","line":"        detail::variant::comparer<"},
{"lineNum":" 2260","line":"              variant, detail::variant::equal_comp"},
{"lineNum":" 2261","line":"            > visitor(*this);"},
{"lineNum":" 2262","line":"        return rhs.apply_visitor(visitor);"},
{"lineNum":" 2263","line":"    }"},
{"lineNum":" 2264","line":""},
{"lineNum":" 2265","line":"    bool operator<(const variant& rhs) const"},
{"lineNum":" 2266","line":"    {"},
{"lineNum":" 2267","line":"        //"},
{"lineNum":" 2268","line":"        // Dirk Schreib suggested this collating order."},
{"lineNum":" 2269","line":"        //"},
{"lineNum":" 2270","line":""},
{"lineNum":" 2271","line":"        if (this->which() != rhs.which())"},
{"lineNum":" 2272","line":"            return this->which() < rhs.which();"},
{"lineNum":" 2273","line":""},
{"lineNum":" 2274","line":"        detail::variant::comparer<"},
{"lineNum":" 2275","line":"              variant, detail::variant::less_comp"},
{"lineNum":" 2276","line":"            > visitor(*this);"},
{"lineNum":" 2277","line":"        return rhs.apply_visitor(visitor);"},
{"lineNum":" 2278","line":"    }"},
{"lineNum":" 2279","line":""},
{"lineNum":" 2280","line":"    ///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":" 2281","line":"    // comparison operators != > <= >="},
{"lineNum":" 2282","line":"    inline bool operator!=(const variant& rhs) const"},
{"lineNum":" 2283","line":"    {"},
{"lineNum":" 2284","line":"        return !(*this == rhs);"},
{"lineNum":" 2285","line":"    }"},
{"lineNum":" 2286","line":""},
{"lineNum":" 2287","line":"    inline bool operator>(const variant& rhs) const"},
{"lineNum":" 2288","line":"    {"},
{"lineNum":" 2289","line":"        return rhs < *this;"},
{"lineNum":" 2290","line":"    }"},
{"lineNum":" 2291","line":""},
{"lineNum":" 2292","line":"    inline bool operator<=(const variant& rhs) const"},
{"lineNum":" 2293","line":"    {"},
{"lineNum":" 2294","line":"        return !(*this > rhs);"},
{"lineNum":" 2295","line":"    }"},
{"lineNum":" 2296","line":""},
{"lineNum":" 2297","line":"    inline bool operator>=(const variant& rhs) const"},
{"lineNum":" 2298","line":"    {"},
{"lineNum":" 2299","line":"        return !(*this < rhs);"},
{"lineNum":" 2300","line":"    }"},
{"lineNum":" 2301","line":""},
{"lineNum":" 2302","line":"// helpers, for visitation support (below) -- private when possible"},
{"lineNum":" 2303","line":"#if !defined(BOOST_NO_MEMBER_TEMPLATE_FRIENDS)"},
{"lineNum":" 2304","line":""},
{"lineNum":" 2305","line":"    template < BOOST_VARIANT_ENUM_PARAMS(typename U) >"},
{"lineNum":" 2306","line":"    friend class variant;"},
{"lineNum":" 2307","line":""},
{"lineNum":" 2308","line":"private:"},
{"lineNum":" 2309","line":""},
{"lineNum":" 2310","line":"#else// defined(BOOST_NO_MEMBER_TEMPLATE_FRIENDS)"},
{"lineNum":" 2311","line":""},
{"lineNum":" 2312","line":"public:"},
{"lineNum":" 2313","line":""},
{"lineNum":" 2314","line":"#endif// !defined(BOOST_NO_MEMBER_TEMPLATE_FRIENDS)"},
{"lineNum":" 2315","line":""},
{"lineNum":" 2316","line":"    template <typename Visitor, typename VoidPtrCV>"},
{"lineNum":" 2317","line":"    static typename Visitor::result_type"},
{"lineNum":" 2318","line":"    internal_apply_visitor_impl("},
{"lineNum":" 2319","line":"          int internal_which"},
{"lineNum":" 2320","line":"        , int logical_which"},
{"lineNum":" 2321","line":"        , Visitor& visitor"},
{"lineNum":" 2322","line":"        , VoidPtrCV storage"},
{"lineNum":" 2323","line":"        )"},
{"lineNum":" 2324","line":"    {"},
{"lineNum":" 2325","line":"        typedef mpl::int_<0> first_which;"},
{"lineNum":" 2326","line":"        typedef typename mpl::begin<internal_types>::type first_it;"},
{"lineNum":" 2327","line":"        typedef typename mpl::end<internal_types>::type last_it;"},
{"lineNum":" 2328","line":""},
{"lineNum":" 2329","line":"        typedef detail::variant::visitation_impl_step<"},
{"lineNum":" 2330","line":"              first_it, last_it"},
{"lineNum":" 2331","line":"            > first_step;"},
{"lineNum":" 2332","line":""},
{"lineNum":" 2333","line":"        return detail::variant::visitation_impl(","class":"lineNoCov","hits":"0","possible_hits":"260",},
{"lineNum":" 2334","line":"              internal_which, logical_which"},
{"lineNum":" 2335","line":"            , visitor, storage, mpl::false_()"},
{"lineNum":" 2336","line":"            , never_uses_backup_flag()"},
{"lineNum":" 2337","line":"            , static_cast<first_which*>(0), static_cast<first_step*>(0)"},
{"lineNum":" 2338","line":"            );"},
{"lineNum":" 2339","line":"    }"},
{"lineNum":" 2340","line":""},
{"lineNum":" 2341","line":"    template <typename Visitor>"},
{"lineNum":" 2342","line":"    typename Visitor::result_type"},
{"lineNum":" 2343","line":"    internal_apply_visitor(Visitor& visitor)"},
{"lineNum":" 2344","line":"    {"},
{"lineNum":" 2345","line":"        return internal_apply_visitor_impl("},
{"lineNum":" 2346","line":"              which_, which(), visitor, storage_.address()","class":"lineNoCov","hits":"0","possible_hits":"144",},
{"lineNum":" 2347","line":"            );"},
{"lineNum":" 2348","line":"    }"},
{"lineNum":" 2349","line":""},
{"lineNum":" 2350","line":"    template <typename Visitor>"},
{"lineNum":" 2351","line":"    typename Visitor::result_type"},
{"lineNum":" 2352","line":"    internal_apply_visitor(Visitor& visitor) const"},
{"lineNum":" 2353","line":"    {"},
{"lineNum":" 2354","line":"        return internal_apply_visitor_impl("},
{"lineNum":" 2355","line":"              which_, which(), visitor, storage_.address()","class":"lineNoCov","hits":"0","possible_hits":"60",},
{"lineNum":" 2356","line":"            );"},
{"lineNum":" 2357","line":"    }"},
{"lineNum":" 2358","line":""},
{"lineNum":" 2359","line":"public: // visitation support"},
{"lineNum":" 2360","line":""},
{"lineNum":" 2361","line":"#ifndef BOOST_NO_CXX11_REF_QUALIFIERS"},
{"lineNum":" 2362","line":""},
{"lineNum":" 2363","line":"    template <typename Visitor>"},
{"lineNum":" 2364","line":"    typename Visitor::result_type"},
{"lineNum":" 2365","line":"    apply_visitor(Visitor& visitor) &&"},
{"lineNum":" 2366","line":"    {"},
{"lineNum":" 2367","line":"        detail::variant::invoke_visitor<Visitor, true> invoker(visitor);"},
{"lineNum":" 2368","line":"        return this->internal_apply_visitor(invoker);"},
{"lineNum":" 2369","line":"    }"},
{"lineNum":" 2370","line":""},
{"lineNum":" 2371","line":"    template <typename Visitor>"},
{"lineNum":" 2372","line":"    typename Visitor::result_type"},
{"lineNum":" 2373","line":"    apply_visitor(Visitor& visitor) const&&"},
{"lineNum":" 2374","line":"    {"},
{"lineNum":" 2375","line":"        detail::variant::invoke_visitor<Visitor, true> invoker(visitor);"},
{"lineNum":" 2376","line":"        return this->internal_apply_visitor(invoker);"},
{"lineNum":" 2377","line":"    }"},
{"lineNum":" 2378","line":""},
{"lineNum":" 2379","line":"#endif"},
{"lineNum":" 2380","line":""},
{"lineNum":" 2381","line":"    template <typename Visitor>"},
{"lineNum":" 2382","line":"    typename Visitor::result_type"},
{"lineNum":" 2383","line":"    apply_visitor(Visitor& visitor)"},
{"lineNum":" 2384","line":"#ifndef BOOST_NO_CXX11_REF_QUALIFIERS"},
{"lineNum":" 2385","line":"    &"},
{"lineNum":" 2386","line":"#endif"},
{"lineNum":" 2387","line":"    {"},
{"lineNum":" 2388","line":"        detail::variant::invoke_visitor<Visitor, false> invoker(visitor);"},
{"lineNum":" 2389","line":"        return this->internal_apply_visitor(invoker);"},
{"lineNum":" 2390","line":"    }"},
{"lineNum":" 2391","line":""},
{"lineNum":" 2392","line":"    template <typename Visitor>"},
{"lineNum":" 2393","line":"    typename Visitor::result_type"},
{"lineNum":" 2394","line":"    apply_visitor(Visitor& visitor) const"},
{"lineNum":" 2395","line":"#ifndef BOOST_NO_CXX11_REF_QUALIFIERS"},
{"lineNum":" 2396","line":"    &"},
{"lineNum":" 2397","line":"#endif"},
{"lineNum":" 2398","line":"    {"},
{"lineNum":" 2399","line":"        detail::variant::invoke_visitor<Visitor, false> invoker(visitor);"},
{"lineNum":" 2400","line":"        return this->internal_apply_visitor(invoker);"},
{"lineNum":" 2401","line":"    }"},
{"lineNum":" 2402","line":""},
{"lineNum":" 2403","line":"}; // class variant"},
{"lineNum":" 2404","line":""},
{"lineNum":" 2405","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":" 2406","line":"// metafunction make_variant_over"},
{"lineNum":" 2407","line":"//"},
{"lineNum":" 2408","line":"// See docs and boost/variant/variant_fwd.hpp for more information."},
{"lineNum":" 2409","line":"//"},
{"lineNum":" 2410","line":"template <typename Types>"},
{"lineNum":" 2411","line":"struct make_variant_over"},
{"lineNum":" 2412","line":"{"},
{"lineNum":" 2413","line":"private: // precondition assertions"},
{"lineNum":" 2414","line":""},
{"lineNum":" 2415","line":"    BOOST_STATIC_ASSERT(( ::boost::mpl::is_sequence<Types>::value ));"},
{"lineNum":" 2416","line":"    typedef typename boost::mpl::insert_range<"},
{"lineNum":" 2417","line":"      boost::mpl::list<>"},
{"lineNum":" 2418","line":"    , boost::mpl::end< boost::mpl::list<> >::type"},
{"lineNum":" 2419","line":"    , Types"},
{"lineNum":" 2420","line":"    >::type copied_sequence_t;"},
{"lineNum":" 2421","line":""},
{"lineNum":" 2422","line":"public: // metafunction result"},
{"lineNum":" 2423","line":""},
{"lineNum":" 2424","line":"    typedef variant<"},
{"lineNum":" 2425","line":"          detail::variant::over_sequence<copied_sequence_t>"},
{"lineNum":" 2426","line":"        > type;"},
{"lineNum":" 2427","line":""},
{"lineNum":" 2428","line":"};"},
{"lineNum":" 2429","line":""},
{"lineNum":" 2430","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":" 2431","line":"// function template swap"},
{"lineNum":" 2432","line":"//"},
{"lineNum":" 2433","line":"// Swaps two variants of the same type (i.e., identical specification)."},
{"lineNum":" 2434","line":"//"},
{"lineNum":" 2435","line":"template < BOOST_VARIANT_ENUM_PARAMS(typename T) >"},
{"lineNum":" 2436","line":"inline void swap("},
{"lineNum":" 2437","line":"      variant< BOOST_VARIANT_ENUM_PARAMS(T) >& lhs"},
{"lineNum":" 2438","line":"    , variant< BOOST_VARIANT_ENUM_PARAMS(T) >& rhs"},
{"lineNum":" 2439","line":"    )"},
{"lineNum":" 2440","line":"{"},
{"lineNum":" 2441","line":"    lhs.swap(rhs);"},
{"lineNum":" 2442","line":"}"},
{"lineNum":" 2443","line":""},
{"lineNum":" 2444","line":"} // namespace boost"},
{"lineNum":" 2445","line":""},
{"lineNum":" 2446","line":"// implementation additions"},
{"lineNum":" 2447","line":""},
{"lineNum":" 2448","line":"#if !defined(BOOST_NO_IOSTREAM)"},
{"lineNum":" 2449","line":"#include <boost/variant/detail/variant_io.hpp>"},
{"lineNum":" 2450","line":"#endif // BOOST_NO_IOSTREAM"},
{"lineNum":" 2451","line":""},
{"lineNum":" 2452","line":"#endif // BOOST_VARIANT_VARIANT_HPP"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 74, "covered" : 0,};
var merged_data = [];
