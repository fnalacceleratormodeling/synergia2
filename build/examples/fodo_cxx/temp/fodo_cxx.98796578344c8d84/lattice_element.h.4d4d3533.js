var data = {lines:[
{"lineNum":"    1","line":"#ifndef LATTICE_ELEMENT_H_"},
{"lineNum":"    2","line":"#define LATTICE_ELEMENT_H_"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#include <string>"},
{"lineNum":"    5","line":"#include <map>"},
{"lineNum":"    6","line":"#include <list>"},
{"lineNum":"    7","line":"#include <vector>"},
{"lineNum":"    8","line":"#include <array>"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#include \"synergia/utils/cereal.h\""},
{"lineNum":"   11","line":"#include \"synergia/utils/lsexpr.h\""},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"enum class element_format"},
{"lineNum":"   14","line":"{"},
{"lineNum":"   15","line":"    mad8,"},
{"lineNum":"   16","line":"    madx,"},
{"lineNum":"   17","line":"};"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"enum class element_type"},
{"lineNum":"   20","line":"{"},
{"lineNum":"   21","line":"    generic,"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"    drift,"},
{"lineNum":"   24","line":"    rbend,"},
{"lineNum":"   25","line":"    sbend,"},
{"lineNum":"   26","line":"    quadrupole,"},
{"lineNum":"   27","line":"    multipole,"},
{"lineNum":"   28","line":"    rfcavity,"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"    hkicker,"},
{"lineNum":"   31","line":"    vkicker,"},
{"lineNum":"   32","line":"    kicker,"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"    sextupole,"},
{"lineNum":"   35","line":"    octupole,"},
{"lineNum":"   36","line":"    monitor,"},
{"lineNum":"   37","line":"    hmonitor,"},
{"lineNum":"   38","line":"    vmonitor,"},
{"lineNum":"   39","line":"    marker,"},
{"lineNum":"   40","line":"    instrument,"},
{"lineNum":"   41","line":"    rcollimator,"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"    nllens,"},
{"lineNum":"   44","line":"    solenoid,"},
{"lineNum":"   45","line":"    elens,"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"    foil,"},
{"lineNum":"   48","line":"};"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"namespace element_type_name"},
{"lineNum":"   51","line":"{"},
{"lineNum":"   52","line":"    constexpr char const* generic    = \"generic\";"},
{"lineNum":"   53","line":"    constexpr char const* drift      = \"drift\";"},
{"lineNum":"   54","line":"    constexpr char const* rbend      = \"rbend\";"},
{"lineNum":"   55","line":"    constexpr char const* sbend      = \"sbend\";"},
{"lineNum":"   56","line":"    constexpr char const* quadrupole = \"quadrupole\";"},
{"lineNum":"   57","line":"    constexpr char const* multipole  = \"multipole\";"},
{"lineNum":"   58","line":"    constexpr char const* rfcavity   = \"rfcavity\";"},
{"lineNum":"   59","line":"    constexpr char const* hkicker    = \"hkicker\";"},
{"lineNum":"   60","line":"    constexpr char const* vkicker    = \"vkicker\";"},
{"lineNum":"   61","line":"    constexpr char const* kicker     = \"kicker\";"},
{"lineNum":"   62","line":"    constexpr char const* monitor    = \"monitor\";"},
{"lineNum":"   63","line":"    constexpr char const* hmonitor   = \"hmonitor\";"},
{"lineNum":"   64","line":"    constexpr char const* vmonitor   = \"vmonitor\";"},
{"lineNum":"   65","line":"    constexpr char const* sextupole  = \"sextupole\";"},
{"lineNum":"   66","line":"    constexpr char const* octupole   = \"octupole\";"},
{"lineNum":"   67","line":"    constexpr char const* marker     = \"marker\";"},
{"lineNum":"   68","line":"    constexpr char const* instrument = \"instrument\";"},
{"lineNum":"   69","line":"    constexpr char const* rcollimator= \"rcollimator\";"},
{"lineNum":"   70","line":"    constexpr char const* nllens     = \"nllens\";"},
{"lineNum":"   71","line":"    constexpr char const* solenoid   = \"solenoid\";"},
{"lineNum":"   72","line":"    constexpr char const* elens      = \"elens\";"},
{"lineNum":"   73","line":"    constexpr char const* foil       = \"foil\";"},
{"lineNum":"   74","line":"}"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"enum class marker_type"},
{"lineNum":"   77","line":"{"},
{"lineNum":"   78","line":"    h_tunes_corrector,"},
{"lineNum":"   79","line":"    v_tunes_corrector,"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"    h_chrom_corrector,"},
{"lineNum":"   82","line":"    v_chrom_corrector,"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"    end"},
{"lineNum":"   85","line":"};"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"// Lattice Functions"},
{"lineNum":"   88","line":"struct latt_func_t"},
{"lineNum":"   89","line":"{"},
{"lineNum":"   90","line":"    struct lf_val_t"},
{"lineNum":"   91","line":"    {"},
{"lineNum":"   92","line":"        double hor;"},
{"lineNum":"   93","line":"        double ver;"},
{"lineNum":"   94","line":"    };"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"    double arcLength;"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"    lf_val_t dispersion;"},
{"lineNum":"   99","line":"    lf_val_t dPrime;"},
{"lineNum":"  100","line":"    lf_val_t beta;"},
{"lineNum":"  101","line":"    lf_val_t alpha;"},
{"lineNum":"  102","line":"    lf_val_t psi;"},
{"lineNum":"  103","line":"};"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"// forward declaration"},
{"lineNum":"  106","line":"class Lattice;"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"/// The Lattice_element class contains the description of a single"},
{"lineNum":"  109","line":"/// lattice element. Each element has a name, a (string) type and"},
{"lineNum":"  110","line":"/// dictionaries of named double and string attributes."},
{"lineNum":"  111","line":"/// Lattice structure is described by a list of ancestors stored in"},
{"lineNum":"  112","line":"/// an element."},
{"lineNum":"  113","line":"class Lattice_element","class":"lineNoCov","hits":"0","possible_hits":"28",},
{"lineNum":"  114","line":"{"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"private:"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"    std::string  name;"},
{"lineNum":"  119","line":"    element_format  format;"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"    std::string  stype;"},
{"lineNum":"  122","line":"    element_type type;"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"    std::list<std::string > ancestors;"},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"    std::map<std::string, double> double_attributes;"},
{"lineNum":"  127","line":"    std::map<std::string, std::string> string_attributes;"},
{"lineNum":"  128","line":"    std::map<std::string, std::vector<double>> vector_attributes;"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"    std::string length_attribute_name;"},
{"lineNum":"  131","line":"    std::string bend_angle_attribute_name;"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"    long int revision;"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"    Lattice * lattice_ptr;"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"    // marked as mutable because this attribute is not a lattice"},
{"lineNum":"  138","line":"    // intrinsic attribute, but an attribute serves as the result of"},
{"lineNum":"  139","line":"    // bunch propagation through the lattice element (aperture"},
{"lineNum":"  140","line":"    // operation to be specific)."},
{"lineNum":"  141","line":"    // the constness of a lattice element is that the intrinsic"},
{"lineNum":"  142","line":"    // attributes of the element (e.g., the strength and length)"},
{"lineNum":"  143","line":"    // is unaffected by the bunch propagation"},
{"lineNum":"  144","line":"    mutable double deposited_charge = 0.0;"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"    // markers"},
{"lineNum":"  147","line":"    std::array<bool, (int)marker_type::end> markers;"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"public:"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"    // lattice functions"},
{"lineNum":"  152","line":"    latt_func_t lf;"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"public:"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"    // get all element type names"},
{"lineNum":"  157","line":"    static std::vector<std::string>"},
{"lineNum":"  158","line":"    get_all_type_names();"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"public:"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"    /// Construct a Lattice_element with an empty name and type."},
{"lineNum":"  163","line":"    /// for serialization only"},
{"lineNum":"  164","line":"    Lattice_element();"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"    /// Construct a Lattice_element."},
{"lineNum":"  167","line":"    /// @param name name"},
{"lineNum":"  168","line":"    /// @param type type"},
{"lineNum":"  169","line":"    Lattice_element("},
{"lineNum":"  170","line":"            std::string const & type,"},
{"lineNum":"  171","line":"            std::string const & name,"},
{"lineNum":"  172","line":"            element_format format = element_format::madx );"},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"    /// Construct a Lattice_element from the Lsexpr representation"},
{"lineNum":"  175","line":"    /// @param lsexpr representation"},
{"lineNum":"  176","line":"    explicit Lattice_element(Lsexpr const& lsexpr);"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"    /// Extract an Lsexpr representation of the Lattice_element"},
{"lineNum":"  179","line":"    Lsexpr"},
{"lineNum":"  180","line":"    as_lsexpr() const;"},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"    /// Get the type"},
{"lineNum":"  183","line":"    std::string const &"},
{"lineNum":"  184","line":"    get_type_name() const;"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"    element_type"},
{"lineNum":"  187","line":"    get_type() const;"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"    /// Get the name"},
{"lineNum":"  190","line":"    std::string const &"},
{"lineNum":"  191","line":"    get_name() const;"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"    /// Get the version info"},
{"lineNum":"  194","line":"    element_format"},
{"lineNum":"  195","line":"    get_format() const;"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"    /// Add an ancestor to the list of ancestors"},
{"lineNum":"  198","line":"    /// @param ancestor ancestor name"},
{"lineNum":"  199","line":"    void"},
{"lineNum":"  200","line":"    add_ancestor(std::string const& ancestor);"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"    /// Get the list of ancestors"},
{"lineNum":"  203","line":"    std::list<std::string > const&"},
{"lineNum":"  204","line":"    get_ancestors() const;"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"    /// Set the value of the named double attribute"},
{"lineNum":"  207","line":"    /// @param name attribute name"},
{"lineNum":"  208","line":"    /// @param value attribute value"},
{"lineNum":"  209","line":"    /// @param increment_revision can be set to false for attributes that do not affect dynamics"},
{"lineNum":"  210","line":"    void"},
{"lineNum":"  211","line":"    set_double_attribute("},
{"lineNum":"  212","line":"            std::string const & name,"},
{"lineNum":"  213","line":"            double value,"},
{"lineNum":"  214","line":"            bool increment_revision = true);"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"    void"},
{"lineNum":"  217","line":"    set_default_double_attribute("},
{"lineNum":"  218","line":"            std::string const & name,"},
{"lineNum":"  219","line":"            double value,"},
{"lineNum":"  220","line":"            bool increment_revision = true);"},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"    /// Check for the existence of the named double attribute"},
{"lineNum":"  223","line":"    /// @param name attribute name"},
{"lineNum":"  224","line":"    bool"},
{"lineNum":"  225","line":"    has_double_attribute(std::string const & name) const;"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"    /// Get the value of the named double attribute"},
{"lineNum":"  228","line":"    /// @param name attribute name"},
{"lineNum":"  229","line":"    double"},
{"lineNum":"  230","line":"    get_double_attribute(std::string const & name) const;"},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"    /// Get the value of the named double attribute"},
{"lineNum":"  233","line":"    /// @param name attribute name"},
{"lineNum":"  234","line":"    /// @param val default value if the specified attribute doesnt exist"},
{"lineNum":"  235","line":"    double"},
{"lineNum":"  236","line":"    get_double_attribute(std::string const & name, double val) const;"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"    /// Set the value of the named string attribute"},
{"lineNum":"  239","line":"    /// @param name attribute name"},
{"lineNum":"  240","line":"    /// @param value attribute value"},
{"lineNum":"  241","line":"    /// @param increment_revision can be set to false for attributes that do not affect dynamics"},
{"lineNum":"  242","line":"    void"},
{"lineNum":"  243","line":"    set_string_attribute("},
{"lineNum":"  244","line":"            std::string const & name,"},
{"lineNum":"  245","line":"            std::string const & value,"},
{"lineNum":"  246","line":"            bool increment_revision = true);"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"    void"},
{"lineNum":"  249","line":"    set_default_string_attribute("},
{"lineNum":"  250","line":"            std::string const & name,"},
{"lineNum":"  251","line":"            std::string const & value,"},
{"lineNum":"  252","line":"            bool incremnt_revision = true);"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"    /// Check for the existence of the named string attribute"},
{"lineNum":"  255","line":"    /// @param name attribute name"},
{"lineNum":"  256","line":"    bool"},
{"lineNum":"  257","line":"    has_string_attribute(std::string const & name) const;"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"    /// Get the value of the named string attribute"},
{"lineNum":"  260","line":"    /// @param name attribute name"},
{"lineNum":"  261","line":"    std::string const&"},
{"lineNum":"  262","line":"    get_string_attribute(std::string const & name) const;"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"    /// Get the value of the named string attribute"},
{"lineNum":"  265","line":"    /// @param name attribute name"},
{"lineNum":"  266","line":"    /// @param val default value if the specified attribute doesnt exist"},
{"lineNum":"  267","line":"    std::string const&"},
{"lineNum":"  268","line":"    get_string_attribute(std::string const & name, std::string const & val) const;"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"    /// Set the value of the named vector attribute"},
{"lineNum":"  271","line":"    /// @param name attribute name"},
{"lineNum":"  272","line":"    /// @param value attribute value"},
{"lineNum":"  273","line":"    /// @param increment_revision can be set to false for attributes that do not affect dynamics"},
{"lineNum":"  274","line":"    void"},
{"lineNum":"  275","line":"    set_vector_attribute("},
{"lineNum":"  276","line":"            std::string const & name,"},
{"lineNum":"  277","line":"            std::vector<double> const & value,"},
{"lineNum":"  278","line":"            bool increment_revision = true);"},
{"lineNum":"  279","line":""},
{"lineNum":"  280","line":"    /// Check for the existence of the named vector attribute"},
{"lineNum":"  281","line":"    /// @param name attribute name"},
{"lineNum":"  282","line":"    bool"},
{"lineNum":"  283","line":"    has_vector_attribute(std::string const & name) const;"},
{"lineNum":"  284","line":""},
{"lineNum":"  285","line":"    /// Get the value of the named vector attribute"},
{"lineNum":"  286","line":"    /// @param name attribute name"},
{"lineNum":"  287","line":"    std::vector<double> const &"},
{"lineNum":"  288","line":"    get_vector_attribute(std::string const & name) const;"},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"    /// Get the value of the named vector attribute"},
{"lineNum":"  291","line":"    /// @param name attribute name"},
{"lineNum":"  292","line":"    /// @param val default value if the specified attribute doesnt exist"},
{"lineNum":"  293","line":"    std::vector<double> const &"},
{"lineNum":"  294","line":"    get_vector_attribute(std::string const & name, std::vector<double> const & val) const;"},
{"lineNum":"  295","line":""},
{"lineNum":"  296","line":"    /// Set the attribute name to be used to determine the length"},
{"lineNum":"  297","line":"    /// of the Lattice_element"},
{"lineNum":"  298","line":"    /// @param attribute_name attribute name"},
{"lineNum":"  299","line":"    void"},
{"lineNum":"  300","line":"    set_length_attribute_name(std::string const & attribute_name);"},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":"    /// Set the attribute name to be used to determine the bend_angle"},
{"lineNum":"  303","line":"    /// of the Lattice_element"},
{"lineNum":"  304","line":"    /// @param attribute_name attribute name"},
{"lineNum":"  305","line":"    void"},
{"lineNum":"  306","line":"    set_bend_angle_attribute_name(std::string const & attribute_name);"},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"    /// Get the Lattice_element\'s length"},
{"lineNum":"  309","line":"    double"},
{"lineNum":"  310","line":"    get_length() const;"},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":"    /// Get the Lattice_element\'s bend angle"},
{"lineNum":"  313","line":"    double"},
{"lineNum":"  314","line":"    get_bend_angle() const;"},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":""},
{"lineNum":"  317","line":"    /// (re)set a marker for the element. examples of supported"},
{"lineNum":"  318","line":"    /// markers are,"},
{"lineNum":"  319","line":"    ///   horizontal/vertical tunes corrector,"},
{"lineNum":"  320","line":"    ///   horizontal/vertical chromaticity crrector"},
{"lineNum":"  321","line":"    void set_marker(marker_type t);"},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"    void reset_marker(marker_type t)"},
{"lineNum":"  324","line":"    { markers[(int)t] = false; }"},
{"lineNum":"  325","line":""},
{"lineNum":"  326","line":"    void reset_markers()"},
{"lineNum":"  327","line":"    { for(auto& m : markers) m = false; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"    bool has_marker(marker_type t) const"},
{"lineNum":"  330","line":"    { return markers[(int)t]; }","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"    /// deposited charge"},
{"lineNum":"  333","line":"    double get_deposited_charge(int bunch=0, int train=0) const"},
{"lineNum":"  334","line":"    { return deposited_charge; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  335","line":""},
{"lineNum":"  336","line":"    void"},
{"lineNum":"  337","line":"    set_deposited_charge(double charge, int bunch=0, int train=0) const"},
{"lineNum":"  338","line":"    { deposited_charge = charge; }"},
{"lineNum":"  339","line":""},
{"lineNum":"  340","line":"    void"},
{"lineNum":"  341","line":"    deposit_charge(double charge, int bunch=0, int train=0) const"},
{"lineNum":"  342","line":"    { deposited_charge += charge; }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  343","line":""},
{"lineNum":"  344","line":"    /// Get the Lattice_element\'s revision number"},
{"lineNum":"  345","line":"    long int"},
{"lineNum":"  346","line":"    get_revision() const;"},
{"lineNum":"  347","line":""},
{"lineNum":"  348","line":"    /// Check whether the element has a reference to a parent lattice"},
{"lineNum":"  349","line":"    bool"},
{"lineNum":"  350","line":"    has_lattice() const;"},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"    /// Set the reference to the parent lattice"},
{"lineNum":"  353","line":"    void"},
{"lineNum":"  354","line":"    set_lattice(Lattice & lattice);"},
{"lineNum":"  355","line":""},
{"lineNum":"  356","line":"    /// Get a reference to the parent lattice"},
{"lineNum":"  357","line":"    Lattice const &"},
{"lineNum":"  358","line":"    get_lattice() const;"},
{"lineNum":"  359","line":""},
{"lineNum":"  360","line":"    /// Return a human-readable description of the Lattice_element"},
{"lineNum":"  361","line":"    std::string"},
{"lineNum":"  362","line":"    as_string() const;"},
{"lineNum":"  363","line":""},
{"lineNum":"  364","line":"    /// Return a madx string"},
{"lineNum":"  365","line":"    std::string"},
{"lineNum":"  366","line":"    as_madx() const;"},
{"lineNum":"  367","line":""},
{"lineNum":"  368","line":"    /// Print a human-readable description of the Lattice_element"},
{"lineNum":"  369","line":"    /// The Python version of the function is named \"print_\"."},
{"lineNum":"  370","line":"    void"},
{"lineNum":"  371","line":"    print() const;"},
{"lineNum":"  372","line":""},
{"lineNum":"  373","line":"    std::map<std::string, double> const&"},
{"lineNum":"  374","line":"    get_double_attributes() const"},
{"lineNum":"  375","line":"    { return double_attributes; }"},
{"lineNum":"  376","line":""},
{"lineNum":"  377","line":"    std::map<std::string, std::string> const&"},
{"lineNum":"  378","line":"    get_string_attributes() const"},
{"lineNum":"  379","line":"    { return string_attributes; }"},
{"lineNum":"  380","line":""},
{"lineNum":"  381","line":"private:"},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"    friend class Lattice;"},
{"lineNum":"  384","line":"    friend class cereal::access;"},
{"lineNum":"  385","line":""},
{"lineNum":"  386","line":"    template<class Archive>"},
{"lineNum":"  387","line":"    void serialize(Archive & ar)"},
{"lineNum":"  388","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  389","line":"        ar(CEREAL_NVP(name));"},
{"lineNum":"  390","line":"        ar(CEREAL_NVP(format));"},
{"lineNum":"  391","line":"        ar(CEREAL_NVP(stype));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  392","line":"        ar(CEREAL_NVP(type));"},
{"lineNum":"  393","line":"        ar(CEREAL_NVP(ancestors));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  394","line":"        ar(CEREAL_NVP(double_attributes));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  395","line":"        ar(CEREAL_NVP(string_attributes));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  396","line":"        ar(CEREAL_NVP(vector_attributes));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  397","line":"        ar(CEREAL_NVP(length_attribute_name));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  398","line":"        ar(CEREAL_NVP(bend_angle_attribute_name));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  399","line":"        ar(CEREAL_NVP(revision));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  400","line":"        ar(CEREAL_NVP(markers));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  401","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  402","line":"};"},
{"lineNum":"  403","line":""},
{"lineNum":"  404","line":""},
{"lineNum":"  405","line":"#endif /* LATTICE_ELEMENT_H_ */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 16, "covered" : 0,};
var merged_data = [];
