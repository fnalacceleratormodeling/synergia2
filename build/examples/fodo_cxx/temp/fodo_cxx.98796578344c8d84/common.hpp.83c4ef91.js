var data = {lines:[
{"lineNum":"    1","line":"/*! \\file common.hpp"},
{"lineNum":"    2","line":"    \\brief Support common types - always included automatically"},
{"lineNum":"    3","line":"    \\ingroup OtherTypes */"},
{"lineNum":"    4","line":"/*"},
{"lineNum":"    5","line":"  Copyright (c) 2014, Randolph Voorhies, Shane Grant"},
{"lineNum":"    6","line":"  All rights reserved."},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"  Redistribution and use in source and binary forms, with or without"},
{"lineNum":"    9","line":"  modification, are permitted provided that the following conditions are met:"},
{"lineNum":"   10","line":"      * Redistributions of source code must retain the above copyright"},
{"lineNum":"   11","line":"        notice, this list of conditions and the following disclaimer."},
{"lineNum":"   12","line":"      * Redistributions in binary form must reproduce the above copyright"},
{"lineNum":"   13","line":"        notice, this list of conditions and the following disclaimer in the"},
{"lineNum":"   14","line":"        documentation and/or other materials provided with the distribution."},
{"lineNum":"   15","line":"      * Neither the name of cereal nor the"},
{"lineNum":"   16","line":"        names of its contributors may be used to endorse or promote products"},
{"lineNum":"   17","line":"        derived from this software without specific prior written permission."},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND"},
{"lineNum":"   20","line":"  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED"},
{"lineNum":"   21","line":"  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE"},
{"lineNum":"   22","line":"  DISCLAIMED. IN NO EVENT SHALL RANDOLPH VOORHIES OR SHANE GRANT BE LIABLE FOR ANY"},
{"lineNum":"   23","line":"  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES"},
{"lineNum":"   24","line":"  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;"},
{"lineNum":"   25","line":"  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"},
{"lineNum":"   26","line":"  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT"},
{"lineNum":"   27","line":"  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"},
{"lineNum":"   28","line":"  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   29","line":"*/"},
{"lineNum":"   30","line":"#ifndef CEREAL_TYPES_COMMON_HPP_"},
{"lineNum":"   31","line":"#define CEREAL_TYPES_COMMON_HPP_"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"#include \"cereal/cereal.hpp\""},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"namespace cereal"},
{"lineNum":"   36","line":"{"},
{"lineNum":"   37","line":"  namespace common_detail"},
{"lineNum":"   38","line":"  {"},
{"lineNum":"   39","line":"    //! Serialization for arrays if BinaryData is supported and we are arithmetic"},
{"lineNum":"   40","line":"    /*! @internal */"},
{"lineNum":"   41","line":"    template <class Archive, class T> inline"},
{"lineNum":"   42","line":"    void serializeArray( Archive & ar, T & array, std::true_type /* binary_supported */ )"},
{"lineNum":"   43","line":"    {"},
{"lineNum":"   44","line":"      ar( binary_data( array, sizeof(array) ) );"},
{"lineNum":"   45","line":"    }"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"    //! Serialization for arrays if BinaryData is not supported or we are not arithmetic"},
{"lineNum":"   48","line":"    /*! @internal */"},
{"lineNum":"   49","line":"    template <class Archive, class T> inline"},
{"lineNum":"   50","line":"    void serializeArray( Archive & ar, T & array, std::false_type /* binary_supported */ )"},
{"lineNum":"   51","line":"    {"},
{"lineNum":"   52","line":"      for( auto & i : array )"},
{"lineNum":"   53","line":"        ar( i );"},
{"lineNum":"   54","line":"    }"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"    namespace"},
{"lineNum":"   57","line":"    {"},
{"lineNum":"   58","line":"      //! Gets the underlying type of an enum"},
{"lineNum":"   59","line":"      /*! @internal */"},
{"lineNum":"   60","line":"      template <class T, bool IsEnum>"},
{"lineNum":"   61","line":"      struct enum_underlying_type : std::false_type {};"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"      //! Gets the underlying type of an enum"},
{"lineNum":"   64","line":"      /*! Specialization for when we actually have an enum"},
{"lineNum":"   65","line":"          @internal */"},
{"lineNum":"   66","line":"      template <class T>"},
{"lineNum":"   67","line":"      struct enum_underlying_type<T, true> { using type = typename std::underlying_type<T>::type; };"},
{"lineNum":"   68","line":"    } // anon namespace"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"    //! Checks if a type is an enum"},
{"lineNum":"   71","line":"    /*! This is needed over simply calling std::is_enum because the type"},
{"lineNum":"   72","line":"        traits checking at compile time will attempt to call something like"},
{"lineNum":"   73","line":"        load_minimal with a special NoConvertRef struct that wraps up the true type."},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"        This will strip away any of that and also expose the true underlying type."},
{"lineNum":"   76","line":"        @internal */"},
{"lineNum":"   77","line":"    template <class T>"},
{"lineNum":"   78","line":"    class is_enum"},
{"lineNum":"   79","line":"    {"},
{"lineNum":"   80","line":"      private:"},
{"lineNum":"   81","line":"        using DecayedT  = typename std::decay<T>::type;"},
{"lineNum":"   82","line":"        using StrippedT = typename ::cereal::traits::strip_minimal<DecayedT>::type;"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"      public:"},
{"lineNum":"   85","line":"        static const bool value = std::is_enum<StrippedT>::value;"},
{"lineNum":"   86","line":"        using type = StrippedT;"},
{"lineNum":"   87","line":"        using base_type = typename enum_underlying_type<StrippedT, value>::type;"},
{"lineNum":"   88","line":"    };"},
{"lineNum":"   89","line":"  }"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"  //! Saving for enum types"},
{"lineNum":"   92","line":"  template <class Archive, class T> inline"},
{"lineNum":"   93","line":"  typename std::enable_if<common_detail::is_enum<T>::value,"},
{"lineNum":"   94","line":"                          typename common_detail::is_enum<T>::base_type>::type"},
{"lineNum":"   95","line":"  CEREAL_SAVE_MINIMAL_FUNCTION_NAME( Archive const &, T const & t )"},
{"lineNum":"   96","line":"  {"},
{"lineNum":"   97","line":"    return static_cast<typename common_detail::is_enum<T>::base_type>(t);","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"   98","line":"  }"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"  //! Loading for enum types"},
{"lineNum":"  101","line":"  template <class Archive, class T> inline"},
{"lineNum":"  102","line":"  typename std::enable_if<common_detail::is_enum<T>::value, void>::type"},
{"lineNum":"  103","line":"  CEREAL_LOAD_MINIMAL_FUNCTION_NAME( Archive const &, T && t,"},
{"lineNum":"  104","line":"                                     typename common_detail::is_enum<T>::base_type const & value )"},
{"lineNum":"  105","line":"  {"},
{"lineNum":"  106","line":"    t = reinterpret_cast<typename common_detail::is_enum<T>::type const &>( value );","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  107","line":"  }"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"  //! Serialization for raw pointers"},
{"lineNum":"  110","line":"  /*! This exists only to throw a static_assert to let users know we don\'t support raw pointers. */"},
{"lineNum":"  111","line":"  template <class Archive, class T> inline"},
{"lineNum":"  112","line":"  void CEREAL_SERIALIZE_FUNCTION_NAME( Archive &, T * & )"},
{"lineNum":"  113","line":"  {"},
{"lineNum":"  114","line":"    static_assert(cereal::traits::detail::delay_static_assert<T>::value,"},
{"lineNum":"  115","line":"      \"Cereal does not support serializing raw pointers - please use a smart pointer\");"},
{"lineNum":"  116","line":"  }"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"  //! Serialization for C style arrays"},
{"lineNum":"  119","line":"  template <class Archive, class T> inline"},
{"lineNum":"  120","line":"  typename std::enable_if<std::is_array<T>::value, void>::type"},
{"lineNum":"  121","line":"  CEREAL_SERIALIZE_FUNCTION_NAME(Archive & ar, T & array)"},
{"lineNum":"  122","line":"  {"},
{"lineNum":"  123","line":"    common_detail::serializeArray( ar, array,"},
{"lineNum":"  124","line":"        std::integral_constant<bool, traits::is_output_serializable<BinaryData<T>, Archive>::value &&"},
{"lineNum":"  125","line":"                                     std::is_arithmetic<typename std::remove_all_extents<T>::type>::value>() );"},
{"lineNum":"  126","line":"  }"},
{"lineNum":"  127","line":"} // namespace cereal"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"#endif // CEREAL_TYPES_COMMON_HPP_"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 2, "covered" : 0,};
var merged_data = [];
