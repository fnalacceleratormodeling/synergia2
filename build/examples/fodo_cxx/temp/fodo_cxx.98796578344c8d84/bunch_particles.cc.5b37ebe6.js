var data = {lines:[
{"lineNum":"    1","line":""},
{"lineNum":"    2","line":"#include <iomanip>"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#include \"synergia/bunch/bunch_particles.h\""},
{"lineNum":"    5","line":"#include \"synergia/utils/parallel_utils.h\""},
{"lineNum":"    6","line":"#include \"synergia/utils/hdf5_file.h\""},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"// static init"},
{"lineNum":"    9","line":"namespace bunch_particles_impl"},
{"lineNum":"   10","line":"{ int pid_offset::offset = 0; }"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"namespace"},
{"lineNum":"   13","line":"{"},
{"lineNum":"   14","line":"    // Kokkos functors"},
{"lineNum":"   15","line":"    struct particle_copier_many","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   16","line":"    {"},
{"lineNum":"   17","line":"        ConstParticles src;"},
{"lineNum":"   18","line":"        karray2d_row_dev dst;"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"        ConstParticleMasks s_masks;"},
{"lineNum":"   21","line":"        ParticleMasks      d_masks;"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"        int idx;"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   26","line":"        void operator() (const int i) const"},
{"lineNum":"   27","line":"        {"},
{"lineNum":"   28","line":"            dst(i, 0) = src(idx+i, 0);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   29","line":"            dst(i, 1) = src(idx+i, 1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   30","line":"            dst(i, 2) = src(idx+i, 2);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   31","line":"            dst(i, 3) = src(idx+i, 3);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   32","line":"            dst(i, 4) = src(idx+i, 4);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   33","line":"            dst(i, 5) = src(idx+i, 5);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   34","line":"            dst(i, 6) = src(idx+i, 6);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"            d_masks(i) = s_masks(idx+i);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   37","line":"        }"},
{"lineNum":"   38","line":"    };"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"    struct particle_copier_one","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   41","line":"    {"},
{"lineNum":"   42","line":"        ConstParticles src;"},
{"lineNum":"   43","line":"        karray1d_row_dev dst;"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"        ConstParticleMasks s_masks;"},
{"lineNum":"   46","line":"        ParticleMasks d_masks;"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"        int idx;"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   51","line":"        void operator() (const int i) const"},
{"lineNum":"   52","line":"        {"},
{"lineNum":"   53","line":"            dst(0) = src(idx+i, 0);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   54","line":"            dst(1) = src(idx+i, 1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   55","line":"            dst(2) = src(idx+i, 2);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   56","line":"            dst(3) = src(idx+i, 3);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   57","line":"            dst(4) = src(idx+i, 4);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   58","line":"            dst(5) = src(idx+i, 5);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   59","line":"            dst(6) = src(idx+i, 6);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"            d_masks(0) = s_masks(idx+i);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   62","line":"        }"},
{"lineNum":"   63","line":"    };"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"    struct particle_id_checker","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   66","line":"    {"},
{"lineNum":"   67","line":"        ConstParticles parts;"},
{"lineNum":"   68","line":"        int idx;"},
{"lineNum":"   69","line":"        int pid;"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   72","line":"        void operator() (const int i, int& match) const"},
{"lineNum":"   73","line":"        { match = (((int)parts(idx, 6)) == pid); }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   74","line":"    };"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"    struct particle_finder","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   77","line":"    {"},
{"lineNum":"   78","line":"        ConstParticles parts;"},
{"lineNum":"   79","line":"        int pid;"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   82","line":"        void operator() (const int i, int& idx) const"},
{"lineNum":"   83","line":"        { if (((int)parts(i, 6)) == pid) idx = i; }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   84","line":"    };"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"    struct particle_zeroer"},
{"lineNum":"   87","line":"    {"},
{"lineNum":"   88","line":"        Particles parts;"},
{"lineNum":"   89","line":"        int offset;"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   92","line":"        void operator() (const int i) const"},
{"lineNum":"   93","line":"        { for (int j=0; j<7; ++j) parts(offset+i, j) = 0.0; }"},
{"lineNum":"   94","line":"    };"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"    struct mask_reducer","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   97","line":"    {"},
{"lineNum":"   98","line":"        ConstParticleMasks masks;"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  101","line":"        void operator() (const int i, int& valid) const"},
{"lineNum":"  102","line":"        { if(masks(i)) ++valid; }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  103","line":"    };"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"    struct particle_injector","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  106","line":"    {"},
{"lineNum":"  107","line":"        Particles dst;"},
{"lineNum":"  108","line":"        ParticleMasks dst_masks;"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"        ConstParticles src;"},
{"lineNum":"  111","line":"        ConstParticleMasks src_masks;"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"        karray1d_dev ref_st_diff;"},
{"lineNum":"  114","line":"        karray1d_dev tgt_st;"},
{"lineNum":"  115","line":"        karray1d_dev inj_st;"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"        int off;"},
{"lineNum":"  118","line":"        double pdiff;"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  121","line":"        void operator() (const int i) const"},
{"lineNum":"  122","line":"        {"},
{"lineNum":"  123","line":"            // space-like coordinates"},
{"lineNum":"  124","line":"            dst(off+i, 0) = src(i, 0);// + ref_st_diff(0);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  125","line":"            dst(off+i, 2) = src(i, 2);// + ref_st_diff(2);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  126","line":"            dst(off+i, 4) = src(i, 4);// + ref_st_diff(4);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"            // npx and npy coordinates are scaled with p_ref which can be different"},
{"lineNum":"  129","line":"            // for different bunches"},
{"lineNum":"  130","line":"            dst(off+i, 1) = pdiff * (src(i, 1) - inj_st(1)) + tgt_st(1);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  131","line":"            dst(off+i, 3) = pdiff * (src(i, 3) - inj_st(3)) + tgt_st(3);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"            // ndp coordinate is delta-p scaled with pref"},
{"lineNum":"  134","line":"            dst(off+i, 5) = pdiff * (1.0 + src(i, 5) - inj_st(5)) + tgt_st(5) - 1.0;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"            // particle id"},
{"lineNum":"  137","line":"            dst(off+i, 6) = src(i, 6);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"            dst_masks(off+i) = src_masks(i);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  140","line":"        }"},
{"lineNum":"  141","line":"    };"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"    struct fixed_z_to_t_converter","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  144","line":"    {"},
{"lineNum":"  145","line":"        Particles parts;"},
{"lineNum":"  146","line":"        ConstParticleMasks masks;"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"        double p_ref;"},
{"lineNum":"  149","line":"        double beta;"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  152","line":"        void operator() (const int i) const"},
{"lineNum":"  153","line":"        {"},
{"lineNum":"  154","line":"            if (masks(i))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  155","line":"            {"},
{"lineNum":"  156","line":"                double p = p_ref + parts(i, 5) * p_ref;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  157","line":"                double px = parts(i, 1) * p_ref;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  158","line":"                double py = parts(i, 3) * p_ref;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  159","line":"                double pz2 = p*p - px*px - py*py;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  160","line":"                double pz = sqrt(pz2);"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"                parts(i, 4) = - parts(i, 4) * beta;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  163","line":"                parts(i, 5) = pz / p_ref;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  164","line":"            }"},
{"lineNum":"  165","line":"        }"},
{"lineNum":"  166","line":"    };"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"    struct fixed_t_to_z_converter","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  169","line":"    {"},
{"lineNum":"  170","line":"        Particles parts;"},
{"lineNum":"  171","line":"        ConstParticleMasks masks;"},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"        double p_ref;"},
{"lineNum":"  174","line":"        double beta;"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  177","line":"        void operator() (const int i) const"},
{"lineNum":"  178","line":"        {"},
{"lineNum":"  179","line":"            if (masks(i))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  180","line":"            {"},
{"lineNum":"  181","line":"                double px = parts(i, 1) * p_ref;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  182","line":"                double py = parts(i, 3) * p_ref;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  183","line":"                double pz = parts(i, 5) * p_ref;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  184","line":"                double p = sqrt(px*px + py*py + pz*pz);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"                parts(i, 4) = - parts(i, 4) / beta;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  187","line":"                parts(i, 5) = (p-p_ref) / p_ref;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  188","line":"            }"},
{"lineNum":"  189","line":"        }"},
{"lineNum":"  190","line":"    };"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"    struct discarded_particle_mover","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  193","line":"    {"},
{"lineNum":"  194","line":"        Kokkos::View<int*> counter;"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"        ConstParticles   parts;"},
{"lineNum":"  197","line":"        ParticleMasks    discards;"},
{"lineNum":"  198","line":"        karray2d_row_dev discarded_parts;"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"        discarded_particle_mover("},
{"lineNum":"  201","line":"                ConstParticles   const& parts,"},
{"lineNum":"  202","line":"                ParticleMasks    const& discards,"},
{"lineNum":"  203","line":"                karray2d_row_dev const& discarded_parts )"},
{"lineNum":"  204","line":"            : counter(\"counter\", 1)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  205","line":"            , parts(parts)"},
{"lineNum":"  206","line":"            , discards(discards)"},
{"lineNum":"  207","line":"            , discarded_parts(discarded_parts)"},
{"lineNum":"  208","line":"        { }"},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  211","line":"        void operator() (const int i) const"},
{"lineNum":"  212","line":"        {"},
{"lineNum":"  213","line":"            if (discards(i))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  214","line":"            {"},
{"lineNum":"  215","line":"                int pos = Kokkos::atomic_fetch_add(counter.data(), 1);"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"                discarded_parts(pos, 0) = parts(i, 0);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  218","line":"                discarded_parts(pos, 1) = parts(i, 1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  219","line":"                discarded_parts(pos, 2) = parts(i, 2);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  220","line":"                discarded_parts(pos, 3) = parts(i, 3);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  221","line":"                discarded_parts(pos, 4) = parts(i, 4);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  222","line":"                discarded_parts(pos, 5) = parts(i, 5);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  223","line":"                discarded_parts(pos, 6) = parts(i, 6);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  224","line":"            }"},
{"lineNum":"  225","line":"        }"},
{"lineNum":"  226","line":"    };"},
{"lineNum":"  227","line":"}"},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"template<>"},
{"lineNum":"  231","line":"void bunch_particles_t<double>::reserve_local(int r)"},
{"lineNum":"  232","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  233","line":"    if (r <= n_reserved) return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"#ifdef NO_PADDING"},
{"lineNum":"  236","line":"    Kokkos::resize(parts, r);"},
{"lineNum":"  237","line":"#else"},
{"lineNum":"  238","line":"    Kokkos::resize(Kokkos::AllowPadding, parts, r);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  239","line":"#endif"},
{"lineNum":"  240","line":"    n_reserved = parts.stride(1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"    Kokkos::resize(masks, n_reserved);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  243","line":"    Kokkos::resize(discards, n_reserved);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"    hparts = Kokkos::create_mirror_view(parts);"},
{"lineNum":"  246","line":"    hmasks = Kokkos::create_mirror_view(masks);"},
{"lineNum":"  247","line":"    hdiscards = Kokkos::create_mirror_view(discards);"},
{"lineNum":"  248","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"template<>"},
{"lineNum":"  251","line":"void bunch_particles_t<double>::reserve(int n, Commxx const& comm)"},
{"lineNum":"  252","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  253","line":"    int r = decompose_1d_local(comm, n);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  254","line":"    reserve_local(r);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  255","line":"}"},
{"lineNum":"  256","line":""},
{"lineNum":"  257","line":"template<>"},
{"lineNum":"  258","line":"void bunch_particles_t<double>::assign_ids(int train_idx, int bunch_idx)"},
{"lineNum":"  259","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  260","line":"    // each bunch is assined a range in the global id space"},
{"lineNum":"  261","line":"    //"},
{"lineNum":"  262","line":"    // here we assume the max number of particles that a single"},
{"lineNum":"  263","line":"    // bunch can hold is 2^32."},
{"lineNum":"  264","line":"    // a bunch can have 2^2, or 4 groups of particles"},
{"lineNum":"  265","line":"    // a train can have 2^16, or 65536 bunches."},
{"lineNum":"  266","line":"    // a bunch simulator can have 2^2, or 4 trains"},
{"lineNum":"  267","line":"    //"},
{"lineNum":"  268","line":"    // so the overall bits the ids take is 32+2+16+2 = 52, less"},
{"lineNum":"  269","line":"    // than 53 which is the max integer number that can be"},
{"lineNum":"  270","line":"    // represented in double"},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"    int64_t base = 0;"},
{"lineNum":"  273","line":"    base |= (int64_t)train_idx << 50;"},
{"lineNum":"  274","line":"    base |= (int64_t)bunch_idx << 34;"},
{"lineNum":"  275","line":"    base |= (int64_t)group << 32;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"    // particle_id_assigner defined in header"},
{"lineNum":"  278","line":"    using namespace bunch_particles_impl;"},
{"lineNum":"  279","line":""},
{"lineNum":"  280","line":"    pid_assigner<parts_t> pia{parts, base+poffset};","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  281","line":"    Kokkos::parallel_for(n_active, pia);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  282","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"template<>"},
{"lineNum":"  285","line":"void bunch_particles_t<double>::inject("},
{"lineNum":"  286","line":"        bunch_particles_t const& o,"},
{"lineNum":"  287","line":"        karray1d_dev const& ref_st_diff,"},
{"lineNum":"  288","line":"        karray1d_dev const& tgt_st,"},
{"lineNum":"  289","line":"        karray1d_dev const& inj_st,"},
{"lineNum":"  290","line":"        double pdiff )"},
{"lineNum":"  291","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  292","line":"    // no nothing for empty inj bunch"},
{"lineNum":"  293","line":"    if (!o.n_active) return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":"    // expand the particle array"},
{"lineNum":"  296","line":"    reserve_local(n_active + o.n_active);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":"    // inject"},
{"lineNum":"  299","line":"    particle_injector pi{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  300","line":"        parts, masks,"},
{"lineNum":"  301","line":"        o.parts, o.masks,"},
{"lineNum":"  302","line":"        ref_st_diff, tgt_st, inj_st,"},
{"lineNum":"  303","line":"        n_active, pdiff","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  304","line":"    };"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"    Kokkos::parallel_for(o.n_active, pi);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"    // update number of particles"},
{"lineNum":"  309","line":"    n_active += o.n_active;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  310","line":"    n_valid += o.n_valid;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  311","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":"template<>"},
{"lineNum":"  314","line":"void"},
{"lineNum":"  315","line":"bunch_particles_t<double>::convert_to_fixed_t_lab(double p_ref, double beta)"},
{"lineNum":"  316","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  317","line":"    fixed_z_to_t_converter alg{parts, masks, p_ref, beta};","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  318","line":"    Kokkos::parallel_for(n_active, alg);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  319","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  320","line":""},
{"lineNum":"  321","line":"template<>"},
{"lineNum":"  322","line":"void"},
{"lineNum":"  323","line":"bunch_particles_t<double>::convert_to_fixed_z_lab(double p_ref, double beta)"},
{"lineNum":"  324","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  325","line":"    fixed_t_to_z_converter alg{parts, masks, p_ref, beta};","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  326","line":"    Kokkos::parallel_for(n_active, alg);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  327","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"template<>"},
{"lineNum":"  330","line":"std::pair<karray2d_row, HostParticleMasks>"},
{"lineNum":"  331","line":"bunch_particles_t<double>::get_particles_in_range(int idx, int n) const"},
{"lineNum":"  332","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  333","line":"    // index out of range"},
{"lineNum":"  334","line":"    if (idx == particle_index_null || idx < 0 || idx+n > n_active)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  335","line":"        throw std::runtime_error(\"Bunch::get_particle() index out of range\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  336","line":""},
{"lineNum":"  337","line":"    karray2d_row_dev p(\"sub_p\", n, 7);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  338","line":"    ParticleMasks pm(\"masks\", n);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  339","line":""},
{"lineNum":"  340","line":"    particle_copier_many pc{parts, p, masks, pm, idx};","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  341","line":"    Kokkos::parallel_for(n, pc);"},
{"lineNum":"  342","line":""},
{"lineNum":"  343","line":"    karray2d_row hp = create_mirror_view(p);"},
{"lineNum":"  344","line":"    Kokkos::deep_copy(hp, p);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  345","line":""},
{"lineNum":"  346","line":"    HostParticleMasks hpm = create_mirror_view(pm);"},
{"lineNum":"  347","line":"    Kokkos::deep_copy(hpm, pm);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"    return std::make_pair(hp, hpm);"},
{"lineNum":"  350","line":"}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"template<>"},
{"lineNum":"  353","line":"std::pair<karray1d_row, bool>"},
{"lineNum":"  354","line":"bunch_particles_t<double>::get_particle(int idx) const"},
{"lineNum":"  355","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  356","line":"    // index out of range"},
{"lineNum":"  357","line":"    if (idx == particle_index_null || idx < 0 || idx > n_active)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  358","line":"        throw std::runtime_error(\"Bunch::get_particle() index out of range\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  359","line":""},
{"lineNum":"  360","line":"    karray1d_row_dev p(\"particle\", 7);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  361","line":"    ParticleMasks pm(\"mask\", 1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"    particle_copier_one pc{parts, p, masks, pm, idx};","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  364","line":"    Kokkos::parallel_for(1, pc);"},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":"    karray1d_row hp = create_mirror_view(p);"},
{"lineNum":"  367","line":"    Kokkos::deep_copy(hp, p);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  368","line":""},
{"lineNum":"  369","line":"    HostParticleMasks hpm = create_mirror_view(pm);"},
{"lineNum":"  370","line":"    Kokkos::deep_copy(hpm, pm);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  371","line":""},
{"lineNum":"  372","line":"    return std::make_pair(hp, hpm(0));"},
{"lineNum":"  373","line":"}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  374","line":""},
{"lineNum":"  375","line":"template<>"},
{"lineNum":"  376","line":"int"},
{"lineNum":"  377","line":"bunch_particles_t<double>::search_particle(int pid, int last_idx) const"},
{"lineNum":"  378","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  379","line":"    if (last_idx != particle_index_null)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  380","line":"    {"},
{"lineNum":"  381","line":"        int match = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  382","line":"        particle_id_checker pic{parts, last_idx, pid};","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  383","line":"        Kokkos::parallel_reduce(1, pic, match);"},
{"lineNum":"  384","line":""},
{"lineNum":"  385","line":"        if (match) return last_idx;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  386","line":"    }"},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"    int idx = particle_index_null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  389","line":"    particle_finder pf{parts, pid};","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  390","line":"    Kokkos::parallel_reduce(n_active, pf, idx);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  391","line":""},
{"lineNum":"  392","line":"    return idx;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  393","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  394","line":""},
{"lineNum":"  395","line":"template<>"},
{"lineNum":"  396","line":"karray2d_row"},
{"lineNum":"  397","line":"bunch_particles_t<double>::get_particles_last_discarded() const"},
{"lineNum":"  398","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  399","line":"    karray2d_row_dev discarded(\"discarded\", n_last_discarded, 7);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  400","line":"    karray2d_row hdiscarded = Kokkos::create_mirror_view(discarded);"},
{"lineNum":"  401","line":""},
{"lineNum":"  402","line":"    discarded_particle_mover dpm(parts, discards, discarded);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  403","line":"    Kokkos::parallel_for(n_active, dpm);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  404","line":""},
{"lineNum":"  405","line":"    Kokkos::deep_copy(hdiscarded, discarded);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  406","line":"    return hdiscarded;"},
{"lineNum":"  407","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  408","line":""},
{"lineNum":"  409","line":""},
{"lineNum":"  410","line":"#if 0"},
{"lineNum":"  411","line":"void"},
{"lineNum":"  412","line":"bunch_particles_t::set_local_num(int n)"},
{"lineNum":"  413","line":"{"},
{"lineNum":"  414","line":"    num = n;"},
{"lineNum":"  415","line":""},
{"lineNum":"  416","line":"#if 0"},
{"lineNum":"  417","line":"    // make sure the new local_num is never less than 0"},
{"lineNum":"  418","line":"    if (n < 0) n = 0;"},
{"lineNum":"  419","line":""},
{"lineNum":"  420","line":"    // re-allocate depending on the new size"},
{"lineNum":"  421","line":"    if (n <= num_aligned)"},
{"lineNum":"  422","line":"    {"},
{"lineNum":"  423","line":"        // previous values"},
{"lineNum":"  424","line":"        // int prev_local_num = num;"},
{"lineNum":"  425","line":""},
{"lineNum":"  426","line":"        // no need to resize the array, only move the pointers"},
{"lineNum":"  427","line":"        num = n;"},
{"lineNum":"  428","line":""},
{"lineNum":"  429","line":"        // update num_aligned"},
{"lineNum":"  430","line":"        num_aligned = calculate_aligned_pos(num, alignment);"},
{"lineNum":"  431","line":""},
{"lineNum":"  432","line":"        // clear the particle data (from local_num to prev_local_num)"},
{"lineNum":"  433","line":"        // note this only happens when the new local_num is smaller than the old one"},
{"lineNum":"  434","line":"        // particle_zeroer pz { parts, num };"},
{"lineNum":"  435","line":"        // Kokkos::parallel_for(prev_num - num, pz);"},
{"lineNum":"  436","line":"    }"},
{"lineNum":"  437","line":"    else"},
{"lineNum":"  438","line":"    {"},
{"lineNum":"  439","line":"        // expand the local particle array, no additional lost particle slots"},
{"lineNum":"  440","line":"        expand_local_num(num, 0);"},
{"lineNum":"  441","line":"    }"},
{"lineNum":"  442","line":"#endif"},
{"lineNum":"  443","line":"}"},
{"lineNum":"  444","line":""},
{"lineNum":"  445","line":"void"},
{"lineNum":"  446","line":"bunch_particles_t::expand_local_num(int num, int added_lost)"},
{"lineNum":"  447","line":"{"},
{"lineNum":"  448","line":"#if 0"},
{"lineNum":"  449","line":"    // keep the previous values"},
{"lineNum":"  450","line":"    int prev_local_num = local_num;"},
{"lineNum":"  451","line":"    int prev_local_num_padded = local_num_padded;"},
{"lineNum":"  452","line":""},
{"lineNum":"  453","line":"    int local_num_lost = local_num_slots - local_num_padded;"},
{"lineNum":"  454","line":"    int total_num_lost = local_num_lost + added_lost;"},
{"lineNum":"  455","line":""},
{"lineNum":"  456","line":"    double * prev_storage = storage;"},
{"lineNum":"  457","line":"    MArray2d_ref * prev_local_particles = local_particles;"},
{"lineNum":"  458","line":""},
{"lineNum":"  459","line":"    // update the pointers"},
{"lineNum":"  460","line":"    local_num = num;"},
{"lineNum":"  461","line":"    local_num_aligned = calculate_aligned_pos(local_num);"},
{"lineNum":"  462","line":"    local_num_padded = local_num + calculate_padding_size(local_num + total_num_lost);"},
{"lineNum":"  463","line":"    local_num_slots = local_num_padded + total_num_lost;"},
{"lineNum":"  464","line":""},
{"lineNum":"  465","line":"    // allocate for new storage"},
{"lineNum":"  466","line":"    storage = (double*)boost::alignment::aligned_alloc(8 * sizeof(double), local_num_slots * 7 * sizeof(double));"},
{"lineNum":"  467","line":"    local_particles = new MArray2d_ref(storage, boost::extents[local_num_slots][7], boost::fortran_storage_order());"},
{"lineNum":"  468","line":""},
{"lineNum":"  469","line":"    // copy the particle data over"},
{"lineNum":"  470","line":"    for (int i = 0; i < prev_local_num; ++i)"},
{"lineNum":"  471","line":"    {"},
{"lineNum":"  472","line":"        for (int j=0; j<7; ++j)"},
{"lineNum":"  473","line":"        {"},
{"lineNum":"  474","line":"            (*local_particles)[i][j] = (*prev_local_particles)[i][j];"},
{"lineNum":"  475","line":"        }"},
{"lineNum":"  476","line":"    }"},
{"lineNum":"  477","line":""},
{"lineNum":"  478","line":"    // set the coordinates of extended and padding particles to 0"},
{"lineNum":"  479","line":"    // TODO: what should be the id for the extended particles"},
{"lineNum":"  480","line":"    for (int i = prev_local_num; i < local_num_padded; ++i)"},
{"lineNum":"  481","line":"    {"},
{"lineNum":"  482","line":"        for (int j=0; j<7; ++j)"},
{"lineNum":"  483","line":"        {"},
{"lineNum":"  484","line":"            (*local_particles)[i][j] = 0.0;"},
{"lineNum":"  485","line":"        }"},
{"lineNum":"  486","line":"    }"},
{"lineNum":"  487","line":""},
{"lineNum":"  488","line":"    // copy over lost particles"},
{"lineNum":"  489","line":"    for (int i=0; i<local_num_lost; ++i)"},
{"lineNum":"  490","line":"    {"},
{"lineNum":"  491","line":"        for (int j=0; j<7; ++j)"},
{"lineNum":"  492","line":"        {"},
{"lineNum":"  493","line":"            (*local_particles)[local_num_padded + i][j] ="},
{"lineNum":"  494","line":"                (*prev_local_particles)[prev_local_num_padded + i][j];"},
{"lineNum":"  495","line":"        }"},
{"lineNum":"  496","line":"    }"},
{"lineNum":"  497","line":""},
{"lineNum":"  498","line":"    // set additional lost particle data to 0"},
{"lineNum":"  499","line":"    for (int i = local_num_padded + local_num_lost; i < local_num_slots; ++i)"},
{"lineNum":"  500","line":"    {"},
{"lineNum":"  501","line":"        for (int j=0; j<7; ++j)"},
{"lineNum":"  502","line":"        {"},
{"lineNum":"  503","line":"            (*local_particles)[i][j] = 0.0;"},
{"lineNum":"  504","line":"        }"},
{"lineNum":"  505","line":"    }"},
{"lineNum":"  506","line":""},
{"lineNum":"  507","line":"    if (prev_storage) boost::alignment::aligned_free(prev_storage);"},
{"lineNum":"  508","line":"    if (prev_local_particles) delete prev_local_particles;"},
{"lineNum":"  509","line":"#endif"},
{"lineNum":"  510","line":"}"},
{"lineNum":"  511","line":"#endif"},
{"lineNum":"  512","line":""},
{"lineNum":"  513","line":"template<>"},
{"lineNum":"  514","line":"int"},
{"lineNum":"  515","line":"bunch_particles_t<double>::update_valid_num()"},
{"lineNum":"  516","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  517","line":"    int old_valid_num = n_valid;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  518","line":"    mask_reducer mr{masks};"},
{"lineNum":"  519","line":"    Kokkos::parallel_reduce(n_active, mr, n_valid);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  520","line":"    return old_valid_num;"},
{"lineNum":"  521","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  522","line":""},
{"lineNum":"  523","line":"template<>"},
{"lineNum":"  524","line":"int"},
{"lineNum":"  525","line":"bunch_particles_t<double>::update_total_num(Commxx const& comm)"},
{"lineNum":"  526","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  527","line":"    int old_total_num = n_total;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  528","line":"    MPI_Allreduce(&n_valid, &n_total, 1, MPI_INT, MPI_SUM, comm);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  529","line":"    return old_total_num;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  530","line":"}"},
{"lineNum":"  531","line":""},
{"lineNum":"  532","line":"template<>"},
{"lineNum":"  533","line":"void"},
{"lineNum":"  534","line":"bunch_particles_t<double>::check_pz2_positive()"},
{"lineNum":"  535","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  536","line":"    checkout_particles();"},
{"lineNum":"  537","line":""},
{"lineNum":"  538","line":"    for (int p = 0; p < n_active; ++p)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  539","line":"    {"},
{"lineNum":"  540","line":"        if (!hmasks(p)) continue;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  541","line":""},
{"lineNum":"  542","line":"        double pzop2 = (1. + hparts(p, 5)) * (1. + hparts(p, 5))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  543","line":"            - hparts(p, 1) * hparts(p, 1)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  544","line":"            - hparts(p, 3) * hparts(p, 3);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  545","line":""},
{"lineNum":"  546","line":"        if ( pzop2 < 0.0 )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  547","line":"        {"},
{"lineNum":"  548","line":"            std::cout << \"pzop^2 = \" << pzop2 << std::endl;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  549","line":"            throw std::runtime_error( \" check pz2:  pz square cannot be negative!\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  550","line":"        }"},
{"lineNum":"  551","line":"    }"},
{"lineNum":"  552","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  553","line":""},
{"lineNum":"  554","line":"template<>"},
{"lineNum":"  555","line":"void"},
{"lineNum":"  556","line":"bunch_particles_t<double>::read_file_legacy(Hdf5_file const& file, Commxx const& comm)"},
{"lineNum":"  557","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  558","line":"    auto dims = file.get_dims(\"particles\");"},
{"lineNum":"  559","line":"    if (dims.size() != 2 || dims[1] != 7)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  560","line":"    {"},
{"lineNum":"  561","line":"        throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  562","line":"                \"BunchParticle::read_file_legacy(): wrong data dimensions in file\");"},
{"lineNum":"  563","line":"    }"},
{"lineNum":"  564","line":""},
{"lineNum":"  565","line":"    int file_total = dims[0];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  566","line":"    int file_num = decompose_1d_local(comm, file_total);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  567","line":""},
{"lineNum":"  568","line":"    // size check"},
{"lineNum":"  569","line":"    if (n_active != file_num)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  570","line":"    {"},
{"lineNum":"  571","line":"        throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  572","line":"                \" local_num incompatibility when initializing the bunch\");"},
{"lineNum":"  573","line":"    }"},
{"lineNum":"  574","line":""},
{"lineNum":"  575","line":"    // read"},
{"lineNum":"  576","line":"    auto read_particles = file.read<karray2d_row>(\"particles\", n_active);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  577","line":""},
{"lineNum":"  578","line":"    // transpose: read_particles is row major, hparts is col major"},
{"lineNum":"  579","line":"    for (int part = 0; part < n_active; ++part)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  580","line":"        for (int i = 0; i < 7; ++i)"},
{"lineNum":"  581","line":"            hparts(part, i) = read_particles(part, i);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  582","line":""},
{"lineNum":"  583","line":"    // check in to device mem"},
{"lineNum":"  584","line":"    checkin_particles();"},
{"lineNum":"  585","line":""},
{"lineNum":"  586","line":"    // all particles in the legacy file are valid"},
{"lineNum":"  587","line":"    // do the init after checkin because masks_initializer is performed"},
{"lineNum":"  588","line":"    // on the device memory"},
{"lineNum":"  589","line":"    n_valid = n_active;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  590","line":""},
{"lineNum":"  591","line":"    // particle_masks_initializer defined in header"},
{"lineNum":"  592","line":"    using namespace bunch_particles_impl;"},
{"lineNum":"  593","line":""},
{"lineNum":"  594","line":"    particle_masks_initializer<masks_t> pmi{masks, n_valid};","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  595","line":"    Kokkos::parallel_for(n_reserved, pmi);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  596","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  597","line":""},
{"lineNum":"  598","line":"template<>"},
{"lineNum":"  599","line":"void"},
{"lineNum":"  600","line":"bunch_particles_t<double>::read_file(Hdf5_file const& file, Commxx const& comm)"},
{"lineNum":"  601","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  602","line":"    auto dims = file.get_dims(label);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  603","line":"    if (dims.size() != 2 || dims[1] != 7)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  604","line":"    {"},
{"lineNum":"  605","line":"        throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  606","line":"                \"BunchParticle::read_file(): wrong data dimensions in file\");"},
{"lineNum":"  607","line":"    }"},
{"lineNum":"  608","line":""},
{"lineNum":"  609","line":"    int file_total = dims[0];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  610","line":"    int file_num = decompose_1d_local(comm, file_total);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  611","line":""},
{"lineNum":"  612","line":"    // allocation if capacity is smaller"},
{"lineNum":"  613","line":"    if (n_reserved < file_num)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  614","line":"    {"},
{"lineNum":"  615","line":"#ifdef NO_PADDING"},
{"lineNum":"  616","line":"        auto alloc = Kokkos::view_alloc(label);"},
{"lineNum":"  617","line":"#else"},
{"lineNum":"  618","line":"        auto alloc = Kokkos::view_alloc(label, Kokkos::AllowPadding);"},
{"lineNum":"  619","line":"#endif"},
{"lineNum":"  620","line":"        parts = Particles(alloc, file_num);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  621","line":"        n_reserved = parts.stride(1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  622","line":""},
{"lineNum":"  623","line":"        masks = ParticleMasks(label+\"_masks\", n_reserved);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  624","line":"        discards = ParticleMasks(label+\"_discards\", n_reserved);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  625","line":""},
{"lineNum":"  626","line":"        hparts = Kokkos::create_mirror_view(parts);"},
{"lineNum":"  627","line":"        hmasks = Kokkos::create_mirror_view(masks);"},
{"lineNum":"  628","line":"        hdiscards = Kokkos::create_mirror_view(discards);"},
{"lineNum":"  629","line":"    }"},
{"lineNum":"  630","line":""},
{"lineNum":"  631","line":"    // reset the pointers"},
{"lineNum":"  632","line":"    n_valid  = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  633","line":"    n_total  = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  634","line":"    n_active = file_num;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  635","line":""},
{"lineNum":"  636","line":"    // read from file"},
{"lineNum":"  637","line":"    auto read_particles = file.read<karray2d_row>(label, file_num);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  638","line":"    auto read_masks = file.read<HostParticleMasks>(label+\"_masks\", file_num);"},
{"lineNum":"  639","line":""},
{"lineNum":"  640","line":"    // transpose: read_particles is row major, hparts is col major"},
{"lineNum":"  641","line":"    for (int part = 0; part < file_num; ++part)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  642","line":"    {"},
{"lineNum":"  643","line":"        for (int i = 0; i < 7; ++i)"},
{"lineNum":"  644","line":"            hparts(part, i) = read_particles(part, i);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  645","line":""},
{"lineNum":"  646","line":"        hmasks(part) = read_masks(part);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  647","line":"        if (hmasks(part)) ++n_valid;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  648","line":"    }"},
{"lineNum":"  649","line":""},
{"lineNum":"  650","line":"    // now we have the actual local num, update the total number"},
{"lineNum":"  651","line":"    update_total_num(comm);"},
{"lineNum":"  652","line":""},
{"lineNum":"  653","line":"    // check in to device mem"},
{"lineNum":"  654","line":"    checkin_particles();"},
{"lineNum":"  655","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  656","line":""},
{"lineNum":"  657","line":"template<>"},
{"lineNum":"  658","line":"void"},
{"lineNum":"  659","line":"bunch_particles_t<double>::write_file(Hdf5_file const& file,"},
{"lineNum":"  660","line":"        int num_part, int offset, Commxx const& comm) const"},
{"lineNum":"  661","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  662","line":"    int local_num_part = 0;"},
{"lineNum":"  663","line":"    int local_offset = 0;"},
{"lineNum":"  664","line":""},
{"lineNum":"  665","line":"    if (num_part == -1)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  666","line":"    {"},
{"lineNum":"  667","line":"        local_num_part = n_active;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  668","line":"        local_offset = 0;"},
{"lineNum":"  669","line":"    }"},
{"lineNum":"  670","line":"    else"},
{"lineNum":"  671","line":"    {"},
{"lineNum":"  672","line":"        local_num_part = decompose_1d_local(comm, num_part);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  673","line":"        local_offset = decompose_1d_local(comm, offset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  674","line":"    }"},
{"lineNum":"  675","line":""},
{"lineNum":"  676","line":"    if (local_num_part < 0 || local_offset < 0","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  677","line":"            || local_num_part + local_offset > n_active)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  678","line":"    {"},
{"lineNum":"  679","line":"        throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  680","line":"                \"invalid num_part or offset for bunch_particles_t::write_file()\");"},
{"lineNum":"  681","line":"    }"},
{"lineNum":"  682","line":""},
{"lineNum":"  683","line":"    auto parts = get_particles_in_range(local_offset, local_num_part);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  684","line":"    file.write_collective(label, parts.first);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  685","line":"    file.write_collective(label + \"_masks\", parts.second);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  686","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  687","line":""},
{"lineNum":"  688","line":"template<>"},
{"lineNum":"  689","line":"void"},
{"lineNum":"  690","line":"bunch_particles_t<double>::print_particle(size_t idx, Logger& logger) const"},
{"lineNum":"  691","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  692","line":"    logger(LoggerV::DEBUG)"},
{"lineNum":"  693","line":"        << std::showpos << std::scientific"},
{"lineNum":"  694","line":"        << std::setprecision(8)"},
{"lineNum":"  695","line":"        << std::setw(12) << hparts(idx, 0) << \", \""},
{"lineNum":"  696","line":"        << std::setw(12) << hparts(idx, 1) << \", \""},
{"lineNum":"  697","line":"        << std::setw(12) << hparts(idx, 2) << \", \""},
{"lineNum":"  698","line":"        << std::setw(12) << hparts(idx, 3) << \", \""},
{"lineNum":"  699","line":"        << std::setw(12) << hparts(idx, 4) << \", \""},
{"lineNum":"  700","line":"        << std::setw(12) << hparts(idx, 5) << \"\\n\""},
{"lineNum":"  701","line":"        << std::defaultfloat << std::noshowpos"},
{"lineNum":"  702","line":"        ;"},
{"lineNum":"  703","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  704","line":""},
{"lineNum":"  705","line":"template<>"},
{"lineNum":"  706","line":"void"},
{"lineNum":"  707","line":"bunch_particles_t<double>::save_checkpoint_particles(Hdf5_file & file, int idx) const"},
{"lineNum":"  708","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  709","line":"    checkout_particles();"},
{"lineNum":"  710","line":""},
{"lineNum":"  711","line":"    std::stringstream ss;"},
{"lineNum":"  712","line":"    ss << \"bunch_particles_\" << label << \"_parts_\" << idx;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  713","line":"    file.write(ss.str(), hparts.data(), hparts.span(), true);"},
{"lineNum":"  714","line":""},
{"lineNum":"  715","line":"    ss.str(\"\");"},
{"lineNum":"  716","line":"    ss << \"bunch_particles_\" << label << \"_masks_\" << idx;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  717","line":"    file.write(ss.str(), hmasks.data(), hmasks.span(), true);"},
{"lineNum":"  718","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  719","line":""},
{"lineNum":"  720","line":"template<>"},
{"lineNum":"  721","line":"void"},
{"lineNum":"  722","line":"bunch_particles_t<double>::load_checkpoint_particles(Hdf5_file & file, int idx)"},
{"lineNum":"  723","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  724","line":"    std::stringstream ss;"},
{"lineNum":"  725","line":"    ss << \"bunch_particles_\" << label << \"_parts_\" << idx;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  726","line":"    file.read(ss.str(), hparts.data(), hparts.span());"},
{"lineNum":"  727","line":""},
{"lineNum":"  728","line":"    ss.str(\"\");"},
{"lineNum":"  729","line":"    ss << \"bunch_particles_\" << label << \"_masks_\" << idx;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  730","line":"    file.read(ss.str(), hmasks.data(), hmasks.span());"},
{"lineNum":"  731","line":""},
{"lineNum":"  732","line":"    checkin_particles();"},
{"lineNum":"  733","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  734","line":""},
{"lineNum":"  735","line":""},
{"lineNum":"  736","line":""},
{"lineNum":"  737","line":""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 199, "covered" : 0,};
var merged_data = [];
