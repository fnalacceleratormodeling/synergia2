var data = {lines:[
{"lineNum":"    1","line":"// This file is part of Eigen, a lightweight C++ template library"},
{"lineNum":"    2","line":"// for linear algebra."},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Copyright (C) 2010 Gael Guennebaud <gael.guennebaud@inria.fr>"},
{"lineNum":"    5","line":"//"},
{"lineNum":"    6","line":"// This Source Code Form is subject to the terms of the Mozilla"},
{"lineNum":"    7","line":"// Public License v. 2.0. If a copy of the MPL was not distributed"},
{"lineNum":"    8","line":"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/."},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef EIGEN_PARALLELIZER_H"},
{"lineNum":"   11","line":"#define EIGEN_PARALLELIZER_H"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"#if EIGEN_HAS_CXX11_ATOMIC"},
{"lineNum":"   14","line":"#include <atomic>"},
{"lineNum":"   15","line":"#endif"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"#include \"../InternalHeaderCheck.h\""},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"namespace Eigen {"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"namespace internal {"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"/** \\internal */"},
{"lineNum":"   24","line":"inline void manage_multi_threading(Action action, int* v)"},
{"lineNum":"   25","line":"{"},
{"lineNum":"   26","line":"  static int m_maxThreads = -1;"},
{"lineNum":"   27","line":"  EIGEN_UNUSED_VARIABLE(m_maxThreads)"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"  if(action==SetAction)"},
{"lineNum":"   30","line":"  {"},
{"lineNum":"   31","line":"    eigen_internal_assert(v!=0);"},
{"lineNum":"   32","line":"    m_maxThreads = *v;"},
{"lineNum":"   33","line":"  }"},
{"lineNum":"   34","line":"  else if(action==GetAction)"},
{"lineNum":"   35","line":"  {"},
{"lineNum":"   36","line":"    eigen_internal_assert(v!=0);"},
{"lineNum":"   37","line":"    #ifdef EIGEN_HAS_OPENMP"},
{"lineNum":"   38","line":"    if(m_maxThreads>0)","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"   39","line":"      *v = m_maxThreads;"},
{"lineNum":"   40","line":"    else"},
{"lineNum":"   41","line":"      *v = omp_get_max_threads();","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"   42","line":"    #else"},
{"lineNum":"   43","line":"    *v = 1;"},
{"lineNum":"   44","line":"    #endif"},
{"lineNum":"   45","line":"  }"},
{"lineNum":"   46","line":"  else"},
{"lineNum":"   47","line":"  {"},
{"lineNum":"   48","line":"    eigen_internal_assert(false);"},
{"lineNum":"   49","line":"  }"},
{"lineNum":"   50","line":"}"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"}"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"/** Must be call first when calling Eigen from multiple threads */"},
{"lineNum":"   55","line":"inline void initParallel()"},
{"lineNum":"   56","line":"{"},
{"lineNum":"   57","line":"  int nbt;"},
{"lineNum":"   58","line":"  internal::manage_multi_threading(GetAction, &nbt);"},
{"lineNum":"   59","line":"  std::ptrdiff_t l1, l2, l3;"},
{"lineNum":"   60","line":"  internal::manage_caching_sizes(GetAction, &l1, &l2, &l3);"},
{"lineNum":"   61","line":"}"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"/** \\returns the max number of threads reserved for Eigen"},
{"lineNum":"   64","line":"  * \\sa setNbThreads */"},
{"lineNum":"   65","line":"inline int nbThreads()"},
{"lineNum":"   66","line":"{"},
{"lineNum":"   67","line":"  int ret;"},
{"lineNum":"   68","line":"  internal::manage_multi_threading(GetAction, &ret);"},
{"lineNum":"   69","line":"  return ret;"},
{"lineNum":"   70","line":"}"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"/** Sets the max number of threads reserved for Eigen"},
{"lineNum":"   73","line":"  * \\sa nbThreads */"},
{"lineNum":"   74","line":"inline void setNbThreads(int v)"},
{"lineNum":"   75","line":"{"},
{"lineNum":"   76","line":"  internal::manage_multi_threading(SetAction, &v);"},
{"lineNum":"   77","line":"}"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"namespace internal {"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"template<typename Index> struct GemmParallelInfo"},
{"lineNum":"   82","line":"{"},
{"lineNum":"   83","line":"  GemmParallelInfo() : sync(-1), users(0), lhs_start(0), lhs_length(0) {}","class":"lineNoCov","hits":"0","possible_hits":"24",},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"  // volatile is not enough on all architectures (see bug 1572)"},
{"lineNum":"   86","line":"  // to guarantee that when thread A says to thread B that it is"},
{"lineNum":"   87","line":"  // done with packing a block, then all writes have been really"},
{"lineNum":"   88","line":"  // carried out... C++11 memory model+atomic guarantees this."},
{"lineNum":"   89","line":"#if EIGEN_HAS_CXX11_ATOMIC"},
{"lineNum":"   90","line":"  std::atomic<Index> sync;"},
{"lineNum":"   91","line":"  std::atomic<int> users;"},
{"lineNum":"   92","line":"#else"},
{"lineNum":"   93","line":"  Index volatile sync;"},
{"lineNum":"   94","line":"  int volatile users;"},
{"lineNum":"   95","line":"#endif"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"  Index lhs_start;"},
{"lineNum":"   98","line":"  Index lhs_length;"},
{"lineNum":"   99","line":"};"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"template<bool Condition, typename Functor, typename Index>"},
{"lineNum":"  102","line":"void parallelize_gemm(const Functor& func, Index rows, Index cols, Index depth, bool transpose)"},
{"lineNum":"  103","line":"{","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  104","line":"  // TODO when EIGEN_USE_BLAS is defined,"},
{"lineNum":"  105","line":"  // we should still enable OMP for other scalar types"},
{"lineNum":"  106","line":"  // Without C++11, we have to disable GEMM\'s parallelization on"},
{"lineNum":"  107","line":"  // non x86 architectures because there volatile is not enough for our purpose."},
{"lineNum":"  108","line":"  // See bug 1572."},
{"lineNum":"  109","line":"#if (! defined(EIGEN_HAS_OPENMP)) || defined(EIGEN_USE_BLAS) || ((!EIGEN_HAS_CXX11_ATOMIC) && !(EIGEN_ARCH_i386_OR_x86_64))"},
{"lineNum":"  110","line":"  // FIXME the transpose variable is only needed to properly split"},
{"lineNum":"  111","line":"  // the matrix product when multithreading is enabled. This is a temporary"},
{"lineNum":"  112","line":"  // fix to support row-major destination matrices. This whole"},
{"lineNum":"  113","line":"  // parallelizer mechanism has to be redesigned anyway."},
{"lineNum":"  114","line":"  EIGEN_UNUSED_VARIABLE(depth);"},
{"lineNum":"  115","line":"  EIGEN_UNUSED_VARIABLE(transpose);"},
{"lineNum":"  116","line":"  func(0,rows, 0,cols);"},
{"lineNum":"  117","line":"#else"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"  // Dynamically check whether we should enable or disable OpenMP."},
{"lineNum":"  120","line":"  // The conditions are:"},
{"lineNum":"  121","line":"  // - the max number of threads we can create is greater than 1"},
{"lineNum":"  122","line":"  // - we are not already in a parallel code"},
{"lineNum":"  123","line":"  // - the sizes are large enough"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"  // compute the maximal number of threads from the size of the product:"},
{"lineNum":"  126","line":"  // This first heuristic takes into account that the product kernel is fully optimized when working with nr columns at once."},
{"lineNum":"  127","line":"  Index size = transpose ? rows : cols;","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  128","line":"  Index pb_max_threads = std::max<Index>(1,size / Functor::Traits::nr);","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"  // compute the maximal number of threads from the total amount of work:"},
{"lineNum":"  131","line":"  double work = static_cast<double>(rows) * static_cast<double>(cols) *","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"  132","line":"      static_cast<double>(depth);","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  133","line":"  double kMinTaskSize = 50000;  // FIXME improve this heuristic."},
{"lineNum":"  134","line":"  pb_max_threads = std::max<Index>(1, std::min<Index>(pb_max_threads, static_cast<Index>( work / kMinTaskSize ) ));","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"  // compute the number of threads we are going to use"},
{"lineNum":"  137","line":"  Index threads = std::min<Index>(nbThreads(), pb_max_threads);","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"  // if multi-threading is explicitly disabled, not useful, or if we already are in a parallel session,"},
{"lineNum":"  140","line":"  // then abort multi-threading"},
{"lineNum":"  141","line":"  // FIXME omp_get_num_threads()>1 only works for openmp, what if the user does not use openmp?"},
{"lineNum":"  142","line":"  if((!Condition) || (threads==1) || (omp_get_num_threads()>1))","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  143","line":"    return func(0,rows, 0,cols);"},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"  Eigen::initParallel();"},
{"lineNum":"  146","line":"  func.initParallelSession(threads);"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"  if(transpose)","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  149","line":"    std::swap(rows,cols);"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"  ei_declare_aligned_stack_constructed_variable(GemmParallelInfo<Index>,info,threads,0);","class":"lineNoCov","hits":"0","possible_hits":"24",},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"  #pragma omp parallel num_threads(threads)","class":"lineNoCov","hits":"0","possible_hits":"26",},
{"lineNum":"  154","line":"  {"},
{"lineNum":"  155","line":"    Index i = omp_get_thread_num();","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  156","line":"    // Note that the actual number of threads might be lower than the number of request ones."},
{"lineNum":"  157","line":"    Index actual_threads = omp_get_num_threads();","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"    Index blockCols = (cols / actual_threads) & ~Index(0x3);","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  160","line":"    Index blockRows = (rows / actual_threads);","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  161","line":"    blockRows = (blockRows/Functor::Traits::mr)*Functor::Traits::mr;","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"    Index r0 = i*blockRows;","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  164","line":"    Index actualBlockRows = (i+1==actual_threads) ? rows-r0 : blockRows;","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"    Index c0 = i*blockCols;","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  167","line":"    Index actualBlockCols = (i+1==actual_threads) ? cols-c0 : blockCols;","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"    info[i].lhs_start = r0;","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  170","line":"    info[i].lhs_length = actualBlockRows;","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"    if(transpose) func(c0, actualBlockCols, 0, rows, info);","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  173","line":"    else          func(0, rows, c0, actualBlockCols, info);"},
{"lineNum":"  174","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  175","line":"#endif"},
{"lineNum":"  176","line":"}","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"} // end namespace internal"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"} // end namespace Eigen"},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"#endif // EIGEN_PARALLELIZER_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 28, "covered" : 0,};
var merged_data = [];
