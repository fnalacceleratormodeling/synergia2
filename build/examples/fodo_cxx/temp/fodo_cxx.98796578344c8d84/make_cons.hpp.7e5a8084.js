var data = {lines:[
{"lineNum":"    1","line":"/*============================================================================="},
{"lineNum":"    2","line":"  Copyright (c) 2001-2011 Joel de Guzman"},
{"lineNum":"    3","line":"  http://spirit.sourceforge.net/"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"  Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    6","line":"  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    7","line":"=============================================================================*/"},
{"lineNum":"    8","line":"#ifndef BOOST_SPIRIT_MAKE_CONS_OCTOBER_16_2008_1252PM"},
{"lineNum":"    9","line":"#define BOOST_SPIRIT_MAKE_CONS_OCTOBER_16_2008_1252PM"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"#if defined(_MSC_VER)"},
{"lineNum":"   12","line":"#pragma once"},
{"lineNum":"   13","line":"#endif"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"#include <boost/spirit/include/phoenix_limits.hpp>      // needs to be included before proto"},
{"lineNum":"   16","line":"#include <boost/proto/proto.hpp>"},
{"lineNum":"   17","line":"#include <boost/mpl/eval_if.hpp>"},
{"lineNum":"   18","line":"#include <boost/fusion/include/cons.hpp>"},
{"lineNum":"   19","line":"#include <boost/type_traits/remove_const.hpp>"},
{"lineNum":"   20","line":"#include <boost/type_traits/is_abstract.hpp>"},
{"lineNum":"   21","line":"#include <boost/type_traits/is_function.hpp>"},
{"lineNum":"   22","line":"#include <boost/type_traits/add_reference.hpp>"},
{"lineNum":"   23","line":"#include <boost/utility/enable_if.hpp>"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"namespace boost { namespace spirit { namespace detail"},
{"lineNum":"   26","line":"{"},
{"lineNum":"   27","line":"    template <typename T>"},
{"lineNum":"   28","line":"    struct as_meta_element"},
{"lineNum":"   29","line":"      : mpl::eval_if_c<is_abstract<T>::value || is_function<T>::value"},
{"lineNum":"   30","line":"          , add_reference<T>, remove_const<T> >"},
{"lineNum":"   31","line":"    {};"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"    template <typename T>"},
{"lineNum":"   34","line":"    struct as_meta_element<T&> : as_meta_element<T>   // always store by value"},
{"lineNum":"   35","line":"    {};"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"    template <typename T, int N>"},
{"lineNum":"   38","line":"    struct as_meta_element<T[N]>"},
{"lineNum":"   39","line":"    {"},
{"lineNum":"   40","line":"        typedef const T(&type)[N];"},
{"lineNum":"   41","line":"    };"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"    namespace result_of"},
{"lineNum":"   44","line":"    {"},
{"lineNum":"   45","line":"        template <typename Car, typename Cdr = fusion::nil_>"},
{"lineNum":"   46","line":"        struct make_cons"},
{"lineNum":"   47","line":"        {"},
{"lineNum":"   48","line":"            typedef typename as_meta_element<Car>::type car_type;            typedef typename fusion::cons<car_type, Cdr> type;"},
{"lineNum":"   49","line":"        };"},
{"lineNum":"   50","line":"    }"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"    template <typename Car, typename Cdr>"},
{"lineNum":"   53","line":"    fusion::cons<typename as_meta_element<Car>::type, Cdr>"},
{"lineNum":"   54","line":"    make_cons(Car const& car, Cdr const& cdr)"},
{"lineNum":"   55","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"   56","line":"        typedef typename as_meta_element<Car>::type car_type;"},
{"lineNum":"   57","line":"        typedef typename fusion::cons<car_type, Cdr> result;"},
{"lineNum":"   58","line":"        return result(car, cdr);","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"   59","line":"    }"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"    template <typename Car>"},
{"lineNum":"   62","line":"    fusion::cons<typename as_meta_element<Car>::type>"},
{"lineNum":"   63","line":"    make_cons(Car const& car)"},
{"lineNum":"   64","line":"    {"},
{"lineNum":"   65","line":"        typedef typename as_meta_element<Car>::type car_type;"},
{"lineNum":"   66","line":"        typedef typename fusion::cons<car_type> result;"},
{"lineNum":"   67","line":"        return result(car);"},
{"lineNum":"   68","line":"    }"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"#if defined(__GNUC__) && (__GNUC__ == 4) && (__GNUC_MINOR__ == 0)"},
{"lineNum":"   71","line":"    // workaround for gcc-4.0 bug where illegal function types"},
{"lineNum":"   72","line":"    // can be formed (const is added to function type)"},
{"lineNum":"   73","line":"    // description: http://lists.boost.org/Archives/boost/2009/04/150743.php"},
{"lineNum":"   74","line":"    template <typename Car>"},
{"lineNum":"   75","line":"    fusion::cons<typename as_meta_element<Car>::type>"},
{"lineNum":"   76","line":"    make_cons(Car& car, typename enable_if<is_function<Car> >::type* = 0)"},
{"lineNum":"   77","line":"    {"},
{"lineNum":"   78","line":"        typedef typename as_meta_element<Car>::type car_type;"},
{"lineNum":"   79","line":"        typedef typename fusion::cons<car_type> result;"},
{"lineNum":"   80","line":"        return result(car);"},
{"lineNum":"   81","line":"    }"},
{"lineNum":"   82","line":"#endif"},
{"lineNum":"   83","line":"}}}"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 2, "covered" : 0,};
var merged_data = [];
