var data = {lines:[
{"lineNum":"    1","line":"// Tencent is pleased to support the open source community by making RapidJSON available."},
{"lineNum":"    2","line":"//"},
{"lineNum":"    3","line":"// Copyright (C) 2015 THL A29 Limited, a Tencent company, and Milo Yip. All rights reserved."},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// Licensed under the MIT License (the \"License\"); you may not use this file except"},
{"lineNum":"    6","line":"// in compliance with the License. You may obtain a copy of the License at"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"// http://opensource.org/licenses/MIT"},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// Unless required by applicable law or agreed to in writing, software distributed"},
{"lineNum":"   11","line":"// under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR"},
{"lineNum":"   12","line":"// CONDITIONS OF ANY KIND, either express or implied. See the License for the"},
{"lineNum":"   13","line":"// specific language governing permissions and limitations under the License."},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"#ifndef CEREAL_RAPIDJSON_READER_H_"},
{"lineNum":"   16","line":"#define CEREAL_RAPIDJSON_READER_H_"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"/*! \\file reader.h */"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"#include \"allocators.h\""},
{"lineNum":"   21","line":"#include \"stream.h\""},
{"lineNum":"   22","line":"#include \"encodedstream.h\""},
{"lineNum":"   23","line":"#include \"internal/meta.h\""},
{"lineNum":"   24","line":"#include \"internal/stack.h\""},
{"lineNum":"   25","line":"#include \"internal/strtod.h\""},
{"lineNum":"   26","line":"#include <limits>"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"#if defined(CEREAL_RAPIDJSON_SIMD) && defined(_MSC_VER)"},
{"lineNum":"   29","line":"#include <intrin.h>"},
{"lineNum":"   30","line":"#pragma intrinsic(_BitScanForward)"},
{"lineNum":"   31","line":"#endif"},
{"lineNum":"   32","line":"#ifdef CEREAL_RAPIDJSON_SSE42"},
{"lineNum":"   33","line":"#include <nmmintrin.h>"},
{"lineNum":"   34","line":"#elif defined(CEREAL_RAPIDJSON_SSE2)"},
{"lineNum":"   35","line":"#include <emmintrin.h>"},
{"lineNum":"   36","line":"#elif defined(CEREAL_RAPIDJSON_NEON)"},
{"lineNum":"   37","line":"#include <arm_neon.h>"},
{"lineNum":"   38","line":"#endif"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"#ifdef __clang__"},
{"lineNum":"   41","line":"CEREAL_RAPIDJSON_DIAG_PUSH"},
{"lineNum":"   42","line":"CEREAL_RAPIDJSON_DIAG_OFF(old-style-cast)"},
{"lineNum":"   43","line":"CEREAL_RAPIDJSON_DIAG_OFF(padded)"},
{"lineNum":"   44","line":"CEREAL_RAPIDJSON_DIAG_OFF(switch-enum)"},
{"lineNum":"   45","line":"#elif defined(_MSC_VER)"},
{"lineNum":"   46","line":"CEREAL_RAPIDJSON_DIAG_PUSH"},
{"lineNum":"   47","line":"CEREAL_RAPIDJSON_DIAG_OFF(4127)  // conditional expression is constant"},
{"lineNum":"   48","line":"CEREAL_RAPIDJSON_DIAG_OFF(4702)  // unreachable code"},
{"lineNum":"   49","line":"#endif"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"#ifdef __GNUC__"},
{"lineNum":"   52","line":"CEREAL_RAPIDJSON_DIAG_PUSH"},
{"lineNum":"   53","line":"CEREAL_RAPIDJSON_DIAG_OFF(effc++)"},
{"lineNum":"   54","line":"#endif"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"//!@cond CEREAL_RAPIDJSON_HIDDEN_FROM_DOXYGEN"},
{"lineNum":"   57","line":"#define CEREAL_RAPIDJSON_NOTHING /* deliberately empty */"},
{"lineNum":"   58","line":"#ifndef CEREAL_RAPIDJSON_PARSE_ERROR_EARLY_RETURN"},
{"lineNum":"   59","line":"#define CEREAL_RAPIDJSON_PARSE_ERROR_EARLY_RETURN(value) \\"},
{"lineNum":"   60","line":"    CEREAL_RAPIDJSON_MULTILINEMACRO_BEGIN \\"},
{"lineNum":"   61","line":"    if (CEREAL_RAPIDJSON_UNLIKELY(HasParseError())) { return value; } \\"},
{"lineNum":"   62","line":"    CEREAL_RAPIDJSON_MULTILINEMACRO_END"},
{"lineNum":"   63","line":"#endif"},
{"lineNum":"   64","line":"#define CEREAL_RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID \\"},
{"lineNum":"   65","line":"    CEREAL_RAPIDJSON_PARSE_ERROR_EARLY_RETURN(CEREAL_RAPIDJSON_NOTHING)"},
{"lineNum":"   66","line":"//!@endcond"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"/*! \\def CEREAL_RAPIDJSON_PARSE_ERROR_NORETURN"},
{"lineNum":"   69","line":"    \\ingroup CEREAL_RAPIDJSON_ERRORS"},
{"lineNum":"   70","line":"    \\brief Macro to indicate a parse error."},
{"lineNum":"   71","line":"    \\param parseErrorCode \\ref rapidjson::ParseErrorCode of the error"},
{"lineNum":"   72","line":"    \\param offset  position of the error in JSON input (\\c size_t)"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"    This macros can be used as a customization point for the internal"},
{"lineNum":"   75","line":"    error handling mechanism of RapidJSON."},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"    A common usage model is to throw an exception instead of requiring the"},
{"lineNum":"   78","line":"    caller to explicitly check the \\ref rapidjson::GenericReader::Parse\'s"},
{"lineNum":"   79","line":"    return value:"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"    \\code"},
{"lineNum":"   82","line":"    #define CEREAL_RAPIDJSON_PARSE_ERROR_NORETURN(parseErrorCode,offset) \\"},
{"lineNum":"   83","line":"       throw ParseException(parseErrorCode, #parseErrorCode, offset)"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"    #include <stdexcept>               // std::runtime_error"},
{"lineNum":"   86","line":"    #include \"rapidjson/error/error.h\" // rapidjson::ParseResult"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"    struct ParseException : std::runtime_error, rapidjson::ParseResult {"},
{"lineNum":"   89","line":"      ParseException(rapidjson::ParseErrorCode code, const char* msg, size_t offset)"},
{"lineNum":"   90","line":"        : std::runtime_error(msg), ParseResult(code, offset) {}"},
{"lineNum":"   91","line":"    };"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"    #include \"rapidjson/reader.h\""},
{"lineNum":"   94","line":"    \\endcode"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"    \\see CEREAL_RAPIDJSON_PARSE_ERROR, rapidjson::GenericReader::Parse"},
{"lineNum":"   97","line":" */"},
{"lineNum":"   98","line":"#ifndef CEREAL_RAPIDJSON_PARSE_ERROR_NORETURN"},
{"lineNum":"   99","line":"#define CEREAL_RAPIDJSON_PARSE_ERROR_NORETURN(parseErrorCode, offset) \\"},
{"lineNum":"  100","line":"    CEREAL_RAPIDJSON_MULTILINEMACRO_BEGIN \\"},
{"lineNum":"  101","line":"    CEREAL_RAPIDJSON_ASSERT(!HasParseError()); /* Error can only be assigned once */ \\"},
{"lineNum":"  102","line":"    SetParseError(parseErrorCode, offset); \\"},
{"lineNum":"  103","line":"    CEREAL_RAPIDJSON_MULTILINEMACRO_END"},
{"lineNum":"  104","line":"#endif"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"/*! \\def CEREAL_RAPIDJSON_PARSE_ERROR"},
{"lineNum":"  107","line":"    \\ingroup CEREAL_RAPIDJSON_ERRORS"},
{"lineNum":"  108","line":"    \\brief (Internal) macro to indicate and handle a parse error."},
{"lineNum":"  109","line":"    \\param parseErrorCode \\ref rapidjson::ParseErrorCode of the error"},
{"lineNum":"  110","line":"    \\param offset  position of the error in JSON input (\\c size_t)"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"    Invokes CEREAL_RAPIDJSON_PARSE_ERROR_NORETURN and stops the parsing."},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"    \\see CEREAL_RAPIDJSON_PARSE_ERROR_NORETURN"},
{"lineNum":"  115","line":"    \\hideinitializer"},
{"lineNum":"  116","line":" */"},
{"lineNum":"  117","line":"#ifndef CEREAL_RAPIDJSON_PARSE_ERROR"},
{"lineNum":"  118","line":"#define CEREAL_RAPIDJSON_PARSE_ERROR(parseErrorCode, offset) \\"},
{"lineNum":"  119","line":"    CEREAL_RAPIDJSON_MULTILINEMACRO_BEGIN \\"},
{"lineNum":"  120","line":"    CEREAL_RAPIDJSON_PARSE_ERROR_NORETURN(parseErrorCode, offset); \\"},
{"lineNum":"  121","line":"    CEREAL_RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID; \\"},
{"lineNum":"  122","line":"    CEREAL_RAPIDJSON_MULTILINEMACRO_END"},
{"lineNum":"  123","line":"#endif"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"#include \"error/error.h\" // ParseErrorCode, ParseResult"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"CEREAL_RAPIDJSON_NAMESPACE_BEGIN"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  130","line":"// ParseFlag"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"/*! \\def CEREAL_RAPIDJSON_PARSE_DEFAULT_FLAGS"},
{"lineNum":"  133","line":"    \\ingroup CEREAL_RAPIDJSON_CONFIG"},
{"lineNum":"  134","line":"    \\brief User-defined kParseDefaultFlags definition."},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"    User can define this as any \\c ParseFlag combinations."},
{"lineNum":"  137","line":"*/"},
{"lineNum":"  138","line":"#ifndef CEREAL_RAPIDJSON_PARSE_DEFAULT_FLAGS"},
{"lineNum":"  139","line":"#define CEREAL_RAPIDJSON_PARSE_DEFAULT_FLAGS kParseNoFlags"},
{"lineNum":"  140","line":"#endif"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"//! Combination of parseFlags"},
{"lineNum":"  143","line":"/*! \\see Reader::Parse, Document::Parse, Document::ParseInsitu, Document::ParseStream"},
{"lineNum":"  144","line":" */"},
{"lineNum":"  145","line":"enum ParseFlag {"},
{"lineNum":"  146","line":"    kParseNoFlags = 0,              //!< No flags are set."},
{"lineNum":"  147","line":"    kParseInsituFlag = 1,           //!< In-situ(destructive) parsing."},
{"lineNum":"  148","line":"    kParseValidateEncodingFlag = 2, //!< Validate encoding of JSON strings."},
{"lineNum":"  149","line":"    kParseIterativeFlag = 4,        //!< Iterative(constant complexity in terms of function call stack size) parsing."},
{"lineNum":"  150","line":"    kParseStopWhenDoneFlag = 8,     //!< After parsing a complete JSON root from stream, stop further processing the rest of stream. When this flag is used, parser will not generate kParseErrorDocumentRootNotSingular error."},
{"lineNum":"  151","line":"    kParseFullPrecisionFlag = 16,   //!< Parse number in full precision (but slower)."},
{"lineNum":"  152","line":"    kParseCommentsFlag = 32,        //!< Allow one-line (//) and multi-line (/**/) comments."},
{"lineNum":"  153","line":"    kParseNumbersAsStringsFlag = 64,    //!< Parse all numbers (ints/doubles) as strings."},
{"lineNum":"  154","line":"    kParseTrailingCommasFlag = 128, //!< Allow trailing commas at the end of objects and arrays."},
{"lineNum":"  155","line":"    kParseNanAndInfFlag = 256,      //!< Allow parsing NaN, Inf, Infinity, -Inf and -Infinity as doubles."},
{"lineNum":"  156","line":"    kParseDefaultFlags = CEREAL_RAPIDJSON_PARSE_DEFAULT_FLAGS  //!< Default parse flags. Can be customized by defining CEREAL_RAPIDJSON_PARSE_DEFAULT_FLAGS"},
{"lineNum":"  157","line":"};"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  160","line":"// Handler"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"/*! \\class rapidjson::Handler"},
{"lineNum":"  163","line":"    \\brief Concept for receiving events from GenericReader upon parsing."},
{"lineNum":"  164","line":"    The functions return true if no error occurs. If they return false,"},
{"lineNum":"  165","line":"    the event publisher should terminate the process."},
{"lineNum":"  166","line":"\\code"},
{"lineNum":"  167","line":"concept Handler {"},
{"lineNum":"  168","line":"    typename Ch;"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"    bool Null();"},
{"lineNum":"  171","line":"    bool Bool(bool b);"},
{"lineNum":"  172","line":"    bool Int(int i);"},
{"lineNum":"  173","line":"    bool Uint(unsigned i);"},
{"lineNum":"  174","line":"    bool Int64(int64_t i);"},
{"lineNum":"  175","line":"    bool Uint64(uint64_t i);"},
{"lineNum":"  176","line":"    bool Double(double d);"},
{"lineNum":"  177","line":"    /// enabled via kParseNumbersAsStringsFlag, string is not null-terminated (use length)"},
{"lineNum":"  178","line":"    bool RawNumber(const Ch* str, SizeType length, bool copy);"},
{"lineNum":"  179","line":"    bool String(const Ch* str, SizeType length, bool copy);"},
{"lineNum":"  180","line":"    bool StartObject();"},
{"lineNum":"  181","line":"    bool Key(const Ch* str, SizeType length, bool copy);"},
{"lineNum":"  182","line":"    bool EndObject(SizeType memberCount);"},
{"lineNum":"  183","line":"    bool StartArray();"},
{"lineNum":"  184","line":"    bool EndArray(SizeType elementCount);"},
{"lineNum":"  185","line":"};"},
{"lineNum":"  186","line":"\\endcode"},
{"lineNum":"  187","line":"*/"},
{"lineNum":"  188","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  189","line":"// BaseReaderHandler"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"//! Default implementation of Handler."},
{"lineNum":"  192","line":"/*! This can be used as base class of any reader handler."},
{"lineNum":"  193","line":"    \\note implements Handler concept"},
{"lineNum":"  194","line":"*/"},
{"lineNum":"  195","line":"template<typename Encoding = UTF8<>, typename Derived = void>"},
{"lineNum":"  196","line":"struct BaseReaderHandler {"},
{"lineNum":"  197","line":"    typedef typename Encoding::Ch Ch;"},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"    typedef typename internal::SelectIf<internal::IsSame<Derived, void>, BaseReaderHandler, Derived>::Type Override;"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"    bool Default() { return true; }"},
{"lineNum":"  202","line":"    bool Null() { return static_cast<Override&>(*this).Default(); }"},
{"lineNum":"  203","line":"    bool Bool(bool) { return static_cast<Override&>(*this).Default(); }"},
{"lineNum":"  204","line":"    bool Int(int) { return static_cast<Override&>(*this).Default(); }"},
{"lineNum":"  205","line":"    bool Uint(unsigned) { return static_cast<Override&>(*this).Default(); }"},
{"lineNum":"  206","line":"    bool Int64(int64_t) { return static_cast<Override&>(*this).Default(); }"},
{"lineNum":"  207","line":"    bool Uint64(uint64_t) { return static_cast<Override&>(*this).Default(); }"},
{"lineNum":"  208","line":"    bool Double(double) { return static_cast<Override&>(*this).Default(); }"},
{"lineNum":"  209","line":"    /// enabled via kParseNumbersAsStringsFlag, string is not null-terminated (use length)"},
{"lineNum":"  210","line":"    bool RawNumber(const Ch* str, SizeType len, bool copy) { return static_cast<Override&>(*this).String(str, len, copy); }"},
{"lineNum":"  211","line":"    bool String(const Ch*, SizeType, bool) { return static_cast<Override&>(*this).Default(); }"},
{"lineNum":"  212","line":"    bool StartObject() { return static_cast<Override&>(*this).Default(); }"},
{"lineNum":"  213","line":"    bool Key(const Ch* str, SizeType len, bool copy) { return static_cast<Override&>(*this).String(str, len, copy); }"},
{"lineNum":"  214","line":"    bool EndObject(SizeType) { return static_cast<Override&>(*this).Default(); }"},
{"lineNum":"  215","line":"    bool StartArray() { return static_cast<Override&>(*this).Default(); }"},
{"lineNum":"  216","line":"    bool EndArray(SizeType) { return static_cast<Override&>(*this).Default(); }"},
{"lineNum":"  217","line":"};"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  220","line":"// StreamLocalCopy"},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"namespace internal {"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"template<typename Stream, int = StreamTraits<Stream>::copyOptimization>"},
{"lineNum":"  225","line":"class StreamLocalCopy;"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"//! Do copy optimization."},
{"lineNum":"  228","line":"template<typename Stream>"},
{"lineNum":"  229","line":"class StreamLocalCopy<Stream, 1> {"},
{"lineNum":"  230","line":"public:"},
{"lineNum":"  231","line":"    StreamLocalCopy(Stream& original) : s(original), original_(original) {}"},
{"lineNum":"  232","line":"    ~StreamLocalCopy() { original_ = s; }"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"    Stream s;"},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":"private:"},
{"lineNum":"  237","line":"    StreamLocalCopy& operator=(const StreamLocalCopy&) /* = delete */;"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"    Stream& original_;"},
{"lineNum":"  240","line":"};"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"//! Keep reference."},
{"lineNum":"  243","line":"template<typename Stream>"},
{"lineNum":"  244","line":"class StreamLocalCopy<Stream, 0> {"},
{"lineNum":"  245","line":"public:"},
{"lineNum":"  246","line":"    StreamLocalCopy(Stream& original) : s(original) {}"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"    Stream& s;"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"private:"},
{"lineNum":"  251","line":"    StreamLocalCopy& operator=(const StreamLocalCopy&) /* = delete */;"},
{"lineNum":"  252","line":"};"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"} // namespace internal"},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  257","line":"// SkipWhitespace"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"//! Skip the JSON white spaces in a stream."},
{"lineNum":"  260","line":"/*! \\param is A input stream for skipping white spaces."},
{"lineNum":"  261","line":"    \\note This function has SSE2/SSE4.2 specialization."},
{"lineNum":"  262","line":"*/"},
{"lineNum":"  263","line":"template<typename InputStream>"},
{"lineNum":"  264","line":"void SkipWhitespace(InputStream& is) {"},
{"lineNum":"  265","line":"    internal::StreamLocalCopy<InputStream> copy(is);"},
{"lineNum":"  266","line":"    InputStream& s(copy.s);"},
{"lineNum":"  267","line":""},
{"lineNum":"  268","line":"    typename InputStream::Ch c;"},
{"lineNum":"  269","line":"    while ((c = s.Peek()) == \' \' || c == \'\\n\' || c == \'\\r\' || c == \'\\t\')","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  270","line":"        s.Take();"},
{"lineNum":"  271","line":"}"},
{"lineNum":"  272","line":""},
{"lineNum":"  273","line":"inline const char* SkipWhitespace(const char* p, const char* end) {"},
{"lineNum":"  274","line":"    while (p != end && (*p == \' \' || *p == \'\\n\' || *p == \'\\r\' || *p == \'\\t\'))"},
{"lineNum":"  275","line":"        ++p;"},
{"lineNum":"  276","line":"    return p;"},
{"lineNum":"  277","line":"}"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"#ifdef CEREAL_RAPIDJSON_SSE42"},
{"lineNum":"  280","line":"//! Skip whitespace with SSE 4.2 pcmpistrm instruction, testing 16 8-byte characters at once."},
{"lineNum":"  281","line":"inline const char *SkipWhitespace_SIMD(const char* p) {"},
{"lineNum":"  282","line":"    // Fast return for single non-whitespace"},
{"lineNum":"  283","line":"    if (*p == \' \' || *p == \'\\n\' || *p == \'\\r\' || *p == \'\\t\')"},
{"lineNum":"  284","line":"        ++p;"},
{"lineNum":"  285","line":"    else"},
{"lineNum":"  286","line":"        return p;"},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"    // 16-byte align to the next boundary"},
{"lineNum":"  289","line":"    const char* nextAligned = reinterpret_cast<const char*>((reinterpret_cast<size_t>(p) + 15) & static_cast<size_t>(~15));"},
{"lineNum":"  290","line":"    while (p != nextAligned)"},
{"lineNum":"  291","line":"        if (*p == \' \' || *p == \'\\n\' || *p == \'\\r\' || *p == \'\\t\')"},
{"lineNum":"  292","line":"            ++p;"},
{"lineNum":"  293","line":"        else"},
{"lineNum":"  294","line":"            return p;"},
{"lineNum":"  295","line":""},
{"lineNum":"  296","line":"    // The rest of string using SIMD"},
{"lineNum":"  297","line":"    static const char whitespace[16] = \" \\n\\r\\t\";"},
{"lineNum":"  298","line":"    const __m128i w = _mm_loadu_si128(reinterpret_cast<const __m128i *>(&whitespace[0]));"},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"    for (;; p += 16) {"},
{"lineNum":"  301","line":"        const __m128i s = _mm_load_si128(reinterpret_cast<const __m128i *>(p));"},
{"lineNum":"  302","line":"        const int r = _mm_cmpistri(w, s, _SIDD_UBYTE_OPS | _SIDD_CMP_EQUAL_ANY | _SIDD_LEAST_SIGNIFICANT | _SIDD_NEGATIVE_POLARITY);"},
{"lineNum":"  303","line":"        if (r != 16)    // some of characters is non-whitespace"},
{"lineNum":"  304","line":"            return p + r;"},
{"lineNum":"  305","line":"    }"},
{"lineNum":"  306","line":"}"},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"inline const char *SkipWhitespace_SIMD(const char* p, const char* end) {"},
{"lineNum":"  309","line":"    // Fast return for single non-whitespace"},
{"lineNum":"  310","line":"    if (p != end && (*p == \' \' || *p == \'\\n\' || *p == \'\\r\' || *p == \'\\t\'))"},
{"lineNum":"  311","line":"        ++p;"},
{"lineNum":"  312","line":"    else"},
{"lineNum":"  313","line":"        return p;"},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"    // The middle of string using SIMD"},
{"lineNum":"  316","line":"    static const char whitespace[16] = \" \\n\\r\\t\";"},
{"lineNum":"  317","line":"    const __m128i w = _mm_loadu_si128(reinterpret_cast<const __m128i *>(&whitespace[0]));"},
{"lineNum":"  318","line":""},
{"lineNum":"  319","line":"    for (; p <= end - 16; p += 16) {"},
{"lineNum":"  320","line":"        const __m128i s = _mm_loadu_si128(reinterpret_cast<const __m128i *>(p));"},
{"lineNum":"  321","line":"        const int r = _mm_cmpistri(w, s, _SIDD_UBYTE_OPS | _SIDD_CMP_EQUAL_ANY | _SIDD_LEAST_SIGNIFICANT | _SIDD_NEGATIVE_POLARITY);"},
{"lineNum":"  322","line":"        if (r != 16)    // some of characters is non-whitespace"},
{"lineNum":"  323","line":"            return p + r;"},
{"lineNum":"  324","line":"    }"},
{"lineNum":"  325","line":""},
{"lineNum":"  326","line":"    return SkipWhitespace(p, end);"},
{"lineNum":"  327","line":"}"},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"#elif defined(CEREAL_RAPIDJSON_SSE2)"},
{"lineNum":"  330","line":""},
{"lineNum":"  331","line":"//! Skip whitespace with SSE2 instructions, testing 16 8-byte characters at once."},
{"lineNum":"  332","line":"inline const char *SkipWhitespace_SIMD(const char* p) {"},
{"lineNum":"  333","line":"    // Fast return for single non-whitespace"},
{"lineNum":"  334","line":"    if (*p == \' \' || *p == \'\\n\' || *p == \'\\r\' || *p == \'\\t\')"},
{"lineNum":"  335","line":"        ++p;"},
{"lineNum":"  336","line":"    else"},
{"lineNum":"  337","line":"        return p;"},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"    // 16-byte align to the next boundary"},
{"lineNum":"  340","line":"    const char* nextAligned = reinterpret_cast<const char*>((reinterpret_cast<size_t>(p) + 15) & static_cast<size_t>(~15));"},
{"lineNum":"  341","line":"    while (p != nextAligned)"},
{"lineNum":"  342","line":"        if (*p == \' \' || *p == \'\\n\' || *p == \'\\r\' || *p == \'\\t\')"},
{"lineNum":"  343","line":"            ++p;"},
{"lineNum":"  344","line":"        else"},
{"lineNum":"  345","line":"            return p;"},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"    // The rest of string"},
{"lineNum":"  348","line":"    #define C16(c) { c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c }"},
{"lineNum":"  349","line":"    static const char whitespaces[4][16] = { C16(\' \'), C16(\'\\n\'), C16(\'\\r\'), C16(\'\\t\') };"},
{"lineNum":"  350","line":"    #undef C16"},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"    const __m128i w0 = _mm_loadu_si128(reinterpret_cast<const __m128i *>(&whitespaces[0][0]));"},
{"lineNum":"  353","line":"    const __m128i w1 = _mm_loadu_si128(reinterpret_cast<const __m128i *>(&whitespaces[1][0]));"},
{"lineNum":"  354","line":"    const __m128i w2 = _mm_loadu_si128(reinterpret_cast<const __m128i *>(&whitespaces[2][0]));"},
{"lineNum":"  355","line":"    const __m128i w3 = _mm_loadu_si128(reinterpret_cast<const __m128i *>(&whitespaces[3][0]));"},
{"lineNum":"  356","line":""},
{"lineNum":"  357","line":"    for (;; p += 16) {"},
{"lineNum":"  358","line":"        const __m128i s = _mm_load_si128(reinterpret_cast<const __m128i *>(p));"},
{"lineNum":"  359","line":"        __m128i x = _mm_cmpeq_epi8(s, w0);"},
{"lineNum":"  360","line":"        x = _mm_or_si128(x, _mm_cmpeq_epi8(s, w1));"},
{"lineNum":"  361","line":"        x = _mm_or_si128(x, _mm_cmpeq_epi8(s, w2));"},
{"lineNum":"  362","line":"        x = _mm_or_si128(x, _mm_cmpeq_epi8(s, w3));"},
{"lineNum":"  363","line":"        unsigned short r = static_cast<unsigned short>(~_mm_movemask_epi8(x));"},
{"lineNum":"  364","line":"        if (r != 0) {   // some of characters may be non-whitespace"},
{"lineNum":"  365","line":"#ifdef _MSC_VER         // Find the index of first non-whitespace"},
{"lineNum":"  366","line":"            unsigned long offset;"},
{"lineNum":"  367","line":"            _BitScanForward(&offset, r);"},
{"lineNum":"  368","line":"            return p + offset;"},
{"lineNum":"  369","line":"#else"},
{"lineNum":"  370","line":"            return p + __builtin_ffs(r) - 1;"},
{"lineNum":"  371","line":"#endif"},
{"lineNum":"  372","line":"        }"},
{"lineNum":"  373","line":"    }"},
{"lineNum":"  374","line":"}"},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"inline const char *SkipWhitespace_SIMD(const char* p, const char* end) {"},
{"lineNum":"  377","line":"    // Fast return for single non-whitespace"},
{"lineNum":"  378","line":"    if (p != end && (*p == \' \' || *p == \'\\n\' || *p == \'\\r\' || *p == \'\\t\'))"},
{"lineNum":"  379","line":"        ++p;"},
{"lineNum":"  380","line":"    else"},
{"lineNum":"  381","line":"        return p;"},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"    // The rest of string"},
{"lineNum":"  384","line":"    #define C16(c) { c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c }"},
{"lineNum":"  385","line":"    static const char whitespaces[4][16] = { C16(\' \'), C16(\'\\n\'), C16(\'\\r\'), C16(\'\\t\') };"},
{"lineNum":"  386","line":"    #undef C16"},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"    const __m128i w0 = _mm_loadu_si128(reinterpret_cast<const __m128i *>(&whitespaces[0][0]));"},
{"lineNum":"  389","line":"    const __m128i w1 = _mm_loadu_si128(reinterpret_cast<const __m128i *>(&whitespaces[1][0]));"},
{"lineNum":"  390","line":"    const __m128i w2 = _mm_loadu_si128(reinterpret_cast<const __m128i *>(&whitespaces[2][0]));"},
{"lineNum":"  391","line":"    const __m128i w3 = _mm_loadu_si128(reinterpret_cast<const __m128i *>(&whitespaces[3][0]));"},
{"lineNum":"  392","line":""},
{"lineNum":"  393","line":"    for (; p <= end - 16; p += 16) {"},
{"lineNum":"  394","line":"        const __m128i s = _mm_loadu_si128(reinterpret_cast<const __m128i *>(p));"},
{"lineNum":"  395","line":"        __m128i x = _mm_cmpeq_epi8(s, w0);"},
{"lineNum":"  396","line":"        x = _mm_or_si128(x, _mm_cmpeq_epi8(s, w1));"},
{"lineNum":"  397","line":"        x = _mm_or_si128(x, _mm_cmpeq_epi8(s, w2));"},
{"lineNum":"  398","line":"        x = _mm_or_si128(x, _mm_cmpeq_epi8(s, w3));"},
{"lineNum":"  399","line":"        unsigned short r = static_cast<unsigned short>(~_mm_movemask_epi8(x));"},
{"lineNum":"  400","line":"        if (r != 0) {   // some of characters may be non-whitespace"},
{"lineNum":"  401","line":"#ifdef _MSC_VER         // Find the index of first non-whitespace"},
{"lineNum":"  402","line":"            unsigned long offset;"},
{"lineNum":"  403","line":"            _BitScanForward(&offset, r);"},
{"lineNum":"  404","line":"            return p + offset;"},
{"lineNum":"  405","line":"#else"},
{"lineNum":"  406","line":"            return p + __builtin_ffs(r) - 1;"},
{"lineNum":"  407","line":"#endif"},
{"lineNum":"  408","line":"        }"},
{"lineNum":"  409","line":"    }"},
{"lineNum":"  410","line":""},
{"lineNum":"  411","line":"    return SkipWhitespace(p, end);"},
{"lineNum":"  412","line":"}"},
{"lineNum":"  413","line":""},
{"lineNum":"  414","line":"#elif defined(CEREAL_RAPIDJSON_NEON)"},
{"lineNum":"  415","line":""},
{"lineNum":"  416","line":"//! Skip whitespace with ARM Neon instructions, testing 16 8-byte characters at once."},
{"lineNum":"  417","line":"inline const char *SkipWhitespace_SIMD(const char* p) {"},
{"lineNum":"  418","line":"    // Fast return for single non-whitespace"},
{"lineNum":"  419","line":"    if (*p == \' \' || *p == \'\\n\' || *p == \'\\r\' || *p == \'\\t\')"},
{"lineNum":"  420","line":"        ++p;"},
{"lineNum":"  421","line":"    else"},
{"lineNum":"  422","line":"        return p;"},
{"lineNum":"  423","line":""},
{"lineNum":"  424","line":"    // 16-byte align to the next boundary"},
{"lineNum":"  425","line":"    const char* nextAligned = reinterpret_cast<const char*>((reinterpret_cast<size_t>(p) + 15) & static_cast<size_t>(~15));"},
{"lineNum":"  426","line":"    while (p != nextAligned)"},
{"lineNum":"  427","line":"        if (*p == \' \' || *p == \'\\n\' || *p == \'\\r\' || *p == \'\\t\')"},
{"lineNum":"  428","line":"            ++p;"},
{"lineNum":"  429","line":"        else"},
{"lineNum":"  430","line":"            return p;"},
{"lineNum":"  431","line":""},
{"lineNum":"  432","line":"    const uint8x16_t w0 = vmovq_n_u8(\' \');"},
{"lineNum":"  433","line":"    const uint8x16_t w1 = vmovq_n_u8(\'\\n\');"},
{"lineNum":"  434","line":"    const uint8x16_t w2 = vmovq_n_u8(\'\\r\');"},
{"lineNum":"  435","line":"    const uint8x16_t w3 = vmovq_n_u8(\'\\t\');"},
{"lineNum":"  436","line":""},
{"lineNum":"  437","line":"    for (;; p += 16) {"},
{"lineNum":"  438","line":"        const uint8x16_t s = vld1q_u8(reinterpret_cast<const uint8_t *>(p));"},
{"lineNum":"  439","line":"        uint8x16_t x = vceqq_u8(s, w0);"},
{"lineNum":"  440","line":"        x = vorrq_u8(x, vceqq_u8(s, w1));"},
{"lineNum":"  441","line":"        x = vorrq_u8(x, vceqq_u8(s, w2));"},
{"lineNum":"  442","line":"        x = vorrq_u8(x, vceqq_u8(s, w3));"},
{"lineNum":"  443","line":""},
{"lineNum":"  444","line":"        x = vmvnq_u8(x);                       // Negate"},
{"lineNum":"  445","line":"        x = vrev64q_u8(x);                     // Rev in 64"},
{"lineNum":"  446","line":"        uint64_t low = vgetq_lane_u64(reinterpret_cast<uint64x2_t>(x), 0);   // extract"},
{"lineNum":"  447","line":"        uint64_t high = vgetq_lane_u64(reinterpret_cast<uint64x2_t>(x), 1);  // extract"},
{"lineNum":"  448","line":""},
{"lineNum":"  449","line":"        if (low == 0) {"},
{"lineNum":"  450","line":"            if (high != 0) {"},
{"lineNum":"  451","line":"                int lz =__builtin_clzll(high);;"},
{"lineNum":"  452","line":"                return p + 8 + (lz >> 3);"},
{"lineNum":"  453","line":"            }"},
{"lineNum":"  454","line":"        } else {"},
{"lineNum":"  455","line":"            int lz = __builtin_clzll(low);;"},
{"lineNum":"  456","line":"            return p + (lz >> 3);"},
{"lineNum":"  457","line":"        }"},
{"lineNum":"  458","line":"    }"},
{"lineNum":"  459","line":"}"},
{"lineNum":"  460","line":""},
{"lineNum":"  461","line":"inline const char *SkipWhitespace_SIMD(const char* p, const char* end) {"},
{"lineNum":"  462","line":"    // Fast return for single non-whitespace"},
{"lineNum":"  463","line":"    if (p != end && (*p == \' \' || *p == \'\\n\' || *p == \'\\r\' || *p == \'\\t\'))"},
{"lineNum":"  464","line":"        ++p;"},
{"lineNum":"  465","line":"    else"},
{"lineNum":"  466","line":"        return p;"},
{"lineNum":"  467","line":""},
{"lineNum":"  468","line":"    const uint8x16_t w0 = vmovq_n_u8(\' \');"},
{"lineNum":"  469","line":"    const uint8x16_t w1 = vmovq_n_u8(\'\\n\');"},
{"lineNum":"  470","line":"    const uint8x16_t w2 = vmovq_n_u8(\'\\r\');"},
{"lineNum":"  471","line":"    const uint8x16_t w3 = vmovq_n_u8(\'\\t\');"},
{"lineNum":"  472","line":""},
{"lineNum":"  473","line":"    for (; p <= end - 16; p += 16) {"},
{"lineNum":"  474","line":"        const uint8x16_t s = vld1q_u8(reinterpret_cast<const uint8_t *>(p));"},
{"lineNum":"  475","line":"        uint8x16_t x = vceqq_u8(s, w0);"},
{"lineNum":"  476","line":"        x = vorrq_u8(x, vceqq_u8(s, w1));"},
{"lineNum":"  477","line":"        x = vorrq_u8(x, vceqq_u8(s, w2));"},
{"lineNum":"  478","line":"        x = vorrq_u8(x, vceqq_u8(s, w3));"},
{"lineNum":"  479","line":""},
{"lineNum":"  480","line":"        x = vmvnq_u8(x);                       // Negate"},
{"lineNum":"  481","line":"        x = vrev64q_u8(x);                     // Rev in 64"},
{"lineNum":"  482","line":"        uint64_t low = vgetq_lane_u64(reinterpret_cast<uint64x2_t>(x), 0);   // extract"},
{"lineNum":"  483","line":"        uint64_t high = vgetq_lane_u64(reinterpret_cast<uint64x2_t>(x), 1);  // extract"},
{"lineNum":"  484","line":""},
{"lineNum":"  485","line":"        if (low == 0) {"},
{"lineNum":"  486","line":"            if (high != 0) {"},
{"lineNum":"  487","line":"                int lz = __builtin_clzll(high);"},
{"lineNum":"  488","line":"                return p + 8 + (lz >> 3);"},
{"lineNum":"  489","line":"            }"},
{"lineNum":"  490","line":"        } else {"},
{"lineNum":"  491","line":"            int lz = __builtin_clzll(low);"},
{"lineNum":"  492","line":"            return p + (lz >> 3);"},
{"lineNum":"  493","line":"        }"},
{"lineNum":"  494","line":"    }"},
{"lineNum":"  495","line":""},
{"lineNum":"  496","line":"    return SkipWhitespace(p, end);"},
{"lineNum":"  497","line":"}"},
{"lineNum":"  498","line":""},
{"lineNum":"  499","line":"#endif // CEREAL_RAPIDJSON_NEON"},
{"lineNum":"  500","line":""},
{"lineNum":"  501","line":"#ifdef CEREAL_RAPIDJSON_SIMD"},
{"lineNum":"  502","line":"//! Template function specialization for InsituStringStream"},
{"lineNum":"  503","line":"template<> inline void SkipWhitespace(InsituStringStream& is) {"},
{"lineNum":"  504","line":"    is.src_ = const_cast<char*>(SkipWhitespace_SIMD(is.src_));"},
{"lineNum":"  505","line":"}"},
{"lineNum":"  506","line":""},
{"lineNum":"  507","line":"//! Template function specialization for StringStream"},
{"lineNum":"  508","line":"template<> inline void SkipWhitespace(StringStream& is) {"},
{"lineNum":"  509","line":"    is.src_ = SkipWhitespace_SIMD(is.src_);"},
{"lineNum":"  510","line":"}"},
{"lineNum":"  511","line":""},
{"lineNum":"  512","line":"template<> inline void SkipWhitespace(EncodedInputStream<UTF8<>, MemoryStream>& is) {"},
{"lineNum":"  513","line":"    is.is_.src_ = SkipWhitespace_SIMD(is.is_.src_, is.is_.end_);"},
{"lineNum":"  514","line":"}"},
{"lineNum":"  515","line":"#endif // CEREAL_RAPIDJSON_SIMD"},
{"lineNum":"  516","line":""},
{"lineNum":"  517","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  518","line":"// GenericReader"},
{"lineNum":"  519","line":""},
{"lineNum":"  520","line":"//! SAX-style JSON parser. Use \\ref Reader for UTF8 encoding and default allocator."},
{"lineNum":"  521","line":"/*! GenericReader parses JSON text from a stream, and send events synchronously to an"},
{"lineNum":"  522","line":"    object implementing Handler concept."},
{"lineNum":"  523","line":""},
{"lineNum":"  524","line":"    It needs to allocate a stack for storing a single decoded string during"},
{"lineNum":"  525","line":"    non-destructive parsing."},
{"lineNum":"  526","line":""},
{"lineNum":"  527","line":"    For in-situ parsing, the decoded string is directly written to the source"},
{"lineNum":"  528","line":"    text string, no temporary buffer is required."},
{"lineNum":"  529","line":""},
{"lineNum":"  530","line":"    A GenericReader object can be reused for parsing multiple JSON text."},
{"lineNum":"  531","line":""},
{"lineNum":"  532","line":"    \\tparam SourceEncoding Encoding of the input stream."},
{"lineNum":"  533","line":"    \\tparam TargetEncoding Encoding of the parse output."},
{"lineNum":"  534","line":"    \\tparam StackAllocator Allocator type for stack."},
{"lineNum":"  535","line":"*/"},
{"lineNum":"  536","line":"template <typename SourceEncoding, typename TargetEncoding, typename StackAllocator = CrtAllocator>"},
{"lineNum":"  537","line":"class GenericReader {"},
{"lineNum":"  538","line":"public:"},
{"lineNum":"  539","line":"    typedef typename SourceEncoding::Ch Ch; //!< SourceEncoding character type"},
{"lineNum":"  540","line":""},
{"lineNum":"  541","line":"    //! Constructor."},
{"lineNum":"  542","line":"    /*! \\param stackAllocator Optional allocator for allocating stack memory. (Only use for non-destructive parsing)"},
{"lineNum":"  543","line":"        \\param stackCapacity stack capacity in bytes for storing a single decoded string.  (Only use for non-destructive parsing)"},
{"lineNum":"  544","line":"    */"},
{"lineNum":"  545","line":"    GenericReader(StackAllocator* stackAllocator = 0, size_t stackCapacity = kDefaultStackCapacity) :"},
{"lineNum":"  546","line":"        stack_(stackAllocator, stackCapacity), parseResult_(), state_(IterativeParsingStartState) {}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  547","line":""},
{"lineNum":"  548","line":"    //! Parse JSON text."},
{"lineNum":"  549","line":"    /*! \\tparam parseFlags Combination of \\ref ParseFlag."},
{"lineNum":"  550","line":"        \\tparam InputStream Type of input stream, implementing Stream concept."},
{"lineNum":"  551","line":"        \\tparam Handler Type of handler, implementing Handler concept."},
{"lineNum":"  552","line":"        \\param is Input stream to be parsed."},
{"lineNum":"  553","line":"        \\param handler The handler to receive events."},
{"lineNum":"  554","line":"        \\return Whether the parsing is successful."},
{"lineNum":"  555","line":"    */"},
{"lineNum":"  556","line":"    template <unsigned parseFlags, typename InputStream, typename Handler>"},
{"lineNum":"  557","line":"    ParseResult Parse(InputStream& is, Handler& handler) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  558","line":"        if (parseFlags & kParseIterativeFlag)"},
{"lineNum":"  559","line":"            return IterativeParse<parseFlags>(is, handler);"},
{"lineNum":"  560","line":""},
{"lineNum":"  561","line":"        parseResult_.Clear();"},
{"lineNum":"  562","line":""},
{"lineNum":"  563","line":"        ClearStackOnExit scope(*this);"},
{"lineNum":"  564","line":""},
{"lineNum":"  565","line":"        SkipWhitespaceAndComments<parseFlags>(is);"},
{"lineNum":"  566","line":"        CEREAL_RAPIDJSON_PARSE_ERROR_EARLY_RETURN(parseResult_);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  567","line":""},
{"lineNum":"  568","line":"        if (CEREAL_RAPIDJSON_UNLIKELY(is.Peek() == \'\\0\')) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  569","line":"            CEREAL_RAPIDJSON_PARSE_ERROR_NORETURN(kParseErrorDocumentEmpty, is.Tell());"},
{"lineNum":"  570","line":"            CEREAL_RAPIDJSON_PARSE_ERROR_EARLY_RETURN(parseResult_);"},
{"lineNum":"  571","line":"        }"},
{"lineNum":"  572","line":"        else {"},
{"lineNum":"  573","line":"            ParseValue<parseFlags>(is, handler);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  574","line":"            CEREAL_RAPIDJSON_PARSE_ERROR_EARLY_RETURN(parseResult_);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  575","line":""},
{"lineNum":"  576","line":"            if (!(parseFlags & kParseStopWhenDoneFlag)) {"},
{"lineNum":"  577","line":"                SkipWhitespaceAndComments<parseFlags>(is);"},
{"lineNum":"  578","line":"                CEREAL_RAPIDJSON_PARSE_ERROR_EARLY_RETURN(parseResult_);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  579","line":""},
{"lineNum":"  580","line":"                if (CEREAL_RAPIDJSON_UNLIKELY(is.Peek() != \'\\0\')) {"},
{"lineNum":"  581","line":"                    CEREAL_RAPIDJSON_PARSE_ERROR_NORETURN(kParseErrorDocumentRootNotSingular, is.Tell());"},
{"lineNum":"  582","line":"                    CEREAL_RAPIDJSON_PARSE_ERROR_EARLY_RETURN(parseResult_);"},
{"lineNum":"  583","line":"                }"},
{"lineNum":"  584","line":"            }"},
{"lineNum":"  585","line":"        }"},
{"lineNum":"  586","line":""},
{"lineNum":"  587","line":"        return parseResult_;"},
{"lineNum":"  588","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  589","line":""},
{"lineNum":"  590","line":"    //! Parse JSON text (with \\ref kParseDefaultFlags)"},
{"lineNum":"  591","line":"    /*! \\tparam InputStream Type of input stream, implementing Stream concept"},
{"lineNum":"  592","line":"        \\tparam Handler Type of handler, implementing Handler concept."},
{"lineNum":"  593","line":"        \\param is Input stream to be parsed."},
{"lineNum":"  594","line":"        \\param handler The handler to receive events."},
{"lineNum":"  595","line":"        \\return Whether the parsing is successful."},
{"lineNum":"  596","line":"    */"},
{"lineNum":"  597","line":"    template <typename InputStream, typename Handler>"},
{"lineNum":"  598","line":"    ParseResult Parse(InputStream& is, Handler& handler) {"},
{"lineNum":"  599","line":"        return Parse<kParseDefaultFlags>(is, handler);"},
{"lineNum":"  600","line":"    }"},
{"lineNum":"  601","line":""},
{"lineNum":"  602","line":"    //! Initialize JSON text token-by-token parsing"},
{"lineNum":"  603","line":"    /*!"},
{"lineNum":"  604","line":"     */"},
{"lineNum":"  605","line":"    void IterativeParseInit() {"},
{"lineNum":"  606","line":"        parseResult_.Clear();"},
{"lineNum":"  607","line":"        state_ = IterativeParsingStartState;"},
{"lineNum":"  608","line":"    }"},
{"lineNum":"  609","line":""},
{"lineNum":"  610","line":"    //! Parse one token from JSON text"},
{"lineNum":"  611","line":"    /*! \\tparam InputStream Type of input stream, implementing Stream concept"},
{"lineNum":"  612","line":"        \\tparam Handler Type of handler, implementing Handler concept."},
{"lineNum":"  613","line":"        \\param is Input stream to be parsed."},
{"lineNum":"  614","line":"        \\param handler The handler to receive events."},
{"lineNum":"  615","line":"        \\return Whether the parsing is successful."},
{"lineNum":"  616","line":"     */"},
{"lineNum":"  617","line":"    template <unsigned parseFlags, typename InputStream, typename Handler>"},
{"lineNum":"  618","line":"    bool IterativeParseNext(InputStream& is, Handler& handler) {"},
{"lineNum":"  619","line":"        while (CEREAL_RAPIDJSON_LIKELY(is.Peek() != \'\\0\')) {"},
{"lineNum":"  620","line":"            SkipWhitespaceAndComments<parseFlags>(is);"},
{"lineNum":"  621","line":""},
{"lineNum":"  622","line":"            Token t = Tokenize(is.Peek());"},
{"lineNum":"  623","line":"            IterativeParsingState n = Predict(state_, t);"},
{"lineNum":"  624","line":"            IterativeParsingState d = Transit<parseFlags>(state_, t, n, is, handler);"},
{"lineNum":"  625","line":""},
{"lineNum":"  626","line":"            // If we\'ve finished or hit an error..."},
{"lineNum":"  627","line":"            if (CEREAL_RAPIDJSON_UNLIKELY(IsIterativeParsingCompleteState(d))) {"},
{"lineNum":"  628","line":"                // Report errors."},
{"lineNum":"  629","line":"                if (d == IterativeParsingErrorState) {"},
{"lineNum":"  630","line":"                    HandleError(state_, is);"},
{"lineNum":"  631","line":"                    return false;"},
{"lineNum":"  632","line":"                }"},
{"lineNum":"  633","line":""},
{"lineNum":"  634","line":"                // Transition to the finish state."},
{"lineNum":"  635","line":"                CEREAL_RAPIDJSON_ASSERT(d == IterativeParsingFinishState);"},
{"lineNum":"  636","line":"                state_ = d;"},
{"lineNum":"  637","line":""},
{"lineNum":"  638","line":"                // If StopWhenDone is not set..."},
{"lineNum":"  639","line":"                if (!(parseFlags & kParseStopWhenDoneFlag)) {"},
{"lineNum":"  640","line":"                    // ... and extra non-whitespace data is found..."},
{"lineNum":"  641","line":"                    SkipWhitespaceAndComments<parseFlags>(is);"},
{"lineNum":"  642","line":"                    if (is.Peek() != \'\\0\') {"},
{"lineNum":"  643","line":"                        // ... this is considered an error."},
{"lineNum":"  644","line":"                        HandleError(state_, is);"},
{"lineNum":"  645","line":"                        return false;"},
{"lineNum":"  646","line":"                    }"},
{"lineNum":"  647","line":"                }"},
{"lineNum":"  648","line":""},
{"lineNum":"  649","line":"                // Success! We are done!"},
{"lineNum":"  650","line":"                return true;"},
{"lineNum":"  651","line":"            }"},
{"lineNum":"  652","line":""},
{"lineNum":"  653","line":"            // Transition to the new state."},
{"lineNum":"  654","line":"            state_ = d;"},
{"lineNum":"  655","line":""},
{"lineNum":"  656","line":"            // If we parsed anything other than a delimiter, we invoked the handler, so we can return true now."},
{"lineNum":"  657","line":"            if (!IsIterativeParsingDelimiterState(n))"},
{"lineNum":"  658","line":"                return true;"},
{"lineNum":"  659","line":"        }"},
{"lineNum":"  660","line":""},
{"lineNum":"  661","line":"        // We reached the end of file."},
{"lineNum":"  662","line":"        stack_.Clear();"},
{"lineNum":"  663","line":""},
{"lineNum":"  664","line":"        if (state_ != IterativeParsingFinishState) {"},
{"lineNum":"  665","line":"            HandleError(state_, is);"},
{"lineNum":"  666","line":"            return false;"},
{"lineNum":"  667","line":"        }"},
{"lineNum":"  668","line":""},
{"lineNum":"  669","line":"        return true;"},
{"lineNum":"  670","line":"    }"},
{"lineNum":"  671","line":""},
{"lineNum":"  672","line":"    //! Check if token-by-token parsing JSON text is complete"},
{"lineNum":"  673","line":"    /*! \\return Whether the JSON has been fully decoded."},
{"lineNum":"  674","line":"     */"},
{"lineNum":"  675","line":"    CEREAL_RAPIDJSON_FORCEINLINE bool IterativeParseComplete() const {"},
{"lineNum":"  676","line":"        return IsIterativeParsingCompleteState(state_);"},
{"lineNum":"  677","line":"    }"},
{"lineNum":"  678","line":""},
{"lineNum":"  679","line":"    //! Whether a parse error has occurred in the last parsing."},
{"lineNum":"  680","line":"    bool HasParseError() const { return parseResult_.IsError(); }"},
{"lineNum":"  681","line":""},
{"lineNum":"  682","line":"    //! Get the \\ref ParseErrorCode of last parsing."},
{"lineNum":"  683","line":"    ParseErrorCode GetParseErrorCode() const { return parseResult_.Code(); }"},
{"lineNum":"  684","line":""},
{"lineNum":"  685","line":"    //! Get the position of last parsing error in input, 0 otherwise."},
{"lineNum":"  686","line":"    size_t GetErrorOffset() const { return parseResult_.Offset(); }"},
{"lineNum":"  687","line":""},
{"lineNum":"  688","line":"protected:"},
{"lineNum":"  689","line":"    void SetParseError(ParseErrorCode code, size_t offset) { parseResult_.Set(code, offset); }"},
{"lineNum":"  690","line":""},
{"lineNum":"  691","line":"private:"},
{"lineNum":"  692","line":"    // Prohibit copy constructor & assignment operator."},
{"lineNum":"  693","line":"    GenericReader(const GenericReader&);"},
{"lineNum":"  694","line":"    GenericReader& operator=(const GenericReader&);"},
{"lineNum":"  695","line":""},
{"lineNum":"  696","line":"    void ClearStack() { stack_.Clear(); }"},
{"lineNum":"  697","line":""},
{"lineNum":"  698","line":"    // clear stack on any exit from ParseStream, e.g. due to exception"},
{"lineNum":"  699","line":"    struct ClearStackOnExit {"},
{"lineNum":"  700","line":"        explicit ClearStackOnExit(GenericReader& r) : r_(r) {}"},
{"lineNum":"  701","line":"        ~ClearStackOnExit() { r_.ClearStack(); }"},
{"lineNum":"  702","line":"    private:"},
{"lineNum":"  703","line":"        GenericReader& r_;"},
{"lineNum":"  704","line":"        ClearStackOnExit(const ClearStackOnExit&);"},
{"lineNum":"  705","line":"        ClearStackOnExit& operator=(const ClearStackOnExit&);"},
{"lineNum":"  706","line":"    };"},
{"lineNum":"  707","line":""},
{"lineNum":"  708","line":"    template<unsigned parseFlags, typename InputStream>"},
{"lineNum":"  709","line":"    void SkipWhitespaceAndComments(InputStream& is) {"},
{"lineNum":"  710","line":"        SkipWhitespace(is);"},
{"lineNum":"  711","line":""},
{"lineNum":"  712","line":"        if (parseFlags & kParseCommentsFlag) {"},
{"lineNum":"  713","line":"            while (CEREAL_RAPIDJSON_UNLIKELY(Consume(is, \'/\'))) {"},
{"lineNum":"  714","line":"                if (Consume(is, \'*\')) {"},
{"lineNum":"  715","line":"                    while (true) {"},
{"lineNum":"  716","line":"                        if (CEREAL_RAPIDJSON_UNLIKELY(is.Peek() == \'\\0\'))"},
{"lineNum":"  717","line":"                            CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorUnspecificSyntaxError, is.Tell());"},
{"lineNum":"  718","line":"                        else if (Consume(is, \'*\')) {"},
{"lineNum":"  719","line":"                            if (Consume(is, \'/\'))"},
{"lineNum":"  720","line":"                                break;"},
{"lineNum":"  721","line":"                        }"},
{"lineNum":"  722","line":"                        else"},
{"lineNum":"  723","line":"                            is.Take();"},
{"lineNum":"  724","line":"                    }"},
{"lineNum":"  725","line":"                }"},
{"lineNum":"  726","line":"                else if (CEREAL_RAPIDJSON_LIKELY(Consume(is, \'/\')))"},
{"lineNum":"  727","line":"                    while (is.Peek() != \'\\0\' && is.Take() != \'\\n\') {}"},
{"lineNum":"  728","line":"                else"},
{"lineNum":"  729","line":"                    CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorUnspecificSyntaxError, is.Tell());"},
{"lineNum":"  730","line":""},
{"lineNum":"  731","line":"                SkipWhitespace(is);"},
{"lineNum":"  732","line":"            }"},
{"lineNum":"  733","line":"        }"},
{"lineNum":"  734","line":"    }"},
{"lineNum":"  735","line":""},
{"lineNum":"  736","line":"    // Parse object: { string : value, ... }"},
{"lineNum":"  737","line":"    template<unsigned parseFlags, typename InputStream, typename Handler>"},
{"lineNum":"  738","line":"    void ParseObject(InputStream& is, Handler& handler) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  739","line":"        CEREAL_RAPIDJSON_ASSERT(is.Peek() == \'{\');","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  740","line":"        is.Take();  // Skip \'{\'"},
{"lineNum":"  741","line":""},
{"lineNum":"  742","line":"        if (CEREAL_RAPIDJSON_UNLIKELY(!handler.StartObject()))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  743","line":"            CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorTermination, is.Tell());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  744","line":""},
{"lineNum":"  745","line":"        SkipWhitespaceAndComments<parseFlags>(is);"},
{"lineNum":"  746","line":"        CEREAL_RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  747","line":""},
{"lineNum":"  748","line":"        if (Consume(is, \'}\')) {"},
{"lineNum":"  749","line":"            if (CEREAL_RAPIDJSON_UNLIKELY(!handler.EndObject(0)))  // empty object","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  750","line":"                CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorTermination, is.Tell());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  751","line":"            return;"},
{"lineNum":"  752","line":"        }"},
{"lineNum":"  753","line":""},
{"lineNum":"  754","line":"        for (SizeType memberCount = 0;;) {"},
{"lineNum":"  755","line":"            if (CEREAL_RAPIDJSON_UNLIKELY(is.Peek() != \'\"\'))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  756","line":"                CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorObjectMissName, is.Tell());"},
{"lineNum":"  757","line":""},
{"lineNum":"  758","line":"            ParseString<parseFlags>(is, handler, true);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  759","line":"            CEREAL_RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID;"},
{"lineNum":"  760","line":""},
{"lineNum":"  761","line":"            SkipWhitespaceAndComments<parseFlags>(is);"},
{"lineNum":"  762","line":"            CEREAL_RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  763","line":""},
{"lineNum":"  764","line":"            if (CEREAL_RAPIDJSON_UNLIKELY(!Consume(is, \':\')))"},
{"lineNum":"  765","line":"                CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorObjectMissColon, is.Tell());"},
{"lineNum":"  766","line":""},
{"lineNum":"  767","line":"            SkipWhitespaceAndComments<parseFlags>(is);"},
{"lineNum":"  768","line":"            CEREAL_RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  769","line":""},
{"lineNum":"  770","line":"            ParseValue<parseFlags>(is, handler);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  771","line":"            CEREAL_RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID;"},
{"lineNum":"  772","line":""},
{"lineNum":"  773","line":"            SkipWhitespaceAndComments<parseFlags>(is);"},
{"lineNum":"  774","line":"            CEREAL_RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  775","line":""},
{"lineNum":"  776","line":"            ++memberCount;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  777","line":""},
{"lineNum":"  778","line":"            switch (is.Peek()) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  779","line":"                case \',\':"},
{"lineNum":"  780","line":"                    is.Take();"},
{"lineNum":"  781","line":"                    SkipWhitespaceAndComments<parseFlags>(is);"},
{"lineNum":"  782","line":"                    CEREAL_RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  783","line":"                    break;"},
{"lineNum":"  784","line":"                case \'}\':"},
{"lineNum":"  785","line":"                    is.Take();"},
{"lineNum":"  786","line":"                    if (CEREAL_RAPIDJSON_UNLIKELY(!handler.EndObject(memberCount)))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  787","line":"                        CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorTermination, is.Tell());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  788","line":"                    return;"},
{"lineNum":"  789","line":"                default:"},
{"lineNum":"  790","line":"                    CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorObjectMissCommaOrCurlyBracket, is.Tell()); break; // This useless break is only for making warning and coverage happy"},
{"lineNum":"  791","line":"            }"},
{"lineNum":"  792","line":""},
{"lineNum":"  793","line":"            if (parseFlags & kParseTrailingCommasFlag) {"},
{"lineNum":"  794","line":"                if (is.Peek() == \'}\') {"},
{"lineNum":"  795","line":"                    if (CEREAL_RAPIDJSON_UNLIKELY(!handler.EndObject(memberCount)))"},
{"lineNum":"  796","line":"                        CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorTermination, is.Tell());"},
{"lineNum":"  797","line":"                    is.Take();"},
{"lineNum":"  798","line":"                    return;"},
{"lineNum":"  799","line":"                }"},
{"lineNum":"  800","line":"            }"},
{"lineNum":"  801","line":"        }"},
{"lineNum":"  802","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  803","line":""},
{"lineNum":"  804","line":"    // Parse array: [ value, ... ]"},
{"lineNum":"  805","line":"    template<unsigned parseFlags, typename InputStream, typename Handler>"},
{"lineNum":"  806","line":"    void ParseArray(InputStream& is, Handler& handler) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  807","line":"        CEREAL_RAPIDJSON_ASSERT(is.Peek() == \'[\');","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  808","line":"        is.Take();  // Skip \'[\'"},
{"lineNum":"  809","line":""},
{"lineNum":"  810","line":"        if (CEREAL_RAPIDJSON_UNLIKELY(!handler.StartArray()))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  811","line":"            CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorTermination, is.Tell());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  812","line":""},
{"lineNum":"  813","line":"        SkipWhitespaceAndComments<parseFlags>(is);"},
{"lineNum":"  814","line":"        CEREAL_RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  815","line":""},
{"lineNum":"  816","line":"        if (Consume(is, \']\')) {"},
{"lineNum":"  817","line":"            if (CEREAL_RAPIDJSON_UNLIKELY(!handler.EndArray(0))) // empty array","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  818","line":"                CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorTermination, is.Tell());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  819","line":"            return;"},
{"lineNum":"  820","line":"        }"},
{"lineNum":"  821","line":""},
{"lineNum":"  822","line":"        for (SizeType elementCount = 0;;) {"},
{"lineNum":"  823","line":"            ParseValue<parseFlags>(is, handler);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  824","line":"            CEREAL_RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID;"},
{"lineNum":"  825","line":""},
{"lineNum":"  826","line":"            ++elementCount;"},
{"lineNum":"  827","line":"            SkipWhitespaceAndComments<parseFlags>(is);"},
{"lineNum":"  828","line":"            CEREAL_RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  829","line":""},
{"lineNum":"  830","line":"            if (Consume(is, \',\')) {"},
{"lineNum":"  831","line":"                SkipWhitespaceAndComments<parseFlags>(is);"},
{"lineNum":"  832","line":"                CEREAL_RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  833","line":"            }"},
{"lineNum":"  834","line":"            else if (Consume(is, \']\')) {"},
{"lineNum":"  835","line":"                if (CEREAL_RAPIDJSON_UNLIKELY(!handler.EndArray(elementCount)))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  836","line":"                    CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorTermination, is.Tell());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  837","line":"                return;"},
{"lineNum":"  838","line":"            }"},
{"lineNum":"  839","line":"            else"},
{"lineNum":"  840","line":"                CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorArrayMissCommaOrSquareBracket, is.Tell());"},
{"lineNum":"  841","line":""},
{"lineNum":"  842","line":"            if (parseFlags & kParseTrailingCommasFlag) {"},
{"lineNum":"  843","line":"                if (is.Peek() == \']\') {"},
{"lineNum":"  844","line":"                    if (CEREAL_RAPIDJSON_UNLIKELY(!handler.EndArray(elementCount)))"},
{"lineNum":"  845","line":"                        CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorTermination, is.Tell());"},
{"lineNum":"  846","line":"                    is.Take();"},
{"lineNum":"  847","line":"                    return;"},
{"lineNum":"  848","line":"                }"},
{"lineNum":"  849","line":"            }"},
{"lineNum":"  850","line":"        }"},
{"lineNum":"  851","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  852","line":""},
{"lineNum":"  853","line":"    template<unsigned parseFlags, typename InputStream, typename Handler>"},
{"lineNum":"  854","line":"    void ParseNull(InputStream& is, Handler& handler) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  855","line":"        CEREAL_RAPIDJSON_ASSERT(is.Peek() == \'n\');","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  856","line":"        is.Take();"},
{"lineNum":"  857","line":""},
{"lineNum":"  858","line":"        if (CEREAL_RAPIDJSON_LIKELY(Consume(is, \'u\') && Consume(is, \'l\') && Consume(is, \'l\'))) {"},
{"lineNum":"  859","line":"            if (CEREAL_RAPIDJSON_UNLIKELY(!handler.Null()))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  860","line":"                CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorTermination, is.Tell());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  861","line":"        }"},
{"lineNum":"  862","line":"        else"},
{"lineNum":"  863","line":"            CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorValueInvalid, is.Tell());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  864","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  865","line":""},
{"lineNum":"  866","line":"    template<unsigned parseFlags, typename InputStream, typename Handler>"},
{"lineNum":"  867","line":"    void ParseTrue(InputStream& is, Handler& handler) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  868","line":"        CEREAL_RAPIDJSON_ASSERT(is.Peek() == \'t\');","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  869","line":"        is.Take();"},
{"lineNum":"  870","line":""},
{"lineNum":"  871","line":"        if (CEREAL_RAPIDJSON_LIKELY(Consume(is, \'r\') && Consume(is, \'u\') && Consume(is, \'e\'))) {"},
{"lineNum":"  872","line":"            if (CEREAL_RAPIDJSON_UNLIKELY(!handler.Bool(true)))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  873","line":"                CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorTermination, is.Tell());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  874","line":"        }"},
{"lineNum":"  875","line":"        else"},
{"lineNum":"  876","line":"            CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorValueInvalid, is.Tell());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  877","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  878","line":""},
{"lineNum":"  879","line":"    template<unsigned parseFlags, typename InputStream, typename Handler>"},
{"lineNum":"  880","line":"    void ParseFalse(InputStream& is, Handler& handler) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  881","line":"        CEREAL_RAPIDJSON_ASSERT(is.Peek() == \'f\');","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  882","line":"        is.Take();"},
{"lineNum":"  883","line":""},
{"lineNum":"  884","line":"        if (CEREAL_RAPIDJSON_LIKELY(Consume(is, \'a\') && Consume(is, \'l\') && Consume(is, \'s\') && Consume(is, \'e\'))) {"},
{"lineNum":"  885","line":"            if (CEREAL_RAPIDJSON_UNLIKELY(!handler.Bool(false)))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  886","line":"                CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorTermination, is.Tell());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  887","line":"        }"},
{"lineNum":"  888","line":"        else"},
{"lineNum":"  889","line":"            CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorValueInvalid, is.Tell());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  890","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  891","line":""},
{"lineNum":"  892","line":"    template<typename InputStream>"},
{"lineNum":"  893","line":"    CEREAL_RAPIDJSON_FORCEINLINE static bool Consume(InputStream& is, typename InputStream::Ch expect) {"},
{"lineNum":"  894","line":"        if (CEREAL_RAPIDJSON_LIKELY(is.Peek() == expect)) {","class":"lineNoCov","hits":"0","possible_hits":"39",},
{"lineNum":"  895","line":"            is.Take();"},
{"lineNum":"  896","line":"            return true;"},
{"lineNum":"  897","line":"        }"},
{"lineNum":"  898","line":"        else"},
{"lineNum":"  899","line":"            return false;"},
{"lineNum":"  900","line":"    }"},
{"lineNum":"  901","line":""},
{"lineNum":"  902","line":"    // Helper function to parse four hexadecimal digits in \\uXXXX in ParseString()."},
{"lineNum":"  903","line":"    template<typename InputStream>"},
{"lineNum":"  904","line":"    unsigned ParseHex4(InputStream& is, size_t escapeOffset) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  905","line":"        unsigned codepoint = 0;"},
{"lineNum":"  906","line":"        for (int i = 0; i < 4; i++) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  907","line":"            Ch c = is.Peek();"},
{"lineNum":"  908","line":"            codepoint <<= 4;"},
{"lineNum":"  909","line":"            codepoint += static_cast<unsigned>(c);"},
{"lineNum":"  910","line":"            if (c >= \'0\' && c <= \'9\')","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  911","line":"                codepoint -= \'0\';"},
{"lineNum":"  912","line":"            else if (c >= \'A\' && c <= \'F\')","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  913","line":"                codepoint -= \'A\' - 10;"},
{"lineNum":"  914","line":"            else if (c >= \'a\' && c <= \'f\')","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  915","line":"                codepoint -= \'a\' - 10;"},
{"lineNum":"  916","line":"            else {"},
{"lineNum":"  917","line":"                CEREAL_RAPIDJSON_PARSE_ERROR_NORETURN(kParseErrorStringUnicodeEscapeInvalidHex, escapeOffset);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  918","line":"                CEREAL_RAPIDJSON_PARSE_ERROR_EARLY_RETURN(0);"},
{"lineNum":"  919","line":"            }"},
{"lineNum":"  920","line":"            is.Take();"},
{"lineNum":"  921","line":"        }"},
{"lineNum":"  922","line":"        return codepoint;"},
{"lineNum":"  923","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  924","line":""},
{"lineNum":"  925","line":"    template <typename CharType>"},
{"lineNum":"  926","line":"    class StackStream {"},
{"lineNum":"  927","line":"    public:"},
{"lineNum":"  928","line":"        typedef CharType Ch;"},
{"lineNum":"  929","line":""},
{"lineNum":"  930","line":"        StackStream(internal::Stack<StackAllocator>& stack) : stack_(stack), length_(0) {}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  931","line":"        CEREAL_RAPIDJSON_FORCEINLINE void Put(Ch c) {"},
{"lineNum":"  932","line":"            *stack_.template Push<Ch>() = c;","class":"lineNoCov","hits":"0","possible_hits":"45",},
{"lineNum":"  933","line":"            ++length_;","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":"  934","line":"        }"},
{"lineNum":"  935","line":""},
{"lineNum":"  936","line":"        CEREAL_RAPIDJSON_FORCEINLINE void* Push(SizeType count) {"},
{"lineNum":"  937","line":"            length_ += count;"},
{"lineNum":"  938","line":"            return stack_.template Push<Ch>(count);"},
{"lineNum":"  939","line":"        }"},
{"lineNum":"  940","line":""},
{"lineNum":"  941","line":"        size_t Length() const { return length_; }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  942","line":""},
{"lineNum":"  943","line":"        Ch* Pop() {"},
{"lineNum":"  944","line":"            return stack_.template Pop<Ch>(length_);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  945","line":"        }"},
{"lineNum":"  946","line":""},
{"lineNum":"  947","line":"    private:"},
{"lineNum":"  948","line":"        StackStream(const StackStream&);"},
{"lineNum":"  949","line":"        StackStream& operator=(const StackStream&);"},
{"lineNum":"  950","line":""},
{"lineNum":"  951","line":"        internal::Stack<StackAllocator>& stack_;"},
{"lineNum":"  952","line":"        SizeType length_;"},
{"lineNum":"  953","line":"    };"},
{"lineNum":"  954","line":""},
{"lineNum":"  955","line":"    // Parse string and generate String event. Different code paths for kParseInsituFlag."},
{"lineNum":"  956","line":"    template<unsigned parseFlags, typename InputStream, typename Handler>"},
{"lineNum":"  957","line":"    void ParseString(InputStream& is, Handler& handler, bool isKey = false) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  958","line":"        internal::StreamLocalCopy<InputStream> copy(is);"},
{"lineNum":"  959","line":"        InputStream& s(copy.s);"},
{"lineNum":"  960","line":""},
{"lineNum":"  961","line":"        CEREAL_RAPIDJSON_ASSERT(s.Peek() == \'\\\"\');","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  962","line":"        s.Take();  // Skip \'\\\"\'"},
{"lineNum":"  963","line":""},
{"lineNum":"  964","line":"        bool success = false;"},
{"lineNum":"  965","line":"        if (parseFlags & kParseInsituFlag) {"},
{"lineNum":"  966","line":"            typename InputStream::Ch *head = s.PutBegin();"},
{"lineNum":"  967","line":"            ParseStringToStream<parseFlags, SourceEncoding, SourceEncoding>(s, s);"},
{"lineNum":"  968","line":"            CEREAL_RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID;"},
{"lineNum":"  969","line":"            size_t length = s.PutEnd(head) - 1;"},
{"lineNum":"  970","line":"            CEREAL_RAPIDJSON_ASSERT(length <= 0xFFFFFFFF);"},
{"lineNum":"  971","line":"            const typename TargetEncoding::Ch* const str = reinterpret_cast<typename TargetEncoding::Ch*>(head);"},
{"lineNum":"  972","line":"            success = (isKey ? handler.Key(str, SizeType(length), false) : handler.String(str, SizeType(length), false));"},
{"lineNum":"  973","line":"        }"},
{"lineNum":"  974","line":"        else {"},
{"lineNum":"  975","line":"            StackStream<typename TargetEncoding::Ch> stackStream(stack_);"},
{"lineNum":"  976","line":"            ParseStringToStream<parseFlags, SourceEncoding, TargetEncoding>(s, stackStream);"},
{"lineNum":"  977","line":"            CEREAL_RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  978","line":"            SizeType length = static_cast<SizeType>(stackStream.Length()) - 1;"},
{"lineNum":"  979","line":"            const typename TargetEncoding::Ch* const str = stackStream.Pop();"},
{"lineNum":"  980","line":"            success = (isKey ? handler.Key(str, length, true) : handler.String(str, length, true));"},
{"lineNum":"  981","line":"        }"},
{"lineNum":"  982","line":"        if (CEREAL_RAPIDJSON_UNLIKELY(!success))"},
{"lineNum":"  983","line":"            CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorTermination, s.Tell());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  984","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  985","line":""},
{"lineNum":"  986","line":"    // Parse string to an output is"},
{"lineNum":"  987","line":"    // This function handles the prefix/suffix double quotes, escaping, and optional encoding validation."},
{"lineNum":"  988","line":"    template<unsigned parseFlags, typename SEncoding, typename TEncoding, typename InputStream, typename OutputStream>"},
{"lineNum":"  989","line":"    CEREAL_RAPIDJSON_FORCEINLINE void ParseStringToStream(InputStream& is, OutputStream& os) {"},
{"lineNum":"  990","line":"//!@cond CEREAL_RAPIDJSON_HIDDEN_FROM_DOXYGEN"},
{"lineNum":"  991","line":"#define Z16 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"},
{"lineNum":"  992","line":"        static const char escape[256] = {"},
{"lineNum":"  993","line":"            Z16, Z16, 0, 0,\'\\\"\', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\'/\',"},
{"lineNum":"  994","line":"            Z16, Z16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\'\\\\\', 0, 0, 0,"},
{"lineNum":"  995","line":"            0, 0,\'\\b\', 0, 0, 0,\'\\f\', 0, 0, 0, 0, 0, 0, 0,\'\\n\', 0,"},
{"lineNum":"  996","line":"            0, 0,\'\\r\', 0,\'\\t\', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"},
{"lineNum":"  997","line":"            Z16, Z16, Z16, Z16, Z16, Z16, Z16, Z16"},
{"lineNum":"  998","line":"        };"},
{"lineNum":"  999","line":"#undef Z16"},
{"lineNum":" 1000","line":"//!@endcond"},
{"lineNum":" 1001","line":""},
{"lineNum":" 1002","line":"        for (;;) {"},
{"lineNum":" 1003","line":"            // Scan and copy string before \"\\\\\\\"\" or < 0x20. This is an optional optimzation."},
{"lineNum":" 1004","line":"            if (!(parseFlags & kParseValidateEncodingFlag))"},
{"lineNum":" 1005","line":"                ScanCopyUnescapedString(is, os);"},
{"lineNum":" 1006","line":""},
{"lineNum":" 1007","line":"            Ch c = is.Peek();"},
{"lineNum":" 1008","line":"            if (CEREAL_RAPIDJSON_UNLIKELY(c == \'\\\\\')) {    // Escape","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1009","line":"                size_t escapeOffset = is.Tell();    // For invalid escaping, report the initial \'\\\\\' as error offset"},
{"lineNum":" 1010","line":"                is.Take();"},
{"lineNum":" 1011","line":"                Ch e = is.Peek();"},
{"lineNum":" 1012","line":"                if ((sizeof(Ch) == 1 || unsigned(e) < 256) && CEREAL_RAPIDJSON_LIKELY(escape[static_cast<unsigned char>(e)])) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1013","line":"                    is.Take();"},
{"lineNum":" 1014","line":"                    os.Put(static_cast<typename TEncoding::Ch>(escape[static_cast<unsigned char>(e)]));"},
{"lineNum":" 1015","line":"                }"},
{"lineNum":" 1016","line":"                else if (CEREAL_RAPIDJSON_LIKELY(e == \'u\')) {    // Unicode","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1017","line":"                    is.Take();"},
{"lineNum":" 1018","line":"                    unsigned codepoint = ParseHex4(is, escapeOffset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1019","line":"                    CEREAL_RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1020","line":"                    if (CEREAL_RAPIDJSON_UNLIKELY(codepoint >= 0xD800 && codepoint <= 0xDBFF)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1021","line":"                        // Handle UTF-16 surrogate pair"},
{"lineNum":" 1022","line":"                        if (CEREAL_RAPIDJSON_UNLIKELY(!Consume(is, \'\\\\\') || !Consume(is, \'u\')))"},
{"lineNum":" 1023","line":"                            CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorStringUnicodeSurrogateInvalid, escapeOffset);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1024","line":"                        unsigned codepoint2 = ParseHex4(is, escapeOffset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1025","line":"                        CEREAL_RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1026","line":"                        if (CEREAL_RAPIDJSON_UNLIKELY(codepoint2 < 0xDC00 || codepoint2 > 0xDFFF))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1027","line":"                            CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorStringUnicodeSurrogateInvalid, escapeOffset);"},
{"lineNum":" 1028","line":"                        codepoint = (((codepoint - 0xD800) << 10) | (codepoint2 - 0xDC00)) + 0x10000;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1029","line":"                    }"},
{"lineNum":" 1030","line":"                    TEncoding::Encode(os, codepoint);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1031","line":"                }"},
{"lineNum":" 1032","line":"                else"},
{"lineNum":" 1033","line":"                    CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorStringEscapeInvalid, escapeOffset);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1034","line":"            }"},
{"lineNum":" 1035","line":"            else if (CEREAL_RAPIDJSON_UNLIKELY(c == \'\"\')) {    // Closing double quote"},
{"lineNum":" 1036","line":"                is.Take();"},
{"lineNum":" 1037","line":"                os.Put(\'\\0\');   // null-terminate the string"},
{"lineNum":" 1038","line":"                return;"},
{"lineNum":" 1039","line":"            }"},
{"lineNum":" 1040","line":"            else if (CEREAL_RAPIDJSON_UNLIKELY(static_cast<unsigned>(c) < 0x20)) { // RFC 4627: unescaped = %x20-21 / %x23-5B / %x5D-10FFFF","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1041","line":"                if (c == \'\\0\')","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1042","line":"                    CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorStringMissQuotationMark, is.Tell());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1043","line":"                else"},
{"lineNum":" 1044","line":"                    CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorStringInvalidEncoding, is.Tell());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1045","line":"            }"},
{"lineNum":" 1046","line":"            else {"},
{"lineNum":" 1047","line":"                size_t offset = is.Tell();"},
{"lineNum":" 1048","line":"                if (CEREAL_RAPIDJSON_UNLIKELY((parseFlags & kParseValidateEncodingFlag ?"},
{"lineNum":" 1049","line":"                    !Transcoder<SEncoding, TEncoding>::Validate(is, os) :"},
{"lineNum":" 1050","line":"                    !Transcoder<SEncoding, TEncoding>::Transcode(is, os))))"},
{"lineNum":" 1051","line":"                    CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorStringInvalidEncoding, offset);"},
{"lineNum":" 1052","line":"            }"},
{"lineNum":" 1053","line":"        }"},
{"lineNum":" 1054","line":"    }"},
{"lineNum":" 1055","line":""},
{"lineNum":" 1056","line":"    template<typename InputStream, typename OutputStream>"},
{"lineNum":" 1057","line":"    static CEREAL_RAPIDJSON_FORCEINLINE void ScanCopyUnescapedString(InputStream&, OutputStream&) {"},
{"lineNum":" 1058","line":"            // Do nothing for generic version"},
{"lineNum":" 1059","line":"    }"},
{"lineNum":" 1060","line":""},
{"lineNum":" 1061","line":"#if defined(CEREAL_RAPIDJSON_SSE2) || defined(CEREAL_RAPIDJSON_SSE42)"},
{"lineNum":" 1062","line":"    // StringStream -> StackStream<char>"},
{"lineNum":" 1063","line":"    static CEREAL_RAPIDJSON_FORCEINLINE void ScanCopyUnescapedString(StringStream& is, StackStream<char>& os) {"},
{"lineNum":" 1064","line":"        const char* p = is.src_;"},
{"lineNum":" 1065","line":""},
{"lineNum":" 1066","line":"        // Scan one by one until alignment (unaligned load may cross page boundary and cause crash)"},
{"lineNum":" 1067","line":"        const char* nextAligned = reinterpret_cast<const char*>((reinterpret_cast<size_t>(p) + 15) & static_cast<size_t>(~15));"},
{"lineNum":" 1068","line":"        while (p != nextAligned)"},
{"lineNum":" 1069","line":"            if (CEREAL_RAPIDJSON_UNLIKELY(*p == \'\\\"\') || CEREAL_RAPIDJSON_UNLIKELY(*p == \'\\\\\') || CEREAL_RAPIDJSON_UNLIKELY(static_cast<unsigned>(*p) < 0x20)) {"},
{"lineNum":" 1070","line":"                is.src_ = p;"},
{"lineNum":" 1071","line":"                return;"},
{"lineNum":" 1072","line":"            }"},
{"lineNum":" 1073","line":"            else"},
{"lineNum":" 1074","line":"                os.Put(*p++);"},
{"lineNum":" 1075","line":""},
{"lineNum":" 1076","line":"        // The rest of string using SIMD"},
{"lineNum":" 1077","line":"        static const char dquote[16] = { \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\' };"},
{"lineNum":" 1078","line":"        static const char bslash[16] = { \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\' };"},
{"lineNum":" 1079","line":"        static const char space[16]  = { 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F };"},
{"lineNum":" 1080","line":"        const __m128i dq = _mm_loadu_si128(reinterpret_cast<const __m128i *>(&dquote[0]));"},
{"lineNum":" 1081","line":"        const __m128i bs = _mm_loadu_si128(reinterpret_cast<const __m128i *>(&bslash[0]));"},
{"lineNum":" 1082","line":"        const __m128i sp = _mm_loadu_si128(reinterpret_cast<const __m128i *>(&space[0]));"},
{"lineNum":" 1083","line":""},
{"lineNum":" 1084","line":"        for (;; p += 16) {"},
{"lineNum":" 1085","line":"            const __m128i s = _mm_load_si128(reinterpret_cast<const __m128i *>(p));"},
{"lineNum":" 1086","line":"            const __m128i t1 = _mm_cmpeq_epi8(s, dq);"},
{"lineNum":" 1087","line":"            const __m128i t2 = _mm_cmpeq_epi8(s, bs);"},
{"lineNum":" 1088","line":"            const __m128i t3 = _mm_cmpeq_epi8(_mm_max_epu8(s, sp), sp); // s < 0x20 <=> max(s, 0x1F) == 0x1F"},
{"lineNum":" 1089","line":"            const __m128i x = _mm_or_si128(_mm_or_si128(t1, t2), t3);"},
{"lineNum":" 1090","line":"            unsigned short r = static_cast<unsigned short>(_mm_movemask_epi8(x));"},
{"lineNum":" 1091","line":"            if (CEREAL_RAPIDJSON_UNLIKELY(r != 0)) {   // some of characters is escaped"},
{"lineNum":" 1092","line":"                SizeType length;"},
{"lineNum":" 1093","line":"    #ifdef _MSC_VER         // Find the index of first escaped"},
{"lineNum":" 1094","line":"                unsigned long offset;"},
{"lineNum":" 1095","line":"                _BitScanForward(&offset, r);"},
{"lineNum":" 1096","line":"                length = offset;"},
{"lineNum":" 1097","line":"    #else"},
{"lineNum":" 1098","line":"                length = static_cast<SizeType>(__builtin_ffs(r) - 1);"},
{"lineNum":" 1099","line":"    #endif"},
{"lineNum":" 1100","line":"                if (length != 0) {"},
{"lineNum":" 1101","line":"                    char* q = reinterpret_cast<char*>(os.Push(length));"},
{"lineNum":" 1102","line":"                    for (size_t i = 0; i < length; i++)"},
{"lineNum":" 1103","line":"                        q[i] = p[i];"},
{"lineNum":" 1104","line":""},
{"lineNum":" 1105","line":"                    p += length;"},
{"lineNum":" 1106","line":"                }"},
{"lineNum":" 1107","line":"                break;"},
{"lineNum":" 1108","line":"            }"},
{"lineNum":" 1109","line":"            _mm_storeu_si128(reinterpret_cast<__m128i *>(os.Push(16)), s);"},
{"lineNum":" 1110","line":"        }"},
{"lineNum":" 1111","line":""},
{"lineNum":" 1112","line":"        is.src_ = p;"},
{"lineNum":" 1113","line":"    }"},
{"lineNum":" 1114","line":""},
{"lineNum":" 1115","line":"    // InsituStringStream -> InsituStringStream"},
{"lineNum":" 1116","line":"    static CEREAL_RAPIDJSON_FORCEINLINE void ScanCopyUnescapedString(InsituStringStream& is, InsituStringStream& os) {"},
{"lineNum":" 1117","line":"        CEREAL_RAPIDJSON_ASSERT(&is == &os);"},
{"lineNum":" 1118","line":"        (void)os;"},
{"lineNum":" 1119","line":""},
{"lineNum":" 1120","line":"        if (is.src_ == is.dst_) {"},
{"lineNum":" 1121","line":"            SkipUnescapedString(is);"},
{"lineNum":" 1122","line":"            return;"},
{"lineNum":" 1123","line":"        }"},
{"lineNum":" 1124","line":""},
{"lineNum":" 1125","line":"        char* p = is.src_;"},
{"lineNum":" 1126","line":"        char *q = is.dst_;"},
{"lineNum":" 1127","line":""},
{"lineNum":" 1128","line":"        // Scan one by one until alignment (unaligned load may cross page boundary and cause crash)"},
{"lineNum":" 1129","line":"        const char* nextAligned = reinterpret_cast<const char*>((reinterpret_cast<size_t>(p) + 15) & static_cast<size_t>(~15));"},
{"lineNum":" 1130","line":"        while (p != nextAligned)"},
{"lineNum":" 1131","line":"            if (CEREAL_RAPIDJSON_UNLIKELY(*p == \'\\\"\') || CEREAL_RAPIDJSON_UNLIKELY(*p == \'\\\\\') || CEREAL_RAPIDJSON_UNLIKELY(static_cast<unsigned>(*p) < 0x20)) {"},
{"lineNum":" 1132","line":"                is.src_ = p;"},
{"lineNum":" 1133","line":"                is.dst_ = q;"},
{"lineNum":" 1134","line":"                return;"},
{"lineNum":" 1135","line":"            }"},
{"lineNum":" 1136","line":"            else"},
{"lineNum":" 1137","line":"                *q++ = *p++;"},
{"lineNum":" 1138","line":""},
{"lineNum":" 1139","line":"        // The rest of string using SIMD"},
{"lineNum":" 1140","line":"        static const char dquote[16] = { \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\' };"},
{"lineNum":" 1141","line":"        static const char bslash[16] = { \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\' };"},
{"lineNum":" 1142","line":"        static const char space[16] = { 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F };"},
{"lineNum":" 1143","line":"        const __m128i dq = _mm_loadu_si128(reinterpret_cast<const __m128i *>(&dquote[0]));"},
{"lineNum":" 1144","line":"        const __m128i bs = _mm_loadu_si128(reinterpret_cast<const __m128i *>(&bslash[0]));"},
{"lineNum":" 1145","line":"        const __m128i sp = _mm_loadu_si128(reinterpret_cast<const __m128i *>(&space[0]));"},
{"lineNum":" 1146","line":""},
{"lineNum":" 1147","line":"        for (;; p += 16, q += 16) {"},
{"lineNum":" 1148","line":"            const __m128i s = _mm_load_si128(reinterpret_cast<const __m128i *>(p));"},
{"lineNum":" 1149","line":"            const __m128i t1 = _mm_cmpeq_epi8(s, dq);"},
{"lineNum":" 1150","line":"            const __m128i t2 = _mm_cmpeq_epi8(s, bs);"},
{"lineNum":" 1151","line":"            const __m128i t3 = _mm_cmpeq_epi8(_mm_max_epu8(s, sp), sp); // s < 0x20 <=> max(s, 0x1F) == 0x1F"},
{"lineNum":" 1152","line":"            const __m128i x = _mm_or_si128(_mm_or_si128(t1, t2), t3);"},
{"lineNum":" 1153","line":"            unsigned short r = static_cast<unsigned short>(_mm_movemask_epi8(x));"},
{"lineNum":" 1154","line":"            if (CEREAL_RAPIDJSON_UNLIKELY(r != 0)) {   // some of characters is escaped"},
{"lineNum":" 1155","line":"                size_t length;"},
{"lineNum":" 1156","line":"#ifdef _MSC_VER         // Find the index of first escaped"},
{"lineNum":" 1157","line":"                unsigned long offset;"},
{"lineNum":" 1158","line":"                _BitScanForward(&offset, r);"},
{"lineNum":" 1159","line":"                length = offset;"},
{"lineNum":" 1160","line":"#else"},
{"lineNum":" 1161","line":"                length = static_cast<size_t>(__builtin_ffs(r) - 1);"},
{"lineNum":" 1162","line":"#endif"},
{"lineNum":" 1163","line":"                for (const char* pend = p + length; p != pend; )"},
{"lineNum":" 1164","line":"                    *q++ = *p++;"},
{"lineNum":" 1165","line":"                break;"},
{"lineNum":" 1166","line":"            }"},
{"lineNum":" 1167","line":"            _mm_storeu_si128(reinterpret_cast<__m128i *>(q), s);"},
{"lineNum":" 1168","line":"        }"},
{"lineNum":" 1169","line":""},
{"lineNum":" 1170","line":"        is.src_ = p;"},
{"lineNum":" 1171","line":"        is.dst_ = q;"},
{"lineNum":" 1172","line":"    }"},
{"lineNum":" 1173","line":""},
{"lineNum":" 1174","line":"    // When read/write pointers are the same for insitu stream, just skip unescaped characters"},
{"lineNum":" 1175","line":"    static CEREAL_RAPIDJSON_FORCEINLINE void SkipUnescapedString(InsituStringStream& is) {"},
{"lineNum":" 1176","line":"        CEREAL_RAPIDJSON_ASSERT(is.src_ == is.dst_);"},
{"lineNum":" 1177","line":"        char* p = is.src_;"},
{"lineNum":" 1178","line":""},
{"lineNum":" 1179","line":"        // Scan one by one until alignment (unaligned load may cross page boundary and cause crash)"},
{"lineNum":" 1180","line":"        const char* nextAligned = reinterpret_cast<const char*>((reinterpret_cast<size_t>(p) + 15) & static_cast<size_t>(~15));"},
{"lineNum":" 1181","line":"        for (; p != nextAligned; p++)"},
{"lineNum":" 1182","line":"            if (CEREAL_RAPIDJSON_UNLIKELY(*p == \'\\\"\') || CEREAL_RAPIDJSON_UNLIKELY(*p == \'\\\\\') || CEREAL_RAPIDJSON_UNLIKELY(static_cast<unsigned>(*p) < 0x20)) {"},
{"lineNum":" 1183","line":"                is.src_ = is.dst_ = p;"},
{"lineNum":" 1184","line":"                return;"},
{"lineNum":" 1185","line":"            }"},
{"lineNum":" 1186","line":""},
{"lineNum":" 1187","line":"        // The rest of string using SIMD"},
{"lineNum":" 1188","line":"        static const char dquote[16] = { \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\' };"},
{"lineNum":" 1189","line":"        static const char bslash[16] = { \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\' };"},
{"lineNum":" 1190","line":"        static const char space[16] = { 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F };"},
{"lineNum":" 1191","line":"        const __m128i dq = _mm_loadu_si128(reinterpret_cast<const __m128i *>(&dquote[0]));"},
{"lineNum":" 1192","line":"        const __m128i bs = _mm_loadu_si128(reinterpret_cast<const __m128i *>(&bslash[0]));"},
{"lineNum":" 1193","line":"        const __m128i sp = _mm_loadu_si128(reinterpret_cast<const __m128i *>(&space[0]));"},
{"lineNum":" 1194","line":""},
{"lineNum":" 1195","line":"        for (;; p += 16) {"},
{"lineNum":" 1196","line":"            const __m128i s = _mm_load_si128(reinterpret_cast<const __m128i *>(p));"},
{"lineNum":" 1197","line":"            const __m128i t1 = _mm_cmpeq_epi8(s, dq);"},
{"lineNum":" 1198","line":"            const __m128i t2 = _mm_cmpeq_epi8(s, bs);"},
{"lineNum":" 1199","line":"            const __m128i t3 = _mm_cmpeq_epi8(_mm_max_epu8(s, sp), sp); // s < 0x20 <=> max(s, 0x1F) == 0x1F"},
{"lineNum":" 1200","line":"            const __m128i x = _mm_or_si128(_mm_or_si128(t1, t2), t3);"},
{"lineNum":" 1201","line":"            unsigned short r = static_cast<unsigned short>(_mm_movemask_epi8(x));"},
{"lineNum":" 1202","line":"            if (CEREAL_RAPIDJSON_UNLIKELY(r != 0)) {   // some of characters is escaped"},
{"lineNum":" 1203","line":"                size_t length;"},
{"lineNum":" 1204","line":"#ifdef _MSC_VER         // Find the index of first escaped"},
{"lineNum":" 1205","line":"                unsigned long offset;"},
{"lineNum":" 1206","line":"                _BitScanForward(&offset, r);"},
{"lineNum":" 1207","line":"                length = offset;"},
{"lineNum":" 1208","line":"#else"},
{"lineNum":" 1209","line":"                length = static_cast<size_t>(__builtin_ffs(r) - 1);"},
{"lineNum":" 1210","line":"#endif"},
{"lineNum":" 1211","line":"                p += length;"},
{"lineNum":" 1212","line":"                break;"},
{"lineNum":" 1213","line":"            }"},
{"lineNum":" 1214","line":"        }"},
{"lineNum":" 1215","line":""},
{"lineNum":" 1216","line":"        is.src_ = is.dst_ = p;"},
{"lineNum":" 1217","line":"    }"},
{"lineNum":" 1218","line":"#elif defined(CEREAL_RAPIDJSON_NEON)"},
{"lineNum":" 1219","line":"    // StringStream -> StackStream<char>"},
{"lineNum":" 1220","line":"    static CEREAL_RAPIDJSON_FORCEINLINE void ScanCopyUnescapedString(StringStream& is, StackStream<char>& os) {"},
{"lineNum":" 1221","line":"        const char* p = is.src_;"},
{"lineNum":" 1222","line":""},
{"lineNum":" 1223","line":"        // Scan one by one until alignment (unaligned load may cross page boundary and cause crash)"},
{"lineNum":" 1224","line":"        const char* nextAligned = reinterpret_cast<const char*>((reinterpret_cast<size_t>(p) + 15) & static_cast<size_t>(~15));"},
{"lineNum":" 1225","line":"        while (p != nextAligned)"},
{"lineNum":" 1226","line":"            if (CEREAL_RAPIDJSON_UNLIKELY(*p == \'\\\"\') || CEREAL_RAPIDJSON_UNLIKELY(*p == \'\\\\\') || CEREAL_RAPIDJSON_UNLIKELY(static_cast<unsigned>(*p) < 0x20)) {"},
{"lineNum":" 1227","line":"                is.src_ = p;"},
{"lineNum":" 1228","line":"                return;"},
{"lineNum":" 1229","line":"            }"},
{"lineNum":" 1230","line":"            else"},
{"lineNum":" 1231","line":"                os.Put(*p++);"},
{"lineNum":" 1232","line":""},
{"lineNum":" 1233","line":"        // The rest of string using SIMD"},
{"lineNum":" 1234","line":"        const uint8x16_t s0 = vmovq_n_u8(\'\"\');"},
{"lineNum":" 1235","line":"        const uint8x16_t s1 = vmovq_n_u8(\'\\\\\');"},
{"lineNum":" 1236","line":"        const uint8x16_t s2 = vmovq_n_u8(\'\\b\');"},
{"lineNum":" 1237","line":"        const uint8x16_t s3 = vmovq_n_u8(32);"},
{"lineNum":" 1238","line":""},
{"lineNum":" 1239","line":"        for (;; p += 16) {"},
{"lineNum":" 1240","line":"            const uint8x16_t s = vld1q_u8(reinterpret_cast<const uint8_t *>(p));"},
{"lineNum":" 1241","line":"            uint8x16_t x = vceqq_u8(s, s0);"},
{"lineNum":" 1242","line":"            x = vorrq_u8(x, vceqq_u8(s, s1));"},
{"lineNum":" 1243","line":"            x = vorrq_u8(x, vceqq_u8(s, s2));"},
{"lineNum":" 1244","line":"            x = vorrq_u8(x, vcltq_u8(s, s3));"},
{"lineNum":" 1245","line":""},
{"lineNum":" 1246","line":"            x = vrev64q_u8(x);                     // Rev in 64"},
{"lineNum":" 1247","line":"            uint64_t low = vgetq_lane_u64(reinterpret_cast<uint64x2_t>(x), 0);   // extract"},
{"lineNum":" 1248","line":"            uint64_t high = vgetq_lane_u64(reinterpret_cast<uint64x2_t>(x), 1);  // extract"},
{"lineNum":" 1249","line":""},
{"lineNum":" 1250","line":"            SizeType length = 0;"},
{"lineNum":" 1251","line":"            bool escaped = false;"},
{"lineNum":" 1252","line":"            if (low == 0) {"},
{"lineNum":" 1253","line":"                if (high != 0) {"},
{"lineNum":" 1254","line":"                    unsigned lz = (unsigned)__builtin_clzll(high);;"},
{"lineNum":" 1255","line":"                    length = 8 + (lz >> 3);"},
{"lineNum":" 1256","line":"                    escaped = true;"},
{"lineNum":" 1257","line":"                }"},
{"lineNum":" 1258","line":"            } else {"},
{"lineNum":" 1259","line":"                unsigned lz = (unsigned)__builtin_clzll(low);;"},
{"lineNum":" 1260","line":"                length = lz >> 3;"},
{"lineNum":" 1261","line":"                escaped = true;"},
{"lineNum":" 1262","line":"            }"},
{"lineNum":" 1263","line":"            if (CEREAL_RAPIDJSON_UNLIKELY(escaped)) {   // some of characters is escaped"},
{"lineNum":" 1264","line":"                if (length != 0) {"},
{"lineNum":" 1265","line":"                    char* q = reinterpret_cast<char*>(os.Push(length));"},
{"lineNum":" 1266","line":"                    for (size_t i = 0; i < length; i++)"},
{"lineNum":" 1267","line":"                        q[i] = p[i];"},
{"lineNum":" 1268","line":""},
{"lineNum":" 1269","line":"                    p += length;"},
{"lineNum":" 1270","line":"                }"},
{"lineNum":" 1271","line":"                break;"},
{"lineNum":" 1272","line":"            }"},
{"lineNum":" 1273","line":"            vst1q_u8(reinterpret_cast<uint8_t *>(os.Push(16)), s);"},
{"lineNum":" 1274","line":"        }"},
{"lineNum":" 1275","line":""},
{"lineNum":" 1276","line":"        is.src_ = p;"},
{"lineNum":" 1277","line":"    }"},
{"lineNum":" 1278","line":""},
{"lineNum":" 1279","line":"    // InsituStringStream -> InsituStringStream"},
{"lineNum":" 1280","line":"    static CEREAL_RAPIDJSON_FORCEINLINE void ScanCopyUnescapedString(InsituStringStream& is, InsituStringStream& os) {"},
{"lineNum":" 1281","line":"        CEREAL_RAPIDJSON_ASSERT(&is == &os);"},
{"lineNum":" 1282","line":"        (void)os;"},
{"lineNum":" 1283","line":""},
{"lineNum":" 1284","line":"        if (is.src_ == is.dst_) {"},
{"lineNum":" 1285","line":"            SkipUnescapedString(is);"},
{"lineNum":" 1286","line":"            return;"},
{"lineNum":" 1287","line":"        }"},
{"lineNum":" 1288","line":""},
{"lineNum":" 1289","line":"        char* p = is.src_;"},
{"lineNum":" 1290","line":"        char *q = is.dst_;"},
{"lineNum":" 1291","line":""},
{"lineNum":" 1292","line":"        // Scan one by one until alignment (unaligned load may cross page boundary and cause crash)"},
{"lineNum":" 1293","line":"        const char* nextAligned = reinterpret_cast<const char*>((reinterpret_cast<size_t>(p) + 15) & static_cast<size_t>(~15));"},
{"lineNum":" 1294","line":"        while (p != nextAligned)"},
{"lineNum":" 1295","line":"            if (CEREAL_RAPIDJSON_UNLIKELY(*p == \'\\\"\') || CEREAL_RAPIDJSON_UNLIKELY(*p == \'\\\\\') || CEREAL_RAPIDJSON_UNLIKELY(static_cast<unsigned>(*p) < 0x20)) {"},
{"lineNum":" 1296","line":"                is.src_ = p;"},
{"lineNum":" 1297","line":"                is.dst_ = q;"},
{"lineNum":" 1298","line":"                return;"},
{"lineNum":" 1299","line":"            }"},
{"lineNum":" 1300","line":"            else"},
{"lineNum":" 1301","line":"                *q++ = *p++;"},
{"lineNum":" 1302","line":""},
{"lineNum":" 1303","line":"        // The rest of string using SIMD"},
{"lineNum":" 1304","line":"        const uint8x16_t s0 = vmovq_n_u8(\'\"\');"},
{"lineNum":" 1305","line":"        const uint8x16_t s1 = vmovq_n_u8(\'\\\\\');"},
{"lineNum":" 1306","line":"        const uint8x16_t s2 = vmovq_n_u8(\'\\b\');"},
{"lineNum":" 1307","line":"        const uint8x16_t s3 = vmovq_n_u8(32);"},
{"lineNum":" 1308","line":""},
{"lineNum":" 1309","line":"        for (;; p += 16, q += 16) {"},
{"lineNum":" 1310","line":"            const uint8x16_t s = vld1q_u8(reinterpret_cast<uint8_t *>(p));"},
{"lineNum":" 1311","line":"            uint8x16_t x = vceqq_u8(s, s0);"},
{"lineNum":" 1312","line":"            x = vorrq_u8(x, vceqq_u8(s, s1));"},
{"lineNum":" 1313","line":"            x = vorrq_u8(x, vceqq_u8(s, s2));"},
{"lineNum":" 1314","line":"            x = vorrq_u8(x, vcltq_u8(s, s3));"},
{"lineNum":" 1315","line":""},
{"lineNum":" 1316","line":"            x = vrev64q_u8(x);                     // Rev in 64"},
{"lineNum":" 1317","line":"            uint64_t low = vgetq_lane_u64(reinterpret_cast<uint64x2_t>(x), 0);   // extract"},
{"lineNum":" 1318","line":"            uint64_t high = vgetq_lane_u64(reinterpret_cast<uint64x2_t>(x), 1);  // extract"},
{"lineNum":" 1319","line":""},
{"lineNum":" 1320","line":"            SizeType length = 0;"},
{"lineNum":" 1321","line":"            bool escaped = false;"},
{"lineNum":" 1322","line":"            if (low == 0) {"},
{"lineNum":" 1323","line":"                if (high != 0) {"},
{"lineNum":" 1324","line":"                    unsigned lz = (unsigned)__builtin_clzll(high);"},
{"lineNum":" 1325","line":"                    length = 8 + (lz >> 3);"},
{"lineNum":" 1326","line":"                    escaped = true;"},
{"lineNum":" 1327","line":"                }"},
{"lineNum":" 1328","line":"            } else {"},
{"lineNum":" 1329","line":"                unsigned lz = (unsigned)__builtin_clzll(low);"},
{"lineNum":" 1330","line":"                length = lz >> 3;"},
{"lineNum":" 1331","line":"                escaped = true;"},
{"lineNum":" 1332","line":"            }"},
{"lineNum":" 1333","line":"            if (CEREAL_RAPIDJSON_UNLIKELY(escaped)) {   // some of characters is escaped"},
{"lineNum":" 1334","line":"                for (const char* pend = p + length; p != pend; ) {"},
{"lineNum":" 1335","line":"                    *q++ = *p++;"},
{"lineNum":" 1336","line":"                }"},
{"lineNum":" 1337","line":"                break;"},
{"lineNum":" 1338","line":"            }"},
{"lineNum":" 1339","line":"            vst1q_u8(reinterpret_cast<uint8_t *>(q), s);"},
{"lineNum":" 1340","line":"        }"},
{"lineNum":" 1341","line":""},
{"lineNum":" 1342","line":"        is.src_ = p;"},
{"lineNum":" 1343","line":"        is.dst_ = q;"},
{"lineNum":" 1344","line":"    }"},
{"lineNum":" 1345","line":""},
{"lineNum":" 1346","line":"    // When read/write pointers are the same for insitu stream, just skip unescaped characters"},
{"lineNum":" 1347","line":"    static CEREAL_RAPIDJSON_FORCEINLINE void SkipUnescapedString(InsituStringStream& is) {"},
{"lineNum":" 1348","line":"        CEREAL_RAPIDJSON_ASSERT(is.src_ == is.dst_);"},
{"lineNum":" 1349","line":"        char* p = is.src_;"},
{"lineNum":" 1350","line":""},
{"lineNum":" 1351","line":"        // Scan one by one until alignment (unaligned load may cross page boundary and cause crash)"},
{"lineNum":" 1352","line":"        const char* nextAligned = reinterpret_cast<const char*>((reinterpret_cast<size_t>(p) + 15) & static_cast<size_t>(~15));"},
{"lineNum":" 1353","line":"        for (; p != nextAligned; p++)"},
{"lineNum":" 1354","line":"            if (CEREAL_RAPIDJSON_UNLIKELY(*p == \'\\\"\') || CEREAL_RAPIDJSON_UNLIKELY(*p == \'\\\\\') || CEREAL_RAPIDJSON_UNLIKELY(static_cast<unsigned>(*p) < 0x20)) {"},
{"lineNum":" 1355","line":"                is.src_ = is.dst_ = p;"},
{"lineNum":" 1356","line":"                return;"},
{"lineNum":" 1357","line":"            }"},
{"lineNum":" 1358","line":""},
{"lineNum":" 1359","line":"        // The rest of string using SIMD"},
{"lineNum":" 1360","line":"        const uint8x16_t s0 = vmovq_n_u8(\'\"\');"},
{"lineNum":" 1361","line":"        const uint8x16_t s1 = vmovq_n_u8(\'\\\\\');"},
{"lineNum":" 1362","line":"        const uint8x16_t s2 = vmovq_n_u8(\'\\b\');"},
{"lineNum":" 1363","line":"        const uint8x16_t s3 = vmovq_n_u8(32);"},
{"lineNum":" 1364","line":""},
{"lineNum":" 1365","line":"        for (;; p += 16) {"},
{"lineNum":" 1366","line":"            const uint8x16_t s = vld1q_u8(reinterpret_cast<uint8_t *>(p));"},
{"lineNum":" 1367","line":"            uint8x16_t x = vceqq_u8(s, s0);"},
{"lineNum":" 1368","line":"            x = vorrq_u8(x, vceqq_u8(s, s1));"},
{"lineNum":" 1369","line":"            x = vorrq_u8(x, vceqq_u8(s, s2));"},
{"lineNum":" 1370","line":"            x = vorrq_u8(x, vcltq_u8(s, s3));"},
{"lineNum":" 1371","line":""},
{"lineNum":" 1372","line":"            x = vrev64q_u8(x);                     // Rev in 64"},
{"lineNum":" 1373","line":"            uint64_t low = vgetq_lane_u64(reinterpret_cast<uint64x2_t>(x), 0);   // extract"},
{"lineNum":" 1374","line":"            uint64_t high = vgetq_lane_u64(reinterpret_cast<uint64x2_t>(x), 1);  // extract"},
{"lineNum":" 1375","line":""},
{"lineNum":" 1376","line":"            if (low == 0) {"},
{"lineNum":" 1377","line":"                if (high != 0) {"},
{"lineNum":" 1378","line":"                    int lz = __builtin_clzll(high);"},
{"lineNum":" 1379","line":"                    p += 8 + (lz >> 3);"},
{"lineNum":" 1380","line":"                    break;"},
{"lineNum":" 1381","line":"                }"},
{"lineNum":" 1382","line":"            } else {"},
{"lineNum":" 1383","line":"                int lz = __builtin_clzll(low);"},
{"lineNum":" 1384","line":"                p += lz >> 3;"},
{"lineNum":" 1385","line":"                break;"},
{"lineNum":" 1386","line":"            }"},
{"lineNum":" 1387","line":"        }"},
{"lineNum":" 1388","line":""},
{"lineNum":" 1389","line":"        is.src_ = is.dst_ = p;"},
{"lineNum":" 1390","line":"    }"},
{"lineNum":" 1391","line":"#endif // CEREAL_RAPIDJSON_NEON"},
{"lineNum":" 1392","line":""},
{"lineNum":" 1393","line":"    template<typename InputStream, bool backup, bool pushOnTake>"},
{"lineNum":" 1394","line":"    class NumberStream;"},
{"lineNum":" 1395","line":""},
{"lineNum":" 1396","line":"    template<typename InputStream>"},
{"lineNum":" 1397","line":"    class NumberStream<InputStream, false, false> {"},
{"lineNum":" 1398","line":"    public:"},
{"lineNum":" 1399","line":"        typedef typename InputStream::Ch Ch;"},
{"lineNum":" 1400","line":""},
{"lineNum":" 1401","line":"        NumberStream(GenericReader& reader, InputStream& s) : is(s) { (void)reader;  }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1402","line":""},
{"lineNum":" 1403","line":"        CEREAL_RAPIDJSON_FORCEINLINE Ch Peek() const { return is.Peek(); }","class":"lineNoCov","hits":"0","possible_hits":"24",},
{"lineNum":" 1404","line":"        CEREAL_RAPIDJSON_FORCEINLINE Ch TakePush() { return is.Take(); }"},
{"lineNum":" 1405","line":"        CEREAL_RAPIDJSON_FORCEINLINE Ch Take() { return is.Take(); }"},
{"lineNum":" 1406","line":"\t\t  CEREAL_RAPIDJSON_FORCEINLINE void Push(char) {}"},
{"lineNum":" 1407","line":""},
{"lineNum":" 1408","line":"        size_t Tell() { return is.Tell(); }"},
{"lineNum":" 1409","line":"        size_t Length() { return 0; }"},
{"lineNum":" 1410","line":"        const char* Pop() { return 0; }"},
{"lineNum":" 1411","line":""},
{"lineNum":" 1412","line":"    protected:"},
{"lineNum":" 1413","line":"        NumberStream& operator=(const NumberStream&);"},
{"lineNum":" 1414","line":""},
{"lineNum":" 1415","line":"        InputStream& is;"},
{"lineNum":" 1416","line":"    };"},
{"lineNum":" 1417","line":""},
{"lineNum":" 1418","line":"    template<typename InputStream>"},
{"lineNum":" 1419","line":"    class NumberStream<InputStream, true, false> : public NumberStream<InputStream, false, false> {"},
{"lineNum":" 1420","line":"        typedef NumberStream<InputStream, false, false> Base;"},
{"lineNum":" 1421","line":"    public:"},
{"lineNum":" 1422","line":"        NumberStream(GenericReader& reader, InputStream& s) : Base(reader, s), stackStream(reader.stack_) {}"},
{"lineNum":" 1423","line":""},
{"lineNum":" 1424","line":"        CEREAL_RAPIDJSON_FORCEINLINE Ch TakePush() {"},
{"lineNum":" 1425","line":"            stackStream.Put(static_cast<char>(Base::is.Peek()));"},
{"lineNum":" 1426","line":"            return Base::is.Take();","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":" 1427","line":"        }"},
{"lineNum":" 1428","line":""},
{"lineNum":" 1429","line":"        CEREAL_RAPIDJSON_FORCEINLINE void Push(char c) {"},
{"lineNum":" 1430","line":"            stackStream.Put(c);"},
{"lineNum":" 1431","line":"        }"},
{"lineNum":" 1432","line":""},
{"lineNum":" 1433","line":"        size_t Length() { return stackStream.Length(); }"},
{"lineNum":" 1434","line":""},
{"lineNum":" 1435","line":"        const char* Pop() {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1436","line":"            stackStream.Put(\'\\0\');"},
{"lineNum":" 1437","line":"            return stackStream.Pop();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1438","line":"        }"},
{"lineNum":" 1439","line":""},
{"lineNum":" 1440","line":"    private:"},
{"lineNum":" 1441","line":"        StackStream<char> stackStream;"},
{"lineNum":" 1442","line":"    };"},
{"lineNum":" 1443","line":""},
{"lineNum":" 1444","line":"    template<typename InputStream>"},
{"lineNum":" 1445","line":"    class NumberStream<InputStream, true, true> : public NumberStream<InputStream, true, false> {"},
{"lineNum":" 1446","line":"        typedef NumberStream<InputStream, true, false> Base;"},
{"lineNum":" 1447","line":"    public:"},
{"lineNum":" 1448","line":"        NumberStream(GenericReader& reader, InputStream& is) : Base(reader, is) {}"},
{"lineNum":" 1449","line":""},
{"lineNum":" 1450","line":"        CEREAL_RAPIDJSON_FORCEINLINE Ch Take() { return Base::TakePush(); }"},
{"lineNum":" 1451","line":"    };"},
{"lineNum":" 1452","line":""},
{"lineNum":" 1453","line":"    template<unsigned parseFlags, typename InputStream, typename Handler>"},
{"lineNum":" 1454","line":"    void ParseNumber(InputStream& is, Handler& handler) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1455","line":"        internal::StreamLocalCopy<InputStream> copy(is);"},
{"lineNum":" 1456","line":"        NumberStream<InputStream,"},
{"lineNum":" 1457","line":"            ((parseFlags & kParseNumbersAsStringsFlag) != 0) ?"},
{"lineNum":" 1458","line":"                ((parseFlags & kParseInsituFlag) == 0) :"},
{"lineNum":" 1459","line":"                ((parseFlags & kParseFullPrecisionFlag) != 0),"},
{"lineNum":" 1460","line":"            (parseFlags & kParseNumbersAsStringsFlag) != 0 &&"},
{"lineNum":" 1461","line":"                (parseFlags & kParseInsituFlag) == 0> s(*this, copy.s);"},
{"lineNum":" 1462","line":""},
{"lineNum":" 1463","line":"        size_t startOffset = s.Tell();"},
{"lineNum":" 1464","line":"        double d = 0.0;"},
{"lineNum":" 1465","line":"        bool useNanOrInf = false;"},
{"lineNum":" 1466","line":""},
{"lineNum":" 1467","line":"        // Parse minus"},
{"lineNum":" 1468","line":"        bool minus = Consume(s, \'-\');"},
{"lineNum":" 1469","line":""},
{"lineNum":" 1470","line":"        // Parse int: zero / ( digit1-9 *DIGIT )"},
{"lineNum":" 1471","line":"        unsigned i = 0;"},
{"lineNum":" 1472","line":"        uint64_t i64 = 0;"},
{"lineNum":" 1473","line":"        bool use64bit = false;"},
{"lineNum":" 1474","line":"        int significandDigit = 0;"},
{"lineNum":" 1475","line":"        if (CEREAL_RAPIDJSON_UNLIKELY(s.Peek() == \'0\')) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1476","line":"            i = 0;"},
{"lineNum":" 1477","line":"            s.TakePush();"},
{"lineNum":" 1478","line":"        }"},
{"lineNum":" 1479","line":"        else if (CEREAL_RAPIDJSON_LIKELY(s.Peek() >= \'1\' && s.Peek() <= \'9\')) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1480","line":"            i = static_cast<unsigned>(s.TakePush() - \'0\');","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1481","line":""},
{"lineNum":" 1482","line":"            if (minus)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1483","line":"                while (CEREAL_RAPIDJSON_LIKELY(s.Peek() >= \'0\' && s.Peek() <= \'9\')) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1484","line":"                    if (CEREAL_RAPIDJSON_UNLIKELY(i >= 214748364)) { // 2^31 = 2147483648","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1485","line":"                        if (CEREAL_RAPIDJSON_LIKELY(i != 214748364 || s.Peek() > \'8\')) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1486","line":"                            i64 = i;"},
{"lineNum":" 1487","line":"                            use64bit = true;"},
{"lineNum":" 1488","line":"                            break;"},
{"lineNum":" 1489","line":"                        }"},
{"lineNum":" 1490","line":"                    }"},
{"lineNum":" 1491","line":"                    i = i * 10 + static_cast<unsigned>(s.TakePush() - \'0\');","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1492","line":"                    significandDigit++;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1493","line":"                }"},
{"lineNum":" 1494","line":"            else"},
{"lineNum":" 1495","line":"                while (CEREAL_RAPIDJSON_LIKELY(s.Peek() >= \'0\' && s.Peek() <= \'9\')) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1496","line":"                    if (CEREAL_RAPIDJSON_UNLIKELY(i >= 429496729)) { // 2^32 - 1 = 4294967295","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1497","line":"                        if (CEREAL_RAPIDJSON_LIKELY(i != 429496729 || s.Peek() > \'5\')) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1498","line":"                            i64 = i;"},
{"lineNum":" 1499","line":"                            use64bit = true;"},
{"lineNum":" 1500","line":"                            break;"},
{"lineNum":" 1501","line":"                        }"},
{"lineNum":" 1502","line":"                    }"},
{"lineNum":" 1503","line":"                    i = i * 10 + static_cast<unsigned>(s.TakePush() - \'0\');","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1504","line":"                    significandDigit++;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1505","line":"                }"},
{"lineNum":" 1506","line":"        }"},
{"lineNum":" 1507","line":"        // Parse NaN or Infinity here"},
{"lineNum":" 1508","line":"        else if ((parseFlags & kParseNanAndInfFlag) && CEREAL_RAPIDJSON_LIKELY((s.Peek() == \'I\' || s.Peek() == \'N\'))) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1509","line":"            if (Consume(s, \'N\')) {"},
{"lineNum":" 1510","line":"                if (Consume(s, \'a\') && Consume(s, \'N\')) {"},
{"lineNum":" 1511","line":"                    d = std::numeric_limits<double>::quiet_NaN();"},
{"lineNum":" 1512","line":"                    useNanOrInf = true;"},
{"lineNum":" 1513","line":"                }"},
{"lineNum":" 1514","line":"            }"},
{"lineNum":" 1515","line":"            else if (CEREAL_RAPIDJSON_LIKELY(Consume(s, \'I\'))) {"},
{"lineNum":" 1516","line":"                if (Consume(s, \'n\') && Consume(s, \'f\')) {"},
{"lineNum":" 1517","line":"                    d = (minus ? -std::numeric_limits<double>::infinity() : std::numeric_limits<double>::infinity());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1518","line":"                    useNanOrInf = true;"},
{"lineNum":" 1519","line":""},
{"lineNum":" 1520","line":"                    if (CEREAL_RAPIDJSON_UNLIKELY(s.Peek() == \'i\' && !(Consume(s, \'i\') && Consume(s, \'n\')","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1521","line":"                                                                && Consume(s, \'i\') && Consume(s, \'t\') && Consume(s, \'y\')))) {"},
{"lineNum":" 1522","line":"                        CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorValueInvalid, s.Tell());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1523","line":"                    }"},
{"lineNum":" 1524","line":"                }"},
{"lineNum":" 1525","line":"            }"},
{"lineNum":" 1526","line":""},
{"lineNum":" 1527","line":"            if (CEREAL_RAPIDJSON_UNLIKELY(!useNanOrInf)) {"},
{"lineNum":" 1528","line":"                CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorValueInvalid, s.Tell());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1529","line":"            }"},
{"lineNum":" 1530","line":"        }"},
{"lineNum":" 1531","line":"        else"},
{"lineNum":" 1532","line":"            CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorValueInvalid, s.Tell());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1533","line":""},
{"lineNum":" 1534","line":"        // Parse 64bit int"},
{"lineNum":" 1535","line":"        bool useDouble = false;"},
{"lineNum":" 1536","line":"        if (use64bit) {"},
{"lineNum":" 1537","line":"            if (minus)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1538","line":"                while (CEREAL_RAPIDJSON_LIKELY(s.Peek() >= \'0\' && s.Peek() <= \'9\')) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1539","line":"                     if (CEREAL_RAPIDJSON_UNLIKELY(i64 >= CEREAL_RAPIDJSON_UINT64_C2(0x0CCCCCCC, 0xCCCCCCCC))) // 2^63 = 9223372036854775808","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1540","line":"                        if (CEREAL_RAPIDJSON_LIKELY(i64 != CEREAL_RAPIDJSON_UINT64_C2(0x0CCCCCCC, 0xCCCCCCCC) || s.Peek() > \'8\')) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1541","line":"                            d = static_cast<double>(i64);"},
{"lineNum":" 1542","line":"                            useDouble = true;"},
{"lineNum":" 1543","line":"                            break;"},
{"lineNum":" 1544","line":"                        }"},
{"lineNum":" 1545","line":"                    i64 = i64 * 10 + static_cast<unsigned>(s.TakePush() - \'0\');","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1546","line":"                    significandDigit++;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1547","line":"                }"},
{"lineNum":" 1548","line":"            else"},
{"lineNum":" 1549","line":"                while (CEREAL_RAPIDJSON_LIKELY(s.Peek() >= \'0\' && s.Peek() <= \'9\')) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1550","line":"                    if (CEREAL_RAPIDJSON_UNLIKELY(i64 >= CEREAL_RAPIDJSON_UINT64_C2(0x19999999, 0x99999999))) // 2^64 - 1 = 18446744073709551615","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1551","line":"                        if (CEREAL_RAPIDJSON_LIKELY(i64 != CEREAL_RAPIDJSON_UINT64_C2(0x19999999, 0x99999999) || s.Peek() > \'5\')) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1552","line":"                            d = static_cast<double>(i64);"},
{"lineNum":" 1553","line":"                            useDouble = true;"},
{"lineNum":" 1554","line":"                            break;"},
{"lineNum":" 1555","line":"                        }"},
{"lineNum":" 1556","line":"                    i64 = i64 * 10 + static_cast<unsigned>(s.TakePush() - \'0\');","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1557","line":"                    significandDigit++;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1558","line":"                }"},
{"lineNum":" 1559","line":"        }"},
{"lineNum":" 1560","line":""},
{"lineNum":" 1561","line":"        // Force double for big integer"},
{"lineNum":" 1562","line":"        if (useDouble) {"},
{"lineNum":" 1563","line":"            while (CEREAL_RAPIDJSON_LIKELY(s.Peek() >= \'0\' && s.Peek() <= \'9\')) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1564","line":"                d = d * 10 + (s.TakePush() - \'0\');","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1565","line":"            }"},
{"lineNum":" 1566","line":"        }"},
{"lineNum":" 1567","line":""},
{"lineNum":" 1568","line":"        // Parse frac = decimal-point 1*DIGIT"},
{"lineNum":" 1569","line":"        int expFrac = 0;"},
{"lineNum":" 1570","line":"        size_t decimalPosition;"},
{"lineNum":" 1571","line":"        if (Consume(s, \'.\')) {"},
{"lineNum":" 1572","line":"            decimalPosition = s.Length();"},
{"lineNum":" 1573","line":""},
{"lineNum":" 1574","line":"            if (CEREAL_RAPIDJSON_UNLIKELY(!(s.Peek() >= \'0\' && s.Peek() <= \'9\')))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1575","line":"                CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorNumberMissFraction, s.Tell());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1576","line":""},
{"lineNum":" 1577","line":"            if (!useDouble) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1578","line":"#if CEREAL_RAPIDJSON_64BIT"},
{"lineNum":" 1579","line":"                // Use i64 to store significand in 64-bit architecture"},
{"lineNum":" 1580","line":"                if (!use64bit)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1581","line":"                    i64 = i;"},
{"lineNum":" 1582","line":""},
{"lineNum":" 1583","line":"                while (CEREAL_RAPIDJSON_LIKELY(s.Peek() >= \'0\' && s.Peek() <= \'9\')) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1584","line":"                    if (i64 > CEREAL_RAPIDJSON_UINT64_C2(0x1FFFFF, 0xFFFFFFFF)) // 2^53 - 1 for fast path"},
{"lineNum":" 1585","line":"                        break;"},
{"lineNum":" 1586","line":"                    else {"},
{"lineNum":" 1587","line":"                        i64 = i64 * 10 + static_cast<unsigned>(s.TakePush() - \'0\');","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1588","line":"                        --expFrac;"},
{"lineNum":" 1589","line":"                        if (i64 != 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1590","line":"                            significandDigit++;"},
{"lineNum":" 1591","line":"                    }"},
{"lineNum":" 1592","line":"                }"},
{"lineNum":" 1593","line":""},
{"lineNum":" 1594","line":"                d = static_cast<double>(i64);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1595","line":"#else"},
{"lineNum":" 1596","line":"                // Use double to store significand in 32-bit architecture"},
{"lineNum":" 1597","line":"                d = static_cast<double>(use64bit ? i64 : i);"},
{"lineNum":" 1598","line":"#endif"},
{"lineNum":" 1599","line":"                useDouble = true;"},
{"lineNum":" 1600","line":"            }"},
{"lineNum":" 1601","line":""},
{"lineNum":" 1602","line":"            while (CEREAL_RAPIDJSON_LIKELY(s.Peek() >= \'0\' && s.Peek() <= \'9\')) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1603","line":"                if (significandDigit < 17) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1604","line":"                    d = d * 10.0 + (s.TakePush() - \'0\');","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1605","line":"                    --expFrac;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1606","line":"                    if (CEREAL_RAPIDJSON_LIKELY(d > 0.0))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1607","line":"                        significandDigit++;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1608","line":"                }"},
{"lineNum":" 1609","line":"                else"},
{"lineNum":" 1610","line":"                    s.TakePush();"},
{"lineNum":" 1611","line":"            }"},
{"lineNum":" 1612","line":"        }"},
{"lineNum":" 1613","line":"        else"},
{"lineNum":" 1614","line":"            decimalPosition = s.Length(); // decimal position at the end of integer."},
{"lineNum":" 1615","line":""},
{"lineNum":" 1616","line":"        // Parse exp = e [ minus / plus ] 1*DIGIT"},
{"lineNum":" 1617","line":"        int exp = 0;"},
{"lineNum":" 1618","line":"        if (Consume(s, \'e\') || Consume(s, \'E\')) {"},
{"lineNum":" 1619","line":"            if (!useDouble) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1620","line":"                d = static_cast<double>(use64bit ? i64 : i);"},
{"lineNum":" 1621","line":"                useDouble = true;"},
{"lineNum":" 1622","line":"            }"},
{"lineNum":" 1623","line":""},
{"lineNum":" 1624","line":"            bool expMinus = false;"},
{"lineNum":" 1625","line":"            if (Consume(s, \'+\'))"},
{"lineNum":" 1626","line":"                ;"},
{"lineNum":" 1627","line":"            else if (Consume(s, \'-\'))"},
{"lineNum":" 1628","line":"                expMinus = true;"},
{"lineNum":" 1629","line":""},
{"lineNum":" 1630","line":"            if (CEREAL_RAPIDJSON_LIKELY(s.Peek() >= \'0\' && s.Peek() <= \'9\')) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1631","line":"                exp = static_cast<int>(s.Take() - \'0\');","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1632","line":"                if (expMinus) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1633","line":"                    // (exp + expFrac) must not underflow int => we\'re detecting when -exp gets"},
{"lineNum":" 1634","line":"                    // dangerously close to INT_MIN (a pessimistic next digit 9 would push it into"},
{"lineNum":" 1635","line":"                    // underflow territory):"},
{"lineNum":" 1636","line":"                    //"},
{"lineNum":" 1637","line":"                    //        -(exp * 10 + 9) + expFrac >= INT_MIN"},
{"lineNum":" 1638","line":"                    //   <=>  exp <= (expFrac - INT_MIN - 9) / 10"},
{"lineNum":" 1639","line":"                    CEREAL_RAPIDJSON_ASSERT(expFrac <= 0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1640","line":"                    int maxExp = (expFrac + 2147483639) / 10;"},
{"lineNum":" 1641","line":""},
{"lineNum":" 1642","line":"                    while (CEREAL_RAPIDJSON_LIKELY(s.Peek() >= \'0\' && s.Peek() <= \'9\')) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1643","line":"                        exp = exp * 10 + static_cast<int>(s.Take() - \'0\');","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1644","line":"                        if (CEREAL_RAPIDJSON_UNLIKELY(exp > maxExp)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1645","line":"                            while (CEREAL_RAPIDJSON_UNLIKELY(s.Peek() >= \'0\' && s.Peek() <= \'9\'))  // Consume the rest of exponent","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1646","line":"                                s.Take();"},
{"lineNum":" 1647","line":"                        }"},
{"lineNum":" 1648","line":"                    }"},
{"lineNum":" 1649","line":"                }"},
{"lineNum":" 1650","line":"                else {  // positive exp"},
{"lineNum":" 1651","line":"                    int maxExp = 308 - expFrac;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1652","line":"                    while (CEREAL_RAPIDJSON_LIKELY(s.Peek() >= \'0\' && s.Peek() <= \'9\')) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1653","line":"                        exp = exp * 10 + static_cast<int>(s.Take() - \'0\');","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1654","line":"                        if (CEREAL_RAPIDJSON_UNLIKELY(exp > maxExp))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1655","line":"                            CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorNumberTooBig, startOffset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1656","line":"                    }"},
{"lineNum":" 1657","line":"                }"},
{"lineNum":" 1658","line":"            }"},
{"lineNum":" 1659","line":"            else"},
{"lineNum":" 1660","line":"                CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorNumberMissExponent, s.Tell());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1661","line":""},
{"lineNum":" 1662","line":"            if (expMinus)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1663","line":"                exp = -exp;"},
{"lineNum":" 1664","line":"        }"},
{"lineNum":" 1665","line":""},
{"lineNum":" 1666","line":"        // Finish parsing, call event according to the type of number."},
{"lineNum":" 1667","line":"        bool cont = true;"},
{"lineNum":" 1668","line":""},
{"lineNum":" 1669","line":"        if (parseFlags & kParseNumbersAsStringsFlag) {"},
{"lineNum":" 1670","line":"            if (parseFlags & kParseInsituFlag) {"},
{"lineNum":" 1671","line":"                s.Pop();  // Pop stack no matter if it will be used or not."},
{"lineNum":" 1672","line":"                typename InputStream::Ch* head = is.PutBegin();"},
{"lineNum":" 1673","line":"                const size_t length = s.Tell() - startOffset;"},
{"lineNum":" 1674","line":"                CEREAL_RAPIDJSON_ASSERT(length <= 0xFFFFFFFF);"},
{"lineNum":" 1675","line":"                // unable to insert the \\0 character here, it will erase the comma after this number"},
{"lineNum":" 1676","line":"                const typename TargetEncoding::Ch* const str = reinterpret_cast<typename TargetEncoding::Ch*>(head);"},
{"lineNum":" 1677","line":"                cont = handler.RawNumber(str, SizeType(length), false);"},
{"lineNum":" 1678","line":"            }"},
{"lineNum":" 1679","line":"            else {"},
{"lineNum":" 1680","line":"                SizeType numCharsToCopy = static_cast<SizeType>(s.Length());"},
{"lineNum":" 1681","line":"                StringStream srcStream(s.Pop());"},
{"lineNum":" 1682","line":"                StackStream<typename TargetEncoding::Ch> dstStream(stack_);"},
{"lineNum":" 1683","line":"                while (numCharsToCopy--) {"},
{"lineNum":" 1684","line":"                    Transcoder<UTF8<>, TargetEncoding>::Transcode(srcStream, dstStream);"},
{"lineNum":" 1685","line":"                }"},
{"lineNum":" 1686","line":"                dstStream.Put(\'\\0\');"},
{"lineNum":" 1687","line":"                const typename TargetEncoding::Ch* str = dstStream.Pop();"},
{"lineNum":" 1688","line":"                const SizeType length = static_cast<SizeType>(dstStream.Length()) - 1;"},
{"lineNum":" 1689","line":"                cont = handler.RawNumber(str, SizeType(length), true);"},
{"lineNum":" 1690","line":"            }"},
{"lineNum":" 1691","line":"        }"},
{"lineNum":" 1692","line":"        else {"},
{"lineNum":" 1693","line":"           size_t length = s.Length();"},
{"lineNum":" 1694","line":"           const char* decimal = s.Pop();  // Pop stack no matter if it will be used or not.","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1695","line":""},
{"lineNum":" 1696","line":"           if (useDouble) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1697","line":"               int p = exp + expFrac;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1698","line":"               if (parseFlags & kParseFullPrecisionFlag)"},
{"lineNum":" 1699","line":"                   d = internal::StrtodFullPrecision(d, p, decimal, length, decimalPosition, exp);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1700","line":"               else"},
{"lineNum":" 1701","line":"                   d = internal::StrtodNormalPrecision(d, p);"},
{"lineNum":" 1702","line":""},
{"lineNum":" 1703","line":"               // Use > max, instead of == inf, to fix bogus warning -Wfloat-equal"},
{"lineNum":" 1704","line":"               if (d > (std::numeric_limits<double>::max)()) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1705","line":"                   // Overflow"},
{"lineNum":" 1706","line":"                   // TODO: internal::StrtodX should report overflow (or underflow)"},
{"lineNum":" 1707","line":"                   CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorNumberTooBig, startOffset);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1708","line":"               }"},
{"lineNum":" 1709","line":""},
{"lineNum":" 1710","line":"               cont = handler.Double(minus ? -d : d);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1711","line":"           }"},
{"lineNum":" 1712","line":"           else if (useNanOrInf) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1713","line":"               cont = handler.Double(d);"},
{"lineNum":" 1714","line":"           }"},
{"lineNum":" 1715","line":"           else {"},
{"lineNum":" 1716","line":"               if (use64bit) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1717","line":"                   if (minus)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1718","line":"                       cont = handler.Int64(static_cast<int64_t>(~i64 + 1));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1719","line":"                   else"},
{"lineNum":" 1720","line":"                       cont = handler.Uint64(i64);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1721","line":"               }"},
{"lineNum":" 1722","line":"               else {"},
{"lineNum":" 1723","line":"                   if (minus)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1724","line":"                       cont = handler.Int(static_cast<int32_t>(~i + 1));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1725","line":"                   else"},
{"lineNum":" 1726","line":"                       cont = handler.Uint(i);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1727","line":"               }"},
{"lineNum":" 1728","line":"           }"},
{"lineNum":" 1729","line":"        }"},
{"lineNum":" 1730","line":"        if (CEREAL_RAPIDJSON_UNLIKELY(!cont))"},
{"lineNum":" 1731","line":"            CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorTermination, startOffset);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1732","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1733","line":""},
{"lineNum":" 1734","line":"    // Parse any JSON value"},
{"lineNum":" 1735","line":"    template<unsigned parseFlags, typename InputStream, typename Handler>"},
{"lineNum":" 1736","line":"    void ParseValue(InputStream& is, Handler& handler) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1737","line":"        switch (is.Peek()) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1738","line":"            case \'n\': ParseNull  <parseFlags>(is, handler); break;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1739","line":"            case \'t\': ParseTrue  <parseFlags>(is, handler); break;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1740","line":"            case \'f\': ParseFalse <parseFlags>(is, handler); break;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1741","line":"            case \'\"\': ParseString<parseFlags>(is, handler); break;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1742","line":"            case \'{\': ParseObject<parseFlags>(is, handler); break;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1743","line":"            case \'[\': ParseArray <parseFlags>(is, handler); break;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1744","line":"            default :"},
{"lineNum":" 1745","line":"                      ParseNumber<parseFlags>(is, handler);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1746","line":"                      break;"},
{"lineNum":" 1747","line":""},
{"lineNum":" 1748","line":"        }"},
{"lineNum":" 1749","line":"    }"},
{"lineNum":" 1750","line":""},
{"lineNum":" 1751","line":"    // Iterative Parsing"},
{"lineNum":" 1752","line":""},
{"lineNum":" 1753","line":"    // States"},
{"lineNum":" 1754","line":"    enum IterativeParsingState {"},
{"lineNum":" 1755","line":"        IterativeParsingFinishState = 0, // sink states at top"},
{"lineNum":" 1756","line":"        IterativeParsingErrorState,      // sink states at top"},
{"lineNum":" 1757","line":"        IterativeParsingStartState,"},
{"lineNum":" 1758","line":""},
{"lineNum":" 1759","line":"        // Object states"},
{"lineNum":" 1760","line":"        IterativeParsingObjectInitialState,"},
{"lineNum":" 1761","line":"        IterativeParsingMemberKeyState,"},
{"lineNum":" 1762","line":"        IterativeParsingMemberValueState,"},
{"lineNum":" 1763","line":"        IterativeParsingObjectFinishState,"},
{"lineNum":" 1764","line":""},
{"lineNum":" 1765","line":"        // Array states"},
{"lineNum":" 1766","line":"        IterativeParsingArrayInitialState,"},
{"lineNum":" 1767","line":"        IterativeParsingElementState,"},
{"lineNum":" 1768","line":"        IterativeParsingArrayFinishState,"},
{"lineNum":" 1769","line":""},
{"lineNum":" 1770","line":"        // Single value state"},
{"lineNum":" 1771","line":"        IterativeParsingValueState,"},
{"lineNum":" 1772","line":""},
{"lineNum":" 1773","line":"        // Delimiter states (at bottom)"},
{"lineNum":" 1774","line":"        IterativeParsingElementDelimiterState,"},
{"lineNum":" 1775","line":"        IterativeParsingMemberDelimiterState,"},
{"lineNum":" 1776","line":"        IterativeParsingKeyValueDelimiterState,"},
{"lineNum":" 1777","line":""},
{"lineNum":" 1778","line":"        cIterativeParsingStateCount"},
{"lineNum":" 1779","line":"    };"},
{"lineNum":" 1780","line":""},
{"lineNum":" 1781","line":"    // Tokens"},
{"lineNum":" 1782","line":"    enum Token {"},
{"lineNum":" 1783","line":"        LeftBracketToken = 0,"},
{"lineNum":" 1784","line":"        RightBracketToken,"},
{"lineNum":" 1785","line":""},
{"lineNum":" 1786","line":"        LeftCurlyBracketToken,"},
{"lineNum":" 1787","line":"        RightCurlyBracketToken,"},
{"lineNum":" 1788","line":""},
{"lineNum":" 1789","line":"        CommaToken,"},
{"lineNum":" 1790","line":"        ColonToken,"},
{"lineNum":" 1791","line":""},
{"lineNum":" 1792","line":"        StringToken,"},
{"lineNum":" 1793","line":"        FalseToken,"},
{"lineNum":" 1794","line":"        TrueToken,"},
{"lineNum":" 1795","line":"        NullToken,"},
{"lineNum":" 1796","line":"        NumberToken,"},
{"lineNum":" 1797","line":""},
{"lineNum":" 1798","line":"        kTokenCount"},
{"lineNum":" 1799","line":"    };"},
{"lineNum":" 1800","line":""},
{"lineNum":" 1801","line":"    CEREAL_RAPIDJSON_FORCEINLINE Token Tokenize(Ch c) const {"},
{"lineNum":" 1802","line":""},
{"lineNum":" 1803","line":"//!@cond CEREAL_RAPIDJSON_HIDDEN_FROM_DOXYGEN"},
{"lineNum":" 1804","line":"#define N NumberToken"},
{"lineNum":" 1805","line":"#define N16 N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N"},
{"lineNum":" 1806","line":"        // Maps from ASCII to Token"},
{"lineNum":" 1807","line":"        static const unsigned char tokenMap[256] = {"},
{"lineNum":" 1808","line":"            N16, // 00~0F"},
{"lineNum":" 1809","line":"            N16, // 10~1F"},
{"lineNum":" 1810","line":"            N, N, StringToken, N, N, N, N, N, N, N, N, N, CommaToken, N, N, N, // 20~2F"},
{"lineNum":" 1811","line":"            N, N, N, N, N, N, N, N, N, N, ColonToken, N, N, N, N, N, // 30~3F"},
{"lineNum":" 1812","line":"            N16, // 40~4F"},
{"lineNum":" 1813","line":"            N, N, N, N, N, N, N, N, N, N, N, LeftBracketToken, N, RightBracketToken, N, N, // 50~5F"},
{"lineNum":" 1814","line":"            N, N, N, N, N, N, FalseToken, N, N, N, N, N, N, N, NullToken, N, // 60~6F"},
{"lineNum":" 1815","line":"            N, N, N, N, TrueToken, N, N, N, N, N, N, LeftCurlyBracketToken, N, RightCurlyBracketToken, N, N, // 70~7F"},
{"lineNum":" 1816","line":"            N16, N16, N16, N16, N16, N16, N16, N16 // 80~FF"},
{"lineNum":" 1817","line":"        };"},
{"lineNum":" 1818","line":"#undef N"},
{"lineNum":" 1819","line":"#undef N16"},
{"lineNum":" 1820","line":"//!@endcond"},
{"lineNum":" 1821","line":""},
{"lineNum":" 1822","line":"        if (sizeof(Ch) == 1 || static_cast<unsigned>(c) < 256)"},
{"lineNum":" 1823","line":"            return static_cast<Token>(tokenMap[static_cast<unsigned char>(c)]);"},
{"lineNum":" 1824","line":"        else"},
{"lineNum":" 1825","line":"            return NumberToken;"},
{"lineNum":" 1826","line":"    }"},
{"lineNum":" 1827","line":""},
{"lineNum":" 1828","line":"    CEREAL_RAPIDJSON_FORCEINLINE IterativeParsingState Predict(IterativeParsingState state, Token token) const {"},
{"lineNum":" 1829","line":"        // current state x one lookahead token -> new state"},
{"lineNum":" 1830","line":"        static const char G[cIterativeParsingStateCount][kTokenCount] = {"},
{"lineNum":" 1831","line":"            // Finish(sink state)"},
{"lineNum":" 1832","line":"            {"},
{"lineNum":" 1833","line":"                IterativeParsingErrorState, IterativeParsingErrorState, IterativeParsingErrorState, IterativeParsingErrorState, IterativeParsingErrorState,"},
{"lineNum":" 1834","line":"                IterativeParsingErrorState, IterativeParsingErrorState, IterativeParsingErrorState, IterativeParsingErrorState, IterativeParsingErrorState,"},
{"lineNum":" 1835","line":"                IterativeParsingErrorState"},
{"lineNum":" 1836","line":"            },"},
{"lineNum":" 1837","line":"            // Error(sink state)"},
{"lineNum":" 1838","line":"            {"},
{"lineNum":" 1839","line":"                IterativeParsingErrorState, IterativeParsingErrorState, IterativeParsingErrorState, IterativeParsingErrorState, IterativeParsingErrorState,"},
{"lineNum":" 1840","line":"                IterativeParsingErrorState, IterativeParsingErrorState, IterativeParsingErrorState, IterativeParsingErrorState, IterativeParsingErrorState,"},
{"lineNum":" 1841","line":"                IterativeParsingErrorState"},
{"lineNum":" 1842","line":"            },"},
{"lineNum":" 1843","line":"            // Start"},
{"lineNum":" 1844","line":"            {"},
{"lineNum":" 1845","line":"                IterativeParsingArrayInitialState,  // Left bracket"},
{"lineNum":" 1846","line":"                IterativeParsingErrorState,         // Right bracket"},
{"lineNum":" 1847","line":"                IterativeParsingObjectInitialState, // Left curly bracket"},
{"lineNum":" 1848","line":"                IterativeParsingErrorState,         // Right curly bracket"},
{"lineNum":" 1849","line":"                IterativeParsingErrorState,         // Comma"},
{"lineNum":" 1850","line":"                IterativeParsingErrorState,         // Colon"},
{"lineNum":" 1851","line":"                IterativeParsingValueState,         // String"},
{"lineNum":" 1852","line":"                IterativeParsingValueState,         // False"},
{"lineNum":" 1853","line":"                IterativeParsingValueState,         // True"},
{"lineNum":" 1854","line":"                IterativeParsingValueState,         // Null"},
{"lineNum":" 1855","line":"                IterativeParsingValueState          // Number"},
{"lineNum":" 1856","line":"            },"},
{"lineNum":" 1857","line":"            // ObjectInitial"},
{"lineNum":" 1858","line":"            {"},
{"lineNum":" 1859","line":"                IterativeParsingErrorState,         // Left bracket"},
{"lineNum":" 1860","line":"                IterativeParsingErrorState,         // Right bracket"},
{"lineNum":" 1861","line":"                IterativeParsingErrorState,         // Left curly bracket"},
{"lineNum":" 1862","line":"                IterativeParsingObjectFinishState,  // Right curly bracket"},
{"lineNum":" 1863","line":"                IterativeParsingErrorState,         // Comma"},
{"lineNum":" 1864","line":"                IterativeParsingErrorState,         // Colon"},
{"lineNum":" 1865","line":"                IterativeParsingMemberKeyState,     // String"},
{"lineNum":" 1866","line":"                IterativeParsingErrorState,         // False"},
{"lineNum":" 1867","line":"                IterativeParsingErrorState,         // True"},
{"lineNum":" 1868","line":"                IterativeParsingErrorState,         // Null"},
{"lineNum":" 1869","line":"                IterativeParsingErrorState          // Number"},
{"lineNum":" 1870","line":"            },"},
{"lineNum":" 1871","line":"            // MemberKey"},
{"lineNum":" 1872","line":"            {"},
{"lineNum":" 1873","line":"                IterativeParsingErrorState,             // Left bracket"},
{"lineNum":" 1874","line":"                IterativeParsingErrorState,             // Right bracket"},
{"lineNum":" 1875","line":"                IterativeParsingErrorState,             // Left curly bracket"},
{"lineNum":" 1876","line":"                IterativeParsingErrorState,             // Right curly bracket"},
{"lineNum":" 1877","line":"                IterativeParsingErrorState,             // Comma"},
{"lineNum":" 1878","line":"                IterativeParsingKeyValueDelimiterState, // Colon"},
{"lineNum":" 1879","line":"                IterativeParsingErrorState,             // String"},
{"lineNum":" 1880","line":"                IterativeParsingErrorState,             // False"},
{"lineNum":" 1881","line":"                IterativeParsingErrorState,             // True"},
{"lineNum":" 1882","line":"                IterativeParsingErrorState,             // Null"},
{"lineNum":" 1883","line":"                IterativeParsingErrorState              // Number"},
{"lineNum":" 1884","line":"            },"},
{"lineNum":" 1885","line":"            // MemberValue"},
{"lineNum":" 1886","line":"            {"},
{"lineNum":" 1887","line":"                IterativeParsingErrorState,             // Left bracket"},
{"lineNum":" 1888","line":"                IterativeParsingErrorState,             // Right bracket"},
{"lineNum":" 1889","line":"                IterativeParsingErrorState,             // Left curly bracket"},
{"lineNum":" 1890","line":"                IterativeParsingObjectFinishState,      // Right curly bracket"},
{"lineNum":" 1891","line":"                IterativeParsingMemberDelimiterState,   // Comma"},
{"lineNum":" 1892","line":"                IterativeParsingErrorState,             // Colon"},
{"lineNum":" 1893","line":"                IterativeParsingErrorState,             // String"},
{"lineNum":" 1894","line":"                IterativeParsingErrorState,             // False"},
{"lineNum":" 1895","line":"                IterativeParsingErrorState,             // True"},
{"lineNum":" 1896","line":"                IterativeParsingErrorState,             // Null"},
{"lineNum":" 1897","line":"                IterativeParsingErrorState              // Number"},
{"lineNum":" 1898","line":"            },"},
{"lineNum":" 1899","line":"            // ObjectFinish(sink state)"},
{"lineNum":" 1900","line":"            {"},
{"lineNum":" 1901","line":"                IterativeParsingErrorState, IterativeParsingErrorState, IterativeParsingErrorState, IterativeParsingErrorState, IterativeParsingErrorState,"},
{"lineNum":" 1902","line":"                IterativeParsingErrorState, IterativeParsingErrorState, IterativeParsingErrorState, IterativeParsingErrorState, IterativeParsingErrorState,"},
{"lineNum":" 1903","line":"                IterativeParsingErrorState"},
{"lineNum":" 1904","line":"            },"},
{"lineNum":" 1905","line":"            // ArrayInitial"},
{"lineNum":" 1906","line":"            {"},
{"lineNum":" 1907","line":"                IterativeParsingArrayInitialState,      // Left bracket(push Element state)"},
{"lineNum":" 1908","line":"                IterativeParsingArrayFinishState,       // Right bracket"},
{"lineNum":" 1909","line":"                IterativeParsingObjectInitialState,     // Left curly bracket(push Element state)"},
{"lineNum":" 1910","line":"                IterativeParsingErrorState,             // Right curly bracket"},
{"lineNum":" 1911","line":"                IterativeParsingErrorState,             // Comma"},
{"lineNum":" 1912","line":"                IterativeParsingErrorState,             // Colon"},
{"lineNum":" 1913","line":"                IterativeParsingElementState,           // String"},
{"lineNum":" 1914","line":"                IterativeParsingElementState,           // False"},
{"lineNum":" 1915","line":"                IterativeParsingElementState,           // True"},
{"lineNum":" 1916","line":"                IterativeParsingElementState,           // Null"},
{"lineNum":" 1917","line":"                IterativeParsingElementState            // Number"},
{"lineNum":" 1918","line":"            },"},
{"lineNum":" 1919","line":"            // Element"},
{"lineNum":" 1920","line":"            {"},
{"lineNum":" 1921","line":"                IterativeParsingErrorState,             // Left bracket"},
{"lineNum":" 1922","line":"                IterativeParsingArrayFinishState,       // Right bracket"},
{"lineNum":" 1923","line":"                IterativeParsingErrorState,             // Left curly bracket"},
{"lineNum":" 1924","line":"                IterativeParsingErrorState,             // Right curly bracket"},
{"lineNum":" 1925","line":"                IterativeParsingElementDelimiterState,  // Comma"},
{"lineNum":" 1926","line":"                IterativeParsingErrorState,             // Colon"},
{"lineNum":" 1927","line":"                IterativeParsingErrorState,             // String"},
{"lineNum":" 1928","line":"                IterativeParsingErrorState,             // False"},
{"lineNum":" 1929","line":"                IterativeParsingErrorState,             // True"},
{"lineNum":" 1930","line":"                IterativeParsingErrorState,             // Null"},
{"lineNum":" 1931","line":"                IterativeParsingErrorState              // Number"},
{"lineNum":" 1932","line":"            },"},
{"lineNum":" 1933","line":"            // ArrayFinish(sink state)"},
{"lineNum":" 1934","line":"            {"},
{"lineNum":" 1935","line":"                IterativeParsingErrorState, IterativeParsingErrorState, IterativeParsingErrorState, IterativeParsingErrorState, IterativeParsingErrorState,"},
{"lineNum":" 1936","line":"                IterativeParsingErrorState, IterativeParsingErrorState, IterativeParsingErrorState, IterativeParsingErrorState, IterativeParsingErrorState,"},
{"lineNum":" 1937","line":"                IterativeParsingErrorState"},
{"lineNum":" 1938","line":"            },"},
{"lineNum":" 1939","line":"            // Single Value (sink state)"},
{"lineNum":" 1940","line":"            {"},
{"lineNum":" 1941","line":"                IterativeParsingErrorState, IterativeParsingErrorState, IterativeParsingErrorState, IterativeParsingErrorState, IterativeParsingErrorState,"},
{"lineNum":" 1942","line":"                IterativeParsingErrorState, IterativeParsingErrorState, IterativeParsingErrorState, IterativeParsingErrorState, IterativeParsingErrorState,"},
{"lineNum":" 1943","line":"                IterativeParsingErrorState"},
{"lineNum":" 1944","line":"            },"},
{"lineNum":" 1945","line":"            // ElementDelimiter"},
{"lineNum":" 1946","line":"            {"},
{"lineNum":" 1947","line":"                IterativeParsingArrayInitialState,      // Left bracket(push Element state)"},
{"lineNum":" 1948","line":"                IterativeParsingArrayFinishState,       // Right bracket"},
{"lineNum":" 1949","line":"                IterativeParsingObjectInitialState,     // Left curly bracket(push Element state)"},
{"lineNum":" 1950","line":"                IterativeParsingErrorState,             // Right curly bracket"},
{"lineNum":" 1951","line":"                IterativeParsingErrorState,             // Comma"},
{"lineNum":" 1952","line":"                IterativeParsingErrorState,             // Colon"},
{"lineNum":" 1953","line":"                IterativeParsingElementState,           // String"},
{"lineNum":" 1954","line":"                IterativeParsingElementState,           // False"},
{"lineNum":" 1955","line":"                IterativeParsingElementState,           // True"},
{"lineNum":" 1956","line":"                IterativeParsingElementState,           // Null"},
{"lineNum":" 1957","line":"                IterativeParsingElementState            // Number"},
{"lineNum":" 1958","line":"            },"},
{"lineNum":" 1959","line":"            // MemberDelimiter"},
{"lineNum":" 1960","line":"            {"},
{"lineNum":" 1961","line":"                IterativeParsingErrorState,         // Left bracket"},
{"lineNum":" 1962","line":"                IterativeParsingErrorState,         // Right bracket"},
{"lineNum":" 1963","line":"                IterativeParsingErrorState,         // Left curly bracket"},
{"lineNum":" 1964","line":"                IterativeParsingObjectFinishState,  // Right curly bracket"},
{"lineNum":" 1965","line":"                IterativeParsingErrorState,         // Comma"},
{"lineNum":" 1966","line":"                IterativeParsingErrorState,         // Colon"},
{"lineNum":" 1967","line":"                IterativeParsingMemberKeyState,     // String"},
{"lineNum":" 1968","line":"                IterativeParsingErrorState,         // False"},
{"lineNum":" 1969","line":"                IterativeParsingErrorState,         // True"},
{"lineNum":" 1970","line":"                IterativeParsingErrorState,         // Null"},
{"lineNum":" 1971","line":"                IterativeParsingErrorState          // Number"},
{"lineNum":" 1972","line":"            },"},
{"lineNum":" 1973","line":"            // KeyValueDelimiter"},
{"lineNum":" 1974","line":"            {"},
{"lineNum":" 1975","line":"                IterativeParsingArrayInitialState,      // Left bracket(push MemberValue state)"},
{"lineNum":" 1976","line":"                IterativeParsingErrorState,             // Right bracket"},
{"lineNum":" 1977","line":"                IterativeParsingObjectInitialState,     // Left curly bracket(push MemberValue state)"},
{"lineNum":" 1978","line":"                IterativeParsingErrorState,             // Right curly bracket"},
{"lineNum":" 1979","line":"                IterativeParsingErrorState,             // Comma"},
{"lineNum":" 1980","line":"                IterativeParsingErrorState,             // Colon"},
{"lineNum":" 1981","line":"                IterativeParsingMemberValueState,       // String"},
{"lineNum":" 1982","line":"                IterativeParsingMemberValueState,       // False"},
{"lineNum":" 1983","line":"                IterativeParsingMemberValueState,       // True"},
{"lineNum":" 1984","line":"                IterativeParsingMemberValueState,       // Null"},
{"lineNum":" 1985","line":"                IterativeParsingMemberValueState        // Number"},
{"lineNum":" 1986","line":"            },"},
{"lineNum":" 1987","line":"        }; // End of G"},
{"lineNum":" 1988","line":""},
{"lineNum":" 1989","line":"        return static_cast<IterativeParsingState>(G[state][token]);"},
{"lineNum":" 1990","line":"    }"},
{"lineNum":" 1991","line":""},
{"lineNum":" 1992","line":"    // Make an advance in the token stream and state based on the candidate destination state which was returned by Transit()."},
{"lineNum":" 1993","line":"    // May return a new state on state pop."},
{"lineNum":" 1994","line":"    template <unsigned parseFlags, typename InputStream, typename Handler>"},
{"lineNum":" 1995","line":"    CEREAL_RAPIDJSON_FORCEINLINE IterativeParsingState Transit(IterativeParsingState src, Token token, IterativeParsingState dst, InputStream& is, Handler& handler) {"},
{"lineNum":" 1996","line":"        (void)token;"},
{"lineNum":" 1997","line":""},
{"lineNum":" 1998","line":"        switch (dst) {"},
{"lineNum":" 1999","line":"        case IterativeParsingErrorState:"},
{"lineNum":" 2000","line":"            return dst;"},
{"lineNum":" 2001","line":""},
{"lineNum":" 2002","line":"        case IterativeParsingObjectInitialState:"},
{"lineNum":" 2003","line":"        case IterativeParsingArrayInitialState:"},
{"lineNum":" 2004","line":"        {"},
{"lineNum":" 2005","line":"            // Push the state(Element or MemeberValue) if we are nested in another array or value of member."},
{"lineNum":" 2006","line":"            // In this way we can get the correct state on ObjectFinish or ArrayFinish by frame pop."},
{"lineNum":" 2007","line":"            IterativeParsingState n = src;"},
{"lineNum":" 2008","line":"            if (src == IterativeParsingArrayInitialState || src == IterativeParsingElementDelimiterState)"},
{"lineNum":" 2009","line":"                n = IterativeParsingElementState;"},
{"lineNum":" 2010","line":"            else if (src == IterativeParsingKeyValueDelimiterState)"},
{"lineNum":" 2011","line":"                n = IterativeParsingMemberValueState;"},
{"lineNum":" 2012","line":"            // Push current state."},
{"lineNum":" 2013","line":"            *stack_.template Push<SizeType>(1) = n;"},
{"lineNum":" 2014","line":"            // Initialize and push the member/element count."},
{"lineNum":" 2015","line":"            *stack_.template Push<SizeType>(1) = 0;"},
{"lineNum":" 2016","line":"            // Call handler"},
{"lineNum":" 2017","line":"            bool hr = (dst == IterativeParsingObjectInitialState) ? handler.StartObject() : handler.StartArray();"},
{"lineNum":" 2018","line":"            // On handler short circuits the parsing."},
{"lineNum":" 2019","line":"            if (!hr) {"},
{"lineNum":" 2020","line":"                CEREAL_RAPIDJSON_PARSE_ERROR_NORETURN(kParseErrorTermination, is.Tell());"},
{"lineNum":" 2021","line":"                return IterativeParsingErrorState;"},
{"lineNum":" 2022","line":"            }"},
{"lineNum":" 2023","line":"            else {"},
{"lineNum":" 2024","line":"                is.Take();"},
{"lineNum":" 2025","line":"                return dst;"},
{"lineNum":" 2026","line":"            }"},
{"lineNum":" 2027","line":"        }"},
{"lineNum":" 2028","line":""},
{"lineNum":" 2029","line":"        case IterativeParsingMemberKeyState:"},
{"lineNum":" 2030","line":"            ParseString<parseFlags>(is, handler, true);"},
{"lineNum":" 2031","line":"            if (HasParseError())"},
{"lineNum":" 2032","line":"                return IterativeParsingErrorState;"},
{"lineNum":" 2033","line":"            else"},
{"lineNum":" 2034","line":"                return dst;"},
{"lineNum":" 2035","line":""},
{"lineNum":" 2036","line":"        case IterativeParsingKeyValueDelimiterState:"},
{"lineNum":" 2037","line":"            CEREAL_RAPIDJSON_ASSERT(token == ColonToken);"},
{"lineNum":" 2038","line":"            is.Take();"},
{"lineNum":" 2039","line":"            return dst;"},
{"lineNum":" 2040","line":""},
{"lineNum":" 2041","line":"        case IterativeParsingMemberValueState:"},
{"lineNum":" 2042","line":"            // Must be non-compound value. Or it would be ObjectInitial or ArrayInitial state."},
{"lineNum":" 2043","line":"            ParseValue<parseFlags>(is, handler);"},
{"lineNum":" 2044","line":"            if (HasParseError()) {"},
{"lineNum":" 2045","line":"                return IterativeParsingErrorState;"},
{"lineNum":" 2046","line":"            }"},
{"lineNum":" 2047","line":"            return dst;"},
{"lineNum":" 2048","line":""},
{"lineNum":" 2049","line":"        case IterativeParsingElementState:"},
{"lineNum":" 2050","line":"            // Must be non-compound value. Or it would be ObjectInitial or ArrayInitial state."},
{"lineNum":" 2051","line":"            ParseValue<parseFlags>(is, handler);"},
{"lineNum":" 2052","line":"            if (HasParseError()) {"},
{"lineNum":" 2053","line":"                return IterativeParsingErrorState;"},
{"lineNum":" 2054","line":"            }"},
{"lineNum":" 2055","line":"            return dst;"},
{"lineNum":" 2056","line":""},
{"lineNum":" 2057","line":"        case IterativeParsingMemberDelimiterState:"},
{"lineNum":" 2058","line":"        case IterativeParsingElementDelimiterState:"},
{"lineNum":" 2059","line":"            is.Take();"},
{"lineNum":" 2060","line":"            // Update member/element count."},
{"lineNum":" 2061","line":"            *stack_.template Top<SizeType>() = *stack_.template Top<SizeType>() + 1;"},
{"lineNum":" 2062","line":"            return dst;"},
{"lineNum":" 2063","line":""},
{"lineNum":" 2064","line":"        case IterativeParsingObjectFinishState:"},
{"lineNum":" 2065","line":"        {"},
{"lineNum":" 2066","line":"            // Transit from delimiter is only allowed when trailing commas are enabled"},
{"lineNum":" 2067","line":"            if (!(parseFlags & kParseTrailingCommasFlag) && src == IterativeParsingMemberDelimiterState) {"},
{"lineNum":" 2068","line":"                CEREAL_RAPIDJSON_PARSE_ERROR_NORETURN(kParseErrorObjectMissName, is.Tell());"},
{"lineNum":" 2069","line":"                return IterativeParsingErrorState;"},
{"lineNum":" 2070","line":"            }"},
{"lineNum":" 2071","line":"            // Get member count."},
{"lineNum":" 2072","line":"            SizeType c = *stack_.template Pop<SizeType>(1);"},
{"lineNum":" 2073","line":"            // If the object is not empty, count the last member."},
{"lineNum":" 2074","line":"            if (src == IterativeParsingMemberValueState)"},
{"lineNum":" 2075","line":"                ++c;"},
{"lineNum":" 2076","line":"            // Restore the state."},
{"lineNum":" 2077","line":"            IterativeParsingState n = static_cast<IterativeParsingState>(*stack_.template Pop<SizeType>(1));"},
{"lineNum":" 2078","line":"            // Transit to Finish state if this is the topmost scope."},
{"lineNum":" 2079","line":"            if (n == IterativeParsingStartState)"},
{"lineNum":" 2080","line":"                n = IterativeParsingFinishState;"},
{"lineNum":" 2081","line":"            // Call handler"},
{"lineNum":" 2082","line":"            bool hr = handler.EndObject(c);"},
{"lineNum":" 2083","line":"            // On handler short circuits the parsing."},
{"lineNum":" 2084","line":"            if (!hr) {"},
{"lineNum":" 2085","line":"                CEREAL_RAPIDJSON_PARSE_ERROR_NORETURN(kParseErrorTermination, is.Tell());"},
{"lineNum":" 2086","line":"                return IterativeParsingErrorState;"},
{"lineNum":" 2087","line":"            }"},
{"lineNum":" 2088","line":"            else {"},
{"lineNum":" 2089","line":"                is.Take();"},
{"lineNum":" 2090","line":"                return n;"},
{"lineNum":" 2091","line":"            }"},
{"lineNum":" 2092","line":"        }"},
{"lineNum":" 2093","line":""},
{"lineNum":" 2094","line":"        case IterativeParsingArrayFinishState:"},
{"lineNum":" 2095","line":"        {"},
{"lineNum":" 2096","line":"            // Transit from delimiter is only allowed when trailing commas are enabled"},
{"lineNum":" 2097","line":"            if (!(parseFlags & kParseTrailingCommasFlag) && src == IterativeParsingElementDelimiterState) {"},
{"lineNum":" 2098","line":"                CEREAL_RAPIDJSON_PARSE_ERROR_NORETURN(kParseErrorValueInvalid, is.Tell());"},
{"lineNum":" 2099","line":"                return IterativeParsingErrorState;"},
{"lineNum":" 2100","line":"            }"},
{"lineNum":" 2101","line":"            // Get element count."},
{"lineNum":" 2102","line":"            SizeType c = *stack_.template Pop<SizeType>(1);"},
{"lineNum":" 2103","line":"            // If the array is not empty, count the last element."},
{"lineNum":" 2104","line":"            if (src == IterativeParsingElementState)"},
{"lineNum":" 2105","line":"                ++c;"},
{"lineNum":" 2106","line":"            // Restore the state."},
{"lineNum":" 2107","line":"            IterativeParsingState n = static_cast<IterativeParsingState>(*stack_.template Pop<SizeType>(1));"},
{"lineNum":" 2108","line":"            // Transit to Finish state if this is the topmost scope."},
{"lineNum":" 2109","line":"            if (n == IterativeParsingStartState)"},
{"lineNum":" 2110","line":"                n = IterativeParsingFinishState;"},
{"lineNum":" 2111","line":"            // Call handler"},
{"lineNum":" 2112","line":"            bool hr = handler.EndArray(c);"},
{"lineNum":" 2113","line":"            // On handler short circuits the parsing."},
{"lineNum":" 2114","line":"            if (!hr) {"},
{"lineNum":" 2115","line":"                CEREAL_RAPIDJSON_PARSE_ERROR_NORETURN(kParseErrorTermination, is.Tell());"},
{"lineNum":" 2116","line":"                return IterativeParsingErrorState;"},
{"lineNum":" 2117","line":"            }"},
{"lineNum":" 2118","line":"            else {"},
{"lineNum":" 2119","line":"                is.Take();"},
{"lineNum":" 2120","line":"                return n;"},
{"lineNum":" 2121","line":"            }"},
{"lineNum":" 2122","line":"        }"},
{"lineNum":" 2123","line":""},
{"lineNum":" 2124","line":"        default:"},
{"lineNum":" 2125","line":"            // This branch is for IterativeParsingValueState actually."},
{"lineNum":" 2126","line":"            // Use `default:` rather than"},
{"lineNum":" 2127","line":"            // `case IterativeParsingValueState:` is for code coverage."},
{"lineNum":" 2128","line":""},
{"lineNum":" 2129","line":"            // The IterativeParsingStartState is not enumerated in this switch-case."},
{"lineNum":" 2130","line":"            // It is impossible for that case. And it can be caught by following assertion."},
{"lineNum":" 2131","line":""},
{"lineNum":" 2132","line":"            // The IterativeParsingFinishState is not enumerated in this switch-case either."},
{"lineNum":" 2133","line":"            // It is a \"derivative\" state which cannot triggered from Predict() directly."},
{"lineNum":" 2134","line":"            // Therefore it cannot happen here. And it can be caught by following assertion."},
{"lineNum":" 2135","line":"            CEREAL_RAPIDJSON_ASSERT(dst == IterativeParsingValueState);"},
{"lineNum":" 2136","line":""},
{"lineNum":" 2137","line":"            // Must be non-compound value. Or it would be ObjectInitial or ArrayInitial state."},
{"lineNum":" 2138","line":"            ParseValue<parseFlags>(is, handler);"},
{"lineNum":" 2139","line":"            if (HasParseError()) {"},
{"lineNum":" 2140","line":"                return IterativeParsingErrorState;"},
{"lineNum":" 2141","line":"            }"},
{"lineNum":" 2142","line":"            return IterativeParsingFinishState;"},
{"lineNum":" 2143","line":"        }"},
{"lineNum":" 2144","line":"    }"},
{"lineNum":" 2145","line":""},
{"lineNum":" 2146","line":"    template <typename InputStream>"},
{"lineNum":" 2147","line":"    void HandleError(IterativeParsingState src, InputStream& is) {"},
{"lineNum":" 2148","line":"        if (HasParseError()) {"},
{"lineNum":" 2149","line":"            // Error flag has been set."},
{"lineNum":" 2150","line":"            return;"},
{"lineNum":" 2151","line":"        }"},
{"lineNum":" 2152","line":""},
{"lineNum":" 2153","line":"        switch (src) {"},
{"lineNum":" 2154","line":"        case IterativeParsingStartState:            CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorDocumentEmpty, is.Tell()); return;"},
{"lineNum":" 2155","line":"        case IterativeParsingFinishState:           CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorDocumentRootNotSingular, is.Tell()); return;"},
{"lineNum":" 2156","line":"        case IterativeParsingObjectInitialState:"},
{"lineNum":" 2157","line":"        case IterativeParsingMemberDelimiterState:  CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorObjectMissName, is.Tell()); return;"},
{"lineNum":" 2158","line":"        case IterativeParsingMemberKeyState:        CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorObjectMissColon, is.Tell()); return;"},
{"lineNum":" 2159","line":"        case IterativeParsingMemberValueState:      CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorObjectMissCommaOrCurlyBracket, is.Tell()); return;"},
{"lineNum":" 2160","line":"        case IterativeParsingKeyValueDelimiterState:"},
{"lineNum":" 2161","line":"        case IterativeParsingArrayInitialState:"},
{"lineNum":" 2162","line":"        case IterativeParsingElementDelimiterState: CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorValueInvalid, is.Tell()); return;"},
{"lineNum":" 2163","line":"        default: CEREAL_RAPIDJSON_ASSERT(src == IterativeParsingElementState); CEREAL_RAPIDJSON_PARSE_ERROR(kParseErrorArrayMissCommaOrSquareBracket, is.Tell()); return;"},
{"lineNum":" 2164","line":"        }"},
{"lineNum":" 2165","line":"    }"},
{"lineNum":" 2166","line":""},
{"lineNum":" 2167","line":"    CEREAL_RAPIDJSON_FORCEINLINE bool IsIterativeParsingDelimiterState(IterativeParsingState s) const {"},
{"lineNum":" 2168","line":"        return s >= IterativeParsingElementDelimiterState;"},
{"lineNum":" 2169","line":"    }"},
{"lineNum":" 2170","line":""},
{"lineNum":" 2171","line":"    CEREAL_RAPIDJSON_FORCEINLINE bool IsIterativeParsingCompleteState(IterativeParsingState s) const {"},
{"lineNum":" 2172","line":"        return s <= IterativeParsingErrorState;"},
{"lineNum":" 2173","line":"    }"},
{"lineNum":" 2174","line":""},
{"lineNum":" 2175","line":"    template <unsigned parseFlags, typename InputStream, typename Handler>"},
{"lineNum":" 2176","line":"    ParseResult IterativeParse(InputStream& is, Handler& handler) {"},
{"lineNum":" 2177","line":"        parseResult_.Clear();"},
{"lineNum":" 2178","line":"        ClearStackOnExit scope(*this);"},
{"lineNum":" 2179","line":"        IterativeParsingState state = IterativeParsingStartState;"},
{"lineNum":" 2180","line":""},
{"lineNum":" 2181","line":"        SkipWhitespaceAndComments<parseFlags>(is);"},
{"lineNum":" 2182","line":"        CEREAL_RAPIDJSON_PARSE_ERROR_EARLY_RETURN(parseResult_);"},
{"lineNum":" 2183","line":"        while (is.Peek() != \'\\0\') {"},
{"lineNum":" 2184","line":"            Token t = Tokenize(is.Peek());"},
{"lineNum":" 2185","line":"            IterativeParsingState n = Predict(state, t);"},
{"lineNum":" 2186","line":"            IterativeParsingState d = Transit<parseFlags>(state, t, n, is, handler);"},
{"lineNum":" 2187","line":""},
{"lineNum":" 2188","line":"            if (d == IterativeParsingErrorState) {"},
{"lineNum":" 2189","line":"                HandleError(state, is);"},
{"lineNum":" 2190","line":"                break;"},
{"lineNum":" 2191","line":"            }"},
{"lineNum":" 2192","line":""},
{"lineNum":" 2193","line":"            state = d;"},
{"lineNum":" 2194","line":""},
{"lineNum":" 2195","line":"            // Do not further consume streams if a root JSON has been parsed."},
{"lineNum":" 2196","line":"            if ((parseFlags & kParseStopWhenDoneFlag) && state == IterativeParsingFinishState)"},
{"lineNum":" 2197","line":"                break;"},
{"lineNum":" 2198","line":""},
{"lineNum":" 2199","line":"            SkipWhitespaceAndComments<parseFlags>(is);"},
{"lineNum":" 2200","line":"            CEREAL_RAPIDJSON_PARSE_ERROR_EARLY_RETURN(parseResult_);"},
{"lineNum":" 2201","line":"        }"},
{"lineNum":" 2202","line":""},
{"lineNum":" 2203","line":"        // Handle the end of file."},
{"lineNum":" 2204","line":"        if (state != IterativeParsingFinishState)"},
{"lineNum":" 2205","line":"            HandleError(state, is);"},
{"lineNum":" 2206","line":""},
{"lineNum":" 2207","line":"        return parseResult_;"},
{"lineNum":" 2208","line":"    }"},
{"lineNum":" 2209","line":""},
{"lineNum":" 2210","line":"    static const size_t kDefaultStackCapacity = 256;    //!< Default stack capacity in bytes for storing a single decoded string."},
{"lineNum":" 2211","line":"    internal::Stack<StackAllocator> stack_;  //!< A stack for storing decoded string temporarily during non-destructive parsing."},
{"lineNum":" 2212","line":"    ParseResult parseResult_;"},
{"lineNum":" 2213","line":"    IterativeParsingState state_;"},
{"lineNum":" 2214","line":"}; // class GenericReader"},
{"lineNum":" 2215","line":""},
{"lineNum":" 2216","line":"//! Reader with UTF8 encoding and default allocator."},
{"lineNum":" 2217","line":"typedef GenericReader<UTF8<>, UTF8<> > Reader;"},
{"lineNum":" 2218","line":""},
{"lineNum":" 2219","line":"CEREAL_RAPIDJSON_NAMESPACE_END"},
{"lineNum":" 2220","line":""},
{"lineNum":" 2221","line":"#if defined(__clang__) || defined(_MSC_VER)"},
{"lineNum":" 2222","line":"CEREAL_RAPIDJSON_DIAG_POP"},
{"lineNum":" 2223","line":"#endif"},
{"lineNum":" 2224","line":""},
{"lineNum":" 2225","line":""},
{"lineNum":" 2226","line":"#ifdef __GNUC__"},
{"lineNum":" 2227","line":"CEREAL_RAPIDJSON_DIAG_POP"},
{"lineNum":" 2228","line":"#endif"},
{"lineNum":" 2229","line":""},
{"lineNum":" 2230","line":"#endif // CEREAL_RAPIDJSON_READER_H_"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 189, "covered" : 0,};
var merged_data = [];
