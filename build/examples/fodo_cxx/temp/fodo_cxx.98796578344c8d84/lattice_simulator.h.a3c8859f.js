var data = {lines:[
{"lineNum":"    1","line":""},
{"lineNum":"    2","line":"#ifndef SYNERGIA_SIMULATION_LATTICE_SIMULATOR_H"},
{"lineNum":"    3","line":"#define SYNERGIA_SIMULATION_LATTICE_SIMULATOR_H"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"#include \"synergia/lattice/lattice.h\""},
{"lineNum":"    6","line":"#include \"synergia/bunch/bunch.h\""},
{"lineNum":"    7","line":"#include \"synergia/libFF/ff_element.h\""},
{"lineNum":"    8","line":"#include \"synergia/simulation/propagator.h\""},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#include \"synergia/foundation/trigon.h\""},
{"lineNum":"   11","line":"#include \"synergia/foundation/normal_form.h\""},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"struct chromaticities_t"},
{"lineNum":"   14","line":"{"},
{"lineNum":"   15","line":"    double momentum_compaction;"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"    double horizontal_chromaticity;"},
{"lineNum":"   18","line":"    double horizontal_chromaticity_prime;"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"    double vertical_chromaticity;"},
{"lineNum":"   21","line":"    double vertical_chromaticity_prime;"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"    double slip_factor;"},
{"lineNum":"   24","line":"    double slip_factor_prime;"},
{"lineNum":"   25","line":"};"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"namespace Lattice_simulator"},
{"lineNum":"   28","line":"{"},
{"lineNum":"   29","line":"    constexpr const double default_closed_orbit_tolerance = 1.0e-13;"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"    void   set_closed_orbit_tolerance(double tolerance);"},
{"lineNum":"   32","line":"    double get_closed_orbit_tolerance();"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"    // Both tune_linear_lattice() and tune_circular_lattice() set the frequency of the"},
{"lineNum":"   35","line":"    // rfcavities based on the momentum of the lattice reference particle."},
{"lineNum":"   36","line":"    //"},
{"lineNum":"   37","line":"    // tune_linear_lattice uses the state of the reference particle as the starting"},
{"lineNum":"   38","line":"    // point for propagation."},
{"lineNum":"   39","line":"    //"},
{"lineNum":"   40","line":"    // tune_circular_lattice() calculates a closed orbit and uses that as the starting"},
{"lineNum":"   41","line":"    // point."},
{"lineNum":"   42","line":"    //"},
{"lineNum":"   43","line":"    // Both returns return an array of state, the transverse coordinates are the final"},
{"lineNum":"   44","line":"    // coordinates. cdt is the c * the total propagation time of the particle which"},
{"lineNum":"   45","line":"    // gives the total path length."},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"    // find the closed orbit for the circular lattice, propagate the lattice reference"},
{"lineNum":"   48","line":"    // particle through the lattice slices using the closed orbit, and set the reference"},
{"lineNum":"   49","line":"    // c*t for each lattice slice after tuning."},
{"lineNum":"   50","line":"    // return values is the state for calcualted closed orbit"},
{"lineNum":"   51","line":"    // note that all the rf cavities will be set to 0 strength during the tuning process"},
{"lineNum":"   52","line":"    std::array<double, 6>"},
{"lineNum":"   53","line":"    tune_linear_lattice("},
{"lineNum":"   54","line":"            Lattice & lattice);"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"    std::array<double, 6>"},
{"lineNum":"   57","line":"    tune_circular_lattice("},
{"lineNum":"   58","line":"            Lattice & lattice);"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"    std::array<double, 6>"},
{"lineNum":"   61","line":"    tune_rfcavities("},
{"lineNum":"   62","line":"            Lattice & lattice);"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"    // closed orbit"},
{"lineNum":"   65","line":"    std::array<double, 6>"},
{"lineNum":"   66","line":"    calculate_closed_orbit("},
{"lineNum":"   67","line":"            Lattice const& lattice,"},
{"lineNum":"   68","line":"            double dpp = 0.0);"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"    // [tune_h, tune_v, c_delta_t]"},
{"lineNum":"   71","line":"    std::array<double, 3>"},
{"lineNum":"   72","line":"    calculate_tune_and_cdt("},
{"lineNum":"   73","line":"            Lattice const& lattice,"},
{"lineNum":"   74","line":"            double dpp = 0.0);"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"    chromaticities_t"},
{"lineNum":"   77","line":"    get_chromaticities("},
{"lineNum":"   78","line":"            Lattice const& lattice,"},
{"lineNum":"   79","line":"            double dpp = 1e-5);"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"    // get the full mapping of the one turn map"},
{"lineNum":"   82","line":"    template<unsigned int order = 2>"},
{"lineNum":"   83","line":"    TMapping<Trigon<double, order, 6>>"},
{"lineNum":"   84","line":"    get_one_turn_map("},
{"lineNum":"   85","line":"            Lattice const& lattice,"},
{"lineNum":"   86","line":"            double dpp = 0.0 );"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"    // only the jacobian of the one turn map"},
{"lineNum":"   89","line":"    karray2d_row"},
{"lineNum":"   90","line":"    get_linear_one_turn_map("},
{"lineNum":"   91","line":"            Lattice const& lattice);"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"    // [alpha, beta, psi]"},
{"lineNum":"   94","line":"    std::array<double, 3>"},
{"lineNum":"   95","line":"    map_to_twiss("},
{"lineNum":"   96","line":"            karray2d_row map);"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"    template<unsigned int order>"},
{"lineNum":"   99","line":"    NormalForm<order>"},
{"lineNum":"  100","line":"    calculate_normal_form("},
{"lineNum":"  101","line":"            Lattice const& lattice);"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"    double"},
{"lineNum":"  104","line":"    get_bucket_length("},
{"lineNum":"  105","line":"            Lattice const& lattice);"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"    double"},
{"lineNum":"  108","line":"    get_rf_frequency("},
{"lineNum":"  109","line":"            Lattice const& lattice);"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"    // the calculated lattice functions will be"},
{"lineNum":"  113","line":"    // written into the lattice elements"},
{"lineNum":"  114","line":"    //"},
{"lineNum":"  115","line":"    // overrides with Lattice& calculates the LF for elements"},
{"lineNum":"  116","line":"    // overrides with Propagator& do it for the element slices"},
{"lineNum":"  117","line":"    //"},
{"lineNum":"  118","line":"    void"},
{"lineNum":"  119","line":"    CourantSnyderLatticeFunctions("},
{"lineNum":"  120","line":"            Lattice& lattice);"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"    void"},
{"lineNum":"  123","line":"    CourantSnyderLatticeFunctions("},
{"lineNum":"  124","line":"            Propagator& prop);"},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"    void"},
{"lineNum":"  127","line":"    calc_dispersions("},
{"lineNum":"  128","line":"            Lattice& lattice);"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"    void"},
{"lineNum":"  131","line":"    calc_dispersions("},
{"lineNum":"  132","line":"            Propagator& prop);"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"    // LF implementations"},
{"lineNum":"  135","line":"    template<class ELMS>"},
{"lineNum":"  136","line":"    void"},
{"lineNum":"  137","line":"    CourantSnyderLatticeFunctions_impl("},
{"lineNum":"  138","line":"            Lattice& lattice,"},
{"lineNum":"  139","line":"            ELMS & elms);"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"    template<class ELMS>"},
{"lineNum":"  142","line":"    void"},
{"lineNum":"  143","line":"    calc_dispersions_impl("},
{"lineNum":"  144","line":"            Lattice& lattice,"},
{"lineNum":"  145","line":"            ELMS& elms);"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"    // adjust tunes and chromaticities"},
{"lineNum":"  148","line":"    void"},
{"lineNum":"  149","line":"    adjust_tunes("},
{"lineNum":"  150","line":"            Lattice& lattice,"},
{"lineNum":"  151","line":"            double horizontal_tune,"},
{"lineNum":"  152","line":"            double vertical_tune,"},
{"lineNum":"  153","line":"            double tolerance = 1e-5);"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"    void"},
{"lineNum":"  156","line":"    adjust_chromaticities("},
{"lineNum":"  157","line":"            Lattice& lattice,"},
{"lineNum":"  158","line":"            double horizontal_chromaticity,"},
{"lineNum":"  159","line":"            double vertical_chromaticity,"},
{"lineNum":"  160","line":"            double tolerance = 1e-4,"},
{"lineNum":"  161","line":"            int max_steps = 6);"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"}"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"#ifdef __CUDA_ARCH__"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"// no implementations for CUDA arch"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"#else"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"// implementations"},
{"lineNum":"  172","line":"namespace Lattice_simulator"},
{"lineNum":"  173","line":"{"},
{"lineNum":"  174","line":"    template<unsigned int order>"},
{"lineNum":"  175","line":"    TMapping<Trigon<double, order, 6>>"},
{"lineNum":"  176","line":"    get_one_turn_map(Lattice const& lattice, double dpp)"},
{"lineNum":"  177","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  178","line":"        using trigon_t = Trigon<double, order, 6>;"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"        // get the reference particle"},
{"lineNum":"  181","line":"        auto const& ref = lattice.get_reference_particle();"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"        // closed orbit"},
{"lineNum":"  184","line":"        auto probe = Lattice_simulator::calculate_closed_orbit(lattice, dpp);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"        // comm world"},
{"lineNum":"  187","line":"        Commxx comm;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"        // trigon bunch to get the one-turn-map"},
{"lineNum":"  190","line":"        bunch_t<trigon_t> tb(ref, comm.size(), comm);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"        // design reference particle from the closed orbit"},
{"lineNum":"  193","line":"        auto ref_l = ref;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  194","line":"        ref_l.set_state(probe);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  195","line":"        tb.set_design_reference_particle(ref_l);"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"        auto tparts = tb.get_host_particles();"},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"        // init value"},
{"lineNum":"  200","line":"        for(int i=0; i<6; ++i)"},
{"lineNum":"  201","line":"            tparts(0, i).set(probe[i], i);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"        // check in"},
{"lineNum":"  204","line":"        tb.checkin_particles();"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"        // propagate trigon"},
{"lineNum":"  207","line":"        for(auto & ele : lattice.get_elements())","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  208","line":"        {"},
{"lineNum":"  209","line":"            if (ele.get_type() == element_type::rfcavity)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  210","line":"            {"},
{"lineNum":"  211","line":"                Lattice_element dup = ele;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  212","line":"                //dup.set_double_attribute(\"volt\", 0.0);"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"                FF_element::apply(dup, tb);"},
{"lineNum":"  215","line":"            }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  216","line":"            else"},
{"lineNum":"  217","line":"            {"},
{"lineNum":"  218","line":"                FF_element::apply(ele, tb);"},
{"lineNum":"  219","line":"            }"},
{"lineNum":"  220","line":"        }"},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"        // checkout particles"},
{"lineNum":"  223","line":"        tb.checkout_particles();"},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"        // one-turn-map"},
{"lineNum":"  226","line":"        TMapping<trigon_t> map;"},
{"lineNum":"  227","line":"        for(int i=0; i<trigon_t::dim; ++i) map[i] = tparts(0, i);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"        return map;"},
{"lineNum":"  230","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"    template<unsigned int order>"},
{"lineNum":"  234","line":"    NormalForm<order>"},
{"lineNum":"  235","line":"    calculate_normal_form(Lattice const& lattice)"},
{"lineNum":"  236","line":"    {"},
{"lineNum":"  237","line":"        auto one_turn_map = get_one_turn_map<order>(lattice, 0.00);"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"        auto ref = lattice.get_reference_particle();"},
{"lineNum":"  240","line":"        double e0 = ref.get_total_energy();"},
{"lineNum":"  241","line":"        double pc0 = ref.get_momentum();"},
{"lineNum":"  242","line":"        double mass = ref.get_mass();"},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"        NormalForm<order> nf(one_turn_map, e0, pc0, mass);"},
{"lineNum":"  245","line":"        return nf;"},
{"lineNum":"  246","line":"    }"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"    template<class ELMS>"},
{"lineNum":"  249","line":"    void"},
{"lineNum":"  250","line":"    CourantSnyderLatticeFunctions_impl(Lattice& lattice, ELMS & elms)"},
{"lineNum":"  251","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  252","line":"        constexpr const int order = 2;"},
{"lineNum":"  253","line":"        using trigon_t = Trigon<double, order, 6>;"},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"        const int ix  = 0;"},
{"lineNum":"  256","line":"        const int ipx = 1;"},
{"lineNum":"  257","line":"        const int iy  = 2;"},
{"lineNum":"  258","line":"        const int ipy = 3;"},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"        auto const& ref = lattice.get_reference_particle();"},
{"lineNum":"  261","line":"        auto probe = calculate_closed_orbit(lattice);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  262","line":""},
{"lineNum":"  263","line":"        auto map = get_one_turn_map<order>(lattice);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  264","line":"        auto jac = map.jacobian();"},
{"lineNum":"  265","line":""},
{"lineNum":"  266","line":"        // .......... Check coupling ............................"},
{"lineNum":"  267","line":"        //::checkForCoupling(mtrx);"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"        // Calculate initial lattice functions ..."},
{"lineNum":"  270","line":"        // ... first horizontal"},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"        double cs = ( jac(ix, ix) + jac(ipx, ipx) )/2.0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"        if( fabs( cs ) > 1.0 )","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  275","line":"        {"},
{"lineNum":"  276","line":"            std::stringstream ss;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  277","line":"            ss << \"*** ERROR ***                                     \\n\"","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  278","line":"               << \"*** ERROR *** LattSim::CourantSnyderLatticeFunctions \\n\""},
{"lineNum":"  279","line":"               << \"*** ERROR *** cos( psi_H ) = \" << cs << \"\\n\"","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  280","line":"               << \"*** ERROR *** Lattice is unstable.                \\n\""},
{"lineNum":"  281","line":"               << \"*** ERROR *** Cannot continue with calculation.   \\n\""},
{"lineNum":"  282","line":"               << \"*** ERROR ***                                     \\n\""},
{"lineNum":"  283","line":"               << std::endl;"},
{"lineNum":"  284","line":""},
{"lineNum":"  285","line":"            throw std::runtime_error(ss.str());","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  286","line":"        }"},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"        double sn = ( jac(ix, ipx) > 0.0 )","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  289","line":"            ? sqrt( 1.0 - cs*cs ) : - sqrt( 1.0 - cs*cs );"},
{"lineNum":"  290","line":""},
{"lineNum":"  291","line":"        if( sn == 0.0 )","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  292","line":"        {"},
{"lineNum":"  293","line":"            std::stringstream ss;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  294","line":"            ss << \"*** ERROR ***                                     \\n\"","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  295","line":"               << \"*** ERROR *** LattSim::CourantSnyderLatticeFunctions \\n\""},
{"lineNum":"  296","line":"               << \"*** ERROR *** Integer horizontal tune.            \\n\""},
{"lineNum":"  297","line":"               << \"*** ERROR ***                                     \\n\""},
{"lineNum":"  298","line":"               << std::endl;"},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"            throw std::runtime_error(ss.str());","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  301","line":"        }"},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"        double beta_x = jac(ix, ipx) / sn;"},
{"lineNum":"  304","line":"        double alpha_x = (jac(ix, ix) - jac(ipx, ipx)) / (2.0*sn);"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"        // ... then vertical."},
{"lineNum":"  307","line":"        cs = (jac(iy, iy) + jac(ipy, ipy))/2.0;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  308","line":""},
{"lineNum":"  309","line":"        if( fabs( cs ) <= 1.0 )","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  310","line":"        {"},
{"lineNum":"  311","line":"            if( jac(iy, ipy) > 0.0 )  sn =  sqrt( 1.0 - cs*cs );","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  312","line":"            else                      sn = -sqrt( 1.0 - cs*cs );"},
{"lineNum":"  313","line":"        }"},
{"lineNum":"  314","line":"        else"},
{"lineNum":"  315","line":"        {"},
{"lineNum":"  316","line":"            std::stringstream ss;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  317","line":"            ss << \"*** ERROR ***                                     \\n\"","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  318","line":"               << \"*** ERROR *** LattSim::CourantSnyderLatticeFunctions \\n\""},
{"lineNum":"  319","line":"               << \"*** ERROR *** cos( psi_V ) = \" << cs << \"\\n\"","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  320","line":"               << \"*** ERROR *** Lattice is unstable.                \\n\""},
{"lineNum":"  321","line":"               << \"*** ERROR *** Cannot continue with calculation.   \\n\""},
{"lineNum":"  322","line":"               << \"*** ERROR ***                                     \\n\""},
{"lineNum":"  323","line":"               << std::endl;"},
{"lineNum":"  324","line":""},
{"lineNum":"  325","line":"            throw std::runtime_error(ss.str());","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  326","line":"        }"},
{"lineNum":"  327","line":""},
{"lineNum":"  328","line":"        if( sn == 0.0 )","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  329","line":"        {"},
{"lineNum":"  330","line":"            std::stringstream ss;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  331","line":"            ss << \"*** ERROR ***                                     \\n\"","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  332","line":"               << \"*** ERROR *** LattSim::CourantSnyderLatticeFunctions \\n\""},
{"lineNum":"  333","line":"               << \"*** ERROR *** Integer vertical tune.              \\n\""},
{"lineNum":"  334","line":"               << \"*** ERROR ***                                     \\n\""},
{"lineNum":"  335","line":"               << std::endl;"},
{"lineNum":"  336","line":""},
{"lineNum":"  337","line":"            throw std::runtime_error(ss.str());","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  338","line":"        }"},
{"lineNum":"  339","line":""},
{"lineNum":"  340","line":"        double beta_y = jac(iy, ipy) / sn;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  341","line":"        double alpha_y = (jac(iy, iy) - jac(ipy, ipy)) / ( 2.0*sn );","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  342","line":""},
{"lineNum":"  343","line":"        double beta0H  = beta_x;"},
{"lineNum":"  344","line":"        double beta0V  = beta_y;"},
{"lineNum":"  345","line":"        double alpha0H = alpha_x;"},
{"lineNum":"  346","line":"        double alpha0V = alpha_y;"},
{"lineNum":"  347","line":""},
{"lineNum":"  348","line":"        double oldpsiH = 0.0;"},
{"lineNum":"  349","line":"        double oldpsiV = 0.0;"},
{"lineNum":"  350","line":""},
{"lineNum":"  351","line":"        double tb      = 0.0;"},
{"lineNum":"  352","line":"        double t       = 0.0;"},
{"lineNum":"  353","line":"        double lng     = 0.0;"},
{"lineNum":"  354","line":"        double psi_x   = 0.0;"},
{"lineNum":"  355","line":"        double psi_y   = 0.0;"},
{"lineNum":"  356","line":""},
{"lineNum":"  357","line":"        // trigon bunch"},
{"lineNum":"  358","line":"        Commxx comm;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  359","line":"        bunch_t<trigon_t> bunch(ref, comm.size(), comm);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  360","line":""},
{"lineNum":"  361","line":"        // design reference particle from the closed orbit"},
{"lineNum":"  362","line":"        auto ref_l = ref;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  363","line":"        ref_l.set_state(probe);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  364","line":"        bunch.set_design_reference_particle(ref_l);"},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":"        auto tparts = bunch.get_host_particles();"},
{"lineNum":"  367","line":""},
{"lineNum":"  368","line":"        // init value set to id map, ref points set to state"},
{"lineNum":"  369","line":"        // equivalent to jparticle.setState( particle.State() );"},
{"lineNum":"  370","line":"        for(int i=0; i<6; ++i)"},
{"lineNum":"  371","line":"            tparts(0, i).set(probe[i], i);","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  372","line":""},
{"lineNum":"  373","line":"        // check in"},
{"lineNum":"  374","line":"        bunch.checkin_particles();"},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"        // propagate trigon"},
{"lineNum":"  377","line":"        for(auto& elm : elms)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  378","line":"        {"},
{"lineNum":"  379","line":"            // At one time, dipoles with non-standard faces were discriminated"},
{"lineNum":"  380","line":"            // against and wouldn\'t have"},
{"lineNum":"  381","line":"            // their phase advance calculated."},
{"lineNum":"  382","line":"            // bool is_regular ="},
{"lineNum":"  383","line":"            //     ( ( typeid(*lbe) != typeid(rbend)    ) &&"},
{"lineNum":"  384","line":"            //     (   typeid(*lbe) != typeid(CF_rbend) ) &&"},
{"lineNum":"  385","line":"            //     (   typeid(*lbe) != typeid(Slot)     ) &&"},
{"lineNum":"  386","line":"            //     (   typeid(*lbe) != typeid(srot)     ) &&"},
{"lineNum":"  387","line":"            //     (     (*lbe).hasStandardFaces()      )  );"},
{"lineNum":"  388","line":""},
{"lineNum":"  389","line":"            bool is_regular = true;"},
{"lineNum":"  390","line":""},
{"lineNum":"  391","line":"            //lng += elm.OrbitLength( particle );"},
{"lineNum":"  392","line":"            lng += elm.get_length();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  393","line":"            FF_element::apply(elm, bunch);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  394","line":""},
{"lineNum":"  395","line":"            auto mtrx = bunch.get_jacobian(0);"},
{"lineNum":"  396","line":""},
{"lineNum":"  397","line":"            tb = mtrx(ix,ix) * beta0H -  mtrx(ix,ipx) * alpha0H;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  398","line":"            beta_x  = (tb * tb + mtrx(ix,ipx) * mtrx(ix,ipx))/beta0H;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  399","line":""},
{"lineNum":"  400","line":"            alpha_x = -1.0*(tb*(mtrx(ipx,ix)*beta0H - mtrx(ipx,ipx)*alpha0H)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  401","line":"                    + mtrx(ix,ipx)*mtrx(ipx,ipx))/beta0H;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  402","line":""},
{"lineNum":"  403","line":"            if ( is_regular )"},
{"lineNum":"  404","line":"            {"},
{"lineNum":"  405","line":"                 t = atan2(mtrx(ix,ipx),tb);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  406","line":""},
{"lineNum":"  407","line":"                 // numerical round off errs introduce unphisical jumps in phase"},
{"lineNum":"  408","line":"                 // while(t < oldpsiH) t += M_TWOPI;"},
{"lineNum":"  409","line":"                 while(t < oldpsiH*(1.-1.e-4)) t += mconstants::pi*2;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  410","line":""},
{"lineNum":"  411","line":"                 psi_x = oldpsiH = t;"},
{"lineNum":"  412","line":"             }"},
{"lineNum":"  413","line":"             else"},
{"lineNum":"  414","line":"             {"},
{"lineNum":"  415","line":"                 psi_x = oldpsiH;"},
{"lineNum":"  416","line":"             }"},
{"lineNum":"  417","line":""},
{"lineNum":"  418","line":"             tb = mtrx(iy,iy) * beta0V -  mtrx(iy,ipy) * alpha0V;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  419","line":"             beta_y = (tb * tb + mtrx(iy,ipy) * mtrx(iy,ipy))/beta0V;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  420","line":""},
{"lineNum":"  421","line":"             alpha_y = -1.0*(tb*(mtrx(ipy,iy)*beta0V - mtrx(ipy,ipy)*alpha0V)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  422","line":"                     + mtrx(iy,ipy)*mtrx(ipy,ipy))/beta0V;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  423","line":""},
{"lineNum":"  424","line":"             if ( is_regular )"},
{"lineNum":"  425","line":"             {"},
{"lineNum":"  426","line":"                 t = atan2(mtrx(iy,ipy),tb);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  427","line":""},
{"lineNum":"  428","line":"                 // numerical round off errs introduce unphisical jumps in phase"},
{"lineNum":"  429","line":"                 // while(t < oldpsiV) t += M_TWOPI;"},
{"lineNum":"  430","line":"                 while(t < oldpsiV*(1.-1.e-4)) t += mconstants::pi*2;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  431","line":""},
{"lineNum":"  432","line":"                 psi_y = oldpsiV = t;"},
{"lineNum":"  433","line":"             }"},
{"lineNum":"  434","line":"             else"},
{"lineNum":"  435","line":"             {"},
{"lineNum":"  436","line":"                 psi_y = oldpsiV;"},
{"lineNum":"  437","line":"             }"},
{"lineNum":"  438","line":""},
{"lineNum":"  439","line":"             elm.lf.arcLength = lng;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  440","line":"             elm.lf.beta.hor  = beta_x;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  441","line":"             elm.lf.beta.ver  = beta_y;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  442","line":"             elm.lf.alpha.hor = alpha_x;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  443","line":"             elm.lf.alpha.ver = alpha_y;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  444","line":"             elm.lf.psi.hor   = psi_x;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  445","line":"             elm.lf.psi.ver   = psi_y;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  446","line":""},
{"lineNum":"  447","line":"        }  // End loop on lbe ..."},
{"lineNum":"  448","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  449","line":""},
{"lineNum":"  450","line":"    template<class ELMS>"},
{"lineNum":"  451","line":"    void"},
{"lineNum":"  452","line":"    calc_dispersions_impl(Lattice& lattice, ELMS& elms)"},
{"lineNum":"  453","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  454","line":"        const double dpp = 0.0005;"},
{"lineNum":"  455","line":""},
{"lineNum":"  456","line":"        constexpr const int order = 2;"},
{"lineNum":"  457","line":"        using trigon_t = Trigon<double, order, 6>;"},
{"lineNum":"  458","line":""},
{"lineNum":"  459","line":"        const int ix  = 0;"},
{"lineNum":"  460","line":"        const int ipx = 1;"},
{"lineNum":"  461","line":"        const int iy  = 2;"},
{"lineNum":"  462","line":"        const int ipy = 3;"},
{"lineNum":"  463","line":""},
{"lineNum":"  464","line":"        auto const& ref = lattice.get_reference_particle();"},
{"lineNum":"  465","line":""},
{"lineNum":"  466","line":"        // Preliminary steps ..."},
{"lineNum":"  467","line":"        auto probe1 = calculate_closed_orbit(lattice, 0.0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  468","line":"        auto probe2 = calculate_closed_orbit(lattice, dpp);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  469","line":""},
{"lineNum":"  470","line":"        // propagate through elements"},
{"lineNum":"  471","line":"        Commxx comm;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  472","line":"        bunch_t<double> b1(ref, comm.size(), 1e9, comm);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  473","line":"        bunch_t<double> b2(ref, comm.size(), 1e9, comm);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  474","line":""},
{"lineNum":"  475","line":"        // design reference particle from the closed orbit"},
{"lineNum":"  476","line":"        auto ref1 = ref;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  477","line":"        ref1.set_state(probe1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  478","line":"        b1.set_design_reference_particle(ref1);"},
{"lineNum":"  479","line":""},
{"lineNum":"  480","line":"        auto ref2 = ref;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  481","line":"        ref2.set_state(probe2);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  482","line":"        b2.set_design_reference_particle(ref2);"},
{"lineNum":"  483","line":""},
{"lineNum":"  484","line":"        // local particle data"},
{"lineNum":"  485","line":"        auto part1 = b1.get_host_particles();"},
{"lineNum":"  486","line":"        auto part2 = b2.get_host_particles();"},
{"lineNum":"  487","line":""},
{"lineNum":"  488","line":"        // init value"},
{"lineNum":"  489","line":"        for(int i=0; i<6; ++i)"},
{"lineNum":"  490","line":"        {"},
{"lineNum":"  491","line":"            part1(0, i) = probe1[i];","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"  492","line":"            part2(0, i) = probe2[i];","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"  493","line":"        }"},
{"lineNum":"  494","line":""},
{"lineNum":"  495","line":"        // check in"},
{"lineNum":"  496","line":"        b1.checkin_particles();"},
{"lineNum":"  497","line":"        b2.checkin_particles();"},
{"lineNum":"  498","line":""},
{"lineNum":"  499","line":"        // arcLength"},
{"lineNum":"  500","line":"        double lng = 0.0;"},
{"lineNum":"  501","line":""},
{"lineNum":"  502","line":"        // Attach initial dispersion data to the elements..."},
{"lineNum":"  503","line":"        for(auto& elm : elms)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  504","line":"        {"},
{"lineNum":"  505","line":"            lng += elm.get_length();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  506","line":""},
{"lineNum":"  507","line":"            FF_element::apply(elm, b1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  508","line":"            FF_element::apply(elm, b2);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  509","line":""},
{"lineNum":"  510","line":"            b1.checkout_particles();"},
{"lineNum":"  511","line":"            b2.checkout_particles();"},
{"lineNum":"  512","line":""},
{"lineNum":"  513","line":"            std::array<double, 6> d;"},
{"lineNum":"  514","line":""},
{"lineNum":"  515","line":"            for(int i=0; i<6; ++i)"},
{"lineNum":"  516","line":"                d[i] = (part2(0, i) - part1(0, i)) / dpp;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  517","line":""},
{"lineNum":"  518","line":"            elm.lf.dispersion.hor = d[ix];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  519","line":"            elm.lf.dispersion.ver = d[iy];"},
{"lineNum":"  520","line":"            elm.lf.dPrime.hor     = d[ipx];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  521","line":"            elm.lf.dPrime.ver     = d[ipy];"},
{"lineNum":"  522","line":"            elm.lf.arcLength      = lng;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  523","line":"        }"},
{"lineNum":"  524","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  525","line":""},
{"lineNum":"  526","line":"}"},
{"lineNum":"  527","line":""},
{"lineNum":"  528","line":"#endif // __CUDA_ARCH"},
{"lineNum":"  529","line":""},
{"lineNum":"  530","line":"#endif // LATTICE_SIMULATOR_H"},
{"lineNum":"  531","line":""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 89, "covered" : 0,};
var merged_data = [];
