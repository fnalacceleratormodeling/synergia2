var data = {lines:[
{"lineNum":"    1","line":"/*============================================================================="},
{"lineNum":"    2","line":"    Copyright (c) 2001-2011 Joel de Guzman"},
{"lineNum":"    3","line":"    Copyright (c) 2011      Bryce Lelbach"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"    Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    6","line":"    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    7","line":"==============================================================================*/"},
{"lineNum":"    8","line":"#if !defined(BOOST_SPIRIT_REAL_APRIL_18_2006_0850AM)"},
{"lineNum":"    9","line":"#define BOOST_SPIRIT_REAL_APRIL_18_2006_0850AM"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"#if defined(_MSC_VER)"},
{"lineNum":"   12","line":"#pragma once"},
{"lineNum":"   13","line":"#endif"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"#include <boost/spirit/home/qi/skip_over.hpp>"},
{"lineNum":"   16","line":"#include <boost/spirit/home/qi/detail/enable_lit.hpp>"},
{"lineNum":"   17","line":"#include <boost/spirit/home/qi/meta_compiler.hpp>"},
{"lineNum":"   18","line":"#include <boost/spirit/home/qi/parser.hpp>"},
{"lineNum":"   19","line":"#include <boost/spirit/home/qi/numeric/real_policies.hpp>"},
{"lineNum":"   20","line":"#include <boost/spirit/home/qi/numeric/numeric_utils.hpp>"},
{"lineNum":"   21","line":"#include <boost/spirit/home/qi/numeric/detail/real_impl.hpp>"},
{"lineNum":"   22","line":"#include <boost/spirit/home/support/common_terminals.hpp>"},
{"lineNum":"   23","line":"#include <boost/type_traits/is_same.hpp>"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"namespace boost { namespace spirit"},
{"lineNum":"   26","line":"{"},
{"lineNum":"   27","line":"    namespace qi"},
{"lineNum":"   28","line":"    {"},
{"lineNum":"   29","line":"        ///////////////////////////////////////////////////////////////////////"},
{"lineNum":"   30","line":"        // forward declaration only"},
{"lineNum":"   31","line":"        template <typename T>"},
{"lineNum":"   32","line":"        struct real_policies;"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"        ///////////////////////////////////////////////////////////////////////"},
{"lineNum":"   35","line":"        // This is the class that the user can instantiate directly in"},
{"lineNum":"   36","line":"        // order to create a customized real parser"},
{"lineNum":"   37","line":"        template <typename T = double, typename Policies = real_policies<T> >"},
{"lineNum":"   38","line":"        struct real_parser"},
{"lineNum":"   39","line":"          : spirit::terminal<tag::stateful_tag<Policies, tag::double_, T> >"},
{"lineNum":"   40","line":"        {"},
{"lineNum":"   41","line":"            typedef tag::stateful_tag<Policies, tag::double_, T> tag_type;"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"            real_parser() {}"},
{"lineNum":"   44","line":"            real_parser(Policies const& p)"},
{"lineNum":"   45","line":"              : spirit::terminal<tag_type>(p) {}"},
{"lineNum":"   46","line":"        };"},
{"lineNum":"   47","line":"    }"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   50","line":"    // Enablers"},
{"lineNum":"   51","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   52","line":"    template <> // enables float_"},
{"lineNum":"   53","line":"    struct use_terminal<qi::domain, tag::float_>"},
{"lineNum":"   54","line":"      : mpl::true_ {};"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"    template <> // enables double_"},
{"lineNum":"   57","line":"    struct use_terminal<qi::domain, tag::double_>"},
{"lineNum":"   58","line":"      : mpl::true_ {};"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"    template <> // enables long_double"},
{"lineNum":"   61","line":"    struct use_terminal<qi::domain, tag::long_double>"},
{"lineNum":"   62","line":"      : mpl::true_ {};"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   65","line":"    template <typename A0> // enables lit(n)"},
{"lineNum":"   66","line":"    struct use_terminal<qi::domain"},
{"lineNum":"   67","line":"        , terminal_ex<tag::lit, fusion::vector1<A0> >"},
{"lineNum":"   68","line":"        , typename enable_if<is_same<A0, float> >::type>"},
{"lineNum":"   69","line":"      : mpl::true_ {};"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"    template <typename A0> // enables lit(n)"},
{"lineNum":"   72","line":"    struct use_terminal<qi::domain"},
{"lineNum":"   73","line":"        , terminal_ex<tag::lit, fusion::vector1<A0> >"},
{"lineNum":"   74","line":"        , typename enable_if<is_same<A0, double> >::type>"},
{"lineNum":"   75","line":"      : mpl::true_ {};"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"    template <typename A0> // enables lit(n)"},
{"lineNum":"   78","line":"    struct use_terminal<qi::domain"},
{"lineNum":"   79","line":"        , terminal_ex<tag::lit, fusion::vector1<A0> >"},
{"lineNum":"   80","line":"        , typename enable_if<is_same<A0, long double> >::type>"},
{"lineNum":"   81","line":"      : mpl::true_ {};"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   84","line":"    template <typename A0> // enables float_(...)"},
{"lineNum":"   85","line":"    struct use_terminal<qi::domain"},
{"lineNum":"   86","line":"      , terminal_ex<tag::float_, fusion::vector1<A0> >"},
{"lineNum":"   87","line":"    > : mpl::true_ {};"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"    template <typename A0> // enables double_(...)"},
{"lineNum":"   90","line":"    struct use_terminal<qi::domain"},
{"lineNum":"   91","line":"      , terminal_ex<tag::double_, fusion::vector1<A0> >"},
{"lineNum":"   92","line":"    > : mpl::true_ {};"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"    template <typename A0> // enables long_double(...)"},
{"lineNum":"   95","line":"    struct use_terminal<qi::domain"},
{"lineNum":"   96","line":"      , terminal_ex<tag::long_double, fusion::vector1<A0> >"},
{"lineNum":"   97","line":"    > : mpl::true_ {};"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"    template <> // enables *lazy* float_(...)"},
{"lineNum":"  100","line":"    struct use_lazy_terminal<qi::domain, tag::float_, 1>"},
{"lineNum":"  101","line":"      : mpl::true_ {};"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"    template <> // enables *lazy* double_(...)"},
{"lineNum":"  104","line":"    struct use_lazy_terminal<qi::domain, tag::double_, 1>"},
{"lineNum":"  105","line":"      : mpl::true_ {};"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"    template <> // enables *lazy* long_double_(...)"},
{"lineNum":"  108","line":"    struct use_lazy_terminal<qi::domain, tag::long_double, 1>"},
{"lineNum":"  109","line":"      : mpl::true_ {};"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  112","line":"    // enables custom real_parser"},
{"lineNum":"  113","line":"    template <typename T, typename Policies>"},
{"lineNum":"  114","line":"    struct use_terminal<qi::domain"},
{"lineNum":"  115","line":"        , tag::stateful_tag<Policies, tag::double_, T> >"},
{"lineNum":"  116","line":"      : mpl::true_ {};"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"    // enables custom real_parser(...)"},
{"lineNum":"  119","line":"    template <typename T, typename Policies, typename A0>"},
{"lineNum":"  120","line":"    struct use_terminal<qi::domain"},
{"lineNum":"  121","line":"        , terminal_ex<tag::stateful_tag<Policies, tag::double_, T>"},
{"lineNum":"  122","line":"        , fusion::vector1<A0> > >"},
{"lineNum":"  123","line":"      : mpl::true_ {};"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"    // enables *lazy* custom real_parser(...)"},
{"lineNum":"  126","line":"    template <typename T, typename Policies>"},
{"lineNum":"  127","line":"    struct use_lazy_terminal<"},
{"lineNum":"  128","line":"        qi::domain"},
{"lineNum":"  129","line":"      , tag::stateful_tag<Policies, tag::double_, T>"},
{"lineNum":"  130","line":"      , 1 // arity"},
{"lineNum":"  131","line":"    > : mpl::true_ {};"},
{"lineNum":"  132","line":"}}"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"namespace boost { namespace spirit { namespace qi"},
{"lineNum":"  135","line":"{"},
{"lineNum":"  136","line":"#ifndef BOOST_SPIRIT_NO_PREDEFINED_TERMINALS"},
{"lineNum":"  137","line":"    using spirit::float_;"},
{"lineNum":"  138","line":"    using spirit::double_;"},
{"lineNum":"  139","line":"    using spirit::long_double;"},
{"lineNum":"  140","line":"    using spirit::lit; // lit(1.0) is equivalent to 1.0"},
{"lineNum":"  141","line":"#endif"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"    using spirit::float_type;"},
{"lineNum":"  144","line":"    using spirit::double_type;"},
{"lineNum":"  145","line":"    using spirit::long_double_type;"},
{"lineNum":"  146","line":"    using spirit::lit_type;"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  149","line":"    // This is the actual real number parser"},
{"lineNum":"  150","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  151","line":"    template <typename T, typename RealPolicies = real_policies<T> >"},
{"lineNum":"  152","line":"    struct any_real_parser"},
{"lineNum":"  153","line":"      : primitive_parser<any_real_parser<T, RealPolicies> >"},
{"lineNum":"  154","line":"    {"},
{"lineNum":"  155","line":"        template <typename Context, typename Iterator>"},
{"lineNum":"  156","line":"        struct attribute"},
{"lineNum":"  157","line":"        {"},
{"lineNum":"  158","line":"            typedef T type;"},
{"lineNum":"  159","line":"        };"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"        template <typename Iterator, typename Context, typename Skipper>"},
{"lineNum":"  162","line":"        bool parse(Iterator& first, Iterator const& last"},
{"lineNum":"  163","line":"          , Context& /*context*/, Skipper const& skipper"},
{"lineNum":"  164","line":"          , T& attr_) const"},
{"lineNum":"  165","line":"        {"},
{"lineNum":"  166","line":"            typedef detail::real_impl<T, RealPolicies> extract;"},
{"lineNum":"  167","line":"            qi::skip_over(first, last, skipper);"},
{"lineNum":"  168","line":"            return extract::parse(first, last, attr_, RealPolicies());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  169","line":"        }"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"        template <typename Iterator, typename Context"},
{"lineNum":"  172","line":"          , typename Skipper, typename Attribute>"},
{"lineNum":"  173","line":"        bool parse(Iterator& first, Iterator const& last"},
{"lineNum":"  174","line":"          , Context& context, Skipper const& skipper"},
{"lineNum":"  175","line":"          , Attribute& attr_param) const"},
{"lineNum":"  176","line":"        {"},
{"lineNum":"  177","line":"            // this case is called when Attribute is not T"},
{"lineNum":"  178","line":"            T attr_;"},
{"lineNum":"  179","line":"            if (parse(first, last, context, skipper, attr_))"},
{"lineNum":"  180","line":"            {"},
{"lineNum":"  181","line":"                traits::assign_to(attr_, attr_param);"},
{"lineNum":"  182","line":"                return true;"},
{"lineNum":"  183","line":"            }"},
{"lineNum":"  184","line":"            return false;"},
{"lineNum":"  185","line":"        }"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"        template <typename Context>"},
{"lineNum":"  188","line":"        info what(Context& /*context*/) const"},
{"lineNum":"  189","line":"        {"},
{"lineNum":"  190","line":"            return info(\"real\");"},
{"lineNum":"  191","line":"        }"},
{"lineNum":"  192","line":"    };"},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"    template <typename T, typename RealPolicies = real_policies<T>"},
{"lineNum":"  195","line":"            , bool no_attribute = true>"},
{"lineNum":"  196","line":"    struct literal_real_parser"},
{"lineNum":"  197","line":"      : primitive_parser<literal_real_parser<T, RealPolicies, no_attribute> >"},
{"lineNum":"  198","line":"    {"},
{"lineNum":"  199","line":"        template <typename Value>"},
{"lineNum":"  200","line":"        literal_real_parser(Value const& n) : n_(n) {}"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"        template <typename Context, typename Iterator>"},
{"lineNum":"  203","line":"        struct attribute"},
{"lineNum":"  204","line":"          : mpl::if_c<no_attribute, unused_type, T>"},
{"lineNum":"  205","line":"        {};"},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"        template <typename Iterator, typename Context"},
{"lineNum":"  208","line":"          , typename Skipper, typename Attribute>"},
{"lineNum":"  209","line":"        bool parse(Iterator& first, Iterator const& last"},
{"lineNum":"  210","line":"          , Context&, Skipper const& skipper"},
{"lineNum":"  211","line":"          , Attribute& attr_param) const"},
{"lineNum":"  212","line":"        {"},
{"lineNum":"  213","line":"            typedef detail::real_impl<T, RealPolicies> extract;"},
{"lineNum":"  214","line":"            qi::skip_over(first, last, skipper);"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"            Iterator save = first;"},
{"lineNum":"  217","line":"            T attr_;"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"            if (extract::parse(first, last, attr_, RealPolicies()) &&"},
{"lineNum":"  220","line":"                (attr_ == n_))"},
{"lineNum":"  221","line":"            {"},
{"lineNum":"  222","line":"                traits::assign_to(attr_, attr_param);"},
{"lineNum":"  223","line":"                return true;"},
{"lineNum":"  224","line":"            }"},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"            first = save;"},
{"lineNum":"  227","line":"            return false;"},
{"lineNum":"  228","line":"        }"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"        template <typename Context>"},
{"lineNum":"  231","line":"        info what(Context& /*context*/) const"},
{"lineNum":"  232","line":"        {"},
{"lineNum":"  233","line":"            return info(\"real\");"},
{"lineNum":"  234","line":"        }"},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":"        T n_;"},
{"lineNum":"  237","line":"    };"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  240","line":"    // Parser generators: make_xxx function (objects)"},
{"lineNum":"  241","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  242","line":"    template <typename T, typename Policies = real_policies<T> >"},
{"lineNum":"  243","line":"    struct make_real"},
{"lineNum":"  244","line":"    {"},
{"lineNum":"  245","line":"        typedef any_real_parser<T, Policies> result_type;"},
{"lineNum":"  246","line":""},
{"lineNum":"  247","line":"        result_type operator()(unused_type, unused_type) const"},
{"lineNum":"  248","line":"        {"},
{"lineNum":"  249","line":"            return result_type();"},
{"lineNum":"  250","line":"        }"},
{"lineNum":"  251","line":"    };"},
{"lineNum":"  252","line":""},
{"lineNum":"  253","line":"    template <typename T, typename Policies = real_policies<T> >"},
{"lineNum":"  254","line":"    struct make_direct_real"},
{"lineNum":"  255","line":"    {"},
{"lineNum":"  256","line":"        typedef literal_real_parser<T, Policies, false> result_type;"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"        template <typename Terminal>"},
{"lineNum":"  259","line":"        result_type operator()(Terminal const& term, unused_type) const"},
{"lineNum":"  260","line":"        {"},
{"lineNum":"  261","line":"            return result_type(T(fusion::at_c<0>(term.args)));"},
{"lineNum":"  262","line":"        }"},
{"lineNum":"  263","line":"    };"},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"    template <typename T, typename Policies = real_policies<T> >"},
{"lineNum":"  266","line":"    struct make_literal_real"},
{"lineNum":"  267","line":"    {"},
{"lineNum":"  268","line":"        typedef literal_real_parser<T, Policies> result_type;"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"        template <typename Terminal>"},
{"lineNum":"  271","line":"        result_type operator()(Terminal const& term, unused_type) const"},
{"lineNum":"  272","line":"        {"},
{"lineNum":"  273","line":"            return result_type(fusion::at_c<0>(term.args));"},
{"lineNum":"  274","line":"        }"},
{"lineNum":"  275","line":"    };"},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  278","line":"    template <typename Modifiers, typename A0>"},
{"lineNum":"  279","line":"    struct make_primitive<"},
{"lineNum":"  280","line":"          terminal_ex<tag::lit, fusion::vector1<A0> >"},
{"lineNum":"  281","line":"        , Modifiers, typename enable_if<is_same<A0, float> >::type>"},
{"lineNum":"  282","line":"      : make_literal_real<float> {};"},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"    template <typename Modifiers, typename A0>"},
{"lineNum":"  285","line":"    struct make_primitive<"},
{"lineNum":"  286","line":"          terminal_ex<tag::lit, fusion::vector1<A0> >"},
{"lineNum":"  287","line":"        , Modifiers, typename enable_if<is_same<A0, double> >::type>"},
{"lineNum":"  288","line":"      : make_literal_real<double> {};"},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"    template <typename Modifiers, typename A0>"},
{"lineNum":"  291","line":"    struct make_primitive<"},
{"lineNum":"  292","line":"          terminal_ex<tag::lit, fusion::vector1<A0> >"},
{"lineNum":"  293","line":"        , Modifiers, typename enable_if<is_same<A0, long double> >::type>"},
{"lineNum":"  294","line":"      : make_literal_real<long double> {};"},
{"lineNum":"  295","line":""},
{"lineNum":"  296","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  297","line":"    template <typename T, typename Policies, typename Modifiers>"},
{"lineNum":"  298","line":"    struct make_primitive<"},
{"lineNum":"  299","line":"        tag::stateful_tag<Policies, tag::double_, T>, Modifiers>"},
{"lineNum":"  300","line":"      : make_real<T, Policies> {};"},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":"    template <typename T, typename Policies, typename A0, typename Modifiers>"},
{"lineNum":"  303","line":"    struct make_primitive<"},
{"lineNum":"  304","line":"        terminal_ex<tag::stateful_tag<Policies, tag::double_, T>"},
{"lineNum":"  305","line":"      , fusion::vector1<A0> >, Modifiers>"},
{"lineNum":"  306","line":"      : make_direct_real<T, Policies> {};"},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  309","line":"    template <typename Modifiers>"},
{"lineNum":"  310","line":"    struct make_primitive<tag::float_, Modifiers>"},
{"lineNum":"  311","line":"      : make_real<float> {};"},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":"    template <typename Modifiers, typename A0>"},
{"lineNum":"  314","line":"    struct make_primitive<"},
{"lineNum":"  315","line":"        terminal_ex<tag::float_"},
{"lineNum":"  316","line":"      , fusion::vector1<A0> >, Modifiers>"},
{"lineNum":"  317","line":"      : make_direct_real<float> {};"},
{"lineNum":"  318","line":""},
{"lineNum":"  319","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  320","line":"    template <typename Modifiers>"},
{"lineNum":"  321","line":"    struct make_primitive<tag::double_, Modifiers>"},
{"lineNum":"  322","line":"      : make_real<double> {};"},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"    template <typename Modifiers, typename A0>"},
{"lineNum":"  325","line":"    struct make_primitive<"},
{"lineNum":"  326","line":"        terminal_ex<tag::double_"},
{"lineNum":"  327","line":"      , fusion::vector1<A0> >, Modifiers>"},
{"lineNum":"  328","line":"      : make_direct_real<double> {};"},
{"lineNum":"  329","line":""},
{"lineNum":"  330","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  331","line":"    template <typename Modifiers>"},
{"lineNum":"  332","line":"    struct make_primitive<tag::long_double, Modifiers>"},
{"lineNum":"  333","line":"      : make_real<long double> {};"},
{"lineNum":"  334","line":""},
{"lineNum":"  335","line":"    template <typename Modifiers, typename A0>"},
{"lineNum":"  336","line":"    struct make_primitive<"},
{"lineNum":"  337","line":"        terminal_ex<tag::long_double"},
{"lineNum":"  338","line":"      , fusion::vector1<A0> >, Modifiers>"},
{"lineNum":"  339","line":"      : make_direct_real<long double> {};"},
{"lineNum":"  340","line":"}}}"},
{"lineNum":"  341","line":""},
{"lineNum":"  342","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 1, "covered" : 0,};
var merged_data = [];
