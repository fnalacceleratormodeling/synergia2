var data = {lines:[
{"lineNum":"    1","line":""},
{"lineNum":"    2","line":"#include \"synergia/simulation/propagator.h\""},
{"lineNum":"    3","line":"#include \"synergia/simulation/checkpoint.h\""},
{"lineNum":"    4","line":"#include \"synergia/simulation/bunch_simulator.h\""},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"//#include \"synergia/utils/simple_timer.h\""},
{"lineNum":"    7","line":"#include \"synergia/utils/digits.h\""},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"#if 0"},
{"lineNum":"   10","line":"// avoid bad interaction between Boost Filesystem and clang"},
{"lineNum":"   11","line":"#define BOOST_NO_CXX11_SCOPED_ENUMS"},
{"lineNum":"   12","line":"#include <boost/filesystem.hpp>"},
{"lineNum":"   13","line":"#endif"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"#if 0"},
{"lineNum":"   16","line":"const std::string Propagator::default_checkpoint_dir = \"checkpoint\";"},
{"lineNum":"   17","line":"const std::string Propagator::description_file_name = \"checkpoint_description.txt\";"},
{"lineNum":"   18","line":"const std::string Propagator::propagator_archive_name = \"propagator.bina\";"},
{"lineNum":"   19","line":"const std::string Propagator::propagator_xml_archive_name = \"propagator.xml\";"},
{"lineNum":"   20","line":"const std::string Propagator::state_archive_name = \"state.bina\";"},
{"lineNum":"   21","line":"const std::string Propagator::state_xml_archive_name = \"state.xml\";"},
{"lineNum":"   22","line":"const std::string Propagator::log_file_name = \"log\";"},
{"lineNum":"   23","line":"const std::string Propagator::stop_file_name = \"stop\";"},
{"lineNum":"   24","line":"const std::string Propagator::alt_stop_file_name = \"STOPTHISTIMEIMEANIT\";"},
{"lineNum":"   25","line":"const int Propagator::default_checkpoint_period = 10;"},
{"lineNum":"   26","line":"const int Propagator::default_concurrent_io = 1;"},
{"lineNum":"   27","line":"#endif"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"#if 0"},
{"lineNum":"   30","line":"Propagator::State::State(Bunch_simulator * bunch_simulator_ptr,"},
{"lineNum":"   31","line":"        Propagate_actions * propagate_actions_ptr, int num_turns,"},
{"lineNum":"   32","line":"        int first_turn, int max_turns, int verbosity) :"},
{"lineNum":"   33","line":"    bunch_simulator_ptr(bunch_simulator_ptr), bunch_train_simulator_ptr(0),"},
{"lineNum":"   34","line":"            propagate_actions_ptr(propagate_actions_ptr), num_turns(num_turns),"},
{"lineNum":"   35","line":"            first_turn(first_turn), max_turns(max_turns), verbosity(verbosity)"},
{"lineNum":"   36","line":"{"},
{"lineNum":"   37","line":"}"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"Propagator::State::State(Bunch_train_simulator * bunch_train_simulator_ptr,"},
{"lineNum":"   40","line":"        Propagate_actions * propagate_actions_ptr, int num_turns,"},
{"lineNum":"   41","line":"        int first_turn, int max_turns, int verbosity) :"},
{"lineNum":"   42","line":"    bunch_simulator_ptr(0), bunch_train_simulator_ptr(bunch_train_simulator_ptr),"},
{"lineNum":"   43","line":"            propagate_actions_ptr(propagate_actions_ptr), num_turns(num_turns),"},
{"lineNum":"   44","line":"            first_turn(first_turn), max_turns(max_turns), verbosity(verbosity)"},
{"lineNum":"   45","line":"{"},
{"lineNum":"   46","line":"}"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"template<class Archive>"},
{"lineNum":"   49","line":"    void"},
{"lineNum":"   50","line":"    Propagator::State::serialize(Archive & ar, const unsigned int version)"},
{"lineNum":"   51","line":"    {"},
{"lineNum":"   52","line":"        ar & BOOST_SERIALIZATION_NVP(bunch_simulator_ptr);"},
{"lineNum":"   53","line":"        ar & BOOST_SERIALIZATION_NVP(bunch_train_simulator_ptr);"},
{"lineNum":"   54","line":"        ar & BOOST_SERIALIZATION_NVP(propagate_actions_ptr);"},
{"lineNum":"   55","line":"        ar & BOOST_SERIALIZATION_NVP(num_turns);"},
{"lineNum":"   56","line":"        ar & BOOST_SERIALIZATION_NVP(first_turn);"},
{"lineNum":"   57","line":"        ar & BOOST_SERIALIZATION_NVP(max_turns);"},
{"lineNum":"   58","line":"        ar & BOOST_SERIALIZATION_NVP(verbosity);"},
{"lineNum":"   59","line":"    }"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"template"},
{"lineNum":"   62","line":"void"},
{"lineNum":"   63","line":"Propagator::State::serialize<boost::archive::binary_oarchive >("},
{"lineNum":"   64","line":"        boost::archive::binary_oarchive & ar, const unsigned int version);"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"template"},
{"lineNum":"   67","line":"void"},
{"lineNum":"   68","line":"Propagator::State::serialize<boost::archive::xml_oarchive >("},
{"lineNum":"   69","line":"        boost::archive::xml_oarchive & ar, const unsigned int version);"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"template"},
{"lineNum":"   72","line":"void"},
{"lineNum":"   73","line":"Propagator::State::serialize<boost::archive::binary_iarchive >("},
{"lineNum":"   74","line":"        boost::archive::binary_iarchive & ar, const unsigned int version);"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"template"},
{"lineNum":"   77","line":"void"},
{"lineNum":"   78","line":"Propagator::State::serialize<boost::archive::xml_iarchive >("},
{"lineNum":"   79","line":"        boost::archive::xml_iarchive & ar, const unsigned int version);"},
{"lineNum":"   80","line":"#endif"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"#if 0"},
{"lineNum":"   84","line":"// omp_threads >= 0 uses the number of threads set by default or by the OMP_NUM_THREADS"},
{"lineNum":"   85","line":"// environmental variable"},
{"lineNum":"   86","line":"Propagator::Propagator(Stepper_sptr stepper_sptr) :"},
{"lineNum":"   87","line":"        stepper_sptr(stepper_sptr), checkpoint_period("},
{"lineNum":"   88","line":"                default_checkpoint_period), checkpoint_dir("},
{"lineNum":"   89","line":"                default_checkpoint_dir), checkpoint_with_xml(false), concurrent_io("},
{"lineNum":"   90","line":"                default_concurrent_io), final_checkpoint(false), omp_threads(-1)"},
{"lineNum":"   91","line":"{"},
{"lineNum":"   92","line":"}"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"Propagator::Propagator()"},
{"lineNum":"   95","line":"    : omp_threads(-1)"},
{"lineNum":"   96","line":"{"},
{"lineNum":"   97","line":"}"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"Stepper_sptr"},
{"lineNum":"  100","line":"Propagator::get_stepper_sptr()"},
{"lineNum":"  101","line":"{"},
{"lineNum":"  102","line":"    return stepper_sptr;"},
{"lineNum":"  103","line":"}"},
{"lineNum":"  104","line":"#endif"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"#if 0"},
{"lineNum":"  107","line":"void"},
{"lineNum":"  108","line":"Propagator::set_checkpoint_period(int period)"},
{"lineNum":"  109","line":"{"},
{"lineNum":"  110","line":"    checkpoint_period = period;"},
{"lineNum":"  111","line":"}"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"int"},
{"lineNum":"  114","line":"Propagator::get_checkpoint_period() const"},
{"lineNum":"  115","line":"{"},
{"lineNum":"  116","line":"    return checkpoint_period;"},
{"lineNum":"  117","line":"}"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"void"},
{"lineNum":"  120","line":"Propagator::set_checkpoint_with_xml(bool with_xml)"},
{"lineNum":"  121","line":"{"},
{"lineNum":"  122","line":"    checkpoint_with_xml = with_xml;"},
{"lineNum":"  123","line":"}"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"bool"},
{"lineNum":"  126","line":"Propagator::get_checkpoint_with_xml() const"},
{"lineNum":"  127","line":"{"},
{"lineNum":"  128","line":"    return checkpoint_with_xml;"},
{"lineNum":"  129","line":"}"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"void"},
{"lineNum":"  132","line":"Propagator::set_final_checkpoint(bool final_checkpoint)"},
{"lineNum":"  133","line":"{"},
{"lineNum":"  134","line":"  this->final_checkpoint = final_checkpoint;"},
{"lineNum":"  135","line":"}"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"bool"},
{"lineNum":"  138","line":"Propagator::get_final_checkpoint() const"},
{"lineNum":"  139","line":"{"},
{"lineNum":"  140","line":"  return final_checkpoint;"},
{"lineNum":"  141","line":"}"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"void"},
{"lineNum":"  144","line":"Propagator::set_checkpoint_dir(std::string const& directory_name)"},
{"lineNum":"  145","line":"{"},
{"lineNum":"  146","line":"    checkpoint_dir = directory_name;"},
{"lineNum":"  147","line":"}"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"std::string const&"},
{"lineNum":"  150","line":"Propagator::get_checkpoint_dir() const"},
{"lineNum":"  151","line":"{"},
{"lineNum":"  152","line":"    return checkpoint_dir;"},
{"lineNum":"  153","line":"}"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"void"},
{"lineNum":"  156","line":"Propagator::set_concurrent_io(int max)"},
{"lineNum":"  157","line":"{"},
{"lineNum":"  158","line":"    concurrent_io = max;"},
{"lineNum":"  159","line":"}"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"int"},
{"lineNum":"  162","line":"Propagator::get_concurrent_io() const"},
{"lineNum":"  163","line":"{"},
{"lineNum":"  164","line":"    return concurrent_io;"},
{"lineNum":"  165","line":"}"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"void"},
{"lineNum":"  168","line":"Propagator::set_num_threads(int nt)"},
{"lineNum":"  169","line":"{"},
{"lineNum":"  170","line":"    if (nt <= 0) {"},
{"lineNum":"  171","line":"         return;"},
{"lineNum":"  172","line":"    }"},
{"lineNum":"  173","line":"    omp_threads = nt;"},
{"lineNum":"  174","line":"    omp_set_num_threads(omp_threads);"},
{"lineNum":"  175","line":"}"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"int"},
{"lineNum":"  178","line":"Propagator::get_num_threads() const"},
{"lineNum":"  179","line":"{"},
{"lineNum":"  180","line":"    return omp_threads;"},
{"lineNum":"  181","line":"}"},
{"lineNum":"  182","line":"#endif"},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"void"},
{"lineNum":"  185","line":"Propagator::do_before_start(Bunch_simulator & simulator, Logger & logger)"},
{"lineNum":"  186","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  187","line":"#if 0"},
{"lineNum":"  188","line":"    if (state.first_turn == 0)"},
{"lineNum":"  189","line":"    {"},
{"lineNum":"  190","line":"        Reference_particle const & lattice_reference_particle ="},
{"lineNum":"  191","line":"                stepper_sptr->get_lattice_simulator().get_lattice().get_reference_particle();"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"        if (state.bunch_simulator_ptr)"},
{"lineNum":"  194","line":"        {"},
{"lineNum":"  195","line":"            state.bunch_simulator_ptr->get_diagnostics_actions().first_action("},
{"lineNum":"  196","line":"                    *stepper_sptr, state.bunch_simulator_ptr->get_bunch());"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"            // set the bunch design_reference_particle from lattice reference particle"},
{"lineNum":"  199","line":"            state.bunch_simulator_ptr->get_bunch().set_design_reference_particle("},
{"lineNum":"  200","line":"                    lattice_reference_particle);"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"        }"},
{"lineNum":"  203","line":"        else"},
{"lineNum":"  204","line":"        {"},
{"lineNum":"  205","line":"            size_t num_bunches = state.bunch_train_simulator_ptr->get_bunch_train().get_size();"},
{"lineNum":"  206","line":"            for (int i = 0; i < num_bunches; ++i)"},
{"lineNum":"  207","line":"            {"},
{"lineNum":"  208","line":"                state.bunch_train_simulator_ptr->get_diagnostics_actionss().at("},
{"lineNum":"  209","line":"                        i)->first_action(*stepper_sptr,"},
{"lineNum":"  210","line":"                        *(state.bunch_train_simulator_ptr->get_bunch_train().get_bunches().at("},
{"lineNum":"  211","line":"                                i)));"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"                // set the bunch design_reference_particle from lattice reference particle"},
{"lineNum":"  214","line":"                state.bunch_train_simulator_ptr->get_bunch_train().get_bunches().at(i)"},
{"lineNum":"  215","line":"                    ->set_design_reference_particle(lattice_reference_particle);"},
{"lineNum":"  216","line":"            }"},
{"lineNum":"  217","line":"        }"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"        t = simple_timer_show(t, \"propagate-diagnostics_actions_first\");"},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"        if (state.bunch_simulator_ptr)"},
{"lineNum":"  223","line":"        {"},
{"lineNum":"  224","line":"            state.propagate_actions_ptr->first_action(*stepper_sptr,"},
{"lineNum":"  225","line":"                    state.bunch_simulator_ptr->get_bunch());"},
{"lineNum":"  226","line":"        }"},
{"lineNum":"  227","line":"        else"},
{"lineNum":"  228","line":"        {"},
{"lineNum":"  229","line":"            state.propagate_actions_ptr->first_action(*stepper_sptr,"},
{"lineNum":"  230","line":"                    state.bunch_train_simulator_ptr->get_bunch_train());"},
{"lineNum":"  231","line":"        }"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"        t = simple_timer_show(t, \"propagate-general_actions_first\");"},
{"lineNum":"  234","line":"    }"},
{"lineNum":"  235","line":"#endif"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"    if (simulator.current_turn() == 0)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  238","line":"    {"},
{"lineNum":"  239","line":"        simulator.diag_action_step_and_turn(PRE_TURN, FINAL_STEP);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  240","line":"        simulator.prop_action_first(lattice);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  241","line":"        simulator.set_lattice_reference_particle(lattice.get_reference_particle());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  242","line":"    }"},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"    auto updates = lattice.update();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  245","line":"    //if (updates.structure) steps = stepper.apply(lattice);"},
{"lineNum":"  246","line":"}"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"void"},
{"lineNum":"  249","line":"Propagator::do_start_repetition(Bunch_simulator & simulator)"},
{"lineNum":"  250","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  251","line":"#if 0"},
{"lineNum":"  252","line":"    if (state.bunch_simulator_ptr) {"},
{"lineNum":"  253","line":"        state.bunch_simulator_ptr->get_bunch().get_reference_particle().start_repetition();"},
{"lineNum":"  254","line":"    } else {"},
{"lineNum":"  255","line":"        Bunches & bunches("},
{"lineNum":"  256","line":"                state.bunch_train_simulator_ptr->get_bunch_train().get_bunches());"},
{"lineNum":"  257","line":"        for (Bunches::iterator it = bunches.begin(); it != bunches.end();"},
{"lineNum":"  258","line":"                ++it) {"},
{"lineNum":"  259","line":"            (*it)->get_reference_particle().start_repetition();"},
{"lineNum":"  260","line":"        }"},
{"lineNum":"  261","line":"    }"},
{"lineNum":"  262","line":"#endif"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"    for(auto & bunch : simulator[0].get_bunches())","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  265","line":"        bunch.get_reference_particle().start_repetition();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"    for(auto & bunch : simulator[1].get_bunches())","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  268","line":"        bunch.get_reference_particle().start_repetition();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  269","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"void"},
{"lineNum":"  272","line":"Propagator::do_step("},
{"lineNum":"  273","line":"        Bunch_simulator & simulator,"},
{"lineNum":"  274","line":"        Step & step,"},
{"lineNum":"  275","line":"        int step_count,"},
{"lineNum":"  276","line":"        int turn_count,"},
{"lineNum":"  277","line":"        Logger & logger)"},
{"lineNum":"  278","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  279","line":"    double t_step0 = MPI_Wtime();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"    // make sure the lattice is up-to-date"},
{"lineNum":"  282","line":"    // e.g., update the chef_lattice after any of the"},
{"lineNum":"  283","line":"    // lattice elements has been updated"},
{"lineNum":"  284","line":"    lattice.update();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  285","line":""},
{"lineNum":"  286","line":"    // propagate through the step"},
{"lineNum":"  287","line":"    step.apply(simulator, logger);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"    // t = simple_timer_show(t, \"propagate-step_apply\");"},
{"lineNum":"  290","line":""},
{"lineNum":"  291","line":"    // operations associated with bunches"},
{"lineNum":"  292","line":"    // e.g., bunch longitudinal operations (periodic, zcut, etc)"},
{"lineNum":"  293","line":"    // these operations are not from lattices so are not included"},
{"lineNum":"  294","line":"    // in the steps"},
{"lineNum":"  295","line":"    // now I believe this can be included as part of the"},
{"lineNum":"  296","line":"    // prop_action_step_end() method"},
{"lineNum":"  297","line":"    // simulator.bunch_operation_step_end();"},
{"lineNum":"  298","line":"    // t = simple_timer_show(t, \"propagate-bunch_operations_step\");"},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"    // general diagnostics"},
{"lineNum":"  301","line":"    simulator.diag_action_step_and_turn(turn_count, step_count);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  302","line":"    // t = simple_timer_show(t, \"propagate-diagnostics_actions_step\");"},
{"lineNum":"  303","line":""},
{"lineNum":"  304","line":"    // propagate action"},
{"lineNum":"  305","line":"    simulator.prop_action_step_end(lattice, turn_count, step_count);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  306","line":"    // t = simple_timer_show(t, \"propagate-general_actions-step\");"},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"    double t_step1 = MPI_Wtime();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  309","line":""},
{"lineNum":"  310","line":"    logger(LoggerV::INFO_STEP)"},
{"lineNum":"  311","line":"        << \"Propagator: step \" << std::setw(digits(steps.size()))"},
{"lineNum":"  312","line":"        << step_count << \"/\" << steps.size()"},
{"lineNum":"  313","line":""},
{"lineNum":"  314","line":"        << \", s_n = \" << std::fixed << std::setprecision(4)"},
{"lineNum":"  315","line":"        << simulator[0][0].get_reference_particle().get_s_n()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  316","line":""},
{"lineNum":"  317","line":"        << \", time = \" << std::fixed << std::setprecision(3)"},
{"lineNum":"  318","line":"        << t_step1 - t_step0 << \"s, macroparticles = \";","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  319","line":""},
{"lineNum":"  320","line":"    for(auto const& train : simulator.get_trains())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  321","line":"    {"},
{"lineNum":"  322","line":"        logger << \"(\";"},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"        for(auto const& bunch : train.get_bunches())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  325","line":"        {"},
{"lineNum":"  326","line":"            logger << bunch.get_total_num();"},
{"lineNum":"  327","line":"            if (bunch.get_array_index() != train.get_bunch_array_size()-1)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  328","line":"                logger << \", \";"},
{"lineNum":"  329","line":"        }"},
{"lineNum":"  330","line":""},
{"lineNum":"  331","line":"        logger << \")\";"},
{"lineNum":"  332","line":"        if (train.get_index() == 0) logger << \" / \";","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  333","line":"    }"},
{"lineNum":"  334","line":""},
{"lineNum":"  335","line":"    logger << \"\\n\";"},
{"lineNum":"  336","line":""},
{"lineNum":"  337","line":"    logger(LoggerV::INFO_OPR) << \"\\n\\n\";"},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"#if 0"},
{"lineNum":"  340","line":"    double t_step0 = MPI_Wtime();"},
{"lineNum":"  341","line":""},
{"lineNum":"  342","line":"    if (state.bunch_simulator_ptr)"},
{"lineNum":"  343","line":"    {"},
{"lineNum":"  344","line":"        Bunch & bunch(state.bunch_simulator_ptr->get_bunch());"},
{"lineNum":"  345","line":""},
{"lineNum":"  346","line":"        Diagnostics_actions & diagnostics_actions("},
{"lineNum":"  347","line":"                state.bunch_simulator_ptr->get_diagnostics_actions());"},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"        step.apply(bunch, state.verbosity,"},
{"lineNum":"  350","line":"                diagnostics_actions.get_per_operator_diagnosticss(),"},
{"lineNum":"  351","line":"                diagnostics_actions.get_per_operation_diagnosticss(), *stepper_sptr, logger);"},
{"lineNum":"  352","line":""},
{"lineNum":"  353","line":"        t = simple_timer_show(t, \"propagate-step_apply\");"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"        diagnostics_actions.step_end_action("},
{"lineNum":"  356","line":"                *stepper_sptr, step, bunch, turn, step_count);"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"        t = simple_timer_show(t, \"propagate-diagnostics_actions_step\");"},
{"lineNum":"  359","line":""},
{"lineNum":"  360","line":"        state.propagate_actions_ptr->step_end_action("},
{"lineNum":"  361","line":"                *stepper_sptr, step, bunch, turn, step_count);"},
{"lineNum":"  362","line":"    }"},
{"lineNum":"  363","line":"    else"},
{"lineNum":"  364","line":"    {"},
{"lineNum":"  365","line":"        Bunch_train & bunch_train("},
{"lineNum":"  366","line":"                state.bunch_train_simulator_ptr->get_bunch_train());"},
{"lineNum":"  367","line":"        Diagnostics_actionss & diagnostics_actionss("},
{"lineNum":"  368","line":"                state.bunch_train_simulator_ptr->get_diagnostics_actionss());"},
{"lineNum":"  369","line":"        size_t num_bunches ="},
{"lineNum":"  370","line":"                state.bunch_train_simulator_ptr->get_bunch_train().get_size();"},
{"lineNum":"  371","line":"        Train_diagnosticss per_operator_train_diagnosticss(num_bunches),"},
{"lineNum":"  372","line":"                per_operation_train_diagnosticss(num_bunches);"},
{"lineNum":"  373","line":"        for (int i = 0; i < num_bunches; ++i) {"},
{"lineNum":"  374","line":"            per_operator_train_diagnosticss.at(i) ="},
{"lineNum":"  375","line":"                    diagnostics_actionss.at(i)->get_per_operator_diagnosticss();"},
{"lineNum":"  376","line":"            per_operation_train_diagnosticss.at(i) ="},
{"lineNum":"  377","line":"                    diagnostics_actionss.at(i)->get_per_operation_diagnosticss();"},
{"lineNum":"  378","line":"        }"},
{"lineNum":"  379","line":""},
{"lineNum":"  380","line":""},
{"lineNum":"  381","line":"          step.apply(bunch_train, state.verbosity, per_operator_train_diagnosticss,"},
{"lineNum":"  382","line":"                    per_operation_train_diagnosticss,"},
{"lineNum":"  383","line":"                    state.propagate_actions_ptr, *stepper_sptr, step_count, turn,"},
{"lineNum":"  384","line":"                    logger);"},
{"lineNum":"  385","line":""},
{"lineNum":"  386","line":""},
{"lineNum":"  387","line":"        t = simple_timer_show(t, \"propagate-step_apply\");"},
{"lineNum":"  388","line":"        for (int i = 0; i < num_bunches; ++i) {"},
{"lineNum":"  389","line":"            diagnostics_actionss.at(i)->step_end_action(*stepper_sptr, step,"},
{"lineNum":"  390","line":"                    *(state.bunch_train_simulator_ptr->get_bunch_train().get_bunches().at("},
{"lineNum":"  391","line":"                            i)), turn, step_count);"},
{"lineNum":"  392","line":"        }"},
{"lineNum":"  393","line":"        t = simple_timer_show(t, \"propagate-diagnostics_actions_step\");"},
{"lineNum":"  394","line":"        state.propagate_actions_ptr->step_end_action(*stepper_sptr, step,"},
{"lineNum":"  395","line":"                bunch_train, turn, step_count);"},
{"lineNum":"  396","line":"    }"},
{"lineNum":"  397","line":""},
{"lineNum":"  398","line":"    t = simple_timer_show(t, \"propagate-general_actions-step\");"},
{"lineNum":"  399","line":"    double t_step1 = MPI_Wtime();"},
{"lineNum":"  400","line":"    if (state.verbosity > 1) {"},
{"lineNum":"  401","line":"        int p = cout.precision();"},
{"lineNum":"  402","line":"        logger << \"Propagator:\";"},
{"lineNum":"  403","line":"        logger << \"     step \" << std::setw(digits(num_steps)) << step_count"},
{"lineNum":"  404","line":"                << \"/\" << num_steps;"},
{"lineNum":"  405","line":"        if (state.bunch_train_simulator_ptr) {"},
{"lineNum":"  406","line":"            logger << \", s_n=\" << std::fixed << std::setprecision(4)"},
{"lineNum":"  407","line":"                    << state.bunch_train_simulator_ptr->get_bunch_train().get_bunches()[0]->get_reference_particle().get_s_n();"},
{"lineNum":"  408","line":""},
{"lineNum":"  409","line":"        }"},
{"lineNum":"  410","line":"        if (state.bunch_simulator_ptr) {"},
{"lineNum":"  411","line":"            logger << \", s_n=\" << std::fixed << std::setprecision(4)"},
{"lineNum":"  412","line":"                    << state.bunch_simulator_ptr->get_bunch().get_reference_particle().get_s_n();"},
{"lineNum":"  413","line":"            logger << \", macroparticles = \""},
{"lineNum":"  414","line":"                    << state.bunch_simulator_ptr->get_bunch().get_total_num();"},
{"lineNum":"  415","line":"        }"},
{"lineNum":"  416","line":"        logger << \", time = \" << std::fixed << std::setprecision(3)"},
{"lineNum":"  417","line":"                << t_step1 - t_step0 << \"s\";"},
{"lineNum":"  418","line":"        logger << std::endl;"},
{"lineNum":"  419","line":"        cout.precision(p);"},
{"lineNum":"  420","line":"    }"},
{"lineNum":"  421","line":"#endif"},
{"lineNum":"  422","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  423","line":""},
{"lineNum":"  424","line":"bool"},
{"lineNum":"  425","line":"Propagator::check_out_of_particles(Bunch_simulator const & simulator, Logger & logger)"},
{"lineNum":"  426","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  427","line":"    return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  428","line":"#if 0"},
{"lineNum":"  429","line":"    // n.b.: We only check out_of_particles for single-bunch propagation."},
{"lineNum":"  430","line":"    // Checking all bunches in a multi-bunch simulation would require a"},
{"lineNum":"  431","line":"    // global communication. The costs exceed the potential benefits."},
{"lineNum":"  432","line":"\tbool retval = false;"},
{"lineNum":"  433","line":"    if (state.bunch_simulator_ptr) {"},
{"lineNum":"  434","line":"        if (state.bunch_simulator_ptr->get_bunch().get_total_num() == 0) {"},
{"lineNum":"  435","line":"            logger"},
{"lineNum":"  436","line":"                    << \"Propagator::propagate: No particles left in bunch. Exiting.\\n\";"},
{"lineNum":"  437","line":"            retval = true;"},
{"lineNum":"  438","line":"        }"},
{"lineNum":"  439","line":"    }"},
{"lineNum":"  440","line":"\treturn retval;"},
{"lineNum":"  441","line":"#endif"},
{"lineNum":"  442","line":"}"},
{"lineNum":"  443","line":""},
{"lineNum":"  444","line":"void"},
{"lineNum":"  445","line":"Propagator::do_turn_end("},
{"lineNum":"  446","line":"        Bunch_simulator & simulator,"},
{"lineNum":"  447","line":"        int turn_count,"},
{"lineNum":"  448","line":"\t\tLogger & logger)"},
{"lineNum":"  449","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  450","line":"    //t = simple_timer_current();"},
{"lineNum":"  451","line":""},
{"lineNum":"  452","line":"    // diagnostic actions"},
{"lineNum":"  453","line":"    simulator.diag_action_step_and_turn(turn_count, Propagator::FINAL_STEP);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  454","line":""},
{"lineNum":"  455","line":"    // propagate actions"},
{"lineNum":"  456","line":"    simulator.prop_action_turn_end(lattice, turn_count);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  457","line":""},
{"lineNum":"  458","line":"    // update lattice in case it has been chaged in the propagate action"},
{"lineNum":"  459","line":"    auto updates = lattice.update();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  460","line":"    //if (updates.structure()) steps = stepper.apply(lattice);"},
{"lineNum":"  461","line":""},
{"lineNum":"  462","line":"    // increment the turn number"},
{"lineNum":"  463","line":"    simulator.inc_turn();"},
{"lineNum":"  464","line":""},
{"lineNum":"  465","line":"    //double t_turn1 = MPI_Wtime();"},
{"lineNum":"  466","line":""},
{"lineNum":"  467","line":"#if 0"},
{"lineNum":"  468","line":"    if (state.verbosity > 0)"},
{"lineNum":"  469","line":"    {"},
{"lineNum":"  470","line":"        int p = cout.precision();"},
{"lineNum":"  471","line":"        logger << \"Propagator:\";"},
{"lineNum":"  472","line":"        logger << \" turn \" << std::setw(digits(state.num_turns)) << turn + 1"},
{"lineNum":"  473","line":"                << \"/\" << state.num_turns;"},
{"lineNum":"  474","line":"        if (state.bunch_simulator_ptr)"},
{"lineNum":"  475","line":"        {"},
{"lineNum":"  476","line":"            logger << \", macroparticles = \""},
{"lineNum":"  477","line":"                    << state.bunch_simulator_ptr->get_bunch().get_total_num();"},
{"lineNum":"  478","line":"        }"},
{"lineNum":"  479","line":"        else"},
{"lineNum":"  480","line":"        {"},
{"lineNum":"  481","line":"            Bunch_train & bunch_train("},
{"lineNum":"  482","line":"                    state.bunch_train_simulator_ptr->get_bunch_train());"},
{"lineNum":"  483","line":"            size_t num_bunches = bunch_train.get_size();"},
{"lineNum":"  484","line":"            bunch_train.update_bunch_total_num();"},
{"lineNum":"  485","line":"            Bunches & bunches(bunch_train.get_bunches());"},
{"lineNum":"  486","line":"            logger << \", macroparticles = (\";"},
{"lineNum":"  487","line":"            for (std::vector<Bunch_sptr >::const_iterator bit = bunches.begin(); bit!=bunches.end(); ++bit) {"},
{"lineNum":"  488","line":"                if (bit != bunches.begin()) {"},
{"lineNum":"  489","line":"                    logger << \", \" ;"},
{"lineNum":"  490","line":"                }"},
{"lineNum":"  491","line":"                logger << (*bit)->get_total_num();"},
{"lineNum":"  492","line":"            }"},
{"lineNum":"  493","line":"             logger << \")  \" ;"},
{"lineNum":"  494","line":"        }"},
{"lineNum":"  495","line":"        logger << \", time = \" << std::fixed << std::setprecision(4)"},
{"lineNum":"  496","line":"                << t_turn1 - t_turn0 << \"s\";"},
{"lineNum":"  497","line":"        logger << std::endl;"},
{"lineNum":"  498","line":"        cout.precision(p);"},
{"lineNum":"  499","line":"    }"},
{"lineNum":"  500","line":"#endif"},
{"lineNum":"  501","line":""},
{"lineNum":"  502","line":"#if 0"},
{"lineNum":"  503","line":"    t = simple_timer_current();"},
{"lineNum":"  504","line":""},
{"lineNum":"  505","line":"    if (state.bunch_simulator_ptr)"},
{"lineNum":"  506","line":"    {"},
{"lineNum":"  507","line":"        state.bunch_simulator_ptr->get_diagnostics_actions().turn_end_action("},
{"lineNum":"  508","line":"                *stepper_sptr, state.bunch_simulator_ptr->get_bunch(), turn);"},
{"lineNum":"  509","line":"    }"},
{"lineNum":"  510","line":"    else"},
{"lineNum":"  511","line":"    {"},
{"lineNum":"  512","line":"        size_t num_bunches ="},
{"lineNum":"  513","line":"                state.bunch_train_simulator_ptr->get_bunch_train().get_size();"},
{"lineNum":"  514","line":"        for (int i = 0; i < num_bunches; ++i) {"},
{"lineNum":"  515","line":"            state.bunch_train_simulator_ptr->get_diagnostics_actionss().at(i)->turn_end_action("},
{"lineNum":"  516","line":"                    *stepper_sptr,"},
{"lineNum":"  517","line":"                    *(state.bunch_train_simulator_ptr->get_bunch_train().get_bunches().at("},
{"lineNum":"  518","line":"                            i)), turn);"},
{"lineNum":"  519","line":"        }"},
{"lineNum":"  520","line":"    }"},
{"lineNum":"  521","line":""},
{"lineNum":"  522","line":"    t = simple_timer_show(t, \"propagate-diagnostics_turn\");"},
{"lineNum":"  523","line":""},
{"lineNum":"  524","line":"    if (state.bunch_simulator_ptr)"},
{"lineNum":"  525","line":"    {"},
{"lineNum":"  526","line":"        state.propagate_actions_ptr->turn_end_action(*stepper_sptr,"},
{"lineNum":"  527","line":"                state.bunch_simulator_ptr->get_bunch(), turn);"},
{"lineNum":"  528","line":"    }"},
{"lineNum":"  529","line":"    else"},
{"lineNum":"  530","line":"    {"},
{"lineNum":"  531","line":"        state.propagate_actions_ptr->turn_end_action(*stepper_sptr,"},
{"lineNum":"  532","line":"                state.bunch_train_simulator_ptr->get_bunch_train(), turn);"},
{"lineNum":"  533","line":"    }"},
{"lineNum":"  534","line":""},
{"lineNum":"  535","line":"    t = simple_timer_show(t, \"propagate-general_actions_turn\");"},
{"lineNum":"  536","line":""},
{"lineNum":"  537","line":"    if (stepper_sptr->get_lattice_simulator().get_lattice_sptr()->get_have_loss_diagnostics())"},
{"lineNum":"  538","line":"    {"},
{"lineNum":"  539","line":"         Diagnostics_losses diagnostics_list ="},
{"lineNum":"  540","line":"             stepper_sptr->get_lattice_simulator().get_lattice_sptr()->get_loss_diagnostics_list();"},
{"lineNum":"  541","line":""},
{"lineNum":"  542","line":"         for (Diagnostics_losses::const_iterator d_it = diagnostics_list.begin();"},
{"lineNum":"  543","line":"             d_it != diagnostics_list.end(); ++d_it)"},
{"lineNum":"  544","line":"         {"},
{"lineNum":"  545","line":"             (*d_it)->write();"},
{"lineNum":"  546","line":"         }"},
{"lineNum":"  547","line":"    }"},
{"lineNum":"  548","line":""},
{"lineNum":"  549","line":""},
{"lineNum":"  550","line":""},
{"lineNum":"  551","line":"    state.first_turn = turn + 1;"},
{"lineNum":"  552","line":"    double t_turn1 = MPI_Wtime();"},
{"lineNum":"  553","line":"    if (state.verbosity > 0) {"},
{"lineNum":"  554","line":"        int p = cout.precision();"},
{"lineNum":"  555","line":"        logger << \"Propagator:\";"},
{"lineNum":"  556","line":"        logger << \" turn \" << std::setw(digits(state.num_turns)) << turn + 1"},
{"lineNum":"  557","line":"                << \"/\" << state.num_turns;"},
{"lineNum":"  558","line":"        if (state.bunch_simulator_ptr) {"},
{"lineNum":"  559","line":"            logger << \", macroparticles = \""},
{"lineNum":"  560","line":"                    << state.bunch_simulator_ptr->get_bunch().get_total_num();"},
{"lineNum":"  561","line":"        } else {"},
{"lineNum":"  562","line":"            Bunch_train & bunch_train("},
{"lineNum":"  563","line":"                    state.bunch_train_simulator_ptr->get_bunch_train());"},
{"lineNum":"  564","line":"            size_t num_bunches = bunch_train.get_size();"},
{"lineNum":"  565","line":"            bunch_train.update_bunch_total_num();"},
{"lineNum":"  566","line":"            Bunches & bunches(bunch_train.get_bunches());"},
{"lineNum":"  567","line":"            logger << \", macroparticles = (\";"},
{"lineNum":"  568","line":"            for (auto const & bunch : bunches)"},
{"lineNum":"  569","line":"            {"},
{"lineNum":"  570","line":"            }"},
{"lineNum":"  571","line":"            for (std::vector<Bunch_sptr >::const_iterator bit = bunches.begin(); bit!=bunches.end(); ++bit) {"},
{"lineNum":"  572","line":"                if (bit != bunches.begin()) {"},
{"lineNum":"  573","line":"                    logger << \", \" ;"},
{"lineNum":"  574","line":"                }"},
{"lineNum":"  575","line":"                logger << (*bit)->get_total_num();"},
{"lineNum":"  576","line":"            }"},
{"lineNum":"  577","line":"             logger << \")  \" ;"},
{"lineNum":"  578","line":"        }"},
{"lineNum":"  579","line":"        logger << \", time = \" << std::fixed << std::setprecision(4)"},
{"lineNum":"  580","line":"                << t_turn1 - t_turn0 << \"s\";"},
{"lineNum":"  581","line":"        logger << std::endl;"},
{"lineNum":"  582","line":"        cout.precision(p);"},
{"lineNum":"  583","line":"    }"},
{"lineNum":"  584","line":"#endif"},
{"lineNum":"  585","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  586","line":""},
{"lineNum":"  587","line":"void"},
{"lineNum":"  588","line":"Propagator::propagate(Bunch_simulator & sim, Logger & logger, int max_turns)"},
{"lineNum":"  589","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  590","line":"    const int total_turns = sim.max_turns();"},
{"lineNum":"  591","line":""},
{"lineNum":"  592","line":"    // parameter check"},
{"lineNum":"  593","line":"    if (max_turns == -1 && total_turns == -1)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  594","line":"    {"},
{"lineNum":"  595","line":"        throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  596","line":"                \"Max number of turns must be set either in the Bunch_simulator \""},
{"lineNum":"  597","line":"                \"(Bunch_simulator::set_num_turns(int)), or in the Propagator \""},
{"lineNum":"  598","line":"                \"(Propagator::propagate(..., int max_turns))\" );"},
{"lineNum":"  599","line":"    }"},
{"lineNum":"  600","line":""},
{"lineNum":"  601","line":"    try"},
{"lineNum":"  602","line":"    {"},
{"lineNum":"  603","line":"        do_before_start(sim, logger);"},
{"lineNum":"  604","line":""},
{"lineNum":"  605","line":"        // first turn is always the current turn from simulator"},
{"lineNum":"  606","line":"        int turn = sim.current_turn();"},
{"lineNum":"  607","line":""},
{"lineNum":"  608","line":"        // decide the last turn"},
{"lineNum":"  609","line":"        int last_turn = (max_turns == -1) ? total_turns : turn + max_turns;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  610","line":"        if ((last_turn > total_turns) && (total_turns != -1)) last_turn = total_turns;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  611","line":""},
{"lineNum":"  612","line":"        int turns_since_checkpoint = 0;"},
{"lineNum":"  613","line":"        bool out_of_particles = false;"},
{"lineNum":"  614","line":"        double t_prop0 = MPI_Wtime();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  615","line":""},
{"lineNum":"  616","line":"        logger(LoggerV::INFO_TURN)"},
{"lineNum":"  617","line":"            << \"Propagator: starting turn \""},
{"lineNum":"  618","line":"            << turn + 1 << \", final turn \"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  619","line":"            << last_turn << \"\\n\\n\";"},
{"lineNum":"  620","line":""},
{"lineNum":"  621","line":"        for (; turn < last_turn; ++turn)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  622","line":"        {"},
{"lineNum":"  623","line":"            double t_turn0 = MPI_Wtime();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  624","line":""},
{"lineNum":"  625","line":"            do_start_repetition(sim);"},
{"lineNum":"  626","line":""},
{"lineNum":"  627","line":"            int step_count = 0;"},
{"lineNum":"  628","line":"            for (auto & step : steps)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  629","line":"            {"},
{"lineNum":"  630","line":"                ++step_count;"},
{"lineNum":"  631","line":"                do_step(sim, step, step_count, turn, logger);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  632","line":""},
{"lineNum":"  633","line":"                out_of_particles = check_out_of_particles(sim, logger);"},
{"lineNum":"  634","line":"                if (out_of_particles) break;"},
{"lineNum":"  635","line":"            }"},
{"lineNum":"  636","line":""},
{"lineNum":"  637","line":"            double t_turn1 = MPI_Wtime();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  638","line":""},
{"lineNum":"  639","line":"            // turn end log"},
{"lineNum":"  640","line":"            logger(LoggerV::INFO_TURN)"},
{"lineNum":"  641","line":"                << \"Propagator: turn \" << std::setw(digits(total_turns))"},
{"lineNum":"  642","line":"                << turn + 1 << \"/\";","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  643","line":""},
{"lineNum":"  644","line":"            if (total_turns == -1) logger << \"inf.\";","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  645","line":"            else logger << total_turns;"},
{"lineNum":"  646","line":""},
{"lineNum":"  647","line":"            logger"},
{"lineNum":"  648","line":"                << \", time = \" << std::fixed << std::setprecision(3)"},
{"lineNum":"  649","line":"                << t_turn1 - t_turn0 << \"s\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  650","line":""},
{"lineNum":"  651","line":"                << \", macroparticles = \";"},
{"lineNum":"  652","line":""},
{"lineNum":"  653","line":"            for(auto const& train : sim.get_trains())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  654","line":"            {"},
{"lineNum":"  655","line":"                logger << \"(\";"},
{"lineNum":"  656","line":""},
{"lineNum":"  657","line":"                for(auto const& bunch : train.get_bunches())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  658","line":"                {"},
{"lineNum":"  659","line":"                    logger << bunch.get_total_num();"},
{"lineNum":"  660","line":"                    if (bunch.get_array_index() != train.get_bunch_array_size()-1)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  661","line":"                        logger << \", \";"},
{"lineNum":"  662","line":"                }"},
{"lineNum":"  663","line":""},
{"lineNum":"  664","line":"                logger << \")\";"},
{"lineNum":"  665","line":"                if (train.get_index() == 0) logger << \" / \";","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  666","line":"            }"},
{"lineNum":"  667","line":""},
{"lineNum":"  668","line":"            logger << \"\\n\";"},
{"lineNum":"  669","line":"            logger(LoggerV::INFO_STEP) << \"\\n\";"},
{"lineNum":"  670","line":""},
{"lineNum":"  671","line":"            // out of particles"},
{"lineNum":"  672","line":"            if (out_of_particles) break;"},
{"lineNum":"  673","line":""},
{"lineNum":"  674","line":"            ++turns_since_checkpoint;"},
{"lineNum":"  675","line":"            do_turn_end(sim, turn, logger);"},
{"lineNum":"  676","line":""},
{"lineNum":"  677","line":"            // checkpoint save"},
{"lineNum":"  678","line":"            //syn::checkpoint_save(*this, sim);"},
{"lineNum":"  679","line":""},
{"lineNum":"  680","line":"#if 0"},
{"lineNum":"  681","line":"            if ((turns_since_checkpoint == checkpoint_period)"},
{"lineNum":"  682","line":"                    || ((turn_count == (sim.num_turns - 1)) && final_checkpoint))"},
{"lineNum":"  683","line":"            {"},
{"lineNum":"  684","line":"                t = simple_timer_current();"},
{"lineNum":"  685","line":"                checkpoint(sim, logger, t);"},
{"lineNum":"  686","line":"                t = simple_timer_show(t, \"propagate-checkpoint_period\");"},
{"lineNum":"  687","line":"                turns_since_checkpoint = 0;"},
{"lineNum":"  688","line":"            }"},
{"lineNum":"  689","line":"#endif"},
{"lineNum":"  690","line":""},
{"lineNum":"  691","line":"#if 0"},
{"lineNum":"  692","line":"            if (((turn_count - orig_first_turn + 1) == sim.max_turns)"},
{"lineNum":"  693","line":"                    && (turn_count != (sim.num_turns - 1)))"},
{"lineNum":"  694","line":"            {"},
{"lineNum":"  695","line":"                logger(LoggerV::INFO_TURN)"},
{"lineNum":"  696","line":"                    << \"Propagator: maximum number of turns reached\\n\";"},
{"lineNum":"  697","line":""},
{"lineNum":"  698","line":"                if (turns_since_checkpoint > 0)"},
{"lineNum":"  699","line":"                {"},
{"lineNum":"  700","line":"                    t = simple_timer_current();"},
{"lineNum":"  701","line":"                    checkpoint(sim, logger, t);"},
{"lineNum":"  702","line":"                    t = simple_timer_show(t, \"propagate-checkpoint_max\");"},
{"lineNum":"  703","line":"                }"},
{"lineNum":"  704","line":""},
{"lineNum":"  705","line":"                break;"},
{"lineNum":"  706","line":"            }"},
{"lineNum":"  707","line":"#endif"},
{"lineNum":"  708","line":""},
{"lineNum":"  709","line":"#if 0"},
{"lineNum":"  710","line":"            if (boost::filesystem::exists(stop_file_name)"},
{"lineNum":"  711","line":"                    || boost::filesystem::exists(alt_stop_file_name))"},
{"lineNum":"  712","line":"            {"},
{"lineNum":"  713","line":"                logger << \"Propagator: stop file detected\\n\";"},
{"lineNum":"  714","line":""},
{"lineNum":"  715","line":"                if (turns_since_checkpoint > 0)"},
{"lineNum":"  716","line":"                {"},
{"lineNum":"  717","line":"                    t = simple_timer_current();"},
{"lineNum":"  718","line":"                    checkpoint(sim, logger, t);"},
{"lineNum":"  719","line":"                    t = simple_timer_show(t, \"propagate-checkpoint_stop\");"},
{"lineNum":"  720","line":"                }"},
{"lineNum":"  721","line":""},
{"lineNum":"  722","line":"                break;"},
{"lineNum":"  723","line":"            }"},
{"lineNum":"  724","line":"#endif"},
{"lineNum":"  725","line":""},
{"lineNum":"  726","line":"        }"},
{"lineNum":"  727","line":""},
{"lineNum":"  728","line":"        if (last_turn != total_turns)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  729","line":"        {"},
{"lineNum":"  730","line":"            logger(LoggerV::INFO_TURN)"},
{"lineNum":"  731","line":"                << \"Propagator: maximum number of turns reached\\n\";"},
{"lineNum":"  732","line":""},
{"lineNum":"  733","line":"            // TODO: checkpoint"},
{"lineNum":"  734","line":"        }"},
{"lineNum":"  735","line":""},
{"lineNum":"  736","line":"        if (out_of_particles)"},
{"lineNum":"  737","line":"        {"},
{"lineNum":"  738","line":"            logger(LoggerV::WARNING)"},
{"lineNum":"  739","line":"                << \"Propagator: no particles left\\n\";"},
{"lineNum":"  740","line":"        }"},
{"lineNum":"  741","line":""},
{"lineNum":"  742","line":"        double t_prop1 = MPI_Wtime();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  743","line":""},
{"lineNum":"  744","line":"        logger(LoggerV::INFO_TURN)"},
{"lineNum":"  745","line":"            << \"Propagator: total time = \" << std::fixed << std::setprecision(3)"},
{"lineNum":"  746","line":"            << t_prop1 - t_prop0 << \"s\\n\";","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  747","line":""},
{"lineNum":"  748","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  749","line":"    catch (std::exception const& e)"},
{"lineNum":"  750","line":"    {"},
{"lineNum":"  751","line":"        std::cerr << e.what() << std::endl;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  752","line":"        MPI_Abort(MPI_COMM_WORLD, 888);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  753","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  754","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  755","line":""},
{"lineNum":"  756","line":"#if 0"},
{"lineNum":"  757","line":"void"},
{"lineNum":"  758","line":"Propagator::checkpoint(Bunch_simulator & sim, Logger & logger, double & t)"},
{"lineNum":"  759","line":"{"},
{"lineNum":"  760","line":"    if (state.verbosity > 0) {"},
{"lineNum":"  761","line":"        logger << \"Propagator: checkpoint\";"},
{"lineNum":"  762","line":"        logger.flush();"},
{"lineNum":"  763","line":"    }"},
{"lineNum":"  764","line":"    double t0 = MPI_Wtime();"},
{"lineNum":"  765","line":"    using namespace boost::filesystem;"},
{"lineNum":"  766","line":"    remove_serialization_directory();"},
{"lineNum":"  767","line":"    Commxx commxx_world;"},
{"lineNum":"  768","line":"    const int verbosity_threshold = 2;"},
{"lineNum":"  769","line":"    Logger iocclog(\"iocycle_checkpoint\", state.verbosity > verbosity_threshold);"},
{"lineNum":"  770","line":"    int max_writers;"},
{"lineNum":"  771","line":"    if (concurrent_io == 0) {"},
{"lineNum":"  772","line":"        max_writers = commxx_world.get_size();"},
{"lineNum":"  773","line":"    } else {"},
{"lineNum":"  774","line":"        max_writers = concurrent_io;"},
{"lineNum":"  775","line":"    }"},
{"lineNum":"  776","line":"    int num_cycles = (commxx_world.get_size() + max_writers - 1) / max_writers;"},
{"lineNum":"  777","line":"    for (int cycle = 0; cycle < num_cycles; ++cycle) {"},
{"lineNum":"  778","line":"        iocclog << \"start cycle \" << cycle << std::endl;"},
{"lineNum":"  779","line":"        int cycle_min = cycle * max_writers;"},
{"lineNum":"  780","line":"        int cycle_max = (cycle + 1) * max_writers;"},
{"lineNum":"  781","line":"        if ((commxx_world.get_rank() >= cycle_min)"},
{"lineNum":"  782","line":"                && (commxx_world.get_rank() < cycle_max)) {"},
{"lineNum":"  783","line":"            iocclog << \"start write\" << std::endl;"},
{"lineNum":"  784","line":"            binary_save(*this,"},
{"lineNum":"  785","line":"                    get_serialization_path(propagator_archive_name).c_str(),"},
{"lineNum":"  786","line":"                    true);"},
{"lineNum":"  787","line":"            binary_save(state,"},
{"lineNum":"  788","line":"                    get_serialization_path(state_archive_name).c_str(), true);"},
{"lineNum":"  789","line":"            if (checkpoint_with_xml) {"},
{"lineNum":"  790","line":"                xml_save(*this,"},
{"lineNum":"  791","line":"                        get_serialization_path(propagator_xml_archive_name).c_str(),"},
{"lineNum":"  792","line":"                        true);"},
{"lineNum":"  793","line":"                xml_save(state,"},
{"lineNum":"  794","line":"                        get_serialization_path(state_xml_archive_name).c_str(),"},
{"lineNum":"  795","line":"                        true);"},
{"lineNum":"  796","line":"            }"},
{"lineNum":"  797","line":"            iocclog << \"end write\" << std::endl;"},
{"lineNum":"  798","line":"        }"},
{"lineNum":"  799","line":"        MPI_Barrier(commxx_world.get());"},
{"lineNum":"  800","line":"    }"},
{"lineNum":"  801","line":"    if (commxx_world.get_rank() == 0) {"},
{"lineNum":"  802","line":"        std::ofstream description("},
{"lineNum":"  803","line":"                get_serialization_path(description_file_name, false).c_str());"},
{"lineNum":"  804","line":"        description << \"last_turn=\" << state.first_turn << std::endl;"},
{"lineNum":"  805","line":"        description << \"mpi_size=\" << Commxx().get_size() << std::endl;"},
{"lineNum":"  806","line":"        description.close();"},
{"lineNum":"  807","line":"    }"},
{"lineNum":"  808","line":"    rename_serialization_directory(checkpoint_dir);"},
{"lineNum":"  809","line":"    double t_checkpoint = MPI_Wtime() - t0;"},
{"lineNum":"  810","line":"    if (state.verbosity > 0) {"},
{"lineNum":"  811","line":"        int p = cout.precision();"},
{"lineNum":"  812","line":"        logger << \" written to \\\"\" << checkpoint_dir << \"\\\"\";"},
{"lineNum":"  813","line":"        logger << \", time = \" << std::fixed << std::setprecision(3)"},
{"lineNum":"  814","line":"                << t_checkpoint << \"s\";"},
{"lineNum":"  815","line":"        ;"},
{"lineNum":"  816","line":"        logger << std::endl;"},
{"lineNum":"  817","line":"        cout.precision(p);"},
{"lineNum":"  818","line":"    }"},
{"lineNum":"  819","line":"    t = simple_timer_show(t, \"checkpoint\");"},
{"lineNum":"  820","line":"}"},
{"lineNum":"  821","line":"#endif"},
{"lineNum":"  822","line":""},
{"lineNum":"  823","line":"#if 0"},
{"lineNum":"  824","line":"Propagator::State"},
{"lineNum":"  825","line":"Propagator::get_resume_state(std::string const& checkpoint_directory)"},
{"lineNum":"  826","line":"{"},
{"lineNum":"  827","line":"    using namespace boost::filesystem;"},
{"lineNum":"  828","line":"    State state;"},
{"lineNum":"  829","line":"    remove_serialization_directory();"},
{"lineNum":"  830","line":"    symlink_serialization_directory(checkpoint_directory);"},
{"lineNum":"  831","line":"    binary_load(state,"},
{"lineNum":"  832","line":"            get_combined_path(checkpoint_directory, state_archive_name).c_str());"},
{"lineNum":"  833","line":"    unlink_serialization_directory();"},
{"lineNum":"  834","line":"    return state;"},
{"lineNum":"  835","line":"}"},
{"lineNum":"  836","line":"#endif"},
{"lineNum":"  837","line":""},
{"lineNum":"  838","line":"#if 0"},
{"lineNum":"  839","line":"void"},
{"lineNum":"  840","line":"Propagator::resume(std::string const& checkpoint_directory, bool new_num_turns, int num_turns, bool new_max_turns,"},
{"lineNum":"  841","line":"        int max_turns, bool new_verbosity, int verbosity)"},
{"lineNum":"  842","line":"{"},
{"lineNum":"  843","line":"#if 0"},
{"lineNum":"  844","line":"    State state(get_resume_state(checkpoint_directory));"},
{"lineNum":"  845","line":"    if (new_max_turns) {"},
{"lineNum":"  846","line":"        state.max_turns = max_turns;"},
{"lineNum":"  847","line":"    }"},
{"lineNum":"  848","line":"    if (new_num_turns) {"},
{"lineNum":"  849","line":"    \tstate.num_turns = num_turns;"},
{"lineNum":"  850","line":"    }"},
{"lineNum":"  851","line":"    if (new_verbosity) {"},
{"lineNum":"  852","line":"        state.verbosity = verbosity;"},
{"lineNum":"  853","line":"    }"},
{"lineNum":"  854","line":"    if (state.bunch_simulator_ptr) {"},
{"lineNum":"  855","line":"        state.propagate_actions_ptr->before_resume_action(*stepper_sptr,"},
{"lineNum":"  856","line":"                                                          state.bunch_simulator_ptr->get_bunch());"},
{"lineNum":"  857","line":"    } else {"},
{"lineNum":"  858","line":"        state.propagate_actions_ptr->before_resume_action(*stepper_sptr,"},
{"lineNum":"  859","line":"                                                          state.bunch_train_simulator_ptr->get_bunch_train());"},
{"lineNum":"  860","line":"    }"},
{"lineNum":"  861","line":"    propagate(state);"},
{"lineNum":"  862","line":"    state.bunch_simulator_ptr ?  delete state.bunch_simulator_ptr: delete state.bunch_train_simulator_ptr;"},
{"lineNum":"  863","line":"    delete state.propagate_actions_ptr;"},
{"lineNum":"  864","line":"#endif"},
{"lineNum":"  865","line":"}"},
{"lineNum":"  866","line":""},
{"lineNum":"  867","line":"void"},
{"lineNum":"  868","line":"Propagator::propagate("},
{"lineNum":"  869","line":"        Bunch_simulator & bunch_simulator,"},
{"lineNum":"  870","line":"        int num_turns, int max_turns, int verbosity )"},
{"lineNum":"  871","line":"{"},
{"lineNum":"  872","line":"    Propagate_actions empty_propagate_actions;"},
{"lineNum":"  873","line":"    propagate( bunch_simulator,"},
{"lineNum":"  874","line":"            empty_propagate_actions,"},
{"lineNum":"  875","line":"            num_turns, max_turns, verbosity );"},
{"lineNum":"  876","line":"}"},
{"lineNum":"  877","line":""},
{"lineNum":"  878","line":"void"},
{"lineNum":"  879","line":"Propagator::propagate("},
{"lineNum":"  880","line":"        Bunch_simulator & bunch_simulator,"},
{"lineNum":"  881","line":"        Propagate_actions & general_actions,"},
{"lineNum":"  882","line":"        int num_turns, int max_turns, int verbosity )"},
{"lineNum":"  883","line":"{"},
{"lineNum":"  884","line":"    State state(&bunch_simulator, &general_actions, num_turns, 0, max_turns,"},
{"lineNum":"  885","line":"            verbosity);"},
{"lineNum":"  886","line":"    propagate(state);"},
{"lineNum":"  887","line":"}"},
{"lineNum":"  888","line":"#endif"},
{"lineNum":"  889","line":""},
{"lineNum":"  890","line":"#if 0"},
{"lineNum":"  891","line":"template<class Archive>"},
{"lineNum":"  892","line":"    void"},
{"lineNum":"  893","line":"    Propagator::serialize(Archive & ar, const unsigned int version)"},
{"lineNum":"  894","line":"    {"},
{"lineNum":"  895","line":"        ar & BOOST_SERIALIZATION_NVP(stepper_sptr);"},
{"lineNum":"  896","line":"        ar & BOOST_SERIALIZATION_NVP(checkpoint_period);"},
{"lineNum":"  897","line":"        ar & BOOST_SERIALIZATION_NVP(checkpoint_dir);"},
{"lineNum":"  898","line":"        ar & BOOST_SERIALIZATION_NVP(checkpoint_with_xml);"},
{"lineNum":"  899","line":"        ar & BOOST_SERIALIZATION_NVP(concurrent_io);"},
{"lineNum":"  900","line":"        ar & BOOST_SERIALIZATION_NVP(final_checkpoint);"},
{"lineNum":"  901","line":"        ar & BOOST_SERIALIZATION_NVP(omp_threads);"},
{"lineNum":"  902","line":"    }"},
{"lineNum":"  903","line":""},
{"lineNum":"  904","line":"template"},
{"lineNum":"  905","line":"void"},
{"lineNum":"  906","line":"Propagator::serialize<boost::archive::binary_oarchive >("},
{"lineNum":"  907","line":"        boost::archive::binary_oarchive & ar, const unsigned int version);"},
{"lineNum":"  908","line":""},
{"lineNum":"  909","line":"template"},
{"lineNum":"  910","line":"void"},
{"lineNum":"  911","line":"Propagator::serialize<boost::archive::xml_oarchive >("},
{"lineNum":"  912","line":"        boost::archive::xml_oarchive & ar, const unsigned int version);"},
{"lineNum":"  913","line":""},
{"lineNum":"  914","line":"template"},
{"lineNum":"  915","line":"void"},
{"lineNum":"  916","line":"Propagator::serialize<boost::archive::binary_iarchive >("},
{"lineNum":"  917","line":"        boost::archive::binary_iarchive & ar, const unsigned int version);"},
{"lineNum":"  918","line":""},
{"lineNum":"  919","line":"template"},
{"lineNum":"  920","line":"void"},
{"lineNum":"  921","line":"Propagator::serialize<boost::archive::xml_iarchive >("},
{"lineNum":"  922","line":"        boost::archive::xml_iarchive & ar, const unsigned int version);"},
{"lineNum":"  923","line":"#endif"},
{"lineNum":"  924","line":""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 60, "covered" : 0,};
var merged_data = [];
