var data = {lines:[
{"lineNum":"    1","line":"/*============================================================================="},
{"lineNum":"    2","line":"    Copyright (c) 2001-2011 Joel de Guzman"},
{"lineNum":"    3","line":"    Copyright (c) 2001-2011 Hartmut Kaiser"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"    Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    6","line":"    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    7","line":"=============================================================================*/"},
{"lineNum":"    8","line":"#if !defined(SPIRIT_LIST_MARCH_24_2007_1031AM)"},
{"lineNum":"    9","line":"#define SPIRIT_LIST_MARCH_24_2007_1031AM"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"#if defined(_MSC_VER)"},
{"lineNum":"   12","line":"#pragma once"},
{"lineNum":"   13","line":"#endif"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"#include <boost/spirit/home/qi/meta_compiler.hpp>"},
{"lineNum":"   16","line":"#include <boost/spirit/home/qi/parser.hpp>"},
{"lineNum":"   17","line":"#include <boost/spirit/home/support/container.hpp>"},
{"lineNum":"   18","line":"#include <boost/spirit/home/qi/detail/attributes.hpp>"},
{"lineNum":"   19","line":"#include <boost/spirit/home/qi/detail/fail_function.hpp>"},
{"lineNum":"   20","line":"#include <boost/spirit/home/qi/detail/pass_container.hpp>"},
{"lineNum":"   21","line":"#include <boost/spirit/home/support/has_semantic_action.hpp>"},
{"lineNum":"   22","line":"#include <boost/spirit/home/support/handles_container.hpp>"},
{"lineNum":"   23","line":"#include <boost/spirit/home/support/info.hpp>"},
{"lineNum":"   24","line":"#include <vector>"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"namespace boost { namespace spirit"},
{"lineNum":"   27","line":"{"},
{"lineNum":"   28","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   29","line":"    // Enablers"},
{"lineNum":"   30","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   31","line":"    template <>"},
{"lineNum":"   32","line":"    struct use_operator<qi::domain, proto::tag::modulus> // enables p % d"},
{"lineNum":"   33","line":"      : mpl::true_ {};"},
{"lineNum":"   34","line":"}}"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"namespace boost { namespace spirit { namespace qi"},
{"lineNum":"   37","line":"{"},
{"lineNum":"   38","line":"    template <typename Left, typename Right>"},
{"lineNum":"   39","line":"    struct list : binary_parser<list<Left, Right> >","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   40","line":"    {"},
{"lineNum":"   41","line":"        typedef Left left_type;"},
{"lineNum":"   42","line":"        typedef Right right_type;"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"        template <typename Context, typename Iterator>"},
{"lineNum":"   45","line":"        struct attribute"},
{"lineNum":"   46","line":"        {"},
{"lineNum":"   47","line":"            // Build a std::vector from the LHS\'s attribute. Note"},
{"lineNum":"   48","line":"            // that build_std_vector may return unused_type if the"},
{"lineNum":"   49","line":"            // subject\'s attribute is an unused_type."},
{"lineNum":"   50","line":"            typedef typename"},
{"lineNum":"   51","line":"                traits::build_std_vector<"},
{"lineNum":"   52","line":"                    typename traits::"},
{"lineNum":"   53","line":"                        attribute_of<Left, Context, Iterator>::type"},
{"lineNum":"   54","line":"                >::type"},
{"lineNum":"   55","line":"            type;"},
{"lineNum":"   56","line":"        };"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"        list(Left const& left_, Right const& right_)"},
{"lineNum":"   59","line":"          : left(left_), right(right_) {}"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"        template <typename F>"},
{"lineNum":"   62","line":"        bool parse_container(F f) const"},
{"lineNum":"   63","line":"        {"},
{"lineNum":"   64","line":"            // in order to succeed we need to match at least one element"},
{"lineNum":"   65","line":"            if (f (left))","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   66","line":"                return false;"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"            typename F::iterator_type save = f.f.first;"},
{"lineNum":"   69","line":"            while (right.parse(f.f.first, f.f.last, f.f.context, f.f.skipper, unused)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   70","line":"              && !f (left))"},
{"lineNum":"   71","line":"            {"},
{"lineNum":"   72","line":"                save = f.f.first;"},
{"lineNum":"   73","line":"            }"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"            f.f.first = save;"},
{"lineNum":"   76","line":"            return true;"},
{"lineNum":"   77","line":"        }"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"        template <typename Iterator, typename Context"},
{"lineNum":"   80","line":"          , typename Skipper, typename Attribute>"},
{"lineNum":"   81","line":"        bool parse(Iterator& first, Iterator const& last"},
{"lineNum":"   82","line":"          , Context& context, Skipper const& skipper"},
{"lineNum":"   83","line":"          , Attribute& attr_) const"},
{"lineNum":"   84","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   85","line":"            typedef detail::fail_function<Iterator, Context, Skipper>"},
{"lineNum":"   86","line":"                fail_function;"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"            // ensure the attribute is actually a container type"},
{"lineNum":"   89","line":"            traits::make_container(attr_);"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"            Iterator iter = first;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   92","line":"            fail_function f(iter, last, context, skipper);"},
{"lineNum":"   93","line":"            if (!parse_container(detail::make_pass_container(f, attr_)))"},
{"lineNum":"   94","line":"                return false;"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"            first = f.first;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   97","line":"            return true;"},
{"lineNum":"   98","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"        template <typename Context>"},
{"lineNum":"  101","line":"        info what(Context& context) const"},
{"lineNum":"  102","line":"        {"},
{"lineNum":"  103","line":"            return info(\"list\","},
{"lineNum":"  104","line":"                std::make_pair(left.what(context), right.what(context)));"},
{"lineNum":"  105","line":"        }"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"        Left left;"},
{"lineNum":"  108","line":"        Right right;"},
{"lineNum":"  109","line":"    };"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  112","line":"    // Parser generators: make_xxx function (objects)"},
{"lineNum":"  113","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  114","line":"    template <typename Elements, typename Modifiers>"},
{"lineNum":"  115","line":"    struct make_composite<proto::tag::modulus, Elements, Modifiers>"},
{"lineNum":"  116","line":"      : make_binary_composite<Elements, list>"},
{"lineNum":"  117","line":"    {};"},
{"lineNum":"  118","line":"}}}"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"namespace boost { namespace spirit { namespace traits"},
{"lineNum":"  121","line":"{"},
{"lineNum":"  122","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  123","line":"    template <typename Left, typename Right>"},
{"lineNum":"  124","line":"    struct has_semantic_action<qi::list<Left, Right> >"},
{"lineNum":"  125","line":"      : binary_has_semantic_action<Left, Right> {};"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  128","line":"    template <typename Left, typename Right, typename Attribute"},
{"lineNum":"  129","line":"      , typename Context, typename Iterator>"},
{"lineNum":"  130","line":"    struct handles_container<qi::list<Left, Right>, Attribute, Context"},
{"lineNum":"  131","line":"          , Iterator>"},
{"lineNum":"  132","line":"      : mpl::true_ {};"},
{"lineNum":"  133","line":"}}}"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 7, "covered" : 0,};
var merged_data = [];
