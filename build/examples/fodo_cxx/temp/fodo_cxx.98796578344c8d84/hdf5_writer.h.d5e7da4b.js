var data = {lines:[
{"lineNum":"    1","line":"#ifndef HDF5_WRITER_H_"},
{"lineNum":"    2","line":"#define HDF5_WRITER_H_"},
{"lineNum":"    3","line":"#include <vector>"},
{"lineNum":"    4","line":"#include <string>"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"#include \"synergia/utils/commxx.h\""},
{"lineNum":"    7","line":"#include \"synergia/utils/hdf5_misc.h\""},
{"lineNum":"    8","line":"#include \"synergia/utils/multi_array_typedefs.h\""},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"class Hdf5_writer"},
{"lineNum":"   11","line":"{"},
{"lineNum":"   12","line":"private:"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"    static void"},
{"lineNum":"   15","line":"    write_impl( Hdf5_handler const& file,"},
{"lineNum":"   16","line":"                std::string const& name,"},
{"lineNum":"   17","line":"                syn::data_info_t const& di,"},
{"lineNum":"   18","line":"                std::vector<hsize_t> const& all_dims_0,"},
{"lineNum":"   19","line":"                Commxx const& comm,"},
{"lineNum":"   20","line":"                int root_rank );"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"public:"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"    Hdf5_writer() = delete;"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"    // if collective = false, write out a single value to the file (value from the root"},
{"lineNum":"   27","line":"    // rank)"},
{"lineNum":"   28","line":"    //"},
{"lineNum":"   29","line":"    // if collective = true, do a manual reduction (only in serial hdf5 ), and write"},
{"lineNum":"   30","line":"    // out the data to hdf5 file. scalar data will be extended a 1-d array, vector data"},
{"lineNum":"   31","line":"    // of 1-d or higher dim will get reduced on the first dimension. the extent of the"},
{"lineNum":"   32","line":"    // first dim can be different, but all higher dims must be exactly the same across"},
{"lineNum":"   33","line":"    // all ranks"},
{"lineNum":"   34","line":"    //"},
{"lineNum":"   35","line":"    // e.g.:"},
{"lineNum":"   36","line":"    //"},
{"lineNum":"   37","line":"    //   r0->write(10, false),      r1->write(20, false)  => file0: 10"},
{"lineNum":"   38","line":"    //   r0->write(10, true),       r1->write(20, true)   => file0: [10, 20]"},
{"lineNum":"   39","line":"    //   r0->write([10, 11], true), r1->write([20], true) => file0: [10, 11, 20]"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"    template<class T>"},
{"lineNum":"   42","line":"    static void"},
{"lineNum":"   43","line":"    write( Hdf5_handler const& file,"},
{"lineNum":"   44","line":"           std::string const& name,"},
{"lineNum":"   45","line":"           T const& data,"},
{"lineNum":"   46","line":"           bool collective,"},
{"lineNum":"   47","line":"           Commxx const& comm,"},
{"lineNum":"   48","line":"           int root_rank )"},
{"lineNum":"   49","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   50","line":"        auto di = syn::extract_data_info(data);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"        // promote the dimensionality if collective write a scaler"},
{"lineNum":"   53","line":"        if (collective && di.dims.size()==0)","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"   54","line":"            di.dims = {1};","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"        auto all_dim0 = syn::collect_dims(","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   57","line":"                di.dims, collective, comm, root_rank);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"        write_impl(file, name, di, all_dim0, comm, root_rank);","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   60","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"    template<class T>"},
{"lineNum":"   63","line":"    static"},
{"lineNum":"   64","line":"    std::enable_if_t<std::is_arithmetic<T>::value, void>"},
{"lineNum":"   65","line":"    write( Hdf5_handler const& file,"},
{"lineNum":"   66","line":"           std::string const& name,"},
{"lineNum":"   67","line":"           T const* data, size_t len,"},
{"lineNum":"   68","line":"           bool collective,"},
{"lineNum":"   69","line":"           Commxx const& comm,"},
{"lineNum":"   70","line":"           int root_rank )"},
{"lineNum":"   71","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   72","line":"        syn::data_info_t di {","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   73","line":"            data,"},
{"lineNum":"   74","line":"            std::vector<hsize_t>({len}),"},
{"lineNum":"   75","line":"            hdf5_atomic_data_type<T>(),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   76","line":"            sizeof(T),"},
{"lineNum":"   77","line":"            len"},
{"lineNum":"   78","line":"        };"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"        auto all_dim0 = syn::collect_dims(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   81","line":"                di.dims, collective, comm, root_rank);"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"        write_impl(file, name, di, all_dim0, comm, root_rank);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   84","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   85","line":"};"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"inline void"},
{"lineNum":"   88","line":"Hdf5_writer::write_impl("},
{"lineNum":"   89","line":"        Hdf5_handler const& file,"},
{"lineNum":"   90","line":"        std::string const& name,"},
{"lineNum":"   91","line":"        syn::data_info_t const& di,"},
{"lineNum":"   92","line":"        std::vector<hsize_t> const& all_dims_0,"},
{"lineNum":"   93","line":"        Commxx const& comm,"},
{"lineNum":"   94","line":"        int root_rank )"},
{"lineNum":"   95","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   96","line":"    int mpi_size = comm.size();"},
{"lineNum":"   97","line":"    int mpi_rank = comm.rank();"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"    // data rank"},
{"lineNum":"  100","line":"    auto data_rank = di.dims.size();"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"    // offsets for each rank (offsets of dim0 in the combined array)"},
{"lineNum":"  103","line":"    std::vector<hsize_t> offsets(mpi_size, 0);"},
{"lineNum":"  104","line":"    for (int r=0; r<mpi_size-1; ++r) offsets[r+1] = offsets[r] + all_dims_0[r];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"    // dim0 of the combined array"},
{"lineNum":"  107","line":"    hsize_t dim0 = offsets[mpi_size-1] + all_dims_0[mpi_size-1];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"    // dims for the combined array"},
{"lineNum":"  110","line":"    auto dimsf = di.dims;"},
{"lineNum":"  111","line":"    if (dimsf.size()) dimsf[0] = dim0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"#ifdef USE_PARALLEL_HDF5"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"    if (!file.valid())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  116","line":"        throw std::runtime_error(\"invalid file handler\");","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"    // dataset"},
{"lineNum":"  119","line":"    Hdf5_handler filespace = H5Screate_simple(data_rank, dimsf.data(), NULL);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  120","line":"    Hdf5_handler dset = H5Dcreate(file, name.c_str(), di.atomic_type,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  121","line":"            filespace, H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"    // only create the dataset, but do not initiate the write"},
{"lineNum":"  124","line":"    // if the total size is 0"},
{"lineNum":"  125","line":"    if (dimsf.size() && dimsf[0] == 0) return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"    // local dims(counts)"},
{"lineNum":"  128","line":"    auto dimsm = di.dims;"},
{"lineNum":"  129","line":"    if (dimsm.size()) dimsm[0] = all_dims_0[mpi_rank];","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"    // dataspace"},
{"lineNum":"  132","line":"    Hdf5_handler memspace = H5Screate_simple(data_rank, dimsm.data(), NULL);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  133","line":"    Hdf5_handler filespace2 = H5Dget_space(dset);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"    // select hyperslab only for non-scalars"},
{"lineNum":"  136","line":"    if (data_rank)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  137","line":"    {"},
{"lineNum":"  138","line":"        auto offset = std::vector<hsize_t>(data_rank, 0);"},
{"lineNum":"  139","line":"        offset[0] = offsets[mpi_rank];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"        herr_t res = H5Sselect_hyperslab(filespace2, H5S_SELECT_SET,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  142","line":"                offset.data(), NULL, dimsm.data(), NULL);"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"        if (res < 0) throw Hdf5_exception();","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  145","line":"    }"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"    // collective write"},
{"lineNum":"  148","line":"    Hdf5_handler plist_id = H5Pcreate(H5P_DATASET_XFER);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  149","line":"    H5Pset_dxpl_mpio(plist_id, H5FD_MPIO_COLLECTIVE);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"    // write"},
{"lineNum":"  152","line":"    herr_t res = H5Dwrite(dset, di.atomic_type, memspace, filespace2, plist_id, di.ptr);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  153","line":"    if (res < 0) throw Hdf5_exception();","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"#else"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"    if (mpi_rank == root_rank)"},
{"lineNum":"  158","line":"    {"},
{"lineNum":"  159","line":"        if (!file.valid())"},
{"lineNum":"  160","line":"            throw std::runtime_error(\"invalid file handler\");"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"        // dataset"},
{"lineNum":"  163","line":"        Hdf5_handler filespace = H5Screate_simple(data_rank, dimsf.data(), NULL);"},
{"lineNum":"  164","line":"        Hdf5_handler dset = H5Dcreate(file, name.c_str(), di.atomic_type,"},
{"lineNum":"  165","line":"                filespace, H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"        // only create the dataset, but do not initiate the write"},
{"lineNum":"  168","line":"        // if the total size is 0"},
{"lineNum":"  169","line":"        if (dimsf.size() && dimsf[0] == 0) return;"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"        // get the filespace"},
{"lineNum":"  172","line":"        Hdf5_handler fspace2 = H5Dget_space(dset);"},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"        // local dims(counts)"},
{"lineNum":"  175","line":"        auto dimsm = di.dims;"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"        // loop through all ranks, recv and write"},
{"lineNum":"  178","line":"        for(int r=0; r<mpi_size; ++r)"},
{"lineNum":"  179","line":"        {"},
{"lineNum":"  180","line":"            // local dims(counts)"},
{"lineNum":"  181","line":"            if (dimsm.size()) dimsm[0] = all_dims_0[r];"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"            // dataspace"},
{"lineNum":"  184","line":"            Hdf5_handler mspace = H5Screate_simple(data_rank, dimsm.data(), NULL);"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"            // select hyperslab only for non-scalars"},
{"lineNum":"  187","line":"            if (data_rank)"},
{"lineNum":"  188","line":"            {"},
{"lineNum":"  189","line":"                auto offset = std::vector<hsize_t>(data_rank, 0);"},
{"lineNum":"  190","line":"                offset[0] = offsets[r];"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"                herr_t res = H5Sselect_hyperslab(fspace2, H5S_SELECT_SET,"},
{"lineNum":"  193","line":"                        offset.data(), NULL, dimsm.data(), NULL);"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"                if (res < 0) throw Hdf5_exception();"},
{"lineNum":"  196","line":"            }"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"            if (r == mpi_rank)"},
{"lineNum":"  199","line":"            {"},
{"lineNum":"  200","line":"                // self"},
{"lineNum":"  201","line":"                herr_t res = H5Dwrite(dset, di.atomic_type, mspace, fspace2, H5P_DEFAULT, (void*)di.ptr);"},
{"lineNum":"  202","line":"                if (res < 0) throw Hdf5_exception();"},
{"lineNum":"  203","line":"            }"},
{"lineNum":"  204","line":"            else"},
{"lineNum":"  205","line":"            {"},
{"lineNum":"  206","line":"                size_t sz = di.atomic_data_size;"},
{"lineNum":"  207","line":"                for(auto d : dimsm) sz *= d;"},
{"lineNum":"  208","line":""},
{"lineNum":"  209","line":"                if (sz)"},
{"lineNum":"  210","line":"                {"},
{"lineNum":"  211","line":"                    std::vector<uint8_t> buf(sz);;"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"                    // mpi recv from rank r"},
{"lineNum":"  214","line":"                    MPI_Status status;"},
{"lineNum":"  215","line":"                    MPI_Recv((void*)buf.data(), buf.size(), MPI_BYTE, r, 0, comm, &status);"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"                    // write"},
{"lineNum":"  218","line":"                    herr_t res = H5Dwrite(dset, di.atomic_type, mspace, fspace2,"},
{"lineNum":"  219","line":"                            H5P_DEFAULT, (void*)buf.data());"},
{"lineNum":"  220","line":""},
{"lineNum":"  221","line":"                    if (res < 0) throw Hdf5_exception();"},
{"lineNum":"  222","line":"                }"},
{"lineNum":"  223","line":"            }"},
{"lineNum":"  224","line":"        }"},
{"lineNum":"  225","line":"    }"},
{"lineNum":"  226","line":"    else"},
{"lineNum":"  227","line":"    {"},
{"lineNum":"  228","line":"        // local dims(counts)"},
{"lineNum":"  229","line":"        auto dimsm = di.dims;"},
{"lineNum":"  230","line":"        if (dimsm.size()) dimsm[0] = all_dims_0[mpi_rank];"},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"        size_t sz = di.atomic_data_size;"},
{"lineNum":"  233","line":"        for(auto d : dimsm) sz *= d;"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"        if (sz) MPI_Send((void*)di.ptr, sz, MPI_BYTE, root_rank, 0, comm);"},
{"lineNum":"  236","line":"    }"},
{"lineNum":"  237","line":"#endif"},
{"lineNum":"  238","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  239","line":""},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"#endif /* HDF5_WRITER_H_ */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 35, "covered" : 0,};
var merged_data = [];
