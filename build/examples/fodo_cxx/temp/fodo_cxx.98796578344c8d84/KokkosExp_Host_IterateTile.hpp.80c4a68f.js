var data = {lines:[
{"lineNum":"    1","line":"/*"},
{"lineNum":"    2","line":"//@HEADER"},
{"lineNum":"    3","line":"// ************************************************************************"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"//                        Kokkos v. 3.0"},
{"lineNum":"    6","line":"//       Copyright (2020) National Technology & Engineering"},
{"lineNum":"    7","line":"//               Solutions of Sandia, LLC (NTESS)."},
{"lineNum":"    8","line":"//"},
{"lineNum":"    9","line":"// Under the terms of Contract DE-NA0003525 with NTESS,"},
{"lineNum":"   10","line":"// the U.S. Government retains certain rights in this software."},
{"lineNum":"   11","line":"//"},
{"lineNum":"   12","line":"// Redistribution and use in source and binary forms, with or without"},
{"lineNum":"   13","line":"// modification, are permitted provided that the following conditions are"},
{"lineNum":"   14","line":"// met:"},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"// 1. Redistributions of source code must retain the above copyright"},
{"lineNum":"   17","line":"// notice, this list of conditions and the following disclaimer."},
{"lineNum":"   18","line":"//"},
{"lineNum":"   19","line":"// 2. Redistributions in binary form must reproduce the above copyright"},
{"lineNum":"   20","line":"// notice, this list of conditions and the following disclaimer in the"},
{"lineNum":"   21","line":"// documentation and/or other materials provided with the distribution."},
{"lineNum":"   22","line":"//"},
{"lineNum":"   23","line":"// 3. Neither the name of the Corporation nor the names of the"},
{"lineNum":"   24","line":"// contributors may be used to endorse or promote products derived from"},
{"lineNum":"   25","line":"// this software without specific prior written permission."},
{"lineNum":"   26","line":"//"},
{"lineNum":"   27","line":"// THIS SOFTWARE IS PROVIDED BY NTESS \"AS IS\" AND ANY"},
{"lineNum":"   28","line":"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"},
{"lineNum":"   29","line":"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR"},
{"lineNum":"   30","line":"// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NTESS OR THE"},
{"lineNum":"   31","line":"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,"},
{"lineNum":"   32","line":"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,"},
{"lineNum":"   33","line":"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR"},
{"lineNum":"   34","line":"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF"},
{"lineNum":"   35","line":"// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING"},
{"lineNum":"   36","line":"// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"},
{"lineNum":"   37","line":"// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   38","line":"//"},
{"lineNum":"   39","line":"// Questions? Contact Christian R. Trott (crtrott@sandia.gov)"},
{"lineNum":"   40","line":"//"},
{"lineNum":"   41","line":"// ************************************************************************"},
{"lineNum":"   42","line":"//@HEADER"},
{"lineNum":"   43","line":"*/"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"#ifndef KOKKOS_HOST_EXP_ITERATE_TILE_HPP"},
{"lineNum":"   46","line":"#define KOKKOS_HOST_EXP_ITERATE_TILE_HPP"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"#include <Kokkos_Macros.hpp>"},
{"lineNum":"   49","line":"#if defined(KOKKOS_ENABLE_AGGRESSIVE_VECTORIZATION) && \\"},
{"lineNum":"   50","line":"    defined(KOKKOS_ENABLE_PRAGMA_IVDEP) && !defined(__CUDA_ARCH__)"},
{"lineNum":"   51","line":"#define KOKKOS_MDRANGE_IVDEP"},
{"lineNum":"   52","line":"#endif"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"#ifdef KOKKOS_MDRANGE_IVDEP"},
{"lineNum":"   55","line":"#define KOKKOS_ENABLE_IVDEP_MDRANGE _Pragma(\"ivdep\")"},
{"lineNum":"   56","line":"#else"},
{"lineNum":"   57","line":"#define KOKKOS_ENABLE_IVDEP_MDRANGE"},
{"lineNum":"   58","line":"#endif"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"#include <algorithm>"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"namespace Kokkos {"},
{"lineNum":"   63","line":"namespace Impl {"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"// Temporary, for testing new loop macros"},
{"lineNum":"   66","line":"#define KOKKOS_ENABLE_NEW_LOOP_MACROS 1"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"#define LOOP_1L(type, tile)   \\"},
{"lineNum":"   69","line":"  KOKKOS_ENABLE_IVDEP_MDRANGE \\"},
{"lineNum":"   70","line":"  for (type i0 = 0; i0 < static_cast<type>(tile[0]); ++i0)"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"#define LOOP_2L(type, tile) \\"},
{"lineNum":"   73","line":"  for (type i1 = 0; i1 < static_cast<type>(tile[1]); ++i1) LOOP_1L(type, tile)"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"#define LOOP_3L(type, tile) \\"},
{"lineNum":"   76","line":"  for (type i2 = 0; i2 < static_cast<type>(tile[2]); ++i2) LOOP_2L(type, tile)"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"#define LOOP_4L(type, tile) \\"},
{"lineNum":"   79","line":"  for (type i3 = 0; i3 < static_cast<type>(tile[3]); ++i3) LOOP_3L(type, tile)"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"#define LOOP_5L(type, tile) \\"},
{"lineNum":"   82","line":"  for (type i4 = 0; i4 < static_cast<type>(tile[4]); ++i4) LOOP_4L(type, tile)"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"#define LOOP_6L(type, tile) \\"},
{"lineNum":"   85","line":"  for (type i5 = 0; i5 < static_cast<type>(tile[5]); ++i5) LOOP_5L(type, tile)"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"#define LOOP_7L(type, tile) \\"},
{"lineNum":"   88","line":"  for (type i6 = 0; i6 < static_cast<type>(tile[6]); ++i6) LOOP_6L(type, tile)"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"#define LOOP_8L(type, tile) \\"},
{"lineNum":"   91","line":"  for (type i7 = 0; i7 < static_cast<type>(tile[7]); ++i7) LOOP_7L(type, tile)"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"#define LOOP_1R(type, tile)   \\"},
{"lineNum":"   94","line":"  KOKKOS_ENABLE_IVDEP_MDRANGE \\"},
{"lineNum":"   95","line":"  for (type i0 = 0; i0 < static_cast<type>(tile[0]); ++i0)"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"#define LOOP_2R(type, tile) \\"},
{"lineNum":"   98","line":"  LOOP_1R(type, tile)       \\"},
{"lineNum":"   99","line":"  for (type i1 = 0; i1 < static_cast<type>(tile[1]); ++i1)"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"#define LOOP_3R(type, tile) \\"},
{"lineNum":"  102","line":"  LOOP_2R(type, tile)       \\"},
{"lineNum":"  103","line":"  for (type i2 = 0; i2 < static_cast<type>(tile[2]); ++i2)"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"#define LOOP_4R(type, tile) \\"},
{"lineNum":"  106","line":"  LOOP_3R(type, tile)       \\"},
{"lineNum":"  107","line":"  for (type i3 = 0; i3 < static_cast<type>(tile[3]); ++i3)"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"#define LOOP_5R(type, tile) \\"},
{"lineNum":"  110","line":"  LOOP_4R(type, tile)       \\"},
{"lineNum":"  111","line":"  for (type i4 = 0; i4 < static_cast<type>(tile[4]); ++i4)"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"#define LOOP_6R(type, tile) \\"},
{"lineNum":"  114","line":"  LOOP_5R(type, tile)       \\"},
{"lineNum":"  115","line":"  for (type i5 = 0; i5 < static_cast<type>(tile[5]); ++i5)"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"#define LOOP_7R(type, tile) \\"},
{"lineNum":"  118","line":"  LOOP_6R(type, tile)       \\"},
{"lineNum":"  119","line":"  for (type i6 = 0; i6 < static_cast<type>(tile[6]); ++i6)"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"#define LOOP_8R(type, tile) \\"},
{"lineNum":"  122","line":"  LOOP_7R(type, tile)       \\"},
{"lineNum":"  123","line":"  for (type i7 = 0; i7 < static_cast<type>(tile[7]); ++i7)"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"#define LOOP_ARGS_1 i0 + m_offset[0]"},
{"lineNum":"  126","line":"#define LOOP_ARGS_2 LOOP_ARGS_1, i1 + m_offset[1]"},
{"lineNum":"  127","line":"#define LOOP_ARGS_3 LOOP_ARGS_2, i2 + m_offset[2]"},
{"lineNum":"  128","line":"#define LOOP_ARGS_4 LOOP_ARGS_3, i3 + m_offset[3]"},
{"lineNum":"  129","line":"#define LOOP_ARGS_5 LOOP_ARGS_4, i4 + m_offset[4]"},
{"lineNum":"  130","line":"#define LOOP_ARGS_6 LOOP_ARGS_5, i5 + m_offset[5]"},
{"lineNum":"  131","line":"#define LOOP_ARGS_7 LOOP_ARGS_6, i6 + m_offset[6]"},
{"lineNum":"  132","line":"#define LOOP_ARGS_8 LOOP_ARGS_7, i7 + m_offset[7]"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"// New Loop Macros..."},
{"lineNum":"  135","line":"// parallel_for, non-tagged"},
{"lineNum":"  136","line":"#define APPLY(func, ...) func(__VA_ARGS__);"},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"// LayoutRight"},
{"lineNum":"  139","line":"// d = 0 to start"},
{"lineNum":"  140","line":"#define LOOP_R_1(func, type, m_offset, extent, d, ...)               \\"},
{"lineNum":"  141","line":"  KOKKOS_ENABLE_IVDEP_MDRANGE                                        \\"},
{"lineNum":"  142","line":"  for (type i0 = (type)0; i0 < static_cast<type>(extent[d]); ++i0) { \\"},
{"lineNum":"  143","line":"    APPLY(func, __VA_ARGS__, i0 + m_offset[d])                       \\"},
{"lineNum":"  144","line":"  }"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"#define LOOP_R_2(func, type, m_offset, extent, d, ...)               \\"},
{"lineNum":"  147","line":"  for (type i1 = (type)0; i1 < static_cast<type>(extent[d]); ++i1) { \\"},
{"lineNum":"  148","line":"    LOOP_R_1(func, type, m_offset, extent, d + 1, __VA_ARGS__,       \\"},
{"lineNum":"  149","line":"             i1 + m_offset[d])                                       \\"},
{"lineNum":"  150","line":"  }"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"#define LOOP_R_3(func, type, m_offset, extent, d, ...)               \\"},
{"lineNum":"  153","line":"  for (type i2 = (type)0; i2 < static_cast<type>(extent[d]); ++i2) { \\"},
{"lineNum":"  154","line":"    LOOP_R_2(func, type, m_offset, extent, d + 1, __VA_ARGS__,       \\"},
{"lineNum":"  155","line":"             i2 + m_offset[d])                                       \\"},
{"lineNum":"  156","line":"  }"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"#define LOOP_R_4(func, type, m_offset, extent, d, ...)               \\"},
{"lineNum":"  159","line":"  for (type i3 = (type)0; i3 < static_cast<type>(extent[d]); ++i3) { \\"},
{"lineNum":"  160","line":"    LOOP_R_3(func, type, m_offset, extent, d + 1, __VA_ARGS__,       \\"},
{"lineNum":"  161","line":"             i3 + m_offset[d])                                       \\"},
{"lineNum":"  162","line":"  }"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"#define LOOP_R_5(func, type, m_offset, extent, d, ...)               \\"},
{"lineNum":"  165","line":"  for (type i4 = (type)0; i4 < static_cast<type>(extent[d]); ++i4) { \\"},
{"lineNum":"  166","line":"    LOOP_R_4(func, type, m_offset, extent, d + 1, __VA_ARGS__,       \\"},
{"lineNum":"  167","line":"             i4 + m_offset[d])                                       \\"},
{"lineNum":"  168","line":"  }"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"#define LOOP_R_6(func, type, m_offset, extent, d, ...)               \\"},
{"lineNum":"  171","line":"  for (type i5 = (type)0; i5 < static_cast<type>(extent[d]); ++i5) { \\"},
{"lineNum":"  172","line":"    LOOP_R_5(func, type, m_offset, extent, d + 1, __VA_ARGS__,       \\"},
{"lineNum":"  173","line":"             i5 + m_offset[d])                                       \\"},
{"lineNum":"  174","line":"  }"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"#define LOOP_R_7(func, type, m_offset, extent, d, ...)               \\"},
{"lineNum":"  177","line":"  for (type i6 = (type)0; i6 < static_cast<type>(extent[d]); ++i6) { \\"},
{"lineNum":"  178","line":"    LOOP_R_6(func, type, m_offset, extent, d + 1, __VA_ARGS__,       \\"},
{"lineNum":"  179","line":"             i6 + m_offset[d])                                       \\"},
{"lineNum":"  180","line":"  }"},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"#define LOOP_R_8(func, type, m_offset, extent, d, ...)               \\"},
{"lineNum":"  183","line":"  for (type i7 = (type)0; i7 < static_cast<type>(extent[d]); ++i7) { \\"},
{"lineNum":"  184","line":"    LOOP_R_7(func, type, m_offset, extent, d + 1, __VA_ARGS__,       \\"},
{"lineNum":"  185","line":"             i7 + m_offset[d])                                       \\"},
{"lineNum":"  186","line":"  }"},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"// LayoutLeft"},
{"lineNum":"  189","line":"// d = rank-1 to start"},
{"lineNum":"  190","line":"#define LOOP_L_1(func, type, m_offset, extent, d, ...)               \\"},
{"lineNum":"  191","line":"  KOKKOS_ENABLE_IVDEP_MDRANGE                                        \\"},
{"lineNum":"  192","line":"  for (type i0 = (type)0; i0 < static_cast<type>(extent[d]); ++i0) { \\"},
{"lineNum":"  193","line":"    APPLY(func, i0 + m_offset[d], __VA_ARGS__)                       \\"},
{"lineNum":"  194","line":"  }"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"#define LOOP_L_2(func, type, m_offset, extent, d, ...)               \\"},
{"lineNum":"  197","line":"  for (type i1 = (type)0; i1 < static_cast<type>(extent[d]); ++i1) { \\"},
{"lineNum":"  198","line":"    LOOP_L_1(func, type, m_offset, extent, d - 1, i1 + m_offset[d],  \\"},
{"lineNum":"  199","line":"             __VA_ARGS__)                                            \\"},
{"lineNum":"  200","line":"  }"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"#define LOOP_L_3(func, type, m_offset, extent, d, ...)               \\"},
{"lineNum":"  203","line":"  for (type i2 = (type)0; i2 < static_cast<type>(extent[d]); ++i2) { \\"},
{"lineNum":"  204","line":"    LOOP_L_2(func, type, m_offset, extent, d - 1, i2 + m_offset[d],  \\"},
{"lineNum":"  205","line":"             __VA_ARGS__)                                            \\"},
{"lineNum":"  206","line":"  }"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"#define LOOP_L_4(func, type, m_offset, extent, d, ...)               \\"},
{"lineNum":"  209","line":"  for (type i3 = (type)0; i3 < static_cast<type>(extent[d]); ++i3) { \\"},
{"lineNum":"  210","line":"    LOOP_L_3(func, type, m_offset, extent, d - 1, i3 + m_offset[d],  \\"},
{"lineNum":"  211","line":"             __VA_ARGS__)                                            \\"},
{"lineNum":"  212","line":"  }"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"#define LOOP_L_5(func, type, m_offset, extent, d, ...)               \\"},
{"lineNum":"  215","line":"  for (type i4 = (type)0; i4 < static_cast<type>(extent[d]); ++i4) { \\"},
{"lineNum":"  216","line":"    LOOP_L_4(func, type, m_offset, extent, d - 1, i4 + m_offset[d],  \\"},
{"lineNum":"  217","line":"             __VA_ARGS__)                                            \\"},
{"lineNum":"  218","line":"  }"},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"#define LOOP_L_6(func, type, m_offset, extent, d, ...)               \\"},
{"lineNum":"  221","line":"  for (type i5 = (type)0; i5 < static_cast<type>(extent[d]); ++i5) { \\"},
{"lineNum":"  222","line":"    LOOP_L_5(func, type, m_offset, extent, d - 1, i5 + m_offset[d],  \\"},
{"lineNum":"  223","line":"             __VA_ARGS__)                                            \\"},
{"lineNum":"  224","line":"  }"},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"#define LOOP_L_7(func, type, m_offset, extent, d, ...)               \\"},
{"lineNum":"  227","line":"  for (type i6 = (type)0; i6 < static_cast<type>(extent[d]); ++i6) { \\"},
{"lineNum":"  228","line":"    LOOP_L_6(func, type, m_offset, extent, d - 1, i6 + m_offset[d],  \\"},
{"lineNum":"  229","line":"             __VA_ARGS__)                                            \\"},
{"lineNum":"  230","line":"  }"},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"#define LOOP_L_8(func, type, m_offset, extent, d, ...)               \\"},
{"lineNum":"  233","line":"  for (type i7 = (type)0; i7 < static_cast<type>(extent[d]); ++i7) { \\"},
{"lineNum":"  234","line":"    LOOP_L_7(func, type, m_offset, extent, d - 1, i7 + m_offset[d],  \\"},
{"lineNum":"  235","line":"             __VA_ARGS__)                                            \\"},
{"lineNum":"  236","line":"  }"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"// Left vs Right"},
{"lineNum":"  239","line":"// TODO: rank not necessary to pass through, can hardcode the values"},
{"lineNum":"  240","line":"#define LOOP_LAYOUT_1(func, type, is_left, m_offset, extent, rank)   \\"},
{"lineNum":"  241","line":"  KOKKOS_ENABLE_IVDEP_MDRANGE                                        \\"},
{"lineNum":"  242","line":"  for (type i0 = (type)0; i0 < static_cast<type>(extent[0]); ++i0) { \\"},
{"lineNum":"  243","line":"    APPLY(func, i0 + m_offset[0])                                    \\"},
{"lineNum":"  244","line":"  }"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"#define LOOP_LAYOUT_2(func, type, is_left, m_offset, extent, rank)            \\"},
{"lineNum":"  247","line":"  if (is_left) {                                                              \\"},
{"lineNum":"  248","line":"    for (type i1 = (type)0; i1 < static_cast<type>(extent[rank - 1]); ++i1) { \\"},
{"lineNum":"  249","line":"      LOOP_L_1(func, type, m_offset, extent, rank - 2,                        \\"},
{"lineNum":"  250","line":"               i1 + m_offset[rank - 1])                                       \\"},
{"lineNum":"  251","line":"    }                                                                         \\"},
{"lineNum":"  252","line":"  } else {                                                                    \\"},
{"lineNum":"  253","line":"    for (type i1 = (type)0; i1 < static_cast<type>(extent[0]); ++i1) {        \\"},
{"lineNum":"  254","line":"      LOOP_R_1(func, type, m_offset, extent, 1, i1 + m_offset[0])             \\"},
{"lineNum":"  255","line":"    }                                                                         \\"},
{"lineNum":"  256","line":"  }"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"#define LOOP_LAYOUT_3(func, type, is_left, m_offset, extent, rank)            \\"},
{"lineNum":"  259","line":"  if (is_left) {                                                              \\"},
{"lineNum":"  260","line":"    for (type i2 = (type)0; i2 < static_cast<type>(extent[rank - 1]); ++i2) { \\"},
{"lineNum":"  261","line":"      LOOP_L_2(func, type, m_offset, extent, rank - 2,                        \\"},
{"lineNum":"  262","line":"               i2 + m_offset[rank - 1])                                       \\"},
{"lineNum":"  263","line":"    }                                                                         \\"},
{"lineNum":"  264","line":"  } else {                                                                    \\"},
{"lineNum":"  265","line":"    for (type i2 = (type)0; i2 < static_cast<type>(extent[0]); ++i2) {        \\"},
{"lineNum":"  266","line":"      LOOP_R_2(func, type, m_offset, extent, 1, i2 + m_offset[0])             \\"},
{"lineNum":"  267","line":"    }                                                                         \\"},
{"lineNum":"  268","line":"  }"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"#define LOOP_LAYOUT_4(func, type, is_left, m_offset, extent, rank)            \\"},
{"lineNum":"  271","line":"  if (is_left) {                                                              \\"},
{"lineNum":"  272","line":"    for (type i3 = (type)0; i3 < static_cast<type>(extent[rank - 1]); ++i3) { \\"},
{"lineNum":"  273","line":"      LOOP_L_3(func, type, m_offset, extent, rank - 2,                        \\"},
{"lineNum":"  274","line":"               i3 + m_offset[rank - 1])                                       \\"},
{"lineNum":"  275","line":"    }                                                                         \\"},
{"lineNum":"  276","line":"  } else {                                                                    \\"},
{"lineNum":"  277","line":"    for (type i3 = (type)0; i3 < static_cast<type>(extent[0]); ++i3) {        \\"},
{"lineNum":"  278","line":"      LOOP_R_3(func, type, m_offset, extent, 1, i3 + m_offset[0])             \\"},
{"lineNum":"  279","line":"    }                                                                         \\"},
{"lineNum":"  280","line":"  }"},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"#define LOOP_LAYOUT_5(func, type, is_left, m_offset, extent, rank)            \\"},
{"lineNum":"  283","line":"  if (is_left) {                                                              \\"},
{"lineNum":"  284","line":"    for (type i4 = (type)0; i4 < static_cast<type>(extent[rank - 1]); ++i4) { \\"},
{"lineNum":"  285","line":"      LOOP_L_4(func, type, m_offset, extent, rank - 2,                        \\"},
{"lineNum":"  286","line":"               i4 + m_offset[rank - 1])                                       \\"},
{"lineNum":"  287","line":"    }                                                                         \\"},
{"lineNum":"  288","line":"  } else {                                                                    \\"},
{"lineNum":"  289","line":"    for (type i4 = (type)0; i4 < static_cast<type>(extent[0]); ++i4) {        \\"},
{"lineNum":"  290","line":"      LOOP_R_4(func, type, m_offset, extent, 1, i4 + m_offset[0])             \\"},
{"lineNum":"  291","line":"    }                                                                         \\"},
{"lineNum":"  292","line":"  }"},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"#define LOOP_LAYOUT_6(func, type, is_left, m_offset, extent, rank)            \\"},
{"lineNum":"  295","line":"  if (is_left) {                                                              \\"},
{"lineNum":"  296","line":"    for (type i5 = (type)0; i5 < static_cast<type>(extent[rank - 1]); ++i5) { \\"},
{"lineNum":"  297","line":"      LOOP_L_5(func, type, m_offset, extent, rank - 2,                        \\"},
{"lineNum":"  298","line":"               i5 + m_offset[rank - 1])                                       \\"},
{"lineNum":"  299","line":"    }                                                                         \\"},
{"lineNum":"  300","line":"  } else {                                                                    \\"},
{"lineNum":"  301","line":"    for (type i5 = (type)0; i5 < static_cast<type>(extent[0]); ++i5) {        \\"},
{"lineNum":"  302","line":"      LOOP_R_5(func, type, m_offset, extent, 1, i5 + m_offset[0])             \\"},
{"lineNum":"  303","line":"    }                                                                         \\"},
{"lineNum":"  304","line":"  }"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"#define LOOP_LAYOUT_7(func, type, is_left, m_offset, extent, rank)            \\"},
{"lineNum":"  307","line":"  if (is_left) {                                                              \\"},
{"lineNum":"  308","line":"    for (type i6 = (type)0; i6 < static_cast<type>(extent[rank - 1]); ++i6) { \\"},
{"lineNum":"  309","line":"      LOOP_L_6(func, type, m_offset, extent, rank - 2,                        \\"},
{"lineNum":"  310","line":"               i6 + m_offset[rank - 1])                                       \\"},
{"lineNum":"  311","line":"    }                                                                         \\"},
{"lineNum":"  312","line":"  } else {                                                                    \\"},
{"lineNum":"  313","line":"    for (type i6 = (type)0; i6 < static_cast<type>(extent[0]); ++i6) {        \\"},
{"lineNum":"  314","line":"      LOOP_R_6(func, type, m_offset, extent, 1, i6 + m_offset[0])             \\"},
{"lineNum":"  315","line":"    }                                                                         \\"},
{"lineNum":"  316","line":"  }"},
{"lineNum":"  317","line":""},
{"lineNum":"  318","line":"#define LOOP_LAYOUT_8(func, type, is_left, m_offset, extent, rank)            \\"},
{"lineNum":"  319","line":"  if (is_left) {                                                              \\"},
{"lineNum":"  320","line":"    for (type i7 = (type)0; i7 < static_cast<type>(extent[rank - 1]); ++i7) { \\"},
{"lineNum":"  321","line":"      LOOP_L_7(func, type, m_offset, extent, rank - 2,                        \\"},
{"lineNum":"  322","line":"               i7 + m_offset[rank - 1])                                       \\"},
{"lineNum":"  323","line":"    }                                                                         \\"},
{"lineNum":"  324","line":"  } else {                                                                    \\"},
{"lineNum":"  325","line":"    for (type i7 = (type)0; i7 < static_cast<type>(extent[0]); ++i7) {        \\"},
{"lineNum":"  326","line":"      LOOP_R_7(func, type, m_offset, extent, 1, i7 + m_offset[0])             \\"},
{"lineNum":"  327","line":"    }                                                                         \\"},
{"lineNum":"  328","line":"  }"},
{"lineNum":"  329","line":""},
{"lineNum":"  330","line":"// Partial vs Full Tile"},
{"lineNum":"  331","line":"#define TILE_LOOP_1(func, type, is_left, cond, m_offset, extent_full,  \\"},
{"lineNum":"  332","line":"                    extent_partial, rank)                              \\"},
{"lineNum":"  333","line":"  if (cond) {                                                          \\"},
{"lineNum":"  334","line":"    LOOP_LAYOUT_1(func, type, is_left, m_offset, extent_full, rank)    \\"},
{"lineNum":"  335","line":"  } else {                                                             \\"},
{"lineNum":"  336","line":"    LOOP_LAYOUT_1(func, type, is_left, m_offset, extent_partial, rank) \\"},
{"lineNum":"  337","line":"  }"},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"#define TILE_LOOP_2(func, type, is_left, cond, m_offset, extent_full,  \\"},
{"lineNum":"  340","line":"                    extent_partial, rank)                              \\"},
{"lineNum":"  341","line":"  if (cond) {                                                          \\"},
{"lineNum":"  342","line":"    LOOP_LAYOUT_2(func, type, is_left, m_offset, extent_full, rank)    \\"},
{"lineNum":"  343","line":"  } else {                                                             \\"},
{"lineNum":"  344","line":"    LOOP_LAYOUT_2(func, type, is_left, m_offset, extent_partial, rank) \\"},
{"lineNum":"  345","line":"  }"},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"#define TILE_LOOP_3(func, type, is_left, cond, m_offset, extent_full,  \\"},
{"lineNum":"  348","line":"                    extent_partial, rank)                              \\"},
{"lineNum":"  349","line":"  if (cond) {                                                          \\"},
{"lineNum":"  350","line":"    LOOP_LAYOUT_3(func, type, is_left, m_offset, extent_full, rank)    \\"},
{"lineNum":"  351","line":"  } else {                                                             \\"},
{"lineNum":"  352","line":"    LOOP_LAYOUT_3(func, type, is_left, m_offset, extent_partial, rank) \\"},
{"lineNum":"  353","line":"  }"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"#define TILE_LOOP_4(func, type, is_left, cond, m_offset, extent_full,  \\"},
{"lineNum":"  356","line":"                    extent_partial, rank)                              \\"},
{"lineNum":"  357","line":"  if (cond) {                                                          \\"},
{"lineNum":"  358","line":"    LOOP_LAYOUT_4(func, type, is_left, m_offset, extent_full, rank)    \\"},
{"lineNum":"  359","line":"  } else {                                                             \\"},
{"lineNum":"  360","line":"    LOOP_LAYOUT_4(func, type, is_left, m_offset, extent_partial, rank) \\"},
{"lineNum":"  361","line":"  }"},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"#define TILE_LOOP_5(func, type, is_left, cond, m_offset, extent_full,  \\"},
{"lineNum":"  364","line":"                    extent_partial, rank)                              \\"},
{"lineNum":"  365","line":"  if (cond) {                                                          \\"},
{"lineNum":"  366","line":"    LOOP_LAYOUT_5(func, type, is_left, m_offset, extent_full, rank)    \\"},
{"lineNum":"  367","line":"  } else {                                                             \\"},
{"lineNum":"  368","line":"    LOOP_LAYOUT_5(func, type, is_left, m_offset, extent_partial, rank) \\"},
{"lineNum":"  369","line":"  }"},
{"lineNum":"  370","line":""},
{"lineNum":"  371","line":"#define TILE_LOOP_6(func, type, is_left, cond, m_offset, extent_full,  \\"},
{"lineNum":"  372","line":"                    extent_partial, rank)                              \\"},
{"lineNum":"  373","line":"  if (cond) {                                                          \\"},
{"lineNum":"  374","line":"    LOOP_LAYOUT_6(func, type, is_left, m_offset, extent_full, rank)    \\"},
{"lineNum":"  375","line":"  } else {                                                             \\"},
{"lineNum":"  376","line":"    LOOP_LAYOUT_6(func, type, is_left, m_offset, extent_partial, rank) \\"},
{"lineNum":"  377","line":"  }"},
{"lineNum":"  378","line":""},
{"lineNum":"  379","line":"#define TILE_LOOP_7(func, type, is_left, cond, m_offset, extent_full,  \\"},
{"lineNum":"  380","line":"                    extent_partial, rank)                              \\"},
{"lineNum":"  381","line":"  if (cond) {                                                          \\"},
{"lineNum":"  382","line":"    LOOP_LAYOUT_7(func, type, is_left, m_offset, extent_full, rank)    \\"},
{"lineNum":"  383","line":"  } else {                                                             \\"},
{"lineNum":"  384","line":"    LOOP_LAYOUT_7(func, type, is_left, m_offset, extent_partial, rank) \\"},
{"lineNum":"  385","line":"  }"},
{"lineNum":"  386","line":""},
{"lineNum":"  387","line":"#define TILE_LOOP_8(func, type, is_left, cond, m_offset, extent_full,  \\"},
{"lineNum":"  388","line":"                    extent_partial, rank)                              \\"},
{"lineNum":"  389","line":"  if (cond) {                                                          \\"},
{"lineNum":"  390","line":"    LOOP_LAYOUT_8(func, type, is_left, m_offset, extent_full, rank)    \\"},
{"lineNum":"  391","line":"  } else {                                                             \\"},
{"lineNum":"  392","line":"    LOOP_LAYOUT_8(func, type, is_left, m_offset, extent_partial, rank) \\"},
{"lineNum":"  393","line":"  }"},
{"lineNum":"  394","line":""},
{"lineNum":"  395","line":"// parallel_reduce, non-tagged"},
{"lineNum":"  396","line":"// Reduction version"},
{"lineNum":"  397","line":"#define APPLY_REDUX(val, func, ...) func(__VA_ARGS__, val);"},
{"lineNum":"  398","line":""},
{"lineNum":"  399","line":"// LayoutRight"},
{"lineNum":"  400","line":"// d = 0 to start"},
{"lineNum":"  401","line":"#define LOOP_R_1_REDUX(val, func, type, m_offset, extent, d, ...)    \\"},
{"lineNum":"  402","line":"  KOKKOS_ENABLE_IVDEP_MDRANGE                                        \\"},
{"lineNum":"  403","line":"  for (type i0 = (type)0; i0 < static_cast<type>(extent[d]); ++i0) { \\"},
{"lineNum":"  404","line":"    APPLY_REDUX(val, func, __VA_ARGS__, i0 + m_offset[d])            \\"},
{"lineNum":"  405","line":"  }"},
{"lineNum":"  406","line":""},
{"lineNum":"  407","line":"#define LOOP_R_2_REDUX(val, func, type, m_offset, extent, d, ...)         \\"},
{"lineNum":"  408","line":"  for (type i1 = (type)0; i1 < static_cast<type>(extent[d]); ++i1) {      \\"},
{"lineNum":"  409","line":"    LOOP_R_1_REDUX(val, func, type, m_offset, extent, d + 1, __VA_ARGS__, \\"},
{"lineNum":"  410","line":"                   i1 + m_offset[d])                                      \\"},
{"lineNum":"  411","line":"  }"},
{"lineNum":"  412","line":""},
{"lineNum":"  413","line":"#define LOOP_R_3_REDUX(val, func, type, m_offset, extent, d, ...)         \\"},
{"lineNum":"  414","line":"  for (type i2 = (type)0; i2 < static_cast<type>(extent[d]); ++i2) {      \\"},
{"lineNum":"  415","line":"    LOOP_R_2_REDUX(val, func, type, m_offset, extent, d + 1, __VA_ARGS__, \\"},
{"lineNum":"  416","line":"                   i2 + m_offset[d])                                      \\"},
{"lineNum":"  417","line":"  }"},
{"lineNum":"  418","line":""},
{"lineNum":"  419","line":"#define LOOP_R_4_REDUX(val, func, type, m_offset, extent, d, ...)         \\"},
{"lineNum":"  420","line":"  for (type i3 = (type)0; i3 < static_cast<type>(extent[d]); ++i3) {      \\"},
{"lineNum":"  421","line":"    LOOP_R_3_REDUX(val, func, type, m_offset, extent, d + 1, __VA_ARGS__, \\"},
{"lineNum":"  422","line":"                   i3 + m_offset[d])                                      \\"},
{"lineNum":"  423","line":"  }"},
{"lineNum":"  424","line":""},
{"lineNum":"  425","line":"#define LOOP_R_5_REDUX(val, func, type, m_offset, extent, d, ...)         \\"},
{"lineNum":"  426","line":"  for (type i4 = (type)0; i4 < static_cast<type>(extent[d]); ++i4) {      \\"},
{"lineNum":"  427","line":"    LOOP_R_4_REDUX(val, func, type, m_offset, extent, d + 1, __VA_ARGS__, \\"},
{"lineNum":"  428","line":"                   i4 + m_offset[d])                                      \\"},
{"lineNum":"  429","line":"  }"},
{"lineNum":"  430","line":""},
{"lineNum":"  431","line":"#define LOOP_R_6_REDUX(val, func, type, m_offset, extent, d, ...)         \\"},
{"lineNum":"  432","line":"  for (type i5 = (type)0; i5 < static_cast<type>(extent[d]); ++i5) {      \\"},
{"lineNum":"  433","line":"    LOOP_R_5_REDUX(val, func, type, m_offset, extent, d + 1, __VA_ARGS__, \\"},
{"lineNum":"  434","line":"                   i5 + m_offset[d])                                      \\"},
{"lineNum":"  435","line":"  }"},
{"lineNum":"  436","line":""},
{"lineNum":"  437","line":"#define LOOP_R_7_REDUX(val, func, type, m_offset, extent, d, ...)         \\"},
{"lineNum":"  438","line":"  for (type i6 = (type)0; i6 < static_cast<type>(extent[d]); ++i6) {      \\"},
{"lineNum":"  439","line":"    LOOP_R_6_REDUX(val, func, type, m_offset, extent, d + 1, __VA_ARGS__, \\"},
{"lineNum":"  440","line":"                   i6 + m_offset[d])                                      \\"},
{"lineNum":"  441","line":"  }"},
{"lineNum":"  442","line":""},
{"lineNum":"  443","line":"#define LOOP_R_8_REDUX(val, func, type, m_offset, extent, d, ...)         \\"},
{"lineNum":"  444","line":"  for (type i7 = (type)0; i7 < static_cast<type>(extent[d]); ++i7) {      \\"},
{"lineNum":"  445","line":"    LOOP_R_7_REDUX(val, func, type, m_offset, extent, d + 1, __VA_ARGS__, \\"},
{"lineNum":"  446","line":"                   i7 + m_offset[d])                                      \\"},
{"lineNum":"  447","line":"  }"},
{"lineNum":"  448","line":""},
{"lineNum":"  449","line":"// LayoutLeft"},
{"lineNum":"  450","line":"// d = rank-1 to start"},
{"lineNum":"  451","line":"#define LOOP_L_1_REDUX(val, func, type, m_offset, extent, d, ...)    \\"},
{"lineNum":"  452","line":"  KOKKOS_ENABLE_IVDEP_MDRANGE                                        \\"},
{"lineNum":"  453","line":"  for (type i0 = (type)0; i0 < static_cast<type>(extent[d]); ++i0) { \\"},
{"lineNum":"  454","line":"    APPLY_REDUX(val, func, i0 + m_offset[d], __VA_ARGS__)            \\"},
{"lineNum":"  455","line":"  }"},
{"lineNum":"  456","line":""},
{"lineNum":"  457","line":"#define LOOP_L_2_REDUX(val, func, type, m_offset, extent, d, ...)              \\"},
{"lineNum":"  458","line":"  for (type i1 = (type)0; i1 < static_cast<type>(extent[d]); ++i1) {           \\"},
{"lineNum":"  459","line":"    LOOP_L_1_REDUX(val, func, type, m_offset, extent, d - 1, i1 + m_offset[d], \\"},
{"lineNum":"  460","line":"                   __VA_ARGS__)                                                \\"},
{"lineNum":"  461","line":"  }"},
{"lineNum":"  462","line":""},
{"lineNum":"  463","line":"#define LOOP_L_3_REDUX(val, func, type, m_offset, extent, d, ...)              \\"},
{"lineNum":"  464","line":"  for (type i2 = (type)0; i2 < static_cast<type>(extent[d]); ++i2) {           \\"},
{"lineNum":"  465","line":"    LOOP_L_2_REDUX(val, func, type, m_offset, extent, d - 1, i2 + m_offset[d], \\"},
{"lineNum":"  466","line":"                   __VA_ARGS__)                                                \\"},
{"lineNum":"  467","line":"  }"},
{"lineNum":"  468","line":""},
{"lineNum":"  469","line":"#define LOOP_L_4_REDUX(val, func, type, m_offset, extent, d, ...)              \\"},
{"lineNum":"  470","line":"  for (type i3 = (type)0; i3 < static_cast<type>(extent[d]); ++i3) {           \\"},
{"lineNum":"  471","line":"    LOOP_L_3_REDUX(val, func, type, m_offset, extent, d - 1, i3 + m_offset[d], \\"},
{"lineNum":"  472","line":"                   __VA_ARGS__)                                                \\"},
{"lineNum":"  473","line":"  }"},
{"lineNum":"  474","line":""},
{"lineNum":"  475","line":"#define LOOP_L_5_REDUX(val, func, type, m_offset, extent, d, ...)              \\"},
{"lineNum":"  476","line":"  for (type i4 = (type)0; i4 < static_cast<type>(extent[d]); ++i4) {           \\"},
{"lineNum":"  477","line":"    LOOP_L_4_REDUX(val, func, type, m_offset, extent, d - 1, i4 + m_offset[d], \\"},
{"lineNum":"  478","line":"                   __VA_ARGS__)                                                \\"},
{"lineNum":"  479","line":"  }"},
{"lineNum":"  480","line":""},
{"lineNum":"  481","line":"#define LOOP_L_6_REDUX(val, func, type, m_offset, extent, d, ...)              \\"},
{"lineNum":"  482","line":"  for (type i5 = (type)0; i5 < static_cast<type>(extent[d]); ++i5) {           \\"},
{"lineNum":"  483","line":"    LOOP_L_5_REDUX(val, func, type, m_offset, extent, d - 1, i5 + m_offset[d], \\"},
{"lineNum":"  484","line":"                   __VA_ARGS__)                                                \\"},
{"lineNum":"  485","line":"  }"},
{"lineNum":"  486","line":""},
{"lineNum":"  487","line":"#define LOOP_L_7_REDUX(val, func, type, m_offset, extent, d, ...)              \\"},
{"lineNum":"  488","line":"  for (type i6 = (type)0; i6 < static_cast<type>(extent[d]); ++i6) {           \\"},
{"lineNum":"  489","line":"    LOOP_L_6_REDUX(val, func, type, m_offset, extent, d - 1, i6 + m_offset[d], \\"},
{"lineNum":"  490","line":"                   __VA_ARGS__)                                                \\"},
{"lineNum":"  491","line":"  }"},
{"lineNum":"  492","line":""},
{"lineNum":"  493","line":"#define LOOP_L_8_REDUX(val, func, type, m_offset, extent, d, ...)              \\"},
{"lineNum":"  494","line":"  for (type i7 = (type)0; i7 < static_cast<type>(extent[d]); ++i7) {           \\"},
{"lineNum":"  495","line":"    LOOP_L_7_REDUX(val, func, type, m_offset, extent, d - 1, i7 + m_offset[d], \\"},
{"lineNum":"  496","line":"                   __VA_ARGS__)                                                \\"},
{"lineNum":"  497","line":"  }"},
{"lineNum":"  498","line":""},
{"lineNum":"  499","line":"// Left vs Right"},
{"lineNum":"  500","line":"#define LOOP_LAYOUT_1_REDUX(val, func, type, is_left, m_offset, extent, rank) \\"},
{"lineNum":"  501","line":"  KOKKOS_ENABLE_IVDEP_MDRANGE                                                 \\"},
{"lineNum":"  502","line":"  for (type i0 = (type)0; i0 < static_cast<type>(extent[0]); ++i0) {          \\"},
{"lineNum":"  503","line":"    APPLY_REDUX(val, func, i0 + m_offset[0])                                  \\"},
{"lineNum":"  504","line":"  }"},
{"lineNum":"  505","line":""},
{"lineNum":"  506","line":"#define LOOP_LAYOUT_2_REDUX(val, func, type, is_left, m_offset, extent, rank) \\"},
{"lineNum":"  507","line":"  if (is_left) {                                                              \\"},
{"lineNum":"  508","line":"    for (type i1 = (type)0; i1 < static_cast<type>(extent[rank - 1]); ++i1) { \\"},
{"lineNum":"  509","line":"      LOOP_L_1_REDUX(val, func, type, m_offset, extent, rank - 2,             \\"},
{"lineNum":"  510","line":"                     i1 + m_offset[rank - 1])                                 \\"},
{"lineNum":"  511","line":"    }                                                                         \\"},
{"lineNum":"  512","line":"  } else {                                                                    \\"},
{"lineNum":"  513","line":"    for (type i1 = (type)0; i1 < static_cast<type>(extent[0]); ++i1) {        \\"},
{"lineNum":"  514","line":"      LOOP_R_1_REDUX(val, func, type, m_offset, extent, 1, i1 + m_offset[0])  \\"},
{"lineNum":"  515","line":"    }                                                                         \\"},
{"lineNum":"  516","line":"  }"},
{"lineNum":"  517","line":""},
{"lineNum":"  518","line":"#define LOOP_LAYOUT_3_REDUX(val, func, type, is_left, m_offset, extent, rank) \\"},
{"lineNum":"  519","line":"  if (is_left) {                                                              \\"},
{"lineNum":"  520","line":"    for (type i2 = (type)0; i2 < static_cast<type>(extent[rank - 1]); ++i2) { \\"},
{"lineNum":"  521","line":"      LOOP_L_2_REDUX(val, func, type, m_offset, extent, rank - 2,             \\"},
{"lineNum":"  522","line":"                     i2 + m_offset[rank - 1])                                 \\"},
{"lineNum":"  523","line":"    }                                                                         \\"},
{"lineNum":"  524","line":"  } else {                                                                    \\"},
{"lineNum":"  525","line":"    for (type i2 = (type)0; i2 < static_cast<type>(extent[0]); ++i2) {        \\"},
{"lineNum":"  526","line":"      LOOP_R_2_REDUX(val, func, type, m_offset, extent, 1, i2 + m_offset[0])  \\"},
{"lineNum":"  527","line":"    }                                                                         \\"},
{"lineNum":"  528","line":"  }"},
{"lineNum":"  529","line":""},
{"lineNum":"  530","line":"#define LOOP_LAYOUT_4_REDUX(val, func, type, is_left, m_offset, extent, rank) \\"},
{"lineNum":"  531","line":"  if (is_left) {                                                              \\"},
{"lineNum":"  532","line":"    for (type i3 = (type)0; i3 < static_cast<type>(extent[rank - 1]); ++i3) { \\"},
{"lineNum":"  533","line":"      LOOP_L_3_REDUX(val, func, type, m_offset, extent, rank - 2,             \\"},
{"lineNum":"  534","line":"                     i3 + m_offset[rank - 1])                                 \\"},
{"lineNum":"  535","line":"    }                                                                         \\"},
{"lineNum":"  536","line":"  } else {                                                                    \\"},
{"lineNum":"  537","line":"    for (type i3 = (type)0; i3 < static_cast<type>(extent[0]); ++i3) {        \\"},
{"lineNum":"  538","line":"      LOOP_R_3_REDUX(val, func, type, m_offset, extent, 1, i3 + m_offset[0])  \\"},
{"lineNum":"  539","line":"    }                                                                         \\"},
{"lineNum":"  540","line":"  }"},
{"lineNum":"  541","line":""},
{"lineNum":"  542","line":"#define LOOP_LAYOUT_5_REDUX(val, func, type, is_left, m_offset, extent, rank) \\"},
{"lineNum":"  543","line":"  if (is_left) {                                                              \\"},
{"lineNum":"  544","line":"    for (type i4 = (type)0; i4 < static_cast<type>(extent[rank - 1]); ++i4) { \\"},
{"lineNum":"  545","line":"      LOOP_L_4_REDUX(val, func, type, m_offset, extent, rank - 2,             \\"},
{"lineNum":"  546","line":"                     i4 + m_offset[rank - 1])                                 \\"},
{"lineNum":"  547","line":"    }                                                                         \\"},
{"lineNum":"  548","line":"  } else {                                                                    \\"},
{"lineNum":"  549","line":"    for (type i4 = (type)0; i4 < static_cast<type>(extent[0]); ++i4) {        \\"},
{"lineNum":"  550","line":"      LOOP_R_4_REDUX(val, func, type, m_offset, extent, 1, i4 + m_offset[0])  \\"},
{"lineNum":"  551","line":"    }                                                                         \\"},
{"lineNum":"  552","line":"  }"},
{"lineNum":"  553","line":""},
{"lineNum":"  554","line":"#define LOOP_LAYOUT_6_REDUX(val, func, type, is_left, m_offset, extent, rank) \\"},
{"lineNum":"  555","line":"  if (is_left) {                                                              \\"},
{"lineNum":"  556","line":"    for (type i5 = (type)0; i5 < static_cast<type>(extent[rank - 1]); ++i5) { \\"},
{"lineNum":"  557","line":"      LOOP_L_5_REDUX(val, func, type, m_offset, extent, rank - 2,             \\"},
{"lineNum":"  558","line":"                     i5 + m_offset[rank - 1])                                 \\"},
{"lineNum":"  559","line":"    }                                                                         \\"},
{"lineNum":"  560","line":"  } else {                                                                    \\"},
{"lineNum":"  561","line":"    for (type i5 = (type)0; i5 < static_cast<type>(extent[0]); ++i5) {        \\"},
{"lineNum":"  562","line":"      LOOP_R_5_REDUX(val, func, type, m_offset, extent, 1, i5 + m_offset[0])  \\"},
{"lineNum":"  563","line":"    }                                                                         \\"},
{"lineNum":"  564","line":"  }"},
{"lineNum":"  565","line":""},
{"lineNum":"  566","line":"#define LOOP_LAYOUT_7_REDUX(val, func, type, is_left, m_offset, extent, rank) \\"},
{"lineNum":"  567","line":"  if (is_left) {                                                              \\"},
{"lineNum":"  568","line":"    for (type i6 = (type)0; i6 < static_cast<type>(extent[rank - 1]); ++i6) { \\"},
{"lineNum":"  569","line":"      LOOP_L_6_REDUX(val, func, type, m_offset, extent, rank - 2,             \\"},
{"lineNum":"  570","line":"                     i6 + m_offset[rank - 1])                                 \\"},
{"lineNum":"  571","line":"    }                                                                         \\"},
{"lineNum":"  572","line":"  } else {                                                                    \\"},
{"lineNum":"  573","line":"    for (type i6 = (type)0; i6 < static_cast<type>(extent[0]); ++i6) {        \\"},
{"lineNum":"  574","line":"      LOOP_R_6_REDUX(val, func, type, m_offset, extent, 1, i6 + m_offset[0])  \\"},
{"lineNum":"  575","line":"    }                                                                         \\"},
{"lineNum":"  576","line":"  }"},
{"lineNum":"  577","line":""},
{"lineNum":"  578","line":"#define LOOP_LAYOUT_8_REDUX(val, func, type, is_left, m_offset, extent, rank) \\"},
{"lineNum":"  579","line":"  if (is_left) {                                                              \\"},
{"lineNum":"  580","line":"    for (type i7 = (type)0; i7 < static_cast<type>(extent[rank - 1]); ++i7) { \\"},
{"lineNum":"  581","line":"      LOOP_L_7_REDUX(val, func, type, m_offset, extent, rank - 2,             \\"},
{"lineNum":"  582","line":"                     i7 + m_offset[rank - 1])                                 \\"},
{"lineNum":"  583","line":"    }                                                                         \\"},
{"lineNum":"  584","line":"  } else {                                                                    \\"},
{"lineNum":"  585","line":"    for (type i7 = (type)0; i7 < static_cast<type>(extent[0]); ++i7) {        \\"},
{"lineNum":"  586","line":"      LOOP_R_7_REDUX(val, func, type, m_offset, extent, 1, i7 + m_offset[0])  \\"},
{"lineNum":"  587","line":"    }                                                                         \\"},
{"lineNum":"  588","line":"  }"},
{"lineNum":"  589","line":""},
{"lineNum":"  590","line":"// Partial vs Full Tile"},
{"lineNum":"  591","line":"#define TILE_LOOP_1_REDUX(val, func, type, is_left, cond, m_offset,            \\"},
{"lineNum":"  592","line":"                          extent_full, extent_partial, rank)                   \\"},
{"lineNum":"  593","line":"  if (cond) {                                                                  \\"},
{"lineNum":"  594","line":"    LOOP_LAYOUT_1_REDUX(val, func, type, is_left, m_offset, extent_full, rank) \\"},
{"lineNum":"  595","line":"  } else {                                                                     \\"},
{"lineNum":"  596","line":"    LOOP_LAYOUT_1_REDUX(val, func, type, is_left, m_offset, extent_partial,    \\"},
{"lineNum":"  597","line":"                        rank)                                                  \\"},
{"lineNum":"  598","line":"  }"},
{"lineNum":"  599","line":""},
{"lineNum":"  600","line":"#define TILE_LOOP_2_REDUX(val, func, type, is_left, cond, m_offset,            \\"},
{"lineNum":"  601","line":"                          extent_full, extent_partial, rank)                   \\"},
{"lineNum":"  602","line":"  if (cond) {                                                                  \\"},
{"lineNum":"  603","line":"    LOOP_LAYOUT_2_REDUX(val, func, type, is_left, m_offset, extent_full, rank) \\"},
{"lineNum":"  604","line":"  } else {                                                                     \\"},
{"lineNum":"  605","line":"    LOOP_LAYOUT_2_REDUX(val, func, type, is_left, m_offset, extent_partial,    \\"},
{"lineNum":"  606","line":"                        rank)                                                  \\"},
{"lineNum":"  607","line":"  }"},
{"lineNum":"  608","line":""},
{"lineNum":"  609","line":"#define TILE_LOOP_3_REDUX(val, func, type, is_left, cond, m_offset,            \\"},
{"lineNum":"  610","line":"                          extent_full, extent_partial, rank)                   \\"},
{"lineNum":"  611","line":"  if (cond) {                                                                  \\"},
{"lineNum":"  612","line":"    LOOP_LAYOUT_3_REDUX(val, func, type, is_left, m_offset, extent_full, rank) \\"},
{"lineNum":"  613","line":"  } else {                                                                     \\"},
{"lineNum":"  614","line":"    LOOP_LAYOUT_3_REDUX(val, func, type, is_left, m_offset, extent_partial,    \\"},
{"lineNum":"  615","line":"                        rank)                                                  \\"},
{"lineNum":"  616","line":"  }"},
{"lineNum":"  617","line":""},
{"lineNum":"  618","line":"#define TILE_LOOP_4_REDUX(val, func, type, is_left, cond, m_offset,            \\"},
{"lineNum":"  619","line":"                          extent_full, extent_partial, rank)                   \\"},
{"lineNum":"  620","line":"  if (cond) {                                                                  \\"},
{"lineNum":"  621","line":"    LOOP_LAYOUT_4_REDUX(val, func, type, is_left, m_offset, extent_full, rank) \\"},
{"lineNum":"  622","line":"  } else {                                                                     \\"},
{"lineNum":"  623","line":"    LOOP_LAYOUT_4_REDUX(val, func, type, is_left, m_offset, extent_partial,    \\"},
{"lineNum":"  624","line":"                        rank)                                                  \\"},
{"lineNum":"  625","line":"  }"},
{"lineNum":"  626","line":""},
{"lineNum":"  627","line":"#define TILE_LOOP_5_REDUX(val, func, type, is_left, cond, m_offset,            \\"},
{"lineNum":"  628","line":"                          extent_full, extent_partial, rank)                   \\"},
{"lineNum":"  629","line":"  if (cond) {                                                                  \\"},
{"lineNum":"  630","line":"    LOOP_LAYOUT_5_REDUX(val, func, type, is_left, m_offset, extent_full, rank) \\"},
{"lineNum":"  631","line":"  } else {                                                                     \\"},
{"lineNum":"  632","line":"    LOOP_LAYOUT_5_REDUX(val, func, type, is_left, m_offset, extent_partial,    \\"},
{"lineNum":"  633","line":"                        rank)                                                  \\"},
{"lineNum":"  634","line":"  }"},
{"lineNum":"  635","line":""},
{"lineNum":"  636","line":"#define TILE_LOOP_6_REDUX(val, func, type, is_left, cond, m_offset,            \\"},
{"lineNum":"  637","line":"                          extent_full, extent_partial, rank)                   \\"},
{"lineNum":"  638","line":"  if (cond) {                                                                  \\"},
{"lineNum":"  639","line":"    LOOP_LAYOUT_6_REDUX(val, func, type, is_left, m_offset, extent_full, rank) \\"},
{"lineNum":"  640","line":"  } else {                                                                     \\"},
{"lineNum":"  641","line":"    LOOP_LAYOUT_6_REDUX(val, func, type, is_left, m_offset, extent_partial,    \\"},
{"lineNum":"  642","line":"                        rank)                                                  \\"},
{"lineNum":"  643","line":"  }"},
{"lineNum":"  644","line":""},
{"lineNum":"  645","line":"#define TILE_LOOP_7_REDUX(val, func, type, is_left, cond, m_offset,            \\"},
{"lineNum":"  646","line":"                          extent_full, extent_partial, rank)                   \\"},
{"lineNum":"  647","line":"  if (cond) {                                                                  \\"},
{"lineNum":"  648","line":"    LOOP_LAYOUT_7_REDUX(val, func, type, is_left, m_offset, extent_full, rank) \\"},
{"lineNum":"  649","line":"  } else {                                                                     \\"},
{"lineNum":"  650","line":"    LOOP_LAYOUT_7_REDUX(val, func, type, is_left, m_offset, extent_partial,    \\"},
{"lineNum":"  651","line":"                        rank)                                                  \\"},
{"lineNum":"  652","line":"  }"},
{"lineNum":"  653","line":""},
{"lineNum":"  654","line":"#define TILE_LOOP_8_REDUX(val, func, type, is_left, cond, m_offset,            \\"},
{"lineNum":"  655","line":"                          extent_full, extent_partial, rank)                   \\"},
{"lineNum":"  656","line":"  if (cond) {                                                                  \\"},
{"lineNum":"  657","line":"    LOOP_LAYOUT_8_REDUX(val, func, type, is_left, m_offset, extent_full, rank) \\"},
{"lineNum":"  658","line":"  } else {                                                                     \\"},
{"lineNum":"  659","line":"    LOOP_LAYOUT_8_REDUX(val, func, type, is_left, m_offset, extent_partial,    \\"},
{"lineNum":"  660","line":"                        rank)                                                  \\"},
{"lineNum":"  661","line":"  }"},
{"lineNum":"  662","line":"// end New Loop Macros"},
{"lineNum":"  663","line":""},
{"lineNum":"  664","line":"// tagged macros"},
{"lineNum":"  665","line":"#define TAGGED_APPLY(tag, func, ...) func(tag, __VA_ARGS__);"},
{"lineNum":"  666","line":""},
{"lineNum":"  667","line":"// LayoutRight"},
{"lineNum":"  668","line":"// d = 0 to start"},
{"lineNum":"  669","line":"#define TAGGED_LOOP_R_1(tag, func, type, m_offset, extent, d, ...)   \\"},
{"lineNum":"  670","line":"  KOKKOS_ENABLE_IVDEP_MDRANGE                                        \\"},
{"lineNum":"  671","line":"  for (type i0 = (type)0; i0 < static_cast<type>(extent[d]); ++i0) { \\"},
{"lineNum":"  672","line":"    TAGGED_APPLY(tag, func, __VA_ARGS__, i0 + m_offset[d])           \\"},
{"lineNum":"  673","line":"  }"},
{"lineNum":"  674","line":""},
{"lineNum":"  675","line":"#define TAGGED_LOOP_R_2(tag, func, type, m_offset, extent, d, ...)         \\"},
{"lineNum":"  676","line":"  for (type i1 = (type)0; i1 < static_cast<type>(extent[d]); ++i1) {       \\"},
{"lineNum":"  677","line":"    TAGGED_LOOP_R_1(tag, func, type, m_offset, extent, d + 1, __VA_ARGS__, \\"},
{"lineNum":"  678","line":"                    i1 + m_offset[d])                                      \\"},
{"lineNum":"  679","line":"  }"},
{"lineNum":"  680","line":""},
{"lineNum":"  681","line":"#define TAGGED_LOOP_R_3(tag, func, type, m_offset, extent, d, ...)         \\"},
{"lineNum":"  682","line":"  for (type i2 = (type)0; i2 < static_cast<type>(extent[d]); ++i2) {       \\"},
{"lineNum":"  683","line":"    TAGGED_LOOP_R_2(tag, func, type, m_offset, extent, d + 1, __VA_ARGS__, \\"},
{"lineNum":"  684","line":"                    i2 + m_offset[d])                                      \\"},
{"lineNum":"  685","line":"  }"},
{"lineNum":"  686","line":""},
{"lineNum":"  687","line":"#define TAGGED_LOOP_R_4(tag, func, type, m_offset, extent, d, ...)         \\"},
{"lineNum":"  688","line":"  for (type i3 = (type)0; i3 < static_cast<type>(extent[d]); ++i3) {       \\"},
{"lineNum":"  689","line":"    TAGGED_LOOP_R_3(tag, func, type, m_offset, extent, d + 1, __VA_ARGS__, \\"},
{"lineNum":"  690","line":"                    i3 + m_offset[d])                                      \\"},
{"lineNum":"  691","line":"  }"},
{"lineNum":"  692","line":""},
{"lineNum":"  693","line":"#define TAGGED_LOOP_R_5(tag, func, type, m_offset, extent, d, ...)         \\"},
{"lineNum":"  694","line":"  for (type i4 = (type)0; i4 < static_cast<type>(extent[d]); ++i4) {       \\"},
{"lineNum":"  695","line":"    TAGGED_LOOP_R_4(tag, func, type, m_offset, extent, d + 1, __VA_ARGS__, \\"},
{"lineNum":"  696","line":"                    i4 + m_offset[d])                                      \\"},
{"lineNum":"  697","line":"  }"},
{"lineNum":"  698","line":""},
{"lineNum":"  699","line":"#define TAGGED_LOOP_R_6(tag, func, type, m_offset, extent, d, ...)         \\"},
{"lineNum":"  700","line":"  for (type i5 = (type)0; i5 < static_cast<type>(extent[d]); ++i5) {       \\"},
{"lineNum":"  701","line":"    TAGGED_LOOP_R_5(tag, func, type, m_offset, extent, d + 1, __VA_ARGS__, \\"},
{"lineNum":"  702","line":"                    i5 + m_offset[d])                                      \\"},
{"lineNum":"  703","line":"  }"},
{"lineNum":"  704","line":""},
{"lineNum":"  705","line":"#define TAGGED_LOOP_R_7(tag, func, type, m_offset, extent, d, ...)         \\"},
{"lineNum":"  706","line":"  for (type i6 = (type)0; i6 < static_cast<type>(extent[d]); ++i6) {       \\"},
{"lineNum":"  707","line":"    TAGGED_LOOP_R_6(tag, func, type, m_offset, extent, d + 1, __VA_ARGS__, \\"},
{"lineNum":"  708","line":"                    i6 + m_offset[d])                                      \\"},
{"lineNum":"  709","line":"  }"},
{"lineNum":"  710","line":""},
{"lineNum":"  711","line":"#define TAGGED_LOOP_R_8(tag, func, type, m_offset, extent, d, ...)         \\"},
{"lineNum":"  712","line":"  for (type i7 = (type)0; i7 < static_cast<type>(extent[d]); ++i7) {       \\"},
{"lineNum":"  713","line":"    TAGGED_LOOP_R_7(tag, func, type, m_offset, extent, d + 1, __VA_ARGS__, \\"},
{"lineNum":"  714","line":"                    i7 + m_offset[d])                                      \\"},
{"lineNum":"  715","line":"  }"},
{"lineNum":"  716","line":""},
{"lineNum":"  717","line":"// LayoutLeft"},
{"lineNum":"  718","line":"// d = rank-1 to start"},
{"lineNum":"  719","line":"#define TAGGED_LOOP_L_1(tag, func, type, m_offset, extent, d, ...)   \\"},
{"lineNum":"  720","line":"  KOKKOS_ENABLE_IVDEP_MDRANGE                                        \\"},
{"lineNum":"  721","line":"  for (type i0 = (type)0; i0 < static_cast<type>(extent[d]); ++i0) { \\"},
{"lineNum":"  722","line":"    TAGGED_APPLY(tag, func, i0 + m_offset[d], __VA_ARGS__)           \\"},
{"lineNum":"  723","line":"  }"},
{"lineNum":"  724","line":""},
{"lineNum":"  725","line":"#define TAGGED_LOOP_L_2(tag, func, type, m_offset, extent, d, ...)   \\"},
{"lineNum":"  726","line":"  for (type i1 = (type)0; i1 < static_cast<type>(extent[d]); ++i1) { \\"},
{"lineNum":"  727","line":"    TAGGED_LOOP_L_1(tag, func, type, m_offset, extent, d - 1,        \\"},
{"lineNum":"  728","line":"                    i1 + m_offset[d], __VA_ARGS__)                   \\"},
{"lineNum":"  729","line":"  }"},
{"lineNum":"  730","line":""},
{"lineNum":"  731","line":"#define TAGGED_LOOP_L_3(tag, func, type, m_offset, extent, d, ...)   \\"},
{"lineNum":"  732","line":"  for (type i2 = (type)0; i2 < static_cast<type>(extent[d]); ++i2) { \\"},
{"lineNum":"  733","line":"    TAGGED_LOOP_L_2(tag, func, type, m_offset, extent, d - 1,        \\"},
{"lineNum":"  734","line":"                    i2 + m_offset[d], __VA_ARGS__)                   \\"},
{"lineNum":"  735","line":"  }"},
{"lineNum":"  736","line":""},
{"lineNum":"  737","line":"#define TAGGED_LOOP_L_4(tag, func, type, m_offset, extent, d, ...)   \\"},
{"lineNum":"  738","line":"  for (type i3 = (type)0; i3 < static_cast<type>(extent[d]); ++i3) { \\"},
{"lineNum":"  739","line":"    TAGGED_LOOP_L_3(tag, func, type, m_offset, extent, d - 1,        \\"},
{"lineNum":"  740","line":"                    i3 + m_offset[d], __VA_ARGS__)                   \\"},
{"lineNum":"  741","line":"  }"},
{"lineNum":"  742","line":""},
{"lineNum":"  743","line":"#define TAGGED_LOOP_L_5(tag, func, type, m_offset, extent, d, ...)   \\"},
{"lineNum":"  744","line":"  for (type i4 = (type)0; i4 < static_cast<type>(extent[d]); ++i4) { \\"},
{"lineNum":"  745","line":"    TAGGED_LOOP_L_4(tag, func, type, m_offset, extent, d - 1,        \\"},
{"lineNum":"  746","line":"                    i4 + m_offset[d], __VA_ARGS__)                   \\"},
{"lineNum":"  747","line":"  }"},
{"lineNum":"  748","line":""},
{"lineNum":"  749","line":"#define TAGGED_LOOP_L_6(tag, func, type, m_offset, extent, d, ...)   \\"},
{"lineNum":"  750","line":"  for (type i5 = (type)0; i5 < static_cast<type>(extent[d]); ++i5) { \\"},
{"lineNum":"  751","line":"    TAGGED_LOOP_L_5(tag, func, type, m_offset, extent, d - 1,        \\"},
{"lineNum":"  752","line":"                    i5 + m_offset[d], __VA_ARGS__)                   \\"},
{"lineNum":"  753","line":"  }"},
{"lineNum":"  754","line":""},
{"lineNum":"  755","line":"#define TAGGED_LOOP_L_7(tag, func, type, m_offset, extent, d, ...)   \\"},
{"lineNum":"  756","line":"  for (type i6 = (type)0; i6 < static_cast<type>(extent[d]); ++i6) { \\"},
{"lineNum":"  757","line":"    TAGGED_LOOP_L_6(tag, func, type, m_offset, extent, d - 1,        \\"},
{"lineNum":"  758","line":"                    i6 + m_offset[d], __VA_ARGS__)                   \\"},
{"lineNum":"  759","line":"  }"},
{"lineNum":"  760","line":""},
{"lineNum":"  761","line":"#define TAGGED_LOOP_L_8(tag, func, type, m_offset, extent, d, ...)   \\"},
{"lineNum":"  762","line":"  for (type i7 = (type)0; i7 < static_cast<type>(extent[d]); ++i7) { \\"},
{"lineNum":"  763","line":"    TAGGED_LOOP_L_7(tag, func, type, m_offset, extent, d - 1,        \\"},
{"lineNum":"  764","line":"                    i7 + m_offset[d], __VA_ARGS__)                   \\"},
{"lineNum":"  765","line":"  }"},
{"lineNum":"  766","line":""},
{"lineNum":"  767","line":"// Left vs Right"},
{"lineNum":"  768","line":"// TODO: rank not necessary to pass through, can hardcode the values"},
{"lineNum":"  769","line":"#define TAGGED_LOOP_LAYOUT_1(tag, func, type, is_left, m_offset, extent, rank) \\"},
{"lineNum":"  770","line":"  KOKKOS_ENABLE_IVDEP_MDRANGE                                                  \\"},
{"lineNum":"  771","line":"  for (type i0 = (type)0; i0 < static_cast<type>(extent[0]); ++i0) {           \\"},
{"lineNum":"  772","line":"    TAGGED_APPLY(tag, func, i0 + m_offset[0])                                  \\"},
{"lineNum":"  773","line":"  }"},
{"lineNum":"  774","line":""},
{"lineNum":"  775","line":"#define TAGGED_LOOP_LAYOUT_2(tag, func, type, is_left, m_offset, extent, rank) \\"},
{"lineNum":"  776","line":"  if (is_left) {                                                               \\"},
{"lineNum":"  777","line":"    for (type i1 = (type)0; i1 < static_cast<type>(extent[rank - 1]); ++i1) {  \\"},
{"lineNum":"  778","line":"      TAGGED_LOOP_L_1(tag, func, type, m_offset, extent, rank - 2,             \\"},
{"lineNum":"  779","line":"                      i1 + m_offset[rank - 1])                                 \\"},
{"lineNum":"  780","line":"    }                                                                          \\"},
{"lineNum":"  781","line":"  } else {                                                                     \\"},
{"lineNum":"  782","line":"    for (type i1 = (type)0; i1 < static_cast<type>(extent[0]); ++i1) {         \\"},
{"lineNum":"  783","line":"      TAGGED_LOOP_R_1(tag, func, type, m_offset, extent, 1, i1 + m_offset[0])  \\"},
{"lineNum":"  784","line":"    }                                                                          \\"},
{"lineNum":"  785","line":"  }"},
{"lineNum":"  786","line":""},
{"lineNum":"  787","line":"#define TAGGED_LOOP_LAYOUT_3(tag, func, type, is_left, m_offset, extent, rank) \\"},
{"lineNum":"  788","line":"  if (is_left) {                                                               \\"},
{"lineNum":"  789","line":"    for (type i2 = (type)0; i2 < static_cast<type>(extent[rank - 1]); ++i2) {  \\"},
{"lineNum":"  790","line":"      TAGGED_LOOP_L_2(tag, func, type, m_offset, extent, rank - 2,             \\"},
{"lineNum":"  791","line":"                      i2 + m_offset[rank - 1])                                 \\"},
{"lineNum":"  792","line":"    }                                                                          \\"},
{"lineNum":"  793","line":"  } else {                                                                     \\"},
{"lineNum":"  794","line":"    for (type i2 = (type)0; i2 < static_cast<type>(extent[0]); ++i2) {         \\"},
{"lineNum":"  795","line":"      TAGGED_LOOP_R_2(tag, func, type, m_offset, extent, 1, i2 + m_offset[0])  \\"},
{"lineNum":"  796","line":"    }                                                                          \\"},
{"lineNum":"  797","line":"  }"},
{"lineNum":"  798","line":""},
{"lineNum":"  799","line":"#define TAGGED_LOOP_LAYOUT_4(tag, func, type, is_left, m_offset, extent, rank) \\"},
{"lineNum":"  800","line":"  if (is_left) {                                                               \\"},
{"lineNum":"  801","line":"    for (type i3 = (type)0; i3 < static_cast<type>(extent[rank - 1]); ++i3) {  \\"},
{"lineNum":"  802","line":"      TAGGED_LOOP_L_3(tag, func, type, m_offset, extent, rank - 2,             \\"},
{"lineNum":"  803","line":"                      i3 + m_offset[rank - 1])                                 \\"},
{"lineNum":"  804","line":"    }                                                                          \\"},
{"lineNum":"  805","line":"  } else {                                                                     \\"},
{"lineNum":"  806","line":"    for (type i3 = (type)0; i3 < static_cast<type>(extent[0]); ++i3) {         \\"},
{"lineNum":"  807","line":"      TAGGED_LOOP_R_3(tag, func, type, m_offset, extent, 1, i3 + m_offset[0])  \\"},
{"lineNum":"  808","line":"    }                                                                          \\"},
{"lineNum":"  809","line":"  }"},
{"lineNum":"  810","line":""},
{"lineNum":"  811","line":"#define TAGGED_LOOP_LAYOUT_5(tag, func, type, is_left, m_offset, extent, rank) \\"},
{"lineNum":"  812","line":"  if (is_left) {                                                               \\"},
{"lineNum":"  813","line":"    for (type i4 = (type)0; i4 < static_cast<type>(extent[rank - 1]); ++i4) {  \\"},
{"lineNum":"  814","line":"      TAGGED_LOOP_L_4(tag, func, type, m_offset, extent, rank - 2,             \\"},
{"lineNum":"  815","line":"                      i4 + m_offset[rank - 1])                                 \\"},
{"lineNum":"  816","line":"    }                                                                          \\"},
{"lineNum":"  817","line":"  } else {                                                                     \\"},
{"lineNum":"  818","line":"    for (type i4 = (type)0; i4 < static_cast<type>(extent[0]); ++i4) {         \\"},
{"lineNum":"  819","line":"      TAGGED_LOOP_R_4(tag, func, type, m_offset, extent, 1, i4 + m_offset[0])  \\"},
{"lineNum":"  820","line":"    }                                                                          \\"},
{"lineNum":"  821","line":"  }"},
{"lineNum":"  822","line":""},
{"lineNum":"  823","line":"#define TAGGED_LOOP_LAYOUT_6(tag, func, type, is_left, m_offset, extent, rank) \\"},
{"lineNum":"  824","line":"  if (is_left) {                                                               \\"},
{"lineNum":"  825","line":"    for (type i5 = (type)0; i5 < static_cast<type>(extent[rank - 1]); ++i5) {  \\"},
{"lineNum":"  826","line":"      TAGGED_LOOP_L_5(tag, func, type, m_offset, extent, rank - 2,             \\"},
{"lineNum":"  827","line":"                      i5 + m_offset[rank - 1])                                 \\"},
{"lineNum":"  828","line":"    }                                                                          \\"},
{"lineNum":"  829","line":"  } else {                                                                     \\"},
{"lineNum":"  830","line":"    for (type i5 = (type)0; i5 < static_cast<type>(extent[0]); ++i5) {         \\"},
{"lineNum":"  831","line":"      TAGGED_LOOP_R_5(tag, func, type, m_offset, extent, 1, i5 + m_offset[0])  \\"},
{"lineNum":"  832","line":"    }                                                                          \\"},
{"lineNum":"  833","line":"  }"},
{"lineNum":"  834","line":""},
{"lineNum":"  835","line":"#define TAGGED_LOOP_LAYOUT_7(tag, func, type, is_left, m_offset, extent, rank) \\"},
{"lineNum":"  836","line":"  if (is_left) {                                                               \\"},
{"lineNum":"  837","line":"    for (type i6 = (type)0; i6 < static_cast<type>(extent[rank - 1]); ++i6) {  \\"},
{"lineNum":"  838","line":"      TAGGED_LOOP_L_6(tag, func, type, m_offset, extent, rank - 2,             \\"},
{"lineNum":"  839","line":"                      i6 + m_offset[rank - 1])                                 \\"},
{"lineNum":"  840","line":"    }                                                                          \\"},
{"lineNum":"  841","line":"  } else {                                                                     \\"},
{"lineNum":"  842","line":"    for (type i6 = (type)0; i6 < static_cast<type>(extent[0]); ++i6) {         \\"},
{"lineNum":"  843","line":"      TAGGED_LOOP_R_6(tag, func, type, m_offset, extent, 1, i6 + m_offset[0])  \\"},
{"lineNum":"  844","line":"    }                                                                          \\"},
{"lineNum":"  845","line":"  }"},
{"lineNum":"  846","line":""},
{"lineNum":"  847","line":"#define TAGGED_LOOP_LAYOUT_8(tag, func, type, is_left, m_offset, extent, rank) \\"},
{"lineNum":"  848","line":"  if (is_left) {                                                               \\"},
{"lineNum":"  849","line":"    for (type i7 = (type)0; i7 < static_cast<type>(extent[rank - 1]); ++i7) {  \\"},
{"lineNum":"  850","line":"      TAGGED_LOOP_L_7(tag, func, type, m_offset, extent, rank - 2,             \\"},
{"lineNum":"  851","line":"                      i7 + m_offset[rank - 1])                                 \\"},
{"lineNum":"  852","line":"    }                                                                          \\"},
{"lineNum":"  853","line":"  } else {                                                                     \\"},
{"lineNum":"  854","line":"    for (type i7 = (type)0; i7 < static_cast<type>(extent[0]); ++i7) {         \\"},
{"lineNum":"  855","line":"      TAGGED_LOOP_R_7(tag, func, type, m_offset, extent, 1, i7 + m_offset[0])  \\"},
{"lineNum":"  856","line":"    }                                                                          \\"},
{"lineNum":"  857","line":"  }"},
{"lineNum":"  858","line":""},
{"lineNum":"  859","line":"// Partial vs Full Tile"},
{"lineNum":"  860","line":"#define TAGGED_TILE_LOOP_1(tag, func, type, is_left, cond, m_offset,         \\"},
{"lineNum":"  861","line":"                           extent_full, extent_partial, rank)                \\"},
{"lineNum":"  862","line":"  if (cond) {                                                                \\"},
{"lineNum":"  863","line":"    TAGGED_LOOP_LAYOUT_1(tag, func, type, is_left, m_offset, extent_full,    \\"},
{"lineNum":"  864","line":"                         rank)                                               \\"},
{"lineNum":"  865","line":"  } else {                                                                   \\"},
{"lineNum":"  866","line":"    TAGGED_LOOP_LAYOUT_1(tag, func, type, is_left, m_offset, extent_partial, \\"},
{"lineNum":"  867","line":"                         rank)                                               \\"},
{"lineNum":"  868","line":"  }"},
{"lineNum":"  869","line":""},
{"lineNum":"  870","line":"#define TAGGED_TILE_LOOP_2(tag, func, type, is_left, cond, m_offset,         \\"},
{"lineNum":"  871","line":"                           extent_full, extent_partial, rank)                \\"},
{"lineNum":"  872","line":"  if (cond) {                                                                \\"},
{"lineNum":"  873","line":"    TAGGED_LOOP_LAYOUT_2(tag, func, type, is_left, m_offset, extent_full,    \\"},
{"lineNum":"  874","line":"                         rank)                                               \\"},
{"lineNum":"  875","line":"  } else {                                                                   \\"},
{"lineNum":"  876","line":"    TAGGED_LOOP_LAYOUT_2(tag, func, type, is_left, m_offset, extent_partial, \\"},
{"lineNum":"  877","line":"                         rank)                                               \\"},
{"lineNum":"  878","line":"  }"},
{"lineNum":"  879","line":""},
{"lineNum":"  880","line":"#define TAGGED_TILE_LOOP_3(tag, func, type, is_left, cond, m_offset,         \\"},
{"lineNum":"  881","line":"                           extent_full, extent_partial, rank)                \\"},
{"lineNum":"  882","line":"  if (cond) {                                                                \\"},
{"lineNum":"  883","line":"    TAGGED_LOOP_LAYOUT_3(tag, func, type, is_left, m_offset, extent_full,    \\"},
{"lineNum":"  884","line":"                         rank)                                               \\"},
{"lineNum":"  885","line":"  } else {                                                                   \\"},
{"lineNum":"  886","line":"    TAGGED_LOOP_LAYOUT_3(tag, func, type, is_left, m_offset, extent_partial, \\"},
{"lineNum":"  887","line":"                         rank)                                               \\"},
{"lineNum":"  888","line":"  }"},
{"lineNum":"  889","line":""},
{"lineNum":"  890","line":"#define TAGGED_TILE_LOOP_4(tag, func, type, is_left, cond, m_offset,         \\"},
{"lineNum":"  891","line":"                           extent_full, extent_partial, rank)                \\"},
{"lineNum":"  892","line":"  if (cond) {                                                                \\"},
{"lineNum":"  893","line":"    TAGGED_LOOP_LAYOUT_4(tag, func, type, is_left, m_offset, extent_full,    \\"},
{"lineNum":"  894","line":"                         rank)                                               \\"},
{"lineNum":"  895","line":"  } else {                                                                   \\"},
{"lineNum":"  896","line":"    TAGGED_LOOP_LAYOUT_4(tag, func, type, is_left, m_offset, extent_partial, \\"},
{"lineNum":"  897","line":"                         rank)                                               \\"},
{"lineNum":"  898","line":"  }"},
{"lineNum":"  899","line":""},
{"lineNum":"  900","line":"#define TAGGED_TILE_LOOP_5(tag, func, type, is_left, cond, m_offset,         \\"},
{"lineNum":"  901","line":"                           extent_full, extent_partial, rank)                \\"},
{"lineNum":"  902","line":"  if (cond) {                                                                \\"},
{"lineNum":"  903","line":"    TAGGED_LOOP_LAYOUT_5(tag, func, type, is_left, m_offset, extent_full,    \\"},
{"lineNum":"  904","line":"                         rank)                                               \\"},
{"lineNum":"  905","line":"  } else {                                                                   \\"},
{"lineNum":"  906","line":"    TAGGED_LOOP_LAYOUT_5(tag, func, type, is_left, m_offset, extent_partial, \\"},
{"lineNum":"  907","line":"                         rank)                                               \\"},
{"lineNum":"  908","line":"  }"},
{"lineNum":"  909","line":""},
{"lineNum":"  910","line":"#define TAGGED_TILE_LOOP_6(tag, func, type, is_left, cond, m_offset,         \\"},
{"lineNum":"  911","line":"                           extent_full, extent_partial, rank)                \\"},
{"lineNum":"  912","line":"  if (cond) {                                                                \\"},
{"lineNum":"  913","line":"    TAGGED_LOOP_LAYOUT_6(tag, func, type, is_left, m_offset, extent_full,    \\"},
{"lineNum":"  914","line":"                         rank)                                               \\"},
{"lineNum":"  915","line":"  } else {                                                                   \\"},
{"lineNum":"  916","line":"    TAGGED_LOOP_LAYOUT_6(tag, func, type, is_left, m_offset, extent_partial, \\"},
{"lineNum":"  917","line":"                         rank)                                               \\"},
{"lineNum":"  918","line":"  }"},
{"lineNum":"  919","line":""},
{"lineNum":"  920","line":"#define TAGGED_TILE_LOOP_7(tag, func, type, is_left, cond, m_offset,         \\"},
{"lineNum":"  921","line":"                           extent_full, extent_partial, rank)                \\"},
{"lineNum":"  922","line":"  if (cond) {                                                                \\"},
{"lineNum":"  923","line":"    TAGGED_LOOP_LAYOUT_7(tag, func, type, is_left, m_offset, extent_full,    \\"},
{"lineNum":"  924","line":"                         rank)                                               \\"},
{"lineNum":"  925","line":"  } else {                                                                   \\"},
{"lineNum":"  926","line":"    TAGGED_LOOP_LAYOUT_7(tag, func, type, is_left, m_offset, extent_partial, \\"},
{"lineNum":"  927","line":"                         rank)                                               \\"},
{"lineNum":"  928","line":"  }"},
{"lineNum":"  929","line":""},
{"lineNum":"  930","line":"#define TAGGED_TILE_LOOP_8(tag, func, type, is_left, cond, m_offset,         \\"},
{"lineNum":"  931","line":"                           extent_full, extent_partial, rank)                \\"},
{"lineNum":"  932","line":"  if (cond) {                                                                \\"},
{"lineNum":"  933","line":"    TAGGED_LOOP_LAYOUT_8(tag, func, type, is_left, m_offset, extent_full,    \\"},
{"lineNum":"  934","line":"                         rank)                                               \\"},
{"lineNum":"  935","line":"  } else {                                                                   \\"},
{"lineNum":"  936","line":"    TAGGED_LOOP_LAYOUT_8(tag, func, type, is_left, m_offset, extent_partial, \\"},
{"lineNum":"  937","line":"                         rank)                                               \\"},
{"lineNum":"  938","line":"  }"},
{"lineNum":"  939","line":""},
{"lineNum":"  940","line":"// parallel_reduce, tagged"},
{"lineNum":"  941","line":"// Reduction version"},
{"lineNum":"  942","line":"#define TAGGED_APPLY_REDUX(val, tag, func, ...) func(tag, __VA_ARGS__, val);"},
{"lineNum":"  943","line":""},
{"lineNum":"  944","line":"// LayoutRight"},
{"lineNum":"  945","line":"// d = 0 to start"},
{"lineNum":"  946","line":"#define TAGGED_LOOP_R_1_REDUX(val, tag, func, type, m_offset, extent, d, ...) \\"},
{"lineNum":"  947","line":"  KOKKOS_ENABLE_IVDEP_MDRANGE                                                 \\"},
{"lineNum":"  948","line":"  for (type i0 = (type)0; i0 < static_cast<type>(extent[d]); ++i0) {          \\"},
{"lineNum":"  949","line":"    TAGGED_APPLY_REDUX(val, tag, func, __VA_ARGS__, i0 + m_offset[d])         \\"},
{"lineNum":"  950","line":"  }"},
{"lineNum":"  951","line":""},
{"lineNum":"  952","line":"#define TAGGED_LOOP_R_2_REDUX(val, tag, func, type, m_offset, extent, d, ...) \\"},
{"lineNum":"  953","line":"  for (type i1 = (type)0; i1 < static_cast<type>(extent[d]); ++i1) {          \\"},
{"lineNum":"  954","line":"    TAGGED_LOOP_R_1_REDUX(val, tag, func, type, m_offset, extent, d + 1,      \\"},
{"lineNum":"  955","line":"                          __VA_ARGS__, i1 + m_offset[d])                      \\"},
{"lineNum":"  956","line":"  }"},
{"lineNum":"  957","line":""},
{"lineNum":"  958","line":"#define TAGGED_LOOP_R_3_REDUX(val, tag, func, type, m_offset, extent, d, ...) \\"},
{"lineNum":"  959","line":"  for (type i2 = (type)0; i2 < static_cast<type>(extent[d]); ++i2) {          \\"},
{"lineNum":"  960","line":"    TAGGED_LOOP_R_2_REDUX(val, tag, func, type, m_offset, extent, d + 1,      \\"},
{"lineNum":"  961","line":"                          __VA_ARGS__, i2 + m_offset[d])                      \\"},
{"lineNum":"  962","line":"  }"},
{"lineNum":"  963","line":""},
{"lineNum":"  964","line":"#define TAGGED_LOOP_R_4_REDUX(val, tag, func, type, m_offset, extent, d, ...) \\"},
{"lineNum":"  965","line":"  for (type i3 = (type)0; i3 < static_cast<type>(extent[d]); ++i3) {          \\"},
{"lineNum":"  966","line":"    TAGGED_LOOP_R_3_REDUX(val, tag, func, type, m_offset, extent, d + 1,      \\"},
{"lineNum":"  967","line":"                          __VA_ARGS__, i3 + m_offset[d])                      \\"},
{"lineNum":"  968","line":"  }"},
{"lineNum":"  969","line":""},
{"lineNum":"  970","line":"#define TAGGED_LOOP_R_5_REDUX(val, tag, func, type, m_offset, extent, d, ...) \\"},
{"lineNum":"  971","line":"  for (type i4 = (type)0; i4 < static_cast<type>(extent[d]); ++i4) {          \\"},
{"lineNum":"  972","line":"    TAGGED_LOOP_R_4_REDUX(val, tag, func, type, m_offset, extent, d + 1,      \\"},
{"lineNum":"  973","line":"                          __VA_ARGS__, i4 + m_offset[d])                      \\"},
{"lineNum":"  974","line":"  }"},
{"lineNum":"  975","line":""},
{"lineNum":"  976","line":"#define TAGGED_LOOP_R_6_REDUX(val, tag, func, type, m_offset, extent, d, ...) \\"},
{"lineNum":"  977","line":"  for (type i5 = (type)0; i5 < static_cast<type>(extent[d]); ++i5) {          \\"},
{"lineNum":"  978","line":"    TAGGED_LOOP_R_5_REDUX(val, tag, func, type, m_offset, extent, d + 1,      \\"},
{"lineNum":"  979","line":"                          __VA_ARGS__, i5 + m_offset[d])                      \\"},
{"lineNum":"  980","line":"  }"},
{"lineNum":"  981","line":""},
{"lineNum":"  982","line":"#define TAGGED_LOOP_R_7_REDUX(val, tag, func, type, m_offset, extent, d, ...) \\"},
{"lineNum":"  983","line":"  for (type i6 = (type)0; i6 < static_cast<type>(extent[d]); ++i6) {          \\"},
{"lineNum":"  984","line":"    TAGGED_LOOP_R_6_REDUX(val, tag, func, type, m_offset, extent, d + 1,      \\"},
{"lineNum":"  985","line":"                          __VA_ARGS__, i6 + m_offset[d])                      \\"},
{"lineNum":"  986","line":"  }"},
{"lineNum":"  987","line":""},
{"lineNum":"  988","line":"#define TAGGED_LOOP_R_8_REDUX(val, tag, func, type, m_offset, extent, d, ...) \\"},
{"lineNum":"  989","line":"  for (type i7 = (type)0; i7 < static_cast<type>(extent[d]); ++i7) {          \\"},
{"lineNum":"  990","line":"    TAGGED_LOOP_R_7_REDUX(val, tag, func, type, m_offset, extent, d + 1,      \\"},
{"lineNum":"  991","line":"                          __VA_ARGS__, i7 + m_offset[d])                      \\"},
{"lineNum":"  992","line":"  }"},
{"lineNum":"  993","line":""},
{"lineNum":"  994","line":"// LayoutLeft"},
{"lineNum":"  995","line":"// d = rank-1 to start"},
{"lineNum":"  996","line":"#define TAGGED_LOOP_L_1_REDUX(val, tag, func, type, m_offset, extent, d, ...) \\"},
{"lineNum":"  997","line":"  KOKKOS_ENABLE_IVDEP_MDRANGE                                                 \\"},
{"lineNum":"  998","line":"  for (type i0 = (type)0; i0 < static_cast<type>(extent[d]); ++i0) {          \\"},
{"lineNum":"  999","line":"    TAGGED_APPLY_REDUX(val, tag, func, i0 + m_offset[d], __VA_ARGS__)         \\"},
{"lineNum":" 1000","line":"  }"},
{"lineNum":" 1001","line":""},
{"lineNum":" 1002","line":"#define TAGGED_LOOP_L_2_REDUX(val, tag, func, type, m_offset, extent, d, ...) \\"},
{"lineNum":" 1003","line":"  for (type i1 = (type)0; i1 < static_cast<type>(extent[d]); ++i1) {          \\"},
{"lineNum":" 1004","line":"    TAGGED_LOOP_L_1_REDUX(val, tag, func, type, m_offset, extent, d - 1,      \\"},
{"lineNum":" 1005","line":"                          i1 + m_offset[d], __VA_ARGS__)                      \\"},
{"lineNum":" 1006","line":"  }"},
{"lineNum":" 1007","line":""},
{"lineNum":" 1008","line":"#define TAGGED_LOOP_L_3_REDUX(val, tag, func, type, m_offset, extent, d, ...) \\"},
{"lineNum":" 1009","line":"  for (type i2 = (type)0; i2 < static_cast<type>(extent[d]); ++i2) {          \\"},
{"lineNum":" 1010","line":"    TAGGED_LOOP_L_2_REDUX(val, tag, func, type, m_offset, extent, d - 1,      \\"},
{"lineNum":" 1011","line":"                          i2 + m_offset[d], __VA_ARGS__)                      \\"},
{"lineNum":" 1012","line":"  }"},
{"lineNum":" 1013","line":""},
{"lineNum":" 1014","line":"#define TAGGED_LOOP_L_4_REDUX(val, tag, func, type, m_offset, extent, d, ...) \\"},
{"lineNum":" 1015","line":"  for (type i3 = (type)0; i3 < static_cast<type>(extent[d]); ++i3) {          \\"},
{"lineNum":" 1016","line":"    TAGGED_LOOP_L_3_REDUX(val, tag, func, type, m_offset, extent, d - 1,      \\"},
{"lineNum":" 1017","line":"                          i3 + m_offset[d], __VA_ARGS__)                      \\"},
{"lineNum":" 1018","line":"  }"},
{"lineNum":" 1019","line":""},
{"lineNum":" 1020","line":"#define TAGGED_LOOP_L_5_REDUX(val, tag, func, type, m_offset, extent, d, ...) \\"},
{"lineNum":" 1021","line":"  for (type i4 = (type)0; i4 < static_cast<type>(extent[d]); ++i4) {          \\"},
{"lineNum":" 1022","line":"    TAGGED_LOOP_L_4_REDUX(val, tag, func, type, m_offset, extent, d - 1,      \\"},
{"lineNum":" 1023","line":"                          i4 + m_offset[d], __VA_ARGS__)                      \\"},
{"lineNum":" 1024","line":"  }"},
{"lineNum":" 1025","line":""},
{"lineNum":" 1026","line":"#define TAGGED_LOOP_L_6_REDUX(val, tag, func, type, m_offset, extent, d, ...) \\"},
{"lineNum":" 1027","line":"  for (type i5 = (type)0; i5 < static_cast<type>(extent[d]); ++i5) {          \\"},
{"lineNum":" 1028","line":"    TAGGED_LOOP_L_5_REDUX(val, tag, func, type, m_offset, extent, d - 1,      \\"},
{"lineNum":" 1029","line":"                          i5 + m_offset[d], __VA_ARGS__)                      \\"},
{"lineNum":" 1030","line":"  }"},
{"lineNum":" 1031","line":""},
{"lineNum":" 1032","line":"#define TAGGED_LOOP_L_7_REDUX(val, tag, func, type, m_offset, extent, d, ...) \\"},
{"lineNum":" 1033","line":"  for (type i6 = (type)0; i6 < static_cast<type>(extent[d]); ++i6) {          \\"},
{"lineNum":" 1034","line":"    TAGGED_LOOP_L_6_REDUX(val, tag, func, type, m_offset, extent, d - 1,      \\"},
{"lineNum":" 1035","line":"                          i6 + m_offset[d], __VA_ARGS__)                      \\"},
{"lineNum":" 1036","line":"  }"},
{"lineNum":" 1037","line":""},
{"lineNum":" 1038","line":"#define TAGGED_LOOP_L_8_REDUX(val, tag, func, type, m_offset, extent, d, ...) \\"},
{"lineNum":" 1039","line":"  for (type i7 = (type)0; i7 < static_cast<type>(extent[d]); ++i7) {          \\"},
{"lineNum":" 1040","line":"    TAGGED_LOOP_L_7_REDUX(val, tag, func, type, m_offset, extent, d - 1,      \\"},
{"lineNum":" 1041","line":"                          i7 + m_offset[d], __VA_ARGS__)                      \\"},
{"lineNum":" 1042","line":"  }"},
{"lineNum":" 1043","line":""},
{"lineNum":" 1044","line":"// Left vs Right"},
{"lineNum":" 1045","line":"#define TAGGED_LOOP_LAYOUT_1_REDUX(val, tag, func, type, is_left, m_offset, \\"},
{"lineNum":" 1046","line":"                                   extent, rank)                            \\"},
{"lineNum":" 1047","line":"  KOKKOS_ENABLE_IVDEP_MDRANGE                                               \\"},
{"lineNum":" 1048","line":"  for (type i0 = (type)0; i0 < static_cast<type>(extent[0]); ++i0) {        \\"},
{"lineNum":" 1049","line":"    TAGGED_APPLY_REDUX(val, tag, func, i0 + m_offset[0])                    \\"},
{"lineNum":" 1050","line":"  }"},
{"lineNum":" 1051","line":""},
{"lineNum":" 1052","line":"#define TAGGED_LOOP_LAYOUT_2_REDUX(val, tag, func, type, is_left, m_offset,   \\"},
{"lineNum":" 1053","line":"                                   extent, rank)                              \\"},
{"lineNum":" 1054","line":"  if (is_left) {                                                              \\"},
{"lineNum":" 1055","line":"    for (type i1 = (type)0; i1 < static_cast<type>(extent[rank - 1]); ++i1) { \\"},
{"lineNum":" 1056","line":"      TAGGED_LOOP_L_1_REDUX(val, tag, func, type, m_offset, extent, rank - 2, \\"},
{"lineNum":" 1057","line":"                            i1 + m_offset[rank - 1])                          \\"},
{"lineNum":" 1058","line":"    }                                                                         \\"},
{"lineNum":" 1059","line":"  } else {                                                                    \\"},
{"lineNum":" 1060","line":"    for (type i1 = (type)0; i1 < static_cast<type>(extent[0]); ++i1) {        \\"},
{"lineNum":" 1061","line":"      TAGGED_LOOP_R_1_REDUX(val, tag, func, type, m_offset, extent, 1,        \\"},
{"lineNum":" 1062","line":"                            i1 + m_offset[0])                                 \\"},
{"lineNum":" 1063","line":"    }                                                                         \\"},
{"lineNum":" 1064","line":"  }"},
{"lineNum":" 1065","line":""},
{"lineNum":" 1066","line":"#define TAGGED_LOOP_LAYOUT_3_REDUX(val, tag, func, type, is_left, m_offset,   \\"},
{"lineNum":" 1067","line":"                                   extent, rank)                              \\"},
{"lineNum":" 1068","line":"  if (is_left) {                                                              \\"},
{"lineNum":" 1069","line":"    for (type i2 = (type)0; i2 < static_cast<type>(extent[rank - 1]); ++i2) { \\"},
{"lineNum":" 1070","line":"      TAGGED_LOOP_L_2_REDUX(val, tag, func, type, m_offset, extent, rank - 2, \\"},
{"lineNum":" 1071","line":"                            i2 + m_offset[rank - 1])                          \\"},
{"lineNum":" 1072","line":"    }                                                                         \\"},
{"lineNum":" 1073","line":"  } else {                                                                    \\"},
{"lineNum":" 1074","line":"    for (type i2 = (type)0; i2 < static_cast<type>(extent[0]); ++i2) {        \\"},
{"lineNum":" 1075","line":"      TAGGED_LOOP_R_2_REDUX(val, tag, func, type, m_offset, extent, 1,        \\"},
{"lineNum":" 1076","line":"                            i2 + m_offset[0])                                 \\"},
{"lineNum":" 1077","line":"    }                                                                         \\"},
{"lineNum":" 1078","line":"  }"},
{"lineNum":" 1079","line":""},
{"lineNum":" 1080","line":"#define TAGGED_LOOP_LAYOUT_4_REDUX(val, tag, func, type, is_left, m_offset,   \\"},
{"lineNum":" 1081","line":"                                   extent, rank)                              \\"},
{"lineNum":" 1082","line":"  if (is_left) {                                                              \\"},
{"lineNum":" 1083","line":"    for (type i3 = (type)0; i3 < static_cast<type>(extent[rank - 1]); ++i3) { \\"},
{"lineNum":" 1084","line":"      TAGGED_LOOP_L_3_REDUX(val, tag, func, type, m_offset, extent, rank - 2, \\"},
{"lineNum":" 1085","line":"                            i3 + m_offset[rank - 1])                          \\"},
{"lineNum":" 1086","line":"    }                                                                         \\"},
{"lineNum":" 1087","line":"  } else {                                                                    \\"},
{"lineNum":" 1088","line":"    for (type i3 = (type)0; i3 < static_cast<type>(extent[0]); ++i3) {        \\"},
{"lineNum":" 1089","line":"      TAGGED_LOOP_R_3_REDUX(val, tag, func, type, m_offset, extent, 1,        \\"},
{"lineNum":" 1090","line":"                            i3 + m_offset[0])                                 \\"},
{"lineNum":" 1091","line":"    }                                                                         \\"},
{"lineNum":" 1092","line":"  }"},
{"lineNum":" 1093","line":""},
{"lineNum":" 1094","line":"#define TAGGED_LOOP_LAYOUT_5_REDUX(val, tag, func, type, is_left, m_offset,   \\"},
{"lineNum":" 1095","line":"                                   extent, rank)                              \\"},
{"lineNum":" 1096","line":"  if (is_left) {                                                              \\"},
{"lineNum":" 1097","line":"    for (type i4 = (type)0; i4 < static_cast<type>(extent[rank - 1]); ++i4) { \\"},
{"lineNum":" 1098","line":"      TAGGED_LOOP_L_4_REDUX(val, tag, func, type, m_offset, extent, rank - 2, \\"},
{"lineNum":" 1099","line":"                            i4 + m_offset[rank - 1])                          \\"},
{"lineNum":" 1100","line":"    }                                                                         \\"},
{"lineNum":" 1101","line":"  } else {                                                                    \\"},
{"lineNum":" 1102","line":"    for (type i4 = (type)0; i4 < static_cast<type>(extent[0]); ++i4) {        \\"},
{"lineNum":" 1103","line":"      TAGGED_LOOP_R_4_REDUX(val, tag, func, type, m_offset, extent, 1,        \\"},
{"lineNum":" 1104","line":"                            i4 + m_offset[0])                                 \\"},
{"lineNum":" 1105","line":"    }                                                                         \\"},
{"lineNum":" 1106","line":"  }"},
{"lineNum":" 1107","line":""},
{"lineNum":" 1108","line":"#define TAGGED_LOOP_LAYOUT_6_REDUX(val, tag, func, type, is_left, m_offset,   \\"},
{"lineNum":" 1109","line":"                                   extent, rank)                              \\"},
{"lineNum":" 1110","line":"  if (is_left) {                                                              \\"},
{"lineNum":" 1111","line":"    for (type i5 = (type)0; i5 < static_cast<type>(extent[rank - 1]); ++i5) { \\"},
{"lineNum":" 1112","line":"      TAGGED_LOOP_L_5_REDUX(val, tag, func, type, m_offset, extent, rank - 2, \\"},
{"lineNum":" 1113","line":"                            i5 + m_offset[rank - 1])                          \\"},
{"lineNum":" 1114","line":"    }                                                                         \\"},
{"lineNum":" 1115","line":"  } else {                                                                    \\"},
{"lineNum":" 1116","line":"    for (type i5 = (type)0; i5 < static_cast<type>(extent[0]); ++i5) {        \\"},
{"lineNum":" 1117","line":"      TAGGED_LOOP_R_5_REDUX(val, tag, func, type, m_offset, extent, 1,        \\"},
{"lineNum":" 1118","line":"                            i5 + m_offset[0])                                 \\"},
{"lineNum":" 1119","line":"    }                                                                         \\"},
{"lineNum":" 1120","line":"  }"},
{"lineNum":" 1121","line":""},
{"lineNum":" 1122","line":"#define TAGGED_LOOP_LAYOUT_7_REDUX(val, tag, func, type, is_left, m_offset,   \\"},
{"lineNum":" 1123","line":"                                   extent, rank)                              \\"},
{"lineNum":" 1124","line":"  if (is_left) {                                                              \\"},
{"lineNum":" 1125","line":"    for (type i6 = (type)0; i6 < static_cast<type>(extent[rank - 1]); ++i6) { \\"},
{"lineNum":" 1126","line":"      TAGGED_LOOP_L_6_REDUX(val, tag, func, type, m_offset, extent, rank - 2, \\"},
{"lineNum":" 1127","line":"                            i6 + m_offset[rank - 1])                          \\"},
{"lineNum":" 1128","line":"    }                                                                         \\"},
{"lineNum":" 1129","line":"  } else {                                                                    \\"},
{"lineNum":" 1130","line":"    for (type i6 = (type)0; i6 < static_cast<type>(extent[0]); ++i6) {        \\"},
{"lineNum":" 1131","line":"      TAGGED_LOOP_R_6_REDUX(val, tag, func, type, m_offset, extent, 1,        \\"},
{"lineNum":" 1132","line":"                            i6 + m_offset[0])                                 \\"},
{"lineNum":" 1133","line":"    }                                                                         \\"},
{"lineNum":" 1134","line":"  }"},
{"lineNum":" 1135","line":""},
{"lineNum":" 1136","line":"#define TAGGED_LOOP_LAYOUT_8_REDUX(val, tag, func, type, is_left, m_offset,   \\"},
{"lineNum":" 1137","line":"                                   extent, rank)                              \\"},
{"lineNum":" 1138","line":"  if (is_left) {                                                              \\"},
{"lineNum":" 1139","line":"    for (type i7 = (type)0; i7 < static_cast<type>(extent[rank - 1]); ++i7) { \\"},
{"lineNum":" 1140","line":"      TAGGED_LOOP_L_7_REDUX(val, tag, func, type, m_offset, extent, rank - 2, \\"},
{"lineNum":" 1141","line":"                            i7 + m_offset[rank - 1])                          \\"},
{"lineNum":" 1142","line":"    }                                                                         \\"},
{"lineNum":" 1143","line":"  } else {                                                                    \\"},
{"lineNum":" 1144","line":"    for (type i7 = (type)0; i7 < static_cast<type>(extent[0]); ++i7) {        \\"},
{"lineNum":" 1145","line":"      TAGGED_LOOP_R_7_REDUX(val, tag, func, type, m_offset, extent, 1,        \\"},
{"lineNum":" 1146","line":"                            i7 + m_offset[0])                                 \\"},
{"lineNum":" 1147","line":"    }                                                                         \\"},
{"lineNum":" 1148","line":"  }"},
{"lineNum":" 1149","line":""},
{"lineNum":" 1150","line":"// Partial vs Full Tile"},
{"lineNum":" 1151","line":"#define TAGGED_TILE_LOOP_1_REDUX(val, tag, func, type, is_left, cond,         \\"},
{"lineNum":" 1152","line":"                                 m_offset, extent_full, extent_partial, rank) \\"},
{"lineNum":" 1153","line":"  if (cond) {                                                                 \\"},
{"lineNum":" 1154","line":"    TAGGED_LOOP_LAYOUT_1_REDUX(val, tag, func, type, is_left, m_offset,       \\"},
{"lineNum":" 1155","line":"                               extent_full, rank)                             \\"},
{"lineNum":" 1156","line":"  } else {                                                                    \\"},
{"lineNum":" 1157","line":"    TAGGED_LOOP_LAYOUT_1_REDUX(val, tag, func, type, is_left, m_offset,       \\"},
{"lineNum":" 1158","line":"                               extent_partial, rank)                          \\"},
{"lineNum":" 1159","line":"  }"},
{"lineNum":" 1160","line":""},
{"lineNum":" 1161","line":"#define TAGGED_TILE_LOOP_2_REDUX(val, tag, func, type, is_left, cond,         \\"},
{"lineNum":" 1162","line":"                                 m_offset, extent_full, extent_partial, rank) \\"},
{"lineNum":" 1163","line":"  if (cond) {                                                                 \\"},
{"lineNum":" 1164","line":"    TAGGED_LOOP_LAYOUT_2_REDUX(val, tag, func, type, is_left, m_offset,       \\"},
{"lineNum":" 1165","line":"                               extent_full, rank)                             \\"},
{"lineNum":" 1166","line":"  } else {                                                                    \\"},
{"lineNum":" 1167","line":"    TAGGED_LOOP_LAYOUT_2_REDUX(val, tag, func, type, is_left, m_offset,       \\"},
{"lineNum":" 1168","line":"                               extent_partial, rank)                          \\"},
{"lineNum":" 1169","line":"  }"},
{"lineNum":" 1170","line":""},
{"lineNum":" 1171","line":"#define TAGGED_TILE_LOOP_3_REDUX(val, tag, func, type, is_left, cond,         \\"},
{"lineNum":" 1172","line":"                                 m_offset, extent_full, extent_partial, rank) \\"},
{"lineNum":" 1173","line":"  if (cond) {                                                                 \\"},
{"lineNum":" 1174","line":"    TAGGED_LOOP_LAYOUT_3_REDUX(val, tag, func, type, is_left, m_offset,       \\"},
{"lineNum":" 1175","line":"                               extent_full, rank)                             \\"},
{"lineNum":" 1176","line":"  } else {                                                                    \\"},
{"lineNum":" 1177","line":"    TAGGED_LOOP_LAYOUT_3_REDUX(val, tag, func, type, is_left, m_offset,       \\"},
{"lineNum":" 1178","line":"                               extent_partial, rank)                          \\"},
{"lineNum":" 1179","line":"  }"},
{"lineNum":" 1180","line":""},
{"lineNum":" 1181","line":"#define TAGGED_TILE_LOOP_4_REDUX(val, tag, func, type, is_left, cond,         \\"},
{"lineNum":" 1182","line":"                                 m_offset, extent_full, extent_partial, rank) \\"},
{"lineNum":" 1183","line":"  if (cond) {                                                                 \\"},
{"lineNum":" 1184","line":"    TAGGED_LOOP_LAYOUT_4_REDUX(val, tag, func, type, is_left, m_offset,       \\"},
{"lineNum":" 1185","line":"                               extent_full, rank)                             \\"},
{"lineNum":" 1186","line":"  } else {                                                                    \\"},
{"lineNum":" 1187","line":"    TAGGED_LOOP_LAYOUT_4_REDUX(val, tag, func, type, is_left, m_offset,       \\"},
{"lineNum":" 1188","line":"                               extent_partial, rank)                          \\"},
{"lineNum":" 1189","line":"  }"},
{"lineNum":" 1190","line":""},
{"lineNum":" 1191","line":"#define TAGGED_TILE_LOOP_5_REDUX(val, tag, func, type, is_left, cond,         \\"},
{"lineNum":" 1192","line":"                                 m_offset, extent_full, extent_partial, rank) \\"},
{"lineNum":" 1193","line":"  if (cond) {                                                                 \\"},
{"lineNum":" 1194","line":"    TAGGED_LOOP_LAYOUT_5_REDUX(val, tag, func, type, is_left, m_offset,       \\"},
{"lineNum":" 1195","line":"                               extent_full, rank)                             \\"},
{"lineNum":" 1196","line":"  } else {                                                                    \\"},
{"lineNum":" 1197","line":"    TAGGED_LOOP_LAYOUT_5_REDUX(val, tag, func, type, is_left, m_offset,       \\"},
{"lineNum":" 1198","line":"                               extent_partial, rank)                          \\"},
{"lineNum":" 1199","line":"  }"},
{"lineNum":" 1200","line":""},
{"lineNum":" 1201","line":"#define TAGGED_TILE_LOOP_6_REDUX(val, tag, func, type, is_left, cond,         \\"},
{"lineNum":" 1202","line":"                                 m_offset, extent_full, extent_partial, rank) \\"},
{"lineNum":" 1203","line":"  if (cond) {                                                                 \\"},
{"lineNum":" 1204","line":"    TAGGED_LOOP_LAYOUT_6_REDUX(val, tag, func, type, is_left, m_offset,       \\"},
{"lineNum":" 1205","line":"                               extent_full, rank)                             \\"},
{"lineNum":" 1206","line":"  } else {                                                                    \\"},
{"lineNum":" 1207","line":"    TAGGED_LOOP_LAYOUT_6_REDUX(val, tag, func, type, is_left, m_offset,       \\"},
{"lineNum":" 1208","line":"                               extent_partial, rank)                          \\"},
{"lineNum":" 1209","line":"  }"},
{"lineNum":" 1210","line":""},
{"lineNum":" 1211","line":"#define TAGGED_TILE_LOOP_7_REDUX(val, tag, func, type, is_left, cond,         \\"},
{"lineNum":" 1212","line":"                                 m_offset, extent_full, extent_partial, rank) \\"},
{"lineNum":" 1213","line":"  if (cond) {                                                                 \\"},
{"lineNum":" 1214","line":"    TAGGED_LOOP_LAYOUT_7_REDUX(val, tag, func, type, is_left, m_offset,       \\"},
{"lineNum":" 1215","line":"                               extent_full, rank)                             \\"},
{"lineNum":" 1216","line":"  } else {                                                                    \\"},
{"lineNum":" 1217","line":"    TAGGED_LOOP_LAYOUT_7_REDUX(val, tag, func, type, is_left, m_offset,       \\"},
{"lineNum":" 1218","line":"                               extent_partial, rank)                          \\"},
{"lineNum":" 1219","line":"  }"},
{"lineNum":" 1220","line":""},
{"lineNum":" 1221","line":"#define TAGGED_TILE_LOOP_8_REDUX(val, tag, func, type, is_left, cond,         \\"},
{"lineNum":" 1222","line":"                                 m_offset, extent_full, extent_partial, rank) \\"},
{"lineNum":" 1223","line":"  if (cond) {                                                                 \\"},
{"lineNum":" 1224","line":"    TAGGED_LOOP_LAYOUT_8_REDUX(val, tag, func, type, is_left, m_offset,       \\"},
{"lineNum":" 1225","line":"                               extent_full, rank)                             \\"},
{"lineNum":" 1226","line":"  } else {                                                                    \\"},
{"lineNum":" 1227","line":"    TAGGED_LOOP_LAYOUT_8_REDUX(val, tag, func, type, is_left, m_offset,       \\"},
{"lineNum":" 1228","line":"                               extent_partial, rank)                          \\"},
{"lineNum":" 1229","line":"  }"},
{"lineNum":" 1230","line":""},
{"lineNum":" 1231","line":"// end tagged macros"},
{"lineNum":" 1232","line":""},
{"lineNum":" 1233","line":"// Structs for calling loops"},
{"lineNum":" 1234","line":"template <int Rank, bool IsLeft, typename IType, typename Tagged,"},
{"lineNum":" 1235","line":"          typename Enable = void>"},
{"lineNum":" 1236","line":"struct Tile_Loop_Type;"},
{"lineNum":" 1237","line":""},
{"lineNum":" 1238","line":"template <bool IsLeft, typename IType>"},
{"lineNum":" 1239","line":"struct Tile_Loop_Type<1, IsLeft, IType, void, void> {"},
{"lineNum":" 1240","line":"  template <typename Func, typename Offset, typename ExtentA, typename ExtentB>"},
{"lineNum":" 1241","line":"  static void apply(Func const& func, bool cond, Offset const& offset,"},
{"lineNum":" 1242","line":"                    ExtentA const& a, ExtentB const& b) {"},
{"lineNum":" 1243","line":"    TILE_LOOP_1(func, IType, IsLeft, cond, offset, a, b, 1);"},
{"lineNum":" 1244","line":"  }"},
{"lineNum":" 1245","line":""},
{"lineNum":" 1246","line":"  template <typename ValType, typename Func, typename Offset, typename ExtentA,"},
{"lineNum":" 1247","line":"            typename ExtentB>"},
{"lineNum":" 1248","line":"  static void apply(ValType& value, Func const& func, bool cond,"},
{"lineNum":" 1249","line":"                    Offset const& offset, ExtentA const& a, ExtentB const& b) {"},
{"lineNum":" 1250","line":"    TILE_LOOP_1_REDUX(value, func, IType, IsLeft, cond, offset, a, b, 1);"},
{"lineNum":" 1251","line":"  }"},
{"lineNum":" 1252","line":"};"},
{"lineNum":" 1253","line":""},
{"lineNum":" 1254","line":"template <bool IsLeft, typename IType>"},
{"lineNum":" 1255","line":"struct Tile_Loop_Type<2, IsLeft, IType, void, void> {"},
{"lineNum":" 1256","line":"  template <typename Func, typename Offset, typename ExtentA, typename ExtentB>"},
{"lineNum":" 1257","line":"  static void apply(Func const& func, bool cond, Offset const& offset,"},
{"lineNum":" 1258","line":"                    ExtentA const& a, ExtentB const& b) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1259","line":"    TILE_LOOP_2(func, IType, IsLeft, cond, offset, a, b, 2);","class":"lineNoCov","hits":"0","possible_hits":"109",},
{"lineNum":" 1260","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1261","line":""},
{"lineNum":" 1262","line":"  template <typename ValType, typename Func, typename Offset, typename ExtentA,"},
{"lineNum":" 1263","line":"            typename ExtentB>"},
{"lineNum":" 1264","line":"  static void apply(ValType& value, Func const& func, bool cond,"},
{"lineNum":" 1265","line":"                    Offset const& offset, ExtentA const& a, ExtentB const& b) {"},
{"lineNum":" 1266","line":"    TILE_LOOP_2_REDUX(value, func, IType, IsLeft, cond, offset, a, b, 2);"},
{"lineNum":" 1267","line":"  }"},
{"lineNum":" 1268","line":"};"},
{"lineNum":" 1269","line":""},
{"lineNum":" 1270","line":"template <bool IsLeft, typename IType>"},
{"lineNum":" 1271","line":"struct Tile_Loop_Type<3, IsLeft, IType, void, void> {"},
{"lineNum":" 1272","line":"  template <typename Func, typename Offset, typename ExtentA, typename ExtentB>"},
{"lineNum":" 1273","line":"  static void apply(Func const& func, bool cond, Offset const& offset,"},
{"lineNum":" 1274","line":"                    ExtentA const& a, ExtentB const& b) {"},
{"lineNum":" 1275","line":"    TILE_LOOP_3(func, IType, IsLeft, cond, offset, a, b, 3);"},
{"lineNum":" 1276","line":"  }"},
{"lineNum":" 1277","line":""},
{"lineNum":" 1278","line":"  template <typename ValType, typename Func, typename Offset, typename ExtentA,"},
{"lineNum":" 1279","line":"            typename ExtentB>"},
{"lineNum":" 1280","line":"  static void apply(ValType& value, Func const& func, bool cond,"},
{"lineNum":" 1281","line":"                    Offset const& offset, ExtentA const& a, ExtentB const& b) {"},
{"lineNum":" 1282","line":"    TILE_LOOP_3_REDUX(value, func, IType, IsLeft, cond, offset, a, b, 3);"},
{"lineNum":" 1283","line":"  }"},
{"lineNum":" 1284","line":"};"},
{"lineNum":" 1285","line":""},
{"lineNum":" 1286","line":"template <bool IsLeft, typename IType>"},
{"lineNum":" 1287","line":"struct Tile_Loop_Type<4, IsLeft, IType, void, void> {"},
{"lineNum":" 1288","line":"  template <typename Func, typename Offset, typename ExtentA, typename ExtentB>"},
{"lineNum":" 1289","line":"  static void apply(Func const& func, bool cond, Offset const& offset,"},
{"lineNum":" 1290","line":"                    ExtentA const& a, ExtentB const& b) {"},
{"lineNum":" 1291","line":"    TILE_LOOP_4(func, IType, IsLeft, cond, offset, a, b, 4);"},
{"lineNum":" 1292","line":"  }"},
{"lineNum":" 1293","line":""},
{"lineNum":" 1294","line":"  template <typename ValType, typename Func, typename Offset, typename ExtentA,"},
{"lineNum":" 1295","line":"            typename ExtentB>"},
{"lineNum":" 1296","line":"  static void apply(ValType& value, Func const& func, bool cond,"},
{"lineNum":" 1297","line":"                    Offset const& offset, ExtentA const& a, ExtentB const& b) {"},
{"lineNum":" 1298","line":"    TILE_LOOP_4_REDUX(value, func, IType, IsLeft, cond, offset, a, b, 4);"},
{"lineNum":" 1299","line":"  }"},
{"lineNum":" 1300","line":"};"},
{"lineNum":" 1301","line":""},
{"lineNum":" 1302","line":"template <bool IsLeft, typename IType>"},
{"lineNum":" 1303","line":"struct Tile_Loop_Type<5, IsLeft, IType, void, void> {"},
{"lineNum":" 1304","line":"  template <typename Func, typename Offset, typename ExtentA, typename ExtentB>"},
{"lineNum":" 1305","line":"  static void apply(Func const& func, bool cond, Offset const& offset,"},
{"lineNum":" 1306","line":"                    ExtentA const& a, ExtentB const& b) {"},
{"lineNum":" 1307","line":"    TILE_LOOP_5(func, IType, IsLeft, cond, offset, a, b, 5);"},
{"lineNum":" 1308","line":"  }"},
{"lineNum":" 1309","line":""},
{"lineNum":" 1310","line":"  template <typename ValType, typename Func, typename Offset, typename ExtentA,"},
{"lineNum":" 1311","line":"            typename ExtentB>"},
{"lineNum":" 1312","line":"  static void apply(ValType& value, Func const& func, bool cond,"},
{"lineNum":" 1313","line":"                    Offset const& offset, ExtentA const& a, ExtentB const& b) {"},
{"lineNum":" 1314","line":"    TILE_LOOP_5_REDUX(value, func, IType, IsLeft, cond, offset, a, b, 5);"},
{"lineNum":" 1315","line":"  }"},
{"lineNum":" 1316","line":"};"},
{"lineNum":" 1317","line":""},
{"lineNum":" 1318","line":"template <bool IsLeft, typename IType>"},
{"lineNum":" 1319","line":"struct Tile_Loop_Type<6, IsLeft, IType, void, void> {"},
{"lineNum":" 1320","line":"  template <typename Func, typename Offset, typename ExtentA, typename ExtentB>"},
{"lineNum":" 1321","line":"  static void apply(Func const& func, bool cond, Offset const& offset,"},
{"lineNum":" 1322","line":"                    ExtentA const& a, ExtentB const& b) {"},
{"lineNum":" 1323","line":"    TILE_LOOP_6(func, IType, IsLeft, cond, offset, a, b, 6);"},
{"lineNum":" 1324","line":"  }"},
{"lineNum":" 1325","line":""},
{"lineNum":" 1326","line":"  template <typename ValType, typename Func, typename Offset, typename ExtentA,"},
{"lineNum":" 1327","line":"            typename ExtentB>"},
{"lineNum":" 1328","line":"  static void apply(ValType& value, Func const& func, bool cond,"},
{"lineNum":" 1329","line":"                    Offset const& offset, ExtentA const& a, ExtentB const& b) {"},
{"lineNum":" 1330","line":"    TILE_LOOP_6_REDUX(value, func, IType, IsLeft, cond, offset, a, b, 6);"},
{"lineNum":" 1331","line":"  }"},
{"lineNum":" 1332","line":"};"},
{"lineNum":" 1333","line":""},
{"lineNum":" 1334","line":"template <bool IsLeft, typename IType>"},
{"lineNum":" 1335","line":"struct Tile_Loop_Type<7, IsLeft, IType, void, void> {"},
{"lineNum":" 1336","line":"  template <typename Func, typename Offset, typename ExtentA, typename ExtentB>"},
{"lineNum":" 1337","line":"  static void apply(Func const& func, bool cond, Offset const& offset,"},
{"lineNum":" 1338","line":"                    ExtentA const& a, ExtentB const& b) {"},
{"lineNum":" 1339","line":"    TILE_LOOP_7(func, IType, IsLeft, cond, offset, a, b, 7);"},
{"lineNum":" 1340","line":"  }"},
{"lineNum":" 1341","line":""},
{"lineNum":" 1342","line":"  template <typename ValType, typename Func, typename Offset, typename ExtentA,"},
{"lineNum":" 1343","line":"            typename ExtentB>"},
{"lineNum":" 1344","line":"  static void apply(ValType& value, Func const& func, bool cond,"},
{"lineNum":" 1345","line":"                    Offset const& offset, ExtentA const& a, ExtentB const& b) {"},
{"lineNum":" 1346","line":"    TILE_LOOP_7_REDUX(value, func, IType, IsLeft, cond, offset, a, b, 7);"},
{"lineNum":" 1347","line":"  }"},
{"lineNum":" 1348","line":"};"},
{"lineNum":" 1349","line":""},
{"lineNum":" 1350","line":"template <bool IsLeft, typename IType>"},
{"lineNum":" 1351","line":"struct Tile_Loop_Type<8, IsLeft, IType, void, void> {"},
{"lineNum":" 1352","line":"  template <typename Func, typename Offset, typename ExtentA, typename ExtentB>"},
{"lineNum":" 1353","line":"  static void apply(Func const& func, bool cond, Offset const& offset,"},
{"lineNum":" 1354","line":"                    ExtentA const& a, ExtentB const& b) {"},
{"lineNum":" 1355","line":"    TILE_LOOP_8(func, IType, IsLeft, cond, offset, a, b, 8);"},
{"lineNum":" 1356","line":"  }"},
{"lineNum":" 1357","line":""},
{"lineNum":" 1358","line":"  template <typename ValType, typename Func, typename Offset, typename ExtentA,"},
{"lineNum":" 1359","line":"            typename ExtentB>"},
{"lineNum":" 1360","line":"  static void apply(ValType& value, Func const& func, bool cond,"},
{"lineNum":" 1361","line":"                    Offset const& offset, ExtentA const& a, ExtentB const& b) {"},
{"lineNum":" 1362","line":"    TILE_LOOP_8_REDUX(value, func, IType, IsLeft, cond, offset, a, b, 8);"},
{"lineNum":" 1363","line":"  }"},
{"lineNum":" 1364","line":"};"},
{"lineNum":" 1365","line":""},
{"lineNum":" 1366","line":"// tagged versions"},
{"lineNum":" 1367","line":""},
{"lineNum":" 1368","line":"template <bool IsLeft, typename IType, typename Tagged>"},
{"lineNum":" 1369","line":"struct Tile_Loop_Type<"},
{"lineNum":" 1370","line":"    1, IsLeft, IType, Tagged,"},
{"lineNum":" 1371","line":"    typename std::enable_if<!std::is_same<Tagged, void>::value>::type> {"},
{"lineNum":" 1372","line":"  template <typename Func, typename Offset, typename ExtentA, typename ExtentB>"},
{"lineNum":" 1373","line":"  static void apply(Func const& func, bool cond, Offset const& offset,"},
{"lineNum":" 1374","line":"                    ExtentA const& a, ExtentB const& b) {"},
{"lineNum":" 1375","line":"    TAGGED_TILE_LOOP_1(Tagged(), func, IType, IsLeft, cond, offset, a, b, 1);"},
{"lineNum":" 1376","line":"  }"},
{"lineNum":" 1377","line":""},
{"lineNum":" 1378","line":"  template <typename ValType, typename Func, typename Offset, typename ExtentA,"},
{"lineNum":" 1379","line":"            typename ExtentB>"},
{"lineNum":" 1380","line":"  static void apply(ValType& value, Func const& func, bool cond,"},
{"lineNum":" 1381","line":"                    Offset const& offset, ExtentA const& a, ExtentB const& b) {"},
{"lineNum":" 1382","line":"    TAGGED_TILE_LOOP_1_REDUX(value, Tagged(), func, IType, IsLeft, cond, offset,"},
{"lineNum":" 1383","line":"                             a, b, 1);"},
{"lineNum":" 1384","line":"  }"},
{"lineNum":" 1385","line":"};"},
{"lineNum":" 1386","line":""},
{"lineNum":" 1387","line":"template <bool IsLeft, typename IType, typename Tagged>"},
{"lineNum":" 1388","line":"struct Tile_Loop_Type<"},
{"lineNum":" 1389","line":"    2, IsLeft, IType, Tagged,"},
{"lineNum":" 1390","line":"    typename std::enable_if<!std::is_same<Tagged, void>::value>::type> {"},
{"lineNum":" 1391","line":"  template <typename Func, typename Offset, typename ExtentA, typename ExtentB>"},
{"lineNum":" 1392","line":"  static void apply(Func const& func, bool cond, Offset const& offset,"},
{"lineNum":" 1393","line":"                    ExtentA const& a, ExtentB const& b) {"},
{"lineNum":" 1394","line":"    TAGGED_TILE_LOOP_2(Tagged(), func, IType, IsLeft, cond, offset, a, b, 2);"},
{"lineNum":" 1395","line":"  }"},
{"lineNum":" 1396","line":""},
{"lineNum":" 1397","line":"  template <typename ValType, typename Func, typename Offset, typename ExtentA,"},
{"lineNum":" 1398","line":"            typename ExtentB>"},
{"lineNum":" 1399","line":"  static void apply(ValType& value, Func const& func, bool cond,"},
{"lineNum":" 1400","line":"                    Offset const& offset, ExtentA const& a, ExtentB const& b) {"},
{"lineNum":" 1401","line":"    TAGGED_TILE_LOOP_2_REDUX(value, Tagged(), func, IType, IsLeft, cond, offset,"},
{"lineNum":" 1402","line":"                             a, b, 2);"},
{"lineNum":" 1403","line":"  }"},
{"lineNum":" 1404","line":"};"},
{"lineNum":" 1405","line":""},
{"lineNum":" 1406","line":"template <bool IsLeft, typename IType, typename Tagged>"},
{"lineNum":" 1407","line":"struct Tile_Loop_Type<"},
{"lineNum":" 1408","line":"    3, IsLeft, IType, Tagged,"},
{"lineNum":" 1409","line":"    typename std::enable_if<!std::is_same<Tagged, void>::value>::type> {"},
{"lineNum":" 1410","line":"  template <typename Func, typename Offset, typename ExtentA, typename ExtentB>"},
{"lineNum":" 1411","line":"  static void apply(Func const& func, bool cond, Offset const& offset,"},
{"lineNum":" 1412","line":"                    ExtentA const& a, ExtentB const& b) {"},
{"lineNum":" 1413","line":"    TAGGED_TILE_LOOP_3(Tagged(), func, IType, IsLeft, cond, offset, a, b, 3);"},
{"lineNum":" 1414","line":"  }"},
{"lineNum":" 1415","line":""},
{"lineNum":" 1416","line":"  template <typename ValType, typename Func, typename Offset, typename ExtentA,"},
{"lineNum":" 1417","line":"            typename ExtentB>"},
{"lineNum":" 1418","line":"  static void apply(ValType& value, Func const& func, bool cond,"},
{"lineNum":" 1419","line":"                    Offset const& offset, ExtentA const& a, ExtentB const& b) {"},
{"lineNum":" 1420","line":"    TAGGED_TILE_LOOP_3_REDUX(value, Tagged(), func, IType, IsLeft, cond, offset,"},
{"lineNum":" 1421","line":"                             a, b, 3);"},
{"lineNum":" 1422","line":"  }"},
{"lineNum":" 1423","line":"};"},
{"lineNum":" 1424","line":""},
{"lineNum":" 1425","line":"template <bool IsLeft, typename IType, typename Tagged>"},
{"lineNum":" 1426","line":"struct Tile_Loop_Type<"},
{"lineNum":" 1427","line":"    4, IsLeft, IType, Tagged,"},
{"lineNum":" 1428","line":"    typename std::enable_if<!std::is_same<Tagged, void>::value>::type> {"},
{"lineNum":" 1429","line":"  template <typename Func, typename Offset, typename ExtentA, typename ExtentB>"},
{"lineNum":" 1430","line":"  static void apply(Func const& func, bool cond, Offset const& offset,"},
{"lineNum":" 1431","line":"                    ExtentA const& a, ExtentB const& b) {"},
{"lineNum":" 1432","line":"    TAGGED_TILE_LOOP_4(Tagged(), func, IType, IsLeft, cond, offset, a, b, 4);"},
{"lineNum":" 1433","line":"  }"},
{"lineNum":" 1434","line":""},
{"lineNum":" 1435","line":"  template <typename ValType, typename Func, typename Offset, typename ExtentA,"},
{"lineNum":" 1436","line":"            typename ExtentB>"},
{"lineNum":" 1437","line":"  static void apply(ValType& value, Func const& func, bool cond,"},
{"lineNum":" 1438","line":"                    Offset const& offset, ExtentA const& a, ExtentB const& b) {"},
{"lineNum":" 1439","line":"    TAGGED_TILE_LOOP_4_REDUX(value, Tagged(), func, IType, IsLeft, cond, offset,"},
{"lineNum":" 1440","line":"                             a, b, 4);"},
{"lineNum":" 1441","line":"  }"},
{"lineNum":" 1442","line":"};"},
{"lineNum":" 1443","line":""},
{"lineNum":" 1444","line":"template <bool IsLeft, typename IType, typename Tagged>"},
{"lineNum":" 1445","line":"struct Tile_Loop_Type<"},
{"lineNum":" 1446","line":"    5, IsLeft, IType, Tagged,"},
{"lineNum":" 1447","line":"    typename std::enable_if<!std::is_same<Tagged, void>::value>::type> {"},
{"lineNum":" 1448","line":"  template <typename Func, typename Offset, typename ExtentA, typename ExtentB>"},
{"lineNum":" 1449","line":"  static void apply(Func const& func, bool cond, Offset const& offset,"},
{"lineNum":" 1450","line":"                    ExtentA const& a, ExtentB const& b) {"},
{"lineNum":" 1451","line":"    TAGGED_TILE_LOOP_5(Tagged(), func, IType, IsLeft, cond, offset, a, b, 5);"},
{"lineNum":" 1452","line":"  }"},
{"lineNum":" 1453","line":""},
{"lineNum":" 1454","line":"  template <typename ValType, typename Func, typename Offset, typename ExtentA,"},
{"lineNum":" 1455","line":"            typename ExtentB>"},
{"lineNum":" 1456","line":"  static void apply(ValType& value, Func const& func, bool cond,"},
{"lineNum":" 1457","line":"                    Offset const& offset, ExtentA const& a, ExtentB const& b) {"},
{"lineNum":" 1458","line":"    TAGGED_TILE_LOOP_5_REDUX(value, Tagged(), func, IType, IsLeft, cond, offset,"},
{"lineNum":" 1459","line":"                             a, b, 5);"},
{"lineNum":" 1460","line":"  }"},
{"lineNum":" 1461","line":"};"},
{"lineNum":" 1462","line":""},
{"lineNum":" 1463","line":"template <bool IsLeft, typename IType, typename Tagged>"},
{"lineNum":" 1464","line":"struct Tile_Loop_Type<"},
{"lineNum":" 1465","line":"    6, IsLeft, IType, Tagged,"},
{"lineNum":" 1466","line":"    typename std::enable_if<!std::is_same<Tagged, void>::value>::type> {"},
{"lineNum":" 1467","line":"  template <typename Func, typename Offset, typename ExtentA, typename ExtentB>"},
{"lineNum":" 1468","line":"  static void apply(Func const& func, bool cond, Offset const& offset,"},
{"lineNum":" 1469","line":"                    ExtentA const& a, ExtentB const& b) {"},
{"lineNum":" 1470","line":"    TAGGED_TILE_LOOP_6(Tagged(), func, IType, IsLeft, cond, offset, a, b, 6);"},
{"lineNum":" 1471","line":"  }"},
{"lineNum":" 1472","line":""},
{"lineNum":" 1473","line":"  template <typename ValType, typename Func, typename Offset, typename ExtentA,"},
{"lineNum":" 1474","line":"            typename ExtentB>"},
{"lineNum":" 1475","line":"  static void apply(ValType& value, Func const& func, bool cond,"},
{"lineNum":" 1476","line":"                    Offset const& offset, ExtentA const& a, ExtentB const& b) {"},
{"lineNum":" 1477","line":"    TAGGED_TILE_LOOP_6_REDUX(value, Tagged(), func, IType, IsLeft, cond, offset,"},
{"lineNum":" 1478","line":"                             a, b, 6);"},
{"lineNum":" 1479","line":"  }"},
{"lineNum":" 1480","line":"};"},
{"lineNum":" 1481","line":""},
{"lineNum":" 1482","line":"template <bool IsLeft, typename IType, typename Tagged>"},
{"lineNum":" 1483","line":"struct Tile_Loop_Type<"},
{"lineNum":" 1484","line":"    7, IsLeft, IType, Tagged,"},
{"lineNum":" 1485","line":"    typename std::enable_if<!std::is_same<Tagged, void>::value>::type> {"},
{"lineNum":" 1486","line":"  template <typename Func, typename Offset, typename ExtentA, typename ExtentB>"},
{"lineNum":" 1487","line":"  static void apply(Func const& func, bool cond, Offset const& offset,"},
{"lineNum":" 1488","line":"                    ExtentA const& a, ExtentB const& b) {"},
{"lineNum":" 1489","line":"    TAGGED_TILE_LOOP_7(Tagged(), func, IType, IsLeft, cond, offset, a, b, 7);"},
{"lineNum":" 1490","line":"  }"},
{"lineNum":" 1491","line":""},
{"lineNum":" 1492","line":"  template <typename ValType, typename Func, typename Offset, typename ExtentA,"},
{"lineNum":" 1493","line":"            typename ExtentB>"},
{"lineNum":" 1494","line":"  static void apply(ValType& value, Func const& func, bool cond,"},
{"lineNum":" 1495","line":"                    Offset const& offset, ExtentA const& a, ExtentB const& b) {"},
{"lineNum":" 1496","line":"    TAGGED_TILE_LOOP_7_REDUX(value, Tagged(), func, IType, IsLeft, cond, offset,"},
{"lineNum":" 1497","line":"                             a, b, 7);"},
{"lineNum":" 1498","line":"  }"},
{"lineNum":" 1499","line":"};"},
{"lineNum":" 1500","line":""},
{"lineNum":" 1501","line":"template <bool IsLeft, typename IType, typename Tagged>"},
{"lineNum":" 1502","line":"struct Tile_Loop_Type<"},
{"lineNum":" 1503","line":"    8, IsLeft, IType, Tagged,"},
{"lineNum":" 1504","line":"    typename std::enable_if<!std::is_same<Tagged, void>::value>::type> {"},
{"lineNum":" 1505","line":"  template <typename Func, typename Offset, typename ExtentA, typename ExtentB>"},
{"lineNum":" 1506","line":"  static void apply(Func const& func, bool cond, Offset const& offset,"},
{"lineNum":" 1507","line":"                    ExtentA const& a, ExtentB const& b) {"},
{"lineNum":" 1508","line":"    TAGGED_TILE_LOOP_8(Tagged(), func, IType, IsLeft, cond, offset, a, b, 8);"},
{"lineNum":" 1509","line":"  }"},
{"lineNum":" 1510","line":""},
{"lineNum":" 1511","line":"  template <typename ValType, typename Func, typename Offset, typename ExtentA,"},
{"lineNum":" 1512","line":"            typename ExtentB>"},
{"lineNum":" 1513","line":"  static void apply(ValType& value, Func const& func, bool cond,"},
{"lineNum":" 1514","line":"                    Offset const& offset, ExtentA const& a, ExtentB const& b) {"},
{"lineNum":" 1515","line":"    TAGGED_TILE_LOOP_8_REDUX(value, Tagged(), func, IType, IsLeft, cond, offset,"},
{"lineNum":" 1516","line":"                             a, b, 8);"},
{"lineNum":" 1517","line":"  }"},
{"lineNum":" 1518","line":"};"},
{"lineNum":" 1519","line":"// end Structs for calling loops"},
{"lineNum":" 1520","line":""},
{"lineNum":" 1521","line":"template <typename T>"},
{"lineNum":" 1522","line":"using is_void_type = std::is_same<T, void>;"},
{"lineNum":" 1523","line":""},
{"lineNum":" 1524","line":"template <typename T>"},
{"lineNum":" 1525","line":"struct is_type_array : std::false_type {"},
{"lineNum":" 1526","line":"  using value_type = T;"},
{"lineNum":" 1527","line":"};"},
{"lineNum":" 1528","line":""},
{"lineNum":" 1529","line":"template <typename T>"},
{"lineNum":" 1530","line":"struct is_type_array<T[]> : std::true_type {"},
{"lineNum":" 1531","line":"  using value_type = T;"},
{"lineNum":" 1532","line":"};"},
{"lineNum":" 1533","line":""},
{"lineNum":" 1534","line":"template <typename RP, typename Functor, typename Tag = void,"},
{"lineNum":" 1535","line":"          typename ValueType = void, typename Enable = void>"},
{"lineNum":" 1536","line":"struct HostIterateTile;"},
{"lineNum":" 1537","line":""},
{"lineNum":" 1538","line":"// For ParallelFor"},
{"lineNum":" 1539","line":"template <typename RP, typename Functor, typename Tag, typename ValueType>"},
{"lineNum":" 1540","line":"struct HostIterateTile<"},
{"lineNum":" 1541","line":"    RP, Functor, Tag, ValueType,"},
{"lineNum":" 1542","line":"    typename std::enable_if<is_void_type<ValueType>::value>::type> {"},
{"lineNum":" 1543","line":"  using index_type = typename RP::index_type;"},
{"lineNum":" 1544","line":"  using point_type = typename RP::point_type;"},
{"lineNum":" 1545","line":""},
{"lineNum":" 1546","line":"  using value_type = ValueType;"},
{"lineNum":" 1547","line":""},
{"lineNum":" 1548","line":"  inline HostIterateTile(RP const& rp, Functor const& func)"},
{"lineNum":" 1549","line":"      : m_rp(rp), m_func(func) {}","class":"lineNoCov","hits":"0","possible_hits":"32",},
{"lineNum":" 1550","line":""},
{"lineNum":" 1551","line":"  inline bool check_iteration_bounds(point_type& partial_tile,"},
{"lineNum":" 1552","line":"                                     point_type& offset) const {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1553","line":"    bool is_full_tile = true;"},
{"lineNum":" 1554","line":""},
{"lineNum":" 1555","line":"    for (int i = 0; i < RP::rank; ++i) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1556","line":"      if ((offset[i] + m_rp.m_tile[i]) <= m_rp.m_upper[i]) {","class":"lineNoCov","hits":"0","possible_hits":"46",},
{"lineNum":" 1557","line":"        partial_tile[i] = m_rp.m_tile[i];","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1558","line":"      } else {"},
{"lineNum":" 1559","line":"        is_full_tile = false;"},
{"lineNum":" 1560","line":"        partial_tile[i] ="},
{"lineNum":" 1561","line":"            (m_rp.m_upper[i] - 1 - offset[i]) == 0","class":"lineNoCov","hits":"0","possible_hits":"24",},
{"lineNum":" 1562","line":"                ? 1"},
{"lineNum":" 1563","line":"                : (m_rp.m_upper[i] - m_rp.m_tile[i]) > 0","class":"lineNoCov","hits":"0","possible_hits":"24",},
{"lineNum":" 1564","line":"                      ? (m_rp.m_upper[i] - offset[i])","class":"lineNoCov","hits":"0","possible_hits":"24",},
{"lineNum":" 1565","line":"                      : (m_rp.m_upper[i] -","class":"lineNoCov","hits":"0","possible_hits":"24",},
{"lineNum":" 1566","line":"                         m_rp.m_lower[i]);  // when single tile encloses range"},
{"lineNum":" 1567","line":"      }"},
{"lineNum":" 1568","line":"    }"},
{"lineNum":" 1569","line":""},
{"lineNum":" 1570","line":"    return is_full_tile;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1571","line":"  }  // end check bounds"},
{"lineNum":" 1572","line":""},
{"lineNum":" 1573","line":"  template <int Rank>"},
{"lineNum":" 1574","line":"  struct RankTag {"},
{"lineNum":" 1575","line":"    using type = RankTag<Rank>;"},
{"lineNum":" 1576","line":"    enum { value = (int)Rank };"},
{"lineNum":" 1577","line":"  };"},
{"lineNum":" 1578","line":""},
{"lineNum":" 1579","line":"#if KOKKOS_ENABLE_NEW_LOOP_MACROS"},
{"lineNum":" 1580","line":"  template <typename IType>"},
{"lineNum":" 1581","line":"  inline void operator()(IType tile_idx) const {","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":" 1582","line":"    point_type m_offset;"},
{"lineNum":" 1583","line":"    point_type m_tiledims;"},
{"lineNum":" 1584","line":""},
{"lineNum":" 1585","line":"    if (RP::outer_direction == Iterate::Left) {"},
{"lineNum":" 1586","line":"      for (int i = 0; i < RP::rank; ++i) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1587","line":"        m_offset[i] =","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 1588","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];","class":"lineNoCov","hits":"0","possible_hits":"26",},
{"lineNum":" 1589","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 1590","line":"      }"},
{"lineNum":" 1591","line":"    } else {"},
{"lineNum":" 1592","line":"      for (int i = RP::rank - 1; i >= 0; --i) {"},
{"lineNum":" 1593","line":"        m_offset[i] ="},
{"lineNum":" 1594","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1595","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 1596","line":"      }"},
{"lineNum":" 1597","line":"    }"},
{"lineNum":" 1598","line":""},
{"lineNum":" 1599","line":"    // Check if offset+tiledim in bounds - if not, replace tile dims with the"},
{"lineNum":" 1600","line":"    // partial tile dims"},
{"lineNum":" 1601","line":"    const bool full_tile = check_iteration_bounds(m_tiledims, m_offset);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1602","line":""},
{"lineNum":" 1603","line":"    Tile_Loop_Type<RP::rank, (RP::inner_direction == Iterate::Left), index_type,","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1604","line":"                   Tag>::apply(m_func, full_tile, m_offset, m_rp.m_tile,","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1605","line":"                               m_tiledims);"},
{"lineNum":" 1606","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":" 1607","line":""},
{"lineNum":" 1608","line":"#else"},
{"lineNum":" 1609","line":"  template <typename IType>"},
{"lineNum":" 1610","line":"  inline void operator()(IType tile_idx) const {"},
{"lineNum":" 1611","line":"    operator_impl(tile_idx, RankTag<RP::rank>());"},
{"lineNum":" 1612","line":"  }"},
{"lineNum":" 1613","line":"  // added due to compiler error when using sfinae to choose operator based on"},
{"lineNum":" 1614","line":"  // rank w/ cuda+serial"},
{"lineNum":" 1615","line":""},
{"lineNum":" 1616","line":"  template <typename IType>"},
{"lineNum":" 1617","line":"  inline void operator_impl(IType tile_idx, const RankTag<2>) const {"},
{"lineNum":" 1618","line":"    point_type m_offset;"},
{"lineNum":" 1619","line":"    point_type m_tiledims;"},
{"lineNum":" 1620","line":""},
{"lineNum":" 1621","line":"    if (RP::outer_direction == Iterate::Left) {"},
{"lineNum":" 1622","line":"      for (int i = 0; i < RP::rank; ++i) {"},
{"lineNum":" 1623","line":"        m_offset[i] ="},
{"lineNum":" 1624","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 1625","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 1626","line":"      }"},
{"lineNum":" 1627","line":"    } else {"},
{"lineNum":" 1628","line":"      for (int i = RP::rank - 1; i >= 0; --i) {"},
{"lineNum":" 1629","line":"        m_offset[i] ="},
{"lineNum":" 1630","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 1631","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 1632","line":"      }"},
{"lineNum":" 1633","line":"    }"},
{"lineNum":" 1634","line":""},
{"lineNum":" 1635","line":"    // Check if offset+tiledim in bounds - if not, replace tile dims with the"},
{"lineNum":" 1636","line":"    // partial tile dims"},
{"lineNum":" 1637","line":"    const bool full_tile = check_iteration_bounds(m_tiledims, m_offset);"},
{"lineNum":" 1638","line":""},
{"lineNum":" 1639","line":"    if (RP::inner_direction == Iterate::Left) {"},
{"lineNum":" 1640","line":"      if (full_tile) {"},
{"lineNum":" 1641","line":"        //      #pragma simd"},
{"lineNum":" 1642","line":"        LOOP_2L(index_type, m_tiledims) { apply(LOOP_ARGS_2); }"},
{"lineNum":" 1643","line":"      } else {"},
{"lineNum":" 1644","line":"        //      #pragma simd"},
{"lineNum":" 1645","line":"        LOOP_2L(index_type, m_tiledims) { apply(LOOP_ARGS_2); }"},
{"lineNum":" 1646","line":"      }"},
{"lineNum":" 1647","line":"    }  // end Iterate::Left"},
{"lineNum":" 1648","line":"    else {"},
{"lineNum":" 1649","line":"      if (full_tile) {"},
{"lineNum":" 1650","line":"        //      #pragma simd"},
{"lineNum":" 1651","line":"        LOOP_2R(index_type, m_tiledims) { apply(LOOP_ARGS_2); }"},
{"lineNum":" 1652","line":"      } else {"},
{"lineNum":" 1653","line":"        //      #pragma simd"},
{"lineNum":" 1654","line":"        LOOP_2R(index_type, m_tiledims) { apply(LOOP_ARGS_2); }"},
{"lineNum":" 1655","line":"      }"},
{"lineNum":" 1656","line":"    }  // end Iterate::Right"},
{"lineNum":" 1657","line":""},
{"lineNum":" 1658","line":"  }  // end op() rank == 2"},
{"lineNum":" 1659","line":""},
{"lineNum":" 1660","line":"  template <typename IType>"},
{"lineNum":" 1661","line":"  inline void operator_impl(IType tile_idx, const RankTag<3>) const {"},
{"lineNum":" 1662","line":"    point_type m_offset;"},
{"lineNum":" 1663","line":"    point_type m_tiledims;"},
{"lineNum":" 1664","line":""},
{"lineNum":" 1665","line":"    if (RP::outer_direction == Iterate::Left) {"},
{"lineNum":" 1666","line":"      for (int i = 0; i < RP::rank; ++i) {"},
{"lineNum":" 1667","line":"        m_offset[i] ="},
{"lineNum":" 1668","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 1669","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 1670","line":"      }"},
{"lineNum":" 1671","line":"    } else {"},
{"lineNum":" 1672","line":"      for (int i = RP::rank - 1; i >= 0; --i) {"},
{"lineNum":" 1673","line":"        m_offset[i] ="},
{"lineNum":" 1674","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 1675","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 1676","line":"      }"},
{"lineNum":" 1677","line":"    }"},
{"lineNum":" 1678","line":""},
{"lineNum":" 1679","line":"    // Check if offset+tiledim in bounds - if not, replace tile dims with the"},
{"lineNum":" 1680","line":"    // partial tile dims"},
{"lineNum":" 1681","line":"    const bool full_tile = check_iteration_bounds(m_tiledims, m_offset);"},
{"lineNum":" 1682","line":""},
{"lineNum":" 1683","line":"    if (RP::inner_direction == Iterate::Left) {"},
{"lineNum":" 1684","line":"      if (full_tile) {"},
{"lineNum":" 1685","line":"        //      #pragma simd"},
{"lineNum":" 1686","line":"        LOOP_3L(index_type, m_tiledims) { apply(LOOP_ARGS_3); }"},
{"lineNum":" 1687","line":"      } else {"},
{"lineNum":" 1688","line":"        //      #pragma simd"},
{"lineNum":" 1689","line":"        LOOP_3L(index_type, m_tiledims) { apply(LOOP_ARGS_3); }"},
{"lineNum":" 1690","line":"      }"},
{"lineNum":" 1691","line":"    }  // end Iterate::Left"},
{"lineNum":" 1692","line":"    else {"},
{"lineNum":" 1693","line":"      if (full_tile) {"},
{"lineNum":" 1694","line":"        //      #pragma simd"},
{"lineNum":" 1695","line":"        LOOP_3R(index_type, m_tiledims) { apply(LOOP_ARGS_3); }"},
{"lineNum":" 1696","line":"      } else {"},
{"lineNum":" 1697","line":"        //      #pragma simd"},
{"lineNum":" 1698","line":"        LOOP_3R(index_type, m_tiledims) { apply(LOOP_ARGS_3); }"},
{"lineNum":" 1699","line":"      }"},
{"lineNum":" 1700","line":"    }  // end Iterate::Right"},
{"lineNum":" 1701","line":""},
{"lineNum":" 1702","line":"  }  // end op() rank == 3"},
{"lineNum":" 1703","line":""},
{"lineNum":" 1704","line":"  template <typename IType>"},
{"lineNum":" 1705","line":"  inline void operator_impl(IType tile_idx, const RankTag<4>) const {"},
{"lineNum":" 1706","line":"    point_type m_offset;"},
{"lineNum":" 1707","line":"    point_type m_tiledims;"},
{"lineNum":" 1708","line":""},
{"lineNum":" 1709","line":"    if (RP::outer_direction == Iterate::Left) {"},
{"lineNum":" 1710","line":"      for (int i = 0; i < RP::rank; ++i) {"},
{"lineNum":" 1711","line":"        m_offset[i] ="},
{"lineNum":" 1712","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 1713","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 1714","line":"      }"},
{"lineNum":" 1715","line":"    } else {"},
{"lineNum":" 1716","line":"      for (int i = RP::rank - 1; i >= 0; --i) {"},
{"lineNum":" 1717","line":"        m_offset[i] ="},
{"lineNum":" 1718","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 1719","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 1720","line":"      }"},
{"lineNum":" 1721","line":"    }"},
{"lineNum":" 1722","line":""},
{"lineNum":" 1723","line":"    // Check if offset+tiledim in bounds - if not, replace tile dims with the"},
{"lineNum":" 1724","line":"    // partial tile dims"},
{"lineNum":" 1725","line":"    const bool full_tile = check_iteration_bounds(m_tiledims, m_offset);"},
{"lineNum":" 1726","line":""},
{"lineNum":" 1727","line":"    if (RP::inner_direction == Iterate::Left) {"},
{"lineNum":" 1728","line":"      if (full_tile) {"},
{"lineNum":" 1729","line":"        //      #pragma simd"},
{"lineNum":" 1730","line":"        LOOP_4L(index_type, m_tiledims) { apply(LOOP_ARGS_4); }"},
{"lineNum":" 1731","line":"      } else {"},
{"lineNum":" 1732","line":"        //      #pragma simd"},
{"lineNum":" 1733","line":"        LOOP_4L(index_type, m_tiledims) { apply(LOOP_ARGS_4); }"},
{"lineNum":" 1734","line":"      }"},
{"lineNum":" 1735","line":"    }  // end Iterate::Left"},
{"lineNum":" 1736","line":"    else {"},
{"lineNum":" 1737","line":"      if (full_tile) {"},
{"lineNum":" 1738","line":"        //      #pragma simd"},
{"lineNum":" 1739","line":"        LOOP_4R(index_type, m_tiledims) { apply(LOOP_ARGS_4); }"},
{"lineNum":" 1740","line":"      } else {"},
{"lineNum":" 1741","line":"        //      #pragma simd"},
{"lineNum":" 1742","line":"        LOOP_4R(index_type, m_tiledims) { apply(LOOP_ARGS_4); }"},
{"lineNum":" 1743","line":"      }"},
{"lineNum":" 1744","line":"    }  // end Iterate::Right"},
{"lineNum":" 1745","line":""},
{"lineNum":" 1746","line":"  }  // end op() rank == 4"},
{"lineNum":" 1747","line":""},
{"lineNum":" 1748","line":"  template <typename IType>"},
{"lineNum":" 1749","line":"  inline void operator_impl(IType tile_idx, const RankTag<5>) const {"},
{"lineNum":" 1750","line":"    point_type m_offset;"},
{"lineNum":" 1751","line":"    point_type m_tiledims;"},
{"lineNum":" 1752","line":""},
{"lineNum":" 1753","line":"    if (RP::outer_direction == Iterate::Left) {"},
{"lineNum":" 1754","line":"      for (int i = 0; i < RP::rank; ++i) {"},
{"lineNum":" 1755","line":"        m_offset[i] ="},
{"lineNum":" 1756","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 1757","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 1758","line":"      }"},
{"lineNum":" 1759","line":"    } else {"},
{"lineNum":" 1760","line":"      for (int i = RP::rank - 1; i >= 0; --i) {"},
{"lineNum":" 1761","line":"        m_offset[i] ="},
{"lineNum":" 1762","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 1763","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 1764","line":"      }"},
{"lineNum":" 1765","line":"    }"},
{"lineNum":" 1766","line":""},
{"lineNum":" 1767","line":"    // Check if offset+tiledim in bounds - if not, replace tile dims with the"},
{"lineNum":" 1768","line":"    // partial tile dims"},
{"lineNum":" 1769","line":"    const bool full_tile = check_iteration_bounds(m_tiledims, m_offset);"},
{"lineNum":" 1770","line":""},
{"lineNum":" 1771","line":"    if (RP::inner_direction == Iterate::Left) {"},
{"lineNum":" 1772","line":"      if (full_tile) {"},
{"lineNum":" 1773","line":"        //      #pragma simd"},
{"lineNum":" 1774","line":"        LOOP_5L(index_type, m_tiledims) { apply(LOOP_ARGS_5); }"},
{"lineNum":" 1775","line":"      } else {"},
{"lineNum":" 1776","line":"        //      #pragma simd"},
{"lineNum":" 1777","line":"        LOOP_5L(index_type, m_tiledims) { apply(LOOP_ARGS_5); }"},
{"lineNum":" 1778","line":"      }"},
{"lineNum":" 1779","line":"    }  // end Iterate::Left"},
{"lineNum":" 1780","line":"    else {"},
{"lineNum":" 1781","line":"      if (full_tile) {"},
{"lineNum":" 1782","line":"        //      #pragma simd"},
{"lineNum":" 1783","line":"        LOOP_5R(index_type, m_tiledims) { apply(LOOP_ARGS_5); }"},
{"lineNum":" 1784","line":"      } else {"},
{"lineNum":" 1785","line":"        //      #pragma simd"},
{"lineNum":" 1786","line":"        LOOP_5R(index_type, m_tiledims) { apply(LOOP_ARGS_5); }"},
{"lineNum":" 1787","line":"      }"},
{"lineNum":" 1788","line":"    }  // end Iterate::Right"},
{"lineNum":" 1789","line":""},
{"lineNum":" 1790","line":"  }  // end op() rank == 5"},
{"lineNum":" 1791","line":""},
{"lineNum":" 1792","line":"  template <typename IType>"},
{"lineNum":" 1793","line":"  inline void operator_impl(IType tile_idx, const RankTag<6>) const {"},
{"lineNum":" 1794","line":"    point_type m_offset;"},
{"lineNum":" 1795","line":"    point_type m_tiledims;"},
{"lineNum":" 1796","line":""},
{"lineNum":" 1797","line":"    if (RP::outer_direction == Iterate::Left) {"},
{"lineNum":" 1798","line":"      for (int i = 0; i < RP::rank; ++i) {"},
{"lineNum":" 1799","line":"        m_offset[i] ="},
{"lineNum":" 1800","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 1801","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 1802","line":"      }"},
{"lineNum":" 1803","line":"    } else {"},
{"lineNum":" 1804","line":"      for (int i = RP::rank - 1; i >= 0; --i) {"},
{"lineNum":" 1805","line":"        m_offset[i] ="},
{"lineNum":" 1806","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 1807","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 1808","line":"      }"},
{"lineNum":" 1809","line":"    }"},
{"lineNum":" 1810","line":""},
{"lineNum":" 1811","line":"    // Check if offset+tiledim in bounds - if not, replace tile dims with the"},
{"lineNum":" 1812","line":"    // partial tile dims"},
{"lineNum":" 1813","line":"    const bool full_tile = check_iteration_bounds(m_tiledims, m_offset);"},
{"lineNum":" 1814","line":""},
{"lineNum":" 1815","line":"    if (RP::inner_direction == Iterate::Left) {"},
{"lineNum":" 1816","line":"      if (full_tile) {"},
{"lineNum":" 1817","line":"        //      #pragma simd"},
{"lineNum":" 1818","line":"        LOOP_6L(index_type, m_tiledims) { apply(LOOP_ARGS_6); }"},
{"lineNum":" 1819","line":"      } else {"},
{"lineNum":" 1820","line":"        //      #pragma simd"},
{"lineNum":" 1821","line":"        LOOP_6L(index_type, m_tiledims) { apply(LOOP_ARGS_6); }"},
{"lineNum":" 1822","line":"      }"},
{"lineNum":" 1823","line":"    }  // end Iterate::Left"},
{"lineNum":" 1824","line":"    else {"},
{"lineNum":" 1825","line":"      if (full_tile) {"},
{"lineNum":" 1826","line":"        //      #pragma simd"},
{"lineNum":" 1827","line":"        LOOP_6R(index_type, m_tiledims) { apply(LOOP_ARGS_6); }"},
{"lineNum":" 1828","line":"      } else {"},
{"lineNum":" 1829","line":"        //      #pragma simd"},
{"lineNum":" 1830","line":"        LOOP_6R(index_type, m_tiledims) { apply(LOOP_ARGS_6); }"},
{"lineNum":" 1831","line":"      }"},
{"lineNum":" 1832","line":"    }  // end Iterate::Right"},
{"lineNum":" 1833","line":""},
{"lineNum":" 1834","line":"  }  // end op() rank == 6"},
{"lineNum":" 1835","line":""},
{"lineNum":" 1836","line":"  template <typename IType>"},
{"lineNum":" 1837","line":"  inline void operator_impl(IType tile_idx, const RankTag<7>) const {"},
{"lineNum":" 1838","line":"    point_type m_offset;"},
{"lineNum":" 1839","line":"    point_type m_tiledims;"},
{"lineNum":" 1840","line":""},
{"lineNum":" 1841","line":"    if (RP::outer_direction == Iterate::Left) {"},
{"lineNum":" 1842","line":"      for (int i = 0; i < RP::rank; ++i) {"},
{"lineNum":" 1843","line":"        m_offset[i] ="},
{"lineNum":" 1844","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 1845","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 1846","line":"      }"},
{"lineNum":" 1847","line":"    } else {"},
{"lineNum":" 1848","line":"      for (int i = RP::rank - 1; i >= 0; --i) {"},
{"lineNum":" 1849","line":"        m_offset[i] ="},
{"lineNum":" 1850","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 1851","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 1852","line":"      }"},
{"lineNum":" 1853","line":"    }"},
{"lineNum":" 1854","line":""},
{"lineNum":" 1855","line":"    // Check if offset+tiledim in bounds - if not, replace tile dims with the"},
{"lineNum":" 1856","line":"    // partial tile dims"},
{"lineNum":" 1857","line":"    const bool full_tile = check_iteration_bounds(m_tiledims, m_offset);"},
{"lineNum":" 1858","line":""},
{"lineNum":" 1859","line":"    if (RP::inner_direction == Iterate::Left) {"},
{"lineNum":" 1860","line":"      if (full_tile) {"},
{"lineNum":" 1861","line":"        //      #pragma simd"},
{"lineNum":" 1862","line":"        LOOP_7L(index_type, m_tiledims) { apply(LOOP_ARGS_7); }"},
{"lineNum":" 1863","line":"      } else {"},
{"lineNum":" 1864","line":"        //      #pragma simd"},
{"lineNum":" 1865","line":"        LOOP_7L(index_type, m_tiledims) { apply(LOOP_ARGS_7); }"},
{"lineNum":" 1866","line":"      }"},
{"lineNum":" 1867","line":"    }  // end Iterate::Left"},
{"lineNum":" 1868","line":"    else {"},
{"lineNum":" 1869","line":"      if (full_tile) {"},
{"lineNum":" 1870","line":"        //      #pragma simd"},
{"lineNum":" 1871","line":"        LOOP_7R(index_type, m_tiledims) { apply(LOOP_ARGS_7); }"},
{"lineNum":" 1872","line":"      } else {"},
{"lineNum":" 1873","line":"        //      #pragma simd"},
{"lineNum":" 1874","line":"        LOOP_7R(index_type, m_tiledims) { apply(LOOP_ARGS_7); }"},
{"lineNum":" 1875","line":"      }"},
{"lineNum":" 1876","line":"    }  // end Iterate::Right"},
{"lineNum":" 1877","line":""},
{"lineNum":" 1878","line":"  }  // end op() rank == 7"},
{"lineNum":" 1879","line":""},
{"lineNum":" 1880","line":"  template <typename IType>"},
{"lineNum":" 1881","line":"  inline void operator_impl(IType tile_idx, const RankTag<8>) const {"},
{"lineNum":" 1882","line":"    point_type m_offset;"},
{"lineNum":" 1883","line":"    point_type m_tiledims;"},
{"lineNum":" 1884","line":""},
{"lineNum":" 1885","line":"    if (RP::outer_direction == Iterate::Left) {"},
{"lineNum":" 1886","line":"      for (int i = 0; i < RP::rank; ++i) {"},
{"lineNum":" 1887","line":"        m_offset[i] ="},
{"lineNum":" 1888","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 1889","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 1890","line":"      }"},
{"lineNum":" 1891","line":"    } else {"},
{"lineNum":" 1892","line":"      for (int i = RP::rank - 1; i >= 0; --i) {"},
{"lineNum":" 1893","line":"        m_offset[i] ="},
{"lineNum":" 1894","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 1895","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 1896","line":"      }"},
{"lineNum":" 1897","line":"    }"},
{"lineNum":" 1898","line":""},
{"lineNum":" 1899","line":"    // Check if offset+tiledim in bounds - if not, replace tile dims with the"},
{"lineNum":" 1900","line":"    // partial tile dims"},
{"lineNum":" 1901","line":"    const bool full_tile = check_iteration_bounds(m_tiledims, m_offset);"},
{"lineNum":" 1902","line":""},
{"lineNum":" 1903","line":"    if (RP::inner_direction == Iterate::Left) {"},
{"lineNum":" 1904","line":"      if (full_tile) {"},
{"lineNum":" 1905","line":"        //      #pragma simd"},
{"lineNum":" 1906","line":"        LOOP_8L(index_type, m_tiledims) { apply(LOOP_ARGS_8); }"},
{"lineNum":" 1907","line":"      } else {"},
{"lineNum":" 1908","line":"        //      #pragma simd"},
{"lineNum":" 1909","line":"        LOOP_8L(index_type, m_tiledims) { apply(LOOP_ARGS_8); }"},
{"lineNum":" 1910","line":"      }"},
{"lineNum":" 1911","line":"    }  // end Iterate::Left"},
{"lineNum":" 1912","line":"    else {"},
{"lineNum":" 1913","line":"      if (full_tile) {"},
{"lineNum":" 1914","line":"        //      #pragma simd"},
{"lineNum":" 1915","line":"        LOOP_8R(index_type, m_tiledims) { apply(LOOP_ARGS_8); }"},
{"lineNum":" 1916","line":"      } else {"},
{"lineNum":" 1917","line":"        //      #pragma simd"},
{"lineNum":" 1918","line":"        LOOP_8R(index_type, m_tiledims) { apply(LOOP_ARGS_8); }"},
{"lineNum":" 1919","line":"      }"},
{"lineNum":" 1920","line":"    }  // end Iterate::Right"},
{"lineNum":" 1921","line":""},
{"lineNum":" 1922","line":"  }  // end op() rank == 8"},
{"lineNum":" 1923","line":"#endif"},
{"lineNum":" 1924","line":""},
{"lineNum":" 1925","line":"  template <typename... Args>"},
{"lineNum":" 1926","line":"  typename std::enable_if<(sizeof...(Args) == RP::rank &&"},
{"lineNum":" 1927","line":"                           std::is_same<Tag, void>::value),"},
{"lineNum":" 1928","line":"                          void>::type"},
{"lineNum":" 1929","line":"  apply(Args&&... args) const {"},
{"lineNum":" 1930","line":"    m_func(args...);"},
{"lineNum":" 1931","line":"  }"},
{"lineNum":" 1932","line":""},
{"lineNum":" 1933","line":"  template <typename... Args>"},
{"lineNum":" 1934","line":"  typename std::enable_if<(sizeof...(Args) == RP::rank &&"},
{"lineNum":" 1935","line":"                           !std::is_same<Tag, void>::value),"},
{"lineNum":" 1936","line":"                          void>::type"},
{"lineNum":" 1937","line":"  apply(Args&&... args) const {"},
{"lineNum":" 1938","line":"    m_func(m_tag, args...);"},
{"lineNum":" 1939","line":"  }"},
{"lineNum":" 1940","line":""},
{"lineNum":" 1941","line":"  RP const& m_rp;"},
{"lineNum":" 1942","line":"  Functor const& m_func;"},
{"lineNum":" 1943","line":"  typename std::conditional<std::is_same<Tag, void>::value, int, Tag>::type"},
{"lineNum":" 1944","line":"      m_tag;"},
{"lineNum":" 1945","line":"};"},
{"lineNum":" 1946","line":""},
{"lineNum":" 1947","line":"// For ParallelReduce"},
{"lineNum":" 1948","line":"// ValueType - scalar: For reductions"},
{"lineNum":" 1949","line":"template <typename RP, typename Functor, typename Tag, typename ValueType>"},
{"lineNum":" 1950","line":"struct HostIterateTile<"},
{"lineNum":" 1951","line":"    RP, Functor, Tag, ValueType,"},
{"lineNum":" 1952","line":"    typename std::enable_if<!is_void_type<ValueType>::value &&"},
{"lineNum":" 1953","line":"                            !is_type_array<ValueType>::value>::type> {"},
{"lineNum":" 1954","line":"  using index_type = typename RP::index_type;"},
{"lineNum":" 1955","line":"  using point_type = typename RP::point_type;"},
{"lineNum":" 1956","line":""},
{"lineNum":" 1957","line":"  using value_type = ValueType;"},
{"lineNum":" 1958","line":""},
{"lineNum":" 1959","line":"  inline HostIterateTile(RP const& rp, Functor const& func, value_type& v)"},
{"lineNum":" 1960","line":"      : m_rp(rp)  // Cuda 7.0 does not like braces..."},
{"lineNum":" 1961","line":"        ,"},
{"lineNum":" 1962","line":"        m_func(func),"},
{"lineNum":" 1963","line":"        m_v(v)  // use with non-void ValueType struct"},
{"lineNum":" 1964","line":"  {"},
{"lineNum":" 1965","line":"    // Errors due to braces rather than parenthesis for init (with cuda 7.0)"},
{"lineNum":" 1966","line":"    //      /home/ndellin/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp:1216:98:"},
{"lineNum":" 1967","line":"    //      error: too many braces around initializer for ‘int’ [-fpermissive]"},
{"lineNum":" 1968","line":"    //      /home/ndellin/kokkos/core/src/impl/KokkosExp_Host_IterateTile.hpp:1216:98:"},
{"lineNum":" 1969","line":"    //      error: aggregate value used where an integer was expected"},
{"lineNum":" 1970","line":"  }"},
{"lineNum":" 1971","line":""},
{"lineNum":" 1972","line":"  inline bool check_iteration_bounds(point_type& partial_tile,"},
{"lineNum":" 1973","line":"                                     point_type& offset) const {"},
{"lineNum":" 1974","line":"    bool is_full_tile = true;"},
{"lineNum":" 1975","line":""},
{"lineNum":" 1976","line":"    for (int i = 0; i < RP::rank; ++i) {"},
{"lineNum":" 1977","line":"      if ((offset[i] + m_rp.m_tile[i]) <= m_rp.m_upper[i]) {"},
{"lineNum":" 1978","line":"        partial_tile[i] = m_rp.m_tile[i];"},
{"lineNum":" 1979","line":"      } else {"},
{"lineNum":" 1980","line":"        is_full_tile = false;"},
{"lineNum":" 1981","line":"        partial_tile[i] ="},
{"lineNum":" 1982","line":"            (m_rp.m_upper[i] - 1 - offset[i]) == 0"},
{"lineNum":" 1983","line":"                ? 1"},
{"lineNum":" 1984","line":"                : (m_rp.m_upper[i] - m_rp.m_tile[i]) > 0"},
{"lineNum":" 1985","line":"                      ? (m_rp.m_upper[i] - offset[i])"},
{"lineNum":" 1986","line":"                      : (m_rp.m_upper[i] -"},
{"lineNum":" 1987","line":"                         m_rp.m_lower[i]);  // when single tile encloses range"},
{"lineNum":" 1988","line":"      }"},
{"lineNum":" 1989","line":"    }"},
{"lineNum":" 1990","line":""},
{"lineNum":" 1991","line":"    return is_full_tile;"},
{"lineNum":" 1992","line":"  }  // end check bounds"},
{"lineNum":" 1993","line":""},
{"lineNum":" 1994","line":"  template <int Rank>"},
{"lineNum":" 1995","line":"  struct RankTag {"},
{"lineNum":" 1996","line":"    using type = RankTag<Rank>;"},
{"lineNum":" 1997","line":"    enum { value = (int)Rank };"},
{"lineNum":" 1998","line":"  };"},
{"lineNum":" 1999","line":""},
{"lineNum":" 2000","line":"#if KOKKOS_ENABLE_NEW_LOOP_MACROS"},
{"lineNum":" 2001","line":"  template <typename IType>"},
{"lineNum":" 2002","line":"  inline void operator()(IType tile_idx) const {"},
{"lineNum":" 2003","line":"    point_type m_offset;"},
{"lineNum":" 2004","line":"    point_type m_tiledims;"},
{"lineNum":" 2005","line":""},
{"lineNum":" 2006","line":"    if (RP::outer_direction == Iterate::Left) {"},
{"lineNum":" 2007","line":"      for (int i = 0; i < RP::rank; ++i) {"},
{"lineNum":" 2008","line":"        m_offset[i] ="},
{"lineNum":" 2009","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 2010","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 2011","line":"      }"},
{"lineNum":" 2012","line":"    } else {"},
{"lineNum":" 2013","line":"      for (int i = RP::rank - 1; i >= 0; --i) {"},
{"lineNum":" 2014","line":"        m_offset[i] ="},
{"lineNum":" 2015","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 2016","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 2017","line":"      }"},
{"lineNum":" 2018","line":"    }"},
{"lineNum":" 2019","line":""},
{"lineNum":" 2020","line":"    // Check if offset+tiledim in bounds - if not, replace tile dims with the"},
{"lineNum":" 2021","line":"    // partial tile dims"},
{"lineNum":" 2022","line":"    const bool full_tile = check_iteration_bounds(m_tiledims, m_offset);"},
{"lineNum":" 2023","line":""},
{"lineNum":" 2024","line":"    Tile_Loop_Type<RP::rank, (RP::inner_direction == Iterate::Left), index_type,"},
{"lineNum":" 2025","line":"                   Tag>::apply(m_v, m_func, full_tile, m_offset, m_rp.m_tile,"},
{"lineNum":" 2026","line":"                               m_tiledims);"},
{"lineNum":" 2027","line":"  }"},
{"lineNum":" 2028","line":""},
{"lineNum":" 2029","line":"#else"},
{"lineNum":" 2030","line":"  template <typename IType>"},
{"lineNum":" 2031","line":"  inline void operator()(IType tile_idx) const {"},
{"lineNum":" 2032","line":"    operator_impl(tile_idx, RankTag<RP::rank>());"},
{"lineNum":" 2033","line":"  }"},
{"lineNum":" 2034","line":"  // added due to compiler error when using sfinae to choose operator based on"},
{"lineNum":" 2035","line":"  // rank"},
{"lineNum":" 2036","line":""},
{"lineNum":" 2037","line":"  template <typename IType>"},
{"lineNum":" 2038","line":"  inline void operator_impl(IType tile_idx, const RankTag<2>) const {"},
{"lineNum":" 2039","line":"    point_type m_offset;"},
{"lineNum":" 2040","line":"    point_type m_tiledims;"},
{"lineNum":" 2041","line":""},
{"lineNum":" 2042","line":"    if (RP::outer_direction == Iterate::Left) {"},
{"lineNum":" 2043","line":"      for (int i = 0; i < RP::rank; ++i) {"},
{"lineNum":" 2044","line":"        m_offset[i] ="},
{"lineNum":" 2045","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 2046","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 2047","line":"      }"},
{"lineNum":" 2048","line":"    } else {"},
{"lineNum":" 2049","line":"      for (int i = RP::rank - 1; i >= 0; --i) {"},
{"lineNum":" 2050","line":"        m_offset[i] ="},
{"lineNum":" 2051","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 2052","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 2053","line":"      }"},
{"lineNum":" 2054","line":"    }"},
{"lineNum":" 2055","line":""},
{"lineNum":" 2056","line":"    // Check if offset+tiledim in bounds - if not, replace tile dims with the"},
{"lineNum":" 2057","line":"    // partial tile dims"},
{"lineNum":" 2058","line":"    const bool full_tile = check_iteration_bounds(m_tiledims, m_offset);"},
{"lineNum":" 2059","line":""},
{"lineNum":" 2060","line":"    if (RP::inner_direction == Iterate::Left) {"},
{"lineNum":" 2061","line":"      if (full_tile) {"},
{"lineNum":" 2062","line":"        //      #pragma simd"},
{"lineNum":" 2063","line":"        LOOP_2L(index_type, m_tiledims) { apply(LOOP_ARGS_2); }"},
{"lineNum":" 2064","line":"      } else {"},
{"lineNum":" 2065","line":"        //      #pragma simd"},
{"lineNum":" 2066","line":"        LOOP_2L(index_type, m_tiledims) { apply(LOOP_ARGS_2); }"},
{"lineNum":" 2067","line":"      }"},
{"lineNum":" 2068","line":"    }  // end Iterate::Left"},
{"lineNum":" 2069","line":"    else {"},
{"lineNum":" 2070","line":"      if (full_tile) {"},
{"lineNum":" 2071","line":"        //      #pragma simd"},
{"lineNum":" 2072","line":"        LOOP_2R(index_type, m_tiledims) { apply(LOOP_ARGS_2); }"},
{"lineNum":" 2073","line":"      } else {"},
{"lineNum":" 2074","line":"        //      #pragma simd"},
{"lineNum":" 2075","line":"        LOOP_2R(index_type, m_tiledims) { apply(LOOP_ARGS_2); }"},
{"lineNum":" 2076","line":"      }"},
{"lineNum":" 2077","line":"    }  // end Iterate::Right"},
{"lineNum":" 2078","line":""},
{"lineNum":" 2079","line":"  }  // end op() rank == 2"},
{"lineNum":" 2080","line":""},
{"lineNum":" 2081","line":"  template <typename IType>"},
{"lineNum":" 2082","line":"  inline void operator_impl(IType tile_idx, const RankTag<3>) const {"},
{"lineNum":" 2083","line":"    point_type m_offset;"},
{"lineNum":" 2084","line":"    point_type m_tiledims;"},
{"lineNum":" 2085","line":""},
{"lineNum":" 2086","line":"    if (RP::outer_direction == Iterate::Left) {"},
{"lineNum":" 2087","line":"      for (int i = 0; i < RP::rank; ++i) {"},
{"lineNum":" 2088","line":"        m_offset[i] ="},
{"lineNum":" 2089","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 2090","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 2091","line":"      }"},
{"lineNum":" 2092","line":"    } else {"},
{"lineNum":" 2093","line":"      for (int i = RP::rank - 1; i >= 0; --i) {"},
{"lineNum":" 2094","line":"        m_offset[i] ="},
{"lineNum":" 2095","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 2096","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 2097","line":"      }"},
{"lineNum":" 2098","line":"    }"},
{"lineNum":" 2099","line":""},
{"lineNum":" 2100","line":"    // Check if offset+tiledim in bounds - if not, replace tile dims with the"},
{"lineNum":" 2101","line":"    // partial tile dims"},
{"lineNum":" 2102","line":"    const bool full_tile = check_iteration_bounds(m_tiledims, m_offset);"},
{"lineNum":" 2103","line":""},
{"lineNum":" 2104","line":"    if (RP::inner_direction == Iterate::Left) {"},
{"lineNum":" 2105","line":"      if (full_tile) {"},
{"lineNum":" 2106","line":"        //      #pragma simd"},
{"lineNum":" 2107","line":"        LOOP_3L(index_type, m_tiledims) { apply(LOOP_ARGS_3); }"},
{"lineNum":" 2108","line":"      } else {"},
{"lineNum":" 2109","line":"        //      #pragma simd"},
{"lineNum":" 2110","line":"        LOOP_3L(index_type, m_tiledims) { apply(LOOP_ARGS_3); }"},
{"lineNum":" 2111","line":"      }"},
{"lineNum":" 2112","line":"    }  // end Iterate::Left"},
{"lineNum":" 2113","line":"    else {"},
{"lineNum":" 2114","line":"      if (full_tile) {"},
{"lineNum":" 2115","line":"        //      #pragma simd"},
{"lineNum":" 2116","line":"        LOOP_3R(index_type, m_tiledims) { apply(LOOP_ARGS_3); }"},
{"lineNum":" 2117","line":"      } else {"},
{"lineNum":" 2118","line":"        //      #pragma simd"},
{"lineNum":" 2119","line":"        LOOP_3R(index_type, m_tiledims) { apply(LOOP_ARGS_3); }"},
{"lineNum":" 2120","line":"      }"},
{"lineNum":" 2121","line":"    }  // end Iterate::Right"},
{"lineNum":" 2122","line":""},
{"lineNum":" 2123","line":"  }  // end op() rank == 3"},
{"lineNum":" 2124","line":""},
{"lineNum":" 2125","line":"  template <typename IType>"},
{"lineNum":" 2126","line":"  inline void operator_impl(IType tile_idx, const RankTag<4>) const {"},
{"lineNum":" 2127","line":"    point_type m_offset;"},
{"lineNum":" 2128","line":"    point_type m_tiledims;"},
{"lineNum":" 2129","line":""},
{"lineNum":" 2130","line":"    if (RP::outer_direction == Iterate::Left) {"},
{"lineNum":" 2131","line":"      for (int i = 0; i < RP::rank; ++i) {"},
{"lineNum":" 2132","line":"        m_offset[i] ="},
{"lineNum":" 2133","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 2134","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 2135","line":"      }"},
{"lineNum":" 2136","line":"    } else {"},
{"lineNum":" 2137","line":"      for (int i = RP::rank - 1; i >= 0; --i) {"},
{"lineNum":" 2138","line":"        m_offset[i] ="},
{"lineNum":" 2139","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 2140","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 2141","line":"      }"},
{"lineNum":" 2142","line":"    }"},
{"lineNum":" 2143","line":""},
{"lineNum":" 2144","line":"    // Check if offset+tiledim in bounds - if not, replace tile dims with the"},
{"lineNum":" 2145","line":"    // partial tile dims"},
{"lineNum":" 2146","line":"    const bool full_tile = check_iteration_bounds(m_tiledims, m_offset);"},
{"lineNum":" 2147","line":""},
{"lineNum":" 2148","line":"    if (RP::inner_direction == Iterate::Left) {"},
{"lineNum":" 2149","line":"      if (full_tile) {"},
{"lineNum":" 2150","line":"        //      #pragma simd"},
{"lineNum":" 2151","line":"        LOOP_4L(index_type, m_tiledims) { apply(LOOP_ARGS_4); }"},
{"lineNum":" 2152","line":"      } else {"},
{"lineNum":" 2153","line":"        //      #pragma simd"},
{"lineNum":" 2154","line":"        LOOP_4L(index_type, m_tiledims) { apply(LOOP_ARGS_4); }"},
{"lineNum":" 2155","line":"      }"},
{"lineNum":" 2156","line":"    }  // end Iterate::Left"},
{"lineNum":" 2157","line":"    else {"},
{"lineNum":" 2158","line":"      if (full_tile) {"},
{"lineNum":" 2159","line":"        //      #pragma simd"},
{"lineNum":" 2160","line":"        LOOP_4R(index_type, m_tiledims) { apply(LOOP_ARGS_4); }"},
{"lineNum":" 2161","line":"      } else {"},
{"lineNum":" 2162","line":"        //      #pragma simd"},
{"lineNum":" 2163","line":"        LOOP_4R(index_type, m_tiledims) { apply(LOOP_ARGS_4); }"},
{"lineNum":" 2164","line":"      }"},
{"lineNum":" 2165","line":"    }  // end Iterate::Right"},
{"lineNum":" 2166","line":""},
{"lineNum":" 2167","line":"  }  // end op() rank == 4"},
{"lineNum":" 2168","line":""},
{"lineNum":" 2169","line":"  template <typename IType>"},
{"lineNum":" 2170","line":"  inline void operator_impl(IType tile_idx, const RankTag<5>) const {"},
{"lineNum":" 2171","line":"    point_type m_offset;"},
{"lineNum":" 2172","line":"    point_type m_tiledims;"},
{"lineNum":" 2173","line":""},
{"lineNum":" 2174","line":"    if (RP::outer_direction == Iterate::Left) {"},
{"lineNum":" 2175","line":"      for (int i = 0; i < RP::rank; ++i) {"},
{"lineNum":" 2176","line":"        m_offset[i] ="},
{"lineNum":" 2177","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 2178","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 2179","line":"      }"},
{"lineNum":" 2180","line":"    } else {"},
{"lineNum":" 2181","line":"      for (int i = RP::rank - 1; i >= 0; --i) {"},
{"lineNum":" 2182","line":"        m_offset[i] ="},
{"lineNum":" 2183","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 2184","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 2185","line":"      }"},
{"lineNum":" 2186","line":"    }"},
{"lineNum":" 2187","line":""},
{"lineNum":" 2188","line":"    // Check if offset+tiledim in bounds - if not, replace tile dims with the"},
{"lineNum":" 2189","line":"    // partial tile dims"},
{"lineNum":" 2190","line":"    const bool full_tile = check_iteration_bounds(m_tiledims, m_offset);"},
{"lineNum":" 2191","line":""},
{"lineNum":" 2192","line":"    if (RP::inner_direction == Iterate::Left) {"},
{"lineNum":" 2193","line":"      if (full_tile) {"},
{"lineNum":" 2194","line":"        //      #pragma simd"},
{"lineNum":" 2195","line":"        LOOP_5L(index_type, m_tiledims) { apply(LOOP_ARGS_5); }"},
{"lineNum":" 2196","line":"      } else {"},
{"lineNum":" 2197","line":"        //      #pragma simd"},
{"lineNum":" 2198","line":"        LOOP_5L(index_type, m_tiledims) { apply(LOOP_ARGS_5); }"},
{"lineNum":" 2199","line":"      }"},
{"lineNum":" 2200","line":"    }  // end Iterate::Left"},
{"lineNum":" 2201","line":"    else {"},
{"lineNum":" 2202","line":"      if (full_tile) {"},
{"lineNum":" 2203","line":"        //      #pragma simd"},
{"lineNum":" 2204","line":"        LOOP_5R(index_type, m_tiledims) { apply(LOOP_ARGS_5); }"},
{"lineNum":" 2205","line":"      } else {"},
{"lineNum":" 2206","line":"        //      #pragma simd"},
{"lineNum":" 2207","line":"        LOOP_5R(index_type, m_tiledims) { apply(LOOP_ARGS_5); }"},
{"lineNum":" 2208","line":"      }"},
{"lineNum":" 2209","line":"    }  // end Iterate::Right"},
{"lineNum":" 2210","line":""},
{"lineNum":" 2211","line":"  }  // end op() rank == 5"},
{"lineNum":" 2212","line":""},
{"lineNum":" 2213","line":"  template <typename IType>"},
{"lineNum":" 2214","line":"  inline void operator_impl(IType tile_idx, const RankTag<6>) const {"},
{"lineNum":" 2215","line":"    point_type m_offset;"},
{"lineNum":" 2216","line":"    point_type m_tiledims;"},
{"lineNum":" 2217","line":""},
{"lineNum":" 2218","line":"    if (RP::outer_direction == Iterate::Left) {"},
{"lineNum":" 2219","line":"      for (int i = 0; i < RP::rank; ++i) {"},
{"lineNum":" 2220","line":"        m_offset[i] ="},
{"lineNum":" 2221","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 2222","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 2223","line":"      }"},
{"lineNum":" 2224","line":"    } else {"},
{"lineNum":" 2225","line":"      for (int i = RP::rank - 1; i >= 0; --i) {"},
{"lineNum":" 2226","line":"        m_offset[i] ="},
{"lineNum":" 2227","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 2228","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 2229","line":"      }"},
{"lineNum":" 2230","line":"    }"},
{"lineNum":" 2231","line":""},
{"lineNum":" 2232","line":"    // Check if offset+tiledim in bounds - if not, replace tile dims with the"},
{"lineNum":" 2233","line":"    // partial tile dims"},
{"lineNum":" 2234","line":"    const bool full_tile = check_iteration_bounds(m_tiledims, m_offset);"},
{"lineNum":" 2235","line":""},
{"lineNum":" 2236","line":"    if (RP::inner_direction == Iterate::Left) {"},
{"lineNum":" 2237","line":"      if (full_tile) {"},
{"lineNum":" 2238","line":"        //      #pragma simd"},
{"lineNum":" 2239","line":"        LOOP_6L(index_type, m_tiledims) { apply(LOOP_ARGS_6); }"},
{"lineNum":" 2240","line":"      } else {"},
{"lineNum":" 2241","line":"        //      #pragma simd"},
{"lineNum":" 2242","line":"        LOOP_6L(index_type, m_tiledims) { apply(LOOP_ARGS_6); }"},
{"lineNum":" 2243","line":"      }"},
{"lineNum":" 2244","line":"    }  // end Iterate::Left"},
{"lineNum":" 2245","line":"    else {"},
{"lineNum":" 2246","line":"      if (full_tile) {"},
{"lineNum":" 2247","line":"        //      #pragma simd"},
{"lineNum":" 2248","line":"        LOOP_6R(index_type, m_tiledims) { apply(LOOP_ARGS_6); }"},
{"lineNum":" 2249","line":"      } else {"},
{"lineNum":" 2250","line":"        //      #pragma simd"},
{"lineNum":" 2251","line":"        LOOP_6R(index_type, m_tiledims) { apply(LOOP_ARGS_6); }"},
{"lineNum":" 2252","line":"      }"},
{"lineNum":" 2253","line":"    }  // end Iterate::Right"},
{"lineNum":" 2254","line":""},
{"lineNum":" 2255","line":"  }  // end op() rank == 6"},
{"lineNum":" 2256","line":""},
{"lineNum":" 2257","line":"  template <typename IType>"},
{"lineNum":" 2258","line":"  inline void operator_impl(IType tile_idx, const RankTag<7>) const {"},
{"lineNum":" 2259","line":"    point_type m_offset;"},
{"lineNum":" 2260","line":"    point_type m_tiledims;"},
{"lineNum":" 2261","line":""},
{"lineNum":" 2262","line":"    if (RP::outer_direction == Iterate::Left) {"},
{"lineNum":" 2263","line":"      for (int i = 0; i < RP::rank; ++i) {"},
{"lineNum":" 2264","line":"        m_offset[i] ="},
{"lineNum":" 2265","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 2266","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 2267","line":"      }"},
{"lineNum":" 2268","line":"    } else {"},
{"lineNum":" 2269","line":"      for (int i = RP::rank - 1; i >= 0; --i) {"},
{"lineNum":" 2270","line":"        m_offset[i] ="},
{"lineNum":" 2271","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 2272","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 2273","line":"      }"},
{"lineNum":" 2274","line":"    }"},
{"lineNum":" 2275","line":""},
{"lineNum":" 2276","line":"    // Check if offset+tiledim in bounds - if not, replace tile dims with the"},
{"lineNum":" 2277","line":"    // partial tile dims"},
{"lineNum":" 2278","line":"    const bool full_tile = check_iteration_bounds(m_tiledims, m_offset);"},
{"lineNum":" 2279","line":""},
{"lineNum":" 2280","line":"    if (RP::inner_direction == Iterate::Left) {"},
{"lineNum":" 2281","line":"      if (full_tile) {"},
{"lineNum":" 2282","line":"        //      #pragma simd"},
{"lineNum":" 2283","line":"        LOOP_7L(index_type, m_tiledims) { apply(LOOP_ARGS_7); }"},
{"lineNum":" 2284","line":"      } else {"},
{"lineNum":" 2285","line":"        //      #pragma simd"},
{"lineNum":" 2286","line":"        LOOP_7L(index_type, m_tiledims) { apply(LOOP_ARGS_7); }"},
{"lineNum":" 2287","line":"      }"},
{"lineNum":" 2288","line":"    }  // end Iterate::Left"},
{"lineNum":" 2289","line":"    else {"},
{"lineNum":" 2290","line":"      if (full_tile) {"},
{"lineNum":" 2291","line":"        //      #pragma simd"},
{"lineNum":" 2292","line":"        LOOP_7R(index_type, m_tiledims) { apply(LOOP_ARGS_7); }"},
{"lineNum":" 2293","line":"      } else {"},
{"lineNum":" 2294","line":"        //      #pragma simd"},
{"lineNum":" 2295","line":"        LOOP_7R(index_type, m_tiledims) { apply(LOOP_ARGS_7); }"},
{"lineNum":" 2296","line":"      }"},
{"lineNum":" 2297","line":"    }  // end Iterate::Right"},
{"lineNum":" 2298","line":""},
{"lineNum":" 2299","line":"  }  // end op() rank == 7"},
{"lineNum":" 2300","line":""},
{"lineNum":" 2301","line":"  template <typename IType>"},
{"lineNum":" 2302","line":"  inline void operator_impl(IType tile_idx, const RankTag<8>) const {"},
{"lineNum":" 2303","line":"    point_type m_offset;"},
{"lineNum":" 2304","line":"    point_type m_tiledims;"},
{"lineNum":" 2305","line":""},
{"lineNum":" 2306","line":"    if (RP::outer_direction == Iterate::Left) {"},
{"lineNum":" 2307","line":"      for (int i = 0; i < RP::rank; ++i) {"},
{"lineNum":" 2308","line":"        m_offset[i] ="},
{"lineNum":" 2309","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 2310","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 2311","line":"      }"},
{"lineNum":" 2312","line":"    } else {"},
{"lineNum":" 2313","line":"      for (int i = RP::rank - 1; i >= 0; --i) {"},
{"lineNum":" 2314","line":"        m_offset[i] ="},
{"lineNum":" 2315","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 2316","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 2317","line":"      }"},
{"lineNum":" 2318","line":"    }"},
{"lineNum":" 2319","line":""},
{"lineNum":" 2320","line":"    // Check if offset+tiledim in bounds - if not, replace tile dims with the"},
{"lineNum":" 2321","line":"    // partial tile dims"},
{"lineNum":" 2322","line":"    const bool full_tile = check_iteration_bounds(m_tiledims, m_offset);"},
{"lineNum":" 2323","line":""},
{"lineNum":" 2324","line":"    if (RP::inner_direction == Iterate::Left) {"},
{"lineNum":" 2325","line":"      if (full_tile) {"},
{"lineNum":" 2326","line":"        //      #pragma simd"},
{"lineNum":" 2327","line":"        LOOP_8L(index_type, m_tiledims) { apply(LOOP_ARGS_8); }"},
{"lineNum":" 2328","line":"      } else {"},
{"lineNum":" 2329","line":"        //      #pragma simd"},
{"lineNum":" 2330","line":"        LOOP_8L(index_type, m_tiledims) { apply(LOOP_ARGS_8); }"},
{"lineNum":" 2331","line":"      }"},
{"lineNum":" 2332","line":"    }  // end Iterate::Left"},
{"lineNum":" 2333","line":"    else {"},
{"lineNum":" 2334","line":"      if (full_tile) {"},
{"lineNum":" 2335","line":"        //      #pragma simd"},
{"lineNum":" 2336","line":"        LOOP_8R(index_type, m_tiledims) { apply(LOOP_ARGS_8); }"},
{"lineNum":" 2337","line":"      } else {"},
{"lineNum":" 2338","line":"        //      #pragma simd"},
{"lineNum":" 2339","line":"        LOOP_8R(index_type, m_tiledims) { apply(LOOP_ARGS_8); }"},
{"lineNum":" 2340","line":"      }"},
{"lineNum":" 2341","line":"    }  // end Iterate::Right"},
{"lineNum":" 2342","line":""},
{"lineNum":" 2343","line":"  }  // end op() rank == 8"},
{"lineNum":" 2344","line":"#endif"},
{"lineNum":" 2345","line":""},
{"lineNum":" 2346","line":"  template <typename... Args>"},
{"lineNum":" 2347","line":"  typename std::enable_if<(sizeof...(Args) == RP::rank &&"},
{"lineNum":" 2348","line":"                           std::is_same<Tag, void>::value),"},
{"lineNum":" 2349","line":"                          void>::type"},
{"lineNum":" 2350","line":"  apply(Args&&... args) const {"},
{"lineNum":" 2351","line":"    m_func(args..., m_v);"},
{"lineNum":" 2352","line":"  }"},
{"lineNum":" 2353","line":""},
{"lineNum":" 2354","line":"  template <typename... Args>"},
{"lineNum":" 2355","line":"  typename std::enable_if<(sizeof...(Args) == RP::rank &&"},
{"lineNum":" 2356","line":"                           !std::is_same<Tag, void>::value),"},
{"lineNum":" 2357","line":"                          void>::type"},
{"lineNum":" 2358","line":"  apply(Args&&... args) const {"},
{"lineNum":" 2359","line":"    m_func(m_tag, args..., m_v);"},
{"lineNum":" 2360","line":"  }"},
{"lineNum":" 2361","line":""},
{"lineNum":" 2362","line":"  RP const& m_rp;"},
{"lineNum":" 2363","line":"  Functor const& m_func;"},
{"lineNum":" 2364","line":"  value_type& m_v;"},
{"lineNum":" 2365","line":"  typename std::conditional<std::is_same<Tag, void>::value, int, Tag>::type"},
{"lineNum":" 2366","line":"      m_tag;"},
{"lineNum":" 2367","line":"};"},
{"lineNum":" 2368","line":""},
{"lineNum":" 2369","line":"// For ParallelReduce"},
{"lineNum":" 2370","line":"// Extra specialization for array reductions"},
{"lineNum":" 2371","line":"// ValueType[]: For array reductions"},
{"lineNum":" 2372","line":"template <typename RP, typename Functor, typename Tag, typename ValueType>"},
{"lineNum":" 2373","line":"struct HostIterateTile<"},
{"lineNum":" 2374","line":"    RP, Functor, Tag, ValueType,"},
{"lineNum":" 2375","line":"    typename std::enable_if<!is_void_type<ValueType>::value &&"},
{"lineNum":" 2376","line":"                            is_type_array<ValueType>::value>::type> {"},
{"lineNum":" 2377","line":"  using index_type = typename RP::index_type;"},
{"lineNum":" 2378","line":"  using point_type = typename RP::point_type;"},
{"lineNum":" 2379","line":""},
{"lineNum":" 2380","line":"  using value_type ="},
{"lineNum":" 2381","line":"      typename is_type_array<ValueType>::value_type;  // strip away the"},
{"lineNum":" 2382","line":"                                                      // \'array-ness\' [], only"},
{"lineNum":" 2383","line":"                                                      // underlying type remains"},
{"lineNum":" 2384","line":""},
{"lineNum":" 2385","line":"  inline HostIterateTile("},
{"lineNum":" 2386","line":"      RP const& rp, Functor const& func,"},
{"lineNum":" 2387","line":"      value_type* v)  // v should be an array; treat as pointer for"},
{"lineNum":" 2388","line":"                      // compatibility since size is not known nor needed here"},
{"lineNum":" 2389","line":"      : m_rp(rp)      // Cuda 7.0 does not like braces..."},
{"lineNum":" 2390","line":"        ,"},
{"lineNum":" 2391","line":"        m_func(func),"},
{"lineNum":" 2392","line":"        m_v(v)  // use with non-void ValueType struct"},
{"lineNum":" 2393","line":"  {}"},
{"lineNum":" 2394","line":""},
{"lineNum":" 2395","line":"  inline bool check_iteration_bounds(point_type& partial_tile,"},
{"lineNum":" 2396","line":"                                     point_type& offset) const {"},
{"lineNum":" 2397","line":"    bool is_full_tile = true;"},
{"lineNum":" 2398","line":""},
{"lineNum":" 2399","line":"    for (int i = 0; i < RP::rank; ++i) {"},
{"lineNum":" 2400","line":"      if ((offset[i] + m_rp.m_tile[i]) <= m_rp.m_upper[i]) {"},
{"lineNum":" 2401","line":"        partial_tile[i] = m_rp.m_tile[i];"},
{"lineNum":" 2402","line":"      } else {"},
{"lineNum":" 2403","line":"        is_full_tile = false;"},
{"lineNum":" 2404","line":"        partial_tile[i] ="},
{"lineNum":" 2405","line":"            (m_rp.m_upper[i] - 1 - offset[i]) == 0"},
{"lineNum":" 2406","line":"                ? 1"},
{"lineNum":" 2407","line":"                : (m_rp.m_upper[i] - m_rp.m_tile[i]) > 0"},
{"lineNum":" 2408","line":"                      ? (m_rp.m_upper[i] - offset[i])"},
{"lineNum":" 2409","line":"                      : (m_rp.m_upper[i] -"},
{"lineNum":" 2410","line":"                         m_rp.m_lower[i]);  // when single tile encloses range"},
{"lineNum":" 2411","line":"      }"},
{"lineNum":" 2412","line":"    }"},
{"lineNum":" 2413","line":""},
{"lineNum":" 2414","line":"    return is_full_tile;"},
{"lineNum":" 2415","line":"  }  // end check bounds"},
{"lineNum":" 2416","line":""},
{"lineNum":" 2417","line":"  template <int Rank>"},
{"lineNum":" 2418","line":"  struct RankTag {"},
{"lineNum":" 2419","line":"    using type = RankTag<Rank>;"},
{"lineNum":" 2420","line":"    enum { value = (int)Rank };"},
{"lineNum":" 2421","line":"  };"},
{"lineNum":" 2422","line":""},
{"lineNum":" 2423","line":"#if KOKKOS_ENABLE_NEW_LOOP_MACROS"},
{"lineNum":" 2424","line":"  template <typename IType>"},
{"lineNum":" 2425","line":"  inline void operator()(IType tile_idx) const {"},
{"lineNum":" 2426","line":"    point_type m_offset;"},
{"lineNum":" 2427","line":"    point_type m_tiledims;"},
{"lineNum":" 2428","line":""},
{"lineNum":" 2429","line":"    if (RP::outer_direction == Iterate::Left) {"},
{"lineNum":" 2430","line":"      for (int i = 0; i < RP::rank; ++i) {"},
{"lineNum":" 2431","line":"        m_offset[i] ="},
{"lineNum":" 2432","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 2433","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 2434","line":"      }"},
{"lineNum":" 2435","line":"    } else {"},
{"lineNum":" 2436","line":"      for (int i = RP::rank - 1; i >= 0; --i) {"},
{"lineNum":" 2437","line":"        m_offset[i] ="},
{"lineNum":" 2438","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 2439","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 2440","line":"      }"},
{"lineNum":" 2441","line":"    }"},
{"lineNum":" 2442","line":""},
{"lineNum":" 2443","line":"    // Check if offset+tiledim in bounds - if not, replace tile dims with the"},
{"lineNum":" 2444","line":"    // partial tile dims"},
{"lineNum":" 2445","line":"    const bool full_tile = check_iteration_bounds(m_tiledims, m_offset);"},
{"lineNum":" 2446","line":""},
{"lineNum":" 2447","line":"    Tile_Loop_Type<RP::rank, (RP::inner_direction == Iterate::Left), index_type,"},
{"lineNum":" 2448","line":"                   Tag>::apply(m_v, m_func, full_tile, m_offset, m_rp.m_tile,"},
{"lineNum":" 2449","line":"                               m_tiledims);"},
{"lineNum":" 2450","line":"  }"},
{"lineNum":" 2451","line":""},
{"lineNum":" 2452","line":"#else"},
{"lineNum":" 2453","line":"  template <typename IType>"},
{"lineNum":" 2454","line":"  inline void operator()(IType tile_idx) const {"},
{"lineNum":" 2455","line":"    operator_impl(tile_idx, RankTag<RP::rank>());"},
{"lineNum":" 2456","line":"  }"},
{"lineNum":" 2457","line":"  // added due to compiler error when using sfinae to choose operator based on"},
{"lineNum":" 2458","line":"  // rank"},
{"lineNum":" 2459","line":""},
{"lineNum":" 2460","line":"  template <typename IType>"},
{"lineNum":" 2461","line":"  inline void operator_impl(IType tile_idx, const RankTag<2>) const {"},
{"lineNum":" 2462","line":"    point_type m_offset;"},
{"lineNum":" 2463","line":"    point_type m_tiledims;"},
{"lineNum":" 2464","line":""},
{"lineNum":" 2465","line":"    if (RP::outer_direction == Iterate::Left) {"},
{"lineNum":" 2466","line":"      for (int i = 0; i < RP::rank; ++i) {"},
{"lineNum":" 2467","line":"        m_offset[i] ="},
{"lineNum":" 2468","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 2469","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 2470","line":"      }"},
{"lineNum":" 2471","line":"    } else {"},
{"lineNum":" 2472","line":"      for (int i = RP::rank - 1; i >= 0; --i) {"},
{"lineNum":" 2473","line":"        m_offset[i] ="},
{"lineNum":" 2474","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 2475","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 2476","line":"      }"},
{"lineNum":" 2477","line":"    }"},
{"lineNum":" 2478","line":""},
{"lineNum":" 2479","line":"    // Check if offset+tiledim in bounds - if not, replace tile dims with the"},
{"lineNum":" 2480","line":"    // partial tile dims"},
{"lineNum":" 2481","line":"    const bool full_tile = check_iteration_bounds(m_tiledims, m_offset);"},
{"lineNum":" 2482","line":""},
{"lineNum":" 2483","line":"    if (RP::inner_direction == Iterate::Left) {"},
{"lineNum":" 2484","line":"      if (full_tile) {"},
{"lineNum":" 2485","line":"        //      #pragma simd"},
{"lineNum":" 2486","line":"        LOOP_2L(index_type, m_tiledims) { apply(LOOP_ARGS_2); }"},
{"lineNum":" 2487","line":"      } else {"},
{"lineNum":" 2488","line":"        //      #pragma simd"},
{"lineNum":" 2489","line":"        LOOP_2L(index_type, m_tiledims) { apply(LOOP_ARGS_2); }"},
{"lineNum":" 2490","line":"      }"},
{"lineNum":" 2491","line":"    }  // end Iterate::Left"},
{"lineNum":" 2492","line":"    else {"},
{"lineNum":" 2493","line":"      if (full_tile) {"},
{"lineNum":" 2494","line":"        //      #pragma simd"},
{"lineNum":" 2495","line":"        LOOP_2R(index_type, m_tiledims) { apply(LOOP_ARGS_2); }"},
{"lineNum":" 2496","line":"      } else {"},
{"lineNum":" 2497","line":"        //      #pragma simd"},
{"lineNum":" 2498","line":"        LOOP_2R(index_type, m_tiledims) { apply(LOOP_ARGS_2); }"},
{"lineNum":" 2499","line":"      }"},
{"lineNum":" 2500","line":"    }  // end Iterate::Right"},
{"lineNum":" 2501","line":""},
{"lineNum":" 2502","line":"  }  // end op() rank == 2"},
{"lineNum":" 2503","line":""},
{"lineNum":" 2504","line":"  template <typename IType>"},
{"lineNum":" 2505","line":"  inline void operator_impl(IType tile_idx, const RankTag<3>) const {"},
{"lineNum":" 2506","line":"    point_type m_offset;"},
{"lineNum":" 2507","line":"    point_type m_tiledims;"},
{"lineNum":" 2508","line":""},
{"lineNum":" 2509","line":"    if (RP::outer_direction == Iterate::Left) {"},
{"lineNum":" 2510","line":"      for (int i = 0; i < RP::rank; ++i) {"},
{"lineNum":" 2511","line":"        m_offset[i] ="},
{"lineNum":" 2512","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 2513","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 2514","line":"      }"},
{"lineNum":" 2515","line":"    } else {"},
{"lineNum":" 2516","line":"      for (int i = RP::rank - 1; i >= 0; --i) {"},
{"lineNum":" 2517","line":"        m_offset[i] ="},
{"lineNum":" 2518","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 2519","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 2520","line":"      }"},
{"lineNum":" 2521","line":"    }"},
{"lineNum":" 2522","line":""},
{"lineNum":" 2523","line":"    // Check if offset+tiledim in bounds - if not, replace tile dims with the"},
{"lineNum":" 2524","line":"    // partial tile dims"},
{"lineNum":" 2525","line":"    const bool full_tile = check_iteration_bounds(m_tiledims, m_offset);"},
{"lineNum":" 2526","line":""},
{"lineNum":" 2527","line":"    if (RP::inner_direction == Iterate::Left) {"},
{"lineNum":" 2528","line":"      if (full_tile) {"},
{"lineNum":" 2529","line":"        //      #pragma simd"},
{"lineNum":" 2530","line":"        LOOP_3L(index_type, m_tiledims) { apply(LOOP_ARGS_3); }"},
{"lineNum":" 2531","line":"      } else {"},
{"lineNum":" 2532","line":"        //      #pragma simd"},
{"lineNum":" 2533","line":"        LOOP_3L(index_type, m_tiledims) { apply(LOOP_ARGS_3); }"},
{"lineNum":" 2534","line":"      }"},
{"lineNum":" 2535","line":"    }  // end Iterate::Left"},
{"lineNum":" 2536","line":"    else {"},
{"lineNum":" 2537","line":"      if (full_tile) {"},
{"lineNum":" 2538","line":"        //      #pragma simd"},
{"lineNum":" 2539","line":"        LOOP_3R(index_type, m_tiledims) { apply(LOOP_ARGS_3); }"},
{"lineNum":" 2540","line":"      } else {"},
{"lineNum":" 2541","line":"        //      #pragma simd"},
{"lineNum":" 2542","line":"        LOOP_3R(index_type, m_tiledims) { apply(LOOP_ARGS_3); }"},
{"lineNum":" 2543","line":"      }"},
{"lineNum":" 2544","line":"    }  // end Iterate::Right"},
{"lineNum":" 2545","line":""},
{"lineNum":" 2546","line":"  }  // end op() rank == 3"},
{"lineNum":" 2547","line":""},
{"lineNum":" 2548","line":"  template <typename IType>"},
{"lineNum":" 2549","line":"  inline void operator_impl(IType tile_idx, const RankTag<4>) const {"},
{"lineNum":" 2550","line":"    point_type m_offset;"},
{"lineNum":" 2551","line":"    point_type m_tiledims;"},
{"lineNum":" 2552","line":""},
{"lineNum":" 2553","line":"    if (RP::outer_direction == Iterate::Left) {"},
{"lineNum":" 2554","line":"      for (int i = 0; i < RP::rank; ++i) {"},
{"lineNum":" 2555","line":"        m_offset[i] ="},
{"lineNum":" 2556","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 2557","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 2558","line":"      }"},
{"lineNum":" 2559","line":"    } else {"},
{"lineNum":" 2560","line":"      for (int i = RP::rank - 1; i >= 0; --i) {"},
{"lineNum":" 2561","line":"        m_offset[i] ="},
{"lineNum":" 2562","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 2563","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 2564","line":"      }"},
{"lineNum":" 2565","line":"    }"},
{"lineNum":" 2566","line":""},
{"lineNum":" 2567","line":"    // Check if offset+tiledim in bounds - if not, replace tile dims with the"},
{"lineNum":" 2568","line":"    // partial tile dims"},
{"lineNum":" 2569","line":"    const bool full_tile = check_iteration_bounds(m_tiledims, m_offset);"},
{"lineNum":" 2570","line":""},
{"lineNum":" 2571","line":"    if (RP::inner_direction == Iterate::Left) {"},
{"lineNum":" 2572","line":"      if (full_tile) {"},
{"lineNum":" 2573","line":"        //      #pragma simd"},
{"lineNum":" 2574","line":"        LOOP_4L(index_type, m_tiledims) { apply(LOOP_ARGS_4); }"},
{"lineNum":" 2575","line":"      } else {"},
{"lineNum":" 2576","line":"        //      #pragma simd"},
{"lineNum":" 2577","line":"        LOOP_4L(index_type, m_tiledims) { apply(LOOP_ARGS_4); }"},
{"lineNum":" 2578","line":"      }"},
{"lineNum":" 2579","line":"    }  // end Iterate::Left"},
{"lineNum":" 2580","line":"    else {"},
{"lineNum":" 2581","line":"      if (full_tile) {"},
{"lineNum":" 2582","line":"        //      #pragma simd"},
{"lineNum":" 2583","line":"        LOOP_4R(index_type, m_tiledims) { apply(LOOP_ARGS_4); }"},
{"lineNum":" 2584","line":"      } else {"},
{"lineNum":" 2585","line":"        //      #pragma simd"},
{"lineNum":" 2586","line":"        LOOP_4R(index_type, m_tiledims) { apply(LOOP_ARGS_4); }"},
{"lineNum":" 2587","line":"      }"},
{"lineNum":" 2588","line":"    }  // end Iterate::Right"},
{"lineNum":" 2589","line":""},
{"lineNum":" 2590","line":"  }  // end op() rank == 4"},
{"lineNum":" 2591","line":""},
{"lineNum":" 2592","line":"  template <typename IType>"},
{"lineNum":" 2593","line":"  inline void operator_impl(IType tile_idx, const RankTag<5>) const {"},
{"lineNum":" 2594","line":"    point_type m_offset;"},
{"lineNum":" 2595","line":"    point_type m_tiledims;"},
{"lineNum":" 2596","line":""},
{"lineNum":" 2597","line":"    if (RP::outer_direction == Iterate::Left) {"},
{"lineNum":" 2598","line":"      for (int i = 0; i < RP::rank; ++i) {"},
{"lineNum":" 2599","line":"        m_offset[i] ="},
{"lineNum":" 2600","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 2601","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 2602","line":"      }"},
{"lineNum":" 2603","line":"    } else {"},
{"lineNum":" 2604","line":"      for (int i = RP::rank - 1; i >= 0; --i) {"},
{"lineNum":" 2605","line":"        m_offset[i] ="},
{"lineNum":" 2606","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 2607","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 2608","line":"      }"},
{"lineNum":" 2609","line":"    }"},
{"lineNum":" 2610","line":""},
{"lineNum":" 2611","line":"    // Check if offset+tiledim in bounds - if not, replace tile dims with the"},
{"lineNum":" 2612","line":"    // partial tile dims"},
{"lineNum":" 2613","line":"    const bool full_tile = check_iteration_bounds(m_tiledims, m_offset);"},
{"lineNum":" 2614","line":""},
{"lineNum":" 2615","line":"    if (RP::inner_direction == Iterate::Left) {"},
{"lineNum":" 2616","line":"      if (full_tile) {"},
{"lineNum":" 2617","line":"        //      #pragma simd"},
{"lineNum":" 2618","line":"        LOOP_5L(index_type, m_tiledims) { apply(LOOP_ARGS_5); }"},
{"lineNum":" 2619","line":"      } else {"},
{"lineNum":" 2620","line":"        //      #pragma simd"},
{"lineNum":" 2621","line":"        LOOP_5L(index_type, m_tiledims) { apply(LOOP_ARGS_5); }"},
{"lineNum":" 2622","line":"      }"},
{"lineNum":" 2623","line":"    }  // end Iterate::Left"},
{"lineNum":" 2624","line":"    else {"},
{"lineNum":" 2625","line":"      if (full_tile) {"},
{"lineNum":" 2626","line":"        //      #pragma simd"},
{"lineNum":" 2627","line":"        LOOP_5R(index_type, m_tiledims) { apply(LOOP_ARGS_5); }"},
{"lineNum":" 2628","line":"      } else {"},
{"lineNum":" 2629","line":"        //      #pragma simd"},
{"lineNum":" 2630","line":"        LOOP_5R(index_type, m_tiledims) { apply(LOOP_ARGS_5); }"},
{"lineNum":" 2631","line":"      }"},
{"lineNum":" 2632","line":"    }  // end Iterate::Right"},
{"lineNum":" 2633","line":""},
{"lineNum":" 2634","line":"  }  // end op() rank == 5"},
{"lineNum":" 2635","line":""},
{"lineNum":" 2636","line":"  template <typename IType>"},
{"lineNum":" 2637","line":"  inline void operator_impl(IType tile_idx, const RankTag<6>) const {"},
{"lineNum":" 2638","line":"    point_type m_offset;"},
{"lineNum":" 2639","line":"    point_type m_tiledims;"},
{"lineNum":" 2640","line":""},
{"lineNum":" 2641","line":"    if (RP::outer_direction == Iterate::Left) {"},
{"lineNum":" 2642","line":"      for (int i = 0; i < RP::rank; ++i) {"},
{"lineNum":" 2643","line":"        m_offset[i] ="},
{"lineNum":" 2644","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 2645","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 2646","line":"      }"},
{"lineNum":" 2647","line":"    } else {"},
{"lineNum":" 2648","line":"      for (int i = RP::rank - 1; i >= 0; --i) {"},
{"lineNum":" 2649","line":"        m_offset[i] ="},
{"lineNum":" 2650","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 2651","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 2652","line":"      }"},
{"lineNum":" 2653","line":"    }"},
{"lineNum":" 2654","line":""},
{"lineNum":" 2655","line":"    // Check if offset+tiledim in bounds - if not, replace tile dims with the"},
{"lineNum":" 2656","line":"    // partial tile dims"},
{"lineNum":" 2657","line":"    const bool full_tile = check_iteration_bounds(m_tiledims, m_offset);"},
{"lineNum":" 2658","line":""},
{"lineNum":" 2659","line":"    if (RP::inner_direction == Iterate::Left) {"},
{"lineNum":" 2660","line":"      if (full_tile) {"},
{"lineNum":" 2661","line":"        //      #pragma simd"},
{"lineNum":" 2662","line":"        LOOP_6L(index_type, m_tiledims) { apply(LOOP_ARGS_6); }"},
{"lineNum":" 2663","line":"      } else {"},
{"lineNum":" 2664","line":"        //      #pragma simd"},
{"lineNum":" 2665","line":"        LOOP_6L(index_type, m_tiledims) { apply(LOOP_ARGS_6); }"},
{"lineNum":" 2666","line":"      }"},
{"lineNum":" 2667","line":"    }  // end Iterate::Left"},
{"lineNum":" 2668","line":"    else {"},
{"lineNum":" 2669","line":"      if (full_tile) {"},
{"lineNum":" 2670","line":"        //      #pragma simd"},
{"lineNum":" 2671","line":"        LOOP_6R(index_type, m_tiledims) { apply(LOOP_ARGS_6); }"},
{"lineNum":" 2672","line":"      } else {"},
{"lineNum":" 2673","line":"        //      #pragma simd"},
{"lineNum":" 2674","line":"        LOOP_6R(index_type, m_tiledims) { apply(LOOP_ARGS_6); }"},
{"lineNum":" 2675","line":"      }"},
{"lineNum":" 2676","line":"    }  // end Iterate::Right"},
{"lineNum":" 2677","line":""},
{"lineNum":" 2678","line":"  }  // end op() rank == 6"},
{"lineNum":" 2679","line":""},
{"lineNum":" 2680","line":"  template <typename IType>"},
{"lineNum":" 2681","line":"  inline void operator_impl(IType tile_idx, const RankTag<7>) const {"},
{"lineNum":" 2682","line":"    point_type m_offset;"},
{"lineNum":" 2683","line":"    point_type m_tiledims;"},
{"lineNum":" 2684","line":""},
{"lineNum":" 2685","line":"    if (RP::outer_direction == Iterate::Left) {"},
{"lineNum":" 2686","line":"      for (int i = 0; i < RP::rank; ++i) {"},
{"lineNum":" 2687","line":"        m_offset[i] ="},
{"lineNum":" 2688","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 2689","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 2690","line":"      }"},
{"lineNum":" 2691","line":"    } else {"},
{"lineNum":" 2692","line":"      for (int i = RP::rank - 1; i >= 0; --i) {"},
{"lineNum":" 2693","line":"        m_offset[i] ="},
{"lineNum":" 2694","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 2695","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 2696","line":"      }"},
{"lineNum":" 2697","line":"    }"},
{"lineNum":" 2698","line":""},
{"lineNum":" 2699","line":"    // Check if offset+tiledim in bounds - if not, replace tile dims with the"},
{"lineNum":" 2700","line":"    // partial tile dims"},
{"lineNum":" 2701","line":"    const bool full_tile = check_iteration_bounds(m_tiledims, m_offset);"},
{"lineNum":" 2702","line":""},
{"lineNum":" 2703","line":"    if (RP::inner_direction == Iterate::Left) {"},
{"lineNum":" 2704","line":"      if (full_tile) {"},
{"lineNum":" 2705","line":"        //      #pragma simd"},
{"lineNum":" 2706","line":"        LOOP_7L(index_type, m_tiledims) { apply(LOOP_ARGS_7); }"},
{"lineNum":" 2707","line":"      } else {"},
{"lineNum":" 2708","line":"        //      #pragma simd"},
{"lineNum":" 2709","line":"        LOOP_7L(index_type, m_tiledims) { apply(LOOP_ARGS_7); }"},
{"lineNum":" 2710","line":"      }"},
{"lineNum":" 2711","line":"    }  // end Iterate::Left"},
{"lineNum":" 2712","line":"    else {"},
{"lineNum":" 2713","line":"      if (full_tile) {"},
{"lineNum":" 2714","line":"        //      #pragma simd"},
{"lineNum":" 2715","line":"        LOOP_7R(index_type, m_tiledims) { apply(LOOP_ARGS_7); }"},
{"lineNum":" 2716","line":"      } else {"},
{"lineNum":" 2717","line":"        //      #pragma simd"},
{"lineNum":" 2718","line":"        LOOP_7R(index_type, m_tiledims) { apply(LOOP_ARGS_7); }"},
{"lineNum":" 2719","line":"      }"},
{"lineNum":" 2720","line":"    }  // end Iterate::Right"},
{"lineNum":" 2721","line":""},
{"lineNum":" 2722","line":"  }  // end op() rank == 7"},
{"lineNum":" 2723","line":""},
{"lineNum":" 2724","line":"  template <typename IType>"},
{"lineNum":" 2725","line":"  inline void operator_impl(IType tile_idx, const RankTag<8>) const {"},
{"lineNum":" 2726","line":"    point_type m_offset;"},
{"lineNum":" 2727","line":"    point_type m_tiledims;"},
{"lineNum":" 2728","line":""},
{"lineNum":" 2729","line":"    if (RP::outer_direction == Iterate::Left) {"},
{"lineNum":" 2730","line":"      for (int i = 0; i < RP::rank; ++i) {"},
{"lineNum":" 2731","line":"        m_offset[i] ="},
{"lineNum":" 2732","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 2733","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 2734","line":"      }"},
{"lineNum":" 2735","line":"    } else {"},
{"lineNum":" 2736","line":"      for (int i = RP::rank - 1; i >= 0; --i) {"},
{"lineNum":" 2737","line":"        m_offset[i] ="},
{"lineNum":" 2738","line":"            (tile_idx % m_rp.m_tile_end[i]) * m_rp.m_tile[i] + m_rp.m_lower[i];"},
{"lineNum":" 2739","line":"        tile_idx /= m_rp.m_tile_end[i];"},
{"lineNum":" 2740","line":"      }"},
{"lineNum":" 2741","line":"    }"},
{"lineNum":" 2742","line":""},
{"lineNum":" 2743","line":"    // Check if offset+tiledim in bounds - if not, replace tile dims with the"},
{"lineNum":" 2744","line":"    // partial tile dims"},
{"lineNum":" 2745","line":"    const bool full_tile = check_iteration_bounds(m_tiledims, m_offset);"},
{"lineNum":" 2746","line":""},
{"lineNum":" 2747","line":"    if (RP::inner_direction == Iterate::Left) {"},
{"lineNum":" 2748","line":"      if (full_tile) {"},
{"lineNum":" 2749","line":"        //      #pragma simd"},
{"lineNum":" 2750","line":"        LOOP_8L(index_type, m_tiledims) { apply(LOOP_ARGS_8); }"},
{"lineNum":" 2751","line":"      } else {"},
{"lineNum":" 2752","line":"        //      #pragma simd"},
{"lineNum":" 2753","line":"        LOOP_8L(index_type, m_tiledims) { apply(LOOP_ARGS_8); }"},
{"lineNum":" 2754","line":"      }"},
{"lineNum":" 2755","line":"    }  // end Iterate::Left"},
{"lineNum":" 2756","line":"    else {"},
{"lineNum":" 2757","line":"      if (full_tile) {"},
{"lineNum":" 2758","line":"        //      #pragma simd"},
{"lineNum":" 2759","line":"        LOOP_8R(index_type, m_tiledims) { apply(LOOP_ARGS_8); }"},
{"lineNum":" 2760","line":"      } else {"},
{"lineNum":" 2761","line":"        //      #pragma simd"},
{"lineNum":" 2762","line":"        LOOP_8R(index_type, m_tiledims) { apply(LOOP_ARGS_8); }"},
{"lineNum":" 2763","line":"      }"},
{"lineNum":" 2764","line":"    }  // end Iterate::Right"},
{"lineNum":" 2765","line":""},
{"lineNum":" 2766","line":"  }  // end op() rank == 8"},
{"lineNum":" 2767","line":"#endif"},
{"lineNum":" 2768","line":""},
{"lineNum":" 2769","line":"  template <typename... Args>"},
{"lineNum":" 2770","line":"  typename std::enable_if<(sizeof...(Args) == RP::rank &&"},
{"lineNum":" 2771","line":"                           std::is_same<Tag, void>::value),"},
{"lineNum":" 2772","line":"                          void>::type"},
{"lineNum":" 2773","line":"  apply(Args&&... args) const {"},
{"lineNum":" 2774","line":"    m_func(args..., m_v);"},
{"lineNum":" 2775","line":"  }"},
{"lineNum":" 2776","line":""},
{"lineNum":" 2777","line":"  template <typename... Args>"},
{"lineNum":" 2778","line":"  typename std::enable_if<(sizeof...(Args) == RP::rank &&"},
{"lineNum":" 2779","line":"                           !std::is_same<Tag, void>::value),"},
{"lineNum":" 2780","line":"                          void>::type"},
{"lineNum":" 2781","line":"  apply(Args&&... args) const {"},
{"lineNum":" 2782","line":"    m_func(m_tag, args..., m_v);"},
{"lineNum":" 2783","line":"  }"},
{"lineNum":" 2784","line":""},
{"lineNum":" 2785","line":"  RP const& m_rp;"},
{"lineNum":" 2786","line":"  Functor const& m_func;"},
{"lineNum":" 2787","line":"  value_type* m_v;"},
{"lineNum":" 2788","line":"  typename std::conditional<std::is_same<Tag, void>::value, int, Tag>::type"},
{"lineNum":" 2789","line":"      m_tag;"},
{"lineNum":" 2790","line":"};"},
{"lineNum":" 2791","line":""},
{"lineNum":" 2792","line":"// ------------------------------------------------------------------ //"},
{"lineNum":" 2793","line":""},
{"lineNum":" 2794","line":"#undef KOKKOS_ENABLE_NEW_LOOP_MACROS"},
{"lineNum":" 2795","line":""},
{"lineNum":" 2796","line":"}  // namespace Impl"},
{"lineNum":" 2797","line":"}  // namespace Kokkos"},
{"lineNum":" 2798","line":""},
{"lineNum":" 2799","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 22, "covered" : 0,};
var merged_data = [];
