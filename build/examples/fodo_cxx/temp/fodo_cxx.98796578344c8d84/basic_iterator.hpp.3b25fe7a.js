var data = {lines:[
{"lineNum":"    1","line":"/*============================================================================="},
{"lineNum":"    2","line":"    Copyright (c) 2009 Christopher Schmidt"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"    Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    5","line":"    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    6","line":"==============================================================================*/"},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"#ifndef BOOST_FUSION_ITERATOR_BASIC_ITERATOR_HPP"},
{"lineNum":"    9","line":"#define BOOST_FUSION_ITERATOR_BASIC_ITERATOR_HPP"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"#include <boost/fusion/support/config.hpp>"},
{"lineNum":"   12","line":"#include <boost/fusion/iterator/iterator_facade.hpp>"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"#include <boost/mpl/and.hpp>"},
{"lineNum":"   15","line":"#include <boost/mpl/equal_to.hpp>"},
{"lineNum":"   16","line":"#include <boost/mpl/minus.hpp>"},
{"lineNum":"   17","line":"#include <boost/mpl/int.hpp>"},
{"lineNum":"   18","line":"#include <boost/type_traits/is_same.hpp>"},
{"lineNum":"   19","line":"#include <boost/type_traits/remove_const.hpp>"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"namespace boost { namespace fusion"},
{"lineNum":"   22","line":"{"},
{"lineNum":"   23","line":"    namespace extension"},
{"lineNum":"   24","line":"    {"},
{"lineNum":"   25","line":"        template <typename>"},
{"lineNum":"   26","line":"        struct value_of_impl;"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"        template <typename>"},
{"lineNum":"   29","line":"        struct deref_impl;"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"        template <typename>"},
{"lineNum":"   32","line":"        struct value_of_data_impl;"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"        template <typename>"},
{"lineNum":"   35","line":"        struct key_of_impl;"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"        template <typename>"},
{"lineNum":"   38","line":"        struct deref_data_impl;"},
{"lineNum":"   39","line":"    }"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"    template<typename Tag, typename Category, typename Seq, int Index>"},
{"lineNum":"   42","line":"    struct basic_iterator"},
{"lineNum":"   43","line":"      : iterator_facade<basic_iterator<Tag, Category, Seq, Index>, Category>"},
{"lineNum":"   44","line":"    {"},
{"lineNum":"   45","line":"        typedef mpl::int_<Index> index;"},
{"lineNum":"   46","line":"        typedef Seq seq_type;"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"        template <typename It>"},
{"lineNum":"   49","line":"        struct value_of"},
{"lineNum":"   50","line":"          : extension::value_of_impl<Tag>::template apply<It>"},
{"lineNum":"   51","line":"        {};"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"        template <typename It>"},
{"lineNum":"   54","line":"        struct deref"},
{"lineNum":"   55","line":"          : extension::deref_impl<Tag>::template apply<It>"},
{"lineNum":"   56","line":"        {};"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"        template <typename It>"},
{"lineNum":"   59","line":"        struct value_of_data"},
{"lineNum":"   60","line":"          : extension::value_of_data_impl<Tag>::template apply<It>"},
{"lineNum":"   61","line":"        {};"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"        template <typename It>"},
{"lineNum":"   64","line":"        struct key_of"},
{"lineNum":"   65","line":"          : extension::key_of_impl<Tag>::template apply<It>"},
{"lineNum":"   66","line":"        {};"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"        template <typename It>"},
{"lineNum":"   69","line":"        struct deref_data"},
{"lineNum":"   70","line":"          : extension::deref_data_impl<Tag>::template apply<It>"},
{"lineNum":"   71","line":"        {};"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"        template <typename It, typename N>"},
{"lineNum":"   74","line":"        struct advance"},
{"lineNum":"   75","line":"        {"},
{"lineNum":"   76","line":"            typedef"},
{"lineNum":"   77","line":"                basic_iterator<Tag, Category, Seq, Index + N::value>"},
{"lineNum":"   78","line":"            type;"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"            BOOST_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"   81","line":"            static type"},
{"lineNum":"   82","line":"            call(It const& it)"},
{"lineNum":"   83","line":"            {"},
{"lineNum":"   84","line":"                return type(*it.seq,0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   85","line":"            }"},
{"lineNum":"   86","line":"        };"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"        template <typename It>"},
{"lineNum":"   89","line":"        struct next"},
{"lineNum":"   90","line":"          : advance<It, mpl::int_<1> >"},
{"lineNum":"   91","line":"        {};"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"        template <typename It>"},
{"lineNum":"   94","line":"        struct prior"},
{"lineNum":"   95","line":"          : advance<It, mpl::int_<-1> >"},
{"lineNum":"   96","line":"        {};"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"        template <typename It1, typename It2>"},
{"lineNum":"   99","line":"        struct distance"},
{"lineNum":"  100","line":"        {"},
{"lineNum":"  101","line":"            typedef mpl::minus<typename It2::index, typename It1::index> type;"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"            BOOST_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"  104","line":"            static"},
{"lineNum":"  105","line":"            type"},
{"lineNum":"  106","line":"            call(It1 const&, It2 const&)"},
{"lineNum":"  107","line":"            {"},
{"lineNum":"  108","line":"                return type();"},
{"lineNum":"  109","line":"            }"},
{"lineNum":"  110","line":"        };"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"        template <typename It1, typename It2>"},
{"lineNum":"  113","line":"        struct equal_to"},
{"lineNum":"  114","line":"          : mpl::and_<"},
{"lineNum":"  115","line":"                is_same<"},
{"lineNum":"  116","line":"                    typename remove_const<typename It1::seq_type>::type"},
{"lineNum":"  117","line":"                  , typename remove_const<typename It2::seq_type>::type"},
{"lineNum":"  118","line":"                >"},
{"lineNum":"  119","line":"              , mpl::equal_to<typename It1::index,typename It2::index>"},
{"lineNum":"  120","line":"            >"},
{"lineNum":"  121","line":"        {};"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"        template<typename OtherSeq>"},
{"lineNum":"  124","line":"        BOOST_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"  125","line":"        basic_iterator(basic_iterator<Tag,Category,OtherSeq,Index> const& it)"},
{"lineNum":"  126","line":"          : seq(it.seq)"},
{"lineNum":"  127","line":"        {}"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"        BOOST_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"  130","line":"        basic_iterator(Seq& in_seq, int)"},
{"lineNum":"  131","line":"          : seq(&in_seq)"},
{"lineNum":"  132","line":"        {}"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"        template<typename OtherSeq>"},
{"lineNum":"  135","line":"        BOOST_CXX14_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"  136","line":"        basic_iterator&"},
{"lineNum":"  137","line":"        operator=(basic_iterator<Tag,Category,OtherSeq,Index> const& it)"},
{"lineNum":"  138","line":"        {"},
{"lineNum":"  139","line":"            seq=it.seq;"},
{"lineNum":"  140","line":"            return *this;"},
{"lineNum":"  141","line":"        }"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"        Seq* seq;"},
{"lineNum":"  144","line":"    };"},
{"lineNum":"  145","line":"}}"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"#ifdef BOOST_FUSION_WORKAROUND_FOR_LWG_2408"},
{"lineNum":"  148","line":"namespace std"},
{"lineNum":"  149","line":"{"},
{"lineNum":"  150","line":"    template <typename Tag, typename Category, typename Seq, int Index>"},
{"lineNum":"  151","line":"    struct iterator_traits< ::boost::fusion::basic_iterator<Tag, Category, Seq, Index> >"},
{"lineNum":"  152","line":"    { };"},
{"lineNum":"  153","line":"}"},
{"lineNum":"  154","line":"#endif"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 1, "covered" : 0,};
var merged_data = [];
