var data = {lines:[
{"lineNum":"    1","line":"/*============================================================================="},
{"lineNum":"    2","line":"    Copyright (c) 2001-2007 Joel de Guzman"},
{"lineNum":"    3","line":"    Copyright (c) 2015 Kohei Takahashi"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"    Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    6","line":"    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    7","line":"==============================================================================*/"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"#ifndef BOOST_PHOENIX_CORE_DETAIL_FUNCTION_EVAL_HPP"},
{"lineNum":"   10","line":"#define BOOST_PHOENIX_CORE_DETAIL_FUNCTION_EVAL_HPP"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"#include <boost/phoenix/core/limits.hpp>"},
{"lineNum":"   13","line":"#include <boost/phoenix/support/iterate.hpp>"},
{"lineNum":"   14","line":"#include <boost/phoenix/core/call.hpp>"},
{"lineNum":"   15","line":"#include <boost/phoenix/core/expression.hpp>"},
{"lineNum":"   16","line":"#include <boost/phoenix/core/meta_grammar.hpp>"},
{"lineNum":"   17","line":"#include <boost/phoenix/core/detail/phx2_result.hpp>"},
{"lineNum":"   18","line":"#include <boost/utility/result_of.hpp>"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"#ifndef BOOST_PHOENIX_NO_VARIADIC_FUNCTION_EVAL"},
{"lineNum":"   21","line":"#   include <boost/mpl/if.hpp>"},
{"lineNum":"   22","line":"#   include <boost/type_traits/is_reference.hpp>"},
{"lineNum":"   23","line":"#endif"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"#ifdef BOOST_PHOENIX_NO_VARIADIC_EXPRESSION"},
{"lineNum":"   26","line":"#   include <boost/phoenix/core/detail/cpp03/function_eval_expr.hpp>"},
{"lineNum":"   27","line":"#else"},
{"lineNum":"   28","line":"BOOST_PHOENIX_DEFINE_EXPRESSION_VARARG("},
{"lineNum":"   29","line":"    (boost)(phoenix)(detail)(function_eval)"},
{"lineNum":"   30","line":"  , (meta_grammar)(meta_grammar)"},
{"lineNum":"   31","line":"  , _"},
{"lineNum":"   32","line":")"},
{"lineNum":"   33","line":"#endif"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"namespace boost { namespace phoenix {"},
{"lineNum":"   36","line":"    namespace detail"},
{"lineNum":"   37","line":"    {"},
{"lineNum":"   38","line":"        template <typename T>"},
{"lineNum":"   39","line":"        T& help_rvalue_deduction(T& x)"},
{"lineNum":"   40","line":"        {"},
{"lineNum":"   41","line":"            return x;"},
{"lineNum":"   42","line":"        }"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"        template <typename T>"},
{"lineNum":"   45","line":"        T const& help_rvalue_deduction(T const& x)"},
{"lineNum":"   46","line":"        {"},
{"lineNum":"   47","line":"            return x;"},
{"lineNum":"   48","line":"        }"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"        struct function_eval"},
{"lineNum":"   51","line":"        {"},
{"lineNum":"   52","line":"            template <typename Sig>"},
{"lineNum":"   53","line":"            struct result;"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"#ifdef BOOST_PHOENIX_NO_VARIADIC_FUNCTION_EVAL"},
{"lineNum":"   56","line":"            template <typename This, typename F, typename Context>"},
{"lineNum":"   57","line":"            struct result<This(F, Context)>"},
{"lineNum":"   58","line":"            {"},
{"lineNum":"   59","line":"                typedef typename"},
{"lineNum":"   60","line":"                    remove_reference<"},
{"lineNum":"   61","line":"                        typename boost::result_of<evaluator(F, Context)>::type"},
{"lineNum":"   62","line":"                    >::type"},
{"lineNum":"   63","line":"                    fn;"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"                typedef typename boost::result_of<fn()>::type type;"},
{"lineNum":"   66","line":"            };"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"            template <typename F, typename Context>"},
{"lineNum":"   69","line":"            typename result<function_eval(F const&, Context const&)>::type"},
{"lineNum":"   70","line":"            operator()(F const & f, Context const & ctx) const"},
{"lineNum":"   71","line":"            {"},
{"lineNum":"   72","line":"                return boost::phoenix::eval(f, ctx)();"},
{"lineNum":"   73","line":"            }"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"            template <typename F, typename Context>"},
{"lineNum":"   76","line":"            typename result<function_eval(F &, Context const&)>::type"},
{"lineNum":"   77","line":"            operator()(F & f, Context const & ctx) const"},
{"lineNum":"   78","line":"            {"},
{"lineNum":"   79","line":"                return boost::phoenix::eval(f, ctx)();"},
{"lineNum":"   80","line":"            }"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"        #include <boost/phoenix/core/detail/cpp03/function_eval.hpp>"},
{"lineNum":"   83","line":"#else"},
{"lineNum":"   84","line":"            template <typename, typename, typename...> struct result_impl;"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"            template <typename F, typename... A, typename Head, typename... Tail>"},
{"lineNum":"   87","line":"            struct result_impl<F, void(A...), Head, Tail...>"},
{"lineNum":"   88","line":"                : result_impl<F, void(A..., Head), Tail...>"},
{"lineNum":"   89","line":"            {"},
{"lineNum":"   90","line":"            };"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"            template <typename F, typename... A, typename Context>"},
{"lineNum":"   93","line":"            struct result_impl<F, void(A...), Context>"},
{"lineNum":"   94","line":"            {"},
{"lineNum":"   95","line":"                typedef typename"},
{"lineNum":"   96","line":"                    remove_reference<"},
{"lineNum":"   97","line":"                        typename boost::result_of<evaluator(F, Context)>::type"},
{"lineNum":"   98","line":"                    >::type"},
{"lineNum":"   99","line":"                    fn;"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"                template <typename T>"},
{"lineNum":"  102","line":"                struct result_of_evaluator"},
{"lineNum":"  103","line":"                {"},
{"lineNum":"  104","line":"                    typedef typename boost::add_reference<"},
{"lineNum":"  105","line":"                        typename boost::add_const<"},
{"lineNum":"  106","line":"                            typename boost::result_of<"},
{"lineNum":"  107","line":"                                boost::phoenix::evaluator(T, Context)"},
{"lineNum":"  108","line":"                            >::type"},
{"lineNum":"  109","line":"                        >::type"},
{"lineNum":"  110","line":"                    >::type type;"},
{"lineNum":"  111","line":"                };"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"                typedef typename"},
{"lineNum":"  114","line":"                    boost::result_of<"},
{"lineNum":"  115","line":"                        fn(typename result_of_evaluator<A>::type...)"},
{"lineNum":"  116","line":"                    >::type"},
{"lineNum":"  117","line":"                    type;"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"                static type call(F f, A... a, Context ctx)"},
{"lineNum":"  120","line":"                {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  121","line":"                    return boost::phoenix::eval(f, ctx)(help_rvalue_deduction(boost::phoenix::eval(a, ctx))...);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  122","line":"                }"},
{"lineNum":"  123","line":"            };"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"            template <typename This, typename F, typename... A>"},
{"lineNum":"  126","line":"            struct result<This(F, A...)>"},
{"lineNum":"  127","line":"                : result_impl<F, void(), A...>"},
{"lineNum":"  128","line":"            {"},
{"lineNum":"  129","line":"            };"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"            template <typename F, typename... A>"},
{"lineNum":"  132","line":"            typename result<"},
{"lineNum":"  133","line":"                function_eval("},
{"lineNum":"  134","line":"                    F const &"},
{"lineNum":"  135","line":"                  , typename mpl::if_<is_reference<A>, A, A const &>::type..."},
{"lineNum":"  136","line":"                )"},
{"lineNum":"  137","line":"            >::type"},
{"lineNum":"  138","line":"            // \'A &... a, Context const &ctx\' doesn\'t work as intended: type deduction always fail."},
{"lineNum":"  139","line":"            operator()(F && f, A &&... a) const"},
{"lineNum":"  140","line":"            {"},
{"lineNum":"  141","line":"                return"},
{"lineNum":"  142","line":"                    result<","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  143","line":"                        function_eval("},
{"lineNum":"  144","line":"                            typename mpl::if_<is_reference<F>, F, F const &>::type"},
{"lineNum":"  145","line":"                          , typename mpl::if_<is_reference<A>, A, A const &>::type..."},
{"lineNum":"  146","line":"                        )"},
{"lineNum":"  147","line":"                    >::call(f, a...);"},
{"lineNum":"  148","line":"            }"},
{"lineNum":"  149","line":"#endif"},
{"lineNum":"  150","line":"        };"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"    }"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"    template <typename Dummy>"},
{"lineNum":"  155","line":"    struct default_actions::when<detail::rule::function_eval, Dummy>"},
{"lineNum":"  156","line":"        : phoenix::call<detail::function_eval>"},
{"lineNum":"  157","line":"    {};"},
{"lineNum":"  158","line":"}}"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 3, "covered" : 0,};
var merged_data = [];
