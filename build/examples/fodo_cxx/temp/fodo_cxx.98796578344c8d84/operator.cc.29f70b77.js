var data = {lines:[
{"lineNum":"    1","line":"#include <iostream>"},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"#include \"operator.h\""},
{"lineNum":"    4","line":"#include \"synergia/simulation/operation_extractor.h\""},
{"lineNum":"    5","line":"#include \"synergia/simulation/aperture_operation.h\""},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"#if 0"},
{"lineNum":"   10","line":"void"},
{"lineNum":"   11","line":"Independent_operator::update_operations("},
{"lineNum":"   12","line":"        Reference_particle const& reference_particle)"},
{"lineNum":"   13","line":"{"},
{"lineNum":"   14","line":"    operations.clear();"},
{"lineNum":"   15","line":"    operations_revisions.clear();"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"    std::string aperture_type(\"\");"},
{"lineNum":"   18","line":"    bool need_left_aperture, need_right_aperture;"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"    std::string extractor_type(\"\"), last_extractor_type(\"\");"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"    // Group slices of equal extractor_type and pass to operation_extractor"},
{"lineNum":"   23","line":"    // to get operations."},
{"lineNum":"   24","line":"    Lattice_element_slices group;"},
{"lineNum":"   25","line":"    for (auto const & slice : slices)"},
{"lineNum":"   26","line":"    {"},
{"lineNum":"   27","line":"        auto const & element = slice.get_lattice_element();"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"        if (element.has_string_attribute(\"aperture_type\"))"},
{"lineNum":"   30","line":"        {"},
{"lineNum":"   31","line":"            aperture_type = element.get_string_attribute(\"aperture_type\");"},
{"lineNum":"   32","line":"            need_left_aperture = slice.has_left_edge();"},
{"lineNum":"   33","line":"            need_right_aperture = slice.has_right_edge();"},
{"lineNum":"   34","line":"        }"},
{"lineNum":"   35","line":"        else"},
{"lineNum":"   36","line":"        {"},
{"lineNum":"   37","line":"            need_left_aperture = false;"},
{"lineNum":"   38","line":"            need_right_aperture = false;"},
{"lineNum":"   39","line":"        }"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"        extractor_type = element.get_string_attribute(\"extractor_type\", \"default\");"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"        if (((extractor_type != last_extractor_type) || need_left_aperture)"},
{"lineNum":"   44","line":"                && (!group.empty()))"},
{"lineNum":"   45","line":"        {"},
{"lineNum":"   46","line":"            auto group_operations = extract_independent_operations("},
{"lineNum":"   47","line":"                    extractor_type,"},
{"lineNum":"   48","line":"                    chef_lattice,"},
{"lineNum":"   49","line":"                    reference_particle,"},
{"lineNum":"   50","line":"                    group,"},
{"lineNum":"   51","line":"                    map_order);"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"            operations.push_back(group_operations);"},
{"lineNum":"   54","line":"            group.clear();"},
{"lineNum":"   55","line":"        }"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"        if (need_left_aperture)"},
{"lineNum":"   58","line":"        {"},
{"lineNum":"   59","line":"            auto aperture_opn = extract_aperture_operation(aperture_type, slice);"},
{"lineNum":"   60","line":"            operations.push_back(aperture_opn);"},
{"lineNum":"   61","line":"        }"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"        group.push_back(slice);"},
{"lineNum":"   64","line":"        last_extractor_type = extractor_type;"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"        if (need_right_aperture)"},
{"lineNum":"   67","line":"        {"},
{"lineNum":"   68","line":"            auto group_operations = extract_independent_operations("},
{"lineNum":"   69","line":"                    extractor_type, chef_lattice,"},
{"lineNum":"   70","line":"                    reference_particle, group, map_order);"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"            operations.push_back(group_operations);"},
{"lineNum":"   73","line":"            group.clear();"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"            auto aperture_opn = extract_aperture_operation(aperture_type, slice);"},
{"lineNum":"   76","line":"            operations.push_back(aperture_opn);"},
{"lineNum":"   77","line":"        }"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"        operations_revisions.push_back(element.get_revision());"},
{"lineNum":"   80","line":"    }"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"    if (!group.empty())"},
{"lineNum":"   83","line":"    {"},
{"lineNum":"   84","line":"        auto group_operations = extract_independent_operations("},
{"lineNum":"   85","line":"                extractor_type, chef_lattice,"},
{"lineNum":"   86","line":"                reference_particle, group, map_order);"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"        operations.push_back(group_operations);"},
{"lineNum":"   89","line":"    }"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"    auto aperture_opn = extract_aperture_operation(\"default\", slices.back());"},
{"lineNum":"   92","line":"    operations.push_back(aperture_opn);"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"    auto finite_aperture = std::make_unique<Finite_aperture_operation>(slices.back());"},
{"lineNum":"   95","line":"    operations.push_back(finite_aperture);"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"    have_operations = true;"},
{"lineNum":"   98","line":"    operations_reference_particle = reference_particle;"},
{"lineNum":"   99","line":"}"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"bool Independent_operator::need_update("},
{"lineNum":"  102","line":"        Reference_particle const& reference_particle,"},
{"lineNum":"  103","line":"        int verbosity, Logger & logger)"},
{"lineNum":"  104","line":"{"},
{"lineNum":"  105","line":"    const double reference_particle_tolerance = 1.0e-8;"},
{"lineNum":"  106","line":"    bool retval;"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"    if (have_operations)"},
{"lineNum":"  109","line":"    {"},
{"lineNum":"  110","line":"        retval = false;"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"        if (reference_particle.equal(operations_reference_particle,"},
{"lineNum":"  113","line":"                reference_particle_tolerance))"},
{"lineNum":"  114","line":"        {"},
{"lineNum":"  115","line":"            std::list<long int >::const_iterator rev_it ="},
{"lineNum":"  116","line":"                    operations_revisions.begin();"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"            for (Lattice_element_slices::const_iterator it = slices.begin();"},
{"lineNum":"  119","line":"                    it != slices.end(); ++it)"},
{"lineNum":"  120","line":"            {"},
{"lineNum":"  121","line":"                long int cached_revision = (*rev_it);"},
{"lineNum":"  122","line":"                long int revision = (*it)->get_lattice_element().get_revision();"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"                if (revision != cached_revision)"},
{"lineNum":"  125","line":"                {"},
{"lineNum":"  126","line":"                    if (verbosity > 4) {"},
{"lineNum":"  127","line":"                        logger << \"Independent_operator: needs update because lattice element \""},
{"lineNum":"  128","line":"                               << (*it)->get_lattice_element().get_name()"},
{"lineNum":"  129","line":"                               << \" has changed\" << std::endl;"},
{"lineNum":"  130","line":"                    }"},
{"lineNum":"  131","line":"                    retval = true;"},
{"lineNum":"  132","line":"                    break;"},
{"lineNum":"  133","line":"                }"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"                ++rev_it;"},
{"lineNum":"  136","line":"            }"},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"        }"},
{"lineNum":"  139","line":"        else"},
{"lineNum":"  140","line":"        {"},
{"lineNum":"  141","line":"            if (verbosity > 4) {"},
{"lineNum":"  142","line":"                logger << \"Independent_operator: needs update because reference particle has changed\""},
{"lineNum":"  143","line":"                       << std::endl;"},
{"lineNum":"  144","line":"            }"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"            retval = true;"},
{"lineNum":"  147","line":"        }"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"    }"},
{"lineNum":"  150","line":"    else"},
{"lineNum":"  151","line":"    {"},
{"lineNum":"  152","line":"        if (verbosity > 4) {"},
{"lineNum":"  153","line":"            logger << \"Independent_operator: needs update because does not have operations\""},
{"lineNum":"  154","line":"                   << std::endl;"},
{"lineNum":"  155","line":"        }"},
{"lineNum":"  156","line":"        retval = true;"},
{"lineNum":"  157","line":"    }"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"    return retval;"},
{"lineNum":"  160","line":"}"},
{"lineNum":"  161","line":"#endif"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"Independent_operator::Independent_operator(std::string const & name, double time)"},
{"lineNum":"  164","line":"    : Operator(name, \"independent\", time)"},
{"lineNum":"  165","line":"    , slices()"},
{"lineNum":"  166","line":"    , operations()"},
{"lineNum":"  167","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  168","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"bool Independent_operator::need_update("},
{"lineNum":"  171","line":"        Reference_particle const & ref,"},
{"lineNum":"  172","line":"        Logger & logger)"},
{"lineNum":"  173","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  174","line":"    return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"#if 0"},
{"lineNum":"  177","line":"    const double reference_particle_tolerance = 1.0e-8;"},
{"lineNum":"  178","line":"    bool retval = false;"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"    if (have_operations)"},
{"lineNum":"  181","line":"    {"},
{"lineNum":"  182","line":"        retval = false;"},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"        if (reference_particle.equal(operations_reference_particle,"},
{"lineNum":"  185","line":"                reference_particle_tolerance))"},
{"lineNum":"  186","line":"        {"},
{"lineNum":"  187","line":"            std::list<long int >::const_iterator rev_it ="},
{"lineNum":"  188","line":"                    operations_revisions.begin();"},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"            for (Lattice_element_slices::const_iterator it = slices.begin();"},
{"lineNum":"  191","line":"                    it != slices.end(); ++it)"},
{"lineNum":"  192","line":"            {"},
{"lineNum":"  193","line":"                long int cached_revision = (*rev_it);"},
{"lineNum":"  194","line":"                long int revision = (*it)->get_lattice_element().get_revision();"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"                if (revision != cached_revision)"},
{"lineNum":"  197","line":"                {"},
{"lineNum":"  198","line":"                    if (verbosity > 4) {"},
{"lineNum":"  199","line":"                        logger << \"Independent_operator: needs update because lattice element \""},
{"lineNum":"  200","line":"                               << (*it)->get_lattice_element().get_name()"},
{"lineNum":"  201","line":"                               << \" has changed\" << std::endl;"},
{"lineNum":"  202","line":"                    }"},
{"lineNum":"  203","line":"                    retval = true;"},
{"lineNum":"  204","line":"                    break;"},
{"lineNum":"  205","line":"                }"},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"                ++rev_it;"},
{"lineNum":"  208","line":"            }"},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"        }"},
{"lineNum":"  211","line":"        else"},
{"lineNum":"  212","line":"        {"},
{"lineNum":"  213","line":"            if (verbosity > 4) {"},
{"lineNum":"  214","line":"                logger << \"Independent_operator: needs update because reference particle has changed\""},
{"lineNum":"  215","line":"                       << std::endl;"},
{"lineNum":"  216","line":"            }"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"            retval = true;"},
{"lineNum":"  219","line":"        }"},
{"lineNum":"  220","line":""},
{"lineNum":"  221","line":"    }"},
{"lineNum":"  222","line":"    else"},
{"lineNum":"  223","line":"    {"},
{"lineNum":"  224","line":"        if (verbosity > 4) {"},
{"lineNum":"  225","line":"            logger << \"Independent_operator: needs update because does not have operations\""},
{"lineNum":"  226","line":"                   << std::endl;"},
{"lineNum":"  227","line":"        }"},
{"lineNum":"  228","line":"        retval = true;"},
{"lineNum":"  229","line":"    }"},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"    return retval;"},
{"lineNum":"  232","line":"#endif"},
{"lineNum":"  233","line":"}"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"void"},
{"lineNum":"  236","line":"Independent_operator::update_operations("},
{"lineNum":"  237","line":"        Reference_particle const & reference_particle)"},
{"lineNum":"  238","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  239","line":"#if 0"},
{"lineNum":"  240","line":"    operations.clear();"},
{"lineNum":"  241","line":"    operations_revisions.clear();"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"    std::string aperture_type(\"\");"},
{"lineNum":"  244","line":"    bool need_left_aperture, need_right_aperture;"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"    std::string extractor_type(\"\"), last_extractor_type(\"\");"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"    // Group slices of equal extractor_type and pass to operation_extractor"},
{"lineNum":"  249","line":"    // to get operations."},
{"lineNum":"  250","line":"    Lattice_element_slices group;"},
{"lineNum":"  251","line":"    for (auto const & slice : slices)"},
{"lineNum":"  252","line":"    {"},
{"lineNum":"  253","line":"        auto const & element = slice.get_lattice_element();"},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"        if (element.has_string_attribute(\"aperture_type\"))"},
{"lineNum":"  256","line":"        {"},
{"lineNum":"  257","line":"            aperture_type = element.get_string_attribute(\"aperture_type\");"},
{"lineNum":"  258","line":"            need_left_aperture = slice.has_left_edge();"},
{"lineNum":"  259","line":"            need_right_aperture = slice.has_right_edge();"},
{"lineNum":"  260","line":"        }"},
{"lineNum":"  261","line":"        else"},
{"lineNum":"  262","line":"        {"},
{"lineNum":"  263","line":"            need_left_aperture = false;"},
{"lineNum":"  264","line":"            need_right_aperture = false;"},
{"lineNum":"  265","line":"        }"},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"        extractor_type = element.get_string_attribute(\"extractor_type\", \"default\");"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"        if (((extractor_type != last_extractor_type) || need_left_aperture)"},
{"lineNum":"  270","line":"                && (!group.empty()))"},
{"lineNum":"  271","line":"        {"},
{"lineNum":"  272","line":"            auto group_operations = extract_independent_operations("},
{"lineNum":"  273","line":"                    extractor_type,"},
{"lineNum":"  274","line":"                    chef_lattice,"},
{"lineNum":"  275","line":"                    reference_particle,"},
{"lineNum":"  276","line":"                    group,"},
{"lineNum":"  277","line":"                    map_order);"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"            operations.push_back(group_operations);"},
{"lineNum":"  280","line":"            group.clear();"},
{"lineNum":"  281","line":"        }"},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"        if (need_left_aperture)"},
{"lineNum":"  284","line":"        {"},
{"lineNum":"  285","line":"            auto aperture_opn = extract_aperture_operation(aperture_type, slice);"},
{"lineNum":"  286","line":"            operations.push_back(aperture_opn);"},
{"lineNum":"  287","line":"        }"},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"        group.push_back(slice);"},
{"lineNum":"  290","line":"        last_extractor_type = extractor_type;"},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"        if (need_right_aperture)"},
{"lineNum":"  293","line":"        {"},
{"lineNum":"  294","line":"            auto group_operations = extract_independent_operations("},
{"lineNum":"  295","line":"                    extractor_type, chef_lattice,"},
{"lineNum":"  296","line":"                    reference_particle, group, map_order);"},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":"            operations.push_back(group_operations);"},
{"lineNum":"  299","line":"            group.clear();"},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"            auto aperture_opn = extract_aperture_operation(aperture_type, slice);"},
{"lineNum":"  302","line":"            operations.push_back(aperture_opn);"},
{"lineNum":"  303","line":"        }"},
{"lineNum":"  304","line":""},
{"lineNum":"  305","line":"        operations_revisions.push_back(element.get_revision());"},
{"lineNum":"  306","line":"    }"},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"    if (!group.empty())"},
{"lineNum":"  309","line":"    {"},
{"lineNum":"  310","line":"        auto group_operations = extract_independent_operations("},
{"lineNum":"  311","line":"                extractor_type, chef_lattice,"},
{"lineNum":"  312","line":"                reference_particle, group, map_order);"},
{"lineNum":"  313","line":""},
{"lineNum":"  314","line":"        operations.push_back(group_operations);"},
{"lineNum":"  315","line":"    }"},
{"lineNum":"  316","line":""},
{"lineNum":"  317","line":"    auto aperture_opn = extract_aperture_operation(\"default\", slices.back());"},
{"lineNum":"  318","line":"    operations.push_back(aperture_opn);"},
{"lineNum":"  319","line":""},
{"lineNum":"  320","line":"    auto finite_aperture = std::make_unique<Finite_aperture_operation>(slices.back());"},
{"lineNum":"  321","line":"    operations.push_back(finite_aperture);"},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"    have_operations = true;"},
{"lineNum":"  324","line":"    operations_reference_particle = reference_particle;"},
{"lineNum":"  325","line":"#endif"},
{"lineNum":"  326","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  327","line":""},
{"lineNum":"  328","line":"void"},
{"lineNum":"  329","line":"Independent_operator::create_operations_impl("},
{"lineNum":"  330","line":"        Lattice const & lattice)"},
{"lineNum":"  331","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  332","line":"    operations.clear();"},
{"lineNum":"  333","line":"    //operations_revisions.clear();"},
{"lineNum":"  334","line":""},
{"lineNum":"  335","line":"    std::string aperture_type(\"\");"},
{"lineNum":"  336","line":"    bool need_left_aperture, need_right_aperture;"},
{"lineNum":"  337","line":""},
{"lineNum":"  338","line":"    std::string extractor_type(\"\"), last_extractor_type(\"\");"},
{"lineNum":"  339","line":""},
{"lineNum":"  340","line":"    // Group slices of equal extractor_type and pass to operation_extractor"},
{"lineNum":"  341","line":"    // to get operations."},
{"lineNum":"  342","line":"    std::vector<Lattice_element_slice> group;"},
{"lineNum":"  343","line":"    for (auto const & slice : slices)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  344","line":"    {"},
{"lineNum":"  345","line":"        auto const & element = slice.get_lattice_element();"},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"        if (element.has_string_attribute(\"aperture_type\"))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  348","line":"        {"},
{"lineNum":"  349","line":"            aperture_type = element.get_string_attribute(\"aperture_type\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  350","line":"            need_left_aperture = slice.has_left_edge();"},
{"lineNum":"  351","line":"            need_right_aperture = slice.has_right_edge();"},
{"lineNum":"  352","line":"        }"},
{"lineNum":"  353","line":"        else"},
{"lineNum":"  354","line":"        {"},
{"lineNum":"  355","line":"            need_left_aperture = false;"},
{"lineNum":"  356","line":"            need_right_aperture = false;"},
{"lineNum":"  357","line":"        }"},
{"lineNum":"  358","line":""},
{"lineNum":"  359","line":"        extractor_type = element.get_string_attribute(\"extractor_type\", \"default\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  360","line":""},
{"lineNum":"  361","line":"        if ( ((extractor_type != last_extractor_type) || need_left_aperture)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  362","line":"                && (!group.empty()) )"},
{"lineNum":"  363","line":"        {"},
{"lineNum":"  364","line":"            extract_independent_operations(extractor_type, lattice, group, operations);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  365","line":"            group.clear();"},
{"lineNum":"  366","line":"        }"},
{"lineNum":"  367","line":""},
{"lineNum":"  368","line":"        if (need_left_aperture)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  369","line":"        {"},
{"lineNum":"  370","line":"            operations.emplace_back(extract_aperture_operation(aperture_type, slice));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  371","line":"        }"},
{"lineNum":"  372","line":""},
{"lineNum":"  373","line":"        group.push_back(slice);"},
{"lineNum":"  374","line":"        last_extractor_type = extractor_type;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"        if (need_right_aperture)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  377","line":"        {"},
{"lineNum":"  378","line":"            extract_independent_operations(extractor_type, lattice, group, operations);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  379","line":"            operations.emplace_back(extract_aperture_operation(aperture_type, slice));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  380","line":"            group.clear();"},
{"lineNum":"  381","line":"        }"},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"        //operations_revisions.push_back(element.get_revision());"},
{"lineNum":"  384","line":"    }"},
{"lineNum":"  385","line":""},
{"lineNum":"  386","line":"    if (!group.empty())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  387","line":"    {"},
{"lineNum":"  388","line":"        extract_independent_operations(extractor_type, lattice, group, operations);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  389","line":"    }"},
{"lineNum":"  390","line":""},
{"lineNum":"  391","line":"    // always attach a finite aperture and a circular aperture by default"},
{"lineNum":"  392","line":"    operations.emplace_back("},
{"lineNum":"  393","line":"            extract_aperture_operation(Finite_aperture::type, slices.back()));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  394","line":""},
{"lineNum":"  395","line":"    operations.emplace_back("},
{"lineNum":"  396","line":"            extract_aperture_operation(Circular_aperture::type, slices.back()));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  397","line":""},
{"lineNum":"  398","line":"#if 0"},
{"lineNum":"  399","line":"    have_operations = true;"},
{"lineNum":"  400","line":"    operations_reference_particle = reference_particle;"},
{"lineNum":"  401","line":"#endif"},
{"lineNum":"  402","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  403","line":""},
{"lineNum":"  404","line":""},
{"lineNum":"  405","line":"void"},
{"lineNum":"  406","line":"Independent_operator::apply_impl("},
{"lineNum":"  407","line":"        Bunch_simulator & simulator,"},
{"lineNum":"  408","line":"        double time_step,"},
{"lineNum":"  409","line":"        Logger & logger)"},
{"lineNum":"  410","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  411","line":"    using LV = LoggerV;"},
{"lineNum":"  412","line":""},
{"lineNum":"  413","line":"    //double t_total = simple_timer_current();"},
{"lineNum":"  414","line":""},
{"lineNum":"  415","line":"    logger(LV::DINFO) << \"    Independent_operator: slice(s) = \";"},
{"lineNum":"  416","line":""},
{"lineNum":"  417","line":"    for (auto const & slice : slices)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  418","line":"        logger(LV::DINFO) << slice.as_string() << \", \";","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  419","line":""},
{"lineNum":"  420","line":"    logger(LV::DINFO) << \"\\n\";"},
{"lineNum":"  421","line":""},
{"lineNum":"  422","line":"    for (auto & train : simulator.get_trains())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  423","line":"    {"},
{"lineNum":"  424","line":"        for (auto & bunch : train.get_bunches())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  425","line":"        {"},
{"lineNum":"  426","line":"            for (auto const & opn : operations)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  427","line":"            {"},
{"lineNum":"  428","line":"                logger(LV::INFO_OPN)"},
{"lineNum":"  429","line":"                    << \"    Independent_operator: operation type = \""},
{"lineNum":"  430","line":"                    << opn->get_type() << \"\\n\";"},
{"lineNum":"  431","line":""},
{"lineNum":"  432","line":"                opn->apply(bunch, logger);"},
{"lineNum":"  433","line":""},
{"lineNum":"  434","line":"                simulator.diag_action_operation(*opn);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  435","line":"            }"},
{"lineNum":"  436","line":""},
{"lineNum":"  437","line":"            // per element diagnostics"},
{"lineNum":"  438","line":"            // the former \"forced diagnostics\""},
{"lineNum":"  439","line":"            for (auto const& slice : slices)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  440","line":"            {"},
{"lineNum":"  441","line":"                if (slice.has_right_edge())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  442","line":"                    simulator.diag_action_element(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  443","line":"                            slice.get_lattice_element());"},
{"lineNum":"  444","line":"            }"},
{"lineNum":"  445","line":""},
{"lineNum":"  446","line":"            // update per-bunch per-independent-operator"},
{"lineNum":"  447","line":"            bunch.update_total_num();"},
{"lineNum":"  448","line":"        }"},
{"lineNum":"  449","line":"    }"},
{"lineNum":"  450","line":""},
{"lineNum":"  451","line":""},
{"lineNum":"  452","line":"#if 0"},
{"lineNum":"  453","line":"    if (do_update)"},
{"lineNum":"  454","line":"    {"},
{"lineNum":"  455","line":"        if (verbosity > 3)"},
{"lineNum":"  456","line":"            logger << \"Independent_operator: updating operations\" << std::endl;"},
{"lineNum":"  457","line":""},
{"lineNum":"  458","line":"        update_operations(bunch.get_reference_particle());"},
{"lineNum":"  459","line":"        t = simple_timer_show(t, \"independent_operator_apply-update_operations\");"},
{"lineNum":"  460","line":"    }"},
{"lineNum":"  461","line":""},
{"lineNum":"  462","line":"    for (Independent_operations::iterator it = operations.begin();"},
{"lineNum":"  463","line":"            it != operations.end(); ++it)"},
{"lineNum":"  464","line":"    {"},
{"lineNum":"  465","line":"        if (verbosity > 3)"},
{"lineNum":"  466","line":"            logger << \"Independent_operator: operation type = \""},
{"lineNum":"  467","line":"                   << (*it)->get_type() << std::endl;"},
{"lineNum":"  468","line":""},
{"lineNum":"  469","line":"        (*it)->apply(bunch, verbosity, logger);"},
{"lineNum":"  470","line":""},
{"lineNum":"  471","line":"        std::string label(\"independent_operator_apply-\" + (*it)->get_type()"},
{"lineNum":"  472","line":"                        + \"_operation_apply\");"},
{"lineNum":"  473","line":"        t = simple_timer_show(t, label.c_str());"},
{"lineNum":"  474","line":""},
{"lineNum":"  475","line":"        for (Diagnosticss::const_iterator itd ="},
{"lineNum":"  476","line":"                per_operation_diagnosticss.begin();"},
{"lineNum":"  477","line":"                itd != per_operation_diagnosticss.end(); ++it)"},
{"lineNum":"  478","line":"        {"},
{"lineNum":"  479","line":"            (*itd)->update_and_write();"},
{"lineNum":"  480","line":"        }"},
{"lineNum":"  481","line":""},
{"lineNum":"  482","line":"        t = simple_timer_show(t, \"diagnostics-operation\");"},
{"lineNum":"  483","line":"    }"},
{"lineNum":"  484","line":""},
{"lineNum":"  485","line":"    bunch.update_total_num();"},
{"lineNum":"  486","line":"    t = simple_timer_show(t, \"independent_operator_apply-bunch_update_total_num\");"},
{"lineNum":"  487","line":"    t_total = simple_timer_show(t_total, \"independent_operator_apply-total\");"},
{"lineNum":"  488","line":"#endif"},
{"lineNum":"  489","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  490","line":""},
{"lineNum":"  491","line":"void Independent_operator::print_impl(Logger & logger) const"},
{"lineNum":"  492","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  493","line":"    logger(LoggerV::DEBUG)"},
{"lineNum":"  494","line":"        << \"\\tslices: \" << \"\\n\""},
{"lineNum":"  495","line":"        << \"\\toperations: \";"},
{"lineNum":"  496","line":""},
{"lineNum":"  497","line":"    for(auto const & opn : operations) opn->print(logger);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  498","line":""},
{"lineNum":"  499","line":"    logger(LoggerV::DEBUG)"},
{"lineNum":"  500","line":"        << \"\\n\";"},
{"lineNum":"  501","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  502","line":""},
{"lineNum":"  503","line":"#if 0"},
{"lineNum":"  504","line":"void"},
{"lineNum":"  505","line":"Independent_operator::apply(Bunch & bunch, double time_step, Step & step,"},
{"lineNum":"  506","line":"        int verbosity, Logger & logger, Multi_diagnostics & diagnostics)"},
{"lineNum":"  507","line":"{"},
{"lineNum":"  508","line":""},
{"lineNum":"  509","line":"    if (need_update(bunch.get_reference_particle(), verbosity, logger)) {"},
{"lineNum":"  510","line":"        update_operations(bunch.get_reference_particle());"},
{"lineNum":"  511","line":"    }"},
{"lineNum":"  512","line":""},
{"lineNum":"  513","line":"    double t;"},
{"lineNum":"  514","line":"    t = simple_timer_current();"},
{"lineNum":"  515","line":"    for (Independent_operations::iterator it = operations.begin();"},
{"lineNum":"  516","line":"            it != operations.end(); ++it) {"},
{"lineNum":"  517","line":"        //  std::cout<<\" opertor.cc operator name=\"<<(*it)->get_type()<<std::endl;"},
{"lineNum":"  518","line":"        for (Multi_diagnostics::iterator itd = diagnostics.begin();"},
{"lineNum":"  519","line":"                itd != diagnostics.end(); ++itd) {"},
{"lineNum":"  520","line":""},
{"lineNum":"  521","line":"            (*itd)->update_and_write();"},
{"lineNum":"  522","line":"        }"},
{"lineNum":"  523","line":"        (*it)->apply(bunch, verbosity, logger);"},
{"lineNum":"  524","line":"    }"},
{"lineNum":"  525","line":"    t = simple_timer_show(t, \"independent_operator_apply2\");"},
{"lineNum":"  526","line":"}"},
{"lineNum":"  527","line":"#endif"},
{"lineNum":"  528","line":""},
{"lineNum":"  529","line":"#if 0"},
{"lineNum":"  530","line":"void"},
{"lineNum":"  531","line":"Independent_operator::print() const"},
{"lineNum":"  532","line":"{"},
{"lineNum":"  533","line":"    Operator::print();"},
{"lineNum":"  534","line":"    int count = 0;"},
{"lineNum":"  535","line":"    for (Lattice_element_slices::const_iterator it = slices.begin();"},
{"lineNum":"  536","line":"            it != slices.end(); ++it) {"},
{"lineNum":"  537","line":"        ++count;"},
{"lineNum":"  538","line":"        std::cout << \"slice \" << count << \": \";"},
{"lineNum":"  539","line":"        (*it)->print();"},
{"lineNum":"  540","line":"    }"},
{"lineNum":"  541","line":"}"},
{"lineNum":"  542","line":"#endif"},
{"lineNum":"  543","line":""},
{"lineNum":"  544","line":"#if 0"},
{"lineNum":"  545","line":"template<class Archive>"},
{"lineNum":"  546","line":"    void"},
{"lineNum":"  547","line":"    Independent_operator::serialize(Archive & ar, const unsigned int version)"},
{"lineNum":"  548","line":"    {"},
{"lineNum":"  549","line":"        ar &"},
{"lineNum":"  550","line":"        BOOST_SERIALIZATION_BASE_OBJECT_NVP(Operator);"},
{"lineNum":"  551","line":"        ar & BOOST_SERIALIZATION_NVP(slices);"},
{"lineNum":"  552","line":"        ar & BOOST_SERIALIZATION_NVP(operations);"},
{"lineNum":"  553","line":"        ar & BOOST_SERIALIZATION_NVP(operations_revisions);"},
{"lineNum":"  554","line":"        ar & BOOST_SERIALIZATION_NVP(operations_reference_particle);"},
{"lineNum":"  555","line":"        ar & BOOST_SERIALIZATION_NVP(operation_extractor_map_sptr);"},
{"lineNum":"  556","line":"        ar & BOOST_SERIALIZATION_NVP(aperture_operation_extractor_map_sptr);"},
{"lineNum":"  557","line":"        ar & BOOST_SERIALIZATION_NVP(have_operations);"},
{"lineNum":"  558","line":"    }"},
{"lineNum":"  559","line":""},
{"lineNum":"  560","line":"template"},
{"lineNum":"  561","line":"void"},
{"lineNum":"  562","line":"Independent_operator::serialize<boost::archive::binary_oarchive >("},
{"lineNum":"  563","line":"        boost::archive::binary_oarchive & ar, const unsigned int version);"},
{"lineNum":"  564","line":""},
{"lineNum":"  565","line":"template"},
{"lineNum":"  566","line":"void"},
{"lineNum":"  567","line":"Independent_operator::serialize<boost::archive::xml_oarchive >("},
{"lineNum":"  568","line":"        boost::archive::xml_oarchive & ar, const unsigned int version);"},
{"lineNum":"  569","line":""},
{"lineNum":"  570","line":"template"},
{"lineNum":"  571","line":"void"},
{"lineNum":"  572","line":"Independent_operator::serialize<boost::archive::binary_iarchive >("},
{"lineNum":"  573","line":"        boost::archive::binary_iarchive & ar, const unsigned int version);"},
{"lineNum":"  574","line":""},
{"lineNum":"  575","line":"template"},
{"lineNum":"  576","line":"void"},
{"lineNum":"  577","line":"Independent_operator::serialize<boost::archive::xml_iarchive >("},
{"lineNum":"  578","line":"        boost::archive::xml_iarchive & ar, const unsigned int version);"},
{"lineNum":"  579","line":"#endif"},
{"lineNum":"  580","line":""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 38, "covered" : 0,};
var merged_data = [];
