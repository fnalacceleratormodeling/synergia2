var data = {lines:[
{"lineNum":"    1","line":"/*"},
{"lineNum":"    2","line":"//@HEADER"},
{"lineNum":"    3","line":"// ************************************************************************"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"//                        Kokkos v. 3.0"},
{"lineNum":"    6","line":"//       Copyright (2020) National Technology & Engineering"},
{"lineNum":"    7","line":"//               Solutions of Sandia, LLC (NTESS)."},
{"lineNum":"    8","line":"//"},
{"lineNum":"    9","line":"// Under the terms of Contract DE-NA0003525 with NTESS,"},
{"lineNum":"   10","line":"// the U.S. Government retains certain rights in this software."},
{"lineNum":"   11","line":"//"},
{"lineNum":"   12","line":"// Redistribution and use in source and binary forms, with or without"},
{"lineNum":"   13","line":"// modification, are permitted provided that the following conditions are"},
{"lineNum":"   14","line":"// met:"},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"// 1. Redistributions of source code must retain the above copyright"},
{"lineNum":"   17","line":"// notice, this list of conditions and the following disclaimer."},
{"lineNum":"   18","line":"//"},
{"lineNum":"   19","line":"// 2. Redistributions in binary form must reproduce the above copyright"},
{"lineNum":"   20","line":"// notice, this list of conditions and the following disclaimer in the"},
{"lineNum":"   21","line":"// documentation and/or other materials provided with the distribution."},
{"lineNum":"   22","line":"//"},
{"lineNum":"   23","line":"// 3. Neither the name of the Corporation nor the names of the"},
{"lineNum":"   24","line":"// contributors may be used to endorse or promote products derived from"},
{"lineNum":"   25","line":"// this software without specific prior written permission."},
{"lineNum":"   26","line":"//"},
{"lineNum":"   27","line":"// THIS SOFTWARE IS PROVIDED BY NTESS \"AS IS\" AND ANY"},
{"lineNum":"   28","line":"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"},
{"lineNum":"   29","line":"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR"},
{"lineNum":"   30","line":"// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NTESS OR THE"},
{"lineNum":"   31","line":"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,"},
{"lineNum":"   32","line":"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,"},
{"lineNum":"   33","line":"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR"},
{"lineNum":"   34","line":"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF"},
{"lineNum":"   35","line":"// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING"},
{"lineNum":"   36","line":"// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"},
{"lineNum":"   37","line":"// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   38","line":"//"},
{"lineNum":"   39","line":"// Questions? Contact Christian R. Trott (crtrott@sandia.gov)"},
{"lineNum":"   40","line":"//"},
{"lineNum":"   41","line":"// ************************************************************************"},
{"lineNum":"   42","line":"//@HEADER"},
{"lineNum":"   43","line":"*/"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"/// \\file Kokkos_Layout.hpp"},
{"lineNum":"   46","line":"/// \\brief Declaration of various \\c MemoryLayout options."},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"#ifndef KOKKOS_LAYOUT_HPP"},
{"lineNum":"   49","line":"#define KOKKOS_LAYOUT_HPP"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"#include <cstddef>"},
{"lineNum":"   52","line":"#include <impl/Kokkos_Traits.hpp>"},
{"lineNum":"   53","line":"#include <impl/Kokkos_Tags.hpp>"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"namespace Kokkos {"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"enum { ARRAY_LAYOUT_MAX_RANK = 8 };"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"//----------------------------------------------------------------------------"},
{"lineNum":"   60","line":"/// \\struct LayoutLeft"},
{"lineNum":"   61","line":"/// \\brief Memory layout tag indicating left-to-right (Fortran scheme)"},
{"lineNum":"   62","line":"///   striding of multi-indices."},
{"lineNum":"   63","line":"///"},
{"lineNum":"   64","line":"/// This is an example of a \\c MemoryLayout template parameter of"},
{"lineNum":"   65","line":"/// View.  The memory layout describes how View maps from a"},
{"lineNum":"   66","line":"/// multi-index (i0, i1, ..., ik) to a memory location."},
{"lineNum":"   67","line":"///"},
{"lineNum":"   68","line":"/// \"Layout left\" indicates a mapping where the leftmost index i0"},
{"lineNum":"   69","line":"/// refers to contiguous access, and strides increase for dimensions"},
{"lineNum":"   70","line":"/// going right from there (i1, i2, ...).  This layout imitates how"},
{"lineNum":"   71","line":"/// Fortran stores multi-dimensional arrays.  For the special case of"},
{"lineNum":"   72","line":"/// a two-dimensional array, \"layout left\" is also called \"column"},
{"lineNum":"   73","line":"/// major.\""},
{"lineNum":"   74","line":"struct LayoutLeft {"},
{"lineNum":"   75","line":"  //! Tag this class as a kokkos array layout"},
{"lineNum":"   76","line":"  using array_layout = LayoutLeft;"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"  size_t dimension[ARRAY_LAYOUT_MAX_RANK];"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"  enum : bool { is_extent_constructible = true };"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"  LayoutLeft(LayoutLeft const&) = default;"},
{"lineNum":"   83","line":"  LayoutLeft(LayoutLeft&&)      = default;"},
{"lineNum":"   84","line":"  LayoutLeft& operator=(LayoutLeft const&) = default;"},
{"lineNum":"   85","line":"  LayoutLeft& operator=(LayoutLeft&&) = default;"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   88","line":"  explicit constexpr LayoutLeft(size_t N0 = 0, size_t N1 = 0, size_t N2 = 0,"},
{"lineNum":"   89","line":"                                size_t N3 = 0, size_t N4 = 0, size_t N5 = 0,"},
{"lineNum":"   90","line":"                                size_t N6 = 0, size_t N7 = 0)"},
{"lineNum":"   91","line":"      : dimension{N0, N1, N2, N3, N4, N5, N6, N7} {}","class":"lineNoCov","hits":"0","possible_hits":"29",},
{"lineNum":"   92","line":"};"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"//----------------------------------------------------------------------------"},
{"lineNum":"   95","line":"/// \\struct LayoutRight"},
{"lineNum":"   96","line":"/// \\brief Memory layout tag indicating right-to-left (C or"},
{"lineNum":"   97","line":"///   lexigraphical scheme) striding of multi-indices."},
{"lineNum":"   98","line":"///"},
{"lineNum":"   99","line":"/// This is an example of a \\c MemoryLayout template parameter of"},
{"lineNum":"  100","line":"/// View.  The memory layout describes how View maps from a"},
{"lineNum":"  101","line":"/// multi-index (i0, i1, ..., ik) to a memory location."},
{"lineNum":"  102","line":"///"},
{"lineNum":"  103","line":"/// \"Right layout\" indicates a mapping where the rightmost index ik"},
{"lineNum":"  104","line":"/// refers to contiguous access, and strides increase for dimensions"},
{"lineNum":"  105","line":"/// going left from there.  This layout imitates how C stores"},
{"lineNum":"  106","line":"/// multi-dimensional arrays.  For the special case of a"},
{"lineNum":"  107","line":"/// two-dimensional array, \"layout right\" is also called \"row major.\""},
{"lineNum":"  108","line":"struct LayoutRight {"},
{"lineNum":"  109","line":"  //! Tag this class as a kokkos array layout"},
{"lineNum":"  110","line":"  using array_layout = LayoutRight;"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"  size_t dimension[ARRAY_LAYOUT_MAX_RANK];"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"  enum : bool { is_extent_constructible = true };"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"  LayoutRight(LayoutRight const&) = default;"},
{"lineNum":"  117","line":"  LayoutRight(LayoutRight&&)      = default;"},
{"lineNum":"  118","line":"  LayoutRight& operator=(LayoutRight const&) = default;"},
{"lineNum":"  119","line":"  LayoutRight& operator=(LayoutRight&&) = default;"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  122","line":"  explicit constexpr LayoutRight(size_t N0 = 0, size_t N1 = 0, size_t N2 = 0,"},
{"lineNum":"  123","line":"                                 size_t N3 = 0, size_t N4 = 0, size_t N5 = 0,"},
{"lineNum":"  124","line":"                                 size_t N6 = 0, size_t N7 = 0)"},
{"lineNum":"  125","line":"      : dimension{N0, N1, N2, N3, N4, N5, N6, N7} {}","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":"  126","line":"};"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  129","line":"/// \\struct LayoutStride"},
{"lineNum":"  130","line":"/// \\brief  Memory layout tag indicated arbitrarily strided"},
{"lineNum":"  131","line":"///         multi-index mapping into contiguous memory."},
{"lineNum":"  132","line":"struct LayoutStride {"},
{"lineNum":"  133","line":"  //! Tag this class as a kokkos array layout"},
{"lineNum":"  134","line":"  using array_layout = LayoutStride;"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"  size_t dimension[ARRAY_LAYOUT_MAX_RANK];"},
{"lineNum":"  137","line":"  size_t stride[ARRAY_LAYOUT_MAX_RANK];"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"  enum : bool { is_extent_constructible = false };"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"  LayoutStride(LayoutStride const&) = default;"},
{"lineNum":"  142","line":"  LayoutStride(LayoutStride&&)      = default;"},
{"lineNum":"  143","line":"  LayoutStride& operator=(LayoutStride const&) = default;"},
{"lineNum":"  144","line":"  LayoutStride& operator=(LayoutStride&&) = default;"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"  /** \\brief  Compute strides from ordered dimensions."},
{"lineNum":"  147","line":"   *"},
{"lineNum":"  148","line":"   *  Values of order uniquely form the set [0..rank)"},
{"lineNum":"  149","line":"   *  and specify ordering of the dimensions."},
{"lineNum":"  150","line":"   *  Order = {0,1,2,...} is LayoutLeft"},
{"lineNum":"  151","line":"   *  Order = {...,2,1,0} is LayoutRight"},
{"lineNum":"  152","line":"   */"},
{"lineNum":"  153","line":"  template <typename iTypeOrder, typename iTypeDimen>"},
{"lineNum":"  154","line":"  KOKKOS_INLINE_FUNCTION static LayoutStride order_dimensions("},
{"lineNum":"  155","line":"      int const rank, iTypeOrder const* const order,"},
{"lineNum":"  156","line":"      iTypeDimen const* const dimen) {"},
{"lineNum":"  157","line":"    LayoutStride tmp;"},
{"lineNum":"  158","line":"    // Verify valid rank order:"},
{"lineNum":"  159","line":"    int check_input = ARRAY_LAYOUT_MAX_RANK < rank ? 0 : int(1 << rank) - 1;"},
{"lineNum":"  160","line":"    for (int r = 0; r < ARRAY_LAYOUT_MAX_RANK; ++r) {"},
{"lineNum":"  161","line":"      tmp.dimension[r] = 0;"},
{"lineNum":"  162","line":"      tmp.stride[r]    = 0;"},
{"lineNum":"  163","line":"    }"},
{"lineNum":"  164","line":"    for (int r = 0; r < rank; ++r) {"},
{"lineNum":"  165","line":"      check_input &= ~int(1 << order[r]);"},
{"lineNum":"  166","line":"    }"},
{"lineNum":"  167","line":"    if (0 == check_input) {"},
{"lineNum":"  168","line":"      size_t n = 1;"},
{"lineNum":"  169","line":"      for (int r = 0; r < rank; ++r) {"},
{"lineNum":"  170","line":"        tmp.stride[order[r]] = n;"},
{"lineNum":"  171","line":"        n *= (dimen[order[r]]);"},
{"lineNum":"  172","line":"        tmp.dimension[r] = dimen[r];"},
{"lineNum":"  173","line":"      }"},
{"lineNum":"  174","line":"    }"},
{"lineNum":"  175","line":"    return tmp;"},
{"lineNum":"  176","line":"  }"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  179","line":"  explicit constexpr LayoutStride(size_t N0 = 0, size_t S0 = 0, size_t N1 = 0,"},
{"lineNum":"  180","line":"                                  size_t S1 = 0, size_t N2 = 0, size_t S2 = 0,"},
{"lineNum":"  181","line":"                                  size_t N3 = 0, size_t S3 = 0, size_t N4 = 0,"},
{"lineNum":"  182","line":"                                  size_t S4 = 0, size_t N5 = 0, size_t S5 = 0,"},
{"lineNum":"  183","line":"                                  size_t N6 = 0, size_t S6 = 0, size_t N7 = 0,"},
{"lineNum":"  184","line":"                                  size_t S7 = 0)"},
{"lineNum":"  185","line":"      : dimension{N0, N1, N2, N3, N4, N5, N6, N7}, stride{S0, S1, S2, S3,"},
{"lineNum":"  186","line":"                                                          S4, S5, S6, S7} {}"},
{"lineNum":"  187","line":"};"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"// ==================================================================================="},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"//////////////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"enum class Iterate {"},
{"lineNum":"  194","line":"  Default,"},
{"lineNum":"  195","line":"  Left,  // Left indices stride fastest"},
{"lineNum":"  196","line":"  Right  // Right indices stride fastest"},
{"lineNum":"  197","line":"};"},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"// To check for LayoutTiled"},
{"lineNum":"  200","line":"// This is to hide extra compile-time \'identifier\' info within the LayoutTiled"},
{"lineNum":"  201","line":"// class by not relying on template specialization to include the ArgN*\'s"},
{"lineNum":"  202","line":"template <typename LayoutTiledCheck, class Enable = void>"},
{"lineNum":"  203","line":"struct is_layouttiled : std::false_type {};"},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"template <typename LayoutTiledCheck>"},
{"lineNum":"  206","line":"struct is_layouttiled<"},
{"lineNum":"  207","line":"    LayoutTiledCheck,"},
{"lineNum":"  208","line":"    typename std::enable_if<LayoutTiledCheck::is_array_layout_tiled>::type>"},
{"lineNum":"  209","line":"    : std::true_type {};"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"namespace Experimental {"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"/// LayoutTiled"},
{"lineNum":"  214","line":"// Must have Rank >= 2"},
{"lineNum":"  215","line":"template <"},
{"lineNum":"  216","line":"    Kokkos::Iterate OuterP, Kokkos::Iterate InnerP, unsigned ArgN0,"},
{"lineNum":"  217","line":"    unsigned ArgN1, unsigned ArgN2 = 0, unsigned ArgN3 = 0, unsigned ArgN4 = 0,"},
{"lineNum":"  218","line":"    unsigned ArgN5 = 0, unsigned ArgN6 = 0, unsigned ArgN7 = 0,"},
{"lineNum":"  219","line":"    bool IsPowerOfTwo ="},
{"lineNum":"  220","line":"        (Kokkos::Impl::is_integral_power_of_two(ArgN0) &&"},
{"lineNum":"  221","line":"         Kokkos::Impl::is_integral_power_of_two(ArgN1) &&"},
{"lineNum":"  222","line":"         (Kokkos::Impl::is_integral_power_of_two(ArgN2) || (ArgN2 == 0)) &&"},
{"lineNum":"  223","line":"         (Kokkos::Impl::is_integral_power_of_two(ArgN3) || (ArgN3 == 0)) &&"},
{"lineNum":"  224","line":"         (Kokkos::Impl::is_integral_power_of_two(ArgN4) || (ArgN4 == 0)) &&"},
{"lineNum":"  225","line":"         (Kokkos::Impl::is_integral_power_of_two(ArgN5) || (ArgN5 == 0)) &&"},
{"lineNum":"  226","line":"         (Kokkos::Impl::is_integral_power_of_two(ArgN6) || (ArgN6 == 0)) &&"},
{"lineNum":"  227","line":"         (Kokkos::Impl::is_integral_power_of_two(ArgN7) || (ArgN7 == 0)))>"},
{"lineNum":"  228","line":"struct LayoutTiled {"},
{"lineNum":"  229","line":"  static_assert(IsPowerOfTwo,"},
{"lineNum":"  230","line":"                \"LayoutTiled must be given power-of-two tile dimensions\");"},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"#if 0"},
{"lineNum":"  233","line":"  static_assert( (Impl::is_integral_power_of_two(ArgN0) ) &&"},
{"lineNum":"  234","line":"                 (Impl::is_integral_power_of_two(ArgN1) ) &&"},
{"lineNum":"  235","line":"                 (Impl::is_integral_power_of_two(ArgN2) || (ArgN2 == 0) ) &&"},
{"lineNum":"  236","line":"                 (Impl::is_integral_power_of_two(ArgN3) || (ArgN3 == 0) ) &&"},
{"lineNum":"  237","line":"                 (Impl::is_integral_power_of_two(ArgN4) || (ArgN4 == 0) ) &&"},
{"lineNum":"  238","line":"                 (Impl::is_integral_power_of_two(ArgN5) || (ArgN5 == 0) ) &&"},
{"lineNum":"  239","line":"                 (Impl::is_integral_power_of_two(ArgN6) || (ArgN6 == 0) ) &&"},
{"lineNum":"  240","line":"                 (Impl::is_integral_power_of_two(ArgN7) || (ArgN7 == 0) )"},
{"lineNum":"  241","line":"               , \"LayoutTiled must be given power-of-two tile dimensions\" );"},
{"lineNum":"  242","line":"#endif"},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"  using array_layout = LayoutTiled<OuterP, InnerP, ArgN0, ArgN1, ArgN2, ArgN3,"},
{"lineNum":"  245","line":"                                   ArgN4, ArgN5, ArgN6, ArgN7, IsPowerOfTwo>;"},
{"lineNum":"  246","line":"  static constexpr Iterate outer_pattern = OuterP;"},
{"lineNum":"  247","line":"  static constexpr Iterate inner_pattern = InnerP;"},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"  enum { N0 = ArgN0 };"},
{"lineNum":"  250","line":"  enum { N1 = ArgN1 };"},
{"lineNum":"  251","line":"  enum { N2 = ArgN2 };"},
{"lineNum":"  252","line":"  enum { N3 = ArgN3 };"},
{"lineNum":"  253","line":"  enum { N4 = ArgN4 };"},
{"lineNum":"  254","line":"  enum { N5 = ArgN5 };"},
{"lineNum":"  255","line":"  enum { N6 = ArgN6 };"},
{"lineNum":"  256","line":"  enum { N7 = ArgN7 };"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"  size_t dimension[ARRAY_LAYOUT_MAX_RANK];"},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"  enum : bool { is_extent_constructible = true };"},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"  LayoutTiled(LayoutTiled const&) = default;"},
{"lineNum":"  263","line":"  LayoutTiled(LayoutTiled&&)      = default;"},
{"lineNum":"  264","line":"  LayoutTiled& operator=(LayoutTiled const&) = default;"},
{"lineNum":"  265","line":"  LayoutTiled& operator=(LayoutTiled&&) = default;"},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  268","line":"  explicit constexpr LayoutTiled(size_t argN0 = 0, size_t argN1 = 0,"},
{"lineNum":"  269","line":"                                 size_t argN2 = 0, size_t argN3 = 0,"},
{"lineNum":"  270","line":"                                 size_t argN4 = 0, size_t argN5 = 0,"},
{"lineNum":"  271","line":"                                 size_t argN6 = 0, size_t argN7 = 0)"},
{"lineNum":"  272","line":"      : dimension{argN0, argN1, argN2, argN3, argN4, argN5, argN6, argN7} {}"},
{"lineNum":"  273","line":"};"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"}  // namespace Experimental"},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"// For use with view_copy"},
{"lineNum":"  278","line":"template <typename... Layout>"},
{"lineNum":"  279","line":"struct layout_iterate_type_selector {"},
{"lineNum":"  280","line":"  static const Kokkos::Iterate outer_iteration_pattern ="},
{"lineNum":"  281","line":"      Kokkos::Iterate::Default;"},
{"lineNum":"  282","line":"  static const Kokkos::Iterate inner_iteration_pattern ="},
{"lineNum":"  283","line":"      Kokkos::Iterate::Default;"},
{"lineNum":"  284","line":"};"},
{"lineNum":"  285","line":""},
{"lineNum":"  286","line":"template <>"},
{"lineNum":"  287","line":"struct layout_iterate_type_selector<Kokkos::LayoutRight> {"},
{"lineNum":"  288","line":"  static const Kokkos::Iterate outer_iteration_pattern = Kokkos::Iterate::Right;"},
{"lineNum":"  289","line":"  static const Kokkos::Iterate inner_iteration_pattern = Kokkos::Iterate::Right;"},
{"lineNum":"  290","line":"};"},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"template <>"},
{"lineNum":"  293","line":"struct layout_iterate_type_selector<Kokkos::LayoutLeft> {"},
{"lineNum":"  294","line":"  static const Kokkos::Iterate outer_iteration_pattern = Kokkos::Iterate::Left;"},
{"lineNum":"  295","line":"  static const Kokkos::Iterate inner_iteration_pattern = Kokkos::Iterate::Left;"},
{"lineNum":"  296","line":"};"},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":"template <>"},
{"lineNum":"  299","line":"struct layout_iterate_type_selector<Kokkos::LayoutStride> {"},
{"lineNum":"  300","line":"  static const Kokkos::Iterate outer_iteration_pattern ="},
{"lineNum":"  301","line":"      Kokkos::Iterate::Default;"},
{"lineNum":"  302","line":"  static const Kokkos::Iterate inner_iteration_pattern ="},
{"lineNum":"  303","line":"      Kokkos::Iterate::Default;"},
{"lineNum":"  304","line":"};"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"template <unsigned ArgN0, unsigned ArgN1, unsigned ArgN2, unsigned ArgN3,"},
{"lineNum":"  307","line":"          unsigned ArgN4, unsigned ArgN5, unsigned ArgN6, unsigned ArgN7>"},
{"lineNum":"  308","line":"struct layout_iterate_type_selector<Kokkos::Experimental::LayoutTiled<"},
{"lineNum":"  309","line":"    Kokkos::Iterate::Left, Kokkos::Iterate::Left, ArgN0, ArgN1, ArgN2, ArgN3,"},
{"lineNum":"  310","line":"    ArgN4, ArgN5, ArgN6, ArgN7, true> > {"},
{"lineNum":"  311","line":"  static const Kokkos::Iterate outer_iteration_pattern = Kokkos::Iterate::Left;"},
{"lineNum":"  312","line":"  static const Kokkos::Iterate inner_iteration_pattern = Kokkos::Iterate::Left;"},
{"lineNum":"  313","line":"};"},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"template <unsigned ArgN0, unsigned ArgN1, unsigned ArgN2, unsigned ArgN3,"},
{"lineNum":"  316","line":"          unsigned ArgN4, unsigned ArgN5, unsigned ArgN6, unsigned ArgN7>"},
{"lineNum":"  317","line":"struct layout_iterate_type_selector<Kokkos::Experimental::LayoutTiled<"},
{"lineNum":"  318","line":"    Kokkos::Iterate::Right, Kokkos::Iterate::Left, ArgN0, ArgN1, ArgN2, ArgN3,"},
{"lineNum":"  319","line":"    ArgN4, ArgN5, ArgN6, ArgN7, true> > {"},
{"lineNum":"  320","line":"  static const Kokkos::Iterate outer_iteration_pattern = Kokkos::Iterate::Right;"},
{"lineNum":"  321","line":"  static const Kokkos::Iterate inner_iteration_pattern = Kokkos::Iterate::Left;"},
{"lineNum":"  322","line":"};"},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"template <unsigned ArgN0, unsigned ArgN1, unsigned ArgN2, unsigned ArgN3,"},
{"lineNum":"  325","line":"          unsigned ArgN4, unsigned ArgN5, unsigned ArgN6, unsigned ArgN7>"},
{"lineNum":"  326","line":"struct layout_iterate_type_selector<Kokkos::Experimental::LayoutTiled<"},
{"lineNum":"  327","line":"    Kokkos::Iterate::Left, Kokkos::Iterate::Right, ArgN0, ArgN1, ArgN2, ArgN3,"},
{"lineNum":"  328","line":"    ArgN4, ArgN5, ArgN6, ArgN7, true> > {"},
{"lineNum":"  329","line":"  static const Kokkos::Iterate outer_iteration_pattern = Kokkos::Iterate::Left;"},
{"lineNum":"  330","line":"  static const Kokkos::Iterate inner_iteration_pattern = Kokkos::Iterate::Right;"},
{"lineNum":"  331","line":"};"},
{"lineNum":"  332","line":""},
{"lineNum":"  333","line":"template <unsigned ArgN0, unsigned ArgN1, unsigned ArgN2, unsigned ArgN3,"},
{"lineNum":"  334","line":"          unsigned ArgN4, unsigned ArgN5, unsigned ArgN6, unsigned ArgN7>"},
{"lineNum":"  335","line":"struct layout_iterate_type_selector<Kokkos::Experimental::LayoutTiled<"},
{"lineNum":"  336","line":"    Kokkos::Iterate::Right, Kokkos::Iterate::Right, ArgN0, ArgN1, ArgN2, ArgN3,"},
{"lineNum":"  337","line":"    ArgN4, ArgN5, ArgN6, ArgN7, true> > {"},
{"lineNum":"  338","line":"  static const Kokkos::Iterate outer_iteration_pattern = Kokkos::Iterate::Right;"},
{"lineNum":"  339","line":"  static const Kokkos::Iterate inner_iteration_pattern = Kokkos::Iterate::Right;"},
{"lineNum":"  340","line":"};"},
{"lineNum":"  341","line":""},
{"lineNum":"  342","line":"}  // namespace Kokkos"},
{"lineNum":"  343","line":""},
{"lineNum":"  344","line":"#endif  // #ifndef KOKKOS_LAYOUT_HPP"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 2, "covered" : 0,};
var merged_data = [];
