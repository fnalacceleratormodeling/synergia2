var data = {lines:[
{"lineNum":"    1","line":"#ifndef FF_NONLINEARLENS_H"},
{"lineNum":"    2","line":"#define FF_NONLINEARLENS_H"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#include \"synergia/libFF/ff_algorithm.h\""},
{"lineNum":"    5","line":"#include \"synergia/libFF/ff_patterned_propagator.h\""},
{"lineNum":"    6","line":"#include \"synergia/utils/simple_timer.h\""},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"namespace FF_nllens"},
{"lineNum":"   10","line":"{"},
{"lineNum":"   11","line":"    template<class BunchT>"},
{"lineNum":"   12","line":"    void apply(Lattice_element_slice const& slice, BunchT& bunch)"},
{"lineNum":"   13","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   14","line":"        auto const& elem = slice.get_lattice_element();"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"        const double l    = elem.get_double_attribute(\"l\", 0.0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   17","line":"        const double knll = elem.get_double_attribute(\"knll\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   18","line":"        const double cnll = elem.get_double_attribute(\"cnll\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"        if (!close_to_zero(l))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   21","line":"            throw std::runtime_error(\"nonlinear lens has non-zero length\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"        const double icnll = 1.0 / cnll;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   24","line":"        const double kick = -knll * icnll;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   25","line":"        const double k[2] = {icnll, kick};","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"        using gsv_t = typename std::conditional<"},
{"lineNum":"   28","line":"            std::is_floating_point<typename BunchT::part_t>::value,"},
{"lineNum":"   29","line":"            Vec<double>, typename BunchT::gsv_t>::type;"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"        using pp = FF_patterned_propagator<BunchT, gsv_t,"},
{"lineNum":"   32","line":"              FF_algorithm::nllens_unit<gsv_t>,"},
{"lineNum":"   33","line":"              FF_algorithm::nllens_unit<double> >;"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"        Reference_particle & ref = bunch.get_design_reference_particle();"},
{"lineNum":"   36","line":"        pp::get_reference_cdt_zero(ref, k);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"        double xp = ref.get_state()[Bunch::xp];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   39","line":"        double yp = ref.get_state()[Bunch::yp];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"        if (std::isnan(xp) || std::isnan(yp))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   42","line":"        {"},
{"lineNum":"   43","line":"            throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   44","line":"                    \"the bunch reference particle hits the sigularity region \""},
{"lineNum":"   45","line":"                    \"when propagating through a nonlinearlens\");"},
{"lineNum":"   46","line":"        }"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"        pp::apply_thin_kick(bunch, ParticleGroup::regular, k);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   49","line":"        pp::apply_thin_kick(bunch, ParticleGroup::spectator, k);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   50","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   51","line":"}"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"#endif // FF_NONLINEARLENS_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 17, "covered" : 0,};
var merged_data = [];
