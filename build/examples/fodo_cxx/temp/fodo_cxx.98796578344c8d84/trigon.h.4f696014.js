var data = {lines:[
{"lineNum":"    1","line":"#ifndef TRIGON_H"},
{"lineNum":"    2","line":"#define TRIGON_H"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#include \"synergia/foundation/trigon_traits.h\""},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"#include <algorithm>"},
{"lineNum":"    7","line":"#include <complex>"},
{"lineNum":"    8","line":"#include <iostream> // jfa remove me!!!!"},
{"lineNum":"    9","line":"#include <unordered_map>"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"#include <Kokkos_Core.hpp>"},
{"lineNum":"   12","line":"//#include <Kokkos_UnorderedMap.hpp>"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"#include <Eigen/Eigen>"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"#include \"synergia/utils/multi_array_typedefs.h\""},
{"lineNum":"   17","line":"#include \"synergia/utils/kokkos_types.h\""},
{"lineNum":"   18","line":"#include \"synergia/utils/simple_timer.h\""},
{"lineNum":"   19","line":"#include \"synergia/utils/json.h\""},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"template<class T, size_t SIZE>"},
{"lineNum":"   22","line":"struct arr_t"},
{"lineNum":"   23","line":"{"},
{"lineNum":"   24","line":"    T data_[SIZE] = {};","class":"lineNoCov","hits":"0","possible_hits":"408",},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   27","line":"    constexpr size_t size() const"},
{"lineNum":"   28","line":"    { return SIZE; }"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   31","line":"    void fill(T t)"},
{"lineNum":"   32","line":"    { for(size_t i=0; i<SIZE; ++i) data_[i] = t; }","class":"lineNoCov","hits":"0","possible_hits":"26",},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   35","line":"    T& at(size_t idx) { return data_[idx]; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   38","line":"    T const& at(size_t idx) const { return data_[idx]; }"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   41","line":"    T& operator[](size_t idx) { return data_[idx]; }","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   44","line":"    T const& operator[](size_t idx) const { return data_[idx]; }"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   47","line":"    T*       begin()       { return data_; }"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   50","line":"    T const* begin() const { return data_; }"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   53","line":"    T*       end()         { return data_ + SIZE; }"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   56","line":"    T const* end() const   { return data_ + SIZE; }"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"    // conversion"},
{"lineNum":"   59","line":"    template<class U>"},
{"lineNum":"   60","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   61","line":"    void from(arr_t<U, SIZE> const& o)"},
{"lineNum":"   62","line":"    { for(int i=0; i<SIZE; ++i) data_[i] = static_cast<T>(o.data_[i]); }"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"    template<class U>"},
{"lineNum":"   65","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   66","line":"    arr_t<U, SIZE> to() const"},
{"lineNum":"   67","line":"    {"},
{"lineNum":"   68","line":"        arr_t<U, SIZE> ret;"},
{"lineNum":"   69","line":"        for(int i=0; i<SIZE; ++i) ret.data_[i] = static_cast<U>(data_[i]);"},
{"lineNum":"   70","line":"        return ret;"},
{"lineNum":"   71","line":"    }"},
{"lineNum":"   72","line":"};"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"template <typename T, unsigned int Power, unsigned int Dim>"},
{"lineNum":"   75","line":"class Trigon;"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"template <typename TRIGON>"},
{"lineNum":"   78","line":"class TMapping;"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"namespace trigon_impl"},
{"lineNum":"   81","line":"{"},
{"lineNum":"   82","line":"    template<class T, size_t SIZE>"},
{"lineNum":"   83","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   84","line":"    void sort(arr_t<T, SIZE> & arr)"},
{"lineNum":"   85","line":"    {"},
{"lineNum":"   86","line":"        for(size_t i=0; i<SIZE-1; ++i)"},
{"lineNum":"   87","line":"        {"},
{"lineNum":"   88","line":"            for(size_t j=i+1; j<SIZE; ++j)"},
{"lineNum":"   89","line":"            {"},
{"lineNum":"   90","line":"                if (arr[i] > arr[j])"},
{"lineNum":"   91","line":"                {"},
{"lineNum":"   92","line":"                    T temp = arr[i];"},
{"lineNum":"   93","line":"                    arr[i] = arr[j];"},
{"lineNum":"   94","line":"                    arr[j] = temp;"},
{"lineNum":"   95","line":"                }"},
{"lineNum":"   96","line":"            }"},
{"lineNum":"   97","line":"        }"},
{"lineNum":"   98","line":"    }"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"    //__constant__ double map[100];"},
{"lineNum":"  101","line":"}"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"template<class T, size_t N>"},
{"lineNum":"  104","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  105","line":"bool operator==(arr_t<T, N> const& lhs, arr_t<T, N> const& rhs)"},
{"lineNum":"  106","line":"{"},
{"lineNum":"  107","line":"    for(size_t i=0; i<N; ++i)"},
{"lineNum":"  108","line":"        if (lhs[i] != rhs[i]) return false;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  109","line":"    return true;"},
{"lineNum":"  110","line":"}"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  113","line":"constexpr int"},
{"lineNum":"  114","line":"factorial(int n)"},
{"lineNum":"  115","line":"{"},
{"lineNum":"  116","line":"    return n <= 1 ? 1 : (n * factorial(n - 1));"},
{"lineNum":"  117","line":"}"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"template <typename T, unsigned int Power, unsigned int Dim>"},
{"lineNum":"  120","line":"class Trigon;"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  123","line":"constexpr unsigned int"},
{"lineNum":"  124","line":"array_length(unsigned int i)"},
{"lineNum":"  125","line":"{"},
{"lineNum":"  126","line":"    return (i == 0) ? 1 : i;"},
{"lineNum":"  127","line":"}"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"// exp array with the dim of power, where the elements are the index of the"},
{"lineNum":"  130","line":"// coordinates. E.g.,"},
{"lineNum":"  131","line":"// [1, 2 ,3] is the exp array for a 3rd order term for xyz"},
{"lineNum":"  132","line":"// [1, 1, 0] => x*x => x^2"},
{"lineNum":"  133","line":"// [1, 2, 2] => x*y*y => xy^2"},
{"lineNum":"  134","line":"template <unsigned int Power>"},
{"lineNum":"  135","line":"using Index_t = arr_t<size_t, array_length(Power)>;"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"// array holding the exp indices for each term in the terms array"},
{"lineNum":"  138","line":"template <unsigned int Power, unsigned int Dim>"},
{"lineNum":"  139","line":"using Indices_t = arr_t<Index_t<Power>, Trigon<double, Power, Dim>::count>;"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"template <unsigned int Power, unsigned int Dim>"},
{"lineNum":"  142","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  143","line":"std::enable_if_t<Power==0, Indices_t<Power, Dim>>"},
{"lineNum":"  144","line":"indices()"},
{"lineNum":"  145","line":"{"},
{"lineNum":"  146","line":"    Indices_t<Power, Dim> retval;"},
{"lineNum":"  147","line":"    retval[0][0] = 0;"},
{"lineNum":"  148","line":"    return retval;"},
{"lineNum":"  149","line":"}"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"template <unsigned int Power, unsigned int Dim>"},
{"lineNum":"  152","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  153","line":"std::enable_if_t<Power==1, Indices_t<Power, Dim>>"},
{"lineNum":"  154","line":"indices()"},
{"lineNum":"  155","line":"{"},
{"lineNum":"  156","line":"    Indices_t<Power, Dim> retval;"},
{"lineNum":"  157","line":"    for (size_t i=0; i<Dim; ++i) retval[i][0] = i;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  158","line":"    return retval;"},
{"lineNum":"  159","line":"}"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"#if 0"},
{"lineNum":"  162","line":"template <unsigned int Power, unsigned int Dim>"},
{"lineNum":"  163","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  164","line":"std::enable_if_t<((Power == 1) || (Power == 0)), Indices_t<Power, Dim>>"},
{"lineNum":"  165","line":"indices()"},
{"lineNum":"  166","line":"{"},
{"lineNum":"  167","line":"    Indices_t<Power, Dim> retval;"},
{"lineNum":"  168","line":"    if (Power == 0) {"},
{"lineNum":"  169","line":"        retval[0][0] = 0;"},
{"lineNum":"  170","line":"    } else {"},
{"lineNum":"  171","line":"        for (size_t i = 0; i < Dim; ++i) {"},
{"lineNum":"  172","line":"            retval[i][0] = i;"},
{"lineNum":"  173","line":"        }"},
{"lineNum":"  174","line":"    }"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"    return retval;"},
{"lineNum":"  177","line":"}"},
{"lineNum":"  178","line":"#endif"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"template <unsigned int Power, unsigned int Dim>"},
{"lineNum":"  181","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  182","line":"std::enable_if_t<(Power > 1), Indices_t<Power, Dim>>"},
{"lineNum":"  183","line":"indices()"},
{"lineNum":"  184","line":"{"},
{"lineNum":"  185","line":"    Indices_t<Power - 1, Dim> subindices = indices<Power - 1, Dim>();"},
{"lineNum":"  186","line":"    Indices_t<Power, Dim> retval;"},
{"lineNum":"  187","line":"    size_t count = 0;"},
{"lineNum":"  188","line":"    for (size_t i = 0; i < Dim; ++i) {"},
{"lineNum":"  189","line":"        for (size_t j = 0; j < subindices.size(); ++j) {"},
{"lineNum":"  190","line":"            if (subindices[j][0] >= i) {"},
{"lineNum":"  191","line":"                arr_t<size_t, Power> entry;"},
{"lineNum":"  192","line":"                entry[0] = i;"},
{"lineNum":"  193","line":"                for (size_t k = 0; k < (Power - 1); ++k) {"},
{"lineNum":"  194","line":"                    entry[k + 1] = subindices[j][k];"},
{"lineNum":"  195","line":"                }"},
{"lineNum":"  196","line":"                retval[count] = entry;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  197","line":"                ++count;"},
{"lineNum":"  198","line":"            }"},
{"lineNum":"  199","line":"        }"},
{"lineNum":"  200","line":"    }"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"    return retval;"},
{"lineNum":"  203","line":"}"},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"template <unsigned int Length>"},
{"lineNum":"  206","line":"struct Array_hash"},
{"lineNum":"  207","line":"{"},
{"lineNum":"  208","line":"    constexpr static size_t max_dim = 8;"},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  211","line":"    size_t operator()(arr_t<size_t, Length> const& arr) const"},
{"lineNum":"  212","line":"    {"},
{"lineNum":"  213","line":"        size_t sum = 0;"},
{"lineNum":"  214","line":"        size_t mult = 1;"},
{"lineNum":"  215","line":"        for (auto&& i : arr) {"},
{"lineNum":"  216","line":"            sum += mult * i;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  217","line":"            mult *= max_dim;"},
{"lineNum":"  218","line":"        }"},
{"lineNum":"  219","line":"        return sum;"},
{"lineNum":"  220","line":"    }"},
{"lineNum":"  221","line":"};"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"template <unsigned int Power, unsigned int Dim>"},
{"lineNum":"  224","line":"using Map_t = std::unordered_map<arr_t<size_t, Power>, size_t,"},
{"lineNum":"  225","line":"        Array_hash<Power>>;"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"#if 0"},
{"lineNum":"  228","line":"template <unsigned int Power, unsigned int Dim>"},
{"lineNum":"  229","line":"using Map_t = Kokkos::UnorderedMap<arr_t<size_t, Power>, size_t,"},
{"lineNum":"  230","line":"        Kokkos::DefaultExecutionSpace,"},
{"lineNum":"  231","line":"        Array_hash<Power>>;"},
{"lineNum":"  232","line":"#endif"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"template <unsigned int Power, unsigned int Dim>"},
{"lineNum":"  235","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  236","line":"const Indices_t<Power, Dim>&"},
{"lineNum":"  237","line":"canonical_to_index()"},
{"lineNum":"  238","line":"{"},
{"lineNum":"  239","line":"    static const Indices_t<Power, Dim> ind = indices<Power, Dim>();","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  240","line":"    return ind;"},
{"lineNum":"  241","line":"}"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"template <unsigned int Power, unsigned int Dim>"},
{"lineNum":"  244","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  245","line":"const Map_t<Power, Dim>"},
{"lineNum":"  246","line":"fill_index_to_canonical()"},
{"lineNum":"  247","line":"{"},
{"lineNum":"  248","line":"    Map_t<Power, Dim> map;"},
{"lineNum":"  249","line":"    auto the_indices = canonical_to_index<Power, Dim>();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  250","line":"    //auto the_indices = indices<Power, Dim>();"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"    for (size_t i = 0; i < the_indices.size(); ++i) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  253","line":"        map[the_indices[i]] = i;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  254","line":"    }"},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"    return map;"},
{"lineNum":"  257","line":"}"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"template <unsigned int Power, unsigned int Dim>"},
{"lineNum":"  260","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  261","line":"const Map_t<Power, Dim>&"},
{"lineNum":"  262","line":"index_to_canonical()"},
{"lineNum":"  263","line":"{"},
{"lineNum":"  264","line":"    static const Map_t<Power, Dim> map = fill_index_to_canonical<Power, Dim>();","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  265","line":"    return map;"},
{"lineNum":"  266","line":"}"},
{"lineNum":"  267","line":""},
{"lineNum":"  268","line":"template <typename T, unsigned int Power, unsigned int Dim>"},
{"lineNum":"  269","line":"class Trigon"},
{"lineNum":"  270","line":"{"},
{"lineNum":"  271","line":"public:"},
{"lineNum":"  272","line":""},
{"lineNum":"  273","line":"    using data_type = T;"},
{"lineNum":"  274","line":"    static constexpr unsigned int dim = Dim;"},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"    static constexpr unsigned int count ="},
{"lineNum":"  277","line":"        factorial(Dim+Power-1) / (factorial(Dim-1) * factorial(Power));"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"    typedef arr_t<T, count> Terms_t;"},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"    Trigon<T, Power - 1, Dim> lower;"},
{"lineNum":"  282","line":"    Terms_t terms;"},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  285","line":"    Trigon() : lower()"},
{"lineNum":"  286","line":"    {"},
{"lineNum":"  287","line":"        terms.fill(0);"},
{"lineNum":"  288","line":"    }"},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  291","line":"    Trigon(T val) : lower(val)"},
{"lineNum":"  292","line":"    {"},
{"lineNum":"  293","line":"        terms.fill(0);"},
{"lineNum":"  294","line":"    }"},
{"lineNum":"  295","line":""},
{"lineNum":"  296","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  297","line":"    Trigon(T val, size_t index) : lower(val)"},
{"lineNum":"  298","line":"    {"},
{"lineNum":"  299","line":"        terms.fill(0);"},
{"lineNum":"  300","line":"        get_subpower<1>().terms[index] = 1; // jfa fixme"},
{"lineNum":"  301","line":"    }"},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"    // implicit conversion"},
{"lineNum":"  304","line":"    template<class U>"},
{"lineNum":"  305","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  306","line":"    explicit Trigon(Trigon<U, Power, Dim> const& o)"},
{"lineNum":"  307","line":"    : terms(), lower(o.lower) { terms.from(o.terms); }"},
{"lineNum":"  308","line":""},
{"lineNum":"  309","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  310","line":"    static constexpr unsigned int power() { return Power; }"},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  313","line":"    const T& value() const { return get_subpower<0>().terms[0]; }"},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  316","line":"    T& value() { return get_subpower<0>().terms[0]; }"},
{"lineNum":"  317","line":""},
{"lineNum":"  318","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  319","line":"    void set(T val)"},
{"lineNum":"  320","line":"    {"},
{"lineNum":"  321","line":"        terms.fill(0);"},
{"lineNum":"  322","line":"        lower.set(val);"},
{"lineNum":"  323","line":"    }"},
{"lineNum":"  324","line":""},
{"lineNum":"  325","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  326","line":"    void set(T val, size_t index)"},
{"lineNum":"  327","line":"    {"},
{"lineNum":"  328","line":"        set(val);"},
{"lineNum":"  329","line":"        get_subpower<1>().terms[index] = 1;","class":"lineNoCov","hits":"0","possible_hits":"24",},
{"lineNum":"  330","line":"    }"},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"    template <unsigned int Subpower>"},
{"lineNum":"  333","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  334","line":"    typename std::enable_if_t<(Subpower < Power), Trigon<T, Subpower, Dim>&>"},
{"lineNum":"  335","line":"    get_subpower()"},
{"lineNum":"  336","line":"    { return lower.template get_subpower<Subpower>(); }"},
{"lineNum":"  337","line":""},
{"lineNum":"  338","line":"    template <unsigned int Subpower>"},
{"lineNum":"  339","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  340","line":"    typename std::enable_if_t<(Subpower < Power), Trigon<T, Subpower, Dim> const&>"},
{"lineNum":"  341","line":"    get_subpower() const"},
{"lineNum":"  342","line":"    { return lower.template get_subpower<Subpower>(); }"},
{"lineNum":"  343","line":""},
{"lineNum":"  344","line":"    template <unsigned int Subpower>"},
{"lineNum":"  345","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  346","line":"    typename std::enable_if_t<(Subpower == Power), Trigon<T, Subpower, Dim>&>"},
{"lineNum":"  347","line":"    get_subpower()"},
{"lineNum":"  348","line":"    { return *this; }"},
{"lineNum":"  349","line":""},
{"lineNum":"  350","line":"    template <unsigned int Subpower>"},
{"lineNum":"  351","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  352","line":"    typename std::enable_if_t<(Subpower == Power), Trigon<T, Subpower, Dim> const&>"},
{"lineNum":"  353","line":"    get_subpower() const"},
{"lineNum":"  354","line":"    { return *this; }"},
{"lineNum":"  355","line":""},
{"lineNum":"  356","line":"    template <typename F>"},
{"lineNum":"  357","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  358","line":"    void each_term(F f)"},
{"lineNum":"  359","line":"    {"},
{"lineNum":"  360","line":"        auto inds = indices<Power, Dim>();"},
{"lineNum":"  361","line":"        for(int i=0; i<terms.size(); ++i) f(i, inds[i], terms[i]);"},
{"lineNum":"  362","line":"        lower.each_term(f);"},
{"lineNum":"  363","line":"    }"},
{"lineNum":"  364","line":""},
{"lineNum":"  365","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  366","line":"    void set_term(size_t idx, T const& val)"},
{"lineNum":"  367","line":"    { terms[idx] = val; }"},
{"lineNum":"  368","line":""},
{"lineNum":"  369","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  370","line":"    T get_term(size_t idx)"},
{"lineNum":"  371","line":"    { return terms[idx]; }"},
{"lineNum":"  372","line":""},
{"lineNum":"  373","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  374","line":"    void set_term(unsigned int power, size_t idx, T const& val)"},
{"lineNum":"  375","line":"    {"},
{"lineNum":"  376","line":"        if (power == Power) set_term(idx, val);"},
{"lineNum":"  377","line":"        else if (power == 0) get_subpower<0>().set_term(idx, val);"},
{"lineNum":"  378","line":"        else if (power < Power) lower.set_term(power, idx, val);"},
{"lineNum":"  379","line":"    }"},
{"lineNum":"  380","line":""},
{"lineNum":"  381","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  382","line":"    T get_term(unsigned int power, size_t idx)"},
{"lineNum":"  383","line":"    {"},
{"lineNum":"  384","line":"        if (power == Power) return get_term(idx);"},
{"lineNum":"  385","line":"        else if (power == 0) return get_subpower<0>().get_term(idx);"},
{"lineNum":"  386","line":"        else if (power < Power) return lower.get_term(power, idx);"},
{"lineNum":"  387","line":"        return T{};"},
{"lineNum":"  388","line":"    }"},
{"lineNum":"  389","line":""},
{"lineNum":"  390","line":"    // keep terms with power in [lower, upper]"},
{"lineNum":"  391","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  392","line":"    void filter(unsigned int p_lower, unsigned int p_upper)"},
{"lineNum":"  393","line":"    {"},
{"lineNum":"  394","line":"        if (Power>p_upper || Power<p_lower) terms.fill(0);"},
{"lineNum":"  395","line":"        lower.filter(p_lower, p_upper);"},
{"lineNum":"  396","line":"    }"},
{"lineNum":"  397","line":""},
{"lineNum":"  398","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  399","line":"    bool operator== (T rhs) const"},
{"lineNum":"  400","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  401","line":"        double const eps = 1e5 * std::numeric_limits<double>::epsilon();"},
{"lineNum":"  402","line":"        if (abs(value() - rhs) > eps) return false;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  403","line":""},
{"lineNum":"  404","line":"        for(auto const& v : terms)"},
{"lineNum":"  405","line":"            if (abs(v-rhs) > eps) return false;","class":"lineNoCov","hits":"0","possible_hits":"28",},
{"lineNum":"  406","line":""},
{"lineNum":"  407","line":"        return (lower == rhs);"},
{"lineNum":"  408","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  409","line":""},
{"lineNum":"  410","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  411","line":"    bool operator!= (T rhs) const"},
{"lineNum":"  412","line":"    { return !((*this) == rhs); }"},
{"lineNum":"  413","line":""},
{"lineNum":"  414","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  415","line":"    bool operator< (double rhs) const"},
{"lineNum":"  416","line":"    { return value() < rhs; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  417","line":""},
{"lineNum":"  418","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  419","line":"    bool operator> (double rhs) const"},
{"lineNum":"  420","line":"    { return value() > rhs; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  421","line":""},
{"lineNum":"  422","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  423","line":"    bool operator<= (double rhs) const"},
{"lineNum":"  424","line":"    { return value() <= rhs; }"},
{"lineNum":"  425","line":""},
{"lineNum":"  426","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  427","line":"    bool operator>= (double rhs) const"},
{"lineNum":"  428","line":"    { return value() >= rhs; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  431","line":"    Trigon<T, Power, Dim>& operator+=(Trigon<T, Power, Dim> const& t)"},
{"lineNum":"  432","line":"    {"},
{"lineNum":"  433","line":"        lower += t.lower;"},
{"lineNum":"  434","line":"        for (size_t i = 0; i < terms.size(); ++i) {"},
{"lineNum":"  435","line":"            terms[i] += t.terms[i];","class":"lineNoCov","hits":"0","possible_hits":"285",},
{"lineNum":"  436","line":"        }"},
{"lineNum":"  437","line":"        return *this;"},
{"lineNum":"  438","line":"    }"},
{"lineNum":"  439","line":""},
{"lineNum":"  440","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  441","line":"    Trigon<T, Power, Dim>& operator+=(T val)"},
{"lineNum":"  442","line":"    {"},
{"lineNum":"  443","line":"        lower += val;"},
{"lineNum":"  444","line":"        return *this;"},
{"lineNum":"  445","line":"    }"},
{"lineNum":"  446","line":""},
{"lineNum":"  447","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  448","line":"    Trigon<T, Power, Dim> operator+(Trigon<T, Power, Dim> const& t) const"},
{"lineNum":"  449","line":"    {"},
{"lineNum":"  450","line":"        Trigon<T, Power, Dim> retval(*this);","class":"lineNoCov","hits":"0","possible_hits":"135",},
{"lineNum":"  451","line":"        retval += t;"},
{"lineNum":"  452","line":"        return retval;"},
{"lineNum":"  453","line":"    }"},
{"lineNum":"  454","line":""},
{"lineNum":"  455","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  456","line":"    Trigon<T, Power, Dim> operator+(T val) const"},
{"lineNum":"  457","line":"    {"},
{"lineNum":"  458","line":"        Trigon<T, Power, Dim> retval(*this);"},
{"lineNum":"  459","line":"        retval += val;"},
{"lineNum":"  460","line":"        return retval;"},
{"lineNum":"  461","line":"    }"},
{"lineNum":"  462","line":""},
{"lineNum":"  463","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  464","line":"    Trigon<T, Power, Dim> operator-() const"},
{"lineNum":"  465","line":"    {"},
{"lineNum":"  466","line":"        Trigon<T, Power, Dim> retval(*this);"},
{"lineNum":"  467","line":"        retval.lower = -lower;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  468","line":"        for (size_t i = 0; i < terms.size(); ++i) {"},
{"lineNum":"  469","line":"            retval.terms[i] = -terms[i];","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  470","line":"        }"},
{"lineNum":"  471","line":"        return retval;"},
{"lineNum":"  472","line":"    }"},
{"lineNum":"  473","line":""},
{"lineNum":"  474","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  475","line":"    Trigon<T, Power, Dim>& operator-=(Trigon<T, Power, Dim> const& t)"},
{"lineNum":"  476","line":"    {"},
{"lineNum":"  477","line":"        lower -= t.lower;"},
{"lineNum":"  478","line":"        for (size_t i = 0; i < terms.size(); ++i) {"},
{"lineNum":"  479","line":"            terms[i] -= t.terms[i];","class":"lineNoCov","hits":"0","possible_hits":"286",},
{"lineNum":"  480","line":"        }"},
{"lineNum":"  481","line":"        return *this;"},
{"lineNum":"  482","line":"    }"},
{"lineNum":"  483","line":""},
{"lineNum":"  484","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  485","line":"    Trigon<T, Power, Dim>& operator-=(T val)"},
{"lineNum":"  486","line":"    {"},
{"lineNum":"  487","line":"        lower -= val;"},
{"lineNum":"  488","line":"        return *this;"},
{"lineNum":"  489","line":"    }"},
{"lineNum":"  490","line":""},
{"lineNum":"  491","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  492","line":"    Trigon<T, Power, Dim> operator-(Trigon<T, Power, Dim> const& t) const"},
{"lineNum":"  493","line":"    {"},
{"lineNum":"  494","line":"        Trigon<T, Power, Dim> retval(*this);","class":"lineNoCov","hits":"0","possible_hits":"214",},
{"lineNum":"  495","line":"        retval -= t;"},
{"lineNum":"  496","line":"        return retval;"},
{"lineNum":"  497","line":"    }"},
{"lineNum":"  498","line":""},
{"lineNum":"  499","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  500","line":"    Trigon<T, Power, Dim> operator-(T val) const"},
{"lineNum":"  501","line":"    {"},
{"lineNum":"  502","line":"        Trigon<T, Power, Dim> retval(*this);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  503","line":"        retval -= val;"},
{"lineNum":"  504","line":"        return retval;"},
{"lineNum":"  505","line":"    }"},
{"lineNum":"  506","line":""},
{"lineNum":"  507","line":"    template <unsigned int P1, unsigned int P2>"},
{"lineNum":"  508","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  509","line":"    arr_t<arr_t<unsigned int, Trigon<double, P2, Dim>::count>,"},
{"lineNum":"  510","line":"               Trigon<double, P1, Dim>::count>"},
{"lineNum":"  511","line":"    calculate_f()"},
{"lineNum":"  512","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  513","line":"        //scoped_simple_timer(\"trigon_cal_f\");"},
{"lineNum":"  514","line":"        arr_t<arr_t<unsigned int, Trigon<double, P2, Dim>::count>,"},
{"lineNum":"  515","line":"                   Trigon<double, P1, Dim>::count>"},
{"lineNum":"  516","line":"            retval;"},
{"lineNum":"  517","line":""},
{"lineNum":"  518","line":"        for (unsigned int i = 0; i < Trigon<double, P1, Dim>::count; ++i) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  519","line":"            for (unsigned int j = 0; j < Trigon<double, P2, Dim>::count; ++j) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  520","line":""},
{"lineNum":"  521","line":"#if 0"},
{"lineNum":"  522","line":"                auto indices1(indices<P1, Dim>());"},
{"lineNum":"  523","line":"                Index_t<P1> index1(indices1[i]);"},
{"lineNum":"  524","line":"                auto indices2(indices<P2, Dim>());"},
{"lineNum":"  525","line":"                Index_t<P2> index2(indices2[j]);"},
{"lineNum":"  526","line":"#endif"},
{"lineNum":"  527","line":"#if 0"},
{"lineNum":"  528","line":"                Index_t<P1> index1 = canonical_to_index<P1, Dim>()[i];"},
{"lineNum":"  529","line":"                Index_t<P2> index2 = canonical_to_index<P2, Dim>()[j];"},
{"lineNum":"  530","line":"#endif"},
{"lineNum":"  531","line":"#if 1"},
{"lineNum":"  532","line":"                Index_t<P1> index1 = indices<P1, Dim>()[i];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  533","line":"                Index_t<P2> index2 = indices<P2, Dim>()[j];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  534","line":"#endif"},
{"lineNum":"  535","line":""},
{"lineNum":"  536","line":"                Index_t<P1 + P2> index3;"},
{"lineNum":"  537","line":""},
{"lineNum":"  538","line":"                size_t m = 0;"},
{"lineNum":"  539","line":"                for (; m < P1; ++m) {"},
{"lineNum":"  540","line":"                    index3[m] = index1[m];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  541","line":"                }"},
{"lineNum":"  542","line":"                for (size_t n = 0; n < P2; ++m, ++n) {"},
{"lineNum":"  543","line":"                    index3[m] = index2[n];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  544","line":"                }"},
{"lineNum":"  545","line":"                std::sort(index3.begin(), index3.end());"},
{"lineNum":"  546","line":"                //trigon_impl::sort(index3);"},
{"lineNum":"  547","line":"                retval.at(i).at(j) = index_to_canonical<P1 + P2, Dim>().at(index3);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  548","line":"            }"},
{"lineNum":"  549","line":"        }"},
{"lineNum":"  550","line":"        return retval;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  551","line":"    }"},
{"lineNum":"  552","line":""},
{"lineNum":"  553","line":"#if 0"},
{"lineNum":"  554","line":"    template <unsigned int P1, unsigned int P2>"},
{"lineNum":"  555","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  556","line":"    unsigned int f(unsigned int i, unsigned j)"},
{"lineNum":"  557","line":"    {"},
{"lineNum":"  558","line":"#if 1"},
{"lineNum":"  559","line":"        static arr_t<"},
{"lineNum":"  560","line":"            arr_t<unsigned int, Trigon<double, P2, Dim>::count>,"},
{"lineNum":"  561","line":"            Trigon<double, P1, Dim>::count>"},
{"lineNum":"  562","line":"            mapping = calculate_f<P1, P2>();"},
{"lineNum":"  563","line":"        return mapping[i][j];"},
{"lineNum":"  564","line":"#endif"},
{"lineNum":"  565","line":""},
{"lineNum":"  566","line":"#if 0"},
{"lineNum":"  567","line":"        auto mapping = calculate_f<P1, P2>();"},
{"lineNum":"  568","line":"        return mapping[i][j];"},
{"lineNum":"  569","line":"#endif"},
{"lineNum":"  570","line":"    }"},
{"lineNum":"  571","line":"#endif"},
{"lineNum":"  572","line":""},
{"lineNum":"  573","line":"    template <unsigned int P2>"},
{"lineNum":"  574","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  575","line":"    unsigned int f(unsigned int i, unsigned j)"},
{"lineNum":"  576","line":"    {"},
{"lineNum":"  577","line":"#ifdef __CUDA_ARCH__"},
{"lineNum":"  578","line":"        return 0;"},
{"lineNum":"  579","line":"#else"},
{"lineNum":"  580","line":"        static arr_t<","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":"  581","line":"            arr_t<unsigned int, Trigon<double, P2, Dim>::count>,"},
{"lineNum":"  582","line":"            Trigon<double, Power, Dim>::count>"},
{"lineNum":"  583","line":"            mapping = calculate_f<Power, P2>();","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  584","line":"        return mapping[i][j];","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  585","line":"#endif"},
{"lineNum":"  586","line":"    }"},
{"lineNum":"  587","line":""},
{"lineNum":"  588","line":""},
{"lineNum":"  589","line":"    template <unsigned int New_power, typename Mult_trigon_t, typename Array_t>"},
{"lineNum":"  590","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  591","line":"    void collect_products(Mult_trigon_t const& t, Array_t& new_terms)"},
{"lineNum":"  592","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  593","line":"        //simple_timer_start(\"trigon_collect_products\");"},
{"lineNum":"  594","line":"        // this x right = new"},
{"lineNum":"  595","line":"        constexpr unsigned int right_power = New_power - Power;"},
{"lineNum":"  596","line":"        if (right_power <= t.power()) {"},
{"lineNum":"  597","line":"            auto& right_terms(t.template get_subpower<right_power>().terms);"},
{"lineNum":"  598","line":"            for (size_t i = 0; i < terms.size(); ++i) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  599","line":"                for (size_t j = 0; j < right_terms.size(); ++j) {"},
{"lineNum":"  600","line":"                    //size_t k = f<Power, right_power>(i, j);"},
{"lineNum":"  601","line":"                    size_t k = f<right_power>(i, j);"},
{"lineNum":"  602","line":"                    new_terms[k] += terms[i] * right_terms[j];","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  603","line":"                }"},
{"lineNum":"  604","line":"            }"},
{"lineNum":"  605","line":"        }"},
{"lineNum":"  606","line":"        //simple_timer_stop(\"trigon_collect_products\");"},
{"lineNum":"  607","line":"        lower.template collect_products<New_power>(t, new_terms);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  608","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  609","line":""},
{"lineNum":"  610","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  611","line":"    Trigon<T, Power, Dim> operator*=(Trigon<T, Power, Dim> const& t)"},
{"lineNum":"  612","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  613","line":"        if (Power > 1) {"},
{"lineNum":"  614","line":"            //simple_timer_start(\"trigon_*=(T)\");"},
{"lineNum":"  615","line":"            Terms_t new_terms;"},
{"lineNum":"  616","line":"            new_terms.fill(0);"},
{"lineNum":"  617","line":"            collect_products<Power>(t, new_terms);"},
{"lineNum":"  618","line":"            //simple_timer_stop(\"trigon_*=(T)\");"},
{"lineNum":"  619","line":"            lower *= t.lower;"},
{"lineNum":"  620","line":"            terms = new_terms;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  621","line":"        } else {"},
{"lineNum":"  622","line":"            //scoped_simple_timer(\"trigon_*=(T)\");"},
{"lineNum":"  623","line":"            const T this_value = value();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  624","line":"            const T right_value = t.value();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  625","line":"            for (size_t i = 0; i < Dim; ++i) {"},
{"lineNum":"  626","line":"                terms[i] *= right_value;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  627","line":"                terms[i] += t.terms[i] * this_value;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  628","line":"            }"},
{"lineNum":"  629","line":"            value() *= right_value;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  630","line":"        }"},
{"lineNum":"  631","line":""},
{"lineNum":"  632","line":"        return *this;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  633","line":"    }"},
{"lineNum":"  634","line":""},
{"lineNum":"  635","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  636","line":"    Trigon<T, Power, Dim> operator*=(T val)"},
{"lineNum":"  637","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  638","line":"        //simple_timer_start(\"trigon_*=(d)\");"},
{"lineNum":"  639","line":"        for (auto&& c : terms) {"},
{"lineNum":"  640","line":"            c *= val;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  641","line":"        }"},
{"lineNum":"  642","line":"        //simple_timer_stop(\"trigon_*=(d)\");"},
{"lineNum":"  643","line":"        lower *= val;"},
{"lineNum":"  644","line":"        return *this;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  645","line":"    }"},
{"lineNum":"  646","line":""},
{"lineNum":"  647","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  648","line":"    Trigon<T, Power, Dim> operator*(Trigon<T, Power, Dim> const& t) const"},
{"lineNum":"  649","line":"    {"},
{"lineNum":"  650","line":"        Trigon<T, Power, Dim> retval(*this);","class":"lineNoCov","hits":"0","possible_hits":"276",},
{"lineNum":"  651","line":"        retval *= t;","class":"lineNoCov","hits":"0","possible_hits":"314",},
{"lineNum":"  652","line":"        return retval;"},
{"lineNum":"  653","line":"    }"},
{"lineNum":"  654","line":""},
{"lineNum":"  655","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  656","line":"    Trigon<T, Power, Dim> operator*(T val) const"},
{"lineNum":"  657","line":"    {"},
{"lineNum":"  658","line":"        Trigon<T, Power, Dim> retval(*this);"},
{"lineNum":"  659","line":"        retval *= val;"},
{"lineNum":"  660","line":"        return retval;"},
{"lineNum":"  661","line":"    }"},
{"lineNum":"  662","line":""},
{"lineNum":"  663","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  664","line":"    Trigon<T, Power, Dim> operator/=(Trigon<T, Power, Dim> const& t)"},
{"lineNum":"  665","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  666","line":"        // this / t = new"},
{"lineNum":"  667","line":"        if (Power > 1) {"},
{"lineNum":"  668","line":"            lower /= t.lower;"},
{"lineNum":"  669","line":"            Terms_t new_terms;"},
{"lineNum":"  670","line":"            new_terms.fill(0);"},
{"lineNum":"  671","line":"            lower.template collect_products<Power>(t, new_terms);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  672","line":"            T t0 = t.value();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  673","line":"            for (size_t i = 0; i < new_terms.size(); ++i) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  674","line":"                terms[i] = (terms[i] - new_terms[i]) / t0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  675","line":"            }"},
{"lineNum":"  676","line":"        } else {"},
{"lineNum":"  677","line":"            const T this_value = value();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  678","line":"            const T right_value = t.value();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  679","line":"            const T inv_right_value2 = 1.0 / (right_value * right_value);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  680","line":"            for (size_t i = 0; i < Dim; ++i) {"},
{"lineNum":"  681","line":"                terms[i] *= right_value;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  682","line":"                terms[i] -= t.terms[i] * this_value;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  683","line":"                terms[i] *= inv_right_value2;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  684","line":"            }"},
{"lineNum":"  685","line":"            value() /= right_value;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  686","line":"        }"},
{"lineNum":"  687","line":"        return *this;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  688","line":"    }"},
{"lineNum":"  689","line":""},
{"lineNum":"  690","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  691","line":"    Trigon<T, Power, Dim> operator/=(T val)"},
{"lineNum":"  692","line":"    {"},
{"lineNum":"  693","line":"        for (auto&& c : terms) {"},
{"lineNum":"  694","line":"            c /= val;","class":"lineNoCov","hits":"0","possible_hits":"17",},
{"lineNum":"  695","line":"        }"},
{"lineNum":"  696","line":"        lower /= val;"},
{"lineNum":"  697","line":"        return *this;"},
{"lineNum":"  698","line":"    }"},
{"lineNum":"  699","line":""},
{"lineNum":"  700","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  701","line":"    Trigon<T, Power, Dim> operator/(Trigon<T, Power, Dim> const& t) const"},
{"lineNum":"  702","line":"    {"},
{"lineNum":"  703","line":"        Trigon<T, Power, Dim> retval(*this);","class":"lineNoCov","hits":"0","possible_hits":"47",},
{"lineNum":"  704","line":"        retval /= t;","class":"lineNoCov","hits":"0","possible_hits":"52",},
{"lineNum":"  705","line":"        return retval;"},
{"lineNum":"  706","line":"    }"},
{"lineNum":"  707","line":""},
{"lineNum":"  708","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  709","line":"    Trigon<T, Power, Dim> operator/(T val) const"},
{"lineNum":"  710","line":"    {"},
{"lineNum":"  711","line":"        Trigon<T, Power, Dim> retval(*this);","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"  712","line":"        retval /= val;"},
{"lineNum":"  713","line":"        return retval;"},
{"lineNum":"  714","line":"    }"},
{"lineNum":"  715","line":""},
{"lineNum":"  716","line":"    // partial derivative"},
{"lineNum":"  717","line":"    // [0, 0] => dTrigon/(dx dx)"},
{"lineNum":"  718","line":"    // [0, 1] => dTrigon/(dx dy)"},
{"lineNum":"  719","line":"    // [2, 2, 2] => dTrigon/(dz dz dz)"},
{"lineNum":"  720","line":"    template<size_t DP>"},
{"lineNum":"  721","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  722","line":"    typename std::enable_if_t<(Power>DP && DP>1), Trigon<T, Power-DP, Dim>>"},
{"lineNum":"  723","line":"    derivative(arr_t<unsigned int, DP> const& idx)"},
{"lineNum":"  724","line":"    {"},
{"lineNum":"  725","line":"        arr_t<unsigned int, DP-1> i2;"},
{"lineNum":"  726","line":"        for(int i=0; i<DP-1; ++i) i2[i] = idx[i];"},
{"lineNum":"  727","line":"        return partial_deriv(*this, idx[DP-1]).derivative(i2);"},
{"lineNum":"  728","line":"    }"},
{"lineNum":"  729","line":""},
{"lineNum":"  730","line":"    template<size_t DP>"},
{"lineNum":"  731","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  732","line":"    typename std::enable_if_t<(Power>DP && DP==1), Trigon<T, Power-DP, Dim>>"},
{"lineNum":"  733","line":"    derivative(arr_t<unsigned int, DP> const& idx)"},
{"lineNum":"  734","line":"    {"},
{"lineNum":"  735","line":"        return partial_deriv(*this, idx[0]);"},
{"lineNum":"  736","line":"    }"},
{"lineNum":"  737","line":""},
{"lineNum":"  738","line":""},
{"lineNum":"  739","line":"    // evaluation"},
{"lineNum":"  740","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  741","line":"    T operator()(arr_t<T, Dim> const& x) const"},
{"lineNum":"  742","line":"    {"},
{"lineNum":"  743","line":"        T val{};"},
{"lineNum":"  744","line":""},
{"lineNum":"  745","line":"        // current power"},
{"lineNum":"  746","line":"        auto inds = indices<Power, Dim>();"},
{"lineNum":"  747","line":"        for(int i=0; i<terms.size(); ++i)"},
{"lineNum":"  748","line":"        {"},
{"lineNum":"  749","line":"            if (abs(terms[i]))"},
{"lineNum":"  750","line":"            {"},
{"lineNum":"  751","line":"                T t = terms[i];"},
{"lineNum":"  752","line":"                for(auto idx : inds[i]) t *= x[idx];"},
{"lineNum":"  753","line":"                val += t;"},
{"lineNum":"  754","line":"            }"},
{"lineNum":"  755","line":"        }"},
{"lineNum":"  756","line":""},
{"lineNum":"  757","line":"        // lower power"},
{"lineNum":"  758","line":"        val += lower(x);"},
{"lineNum":"  759","line":""},
{"lineNum":"  760","line":"        return val;"},
{"lineNum":"  761","line":"    }"},
{"lineNum":"  762","line":""},
{"lineNum":"  763","line":"    // composition"},
{"lineNum":"  764","line":"    template<unsigned int P>"},
{"lineNum":"  765","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  766","line":"    Trigon<T, P, Dim> compose(TMapping<Trigon<T, P, Dim>> const& x) const"},
{"lineNum":"  767","line":"    {"},
{"lineNum":"  768","line":"        Trigon<T, P, Dim> val;"},
{"lineNum":"  769","line":""},
{"lineNum":"  770","line":"        // current power"},
{"lineNum":"  771","line":"        auto inds = indices<Power, Dim>();"},
{"lineNum":"  772","line":"        for(int i=0; i<terms.size(); ++i)"},
{"lineNum":"  773","line":"        {"},
{"lineNum":"  774","line":"            if (abs(terms[i]))"},
{"lineNum":"  775","line":"            {"},
{"lineNum":"  776","line":"                Trigon<T, P, Dim> t(terms[i]);"},
{"lineNum":"  777","line":"                for(auto idx : inds[i]) t *= x[idx];"},
{"lineNum":"  778","line":"                val += t;"},
{"lineNum":"  779","line":"            }"},
{"lineNum":"  780","line":"        }"},
{"lineNum":"  781","line":""},
{"lineNum":"  782","line":"        // lower power"},
{"lineNum":"  783","line":"        val += lower.compose(x);"},
{"lineNum":"  784","line":""},
{"lineNum":"  785","line":"        return val;"},
{"lineNum":"  786","line":"    };"},
{"lineNum":"  787","line":""},
{"lineNum":"  788","line":"#ifdef __CUDA_ARCH__"},
{"lineNum":"  789","line":""},
{"lineNum":"  790","line":"    syn::dummy_json to_json() const"},
{"lineNum":"  791","line":"    { return syn::dummy_json{}; }"},
{"lineNum":"  792","line":""},
{"lineNum":"  793","line":"#else"},
{"lineNum":"  794","line":""},
{"lineNum":"  795","line":"    syn::json to_json() const"},
{"lineNum":"  796","line":"    {"},
{"lineNum":"  797","line":"        syn::json val = {"},
{"lineNum":"  798","line":"            { \"dim\", Dim },"},
{"lineNum":"  799","line":"            { \"power\", Power },"},
{"lineNum":"  800","line":"            { \"terms\", syn::json::array() }"},
{"lineNum":"  801","line":"        };"},
{"lineNum":"  802","line":""},
{"lineNum":"  803","line":"        syn::json terms{};"},
{"lineNum":"  804","line":"        to_json_impl(terms);"},
{"lineNum":"  805","line":""},
{"lineNum":"  806","line":"        val[\"terms\"] = std::move(terms);"},
{"lineNum":"  807","line":""},
{"lineNum":"  808","line":"        return val;"},
{"lineNum":"  809","line":"    }"},
{"lineNum":"  810","line":""},
{"lineNum":"  811","line":"    void to_json_impl(syn::json& val) const"},
{"lineNum":"  812","line":"    {"},
{"lineNum":"  813","line":"        // lower power"},
{"lineNum":"  814","line":"        lower.to_json_impl(val);"},
{"lineNum":"  815","line":""},
{"lineNum":"  816","line":"        // current power"},
{"lineNum":"  817","line":"        syn::json v{};"},
{"lineNum":"  818","line":"        v[\"power\"] = Power;"},
{"lineNum":"  819","line":"        v[\"terms\"] = syn::json::array();"},
{"lineNum":"  820","line":""},
{"lineNum":"  821","line":"        auto inds = indices<Power, Dim>();"},
{"lineNum":"  822","line":"        for(int i=0; i<terms.size(); ++i)"},
{"lineNum":"  823","line":"        {"},
{"lineNum":"  824","line":"            arr_t<int, Dim> exp;"},
{"lineNum":"  825","line":"            for(auto idx : inds[i]) ++exp[idx];"},
{"lineNum":"  826","line":""},
{"lineNum":"  827","line":"            syn::json term = {"},
{"lineNum":"  828","line":"                {\"exp\", syn::json::array()},"},
{"lineNum":"  829","line":"                {\"term\", terms[i]}"},
{"lineNum":"  830","line":"            };"},
{"lineNum":"  831","line":""},
{"lineNum":"  832","line":"            for(int i=0; i<exp.size(); ++i)"},
{"lineNum":"  833","line":"                term[\"exp\"][i] = exp[i];"},
{"lineNum":"  834","line":""},
{"lineNum":"  835","line":"            v[\"terms\"].emplace_back(std::move(term));"},
{"lineNum":"  836","line":"        }"},
{"lineNum":"  837","line":""},
{"lineNum":"  838","line":"        val.emplace_back(std::move(v));"},
{"lineNum":"  839","line":"    }"},
{"lineNum":"  840","line":""},
{"lineNum":"  841","line":"#endif"},
{"lineNum":"  842","line":""},
{"lineNum":"  843","line":"    friend std::ostream& operator<<(std::ostream& os,"},
{"lineNum":"  844","line":"            Trigon<T, Power, Dim> const& t)"},
{"lineNum":"  845","line":"    {"},
{"lineNum":"  846","line":"        os << t.lower << \"P(\" << Power << \"): (\";"},
{"lineNum":"  847","line":"        //for(int i=0; i<t.count-1; ++i) os << std::setprecision(16) << t.terms[i] << \", \";"},
{"lineNum":"  848","line":"        for(int i=0; i<t.count-1; ++i) os << t.terms[i] << \", \";"},
{"lineNum":"  849","line":"        os << t.terms[t.count-1] << \")\\n\";"},
{"lineNum":"  850","line":"        return os;"},
{"lineNum":"  851","line":"    }"},
{"lineNum":"  852","line":""},
{"lineNum":"  853","line":"};"},
{"lineNum":"  854","line":""},
{"lineNum":"  855","line":"template<typename T, unsigned int P, unsigned int D>"},
{"lineNum":"  856","line":"struct is_trigon<Trigon<T, P, D>> : std::true_type { };"},
{"lineNum":"  857","line":""},
{"lineNum":"  858","line":"// power 0"},
{"lineNum":"  859","line":"template <typename T, unsigned int Dim>"},
{"lineNum":"  860","line":"class Trigon<T, 0, Dim>"},
{"lineNum":"  861","line":"{"},
{"lineNum":"  862","line":"public:"},
{"lineNum":"  863","line":"    static constexpr unsigned int count = 1;"},
{"lineNum":"  864","line":"    typedef arr_t<T, count> Terms_t;"},
{"lineNum":"  865","line":"    Terms_t terms;"},
{"lineNum":"  866","line":""},
{"lineNum":"  867","line":"    // implicit conversion"},
{"lineNum":"  868","line":"    template<class U>"},
{"lineNum":"  869","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  870","line":"    explicit Trigon(Trigon<U, 0, Dim> const& o)"},
{"lineNum":"  871","line":"    { terms.from(o.terms); }"},
{"lineNum":"  872","line":""},
{"lineNum":"  873","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  874","line":"    Trigon() { terms[0] = 0; }"},
{"lineNum":"  875","line":""},
{"lineNum":"  876","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  877","line":"    Trigon(T val) { terms[0] = val; }","class":"lineNoCov","hits":"0","possible_hits":"242",},
{"lineNum":"  878","line":""},
{"lineNum":"  879","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  880","line":"    static constexpr unsigned int power() { return 0; }"},
{"lineNum":"  881","line":""},
{"lineNum":"  882","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  883","line":"    const T value() const { return terms[0]; }"},
{"lineNum":"  884","line":""},
{"lineNum":"  885","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  886","line":"    void set(T val) { terms[0] = val; }","class":"lineNoCov","hits":"0","possible_hits":"24",},
{"lineNum":"  887","line":""},
{"lineNum":"  888","line":"    template <unsigned int Subpower>"},
{"lineNum":"  889","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  890","line":"    Trigon<T, Subpower, Dim>& get_subpower()"},
{"lineNum":"  891","line":"    { return *this; }"},
{"lineNum":"  892","line":""},
{"lineNum":"  893","line":"    template <unsigned int Subpower>"},
{"lineNum":"  894","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  895","line":"    const Trigon<T, Subpower, Dim>& get_subpower() const"},
{"lineNum":"  896","line":"    { return *this; }"},
{"lineNum":"  897","line":""},
{"lineNum":"  898","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  899","line":"    bool operator== (T rhs) const"},
{"lineNum":"  900","line":"    {"},
{"lineNum":"  901","line":"        double const eps = 1e5 * std::numeric_limits<double>::epsilon();"},
{"lineNum":"  902","line":"        return !(abs(terms[0] - rhs) > eps);"},
{"lineNum":"  903","line":"    }"},
{"lineNum":"  904","line":""},
{"lineNum":"  905","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  906","line":"    bool operator!= (T rhs) const"},
{"lineNum":"  907","line":"    { return !((*this) == rhs); }"},
{"lineNum":"  908","line":""},
{"lineNum":"  909","line":"    template <typename F>"},
{"lineNum":"  910","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  911","line":"    void each_term(F f)"},
{"lineNum":"  912","line":"    { f(0, arr_t<size_t, 0>(), terms[0]); }"},
{"lineNum":"  913","line":""},
{"lineNum":"  914","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  915","line":"    void set_term(size_t idx, T const& val)"},
{"lineNum":"  916","line":"    { terms[0] = val; }"},
{"lineNum":"  917","line":""},
{"lineNum":"  918","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  919","line":"    T get_term(size_t idx)"},
{"lineNum":"  920","line":"    { return terms[0]; }"},
{"lineNum":"  921","line":""},
{"lineNum":"  922","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  923","line":"    void set_term(unsigned int power, size_t idx, T const& val)"},
{"lineNum":"  924","line":"    { set_term(idx, val); }"},
{"lineNum":"  925","line":""},
{"lineNum":"  926","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  927","line":"    T get_term(unsigned int power, size_t idx)"},
{"lineNum":"  928","line":"    { return get_term(idx); }"},
{"lineNum":"  929","line":""},
{"lineNum":"  930","line":"    // keep terms with power in [lower, upper]"},
{"lineNum":"  931","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  932","line":"    void filter(unsigned int p_lower, unsigned int p_upper)"},
{"lineNum":"  933","line":"    {"},
{"lineNum":"  934","line":"        if (p_lower==0) terms[0] = 0;"},
{"lineNum":"  935","line":"    }"},
{"lineNum":"  936","line":""},
{"lineNum":"  937","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  938","line":"    Trigon<T, 0, Dim>& operator+=(Trigon<T, 0, Dim> const& t)"},
{"lineNum":"  939","line":"    {"},
{"lineNum":"  940","line":"        terms[0] += t.terms[0];","class":"lineNoCov","hits":"0","possible_hits":"117",},
{"lineNum":"  941","line":"        return *this;"},
{"lineNum":"  942","line":"    }"},
{"lineNum":"  943","line":""},
{"lineNum":"  944","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  945","line":"    Trigon<T, 0, Dim>& operator+=(T t)"},
{"lineNum":"  946","line":"    {"},
{"lineNum":"  947","line":"        terms[0] += t;"},
{"lineNum":"  948","line":"        return *this;"},
{"lineNum":"  949","line":"    }"},
{"lineNum":"  950","line":""},
{"lineNum":"  951","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  952","line":"    Trigon<T, 0, Dim> operator+(Trigon<T, 0, Dim> const& t) const"},
{"lineNum":"  953","line":"    {"},
{"lineNum":"  954","line":"        Trigon<T, 0, Dim> retval(*this);"},
{"lineNum":"  955","line":"        retval += t;"},
{"lineNum":"  956","line":"        return retval;"},
{"lineNum":"  957","line":"    }"},
{"lineNum":"  958","line":""},
{"lineNum":"  959","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  960","line":"    Trigon<T, 0, Dim> operator+(T t) const"},
{"lineNum":"  961","line":"    {"},
{"lineNum":"  962","line":"        Trigon<T, 0, Dim> retval(*this);"},
{"lineNum":"  963","line":"        retval += t;"},
{"lineNum":"  964","line":"        return retval;"},
{"lineNum":"  965","line":"    }"},
{"lineNum":"  966","line":""},
{"lineNum":"  967","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  968","line":"    Trigon<T, 0, Dim> operator-() const"},
{"lineNum":"  969","line":"    {"},
{"lineNum":"  970","line":"        Trigon<T, 0, Dim> retval(*this);"},
{"lineNum":"  971","line":"        retval.terms[0] = -terms[0];","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  972","line":"        return retval;"},
{"lineNum":"  973","line":"    }"},
{"lineNum":"  974","line":""},
{"lineNum":"  975","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  976","line":"    Trigon<T, 0, Dim>& operator-=(Trigon<T, 0, Dim> const& t)"},
{"lineNum":"  977","line":"    {"},
{"lineNum":"  978","line":"        terms[0] -= t.terms[0];","class":"lineNoCov","hits":"0","possible_hits":"97",},
{"lineNum":"  979","line":"        return *this;"},
{"lineNum":"  980","line":"    }"},
{"lineNum":"  981","line":""},
{"lineNum":"  982","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  983","line":"    Trigon<T, 0, Dim>& operator-=(T t)"},
{"lineNum":"  984","line":"    {"},
{"lineNum":"  985","line":"        terms[0] -= t;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  986","line":"        return *this;"},
{"lineNum":"  987","line":"    }"},
{"lineNum":"  988","line":""},
{"lineNum":"  989","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  990","line":"    Trigon<T, 0, Dim> operator-(Trigon<T, 0, Dim> const& t) const"},
{"lineNum":"  991","line":"    {"},
{"lineNum":"  992","line":"        Trigon<T, 0, Dim> retval(*this);"},
{"lineNum":"  993","line":"        retval -= t;"},
{"lineNum":"  994","line":"        return retval;"},
{"lineNum":"  995","line":"    }"},
{"lineNum":"  996","line":""},
{"lineNum":"  997","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  998","line":"    Trigon<T, 0, Dim> operator-(T t) const"},
{"lineNum":"  999","line":"    {"},
{"lineNum":" 1000","line":"        Trigon<T, 0, Dim> retval(*this);"},
{"lineNum":" 1001","line":"        retval -= t;"},
{"lineNum":" 1002","line":"        return retval;"},
{"lineNum":" 1003","line":"    }"},
{"lineNum":" 1004","line":""},
{"lineNum":" 1005","line":"    template <unsigned int New_power, typename Mult_trigon_t, typename Array_t>"},
{"lineNum":" 1006","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1007","line":"    void collect_products(Mult_trigon_t const& t, Array_t& new_terms)"},
{"lineNum":" 1008","line":"    {"},
{"lineNum":" 1009","line":"        // this x right = new"},
{"lineNum":" 1010","line":"        constexpr unsigned int right_power = New_power;"},
{"lineNum":" 1011","line":"        if (right_power <= t.power()) {"},
{"lineNum":" 1012","line":"            auto& right_terms(t.template get_subpower<right_power>().terms);"},
{"lineNum":" 1013","line":"            for (size_t j = 0; j < right_terms.size(); ++j) {","class":"lineNoCov","hits":"0","possible_hits":"22",},
{"lineNum":" 1014","line":"                new_terms[j] += terms[0] * right_terms[j];","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":" 1015","line":"            }"},
{"lineNum":" 1016","line":"        }"},
{"lineNum":" 1017","line":"    }"},
{"lineNum":" 1018","line":""},
{"lineNum":" 1019","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1020","line":"    Trigon<T, 0, Dim> operator*=(Trigon<T, 0, Dim> const& t)"},
{"lineNum":" 1021","line":"    {"},
{"lineNum":" 1022","line":"        terms[0] *= t.terms[0];"},
{"lineNum":" 1023","line":"        return *this;"},
{"lineNum":" 1024","line":"    }"},
{"lineNum":" 1025","line":""},
{"lineNum":" 1026","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1027","line":"    Trigon<T, 0, Dim> operator*=(T val)"},
{"lineNum":" 1028","line":"    {"},
{"lineNum":" 1029","line":"        terms[0] *= val;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1030","line":"        return *this;"},
{"lineNum":" 1031","line":"    }"},
{"lineNum":" 1032","line":""},
{"lineNum":" 1033","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1034","line":"    Trigon<T, 0, Dim> operator*(Trigon<T, 0, Dim> const& t) const"},
{"lineNum":" 1035","line":"    {"},
{"lineNum":" 1036","line":"        Trigon<T, 0, Dim> retval(*this);"},
{"lineNum":" 1037","line":"        retval *= t;"},
{"lineNum":" 1038","line":"        return retval;"},
{"lineNum":" 1039","line":"    }"},
{"lineNum":" 1040","line":""},
{"lineNum":" 1041","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1042","line":"    Trigon<T, 0, Dim> operator*(T val) const"},
{"lineNum":" 1043","line":"    {"},
{"lineNum":" 1044","line":"        Trigon<T, 0, Dim> retval(*this);"},
{"lineNum":" 1045","line":"        retval *= val;"},
{"lineNum":" 1046","line":"        return retval;"},
{"lineNum":" 1047","line":"    }"},
{"lineNum":" 1048","line":""},
{"lineNum":" 1049","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1050","line":"    Trigon<T, 0, Dim> operator/=(Trigon<T, 0, Dim> const& t)"},
{"lineNum":" 1051","line":"    {"},
{"lineNum":" 1052","line":"        terms[0] /= t.terms[0];"},
{"lineNum":" 1053","line":"        return *this;"},
{"lineNum":" 1054","line":"    }"},
{"lineNum":" 1055","line":""},
{"lineNum":" 1056","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1057","line":"    Trigon<T, 0, Dim> operator/=(T val)"},
{"lineNum":" 1058","line":"    {"},
{"lineNum":" 1059","line":"        terms[0] /= val;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1060","line":"        return *this;"},
{"lineNum":" 1061","line":"    }"},
{"lineNum":" 1062","line":""},
{"lineNum":" 1063","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1064","line":"    Trigon<T, 0, Dim> operator/(Trigon<T, 0, Dim> const& t) const"},
{"lineNum":" 1065","line":"    {"},
{"lineNum":" 1066","line":"        Trigon<T, 0, Dim> retval(*this);"},
{"lineNum":" 1067","line":"        retval /= t;"},
{"lineNum":" 1068","line":"        return retval;"},
{"lineNum":" 1069","line":"    }"},
{"lineNum":" 1070","line":""},
{"lineNum":" 1071","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1072","line":"    Trigon<T, 0, Dim> operator/(T val) const"},
{"lineNum":" 1073","line":"    {"},
{"lineNum":" 1074","line":"        Trigon<T, 0, Dim> retval(*this);"},
{"lineNum":" 1075","line":"        retval /= val;"},
{"lineNum":" 1076","line":"        return retval;"},
{"lineNum":" 1077","line":"    }"},
{"lineNum":" 1078","line":""},
{"lineNum":" 1079","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1080","line":"    T operator()(arr_t<T, Dim> const& x) const"},
{"lineNum":" 1081","line":"    { return terms[0]; }"},
{"lineNum":" 1082","line":""},
{"lineNum":" 1083","line":"    template<unsigned int P>"},
{"lineNum":" 1084","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1085","line":"    Trigon<T, P, Dim> compose(TMapping<Trigon<T, P, Dim>> const& x) const"},
{"lineNum":" 1086","line":"    { return Trigon<T, P, Dim>(terms[0]); };"},
{"lineNum":" 1087","line":""},
{"lineNum":" 1088","line":"    friend std::ostream&"},
{"lineNum":" 1089","line":"    operator<<(std::ostream& os, Trigon<T, 0, Dim> const& t)"},
{"lineNum":" 1090","line":"    { os << \"\\nP(0): (\" << t.terms[0] << \")\\n\"; return os; }"},
{"lineNum":" 1091","line":""},
{"lineNum":" 1092","line":"#ifdef __CUDA_ARCH__"},
{"lineNum":" 1093","line":""},
{"lineNum":" 1094","line":"    syn::dummy_json to_json() const"},
{"lineNum":" 1095","line":"    { return syn::dummy_json{}; }"},
{"lineNum":" 1096","line":""},
{"lineNum":" 1097","line":"#else"},
{"lineNum":" 1098","line":""},
{"lineNum":" 1099","line":"    syn::json to_json() const"},
{"lineNum":" 1100","line":"    {"},
{"lineNum":" 1101","line":"        syn::json val = {"},
{"lineNum":" 1102","line":"            { \"dim\", Dim },"},
{"lineNum":" 1103","line":"            { \"power\", 0},"},
{"lineNum":" 1104","line":"            { \"terms\", syn::json::array() }"},
{"lineNum":" 1105","line":"        };"},
{"lineNum":" 1106","line":""},
{"lineNum":" 1107","line":"        syn::json terms{};"},
{"lineNum":" 1108","line":"        to_json_impl(terms);"},
{"lineNum":" 1109","line":""},
{"lineNum":" 1110","line":"        val[\"terms\"] = std::move(terms);"},
{"lineNum":" 1111","line":""},
{"lineNum":" 1112","line":"        return val;"},
{"lineNum":" 1113","line":"    }"},
{"lineNum":" 1114","line":""},
{"lineNum":" 1115","line":"    void to_json_impl(syn::json& val) const"},
{"lineNum":" 1116","line":"    {"},
{"lineNum":" 1117","line":"        // current power"},
{"lineNum":" 1118","line":"        syn::json v{};"},
{"lineNum":" 1119","line":"        v[\"power\"] = 0;"},
{"lineNum":" 1120","line":"        v[\"terms\"][0] = {"},
{"lineNum":" 1121","line":"            {\"exp\", syn::json::array()},"},
{"lineNum":" 1122","line":"            {\"term\", terms[0]}"},
{"lineNum":" 1123","line":"        };"},
{"lineNum":" 1124","line":""},
{"lineNum":" 1125","line":"        for(int i=0; i<Dim; ++i)"},
{"lineNum":" 1126","line":"            v[\"terms\"][0][\"exp\"][i] = 0;"},
{"lineNum":" 1127","line":""},
{"lineNum":" 1128","line":"        val.emplace_back(std::move(v));"},
{"lineNum":" 1129","line":"    }"},
{"lineNum":" 1130","line":""},
{"lineNum":" 1131","line":"#endif"},
{"lineNum":" 1132","line":""},
{"lineNum":" 1133","line":"};"},
{"lineNum":" 1134","line":""},
{"lineNum":" 1135","line":""},
{"lineNum":" 1136","line":"template <typename T, unsigned int Power, unsigned int Dim>"},
{"lineNum":" 1137","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1138","line":"Trigon<T, Power, Dim>"},
{"lineNum":" 1139","line":"operator+(T val, Trigon<T, Power, Dim> const& t)"},
{"lineNum":" 1140","line":"{"},
{"lineNum":" 1141","line":"    Trigon<T, Power, Dim> retval(t);"},
{"lineNum":" 1142","line":"    retval += val;"},
{"lineNum":" 1143","line":"    return retval;"},
{"lineNum":" 1144","line":"}"},
{"lineNum":" 1145","line":""},
{"lineNum":" 1146","line":"template <typename T, unsigned int Power, unsigned int Dim>"},
{"lineNum":" 1147","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1148","line":"Trigon<std::complex<T>, Power, Dim>"},
{"lineNum":" 1149","line":"operator+(Trigon<T, Power, Dim> const& t1,"},
{"lineNum":" 1150","line":"          Trigon<std::complex<T>, Power, Dim> const& t2)"},
{"lineNum":" 1151","line":"{"},
{"lineNum":" 1152","line":"    Trigon<std::complex<T>, Power, Dim> retval;"},
{"lineNum":" 1153","line":"    for (size_t i = 0; i < retval.terms.size(); ++i) {"},
{"lineNum":" 1154","line":"        retval.terms[i] = t1.terms[i] + t2.terms[i];"},
{"lineNum":" 1155","line":"    }"},
{"lineNum":" 1156","line":"    retval.lower = t1.lower + t2.lower;"},
{"lineNum":" 1157","line":"    return retval;"},
{"lineNum":" 1158","line":"}"},
{"lineNum":" 1159","line":""},
{"lineNum":" 1160","line":"template <typename T, unsigned int Power, unsigned int Dim>"},
{"lineNum":" 1161","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1162","line":"Trigon<std::complex<T>, Power, Dim>"},
{"lineNum":" 1163","line":"operator+(Trigon<std::complex<T>, Power, Dim> const& t1,"},
{"lineNum":" 1164","line":"          Trigon<T, Power, Dim> const& t2)"},
{"lineNum":" 1165","line":"{"},
{"lineNum":" 1166","line":"    return t2 + t1;"},
{"lineNum":" 1167","line":"}"},
{"lineNum":" 1168","line":""},
{"lineNum":" 1169","line":"template <typename T, unsigned int Dim>"},
{"lineNum":" 1170","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1171","line":"Trigon<T, 0, Dim>"},
{"lineNum":" 1172","line":"operator+(T val, Trigon<T, 0, Dim> const& t)"},
{"lineNum":" 1173","line":"{"},
{"lineNum":" 1174","line":"    Trigon<T, 0, Dim> retval(t);"},
{"lineNum":" 1175","line":"    retval += val;"},
{"lineNum":" 1176","line":"    return retval;"},
{"lineNum":" 1177","line":"}"},
{"lineNum":" 1178","line":""},
{"lineNum":" 1179","line":"template <typename T, unsigned int Dim>"},
{"lineNum":" 1180","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1181","line":"Trigon<std::complex<T>, 0, Dim> operator+("},
{"lineNum":" 1182","line":"    Trigon<T, 0, Dim> const& t1, Trigon<std::complex<T>, 0, Dim> const& t2)"},
{"lineNum":" 1183","line":"{"},
{"lineNum":" 1184","line":"    Trigon<std::complex<T>, 0, Dim> retval;"},
{"lineNum":" 1185","line":"    retval.terms[0] = t1.terms[0] + t2.terms[0];"},
{"lineNum":" 1186","line":"    return retval;"},
{"lineNum":" 1187","line":"}"},
{"lineNum":" 1188","line":""},
{"lineNum":" 1189","line":"template <typename T, unsigned int Power, unsigned int Dim>"},
{"lineNum":" 1190","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1191","line":"Trigon<T, Power, Dim>"},
{"lineNum":" 1192","line":"operator-(T val, Trigon<T, Power, Dim> const& t)"},
{"lineNum":" 1193","line":"{"},
{"lineNum":" 1194","line":"    Trigon<T, Power, Dim> retval(-t);"},
{"lineNum":" 1195","line":"    retval += val;"},
{"lineNum":" 1196","line":"    return retval;"},
{"lineNum":" 1197","line":"}"},
{"lineNum":" 1198","line":""},
{"lineNum":" 1199","line":"template <typename T, unsigned int Dim>"},
{"lineNum":" 1200","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1201","line":"Trigon<T, 0, Dim>"},
{"lineNum":" 1202","line":"operator-(T val, Trigon<T, 0, Dim> const& t)"},
{"lineNum":" 1203","line":"{"},
{"lineNum":" 1204","line":"    Trigon<T, 0, Dim> retval(-t);"},
{"lineNum":" 1205","line":"    retval += val;"},
{"lineNum":" 1206","line":"    return retval;"},
{"lineNum":" 1207","line":"}"},
{"lineNum":" 1208","line":""},
{"lineNum":" 1209","line":"template <typename T, unsigned int Power, unsigned int Dim>"},
{"lineNum":" 1210","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1211","line":"Trigon<std::complex<T>, Power, Dim>"},
{"lineNum":" 1212","line":"operator-(Trigon<T, Power, Dim> const& t1,"},
{"lineNum":" 1213","line":"          Trigon<std::complex<T>, Power, Dim> const& t2)"},
{"lineNum":" 1214","line":"{"},
{"lineNum":" 1215","line":"    Trigon<std::complex<T>, Power, Dim> retval;"},
{"lineNum":" 1216","line":"    for (size_t i = 0; i < retval.terms.size(); ++i) {"},
{"lineNum":" 1217","line":"        retval.terms[i] = t1.terms[i] - t2.terms[i];"},
{"lineNum":" 1218","line":"    }"},
{"lineNum":" 1219","line":"    retval.lower = t1.lower - t2.lower;"},
{"lineNum":" 1220","line":"    return retval;"},
{"lineNum":" 1221","line":"}"},
{"lineNum":" 1222","line":""},
{"lineNum":" 1223","line":"template <typename T, unsigned int Power, unsigned int Dim>"},
{"lineNum":" 1224","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1225","line":"Trigon<std::complex<T>, Power, Dim>"},
{"lineNum":" 1226","line":"operator-(Trigon<std::complex<T>, Power, Dim> const& t1,"},
{"lineNum":" 1227","line":"          Trigon<T, Power, Dim> const& t2)"},
{"lineNum":" 1228","line":"{"},
{"lineNum":" 1229","line":"    Trigon<std::complex<T>, Power, Dim> retval;"},
{"lineNum":" 1230","line":"    for (size_t i = 0; i < retval.terms.size(); ++i) {"},
{"lineNum":" 1231","line":"        retval.terms[i] = t1.terms[i] - t2.terms[i];"},
{"lineNum":" 1232","line":"    }"},
{"lineNum":" 1233","line":"    retval.lower = t1.lower - t2.lower;"},
{"lineNum":" 1234","line":"    return retval;"},
{"lineNum":" 1235","line":"}"},
{"lineNum":" 1236","line":""},
{"lineNum":" 1237","line":"template <typename T, unsigned int Dim>"},
{"lineNum":" 1238","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1239","line":"Trigon<std::complex<T>, 0, Dim> operator-("},
{"lineNum":" 1240","line":"    Trigon<T, 0, Dim> const& t1, Trigon<std::complex<T>, 0, Dim> const& t2)"},
{"lineNum":" 1241","line":"{"},
{"lineNum":" 1242","line":"    Trigon<std::complex<T>, 0, Dim> retval;"},
{"lineNum":" 1243","line":"    retval.terms[0] = t1.terms[0] - t2.terms[0];"},
{"lineNum":" 1244","line":"    return retval;"},
{"lineNum":" 1245","line":"}"},
{"lineNum":" 1246","line":""},
{"lineNum":" 1247","line":"template <typename T, unsigned int Dim>"},
{"lineNum":" 1248","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1249","line":"Trigon<std::complex<T>, 0, Dim> operator-("},
{"lineNum":" 1250","line":"    Trigon<std::complex<T>, 0, Dim> const& t1, Trigon<T, 0, Dim> const& t2)"},
{"lineNum":" 1251","line":"{"},
{"lineNum":" 1252","line":"    Trigon<std::complex<T>, 0, Dim> retval;"},
{"lineNum":" 1253","line":"    retval.terms[0] = t1.terms[0] - t2.terms[0];"},
{"lineNum":" 1254","line":"    return retval;"},
{"lineNum":" 1255","line":"}"},
{"lineNum":" 1256","line":""},
{"lineNum":" 1257","line":"template <typename T, unsigned int Power, unsigned int Dim>"},
{"lineNum":" 1258","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1259","line":"Trigon<T, Power, Dim> operator*(T val, Trigon<T, Power, Dim> const& t)"},
{"lineNum":" 1260","line":"{"},
{"lineNum":" 1261","line":"    Trigon<T, Power, Dim> retval(t);"},
{"lineNum":" 1262","line":"    retval *= val;"},
{"lineNum":" 1263","line":"    return retval;"},
{"lineNum":" 1264","line":"}"},
{"lineNum":" 1265","line":""},
{"lineNum":" 1266","line":"template <typename T, unsigned int Power, unsigned int Dim>"},
{"lineNum":" 1267","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1268","line":"Trigon<std::complex<T>, Power, Dim>"},
{"lineNum":" 1269","line":"operator*(std::complex<T> val, Trigon<T, Power, Dim> const& t)"},
{"lineNum":" 1270","line":"{"},
{"lineNum":" 1271","line":"    Trigon<std::complex<T>, Power, Dim> retval;"},
{"lineNum":" 1272","line":"    for (size_t i = 0; i < retval.terms.size(); ++i) {"},
{"lineNum":" 1273","line":"        retval.terms[i] = val * t.terms[i];"},
{"lineNum":" 1274","line":"    }"},
{"lineNum":" 1275","line":"    retval.lower = val * t.lower;"},
{"lineNum":" 1276","line":"    return retval;"},
{"lineNum":" 1277","line":"}"},
{"lineNum":" 1278","line":""},
{"lineNum":" 1279","line":"template <typename T, unsigned int Power, unsigned int Dim>"},
{"lineNum":" 1280","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1281","line":"Trigon<std::complex<T>, Power, Dim>"},
{"lineNum":" 1282","line":"operator*( Trigon<std::complex<T>, Power, Dim> const& t1,"},
{"lineNum":" 1283","line":"    Trigon<T, Power, Dim> const& t2)"},
{"lineNum":" 1284","line":"{"},
{"lineNum":" 1285","line":"    return t1 * (std::complex<T>(1.0, 0.0) * t2);"},
{"lineNum":" 1286","line":"}"},
{"lineNum":" 1287","line":""},
{"lineNum":" 1288","line":"template <typename T, unsigned int Power, unsigned int Dim>"},
{"lineNum":" 1289","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1290","line":"Trigon<std::complex<T>, Power, Dim>"},
{"lineNum":" 1291","line":"operator*( Trigon<T, Power, Dim> const& t1,"},
{"lineNum":" 1292","line":"    Trigon<std::complex<T>, Power, Dim> const& t2)"},
{"lineNum":" 1293","line":"{"},
{"lineNum":" 1294","line":"    return (std::complex<T>(1.0, 0.0) * t1) * t2;"},
{"lineNum":" 1295","line":"}"},
{"lineNum":" 1296","line":""},
{"lineNum":" 1297","line":"template <typename T, unsigned int Dim>"},
{"lineNum":" 1298","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1299","line":"Trigon<T, 0, Dim> operator*(T val, Trigon<T, 0, Dim> const& t)"},
{"lineNum":" 1300","line":"{"},
{"lineNum":" 1301","line":"    Trigon<T, 0, Dim> retval(t);"},
{"lineNum":" 1302","line":"    retval *= val;"},
{"lineNum":" 1303","line":"    return retval;"},
{"lineNum":" 1304","line":"}"},
{"lineNum":" 1305","line":""},
{"lineNum":" 1306","line":"template <typename T, unsigned int Dim>"},
{"lineNum":" 1307","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1308","line":"Trigon<std::complex<T>, 0, Dim> operator*(std::complex<T> val,"},
{"lineNum":" 1309","line":"                                          Trigon<T, 0, Dim> const& t)"},
{"lineNum":" 1310","line":"{"},
{"lineNum":" 1311","line":"    Trigon<std::complex<T>, 0, Dim> retval;"},
{"lineNum":" 1312","line":"    retval.terms[0] = val * t.terms[0];"},
{"lineNum":" 1313","line":"    return retval;"},
{"lineNum":" 1314","line":"}"},
{"lineNum":" 1315","line":""},
{"lineNum":" 1316","line":"template <typename T, unsigned int Power, unsigned int Dim>"},
{"lineNum":" 1317","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1318","line":"Trigon<T, Power, Dim>"},
{"lineNum":" 1319","line":"operator/(T val, Trigon<T, Power, Dim> const& t)"},
{"lineNum":" 1320","line":"{"},
{"lineNum":" 1321","line":"    Trigon<T, Power, Dim> retval;"},
{"lineNum":" 1322","line":"    retval.template get_subpower<0>().terms[0] = val;"},
{"lineNum":" 1323","line":"    retval /= t;"},
{"lineNum":" 1324","line":"    return retval;"},
{"lineNum":" 1325","line":"}"},
{"lineNum":" 1326","line":""},
{"lineNum":" 1327","line":"template <typename T, unsigned int Dim>"},
{"lineNum":" 1328","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1329","line":"Trigon<T, 0, Dim>"},
{"lineNum":" 1330","line":"operator/(T val, Trigon<T, 0, Dim> const& t)"},
{"lineNum":" 1331","line":"{"},
{"lineNum":" 1332","line":"    Trigon<T, 0, Dim> retval;"},
{"lineNum":" 1333","line":"    retval.terms[0] = val / t.terms[0];"},
{"lineNum":" 1334","line":"    return retval;"},
{"lineNum":" 1335","line":"}"},
{"lineNum":" 1336","line":""},
{"lineNum":" 1337","line":"#if 1"},
{"lineNum":" 1338","line":"template <typename T, unsigned int Power, unsigned int Dim>"},
{"lineNum":" 1339","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1340","line":"typename std::enable_if<(Power == 1), void>::type"},
{"lineNum":" 1341","line":"calculate_partial(Trigon<T, Power, Dim> const& source, size_t index,"},
{"lineNum":" 1342","line":"                  Trigon<T, Power - 1, Dim>& dest)"},
{"lineNum":" 1343","line":"{"},
{"lineNum":" 1344","line":"    dest.terms[0] = source.terms[index];"},
{"lineNum":" 1345","line":"}"},
{"lineNum":" 1346","line":""},
{"lineNum":" 1347","line":"template <typename T, unsigned int Power, unsigned int Dim>"},
{"lineNum":" 1348","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1349","line":"typename std::enable_if<(Power > 1), void>::type"},
{"lineNum":" 1350","line":"calculate_partial(Trigon<T, Power, Dim> const& source, size_t index,"},
{"lineNum":" 1351","line":"                  Trigon<T, Power - 1, Dim>& dest)"},
{"lineNum":" 1352","line":"{"},
{"lineNum":" 1353","line":"    auto source_indices = indices<Power, Dim>();"},
{"lineNum":" 1354","line":""},
{"lineNum":" 1355","line":"    for (size_t i = 0; i < source_indices.size(); ++i)"},
{"lineNum":" 1356","line":"    {"},
{"lineNum":" 1357","line":"        auto& source_index = source_indices[i];"},
{"lineNum":" 1358","line":"        Index_t<Power - 1> dest_index;"},
{"lineNum":" 1359","line":"        size_t exponent = 0;"},
{"lineNum":" 1360","line":"        size_t k = 0;"},
{"lineNum":" 1361","line":""},
{"lineNum":" 1362","line":"        for (size_t j = 0; j < source_index.size(); ++j) {"},
{"lineNum":" 1363","line":"            if (source_index[j] == index) {"},
{"lineNum":" 1364","line":"                exponent += 1;"},
{"lineNum":" 1365","line":"            } else {"},
{"lineNum":" 1366","line":"                dest_index[k] = source_index[j];"},
{"lineNum":" 1367","line":"                ++k;"},
{"lineNum":" 1368","line":"            }"},
{"lineNum":" 1369","line":"        }"},
{"lineNum":" 1370","line":""},
{"lineNum":" 1371","line":"        if (exponent > 0) {"},
{"lineNum":" 1372","line":"            for (size_t j = 0; j < (exponent - 1); ++j, ++k) {"},
{"lineNum":" 1373","line":"                dest_index[k] = index;"},
{"lineNum":" 1374","line":"            }"},
{"lineNum":" 1375","line":"            std::sort(dest_index.begin(), dest_index.end());"},
{"lineNum":" 1376","line":"            //trigon_impl::sort(dest_index);"},
{"lineNum":" 1377","line":"            dest.terms[index_to_canonical<Power - 1, Dim>().at(dest_index)] ="},
{"lineNum":" 1378","line":"                T(exponent) * source.terms[i];"},
{"lineNum":" 1379","line":"        }"},
{"lineNum":" 1380","line":"    }"},
{"lineNum":" 1381","line":""},
{"lineNum":" 1382","line":"    calculate_partial<T, Power - 1, Dim>(source.lower, index, dest.lower);"},
{"lineNum":" 1383","line":"}"},
{"lineNum":" 1384","line":""},
{"lineNum":" 1385","line":"template <typename T, unsigned int Power, unsigned int Dim>"},
{"lineNum":" 1386","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1387","line":"Trigon<T, Power - 1, Dim>"},
{"lineNum":" 1388","line":"partial_deriv(Trigon<T, Power, Dim> const& t, size_t index)"},
{"lineNum":" 1389","line":"{"},
{"lineNum":" 1390","line":"    Trigon<T, Power - 1, Dim> retval;"},
{"lineNum":" 1391","line":"    calculate_partial<T, Power, Dim>(t, index, retval);"},
{"lineNum":" 1392","line":"    return retval;"},
{"lineNum":" 1393","line":"}"},
{"lineNum":" 1394","line":"#endif"},
{"lineNum":" 1395","line":""},
{"lineNum":" 1396","line":"template <typename T, unsigned int Power, unsigned int Dim>"},
{"lineNum":" 1397","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1398","line":"Trigon<T, Power, Dim>"},
{"lineNum":" 1399","line":"real(Trigon<std::complex<T>, Power, Dim> const& t)"},
{"lineNum":" 1400","line":"{"},
{"lineNum":" 1401","line":"    Trigon<T, Power, Dim> retval;"},
{"lineNum":" 1402","line":"    for (size_t i = 0; i < retval.terms.size(); ++i) {"},
{"lineNum":" 1403","line":"        retval.terms[i] = t.terms[i].real();"},
{"lineNum":" 1404","line":"    }"},
{"lineNum":" 1405","line":"    retval.lower = real(t.lower);"},
{"lineNum":" 1406","line":"    return retval;"},
{"lineNum":" 1407","line":"}"},
{"lineNum":" 1408","line":""},
{"lineNum":" 1409","line":"template <typename T, unsigned int Dim>"},
{"lineNum":" 1410","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1411","line":"Trigon<T, 0, Dim>"},
{"lineNum":" 1412","line":"real(Trigon<std::complex<T>, 0, Dim> const& t)"},
{"lineNum":" 1413","line":"{"},
{"lineNum":" 1414","line":"    Trigon<T, 0, Dim> retval;"},
{"lineNum":" 1415","line":"    retval.terms[0] = t.terms[0].real();"},
{"lineNum":" 1416","line":"    return retval;"},
{"lineNum":" 1417","line":"}"},
{"lineNum":" 1418","line":""},
{"lineNum":" 1419","line":"template <typename T, unsigned int Power, unsigned int Dim>"},
{"lineNum":" 1420","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1421","line":"Trigon<T, Power, Dim>"},
{"lineNum":" 1422","line":"imag(Trigon<std::complex<T>, Power, Dim> const& t)"},
{"lineNum":" 1423","line":"{"},
{"lineNum":" 1424","line":"    Trigon<T, Power, Dim> retval;"},
{"lineNum":" 1425","line":"    for (size_t i = 0; i < retval.terms.size(); ++i) {"},
{"lineNum":" 1426","line":"        retval.terms[i] = t.terms[i].imag();"},
{"lineNum":" 1427","line":"    }"},
{"lineNum":" 1428","line":"    retval.lower = imag(t.lower);"},
{"lineNum":" 1429","line":"    return retval;"},
{"lineNum":" 1430","line":"}"},
{"lineNum":" 1431","line":""},
{"lineNum":" 1432","line":"template <typename T, unsigned int Dim>"},
{"lineNum":" 1433","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1434","line":"Trigon<T, 0, Dim>"},
{"lineNum":" 1435","line":"imag(Trigon<std::complex<T>, 0, Dim> const& t)"},
{"lineNum":" 1436","line":"{"},
{"lineNum":" 1437","line":"    Trigon<T, 0, Dim> retval;"},
{"lineNum":" 1438","line":"    retval.terms[0] = t.terms[0].imag();"},
{"lineNum":" 1439","line":"    return retval;"},
{"lineNum":" 1440","line":"}"},
{"lineNum":" 1441","line":""},
{"lineNum":" 1442","line":"template <typename T, unsigned int Power, unsigned int Dim>"},
{"lineNum":" 1443","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1444","line":"Trigon<T, Power, Dim>"},
{"lineNum":" 1445","line":"exp(Trigon<T, Power, Dim> const& t)"},
{"lineNum":" 1446","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1447","line":"    T val = t.value();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1448","line":"    Trigon<T, Power, Dim> x(t - val);"},
{"lineNum":" 1449","line":"    Trigon<T, Power, Dim> xn(1);"},
{"lineNum":" 1450","line":"    Trigon<T, Power, Dim> retval(1.0);"},
{"lineNum":" 1451","line":"    double fact_n = 1;"},
{"lineNum":" 1452","line":"    for (size_t n = 1; n <= Power; ++n) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1453","line":"        xn *= x;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1454","line":"        fact_n *= n;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1455","line":"        retval += xn / fact_n;"},
{"lineNum":" 1456","line":"    }"},
{"lineNum":" 1457","line":"    retval *= std::exp(val);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1458","line":"    return retval;"},
{"lineNum":" 1459","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1460","line":""},
{"lineNum":" 1461","line":"constexpr int max_power = 7;"},
{"lineNum":" 1462","line":""},
{"lineNum":" 1463","line":"template <typename T>"},
{"lineNum":" 1464","line":"using Derivatives_t = arr_t<T, max_power + 1>;"},
{"lineNum":" 1465","line":""},
{"lineNum":" 1466","line":"template <typename T, unsigned int Power, unsigned int Dim>"},
{"lineNum":" 1467","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1468","line":"Trigon<T, Power, Dim>"},
{"lineNum":" 1469","line":"generic_transcendental(Trigon<T, Power, Dim> const& t,"},
{"lineNum":" 1470","line":"                       Derivatives_t<T> const& derivatives)"},
{"lineNum":" 1471","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1472","line":"    T val = t.value();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1473","line":"    Trigon<T, Power, Dim> x(t - val);"},
{"lineNum":" 1474","line":"    Trigon<T, Power, Dim> xn(1);"},
{"lineNum":" 1475","line":"    Trigon<T, Power, Dim> retval(1.0);"},
{"lineNum":" 1476","line":"    int fact_n = 1;"},
{"lineNum":" 1477","line":"    for (size_t n = 1; n <= Power; ++n) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1478","line":"        xn *= x;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1479","line":"        fact_n *= n;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1480","line":"        retval += xn * derivatives.at(n) / fact_n;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1481","line":"    }"},
{"lineNum":" 1482","line":"    retval.value() = derivatives[0];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1483","line":"    return retval;"},
{"lineNum":" 1484","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1485","line":""},
{"lineNum":" 1486","line":"template <typename T>"},
{"lineNum":" 1487","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1488","line":"Derivatives_t<T>"},
{"lineNum":" 1489","line":"sin_derivatives(T x, unsigned int power)"},
{"lineNum":" 1490","line":"{"},
{"lineNum":" 1491","line":"    Derivatives_t<T> retval;"},
{"lineNum":" 1492","line":"    retval[0] = std::sin(x);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1493","line":"    if (power > 0) {"},
{"lineNum":" 1494","line":"        retval[1] = std::cos(x);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1495","line":"    }"},
{"lineNum":" 1496","line":"    if (power > 1) {"},
{"lineNum":" 1497","line":"        retval[2] = -retval[0];","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1498","line":"    }"},
{"lineNum":" 1499","line":"    if (power > 2) {"},
{"lineNum":" 1500","line":"        retval[3] = -retval[1];"},
{"lineNum":" 1501","line":"    }"},
{"lineNum":" 1502","line":"    if (power > 3) {"},
{"lineNum":" 1503","line":"        retval[4] = retval[0];"},
{"lineNum":" 1504","line":"    }"},
{"lineNum":" 1505","line":"    if (power > 4) {"},
{"lineNum":" 1506","line":"        retval[5] = retval[1];"},
{"lineNum":" 1507","line":"    }"},
{"lineNum":" 1508","line":"    if (power > 5) {"},
{"lineNum":" 1509","line":"        retval[6] = retval[2];"},
{"lineNum":" 1510","line":"    }"},
{"lineNum":" 1511","line":"    if (power > 6) {"},
{"lineNum":" 1512","line":"        retval[7] = retval[3];"},
{"lineNum":" 1513","line":"    }"},
{"lineNum":" 1514","line":"    return retval;"},
{"lineNum":" 1515","line":"}"},
{"lineNum":" 1516","line":""},
{"lineNum":" 1517","line":"template <typename T, unsigned int Power, unsigned int Dim>"},
{"lineNum":" 1518","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1519","line":"Trigon<T, Power, Dim>"},
{"lineNum":" 1520","line":"sin(Trigon<T, Power, Dim> const& t)"},
{"lineNum":" 1521","line":"{"},
{"lineNum":" 1522","line":"    return generic_transcendental(t, sin_derivatives(t.value(), Power));","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1523","line":"}"},
{"lineNum":" 1524","line":""},
{"lineNum":" 1525","line":"template <typename T>"},
{"lineNum":" 1526","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1527","line":"Derivatives_t<T>"},
{"lineNum":" 1528","line":"cos_derivatives(T x, unsigned int power)"},
{"lineNum":" 1529","line":"{"},
{"lineNum":" 1530","line":"    Derivatives_t<T> retval;"},
{"lineNum":" 1531","line":"    retval[0] = std::cos(x);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1532","line":"    if (power > 0) {"},
{"lineNum":" 1533","line":"        retval[1] = -std::sin(x);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1534","line":"    }"},
{"lineNum":" 1535","line":"    if (power > 1) {"},
{"lineNum":" 1536","line":"        retval[2] = -retval[0];"},
{"lineNum":" 1537","line":"    }"},
{"lineNum":" 1538","line":"    if (power > 2) {"},
{"lineNum":" 1539","line":"        retval[3] = -retval[1];"},
{"lineNum":" 1540","line":"    }"},
{"lineNum":" 1541","line":"    if (power > 3) {"},
{"lineNum":" 1542","line":"        retval[4] = retval[0];"},
{"lineNum":" 1543","line":"    }"},
{"lineNum":" 1544","line":"    if (power > 4) {"},
{"lineNum":" 1545","line":"        retval[5] = retval[1];"},
{"lineNum":" 1546","line":"    }"},
{"lineNum":" 1547","line":"    if (power > 5) {"},
{"lineNum":" 1548","line":"        retval[6] = retval[2];"},
{"lineNum":" 1549","line":"    }"},
{"lineNum":" 1550","line":"    if (power > 6) {"},
{"lineNum":" 1551","line":"        retval[7] = retval[3];"},
{"lineNum":" 1552","line":"    }"},
{"lineNum":" 1553","line":"    return retval;"},
{"lineNum":" 1554","line":"}"},
{"lineNum":" 1555","line":""},
{"lineNum":" 1556","line":"template <typename T, unsigned int Power, unsigned int Dim>"},
{"lineNum":" 1557","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1558","line":"Trigon<T, Power, Dim>"},
{"lineNum":" 1559","line":"cos(Trigon<T, Power, Dim> const& t)"},
{"lineNum":" 1560","line":"{"},
{"lineNum":" 1561","line":"    return generic_transcendental(t, cos_derivatives(t.value(), Power));","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1562","line":"}"},
{"lineNum":" 1563","line":""},
{"lineNum":" 1564","line":"template <typename T>"},
{"lineNum":" 1565","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1566","line":"Derivatives_t<T>"},
{"lineNum":" 1567","line":"tan_derivatives(T x, unsigned int power)"},
{"lineNum":" 1568","line":"{"},
{"lineNum":" 1569","line":"    // for qpow"},
{"lineNum":" 1570","line":"    using namespace kt;"},
{"lineNum":" 1571","line":""},
{"lineNum":" 1572","line":"    Derivatives_t<T> retval;"},
{"lineNum":" 1573","line":"    T tanx(std::tan(x));"},
{"lineNum":" 1574","line":"    T secx;"},
{"lineNum":" 1575","line":"    retval[0] = tanx;"},
{"lineNum":" 1576","line":"    if (power > 0) {"},
{"lineNum":" 1577","line":"        secx = 1 / std::cos(x);"},
{"lineNum":" 1578","line":"        retval[1] = qpow(secx, 2);"},
{"lineNum":" 1579","line":"    }"},
{"lineNum":" 1580","line":"    if (power > 1) {"},
{"lineNum":" 1581","line":"        retval[2] = 2 * tanx * qpow(secx, 2);"},
{"lineNum":" 1582","line":"    }"},
{"lineNum":" 1583","line":"    if (power > 2) {"},
{"lineNum":" 1584","line":"        retval[3] = 4 * qpow(secx, 2) * qpow(tanx, 2) + 2 * qpow(secx, 4);"},
{"lineNum":" 1585","line":"    }"},
{"lineNum":" 1586","line":"    if (power > 3) {"},
{"lineNum":" 1587","line":"        retval[4] ="},
{"lineNum":" 1588","line":"            8 * qpow(secx, 2) * qpow(tanx, 3) + 16 * tanx * qpow(secx, 4);"},
{"lineNum":" 1589","line":"    }"},
{"lineNum":" 1590","line":"    if (power > 4) {"},
{"lineNum":" 1591","line":"        retval[5] = 16 * qpow(secx, 2) * qpow(tanx, 4) +"},
{"lineNum":" 1592","line":"                    88 * qpow(secx, 4) * qpow(tanx, 2) + 16 * qpow(secx, 6);"},
{"lineNum":" 1593","line":"    }"},
{"lineNum":" 1594","line":"    if (power > 5) {"},
{"lineNum":" 1595","line":"        retval[6] = 32 * qpow(secx, 2) * qpow(tanx, 5) +"},
{"lineNum":" 1596","line":"                    416 * qpow(secx, 4) * qpow(tanx, 3) +"},
{"lineNum":" 1597","line":"                    272 * tanx * qpow(secx, 6);"},
{"lineNum":" 1598","line":"    }"},
{"lineNum":" 1599","line":"    if (power > 6) {"},
{"lineNum":" 1600","line":"        retval[7] = 64 * qpow(secx, 2) * qpow(tanx, 6) +"},
{"lineNum":" 1601","line":"                    1824 * qpow(secx, 4) * qpow(tanx, 4) +"},
{"lineNum":" 1602","line":"                    2880 * qpow(secx, 6) * qpow(tanx, 2) + 272 * qpow(secx, 8);"},
{"lineNum":" 1603","line":"    }"},
{"lineNum":" 1604","line":"    return retval;"},
{"lineNum":" 1605","line":"}"},
{"lineNum":" 1606","line":""},
{"lineNum":" 1607","line":"template <typename T, unsigned int Power, unsigned int Dim>"},
{"lineNum":" 1608","line":"Trigon<T, Power, Dim>"},
{"lineNum":" 1609","line":"tan(Trigon<T, Power, Dim> const& t)"},
{"lineNum":" 1610","line":"{"},
{"lineNum":" 1611","line":"    return generic_transcendental(t, tan_derivatives(t.value(), Power));"},
{"lineNum":" 1612","line":"}"},
{"lineNum":" 1613","line":""},
{"lineNum":" 1614","line":"template <typename T>"},
{"lineNum":" 1615","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1616","line":"Derivatives_t<T>"},
{"lineNum":" 1617","line":"sqrt_derivatives(T x, unsigned int power)"},
{"lineNum":" 1618","line":"{"},
{"lineNum":" 1619","line":"    Derivatives_t<T> retval;"},
{"lineNum":" 1620","line":"    T invx;"},
{"lineNum":" 1621","line":"    retval[0] = std::sqrt(x);","class":"lineNoCov","hits":"0","possible_hits":"15",},
{"lineNum":" 1622","line":"    if (power > 0) {"},
{"lineNum":" 1623","line":"        retval[1] = 0.5 / retval[0];","class":"lineNoCov","hits":"0","possible_hits":"15",},
{"lineNum":" 1624","line":"    }"},
{"lineNum":" 1625","line":"    if (power > 1) {"},
{"lineNum":" 1626","line":"        invx = 1 / x;","class":"lineNoCov","hits":"0","possible_hits":"15",},
{"lineNum":" 1627","line":"        retval[2] = -0.5 * invx * retval[1];","class":"lineNoCov","hits":"0","possible_hits":"15",},
{"lineNum":" 1628","line":"    }"},
{"lineNum":" 1629","line":"    if (power > 2) {"},
{"lineNum":" 1630","line":"        retval[3] = -1.5 * invx * retval[2];"},
{"lineNum":" 1631","line":"    }"},
{"lineNum":" 1632","line":"    if (power > 3) {"},
{"lineNum":" 1633","line":"        retval[4] = -2.5 * invx * retval[3];"},
{"lineNum":" 1634","line":"    }"},
{"lineNum":" 1635","line":"    if (power > 4) {"},
{"lineNum":" 1636","line":"        retval[5] = -3.5 * invx * retval[4];"},
{"lineNum":" 1637","line":"    }"},
{"lineNum":" 1638","line":"    if (power > 5) {"},
{"lineNum":" 1639","line":"        retval[6] = -4.5 * invx * retval[5];"},
{"lineNum":" 1640","line":"    }"},
{"lineNum":" 1641","line":"    if (power > 6) {"},
{"lineNum":" 1642","line":"        retval[7] = -5.5 * invx * retval[6];"},
{"lineNum":" 1643","line":"    }"},
{"lineNum":" 1644","line":"    return retval;"},
{"lineNum":" 1645","line":"}"},
{"lineNum":" 1646","line":""},
{"lineNum":" 1647","line":"template <typename T, unsigned int Power, unsigned int Dim>"},
{"lineNum":" 1648","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1649","line":"Trigon<T, Power, Dim>"},
{"lineNum":" 1650","line":"sqrt(Trigon<T, Power, Dim> const& t)"},
{"lineNum":" 1651","line":"{"},
{"lineNum":" 1652","line":"    return generic_transcendental(t, sqrt_derivatives(t.value(), Power));","class":"lineNoCov","hits":"0","possible_hits":"23",},
{"lineNum":" 1653","line":"}"},
{"lineNum":" 1654","line":""},
{"lineNum":" 1655","line":"template <typename T>"},
{"lineNum":" 1656","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1657","line":"Derivatives_t<T>"},
{"lineNum":" 1658","line":"asin_derivatives(T x, unsigned int power)"},
{"lineNum":" 1659","line":"{"},
{"lineNum":" 1660","line":"    // qpow"},
{"lineNum":" 1661","line":"    using namespace kt;"},
{"lineNum":" 1662","line":""},
{"lineNum":" 1663","line":"    Derivatives_t<T> retval;"},
{"lineNum":" 1664","line":"    retval[0] = std::asin(x);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1665","line":"    T x2(x * x);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1666","line":"    T invsqrt1mx2(1.0 / std::sqrt(1 - x2));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1667","line":"    if (power > 0) {"},
{"lineNum":" 1668","line":"        retval[1] = invsqrt1mx2;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1669","line":"    }"},
{"lineNum":" 1670","line":"    if (power > 1) {"},
{"lineNum":" 1671","line":"        retval[2] = qpow(invsqrt1mx2, 3) * x;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1672","line":"    }"},
{"lineNum":" 1673","line":"    if (power > 2) {"},
{"lineNum":" 1674","line":"        retval[3] = 2 * qpow(invsqrt1mx2, 5) * x2 + qpow(invsqrt1mx2, 5);"},
{"lineNum":" 1675","line":"    }"},
{"lineNum":" 1676","line":"    if (power > 3) {"},
{"lineNum":" 1677","line":"        retval[4] ="},
{"lineNum":" 1678","line":"            6 * qpow(invsqrt1mx2, 7) * x * x2 + 9 * qpow(invsqrt1mx2, 7) * x;"},
{"lineNum":" 1679","line":"    }"},
{"lineNum":" 1680","line":"    if (power > 4) {"},
{"lineNum":" 1681","line":"        retval[5] = 24 * qpow(invsqrt1mx2, 9) * qpow(x2, 2) +"},
{"lineNum":" 1682","line":"                    72 * qpow(invsqrt1mx2, 9) * x2 + 9 * qpow(invsqrt1mx2, 9);"},
{"lineNum":" 1683","line":"    }"},
{"lineNum":" 1684","line":"    if (power > 5) {"},
{"lineNum":" 1685","line":"        retval[6] = 120 * qpow(invsqrt1mx2, 11) * x * qpow(x2, 2) +"},
{"lineNum":" 1686","line":"                    600 * qpow(invsqrt1mx2, 11) * x * x2 +"},
{"lineNum":" 1687","line":"                    225 * qpow(invsqrt1mx2, 11) * x;"},
{"lineNum":" 1688","line":"    }"},
{"lineNum":" 1689","line":"    if (power > 6) {"},
{"lineNum":" 1690","line":"        retval[7] = 720 * qpow(invsqrt1mx2, 13) * qpow(x2, 3) +"},
{"lineNum":" 1691","line":"                    5400 * qpow(invsqrt1mx2, 13) * qpow(x2, 2) +"},
{"lineNum":" 1692","line":"                    4050 * qpow(invsqrt1mx2, 13) * x2 +"},
{"lineNum":" 1693","line":"                    225 * qpow(invsqrt1mx2, 13);"},
{"lineNum":" 1694","line":"    }"},
{"lineNum":" 1695","line":"    return retval;"},
{"lineNum":" 1696","line":"}"},
{"lineNum":" 1697","line":""},
{"lineNum":" 1698","line":"template <typename T, unsigned int Power, unsigned int Dim>"},
{"lineNum":" 1699","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1700","line":"Trigon<T, Power, Dim>"},
{"lineNum":" 1701","line":"asin(Trigon<T, Power, Dim> const& t)"},
{"lineNum":" 1702","line":"{"},
{"lineNum":" 1703","line":"    return generic_transcendental(t, asin_derivatives(t.value(), Power));","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1704","line":"}"},
{"lineNum":" 1705","line":""},
{"lineNum":" 1706","line":"template <typename T>"},
{"lineNum":" 1707","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1708","line":"Derivatives_t<T>"},
{"lineNum":" 1709","line":"atan_derivatives(T x, unsigned int power)"},
{"lineNum":" 1710","line":"{"},
{"lineNum":" 1711","line":"    //throw std::runtime_error(\"atan(trigon t) yet to be implemented\");"},
{"lineNum":" 1712","line":"    return Derivatives_t<T>();"},
{"lineNum":" 1713","line":""},
{"lineNum":" 1714","line":"#if 0"},
{"lineNum":" 1715","line":"    Derivatives_t<T> retval;"},
{"lineNum":" 1716","line":"    retval[0] = std::atan(x);"},
{"lineNum":" 1717","line":"    T x2(x * x);"},
{"lineNum":" 1718","line":"    T invsqrt1mx2(1.0 / std::sqrt(1 - x2));"},
{"lineNum":" 1719","line":"    if (power > 0) {"},
{"lineNum":" 1720","line":"        retval[1] = invsqrt1mx2;"},
{"lineNum":" 1721","line":"    }"},
{"lineNum":" 1722","line":"    if (power > 1) {"},
{"lineNum":" 1723","line":"        retval[2] = qpow(invsqrt1mx2, 3) * x;"},
{"lineNum":" 1724","line":"    }"},
{"lineNum":" 1725","line":"    if (power > 2) {"},
{"lineNum":" 1726","line":"        retval[3] = 2 * qpow(invsqrt1mx2, 5) * x2 + qpow(invsqrt1mx2, 5);"},
{"lineNum":" 1727","line":"    }"},
{"lineNum":" 1728","line":"    if (power > 3) {"},
{"lineNum":" 1729","line":"        retval[4] ="},
{"lineNum":" 1730","line":"            6 * qpow(invsqrt1mx2, 7) * x * x2 + 9 * qpow(invsqrt1mx2, 7) * x;"},
{"lineNum":" 1731","line":"    }"},
{"lineNum":" 1732","line":"    if (power > 4) {"},
{"lineNum":" 1733","line":"        retval[5] = 24 * qpow(invsqrt1mx2, 9) * qpow(x2, 2) +"},
{"lineNum":" 1734","line":"                    72 * qpow(invsqrt1mx2, 9) * x2 + 9 * qpow(invsqrt1mx2, 9);"},
{"lineNum":" 1735","line":"    }"},
{"lineNum":" 1736","line":"    if (power > 5) {"},
{"lineNum":" 1737","line":"        retval[6] = 120 * qpow(invsqrt1mx2, 11) * x * qpow(x2, 2) +"},
{"lineNum":" 1738","line":"                    600 * qpow(invsqrt1mx2, 11) * x * x2 +"},
{"lineNum":" 1739","line":"                    225 * qpow(invsqrt1mx2, 11) * x;"},
{"lineNum":" 1740","line":"    }"},
{"lineNum":" 1741","line":"    if (power > 6) {"},
{"lineNum":" 1742","line":"        retval[7] = 720 * qpow(invsqrt1mx2, 13) * qpow(x2, 3) +"},
{"lineNum":" 1743","line":"                    5400 * qpow(invsqrt1mx2, 13) * qpow(x2, 2) +"},
{"lineNum":" 1744","line":"                    4050 * qpow(invsqrt1mx2, 13) * x2 +"},
{"lineNum":" 1745","line":"                    225 * qpow(invsqrt1mx2, 13);"},
{"lineNum":" 1746","line":"    }"},
{"lineNum":" 1747","line":"    return retval;"},
{"lineNum":" 1748","line":"#endif"},
{"lineNum":" 1749","line":"}"},
{"lineNum":" 1750","line":""},
{"lineNum":" 1751","line":"template <typename T, unsigned int Power, unsigned int Dim>"},
{"lineNum":" 1752","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1753","line":"Trigon<T, Power, Dim>"},
{"lineNum":" 1754","line":"atan(Trigon<T, Power, Dim> const& t)"},
{"lineNum":" 1755","line":"{"},
{"lineNum":" 1756","line":"    return generic_transcendental(t, atan_derivatives(t.value(), Power));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1757","line":"}"},
{"lineNum":" 1758","line":""},
{"lineNum":" 1759","line":""},
{"lineNum":" 1760","line":"template <typename T>"},
{"lineNum":" 1761","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1762","line":"Derivatives_t<T>"},
{"lineNum":" 1763","line":"log_derivatives(T x, unsigned int power)"},
{"lineNum":" 1764","line":"{"},
{"lineNum":" 1765","line":"    Derivatives_t<T> retval;"},
{"lineNum":" 1766","line":"    retval[0] = std::log(x);","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":" 1767","line":"    T invx(1.0 / x);","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":" 1768","line":"    T powinvx = 1.0;"},
{"lineNum":" 1769","line":"    T fact = 1.0;"},
{"lineNum":" 1770","line":"    for (size_t i = 1; i < power; ++i) {"},
{"lineNum":" 1771","line":"        powinvx *= invx;"},
{"lineNum":" 1772","line":"        if (i > 1) {"},
{"lineNum":" 1773","line":"            fact *= -(i - 1);"},
{"lineNum":" 1774","line":"        }"},
{"lineNum":" 1775","line":"        retval[i] = fact * powinvx;","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":" 1776","line":"    }"},
{"lineNum":" 1777","line":"    return retval;"},
{"lineNum":" 1778","line":"}"},
{"lineNum":" 1779","line":""},
{"lineNum":" 1780","line":"template <typename T, unsigned int Power, unsigned int Dim>"},
{"lineNum":" 1781","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1782","line":"Trigon<T, Power, Dim>"},
{"lineNum":" 1783","line":"log(Trigon<T, Power, Dim> const& t)"},
{"lineNum":" 1784","line":"{"},
{"lineNum":" 1785","line":"    return generic_transcendental(t, log_derivatives(t.value(), Power));","class":"lineNoCov","hits":"0","possible_hits":"26",},
{"lineNum":" 1786","line":"}"},
{"lineNum":" 1787","line":""},
{"lineNum":" 1788","line":""},
{"lineNum":" 1789","line":""},
{"lineNum":" 1790","line":"template<typename TRIGON>"},
{"lineNum":" 1791","line":"struct TMapping"},
{"lineNum":" 1792","line":"{"},
{"lineNum":" 1793","line":"    using trigon_t = TRIGON;"},
{"lineNum":" 1794","line":"    constexpr static unsigned int dim = TRIGON::dim;"},
{"lineNum":" 1795","line":"    constexpr static unsigned int power = TRIGON::power();"},
{"lineNum":" 1796","line":""},
{"lineNum":" 1797","line":"    //template<size_t ROW, size_t OPT>"},
{"lineNum":" 1798","line":"    using matrix_t = Eigen::Matrix<typename trigon_t::data_type, Eigen::Dynamic, dim>;"},
{"lineNum":" 1799","line":""},
{"lineNum":" 1800","line":"    arr_t<TRIGON, TRIGON::dim> comp;"},
{"lineNum":" 1801","line":""},
{"lineNum":" 1802","line":"    template<class U>"},
{"lineNum":" 1803","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1804","line":"    explicit TMapping(TMapping<Trigon<U, power, dim>> const& o)"},
{"lineNum":" 1805","line":"    { comp.from(o.comp); }"},
{"lineNum":" 1806","line":""},
{"lineNum":" 1807","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1808","line":"    TMapping() : comp()"},
{"lineNum":" 1809","line":"    { }"},
{"lineNum":" 1810","line":""},
{"lineNum":" 1811","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1812","line":"    TRIGON& operator[](size_t idx) { return comp[idx]; }"},
{"lineNum":" 1813","line":""},
{"lineNum":" 1814","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1815","line":"    TRIGON const& operator[](size_t idx) const { return comp[idx]; }"},
{"lineNum":" 1816","line":""},
{"lineNum":" 1817","line":"    // evaluation"},
{"lineNum":" 1818","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1819","line":"    arr_t<typename TRIGON::data_type, dim>"},
{"lineNum":" 1820","line":"    operator()(arr_t<typename TRIGON::data_type, dim> const& x) const"},
{"lineNum":" 1821","line":"    {"},
{"lineNum":" 1822","line":"        arr_t<typename TRIGON::data_type, dim> val;"},
{"lineNum":" 1823","line":"        for(int i=0; i<dim; ++i) val[i] = comp[i](x);"},
{"lineNum":" 1824","line":"        return val;"},
{"lineNum":" 1825","line":"    }"},
{"lineNum":" 1826","line":""},
{"lineNum":" 1827","line":"    // compose"},
{"lineNum":" 1828","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1829","line":"    TMapping<TRIGON>"},
{"lineNum":" 1830","line":"    operator()(TMapping<TRIGON> const& x,"},
{"lineNum":" 1831","line":"            arr_t<typename TRIGON::data_type, dim> const& ref = {0}) const"},
{"lineNum":" 1832","line":"    {"},
{"lineNum":" 1833","line":"        TMapping<TRIGON> ret;"},
{"lineNum":" 1834","line":"        TMapping<TRIGON> u = x;"},
{"lineNum":" 1835","line":""},
{"lineNum":" 1836","line":"        for(int i=0; i<comp.size(); ++i)"},
{"lineNum":" 1837","line":"            u[i] = x[i] - TRIGON(ref[i]);"},
{"lineNum":" 1838","line":""},
{"lineNum":" 1839","line":"        for(int i=0; i<comp.size(); ++i)"},
{"lineNum":" 1840","line":"            ret[i] = comp[i].compose(u);"},
{"lineNum":" 1841","line":""},
{"lineNum":" 1842","line":"        return ret;"},
{"lineNum":" 1843","line":"    }"},
{"lineNum":" 1844","line":""},
{"lineNum":" 1845","line":"    // subtract"},
{"lineNum":" 1846","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1847","line":"    TMapping<TRIGON>"},
{"lineNum":" 1848","line":"    operator-(TMapping<TRIGON> const& x)"},
{"lineNum":" 1849","line":"    {"},
{"lineNum":" 1850","line":"        TMapping<TRIGON> ret;"},
{"lineNum":" 1851","line":"        for(int i=0; i<dim; ++i) ret[i] = comp[i] - x.comp[i];"},
{"lineNum":" 1852","line":"        return ret;"},
{"lineNum":" 1853","line":"    }"},
{"lineNum":" 1854","line":""},
{"lineNum":" 1855","line":"    // exp"},
{"lineNum":" 1856","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1857","line":"    TRIGON operator^(TRIGON const& x)"},
{"lineNum":" 1858","line":"    {"},
{"lineNum":" 1859","line":"        TRIGON answer;"},
{"lineNum":" 1860","line":"        const int s = x.dim; // space dim"},
{"lineNum":" 1861","line":""},
{"lineNum":" 1862","line":"        for(int i=0; i<s; ++i)"},
{"lineNum":" 1863","line":"        {"},
{"lineNum":" 1864","line":"            //answer += comp[i] * partial_deriv(x, i);"},
{"lineNum":" 1865","line":""},
{"lineNum":" 1866","line":"            auto xd = partial_deriv(x, i);"},
{"lineNum":" 1867","line":"            TRIGON xdp; xdp.lower = xd;"},
{"lineNum":" 1868","line":""},
{"lineNum":" 1869","line":"            answer += comp[i] * xdp;"},
{"lineNum":" 1870","line":"        }"},
{"lineNum":" 1871","line":""},
{"lineNum":" 1872","line":"        return answer;"},
{"lineNum":" 1873","line":"    }"},
{"lineNum":" 1874","line":""},
{"lineNum":" 1875","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1876","line":"    TRIGON"},
{"lineNum":" 1877","line":"    exp_map(typename TRIGON::data_type const& t, TRIGON const& x)"},
{"lineNum":" 1878","line":"    {"},
{"lineNum":" 1879","line":"        constexpr int MX_MAXITER = 100;"},
{"lineNum":" 1880","line":"        typename TRIGON::data_type zero{};"},
{"lineNum":" 1881","line":""},
{"lineNum":" 1882","line":"        double f = 1.0;"},
{"lineNum":" 1883","line":"        int count = 0;"},
{"lineNum":" 1884","line":""},
{"lineNum":" 1885","line":"        TRIGON answer = x;"},
{"lineNum":" 1886","line":"        TRIGON u = (t/f) * ( (*this)^x );"},
{"lineNum":" 1887","line":"        ++f;"},
{"lineNum":" 1888","line":""},
{"lineNum":" 1889","line":"        while( ++count<MX_MAXITER && u!=zero )"},
{"lineNum":" 1890","line":"        {"},
{"lineNum":" 1891","line":"            answer += u;"},
{"lineNum":" 1892","line":"            u = (t/f) * ( (*this)^u );"},
{"lineNum":" 1893","line":"            ++f;"},
{"lineNum":" 1894","line":"        }"},
{"lineNum":" 1895","line":""},
{"lineNum":" 1896","line":"        if (count >= MX_MAXITER)"},
{"lineNum":" 1897","line":"        {"},
{"lineNum":" 1898","line":"            std::cout << \"TMapping::exp_map() number of iteration has \""},
{"lineNum":" 1899","line":"                \"exceeded \" << MX_MAXITER << \" without achieving \""},
{"lineNum":" 1900","line":"                \"convergence. Results maybe incorrect.\\n\";"},
{"lineNum":" 1901","line":"        }"},
{"lineNum":" 1902","line":""},
{"lineNum":" 1903","line":"        return answer;"},
{"lineNum":" 1904","line":"    }"},
{"lineNum":" 1905","line":""},
{"lineNum":" 1906","line":""},
{"lineNum":" 1907","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1908","line":"    TMapping<TRIGON>"},
{"lineNum":" 1909","line":"    exp_map(typename TRIGON::data_type const& t, TMapping<TRIGON> const& m)"},
{"lineNum":" 1910","line":"    {"},
{"lineNum":" 1911","line":"        TMapping<TRIGON> z;"},
{"lineNum":" 1912","line":"        for(int i=0; i<dim; ++i) z[i] = exp_map(t, m[i]);"},
{"lineNum":" 1913","line":"        return z;"},
{"lineNum":" 1914","line":"    }"},
{"lineNum":" 1915","line":""},
{"lineNum":" 1916","line":""},
{"lineNum":" 1917","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1918","line":"    void filter(unsigned int lower, unsigned int upper)"},
{"lineNum":" 1919","line":"    {"},
{"lineNum":" 1920","line":"        for(auto & t : comp) t.filter(lower, upper);"},
{"lineNum":" 1921","line":"    }"},
{"lineNum":" 1922","line":""},
{"lineNum":" 1923","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1924","line":"    karray2d_row jacobian() const"},
{"lineNum":" 1925","line":"    {"},
{"lineNum":" 1926","line":"        karray2d_row ret(\"jacobian\", dim, dim);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1927","line":"        for(int i=0; i<dim; ++i)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1928","line":"            for(int j=0; j<dim; ++j)"},
{"lineNum":" 1929","line":"                ret(i,j) = comp[i].template get_subpower<1>().terms[j];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1930","line":"        return ret;"},
{"lineNum":" 1931","line":"    }"},
{"lineNum":" 1932","line":""},
{"lineNum":" 1933","line":"#ifdef __CUDA_ARCH__"},
{"lineNum":" 1934","line":"    syn::dummy_json to_json() const"},
{"lineNum":" 1935","line":"    { return syn::dummy_json{}; }"},
{"lineNum":" 1936","line":"#else"},
{"lineNum":" 1937","line":"    syn::json to_json() const"},
{"lineNum":" 1938","line":"    {"},
{"lineNum":" 1939","line":"        syn::json val = syn::json::array();"},
{"lineNum":" 1940","line":"        for(auto const& t : comp)"},
{"lineNum":" 1941","line":"            val.emplace_back(t.to_json());"},
{"lineNum":" 1942","line":"        return val;"},
{"lineNum":" 1943","line":"    }"},
{"lineNum":" 1944","line":"#endif"},
{"lineNum":" 1945","line":""},
{"lineNum":" 1946","line":"};"},
{"lineNum":" 1947","line":""},
{"lineNum":" 1948","line":"#if 1"},
{"lineNum":" 1949","line":"template<class TRIGON>"},
{"lineNum":" 1950","line":"std::ostream& operator<<("},
{"lineNum":" 1951","line":"        std::ostream& os, TMapping<TRIGON> const& m)"},
{"lineNum":" 1952","line":"{"},
{"lineNum":" 1953","line":"    for(auto const& t : m.comp) os << t;"},
{"lineNum":" 1954","line":"    return os;"},
{"lineNum":" 1955","line":"}"},
{"lineNum":" 1956","line":""},
{"lineNum":" 1957","line":""},
{"lineNum":" 1958","line":"template<typename TRIGON>"},
{"lineNum":" 1959","line":"TMapping<TRIGON> operator*("},
{"lineNum":" 1960","line":"        typename TMapping<TRIGON>::matrix_t const& m,"},
{"lineNum":" 1961","line":"        TMapping<TRIGON> const& x)"},
{"lineNum":" 1962","line":"{"},
{"lineNum":" 1963","line":"    TMapping<TRIGON> z;"},
{"lineNum":" 1964","line":""},
{"lineNum":" 1965","line":"    for(int i=0; i< m.rows(); ++i)"},
{"lineNum":" 1966","line":"    {"},
{"lineNum":" 1967","line":"        z[i] = m(i,0) * x[0];"},
{"lineNum":" 1968","line":""},
{"lineNum":" 1969","line":"        int j = 1;"},
{"lineNum":" 1970","line":"        while(j < m.cols())"},
{"lineNum":" 1971","line":"        {"},
{"lineNum":" 1972","line":"            z[i] += m(i,j) * x[j];"},
{"lineNum":" 1973","line":"            ++j;"},
{"lineNum":" 1974","line":"        }"},
{"lineNum":" 1975","line":"    }"},
{"lineNum":" 1976","line":""},
{"lineNum":" 1977","line":"    return z;"},
{"lineNum":" 1978","line":"}"},
{"lineNum":" 1979","line":"#endif"},
{"lineNum":" 1980","line":""},
{"lineNum":" 1981","line":""},
{"lineNum":" 1982","line":""},
{"lineNum":" 1983","line":"#endif // TRIGON_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 126, "covered" : 0,};
var merged_data = [];
