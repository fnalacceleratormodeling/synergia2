var data = {lines:[
{"lineNum":"    1","line":""},
{"lineNum":"    2","line":"#include \"step.h\""},
{"lineNum":"    3","line":"#include \"synergia/foundation/physical_constants.h\""},
{"lineNum":"    4","line":"#include \"synergia/bunch/period.h\""},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"namespace"},
{"lineNum":"    7","line":"{"},
{"lineNum":"    8","line":"    void apply_longitudinal_boundary(Bunch& bunch)"},
{"lineNum":"    9","line":"    {"},
{"lineNum":"   10","line":"        // Bunch longitudinal boundary condition"},
{"lineNum":"   11","line":"        auto lb = bunch.get_longitudinal_boundary();"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"        switch(lb.first)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   14","line":"        {"},
{"lineNum":"   15","line":"            case LongitudinalBoundary::periodic:"},
{"lineNum":"   16","line":"                apply_longitudinal_periodicity(bunch, lb.second);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   17","line":"                break;"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"            case LongitudinalBoundary::aperture:"},
{"lineNum":"   20","line":"                apply_zcut(bunch, lb.second);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   21","line":"                break;"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"            case LongitudinalBoundary::bucket_barrier:"},
{"lineNum":"   24","line":"                apply_longitudinal_bucket_barrier(bunch, lb.second);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   25","line":"                break;"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"            case LongitudinalBoundary::open:"},
{"lineNum":"   28","line":"            default:"},
{"lineNum":"   29","line":"                break;"},
{"lineNum":"   30","line":"        }"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"    }"},
{"lineNum":"   33","line":"}"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"Step::Step(double length)"},
{"lineNum":"   36","line":": operators()"},
{"lineNum":"   37","line":", step_betas()"},
{"lineNum":"   38","line":", length(length)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   39","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   40","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"void Step::create_operations(Lattice const & lattice)"},
{"lineNum":"   43","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   44","line":"    for (auto & op : operators)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   45","line":"    {"},
{"lineNum":"   46","line":"        op->create_operations(lattice);"},
{"lineNum":"   47","line":"    }"},
{"lineNum":"   48","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"void Step::apply(Bunch_simulator & simulator, Logger & logger) const"},
{"lineNum":"   51","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   52","line":"    if (simulator[0].get_bunch_array_size() == 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   53","line":"    {"},
{"lineNum":"   54","line":"        throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   55","line":"                \"Step::apply() unable to proceed. no bunch in the simulator\" );"},
{"lineNum":"   56","line":"    }"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"    // time [s] in accelerator frame"},
{"lineNum":"   59","line":"    double ref_beta = simulator[0][0].get_reference_particle().get_beta();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   60","line":"    double time = length / (ref_beta * pconstants::c);"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"    for (auto const & op : operators)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   63","line":"    {"},
{"lineNum":"   64","line":"        double t0 = MPI_Wtime();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"        logger(LoggerV::INFO_OPR)"},
{"lineNum":"   67","line":"            << \"\\n  Operator start:\\n\";"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"        // operator apply"},
{"lineNum":"   70","line":"        op->apply(simulator, time, logger);"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"        double t1 = MPI_Wtime();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"        logger(LoggerV::INFO_OPR)"},
{"lineNum":"   75","line":"            << \"  Operator finish: operator: name = \" << op->get_name()"},
{"lineNum":"   76","line":"            << \", type = \" << op->get_type() << \", time = \""},
{"lineNum":"   77","line":"            << std::fixed << std::setprecision(3) << t1 - t0 << \"s\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   78","line":"            << \"\\n\";"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"        // per operator diagnostics action"},
{"lineNum":"   81","line":"        simulator.diag_action_operator(*op);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"        // longitudinal conditions"},
{"lineNum":"   84","line":"        for (auto& train : simulator.get_trains())"},
{"lineNum":"   85","line":"            for (auto& bunch : train.get_bunches())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   86","line":"                apply_longitudinal_boundary(bunch);"},
{"lineNum":"   87","line":"    }"},
{"lineNum":"   88","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"#if 0"},
{"lineNum":"   91","line":"void"},
{"lineNum":"   92","line":"Step::set_betas(double betax, double betay)"},
{"lineNum":"   93","line":"{"},
{"lineNum":"   94","line":" this->step_betas.push_back(betax);"},
{"lineNum":"   95","line":" this->step_betas.push_back(betay);"},
{"lineNum":"   96","line":"}"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"std::vector<double >"},
{"lineNum":"   99","line":"Step::get_betas()"},
{"lineNum":"  100","line":"{"},
{"lineNum":"  101","line":" return step_betas;"},
{"lineNum":"  102","line":"}"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"void"},
{"lineNum":"  105","line":"Step::print(int index) const"},
{"lineNum":"  106","line":"{"},
{"lineNum":"  107","line":"#if 0"},
{"lineNum":"  108","line":"    std::cout << \"step \" << index << \":\\n\";"},
{"lineNum":"  109","line":"    for (Operators::const_iterator it = operators.begin(); it"},
{"lineNum":"  110","line":"            != operators.end(); ++it) {"},
{"lineNum":"  111","line":"        (*it)->print();"},
{"lineNum":"  112","line":"    }"},
{"lineNum":"  113","line":"#endif"},
{"lineNum":"  114","line":"}"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 21, "covered" : 0,};
var merged_data = [];
