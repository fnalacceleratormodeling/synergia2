var data = {lines:[
{"lineNum":"    1","line":"#ifndef LOGGER_H_"},
{"lineNum":"    2","line":"#define LOGGER_H_"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#include <iostream>"},
{"lineNum":"    5","line":"#include <ostream>"},
{"lineNum":"    6","line":"#include <fstream>"},
{"lineNum":"    7","line":"#include <string>"},
{"lineNum":"    8","line":"#include \"synergia/utils/commxx.h\""},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"enum class LoggerV"},
{"lineNum":"   11","line":"{"},
{"lineNum":"   12","line":"    DEBUG,"},
{"lineNum":"   13","line":"    DINFO,"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"    INFO,"},
{"lineNum":"   16","line":"    INFO_OPN,  // operation"},
{"lineNum":"   17","line":"    INFO_OPR,  // operator"},
{"lineNum":"   18","line":"    INFO_STEP, // step"},
{"lineNum":"   19","line":"    INFO_TURN, // turn"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"    WARNING,"},
{"lineNum":"   22","line":"    ERROR,"},
{"lineNum":"   23","line":"};"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"class Logger"},
{"lineNum":"   26","line":"{"},
{"lineNum":"   27","line":"private:"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"    std::ostream * stream_ptr;"},
{"lineNum":"   30","line":"    bool have_stream;"},
{"lineNum":"   31","line":"    std::ofstream * fstream_ptr;"},
{"lineNum":"   32","line":"    bool have_fstream;"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"    LoggerV verbosity;"},
{"lineNum":"   35","line":"    LoggerV severity;"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"public:"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"    /// Log to screen on a single rank"},
{"lineNum":"   40","line":"    Logger( int rank = 0,"},
{"lineNum":"   41","line":"            LoggerV verbosity = LoggerV::DINFO,"},
{"lineNum":"   42","line":"            bool log = true );"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"    /// Log to file and, optionally, screen on a single rank"},
{"lineNum":"   45","line":"    Logger( int rank,"},
{"lineNum":"   46","line":"            std::string const& filename,"},
{"lineNum":"   47","line":"            LoggerV verbosity = LoggerV::DINFO,"},
{"lineNum":"   48","line":"            bool screen = true,"},
{"lineNum":"   49","line":"            bool log = true);"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"    /// Log to file and, optionally, screen on a single rank"},
{"lineNum":"   52","line":"    /// This variation on the previous constructor is needed"},
{"lineNum":"   53","line":"    /// for technical C++ reasons..."},
{"lineNum":"   54","line":"    Logger( int rank,"},
{"lineNum":"   55","line":"            char const * filename,"},
{"lineNum":"   56","line":"            LoggerV verbosity = LoggerV::DINFO,"},
{"lineNum":"   57","line":"            bool screen = true,"},
{"lineNum":"   58","line":"            bool log = true);"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"    /// Log to a separate file on each rank"},
{"lineNum":"   61","line":"    Logger( std::string const& filename_base,"},
{"lineNum":"   62","line":"            LoggerV verbosity = LoggerV::DINFO,"},
{"lineNum":"   63","line":"            bool log = true);"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"    Logger & set_stream(std::ostream & stream);"},
{"lineNum":"   66","line":"    Logger & write(std::string const& str);"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"    template<typename T>"},
{"lineNum":"   69","line":"    Logger & operator<<(T const& t)"},
{"lineNum":"   70","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"   71","line":"        if (have_stream && (severity >= verbosity)) {","class":"lineNoCov","hits":"0","possible_hits":"147",},
{"lineNum":"   72","line":"            (*stream_ptr) << t;","class":"lineNoCov","hits":"0","possible_hits":"140",},
{"lineNum":"   73","line":"        }"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"        if (have_fstream && (severity >= verbosity)) {","class":"lineNoCov","hits":"0","possible_hits":"148",},
{"lineNum":"   76","line":"            (*fstream_ptr) << t;","class":"lineNoCov","hits":"0","possible_hits":"140",},
{"lineNum":"   77","line":"        }"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"        return *this;","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":"   80","line":"    }"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"    Logger & operator()(LoggerV severity)"},
{"lineNum":"   83","line":"    { this->severity = severity; return *this; }","class":"lineNoCov","hits":"0","possible_hits":"22",},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"    Logger & operator<<(std::ostream & (*op)(std::ostream &));"},
{"lineNum":"   86","line":"    Logger & flush();"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"    ~Logger();"},
{"lineNum":"   89","line":"};"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"#endif /* LOGGER_H_ */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 7, "covered" : 0,};
var merged_data = [];
