var data = {lines:[
{"lineNum":"    1","line":"#ifndef BOOST_SMART_PTR_DETAIL_SHARED_COUNT_HPP_INCLUDED"},
{"lineNum":"    2","line":"#define BOOST_SMART_PTR_DETAIL_SHARED_COUNT_HPP_INCLUDED"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"// MS compatible compilers support #pragma once"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"#if defined(_MSC_VER) && (_MSC_VER >= 1020)"},
{"lineNum":"    7","line":"# pragma once"},
{"lineNum":"    8","line":"#endif"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"//"},
{"lineNum":"   11","line":"//  detail/shared_count.hpp"},
{"lineNum":"   12","line":"//"},
{"lineNum":"   13","line":"//  Copyright (c) 2001, 2002, 2003 Peter Dimov and Multi Media Ltd."},
{"lineNum":"   14","line":"//  Copyright 2004-2005 Peter Dimov"},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"// Distributed under the Boost Software License, Version 1.0. (See"},
{"lineNum":"   17","line":"// accompanying file LICENSE_1_0.txt or copy at"},
{"lineNum":"   18","line":"// http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"   19","line":"//"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"#ifdef __BORLANDC__"},
{"lineNum":"   22","line":"# pragma warn -8027     // Functions containing try are not expanded inline"},
{"lineNum":"   23","line":"#endif"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"#include <boost/config.hpp>"},
{"lineNum":"   26","line":"#include <boost/checked_delete.hpp>"},
{"lineNum":"   27","line":"#include <boost/throw_exception.hpp>"},
{"lineNum":"   28","line":"#include <boost/smart_ptr/bad_weak_ptr.hpp>"},
{"lineNum":"   29","line":"#include <boost/smart_ptr/detail/sp_counted_base.hpp>"},
{"lineNum":"   30","line":"#include <boost/smart_ptr/detail/sp_counted_impl.hpp>"},
{"lineNum":"   31","line":"#include <boost/smart_ptr/detail/sp_disable_deprecated.hpp>"},
{"lineNum":"   32","line":"#include <boost/smart_ptr/detail/sp_noexcept.hpp>"},
{"lineNum":"   33","line":"#include <boost/config/workaround.hpp>"},
{"lineNum":"   34","line":"// In order to avoid circular dependencies with Boost.TR1"},
{"lineNum":"   35","line":"// we make sure that our include of <memory> doesn\'t try to"},
{"lineNum":"   36","line":"// pull in the TR1 headers: that\'s why we use this header"},
{"lineNum":"   37","line":"// rather than including <memory> directly:"},
{"lineNum":"   38","line":"#include <boost/config/no_tr1/memory.hpp>  // std::auto_ptr"},
{"lineNum":"   39","line":"#include <functional>       // std::less"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"#ifdef BOOST_NO_EXCEPTIONS"},
{"lineNum":"   42","line":"# include <new>              // std::bad_alloc"},
{"lineNum":"   43","line":"#endif"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"#include <boost/core/addressof.hpp>"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"#if defined( BOOST_SP_DISABLE_DEPRECATED )"},
{"lineNum":"   48","line":"#pragma GCC diagnostic push"},
{"lineNum":"   49","line":"#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\""},
{"lineNum":"   50","line":"#endif"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"namespace boost"},
{"lineNum":"   53","line":"{"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"namespace movelib"},
{"lineNum":"   56","line":"{"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"template< class T, class D > class unique_ptr;"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"} // namespace movelib"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"namespace detail"},
{"lineNum":"   63","line":"{"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"#if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"int const shared_count_id = 0x2C35F101;"},
{"lineNum":"   68","line":"int const   weak_count_id = 0x298C38A4;"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"#endif"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"struct sp_nothrow_tag {};"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"template< class D > struct sp_inplace_tag"},
{"lineNum":"   75","line":"{"},
{"lineNum":"   76","line":"};"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"template< class T > class sp_reference_wrapper"},
{"lineNum":"   79","line":"{"},
{"lineNum":"   80","line":"public:"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"    explicit sp_reference_wrapper( T & t): t_( boost::addressof( t ) )"},
{"lineNum":"   83","line":"    {"},
{"lineNum":"   84","line":"    }"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"    template< class Y > void operator()( Y * p ) const"},
{"lineNum":"   87","line":"    {"},
{"lineNum":"   88","line":"        (*t_)( p );"},
{"lineNum":"   89","line":"    }"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"private:"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"    T * t_;"},
{"lineNum":"   94","line":"};"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"template< class D > struct sp_convert_reference"},
{"lineNum":"   97","line":"{"},
{"lineNum":"   98","line":"    typedef D type;"},
{"lineNum":"   99","line":"};"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"template< class D > struct sp_convert_reference< D& >"},
{"lineNum":"  102","line":"{"},
{"lineNum":"  103","line":"    typedef sp_reference_wrapper< D > type;"},
{"lineNum":"  104","line":"};"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"class weak_count;"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"class shared_count"},
{"lineNum":"  109","line":"{"},
{"lineNum":"  110","line":"private:"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"    sp_counted_base * pi_;"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"#if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)"},
{"lineNum":"  115","line":"    int id_;"},
{"lineNum":"  116","line":"#endif"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"    friend class weak_count;"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"public:"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"    BOOST_CONSTEXPR shared_count() BOOST_SP_NOEXCEPT: pi_(0)","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  123","line":"#if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)"},
{"lineNum":"  124","line":"        , id_(shared_count_id)"},
{"lineNum":"  125","line":"#endif"},
{"lineNum":"  126","line":"    {"},
{"lineNum":"  127","line":"    }"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"    BOOST_CONSTEXPR explicit shared_count( sp_counted_base * pi ) BOOST_SP_NOEXCEPT: pi_( pi )"},
{"lineNum":"  130","line":"#if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)"},
{"lineNum":"  131","line":"        , id_(shared_count_id)"},
{"lineNum":"  132","line":"#endif"},
{"lineNum":"  133","line":"    {"},
{"lineNum":"  134","line":"    }"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"    template<class Y> explicit shared_count( Y * p ): pi_( 0 )"},
{"lineNum":"  137","line":"#if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)"},
{"lineNum":"  138","line":"        , id_(shared_count_id)"},
{"lineNum":"  139","line":"#endif"},
{"lineNum":"  140","line":"    {"},
{"lineNum":"  141","line":"#ifndef BOOST_NO_EXCEPTIONS"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"        try"},
{"lineNum":"  144","line":"        {"},
{"lineNum":"  145","line":"            pi_ = new sp_counted_impl_p<Y>( p );","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  146","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  147","line":"        catch(...)"},
{"lineNum":"  148","line":"        {"},
{"lineNum":"  149","line":"            boost::checked_delete( p );"},
{"lineNum":"  150","line":"            throw;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  151","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"#else"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"        pi_ = new sp_counted_impl_p<Y>( p );"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"        if( pi_ == 0 )"},
{"lineNum":"  158","line":"        {"},
{"lineNum":"  159","line":"            boost::checked_delete( p );"},
{"lineNum":"  160","line":"            boost::throw_exception( std::bad_alloc() );"},
{"lineNum":"  161","line":"        }"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"#endif"},
{"lineNum":"  164","line":"    }"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"#if defined( BOOST_MSVC ) && BOOST_WORKAROUND( BOOST_MSVC, <= 1200 )"},
{"lineNum":"  167","line":"    template<class Y, class D> shared_count( Y * p, D d ): pi_(0)"},
{"lineNum":"  168","line":"#else"},
{"lineNum":"  169","line":"    template<class P, class D> shared_count( P p, D d ): pi_(0)"},
{"lineNum":"  170","line":"#endif"},
{"lineNum":"  171","line":"#if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)"},
{"lineNum":"  172","line":"        , id_(shared_count_id)"},
{"lineNum":"  173","line":"#endif"},
{"lineNum":"  174","line":"    {"},
{"lineNum":"  175","line":"#if defined( BOOST_MSVC ) && BOOST_WORKAROUND( BOOST_MSVC, <= 1200 )"},
{"lineNum":"  176","line":"        typedef Y* P;"},
{"lineNum":"  177","line":"#endif"},
{"lineNum":"  178","line":"#ifndef BOOST_NO_EXCEPTIONS"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"        try"},
{"lineNum":"  181","line":"        {"},
{"lineNum":"  182","line":"            pi_ = new sp_counted_impl_pd<P, D>(p, d);"},
{"lineNum":"  183","line":"        }"},
{"lineNum":"  184","line":"        catch(...)"},
{"lineNum":"  185","line":"        {"},
{"lineNum":"  186","line":"            d(p); // delete p"},
{"lineNum":"  187","line":"            throw;"},
{"lineNum":"  188","line":"        }"},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"#else"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"        pi_ = new sp_counted_impl_pd<P, D>(p, d);"},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"        if(pi_ == 0)"},
{"lineNum":"  195","line":"        {"},
{"lineNum":"  196","line":"            d(p); // delete p"},
{"lineNum":"  197","line":"            boost::throw_exception(std::bad_alloc());"},
{"lineNum":"  198","line":"        }"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"#endif"},
{"lineNum":"  201","line":"    }"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"#if !defined( BOOST_NO_FUNCTION_TEMPLATE_ORDERING )"},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"    template< class P, class D > shared_count( P p, sp_inplace_tag<D> ): pi_( 0 )"},
{"lineNum":"  206","line":"#if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)"},
{"lineNum":"  207","line":"        , id_(shared_count_id)"},
{"lineNum":"  208","line":"#endif"},
{"lineNum":"  209","line":"    {"},
{"lineNum":"  210","line":"#ifndef BOOST_NO_EXCEPTIONS"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"        try"},
{"lineNum":"  213","line":"        {"},
{"lineNum":"  214","line":"            pi_ = new sp_counted_impl_pd< P, D >( p );"},
{"lineNum":"  215","line":"        }"},
{"lineNum":"  216","line":"        catch( ... )"},
{"lineNum":"  217","line":"        {"},
{"lineNum":"  218","line":"            D::operator_fn( p ); // delete p"},
{"lineNum":"  219","line":"            throw;"},
{"lineNum":"  220","line":"        }"},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"#else"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"        pi_ = new sp_counted_impl_pd< P, D >( p );"},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"        if( pi_ == 0 )"},
{"lineNum":"  227","line":"        {"},
{"lineNum":"  228","line":"            D::operator_fn( p ); // delete p"},
{"lineNum":"  229","line":"            boost::throw_exception( std::bad_alloc() );"},
{"lineNum":"  230","line":"        }"},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"#endif // #ifndef BOOST_NO_EXCEPTIONS"},
{"lineNum":"  233","line":"    }"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"#endif // !defined( BOOST_NO_FUNCTION_TEMPLATE_ORDERING )"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"    template<class P, class D, class A> shared_count( P p, D d, A a ): pi_( 0 )"},
{"lineNum":"  238","line":"#if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)"},
{"lineNum":"  239","line":"        , id_(shared_count_id)"},
{"lineNum":"  240","line":"#endif"},
{"lineNum":"  241","line":"    {"},
{"lineNum":"  242","line":"        typedef sp_counted_impl_pda<P, D, A> impl_type;"},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"#if !defined( BOOST_NO_CXX11_ALLOCATOR )"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"        typedef typename std::allocator_traits<A>::template rebind_alloc< impl_type > A2;"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"#else"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"        typedef typename A::template rebind< impl_type >::other A2;"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"#endif"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"        A2 a2( a );"},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"#ifndef BOOST_NO_EXCEPTIONS"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"        try"},
{"lineNum":"  259","line":"        {"},
{"lineNum":"  260","line":"            pi_ = a2.allocate( 1 );"},
{"lineNum":"  261","line":"            ::new( static_cast< void* >( pi_ ) ) impl_type( p, d, a );"},
{"lineNum":"  262","line":"        }"},
{"lineNum":"  263","line":"        catch(...)"},
{"lineNum":"  264","line":"        {"},
{"lineNum":"  265","line":"            d( p );"},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"            if( pi_ != 0 )"},
{"lineNum":"  268","line":"            {"},
{"lineNum":"  269","line":"                a2.deallocate( static_cast< impl_type* >( pi_ ), 1 );"},
{"lineNum":"  270","line":"            }"},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"            throw;"},
{"lineNum":"  273","line":"        }"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"#else"},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"        pi_ = a2.allocate( 1 );"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"        if( pi_ != 0 )"},
{"lineNum":"  280","line":"        {"},
{"lineNum":"  281","line":"            ::new( static_cast< void* >( pi_ ) ) impl_type( p, d, a );"},
{"lineNum":"  282","line":"        }"},
{"lineNum":"  283","line":"        else"},
{"lineNum":"  284","line":"        {"},
{"lineNum":"  285","line":"            d( p );"},
{"lineNum":"  286","line":"            boost::throw_exception( std::bad_alloc() );"},
{"lineNum":"  287","line":"        }"},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"#endif"},
{"lineNum":"  290","line":"    }"},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"#if !defined( BOOST_NO_FUNCTION_TEMPLATE_ORDERING )"},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"    template< class P, class D, class A > shared_count( P p, sp_inplace_tag< D >, A a ): pi_( 0 )"},
{"lineNum":"  295","line":"#if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)"},
{"lineNum":"  296","line":"        , id_(shared_count_id)"},
{"lineNum":"  297","line":"#endif"},
{"lineNum":"  298","line":"    {"},
{"lineNum":"  299","line":"        typedef sp_counted_impl_pda< P, D, A > impl_type;"},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"#if !defined( BOOST_NO_CXX11_ALLOCATOR )"},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"        typedef typename std::allocator_traits<A>::template rebind_alloc< impl_type > A2;"},
{"lineNum":"  304","line":""},
{"lineNum":"  305","line":"#else"},
{"lineNum":"  306","line":""},
{"lineNum":"  307","line":"        typedef typename A::template rebind< impl_type >::other A2;"},
{"lineNum":"  308","line":""},
{"lineNum":"  309","line":"#endif"},
{"lineNum":"  310","line":""},
{"lineNum":"  311","line":"        A2 a2( a );"},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":"#ifndef BOOST_NO_EXCEPTIONS"},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"        try"},
{"lineNum":"  316","line":"        {"},
{"lineNum":"  317","line":"            pi_ = a2.allocate( 1 );"},
{"lineNum":"  318","line":"            ::new( static_cast< void* >( pi_ ) ) impl_type( p, a );"},
{"lineNum":"  319","line":"        }"},
{"lineNum":"  320","line":"        catch(...)"},
{"lineNum":"  321","line":"        {"},
{"lineNum":"  322","line":"            D::operator_fn( p );"},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"            if( pi_ != 0 )"},
{"lineNum":"  325","line":"            {"},
{"lineNum":"  326","line":"                a2.deallocate( static_cast< impl_type* >( pi_ ), 1 );"},
{"lineNum":"  327","line":"            }"},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"            throw;"},
{"lineNum":"  330","line":"        }"},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"#else"},
{"lineNum":"  333","line":""},
{"lineNum":"  334","line":"        pi_ = a2.allocate( 1 );"},
{"lineNum":"  335","line":""},
{"lineNum":"  336","line":"        if( pi_ != 0 )"},
{"lineNum":"  337","line":"        {"},
{"lineNum":"  338","line":"            ::new( static_cast< void* >( pi_ ) ) impl_type( p, a );"},
{"lineNum":"  339","line":"        }"},
{"lineNum":"  340","line":"        else"},
{"lineNum":"  341","line":"        {"},
{"lineNum":"  342","line":"            D::operator_fn( p );"},
{"lineNum":"  343","line":"            boost::throw_exception( std::bad_alloc() );"},
{"lineNum":"  344","line":"        }"},
{"lineNum":"  345","line":""},
{"lineNum":"  346","line":"#endif // #ifndef BOOST_NO_EXCEPTIONS"},
{"lineNum":"  347","line":"    }"},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"#endif // !defined( BOOST_NO_FUNCTION_TEMPLATE_ORDERING )"},
{"lineNum":"  350","line":""},
{"lineNum":"  351","line":"#ifndef BOOST_NO_AUTO_PTR"},
{"lineNum":"  352","line":""},
{"lineNum":"  353","line":"    // auto_ptr<Y> is special cased to provide the strong guarantee"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"    template<class Y>"},
{"lineNum":"  356","line":"    explicit shared_count( std::auto_ptr<Y> & r ): pi_( new sp_counted_impl_p<Y>( r.get() ) )"},
{"lineNum":"  357","line":"#if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)"},
{"lineNum":"  358","line":"        , id_(shared_count_id)"},
{"lineNum":"  359","line":"#endif"},
{"lineNum":"  360","line":"    {"},
{"lineNum":"  361","line":"#ifdef BOOST_NO_EXCEPTIONS"},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"        if( pi_ == 0 )"},
{"lineNum":"  364","line":"        {"},
{"lineNum":"  365","line":"            boost::throw_exception(std::bad_alloc());"},
{"lineNum":"  366","line":"        }"},
{"lineNum":"  367","line":""},
{"lineNum":"  368","line":"#endif"},
{"lineNum":"  369","line":""},
{"lineNum":"  370","line":"        r.release();"},
{"lineNum":"  371","line":"    }"},
{"lineNum":"  372","line":""},
{"lineNum":"  373","line":"#endif"},
{"lineNum":"  374","line":""},
{"lineNum":"  375","line":"#if !defined( BOOST_NO_CXX11_SMART_PTR )"},
{"lineNum":"  376","line":""},
{"lineNum":"  377","line":"    template<class Y, class D>"},
{"lineNum":"  378","line":"    explicit shared_count( std::unique_ptr<Y, D> & r ): pi_( 0 )"},
{"lineNum":"  379","line":"#if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)"},
{"lineNum":"  380","line":"        , id_(shared_count_id)"},
{"lineNum":"  381","line":"#endif"},
{"lineNum":"  382","line":"    {"},
{"lineNum":"  383","line":"        typedef typename sp_convert_reference<D>::type D2;"},
{"lineNum":"  384","line":""},
{"lineNum":"  385","line":"        D2 d2( r.get_deleter() );"},
{"lineNum":"  386","line":"        pi_ = new sp_counted_impl_pd< typename std::unique_ptr<Y, D>::pointer, D2 >( r.get(), d2 );"},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"#ifdef BOOST_NO_EXCEPTIONS"},
{"lineNum":"  389","line":""},
{"lineNum":"  390","line":"        if( pi_ == 0 )"},
{"lineNum":"  391","line":"        {"},
{"lineNum":"  392","line":"            boost::throw_exception( std::bad_alloc() );"},
{"lineNum":"  393","line":"        }"},
{"lineNum":"  394","line":""},
{"lineNum":"  395","line":"#endif"},
{"lineNum":"  396","line":""},
{"lineNum":"  397","line":"        r.release();"},
{"lineNum":"  398","line":"    }"},
{"lineNum":"  399","line":""},
{"lineNum":"  400","line":"#endif"},
{"lineNum":"  401","line":""},
{"lineNum":"  402","line":"    template<class Y, class D>"},
{"lineNum":"  403","line":"    explicit shared_count( boost::movelib::unique_ptr<Y, D> & r ): pi_( 0 )"},
{"lineNum":"  404","line":"#if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)"},
{"lineNum":"  405","line":"        , id_(shared_count_id)"},
{"lineNum":"  406","line":"#endif"},
{"lineNum":"  407","line":"    {"},
{"lineNum":"  408","line":"        typedef typename sp_convert_reference<D>::type D2;"},
{"lineNum":"  409","line":""},
{"lineNum":"  410","line":"        D2 d2( r.get_deleter() );"},
{"lineNum":"  411","line":"        pi_ = new sp_counted_impl_pd< typename boost::movelib::unique_ptr<Y, D>::pointer, D2 >( r.get(), d2 );"},
{"lineNum":"  412","line":""},
{"lineNum":"  413","line":"#ifdef BOOST_NO_EXCEPTIONS"},
{"lineNum":"  414","line":""},
{"lineNum":"  415","line":"        if( pi_ == 0 )"},
{"lineNum":"  416","line":"        {"},
{"lineNum":"  417","line":"            boost::throw_exception( std::bad_alloc() );"},
{"lineNum":"  418","line":"        }"},
{"lineNum":"  419","line":""},
{"lineNum":"  420","line":"#endif"},
{"lineNum":"  421","line":""},
{"lineNum":"  422","line":"        r.release();"},
{"lineNum":"  423","line":"    }"},
{"lineNum":"  424","line":""},
{"lineNum":"  425","line":"    ~shared_count() /*BOOST_SP_NOEXCEPT*/"},
{"lineNum":"  426","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  427","line":"        if( pi_ != 0 ) pi_->release();","class":"lineNoCov","hits":"0","possible_hits":"190",},
{"lineNum":"  428","line":"#if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)"},
{"lineNum":"  429","line":"        id_ = 0;"},
{"lineNum":"  430","line":"#endif"},
{"lineNum":"  431","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  432","line":""},
{"lineNum":"  433","line":"    shared_count(shared_count const & r) BOOST_SP_NOEXCEPT: pi_(r.pi_)","class":"lineNoCov","hits":"0","possible_hits":"70",},
{"lineNum":"  434","line":"#if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)"},
{"lineNum":"  435","line":"        , id_(shared_count_id)"},
{"lineNum":"  436","line":"#endif"},
{"lineNum":"  437","line":"    {"},
{"lineNum":"  438","line":"        if( pi_ != 0 ) pi_->add_ref_copy();","class":"lineNoCov","hits":"0","possible_hits":"54",},
{"lineNum":"  439","line":"    }"},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"#if !defined( BOOST_NO_CXX11_RVALUE_REFERENCES )"},
{"lineNum":"  442","line":""},
{"lineNum":"  443","line":"    shared_count(shared_count && r) BOOST_SP_NOEXCEPT: pi_(r.pi_)"},
{"lineNum":"  444","line":"#if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)"},
{"lineNum":"  445","line":"        , id_(shared_count_id)"},
{"lineNum":"  446","line":"#endif"},
{"lineNum":"  447","line":"    {"},
{"lineNum":"  448","line":"        r.pi_ = 0;"},
{"lineNum":"  449","line":"    }"},
{"lineNum":"  450","line":""},
{"lineNum":"  451","line":"#endif"},
{"lineNum":"  452","line":""},
{"lineNum":"  453","line":"    explicit shared_count(weak_count const & r); // throws bad_weak_ptr when r.use_count() == 0"},
{"lineNum":"  454","line":"    shared_count( weak_count const & r, sp_nothrow_tag ) BOOST_SP_NOEXCEPT; // constructs an empty *this when r.use_count() == 0"},
{"lineNum":"  455","line":""},
{"lineNum":"  456","line":"    shared_count & operator= (shared_count const & r) BOOST_SP_NOEXCEPT"},
{"lineNum":"  457","line":"    {"},
{"lineNum":"  458","line":"        sp_counted_base * tmp = r.pi_;"},
{"lineNum":"  459","line":""},
{"lineNum":"  460","line":"        if( tmp != pi_ )"},
{"lineNum":"  461","line":"        {"},
{"lineNum":"  462","line":"            if( tmp != 0 ) tmp->add_ref_copy();"},
{"lineNum":"  463","line":"            if( pi_ != 0 ) pi_->release();"},
{"lineNum":"  464","line":"            pi_ = tmp;"},
{"lineNum":"  465","line":"        }"},
{"lineNum":"  466","line":""},
{"lineNum":"  467","line":"        return *this;"},
{"lineNum":"  468","line":"    }"},
{"lineNum":"  469","line":""},
{"lineNum":"  470","line":"    void swap(shared_count & r) BOOST_SP_NOEXCEPT"},
{"lineNum":"  471","line":"    {"},
{"lineNum":"  472","line":"        sp_counted_base * tmp = r.pi_;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  473","line":"        r.pi_ = pi_;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  474","line":"        pi_ = tmp;"},
{"lineNum":"  475","line":"    }"},
{"lineNum":"  476","line":""},
{"lineNum":"  477","line":"    long use_count() const BOOST_SP_NOEXCEPT"},
{"lineNum":"  478","line":"    {"},
{"lineNum":"  479","line":"        return pi_ != 0? pi_->use_count(): 0;"},
{"lineNum":"  480","line":"    }"},
{"lineNum":"  481","line":""},
{"lineNum":"  482","line":"    bool unique() const BOOST_SP_NOEXCEPT"},
{"lineNum":"  483","line":"    {"},
{"lineNum":"  484","line":"        return use_count() == 1;"},
{"lineNum":"  485","line":"    }"},
{"lineNum":"  486","line":""},
{"lineNum":"  487","line":"    bool empty() const BOOST_SP_NOEXCEPT"},
{"lineNum":"  488","line":"    {"},
{"lineNum":"  489","line":"        return pi_ == 0;"},
{"lineNum":"  490","line":"    }"},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"    friend inline bool operator==(shared_count const & a, shared_count const & b) BOOST_SP_NOEXCEPT"},
{"lineNum":"  493","line":"    {"},
{"lineNum":"  494","line":"        return a.pi_ == b.pi_;"},
{"lineNum":"  495","line":"    }"},
{"lineNum":"  496","line":""},
{"lineNum":"  497","line":"    friend inline bool operator<(shared_count const & a, shared_count const & b) BOOST_SP_NOEXCEPT"},
{"lineNum":"  498","line":"    {"},
{"lineNum":"  499","line":"        return std::less<sp_counted_base *>()( a.pi_, b.pi_ );"},
{"lineNum":"  500","line":"    }"},
{"lineNum":"  501","line":""},
{"lineNum":"  502","line":"    void * get_deleter( sp_typeinfo const & ti ) const BOOST_SP_NOEXCEPT"},
{"lineNum":"  503","line":"    {"},
{"lineNum":"  504","line":"        return pi_? pi_->get_deleter( ti ): 0;"},
{"lineNum":"  505","line":"    }"},
{"lineNum":"  506","line":""},
{"lineNum":"  507","line":"    void * get_local_deleter( sp_typeinfo const & ti ) const BOOST_SP_NOEXCEPT"},
{"lineNum":"  508","line":"    {"},
{"lineNum":"  509","line":"        return pi_? pi_->get_local_deleter( ti ): 0;"},
{"lineNum":"  510","line":"    }"},
{"lineNum":"  511","line":""},
{"lineNum":"  512","line":"    void * get_untyped_deleter() const BOOST_SP_NOEXCEPT"},
{"lineNum":"  513","line":"    {"},
{"lineNum":"  514","line":"        return pi_? pi_->get_untyped_deleter(): 0;"},
{"lineNum":"  515","line":"    }"},
{"lineNum":"  516","line":"};"},
{"lineNum":"  517","line":""},
{"lineNum":"  518","line":""},
{"lineNum":"  519","line":"class weak_count"},
{"lineNum":"  520","line":"{"},
{"lineNum":"  521","line":"private:"},
{"lineNum":"  522","line":""},
{"lineNum":"  523","line":"    sp_counted_base * pi_;"},
{"lineNum":"  524","line":""},
{"lineNum":"  525","line":"#if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)"},
{"lineNum":"  526","line":"    int id_;"},
{"lineNum":"  527","line":"#endif"},
{"lineNum":"  528","line":""},
{"lineNum":"  529","line":"    friend class shared_count;"},
{"lineNum":"  530","line":""},
{"lineNum":"  531","line":"public:"},
{"lineNum":"  532","line":""},
{"lineNum":"  533","line":"    BOOST_CONSTEXPR weak_count() BOOST_SP_NOEXCEPT: pi_(0)"},
{"lineNum":"  534","line":"#if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)"},
{"lineNum":"  535","line":"        , id_(weak_count_id)"},
{"lineNum":"  536","line":"#endif"},
{"lineNum":"  537","line":"    {"},
{"lineNum":"  538","line":"    }"},
{"lineNum":"  539","line":""},
{"lineNum":"  540","line":"    weak_count(shared_count const & r) BOOST_SP_NOEXCEPT: pi_(r.pi_)"},
{"lineNum":"  541","line":"#if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)"},
{"lineNum":"  542","line":"        , id_(weak_count_id)"},
{"lineNum":"  543","line":"#endif"},
{"lineNum":"  544","line":"    {"},
{"lineNum":"  545","line":"        if(pi_ != 0) pi_->weak_add_ref();"},
{"lineNum":"  546","line":"    }"},
{"lineNum":"  547","line":""},
{"lineNum":"  548","line":"    weak_count(weak_count const & r) BOOST_SP_NOEXCEPT: pi_(r.pi_)"},
{"lineNum":"  549","line":"#if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)"},
{"lineNum":"  550","line":"        , id_(weak_count_id)"},
{"lineNum":"  551","line":"#endif"},
{"lineNum":"  552","line":"    {"},
{"lineNum":"  553","line":"        if(pi_ != 0) pi_->weak_add_ref();"},
{"lineNum":"  554","line":"    }"},
{"lineNum":"  555","line":""},
{"lineNum":"  556","line":"// Move support"},
{"lineNum":"  557","line":""},
{"lineNum":"  558","line":"#if !defined( BOOST_NO_CXX11_RVALUE_REFERENCES )"},
{"lineNum":"  559","line":""},
{"lineNum":"  560","line":"    weak_count(weak_count && r) BOOST_SP_NOEXCEPT: pi_(r.pi_)"},
{"lineNum":"  561","line":"#if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)"},
{"lineNum":"  562","line":"        , id_(weak_count_id)"},
{"lineNum":"  563","line":"#endif"},
{"lineNum":"  564","line":"    {"},
{"lineNum":"  565","line":"        r.pi_ = 0;"},
{"lineNum":"  566","line":"    }"},
{"lineNum":"  567","line":""},
{"lineNum":"  568","line":"#endif"},
{"lineNum":"  569","line":""},
{"lineNum":"  570","line":"    ~weak_count() /*BOOST_SP_NOEXCEPT*/"},
{"lineNum":"  571","line":"    {"},
{"lineNum":"  572","line":"        if(pi_ != 0) pi_->weak_release();"},
{"lineNum":"  573","line":"#if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)"},
{"lineNum":"  574","line":"        id_ = 0;"},
{"lineNum":"  575","line":"#endif"},
{"lineNum":"  576","line":"    }"},
{"lineNum":"  577","line":""},
{"lineNum":"  578","line":"    weak_count & operator= (shared_count const & r) BOOST_SP_NOEXCEPT"},
{"lineNum":"  579","line":"    {"},
{"lineNum":"  580","line":"        sp_counted_base * tmp = r.pi_;"},
{"lineNum":"  581","line":""},
{"lineNum":"  582","line":"        if( tmp != pi_ )"},
{"lineNum":"  583","line":"        {"},
{"lineNum":"  584","line":"            if(tmp != 0) tmp->weak_add_ref();"},
{"lineNum":"  585","line":"            if(pi_ != 0) pi_->weak_release();"},
{"lineNum":"  586","line":"            pi_ = tmp;"},
{"lineNum":"  587","line":"        }"},
{"lineNum":"  588","line":""},
{"lineNum":"  589","line":"        return *this;"},
{"lineNum":"  590","line":"    }"},
{"lineNum":"  591","line":""},
{"lineNum":"  592","line":"    weak_count & operator= (weak_count const & r) BOOST_SP_NOEXCEPT"},
{"lineNum":"  593","line":"    {"},
{"lineNum":"  594","line":"        sp_counted_base * tmp = r.pi_;"},
{"lineNum":"  595","line":""},
{"lineNum":"  596","line":"        if( tmp != pi_ )"},
{"lineNum":"  597","line":"        {"},
{"lineNum":"  598","line":"            if(tmp != 0) tmp->weak_add_ref();"},
{"lineNum":"  599","line":"            if(pi_ != 0) pi_->weak_release();"},
{"lineNum":"  600","line":"            pi_ = tmp;"},
{"lineNum":"  601","line":"        }"},
{"lineNum":"  602","line":""},
{"lineNum":"  603","line":"        return *this;"},
{"lineNum":"  604","line":"    }"},
{"lineNum":"  605","line":""},
{"lineNum":"  606","line":"    void swap(weak_count & r) BOOST_SP_NOEXCEPT"},
{"lineNum":"  607","line":"    {"},
{"lineNum":"  608","line":"        sp_counted_base * tmp = r.pi_;"},
{"lineNum":"  609","line":"        r.pi_ = pi_;"},
{"lineNum":"  610","line":"        pi_ = tmp;"},
{"lineNum":"  611","line":"    }"},
{"lineNum":"  612","line":""},
{"lineNum":"  613","line":"    long use_count() const BOOST_SP_NOEXCEPT"},
{"lineNum":"  614","line":"    {"},
{"lineNum":"  615","line":"        return pi_ != 0? pi_->use_count(): 0;"},
{"lineNum":"  616","line":"    }"},
{"lineNum":"  617","line":""},
{"lineNum":"  618","line":"    bool empty() const BOOST_SP_NOEXCEPT"},
{"lineNum":"  619","line":"    {"},
{"lineNum":"  620","line":"        return pi_ == 0;"},
{"lineNum":"  621","line":"    }"},
{"lineNum":"  622","line":""},
{"lineNum":"  623","line":"    friend inline bool operator==(weak_count const & a, weak_count const & b) BOOST_SP_NOEXCEPT"},
{"lineNum":"  624","line":"    {"},
{"lineNum":"  625","line":"        return a.pi_ == b.pi_;"},
{"lineNum":"  626","line":"    }"},
{"lineNum":"  627","line":""},
{"lineNum":"  628","line":"    friend inline bool operator<(weak_count const & a, weak_count const & b) BOOST_SP_NOEXCEPT"},
{"lineNum":"  629","line":"    {"},
{"lineNum":"  630","line":"        return std::less<sp_counted_base *>()(a.pi_, b.pi_);"},
{"lineNum":"  631","line":"    }"},
{"lineNum":"  632","line":"};"},
{"lineNum":"  633","line":""},
{"lineNum":"  634","line":"inline shared_count::shared_count( weak_count const & r ): pi_( r.pi_ )"},
{"lineNum":"  635","line":"#if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)"},
{"lineNum":"  636","line":"        , id_(shared_count_id)"},
{"lineNum":"  637","line":"#endif"},
{"lineNum":"  638","line":"{"},
{"lineNum":"  639","line":"    if( pi_ == 0 || !pi_->add_ref_lock() )"},
{"lineNum":"  640","line":"    {"},
{"lineNum":"  641","line":"        boost::throw_exception( boost::bad_weak_ptr() );"},
{"lineNum":"  642","line":"    }"},
{"lineNum":"  643","line":"}"},
{"lineNum":"  644","line":""},
{"lineNum":"  645","line":"inline shared_count::shared_count( weak_count const & r, sp_nothrow_tag ) BOOST_SP_NOEXCEPT: pi_( r.pi_ )"},
{"lineNum":"  646","line":"#if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)"},
{"lineNum":"  647","line":"        , id_(shared_count_id)"},
{"lineNum":"  648","line":"#endif"},
{"lineNum":"  649","line":"{"},
{"lineNum":"  650","line":"    if( pi_ != 0 && !pi_->add_ref_lock() )"},
{"lineNum":"  651","line":"    {"},
{"lineNum":"  652","line":"        pi_ = 0;"},
{"lineNum":"  653","line":"    }"},
{"lineNum":"  654","line":"}"},
{"lineNum":"  655","line":""},
{"lineNum":"  656","line":"} // namespace detail"},
{"lineNum":"  657","line":""},
{"lineNum":"  658","line":"} // namespace boost"},
{"lineNum":"  659","line":""},
{"lineNum":"  660","line":"#if defined( BOOST_SP_DISABLE_DEPRECATED )"},
{"lineNum":"  661","line":"#pragma GCC diagnostic pop"},
{"lineNum":"  662","line":"#endif"},
{"lineNum":"  663","line":""},
{"lineNum":"  664","line":"#ifdef __BORLANDC__"},
{"lineNum":"  665","line":"# pragma warn .8027     // Functions containing try are not expanded inline"},
{"lineNum":"  666","line":"#endif"},
{"lineNum":"  667","line":""},
{"lineNum":"  668","line":"#endif  // #ifndef BOOST_SMART_PTR_DETAIL_SHARED_COUNT_HPP_INCLUDED"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 12, "covered" : 0,};
var merged_data = [];
