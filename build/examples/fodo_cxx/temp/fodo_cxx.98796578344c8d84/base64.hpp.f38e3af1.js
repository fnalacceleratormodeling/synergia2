var data = {lines:[
{"lineNum":"    1","line":"/*"},
{"lineNum":"    2","line":"   Copyright (C) 2004-2008 René Nyffenegger"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"   This source code is provided \'as-is\', without any express or implied"},
{"lineNum":"    5","line":"   warranty. In no event will the author be held liable for any damages"},
{"lineNum":"    6","line":"   arising from the use of this software."},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"   Permission is granted to anyone to use this software for any purpose,"},
{"lineNum":"    9","line":"   including commercial applications, and to alter it and redistribute it"},
{"lineNum":"   10","line":"   freely, subject to the following restrictions:"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"   1. The origin of this source code must not be misrepresented; you must not"},
{"lineNum":"   13","line":"      claim that you wrote the original source code. If you use this source code"},
{"lineNum":"   14","line":"      in a product, an acknowledgment in the product documentation would be"},
{"lineNum":"   15","line":"      appreciated but is not required."},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"   2. Altered source versions must be plainly marked as such, and must not be"},
{"lineNum":"   18","line":"      misrepresented as being the original source code."},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"   3. This notice may not be removed or altered from any source distribution."},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"   René Nyffenegger rene.nyffenegger@adp-gmbh.ch"},
{"lineNum":"   23","line":"*/"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"#ifndef CEREAL_EXTERNAL_BASE64_HPP_"},
{"lineNum":"   26","line":"#define CEREAL_EXTERNAL_BASE64_HPP_"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"#ifdef __GNUC__"},
{"lineNum":"   29","line":"#pragma GCC diagnostic push"},
{"lineNum":"   30","line":"#pragma GCC diagnostic ignored \"-Wconversion\""},
{"lineNum":"   31","line":"#endif"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"#include <string>"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"namespace cereal"},
{"lineNum":"   36","line":"{"},
{"lineNum":"   37","line":"  namespace base64"},
{"lineNum":"   38","line":"  {"},
{"lineNum":"   39","line":"    static const std::string chars ="},
{"lineNum":"   40","line":"      \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"","class":"lineCov","hits":"1","order":"699","possible_hits":"1",},
{"lineNum":"   41","line":"      \"abcdefghijklmnopqrstuvwxyz\""},
{"lineNum":"   42","line":"      \"0123456789+/\";"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"    static inline bool is_base64(unsigned char c) {"},
{"lineNum":"   45","line":"      return (isalnum(c) || (c == \'+\') || (c == \'/\'));"},
{"lineNum":"   46","line":"    }"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"    inline std::string encode(unsigned char const* bytes_to_encode, size_t in_len) {"},
{"lineNum":"   49","line":"      std::string ret;"},
{"lineNum":"   50","line":"      int i = 0;"},
{"lineNum":"   51","line":"      int j = 0;"},
{"lineNum":"   52","line":"      unsigned char char_array_3[3];"},
{"lineNum":"   53","line":"      unsigned char char_array_4[4];"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"      while (in_len--) {"},
{"lineNum":"   56","line":"        char_array_3[i++] = *(bytes_to_encode++);"},
{"lineNum":"   57","line":"        if (i == 3) {"},
{"lineNum":"   58","line":"          char_array_4[0] = static_cast<unsigned char>((char_array_3[0] & 0xfc) >> 2);"},
{"lineNum":"   59","line":"          char_array_4[1] = static_cast<unsigned char>( ( ( char_array_3[0] & 0x03 ) << 4 ) + ( ( char_array_3[1] & 0xf0 ) >> 4 ) );"},
{"lineNum":"   60","line":"          char_array_4[2] = static_cast<unsigned char>( ( ( char_array_3[1] & 0x0f ) << 2 ) + ( ( char_array_3[2] & 0xc0 ) >> 6 ) );"},
{"lineNum":"   61","line":"          char_array_4[3] = static_cast<unsigned char>( char_array_3[2] & 0x3f );"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"          for(i = 0; (i <4) ; i++)"},
{"lineNum":"   64","line":"            ret += chars[char_array_4[i]];"},
{"lineNum":"   65","line":"          i = 0;"},
{"lineNum":"   66","line":"        }"},
{"lineNum":"   67","line":"      }"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"      if (i)"},
{"lineNum":"   70","line":"      {"},
{"lineNum":"   71","line":"        for(j = i; j < 3; j++)"},
{"lineNum":"   72","line":"          char_array_3[j] = \'\\0\';"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"        char_array_4[0] = (char_array_3[0] & 0xfc) >> 2;"},
{"lineNum":"   75","line":"        char_array_4[1] = ((char_array_3[0] & 0x03) << 4) + ((char_array_3[1] & 0xf0) >> 4);"},
{"lineNum":"   76","line":"        char_array_4[2] = ((char_array_3[1] & 0x0f) << 2) + ((char_array_3[2] & 0xc0) >> 6);"},
{"lineNum":"   77","line":"        char_array_4[3] = char_array_3[2] & 0x3f;"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"        for (j = 0; (j < i + 1); j++)"},
{"lineNum":"   80","line":"          ret += chars[char_array_4[j]];"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"        while((i++ < 3))"},
{"lineNum":"   83","line":"          ret += \'=\';"},
{"lineNum":"   84","line":"      }"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"      return ret;"},
{"lineNum":"   87","line":"    }"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"    inline std::string decode(std::string const& encoded_string) {"},
{"lineNum":"   90","line":"      size_t in_len = encoded_string.size();"},
{"lineNum":"   91","line":"      size_t i = 0;"},
{"lineNum":"   92","line":"      size_t j = 0;"},
{"lineNum":"   93","line":"      int in_ = 0;"},
{"lineNum":"   94","line":"      unsigned char char_array_4[4], char_array_3[3];"},
{"lineNum":"   95","line":"      std::string ret;"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"      while (in_len-- && ( encoded_string[in_] != \'=\') && is_base64(encoded_string[in_])) {"},
{"lineNum":"   98","line":"        char_array_4[i++] = encoded_string[in_]; in_++;"},
{"lineNum":"   99","line":"        if (i ==4) {"},
{"lineNum":"  100","line":"          for (i = 0; i <4; i++)"},
{"lineNum":"  101","line":"            char_array_4[i] = static_cast<unsigned char>(chars.find( char_array_4[i] ));"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"          char_array_3[0] = (char_array_4[0] << 2) + ((char_array_4[1] & 0x30) >> 4);"},
{"lineNum":"  104","line":"          char_array_3[1] = ((char_array_4[1] & 0xf) << 4) + ((char_array_4[2] & 0x3c) >> 2);"},
{"lineNum":"  105","line":"          char_array_3[2] = ((char_array_4[2] & 0x3) << 6) + char_array_4[3];"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"          for (i = 0; (i < 3); i++)"},
{"lineNum":"  108","line":"            ret += char_array_3[i];"},
{"lineNum":"  109","line":"          i = 0;"},
{"lineNum":"  110","line":"        }"},
{"lineNum":"  111","line":"      }"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"      if (i) {"},
{"lineNum":"  114","line":"        for (j = i; j <4; j++)"},
{"lineNum":"  115","line":"          char_array_4[j] = 0;"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"        for (j = 0; j <4; j++)"},
{"lineNum":"  118","line":"          char_array_4[j] = static_cast<unsigned char>(chars.find( char_array_4[j] ));"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"        char_array_3[0] = (char_array_4[0] << 2) + ((char_array_4[1] & 0x30) >> 4);"},
{"lineNum":"  121","line":"        char_array_3[1] = ((char_array_4[1] & 0xf) << 4) + ((char_array_4[2] & 0x3c) >> 2);"},
{"lineNum":"  122","line":"        char_array_3[2] = ((char_array_4[2] & 0x3) << 6) + char_array_4[3];"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"        for (j = 0; (j < i - 1); j++) ret += char_array_3[j];"},
{"lineNum":"  125","line":"      }"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"      return ret;"},
{"lineNum":"  128","line":"    }"},
{"lineNum":"  129","line":"  } // namespace base64"},
{"lineNum":"  130","line":"} // namespace cereal"},
{"lineNum":"  131","line":"#ifdef __GNUC__"},
{"lineNum":"  132","line":"#pragma GCC diagnostic pop"},
{"lineNum":"  133","line":"#endif"},
{"lineNum":"  134","line":"#endif // CEREAL_EXTERNAL_BASE64_HPP_"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 1, "covered" : 1,};
var merged_data = [];
