var data = {lines:[
{"lineNum":"    1","line":"/*"},
{"lineNum":"    2","line":"//@HEADER"},
{"lineNum":"    3","line":"// ************************************************************************"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"//                        Kokkos v. 3.0"},
{"lineNum":"    6","line":"//       Copyright (2020) National Technology & Engineering"},
{"lineNum":"    7","line":"//               Solutions of Sandia, LLC (NTESS)."},
{"lineNum":"    8","line":"//"},
{"lineNum":"    9","line":"// Under the terms of Contract DE-NA0003525 with NTESS,"},
{"lineNum":"   10","line":"// the U.S. Government retains certain rights in this software."},
{"lineNum":"   11","line":"//"},
{"lineNum":"   12","line":"// Redistribution and use in source and binary forms, with or without"},
{"lineNum":"   13","line":"// modification, are permitted provided that the following conditions are"},
{"lineNum":"   14","line":"// met:"},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"// 1. Redistributions of source code must retain the above copyright"},
{"lineNum":"   17","line":"// notice, this list of conditions and the following disclaimer."},
{"lineNum":"   18","line":"//"},
{"lineNum":"   19","line":"// 2. Redistributions in binary form must reproduce the above copyright"},
{"lineNum":"   20","line":"// notice, this list of conditions and the following disclaimer in the"},
{"lineNum":"   21","line":"// documentation and/or other materials provided with the distribution."},
{"lineNum":"   22","line":"//"},
{"lineNum":"   23","line":"// 3. Neither the name of the Corporation nor the names of the"},
{"lineNum":"   24","line":"// contributors may be used to endorse or promote products derived from"},
{"lineNum":"   25","line":"// this software without specific prior written permission."},
{"lineNum":"   26","line":"//"},
{"lineNum":"   27","line":"// THIS SOFTWARE IS PROVIDED BY NTESS \"AS IS\" AND ANY"},
{"lineNum":"   28","line":"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"},
{"lineNum":"   29","line":"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR"},
{"lineNum":"   30","line":"// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NTESS OR THE"},
{"lineNum":"   31","line":"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,"},
{"lineNum":"   32","line":"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,"},
{"lineNum":"   33","line":"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR"},
{"lineNum":"   34","line":"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF"},
{"lineNum":"   35","line":"// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING"},
{"lineNum":"   36","line":"// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"},
{"lineNum":"   37","line":"// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   38","line":"//"},
{"lineNum":"   39","line":"// Questions? Contact Christian R. Trott (crtrott@sandia.gov)"},
{"lineNum":"   40","line":"//"},
{"lineNum":"   41","line":"// ************************************************************************"},
{"lineNum":"   42","line":"//@HEADER"},
{"lineNum":"   43","line":"*/"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"#ifndef KOKKOS_IMPL_HOSTTHREADTEAM_HPP"},
{"lineNum":"   46","line":"#define KOKKOS_IMPL_HOSTTHREADTEAM_HPP"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"#include <Kokkos_Core_fwd.hpp>"},
{"lineNum":"   49","line":"#include <Kokkos_Pair.hpp>"},
{"lineNum":"   50","line":"#include <Kokkos_Atomic.hpp>"},
{"lineNum":"   51","line":"#include <Kokkos_ExecPolicy.hpp>"},
{"lineNum":"   52","line":"#include <impl/Kokkos_FunctorAdapter.hpp>"},
{"lineNum":"   53","line":"#include <impl/Kokkos_FunctorAnalysis.hpp>"},
{"lineNum":"   54","line":"#include <impl/Kokkos_HostBarrier.hpp>"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"#include <limits>     // std::numeric_limits"},
{"lineNum":"   57","line":"#include <algorithm>  // std::max"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"//----------------------------------------------------------------------------"},
{"lineNum":"   60","line":"//----------------------------------------------------------------------------"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"namespace Kokkos {"},
{"lineNum":"   63","line":"namespace Impl {"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"template <class HostExecSpace>"},
{"lineNum":"   66","line":"class HostThreadTeamMember;"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"class HostThreadTeamData {"},
{"lineNum":"   69","line":" public:"},
{"lineNum":"   70","line":"  template <class>"},
{"lineNum":"   71","line":"  friend class HostThreadTeamMember;"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"  // Assume upper bounds on number of threads:"},
{"lineNum":"   74","line":"  //   pool size       <= 1024 threads"},
{"lineNum":"   75","line":"  //   team size       <= 64 threads"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"  enum : int { max_pool_members = 1024 };"},
{"lineNum":"   78","line":"  enum : int { max_team_members = 64 };"},
{"lineNum":"   79","line":"  enum : int { max_pool_rendezvous = HostBarrier::required_buffer_size };"},
{"lineNum":"   80","line":"  enum : int { max_team_rendezvous = HostBarrier::required_buffer_size };"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":" private:"},
{"lineNum":"   83","line":"  // per-thread scratch memory buffer chunks:"},
{"lineNum":"   84","line":"  //"},
{"lineNum":"   85","line":"  //   [ pool_members ]     = [ m_pool_members    .. m_pool_rendezvous )"},
{"lineNum":"   86","line":"  //   [ pool_rendezvous ]  = [ m_pool_rendezvous .. m_team_rendezvous )"},
{"lineNum":"   87","line":"  //   [ team_rendezvous ]  = [ m_team_rendezvous .. m_pool_reduce )"},
{"lineNum":"   88","line":"  //   [ pool_reduce ]      = [ m_pool_reduce     .. m_team_reduce )"},
{"lineNum":"   89","line":"  //   [ team_reduce ]      = [ m_team_reduce     .. m_team_shared )"},
{"lineNum":"   90","line":"  //   [ team_shared ]      = [ m_team_shared     .. m_thread_local )"},
{"lineNum":"   91","line":"  //   [ thread_local ]     = [ m_thread_local    .. m_scratch_size )"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"  enum : int { m_pool_members = 0 };"},
{"lineNum":"   94","line":"  enum : int { m_pool_rendezvous = m_pool_members + max_pool_members };"},
{"lineNum":"   95","line":"  enum : int { m_team_rendezvous = m_pool_rendezvous + max_pool_rendezvous };"},
{"lineNum":"   96","line":"  enum : int { m_pool_reduce = m_team_rendezvous + max_team_rendezvous };"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"  using pair_int_t = Kokkos::pair<int64_t, int64_t>;"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"  pair_int_t m_work_range;"},
{"lineNum":"  101","line":"  int64_t m_work_end;"},
{"lineNum":"  102","line":"  int64_t* m_scratch;       // per-thread buffer"},
{"lineNum":"  103","line":"  int64_t* m_pool_scratch;  // == pool[0]->m_scratch"},
{"lineNum":"  104","line":"  int64_t* m_team_scratch;  // == pool[ 0 + m_team_base ]->m_scratch"},
{"lineNum":"  105","line":"  int m_pool_rank;"},
{"lineNum":"  106","line":"  int m_pool_size;"},
{"lineNum":"  107","line":"  int m_team_reduce;"},
{"lineNum":"  108","line":"  int m_team_shared;"},
{"lineNum":"  109","line":"  int m_thread_local;"},
{"lineNum":"  110","line":"  int m_scratch_size;"},
{"lineNum":"  111","line":"  int m_team_base;"},
{"lineNum":"  112","line":"  int m_team_rank;"},
{"lineNum":"  113","line":"  int m_team_size;"},
{"lineNum":"  114","line":"  int m_team_alloc;"},
{"lineNum":"  115","line":"  int m_league_rank;"},
{"lineNum":"  116","line":"  int m_league_size;"},
{"lineNum":"  117","line":"  int m_work_chunk;"},
{"lineNum":"  118","line":"  int m_steal_rank;  // work stealing rank"},
{"lineNum":"  119","line":"  int mutable m_pool_rendezvous_step;"},
{"lineNum":"  120","line":"  int mutable m_team_rendezvous_step;"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"  HostThreadTeamData* team_member(int r) const noexcept {"},
{"lineNum":"  123","line":"    return ((HostThreadTeamData**)(m_pool_scratch +","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  124","line":"                                   m_pool_members))[m_team_base + r];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  125","line":"  }"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":" public:"},
{"lineNum":"  128","line":"  inline bool team_rendezvous() const noexcept {"},
{"lineNum":"  129","line":"    int* ptr = (int*)(m_team_scratch + m_team_rendezvous);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  130","line":"    HostBarrier::split_arrive(ptr, m_team_size, m_team_rendezvous_step);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  131","line":"    if (m_team_rank != 0) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  132","line":"      HostBarrier::wait(ptr, m_team_size, m_team_rendezvous_step);"},
{"lineNum":"  133","line":"    } else {"},
{"lineNum":"  134","line":"      HostBarrier::split_master_wait(ptr, m_team_size, m_team_rendezvous_step);"},
{"lineNum":"  135","line":"    }"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"    return m_team_rank == 0;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  138","line":"  }"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"  inline bool team_rendezvous(const int source_team_rank) const noexcept {"},
{"lineNum":"  141","line":"    int* ptr = (int*)(m_team_scratch + m_team_rendezvous);"},
{"lineNum":"  142","line":"    HostBarrier::split_arrive(ptr, m_team_size, m_team_rendezvous_step);"},
{"lineNum":"  143","line":"    if (m_team_rank != source_team_rank) {"},
{"lineNum":"  144","line":"      HostBarrier::wait(ptr, m_team_size, m_team_rendezvous_step);"},
{"lineNum":"  145","line":"    } else {"},
{"lineNum":"  146","line":"      HostBarrier::split_master_wait(ptr, m_team_size, m_team_rendezvous_step);"},
{"lineNum":"  147","line":"    }"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"    return (m_team_rank == source_team_rank);"},
{"lineNum":"  150","line":"  }"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"  inline void team_rendezvous_release() const noexcept {"},
{"lineNum":"  153","line":"    HostBarrier::split_release((int*)(m_team_scratch + m_team_rendezvous),"},
{"lineNum":"  154","line":"                               m_team_size, m_team_rendezvous_step);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  155","line":"  }"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"  inline int pool_rendezvous() const noexcept {"},
{"lineNum":"  158","line":"    int* ptr = (int*)(m_pool_scratch + m_pool_rendezvous);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  159","line":"    HostBarrier::split_arrive(ptr, m_pool_size, m_pool_rendezvous_step);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  160","line":"    if (m_pool_rank != 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  161","line":"      HostBarrier::wait(ptr, m_pool_size, m_pool_rendezvous_step);"},
{"lineNum":"  162","line":"    } else {"},
{"lineNum":"  163","line":"      HostBarrier::split_master_wait(ptr, m_pool_size, m_pool_rendezvous_step);"},
{"lineNum":"  164","line":"    }"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"    return m_pool_rank == 0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  167","line":"  }"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"  inline void pool_rendezvous_release() const noexcept {"},
{"lineNum":"  170","line":"    HostBarrier::split_release((int*)(m_pool_scratch + m_pool_rendezvous),"},
{"lineNum":"  171","line":"                               m_pool_size, m_pool_rendezvous_step);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  172","line":"  }"},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"  //----------------------------------------"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"  constexpr HostThreadTeamData() noexcept"},
{"lineNum":"  177","line":"      : m_work_range(-1, -1),"},
{"lineNum":"  178","line":"        m_work_end(0),"},
{"lineNum":"  179","line":"        m_scratch(nullptr),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  180","line":"        m_pool_scratch(nullptr),"},
{"lineNum":"  181","line":"        m_team_scratch(nullptr),"},
{"lineNum":"  182","line":"        m_pool_rank(0),"},
{"lineNum":"  183","line":"        m_pool_size(1),"},
{"lineNum":"  184","line":"        m_team_reduce(0),"},
{"lineNum":"  185","line":"        m_team_shared(0),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  186","line":"        m_thread_local(0),"},
{"lineNum":"  187","line":"        m_scratch_size(0),"},
{"lineNum":"  188","line":"        m_team_base(0),"},
{"lineNum":"  189","line":"        m_team_rank(0),"},
{"lineNum":"  190","line":"        m_team_size(1),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  191","line":"        m_team_alloc(1),"},
{"lineNum":"  192","line":"        m_league_rank(0),"},
{"lineNum":"  193","line":"        m_league_size(1),"},
{"lineNum":"  194","line":"        m_work_chunk(0),"},
{"lineNum":"  195","line":"        m_steal_rank(0),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  196","line":"        m_pool_rendezvous_step(0),"},
{"lineNum":"  197","line":"        m_team_rendezvous_step(0) {}"},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"  //----------------------------------------"},
{"lineNum":"  200","line":"  // Organize array of members into a pool."},
{"lineNum":"  201","line":"  // The 0th member is the root of the pool."},
{"lineNum":"  202","line":"  // Requires: members are not already in a pool."},
{"lineNum":"  203","line":"  // Requires: called by one thread."},
{"lineNum":"  204","line":"  // Pool members are ordered as \"close\" - sorted by NUMA and then CORE"},
{"lineNum":"  205","line":"  // Each thread is its own team with team_size == 1."},
{"lineNum":"  206","line":"  static void organize_pool(HostThreadTeamData* members[], const int size);"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"  // Called by each thread within the pool"},
{"lineNum":"  209","line":"  void disband_pool();"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"  //----------------------------------------"},
{"lineNum":"  212","line":"  // Each thread within a pool organizes itself into a team."},
{"lineNum":"  213","line":"  // Must be called by all threads of the pool."},
{"lineNum":"  214","line":"  // Organizing threads into a team performs a barrier across the"},
{"lineNum":"  215","line":"  // entire pool to insure proper initialization of the team"},
{"lineNum":"  216","line":"  // rendezvous mechanism before a team rendezvous can be performed."},
{"lineNum":"  217","line":"  //"},
{"lineNum":"  218","line":"  // Return true  if a valid member of a team."},
{"lineNum":"  219","line":"  // Return false if not a member and thread should be idled."},
{"lineNum":"  220","line":"  int organize_team(const int team_size);"},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"  // Each thread within a pool disbands itself from current team."},
{"lineNum":"  223","line":"  // Each thread becomes its own team with team_size == 1."},
{"lineNum":"  224","line":"  // Must be called by all threads of the pool."},
{"lineNum":"  225","line":"  void disband_team();"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"  //----------------------------------------"},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"  constexpr int pool_rank() const { return m_pool_rank; }"},
{"lineNum":"  230","line":"  constexpr int pool_size() const { return m_pool_size; }"},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"  HostThreadTeamData* pool_member(int r) const noexcept {"},
{"lineNum":"  233","line":"    return ((HostThreadTeamData**)(m_pool_scratch + m_pool_members))[r];"},
{"lineNum":"  234","line":"  }"},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":"  //----------------------------------------"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":" private:"},
{"lineNum":"  239","line":"  enum : int { mask_to_16 = 0x0f };  // align to 16 bytes"},
{"lineNum":"  240","line":"  enum : int { shift_to_8 = 3 };     // size to 8 bytes"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":" public:"},
{"lineNum":"  243","line":"  static constexpr int align_to_int64(int n) {"},
{"lineNum":"  244","line":"    return ((n + mask_to_16) & ~mask_to_16) >> shift_to_8;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  245","line":"  }"},
{"lineNum":"  246","line":""},
{"lineNum":"  247","line":"  constexpr int pool_reduce_bytes() const {"},
{"lineNum":"  248","line":"    return m_scratch_size ? sizeof(int64_t) * (m_team_reduce - m_pool_reduce)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  249","line":"                          : 0;"},
{"lineNum":"  250","line":"  }"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"  constexpr int team_reduce_bytes() const {"},
{"lineNum":"  253","line":"    return sizeof(int64_t) * (m_team_shared - m_team_reduce);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  254","line":"  }"},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"  constexpr int team_shared_bytes() const {"},
{"lineNum":"  257","line":"    return sizeof(int64_t) * (m_thread_local - m_team_shared);","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  258","line":"  }"},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"  constexpr int thread_local_bytes() const {"},
{"lineNum":"  261","line":"    return sizeof(int64_t) * (m_scratch_size - m_thread_local);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  262","line":"  }"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"  constexpr int scratch_bytes() const {"},
{"lineNum":"  265","line":"    return sizeof(int64_t) * m_scratch_size;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  266","line":"  }"},
{"lineNum":"  267","line":""},
{"lineNum":"  268","line":"  // Memory chunks:"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"  int64_t* scratch_buffer() const noexcept { return m_scratch; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"  int64_t* pool_reduce() const noexcept {"},
{"lineNum":"  273","line":"    return m_pool_scratch + m_pool_reduce;"},
{"lineNum":"  274","line":"  }"},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"  int64_t* pool_reduce_local() const noexcept {"},
{"lineNum":"  277","line":"    return m_scratch + m_pool_reduce;","class":"lineNoCov","hits":"0","possible_hits":"60",},
{"lineNum":"  278","line":"  }"},
{"lineNum":"  279","line":""},
{"lineNum":"  280","line":"  int64_t* team_reduce() const noexcept {"},
{"lineNum":"  281","line":"    return m_team_scratch + m_team_reduce;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  282","line":"  }"},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"  int64_t* team_reduce_local() const noexcept {"},
{"lineNum":"  285","line":"    return m_scratch + m_team_reduce;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  286","line":"  }"},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"  int64_t* team_shared() const noexcept {"},
{"lineNum":"  289","line":"    return m_team_scratch + m_team_shared;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  290","line":"  }"},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"  int64_t* local_scratch() const noexcept { return m_scratch + m_thread_local; }"},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"  // Given:"},
{"lineNum":"  295","line":"  //   pool_reduce_size  = number bytes for pool reduce"},
{"lineNum":"  296","line":"  //   team_reduce_size  = number bytes for team reduce"},
{"lineNum":"  297","line":"  //   team_shared_size  = number bytes for team shared memory"},
{"lineNum":"  298","line":"  //   thread_local_size = number bytes for thread local memory"},
{"lineNum":"  299","line":"  // Return:"},
{"lineNum":"  300","line":"  //   total number of bytes that must be allocated"},
{"lineNum":"  301","line":"  static size_t scratch_size(int pool_reduce_size, int team_reduce_size,"},
{"lineNum":"  302","line":"                             int team_shared_size, int thread_local_size) {"},
{"lineNum":"  303","line":"    pool_reduce_size  = align_to_int64(pool_reduce_size);"},
{"lineNum":"  304","line":"    team_reduce_size  = align_to_int64(team_reduce_size);"},
{"lineNum":"  305","line":"    team_shared_size  = align_to_int64(team_shared_size);"},
{"lineNum":"  306","line":"    thread_local_size = align_to_int64(thread_local_size);"},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"    const size_t total_bytes ="},
{"lineNum":"  309","line":"        (m_pool_reduce + pool_reduce_size + team_reduce_size +","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  310","line":"         team_shared_size + thread_local_size) *","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  311","line":"        sizeof(int64_t);"},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":"    return total_bytes;"},
{"lineNum":"  314","line":"  }"},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":"  // Given:"},
{"lineNum":"  317","line":"  //   alloc_ptr         = pointer to allocated memory"},
{"lineNum":"  318","line":"  //   alloc_size        = number bytes of allocated memory"},
{"lineNum":"  319","line":"  //   pool_reduce_size  = number bytes for pool reduce/scan operations"},
{"lineNum":"  320","line":"  //   team_reduce_size  = number bytes for team reduce/scan operations"},
{"lineNum":"  321","line":"  //   team_shared_size  = number bytes for team-shared memory"},
{"lineNum":"  322","line":"  //   thread_local_size = number bytes for thread-local memory"},
{"lineNum":"  323","line":"  // Return:"},
{"lineNum":"  324","line":"  //   total number of bytes that must be allocated"},
{"lineNum":"  325","line":"  void scratch_assign(void* const alloc_ptr, size_t const alloc_size,"},
{"lineNum":"  326","line":"                      int pool_reduce_size, int team_reduce_size,"},
{"lineNum":"  327","line":"                      int team_shared_size, int /* thread_local_size */) {"},
{"lineNum":"  328","line":"    pool_reduce_size = align_to_int64(pool_reduce_size);"},
{"lineNum":"  329","line":"    team_reduce_size = align_to_int64(team_reduce_size);"},
{"lineNum":"  330","line":"    team_shared_size = align_to_int64(team_shared_size);"},
{"lineNum":"  331","line":"    // thread_local_size = align_to_int64( thread_local_size );"},
{"lineNum":"  332","line":""},
{"lineNum":"  333","line":"    m_scratch      = (int64_t*)alloc_ptr;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  334","line":"    m_team_reduce  = m_pool_reduce + pool_reduce_size;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  335","line":"    m_team_shared  = m_team_reduce + team_reduce_size;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  336","line":"    m_thread_local = m_team_shared + team_shared_size;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  337","line":"    m_scratch_size = align_to_int64(alloc_size);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"#if 0"},
{"lineNum":"  340","line":"fprintf(stdout,\"HostThreadTeamData::scratch_assign { %d %d %d %d %d %d %d }\\n\""},
{"lineNum":"  341","line":"       , int(m_pool_members)"},
{"lineNum":"  342","line":"       , int(m_pool_rendezvous)"},
{"lineNum":"  343","line":"       , int(m_pool_reduce)"},
{"lineNum":"  344","line":"       , int(m_team_reduce)"},
{"lineNum":"  345","line":"       , int(m_team_shared)"},
{"lineNum":"  346","line":"       , int(m_thread_local)"},
{"lineNum":"  347","line":"       , int(m_scratch_size)"},
{"lineNum":"  348","line":"       );"},
{"lineNum":"  349","line":"fflush(stdout);"},
{"lineNum":"  350","line":"#endif"},
{"lineNum":"  351","line":"  }"},
{"lineNum":"  352","line":""},
{"lineNum":"  353","line":"  //----------------------------------------"},
{"lineNum":"  354","line":"  // Get a work index within the range."},
{"lineNum":"  355","line":"  // First try to steal from beginning of own teams\'s partition."},
{"lineNum":"  356","line":"  // If that fails then try to steal from end of another teams\' partition."},
{"lineNum":"  357","line":"  int get_work_stealing() noexcept;"},
{"lineNum":"  358","line":""},
{"lineNum":"  359","line":"  //----------------------------------------"},
{"lineNum":"  360","line":"  // Set the initial work partitioning of [ 0 .. length ) among the teams"},
{"lineNum":"  361","line":"  // with granularity of chunk"},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"  void set_work_partition(int64_t const length, int const chunk) noexcept {"},
{"lineNum":"  364","line":"    // Minimum chunk size to insure that"},
{"lineNum":"  365","line":"    //   m_work_end < std::numeric_limits<int>::max() * m_work_chunk"},
{"lineNum":"  366","line":""},
{"lineNum":"  367","line":"    int const chunk_min = (length + std::numeric_limits<int>::max()) /","class":"lineNoCov","hits":"0","possible_hits":"199",},
{"lineNum":"  368","line":"                          std::numeric_limits<int>::max();"},
{"lineNum":"  369","line":""},
{"lineNum":"  370","line":"    m_work_end   = length;","class":"lineNoCov","hits":"0","possible_hits":"197",},
{"lineNum":"  371","line":"    m_work_chunk = std::max(chunk, chunk_min);","class":"lineNoCov","hits":"0","possible_hits":"197",},
{"lineNum":"  372","line":""},
{"lineNum":"  373","line":"    // Number of work chunks and partitioning of that number:"},
{"lineNum":"  374","line":"    int const num  = (m_work_end + m_work_chunk - 1) / m_work_chunk;","class":"lineNoCov","hits":"0","possible_hits":"197",},
{"lineNum":"  375","line":"    int const part = (num + m_league_size - 1) / m_league_size;","class":"lineNoCov","hits":"0","possible_hits":"197",},
{"lineNum":"  376","line":""},
{"lineNum":"  377","line":"    m_work_range.first  = part * m_league_rank;","class":"lineNoCov","hits":"0","possible_hits":"280",},
{"lineNum":"  378","line":"    m_work_range.second = m_work_range.first + part;","class":"lineNoCov","hits":"0","possible_hits":"281",},
{"lineNum":"  379","line":""},
{"lineNum":"  380","line":"    // Steal from next team, round robin"},
{"lineNum":"  381","line":"    // The next team is offset by m_team_alloc if it fits in the pool."},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"    m_steal_rank = m_team_base + m_team_alloc + m_team_size <= m_pool_size","class":"lineNoCov","hits":"0","possible_hits":"506",},
{"lineNum":"  384","line":"                       ? m_team_base + m_team_alloc","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  385","line":"                       : 0;"},
{"lineNum":"  386","line":"  }"},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"  std::pair<int64_t, int64_t> get_work_partition() noexcept {"},
{"lineNum":"  389","line":"    int64_t first  = m_work_range.first;","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  390","line":"    int64_t second = m_work_range.second;","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  391","line":"    first *= m_work_chunk;","class":"lineNoCov","hits":"0","possible_hits":"203",},
{"lineNum":"  392","line":"    second *= m_work_chunk;","class":"lineNoCov","hits":"0","possible_hits":"201",},
{"lineNum":"  393","line":"    return std::pair<int64_t, int64_t>("},
{"lineNum":"  394","line":"        first, second < m_work_end ? second : m_work_end);","class":"lineNoCov","hits":"0","possible_hits":"204",},
{"lineNum":"  395","line":"  }"},
{"lineNum":"  396","line":""},
{"lineNum":"  397","line":"  std::pair<int64_t, int64_t> get_work_stealing_chunk() noexcept {"},
{"lineNum":"  398","line":"    std::pair<int64_t, int64_t> x(-1, -1);"},
{"lineNum":"  399","line":""},
{"lineNum":"  400","line":"    const int i = get_work_stealing();"},
{"lineNum":"  401","line":""},
{"lineNum":"  402","line":"    if (0 <= i) {"},
{"lineNum":"  403","line":"      x.first  = m_work_chunk * i;"},
{"lineNum":"  404","line":"      x.second = x.first + m_work_chunk < m_work_end ? x.first + m_work_chunk"},
{"lineNum":"  405","line":"                                                     : m_work_end;"},
{"lineNum":"  406","line":"    }"},
{"lineNum":"  407","line":""},
{"lineNum":"  408","line":"    return x;"},
{"lineNum":"  409","line":"  }"},
{"lineNum":"  410","line":"};"},
{"lineNum":"  411","line":""},
{"lineNum":"  412","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  413","line":""},
{"lineNum":"  414","line":"template <class HostExecSpace>"},
{"lineNum":"  415","line":"class HostThreadTeamMember {"},
{"lineNum":"  416","line":" public:"},
{"lineNum":"  417","line":"  using scratch_memory_space    = typename HostExecSpace::scratch_memory_space;"},
{"lineNum":"  418","line":"  using execution_space         = HostExecSpace;"},
{"lineNum":"  419","line":"  using thread_team_member      = HostThreadTeamMember;"},
{"lineNum":"  420","line":"  using host_thread_team_member = HostThreadTeamMember;"},
{"lineNum":"  421","line":""},
{"lineNum":"  422","line":" private:"},
{"lineNum":"  423","line":"  scratch_memory_space m_scratch;"},
{"lineNum":"  424","line":"  HostThreadTeamData& m_data;"},
{"lineNum":"  425","line":"  int const m_league_rank;"},
{"lineNum":"  426","line":"  int const m_league_size;"},
{"lineNum":"  427","line":""},
{"lineNum":"  428","line":" public:"},
{"lineNum":"  429","line":"  constexpr HostThreadTeamMember(HostThreadTeamData& arg_data) noexcept"},
{"lineNum":"  430","line":"      : m_scratch(arg_data.team_shared(), arg_data.team_shared_bytes()),"},
{"lineNum":"  431","line":"        m_data(arg_data),"},
{"lineNum":"  432","line":"        m_league_rank(arg_data.m_league_rank),"},
{"lineNum":"  433","line":"        m_league_size(arg_data.m_league_size) {}"},
{"lineNum":"  434","line":""},
{"lineNum":"  435","line":"  constexpr HostThreadTeamMember(HostThreadTeamData& arg_data,"},
{"lineNum":"  436","line":"                                 int const arg_league_rank,"},
{"lineNum":"  437","line":"                                 int const arg_league_size) noexcept"},
{"lineNum":"  438","line":"      : m_scratch(arg_data.team_shared(), arg_data.team_shared_bytes(),"},
{"lineNum":"  439","line":"                  arg_data.team_shared(), arg_data.team_shared_bytes()),"},
{"lineNum":"  440","line":"        m_data(arg_data),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  441","line":"        m_league_rank(arg_league_rank),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  442","line":"        m_league_size(arg_league_size) {}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  443","line":""},
{"lineNum":"  444","line":"  ~HostThreadTeamMember()                           = default;"},
{"lineNum":"  445","line":"  HostThreadTeamMember()                            = delete;"},
{"lineNum":"  446","line":"  HostThreadTeamMember(HostThreadTeamMember&&)      = default;"},
{"lineNum":"  447","line":"  HostThreadTeamMember(HostThreadTeamMember const&) = default;"},
{"lineNum":"  448","line":"  HostThreadTeamMember& operator=(HostThreadTeamMember&&) = default;"},
{"lineNum":"  449","line":"  HostThreadTeamMember& operator=(HostThreadTeamMember const&) = default;"},
{"lineNum":"  450","line":""},
{"lineNum":"  451","line":"  //----------------------------------------"},
{"lineNum":"  452","line":""},
{"lineNum":"  453","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  454","line":"  int team_rank() const noexcept { return m_data.m_team_rank; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  455","line":""},
{"lineNum":"  456","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  457","line":"  int team_size() const noexcept { return m_data.m_team_size; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  458","line":""},
{"lineNum":"  459","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  460","line":"  int league_rank() const noexcept { return m_league_rank; }"},
{"lineNum":"  461","line":""},
{"lineNum":"  462","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  463","line":"  int league_size() const noexcept { return m_league_size; }"},
{"lineNum":"  464","line":""},
{"lineNum":"  465","line":"  //----------------------------------------"},
{"lineNum":"  466","line":""},
{"lineNum":"  467","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  468","line":"  const scratch_memory_space& team_shmem() const {"},
{"lineNum":"  469","line":"    return m_scratch.set_team_thread_mode(0, 1, 0);"},
{"lineNum":"  470","line":"  }"},
{"lineNum":"  471","line":""},
{"lineNum":"  472","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  473","line":"  const scratch_memory_space& team_scratch(int) const {"},
{"lineNum":"  474","line":"    return m_scratch.set_team_thread_mode(0, 1, 0);"},
{"lineNum":"  475","line":"  }"},
{"lineNum":"  476","line":""},
{"lineNum":"  477","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  478","line":"  const scratch_memory_space& thread_scratch(int) const {"},
{"lineNum":"  479","line":"    return m_scratch.set_team_thread_mode(0, m_data.m_team_size,"},
{"lineNum":"  480","line":"                                          m_data.m_team_rank);"},
{"lineNum":"  481","line":"  }"},
{"lineNum":"  482","line":""},
{"lineNum":"  483","line":"  //--------------------------------------------------------------------------"},
{"lineNum":"  484","line":"  // Team collectives"},
{"lineNum":"  485","line":"  //--------------------------------------------------------------------------"},
{"lineNum":"  486","line":""},
{"lineNum":"  487","line":"  KOKKOS_INLINE_FUNCTION void team_barrier() const noexcept"},
{"lineNum":"  488","line":"#if defined(KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_HOST)"},
{"lineNum":"  489","line":"  {"},
{"lineNum":"  490","line":"    if (m_data.team_rendezvous()) {"},
{"lineNum":"  491","line":"      m_data.team_rendezvous_release();"},
{"lineNum":"  492","line":"    };"},
{"lineNum":"  493","line":"  }"},
{"lineNum":"  494","line":"#else"},
{"lineNum":"  495","line":"  {"},
{"lineNum":"  496","line":"  }"},
{"lineNum":"  497","line":"#endif"},
{"lineNum":"  498","line":""},
{"lineNum":"  499","line":"  //--------------------------------------------------------------------------"},
{"lineNum":"  500","line":""},
{"lineNum":"  501","line":"  template <typename T>"},
{"lineNum":"  502","line":"  KOKKOS_INLINE_FUNCTION void team_broadcast(T& value,"},
{"lineNum":"  503","line":"                                             const int source_team_rank) const"},
{"lineNum":"  504","line":"      noexcept"},
{"lineNum":"  505","line":"#if defined(KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_HOST)"},
{"lineNum":"  506","line":"  {"},
{"lineNum":"  507","line":"    if (1 < m_data.m_team_size) {"},
{"lineNum":"  508","line":"      T volatile* const shared_value = (T*)m_data.team_reduce();"},
{"lineNum":"  509","line":""},
{"lineNum":"  510","line":"      // Don\'t overwrite shared memory until all threads arrive"},
{"lineNum":"  511","line":""},
{"lineNum":"  512","line":"      if (m_data.team_rendezvous(source_team_rank)) {"},
{"lineNum":"  513","line":"        // All threads have entered \'team_rendezvous\'"},
{"lineNum":"  514","line":"        // only this thread returned from \'team_rendezvous\'"},
{"lineNum":"  515","line":"        // with a return value of \'true\'"},
{"lineNum":"  516","line":""},
{"lineNum":"  517","line":"        *shared_value = value;"},
{"lineNum":"  518","line":""},
{"lineNum":"  519","line":"        m_data.team_rendezvous_release();"},
{"lineNum":"  520","line":"        // This thread released all other threads from \'team_rendezvous\'"},
{"lineNum":"  521","line":"        // with a return value of \'false\'"},
{"lineNum":"  522","line":"      } else {"},
{"lineNum":"  523","line":"        value = *shared_value;"},
{"lineNum":"  524","line":"      }"},
{"lineNum":"  525","line":"    }"},
{"lineNum":"  526","line":"  }"},
{"lineNum":"  527","line":"#else"},
{"lineNum":"  528","line":"  {"},
{"lineNum":"  529","line":"    (void)value;"},
{"lineNum":"  530","line":"    (void)source_team_rank;"},
{"lineNum":"  531","line":"    Kokkos::abort(\"HostThreadTeamMember team_broadcast\\n\");"},
{"lineNum":"  532","line":"  }"},
{"lineNum":"  533","line":"#endif"},
{"lineNum":"  534","line":""},
{"lineNum":"  535","line":"  //--------------------------------------------------------------------------"},
{"lineNum":"  536","line":""},
{"lineNum":"  537","line":"  template <class Closure, typename T>"},
{"lineNum":"  538","line":"  KOKKOS_INLINE_FUNCTION void team_broadcast(Closure const& f, T& value,"},
{"lineNum":"  539","line":"                                             const int source_team_rank) const"},
{"lineNum":"  540","line":"      noexcept"},
{"lineNum":"  541","line":"#if defined(KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_HOST)"},
{"lineNum":"  542","line":"  {"},
{"lineNum":"  543","line":"    T volatile* const shared_value = (T*)m_data.team_reduce();"},
{"lineNum":"  544","line":""},
{"lineNum":"  545","line":"    // Don\'t overwrite shared memory until all threads arrive"},
{"lineNum":"  546","line":""},
{"lineNum":"  547","line":"    if (m_data.team_rendezvous(source_team_rank)) {"},
{"lineNum":"  548","line":"      // All threads have entered \'team_rendezvous\'"},
{"lineNum":"  549","line":"      // only this thread returned from \'team_rendezvous\'"},
{"lineNum":"  550","line":"      // with a return value of \'true\'"},
{"lineNum":"  551","line":""},
{"lineNum":"  552","line":"      f(value);"},
{"lineNum":"  553","line":""},
{"lineNum":"  554","line":"      if (1 < m_data.m_team_size) {"},
{"lineNum":"  555","line":"        *shared_value = value;"},
{"lineNum":"  556","line":"      }"},
{"lineNum":"  557","line":""},
{"lineNum":"  558","line":"      m_data.team_rendezvous_release();"},
{"lineNum":"  559","line":"      // This thread released all other threads from \'team_rendezvous\'"},
{"lineNum":"  560","line":"      // with a return value of \'false\'"},
{"lineNum":"  561","line":"    } else {"},
{"lineNum":"  562","line":"      value = *shared_value;"},
{"lineNum":"  563","line":"    }"},
{"lineNum":"  564","line":"  }"},
{"lineNum":"  565","line":"#else"},
{"lineNum":"  566","line":"  {"},
{"lineNum":"  567","line":"    (void)f;"},
{"lineNum":"  568","line":"    (void)value;"},
{"lineNum":"  569","line":"    (void)source_team_rank;"},
{"lineNum":"  570","line":"    Kokkos::abort(\"HostThreadTeamMember team_broadcast\\n\");"},
{"lineNum":"  571","line":"  }"},
{"lineNum":"  572","line":"#endif"},
{"lineNum":"  573","line":""},
{"lineNum":"  574","line":"  //--------------------------------------------------------------------------"},
{"lineNum":"  575","line":"  // team_reduce( Sum(result) );"},
{"lineNum":"  576","line":"  // team_reduce( Min(result) );"},
{"lineNum":"  577","line":"  // team_reduce( Max(result) );"},
{"lineNum":"  578","line":""},
{"lineNum":"  579","line":"  template <typename ReducerType>"},
{"lineNum":"  580","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  581","line":"      typename std::enable_if<is_reducer<ReducerType>::value>::type"},
{"lineNum":"  582","line":"      team_reduce(ReducerType const& reducer) const noexcept {"},
{"lineNum":"  583","line":"    team_reduce(reducer, reducer.reference());"},
{"lineNum":"  584","line":"  }"},
{"lineNum":"  585","line":""},
{"lineNum":"  586","line":"  template <typename ReducerType>"},
{"lineNum":"  587","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  588","line":"      typename std::enable_if<is_reducer<ReducerType>::value>::type"},
{"lineNum":"  589","line":"      team_reduce(ReducerType const& reducer,"},
{"lineNum":"  590","line":"                  typename ReducerType::value_type contribution) const noexcept"},
{"lineNum":"  591","line":"#if defined(KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_HOST)"},
{"lineNum":"  592","line":"  {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  593","line":"    if (1 < m_data.m_team_size) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  594","line":"      using value_type = typename ReducerType::value_type;"},
{"lineNum":"  595","line":""},
{"lineNum":"  596","line":"      if (0 != m_data.m_team_rank) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  597","line":"        // Non-root copies to their local buffer:"},
{"lineNum":"  598","line":"        /*reducer.copy( (value_type*) m_data.team_reduce_local()"},
{"lineNum":"  599","line":"                    , reducer.data() );*/"},
{"lineNum":"  600","line":"        *((value_type*)m_data.team_reduce_local()) = contribution;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  601","line":"      }"},
{"lineNum":"  602","line":""},
{"lineNum":"  603","line":"      // Root does not overwrite shared memory until all threads arrive"},
{"lineNum":"  604","line":"      // and copy to their local buffer."},
{"lineNum":"  605","line":""},
{"lineNum":"  606","line":"      if (m_data.team_rendezvous()) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  607","line":"        // All threads have entered \'team_rendezvous\'"},
{"lineNum":"  608","line":"        // only this thread returned from \'team_rendezvous\'"},
{"lineNum":"  609","line":"        // with a return value of \'true\'"},
{"lineNum":"  610","line":"        //"},
{"lineNum":"  611","line":"        // This thread sums contributed values"},
{"lineNum":"  612","line":"        for (int i = 1; i < m_data.m_team_size; ++i) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  613","line":"          value_type* const src ="},
{"lineNum":"  614","line":"              (value_type*)m_data.team_member(i)->team_reduce_local();"},
{"lineNum":"  615","line":""},
{"lineNum":"  616","line":"          reducer.join(contribution, *src);"},
{"lineNum":"  617","line":"        }"},
{"lineNum":"  618","line":""},
{"lineNum":"  619","line":"        // Copy result to root member\'s buffer:"},
{"lineNum":"  620","line":"        // reducer.copy( (value_type*) m_data.team_reduce() , reducer.data() );"},
{"lineNum":"  621","line":"        *((value_type*)m_data.team_reduce()) = contribution;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  622","line":"        reducer.reference()                  = contribution;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  623","line":"        m_data.team_rendezvous_release();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  624","line":"        // This thread released all other threads from \'team_rendezvous\'"},
{"lineNum":"  625","line":"        // with a return value of \'false\'"},
{"lineNum":"  626","line":"      } else {"},
{"lineNum":"  627","line":"        // Copy from root member\'s buffer:"},
{"lineNum":"  628","line":"        reducer.reference() = *((value_type*)m_data.team_reduce());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  629","line":"      }"},
{"lineNum":"  630","line":"    } else {"},
{"lineNum":"  631","line":"      reducer.reference() = contribution;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  632","line":"    }"},
{"lineNum":"  633","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  634","line":"#else"},
{"lineNum":"  635","line":"  {"},
{"lineNum":"  636","line":"    (void)reducer;"},
{"lineNum":"  637","line":"    (void)contribution;"},
{"lineNum":"  638","line":"    Kokkos::abort(\"HostThreadTeamMember team_reduce\\n\");"},
{"lineNum":"  639","line":"  }"},
{"lineNum":"  640","line":"#endif"},
{"lineNum":"  641","line":""},
{"lineNum":"  642","line":"  //--------------------------------------------------------------------------"},
{"lineNum":"  643","line":""},
{"lineNum":"  644","line":"  /*template< typename ValueType , class JoinOp >"},
{"lineNum":"  645","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  646","line":"  ValueType"},
{"lineNum":"  647","line":"  team_reduce( ValueType const & value"},
{"lineNum":"  648","line":"             , JoinOp    const & join ) const noexcept"},
{"lineNum":"  649","line":"#if defined( KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_HOST )"},
{"lineNum":"  650","line":"    {"},
{"lineNum":"  651","line":"      if ( 0 != m_data.m_team_rank ) {"},
{"lineNum":"  652","line":"        // Non-root copies to their local buffer:"},
{"lineNum":"  653","line":"        *((ValueType*) m_data.team_reduce_local()) = value ;"},
{"lineNum":"  654","line":"      }"},
{"lineNum":"  655","line":""},
{"lineNum":"  656","line":"      // Root does not overwrite shared memory until all threads arrive"},
{"lineNum":"  657","line":"      // and copy to their local buffer."},
{"lineNum":"  658","line":""},
{"lineNum":"  659","line":"      if ( m_data.team_rendezvous() ) {"},
{"lineNum":"  660","line":"        const Impl::Reducer< ValueType , JoinOp > reducer( join );"},
{"lineNum":"  661","line":""},
{"lineNum":"  662","line":"        // All threads have entered \'team_rendezvous\'"},
{"lineNum":"  663","line":"        // only this thread returned from \'team_rendezvous\'"},
{"lineNum":"  664","line":"        // with a return value of \'true\'"},
{"lineNum":"  665","line":"        //"},
{"lineNum":"  666","line":"        // This thread sums contributed values"},
{"lineNum":"  667","line":""},
{"lineNum":"  668","line":"        ValueType * const dst = (ValueType*) m_data.team_reduce_local();"},
{"lineNum":"  669","line":""},
{"lineNum":"  670","line":"        *dst = value ;"},
{"lineNum":"  671","line":""},
{"lineNum":"  672","line":"        for ( int i = 1 ; i < m_data.m_team_size ; ++i ) {"},
{"lineNum":"  673","line":"          ValueType * const src ="},
{"lineNum":"  674","line":"            (ValueType*) m_data.team_member(i)->team_reduce_local();"},
{"lineNum":"  675","line":""},
{"lineNum":"  676","line":"          reducer.join( dst , src );"},
{"lineNum":"  677","line":"        }"},
{"lineNum":"  678","line":""},
{"lineNum":"  679","line":"        m_data.team_rendezvous_release();"},
{"lineNum":"  680","line":"        // This thread released all other threads from \'team_rendezvous\'"},
{"lineNum":"  681","line":"        // with a return value of \'false\'"},
{"lineNum":"  682","line":"      }"},
{"lineNum":"  683","line":""},
{"lineNum":"  684","line":"      return *((ValueType*) m_data.team_reduce());"},
{"lineNum":"  685","line":"    }"},
{"lineNum":"  686","line":"#else"},
{"lineNum":"  687","line":"    { Kokkos::abort(\"HostThreadTeamMember team_reduce\\n\"); return ValueType(); }"},
{"lineNum":"  688","line":"#endif*/"},
{"lineNum":"  689","line":""},
{"lineNum":"  690","line":"  template <typename T>"},
{"lineNum":"  691","line":"  KOKKOS_INLINE_FUNCTION T team_scan(T const& value,"},
{"lineNum":"  692","line":"                                     T* const global = nullptr) const noexcept"},
{"lineNum":"  693","line":"#if defined(KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_HOST)"},
{"lineNum":"  694","line":"  {"},
{"lineNum":"  695","line":"    if (0 != m_data.m_team_rank) {"},
{"lineNum":"  696","line":"      // Non-root copies to their local buffer:"},
{"lineNum":"  697","line":"      ((T*)m_data.team_reduce_local())[1] = value;"},
{"lineNum":"  698","line":"    }"},
{"lineNum":"  699","line":""},
{"lineNum":"  700","line":"    // Root does not overwrite shared memory until all threads arrive"},
{"lineNum":"  701","line":"    // and copy to their local buffer."},
{"lineNum":"  702","line":""},
{"lineNum":"  703","line":"    if (m_data.team_rendezvous()) {"},
{"lineNum":"  704","line":"      // All threads have entered \'team_rendezvous\'"},
{"lineNum":"  705","line":"      // only this thread returned from \'team_rendezvous\'"},
{"lineNum":"  706","line":"      // with a return value of \'true\'"},
{"lineNum":"  707","line":"      //"},
{"lineNum":"  708","line":"      // This thread scans contributed values"},
{"lineNum":"  709","line":""},
{"lineNum":"  710","line":"      {"},
{"lineNum":"  711","line":"        T* prev = (T*)m_data.team_reduce_local();"},
{"lineNum":"  712","line":""},
{"lineNum":"  713","line":"        prev[0] = 0;"},
{"lineNum":"  714","line":"        prev[1] = value;"},
{"lineNum":"  715","line":""},
{"lineNum":"  716","line":"        for (int i = 1; i < m_data.m_team_size; ++i) {"},
{"lineNum":"  717","line":"          T* const ptr = (T*)m_data.team_member(i)->team_reduce_local();"},
{"lineNum":"  718","line":""},
{"lineNum":"  719","line":"          ptr[0] = prev[0] + prev[1];"},
{"lineNum":"  720","line":""},
{"lineNum":"  721","line":"          prev = ptr;"},
{"lineNum":"  722","line":"        }"},
{"lineNum":"  723","line":"      }"},
{"lineNum":"  724","line":""},
{"lineNum":"  725","line":"      // If adding to global value then atomic_fetch_add to that value"},
{"lineNum":"  726","line":"      // and sum previous value to every entry of the scan."},
{"lineNum":"  727","line":"      if (global) {"},
{"lineNum":"  728","line":"        T* prev = (T*)m_data.team_reduce_local();"},
{"lineNum":"  729","line":""},
{"lineNum":"  730","line":"        {"},
{"lineNum":"  731","line":"          T* ptr = (T*)m_data.team_member(m_data.m_team_size - 1)"},
{"lineNum":"  732","line":"                       ->team_reduce_local();"},
{"lineNum":"  733","line":"          prev[0] = Kokkos::atomic_fetch_add(global, ptr[0] + ptr[1]);"},
{"lineNum":"  734","line":"        }"},
{"lineNum":"  735","line":""},
{"lineNum":"  736","line":"        for (int i = 1; i < m_data.m_team_size; ++i) {"},
{"lineNum":"  737","line":"          T* ptr = (T*)m_data.team_member(i)->team_reduce_local();"},
{"lineNum":"  738","line":"          ptr[0] += prev[0];"},
{"lineNum":"  739","line":"        }"},
{"lineNum":"  740","line":"      }"},
{"lineNum":"  741","line":""},
{"lineNum":"  742","line":"      m_data.team_rendezvous_release();"},
{"lineNum":"  743","line":"    }"},
{"lineNum":"  744","line":""},
{"lineNum":"  745","line":"    return ((T*)m_data.team_reduce_local())[0];"},
{"lineNum":"  746","line":"  }"},
{"lineNum":"  747","line":"#else"},
{"lineNum":"  748","line":"  {"},
{"lineNum":"  749","line":"    (void)value;"},
{"lineNum":"  750","line":"    (void)global;"},
{"lineNum":"  751","line":"    Kokkos::abort(\"HostThreadTeamMember team_scan\\n\");"},
{"lineNum":"  752","line":"    return T();"},
{"lineNum":"  753","line":"  }"},
{"lineNum":"  754","line":"#endif"},
{"lineNum":"  755","line":"};"},
{"lineNum":"  756","line":""},
{"lineNum":"  757","line":"}  // namespace Impl"},
{"lineNum":"  758","line":"}  // namespace Kokkos"},
{"lineNum":"  759","line":""},
{"lineNum":"  760","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  761","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  762","line":""},
{"lineNum":"  763","line":"namespace Kokkos {"},
{"lineNum":"  764","line":""},
{"lineNum":"  765","line":"template <typename iType, typename Member>"},
{"lineNum":"  766","line":"KOKKOS_INLINE_FUNCTION Impl::TeamThreadRangeBoundariesStruct<iType, Member>"},
{"lineNum":"  767","line":"TeamThreadRange("},
{"lineNum":"  768","line":"    Member const& member, iType count,"},
{"lineNum":"  769","line":"    typename std::enable_if<"},
{"lineNum":"  770","line":"        Impl::is_thread_team_member<Member>::value>::type const** = nullptr) {"},
{"lineNum":"  771","line":"  return Impl::TeamThreadRangeBoundariesStruct<iType, Member>(member, 0, count);"},
{"lineNum":"  772","line":"}"},
{"lineNum":"  773","line":""},
{"lineNum":"  774","line":"template <typename iType1, typename iType2, typename Member>"},
{"lineNum":"  775","line":"KOKKOS_INLINE_FUNCTION Impl::TeamThreadRangeBoundariesStruct<"},
{"lineNum":"  776","line":"    typename std::common_type<iType1, iType2>::type, Member>"},
{"lineNum":"  777","line":"TeamThreadRange("},
{"lineNum":"  778","line":"    Member const& member, iType1 begin, iType2 end,"},
{"lineNum":"  779","line":"    typename std::enable_if<"},
{"lineNum":"  780","line":"        Impl::is_thread_team_member<Member>::value>::type const** = nullptr) {"},
{"lineNum":"  781","line":"  return Impl::TeamThreadRangeBoundariesStruct<"},
{"lineNum":"  782","line":"      typename std::common_type<iType1, iType2>::type, Member>(member, begin,"},
{"lineNum":"  783","line":"                                                               end);"},
{"lineNum":"  784","line":"}"},
{"lineNum":"  785","line":""},
{"lineNum":"  786","line":"template <typename iType, typename Member>"},
{"lineNum":"  787","line":"KOKKOS_INLINE_FUNCTION Impl::TeamThreadRangeBoundariesStruct<iType, Member>"},
{"lineNum":"  788","line":"TeamVectorRange("},
{"lineNum":"  789","line":"    Member const& member, iType count,"},
{"lineNum":"  790","line":"    typename std::enable_if<"},
{"lineNum":"  791","line":"        Impl::is_thread_team_member<Member>::value>::type const** = nullptr) {"},
{"lineNum":"  792","line":"  return Impl::TeamThreadRangeBoundariesStruct<iType, Member>(member, 0, count);"},
{"lineNum":"  793","line":"}"},
{"lineNum":"  794","line":""},
{"lineNum":"  795","line":"template <typename iType1, typename iType2, typename Member>"},
{"lineNum":"  796","line":"KOKKOS_INLINE_FUNCTION Impl::TeamThreadRangeBoundariesStruct<"},
{"lineNum":"  797","line":"    typename std::common_type<iType1, iType2>::type, Member>"},
{"lineNum":"  798","line":"TeamVectorRange("},
{"lineNum":"  799","line":"    Member const& member, iType1 begin, iType2 end,"},
{"lineNum":"  800","line":"    typename std::enable_if<"},
{"lineNum":"  801","line":"        Impl::is_thread_team_member<Member>::value>::type const** = nullptr) {"},
{"lineNum":"  802","line":"  return Impl::TeamThreadRangeBoundariesStruct<"},
{"lineNum":"  803","line":"      typename std::common_type<iType1, iType2>::type, Member>(member, begin,"},
{"lineNum":"  804","line":"                                                               end);"},
{"lineNum":"  805","line":"}"},
{"lineNum":"  806","line":""},
{"lineNum":"  807","line":"template <typename iType, typename Member>"},
{"lineNum":"  808","line":"KOKKOS_INLINE_FUNCTION Impl::ThreadVectorRangeBoundariesStruct<iType, Member>"},
{"lineNum":"  809","line":"ThreadVectorRange("},
{"lineNum":"  810","line":"    Member const& member, iType count,"},
{"lineNum":"  811","line":"    typename std::enable_if<"},
{"lineNum":"  812","line":"        Impl::is_thread_team_member<Member>::value>::type const** = nullptr) {"},
{"lineNum":"  813","line":"  return Impl::ThreadVectorRangeBoundariesStruct<iType, Member>(member, count);"},
{"lineNum":"  814","line":"}"},
{"lineNum":"  815","line":""},
{"lineNum":"  816","line":"template <typename iType1, typename iType2, typename Member>"},
{"lineNum":"  817","line":"KOKKOS_INLINE_FUNCTION Impl::ThreadVectorRangeBoundariesStruct<"},
{"lineNum":"  818","line":"    typename std::common_type<iType1, iType2>::type, Member>"},
{"lineNum":"  819","line":"ThreadVectorRange("},
{"lineNum":"  820","line":"    Member const& member, iType1 arg_begin, iType2 arg_end,"},
{"lineNum":"  821","line":"    typename std::enable_if<"},
{"lineNum":"  822","line":"        Impl::is_thread_team_member<Member>::value>::type const** = nullptr) {"},
{"lineNum":"  823","line":"  using iType = typename std::common_type<iType1, iType2>::type;"},
{"lineNum":"  824","line":"  return Impl::ThreadVectorRangeBoundariesStruct<iType, Member>("},
{"lineNum":"  825","line":"      member, iType(arg_begin), iType(arg_end));"},
{"lineNum":"  826","line":"}"},
{"lineNum":"  827","line":""},
{"lineNum":"  828","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  829","line":"/** \\brief  Inter-thread parallel_for."},
{"lineNum":"  830","line":" *"},
{"lineNum":"  831","line":" * Executes lambda(iType i) for each i=[0..N)"},
{"lineNum":"  832","line":" *"},
{"lineNum":"  833","line":" * The range [0..N) is mapped to all threads of the the calling thread team."},
{"lineNum":"  834","line":" */"},
{"lineNum":"  835","line":"template <typename iType, class Closure, class Member>"},
{"lineNum":"  836","line":"KOKKOS_INLINE_FUNCTION void parallel_for("},
{"lineNum":"  837","line":"    Impl::TeamThreadRangeBoundariesStruct<iType, Member> const& loop_boundaries,"},
{"lineNum":"  838","line":"    Closure const& closure,"},
{"lineNum":"  839","line":"    typename std::enable_if<Impl::is_host_thread_team_member<Member>::value>::"},
{"lineNum":"  840","line":"        type const** = nullptr) {"},
{"lineNum":"  841","line":"  for (iType i = loop_boundaries.start; i < loop_boundaries.end;"},
{"lineNum":"  842","line":"       i += loop_boundaries.increment) {"},
{"lineNum":"  843","line":"    closure(i);"},
{"lineNum":"  844","line":"  }"},
{"lineNum":"  845","line":"}"},
{"lineNum":"  846","line":""},
{"lineNum":"  847","line":"template <typename iType, class Closure, class Member>"},
{"lineNum":"  848","line":"KOKKOS_INLINE_FUNCTION void parallel_for("},
{"lineNum":"  849","line":"    Impl::ThreadVectorRangeBoundariesStruct<iType, Member> const&"},
{"lineNum":"  850","line":"        loop_boundaries,"},
{"lineNum":"  851","line":"    Closure const& closure,"},
{"lineNum":"  852","line":"    typename std::enable_if<Impl::is_host_thread_team_member<Member>::value>::"},
{"lineNum":"  853","line":"        type const** = nullptr) {"},
{"lineNum":"  854","line":"#ifdef KOKKOS_ENABLE_PRAGMA_IVDEP"},
{"lineNum":"  855","line":"#pragma ivdep"},
{"lineNum":"  856","line":"#endif"},
{"lineNum":"  857","line":"  for (iType i = loop_boundaries.start; i < loop_boundaries.end;"},
{"lineNum":"  858","line":"       i += loop_boundaries.increment) {"},
{"lineNum":"  859","line":"    closure(i);"},
{"lineNum":"  860","line":"  }"},
{"lineNum":"  861","line":"}"},
{"lineNum":"  862","line":""},
{"lineNum":"  863","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  864","line":""},
{"lineNum":"  865","line":"template <typename iType, class Closure, class Reducer, class Member>"},
{"lineNum":"  866","line":"KOKKOS_INLINE_FUNCTION typename std::enable_if<"},
{"lineNum":"  867","line":"    Kokkos::is_reducer<Reducer>::value &&"},
{"lineNum":"  868","line":"    Impl::is_host_thread_team_member<Member>::value>::type"},
{"lineNum":"  869","line":"parallel_reduce("},
{"lineNum":"  870","line":"    Impl::TeamThreadRangeBoundariesStruct<iType, Member> const& loop_boundaries,"},
{"lineNum":"  871","line":"    Closure const& closure, Reducer const& reducer) {"},
{"lineNum":"  872","line":"  typename Reducer::value_type value;"},
{"lineNum":"  873","line":"  reducer.init(value);"},
{"lineNum":"  874","line":""},
{"lineNum":"  875","line":"  for (iType i = loop_boundaries.start; i < loop_boundaries.end;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  876","line":"       i += loop_boundaries.increment) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  877","line":"    closure(i, value);"},
{"lineNum":"  878","line":"  }"},
{"lineNum":"  879","line":""},
{"lineNum":"  880","line":"  loop_boundaries.thread.team_reduce(reducer, value);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  881","line":"}"},
{"lineNum":"  882","line":""},
{"lineNum":"  883","line":"template <typename iType, typename Closure, typename ValueType, typename Member>"},
{"lineNum":"  884","line":"KOKKOS_INLINE_FUNCTION typename std::enable_if<"},
{"lineNum":"  885","line":"    !Kokkos::is_reducer<ValueType>::value &&"},
{"lineNum":"  886","line":"    Impl::is_host_thread_team_member<Member>::value>::type"},
{"lineNum":"  887","line":"parallel_reduce("},
{"lineNum":"  888","line":"    Impl::TeamThreadRangeBoundariesStruct<iType, Member> const& loop_boundaries,"},
{"lineNum":"  889","line":"    Closure const& closure, ValueType& result) {"},
{"lineNum":"  890","line":"  ValueType val;"},
{"lineNum":"  891","line":"  Sum<ValueType> reducer(val);"},
{"lineNum":"  892","line":"  reducer.init(val);"},
{"lineNum":"  893","line":""},
{"lineNum":"  894","line":"  for (iType i = loop_boundaries.start; i < loop_boundaries.end;"},
{"lineNum":"  895","line":"       i += loop_boundaries.increment) {"},
{"lineNum":"  896","line":"    closure(i, reducer.reference());"},
{"lineNum":"  897","line":"  }"},
{"lineNum":"  898","line":""},
{"lineNum":"  899","line":"  loop_boundaries.thread.team_reduce(reducer);"},
{"lineNum":"  900","line":"  result = reducer.reference();"},
{"lineNum":"  901","line":"}"},
{"lineNum":"  902","line":""},
{"lineNum":"  903","line":"/*template< typename iType, class Space"},
{"lineNum":"  904","line":"         , class Closure, class Joiner , typename ValueType >"},
{"lineNum":"  905","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  906","line":"void parallel_reduce"},
{"lineNum":"  907","line":"  ("},
{"lineNum":"  908","line":"Impl::TeamThreadRangeBoundariesStruct<iType,Impl::HostThreadTeamMember<Space> >"},
{"lineNum":"  909","line":"             const & loop_boundaries"},
{"lineNum":"  910","line":"  , Closure  const & closure"},
{"lineNum":"  911","line":"  , Joiner   const & joiner"},
{"lineNum":"  912","line":"  , ValueType      & result"},
{"lineNum":"  913","line":"  )"},
{"lineNum":"  914","line":"{"},
{"lineNum":"  915","line":"  Impl::Reducer< ValueType , Joiner > reducer( joiner , & result );"},
{"lineNum":"  916","line":""},
{"lineNum":"  917","line":"  reducer.init( reducer.data() );"},
{"lineNum":"  918","line":""},
{"lineNum":"  919","line":"  for( iType i = loop_boundaries.start"},
{"lineNum":"  920","line":"     ; i <  loop_boundaries.end"},
{"lineNum":"  921","line":"     ; i += loop_boundaries.increment ) {"},
{"lineNum":"  922","line":"    closure( i , reducer.reference() );"},
{"lineNum":"  923","line":"  }"},
{"lineNum":"  924","line":""},
{"lineNum":"  925","line":"  loop_boundaries.thread.team_reduce( reducer );"},
{"lineNum":"  926","line":"}*/"},
{"lineNum":"  927","line":""},
{"lineNum":"  928","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  929","line":"/** \\brief  Inter-thread vector parallel_reduce."},
{"lineNum":"  930","line":" *"},
{"lineNum":"  931","line":" *  Executes lambda(iType i, ValueType & val) for each i=[0..N)"},
{"lineNum":"  932","line":" *"},
{"lineNum":"  933","line":" *  The range [0..N) is mapped to all threads of the"},
{"lineNum":"  934","line":" *  calling thread team and a summation of  val is"},
{"lineNum":"  935","line":" *  performed and put into result."},
{"lineNum":"  936","line":" */"},
{"lineNum":"  937","line":"template <typename iType, class Lambda, typename ValueType, typename Member>"},
{"lineNum":"  938","line":"KOKKOS_INLINE_FUNCTION typename std::enable_if<"},
{"lineNum":"  939","line":"    !Kokkos::is_reducer<ValueType>::value &&"},
{"lineNum":"  940","line":"    Impl::is_host_thread_team_member<Member>::value>::type"},
{"lineNum":"  941","line":"parallel_reduce(const Impl::ThreadVectorRangeBoundariesStruct<iType, Member>&"},
{"lineNum":"  942","line":"                    loop_boundaries,"},
{"lineNum":"  943","line":"                const Lambda& lambda, ValueType& result) {"},
{"lineNum":"  944","line":"  result = ValueType();"},
{"lineNum":"  945","line":"  for (iType i = loop_boundaries.start; i < loop_boundaries.end;"},
{"lineNum":"  946","line":"       i += loop_boundaries.increment) {"},
{"lineNum":"  947","line":"    lambda(i, result);"},
{"lineNum":"  948","line":"  }"},
{"lineNum":"  949","line":"}"},
{"lineNum":"  950","line":""},
{"lineNum":"  951","line":"template <typename iType, class Lambda, typename ReducerType, typename Member>"},
{"lineNum":"  952","line":"KOKKOS_INLINE_FUNCTION typename std::enable_if<"},
{"lineNum":"  953","line":"    Kokkos::is_reducer<ReducerType>::value &&"},
{"lineNum":"  954","line":"    Impl::is_host_thread_team_member<Member>::value>::type"},
{"lineNum":"  955","line":"parallel_reduce(const Impl::ThreadVectorRangeBoundariesStruct<iType, Member>&"},
{"lineNum":"  956","line":"                    loop_boundaries,"},
{"lineNum":"  957","line":"                const Lambda& lambda, const ReducerType& reducer) {"},
{"lineNum":"  958","line":"  reducer.init(reducer.reference());"},
{"lineNum":"  959","line":"  for (iType i = loop_boundaries.start; i < loop_boundaries.end;"},
{"lineNum":"  960","line":"       i += loop_boundaries.increment) {"},
{"lineNum":"  961","line":"    lambda(i, reducer.reference());"},
{"lineNum":"  962","line":"  }"},
{"lineNum":"  963","line":"}"},
{"lineNum":"  964","line":""},
{"lineNum":"  965","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  966","line":""},
{"lineNum":"  967","line":"template <typename iType, class Closure, class Member>"},
{"lineNum":"  968","line":"KOKKOS_INLINE_FUNCTION typename std::enable_if<"},
{"lineNum":"  969","line":"    Impl::is_host_thread_team_member<Member>::value>::type"},
{"lineNum":"  970","line":"parallel_scan("},
{"lineNum":"  971","line":"    Impl::TeamThreadRangeBoundariesStruct<iType, Member> const& loop_boundaries,"},
{"lineNum":"  972","line":"    Closure const& closure) {"},
{"lineNum":"  973","line":"  // Extract ValueType from the closure"},
{"lineNum":"  974","line":""},
{"lineNum":"  975","line":"  using value_type = typename Kokkos::Impl::FunctorAnalysis<"},
{"lineNum":"  976","line":"      Kokkos::Impl::FunctorPatternInterface::SCAN, void, Closure>::value_type;"},
{"lineNum":"  977","line":""},
{"lineNum":"  978","line":"  value_type accum = 0;"},
{"lineNum":"  979","line":""},
{"lineNum":"  980","line":"  // Intra-member scan"},
{"lineNum":"  981","line":"  for (iType i = loop_boundaries.start; i < loop_boundaries.end;"},
{"lineNum":"  982","line":"       i += loop_boundaries.increment) {"},
{"lineNum":"  983","line":"    closure(i, accum, false);"},
{"lineNum":"  984","line":"  }"},
{"lineNum":"  985","line":""},
{"lineNum":"  986","line":"  // \'accum\' output is the exclusive prefix sum"},
{"lineNum":"  987","line":"  accum = loop_boundaries.thread.team_scan(accum);"},
{"lineNum":"  988","line":""},
{"lineNum":"  989","line":"  for (iType i = loop_boundaries.start; i < loop_boundaries.end;"},
{"lineNum":"  990","line":"       i += loop_boundaries.increment) {"},
{"lineNum":"  991","line":"    closure(i, accum, true);"},
{"lineNum":"  992","line":"  }"},
{"lineNum":"  993","line":"}"},
{"lineNum":"  994","line":""},
{"lineNum":"  995","line":"template <typename iType, class ClosureType, class Member>"},
{"lineNum":"  996","line":"KOKKOS_INLINE_FUNCTION typename std::enable_if<"},
{"lineNum":"  997","line":"    Impl::is_host_thread_team_member<Member>::value>::type"},
{"lineNum":"  998","line":"parallel_scan(Impl::ThreadVectorRangeBoundariesStruct<iType, Member> const&"},
{"lineNum":"  999","line":"                  loop_boundaries,"},
{"lineNum":" 1000","line":"              ClosureType const& closure) {"},
{"lineNum":" 1001","line":"  using value_type = typename Kokkos::Impl::FunctorAnalysis<"},
{"lineNum":" 1002","line":"      Impl::FunctorPatternInterface::SCAN, void, ClosureType>::value_type;"},
{"lineNum":" 1003","line":""},
{"lineNum":" 1004","line":"  value_type scan_val = value_type();"},
{"lineNum":" 1005","line":""},
{"lineNum":" 1006","line":"#ifdef KOKKOS_ENABLE_PRAGMA_IVDEP"},
{"lineNum":" 1007","line":"#pragma ivdep"},
{"lineNum":" 1008","line":"#endif"},
{"lineNum":" 1009","line":"  for (iType i = loop_boundaries.start; i < loop_boundaries.end;"},
{"lineNum":" 1010","line":"       i += loop_boundaries.increment) {"},
{"lineNum":" 1011","line":"    closure(i, scan_val, true);"},
{"lineNum":" 1012","line":"  }"},
{"lineNum":" 1013","line":"}"},
{"lineNum":" 1014","line":""},
{"lineNum":" 1015","line":"template <typename iType, class Lambda, typename ReducerType, typename Member>"},
{"lineNum":" 1016","line":"KOKKOS_INLINE_FUNCTION typename std::enable_if<"},
{"lineNum":" 1017","line":"    Kokkos::is_reducer<ReducerType>::value &&"},
{"lineNum":" 1018","line":"    Impl::is_host_thread_team_member<Member>::value>::type"},
{"lineNum":" 1019","line":"parallel_scan(const Impl::ThreadVectorRangeBoundariesStruct<iType, Member>&"},
{"lineNum":" 1020","line":"                  loop_boundaries,"},
{"lineNum":" 1021","line":"              const Lambda& lambda, const ReducerType& reducer) {"},
{"lineNum":" 1022","line":"  typename ReducerType::value_type scan_val;"},
{"lineNum":" 1023","line":"  reducer.init(scan_val);"},
{"lineNum":" 1024","line":""},
{"lineNum":" 1025","line":"#ifdef KOKKOS_ENABLE_PRAGMA_IVDEP"},
{"lineNum":" 1026","line":"#pragma ivdep"},
{"lineNum":" 1027","line":"#endif"},
{"lineNum":" 1028","line":"  for (iType i = loop_boundaries.start; i < loop_boundaries.end;"},
{"lineNum":" 1029","line":"       i += loop_boundaries.increment) {"},
{"lineNum":" 1030","line":"    lambda(i, scan_val, true);"},
{"lineNum":" 1031","line":"  }"},
{"lineNum":" 1032","line":"}"},
{"lineNum":" 1033","line":""},
{"lineNum":" 1034","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1035","line":""},
{"lineNum":" 1036","line":"template <class Member>"},
{"lineNum":" 1037","line":"KOKKOS_INLINE_FUNCTION Impl::ThreadSingleStruct<Member> PerTeam("},
{"lineNum":" 1038","line":"    Member const& member,"},
{"lineNum":" 1039","line":"    typename std::enable_if<"},
{"lineNum":" 1040","line":"        Impl::is_thread_team_member<Member>::value>::type const** = nullptr) {"},
{"lineNum":" 1041","line":"  return Impl::ThreadSingleStruct<Member>(member);"},
{"lineNum":" 1042","line":"}"},
{"lineNum":" 1043","line":""},
{"lineNum":" 1044","line":"template <class Member>"},
{"lineNum":" 1045","line":"KOKKOS_INLINE_FUNCTION Impl::VectorSingleStruct<Member> PerThread("},
{"lineNum":" 1046","line":"    Member const& member,"},
{"lineNum":" 1047","line":"    typename std::enable_if<"},
{"lineNum":" 1048","line":"        Impl::is_thread_team_member<Member>::value>::type const** = nullptr) {"},
{"lineNum":" 1049","line":"  return Impl::VectorSingleStruct<Member>(member);"},
{"lineNum":" 1050","line":"}"},
{"lineNum":" 1051","line":""},
{"lineNum":" 1052","line":"template <class Member, class FunctorType>"},
{"lineNum":" 1053","line":"KOKKOS_INLINE_FUNCTION typename std::enable_if<"},
{"lineNum":" 1054","line":"    Impl::is_host_thread_team_member<Member>::value>::type"},
{"lineNum":" 1055","line":"single(const Impl::ThreadSingleStruct<Member>& single,"},
{"lineNum":" 1056","line":"       const FunctorType& functor) {"},
{"lineNum":" 1057","line":"  // \'single\' does not perform a barrier."},
{"lineNum":" 1058","line":"  if (single.team_member.team_rank() == 0) functor();"},
{"lineNum":" 1059","line":"}"},
{"lineNum":" 1060","line":""},
{"lineNum":" 1061","line":"template <class Member, class FunctorType, typename ValueType>"},
{"lineNum":" 1062","line":"KOKKOS_INLINE_FUNCTION typename std::enable_if<"},
{"lineNum":" 1063","line":"    Impl::is_host_thread_team_member<Member>::value>::type"},
{"lineNum":" 1064","line":"single(const Impl::ThreadSingleStruct<Member>& single,"},
{"lineNum":" 1065","line":"       const FunctorType& functor, ValueType& val) {"},
{"lineNum":" 1066","line":"  single.team_member.team_broadcast(functor, val, 0);"},
{"lineNum":" 1067","line":"}"},
{"lineNum":" 1068","line":""},
{"lineNum":" 1069","line":"template <class Member, class FunctorType>"},
{"lineNum":" 1070","line":"KOKKOS_INLINE_FUNCTION typename std::enable_if<"},
{"lineNum":" 1071","line":"    Impl::is_host_thread_team_member<Member>::value>::type"},
{"lineNum":" 1072","line":"single(const Impl::VectorSingleStruct<Member>&, const FunctorType& functor) {"},
{"lineNum":" 1073","line":"  functor();"},
{"lineNum":" 1074","line":"}"},
{"lineNum":" 1075","line":""},
{"lineNum":" 1076","line":"template <class Member, class FunctorType, typename ValueType>"},
{"lineNum":" 1077","line":"KOKKOS_INLINE_FUNCTION typename std::enable_if<"},
{"lineNum":" 1078","line":"    Impl::is_host_thread_team_member<Member>::value>::type"},
{"lineNum":" 1079","line":"single(const Impl::VectorSingleStruct<Member>&, const FunctorType& functor,"},
{"lineNum":" 1080","line":"       ValueType& val) {"},
{"lineNum":" 1081","line":"  functor(val);"},
{"lineNum":" 1082","line":"}"},
{"lineNum":" 1083","line":""},
{"lineNum":" 1084","line":"} /* namespace Kokkos */"},
{"lineNum":" 1085","line":""},
{"lineNum":" 1086","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1087","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1088","line":""},
{"lineNum":" 1089","line":"#endif /* #ifndef KOKKOS_IMPL_HOSTTHREADTEAM_HPP */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 68, "covered" : 0,};
var merged_data = [];
