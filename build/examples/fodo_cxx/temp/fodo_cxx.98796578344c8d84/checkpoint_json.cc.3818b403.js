var data = {lines:[
{"lineNum":"    1","line":""},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"#include <fstream>"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"#include \"synergia/utils/json.h\""},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"namespace syn"},
{"lineNum":"    9","line":"{"},
{"lineNum":"   10","line":"    void checkpoint_save_as_json("},
{"lineNum":"   11","line":"            std::string const& prop_str,"},
{"lineNum":"   12","line":"            std::string const& sims_str,"},
{"lineNum":"   13","line":"            std::vector<int> const& displs,"},
{"lineNum":"   14","line":"            std::vector<int> const& lens )"},
{"lineNum":"   15","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   16","line":"        syn::json cp = syn::json::object();"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"        cp[\"propagator\"] = syn::json::parse(prop_str);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   19","line":"        cp[\"simulator\"] = syn::json::array();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"        for(int i=0; i<displs.size(); ++i)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   22","line":"        {"},
{"lineNum":"   23","line":"            auto begin = sims_str.begin() + displs[i];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   24","line":"            auto d = syn::json::parse(begin, begin + lens[i]);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   25","line":"            cp[\"simulator\"].push_back(d);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   26","line":"        }"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"        // write states to file"},
{"lineNum":"   29","line":"        std::ofstream file(\"cp_state.json\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   30","line":"        if (!file.good()) throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   31","line":"                \"Error at creating checkpointing file\");"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"        file << cp;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   34","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"    std::pair<std::string, std::string>"},
{"lineNum":"   37","line":"    checkpoint_load_json(std::vector<char> const& buf, int rank)"},
{"lineNum":"   38","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   39","line":"        auto cp = syn::json::parse(buf.begin(), buf.end());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   40","line":"        return std::make_pair( cp[\"propagator\"].dump(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   41","line":"                               cp[\"simulator\"][rank].dump() );","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   42","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   43","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 16, "covered" : 0,};
var merged_data = [];
