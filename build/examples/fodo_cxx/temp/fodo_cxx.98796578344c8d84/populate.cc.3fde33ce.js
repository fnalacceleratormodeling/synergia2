var data = {lines:[
{"lineNum":"    1","line":"#include <sstream>"},
{"lineNum":"    2","line":"#include <stdexcept>"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#include \"populate.h\""},
{"lineNum":"    5","line":"#include \"populate_host.h\""},
{"lineNum":"    6","line":"#include \"core_diagnostics.h\""},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"#include \"synergia/utils/floating_point.h\""},
{"lineNum":"    9","line":"#include \"synergia/foundation/math_constants.h\""},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"using mconstants::pi;"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"namespace"},
{"lineNum":"   14","line":"{"},
{"lineNum":"   15","line":"    bool is_symmetric66(const_karray2d_row m)"},
{"lineNum":"   16","line":"    {"},
{"lineNum":"   17","line":"        bool symmetric = true;"},
{"lineNum":"   18","line":"        const double tolerance = 1.0e-14;"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"        for (int i = 0; i < 6; ++i)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   21","line":"        {"},
{"lineNum":"   22","line":"            for (int j = i + 1; j < 6; ++j)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   23","line":"            {"},
{"lineNum":"   24","line":"                if (!floating_point_equal(m(i, j), m(j, i), tolerance))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   25","line":"                {"},
{"lineNum":"   26","line":"                    symmetric = false;"},
{"lineNum":"   27","line":"                }"},
{"lineNum":"   28","line":"            }"},
{"lineNum":"   29","line":"        }"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"        return symmetric;"},
{"lineNum":"   32","line":"    }"},
{"lineNum":"   33","line":"}"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"void"},
{"lineNum":"   36","line":"adjust_moments( Bunch & bunch,"},
{"lineNum":"   37","line":"        const_karray1d means,"},
{"lineNum":"   38","line":"        const_karray2d_row covariances )"},
{"lineNum":"   39","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   40","line":"    if (!is_symmetric66(covariances))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   41","line":"        throw std::runtime_error(\"adjust_moments: covariance matrix must be symmetric\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"    // calculate_mean and mom2 are performed on device memory, so we need to"},
{"lineNum":"   44","line":"    // copy the particle data from host to device first. checkout is not"},
{"lineNum":"   45","line":"    // necessary since the core diagnostics do not change the particle data"},
{"lineNum":"   46","line":"    bunch.checkin_particles();"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"    karray1d bunch_mean = Core_diagnostics::calculate_mean(bunch);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   49","line":"    karray2d_row bunch_mom2 = Core_diagnostics::calculate_mom2(bunch, bunch_mean);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"    int num_particles = bunch.size();"},
{"lineNum":"   52","line":"    int num_particles_slots = bunch.capacity();"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"    //auto strides = bunch.get_particle_strides();"},
{"lineNum":"   55","line":"    //int num_particles_slots = strides[1];"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"    adjust_moments_host(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   58","line":"            means.data(),"},
{"lineNum":"   59","line":"            covariances.data(),"},
{"lineNum":"   60","line":"            bunch_mean.data(),"},
{"lineNum":"   61","line":"            bunch_mom2.data(),"},
{"lineNum":"   62","line":"            num_particles,"},
{"lineNum":"   63","line":"            num_particles_slots,"},
{"lineNum":"   64","line":"            bunch.get_host_particles().data() );"},
{"lineNum":"   65","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"namespace"},
{"lineNum":"   68","line":"{"},
{"lineNum":"   69","line":"    void"},
{"lineNum":"   70","line":"    fill_unit_6d( Distribution & dist,"},
{"lineNum":"   71","line":"                  HostParticles particles,"},
{"lineNum":"   72","line":"                  const_karray2d_row covariances,"},
{"lineNum":"   73","line":"                  int start, int end )"},
{"lineNum":"   74","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   75","line":"        for (int j = 0; j < 6; ++j)"},
{"lineNum":"   76","line":"        {"},
{"lineNum":"   77","line":"            const double scale = sqrt( covariances(j, j) );","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"            for(int p=start; p<end; ++p)","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"   80","line":"                particles(p, j) = dist.get_unit_gaussian() * scale;","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"   81","line":"        }"},
{"lineNum":"   82","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"    inline bool"},
{"lineNum":"   85","line":"    good( ConstHostParticles particles,"},
{"lineNum":"   86","line":"          const_karray1d limits,"},
{"lineNum":"   87","line":"          int index )"},
{"lineNum":"   88","line":"    {"},
{"lineNum":"   89","line":"        bool retval = true;"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"        for (int i = 0; i < 6; ++i)"},
{"lineNum":"   92","line":"        {"},
{"lineNum":"   93","line":"            double val = particles(index, i);"},
{"lineNum":"   94","line":"            double limit = limits[i];","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"            if ((limit > 0) && ((val > limit) or (val < -limit)))","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"   97","line":"                retval = false;"},
{"lineNum":"   98","line":"        }"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"        return retval;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  101","line":"    }"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"    void"},
{"lineNum":"  104","line":"    strip_unit_6d( Bunch & bunch,"},
{"lineNum":"  105","line":"                   const_karray1d limits,"},
{"lineNum":"  106","line":"                   int & total_num,"},
{"lineNum":"  107","line":"                   int & local_num )"},
{"lineNum":"  108","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  109","line":"        auto particles = bunch.get_host_particles();"},
{"lineNum":"  110","line":"        local_num = bunch.get_local_num();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"        int index = 0;"},
{"lineNum":"  113","line":"        while (index < local_num)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  114","line":"        {"},
{"lineNum":"  115","line":"            if (good(particles, limits, index))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  116","line":"            {"},
{"lineNum":"  117","line":"                ++index;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  118","line":"            }"},
{"lineNum":"  119","line":"            else"},
{"lineNum":"  120","line":"            {"},
{"lineNum":"  121","line":"                int last = local_num - 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  122","line":"                if (good(particles, limits, last))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  123","line":"                {"},
{"lineNum":"  124","line":"                    particles(index, 0) = particles(last, 0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  125","line":"                    particles(index, 1) = particles(last, 1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  126","line":"                    particles(index, 2) = particles(last, 2);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  127","line":"                    particles(index, 3) = particles(last, 3);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  128","line":"                    particles(index, 4) = particles(last, 4);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  129","line":"                    particles(index, 5) = particles(last, 5);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  130","line":"                }"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"                --local_num;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  133","line":"            }"},
{"lineNum":"  134","line":"        }"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"        MPI_Allreduce(&local_num, &total_num, 1, MPI_INT, MPI_SUM,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  137","line":"                bunch.get_comm());"},
{"lineNum":"  138","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  139","line":"}"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"void"},
{"lineNum":"  142","line":"populate_6d( Distribution & dist,"},
{"lineNum":"  143","line":"        Bunch & bunch,"},
{"lineNum":"  144","line":"        const_karray1d means,"},
{"lineNum":"  145","line":"        const_karray2d_row covariances )"},
{"lineNum":"  146","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  147","line":"    if (bunch.size() != bunch.get_local_num())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  148","line":"    {"},
{"lineNum":"  149","line":"        throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  150","line":"                \"populate_6d: \""},
{"lineNum":"  151","line":"                \"cannot populate bunches that has already lost particles.\" );"},
{"lineNum":"  152","line":"    }"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"    karray1d limits(\"limits\", 6);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  155","line":"    for(int i=0; i<6; ++i) limits[i] = 0.0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"    populate_6d_truncated(dist, bunch, means, covariances, limits);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  158","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"void"},
{"lineNum":"  161","line":"populate_6d_truncated( Distribution & dist,"},
{"lineNum":"  162","line":"        Bunch & bunch,"},
{"lineNum":"  163","line":"        const_karray1d means,"},
{"lineNum":"  164","line":"        const_karray2d_row covariances,"},
{"lineNum":"  165","line":"        const_karray1d limits )"},
{"lineNum":"  166","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  167","line":"#if 0"},
{"lineNum":"  168","line":"    multi_array_assert_size(means, 6, \"populate_6d: means\");"},
{"lineNum":"  169","line":"    multi_array_assert_size(covariances, 6, 6, \"populate_6d: covariances\");"},
{"lineNum":"  170","line":"    multi_array_assert_size(limits, 6, \"populate_6d: limits\");"},
{"lineNum":"  171","line":"#endif"},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"    // deep copy from device to host"},
{"lineNum":"  174","line":"    bunch.checkout_particles();"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"    auto particles = bunch.get_host_particles();"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"    karray2d_row unit_covariances(\"unit_covariances\", 6, 6);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  179","line":"    karray1d zero_means(\"zero_means\", 6);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"    bool truncated(false);"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"    for (int i = 0; i < 6; ++i)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  184","line":"    {"},
{"lineNum":"  185","line":"        double n = limits[i];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"        if (n > 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  188","line":"        {"},
{"lineNum":"  189","line":"            truncated = true;"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"            double cutoff_integral ="},
{"lineNum":"  192","line":"                ( exp(-n*n/2.0) ) *","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  193","line":"                ( sqrt(pi) * exp(n*n/2.0) * erf(n/sqrt(2.0)) - sqrt(2.0)*n ) /","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  194","line":"                ( sqrt(pi) );"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"            unit_covariances(i, i) = 1.0 / (cutoff_integral * cutoff_integral);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  197","line":"        }"},
{"lineNum":"  198","line":"        else"},
{"lineNum":"  199","line":"        {"},
{"lineNum":"  200","line":"            unit_covariances(i, i) = 1.0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  201","line":"        }"},
{"lineNum":"  202","line":"    }"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"    int start = 0;"},
{"lineNum":"  205","line":"    int end = bunch.get_local_num();"},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"    fill_unit_6d(dist, particles, unit_covariances, start, end);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  208","line":""},
{"lineNum":"  209","line":"    if (truncated)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  210","line":"    {"},
{"lineNum":"  211","line":"        adjust_moments(bunch, zero_means, unit_covariances);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"        int iteration = 0;"},
{"lineNum":"  214","line":"        int total_num, local_num;"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"        strip_unit_6d(bunch, limits, total_num, local_num);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"        while (total_num < bunch.get_total_num())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  219","line":"        {"},
{"lineNum":"  220","line":"            ++iteration;"},
{"lineNum":"  221","line":"            const int max_iterations = 50;"},
{"lineNum":"  222","line":"            if (iteration > max_iterations) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  223","line":"                throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  224","line":"                        \"populate_6d_truncated: \""},
{"lineNum":"  225","line":"                        \"maximum number of truncation iterations exceeded. \""},
{"lineNum":"  226","line":"                        \"Algorithm known to fail ~< 2.5 sigma.\" );"},
{"lineNum":"  227","line":"            }"},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"            fill_unit_6d(dist, particles, unit_covariances, local_num, end);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  230","line":"            adjust_moments(bunch, zero_means, unit_covariances);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  231","line":"            strip_unit_6d(bunch, limits, total_num, local_num);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  232","line":"        }"},
{"lineNum":"  233","line":"    }"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"    adjust_moments(bunch, means, covariances);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"    // copy to device"},
{"lineNum":"  238","line":"    bunch.checkin_particles();"},
{"lineNum":"  239","line":""},
{"lineNum":"  240","line":"    // check"},
{"lineNum":"  241","line":"    bunch.check_pz2_positive();"},
{"lineNum":"  242","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"karray2d_row"},
{"lineNum":"  245","line":"get_correlation_matrix("},
{"lineNum":"  246","line":"        const_karray2d_row one_turn_map,"},
{"lineNum":"  247","line":"        double arms, double brms, double crms, double beta,"},
{"lineNum":"  248","line":"        std::array<int, 3> const& rms_index)"},
{"lineNum":"  249","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  250","line":""},
{"lineNum":"  251","line":"    for(int idx : rms_index)"},
{"lineNum":"  252","line":"    {"},
{"lineNum":"  253","line":"        if (idx<0 || idx>5)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  254","line":"            throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  255","line":"                    \"only valid rms indices (x=0, xp=1, y=2, \""},
{"lineNum":"  256","line":"                    \"yp=3, z=4, dpp=5) are allowed\");"},
{"lineNum":"  257","line":"    }"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"    karray2d_row correlation_matrix(\"corr_matrix\", 6, 6);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"    get_correlation_matrix_host(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  262","line":"            correlation_matrix.data(),"},
{"lineNum":"  263","line":"            one_turn_map.data(),"},
{"lineNum":"  264","line":"            arms, brms, crms, beta,"},
{"lineNum":"  265","line":"            rms_index);"},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"    return correlation_matrix;"},
{"lineNum":"  268","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"void"},
{"lineNum":"  272","line":"populate_transverse_gaussian("},
{"lineNum":"  273","line":"        Distribution& dist,"},
{"lineNum":"  274","line":"        Bunch& bunch,"},
{"lineNum":"  275","line":"        const_karray1d means,"},
{"lineNum":"  276","line":"        const_karray2d_row covariances,"},
{"lineNum":"  277","line":"        double cdt)"},
{"lineNum":"  278","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  279","line":"    // deep copy from device to host"},
{"lineNum":"  280","line":"    bunch.checkout_particles();"},
{"lineNum":"  281","line":"    auto particles = bunch.get_host_particles();"},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"    for(int i=0; i<4; ++i)"},
{"lineNum":"  284","line":"    {"},
{"lineNum":"  285","line":"        for(int p=0; p<bunch.size(); ++p)","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  286","line":"            particles(p, i) = dist.get_unit_gaussian();","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  287","line":"    }"},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"    // cdt"},
{"lineNum":"  290","line":"    for(int p=0; p<bunch.size(); ++p)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  291","line":"        particles(p, 4) = dist.get_uniform(0.0, 1.0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"    // dpop"},
{"lineNum":"  294","line":"    for(int p=0; p<bunch.size(); ++p)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  295","line":"        particles(p, 5) = dist.get_unit_gaussian();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  296","line":""},
{"lineNum":"  297","line":"    // copy of original means and covariances"},
{"lineNum":"  298","line":"    karray1d means_modified = means;"},
{"lineNum":"  299","line":"    karray2d_row covariances_modified = covariances;"},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"    Kokkos::deep_copy(means_modified, means);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  302","line":"    Kokkos::deep_copy(covariances_modified, covariances);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  303","line":""},
{"lineNum":"  304","line":"    means_modified[4] = 0.0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"    // Symmetry requires no correlations with the cdt coordinate. Make a copy"},
{"lineNum":"  307","line":"    // of the covariance matrix and manually set all correlations to zero."},
{"lineNum":"  308","line":"    for (int k = 0; k < 6; ++k)"},
{"lineNum":"  309","line":"        covariances_modified(k, 4) = covariances_modified(4, k) = 0.0;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  310","line":""},
{"lineNum":"  311","line":"    covariances_modified(4, 4) = cdt*cdt/12.0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  312","line":"    adjust_moments(bunch, means_modified, covariances_modified);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  313","line":""},
{"lineNum":"  314","line":"    // copy to device"},
{"lineNum":"  315","line":"    bunch.checkin_particles();"},
{"lineNum":"  316","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  317","line":""},
{"lineNum":"  318","line":"#if 0"},
{"lineNum":"  319","line":"void"},
{"lineNum":"  320","line":"populate_uniform_cylinder(Distribution &dist, Bunch &bunch, double radius,"},
{"lineNum":"  321","line":"        double cdt, double stdxp, double stdyp, double stddpop)"},
{"lineNum":"  322","line":"{"},
{"lineNum":"  323","line":"    MArray2d_ref particles(bunch.get_local_particles());"},
{"lineNum":"  324","line":"    dist.fill_unit_disk(particles[boost::indices[range()][Bunch::x]],"},
{"lineNum":"  325","line":"            particles[boost::indices[range()][Bunch::y]]);"},
{"lineNum":"  326","line":"    dist.fill_uniform(particles[boost::indices[range()][Bunch::cdt]], -cdt"},
{"lineNum":"  327","line":"            / 2.0, cdt / 2.0);"},
{"lineNum":"  328","line":"    dist.fill_unit_gaussian(particles[boost::indices[range()][Bunch::xp]]);"},
{"lineNum":"  329","line":"    dist.fill_unit_gaussian(particles[boost::indices[range()][Bunch::yp]]);"},
{"lineNum":"  330","line":"    dist.fill_unit_gaussian(particles[boost::indices[range()][Bunch::dpop]]);"},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"    for (int part = 0; part < bunch.get_local_num(); ++part) {"},
{"lineNum":"  333","line":"        particles[part][Bunch::x] *= radius;"},
{"lineNum":"  334","line":"        particles[part][Bunch::y] *= radius;"},
{"lineNum":"  335","line":"        particles[part][Bunch::xp] *= stdxp;"},
{"lineNum":"  336","line":"        particles[part][Bunch::yp] *= stdyp;"},
{"lineNum":"  337","line":"        particles[part][Bunch::dpop] *= stddpop;"},
{"lineNum":"  338","line":"    }"},
{"lineNum":"  339","line":"}"},
{"lineNum":"  340","line":"void"},
{"lineNum":"  341","line":"populate_transverse_KV_GaussLong(Distribution &dist, Bunch &bunch, double epsilMax_x,"},
{"lineNum":"  342","line":"        double alpha_x, double beta_x, double epsilMax_y, double alpha_y, double beta_y,"},
{"lineNum":"  343","line":"        double cdt, double stddpop){"},
{"lineNum":"  344","line":"    MArray2d_ref particles(bunch.get_local_particles());"},
{"lineNum":"  345","line":"    for (int part = 0; part < bunch.get_local_num(); ++part) {"},
{"lineNum":"  346","line":"//"},
{"lineNum":"  347","line":"// First part: generate uniformally distributed on a hypershere, dim=4"},
{"lineNum":"  348","line":"// Algorith by marsaglia, found in the book by Wolfram,"},
{"lineNum":"  349","line":"// see  http://mathworld.wolfram.com/HyperspherePointPicking.html"},
{"lineNum":"  350","line":"//"},
{"lineNum":"  351","line":"      double d12 = 2.;"},
{"lineNum":"  352","line":"      double x1 = 0.; double x2=0.;"},
{"lineNum":"  353","line":"// Pick first two points within a 2D circle, flat distribution"},
{"lineNum":"  354","line":"      while (d12 > 1.0) {"},
{"lineNum":"  355","line":"        x1 = 2.0*dist.get() - 1.0;"},
{"lineNum":"  356","line":"        x2 = 2.0*dist.get() - 1.0;"},
{"lineNum":"  357","line":"        d12 = std::sqrt(x1*x1 + x2*x2);"},
{"lineNum":"  358","line":"      }"},
{"lineNum":"  359","line":"// Two more"},
{"lineNum":"  360","line":"      double d34 = 2.;"},
{"lineNum":"  361","line":"      double x3 = 0.; double x4=0.;"},
{"lineNum":"  362","line":"      while (d34 > 1.0) {"},
{"lineNum":"  363","line":"        x3 = 2.0*dist.get() - 1.0;"},
{"lineNum":"  364","line":"        x4 = 2.0*dist.get() - 1.0;"},
{"lineNum":"  365","line":"        d34 = std::sqrt(x3*x3 + x4*x4);"},
{"lineNum":"  366","line":"      }"},
{"lineNum":"  367","line":"// The 4 points on the 4-sphere are x1, x2, z, w"},
{"lineNum":"  368","line":"      const double z = x3 * std::sqrt((1.0 - x1*x1 - x2*x2)/(x3*x3 + x4*x4));"},
{"lineNum":"  369","line":"      const double w = x4 * std::sqrt((1.0 - x1*x1 - x2*x2)/(x3*x3 + x4*x4));"},
{"lineNum":"  370","line":"// Now move from normal coordinate to physical using lattice functios"},
{"lineNum":"  371","line":"      const double phi2X = std::atan2(x2,x1);"},
{"lineNum":"  372","line":"      // 4.0 is factor for x rms of uniform circular distribution"},
{"lineNum":"  373","line":"      const double a2X = std::sqrt((x1*x1 + x2*x2) * 4.0 * epsilMax_x*beta_x); // The amplitude.. X physical plane"},
{"lineNum":"  374","line":"      particles[part][Bunch::x] = a2X*std::sin(phi2X);"},
{"lineNum":"  375","line":"      particles[part][Bunch::xp] = (1.0/beta_x)*(a2X*std::cos(phi2X) - alpha_x*particles[part][Bunch::x]);"},
{"lineNum":"  376","line":"      //  Repeat in y,y\' plane"},
{"lineNum":"  377","line":"      const double phi2Y = std::atan2(w,z);"},
{"lineNum":"  378","line":"      const double a2Y = std::sqrt((w*w + z*z) * 4.0 * epsilMax_y*beta_y); // The amplitude.."},
{"lineNum":"  379","line":"      particles[part][Bunch::y] = a2Y*std::sin(phi2Y);"},
{"lineNum":"  380","line":"      particles[part][Bunch::yp] = (1.0/beta_y)*(a2Y*std::cos(phi2Y) - alpha_y*particles[part][Bunch::y]);"},
{"lineNum":"  381","line":"    }"},
{"lineNum":"  382","line":"    dist.fill_uniform(particles[boost::indices[range()][Bunch::cdt]], -cdt"},
{"lineNum":"  383","line":"            / 2.0, cdt / 2.0);"},
{"lineNum":"  384","line":"    dist.fill_unit_gaussian(particles[boost::indices[range()][Bunch::dpop]]);"},
{"lineNum":"  385","line":"    for (int part = 0; part < bunch.get_local_num(); ++part) particles[part][Bunch::dpop] *= stddpop;"},
{"lineNum":"  386","line":"}"},
{"lineNum":"  387","line":"void"},
{"lineNum":"  388","line":"populate_two_particles(Bunch &bunch,"},
{"lineNum":"  389","line":"         double p1x, double p1xp, double p1y, double p1yp, double p1cdt, double p1dpop,"},
{"lineNum":"  390","line":"         double p2x, double p2xp, double p2y, double p2yp, double p2cdt, double p2dpop) {"},
{"lineNum":"  391","line":"    MArray2d_ref particles(bunch.get_local_particles());"},
{"lineNum":"  392","line":"    if (bunch.get_local_num() !=2) {"},
{"lineNum":"  393","line":"        std::ostringstream errMsgStream; errMsgStream << \"Expecting only two particles when\""},
{"lineNum":"  394","line":"\t                                              << bunch.get_local_num() << \"generated\";"},
{"lineNum":"  395","line":"        std::string errMsg(errMsgStream.str());"},
{"lineNum":"  396","line":"        throw std::runtime_error(errMsg.c_str());"},
{"lineNum":"  397","line":"    }"},
{"lineNum":"  398","line":"    particles[0][Bunch::x] = p1x; particles[0][Bunch::xp] = p1xp;"},
{"lineNum":"  399","line":"    particles[0][Bunch::y] = p1y; particles[0][Bunch::yp] = p1yp;"},
{"lineNum":"  400","line":"    particles[0][Bunch::cdt] = p1cdt; particles[0][Bunch::dpop] = p1dpop;"},
{"lineNum":"  401","line":"    particles[1][Bunch::x] = p2x; particles[1][Bunch::xp] = p2xp;"},
{"lineNum":"  402","line":"    particles[1][Bunch::y] = p2y; particles[1][Bunch::yp] = p2yp;"},
{"lineNum":"  403","line":"    particles[1][Bunch::cdt] = p2cdt; particles[1][Bunch::dpop] = p2dpop;"},
{"lineNum":"  404","line":"}"},
{"lineNum":"  405","line":""},
{"lineNum":"  406","line":""},
{"lineNum":"  407","line":""},
{"lineNum":"  408","line":"void"},
{"lineNum":"  409","line":"populate_longitudinal_boxcar(Distribution &dist, Bunch &bunch,   Const_MArray2d_ref one_turn_map, double length)"},
{"lineNum":"  410","line":"{"},
{"lineNum":"  411","line":"/// the corelation between the longitudinal and the transverse plane is neglected"},
{"lineNum":"  412","line":""},
{"lineNum":"  413","line":"    double cosmu=0.5*(one_turn_map[Bunch::cdt][Bunch::cdt]+one_turn_map[Bunch::dpop][Bunch::dpop]);"},
{"lineNum":"  414","line":"    if (fabs(cosmu)>1.) throw std::runtime_error(\"longitudinal modes: cosmu larger than zero\");"},
{"lineNum":"  415","line":"    double sinmu=sqrt(1.-cosmu*cosmu);"},
{"lineNum":"  416","line":"    double alpha_z=(one_turn_map[Bunch::cdt][Bunch::cdt]-cosmu)/sinmu;"},
{"lineNum":"  417","line":"    double beta_z=one_turn_map[Bunch::cdt][Bunch::dpop]/sinmu;"},
{"lineNum":"  418","line":""},
{"lineNum":"  419","line":"    MArray2d_ref particles(bunch.get_local_particles());"},
{"lineNum":"  420","line":"    int num_part = particles.shape()[0];"},
{"lineNum":"  421","line":"    dist.fill_uniform(particles[boost::indices[range()][Bunch::dpop]], 0.0, 2.0*mconstants::pi);"},
{"lineNum":"  422","line":"    dist.fill_uniform(particles[boost::indices[range()][Bunch::cdt]], 0.0, 1.0);"},
{"lineNum":"  423","line":"    for (int part = 0; part < num_part; ++part) {"},
{"lineNum":"  424","line":"        double radius=length*sqrt(particles[part][Bunch::cdt]*(2.0-particles[part][Bunch::cdt]));"},
{"lineNum":"  425","line":"        double phase=particles[part][Bunch::dpop];"},
{"lineNum":"  426","line":"        particles[part][Bunch::cdt]=radius*cos(phase);"},
{"lineNum":"  427","line":"        particles[part][Bunch::dpop]=-radius*(sin(phase)+alpha_z*cos(phase))/beta_z;"},
{"lineNum":"  428","line":"    }"},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":"}"},
{"lineNum":"  431","line":""},
{"lineNum":"  432","line":"void"},
{"lineNum":"  433","line":"populate_longitudinal_uniform(Distribution &dist, Bunch &bunch,   double length)"},
{"lineNum":"  434","line":"{"},
{"lineNum":"  435","line":"    double half_length=0.5*length/bunch.get_reference_particle().get_beta();"},
{"lineNum":"  436","line":"    MArray2d_ref particles(bunch.get_local_particles());"},
{"lineNum":"  437","line":"    int num_part = particles.shape()[0];"},
{"lineNum":"  438","line":"    dist.fill_uniform(particles[boost::indices[range()][Bunch::cdt]], -half_length, half_length);"},
{"lineNum":"  439","line":""},
{"lineNum":"  440","line":"}"},
{"lineNum":"  441","line":""},
{"lineNum":"  442","line":"void"},
{"lineNum":"  443","line":"populate_transverseKV_logitudinalGaussian(Distribution &dist, Bunch &bunch,   Const_MArray2d_ref one_turn_map,"},
{"lineNum":"  444","line":"                             double radiusx,  double radiusy,    double ctrms)"},
{"lineNum":"  445","line":""},
{"lineNum":"  446","line":"{"},
{"lineNum":"  447","line":""},
{"lineNum":"  448","line":"// generates transversally a beam with radii radiusx and radiusy"},
{"lineNum":"  449","line":"// the transverse standard deviations will be xrms=radiusx/2,  yrms=radiusy/2"},
{"lineNum":"  450","line":"// valid for uncoupled linear maps"},
{"lineNum":"  451","line":""},
{"lineNum":"  452","line":"   double  cosmu=0.5*(one_turn_map[0][0]+one_turn_map[1][1]);"},
{"lineNum":"  453","line":"   if (fabs(cosmu)>1.) throw std::runtime_error(\"populate KV alpha_x: cosmu larger than zero\");"},
{"lineNum":"  454","line":"   double sinmu=sqrt(1.-cosmu*cosmu);"},
{"lineNum":"  455","line":"   double alpha_x=(one_turn_map[0][0]-cosmu)/sinmu;"},
{"lineNum":"  456","line":"   double   beta_x=one_turn_map[0][1]/sinmu;"},
{"lineNum":"  457","line":""},
{"lineNum":"  458","line":"   cosmu=0.5*(one_turn_map[2][2]+one_turn_map[3][3]);"},
{"lineNum":"  459","line":"   if (fabs(cosmu)>1.) throw std::runtime_error(\"populate KV alpha_y: cosmu larger than zero\");"},
{"lineNum":"  460","line":"   sinmu=sqrt(1.-cosmu*cosmu);"},
{"lineNum":"  461","line":"   double alpha_y=(one_turn_map[2][2]-cosmu)/sinmu;"},
{"lineNum":"  462","line":"   double beta_y=one_turn_map[2][3]/sinmu;"},
{"lineNum":"  463","line":""},
{"lineNum":"  464","line":"   cosmu=0.5*(one_turn_map[4][4]+one_turn_map[5][5]);"},
{"lineNum":"  465","line":"   if (fabs(cosmu)>1.) throw std::runtime_error(\"populate KV alpha_z: cosmu larger than zero\");"},
{"lineNum":"  466","line":"   sinmu=sqrt(1.-cosmu*cosmu);"},
{"lineNum":"  467","line":"   double alpha_z=(one_turn_map[4][4]-cosmu)/sinmu;"},
{"lineNum":"  468","line":"   double beta_z=one_turn_map[4][5]/sinmu;"},
{"lineNum":"  469","line":""},
{"lineNum":"  470","line":""},
{"lineNum":"  471","line":""},
{"lineNum":"  472","line":"   MArray2d_ref particles(bunch.get_local_particles());"},
{"lineNum":"  473","line":"   int num_part = particles.shape()[0];"},
{"lineNum":"  474","line":"// generate 6 gaussian distributions"},
{"lineNum":"  475","line":"   dist.fill_unit_gaussian(particles[boost::indices[range()][Bunch::x]]);"},
{"lineNum":"  476","line":"   dist.fill_unit_gaussian(particles[boost::indices[range()][Bunch::xp]]);"},
{"lineNum":"  477","line":"   dist.fill_unit_gaussian(particles[boost::indices[range()][Bunch::y]]);"},
{"lineNum":"  478","line":"   dist.fill_unit_gaussian(particles[boost::indices[range()][Bunch::yp]]);"},
{"lineNum":"  479","line":"   dist.fill_unit_gaussian(particles[boost::indices[range()][Bunch::z]]);"},
{"lineNum":"  480","line":"   dist.fill_unit_gaussian(particles[boost::indices[range()][Bunch::zp]]);"},
{"lineNum":"  481","line":"   for (int part = 0; part < num_part; ++part) {"},
{"lineNum":"  482","line":"      double r=sqrt( particles[part][Bunch::x]*particles[part][Bunch::x]+"},
{"lineNum":"  483","line":"             particles[part][Bunch::xp]*particles[part][Bunch::xp]+"},
{"lineNum":"  484","line":"             particles[part][Bunch::y]*particles[part][Bunch::y]+"},
{"lineNum":"  485","line":"             particles[part][Bunch::yp]*particles[part][Bunch::yp]   );"},
{"lineNum":"  486","line":"      //transverse distribution"},
{"lineNum":"  487","line":"      if (r>0.){"},
{"lineNum":"  488","line":"        particles[part][Bunch::x] *= radiusx/r;"},
{"lineNum":"  489","line":"        particles[part][Bunch::xp] ="},
{"lineNum":"  490","line":"              (radiusx*particles[part][Bunch::xp]/r-alpha_x*particles[part][Bunch::x])/beta_x;"},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":""},
{"lineNum":"  493","line":"        particles[part][Bunch::y] *= radiusy/r;"},
{"lineNum":"  494","line":"        particles[part][Bunch::yp]="},
{"lineNum":"  495","line":"          (radiusy*particles[part][Bunch::yp]/r-alpha_y*particles[part][Bunch::y])/beta_y;"},
{"lineNum":"  496","line":"      }"},
{"lineNum":"  497","line":"      else{ // very unlikely  case, what should be done???"},
{"lineNum":"  498","line":"        throw std::runtime_error("},
{"lineNum":"  499","line":"          \"generating KV fails, zero radius point for 4d sphere, need to be fixed, try different seed\");"},
{"lineNum":"  500","line":"      }"},
{"lineNum":"  501","line":"     // longitudinal distribution"},
{"lineNum":"  502","line":""},
{"lineNum":"  503","line":"     particles[part][Bunch::z]*= ctrms;"},
{"lineNum":"  504","line":"     particles[part][Bunch::zp]="},
{"lineNum":"  505","line":"           (ctrms*particles[part][Bunch::zp]-alpha_z*particles[part][Bunch::z])/beta_z;"},
{"lineNum":"  506","line":"  } //for part"},
{"lineNum":"  507","line":""},
{"lineNum":"  508","line":""},
{"lineNum":"  509","line":""},
{"lineNum":"  510","line":"}"},
{"lineNum":"  511","line":"#endif"},
{"lineNum":"  512","line":""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 83, "covered" : 0,};
var merged_data = [];
