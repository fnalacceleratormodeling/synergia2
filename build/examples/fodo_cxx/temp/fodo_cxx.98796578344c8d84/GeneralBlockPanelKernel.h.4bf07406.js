var data = {lines:[
{"lineNum":"    1","line":"// This file is part of Eigen, a lightweight C++ template library"},
{"lineNum":"    2","line":"// for linear algebra."},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Copyright (C) 2008-2009 Gael Guennebaud <gael.guennebaud@inria.fr>"},
{"lineNum":"    5","line":"//"},
{"lineNum":"    6","line":"// This Source Code Form is subject to the terms of the Mozilla"},
{"lineNum":"    7","line":"// Public License v. 2.0. If a copy of the MPL was not distributed"},
{"lineNum":"    8","line":"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/."},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef EIGEN_GENERAL_BLOCK_PANEL_H"},
{"lineNum":"   11","line":"#define EIGEN_GENERAL_BLOCK_PANEL_H"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"#include \"../InternalHeaderCheck.h\""},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"namespace Eigen {"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"namespace internal {"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"enum GEBPPacketSizeType {"},
{"lineNum":"   21","line":"  GEBPPacketFull = 0,"},
{"lineNum":"   22","line":"  GEBPPacketHalf,"},
{"lineNum":"   23","line":"  GEBPPacketQuarter"},
{"lineNum":"   24","line":"};"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"template<typename LhsScalar_, typename RhsScalar_, bool ConjLhs_=false, bool ConjRhs_=false, int Arch=Architecture::Target, int PacketSize_=GEBPPacketFull>"},
{"lineNum":"   27","line":"class gebp_traits;"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"/** \\internal \\returns b if a<=0, and returns a otherwise. */"},
{"lineNum":"   31","line":"inline std::ptrdiff_t manage_caching_sizes_helper(std::ptrdiff_t a, std::ptrdiff_t b)"},
{"lineNum":"   32","line":"{"},
{"lineNum":"   33","line":"  return a<=0 ? b : a;","class":"lineNoCov","hits":"0","possible_hits":"30",},
{"lineNum":"   34","line":"}"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"#if defined(EIGEN_DEFAULT_L1_CACHE_SIZE)"},
{"lineNum":"   37","line":"#define EIGEN_SET_DEFAULT_L1_CACHE_SIZE(val) EIGEN_DEFAULT_L1_CACHE_SIZE"},
{"lineNum":"   38","line":"#else"},
{"lineNum":"   39","line":"#define EIGEN_SET_DEFAULT_L1_CACHE_SIZE(val) val"},
{"lineNum":"   40","line":"#endif // defined(EIGEN_DEFAULT_L1_CACHE_SIZE)"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"#if defined(EIGEN_DEFAULT_L2_CACHE_SIZE)"},
{"lineNum":"   43","line":"#define EIGEN_SET_DEFAULT_L2_CACHE_SIZE(val) EIGEN_DEFAULT_L2_CACHE_SIZE"},
{"lineNum":"   44","line":"#else"},
{"lineNum":"   45","line":"#define EIGEN_SET_DEFAULT_L2_CACHE_SIZE(val) val"},
{"lineNum":"   46","line":"#endif // defined(EIGEN_DEFAULT_L2_CACHE_SIZE)"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"#if defined(EIGEN_DEFAULT_L3_CACHE_SIZE)"},
{"lineNum":"   49","line":"#define EIGEN_SET_DEFAULT_L3_CACHE_SIZE(val) EIGEN_DEFAULT_L3_CACHE_SIZE"},
{"lineNum":"   50","line":"#else"},
{"lineNum":"   51","line":"#define EIGEN_SET_DEFAULT_L3_CACHE_SIZE(val) val"},
{"lineNum":"   52","line":"#endif // defined(EIGEN_DEFAULT_L3_CACHE_SIZE)"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"#if EIGEN_ARCH_i386_OR_x86_64"},
{"lineNum":"   55","line":"const std::ptrdiff_t defaultL1CacheSize = EIGEN_SET_DEFAULT_L1_CACHE_SIZE(32*1024);"},
{"lineNum":"   56","line":"const std::ptrdiff_t defaultL2CacheSize = EIGEN_SET_DEFAULT_L2_CACHE_SIZE(256*1024);"},
{"lineNum":"   57","line":"const std::ptrdiff_t defaultL3CacheSize = EIGEN_SET_DEFAULT_L3_CACHE_SIZE(2*1024*1024);"},
{"lineNum":"   58","line":"#elif EIGEN_ARCH_PPC"},
{"lineNum":"   59","line":"const std::ptrdiff_t defaultL1CacheSize = EIGEN_SET_DEFAULT_L1_CACHE_SIZE(64*1024);"},
{"lineNum":"   60","line":"const std::ptrdiff_t defaultL2CacheSize = EIGEN_SET_DEFAULT_L2_CACHE_SIZE(512*1024);"},
{"lineNum":"   61","line":"const std::ptrdiff_t defaultL3CacheSize = EIGEN_SET_DEFAULT_L3_CACHE_SIZE(4*1024*1024);"},
{"lineNum":"   62","line":"#else"},
{"lineNum":"   63","line":"const std::ptrdiff_t defaultL1CacheSize = EIGEN_SET_DEFAULT_L1_CACHE_SIZE(16*1024);"},
{"lineNum":"   64","line":"const std::ptrdiff_t defaultL2CacheSize = EIGEN_SET_DEFAULT_L2_CACHE_SIZE(512*1024);"},
{"lineNum":"   65","line":"const std::ptrdiff_t defaultL3CacheSize = EIGEN_SET_DEFAULT_L3_CACHE_SIZE(512*1024);"},
{"lineNum":"   66","line":"#endif"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"#undef EIGEN_SET_DEFAULT_L1_CACHE_SIZE"},
{"lineNum":"   69","line":"#undef EIGEN_SET_DEFAULT_L2_CACHE_SIZE"},
{"lineNum":"   70","line":"#undef EIGEN_SET_DEFAULT_L3_CACHE_SIZE"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"/** \\internal */"},
{"lineNum":"   73","line":"struct CacheSizes {"},
{"lineNum":"   74","line":"  CacheSizes(): m_l1(-1),m_l2(-1),m_l3(-1) {","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"   75","line":"    int l1CacheSize, l2CacheSize, l3CacheSize;"},
{"lineNum":"   76","line":"    queryCacheSizes(l1CacheSize, l2CacheSize, l3CacheSize);","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"   77","line":"    m_l1 = manage_caching_sizes_helper(l1CacheSize, defaultL1CacheSize);","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"   78","line":"    m_l2 = manage_caching_sizes_helper(l2CacheSize, defaultL2CacheSize);","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"   79","line":"    m_l3 = manage_caching_sizes_helper(l3CacheSize, defaultL3CacheSize);","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"   80","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"  std::ptrdiff_t m_l1;"},
{"lineNum":"   83","line":"  std::ptrdiff_t m_l2;"},
{"lineNum":"   84","line":"  std::ptrdiff_t m_l3;"},
{"lineNum":"   85","line":"};"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"/** \\internal */"},
{"lineNum":"   88","line":"inline void manage_caching_sizes(Action action, std::ptrdiff_t* l1, std::ptrdiff_t* l2, std::ptrdiff_t* l3)"},
{"lineNum":"   89","line":"{"},
{"lineNum":"   90","line":"  static CacheSizes m_cacheSizes;","class":"lineNoCov","hits":"0","possible_hits":"44",},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"  if(action==SetAction)"},
{"lineNum":"   93","line":"  {"},
{"lineNum":"   94","line":"    // set the cpu cache size and cache all block sizes from a global cache size in byte"},
{"lineNum":"   95","line":"    eigen_internal_assert(l1!=0 && l2!=0);"},
{"lineNum":"   96","line":"    m_cacheSizes.m_l1 = *l1;"},
{"lineNum":"   97","line":"    m_cacheSizes.m_l2 = *l2;"},
{"lineNum":"   98","line":"    m_cacheSizes.m_l3 = *l3;"},
{"lineNum":"   99","line":"  }"},
{"lineNum":"  100","line":"  else if(action==GetAction)"},
{"lineNum":"  101","line":"  {"},
{"lineNum":"  102","line":"    eigen_internal_assert(l1!=0 && l2!=0);"},
{"lineNum":"  103","line":"    *l1 = m_cacheSizes.m_l1;"},
{"lineNum":"  104","line":"    *l2 = m_cacheSizes.m_l2;"},
{"lineNum":"  105","line":"    *l3 = m_cacheSizes.m_l3;"},
{"lineNum":"  106","line":"  }"},
{"lineNum":"  107","line":"  else"},
{"lineNum":"  108","line":"  {"},
{"lineNum":"  109","line":"    eigen_internal_assert(false);"},
{"lineNum":"  110","line":"  }"},
{"lineNum":"  111","line":"}"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"/* Helper for computeProductBlockingSizes."},
{"lineNum":"  114","line":" *"},
{"lineNum":"  115","line":" * Given a m x k times k x n matrix product of scalar types \\c LhsScalar and \\c RhsScalar,"},
{"lineNum":"  116","line":" * this function computes the blocking size parameters along the respective dimensions"},
{"lineNum":"  117","line":" * for matrix products and related algorithms. The blocking sizes depends on various"},
{"lineNum":"  118","line":" * parameters:"},
{"lineNum":"  119","line":" * - the L1 and L2 cache sizes,"},
{"lineNum":"  120","line":" * - the register level blocking sizes defined by gebp_traits,"},
{"lineNum":"  121","line":" * - the number of scalars that fit into a packet (when vectorization is enabled)."},
{"lineNum":"  122","line":" *"},
{"lineNum":"  123","line":" * \\sa setCpuCacheSizes */"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"template<typename LhsScalar, typename RhsScalar, int KcFactor, typename Index>"},
{"lineNum":"  126","line":"void evaluateProductBlockingSizesHeuristic(Index& k, Index& m, Index& n, Index num_threads = 1)"},
{"lineNum":"  127","line":"{","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  128","line":"  typedef gebp_traits<LhsScalar,RhsScalar> Traits;"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"  // Explanations:"},
{"lineNum":"  131","line":"  // Let\'s recall that the product algorithms form mc x kc vertical panels A\' on the lhs and"},
{"lineNum":"  132","line":"  // kc x nc blocks B\' on the rhs. B\' has to fit into L2/L3 cache. Moreover, A\' is processed"},
{"lineNum":"  133","line":"  // per mr x kc horizontal small panels where mr is the blocking size along the m dimension"},
{"lineNum":"  134","line":"  // at the register level. This small horizontal panel has to stay within L1 cache."},
{"lineNum":"  135","line":"  std::ptrdiff_t l1, l2, l3;"},
{"lineNum":"  136","line":"  manage_caching_sizes(GetAction, &l1, &l2, &l3);"},
{"lineNum":"  137","line":"  #ifdef EIGEN_VECTORIZE_AVX512"},
{"lineNum":"  138","line":"  // We need to find a rationale for that, but without this adjustment,"},
{"lineNum":"  139","line":"  // performance with AVX512 is pretty bad, like -20% slower."},
{"lineNum":"  140","line":"  // One reason is that with increasing packet-size, the blocking size k"},
{"lineNum":"  141","line":"  // has to become pretty small if we want that 1 lhs panel fit within L1."},
{"lineNum":"  142","line":"  // For instance, with the 3pX4 kernel and double, the size of the lhs+rhs panels are:"},
{"lineNum":"  143","line":"  //   k*(3*64 + 4*8) Bytes, with l1=32kBytes, and k%8=0, we have k=144."},
{"lineNum":"  144","line":"  // This is quite small for a good reuse of the accumulation registers."},
{"lineNum":"  145","line":"  l1 *= 4;"},
{"lineNum":"  146","line":"  #endif"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"  if (num_threads > 1) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  149","line":"    typedef typename Traits::ResScalar ResScalar;"},
{"lineNum":"  150","line":"    enum {"},
{"lineNum":"  151","line":"      kdiv = KcFactor * (Traits::mr * sizeof(LhsScalar) + Traits::nr * sizeof(RhsScalar)),"},
{"lineNum":"  152","line":"      ksub = Traits::mr * Traits::nr * sizeof(ResScalar),"},
{"lineNum":"  153","line":"      kr = 8,"},
{"lineNum":"  154","line":"      mr = Traits::mr,"},
{"lineNum":"  155","line":"      nr = Traits::nr"},
{"lineNum":"  156","line":"    };"},
{"lineNum":"  157","line":"    // Increasing k gives us more time to prefetch the content of the \"C\""},
{"lineNum":"  158","line":"    // registers. However once the latency is hidden there is no point in"},
{"lineNum":"  159","line":"    // increasing the value of k, so we\'ll cap it at 320 (value determined"},
{"lineNum":"  160","line":"    // experimentally)."},
{"lineNum":"  161","line":"    // To avoid that k vanishes, we make k_cache at least as big as kr"},
{"lineNum":"  162","line":"    const Index k_cache = numext::maxi<Index>(kr, (numext::mini<Index>)((l1-ksub)/kdiv, 320));","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  163","line":"    if (k_cache < k) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  164","line":"      k = k_cache - (k_cache % kr);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  165","line":"      eigen_internal_assert(k > 0);"},
{"lineNum":"  166","line":"    }"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"    const Index n_cache = (l2-l1) / (nr * sizeof(RhsScalar) * k);","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  169","line":"    const Index n_per_thread = numext::div_ceil(n, num_threads);"},
{"lineNum":"  170","line":"    if (n_cache <= n_per_thread) {","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  171","line":"      // Don\'t exceed the capacity of the l2 cache."},
{"lineNum":"  172","line":"      eigen_internal_assert(n_cache >= static_cast<Index>(nr));"},
{"lineNum":"  173","line":"      n = n_cache - (n_cache % nr);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  174","line":"      eigen_internal_assert(n > 0);"},
{"lineNum":"  175","line":"    } else {"},
{"lineNum":"  176","line":"      n = (numext::mini<Index>)(n, (n_per_thread + nr - 1) - ((n_per_thread + nr - 1) % nr));","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  177","line":"    }"},
{"lineNum":"  178","line":""},
{"lineNum":"  179","line":"    if (l3 > l2) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  180","line":"      // l3 is shared between all cores, so we\'ll give each thread its own chunk of l3."},
{"lineNum":"  181","line":"      const Index m_cache = (l3-l2) / (sizeof(LhsScalar) * k * num_threads);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  182","line":"      const Index m_per_thread = numext::div_ceil(m, num_threads);"},
{"lineNum":"  183","line":"      if(m_cache < m_per_thread && m_cache >= static_cast<Index>(mr)) {","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  184","line":"        m = m_cache - (m_cache % mr);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  185","line":"        eigen_internal_assert(m > 0);"},
{"lineNum":"  186","line":"      } else {"},
{"lineNum":"  187","line":"        m = (numext::mini<Index>)(m, (m_per_thread + mr - 1) - ((m_per_thread + mr - 1) % mr));","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  188","line":"      }"},
{"lineNum":"  189","line":"    }"},
{"lineNum":"  190","line":"  }"},
{"lineNum":"  191","line":"  else {"},
{"lineNum":"  192","line":"    // In unit tests we do not want to use extra large matrices,"},
{"lineNum":"  193","line":"    // so we reduce the cache size to check the blocking strategy is not flawed"},
{"lineNum":"  194","line":"#ifdef EIGEN_DEBUG_SMALL_PRODUCT_BLOCKS"},
{"lineNum":"  195","line":"    l1 = 9*1024;"},
{"lineNum":"  196","line":"    l2 = 32*1024;"},
{"lineNum":"  197","line":"    l3 = 512*1024;"},
{"lineNum":"  198","line":"#endif"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"    // Early return for small problems because the computation below are time consuming for small problems."},
{"lineNum":"  201","line":"    // Perhaps it would make more sense to consider k*n*m??"},
{"lineNum":"  202","line":"    // Note that for very tiny problem, this function should be bypassed anyway"},
{"lineNum":"  203","line":"    // because we use the coefficient-based implementation for them."},
{"lineNum":"  204","line":"    if((numext::maxi)(k,(numext::maxi)(m,n))<48)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  205","line":"      return;"},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"    typedef typename Traits::ResScalar ResScalar;"},
{"lineNum":"  208","line":"    enum {"},
{"lineNum":"  209","line":"      k_peeling = 8,"},
{"lineNum":"  210","line":"      k_div = KcFactor * (Traits::mr * sizeof(LhsScalar) + Traits::nr * sizeof(RhsScalar)),"},
{"lineNum":"  211","line":"      k_sub = Traits::mr * Traits::nr * sizeof(ResScalar)"},
{"lineNum":"  212","line":"    };"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"    // ---- 1st level of blocking on L1, yields kc ----"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"    // Blocking on the third dimension (i.e., k) is chosen so that an horizontal panel"},
{"lineNum":"  217","line":"    // of size mr x kc of the lhs plus a vertical panel of kc x nr of the rhs both fits within L1 cache."},
{"lineNum":"  218","line":"    // We also include a register-level block of the result (mx x nr)."},
{"lineNum":"  219","line":"    // (In an ideal world only the lhs panel would stay in L1)"},
{"lineNum":"  220","line":"    // Moreover, kc has to be a multiple of 8 to be compatible with loop peeling, leading to a maximum blocking size of:"},
{"lineNum":"  221","line":"    const Index max_kc = numext::maxi<Index>(((l1-k_sub)/k_div) & (~(k_peeling-1)),1);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  222","line":"    const Index old_k = k;"},
{"lineNum":"  223","line":"    if(k>max_kc)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  224","line":"    {"},
{"lineNum":"  225","line":"      // We are really blocking on the third dimension:"},
{"lineNum":"  226","line":"      // -> reduce blocking size to make sure the last block is as large as possible"},
{"lineNum":"  227","line":"      //    while keeping the same number of sweeps over the result."},
{"lineNum":"  228","line":"      k = (k%max_kc)==0 ? max_kc","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  229","line":"                        : max_kc - k_peeling * ((max_kc-1-(k%max_kc))/(k_peeling*(k/max_kc+1)));","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"      eigen_internal_assert(((old_k/k) == (old_k/max_kc)) && \"the number of sweeps has to remain the same\");"},
{"lineNum":"  232","line":"    }"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"    // ---- 2nd level of blocking on max(L2,L3), yields nc ----"},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":"    // TODO find a reliable way to get the actual amount of cache per core to use for 2nd level blocking, that is:"},
{"lineNum":"  237","line":"    //      actual_l2 = max(l2, l3/nb_core_sharing_l3)"},
{"lineNum":"  238","line":"    // The number below is quite conservative: it is better to underestimate the cache size rather than overestimating it)"},
{"lineNum":"  239","line":"    // For instance, it corresponds to 6MB of L3 shared among 4 cores."},
{"lineNum":"  240","line":"    #ifdef EIGEN_DEBUG_SMALL_PRODUCT_BLOCKS"},
{"lineNum":"  241","line":"    const Index actual_l2 = l3;"},
{"lineNum":"  242","line":"    #else"},
{"lineNum":"  243","line":"    const Index actual_l2 = 1572864; // == 1.5 MB"},
{"lineNum":"  244","line":"    #endif"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"    // Here, nc is chosen such that a block of kc x nc of the rhs fit within half of L2."},
{"lineNum":"  247","line":"    // The second half is implicitly reserved to access the result and lhs coefficients."},
{"lineNum":"  248","line":"    // When k<max_kc, then nc can arbitrarily growth. In practice, it seems to be fruitful"},
{"lineNum":"  249","line":"    // to limit this growth: we bound nc to growth by a factor x1.5."},
{"lineNum":"  250","line":"    // However, if the entire lhs block fit within L1, then we are not going to block on the rows at all,"},
{"lineNum":"  251","line":"    // and it becomes fruitful to keep the packed rhs blocks in L1 if there is enough remaining space."},
{"lineNum":"  252","line":"    Index max_nc;"},
{"lineNum":"  253","line":"    const Index lhs_bytes = m * k * sizeof(LhsScalar);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  254","line":"    const Index remaining_l1 = l1- k_sub - lhs_bytes;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  255","line":"    if(remaining_l1 >= Index(Traits::nr*sizeof(RhsScalar))*k)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  256","line":"    {"},
{"lineNum":"  257","line":"      // L1 blocking"},
{"lineNum":"  258","line":"      max_nc = remaining_l1 / (k*sizeof(RhsScalar));","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  259","line":"    }"},
{"lineNum":"  260","line":"    else"},
{"lineNum":"  261","line":"    {"},
{"lineNum":"  262","line":"      // L2 blocking"},
{"lineNum":"  263","line":"      max_nc = (3*actual_l2)/(2*2*max_kc*sizeof(RhsScalar));","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  264","line":"    }"},
{"lineNum":"  265","line":"    // WARNING Below, we assume that Traits::nr is a power of two."},
{"lineNum":"  266","line":"    Index nc = numext::mini<Index>(actual_l2/(2*k*sizeof(RhsScalar)), max_nc) & (~(Traits::nr-1));","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  267","line":"    if(n>nc)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  268","line":"    {"},
{"lineNum":"  269","line":"      // We are really blocking over the columns:"},
{"lineNum":"  270","line":"      // -> reduce blocking size to make sure the last block is as large as possible"},
{"lineNum":"  271","line":"      //    while keeping the same number of sweeps over the packed lhs."},
{"lineNum":"  272","line":"      //    Here we allow one more sweep if this gives us a perfect match, thus the commented \"-1\""},
{"lineNum":"  273","line":"      n = (n%nc)==0 ? nc","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  274","line":"                    : (nc - Traits::nr * ((nc/*-1*/-(n%nc))/(Traits::nr*(n/nc+1))));","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  275","line":"    }"},
{"lineNum":"  276","line":"    else if(old_k==k)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  277","line":"    {"},
{"lineNum":"  278","line":"      // So far, no blocking at all, i.e., kc==k, and nc==n."},
{"lineNum":"  279","line":"      // In this case, let\'s perform a blocking over the rows such that the packed lhs data is kept in cache L1/L2"},
{"lineNum":"  280","line":"      // TODO: part of this blocking strategy is now implemented within the kernel itself, so the L1-based heuristic here should be obsolete."},
{"lineNum":"  281","line":"      Index problem_size = k*n*sizeof(LhsScalar);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  282","line":"      Index actual_lm = actual_l2;"},
{"lineNum":"  283","line":"      Index max_mc = m;"},
{"lineNum":"  284","line":"      if(problem_size<=1024)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  285","line":"      {"},
{"lineNum":"  286","line":"        // problem is small enough to keep in L1"},
{"lineNum":"  287","line":"        // Let\'s choose m such that lhs\'s block fit in 1/3 of L1"},
{"lineNum":"  288","line":"        actual_lm = l1;"},
{"lineNum":"  289","line":"      }"},
{"lineNum":"  290","line":"      else if(l3!=0 && problem_size<=32768)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  291","line":"      {"},
{"lineNum":"  292","line":"        // we have both L2 and L3, and problem is small enough to be kept in L2"},
{"lineNum":"  293","line":"        // Let\'s choose m such that lhs\'s block fit in 1/3 of L2"},
{"lineNum":"  294","line":"        actual_lm = l2;"},
{"lineNum":"  295","line":"        max_mc = (numext::mini<Index>)(576,max_mc);"},
{"lineNum":"  296","line":"      }"},
{"lineNum":"  297","line":"      Index mc = (numext::mini<Index>)(actual_lm/(3*k*sizeof(LhsScalar)), max_mc);","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  298","line":"      if (mc > Traits::mr) mc -= mc % Traits::mr;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  299","line":"      else if (mc==0) return;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  300","line":"      m = (m%mc)==0 ? mc","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  301","line":"                    : (mc - Traits::mr * ((mc/*-1*/-(m%mc))/(Traits::mr*(m/mc+1))));","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  302","line":"    }"},
{"lineNum":"  303","line":"  }"},
{"lineNum":"  304","line":"}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"template <typename Index>"},
{"lineNum":"  307","line":"inline bool useSpecificBlockingSizes(Index& k, Index& m, Index& n)"},
{"lineNum":"  308","line":"{"},
{"lineNum":"  309","line":"#ifdef EIGEN_TEST_SPECIFIC_BLOCKING_SIZES"},
{"lineNum":"  310","line":"  if (EIGEN_TEST_SPECIFIC_BLOCKING_SIZES) {"},
{"lineNum":"  311","line":"    k = numext::mini<Index>(k, EIGEN_TEST_SPECIFIC_BLOCKING_SIZE_K);"},
{"lineNum":"  312","line":"    m = numext::mini<Index>(m, EIGEN_TEST_SPECIFIC_BLOCKING_SIZE_M);"},
{"lineNum":"  313","line":"    n = numext::mini<Index>(n, EIGEN_TEST_SPECIFIC_BLOCKING_SIZE_N);"},
{"lineNum":"  314","line":"    return true;"},
{"lineNum":"  315","line":"  }"},
{"lineNum":"  316","line":"#else"},
{"lineNum":"  317","line":"  EIGEN_UNUSED_VARIABLE(k)"},
{"lineNum":"  318","line":"  EIGEN_UNUSED_VARIABLE(m)"},
{"lineNum":"  319","line":"  EIGEN_UNUSED_VARIABLE(n)"},
{"lineNum":"  320","line":"#endif"},
{"lineNum":"  321","line":"  return false;"},
{"lineNum":"  322","line":"}"},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"/** \\brief Computes the blocking parameters for a m x k times k x n matrix product"},
{"lineNum":"  325","line":"  *"},
{"lineNum":"  326","line":"  * \\param[in,out] k Input: the third dimension of the product. Output: the blocking size along the same dimension."},
{"lineNum":"  327","line":"  * \\param[in,out] m Input: the number of rows of the left hand side. Output: the blocking size along the same dimension."},
{"lineNum":"  328","line":"  * \\param[in,out] n Input: the number of columns of the right hand side. Output: the blocking size along the same dimension."},
{"lineNum":"  329","line":"  *"},
{"lineNum":"  330","line":"  * Given a m x k times k x n matrix product of scalar types \\c LhsScalar and \\c RhsScalar,"},
{"lineNum":"  331","line":"  * this function computes the blocking size parameters along the respective dimensions"},
{"lineNum":"  332","line":"  * for matrix products and related algorithms."},
{"lineNum":"  333","line":"  *"},
{"lineNum":"  334","line":"  * The blocking size parameters may be evaluated:"},
{"lineNum":"  335","line":"  *   - either by a heuristic based on cache sizes;"},
{"lineNum":"  336","line":"  *   - or using fixed prescribed values (for testing purposes)."},
{"lineNum":"  337","line":"  *"},
{"lineNum":"  338","line":"  * \\sa setCpuCacheSizes */"},
{"lineNum":"  339","line":""},
{"lineNum":"  340","line":"template<typename LhsScalar, typename RhsScalar, int KcFactor, typename Index>"},
{"lineNum":"  341","line":"void computeProductBlockingSizes(Index& k, Index& m, Index& n, Index num_threads = 1)"},
{"lineNum":"  342","line":"{"},
{"lineNum":"  343","line":"  if (!useSpecificBlockingSizes(k, m, n)) {"},
{"lineNum":"  344","line":"    evaluateProductBlockingSizesHeuristic<LhsScalar, RhsScalar, KcFactor, Index>(k, m, n, num_threads);","class":"lineNoCov","hits":"0","possible_hits":"34",},
{"lineNum":"  345","line":"  }"},
{"lineNum":"  346","line":"}"},
{"lineNum":"  347","line":""},
{"lineNum":"  348","line":"template<typename LhsScalar, typename RhsScalar, typename Index>"},
{"lineNum":"  349","line":"inline void computeProductBlockingSizes(Index& k, Index& m, Index& n, Index num_threads = 1)"},
{"lineNum":"  350","line":"{"},
{"lineNum":"  351","line":"  computeProductBlockingSizes<LhsScalar,RhsScalar,1,Index>(k, m, n, num_threads);"},
{"lineNum":"  352","line":"}"},
{"lineNum":"  353","line":""},
{"lineNum":"  354","line":"template <typename RhsPacket, typename RhsPacketx4, int registers_taken>"},
{"lineNum":"  355","line":"struct RhsPanelHelper {"},
{"lineNum":"  356","line":" private:"},
{"lineNum":"  357","line":"  static const int remaining_registers = EIGEN_ARCH_DEFAULT_NUMBER_OF_REGISTERS - registers_taken;"},
{"lineNum":"  358","line":" public:"},
{"lineNum":"  359","line":"  typedef typename conditional<remaining_registers>=4, RhsPacketx4, RhsPacket>::type type;"},
{"lineNum":"  360","line":"};"},
{"lineNum":"  361","line":""},
{"lineNum":"  362","line":"template <typename Packet>"},
{"lineNum":"  363","line":"struct QuadPacket"},
{"lineNum":"  364","line":"{"},
{"lineNum":"  365","line":"  Packet B_0, B1, B2, B3;"},
{"lineNum":"  366","line":"  const Packet& get(const FixedInt<0>&) const { return B_0; }"},
{"lineNum":"  367","line":"  const Packet& get(const FixedInt<1>&) const { return B1; }"},
{"lineNum":"  368","line":"  const Packet& get(const FixedInt<2>&) const { return B2; }"},
{"lineNum":"  369","line":"  const Packet& get(const FixedInt<3>&) const { return B3; }"},
{"lineNum":"  370","line":"};"},
{"lineNum":"  371","line":""},
{"lineNum":"  372","line":"template <int N, typename T1, typename T2, typename T3>"},
{"lineNum":"  373","line":"struct packet_conditional { typedef T3 type; };"},
{"lineNum":"  374","line":""},
{"lineNum":"  375","line":"template <typename T1, typename T2, typename T3>"},
{"lineNum":"  376","line":"struct packet_conditional<GEBPPacketFull, T1, T2, T3> { typedef T1 type; };"},
{"lineNum":"  377","line":""},
{"lineNum":"  378","line":"template <typename T1, typename T2, typename T3>"},
{"lineNum":"  379","line":"struct packet_conditional<GEBPPacketHalf, T1, T2, T3> { typedef T2 type; };"},
{"lineNum":"  380","line":""},
{"lineNum":"  381","line":"#define PACKET_DECL_COND_PREFIX(prefix, name, packet_size)         \\"},
{"lineNum":"  382","line":"  typedef typename packet_conditional<packet_size,                 \\"},
{"lineNum":"  383","line":"                                      typename packet_traits<name ## Scalar>::type, \\"},
{"lineNum":"  384","line":"                                      typename packet_traits<name ## Scalar>::half, \\"},
{"lineNum":"  385","line":"                                      typename unpacket_traits<typename packet_traits<name ## Scalar>::half>::half>::type \\"},
{"lineNum":"  386","line":"  prefix ## name ## Packet"},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"#define PACKET_DECL_COND(name, packet_size)                        \\"},
{"lineNum":"  389","line":"  typedef typename packet_conditional<packet_size,                 \\"},
{"lineNum":"  390","line":"                                      typename packet_traits<name ## Scalar>::type, \\"},
{"lineNum":"  391","line":"                                      typename packet_traits<name ## Scalar>::half, \\"},
{"lineNum":"  392","line":"                                      typename unpacket_traits<typename packet_traits<name ## Scalar>::half>::half>::type \\"},
{"lineNum":"  393","line":"  name ## Packet"},
{"lineNum":"  394","line":""},
{"lineNum":"  395","line":"#define PACKET_DECL_COND_SCALAR_PREFIX(prefix, packet_size)        \\"},
{"lineNum":"  396","line":"  typedef typename packet_conditional<packet_size,                 \\"},
{"lineNum":"  397","line":"                                      typename packet_traits<Scalar>::type, \\"},
{"lineNum":"  398","line":"                                      typename packet_traits<Scalar>::half, \\"},
{"lineNum":"  399","line":"                                      typename unpacket_traits<typename packet_traits<Scalar>::half>::half>::type \\"},
{"lineNum":"  400","line":"  prefix ## ScalarPacket"},
{"lineNum":"  401","line":""},
{"lineNum":"  402","line":"#define PACKET_DECL_COND_SCALAR(packet_size)                       \\"},
{"lineNum":"  403","line":"  typedef typename packet_conditional<packet_size,                 \\"},
{"lineNum":"  404","line":"                                      typename packet_traits<Scalar>::type, \\"},
{"lineNum":"  405","line":"                                      typename packet_traits<Scalar>::half, \\"},
{"lineNum":"  406","line":"                                      typename unpacket_traits<typename packet_traits<Scalar>::half>::half>::type \\"},
{"lineNum":"  407","line":"  ScalarPacket"},
{"lineNum":"  408","line":""},
{"lineNum":"  409","line":"/* Vectorization logic"},
{"lineNum":"  410","line":" *  real*real: unpack rhs to constant packets, ..."},
{"lineNum":"  411","line":" *"},
{"lineNum":"  412","line":" *  cd*cd : unpack rhs to (b_r,b_r), (b_i,b_i), mul to get (a_r b_r,a_i b_r) (a_r b_i,a_i b_i),"},
{"lineNum":"  413","line":" *          storing each res packet into two packets (2x2),"},
{"lineNum":"  414","line":" *          at the end combine them: swap the second and addsub them"},
{"lineNum":"  415","line":" *  cf*cf : same but with 2x4 blocks"},
{"lineNum":"  416","line":" *  cplx*real : unpack rhs to constant packets, ..."},
{"lineNum":"  417","line":" *  real*cplx : load lhs as (a0,a0,a1,a1), and mul as usual"},
{"lineNum":"  418","line":" */"},
{"lineNum":"  419","line":"template<typename LhsScalar_, typename RhsScalar_, bool ConjLhs_, bool ConjRhs_, int Arch, int PacketSize_>"},
{"lineNum":"  420","line":"class gebp_traits"},
{"lineNum":"  421","line":"{"},
{"lineNum":"  422","line":"public:"},
{"lineNum":"  423","line":"  typedef LhsScalar_ LhsScalar;"},
{"lineNum":"  424","line":"  typedef RhsScalar_ RhsScalar;"},
{"lineNum":"  425","line":"  typedef typename ScalarBinaryOpTraits<LhsScalar, RhsScalar>::ReturnType ResScalar;"},
{"lineNum":"  426","line":""},
{"lineNum":"  427","line":"  PACKET_DECL_COND_PREFIX(_, Lhs, PacketSize_);"},
{"lineNum":"  428","line":"  PACKET_DECL_COND_PREFIX(_, Rhs, PacketSize_);"},
{"lineNum":"  429","line":"  PACKET_DECL_COND_PREFIX(_, Res, PacketSize_);"},
{"lineNum":"  430","line":""},
{"lineNum":"  431","line":"  enum {"},
{"lineNum":"  432","line":"    ConjLhs = ConjLhs_,"},
{"lineNum":"  433","line":"    ConjRhs = ConjRhs_,"},
{"lineNum":"  434","line":"    Vectorizable = unpacket_traits<_LhsPacket>::vectorizable && unpacket_traits<_RhsPacket>::vectorizable,"},
{"lineNum":"  435","line":"    LhsPacketSize = Vectorizable ? unpacket_traits<_LhsPacket>::size : 1,"},
{"lineNum":"  436","line":"    RhsPacketSize = Vectorizable ? unpacket_traits<_RhsPacket>::size : 1,"},
{"lineNum":"  437","line":"    ResPacketSize = Vectorizable ? unpacket_traits<_ResPacket>::size : 1,"},
{"lineNum":"  438","line":""},
{"lineNum":"  439","line":"    NumberOfRegisters = EIGEN_ARCH_DEFAULT_NUMBER_OF_REGISTERS,"},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"    // register block size along the N direction must be 1 or 4"},
{"lineNum":"  442","line":"    nr = 4,"},
{"lineNum":"  443","line":""},
{"lineNum":"  444","line":"    // register block size along the M direction (currently, this one cannot be modified)"},
{"lineNum":"  445","line":"    default_mr = (EIGEN_PLAIN_ENUM_MIN(16,NumberOfRegisters)/2/nr)*LhsPacketSize,"},
{"lineNum":"  446","line":"#if defined(EIGEN_HAS_SINGLE_INSTRUCTION_MADD) && !defined(EIGEN_VECTORIZE_ALTIVEC) && !defined(EIGEN_VECTORIZE_VSX) \\"},
{"lineNum":"  447","line":"    && ((!EIGEN_COMP_MSVC) || (EIGEN_COMP_MSVC>=1914))"},
{"lineNum":"  448","line":"    // we assume 16 registers or more"},
{"lineNum":"  449","line":"    // See bug 992, if the scalar type is not vectorizable but that EIGEN_HAS_SINGLE_INSTRUCTION_MADD is defined,"},
{"lineNum":"  450","line":"    // then using 3*LhsPacketSize triggers non-implemented paths in syrk."},
{"lineNum":"  451","line":"    // Bug 1515: MSVC prior to v19.14 yields to register spilling."},
{"lineNum":"  452","line":"    mr = Vectorizable ? 3*LhsPacketSize : default_mr,"},
{"lineNum":"  453","line":"#else"},
{"lineNum":"  454","line":"    mr = default_mr,"},
{"lineNum":"  455","line":"#endif"},
{"lineNum":"  456","line":""},
{"lineNum":"  457","line":"    LhsProgress = LhsPacketSize,"},
{"lineNum":"  458","line":"    RhsProgress = 1"},
{"lineNum":"  459","line":"  };"},
{"lineNum":"  460","line":""},
{"lineNum":"  461","line":""},
{"lineNum":"  462","line":"  typedef typename conditional<Vectorizable,_LhsPacket,LhsScalar>::type LhsPacket;"},
{"lineNum":"  463","line":"  typedef typename conditional<Vectorizable,_RhsPacket,RhsScalar>::type RhsPacket;"},
{"lineNum":"  464","line":"  typedef typename conditional<Vectorizable,_ResPacket,ResScalar>::type ResPacket;"},
{"lineNum":"  465","line":"  typedef LhsPacket LhsPacket4Packing;"},
{"lineNum":"  466","line":""},
{"lineNum":"  467","line":"  typedef QuadPacket<RhsPacket> RhsPacketx4;"},
{"lineNum":"  468","line":"  typedef ResPacket AccPacket;"},
{"lineNum":"  469","line":""},
{"lineNum":"  470","line":"  EIGEN_STRONG_INLINE void initAcc(AccPacket& p)"},
{"lineNum":"  471","line":"  {"},
{"lineNum":"  472","line":"    p = pset1<ResPacket>(ResScalar(0));"},
{"lineNum":"  473","line":"  }"},
{"lineNum":"  474","line":""},
{"lineNum":"  475","line":"  template<typename RhsPacketType>"},
{"lineNum":"  476","line":"  EIGEN_STRONG_INLINE void loadRhs(const RhsScalar* b, RhsPacketType& dest) const"},
{"lineNum":"  477","line":"  {"},
{"lineNum":"  478","line":"    dest = pset1<RhsPacketType>(*b);"},
{"lineNum":"  479","line":"  }"},
{"lineNum":"  480","line":""},
{"lineNum":"  481","line":"  EIGEN_STRONG_INLINE void loadRhs(const RhsScalar* b, RhsPacketx4& dest) const"},
{"lineNum":"  482","line":"  {"},
{"lineNum":"  483","line":"    pbroadcast4(b, dest.B_0, dest.B1, dest.B2, dest.B3);"},
{"lineNum":"  484","line":"  }"},
{"lineNum":"  485","line":""},
{"lineNum":"  486","line":"  template<typename RhsPacketType>"},
{"lineNum":"  487","line":"  EIGEN_STRONG_INLINE void updateRhs(const RhsScalar* b, RhsPacketType& dest) const"},
{"lineNum":"  488","line":"  {"},
{"lineNum":"  489","line":"    loadRhs(b, dest);"},
{"lineNum":"  490","line":"  }"},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"  EIGEN_STRONG_INLINE void updateRhs(const RhsScalar*, RhsPacketx4&) const"},
{"lineNum":"  493","line":"  {"},
{"lineNum":"  494","line":"  }"},
{"lineNum":"  495","line":""},
{"lineNum":"  496","line":"  EIGEN_STRONG_INLINE void loadRhsQuad(const RhsScalar* b, RhsPacket& dest) const"},
{"lineNum":"  497","line":"  {"},
{"lineNum":"  498","line":"    dest = ploadquad<RhsPacket>(b);"},
{"lineNum":"  499","line":"  }"},
{"lineNum":"  500","line":""},
{"lineNum":"  501","line":"  template<typename LhsPacketType>"},
{"lineNum":"  502","line":"  EIGEN_STRONG_INLINE void loadLhs(const LhsScalar* a, LhsPacketType& dest) const"},
{"lineNum":"  503","line":"  {"},
{"lineNum":"  504","line":"    dest = pload<LhsPacketType>(a);"},
{"lineNum":"  505","line":"  }"},
{"lineNum":"  506","line":""},
{"lineNum":"  507","line":"  template<typename LhsPacketType>"},
{"lineNum":"  508","line":"  EIGEN_STRONG_INLINE void loadLhsUnaligned(const LhsScalar* a, LhsPacketType& dest) const"},
{"lineNum":"  509","line":"  {"},
{"lineNum":"  510","line":"    dest = ploadu<LhsPacketType>(a);"},
{"lineNum":"  511","line":"  }"},
{"lineNum":"  512","line":""},
{"lineNum":"  513","line":"  template<typename LhsPacketType, typename RhsPacketType, typename AccPacketType, typename LaneIdType>"},
{"lineNum":"  514","line":"  EIGEN_STRONG_INLINE void madd(const LhsPacketType& a, const RhsPacketType& b, AccPacketType& c, RhsPacketType& tmp, const LaneIdType&) const"},
{"lineNum":"  515","line":"  {"},
{"lineNum":"  516","line":"    conj_helper<LhsPacketType,RhsPacketType,ConjLhs,ConjRhs> cj;"},
{"lineNum":"  517","line":"    // It would be a lot cleaner to call pmadd all the time. Unfortunately if we"},
{"lineNum":"  518","line":"    // let gcc allocate the register in which to store the result of the pmul"},
{"lineNum":"  519","line":"    // (in the case where there is no FMA) gcc fails to figure out how to avoid"},
{"lineNum":"  520","line":"    // spilling register."},
{"lineNum":"  521","line":"#ifdef EIGEN_HAS_SINGLE_INSTRUCTION_MADD"},
{"lineNum":"  522","line":"    EIGEN_UNUSED_VARIABLE(tmp);"},
{"lineNum":"  523","line":"    c = cj.pmadd(a,b,c);"},
{"lineNum":"  524","line":"#else"},
{"lineNum":"  525","line":"    tmp = b; tmp = cj.pmul(a,tmp); c = padd(c,tmp);","class":"lineNoCov","hits":"0","possible_hits":"144",},
{"lineNum":"  526","line":"#endif"},
{"lineNum":"  527","line":"  }"},
{"lineNum":"  528","line":""},
{"lineNum":"  529","line":"  template<typename LhsPacketType, typename AccPacketType, typename LaneIdType>"},
{"lineNum":"  530","line":"  EIGEN_STRONG_INLINE void madd(const LhsPacketType& a, const RhsPacketx4& b, AccPacketType& c, RhsPacket& tmp, const LaneIdType& lane) const"},
{"lineNum":"  531","line":"  {"},
{"lineNum":"  532","line":"    madd(a, b.get(lane), c, tmp, lane);"},
{"lineNum":"  533","line":"  }"},
{"lineNum":"  534","line":""},
{"lineNum":"  535","line":"  EIGEN_STRONG_INLINE void acc(const AccPacket& c, const ResPacket& alpha, ResPacket& r) const"},
{"lineNum":"  536","line":"  {"},
{"lineNum":"  537","line":"    r = pmadd(c,alpha,r);"},
{"lineNum":"  538","line":"  }"},
{"lineNum":"  539","line":""},
{"lineNum":"  540","line":"  template<typename ResPacketHalf>"},
{"lineNum":"  541","line":"  EIGEN_STRONG_INLINE void acc(const ResPacketHalf& c, const ResPacketHalf& alpha, ResPacketHalf& r) const"},
{"lineNum":"  542","line":"  {"},
{"lineNum":"  543","line":"    r = pmadd(c,alpha,r);"},
{"lineNum":"  544","line":"  }"},
{"lineNum":"  545","line":""},
{"lineNum":"  546","line":"};"},
{"lineNum":"  547","line":""},
{"lineNum":"  548","line":"template<typename RealScalar, bool ConjLhs_, int Arch, int PacketSize_>"},
{"lineNum":"  549","line":"class gebp_traits<std::complex<RealScalar>, RealScalar, ConjLhs_, false, Arch, PacketSize_>"},
{"lineNum":"  550","line":"{"},
{"lineNum":"  551","line":"public:"},
{"lineNum":"  552","line":"  typedef std::complex<RealScalar> LhsScalar;"},
{"lineNum":"  553","line":"  typedef RealScalar RhsScalar;"},
{"lineNum":"  554","line":"  typedef typename ScalarBinaryOpTraits<LhsScalar, RhsScalar>::ReturnType ResScalar;"},
{"lineNum":"  555","line":""},
{"lineNum":"  556","line":"  PACKET_DECL_COND_PREFIX(_, Lhs, PacketSize_);"},
{"lineNum":"  557","line":"  PACKET_DECL_COND_PREFIX(_, Rhs, PacketSize_);"},
{"lineNum":"  558","line":"  PACKET_DECL_COND_PREFIX(_, Res, PacketSize_);"},
{"lineNum":"  559","line":""},
{"lineNum":"  560","line":"  enum {"},
{"lineNum":"  561","line":"    ConjLhs = ConjLhs_,"},
{"lineNum":"  562","line":"    ConjRhs = false,"},
{"lineNum":"  563","line":"    Vectorizable = unpacket_traits<_LhsPacket>::vectorizable && unpacket_traits<_RhsPacket>::vectorizable,"},
{"lineNum":"  564","line":"    LhsPacketSize = Vectorizable ? unpacket_traits<_LhsPacket>::size : 1,"},
{"lineNum":"  565","line":"    RhsPacketSize = Vectorizable ? unpacket_traits<_RhsPacket>::size : 1,"},
{"lineNum":"  566","line":"    ResPacketSize = Vectorizable ? unpacket_traits<_ResPacket>::size : 1,"},
{"lineNum":"  567","line":""},
{"lineNum":"  568","line":"    NumberOfRegisters = EIGEN_ARCH_DEFAULT_NUMBER_OF_REGISTERS,"},
{"lineNum":"  569","line":"    nr = 4,"},
{"lineNum":"  570","line":"#if defined(EIGEN_HAS_SINGLE_INSTRUCTION_MADD) && !defined(EIGEN_VECTORIZE_ALTIVEC) && !defined(EIGEN_VECTORIZE_VSX)"},
{"lineNum":"  571","line":"    // we assume 16 registers"},
{"lineNum":"  572","line":"    mr = 3*LhsPacketSize,"},
{"lineNum":"  573","line":"#else"},
{"lineNum":"  574","line":"    mr = (EIGEN_PLAIN_ENUM_MIN(16,NumberOfRegisters)/2/nr)*LhsPacketSize,"},
{"lineNum":"  575","line":"#endif"},
{"lineNum":"  576","line":""},
{"lineNum":"  577","line":"    LhsProgress = LhsPacketSize,"},
{"lineNum":"  578","line":"    RhsProgress = 1"},
{"lineNum":"  579","line":"  };"},
{"lineNum":"  580","line":""},
{"lineNum":"  581","line":"  typedef typename conditional<Vectorizable,_LhsPacket,LhsScalar>::type LhsPacket;"},
{"lineNum":"  582","line":"  typedef typename conditional<Vectorizable,_RhsPacket,RhsScalar>::type RhsPacket;"},
{"lineNum":"  583","line":"  typedef typename conditional<Vectorizable,_ResPacket,ResScalar>::type ResPacket;"},
{"lineNum":"  584","line":"  typedef LhsPacket LhsPacket4Packing;"},
{"lineNum":"  585","line":""},
{"lineNum":"  586","line":"  typedef QuadPacket<RhsPacket> RhsPacketx4;"},
{"lineNum":"  587","line":""},
{"lineNum":"  588","line":"  typedef ResPacket AccPacket;"},
{"lineNum":"  589","line":""},
{"lineNum":"  590","line":"  EIGEN_STRONG_INLINE void initAcc(AccPacket& p)"},
{"lineNum":"  591","line":"  {"},
{"lineNum":"  592","line":"    p = pset1<ResPacket>(ResScalar(0));"},
{"lineNum":"  593","line":"  }"},
{"lineNum":"  594","line":""},
{"lineNum":"  595","line":"  template<typename RhsPacketType>"},
{"lineNum":"  596","line":"  EIGEN_STRONG_INLINE void loadRhs(const RhsScalar* b, RhsPacketType& dest) const"},
{"lineNum":"  597","line":"  {"},
{"lineNum":"  598","line":"    dest = pset1<RhsPacketType>(*b);"},
{"lineNum":"  599","line":"  }"},
{"lineNum":"  600","line":""},
{"lineNum":"  601","line":"  EIGEN_STRONG_INLINE void loadRhs(const RhsScalar* b, RhsPacketx4& dest) const"},
{"lineNum":"  602","line":"  {"},
{"lineNum":"  603","line":"    pbroadcast4(b, dest.B_0, dest.B1, dest.B2, dest.B3);"},
{"lineNum":"  604","line":"  }"},
{"lineNum":"  605","line":""},
{"lineNum":"  606","line":"  template<typename RhsPacketType>"},
{"lineNum":"  607","line":"  EIGEN_STRONG_INLINE void updateRhs(const RhsScalar* b, RhsPacketType& dest) const"},
{"lineNum":"  608","line":"  {"},
{"lineNum":"  609","line":"    loadRhs(b, dest);"},
{"lineNum":"  610","line":"  }"},
{"lineNum":"  611","line":""},
{"lineNum":"  612","line":"  EIGEN_STRONG_INLINE void updateRhs(const RhsScalar*, RhsPacketx4&) const"},
{"lineNum":"  613","line":"  {}"},
{"lineNum":"  614","line":""},
{"lineNum":"  615","line":"  EIGEN_STRONG_INLINE void loadRhsQuad(const RhsScalar* b, RhsPacket& dest) const"},
{"lineNum":"  616","line":"  {"},
{"lineNum":"  617","line":"    loadRhsQuad_impl(b,dest, typename conditional<RhsPacketSize==16,true_type,false_type>::type());"},
{"lineNum":"  618","line":"  }"},
{"lineNum":"  619","line":""},
{"lineNum":"  620","line":"  EIGEN_STRONG_INLINE void loadRhsQuad_impl(const RhsScalar* b, RhsPacket& dest, const true_type&) const"},
{"lineNum":"  621","line":"  {"},
{"lineNum":"  622","line":"    // FIXME we can do better!"},
{"lineNum":"  623","line":"    // what we want here is a ploadheight"},
{"lineNum":"  624","line":"    RhsScalar tmp[4] = {b[0],b[0],b[1],b[1]};"},
{"lineNum":"  625","line":"    dest = ploadquad<RhsPacket>(tmp);"},
{"lineNum":"  626","line":"  }"},
{"lineNum":"  627","line":""},
{"lineNum":"  628","line":"  EIGEN_STRONG_INLINE void loadRhsQuad_impl(const RhsScalar* b, RhsPacket& dest, const false_type&) const"},
{"lineNum":"  629","line":"  {"},
{"lineNum":"  630","line":"    eigen_internal_assert(RhsPacketSize<=8);"},
{"lineNum":"  631","line":"    dest = pset1<RhsPacket>(*b);"},
{"lineNum":"  632","line":"  }"},
{"lineNum":"  633","line":""},
{"lineNum":"  634","line":"  EIGEN_STRONG_INLINE void loadLhs(const LhsScalar* a, LhsPacket& dest) const"},
{"lineNum":"  635","line":"  {"},
{"lineNum":"  636","line":"    dest = pload<LhsPacket>(a);"},
{"lineNum":"  637","line":"  }"},
{"lineNum":"  638","line":""},
{"lineNum":"  639","line":"  template<typename LhsPacketType>"},
{"lineNum":"  640","line":"  EIGEN_STRONG_INLINE void loadLhsUnaligned(const LhsScalar* a, LhsPacketType& dest) const"},
{"lineNum":"  641","line":"  {"},
{"lineNum":"  642","line":"    dest = ploadu<LhsPacketType>(a);"},
{"lineNum":"  643","line":"  }"},
{"lineNum":"  644","line":""},
{"lineNum":"  645","line":"  template <typename LhsPacketType, typename RhsPacketType, typename AccPacketType, typename LaneIdType>"},
{"lineNum":"  646","line":"  EIGEN_STRONG_INLINE void madd(const LhsPacketType& a, const RhsPacketType& b, AccPacketType& c, RhsPacketType& tmp, const LaneIdType&) const"},
{"lineNum":"  647","line":"  {"},
{"lineNum":"  648","line":"    madd_impl(a, b, c, tmp, typename conditional<Vectorizable,true_type,false_type>::type());"},
{"lineNum":"  649","line":"  }"},
{"lineNum":"  650","line":""},
{"lineNum":"  651","line":"  template <typename LhsPacketType, typename RhsPacketType, typename AccPacketType>"},
{"lineNum":"  652","line":"  EIGEN_STRONG_INLINE void madd_impl(const LhsPacketType& a, const RhsPacketType& b, AccPacketType& c, RhsPacketType& tmp, const true_type&) const"},
{"lineNum":"  653","line":"  {"},
{"lineNum":"  654","line":"#ifdef EIGEN_HAS_SINGLE_INSTRUCTION_MADD"},
{"lineNum":"  655","line":"    EIGEN_UNUSED_VARIABLE(tmp);"},
{"lineNum":"  656","line":"    c.v = pmadd(a.v,b,c.v);"},
{"lineNum":"  657","line":"#else"},
{"lineNum":"  658","line":"    tmp = b; tmp = pmul(a.v,tmp); c.v = padd(c.v,tmp);"},
{"lineNum":"  659","line":"#endif"},
{"lineNum":"  660","line":"  }"},
{"lineNum":"  661","line":""},
{"lineNum":"  662","line":"  EIGEN_STRONG_INLINE void madd_impl(const LhsScalar& a, const RhsScalar& b, ResScalar& c, RhsScalar& /*tmp*/, const false_type&) const"},
{"lineNum":"  663","line":"  {"},
{"lineNum":"  664","line":"    c += a * b;"},
{"lineNum":"  665","line":"  }"},
{"lineNum":"  666","line":""},
{"lineNum":"  667","line":"  template<typename LhsPacketType, typename AccPacketType, typename LaneIdType>"},
{"lineNum":"  668","line":"  EIGEN_STRONG_INLINE void madd(const LhsPacketType& a, const RhsPacketx4& b, AccPacketType& c, RhsPacket& tmp, const LaneIdType& lane) const"},
{"lineNum":"  669","line":"  {"},
{"lineNum":"  670","line":"    madd(a, b.get(lane), c, tmp, lane);"},
{"lineNum":"  671","line":"  }"},
{"lineNum":"  672","line":""},
{"lineNum":"  673","line":"  template <typename ResPacketType, typename AccPacketType>"},
{"lineNum":"  674","line":"  EIGEN_STRONG_INLINE void acc(const AccPacketType& c, const ResPacketType& alpha, ResPacketType& r) const"},
{"lineNum":"  675","line":"  {"},
{"lineNum":"  676","line":"    conj_helper<ResPacketType,ResPacketType,ConjLhs,false> cj;"},
{"lineNum":"  677","line":"    r = cj.pmadd(c,alpha,r);"},
{"lineNum":"  678","line":"  }"},
{"lineNum":"  679","line":""},
{"lineNum":"  680","line":"protected:"},
{"lineNum":"  681","line":"};"},
{"lineNum":"  682","line":""},
{"lineNum":"  683","line":"template<typename Packet>"},
{"lineNum":"  684","line":"struct DoublePacket"},
{"lineNum":"  685","line":"{"},
{"lineNum":"  686","line":"  Packet first;"},
{"lineNum":"  687","line":"  Packet second;"},
{"lineNum":"  688","line":"};"},
{"lineNum":"  689","line":""},
{"lineNum":"  690","line":"template<typename Packet>"},
{"lineNum":"  691","line":"DoublePacket<Packet> padd(const DoublePacket<Packet> &a, const DoublePacket<Packet> &b)"},
{"lineNum":"  692","line":"{"},
{"lineNum":"  693","line":"  DoublePacket<Packet> res;"},
{"lineNum":"  694","line":"  res.first  = padd(a.first, b.first);"},
{"lineNum":"  695","line":"  res.second = padd(a.second,b.second);"},
{"lineNum":"  696","line":"  return res;"},
{"lineNum":"  697","line":"}"},
{"lineNum":"  698","line":""},
{"lineNum":"  699","line":"// note that for DoublePacket<RealPacket> the \"4\" in \"downto4\""},
{"lineNum":"  700","line":"// corresponds to the number of complexes, so it means \"8\""},
{"lineNum":"  701","line":"// it terms of real coefficients."},
{"lineNum":"  702","line":""},
{"lineNum":"  703","line":"template<typename Packet>"},
{"lineNum":"  704","line":"const DoublePacket<Packet>&"},
{"lineNum":"  705","line":"predux_half_dowto4(const DoublePacket<Packet> &a,"},
{"lineNum":"  706","line":"                   typename enable_if<unpacket_traits<Packet>::size<=8>::type* = 0)"},
{"lineNum":"  707","line":"{"},
{"lineNum":"  708","line":"  return a;"},
{"lineNum":"  709","line":"}"},
{"lineNum":"  710","line":""},
{"lineNum":"  711","line":"template<typename Packet>"},
{"lineNum":"  712","line":"DoublePacket<typename unpacket_traits<Packet>::half>"},
{"lineNum":"  713","line":"predux_half_dowto4(const DoublePacket<Packet> &a,"},
{"lineNum":"  714","line":"                   typename enable_if<unpacket_traits<Packet>::size==16>::type* = 0)"},
{"lineNum":"  715","line":"{"},
{"lineNum":"  716","line":"  // yes, that\'s pretty hackish :("},
{"lineNum":"  717","line":"  DoublePacket<typename unpacket_traits<Packet>::half> res;"},
{"lineNum":"  718","line":"  typedef std::complex<typename unpacket_traits<Packet>::type> Cplx;"},
{"lineNum":"  719","line":"  typedef typename packet_traits<Cplx>::type CplxPacket;"},
{"lineNum":"  720","line":"  res.first  = predux_half_dowto4(CplxPacket(a.first)).v;"},
{"lineNum":"  721","line":"  res.second = predux_half_dowto4(CplxPacket(a.second)).v;"},
{"lineNum":"  722","line":"  return res;"},
{"lineNum":"  723","line":"}"},
{"lineNum":"  724","line":""},
{"lineNum":"  725","line":"// same here, \"quad\" actually means \"8\" in terms of real coefficients"},
{"lineNum":"  726","line":"template<typename Scalar, typename RealPacket>"},
{"lineNum":"  727","line":"void loadQuadToDoublePacket(const Scalar* b, DoublePacket<RealPacket>& dest,"},
{"lineNum":"  728","line":"                            typename enable_if<unpacket_traits<RealPacket>::size<=8>::type* = 0)"},
{"lineNum":"  729","line":"{"},
{"lineNum":"  730","line":"  dest.first  = pset1<RealPacket>(numext::real(*b));"},
{"lineNum":"  731","line":"  dest.second = pset1<RealPacket>(numext::imag(*b));"},
{"lineNum":"  732","line":"}"},
{"lineNum":"  733","line":""},
{"lineNum":"  734","line":"template<typename Scalar, typename RealPacket>"},
{"lineNum":"  735","line":"void loadQuadToDoublePacket(const Scalar* b, DoublePacket<RealPacket>& dest,"},
{"lineNum":"  736","line":"                            typename enable_if<unpacket_traits<RealPacket>::size==16>::type* = 0)"},
{"lineNum":"  737","line":"{"},
{"lineNum":"  738","line":"  // yes, that\'s pretty hackish too :("},
{"lineNum":"  739","line":"  typedef typename NumTraits<Scalar>::Real RealScalar;"},
{"lineNum":"  740","line":"  RealScalar r[4] = {numext::real(b[0]), numext::real(b[0]), numext::real(b[1]), numext::real(b[1])};"},
{"lineNum":"  741","line":"  RealScalar i[4] = {numext::imag(b[0]), numext::imag(b[0]), numext::imag(b[1]), numext::imag(b[1])};"},
{"lineNum":"  742","line":"  dest.first  = ploadquad<RealPacket>(r);"},
{"lineNum":"  743","line":"  dest.second = ploadquad<RealPacket>(i);"},
{"lineNum":"  744","line":"}"},
{"lineNum":"  745","line":""},
{"lineNum":"  746","line":""},
{"lineNum":"  747","line":"template<typename Packet> struct unpacket_traits<DoublePacket<Packet> > {"},
{"lineNum":"  748","line":"  typedef DoublePacket<typename unpacket_traits<Packet>::half> half;"},
{"lineNum":"  749","line":"};"},
{"lineNum":"  750","line":"// template<typename Packet>"},
{"lineNum":"  751","line":"// DoublePacket<Packet> pmadd(const DoublePacket<Packet> &a, const DoublePacket<Packet> &b)"},
{"lineNum":"  752","line":"// {"},
{"lineNum":"  753","line":"//   DoublePacket<Packet> res;"},
{"lineNum":"  754","line":"//   res.first  = padd(a.first, b.first);"},
{"lineNum":"  755","line":"//   res.second = padd(a.second,b.second);"},
{"lineNum":"  756","line":"//   return res;"},
{"lineNum":"  757","line":"// }"},
{"lineNum":"  758","line":""},
{"lineNum":"  759","line":"template<typename RealScalar, bool ConjLhs_, bool ConjRhs_, int Arch, int PacketSize_>"},
{"lineNum":"  760","line":"class gebp_traits<std::complex<RealScalar>, std::complex<RealScalar>, ConjLhs_, ConjRhs_, Arch, PacketSize_ >"},
{"lineNum":"  761","line":"{"},
{"lineNum":"  762","line":"public:"},
{"lineNum":"  763","line":"  typedef std::complex<RealScalar>  Scalar;"},
{"lineNum":"  764","line":"  typedef std::complex<RealScalar>  LhsScalar;"},
{"lineNum":"  765","line":"  typedef std::complex<RealScalar>  RhsScalar;"},
{"lineNum":"  766","line":"  typedef std::complex<RealScalar>  ResScalar;"},
{"lineNum":"  767","line":""},
{"lineNum":"  768","line":"  PACKET_DECL_COND_PREFIX(_, Lhs, PacketSize_);"},
{"lineNum":"  769","line":"  PACKET_DECL_COND_PREFIX(_, Rhs, PacketSize_);"},
{"lineNum":"  770","line":"  PACKET_DECL_COND_PREFIX(_, Res, PacketSize_);"},
{"lineNum":"  771","line":"  PACKET_DECL_COND(Real, PacketSize_);"},
{"lineNum":"  772","line":"  PACKET_DECL_COND_SCALAR(PacketSize_);"},
{"lineNum":"  773","line":""},
{"lineNum":"  774","line":"  enum {"},
{"lineNum":"  775","line":"    ConjLhs = ConjLhs_,"},
{"lineNum":"  776","line":"    ConjRhs = ConjRhs_,"},
{"lineNum":"  777","line":"    Vectorizable = unpacket_traits<RealPacket>::vectorizable"},
{"lineNum":"  778","line":"                && unpacket_traits<ScalarPacket>::vectorizable,"},
{"lineNum":"  779","line":"    ResPacketSize   = Vectorizable ? unpacket_traits<_ResPacket>::size : 1,"},
{"lineNum":"  780","line":"    LhsPacketSize = Vectorizable ? unpacket_traits<_LhsPacket>::size : 1,"},
{"lineNum":"  781","line":"    RhsPacketSize = Vectorizable ? unpacket_traits<RhsScalar>::size : 1,"},
{"lineNum":"  782","line":"    RealPacketSize  = Vectorizable ? unpacket_traits<RealPacket>::size : 1,"},
{"lineNum":"  783","line":""},
{"lineNum":"  784","line":"    // FIXME: should depend on NumberOfRegisters"},
{"lineNum":"  785","line":"    nr = 4,"},
{"lineNum":"  786","line":"    mr = ResPacketSize,"},
{"lineNum":"  787","line":""},
{"lineNum":"  788","line":"    LhsProgress = ResPacketSize,"},
{"lineNum":"  789","line":"    RhsProgress = 1"},
{"lineNum":"  790","line":"  };"},
{"lineNum":"  791","line":""},
{"lineNum":"  792","line":"  typedef DoublePacket<RealPacket>                 DoublePacketType;"},
{"lineNum":"  793","line":""},
{"lineNum":"  794","line":"  typedef typename conditional<Vectorizable,ScalarPacket,Scalar>::type LhsPacket4Packing;"},
{"lineNum":"  795","line":"  typedef typename conditional<Vectorizable,RealPacket,  Scalar>::type LhsPacket;"},
{"lineNum":"  796","line":"  typedef typename conditional<Vectorizable,DoublePacketType,Scalar>::type RhsPacket;"},
{"lineNum":"  797","line":"  typedef typename conditional<Vectorizable,ScalarPacket,Scalar>::type ResPacket;"},
{"lineNum":"  798","line":"  typedef typename conditional<Vectorizable,DoublePacketType,Scalar>::type AccPacket;"},
{"lineNum":"  799","line":""},
{"lineNum":"  800","line":"  // this actually holds 8 packets!"},
{"lineNum":"  801","line":"  typedef QuadPacket<RhsPacket> RhsPacketx4;"},
{"lineNum":"  802","line":""},
{"lineNum":"  803","line":"  EIGEN_STRONG_INLINE void initAcc(Scalar& p) { p = Scalar(0); }"},
{"lineNum":"  804","line":""},
{"lineNum":"  805","line":"  EIGEN_STRONG_INLINE void initAcc(DoublePacketType& p)"},
{"lineNum":"  806","line":"  {"},
{"lineNum":"  807","line":"    p.first   = pset1<RealPacket>(RealScalar(0));"},
{"lineNum":"  808","line":"    p.second  = pset1<RealPacket>(RealScalar(0));"},
{"lineNum":"  809","line":"  }"},
{"lineNum":"  810","line":""},
{"lineNum":"  811","line":"  // Scalar path"},
{"lineNum":"  812","line":"  EIGEN_STRONG_INLINE void loadRhs(const RhsScalar* b, ScalarPacket& dest) const"},
{"lineNum":"  813","line":"  {"},
{"lineNum":"  814","line":"    dest = pset1<ScalarPacket>(*b);"},
{"lineNum":"  815","line":"  }"},
{"lineNum":"  816","line":""},
{"lineNum":"  817","line":"  // Vectorized path"},
{"lineNum":"  818","line":"  template<typename RealPacketType>"},
{"lineNum":"  819","line":"  EIGEN_STRONG_INLINE void loadRhs(const RhsScalar* b, DoublePacket<RealPacketType>& dest) const"},
{"lineNum":"  820","line":"  {"},
{"lineNum":"  821","line":"    dest.first  = pset1<RealPacketType>(numext::real(*b));"},
{"lineNum":"  822","line":"    dest.second = pset1<RealPacketType>(numext::imag(*b));"},
{"lineNum":"  823","line":"  }"},
{"lineNum":"  824","line":""},
{"lineNum":"  825","line":"  EIGEN_STRONG_INLINE void loadRhs(const RhsScalar* b, RhsPacketx4& dest) const"},
{"lineNum":"  826","line":"  {"},
{"lineNum":"  827","line":"    loadRhs(b, dest.B_0);"},
{"lineNum":"  828","line":"    loadRhs(b + 1, dest.B1);"},
{"lineNum":"  829","line":"    loadRhs(b + 2, dest.B2);"},
{"lineNum":"  830","line":"    loadRhs(b + 3, dest.B3);"},
{"lineNum":"  831","line":"  }"},
{"lineNum":"  832","line":""},
{"lineNum":"  833","line":"  // Scalar path"},
{"lineNum":"  834","line":"  EIGEN_STRONG_INLINE void updateRhs(const RhsScalar* b, ScalarPacket& dest) const"},
{"lineNum":"  835","line":"  {"},
{"lineNum":"  836","line":"    loadRhs(b, dest);"},
{"lineNum":"  837","line":"  }"},
{"lineNum":"  838","line":""},
{"lineNum":"  839","line":"  // Vectorized path"},
{"lineNum":"  840","line":"  template<typename RealPacketType>"},
{"lineNum":"  841","line":"  EIGEN_STRONG_INLINE void updateRhs(const RhsScalar* b, DoublePacket<RealPacketType>& dest) const"},
{"lineNum":"  842","line":"  {"},
{"lineNum":"  843","line":"    loadRhs(b, dest);"},
{"lineNum":"  844","line":"  }"},
{"lineNum":"  845","line":""},
{"lineNum":"  846","line":"  EIGEN_STRONG_INLINE void updateRhs(const RhsScalar*, RhsPacketx4&) const {}"},
{"lineNum":"  847","line":""},
{"lineNum":"  848","line":"  EIGEN_STRONG_INLINE void loadRhsQuad(const RhsScalar* b, ResPacket& dest) const"},
{"lineNum":"  849","line":"  {"},
{"lineNum":"  850","line":"    loadRhs(b,dest);"},
{"lineNum":"  851","line":"  }"},
{"lineNum":"  852","line":"  EIGEN_STRONG_INLINE void loadRhsQuad(const RhsScalar* b, DoublePacketType& dest) const"},
{"lineNum":"  853","line":"  {"},
{"lineNum":"  854","line":"    loadQuadToDoublePacket(b,dest);"},
{"lineNum":"  855","line":"  }"},
{"lineNum":"  856","line":""},
{"lineNum":"  857","line":"  // nothing special here"},
{"lineNum":"  858","line":"  EIGEN_STRONG_INLINE void loadLhs(const LhsScalar* a, LhsPacket& dest) const"},
{"lineNum":"  859","line":"  {"},
{"lineNum":"  860","line":"    dest = pload<LhsPacket>((const typename unpacket_traits<LhsPacket>::type*)(a));"},
{"lineNum":"  861","line":"  }"},
{"lineNum":"  862","line":""},
{"lineNum":"  863","line":"  template<typename LhsPacketType>"},
{"lineNum":"  864","line":"  EIGEN_STRONG_INLINE void loadLhsUnaligned(const LhsScalar* a, LhsPacketType& dest) const"},
{"lineNum":"  865","line":"  {"},
{"lineNum":"  866","line":"    dest = ploadu<LhsPacketType>((const typename unpacket_traits<LhsPacketType>::type*)(a));"},
{"lineNum":"  867","line":"  }"},
{"lineNum":"  868","line":""},
{"lineNum":"  869","line":"  template<typename LhsPacketType, typename RhsPacketType, typename ResPacketType, typename TmpType, typename LaneIdType>"},
{"lineNum":"  870","line":"  EIGEN_STRONG_INLINE"},
{"lineNum":"  871","line":"  typename enable_if<!is_same<RhsPacketType,RhsPacketx4>::value>::type"},
{"lineNum":"  872","line":"  madd(const LhsPacketType& a, const RhsPacketType& b, DoublePacket<ResPacketType>& c, TmpType& /*tmp*/, const LaneIdType&) const"},
{"lineNum":"  873","line":"  {"},
{"lineNum":"  874","line":"    c.first   = padd(pmul(a,b.first), c.first);"},
{"lineNum":"  875","line":"    c.second  = padd(pmul(a,b.second),c.second);"},
{"lineNum":"  876","line":"  }"},
{"lineNum":"  877","line":""},
{"lineNum":"  878","line":"  template<typename LaneIdType>"},
{"lineNum":"  879","line":"  EIGEN_STRONG_INLINE void madd(const LhsPacket& a, const RhsPacket& b, ResPacket& c, RhsPacket& /*tmp*/, const LaneIdType&) const"},
{"lineNum":"  880","line":"  {"},
{"lineNum":"  881","line":"    c = cj.pmadd(a,b,c);"},
{"lineNum":"  882","line":"  }"},
{"lineNum":"  883","line":""},
{"lineNum":"  884","line":"  template<typename LhsPacketType, typename AccPacketType, typename LaneIdType>"},
{"lineNum":"  885","line":"  EIGEN_STRONG_INLINE void madd(const LhsPacketType& a, const RhsPacketx4& b, AccPacketType& c, RhsPacket& tmp, const LaneIdType& lane) const"},
{"lineNum":"  886","line":"  {"},
{"lineNum":"  887","line":"    madd(a, b.get(lane), c, tmp, lane);"},
{"lineNum":"  888","line":"  }"},
{"lineNum":"  889","line":""},
{"lineNum":"  890","line":"  EIGEN_STRONG_INLINE void acc(const Scalar& c, const Scalar& alpha, Scalar& r) const { r += alpha * c; }"},
{"lineNum":"  891","line":""},
{"lineNum":"  892","line":"  template<typename RealPacketType, typename ResPacketType>"},
{"lineNum":"  893","line":"  EIGEN_STRONG_INLINE void acc(const DoublePacket<RealPacketType>& c, const ResPacketType& alpha, ResPacketType& r) const"},
{"lineNum":"  894","line":"  {"},
{"lineNum":"  895","line":"    // assemble c"},
{"lineNum":"  896","line":"    ResPacketType tmp;"},
{"lineNum":"  897","line":"    if((!ConjLhs)&&(!ConjRhs))"},
{"lineNum":"  898","line":"    {"},
{"lineNum":"  899","line":"      tmp = pcplxflip(pconj(ResPacketType(c.second)));"},
{"lineNum":"  900","line":"      tmp = padd(ResPacketType(c.first),tmp);"},
{"lineNum":"  901","line":"    }"},
{"lineNum":"  902","line":"    else if((!ConjLhs)&&(ConjRhs))"},
{"lineNum":"  903","line":"    {"},
{"lineNum":"  904","line":"      tmp = pconj(pcplxflip(ResPacketType(c.second)));"},
{"lineNum":"  905","line":"      tmp = padd(ResPacketType(c.first),tmp);"},
{"lineNum":"  906","line":"    }"},
{"lineNum":"  907","line":"    else if((ConjLhs)&&(!ConjRhs))"},
{"lineNum":"  908","line":"    {"},
{"lineNum":"  909","line":"      tmp = pcplxflip(ResPacketType(c.second));"},
{"lineNum":"  910","line":"      tmp = padd(pconj(ResPacketType(c.first)),tmp);"},
{"lineNum":"  911","line":"    }"},
{"lineNum":"  912","line":"    else if((ConjLhs)&&(ConjRhs))"},
{"lineNum":"  913","line":"    {"},
{"lineNum":"  914","line":"      tmp = pcplxflip(ResPacketType(c.second));"},
{"lineNum":"  915","line":"      tmp = psub(pconj(ResPacketType(c.first)),tmp);"},
{"lineNum":"  916","line":"    }"},
{"lineNum":"  917","line":""},
{"lineNum":"  918","line":"    r = pmadd(tmp,alpha,r);"},
{"lineNum":"  919","line":"  }"},
{"lineNum":"  920","line":""},
{"lineNum":"  921","line":"protected:"},
{"lineNum":"  922","line":"  conj_helper<LhsScalar,RhsScalar,ConjLhs,ConjRhs> cj;"},
{"lineNum":"  923","line":"};"},
{"lineNum":"  924","line":""},
{"lineNum":"  925","line":"template<typename RealScalar, bool ConjRhs_, int Arch, int PacketSize_>"},
{"lineNum":"  926","line":"class gebp_traits<RealScalar, std::complex<RealScalar>, false, ConjRhs_, Arch, PacketSize_ >"},
{"lineNum":"  927","line":"{"},
{"lineNum":"  928","line":"public:"},
{"lineNum":"  929","line":"  typedef std::complex<RealScalar>  Scalar;"},
{"lineNum":"  930","line":"  typedef RealScalar  LhsScalar;"},
{"lineNum":"  931","line":"  typedef Scalar      RhsScalar;"},
{"lineNum":"  932","line":"  typedef Scalar      ResScalar;"},
{"lineNum":"  933","line":""},
{"lineNum":"  934","line":"  PACKET_DECL_COND_PREFIX(_, Lhs, PacketSize_);"},
{"lineNum":"  935","line":"  PACKET_DECL_COND_PREFIX(_, Rhs, PacketSize_);"},
{"lineNum":"  936","line":"  PACKET_DECL_COND_PREFIX(_, Res, PacketSize_);"},
{"lineNum":"  937","line":"  PACKET_DECL_COND_PREFIX(_, Real, PacketSize_);"},
{"lineNum":"  938","line":"  PACKET_DECL_COND_SCALAR_PREFIX(_, PacketSize_);"},
{"lineNum":"  939","line":""},
{"lineNum":"  940","line":"#undef PACKET_DECL_COND_SCALAR_PREFIX"},
{"lineNum":"  941","line":"#undef PACKET_DECL_COND_PREFIX"},
{"lineNum":"  942","line":"#undef PACKET_DECL_COND_SCALAR"},
{"lineNum":"  943","line":"#undef PACKET_DECL_COND"},
{"lineNum":"  944","line":""},
{"lineNum":"  945","line":"  enum {"},
{"lineNum":"  946","line":"    ConjLhs = false,"},
{"lineNum":"  947","line":"    ConjRhs = ConjRhs_,"},
{"lineNum":"  948","line":"    Vectorizable = unpacket_traits<_RealPacket>::vectorizable"},
{"lineNum":"  949","line":"                && unpacket_traits<_ScalarPacket>::vectorizable,"},
{"lineNum":"  950","line":"    LhsPacketSize = Vectorizable ? unpacket_traits<_LhsPacket>::size : 1,"},
{"lineNum":"  951","line":"    RhsPacketSize = Vectorizable ? unpacket_traits<_RhsPacket>::size : 1,"},
{"lineNum":"  952","line":"    ResPacketSize = Vectorizable ? unpacket_traits<_ResPacket>::size : 1,"},
{"lineNum":"  953","line":""},
{"lineNum":"  954","line":"    NumberOfRegisters = EIGEN_ARCH_DEFAULT_NUMBER_OF_REGISTERS,"},
{"lineNum":"  955","line":"    // FIXME: should depend on NumberOfRegisters"},
{"lineNum":"  956","line":"    nr = 4,"},
{"lineNum":"  957","line":"    mr = (EIGEN_PLAIN_ENUM_MIN(16,NumberOfRegisters)/2/nr)*ResPacketSize,"},
{"lineNum":"  958","line":""},
{"lineNum":"  959","line":"    LhsProgress = ResPacketSize,"},
{"lineNum":"  960","line":"    RhsProgress = 1"},
{"lineNum":"  961","line":"  };"},
{"lineNum":"  962","line":""},
{"lineNum":"  963","line":"  typedef typename conditional<Vectorizable,_LhsPacket,LhsScalar>::type LhsPacket;"},
{"lineNum":"  964","line":"  typedef typename conditional<Vectorizable,_RhsPacket,RhsScalar>::type RhsPacket;"},
{"lineNum":"  965","line":"  typedef typename conditional<Vectorizable,_ResPacket,ResScalar>::type ResPacket;"},
{"lineNum":"  966","line":"  typedef LhsPacket LhsPacket4Packing;"},
{"lineNum":"  967","line":"  typedef QuadPacket<RhsPacket> RhsPacketx4;"},
{"lineNum":"  968","line":"  typedef ResPacket AccPacket;"},
{"lineNum":"  969","line":""},
{"lineNum":"  970","line":"  EIGEN_STRONG_INLINE void initAcc(AccPacket& p)"},
{"lineNum":"  971","line":"  {"},
{"lineNum":"  972","line":"    p = pset1<ResPacket>(ResScalar(0));"},
{"lineNum":"  973","line":"  }"},
{"lineNum":"  974","line":""},
{"lineNum":"  975","line":"  template<typename RhsPacketType>"},
{"lineNum":"  976","line":"  EIGEN_STRONG_INLINE void loadRhs(const RhsScalar* b, RhsPacketType& dest) const"},
{"lineNum":"  977","line":"  {"},
{"lineNum":"  978","line":"    dest = pset1<RhsPacketType>(*b);"},
{"lineNum":"  979","line":"  }"},
{"lineNum":"  980","line":""},
{"lineNum":"  981","line":"  EIGEN_STRONG_INLINE void loadRhs(const RhsScalar* b, RhsPacketx4& dest) const"},
{"lineNum":"  982","line":"  {"},
{"lineNum":"  983","line":"    pbroadcast4(b, dest.B_0, dest.B1, dest.B2, dest.B3);"},
{"lineNum":"  984","line":"  }"},
{"lineNum":"  985","line":""},
{"lineNum":"  986","line":"  template<typename RhsPacketType>"},
{"lineNum":"  987","line":"  EIGEN_STRONG_INLINE void updateRhs(const RhsScalar* b, RhsPacketType& dest) const"},
{"lineNum":"  988","line":"  {"},
{"lineNum":"  989","line":"    loadRhs(b, dest);"},
{"lineNum":"  990","line":"  }"},
{"lineNum":"  991","line":""},
{"lineNum":"  992","line":"  EIGEN_STRONG_INLINE void updateRhs(const RhsScalar*, RhsPacketx4&) const"},
{"lineNum":"  993","line":"  {}"},
{"lineNum":"  994","line":""},
{"lineNum":"  995","line":"  EIGEN_STRONG_INLINE void loadLhs(const LhsScalar* a, LhsPacket& dest) const"},
{"lineNum":"  996","line":"  {"},
{"lineNum":"  997","line":"    dest = ploaddup<LhsPacket>(a);"},
{"lineNum":"  998","line":"  }"},
{"lineNum":"  999","line":""},
{"lineNum":" 1000","line":"  EIGEN_STRONG_INLINE void loadRhsQuad(const RhsScalar* b, RhsPacket& dest) const"},
{"lineNum":" 1001","line":"  {"},
{"lineNum":" 1002","line":"    dest = ploadquad<RhsPacket>(b);"},
{"lineNum":" 1003","line":"  }"},
{"lineNum":" 1004","line":""},
{"lineNum":" 1005","line":"  template<typename LhsPacketType>"},
{"lineNum":" 1006","line":"  EIGEN_STRONG_INLINE void loadLhsUnaligned(const LhsScalar* a, LhsPacketType& dest) const"},
{"lineNum":" 1007","line":"  {"},
{"lineNum":" 1008","line":"    dest = ploaddup<LhsPacketType>(a);"},
{"lineNum":" 1009","line":"  }"},
{"lineNum":" 1010","line":""},
{"lineNum":" 1011","line":"  template <typename LhsPacketType, typename RhsPacketType, typename AccPacketType, typename LaneIdType>"},
{"lineNum":" 1012","line":"  EIGEN_STRONG_INLINE void madd(const LhsPacketType& a, const RhsPacketType& b, AccPacketType& c, RhsPacketType& tmp, const LaneIdType&) const"},
{"lineNum":" 1013","line":"  {"},
{"lineNum":" 1014","line":"    madd_impl(a, b, c, tmp, typename conditional<Vectorizable,true_type,false_type>::type());"},
{"lineNum":" 1015","line":"  }"},
{"lineNum":" 1016","line":""},
{"lineNum":" 1017","line":"  template <typename LhsPacketType, typename RhsPacketType, typename AccPacketType>"},
{"lineNum":" 1018","line":"  EIGEN_STRONG_INLINE void madd_impl(const LhsPacketType& a, const RhsPacketType& b, AccPacketType& c, RhsPacketType& tmp, const true_type&) const"},
{"lineNum":" 1019","line":"  {"},
{"lineNum":" 1020","line":"#ifdef EIGEN_HAS_SINGLE_INSTRUCTION_MADD"},
{"lineNum":" 1021","line":"    EIGEN_UNUSED_VARIABLE(tmp);"},
{"lineNum":" 1022","line":"    c.v = pmadd(a,b.v,c.v);"},
{"lineNum":" 1023","line":"#else"},
{"lineNum":" 1024","line":"    tmp = b; tmp.v = pmul(a,tmp.v); c = padd(c,tmp);"},
{"lineNum":" 1025","line":"#endif"},
{"lineNum":" 1026","line":""},
{"lineNum":" 1027","line":"  }"},
{"lineNum":" 1028","line":""},
{"lineNum":" 1029","line":"  EIGEN_STRONG_INLINE void madd_impl(const LhsScalar& a, const RhsScalar& b, ResScalar& c, RhsScalar& /*tmp*/, const false_type&) const"},
{"lineNum":" 1030","line":"  {"},
{"lineNum":" 1031","line":"    c += a * b;"},
{"lineNum":" 1032","line":"  }"},
{"lineNum":" 1033","line":""},
{"lineNum":" 1034","line":"  template<typename LhsPacketType, typename AccPacketType, typename LaneIdType>"},
{"lineNum":" 1035","line":"  EIGEN_STRONG_INLINE void madd(const LhsPacketType& a, const RhsPacketx4& b, AccPacketType& c, RhsPacket& tmp, const LaneIdType& lane) const"},
{"lineNum":" 1036","line":"  {"},
{"lineNum":" 1037","line":"    madd(a, b.get(lane), c, tmp, lane);"},
{"lineNum":" 1038","line":"  }"},
{"lineNum":" 1039","line":""},
{"lineNum":" 1040","line":"  template <typename ResPacketType, typename AccPacketType>"},
{"lineNum":" 1041","line":"  EIGEN_STRONG_INLINE void acc(const AccPacketType& c, const ResPacketType& alpha, ResPacketType& r) const"},
{"lineNum":" 1042","line":"  {"},
{"lineNum":" 1043","line":"    conj_helper<ResPacketType,ResPacketType,false,ConjRhs> cj;"},
{"lineNum":" 1044","line":"    r = cj.pmadd(alpha,c,r);"},
{"lineNum":" 1045","line":"  }"},
{"lineNum":" 1046","line":""},
{"lineNum":" 1047","line":"protected:"},
{"lineNum":" 1048","line":""},
{"lineNum":" 1049","line":"};"},
{"lineNum":" 1050","line":""},
{"lineNum":" 1051","line":"/* optimized General packed Block * packed Panel product kernel"},
{"lineNum":" 1052","line":" *"},
{"lineNum":" 1053","line":" * Mixing type logic: C += A * B"},
{"lineNum":" 1054","line":" *  |  A  |  B  | comments"},
{"lineNum":" 1055","line":" *  |real |cplx | no vectorization yet, would require to pack A with duplication"},
{"lineNum":" 1056","line":" *  |cplx |real | easy vectorization"},
{"lineNum":" 1057","line":" */"},
{"lineNum":" 1058","line":"template<typename LhsScalar, typename RhsScalar, typename Index, typename DataMapper, int mr, int nr, bool ConjugateLhs, bool ConjugateRhs>"},
{"lineNum":" 1059","line":"struct gebp_kernel"},
{"lineNum":" 1060","line":"{"},
{"lineNum":" 1061","line":"  typedef gebp_traits<LhsScalar,RhsScalar,ConjugateLhs,ConjugateRhs,Architecture::Target> Traits;"},
{"lineNum":" 1062","line":"  typedef gebp_traits<LhsScalar,RhsScalar,ConjugateLhs,ConjugateRhs,Architecture::Target,GEBPPacketHalf> HalfTraits;"},
{"lineNum":" 1063","line":"  typedef gebp_traits<LhsScalar,RhsScalar,ConjugateLhs,ConjugateRhs,Architecture::Target,GEBPPacketQuarter> QuarterTraits;"},
{"lineNum":" 1064","line":""},
{"lineNum":" 1065","line":"  typedef typename Traits::ResScalar ResScalar;"},
{"lineNum":" 1066","line":"  typedef typename Traits::LhsPacket LhsPacket;"},
{"lineNum":" 1067","line":"  typedef typename Traits::RhsPacket RhsPacket;"},
{"lineNum":" 1068","line":"  typedef typename Traits::ResPacket ResPacket;"},
{"lineNum":" 1069","line":"  typedef typename Traits::AccPacket AccPacket;"},
{"lineNum":" 1070","line":"  typedef typename Traits::RhsPacketx4 RhsPacketx4;"},
{"lineNum":" 1071","line":""},
{"lineNum":" 1072","line":"  typedef typename RhsPanelHelper<RhsPacket, RhsPacketx4, 15>::type RhsPanel15;"},
{"lineNum":" 1073","line":""},
{"lineNum":" 1074","line":"  typedef gebp_traits<RhsScalar,LhsScalar,ConjugateRhs,ConjugateLhs,Architecture::Target> SwappedTraits;"},
{"lineNum":" 1075","line":""},
{"lineNum":" 1076","line":"  typedef typename SwappedTraits::ResScalar SResScalar;"},
{"lineNum":" 1077","line":"  typedef typename SwappedTraits::LhsPacket SLhsPacket;"},
{"lineNum":" 1078","line":"  typedef typename SwappedTraits::RhsPacket SRhsPacket;"},
{"lineNum":" 1079","line":"  typedef typename SwappedTraits::ResPacket SResPacket;"},
{"lineNum":" 1080","line":"  typedef typename SwappedTraits::AccPacket SAccPacket;"},
{"lineNum":" 1081","line":""},
{"lineNum":" 1082","line":"  typedef typename HalfTraits::LhsPacket LhsPacketHalf;"},
{"lineNum":" 1083","line":"  typedef typename HalfTraits::RhsPacket RhsPacketHalf;"},
{"lineNum":" 1084","line":"  typedef typename HalfTraits::ResPacket ResPacketHalf;"},
{"lineNum":" 1085","line":"  typedef typename HalfTraits::AccPacket AccPacketHalf;"},
{"lineNum":" 1086","line":""},
{"lineNum":" 1087","line":"  typedef typename QuarterTraits::LhsPacket LhsPacketQuarter;"},
{"lineNum":" 1088","line":"  typedef typename QuarterTraits::RhsPacket RhsPacketQuarter;"},
{"lineNum":" 1089","line":"  typedef typename QuarterTraits::ResPacket ResPacketQuarter;"},
{"lineNum":" 1090","line":"  typedef typename QuarterTraits::AccPacket AccPacketQuarter;"},
{"lineNum":" 1091","line":""},
{"lineNum":" 1092","line":"  typedef typename DataMapper::LinearMapper LinearMapper;"},
{"lineNum":" 1093","line":""},
{"lineNum":" 1094","line":"  enum {"},
{"lineNum":" 1095","line":"    Vectorizable  = Traits::Vectorizable,"},
{"lineNum":" 1096","line":"    LhsProgress   = Traits::LhsProgress,"},
{"lineNum":" 1097","line":"    LhsProgressHalf      = HalfTraits::LhsProgress,"},
{"lineNum":" 1098","line":"    LhsProgressQuarter   = QuarterTraits::LhsProgress,"},
{"lineNum":" 1099","line":"    RhsProgress   = Traits::RhsProgress,"},
{"lineNum":" 1100","line":"    RhsProgressHalf      = HalfTraits::RhsProgress,"},
{"lineNum":" 1101","line":"    RhsProgressQuarter   = QuarterTraits::RhsProgress,"},
{"lineNum":" 1102","line":"    ResPacketSize = Traits::ResPacketSize"},
{"lineNum":" 1103","line":"  };"},
{"lineNum":" 1104","line":""},
{"lineNum":" 1105","line":"  EIGEN_DONT_INLINE"},
{"lineNum":" 1106","line":"  void operator()(const DataMapper& res, const LhsScalar* blockA, const RhsScalar* blockB,"},
{"lineNum":" 1107","line":"                  Index rows, Index depth, Index cols, ResScalar alpha,"},
{"lineNum":" 1108","line":"                  Index strideA=-1, Index strideB=-1, Index offsetA=0, Index offsetB=0);"},
{"lineNum":" 1109","line":"};"},
{"lineNum":" 1110","line":""},
{"lineNum":" 1111","line":"template<typename LhsScalar, typename RhsScalar, typename Index, typename DataMapper, int mr, int nr, bool ConjugateLhs, bool ConjugateRhs,"},
{"lineNum":" 1112","line":"int SwappedLhsProgress = gebp_traits<RhsScalar,LhsScalar,ConjugateRhs,ConjugateLhs,Architecture::Target>::LhsProgress>"},
{"lineNum":" 1113","line":"struct last_row_process_16_packets"},
{"lineNum":" 1114","line":"{"},
{"lineNum":" 1115","line":"  typedef gebp_traits<LhsScalar,RhsScalar,ConjugateLhs,ConjugateRhs,Architecture::Target> Traits;"},
{"lineNum":" 1116","line":"  typedef gebp_traits<RhsScalar,LhsScalar,ConjugateRhs,ConjugateLhs,Architecture::Target> SwappedTraits;"},
{"lineNum":" 1117","line":""},
{"lineNum":" 1118","line":"  typedef typename Traits::ResScalar ResScalar;"},
{"lineNum":" 1119","line":"  typedef typename SwappedTraits::LhsPacket SLhsPacket;"},
{"lineNum":" 1120","line":"  typedef typename SwappedTraits::RhsPacket SRhsPacket;"},
{"lineNum":" 1121","line":"  typedef typename SwappedTraits::ResPacket SResPacket;"},
{"lineNum":" 1122","line":"  typedef typename SwappedTraits::AccPacket SAccPacket;"},
{"lineNum":" 1123","line":""},
{"lineNum":" 1124","line":"  EIGEN_STRONG_INLINE void operator()(const DataMapper& res, SwappedTraits &straits, const LhsScalar* blA,"},
{"lineNum":" 1125","line":"                  const RhsScalar* blB, Index depth, const Index endk, Index i, Index j2,"},
{"lineNum":" 1126","line":"                  ResScalar alpha, SAccPacket &C0)"},
{"lineNum":" 1127","line":"    {"},
{"lineNum":" 1128","line":"      EIGEN_UNUSED_VARIABLE(res);"},
{"lineNum":" 1129","line":"      EIGEN_UNUSED_VARIABLE(straits);"},
{"lineNum":" 1130","line":"      EIGEN_UNUSED_VARIABLE(blA);"},
{"lineNum":" 1131","line":"      EIGEN_UNUSED_VARIABLE(blB);"},
{"lineNum":" 1132","line":"      EIGEN_UNUSED_VARIABLE(depth);"},
{"lineNum":" 1133","line":"      EIGEN_UNUSED_VARIABLE(endk);"},
{"lineNum":" 1134","line":"      EIGEN_UNUSED_VARIABLE(i);"},
{"lineNum":" 1135","line":"      EIGEN_UNUSED_VARIABLE(j2);"},
{"lineNum":" 1136","line":"      EIGEN_UNUSED_VARIABLE(alpha);"},
{"lineNum":" 1137","line":"      EIGEN_UNUSED_VARIABLE(C0);"},
{"lineNum":" 1138","line":"    }"},
{"lineNum":" 1139","line":"};"},
{"lineNum":" 1140","line":""},
{"lineNum":" 1141","line":""},
{"lineNum":" 1142","line":"template<typename LhsScalar, typename RhsScalar, typename Index, typename DataMapper, int mr, int nr, bool ConjugateLhs, bool ConjugateRhs>"},
{"lineNum":" 1143","line":"struct last_row_process_16_packets<LhsScalar, RhsScalar, Index, DataMapper,  mr,  nr, ConjugateLhs,  ConjugateRhs, 16> {"},
{"lineNum":" 1144","line":"  typedef gebp_traits<LhsScalar,RhsScalar,ConjugateLhs,ConjugateRhs,Architecture::Target> Traits;"},
{"lineNum":" 1145","line":"  typedef gebp_traits<RhsScalar,LhsScalar,ConjugateRhs,ConjugateLhs,Architecture::Target> SwappedTraits;"},
{"lineNum":" 1146","line":""},
{"lineNum":" 1147","line":"  typedef typename Traits::ResScalar ResScalar;"},
{"lineNum":" 1148","line":"  typedef typename SwappedTraits::LhsPacket SLhsPacket;"},
{"lineNum":" 1149","line":"  typedef typename SwappedTraits::RhsPacket SRhsPacket;"},
{"lineNum":" 1150","line":"  typedef typename SwappedTraits::ResPacket SResPacket;"},
{"lineNum":" 1151","line":"  typedef typename SwappedTraits::AccPacket SAccPacket;"},
{"lineNum":" 1152","line":""},
{"lineNum":" 1153","line":"  EIGEN_STRONG_INLINE void operator()(const DataMapper& res, SwappedTraits &straits, const LhsScalar* blA,"},
{"lineNum":" 1154","line":"                  const RhsScalar* blB, Index depth, const Index endk, Index i, Index j2,"},
{"lineNum":" 1155","line":"                  ResScalar alpha, SAccPacket &C0)"},
{"lineNum":" 1156","line":"  {"},
{"lineNum":" 1157","line":"    typedef typename unpacket_traits<typename unpacket_traits<SResPacket>::half>::half SResPacketQuarter;"},
{"lineNum":" 1158","line":"    typedef typename unpacket_traits<typename unpacket_traits<SLhsPacket>::half>::half SLhsPacketQuarter;"},
{"lineNum":" 1159","line":"    typedef typename unpacket_traits<typename unpacket_traits<SRhsPacket>::half>::half SRhsPacketQuarter;"},
{"lineNum":" 1160","line":"    typedef typename unpacket_traits<typename unpacket_traits<SAccPacket>::half>::half SAccPacketQuarter;"},
{"lineNum":" 1161","line":""},
{"lineNum":" 1162","line":"    SResPacketQuarter R = res.template gatherPacket<SResPacketQuarter>(i, j2);"},
{"lineNum":" 1163","line":"    SResPacketQuarter alphav = pset1<SResPacketQuarter>(alpha);"},
{"lineNum":" 1164","line":""},
{"lineNum":" 1165","line":"    if (depth - endk > 0)"},
{"lineNum":" 1166","line":"      {"},
{"lineNum":" 1167","line":"\t// We have to handle the last row(s) of the rhs, which"},
{"lineNum":" 1168","line":"\t// correspond to a half-packet"},
{"lineNum":" 1169","line":"\tSAccPacketQuarter c0 = predux_half_dowto4(predux_half_dowto4(C0));"},
{"lineNum":" 1170","line":""},
{"lineNum":" 1171","line":"\tfor (Index kk = endk; kk < depth; kk++)"},
{"lineNum":" 1172","line":"\t  {"},
{"lineNum":" 1173","line":"\t    SLhsPacketQuarter a0;"},
{"lineNum":" 1174","line":"\t    SRhsPacketQuarter b0;"},
{"lineNum":" 1175","line":"\t    straits.loadLhsUnaligned(blB, a0);"},
{"lineNum":" 1176","line":"\t    straits.loadRhs(blA, b0);"},
{"lineNum":" 1177","line":"\t    straits.madd(a0,b0,c0,b0, fix<0>);"},
{"lineNum":" 1178","line":"\t    blB += SwappedTraits::LhsProgress/4;"},
{"lineNum":" 1179","line":"\t    blA += 1;"},
{"lineNum":" 1180","line":"\t  }"},
{"lineNum":" 1181","line":"\tstraits.acc(c0, alphav, R);"},
{"lineNum":" 1182","line":"      }"},
{"lineNum":" 1183","line":"    else"},
{"lineNum":" 1184","line":"      {"},
{"lineNum":" 1185","line":"\tstraits.acc(predux_half_dowto4(predux_half_dowto4(C0)), alphav, R);"},
{"lineNum":" 1186","line":"      }"},
{"lineNum":" 1187","line":"    res.scatterPacket(i, j2, R);"},
{"lineNum":" 1188","line":"  }"},
{"lineNum":" 1189","line":"};"},
{"lineNum":" 1190","line":""},
{"lineNum":" 1191","line":"template<int nr, Index LhsProgress, Index RhsProgress, typename LhsScalar, typename RhsScalar, typename ResScalar, typename AccPacket, typename LhsPacket, typename RhsPacket, typename ResPacket, typename GEBPTraits, typename LinearMapper, typename DataMapper>"},
{"lineNum":" 1192","line":"struct lhs_process_one_packet"},
{"lineNum":" 1193","line":"{"},
{"lineNum":" 1194","line":"  typedef typename GEBPTraits::RhsPacketx4 RhsPacketx4;"},
{"lineNum":" 1195","line":""},
{"lineNum":" 1196","line":"  EIGEN_STRONG_INLINE void peeled_kc_onestep(Index K, const LhsScalar* blA, const RhsScalar* blB, GEBPTraits traits, LhsPacket *A0, RhsPacketx4 *rhs_panel, RhsPacket *T0, AccPacket *C0, AccPacket *C1, AccPacket *C2, AccPacket *C3)"},
{"lineNum":" 1197","line":"  {"},
{"lineNum":" 1198","line":"    EIGEN_ASM_COMMENT(\"begin step of gebp micro kernel 1X4\");","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":" 1199","line":"    EIGEN_ASM_COMMENT(\"Note: these asm comments work around bug 935!\");","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":" 1200","line":"    traits.loadLhs(&blA[(0+1*K)*LhsProgress], *A0);"},
{"lineNum":" 1201","line":"    traits.loadRhs(&blB[(0+4*K)*RhsProgress], *rhs_panel);"},
{"lineNum":" 1202","line":"    traits.madd(*A0, *rhs_panel, *C0, *T0, fix<0>);"},
{"lineNum":" 1203","line":"    traits.madd(*A0, *rhs_panel, *C1, *T0, fix<1>);"},
{"lineNum":" 1204","line":"    traits.madd(*A0, *rhs_panel, *C2, *T0, fix<2>);"},
{"lineNum":" 1205","line":"    traits.madd(*A0, *rhs_panel, *C3, *T0, fix<3>);"},
{"lineNum":" 1206","line":"    #if EIGEN_GNUC_AT_LEAST(6,0) && defined(EIGEN_VECTORIZE_SSE)"},
{"lineNum":" 1207","line":"    __asm__  (\"\" : \"+x,m\" (*A0));"},
{"lineNum":" 1208","line":"    #endif"},
{"lineNum":" 1209","line":"    EIGEN_ASM_COMMENT(\"end step of gebp micro kernel 1X4\");","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":" 1210","line":"  }"},
{"lineNum":" 1211","line":""},
{"lineNum":" 1212","line":"  EIGEN_STRONG_INLINE void operator()("},
{"lineNum":" 1213","line":"    const DataMapper& res, const LhsScalar* blockA, const RhsScalar* blockB, ResScalar alpha,"},
{"lineNum":" 1214","line":"    Index peelStart, Index peelEnd, Index strideA, Index strideB, Index offsetA, Index offsetB,"},
{"lineNum":" 1215","line":"    int prefetch_res_offset, Index peeled_kc, Index pk, Index cols, Index depth, Index packet_cols4)"},
{"lineNum":" 1216","line":"  {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1217","line":"    GEBPTraits traits;"},
{"lineNum":" 1218","line":""},
{"lineNum":" 1219","line":"    // loops on each largest micro horizontal panel of lhs"},
{"lineNum":" 1220","line":"    // (LhsProgress x depth)"},
{"lineNum":" 1221","line":"    for(Index i=peelStart; i<peelEnd; i+=LhsProgress)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1222","line":"    {"},
{"lineNum":" 1223","line":"      // loops on each largest micro vertical panel of rhs (depth * nr)"},
{"lineNum":" 1224","line":"      for(Index j2=0; j2<packet_cols4; j2+=nr)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1225","line":"      {"},
{"lineNum":" 1226","line":"        // We select a LhsProgress x nr micro block of res"},
{"lineNum":" 1227","line":"        // which is entirely stored into 1 x nr registers."},
{"lineNum":" 1228","line":""},
{"lineNum":" 1229","line":"        const LhsScalar* blA = &blockA[i*strideA+offsetA*(LhsProgress)];"},
{"lineNum":" 1230","line":"        prefetch(&blA[0]);"},
{"lineNum":" 1231","line":""},
{"lineNum":" 1232","line":"        // gets res block as register"},
{"lineNum":" 1233","line":"        AccPacket C0, C1, C2, C3;"},
{"lineNum":" 1234","line":"        traits.initAcc(C0);"},
{"lineNum":" 1235","line":"        traits.initAcc(C1);"},
{"lineNum":" 1236","line":"        traits.initAcc(C2);"},
{"lineNum":" 1237","line":"        traits.initAcc(C3);"},
{"lineNum":" 1238","line":"        // To improve instruction pipelining, let\'s double the accumulation registers:"},
{"lineNum":" 1239","line":"        //  even k will accumulate in C*, while odd k will accumulate in D*."},
{"lineNum":" 1240","line":"        // This trick is crutial to get good performance with FMA, otherwise it is"},
{"lineNum":" 1241","line":"        // actually faster to perform separated MUL+ADD because of a naturally"},
{"lineNum":" 1242","line":"        // better instruction-level parallelism."},
{"lineNum":" 1243","line":"        AccPacket D0, D1, D2, D3;"},
{"lineNum":" 1244","line":"        traits.initAcc(D0);"},
{"lineNum":" 1245","line":"        traits.initAcc(D1);"},
{"lineNum":" 1246","line":"        traits.initAcc(D2);"},
{"lineNum":" 1247","line":"        traits.initAcc(D3);"},
{"lineNum":" 1248","line":""},
{"lineNum":" 1249","line":"        LinearMapper r0 = res.getLinearMapper(i, j2 + 0);"},
{"lineNum":" 1250","line":"        LinearMapper r1 = res.getLinearMapper(i, j2 + 1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1251","line":"        LinearMapper r2 = res.getLinearMapper(i, j2 + 2);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1252","line":"        LinearMapper r3 = res.getLinearMapper(i, j2 + 3);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1253","line":""},
{"lineNum":" 1254","line":"        r0.prefetch(prefetch_res_offset);"},
{"lineNum":" 1255","line":"        r1.prefetch(prefetch_res_offset);"},
{"lineNum":" 1256","line":"        r2.prefetch(prefetch_res_offset);"},
{"lineNum":" 1257","line":"        r3.prefetch(prefetch_res_offset);"},
{"lineNum":" 1258","line":""},
{"lineNum":" 1259","line":"        // performs \"inner\" products"},
{"lineNum":" 1260","line":"        const RhsScalar* blB = &blockB[j2*strideB+offsetB*nr];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1261","line":"        prefetch(&blB[0]);"},
{"lineNum":" 1262","line":"        LhsPacket A0, A1;"},
{"lineNum":" 1263","line":""},
{"lineNum":" 1264","line":"        for(Index k=0; k<peeled_kc; k+=pk)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1265","line":"        {"},
{"lineNum":" 1266","line":"          EIGEN_ASM_COMMENT(\"begin gebp micro kernel 1/half/quarterX4\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1267","line":"          RhsPacketx4 rhs_panel;"},
{"lineNum":" 1268","line":"          RhsPacket T0;"},
{"lineNum":" 1269","line":""},
{"lineNum":" 1270","line":"          internal::prefetch(blB+(48+0));"},
{"lineNum":" 1271","line":"          peeled_kc_onestep(0, blA, blB, traits, &A0, &rhs_panel, &T0, &C0, &C1, &C2, &C3);"},
{"lineNum":" 1272","line":"          peeled_kc_onestep(1, blA, blB, traits, &A1, &rhs_panel, &T0, &D0, &D1, &D2, &D3);"},
{"lineNum":" 1273","line":"          peeled_kc_onestep(2, blA, blB, traits, &A0, &rhs_panel, &T0, &C0, &C1, &C2, &C3);"},
{"lineNum":" 1274","line":"          peeled_kc_onestep(3, blA, blB, traits, &A1, &rhs_panel, &T0, &D0, &D1, &D2, &D3);"},
{"lineNum":" 1275","line":"          internal::prefetch(blB+(48+16));"},
{"lineNum":" 1276","line":"          peeled_kc_onestep(4, blA, blB, traits, &A0, &rhs_panel, &T0, &C0, &C1, &C2, &C3);"},
{"lineNum":" 1277","line":"          peeled_kc_onestep(5, blA, blB, traits, &A1, &rhs_panel, &T0, &D0, &D1, &D2, &D3);"},
{"lineNum":" 1278","line":"          peeled_kc_onestep(6, blA, blB, traits, &A0, &rhs_panel, &T0, &C0, &C1, &C2, &C3);"},
{"lineNum":" 1279","line":"          peeled_kc_onestep(7, blA, blB, traits, &A1, &rhs_panel, &T0, &D0, &D1, &D2, &D3);"},
{"lineNum":" 1280","line":""},
{"lineNum":" 1281","line":"          blB += pk*4*RhsProgress;"},
{"lineNum":" 1282","line":"          blA += pk*LhsProgress;"},
{"lineNum":" 1283","line":""},
{"lineNum":" 1284","line":"          EIGEN_ASM_COMMENT(\"end gebp micro kernel 1/half/quarterX4\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1285","line":"        }"},
{"lineNum":" 1286","line":"        C0 = padd(C0,D0);"},
{"lineNum":" 1287","line":"        C1 = padd(C1,D1);"},
{"lineNum":" 1288","line":"        C2 = padd(C2,D2);"},
{"lineNum":" 1289","line":"        C3 = padd(C3,D3);"},
{"lineNum":" 1290","line":""},
{"lineNum":" 1291","line":"        // process remaining peeled loop"},
{"lineNum":" 1292","line":"        for(Index k=peeled_kc; k<depth; k++)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1293","line":"        {"},
{"lineNum":" 1294","line":"          RhsPacketx4 rhs_panel;"},
{"lineNum":" 1295","line":"          RhsPacket T0;"},
{"lineNum":" 1296","line":"          peeled_kc_onestep(0, blA, blB, traits, &A0, &rhs_panel, &T0, &C0, &C1, &C2, &C3);"},
{"lineNum":" 1297","line":"          blB += 4*RhsProgress;"},
{"lineNum":" 1298","line":"          blA += LhsProgress;"},
{"lineNum":" 1299","line":"        }"},
{"lineNum":" 1300","line":""},
{"lineNum":" 1301","line":"        ResPacket R0, R1;"},
{"lineNum":" 1302","line":"        ResPacket alphav = pset1<ResPacket>(alpha);"},
{"lineNum":" 1303","line":""},
{"lineNum":" 1304","line":"        R0 = r0.template loadPacket<ResPacket>(0);"},
{"lineNum":" 1305","line":"        R1 = r1.template loadPacket<ResPacket>(0);"},
{"lineNum":" 1306","line":"        traits.acc(C0, alphav, R0);"},
{"lineNum":" 1307","line":"        traits.acc(C1,  alphav, R1);"},
{"lineNum":" 1308","line":"        r0.storePacket(0, R0);"},
{"lineNum":" 1309","line":"        r1.storePacket(0, R1);"},
{"lineNum":" 1310","line":""},
{"lineNum":" 1311","line":"        R0 = r2.template loadPacket<ResPacket>(0);"},
{"lineNum":" 1312","line":"        R1 = r3.template loadPacket<ResPacket>(0);"},
{"lineNum":" 1313","line":"        traits.acc(C2,  alphav, R0);"},
{"lineNum":" 1314","line":"        traits.acc(C3,  alphav, R1);"},
{"lineNum":" 1315","line":"        r2.storePacket(0, R0);"},
{"lineNum":" 1316","line":"        r3.storePacket(0, R1);"},
{"lineNum":" 1317","line":"      }"},
{"lineNum":" 1318","line":""},
{"lineNum":" 1319","line":"      // Deal with remaining columns of the rhs"},
{"lineNum":" 1320","line":"      for(Index j2=packet_cols4; j2<cols; j2++)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1321","line":"      {"},
{"lineNum":" 1322","line":"        // One column at a time"},
{"lineNum":" 1323","line":"        const LhsScalar* blA = &blockA[i*strideA+offsetA*(LhsProgress)];"},
{"lineNum":" 1324","line":"        prefetch(&blA[0]);"},
{"lineNum":" 1325","line":""},
{"lineNum":" 1326","line":"        // gets res block as register"},
{"lineNum":" 1327","line":"        AccPacket C0;"},
{"lineNum":" 1328","line":"        traits.initAcc(C0);"},
{"lineNum":" 1329","line":""},
{"lineNum":" 1330","line":"        LinearMapper r0 = res.getLinearMapper(i, j2);"},
{"lineNum":" 1331","line":""},
{"lineNum":" 1332","line":"        // performs \"inner\" products"},
{"lineNum":" 1333","line":"        const RhsScalar* blB = &blockB[j2*strideB+offsetB];"},
{"lineNum":" 1334","line":"        LhsPacket A0;"},
{"lineNum":" 1335","line":""},
{"lineNum":" 1336","line":"        for(Index k= 0; k<peeled_kc; k+=pk)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1337","line":"        {"},
{"lineNum":" 1338","line":"          EIGEN_ASM_COMMENT(\"begin gebp micro kernel 1/half/quarterX1\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1339","line":"          RhsPacket B_0;"},
{"lineNum":" 1340","line":""},
{"lineNum":" 1341","line":"#define EIGEN_GEBGP_ONESTEP(K)                                          \\"},
{"lineNum":" 1342","line":"\t      do {                                                      \\"},
{"lineNum":" 1343","line":"\t\tEIGEN_ASM_COMMENT(\"begin step of gebp micro kernel 1/half/quarterX1\"); \\"},
{"lineNum":" 1344","line":"\t\tEIGEN_ASM_COMMENT(\"Note: these asm comments work around bug 935!\"); \\"},
{"lineNum":" 1345","line":"    /* FIXME: why unaligned???? */ \\"},
{"lineNum":" 1346","line":"\t\ttraits.loadLhsUnaligned(&blA[(0+1*K)*LhsProgress], A0); \\"},
{"lineNum":" 1347","line":"\t\ttraits.loadRhs(&blB[(0+K)*RhsProgress], B_0);\t\t\\"},
{"lineNum":" 1348","line":"\t\ttraits.madd(A0, B_0, C0, B_0, fix<0>);\t\t\t\t\\"},
{"lineNum":" 1349","line":"\t\tEIGEN_ASM_COMMENT(\"end step of gebp micro kernel 1/half/quarterX1\"); \\"},
{"lineNum":" 1350","line":"\t      } while(false);"},
{"lineNum":" 1351","line":""},
{"lineNum":" 1352","line":"          EIGEN_GEBGP_ONESTEP(0);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1353","line":"          EIGEN_GEBGP_ONESTEP(1);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1354","line":"          EIGEN_GEBGP_ONESTEP(2);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1355","line":"          EIGEN_GEBGP_ONESTEP(3);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1356","line":"          EIGEN_GEBGP_ONESTEP(4);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1357","line":"          EIGEN_GEBGP_ONESTEP(5);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1358","line":"          EIGEN_GEBGP_ONESTEP(6);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1359","line":"          EIGEN_GEBGP_ONESTEP(7);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1360","line":""},
{"lineNum":" 1361","line":"          blB += pk*RhsProgress;"},
{"lineNum":" 1362","line":"          blA += pk*LhsProgress;"},
{"lineNum":" 1363","line":""},
{"lineNum":" 1364","line":"          EIGEN_ASM_COMMENT(\"end gebp micro kernel 1/half/quarterX1\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1365","line":"        }"},
{"lineNum":" 1366","line":""},
{"lineNum":" 1367","line":"        // process remaining peeled loop"},
{"lineNum":" 1368","line":"        for(Index k=peeled_kc; k<depth; k++)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1369","line":"        {"},
{"lineNum":" 1370","line":"          RhsPacket B_0;"},
{"lineNum":" 1371","line":"          EIGEN_GEBGP_ONESTEP(0);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1372","line":"          blB += RhsProgress;"},
{"lineNum":" 1373","line":"          blA += LhsProgress;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1374","line":"        }"},
{"lineNum":" 1375","line":"#undef EIGEN_GEBGP_ONESTEP"},
{"lineNum":" 1376","line":"        ResPacket R0;"},
{"lineNum":" 1377","line":"        ResPacket alphav = pset1<ResPacket>(alpha);"},
{"lineNum":" 1378","line":"        R0 = r0.template loadPacket<ResPacket>(0);"},
{"lineNum":" 1379","line":"        traits.acc(C0, alphav, R0);"},
{"lineNum":" 1380","line":"        r0.storePacket(0, R0);"},
{"lineNum":" 1381","line":"      }"},
{"lineNum":" 1382","line":"    }"},
{"lineNum":" 1383","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1384","line":"};"},
{"lineNum":" 1385","line":""},
{"lineNum":" 1386","line":"template<int nr, Index LhsProgress, Index RhsProgress, typename LhsScalar, typename RhsScalar, typename ResScalar, typename AccPacket, typename LhsPacket, typename RhsPacket, typename ResPacket, typename GEBPTraits, typename LinearMapper, typename DataMapper>"},
{"lineNum":" 1387","line":"struct lhs_process_fraction_of_packet : lhs_process_one_packet<nr, LhsProgress, RhsProgress, LhsScalar, RhsScalar, ResScalar, AccPacket, LhsPacket, RhsPacket, ResPacket, GEBPTraits, LinearMapper, DataMapper>"},
{"lineNum":" 1388","line":"{"},
{"lineNum":" 1389","line":""},
{"lineNum":" 1390","line":"EIGEN_STRONG_INLINE void peeled_kc_onestep(Index K, const LhsScalar* blA, const RhsScalar* blB, GEBPTraits traits, LhsPacket *A0, RhsPacket *B_0, RhsPacket *B1, RhsPacket *B2, RhsPacket *B3, AccPacket *C0, AccPacket *C1, AccPacket *C2, AccPacket *C3)"},
{"lineNum":" 1391","line":"  {"},
{"lineNum":" 1392","line":"        EIGEN_ASM_COMMENT(\"begin step of gebp micro kernel 1X4\");"},
{"lineNum":" 1393","line":"        EIGEN_ASM_COMMENT(\"Note: these asm comments work around bug 935!\");"},
{"lineNum":" 1394","line":"        traits.loadLhsUnaligned(&blA[(0+1*K)*(LhsProgress)], *A0);"},
{"lineNum":" 1395","line":"        traits.broadcastRhs(&blB[(0+4*K)*RhsProgress], *B_0, *B1, *B2, *B3);"},
{"lineNum":" 1396","line":"        traits.madd(*A0, *B_0, *C0, *B_0);"},
{"lineNum":" 1397","line":"        traits.madd(*A0, *B1,  *C1, *B1);"},
{"lineNum":" 1398","line":"        traits.madd(*A0, *B2,  *C2, *B2);"},
{"lineNum":" 1399","line":"        traits.madd(*A0, *B3,  *C3, *B3);"},
{"lineNum":" 1400","line":"        EIGEN_ASM_COMMENT(\"end step of gebp micro kernel 1X4\");"},
{"lineNum":" 1401","line":"  }"},
{"lineNum":" 1402","line":"};"},
{"lineNum":" 1403","line":""},
{"lineNum":" 1404","line":"template<typename LhsScalar, typename RhsScalar, typename Index, typename DataMapper, int mr, int nr, bool ConjugateLhs, bool ConjugateRhs>"},
{"lineNum":" 1405","line":"EIGEN_DONT_INLINE"},
{"lineNum":" 1406","line":"void gebp_kernel<LhsScalar,RhsScalar,Index,DataMapper,mr,nr,ConjugateLhs,ConjugateRhs>"},
{"lineNum":" 1407","line":"  ::operator()(const DataMapper& res, const LhsScalar* blockA, const RhsScalar* blockB,"},
{"lineNum":" 1408","line":"               Index rows, Index depth, Index cols, ResScalar alpha,"},
{"lineNum":" 1409","line":"               Index strideA, Index strideB, Index offsetA, Index offsetB)"},
{"lineNum":" 1410","line":"  {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1411","line":"    Traits traits;"},
{"lineNum":" 1412","line":"    SwappedTraits straits;"},
{"lineNum":" 1413","line":""},
{"lineNum":" 1414","line":"    if(strideA==-1) strideA = depth;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1415","line":"    if(strideB==-1) strideB = depth;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1416","line":"    conj_helper<LhsScalar,RhsScalar,ConjugateLhs,ConjugateRhs> cj;"},
{"lineNum":" 1417","line":"    Index packet_cols4 = nr>=4 ? (cols/4) * 4 : 0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1418","line":"    const Index peeled_mc3 = mr>=3*Traits::LhsProgress ? (rows/(3*LhsProgress))*(3*LhsProgress) : 0;"},
{"lineNum":" 1419","line":"    const Index peeled_mc2 = mr>=2*Traits::LhsProgress ? peeled_mc3+((rows-peeled_mc3)/(2*LhsProgress))*(2*LhsProgress) : 0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1420","line":"    const Index peeled_mc1 = mr>=1*Traits::LhsProgress ? peeled_mc2+((rows-peeled_mc2)/(1*LhsProgress))*(1*LhsProgress) : 0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1421","line":"    const Index peeled_mc_half = mr>=LhsProgressHalf ? peeled_mc1+((rows-peeled_mc1)/(LhsProgressHalf))*(LhsProgressHalf) : 0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1422","line":"    const Index peeled_mc_quarter = mr>=LhsProgressQuarter ? peeled_mc_half+((rows-peeled_mc_half)/(LhsProgressQuarter))*(LhsProgressQuarter) : 0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1423","line":"    enum { pk = 8 }; // NOTE Such a large peeling factor is important for large matrices (~ +5% when >1000 on Haswell)"},
{"lineNum":" 1424","line":"    const Index peeled_kc  = depth & ~(pk-1);"},
{"lineNum":" 1425","line":"    const int prefetch_res_offset = 32/sizeof(ResScalar);"},
{"lineNum":" 1426","line":"//     const Index depth2     = depth & ~1;"},
{"lineNum":" 1427","line":""},
{"lineNum":" 1428","line":"    //---------- Process 3 * LhsProgress rows at once ----------"},
{"lineNum":" 1429","line":"    // This corresponds to 3*LhsProgress x nr register blocks."},
{"lineNum":" 1430","line":"    // Usually, make sense only with FMA"},
{"lineNum":" 1431","line":"    if(mr>=3*Traits::LhsProgress)"},
{"lineNum":" 1432","line":"    {"},
{"lineNum":" 1433","line":"      // Here, the general idea is to loop on each largest micro horizontal panel of the lhs (3*Traits::LhsProgress x depth)"},
{"lineNum":" 1434","line":"      // and on each largest micro vertical panel of the rhs (depth * nr)."},
{"lineNum":" 1435","line":"      // Blocking sizes, i.e., \'depth\' has been computed so that the micro horizontal panel of the lhs fit in L1."},
{"lineNum":" 1436","line":"      // However, if depth is too small, we can extend the number of rows of these horizontal panels."},
{"lineNum":" 1437","line":"      // This actual number of rows is computed as follow:"},
{"lineNum":" 1438","line":"      const Index l1 = defaultL1CacheSize; // in Bytes, TODO, l1 should be passed to this function."},
{"lineNum":" 1439","line":"      // The max(1, ...) here is needed because we may be using blocking params larger than what our known l1 cache size"},
{"lineNum":" 1440","line":"      // suggests we should be using: either because our known l1 cache size is inaccurate (e.g. on Android, we can only guess),"},
{"lineNum":" 1441","line":"      // or because we are testing specific blocking sizes."},
{"lineNum":" 1442","line":"      const Index actual_panel_rows = (3*LhsProgress) * std::max<Index>(1,( (l1 - sizeof(ResScalar)*mr*nr - depth*nr*sizeof(RhsScalar)) / (depth * sizeof(LhsScalar) * 3*LhsProgress) ));"},
{"lineNum":" 1443","line":"      for(Index i1=0; i1<peeled_mc3; i1+=actual_panel_rows)"},
{"lineNum":" 1444","line":"      {"},
{"lineNum":" 1445","line":"        const Index actual_panel_end = (std::min)(i1+actual_panel_rows, peeled_mc3);"},
{"lineNum":" 1446","line":"        for(Index j2=0; j2<packet_cols4; j2+=nr)"},
{"lineNum":" 1447","line":"        {"},
{"lineNum":" 1448","line":"          for(Index i=i1; i<actual_panel_end; i+=3*LhsProgress)"},
{"lineNum":" 1449","line":"          {"},
{"lineNum":" 1450","line":""},
{"lineNum":" 1451","line":"          // We selected a 3*Traits::LhsProgress x nr micro block of res which is entirely"},
{"lineNum":" 1452","line":"          // stored into 3 x nr registers."},
{"lineNum":" 1453","line":""},
{"lineNum":" 1454","line":"          const LhsScalar* blA = &blockA[i*strideA+offsetA*(3*LhsProgress)];"},
{"lineNum":" 1455","line":"          prefetch(&blA[0]);"},
{"lineNum":" 1456","line":""},
{"lineNum":" 1457","line":"          // gets res block as register"},
{"lineNum":" 1458","line":"          AccPacket C0, C1, C2,  C3,"},
{"lineNum":" 1459","line":"                    C4, C5, C6,  C7,"},
{"lineNum":" 1460","line":"                    C8, C9, C10, C11;"},
{"lineNum":" 1461","line":"          traits.initAcc(C0);  traits.initAcc(C1);  traits.initAcc(C2);  traits.initAcc(C3);"},
{"lineNum":" 1462","line":"          traits.initAcc(C4);  traits.initAcc(C5);  traits.initAcc(C6);  traits.initAcc(C7);"},
{"lineNum":" 1463","line":"          traits.initAcc(C8);  traits.initAcc(C9);  traits.initAcc(C10); traits.initAcc(C11);"},
{"lineNum":" 1464","line":""},
{"lineNum":" 1465","line":"          LinearMapper r0 = res.getLinearMapper(i, j2 + 0);"},
{"lineNum":" 1466","line":"          LinearMapper r1 = res.getLinearMapper(i, j2 + 1);"},
{"lineNum":" 1467","line":"          LinearMapper r2 = res.getLinearMapper(i, j2 + 2);"},
{"lineNum":" 1468","line":"          LinearMapper r3 = res.getLinearMapper(i, j2 + 3);"},
{"lineNum":" 1469","line":""},
{"lineNum":" 1470","line":"          r0.prefetch(0);"},
{"lineNum":" 1471","line":"          r1.prefetch(0);"},
{"lineNum":" 1472","line":"          r2.prefetch(0);"},
{"lineNum":" 1473","line":"          r3.prefetch(0);"},
{"lineNum":" 1474","line":""},
{"lineNum":" 1475","line":"          // performs \"inner\" products"},
{"lineNum":" 1476","line":"          const RhsScalar* blB = &blockB[j2*strideB+offsetB*nr];"},
{"lineNum":" 1477","line":"          prefetch(&blB[0]);"},
{"lineNum":" 1478","line":"          LhsPacket A0, A1;"},
{"lineNum":" 1479","line":""},
{"lineNum":" 1480","line":"          for(Index k=0; k<peeled_kc; k+=pk)"},
{"lineNum":" 1481","line":"          {"},
{"lineNum":" 1482","line":"            EIGEN_ASM_COMMENT(\"begin gebp micro kernel 3pX4\");"},
{"lineNum":" 1483","line":"            // 15 registers are taken (12 for acc, 2 for lhs)."},
{"lineNum":" 1484","line":"            RhsPanel15 rhs_panel;"},
{"lineNum":" 1485","line":"            RhsPacket T0;"},
{"lineNum":" 1486","line":"            LhsPacket A2;"},
{"lineNum":" 1487","line":"            #if EIGEN_COMP_GNUC_STRICT && EIGEN_ARCH_ARM64 && defined(EIGEN_VECTORIZE_NEON) && !(EIGEN_GNUC_AT_LEAST(9,0))"},
{"lineNum":" 1488","line":"            // see http://eigen.tuxfamily.org/bz/show_bug.cgi?id=1633"},
{"lineNum":" 1489","line":"            // without this workaround A0, A1, and A2 are loaded in the same register,"},
{"lineNum":" 1490","line":"            // which is not good for pipelining"},
{"lineNum":" 1491","line":"            #define EIGEN_GEBP_3PX4_REGISTER_ALLOC_WORKAROUND __asm__  (\"\" : \"+w,m\" (A0), \"+w,m\" (A1), \"+w,m\" (A2));"},
{"lineNum":" 1492","line":"            #else"},
{"lineNum":" 1493","line":"            #define EIGEN_GEBP_3PX4_REGISTER_ALLOC_WORKAROUND"},
{"lineNum":" 1494","line":"            #endif"},
{"lineNum":" 1495","line":"#define EIGEN_GEBP_ONESTEP(K)                                                     \\"},
{"lineNum":" 1496","line":"            do {                                                                  \\"},
{"lineNum":" 1497","line":"              EIGEN_ASM_COMMENT(\"begin step of gebp micro kernel 3pX4\");          \\"},
{"lineNum":" 1498","line":"              EIGEN_ASM_COMMENT(\"Note: these asm comments work around bug 935!\"); \\"},
{"lineNum":" 1499","line":"              internal::prefetch(blA + (3 * K + 16) * LhsProgress);               \\"},
{"lineNum":" 1500","line":"              if (EIGEN_ARCH_ARM || EIGEN_ARCH_MIPS) {                            \\"},
{"lineNum":" 1501","line":"                internal::prefetch(blB + (4 * K + 16) * RhsProgress);             \\"},
{"lineNum":" 1502","line":"              } /* Bug 953 */                                                     \\"},
{"lineNum":" 1503","line":"              traits.loadLhs(&blA[(0 + 3 * K) * LhsProgress], A0);                \\"},
{"lineNum":" 1504","line":"              traits.loadLhs(&blA[(1 + 3 * K) * LhsProgress], A1);                \\"},
{"lineNum":" 1505","line":"              traits.loadLhs(&blA[(2 + 3 * K) * LhsProgress], A2);                \\"},
{"lineNum":" 1506","line":"              EIGEN_GEBP_3PX4_REGISTER_ALLOC_WORKAROUND \\"},
{"lineNum":" 1507","line":"              traits.loadRhs(blB + (0+4*K) * Traits::RhsProgress, rhs_panel);     \\"},
{"lineNum":" 1508","line":"              traits.madd(A0, rhs_panel, C0, T0, fix<0>);                         \\"},
{"lineNum":" 1509","line":"              traits.madd(A1, rhs_panel, C4, T0, fix<0>);                         \\"},
{"lineNum":" 1510","line":"              traits.madd(A2, rhs_panel, C8, T0, fix<0>);                         \\"},
{"lineNum":" 1511","line":"              traits.updateRhs(blB + (1+4*K) * Traits::RhsProgress, rhs_panel);   \\"},
{"lineNum":" 1512","line":"              traits.madd(A0, rhs_panel, C1, T0, fix<1>);                         \\"},
{"lineNum":" 1513","line":"              traits.madd(A1, rhs_panel, C5, T0, fix<1>);                         \\"},
{"lineNum":" 1514","line":"              traits.madd(A2, rhs_panel, C9, T0, fix<1>);                         \\"},
{"lineNum":" 1515","line":"              traits.updateRhs(blB + (2+4*K) * Traits::RhsProgress, rhs_panel);   \\"},
{"lineNum":" 1516","line":"              traits.madd(A0, rhs_panel, C2, T0, fix<2>);                         \\"},
{"lineNum":" 1517","line":"              traits.madd(A1, rhs_panel, C6, T0, fix<2>);                         \\"},
{"lineNum":" 1518","line":"              traits.madd(A2, rhs_panel, C10, T0, fix<2>);                        \\"},
{"lineNum":" 1519","line":"              traits.updateRhs(blB + (3+4*K) * Traits::RhsProgress, rhs_panel);   \\"},
{"lineNum":" 1520","line":"              traits.madd(A0, rhs_panel, C3, T0, fix<3>);                         \\"},
{"lineNum":" 1521","line":"              traits.madd(A1, rhs_panel, C7, T0, fix<3>);                         \\"},
{"lineNum":" 1522","line":"              traits.madd(A2, rhs_panel, C11, T0, fix<3>);                        \\"},
{"lineNum":" 1523","line":"              EIGEN_ASM_COMMENT(\"end step of gebp micro kernel 3pX4\");            \\"},
{"lineNum":" 1524","line":"            } while (false)"},
{"lineNum":" 1525","line":""},
{"lineNum":" 1526","line":"            internal::prefetch(blB);"},
{"lineNum":" 1527","line":"            EIGEN_GEBP_ONESTEP(0);"},
{"lineNum":" 1528","line":"            EIGEN_GEBP_ONESTEP(1);"},
{"lineNum":" 1529","line":"            EIGEN_GEBP_ONESTEP(2);"},
{"lineNum":" 1530","line":"            EIGEN_GEBP_ONESTEP(3);"},
{"lineNum":" 1531","line":"            EIGEN_GEBP_ONESTEP(4);"},
{"lineNum":" 1532","line":"            EIGEN_GEBP_ONESTEP(5);"},
{"lineNum":" 1533","line":"            EIGEN_GEBP_ONESTEP(6);"},
{"lineNum":" 1534","line":"            EIGEN_GEBP_ONESTEP(7);"},
{"lineNum":" 1535","line":""},
{"lineNum":" 1536","line":"            blB += pk*4*RhsProgress;"},
{"lineNum":" 1537","line":"            blA += pk*3*Traits::LhsProgress;"},
{"lineNum":" 1538","line":""},
{"lineNum":" 1539","line":"            EIGEN_ASM_COMMENT(\"end gebp micro kernel 3pX4\");"},
{"lineNum":" 1540","line":"          }"},
{"lineNum":" 1541","line":"          // process remaining peeled loop"},
{"lineNum":" 1542","line":"          for(Index k=peeled_kc; k<depth; k++)"},
{"lineNum":" 1543","line":"          {"},
{"lineNum":" 1544","line":"            RhsPanel15 rhs_panel;"},
{"lineNum":" 1545","line":"            RhsPacket T0;"},
{"lineNum":" 1546","line":"            LhsPacket A2;"},
{"lineNum":" 1547","line":"            EIGEN_GEBP_ONESTEP(0);"},
{"lineNum":" 1548","line":"            blB += 4*RhsProgress;"},
{"lineNum":" 1549","line":"            blA += 3*Traits::LhsProgress;"},
{"lineNum":" 1550","line":"          }"},
{"lineNum":" 1551","line":""},
{"lineNum":" 1552","line":"#undef EIGEN_GEBP_ONESTEP"},
{"lineNum":" 1553","line":""},
{"lineNum":" 1554","line":"          ResPacket R0, R1, R2;"},
{"lineNum":" 1555","line":"          ResPacket alphav = pset1<ResPacket>(alpha);"},
{"lineNum":" 1556","line":""},
{"lineNum":" 1557","line":"          R0 = r0.template loadPacket<ResPacket>(0 * Traits::ResPacketSize);"},
{"lineNum":" 1558","line":"          R1 = r0.template loadPacket<ResPacket>(1 * Traits::ResPacketSize);"},
{"lineNum":" 1559","line":"          R2 = r0.template loadPacket<ResPacket>(2 * Traits::ResPacketSize);"},
{"lineNum":" 1560","line":"          traits.acc(C0, alphav, R0);"},
{"lineNum":" 1561","line":"          traits.acc(C4, alphav, R1);"},
{"lineNum":" 1562","line":"          traits.acc(C8, alphav, R2);"},
{"lineNum":" 1563","line":"          r0.storePacket(0 * Traits::ResPacketSize, R0);"},
{"lineNum":" 1564","line":"          r0.storePacket(1 * Traits::ResPacketSize, R1);"},
{"lineNum":" 1565","line":"          r0.storePacket(2 * Traits::ResPacketSize, R2);"},
{"lineNum":" 1566","line":""},
{"lineNum":" 1567","line":"          R0 = r1.template loadPacket<ResPacket>(0 * Traits::ResPacketSize);"},
{"lineNum":" 1568","line":"          R1 = r1.template loadPacket<ResPacket>(1 * Traits::ResPacketSize);"},
{"lineNum":" 1569","line":"          R2 = r1.template loadPacket<ResPacket>(2 * Traits::ResPacketSize);"},
{"lineNum":" 1570","line":"          traits.acc(C1, alphav, R0);"},
{"lineNum":" 1571","line":"          traits.acc(C5, alphav, R1);"},
{"lineNum":" 1572","line":"          traits.acc(C9, alphav, R2);"},
{"lineNum":" 1573","line":"          r1.storePacket(0 * Traits::ResPacketSize, R0);"},
{"lineNum":" 1574","line":"          r1.storePacket(1 * Traits::ResPacketSize, R1);"},
{"lineNum":" 1575","line":"          r1.storePacket(2 * Traits::ResPacketSize, R2);"},
{"lineNum":" 1576","line":""},
{"lineNum":" 1577","line":"          R0 = r2.template loadPacket<ResPacket>(0 * Traits::ResPacketSize);"},
{"lineNum":" 1578","line":"          R1 = r2.template loadPacket<ResPacket>(1 * Traits::ResPacketSize);"},
{"lineNum":" 1579","line":"          R2 = r2.template loadPacket<ResPacket>(2 * Traits::ResPacketSize);"},
{"lineNum":" 1580","line":"          traits.acc(C2, alphav, R0);"},
{"lineNum":" 1581","line":"          traits.acc(C6, alphav, R1);"},
{"lineNum":" 1582","line":"          traits.acc(C10, alphav, R2);"},
{"lineNum":" 1583","line":"          r2.storePacket(0 * Traits::ResPacketSize, R0);"},
{"lineNum":" 1584","line":"          r2.storePacket(1 * Traits::ResPacketSize, R1);"},
{"lineNum":" 1585","line":"          r2.storePacket(2 * Traits::ResPacketSize, R2);"},
{"lineNum":" 1586","line":""},
{"lineNum":" 1587","line":"          R0 = r3.template loadPacket<ResPacket>(0 * Traits::ResPacketSize);"},
{"lineNum":" 1588","line":"          R1 = r3.template loadPacket<ResPacket>(1 * Traits::ResPacketSize);"},
{"lineNum":" 1589","line":"          R2 = r3.template loadPacket<ResPacket>(2 * Traits::ResPacketSize);"},
{"lineNum":" 1590","line":"          traits.acc(C3, alphav, R0);"},
{"lineNum":" 1591","line":"          traits.acc(C7, alphav, R1);"},
{"lineNum":" 1592","line":"          traits.acc(C11, alphav, R2);"},
{"lineNum":" 1593","line":"          r3.storePacket(0 * Traits::ResPacketSize, R0);"},
{"lineNum":" 1594","line":"          r3.storePacket(1 * Traits::ResPacketSize, R1);"},
{"lineNum":" 1595","line":"          r3.storePacket(2 * Traits::ResPacketSize, R2);"},
{"lineNum":" 1596","line":"          }"},
{"lineNum":" 1597","line":"        }"},
{"lineNum":" 1598","line":""},
{"lineNum":" 1599","line":"        // Deal with remaining columns of the rhs"},
{"lineNum":" 1600","line":"        for(Index j2=packet_cols4; j2<cols; j2++)"},
{"lineNum":" 1601","line":"        {"},
{"lineNum":" 1602","line":"          for(Index i=i1; i<actual_panel_end; i+=3*LhsProgress)"},
{"lineNum":" 1603","line":"          {"},
{"lineNum":" 1604","line":"          // One column at a time"},
{"lineNum":" 1605","line":"          const LhsScalar* blA = &blockA[i*strideA+offsetA*(3*Traits::LhsProgress)];"},
{"lineNum":" 1606","line":"          prefetch(&blA[0]);"},
{"lineNum":" 1607","line":""},
{"lineNum":" 1608","line":"          // gets res block as register"},
{"lineNum":" 1609","line":"          AccPacket C0, C4, C8;"},
{"lineNum":" 1610","line":"          traits.initAcc(C0);"},
{"lineNum":" 1611","line":"          traits.initAcc(C4);"},
{"lineNum":" 1612","line":"          traits.initAcc(C8);"},
{"lineNum":" 1613","line":""},
{"lineNum":" 1614","line":"          LinearMapper r0 = res.getLinearMapper(i, j2);"},
{"lineNum":" 1615","line":"          r0.prefetch(0);"},
{"lineNum":" 1616","line":""},
{"lineNum":" 1617","line":"          // performs \"inner\" products"},
{"lineNum":" 1618","line":"          const RhsScalar* blB = &blockB[j2*strideB+offsetB];"},
{"lineNum":" 1619","line":"          LhsPacket A0, A1, A2;"},
{"lineNum":" 1620","line":""},
{"lineNum":" 1621","line":"          for(Index k=0; k<peeled_kc; k+=pk)"},
{"lineNum":" 1622","line":"          {"},
{"lineNum":" 1623","line":"            EIGEN_ASM_COMMENT(\"begin gebp micro kernel 3pX1\");"},
{"lineNum":" 1624","line":"            RhsPacket B_0;"},
{"lineNum":" 1625","line":"#define EIGEN_GEBGP_ONESTEP(K)                                                    \\"},
{"lineNum":" 1626","line":"            do {                                                                  \\"},
{"lineNum":" 1627","line":"              EIGEN_ASM_COMMENT(\"begin step of gebp micro kernel 3pX1\");          \\"},
{"lineNum":" 1628","line":"              EIGEN_ASM_COMMENT(\"Note: these asm comments work around bug 935!\"); \\"},
{"lineNum":" 1629","line":"              traits.loadLhs(&blA[(0 + 3 * K) * LhsProgress], A0);                \\"},
{"lineNum":" 1630","line":"              traits.loadLhs(&blA[(1 + 3 * K) * LhsProgress], A1);                \\"},
{"lineNum":" 1631","line":"              traits.loadLhs(&blA[(2 + 3 * K) * LhsProgress], A2);                \\"},
{"lineNum":" 1632","line":"              traits.loadRhs(&blB[(0 + K) * RhsProgress], B_0);                   \\"},
{"lineNum":" 1633","line":"              traits.madd(A0, B_0, C0, B_0, fix<0>);                              \\"},
{"lineNum":" 1634","line":"              traits.madd(A1, B_0, C4, B_0, fix<0>);                              \\"},
{"lineNum":" 1635","line":"              traits.madd(A2, B_0, C8, B_0, fix<0>);                              \\"},
{"lineNum":" 1636","line":"              EIGEN_ASM_COMMENT(\"end step of gebp micro kernel 3pX1\");            \\"},
{"lineNum":" 1637","line":"            } while (false)"},
{"lineNum":" 1638","line":""},
{"lineNum":" 1639","line":"            EIGEN_GEBGP_ONESTEP(0);"},
{"lineNum":" 1640","line":"            EIGEN_GEBGP_ONESTEP(1);"},
{"lineNum":" 1641","line":"            EIGEN_GEBGP_ONESTEP(2);"},
{"lineNum":" 1642","line":"            EIGEN_GEBGP_ONESTEP(3);"},
{"lineNum":" 1643","line":"            EIGEN_GEBGP_ONESTEP(4);"},
{"lineNum":" 1644","line":"            EIGEN_GEBGP_ONESTEP(5);"},
{"lineNum":" 1645","line":"            EIGEN_GEBGP_ONESTEP(6);"},
{"lineNum":" 1646","line":"            EIGEN_GEBGP_ONESTEP(7);"},
{"lineNum":" 1647","line":""},
{"lineNum":" 1648","line":"            blB += int(pk) * int(RhsProgress);"},
{"lineNum":" 1649","line":"            blA += int(pk) * 3 * int(Traits::LhsProgress);"},
{"lineNum":" 1650","line":""},
{"lineNum":" 1651","line":"            EIGEN_ASM_COMMENT(\"end gebp micro kernel 3pX1\");"},
{"lineNum":" 1652","line":"          }"},
{"lineNum":" 1653","line":""},
{"lineNum":" 1654","line":"          // process remaining peeled loop"},
{"lineNum":" 1655","line":"          for(Index k=peeled_kc; k<depth; k++)"},
{"lineNum":" 1656","line":"          {"},
{"lineNum":" 1657","line":"            RhsPacket B_0;"},
{"lineNum":" 1658","line":"            EIGEN_GEBGP_ONESTEP(0);"},
{"lineNum":" 1659","line":"            blB += RhsProgress;"},
{"lineNum":" 1660","line":"            blA += 3*Traits::LhsProgress;"},
{"lineNum":" 1661","line":"          }"},
{"lineNum":" 1662","line":"#undef EIGEN_GEBGP_ONESTEP"},
{"lineNum":" 1663","line":"          ResPacket R0, R1, R2;"},
{"lineNum":" 1664","line":"          ResPacket alphav = pset1<ResPacket>(alpha);"},
{"lineNum":" 1665","line":""},
{"lineNum":" 1666","line":"          R0 = r0.template loadPacket<ResPacket>(0 * Traits::ResPacketSize);"},
{"lineNum":" 1667","line":"          R1 = r0.template loadPacket<ResPacket>(1 * Traits::ResPacketSize);"},
{"lineNum":" 1668","line":"          R2 = r0.template loadPacket<ResPacket>(2 * Traits::ResPacketSize);"},
{"lineNum":" 1669","line":"          traits.acc(C0, alphav, R0);"},
{"lineNum":" 1670","line":"          traits.acc(C4, alphav, R1);"},
{"lineNum":" 1671","line":"          traits.acc(C8, alphav, R2);"},
{"lineNum":" 1672","line":"          r0.storePacket(0 * Traits::ResPacketSize, R0);"},
{"lineNum":" 1673","line":"          r0.storePacket(1 * Traits::ResPacketSize, R1);"},
{"lineNum":" 1674","line":"          r0.storePacket(2 * Traits::ResPacketSize, R2);"},
{"lineNum":" 1675","line":"          }"},
{"lineNum":" 1676","line":"        }"},
{"lineNum":" 1677","line":"      }"},
{"lineNum":" 1678","line":"    }"},
{"lineNum":" 1679","line":""},
{"lineNum":" 1680","line":"    //---------- Process 2 * LhsProgress rows at once ----------"},
{"lineNum":" 1681","line":"    if(mr>=2*Traits::LhsProgress)"},
{"lineNum":" 1682","line":"    {"},
{"lineNum":" 1683","line":"      const Index l1 = defaultL1CacheSize; // in Bytes, TODO, l1 should be passed to this function."},
{"lineNum":" 1684","line":"      // The max(1, ...) here is needed because we may be using blocking params larger than what our known l1 cache size"},
{"lineNum":" 1685","line":"      // suggests we should be using: either because our known l1 cache size is inaccurate (e.g. on Android, we can only guess),"},
{"lineNum":" 1686","line":"      // or because we are testing specific blocking sizes."},
{"lineNum":" 1687","line":"      Index actual_panel_rows = (2*LhsProgress) * std::max<Index>(1,( (l1 - sizeof(ResScalar)*mr*nr - depth*nr*sizeof(RhsScalar)) / (depth * sizeof(LhsScalar) * 2*LhsProgress) ));","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1688","line":""},
{"lineNum":" 1689","line":"      for(Index i1=peeled_mc3; i1<peeled_mc2; i1+=actual_panel_rows)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1690","line":"      {"},
{"lineNum":" 1691","line":"        Index actual_panel_end = (std::min)(i1+actual_panel_rows, peeled_mc2);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1692","line":"        for(Index j2=0; j2<packet_cols4; j2+=nr)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1693","line":"        {"},
{"lineNum":" 1694","line":"          for(Index i=i1; i<actual_panel_end; i+=2*LhsProgress)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1695","line":"          {"},
{"lineNum":" 1696","line":""},
{"lineNum":" 1697","line":"          // We selected a 2*Traits::LhsProgress x nr micro block of res which is entirely"},
{"lineNum":" 1698","line":"          // stored into 2 x nr registers."},
{"lineNum":" 1699","line":""},
{"lineNum":" 1700","line":"          const LhsScalar* blA = &blockA[i*strideA+offsetA*(2*Traits::LhsProgress)];","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1701","line":"          prefetch(&blA[0]);"},
{"lineNum":" 1702","line":""},
{"lineNum":" 1703","line":"          // gets res block as register"},
{"lineNum":" 1704","line":"          AccPacket C0, C1, C2, C3,"},
{"lineNum":" 1705","line":"                    C4, C5, C6, C7;"},
{"lineNum":" 1706","line":"          traits.initAcc(C0); traits.initAcc(C1); traits.initAcc(C2); traits.initAcc(C3);"},
{"lineNum":" 1707","line":"          traits.initAcc(C4); traits.initAcc(C5); traits.initAcc(C6); traits.initAcc(C7);"},
{"lineNum":" 1708","line":""},
{"lineNum":" 1709","line":"          LinearMapper r0 = res.getLinearMapper(i, j2 + 0);"},
{"lineNum":" 1710","line":"          LinearMapper r1 = res.getLinearMapper(i, j2 + 1);"},
{"lineNum":" 1711","line":"          LinearMapper r2 = res.getLinearMapper(i, j2 + 2);"},
{"lineNum":" 1712","line":"          LinearMapper r3 = res.getLinearMapper(i, j2 + 3);"},
{"lineNum":" 1713","line":""},
{"lineNum":" 1714","line":"          r0.prefetch(prefetch_res_offset);"},
{"lineNum":" 1715","line":"          r1.prefetch(prefetch_res_offset);"},
{"lineNum":" 1716","line":"          r2.prefetch(prefetch_res_offset);"},
{"lineNum":" 1717","line":"          r3.prefetch(prefetch_res_offset);"},
{"lineNum":" 1718","line":""},
{"lineNum":" 1719","line":"          // performs \"inner\" products"},
{"lineNum":" 1720","line":"          const RhsScalar* blB = &blockB[j2*strideB+offsetB*nr];"},
{"lineNum":" 1721","line":"          prefetch(&blB[0]);"},
{"lineNum":" 1722","line":"          LhsPacket A0, A1;"},
{"lineNum":" 1723","line":""},
{"lineNum":" 1724","line":"          for(Index k=0; k<peeled_kc; k+=pk)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1725","line":"          {"},
{"lineNum":" 1726","line":"            EIGEN_ASM_COMMENT(\"begin gebp micro kernel 2pX4\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1727","line":"            RhsPacketx4 rhs_panel;"},
{"lineNum":" 1728","line":"            RhsPacket T0;"},
{"lineNum":" 1729","line":""},
{"lineNum":" 1730","line":"          // NOTE: the begin/end asm comments below work around bug 935!"},
{"lineNum":" 1731","line":"          // but they are not enough for gcc>=6 without FMA (bug 1637)"},
{"lineNum":" 1732","line":"          #if EIGEN_GNUC_AT_LEAST(6,0) && defined(EIGEN_VECTORIZE_SSE)"},
{"lineNum":" 1733","line":"            #define EIGEN_GEBP_2PX4_SPILLING_WORKAROUND __asm__  (\"\" : [a0] \"+x,m\" (A0),[a1] \"+x,m\" (A1));"},
{"lineNum":" 1734","line":"          #else"},
{"lineNum":" 1735","line":"            #define EIGEN_GEBP_2PX4_SPILLING_WORKAROUND"},
{"lineNum":" 1736","line":"          #endif"},
{"lineNum":" 1737","line":"#define EIGEN_GEBGP_ONESTEP(K)                                            \\"},
{"lineNum":" 1738","line":"            do {                                                          \\"},
{"lineNum":" 1739","line":"              EIGEN_ASM_COMMENT(\"begin step of gebp micro kernel 2pX4\");  \\"},
{"lineNum":" 1740","line":"              traits.loadLhs(&blA[(0 + 2 * K) * LhsProgress], A0);        \\"},
{"lineNum":" 1741","line":"              traits.loadLhs(&blA[(1 + 2 * K) * LhsProgress], A1);        \\"},
{"lineNum":" 1742","line":"              traits.loadRhs(&blB[(0 + 4 * K) * RhsProgress], rhs_panel); \\"},
{"lineNum":" 1743","line":"              traits.madd(A0, rhs_panel, C0, T0, fix<0>);                 \\"},
{"lineNum":" 1744","line":"              traits.madd(A1, rhs_panel, C4, T0, fix<0>);                 \\"},
{"lineNum":" 1745","line":"              traits.madd(A0, rhs_panel, C1, T0, fix<1>);                 \\"},
{"lineNum":" 1746","line":"              traits.madd(A1, rhs_panel, C5, T0, fix<1>);                 \\"},
{"lineNum":" 1747","line":"              traits.madd(A0, rhs_panel, C2, T0, fix<2>);                 \\"},
{"lineNum":" 1748","line":"              traits.madd(A1, rhs_panel, C6, T0, fix<2>);                 \\"},
{"lineNum":" 1749","line":"              traits.madd(A0, rhs_panel, C3, T0, fix<3>);                 \\"},
{"lineNum":" 1750","line":"              traits.madd(A1, rhs_panel, C7, T0, fix<3>);                 \\"},
{"lineNum":" 1751","line":"              EIGEN_GEBP_2PX4_SPILLING_WORKAROUND                         \\"},
{"lineNum":" 1752","line":"              EIGEN_ASM_COMMENT(\"end step of gebp micro kernel 2pX4\");    \\"},
{"lineNum":" 1753","line":"            } while (false)"},
{"lineNum":" 1754","line":""},
{"lineNum":" 1755","line":"            internal::prefetch(blB+(48+0));"},
{"lineNum":" 1756","line":"            EIGEN_GEBGP_ONESTEP(0);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1757","line":"            EIGEN_GEBGP_ONESTEP(1);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1758","line":"            EIGEN_GEBGP_ONESTEP(2);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1759","line":"            EIGEN_GEBGP_ONESTEP(3);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1760","line":"            internal::prefetch(blB+(48+16));"},
{"lineNum":" 1761","line":"            EIGEN_GEBGP_ONESTEP(4);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1762","line":"            EIGEN_GEBGP_ONESTEP(5);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1763","line":"            EIGEN_GEBGP_ONESTEP(6);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1764","line":"            EIGEN_GEBGP_ONESTEP(7);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1765","line":""},
{"lineNum":" 1766","line":"            blB += pk*4*RhsProgress;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1767","line":"            blA += pk*(2*Traits::LhsProgress);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1768","line":""},
{"lineNum":" 1769","line":"            EIGEN_ASM_COMMENT(\"end gebp micro kernel 2pX4\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1770","line":"          }"},
{"lineNum":" 1771","line":"          // process remaining peeled loop"},
{"lineNum":" 1772","line":"          for(Index k=peeled_kc; k<depth; k++)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1773","line":"          {"},
{"lineNum":" 1774","line":"            RhsPacketx4 rhs_panel;"},
{"lineNum":" 1775","line":"            RhsPacket T0;"},
{"lineNum":" 1776","line":"            EIGEN_GEBGP_ONESTEP(0);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1777","line":"            blB += 4*RhsProgress;"},
{"lineNum":" 1778","line":"            blA += 2*Traits::LhsProgress;"},
{"lineNum":" 1779","line":"          }"},
{"lineNum":" 1780","line":"#undef EIGEN_GEBGP_ONESTEP"},
{"lineNum":" 1781","line":""},
{"lineNum":" 1782","line":"          ResPacket R0, R1, R2, R3;"},
{"lineNum":" 1783","line":"          ResPacket alphav = pset1<ResPacket>(alpha);"},
{"lineNum":" 1784","line":""},
{"lineNum":" 1785","line":"          R0 = r0.template loadPacket<ResPacket>(0 * Traits::ResPacketSize);"},
{"lineNum":" 1786","line":"          R1 = r0.template loadPacket<ResPacket>(1 * Traits::ResPacketSize);"},
{"lineNum":" 1787","line":"          R2 = r1.template loadPacket<ResPacket>(0 * Traits::ResPacketSize);"},
{"lineNum":" 1788","line":"          R3 = r1.template loadPacket<ResPacket>(1 * Traits::ResPacketSize);"},
{"lineNum":" 1789","line":"          traits.acc(C0, alphav, R0);"},
{"lineNum":" 1790","line":"          traits.acc(C4, alphav, R1);"},
{"lineNum":" 1791","line":"          traits.acc(C1, alphav, R2);"},
{"lineNum":" 1792","line":"          traits.acc(C5, alphav, R3);"},
{"lineNum":" 1793","line":"          r0.storePacket(0 * Traits::ResPacketSize, R0);"},
{"lineNum":" 1794","line":"          r0.storePacket(1 * Traits::ResPacketSize, R1);"},
{"lineNum":" 1795","line":"          r1.storePacket(0 * Traits::ResPacketSize, R2);"},
{"lineNum":" 1796","line":"          r1.storePacket(1 * Traits::ResPacketSize, R3);"},
{"lineNum":" 1797","line":""},
{"lineNum":" 1798","line":"          R0 = r2.template loadPacket<ResPacket>(0 * Traits::ResPacketSize);"},
{"lineNum":" 1799","line":"          R1 = r2.template loadPacket<ResPacket>(1 * Traits::ResPacketSize);"},
{"lineNum":" 1800","line":"          R2 = r3.template loadPacket<ResPacket>(0 * Traits::ResPacketSize);"},
{"lineNum":" 1801","line":"          R3 = r3.template loadPacket<ResPacket>(1 * Traits::ResPacketSize);"},
{"lineNum":" 1802","line":"          traits.acc(C2,  alphav, R0);"},
{"lineNum":" 1803","line":"          traits.acc(C6,  alphav, R1);"},
{"lineNum":" 1804","line":"          traits.acc(C3,  alphav, R2);"},
{"lineNum":" 1805","line":"          traits.acc(C7,  alphav, R3);"},
{"lineNum":" 1806","line":"          r2.storePacket(0 * Traits::ResPacketSize, R0);"},
{"lineNum":" 1807","line":"          r2.storePacket(1 * Traits::ResPacketSize, R1);"},
{"lineNum":" 1808","line":"          r3.storePacket(0 * Traits::ResPacketSize, R2);"},
{"lineNum":" 1809","line":"          r3.storePacket(1 * Traits::ResPacketSize, R3);"},
{"lineNum":" 1810","line":"          }"},
{"lineNum":" 1811","line":"        }"},
{"lineNum":" 1812","line":""},
{"lineNum":" 1813","line":"        // Deal with remaining columns of the rhs"},
{"lineNum":" 1814","line":"        for(Index j2=packet_cols4; j2<cols; j2++)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1815","line":"        {"},
{"lineNum":" 1816","line":"          for(Index i=i1; i<actual_panel_end; i+=2*LhsProgress)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1817","line":"          {"},
{"lineNum":" 1818","line":"          // One column at a time"},
{"lineNum":" 1819","line":"          const LhsScalar* blA = &blockA[i*strideA+offsetA*(2*Traits::LhsProgress)];","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1820","line":"          prefetch(&blA[0]);"},
{"lineNum":" 1821","line":""},
{"lineNum":" 1822","line":"          // gets res block as register"},
{"lineNum":" 1823","line":"          AccPacket C0, C4;"},
{"lineNum":" 1824","line":"          traits.initAcc(C0);"},
{"lineNum":" 1825","line":"          traits.initAcc(C4);"},
{"lineNum":" 1826","line":""},
{"lineNum":" 1827","line":"          LinearMapper r0 = res.getLinearMapper(i, j2);"},
{"lineNum":" 1828","line":"          r0.prefetch(prefetch_res_offset);"},
{"lineNum":" 1829","line":""},
{"lineNum":" 1830","line":"          // performs \"inner\" products"},
{"lineNum":" 1831","line":"          const RhsScalar* blB = &blockB[j2*strideB+offsetB];"},
{"lineNum":" 1832","line":"          LhsPacket A0, A1;"},
{"lineNum":" 1833","line":""},
{"lineNum":" 1834","line":"          for(Index k=0; k<peeled_kc; k+=pk)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1835","line":"          {"},
{"lineNum":" 1836","line":"            EIGEN_ASM_COMMENT(\"begin gebp micro kernel 2pX1\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1837","line":"            RhsPacket B_0, B1;"},
{"lineNum":" 1838","line":""},
{"lineNum":" 1839","line":"#define EIGEN_GEBGP_ONESTEP(K) \\"},
{"lineNum":" 1840","line":"            do {                                                                  \\"},
{"lineNum":" 1841","line":"              EIGEN_ASM_COMMENT(\"begin step of gebp micro kernel 2pX1\");          \\"},
{"lineNum":" 1842","line":"              EIGEN_ASM_COMMENT(\"Note: these asm comments work around bug 935!\"); \\"},
{"lineNum":" 1843","line":"              traits.loadLhs(&blA[(0+2*K)*LhsProgress], A0);                      \\"},
{"lineNum":" 1844","line":"              traits.loadLhs(&blA[(1+2*K)*LhsProgress], A1);                      \\"},
{"lineNum":" 1845","line":"              traits.loadRhs(&blB[(0+K)*RhsProgress], B_0);                       \\"},
{"lineNum":" 1846","line":"              traits.madd(A0, B_0, C0, B1, fix<0>);                               \\"},
{"lineNum":" 1847","line":"              traits.madd(A1, B_0, C4, B_0, fix<0>);                              \\"},
{"lineNum":" 1848","line":"              EIGEN_ASM_COMMENT(\"end step of gebp micro kernel 2pX1\");            \\"},
{"lineNum":" 1849","line":"            } while(false)"},
{"lineNum":" 1850","line":""},
{"lineNum":" 1851","line":"            EIGEN_GEBGP_ONESTEP(0);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1852","line":"            EIGEN_GEBGP_ONESTEP(1);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1853","line":"            EIGEN_GEBGP_ONESTEP(2);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1854","line":"            EIGEN_GEBGP_ONESTEP(3);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1855","line":"            EIGEN_GEBGP_ONESTEP(4);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1856","line":"            EIGEN_GEBGP_ONESTEP(5);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1857","line":"            EIGEN_GEBGP_ONESTEP(6);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1858","line":"            EIGEN_GEBGP_ONESTEP(7);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1859","line":""},
{"lineNum":" 1860","line":"            blB += int(pk) * int(RhsProgress);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1861","line":"            blA += int(pk) * 2 * int(Traits::LhsProgress);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1862","line":""},
{"lineNum":" 1863","line":"            EIGEN_ASM_COMMENT(\"end gebp micro kernel 2pX1\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1864","line":"          }"},
{"lineNum":" 1865","line":""},
{"lineNum":" 1866","line":"          // process remaining peeled loop"},
{"lineNum":" 1867","line":"          for(Index k=peeled_kc; k<depth; k++)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1868","line":"          {"},
{"lineNum":" 1869","line":"            RhsPacket B_0, B1;"},
{"lineNum":" 1870","line":"            EIGEN_GEBGP_ONESTEP(0);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1871","line":"            blB += RhsProgress;"},
{"lineNum":" 1872","line":"            blA += 2*Traits::LhsProgress;"},
{"lineNum":" 1873","line":"          }"},
{"lineNum":" 1874","line":"#undef EIGEN_GEBGP_ONESTEP"},
{"lineNum":" 1875","line":"          ResPacket R0, R1;"},
{"lineNum":" 1876","line":"          ResPacket alphav = pset1<ResPacket>(alpha);"},
{"lineNum":" 1877","line":""},
{"lineNum":" 1878","line":"          R0 = r0.template loadPacket<ResPacket>(0 * Traits::ResPacketSize);"},
{"lineNum":" 1879","line":"          R1 = r0.template loadPacket<ResPacket>(1 * Traits::ResPacketSize);"},
{"lineNum":" 1880","line":"          traits.acc(C0, alphav, R0);"},
{"lineNum":" 1881","line":"          traits.acc(C4, alphav, R1);"},
{"lineNum":" 1882","line":"          r0.storePacket(0 * Traits::ResPacketSize, R0);"},
{"lineNum":" 1883","line":"          r0.storePacket(1 * Traits::ResPacketSize, R1);"},
{"lineNum":" 1884","line":"          }"},
{"lineNum":" 1885","line":"        }"},
{"lineNum":" 1886","line":"      }"},
{"lineNum":" 1887","line":"    }"},
{"lineNum":" 1888","line":"    //---------- Process 1 * LhsProgress rows at once ----------"},
{"lineNum":" 1889","line":"    if(mr>=1*Traits::LhsProgress)"},
{"lineNum":" 1890","line":"    {"},
{"lineNum":" 1891","line":"      lhs_process_one_packet<nr, LhsProgress, RhsProgress, LhsScalar, RhsScalar, ResScalar, AccPacket, LhsPacket, RhsPacket, ResPacket, Traits, LinearMapper, DataMapper> p;"},
{"lineNum":" 1892","line":"      p(res, blockA, blockB, alpha, peeled_mc2, peeled_mc1, strideA, strideB, offsetA, offsetB, prefetch_res_offset, peeled_kc, pk, cols, depth, packet_cols4);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1893","line":"    }"},
{"lineNum":" 1894","line":"    //---------- Process LhsProgressHalf rows at once ----------"},
{"lineNum":" 1895","line":"    if((LhsProgressHalf < LhsProgress) && mr>=LhsProgressHalf)"},
{"lineNum":" 1896","line":"    {"},
{"lineNum":" 1897","line":"      lhs_process_fraction_of_packet<nr, LhsProgressHalf, RhsProgressHalf, LhsScalar, RhsScalar, ResScalar, AccPacketHalf, LhsPacketHalf, RhsPacketHalf, ResPacketHalf, HalfTraits, LinearMapper, DataMapper> p;"},
{"lineNum":" 1898","line":"      p(res, blockA, blockB, alpha, peeled_mc1, peeled_mc_half, strideA, strideB, offsetA, offsetB, prefetch_res_offset, peeled_kc, pk, cols, depth, packet_cols4);"},
{"lineNum":" 1899","line":"    }"},
{"lineNum":" 1900","line":"    //---------- Process LhsProgressQuarter rows at once ----------"},
{"lineNum":" 1901","line":"    if((LhsProgressQuarter < LhsProgressHalf) && mr>=LhsProgressQuarter)"},
{"lineNum":" 1902","line":"    {"},
{"lineNum":" 1903","line":"      lhs_process_fraction_of_packet<nr, LhsProgressQuarter, RhsProgressQuarter, LhsScalar, RhsScalar, ResScalar, AccPacketQuarter, LhsPacketQuarter, RhsPacketQuarter, ResPacketQuarter, QuarterTraits, LinearMapper, DataMapper> p;"},
{"lineNum":" 1904","line":"      p(res, blockA, blockB, alpha, peeled_mc_half, peeled_mc_quarter, strideA, strideB, offsetA, offsetB, prefetch_res_offset, peeled_kc, pk, cols, depth, packet_cols4);"},
{"lineNum":" 1905","line":"    }"},
{"lineNum":" 1906","line":"    //---------- Process remaining rows, 1 at once ----------"},
{"lineNum":" 1907","line":"    if(peeled_mc_quarter<rows)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1908","line":"    {"},
{"lineNum":" 1909","line":"      // loop on each panel of the rhs"},
{"lineNum":" 1910","line":"      for(Index j2=0; j2<packet_cols4; j2+=nr)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1911","line":"      {"},
{"lineNum":" 1912","line":"        // loop on each row of the lhs (1*LhsProgress x depth)"},
{"lineNum":" 1913","line":"        for(Index i=peeled_mc_quarter; i<rows; i+=1)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1914","line":"        {"},
{"lineNum":" 1915","line":"          const LhsScalar* blA = &blockA[i*strideA+offsetA];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1916","line":"          prefetch(&blA[0]);"},
{"lineNum":" 1917","line":"          const RhsScalar* blB = &blockB[j2*strideB+offsetB*nr];"},
{"lineNum":" 1918","line":""},
{"lineNum":" 1919","line":"          // If LhsProgress is 8 or 16, it assumes that there is a"},
{"lineNum":" 1920","line":"          // half or quarter packet, respectively, of the same size as"},
{"lineNum":" 1921","line":"          // nr (which is currently 4) for the return type."},
{"lineNum":" 1922","line":"          const int SResPacketHalfSize = unpacket_traits<typename unpacket_traits<SResPacket>::half>::size;"},
{"lineNum":" 1923","line":"          const int SResPacketQuarterSize = unpacket_traits<typename unpacket_traits<typename unpacket_traits<SResPacket>::half>::half>::size;"},
{"lineNum":" 1924","line":"          if ((SwappedTraits::LhsProgress % 4) == 0 &&"},
{"lineNum":" 1925","line":"              (SwappedTraits::LhsProgress<=16) &&"},
{"lineNum":" 1926","line":"              (SwappedTraits::LhsProgress!=8  || SResPacketHalfSize==nr) &&"},
{"lineNum":" 1927","line":"              (SwappedTraits::LhsProgress!=16 || SResPacketQuarterSize==nr))"},
{"lineNum":" 1928","line":"          {"},
{"lineNum":" 1929","line":"            SAccPacket C0, C1, C2, C3;"},
{"lineNum":" 1930","line":"            straits.initAcc(C0);"},
{"lineNum":" 1931","line":"            straits.initAcc(C1);"},
{"lineNum":" 1932","line":"            straits.initAcc(C2);"},
{"lineNum":" 1933","line":"            straits.initAcc(C3);"},
{"lineNum":" 1934","line":""},
{"lineNum":" 1935","line":"            const Index spk   = (std::max)(1,SwappedTraits::LhsProgress/4);"},
{"lineNum":" 1936","line":"            const Index endk  = (depth/spk)*spk;"},
{"lineNum":" 1937","line":"            const Index endk4 = (depth/(spk*4))*(spk*4);"},
{"lineNum":" 1938","line":""},
{"lineNum":" 1939","line":"            Index k=0;"},
{"lineNum":" 1940","line":"            for(; k<endk4; k+=4*spk)"},
{"lineNum":" 1941","line":"            {"},
{"lineNum":" 1942","line":"              SLhsPacket A0,A1;"},
{"lineNum":" 1943","line":"              SRhsPacket B_0,B_1;"},
{"lineNum":" 1944","line":""},
{"lineNum":" 1945","line":"              straits.loadLhsUnaligned(blB+0*SwappedTraits::LhsProgress, A0);"},
{"lineNum":" 1946","line":"              straits.loadLhsUnaligned(blB+1*SwappedTraits::LhsProgress, A1);"},
{"lineNum":" 1947","line":""},
{"lineNum":" 1948","line":"              straits.loadRhsQuad(blA+0*spk, B_0);"},
{"lineNum":" 1949","line":"              straits.loadRhsQuad(blA+1*spk, B_1);"},
{"lineNum":" 1950","line":"              straits.madd(A0,B_0,C0,B_0, fix<0>);"},
{"lineNum":" 1951","line":"              straits.madd(A1,B_1,C1,B_1, fix<0>);"},
{"lineNum":" 1952","line":""},
{"lineNum":" 1953","line":"              straits.loadLhsUnaligned(blB+2*SwappedTraits::LhsProgress, A0);"},
{"lineNum":" 1954","line":"              straits.loadLhsUnaligned(blB+3*SwappedTraits::LhsProgress, A1);"},
{"lineNum":" 1955","line":"              straits.loadRhsQuad(blA+2*spk, B_0);"},
{"lineNum":" 1956","line":"              straits.loadRhsQuad(blA+3*spk, B_1);"},
{"lineNum":" 1957","line":"              straits.madd(A0,B_0,C2,B_0, fix<0>);"},
{"lineNum":" 1958","line":"              straits.madd(A1,B_1,C3,B_1, fix<0>);"},
{"lineNum":" 1959","line":""},
{"lineNum":" 1960","line":"              blB += 4*SwappedTraits::LhsProgress;"},
{"lineNum":" 1961","line":"              blA += 4*spk;"},
{"lineNum":" 1962","line":"            }"},
{"lineNum":" 1963","line":"            C0 = padd(padd(C0,C1),padd(C2,C3));"},
{"lineNum":" 1964","line":"            for(; k<endk; k+=spk)"},
{"lineNum":" 1965","line":"            {"},
{"lineNum":" 1966","line":"              SLhsPacket A0;"},
{"lineNum":" 1967","line":"              SRhsPacket B_0;"},
{"lineNum":" 1968","line":""},
{"lineNum":" 1969","line":"              straits.loadLhsUnaligned(blB, A0);"},
{"lineNum":" 1970","line":"              straits.loadRhsQuad(blA, B_0);"},
{"lineNum":" 1971","line":"              straits.madd(A0,B_0,C0,B_0, fix<0>);"},
{"lineNum":" 1972","line":""},
{"lineNum":" 1973","line":"              blB += SwappedTraits::LhsProgress;"},
{"lineNum":" 1974","line":"              blA += spk;"},
{"lineNum":" 1975","line":"            }"},
{"lineNum":" 1976","line":"            if(SwappedTraits::LhsProgress==8)"},
{"lineNum":" 1977","line":"            {"},
{"lineNum":" 1978","line":"              // Special case where we have to first reduce the accumulation register C0"},
{"lineNum":" 1979","line":"              typedef typename conditional<SwappedTraits::LhsProgress>=8,typename unpacket_traits<SResPacket>::half,SResPacket>::type SResPacketHalf;"},
{"lineNum":" 1980","line":"              typedef typename conditional<SwappedTraits::LhsProgress>=8,typename unpacket_traits<SLhsPacket>::half,SLhsPacket>::type SLhsPacketHalf;"},
{"lineNum":" 1981","line":"              typedef typename conditional<SwappedTraits::LhsProgress>=8,typename unpacket_traits<SRhsPacket>::half,SRhsPacket>::type SRhsPacketHalf;"},
{"lineNum":" 1982","line":"              typedef typename conditional<SwappedTraits::LhsProgress>=8,typename unpacket_traits<SAccPacket>::half,SAccPacket>::type SAccPacketHalf;"},
{"lineNum":" 1983","line":""},
{"lineNum":" 1984","line":"              SResPacketHalf R = res.template gatherPacket<SResPacketHalf>(i, j2);"},
{"lineNum":" 1985","line":"              SResPacketHalf alphav = pset1<SResPacketHalf>(alpha);"},
{"lineNum":" 1986","line":""},
{"lineNum":" 1987","line":"              if(depth-endk>0)"},
{"lineNum":" 1988","line":"              {"},
{"lineNum":" 1989","line":"                // We have to handle the last row of the rhs which corresponds to a half-packet"},
{"lineNum":" 1990","line":"                SLhsPacketHalf a0;"},
{"lineNum":" 1991","line":"                SRhsPacketHalf b0;"},
{"lineNum":" 1992","line":"                straits.loadLhsUnaligned(blB, a0);"},
{"lineNum":" 1993","line":"                straits.loadRhs(blA, b0);"},
{"lineNum":" 1994","line":"                SAccPacketHalf c0 = predux_half_dowto4(C0);"},
{"lineNum":" 1995","line":"                straits.madd(a0,b0,c0,b0, fix<0>);"},
{"lineNum":" 1996","line":"                straits.acc(c0, alphav, R);"},
{"lineNum":" 1997","line":"              }"},
{"lineNum":" 1998","line":"              else"},
{"lineNum":" 1999","line":"              {"},
{"lineNum":" 2000","line":"                straits.acc(predux_half_dowto4(C0), alphav, R);"},
{"lineNum":" 2001","line":"              }"},
{"lineNum":" 2002","line":"              res.scatterPacket(i, j2, R);"},
{"lineNum":" 2003","line":"            }"},
{"lineNum":" 2004","line":"            else if (SwappedTraits::LhsProgress==16)"},
{"lineNum":" 2005","line":"            {"},
{"lineNum":" 2006","line":"              // Special case where we have to first reduce the"},
{"lineNum":" 2007","line":"              // accumulation register C0. We specialize the block in"},
{"lineNum":" 2008","line":"              // template form, so that LhsProgress < 16 paths don\'t"},
{"lineNum":" 2009","line":"              // fail to compile"},
{"lineNum":" 2010","line":"              last_row_process_16_packets<LhsScalar, RhsScalar, Index, DataMapper, mr, nr, ConjugateLhs, ConjugateRhs> p;"},
{"lineNum":" 2011","line":"\t            p(res, straits, blA, blB, depth, endk, i, j2,alpha, C0);"},
{"lineNum":" 2012","line":"            }"},
{"lineNum":" 2013","line":"            else"},
{"lineNum":" 2014","line":"            {"},
{"lineNum":" 2015","line":"              SResPacket R = res.template gatherPacket<SResPacket>(i, j2);"},
{"lineNum":" 2016","line":"              SResPacket alphav = pset1<SResPacket>(alpha);"},
{"lineNum":" 2017","line":"              straits.acc(C0, alphav, R);"},
{"lineNum":" 2018","line":"              res.scatterPacket(i, j2, R);"},
{"lineNum":" 2019","line":"            }"},
{"lineNum":" 2020","line":"          }"},
{"lineNum":" 2021","line":"          else // scalar path"},
{"lineNum":" 2022","line":"          {"},
{"lineNum":" 2023","line":"            // get a 1 x 4 res block as registers"},
{"lineNum":" 2024","line":"            ResScalar C0(0), C1(0), C2(0), C3(0);"},
{"lineNum":" 2025","line":""},
{"lineNum":" 2026","line":"            for(Index k=0; k<depth; k++)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 2027","line":"            {"},
{"lineNum":" 2028","line":"              LhsScalar A0;"},
{"lineNum":" 2029","line":"              RhsScalar B_0, B_1;"},
{"lineNum":" 2030","line":""},
{"lineNum":" 2031","line":"              A0 = blA[k];"},
{"lineNum":" 2032","line":""},
{"lineNum":" 2033","line":"              B_0 = blB[0];","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":" 2034","line":"              B_1 = blB[1];"},
{"lineNum":" 2035","line":"              C0 = cj.pmadd(A0,B_0,C0);"},
{"lineNum":" 2036","line":"              C1 = cj.pmadd(A0,B_1,C1);"},
{"lineNum":" 2037","line":""},
{"lineNum":" 2038","line":"              B_0 = blB[2];"},
{"lineNum":" 2039","line":"              B_1 = blB[3];"},
{"lineNum":" 2040","line":"              C2 = cj.pmadd(A0,B_0,C2);"},
{"lineNum":" 2041","line":"              C3 = cj.pmadd(A0,B_1,C3);"},
{"lineNum":" 2042","line":""},
{"lineNum":" 2043","line":"              blB += 4;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2044","line":"            }"},
{"lineNum":" 2045","line":"            res(i, j2 + 0) += alpha * C0;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2046","line":"            res(i, j2 + 1) += alpha * C1;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2047","line":"            res(i, j2 + 2) += alpha * C2;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2048","line":"            res(i, j2 + 3) += alpha * C3;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2049","line":"          }"},
{"lineNum":" 2050","line":"        }"},
{"lineNum":" 2051","line":"      }"},
{"lineNum":" 2052","line":"      // remaining columns"},
{"lineNum":" 2053","line":"      for(Index j2=packet_cols4; j2<cols; j2++)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2054","line":"      {"},
{"lineNum":" 2055","line":"        // loop on each row of the lhs (1*LhsProgress x depth)"},
{"lineNum":" 2056","line":"        for(Index i=peeled_mc_quarter; i<rows; i+=1)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2057","line":"        {"},
{"lineNum":" 2058","line":"          const LhsScalar* blA = &blockA[i*strideA+offsetA];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2059","line":"          prefetch(&blA[0]);"},
{"lineNum":" 2060","line":"          // gets a 1 x 1 res block as registers"},
{"lineNum":" 2061","line":"          ResScalar C0(0);"},
{"lineNum":" 2062","line":"          const RhsScalar* blB = &blockB[j2*strideB+offsetB];"},
{"lineNum":" 2063","line":"          for(Index k=0; k<depth; k++)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 2064","line":"          {"},
{"lineNum":" 2065","line":"            LhsScalar A0 = blA[k];","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 2066","line":"            RhsScalar B_0 = blB[k];"},
{"lineNum":" 2067","line":"            C0 = cj.pmadd(A0, B_0, C0);"},
{"lineNum":" 2068","line":"          }"},
{"lineNum":" 2069","line":"          res(i, j2) += alpha * C0;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2070","line":"        }"},
{"lineNum":" 2071","line":"      }"},
{"lineNum":" 2072","line":"    }"},
{"lineNum":" 2073","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2074","line":""},
{"lineNum":" 2075","line":""},
{"lineNum":" 2076","line":"// pack a block of the lhs"},
{"lineNum":" 2077","line":"// The traversal is as follow (mr==4):"},
{"lineNum":" 2078","line":"//   0  4  8 12 ..."},
{"lineNum":" 2079","line":"//   1  5  9 13 ..."},
{"lineNum":" 2080","line":"//   2  6 10 14 ..."},
{"lineNum":" 2081","line":"//   3  7 11 15 ..."},
{"lineNum":" 2082","line":"//"},
{"lineNum":" 2083","line":"//  16 20 24 28 ..."},
{"lineNum":" 2084","line":"//  17 21 25 29 ..."},
{"lineNum":" 2085","line":"//  18 22 26 30 ..."},
{"lineNum":" 2086","line":"//  19 23 27 31 ..."},
{"lineNum":" 2087","line":"//"},
{"lineNum":" 2088","line":"//  32 33 34 35 ..."},
{"lineNum":" 2089","line":"//  36 36 38 39 ..."},
{"lineNum":" 2090","line":"template<typename Scalar, typename Index, typename DataMapper, int Pack1, int Pack2, typename Packet, bool Conjugate, bool PanelMode>"},
{"lineNum":" 2091","line":"struct gemm_pack_lhs<Scalar, Index, DataMapper, Pack1, Pack2, Packet, ColMajor, Conjugate, PanelMode>"},
{"lineNum":" 2092","line":"{"},
{"lineNum":" 2093","line":"  typedef typename DataMapper::LinearMapper LinearMapper;"},
{"lineNum":" 2094","line":"  EIGEN_DONT_INLINE void operator()(Scalar* blockA, const DataMapper& lhs, Index depth, Index rows, Index stride=0, Index offset=0);"},
{"lineNum":" 2095","line":"};"},
{"lineNum":" 2096","line":""},
{"lineNum":" 2097","line":"template<typename Scalar, typename Index, typename DataMapper, int Pack1, int Pack2, typename Packet, bool Conjugate, bool PanelMode>"},
{"lineNum":" 2098","line":"EIGEN_DONT_INLINE void gemm_pack_lhs<Scalar, Index, DataMapper, Pack1, Pack2, Packet, ColMajor, Conjugate, PanelMode>"},
{"lineNum":" 2099","line":"  ::operator()(Scalar* blockA, const DataMapper& lhs, Index depth, Index rows, Index stride, Index offset)"},
{"lineNum":" 2100","line":"{","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2101","line":"  typedef typename unpacket_traits<Packet>::half HalfPacket;"},
{"lineNum":" 2102","line":"  typedef typename unpacket_traits<typename unpacket_traits<Packet>::half>::half QuarterPacket;"},
{"lineNum":" 2103","line":"  enum { PacketSize = unpacket_traits<Packet>::size,"},
{"lineNum":" 2104","line":"         HalfPacketSize = unpacket_traits<HalfPacket>::size,"},
{"lineNum":" 2105","line":"         QuarterPacketSize = unpacket_traits<QuarterPacket>::size,"},
{"lineNum":" 2106","line":"         HasHalf = (int)HalfPacketSize < (int)PacketSize,"},
{"lineNum":" 2107","line":"         HasQuarter = (int)QuarterPacketSize < (int)HalfPacketSize};"},
{"lineNum":" 2108","line":""},
{"lineNum":" 2109","line":"  EIGEN_ASM_COMMENT(\"EIGEN PRODUCT PACK LHS\");","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2110","line":"  EIGEN_UNUSED_VARIABLE(stride);"},
{"lineNum":" 2111","line":"  EIGEN_UNUSED_VARIABLE(offset);"},
{"lineNum":" 2112","line":"  eigen_assert(((!PanelMode) && stride==0 && offset==0) || (PanelMode && stride>=depth && offset<=stride));"},
{"lineNum":" 2113","line":"  eigen_assert( ((Pack1%PacketSize)==0 && Pack1<=4*PacketSize) || (Pack1<=4) );"},
{"lineNum":" 2114","line":"  conj_if<NumTraits<Scalar>::IsComplex && Conjugate> cj;"},
{"lineNum":" 2115","line":"  Index count = 0;"},
{"lineNum":" 2116","line":""},
{"lineNum":" 2117","line":"  const Index peeled_mc3 = Pack1>=3*PacketSize ? (rows/(3*PacketSize))*(3*PacketSize) : 0;"},
{"lineNum":" 2118","line":"  const Index peeled_mc2 = Pack1>=2*PacketSize ? peeled_mc3+((rows-peeled_mc3)/(2*PacketSize))*(2*PacketSize) : 0;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2119","line":"  const Index peeled_mc1 = Pack1>=1*PacketSize ? peeled_mc2+((rows-peeled_mc2)/(1*PacketSize))*(1*PacketSize) : 0;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2120","line":"  const Index peeled_mc_half = Pack1>=HalfPacketSize ? peeled_mc1+((rows-peeled_mc1)/(HalfPacketSize))*(HalfPacketSize) : 0;"},
{"lineNum":" 2121","line":"  const Index peeled_mc_quarter = Pack1>=QuarterPacketSize ? (rows/(QuarterPacketSize))*(QuarterPacketSize) : 0;"},
{"lineNum":" 2122","line":"  const Index last_lhs_progress = rows > peeled_mc_quarter ? (rows - peeled_mc_quarter) & ~1 : 0;"},
{"lineNum":" 2123","line":"  const Index peeled_mc0 = Pack2>=PacketSize ? peeled_mc_quarter"},
{"lineNum":" 2124","line":"                         : Pack2>1 && last_lhs_progress ? (rows/last_lhs_progress)*last_lhs_progress : 0;"},
{"lineNum":" 2125","line":""},
{"lineNum":" 2126","line":"  Index i=0;"},
{"lineNum":" 2127","line":""},
{"lineNum":" 2128","line":"  // Pack 3 packets"},
{"lineNum":" 2129","line":"  if(Pack1>=3*PacketSize)"},
{"lineNum":" 2130","line":"  {"},
{"lineNum":" 2131","line":"    for(; i<peeled_mc3; i+=3*PacketSize)"},
{"lineNum":" 2132","line":"    {"},
{"lineNum":" 2133","line":"      if(PanelMode) count += (3*PacketSize) * offset;"},
{"lineNum":" 2134","line":""},
{"lineNum":" 2135","line":"      for(Index k=0; k<depth; k++)"},
{"lineNum":" 2136","line":"      {"},
{"lineNum":" 2137","line":"        Packet A, B, C;"},
{"lineNum":" 2138","line":"        A = lhs.template loadPacket<Packet>(i+0*PacketSize, k);"},
{"lineNum":" 2139","line":"        B = lhs.template loadPacket<Packet>(i+1*PacketSize, k);"},
{"lineNum":" 2140","line":"        C = lhs.template loadPacket<Packet>(i+2*PacketSize, k);"},
{"lineNum":" 2141","line":"        pstore(blockA+count, cj.pconj(A)); count+=PacketSize;"},
{"lineNum":" 2142","line":"        pstore(blockA+count, cj.pconj(B)); count+=PacketSize;"},
{"lineNum":" 2143","line":"        pstore(blockA+count, cj.pconj(C)); count+=PacketSize;"},
{"lineNum":" 2144","line":"      }"},
{"lineNum":" 2145","line":"      if(PanelMode) count += (3*PacketSize) * (stride-offset-depth);"},
{"lineNum":" 2146","line":"    }"},
{"lineNum":" 2147","line":"  }"},
{"lineNum":" 2148","line":"  // Pack 2 packets"},
{"lineNum":" 2149","line":"  if(Pack1>=2*PacketSize)"},
{"lineNum":" 2150","line":"  {"},
{"lineNum":" 2151","line":"    for(; i<peeled_mc2; i+=2*PacketSize)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 2152","line":"    {"},
{"lineNum":" 2153","line":"      if(PanelMode) count += (2*PacketSize) * offset;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2154","line":""},
{"lineNum":" 2155","line":"      for(Index k=0; k<depth; k++)","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 2156","line":"      {"},
{"lineNum":" 2157","line":"        Packet A, B;"},
{"lineNum":" 2158","line":"        A = lhs.template loadPacket<Packet>(i+0*PacketSize, k);"},
{"lineNum":" 2159","line":"        B = lhs.template loadPacket<Packet>(i+1*PacketSize, k);"},
{"lineNum":" 2160","line":"        pstore(blockA+count, cj.pconj(A)); count+=PacketSize;"},
{"lineNum":" 2161","line":"        pstore(blockA+count, cj.pconj(B)); count+=PacketSize;","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 2162","line":"      }"},
{"lineNum":" 2163","line":"      if(PanelMode) count += (2*PacketSize) * (stride-offset-depth);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2164","line":"    }"},
{"lineNum":" 2165","line":"  }"},
{"lineNum":" 2166","line":"  // Pack 1 packets"},
{"lineNum":" 2167","line":"  if(Pack1>=1*PacketSize)"},
{"lineNum":" 2168","line":"  {"},
{"lineNum":" 2169","line":"    for(; i<peeled_mc1; i+=1*PacketSize)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 2170","line":"    {"},
{"lineNum":" 2171","line":"      if(PanelMode) count += (1*PacketSize) * offset;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2172","line":""},
{"lineNum":" 2173","line":"      for(Index k=0; k<depth; k++)","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 2174","line":"      {"},
{"lineNum":" 2175","line":"        Packet A;"},
{"lineNum":" 2176","line":"        A = lhs.template loadPacket<Packet>(i+0*PacketSize, k);"},
{"lineNum":" 2177","line":"        pstore(blockA+count, cj.pconj(A));"},
{"lineNum":" 2178","line":"        count+=PacketSize;","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 2179","line":"      }"},
{"lineNum":" 2180","line":"      if(PanelMode) count += (1*PacketSize) * (stride-offset-depth);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2181","line":"    }"},
{"lineNum":" 2182","line":"  }"},
{"lineNum":" 2183","line":"  // Pack half packets"},
{"lineNum":" 2184","line":"  if(HasHalf && Pack1>=HalfPacketSize)"},
{"lineNum":" 2185","line":"  {"},
{"lineNum":" 2186","line":"    for(; i<peeled_mc_half; i+=HalfPacketSize)"},
{"lineNum":" 2187","line":"    {"},
{"lineNum":" 2188","line":"      if(PanelMode) count += (HalfPacketSize) * offset;"},
{"lineNum":" 2189","line":""},
{"lineNum":" 2190","line":"      for(Index k=0; k<depth; k++)"},
{"lineNum":" 2191","line":"      {"},
{"lineNum":" 2192","line":"        HalfPacket A;"},
{"lineNum":" 2193","line":"        A = lhs.template loadPacket<HalfPacket>(i+0*(HalfPacketSize), k);"},
{"lineNum":" 2194","line":"        pstoreu(blockA+count, cj.pconj(A));"},
{"lineNum":" 2195","line":"        count+=HalfPacketSize;"},
{"lineNum":" 2196","line":"      }"},
{"lineNum":" 2197","line":"      if(PanelMode) count += (HalfPacketSize) * (stride-offset-depth);"},
{"lineNum":" 2198","line":"    }"},
{"lineNum":" 2199","line":"  }"},
{"lineNum":" 2200","line":"  // Pack quarter packets"},
{"lineNum":" 2201","line":"  if(HasQuarter && Pack1>=QuarterPacketSize)"},
{"lineNum":" 2202","line":"  {"},
{"lineNum":" 2203","line":"    for(; i<peeled_mc_quarter; i+=QuarterPacketSize)"},
{"lineNum":" 2204","line":"    {"},
{"lineNum":" 2205","line":"      if(PanelMode) count += (QuarterPacketSize) * offset;"},
{"lineNum":" 2206","line":""},
{"lineNum":" 2207","line":"      for(Index k=0; k<depth; k++)"},
{"lineNum":" 2208","line":"      {"},
{"lineNum":" 2209","line":"        QuarterPacket A;"},
{"lineNum":" 2210","line":"        A = lhs.template loadPacket<QuarterPacket>(i+0*(QuarterPacketSize), k);"},
{"lineNum":" 2211","line":"        pstoreu(blockA+count, cj.pconj(A));"},
{"lineNum":" 2212","line":"        count+=QuarterPacketSize;"},
{"lineNum":" 2213","line":"      }"},
{"lineNum":" 2214","line":"      if(PanelMode) count += (QuarterPacketSize) * (stride-offset-depth);"},
{"lineNum":" 2215","line":"    }"},
{"lineNum":" 2216","line":"  }"},
{"lineNum":" 2217","line":"  // Pack2 may be *smaller* than PacketSize—that happens for"},
{"lineNum":" 2218","line":"  // products like real * complex, where we have to go half the"},
{"lineNum":" 2219","line":"  // progress on the lhs in order to duplicate those operands to"},
{"lineNum":" 2220","line":"  // address both real & imaginary parts on the rhs. This portion will"},
{"lineNum":" 2221","line":"  // pack those half ones until they match the number expected on the"},
{"lineNum":" 2222","line":"  // last peeling loop at this point (for the rhs)."},
{"lineNum":" 2223","line":"  if(Pack2<PacketSize && Pack2>1)"},
{"lineNum":" 2224","line":"  {"},
{"lineNum":" 2225","line":"    for(; i<peeled_mc0; i+=last_lhs_progress)"},
{"lineNum":" 2226","line":"    {"},
{"lineNum":" 2227","line":"      if(PanelMode) count += last_lhs_progress * offset;"},
{"lineNum":" 2228","line":""},
{"lineNum":" 2229","line":"      for(Index k=0; k<depth; k++)"},
{"lineNum":" 2230","line":"        for(Index w=0; w<last_lhs_progress; w++)"},
{"lineNum":" 2231","line":"          blockA[count++] = cj(lhs(i+w, k));"},
{"lineNum":" 2232","line":""},
{"lineNum":" 2233","line":"      if(PanelMode) count += last_lhs_progress * (stride-offset-depth);"},
{"lineNum":" 2234","line":"    }"},
{"lineNum":" 2235","line":"  }"},
{"lineNum":" 2236","line":"  // Pack scalars"},
{"lineNum":" 2237","line":"  for(; i<rows; i++)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 2238","line":"  {"},
{"lineNum":" 2239","line":"    if(PanelMode) count += offset;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2240","line":"    for(Index k=0; k<depth; k++)","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":" 2241","line":"      blockA[count++] = cj(lhs(i, k));","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":" 2242","line":"    if(PanelMode) count += (stride-offset-depth);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2243","line":"  }"},
{"lineNum":" 2244","line":"}","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 2245","line":""},
{"lineNum":" 2246","line":"template<typename Scalar, typename Index, typename DataMapper, int Pack1, int Pack2, typename Packet, bool Conjugate, bool PanelMode>"},
{"lineNum":" 2247","line":"struct gemm_pack_lhs<Scalar, Index, DataMapper, Pack1, Pack2, Packet, RowMajor, Conjugate, PanelMode>"},
{"lineNum":" 2248","line":"{"},
{"lineNum":" 2249","line":"  typedef typename DataMapper::LinearMapper LinearMapper;"},
{"lineNum":" 2250","line":"  EIGEN_DONT_INLINE void operator()(Scalar* blockA, const DataMapper& lhs, Index depth, Index rows, Index stride=0, Index offset=0);"},
{"lineNum":" 2251","line":"};"},
{"lineNum":" 2252","line":""},
{"lineNum":" 2253","line":"template<typename Scalar, typename Index, typename DataMapper, int Pack1, int Pack2, typename Packet, bool Conjugate, bool PanelMode>"},
{"lineNum":" 2254","line":"EIGEN_DONT_INLINE void gemm_pack_lhs<Scalar, Index, DataMapper, Pack1, Pack2, Packet, RowMajor, Conjugate, PanelMode>"},
{"lineNum":" 2255","line":"  ::operator()(Scalar* blockA, const DataMapper& lhs, Index depth, Index rows, Index stride, Index offset)"},
{"lineNum":" 2256","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2257","line":"  typedef typename unpacket_traits<Packet>::half HalfPacket;"},
{"lineNum":" 2258","line":"  typedef typename unpacket_traits<typename unpacket_traits<Packet>::half>::half QuarterPacket;"},
{"lineNum":" 2259","line":"  enum { PacketSize = unpacket_traits<Packet>::size,"},
{"lineNum":" 2260","line":"         HalfPacketSize = unpacket_traits<HalfPacket>::size,"},
{"lineNum":" 2261","line":"         QuarterPacketSize = unpacket_traits<QuarterPacket>::size,"},
{"lineNum":" 2262","line":"         HasHalf = (int)HalfPacketSize < (int)PacketSize,"},
{"lineNum":" 2263","line":"         HasQuarter = (int)QuarterPacketSize < (int)HalfPacketSize};"},
{"lineNum":" 2264","line":""},
{"lineNum":" 2265","line":"  EIGEN_ASM_COMMENT(\"EIGEN PRODUCT PACK LHS\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2266","line":"  EIGEN_UNUSED_VARIABLE(stride);"},
{"lineNum":" 2267","line":"  EIGEN_UNUSED_VARIABLE(offset);"},
{"lineNum":" 2268","line":"  eigen_assert(((!PanelMode) && stride==0 && offset==0) || (PanelMode && stride>=depth && offset<=stride));"},
{"lineNum":" 2269","line":"  conj_if<NumTraits<Scalar>::IsComplex && Conjugate> cj;"},
{"lineNum":" 2270","line":"  Index count = 0;"},
{"lineNum":" 2271","line":"  bool gone_half = false, gone_quarter = false, gone_last = false;"},
{"lineNum":" 2272","line":""},
{"lineNum":" 2273","line":"  Index i = 0;"},
{"lineNum":" 2274","line":"  int pack = Pack1;"},
{"lineNum":" 2275","line":"  int psize = PacketSize;"},
{"lineNum":" 2276","line":"  while(pack>0)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2277","line":"  {"},
{"lineNum":" 2278","line":"    Index remaining_rows = rows-i;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2279","line":"    Index peeled_mc = gone_last ? Pack2>1 ? (rows/pack)*pack : 0 : i+(remaining_rows/pack)*pack;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2280","line":"    Index starting_pos = i;"},
{"lineNum":" 2281","line":"    for(; i<peeled_mc; i+=pack)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2282","line":"    {"},
{"lineNum":" 2283","line":"      if(PanelMode) count += pack * offset;"},
{"lineNum":" 2284","line":""},
{"lineNum":" 2285","line":"      Index k=0;"},
{"lineNum":" 2286","line":"      if(pack>=psize && psize >= QuarterPacketSize)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2287","line":"      {"},
{"lineNum":" 2288","line":"        const Index peeled_k = (depth/psize)*psize;"},
{"lineNum":" 2289","line":"        for(; k<peeled_k; k+=psize)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2290","line":"        {"},
{"lineNum":" 2291","line":"          for (Index m = 0; m < pack; m += psize)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2292","line":"          {"},
{"lineNum":" 2293","line":"            if (psize == PacketSize) {"},
{"lineNum":" 2294","line":"              PacketBlock<Packet> kernel;"},
{"lineNum":" 2295","line":"              for (int p = 0; p < psize; ++p) kernel.packet[p] = lhs.template loadPacket<Packet>(i+p+m, k);"},
{"lineNum":" 2296","line":"              ptranspose(kernel);"},
{"lineNum":" 2297","line":"              for (int p = 0; p < psize; ++p) pstore(blockA+count+m+(pack)*p, cj.pconj(kernel.packet[p]));"},
{"lineNum":" 2298","line":"            } else if (HasHalf && psize == HalfPacketSize) {"},
{"lineNum":" 2299","line":"              gone_half = true;"},
{"lineNum":" 2300","line":"              PacketBlock<HalfPacket> kernel_half;"},
{"lineNum":" 2301","line":"              for (int p = 0; p < psize; ++p) kernel_half.packet[p] = lhs.template loadPacket<HalfPacket>(i+p+m, k);"},
{"lineNum":" 2302","line":"              ptranspose(kernel_half);"},
{"lineNum":" 2303","line":"              for (int p = 0; p < psize; ++p) pstore(blockA+count+m+(pack)*p, cj.pconj(kernel_half.packet[p]));"},
{"lineNum":" 2304","line":"            } else if (HasQuarter && psize == QuarterPacketSize) {"},
{"lineNum":" 2305","line":"              gone_quarter = true;"},
{"lineNum":" 2306","line":"              PacketBlock<QuarterPacket> kernel_quarter;"},
{"lineNum":" 2307","line":"              for (int p = 0; p < psize; ++p) kernel_quarter.packet[p] = lhs.template loadPacket<QuarterPacket>(i+p+m, k);"},
{"lineNum":" 2308","line":"              ptranspose(kernel_quarter);"},
{"lineNum":" 2309","line":"              for (int p = 0; p < psize; ++p) pstore(blockA+count+m+(pack)*p, cj.pconj(kernel_quarter.packet[p]));"},
{"lineNum":" 2310","line":"\t    }"},
{"lineNum":" 2311","line":"          }"},
{"lineNum":" 2312","line":"          count += psize*pack;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2313","line":"        }"},
{"lineNum":" 2314","line":"      }"},
{"lineNum":" 2315","line":""},
{"lineNum":" 2316","line":"      for(; k<depth; k++)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2317","line":"      {"},
{"lineNum":" 2318","line":"        Index w=0;"},
{"lineNum":" 2319","line":"        for(; w<pack-3; w+=4)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2320","line":"        {"},
{"lineNum":" 2321","line":"          Scalar a(cj(lhs(i+w+0, k))),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2322","line":"                 b(cj(lhs(i+w+1, k))),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2323","line":"                 c(cj(lhs(i+w+2, k))),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2324","line":"                 d(cj(lhs(i+w+3, k)));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2325","line":"          blockA[count++] = a;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2326","line":"          blockA[count++] = b;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2327","line":"          blockA[count++] = c;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2328","line":"          blockA[count++] = d;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2329","line":"        }"},
{"lineNum":" 2330","line":"        if(pack%4)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2331","line":"          for(;w<pack;++w)","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 2332","line":"            blockA[count++] = cj(lhs(i+w, k));","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 2333","line":"      }"},
{"lineNum":" 2334","line":""},
{"lineNum":" 2335","line":"      if(PanelMode) count += pack * (stride-offset-depth);"},
{"lineNum":" 2336","line":"    }"},
{"lineNum":" 2337","line":""},
{"lineNum":" 2338","line":"    pack -= psize;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2339","line":"    Index left = rows - i;"},
{"lineNum":" 2340","line":"    if (pack <= 0) {"},
{"lineNum":" 2341","line":"      if (!gone_last &&"},
{"lineNum":" 2342","line":"          (starting_pos == i || left >= psize/2 || left >= psize/4) &&"},
{"lineNum":" 2343","line":"          ((psize/2 == HalfPacketSize && HasHalf && !gone_half) ||"},
{"lineNum":" 2344","line":"           (psize/2 == QuarterPacketSize && HasQuarter && !gone_quarter))) {"},
{"lineNum":" 2345","line":"        psize /= 2;"},
{"lineNum":" 2346","line":"        pack = psize;"},
{"lineNum":" 2347","line":"        continue;"},
{"lineNum":" 2348","line":"      }"},
{"lineNum":" 2349","line":"      // Pack2 may be *smaller* than PacketSize—that happens for"},
{"lineNum":" 2350","line":"      // products like real * complex, where we have to go half the"},
{"lineNum":" 2351","line":"      // progress on the lhs in order to duplicate those operands to"},
{"lineNum":" 2352","line":"      // address both real & imaginary parts on the rhs. This portion will"},
{"lineNum":" 2353","line":"      // pack those half ones until they match the number expected on the"},
{"lineNum":" 2354","line":"      // last peeling loop at this point (for the rhs)."},
{"lineNum":" 2355","line":"      if (Pack2 < PacketSize && !gone_last) {"},
{"lineNum":" 2356","line":"        gone_last = true;"},
{"lineNum":" 2357","line":"        psize = pack = left & ~1;"},
{"lineNum":" 2358","line":"      }"},
{"lineNum":" 2359","line":"    }"},
{"lineNum":" 2360","line":"  }"},
{"lineNum":" 2361","line":""},
{"lineNum":" 2362","line":"  for(; i<rows; i++)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2363","line":"  {"},
{"lineNum":" 2364","line":"    if(PanelMode) count += offset;"},
{"lineNum":" 2365","line":"    for(Index k=0; k<depth; k++)","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":" 2366","line":"      blockA[count++] = cj(lhs(i, k));","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 2367","line":"    if(PanelMode) count += (stride-offset-depth);"},
{"lineNum":" 2368","line":"  }"},
{"lineNum":" 2369","line":"}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2370","line":""},
{"lineNum":" 2371","line":"// copy a complete panel of the rhs"},
{"lineNum":" 2372","line":"// this version is optimized for column major matrices"},
{"lineNum":" 2373","line":"// The traversal order is as follow: (nr==4):"},
{"lineNum":" 2374","line":"//  0  1  2  3   12 13 14 15   24 27"},
{"lineNum":" 2375","line":"//  4  5  6  7   16 17 18 19   25 28"},
{"lineNum":" 2376","line":"//  8  9 10 11   20 21 22 23   26 29"},
{"lineNum":" 2377","line":"//  .  .  .  .    .  .  .  .    .  ."},
{"lineNum":" 2378","line":"template<typename Scalar, typename Index, typename DataMapper, int nr, bool Conjugate, bool PanelMode>"},
{"lineNum":" 2379","line":"struct gemm_pack_rhs<Scalar, Index, DataMapper, nr, ColMajor, Conjugate, PanelMode>"},
{"lineNum":" 2380","line":"{"},
{"lineNum":" 2381","line":"  typedef typename packet_traits<Scalar>::type Packet;"},
{"lineNum":" 2382","line":"  typedef typename DataMapper::LinearMapper LinearMapper;"},
{"lineNum":" 2383","line":"  enum { PacketSize = packet_traits<Scalar>::size };"},
{"lineNum":" 2384","line":"  EIGEN_DONT_INLINE void operator()(Scalar* blockB, const DataMapper& rhs, Index depth, Index cols, Index stride=0, Index offset=0);"},
{"lineNum":" 2385","line":"};"},
{"lineNum":" 2386","line":""},
{"lineNum":" 2387","line":"template<typename Scalar, typename Index, typename DataMapper, int nr, bool Conjugate, bool PanelMode>"},
{"lineNum":" 2388","line":"EIGEN_DONT_INLINE void gemm_pack_rhs<Scalar, Index, DataMapper, nr, ColMajor, Conjugate, PanelMode>"},
{"lineNum":" 2389","line":"  ::operator()(Scalar* blockB, const DataMapper& rhs, Index depth, Index cols, Index stride, Index offset)"},
{"lineNum":" 2390","line":"{","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 2391","line":"  EIGEN_ASM_COMMENT(\"EIGEN PRODUCT PACK RHS COLMAJOR\");","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 2392","line":"  EIGEN_UNUSED_VARIABLE(stride);"},
{"lineNum":" 2393","line":"  EIGEN_UNUSED_VARIABLE(offset);"},
{"lineNum":" 2394","line":"  eigen_assert(((!PanelMode) && stride==0 && offset==0) || (PanelMode && stride>=depth && offset<=stride));"},
{"lineNum":" 2395","line":"  conj_if<NumTraits<Scalar>::IsComplex && Conjugate> cj;"},
{"lineNum":" 2396","line":"  Index packet_cols8 = nr>=8 ? (cols/8) * 8 : 0;"},
{"lineNum":" 2397","line":"  Index packet_cols4 = nr>=4 ? (cols/4) * 4 : 0;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 2398","line":"  Index count = 0;"},
{"lineNum":" 2399","line":"  const Index peeled_k = (depth/PacketSize)*PacketSize;"},
{"lineNum":" 2400","line":"//   if(nr>=8)"},
{"lineNum":" 2401","line":"//   {"},
{"lineNum":" 2402","line":"//     for(Index j2=0; j2<packet_cols8; j2+=8)"},
{"lineNum":" 2403","line":"//     {"},
{"lineNum":" 2404","line":"//       // skip what we have before"},
{"lineNum":" 2405","line":"//       if(PanelMode) count += 8 * offset;"},
{"lineNum":" 2406","line":"//       const Scalar* b0 = &rhs[(j2+0)*rhsStride];"},
{"lineNum":" 2407","line":"//       const Scalar* b1 = &rhs[(j2+1)*rhsStride];"},
{"lineNum":" 2408","line":"//       const Scalar* b2 = &rhs[(j2+2)*rhsStride];"},
{"lineNum":" 2409","line":"//       const Scalar* b3 = &rhs[(j2+3)*rhsStride];"},
{"lineNum":" 2410","line":"//       const Scalar* b4 = &rhs[(j2+4)*rhsStride];"},
{"lineNum":" 2411","line":"//       const Scalar* b5 = &rhs[(j2+5)*rhsStride];"},
{"lineNum":" 2412","line":"//       const Scalar* b6 = &rhs[(j2+6)*rhsStride];"},
{"lineNum":" 2413","line":"//       const Scalar* b7 = &rhs[(j2+7)*rhsStride];"},
{"lineNum":" 2414","line":"//       Index k=0;"},
{"lineNum":" 2415","line":"//       if(PacketSize==8) // TODO enable vectorized transposition for PacketSize==4"},
{"lineNum":" 2416","line":"//       {"},
{"lineNum":" 2417","line":"//         for(; k<peeled_k; k+=PacketSize) {"},
{"lineNum":" 2418","line":"//           PacketBlock<Packet> kernel;"},
{"lineNum":" 2419","line":"//           for (int p = 0; p < PacketSize; ++p) {"},
{"lineNum":" 2420","line":"//             kernel.packet[p] = ploadu<Packet>(&rhs[(j2+p)*rhsStride+k]);"},
{"lineNum":" 2421","line":"//           }"},
{"lineNum":" 2422","line":"//           ptranspose(kernel);"},
{"lineNum":" 2423","line":"//           for (int p = 0; p < PacketSize; ++p) {"},
{"lineNum":" 2424","line":"//             pstoreu(blockB+count, cj.pconj(kernel.packet[p]));"},
{"lineNum":" 2425","line":"//             count+=PacketSize;"},
{"lineNum":" 2426","line":"//           }"},
{"lineNum":" 2427","line":"//         }"},
{"lineNum":" 2428","line":"//       }"},
{"lineNum":" 2429","line":"//       for(; k<depth; k++)"},
{"lineNum":" 2430","line":"//       {"},
{"lineNum":" 2431","line":"//         blockB[count+0] = cj(b0[k]);"},
{"lineNum":" 2432","line":"//         blockB[count+1] = cj(b1[k]);"},
{"lineNum":" 2433","line":"//         blockB[count+2] = cj(b2[k]);"},
{"lineNum":" 2434","line":"//         blockB[count+3] = cj(b3[k]);"},
{"lineNum":" 2435","line":"//         blockB[count+4] = cj(b4[k]);"},
{"lineNum":" 2436","line":"//         blockB[count+5] = cj(b5[k]);"},
{"lineNum":" 2437","line":"//         blockB[count+6] = cj(b6[k]);"},
{"lineNum":" 2438","line":"//         blockB[count+7] = cj(b7[k]);"},
{"lineNum":" 2439","line":"//         count += 8;"},
{"lineNum":" 2440","line":"//       }"},
{"lineNum":" 2441","line":"//       // skip what we have after"},
{"lineNum":" 2442","line":"//       if(PanelMode) count += 8 * (stride-offset-depth);"},
{"lineNum":" 2443","line":"//     }"},
{"lineNum":" 2444","line":"//   }"},
{"lineNum":" 2445","line":""},
{"lineNum":" 2446","line":"  if(nr>=4)"},
{"lineNum":" 2447","line":"  {"},
{"lineNum":" 2448","line":"    for(Index j2=packet_cols8; j2<packet_cols4; j2+=4)","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":" 2449","line":"    {"},
{"lineNum":" 2450","line":"      // skip what we have before"},
{"lineNum":" 2451","line":"      if(PanelMode) count += 4 * offset;","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 2452","line":"      const LinearMapper dm0 = rhs.getLinearMapper(0, j2 + 0);"},
{"lineNum":" 2453","line":"      const LinearMapper dm1 = rhs.getLinearMapper(0, j2 + 1);"},
{"lineNum":" 2454","line":"      const LinearMapper dm2 = rhs.getLinearMapper(0, j2 + 2);"},
{"lineNum":" 2455","line":"      const LinearMapper dm3 = rhs.getLinearMapper(0, j2 + 3);"},
{"lineNum":" 2456","line":""},
{"lineNum":" 2457","line":"      Index k=0;"},
{"lineNum":" 2458","line":"      if((PacketSize%4)==0) // TODO enable vectorized transposition for PacketSize==2 ??"},
{"lineNum":" 2459","line":"      {"},
{"lineNum":" 2460","line":"        for(; k<peeled_k; k+=PacketSize) {"},
{"lineNum":" 2461","line":"          PacketBlock<Packet,(PacketSize%4)==0?4:PacketSize> kernel;"},
{"lineNum":" 2462","line":"          kernel.packet[0           ] = dm0.template loadPacket<Packet>(k);"},
{"lineNum":" 2463","line":"          kernel.packet[1%PacketSize] = dm1.template loadPacket<Packet>(k);"},
{"lineNum":" 2464","line":"          kernel.packet[2%PacketSize] = dm2.template loadPacket<Packet>(k);"},
{"lineNum":" 2465","line":"          kernel.packet[3%PacketSize] = dm3.template loadPacket<Packet>(k);"},
{"lineNum":" 2466","line":"          ptranspose(kernel);"},
{"lineNum":" 2467","line":"          pstoreu(blockB+count+0*PacketSize, cj.pconj(kernel.packet[0]));"},
{"lineNum":" 2468","line":"          pstoreu(blockB+count+1*PacketSize, cj.pconj(kernel.packet[1%PacketSize]));"},
{"lineNum":" 2469","line":"          pstoreu(blockB+count+2*PacketSize, cj.pconj(kernel.packet[2%PacketSize]));"},
{"lineNum":" 2470","line":"          pstoreu(blockB+count+3*PacketSize, cj.pconj(kernel.packet[3%PacketSize]));"},
{"lineNum":" 2471","line":"          count+=4*PacketSize;"},
{"lineNum":" 2472","line":"        }"},
{"lineNum":" 2473","line":"      }"},
{"lineNum":" 2474","line":"      for(; k<depth; k++)","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":" 2475","line":"      {"},
{"lineNum":" 2476","line":"        blockB[count+0] = cj(dm0(k));","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":" 2477","line":"        blockB[count+1] = cj(dm1(k));","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":" 2478","line":"        blockB[count+2] = cj(dm2(k));","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":" 2479","line":"        blockB[count+3] = cj(dm3(k));","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":" 2480","line":"        count += 4;"},
{"lineNum":" 2481","line":"      }"},
{"lineNum":" 2482","line":"      // skip what we have after"},
{"lineNum":" 2483","line":"      if(PanelMode) count += 4 * (stride-offset-depth);","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 2484","line":"    }"},
{"lineNum":" 2485","line":"  }"},
{"lineNum":" 2486","line":""},
{"lineNum":" 2487","line":"  // copy the remaining columns one at a time (nr==1)"},
{"lineNum":" 2488","line":"  for(Index j2=packet_cols4; j2<cols; ++j2)","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":" 2489","line":"  {"},
{"lineNum":" 2490","line":"    if(PanelMode) count += offset;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2491","line":"    const LinearMapper dm0 = rhs.getLinearMapper(0, j2);"},
{"lineNum":" 2492","line":"    for(Index k=0; k<depth; k++)","class":"lineNoCov","hits":"0","possible_hits":"30",},
{"lineNum":" 2493","line":"    {"},
{"lineNum":" 2494","line":"      blockB[count] = cj(dm0(k));","class":"lineNoCov","hits":"0","possible_hits":"24",},
{"lineNum":" 2495","line":"      count += 1;","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":" 2496","line":"    }"},
{"lineNum":" 2497","line":"    if(PanelMode) count += (stride-offset-depth);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2498","line":"  }"},
{"lineNum":" 2499","line":"}","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":" 2500","line":""},
{"lineNum":" 2501","line":"// this version is optimized for row major matrices"},
{"lineNum":" 2502","line":"template<typename Scalar, typename Index, typename DataMapper, int nr, bool Conjugate, bool PanelMode>"},
{"lineNum":" 2503","line":"struct gemm_pack_rhs<Scalar, Index, DataMapper, nr, RowMajor, Conjugate, PanelMode>"},
{"lineNum":" 2504","line":"{"},
{"lineNum":" 2505","line":"  typedef typename packet_traits<Scalar>::type Packet;"},
{"lineNum":" 2506","line":"  typedef typename unpacket_traits<Packet>::half HalfPacket;"},
{"lineNum":" 2507","line":"  typedef typename unpacket_traits<typename unpacket_traits<Packet>::half>::half QuarterPacket;"},
{"lineNum":" 2508","line":"  typedef typename DataMapper::LinearMapper LinearMapper;"},
{"lineNum":" 2509","line":"  enum { PacketSize = packet_traits<Scalar>::size,"},
{"lineNum":" 2510","line":"         HalfPacketSize = unpacket_traits<HalfPacket>::size,"},
{"lineNum":" 2511","line":"\t\t QuarterPacketSize = unpacket_traits<QuarterPacket>::size};"},
{"lineNum":" 2512","line":"  EIGEN_DONT_INLINE void operator()(Scalar* blockB, const DataMapper& rhs, Index depth, Index cols, Index stride=0, Index offset=0)"},
{"lineNum":" 2513","line":"  {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2514","line":"    EIGEN_ASM_COMMENT(\"EIGEN PRODUCT PACK RHS ROWMAJOR\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2515","line":"    EIGEN_UNUSED_VARIABLE(stride);"},
{"lineNum":" 2516","line":"    EIGEN_UNUSED_VARIABLE(offset);"},
{"lineNum":" 2517","line":"    eigen_assert(((!PanelMode) && stride==0 && offset==0) || (PanelMode && stride>=depth && offset<=stride));"},
{"lineNum":" 2518","line":"    const bool HasHalf = (int)HalfPacketSize < (int)PacketSize;"},
{"lineNum":" 2519","line":"    const bool HasQuarter = (int)QuarterPacketSize < (int)HalfPacketSize;"},
{"lineNum":" 2520","line":"    conj_if<NumTraits<Scalar>::IsComplex && Conjugate> cj;"},
{"lineNum":" 2521","line":"    Index packet_cols8 = nr>=8 ? (cols/8) * 8 : 0;"},
{"lineNum":" 2522","line":"    Index packet_cols4 = nr>=4 ? (cols/4) * 4 : 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2523","line":"    Index count = 0;"},
{"lineNum":" 2524","line":""},
{"lineNum":" 2525","line":"  //   if(nr>=8)"},
{"lineNum":" 2526","line":"  //   {"},
{"lineNum":" 2527","line":"  //     for(Index j2=0; j2<packet_cols8; j2+=8)"},
{"lineNum":" 2528","line":"  //     {"},
{"lineNum":" 2529","line":"  //       // skip what we have before"},
{"lineNum":" 2530","line":"  //       if(PanelMode) count += 8 * offset;"},
{"lineNum":" 2531","line":"  //       for(Index k=0; k<depth; k++)"},
{"lineNum":" 2532","line":"  //       {"},
{"lineNum":" 2533","line":"  //         if (PacketSize==8) {"},
{"lineNum":" 2534","line":"  //           Packet A = ploadu<Packet>(&rhs[k*rhsStride + j2]);"},
{"lineNum":" 2535","line":"  //           pstoreu(blockB+count, cj.pconj(A));"},
{"lineNum":" 2536","line":"  //         } else if (PacketSize==4) {"},
{"lineNum":" 2537","line":"  //           Packet A = ploadu<Packet>(&rhs[k*rhsStride + j2]);"},
{"lineNum":" 2538","line":"  //           Packet B = ploadu<Packet>(&rhs[k*rhsStride + j2 + PacketSize]);"},
{"lineNum":" 2539","line":"  //           pstoreu(blockB+count, cj.pconj(A));"},
{"lineNum":" 2540","line":"  //           pstoreu(blockB+count+PacketSize, cj.pconj(B));"},
{"lineNum":" 2541","line":"  //         } else {"},
{"lineNum":" 2542","line":"  //           const Scalar* b0 = &rhs[k*rhsStride + j2];"},
{"lineNum":" 2543","line":"  //           blockB[count+0] = cj(b0[0]);"},
{"lineNum":" 2544","line":"  //           blockB[count+1] = cj(b0[1]);"},
{"lineNum":" 2545","line":"  //           blockB[count+2] = cj(b0[2]);"},
{"lineNum":" 2546","line":"  //           blockB[count+3] = cj(b0[3]);"},
{"lineNum":" 2547","line":"  //           blockB[count+4] = cj(b0[4]);"},
{"lineNum":" 2548","line":"  //           blockB[count+5] = cj(b0[5]);"},
{"lineNum":" 2549","line":"  //           blockB[count+6] = cj(b0[6]);"},
{"lineNum":" 2550","line":"  //           blockB[count+7] = cj(b0[7]);"},
{"lineNum":" 2551","line":"  //         }"},
{"lineNum":" 2552","line":"  //         count += 8;"},
{"lineNum":" 2553","line":"  //       }"},
{"lineNum":" 2554","line":"  //       // skip what we have after"},
{"lineNum":" 2555","line":"  //       if(PanelMode) count += 8 * (stride-offset-depth);"},
{"lineNum":" 2556","line":"  //     }"},
{"lineNum":" 2557","line":"  //   }"},
{"lineNum":" 2558","line":"    if(nr>=4)"},
{"lineNum":" 2559","line":"    {"},
{"lineNum":" 2560","line":"      for(Index j2=packet_cols8; j2<packet_cols4; j2+=4)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2561","line":"      {"},
{"lineNum":" 2562","line":"        // skip what we have before"},
{"lineNum":" 2563","line":"        if(PanelMode) count += 4 * offset;"},
{"lineNum":" 2564","line":"        for(Index k=0; k<depth; k++)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2565","line":"        {"},
{"lineNum":" 2566","line":"          if (PacketSize==4) {"},
{"lineNum":" 2567","line":"            Packet A = rhs.template loadPacket<Packet>(k, j2);"},
{"lineNum":" 2568","line":"            pstoreu(blockB+count, cj.pconj(A));"},
{"lineNum":" 2569","line":"            count += PacketSize;"},
{"lineNum":" 2570","line":"          } else if (HasHalf && HalfPacketSize==4) {"},
{"lineNum":" 2571","line":"            HalfPacket A = rhs.template loadPacket<HalfPacket>(k, j2);"},
{"lineNum":" 2572","line":"            pstoreu(blockB+count, cj.pconj(A));"},
{"lineNum":" 2573","line":"            count += HalfPacketSize;"},
{"lineNum":" 2574","line":"          } else if (HasQuarter && QuarterPacketSize==4) {"},
{"lineNum":" 2575","line":"            QuarterPacket A = rhs.template loadPacket<QuarterPacket>(k, j2);"},
{"lineNum":" 2576","line":"            pstoreu(blockB+count, cj.pconj(A));"},
{"lineNum":" 2577","line":"            count += QuarterPacketSize;"},
{"lineNum":" 2578","line":"          } else {"},
{"lineNum":" 2579","line":"            const LinearMapper dm0 = rhs.getLinearMapper(k, j2);"},
{"lineNum":" 2580","line":"            blockB[count+0] = cj(dm0(0));","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2581","line":"            blockB[count+1] = cj(dm0(1));","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2582","line":"            blockB[count+2] = cj(dm0(2));","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2583","line":"            blockB[count+3] = cj(dm0(3));","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2584","line":"            count += 4;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2585","line":"          }"},
{"lineNum":" 2586","line":"        }"},
{"lineNum":" 2587","line":"        // skip what we have after"},
{"lineNum":" 2588","line":"        if(PanelMode) count += 4 * (stride-offset-depth);"},
{"lineNum":" 2589","line":"      }"},
{"lineNum":" 2590","line":"    }"},
{"lineNum":" 2591","line":"    // copy the remaining columns one at a time (nr==1)"},
{"lineNum":" 2592","line":"    for(Index j2=packet_cols4; j2<cols; ++j2)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2593","line":"    {"},
{"lineNum":" 2594","line":"      if(PanelMode) count += offset;"},
{"lineNum":" 2595","line":"      for(Index k=0; k<depth; k++)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 2596","line":"      {"},
{"lineNum":" 2597","line":"        blockB[count] = cj(rhs(k, j2));","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2598","line":"        count += 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2599","line":"      }"},
{"lineNum":" 2600","line":"      if(PanelMode) count += stride-offset-depth;"},
{"lineNum":" 2601","line":"    }"},
{"lineNum":" 2602","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2603","line":"};"},
{"lineNum":" 2604","line":""},
{"lineNum":" 2605","line":"} // end namespace internal"},
{"lineNum":" 2606","line":""},
{"lineNum":" 2607","line":"/** \\returns the currently set level 1 cpu cache size (in bytes) used to estimate the ideal blocking size parameters."},
{"lineNum":" 2608","line":"  * \\sa setCpuCacheSize */"},
{"lineNum":" 2609","line":"inline std::ptrdiff_t l1CacheSize()"},
{"lineNum":" 2610","line":"{"},
{"lineNum":" 2611","line":"  std::ptrdiff_t l1, l2, l3;"},
{"lineNum":" 2612","line":"  internal::manage_caching_sizes(GetAction, &l1, &l2, &l3);"},
{"lineNum":" 2613","line":"  return l1;"},
{"lineNum":" 2614","line":"}"},
{"lineNum":" 2615","line":""},
{"lineNum":" 2616","line":"/** \\returns the currently set level 2 cpu cache size (in bytes) used to estimate the ideal blocking size parameters."},
{"lineNum":" 2617","line":"  * \\sa setCpuCacheSize */"},
{"lineNum":" 2618","line":"inline std::ptrdiff_t l2CacheSize()"},
{"lineNum":" 2619","line":"{"},
{"lineNum":" 2620","line":"  std::ptrdiff_t l1, l2, l3;"},
{"lineNum":" 2621","line":"  internal::manage_caching_sizes(GetAction, &l1, &l2, &l3);"},
{"lineNum":" 2622","line":"  return l2;"},
{"lineNum":" 2623","line":"}"},
{"lineNum":" 2624","line":""},
{"lineNum":" 2625","line":"/** \\returns the currently set level 3 cpu cache size (in bytes) used to estimate the ideal blocking size paramete\\"},
{"lineNum":" 2626","line":"rs."},
{"lineNum":" 2627","line":"* \\sa setCpuCacheSize */"},
{"lineNum":" 2628","line":"inline std::ptrdiff_t l3CacheSize()"},
{"lineNum":" 2629","line":"{"},
{"lineNum":" 2630","line":"  std::ptrdiff_t l1, l2, l3;"},
{"lineNum":" 2631","line":"  internal::manage_caching_sizes(GetAction, &l1, &l2, &l3);"},
{"lineNum":" 2632","line":"  return l3;"},
{"lineNum":" 2633","line":"}"},
{"lineNum":" 2634","line":""},
{"lineNum":" 2635","line":"/** Set the cpu L1 and L2 cache sizes (in bytes)."},
{"lineNum":" 2636","line":"  * These values are use to adjust the size of the blocks"},
{"lineNum":" 2637","line":"  * for the algorithms working per blocks."},
{"lineNum":" 2638","line":"  *"},
{"lineNum":" 2639","line":"  * \\sa computeProductBlockingSizes */"},
{"lineNum":" 2640","line":"inline void setCpuCacheSizes(std::ptrdiff_t l1, std::ptrdiff_t l2, std::ptrdiff_t l3)"},
{"lineNum":" 2641","line":"{"},
{"lineNum":" 2642","line":"  internal::manage_caching_sizes(SetAction, &l1, &l2, &l3);"},
{"lineNum":" 2643","line":"}"},
{"lineNum":" 2644","line":""},
{"lineNum":" 2645","line":"} // end namespace Eigen"},
{"lineNum":" 2646","line":""},
{"lineNum":" 2647","line":"#endif // EIGEN_GENERAL_BLOCK_PANEL_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 225, "covered" : 0,};
var merged_data = [];
