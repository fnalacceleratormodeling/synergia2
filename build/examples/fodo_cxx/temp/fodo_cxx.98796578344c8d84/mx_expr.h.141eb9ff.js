var data = {lines:[
{"lineNum":"    1","line":"#ifndef MX_EXPR_H"},
{"lineNum":"    2","line":"#define MX_EXPR_H"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#include <string>"},
{"lineNum":"    5","line":"#include <utility>"},
{"lineNum":"    6","line":"#include <vector>"},
{"lineNum":"    7","line":"#include <boost/variant.hpp>"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"namespace synergia"},
{"lineNum":"   10","line":"{"},
{"lineNum":"   11","line":"  typedef double(*nfunc_t)();"},
{"lineNum":"   12","line":"  typedef double(*ufunc_t)(double);"},
{"lineNum":"   13","line":"  typedef double(*bfunc_t)(double, double);"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"  typedef std::pair<std::string, std::string> string_pair_t;"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"  struct nop_t;"},
{"lineNum":"   18","line":"  struct uop_t;"},
{"lineNum":"   19","line":"  struct bop_t;"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"  class MadX;"},
{"lineNum":"   22","line":"  class mx_calculator;"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"  typedef boost::variant< double"},
{"lineNum":"   25","line":"                        , std::string"},
{"lineNum":"   26","line":"                        , string_pair_t"},
{"lineNum":"   27","line":"                        , boost::recursive_wrapper<nop_t>"},
{"lineNum":"   28","line":"                        , boost::recursive_wrapper<uop_t>"},
{"lineNum":"   29","line":"                        , boost::recursive_wrapper<bop_t>"},
{"lineNum":"   30","line":"                        > mx_expr;"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"  typedef std::vector<mx_expr> mx_exprs;"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"  // evaluate the expression"},
{"lineNum":"   35","line":"  double mx_eval(mx_expr const & expr);"},
{"lineNum":"   36","line":"  double mx_eval(mx_expr const & expr, MadX const & mx);"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"  // retrieve the ref as a string"},
{"lineNum":"   39","line":"  std::string mx_expr_refstr(mx_expr const & expr);"},
{"lineNum":"   40","line":"}"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"struct synergia::nop_t","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   43","line":"{"},
{"lineNum":"   44","line":"  nop_t(mx_expr const & e)"},
{"lineNum":"   45","line":"    : expr(e) { }"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"  mx_expr expr;"},
{"lineNum":"   48","line":"};"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"struct synergia::uop_t","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   51","line":"{"},
{"lineNum":"   52","line":"  uop_t(ufunc_t f, mx_expr const & param)"},
{"lineNum":"   53","line":"    : param(param), func(f) { }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"  mx_expr param;"},
{"lineNum":"   56","line":"  ufunc_t func;"},
{"lineNum":"   57","line":"};"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"struct synergia::bop_t","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"   60","line":"{"},
{"lineNum":"   61","line":"  bop_t(bfunc_t f, mx_expr const & lhs, mx_expr const & rhs)"},
{"lineNum":"   62","line":"    : func(f), lhs(lhs), rhs(rhs) { }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"  bfunc_t func;"},
{"lineNum":"   65","line":"  mx_expr lhs;"},
{"lineNum":"   66","line":"  mx_expr rhs;"},
{"lineNum":"   67","line":"};"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"class synergia::mx_calculator"},
{"lineNum":"   70","line":"  : public boost::static_visitor<double>"},
{"lineNum":"   71","line":"{"},
{"lineNum":"   72","line":"public:"},
{"lineNum":"   73","line":"  mx_calculator()"},
{"lineNum":"   74","line":"    : mx(NULL), def(nan) { }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"  explicit"},
{"lineNum":"   77","line":"  mx_calculator(double def)"},
{"lineNum":"   78","line":"    : mx(NULL), def(def) { }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"  explicit"},
{"lineNum":"   81","line":"  mx_calculator(MadX const & mx)"},
{"lineNum":"   82","line":"    : mx(&mx),  def(nan) { }","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"  mx_calculator(MadX const & mx, double def)"},
{"lineNum":"   85","line":"    : mx(&mx),  def(def) { }","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"  double operator()(double val) const;"},
{"lineNum":"   88","line":"  double operator()(std::string const & ref) const;"},
{"lineNum":"   89","line":"  double operator()(string_pair_t const & ref) const;"},
{"lineNum":"   90","line":"  double operator()(nop_t const & n) const;"},
{"lineNum":"   91","line":"  double operator()(uop_t const & u) const;"},
{"lineNum":"   92","line":"  double operator()(bop_t const & b) const;"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"public:"},
{"lineNum":"   95","line":"  static double nan;"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"private:"},
{"lineNum":"   98","line":"  MadX const * mx;"},
{"lineNum":"   99","line":"  double def;"},
{"lineNum":"  100","line":"};"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 9, "covered" : 0,};
var merged_data = [];
