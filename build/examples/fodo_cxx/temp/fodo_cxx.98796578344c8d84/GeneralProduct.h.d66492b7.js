var data = {lines:[
{"lineNum":"    1","line":"// This file is part of Eigen, a lightweight C++ template library"},
{"lineNum":"    2","line":"// for linear algebra."},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Copyright (C) 2006-2008 Benoit Jacob <jacob.benoit.1@gmail.com>"},
{"lineNum":"    5","line":"// Copyright (C) 2008-2011 Gael Guennebaud <gael.guennebaud@inria.fr>"},
{"lineNum":"    6","line":"//"},
{"lineNum":"    7","line":"// This Source Code Form is subject to the terms of the Mozilla"},
{"lineNum":"    8","line":"// Public License v. 2.0. If a copy of the MPL was not distributed"},
{"lineNum":"    9","line":"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/."},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"#ifndef EIGEN_GENERAL_PRODUCT_H"},
{"lineNum":"   12","line":"#define EIGEN_GENERAL_PRODUCT_H"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"#include \"./InternalHeaderCheck.h\""},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"namespace Eigen {"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"enum {"},
{"lineNum":"   19","line":"  Large = 2,"},
{"lineNum":"   20","line":"  Small = 3"},
{"lineNum":"   21","line":"};"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"// Define the threshold value to fallback from the generic matrix-matrix product"},
{"lineNum":"   24","line":"// implementation (heavy) to the lightweight coeff-based product one."},
{"lineNum":"   25","line":"// See generic_product_impl<Lhs,Rhs,DenseShape,DenseShape,GemmProduct>"},
{"lineNum":"   26","line":"// in products/GeneralMatrixMatrix.h for more details."},
{"lineNum":"   27","line":"// TODO This threshold should also be used in the compile-time selector below."},
{"lineNum":"   28","line":"#ifndef EIGEN_GEMM_TO_COEFFBASED_THRESHOLD"},
{"lineNum":"   29","line":"// This default value has been obtained on a Haswell architecture."},
{"lineNum":"   30","line":"#define EIGEN_GEMM_TO_COEFFBASED_THRESHOLD 20"},
{"lineNum":"   31","line":"#endif"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"namespace internal {"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"template<int Rows, int Cols, int Depth> struct product_type_selector;"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"template<int Size, int MaxSize> struct product_size_category"},
{"lineNum":"   38","line":"{"},
{"lineNum":"   39","line":"  enum {"},
{"lineNum":"   40","line":"    #ifndef EIGEN_GPU_COMPILE_PHASE"},
{"lineNum":"   41","line":"    is_large = MaxSize == Dynamic ||"},
{"lineNum":"   42","line":"               Size >= EIGEN_CACHEFRIENDLY_PRODUCT_THRESHOLD ||"},
{"lineNum":"   43","line":"               (Size==Dynamic && MaxSize>=EIGEN_CACHEFRIENDLY_PRODUCT_THRESHOLD),"},
{"lineNum":"   44","line":"    #else"},
{"lineNum":"   45","line":"    is_large = 0,"},
{"lineNum":"   46","line":"    #endif"},
{"lineNum":"   47","line":"    value = is_large  ? Large"},
{"lineNum":"   48","line":"          : Size == 1 ? 1"},
{"lineNum":"   49","line":"                      : Small"},
{"lineNum":"   50","line":"  };"},
{"lineNum":"   51","line":"};"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"template<typename Lhs, typename Rhs> struct product_type"},
{"lineNum":"   54","line":"{"},
{"lineNum":"   55","line":"  typedef typename remove_all<Lhs>::type _Lhs;"},
{"lineNum":"   56","line":"  typedef typename remove_all<Rhs>::type _Rhs;"},
{"lineNum":"   57","line":"  enum {"},
{"lineNum":"   58","line":"    MaxRows = traits<_Lhs>::MaxRowsAtCompileTime,"},
{"lineNum":"   59","line":"    Rows    = traits<_Lhs>::RowsAtCompileTime,"},
{"lineNum":"   60","line":"    MaxCols = traits<_Rhs>::MaxColsAtCompileTime,"},
{"lineNum":"   61","line":"    Cols    = traits<_Rhs>::ColsAtCompileTime,"},
{"lineNum":"   62","line":"    MaxDepth = EIGEN_SIZE_MIN_PREFER_FIXED(traits<_Lhs>::MaxColsAtCompileTime,"},
{"lineNum":"   63","line":"                                           traits<_Rhs>::MaxRowsAtCompileTime),"},
{"lineNum":"   64","line":"    Depth = EIGEN_SIZE_MIN_PREFER_FIXED(traits<_Lhs>::ColsAtCompileTime,"},
{"lineNum":"   65","line":"                                        traits<_Rhs>::RowsAtCompileTime)"},
{"lineNum":"   66","line":"  };"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"  // the splitting into different lines of code here, introducing the _select enums and the typedef below,"},
{"lineNum":"   69","line":"  // is to work around an internal compiler error with gcc 4.1 and 4.2."},
{"lineNum":"   70","line":"private:"},
{"lineNum":"   71","line":"  enum {"},
{"lineNum":"   72","line":"    rows_select = product_size_category<Rows,MaxRows>::value,"},
{"lineNum":"   73","line":"    cols_select = product_size_category<Cols,MaxCols>::value,"},
{"lineNum":"   74","line":"    depth_select = product_size_category<Depth,MaxDepth>::value"},
{"lineNum":"   75","line":"  };"},
{"lineNum":"   76","line":"  typedef product_type_selector<rows_select, cols_select, depth_select> selector;"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"public:"},
{"lineNum":"   79","line":"  enum {"},
{"lineNum":"   80","line":"    value = selector::ret,"},
{"lineNum":"   81","line":"    ret = selector::ret"},
{"lineNum":"   82","line":"  };"},
{"lineNum":"   83","line":"#ifdef EIGEN_DEBUG_PRODUCT"},
{"lineNum":"   84","line":"  static void debug()"},
{"lineNum":"   85","line":"  {"},
{"lineNum":"   86","line":"      EIGEN_DEBUG_VAR(Rows);"},
{"lineNum":"   87","line":"      EIGEN_DEBUG_VAR(Cols);"},
{"lineNum":"   88","line":"      EIGEN_DEBUG_VAR(Depth);"},
{"lineNum":"   89","line":"      EIGEN_DEBUG_VAR(rows_select);"},
{"lineNum":"   90","line":"      EIGEN_DEBUG_VAR(cols_select);"},
{"lineNum":"   91","line":"      EIGEN_DEBUG_VAR(depth_select);"},
{"lineNum":"   92","line":"      EIGEN_DEBUG_VAR(value);"},
{"lineNum":"   93","line":"  }"},
{"lineNum":"   94","line":"#endif"},
{"lineNum":"   95","line":"};"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"/* The following allows to select the kind of product at compile time"},
{"lineNum":"   98","line":" * based on the three dimensions of the product."},
{"lineNum":"   99","line":" * This is a compile time mapping from {1,Small,Large}^3 -> {product types} */"},
{"lineNum":"  100","line":"// FIXME I\'m not sure the current mapping is the ideal one."},
{"lineNum":"  101","line":"template<int M, int N>  struct product_type_selector<M,N,1>              { enum { ret = OuterProduct }; };"},
{"lineNum":"  102","line":"template<int M>         struct product_type_selector<M, 1, 1>            { enum { ret = LazyCoeffBasedProductMode }; };"},
{"lineNum":"  103","line":"template<int N>         struct product_type_selector<1, N, 1>            { enum { ret = LazyCoeffBasedProductMode }; };"},
{"lineNum":"  104","line":"template<int Depth>     struct product_type_selector<1,    1,    Depth>  { enum { ret = InnerProduct }; };"},
{"lineNum":"  105","line":"template<>              struct product_type_selector<1,    1,    1>      { enum { ret = InnerProduct }; };"},
{"lineNum":"  106","line":"template<>              struct product_type_selector<Small,1,    Small>  { enum { ret = CoeffBasedProductMode }; };"},
{"lineNum":"  107","line":"template<>              struct product_type_selector<1,    Small,Small>  { enum { ret = CoeffBasedProductMode }; };"},
{"lineNum":"  108","line":"template<>              struct product_type_selector<Small,Small,Small>  { enum { ret = CoeffBasedProductMode }; };"},
{"lineNum":"  109","line":"template<>              struct product_type_selector<Small, Small, 1>    { enum { ret = LazyCoeffBasedProductMode }; };"},
{"lineNum":"  110","line":"template<>              struct product_type_selector<Small, Large, 1>    { enum { ret = LazyCoeffBasedProductMode }; };"},
{"lineNum":"  111","line":"template<>              struct product_type_selector<Large, Small, 1>    { enum { ret = LazyCoeffBasedProductMode }; };"},
{"lineNum":"  112","line":"template<>              struct product_type_selector<1,    Large,Small>  { enum { ret = CoeffBasedProductMode }; };"},
{"lineNum":"  113","line":"template<>              struct product_type_selector<1,    Large,Large>  { enum { ret = GemvProduct }; };"},
{"lineNum":"  114","line":"template<>              struct product_type_selector<1,    Small,Large>  { enum { ret = CoeffBasedProductMode }; };"},
{"lineNum":"  115","line":"template<>              struct product_type_selector<Large,1,    Small>  { enum { ret = CoeffBasedProductMode }; };"},
{"lineNum":"  116","line":"template<>              struct product_type_selector<Large,1,    Large>  { enum { ret = GemvProduct }; };"},
{"lineNum":"  117","line":"template<>              struct product_type_selector<Small,1,    Large>  { enum { ret = CoeffBasedProductMode }; };"},
{"lineNum":"  118","line":"template<>              struct product_type_selector<Small,Small,Large>  { enum { ret = GemmProduct }; };"},
{"lineNum":"  119","line":"template<>              struct product_type_selector<Large,Small,Large>  { enum { ret = GemmProduct }; };"},
{"lineNum":"  120","line":"template<>              struct product_type_selector<Small,Large,Large>  { enum { ret = GemmProduct }; };"},
{"lineNum":"  121","line":"template<>              struct product_type_selector<Large,Large,Large>  { enum { ret = GemmProduct }; };"},
{"lineNum":"  122","line":"template<>              struct product_type_selector<Large,Small,Small>  { enum { ret = CoeffBasedProductMode }; };"},
{"lineNum":"  123","line":"template<>              struct product_type_selector<Small,Large,Small>  { enum { ret = CoeffBasedProductMode }; };"},
{"lineNum":"  124","line":"template<>              struct product_type_selector<Large,Large,Small>  { enum { ret = GemmProduct }; };"},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"} // end namespace internal"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"/***********************************************************************"},
{"lineNum":"  129","line":"*  Implementation of Inner Vector Vector Product"},
{"lineNum":"  130","line":"***********************************************************************/"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"// FIXME : maybe the \"inner product\" could return a Scalar"},
{"lineNum":"  133","line":"// instead of a 1x1 matrix ??"},
{"lineNum":"  134","line":"// Pro: more natural for the user"},
{"lineNum":"  135","line":"// Cons: this could be a problem if in a meta unrolled algorithm a matrix-matrix"},
{"lineNum":"  136","line":"// product ends up to a row-vector times col-vector product... To tackle this use"},
{"lineNum":"  137","line":"// case, we could have a specialization for Block<MatrixType,1,1> with: operator=(Scalar x);"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"/***********************************************************************"},
{"lineNum":"  140","line":"*  Implementation of Outer Vector Vector Product"},
{"lineNum":"  141","line":"***********************************************************************/"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"/***********************************************************************"},
{"lineNum":"  144","line":"*  Implementation of General Matrix Vector Product"},
{"lineNum":"  145","line":"***********************************************************************/"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"/*  According to the shape/flags of the matrix we have to distinghish 3 different cases:"},
{"lineNum":"  148","line":" *   1 - the matrix is col-major, BLAS compatible and M is large => call fast BLAS-like colmajor routine"},
{"lineNum":"  149","line":" *   2 - the matrix is row-major, BLAS compatible and N is large => call fast BLAS-like rowmajor routine"},
{"lineNum":"  150","line":" *   3 - all other cases are handled using a simple loop along the outer-storage direction."},
{"lineNum":"  151","line":" *  Therefore we need a lower level meta selector."},
{"lineNum":"  152","line":" *  Furthermore, if the matrix is the rhs, then the product has to be transposed."},
{"lineNum":"  153","line":" */"},
{"lineNum":"  154","line":"namespace internal {"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"template<int Side, int StorageOrder, bool BlasCompatible>"},
{"lineNum":"  157","line":"struct gemv_dense_selector;"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"} // end namespace internal"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"namespace internal {"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"template<typename Scalar,int Size,int MaxSize,bool Cond> struct gemv_static_vector_if;"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"template<typename Scalar,int Size,int MaxSize>"},
{"lineNum":"  166","line":"struct gemv_static_vector_if<Scalar,Size,MaxSize,false>"},
{"lineNum":"  167","line":"{"},
{"lineNum":"  168","line":"  EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC Scalar* data() { eigen_internal_assert(false && \"should never be called\"); return 0; }"},
{"lineNum":"  169","line":"};"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"template<typename Scalar,int Size>"},
{"lineNum":"  172","line":"struct gemv_static_vector_if<Scalar,Size,Dynamic,true>"},
{"lineNum":"  173","line":"{"},
{"lineNum":"  174","line":"  EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC Scalar* data() { return 0; }"},
{"lineNum":"  175","line":"};"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"template<typename Scalar,int Size,int MaxSize>"},
{"lineNum":"  178","line":"struct gemv_static_vector_if<Scalar,Size,MaxSize,true>"},
{"lineNum":"  179","line":"{"},
{"lineNum":"  180","line":"  enum {"},
{"lineNum":"  181","line":"    ForceAlignment  = internal::packet_traits<Scalar>::Vectorizable,"},
{"lineNum":"  182","line":"    PacketSize      = internal::packet_traits<Scalar>::size"},
{"lineNum":"  183","line":"  };"},
{"lineNum":"  184","line":"  #if EIGEN_MAX_STATIC_ALIGN_BYTES!=0"},
{"lineNum":"  185","line":"  internal::plain_array<Scalar,EIGEN_SIZE_MIN_PREFER_FIXED(Size,MaxSize),0,EIGEN_PLAIN_ENUM_MIN(AlignedMax,PacketSize)> m_data;"},
{"lineNum":"  186","line":"  EIGEN_STRONG_INLINE Scalar* data() { return m_data.array; }"},
{"lineNum":"  187","line":"  #else"},
{"lineNum":"  188","line":"  // Some architectures cannot align on the stack,"},
{"lineNum":"  189","line":"  // => let\'s manually enforce alignment by allocating more data and return the address of the first aligned element."},
{"lineNum":"  190","line":"  internal::plain_array<Scalar,EIGEN_SIZE_MIN_PREFER_FIXED(Size,MaxSize)+(ForceAlignment?EIGEN_MAX_ALIGN_BYTES:0),0> m_data;"},
{"lineNum":"  191","line":"  EIGEN_STRONG_INLINE Scalar* data() {"},
{"lineNum":"  192","line":"    return ForceAlignment"},
{"lineNum":"  193","line":"            ? reinterpret_cast<Scalar*>((internal::UIntPtr(m_data.array) & ~(std::size_t(EIGEN_MAX_ALIGN_BYTES-1))) + EIGEN_MAX_ALIGN_BYTES)"},
{"lineNum":"  194","line":"            : m_data.array;"},
{"lineNum":"  195","line":"  }"},
{"lineNum":"  196","line":"  #endif"},
{"lineNum":"  197","line":"};"},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"// The vector is on the left => transposition"},
{"lineNum":"  200","line":"template<int StorageOrder, bool BlasCompatible>"},
{"lineNum":"  201","line":"struct gemv_dense_selector<OnTheLeft,StorageOrder,BlasCompatible>"},
{"lineNum":"  202","line":"{"},
{"lineNum":"  203","line":"  template<typename Lhs, typename Rhs, typename Dest>"},
{"lineNum":"  204","line":"  static void run(const Lhs &lhs, const Rhs &rhs, Dest& dest, const typename Dest::Scalar& alpha)"},
{"lineNum":"  205","line":"  {"},
{"lineNum":"  206","line":"    Transpose<Dest> destT(dest);"},
{"lineNum":"  207","line":"    enum { OtherStorageOrder = StorageOrder == RowMajor ? ColMajor : RowMajor };"},
{"lineNum":"  208","line":"    gemv_dense_selector<OnTheRight,OtherStorageOrder,BlasCompatible>","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  209","line":"      ::run(rhs.transpose(), lhs.transpose(), destT, alpha);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  210","line":"  }"},
{"lineNum":"  211","line":"};"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"template<> struct gemv_dense_selector<OnTheRight,ColMajor,true>"},
{"lineNum":"  214","line":"{"},
{"lineNum":"  215","line":"  template<typename Lhs, typename Rhs, typename Dest>"},
{"lineNum":"  216","line":"  static inline void run(const Lhs &lhs, const Rhs &rhs, Dest& dest, const typename Dest::Scalar& alpha)"},
{"lineNum":"  217","line":"  {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  218","line":"    typedef typename Lhs::Scalar   LhsScalar;"},
{"lineNum":"  219","line":"    typedef typename Rhs::Scalar   RhsScalar;"},
{"lineNum":"  220","line":"    typedef typename Dest::Scalar  ResScalar;"},
{"lineNum":"  221","line":"    typedef typename Dest::RealScalar  RealScalar;"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"    typedef internal::blas_traits<Lhs> LhsBlasTraits;"},
{"lineNum":"  224","line":"    typedef typename LhsBlasTraits::DirectLinearAccessType ActualLhsType;"},
{"lineNum":"  225","line":"    typedef internal::blas_traits<Rhs> RhsBlasTraits;"},
{"lineNum":"  226","line":"    typedef typename RhsBlasTraits::DirectLinearAccessType ActualRhsType;"},
{"lineNum":"  227","line":""},
{"lineNum":"  228","line":"    typedef Map<Matrix<ResScalar,Dynamic,1>, EIGEN_PLAIN_ENUM_MIN(AlignedMax,internal::packet_traits<ResScalar>::size)> MappedDest;"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"    ActualLhsType actualLhs = LhsBlasTraits::extract(lhs);"},
{"lineNum":"  231","line":"    ActualRhsType actualRhs = RhsBlasTraits::extract(rhs);"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"    ResScalar actualAlpha = combine_scalar_factors(alpha, lhs, rhs);"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"    // make sure Dest is a compile-time vector type (bug 1166)"},
{"lineNum":"  236","line":"    typedef typename conditional<Dest::IsVectorAtCompileTime, Dest, typename Dest::ColXpr>::type ActualDest;"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"    enum {"},
{"lineNum":"  239","line":"      // FIXME find a way to allow an inner stride on the result if packet_traits<Scalar>::size==1"},
{"lineNum":"  240","line":"      // on, the other hand it is good for the cache to pack the vector anyways..."},
{"lineNum":"  241","line":"      EvalToDestAtCompileTime = (ActualDest::InnerStrideAtCompileTime==1),"},
{"lineNum":"  242","line":"      ComplexByReal = (NumTraits<LhsScalar>::IsComplex) && (!NumTraits<RhsScalar>::IsComplex),"},
{"lineNum":"  243","line":"      MightCannotUseDest = ((!EvalToDestAtCompileTime) || ComplexByReal) && (ActualDest::MaxSizeAtCompileTime!=0)"},
{"lineNum":"  244","line":"    };"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"    typedef const_blas_data_mapper<LhsScalar,Index,ColMajor> LhsMapper;"},
{"lineNum":"  247","line":"    typedef const_blas_data_mapper<RhsScalar,Index,RowMajor> RhsMapper;"},
{"lineNum":"  248","line":"    RhsScalar compatibleAlpha = get_factor<ResScalar,RhsScalar>::run(actualAlpha);"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"    if(!MightCannotUseDest)"},
{"lineNum":"  251","line":"    {"},
{"lineNum":"  252","line":"      // shortcut if we are sure to be able to use dest directly,"},
{"lineNum":"  253","line":"      // this ease the compiler to generate cleaner and more optimzized code for most common cases"},
{"lineNum":"  254","line":"      general_matrix_vector_product","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  255","line":"          <Index,LhsScalar,LhsMapper,ColMajor,LhsBlasTraits::NeedToConjugate,RhsScalar,RhsMapper,RhsBlasTraits::NeedToConjugate>::run("},
{"lineNum":"  256","line":"          actualLhs.rows(), actualLhs.cols(),"},
{"lineNum":"  257","line":"          LhsMapper(actualLhs.data(), actualLhs.outerStride()),"},
{"lineNum":"  258","line":"          RhsMapper(actualRhs.data(), actualRhs.innerStride()),"},
{"lineNum":"  259","line":"          dest.data(), 1,"},
{"lineNum":"  260","line":"          compatibleAlpha);"},
{"lineNum":"  261","line":"    }"},
{"lineNum":"  262","line":"    else"},
{"lineNum":"  263","line":"    {"},
{"lineNum":"  264","line":"      gemv_static_vector_if<ResScalar,ActualDest::SizeAtCompileTime,ActualDest::MaxSizeAtCompileTime,MightCannotUseDest> static_dest;"},
{"lineNum":"  265","line":""},
{"lineNum":"  266","line":"      const bool alphaIsCompatible = (!ComplexByReal) || (numext::imag(actualAlpha)==RealScalar(0));"},
{"lineNum":"  267","line":"      const bool evalToDest = EvalToDestAtCompileTime && alphaIsCompatible;"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"      ei_declare_aligned_stack_constructed_variable(ResScalar,actualDestPtr,dest.size(),","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  270","line":"                                                    evalToDest ? dest.data() : static_dest.data());"},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"      if(!evalToDest)"},
{"lineNum":"  273","line":"      {"},
{"lineNum":"  274","line":"        #ifdef EIGEN_DENSE_STORAGE_CTOR_PLUGIN"},
{"lineNum":"  275","line":"        Index size = dest.size();"},
{"lineNum":"  276","line":"        EIGEN_DENSE_STORAGE_CTOR_PLUGIN"},
{"lineNum":"  277","line":"        #endif"},
{"lineNum":"  278","line":"        if(!alphaIsCompatible)"},
{"lineNum":"  279","line":"        {"},
{"lineNum":"  280","line":"          MappedDest(actualDestPtr, dest.size()).setZero();"},
{"lineNum":"  281","line":"          compatibleAlpha = RhsScalar(1);"},
{"lineNum":"  282","line":"        }"},
{"lineNum":"  283","line":"        else"},
{"lineNum":"  284","line":"          MappedDest(actualDestPtr, dest.size()) = dest;"},
{"lineNum":"  285","line":"      }"},
{"lineNum":"  286","line":""},
{"lineNum":"  287","line":"      general_matrix_vector_product","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  288","line":"          <Index,LhsScalar,LhsMapper,ColMajor,LhsBlasTraits::NeedToConjugate,RhsScalar,RhsMapper,RhsBlasTraits::NeedToConjugate>::run("},
{"lineNum":"  289","line":"          actualLhs.rows(), actualLhs.cols(),"},
{"lineNum":"  290","line":"          LhsMapper(actualLhs.data(), actualLhs.outerStride()),"},
{"lineNum":"  291","line":"          RhsMapper(actualRhs.data(), actualRhs.innerStride()),"},
{"lineNum":"  292","line":"          actualDestPtr, 1,"},
{"lineNum":"  293","line":"          compatibleAlpha);"},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":"      if (!evalToDest)"},
{"lineNum":"  296","line":"      {"},
{"lineNum":"  297","line":"        if(!alphaIsCompatible)"},
{"lineNum":"  298","line":"          dest.matrix() += actualAlpha * MappedDest(actualDestPtr, dest.size());"},
{"lineNum":"  299","line":"        else"},
{"lineNum":"  300","line":"          dest = MappedDest(actualDestPtr, dest.size());"},
{"lineNum":"  301","line":"      }"},
{"lineNum":"  302","line":"    }"},
{"lineNum":"  303","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  304","line":"};"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"template<> struct gemv_dense_selector<OnTheRight,RowMajor,true>"},
{"lineNum":"  307","line":"{"},
{"lineNum":"  308","line":"  template<typename Lhs, typename Rhs, typename Dest>"},
{"lineNum":"  309","line":"  static void run(const Lhs &lhs, const Rhs &rhs, Dest& dest, const typename Dest::Scalar& alpha)"},
{"lineNum":"  310","line":"  {","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"  311","line":"    typedef typename Lhs::Scalar   LhsScalar;"},
{"lineNum":"  312","line":"    typedef typename Rhs::Scalar   RhsScalar;"},
{"lineNum":"  313","line":"    typedef typename Dest::Scalar  ResScalar;"},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"    typedef internal::blas_traits<Lhs> LhsBlasTraits;"},
{"lineNum":"  316","line":"    typedef typename LhsBlasTraits::DirectLinearAccessType ActualLhsType;"},
{"lineNum":"  317","line":"    typedef internal::blas_traits<Rhs> RhsBlasTraits;"},
{"lineNum":"  318","line":"    typedef typename RhsBlasTraits::DirectLinearAccessType ActualRhsType;"},
{"lineNum":"  319","line":"    typedef typename internal::remove_all<ActualRhsType>::type ActualRhsTypeCleaned;"},
{"lineNum":"  320","line":""},
{"lineNum":"  321","line":"    typename add_const<ActualLhsType>::type actualLhs = LhsBlasTraits::extract(lhs);"},
{"lineNum":"  322","line":"    typename add_const<ActualRhsType>::type actualRhs = RhsBlasTraits::extract(rhs);"},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"    ResScalar actualAlpha = combine_scalar_factors(alpha, lhs, rhs);"},
{"lineNum":"  325","line":""},
{"lineNum":"  326","line":"    enum {"},
{"lineNum":"  327","line":"      // FIXME find a way to allow an inner stride on the result if packet_traits<Scalar>::size==1"},
{"lineNum":"  328","line":"      // on, the other hand it is good for the cache to pack the vector anyways..."},
{"lineNum":"  329","line":"      DirectlyUseRhs = ActualRhsTypeCleaned::InnerStrideAtCompileTime==1 || ActualRhsTypeCleaned::MaxSizeAtCompileTime==0"},
{"lineNum":"  330","line":"    };"},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"    gemv_static_vector_if<RhsScalar,ActualRhsTypeCleaned::SizeAtCompileTime,ActualRhsTypeCleaned::MaxSizeAtCompileTime,!DirectlyUseRhs> static_rhs;"},
{"lineNum":"  333","line":""},
{"lineNum":"  334","line":"    ei_declare_aligned_stack_constructed_variable(RhsScalar,actualRhsPtr,actualRhs.size(),","class":"lineNoCov","hits":"0","possible_hits":"37",},
{"lineNum":"  335","line":"        DirectlyUseRhs ? const_cast<RhsScalar*>(actualRhs.data()) : static_rhs.data());"},
{"lineNum":"  336","line":""},
{"lineNum":"  337","line":"    if(!DirectlyUseRhs)"},
{"lineNum":"  338","line":"    {"},
{"lineNum":"  339","line":"      #ifdef EIGEN_DENSE_STORAGE_CTOR_PLUGIN"},
{"lineNum":"  340","line":"      Index size = actualRhs.size();"},
{"lineNum":"  341","line":"      EIGEN_DENSE_STORAGE_CTOR_PLUGIN"},
{"lineNum":"  342","line":"      #endif"},
{"lineNum":"  343","line":"      Map<typename ActualRhsTypeCleaned::PlainObject>(actualRhsPtr, actualRhs.size()) = actualRhs;"},
{"lineNum":"  344","line":"    }"},
{"lineNum":"  345","line":""},
{"lineNum":"  346","line":"    typedef const_blas_data_mapper<LhsScalar,Index,RowMajor> LhsMapper;"},
{"lineNum":"  347","line":"    typedef const_blas_data_mapper<RhsScalar,Index,ColMajor> RhsMapper;"},
{"lineNum":"  348","line":"    general_matrix_vector_product","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"  349","line":"        <Index,LhsScalar,LhsMapper,RowMajor,LhsBlasTraits::NeedToConjugate,RhsScalar,RhsMapper,RhsBlasTraits::NeedToConjugate>::run("},
{"lineNum":"  350","line":"        actualLhs.rows(), actualLhs.cols(),"},
{"lineNum":"  351","line":"        LhsMapper(actualLhs.data(), actualLhs.outerStride()),"},
{"lineNum":"  352","line":"        RhsMapper(actualRhsPtr, 1),"},
{"lineNum":"  353","line":"        dest.data(), dest.col(0).innerStride(), //NOTE  if dest is not a vector at compile-time, then dest.innerStride() might be wrong. (bug 1166)"},
{"lineNum":"  354","line":"        actualAlpha);"},
{"lineNum":"  355","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"  356","line":"};"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"template<> struct gemv_dense_selector<OnTheRight,ColMajor,false>"},
{"lineNum":"  359","line":"{"},
{"lineNum":"  360","line":"  template<typename Lhs, typename Rhs, typename Dest>"},
{"lineNum":"  361","line":"  static void run(const Lhs &lhs, const Rhs &rhs, Dest& dest, const typename Dest::Scalar& alpha)"},
{"lineNum":"  362","line":"  {"},
{"lineNum":"  363","line":"    EIGEN_STATIC_ASSERT((!nested_eval<Lhs,1>::Evaluate),EIGEN_INTERNAL_COMPILATION_ERROR_OR_YOU_MADE_A_PROGRAMMING_MISTAKE);"},
{"lineNum":"  364","line":"    // TODO if rhs is large enough it might be beneficial to make sure that dest is sequentially stored in memory, otherwise use a temp"},
{"lineNum":"  365","line":"    typename nested_eval<Rhs,1>::type actual_rhs(rhs);"},
{"lineNum":"  366","line":"    const Index size = rhs.rows();"},
{"lineNum":"  367","line":"    for(Index k=0; k<size; ++k)"},
{"lineNum":"  368","line":"      dest += (alpha*actual_rhs.coeff(k)) * lhs.col(k);"},
{"lineNum":"  369","line":"  }"},
{"lineNum":"  370","line":"};"},
{"lineNum":"  371","line":""},
{"lineNum":"  372","line":"template<> struct gemv_dense_selector<OnTheRight,RowMajor,false>"},
{"lineNum":"  373","line":"{"},
{"lineNum":"  374","line":"  template<typename Lhs, typename Rhs, typename Dest>"},
{"lineNum":"  375","line":"  static void run(const Lhs &lhs, const Rhs &rhs, Dest& dest, const typename Dest::Scalar& alpha)"},
{"lineNum":"  376","line":"  {"},
{"lineNum":"  377","line":"    EIGEN_STATIC_ASSERT((!nested_eval<Lhs,1>::Evaluate),EIGEN_INTERNAL_COMPILATION_ERROR_OR_YOU_MADE_A_PROGRAMMING_MISTAKE);"},
{"lineNum":"  378","line":"    typename nested_eval<Rhs,Lhs::RowsAtCompileTime>::type actual_rhs(rhs);"},
{"lineNum":"  379","line":"    const Index rows = dest.rows();"},
{"lineNum":"  380","line":"    for(Index i=0; i<rows; ++i)"},
{"lineNum":"  381","line":"      dest.coeffRef(i) += alpha * (lhs.row(i).cwiseProduct(actual_rhs.transpose())).sum();"},
{"lineNum":"  382","line":"  }"},
{"lineNum":"  383","line":"};"},
{"lineNum":"  384","line":""},
{"lineNum":"  385","line":"} // end namespace internal"},
{"lineNum":"  386","line":""},
{"lineNum":"  387","line":"/***************************************************************************"},
{"lineNum":"  388","line":"* Implementation of matrix base methods"},
{"lineNum":"  389","line":"***************************************************************************/"},
{"lineNum":"  390","line":""},
{"lineNum":"  391","line":"/** \\returns the matrix product of \\c *this and \\a other."},
{"lineNum":"  392","line":"  *"},
{"lineNum":"  393","line":"  * \\note If instead of the matrix product you want the coefficient-wise product, see Cwise::operator*()."},
{"lineNum":"  394","line":"  *"},
{"lineNum":"  395","line":"  * \\sa lazyProduct(), operator*=(const MatrixBase&), Cwise::operator*()"},
{"lineNum":"  396","line":"  */"},
{"lineNum":"  397","line":"template<typename Derived>"},
{"lineNum":"  398","line":"template<typename OtherDerived>"},
{"lineNum":"  399","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  400","line":"const Product<Derived, OtherDerived>"},
{"lineNum":"  401","line":"MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const"},
{"lineNum":"  402","line":"{"},
{"lineNum":"  403","line":"  // A note regarding the function declaration: In MSVC, this function will sometimes"},
{"lineNum":"  404","line":"  // not be inlined since DenseStorage is an unwindable object for dynamic"},
{"lineNum":"  405","line":"  // matrices and product types are holding a member to store the result."},
{"lineNum":"  406","line":"  // Thus it does not help tagging this function with EIGEN_STRONG_INLINE."},
{"lineNum":"  407","line":"  enum {"},
{"lineNum":"  408","line":"    ProductIsValid =  Derived::ColsAtCompileTime==Dynamic"},
{"lineNum":"  409","line":"                   || OtherDerived::RowsAtCompileTime==Dynamic"},
{"lineNum":"  410","line":"                   || int(Derived::ColsAtCompileTime)==int(OtherDerived::RowsAtCompileTime),"},
{"lineNum":"  411","line":"    AreVectors = Derived::IsVectorAtCompileTime && OtherDerived::IsVectorAtCompileTime,"},
{"lineNum":"  412","line":"    SameSizes = EIGEN_PREDICATE_SAME_MATRIX_SIZE(Derived,OtherDerived)"},
{"lineNum":"  413","line":"  };"},
{"lineNum":"  414","line":"  // note to the lost user:"},
{"lineNum":"  415","line":"  //    * for a dot product use: v1.dot(v2)"},
{"lineNum":"  416","line":"  //    * for a coeff-wise product use: v1.cwiseProduct(v2)"},
{"lineNum":"  417","line":"  EIGEN_STATIC_ASSERT(ProductIsValid || !(AreVectors && SameSizes),"},
{"lineNum":"  418","line":"    INVALID_VECTOR_VECTOR_PRODUCT__IF_YOU_WANTED_A_DOT_OR_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTIONS)"},
{"lineNum":"  419","line":"  EIGEN_STATIC_ASSERT(ProductIsValid || !(SameSizes && !AreVectors),"},
{"lineNum":"  420","line":"    INVALID_MATRIX_PRODUCT__IF_YOU_WANTED_A_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTION)"},
{"lineNum":"  421","line":"  EIGEN_STATIC_ASSERT(ProductIsValid || SameSizes, INVALID_MATRIX_PRODUCT)"},
{"lineNum":"  422","line":"#ifdef EIGEN_DEBUG_PRODUCT"},
{"lineNum":"  423","line":"  internal::product_type<Derived,OtherDerived>::debug();"},
{"lineNum":"  424","line":"#endif"},
{"lineNum":"  425","line":""},
{"lineNum":"  426","line":"  return Product<Derived, OtherDerived>(derived(), other.derived());"},
{"lineNum":"  427","line":"}"},
{"lineNum":"  428","line":""},
{"lineNum":"  429","line":"/** \\returns an expression of the matrix product of \\c *this and \\a other without implicit evaluation."},
{"lineNum":"  430","line":"  *"},
{"lineNum":"  431","line":"  * The returned product will behave like any other expressions: the coefficients of the product will be"},
{"lineNum":"  432","line":"  * computed once at a time as requested. This might be useful in some extremely rare cases when only"},
{"lineNum":"  433","line":"  * a small and no coherent fraction of the result\'s coefficients have to be computed."},
{"lineNum":"  434","line":"  *"},
{"lineNum":"  435","line":"  * \\warning This version of the matrix product can be much much slower. So use it only if you know"},
{"lineNum":"  436","line":"  * what you are doing and that you measured a true speed improvement."},
{"lineNum":"  437","line":"  *"},
{"lineNum":"  438","line":"  * \\sa operator*(const MatrixBase&)"},
{"lineNum":"  439","line":"  */"},
{"lineNum":"  440","line":"template<typename Derived>"},
{"lineNum":"  441","line":"template<typename OtherDerived>"},
{"lineNum":"  442","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  443","line":"const Product<Derived,OtherDerived,LazyProduct>"},
{"lineNum":"  444","line":"MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const"},
{"lineNum":"  445","line":"{"},
{"lineNum":"  446","line":"  enum {"},
{"lineNum":"  447","line":"    ProductIsValid =  Derived::ColsAtCompileTime==Dynamic"},
{"lineNum":"  448","line":"                   || OtherDerived::RowsAtCompileTime==Dynamic"},
{"lineNum":"  449","line":"                   || int(Derived::ColsAtCompileTime)==int(OtherDerived::RowsAtCompileTime),"},
{"lineNum":"  450","line":"    AreVectors = Derived::IsVectorAtCompileTime && OtherDerived::IsVectorAtCompileTime,"},
{"lineNum":"  451","line":"    SameSizes = EIGEN_PREDICATE_SAME_MATRIX_SIZE(Derived,OtherDerived)"},
{"lineNum":"  452","line":"  };"},
{"lineNum":"  453","line":"  // note to the lost user:"},
{"lineNum":"  454","line":"  //    * for a dot product use: v1.dot(v2)"},
{"lineNum":"  455","line":"  //    * for a coeff-wise product use: v1.cwiseProduct(v2)"},
{"lineNum":"  456","line":"  EIGEN_STATIC_ASSERT(ProductIsValid || !(AreVectors && SameSizes),"},
{"lineNum":"  457","line":"    INVALID_VECTOR_VECTOR_PRODUCT__IF_YOU_WANTED_A_DOT_OR_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTIONS)"},
{"lineNum":"  458","line":"  EIGEN_STATIC_ASSERT(ProductIsValid || !(SameSizes && !AreVectors),"},
{"lineNum":"  459","line":"    INVALID_MATRIX_PRODUCT__IF_YOU_WANTED_A_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTION)"},
{"lineNum":"  460","line":"  EIGEN_STATIC_ASSERT(ProductIsValid || SameSizes, INVALID_MATRIX_PRODUCT)"},
{"lineNum":"  461","line":""},
{"lineNum":"  462","line":"  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());"},
{"lineNum":"  463","line":"}"},
{"lineNum":"  464","line":""},
{"lineNum":"  465","line":"} // end namespace Eigen"},
{"lineNum":"  466","line":""},
{"lineNum":"  467","line":"#endif // EIGEN_PRODUCT_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 11, "covered" : 0,};
var merged_data = [];
