var data = {lines:[
{"lineNum":"    1","line":"/*"},
{"lineNum":"    2","line":"//@HEADER"},
{"lineNum":"    3","line":"// ************************************************************************"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"//                        Kokkos v. 3.0"},
{"lineNum":"    6","line":"//       Copyright (2020) National Technology & Engineering"},
{"lineNum":"    7","line":"//               Solutions of Sandia, LLC (NTESS)."},
{"lineNum":"    8","line":"//"},
{"lineNum":"    9","line":"// Under the terms of Contract DE-NA0003525 with NTESS,"},
{"lineNum":"   10","line":"// the U.S. Government retains certain rights in this software."},
{"lineNum":"   11","line":"//"},
{"lineNum":"   12","line":"// Redistribution and use in source and binary forms, with or without"},
{"lineNum":"   13","line":"// modification, are permitted provided that the following conditions are"},
{"lineNum":"   14","line":"// met:"},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"// 1. Redistributions of source code must retain the above copyright"},
{"lineNum":"   17","line":"// notice, this list of conditions and the following disclaimer."},
{"lineNum":"   18","line":"//"},
{"lineNum":"   19","line":"// 2. Redistributions in binary form must reproduce the above copyright"},
{"lineNum":"   20","line":"// notice, this list of conditions and the following disclaimer in the"},
{"lineNum":"   21","line":"// documentation and/or other materials provided with the distribution."},
{"lineNum":"   22","line":"//"},
{"lineNum":"   23","line":"// 3. Neither the name of the Corporation nor the names of the"},
{"lineNum":"   24","line":"// contributors may be used to endorse or promote products derived from"},
{"lineNum":"   25","line":"// this software without specific prior written permission."},
{"lineNum":"   26","line":"//"},
{"lineNum":"   27","line":"// THIS SOFTWARE IS PROVIDED BY NTESS \"AS IS\" AND ANY"},
{"lineNum":"   28","line":"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"},
{"lineNum":"   29","line":"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR"},
{"lineNum":"   30","line":"// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NTESS OR THE"},
{"lineNum":"   31","line":"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,"},
{"lineNum":"   32","line":"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,"},
{"lineNum":"   33","line":"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR"},
{"lineNum":"   34","line":"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF"},
{"lineNum":"   35","line":"// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING"},
{"lineNum":"   36","line":"// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"},
{"lineNum":"   37","line":"// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   38","line":"//"},
{"lineNum":"   39","line":"// Questions? Contact Christian R. Trott (crtrott@sandia.gov)"},
{"lineNum":"   40","line":"//"},
{"lineNum":"   41","line":"// ************************************************************************"},
{"lineNum":"   42","line":"//@HEADER"},
{"lineNum":"   43","line":"*/"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"#ifndef KOKKOS_EXPERIMENTAL_IMPL_VIEW_CTOR_PROP_HPP"},
{"lineNum":"   46","line":"#define KOKKOS_EXPERIMENTAL_IMPL_VIEW_CTOR_PROP_HPP"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"//----------------------------------------------------------------------------"},
{"lineNum":"   49","line":"//----------------------------------------------------------------------------"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"namespace Kokkos {"},
{"lineNum":"   52","line":"namespace Impl {"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"struct WithoutInitializing_t {};"},
{"lineNum":"   55","line":"struct AllowPadding_t {};"},
{"lineNum":"   56","line":"struct NullSpace_t {};"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"//----------------------------------------------------------------------------"},
{"lineNum":"   59","line":"/**\\brief Whether a type can be used for a view label */"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"template <typename>"},
{"lineNum":"   62","line":"struct is_view_label : public std::false_type {};"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"template <>"},
{"lineNum":"   65","line":"struct is_view_label<std::string> : public std::true_type {};"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"template <unsigned N>"},
{"lineNum":"   68","line":"struct is_view_label<char[N]> : public std::true_type {};"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"template <unsigned N>"},
{"lineNum":"   71","line":"struct is_view_label<const char[N]> : public std::true_type {};"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"//----------------------------------------------------------------------------"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"template <typename... P>"},
{"lineNum":"   76","line":"struct ViewCtorProp;"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"// Forward declare"},
{"lineNum":"   79","line":"template <typename Specialize, typename T>"},
{"lineNum":"   80","line":"struct CommonViewAllocProp;"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"/* Common value_type stored as ViewCtorProp"},
{"lineNum":"   83","line":" */"},
{"lineNum":"   84","line":"template <typename Specialize, typename T>"},
{"lineNum":"   85","line":"struct ViewCtorProp<void, CommonViewAllocProp<Specialize, T> > {"},
{"lineNum":"   86","line":"  ViewCtorProp()                     = default;"},
{"lineNum":"   87","line":"  ViewCtorProp(const ViewCtorProp &) = default;"},
{"lineNum":"   88","line":"  ViewCtorProp &operator=(const ViewCtorProp &) = default;"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"  using type = CommonViewAllocProp<Specialize, T>;"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   93","line":"  ViewCtorProp(const type &arg) : value(arg) {}"},
{"lineNum":"   94","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   95","line":"  ViewCtorProp(type &&arg) : value(arg) {}"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"  type value;"},
{"lineNum":"   98","line":"};"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"/*  std::integral_constant<unsigned,I> are dummy arguments"},
{"lineNum":"  101","line":" *  that avoid duplicate base class errors"},
{"lineNum":"  102","line":" */"},
{"lineNum":"  103","line":"template <unsigned I>"},
{"lineNum":"  104","line":"struct ViewCtorProp<void, std::integral_constant<unsigned, I> > {"},
{"lineNum":"  105","line":"  ViewCtorProp()                     = default;"},
{"lineNum":"  106","line":"  ViewCtorProp(const ViewCtorProp &) = default;"},
{"lineNum":"  107","line":"  ViewCtorProp &operator=(const ViewCtorProp &) = default;"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"  template <typename P>"},
{"lineNum":"  110","line":"  KOKKOS_INLINE_FUNCTION ViewCtorProp(const P &) {}"},
{"lineNum":"  111","line":"};"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"/* Property flags have constexpr value */"},
{"lineNum":"  114","line":"template <typename P>"},
{"lineNum":"  115","line":"struct ViewCtorProp<typename std::enable_if<"},
{"lineNum":"  116","line":"                        std::is_same<P, AllowPadding_t>::value ||"},
{"lineNum":"  117","line":"                        std::is_same<P, WithoutInitializing_t>::value>::type,"},
{"lineNum":"  118","line":"                    P> {"},
{"lineNum":"  119","line":"  ViewCtorProp()                     = default;"},
{"lineNum":"  120","line":"  ViewCtorProp(const ViewCtorProp &) = default;"},
{"lineNum":"  121","line":"  ViewCtorProp &operator=(const ViewCtorProp &) = default;"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"  using type = P;"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"  ViewCtorProp(const type &) {}"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"  static constexpr type value = type();"},
{"lineNum":"  128","line":"};"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"/* Map input label type to std::string */"},
{"lineNum":"  131","line":"template <typename Label>"},
{"lineNum":"  132","line":"struct ViewCtorProp<typename std::enable_if<is_view_label<Label>::value>::type,"},
{"lineNum":"  133","line":"                    Label> {"},
{"lineNum":"  134","line":"  ViewCtorProp()                     = default;"},
{"lineNum":"  135","line":"  ViewCtorProp(const ViewCtorProp &) = default;","class":"lineNoCov","hits":"0","possible_hits":"24",},
{"lineNum":"  136","line":"  ViewCtorProp &operator=(const ViewCtorProp &) = default;"},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"  using type = std::string;"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"  ViewCtorProp(const type &arg) : value(arg) {}","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  141","line":"  ViewCtorProp(type &&arg) : value(arg) {}","class":"lineNoCov","hits":"0","possible_hits":"38",},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"  type value;"},
{"lineNum":"  144","line":"};"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"template <typename Space>"},
{"lineNum":"  147","line":"struct ViewCtorProp<typename std::enable_if<"},
{"lineNum":"  148","line":"                        Kokkos::Impl::is_memory_space<Space>::value ||"},
{"lineNum":"  149","line":"                        Kokkos::Impl::is_execution_space<Space>::value>::type,"},
{"lineNum":"  150","line":"                    Space> {"},
{"lineNum":"  151","line":"  ViewCtorProp()                     = default;","class":"lineNoCov","hits":"0","possible_hits":"24",},
{"lineNum":"  152","line":"  ViewCtorProp(const ViewCtorProp &) = default;"},
{"lineNum":"  153","line":"  ViewCtorProp &operator=(const ViewCtorProp &) = default;"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"  using type = Space;"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"  ViewCtorProp(const type &arg) : value(arg) {}"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"  type value;"},
{"lineNum":"  160","line":"};"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"template <typename T>"},
{"lineNum":"  163","line":"struct ViewCtorProp<void, T *> {"},
{"lineNum":"  164","line":"  ViewCtorProp()                     = default;"},
{"lineNum":"  165","line":"  ViewCtorProp(const ViewCtorProp &) = default;"},
{"lineNum":"  166","line":"  ViewCtorProp &operator=(const ViewCtorProp &) = default;"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"  using type = T *;"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  171","line":"  ViewCtorProp(const type arg) : value(arg) {}"},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"  type value;"},
{"lineNum":"  174","line":"};"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"// For some reason I don\'t understand I needed this specialization explicitly"},
{"lineNum":"  177","line":"// for NVCC/MSVC"},
{"lineNum":"  178","line":"template <typename T>"},
{"lineNum":"  179","line":"struct ViewCtorProp<T *> {"},
{"lineNum":"  180","line":"  ViewCtorProp()                     = default;"},
{"lineNum":"  181","line":"  ViewCtorProp(const ViewCtorProp &) = default;"},
{"lineNum":"  182","line":"  ViewCtorProp &operator=(const ViewCtorProp &) = default;"},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"  using type = T *;"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  187","line":"  ViewCtorProp(const type arg) : value(arg) {}"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"  enum : bool { has_pointer = true };"},
{"lineNum":"  190","line":"  using pointer_type = type;"},
{"lineNum":"  191","line":"  type value;"},
{"lineNum":"  192","line":"};"},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"// If we use `ViewCtorProp<Args...>` and `ViewCtorProp<void, Args>...` directly"},
{"lineNum":"  195","line":"// in the parameter lists and base class initializers, respectively, as far as"},
{"lineNum":"  196","line":"// we can tell MSVC 16.5.5+CUDA 10.2 thinks that `ViewCtorProp` refers to the"},
{"lineNum":"  197","line":"// current instantiation, not the template itself, and gets all kinds of"},
{"lineNum":"  198","line":"// confused. To work around this, we just use a couple of alias templates that"},
{"lineNum":"  199","line":"// amount to the same thing."},
{"lineNum":"  200","line":"template <typename... Args>"},
{"lineNum":"  201","line":"using view_ctor_prop_args = ViewCtorProp<Args...>;"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"template <typename Arg>"},
{"lineNum":"  204","line":"using view_ctor_prop_base = ViewCtorProp<void, Arg>;"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"template <typename... P>"},
{"lineNum":"  207","line":"struct ViewCtorProp : public ViewCtorProp<void, P>... {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  208","line":" private:"},
{"lineNum":"  209","line":"  using var_memory_space ="},
{"lineNum":"  210","line":"      Kokkos::Impl::has_condition<void, Kokkos::Impl::is_memory_space, P...>;"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"  using var_execution_space ="},
{"lineNum":"  213","line":"      Kokkos::Impl::has_condition<void, Kokkos::Impl::is_execution_space, P...>;"},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"  struct VOIDDUMMY {};"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"  using var_pointer ="},
{"lineNum":"  218","line":"      Kokkos::Impl::has_condition<VOIDDUMMY, std::is_pointer, P...>;"},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":" public:"},
{"lineNum":"  221","line":"  /* Flags for the common properties */"},
{"lineNum":"  222","line":"  enum { has_memory_space = var_memory_space::value };"},
{"lineNum":"  223","line":"  enum { has_execution_space = var_execution_space::value };"},
{"lineNum":"  224","line":"  enum { has_pointer = var_pointer::value };"},
{"lineNum":"  225","line":"  enum { has_label = Kokkos::Impl::has_type<std::string, P...>::value };"},
{"lineNum":"  226","line":"  enum { allow_padding = Kokkos::Impl::has_type<AllowPadding_t, P...>::value };"},
{"lineNum":"  227","line":"  enum {"},
{"lineNum":"  228","line":"    initialize = !Kokkos::Impl::has_type<WithoutInitializing_t, P...>::value"},
{"lineNum":"  229","line":"  };"},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"  using memory_space    = typename var_memory_space::type;"},
{"lineNum":"  232","line":"  using execution_space = typename var_execution_space::type;"},
{"lineNum":"  233","line":"  using pointer_type    = typename var_pointer::type;"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"  /*  Copy from a matching argument list."},
{"lineNum":"  236","line":"   *  Requires  std::is_same< P , ViewCtorProp< void , Args >::value ..."},
{"lineNum":"  237","line":"   */"},
{"lineNum":"  238","line":"  template <typename... Args>"},
{"lineNum":"  239","line":"  inline ViewCtorProp(Args const &... args) : ViewCtorProp<void, P>(args)... {}","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"  template <typename... Args>"},
{"lineNum":"  242","line":"  KOKKOS_INLINE_FUNCTION ViewCtorProp(pointer_type arg0, Args const &... args)"},
{"lineNum":"  243","line":"      : ViewCtorProp<void, pointer_type>(arg0),"},
{"lineNum":"  244","line":"        ViewCtorProp<void, typename ViewCtorProp<void, Args>::type>(args)... {}"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"  /* Copy from a matching property subset */"},
{"lineNum":"  247","line":"  KOKKOS_INLINE_FUNCTION ViewCtorProp(pointer_type arg0)"},
{"lineNum":"  248","line":"      : ViewCtorProp<void, pointer_type>(arg0) {}"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"  // If we use `ViewCtorProp<Args...>` and `ViewCtorProp<void, Args>...` here"},
{"lineNum":"  251","line":"  // directly, MSVC 16.5.5+CUDA 10.2 appears to think that `ViewCtorProp` refers"},
{"lineNum":"  252","line":"  // to the current instantiation, not the template itself, and gets all kinds"},
{"lineNum":"  253","line":"  // of confused. To work around this, we just use a couple of alias templates"},
{"lineNum":"  254","line":"  // that amount to the same thing."},
{"lineNum":"  255","line":"  template <typename... Args>"},
{"lineNum":"  256","line":"  ViewCtorProp(view_ctor_prop_args<Args...> const &arg)"},
{"lineNum":"  257","line":"      : view_ctor_prop_base<Args>(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  258","line":"            static_cast<view_ctor_prop_base<Args> const &>(arg))... {"},
{"lineNum":"  259","line":"    // Suppress an unused argument warning that (at least at one point) would"},
{"lineNum":"  260","line":"    // show up if sizeof...(Args) == 0"},
{"lineNum":"  261","line":"    (void)arg;"},
{"lineNum":"  262","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  263","line":"};"},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"} /* namespace Impl */"},
{"lineNum":"  266","line":"} /* namespace Kokkos */"},
{"lineNum":"  267","line":""},
{"lineNum":"  268","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  269","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"namespace Kokkos {"},
{"lineNum":"  272","line":""},
{"lineNum":"  273","line":"/* For backward compatibility */"},
{"lineNum":"  274","line":"namespace Impl {"},
{"lineNum":"  275","line":"struct ViewAllocateWithoutInitializingBackwardCompat {};"},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"template <>"},
{"lineNum":"  278","line":"struct ViewCtorProp<void, ViewAllocateWithoutInitializingBackwardCompat> {};"},
{"lineNum":"  279","line":""},
{"lineNum":"  280","line":"// NOTE This specialization is meant to be used as the"},
{"lineNum":"  281","line":"// ViewAllocateWithoutInitializing alias below. All it does is add a"},
{"lineNum":"  282","line":"// constructor that takes the label as single argument."},
{"lineNum":"  283","line":"template <>"},
{"lineNum":"  284","line":"struct ViewCtorProp<WithoutInitializing_t, std::string,"},
{"lineNum":"  285","line":"                    ViewAllocateWithoutInitializingBackwardCompat>"},
{"lineNum":"  286","line":"    : ViewCtorProp<WithoutInitializing_t, std::string>,"},
{"lineNum":"  287","line":"      ViewCtorProp<void, ViewAllocateWithoutInitializingBackwardCompat> {"},
{"lineNum":"  288","line":"  ViewCtorProp(std::string label)"},
{"lineNum":"  289","line":"      : ViewCtorProp<WithoutInitializing_t, std::string>("},
{"lineNum":"  290","line":"            WithoutInitializing_t(), std::move(label)) {}"},
{"lineNum":"  291","line":"};"},
{"lineNum":"  292","line":"} /* namespace Impl */"},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"/*[[deprecated(Use Kokkos::alloc(Kokkos::WithoutInitializing, label) instead]]*/"},
{"lineNum":"  295","line":"using ViewAllocateWithoutInitializing ="},
{"lineNum":"  296","line":"    Impl::ViewCtorProp<Impl::WithoutInitializing_t, std::string,"},
{"lineNum":"  297","line":"                       Impl::ViewAllocateWithoutInitializingBackwardCompat>;"},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"} /* namespace Kokkos */"},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  302","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  303","line":""},
{"lineNum":"  304","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 8, "covered" : 0,};
var merged_data = [];
