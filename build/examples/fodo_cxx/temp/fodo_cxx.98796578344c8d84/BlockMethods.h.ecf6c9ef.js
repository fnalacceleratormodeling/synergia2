var data = {lines:[
{"lineNum":"    1","line":"// This file is part of Eigen, a lightweight C++ template library"},
{"lineNum":"    2","line":"// for linear algebra."},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Copyright (C) 2008-2010 Gael Guennebaud <gael.guennebaud@inria.fr>"},
{"lineNum":"    5","line":"// Copyright (C) 2006-2010 Benoit Jacob <jacob.benoit.1@gmail.com>"},
{"lineNum":"    6","line":"//"},
{"lineNum":"    7","line":"// This Source Code Form is subject to the terms of the Mozilla"},
{"lineNum":"    8","line":"// Public License v. 2.0. If a copy of the MPL was not distributed"},
{"lineNum":"    9","line":"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/."},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"#ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"/// \\internal expression type of a column */"},
{"lineNum":"   14","line":"typedef Block<Derived, internal::traits<Derived>::RowsAtCompileTime, 1, !IsRowMajor> ColXpr;"},
{"lineNum":"   15","line":"typedef const Block<const Derived, internal::traits<Derived>::RowsAtCompileTime, 1, !IsRowMajor> ConstColXpr;"},
{"lineNum":"   16","line":"/// \\internal expression type of a row */"},
{"lineNum":"   17","line":"typedef Block<Derived, 1, internal::traits<Derived>::ColsAtCompileTime, IsRowMajor> RowXpr;"},
{"lineNum":"   18","line":"typedef const Block<const Derived, 1, internal::traits<Derived>::ColsAtCompileTime, IsRowMajor> ConstRowXpr;"},
{"lineNum":"   19","line":"/// \\internal expression type of a block of whole columns */"},
{"lineNum":"   20","line":"typedef Block<Derived, internal::traits<Derived>::RowsAtCompileTime, Dynamic, !IsRowMajor> ColsBlockXpr;"},
{"lineNum":"   21","line":"typedef const Block<const Derived, internal::traits<Derived>::RowsAtCompileTime, Dynamic, !IsRowMajor> ConstColsBlockXpr;"},
{"lineNum":"   22","line":"/// \\internal expression type of a block of whole rows */"},
{"lineNum":"   23","line":"typedef Block<Derived, Dynamic, internal::traits<Derived>::ColsAtCompileTime, IsRowMajor> RowsBlockXpr;"},
{"lineNum":"   24","line":"typedef const Block<const Derived, Dynamic, internal::traits<Derived>::ColsAtCompileTime, IsRowMajor> ConstRowsBlockXpr;"},
{"lineNum":"   25","line":"/// \\internal expression type of a block of whole columns */"},
{"lineNum":"   26","line":"template<int N> struct NColsBlockXpr { typedef Block<Derived, internal::traits<Derived>::RowsAtCompileTime, N, !IsRowMajor> Type; };"},
{"lineNum":"   27","line":"template<int N> struct ConstNColsBlockXpr { typedef const Block<const Derived, internal::traits<Derived>::RowsAtCompileTime, N, !IsRowMajor> Type; };"},
{"lineNum":"   28","line":"/// \\internal expression type of a block of whole rows */"},
{"lineNum":"   29","line":"template<int N> struct NRowsBlockXpr { typedef Block<Derived, N, internal::traits<Derived>::ColsAtCompileTime, IsRowMajor> Type; };"},
{"lineNum":"   30","line":"template<int N> struct ConstNRowsBlockXpr { typedef const Block<const Derived, N, internal::traits<Derived>::ColsAtCompileTime, IsRowMajor> Type; };"},
{"lineNum":"   31","line":"/// \\internal expression of a block */"},
{"lineNum":"   32","line":"typedef Block<Derived> BlockXpr;"},
{"lineNum":"   33","line":"typedef const Block<const Derived> ConstBlockXpr;"},
{"lineNum":"   34","line":"/// \\internal expression of a block of fixed sizes */"},
{"lineNum":"   35","line":"template<int Rows, int Cols> struct FixedBlockXpr { typedef Block<Derived,Rows,Cols> Type; };"},
{"lineNum":"   36","line":"template<int Rows, int Cols> struct ConstFixedBlockXpr { typedef Block<const Derived,Rows,Cols> Type; };"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"typedef VectorBlock<Derived> SegmentReturnType;"},
{"lineNum":"   39","line":"typedef const VectorBlock<const Derived> ConstSegmentReturnType;"},
{"lineNum":"   40","line":"template<int Size> struct FixedSegmentReturnType { typedef VectorBlock<Derived, Size> Type; };"},
{"lineNum":"   41","line":"template<int Size> struct ConstFixedSegmentReturnType { typedef const VectorBlock<const Derived, Size> Type; };"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"/// \\internal inner-vector"},
{"lineNum":"   44","line":"typedef Block<Derived,IsRowMajor?1:Dynamic,IsRowMajor?Dynamic:1,true>       InnerVectorReturnType;"},
{"lineNum":"   45","line":"typedef Block<const Derived,IsRowMajor?1:Dynamic,IsRowMajor?Dynamic:1,true> ConstInnerVectorReturnType;"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"/// \\internal set of inner-vectors"},
{"lineNum":"   48","line":"typedef Block<Derived,Dynamic,Dynamic,true> InnerVectorsReturnType;"},
{"lineNum":"   49","line":"typedef Block<const Derived,Dynamic,Dynamic,true> ConstInnerVectorsReturnType;"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"#endif // not EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"/// \\returns an expression of a block in \\c *this with either dynamic or fixed sizes."},
{"lineNum":"   54","line":"///"},
{"lineNum":"   55","line":"/// \\param  startRow  the first row in the block"},
{"lineNum":"   56","line":"/// \\param  startCol  the first column in the block"},
{"lineNum":"   57","line":"/// \\param  blockRows number of rows in the block, specified at either run-time or compile-time"},
{"lineNum":"   58","line":"/// \\param  blockCols number of columns in the block, specified at either run-time or compile-time"},
{"lineNum":"   59","line":"/// \\tparam NRowsType the type of the value handling the number of rows in the block, typically Index."},
{"lineNum":"   60","line":"/// \\tparam NColsType the type of the value handling the number of columns in the block, typically Index."},
{"lineNum":"   61","line":"///"},
{"lineNum":"   62","line":"/// Example using runtime (aka dynamic) sizes: \\include MatrixBase_block_int_int_int_int.cpp"},
{"lineNum":"   63","line":"/// Output: \\verbinclude MatrixBase_block_int_int_int_int.out"},
{"lineNum":"   64","line":"///"},
{"lineNum":"   65","line":"/// \\newin{3.4}:"},
{"lineNum":"   66","line":"///"},
{"lineNum":"   67","line":"/// The number of rows \\a blockRows and columns \\a blockCols can also be specified at compile-time by passing Eigen::fix<N>,"},
{"lineNum":"   68","line":"/// or Eigen::fix<N>(n) as arguments. In the later case, \\c n plays the role of a runtime fallback value in case \\c N equals Eigen::Dynamic."},
{"lineNum":"   69","line":"/// Here is an example with a fixed number of rows \\c NRows and dynamic number of columns \\c cols:"},
{"lineNum":"   70","line":"/// \\code"},
{"lineNum":"   71","line":"/// mat.block(i,j,fix<NRows>,cols)"},
{"lineNum":"   72","line":"/// \\endcode"},
{"lineNum":"   73","line":"///"},
{"lineNum":"   74","line":"/// This function thus fully covers the features offered by the following overloads block<NRows,NCols>(Index, Index),"},
{"lineNum":"   75","line":"/// and block<NRows,NCols>(Index, Index, Index, Index) that are thus obsolete. Indeed, this generic version avoids"},
{"lineNum":"   76","line":"/// redundancy, it preserves the argument order, and prevents the need to rely on the template keyword in templated code."},
{"lineNum":"   77","line":"///"},
{"lineNum":"   78","line":"/// but with less redundancy and more consistency as it does not modify the argument order"},
{"lineNum":"   79","line":"/// and seamlessly enable hybrid fixed/dynamic sizes."},
{"lineNum":"   80","line":"///"},
{"lineNum":"   81","line":"/// \\note Even in the case that the returned expression has dynamic size, in the case"},
{"lineNum":"   82","line":"/// when it is applied to a fixed-size matrix, it inherits a fixed maximal size,"},
{"lineNum":"   83","line":"/// which means that evaluating it does not cause a dynamic memory allocation."},
{"lineNum":"   84","line":"///"},
{"lineNum":"   85","line":"EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL"},
{"lineNum":"   86","line":"///"},
{"lineNum":"   87","line":"/// \\sa class Block, fix, fix<N>(int)"},
{"lineNum":"   88","line":"///"},
{"lineNum":"   89","line":"template<typename NRowsType, typename NColsType>"},
{"lineNum":"   90","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"   91","line":"#ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"   92","line":"typename FixedBlockXpr<internal::get_fixed_value<NRowsType>::value,internal::get_fixed_value<NColsType>::value>::Type"},
{"lineNum":"   93","line":"#else"},
{"lineNum":"   94","line":"typename FixedBlockXpr<...,...>::Type"},
{"lineNum":"   95","line":"#endif"},
{"lineNum":"   96","line":"block(Index startRow, Index startCol, NRowsType blockRows, NColsType blockCols)"},
{"lineNum":"   97","line":"{"},
{"lineNum":"   98","line":"  return typename FixedBlockXpr<internal::get_fixed_value<NRowsType>::value,internal::get_fixed_value<NColsType>::value>::Type("},
{"lineNum":"   99","line":"            derived(), startRow, startCol, internal::get_runtime_value(blockRows), internal::get_runtime_value(blockCols));"},
{"lineNum":"  100","line":"}"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"/// This is the const version of block(Index,Index,NRowsType,NColsType)"},
{"lineNum":"  103","line":"template<typename NRowsType, typename NColsType>"},
{"lineNum":"  104","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  105","line":"#ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"  106","line":"const typename ConstFixedBlockXpr<internal::get_fixed_value<NRowsType>::value,internal::get_fixed_value<NColsType>::value>::Type"},
{"lineNum":"  107","line":"#else"},
{"lineNum":"  108","line":"const typename ConstFixedBlockXpr<...,...>::Type"},
{"lineNum":"  109","line":"#endif"},
{"lineNum":"  110","line":"block(Index startRow, Index startCol, NRowsType blockRows, NColsType blockCols) const"},
{"lineNum":"  111","line":"{"},
{"lineNum":"  112","line":"  return typename ConstFixedBlockXpr<internal::get_fixed_value<NRowsType>::value,internal::get_fixed_value<NColsType>::value>::Type("},
{"lineNum":"  113","line":"            derived(), startRow, startCol, internal::get_runtime_value(blockRows), internal::get_runtime_value(blockCols));"},
{"lineNum":"  114","line":"}"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"/// \\returns a expression of a top-right corner of \\c *this with either dynamic or fixed sizes."},
{"lineNum":"  119","line":"///"},
{"lineNum":"  120","line":"/// \\param cRows the number of rows in the corner"},
{"lineNum":"  121","line":"/// \\param cCols the number of columns in the corner"},
{"lineNum":"  122","line":"/// \\tparam NRowsType the type of the value handling the number of rows in the block, typically Index."},
{"lineNum":"  123","line":"/// \\tparam NColsType the type of the value handling the number of columns in the block, typically Index."},
{"lineNum":"  124","line":"///"},
{"lineNum":"  125","line":"/// Example with dynamic sizes: \\include MatrixBase_topRightCorner_int_int.cpp"},
{"lineNum":"  126","line":"/// Output: \\verbinclude MatrixBase_topRightCorner_int_int.out"},
{"lineNum":"  127","line":"///"},
{"lineNum":"  128","line":"/// The number of rows \\a blockRows and columns \\a blockCols can also be specified at compile-time by passing Eigen::fix<N>,"},
{"lineNum":"  129","line":"/// or Eigen::fix<N>(n) as arguments. See \\link block(Index,Index,NRowsType,NColsType) block() \\endlink for the details."},
{"lineNum":"  130","line":"///"},
{"lineNum":"  131","line":"EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL"},
{"lineNum":"  132","line":"///"},
{"lineNum":"  133","line":"/// \\sa block(Index,Index,NRowsType,NColsType), class Block"},
{"lineNum":"  134","line":"///"},
{"lineNum":"  135","line":"template<typename NRowsType, typename NColsType>"},
{"lineNum":"  136","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  137","line":"#ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"  138","line":"typename FixedBlockXpr<internal::get_fixed_value<NRowsType>::value,internal::get_fixed_value<NColsType>::value>::Type"},
{"lineNum":"  139","line":"#else"},
{"lineNum":"  140","line":"typename FixedBlockXpr<...,...>::Type"},
{"lineNum":"  141","line":"#endif"},
{"lineNum":"  142","line":"topRightCorner(NRowsType cRows, NColsType cCols)"},
{"lineNum":"  143","line":"{"},
{"lineNum":"  144","line":"  return typename FixedBlockXpr<internal::get_fixed_value<NRowsType>::value,internal::get_fixed_value<NColsType>::value>::Type"},
{"lineNum":"  145","line":"            (derived(), 0, cols() - internal::get_runtime_value(cCols), internal::get_runtime_value(cRows), internal::get_runtime_value(cCols));"},
{"lineNum":"  146","line":"}"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"/// This is the const version of topRightCorner(NRowsType, NColsType)."},
{"lineNum":"  149","line":"template<typename NRowsType, typename NColsType>"},
{"lineNum":"  150","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  151","line":"#ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"  152","line":"const typename ConstFixedBlockXpr<internal::get_fixed_value<NRowsType>::value,internal::get_fixed_value<NColsType>::value>::Type"},
{"lineNum":"  153","line":"#else"},
{"lineNum":"  154","line":"const typename ConstFixedBlockXpr<...,...>::Type"},
{"lineNum":"  155","line":"#endif"},
{"lineNum":"  156","line":"topRightCorner(NRowsType cRows, NColsType cCols) const"},
{"lineNum":"  157","line":"{"},
{"lineNum":"  158","line":"  return typename ConstFixedBlockXpr<internal::get_fixed_value<NRowsType>::value,internal::get_fixed_value<NColsType>::value>::Type"},
{"lineNum":"  159","line":"            (derived(), 0, cols() - internal::get_runtime_value(cCols), internal::get_runtime_value(cRows), internal::get_runtime_value(cCols));"},
{"lineNum":"  160","line":"}"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"/// \\returns an expression of a fixed-size top-right corner of \\c *this."},
{"lineNum":"  163","line":"///"},
{"lineNum":"  164","line":"/// \\tparam CRows the number of rows in the corner"},
{"lineNum":"  165","line":"/// \\tparam CCols the number of columns in the corner"},
{"lineNum":"  166","line":"///"},
{"lineNum":"  167","line":"/// Example: \\include MatrixBase_template_int_int_topRightCorner.cpp"},
{"lineNum":"  168","line":"/// Output: \\verbinclude MatrixBase_template_int_int_topRightCorner.out"},
{"lineNum":"  169","line":"///"},
{"lineNum":"  170","line":"EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL"},
{"lineNum":"  171","line":"///"},
{"lineNum":"  172","line":"/// \\sa class Block, block<int,int>(Index,Index)"},
{"lineNum":"  173","line":"///"},
{"lineNum":"  174","line":"template<int CRows, int CCols>"},
{"lineNum":"  175","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  176","line":"typename FixedBlockXpr<CRows,CCols>::Type topRightCorner()"},
{"lineNum":"  177","line":"{"},
{"lineNum":"  178","line":"  return typename FixedBlockXpr<CRows,CCols>::Type(derived(), 0, cols() - CCols);"},
{"lineNum":"  179","line":"}"},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"/// This is the const version of topRightCorner<int, int>()."},
{"lineNum":"  182","line":"template<int CRows, int CCols>"},
{"lineNum":"  183","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  184","line":"const typename ConstFixedBlockXpr<CRows,CCols>::Type topRightCorner() const"},
{"lineNum":"  185","line":"{"},
{"lineNum":"  186","line":"  return typename ConstFixedBlockXpr<CRows,CCols>::Type(derived(), 0, cols() - CCols);"},
{"lineNum":"  187","line":"}"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"/// \\returns an expression of a top-right corner of \\c *this."},
{"lineNum":"  190","line":"///"},
{"lineNum":"  191","line":"/// \\tparam CRows number of rows in corner as specified at compile-time"},
{"lineNum":"  192","line":"/// \\tparam CCols number of columns in corner as specified at compile-time"},
{"lineNum":"  193","line":"/// \\param  cRows number of rows in corner as specified at run-time"},
{"lineNum":"  194","line":"/// \\param  cCols number of columns in corner as specified at run-time"},
{"lineNum":"  195","line":"///"},
{"lineNum":"  196","line":"/// This function is mainly useful for corners where the number of rows is specified at compile-time"},
{"lineNum":"  197","line":"/// and the number of columns is specified at run-time, or vice versa. The compile-time and run-time"},
{"lineNum":"  198","line":"/// information should not contradict. In other words, \\a cRows should equal \\a CRows unless"},
{"lineNum":"  199","line":"/// \\a CRows is \\a Dynamic, and the same for the number of columns."},
{"lineNum":"  200","line":"///"},
{"lineNum":"  201","line":"/// Example: \\include MatrixBase_template_int_int_topRightCorner_int_int.cpp"},
{"lineNum":"  202","line":"/// Output: \\verbinclude MatrixBase_template_int_int_topRightCorner_int_int.out"},
{"lineNum":"  203","line":"///"},
{"lineNum":"  204","line":"EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL"},
{"lineNum":"  205","line":"///"},
{"lineNum":"  206","line":"/// \\sa class Block"},
{"lineNum":"  207","line":"///"},
{"lineNum":"  208","line":"template<int CRows, int CCols>"},
{"lineNum":"  209","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  210","line":"typename FixedBlockXpr<CRows,CCols>::Type topRightCorner(Index cRows, Index cCols)"},
{"lineNum":"  211","line":"{"},
{"lineNum":"  212","line":"  return typename FixedBlockXpr<CRows,CCols>::Type(derived(), 0, cols() - cCols, cRows, cCols);"},
{"lineNum":"  213","line":"}"},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"/// This is the const version of topRightCorner<int, int>(Index, Index)."},
{"lineNum":"  216","line":"template<int CRows, int CCols>"},
{"lineNum":"  217","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  218","line":"const typename ConstFixedBlockXpr<CRows,CCols>::Type topRightCorner(Index cRows, Index cCols) const"},
{"lineNum":"  219","line":"{"},
{"lineNum":"  220","line":"  return typename ConstFixedBlockXpr<CRows,CCols>::Type(derived(), 0, cols() - cCols, cRows, cCols);"},
{"lineNum":"  221","line":"}"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"/// \\returns an expression of a top-left corner of \\c *this  with either dynamic or fixed sizes."},
{"lineNum":"  226","line":"///"},
{"lineNum":"  227","line":"/// \\param cRows the number of rows in the corner"},
{"lineNum":"  228","line":"/// \\param cCols the number of columns in the corner"},
{"lineNum":"  229","line":"/// \\tparam NRowsType the type of the value handling the number of rows in the block, typically Index."},
{"lineNum":"  230","line":"/// \\tparam NColsType the type of the value handling the number of columns in the block, typically Index."},
{"lineNum":"  231","line":"///"},
{"lineNum":"  232","line":"/// Example: \\include MatrixBase_topLeftCorner_int_int.cpp"},
{"lineNum":"  233","line":"/// Output: \\verbinclude MatrixBase_topLeftCorner_int_int.out"},
{"lineNum":"  234","line":"///"},
{"lineNum":"  235","line":"/// The number of rows \\a blockRows and columns \\a blockCols can also be specified at compile-time by passing Eigen::fix<N>,"},
{"lineNum":"  236","line":"/// or Eigen::fix<N>(n) as arguments. See \\link block(Index,Index,NRowsType,NColsType) block() \\endlink for the details."},
{"lineNum":"  237","line":"///"},
{"lineNum":"  238","line":"EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL"},
{"lineNum":"  239","line":"///"},
{"lineNum":"  240","line":"/// \\sa block(Index,Index,NRowsType,NColsType), class Block"},
{"lineNum":"  241","line":"///"},
{"lineNum":"  242","line":"template<typename NRowsType, typename NColsType>"},
{"lineNum":"  243","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  244","line":"#ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"  245","line":"typename FixedBlockXpr<internal::get_fixed_value<NRowsType>::value,internal::get_fixed_value<NColsType>::value>::Type"},
{"lineNum":"  246","line":"#else"},
{"lineNum":"  247","line":"typename FixedBlockXpr<...,...>::Type"},
{"lineNum":"  248","line":"#endif"},
{"lineNum":"  249","line":"topLeftCorner(NRowsType cRows, NColsType cCols)"},
{"lineNum":"  250","line":"{"},
{"lineNum":"  251","line":"  return typename FixedBlockXpr<internal::get_fixed_value<NRowsType>::value,internal::get_fixed_value<NColsType>::value>::Type"},
{"lineNum":"  252","line":"            (derived(), 0, 0, internal::get_runtime_value(cRows), internal::get_runtime_value(cCols));"},
{"lineNum":"  253","line":"}"},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"/// This is the const version of topLeftCorner(Index, Index)."},
{"lineNum":"  256","line":"template<typename NRowsType, typename NColsType>"},
{"lineNum":"  257","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  258","line":"#ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"  259","line":"const typename ConstFixedBlockXpr<internal::get_fixed_value<NRowsType>::value,internal::get_fixed_value<NColsType>::value>::Type"},
{"lineNum":"  260","line":"#else"},
{"lineNum":"  261","line":"const typename ConstFixedBlockXpr<...,...>::Type"},
{"lineNum":"  262","line":"#endif"},
{"lineNum":"  263","line":"topLeftCorner(NRowsType cRows, NColsType cCols) const"},
{"lineNum":"  264","line":"{"},
{"lineNum":"  265","line":"  return typename ConstFixedBlockXpr<internal::get_fixed_value<NRowsType>::value,internal::get_fixed_value<NColsType>::value>::Type"},
{"lineNum":"  266","line":"            (derived(), 0, 0, internal::get_runtime_value(cRows), internal::get_runtime_value(cCols));"},
{"lineNum":"  267","line":"}"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"/// \\returns an expression of a fixed-size top-left corner of \\c *this."},
{"lineNum":"  270","line":"///"},
{"lineNum":"  271","line":"/// The template parameters CRows and CCols are the number of rows and columns in the corner."},
{"lineNum":"  272","line":"///"},
{"lineNum":"  273","line":"/// Example: \\include MatrixBase_template_int_int_topLeftCorner.cpp"},
{"lineNum":"  274","line":"/// Output: \\verbinclude MatrixBase_template_int_int_topLeftCorner.out"},
{"lineNum":"  275","line":"///"},
{"lineNum":"  276","line":"EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL"},
{"lineNum":"  277","line":"///"},
{"lineNum":"  278","line":"/// \\sa block(Index,Index,NRowsType,NColsType), class Block"},
{"lineNum":"  279","line":"///"},
{"lineNum":"  280","line":"template<int CRows, int CCols>"},
{"lineNum":"  281","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  282","line":"typename FixedBlockXpr<CRows,CCols>::Type topLeftCorner()"},
{"lineNum":"  283","line":"{"},
{"lineNum":"  284","line":"  return typename FixedBlockXpr<CRows,CCols>::Type(derived(), 0, 0);"},
{"lineNum":"  285","line":"}"},
{"lineNum":"  286","line":""},
{"lineNum":"  287","line":"/// This is the const version of topLeftCorner<int, int>()."},
{"lineNum":"  288","line":"template<int CRows, int CCols>"},
{"lineNum":"  289","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  290","line":"const typename ConstFixedBlockXpr<CRows,CCols>::Type topLeftCorner() const"},
{"lineNum":"  291","line":"{"},
{"lineNum":"  292","line":"  return typename ConstFixedBlockXpr<CRows,CCols>::Type(derived(), 0, 0);"},
{"lineNum":"  293","line":"}"},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":"/// \\returns an expression of a top-left corner of \\c *this."},
{"lineNum":"  296","line":"///"},
{"lineNum":"  297","line":"/// \\tparam CRows number of rows in corner as specified at compile-time"},
{"lineNum":"  298","line":"/// \\tparam CCols number of columns in corner as specified at compile-time"},
{"lineNum":"  299","line":"/// \\param  cRows number of rows in corner as specified at run-time"},
{"lineNum":"  300","line":"/// \\param  cCols number of columns in corner as specified at run-time"},
{"lineNum":"  301","line":"///"},
{"lineNum":"  302","line":"/// This function is mainly useful for corners where the number of rows is specified at compile-time"},
{"lineNum":"  303","line":"/// and the number of columns is specified at run-time, or vice versa. The compile-time and run-time"},
{"lineNum":"  304","line":"/// information should not contradict. In other words, \\a cRows should equal \\a CRows unless"},
{"lineNum":"  305","line":"/// \\a CRows is \\a Dynamic, and the same for the number of columns."},
{"lineNum":"  306","line":"///"},
{"lineNum":"  307","line":"/// Example: \\include MatrixBase_template_int_int_topLeftCorner_int_int.cpp"},
{"lineNum":"  308","line":"/// Output: \\verbinclude MatrixBase_template_int_int_topLeftCorner_int_int.out"},
{"lineNum":"  309","line":"///"},
{"lineNum":"  310","line":"EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL"},
{"lineNum":"  311","line":"///"},
{"lineNum":"  312","line":"/// \\sa class Block"},
{"lineNum":"  313","line":"///"},
{"lineNum":"  314","line":"template<int CRows, int CCols>"},
{"lineNum":"  315","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  316","line":"typename FixedBlockXpr<CRows,CCols>::Type topLeftCorner(Index cRows, Index cCols)"},
{"lineNum":"  317","line":"{"},
{"lineNum":"  318","line":"  return typename FixedBlockXpr<CRows,CCols>::Type(derived(), 0, 0, cRows, cCols);"},
{"lineNum":"  319","line":"}"},
{"lineNum":"  320","line":""},
{"lineNum":"  321","line":"/// This is the const version of topLeftCorner<int, int>(Index, Index)."},
{"lineNum":"  322","line":"template<int CRows, int CCols>"},
{"lineNum":"  323","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  324","line":"const typename ConstFixedBlockXpr<CRows,CCols>::Type topLeftCorner(Index cRows, Index cCols) const"},
{"lineNum":"  325","line":"{"},
{"lineNum":"  326","line":"  return typename ConstFixedBlockXpr<CRows,CCols>::Type(derived(), 0, 0, cRows, cCols);"},
{"lineNum":"  327","line":"}"},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":""},
{"lineNum":"  330","line":""},
{"lineNum":"  331","line":"/// \\returns an expression of a bottom-right corner of \\c *this  with either dynamic or fixed sizes."},
{"lineNum":"  332","line":"///"},
{"lineNum":"  333","line":"/// \\param cRows the number of rows in the corner"},
{"lineNum":"  334","line":"/// \\param cCols the number of columns in the corner"},
{"lineNum":"  335","line":"/// \\tparam NRowsType the type of the value handling the number of rows in the block, typically Index."},
{"lineNum":"  336","line":"/// \\tparam NColsType the type of the value handling the number of columns in the block, typically Index."},
{"lineNum":"  337","line":"///"},
{"lineNum":"  338","line":"/// Example: \\include MatrixBase_bottomRightCorner_int_int.cpp"},
{"lineNum":"  339","line":"/// Output: \\verbinclude MatrixBase_bottomRightCorner_int_int.out"},
{"lineNum":"  340","line":"///"},
{"lineNum":"  341","line":"/// The number of rows \\a blockRows and columns \\a blockCols can also be specified at compile-time by passing Eigen::fix<N>,"},
{"lineNum":"  342","line":"/// or Eigen::fix<N>(n) as arguments. See \\link block(Index,Index,NRowsType,NColsType) block() \\endlink for the details."},
{"lineNum":"  343","line":"///"},
{"lineNum":"  344","line":"EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL"},
{"lineNum":"  345","line":"///"},
{"lineNum":"  346","line":"/// \\sa block(Index,Index,NRowsType,NColsType), class Block"},
{"lineNum":"  347","line":"///"},
{"lineNum":"  348","line":"template<typename NRowsType, typename NColsType>"},
{"lineNum":"  349","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  350","line":"#ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"  351","line":"typename FixedBlockXpr<internal::get_fixed_value<NRowsType>::value,internal::get_fixed_value<NColsType>::value>::Type"},
{"lineNum":"  352","line":"#else"},
{"lineNum":"  353","line":"typename FixedBlockXpr<...,...>::Type"},
{"lineNum":"  354","line":"#endif"},
{"lineNum":"  355","line":"bottomRightCorner(NRowsType cRows, NColsType cCols)"},
{"lineNum":"  356","line":"{"},
{"lineNum":"  357","line":"  return typename FixedBlockXpr<internal::get_fixed_value<NRowsType>::value,internal::get_fixed_value<NColsType>::value>::Type"},
{"lineNum":"  358","line":"            (derived(), rows() - internal::get_runtime_value(cRows), cols() - internal::get_runtime_value(cCols),","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  359","line":"                        internal::get_runtime_value(cRows), internal::get_runtime_value(cCols));"},
{"lineNum":"  360","line":"}"},
{"lineNum":"  361","line":""},
{"lineNum":"  362","line":"/// This is the const version of bottomRightCorner(NRowsType, NColsType)."},
{"lineNum":"  363","line":"template<typename NRowsType, typename NColsType>"},
{"lineNum":"  364","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  365","line":"#ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"  366","line":"const typename ConstFixedBlockXpr<internal::get_fixed_value<NRowsType>::value,internal::get_fixed_value<NColsType>::value>::Type"},
{"lineNum":"  367","line":"#else"},
{"lineNum":"  368","line":"const typename ConstFixedBlockXpr<...,...>::Type"},
{"lineNum":"  369","line":"#endif"},
{"lineNum":"  370","line":"bottomRightCorner(NRowsType cRows, NColsType cCols) const"},
{"lineNum":"  371","line":"{"},
{"lineNum":"  372","line":"  return typename ConstFixedBlockXpr<internal::get_fixed_value<NRowsType>::value,internal::get_fixed_value<NColsType>::value>::Type"},
{"lineNum":"  373","line":"            (derived(), rows() - internal::get_runtime_value(cRows), cols() - internal::get_runtime_value(cCols),","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  374","line":"                        internal::get_runtime_value(cRows), internal::get_runtime_value(cCols));"},
{"lineNum":"  375","line":"}"},
{"lineNum":"  376","line":""},
{"lineNum":"  377","line":"/// \\returns an expression of a fixed-size bottom-right corner of \\c *this."},
{"lineNum":"  378","line":"///"},
{"lineNum":"  379","line":"/// The template parameters CRows and CCols are the number of rows and columns in the corner."},
{"lineNum":"  380","line":"///"},
{"lineNum":"  381","line":"/// Example: \\include MatrixBase_template_int_int_bottomRightCorner.cpp"},
{"lineNum":"  382","line":"/// Output: \\verbinclude MatrixBase_template_int_int_bottomRightCorner.out"},
{"lineNum":"  383","line":"///"},
{"lineNum":"  384","line":"EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL"},
{"lineNum":"  385","line":"///"},
{"lineNum":"  386","line":"/// \\sa block(Index,Index,NRowsType,NColsType), class Block"},
{"lineNum":"  387","line":"///"},
{"lineNum":"  388","line":"template<int CRows, int CCols>"},
{"lineNum":"  389","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  390","line":"typename FixedBlockXpr<CRows,CCols>::Type bottomRightCorner()"},
{"lineNum":"  391","line":"{"},
{"lineNum":"  392","line":"  return typename FixedBlockXpr<CRows,CCols>::Type(derived(), rows() - CRows, cols() - CCols);"},
{"lineNum":"  393","line":"}"},
{"lineNum":"  394","line":""},
{"lineNum":"  395","line":"/// This is the const version of bottomRightCorner<int, int>()."},
{"lineNum":"  396","line":"template<int CRows, int CCols>"},
{"lineNum":"  397","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  398","line":"const typename ConstFixedBlockXpr<CRows,CCols>::Type bottomRightCorner() const"},
{"lineNum":"  399","line":"{"},
{"lineNum":"  400","line":"  return typename ConstFixedBlockXpr<CRows,CCols>::Type(derived(), rows() - CRows, cols() - CCols);"},
{"lineNum":"  401","line":"}"},
{"lineNum":"  402","line":""},
{"lineNum":"  403","line":"/// \\returns an expression of a bottom-right corner of \\c *this."},
{"lineNum":"  404","line":"///"},
{"lineNum":"  405","line":"/// \\tparam CRows number of rows in corner as specified at compile-time"},
{"lineNum":"  406","line":"/// \\tparam CCols number of columns in corner as specified at compile-time"},
{"lineNum":"  407","line":"/// \\param  cRows number of rows in corner as specified at run-time"},
{"lineNum":"  408","line":"/// \\param  cCols number of columns in corner as specified at run-time"},
{"lineNum":"  409","line":"///"},
{"lineNum":"  410","line":"/// This function is mainly useful for corners where the number of rows is specified at compile-time"},
{"lineNum":"  411","line":"/// and the number of columns is specified at run-time, or vice versa. The compile-time and run-time"},
{"lineNum":"  412","line":"/// information should not contradict. In other words, \\a cRows should equal \\a CRows unless"},
{"lineNum":"  413","line":"/// \\a CRows is \\a Dynamic, and the same for the number of columns."},
{"lineNum":"  414","line":"///"},
{"lineNum":"  415","line":"/// Example: \\include MatrixBase_template_int_int_bottomRightCorner_int_int.cpp"},
{"lineNum":"  416","line":"/// Output: \\verbinclude MatrixBase_template_int_int_bottomRightCorner_int_int.out"},
{"lineNum":"  417","line":"///"},
{"lineNum":"  418","line":"EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL"},
{"lineNum":"  419","line":"///"},
{"lineNum":"  420","line":"/// \\sa class Block"},
{"lineNum":"  421","line":"///"},
{"lineNum":"  422","line":"template<int CRows, int CCols>"},
{"lineNum":"  423","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  424","line":"typename FixedBlockXpr<CRows,CCols>::Type bottomRightCorner(Index cRows, Index cCols)"},
{"lineNum":"  425","line":"{"},
{"lineNum":"  426","line":"  return typename FixedBlockXpr<CRows,CCols>::Type(derived(), rows() - cRows, cols() - cCols, cRows, cCols);"},
{"lineNum":"  427","line":"}"},
{"lineNum":"  428","line":""},
{"lineNum":"  429","line":"/// This is the const version of bottomRightCorner<int, int>(Index, Index)."},
{"lineNum":"  430","line":"template<int CRows, int CCols>"},
{"lineNum":"  431","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  432","line":"const typename ConstFixedBlockXpr<CRows,CCols>::Type bottomRightCorner(Index cRows, Index cCols) const"},
{"lineNum":"  433","line":"{"},
{"lineNum":"  434","line":"  return typename ConstFixedBlockXpr<CRows,CCols>::Type(derived(), rows() - cRows, cols() - cCols, cRows, cCols);"},
{"lineNum":"  435","line":"}"},
{"lineNum":"  436","line":""},
{"lineNum":"  437","line":""},
{"lineNum":"  438","line":""},
{"lineNum":"  439","line":"/// \\returns an expression of a bottom-left corner of \\c *this  with either dynamic or fixed sizes."},
{"lineNum":"  440","line":"///"},
{"lineNum":"  441","line":"/// \\param cRows the number of rows in the corner"},
{"lineNum":"  442","line":"/// \\param cCols the number of columns in the corner"},
{"lineNum":"  443","line":"/// \\tparam NRowsType the type of the value handling the number of rows in the block, typically Index."},
{"lineNum":"  444","line":"/// \\tparam NColsType the type of the value handling the number of columns in the block, typically Index."},
{"lineNum":"  445","line":"///"},
{"lineNum":"  446","line":"/// Example: \\include MatrixBase_bottomLeftCorner_int_int.cpp"},
{"lineNum":"  447","line":"/// Output: \\verbinclude MatrixBase_bottomLeftCorner_int_int.out"},
{"lineNum":"  448","line":"///"},
{"lineNum":"  449","line":"/// The number of rows \\a blockRows and columns \\a blockCols can also be specified at compile-time by passing Eigen::fix<N>,"},
{"lineNum":"  450","line":"/// or Eigen::fix<N>(n) as arguments. See \\link block(Index,Index,NRowsType,NColsType) block() \\endlink for the details."},
{"lineNum":"  451","line":"///"},
{"lineNum":"  452","line":"EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL"},
{"lineNum":"  453","line":"///"},
{"lineNum":"  454","line":"/// \\sa block(Index,Index,NRowsType,NColsType), class Block"},
{"lineNum":"  455","line":"///"},
{"lineNum":"  456","line":"template<typename NRowsType, typename NColsType>"},
{"lineNum":"  457","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  458","line":"#ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"  459","line":"typename FixedBlockXpr<internal::get_fixed_value<NRowsType>::value,internal::get_fixed_value<NColsType>::value>::Type"},
{"lineNum":"  460","line":"#else"},
{"lineNum":"  461","line":"typename FixedBlockXpr<...,...>::Type"},
{"lineNum":"  462","line":"#endif"},
{"lineNum":"  463","line":"bottomLeftCorner(NRowsType cRows, NColsType cCols)"},
{"lineNum":"  464","line":"{"},
{"lineNum":"  465","line":"  return typename FixedBlockXpr<internal::get_fixed_value<NRowsType>::value,internal::get_fixed_value<NColsType>::value>::Type"},
{"lineNum":"  466","line":"            (derived(), rows() - internal::get_runtime_value(cRows), 0,"},
{"lineNum":"  467","line":"                        internal::get_runtime_value(cRows), internal::get_runtime_value(cCols));"},
{"lineNum":"  468","line":"}"},
{"lineNum":"  469","line":""},
{"lineNum":"  470","line":"/// This is the const version of bottomLeftCorner(NRowsType, NColsType)."},
{"lineNum":"  471","line":"template<typename NRowsType, typename NColsType>"},
{"lineNum":"  472","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  473","line":"#ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"  474","line":"typename ConstFixedBlockXpr<internal::get_fixed_value<NRowsType>::value,internal::get_fixed_value<NColsType>::value>::Type"},
{"lineNum":"  475","line":"#else"},
{"lineNum":"  476","line":"typename ConstFixedBlockXpr<...,...>::Type"},
{"lineNum":"  477","line":"#endif"},
{"lineNum":"  478","line":"bottomLeftCorner(NRowsType cRows, NColsType cCols) const"},
{"lineNum":"  479","line":"{"},
{"lineNum":"  480","line":"  return typename ConstFixedBlockXpr<internal::get_fixed_value<NRowsType>::value,internal::get_fixed_value<NColsType>::value>::Type"},
{"lineNum":"  481","line":"            (derived(), rows() - internal::get_runtime_value(cRows), 0,"},
{"lineNum":"  482","line":"                        internal::get_runtime_value(cRows), internal::get_runtime_value(cCols));"},
{"lineNum":"  483","line":"}"},
{"lineNum":"  484","line":""},
{"lineNum":"  485","line":"/// \\returns an expression of a fixed-size bottom-left corner of \\c *this."},
{"lineNum":"  486","line":"///"},
{"lineNum":"  487","line":"/// The template parameters CRows and CCols are the number of rows and columns in the corner."},
{"lineNum":"  488","line":"///"},
{"lineNum":"  489","line":"/// Example: \\include MatrixBase_template_int_int_bottomLeftCorner.cpp"},
{"lineNum":"  490","line":"/// Output: \\verbinclude MatrixBase_template_int_int_bottomLeftCorner.out"},
{"lineNum":"  491","line":"///"},
{"lineNum":"  492","line":"EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL"},
{"lineNum":"  493","line":"///"},
{"lineNum":"  494","line":"/// \\sa block(Index,Index,NRowsType,NColsType), class Block"},
{"lineNum":"  495","line":"///"},
{"lineNum":"  496","line":"template<int CRows, int CCols>"},
{"lineNum":"  497","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  498","line":"typename FixedBlockXpr<CRows,CCols>::Type bottomLeftCorner()"},
{"lineNum":"  499","line":"{"},
{"lineNum":"  500","line":"  return typename FixedBlockXpr<CRows,CCols>::Type(derived(), rows() - CRows, 0);"},
{"lineNum":"  501","line":"}"},
{"lineNum":"  502","line":""},
{"lineNum":"  503","line":"/// This is the const version of bottomLeftCorner<int, int>()."},
{"lineNum":"  504","line":"template<int CRows, int CCols>"},
{"lineNum":"  505","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  506","line":"const typename ConstFixedBlockXpr<CRows,CCols>::Type bottomLeftCorner() const"},
{"lineNum":"  507","line":"{"},
{"lineNum":"  508","line":"  return typename ConstFixedBlockXpr<CRows,CCols>::Type(derived(), rows() - CRows, 0);"},
{"lineNum":"  509","line":"}"},
{"lineNum":"  510","line":""},
{"lineNum":"  511","line":"/// \\returns an expression of a bottom-left corner of \\c *this."},
{"lineNum":"  512","line":"///"},
{"lineNum":"  513","line":"/// \\tparam CRows number of rows in corner as specified at compile-time"},
{"lineNum":"  514","line":"/// \\tparam CCols number of columns in corner as specified at compile-time"},
{"lineNum":"  515","line":"/// \\param  cRows number of rows in corner as specified at run-time"},
{"lineNum":"  516","line":"/// \\param  cCols number of columns in corner as specified at run-time"},
{"lineNum":"  517","line":"///"},
{"lineNum":"  518","line":"/// This function is mainly useful for corners where the number of rows is specified at compile-time"},
{"lineNum":"  519","line":"/// and the number of columns is specified at run-time, or vice versa. The compile-time and run-time"},
{"lineNum":"  520","line":"/// information should not contradict. In other words, \\a cRows should equal \\a CRows unless"},
{"lineNum":"  521","line":"/// \\a CRows is \\a Dynamic, and the same for the number of columns."},
{"lineNum":"  522","line":"///"},
{"lineNum":"  523","line":"/// Example: \\include MatrixBase_template_int_int_bottomLeftCorner_int_int.cpp"},
{"lineNum":"  524","line":"/// Output: \\verbinclude MatrixBase_template_int_int_bottomLeftCorner_int_int.out"},
{"lineNum":"  525","line":"///"},
{"lineNum":"  526","line":"EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL"},
{"lineNum":"  527","line":"///"},
{"lineNum":"  528","line":"/// \\sa class Block"},
{"lineNum":"  529","line":"///"},
{"lineNum":"  530","line":"template<int CRows, int CCols>"},
{"lineNum":"  531","line":"EIGEN_STRONG_INLINE"},
{"lineNum":"  532","line":"typename FixedBlockXpr<CRows,CCols>::Type bottomLeftCorner(Index cRows, Index cCols)"},
{"lineNum":"  533","line":"{"},
{"lineNum":"  534","line":"  return typename FixedBlockXpr<CRows,CCols>::Type(derived(), rows() - cRows, 0, cRows, cCols);"},
{"lineNum":"  535","line":"}"},
{"lineNum":"  536","line":""},
{"lineNum":"  537","line":"/// This is the const version of bottomLeftCorner<int, int>(Index, Index)."},
{"lineNum":"  538","line":"template<int CRows, int CCols>"},
{"lineNum":"  539","line":"EIGEN_STRONG_INLINE"},
{"lineNum":"  540","line":"const typename ConstFixedBlockXpr<CRows,CCols>::Type bottomLeftCorner(Index cRows, Index cCols) const"},
{"lineNum":"  541","line":"{"},
{"lineNum":"  542","line":"  return typename ConstFixedBlockXpr<CRows,CCols>::Type(derived(), rows() - cRows, 0, cRows, cCols);"},
{"lineNum":"  543","line":"}"},
{"lineNum":"  544","line":""},
{"lineNum":"  545","line":""},
{"lineNum":"  546","line":""},
{"lineNum":"  547","line":"/// \\returns a block consisting of the top rows of \\c *this."},
{"lineNum":"  548","line":"///"},
{"lineNum":"  549","line":"/// \\param n the number of rows in the block"},
{"lineNum":"  550","line":"/// \\tparam NRowsType the type of the value handling the number of rows in the block, typically Index."},
{"lineNum":"  551","line":"///"},
{"lineNum":"  552","line":"/// Example: \\include MatrixBase_topRows_int.cpp"},
{"lineNum":"  553","line":"/// Output: \\verbinclude MatrixBase_topRows_int.out"},
{"lineNum":"  554","line":"///"},
{"lineNum":"  555","line":"/// The number of rows \\a n can also be specified at compile-time by passing Eigen::fix<N>,"},
{"lineNum":"  556","line":"/// or Eigen::fix<N>(n) as arguments."},
{"lineNum":"  557","line":"/// See \\link block(Index,Index,NRowsType,NColsType) block() \\endlink for the details."},
{"lineNum":"  558","line":"///"},
{"lineNum":"  559","line":"EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF(row-major)"},
{"lineNum":"  560","line":"///"},
{"lineNum":"  561","line":"/// \\sa block(Index,Index,NRowsType,NColsType), class Block"},
{"lineNum":"  562","line":"///"},
{"lineNum":"  563","line":"template<typename NRowsType>"},
{"lineNum":"  564","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  565","line":"#ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"  566","line":"typename NRowsBlockXpr<internal::get_fixed_value<NRowsType>::value>::Type"},
{"lineNum":"  567","line":"#else"},
{"lineNum":"  568","line":"typename NRowsBlockXpr<...>::Type"},
{"lineNum":"  569","line":"#endif"},
{"lineNum":"  570","line":"topRows(NRowsType n)"},
{"lineNum":"  571","line":"{"},
{"lineNum":"  572","line":"  return typename NRowsBlockXpr<internal::get_fixed_value<NRowsType>::value>::Type"},
{"lineNum":"  573","line":"            (derived(), 0, 0, internal::get_runtime_value(n), cols());"},
{"lineNum":"  574","line":"}"},
{"lineNum":"  575","line":""},
{"lineNum":"  576","line":"/// This is the const version of topRows(NRowsType)."},
{"lineNum":"  577","line":"template<typename NRowsType>"},
{"lineNum":"  578","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  579","line":"#ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"  580","line":"const typename ConstNRowsBlockXpr<internal::get_fixed_value<NRowsType>::value>::Type"},
{"lineNum":"  581","line":"#else"},
{"lineNum":"  582","line":"const typename ConstNRowsBlockXpr<...>::Type"},
{"lineNum":"  583","line":"#endif"},
{"lineNum":"  584","line":"topRows(NRowsType n) const"},
{"lineNum":"  585","line":"{"},
{"lineNum":"  586","line":"  return typename ConstNRowsBlockXpr<internal::get_fixed_value<NRowsType>::value>::Type"},
{"lineNum":"  587","line":"            (derived(), 0, 0, internal::get_runtime_value(n), cols());"},
{"lineNum":"  588","line":"}"},
{"lineNum":"  589","line":""},
{"lineNum":"  590","line":"/// \\returns a block consisting of the top rows of \\c *this."},
{"lineNum":"  591","line":"///"},
{"lineNum":"  592","line":"/// \\tparam N the number of rows in the block as specified at compile-time"},
{"lineNum":"  593","line":"/// \\param n the number of rows in the block as specified at run-time"},
{"lineNum":"  594","line":"///"},
{"lineNum":"  595","line":"/// The compile-time and run-time information should not contradict. In other words,"},
{"lineNum":"  596","line":"/// \\a n should equal \\a N unless \\a N is \\a Dynamic."},
{"lineNum":"  597","line":"///"},
{"lineNum":"  598","line":"/// Example: \\include MatrixBase_template_int_topRows.cpp"},
{"lineNum":"  599","line":"/// Output: \\verbinclude MatrixBase_template_int_topRows.out"},
{"lineNum":"  600","line":"///"},
{"lineNum":"  601","line":"EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF(row-major)"},
{"lineNum":"  602","line":"///"},
{"lineNum":"  603","line":"/// \\sa block(Index,Index,NRowsType,NColsType), class Block"},
{"lineNum":"  604","line":"///"},
{"lineNum":"  605","line":"template<int N>"},
{"lineNum":"  606","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  607","line":"typename NRowsBlockXpr<N>::Type topRows(Index n = N)"},
{"lineNum":"  608","line":"{"},
{"lineNum":"  609","line":"  return typename NRowsBlockXpr<N>::Type(derived(), 0, 0, n, cols());"},
{"lineNum":"  610","line":"}"},
{"lineNum":"  611","line":""},
{"lineNum":"  612","line":"/// This is the const version of topRows<int>()."},
{"lineNum":"  613","line":"template<int N>"},
{"lineNum":"  614","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  615","line":"typename ConstNRowsBlockXpr<N>::Type topRows(Index n = N) const"},
{"lineNum":"  616","line":"{"},
{"lineNum":"  617","line":"  return typename ConstNRowsBlockXpr<N>::Type(derived(), 0, 0, n, cols());"},
{"lineNum":"  618","line":"}"},
{"lineNum":"  619","line":""},
{"lineNum":"  620","line":""},
{"lineNum":"  621","line":""},
{"lineNum":"  622","line":"/// \\returns a block consisting of the bottom rows of \\c *this."},
{"lineNum":"  623","line":"///"},
{"lineNum":"  624","line":"/// \\param n the number of rows in the block"},
{"lineNum":"  625","line":"/// \\tparam NRowsType the type of the value handling the number of rows in the block, typically Index."},
{"lineNum":"  626","line":"///"},
{"lineNum":"  627","line":"/// Example: \\include MatrixBase_bottomRows_int.cpp"},
{"lineNum":"  628","line":"/// Output: \\verbinclude MatrixBase_bottomRows_int.out"},
{"lineNum":"  629","line":"///"},
{"lineNum":"  630","line":"/// The number of rows \\a n can also be specified at compile-time by passing Eigen::fix<N>,"},
{"lineNum":"  631","line":"/// or Eigen::fix<N>(n) as arguments."},
{"lineNum":"  632","line":"/// See \\link block(Index,Index,NRowsType,NColsType) block() \\endlink for the details."},
{"lineNum":"  633","line":"///"},
{"lineNum":"  634","line":"EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF(row-major)"},
{"lineNum":"  635","line":"///"},
{"lineNum":"  636","line":"/// \\sa block(Index,Index,NRowsType,NColsType), class Block"},
{"lineNum":"  637","line":"///"},
{"lineNum":"  638","line":"template<typename NRowsType>"},
{"lineNum":"  639","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  640","line":"#ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"  641","line":"typename NRowsBlockXpr<internal::get_fixed_value<NRowsType>::value>::Type"},
{"lineNum":"  642","line":"#else"},
{"lineNum":"  643","line":"typename NRowsBlockXpr<...>::Type"},
{"lineNum":"  644","line":"#endif"},
{"lineNum":"  645","line":"bottomRows(NRowsType n)"},
{"lineNum":"  646","line":"{"},
{"lineNum":"  647","line":"  return typename NRowsBlockXpr<internal::get_fixed_value<NRowsType>::value>::Type"},
{"lineNum":"  648","line":"            (derived(), rows() - internal::get_runtime_value(n), 0, internal::get_runtime_value(n), cols());"},
{"lineNum":"  649","line":"}"},
{"lineNum":"  650","line":""},
{"lineNum":"  651","line":"/// This is the const version of bottomRows(NRowsType)."},
{"lineNum":"  652","line":"template<typename NRowsType>"},
{"lineNum":"  653","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  654","line":"#ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"  655","line":"const typename ConstNRowsBlockXpr<internal::get_fixed_value<NRowsType>::value>::Type"},
{"lineNum":"  656","line":"#else"},
{"lineNum":"  657","line":"const typename ConstNRowsBlockXpr<...>::Type"},
{"lineNum":"  658","line":"#endif"},
{"lineNum":"  659","line":"bottomRows(NRowsType n) const"},
{"lineNum":"  660","line":"{"},
{"lineNum":"  661","line":"  return typename ConstNRowsBlockXpr<internal::get_fixed_value<NRowsType>::value>::Type"},
{"lineNum":"  662","line":"            (derived(), rows() - internal::get_runtime_value(n), 0, internal::get_runtime_value(n), cols());"},
{"lineNum":"  663","line":"}"},
{"lineNum":"  664","line":""},
{"lineNum":"  665","line":"/// \\returns a block consisting of the bottom rows of \\c *this."},
{"lineNum":"  666","line":"///"},
{"lineNum":"  667","line":"/// \\tparam N the number of rows in the block as specified at compile-time"},
{"lineNum":"  668","line":"/// \\param n the number of rows in the block as specified at run-time"},
{"lineNum":"  669","line":"///"},
{"lineNum":"  670","line":"/// The compile-time and run-time information should not contradict. In other words,"},
{"lineNum":"  671","line":"/// \\a n should equal \\a N unless \\a N is \\a Dynamic."},
{"lineNum":"  672","line":"///"},
{"lineNum":"  673","line":"/// Example: \\include MatrixBase_template_int_bottomRows.cpp"},
{"lineNum":"  674","line":"/// Output: \\verbinclude MatrixBase_template_int_bottomRows.out"},
{"lineNum":"  675","line":"///"},
{"lineNum":"  676","line":"EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF(row-major)"},
{"lineNum":"  677","line":"///"},
{"lineNum":"  678","line":"/// \\sa block(Index,Index,NRowsType,NColsType), class Block"},
{"lineNum":"  679","line":"///"},
{"lineNum":"  680","line":"template<int N>"},
{"lineNum":"  681","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  682","line":"typename NRowsBlockXpr<N>::Type bottomRows(Index n = N)"},
{"lineNum":"  683","line":"{"},
{"lineNum":"  684","line":"  return typename NRowsBlockXpr<N>::Type(derived(), rows() - n, 0, n, cols());"},
{"lineNum":"  685","line":"}"},
{"lineNum":"  686","line":""},
{"lineNum":"  687","line":"/// This is the const version of bottomRows<int>()."},
{"lineNum":"  688","line":"template<int N>"},
{"lineNum":"  689","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  690","line":"typename ConstNRowsBlockXpr<N>::Type bottomRows(Index n = N) const"},
{"lineNum":"  691","line":"{"},
{"lineNum":"  692","line":"  return typename ConstNRowsBlockXpr<N>::Type(derived(), rows() - n, 0, n, cols());"},
{"lineNum":"  693","line":"}"},
{"lineNum":"  694","line":""},
{"lineNum":"  695","line":""},
{"lineNum":"  696","line":""},
{"lineNum":"  697","line":"/// \\returns a block consisting of a range of rows of \\c *this."},
{"lineNum":"  698","line":"///"},
{"lineNum":"  699","line":"/// \\param startRow the index of the first row in the block"},
{"lineNum":"  700","line":"/// \\param n the number of rows in the block"},
{"lineNum":"  701","line":"/// \\tparam NRowsType the type of the value handling the number of rows in the block, typically Index."},
{"lineNum":"  702","line":"///"},
{"lineNum":"  703","line":"/// Example: \\include DenseBase_middleRows_int.cpp"},
{"lineNum":"  704","line":"/// Output: \\verbinclude DenseBase_middleRows_int.out"},
{"lineNum":"  705","line":"///"},
{"lineNum":"  706","line":"/// The number of rows \\a n can also be specified at compile-time by passing Eigen::fix<N>,"},
{"lineNum":"  707","line":"/// or Eigen::fix<N>(n) as arguments."},
{"lineNum":"  708","line":"/// See \\link block(Index,Index,NRowsType,NColsType) block() \\endlink for the details."},
{"lineNum":"  709","line":"///"},
{"lineNum":"  710","line":"EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF(row-major)"},
{"lineNum":"  711","line":"///"},
{"lineNum":"  712","line":"/// \\sa block(Index,Index,NRowsType,NColsType), class Block"},
{"lineNum":"  713","line":"///"},
{"lineNum":"  714","line":"template<typename NRowsType>"},
{"lineNum":"  715","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  716","line":"#ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"  717","line":"typename NRowsBlockXpr<internal::get_fixed_value<NRowsType>::value>::Type"},
{"lineNum":"  718","line":"#else"},
{"lineNum":"  719","line":"typename NRowsBlockXpr<...>::Type"},
{"lineNum":"  720","line":"#endif"},
{"lineNum":"  721","line":"middleRows(Index startRow, NRowsType n)"},
{"lineNum":"  722","line":"{"},
{"lineNum":"  723","line":"  return typename NRowsBlockXpr<internal::get_fixed_value<NRowsType>::value>::Type"},
{"lineNum":"  724","line":"            (derived(), startRow, 0, internal::get_runtime_value(n), cols());"},
{"lineNum":"  725","line":"}"},
{"lineNum":"  726","line":""},
{"lineNum":"  727","line":"/// This is the const version of middleRows(Index,NRowsType)."},
{"lineNum":"  728","line":"template<typename NRowsType>"},
{"lineNum":"  729","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  730","line":"#ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"  731","line":"const typename ConstNRowsBlockXpr<internal::get_fixed_value<NRowsType>::value>::Type"},
{"lineNum":"  732","line":"#else"},
{"lineNum":"  733","line":"const typename ConstNRowsBlockXpr<...>::Type"},
{"lineNum":"  734","line":"#endif"},
{"lineNum":"  735","line":"middleRows(Index startRow, NRowsType n) const"},
{"lineNum":"  736","line":"{"},
{"lineNum":"  737","line":"  return typename ConstNRowsBlockXpr<internal::get_fixed_value<NRowsType>::value>::Type"},
{"lineNum":"  738","line":"            (derived(), startRow, 0, internal::get_runtime_value(n), cols());"},
{"lineNum":"  739","line":"}"},
{"lineNum":"  740","line":""},
{"lineNum":"  741","line":"/// \\returns a block consisting of a range of rows of \\c *this."},
{"lineNum":"  742","line":"///"},
{"lineNum":"  743","line":"/// \\tparam N the number of rows in the block as specified at compile-time"},
{"lineNum":"  744","line":"/// \\param startRow the index of the first row in the block"},
{"lineNum":"  745","line":"/// \\param n the number of rows in the block as specified at run-time"},
{"lineNum":"  746","line":"///"},
{"lineNum":"  747","line":"/// The compile-time and run-time information should not contradict. In other words,"},
{"lineNum":"  748","line":"/// \\a n should equal \\a N unless \\a N is \\a Dynamic."},
{"lineNum":"  749","line":"///"},
{"lineNum":"  750","line":"/// Example: \\include DenseBase_template_int_middleRows.cpp"},
{"lineNum":"  751","line":"/// Output: \\verbinclude DenseBase_template_int_middleRows.out"},
{"lineNum":"  752","line":"///"},
{"lineNum":"  753","line":"EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF(row-major)"},
{"lineNum":"  754","line":"///"},
{"lineNum":"  755","line":"/// \\sa block(Index,Index,NRowsType,NColsType), class Block"},
{"lineNum":"  756","line":"///"},
{"lineNum":"  757","line":"template<int N>"},
{"lineNum":"  758","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  759","line":"typename NRowsBlockXpr<N>::Type middleRows(Index startRow, Index n = N)"},
{"lineNum":"  760","line":"{"},
{"lineNum":"  761","line":"  return typename NRowsBlockXpr<N>::Type(derived(), startRow, 0, n, cols());"},
{"lineNum":"  762","line":"}"},
{"lineNum":"  763","line":""},
{"lineNum":"  764","line":"/// This is the const version of middleRows<int>()."},
{"lineNum":"  765","line":"template<int N>"},
{"lineNum":"  766","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  767","line":"typename ConstNRowsBlockXpr<N>::Type middleRows(Index startRow, Index n = N) const"},
{"lineNum":"  768","line":"{"},
{"lineNum":"  769","line":"  return typename ConstNRowsBlockXpr<N>::Type(derived(), startRow, 0, n, cols());"},
{"lineNum":"  770","line":"}"},
{"lineNum":"  771","line":""},
{"lineNum":"  772","line":""},
{"lineNum":"  773","line":""},
{"lineNum":"  774","line":"/// \\returns a block consisting of the left columns of \\c *this."},
{"lineNum":"  775","line":"///"},
{"lineNum":"  776","line":"/// \\param n the number of columns in the block"},
{"lineNum":"  777","line":"/// \\tparam NColsType the type of the value handling the number of columns in the block, typically Index."},
{"lineNum":"  778","line":"///"},
{"lineNum":"  779","line":"/// Example: \\include MatrixBase_leftCols_int.cpp"},
{"lineNum":"  780","line":"/// Output: \\verbinclude MatrixBase_leftCols_int.out"},
{"lineNum":"  781","line":"///"},
{"lineNum":"  782","line":"/// The number of columns \\a n can also be specified at compile-time by passing Eigen::fix<N>,"},
{"lineNum":"  783","line":"/// or Eigen::fix<N>(n) as arguments."},
{"lineNum":"  784","line":"/// See \\link block(Index,Index,NRowsType,NColsType) block() \\endlink for the details."},
{"lineNum":"  785","line":"///"},
{"lineNum":"  786","line":"EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF(column-major)"},
{"lineNum":"  787","line":"///"},
{"lineNum":"  788","line":"/// \\sa block(Index,Index,NRowsType,NColsType), class Block"},
{"lineNum":"  789","line":"///"},
{"lineNum":"  790","line":"template<typename NColsType>"},
{"lineNum":"  791","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  792","line":"#ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"  793","line":"typename NColsBlockXpr<internal::get_fixed_value<NColsType>::value>::Type"},
{"lineNum":"  794","line":"#else"},
{"lineNum":"  795","line":"typename NColsBlockXpr<...>::Type"},
{"lineNum":"  796","line":"#endif"},
{"lineNum":"  797","line":"leftCols(NColsType n)"},
{"lineNum":"  798","line":"{"},
{"lineNum":"  799","line":"  return typename NColsBlockXpr<internal::get_fixed_value<NColsType>::value>::Type"},
{"lineNum":"  800","line":"            (derived(), 0, 0, rows(), internal::get_runtime_value(n));"},
{"lineNum":"  801","line":"}"},
{"lineNum":"  802","line":""},
{"lineNum":"  803","line":"/// This is the const version of leftCols(NColsType)."},
{"lineNum":"  804","line":"template<typename NColsType>"},
{"lineNum":"  805","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  806","line":"#ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"  807","line":"const typename ConstNColsBlockXpr<internal::get_fixed_value<NColsType>::value>::Type"},
{"lineNum":"  808","line":"#else"},
{"lineNum":"  809","line":"const typename ConstNColsBlockXpr<...>::Type"},
{"lineNum":"  810","line":"#endif"},
{"lineNum":"  811","line":"leftCols(NColsType n) const"},
{"lineNum":"  812","line":"{"},
{"lineNum":"  813","line":"  return typename ConstNColsBlockXpr<internal::get_fixed_value<NColsType>::value>::Type"},
{"lineNum":"  814","line":"            (derived(), 0, 0, rows(), internal::get_runtime_value(n));"},
{"lineNum":"  815","line":"}"},
{"lineNum":"  816","line":""},
{"lineNum":"  817","line":"/// \\returns a block consisting of the left columns of \\c *this."},
{"lineNum":"  818","line":"///"},
{"lineNum":"  819","line":"/// \\tparam N the number of columns in the block as specified at compile-time"},
{"lineNum":"  820","line":"/// \\param n the number of columns in the block as specified at run-time"},
{"lineNum":"  821","line":"///"},
{"lineNum":"  822","line":"/// The compile-time and run-time information should not contradict. In other words,"},
{"lineNum":"  823","line":"/// \\a n should equal \\a N unless \\a N is \\a Dynamic."},
{"lineNum":"  824","line":"///"},
{"lineNum":"  825","line":"/// Example: \\include MatrixBase_template_int_leftCols.cpp"},
{"lineNum":"  826","line":"/// Output: \\verbinclude MatrixBase_template_int_leftCols.out"},
{"lineNum":"  827","line":"///"},
{"lineNum":"  828","line":"EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF(column-major)"},
{"lineNum":"  829","line":"///"},
{"lineNum":"  830","line":"/// \\sa block(Index,Index,NRowsType,NColsType), class Block"},
{"lineNum":"  831","line":"///"},
{"lineNum":"  832","line":"template<int N>"},
{"lineNum":"  833","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  834","line":"typename NColsBlockXpr<N>::Type leftCols(Index n = N)"},
{"lineNum":"  835","line":"{"},
{"lineNum":"  836","line":"  return typename NColsBlockXpr<N>::Type(derived(), 0, 0, rows(), n);"},
{"lineNum":"  837","line":"}"},
{"lineNum":"  838","line":""},
{"lineNum":"  839","line":"/// This is the const version of leftCols<int>()."},
{"lineNum":"  840","line":"template<int N>"},
{"lineNum":"  841","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  842","line":"typename ConstNColsBlockXpr<N>::Type leftCols(Index n = N) const"},
{"lineNum":"  843","line":"{"},
{"lineNum":"  844","line":"  return typename ConstNColsBlockXpr<N>::Type(derived(), 0, 0, rows(), n);"},
{"lineNum":"  845","line":"}"},
{"lineNum":"  846","line":""},
{"lineNum":"  847","line":""},
{"lineNum":"  848","line":""},
{"lineNum":"  849","line":"/// \\returns a block consisting of the right columns of \\c *this."},
{"lineNum":"  850","line":"///"},
{"lineNum":"  851","line":"/// \\param n the number of columns in the block"},
{"lineNum":"  852","line":"/// \\tparam NColsType the type of the value handling the number of columns in the block, typically Index."},
{"lineNum":"  853","line":"///"},
{"lineNum":"  854","line":"/// Example: \\include MatrixBase_rightCols_int.cpp"},
{"lineNum":"  855","line":"/// Output: \\verbinclude MatrixBase_rightCols_int.out"},
{"lineNum":"  856","line":"///"},
{"lineNum":"  857","line":"/// The number of columns \\a n can also be specified at compile-time by passing Eigen::fix<N>,"},
{"lineNum":"  858","line":"/// or Eigen::fix<N>(n) as arguments."},
{"lineNum":"  859","line":"/// See \\link block(Index,Index,NRowsType,NColsType) block() \\endlink for the details."},
{"lineNum":"  860","line":"///"},
{"lineNum":"  861","line":"EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF(column-major)"},
{"lineNum":"  862","line":"///"},
{"lineNum":"  863","line":"/// \\sa block(Index,Index,NRowsType,NColsType), class Block"},
{"lineNum":"  864","line":"///"},
{"lineNum":"  865","line":"template<typename NColsType>"},
{"lineNum":"  866","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  867","line":"#ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"  868","line":"typename NColsBlockXpr<internal::get_fixed_value<NColsType>::value>::Type"},
{"lineNum":"  869","line":"#else"},
{"lineNum":"  870","line":"typename NColsBlockXpr<...>::Type"},
{"lineNum":"  871","line":"#endif"},
{"lineNum":"  872","line":"rightCols(NColsType n)"},
{"lineNum":"  873","line":"{"},
{"lineNum":"  874","line":"  return typename NColsBlockXpr<internal::get_fixed_value<NColsType>::value>::Type"},
{"lineNum":"  875","line":"            (derived(), 0, cols() - internal::get_runtime_value(n), rows(), internal::get_runtime_value(n));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  876","line":"}"},
{"lineNum":"  877","line":""},
{"lineNum":"  878","line":"/// This is the const version of rightCols(NColsType)."},
{"lineNum":"  879","line":"template<typename NColsType>"},
{"lineNum":"  880","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  881","line":"#ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"  882","line":"const typename ConstNColsBlockXpr<internal::get_fixed_value<NColsType>::value>::Type"},
{"lineNum":"  883","line":"#else"},
{"lineNum":"  884","line":"const typename ConstNColsBlockXpr<...>::Type"},
{"lineNum":"  885","line":"#endif"},
{"lineNum":"  886","line":"rightCols(NColsType n) const"},
{"lineNum":"  887","line":"{"},
{"lineNum":"  888","line":"  return typename ConstNColsBlockXpr<internal::get_fixed_value<NColsType>::value>::Type"},
{"lineNum":"  889","line":"            (derived(), 0, cols() - internal::get_runtime_value(n), rows(), internal::get_runtime_value(n));"},
{"lineNum":"  890","line":"}"},
{"lineNum":"  891","line":""},
{"lineNum":"  892","line":"/// \\returns a block consisting of the right columns of \\c *this."},
{"lineNum":"  893","line":"///"},
{"lineNum":"  894","line":"/// \\tparam N the number of columns in the block as specified at compile-time"},
{"lineNum":"  895","line":"/// \\param n the number of columns in the block as specified at run-time"},
{"lineNum":"  896","line":"///"},
{"lineNum":"  897","line":"/// The compile-time and run-time information should not contradict. In other words,"},
{"lineNum":"  898","line":"/// \\a n should equal \\a N unless \\a N is \\a Dynamic."},
{"lineNum":"  899","line":"///"},
{"lineNum":"  900","line":"/// Example: \\include MatrixBase_template_int_rightCols.cpp"},
{"lineNum":"  901","line":"/// Output: \\verbinclude MatrixBase_template_int_rightCols.out"},
{"lineNum":"  902","line":"///"},
{"lineNum":"  903","line":"EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF(column-major)"},
{"lineNum":"  904","line":"///"},
{"lineNum":"  905","line":"/// \\sa block(Index,Index,NRowsType,NColsType), class Block"},
{"lineNum":"  906","line":"///"},
{"lineNum":"  907","line":"template<int N>"},
{"lineNum":"  908","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  909","line":"typename NColsBlockXpr<N>::Type rightCols(Index n = N)"},
{"lineNum":"  910","line":"{"},
{"lineNum":"  911","line":"  return typename NColsBlockXpr<N>::Type(derived(), 0, cols() - n, rows(), n);"},
{"lineNum":"  912","line":"}"},
{"lineNum":"  913","line":""},
{"lineNum":"  914","line":"/// This is the const version of rightCols<int>()."},
{"lineNum":"  915","line":"template<int N>"},
{"lineNum":"  916","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  917","line":"typename ConstNColsBlockXpr<N>::Type rightCols(Index n = N) const"},
{"lineNum":"  918","line":"{"},
{"lineNum":"  919","line":"  return typename ConstNColsBlockXpr<N>::Type(derived(), 0, cols() - n, rows(), n);"},
{"lineNum":"  920","line":"}"},
{"lineNum":"  921","line":""},
{"lineNum":"  922","line":""},
{"lineNum":"  923","line":""},
{"lineNum":"  924","line":"/// \\returns a block consisting of a range of columns of \\c *this."},
{"lineNum":"  925","line":"///"},
{"lineNum":"  926","line":"/// \\param startCol the index of the first column in the block"},
{"lineNum":"  927","line":"/// \\param numCols the number of columns in the block"},
{"lineNum":"  928","line":"/// \\tparam NColsType the type of the value handling the number of columns in the block, typically Index."},
{"lineNum":"  929","line":"///"},
{"lineNum":"  930","line":"/// Example: \\include DenseBase_middleCols_int.cpp"},
{"lineNum":"  931","line":"/// Output: \\verbinclude DenseBase_middleCols_int.out"},
{"lineNum":"  932","line":"///"},
{"lineNum":"  933","line":"/// The number of columns \\a n can also be specified at compile-time by passing Eigen::fix<N>,"},
{"lineNum":"  934","line":"/// or Eigen::fix<N>(n) as arguments."},
{"lineNum":"  935","line":"/// See \\link block(Index,Index,NRowsType,NColsType) block() \\endlink for the details."},
{"lineNum":"  936","line":"///"},
{"lineNum":"  937","line":"EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF(column-major)"},
{"lineNum":"  938","line":"///"},
{"lineNum":"  939","line":"/// \\sa block(Index,Index,NRowsType,NColsType), class Block"},
{"lineNum":"  940","line":"///"},
{"lineNum":"  941","line":"template<typename NColsType>"},
{"lineNum":"  942","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  943","line":"#ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"  944","line":"typename NColsBlockXpr<internal::get_fixed_value<NColsType>::value>::Type"},
{"lineNum":"  945","line":"#else"},
{"lineNum":"  946","line":"typename NColsBlockXpr<...>::Type"},
{"lineNum":"  947","line":"#endif"},
{"lineNum":"  948","line":"middleCols(Index startCol, NColsType numCols)"},
{"lineNum":"  949","line":"{"},
{"lineNum":"  950","line":"  return typename NColsBlockXpr<internal::get_fixed_value<NColsType>::value>::Type"},
{"lineNum":"  951","line":"            (derived(), 0, startCol, rows(), internal::get_runtime_value(numCols));"},
{"lineNum":"  952","line":"}"},
{"lineNum":"  953","line":""},
{"lineNum":"  954","line":"/// This is the const version of middleCols(Index,NColsType)."},
{"lineNum":"  955","line":"template<typename NColsType>"},
{"lineNum":"  956","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  957","line":"#ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"  958","line":"const typename ConstNColsBlockXpr<internal::get_fixed_value<NColsType>::value>::Type"},
{"lineNum":"  959","line":"#else"},
{"lineNum":"  960","line":"const typename ConstNColsBlockXpr<...>::Type"},
{"lineNum":"  961","line":"#endif"},
{"lineNum":"  962","line":"middleCols(Index startCol, NColsType numCols) const"},
{"lineNum":"  963","line":"{"},
{"lineNum":"  964","line":"  return typename ConstNColsBlockXpr<internal::get_fixed_value<NColsType>::value>::Type"},
{"lineNum":"  965","line":"            (derived(), 0, startCol, rows(), internal::get_runtime_value(numCols));"},
{"lineNum":"  966","line":"}"},
{"lineNum":"  967","line":""},
{"lineNum":"  968","line":"/// \\returns a block consisting of a range of columns of \\c *this."},
{"lineNum":"  969","line":"///"},
{"lineNum":"  970","line":"/// \\tparam N the number of columns in the block as specified at compile-time"},
{"lineNum":"  971","line":"/// \\param startCol the index of the first column in the block"},
{"lineNum":"  972","line":"/// \\param n the number of columns in the block as specified at run-time"},
{"lineNum":"  973","line":"///"},
{"lineNum":"  974","line":"/// The compile-time and run-time information should not contradict. In other words,"},
{"lineNum":"  975","line":"/// \\a n should equal \\a N unless \\a N is \\a Dynamic."},
{"lineNum":"  976","line":"///"},
{"lineNum":"  977","line":"/// Example: \\include DenseBase_template_int_middleCols.cpp"},
{"lineNum":"  978","line":"/// Output: \\verbinclude DenseBase_template_int_middleCols.out"},
{"lineNum":"  979","line":"///"},
{"lineNum":"  980","line":"EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF(column-major)"},
{"lineNum":"  981","line":"///"},
{"lineNum":"  982","line":"/// \\sa block(Index,Index,NRowsType,NColsType), class Block"},
{"lineNum":"  983","line":"///"},
{"lineNum":"  984","line":"template<int N>"},
{"lineNum":"  985","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  986","line":"typename NColsBlockXpr<N>::Type middleCols(Index startCol, Index n = N)"},
{"lineNum":"  987","line":"{"},
{"lineNum":"  988","line":"  return typename NColsBlockXpr<N>::Type(derived(), 0, startCol, rows(), n);"},
{"lineNum":"  989","line":"}"},
{"lineNum":"  990","line":""},
{"lineNum":"  991","line":"/// This is the const version of middleCols<int>()."},
{"lineNum":"  992","line":"template<int N>"},
{"lineNum":"  993","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  994","line":"typename ConstNColsBlockXpr<N>::Type middleCols(Index startCol, Index n = N) const"},
{"lineNum":"  995","line":"{"},
{"lineNum":"  996","line":"  return typename ConstNColsBlockXpr<N>::Type(derived(), 0, startCol, rows(), n);"},
{"lineNum":"  997","line":"}"},
{"lineNum":"  998","line":""},
{"lineNum":"  999","line":""},
{"lineNum":" 1000","line":""},
{"lineNum":" 1001","line":"/// \\returns a fixed-size expression of a block of \\c *this."},
{"lineNum":" 1002","line":"///"},
{"lineNum":" 1003","line":"/// The template parameters \\a NRows and \\a NCols are the number of"},
{"lineNum":" 1004","line":"/// rows and columns in the block."},
{"lineNum":" 1005","line":"///"},
{"lineNum":" 1006","line":"/// \\param startRow the first row in the block"},
{"lineNum":" 1007","line":"/// \\param startCol the first column in the block"},
{"lineNum":" 1008","line":"///"},
{"lineNum":" 1009","line":"/// Example: \\include MatrixBase_block_int_int.cpp"},
{"lineNum":" 1010","line":"/// Output: \\verbinclude MatrixBase_block_int_int.out"},
{"lineNum":" 1011","line":"///"},
{"lineNum":" 1012","line":"/// \\note The usage of of this overload is discouraged from %Eigen 3.4, better used the generic"},
{"lineNum":" 1013","line":"/// block(Index,Index,NRowsType,NColsType), here is the one-to-one equivalence:"},
{"lineNum":" 1014","line":"/// \\code"},
{"lineNum":" 1015","line":"/// mat.template block<NRows,NCols>(i,j)  <-->  mat.block(i,j,fix<NRows>,fix<NCols>)"},
{"lineNum":" 1016","line":"/// \\endcode"},
{"lineNum":" 1017","line":"///"},
{"lineNum":" 1018","line":"/// \\note since block is a templated member, the keyword template has to be used"},
{"lineNum":" 1019","line":"/// if the matrix type is also a template parameter: \\code m.template block<3,3>(1,1); \\endcode"},
{"lineNum":" 1020","line":"///"},
{"lineNum":" 1021","line":"EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL"},
{"lineNum":" 1022","line":"///"},
{"lineNum":" 1023","line":"/// \\sa block(Index,Index,NRowsType,NColsType), class Block"},
{"lineNum":" 1024","line":"///"},
{"lineNum":" 1025","line":"template<int NRows, int NCols>"},
{"lineNum":" 1026","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1027","line":"typename FixedBlockXpr<NRows,NCols>::Type block(Index startRow, Index startCol)"},
{"lineNum":" 1028","line":"{"},
{"lineNum":" 1029","line":"  return typename FixedBlockXpr<NRows,NCols>::Type(derived(), startRow, startCol);"},
{"lineNum":" 1030","line":"}"},
{"lineNum":" 1031","line":""},
{"lineNum":" 1032","line":"/// This is the const version of block<>(Index, Index). */"},
{"lineNum":" 1033","line":"template<int NRows, int NCols>"},
{"lineNum":" 1034","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1035","line":"const typename ConstFixedBlockXpr<NRows,NCols>::Type block(Index startRow, Index startCol) const"},
{"lineNum":" 1036","line":"{"},
{"lineNum":" 1037","line":"  return typename ConstFixedBlockXpr<NRows,NCols>::Type(derived(), startRow, startCol);"},
{"lineNum":" 1038","line":"}"},
{"lineNum":" 1039","line":""},
{"lineNum":" 1040","line":"/// \\returns an expression of a block of \\c *this."},
{"lineNum":" 1041","line":"///"},
{"lineNum":" 1042","line":"/// \\tparam NRows number of rows in block as specified at compile-time"},
{"lineNum":" 1043","line":"/// \\tparam NCols number of columns in block as specified at compile-time"},
{"lineNum":" 1044","line":"/// \\param  startRow  the first row in the block"},
{"lineNum":" 1045","line":"/// \\param  startCol  the first column in the block"},
{"lineNum":" 1046","line":"/// \\param  blockRows number of rows in block as specified at run-time"},
{"lineNum":" 1047","line":"/// \\param  blockCols number of columns in block as specified at run-time"},
{"lineNum":" 1048","line":"///"},
{"lineNum":" 1049","line":"/// This function is mainly useful for blocks where the number of rows is specified at compile-time"},
{"lineNum":" 1050","line":"/// and the number of columns is specified at run-time, or vice versa. The compile-time and run-time"},
{"lineNum":" 1051","line":"/// information should not contradict. In other words, \\a blockRows should equal \\a NRows unless"},
{"lineNum":" 1052","line":"/// \\a NRows is \\a Dynamic, and the same for the number of columns."},
{"lineNum":" 1053","line":"///"},
{"lineNum":" 1054","line":"/// Example: \\include MatrixBase_template_int_int_block_int_int_int_int.cpp"},
{"lineNum":" 1055","line":"/// Output: \\verbinclude MatrixBase_template_int_int_block_int_int_int_int.out"},
{"lineNum":" 1056","line":"///"},
{"lineNum":" 1057","line":"/// \\note The usage of of this overload is discouraged from %Eigen 3.4, better used the generic"},
{"lineNum":" 1058","line":"/// block(Index,Index,NRowsType,NColsType), here is the one-to-one complete equivalence:"},
{"lineNum":" 1059","line":"/// \\code"},
{"lineNum":" 1060","line":"/// mat.template block<NRows,NCols>(i,j,rows,cols)     <-->  mat.block(i,j,fix<NRows>(rows),fix<NCols>(cols))"},
{"lineNum":" 1061","line":"/// \\endcode"},
{"lineNum":" 1062","line":"/// If we known that, e.g., NRows==Dynamic and NCols!=Dynamic, then the equivalence becomes:"},
{"lineNum":" 1063","line":"/// \\code"},
{"lineNum":" 1064","line":"/// mat.template block<Dynamic,NCols>(i,j,rows,NCols)  <-->  mat.block(i,j,rows,fix<NCols>)"},
{"lineNum":" 1065","line":"/// \\endcode"},
{"lineNum":" 1066","line":"///"},
{"lineNum":" 1067","line":"EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL"},
{"lineNum":" 1068","line":"///"},
{"lineNum":" 1069","line":"/// \\sa block(Index,Index,NRowsType,NColsType), class Block"},
{"lineNum":" 1070","line":"///"},
{"lineNum":" 1071","line":"template<int NRows, int NCols>"},
{"lineNum":" 1072","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1073","line":"typename FixedBlockXpr<NRows,NCols>::Type block(Index startRow, Index startCol,"},
{"lineNum":" 1074","line":"                                                  Index blockRows, Index blockCols)"},
{"lineNum":" 1075","line":"{"},
{"lineNum":" 1076","line":"  return typename FixedBlockXpr<NRows,NCols>::Type(derived(), startRow, startCol, blockRows, blockCols);"},
{"lineNum":" 1077","line":"}"},
{"lineNum":" 1078","line":""},
{"lineNum":" 1079","line":"/// This is the const version of block<>(Index, Index, Index, Index)."},
{"lineNum":" 1080","line":"template<int NRows, int NCols>"},
{"lineNum":" 1081","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1082","line":"const typename ConstFixedBlockXpr<NRows,NCols>::Type block(Index startRow, Index startCol,"},
{"lineNum":" 1083","line":"                                                              Index blockRows, Index blockCols) const"},
{"lineNum":" 1084","line":"{"},
{"lineNum":" 1085","line":"  return typename ConstFixedBlockXpr<NRows,NCols>::Type(derived(), startRow, startCol, blockRows, blockCols);"},
{"lineNum":" 1086","line":"}"},
{"lineNum":" 1087","line":""},
{"lineNum":" 1088","line":"/// \\returns an expression of the \\a i-th column of \\c *this. Note that the numbering starts at 0."},
{"lineNum":" 1089","line":"///"},
{"lineNum":" 1090","line":"/// Example: \\include MatrixBase_col.cpp"},
{"lineNum":" 1091","line":"/// Output: \\verbinclude MatrixBase_col.out"},
{"lineNum":" 1092","line":"///"},
{"lineNum":" 1093","line":"EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF(column-major)"},
{"lineNum":" 1094","line":"/**"},
{"lineNum":" 1095","line":"  * \\sa row(), class Block */"},
{"lineNum":" 1096","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1097","line":"ColXpr col(Index i)"},
{"lineNum":" 1098","line":"{"},
{"lineNum":" 1099","line":"  return ColXpr(derived(), i);"},
{"lineNum":" 1100","line":"}"},
{"lineNum":" 1101","line":""},
{"lineNum":" 1102","line":"/// This is the const version of col()."},
{"lineNum":" 1103","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1104","line":"ConstColXpr col(Index i) const"},
{"lineNum":" 1105","line":"{"},
{"lineNum":" 1106","line":"  return ConstColXpr(derived(), i);"},
{"lineNum":" 1107","line":"}"},
{"lineNum":" 1108","line":""},
{"lineNum":" 1109","line":"/// \\returns an expression of the \\a i-th row of \\c *this. Note that the numbering starts at 0."},
{"lineNum":" 1110","line":"///"},
{"lineNum":" 1111","line":"/// Example: \\include MatrixBase_row.cpp"},
{"lineNum":" 1112","line":"/// Output: \\verbinclude MatrixBase_row.out"},
{"lineNum":" 1113","line":"///"},
{"lineNum":" 1114","line":"EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF(row-major)"},
{"lineNum":" 1115","line":"/**"},
{"lineNum":" 1116","line":"  * \\sa col(), class Block */"},
{"lineNum":" 1117","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1118","line":"RowXpr row(Index i)"},
{"lineNum":" 1119","line":"{"},
{"lineNum":" 1120","line":"  return RowXpr(derived(), i);"},
{"lineNum":" 1121","line":"}"},
{"lineNum":" 1122","line":""},
{"lineNum":" 1123","line":"/// This is the const version of row(). */"},
{"lineNum":" 1124","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1125","line":"ConstRowXpr row(Index i) const"},
{"lineNum":" 1126","line":"{"},
{"lineNum":" 1127","line":"  return ConstRowXpr(derived(), i);"},
{"lineNum":" 1128","line":"}"},
{"lineNum":" 1129","line":""},
{"lineNum":" 1130","line":"/// \\returns an expression of a segment (i.e. a vector block) in \\c *this with either dynamic or fixed sizes."},
{"lineNum":" 1131","line":"///"},
{"lineNum":" 1132","line":"/// \\only_for_vectors"},
{"lineNum":" 1133","line":"///"},
{"lineNum":" 1134","line":"/// \\param start the first coefficient in the segment"},
{"lineNum":" 1135","line":"/// \\param n the number of coefficients in the segment"},
{"lineNum":" 1136","line":"/// \\tparam NType the type of the value handling the number of coefficients in the segment, typically Index."},
{"lineNum":" 1137","line":"///"},
{"lineNum":" 1138","line":"/// Example: \\include MatrixBase_segment_int_int.cpp"},
{"lineNum":" 1139","line":"/// Output: \\verbinclude MatrixBase_segment_int_int.out"},
{"lineNum":" 1140","line":"///"},
{"lineNum":" 1141","line":"/// The number of coefficients \\a n can also be specified at compile-time by passing Eigen::fix<N>,"},
{"lineNum":" 1142","line":"/// or Eigen::fix<N>(n) as arguments."},
{"lineNum":" 1143","line":"/// See \\link block(Index,Index,NRowsType,NColsType) block() \\endlink for the details."},
{"lineNum":" 1144","line":"///"},
{"lineNum":" 1145","line":"/// \\note Even in the case that the returned expression has dynamic size, in the case"},
{"lineNum":" 1146","line":"/// when it is applied to a fixed-size vector, it inherits a fixed maximal size,"},
{"lineNum":" 1147","line":"/// which means that evaluating it does not cause a dynamic memory allocation."},
{"lineNum":" 1148","line":"///"},
{"lineNum":" 1149","line":"/// \\sa block(Index,Index,NRowsType,NColsType), fix<N>, fix<N>(int), class Block"},
{"lineNum":" 1150","line":"///"},
{"lineNum":" 1151","line":"template<typename NType>"},
{"lineNum":" 1152","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1153","line":"#ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":" 1154","line":"typename FixedSegmentReturnType<internal::get_fixed_value<NType>::value>::Type"},
{"lineNum":" 1155","line":"#else"},
{"lineNum":" 1156","line":"typename FixedSegmentReturnType<...>::Type"},
{"lineNum":" 1157","line":"#endif"},
{"lineNum":" 1158","line":"segment(Index start, NType n)"},
{"lineNum":" 1159","line":"{"},
{"lineNum":" 1160","line":"  EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived)"},
{"lineNum":" 1161","line":"  return typename FixedSegmentReturnType<internal::get_fixed_value<NType>::value>::Type"},
{"lineNum":" 1162","line":"            (derived(), start, internal::get_runtime_value(n));"},
{"lineNum":" 1163","line":"}"},
{"lineNum":" 1164","line":""},
{"lineNum":" 1165","line":""},
{"lineNum":" 1166","line":"/// This is the const version of segment(Index,NType)."},
{"lineNum":" 1167","line":"template<typename NType>"},
{"lineNum":" 1168","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1169","line":"#ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":" 1170","line":"const typename ConstFixedSegmentReturnType<internal::get_fixed_value<NType>::value>::Type"},
{"lineNum":" 1171","line":"#else"},
{"lineNum":" 1172","line":"const typename ConstFixedSegmentReturnType<...>::Type"},
{"lineNum":" 1173","line":"#endif"},
{"lineNum":" 1174","line":"segment(Index start, NType n) const"},
{"lineNum":" 1175","line":"{"},
{"lineNum":" 1176","line":"  EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived)"},
{"lineNum":" 1177","line":"  return typename ConstFixedSegmentReturnType<internal::get_fixed_value<NType>::value>::Type"},
{"lineNum":" 1178","line":"            (derived(), start, internal::get_runtime_value(n));"},
{"lineNum":" 1179","line":"}"},
{"lineNum":" 1180","line":""},
{"lineNum":" 1181","line":"/// \\returns an expression of the first coefficients of \\c *this with either dynamic or fixed sizes."},
{"lineNum":" 1182","line":"///"},
{"lineNum":" 1183","line":"/// \\only_for_vectors"},
{"lineNum":" 1184","line":"///"},
{"lineNum":" 1185","line":"/// \\param n the number of coefficients in the segment"},
{"lineNum":" 1186","line":"/// \\tparam NType the type of the value handling the number of coefficients in the segment, typically Index."},
{"lineNum":" 1187","line":"///"},
{"lineNum":" 1188","line":"/// Example: \\include MatrixBase_start_int.cpp"},
{"lineNum":" 1189","line":"/// Output: \\verbinclude MatrixBase_start_int.out"},
{"lineNum":" 1190","line":"///"},
{"lineNum":" 1191","line":"/// The number of coefficients \\a n can also be specified at compile-time by passing Eigen::fix<N>,"},
{"lineNum":" 1192","line":"/// or Eigen::fix<N>(n) as arguments."},
{"lineNum":" 1193","line":"/// See \\link block(Index,Index,NRowsType,NColsType) block() \\endlink for the details."},
{"lineNum":" 1194","line":"///"},
{"lineNum":" 1195","line":"/// \\note Even in the case that the returned expression has dynamic size, in the case"},
{"lineNum":" 1196","line":"/// when it is applied to a fixed-size vector, it inherits a fixed maximal size,"},
{"lineNum":" 1197","line":"/// which means that evaluating it does not cause a dynamic memory allocation."},
{"lineNum":" 1198","line":"///"},
{"lineNum":" 1199","line":"/// \\sa class Block, block(Index,Index)"},
{"lineNum":" 1200","line":"///"},
{"lineNum":" 1201","line":"template<typename NType>"},
{"lineNum":" 1202","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1203","line":"#ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":" 1204","line":"typename FixedSegmentReturnType<internal::get_fixed_value<NType>::value>::Type"},
{"lineNum":" 1205","line":"#else"},
{"lineNum":" 1206","line":"typename FixedSegmentReturnType<...>::Type"},
{"lineNum":" 1207","line":"#endif"},
{"lineNum":" 1208","line":"head(NType n)"},
{"lineNum":" 1209","line":"{"},
{"lineNum":" 1210","line":"  EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived)"},
{"lineNum":" 1211","line":"  return typename FixedSegmentReturnType<internal::get_fixed_value<NType>::value>::Type"},
{"lineNum":" 1212","line":"              (derived(), 0, internal::get_runtime_value(n));"},
{"lineNum":" 1213","line":"}"},
{"lineNum":" 1214","line":""},
{"lineNum":" 1215","line":"/// This is the const version of head(NType)."},
{"lineNum":" 1216","line":"template<typename NType>"},
{"lineNum":" 1217","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1218","line":"#ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":" 1219","line":"const typename ConstFixedSegmentReturnType<internal::get_fixed_value<NType>::value>::Type"},
{"lineNum":" 1220","line":"#else"},
{"lineNum":" 1221","line":"const typename ConstFixedSegmentReturnType<...>::Type"},
{"lineNum":" 1222","line":"#endif"},
{"lineNum":" 1223","line":"head(NType n) const"},
{"lineNum":" 1224","line":"{"},
{"lineNum":" 1225","line":"  EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived)"},
{"lineNum":" 1226","line":"  return typename ConstFixedSegmentReturnType<internal::get_fixed_value<NType>::value>::Type"},
{"lineNum":" 1227","line":"            (derived(), 0, internal::get_runtime_value(n));"},
{"lineNum":" 1228","line":"}"},
{"lineNum":" 1229","line":""},
{"lineNum":" 1230","line":"/// \\returns an expression of a last coefficients of \\c *this with either dynamic or fixed sizes."},
{"lineNum":" 1231","line":"///"},
{"lineNum":" 1232","line":"/// \\only_for_vectors"},
{"lineNum":" 1233","line":"///"},
{"lineNum":" 1234","line":"/// \\param n the number of coefficients in the segment"},
{"lineNum":" 1235","line":"/// \\tparam NType the type of the value handling the number of coefficients in the segment, typically Index."},
{"lineNum":" 1236","line":"///"},
{"lineNum":" 1237","line":"/// Example: \\include MatrixBase_end_int.cpp"},
{"lineNum":" 1238","line":"/// Output: \\verbinclude MatrixBase_end_int.out"},
{"lineNum":" 1239","line":"///"},
{"lineNum":" 1240","line":"/// The number of coefficients \\a n can also be specified at compile-time by passing Eigen::fix<N>,"},
{"lineNum":" 1241","line":"/// or Eigen::fix<N>(n) as arguments."},
{"lineNum":" 1242","line":"/// See \\link block(Index,Index,NRowsType,NColsType) block() \\endlink for the details."},
{"lineNum":" 1243","line":"///"},
{"lineNum":" 1244","line":"/// \\note Even in the case that the returned expression has dynamic size, in the case"},
{"lineNum":" 1245","line":"/// when it is applied to a fixed-size vector, it inherits a fixed maximal size,"},
{"lineNum":" 1246","line":"/// which means that evaluating it does not cause a dynamic memory allocation."},
{"lineNum":" 1247","line":"///"},
{"lineNum":" 1248","line":"/// \\sa class Block, block(Index,Index)"},
{"lineNum":" 1249","line":"///"},
{"lineNum":" 1250","line":"template<typename NType>"},
{"lineNum":" 1251","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1252","line":"#ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":" 1253","line":"typename FixedSegmentReturnType<internal::get_fixed_value<NType>::value>::Type"},
{"lineNum":" 1254","line":"#else"},
{"lineNum":" 1255","line":"typename FixedSegmentReturnType<...>::Type"},
{"lineNum":" 1256","line":"#endif"},
{"lineNum":" 1257","line":"tail(NType n)"},
{"lineNum":" 1258","line":"{"},
{"lineNum":" 1259","line":"  EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived)"},
{"lineNum":" 1260","line":"  return typename FixedSegmentReturnType<internal::get_fixed_value<NType>::value>::Type"},
{"lineNum":" 1261","line":"            (derived(), this->size() - internal::get_runtime_value(n), internal::get_runtime_value(n));","class":"lineNoCov","hits":"0","possible_hits":"25",},
{"lineNum":" 1262","line":"}"},
{"lineNum":" 1263","line":""},
{"lineNum":" 1264","line":"/// This is the const version of tail(Index)."},
{"lineNum":" 1265","line":"template<typename NType>"},
{"lineNum":" 1266","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1267","line":"#ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":" 1268","line":"const typename ConstFixedSegmentReturnType<internal::get_fixed_value<NType>::value>::Type"},
{"lineNum":" 1269","line":"#else"},
{"lineNum":" 1270","line":"const typename ConstFixedSegmentReturnType<...>::Type"},
{"lineNum":" 1271","line":"#endif"},
{"lineNum":" 1272","line":"tail(NType n) const"},
{"lineNum":" 1273","line":"{"},
{"lineNum":" 1274","line":"  EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived)"},
{"lineNum":" 1275","line":"  return typename ConstFixedSegmentReturnType<internal::get_fixed_value<NType>::value>::Type"},
{"lineNum":" 1276","line":"            (derived(), this->size() - internal::get_runtime_value(n), internal::get_runtime_value(n));"},
{"lineNum":" 1277","line":"}"},
{"lineNum":" 1278","line":""},
{"lineNum":" 1279","line":"/// \\returns a fixed-size expression of a segment (i.e. a vector block) in \\c *this"},
{"lineNum":" 1280","line":"///"},
{"lineNum":" 1281","line":"/// \\only_for_vectors"},
{"lineNum":" 1282","line":"///"},
{"lineNum":" 1283","line":"/// \\tparam N the number of coefficients in the segment as specified at compile-time"},
{"lineNum":" 1284","line":"/// \\param start the index of the first element in the segment"},
{"lineNum":" 1285","line":"/// \\param n the number of coefficients in the segment as specified at compile-time"},
{"lineNum":" 1286","line":"///"},
{"lineNum":" 1287","line":"/// The compile-time and run-time information should not contradict. In other words,"},
{"lineNum":" 1288","line":"/// \\a n should equal \\a N unless \\a N is \\a Dynamic."},
{"lineNum":" 1289","line":"///"},
{"lineNum":" 1290","line":"/// Example: \\include MatrixBase_template_int_segment.cpp"},
{"lineNum":" 1291","line":"/// Output: \\verbinclude MatrixBase_template_int_segment.out"},
{"lineNum":" 1292","line":"///"},
{"lineNum":" 1293","line":"/// \\sa segment(Index,NType), class Block"},
{"lineNum":" 1294","line":"///"},
{"lineNum":" 1295","line":"template<int N>"},
{"lineNum":" 1296","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1297","line":"typename FixedSegmentReturnType<N>::Type segment(Index start, Index n = N)"},
{"lineNum":" 1298","line":"{"},
{"lineNum":" 1299","line":"  EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived)"},
{"lineNum":" 1300","line":"  return typename FixedSegmentReturnType<N>::Type(derived(), start, n);"},
{"lineNum":" 1301","line":"}"},
{"lineNum":" 1302","line":""},
{"lineNum":" 1303","line":"/// This is the const version of segment<int>(Index)."},
{"lineNum":" 1304","line":"template<int N>"},
{"lineNum":" 1305","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1306","line":"typename ConstFixedSegmentReturnType<N>::Type segment(Index start, Index n = N) const"},
{"lineNum":" 1307","line":"{"},
{"lineNum":" 1308","line":"  EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived)"},
{"lineNum":" 1309","line":"  return typename ConstFixedSegmentReturnType<N>::Type(derived(), start, n);"},
{"lineNum":" 1310","line":"}"},
{"lineNum":" 1311","line":""},
{"lineNum":" 1312","line":"/// \\returns a fixed-size expression of the first coefficients of \\c *this."},
{"lineNum":" 1313","line":"///"},
{"lineNum":" 1314","line":"/// \\only_for_vectors"},
{"lineNum":" 1315","line":"///"},
{"lineNum":" 1316","line":"/// \\tparam N the number of coefficients in the segment as specified at compile-time"},
{"lineNum":" 1317","line":"/// \\param  n the number of coefficients in the segment as specified at run-time"},
{"lineNum":" 1318","line":"///"},
{"lineNum":" 1319","line":"/// The compile-time and run-time information should not contradict. In other words,"},
{"lineNum":" 1320","line":"/// \\a n should equal \\a N unless \\a N is \\a Dynamic."},
{"lineNum":" 1321","line":"///"},
{"lineNum":" 1322","line":"/// Example: \\include MatrixBase_template_int_start.cpp"},
{"lineNum":" 1323","line":"/// Output: \\verbinclude MatrixBase_template_int_start.out"},
{"lineNum":" 1324","line":"///"},
{"lineNum":" 1325","line":"/// \\sa head(NType), class Block"},
{"lineNum":" 1326","line":"///"},
{"lineNum":" 1327","line":"template<int N>"},
{"lineNum":" 1328","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1329","line":"typename FixedSegmentReturnType<N>::Type head(Index n = N)"},
{"lineNum":" 1330","line":"{"},
{"lineNum":" 1331","line":"  EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived)"},
{"lineNum":" 1332","line":"  return typename FixedSegmentReturnType<N>::Type(derived(), 0, n);"},
{"lineNum":" 1333","line":"}"},
{"lineNum":" 1334","line":""},
{"lineNum":" 1335","line":"/// This is the const version of head<int>()."},
{"lineNum":" 1336","line":"template<int N>"},
{"lineNum":" 1337","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1338","line":"typename ConstFixedSegmentReturnType<N>::Type head(Index n = N) const"},
{"lineNum":" 1339","line":"{"},
{"lineNum":" 1340","line":"  EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived)"},
{"lineNum":" 1341","line":"  return typename ConstFixedSegmentReturnType<N>::Type(derived(), 0, n);"},
{"lineNum":" 1342","line":"}"},
{"lineNum":" 1343","line":""},
{"lineNum":" 1344","line":"/// \\returns a fixed-size expression of the last coefficients of \\c *this."},
{"lineNum":" 1345","line":"///"},
{"lineNum":" 1346","line":"/// \\only_for_vectors"},
{"lineNum":" 1347","line":"///"},
{"lineNum":" 1348","line":"/// \\tparam N the number of coefficients in the segment as specified at compile-time"},
{"lineNum":" 1349","line":"/// \\param  n the number of coefficients in the segment as specified at run-time"},
{"lineNum":" 1350","line":"///"},
{"lineNum":" 1351","line":"/// The compile-time and run-time information should not contradict. In other words,"},
{"lineNum":" 1352","line":"/// \\a n should equal \\a N unless \\a N is \\a Dynamic."},
{"lineNum":" 1353","line":"///"},
{"lineNum":" 1354","line":"/// Example: \\include MatrixBase_template_int_end.cpp"},
{"lineNum":" 1355","line":"/// Output: \\verbinclude MatrixBase_template_int_end.out"},
{"lineNum":" 1356","line":"///"},
{"lineNum":" 1357","line":"/// \\sa tail(NType), class Block"},
{"lineNum":" 1358","line":"///"},
{"lineNum":" 1359","line":"template<int N>"},
{"lineNum":" 1360","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1361","line":"typename FixedSegmentReturnType<N>::Type tail(Index n = N)"},
{"lineNum":" 1362","line":"{"},
{"lineNum":" 1363","line":"  EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived)"},
{"lineNum":" 1364","line":"  return typename FixedSegmentReturnType<N>::Type(derived(), size() - n);"},
{"lineNum":" 1365","line":"}"},
{"lineNum":" 1366","line":""},
{"lineNum":" 1367","line":"/// This is the const version of tail<int>."},
{"lineNum":" 1368","line":"template<int N>"},
{"lineNum":" 1369","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1370","line":"typename ConstFixedSegmentReturnType<N>::Type tail(Index n = N) const"},
{"lineNum":" 1371","line":"{"},
{"lineNum":" 1372","line":"  EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived)"},
{"lineNum":" 1373","line":"  return typename ConstFixedSegmentReturnType<N>::Type(derived(), size() - n);"},
{"lineNum":" 1374","line":"}"},
{"lineNum":" 1375","line":""},
{"lineNum":" 1376","line":"/// \\returns the \\a outer -th column (resp. row) of the matrix \\c *this if \\c *this"},
{"lineNum":" 1377","line":"/// is col-major (resp. row-major)."},
{"lineNum":" 1378","line":"///"},
{"lineNum":" 1379","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1380","line":"InnerVectorReturnType innerVector(Index outer)"},
{"lineNum":" 1381","line":"{ return InnerVectorReturnType(derived(), outer); }"},
{"lineNum":" 1382","line":""},
{"lineNum":" 1383","line":"/// \\returns the \\a outer -th column (resp. row) of the matrix \\c *this if \\c *this"},
{"lineNum":" 1384","line":"/// is col-major (resp. row-major). Read-only."},
{"lineNum":" 1385","line":"///"},
{"lineNum":" 1386","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1387","line":"const ConstInnerVectorReturnType innerVector(Index outer) const"},
{"lineNum":" 1388","line":"{ return ConstInnerVectorReturnType(derived(), outer); }"},
{"lineNum":" 1389","line":""},
{"lineNum":" 1390","line":"/// \\returns the \\a outer -th column (resp. row) of the matrix \\c *this if \\c *this"},
{"lineNum":" 1391","line":"/// is col-major (resp. row-major)."},
{"lineNum":" 1392","line":"///"},
{"lineNum":" 1393","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1394","line":"InnerVectorsReturnType"},
{"lineNum":" 1395","line":"innerVectors(Index outerStart, Index outerSize)"},
{"lineNum":" 1396","line":"{"},
{"lineNum":" 1397","line":"  return Block<Derived,Dynamic,Dynamic,true>(derived(),"},
{"lineNum":" 1398","line":"                                             IsRowMajor ? outerStart : 0, IsRowMajor ? 0 : outerStart,"},
{"lineNum":" 1399","line":"                                             IsRowMajor ? outerSize : rows(), IsRowMajor ? cols() : outerSize);"},
{"lineNum":" 1400","line":""},
{"lineNum":" 1401","line":"}"},
{"lineNum":" 1402","line":""},
{"lineNum":" 1403","line":"/// \\returns the \\a outer -th column (resp. row) of the matrix \\c *this if \\c *this"},
{"lineNum":" 1404","line":"/// is col-major (resp. row-major). Read-only."},
{"lineNum":" 1405","line":"///"},
{"lineNum":" 1406","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1407","line":"const ConstInnerVectorsReturnType"},
{"lineNum":" 1408","line":"innerVectors(Index outerStart, Index outerSize) const"},
{"lineNum":" 1409","line":"{"},
{"lineNum":" 1410","line":"  return Block<const Derived,Dynamic,Dynamic,true>(derived(),"},
{"lineNum":" 1411","line":"                                                  IsRowMajor ? outerStart : 0, IsRowMajor ? 0 : outerStart,"},
{"lineNum":" 1412","line":"                                                  IsRowMajor ? outerSize : rows(), IsRowMajor ? cols() : outerSize);"},
{"lineNum":" 1413","line":""},
{"lineNum":" 1414","line":"}"},
{"lineNum":" 1415","line":""},
{"lineNum":" 1416","line":"/** \\returns the i-th subvector (column or vector) according to the \\c Direction"},
{"lineNum":" 1417","line":"  * \\sa subVectors()"},
{"lineNum":" 1418","line":"  */"},
{"lineNum":" 1419","line":"template<DirectionType Direction>"},
{"lineNum":" 1420","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1421","line":"typename internal::conditional<Direction==Vertical,ColXpr,RowXpr>::type"},
{"lineNum":" 1422","line":"subVector(Index i)"},
{"lineNum":" 1423","line":"{"},
{"lineNum":" 1424","line":"  return typename internal::conditional<Direction==Vertical,ColXpr,RowXpr>::type(derived(),i);"},
{"lineNum":" 1425","line":"}"},
{"lineNum":" 1426","line":""},
{"lineNum":" 1427","line":"/** This is the const version of subVector(Index) */"},
{"lineNum":" 1428","line":"template<DirectionType Direction>"},
{"lineNum":" 1429","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":" 1430","line":"typename internal::conditional<Direction==Vertical,ConstColXpr,ConstRowXpr>::type"},
{"lineNum":" 1431","line":"subVector(Index i) const"},
{"lineNum":" 1432","line":"{"},
{"lineNum":" 1433","line":"  return typename internal::conditional<Direction==Vertical,ConstColXpr,ConstRowXpr>::type(derived(),i);"},
{"lineNum":" 1434","line":"}"},
{"lineNum":" 1435","line":""},
{"lineNum":" 1436","line":"/** \\returns the number of subvectors (rows or columns) in the direction \\c Direction"},
{"lineNum":" 1437","line":"  * \\sa subVector(Index)"},
{"lineNum":" 1438","line":"  */"},
{"lineNum":" 1439","line":"template<DirectionType Direction>"},
{"lineNum":" 1440","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR"},
{"lineNum":" 1441","line":"Index subVectors() const"},
{"lineNum":" 1442","line":"{ return (Direction==Vertical)?cols():rows(); }"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 4, "covered" : 0,};
var merged_data = [];
