var data = {lines:[
{"lineNum":"    1","line":"// -*- C++ -*-"},
{"lineNum":"    2","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions."},
{"lineNum":"    5","line":"// See https://llvm.org/LICENSE.txt for license information."},
{"lineNum":"    6","line":"// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef _LIBCPP___MEMORY_ALLOCATOR_H"},
{"lineNum":"   11","line":"#define _LIBCPP___MEMORY_ALLOCATOR_H"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"#include <__config>"},
{"lineNum":"   14","line":"#include <__memory/allocator_traits.h>"},
{"lineNum":"   15","line":"#include <__utility/forward.h>"},
{"lineNum":"   16","line":"#include <cstddef>"},
{"lineNum":"   17","line":"#include <new>"},
{"lineNum":"   18","line":"#include <stdexcept>"},
{"lineNum":"   19","line":"#include <type_traits>"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"},
{"lineNum":"   22","line":"#pragma GCC system_header"},
{"lineNum":"   23","line":"#endif"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"_LIBCPP_PUSH_MACROS"},
{"lineNum":"   26","line":"#include <__undef_macros>"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"_LIBCPP_BEGIN_NAMESPACE_STD"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"template <class _Tp> class allocator;"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"#if _LIBCPP_STD_VER <= 17"},
{"lineNum":"   33","line":"template <>"},
{"lineNum":"   34","line":"class _LIBCPP_TEMPLATE_VIS allocator<void>"},
{"lineNum":"   35","line":"{"},
{"lineNum":"   36","line":"public:"},
{"lineNum":"   37","line":"    _LIBCPP_DEPRECATED_IN_CXX17 typedef void*             pointer;"},
{"lineNum":"   38","line":"    _LIBCPP_DEPRECATED_IN_CXX17 typedef const void*       const_pointer;"},
{"lineNum":"   39","line":"    _LIBCPP_DEPRECATED_IN_CXX17 typedef void              value_type;"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"    template <class _Up> struct _LIBCPP_DEPRECATED_IN_CXX17 rebind {typedef allocator<_Up> other;};"},
{"lineNum":"   42","line":"};"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"template <>"},
{"lineNum":"   45","line":"class _LIBCPP_TEMPLATE_VIS allocator<const void>"},
{"lineNum":"   46","line":"{"},
{"lineNum":"   47","line":"public:"},
{"lineNum":"   48","line":"    _LIBCPP_DEPRECATED_IN_CXX17 typedef const void*       pointer;"},
{"lineNum":"   49","line":"    _LIBCPP_DEPRECATED_IN_CXX17 typedef const void*       const_pointer;"},
{"lineNum":"   50","line":"    _LIBCPP_DEPRECATED_IN_CXX17 typedef const void        value_type;"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"    template <class _Up> struct _LIBCPP_DEPRECATED_IN_CXX17 rebind {typedef allocator<_Up> other;};"},
{"lineNum":"   53","line":"};"},
{"lineNum":"   54","line":"#endif"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"// This class provides a non-trivial default constructor to the class that derives from it"},
{"lineNum":"   57","line":"// if the condition is satisfied."},
{"lineNum":"   58","line":"//"},
{"lineNum":"   59","line":"// The second template parameter exists to allow giving a unique type to __non_trivial_if,"},
{"lineNum":"   60","line":"// which makes it possible to avoid breaking the ABI when making this a base class of an"},
{"lineNum":"   61","line":"// existing class. Without that, imagine we have classes D1 and D2, both of which used to"},
{"lineNum":"   62","line":"// have no base classes, but which now derive from __non_trivial_if. The layout of a class"},
{"lineNum":"   63","line":"// that inherits from both D1 and D2 will change because the two __non_trivial_if base"},
{"lineNum":"   64","line":"// classes are not allowed to share the same address."},
{"lineNum":"   65","line":"//"},
{"lineNum":"   66","line":"// By making those __non_trivial_if base classes unique, we work around this problem and"},
{"lineNum":"   67","line":"// it is safe to start deriving from __non_trivial_if in existing classes."},
{"lineNum":"   68","line":"template <bool _Cond, class _Unique>"},
{"lineNum":"   69","line":"struct __non_trivial_if { };"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"template <class _Unique>"},
{"lineNum":"   72","line":"struct __non_trivial_if<true, _Unique> {"},
{"lineNum":"   73","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"   74","line":"    _LIBCPP_CONSTEXPR __non_trivial_if() _NOEXCEPT { }"},
{"lineNum":"   75","line":"};"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"// allocator"},
{"lineNum":"   78","line":"//"},
{"lineNum":"   79","line":"// Note: For ABI compatibility between C++20 and previous standards, we make"},
{"lineNum":"   80","line":"//       allocator<void> trivial in C++20."},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"template <class _Tp>"},
{"lineNum":"   83","line":"class _LIBCPP_TEMPLATE_VIS allocator"},
{"lineNum":"   84","line":"    : private __non_trivial_if<!is_void<_Tp>::value, allocator<_Tp> >"},
{"lineNum":"   85","line":"{"},
{"lineNum":"   86","line":"public:"},
{"lineNum":"   87","line":"    typedef size_t      size_type;"},
{"lineNum":"   88","line":"    typedef ptrdiff_t   difference_type;"},
{"lineNum":"   89","line":"    typedef _Tp         value_type;"},
{"lineNum":"   90","line":"    typedef true_type   propagate_on_container_move_assignment;"},
{"lineNum":"   91","line":"    typedef true_type   is_always_equal;"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"   94","line":"    allocator() _NOEXCEPT _LIBCPP_DEFAULT"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"    template <class _Up>"},
{"lineNum":"   97","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"   98","line":"    allocator(const allocator<_Up>&) _NOEXCEPT { }"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  101","line":"    _Tp* allocate(size_t __n) {"},
{"lineNum":"  102","line":"        if (__n > allocator_traits<allocator>::max_size(*this))","class":"linePartCov","hits":"6","order":"139","possible_hits":"388",},
{"lineNum":"  103","line":"            __throw_length_error(\"allocator<T>::allocate(size_t n)\"","class":"lineNoCov","hits":"0","possible_hits":"400",},
{"lineNum":"  104","line":"                                 \" \'n\' exceeds maximum supported size\");"},
{"lineNum":"  105","line":"        if (__libcpp_is_constant_evaluated()) {"},
{"lineNum":"  106","line":"            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));"},
{"lineNum":"  107","line":"        } else {"},
{"lineNum":"  108","line":"            return static_cast<_Tp*>(_VSTD::__libcpp_allocate(__n * sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp)));","class":"linePartCov","hits":"7","order":"140","possible_hits":"436",},
{"lineNum":"  109","line":"        }"},
{"lineNum":"  110","line":"    }"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  113","line":"    void deallocate(_Tp* __p, size_t __n) _NOEXCEPT {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  114","line":"        if (__libcpp_is_constant_evaluated()) {"},
{"lineNum":"  115","line":"            ::operator delete(__p);"},
{"lineNum":"  116","line":"        } else {"},
{"lineNum":"  117","line":"            _VSTD::__libcpp_deallocate((void*)__p, __n * sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp));"},
{"lineNum":"  118","line":"        }"},
{"lineNum":"  119","line":"    }"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"    // C++20 Removed members"},
{"lineNum":"  122","line":"#if _LIBCPP_STD_VER <= 17 || defined(_LIBCPP_ENABLE_CXX20_REMOVED_ALLOCATOR_MEMBERS)"},
{"lineNum":"  123","line":"    _LIBCPP_DEPRECATED_IN_CXX17 typedef _Tp*       pointer;"},
{"lineNum":"  124","line":"    _LIBCPP_DEPRECATED_IN_CXX17 typedef const _Tp* const_pointer;"},
{"lineNum":"  125","line":"    _LIBCPP_DEPRECATED_IN_CXX17 typedef _Tp&       reference;"},
{"lineNum":"  126","line":"    _LIBCPP_DEPRECATED_IN_CXX17 typedef const _Tp& const_reference;"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"    template <class _Up>"},
{"lineNum":"  129","line":"    struct _LIBCPP_DEPRECATED_IN_CXX17 rebind {"},
{"lineNum":"  130","line":"        typedef allocator<_Up> other;"},
{"lineNum":"  131","line":"    };"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  134","line":"    pointer address(reference __x) const _NOEXCEPT {"},
{"lineNum":"  135","line":"        return _VSTD::addressof(__x);"},
{"lineNum":"  136","line":"    }"},
{"lineNum":"  137","line":"    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  138","line":"    const_pointer address(const_reference __x) const _NOEXCEPT {"},
{"lineNum":"  139","line":"        return _VSTD::addressof(__x);"},
{"lineNum":"  140","line":"    }"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY _LIBCPP_DEPRECATED_IN_CXX17"},
{"lineNum":"  143","line":"    _Tp* allocate(size_t __n, const void*) {"},
{"lineNum":"  144","line":"        return allocate(__n);"},
{"lineNum":"  145","line":"    }"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY size_type max_size() const _NOEXCEPT {"},
{"lineNum":"  148","line":"        return size_type(~0) / sizeof(_Tp);"},
{"lineNum":"  149","line":"    }"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"    template <class _Up, class... _Args>"},
{"lineNum":"  152","line":"    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  153","line":"    void construct(_Up* __p, _Args&&... __args) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  154","line":"        ::new ((void*)__p) _Up(_VSTD::forward<_Args>(__args)...);","class":"linePartCov","hits":"6","order":"210","possible_hits":"947",},
{"lineNum":"  155","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  158","line":"    void destroy(pointer __p) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  159","line":"        __p->~_Tp();","class":"lineNoCov","hits":"0","possible_hits":"32",},
{"lineNum":"  160","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  161","line":"#endif"},
{"lineNum":"  162","line":"};"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"template <class _Tp>"},
{"lineNum":"  165","line":"class _LIBCPP_TEMPLATE_VIS allocator<const _Tp>"},
{"lineNum":"  166","line":"    : private __non_trivial_if<!is_void<_Tp>::value, allocator<const _Tp> >"},
{"lineNum":"  167","line":"{"},
{"lineNum":"  168","line":"public:"},
{"lineNum":"  169","line":"    typedef size_t      size_type;"},
{"lineNum":"  170","line":"    typedef ptrdiff_t   difference_type;"},
{"lineNum":"  171","line":"    typedef const _Tp   value_type;"},
{"lineNum":"  172","line":"    typedef true_type   propagate_on_container_move_assignment;"},
{"lineNum":"  173","line":"    typedef true_type   is_always_equal;"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  176","line":"    allocator() _NOEXCEPT _LIBCPP_DEFAULT"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"    template <class _Up>"},
{"lineNum":"  179","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  180","line":"    allocator(const allocator<_Up>&) _NOEXCEPT { }"},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  183","line":"    const _Tp* allocate(size_t __n) {"},
{"lineNum":"  184","line":"        if (__n > allocator_traits<allocator>::max_size(*this))"},
{"lineNum":"  185","line":"            __throw_length_error(\"allocator<const T>::allocate(size_t n)\""},
{"lineNum":"  186","line":"                                 \" \'n\' exceeds maximum supported size\");"},
{"lineNum":"  187","line":"        if (__libcpp_is_constant_evaluated()) {"},
{"lineNum":"  188","line":"            return static_cast<const _Tp*>(::operator new(__n * sizeof(_Tp)));"},
{"lineNum":"  189","line":"        } else {"},
{"lineNum":"  190","line":"            return static_cast<const _Tp*>(_VSTD::__libcpp_allocate(__n * sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp)));"},
{"lineNum":"  191","line":"        }"},
{"lineNum":"  192","line":"    }"},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  195","line":"    void deallocate(const _Tp* __p, size_t __n) {"},
{"lineNum":"  196","line":"        if (__libcpp_is_constant_evaluated()) {"},
{"lineNum":"  197","line":"            ::operator delete(const_cast<_Tp*>(__p));"},
{"lineNum":"  198","line":"        } else {"},
{"lineNum":"  199","line":"            _VSTD::__libcpp_deallocate((void*) const_cast<_Tp *>(__p), __n * sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp));"},
{"lineNum":"  200","line":"        }"},
{"lineNum":"  201","line":"    }"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"    // C++20 Removed members"},
{"lineNum":"  204","line":"#if _LIBCPP_STD_VER <= 17 || defined(_LIBCPP_ENABLE_CXX20_REMOVED_ALLOCATOR_MEMBERS)"},
{"lineNum":"  205","line":"    _LIBCPP_DEPRECATED_IN_CXX17 typedef const _Tp* pointer;"},
{"lineNum":"  206","line":"    _LIBCPP_DEPRECATED_IN_CXX17 typedef const _Tp* const_pointer;"},
{"lineNum":"  207","line":"    _LIBCPP_DEPRECATED_IN_CXX17 typedef const _Tp& reference;"},
{"lineNum":"  208","line":"    _LIBCPP_DEPRECATED_IN_CXX17 typedef const _Tp& const_reference;"},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"    template <class _Up>"},
{"lineNum":"  211","line":"    struct _LIBCPP_DEPRECATED_IN_CXX17 rebind {"},
{"lineNum":"  212","line":"        typedef allocator<_Up> other;"},
{"lineNum":"  213","line":"    };"},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  216","line":"    const_pointer address(const_reference __x) const _NOEXCEPT {"},
{"lineNum":"  217","line":"        return _VSTD::addressof(__x);"},
{"lineNum":"  218","line":"    }"},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY _LIBCPP_DEPRECATED_IN_CXX17"},
{"lineNum":"  221","line":"    const _Tp* allocate(size_t __n, const void*) {"},
{"lineNum":"  222","line":"        return allocate(__n);"},
{"lineNum":"  223","line":"    }"},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY size_type max_size() const _NOEXCEPT {"},
{"lineNum":"  226","line":"        return size_type(~0) / sizeof(_Tp);"},
{"lineNum":"  227","line":"    }"},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"    template <class _Up, class... _Args>"},
{"lineNum":"  230","line":"    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  231","line":"    void construct(_Up* __p, _Args&&... __args) {"},
{"lineNum":"  232","line":"        ::new ((void*)__p) _Up(_VSTD::forward<_Args>(__args)...);"},
{"lineNum":"  233","line":"    }"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  236","line":"    void destroy(pointer __p) {"},
{"lineNum":"  237","line":"        __p->~_Tp();"},
{"lineNum":"  238","line":"    }"},
{"lineNum":"  239","line":"#endif"},
{"lineNum":"  240","line":"};"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"template <class _Tp, class _Up>"},
{"lineNum":"  243","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  244","line":"bool operator==(const allocator<_Tp>&, const allocator<_Up>&) _NOEXCEPT {return true;}"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"template <class _Tp, class _Up>"},
{"lineNum":"  247","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  248","line":"bool operator!=(const allocator<_Tp>&, const allocator<_Up>&) _NOEXCEPT {return false;}"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"_LIBCPP_END_NAMESPACE_STD"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"_LIBCPP_POP_MACROS"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"#endif // _LIBCPP___MEMORY_ALLOCATOR_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 10, "covered" : 3,};
var merged_data = [];
