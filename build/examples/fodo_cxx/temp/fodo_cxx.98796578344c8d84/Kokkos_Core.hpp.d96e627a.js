var data = {lines:[
{"lineNum":"    1","line":"/*"},
{"lineNum":"    2","line":"//@HEADER"},
{"lineNum":"    3","line":"// ************************************************************************"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"//                        Kokkos v. 3.0"},
{"lineNum":"    6","line":"//       Copyright (2020) National Technology & Engineering"},
{"lineNum":"    7","line":"//               Solutions of Sandia, LLC (NTESS)."},
{"lineNum":"    8","line":"//"},
{"lineNum":"    9","line":"// Under the terms of Contract DE-NA0003525 with NTESS,"},
{"lineNum":"   10","line":"// the U.S. Government retains certain rights in this software."},
{"lineNum":"   11","line":"//"},
{"lineNum":"   12","line":"// Redistribution and use in source and binary forms, with or without"},
{"lineNum":"   13","line":"// modification, are permitted provided that the following conditions are"},
{"lineNum":"   14","line":"// met:"},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"// 1. Redistributions of source code must retain the above copyright"},
{"lineNum":"   17","line":"// notice, this list of conditions and the following disclaimer."},
{"lineNum":"   18","line":"//"},
{"lineNum":"   19","line":"// 2. Redistributions in binary form must reproduce the above copyright"},
{"lineNum":"   20","line":"// notice, this list of conditions and the following disclaimer in the"},
{"lineNum":"   21","line":"// documentation and/or other materials provided with the distribution."},
{"lineNum":"   22","line":"//"},
{"lineNum":"   23","line":"// 3. Neither the name of the Corporation nor the names of the"},
{"lineNum":"   24","line":"// contributors may be used to endorse or promote products derived from"},
{"lineNum":"   25","line":"// this software without specific prior written permission."},
{"lineNum":"   26","line":"//"},
{"lineNum":"   27","line":"// THIS SOFTWARE IS PROVIDED BY NTESS \"AS IS\" AND ANY"},
{"lineNum":"   28","line":"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"},
{"lineNum":"   29","line":"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR"},
{"lineNum":"   30","line":"// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NTESS OR THE"},
{"lineNum":"   31","line":"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,"},
{"lineNum":"   32","line":"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,"},
{"lineNum":"   33","line":"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR"},
{"lineNum":"   34","line":"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF"},
{"lineNum":"   35","line":"// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING"},
{"lineNum":"   36","line":"// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"},
{"lineNum":"   37","line":"// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   38","line":"//"},
{"lineNum":"   39","line":"// Questions? Contact Christian R. Trott (crtrott@sandia.gov)"},
{"lineNum":"   40","line":"//"},
{"lineNum":"   41","line":"// ************************************************************************"},
{"lineNum":"   42","line":"//@HEADER"},
{"lineNum":"   43","line":"*/"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"#ifndef KOKKOS_CORE_HPP"},
{"lineNum":"   46","line":"#define KOKKOS_CORE_HPP"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"//----------------------------------------------------------------------------"},
{"lineNum":"   49","line":"// Include the execution space header files for the enabled execution spaces."},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"#include <Kokkos_Core_fwd.hpp>"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"// Fundamental type description for half precision"},
{"lineNum":"   54","line":"// Should not rely on other backend infrastructure"},
{"lineNum":"   55","line":"#include <Kokkos_Half.hpp>"},
{"lineNum":"   56","line":"#include <KokkosCore_Config_DeclareBackend.hpp>"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"#include <Kokkos_AnonymousSpace.hpp>"},
{"lineNum":"   59","line":"#include <Kokkos_LogicalSpaces.hpp>"},
{"lineNum":"   60","line":"#include <Kokkos_Pair.hpp>"},
{"lineNum":"   61","line":"#include <Kokkos_MathematicalFunctions.hpp>"},
{"lineNum":"   62","line":"#include <Kokkos_MemoryPool.hpp>"},
{"lineNum":"   63","line":"#include <Kokkos_Array.hpp>"},
{"lineNum":"   64","line":"#include <Kokkos_View.hpp>"},
{"lineNum":"   65","line":"#include <Kokkos_Vectorization.hpp>"},
{"lineNum":"   66","line":"#include <Kokkos_Atomic.hpp>"},
{"lineNum":"   67","line":"#include <Kokkos_hwloc.hpp>"},
{"lineNum":"   68","line":"#include <Kokkos_Timer.hpp>"},
{"lineNum":"   69","line":"#include <Kokkos_Tuners.hpp>"},
{"lineNum":"   70","line":"#include <Kokkos_TaskScheduler.hpp>"},
{"lineNum":"   71","line":"#include <Kokkos_Complex.hpp>"},
{"lineNum":"   72","line":"#include <Kokkos_CopyViews.hpp>"},
{"lineNum":"   73","line":"#include <functional>"},
{"lineNum":"   74","line":"#include <iosfwd>"},
{"lineNum":"   75","line":"#include <map>"},
{"lineNum":"   76","line":"#include <memory>"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"//----------------------------------------------------------------------------"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"namespace Kokkos {"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"struct InitArguments {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   83","line":"  int num_threads;"},
{"lineNum":"   84","line":"  int num_numa;"},
{"lineNum":"   85","line":"  int device_id;"},
{"lineNum":"   86","line":"  int ndevices;"},
{"lineNum":"   87","line":"  int skip_device;"},
{"lineNum":"   88","line":"  bool disable_warnings;"},
{"lineNum":"   89","line":"  bool tune_internals;"},
{"lineNum":"   90","line":"  bool tool_help        = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   91","line":"  std::string tool_lib  = {};"},
{"lineNum":"   92","line":"  std::string tool_args = {};"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"  InitArguments(int nt = -1, int nn = -1, int dv = -1, bool dw = false,"},
{"lineNum":"   95","line":"                bool ti = false)"},
{"lineNum":"   96","line":"      : num_threads{nt},"},
{"lineNum":"   97","line":"        num_numa{nn},","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   98","line":"        device_id{dv},"},
{"lineNum":"   99","line":"        ndevices{-1},"},
{"lineNum":"  100","line":"        skip_device{9999},","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  101","line":"        disable_warnings{dw},","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  102","line":"        tune_internals{ti} {}"},
{"lineNum":"  103","line":"};"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"namespace Impl {"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"/* ExecSpaceManager - Responsible for initializing all of the registered"},
{"lineNum":"  108","line":" * backends. Backends are registered using the register_space_initializer()"},
{"lineNum":"  109","line":" * function which should be called from a global context so that it is called"},
{"lineNum":"  110","line":" * prior to initialize_spaces() which is called from Kokkos::initialize()"},
{"lineNum":"  111","line":" */"},
{"lineNum":"  112","line":"class ExecSpaceManager {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  113","line":"  std::map<std::string, std::unique_ptr<ExecSpaceInitializerBase>>"},
{"lineNum":"  114","line":"      exec_space_factory_list;"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":" public:"},
{"lineNum":"  117","line":"  ExecSpaceManager() = default;"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"  void register_space_factory(std::string name,"},
{"lineNum":"  120","line":"                              std::unique_ptr<ExecSpaceInitializerBase> ptr);"},
{"lineNum":"  121","line":"  void initialize_spaces(const Kokkos::InitArguments& args);"},
{"lineNum":"  122","line":"  void finalize_spaces(const bool all_spaces);"},
{"lineNum":"  123","line":"  void static_fence();"},
{"lineNum":"  124","line":"  void print_configuration(std::ostream& msg, const bool detail);"},
{"lineNum":"  125","line":"  static ExecSpaceManager& get_instance();"},
{"lineNum":"  126","line":"};"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"template <class SpaceInitializerType>"},
{"lineNum":"  129","line":"int initialize_space_factory(std::string name) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  130","line":"  auto space_ptr = std::make_unique<SpaceInitializerType>();"},
{"lineNum":"  131","line":"  ExecSpaceManager::get_instance().register_space_factory(name,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  132","line":"                                                          std::move(space_ptr));"},
{"lineNum":"  133","line":"  return 1;"},
{"lineNum":"  134","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"}  // namespace Impl"},
{"lineNum":"  137","line":"void initialize(int& narg, char* arg[]);"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"void initialize(InitArguments args = InitArguments());"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"namespace Impl {"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"void pre_initialize(const InitArguments& args);"},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"void post_initialize(const InitArguments& args);"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"void declare_configuration_metadata(const std::string& category,"},
{"lineNum":"  148","line":"                                    const std::string& key,"},
{"lineNum":"  149","line":"                                    const std::string& value);"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"}  // namespace Impl"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"bool is_initialized() noexcept;"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"bool show_warnings() noexcept;"},
{"lineNum":"  156","line":"bool tune_internals() noexcept;"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"/** \\brief  Finalize the spaces that were initialized via Kokkos::initialize */"},
{"lineNum":"  159","line":"void finalize();"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"/**"},
{"lineNum":"  162","line":" * \\brief Push a user-defined function to be called in"},
{"lineNum":"  163","line":" *   Kokkos::finalize, before any Kokkos state is finalized."},
{"lineNum":"  164","line":" *"},
{"lineNum":"  165","line":" * \\warning Only call this after Kokkos::initialize, but before"},
{"lineNum":"  166","line":" *   Kokkos::finalize."},
{"lineNum":"  167","line":" *"},
{"lineNum":"  168","line":" * This function is the Kokkos analog to std::atexit.  If you call"},
{"lineNum":"  169","line":" * this with a function f, then your function will get called when"},
{"lineNum":"  170","line":" * Kokkos::finalize is called.  Specifically, it will be called BEFORE"},
{"lineNum":"  171","line":" * Kokkos does any finalization.  This means that all execution"},
{"lineNum":"  172","line":" * spaces, memory spaces, etc. that were initialized will still be"},
{"lineNum":"  173","line":" * initialized when your function is called."},
{"lineNum":"  174","line":" *"},
{"lineNum":"  175","line":" * Just like std::atexit, if you call push_finalize_hook in sequence"},
{"lineNum":"  176","line":" * with multiple functions (f, g, h), Kokkos::finalize will call them"},
{"lineNum":"  177","line":" * in reverse order (h, g, f), as if popping a stack.  Furthermore,"},
{"lineNum":"  178","line":" * just like std::atexit, if any of your functions throws but does not"},
{"lineNum":"  179","line":" * catch an exception, Kokkos::finalize will call std::terminate."},
{"lineNum":"  180","line":" */"},
{"lineNum":"  181","line":"void push_finalize_hook(std::function<void()> f);"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"/** \\brief  Finalize all known execution spaces */"},
{"lineNum":"  184","line":"void finalize_all();"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"void fence();"},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"/** \\brief Print \"Bill of Materials\" */"},
{"lineNum":"  189","line":"void print_configuration(std::ostream&, const bool detail = false);"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"}  // namespace Kokkos"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  194","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"namespace Kokkos {"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"/* Allocate memory from a memory space."},
{"lineNum":"  199","line":" * The allocation is tracked in Kokkos memory tracking system, so"},
{"lineNum":"  200","line":" * leaked memory can be identified."},
{"lineNum":"  201","line":" */"},
{"lineNum":"  202","line":"template <class Space = typename Kokkos::DefaultExecutionSpace::memory_space>"},
{"lineNum":"  203","line":"inline void* kokkos_malloc(const std::string& arg_alloc_label,"},
{"lineNum":"  204","line":"                           const size_t arg_alloc_size) {"},
{"lineNum":"  205","line":"  using MemorySpace = typename Space::memory_space;"},
{"lineNum":"  206","line":"  return Impl::SharedAllocationRecord<MemorySpace>::allocate_tracked("},
{"lineNum":"  207","line":"      MemorySpace(), arg_alloc_label, arg_alloc_size);"},
{"lineNum":"  208","line":"}"},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"template <class Space = typename Kokkos::DefaultExecutionSpace::memory_space>"},
{"lineNum":"  211","line":"inline void* kokkos_malloc(const size_t arg_alloc_size) {"},
{"lineNum":"  212","line":"  using MemorySpace = typename Space::memory_space;"},
{"lineNum":"  213","line":"  return Impl::SharedAllocationRecord<MemorySpace>::allocate_tracked("},
{"lineNum":"  214","line":"      MemorySpace(), \"no-label\", arg_alloc_size);"},
{"lineNum":"  215","line":"}"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"template <class Space = typename Kokkos::DefaultExecutionSpace::memory_space>"},
{"lineNum":"  218","line":"inline void kokkos_free(void* arg_alloc) {"},
{"lineNum":"  219","line":"  using MemorySpace = typename Space::memory_space;"},
{"lineNum":"  220","line":"  return Impl::SharedAllocationRecord<MemorySpace>::deallocate_tracked("},
{"lineNum":"  221","line":"      arg_alloc);"},
{"lineNum":"  222","line":"}"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"template <class Space = typename Kokkos::DefaultExecutionSpace::memory_space>"},
{"lineNum":"  225","line":"inline void* kokkos_realloc(void* arg_alloc, const size_t arg_alloc_size) {"},
{"lineNum":"  226","line":"  using MemorySpace = typename Space::memory_space;"},
{"lineNum":"  227","line":"  return Impl::SharedAllocationRecord<MemorySpace>::reallocate_tracked("},
{"lineNum":"  228","line":"      arg_alloc, arg_alloc_size);"},
{"lineNum":"  229","line":"}"},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"}  // namespace Kokkos"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"namespace Kokkos {"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"/** \\brief  ScopeGuard"},
{"lineNum":"  236","line":" *  Some user scope issues have been identified with some Kokkos::finalize"},
{"lineNum":"  237","line":" * calls; ScopeGuard aims to correct these issues."},
{"lineNum":"  238","line":" *"},
{"lineNum":"  239","line":" *  Two requirements for ScopeGuard:"},
{"lineNum":"  240","line":" *     if Kokkos::is_initialized() in the constructor, don\'t call"},
{"lineNum":"  241","line":" * Kokkos::initialize or Kokkos::finalize it is not copyable or assignable"},
{"lineNum":"  242","line":" */"},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"class ScopeGuard {"},
{"lineNum":"  245","line":" public:"},
{"lineNum":"  246","line":"  ScopeGuard(int& narg, char* arg[]) {"},
{"lineNum":"  247","line":"    sg_init = false;"},
{"lineNum":"  248","line":"    if (!Kokkos::is_initialized()) {"},
{"lineNum":"  249","line":"      initialize(narg, arg);"},
{"lineNum":"  250","line":"      sg_init = true;"},
{"lineNum":"  251","line":"    }"},
{"lineNum":"  252","line":"  }"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"  ScopeGuard(const InitArguments& args = InitArguments()) {"},
{"lineNum":"  255","line":"    sg_init = false;"},
{"lineNum":"  256","line":"    if (!Kokkos::is_initialized()) {"},
{"lineNum":"  257","line":"      initialize(args);"},
{"lineNum":"  258","line":"      sg_init = true;"},
{"lineNum":"  259","line":"    }"},
{"lineNum":"  260","line":"  }"},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"  ~ScopeGuard() {"},
{"lineNum":"  263","line":"    if (Kokkos::is_initialized() && sg_init) {"},
{"lineNum":"  264","line":"      finalize();"},
{"lineNum":"  265","line":"    }"},
{"lineNum":"  266","line":"  }"},
{"lineNum":"  267","line":""},
{"lineNum":"  268","line":"  // private:"},
{"lineNum":"  269","line":"  bool sg_init;"},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"  ScopeGuard& operator=(const ScopeGuard&) = delete;"},
{"lineNum":"  272","line":"  ScopeGuard(const ScopeGuard&)            = delete;"},
{"lineNum":"  273","line":"};"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"}  // namespace Kokkos"},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"#include <Kokkos_Crs.hpp>"},
{"lineNum":"  278","line":"#include <Kokkos_WorkGraphPolicy.hpp>"},
{"lineNum":"  279","line":"// Including this in Kokkos_Parallel_Reduce.hpp led to a circular dependency"},
{"lineNum":"  280","line":"// because Kokkos::Sum is used in Kokkos_Combined_Reducer.hpp and the default."},
{"lineNum":"  281","line":"// The real answer is to finally break up Kokkos_Parallel_Reduce.hpp into"},
{"lineNum":"  282","line":"// smaller parts..."},
{"lineNum":"  283","line":"#include <impl/Kokkos_Combined_Reducer.hpp>"},
{"lineNum":"  284","line":"// Yet another workaround to deal with circular dependency issues because the"},
{"lineNum":"  285","line":"// implementation of the RAII wrapper is using Kokkos::single."},
{"lineNum":"  286","line":"#include <Kokkos_AcquireUniqueTokenImpl.hpp>"},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"// Specializations requires after core definitions"},
{"lineNum":"  289","line":"#include <KokkosCore_Config_PostInclude.hpp>"},
{"lineNum":"  290","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  291","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 9, "covered" : 0,};
var merged_data = [];
