var data = {lines:[
{"lineNum":"    1","line":"// -*- C++ -*-"},
{"lineNum":"    2","line":"//===-------------------------- memory ------------------------------------===//"},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions."},
{"lineNum":"    5","line":"// See https://llvm.org/LICENSE.txt for license information."},
{"lineNum":"    6","line":"// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef _LIBCPP_MEMORY"},
{"lineNum":"   11","line":"#define _LIBCPP_MEMORY"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"/*"},
{"lineNum":"   14","line":"    memory synopsis"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"namespace std"},
{"lineNum":"   17","line":"{"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"struct allocator_arg_t { };"},
{"lineNum":"   20","line":"inline constexpr allocator_arg_t allocator_arg = allocator_arg_t();"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"template <class T, class Alloc> struct uses_allocator;"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"template <class Ptr>"},
{"lineNum":"   25","line":"struct pointer_traits"},
{"lineNum":"   26","line":"{"},
{"lineNum":"   27","line":"    typedef Ptr pointer;"},
{"lineNum":"   28","line":"    typedef <details> element_type;"},
{"lineNum":"   29","line":"    typedef <details> difference_type;"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"    template <class U> using rebind = <details>;"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"    static pointer pointer_to(<details>);"},
{"lineNum":"   34","line":"};"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"template <class T>"},
{"lineNum":"   37","line":"struct pointer_traits<T*>"},
{"lineNum":"   38","line":"{"},
{"lineNum":"   39","line":"    typedef T* pointer;"},
{"lineNum":"   40","line":"    typedef T element_type;"},
{"lineNum":"   41","line":"    typedef ptrdiff_t difference_type;"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"    template <class U> using rebind = U*;"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"    static pointer pointer_to(<details>) noexcept; // constexpr in C++20"},
{"lineNum":"   46","line":"};"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"template <class T> constexpr T* to_address(T* p) noexcept; // C++20"},
{"lineNum":"   49","line":"template <class Ptr> constexpr auto to_address(const Ptr& p) noexcept; // C++20"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"template <class Alloc>"},
{"lineNum":"   52","line":"struct allocator_traits"},
{"lineNum":"   53","line":"{"},
{"lineNum":"   54","line":"    typedef Alloc                        allocator_type;"},
{"lineNum":"   55","line":"    typedef typename allocator_type::value_type"},
{"lineNum":"   56","line":"                                         value_type;"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"    typedef Alloc::pointer | value_type* pointer;"},
{"lineNum":"   59","line":"    typedef Alloc::const_pointer"},
{"lineNum":"   60","line":"          | pointer_traits<pointer>::rebind<const value_type>"},
{"lineNum":"   61","line":"                                         const_pointer;"},
{"lineNum":"   62","line":"    typedef Alloc::void_pointer"},
{"lineNum":"   63","line":"          | pointer_traits<pointer>::rebind<void>"},
{"lineNum":"   64","line":"                                         void_pointer;"},
{"lineNum":"   65","line":"    typedef Alloc::const_void_pointer"},
{"lineNum":"   66","line":"          | pointer_traits<pointer>::rebind<const void>"},
{"lineNum":"   67","line":"                                         const_void_pointer;"},
{"lineNum":"   68","line":"    typedef Alloc::difference_type"},
{"lineNum":"   69","line":"          | pointer_traits<pointer>::difference_type"},
{"lineNum":"   70","line":"                                         difference_type;"},
{"lineNum":"   71","line":"    typedef Alloc::size_type"},
{"lineNum":"   72","line":"          | make_unsigned<difference_type>::type"},
{"lineNum":"   73","line":"                                         size_type;"},
{"lineNum":"   74","line":"    typedef Alloc::propagate_on_container_copy_assignment"},
{"lineNum":"   75","line":"          | false_type                   propagate_on_container_copy_assignment;"},
{"lineNum":"   76","line":"    typedef Alloc::propagate_on_container_move_assignment"},
{"lineNum":"   77","line":"          | false_type                   propagate_on_container_move_assignment;"},
{"lineNum":"   78","line":"    typedef Alloc::propagate_on_container_swap"},
{"lineNum":"   79","line":"          | false_type                   propagate_on_container_swap;"},
{"lineNum":"   80","line":"    typedef Alloc::is_always_equal"},
{"lineNum":"   81","line":"          | is_empty                     is_always_equal;"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"    template <class T> using rebind_alloc  = Alloc::rebind<T>::other | Alloc<T, Args...>;"},
{"lineNum":"   84","line":"    template <class T> using rebind_traits = allocator_traits<rebind_alloc<T>>;"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"    static pointer allocate(allocator_type& a, size_type n);                          // constexpr and [[nodiscard]] in C++20"},
{"lineNum":"   87","line":"    static pointer allocate(allocator_type& a, size_type n, const_void_pointer hint); // constexpr and [[nodiscard]] in C++20"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"    static void deallocate(allocator_type& a, pointer p, size_type n) noexcept; // constexpr in C++20"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"    template <class T, class... Args>"},
{"lineNum":"   92","line":"    static void construct(allocator_type& a, T* p, Args&&... args); // constexpr in C++20"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"    template <class T>"},
{"lineNum":"   95","line":"    static void destroy(allocator_type& a, T* p); // constexpr in C++20"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"    static size_type max_size(const allocator_type& a); // noexcept in C++14, constexpr in C++20"},
{"lineNum":"   98","line":"    static allocator_type select_on_container_copy_construction(const allocator_type& a); // constexpr in C++20"},
{"lineNum":"   99","line":"};"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"template <>"},
{"lineNum":"  102","line":"class allocator<void> // removed in C++20"},
{"lineNum":"  103","line":"{"},
{"lineNum":"  104","line":"public:"},
{"lineNum":"  105","line":"    typedef void*                                 pointer;"},
{"lineNum":"  106","line":"    typedef const void*                           const_pointer;"},
{"lineNum":"  107","line":"    typedef void                                  value_type;"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"    template <class _Up> struct rebind {typedef allocator<_Up> other;};"},
{"lineNum":"  110","line":"};"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"template <class T>"},
{"lineNum":"  113","line":"class allocator"},
{"lineNum":"  114","line":"{"},
{"lineNum":"  115","line":"public:"},
{"lineNum":"  116","line":"    typedef size_t    size_type;"},
{"lineNum":"  117","line":"    typedef ptrdiff_t difference_type;"},
{"lineNum":"  118","line":"    typedef T*        pointer;                           // deprecated in C++17, removed in C++20"},
{"lineNum":"  119","line":"    typedef const T*  const_pointer;                     // deprecated in C++17, removed in C++20"},
{"lineNum":"  120","line":"    typedef typename add_lvalue_reference<T>::type"},
{"lineNum":"  121","line":"                      reference;                         // deprecated in C++17, removed in C++20"},
{"lineNum":"  122","line":"    typedef typename add_lvalue_reference<const T>::type"},
{"lineNum":"  123","line":"                      const_reference;                   // deprecated in C++17, removed in C++20"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"    typedef T         value_type;"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"    template <class U> struct rebind {typedef allocator<U> other;}; // deprecated in C++17, removed in C++20"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"    typedef true_type propagate_on_container_move_assignment;"},
{"lineNum":"  130","line":"    typedef true_type is_always_equal;"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"    constexpr allocator() noexcept;                      // constexpr in C++20"},
{"lineNum":"  133","line":"    constexpr allocator(const allocator&) noexcept;      // constexpr in C++20"},
{"lineNum":"  134","line":"    template <class U>"},
{"lineNum":"  135","line":"      constexpr allocator(const allocator<U>&) noexcept; // constexpr in C++20"},
{"lineNum":"  136","line":"    ~allocator();                                        // constexpr in C++20"},
{"lineNum":"  137","line":"    pointer address(reference x) const noexcept;             // deprecated in C++17, removed in C++20"},
{"lineNum":"  138","line":"    const_pointer address(const_reference x) const noexcept; // deprecated in C++17, removed in C++20"},
{"lineNum":"  139","line":"    T* allocate(size_t n, const void* hint);          // deprecated in C++17, removed in C++20"},
{"lineNum":"  140","line":"    T* allocate(size_t n);                              // constexpr in C++20"},
{"lineNum":"  141","line":"    void deallocate(T* p, size_t n) noexcept;           // constexpr in C++20"},
{"lineNum":"  142","line":"    size_type max_size() const noexcept;              // deprecated in C++17, removed in C++20"},
{"lineNum":"  143","line":"    template<class U, class... Args>"},
{"lineNum":"  144","line":"        void construct(U* p, Args&&... args);         // deprecated in C++17, removed in C++20"},
{"lineNum":"  145","line":"    template <class U>"},
{"lineNum":"  146","line":"        void destroy(U* p);                           // deprecated in C++17, removed in C++20"},
{"lineNum":"  147","line":"};"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"template <class T, class U>"},
{"lineNum":"  150","line":"bool operator==(const allocator<T>&, const allocator<U>&) noexcept; // constexpr in C++20"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"template <class T, class U>"},
{"lineNum":"  153","line":"bool operator!=(const allocator<T>&, const allocator<U>&) noexcept; // constexpr in C++20"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"template <class OutputIterator, class T>"},
{"lineNum":"  156","line":"class raw_storage_iterator // deprecated in C++17, removed in C++20"},
{"lineNum":"  157","line":"    : public iterator<output_iterator_tag, void, void, void, void> // until C++17"},
{"lineNum":"  158","line":"{"},
{"lineNum":"  159","line":"public:"},
{"lineNum":"  160","line":"    typedef output_iterator_tag iterator_category;"},
{"lineNum":"  161","line":"    typedef void                value_type;"},
{"lineNum":"  162","line":"    typedef void                difference_type; // until C++20"},
{"lineNum":"  163","line":"    typedef ptrdiff_t           difference_type; // since C++20"},
{"lineNum":"  164","line":"    typedef void                pointer;"},
{"lineNum":"  165","line":"    typedef void                reference;"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"    explicit raw_storage_iterator(OutputIterator x);"},
{"lineNum":"  168","line":"    raw_storage_iterator& operator*();"},
{"lineNum":"  169","line":"    raw_storage_iterator& operator=(const T& element);"},
{"lineNum":"  170","line":"    raw_storage_iterator& operator++();"},
{"lineNum":"  171","line":"    raw_storage_iterator  operator++(int);"},
{"lineNum":"  172","line":"};"},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"template <class T> pair<T*,ptrdiff_t> get_temporary_buffer(ptrdiff_t n) noexcept;"},
{"lineNum":"  175","line":"template <class T> void               return_temporary_buffer(T* p) noexcept;"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"template <class T> T* addressof(T& r) noexcept;"},
{"lineNum":"  178","line":"template <class T> T* addressof(const T&& r) noexcept = delete;"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"template <class InputIterator, class ForwardIterator>"},
{"lineNum":"  181","line":"ForwardIterator"},
{"lineNum":"  182","line":"uninitialized_copy(InputIterator first, InputIterator last, ForwardIterator result);"},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"template <class InputIterator, class Size, class ForwardIterator>"},
{"lineNum":"  185","line":"ForwardIterator"},
{"lineNum":"  186","line":"uninitialized_copy_n(InputIterator first, Size n, ForwardIterator result);"},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"template <class ForwardIterator, class T>"},
{"lineNum":"  189","line":"void uninitialized_fill(ForwardIterator first, ForwardIterator last, const T& x);"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"template <class ForwardIterator, class Size, class T>"},
{"lineNum":"  192","line":"ForwardIterator"},
{"lineNum":"  193","line":"uninitialized_fill_n(ForwardIterator first, Size n, const T& x);"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"template <class T, class ...Args>"},
{"lineNum":"  196","line":"constexpr T* construct_at(T* location, Args&& ...args); // since C++20"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"template <class T>"},
{"lineNum":"  199","line":"void destroy_at(T* location); // constexpr in C++20"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"template <class ForwardIterator>"},
{"lineNum":"  202","line":"void destroy(ForwardIterator first, ForwardIterator last); // constexpr in C++20"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"template <class ForwardIterator, class Size>"},
{"lineNum":"  205","line":"ForwardIterator destroy_n(ForwardIterator first, Size n); // constexpr in C++20"},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"template <class InputIterator, class ForwardIterator>"},
{"lineNum":"  208","line":" ForwardIterator uninitialized_move(InputIterator first, InputIterator last, ForwardIterator result);"},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"template <class InputIterator, class Size, class ForwardIterator>"},
{"lineNum":"  211","line":" pair<InputIterator,ForwardIterator> uninitialized_move_n(InputIterator first, Size n, ForwardIterator result);"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"template <class ForwardIterator>"},
{"lineNum":"  214","line":" void uninitialized_value_construct(ForwardIterator first, ForwardIterator last);"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"template <class ForwardIterator, class Size>"},
{"lineNum":"  217","line":" ForwardIterator uninitialized_value_construct_n(ForwardIterator first, Size n);"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"template <class ForwardIterator>"},
{"lineNum":"  220","line":" void uninitialized_default_construct(ForwardIterator first, ForwardIterator last);"},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"template <class ForwardIterator, class Size>"},
{"lineNum":"  223","line":" ForwardIterator uninitialized_default_construct_n(ForwardIterator first, Size n);"},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"template <class Y> struct auto_ptr_ref {};      // deprecated in C++11, removed in C++17"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"template<class X>"},
{"lineNum":"  228","line":"class auto_ptr                                  // deprecated in C++11, removed in C++17"},
{"lineNum":"  229","line":"{"},
{"lineNum":"  230","line":"public:"},
{"lineNum":"  231","line":"    typedef X element_type;"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"    explicit auto_ptr(X* p =0) throw();"},
{"lineNum":"  234","line":"    auto_ptr(auto_ptr&) throw();"},
{"lineNum":"  235","line":"    template<class Y> auto_ptr(auto_ptr<Y>&) throw();"},
{"lineNum":"  236","line":"    auto_ptr& operator=(auto_ptr&) throw();"},
{"lineNum":"  237","line":"    template<class Y> auto_ptr& operator=(auto_ptr<Y>&) throw();"},
{"lineNum":"  238","line":"    auto_ptr& operator=(auto_ptr_ref<X> r) throw();"},
{"lineNum":"  239","line":"    ~auto_ptr() throw();"},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"    typename add_lvalue_reference<X>::type operator*() const throw();"},
{"lineNum":"  242","line":"    X* operator->() const throw();"},
{"lineNum":"  243","line":"    X* get() const throw();"},
{"lineNum":"  244","line":"    X* release() throw();"},
{"lineNum":"  245","line":"    void reset(X* p =0) throw();"},
{"lineNum":"  246","line":""},
{"lineNum":"  247","line":"    auto_ptr(auto_ptr_ref<X>) throw();"},
{"lineNum":"  248","line":"    template<class Y> operator auto_ptr_ref<Y>() throw();"},
{"lineNum":"  249","line":"    template<class Y> operator auto_ptr<Y>() throw();"},
{"lineNum":"  250","line":"};"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"template <class T>"},
{"lineNum":"  253","line":"struct default_delete"},
{"lineNum":"  254","line":"{"},
{"lineNum":"  255","line":"    constexpr default_delete() noexcept = default;"},
{"lineNum":"  256","line":"    template <class U> default_delete(const default_delete<U>&) noexcept;"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"    void operator()(T*) const noexcept;"},
{"lineNum":"  259","line":"};"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"template <class T>"},
{"lineNum":"  262","line":"struct default_delete<T[]>"},
{"lineNum":"  263","line":"{"},
{"lineNum":"  264","line":"    constexpr default_delete() noexcept = default;"},
{"lineNum":"  265","line":"    void operator()(T*) const noexcept;"},
{"lineNum":"  266","line":"    template <class U> void operator()(U*) const = delete;"},
{"lineNum":"  267","line":"};"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"template <class T, class D = default_delete<T>>"},
{"lineNum":"  270","line":"class unique_ptr"},
{"lineNum":"  271","line":"{"},
{"lineNum":"  272","line":"public:"},
{"lineNum":"  273","line":"    typedef see below pointer;"},
{"lineNum":"  274","line":"    typedef T element_type;"},
{"lineNum":"  275","line":"    typedef D deleter_type;"},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"    // constructors"},
{"lineNum":"  278","line":"    constexpr unique_ptr() noexcept;"},
{"lineNum":"  279","line":"    explicit unique_ptr(pointer p) noexcept;"},
{"lineNum":"  280","line":"    unique_ptr(pointer p, see below d1) noexcept;"},
{"lineNum":"  281","line":"    unique_ptr(pointer p, see below d2) noexcept;"},
{"lineNum":"  282","line":"    unique_ptr(unique_ptr&& u) noexcept;"},
{"lineNum":"  283","line":"    unique_ptr(nullptr_t) noexcept : unique_ptr() { }"},
{"lineNum":"  284","line":"    template <class U, class E>"},
{"lineNum":"  285","line":"        unique_ptr(unique_ptr<U, E>&& u) noexcept;"},
{"lineNum":"  286","line":"    template <class U>"},
{"lineNum":"  287","line":"        unique_ptr(auto_ptr<U>&& u) noexcept;       // removed in C++17"},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"    // destructor"},
{"lineNum":"  290","line":"    ~unique_ptr();"},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"    // assignment"},
{"lineNum":"  293","line":"    unique_ptr& operator=(unique_ptr&& u) noexcept;"},
{"lineNum":"  294","line":"    template <class U, class E> unique_ptr& operator=(unique_ptr<U, E>&& u) noexcept;"},
{"lineNum":"  295","line":"    unique_ptr& operator=(nullptr_t) noexcept;"},
{"lineNum":"  296","line":""},
{"lineNum":"  297","line":"    // observers"},
{"lineNum":"  298","line":"    typename add_lvalue_reference<T>::type operator*() const;"},
{"lineNum":"  299","line":"    pointer operator->() const noexcept;"},
{"lineNum":"  300","line":"    pointer get() const noexcept;"},
{"lineNum":"  301","line":"    deleter_type& get_deleter() noexcept;"},
{"lineNum":"  302","line":"    const deleter_type& get_deleter() const noexcept;"},
{"lineNum":"  303","line":"    explicit operator bool() const noexcept;"},
{"lineNum":"  304","line":""},
{"lineNum":"  305","line":"    // modifiers"},
{"lineNum":"  306","line":"    pointer release() noexcept;"},
{"lineNum":"  307","line":"    void reset(pointer p = pointer()) noexcept;"},
{"lineNum":"  308","line":"    void swap(unique_ptr& u) noexcept;"},
{"lineNum":"  309","line":"};"},
{"lineNum":"  310","line":""},
{"lineNum":"  311","line":"template <class T, class D>"},
{"lineNum":"  312","line":"class unique_ptr<T[], D>"},
{"lineNum":"  313","line":"{"},
{"lineNum":"  314","line":"public:"},
{"lineNum":"  315","line":"    typedef implementation-defined pointer;"},
{"lineNum":"  316","line":"    typedef T element_type;"},
{"lineNum":"  317","line":"    typedef D deleter_type;"},
{"lineNum":"  318","line":""},
{"lineNum":"  319","line":"    // constructors"},
{"lineNum":"  320","line":"    constexpr unique_ptr() noexcept;"},
{"lineNum":"  321","line":"    explicit unique_ptr(pointer p) noexcept;"},
{"lineNum":"  322","line":"    unique_ptr(pointer p, see below d) noexcept;"},
{"lineNum":"  323","line":"    unique_ptr(pointer p, see below d) noexcept;"},
{"lineNum":"  324","line":"    unique_ptr(unique_ptr&& u) noexcept;"},
{"lineNum":"  325","line":"    unique_ptr(nullptr_t) noexcept : unique_ptr() { }"},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"    // destructor"},
{"lineNum":"  328","line":"    ~unique_ptr();"},
{"lineNum":"  329","line":""},
{"lineNum":"  330","line":"    // assignment"},
{"lineNum":"  331","line":"    unique_ptr& operator=(unique_ptr&& u) noexcept;"},
{"lineNum":"  332","line":"    unique_ptr& operator=(nullptr_t) noexcept;"},
{"lineNum":"  333","line":""},
{"lineNum":"  334","line":"    // observers"},
{"lineNum":"  335","line":"    T& operator[](size_t i) const;"},
{"lineNum":"  336","line":"    pointer get() const noexcept;"},
{"lineNum":"  337","line":"    deleter_type& get_deleter() noexcept;"},
{"lineNum":"  338","line":"    const deleter_type& get_deleter() const noexcept;"},
{"lineNum":"  339","line":"    explicit operator bool() const noexcept;"},
{"lineNum":"  340","line":""},
{"lineNum":"  341","line":"    // modifiers"},
{"lineNum":"  342","line":"    pointer release() noexcept;"},
{"lineNum":"  343","line":"    void reset(pointer p = pointer()) noexcept;"},
{"lineNum":"  344","line":"    void reset(nullptr_t) noexcept;"},
{"lineNum":"  345","line":"  template <class U> void reset(U) = delete;"},
{"lineNum":"  346","line":"    void swap(unique_ptr& u) noexcept;"},
{"lineNum":"  347","line":"};"},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"template <class T, class D>"},
{"lineNum":"  350","line":"    void swap(unique_ptr<T, D>& x, unique_ptr<T, D>& y) noexcept;"},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"template <class T1, class D1, class T2, class D2>"},
{"lineNum":"  353","line":"    bool operator==(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);"},
{"lineNum":"  354","line":"template <class T1, class D1, class T2, class D2>"},
{"lineNum":"  355","line":"    bool operator!=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);"},
{"lineNum":"  356","line":"template <class T1, class D1, class T2, class D2>"},
{"lineNum":"  357","line":"    bool operator<(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);"},
{"lineNum":"  358","line":"template <class T1, class D1, class T2, class D2>"},
{"lineNum":"  359","line":"    bool operator<=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);"},
{"lineNum":"  360","line":"template <class T1, class D1, class T2, class D2>"},
{"lineNum":"  361","line":"    bool operator>(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);"},
{"lineNum":"  362","line":"template <class T1, class D1, class T2, class D2>"},
{"lineNum":"  363","line":"    bool operator>=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);"},
{"lineNum":"  364","line":""},
{"lineNum":"  365","line":"template <class T, class D>"},
{"lineNum":"  366","line":"    bool operator==(const unique_ptr<T, D>& x, nullptr_t) noexcept;"},
{"lineNum":"  367","line":"template <class T, class D>"},
{"lineNum":"  368","line":"    bool operator==(nullptr_t, const unique_ptr<T, D>& y) noexcept;"},
{"lineNum":"  369","line":"template <class T, class D>"},
{"lineNum":"  370","line":"    bool operator!=(const unique_ptr<T, D>& x, nullptr_t) noexcept;"},
{"lineNum":"  371","line":"template <class T, class D>"},
{"lineNum":"  372","line":"    bool operator!=(nullptr_t, const unique_ptr<T, D>& y) noexcept;"},
{"lineNum":"  373","line":""},
{"lineNum":"  374","line":"template <class T, class D>"},
{"lineNum":"  375","line":"    bool operator<(const unique_ptr<T, D>& x, nullptr_t);"},
{"lineNum":"  376","line":"template <class T, class D>"},
{"lineNum":"  377","line":"    bool operator<(nullptr_t, const unique_ptr<T, D>& y);"},
{"lineNum":"  378","line":"template <class T, class D>"},
{"lineNum":"  379","line":"    bool operator<=(const unique_ptr<T, D>& x, nullptr_t);"},
{"lineNum":"  380","line":"template <class T, class D>"},
{"lineNum":"  381","line":"    bool operator<=(nullptr_t, const unique_ptr<T, D>& y);"},
{"lineNum":"  382","line":"template <class T, class D>"},
{"lineNum":"  383","line":"    bool operator>(const unique_ptr<T, D>& x, nullptr_t);"},
{"lineNum":"  384","line":"template <class T, class D>"},
{"lineNum":"  385","line":"    bool operator>(nullptr_t, const unique_ptr<T, D>& y);"},
{"lineNum":"  386","line":"template <class T, class D>"},
{"lineNum":"  387","line":"    bool operator>=(const unique_ptr<T, D>& x, nullptr_t);"},
{"lineNum":"  388","line":"template <class T, class D>"},
{"lineNum":"  389","line":"    bool operator>=(nullptr_t, const unique_ptr<T, D>& y);"},
{"lineNum":"  390","line":""},
{"lineNum":"  391","line":"class bad_weak_ptr"},
{"lineNum":"  392","line":"    : public std::exception"},
{"lineNum":"  393","line":"{"},
{"lineNum":"  394","line":"    bad_weak_ptr() noexcept;"},
{"lineNum":"  395","line":"};"},
{"lineNum":"  396","line":""},
{"lineNum":"  397","line":"template<class T, class... Args> unique_ptr<T> make_unique(Args&&... args);     // C++14"},
{"lineNum":"  398","line":"template<class T>                unique_ptr<T> make_unique(size_t n);           // C++14"},
{"lineNum":"  399","line":"template<class T, class... Args> unspecified   make_unique(Args&&...) = delete; // C++14, T == U[N]"},
{"lineNum":"  400","line":""},
{"lineNum":"  401","line":"template<class E, class T, class Y, class D>"},
{"lineNum":"  402","line":"    basic_ostream<E, T>& operator<< (basic_ostream<E, T>& os, unique_ptr<Y, D> const& p);"},
{"lineNum":"  403","line":""},
{"lineNum":"  404","line":"template<class T>"},
{"lineNum":"  405","line":"class shared_ptr"},
{"lineNum":"  406","line":"{"},
{"lineNum":"  407","line":"public:"},
{"lineNum":"  408","line":"    typedef T element_type;"},
{"lineNum":"  409","line":"    typedef weak_ptr<T> weak_type; // C++17"},
{"lineNum":"  410","line":""},
{"lineNum":"  411","line":"    // constructors:"},
{"lineNum":"  412","line":"    constexpr shared_ptr() noexcept;"},
{"lineNum":"  413","line":"    template<class Y> explicit shared_ptr(Y* p);"},
{"lineNum":"  414","line":"    template<class Y, class D> shared_ptr(Y* p, D d);"},
{"lineNum":"  415","line":"    template<class Y, class D, class A> shared_ptr(Y* p, D d, A a);"},
{"lineNum":"  416","line":"    template <class D> shared_ptr(nullptr_t p, D d);"},
{"lineNum":"  417","line":"    template <class D, class A> shared_ptr(nullptr_t p, D d, A a);"},
{"lineNum":"  418","line":"    template<class Y> shared_ptr(const shared_ptr<Y>& r, T *p) noexcept;"},
{"lineNum":"  419","line":"    shared_ptr(const shared_ptr& r) noexcept;"},
{"lineNum":"  420","line":"    template<class Y> shared_ptr(const shared_ptr<Y>& r) noexcept;"},
{"lineNum":"  421","line":"    shared_ptr(shared_ptr&& r) noexcept;"},
{"lineNum":"  422","line":"    template<class Y> shared_ptr(shared_ptr<Y>&& r) noexcept;"},
{"lineNum":"  423","line":"    template<class Y> explicit shared_ptr(const weak_ptr<Y>& r);"},
{"lineNum":"  424","line":"    template<class Y> shared_ptr(auto_ptr<Y>&& r);          // removed in C++17"},
{"lineNum":"  425","line":"    template <class Y, class D> shared_ptr(unique_ptr<Y, D>&& r);"},
{"lineNum":"  426","line":"    shared_ptr(nullptr_t) : shared_ptr() { }"},
{"lineNum":"  427","line":""},
{"lineNum":"  428","line":"    // destructor:"},
{"lineNum":"  429","line":"    ~shared_ptr();"},
{"lineNum":"  430","line":""},
{"lineNum":"  431","line":"    // assignment:"},
{"lineNum":"  432","line":"    shared_ptr& operator=(const shared_ptr& r) noexcept;"},
{"lineNum":"  433","line":"    template<class Y> shared_ptr& operator=(const shared_ptr<Y>& r) noexcept;"},
{"lineNum":"  434","line":"    shared_ptr& operator=(shared_ptr&& r) noexcept;"},
{"lineNum":"  435","line":"    template<class Y> shared_ptr& operator=(shared_ptr<Y>&& r);"},
{"lineNum":"  436","line":"    template<class Y> shared_ptr& operator=(auto_ptr<Y>&& r); // removed in C++17"},
{"lineNum":"  437","line":"    template <class Y, class D> shared_ptr& operator=(unique_ptr<Y, D>&& r);"},
{"lineNum":"  438","line":""},
{"lineNum":"  439","line":"    // modifiers:"},
{"lineNum":"  440","line":"    void swap(shared_ptr& r) noexcept;"},
{"lineNum":"  441","line":"    void reset() noexcept;"},
{"lineNum":"  442","line":"    template<class Y> void reset(Y* p);"},
{"lineNum":"  443","line":"    template<class Y, class D> void reset(Y* p, D d);"},
{"lineNum":"  444","line":"    template<class Y, class D, class A> void reset(Y* p, D d, A a);"},
{"lineNum":"  445","line":""},
{"lineNum":"  446","line":"    // observers:"},
{"lineNum":"  447","line":"    T* get() const noexcept;"},
{"lineNum":"  448","line":"    T& operator*() const noexcept;"},
{"lineNum":"  449","line":"    T* operator->() const noexcept;"},
{"lineNum":"  450","line":"    long use_count() const noexcept;"},
{"lineNum":"  451","line":"    bool unique() const noexcept;"},
{"lineNum":"  452","line":"    explicit operator bool() const noexcept;"},
{"lineNum":"  453","line":"    template<class U> bool owner_before(shared_ptr<U> const& b) const noexcept;"},
{"lineNum":"  454","line":"    template<class U> bool owner_before(weak_ptr<U> const& b) const noexcept;"},
{"lineNum":"  455","line":"};"},
{"lineNum":"  456","line":""},
{"lineNum":"  457","line":"template<class T>"},
{"lineNum":"  458","line":"shared_ptr(weak_ptr<T>) -> shared_ptr<T>;"},
{"lineNum":"  459","line":"template<class T, class D>"},
{"lineNum":"  460","line":"shared_ptr(unique_ptr<T, D>) -> shared_ptr<T>;"},
{"lineNum":"  461","line":""},
{"lineNum":"  462","line":"// shared_ptr comparisons:"},
{"lineNum":"  463","line":"template<class T, class U>"},
{"lineNum":"  464","line":"    bool operator==(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;"},
{"lineNum":"  465","line":"template<class T, class U>"},
{"lineNum":"  466","line":"    bool operator!=(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;"},
{"lineNum":"  467","line":"template<class T, class U>"},
{"lineNum":"  468","line":"    bool operator<(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;"},
{"lineNum":"  469","line":"template<class T, class U>"},
{"lineNum":"  470","line":"    bool operator>(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;"},
{"lineNum":"  471","line":"template<class T, class U>"},
{"lineNum":"  472","line":"    bool operator<=(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;"},
{"lineNum":"  473","line":"template<class T, class U>"},
{"lineNum":"  474","line":"    bool operator>=(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;"},
{"lineNum":"  475","line":""},
{"lineNum":"  476","line":"template <class T>"},
{"lineNum":"  477","line":"    bool operator==(const shared_ptr<T>& x, nullptr_t) noexcept;"},
{"lineNum":"  478","line":"template <class T>"},
{"lineNum":"  479","line":"    bool operator==(nullptr_t, const shared_ptr<T>& y) noexcept;"},
{"lineNum":"  480","line":"template <class T>"},
{"lineNum":"  481","line":"    bool operator!=(const shared_ptr<T>& x, nullptr_t) noexcept;"},
{"lineNum":"  482","line":"template <class T>"},
{"lineNum":"  483","line":"    bool operator!=(nullptr_t, const shared_ptr<T>& y) noexcept;"},
{"lineNum":"  484","line":"template <class T>"},
{"lineNum":"  485","line":"    bool operator<(const shared_ptr<T>& x, nullptr_t) noexcept;"},
{"lineNum":"  486","line":"template <class T>"},
{"lineNum":"  487","line":"bool operator<(nullptr_t, const shared_ptr<T>& y) noexcept;"},
{"lineNum":"  488","line":"template <class T>"},
{"lineNum":"  489","line":"    bool operator<=(const shared_ptr<T>& x, nullptr_t) noexcept;"},
{"lineNum":"  490","line":"template <class T>"},
{"lineNum":"  491","line":"    bool operator<=(nullptr_t, const shared_ptr<T>& y) noexcept;"},
{"lineNum":"  492","line":"template <class T>"},
{"lineNum":"  493","line":"    bool operator>(const shared_ptr<T>& x, nullptr_t) noexcept;"},
{"lineNum":"  494","line":"template <class T>"},
{"lineNum":"  495","line":"    bool operator>(nullptr_t, const shared_ptr<T>& y) noexcept;"},
{"lineNum":"  496","line":"template <class T>"},
{"lineNum":"  497","line":"    bool operator>=(const shared_ptr<T>& x, nullptr_t) noexcept;"},
{"lineNum":"  498","line":"template <class T>"},
{"lineNum":"  499","line":"    bool operator>=(nullptr_t, const shared_ptr<T>& y) noexcept;"},
{"lineNum":"  500","line":""},
{"lineNum":"  501","line":"// shared_ptr specialized algorithms:"},
{"lineNum":"  502","line":"template<class T> void swap(shared_ptr<T>& a, shared_ptr<T>& b) noexcept;"},
{"lineNum":"  503","line":""},
{"lineNum":"  504","line":"// shared_ptr casts:"},
{"lineNum":"  505","line":"template<class T, class U>"},
{"lineNum":"  506","line":"    shared_ptr<T> static_pointer_cast(shared_ptr<U> const& r) noexcept;"},
{"lineNum":"  507","line":"template<class T, class U>"},
{"lineNum":"  508","line":"    shared_ptr<T> dynamic_pointer_cast(shared_ptr<U> const& r) noexcept;"},
{"lineNum":"  509","line":"template<class T, class U>"},
{"lineNum":"  510","line":"    shared_ptr<T> const_pointer_cast(shared_ptr<U> const& r) noexcept;"},
{"lineNum":"  511","line":""},
{"lineNum":"  512","line":"// shared_ptr I/O:"},
{"lineNum":"  513","line":"template<class E, class T, class Y>"},
{"lineNum":"  514","line":"    basic_ostream<E, T>& operator<< (basic_ostream<E, T>& os, shared_ptr<Y> const& p);"},
{"lineNum":"  515","line":""},
{"lineNum":"  516","line":"// shared_ptr get_deleter:"},
{"lineNum":"  517","line":"template<class D, class T> D* get_deleter(shared_ptr<T> const& p) noexcept;"},
{"lineNum":"  518","line":""},
{"lineNum":"  519","line":"template<class T, class... Args>"},
{"lineNum":"  520","line":"    shared_ptr<T> make_shared(Args&&... args);"},
{"lineNum":"  521","line":"template<class T, class A, class... Args>"},
{"lineNum":"  522","line":"    shared_ptr<T> allocate_shared(const A& a, Args&&... args);"},
{"lineNum":"  523","line":""},
{"lineNum":"  524","line":"template<class T>"},
{"lineNum":"  525","line":"class weak_ptr"},
{"lineNum":"  526","line":"{"},
{"lineNum":"  527","line":"public:"},
{"lineNum":"  528","line":"    typedef T element_type;"},
{"lineNum":"  529","line":""},
{"lineNum":"  530","line":"    // constructors"},
{"lineNum":"  531","line":"    constexpr weak_ptr() noexcept;"},
{"lineNum":"  532","line":"    template<class Y> weak_ptr(shared_ptr<Y> const& r) noexcept;"},
{"lineNum":"  533","line":"    weak_ptr(weak_ptr const& r) noexcept;"},
{"lineNum":"  534","line":"    template<class Y> weak_ptr(weak_ptr<Y> const& r) noexcept;"},
{"lineNum":"  535","line":"    weak_ptr(weak_ptr&& r) noexcept;                      // C++14"},
{"lineNum":"  536","line":"    template<class Y> weak_ptr(weak_ptr<Y>&& r) noexcept; // C++14"},
{"lineNum":"  537","line":""},
{"lineNum":"  538","line":"    // destructor"},
{"lineNum":"  539","line":"    ~weak_ptr();"},
{"lineNum":"  540","line":""},
{"lineNum":"  541","line":"    // assignment"},
{"lineNum":"  542","line":"    weak_ptr& operator=(weak_ptr const& r) noexcept;"},
{"lineNum":"  543","line":"    template<class Y> weak_ptr& operator=(weak_ptr<Y> const& r) noexcept;"},
{"lineNum":"  544","line":"    template<class Y> weak_ptr& operator=(shared_ptr<Y> const& r) noexcept;"},
{"lineNum":"  545","line":"    weak_ptr& operator=(weak_ptr&& r) noexcept;                      // C++14"},
{"lineNum":"  546","line":"    template<class Y> weak_ptr& operator=(weak_ptr<Y>&& r) noexcept; // C++14"},
{"lineNum":"  547","line":""},
{"lineNum":"  548","line":"    // modifiers"},
{"lineNum":"  549","line":"    void swap(weak_ptr& r) noexcept;"},
{"lineNum":"  550","line":"    void reset() noexcept;"},
{"lineNum":"  551","line":""},
{"lineNum":"  552","line":"    // observers"},
{"lineNum":"  553","line":"    long use_count() const noexcept;"},
{"lineNum":"  554","line":"    bool expired() const noexcept;"},
{"lineNum":"  555","line":"    shared_ptr<T> lock() const noexcept;"},
{"lineNum":"  556","line":"    template<class U> bool owner_before(shared_ptr<U> const& b) const noexcept;"},
{"lineNum":"  557","line":"    template<class U> bool owner_before(weak_ptr<U> const& b) const noexcept;"},
{"lineNum":"  558","line":"};"},
{"lineNum":"  559","line":""},
{"lineNum":"  560","line":"template<class T>"},
{"lineNum":"  561","line":"weak_ptr(shared_ptr<T>) -> weak_ptr<T>;"},
{"lineNum":"  562","line":""},
{"lineNum":"  563","line":"// weak_ptr specialized algorithms:"},
{"lineNum":"  564","line":"template<class T> void swap(weak_ptr<T>& a, weak_ptr<T>& b) noexcept;"},
{"lineNum":"  565","line":""},
{"lineNum":"  566","line":"// class owner_less:"},
{"lineNum":"  567","line":"template<class T> struct owner_less;"},
{"lineNum":"  568","line":""},
{"lineNum":"  569","line":"template<class T>"},
{"lineNum":"  570","line":"struct owner_less<shared_ptr<T> >"},
{"lineNum":"  571","line":"    : binary_function<shared_ptr<T>, shared_ptr<T>, bool>"},
{"lineNum":"  572","line":"{"},
{"lineNum":"  573","line":"    typedef bool result_type;"},
{"lineNum":"  574","line":"    bool operator()(shared_ptr<T> const&, shared_ptr<T> const&) const noexcept;"},
{"lineNum":"  575","line":"    bool operator()(shared_ptr<T> const&, weak_ptr<T> const&) const noexcept;"},
{"lineNum":"  576","line":"    bool operator()(weak_ptr<T> const&, shared_ptr<T> const&) const noexcept;"},
{"lineNum":"  577","line":"};"},
{"lineNum":"  578","line":""},
{"lineNum":"  579","line":"template<class T>"},
{"lineNum":"  580","line":"struct owner_less<weak_ptr<T> >"},
{"lineNum":"  581","line":"    : binary_function<weak_ptr<T>, weak_ptr<T>, bool>"},
{"lineNum":"  582","line":"{"},
{"lineNum":"  583","line":"    typedef bool result_type;"},
{"lineNum":"  584","line":"    bool operator()(weak_ptr<T> const&, weak_ptr<T> const&) const noexcept;"},
{"lineNum":"  585","line":"    bool operator()(shared_ptr<T> const&, weak_ptr<T> const&) const noexcept;"},
{"lineNum":"  586","line":"    bool operator()(weak_ptr<T> const&, shared_ptr<T> const&) const noexcept;"},
{"lineNum":"  587","line":"};"},
{"lineNum":"  588","line":""},
{"lineNum":"  589","line":"template <>  // Added in C++14"},
{"lineNum":"  590","line":"struct owner_less<void>"},
{"lineNum":"  591","line":"{"},
{"lineNum":"  592","line":"    template <class _Tp, class _Up>"},
{"lineNum":"  593","line":"    bool operator()( shared_ptr<_Tp> const& __x, shared_ptr<_Up> const& __y) const noexcept;"},
{"lineNum":"  594","line":"    template <class _Tp, class _Up>"},
{"lineNum":"  595","line":"    bool operator()( shared_ptr<_Tp> const& __x,   weak_ptr<_Up> const& __y) const noexcept;"},
{"lineNum":"  596","line":"    template <class _Tp, class _Up>"},
{"lineNum":"  597","line":"    bool operator()(   weak_ptr<_Tp> const& __x, shared_ptr<_Up> const& __y) const noexcept;"},
{"lineNum":"  598","line":"    template <class _Tp, class _Up>"},
{"lineNum":"  599","line":"    bool operator()(   weak_ptr<_Tp> const& __x,   weak_ptr<_Up> const& __y) const noexcept;"},
{"lineNum":"  600","line":""},
{"lineNum":"  601","line":"    typedef void is_transparent;"},
{"lineNum":"  602","line":"};"},
{"lineNum":"  603","line":""},
{"lineNum":"  604","line":"template<class T>"},
{"lineNum":"  605","line":"class enable_shared_from_this"},
{"lineNum":"  606","line":"{"},
{"lineNum":"  607","line":"protected:"},
{"lineNum":"  608","line":"    constexpr enable_shared_from_this() noexcept;"},
{"lineNum":"  609","line":"    enable_shared_from_this(enable_shared_from_this const&) noexcept;"},
{"lineNum":"  610","line":"    enable_shared_from_this& operator=(enable_shared_from_this const&) noexcept;"},
{"lineNum":"  611","line":"    ~enable_shared_from_this();"},
{"lineNum":"  612","line":"public:"},
{"lineNum":"  613","line":"    shared_ptr<T> shared_from_this();"},
{"lineNum":"  614","line":"    shared_ptr<T const> shared_from_this() const;"},
{"lineNum":"  615","line":"};"},
{"lineNum":"  616","line":""},
{"lineNum":"  617","line":"template<class T>"},
{"lineNum":"  618","line":"    bool atomic_is_lock_free(const shared_ptr<T>* p);"},
{"lineNum":"  619","line":"template<class T>"},
{"lineNum":"  620","line":"    shared_ptr<T> atomic_load(const shared_ptr<T>* p);"},
{"lineNum":"  621","line":"template<class T>"},
{"lineNum":"  622","line":"    shared_ptr<T> atomic_load_explicit(const shared_ptr<T>* p, memory_order mo);"},
{"lineNum":"  623","line":"template<class T>"},
{"lineNum":"  624","line":"    void atomic_store(shared_ptr<T>* p, shared_ptr<T> r);"},
{"lineNum":"  625","line":"template<class T>"},
{"lineNum":"  626","line":"    void atomic_store_explicit(shared_ptr<T>* p, shared_ptr<T> r, memory_order mo);"},
{"lineNum":"  627","line":"template<class T>"},
{"lineNum":"  628","line":"    shared_ptr<T> atomic_exchange(shared_ptr<T>* p, shared_ptr<T> r);"},
{"lineNum":"  629","line":"template<class T>"},
{"lineNum":"  630","line":"    shared_ptr<T>"},
{"lineNum":"  631","line":"    atomic_exchange_explicit(shared_ptr<T>* p, shared_ptr<T> r, memory_order mo);"},
{"lineNum":"  632","line":"template<class T>"},
{"lineNum":"  633","line":"    bool"},
{"lineNum":"  634","line":"    atomic_compare_exchange_weak(shared_ptr<T>* p, shared_ptr<T>* v, shared_ptr<T> w);"},
{"lineNum":"  635","line":"template<class T>"},
{"lineNum":"  636","line":"    bool"},
{"lineNum":"  637","line":"    atomic_compare_exchange_strong( shared_ptr<T>* p, shared_ptr<T>* v, shared_ptr<T> w);"},
{"lineNum":"  638","line":"template<class T>"},
{"lineNum":"  639","line":"    bool"},
{"lineNum":"  640","line":"    atomic_compare_exchange_weak_explicit(shared_ptr<T>* p, shared_ptr<T>* v,"},
{"lineNum":"  641","line":"                                          shared_ptr<T> w, memory_order success,"},
{"lineNum":"  642","line":"                                          memory_order failure);"},
{"lineNum":"  643","line":"template<class T>"},
{"lineNum":"  644","line":"    bool"},
{"lineNum":"  645","line":"    atomic_compare_exchange_strong_explicit(shared_ptr<T>* p, shared_ptr<T>* v,"},
{"lineNum":"  646","line":"                                            shared_ptr<T> w, memory_order success,"},
{"lineNum":"  647","line":"                                            memory_order failure);"},
{"lineNum":"  648","line":"// Hash support"},
{"lineNum":"  649","line":"template <class T> struct hash;"},
{"lineNum":"  650","line":"template <class T, class D> struct hash<unique_ptr<T, D> >;"},
{"lineNum":"  651","line":"template <class T> struct hash<shared_ptr<T> >;"},
{"lineNum":"  652","line":""},
{"lineNum":"  653","line":"template <class T, class Alloc>"},
{"lineNum":"  654","line":"  inline constexpr bool uses_allocator_v = uses_allocator<T, Alloc>::value;"},
{"lineNum":"  655","line":""},
{"lineNum":"  656","line":"// Pointer safety"},
{"lineNum":"  657","line":"enum class pointer_safety { relaxed, preferred, strict }; // since C++11"},
{"lineNum":"  658","line":"void declare_reachable(void *p);                          // since C++11"},
{"lineNum":"  659","line":"template <class T> T *undeclare_reachable(T *p);          // since C++11"},
{"lineNum":"  660","line":"void declare_no_pointers(char *p, size_t n);              // since C++11"},
{"lineNum":"  661","line":"void undeclare_no_pointers(char *p, size_t n);            // since C++11"},
{"lineNum":"  662","line":"pointer_safety get_pointer_safety() noexcept;             // since C++11"},
{"lineNum":"  663","line":""},
{"lineNum":"  664","line":"void* align(size_t alignment, size_t size, void*& ptr, size_t& space);"},
{"lineNum":"  665","line":""},
{"lineNum":"  666","line":"}  // std"},
{"lineNum":"  667","line":""},
{"lineNum":"  668","line":"*/"},
{"lineNum":"  669","line":""},
{"lineNum":"  670","line":"#include <__config>"},
{"lineNum":"  671","line":"#include <__functional_base>"},
{"lineNum":"  672","line":"#include <__memory/addressof.h>"},
{"lineNum":"  673","line":"#include <__memory/allocation_guard.h>"},
{"lineNum":"  674","line":"#include <__memory/allocator.h>"},
{"lineNum":"  675","line":"#include <__memory/allocator_arg_t.h>"},
{"lineNum":"  676","line":"#include <__memory/allocator_traits.h>"},
{"lineNum":"  677","line":"#include <__memory/compressed_pair.h>"},
{"lineNum":"  678","line":"#include <__memory/construct_at.h>"},
{"lineNum":"  679","line":"#include <__memory/pointer_safety.h>"},
{"lineNum":"  680","line":"#include <__memory/pointer_traits.h>"},
{"lineNum":"  681","line":"#include <__memory/raw_storage_iterator.h>"},
{"lineNum":"  682","line":"#include <__memory/shared_ptr.h>"},
{"lineNum":"  683","line":"#include <__memory/temporary_buffer.h>"},
{"lineNum":"  684","line":"#include <__memory/uninitialized_algorithms.h>"},
{"lineNum":"  685","line":"#include <__memory/unique_ptr.h>"},
{"lineNum":"  686","line":"#include <__memory/uses_allocator.h>"},
{"lineNum":"  687","line":"#include <compare>"},
{"lineNum":"  688","line":"#include <cstddef>"},
{"lineNum":"  689","line":"#include <cstdint>"},
{"lineNum":"  690","line":"#include <cstring>"},
{"lineNum":"  691","line":"#include <iosfwd>"},
{"lineNum":"  692","line":"#include <iterator>"},
{"lineNum":"  693","line":"#include <new>"},
{"lineNum":"  694","line":"#include <stdexcept>"},
{"lineNum":"  695","line":"#include <tuple>"},
{"lineNum":"  696","line":"#include <type_traits>"},
{"lineNum":"  697","line":"#include <typeinfo>"},
{"lineNum":"  698","line":"#include <utility>"},
{"lineNum":"  699","line":"#include <version>"},
{"lineNum":"  700","line":""},
{"lineNum":"  701","line":"#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)"},
{"lineNum":"  702","line":"#   include <__memory/auto_ptr.h>"},
{"lineNum":"  703","line":"#endif"},
{"lineNum":"  704","line":""},
{"lineNum":"  705","line":"#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"},
{"lineNum":"  706","line":"#pragma GCC system_header"},
{"lineNum":"  707","line":"#endif"},
{"lineNum":"  708","line":""},
{"lineNum":"  709","line":"_LIBCPP_PUSH_MACROS"},
{"lineNum":"  710","line":"#include <__undef_macros>"},
{"lineNum":"  711","line":""},
{"lineNum":"  712","line":""},
{"lineNum":"  713","line":"_LIBCPP_BEGIN_NAMESPACE_STD"},
{"lineNum":"  714","line":""},
{"lineNum":"  715","line":"template <class _Alloc, class _Ptr>"},
{"lineNum":"  716","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  717","line":"void __construct_forward_with_exception_guarantees(_Alloc& __a, _Ptr __begin1, _Ptr __end1, _Ptr& __begin2) {"},
{"lineNum":"  718","line":"    static_assert(__is_cpp17_move_insertable<_Alloc>::value,"},
{"lineNum":"  719","line":"        \"The specified type does not meet the requirements of Cpp17MoveInsertable\");"},
{"lineNum":"  720","line":"    typedef allocator_traits<_Alloc> _Traits;"},
{"lineNum":"  721","line":"    for (; __begin1 != __end1; ++__begin1, (void)++__begin2) {","class":"linePartCov","hits":"1","order":"586","possible_hits":"17",},
{"lineNum":"  722","line":"        _Traits::construct(__a, _VSTD::__to_address(__begin2),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  723","line":"#ifdef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  724","line":"            _VSTD::move(*__begin1)"},
{"lineNum":"  725","line":"#else"},
{"lineNum":"  726","line":"            _VSTD::move_if_noexcept(*__begin1)"},
{"lineNum":"  727","line":"#endif"},
{"lineNum":"  728","line":"        );"},
{"lineNum":"  729","line":"    }"},
{"lineNum":"  730","line":"}"},
{"lineNum":"  731","line":""},
{"lineNum":"  732","line":"template <class _Alloc, class _Tp, typename enable_if<"},
{"lineNum":"  733","line":"    (__is_default_allocator<_Alloc>::value || !__has_construct<_Alloc, _Tp*, _Tp>::value) &&"},
{"lineNum":"  734","line":"    is_trivially_move_constructible<_Tp>::value"},
{"lineNum":"  735","line":">::type>"},
{"lineNum":"  736","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  737","line":"void __construct_forward_with_exception_guarantees(_Alloc&, _Tp* __begin1, _Tp* __end1, _Tp*& __begin2) {"},
{"lineNum":"  738","line":"    ptrdiff_t _Np = __end1 - __begin1;"},
{"lineNum":"  739","line":"    if (_Np > 0) {"},
{"lineNum":"  740","line":"        _VSTD::memcpy(__begin2, __begin1, _Np * sizeof(_Tp));"},
{"lineNum":"  741","line":"        __begin2 += _Np;"},
{"lineNum":"  742","line":"    }"},
{"lineNum":"  743","line":"}"},
{"lineNum":"  744","line":""},
{"lineNum":"  745","line":"template <class _Alloc, class _Iter, class _Ptr>"},
{"lineNum":"  746","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  747","line":"void __construct_range_forward(_Alloc& __a, _Iter __begin1, _Iter __end1, _Ptr& __begin2) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  748","line":"    typedef allocator_traits<_Alloc> _Traits;"},
{"lineNum":"  749","line":"    for (; __begin1 != __end1; ++__begin1, (void) ++__begin2) {","class":"lineNoCov","hits":"0","possible_hits":"43",},
{"lineNum":"  750","line":"        _Traits::construct(__a, _VSTD::__to_address(__begin2), *__begin1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  751","line":"    }"},
{"lineNum":"  752","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  753","line":""},
{"lineNum":"  754","line":"template <class _Alloc, class _Source, class _Dest,"},
{"lineNum":"  755","line":"          class _RawSource = typename remove_const<_Source>::type,"},
{"lineNum":"  756","line":"          class _RawDest = typename remove_const<_Dest>::type,"},
{"lineNum":"  757","line":"          class ="},
{"lineNum":"  758","line":"    typename enable_if<"},
{"lineNum":"  759","line":"        is_trivially_copy_constructible<_Dest>::value &&"},
{"lineNum":"  760","line":"        is_same<_RawSource, _RawDest>::value &&"},
{"lineNum":"  761","line":"        (__is_default_allocator<_Alloc>::value || !__has_construct<_Alloc, _Dest*, _Source&>::value)"},
{"lineNum":"  762","line":"    >::type>"},
{"lineNum":"  763","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  764","line":"void __construct_range_forward(_Alloc&, _Source* __begin1, _Source* __end1, _Dest*& __begin2) {"},
{"lineNum":"  765","line":"    ptrdiff_t _Np = __end1 - __begin1;","class":"linePartCov","hits":"1","order":"558","possible_hits":"43",},
{"lineNum":"  766","line":"    if (_Np > 0) {","class":"linePartCov","hits":"2","order":"559","possible_hits":"52",},
{"lineNum":"  767","line":"        _VSTD::memcpy(const_cast<_RawDest*>(__begin2), __begin1, _Np * sizeof(_Dest));","class":"linePartCov","hits":"2","order":"560","possible_hits":"81",},
{"lineNum":"  768","line":"        __begin2 += _Np;","class":"linePartCov","hits":"2","order":"561","possible_hits":"74",},
{"lineNum":"  769","line":"    }"},
{"lineNum":"  770","line":"}"},
{"lineNum":"  771","line":""},
{"lineNum":"  772","line":"template <class _Alloc, class _Ptr>"},
{"lineNum":"  773","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  774","line":"void __construct_backward_with_exception_guarantees(_Alloc& __a, _Ptr __begin1, _Ptr __end1, _Ptr& __end2) {"},
{"lineNum":"  775","line":"    static_assert(__is_cpp17_move_insertable<_Alloc>::value,"},
{"lineNum":"  776","line":"        \"The specified type does not meet the requirements of Cpp17MoveInsertable\");"},
{"lineNum":"  777","line":"    typedef allocator_traits<_Alloc> _Traits;"},
{"lineNum":"  778","line":"    while (__end1 != __begin1) {","class":"lineNoCov","hits":"0","possible_hits":"103",},
{"lineNum":"  779","line":"        _Traits::construct(__a, _VSTD::__to_address(__end2 - 1),","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"  780","line":"#ifdef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  781","line":"            _VSTD::move(*--__end1)"},
{"lineNum":"  782","line":"#else"},
{"lineNum":"  783","line":"            _VSTD::move_if_noexcept(*--__end1)","class":"lineNoCov","hits":"0","possible_hits":"44",},
{"lineNum":"  784","line":"#endif"},
{"lineNum":"  785","line":"        );"},
{"lineNum":"  786","line":"        --__end2;","class":"lineNoCov","hits":"0","possible_hits":"22",},
{"lineNum":"  787","line":"    }"},
{"lineNum":"  788","line":"}"},
{"lineNum":"  789","line":""},
{"lineNum":"  790","line":"template <class _Alloc, class _Tp, class = typename enable_if<"},
{"lineNum":"  791","line":"    (__is_default_allocator<_Alloc>::value || !__has_construct<_Alloc, _Tp*, _Tp>::value) &&"},
{"lineNum":"  792","line":"    is_trivially_move_constructible<_Tp>::value"},
{"lineNum":"  793","line":">::type>"},
{"lineNum":"  794","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  795","line":"void __construct_backward_with_exception_guarantees(_Alloc&, _Tp* __begin1, _Tp* __end1, _Tp*& __end2) {"},
{"lineNum":"  796","line":"    ptrdiff_t _Np = __end1 - __begin1;","class":"linePartCov","hits":"3","order":"215","possible_hits":"10",},
{"lineNum":"  797","line":"    __end2 -= _Np;","class":"linePartCov","hits":"3","order":"216","possible_hits":"22",},
{"lineNum":"  798","line":"    if (_Np > 0)","class":"linePartCov","hits":"3","order":"217","possible_hits":"187",},
{"lineNum":"  799","line":"        _VSTD::memcpy(static_cast<void*>(__end2), static_cast<void const*>(__begin1), _Np * sizeof(_Tp));","class":"linePartCov","hits":"2","order":"339","possible_hits":"187",},
{"lineNum":"  800","line":"}"},
{"lineNum":"  801","line":""},
{"lineNum":"  802","line":"struct __destruct_n"},
{"lineNum":"  803","line":"{"},
{"lineNum":"  804","line":"private:"},
{"lineNum":"  805","line":"    size_t __size_;"},
{"lineNum":"  806","line":""},
{"lineNum":"  807","line":"    template <class _Tp>"},
{"lineNum":"  808","line":"    _LIBCPP_INLINE_VISIBILITY void __process(_Tp* __p, false_type) _NOEXCEPT"},
{"lineNum":"  809","line":"        {for (size_t __i = 0; __i < __size_; ++__i, ++__p) __p->~_Tp();}"},
{"lineNum":"  810","line":""},
{"lineNum":"  811","line":"    template <class _Tp>"},
{"lineNum":"  812","line":"    _LIBCPP_INLINE_VISIBILITY void __process(_Tp*, true_type) _NOEXCEPT"},
{"lineNum":"  813","line":"        {}"},
{"lineNum":"  814","line":""},
{"lineNum":"  815","line":"    _LIBCPP_INLINE_VISIBILITY void __incr(false_type) _NOEXCEPT"},
{"lineNum":"  816","line":"        {++__size_;}"},
{"lineNum":"  817","line":"    _LIBCPP_INLINE_VISIBILITY void __incr(true_type) _NOEXCEPT"},
{"lineNum":"  818","line":"        {}"},
{"lineNum":"  819","line":""},
{"lineNum":"  820","line":"    _LIBCPP_INLINE_VISIBILITY void __set(size_t __s, false_type) _NOEXCEPT"},
{"lineNum":"  821","line":"        {__size_ = __s;}"},
{"lineNum":"  822","line":"    _LIBCPP_INLINE_VISIBILITY void __set(size_t, true_type) _NOEXCEPT"},
{"lineNum":"  823","line":"        {}"},
{"lineNum":"  824","line":"public:"},
{"lineNum":"  825","line":"    _LIBCPP_INLINE_VISIBILITY explicit __destruct_n(size_t __s) _NOEXCEPT"},
{"lineNum":"  826","line":"        : __size_(__s) {}"},
{"lineNum":"  827","line":""},
{"lineNum":"  828","line":"    template <class _Tp>"},
{"lineNum":"  829","line":"    _LIBCPP_INLINE_VISIBILITY void __incr() _NOEXCEPT"},
{"lineNum":"  830","line":"        {__incr(integral_constant<bool, is_trivially_destructible<_Tp>::value>());}"},
{"lineNum":"  831","line":""},
{"lineNum":"  832","line":"    template <class _Tp>"},
{"lineNum":"  833","line":"    _LIBCPP_INLINE_VISIBILITY void __set(size_t __s, _Tp*) _NOEXCEPT"},
{"lineNum":"  834","line":"        {__set(__s, integral_constant<bool, is_trivially_destructible<_Tp>::value>());}"},
{"lineNum":"  835","line":""},
{"lineNum":"  836","line":"    template <class _Tp>"},
{"lineNum":"  837","line":"    _LIBCPP_INLINE_VISIBILITY void operator()(_Tp* __p) _NOEXCEPT"},
{"lineNum":"  838","line":"        {__process(__p, integral_constant<bool, is_trivially_destructible<_Tp>::value>());}"},
{"lineNum":"  839","line":"};"},
{"lineNum":"  840","line":""},
{"lineNum":"  841","line":"_LIBCPP_FUNC_VIS void* align(size_t __align, size_t __sz, void*& __ptr, size_t& __space);"},
{"lineNum":"  842","line":""},
{"lineNum":"  843","line":"// --- Helper for container swap --"},
{"lineNum":"  844","line":"template <typename _Alloc>"},
{"lineNum":"  845","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  846","line":"void __swap_allocator(_Alloc & __a1, _Alloc & __a2, true_type)"},
{"lineNum":"  847","line":"#if _LIBCPP_STD_VER >= 14"},
{"lineNum":"  848","line":"    _NOEXCEPT"},
{"lineNum":"  849","line":"#else"},
{"lineNum":"  850","line":"    _NOEXCEPT_(__is_nothrow_swappable<_Alloc>::value)"},
{"lineNum":"  851","line":"#endif"},
{"lineNum":"  852","line":"{"},
{"lineNum":"  853","line":"    using _VSTD::swap;"},
{"lineNum":"  854","line":"    swap(__a1, __a2);"},
{"lineNum":"  855","line":"}"},
{"lineNum":"  856","line":""},
{"lineNum":"  857","line":"template <typename _Alloc>"},
{"lineNum":"  858","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  859","line":"void __swap_allocator(_Alloc &, _Alloc &, false_type) _NOEXCEPT {}"},
{"lineNum":"  860","line":""},
{"lineNum":"  861","line":"template <typename _Alloc>"},
{"lineNum":"  862","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  863","line":"void __swap_allocator(_Alloc & __a1, _Alloc & __a2)"},
{"lineNum":"  864","line":"#if _LIBCPP_STD_VER >= 14"},
{"lineNum":"  865","line":"    _NOEXCEPT"},
{"lineNum":"  866","line":"#else"},
{"lineNum":"  867","line":"    _NOEXCEPT_(__is_nothrow_swappable<_Alloc>::value)"},
{"lineNum":"  868","line":"#endif"},
{"lineNum":"  869","line":"{"},
{"lineNum":"  870","line":"    _VSTD::__swap_allocator(__a1, __a2,"},
{"lineNum":"  871","line":"      integral_constant<bool, allocator_traits<_Alloc>::propagate_on_container_swap::value>());"},
{"lineNum":"  872","line":"}"},
{"lineNum":"  873","line":""},
{"lineNum":"  874","line":"template <typename _Alloc, typename _Traits=allocator_traits<_Alloc> >"},
{"lineNum":"  875","line":"struct __noexcept_move_assign_container : public integral_constant<bool,"},
{"lineNum":"  876","line":"    _Traits::propagate_on_container_move_assignment::value"},
{"lineNum":"  877","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":"  878","line":"        || _Traits::is_always_equal::value"},
{"lineNum":"  879","line":"#else"},
{"lineNum":"  880","line":"        && is_nothrow_move_assignable<_Alloc>::value"},
{"lineNum":"  881","line":"#endif"},
{"lineNum":"  882","line":"    > {};"},
{"lineNum":"  883","line":""},
{"lineNum":"  884","line":""},
{"lineNum":"  885","line":"template <class _Tp, class _Alloc>"},
{"lineNum":"  886","line":"struct __temp_value {"},
{"lineNum":"  887","line":"    typedef allocator_traits<_Alloc> _Traits;"},
{"lineNum":"  888","line":""},
{"lineNum":"  889","line":"    typename aligned_storage<sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp)>::type __v;"},
{"lineNum":"  890","line":"    _Alloc &__a;"},
{"lineNum":"  891","line":""},
{"lineNum":"  892","line":"    _Tp *__addr() { return reinterpret_cast<_Tp *>(addressof(__v)); }"},
{"lineNum":"  893","line":"    _Tp &   get() { return *__addr(); }"},
{"lineNum":"  894","line":""},
{"lineNum":"  895","line":"    template<class... _Args>"},
{"lineNum":"  896","line":"    _LIBCPP_NO_CFI"},
{"lineNum":"  897","line":"    __temp_value(_Alloc &__alloc, _Args&& ... __args) : __a(__alloc) {"},
{"lineNum":"  898","line":"      _Traits::construct(__a, reinterpret_cast<_Tp*>(addressof(__v)),"},
{"lineNum":"  899","line":"                         _VSTD::forward<_Args>(__args)...);"},
{"lineNum":"  900","line":"    }"},
{"lineNum":"  901","line":""},
{"lineNum":"  902","line":"    ~__temp_value() { _Traits::destroy(__a, __addr()); }"},
{"lineNum":"  903","line":"    };"},
{"lineNum":"  904","line":""},
{"lineNum":"  905","line":"template<typename _Alloc, typename = void, typename = void>"},
{"lineNum":"  906","line":"struct __is_allocator : false_type {};"},
{"lineNum":"  907","line":""},
{"lineNum":"  908","line":"template<typename _Alloc>"},
{"lineNum":"  909","line":"struct __is_allocator<_Alloc,"},
{"lineNum":"  910","line":"       typename __void_t<typename _Alloc::value_type>::type,"},
{"lineNum":"  911","line":"       typename __void_t<decltype(declval<_Alloc&>().allocate(size_t(0)))>::type"},
{"lineNum":"  912","line":"     >"},
{"lineNum":"  913","line":"   : true_type {};"},
{"lineNum":"  914","line":""},
{"lineNum":"  915","line":"// __builtin_new_allocator -- A non-templated helper for allocating and"},
{"lineNum":"  916","line":"// deallocating memory using __builtin_operator_new and"},
{"lineNum":"  917","line":"// __builtin_operator_delete. It should be used in preference to"},
{"lineNum":"  918","line":"// `std::allocator<T>` to avoid additional instantiations."},
{"lineNum":"  919","line":"struct __builtin_new_allocator {"},
{"lineNum":"  920","line":"  struct __builtin_new_deleter {"},
{"lineNum":"  921","line":"    typedef void* pointer_type;"},
{"lineNum":"  922","line":""},
{"lineNum":"  923","line":"    _LIBCPP_CONSTEXPR explicit __builtin_new_deleter(size_t __size, size_t __align)"},
{"lineNum":"  924","line":"        : __size_(__size), __align_(__align) {}"},
{"lineNum":"  925","line":""},
{"lineNum":"  926","line":"    void operator()(void* p) const _NOEXCEPT {"},
{"lineNum":"  927","line":"        _VSTD::__libcpp_deallocate(p, __size_, __align_);"},
{"lineNum":"  928","line":"    }"},
{"lineNum":"  929","line":""},
{"lineNum":"  930","line":"   private:"},
{"lineNum":"  931","line":"    size_t __size_;"},
{"lineNum":"  932","line":"    size_t __align_;"},
{"lineNum":"  933","line":"  };"},
{"lineNum":"  934","line":""},
{"lineNum":"  935","line":"  typedef unique_ptr<void, __builtin_new_deleter> __holder_t;"},
{"lineNum":"  936","line":""},
{"lineNum":"  937","line":"  static __holder_t __allocate_bytes(size_t __s, size_t __align) {"},
{"lineNum":"  938","line":"      return __holder_t(_VSTD::__libcpp_allocate(__s, __align),"},
{"lineNum":"  939","line":"                     __builtin_new_deleter(__s, __align));"},
{"lineNum":"  940","line":"  }"},
{"lineNum":"  941","line":""},
{"lineNum":"  942","line":"  static void __deallocate_bytes(void* __p, size_t __s,"},
{"lineNum":"  943","line":"                                 size_t __align) _NOEXCEPT {"},
{"lineNum":"  944","line":"      _VSTD::__libcpp_deallocate(__p, __s, __align);"},
{"lineNum":"  945","line":"  }"},
{"lineNum":"  946","line":""},
{"lineNum":"  947","line":"  template <class _Tp>"},
{"lineNum":"  948","line":"  _LIBCPP_NODEBUG _LIBCPP_ALWAYS_INLINE"},
{"lineNum":"  949","line":"  static __holder_t __allocate_type(size_t __n) {"},
{"lineNum":"  950","line":"      return __allocate_bytes(__n * sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp));"},
{"lineNum":"  951","line":"  }"},
{"lineNum":"  952","line":""},
{"lineNum":"  953","line":"  template <class _Tp>"},
{"lineNum":"  954","line":"  _LIBCPP_NODEBUG _LIBCPP_ALWAYS_INLINE"},
{"lineNum":"  955","line":"  static void __deallocate_type(void* __p, size_t __n) _NOEXCEPT {"},
{"lineNum":"  956","line":"      __deallocate_bytes(__p, __n * sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp));"},
{"lineNum":"  957","line":"  }"},
{"lineNum":"  958","line":"};"},
{"lineNum":"  959","line":""},
{"lineNum":"  960","line":""},
{"lineNum":"  961","line":"_LIBCPP_END_NAMESPACE_STD"},
{"lineNum":"  962","line":""},
{"lineNum":"  963","line":"_LIBCPP_POP_MACROS"},
{"lineNum":"  964","line":""},
{"lineNum":"  965","line":"#if defined(_LIBCPP_HAS_PARALLEL_ALGORITHMS) && _LIBCPP_STD_VER >= 17"},
{"lineNum":"  966","line":"#   include <__pstl_memory>"},
{"lineNum":"  967","line":"#endif"},
{"lineNum":"  968","line":""},
{"lineNum":"  969","line":"#endif // _LIBCPP_MEMORY"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 18, "covered" : 9,};
var merged_data = [];
