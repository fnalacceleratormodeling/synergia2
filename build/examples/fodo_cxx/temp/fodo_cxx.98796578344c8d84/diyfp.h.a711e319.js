var data = {lines:[
{"lineNum":"    1","line":"// Tencent is pleased to support the open source community by making RapidJSON available."},
{"lineNum":"    2","line":"//"},
{"lineNum":"    3","line":"// Copyright (C) 2015 THL A29 Limited, a Tencent company, and Milo Yip. All rights reserved."},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// Licensed under the MIT License (the \"License\"); you may not use this file except"},
{"lineNum":"    6","line":"// in compliance with the License. You may obtain a copy of the License at"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"// http://opensource.org/licenses/MIT"},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// Unless required by applicable law or agreed to in writing, software distributed"},
{"lineNum":"   11","line":"// under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR"},
{"lineNum":"   12","line":"// CONDITIONS OF ANY KIND, either express or implied. See the License for the"},
{"lineNum":"   13","line":"// specific language governing permissions and limitations under the License."},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"// This is a C++ header-only implementation of Grisu2 algorithm from the publication:"},
{"lineNum":"   16","line":"// Loitsch, Florian. \"Printing floating-point numbers quickly and accurately with"},
{"lineNum":"   17","line":"// integers.\" ACM Sigplan Notices 45.6 (2010): 233-243."},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"#ifndef CEREAL_RAPIDJSON_DIYFP_H_"},
{"lineNum":"   20","line":"#define CEREAL_RAPIDJSON_DIYFP_H_"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"#include \"../rapidjson.h\""},
{"lineNum":"   23","line":"#include <limits>"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"#if defined(_MSC_VER) && defined(_M_AMD64) && !defined(__INTEL_COMPILER)"},
{"lineNum":"   26","line":"#include <intrin.h>"},
{"lineNum":"   27","line":"#pragma intrinsic(_BitScanReverse64)"},
{"lineNum":"   28","line":"#pragma intrinsic(_umul128)"},
{"lineNum":"   29","line":"#endif"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"CEREAL_RAPIDJSON_NAMESPACE_BEGIN"},
{"lineNum":"   32","line":"namespace internal {"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"#ifdef __GNUC__"},
{"lineNum":"   35","line":"CEREAL_RAPIDJSON_DIAG_PUSH"},
{"lineNum":"   36","line":"CEREAL_RAPIDJSON_DIAG_OFF(effc++)"},
{"lineNum":"   37","line":"#endif"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"#ifdef __clang__"},
{"lineNum":"   40","line":"CEREAL_RAPIDJSON_DIAG_PUSH"},
{"lineNum":"   41","line":"CEREAL_RAPIDJSON_DIAG_OFF(padded)"},
{"lineNum":"   42","line":"#endif"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"struct DiyFp {"},
{"lineNum":"   45","line":"    DiyFp() : f(), e() {}"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"    DiyFp(uint64_t fp, int exp) : f(fp), e(exp) {}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"    explicit DiyFp(double d) {"},
{"lineNum":"   50","line":"        union {"},
{"lineNum":"   51","line":"            double d;"},
{"lineNum":"   52","line":"            uint64_t u64;"},
{"lineNum":"   53","line":"        } u = { d };"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"        int biased_e = static_cast<int>((u.u64 & kDpExponentMask) >> kDpSignificandSize);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   56","line":"        uint64_t significand = (u.u64 & kDpSignificandMask);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   57","line":"        if (biased_e != 0) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   58","line":"            f = significand + kDpHiddenBit;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   59","line":"            e = biased_e - kDpExponentBias;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   60","line":"        }"},
{"lineNum":"   61","line":"        else {"},
{"lineNum":"   62","line":"            f = significand;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   63","line":"            e = kDpMinExponent + 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   64","line":"        }"},
{"lineNum":"   65","line":"    }"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"    DiyFp operator-(const DiyFp& rhs) const {"},
{"lineNum":"   68","line":"        return DiyFp(f - rhs.f, e);","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   69","line":"    }"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"    DiyFp operator*(const DiyFp& rhs) const {"},
{"lineNum":"   72","line":"#if defined(_MSC_VER) && defined(_M_AMD64)"},
{"lineNum":"   73","line":"        uint64_t h;"},
{"lineNum":"   74","line":"        uint64_t l = _umul128(f, rhs.f, &h);"},
{"lineNum":"   75","line":"        if (l & (uint64_t(1) << 63)) // rounding"},
{"lineNum":"   76","line":"            h++;"},
{"lineNum":"   77","line":"        return DiyFp(h, e + rhs.e + 64);"},
{"lineNum":"   78","line":"#elif (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)) && defined(__x86_64__)"},
{"lineNum":"   79","line":"        __extension__ typedef unsigned __int128 uint128;"},
{"lineNum":"   80","line":"        uint128 p = static_cast<uint128>(f) * static_cast<uint128>(rhs.f);"},
{"lineNum":"   81","line":"        uint64_t h = static_cast<uint64_t>(p >> 64);"},
{"lineNum":"   82","line":"        uint64_t l = static_cast<uint64_t>(p);"},
{"lineNum":"   83","line":"        if (l & (uint64_t(1) << 63)) // rounding"},
{"lineNum":"   84","line":"            h++;"},
{"lineNum":"   85","line":"        return DiyFp(h, e + rhs.e + 64);"},
{"lineNum":"   86","line":"#else"},
{"lineNum":"   87","line":"        const uint64_t M32 = 0xFFFFFFFF;"},
{"lineNum":"   88","line":"        const uint64_t a = f >> 32;","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"   89","line":"        const uint64_t b = f & M32;","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   90","line":"        const uint64_t c = rhs.f >> 32;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   91","line":"        const uint64_t d = rhs.f & M32;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   92","line":"        const uint64_t ac = a * c;","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"   93","line":"        const uint64_t bc = b * c;","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"   94","line":"        const uint64_t ad = a * d;","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"   95","line":"        const uint64_t bd = b * d;","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"   96","line":"        uint64_t tmp = (bd >> 32) + (ad & M32) + (bc & M32);","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"   97","line":"        tmp += 1U << 31;  /// mult_round","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"   98","line":"        return DiyFp(ac + (ad >> 32) + (bc >> 32) + (tmp >> 32), e + rhs.e + 64);","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"   99","line":"#endif"},
{"lineNum":"  100","line":"    }"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"    DiyFp Normalize() const {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  103","line":"        CEREAL_RAPIDJSON_ASSERT(f != 0); // https://stackoverflow.com/a/26809183/291737","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  104","line":"#if defined(_MSC_VER) && defined(_M_AMD64)"},
{"lineNum":"  105","line":"        unsigned long index;"},
{"lineNum":"  106","line":"        _BitScanReverse64(&index, f);"},
{"lineNum":"  107","line":"        return DiyFp(f << (63 - index), e - (63 - index));"},
{"lineNum":"  108","line":"#elif defined(__GNUC__) && __GNUC__ >= 4"},
{"lineNum":"  109","line":"        int s = __builtin_clzll(f);","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  110","line":"        return DiyFp(f << s, e - s);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  111","line":"#else"},
{"lineNum":"  112","line":"        DiyFp res = *this;"},
{"lineNum":"  113","line":"        while (!(res.f & (static_cast<uint64_t>(1) << 63))) {"},
{"lineNum":"  114","line":"            res.f <<= 1;"},
{"lineNum":"  115","line":"            res.e--;"},
{"lineNum":"  116","line":"        }"},
{"lineNum":"  117","line":"        return res;"},
{"lineNum":"  118","line":"#endif"},
{"lineNum":"  119","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"    DiyFp NormalizeBoundary() const {"},
{"lineNum":"  122","line":"        DiyFp res = *this;"},
{"lineNum":"  123","line":"        while (!(res.f & (kDpHiddenBit << 1))) {","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  124","line":"            res.f <<= 1;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  125","line":"            res.e--;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  126","line":"        }"},
{"lineNum":"  127","line":"        res.f <<= (kDiySignificandSize - kDpSignificandSize - 2);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  128","line":"        res.e = res.e - (kDiySignificandSize - kDpSignificandSize - 2);"},
{"lineNum":"  129","line":"        return res;"},
{"lineNum":"  130","line":"    }"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"    void NormalizedBoundaries(DiyFp* minus, DiyFp* plus) const {"},
{"lineNum":"  133","line":"        DiyFp pl = DiyFp((f << 1) + 1, e - 1).NormalizeBoundary();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  134","line":"        DiyFp mi = (f == kDpHiddenBit) ? DiyFp((f << 2) - 1, e - 2) : DiyFp((f << 1) - 1, e - 1);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  135","line":"        mi.f <<= mi.e - pl.e;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  136","line":"        mi.e = pl.e;"},
{"lineNum":"  137","line":"        *plus = pl;"},
{"lineNum":"  138","line":"        *minus = mi;"},
{"lineNum":"  139","line":"    }"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"    double ToDouble() const {"},
{"lineNum":"  142","line":"        union {"},
{"lineNum":"  143","line":"            double d;"},
{"lineNum":"  144","line":"            uint64_t u64;"},
{"lineNum":"  145","line":"        }u;"},
{"lineNum":"  146","line":"        CEREAL_RAPIDJSON_ASSERT(f <= kDpHiddenBit + kDpSignificandMask);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  147","line":"        if (e < kDpDenormalExponent) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  148","line":"            // Underflow."},
{"lineNum":"  149","line":"            return 0.0;"},
{"lineNum":"  150","line":"        }"},
{"lineNum":"  151","line":"        if (e >= kDpMaxExponent) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  152","line":"            // Overflow."},
{"lineNum":"  153","line":"            return std::numeric_limits<double>::infinity();"},
{"lineNum":"  154","line":"        }"},
{"lineNum":"  155","line":"        const uint64_t be = (e == kDpDenormalExponent && (f & kDpHiddenBit) == 0) ? 0 :","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  156","line":"            static_cast<uint64_t>(e + kDpExponentBias);"},
{"lineNum":"  157","line":"        u.u64 = (f & kDpSignificandMask) | (be << kDpSignificandSize);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  158","line":"        return u.d;"},
{"lineNum":"  159","line":"    }"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"    static const int kDiySignificandSize = 64;"},
{"lineNum":"  162","line":"    static const int kDpSignificandSize = 52;"},
{"lineNum":"  163","line":"    static const int kDpExponentBias = 0x3FF + kDpSignificandSize;"},
{"lineNum":"  164","line":"    static const int kDpMaxExponent = 0x7FF - kDpExponentBias;"},
{"lineNum":"  165","line":"    static const int kDpMinExponent = -kDpExponentBias;"},
{"lineNum":"  166","line":"    static const int kDpDenormalExponent = -kDpExponentBias + 1;"},
{"lineNum":"  167","line":"    static const uint64_t kDpExponentMask = CEREAL_RAPIDJSON_UINT64_C2(0x7FF00000, 0x00000000);"},
{"lineNum":"  168","line":"    static const uint64_t kDpSignificandMask = CEREAL_RAPIDJSON_UINT64_C2(0x000FFFFF, 0xFFFFFFFF);"},
{"lineNum":"  169","line":"    static const uint64_t kDpHiddenBit = CEREAL_RAPIDJSON_UINT64_C2(0x00100000, 0x00000000);"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"    uint64_t f;"},
{"lineNum":"  172","line":"    int e;"},
{"lineNum":"  173","line":"};"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"inline DiyFp GetCachedPowerByIndex(size_t index) {"},
{"lineNum":"  176","line":"    // 10^-348, 10^-340, ..., 10^340"},
{"lineNum":"  177","line":"    static const uint64_t kCachedPowers_F[] = {"},
{"lineNum":"  178","line":"        CEREAL_RAPIDJSON_UINT64_C2(0xfa8fd5a0, 0x081c0288), CEREAL_RAPIDJSON_UINT64_C2(0xbaaee17f, 0xa23ebf76),"},
{"lineNum":"  179","line":"        CEREAL_RAPIDJSON_UINT64_C2(0x8b16fb20, 0x3055ac76), CEREAL_RAPIDJSON_UINT64_C2(0xcf42894a, 0x5dce35ea),"},
{"lineNum":"  180","line":"        CEREAL_RAPIDJSON_UINT64_C2(0x9a6bb0aa, 0x55653b2d), CEREAL_RAPIDJSON_UINT64_C2(0xe61acf03, 0x3d1a45df),"},
{"lineNum":"  181","line":"        CEREAL_RAPIDJSON_UINT64_C2(0xab70fe17, 0xc79ac6ca), CEREAL_RAPIDJSON_UINT64_C2(0xff77b1fc, 0xbebcdc4f),"},
{"lineNum":"  182","line":"        CEREAL_RAPIDJSON_UINT64_C2(0xbe5691ef, 0x416bd60c), CEREAL_RAPIDJSON_UINT64_C2(0x8dd01fad, 0x907ffc3c),"},
{"lineNum":"  183","line":"        CEREAL_RAPIDJSON_UINT64_C2(0xd3515c28, 0x31559a83), CEREAL_RAPIDJSON_UINT64_C2(0x9d71ac8f, 0xada6c9b5),"},
{"lineNum":"  184","line":"        CEREAL_RAPIDJSON_UINT64_C2(0xea9c2277, 0x23ee8bcb), CEREAL_RAPIDJSON_UINT64_C2(0xaecc4991, 0x4078536d),"},
{"lineNum":"  185","line":"        CEREAL_RAPIDJSON_UINT64_C2(0x823c1279, 0x5db6ce57), CEREAL_RAPIDJSON_UINT64_C2(0xc2109436, 0x4dfb5637),"},
{"lineNum":"  186","line":"        CEREAL_RAPIDJSON_UINT64_C2(0x9096ea6f, 0x3848984f), CEREAL_RAPIDJSON_UINT64_C2(0xd77485cb, 0x25823ac7),"},
{"lineNum":"  187","line":"        CEREAL_RAPIDJSON_UINT64_C2(0xa086cfcd, 0x97bf97f4), CEREAL_RAPIDJSON_UINT64_C2(0xef340a98, 0x172aace5),"},
{"lineNum":"  188","line":"        CEREAL_RAPIDJSON_UINT64_C2(0xb23867fb, 0x2a35b28e), CEREAL_RAPIDJSON_UINT64_C2(0x84c8d4df, 0xd2c63f3b),"},
{"lineNum":"  189","line":"        CEREAL_RAPIDJSON_UINT64_C2(0xc5dd4427, 0x1ad3cdba), CEREAL_RAPIDJSON_UINT64_C2(0x936b9fce, 0xbb25c996),"},
{"lineNum":"  190","line":"        CEREAL_RAPIDJSON_UINT64_C2(0xdbac6c24, 0x7d62a584), CEREAL_RAPIDJSON_UINT64_C2(0xa3ab6658, 0x0d5fdaf6),"},
{"lineNum":"  191","line":"        CEREAL_RAPIDJSON_UINT64_C2(0xf3e2f893, 0xdec3f126), CEREAL_RAPIDJSON_UINT64_C2(0xb5b5ada8, 0xaaff80b8),"},
{"lineNum":"  192","line":"        CEREAL_RAPIDJSON_UINT64_C2(0x87625f05, 0x6c7c4a8b), CEREAL_RAPIDJSON_UINT64_C2(0xc9bcff60, 0x34c13053),"},
{"lineNum":"  193","line":"        CEREAL_RAPIDJSON_UINT64_C2(0x964e858c, 0x91ba2655), CEREAL_RAPIDJSON_UINT64_C2(0xdff97724, 0x70297ebd),"},
{"lineNum":"  194","line":"        CEREAL_RAPIDJSON_UINT64_C2(0xa6dfbd9f, 0xb8e5b88f), CEREAL_RAPIDJSON_UINT64_C2(0xf8a95fcf, 0x88747d94),"},
{"lineNum":"  195","line":"        CEREAL_RAPIDJSON_UINT64_C2(0xb9447093, 0x8fa89bcf), CEREAL_RAPIDJSON_UINT64_C2(0x8a08f0f8, 0xbf0f156b),"},
{"lineNum":"  196","line":"        CEREAL_RAPIDJSON_UINT64_C2(0xcdb02555, 0x653131b6), CEREAL_RAPIDJSON_UINT64_C2(0x993fe2c6, 0xd07b7fac),"},
{"lineNum":"  197","line":"        CEREAL_RAPIDJSON_UINT64_C2(0xe45c10c4, 0x2a2b3b06), CEREAL_RAPIDJSON_UINT64_C2(0xaa242499, 0x697392d3),"},
{"lineNum":"  198","line":"        CEREAL_RAPIDJSON_UINT64_C2(0xfd87b5f2, 0x8300ca0e), CEREAL_RAPIDJSON_UINT64_C2(0xbce50864, 0x92111aeb),"},
{"lineNum":"  199","line":"        CEREAL_RAPIDJSON_UINT64_C2(0x8cbccc09, 0x6f5088cc), CEREAL_RAPIDJSON_UINT64_C2(0xd1b71758, 0xe219652c),"},
{"lineNum":"  200","line":"        CEREAL_RAPIDJSON_UINT64_C2(0x9c400000, 0x00000000), CEREAL_RAPIDJSON_UINT64_C2(0xe8d4a510, 0x00000000),"},
{"lineNum":"  201","line":"        CEREAL_RAPIDJSON_UINT64_C2(0xad78ebc5, 0xac620000), CEREAL_RAPIDJSON_UINT64_C2(0x813f3978, 0xf8940984),"},
{"lineNum":"  202","line":"        CEREAL_RAPIDJSON_UINT64_C2(0xc097ce7b, 0xc90715b3), CEREAL_RAPIDJSON_UINT64_C2(0x8f7e32ce, 0x7bea5c70),"},
{"lineNum":"  203","line":"        CEREAL_RAPIDJSON_UINT64_C2(0xd5d238a4, 0xabe98068), CEREAL_RAPIDJSON_UINT64_C2(0x9f4f2726, 0x179a2245),"},
{"lineNum":"  204","line":"        CEREAL_RAPIDJSON_UINT64_C2(0xed63a231, 0xd4c4fb27), CEREAL_RAPIDJSON_UINT64_C2(0xb0de6538, 0x8cc8ada8),"},
{"lineNum":"  205","line":"        CEREAL_RAPIDJSON_UINT64_C2(0x83c7088e, 0x1aab65db), CEREAL_RAPIDJSON_UINT64_C2(0xc45d1df9, 0x42711d9a),"},
{"lineNum":"  206","line":"        CEREAL_RAPIDJSON_UINT64_C2(0x924d692c, 0xa61be758), CEREAL_RAPIDJSON_UINT64_C2(0xda01ee64, 0x1a708dea),"},
{"lineNum":"  207","line":"        CEREAL_RAPIDJSON_UINT64_C2(0xa26da399, 0x9aef774a), CEREAL_RAPIDJSON_UINT64_C2(0xf209787b, 0xb47d6b85),"},
{"lineNum":"  208","line":"        CEREAL_RAPIDJSON_UINT64_C2(0xb454e4a1, 0x79dd1877), CEREAL_RAPIDJSON_UINT64_C2(0x865b8692, 0x5b9bc5c2),"},
{"lineNum":"  209","line":"        CEREAL_RAPIDJSON_UINT64_C2(0xc83553c5, 0xc8965d3d), CEREAL_RAPIDJSON_UINT64_C2(0x952ab45c, 0xfa97a0b3),"},
{"lineNum":"  210","line":"        CEREAL_RAPIDJSON_UINT64_C2(0xde469fbd, 0x99a05fe3), CEREAL_RAPIDJSON_UINT64_C2(0xa59bc234, 0xdb398c25),"},
{"lineNum":"  211","line":"        CEREAL_RAPIDJSON_UINT64_C2(0xf6c69a72, 0xa3989f5c), CEREAL_RAPIDJSON_UINT64_C2(0xb7dcbf53, 0x54e9bece),"},
{"lineNum":"  212","line":"        CEREAL_RAPIDJSON_UINT64_C2(0x88fcf317, 0xf22241e2), CEREAL_RAPIDJSON_UINT64_C2(0xcc20ce9b, 0xd35c78a5),"},
{"lineNum":"  213","line":"        CEREAL_RAPIDJSON_UINT64_C2(0x98165af3, 0x7b2153df), CEREAL_RAPIDJSON_UINT64_C2(0xe2a0b5dc, 0x971f303a),"},
{"lineNum":"  214","line":"        CEREAL_RAPIDJSON_UINT64_C2(0xa8d9d153, 0x5ce3b396), CEREAL_RAPIDJSON_UINT64_C2(0xfb9b7cd9, 0xa4a7443c),"},
{"lineNum":"  215","line":"        CEREAL_RAPIDJSON_UINT64_C2(0xbb764c4c, 0xa7a44410), CEREAL_RAPIDJSON_UINT64_C2(0x8bab8eef, 0xb6409c1a),"},
{"lineNum":"  216","line":"        CEREAL_RAPIDJSON_UINT64_C2(0xd01fef10, 0xa657842c), CEREAL_RAPIDJSON_UINT64_C2(0x9b10a4e5, 0xe9913129),"},
{"lineNum":"  217","line":"        CEREAL_RAPIDJSON_UINT64_C2(0xe7109bfb, 0xa19c0c9d), CEREAL_RAPIDJSON_UINT64_C2(0xac2820d9, 0x623bf429),"},
{"lineNum":"  218","line":"        CEREAL_RAPIDJSON_UINT64_C2(0x80444b5e, 0x7aa7cf85), CEREAL_RAPIDJSON_UINT64_C2(0xbf21e440, 0x03acdd2d),"},
{"lineNum":"  219","line":"        CEREAL_RAPIDJSON_UINT64_C2(0x8e679c2f, 0x5e44ff8f), CEREAL_RAPIDJSON_UINT64_C2(0xd433179d, 0x9c8cb841),"},
{"lineNum":"  220","line":"        CEREAL_RAPIDJSON_UINT64_C2(0x9e19db92, 0xb4e31ba9), CEREAL_RAPIDJSON_UINT64_C2(0xeb96bf6e, 0xbadf77d9),"},
{"lineNum":"  221","line":"        CEREAL_RAPIDJSON_UINT64_C2(0xaf87023b, 0x9bf0ee6b)"},
{"lineNum":"  222","line":"    };"},
{"lineNum":"  223","line":"    static const int16_t kCachedPowers_E[] = {"},
{"lineNum":"  224","line":"        -1220, -1193, -1166, -1140, -1113, -1087, -1060, -1034, -1007,  -980,"},
{"lineNum":"  225","line":"        -954,  -927,  -901,  -874,  -847,  -821,  -794,  -768,  -741,  -715,"},
{"lineNum":"  226","line":"        -688,  -661,  -635,  -608,  -582,  -555,  -529,  -502,  -475,  -449,"},
{"lineNum":"  227","line":"        -422,  -396,  -369,  -343,  -316,  -289,  -263,  -236,  -210,  -183,"},
{"lineNum":"  228","line":"        -157,  -130,  -103,   -77,   -50,   -24,     3,    30,    56,    83,"},
{"lineNum":"  229","line":"        109,   136,   162,   189,   216,   242,   269,   295,   322,   348,"},
{"lineNum":"  230","line":"        375,   402,   428,   455,   481,   508,   534,   561,   588,   614,"},
{"lineNum":"  231","line":"        641,   667,   694,   720,   747,   774,   800,   827,   853,   880,"},
{"lineNum":"  232","line":"        907,   933,   960,   986,  1013,  1039,  1066"},
{"lineNum":"  233","line":"    };"},
{"lineNum":"  234","line":"    CEREAL_RAPIDJSON_ASSERT(index < 87);","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  235","line":"    return DiyFp(kCachedPowers_F[index], kCachedPowers_E[index]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  236","line":"}"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"inline DiyFp GetCachedPower(int e, int* K) {"},
{"lineNum":"  239","line":""},
{"lineNum":"  240","line":"    //int k = static_cast<int>(ceil((-61 - e) * 0.30102999566398114)) + 374;"},
{"lineNum":"  241","line":"    double dk = (-61 - e) * 0.30102999566398114 + 347;  // dk must be positive, so can do ceiling in positive","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  242","line":"    int k = static_cast<int>(dk);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  243","line":"    if (dk - k > 0.0)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  244","line":"        k++;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"    unsigned index = static_cast<unsigned>((k >> 3) + 1);","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  247","line":"    *K = -(-348 + static_cast<int>(index << 3));    // decimal exponent no need lookup table","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"    return GetCachedPowerByIndex(index);"},
{"lineNum":"  250","line":"}"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"inline DiyFp GetCachedPower10(int exp, int *outExp) {"},
{"lineNum":"  253","line":"    CEREAL_RAPIDJSON_ASSERT(exp >= -348);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  254","line":"    unsigned index = static_cast<unsigned>(exp + 348) / 8u;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  255","line":"    *outExp = -348 + static_cast<int>(index) * 8;"},
{"lineNum":"  256","line":"    return GetCachedPowerByIndex(index);"},
{"lineNum":"  257","line":"}"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"#ifdef __GNUC__"},
{"lineNum":"  260","line":"CEREAL_RAPIDJSON_DIAG_POP"},
{"lineNum":"  261","line":"#endif"},
{"lineNum":"  262","line":""},
{"lineNum":"  263","line":"#ifdef __clang__"},
{"lineNum":"  264","line":"CEREAL_RAPIDJSON_DIAG_POP"},
{"lineNum":"  265","line":"CEREAL_RAPIDJSON_DIAG_OFF(padded)"},
{"lineNum":"  266","line":"#endif"},
{"lineNum":"  267","line":""},
{"lineNum":"  268","line":"} // namespace internal"},
{"lineNum":"  269","line":"CEREAL_RAPIDJSON_NAMESPACE_END"},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"#endif // CEREAL_RAPIDJSON_DIYFP_H_"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 47, "covered" : 0,};
var merged_data = [];
