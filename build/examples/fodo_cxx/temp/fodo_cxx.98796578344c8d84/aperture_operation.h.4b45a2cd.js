var data = {lines:[
{"lineNum":"    1","line":"#ifndef APERTURE_OPERATION_H_"},
{"lineNum":"    2","line":"#define APERTURE_OPERATION_H_"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#include \"synergia/simulation/independent_operation.h\""},
{"lineNum":"    5","line":"#include \"synergia/foundation/math_constants.h\""},
{"lineNum":"    6","line":"#include \"synergia/utils/simple_timer.h\""},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"template<class AP>"},
{"lineNum":"    9","line":"class Aperture_operation : public Independent_operation","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"   10","line":"{"},
{"lineNum":"   11","line":"private:"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"    Lattice_element_slice slice;"},
{"lineNum":"   14","line":"    AP ap;"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"private:"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"    void apply_impl(Bunch & bunch, Logger & logger) const override"},
{"lineNum":"   19","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   20","line":"        scoped_simple_timer timer(std::string(\"aperture_\") + ap.type);"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"        int ndiscarded = bunch.apply_aperture(ap);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   23","line":"        double charge = ndiscarded * bunch.get_real_num() / bunch.get_total_num();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   24","line":"        slice"},
{"lineNum":"   25","line":"            .get_lattice_element()"},
{"lineNum":"   26","line":"            .deposit_charge(charge,"},
{"lineNum":"   27","line":"                    bunch.get_bunch_index(),"},
{"lineNum":"   28","line":"                    bunch.get_train_index());"},
{"lineNum":"   29","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"public:"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"    Aperture_operation(Lattice_element_slice const& slice)"},
{"lineNum":"   34","line":"        : Independent_operation(\"aperture\"), slice(slice), ap(slice.get_lattice_element())","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   35","line":"    { }","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"    std::string const& get_aperture_type() const"},
{"lineNum":"   38","line":"    { return ap.type; }"},
{"lineNum":"   39","line":"};"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"struct Dummy_aperture"},
{"lineNum":"   42","line":"{"},
{"lineNum":"   43","line":"    constexpr static const char *type = \"dummy\";"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"    Dummy_aperture(Lattice_element const&)"},
{"lineNum":"   46","line":"    { }"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   49","line":"    bool discard(ConstParticles const&,"},
{"lineNum":"   50","line":"            ConstParticleMasks const&, int p) const"},
{"lineNum":"   51","line":"    { return false; }"},
{"lineNum":"   52","line":"};"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"/// An aperture to remove all particles with infinite and/or NaN coordinates."},
{"lineNum":"   57","line":"struct Finite_aperture"},
{"lineNum":"   58","line":"{"},
{"lineNum":"   59","line":"    constexpr static const char *type = \"finite\";"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"    Finite_aperture(Lattice_element const&)"},
{"lineNum":"   62","line":"    { }"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   65","line":"    bool discard(ConstParticles const& parts,"},
{"lineNum":"   66","line":"            ConstParticleMasks const&, int p) const"},
{"lineNum":"   67","line":"    {"},
{"lineNum":"   68","line":"#if 1"},
{"lineNum":"   69","line":"        if (  !std::isfinite(parts(p, 0))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   70","line":"           || !std::isfinite(parts(p, 1))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   71","line":"           || !std::isfinite(parts(p, 2))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   72","line":"           || !std::isfinite(parts(p, 3))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   73","line":"           || !std::isfinite(parts(p, 4))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   74","line":"           || !std::isfinite(parts(p, 5)) ) return true;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   75","line":"#endif"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"#if 0"},
{"lineNum":"   78","line":"        // TODO: std::isinfinite() and -ffast-math/-fno-finite-math-only issue"},
{"lineNum":"   79","line":"        if (  __isinf(parts(p, 0)) || __isnan(parts(p, 0))"},
{"lineNum":"   80","line":"           || __isinf(parts(p, 1)) || __isnan(parts(p, 1))"},
{"lineNum":"   81","line":"           || __isinf(parts(p, 2)) || __isnan(parts(p, 2))"},
{"lineNum":"   82","line":"           || __isinf(parts(p, 3)) || __isnan(parts(p, 3))"},
{"lineNum":"   83","line":"           || __isinf(parts(p, 4)) || __isnan(parts(p, 4))"},
{"lineNum":"   84","line":"           || __isinf(parts(p, 5)) || __isnan(parts(p, 5)) ) return true;"},
{"lineNum":"   85","line":"#endif"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"        double pt = 1.0 + parts(p, 5);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   88","line":"        double px = parts(p, 1);"},
{"lineNum":"   89","line":"        double py = parts(p, 3);"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"        return pt*pt - px*px - py*py < 0.0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   92","line":"    }"},
{"lineNum":"   93","line":"};"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"/// A circular aperture with radius in meters determined by the"},
{"lineNum":"   96","line":"/// Lattice_element attribute \"circular_aperture_radius\"."},
{"lineNum":"   97","line":"/// If the radius is not defined, the default value of 1000.0 m will"},
{"lineNum":"   98","line":"/// be used."},
{"lineNum":"   99","line":"struct Circular_aperture"},
{"lineNum":"  100","line":"{"},
{"lineNum":"  101","line":"    constexpr static const char *type = \"circular\";"},
{"lineNum":"  102","line":"    double r2, xoff, yoff;"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"    Circular_aperture(Lattice_element const& ele)"},
{"lineNum":"  105","line":"        : r2(1000.0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  106","line":"        , xoff(ele.get_double_attribute(\"hoffset\", 0.0))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  107","line":"        , yoff(ele.get_double_attribute(\"voffset\", 0.0))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  108","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  109","line":"        double r = ele.get_double_attribute(\"circular_aperture_radius\", 1000.0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  110","line":"        r2 = r * r;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  111","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  114","line":"    bool discard(ConstParticles const& parts,"},
{"lineNum":"  115","line":"            ConstParticleMasks const&, int p) const"},
{"lineNum":"  116","line":"    {"},
{"lineNum":"  117","line":"        double xrel = parts(p, 0) - xoff;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  118","line":"        double yrel = parts(p, 2) - yoff;"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"        double radius2 = xrel * xrel + yrel * yrel;"},
{"lineNum":"  121","line":"        return (radius2 > r2);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  122","line":"    }"},
{"lineNum":"  123","line":"};"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"/// An elliptical aperture with horizontal and vertical radii in meters"},
{"lineNum":"  126","line":"/// determined by the Lattice_element_attributes"},
{"lineNum":"  127","line":"/// \"elliptical_aperture_horizontal_radius\" and"},
{"lineNum":"  128","line":"/// \"elliptical_aperture_vertical_radius\", respectively."},
{"lineNum":"  129","line":"/// Both radii must be specified. Failing to do so will cause an"},
{"lineNum":"  130","line":"/// exception."},
{"lineNum":"  131","line":"struct Elliptical_aperture"},
{"lineNum":"  132","line":"{"},
{"lineNum":"  133","line":"    constexpr static const char *type = \"elliptical\";"},
{"lineNum":"  134","line":"    double h2, v2, xoff, yoff;"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"    Elliptical_aperture(Lattice_element const& ele)"},
{"lineNum":"  137","line":"        : h2(1.0), v2(1.0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  138","line":"        , xoff(ele.get_double_attribute(\"hoffset\", 0.0))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  139","line":"        , yoff(ele.get_double_attribute(\"voffset\", 0.0))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  140","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  141","line":"        double hr = ele.get_double_attribute(\"elliptical_aperture_horizontal_radius\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  142","line":"        double vr = ele.get_double_attribute(\"elliptical_aperture_vertical_radius\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  143","line":"        h2 = hr * hr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  144","line":"        v2 = vr * vr;"},
{"lineNum":"  145","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  148","line":"    bool discard(ConstParticles const& parts,"},
{"lineNum":"  149","line":"            ConstParticleMasks const&, int p) const"},
{"lineNum":"  150","line":"    {"},
{"lineNum":"  151","line":"        double xrel = parts(p, 0) - xoff;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  152","line":"        double yrel = parts(p, 2) - yoff;"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"        double scaled_r2 = xrel * xrel / h2 + yrel * yrel / v2;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  155","line":"        return (scaled_r2 > 1.0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  156","line":"    }"},
{"lineNum":"  157","line":"};"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"#if 0"},
{"lineNum":"  161","line":"/// An elliptical aperture with horizontal and vertical radii in meters"},
{"lineNum":"  162","line":"/// determined by the Lattice_element_attributes"},
{"lineNum":"  163","line":"/// \"elliptical_aperture_horizontal_radius\" and"},
{"lineNum":"  164","line":"/// \"elliptical_aperture_vertical_radius\", respectively."},
{"lineNum":"  165","line":"/// Both radii must be specified. Failing to do so will cause an"},
{"lineNum":"  166","line":"/// exception."},
{"lineNum":"  167","line":"class Elliptical_aperture_operation : public Aperture_operation"},
{"lineNum":"  168","line":"{"},
{"lineNum":"  169","line":"private:"},
{"lineNum":"  170","line":"    double horizontal_radius, vertical_radius;"},
{"lineNum":"  171","line":"    double h2, v2;"},
{"lineNum":"  172","line":"public:"},
{"lineNum":"  173","line":"    static const char aperture_type[];"},
{"lineNum":"  174","line":"    static const char attribute_name[];"},
{"lineNum":"  175","line":"    Elliptical_aperture_operation(Lattice_element_slice_sptr slice_sptr);"},
{"lineNum":"  176","line":"    // Default constructor for serialization use only"},
{"lineNum":"  177","line":"    Elliptical_aperture_operation();"},
{"lineNum":"  178","line":"    virtual const char *"},
{"lineNum":"  179","line":"    get_aperture_type() const;"},
{"lineNum":"  180","line":"    virtual bool"},
{"lineNum":"  181","line":"    operator==(Aperture_operation const& aperture_operation) const;"},
{"lineNum":"  182","line":"    bool"},
{"lineNum":"  183","line":"            operator==("},
{"lineNum":"  184","line":"                    Elliptical_aperture_operation const& Elliptical_aperture_operation) const;"},
{"lineNum":"  185","line":"    bool"},
{"lineNum":"  186","line":"    operator()(MArray2d_ref & particles, int part);"},
{"lineNum":"  187","line":"    virtual void"},
{"lineNum":"  188","line":"    apply(Bunch & bunch, int verbosity, Logger & logger);"},
{"lineNum":"  189","line":"    template<class Archive>"},
{"lineNum":"  190","line":"        void"},
{"lineNum":"  191","line":"        serialize(Archive & ar, const unsigned int version);"},
{"lineNum":"  192","line":"    virtual"},
{"lineNum":"  193","line":"    ~Elliptical_aperture_operation();"},
{"lineNum":"  194","line":"};"},
{"lineNum":"  195","line":"BOOST_CLASS_EXPORT_KEY(Elliptical_aperture_operation)"},
{"lineNum":"  196","line":";"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"/// A rectangular aperture with horizontal and vertical dimensions in meters"},
{"lineNum":"  199","line":"/// determined by the Lattice_element_attributes"},
{"lineNum":"  200","line":"/// \"rectangular_aperture_width\" and"},
{"lineNum":"  201","line":"/// \"rectangular_aperture_height\", respectively."},
{"lineNum":"  202","line":"/// Both dimensions must be specified. Failing to do so will cause an"},
{"lineNum":"  203","line":"/// exception."},
{"lineNum":"  204","line":"class Rectangular_aperture_operation : public Aperture_operation"},
{"lineNum":"  205","line":"{"},
{"lineNum":"  206","line":"private:"},
{"lineNum":"  207","line":"    double width, height;"},
{"lineNum":"  208","line":"public:"},
{"lineNum":"  209","line":"    static const char aperture_type[];"},
{"lineNum":"  210","line":"    static const char attribute_name[];"},
{"lineNum":"  211","line":"    Rectangular_aperture_operation(Lattice_element_slice_sptr slice_sptr);"},
{"lineNum":"  212","line":"    // Default constructor for serialization use only"},
{"lineNum":"  213","line":"    Rectangular_aperture_operation();"},
{"lineNum":"  214","line":"    virtual const char *"},
{"lineNum":"  215","line":"    get_aperture_type() const;"},
{"lineNum":"  216","line":"    virtual bool"},
{"lineNum":"  217","line":"    operator==(Aperture_operation const& aperture_operation) const;"},
{"lineNum":"  218","line":"    bool"},
{"lineNum":"  219","line":"            operator==("},
{"lineNum":"  220","line":"                    Rectangular_aperture_operation const& rectangular_aperture_operation) const;"},
{"lineNum":"  221","line":"    bool"},
{"lineNum":"  222","line":"    operator()(MArray2d_ref & particles, int part);"},
{"lineNum":"  223","line":"    virtual void"},
{"lineNum":"  224","line":"    apply(Bunch & bunch, int verbosity, Logger & logger);"},
{"lineNum":"  225","line":"    template<class Archive>"},
{"lineNum":"  226","line":"        void"},
{"lineNum":"  227","line":"        serialize(Archive & ar, const unsigned int version);"},
{"lineNum":"  228","line":"    virtual"},
{"lineNum":"  229","line":"    ~Rectangular_aperture_operation();"},
{"lineNum":"  230","line":"};"},
{"lineNum":"  231","line":"BOOST_CLASS_EXPORT_KEY(Rectangular_aperture_operation)"},
{"lineNum":"  232","line":";"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"/// A rectangular aperture with quarter-circular ears on top of a"},
{"lineNum":"  235","line":"/// rectangular strip. The rectangular"},
{"lineNum":"  236","line":"/// horizontal and vertical dimensions in meters"},
{"lineNum":"  237","line":"/// determined by the Lattice_element_attributes"},
{"lineNum":"  238","line":"/// \"rectangular_aperture_width\" and"},
{"lineNum":"  239","line":"/// \"rectangular_aperture_height\", respectively.  The quarter circle radius"},
{"lineNum":"  240","line":"/// is given by \"ear_radius\" and the vertical location of the"},
{"lineNum":"  241","line":"/// the center of the ear is given by option \"rectangular_aperture_ear_offset\".  The aperture"},
{"lineNum":"  242","line":"/// has four-fold symmetry."},
{"lineNum":"  243","line":"/// All dimensions must be specified. Failing to do so will cause an"},
{"lineNum":"  244","line":"/// exception."},
{"lineNum":"  245","line":"class Rectangular_with_ears_aperture_operation : public Aperture_operation"},
{"lineNum":"  246","line":"{"},
{"lineNum":"  247","line":"private:"},
{"lineNum":"  248","line":"    double width, height, ear_offset, radius;"},
{"lineNum":"  249","line":"public:"},
{"lineNum":"  250","line":"    static const char aperture_type[];"},
{"lineNum":"  251","line":"    static const char attribute_name[];"},
{"lineNum":"  252","line":"    Rectangular_with_ears_aperture_operation(Lattice_element_slice_sptr slice_sptr);"},
{"lineNum":"  253","line":"    // Default constructor for serialization use only"},
{"lineNum":"  254","line":"    Rectangular_with_ears_aperture_operation();"},
{"lineNum":"  255","line":"    virtual const char *"},
{"lineNum":"  256","line":"            get_aperture_type() const;"},
{"lineNum":"  257","line":"    virtual bool"},
{"lineNum":"  258","line":"            operator==(Aperture_operation const& aperture_operation) const;"},
{"lineNum":"  259","line":"    bool"},
{"lineNum":"  260","line":"            operator==("},
{"lineNum":"  261","line":"                    Rectangular_with_ears_aperture_operation const& rectangular_with_ears_aperture_operation) const;"},
{"lineNum":"  262","line":"    bool"},
{"lineNum":"  263","line":"            operator()(MArray2d_ref & particles, int part);"},
{"lineNum":"  264","line":"    virtual void"},
{"lineNum":"  265","line":"            apply(Bunch & bunch, int verbosity, Logger & logger);"},
{"lineNum":"  266","line":"    template<class Archive>"},
{"lineNum":"  267","line":"    void"},
{"lineNum":"  268","line":"            serialize(Archive & ar, const unsigned int version);"},
{"lineNum":"  269","line":"    virtual"},
{"lineNum":"  270","line":"            ~Rectangular_with_ears_aperture_operation();"},
{"lineNum":"  271","line":"};"},
{"lineNum":"  272","line":"BOOST_CLASS_EXPORT_KEY(Rectangular_with_ears_aperture_operation)"},
{"lineNum":"  273","line":";"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"/// A polygon aperture with vertices"},
{"lineNum":"  276","line":"/// determined by the Lattice_element_attributes"},
{"lineNum":"  277","line":"/// \"pax1\", \"pay1\", \"pax2\", \"pay2\", and so on."},
{"lineNum":"  278","line":"/// And it also requires \"the_number_of_vertices\", which determines the number"},
{"lineNum":"  279","line":"/// of vertices and must be greter than and equal to 3."},
{"lineNum":"  280","line":"/// Must have at least 3 vertcies. Failing to do so will cause an"},
{"lineNum":"  281","line":"/// exception."},
{"lineNum":"  282","line":"class Polygon_aperture_operation : public Aperture_operation"},
{"lineNum":"  283","line":"{"},
{"lineNum":"  284","line":"private:"},
{"lineNum":"  285","line":"    int num_vertices;"},
{"lineNum":"  286","line":"    std::vector<std::complex<double > > vertices;"},
{"lineNum":"  287","line":"    double min_radius2;"},
{"lineNum":"  288","line":"public:"},
{"lineNum":"  289","line":"    static const char aperture_type[];"},
{"lineNum":"  290","line":"    static const char attribute_name[];"},
{"lineNum":"  291","line":"    Polygon_aperture_operation(Lattice_element_slice_sptr slice_sptr);"},
{"lineNum":"  292","line":"    // Default constructor for serialization use only"},
{"lineNum":"  293","line":"    Polygon_aperture_operation();"},
{"lineNum":"  294","line":"    virtual const char *"},
{"lineNum":"  295","line":"    get_aperture_type() const;"},
{"lineNum":"  296","line":"    virtual bool"},
{"lineNum":"  297","line":"    operator==(Aperture_operation const& aperture_operation) const;"},
{"lineNum":"  298","line":"    bool"},
{"lineNum":"  299","line":"            operator==("},
{"lineNum":"  300","line":"                    Polygon_aperture_operation const& polygon_aperture_operation) const;"},
{"lineNum":"  301","line":"    bool"},
{"lineNum":"  302","line":"    operator()(MArray2d_ref & particles, int part);"},
{"lineNum":"  303","line":"    virtual void"},
{"lineNum":"  304","line":"    apply(Bunch & bunch, int verbosity, Logger & logger);"},
{"lineNum":"  305","line":"    template<class Archive>"},
{"lineNum":"  306","line":"        void"},
{"lineNum":"  307","line":"        serialize(Archive & ar, const unsigned int version);"},
{"lineNum":"  308","line":"    virtual"},
{"lineNum":"  309","line":"    ~Polygon_aperture_operation();"},
{"lineNum":"  310","line":"};"},
{"lineNum":"  311","line":"BOOST_CLASS_EXPORT_KEY(Polygon_aperture_operation)"},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":"/// An wire_elliptical aperture with horizontal and vertical radii in meters"},
{"lineNum":"  314","line":"/// determined by the Lattice_element_attributes"},
{"lineNum":"  315","line":"/// \"wire_elliptical_aperture_horizontal_radius\" and"},
{"lineNum":"  316","line":"/// \"wire_elliptical_aperture_vertical_radius\", respectively."},
{"lineNum":"  317","line":"/// Both radii must be specified."},
{"lineNum":"  318","line":"/// Also needs Lattice_element_attributes"},
{"lineNum":"  319","line":"/// \"wire_elliptical_aperture_wire_x\","},
{"lineNum":"  320","line":"/// \"wire_elliptical_aperture_wire_width\", and"},
{"lineNum":"  321","line":"/// \"wire_elliptical_aperture_gap.\" Failing to do so will cause an"},
{"lineNum":"  322","line":"/// exception."},
{"lineNum":"  323","line":"class Wire_elliptical_aperture_operation : public Aperture_operation"},
{"lineNum":"  324","line":"{"},
{"lineNum":"  325","line":"private:"},
{"lineNum":"  326","line":"    double horizontal_radius, vertical_radius;"},
{"lineNum":"  327","line":"    double h2, v2;"},
{"lineNum":"  328","line":"    double wire_x, wire_width, gap;"},
{"lineNum":"  329","line":"public:"},
{"lineNum":"  330","line":"    static const char aperture_type[];"},
{"lineNum":"  331","line":"    static const char attribute_name[];"},
{"lineNum":"  332","line":"    Wire_elliptical_aperture_operation(Lattice_element_slice_sptr slice_sptr);"},
{"lineNum":"  333","line":"    // Default constructor for serialization use only"},
{"lineNum":"  334","line":"    Wire_elliptical_aperture_operation();"},
{"lineNum":"  335","line":"    virtual const char *"},
{"lineNum":"  336","line":"    get_aperture_type() const;"},
{"lineNum":"  337","line":"    virtual bool"},
{"lineNum":"  338","line":"    operator==(Aperture_operation const& aperture_operation) const;"},
{"lineNum":"  339","line":"    bool"},
{"lineNum":"  340","line":"            operator==("},
{"lineNum":"  341","line":"                    Wire_elliptical_aperture_operation const& Wire_elliptical_aperture_operation) const;"},
{"lineNum":"  342","line":"    bool"},
{"lineNum":"  343","line":"    operator()(MArray2d_ref & particles, int part);"},
{"lineNum":"  344","line":"    virtual void"},
{"lineNum":"  345","line":"    apply(Bunch & bunch, int verbosity, Logger & logger);"},
{"lineNum":"  346","line":"    template<class Archive>"},
{"lineNum":"  347","line":"        void"},
{"lineNum":"  348","line":"        serialize(Archive & ar, const unsigned int version);"},
{"lineNum":"  349","line":"    virtual"},
{"lineNum":"  350","line":"    ~Wire_elliptical_aperture_operation();"},
{"lineNum":"  351","line":"};"},
{"lineNum":"  352","line":"BOOST_CLASS_EXPORT_KEY(Wire_elliptical_aperture_operation)"},
{"lineNum":"  353","line":""},
{"lineNum":"  354","line":"/// A Lambertson aperture with radius in meters determined by the"},
{"lineNum":"  355","line":"/// Lattice_element attribute \"lambertson_aperture_radius\"."},
{"lineNum":"  356","line":"/// If the radius is not defined, the default value of 1000.0 m will"},
{"lineNum":"  357","line":"/// be used."},
{"lineNum":"  358","line":"class Lambertson_aperture_operation : public Aperture_operation"},
{"lineNum":"  359","line":"{"},
{"lineNum":"  360","line":"private:"},
{"lineNum":"  361","line":"    double radius;"},
{"lineNum":"  362","line":"public:"},
{"lineNum":"  363","line":"    static const char aperture_type[];"},
{"lineNum":"  364","line":"    static const char attribute_name[];"},
{"lineNum":"  365","line":"    Lambertson_aperture_operation(Lattice_element_slice_sptr slice_sptr);"},
{"lineNum":"  366","line":"    // Default constructor for serialization use only"},
{"lineNum":"  367","line":"    Lambertson_aperture_operation();"},
{"lineNum":"  368","line":"    virtual const char *"},
{"lineNum":"  369","line":"    get_aperture_type() const;"},
{"lineNum":"  370","line":"    virtual bool"},
{"lineNum":"  371","line":"    operator==(Aperture_operation const& aperture_operation) const;"},
{"lineNum":"  372","line":"    bool"},
{"lineNum":"  373","line":"            operator==("},
{"lineNum":"  374","line":"                    Lambertson_aperture_operation const& lambertson_aperture_operation) const;"},
{"lineNum":"  375","line":"    bool"},
{"lineNum":"  376","line":"    operator()(MArray2d_ref & particles, int part);"},
{"lineNum":"  377","line":"    virtual void"},
{"lineNum":"  378","line":"    apply(Bunch & bunch, int verbosit, Logger & logger);"},
{"lineNum":"  379","line":"    template<class Archive>"},
{"lineNum":"  380","line":"        void"},
{"lineNum":"  381","line":"        serialize(Archive & ar, const unsigned int version);"},
{"lineNum":"  382","line":"    virtual"},
{"lineNum":"  383","line":"    ~Lambertson_aperture_operation();"},
{"lineNum":"  384","line":"};"},
{"lineNum":"  385","line":"BOOST_CLASS_EXPORT_KEY(Lambertson_aperture_operation)"},
{"lineNum":"  386","line":"#endif"},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":""},
{"lineNum":"  389","line":"#if 0"},
{"lineNum":"  390","line":"inline void"},
{"lineNum":"  391","line":"Aperture_operation::apply_impl(Bunch & bunch, Logger & logger) const"},
{"lineNum":"  392","line":"{"},
{"lineNum":"  393","line":"    double t0 = MPI_Wtime();"},
{"lineNum":"  394","line":"    bool write_loss=false;"},
{"lineNum":"  395","line":"    int b_index=-1; // AM: this value is written in the aperture_loss file when the bunch has no bucket index assigned"},
{"lineNum":"  396","line":"    Diagnostics_losses diagnostics_list="},
{"lineNum":"  397","line":"         get_slice_sptr()->get_lattice_element().get_lattice().get_loss_diagnostics_list();"},
{"lineNum":"  398","line":"    Diagnostics_loss_sptr diagnostics_sptr;"},
{"lineNum":"  399","line":"    for (Diagnostics_losses::const_iterator d_it = diagnostics_list.begin();"},
{"lineNum":"  400","line":"        d_it != diagnostics_list.end(); ++d_it){"},
{"lineNum":"  401","line":"            if ( ((*d_it)->get_bunch().get_bucket_index()==bunch.get_bucket_index()) &&"},
{"lineNum":"  402","line":"                ((*d_it)->get_type()==Diagnostics_loss::aperture_type) )"},
{"lineNum":"  403","line":"            {"},
{"lineNum":"  404","line":"              diagnostics_sptr=(*d_it);"},
{"lineNum":"  405","line":"              write_loss=true;"},
{"lineNum":"  406","line":"            }"},
{"lineNum":"  407","line":"    }"},
{"lineNum":"  408","line":""},
{"lineNum":"  409","line":"    int nt;"},
{"lineNum":"  410","line":"    #pragma omp parallel"},
{"lineNum":"  411","line":"    { nt = omp_get_num_threads(); }"},
{"lineNum":"  412","line":""},
{"lineNum":"  413","line":"    if   (bunch.is_bucket_index_assigned())  b_index=bunch.get_bucket_index();"},
{"lineNum":"  414","line":"    int repetition=bunch.get_reference_particle().get_repetition();"},
{"lineNum":"  415","line":"    double s=bunch.get_reference_particle().get_s();"},
{"lineNum":"  416","line":"    double s_n=bunch.get_reference_particle().get_s_n();"},
{"lineNum":"  417","line":"    MArray1d coords(boost::extents[7]);"},
{"lineNum":"  418","line":""},
{"lineNum":"  419","line":"    MArray2d_ref particles(bunch.get_local_particles());"},
{"lineNum":"  420","line":"    MArray2d_ref s_particles(bunch.get_local_spectator_particles());"},
{"lineNum":"  421","line":""},
{"lineNum":"  422","line":"    int npart = bunch.get_local_num();"},
{"lineNum":"  423","line":"    int npart_s = bunch.get_local_spectator_num();"},
{"lineNum":"  424","line":""},
{"lineNum":"  425","line":"    int * discard = new int[npart];"},
{"lineNum":"  426","line":"    int * discard_count = new int[nt];"},
{"lineNum":"  427","line":""},
{"lineNum":"  428","line":"    int * discard_s = new int[npart_s];"},
{"lineNum":"  429","line":"    int * discard_s_count = new int[nt];"},
{"lineNum":"  430","line":""},
{"lineNum":"  431","line":"    int part_per_thread = npart / nt;"},
{"lineNum":"  432","line":"    int s_part_per_thread = npart_s / nt;"},
{"lineNum":"  433","line":""},
{"lineNum":"  434","line":"    #pragma omp parallel shared(nt, npart, npart_s, particles, s_particles, discard, discard_s, discard_count, discard_s_count)"},
{"lineNum":"  435","line":"    {"},
{"lineNum":"  436","line":"        int it = omp_get_thread_num();"},
{"lineNum":"  437","line":""},
{"lineNum":"  438","line":"        discard_count[it] = 0;"},
{"lineNum":"  439","line":"        discard_s_count[it] = 0;"},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"        int s = it * part_per_thread;"},
{"lineNum":"  442","line":"        int e = (it==nt-1) ? npart : (s+part_per_thread);"},
{"lineNum":"  443","line":""},
{"lineNum":"  444","line":"        for (int part = s; part < e; ++part)"},
{"lineNum":"  445","line":"        {"},
{"lineNum":"  446","line":"            if (t(particles, part))"},
{"lineNum":"  447","line":"            {"},
{"lineNum":"  448","line":"                discard[part] = 1;"},
{"lineNum":"  449","line":"                ++discard_count[it];"},
{"lineNum":"  450","line":"            }"},
{"lineNum":"  451","line":"            else"},
{"lineNum":"  452","line":"            {"},
{"lineNum":"  453","line":"                discard[part] = 0;"},
{"lineNum":"  454","line":"            }"},
{"lineNum":"  455","line":"        }"},
{"lineNum":"  456","line":""},
{"lineNum":"  457","line":"        s = it * s_part_per_thread;"},
{"lineNum":"  458","line":"        e = (it==nt-1) ? npart_s : (s + s_part_per_thread);"},
{"lineNum":"  459","line":""},
{"lineNum":"  460","line":"        for (int part = s; part < e; ++part)"},
{"lineNum":"  461","line":"        {"},
{"lineNum":"  462","line":"            if (t(s_particles, part))"},
{"lineNum":"  463","line":"            {"},
{"lineNum":"  464","line":"                discard_s[part] = 1;"},
{"lineNum":"  465","line":"                ++discard_s_count[it];"},
{"lineNum":"  466","line":"            }"},
{"lineNum":"  467","line":"            else"},
{"lineNum":"  468","line":"            {"},
{"lineNum":"  469","line":"                discard_s[part] = 0;"},
{"lineNum":"  470","line":"            }"},
{"lineNum":"  471","line":"        }"},
{"lineNum":"  472","line":"    }"},
{"lineNum":"  473","line":""},
{"lineNum":"  474","line":"    // number of discarded particles"},
{"lineNum":"  475","line":"    int discarded = 0;"},
{"lineNum":"  476","line":"    int discarded_s = 0;"},
{"lineNum":"  477","line":""},
{"lineNum":"  478","line":"    for (int i=0; i<nt; ++i)"},
{"lineNum":"  479","line":"    {"},
{"lineNum":"  480","line":"        discarded += discard_count[i];"},
{"lineNum":"  481","line":"        discarded_s += discard_s_count[i];"},
{"lineNum":"  482","line":"    }"},
{"lineNum":"  483","line":""},
{"lineNum":"  484","line":"    // arrange the particle array"},
{"lineNum":"  485","line":"    {"},
{"lineNum":"  486","line":"        // move all the discarded particles to the tail"},
{"lineNum":"  487","line":"        int head = 0;"},
{"lineNum":"  488","line":"        int tail = npart - 1;"},
{"lineNum":"  489","line":""},
{"lineNum":"  490","line":"        do"},
{"lineNum":"  491","line":"        {"},
{"lineNum":"  492","line":"            while (!discard[head] && head<tail) ++head;"},
{"lineNum":"  493","line":"            if (head >= tail) break;"},
{"lineNum":"  494","line":""},
{"lineNum":"  495","line":"            while ( discard[tail] && tail>head) --tail;"},
{"lineNum":"  496","line":"            if (head >= tail) break;"},
{"lineNum":"  497","line":""},
{"lineNum":"  498","line":"            double p0 = particles[head][0];"},
{"lineNum":"  499","line":"            double p1 = particles[head][1];"},
{"lineNum":"  500","line":"            double p2 = particles[head][2];"},
{"lineNum":"  501","line":"            double p3 = particles[head][3];"},
{"lineNum":"  502","line":"            double p4 = particles[head][4];"},
{"lineNum":"  503","line":"            double p5 = particles[head][5];"},
{"lineNum":"  504","line":"            double p6 = particles[head][6];"},
{"lineNum":"  505","line":""},
{"lineNum":"  506","line":"            particles[head][0] = particles[tail][0];"},
{"lineNum":"  507","line":"            particles[head][1] = particles[tail][1];"},
{"lineNum":"  508","line":"            particles[head][2] = particles[tail][2];"},
{"lineNum":"  509","line":"            particles[head][3] = particles[tail][3];"},
{"lineNum":"  510","line":"            particles[head][4] = particles[tail][4];"},
{"lineNum":"  511","line":"            particles[head][5] = particles[tail][5];"},
{"lineNum":"  512","line":"            particles[head][6] = particles[tail][6];"},
{"lineNum":"  513","line":""},
{"lineNum":"  514","line":"            particles[tail][0] = p0;"},
{"lineNum":"  515","line":"            particles[tail][1] = p1;"},
{"lineNum":"  516","line":"            particles[tail][2] = p2;"},
{"lineNum":"  517","line":"            particles[tail][3] = p3;"},
{"lineNum":"  518","line":"            particles[tail][4] = p4;"},
{"lineNum":"  519","line":"            particles[tail][5] = p5;"},
{"lineNum":"  520","line":"            particles[tail][6] = p6;"},
{"lineNum":"  521","line":""},
{"lineNum":"  522","line":"            ++head;"},
{"lineNum":"  523","line":"            --tail;"},
{"lineNum":"  524","line":""},
{"lineNum":"  525","line":"        } while(head < tail);"},
{"lineNum":"  526","line":""},
{"lineNum":"  527","line":"        // move some lost particles over to the padding area"},
{"lineNum":"  528","line":"        int padded  = bunch.get_local_num_padded();"},
{"lineNum":"  529","line":"        int padding = padded - npart;"},
{"lineNum":"  530","line":"        int np = discarded < padding ? discarded : padding;"},
{"lineNum":"  531","line":""},
{"lineNum":"  532","line":"        for (int i=0; i<np; ++i)"},
{"lineNum":"  533","line":"        {"},
{"lineNum":"  534","line":"            // pl: position of next lost particle"},
{"lineNum":"  535","line":"            // pp: position of next padding slot"},
{"lineNum":"  536","line":"            int pl = npart - discarded + i;"},
{"lineNum":"  537","line":"            int pp = padded - 1 - i;"},
{"lineNum":"  538","line":""},
{"lineNum":"  539","line":"            // copy the lost particle over to the padding slot"},
{"lineNum":"  540","line":"            particles[pp][0] = particles[pl][0];"},
{"lineNum":"  541","line":"            particles[pp][1] = particles[pl][1];"},
{"lineNum":"  542","line":"            particles[pp][2] = particles[pl][2];"},
{"lineNum":"  543","line":"            particles[pp][3] = particles[pl][3];"},
{"lineNum":"  544","line":"            particles[pp][4] = particles[pl][4];"},
{"lineNum":"  545","line":"            particles[pp][5] = particles[pl][5];"},
{"lineNum":"  546","line":"            particles[pp][6] = particles[pl][6];"},
{"lineNum":"  547","line":""},
{"lineNum":"  548","line":"            // makes pl the new padding slot"},
{"lineNum":"  549","line":"            particles[pl][0] = 0.0;"},
{"lineNum":"  550","line":"            particles[pl][1] = 0.0;"},
{"lineNum":"  551","line":"            particles[pl][2] = 0.0;"},
{"lineNum":"  552","line":"            particles[pl][3] = 0.0;"},
{"lineNum":"  553","line":"            particles[pl][4] = 0.0;"},
{"lineNum":"  554","line":"            particles[pl][5] = 0.0;"},
{"lineNum":"  555","line":"            particles[pl][6] = 0.0;"},
{"lineNum":"  556","line":"        }"},
{"lineNum":"  557","line":""},
{"lineNum":"  558","line":"        // finalize the bunch for new particle array pointers"},
{"lineNum":"  559","line":"        double charge = (discarded > 0) ? discarded * bunch.get_real_num() / bunch.get_total_num() : 0.0;"},
{"lineNum":"  560","line":"        deposit_charge(charge);"},
{"lineNum":"  561","line":"        bunch.set_local_num(npart - discarded);"},
{"lineNum":"  562","line":"    }"},
{"lineNum":"  563","line":""},
{"lineNum":"  564","line":"    // arrange the spectator particle array"},
{"lineNum":"  565","line":"    {"},
{"lineNum":"  566","line":"        // move all the discarded spectator particles to the tail"},
{"lineNum":"  567","line":"        int head = 0;"},
{"lineNum":"  568","line":"        int tail = npart_s - 1;"},
{"lineNum":"  569","line":""},
{"lineNum":"  570","line":"        do"},
{"lineNum":"  571","line":"        {"},
{"lineNum":"  572","line":"            while (!discard_s[head] && head<tail) ++head;"},
{"lineNum":"  573","line":"            if (head >= tail) break;"},
{"lineNum":"  574","line":""},
{"lineNum":"  575","line":"            while ( discard_s[tail] && tail>head) --tail;"},
{"lineNum":"  576","line":"            if (head >= tail) break;"},
{"lineNum":"  577","line":""},
{"lineNum":"  578","line":"            double p0 = s_particles[head][0];"},
{"lineNum":"  579","line":"            double p1 = s_particles[head][1];"},
{"lineNum":"  580","line":"            double p2 = s_particles[head][2];"},
{"lineNum":"  581","line":"            double p3 = s_particles[head][3];"},
{"lineNum":"  582","line":"            double p4 = s_particles[head][4];"},
{"lineNum":"  583","line":"            double p5 = s_particles[head][5];"},
{"lineNum":"  584","line":"            double p6 = s_particles[head][6];"},
{"lineNum":"  585","line":""},
{"lineNum":"  586","line":"            s_particles[head][0] = s_particles[tail][0];"},
{"lineNum":"  587","line":"            s_particles[head][1] = s_particles[tail][1];"},
{"lineNum":"  588","line":"            s_particles[head][2] = s_particles[tail][2];"},
{"lineNum":"  589","line":"            s_particles[head][3] = s_particles[tail][3];"},
{"lineNum":"  590","line":"            s_particles[head][4] = s_particles[tail][4];"},
{"lineNum":"  591","line":"            s_particles[head][5] = s_particles[tail][5];"},
{"lineNum":"  592","line":"            s_particles[head][6] = s_particles[tail][6];"},
{"lineNum":"  593","line":""},
{"lineNum":"  594","line":"            s_particles[tail][0] = p0;"},
{"lineNum":"  595","line":"            s_particles[tail][1] = p1;"},
{"lineNum":"  596","line":"            s_particles[tail][2] = p2;"},
{"lineNum":"  597","line":"            s_particles[tail][3] = p3;"},
{"lineNum":"  598","line":"            s_particles[tail][4] = p4;"},
{"lineNum":"  599","line":"            s_particles[tail][5] = p5;"},
{"lineNum":"  600","line":"            s_particles[tail][6] = p6;"},
{"lineNum":"  601","line":""},
{"lineNum":"  602","line":"            ++head;"},
{"lineNum":"  603","line":"            --tail;"},
{"lineNum":"  604","line":""},
{"lineNum":"  605","line":"        } while(head < tail);"},
{"lineNum":"  606","line":""},
{"lineNum":"  607","line":"        // move some lost spectator particles over to the padding area"},
{"lineNum":"  608","line":"        int padded  = bunch.get_local_spectator_num_padded();"},
{"lineNum":"  609","line":"        int padding = padded - npart_s;"},
{"lineNum":"  610","line":"        int np = discarded_s < padding ? discarded_s : padding;"},
{"lineNum":"  611","line":""},
{"lineNum":"  612","line":"        for (int i=0; i<np; ++i)"},
{"lineNum":"  613","line":"        {"},
{"lineNum":"  614","line":"            // pl: position of next lost particle"},
{"lineNum":"  615","line":"            // pp: position of next padding slot"},
{"lineNum":"  616","line":"            int pl = npart - discarded + i;"},
{"lineNum":"  617","line":"            int pp = padded - 1 - i;"},
{"lineNum":"  618","line":""},
{"lineNum":"  619","line":"            // copy the lost particle over to the padding slot"},
{"lineNum":"  620","line":"            s_particles[pp][0] = s_particles[pl][0];"},
{"lineNum":"  621","line":"            s_particles[pp][1] = s_particles[pl][1];"},
{"lineNum":"  622","line":"            s_particles[pp][2] = s_particles[pl][2];"},
{"lineNum":"  623","line":"            s_particles[pp][3] = s_particles[pl][3];"},
{"lineNum":"  624","line":"            s_particles[pp][4] = s_particles[pl][4];"},
{"lineNum":"  625","line":"            s_particles[pp][5] = s_particles[pl][5];"},
{"lineNum":"  626","line":"            s_particles[pp][6] = s_particles[pl][6];"},
{"lineNum":"  627","line":""},
{"lineNum":"  628","line":"            // makes pl the new padding slot"},
{"lineNum":"  629","line":"            s_particles[pl][0] = 0.0;"},
{"lineNum":"  630","line":"            s_particles[pl][1] = 0.0;"},
{"lineNum":"  631","line":"            s_particles[pl][2] = 0.0;"},
{"lineNum":"  632","line":"            s_particles[pl][3] = 0.0;"},
{"lineNum":"  633","line":"            s_particles[pl][4] = 0.0;"},
{"lineNum":"  634","line":"            s_particles[pl][5] = 0.0;"},
{"lineNum":"  635","line":"            s_particles[pl][6] = 0.0;"},
{"lineNum":"  636","line":"        }"},
{"lineNum":"  637","line":""},
{"lineNum":"  638","line":"        bunch.set_local_spectator_num(npart_s - discarded_s);"},
{"lineNum":"  639","line":"    }"},
{"lineNum":"  640","line":""},
{"lineNum":"  641","line":"    double t1 = MPI_Wtime();"},
{"lineNum":"  642","line":"    if (verbosity > 5)"},
{"lineNum":"  643","line":"    {"},
{"lineNum":"  644","line":"        logger << \"Aperture_operation: type = \" << get_aperture_type()"},
{"lineNum":"  645","line":"               << \", discarded: \" << discarded"},
{"lineNum":"  646","line":"               << \", discarded spectators: \" << discarded_s"},
{"lineNum":"  647","line":"               << \", time = \" << std::fixed << std::setprecision(3) << t1"},
{"lineNum":"  648","line":"                - t0 << \"s_n\" << std::endl;"},
{"lineNum":"  649","line":"    }"},
{"lineNum":"  650","line":""},
{"lineNum":"  651","line":"    delete [] discard;"},
{"lineNum":"  652","line":"    delete [] discard_count;"},
{"lineNum":"  653","line":""},
{"lineNum":"  654","line":"    delete [] discard_s;"},
{"lineNum":"  655","line":"    delete [] discard_s_count;"},
{"lineNum":"  656","line":"}"},
{"lineNum":"  657","line":"#endif"},
{"lineNum":"  658","line":""},
{"lineNum":"  659","line":""},
{"lineNum":"  660","line":"#if 0"},
{"lineNum":"  661","line":"template<typename T>"},
{"lineNum":"  662","line":"    void"},
{"lineNum":"  663","line":"    Aperture_operation::apply_impl(T & t, Bunch & bunch, int verbosity, Logger & logger)"},
{"lineNum":"  664","line":"    {"},
{"lineNum":"  665","line":"        double t0 = MPI_Wtime();"},
{"lineNum":"  666","line":""},
{"lineNum":"  667","line":"        int nt;"},
{"lineNum":"  668","line":"        #pragma omp parallel"},
{"lineNum":"  669","line":"        { nt = omp_get_num_threads(); }"},
{"lineNum":"  670","line":""},
{"lineNum":"  671","line":"        MArray2d_ref particles(bunch.get_local_particles());"},
{"lineNum":"  672","line":"        int npart = bunch.get_local_num();"},
{"lineNum":"  673","line":""},
{"lineNum":"  674","line":"        int * discard = new int[npart];"},
{"lineNum":"  675","line":"        int * discard_counts = new int[nt];"},
{"lineNum":"  676","line":""},
{"lineNum":"  677","line":"        int part_per_thread = npart / nt;"},
{"lineNum":"  678","line":"        #pragma omp parallel shared(nt, npart, particles, discard, discard_counts)"},
{"lineNum":"  679","line":"        {"},
{"lineNum":"  680","line":"            int it = omp_get_thread_num();"},
{"lineNum":"  681","line":""},
{"lineNum":"  682","line":"            int s = it * part_per_thread;"},
{"lineNum":"  683","line":"            int e = (it==nt-1) ? npart : (s+part_per_thread);"},
{"lineNum":"  684","line":""},
{"lineNum":"  685","line":"            discard_counts[it] = 0;"},
{"lineNum":"  686","line":""},
{"lineNum":"  687","line":"            for (int part = s; part < e; ++part)"},
{"lineNum":"  688","line":"            {"},
{"lineNum":"  689","line":"                if (t(particles, part))"},
{"lineNum":"  690","line":"                {"},
{"lineNum":"  691","line":"                    discard[s + discard_counts[it]] = part;"},
{"lineNum":"  692","line":"                    ++ discard_counts[it];"},
{"lineNum":"  693","line":"                    }"},
{"lineNum":"  694","line":"            }"},
{"lineNum":"  695","line":"            //std::cout << \"i = \" << it << \", discarded = \" << discard_counts[it] << \"\\n\";"},
{"lineNum":"  696","line":""},
{"lineNum":"  697","line":"            #pragma omp barrier"},
{"lineNum":"  698","line":"        }"},
{"lineNum":"  699","line":""},
{"lineNum":"  700","line":"        int total_discarded = discard_counts[0];"},
{"lineNum":"  701","line":""},
{"lineNum":"  702","line":"        for (int t = 1; t < nt; ++t)"},
{"lineNum":"  703","line":"        {"},
{"lineNum":"  704","line":"            std::memcpy( discard + total_discarded, discard + t*part_per_thread,"},
{"lineNum":"  705","line":"\t        discard_counts[t]*sizeof(int) );"},
{"lineNum":"  706","line":"            total_discarded += discard_counts[t];"},
{"lineNum":"  707","line":"        }"},
{"lineNum":"  708","line":""},
{"lineNum":"  709","line":"        for (int n = total_discarded - 1; n >= 0; --n)"},
{"lineNum":"  710","line":"        {"},
{"lineNum":"  711","line":"            // handle each particle in the list of discards"},
{"lineNum":"  712","line":""},
{"lineNum":"  713","line":"            if (discard[n] == npart-1) {"},
{"lineNum":"  714","line":"                // this is the last particle, just reduce count"},
{"lineNum":"  715","line":"                --npart;"},
{"lineNum":"  716","line":"                } else {"},
{"lineNum":"  717","line":"                // move the last particle into the position of this discarded particle then reduce count"},
{"lineNum":"  718","line":"                int idx = discard[n];"},
{"lineNum":"  719","line":"                int last = npart - 1;"},
{"lineNum":"  720","line":""},
{"lineNum":"  721","line":"                particles[idx][0] = particles[last][0];"},
{"lineNum":"  722","line":"                particles[idx][1] = particles[last][1];"},
{"lineNum":"  723","line":"                particles[idx][2] = particles[last][2];"},
{"lineNum":"  724","line":"                particles[idx][3] = particles[last][3];"},
{"lineNum":"  725","line":"                particles[idx][4] = particles[last][4];"},
{"lineNum":"  726","line":"                particles[idx][5] = particles[last][5];"},
{"lineNum":"  727","line":"                particles[idx][6] = particles[last][6];"},
{"lineNum":"  728","line":"                --npart;"},
{"lineNum":"  729","line":"                }"},
{"lineNum":"  730","line":"            }"},
{"lineNum":"  731","line":""},
{"lineNum":"  732","line":"        double charge = 0.0;"},
{"lineNum":"  733","line":"        if (total_discarded > 0) {"},
{"lineNum":"  734","line":"        \tcharge = total_discarded * bunch.get_real_num() / bunch.get_total_num();"},
{"lineNum":"  735","line":"        }"},
{"lineNum":"  736","line":"        deposit_charge(charge);"},
{"lineNum":"  737","line":"        bunch.set_local_num(npart);"},
{"lineNum":"  738","line":"        double t1 = MPI_Wtime();"},
{"lineNum":"  739","line":"        if (verbosity > 5) {"},
{"lineNum":"  740","line":"            logger << \"Aperture_operation: type = \" << get_aperture_type()"},
{"lineNum":"  741","line":"                   << \", discarded: \" << total_discarded"},
{"lineNum":"  742","line":"                    << \", time = \" << std::fixed << std::setprecision(3) << t1"},
{"lineNum":"  743","line":"                    - t0 << \"s_n\" << std::endl;"},
{"lineNum":"  744","line":"        }"},
{"lineNum":"  745","line":""},
{"lineNum":"  746","line":"        delete [] discard;"},
{"lineNum":"  747","line":"        delete [] discard_counts;"},
{"lineNum":"  748","line":"    }"},
{"lineNum":"  749","line":"#endif"},
{"lineNum":"  750","line":""},
{"lineNum":"  751","line":""},
{"lineNum":"  752","line":"#if 0"},
{"lineNum":"  753","line":"inline bool"},
{"lineNum":"  754","line":"Finite_aperture_operation::operator()(MArray2d_ref & particles, int part)"},
{"lineNum":"  755","line":"{"},
{"lineNum":"  756","line":"    bool keep = true;"},
{"lineNum":"  757","line":"    double sum = particles[part][0] + particles[part][1] + particles[part][2]"},
{"lineNum":"  758","line":"            + particles[part][3] + particles[part][4] + particles[part][5];"},
{"lineNum":"  759","line":"    if (!boost::math::isfinite(sum)) {"},
{"lineNum":"  760","line":"        keep = false;"},
{"lineNum":"  761","line":"    }"},
{"lineNum":"  762","line":"    // negative pz^2 will give rise to non-finite numbers in fixed-t frames"},
{"lineNum":"  763","line":"    double p_scaled = 1.0 + particles[part][Bunch::dpop];"},
{"lineNum":"  764","line":"    double px_scaled = particles[part][Bunch::xp];"},
{"lineNum":"  765","line":"    double py_scaled = particles[part][Bunch::yp];"},
{"lineNum":"  766","line":"    double pz2_scaled = p_scaled * p_scaled - px_scaled * px_scaled"},
{"lineNum":"  767","line":"            - py_scaled * py_scaled;"},
{"lineNum":"  768","line":"    if (pz2_scaled < 0.0) {"},
{"lineNum":"  769","line":"        keep = false;"},
{"lineNum":"  770","line":"    }"},
{"lineNum":"  771","line":"    return !keep;"},
{"lineNum":"  772","line":"}"},
{"lineNum":"  773","line":"#endif"},
{"lineNum":"  774","line":""},
{"lineNum":"  775","line":"#if 0"},
{"lineNum":"  776","line":"inline bool"},
{"lineNum":"  777","line":"Circular_aperture_operation::operator()(MArray2d_ref & particles, int part)"},
{"lineNum":"  778","line":"{"},
{"lineNum":"  779","line":"    double xrel = particles[part][Bunch::x] - get_x_offset();"},
{"lineNum":"  780","line":"    double yrel = particles[part][Bunch::y] - get_y_offset();"},
{"lineNum":"  781","line":""},
{"lineNum":"  782","line":"    double r2 = xrel * xrel + yrel * yrel;"},
{"lineNum":"  783","line":"    return (r2 > radius2);"},
{"lineNum":"  784","line":"}"},
{"lineNum":"  785","line":""},
{"lineNum":"  786","line":"inline bool"},
{"lineNum":"  787","line":"Elliptical_aperture_operation::operator()(MArray2d_ref & particles, int part)"},
{"lineNum":"  788","line":"{"},
{"lineNum":"  789","line":"    double xrel = particles[part][Bunch::x] - get_x_offset();"},
{"lineNum":"  790","line":"    double yrel = particles[part][Bunch::y] - get_y_offset();"},
{"lineNum":"  791","line":""},
{"lineNum":"  792","line":"    double scaled_r2 = xrel * xrel / h2 + yrel * yrel / v2;"},
{"lineNum":"  793","line":"    return (scaled_r2 > 1.0);"},
{"lineNum":"  794","line":"}"},
{"lineNum":"  795","line":""},
{"lineNum":"  796","line":"inline bool"},
{"lineNum":"  797","line":"Rectangular_aperture_operation::operator()(MArray2d_ref & particles, int part)"},
{"lineNum":"  798","line":"{"},
{"lineNum":"  799","line":"    double xrel = particles[part][Bunch::x] - get_x_offset();"},
{"lineNum":"  800","line":"    double yrel = particles[part][Bunch::y] - get_y_offset();"},
{"lineNum":"  801","line":""},
{"lineNum":"  802","line":"    return ((std::abs(xrel) > 0.5 * width) || (std::abs(yrel) > 0.5 * height));"},
{"lineNum":"  803","line":"}"},
{"lineNum":"  804","line":""},
{"lineNum":"  805","line":"inline bool"},
{"lineNum":"  806","line":"Rectangular_with_ears_aperture_operation::operator()(MArray2d_ref & particles, int part)"},
{"lineNum":"  807","line":"{"},
{"lineNum":"  808","line":"    double xrel = particles[part][Bunch::x] - get_x_offset();"},
{"lineNum":"  809","line":"    double yrel = particles[part][Bunch::y] - get_y_offset();"},
{"lineNum":"  810","line":""},
{"lineNum":"  811","line":"    // hopefully most particles will be within the rectangular area so check it first"},
{"lineNum":"  812","line":"    if ((std::abs(xrel) <= 0.5*width) &&"},
{"lineNum":"  813","line":"        (std::abs(yrel) <= 0.5*height))"},
{"lineNum":"  814","line":"        return 0;"},
{"lineNum":"  815","line":""},
{"lineNum":"  816","line":"    if ((std::abs(xrel) > 0.5*width+radius) ||"},
{"lineNum":"  817","line":"        (std::abs(yrel) > 0.5*height))"},
{"lineNum":"  818","line":"        return 1;"},
{"lineNum":"  819","line":""},
{"lineNum":"  820","line":"    if (std::abs(yrel) <= ear_offset)"},
{"lineNum":"  821","line":"        return (std::abs(xrel) > 0.5*width+radius);"},
{"lineNum":"  822","line":""},
{"lineNum":"  823","line":"    double xcirc = std::abs(xrel)-0.5*width;"},
{"lineNum":"  824","line":"    double ycirc = std::abs(yrel)-ear_offset;"},
{"lineNum":"  825","line":""},
{"lineNum":"  826","line":"    return ( xcirc*xcirc + ycirc*ycirc > radius*radius);"},
{"lineNum":"  827","line":"}"},
{"lineNum":"  828","line":""},
{"lineNum":"  829","line":"inline bool"},
{"lineNum":"  830","line":"Polygon_aperture_operation::operator()(MArray2d_ref & particles, int part)"},
{"lineNum":"  831","line":"{"},
{"lineNum":"  832","line":"    double xrel = particles[part][Bunch::x] - get_x_offset();"},
{"lineNum":"  833","line":"    double yrel = particles[part][Bunch::y] - get_y_offset();"},
{"lineNum":"  834","line":"    double r2 = xrel * xrel + yrel * yrel;"},
{"lineNum":"  835","line":""},
{"lineNum":"  836","line":"    bool keep = true;"},
{"lineNum":"  837","line":"    if (r2 >= min_radius2) {"},
{"lineNum":"  838","line":"        std::complex<double > u(xrel, yrel);"},
{"lineNum":"  839","line":"        int index = 0;"},
{"lineNum":"  840","line":"        int size = vertices.size();"},
{"lineNum":"  841","line":"        double theta_sum = 0.0;"},
{"lineNum":"  842","line":"        while (index < size) {"},
{"lineNum":"  843","line":"            int index2 = index + 1;"},
{"lineNum":"  844","line":"            if (size == index2) index2 = 0;"},
{"lineNum":"  845","line":"            std::complex<double > v(vertices[index]);"},
{"lineNum":"  846","line":"            std::complex<double > w(vertices[index2]);"},
{"lineNum":"  847","line":"            double theta = arg((w - u) * conj(v - u));"},
{"lineNum":"  848","line":"            theta_sum += theta;"},
{"lineNum":"  849","line":"            ++index;"},
{"lineNum":"  850","line":"        }"},
{"lineNum":"  851","line":"        const double tiny = 1.0e-12;"},
{"lineNum":"  852","line":"        if (theta_sum / (2.0 * mconstants::pi) < tiny) keep = false;"},
{"lineNum":"  853","line":"    }"},
{"lineNum":"  854","line":"    return (!keep);"},
{"lineNum":"  855","line":"}"},
{"lineNum":"  856","line":""},
{"lineNum":"  857","line":"inline bool"},
{"lineNum":"  858","line":"Wire_elliptical_aperture_operation::operator()(MArray2d_ref & particles,"},
{"lineNum":"  859","line":"        int part)"},
{"lineNum":"  860","line":"{"},
{"lineNum":"  861","line":"    double xrel = particles[part][Bunch::x] - get_x_offset();"},
{"lineNum":"  862","line":"    double yrel = particles[part][Bunch::y] - get_y_offset();"},
{"lineNum":"  863","line":""},
{"lineNum":"  864","line":"    double scaled_r2 = xrel * xrel / h2 + yrel * yrel / v2;"},
{"lineNum":"  865","line":"    bool retval;"},
{"lineNum":"  866","line":"    if (wire_x > 0.0) {"},
{"lineNum":"  867","line":"        retval = (scaled_r2 > 1.0) || ((xrel >= wire_x)"},
{"lineNum":"  868","line":"            && (xrel <= wire_x + wire_width)) || (xrel >= wire_x + wire_width + gap);"},
{"lineNum":"  869","line":"    } else if (wire_x < 0.0) {"},
{"lineNum":"  870","line":"        retval = (scaled_r2 > 1.0) || ((xrel <= wire_x)"},
{"lineNum":"  871","line":"            && (xrel >= wire_x - wire_width)) || (xrel <= wire_x - wire_width - gap);"},
{"lineNum":"  872","line":"    } else {"},
{"lineNum":"  873","line":"        throw std::runtime_error("},
{"lineNum":"  874","line":"                \"wire_elliptical_aperture_operation: wire_x and gap should not be zero\");"},
{"lineNum":"  875","line":"    }"},
{"lineNum":"  876","line":"    return retval;"},
{"lineNum":"  877","line":"}"},
{"lineNum":"  878","line":""},
{"lineNum":"  879","line":"inline bool"},
{"lineNum":"  880","line":"Lambertson_aperture_operation::operator()(MArray2d_ref & particles, int part)"},
{"lineNum":"  881","line":"{"},
{"lineNum":"  882","line":"    double xrel = particles[part][Bunch::x] - get_x_offset();"},
{"lineNum":"  883","line":""},
{"lineNum":"  884","line":"    bool retval;"},
{"lineNum":"  885","line":"    if (radius > 0.0) {"},
{"lineNum":"  886","line":"        retval = (xrel >= radius);"},
{"lineNum":"  887","line":"    } else if (radius < 0.0) {"},
{"lineNum":"  888","line":"        retval = (xrel <= radius);"},
{"lineNum":"  889","line":"    } else {"},
{"lineNum":"  890","line":"        throw std::runtime_error("},
{"lineNum":"  891","line":"                \"lambertson_aperture_operation: lambertson_aperture_radius should not be zero\");"},
{"lineNum":"  892","line":"    }"},
{"lineNum":"  893","line":"    return retval;"},
{"lineNum":"  894","line":"}"},
{"lineNum":"  895","line":"#endif"},
{"lineNum":"  896","line":""},
{"lineNum":"  897","line":"#endif /* APERTURE_OPERATION_H_ */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 35, "covered" : 0,};
var merged_data = [];
