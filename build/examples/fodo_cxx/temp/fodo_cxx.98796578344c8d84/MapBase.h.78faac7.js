var data = {lines:[
{"lineNum":"    1","line":"// This file is part of Eigen, a lightweight C++ template library"},
{"lineNum":"    2","line":"// for linear algebra."},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Copyright (C) 2007-2010 Benoit Jacob <jacob.benoit.1@gmail.com>"},
{"lineNum":"    5","line":"// Copyright (C) 2008 Gael Guennebaud <gael.guennebaud@inria.fr>"},
{"lineNum":"    6","line":"//"},
{"lineNum":"    7","line":"// This Source Code Form is subject to the terms of the Mozilla"},
{"lineNum":"    8","line":"// Public License v. 2.0. If a copy of the MPL was not distributed"},
{"lineNum":"    9","line":"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/."},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"#ifndef EIGEN_MAPBASE_H"},
{"lineNum":"   12","line":"#define EIGEN_MAPBASE_H"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"#define EIGEN_STATIC_ASSERT_INDEX_BASED_ACCESS(Derived) \\"},
{"lineNum":"   15","line":"      EIGEN_STATIC_ASSERT((int(internal::evaluator<Derived>::Flags) & LinearAccessBit) || Derived::IsVectorAtCompileTime, \\"},
{"lineNum":"   16","line":"                          YOU_ARE_TRYING_TO_USE_AN_INDEX_BASED_ACCESSOR_ON_AN_EXPRESSION_THAT_DOES_NOT_SUPPORT_THAT)"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"#include \"./InternalHeaderCheck.h\""},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"namespace Eigen {"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"/** \\ingroup Core_Module"},
{"lineNum":"   23","line":"  *"},
{"lineNum":"   24","line":"  * \\brief Base class for dense Map and Block expression with direct access"},
{"lineNum":"   25","line":"  *"},
{"lineNum":"   26","line":"  * This base class provides the const low-level accessors (e.g. coeff, coeffRef) of dense"},
{"lineNum":"   27","line":"  * Map and Block objects with direct access."},
{"lineNum":"   28","line":"  * Typical users do not have to directly deal with this class."},
{"lineNum":"   29","line":"  *"},
{"lineNum":"   30","line":"  * This class can be extended by through the macro plugin \\c EIGEN_MAPBASE_PLUGIN."},
{"lineNum":"   31","line":"  * See \\link TopicCustomizing_Plugins customizing Eigen \\endlink for details."},
{"lineNum":"   32","line":"  *"},
{"lineNum":"   33","line":"  * The \\c Derived class has to provide the following two methods describing the memory layout:"},
{"lineNum":"   34","line":"  *  \\code Index innerStride() const; \\endcode"},
{"lineNum":"   35","line":"  *  \\code Index outerStride() const; \\endcode"},
{"lineNum":"   36","line":"  *"},
{"lineNum":"   37","line":"  * \\sa class Map, class Block"},
{"lineNum":"   38","line":"  */"},
{"lineNum":"   39","line":"template<typename Derived> class MapBase<Derived, ReadOnlyAccessors>"},
{"lineNum":"   40","line":"  : public internal::dense_xpr_base<Derived>::type"},
{"lineNum":"   41","line":"{"},
{"lineNum":"   42","line":"  public:"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"    typedef typename internal::dense_xpr_base<Derived>::type Base;"},
{"lineNum":"   45","line":"    enum {"},
{"lineNum":"   46","line":"      RowsAtCompileTime = internal::traits<Derived>::RowsAtCompileTime,"},
{"lineNum":"   47","line":"      ColsAtCompileTime = internal::traits<Derived>::ColsAtCompileTime,"},
{"lineNum":"   48","line":"      InnerStrideAtCompileTime = internal::traits<Derived>::InnerStrideAtCompileTime,"},
{"lineNum":"   49","line":"      SizeAtCompileTime = Base::SizeAtCompileTime"},
{"lineNum":"   50","line":"    };"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"    typedef typename internal::traits<Derived>::StorageKind StorageKind;"},
{"lineNum":"   53","line":"    typedef typename internal::traits<Derived>::Scalar Scalar;"},
{"lineNum":"   54","line":"    typedef typename internal::packet_traits<Scalar>::type PacketScalar;"},
{"lineNum":"   55","line":"    typedef typename NumTraits<Scalar>::Real RealScalar;"},
{"lineNum":"   56","line":"    typedef typename internal::conditional<"},
{"lineNum":"   57","line":"                         bool(internal::is_lvalue<Derived>::value),"},
{"lineNum":"   58","line":"                         Scalar *,"},
{"lineNum":"   59","line":"                         const Scalar *>::type"},
{"lineNum":"   60","line":"                     PointerType;"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"    using Base::derived;"},
{"lineNum":"   63","line":"//    using Base::RowsAtCompileTime;"},
{"lineNum":"   64","line":"//    using Base::ColsAtCompileTime;"},
{"lineNum":"   65","line":"//    using Base::SizeAtCompileTime;"},
{"lineNum":"   66","line":"    using Base::MaxRowsAtCompileTime;"},
{"lineNum":"   67","line":"    using Base::MaxColsAtCompileTime;"},
{"lineNum":"   68","line":"    using Base::MaxSizeAtCompileTime;"},
{"lineNum":"   69","line":"    using Base::IsVectorAtCompileTime;"},
{"lineNum":"   70","line":"    using Base::Flags;"},
{"lineNum":"   71","line":"    using Base::IsRowMajor;"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"    using Base::rows;"},
{"lineNum":"   74","line":"    using Base::cols;"},
{"lineNum":"   75","line":"    using Base::size;"},
{"lineNum":"   76","line":"    using Base::coeff;"},
{"lineNum":"   77","line":"    using Base::coeffRef;"},
{"lineNum":"   78","line":"    using Base::lazyAssign;"},
{"lineNum":"   79","line":"    using Base::eval;"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"    using Base::innerStride;"},
{"lineNum":"   82","line":"    using Base::outerStride;"},
{"lineNum":"   83","line":"    using Base::rowStride;"},
{"lineNum":"   84","line":"    using Base::colStride;"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"    // bug 217 - compile error on ICC 11.1"},
{"lineNum":"   87","line":"    using Base::operator=;"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"    typedef typename Base::CoeffReturnType CoeffReturnType;"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"    /** \\copydoc DenseBase::rows() */"},
{"lineNum":"   92","line":"    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR"},
{"lineNum":"   93","line":"    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }"},
{"lineNum":"   94","line":"    /** \\copydoc DenseBase::cols() */"},
{"lineNum":"   95","line":"    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR"},
{"lineNum":"   96","line":"    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"    /** Returns a pointer to the first coefficient of the matrix or vector."},
{"lineNum":"   99","line":"      *"},
{"lineNum":"  100","line":"      * \\note When addressing this data, make sure to honor the strides returned by innerStride() and outerStride()."},
{"lineNum":"  101","line":"      *"},
{"lineNum":"  102","line":"      * \\sa innerStride(), outerStride()"},
{"lineNum":"  103","line":"      */"},
{"lineNum":"  104","line":"    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"    /** \\copydoc PlainObjectBase::coeff(Index,Index) const */"},
{"lineNum":"  107","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"  108","line":"    inline const Scalar& coeff(Index rowId, Index colId) const"},
{"lineNum":"  109","line":"    {"},
{"lineNum":"  110","line":"      return m_data[colId * colStride() + rowId * rowStride()];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  111","line":"    }"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"    /** \\copydoc PlainObjectBase::coeff(Index) const */"},
{"lineNum":"  114","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"  115","line":"    inline const Scalar& coeff(Index index) const"},
{"lineNum":"  116","line":"    {"},
{"lineNum":"  117","line":"      EIGEN_STATIC_ASSERT_INDEX_BASED_ACCESS(Derived)"},
{"lineNum":"  118","line":"      return m_data[index * innerStride()];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  119","line":"    }"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"    /** \\copydoc PlainObjectBase::coeffRef(Index,Index) const */"},
{"lineNum":"  122","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"  123","line":"    inline const Scalar& coeffRef(Index rowId, Index colId) const"},
{"lineNum":"  124","line":"    {"},
{"lineNum":"  125","line":"      return this->m_data[colId * colStride() + rowId * rowStride()];","class":"lineNoCov","hits":"0","possible_hits":"29",},
{"lineNum":"  126","line":"    }"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"    /** \\copydoc PlainObjectBase::coeffRef(Index) const */"},
{"lineNum":"  129","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"  130","line":"    inline const Scalar& coeffRef(Index index) const"},
{"lineNum":"  131","line":"    {"},
{"lineNum":"  132","line":"      EIGEN_STATIC_ASSERT_INDEX_BASED_ACCESS(Derived)"},
{"lineNum":"  133","line":"      return this->m_data[index * innerStride()];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  134","line":"    }"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"    /** \\internal */"},
{"lineNum":"  137","line":"    template<int LoadMode>"},
{"lineNum":"  138","line":"    inline PacketScalar packet(Index rowId, Index colId) const"},
{"lineNum":"  139","line":"    {"},
{"lineNum":"  140","line":"      return internal::ploadt<PacketScalar, LoadMode>"},
{"lineNum":"  141","line":"               (m_data + (colId * colStride() + rowId * rowStride()));"},
{"lineNum":"  142","line":"    }"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"    /** \\internal */"},
{"lineNum":"  145","line":"    template<int LoadMode>"},
{"lineNum":"  146","line":"    inline PacketScalar packet(Index index) const"},
{"lineNum":"  147","line":"    {"},
{"lineNum":"  148","line":"      EIGEN_STATIC_ASSERT_INDEX_BASED_ACCESS(Derived)"},
{"lineNum":"  149","line":"      return internal::ploadt<PacketScalar, LoadMode>(m_data + index * innerStride());"},
{"lineNum":"  150","line":"    }"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"    /** \\internal Constructor for fixed size matrices or vectors */"},
{"lineNum":"  153","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"  154","line":"    explicit inline MapBase(PointerType dataPtr) : m_data(dataPtr), m_rows(RowsAtCompileTime), m_cols(ColsAtCompileTime)"},
{"lineNum":"  155","line":"    {"},
{"lineNum":"  156","line":"      EIGEN_STATIC_ASSERT_FIXED_SIZE(Derived)"},
{"lineNum":"  157","line":"      checkSanity<Derived>();"},
{"lineNum":"  158","line":"    }"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"    /** \\internal Constructor for dynamically sized vectors */"},
{"lineNum":"  161","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"  162","line":"    inline MapBase(PointerType dataPtr, Index vecSize)"},
{"lineNum":"  163","line":"            : m_data(dataPtr),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  164","line":"              m_rows(RowsAtCompileTime == Dynamic ? vecSize : Index(RowsAtCompileTime)),"},
{"lineNum":"  165","line":"              m_cols(ColsAtCompileTime == Dynamic ? vecSize : Index(ColsAtCompileTime))"},
{"lineNum":"  166","line":"    {"},
{"lineNum":"  167","line":"      EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived)"},
{"lineNum":"  168","line":"      eigen_assert(vecSize >= 0);"},
{"lineNum":"  169","line":"      eigen_assert(dataPtr == 0 || SizeAtCompileTime == Dynamic || SizeAtCompileTime == vecSize);"},
{"lineNum":"  170","line":"      checkSanity<Derived>();"},
{"lineNum":"  171","line":"    }"},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"    /** \\internal Constructor for dynamically sized matrices */"},
{"lineNum":"  174","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"  175","line":"    inline MapBase(PointerType dataPtr, Index rows, Index cols)"},
{"lineNum":"  176","line":"            : m_data(dataPtr), m_rows(rows), m_cols(cols)","class":"lineNoCov","hits":"0","possible_hits":"99",},
{"lineNum":"  177","line":"    {"},
{"lineNum":"  178","line":"      eigen_assert( (dataPtr == 0)"},
{"lineNum":"  179","line":"              || (   rows >= 0 && (RowsAtCompileTime == Dynamic || RowsAtCompileTime == rows)"},
{"lineNum":"  180","line":"                  && cols >= 0 && (ColsAtCompileTime == Dynamic || ColsAtCompileTime == cols)));"},
{"lineNum":"  181","line":"      checkSanity<Derived>();"},
{"lineNum":"  182","line":"    }"},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"    #ifdef EIGEN_MAPBASE_PLUGIN"},
{"lineNum":"  185","line":"    #include EIGEN_MAPBASE_PLUGIN"},
{"lineNum":"  186","line":"    #endif"},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"  protected:"},
{"lineNum":"  189","line":"    EIGEN_DEFAULT_COPY_CONSTRUCTOR(MapBase)"},
{"lineNum":"  190","line":"    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(MapBase)"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"    template<typename T>"},
{"lineNum":"  193","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"  194","line":"    void checkSanity(typename internal::enable_if<(internal::traits<T>::Alignment>0),void*>::type = 0) const"},
{"lineNum":"  195","line":"    {"},
{"lineNum":"  196","line":"#if EIGEN_MAX_ALIGN_BYTES>0"},
{"lineNum":"  197","line":"      // innerStride() is not set yet when this function is called, so we optimistically assume the lowest plausible value:"},
{"lineNum":"  198","line":"      const Index minInnerStride = InnerStrideAtCompileTime == Dynamic ? 1 : Index(InnerStrideAtCompileTime);"},
{"lineNum":"  199","line":"      EIGEN_ONLY_USED_FOR_DEBUG(minInnerStride);"},
{"lineNum":"  200","line":"      eigen_assert((   ((internal::UIntPtr(m_data) % internal::traits<Derived>::Alignment) == 0)"},
{"lineNum":"  201","line":"                    || (cols() * rows() * minInnerStride * sizeof(Scalar)) < internal::traits<Derived>::Alignment ) && \"data is not aligned\");"},
{"lineNum":"  202","line":"#endif"},
{"lineNum":"  203","line":"    }"},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"    template<typename T>"},
{"lineNum":"  206","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"  207","line":"    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const"},
{"lineNum":"  208","line":"    {}"},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"    PointerType m_data;"},
{"lineNum":"  211","line":"    const internal::variable_if_dynamic<Index, RowsAtCompileTime> m_rows;"},
{"lineNum":"  212","line":"    const internal::variable_if_dynamic<Index, ColsAtCompileTime> m_cols;"},
{"lineNum":"  213","line":"};"},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"/** \\ingroup Core_Module"},
{"lineNum":"  216","line":"  *"},
{"lineNum":"  217","line":"  * \\brief Base class for non-const dense Map and Block expression with direct access"},
{"lineNum":"  218","line":"  *"},
{"lineNum":"  219","line":"  * This base class provides the non-const low-level accessors (e.g. coeff and coeffRef) of"},
{"lineNum":"  220","line":"  * dense Map and Block objects with direct access."},
{"lineNum":"  221","line":"  * It inherits MapBase<Derived, ReadOnlyAccessors> which defines the const variant for reading specific entries."},
{"lineNum":"  222","line":"  *"},
{"lineNum":"  223","line":"  * \\sa class Map, class Block"},
{"lineNum":"  224","line":"  */"},
{"lineNum":"  225","line":"template<typename Derived> class MapBase<Derived, WriteAccessors>"},
{"lineNum":"  226","line":"  : public MapBase<Derived, ReadOnlyAccessors>"},
{"lineNum":"  227","line":"{"},
{"lineNum":"  228","line":"    typedef MapBase<Derived, ReadOnlyAccessors> ReadOnlyMapBase;"},
{"lineNum":"  229","line":"  public:"},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"    typedef MapBase<Derived, ReadOnlyAccessors> Base;"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"    typedef typename Base::Scalar Scalar;"},
{"lineNum":"  234","line":"    typedef typename Base::PacketScalar PacketScalar;"},
{"lineNum":"  235","line":"    typedef typename Base::StorageIndex StorageIndex;"},
{"lineNum":"  236","line":"    typedef typename Base::PointerType PointerType;"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"    using Base::derived;"},
{"lineNum":"  239","line":"    using Base::rows;"},
{"lineNum":"  240","line":"    using Base::cols;"},
{"lineNum":"  241","line":"    using Base::size;"},
{"lineNum":"  242","line":"    using Base::coeff;"},
{"lineNum":"  243","line":"    using Base::coeffRef;"},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"    using Base::innerStride;"},
{"lineNum":"  246","line":"    using Base::outerStride;"},
{"lineNum":"  247","line":"    using Base::rowStride;"},
{"lineNum":"  248","line":"    using Base::colStride;"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"    typedef typename internal::conditional<"},
{"lineNum":"  251","line":"                    internal::is_lvalue<Derived>::value,"},
{"lineNum":"  252","line":"                    Scalar,"},
{"lineNum":"  253","line":"                    const Scalar"},
{"lineNum":"  254","line":"                  >::type ScalarWithConstIfNotLvalue;"},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"  257","line":"    inline const Scalar* data() const { return this->m_data; }","class":"lineNoCov","hits":"0","possible_hits":"56",},
{"lineNum":"  258","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"  259","line":"    inline ScalarWithConstIfNotLvalue* data() { return this->m_data; } // no const-cast here so non-const-correct code will give a compile error","class":"lineNoCov","hits":"0","possible_hits":"83",},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"  262","line":"    inline ScalarWithConstIfNotLvalue& coeffRef(Index row, Index col)"},
{"lineNum":"  263","line":"    {"},
{"lineNum":"  264","line":"      return this->m_data[col * colStride() + row * rowStride()];","class":"lineNoCov","hits":"0","possible_hits":"15",},
{"lineNum":"  265","line":"    }"},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"  268","line":"    inline ScalarWithConstIfNotLvalue& coeffRef(Index index)"},
{"lineNum":"  269","line":"    {"},
{"lineNum":"  270","line":"      EIGEN_STATIC_ASSERT_INDEX_BASED_ACCESS(Derived)"},
{"lineNum":"  271","line":"      return this->m_data[index * innerStride()];","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  272","line":"    }"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"    template<int StoreMode>"},
{"lineNum":"  275","line":"    inline void writePacket(Index row, Index col, const PacketScalar& val)"},
{"lineNum":"  276","line":"    {"},
{"lineNum":"  277","line":"      internal::pstoret<Scalar, PacketScalar, StoreMode>"},
{"lineNum":"  278","line":"               (this->m_data + (col * colStride() + row * rowStride()), val);"},
{"lineNum":"  279","line":"    }"},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"    template<int StoreMode>"},
{"lineNum":"  282","line":"    inline void writePacket(Index index, const PacketScalar& val)"},
{"lineNum":"  283","line":"    {"},
{"lineNum":"  284","line":"      EIGEN_STATIC_ASSERT_INDEX_BASED_ACCESS(Derived)"},
{"lineNum":"  285","line":"      internal::pstoret<Scalar, PacketScalar, StoreMode>"},
{"lineNum":"  286","line":"                (this->m_data + index * innerStride(), val);"},
{"lineNum":"  287","line":"    }"},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"    EIGEN_DEVICE_FUNC explicit inline MapBase(PointerType dataPtr) : Base(dataPtr) {}"},
{"lineNum":"  290","line":"    EIGEN_DEVICE_FUNC inline MapBase(PointerType dataPtr, Index vecSize) : Base(dataPtr, vecSize) {}"},
{"lineNum":"  291","line":"    EIGEN_DEVICE_FUNC inline MapBase(PointerType dataPtr, Index rows, Index cols) : Base(dataPtr, rows, cols) {}"},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"  294","line":"    Derived& operator=(const MapBase& other)"},
{"lineNum":"  295","line":"    {"},
{"lineNum":"  296","line":"      ReadOnlyMapBase::Base::operator=(other);"},
{"lineNum":"  297","line":"      return derived();"},
{"lineNum":"  298","line":"    }"},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"    // In theory we could simply refer to Base:Base::operator=, but MSVC does not like Base::Base,"},
{"lineNum":"  301","line":"    // see bugs 821 and 920."},
{"lineNum":"  302","line":"    using ReadOnlyMapBase::Base::operator=;"},
{"lineNum":"  303","line":"  protected:"},
{"lineNum":"  304","line":"    EIGEN_DEFAULT_COPY_CONSTRUCTOR(MapBase)"},
{"lineNum":"  305","line":"    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(MapBase)"},
{"lineNum":"  306","line":"};"},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"#undef EIGEN_STATIC_ASSERT_INDEX_BASED_ACCESS"},
{"lineNum":"  309","line":""},
{"lineNum":"  310","line":"} // end namespace Eigen"},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":"#endif // EIGEN_MAPBASE_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 11, "covered" : 0,};
var merged_data = [];
