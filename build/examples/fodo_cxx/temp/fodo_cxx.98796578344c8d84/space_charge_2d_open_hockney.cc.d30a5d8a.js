var data = {lines:[
{"lineNum":"    1","line":""},
{"lineNum":"    2","line":"#include \"space_charge_2d_open_hockney.h\""},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#include \"synergia/bunch/core_diagnostics.h\""},
{"lineNum":"    5","line":"#include \"synergia/foundation/math_constants.h\""},
{"lineNum":"    6","line":"#include \"synergia/foundation/physical_constants.h\""},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"#include \"synergia/collective/deposit.h\""},
{"lineNum":"    9","line":"#include \"synergia/utils/simple_timer.h\""},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"using mconstants::pi;"},
{"lineNum":"   12","line":"using pconstants::epsilon0;"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"namespace"},
{"lineNum":"   15","line":"{"},
{"lineNum":"   16","line":"    void"},
{"lineNum":"   17","line":"    print_grid( Logger & logger,"},
{"lineNum":"   18","line":"                karray1d_dev const & grid,"},
{"lineNum":"   19","line":"                int x0, int x1,"},
{"lineNum":"   20","line":"                int y0, int y1,"},
{"lineNum":"   21","line":"                int gx, int gy,"},
{"lineNum":"   22","line":"                int off = 0 )"},
{"lineNum":"   23","line":"    {"},
{"lineNum":"   24","line":"        karray1d hgrid = Kokkos::create_mirror_view(grid);"},
{"lineNum":"   25","line":"        Kokkos::deep_copy(hgrid, grid);"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"        double sum = 0;"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"        int dim = grid.extent(0);"},
{"lineNum":"   30","line":"        for(int i=0; i<dim; ++i) sum += hgrid(i);"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"#if 0"},
{"lineNum":"   33","line":"        for(int x=0; x<gx; ++x)"},
{"lineNum":"   34","line":"            for(int y=0; y<gy; ++y)"},
{"lineNum":"   35","line":"                sum += hgrid((x*gy + y)*2 + off);"},
{"lineNum":"   36","line":"#endif"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"        logger"},
{"lineNum":"   39","line":"            //<< std::resetiosflags(std::ios::fixed)"},
{"lineNum":"   40","line":"            //<< std::setiosflags(std::ios::showpos | std::ios::scientific)"},
{"lineNum":"   41","line":"            << std::setprecision(12);"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"        logger << \"      \" << grid.label() << \" = \" << sum << \"\\n\";"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"        for(int x=x0; x<x1; ++x)"},
{"lineNum":"   46","line":"        {"},
{"lineNum":"   47","line":"            logger << \"        \" << x << \" | \";"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"            for (int y=y0; y<y1; ++y)"},
{"lineNum":"   50","line":"            {"},
{"lineNum":"   51","line":"                logger << hgrid((x*gy + y)*2 + off) << \", \";"},
{"lineNum":"   52","line":"            }"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"            logger << \"\\n\";"},
{"lineNum":"   55","line":"        }"},
{"lineNum":"   56","line":"    }"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"    double"},
{"lineNum":"   60","line":"    get_smallest_non_tiny( double val,"},
{"lineNum":"   61","line":"                           double other1,"},
{"lineNum":"   62","line":"                           double other2,"},
{"lineNum":"   63","line":"                           double tiny )"},
{"lineNum":"   64","line":"    {"},
{"lineNum":"   65","line":"        double retval;"},
{"lineNum":"   66","line":"        if (val > tiny)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   67","line":"        {"},
{"lineNum":"   68","line":"            retval = val;"},
{"lineNum":"   69","line":"        }"},
{"lineNum":"   70","line":"        else"},
{"lineNum":"   71","line":"        {"},
{"lineNum":"   72","line":"            if ((other1 > tiny) && (other2 > tiny))","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   73","line":"            {"},
{"lineNum":"   74","line":"                retval = std::min(other1, other2);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   75","line":"            }"},
{"lineNum":"   76","line":"            else"},
{"lineNum":"   77","line":"            {"},
{"lineNum":"   78","line":"                retval = std::max(other1, other2);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   79","line":"            }"},
{"lineNum":"   80","line":"        }"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"        return retval;"},
{"lineNum":"   83","line":"    }"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   86","line":"    int fast_int_floor_kokkos(const double x)"},
{"lineNum":"   87","line":"    {"},
{"lineNum":"   88","line":"        int ix = static_cast<int>(x);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   89","line":"        return x > 0.0 ? ix : ((x - ix == 0) ? ix : ix - 1);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   90","line":"    }"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"#if 0"},
{"lineNum":"   94","line":"    inline std::complex<double >"},
{"lineNum":"   95","line":"    interpolate_rectangular_2d(double * bin, bool periodic_z,"},
{"lineNum":"   96","line":"            MArray2dc_ref const& a, MArray1d_ref const& b)"},
{"lineNum":"   97","line":"    {"},
{"lineNum":"   98","line":"        // bi-linear interpolation"},
{"lineNum":"   99","line":"        int ix, iy, iz;"},
{"lineNum":"  100","line":"        double offx, offy, offz;"},
{"lineNum":"  101","line":"        ix = fast_int_floor(bin[0]);"},
{"lineNum":"  102","line":"        iy = fast_int_floor(bin[2]);"},
{"lineNum":"  103","line":"        iz = fast_int_floor(bin[4]);"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"        offx = bin[1];"},
{"lineNum":"  106","line":"        offy = bin[3];"},
{"lineNum":"  107","line":"        offz = bin[5];"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"        std::vector<int > grid_shape(3);"},
{"lineNum":"  110","line":"        grid_shape[0] = a.shape()[0];"},
{"lineNum":"  111","line":"        grid_shape[1] = a.shape()[1];"},
{"lineNum":"  112","line":"        grid_shape[2] = b.shape()[0];"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"        std::complex<double > val;"},
{"lineNum":"  115","line":"        if ( (grid_shape[2] == 1)"},
{"lineNum":"  116","line":"                && ( (ix >= 0)"},
{"lineNum":"  117","line":"                    && (ix < grid_shape[0] - 1)"},
{"lineNum":"  118","line":"                    && (iy >= 0)"},
{"lineNum":"  119","line":"                    && (iy < grid_shape[1] - 1) )"},
{"lineNum":"  120","line":"                && ( periodic_z"},
{"lineNum":"  121","line":"                    || ( (iz >= 0) && (iz <= grid_shape[2]) ) ) )"},
{"lineNum":"  122","line":"        {"},
{"lineNum":"  123","line":"            double line_density = b[0];"},
{"lineNum":"  124","line":"            val = line_density * ((1.0 - offx) * (1.0 - offy) * a[ix][iy]"},
{"lineNum":"  125","line":"                    + offx * (1.0 - offy) * a[ix + 1][iy]"},
{"lineNum":"  126","line":"                    + (1.0 - offx) * offy * a[ix][iy + 1]"},
{"lineNum":"  127","line":"                    + offx * offy * a[ix + 1][iy + 1]);"},
{"lineNum":"  128","line":"        }"},
{"lineNum":"  129","line":"        else if ( (grid_shape[2] > 1)"},
{"lineNum":"  130","line":"                && ( (ix >= 0)"},
{"lineNum":"  131","line":"                    && (ix < grid_shape[0] - 1)"},
{"lineNum":"  132","line":"                    && (iy >= 0)"},
{"lineNum":"  133","line":"                    && (iy < grid_shape[1] - 1) )"},
{"lineNum":"  134","line":"                && ( periodic_z"},
{"lineNum":"  135","line":"                    || ( (iz >= 0) && (iz < grid_shape[2] - 1) ) ) )"},
{"lineNum":"  136","line":"        {"},
{"lineNum":"  137","line":"            double line_density = (1.0 - offz) * b[iz] + offz * b[iz + 1];"},
{"lineNum":"  138","line":"            val = line_density * ((1.0 - offx) * (1.0 - offy) * a[ix][iy]"},
{"lineNum":"  139","line":"                    + offx * (1.0 - offy) * a[ix + 1][iy]"},
{"lineNum":"  140","line":"                    + (1.0 - offx) * offy * a[ix][iy + 1]"},
{"lineNum":"  141","line":"                    + offx * offy * a[ix + 1][iy + 1]);"},
{"lineNum":"  142","line":"        }"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"        return val;"},
{"lineNum":"  145","line":"    }"},
{"lineNum":"  146","line":"#endif"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"    struct alg_zeroer","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  149","line":"    {"},
{"lineNum":"  150","line":"        karray1d_dev arr;"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  153","line":"        void operator() (const int i) const"},
{"lineNum":"  154","line":"        { arr(i) = 0.0; }","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"  155","line":"    };"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"    struct alg_g2_pointlike","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  158","line":"    {"},
{"lineNum":"  159","line":"        const double epsilon = 0.01;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"        karray1d_dev g2;"},
{"lineNum":"  162","line":"        int gx, gy;"},
{"lineNum":"  163","line":"        int dgx, dgy;"},
{"lineNum":"  164","line":"        double hx, hy;"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"        alg_g2_pointlike("},
{"lineNum":"  167","line":"                karray1d_dev const & g2,"},
{"lineNum":"  168","line":"                std::array<int, 3> const & g,"},
{"lineNum":"  169","line":"                std::array<int, 3> const & dg,"},
{"lineNum":"  170","line":"                std::array<double, 3> const & h )"},
{"lineNum":"  171","line":"            : g2(g2)"},
{"lineNum":"  172","line":"            , gx(g[0]), gy(g[1])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  173","line":"            , dgx(dg[0]), dgy(dg[1])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  174","line":"            , hx(h[0]), hy(h[1])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  175","line":"        { }"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  178","line":"        void operator() (const int i) const"},
{"lineNum":"  179","line":"        {"},
{"lineNum":"  180","line":"            int ix = i/dgy;"},
{"lineNum":"  181","line":"            int iy = i - ix*dgy;"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"            double dx = (ix>gx) ? (ix-dgx)*hx : ix*hx;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  184","line":"            double dy = (iy>gy) ? (iy-dgy)*hy : iy*hy;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"            double Gx, Gy;"},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"            if (ix == gx || iy == gy)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  189","line":"            {"},
{"lineNum":"  190","line":"                Gx = 0.0;"},
{"lineNum":"  191","line":"                Gy = 0.0;"},
{"lineNum":"  192","line":"            }"},
{"lineNum":"  193","line":"            else"},
{"lineNum":"  194","line":"            {"},
{"lineNum":"  195","line":"                double inv = 1.0 / (dx*dx + dy*dy + hx*hy*epsilon*epsilon);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  196","line":"                Gx = dx * inv;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  197","line":"                Gy = dy * inv;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  198","line":"            }"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"            g2(i*2)   = Gx;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  201","line":"            g2(i*2+1) = Gy;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  202","line":"        }"},
{"lineNum":"  203","line":"    };"},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"    struct alg_cplx_multiplier","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  206","line":"    {"},
{"lineNum":"  207","line":"        karray1d_dev prod;"},
{"lineNum":"  208","line":"        karray1d_dev m1, m2;"},
{"lineNum":"  209","line":"        int off;"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"        alg_cplx_multiplier("},
{"lineNum":"  212","line":"                karray1d_dev const & prod,"},
{"lineNum":"  213","line":"                karray1d_dev const & m1,"},
{"lineNum":"  214","line":"                karray1d_dev const & m2,"},
{"lineNum":"  215","line":"                int offset)"},
{"lineNum":"  216","line":"            : prod(prod), m1(m1), m2(m2), off(offset)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  217","line":"        { }"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  220","line":"        void operator() (const int i) const"},
{"lineNum":"  221","line":"        {"},
{"lineNum":"  222","line":"            const int real = (off+i)*2;"},
{"lineNum":"  223","line":"            const int imag = (off+i)*2 + 1;"},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"            prod[real] = m1[real]*m2[real] - m1[imag]*m2[imag];","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  226","line":"            prod[imag] = m1[real]*m2[imag] + m1[imag]*m2[real];","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  227","line":"        }"},
{"lineNum":"  228","line":"    };"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"    struct alg_kicker","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  231","line":"    {"},
{"lineNum":"  232","line":"        Particles p;"},
{"lineNum":"  233","line":"        ConstParticleMasks masks;"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"        karray1d_dev fn;"},
{"lineNum":"  236","line":"        karray1d_dev rho;"},
{"lineNum":"  237","line":"        karray2d_dev bin;"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"        int gx, gy, gz;"},
{"lineNum":"  240","line":"        double factor;"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"        alg_kicker("},
{"lineNum":"  243","line":"                Particles p,"},
{"lineNum":"  244","line":"                ConstParticleMasks masks,"},
{"lineNum":"  245","line":"                karray1d_dev const & fn,"},
{"lineNum":"  246","line":"                karray1d_dev const & rho,"},
{"lineNum":"  247","line":"                karray2d_dev const & bin,"},
{"lineNum":"  248","line":"                std::array<int, 3> const & g,"},
{"lineNum":"  249","line":"                double factor )"},
{"lineNum":"  250","line":"            : p(p), masks(masks)"},
{"lineNum":"  251","line":"            , fn(fn), rho(rho), bin(bin)"},
{"lineNum":"  252","line":"            , gx(g[0]), gy(g[1]), gz(g[2])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  253","line":"            , factor(factor)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  254","line":"        { }"},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  257","line":"        void operator() (const int i) const"},
{"lineNum":"  258","line":"        {"},
{"lineNum":"  259","line":"            if (masks(i))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  260","line":"            {"},
{"lineNum":"  261","line":"                int ix = fast_int_floor_kokkos(bin(i, 0));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  262","line":"                int iy = fast_int_floor_kokkos(bin(i, 2));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  263","line":"                int iz = fast_int_floor_kokkos(bin(i, 4));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"                double ox = bin(i, 1);"},
{"lineNum":"  266","line":"                double oy = bin(i, 3);"},
{"lineNum":"  267","line":"                double oz = bin(i, 5);"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"                double aox = 1.0 - ox;"},
{"lineNum":"  270","line":"                double aoy = 1.0 - oy;"},
{"lineNum":"  271","line":"                double aoz = 1.0 - oz;"},
{"lineNum":"  272","line":""},
{"lineNum":"  273","line":"                int zbase = gx*gy*2;"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"                if ( ( ix>=0 && ix<gx-1 ) &&","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  276","line":"                     ( iy>=0 && iy<gy-1 ) &&","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  277","line":"                     ( /*periodic_z ||*/ (iz>=0 && iz<gz-1) ) )"},
{"lineNum":"  278","line":"                {"},
{"lineNum":"  279","line":"                    double line_density = aoz * rho(zbase+iz) + oz * rho(zbase+iz+1);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"                    double vx = line_density * (","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  282","line":"                              aox * aoy * fn( ((ix  )*gy + (iy  ))*2 )","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  283","line":"                            +  ox * aoy * fn( ((ix+1)*gy + (iy  ))*2 )","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  284","line":"                            + aox *  oy * fn( ((ix  )*gy + (iy+1))*2 )","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  285","line":"                            +  ox *  oy * fn( ((ix+1)*gy + (iy+1))*2 ) );","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  286","line":""},
{"lineNum":"  287","line":"                    double vy = line_density * (","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  288","line":"                              aox * aoy * fn( ((ix  )*gy + (iy  ))*2 + 1 )","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  289","line":"                            +  ox * aoy * fn( ((ix+1)*gy + (iy  ))*2 + 1 )","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  290","line":"                            + aox *  oy * fn( ((ix  )*gy + (iy+1))*2 + 1 )","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  291","line":"                            +  ox *  oy * fn( ((ix+1)*gy + (iy+1))*2 + 1 ) );","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"                    p(i, 1) += factor * vx;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  294","line":"                    p(i, 3) += factor * vy;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  295","line":"                }"},
{"lineNum":"  296","line":"            }"},
{"lineNum":"  297","line":"        }"},
{"lineNum":"  298","line":"    };"},
{"lineNum":"  299","line":"}"},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":"Space_charge_2d_open_hockney::Space_charge_2d_open_hockney("},
{"lineNum":"  303","line":"        Space_charge_2d_open_hockney_options const& ops)"},
{"lineNum":"  304","line":"    : Collective_operator(\"sc_2d_open_hockney\", 1.0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  305","line":"    , options(ops)"},
{"lineNum":"  306","line":"    , bunch_sim_id()"},
{"lineNum":"  307","line":"    , domain(ops.shape, {1.0, 1.0, 1.0})"},
{"lineNum":"  308","line":"    , doubled_domain(ops.doubled_shape, {1.0, 1.0, 1.0})"},
{"lineNum":"  309","line":"    , particle_bin()"},
{"lineNum":"  310","line":"    , ffts()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  311","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  312","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  313","line":""},
{"lineNum":"  314","line":"void"},
{"lineNum":"  315","line":"Space_charge_2d_open_hockney::apply_impl("},
{"lineNum":"  316","line":"            Bunch_simulator& sim,"},
{"lineNum":"  317","line":"            double time_step,"},
{"lineNum":"  318","line":"            Logger& logger)"},
{"lineNum":"  319","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  320","line":"    logger << \"    Space charge 2d open hockney\\n\";"},
{"lineNum":"  321","line":""},
{"lineNum":"  322","line":"    scoped_simple_timer timer(\"sc2d_total\");"},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"    // construct the workspace for a new bunch simulator"},
{"lineNum":"  325","line":"    if (bunch_sim_id != sim.id())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  326","line":"    {"},
{"lineNum":"  327","line":"        construct_workspaces(sim);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  328","line":"        bunch_sim_id = sim.id();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  329","line":"    }"},
{"lineNum":"  330","line":""},
{"lineNum":"  331","line":"    // apply to bunches"},
{"lineNum":"  332","line":"    for(size_t t=0; t<2; ++t)"},
{"lineNum":"  333","line":"    {"},
{"lineNum":"  334","line":"        for(size_t b=0; b<sim[t].get_bunch_array_size(); ++b)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  335","line":"        {"},
{"lineNum":"  336","line":"            apply_bunch(sim[t][b], ffts[t][b], time_step, logger);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  337","line":"        }"},
{"lineNum":"  338","line":"    }"},
{"lineNum":"  339","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  340","line":""},
{"lineNum":"  341","line":"void"},
{"lineNum":"  342","line":"Space_charge_2d_open_hockney::apply_bunch("},
{"lineNum":"  343","line":"            Bunch& bunch,"},
{"lineNum":"  344","line":"            Distributed_fft2d& fft,"},
{"lineNum":"  345","line":"            double time_step,"},
{"lineNum":"  346","line":"            Logger& logger)"},
{"lineNum":"  347","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  348","line":"    update_domain(bunch);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  349","line":""},
{"lineNum":"  350","line":"    get_local_charge_density(bunch); // [C/m^3]"},
{"lineNum":"  351","line":"    get_global_charge_density(bunch);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  352","line":""},
{"lineNum":"  353","line":"    get_green_fn2_pointlike();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"    get_local_force2(fft);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  356","line":"    get_global_force2(fft.get_comm());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"    auto fn_norm = get_normalization_force(bunch, fft);"},
{"lineNum":"  359","line":""},
{"lineNum":"  360","line":"    apply_kick(bunch, fn_norm, time_step);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  361","line":"}"},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"void"},
{"lineNum":"  364","line":"Space_charge_2d_open_hockney::construct_workspaces("},
{"lineNum":"  365","line":"        Bunch_simulator const& sim)"},
{"lineNum":"  366","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  367","line":"    scoped_simple_timer timer(\"sc2d_workspaces\");"},
{"lineNum":"  368","line":""},
{"lineNum":"  369","line":"    auto const& s = options.doubled_shape;"},
{"lineNum":"  370","line":""},
{"lineNum":"  371","line":"    rho2 = karray1d_dev(\"rho2\", s[0] * s[1] * 2 + s[2]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  372","line":"      g2 = karray1d_dev(  \"g2\", s[0] * s[1] * 2);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  373","line":"    phi2 = karray1d_dev(\"phi2\", s[0] * s[1] * 2);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  374","line":""},
{"lineNum":"  375","line":"    h_rho2 = Kokkos::create_mirror_view(rho2);"},
{"lineNum":"  376","line":"    h_phi2 = Kokkos::create_mirror_view(phi2);"},
{"lineNum":"  377","line":""},
{"lineNum":"  378","line":"    for(size_t t=0; t<2; ++t)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  379","line":"    {"},
{"lineNum":"  380","line":"        int num_local_bunches = sim[t].get_bunch_array_size();"},
{"lineNum":"  381","line":"        ffts[t] = std::vector<Distributed_fft2d>(num_local_bunches);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"        for(size_t b=0; b<num_local_bunches; ++b)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  384","line":"        {"},
{"lineNum":"  385","line":"            auto comm = sim[t][b]"},
{"lineNum":"  386","line":"                .get_comm()"},
{"lineNum":"  387","line":"                .divide(options.comm_group_size);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  388","line":""},
{"lineNum":"  389","line":"            ffts[t][b].construct({s[0], s[1]}, comm);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  390","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  391","line":"    }"},
{"lineNum":"  392","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  393","line":""},
{"lineNum":"  394","line":"void"},
{"lineNum":"  395","line":"Space_charge_2d_open_hockney::update_domain(Bunch const & bunch)"},
{"lineNum":"  396","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  397","line":"    scoped_simple_timer timer(\"sc2d_domain\");"},
{"lineNum":"  398","line":""},
{"lineNum":"  399","line":"    auto mean = Core_diagnostics::calculate_mean(bunch);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  400","line":"    auto std  = Core_diagnostics::calculate_std(bunch, mean);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  401","line":""},
{"lineNum":"  402","line":"    const double tiny = 1.0e-10;"},
{"lineNum":"  403","line":""},
{"lineNum":"  404","line":"    const auto ix = Bunch::x;"},
{"lineNum":"  405","line":"    const auto iy = Bunch::y;"},
{"lineNum":"  406","line":"    const auto iz = Bunch::z;"},
{"lineNum":"  407","line":""},
{"lineNum":"  408","line":"    if ( (std[ix] < tiny) && (std[iy] < tiny) && (std[iz] < tiny) )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  409","line":"    {"},
{"lineNum":"  410","line":"        throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  411","line":"                \"Space_charge_3d_open_hockney_eigen::update_domain: \""},
{"lineNum":"  412","line":"                \"all three spatial dimensions have neglible extent\");"},
{"lineNum":"  413","line":"    }"},
{"lineNum":"  414","line":""},
{"lineNum":"  415","line":"    std::array<double, 3> offset {"},
{"lineNum":"  416","line":"        mean[0],"},
{"lineNum":"  417","line":"        mean[2],"},
{"lineNum":"  418","line":"        mean[4] };"},
{"lineNum":"  419","line":""},
{"lineNum":"  420","line":"    std::array<double, 3> size {"},
{"lineNum":"  421","line":"        options.n_sigma * get_smallest_non_tiny(std[0], std[2], std[4], tiny),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  422","line":"        options.n_sigma * get_smallest_non_tiny(std[2], std[0], std[4], tiny),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  423","line":"        options.n_sigma * get_smallest_non_tiny(std[4], std[0], std[2], tiny) };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  424","line":""},
{"lineNum":"  425","line":"    std::array<double, 3> doubled_size {"},
{"lineNum":"  426","line":"        size[0] * 2.0,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  427","line":"        size[1] * 2.0,"},
{"lineNum":"  428","line":"        size[2] };"},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":"    domain = Rectangular_grid_domain(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  431","line":"            options.shape, size, offset, false);"},
{"lineNum":"  432","line":""},
{"lineNum":"  433","line":"    doubled_domain = Rectangular_grid_domain(","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  434","line":"            options.doubled_shape, doubled_size, offset, false);"},
{"lineNum":"  435","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  436","line":""},
{"lineNum":"  437","line":""},
{"lineNum":"  438","line":"void"},
{"lineNum":"  439","line":"Space_charge_2d_open_hockney::get_local_charge_density(Bunch const& bunch)"},
{"lineNum":"  440","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  441","line":"    scoped_simple_timer timer(\"sc2d_local_rho\");"},
{"lineNum":"  442","line":""},
{"lineNum":"  443","line":"    if (bunch.size() > particle_bin.extent(0))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  444","line":"        Kokkos::resize(particle_bin, bunch.size(), 6);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  445","line":""},
{"lineNum":"  446","line":"#ifdef Kokkos_ENABLE_CUDA"},
{"lineNum":"  447","line":"    deposit_charge_rectangular_2d_kokkos_scatter_view(rho2,"},
{"lineNum":"  448","line":"            doubled_domain, particle_bin, bunch);"},
{"lineNum":"  449","line":"#else"},
{"lineNum":"  450","line":"    deposit_charge_rectangular_2d_omp_reduce(rho2,","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  451","line":"            doubled_domain, particle_bin, bunch);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  452","line":"#endif"},
{"lineNum":"  453","line":"}"},
{"lineNum":"  454","line":""},
{"lineNum":"  455","line":"void"},
{"lineNum":"  456","line":"Space_charge_2d_open_hockney::get_global_charge_density("},
{"lineNum":"  457","line":"        Bunch const & bunch )"},
{"lineNum":"  458","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  459","line":"    // do nothing if the solver only has a single rank"},
{"lineNum":"  460","line":"    if (bunch.get_comm().size() == 1) return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  461","line":""},
{"lineNum":"  462","line":"    scoped_simple_timer timer(\"sc2d_global_rho\");"},
{"lineNum":"  463","line":""},
{"lineNum":"  464","line":"    auto dg = doubled_domain.get_grid_shape();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  465","line":""},
{"lineNum":"  466","line":"    simple_timer_start(\"sc2d_global_rho_copy\");"},
{"lineNum":"  467","line":"    Kokkos::deep_copy(h_rho2, rho2);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  468","line":"    simple_timer_stop(\"sc2d_global_rho_copy\");"},
{"lineNum":"  469","line":""},
{"lineNum":"  470","line":"    simple_timer_start(\"sc2d_global_rho_reduce\");"},
{"lineNum":"  471","line":"    int err = MPI_Allreduce( MPI_IN_PLACE,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  472","line":"                             (void*)h_rho2.data(),"},
{"lineNum":"  473","line":"                             dg[0]*dg[1]*2 + dg[2],","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  474","line":"                             MPI_DOUBLE,"},
{"lineNum":"  475","line":"                             MPI_SUM,"},
{"lineNum":"  476","line":"                             bunch.get_comm() );"},
{"lineNum":"  477","line":"    simple_timer_stop(\"sc2d_global_rho_reduce\");"},
{"lineNum":"  478","line":""},
{"lineNum":"  479","line":"    if (err != MPI_SUCCESS)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  480","line":"    {"},
{"lineNum":"  481","line":"        throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  482","line":"                \"MPI error in Space_charge_2d_open_hockney\""},
{"lineNum":"  483","line":"                \"(MPI_Allreduce in get_global_charge_density)\" );"},
{"lineNum":"  484","line":"    }"},
{"lineNum":"  485","line":""},
{"lineNum":"  486","line":"    simple_timer_start(\"sc2d_global_rho_copy\");"},
{"lineNum":"  487","line":"    Kokkos::deep_copy(rho2, h_rho2);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  488","line":"    simple_timer_stop(\"sc2d_global_rho_copy\");"},
{"lineNum":"  489","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  490","line":""},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"void"},
{"lineNum":"  493","line":"Space_charge_2d_open_hockney::get_green_fn2_pointlike()"},
{"lineNum":"  494","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  495","line":"    scoped_simple_timer timer(\"sc2d_green_fn2\");"},
{"lineNum":"  496","line":""},
{"lineNum":"  497","line":"    auto  g = domain.get_grid_shape();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  498","line":"    auto  h = doubled_domain.get_cell_size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  499","line":"    auto dg = doubled_domain.get_grid_shape();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  500","line":""},
{"lineNum":"  501","line":"    alg_g2_pointlike alg(g2, g, dg, h);"},
{"lineNum":"  502","line":""},
{"lineNum":"  503","line":"    Kokkos::parallel_for(dg[0]*dg[1], alg);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  504","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  505","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  506","line":""},
{"lineNum":"  507","line":"void"},
{"lineNum":"  508","line":"Space_charge_2d_open_hockney::get_local_force2(Distributed_fft2d& fft)"},
{"lineNum":"  509","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  510","line":"    scoped_simple_timer timer(\"sc2d_local_f\");"},
{"lineNum":"  511","line":""},
{"lineNum":"  512","line":"    auto dg = doubled_domain.get_grid_shape();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  513","line":""},
{"lineNum":"  514","line":"    // FFT"},
{"lineNum":"  515","line":"    fft.transform(rho2, rho2);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  516","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  517","line":""},
{"lineNum":"  518","line":"    fft.transform(  g2,   g2);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  519","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  520","line":""},
{"lineNum":"  521","line":"    // zero phi2 when using multiple ranks"},
{"lineNum":"  522","line":"    if (fft.get_comm().size() > 1)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  523","line":"    {"},
{"lineNum":"  524","line":"        alg_zeroer az{phi2};"},
{"lineNum":"  525","line":"        Kokkos::parallel_for(dg[0]*dg[1]*2, az);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  526","line":"    }"},
{"lineNum":"  527","line":""},
{"lineNum":"  528","line":"    int lower = fft.get_lower();"},
{"lineNum":"  529","line":"    int upper = fft.get_upper();"},
{"lineNum":"  530","line":"    int nx = upper - lower;"},
{"lineNum":"  531","line":"    int offset = lower * dg[1];"},
{"lineNum":"  532","line":""},
{"lineNum":"  533","line":"    alg_cplx_multiplier alg(phi2, rho2, g2, offset);"},
{"lineNum":"  534","line":"    Kokkos::parallel_for(nx*dg[1], alg);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  535","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  536","line":""},
{"lineNum":"  537","line":"    // inv fft"},
{"lineNum":"  538","line":"    fft.inv_transform(phi2, phi2);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  539","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  540","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  541","line":""},
{"lineNum":"  542","line":"void"},
{"lineNum":"  543","line":"Space_charge_2d_open_hockney::get_global_force2(Commxx const& comm)"},
{"lineNum":"  544","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  545","line":"    // do nothing if the solver only has a single rank"},
{"lineNum":"  546","line":"    if (comm.size() == 1) return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  547","line":""},
{"lineNum":"  548","line":"    scoped_simple_timer timer(\"sc2d_global_f\");"},
{"lineNum":"  549","line":""},
{"lineNum":"  550","line":"    auto dg = doubled_domain.get_grid_shape();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  551","line":""},
{"lineNum":"  552","line":"    Kokkos::deep_copy(h_phi2, phi2);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  553","line":""},
{"lineNum":"  554","line":"    int err = MPI_Allreduce( MPI_IN_PLACE,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  555","line":"                             (void*)h_phi2.data(),"},
{"lineNum":"  556","line":"                             dg[0]*dg[1]*2,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  557","line":"                             MPI_DOUBLE,"},
{"lineNum":"  558","line":"                             MPI_SUM,"},
{"lineNum":"  559","line":"                             comm );"},
{"lineNum":"  560","line":""},
{"lineNum":"  561","line":"    if (err != MPI_SUCCESS)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  562","line":"    {"},
{"lineNum":"  563","line":"        throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  564","line":"                \"MPI error in Space_charge_2d_open_hockney\""},
{"lineNum":"  565","line":"                \"(MPI_Allreduce in get_global_electric_force2_allreduce)\" );"},
{"lineNum":"  566","line":"    }"},
{"lineNum":"  567","line":""},
{"lineNum":"  568","line":"    Kokkos::deep_copy(phi2, h_phi2);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  569","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  570","line":""},
{"lineNum":"  571","line":"double"},
{"lineNum":"  572","line":"Space_charge_2d_open_hockney::get_normalization_force("},
{"lineNum":"  573","line":"        Bunch const & bunch, Distributed_fft2d const& fft)"},
{"lineNum":"  574","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  575","line":"    auto h = domain.get_cell_size();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  576","line":""},
{"lineNum":"  577","line":"    double hx = h[0];"},
{"lineNum":"  578","line":"    double hy = h[1];"},
{"lineNum":"  579","line":"    double hz = h[2];"},
{"lineNum":"  580","line":""},
{"lineNum":"  581","line":"    // volume element in integral"},
{"lineNum":"  582","line":"    double normalization = hx * hy;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  583","line":""},
{"lineNum":"  584","line":"    // dummy factor from weight0 of deposit.cc"},
{"lineNum":"  585","line":"    normalization *= 1.0 / (4.0 * pi * pconstants::epsilon0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  586","line":"    normalization *= hz;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  587","line":""},
{"lineNum":"  588","line":"    // average line density for real particles"},
{"lineNum":"  589","line":"    normalization *= 1.0 / doubled_domain.get_physical_size()[2];","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  590","line":""},
{"lineNum":"  591","line":"    // average line density for macro particles"},
{"lineNum":"  592","line":"    normalization *= 2.0 * doubled_domain.get_physical_size()[2]","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  593","line":"        / (hz * bunch.get_total_num());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  594","line":""},
{"lineNum":"  595","line":"    normalization *= bunch.get_particle_charge() * pconstants::e;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  596","line":""},
{"lineNum":"  597","line":"    normalization *= 1.0; //charge_density2.get_normalization();"},
{"lineNum":"  598","line":"    normalization *= 1.0; //green_fn2.get_normalization();"},
{"lineNum":"  599","line":""},
{"lineNum":"  600","line":"    normalization *= fft.get_roundtrip_normalization();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  601","line":""},
{"lineNum":"  602","line":"    return normalization;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  603","line":"}"},
{"lineNum":"  604","line":""},
{"lineNum":"  605","line":"void"},
{"lineNum":"  606","line":"Space_charge_2d_open_hockney::apply_kick("},
{"lineNum":"  607","line":"        Bunch & bunch,"},
{"lineNum":"  608","line":"        double fn_norm,"},
{"lineNum":"  609","line":"        double time_step )"},
{"lineNum":"  610","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  611","line":"    scoped_simple_timer timer(\"sc2d_kick\");"},
{"lineNum":"  612","line":""},
{"lineNum":"  613","line":"    // EGS ported AM changes for kicks in lab frame from 3D solver"},
{"lineNum":"  614","line":"    // AM: kicks are done in the z_lab frame"},
{"lineNum":"  615","line":"    // $\\delta \\vec{p} = \\vec{F} \\delta t = q \\vec{E} \\delta t$"},
{"lineNum":"  616","line":"    // delta_t_beam: [s] in beam frame"},
{"lineNum":"  617","line":"    //  See chapter 11, jackson electrodynamics, for field transformation"},
{"lineNum":"  618","line":"    //  from bunch frame (BF) to the lab frame (LF). Keep in mind that"},
{"lineNum":"  619","line":"    //  \\vec{B}_BF=0."},
{"lineNum":"  620","line":"    //  Ex_LF=gamma*Ex_BF, Ey_LF=gamma*Ey_BF, Ez_LF=Ez_BF"},
{"lineNum":"  621","line":"    //  Bx_LF=gamma*beta*Ey_BF, By_LF=-gamma*beta*Ex_BF, Bz_LF=Bz_BF=0"},
{"lineNum":"  622","line":"    //  Transverse Lorentz force in the lab frame:"},
{"lineNum":"  623","line":"    //        Fx_LF = q*(Ex_L-beta_z*By_LF)"},
{"lineNum":"  624","line":"    //              = q*gamma*(1-beta*beta_z)*Ex_BF"},
{"lineNum":"  625","line":"    //  Longitudinal Lorentz force in the lab frame:"},
{"lineNum":"  626","line":"    //        Fz = q*(Ez_LF+beta_x*By_LF-beta_y*Bx_LF)"},
{"lineNum":"  627","line":"    //           = q*(Ez_BF-gamma*beta*(beta_x*Ex_BF+beta_y*Ey_BF ))"},
{"lineNum":"  628","line":"    // In order to get a conservative approximation!:"},
{"lineNum":"  629","line":"    // The following approximations are done: beta_z=beta, beta_x=beta_y=0,"},
{"lineNum":"  630","line":"    // thus suppresing the particles\' movement relative to the reference"},
{"lineNum":"  631","line":"    // particle. The same approximation was employed when the field in"},
{"lineNum":"  632","line":"    // the bunch frame was calculated."},
{"lineNum":"  633","line":"    // Thus: Fx_LF=q*Ex_BF/gamma, Fz=q*Ez_BF"},
{"lineNum":"  634","line":""},
{"lineNum":"  635","line":"    double delta_t_beam = time_step / bunch.get_reference_particle().get_gamma();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  636","line":""},
{"lineNum":"  637","line":"    // unit_conversion: [N] = [kg m/s^2] to [Gev/c]"},
{"lineNum":"  638","line":"    double unit_conversion = pconstants::c / (1.0e9 * pconstants::e);"},
{"lineNum":"  639","line":""},
{"lineNum":"  640","line":"    // scaled p = p/p_ref"},
{"lineNum":"  641","line":"    double gamma = bunch.get_reference_particle().get_gamma();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  642","line":"    double beta = bunch.get_reference_particle().get_beta();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  643","line":"    double p_scale = 1.0 / bunch.get_reference_particle().get_momentum();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  644","line":""},
{"lineNum":"  645","line":"    // gamma*beta factor introduced here when we are no longer going to"},
{"lineNum":"  646","line":"    // the t_bunch frame. That factor was introduced in the fixed_z_lab"},
{"lineNum":"  647","line":"    // to fixed_t_bunch conversion.  Physically, gamma factor comes from"},
{"lineNum":"  648","line":"    // the lorentz expansion longitudinally in the bunch frame and beta"},
{"lineNum":"  649","line":"    // comes because the stored coordinate is c*dt whereas the actual"},
{"lineNum":"  650","line":"    // domain is beta*c*dt."},
{"lineNum":"  651","line":"    double factor = unit_conversion * delta_t_beam * fn_norm * p_scale"},
{"lineNum":"  652","line":"                    / (gamma * beta);"},
{"lineNum":"  653","line":""},
{"lineNum":"  654","line":"    auto parts = bunch.get_local_particles();"},
{"lineNum":"  655","line":"    auto masks = bunch.get_local_particle_masks();"},
{"lineNum":"  656","line":""},
{"lineNum":"  657","line":"    alg_kicker kicker(parts, masks, phi2, rho2, particle_bin,"},
{"lineNum":"  658","line":"            doubled_domain.get_grid_shape(), factor);"},
{"lineNum":"  659","line":""},
{"lineNum":"  660","line":"    Kokkos::parallel_for(bunch.size(), kicker);"},
{"lineNum":"  661","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  662","line":"}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  663","line":""},
{"lineNum":"  664","line":""},
{"lineNum":"  665","line":""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 151, "covered" : 0,};
var merged_data = [];
