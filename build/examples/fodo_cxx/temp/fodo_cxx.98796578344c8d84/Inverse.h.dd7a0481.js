var data = {lines:[
{"lineNum":"    1","line":"// This file is part of Eigen, a lightweight C++ template library"},
{"lineNum":"    2","line":"// for linear algebra."},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Copyright (C) 2014-2019 Gael Guennebaud <gael.guennebaud@inria.fr>"},
{"lineNum":"    5","line":"//"},
{"lineNum":"    6","line":"// This Source Code Form is subject to the terms of the Mozilla"},
{"lineNum":"    7","line":"// Public License v. 2.0. If a copy of the MPL was not distributed"},
{"lineNum":"    8","line":"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/."},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef EIGEN_INVERSE_H"},
{"lineNum":"   11","line":"#define EIGEN_INVERSE_H"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"#include \"./InternalHeaderCheck.h\""},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"namespace Eigen {"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"template<typename XprType,typename StorageKind> class InverseImpl;"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"namespace internal {"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"template<typename XprType>"},
{"lineNum":"   22","line":"struct traits<Inverse<XprType> >"},
{"lineNum":"   23","line":"  : traits<typename XprType::PlainObject>"},
{"lineNum":"   24","line":"{"},
{"lineNum":"   25","line":"  typedef typename XprType::PlainObject PlainObject;"},
{"lineNum":"   26","line":"  typedef traits<PlainObject> BaseTraits;"},
{"lineNum":"   27","line":"  enum {"},
{"lineNum":"   28","line":"    Flags = BaseTraits::Flags & RowMajorBit"},
{"lineNum":"   29","line":"  };"},
{"lineNum":"   30","line":"};"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"} // end namespace internal"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"/** \\class Inverse"},
{"lineNum":"   35","line":"  *"},
{"lineNum":"   36","line":"  * \\brief Expression of the inverse of another expression"},
{"lineNum":"   37","line":"  *"},
{"lineNum":"   38","line":"  * \\tparam XprType the type of the expression we are taking the inverse"},
{"lineNum":"   39","line":"  *"},
{"lineNum":"   40","line":"  * This class represents an abstract expression of A.inverse()"},
{"lineNum":"   41","line":"  * and most of the time this is the only way it is used."},
{"lineNum":"   42","line":"  *"},
{"lineNum":"   43","line":"  */"},
{"lineNum":"   44","line":"template<typename XprType>"},
{"lineNum":"   45","line":"class Inverse : public InverseImpl<XprType,typename internal::traits<XprType>::StorageKind>","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   46","line":"{"},
{"lineNum":"   47","line":"public:"},
{"lineNum":"   48","line":"  typedef typename XprType::StorageIndex StorageIndex;"},
{"lineNum":"   49","line":"  typedef typename XprType::Scalar                            Scalar;"},
{"lineNum":"   50","line":"  typedef typename internal::ref_selector<XprType>::type      XprTypeNested;"},
{"lineNum":"   51","line":"  typedef typename internal::remove_all<XprTypeNested>::type  XprTypeNestedCleaned;"},
{"lineNum":"   52","line":"  typedef typename internal::ref_selector<Inverse>::type Nested;"},
{"lineNum":"   53","line":"  typedef typename internal::remove_all<XprType>::type NestedExpression;"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"  explicit EIGEN_DEVICE_FUNC Inverse(const XprType &xpr)"},
{"lineNum":"   56","line":"    : m_xpr(xpr)"},
{"lineNum":"   57","line":"  {}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR  Index rows() const EIGEN_NOEXCEPT { return m_xpr.cols(); }","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"   60","line":"  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR  Index cols() const EIGEN_NOEXCEPT { return m_xpr.rows(); }","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"  EIGEN_DEVICE_FUNC const XprTypeNestedCleaned& nestedExpression() const { return m_xpr; }","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"protected:"},
{"lineNum":"   65","line":"  XprTypeNested m_xpr;"},
{"lineNum":"   66","line":"};"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"// Generic API dispatcher"},
{"lineNum":"   69","line":"template<typename XprType, typename StorageKind>"},
{"lineNum":"   70","line":"class InverseImpl"},
{"lineNum":"   71","line":"  : public internal::generic_xpr_base<Inverse<XprType> >::type"},
{"lineNum":"   72","line":"{"},
{"lineNum":"   73","line":"public:"},
{"lineNum":"   74","line":"  typedef typename internal::generic_xpr_base<Inverse<XprType> >::type Base;"},
{"lineNum":"   75","line":"  typedef typename XprType::Scalar Scalar;"},
{"lineNum":"   76","line":"private:"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"  Scalar coeff(Index row, Index col) const;"},
{"lineNum":"   79","line":"  Scalar coeff(Index i) const;"},
{"lineNum":"   80","line":"};"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"namespace internal {"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"/** \\internal"},
{"lineNum":"   85","line":"  * \\brief Default evaluator for Inverse expression."},
{"lineNum":"   86","line":"  *"},
{"lineNum":"   87","line":"  * This default evaluator for Inverse expression simply evaluate the inverse into a temporary"},
{"lineNum":"   88","line":"  * by a call to internal::call_assignment_no_alias."},
{"lineNum":"   89","line":"  * Therefore, inverse implementers only have to specialize Assignment<Dst,Inverse<...>, ...> for"},
{"lineNum":"   90","line":"  * there own nested expression."},
{"lineNum":"   91","line":"  *"},
{"lineNum":"   92","line":"  * \\sa class Inverse"},
{"lineNum":"   93","line":"  */"},
{"lineNum":"   94","line":"template<typename ArgType>"},
{"lineNum":"   95","line":"struct unary_evaluator<Inverse<ArgType> >"},
{"lineNum":"   96","line":"  : public evaluator<typename Inverse<ArgType>::PlainObject>"},
{"lineNum":"   97","line":"{"},
{"lineNum":"   98","line":"  typedef Inverse<ArgType> InverseType;"},
{"lineNum":"   99","line":"  typedef typename InverseType::PlainObject PlainObject;"},
{"lineNum":"  100","line":"  typedef evaluator<PlainObject> Base;"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"  enum { Flags = Base::Flags | EvalBeforeNestingBit };"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"  unary_evaluator(const InverseType& inv_xpr)"},
{"lineNum":"  105","line":"    : m_result(inv_xpr.rows(), inv_xpr.cols())","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  106","line":"  {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  107","line":"    ::new (static_cast<Base*>(this)) Base(m_result);"},
{"lineNum":"  108","line":"    internal::call_assignment_no_alias(m_result, inv_xpr);"},
{"lineNum":"  109","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"protected:"},
{"lineNum":"  112","line":"  PlainObject m_result;"},
{"lineNum":"  113","line":"};"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"} // end namespace internal"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"} // end namespace Eigen"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"#endif // EIGEN_INVERSE_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 8, "covered" : 0,};
var merged_data = [];
