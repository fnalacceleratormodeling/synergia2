var data = {lines:[
{"lineNum":"    1","line":""},
{"lineNum":"    2","line":"#include \"space_charge_3d_open_hockney.h\""},
{"lineNum":"    3","line":"#include \"synergia/bunch/core_diagnostics.h\""},
{"lineNum":"    4","line":"#include \"synergia/foundation/math_constants.h\""},
{"lineNum":"    5","line":"#include \"synergia/foundation/physical_constants.h\""},
{"lineNum":"    6","line":"#include \"deposit.h\""},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"#include \"synergia/utils/simple_timer.h\""},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"using mconstants::pi;"},
{"lineNum":"   11","line":"using pconstants::epsilon0;"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"namespace"},
{"lineNum":"   14","line":"{"},
{"lineNum":"   15","line":"    void"},
{"lineNum":"   16","line":"    print_grid( Logger & logger,"},
{"lineNum":"   17","line":"                karray1d_dev const & grid,"},
{"lineNum":"   18","line":"                int x0, int x1,"},
{"lineNum":"   19","line":"                int y0, int y1,"},
{"lineNum":"   20","line":"                int z0, int z1,"},
{"lineNum":"   21","line":"                int gx, int gy, int gz,"},
{"lineNum":"   22","line":"                int off = 0 )"},
{"lineNum":"   23","line":"    {"},
{"lineNum":"   24","line":"        karray1d hgrid = Kokkos::create_mirror_view(grid);"},
{"lineNum":"   25","line":"        Kokkos::deep_copy(hgrid, grid);"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"        double sum = 0;"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"        int dim = grid.extent(0);"},
{"lineNum":"   30","line":"        for(int i=0; i<dim; ++i)"},
{"lineNum":"   31","line":"        {"},
{"lineNum":"   32","line":"            sum += fabs(hgrid(i));"},
{"lineNum":"   33","line":"        }"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"#if 0"},
{"lineNum":"   36","line":"        for(int x=0; x<gx; ++x)"},
{"lineNum":"   37","line":"            for(int y=0; y<gy; ++y)"},
{"lineNum":"   38","line":"                sum += hgrid((x*gy + y)*2 + off);"},
{"lineNum":"   39","line":"#endif"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"        logger << std::setprecision(12) << std::scientific;"},
{"lineNum":"   42","line":"        logger << \"      \" << grid.label() << \".sum = \" << sum << \"\\n\";"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"        for (int z=z0; z<z1; ++z)"},
{"lineNum":"   45","line":"        {"},
{"lineNum":"   46","line":"            logger << \"        \" << z << \", \";"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"            for (int y=y0; y<y1; ++y)"},
{"lineNum":"   49","line":"            {"},
{"lineNum":"   50","line":"                logger << y << \", \" << x0 << \" | \";"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"                for (int x=x0; x<x1; ++x)"},
{"lineNum":"   53","line":"                {"},
{"lineNum":"   54","line":"                    logger << std::setprecision(12)"},
{"lineNum":"   55","line":"                        << hgrid(z*gx*gy + y*gx + x) << \", \";"},
{"lineNum":"   56","line":"                }"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"                logger << \"\\n\";"},
{"lineNum":"   59","line":"            }"},
{"lineNum":"   60","line":"        }"},
{"lineNum":"   61","line":"    }"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"    void print_statistics(Bunch & bunch, Logger & logger)"},
{"lineNum":"   64","line":"    {"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"        logger"},
{"lineNum":"   67","line":"            << \"Bunch statistics: \""},
{"lineNum":"   68","line":"            << \"num_valid = \" << bunch.get_local_num()"},
{"lineNum":"   69","line":"            << \", size = \" << bunch.size()"},
{"lineNum":"   70","line":"            << \", capacity = \" << bunch.capacity()"},
{"lineNum":"   71","line":"            << \", total_num = \" << bunch.get_total_num()"},
{"lineNum":"   72","line":"            <<\"\\nMean and std: \";"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"        // print particles after propagate"},
{"lineNum":"   76","line":"        auto mean = Core_diagnostics::calculate_mean(bunch);"},
{"lineNum":"   77","line":"        auto std  = Core_diagnostics::calculate_std(bunch, mean);"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"        logger"},
{"lineNum":"   80","line":"            << std::setprecision(16)"},
{"lineNum":"   81","line":"            << std::showpos << std::scientific"},
{"lineNum":"   82","line":"            << \"\\n\""},
{"lineNum":"   83","line":"            //<< \"\\nmean\\tstd\\n\""},
{"lineNum":"   84","line":"            ;"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"        for (int i=0; i<6; ++i)"},
{"lineNum":"   87","line":"            logger << mean[i] << \", \" << std[i] << \"\\n\";"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"        logger << \"\\n\";"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"        for (int p=0; p<4; ++p) bunch.print_particle(p, logger);"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"        logger << \"\\n\";"},
{"lineNum":"   94","line":"    }"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"    double"},
{"lineNum":"   97","line":"    get_smallest_non_tiny( double val,"},
{"lineNum":"   98","line":"                           double other1,"},
{"lineNum":"   99","line":"                           double other2,"},
{"lineNum":"  100","line":"                           double tiny )"},
{"lineNum":"  101","line":"    {"},
{"lineNum":"  102","line":"        double retval;"},
{"lineNum":"  103","line":"        if (val > tiny)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  104","line":"        {"},
{"lineNum":"  105","line":"            retval = val;"},
{"lineNum":"  106","line":"        }"},
{"lineNum":"  107","line":"        else"},
{"lineNum":"  108","line":"        {"},
{"lineNum":"  109","line":"            if ((other1 > tiny) && (other2 > tiny))","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  110","line":"            {"},
{"lineNum":"  111","line":"                retval = std::min(other1, other2);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  112","line":"            }"},
{"lineNum":"  113","line":"            else"},
{"lineNum":"  114","line":"            {"},
{"lineNum":"  115","line":"                retval = std::max(other1, other2);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  116","line":"            }"},
{"lineNum":"  117","line":"        }"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"        return retval;"},
{"lineNum":"  120","line":"    }"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  123","line":"    int fast_int_floor_kokkos(const double x)"},
{"lineNum":"  124","line":"    {"},
{"lineNum":"  125","line":"        int ix = static_cast<int>(x);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  126","line":"        return x > 0.0 ? ix : ((x - ix == 0) ? ix : ix - 1);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  127","line":"    }"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  130","line":"    void get_leftmost_indices_offset("},
{"lineNum":"  131","line":"            double pos, double left, double inv_cell_size,"},
{"lineNum":"  132","line":"            int & idx, double & off )"},
{"lineNum":"  133","line":"    {"},
{"lineNum":"  134","line":"        double scaled_location = (pos - left) * inv_cell_size - 0.5;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  135","line":"        idx = fast_int_floor_kokkos(scaled_location);"},
{"lineNum":"  136","line":"        off = scaled_location - idx;"},
{"lineNum":"  137","line":"    }"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"    struct alg_zeroer","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  140","line":"    {"},
{"lineNum":"  141","line":"        karray1d_dev arr;"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  144","line":"        void operator() (const int i) const"},
{"lineNum":"  145","line":"        { arr(i) = 0.0; }","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"  146","line":"    };"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"    // G000 is naively infinite. In the correct approach, it should be"},
{"lineNum":"  150","line":"    // the value which gives the proper integral when convolved with the"},
{"lineNum":"  151","line":"    // charge density. Even assuming a constant charge density, the proper"},
{"lineNum":"  152","line":"    // value for G000 cannot be computed in closed form. Fortunately,"},
{"lineNum":"  153","line":"    // the solver results are insensitive to the exact value of G000."},
{"lineNum":"  154","line":"    // I make the following argument: G000 should be greater than any of"},
{"lineNum":"  155","line":"    // the neighboring values of G. The form"},
{"lineNum":"  156","line":"    //    G000 = coeff/min(hx,hy,hz),"},
{"lineNum":"  157","line":"    // with"},
{"lineNum":"  158","line":"    //    coeff > 1"},
{"lineNum":"  159","line":"    // satisfies the criterion. An empirical study (see the 3d_open_hockney.py"},
{"lineNum":"  160","line":"    // script in docs/devel/solvers) gives coeff = 2.8."},
{"lineNum":"  161","line":"    //"},
{"lineNum":"  162","line":"    // const double coeff = 2.8;"},
{"lineNum":"  163","line":"    // double G000 = coeff / std::min(hx, std::min(hy, hz));"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"    // In the following loops we use mirroring for ix and iy, and iz."},
{"lineNum":"  166","line":"    // Note that the doubling algorithm is not quite symmetric. For"},
{"lineNum":"  167","line":"    // example, the doubled grid for 4 points in 1d looks like"},
{"lineNum":"  168","line":"    //    0 1 2 3 4 3 2 1"},
{"lineNum":"  169","line":"    //"},
{"lineNum":"  170","line":"    // gx is not the original grid shape in x, instead it is"},
{"lineNum":"  171","line":"    //    gx = shape[0] + 1"},
{"lineNum":"  172","line":"    // because of the asymmetric in the mirroring"},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"    struct alg_g2_pointlike","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  175","line":"    {"},
{"lineNum":"  176","line":"        const double epsilon = 0.01;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"        karray1d_dev g2;"},
{"lineNum":"  179","line":"        int gx, gy;"},
{"lineNum":"  180","line":"        int dgx, dgy, dgz;"},
{"lineNum":"  181","line":"        int padded_dgx;"},
{"lineNum":"  182","line":"        double hx, hy, hz;"},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"        double igxgy;"},
{"lineNum":"  185","line":"        double igx;"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"        double G000;"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"        alg_g2_pointlike("},
{"lineNum":"  190","line":"                karray1d_dev const & g2,"},
{"lineNum":"  191","line":"                std::array<int, 3> const & g,"},
{"lineNum":"  192","line":"                std::array<int, 3> const & dg,"},
{"lineNum":"  193","line":"                std::array<double, 3> const & h )"},
{"lineNum":"  194","line":"            : g2(g2)"},
{"lineNum":"  195","line":"            , gx(g[0]+1), gy(g[1]+1)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  196","line":"            , dgx(dg[0]), dgy(dg[1]), dgz(dg[2])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  197","line":"            , padded_dgx(Distributed_fft3d::get_padded_shape_real(dgx))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  198","line":"            , hx(h[0]), hy(h[1]), hz(h[2])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  199","line":"            , igxgy(1.0/(gx*gy))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  200","line":"            , igx(1.0/gx)"},
{"lineNum":"  201","line":"            , G000(2.8/std::min(hx, std::min(hy, hz)))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  202","line":"        { }"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  205","line":"        void operator() (const int i) const"},
{"lineNum":"  206","line":"        {"},
{"lineNum":"  207","line":"            int iz = i * igxgy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  208","line":"            int iy = (i - iz*gx*gy) * igx;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  209","line":"            int ix = i - iz*gx*gy - iy*gx;"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"            double dx, dy, dz;"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"            dx = ix * hx;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  214","line":"            dy = iy * hy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  215","line":"            dz = iz * hz;"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"            double G;"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"            if (ix==0 && iy==0 && iz==0) G = G000;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  220","line":"            else G = 1.0 / sqrt(dx*dx + dy*dy + dz*dz);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"#if 0"},
{"lineNum":"  223","line":"            if (periodic_z)"},
{"lineNum":"  224","line":"            {"},
{"lineNum":"  225","line":"                for (int image = -num_images; image <= num_images; ++image)"},
{"lineNum":"  226","line":"                {"},
{"lineNum":"  227","line":"                    if (image != 0)"},
{"lineNum":"  228","line":"                    {"},
{"lineNum":"  229","line":"                        double dz_img = dz + image * z_period;"},
{"lineNum":"  230","line":"                        const double tiny = 1.0e-9;"},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"                        if (ix==0 && iy==0 && (std::abs(dz_img) < tiny)) G+=G000;"},
{"lineNum":"  233","line":"                        else G += 1.0/sqrt(dx*dx + dy*dy + dz_img*dz_img);"},
{"lineNum":"  234","line":"                    }"},
{"lineNum":"  235","line":"                }"},
{"lineNum":"  236","line":"            }"},
{"lineNum":"  237","line":"#endif"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"            int mix, miy, miz;"},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"            mix = dgx - ix;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  242","line":"            if (mix == dgx) mix = 0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"            miy = dgy - iy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  245","line":"            if (miy == dgy) miy = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  246","line":""},
{"lineNum":"  247","line":"            miz = dgz - iz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  248","line":"            if (miz == dgz) miz = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"            g2(iz*padded_dgx*dgy +  iy*padded_dgx +  ix) = G;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  251","line":"            g2(iz*padded_dgx*dgy + miy*padded_dgx +  ix) = G;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  252","line":"            g2(iz*padded_dgx*dgy +  iy*padded_dgx + mix) = G;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  253","line":"            g2(iz*padded_dgx*dgy + miy*padded_dgx + mix) = G;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"            g2(miz*padded_dgx*dgy +  iy*padded_dgx +  ix) = G;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  256","line":"            g2(miz*padded_dgx*dgy + miy*padded_dgx +  ix) = G;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  257","line":"            g2(miz*padded_dgx*dgy +  iy*padded_dgx + mix) = G;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  258","line":"            g2(miz*padded_dgx*dgy + miy*padded_dgx + mix) = G;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  259","line":"        }"},
{"lineNum":"  260","line":"    };"},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"    struct alg_g2_linear","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  263","line":"    {"},
{"lineNum":"  264","line":"        const double epsilon = 0.01;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  265","line":""},
{"lineNum":"  266","line":"        karray1d_dev g2;"},
{"lineNum":"  267","line":"        int gx, gy;"},
{"lineNum":"  268","line":"        int gx0, gy0, gz0;"},
{"lineNum":"  269","line":"        int dgx, dgy, dgz;"},
{"lineNum":"  270","line":"        int padded_dgx;"},
{"lineNum":"  271","line":"        double hx, hy, hz;"},
{"lineNum":"  272","line":""},
{"lineNum":"  273","line":"        double igxgy;"},
{"lineNum":"  274","line":"        double igx;"},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"        double G000;"},
{"lineNum":"  277","line":""},
{"lineNum":"  278","line":"        alg_g2_linear("},
{"lineNum":"  279","line":"                karray1d_dev const & g2,"},
{"lineNum":"  280","line":"                std::array<int, 3> const & g,"},
{"lineNum":"  281","line":"                std::array<int, 3> const & dg,"},
{"lineNum":"  282","line":"                std::array<double, 3> const & h )"},
{"lineNum":"  283","line":"            : g2(g2)"},
{"lineNum":"  284","line":"            , gx(g[0]+1), gy(g[1]+1)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  285","line":"            , gx0(g[0]), gy0(g[1]), gz0(g[2])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  286","line":"            , dgx(dg[0]), dgy(dg[1]), dgz(dg[2])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  287","line":"            , padded_dgx(Distributed_fft3d::get_padded_shape_real(dgx))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  288","line":"            , hx(h[0]), hy(h[1]), hz(h[2])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  289","line":"            , igxgy(1.0/(gx*gy))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  290","line":"            , igx(1.0/gx)"},
{"lineNum":"  291","line":"            , G000(0.0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  292","line":"        {"},
{"lineNum":"  293","line":"            double rr = hx * hx + hy * hy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  294","line":"            double r1 = sqrt(hx * hx + hy * hy + hz * hz);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  295","line":"            G000 = (2.0 / rr) * (hz * r1 + rr * log((hz + r1)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  296","line":"                        / sqrt(rr)) - hz * hz); // average value of outer cylinder.","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  297","line":"        }"},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  300","line":"        void operator() (const int i) const"},
{"lineNum":"  301","line":"        {"},
{"lineNum":"  302","line":"            int iz = i * igxgy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  303","line":"            int iy = (i - iz*gx*gy) * igx;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  304","line":"            int ix = i - iz*gx*gy - iy*gx;"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"            double z = (iz>gz0) ? (dgz-iz)*hz : iz*hz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  307","line":"            double y = iy * hy;"},
{"lineNum":"  308","line":"            double x = ix * hx;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  309","line":""},
{"lineNum":"  310","line":"            double rr = x * x + y * y;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  311","line":"            double s_rr_0 = sqrt(rr + z*z);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  312","line":"            double s_rr_n = sqrt(rr + (z-hz)*(z-hz));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  313","line":"            double s_rr_p = sqrt(rr + (z+hz)*(z+hz));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"            double G = 2.0 * s_rr_0 - s_rr_n - s_rr_p;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  316","line":""},
{"lineNum":"  317","line":"            double T1, T2, r1, r2;"},
{"lineNum":"  318","line":"            const double epsz = 1e-12 * hz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  319","line":""},
{"lineNum":"  320","line":"            if (z < -hz)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  321","line":"            {"},
{"lineNum":"  322","line":"                r1 = (s_rr_n - z + hz) / (s_rr_0 - z);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  323","line":"                T1 = (hz - z) * log(r1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  324","line":"                r2 = (s_rr_0 - z) / (s_rr_p - z - hz);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  325","line":"                T2 = (hz + z) * log(r2);"},
{"lineNum":"  326","line":"                G += T1 + T2;"},
{"lineNum":"  327","line":"            }"},
{"lineNum":"  328","line":"            else if (std::abs(z + hz) < epsz)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  329","line":"            {"},
{"lineNum":"  330","line":"                r1 = (s_rr_n - z + hz) / (s_rr_0 - z);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  331","line":"                T1 = (hz - z) * log(r1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  332","line":"                G += T1;"},
{"lineNum":"  333","line":"            }"},
{"lineNum":"  334","line":"            else if (std::abs(z) < epsz)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  335","line":"            {"},
{"lineNum":"  336","line":"                if (std::abs(x) + std::abs(y) < 2. * epsz)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  337","line":"                {"},
{"lineNum":"  338","line":"                    G += hz * G000;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  339","line":"                } /* T1+T2 in fact */"},
{"lineNum":"  340","line":"                else"},
{"lineNum":"  341","line":"                {"},
{"lineNum":"  342","line":"                    r1 = (sqrt(hz * hz + rr) + hz) / sqrt(rr);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  343","line":"                    G += 2.0 * hz * log(r1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  344","line":"                }"},
{"lineNum":"  345","line":"            }"},
{"lineNum":"  346","line":"            else if (std::abs(z - hz) < epsz)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  347","line":"            {"},
{"lineNum":"  348","line":"                r1 = (s_rr_p + z + hz) / (s_rr_0 + z);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  349","line":"                T1 = (hz + z) * log(r1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  350","line":"                G += T1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  351","line":"            }"},
{"lineNum":"  352","line":"            else if (z > hz)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  353","line":"            {"},
{"lineNum":"  354","line":"                r1 = (s_rr_0 + z) / (s_rr_n + z - hz);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  355","line":"                T1 = (hz - z) * log(r1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  356","line":"                r2 = (s_rr_p + z + hz) / (s_rr_0 + z);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  357","line":"                T2 = (hz + z) * log(r2);"},
{"lineNum":"  358","line":"                G += T1 + T2;"},
{"lineNum":"  359","line":"            }"},
{"lineNum":"  360","line":"            else"},
{"lineNum":"  361","line":"            {"},
{"lineNum":"  362","line":"                //throw std::runtime_error("},
{"lineNum":"  363","line":"                //        \"Space_charge_3d_open_hockney::get_green_fn2 error1\");"},
{"lineNum":"  364","line":"            }"},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":""},
{"lineNum":"  367","line":"            int miy = dgy - iy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  368","line":"            int mix = dgx - ix;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  369","line":""},
{"lineNum":"  370","line":"            g2(iz*padded_dgx*dgy + iy*padded_dgx + ix) = G;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  371","line":""},
{"lineNum":"  372","line":"            if (iy != gy0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  373","line":"            {"},
{"lineNum":"  374","line":"                g2(iz*padded_dgx*dgy + miy*padded_dgx + ix) = G;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"                if (ix != gx0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  377","line":"                {"},
{"lineNum":"  378","line":"                    g2(iz*padded_dgx*dgy + miy*padded_dgx + mix) = G;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  379","line":"                }"},
{"lineNum":"  380","line":"            }"},
{"lineNum":"  381","line":""},
{"lineNum":"  382","line":"            if (ix != gx0)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  383","line":"            {"},
{"lineNum":"  384","line":"                g2(iz*padded_dgx*dgy + iy*padded_dgx + mix) = G;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  385","line":"            }"},
{"lineNum":"  386","line":"        }"},
{"lineNum":"  387","line":"    };"},
{"lineNum":"  388","line":""},
{"lineNum":"  389","line":"    struct alg_cplx_multiplier","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  390","line":"    {"},
{"lineNum":"  391","line":"        karray1d_dev prod;"},
{"lineNum":"  392","line":"        karray1d_dev m1, m2;"},
{"lineNum":"  393","line":"        int off;"},
{"lineNum":"  394","line":""},
{"lineNum":"  395","line":"        alg_cplx_multiplier("},
{"lineNum":"  396","line":"                karray1d_dev const & prod,"},
{"lineNum":"  397","line":"                karray1d_dev const & m1,"},
{"lineNum":"  398","line":"                karray1d_dev const & m2,"},
{"lineNum":"  399","line":"                int offset )"},
{"lineNum":"  400","line":"            : prod(prod), m1(m1), m2(m2), off(offset)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  401","line":"        { }"},
{"lineNum":"  402","line":""},
{"lineNum":"  403","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  404","line":"        void operator() (const int i) const"},
{"lineNum":"  405","line":"        {"},
{"lineNum":"  406","line":"            const int real = (off+i)*2;"},
{"lineNum":"  407","line":"            const int imag = (off+i)*2 + 1;"},
{"lineNum":"  408","line":""},
{"lineNum":"  409","line":"            prod[real] = m1[real]*m2[real] - m1[imag]*m2[imag];","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  410","line":"            prod[imag] = m1[real]*m2[imag] + m1[imag]*m2[real];","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  411","line":"        }"},
{"lineNum":"  412","line":"    };"},
{"lineNum":"  413","line":""},
{"lineNum":"  414","line":"    struct alg_force_extractor","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  415","line":"    {"},
{"lineNum":"  416","line":"        karray1d_dev phi2;"},
{"lineNum":"  417","line":"        karray1d_dev enx;"},
{"lineNum":"  418","line":"        karray1d_dev eny;"},
{"lineNum":"  419","line":"        karray1d_dev enz;"},
{"lineNum":"  420","line":""},
{"lineNum":"  421","line":"        int gx, gy, gz;"},
{"lineNum":"  422","line":"        int dgx, dgy;"},
{"lineNum":"  423","line":"        double ihx, ihy, ihz;"},
{"lineNum":"  424","line":"        double igxgy;"},
{"lineNum":"  425","line":"        double igx;"},
{"lineNum":"  426","line":""},
{"lineNum":"  427","line":"        alg_force_extractor("},
{"lineNum":"  428","line":"                karray1d_dev const& phi2,"},
{"lineNum":"  429","line":"                karray1d_dev const& enx,"},
{"lineNum":"  430","line":"                karray1d_dev const& eny,"},
{"lineNum":"  431","line":"                karray1d_dev const& enz,"},
{"lineNum":"  432","line":"                std::array<int, 3> const& g,"},
{"lineNum":"  433","line":"                std::array<int, 3> const& dg,"},
{"lineNum":"  434","line":"                std::array<double, 3> const& h )"},
{"lineNum":"  435","line":"            : phi2(phi2), enx(enx), eny(eny), enz(enz)"},
{"lineNum":"  436","line":"            , gx(g[0]), gy(g[1]), gz(g[2])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  437","line":"            , dgx(Distributed_fft3d::get_padded_shape_real(dg[0]))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  438","line":"            , dgy(dg[1])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  439","line":"            , ihx(0.5/h[0]), ihy(0.5/h[1]), ihz(0.5/h[2])","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  440","line":"            , igxgy(1.0/(gx*gy))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  441","line":"            , igx(1.0/gx)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  442","line":"        { }"},
{"lineNum":"  443","line":""},
{"lineNum":"  444","line":""},
{"lineNum":"  445","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  446","line":"        void operator() (const int i) const"},
{"lineNum":"  447","line":"        {"},
{"lineNum":"  448","line":"            int iz = i * igxgy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  449","line":"            int iy = (i - iz*gx*gy) * igx;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  450","line":"            int ix = i - iz*gx*gy - iy*gx;"},
{"lineNum":"  451","line":""},
{"lineNum":"  452","line":"            int ixl, ixr, iyl, iyr, izl, izr;"},
{"lineNum":"  453","line":""},
{"lineNum":"  454","line":"            double idx, idy, idz;"},
{"lineNum":"  455","line":""},
{"lineNum":"  456","line":"            // all boundaries will be skipped (set to 0)"},
{"lineNum":"  457","line":"            if ( ix==0 || ix==gx-1 ||","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  458","line":"                 iy==0 || iy==gy-1 ||","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  459","line":"                 iz==0 || iz==gz-1    )"},
{"lineNum":"  460","line":"                return;"},
{"lineNum":"  461","line":""},
{"lineNum":"  462","line":"            ixl = ix - 1; ixr = ix + 1;"},
{"lineNum":"  463","line":"            iyl = iy - 1; iyr = iy + 1;"},
{"lineNum":"  464","line":"            izl = iz - 1; izr = iz + 1;"},
{"lineNum":"  465","line":""},
{"lineNum":"  466","line":"            idx = ihx; idy = ihy; idz = ihz;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  467","line":""},
{"lineNum":"  468","line":"#if 0"},
{"lineNum":"  469","line":"            // or, calculate the full domain"},
{"lineNum":"  470","line":"            if (ix==0) { ixl = 0; ixr = 1; idx = ihx*2; }"},
{"lineNum":"  471","line":"            else if (ix==gx-1) { ixl = gx-2; ixr = gx-1; idx = ihx; }"},
{"lineNum":"  472","line":"            else { ixl = ix-1; ixr = ix+1; idx = ihx; }"},
{"lineNum":"  473","line":""},
{"lineNum":"  474","line":"            if (iy==0) { iyl = 0; iyr = 1; idy = ihy*2; }"},
{"lineNum":"  475","line":"            else if (iy==gy-1) { iyl = gy-2; iyr = gy-1; idy = ihy; }"},
{"lineNum":"  476","line":"            else { iyl = iy-1; iyr = iy+1; idy = ihy; }"},
{"lineNum":"  477","line":""},
{"lineNum":"  478","line":"            if (iz==0) { izl = 0; izr = 1; idz = ihz*2; }"},
{"lineNum":"  479","line":"            else if (iz==gz-1) { izl = gz-2; izr = gz-1; idz = ihz; }"},
{"lineNum":"  480","line":"            else { izl = iz-1; izr = iz+1; idz = ihz; }"},
{"lineNum":"  481","line":"#endif"},
{"lineNum":"  482","line":""},
{"lineNum":"  483","line":"            int idx_r = iz*dgx*dgy + iy*dgx + ixr;"},
{"lineNum":"  484","line":"            int idx_l = iz*dgx*dgy + iy*dgx + ixl;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  485","line":"            enx(i) = -(phi2(idx_r) - phi2(idx_l)) * idx;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  486","line":""},
{"lineNum":"  487","line":"            idx_r = iz*dgx*dgy + iyr*dgx + ix;"},
{"lineNum":"  488","line":"            idx_l = iz*dgx*dgy + iyl*dgx + ix;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  489","line":"            eny(i) = -(phi2(idx_r) - phi2(idx_l)) * idy;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  490","line":""},
{"lineNum":"  491","line":"            idx_r = izr*dgx*dgy + iy*dgx + ix;"},
{"lineNum":"  492","line":"            idx_l = izl*dgx*dgy + iy*dgx + ix;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  493","line":"            enz(i) = -(phi2(idx_r) - phi2(idx_l)) * idz;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  494","line":"        }"},
{"lineNum":"  495","line":"    };"},
{"lineNum":"  496","line":""},
{"lineNum":"  497","line":"    struct alg_kicker","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  498","line":"    {"},
{"lineNum":"  499","line":"        Particles parts;"},
{"lineNum":"  500","line":"        ConstParticleMasks masks;"},
{"lineNum":"  501","line":""},
{"lineNum":"  502","line":"        karray1d_dev enx;"},
{"lineNum":"  503","line":"        karray1d_dev eny;"},
{"lineNum":"  504","line":"        karray1d_dev enz;"},
{"lineNum":"  505","line":""},
{"lineNum":"  506","line":"        int gx, gy, gz;"},
{"lineNum":"  507","line":"        double ihx, ihy, ihz;"},
{"lineNum":"  508","line":"        double lx, ly, lz;"},
{"lineNum":"  509","line":"        double factor, pref, m;"},
{"lineNum":"  510","line":""},
{"lineNum":"  511","line":"        alg_kicker("},
{"lineNum":"  512","line":"                Particles parts,"},
{"lineNum":"  513","line":"                ConstParticleMasks masks,"},
{"lineNum":"  514","line":"                karray1d_dev const& enx,"},
{"lineNum":"  515","line":"                karray1d_dev const& eny,"},
{"lineNum":"  516","line":"                karray1d_dev const& enz,"},
{"lineNum":"  517","line":"                std::array<int,    3> const& g,"},
{"lineNum":"  518","line":"                std::array<double, 3> const& h,"},
{"lineNum":"  519","line":"                std::array<double, 3> const& l,"},
{"lineNum":"  520","line":"                double factor,"},
{"lineNum":"  521","line":"                double pref,"},
{"lineNum":"  522","line":"                double m )"},
{"lineNum":"  523","line":"            : parts(parts), masks(masks)"},
{"lineNum":"  524","line":"            , enx(enx), eny(eny), enz(enz)"},
{"lineNum":"  525","line":"            , gx(g[0]), gy(g[1]), gz(g[2])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  526","line":"            , ihx(1.0/h[0]), ihy(1.0/h[1]), ihz(1.0/h[2])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  527","line":"            , lx(l[0]), ly(l[1]), lz(l[2])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  528","line":"            , factor(factor), pref(pref), m(m)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  529","line":"        { }"},
{"lineNum":"  530","line":""},
{"lineNum":"  531","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  532","line":"        void operator() (const int i) const"},
{"lineNum":"  533","line":"        {"},
{"lineNum":"  534","line":"            if (masks(i))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  535","line":"            {"},
{"lineNum":"  536","line":"                int ix, iy, iz;"},
{"lineNum":"  537","line":"                double ox, oy, oz;"},
{"lineNum":"  538","line":""},
{"lineNum":"  539","line":"                get_leftmost_indices_offset(parts(i, 0), lx, ihx, ix, ox);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  540","line":"                get_leftmost_indices_offset(parts(i, 2), ly, ihy, iy, oy);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  541","line":"                get_leftmost_indices_offset(parts(i, 4), lz, ihz, iz, oz);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  542","line":""},
{"lineNum":"  543","line":"                double aox = 1.0 - ox;"},
{"lineNum":"  544","line":"                double aoy = 1.0 - oy;"},
{"lineNum":"  545","line":"                double aoz = 1.0 - oz;"},
{"lineNum":"  546","line":""},
{"lineNum":"  547","line":"                if ( (ix>=0 && ix<gx-1) &&","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  548","line":"                     (iy>=0 && iy<gy-1) &&","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  549","line":"                     ((iz>=0 && iz<gz-1) /* || periodic_z */) )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  550","line":"                {"},
{"lineNum":"  551","line":"                    double val = 0;"},
{"lineNum":"  552","line":"                    int base = 0;"},
{"lineNum":"  553","line":""},
{"lineNum":"  554","line":"                    // enz"},
{"lineNum":"  555","line":"                    base = iz*gx*gy + iy*gx + ix;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  556","line":"                    val  = aoz * aoy * aox * enz(base);      // z, y, x","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  557","line":"                    val += aoz * aoy *  ox * enz(base+1);    // z, y, x+1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  558","line":"                    val += aoz *  oy * aox * enz(base+gx);   // z, y+1, x","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  559","line":"                    val += aoz *  oy *  ox * enz(base+gx+1); // z, y+1, x+1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  560","line":""},
{"lineNum":"  561","line":"                    base = (iz+1)*gx*gy + iy*gx + ix;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  562","line":"                    val += oz * aoy * aox * enz(base);       // z+1, y, x","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  563","line":"                    val += oz * aoy *  ox * enz(base+1);     // z+1, y, x+1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  564","line":"                    val += oz *  oy * aox * enz(base+gx);    // z+1, y+1, x","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  565","line":"                    val += oz *  oy *  ox * enz(base+gx+1);  // z+1, y+1, x+1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  566","line":""},
{"lineNum":"  567","line":"                    double p = pref + parts(i, 5) * pref;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  568","line":"                    double Eoc_i = std::sqrt(p*p+m*m);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  569","line":"                    double Eoc_f = Eoc_i + factor * (-pref) * val;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  570","line":"                    double dpop = (std::sqrt(Eoc_f*Eoc_f-m*m) - std::sqrt(Eoc_i*Eoc_i-m*m))/pref;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  571","line":""},
{"lineNum":"  572","line":"                    parts(i, 5) += dpop;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  573","line":""},
{"lineNum":"  574","line":"                    // eny"},
{"lineNum":"  575","line":"                    base = iz*gx*gy + iy*gx + ix;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  576","line":"                    val  = aoz * aoy * aox * eny(base);      // z, y, x","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  577","line":"                    val += aoz * aoy *  ox * eny(base+1);    // z, y, x+1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  578","line":"                    val += aoz *  oy * aox * eny(base+gx);   // z, y+1, x","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  579","line":"                    val += aoz *  oy *  ox * eny(base+gx+1); // z, y+1, x+1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  580","line":""},
{"lineNum":"  581","line":"                    base = (iz+1)*gx*gy + iy*gx + ix;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  582","line":"                    val += oz * aoy * aox * eny(base);       // z+1, y, x","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  583","line":"                    val += oz * aoy *  ox * eny(base+1);     // z+1, y, x+1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  584","line":"                    val += oz *  oy * aox * eny(base+gx);    // z+1, y+1, x","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  585","line":"                    val += oz *  oy *  ox * eny(base+gx+1);  // z+1, y+1, x+1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  586","line":""},
{"lineNum":"  587","line":"                    parts(i, 3) += factor * val;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  588","line":""},
{"lineNum":"  589","line":"                    // enx"},
{"lineNum":"  590","line":"                    base = iz*gx*gy + iy*gx + ix;"},
{"lineNum":"  591","line":"                    val  = aoz * aoy * aox * enx(base);      // z, y, x","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  592","line":"                    val += aoz * aoy *  ox * enx(base+1);    // z, y, x+1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  593","line":"                    val += aoz *  oy * aox * enx(base+gx);   // z, y+1, x","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  594","line":"                    val += aoz *  oy *  ox * enx(base+gx+1); // z, y+1, x+1","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  595","line":""},
{"lineNum":"  596","line":"                    base = (iz+1)*gx*gy + iy*gx + ix;"},
{"lineNum":"  597","line":"                    val += oz * aoy * aox * enx(base);       // z+1, y, x","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  598","line":"                    val += oz * aoy *  ox * enx(base+1);     // z+1, y, x+1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  599","line":"                    val += oz *  oy * aox * enx(base+gx);    // z+1, y+1, x","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  600","line":"                    val += oz *  oy *  ox * enx(base+gx+1);  // z+1, y+1, x+1","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  601","line":""},
{"lineNum":"  602","line":"                    parts(i, 1) += factor * val;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  603","line":"                }"},
{"lineNum":"  604","line":"            }"},
{"lineNum":"  605","line":"        }"},
{"lineNum":"  606","line":"    };"},
{"lineNum":"  607","line":"}"},
{"lineNum":"  608","line":""},
{"lineNum":"  609","line":""},
{"lineNum":"  610","line":"Space_charge_3d_open_hockney::Space_charge_3d_open_hockney("},
{"lineNum":"  611","line":"        Space_charge_3d_open_hockney_options const & ops)"},
{"lineNum":"  612","line":"    : Collective_operator(\"sc_3d_open_hockney\", 1.0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  613","line":"    , options(ops)"},
{"lineNum":"  614","line":"    , bunch_sim_id()"},
{"lineNum":"  615","line":"    , domain(ops.shape, {1.0, 1.0, 1.0})"},
{"lineNum":"  616","line":"    , doubled_domain(ops.doubled_shape, {1.0, 1.0, 1.0})"},
{"lineNum":"  617","line":"    , ffts()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  618","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  619","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  620","line":""},
{"lineNum":"  621","line":""},
{"lineNum":"  622","line":""},
{"lineNum":"  623","line":"void"},
{"lineNum":"  624","line":"Space_charge_3d_open_hockney::apply_impl("},
{"lineNum":"  625","line":"            Bunch_simulator& sim,"},
{"lineNum":"  626","line":"            double time_step,"},
{"lineNum":"  627","line":"            Logger& logger)"},
{"lineNum":"  628","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  629","line":"    logger << \"    Space charge 3d open hockney\\n\";"},
{"lineNum":"  630","line":""},
{"lineNum":"  631","line":"    scoped_simple_timer timer(\"sc3d_total\");"},
{"lineNum":"  632","line":""},
{"lineNum":"  633","line":"    // construct the workspace for a new bunch simulator"},
{"lineNum":"  634","line":"    if (bunch_sim_id != sim.id())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  635","line":"    {"},
{"lineNum":"  636","line":"        construct_workspaces(sim);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  637","line":"        bunch_sim_id = sim.id();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  638","line":"    }"},
{"lineNum":"  639","line":""},
{"lineNum":"  640","line":"    // apply to bunches"},
{"lineNum":"  641","line":"    for(size_t t=0; t<2; ++t)"},
{"lineNum":"  642","line":"    {"},
{"lineNum":"  643","line":"        for(size_t b=0; b<sim[t].get_bunch_array_size(); ++b)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  644","line":"        {"},
{"lineNum":"  645","line":"            apply_bunch(sim[t][b], ffts[t][b], time_step, logger);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  646","line":"        }"},
{"lineNum":"  647","line":"    }"},
{"lineNum":"  648","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  649","line":""},
{"lineNum":"  650","line":"void"},
{"lineNum":"  651","line":"Space_charge_3d_open_hockney::apply_bunch("},
{"lineNum":"  652","line":"            Bunch& bunch,"},
{"lineNum":"  653","line":"            Distributed_fft3d& fft,"},
{"lineNum":"  654","line":"            double time_step,"},
{"lineNum":"  655","line":"            Logger& logger)"},
{"lineNum":"  656","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  657","line":"    update_domain(bunch);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  658","line":""},
{"lineNum":"  659","line":"    get_local_charge_density(bunch); // [C/m^3]"},
{"lineNum":"  660","line":"    get_global_charge_density(bunch);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  661","line":""},
{"lineNum":"  662","line":"    if (options.green_fn == green_fn_t::pointlike)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  663","line":"    {"},
{"lineNum":"  664","line":"        get_green_fn2_pointlike();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  665","line":"    }"},
{"lineNum":"  666","line":"    else"},
{"lineNum":"  667","line":"    {"},
{"lineNum":"  668","line":"        get_green_fn2_linear();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  669","line":"    }"},
{"lineNum":"  670","line":""},
{"lineNum":"  671","line":"    get_local_phi2(fft);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  672","line":"    get_global_phi2(fft);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  673","line":""},
{"lineNum":"  674","line":"    auto fn_norm = get_normalization_force(fft);"},
{"lineNum":"  675","line":""},
{"lineNum":"  676","line":"    get_force();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  677","line":"    apply_kick(bunch, fn_norm, time_step);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  678","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  679","line":""},
{"lineNum":"  680","line":"void"},
{"lineNum":"  681","line":"Space_charge_3d_open_hockney::construct_workspaces("},
{"lineNum":"  682","line":"        Bunch_simulator const& sim)"},
{"lineNum":"  683","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  684","line":"    scoped_simple_timer timer(\"sc3d_workspaces\");"},
{"lineNum":"  685","line":""},
{"lineNum":"  686","line":"    // doubled shape"},
{"lineNum":"  687","line":"    auto const& s = options.doubled_shape;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  688","line":""},
{"lineNum":"  689","line":"    // fft objects"},
{"lineNum":"  690","line":"    for(size_t t=0; t<2; ++t)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  691","line":"    {"},
{"lineNum":"  692","line":"        int num_local_bunches = sim[t].get_bunch_array_size();"},
{"lineNum":"  693","line":"        ffts[t] = std::vector<Distributed_fft3d>(num_local_bunches);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  694","line":""},
{"lineNum":"  695","line":"        for(size_t b=0; b<num_local_bunches; ++b)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  696","line":"        {"},
{"lineNum":"  697","line":"            auto comm = sim[t][b]"},
{"lineNum":"  698","line":"                .get_comm()"},
{"lineNum":"  699","line":"                .divide(options.comm_group_size);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  700","line":""},
{"lineNum":"  701","line":"            ffts[t][b].construct(s, comm);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  702","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  703","line":"    }"},
{"lineNum":"  704","line":""},
{"lineNum":"  705","line":"    // local workspaces"},
{"lineNum":"  706","line":"    int nx_real = Distributed_fft3d::get_padded_shape_real(s[0]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  707","line":"    int nx_cplx = Distributed_fft3d::get_padded_shape_cplx(s[0]);"},
{"lineNum":"  708","line":""},
{"lineNum":"  709","line":"    // doubled domain"},
{"lineNum":"  710","line":"    rho2 = karray1d_dev(\"rho2\", nx_real * s[1] * s[2]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  711","line":"      g2 = karray1d_dev(  \"g2\", nx_real * s[1] * s[2]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  712","line":"    phi2 = karray1d_dev(\"phi2\", nx_real * s[1] * s[2]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  713","line":""},
{"lineNum":"  714","line":"    h_rho2 = Kokkos::create_mirror_view(rho2);"},
{"lineNum":"  715","line":"    h_phi2 = Kokkos::create_mirror_view(phi2);"},
{"lineNum":"  716","line":""},
{"lineNum":"  717","line":"    // En is in the original domain"},
{"lineNum":"  718","line":"    enx = karray1d_dev(\"enx\", s[0] * s[1] * s[2] / 8);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  719","line":"    eny = karray1d_dev(\"eny\", s[0] * s[1] * s[2] / 8);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  720","line":"    enz = karray1d_dev(\"enz\", s[0] * s[1] * s[2] / 8);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  721","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  722","line":""},
{"lineNum":"  723","line":"void"},
{"lineNum":"  724","line":"Space_charge_3d_open_hockney::update_domain(Bunch const & bunch)"},
{"lineNum":"  725","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  726","line":"    scoped_simple_timer timer(\"sc3d_domain\");"},
{"lineNum":"  727","line":""},
{"lineNum":"  728","line":"    // do nothing for fixed domain"},
{"lineNum":"  729","line":"    if (options.domain_fixed) return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  730","line":""},
{"lineNum":"  731","line":"    auto mean = Core_diagnostics::calculate_mean(bunch);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  732","line":"    auto std  = Core_diagnostics::calculate_std(bunch, mean);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  733","line":""},
{"lineNum":"  734","line":"    const double tiny = 1.0e-10;"},
{"lineNum":"  735","line":""},
{"lineNum":"  736","line":"    const auto ix = Bunch::x;"},
{"lineNum":"  737","line":"    const auto iy = Bunch::y;"},
{"lineNum":"  738","line":"    const auto iz = Bunch::z;"},
{"lineNum":"  739","line":""},
{"lineNum":"  740","line":"    if ( (std[ix] < tiny) && (std[iy] < tiny) && (std[iz] < tiny) )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  741","line":"    {"},
{"lineNum":"  742","line":"        throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  743","line":"                \"Space_charge_3d_open_hockney_eigen::update_domain: \""},
{"lineNum":"  744","line":"                \"all three spatial dimensions have neglible extent\");"},
{"lineNum":"  745","line":"    }"},
{"lineNum":"  746","line":""},
{"lineNum":"  747","line":"    std::array<double, 3> offset {"},
{"lineNum":"  748","line":"        mean[ix],"},
{"lineNum":"  749","line":"        mean[iy],"},
{"lineNum":"  750","line":"        mean[iz] };"},
{"lineNum":"  751","line":""},
{"lineNum":"  752","line":"    std::array<double, 3> size {"},
{"lineNum":"  753","line":"        options.n_sigma * get_smallest_non_tiny(std[0], std[2], std[4], tiny),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  754","line":"        options.n_sigma * get_smallest_non_tiny(std[2], std[0], std[4], tiny),"},
{"lineNum":"  755","line":"        options.n_sigma * get_smallest_non_tiny(std[4], std[0], std[2], tiny) };"},
{"lineNum":"  756","line":""},
{"lineNum":"  757","line":"    if (options.grid_entire_period)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  758","line":"    {"},
{"lineNum":"  759","line":"        offset[2] = 0.0;"},
{"lineNum":"  760","line":"        size[2] = options.z_period;"},
{"lineNum":"  761","line":"    }"},
{"lineNum":"  762","line":""},
{"lineNum":"  763","line":"    std::array<double, 3> doubled_size {"},
{"lineNum":"  764","line":"        size[0] * 2.0,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  765","line":"        size[1] * 2.0,"},
{"lineNum":"  766","line":"        size[2] * 2.0 };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  767","line":""},
{"lineNum":"  768","line":"    domain = Rectangular_grid_domain(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  769","line":"            options.shape, size, offset, false);"},
{"lineNum":"  770","line":""},
{"lineNum":"  771","line":"    doubled_domain = Rectangular_grid_domain(","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  772","line":"            options.doubled_shape, doubled_size, offset, false);"},
{"lineNum":"  773","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  774","line":""},
{"lineNum":"  775","line":"void"},
{"lineNum":"  776","line":"Space_charge_3d_open_hockney::get_local_charge_density("},
{"lineNum":"  777","line":"        Bunch const& bunch)"},
{"lineNum":"  778","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  779","line":"    scoped_simple_timer timer(\"sc3d_local_rho\");"},
{"lineNum":"  780","line":""},
{"lineNum":"  781","line":"    auto dg = doubled_domain.get_grid_shape();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  782","line":"    dg[0] = Distributed_fft3d::get_padded_shape_real(dg[0]);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  783","line":""},
{"lineNum":"  784","line":"#ifdef Kokkos_ENABLE_CUDA"},
{"lineNum":"  785","line":"    deposit_charge_rectangular_3d_kokkos_scatter_view(rho2,"},
{"lineNum":"  786","line":"            domain, dg, bunch);"},
{"lineNum":"  787","line":"#else"},
{"lineNum":"  788","line":"    deposit_charge_rectangular_3d_omp_reduce(rho2,","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  789","line":"            domain, dg, bunch);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  790","line":"#endif"},
{"lineNum":"  791","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  792","line":""},
{"lineNum":"  793","line":"void"},
{"lineNum":"  794","line":"Space_charge_3d_open_hockney::get_global_charge_density("},
{"lineNum":"  795","line":"        Bunch const & bunch )"},
{"lineNum":"  796","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  797","line":"    // do nothing if the bunch occupis a single rank"},
{"lineNum":"  798","line":"    if (bunch.get_comm().size() == 1) return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  799","line":""},
{"lineNum":"  800","line":"    scoped_simple_timer timer(\"sc3d_global_rho\");"},
{"lineNum":"  801","line":""},
{"lineNum":"  802","line":"    auto dg = doubled_domain.get_grid_shape();"},
{"lineNum":"  803","line":""},
{"lineNum":"  804","line":"    simple_timer_start(\"sc3d_global_rho_copy\");"},
{"lineNum":"  805","line":"    Kokkos::deep_copy(h_rho2, rho2);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  806","line":"    simple_timer_stop(\"sc3d_global_rho_copy\");"},
{"lineNum":"  807","line":""},
{"lineNum":"  808","line":"    simple_timer_start(\"sc3d_global_rho_reduce\");"},
{"lineNum":"  809","line":"    int err = MPI_Allreduce( MPI_IN_PLACE,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  810","line":"                             (void*)h_rho2.data(),"},
{"lineNum":"  811","line":"                             h_rho2.extent(0),"},
{"lineNum":"  812","line":"                             MPI_DOUBLE,"},
{"lineNum":"  813","line":"                             MPI_SUM,"},
{"lineNum":"  814","line":"                             bunch.get_comm() );"},
{"lineNum":"  815","line":"    simple_timer_stop(\"sc3d_global_rho_reduce\");"},
{"lineNum":"  816","line":""},
{"lineNum":"  817","line":"    if (err != MPI_SUCCESS)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  818","line":"    {"},
{"lineNum":"  819","line":"        throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  820","line":"                \"MPI error in Space_charge_3d_open_hockney\""},
{"lineNum":"  821","line":"                \"(MPI_Allreduce in get_global_charge_density)\" );"},
{"lineNum":"  822","line":"    }"},
{"lineNum":"  823","line":""},
{"lineNum":"  824","line":"    simple_timer_start(\"sc3d_global_rho_copy\");"},
{"lineNum":"  825","line":"    Kokkos::deep_copy(rho2, h_rho2);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  826","line":"    simple_timer_stop(\"sc3d_global_rho_copy\");"},
{"lineNum":"  827","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  828","line":""},
{"lineNum":"  829","line":"void"},
{"lineNum":"  830","line":"Space_charge_3d_open_hockney::get_green_fn2_pointlike()"},
{"lineNum":"  831","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  832","line":"    if (options.periodic_z)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  833","line":"    {"},
{"lineNum":"  834","line":"        throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  835","line":"                \"Space_charge_3d_open_hockney::get_green_fn2_linear: \""},
{"lineNum":"  836","line":"                \"periodic_z not yet implemented\");"},
{"lineNum":"  837","line":"    }"},
{"lineNum":"  838","line":""},
{"lineNum":"  839","line":"    scoped_simple_timer timer(\"sc3d_green_fn2_point\");"},
{"lineNum":"  840","line":""},
{"lineNum":"  841","line":"    auto  g = domain.get_grid_shape();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  842","line":"    auto  h = doubled_domain.get_cell_size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  843","line":"    auto dg = doubled_domain.get_grid_shape();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  844","line":""},
{"lineNum":"  845","line":"    alg_zeroer az{g2};"},
{"lineNum":"  846","line":"    Kokkos::parallel_for(g2.extent(0), az);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  847","line":""},
{"lineNum":"  848","line":"    // calculation is performed on grid (gx+1, gy+1, gz+1)"},
{"lineNum":"  849","line":"    // rest of the doubled domain will be filled with mirrors"},
{"lineNum":"  850","line":"    alg_g2_pointlike alg(g2, g, dg, h);"},
{"lineNum":"  851","line":"    Kokkos::parallel_for((g[0]+1)*(g[1]+1)*(g[2]+1), alg);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  852","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  853","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  854","line":""},
{"lineNum":"  855","line":"void"},
{"lineNum":"  856","line":"Space_charge_3d_open_hockney::get_green_fn2_linear()"},
{"lineNum":"  857","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  858","line":"    if (options.periodic_z)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  859","line":"    {"},
{"lineNum":"  860","line":"        throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  861","line":"                \"Space_charge_3d_open_hockney::get_green_fn2_linear: \""},
{"lineNum":"  862","line":"                \"periodic_z not yet implemented\");"},
{"lineNum":"  863","line":"    }"},
{"lineNum":"  864","line":""},
{"lineNum":"  865","line":"    scoped_simple_timer timer(\"sc3d_green_fn2_linear\");"},
{"lineNum":"  866","line":""},
{"lineNum":"  867","line":"    auto  g = domain.get_grid_shape();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  868","line":"    auto  h = doubled_domain.get_cell_size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  869","line":"    auto dg = doubled_domain.get_grid_shape();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  870","line":""},
{"lineNum":"  871","line":"    alg_zeroer az{g2};"},
{"lineNum":"  872","line":"    Kokkos::parallel_for(g2.extent(0), az);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  873","line":""},
{"lineNum":"  874","line":"    // calculation is performed on grid (gx+1, gy+1, gz+1)"},
{"lineNum":"  875","line":"    // rest of the doubled domain will be filled with mirrors"},
{"lineNum":"  876","line":"    alg_g2_linear alg(g2, g, dg, h);"},
{"lineNum":"  877","line":"    Kokkos::parallel_for((g[0]+1)*(g[1]+1)*dg[2], alg);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  878","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  879","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  880","line":""},
{"lineNum":"  881","line":"void"},
{"lineNum":"  882","line":"Space_charge_3d_open_hockney::get_local_phi2(Distributed_fft3d& fft)"},
{"lineNum":"  883","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  884","line":"    scoped_simple_timer timer(\"sc3d_local_f\");"},
{"lineNum":"  885","line":""},
{"lineNum":"  886","line":"    auto dg = doubled_domain.get_grid_shape();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  887","line":""},
{"lineNum":"  888","line":"    // FFT"},
{"lineNum":"  889","line":"    fft.transform(rho2, rho2);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  890","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  891","line":""},
{"lineNum":"  892","line":"    fft.transform(  g2,   g2);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  893","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  894","line":""},
{"lineNum":"  895","line":"    // zero phi2 when using multiple ranks"},
{"lineNum":"  896","line":"    if (fft.get_comm().size() > 1)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  897","line":"    {"},
{"lineNum":"  898","line":"        int padded_gx_real = fft.padded_nx_real();"},
{"lineNum":"  899","line":"        alg_zeroer az{phi2};"},
{"lineNum":"  900","line":"        Kokkos::parallel_for(padded_gx_real*dg[0]*dg[1], az);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  901","line":"    }"},
{"lineNum":"  902","line":""},
{"lineNum":"  903","line":"    int lower = fft.get_lower();"},
{"lineNum":"  904","line":"    int upper = fft.get_upper();"},
{"lineNum":"  905","line":""},
{"lineNum":"  906","line":"    int padded_gx_cplx = fft.padded_nx_cplx();"},
{"lineNum":"  907","line":"    int offset = lower*padded_gx_cplx*dg[1];"},
{"lineNum":"  908","line":"    int nz = upper - lower;"},
{"lineNum":"  909","line":""},
{"lineNum":"  910","line":"    alg_cplx_multiplier alg(phi2, rho2, g2, offset);"},
{"lineNum":"  911","line":"    Kokkos::parallel_for(nz*dg[1]*padded_gx_cplx, alg);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  912","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  913","line":""},
{"lineNum":"  914","line":"    // inv fft"},
{"lineNum":"  915","line":"    fft.inv_transform(phi2, phi2);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  916","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  917","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  918","line":""},
{"lineNum":"  919","line":"void"},
{"lineNum":"  920","line":"Space_charge_3d_open_hockney::get_global_phi2(Distributed_fft3d const& fft)"},
{"lineNum":"  921","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  922","line":"    // do nothing if the solver only has a single rank"},
{"lineNum":"  923","line":"    if (fft.get_comm().size() == 1) return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  924","line":""},
{"lineNum":"  925","line":"    scoped_simple_timer timer(\"sc3d_global_f\");"},
{"lineNum":"  926","line":""},
{"lineNum":"  927","line":"    Kokkos::deep_copy(h_phi2, phi2);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  928","line":""},
{"lineNum":"  929","line":"    auto dg = doubled_domain.get_grid_shape();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  930","line":"    auto nx_real = fft.padded_nx_real();"},
{"lineNum":"  931","line":""},
{"lineNum":"  932","line":"    int err = MPI_Allreduce( MPI_IN_PLACE,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  933","line":"                             (void*)h_phi2.data(),"},
{"lineNum":"  934","line":"                             nx_real*dg[1]*dg[2],","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  935","line":"                             MPI_DOUBLE,"},
{"lineNum":"  936","line":"                             MPI_SUM,"},
{"lineNum":"  937","line":"                             fft.get_comm() );"},
{"lineNum":"  938","line":""},
{"lineNum":"  939","line":"    if (err != MPI_SUCCESS)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  940","line":"    {"},
{"lineNum":"  941","line":"        throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  942","line":"                \"MPI error in Space_charge_3d_open_hockney\""},
{"lineNum":"  943","line":"                \"(MPI_Allreduce in get_global_electric_force2_allreduce)\" );"},
{"lineNum":"  944","line":"    }"},
{"lineNum":"  945","line":""},
{"lineNum":"  946","line":"    Kokkos::deep_copy(phi2, h_phi2);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  947","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  948","line":""},
{"lineNum":"  949","line":"double"},
{"lineNum":"  950","line":"Space_charge_3d_open_hockney::get_normalization_force(Distributed_fft3d const& fft)"},
{"lineNum":"  951","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  952","line":"    auto h = domain.get_cell_size();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  953","line":""},
{"lineNum":"  954","line":"    double hx = h[0];"},
{"lineNum":"  955","line":"    double hy = h[1];"},
{"lineNum":"  956","line":"    double hz = h[2];"},
{"lineNum":"  957","line":""},
{"lineNum":"  958","line":"    // volume element in integral"},
{"lineNum":"  959","line":"    double normalization = hx * hy * hz;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  960","line":""},
{"lineNum":"  961","line":"    // dummy factor from weight0 of deposit.cc"},
{"lineNum":"  962","line":"    normalization *= 1.0 / (4.0 * pi * pconstants::epsilon0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  963","line":""},
{"lineNum":"  964","line":"    // from charege density"},
{"lineNum":"  965","line":"    normalization *= 1.0;"},
{"lineNum":"  966","line":""},
{"lineNum":"  967","line":"    // 1.0 from point-like greens function."},
{"lineNum":"  968","line":"    // 1.0/(hz*hz) for linear greens function"},
{"lineNum":"  969","line":"    if (options.green_fn == green_fn_t::linear)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  970","line":"        normalization *= 1.0 / (hz*hz);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  971","line":""},
{"lineNum":"  972","line":"    // from fft"},
{"lineNum":"  973","line":"    normalization *= fft.get_roundtrip_normalization();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  974","line":""},
{"lineNum":"  975","line":"    return normalization;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  976","line":"}"},
{"lineNum":"  977","line":""},
{"lineNum":"  978","line":"void"},
{"lineNum":"  979","line":"Space_charge_3d_open_hockney::get_force()"},
{"lineNum":"  980","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  981","line":"    auto  g = domain.get_grid_shape();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  982","line":"    auto  h = doubled_domain.get_cell_size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  983","line":"    auto dg = doubled_domain.get_grid_shape();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  984","line":""},
{"lineNum":"  985","line":"    // phi2 is in (padded_real_dgx, dgy, dgz)"},
{"lineNum":"  986","line":"    // en{x|y|z} is in (gx, gy, gz)"},
{"lineNum":"  987","line":"    alg_force_extractor alg(phi2, enx, eny, enz, g, dg, h);"},
{"lineNum":"  988","line":"    Kokkos::parallel_for(g[0]*g[1]*g[2], alg);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  989","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  990","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  991","line":""},
{"lineNum":"  992","line":""},
{"lineNum":"  993","line":"void"},
{"lineNum":"  994","line":"Space_charge_3d_open_hockney::apply_kick("},
{"lineNum":"  995","line":"        Bunch & bunch,"},
{"lineNum":"  996","line":"        double fn_norm,"},
{"lineNum":"  997","line":"        double time_step )"},
{"lineNum":"  998","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  999","line":"    scoped_simple_timer timer(\"sc3d_kick\");"},
{"lineNum":" 1000","line":""},
{"lineNum":" 1001","line":"    auto ref = bunch.get_reference_particle();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1002","line":""},
{"lineNum":" 1003","line":"    double q = bunch.get_particle_charge() * pconstants::e;"},
{"lineNum":" 1004","line":"    double m = bunch.get_mass();"},
{"lineNum":" 1005","line":""},
{"lineNum":" 1006","line":"    double gamma = ref.get_gamma();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1007","line":"    double beta  = ref.get_beta();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1008","line":"    double pref  = ref.get_momentum();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1009","line":""},
{"lineNum":" 1010","line":"    double unit_conversion = pconstants::c / (1e9 * pconstants::e);"},
{"lineNum":" 1011","line":"    double factor = options.kick_scale * unit_conversion * q * time_step * fn_norm","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1012","line":"        / (pref * gamma * gamma * beta);"},
{"lineNum":" 1013","line":""},
{"lineNum":" 1014","line":"    auto parts = bunch.get_local_particles();"},
{"lineNum":" 1015","line":"    auto masks = bunch.get_local_particle_masks();"},
{"lineNum":" 1016","line":""},
{"lineNum":" 1017","line":"    auto g = domain.get_grid_shape();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1018","line":"    auto h = domain.get_cell_size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1019","line":"    auto l = domain.get_left();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1020","line":""},
{"lineNum":" 1021","line":"    alg_kicker kicker(parts, masks, enx, eny, enz,"},
{"lineNum":" 1022","line":"            g, h, l, factor, pref, m);"},
{"lineNum":" 1023","line":""},
{"lineNum":" 1024","line":"    Kokkos::parallel_for(bunch.size(), kicker);"},
{"lineNum":" 1025","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1026","line":"}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1027","line":""},
{"lineNum":" 1028","line":""},
{"lineNum":" 1029","line":""},
{"lineNum":" 1030","line":""},
{"lineNum":" 1031","line":""},
{"lineNum":" 1032","line":""},
{"lineNum":" 1033","line":""},
{"lineNum":" 1034","line":""},
{"lineNum":" 1035","line":"#if 0"},
{"lineNum":" 1036","line":"void"},
{"lineNum":" 1037","line":"Space_charge_3d_open_hockney::setup_communication("},
{"lineNum":" 1038","line":"        Commxx_sptr const& bunch_comm_sptr)"},
{"lineNum":" 1039","line":"{"},
{"lineNum":" 1040","line":"    if (comm2_sptr != commxx_divider_sptr->get_commxx_sptr(bunch_comm_sptr)) {"},
{"lineNum":" 1041","line":"        comm2_sptr = commxx_divider_sptr->get_commxx_sptr(bunch_comm_sptr);"},
{"lineNum":" 1042","line":"        setup_derived_communication();"},
{"lineNum":" 1043","line":"    }"},
{"lineNum":" 1044","line":"}"},
{"lineNum":" 1045","line":""},
{"lineNum":" 1046","line":"void"},
{"lineNum":" 1047","line":"Space_charge_3d_open_hockney::setup_derived_communication()"},
{"lineNum":" 1048","line":"{"},
{"lineNum":" 1049","line":"    distributed_fft3d_sptr = Distributed_fft3d_sptr("},
{"lineNum":" 1050","line":"            new Distributed_fft3d(doubled_grid_shape, comm2_sptr));"},
{"lineNum":" 1051","line":"    padded_grid_shape = distributed_fft3d_sptr->get_padded_shape_real();"},
{"lineNum":" 1052","line":"    std::vector<int > ranks1; // ranks with data from the undoubled domain"},
{"lineNum":" 1053","line":"    int lower = 0;"},
{"lineNum":" 1054","line":"    for (int rank = 0; rank < comm2_sptr->get_size(); ++rank) {"},
{"lineNum":" 1055","line":"        int uppers2 = distributed_fft3d_sptr->get_uppers()[rank];"},
{"lineNum":" 1056","line":"        int uppers1 = std::min(uppers2, grid_shape[0]);"},
{"lineNum":" 1057","line":"        int length0;"},
{"lineNum":" 1058","line":"        if (rank > 0) {"},
{"lineNum":" 1059","line":"            length0 = uppers1 - distributed_fft3d_sptr->get_uppers()[rank - 1];"},
{"lineNum":" 1060","line":"        } else {"},
{"lineNum":" 1061","line":"            length0 = uppers1;"},
{"lineNum":" 1062","line":"        }"},
{"lineNum":" 1063","line":"        if (length0 > 0) {"},
{"lineNum":" 1064","line":"            ranks1.push_back(rank);"},
{"lineNum":" 1065","line":"            lowers1.push_back(lower);"},
{"lineNum":" 1066","line":"            int total_length = length0 * grid_shape[1] * grid_shape[2];"},
{"lineNum":" 1067","line":"            lengths1.push_back(total_length);"},
{"lineNum":" 1068","line":"            lower += total_length;"},
{"lineNum":" 1069","line":"        }"},
{"lineNum":" 1070","line":"    }"},
{"lineNum":" 1071","line":"    comm1_sptr = Commxx_sptr(new Commxx(comm2_sptr, ranks1));"},
{"lineNum":" 1072","line":"    std::vector<int > real_uppers(distributed_fft3d_sptr->get_uppers());"},
{"lineNum":" 1073","line":"    real_lengths = distributed_fft3d_sptr->get_lengths();"},
{"lineNum":" 1074","line":"    for (int i = 0; i < comm2_sptr->get_size(); ++i) {"},
{"lineNum":" 1075","line":"        if (real_uppers[i] > grid_shape[0]) {"},
{"lineNum":" 1076","line":"            real_uppers[i] = grid_shape[0];"},
{"lineNum":" 1077","line":"        }"},
{"lineNum":" 1078","line":"        if (i == 0) {"},
{"lineNum":" 1079","line":"            real_lengths[0] = real_uppers[0] * grid_shape[1] * grid_shape[2];"},
{"lineNum":" 1080","line":"        } else {"},
{"lineNum":" 1081","line":"            real_lengths[i] = (real_uppers[i] - real_uppers[i - 1])"},
{"lineNum":" 1082","line":"                    * grid_shape[1] * grid_shape[2];"},
{"lineNum":" 1083","line":"        }"},
{"lineNum":" 1084","line":"    }"},
{"lineNum":" 1085","line":"    int my_rank = comm2_sptr->get_rank();"},
{"lineNum":" 1086","line":"    if (my_rank > 0) {"},
{"lineNum":" 1087","line":"        real_lower = real_uppers[my_rank - 1];"},
{"lineNum":" 1088","line":"    } else {"},
{"lineNum":" 1089","line":"        real_lower = 0;"},
{"lineNum":" 1090","line":"    }"},
{"lineNum":" 1091","line":"    real_upper = real_uppers[my_rank];"},
{"lineNum":" 1092","line":"    real_length = real_lengths[my_rank];"},
{"lineNum":" 1093","line":"    if (my_rank > 0) {"},
{"lineNum":" 1094","line":"        doubled_lower = distributed_fft3d_sptr->get_uppers()[my_rank - 1];"},
{"lineNum":" 1095","line":"    } else {"},
{"lineNum":" 1096","line":"        doubled_lower = 0;"},
{"lineNum":" 1097","line":"    }"},
{"lineNum":" 1098","line":"    doubled_upper = distributed_fft3d_sptr->get_uppers()[my_rank];"},
{"lineNum":" 1099","line":"    real_doubled_lower = std::min(doubled_lower, grid_shape[0]);"},
{"lineNum":" 1100","line":"    real_doubled_upper = std::min(doubled_upper, grid_shape[0]);"},
{"lineNum":" 1101","line":"}"},
{"lineNum":" 1102","line":""},
{"lineNum":" 1103","line":"void"},
{"lineNum":" 1104","line":"Space_charge_3d_open_hockney::constructor_common("},
{"lineNum":" 1105","line":"        std::vector<int > const& grid_shape)"},
{"lineNum":" 1106","line":"{"},
{"lineNum":" 1107","line":"    if (this->periodic_z && (this->z_period == 0.0)) {"},
{"lineNum":" 1108","line":"        throw std::runtime_error("},
{"lineNum":" 1109","line":"                \"Space_charge_3d_open_hockney: z_period cannot be 0 when periodic_z is true\");"},
{"lineNum":" 1110","line":"    }"},
{"lineNum":" 1111","line":"    this->grid_shape[0] = grid_shape[2];"},
{"lineNum":" 1112","line":"    this->grid_shape[1] = grid_shape[1];"},
{"lineNum":" 1113","line":"    this->grid_shape[2] = grid_shape[0];"},
{"lineNum":" 1114","line":"    for (int i = 0; i < 3; ++i) {"},
{"lineNum":" 1115","line":"        doubled_grid_shape[i] = 2 * this->grid_shape[i];"},
{"lineNum":" 1116","line":"    }"},
{"lineNum":" 1117","line":""},
{"lineNum":" 1118","line":"    set_green_fn_type(linear);"},
{"lineNum":" 1119","line":"    set_charge_density_comm(charge_allreduce);"},
{"lineNum":" 1120","line":"    set_e_field_comm(e_field_allreduce);"},
{"lineNum":" 1121","line":"}"},
{"lineNum":" 1122","line":""},
{"lineNum":" 1123","line":"Space_charge_3d_open_hockney::Space_charge_3d_open_hockney("},
{"lineNum":" 1124","line":"        std::vector<int > const & grid_shape, bool longitudinal_kicks,"},
{"lineNum":" 1125","line":"        bool periodic_z, double z_period, bool grid_entire_period,"},
{"lineNum":" 1126","line":"        double n_sigma, double kick_scale) :"},
{"lineNum":" 1127","line":"                Collective_operator(\"space charge 3D open hockney\"),"},
{"lineNum":" 1128","line":"                grid_shape(3),"},
{"lineNum":" 1129","line":"                doubled_grid_shape(3),"},
{"lineNum":" 1130","line":"                padded_grid_shape(3),"},
{"lineNum":" 1131","line":"                periodic_z(periodic_z),"},
{"lineNum":" 1132","line":"                z_period(z_period),"},
{"lineNum":" 1133","line":"                grid_entire_period(grid_entire_period),"},
{"lineNum":" 1134","line":"                longitudinal_kicks(longitudinal_kicks),"},
{"lineNum":" 1135","line":"                commxx_divider_sptr(new Commxx_divider),"},
{"lineNum":" 1136","line":"                comm2_sptr(),"},
{"lineNum":" 1137","line":"                comm1_sptr(),"},
{"lineNum":" 1138","line":"                n_sigma(n_sigma),"},
{"lineNum":" 1139","line":"                domain_fixed(false),"},
{"lineNum":" 1140","line":"                have_domains(false),"},
{"lineNum":" 1141","line":"                diagnostics_list(),"},
{"lineNum":" 1142","line":"                have_diagnostics(false),"},
{"lineNum":" 1143","line":"                kick_scale(kick_scale)"},
{"lineNum":" 1144","line":"{"},
{"lineNum":" 1145","line":"    constructor_common(grid_shape);"},
{"lineNum":" 1146","line":"}"},
{"lineNum":" 1147","line":""},
{"lineNum":" 1148","line":"Space_charge_3d_open_hockney::Space_charge_3d_open_hockney("},
{"lineNum":" 1149","line":"        Commxx_divider_sptr commxx_divider_sptr,"},
{"lineNum":" 1150","line":"        std::vector<int > const & grid_shape, bool longitudinal_kicks,"},
{"lineNum":" 1151","line":"        bool periodic_z, double z_period, bool grid_entire_period,"},
{"lineNum":" 1152","line":"        double n_sigma, double kick_scale) :"},
{"lineNum":" 1153","line":"                Collective_operator(\"space charge 3D open hockney\"),"},
{"lineNum":" 1154","line":"                grid_shape(3),"},
{"lineNum":" 1155","line":"                doubled_grid_shape(3),"},
{"lineNum":" 1156","line":"                padded_grid_shape(3),"},
{"lineNum":" 1157","line":"                periodic_z(periodic_z),"},
{"lineNum":" 1158","line":"                z_period(z_period),"},
{"lineNum":" 1159","line":"                grid_entire_period(grid_entire_period),"},
{"lineNum":" 1160","line":"                longitudinal_kicks(longitudinal_kicks),"},
{"lineNum":" 1161","line":"                commxx_divider_sptr(commxx_divider_sptr),"},
{"lineNum":" 1162","line":"                comm2_sptr(),"},
{"lineNum":" 1163","line":"                comm1_sptr(),"},
{"lineNum":" 1164","line":"                n_sigma(n_sigma),"},
{"lineNum":" 1165","line":"                domain_fixed(false),"},
{"lineNum":" 1166","line":"                have_domains(false),"},
{"lineNum":" 1167","line":"                diagnostics_list(),"},
{"lineNum":" 1168","line":"                have_diagnostics(false),"},
{"lineNum":" 1169","line":"                kick_scale(kick_scale)"},
{"lineNum":" 1170","line":"{"},
{"lineNum":" 1171","line":"    constructor_common(grid_shape);"},
{"lineNum":" 1172","line":"}"},
{"lineNum":" 1173","line":""},
{"lineNum":" 1174","line":"Space_charge_3d_open_hockney::Space_charge_3d_open_hockney("},
{"lineNum":" 1175","line":"        Commxx_sptr comm_sptr, std::vector<int > const & grid_shape,"},
{"lineNum":" 1176","line":"        bool longitudinal_kicks, bool periodic_z, double z_period,"},
{"lineNum":" 1177","line":"        bool grid_entire_period, double n_sigma, double kick_scale) :"},
{"lineNum":" 1178","line":"                Collective_operator(\"space charge 3D open hockney\"),"},
{"lineNum":" 1179","line":"                grid_shape(3),"},
{"lineNum":" 1180","line":"                doubled_grid_shape(3),"},
{"lineNum":" 1181","line":"                padded_grid_shape(3),"},
{"lineNum":" 1182","line":"                periodic_z(periodic_z),"},
{"lineNum":" 1183","line":"                z_period(z_period),"},
{"lineNum":" 1184","line":"                grid_entire_period(grid_entire_period),"},
{"lineNum":" 1185","line":"                longitudinal_kicks(longitudinal_kicks),"},
{"lineNum":" 1186","line":"                commxx_divider_sptr(new Commxx_divider),"},
{"lineNum":" 1187","line":"                comm2_sptr(),"},
{"lineNum":" 1188","line":"                comm1_sptr(),"},
{"lineNum":" 1189","line":"                n_sigma(n_sigma),"},
{"lineNum":" 1190","line":"                domain_fixed(false),"},
{"lineNum":" 1191","line":"                have_domains(false),"},
{"lineNum":" 1192","line":"                diagnostics_list(),"},
{"lineNum":" 1193","line":"                have_diagnostics(false),"},
{"lineNum":" 1194","line":"                kick_scale(kick_scale)"},
{"lineNum":" 1195","line":"{"},
{"lineNum":" 1196","line":"    constructor_common(grid_shape);"},
{"lineNum":" 1197","line":"}"},
{"lineNum":" 1198","line":""},
{"lineNum":" 1199","line":"//Space_charge_3d_open_hockney::Space_charge_3d_open_hockney("},
{"lineNum":" 1200","line":"//        Distributed_fft3d_sptr distributed_fft3d_sptr, bool longitudinal_kicks,"},
{"lineNum":" 1201","line":"//        bool periodic_z, double z_period, bool grid_entire_period,"},
{"lineNum":" 1202","line":"//        double n_sigma) :"},
{"lineNum":" 1203","line":"//        Collective_operator(\"space charge\"), grid_shape(3), doubled_grid_shape("},
{"lineNum":" 1204","line":"//                3), padded_grid_shape(3), periodic_z(periodic_z), z_period("},
{"lineNum":" 1205","line":"//                z_period), grid_entire_period(grid_entire_period), longitudinal_kicks("},
{"lineNum":" 1206","line":"//                longitudinal_kicks), distributed_fft3d_sptr("},
{"lineNum":" 1207","line":"//                distributed_fft3d_sptr), comm2_sptr("},
{"lineNum":" 1208","line":"//                distributed_fft3d_sptr->get_comm_sptr()), n_sigma(n_sigma), domain_fixed("},
{"lineNum":" 1209","line":"//                false), have_domains(false)"},
{"lineNum":" 1210","line":"//{"},
{"lineNum":" 1211","line":"//    doubled_grid_shape = distributed_fft3d_sptr->get_shape();"},
{"lineNum":" 1212","line":"//    for (int i = 0; i < 3; ++i) {"},
{"lineNum":" 1213","line":"//        grid_shape[i] = doubled_grid_shape[i] / 2;"},
{"lineNum":" 1214","line":"//    }"},
{"lineNum":" 1215","line":"//    padded_grid_shape = distributed_fft3d_sptr->get_padded_shape_real();"},
{"lineNum":" 1216","line":"//    setup_nondoubled_communication();"},
{"lineNum":" 1217","line":"//    setup_default_options();"},
{"lineNum":" 1218","line":"//}"},
{"lineNum":" 1219","line":""},
{"lineNum":" 1220","line":"Space_charge_3d_open_hockney::Space_charge_3d_open_hockney()"},
{"lineNum":" 1221","line":"{"},
{"lineNum":" 1222","line":"}"},
{"lineNum":" 1223","line":""},
{"lineNum":" 1224","line":"Space_charge_3d_open_hockney *"},
{"lineNum":" 1225","line":"Space_charge_3d_open_hockney::clone()"},
{"lineNum":" 1226","line":"{"},
{"lineNum":" 1227","line":"    return new Space_charge_3d_open_hockney(*this);"},
{"lineNum":" 1228","line":"}"},
{"lineNum":" 1229","line":""},
{"lineNum":" 1230","line":"void"},
{"lineNum":" 1231","line":"Space_charge_3d_open_hockney::add_diagnostics(Diagnostics_space_charge_3d_hockney_sptr ddiagnostics_sptr)"},
{"lineNum":" 1232","line":"{"},
{"lineNum":" 1233","line":"  diagnostics_list.push_back(ddiagnostics_sptr);"},
{"lineNum":" 1234","line":"  this->have_diagnostics=true;"},
{"lineNum":" 1235","line":"}"},
{"lineNum":" 1236","line":""},
{"lineNum":" 1237","line":"void"},
{"lineNum":" 1238","line":"Space_charge_3d_open_hockney::set_diagnostics_list(Diagnostics_space_charge_3d_hockneys diagnostics_list)"},
{"lineNum":" 1239","line":"{"},
{"lineNum":" 1240","line":"  this->diagnostics_list =diagnostics_list;"},
{"lineNum":" 1241","line":"  this->have_diagnostics=true;"},
{"lineNum":" 1242","line":"}"},
{"lineNum":" 1243","line":""},
{"lineNum":" 1244","line":"bool"},
{"lineNum":" 1245","line":"Space_charge_3d_open_hockney::has_diagnostics()"},
{"lineNum":" 1246","line":"{"},
{"lineNum":" 1247","line":"    return have_diagnostics;"},
{"lineNum":" 1248","line":"}"},
{"lineNum":" 1249","line":""},
{"lineNum":" 1250","line":"double"},
{"lineNum":" 1251","line":"Space_charge_3d_open_hockney::get_n_sigma() const"},
{"lineNum":" 1252","line":"{"},
{"lineNum":" 1253","line":"    return n_sigma;"},
{"lineNum":" 1254","line":"}"},
{"lineNum":" 1255","line":""},
{"lineNum":" 1256","line":"void"},
{"lineNum":" 1257","line":"Space_charge_3d_open_hockney::set_green_fn_type(Green_fn_type green_fn_type)"},
{"lineNum":" 1258","line":"{"},
{"lineNum":" 1259","line":"    switch (green_fn_type) {"},
{"lineNum":" 1260","line":"    case pointlike:"},
{"lineNum":" 1261","line":"        break;"},
{"lineNum":" 1262","line":"    case linear:"},
{"lineNum":" 1263","line":"        break;"},
{"lineNum":" 1264","line":"    default:"},
{"lineNum":" 1265","line":"        throw runtime_error("},
{"lineNum":" 1266","line":"                \"Space_charge_3d_open_hockney::set_green_fn_type: invalid green_fn_type\");"},
{"lineNum":" 1267","line":"    }"},
{"lineNum":" 1268","line":"    this->green_fn_type = green_fn_type;"},
{"lineNum":" 1269","line":"}"},
{"lineNum":" 1270","line":""},
{"lineNum":" 1271","line":"Space_charge_3d_open_hockney::Green_fn_type"},
{"lineNum":" 1272","line":"Space_charge_3d_open_hockney::get_green_fn_type() const"},
{"lineNum":" 1273","line":"{"},
{"lineNum":" 1274","line":"    return green_fn_type;"},
{"lineNum":" 1275","line":"}"},
{"lineNum":" 1276","line":""},
{"lineNum":" 1277","line":"void"},
{"lineNum":" 1278","line":"Space_charge_3d_open_hockney::set_charge_density_comm("},
{"lineNum":" 1279","line":"        Charge_density_comm charge_density_comm)"},
{"lineNum":" 1280","line":"{"},
{"lineNum":" 1281","line":"    switch (charge_density_comm) {"},
{"lineNum":" 1282","line":"    case reduce_scatter:"},
{"lineNum":" 1283","line":"        break;"},
{"lineNum":" 1284","line":"    case charge_allreduce:"},
{"lineNum":" 1285","line":"        break;"},
{"lineNum":" 1286","line":"    default:"},
{"lineNum":" 1287","line":"        throw runtime_error("},
{"lineNum":" 1288","line":"                \"Space_charge_3d_open_hockney::set_charge_density_comm: invalid charge_density_comm\");"},
{"lineNum":" 1289","line":"    }"},
{"lineNum":" 1290","line":"    this->charge_density_comm = charge_density_comm;"},
{"lineNum":" 1291","line":"}"},
{"lineNum":" 1292","line":""},
{"lineNum":" 1293","line":"Space_charge_3d_open_hockney::Charge_density_comm"},
{"lineNum":" 1294","line":"Space_charge_3d_open_hockney::get_charge_density_comm() const"},
{"lineNum":" 1295","line":"{"},
{"lineNum":" 1296","line":"    return charge_density_comm;"},
{"lineNum":" 1297","line":"}"},
{"lineNum":" 1298","line":""},
{"lineNum":" 1299","line":"void"},
{"lineNum":" 1300","line":"Space_charge_3d_open_hockney::set_e_field_comm(E_field_comm e_field_comm)"},
{"lineNum":" 1301","line":"{"},
{"lineNum":" 1302","line":"    switch (e_field_comm) {"},
{"lineNum":" 1303","line":"    case gatherv_bcast:"},
{"lineNum":" 1304","line":"        break;"},
{"lineNum":" 1305","line":"    case allgatherv:"},
{"lineNum":" 1306","line":"        break;"},
{"lineNum":" 1307","line":"    case e_field_allreduce:"},
{"lineNum":" 1308","line":"        break;"},
{"lineNum":" 1309","line":"    default:"},
{"lineNum":" 1310","line":"        throw runtime_error("},
{"lineNum":" 1311","line":"                \"Space_charge_3d_open_hockney::set_e_field_comm: invalid e_field_comm\");"},
{"lineNum":" 1312","line":"    }"},
{"lineNum":" 1313","line":""},
{"lineNum":" 1314","line":"    this->e_field_comm = e_field_comm;"},
{"lineNum":" 1315","line":"}"},
{"lineNum":" 1316","line":""},
{"lineNum":" 1317","line":"Space_charge_3d_open_hockney::E_field_comm"},
{"lineNum":" 1318","line":"Space_charge_3d_open_hockney::get_e_field_comm() const"},
{"lineNum":" 1319","line":"{"},
{"lineNum":" 1320","line":"    return e_field_comm;"},
{"lineNum":" 1321","line":"}"},
{"lineNum":" 1322","line":""},
{"lineNum":" 1323","line":"void"},
{"lineNum":" 1324","line":"Space_charge_3d_open_hockney::set_doubled_domain()"},
{"lineNum":" 1325","line":"{"},
{"lineNum":" 1326","line":"    std::vector<double > doubled_size(3);"},
{"lineNum":" 1327","line":"    for (int i = 0; i < 3; ++i) {"},
{"lineNum":" 1328","line":"        doubled_size[i] = 2 * domain_sptr->get_physical_size()[i];"},
{"lineNum":" 1329","line":"    }"},
{"lineNum":" 1330","line":"    doubled_domain_sptr = Rectangular_grid_domain_sptr("},
{"lineNum":" 1331","line":"            new Rectangular_grid_domain(doubled_size,"},
{"lineNum":" 1332","line":"                    domain_sptr->get_physical_offset(), doubled_grid_shape,"},
{"lineNum":" 1333","line":"                    periodic_z));"},
{"lineNum":" 1334","line":"}"},
{"lineNum":" 1335","line":""},
{"lineNum":" 1336","line":"void"},
{"lineNum":" 1337","line":"Space_charge_3d_open_hockney::set_fixed_domain("},
{"lineNum":" 1338","line":"        Rectangular_grid_domain_sptr domain_sptr)"},
{"lineNum":" 1339","line":"{"},
{"lineNum":" 1340","line":"    if ((domain_sptr->get_grid_shape()[0] != grid_shape[0])"},
{"lineNum":" 1341","line":"            || (domain_sptr->get_grid_shape()[1] != grid_shape[1])"},
{"lineNum":" 1342","line":"            || (domain_sptr->get_grid_shape()[2] != grid_shape[2])) {"},
{"lineNum":" 1343","line":"        throw runtime_error("},
{"lineNum":" 1344","line":"                \"Space_charge_3d_open_hockney::set_fixed_domain requires a shape\\nequal to that of the parent object, but with zyx ordering.\");"},
{"lineNum":" 1345","line":"    }"},
{"lineNum":" 1346","line":"    this->domain_sptr = domain_sptr;"},
{"lineNum":" 1347","line":"    set_doubled_domain();"},
{"lineNum":" 1348","line":"    domain_fixed = true;"},
{"lineNum":" 1349","line":"    have_domains = true;"},
{"lineNum":" 1350","line":"}"},
{"lineNum":" 1351","line":""},
{"lineNum":" 1352","line":"// get_smallest_non_tiny is a local function"},
{"lineNum":" 1353","line":"double"},
{"lineNum":" 1354","line":"get_smallest_non_tiny(double val, double other1, double other2, double tiny)"},
{"lineNum":" 1355","line":"{"},
{"lineNum":" 1356","line":"    double retval;"},
{"lineNum":" 1357","line":"    if (val > tiny) {"},
{"lineNum":" 1358","line":"        retval = val;"},
{"lineNum":" 1359","line":"    } else {"},
{"lineNum":" 1360","line":"        if ((other1 > tiny) && (other2 > tiny)) {"},
{"lineNum":" 1361","line":"            retval = std::min(other1, other2);"},
{"lineNum":" 1362","line":"        } else {"},
{"lineNum":" 1363","line":"            retval = std::max(other1, other2);"},
{"lineNum":" 1364","line":"        }"},
{"lineNum":" 1365","line":"    }"},
{"lineNum":" 1366","line":"    return retval;"},
{"lineNum":" 1367","line":"}"},
{"lineNum":" 1368","line":""},
{"lineNum":" 1369","line":"void"},
{"lineNum":" 1370","line":"Space_charge_3d_open_hockney::update_domain(Bunch const& bunch)"},
{"lineNum":" 1371","line":"{"},
{"lineNum":" 1372","line":"    setup_communication(bunch.get_comm_sptr());"},
{"lineNum":" 1373","line":"    if (!domain_fixed) {"},
{"lineNum":" 1374","line":"        MArray1d mean(Core_diagnostics::calculate_mean(bunch));"},
{"lineNum":" 1375","line":"        MArray1d std(Core_diagnostics::calculate_std(bunch, mean));"},
{"lineNum":" 1376","line":"        std::vector<double > size(3);"},
{"lineNum":" 1377","line":"        std::vector<double > offset(3);"},
{"lineNum":" 1378","line":"        const double tiny = 1.0e-10;"},
{"lineNum":" 1379","line":"        if ((std[Bunch::x] < tiny) && (std[Bunch::y] < tiny)"},
{"lineNum":" 1380","line":"                && (std[Bunch::z] < tiny)) {"},
{"lineNum":" 1381","line":"            throw std::runtime_error("},
{"lineNum":" 1382","line":"                    \"Space_charge_3d_open_hockney::update_domain: all three spatial dimensions have neglible extent\");"},
{"lineNum":" 1383","line":"        }"},
{"lineNum":" 1384","line":"        if (grid_entire_period) {"},
{"lineNum":" 1385","line":"            offset[0] = 0.0;"},
{"lineNum":" 1386","line":"            size[0] = z_period;"},
{"lineNum":" 1387","line":"        } else {"},
{"lineNum":" 1388","line":"            offset[0] = mean[Bunch::z];"},
{"lineNum":" 1389","line":"            size[0] = n_sigma"},
{"lineNum":" 1390","line":"                    * get_smallest_non_tiny(std[Bunch::z], std[Bunch::x],"},
{"lineNum":" 1391","line":"                            std[Bunch::y], tiny);"},
{"lineNum":" 1392","line":"        }"},
{"lineNum":" 1393","line":"        offset[1] = mean[Bunch::y];"},
{"lineNum":" 1394","line":"        size[1] = n_sigma"},
{"lineNum":" 1395","line":"                * get_smallest_non_tiny(std[Bunch::y], std[Bunch::x],"},
{"lineNum":" 1396","line":"                        std[Bunch::z], tiny);"},
{"lineNum":" 1397","line":"        offset[2] = mean[Bunch::x];"},
{"lineNum":" 1398","line":"        size[2] = n_sigma"},
{"lineNum":" 1399","line":"                * get_smallest_non_tiny(std[Bunch::x], std[Bunch::y],"},
{"lineNum":" 1400","line":"                        std[Bunch::z], tiny);"},
{"lineNum":" 1401","line":"        domain_sptr = Rectangular_grid_domain_sptr("},
{"lineNum":" 1402","line":"                new Rectangular_grid_domain(size, offset, grid_shape,"},
{"lineNum":" 1403","line":"                        periodic_z));"},
{"lineNum":" 1404","line":"        set_doubled_domain();"},
{"lineNum":" 1405","line":"        have_domains = true;"},
{"lineNum":" 1406","line":"    }"},
{"lineNum":" 1407","line":"}"},
{"lineNum":" 1408","line":""},
{"lineNum":" 1409","line":"Rectangular_grid_domain_sptr"},
{"lineNum":" 1410","line":"Space_charge_3d_open_hockney::get_domain_sptr() const"},
{"lineNum":" 1411","line":"{"},
{"lineNum":" 1412","line":"    if (!have_domains) {"},
{"lineNum":" 1413","line":"        throw runtime_error("},
{"lineNum":" 1414","line":"                \"Space_charge_3d_open_hockney::get_domain_sptr: domain not set\");"},
{"lineNum":" 1415","line":"    }"},
{"lineNum":" 1416","line":"    return domain_sptr;"},
{"lineNum":" 1417","line":"}"},
{"lineNum":" 1418","line":""},
{"lineNum":" 1419","line":"Rectangular_grid_domain_sptr"},
{"lineNum":" 1420","line":"Space_charge_3d_open_hockney::get_doubled_domain_sptr() const"},
{"lineNum":" 1421","line":"{"},
{"lineNum":" 1422","line":"    if (!have_domains) {"},
{"lineNum":" 1423","line":"        throw runtime_error("},
{"lineNum":" 1424","line":"                \"Space_charge_3d_open_hockney::get_doubled_domain_sptr: domain not set\");"},
{"lineNum":" 1425","line":"    }"},
{"lineNum":" 1426","line":"    return doubled_domain_sptr;"},
{"lineNum":" 1427","line":"}"},
{"lineNum":" 1428","line":""},
{"lineNum":" 1429","line":"Rectangular_grid_sptr"},
{"lineNum":" 1430","line":"Space_charge_3d_open_hockney::get_local_charge_density(Bunch const& bunch)"},
{"lineNum":" 1431","line":"{"},
{"lineNum":" 1432","line":"double t = simple_timer_current();"},
{"lineNum":" 1433","line":"    update_domain(bunch);"},
{"lineNum":" 1434","line":"t = simple_timer_show(t, \"sc-local-rho-update-domain\");"},
{"lineNum":" 1435","line":"    Rectangular_grid_sptr local_rho_sptr(new Rectangular_grid(domain_sptr));"},
{"lineNum":" 1436","line":"t = simple_timer_show(t, \"sc-local-rho-new\");"},
{"lineNum":" 1437","line":"    deposit_charge_rectangular_zyx(*local_rho_sptr, bunch);"},
{"lineNum":" 1438","line":"    //deposit_charge_rectangular_zyx_omp_reduce(*local_rho_sptr, bunch);"},
{"lineNum":" 1439","line":"    //deposit_charge_rectangular_zyx_omp_interleaved(*local_rho_sptr, bunch);"},
{"lineNum":" 1440","line":"t = simple_timer_show(t, \"sc-local-rho-deposit\");"},
{"lineNum":" 1441","line":"    return local_rho_sptr;"},
{"lineNum":" 1442","line":"}"},
{"lineNum":" 1443","line":""},
{"lineNum":" 1444","line":"Distributed_rectangular_grid_sptr"},
{"lineNum":" 1445","line":"Space_charge_3d_open_hockney::get_global_charge_density2_reduce_scatter("},
{"lineNum":" 1446","line":"        Rectangular_grid const& local_charge_density, Commxx_sptr comm_sptr)"},
{"lineNum":" 1447","line":"{"},
{"lineNum":" 1448","line":"    setup_communication(comm_sptr);"},
{"lineNum":" 1449","line":"// jfa: here is where we do something complicated, but (potentially) efficient"},
{"lineNum":" 1450","line":"// in calculating a version of the charge density that is just global enough"},
{"lineNum":" 1451","line":"// to fill in the doubled global charge density"},
{"lineNum":" 1452","line":""},
{"lineNum":" 1453","line":"    const double * source = local_charge_density.get_grid_points().origin();"},
{"lineNum":" 1454","line":""},
{"lineNum":" 1455","line":"    double * dest;"},
{"lineNum":" 1456","line":"// dest_array stores the portion of global charge density needed on each"},
{"lineNum":" 1457","line":"// processor. It has to have the same shape in the non-distributed dimensions"},
{"lineNum":" 1458","line":"// as the charge density in order to work with MPI_Reduce_scatter."},
{"lineNum":" 1459","line":"    MArray3d dest_array(boost::extents[1][1][1]);"},
{"lineNum":" 1460","line":"    if (real_length > 0) {"},
{"lineNum":" 1461","line":"        dest_array.resize("},
{"lineNum":" 1462","line":"                boost::extents[extent_range(real_lower, real_upper)][grid_shape[1]][grid_shape[2]]);"},
{"lineNum":" 1463","line":"    }"},
{"lineNum":" 1464","line":"    dest = multi_array_offset(dest_array, real_lower, 0, 0);"},
{"lineNum":" 1465","line":"    int error = MPI_Reduce_scatter((void *) source, (void *) dest,"},
{"lineNum":" 1466","line":"            &real_lengths[0], MPI_DOUBLE, MPI_SUM, comm_sptr->get());"},
{"lineNum":" 1467","line":"    if (error != MPI_SUCCESS) {"},
{"lineNum":" 1468","line":"        throw std::runtime_error("},
{"lineNum":" 1469","line":"                \"MPI error in Space_charge_3d_open_hockney::get_global_charge_density2_reduce_scatter\");"},
{"lineNum":" 1470","line":"    }"},
{"lineNum":" 1471","line":"    Distributed_rectangular_grid_sptr rho2 = Distributed_rectangular_grid_sptr("},
{"lineNum":" 1472","line":"            new Distributed_rectangular_grid(doubled_domain_sptr, doubled_lower,"},
{"lineNum":" 1473","line":"                    doubled_upper,"},
{"lineNum":" 1474","line":"                    distributed_fft3d_sptr->get_padded_shape_real(),"},
{"lineNum":" 1475","line":"                    comm_sptr));"},
{"lineNum":" 1476","line":"    for (int i = rho2->get_lower(); i < rho2->get_upper(); ++i) {"},
{"lineNum":" 1477","line":"        for (int j = 0; j < doubled_grid_shape[1]; ++j) {"},
{"lineNum":" 1478","line":"            for (int k = 0; k < doubled_grid_shape[2]; ++k) {"},
{"lineNum":" 1479","line":"                rho2->get_grid_points()[i][j][k] = 0.0;"},
{"lineNum":" 1480","line":"            }"},
{"lineNum":" 1481","line":"        }"},
{"lineNum":" 1482","line":"    }"},
{"lineNum":" 1483","line":"    for (int i = real_lower; i < real_upper; ++i) {"},
{"lineNum":" 1484","line":"        for (int j = 0; j < grid_shape[1]; ++j) {"},
{"lineNum":" 1485","line":"            for (int k = 0; k < grid_shape[2]; ++k) {"},
{"lineNum":" 1486","line":"                rho2->get_grid_points()[i][j][k] = dest_array[i][j][k];"},
{"lineNum":" 1487","line":"            }"},
{"lineNum":" 1488","line":"        }"},
{"lineNum":" 1489","line":"    }"},
{"lineNum":" 1490","line":"    return rho2;"},
{"lineNum":" 1491","line":"}"},
{"lineNum":" 1492","line":""},
{"lineNum":" 1493","line":"Distributed_rectangular_grid_sptr"},
{"lineNum":" 1494","line":"Space_charge_3d_open_hockney::get_global_charge_density2_allreduce("},
{"lineNum":" 1495","line":"        Rectangular_grid const& local_charge_density, Commxx_sptr comm_sptr)"},
{"lineNum":" 1496","line":"{"},
{"lineNum":" 1497","line":"    setup_communication(comm_sptr);"},
{"lineNum":" 1498","line":"    int error = MPI_Allreduce(MPI_IN_PLACE,"},
{"lineNum":" 1499","line":"            (void*) local_charge_density.get_grid_points().origin(),"},
{"lineNum":" 1500","line":"            local_charge_density.get_grid_points().num_elements(), MPI_DOUBLE,"},
{"lineNum":" 1501","line":"            MPI_SUM, comm_sptr->get());"},
{"lineNum":" 1502","line":"    if (error != MPI_SUCCESS) {"},
{"lineNum":" 1503","line":"        throw std::runtime_error("},
{"lineNum":" 1504","line":"                \"MPI error in Space_charge_3d_open_hockney::get_global_charge_density2_allreduce\");"},
{"lineNum":" 1505","line":"    }"},
{"lineNum":" 1506","line":"    Distributed_rectangular_grid_sptr rho2 = Distributed_rectangular_grid_sptr("},
{"lineNum":" 1507","line":"            new Distributed_rectangular_grid(doubled_domain_sptr, doubled_lower,"},
{"lineNum":" 1508","line":"                    doubled_upper,"},
{"lineNum":" 1509","line":"                    distributed_fft3d_sptr->get_padded_shape_real(),"},
{"lineNum":" 1510","line":"                    comm_sptr));"},
{"lineNum":" 1511","line":"    for (int i = rho2->get_lower(); i < rho2->get_upper(); ++i) {"},
{"lineNum":" 1512","line":"        for (int j = 0; j < doubled_grid_shape[1]; ++j) {"},
{"lineNum":" 1513","line":"            for (int k = 0; k < doubled_grid_shape[2]; ++k) {"},
{"lineNum":" 1514","line":"                rho2->get_grid_points()[i][j][k] = 0.0;"},
{"lineNum":" 1515","line":"            }"},
{"lineNum":" 1516","line":"        }"},
{"lineNum":" 1517","line":"    }"},
{"lineNum":" 1518","line":"    for (int i = real_lower; i < real_upper; ++i) {"},
{"lineNum":" 1519","line":"        for (int j = 0; j < grid_shape[1]; ++j) {"},
{"lineNum":" 1520","line":"            for (int k = 0; k < grid_shape[2]; ++k) {"},
{"lineNum":" 1521","line":"                rho2->get_grid_points()[i][j][k] ="},
{"lineNum":" 1522","line":"                        local_charge_density.get_grid_points()[i][j][k];"},
{"lineNum":" 1523","line":"            }"},
{"lineNum":" 1524","line":"        }"},
{"lineNum":" 1525","line":"    }"},
{"lineNum":" 1526","line":"    return rho2;"},
{"lineNum":" 1527","line":"}"},
{"lineNum":" 1528","line":""},
{"lineNum":" 1529","line":"Distributed_rectangular_grid_sptr"},
{"lineNum":" 1530","line":"Space_charge_3d_open_hockney::get_global_charge_density2("},
{"lineNum":" 1531","line":"        Rectangular_grid const& local_charge_density, Commxx_sptr comm_sptr)"},
{"lineNum":" 1532","line":"{"},
{"lineNum":" 1533","line":"    switch (charge_density_comm) {"},
{"lineNum":" 1534","line":"    case reduce_scatter:"},
{"lineNum":" 1535","line":"        return get_global_charge_density2_reduce_scatter(local_charge_density,"},
{"lineNum":" 1536","line":"                comm_sptr);"},
{"lineNum":" 1537","line":"    case charge_allreduce:"},
{"lineNum":" 1538","line":"        return get_global_charge_density2_allreduce(local_charge_density,"},
{"lineNum":" 1539","line":"                comm_sptr);"},
{"lineNum":" 1540","line":"    default:"},
{"lineNum":" 1541","line":"        throw runtime_error("},
{"lineNum":" 1542","line":"                \"Space_charge_3d_open_hockney: invalid charge_density_comm\");"},
{"lineNum":" 1543","line":"    }"},
{"lineNum":" 1544","line":"}"},
{"lineNum":" 1545","line":""},
{"lineNum":" 1546","line":"Distributed_rectangular_grid_sptr"},
{"lineNum":" 1547","line":"Space_charge_3d_open_hockney::get_green_fn2_pointlike()"},
{"lineNum":" 1548","line":"{"},
{"lineNum":" 1549","line":"    if (doubled_domain_sptr == NULL) {"},
{"lineNum":" 1550","line":"        throw runtime_error("},
{"lineNum":" 1551","line":"                \"Space_charge_3d_open_hockney::get_green_fn2_pointlike called before domain specified\");"},
{"lineNum":" 1552","line":"    }"},
{"lineNum":" 1553","line":"    int lower = distributed_fft3d_sptr->get_lower();"},
{"lineNum":" 1554","line":"    int upper = distributed_fft3d_sptr->get_upper();"},
{"lineNum":" 1555","line":"    Distributed_rectangular_grid_sptr G2 = Distributed_rectangular_grid_sptr("},
{"lineNum":" 1556","line":"            new Distributed_rectangular_grid(doubled_domain_sptr, lower, upper,"},
{"lineNum":" 1557","line":"                    distributed_fft3d_sptr->get_padded_shape_real(),"},
{"lineNum":" 1558","line":"                    comm2_sptr));"},
{"lineNum":" 1559","line":""},
{"lineNum":" 1560","line":"    double hx = domain_sptr->get_cell_size()[2];"},
{"lineNum":" 1561","line":"    double hy = domain_sptr->get_cell_size()[1];"},
{"lineNum":" 1562","line":"    double hz = domain_sptr->get_cell_size()[0];"},
{"lineNum":" 1563","line":""},
{"lineNum":" 1564","line":"// G000 is naively infinite. In the correct approach, it should be"},
{"lineNum":" 1565","line":"// the value which gives the proper integral when convolved with the"},
{"lineNum":" 1566","line":"// charge density. Even assuming a constant charge density, the proper"},
{"lineNum":" 1567","line":"// value for G000 cannot be computed in closed form. Fortunately,"},
{"lineNum":" 1568","line":"// the solver results are insensitive to the exact value of G000."},
{"lineNum":" 1569","line":"// I make the following argument: G000 should be greater than any of"},
{"lineNum":" 1570","line":"// the neighboring values of G. The form"},
{"lineNum":" 1571","line":"//    G000 = coeff/min(hx,hy,hz),"},
{"lineNum":" 1572","line":"// with"},
{"lineNum":" 1573","line":"//    coeff > 1"},
{"lineNum":" 1574","line":"// satisfies the criterion. An empirical study (see the 3d_open_hockney.py"},
{"lineNum":" 1575","line":"// script in docs/devel/solvers) gives coeff = 2.8."},
{"lineNum":" 1576","line":"    const double coeff = 2.8;"},
{"lineNum":" 1577","line":"    double G000 = coeff / std::min(hx, std::min(hy, hz));"},
{"lineNum":" 1578","line":""},
{"lineNum":" 1579","line":"    const int num_images = 8;"},
{"lineNum":" 1580","line":"    int mix, miy; // mirror indices for x- and y-planes"},
{"lineNum":" 1581","line":"    double dx, dy, dz, G;"},
{"lineNum":" 1582","line":""},
{"lineNum":" 1583","line":"// In the following loops we use mirroring for ix and iy, but"},
{"lineNum":" 1584","line":"// calculate all iz values separately because the mirror points in"},
{"lineNum":" 1585","line":"// iz may be on another processor."},
{"lineNum":" 1586","line":"// Note that the doubling algorithm is not quite symmetric. For"},
{"lineNum":" 1587","line":"// example, the doubled grid for 4 points in 1d looks like"},
{"lineNum":" 1588","line":"//    0 1 2 3 4 3 2 1"},
{"lineNum":" 1589","line":""},
{"lineNum":" 1590","line":"    #pragma omp parallel for private( dx, dy, dz, G, mix, miy )"},
{"lineNum":" 1591","line":"    for (int iz = lower; iz < upper; ++iz) {"},
{"lineNum":" 1592","line":"        if (iz > grid_shape[0]) {"},
{"lineNum":" 1593","line":"            dz = (doubled_grid_shape[0] - iz) * hz;"},
{"lineNum":" 1594","line":"        } else {"},
{"lineNum":" 1595","line":"            dz = iz * hz;"},
{"lineNum":" 1596","line":"        }"},
{"lineNum":" 1597","line":"        for (int iy = 0; iy < grid_shape[1] + 1; ++iy) {"},
{"lineNum":" 1598","line":"            dy = iy * hy;"},
{"lineNum":" 1599","line":"            miy = doubled_grid_shape[1] - iy;"},
{"lineNum":" 1600","line":"            if (miy == doubled_grid_shape[1]) {"},
{"lineNum":" 1601","line":"                miy = iy;"},
{"lineNum":" 1602","line":"            }"},
{"lineNum":" 1603","line":"            for (int ix = 0; ix < grid_shape[2] + 1; ++ix) {"},
{"lineNum":" 1604","line":"                dx = ix * hx;"},
{"lineNum":" 1605","line":"                mix = doubled_grid_shape[2] - ix;"},
{"lineNum":" 1606","line":"                if (mix == doubled_grid_shape[2]) {"},
{"lineNum":" 1607","line":"                    mix = ix;"},
{"lineNum":" 1608","line":"                }"},
{"lineNum":" 1609","line":"                if ((ix == 0) && (iy == 0) && (iz == 0)) {"},
{"lineNum":" 1610","line":"                    G = G000;"},
{"lineNum":" 1611","line":"                } else {"},
{"lineNum":" 1612","line":"                    G = 1.0 / sqrt(dx * dx + dy * dy + dz * dz);"},
{"lineNum":" 1613","line":"                }"},
{"lineNum":" 1614","line":"                if (periodic_z) {"},
{"lineNum":" 1615","line":"                    for (int image = -num_images; image <= num_images;"},
{"lineNum":" 1616","line":"                            ++image) {"},
{"lineNum":" 1617","line":"                        if (image != 0) {"},
{"lineNum":" 1618","line":"                            double dz_image = dz + image * z_period;"},
{"lineNum":" 1619","line":"                            const double tiny = 1.0e-9;"},
{"lineNum":" 1620","line":"                            if ((ix == 0) && (iy == 0)"},
{"lineNum":" 1621","line":"                                    && (std::abs(dz_image) < tiny)) {"},
{"lineNum":" 1622","line":"                                G += G000;"},
{"lineNum":" 1623","line":"                            } else {"},
{"lineNum":" 1624","line":"                                G += 1.0"},
{"lineNum":" 1625","line":"                                        / sqrt("},
{"lineNum":" 1626","line":"                                                dx * dx + dy * dy"},
{"lineNum":" 1627","line":"                                                        + dz_image * dz_image);"},
{"lineNum":" 1628","line":"                            }"},
{"lineNum":" 1629","line":"                        }"},
{"lineNum":" 1630","line":"                    }"},
{"lineNum":" 1631","line":"                }"},
{"lineNum":" 1632","line":"                G2->get_grid_points()[iz][iy][ix] = G;"},
{"lineNum":" 1633","line":"                // three mirror images"},
{"lineNum":" 1634","line":"                G2->get_grid_points()[iz][miy][ix] = G;"},
{"lineNum":" 1635","line":"                G2->get_grid_points()[iz][miy][mix] = G;"},
{"lineNum":" 1636","line":"                G2->get_grid_points()[iz][iy][mix] = G;"},
{"lineNum":" 1637","line":"            }"},
{"lineNum":" 1638","line":"        }"},
{"lineNum":" 1639","line":"    }"},
{"lineNum":" 1640","line":""},
{"lineNum":" 1641","line":"    G2->set_normalization(1.0);"},
{"lineNum":" 1642","line":""},
{"lineNum":" 1643","line":"    return G2;"},
{"lineNum":" 1644","line":"}"},
{"lineNum":" 1645","line":""},
{"lineNum":" 1646","line":"Distributed_rectangular_grid_sptr"},
{"lineNum":" 1647","line":"Space_charge_3d_open_hockney::get_green_fn2_linear()"},
{"lineNum":" 1648","line":"{"},
{"lineNum":" 1649","line":"    if (doubled_domain_sptr == NULL) {"},
{"lineNum":" 1650","line":"        throw runtime_error("},
{"lineNum":" 1651","line":"                \"Space_charge_3d_open_hockney::get_green_fn2_linear called before domain specified\");"},
{"lineNum":" 1652","line":"    }"},
{"lineNum":" 1653","line":"    int lower = distributed_fft3d_sptr->get_lower();"},
{"lineNum":" 1654","line":"    int upper = distributed_fft3d_sptr->get_upper();"},
{"lineNum":" 1655","line":"    Distributed_rectangular_grid_sptr G2 = Distributed_rectangular_grid_sptr("},
{"lineNum":" 1656","line":"            new Distributed_rectangular_grid(doubled_domain_sptr, lower, upper,"},
{"lineNum":" 1657","line":"                    distributed_fft3d_sptr->get_padded_shape_real(),"},
{"lineNum":" 1658","line":"                    comm2_sptr));"},
{"lineNum":" 1659","line":""},
{"lineNum":" 1660","line":"    double hx = domain_sptr->get_cell_size()[2];"},
{"lineNum":" 1661","line":"    double hy = domain_sptr->get_cell_size()[1];"},
{"lineNum":" 1662","line":"    double hz = domain_sptr->get_cell_size()[0];"},
{"lineNum":" 1663","line":""},
{"lineNum":" 1664","line":"    double rr = hx * hx + hy * hy;"},
{"lineNum":" 1665","line":"    double r1 = sqrt(hx * hx + hy * hy + hz * hz);"},
{"lineNum":" 1666","line":"    double G000 = (2.0 / rr)"},
{"lineNum":" 1667","line":"            * (hz * r1 + rr * log((hz + r1) / sqrt(rr)) - hz * hz); // average value of outer cylinder."},
{"lineNum":" 1668","line":""},
{"lineNum":" 1669","line":"    int gz = grid_shape[0];"},
{"lineNum":" 1670","line":"    int gy = grid_shape[1];"},
{"lineNum":" 1671","line":"    int gx = grid_shape[2];"},
{"lineNum":" 1672","line":""},
{"lineNum":" 1673","line":"    int dgz = doubled_grid_shape[0];"},
{"lineNum":" 1674","line":"    int dgy = doubled_grid_shape[1];"},
{"lineNum":" 1675","line":"    int dgx = doubled_grid_shape[2];"},
{"lineNum":" 1676","line":""},
{"lineNum":" 1677","line":"    const int num_images = 8;"},
{"lineNum":" 1678","line":"    int mix, miy; // mirror indices for x- and y-planes"},
{"lineNum":" 1679","line":"    double x, y, z, G;"},
{"lineNum":" 1680","line":"    const double epsz = 1.0e-12 * hz;"},
{"lineNum":" 1681","line":""},
{"lineNum":" 1682","line":"    #pragma omp parallel for default(none), \\"},
{"lineNum":" 1683","line":"        private( x, y, z, G, mix, miy, rr ), \\"},
{"lineNum":" 1684","line":"        shared( gx, gy, gz, dgx, dgy, dgz, hx, hy, hz, G000, lower, upper, G2 )"},
{"lineNum":" 1685","line":"    for (int iz = lower; iz < upper; ++iz) {"},
{"lineNum":" 1686","line":"        z = (iz>gz) ? (dgz-iz)*hz : iz*hz;"},
{"lineNum":" 1687","line":""},
{"lineNum":" 1688","line":"        for (int iy = 0; iy <= gy; ++iy) {"},
{"lineNum":" 1689","line":"            y = iy * hy;"},
{"lineNum":" 1690","line":"            miy = (iy==gy) ? dgy : (dgy-iy);"},
{"lineNum":" 1691","line":""},
{"lineNum":" 1692","line":"            for (int ix = 0; ix <= gx; ++ix) {"},
{"lineNum":" 1693","line":"                x = ix * hx;"},
{"lineNum":" 1694","line":"                rr = x * x + y * y;"},
{"lineNum":" 1695","line":"                mix = (ix==gx) ? dgx : (dgx-ix);"},
{"lineNum":" 1696","line":""},
{"lineNum":" 1697","line":"                G = 2.0 * sqrt(rr + z * z) - sqrt(rr + (z - hz) * (z - hz))"},
{"lineNum":" 1698","line":"                        - sqrt(rr + (z + hz) * (z + hz));"},
{"lineNum":" 1699","line":"                double T1, T2, r1, r2;"},
{"lineNum":" 1700","line":"                if (z < -hz) {"},
{"lineNum":" 1701","line":"                    r1 = (sqrt((z - hz) * (z - hz) + rr) - z + hz)"},
{"lineNum":" 1702","line":"                            / (sqrt(z * z + rr) - z);"},
{"lineNum":" 1703","line":"                    T1 = (hz - z) * log(r1);"},
{"lineNum":" 1704","line":"                    r2 = (sqrt(z * z + rr) - z)"},
{"lineNum":" 1705","line":"                            / (sqrt((z + hz) * (z + hz) + rr) - z - hz);"},
{"lineNum":" 1706","line":"                    T2 = (hz + z) * log(r2);"},
{"lineNum":" 1707","line":"                    G += T1 + T2;"},
{"lineNum":" 1708","line":"                } else if (std::abs(z + hz) < epsz) {"},
{"lineNum":" 1709","line":"                    r1 = (sqrt((z - hz) * (z - hz) + rr) - z + hz)"},
{"lineNum":" 1710","line":"                            / (sqrt(z * z + rr) - z);"},
{"lineNum":" 1711","line":"                    T1 = (hz - z) * log(r1);"},
{"lineNum":" 1712","line":"                    G += T1;"},
{"lineNum":" 1713","line":"                } else if (std::abs(z) < epsz) {"},
{"lineNum":" 1714","line":"                    if (std::abs(x) + std::abs(y) < 2. * epsz) {"},
{"lineNum":" 1715","line":"                        G += hz * G000;"},
{"lineNum":" 1716","line":"                    } /* T1+T2 in fact */else {"},
{"lineNum":" 1717","line":"                        r1 = (sqrt(hz * hz + rr) + hz) / sqrt(rr);"},
{"lineNum":" 1718","line":"                        G += 2. * hz * log(r1);"},
{"lineNum":" 1719","line":"                    }"},
{"lineNum":" 1720","line":"                } else if (std::abs(z - hz) < epsz) {"},
{"lineNum":" 1721","line":"                    r1 = (sqrt((z + hz) * (z + hz) + rr) + z + hz)"},
{"lineNum":" 1722","line":"                            / (sqrt(z * z + rr) + z);"},
{"lineNum":" 1723","line":"                    T1 = (hz + z) * log(r1);"},
{"lineNum":" 1724","line":"                    G += T1;"},
{"lineNum":" 1725","line":"                } else if (z > hz) {"},
{"lineNum":" 1726","line":"                    r1 = (sqrt(z * z + rr) + z)"},
{"lineNum":" 1727","line":"                            / (sqrt((z - hz) * (z - hz) + rr) + z - hz);"},
{"lineNum":" 1728","line":"                    T1 = (hz - z) * log(r1);"},
{"lineNum":" 1729","line":"                    r2 = (sqrt((z + hz) * (z + hz) + rr) + z + hz)"},
{"lineNum":" 1730","line":"                            / (sqrt(z * z + rr) + z);"},
{"lineNum":" 1731","line":"                    T2 = (hz + z) * log(r2);"},
{"lineNum":" 1732","line":"                    G += T1 + T2;"},
{"lineNum":" 1733","line":"                } else {"},
{"lineNum":" 1734","line":"                    throw std::runtime_error("},
{"lineNum":" 1735","line":"                            \"Space_charge_3d_open_hockney::get_green_fn2 error1\");"},
{"lineNum":" 1736","line":"                }"},
{"lineNum":" 1737","line":""},
{"lineNum":" 1738","line":"                if (periodic_z) {"},
{"lineNum":" 1739","line":"                    throw std::runtime_error("},
{"lineNum":" 1740","line":"                            \"Space_charge_3d_open_hockney::get_green_fn2_linear: periodic_z not yet implemented\");"},
{"lineNum":" 1741","line":"                    for (int image = -num_images; image < num_images; ++image) {"},
{"lineNum":" 1742","line":"                        if (image != 0) {"},
{"lineNum":" 1743","line":"                            double z_image = z + image * z_period;"},
{"lineNum":" 1744","line":""},
{"lineNum":" 1745","line":"                            if (z_image < -hz) {"},
{"lineNum":" 1746","line":"                                r1 = (sqrt((z_image - hz) * (z_image - hz) + rr)"},
{"lineNum":" 1747","line":"                                        - z_image + hz)"},
{"lineNum":" 1748","line":"                                        / (sqrt(z_image * z_image + rr)"},
{"lineNum":" 1749","line":"                                                - z_image);"},
{"lineNum":" 1750","line":"                                T1 = (hz - z_image) * log(r1);"},
{"lineNum":" 1751","line":"                                r2 = (sqrt(z_image * z_image + rr) - z_image)"},
{"lineNum":" 1752","line":"                                        / (sqrt("},
{"lineNum":" 1753","line":"                                                (z_image + hz) * (z_image + hz)"},
{"lineNum":" 1754","line":"                                                        + rr) - z_image - hz);"},
{"lineNum":" 1755","line":"                                T2 = (hz + z_image) * log(r2);"},
{"lineNum":" 1756","line":"                                G += T1 + T2;"},
{"lineNum":" 1757","line":"                            }"},
{"lineNum":" 1758","line":""},
{"lineNum":" 1759","line":"                            else if (std::abs(z_image + hz) < epsz) {"},
{"lineNum":" 1760","line":"                                r1 = (sqrt((z_image - hz) * (z_image - hz) + rr)"},
{"lineNum":" 1761","line":"                                        - z_image + hz)"},
{"lineNum":" 1762","line":"                                        / (sqrt(z_image * z_image + rr)"},
{"lineNum":" 1763","line":"                                                - z_image);"},
{"lineNum":" 1764","line":"                                T1 = (hz - z_image) * log(r1);"},
{"lineNum":" 1765","line":"                                G += T1;"},
{"lineNum":" 1766","line":"                            }"},
{"lineNum":" 1767","line":""},
{"lineNum":" 1768","line":"                            else if (std::abs(z_image) < epsz) {"},
{"lineNum":" 1769","line":"                                if (std::abs(x) + std::abs(y) < 2. * epsz) {"},
{"lineNum":" 1770","line":"                                    G += hz * G000;"},
{"lineNum":" 1771","line":"                                } // T1+T2 in fact"},
{"lineNum":" 1772","line":"                                else {"},
{"lineNum":" 1773","line":"                                    r1 = (sqrt(hz * hz + rr) + hz) / sqrt(rr);"},
{"lineNum":" 1774","line":"                                    G += 2. * hz * log(r1);"},
{"lineNum":" 1775","line":"                                }"},
{"lineNum":" 1776","line":"                            } else if (std::abs(z_image - hz) < epsz) {"},
{"lineNum":" 1777","line":"                                r1 = (sqrt((z_image + hz) * (z_image + hz) + rr)"},
{"lineNum":" 1778","line":"                                        + z_image + hz)"},
{"lineNum":" 1779","line":"                                        / (sqrt(z_image * z_image + rr)"},
{"lineNum":" 1780","line":"                                                + z_image);"},
{"lineNum":" 1781","line":"                                T1 = (hz + z_image) * log(r1);"},
{"lineNum":" 1782","line":"                                G += T1;"},
{"lineNum":" 1783","line":"                            } else if (z_image > hz) {"},
{"lineNum":" 1784","line":"                                r1 = (sqrt(z_image * z_image + rr) + z_image)"},
{"lineNum":" 1785","line":"                                        / (sqrt("},
{"lineNum":" 1786","line":"                                                (z_image - hz) * (z_image - hz)"},
{"lineNum":" 1787","line":"                                                        + rr) + z_image - hz);"},
{"lineNum":" 1788","line":"                                T1 = (hz - z_image) * log(r1);"},
{"lineNum":" 1789","line":"                                r2 = (sqrt((z_image + hz) * (z_image + hz) + rr)"},
{"lineNum":" 1790","line":"                                        + z_image + hz)"},
{"lineNum":" 1791","line":"                                        / (sqrt(z_image * z_image + rr)"},
{"lineNum":" 1792","line":"                                                + z_image);"},
{"lineNum":" 1793","line":"                                T2 = (hz + z_image) * log(r2);"},
{"lineNum":" 1794","line":"                                G += T1 + T2;"},
{"lineNum":" 1795","line":"                            } else {"},
{"lineNum":" 1796","line":"                                throw std::runtime_error("},
{"lineNum":" 1797","line":"                                        \"Space_charge_3d_open_hockney::get_green_fn2 error2\");"},
{"lineNum":" 1798","line":"                            }"},
{"lineNum":" 1799","line":""},
{"lineNum":" 1800","line":"                        }"},
{"lineNum":" 1801","line":"                    }"},
{"lineNum":" 1802","line":"                }"},
{"lineNum":" 1803","line":""},
{"lineNum":" 1804","line":"                G2->get_grid_points()[iz][iy][ix] = G;"},
{"lineNum":" 1805","line":"                // three mirror images"},
{"lineNum":" 1806","line":"                if (miy < doubled_grid_shape[1]) {"},
{"lineNum":" 1807","line":"                    G2->get_grid_points()[iz][miy][ix] = G;"},
{"lineNum":" 1808","line":"                    if (mix < doubled_grid_shape[2]) {"},
{"lineNum":" 1809","line":"                        G2->get_grid_points()[iz][miy][mix] = G;"},
{"lineNum":" 1810","line":"                    }"},
{"lineNum":" 1811","line":"                }"},
{"lineNum":" 1812","line":"                if (mix < doubled_grid_shape[2]) {"},
{"lineNum":" 1813","line":"                    G2->get_grid_points()[iz][iy][mix] = G;"},
{"lineNum":" 1814","line":"                }"},
{"lineNum":" 1815","line":"            }"},
{"lineNum":" 1816","line":"        }"},
{"lineNum":" 1817","line":"    }"},
{"lineNum":" 1818","line":""},
{"lineNum":" 1819","line":"    G2->set_normalization(1.0 / (hz * hz));"},
{"lineNum":" 1820","line":""},
{"lineNum":" 1821","line":"    return G2;"},
{"lineNum":" 1822","line":"}"},
{"lineNum":" 1823","line":""},
{"lineNum":" 1824","line":"Distributed_rectangular_grid_sptr"},
{"lineNum":" 1825","line":"Space_charge_3d_open_hockney::get_scalar_field2("},
{"lineNum":" 1826","line":"        Distributed_rectangular_grid & charge_density2,"},
{"lineNum":" 1827","line":"        Distributed_rectangular_grid & green_fn2)"},
{"lineNum":" 1828","line":"{"},
{"lineNum":" 1829","line":"    std::vector<int > cshape("},
{"lineNum":" 1830","line":"            distributed_fft3d_sptr->get_padded_shape_complex());"},
{"lineNum":" 1831","line":"    int lower = distributed_fft3d_sptr->get_lower();"},
{"lineNum":" 1832","line":"    int upper = distributed_fft3d_sptr->get_upper();"},
{"lineNum":" 1833","line":""},
{"lineNum":" 1834","line":"    fftw_complex * rho2hat = (fftw_complex*)fftw_malloc("},
{"lineNum":" 1835","line":"        sizeof(fftw_complex)*(upper-lower)*cshape[1]*cshape[2]);"},
{"lineNum":" 1836","line":"    fftw_complex * G2hat   = (fftw_complex*)fftw_malloc("},
{"lineNum":" 1837","line":"        sizeof(fftw_complex)*(upper-lower)*cshape[1]*cshape[2]);"},
{"lineNum":" 1838","line":"    fftw_complex * phi2hat = (fftw_complex*)fftw_malloc("},
{"lineNum":" 1839","line":"        sizeof(fftw_complex)*(upper-lower)*cshape[1]*cshape[2]);"},
{"lineNum":" 1840","line":""},
{"lineNum":" 1841","line":"    distributed_fft3d_sptr->transform(charge_density2.get_grid_points(), rho2hat);"},
{"lineNum":" 1842","line":"    distributed_fft3d_sptr->transform(green_fn2.get_grid_points(), G2hat);"},
{"lineNum":" 1843","line":""},
{"lineNum":" 1844","line":"    #pragma omp parallel for"},
{"lineNum":" 1845","line":"    for (int i = lower; i < upper; ++i) {"},
{"lineNum":" 1846","line":"        for (int j = 0; j < cshape[1]; ++j) {"},
{"lineNum":" 1847","line":"            for (int k = 0; k < cshape[2]; ++k) {"},
{"lineNum":" 1848","line":"                int idx = (i-lower)*cshape[1]*cshape[2] + j*cshape[2] + k;"},
{"lineNum":" 1849","line":"                phi2hat[idx][0] = rho2hat[idx][0] * G2hat[idx][0] - rho2hat[idx][1] * G2hat[idx][1];"},
{"lineNum":" 1850","line":"                phi2hat[idx][1] = rho2hat[idx][0] * G2hat[idx][1] + rho2hat[idx][1] * G2hat[idx][0];"},
{"lineNum":" 1851","line":"            }"},
{"lineNum":" 1852","line":"        }"},
{"lineNum":" 1853","line":"    }"},
{"lineNum":" 1854","line":""},
{"lineNum":" 1855","line":"    double hx, hy, hz;"},
{"lineNum":" 1856","line":"    hx = domain_sptr->get_cell_size()[2];"},
{"lineNum":" 1857","line":"    hy = domain_sptr->get_cell_size()[1];"},
{"lineNum":" 1858","line":"    hz = domain_sptr->get_cell_size()[0];"},
{"lineNum":" 1859","line":"    double normalization = hx * hy * hz; // volume element in integral"},
{"lineNum":" 1860","line":"    normalization *= 1.0 / (4.0 * pi * epsilon0);"},
{"lineNum":" 1861","line":""},
{"lineNum":" 1862","line":"    Distributed_rectangular_grid_sptr phi2("},
{"lineNum":" 1863","line":"            new Distributed_rectangular_grid(doubled_domain_sptr, lower, upper,"},
{"lineNum":" 1864","line":"                    distributed_fft3d_sptr->get_padded_shape_real(),"},
{"lineNum":" 1865","line":"                    comm2_sptr));"},
{"lineNum":" 1866","line":"    distributed_fft3d_sptr->inv_transform(phi2hat, phi2->get_grid_points());"},
{"lineNum":" 1867","line":""},
{"lineNum":" 1868","line":"    normalization *= charge_density2.get_normalization();"},
{"lineNum":" 1869","line":"    normalization *= green_fn2.get_normalization();"},
{"lineNum":" 1870","line":"    normalization *= distributed_fft3d_sptr->get_roundtrip_normalization();"},
{"lineNum":" 1871","line":"    phi2->set_normalization(normalization);"},
{"lineNum":" 1872","line":""},
{"lineNum":" 1873","line":"    fftw_free(rho2hat);"},
{"lineNum":" 1874","line":"    fftw_free(G2hat);"},
{"lineNum":" 1875","line":"    fftw_free(phi2hat);"},
{"lineNum":" 1876","line":""},
{"lineNum":" 1877","line":"    return phi2;"},
{"lineNum":" 1878","line":"}"},
{"lineNum":" 1879","line":""},
{"lineNum":" 1880","line":"Distributed_rectangular_grid_sptr"},
{"lineNum":" 1881","line":"Space_charge_3d_open_hockney::extract_scalar_field("},
{"lineNum":" 1882","line":"        Distributed_rectangular_grid const & phi2)"},
{"lineNum":" 1883","line":"{"},
{"lineNum":" 1884","line":"    Distributed_rectangular_grid_sptr phi("},
{"lineNum":" 1885","line":"            new Distributed_rectangular_grid(domain_sptr, real_doubled_lower,"},
{"lineNum":" 1886","line":"                    real_doubled_upper, comm1_sptr));"},
{"lineNum":" 1887","line":""},
{"lineNum":" 1888","line":"    #pragma omp parallel for"},
{"lineNum":" 1889","line":"    for (int i = real_doubled_lower; i < real_doubled_upper; ++i) {"},
{"lineNum":" 1890","line":"        for (int j = 0; j < grid_shape[1]; ++j) {"},
{"lineNum":" 1891","line":"            for (int k = 0; k < grid_shape[2]; ++k) {"},
{"lineNum":" 1892","line":"                phi->get_grid_points()[i][j][k] ="},
{"lineNum":" 1893","line":"                        phi2.get_grid_points()[i][j][k];"},
{"lineNum":" 1894","line":"            }"},
{"lineNum":" 1895","line":"        }"},
{"lineNum":" 1896","line":"    }"},
{"lineNum":" 1897","line":"    phi->set_normalization(phi2.get_normalization());"},
{"lineNum":" 1898","line":"    if (comm1_sptr->has_this_rank()) {"},
{"lineNum":" 1899","line":"        phi->fill_guards();"},
{"lineNum":" 1900","line":"    }"},
{"lineNum":" 1901","line":"    return phi;"},
{"lineNum":" 1902","line":"}"},
{"lineNum":" 1903","line":""},
{"lineNum":" 1904","line":"Distributed_rectangular_grid_sptr"},
{"lineNum":" 1905","line":"Space_charge_3d_open_hockney::get_electric_field_component("},
{"lineNum":" 1906","line":"        Distributed_rectangular_grid const& phi, int component)"},
{"lineNum":" 1907","line":"{"},
{"lineNum":" 1908","line":"    int index;"},
{"lineNum":" 1909","line":"    if (component == 0) {"},
{"lineNum":" 1910","line":"        index = 2;"},
{"lineNum":" 1911","line":"    } else if (component == 1) {"},
{"lineNum":" 1912","line":"        index = 1;"},
{"lineNum":" 1913","line":"    } else if (component == 2) {"},
{"lineNum":" 1914","line":"        index = 0;"},
{"lineNum":" 1915","line":"    } else {"},
{"lineNum":" 1916","line":"        throw std::runtime_error("},
{"lineNum":" 1917","line":"                \"Space_charge_3d_open_hockney::get_electric_field_component: component must be 0, 1 or 2\");"},
{"lineNum":" 1918","line":"    }"},
{"lineNum":" 1919","line":""},
{"lineNum":" 1920","line":"    Distributed_rectangular_grid_sptr En("},
{"lineNum":" 1921","line":"            new Distributed_rectangular_grid(domain_sptr, phi.get_lower(),"},
{"lineNum":" 1922","line":"                    phi.get_upper(), comm1_sptr));"},
{"lineNum":" 1923","line":"    MArray3d_ref En_a(En->get_grid_points());"},
{"lineNum":" 1924","line":"    MArray3d_ref phi_a(phi.get_grid_points());"},
{"lineNum":" 1925","line":"    int lower_limit, upper_limit;"},
{"lineNum":" 1926","line":"    if (index == 0) {"},
{"lineNum":" 1927","line":"        lower_limit = En->get_lower_guard();"},
{"lineNum":" 1928","line":"        upper_limit = En->get_upper_guard();"},
{"lineNum":" 1929","line":"    } else {"},
{"lineNum":" 1930","line":"        lower_limit = 0;"},
{"lineNum":" 1931","line":"        upper_limit = domain_sptr->get_grid_shape()[index];"},
{"lineNum":" 1932","line":"    }"},
{"lineNum":" 1933","line":"    double cell_size = domain_sptr->get_cell_size()[index];"},
{"lineNum":" 1934","line":"    boost::array<MArray3d::index, 3 > center, left, right;"},
{"lineNum":" 1935","line":""},
{"lineNum":" 1936","line":"    #pragma omp parallel for private(center, left, right)"},
{"lineNum":" 1937","line":"    for (int i = En->get_lower(); i < En->get_upper(); ++i) {"},
{"lineNum":" 1938","line":"        left[0] = i;"},
{"lineNum":" 1939","line":"        center[0] = i;"},
{"lineNum":" 1940","line":"        right[0] = i;"},
{"lineNum":" 1941","line":"        for (int j = 0; j < domain_sptr->get_grid_shape()[1]; ++j) {"},
{"lineNum":" 1942","line":"            left[1] = j;"},
{"lineNum":" 1943","line":"            center[1] = j;"},
{"lineNum":" 1944","line":"            right[1] = j;"},
{"lineNum":" 1945","line":"            for (int k = 0; k < domain_sptr->get_grid_shape()[2]; ++k) {"},
{"lineNum":" 1946","line":"                left[2] = k;"},
{"lineNum":" 1947","line":"                center[2] = k;"},
{"lineNum":" 1948","line":"                right[2] = k;"},
{"lineNum":" 1949","line":""},
{"lineNum":" 1950","line":"                double delta;"},
{"lineNum":" 1951","line":"                if (center[index] == lower_limit) {"},
{"lineNum":" 1952","line":"                    right[index] = center[index] + 1;"},
{"lineNum":" 1953","line":"                    delta = cell_size;"},
{"lineNum":" 1954","line":"                } else if (center[index] == upper_limit - 1) {"},
{"lineNum":" 1955","line":"                    left[index] = center[index] - 1;"},
{"lineNum":" 1956","line":"                    delta = cell_size;"},
{"lineNum":" 1957","line":"                } else {"},
{"lineNum":" 1958","line":"                    right[index] = center[index] + 1;"},
{"lineNum":" 1959","line":"                    left[index] = center[index] - 1;"},
{"lineNum":" 1960","line":"                    delta = 2.0 * cell_size;"},
{"lineNum":" 1961","line":"                }"},
{"lineNum":" 1962","line":"                // $\\vec{E} = - \\grad \\phi$"},
{"lineNum":" 1963","line":"                En_a(center) = -(phi_a(right) - phi_a(left)) / delta;"},
{"lineNum":" 1964","line":"            }"},
{"lineNum":" 1965","line":"        }"},
{"lineNum":" 1966","line":"    }"},
{"lineNum":" 1967","line":"    En->set_normalization(phi.get_normalization());"},
{"lineNum":" 1968","line":"    return En;"},
{"lineNum":" 1969","line":"}"},
{"lineNum":" 1970","line":""},
{"lineNum":" 1971","line":"Rectangular_grid_sptr"},
{"lineNum":" 1972","line":"Space_charge_3d_open_hockney::get_global_electric_field_component_gatherv_bcast("},
{"lineNum":" 1973","line":"        Distributed_rectangular_grid const& dist_field)"},
{"lineNum":" 1974","line":"{"},
{"lineNum":" 1975","line":"    Rectangular_grid_sptr global_field(new Rectangular_grid(domain_sptr));"},
{"lineNum":" 1976","line":"    const int root = 0;"},
{"lineNum":" 1977","line":"    int error;"},
{"lineNum":" 1978","line":"    if (comm1_sptr->has_this_rank()) {"},
{"lineNum":" 1979","line":"        int rank = comm1_sptr->get_rank();"},
{"lineNum":" 1980","line":"        error ="},
{"lineNum":" 1981","line":"                MPI_Gatherv("},
{"lineNum":" 1982","line":"                        (void *) (dist_field.get_grid_points().origin()"},
{"lineNum":" 1983","line":"                                + lowers1[rank]), lengths1[rank], MPI_DOUBLE,"},
{"lineNum":" 1984","line":"                        (void*) global_field->get_grid_points().origin(),"},
{"lineNum":" 1985","line":"                        &lengths1[0], &lowers1[0], MPI_DOUBLE, root,"},
{"lineNum":" 1986","line":"                        comm1_sptr->get());"},
{"lineNum":" 1987","line":"        if (error != MPI_SUCCESS) {"},
{"lineNum":" 1988","line":"            throw std::runtime_error("},
{"lineNum":" 1989","line":"                    \"MPI error in Space_charge_3d_open_hockney(MPI_Gatherv)\");"},
{"lineNum":" 1990","line":"        }"},
{"lineNum":" 1991","line":""},
{"lineNum":" 1992","line":"    }"},
{"lineNum":" 1993","line":"    int total_length = grid_shape[0] * grid_shape[1] * grid_shape[2];"},
{"lineNum":" 1994","line":"    error = MPI_Bcast(global_field->get_grid_points().origin(), total_length,"},
{"lineNum":" 1995","line":"            MPI_DOUBLE, root, comm2_sptr->get());"},
{"lineNum":" 1996","line":"    if (error != MPI_SUCCESS) {"},
{"lineNum":" 1997","line":"        throw std::runtime_error("},
{"lineNum":" 1998","line":"                \"MPI error in Space_charge_3d_open_hockney(MPI_Bcast)\");"},
{"lineNum":" 1999","line":"    }"},
{"lineNum":" 2000","line":"    global_field->set_normalization(dist_field.get_normalization());"},
{"lineNum":" 2001","line":"    return global_field;"},
{"lineNum":" 2002","line":"}"},
{"lineNum":" 2003","line":""},
{"lineNum":" 2004","line":"Rectangular_grid_sptr"},
{"lineNum":" 2005","line":"Space_charge_3d_open_hockney::get_global_electric_field_component_allgatherv("},
{"lineNum":" 2006","line":"        Distributed_rectangular_grid const& dist_field)"},
{"lineNum":" 2007","line":"{"},
{"lineNum":" 2008","line":"    Rectangular_grid_sptr global_field(new Rectangular_grid(domain_sptr));"},
{"lineNum":" 2009","line":"    std::vector<int > lowers12(comm2_sptr->get_size()); // lowers1 on comm2"},
{"lineNum":" 2010","line":"    std::vector<int > lengths12(comm2_sptr->get_size()); // lengths1 on comm2"},
{"lineNum":" 2011","line":"    int size1 = lowers1.size();"},
{"lineNum":" 2012","line":"    for (int rank = 0; rank < comm2_sptr->get_size(); ++rank) {"},
{"lineNum":" 2013","line":"        if (rank < size1) {"},
{"lineNum":" 2014","line":"            lowers12[rank] = lowers1[rank];"},
{"lineNum":" 2015","line":"            lengths12[rank] = lengths1[rank];"},
{"lineNum":" 2016","line":"        } else {"},
{"lineNum":" 2017","line":"            lowers12[rank] = 0;"},
{"lineNum":" 2018","line":"            lengths12[rank] = 0;"},
{"lineNum":" 2019","line":"        }"},
{"lineNum":" 2020","line":"    }"},
{"lineNum":" 2021","line":"    int rank = comm2_sptr->get_rank();"},
{"lineNum":" 2022","line":"    int error = MPI_Allgatherv("},
{"lineNum":" 2023","line":"            (void *) (dist_field.get_grid_points().origin() + lowers12[rank]),"},
{"lineNum":" 2024","line":"            lengths12[rank], MPI_DOUBLE,"},
{"lineNum":" 2025","line":"            (void*) global_field->get_grid_points().origin(), &lengths12[0],"},
{"lineNum":" 2026","line":"            &lowers12[0], MPI_DOUBLE, comm2_sptr->get());"},
{"lineNum":" 2027","line":"    if (error != MPI_SUCCESS) {"},
{"lineNum":" 2028","line":"        throw std::runtime_error("},
{"lineNum":" 2029","line":"                \"MPI error in Space_charge_3d_open_hockney(MPI_Allgatherv)\");"},
{"lineNum":" 2030","line":"    }"},
{"lineNum":" 2031","line":"    global_field->set_normalization(dist_field.get_normalization());"},
{"lineNum":" 2032","line":"    return global_field;"},
{"lineNum":" 2033","line":"}"},
{"lineNum":" 2034","line":""},
{"lineNum":" 2035","line":"Rectangular_grid_sptr"},
{"lineNum":" 2036","line":"Space_charge_3d_open_hockney::get_global_electric_field_component_allreduce("},
{"lineNum":" 2037","line":"        Distributed_rectangular_grid const& dist_field)"},
{"lineNum":" 2038","line":"{"},
{"lineNum":" 2039","line":"    Rectangular_grid_sptr global_field(new Rectangular_grid(domain_sptr));"},
{"lineNum":" 2040","line":"    for (int i = 0; i < grid_shape[0]; ++i) {"},
{"lineNum":" 2041","line":"        for (int j = 0; j < grid_shape[1]; ++j) {"},
{"lineNum":" 2042","line":"            for (int k = 0; k < grid_shape[2]; ++k) {"},
{"lineNum":" 2043","line":"                global_field->get_grid_points()[i][j][k] = 0.0;"},
{"lineNum":" 2044","line":"            }"},
{"lineNum":" 2045","line":"        }"},
{"lineNum":" 2046","line":"    }"},
{"lineNum":" 2047","line":""},
{"lineNum":" 2048","line":"    std::memset( (void*)global_field->get_grid_points().data(), 0,"},
{"lineNum":" 2049","line":"            global_field->get_grid_points().num_elements()*sizeof(double) );"},
{"lineNum":" 2050","line":""},
{"lineNum":" 2051","line":"    #pragma omp parallel for"},
{"lineNum":" 2052","line":"    for (int i = dist_field.get_lower();"},
{"lineNum":" 2053","line":"            i < std::min(grid_shape[0], dist_field.get_upper()); ++i) {"},
{"lineNum":" 2054","line":"        for (int j = 0; j < grid_shape[1]; ++j) {"},
{"lineNum":" 2055","line":"            for (int k = 0; k < grid_shape[2]; ++k) {"},
{"lineNum":" 2056","line":"                global_field->get_grid_points()[i][j][k] ="},
{"lineNum":" 2057","line":"                        dist_field.get_grid_points()[i][j][k];"},
{"lineNum":" 2058","line":"            }"},
{"lineNum":" 2059","line":"        }"},
{"lineNum":" 2060","line":"    }"},
{"lineNum":" 2061","line":""},
{"lineNum":" 2062","line":"    int error = MPI_Allreduce(MPI_IN_PLACE,"},
{"lineNum":" 2063","line":"            (void*) global_field->get_grid_points().origin(),"},
{"lineNum":" 2064","line":"            global_field->get_grid_points().num_elements(), MPI_DOUBLE, MPI_SUM,"},
{"lineNum":" 2065","line":"            comm2_sptr->get());"},
{"lineNum":" 2066","line":"    if (error != MPI_SUCCESS) {"},
{"lineNum":" 2067","line":"        throw std::runtime_error("},
{"lineNum":" 2068","line":"                \"MPI error in Space_charge_3d_open_hockney(MPI_Allreduce in get_global_electric_field_component_allreduce)\");"},
{"lineNum":" 2069","line":"    }"},
{"lineNum":" 2070","line":"    global_field->set_normalization(dist_field.get_normalization());"},
{"lineNum":" 2071","line":"    return global_field;"},
{"lineNum":" 2072","line":"}"},
{"lineNum":" 2073","line":""},
{"lineNum":" 2074","line":"Rectangular_grid_sptr"},
{"lineNum":" 2075","line":"Space_charge_3d_open_hockney::get_global_electric_field_component("},
{"lineNum":" 2076","line":"        Distributed_rectangular_grid const& dist_field)"},
{"lineNum":" 2077","line":"{"},
{"lineNum":" 2078","line":"    Rectangular_grid_sptr global_electric_field_sptr;"},
{"lineNum":" 2079","line":"    if (e_field_comm==gatherv_bcast) {"},
{"lineNum":" 2080","line":"        global_electric_field_sptr=get_global_electric_field_component_gatherv_bcast(dist_field);"},
{"lineNum":" 2081","line":"    }"},
{"lineNum":" 2082","line":"    else if(e_field_comm==allgatherv){"},
{"lineNum":" 2083","line":"        global_electric_field_sptr=get_global_electric_field_component_allgatherv(dist_field);"},
{"lineNum":" 2084","line":"    }"},
{"lineNum":" 2085","line":"    else if(e_field_comm==e_field_allreduce){"},
{"lineNum":" 2086","line":"        global_electric_field_sptr=get_global_electric_field_component_allreduce(dist_field);"},
{"lineNum":" 2087","line":"    }"},
{"lineNum":" 2088","line":"    else throw runtime_error("},
{"lineNum":" 2089","line":"                 \"Space_charge_3d_open_hockney: invalid e_field_comm\");"},
{"lineNum":" 2090","line":""},
{"lineNum":" 2091","line":""},
{"lineNum":" 2092","line":"//AM!  make sure the field is zero at the edge of the grid"},
{"lineNum":" 2093","line":"// THIS toghether with zero charge distribution at the edge of the grid is essential for a conservative approximation"},
{"lineNum":" 2094","line":"    MArray3d_ref grid_points(global_electric_field_sptr->get_grid_points());"},
{"lineNum":" 2095","line":"    if (!global_electric_field_sptr->get_domain_sptr()->is_periodic()){"},
{"lineNum":" 2096","line":"          for (int k=0; k<grid_points.shape()[2];++k){"},
{"lineNum":" 2097","line":"              for (int j=0; j<grid_points.shape()[1];++j){"},
{"lineNum":" 2098","line":"                  grid_points[0][j][k]=0.;"},
{"lineNum":" 2099","line":"                  grid_points[grid_points.shape()[0]-1][j][k]=0.;"},
{"lineNum":" 2100","line":"              }"},
{"lineNum":" 2101","line":"          }"},
{"lineNum":" 2102","line":"    }"},
{"lineNum":" 2103","line":"    for (int i=0; i<grid_points.shape()[0];++i){"},
{"lineNum":" 2104","line":"        for (int j=0; j<grid_points.shape()[1];++j){"},
{"lineNum":" 2105","line":"            grid_points[i][j][0]=0.;"},
{"lineNum":" 2106","line":"            grid_points[i][j][grid_points.shape()[2]-1]=0.;"},
{"lineNum":" 2107","line":""},
{"lineNum":" 2108","line":"        }"},
{"lineNum":" 2109","line":"    }"},
{"lineNum":" 2110","line":""},
{"lineNum":" 2111","line":"    for (int i=0; i<grid_points.shape()[0];++i){"},
{"lineNum":" 2112","line":"        for (int k=0; k<grid_points.shape()[2];++k){"},
{"lineNum":" 2113","line":"            grid_points[i][0][k]=0.;"},
{"lineNum":" 2114","line":"            grid_points[i][grid_points.shape()[1]-1][k]=0.;"},
{"lineNum":" 2115","line":"        }"},
{"lineNum":" 2116","line":"    }"},
{"lineNum":" 2117","line":"    return global_electric_field_sptr;"},
{"lineNum":" 2118","line":"}"},
{"lineNum":" 2119","line":""},
{"lineNum":" 2120","line":"void"},
{"lineNum":" 2121","line":"Space_charge_3d_open_hockney::set_kick_scale(double ks)"},
{"lineNum":" 2122","line":"{"},
{"lineNum":" 2123","line":"    kick_scale = ks;"},
{"lineNum":" 2124","line":"}"},
{"lineNum":" 2125","line":""},
{"lineNum":" 2126","line":"double"},
{"lineNum":" 2127","line":"Space_charge_3d_open_hockney::get_kick_scale() const"},
{"lineNum":" 2128","line":"{"},
{"lineNum":" 2129","line":"    return kick_scale;"},
{"lineNum":" 2130","line":"}"},
{"lineNum":" 2131","line":""},
{"lineNum":" 2132","line":"void"},
{"lineNum":" 2133","line":"Space_charge_3d_open_hockney::do_diagnostics(Rectangular_grid const& En, int component, double time_step, Step & step,"},
{"lineNum":" 2134","line":"                                          Bunch & bunch)"},
{"lineNum":" 2135","line":"{"},
{"lineNum":" 2136","line":"   if (have_diagnostics) {"},
{"lineNum":" 2137","line":"      if ((component==0) || (component==1)){"},
{"lineNum":" 2138","line":"         double step_beta=step.get_betas()[component];"},
{"lineNum":" 2139","line":"         for (Diagnostics_space_charge_3d_hockneys::const_iterator d_it = diagnostics_list.begin();"},
{"lineNum":" 2140","line":"            d_it != diagnostics_list.end(); ++d_it){"},
{"lineNum":" 2141","line":"            if (bunch.is_bucket_index_assigned()){"},
{"lineNum":" 2142","line":"                if ((*d_it)->get_bunch().get_bucket_index()==bunch.get_bucket_index()){"},
{"lineNum":" 2143","line":"                    (*d_it)->update(bunch, En, component, time_step, step_beta);"},
{"lineNum":" 2144","line":"                    if (component==1) (*d_it)->write();"},
{"lineNum":" 2145","line":"                }"},
{"lineNum":" 2146","line":"            }"},
{"lineNum":" 2147","line":"            else{"},
{"lineNum":" 2148","line":"                    (*d_it)->update(bunch, En, component, time_step, step_beta);"},
{"lineNum":" 2149","line":"                    if (component==1) (*d_it)->write();"},
{"lineNum":" 2150","line":"            }"},
{"lineNum":" 2151","line":"         }"},
{"lineNum":" 2152","line":"      }"},
{"lineNum":" 2153","line":"   }"},
{"lineNum":" 2154","line":""},
{"lineNum":" 2155","line":"}"},
{"lineNum":" 2156","line":""},
{"lineNum":" 2157","line":""},
{"lineNum":" 2158","line":"void"},
{"lineNum":" 2159","line":"Space_charge_3d_open_hockney::apply_kick(Bunch & bunch,"},
{"lineNum":" 2160","line":"        Rectangular_grid const& En, double delta_t, int component)"},
{"lineNum":" 2161","line":"{"},
{"lineNum":" 2162","line":""},
{"lineNum":" 2163","line":""},
{"lineNum":" 2164","line":"  //AM: kicks  in the z_lab frame"},
{"lineNum":" 2165","line":" //Delta p_x&=& F_x \\Delta t&=& - q \\frac{1}{\\gamma^2} \\frac{\\partial \\Phi\'}{\\partial x} \\Delta t=q \\frac{1}{\\beta \\gamma^2} E_{grid~x} \\Delta t\\\\"},
{"lineNum":" 2166","line":" //Delta E &= & q E_z \\Delta s&=& q \\frac{1}{\\gamma^2 \\beta} \\frac{\\partial \\Phi\'}{\\partial ct} \\beta c\\Delta t=-q \\frac{c}{\\beta \\gamma^2 }E_{grid~z} \\Delta t\\\\"},
{"lineNum":" 2167","line":" // 1/beta factor in E_grid from charge deposition on (x,y,cdt) coordinates grid,  \\Phi\'=\\frac{1}{\\beta}\\Phi_{grid}"},
{"lineNum":" 2168","line":""},
{"lineNum":" 2169","line":""},
{"lineNum":" 2170","line":""},
{"lineNum":" 2171","line":""},
{"lineNum":" 2172","line":"    bunch.convert_to_state(Bunch::fixed_z_lab);"},
{"lineNum":" 2173","line":"    double q = bunch.get_particle_charge() * pconstants::e; // [C]"},
{"lineNum":" 2174","line":"    double gamma=bunch.get_reference_particle().get_gamma();"},
{"lineNum":" 2175","line":"    double beta=bunch.get_reference_particle().get_beta();"},
{"lineNum":" 2176","line":"// unit_conversion: [kg m/s] to [Gev/c]"},
{"lineNum":" 2177","line":"    double unit_conversion = pconstants::c / (1.0e9 * pconstants::e);"},
{"lineNum":" 2178","line":"// scaled p = p/p_ref"},
{"lineNum":" 2179","line":"    double p_ref=bunch.get_reference_particle().get_momentum();"},
{"lineNum":" 2180","line":"    double factor = kick_scale * unit_conversion * q * delta_t* En.get_normalization()/"},
{"lineNum":" 2181","line":"            (p_ref*gamma*gamma*beta); // transverse kicks"},
{"lineNum":" 2182","line":""},
{"lineNum":" 2183","line":""},
{"lineNum":" 2184","line":"    int ps_component = 2 * component + 1;"},
{"lineNum":" 2185","line":"    Rectangular_grid_domain & domain(*En.get_domain_sptr());"},
{"lineNum":" 2186","line":"    MArray3d_ref grid_points(En.get_grid_points());"},
{"lineNum":" 2187","line":""},
{"lineNum":" 2188","line":"    if (component==2)"},
{"lineNum":" 2189","line":"    {"},
{"lineNum":" 2190","line":"        factor *= -p_ref;"},
{"lineNum":" 2191","line":"        double m = bunch.get_mass();"},
{"lineNum":" 2192","line":""},
{"lineNum":" 2193","line":"        #pragma omp parallel for"},
{"lineNum":" 2194","line":"        for (int part = 0; part < bunch.get_local_num(); ++part)"},
{"lineNum":" 2195","line":"        {"},
{"lineNum":" 2196","line":"            double x = bunch.get_local_particles()[part][Bunch::x];"},
{"lineNum":" 2197","line":"            double y = bunch.get_local_particles()[part][Bunch::y];"},
{"lineNum":" 2198","line":"            double z = bunch.get_local_particles()[part][Bunch::z];"},
{"lineNum":" 2199","line":""},
{"lineNum":" 2200","line":"            double grid_val = interpolate_rectangular_zyx(x, y, z, domain, grid_points);"},
{"lineNum":" 2201","line":""},
{"lineNum":" 2202","line":"            double p = p_ref +bunch.get_local_particles()[part][Bunch::dpop] * p_ref;"},
{"lineNum":" 2203","line":"            double Eoc_i = std::sqrt(p * p + m * m);"},
{"lineNum":" 2204","line":"            double Eoc_f = Eoc_i + factor * grid_val;"},
{"lineNum":" 2205","line":"            double delta_dpop = (std::sqrt(Eoc_f*Eoc_f-m*m) - std::sqrt(Eoc_i*Eoc_i-m*m))/p_ref;"},
{"lineNum":" 2206","line":""},
{"lineNum":" 2207","line":"            bunch.get_local_particles()[part][ps_component] += delta_dpop;"},
{"lineNum":" 2208","line":"        }"},
{"lineNum":" 2209","line":""},
{"lineNum":" 2210","line":"        // spectator particles"},
{"lineNum":" 2211","line":"        #pragma omp parallel for"},
{"lineNum":" 2212","line":"        for (int part = 0; part < bunch.get_local_spectator_num(); ++part)"},
{"lineNum":" 2213","line":"        {"},
{"lineNum":" 2214","line":"            double x = bunch.get_local_spectator_particles()[part][Bunch::x];"},
{"lineNum":" 2215","line":"            double y = bunch.get_local_spectator_particles()[part][Bunch::y];"},
{"lineNum":" 2216","line":"            double z = bunch.get_local_spectator_particles()[part][Bunch::z];"},
{"lineNum":" 2217","line":""},
{"lineNum":" 2218","line":"            double grid_val = interpolate_rectangular_zyx(x, y, z, domain, grid_points);"},
{"lineNum":" 2219","line":""},
{"lineNum":" 2220","line":"            double p = p_ref + bunch.get_local_spectator_particles()[part][Bunch::dpop] * p_ref;"},
{"lineNum":" 2221","line":"            double Eoc_i = std::sqrt(p * p + m * m);"},
{"lineNum":" 2222","line":"            double Eoc_f = Eoc_i + factor * grid_val;"},
{"lineNum":" 2223","line":"            double delta_dpop = (std::sqrt(Eoc_f*Eoc_f-m*m) - std::sqrt(Eoc_i*Eoc_i-m*m))/p_ref;"},
{"lineNum":" 2224","line":""},
{"lineNum":" 2225","line":"            bunch.get_local_spectator_particles()[part][ps_component] += delta_dpop;"},
{"lineNum":" 2226","line":"        }"},
{"lineNum":" 2227","line":"    }"},
{"lineNum":" 2228","line":"    else"},
{"lineNum":" 2229","line":"    {"},
{"lineNum":" 2230","line":"        #pragma omp parallel for"},
{"lineNum":" 2231","line":"        for (int part = 0; part < bunch.get_local_num(); ++part)"},
{"lineNum":" 2232","line":"        {"},
{"lineNum":" 2233","line":"              double x = bunch.get_local_particles()[part][Bunch::x];"},
{"lineNum":" 2234","line":"              double y = bunch.get_local_particles()[part][Bunch::y];"},
{"lineNum":" 2235","line":"              double z = bunch.get_local_particles()[part][Bunch::z];"},
{"lineNum":" 2236","line":""},
{"lineNum":" 2237","line":"              double grid_val = interpolate_rectangular_zyx(x, y, z, domain, grid_points);"},
{"lineNum":" 2238","line":""},
{"lineNum":" 2239","line":"              bunch.get_local_particles()[part][ps_component] += factor * grid_val;"},
{"lineNum":" 2240","line":"        }"},
{"lineNum":" 2241","line":""},
{"lineNum":" 2242","line":"        // spectator particles"},
{"lineNum":" 2243","line":"        #pragma omp parallel for"},
{"lineNum":" 2244","line":"        for (int part = 0; part < bunch.get_local_spectator_num(); ++part)"},
{"lineNum":" 2245","line":"        {"},
{"lineNum":" 2246","line":"              double x = bunch.get_local_spectator_particles()[part][Bunch::x];"},
{"lineNum":" 2247","line":"              double y = bunch.get_local_spectator_particles()[part][Bunch::y];"},
{"lineNum":" 2248","line":"              double z = bunch.get_local_spectator_particles()[part][Bunch::z];"},
{"lineNum":" 2249","line":""},
{"lineNum":" 2250","line":"              double grid_val = interpolate_rectangular_zyx(x, y, z, domain, grid_points);"},
{"lineNum":" 2251","line":""},
{"lineNum":" 2252","line":"              bunch.get_local_spectator_particles()[part][ps_component] += factor * grid_val;"},
{"lineNum":" 2253","line":"        }"},
{"lineNum":" 2254","line":"    }"},
{"lineNum":" 2255","line":"}"},
{"lineNum":" 2256","line":""},
{"lineNum":" 2257","line":"void"},
{"lineNum":" 2258","line":"Space_charge_3d_open_hockney::apply(Bunch & bunch, double time_step,"},
{"lineNum":" 2259","line":"        Step & step, int verbosity, Logger & logger)"},
{"lineNum":" 2260","line":"{"},
{"lineNum":" 2261","line":"    if (bunch.get_total_num() > 1) {"},
{"lineNum":" 2262","line":"        double t = simple_timer_current();"},
{"lineNum":" 2263","line":"        setup_communication(bunch.get_comm_sptr());"},
{"lineNum":" 2264","line":"        int comm_compare;"},
{"lineNum":" 2265","line":"        MPI_Comm_compare(comm2_sptr->get(), bunch.get_comm().get(),"},
{"lineNum":" 2266","line":"                &comm_compare);"},
{"lineNum":" 2267","line":"        if ((comm_compare == MPI_UNEQUAL)"},
{"lineNum":" 2268","line":"                && (charge_density_comm != charge_allreduce)) {"},
{"lineNum":" 2269","line":"            throw std::runtime_error("},
{"lineNum":" 2270","line":"                    \"Space_charge_3d_open_hockney: set_charge_density_comm(charge_allreduce) required when comm != bunch comm\");"},
{"lineNum":" 2271","line":"        }"},
{"lineNum":" 2272","line":"        t = simple_timer_show(t, \"sc-setup-communication\");"},
{"lineNum":" 2273","line":""},
{"lineNum":" 2274","line":""},
{"lineNum":" 2275","line":"        bunch.convert_to_state(Bunch::fixed_z_lab);"},
{"lineNum":" 2276","line":""},
{"lineNum":" 2277","line":"        t = simple_timer_show(t, \"sc-convert-to-state\");"},
{"lineNum":" 2278","line":"        Rectangular_grid_sptr local_rho(get_local_charge_density(bunch)); // [C/m^3]"},
{"lineNum":" 2279","line":"        t = simple_timer_show(t, \"sc-get-local-rho\");"},
{"lineNum":" 2280","line":"        Distributed_rectangular_grid_sptr rho2("},
{"lineNum":" 2281","line":"                get_global_charge_density2(*local_rho, bunch.get_comm_sptr())); // [C/m^3]"},
{"lineNum":" 2282","line":"        t = simple_timer_show(t, \"sc-get-global-rho\");"},
{"lineNum":" 2283","line":"        local_rho.reset();"},
{"lineNum":" 2284","line":"        Distributed_rectangular_grid_sptr G2; // [1/m]"},
{"lineNum":" 2285","line":"        if (green_fn_type == pointlike) {"},
{"lineNum":" 2286","line":"            G2 = get_green_fn2_pointlike();"},
{"lineNum":" 2287","line":"        } else if (green_fn_type == linear) {"},
{"lineNum":" 2288","line":"            G2 = get_green_fn2_linear();"},
{"lineNum":" 2289","line":"        } else {"},
{"lineNum":" 2290","line":"            throw std::runtime_error("},
{"lineNum":" 2291","line":"                    \"Space_charge_3d_open_hockney::apply: unknown green_fn_type\");"},
{"lineNum":" 2292","line":"        }"},
{"lineNum":" 2293","line":"        t = simple_timer_show(t, \"sc-get-green-fn\");"},
{"lineNum":" 2294","line":"        Distributed_rectangular_grid_sptr phi2(get_scalar_field2(*rho2, *G2)); // [V]"},
{"lineNum":" 2295","line":"        t = simple_timer_show(t, \"sc-get-phi2\");"},
{"lineNum":" 2296","line":"        rho2.reset();"},
{"lineNum":" 2297","line":"        G2.reset();"},
{"lineNum":" 2298","line":"        Distributed_rectangular_grid_sptr phi(extract_scalar_field(*phi2));"},
{"lineNum":" 2299","line":"        t = simple_timer_show(t, \"sc-get-phi\");"},
{"lineNum":" 2300","line":"      //  bunch.periodic_sort(Bunch::z); // A.M this causes troubles"},
{"lineNum":" 2301","line":"        t = simple_timer_show(t, \"sc-sort\");"},
{"lineNum":" 2302","line":"        phi2.reset();"},
{"lineNum":" 2303","line":"        int max_component;"},
{"lineNum":" 2304","line":"        if (longitudinal_kicks) {"},
{"lineNum":" 2305","line":"            max_component = 3;"},
{"lineNum":" 2306","line":"        } else {"},
{"lineNum":" 2307","line":"            max_component = 2;"},
{"lineNum":" 2308","line":"        }"},
{"lineNum":" 2309","line":"        for (int component = 0; component < max_component; ++component) {"},
{"lineNum":" 2310","line":"            Distributed_rectangular_grid_sptr local_En("},
{"lineNum":" 2311","line":"                    get_electric_field_component(*phi, component)); // [V/m]"},
{"lineNum":" 2312","line":"            t = simple_timer_show(t, \"sc-get-local-en\");"},
{"lineNum":" 2313","line":"            Rectangular_grid_sptr En("},
{"lineNum":" 2314","line":"                    get_global_electric_field_component(*local_En)); // [V/m]"},
{"lineNum":" 2315","line":"            t = simple_timer_show(t, \"sc-get-global-en\");"},
{"lineNum":" 2316","line":"            do_diagnostics(*En,component, time_step,step, bunch);"},
{"lineNum":" 2317","line":"            apply_kick(bunch, *En, time_step, component);"},
{"lineNum":" 2318","line":"            t = simple_timer_show(t, \"sc-apply-kick\");"},
{"lineNum":" 2319","line":"        }"},
{"lineNum":" 2320","line":"    }"},
{"lineNum":" 2321","line":"}"},
{"lineNum":" 2322","line":"#endif"},
{"lineNum":" 2323","line":""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 292, "covered" : 0,};
var merged_data = [];
