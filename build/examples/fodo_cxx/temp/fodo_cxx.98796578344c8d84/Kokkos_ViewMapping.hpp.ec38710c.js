var data = {lines:[
{"lineNum":"    1","line":"/*"},
{"lineNum":"    2","line":"//@HEADER"},
{"lineNum":"    3","line":"// ************************************************************************"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"//                        Kokkos v. 3.0"},
{"lineNum":"    6","line":"//       Copyright (2020) National Technology & Engineering"},
{"lineNum":"    7","line":"//               Solutions of Sandia, LLC (NTESS)."},
{"lineNum":"    8","line":"//"},
{"lineNum":"    9","line":"// Under the terms of Contract DE-NA0003525 with NTESS,"},
{"lineNum":"   10","line":"// the U.S. Government retains certain rights in this software."},
{"lineNum":"   11","line":"//"},
{"lineNum":"   12","line":"// Redistribution and use in source and binary forms, with or without"},
{"lineNum":"   13","line":"// modification, are permitted provided that the following conditions are"},
{"lineNum":"   14","line":"// met:"},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"// 1. Redistributions of source code must retain the above copyright"},
{"lineNum":"   17","line":"// notice, this list of conditions and the following disclaimer."},
{"lineNum":"   18","line":"//"},
{"lineNum":"   19","line":"// 2. Redistributions in binary form must reproduce the above copyright"},
{"lineNum":"   20","line":"// notice, this list of conditions and the following disclaimer in the"},
{"lineNum":"   21","line":"// documentation and/or other materials provided with the distribution."},
{"lineNum":"   22","line":"//"},
{"lineNum":"   23","line":"// 3. Neither the name of the Corporation nor the names of the"},
{"lineNum":"   24","line":"// contributors may be used to endorse or promote products derived from"},
{"lineNum":"   25","line":"// this software without specific prior written permission."},
{"lineNum":"   26","line":"//"},
{"lineNum":"   27","line":"// THIS SOFTWARE IS PROVIDED BY NTESS \"AS IS\" AND ANY"},
{"lineNum":"   28","line":"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"},
{"lineNum":"   29","line":"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR"},
{"lineNum":"   30","line":"// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NTESS OR THE"},
{"lineNum":"   31","line":"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,"},
{"lineNum":"   32","line":"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,"},
{"lineNum":"   33","line":"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR"},
{"lineNum":"   34","line":"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF"},
{"lineNum":"   35","line":"// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING"},
{"lineNum":"   36","line":"// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"},
{"lineNum":"   37","line":"// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   38","line":"//"},
{"lineNum":"   39","line":"// Questions? Contact Christian R. Trott (crtrott@sandia.gov)"},
{"lineNum":"   40","line":"//"},
{"lineNum":"   41","line":"// ************************************************************************"},
{"lineNum":"   42","line":"//@HEADER"},
{"lineNum":"   43","line":"*/"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"#ifndef KOKKOS_EXPERIMENTAL_VIEW_MAPPING_HPP"},
{"lineNum":"   46","line":"#define KOKKOS_EXPERIMENTAL_VIEW_MAPPING_HPP"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"#include <type_traits>"},
{"lineNum":"   49","line":"#include <initializer_list>"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"#include <Kokkos_Core_fwd.hpp>"},
{"lineNum":"   52","line":"#include <Kokkos_Pair.hpp>"},
{"lineNum":"   53","line":"#include <Kokkos_Layout.hpp>"},
{"lineNum":"   54","line":"#include <Kokkos_Extents.hpp>"},
{"lineNum":"   55","line":"#include <impl/Kokkos_Error.hpp>"},
{"lineNum":"   56","line":"#include <impl/Kokkos_Traits.hpp>"},
{"lineNum":"   57","line":"#include <impl/Kokkos_ViewTracker.hpp>"},
{"lineNum":"   58","line":"#include <impl/Kokkos_ViewCtor.hpp>"},
{"lineNum":"   59","line":"#include <impl/Kokkos_Atomic_View.hpp>"},
{"lineNum":"   60","line":"#include <impl/Kokkos_Tools.hpp>"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"//----------------------------------------------------------------------------"},
{"lineNum":"   63","line":"//----------------------------------------------------------------------------"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"namespace Kokkos {"},
{"lineNum":"   66","line":"namespace Impl {"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"template <unsigned I, size_t... Args>"},
{"lineNum":"   69","line":"struct variadic_size_t {"},
{"lineNum":"   70","line":"  enum : size_t { value = KOKKOS_INVALID_INDEX };"},
{"lineNum":"   71","line":"};"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"template <size_t Val, size_t... Args>"},
{"lineNum":"   74","line":"struct variadic_size_t<0, Val, Args...> {"},
{"lineNum":"   75","line":"  enum : size_t { value = Val };"},
{"lineNum":"   76","line":"};"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"template <unsigned I, size_t Val, size_t... Args>"},
{"lineNum":"   79","line":"struct variadic_size_t<I, Val, Args...> {"},
{"lineNum":"   80","line":"  enum : size_t { value = variadic_size_t<I - 1, Args...>::value };"},
{"lineNum":"   81","line":"};"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"template <size_t... Args>"},
{"lineNum":"   84","line":"struct rank_dynamic;"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"template <>"},
{"lineNum":"   87","line":"struct rank_dynamic<> {"},
{"lineNum":"   88","line":"  enum : unsigned { value = 0 };"},
{"lineNum":"   89","line":"};"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"template <size_t Val, size_t... Args>"},
{"lineNum":"   92","line":"struct rank_dynamic<Val, Args...> {"},
{"lineNum":"   93","line":"  enum : unsigned { value = (Val == 0 ? 1 : 0) + rank_dynamic<Args...>::value };"},
{"lineNum":"   94","line":"};"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"#define KOKKOS_IMPL_VIEW_DIMENSION(R)                                       \\"},
{"lineNum":"   97","line":"  template <size_t V, unsigned>                                             \\"},
{"lineNum":"   98","line":"  struct ViewDimension##R {                                                 \\"},
{"lineNum":"   99","line":"    static constexpr size_t ArgN##R = (V != KOKKOS_INVALID_INDEX ? V : 1);  \\"},
{"lineNum":"  100","line":"    static constexpr size_t N##R    = (V != KOKKOS_INVALID_INDEX ? V : 1);  \\"},
{"lineNum":"  101","line":"    KOKKOS_INLINE_FUNCTION explicit ViewDimension##R(size_t) {}             \\"},
{"lineNum":"  102","line":"    ViewDimension##R()                        = default;                    \\"},
{"lineNum":"  103","line":"    ViewDimension##R(const ViewDimension##R&) = default;                    \\"},
{"lineNum":"  104","line":"    ViewDimension##R& operator=(const ViewDimension##R&) = default;         \\"},
{"lineNum":"  105","line":"  };                                                                        \\"},
{"lineNum":"  106","line":"  template <size_t V, unsigned RD>                                          \\"},
{"lineNum":"  107","line":"  constexpr size_t ViewDimension##R<V, RD>::ArgN##R;                        \\"},
{"lineNum":"  108","line":"  template <size_t V, unsigned RD>                                          \\"},
{"lineNum":"  109","line":"  constexpr size_t ViewDimension##R<V, RD>::N##R;                           \\"},
{"lineNum":"  110","line":"  template <unsigned RD>                                                    \\"},
{"lineNum":"  111","line":"  struct ViewDimension##R<0u, RD> {                                         \\"},
{"lineNum":"  112","line":"    static constexpr size_t ArgN##R = 0;                                    \\"},
{"lineNum":"  113","line":"    typename std::conditional<(RD < 3), size_t, unsigned>::type N##R;       \\"},
{"lineNum":"  114","line":"    ViewDimension##R()                        = default;                    \\"},
{"lineNum":"  115","line":"    ViewDimension##R(const ViewDimension##R&) = default;                    \\"},
{"lineNum":"  116","line":"    ViewDimension##R& operator=(const ViewDimension##R&) = default;         \\"},
{"lineNum":"  117","line":"    KOKKOS_INLINE_FUNCTION explicit ViewDimension##R(size_t V) : N##R(V) {} \\"},
{"lineNum":"  118","line":"  };                                                                        \\"},
{"lineNum":"  119","line":"  template <unsigned RD>                                                    \\"},
{"lineNum":"  120","line":"  constexpr size_t ViewDimension##R<0u, RD>::ArgN##R;"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"KOKKOS_IMPL_VIEW_DIMENSION(0)"},
{"lineNum":"  123","line":"KOKKOS_IMPL_VIEW_DIMENSION(1)"},
{"lineNum":"  124","line":"KOKKOS_IMPL_VIEW_DIMENSION(2)"},
{"lineNum":"  125","line":"KOKKOS_IMPL_VIEW_DIMENSION(3)"},
{"lineNum":"  126","line":"KOKKOS_IMPL_VIEW_DIMENSION(4)"},
{"lineNum":"  127","line":"KOKKOS_IMPL_VIEW_DIMENSION(5)"},
{"lineNum":"  128","line":"KOKKOS_IMPL_VIEW_DIMENSION(6)"},
{"lineNum":"  129","line":"KOKKOS_IMPL_VIEW_DIMENSION(7)"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"#undef KOKKOS_IMPL_VIEW_DIMENSION"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"// MSVC does not do empty base class optimization by default."},
{"lineNum":"  134","line":"// Per standard it is required for standard layout types"},
{"lineNum":"  135","line":"template <size_t... Vals>"},
{"lineNum":"  136","line":"struct KOKKOS_IMPL_ENFORCE_EMPTY_BASE_OPTIMIZATION ViewDimension"},
{"lineNum":"  137","line":"    : public ViewDimension0<variadic_size_t<0u, Vals...>::value,"},
{"lineNum":"  138","line":"                            rank_dynamic<Vals...>::value>,"},
{"lineNum":"  139","line":"      public ViewDimension1<variadic_size_t<1u, Vals...>::value,"},
{"lineNum":"  140","line":"                            rank_dynamic<Vals...>::value>,"},
{"lineNum":"  141","line":"      public ViewDimension2<variadic_size_t<2u, Vals...>::value,"},
{"lineNum":"  142","line":"                            rank_dynamic<Vals...>::value>,"},
{"lineNum":"  143","line":"      public ViewDimension3<variadic_size_t<3u, Vals...>::value,"},
{"lineNum":"  144","line":"                            rank_dynamic<Vals...>::value>,"},
{"lineNum":"  145","line":"      public ViewDimension4<variadic_size_t<4u, Vals...>::value,"},
{"lineNum":"  146","line":"                            rank_dynamic<Vals...>::value>,"},
{"lineNum":"  147","line":"      public ViewDimension5<variadic_size_t<5u, Vals...>::value,"},
{"lineNum":"  148","line":"                            rank_dynamic<Vals...>::value>,"},
{"lineNum":"  149","line":"      public ViewDimension6<variadic_size_t<6u, Vals...>::value,"},
{"lineNum":"  150","line":"                            rank_dynamic<Vals...>::value>,"},
{"lineNum":"  151","line":"      public ViewDimension7<variadic_size_t<7u, Vals...>::value,"},
{"lineNum":"  152","line":"                            rank_dynamic<Vals...>::value> {"},
{"lineNum":"  153","line":"  using D0 = ViewDimension0<variadic_size_t<0U, Vals...>::value,"},
{"lineNum":"  154","line":"                            rank_dynamic<Vals...>::value>;"},
{"lineNum":"  155","line":"  using D1 = ViewDimension1<variadic_size_t<1U, Vals...>::value,"},
{"lineNum":"  156","line":"                            rank_dynamic<Vals...>::value>;"},
{"lineNum":"  157","line":"  using D2 = ViewDimension2<variadic_size_t<2U, Vals...>::value,"},
{"lineNum":"  158","line":"                            rank_dynamic<Vals...>::value>;"},
{"lineNum":"  159","line":"  using D3 = ViewDimension3<variadic_size_t<3U, Vals...>::value,"},
{"lineNum":"  160","line":"                            rank_dynamic<Vals...>::value>;"},
{"lineNum":"  161","line":"  using D4 = ViewDimension4<variadic_size_t<4U, Vals...>::value,"},
{"lineNum":"  162","line":"                            rank_dynamic<Vals...>::value>;"},
{"lineNum":"  163","line":"  using D5 = ViewDimension5<variadic_size_t<5U, Vals...>::value,"},
{"lineNum":"  164","line":"                            rank_dynamic<Vals...>::value>;"},
{"lineNum":"  165","line":"  using D6 = ViewDimension6<variadic_size_t<6U, Vals...>::value,"},
{"lineNum":"  166","line":"                            rank_dynamic<Vals...>::value>;"},
{"lineNum":"  167","line":"  using D7 = ViewDimension7<variadic_size_t<7U, Vals...>::value,"},
{"lineNum":"  168","line":"                            rank_dynamic<Vals...>::value>;"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"  using D0::ArgN0;"},
{"lineNum":"  171","line":"  using D1::ArgN1;"},
{"lineNum":"  172","line":"  using D2::ArgN2;"},
{"lineNum":"  173","line":"  using D3::ArgN3;"},
{"lineNum":"  174","line":"  using D4::ArgN4;"},
{"lineNum":"  175","line":"  using D5::ArgN5;"},
{"lineNum":"  176","line":"  using D6::ArgN6;"},
{"lineNum":"  177","line":"  using D7::ArgN7;"},
{"lineNum":"  178","line":""},
{"lineNum":"  179","line":"  using D0::N0;"},
{"lineNum":"  180","line":"  using D1::N1;"},
{"lineNum":"  181","line":"  using D2::N2;"},
{"lineNum":"  182","line":"  using D3::N3;"},
{"lineNum":"  183","line":"  using D4::N4;"},
{"lineNum":"  184","line":"  using D5::N5;"},
{"lineNum":"  185","line":"  using D6::N6;"},
{"lineNum":"  186","line":"  using D7::N7;"},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"  enum : unsigned { rank = sizeof...(Vals) };"},
{"lineNum":"  189","line":"  enum : unsigned { rank_dynamic = Impl::rank_dynamic<Vals...>::value };"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"  ViewDimension()                     = default;"},
{"lineNum":"  192","line":"  ViewDimension(const ViewDimension&) = default;"},
{"lineNum":"  193","line":"  ViewDimension& operator=(const ViewDimension&) = default;"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  196","line":"  constexpr ViewDimension(size_t n0, size_t n1, size_t n2, size_t n3, size_t n4,"},
{"lineNum":"  197","line":"                          size_t n5, size_t n6, size_t n7)"},
{"lineNum":"  198","line":"      : D0(n0), D1(n1), D2(n2), D3(n3), D4(n4), D5(n5), D6(n6), D7(n7) {}"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  201","line":"  constexpr size_t extent(const unsigned r) const noexcept {"},
{"lineNum":"  202","line":"    return r == 0","class":"lineNoCov","hits":"0","possible_hits":"36",},
{"lineNum":"  203","line":"               ? N0","class":"lineNoCov","hits":"0","possible_hits":"143",},
{"lineNum":"  204","line":"               : (r == 1","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  205","line":"                      ? N1","class":"lineNoCov","hits":"0","possible_hits":"17",},
{"lineNum":"  206","line":"                      : (r == 2","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  207","line":"                             ? N2"},
{"lineNum":"  208","line":"                             : (r == 3","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  209","line":"                                    ? N3"},
{"lineNum":"  210","line":"                                    : (r == 4","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  211","line":"                                           ? N4"},
{"lineNum":"  212","line":"                                           : (r == 5","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  213","line":"                                                  ? N5"},
{"lineNum":"  214","line":"                                                  : (r == 6","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  215","line":"                                                         ? N6"},
{"lineNum":"  216","line":"                                                         : (r == 7 ? N7","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  217","line":"                                                                   : 0)))))));"},
{"lineNum":"  218","line":"  }"},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"  static KOKKOS_INLINE_FUNCTION constexpr size_t static_extent("},
{"lineNum":"  221","line":"      const unsigned r) noexcept {"},
{"lineNum":"  222","line":"    return r == 0"},
{"lineNum":"  223","line":"               ? ArgN0"},
{"lineNum":"  224","line":"               : (r == 1"},
{"lineNum":"  225","line":"                      ? ArgN1"},
{"lineNum":"  226","line":"                      : (r == 2"},
{"lineNum":"  227","line":"                             ? ArgN2"},
{"lineNum":"  228","line":"                             : (r == 3"},
{"lineNum":"  229","line":"                                    ? ArgN3"},
{"lineNum":"  230","line":"                                    : (r == 4"},
{"lineNum":"  231","line":"                                           ? ArgN4"},
{"lineNum":"  232","line":"                                           : (r == 5"},
{"lineNum":"  233","line":"                                                  ? ArgN5"},
{"lineNum":"  234","line":"                                                  : (r == 6"},
{"lineNum":"  235","line":"                                                         ? ArgN6"},
{"lineNum":"  236","line":"                                                         : (r == 7 ? ArgN7"},
{"lineNum":"  237","line":"                                                                   : 0)))))));"},
{"lineNum":"  238","line":"  }"},
{"lineNum":"  239","line":""},
{"lineNum":"  240","line":"  template <size_t N>"},
{"lineNum":"  241","line":"  struct prepend {"},
{"lineNum":"  242","line":"    using type = ViewDimension<N, Vals...>;"},
{"lineNum":"  243","line":"  };"},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"  template <size_t N>"},
{"lineNum":"  246","line":"  struct append {"},
{"lineNum":"  247","line":"    using type = ViewDimension<Vals..., N>;"},
{"lineNum":"  248","line":"  };"},
{"lineNum":"  249","line":"};"},
{"lineNum":"  250","line":""},
{"lineNum":"  251","line":"template <class A, class B>"},
{"lineNum":"  252","line":"struct ViewDimensionJoin;"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"template <size_t... A, size_t... B>"},
{"lineNum":"  255","line":"struct ViewDimensionJoin<ViewDimension<A...>, ViewDimension<B...>> {"},
{"lineNum":"  256","line":"  using type = ViewDimension<A..., B...>;"},
{"lineNum":"  257","line":"};"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"template <class DstDim, class SrcDim>"},
{"lineNum":"  262","line":"struct ViewDimensionAssignable;"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"template <size_t... DstArgs, size_t... SrcArgs>"},
{"lineNum":"  265","line":"struct ViewDimensionAssignable<ViewDimension<DstArgs...>,"},
{"lineNum":"  266","line":"                               ViewDimension<SrcArgs...>> {"},
{"lineNum":"  267","line":"  using dst = ViewDimension<DstArgs...>;"},
{"lineNum":"  268","line":"  using src = ViewDimension<SrcArgs...>;"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"  enum {"},
{"lineNum":"  271","line":"    value = unsigned(dst::rank) == unsigned(src::rank) &&"},
{"lineNum":"  272","line":"            ("},
{"lineNum":"  273","line":"                // Compile time check that potential static dimensions match"},
{"lineNum":"  274","line":"                ((1 > dst::rank_dynamic && 1 > src::rank_dynamic)"},
{"lineNum":"  275","line":"                     ? (size_t(dst::ArgN0) == size_t(src::ArgN0))"},
{"lineNum":"  276","line":"                     : true) &&"},
{"lineNum":"  277","line":"                ((2 > dst::rank_dynamic && 2 > src::rank_dynamic)"},
{"lineNum":"  278","line":"                     ? (size_t(dst::ArgN1) == size_t(src::ArgN1))"},
{"lineNum":"  279","line":"                     : true) &&"},
{"lineNum":"  280","line":"                ((3 > dst::rank_dynamic && 3 > src::rank_dynamic)"},
{"lineNum":"  281","line":"                     ? (size_t(dst::ArgN2) == size_t(src::ArgN2))"},
{"lineNum":"  282","line":"                     : true) &&"},
{"lineNum":"  283","line":"                ((4 > dst::rank_dynamic && 4 > src::rank_dynamic)"},
{"lineNum":"  284","line":"                     ? (size_t(dst::ArgN3) == size_t(src::ArgN3))"},
{"lineNum":"  285","line":"                     : true) &&"},
{"lineNum":"  286","line":"                ((5 > dst::rank_dynamic && 5 > src::rank_dynamic)"},
{"lineNum":"  287","line":"                     ? (size_t(dst::ArgN4) == size_t(src::ArgN4))"},
{"lineNum":"  288","line":"                     : true) &&"},
{"lineNum":"  289","line":"                ((6 > dst::rank_dynamic && 6 > src::rank_dynamic)"},
{"lineNum":"  290","line":"                     ? (size_t(dst::ArgN5) == size_t(src::ArgN5))"},
{"lineNum":"  291","line":"                     : true) &&"},
{"lineNum":"  292","line":"                ((7 > dst::rank_dynamic && 7 > src::rank_dynamic)"},
{"lineNum":"  293","line":"                     ? (size_t(dst::ArgN6) == size_t(src::ArgN6))"},
{"lineNum":"  294","line":"                     : true) &&"},
{"lineNum":"  295","line":"                ((8 > dst::rank_dynamic && 8 > src::rank_dynamic)"},
{"lineNum":"  296","line":"                     ? (size_t(dst::ArgN7) == size_t(src::ArgN7))"},
{"lineNum":"  297","line":"                     : true))"},
{"lineNum":"  298","line":"  };"},
{"lineNum":"  299","line":"};"},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"}  // namespace Impl"},
{"lineNum":"  302","line":"}  // namespace Kokkos"},
{"lineNum":"  303","line":""},
{"lineNum":"  304","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  305","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  306","line":""},
{"lineNum":"  307","line":"namespace Kokkos {"},
{"lineNum":"  308","line":"namespace Impl {"},
{"lineNum":"  309","line":""},
{"lineNum":"  310","line":"struct ALL_t {"},
{"lineNum":"  311","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  312","line":"  constexpr const ALL_t& operator()() const { return *this; }"},
{"lineNum":"  313","line":""},
{"lineNum":"  314","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  315","line":"  constexpr bool operator==(const ALL_t&) const { return true; }"},
{"lineNum":"  316","line":"};"},
{"lineNum":"  317","line":""},
{"lineNum":"  318","line":"}  // namespace Impl"},
{"lineNum":"  319","line":"}  // namespace Kokkos"},
{"lineNum":"  320","line":""},
{"lineNum":"  321","line":"namespace Kokkos {"},
{"lineNum":"  322","line":"namespace Impl {"},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"template <class T>"},
{"lineNum":"  325","line":"struct is_integral_extent_type {"},
{"lineNum":"  326","line":"  enum : bool { value = std::is_same<T, Kokkos::Impl::ALL_t>::value ? 1 : 0 };"},
{"lineNum":"  327","line":"};"},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"template <class iType>"},
{"lineNum":"  330","line":"struct is_integral_extent_type<std::pair<iType, iType>> {"},
{"lineNum":"  331","line":"  enum : bool { value = std::is_integral<iType>::value ? 1 : 0 };"},
{"lineNum":"  332","line":"};"},
{"lineNum":"  333","line":""},
{"lineNum":"  334","line":"template <class iType>"},
{"lineNum":"  335","line":"struct is_integral_extent_type<Kokkos::pair<iType, iType>> {"},
{"lineNum":"  336","line":"  enum : bool { value = std::is_integral<iType>::value ? 1 : 0 };"},
{"lineNum":"  337","line":"};"},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"// Assuming \'2 == initializer_list<iType>::size()\'"},
{"lineNum":"  340","line":"template <class iType>"},
{"lineNum":"  341","line":"struct is_integral_extent_type<std::initializer_list<iType>> {"},
{"lineNum":"  342","line":"  enum : bool { value = std::is_integral<iType>::value ? 1 : 0 };"},
{"lineNum":"  343","line":"};"},
{"lineNum":"  344","line":""},
{"lineNum":"  345","line":"template <unsigned I, class... Args>"},
{"lineNum":"  346","line":"struct is_integral_extent {"},
{"lineNum":"  347","line":"  // get_type is void when sizeof...(Args) <= I"},
{"lineNum":"  348","line":"  using type = typename std::remove_cv<typename std::remove_reference<"},
{"lineNum":"  349","line":"      typename Kokkos::Impl::get_type<I, Args...>::type>::type>::type;"},
{"lineNum":"  350","line":""},
{"lineNum":"  351","line":"  enum : bool { value = is_integral_extent_type<type>::value };"},
{"lineNum":"  352","line":""},
{"lineNum":"  353","line":"  static_assert(value || std::is_integral<type>::value ||"},
{"lineNum":"  354","line":"                    std::is_same<type, void>::value,"},
{"lineNum":"  355","line":"                \"subview argument must be either integral or integral extent\");"},
{"lineNum":"  356","line":"};"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"// Rules for subview arguments and layouts matching"},
{"lineNum":"  359","line":""},
{"lineNum":"  360","line":"template <class LayoutDest, class LayoutSrc, int RankDest, int RankSrc,"},
{"lineNum":"  361","line":"          int CurrentArg, class... SubViewArgs>"},
{"lineNum":"  362","line":"struct SubviewLegalArgsCompileTime;"},
{"lineNum":"  363","line":""},
{"lineNum":"  364","line":"// Rules which allow LayoutLeft to LayoutLeft assignment"},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":"template <int RankDest, int RankSrc, int CurrentArg, class Arg,"},
{"lineNum":"  367","line":"          class... SubViewArgs>"},
{"lineNum":"  368","line":"struct SubviewLegalArgsCompileTime<Kokkos::LayoutLeft, Kokkos::LayoutLeft,"},
{"lineNum":"  369","line":"                                   RankDest, RankSrc, CurrentArg, Arg,"},
{"lineNum":"  370","line":"                                   SubViewArgs...> {"},
{"lineNum":"  371","line":"  enum {"},
{"lineNum":"  372","line":"    value = (((CurrentArg == RankDest - 1) &&"},
{"lineNum":"  373","line":"              (Kokkos::Impl::is_integral_extent_type<Arg>::value)) ||"},
{"lineNum":"  374","line":"             ((CurrentArg >= RankDest) && (std::is_integral<Arg>::value)) ||"},
{"lineNum":"  375","line":"             ((CurrentArg < RankDest) &&"},
{"lineNum":"  376","line":"              (std::is_same<Arg, Kokkos::Impl::ALL_t>::value)) ||"},
{"lineNum":"  377","line":"             ((CurrentArg == 0) &&"},
{"lineNum":"  378","line":"              (Kokkos::Impl::is_integral_extent_type<Arg>::value))) &&"},
{"lineNum":"  379","line":"            (SubviewLegalArgsCompileTime<Kokkos::LayoutLeft, Kokkos::LayoutLeft,"},
{"lineNum":"  380","line":"                                         RankDest, RankSrc, CurrentArg + 1,"},
{"lineNum":"  381","line":"                                         SubViewArgs...>::value)"},
{"lineNum":"  382","line":"  };"},
{"lineNum":"  383","line":"};"},
{"lineNum":"  384","line":""},
{"lineNum":"  385","line":"template <int RankDest, int RankSrc, int CurrentArg, class Arg>"},
{"lineNum":"  386","line":"struct SubviewLegalArgsCompileTime<Kokkos::LayoutLeft, Kokkos::LayoutLeft,"},
{"lineNum":"  387","line":"                                   RankDest, RankSrc, CurrentArg, Arg> {"},
{"lineNum":"  388","line":"  enum {"},
{"lineNum":"  389","line":"    value = ((CurrentArg == RankDest - 1) || (std::is_integral<Arg>::value)) &&"},
{"lineNum":"  390","line":"            (CurrentArg == RankSrc - 1)"},
{"lineNum":"  391","line":"  };"},
{"lineNum":"  392","line":"};"},
{"lineNum":"  393","line":""},
{"lineNum":"  394","line":"// Rules which allow LayoutRight to LayoutRight assignment"},
{"lineNum":"  395","line":""},
{"lineNum":"  396","line":"template <int RankDest, int RankSrc, int CurrentArg, class Arg,"},
{"lineNum":"  397","line":"          class... SubViewArgs>"},
{"lineNum":"  398","line":"struct SubviewLegalArgsCompileTime<Kokkos::LayoutRight, Kokkos::LayoutRight,"},
{"lineNum":"  399","line":"                                   RankDest, RankSrc, CurrentArg, Arg,"},
{"lineNum":"  400","line":"                                   SubViewArgs...> {"},
{"lineNum":"  401","line":"  enum {"},
{"lineNum":"  402","line":"    value = (((CurrentArg == RankSrc - RankDest) &&"},
{"lineNum":"  403","line":"              (Kokkos::Impl::is_integral_extent_type<Arg>::value)) ||"},
{"lineNum":"  404","line":"             ((CurrentArg < RankSrc - RankDest) &&"},
{"lineNum":"  405","line":"              (std::is_integral<Arg>::value)) ||"},
{"lineNum":"  406","line":"             ((CurrentArg >= RankSrc - RankDest) &&"},
{"lineNum":"  407","line":"              (std::is_same<Arg, Kokkos::Impl::ALL_t>::value))) &&"},
{"lineNum":"  408","line":"            (SubviewLegalArgsCompileTime<Kokkos::LayoutRight,"},
{"lineNum":"  409","line":"                                         Kokkos::LayoutRight, RankDest, RankSrc,"},
{"lineNum":"  410","line":"                                         CurrentArg + 1, SubViewArgs...>::value)"},
{"lineNum":"  411","line":"  };"},
{"lineNum":"  412","line":"};"},
{"lineNum":"  413","line":""},
{"lineNum":"  414","line":"template <int RankDest, int RankSrc, int CurrentArg, class Arg>"},
{"lineNum":"  415","line":"struct SubviewLegalArgsCompileTime<Kokkos::LayoutRight, Kokkos::LayoutRight,"},
{"lineNum":"  416","line":"                                   RankDest, RankSrc, CurrentArg, Arg> {"},
{"lineNum":"  417","line":"  enum {"},
{"lineNum":"  418","line":"    value = ((CurrentArg == RankSrc - 1) &&"},
{"lineNum":"  419","line":"             (std::is_same<Arg, Kokkos::Impl::ALL_t>::value))"},
{"lineNum":"  420","line":"  };"},
{"lineNum":"  421","line":"};"},
{"lineNum":"  422","line":""},
{"lineNum":"  423","line":"// Rules which allow assignment to LayoutStride"},
{"lineNum":"  424","line":""},
{"lineNum":"  425","line":"template <int RankDest, int RankSrc, int CurrentArg, class... SubViewArgs>"},
{"lineNum":"  426","line":"struct SubviewLegalArgsCompileTime<Kokkos::LayoutStride, Kokkos::LayoutLeft,"},
{"lineNum":"  427","line":"                                   RankDest, RankSrc, CurrentArg,"},
{"lineNum":"  428","line":"                                   SubViewArgs...> {"},
{"lineNum":"  429","line":"  enum : bool { value = true };"},
{"lineNum":"  430","line":"};"},
{"lineNum":"  431","line":""},
{"lineNum":"  432","line":"template <int RankDest, int RankSrc, int CurrentArg, class... SubViewArgs>"},
{"lineNum":"  433","line":"struct SubviewLegalArgsCompileTime<Kokkos::LayoutStride, Kokkos::LayoutRight,"},
{"lineNum":"  434","line":"                                   RankDest, RankSrc, CurrentArg,"},
{"lineNum":"  435","line":"                                   SubViewArgs...> {"},
{"lineNum":"  436","line":"  enum : bool { value = true };"},
{"lineNum":"  437","line":"};"},
{"lineNum":"  438","line":""},
{"lineNum":"  439","line":"template <int RankDest, int RankSrc, int CurrentArg, class... SubViewArgs>"},
{"lineNum":"  440","line":"struct SubviewLegalArgsCompileTime<Kokkos::LayoutStride, Kokkos::LayoutStride,"},
{"lineNum":"  441","line":"                                   RankDest, RankSrc, CurrentArg,"},
{"lineNum":"  442","line":"                                   SubViewArgs...> {"},
{"lineNum":"  443","line":"  enum : bool { value = true };"},
{"lineNum":"  444","line":"};"},
{"lineNum":"  445","line":""},
{"lineNum":"  446","line":"template <unsigned DomainRank, unsigned RangeRank>"},
{"lineNum":"  447","line":"struct SubviewExtents {"},
{"lineNum":"  448","line":" private:"},
{"lineNum":"  449","line":"  // Cannot declare zero-length arrays"},
{"lineNum":"  450","line":"  // \'+\' is used to silence GCC 7.2.0 -Wduplicated-branches warning when"},
{"lineNum":"  451","line":"  // RangeRank=1"},
{"lineNum":"  452","line":"  enum { InternalRangeRank = RangeRank ? RangeRank : +1u };"},
{"lineNum":"  453","line":""},
{"lineNum":"  454","line":"  size_t m_begin[DomainRank];"},
{"lineNum":"  455","line":"  size_t m_length[InternalRangeRank];"},
{"lineNum":"  456","line":"  unsigned m_index[InternalRangeRank];"},
{"lineNum":"  457","line":""},
{"lineNum":"  458","line":"  template <size_t... DimArgs>"},
{"lineNum":"  459","line":"  KOKKOS_FORCEINLINE_FUNCTION bool set(unsigned, unsigned,"},
{"lineNum":"  460","line":"                                       const ViewDimension<DimArgs...>&) {"},
{"lineNum":"  461","line":"    return true;"},
{"lineNum":"  462","line":"  }"},
{"lineNum":"  463","line":""},
{"lineNum":"  464","line":"  template <class T, size_t... DimArgs, class... Args>"},
{"lineNum":"  465","line":"  KOKKOS_FORCEINLINE_FUNCTION bool set(unsigned domain_rank,"},
{"lineNum":"  466","line":"                                       unsigned range_rank,"},
{"lineNum":"  467","line":"                                       const ViewDimension<DimArgs...>& dim,"},
{"lineNum":"  468","line":"                                       const T& val, Args... args) {"},
{"lineNum":"  469","line":"    const size_t v = static_cast<size_t>(val);"},
{"lineNum":"  470","line":""},
{"lineNum":"  471","line":"    m_begin[domain_rank] = v;"},
{"lineNum":"  472","line":""},
{"lineNum":"  473","line":"    return set(domain_rank + 1, range_rank, dim, args...)"},
{"lineNum":"  474","line":"#if defined(KOKKOS_ENABLE_DEBUG_BOUNDS_CHECK)"},
{"lineNum":"  475","line":"           && (v < dim.extent(domain_rank))"},
{"lineNum":"  476","line":"#endif"},
{"lineNum":"  477","line":"        ;"},
{"lineNum":"  478","line":"  }"},
{"lineNum":"  479","line":""},
{"lineNum":"  480","line":"  // ALL_t"},
{"lineNum":"  481","line":"  template <size_t... DimArgs, class... Args>"},
{"lineNum":"  482","line":"  KOKKOS_FORCEINLINE_FUNCTION bool set(unsigned domain_rank,"},
{"lineNum":"  483","line":"                                       unsigned range_rank,"},
{"lineNum":"  484","line":"                                       const ViewDimension<DimArgs...>& dim,"},
{"lineNum":"  485","line":"                                       const Kokkos::Impl::ALL_t,"},
{"lineNum":"  486","line":"                                       Args... args) {"},
{"lineNum":"  487","line":"    m_begin[domain_rank] = 0;"},
{"lineNum":"  488","line":"    m_length[range_rank] = dim.extent(domain_rank);"},
{"lineNum":"  489","line":"    m_index[range_rank]  = domain_rank;"},
{"lineNum":"  490","line":""},
{"lineNum":"  491","line":"    return set(domain_rank + 1, range_rank + 1, dim, args...);"},
{"lineNum":"  492","line":"  }"},
{"lineNum":"  493","line":""},
{"lineNum":"  494","line":"  // std::pair range"},
{"lineNum":"  495","line":"  template <class T, size_t... DimArgs, class... Args>"},
{"lineNum":"  496","line":"  KOKKOS_FORCEINLINE_FUNCTION bool set(unsigned domain_rank,"},
{"lineNum":"  497","line":"                                       unsigned range_rank,"},
{"lineNum":"  498","line":"                                       const ViewDimension<DimArgs...>& dim,"},
{"lineNum":"  499","line":"                                       const std::pair<T, T>& val,"},
{"lineNum":"  500","line":"                                       Args... args) {"},
{"lineNum":"  501","line":"    const size_t b = static_cast<size_t>(val.first);"},
{"lineNum":"  502","line":"    const size_t e = static_cast<size_t>(val.second);"},
{"lineNum":"  503","line":""},
{"lineNum":"  504","line":"    m_begin[domain_rank] = b;"},
{"lineNum":"  505","line":"    m_length[range_rank] = e - b;"},
{"lineNum":"  506","line":"    m_index[range_rank]  = domain_rank;"},
{"lineNum":"  507","line":""},
{"lineNum":"  508","line":"    return set(domain_rank + 1, range_rank + 1, dim, args...)"},
{"lineNum":"  509","line":"#if defined(KOKKOS_ENABLE_DEBUG_BOUNDS_CHECK)"},
{"lineNum":"  510","line":"           && (e <= b + dim.extent(domain_rank))"},
{"lineNum":"  511","line":"#endif"},
{"lineNum":"  512","line":"        ;"},
{"lineNum":"  513","line":"  }"},
{"lineNum":"  514","line":""},
{"lineNum":"  515","line":"  // Kokkos::pair range"},
{"lineNum":"  516","line":"  template <class T, size_t... DimArgs, class... Args>"},
{"lineNum":"  517","line":"  KOKKOS_FORCEINLINE_FUNCTION bool set(unsigned domain_rank,"},
{"lineNum":"  518","line":"                                       unsigned range_rank,"},
{"lineNum":"  519","line":"                                       const ViewDimension<DimArgs...>& dim,"},
{"lineNum":"  520","line":"                                       const Kokkos::pair<T, T>& val,"},
{"lineNum":"  521","line":"                                       Args... args) {"},
{"lineNum":"  522","line":"    const size_t b = static_cast<size_t>(val.first);"},
{"lineNum":"  523","line":"    const size_t e = static_cast<size_t>(val.second);"},
{"lineNum":"  524","line":""},
{"lineNum":"  525","line":"    m_begin[domain_rank] = b;"},
{"lineNum":"  526","line":"    m_length[range_rank] = e - b;","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  527","line":"    m_index[range_rank]  = domain_rank;"},
{"lineNum":"  528","line":""},
{"lineNum":"  529","line":"    return set(domain_rank + 1, range_rank + 1, dim, args...)"},
{"lineNum":"  530","line":"#if defined(KOKKOS_ENABLE_DEBUG_BOUNDS_CHECK)"},
{"lineNum":"  531","line":"           && (e <= b + dim.extent(domain_rank))"},
{"lineNum":"  532","line":"#endif"},
{"lineNum":"  533","line":"        ;"},
{"lineNum":"  534","line":"  }"},
{"lineNum":"  535","line":""},
{"lineNum":"  536","line":"  // { begin , end } range"},
{"lineNum":"  537","line":"  template <class T, size_t... DimArgs, class... Args>"},
{"lineNum":"  538","line":"  KOKKOS_FORCEINLINE_FUNCTION bool set(unsigned domain_rank,"},
{"lineNum":"  539","line":"                                       unsigned range_rank,"},
{"lineNum":"  540","line":"                                       const ViewDimension<DimArgs...>& dim,"},
{"lineNum":"  541","line":"                                       const std::initializer_list<T>& val,"},
{"lineNum":"  542","line":"                                       Args... args) {"},
{"lineNum":"  543","line":"    const size_t b = static_cast<size_t>(val.begin()[0]);"},
{"lineNum":"  544","line":"    const size_t e = static_cast<size_t>(val.begin()[1]);"},
{"lineNum":"  545","line":""},
{"lineNum":"  546","line":"    m_begin[domain_rank] = b;"},
{"lineNum":"  547","line":"    m_length[range_rank] = e - b;"},
{"lineNum":"  548","line":"    m_index[range_rank]  = domain_rank;"},
{"lineNum":"  549","line":""},
{"lineNum":"  550","line":"    return set(domain_rank + 1, range_rank + 1, dim, args...)"},
{"lineNum":"  551","line":"#if defined(KOKKOS_ENABLE_DEBUG_BOUNDS_CHECK)"},
{"lineNum":"  552","line":"           && (val.size() == 2) && (e <= b + dim.extent(domain_rank))"},
{"lineNum":"  553","line":"#endif"},
{"lineNum":"  554","line":"        ;"},
{"lineNum":"  555","line":"  }"},
{"lineNum":"  556","line":""},
{"lineNum":"  557","line":"  //------------------------------"},
{"lineNum":"  558","line":""},
{"lineNum":"  559","line":"#if defined(KOKKOS_ENABLE_DEBUG_BOUNDS_CHECK)"},
{"lineNum":"  560","line":""},
{"lineNum":"  561","line":"  template <size_t... DimArgs>"},
{"lineNum":"  562","line":"  void error(char*, int, unsigned, unsigned,"},
{"lineNum":"  563","line":"             const ViewDimension<DimArgs...>&) const {}"},
{"lineNum":"  564","line":""},
{"lineNum":"  565","line":"  template <class T, size_t... DimArgs, class... Args>"},
{"lineNum":"  566","line":"  void error(char* buf, int buf_len, unsigned domain_rank, unsigned range_rank,"},
{"lineNum":"  567","line":"             const ViewDimension<DimArgs...>& dim, const T& val,"},
{"lineNum":"  568","line":"             Args... args) const {"},
{"lineNum":"  569","line":"    const int n = std::min("},
{"lineNum":"  570","line":"        buf_len,"},
{"lineNum":"  571","line":"        snprintf(buf, buf_len, \" %lu < %lu %c\", static_cast<unsigned long>(val),"},
{"lineNum":"  572","line":"                 static_cast<unsigned long>(dim.extent(domain_rank)),"},
{"lineNum":"  573","line":"                 int(sizeof...(Args) ? \',\' : \')\')));"},
{"lineNum":"  574","line":""},
{"lineNum":"  575","line":"    error(buf + n, buf_len - n, domain_rank + 1, range_rank, dim, args...);"},
{"lineNum":"  576","line":"  }"},
{"lineNum":"  577","line":""},
{"lineNum":"  578","line":"  // std::pair range"},
{"lineNum":"  579","line":"  template <size_t... DimArgs, class... Args>"},
{"lineNum":"  580","line":"  void error(char* buf, int buf_len, unsigned domain_rank, unsigned range_rank,"},
{"lineNum":"  581","line":"             const ViewDimension<DimArgs...>& dim, const Kokkos::Impl::ALL_t,"},
{"lineNum":"  582","line":"             Args... args) const {"},
{"lineNum":"  583","line":"    const int n = std::min(buf_len, snprintf(buf, buf_len, \" Kokkos::ALL %c\","},
{"lineNum":"  584","line":"                                             int(sizeof...(Args) ? \',\' : \')\')));"},
{"lineNum":"  585","line":""},
{"lineNum":"  586","line":"    error(buf + n, buf_len - n, domain_rank + 1, range_rank + 1, dim, args...);"},
{"lineNum":"  587","line":"  }"},
{"lineNum":"  588","line":""},
{"lineNum":"  589","line":"  // std::pair range"},
{"lineNum":"  590","line":"  template <class T, size_t... DimArgs, class... Args>"},
{"lineNum":"  591","line":"  void error(char* buf, int buf_len, unsigned domain_rank, unsigned range_rank,"},
{"lineNum":"  592","line":"             const ViewDimension<DimArgs...>& dim, const std::pair<T, T>& val,"},
{"lineNum":"  593","line":"             Args... args) const {"},
{"lineNum":"  594","line":"    // d <= e - b"},
{"lineNum":"  595","line":"    const int n = std::min("},
{"lineNum":"  596","line":"        buf_len, snprintf(buf, buf_len, \" %lu <= %lu - %lu %c\","},
{"lineNum":"  597","line":"                          static_cast<unsigned long>(dim.extent(domain_rank)),"},
{"lineNum":"  598","line":"                          static_cast<unsigned long>(val.second),"},
{"lineNum":"  599","line":"                          static_cast<unsigned long>(val.first),"},
{"lineNum":"  600","line":"                          int(sizeof...(Args) ? \',\' : \')\')));"},
{"lineNum":"  601","line":""},
{"lineNum":"  602","line":"    error(buf + n, buf_len - n, domain_rank + 1, range_rank + 1, dim, args...);"},
{"lineNum":"  603","line":"  }"},
{"lineNum":"  604","line":""},
{"lineNum":"  605","line":"  // Kokkos::pair range"},
{"lineNum":"  606","line":"  template <class T, size_t... DimArgs, class... Args>"},
{"lineNum":"  607","line":"  void error(char* buf, int buf_len, unsigned domain_rank, unsigned range_rank,"},
{"lineNum":"  608","line":"             const ViewDimension<DimArgs...>& dim,"},
{"lineNum":"  609","line":"             const Kokkos::pair<T, T>& val, Args... args) const {"},
{"lineNum":"  610","line":"    // d <= e - b"},
{"lineNum":"  611","line":"    const int n = std::min("},
{"lineNum":"  612","line":"        buf_len, snprintf(buf, buf_len, \" %lu <= %lu - %lu %c\","},
{"lineNum":"  613","line":"                          static_cast<unsigned long>(dim.extent(domain_rank)),"},
{"lineNum":"  614","line":"                          static_cast<unsigned long>(val.second),"},
{"lineNum":"  615","line":"                          static_cast<unsigned long>(val.first),"},
{"lineNum":"  616","line":"                          int(sizeof...(Args) ? \',\' : \')\')));"},
{"lineNum":"  617","line":""},
{"lineNum":"  618","line":"    error(buf + n, buf_len - n, domain_rank + 1, range_rank + 1, dim, args...);"},
{"lineNum":"  619","line":"  }"},
{"lineNum":"  620","line":""},
{"lineNum":"  621","line":"  // { begin , end } range"},
{"lineNum":"  622","line":"  template <class T, size_t... DimArgs, class... Args>"},
{"lineNum":"  623","line":"  void error(char* buf, int buf_len, unsigned domain_rank, unsigned range_rank,"},
{"lineNum":"  624","line":"             const ViewDimension<DimArgs...>& dim,"},
{"lineNum":"  625","line":"             const std::initializer_list<T>& val, Args... args) const {"},
{"lineNum":"  626","line":"    // d <= e - b"},
{"lineNum":"  627","line":"    int n = 0;"},
{"lineNum":"  628","line":"    if (val.size() == 2) {"},
{"lineNum":"  629","line":"      n = std::min(buf_len,"},
{"lineNum":"  630","line":"                   snprintf(buf, buf_len, \" %lu <= %lu - %lu %c\","},
{"lineNum":"  631","line":"                            static_cast<unsigned long>(dim.extent(domain_rank)),"},
{"lineNum":"  632","line":"                            static_cast<unsigned long>(val.begin()[0]),"},
{"lineNum":"  633","line":"                            static_cast<unsigned long>(val.begin()[1]),"},
{"lineNum":"  634","line":"                            int(sizeof...(Args) ? \',\' : \')\')));"},
{"lineNum":"  635","line":"    } else {"},
{"lineNum":"  636","line":"      n = std::min(buf_len, snprintf(buf, buf_len, \" { ... }.size() == %u %c\","},
{"lineNum":"  637","line":"                                     unsigned(val.size()),"},
{"lineNum":"  638","line":"                                     int(sizeof...(Args) ? \',\' : \')\')));"},
{"lineNum":"  639","line":"    }"},
{"lineNum":"  640","line":""},
{"lineNum":"  641","line":"    error(buf + n, buf_len - n, domain_rank + 1, range_rank + 1, dim, args...);"},
{"lineNum":"  642","line":"  }"},
{"lineNum":"  643","line":""},
{"lineNum":"  644","line":"#if defined(KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_HOST)"},
{"lineNum":"  645","line":"  template <size_t... DimArgs, class... Args>"},
{"lineNum":"  646","line":"  KOKKOS_FORCEINLINE_FUNCTION void error(const ViewDimension<DimArgs...>& dim,"},
{"lineNum":"  647","line":"                                         Args... args) const {"},
{"lineNum":"  648","line":"    enum { LEN = 1024 };"},
{"lineNum":"  649","line":"    char buffer[LEN];"},
{"lineNum":"  650","line":""},
{"lineNum":"  651","line":"    const int n = snprintf(buffer, LEN, \"Kokkos::subview bounds error (\");"},
{"lineNum":"  652","line":"    error(buffer + n, LEN - n, 0, 0, dim, args...);"},
{"lineNum":"  653","line":""},
{"lineNum":"  654","line":"    Kokkos::Impl::throw_runtime_exception(std::string(buffer));"},
{"lineNum":"  655","line":"  }"},
{"lineNum":"  656","line":"#else"},
{"lineNum":"  657","line":"  template <size_t... DimArgs, class... Args>"},
{"lineNum":"  658","line":"  KOKKOS_FORCEINLINE_FUNCTION void error(const ViewDimension<DimArgs...>&,"},
{"lineNum":"  659","line":"                                         Args...) const {"},
{"lineNum":"  660","line":"    Kokkos::abort(\"Kokkos::subview bounds error\");"},
{"lineNum":"  661","line":"  }"},
{"lineNum":"  662","line":"#endif"},
{"lineNum":"  663","line":""},
{"lineNum":"  664","line":"#else"},
{"lineNum":"  665","line":""},
{"lineNum":"  666","line":"  template <size_t... DimArgs, class... Args>"},
{"lineNum":"  667","line":"  KOKKOS_FORCEINLINE_FUNCTION void error(const ViewDimension<DimArgs...>&,"},
{"lineNum":"  668","line":"                                         Args...) const {}"},
{"lineNum":"  669","line":""},
{"lineNum":"  670","line":"#endif"},
{"lineNum":"  671","line":""},
{"lineNum":"  672","line":" public:"},
{"lineNum":"  673","line":"  template <size_t... DimArgs, class... Args>"},
{"lineNum":"  674","line":"  KOKKOS_INLINE_FUNCTION SubviewExtents(const ViewDimension<DimArgs...>& dim,"},
{"lineNum":"  675","line":"                                        Args... args) {"},
{"lineNum":"  676","line":"    static_assert(DomainRank == sizeof...(DimArgs), \"\");"},
{"lineNum":"  677","line":"    static_assert(DomainRank == sizeof...(Args), \"\");"},
{"lineNum":"  678","line":""},
{"lineNum":"  679","line":"    // Verifies that all arguments, up to 8, are integral types,"},
{"lineNum":"  680","line":"    // integral extents, or don\'t exist."},
{"lineNum":"  681","line":"    static_assert("},
{"lineNum":"  682","line":"        RangeRank == unsigned(is_integral_extent<0, Args...>::value) +"},
{"lineNum":"  683","line":"                         unsigned(is_integral_extent<1, Args...>::value) +"},
{"lineNum":"  684","line":"                         unsigned(is_integral_extent<2, Args...>::value) +"},
{"lineNum":"  685","line":"                         unsigned(is_integral_extent<3, Args...>::value) +"},
{"lineNum":"  686","line":"                         unsigned(is_integral_extent<4, Args...>::value) +"},
{"lineNum":"  687","line":"                         unsigned(is_integral_extent<5, Args...>::value) +"},
{"lineNum":"  688","line":"                         unsigned(is_integral_extent<6, Args...>::value) +"},
{"lineNum":"  689","line":"                         unsigned(is_integral_extent<7, Args...>::value),"},
{"lineNum":"  690","line":"        \"\");"},
{"lineNum":"  691","line":""},
{"lineNum":"  692","line":"    if (RangeRank == 0) {"},
{"lineNum":"  693","line":"      m_length[0] = 0;"},
{"lineNum":"  694","line":"      m_index[0]  = ~0u;"},
{"lineNum":"  695","line":"    }"},
{"lineNum":"  696","line":""},
{"lineNum":"  697","line":"    if (!set(0, 0, dim, args...)) error(dim, args...);"},
{"lineNum":"  698","line":"  }"},
{"lineNum":"  699","line":""},
{"lineNum":"  700","line":"  template <typename iType>"},
{"lineNum":"  701","line":"  KOKKOS_FORCEINLINE_FUNCTION constexpr size_t domain_offset("},
{"lineNum":"  702","line":"      const iType i) const {"},
{"lineNum":"  703","line":"    return unsigned(i) < DomainRank ? m_begin[i] : 0;"},
{"lineNum":"  704","line":"  }"},
{"lineNum":"  705","line":""},
{"lineNum":"  706","line":"  template <typename iType>"},
{"lineNum":"  707","line":"  KOKKOS_FORCEINLINE_FUNCTION constexpr size_t range_extent("},
{"lineNum":"  708","line":"      const iType i) const {"},
{"lineNum":"  709","line":"    return unsigned(i) < InternalRangeRank ? m_length[i] : 0;"},
{"lineNum":"  710","line":"  }"},
{"lineNum":"  711","line":""},
{"lineNum":"  712","line":"  template <typename iType>"},
{"lineNum":"  713","line":"  KOKKOS_FORCEINLINE_FUNCTION constexpr unsigned range_index("},
{"lineNum":"  714","line":"      const iType i) const {"},
{"lineNum":"  715","line":"    return unsigned(i) < InternalRangeRank ? m_index[i] : ~0u;"},
{"lineNum":"  716","line":"  }"},
{"lineNum":"  717","line":"};"},
{"lineNum":"  718","line":""},
{"lineNum":"  719","line":"}  // namespace Impl"},
{"lineNum":"  720","line":"}  // namespace Kokkos"},
{"lineNum":"  721","line":""},
{"lineNum":"  722","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  723","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  724","line":""},
{"lineNum":"  725","line":"namespace Kokkos {"},
{"lineNum":"  726","line":"namespace Impl {"},
{"lineNum":"  727","line":""},
{"lineNum":"  728","line":"/** \\brief  Given a value type and dimension generate the View data type */"},
{"lineNum":"  729","line":"template <class T, class Dim>"},
{"lineNum":"  730","line":"struct ViewDataType;"},
{"lineNum":"  731","line":""},
{"lineNum":"  732","line":"template <class T>"},
{"lineNum":"  733","line":"struct ViewDataType<T, ViewDimension<>> {"},
{"lineNum":"  734","line":"  using type = T;"},
{"lineNum":"  735","line":"};"},
{"lineNum":"  736","line":""},
{"lineNum":"  737","line":"template <class T, size_t... Args>"},
{"lineNum":"  738","line":"struct ViewDataType<T, ViewDimension<0, Args...>> {"},
{"lineNum":"  739","line":"  using type = typename ViewDataType<T*, ViewDimension<Args...>>::type;"},
{"lineNum":"  740","line":"};"},
{"lineNum":"  741","line":""},
{"lineNum":"  742","line":"template <class T, size_t N, size_t... Args>"},
{"lineNum":"  743","line":"struct ViewDataType<T, ViewDimension<N, Args...>> {"},
{"lineNum":"  744","line":"  using type = typename ViewDataType<T, ViewDimension<Args...>>::type[N];"},
{"lineNum":"  745","line":"};"},
{"lineNum":"  746","line":""},
{"lineNum":"  747","line":"/**\\brief  Analysis of View data type."},
{"lineNum":"  748","line":" *"},
{"lineNum":"  749","line":" *  Data type conforms to one of the following patterns :"},
{"lineNum":"  750","line":" *    {const} value_type [][#][#][#]"},
{"lineNum":"  751","line":" *    {const} value_type ***[#][#][#]"},
{"lineNum":"  752","line":" *  Where the sum of counts of \'*\' and \'[#]\' is at most ten."},
{"lineNum":"  753","line":" *"},
{"lineNum":"  754","line":" *  Provide alias for ViewDimension<...> and value_type."},
{"lineNum":"  755","line":" */"},
{"lineNum":"  756","line":"template <class T>"},
{"lineNum":"  757","line":"struct ViewArrayAnalysis {"},
{"lineNum":"  758","line":"  using value_type           = T;"},
{"lineNum":"  759","line":"  using const_value_type     = typename std::add_const<T>::type;"},
{"lineNum":"  760","line":"  using non_const_value_type = typename std::remove_const<T>::type;"},
{"lineNum":"  761","line":"  using static_dimension     = ViewDimension<>;"},
{"lineNum":"  762","line":"  using dynamic_dimension    = ViewDimension<>;"},
{"lineNum":"  763","line":"  using dimension            = ViewDimension<>;"},
{"lineNum":"  764","line":"};"},
{"lineNum":"  765","line":""},
{"lineNum":"  766","line":"template <class T, size_t N>"},
{"lineNum":"  767","line":"struct ViewArrayAnalysis<T[N]> {"},
{"lineNum":"  768","line":" private:"},
{"lineNum":"  769","line":"  using nested = ViewArrayAnalysis<T>;"},
{"lineNum":"  770","line":""},
{"lineNum":"  771","line":" public:"},
{"lineNum":"  772","line":"  using value_type           = typename nested::value_type;"},
{"lineNum":"  773","line":"  using const_value_type     = typename nested::const_value_type;"},
{"lineNum":"  774","line":"  using non_const_value_type = typename nested::non_const_value_type;"},
{"lineNum":"  775","line":""},
{"lineNum":"  776","line":"  using static_dimension ="},
{"lineNum":"  777","line":"      typename nested::static_dimension::template prepend<N>::type;"},
{"lineNum":"  778","line":""},
{"lineNum":"  779","line":"  using dynamic_dimension = typename nested::dynamic_dimension;"},
{"lineNum":"  780","line":""},
{"lineNum":"  781","line":"  using dimension ="},
{"lineNum":"  782","line":"      typename ViewDimensionJoin<dynamic_dimension, static_dimension>::type;"},
{"lineNum":"  783","line":"};"},
{"lineNum":"  784","line":""},
{"lineNum":"  785","line":"template <class T>"},
{"lineNum":"  786","line":"struct ViewArrayAnalysis<T[]> {"},
{"lineNum":"  787","line":" private:"},
{"lineNum":"  788","line":"  using nested           = ViewArrayAnalysis<T>;"},
{"lineNum":"  789","line":"  using nested_dimension = typename nested::dimension;"},
{"lineNum":"  790","line":""},
{"lineNum":"  791","line":" public:"},
{"lineNum":"  792","line":"  using value_type           = typename nested::value_type;"},
{"lineNum":"  793","line":"  using const_value_type     = typename nested::const_value_type;"},
{"lineNum":"  794","line":"  using non_const_value_type = typename nested::non_const_value_type;"},
{"lineNum":"  795","line":""},
{"lineNum":"  796","line":"  using dynamic_dimension ="},
{"lineNum":"  797","line":"      typename nested::dynamic_dimension::template prepend<0>::type;"},
{"lineNum":"  798","line":""},
{"lineNum":"  799","line":"  using static_dimension = typename nested::static_dimension;"},
{"lineNum":"  800","line":""},
{"lineNum":"  801","line":"  using dimension ="},
{"lineNum":"  802","line":"      typename ViewDimensionJoin<dynamic_dimension, static_dimension>::type;"},
{"lineNum":"  803","line":"};"},
{"lineNum":"  804","line":""},
{"lineNum":"  805","line":"template <class T>"},
{"lineNum":"  806","line":"struct ViewArrayAnalysis<T*> {"},
{"lineNum":"  807","line":" private:"},
{"lineNum":"  808","line":"  using nested = ViewArrayAnalysis<T>;"},
{"lineNum":"  809","line":""},
{"lineNum":"  810","line":" public:"},
{"lineNum":"  811","line":"  using value_type           = typename nested::value_type;"},
{"lineNum":"  812","line":"  using const_value_type     = typename nested::const_value_type;"},
{"lineNum":"  813","line":"  using non_const_value_type = typename nested::non_const_value_type;"},
{"lineNum":"  814","line":""},
{"lineNum":"  815","line":"  using dynamic_dimension ="},
{"lineNum":"  816","line":"      typename nested::dynamic_dimension::template prepend<0>::type;"},
{"lineNum":"  817","line":""},
{"lineNum":"  818","line":"  using static_dimension = typename nested::static_dimension;"},
{"lineNum":"  819","line":""},
{"lineNum":"  820","line":"  using dimension ="},
{"lineNum":"  821","line":"      typename ViewDimensionJoin<dynamic_dimension, static_dimension>::type;"},
{"lineNum":"  822","line":"};"},
{"lineNum":"  823","line":""},
{"lineNum":"  824","line":"template <class DataType, class ArrayLayout, class ValueType>"},
{"lineNum":"  825","line":"struct ViewDataAnalysis {"},
{"lineNum":"  826","line":" private:"},
{"lineNum":"  827","line":"  using array_analysis = ViewArrayAnalysis<DataType>;"},
{"lineNum":"  828","line":""},
{"lineNum":"  829","line":"  // ValueType is opportunity for partial specialization."},
{"lineNum":"  830","line":"  // Must match array analysis when this default template is used."},
{"lineNum":"  831","line":"  static_assert("},
{"lineNum":"  832","line":"      std::is_same<ValueType,"},
{"lineNum":"  833","line":"                   typename array_analysis::non_const_value_type>::value,"},
{"lineNum":"  834","line":"      \"\");"},
{"lineNum":"  835","line":""},
{"lineNum":"  836","line":" public:"},
{"lineNum":"  837","line":"  using specialize = void;  // No specialization"},
{"lineNum":"  838","line":""},
{"lineNum":"  839","line":"  using dimension            = typename array_analysis::dimension;"},
{"lineNum":"  840","line":"  using value_type           = typename array_analysis::value_type;"},
{"lineNum":"  841","line":"  using const_value_type     = typename array_analysis::const_value_type;"},
{"lineNum":"  842","line":"  using non_const_value_type = typename array_analysis::non_const_value_type;"},
{"lineNum":"  843","line":""},
{"lineNum":"  844","line":"  // Generate analogous multidimensional array specification type."},
{"lineNum":"  845","line":"  using type       = typename ViewDataType<value_type, dimension>::type;"},
{"lineNum":"  846","line":"  using const_type = typename ViewDataType<const_value_type, dimension>::type;"},
{"lineNum":"  847","line":"  using non_const_type ="},
{"lineNum":"  848","line":"      typename ViewDataType<non_const_value_type, dimension>::type;"},
{"lineNum":"  849","line":""},
{"lineNum":"  850","line":"  // Generate \"flattened\" multidimensional array specification type."},
{"lineNum":"  851","line":"  using scalar_array_type           = type;"},
{"lineNum":"  852","line":"  using const_scalar_array_type     = const_type;"},
{"lineNum":"  853","line":"  using non_const_scalar_array_type = non_const_type;"},
{"lineNum":"  854","line":"};"},
{"lineNum":"  855","line":""},
{"lineNum":"  856","line":"}  // namespace Impl"},
{"lineNum":"  857","line":"}  // namespace Kokkos"},
{"lineNum":"  858","line":""},
{"lineNum":"  859","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  860","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  861","line":""},
{"lineNum":"  862","line":"namespace Kokkos {"},
{"lineNum":"  863","line":"namespace Impl {"},
{"lineNum":"  864","line":""},
{"lineNum":"  865","line":"template <class Dimension, class Layout, typename Enable = void>"},
{"lineNum":"  866","line":"struct ViewOffset {"},
{"lineNum":"  867","line":"  using is_mapping_plugin = std::false_type;"},
{"lineNum":"  868","line":"};"},
{"lineNum":"  869","line":""},
{"lineNum":"  870","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  871","line":"// LayoutLeft AND ( 1 >= rank OR 0 == rank_dynamic ) : no padding / striding"},
{"lineNum":"  872","line":"template <class Dimension>"},
{"lineNum":"  873","line":"struct ViewOffset<"},
{"lineNum":"  874","line":"    Dimension, Kokkos::LayoutLeft,"},
{"lineNum":"  875","line":"    typename std::enable_if<(1 >= Dimension::rank ||"},
{"lineNum":"  876","line":"                             0 == Dimension::rank_dynamic)>::type> {"},
{"lineNum":"  877","line":"  using is_mapping_plugin = std::true_type;"},
{"lineNum":"  878","line":"  using is_regular        = std::true_type;"},
{"lineNum":"  879","line":""},
{"lineNum":"  880","line":"  using size_type      = size_t;"},
{"lineNum":"  881","line":"  using dimension_type = Dimension;"},
{"lineNum":"  882","line":"  using array_layout   = Kokkos::LayoutLeft;"},
{"lineNum":"  883","line":""},
{"lineNum":"  884","line":"  dimension_type m_dim;"},
{"lineNum":"  885","line":""},
{"lineNum":"  886","line":"  //----------------------------------------"},
{"lineNum":"  887","line":""},
{"lineNum":"  888","line":"  // rank 1"},
{"lineNum":"  889","line":"  template <typename I0>"},
{"lineNum":"  890","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()(I0 const& i0) const {"},
{"lineNum":"  891","line":"    return i0;"},
{"lineNum":"  892","line":"  }"},
{"lineNum":"  893","line":""},
{"lineNum":"  894","line":"  // rank 2"},
{"lineNum":"  895","line":"  template <typename I0, typename I1>"},
{"lineNum":"  896","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()(I0 const& i0,"},
{"lineNum":"  897","line":"                                                        I1 const& i1) const {"},
{"lineNum":"  898","line":"    return i0 + m_dim.N0 * i1;"},
{"lineNum":"  899","line":"  }"},
{"lineNum":"  900","line":""},
{"lineNum":"  901","line":"  // rank 3"},
{"lineNum":"  902","line":"  template <typename I0, typename I1, typename I2>"},
{"lineNum":"  903","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()(I0 const& i0,"},
{"lineNum":"  904","line":"                                                        I1 const& i1,"},
{"lineNum":"  905","line":"                                                        I2 const& i2) const {"},
{"lineNum":"  906","line":"    return i0 + m_dim.N0 * (i1 + m_dim.N1 * i2);"},
{"lineNum":"  907","line":"  }"},
{"lineNum":"  908","line":""},
{"lineNum":"  909","line":"  // rank 4"},
{"lineNum":"  910","line":"  template <typename I0, typename I1, typename I2, typename I3>"},
{"lineNum":"  911","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()(I0 const& i0,"},
{"lineNum":"  912","line":"                                                        I1 const& i1,"},
{"lineNum":"  913","line":"                                                        I2 const& i2,"},
{"lineNum":"  914","line":"                                                        I3 const& i3) const {"},
{"lineNum":"  915","line":"    return i0 + m_dim.N0 * (i1 + m_dim.N1 * (i2 + m_dim.N2 * i3));"},
{"lineNum":"  916","line":"  }"},
{"lineNum":"  917","line":""},
{"lineNum":"  918","line":"  // rank 5"},
{"lineNum":"  919","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4>"},
{"lineNum":"  920","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()(I0 const& i0,"},
{"lineNum":"  921","line":"                                                        I1 const& i1,"},
{"lineNum":"  922","line":"                                                        I2 const& i2,"},
{"lineNum":"  923","line":"                                                        I3 const& i3,"},
{"lineNum":"  924","line":"                                                        I4 const& i4) const {"},
{"lineNum":"  925","line":"    return i0 +"},
{"lineNum":"  926","line":"           m_dim.N0 * (i1 + m_dim.N1 * (i2 + m_dim.N2 * (i3 + m_dim.N3 * i4)));"},
{"lineNum":"  927","line":"  }"},
{"lineNum":"  928","line":""},
{"lineNum":"  929","line":"  // rank 6"},
{"lineNum":"  930","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4,"},
{"lineNum":"  931","line":"            typename I5>"},
{"lineNum":"  932","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()("},
{"lineNum":"  933","line":"      I0 const& i0, I1 const& i1, I2 const& i2, I3 const& i3, I4 const& i4,"},
{"lineNum":"  934","line":"      I5 const& i5) const {"},
{"lineNum":"  935","line":"    return i0 +"},
{"lineNum":"  936","line":"           m_dim.N0 *"},
{"lineNum":"  937","line":"               (i1 +"},
{"lineNum":"  938","line":"                m_dim.N1 *"},
{"lineNum":"  939","line":"                    (i2 + m_dim.N2 * (i3 + m_dim.N3 * (i4 + m_dim.N4 * i5))));"},
{"lineNum":"  940","line":"  }"},
{"lineNum":"  941","line":""},
{"lineNum":"  942","line":"  // rank 7"},
{"lineNum":"  943","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4,"},
{"lineNum":"  944","line":"            typename I5, typename I6>"},
{"lineNum":"  945","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()("},
{"lineNum":"  946","line":"      I0 const& i0, I1 const& i1, I2 const& i2, I3 const& i3, I4 const& i4,"},
{"lineNum":"  947","line":"      I5 const& i5, I6 const& i6) const {"},
{"lineNum":"  948","line":"    return i0 +"},
{"lineNum":"  949","line":"           m_dim.N0 *"},
{"lineNum":"  950","line":"               (i1 + m_dim.N1 *"},
{"lineNum":"  951","line":"                         (i2 + m_dim.N2 *"},
{"lineNum":"  952","line":"                                   (i3 + m_dim.N3 *"},
{"lineNum":"  953","line":"                                             (i4 + m_dim.N4 *"},
{"lineNum":"  954","line":"                                                       (i5 + m_dim.N5 * i6)))));"},
{"lineNum":"  955","line":"  }"},
{"lineNum":"  956","line":""},
{"lineNum":"  957","line":"  // rank 8"},
{"lineNum":"  958","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4,"},
{"lineNum":"  959","line":"            typename I5, typename I6, typename I7>"},
{"lineNum":"  960","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()("},
{"lineNum":"  961","line":"      I0 const& i0, I1 const& i1, I2 const& i2, I3 const& i3, I4 const& i4,"},
{"lineNum":"  962","line":"      I5 const& i5, I6 const& i6, I7 const& i7) const {"},
{"lineNum":"  963","line":"    return i0 +"},
{"lineNum":"  964","line":"           m_dim.N0 *"},
{"lineNum":"  965","line":"               (i1 +"},
{"lineNum":"  966","line":"                m_dim.N1 *"},
{"lineNum":"  967","line":"                    (i2 + m_dim.N2 *"},
{"lineNum":"  968","line":"                              (i3 + m_dim.N3 *"},
{"lineNum":"  969","line":"                                        (i4 + m_dim.N4 *"},
{"lineNum":"  970","line":"                                                  (i5 + m_dim.N5 *"},
{"lineNum":"  971","line":"                                                            (i6 + m_dim.N6 *"},
{"lineNum":"  972","line":"                                                                      i7))))));"},
{"lineNum":"  973","line":"  }"},
{"lineNum":"  974","line":""},
{"lineNum":"  975","line":"  //----------------------------------------"},
{"lineNum":"  976","line":""},
{"lineNum":"  977","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  978","line":"  constexpr array_layout layout() const {"},
{"lineNum":"  979","line":"    return array_layout(m_dim.N0, m_dim.N1, m_dim.N2, m_dim.N3, m_dim.N4,"},
{"lineNum":"  980","line":"                        m_dim.N5, m_dim.N6, m_dim.N7);"},
{"lineNum":"  981","line":"  }"},
{"lineNum":"  982","line":""},
{"lineNum":"  983","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_0() const {"},
{"lineNum":"  984","line":"    return m_dim.N0;"},
{"lineNum":"  985","line":"  }"},
{"lineNum":"  986","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_1() const {"},
{"lineNum":"  987","line":"    return m_dim.N1;"},
{"lineNum":"  988","line":"  }"},
{"lineNum":"  989","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_2() const {"},
{"lineNum":"  990","line":"    return m_dim.N2;"},
{"lineNum":"  991","line":"  }"},
{"lineNum":"  992","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_3() const {"},
{"lineNum":"  993","line":"    return m_dim.N3;"},
{"lineNum":"  994","line":"  }"},
{"lineNum":"  995","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_4() const {"},
{"lineNum":"  996","line":"    return m_dim.N4;"},
{"lineNum":"  997","line":"  }"},
{"lineNum":"  998","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_5() const {"},
{"lineNum":"  999","line":"    return m_dim.N5;"},
{"lineNum":" 1000","line":"  }"},
{"lineNum":" 1001","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_6() const {"},
{"lineNum":" 1002","line":"    return m_dim.N6;"},
{"lineNum":" 1003","line":"  }"},
{"lineNum":" 1004","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_7() const {"},
{"lineNum":" 1005","line":"    return m_dim.N7;"},
{"lineNum":" 1006","line":"  }"},
{"lineNum":" 1007","line":""},
{"lineNum":" 1008","line":"  /* Cardinality of the domain index space */"},
{"lineNum":" 1009","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1010","line":"  constexpr size_type size() const {"},
{"lineNum":" 1011","line":"    return m_dim.N0 * m_dim.N1 * m_dim.N2 * m_dim.N3 * m_dim.N4 * m_dim.N5 *"},
{"lineNum":" 1012","line":"           m_dim.N6 * m_dim.N7;"},
{"lineNum":" 1013","line":"  }"},
{"lineNum":" 1014","line":""},
{"lineNum":" 1015","line":"  /* Span of the range space */"},
{"lineNum":" 1016","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1017","line":"  constexpr size_type span() const {"},
{"lineNum":" 1018","line":"    return m_dim.N0 * m_dim.N1 * m_dim.N2 * m_dim.N3 * m_dim.N4 * m_dim.N5 *","class":"lineNoCov","hits":"0","possible_hits":"23",},
{"lineNum":" 1019","line":"           m_dim.N6 * m_dim.N7;"},
{"lineNum":" 1020","line":"  }"},
{"lineNum":" 1021","line":""},
{"lineNum":" 1022","line":"  KOKKOS_INLINE_FUNCTION constexpr bool span_is_contiguous() const {"},
{"lineNum":" 1023","line":"    return true;"},
{"lineNum":" 1024","line":"  }"},
{"lineNum":" 1025","line":""},
{"lineNum":" 1026","line":"  /* Strides of dimensions */"},
{"lineNum":" 1027","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_0() const { return 1; }"},
{"lineNum":" 1028","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_1() const {"},
{"lineNum":" 1029","line":"    return m_dim.N0;"},
{"lineNum":" 1030","line":"  }"},
{"lineNum":" 1031","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_2() const {"},
{"lineNum":" 1032","line":"    return m_dim.N0 * m_dim.N1;"},
{"lineNum":" 1033","line":"  }"},
{"lineNum":" 1034","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_3() const {"},
{"lineNum":" 1035","line":"    return m_dim.N0 * m_dim.N1 * m_dim.N2;"},
{"lineNum":" 1036","line":"  }"},
{"lineNum":" 1037","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_4() const {"},
{"lineNum":" 1038","line":"    return m_dim.N0 * m_dim.N1 * m_dim.N2 * m_dim.N3;"},
{"lineNum":" 1039","line":"  }"},
{"lineNum":" 1040","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_5() const {"},
{"lineNum":" 1041","line":"    return m_dim.N0 * m_dim.N1 * m_dim.N2 * m_dim.N3 * m_dim.N4;"},
{"lineNum":" 1042","line":"  }"},
{"lineNum":" 1043","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_6() const {"},
{"lineNum":" 1044","line":"    return m_dim.N0 * m_dim.N1 * m_dim.N2 * m_dim.N3 * m_dim.N4 * m_dim.N5;"},
{"lineNum":" 1045","line":"  }"},
{"lineNum":" 1046","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_7() const {"},
{"lineNum":" 1047","line":"    return m_dim.N0 * m_dim.N1 * m_dim.N2 * m_dim.N3 * m_dim.N4 * m_dim.N5 *"},
{"lineNum":" 1048","line":"           m_dim.N6;"},
{"lineNum":" 1049","line":"  }"},
{"lineNum":" 1050","line":""},
{"lineNum":" 1051","line":"  // Stride with [ rank ] value is the total length"},
{"lineNum":" 1052","line":"  template <typename iType>"},
{"lineNum":" 1053","line":"  KOKKOS_INLINE_FUNCTION void stride(iType* const s) const {"},
{"lineNum":" 1054","line":"    s[0] = 1;"},
{"lineNum":" 1055","line":"    if (0 < dimension_type::rank) {"},
{"lineNum":" 1056","line":"      s[1] = m_dim.N0;"},
{"lineNum":" 1057","line":"    }"},
{"lineNum":" 1058","line":"    if (1 < dimension_type::rank) {"},
{"lineNum":" 1059","line":"      s[2] = s[1] * m_dim.N1;"},
{"lineNum":" 1060","line":"    }"},
{"lineNum":" 1061","line":"    if (2 < dimension_type::rank) {"},
{"lineNum":" 1062","line":"      s[3] = s[2] * m_dim.N2;"},
{"lineNum":" 1063","line":"    }"},
{"lineNum":" 1064","line":"    if (3 < dimension_type::rank) {"},
{"lineNum":" 1065","line":"      s[4] = s[3] * m_dim.N3;"},
{"lineNum":" 1066","line":"    }"},
{"lineNum":" 1067","line":"    if (4 < dimension_type::rank) {"},
{"lineNum":" 1068","line":"      s[5] = s[4] * m_dim.N4;"},
{"lineNum":" 1069","line":"    }"},
{"lineNum":" 1070","line":"    if (5 < dimension_type::rank) {"},
{"lineNum":" 1071","line":"      s[6] = s[5] * m_dim.N5;"},
{"lineNum":" 1072","line":"    }"},
{"lineNum":" 1073","line":"    if (6 < dimension_type::rank) {"},
{"lineNum":" 1074","line":"      s[7] = s[6] * m_dim.N6;"},
{"lineNum":" 1075","line":"    }"},
{"lineNum":" 1076","line":"    if (7 < dimension_type::rank) {"},
{"lineNum":" 1077","line":"      s[8] = s[7] * m_dim.N7;"},
{"lineNum":" 1078","line":"    }"},
{"lineNum":" 1079","line":"  }"},
{"lineNum":" 1080","line":""},
{"lineNum":" 1081","line":"  //----------------------------------------"},
{"lineNum":" 1082","line":""},
{"lineNum":" 1083","line":"  // MSVC (16.5.5) + CUDA (10.2) did not generate the defaulted functions"},
{"lineNum":" 1084","line":"  // correct and errors out during compilation. Same for the other places where"},
{"lineNum":" 1085","line":"  // I changed this."},
{"lineNum":" 1086","line":"#ifdef KOKKOS_IMPL_WINDOWS_CUDA"},
{"lineNum":" 1087","line":"  KOKKOS_FUNCTION ViewOffset() : m_dim(dimension_type()) {}"},
{"lineNum":" 1088","line":"  KOKKOS_FUNCTION ViewOffset(const ViewOffset& src) { m_dim = src.m_dim; }"},
{"lineNum":" 1089","line":"  KOKKOS_FUNCTION ViewOffset& operator=(const ViewOffset& src) {"},
{"lineNum":" 1090","line":"    m_dim = src.m_dim;"},
{"lineNum":" 1091","line":"    return *this;"},
{"lineNum":" 1092","line":"  }"},
{"lineNum":" 1093","line":"#else"},
{"lineNum":" 1094","line":"  ViewOffset()                  = default;"},
{"lineNum":" 1095","line":"  ViewOffset(const ViewOffset&) = default;"},
{"lineNum":" 1096","line":"  ViewOffset& operator=(const ViewOffset&) = default;"},
{"lineNum":" 1097","line":"#endif"},
{"lineNum":" 1098","line":""},
{"lineNum":" 1099","line":"  template <unsigned TrivialScalarSize>"},
{"lineNum":" 1100","line":"  KOKKOS_INLINE_FUNCTION constexpr ViewOffset("},
{"lineNum":" 1101","line":"      std::integral_constant<unsigned, TrivialScalarSize> const&,"},
{"lineNum":" 1102","line":"      Kokkos::LayoutLeft const& arg_layout)"},
{"lineNum":" 1103","line":"      : m_dim(arg_layout.dimension[0], 0, 0, 0, 0, 0, 0, 0) {}","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":" 1104","line":""},
{"lineNum":" 1105","line":"  template <class DimRHS>"},
{"lineNum":" 1106","line":"  KOKKOS_INLINE_FUNCTION constexpr ViewOffset("},
{"lineNum":" 1107","line":"      const ViewOffset<DimRHS, Kokkos::LayoutLeft, void>& rhs)"},
{"lineNum":" 1108","line":"      : m_dim(rhs.m_dim.N0, rhs.m_dim.N1, rhs.m_dim.N2, rhs.m_dim.N3,"},
{"lineNum":" 1109","line":"              rhs.m_dim.N4, rhs.m_dim.N5, rhs.m_dim.N6, rhs.m_dim.N7) {"},
{"lineNum":" 1110","line":"    static_assert(int(DimRHS::rank) == int(dimension_type::rank),"},
{"lineNum":" 1111","line":"                  \"ViewOffset assignment requires equal rank\");"},
{"lineNum":" 1112","line":"    // Also requires equal static dimensions ..."},
{"lineNum":" 1113","line":"  }"},
{"lineNum":" 1114","line":""},
{"lineNum":" 1115","line":"  template <class DimRHS>"},
{"lineNum":" 1116","line":"  KOKKOS_INLINE_FUNCTION constexpr ViewOffset("},
{"lineNum":" 1117","line":"      const ViewOffset<DimRHS, Kokkos::LayoutRight, void>& rhs)"},
{"lineNum":" 1118","line":"      : m_dim(rhs.m_dim.N0, 0, 0, 0, 0, 0, 0, 0) {","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":" 1119","line":"    static_assert((DimRHS::rank == 0 && dimension_type::rank == 0) ||"},
{"lineNum":" 1120","line":"                      (DimRHS::rank == 1 && dimension_type::rank == 1 &&"},
{"lineNum":" 1121","line":"                       dimension_type::rank_dynamic == 1),"},
{"lineNum":" 1122","line":"                  \"ViewOffset LayoutLeft and LayoutRight are only compatible \""},
{"lineNum":" 1123","line":"                  \"when rank <= 1\");"},
{"lineNum":" 1124","line":"  }"},
{"lineNum":" 1125","line":""},
{"lineNum":" 1126","line":"  template <class DimRHS>"},
{"lineNum":" 1127","line":"  KOKKOS_INLINE_FUNCTION ViewOffset("},
{"lineNum":" 1128","line":"      const ViewOffset<DimRHS, Kokkos::LayoutStride, void>& rhs)"},
{"lineNum":" 1129","line":"      : m_dim(rhs.m_dim.N0, 0, 0, 0, 0, 0, 0, 0) {"},
{"lineNum":" 1130","line":"    if (rhs.m_stride.S0 != 1) {"},
{"lineNum":" 1131","line":"      Kokkos::abort("},
{"lineNum":" 1132","line":"          \"Kokkos::Impl::ViewOffset assignment of LayoutLeft from LayoutStride \""},
{"lineNum":" 1133","line":"          \" requires stride == 1\");"},
{"lineNum":" 1134","line":"    }"},
{"lineNum":" 1135","line":"  }"},
{"lineNum":" 1136","line":""},
{"lineNum":" 1137","line":"  //----------------------------------------"},
{"lineNum":" 1138","line":"  // Subview construction"},
{"lineNum":" 1139","line":""},
{"lineNum":" 1140","line":"  template <class DimRHS>"},
{"lineNum":" 1141","line":"  KOKKOS_INLINE_FUNCTION constexpr ViewOffset("},
{"lineNum":" 1142","line":"      const ViewOffset<DimRHS, Kokkos::LayoutLeft, void>&,"},
{"lineNum":" 1143","line":"      const SubviewExtents<DimRHS::rank, dimension_type::rank>& sub)"},
{"lineNum":" 1144","line":"      : m_dim(sub.range_extent(0), 0, 0, 0, 0, 0, 0, 0) {"},
{"lineNum":" 1145","line":"    static_assert((0 == dimension_type::rank_dynamic) ||"},
{"lineNum":" 1146","line":"                      (1 == dimension_type::rank &&"},
{"lineNum":" 1147","line":"                       1 == dimension_type::rank_dynamic && 1 <= DimRHS::rank),"},
{"lineNum":" 1148","line":"                  \"ViewOffset subview construction requires compatible rank\");"},
{"lineNum":" 1149","line":"  }"},
{"lineNum":" 1150","line":"};"},
{"lineNum":" 1151","line":""},
{"lineNum":" 1152","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1153","line":"// LayoutLeft AND ( 1 < rank AND 0 < rank_dynamic ) : has padding / striding"},
{"lineNum":" 1154","line":"template <class Dimension>"},
{"lineNum":" 1155","line":"struct ViewOffset<"},
{"lineNum":" 1156","line":"    Dimension, Kokkos::LayoutLeft,"},
{"lineNum":" 1157","line":"    typename std::enable_if<(1 < Dimension::rank &&"},
{"lineNum":" 1158","line":"                             0 < Dimension::rank_dynamic)>::type> {"},
{"lineNum":" 1159","line":"  using is_mapping_plugin = std::true_type;"},
{"lineNum":" 1160","line":"  using is_regular        = std::true_type;"},
{"lineNum":" 1161","line":""},
{"lineNum":" 1162","line":"  using size_type      = size_t;"},
{"lineNum":" 1163","line":"  using dimension_type = Dimension;"},
{"lineNum":" 1164","line":"  using array_layout   = Kokkos::LayoutLeft;"},
{"lineNum":" 1165","line":""},
{"lineNum":" 1166","line":"  dimension_type m_dim;"},
{"lineNum":" 1167","line":"  size_type m_stride;"},
{"lineNum":" 1168","line":""},
{"lineNum":" 1169","line":"  //----------------------------------------"},
{"lineNum":" 1170","line":""},
{"lineNum":" 1171","line":"  // rank 1"},
{"lineNum":" 1172","line":"  template <typename I0>"},
{"lineNum":" 1173","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()(I0 const& i0) const {"},
{"lineNum":" 1174","line":"    return i0;"},
{"lineNum":" 1175","line":"  }"},
{"lineNum":" 1176","line":""},
{"lineNum":" 1177","line":"  // rank 2"},
{"lineNum":" 1178","line":"  template <typename I0, typename I1>"},
{"lineNum":" 1179","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()(I0 const& i0,"},
{"lineNum":" 1180","line":"                                                        I1 const& i1) const {"},
{"lineNum":" 1181","line":"    return i0 + m_stride * i1;"},
{"lineNum":" 1182","line":"  }"},
{"lineNum":" 1183","line":""},
{"lineNum":" 1184","line":"  // rank 3"},
{"lineNum":" 1185","line":"  template <typename I0, typename I1, typename I2>"},
{"lineNum":" 1186","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()(I0 const& i0,"},
{"lineNum":" 1187","line":"                                                        I1 const& i1,"},
{"lineNum":" 1188","line":"                                                        I2 const& i2) const {"},
{"lineNum":" 1189","line":"    return i0 + m_stride * (i1 + m_dim.N1 * i2);"},
{"lineNum":" 1190","line":"  }"},
{"lineNum":" 1191","line":""},
{"lineNum":" 1192","line":"  // rank 4"},
{"lineNum":" 1193","line":"  template <typename I0, typename I1, typename I2, typename I3>"},
{"lineNum":" 1194","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()(I0 const& i0,"},
{"lineNum":" 1195","line":"                                                        I1 const& i1,"},
{"lineNum":" 1196","line":"                                                        I2 const& i2,"},
{"lineNum":" 1197","line":"                                                        I3 const& i3) const {"},
{"lineNum":" 1198","line":"    return i0 + m_stride * (i1 + m_dim.N1 * (i2 + m_dim.N2 * i3));"},
{"lineNum":" 1199","line":"  }"},
{"lineNum":" 1200","line":""},
{"lineNum":" 1201","line":"  // rank 5"},
{"lineNum":" 1202","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4>"},
{"lineNum":" 1203","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()(I0 const& i0,"},
{"lineNum":" 1204","line":"                                                        I1 const& i1,"},
{"lineNum":" 1205","line":"                                                        I2 const& i2,"},
{"lineNum":" 1206","line":"                                                        I3 const& i3,"},
{"lineNum":" 1207","line":"                                                        I4 const& i4) const {"},
{"lineNum":" 1208","line":"    return i0 +"},
{"lineNum":" 1209","line":"           m_stride * (i1 + m_dim.N1 * (i2 + m_dim.N2 * (i3 + m_dim.N3 * i4)));"},
{"lineNum":" 1210","line":"  }"},
{"lineNum":" 1211","line":""},
{"lineNum":" 1212","line":"  // rank 6"},
{"lineNum":" 1213","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4,"},
{"lineNum":" 1214","line":"            typename I5>"},
{"lineNum":" 1215","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()("},
{"lineNum":" 1216","line":"      I0 const& i0, I1 const& i1, I2 const& i2, I3 const& i3, I4 const& i4,"},
{"lineNum":" 1217","line":"      I5 const& i5) const {"},
{"lineNum":" 1218","line":"    return i0 +"},
{"lineNum":" 1219","line":"           m_stride *"},
{"lineNum":" 1220","line":"               (i1 +"},
{"lineNum":" 1221","line":"                m_dim.N1 *"},
{"lineNum":" 1222","line":"                    (i2 + m_dim.N2 * (i3 + m_dim.N3 * (i4 + m_dim.N4 * i5))));"},
{"lineNum":" 1223","line":"  }"},
{"lineNum":" 1224","line":""},
{"lineNum":" 1225","line":"  // rank 7"},
{"lineNum":" 1226","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4,"},
{"lineNum":" 1227","line":"            typename I5, typename I6>"},
{"lineNum":" 1228","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()("},
{"lineNum":" 1229","line":"      I0 const& i0, I1 const& i1, I2 const& i2, I3 const& i3, I4 const& i4,"},
{"lineNum":" 1230","line":"      I5 const& i5, I6 const& i6) const {"},
{"lineNum":" 1231","line":"    return i0 +"},
{"lineNum":" 1232","line":"           m_stride *"},
{"lineNum":" 1233","line":"               (i1 + m_dim.N1 *"},
{"lineNum":" 1234","line":"                         (i2 + m_dim.N2 *"},
{"lineNum":" 1235","line":"                                   (i3 + m_dim.N3 *"},
{"lineNum":" 1236","line":"                                             (i4 + m_dim.N4 *"},
{"lineNum":" 1237","line":"                                                       (i5 + m_dim.N5 * i6)))));"},
{"lineNum":" 1238","line":"  }"},
{"lineNum":" 1239","line":""},
{"lineNum":" 1240","line":"  // rank 8"},
{"lineNum":" 1241","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4,"},
{"lineNum":" 1242","line":"            typename I5, typename I6, typename I7>"},
{"lineNum":" 1243","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()("},
{"lineNum":" 1244","line":"      I0 const& i0, I1 const& i1, I2 const& i2, I3 const& i3, I4 const& i4,"},
{"lineNum":" 1245","line":"      I5 const& i5, I6 const& i6, I7 const& i7) const {"},
{"lineNum":" 1246","line":"    return i0 +"},
{"lineNum":" 1247","line":"           m_stride *","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1248","line":"               (i1 +"},
{"lineNum":" 1249","line":"                m_dim.N1 *"},
{"lineNum":" 1250","line":"                    (i2 + m_dim.N2 *"},
{"lineNum":" 1251","line":"                              (i3 + m_dim.N3 *"},
{"lineNum":" 1252","line":"                                        (i4 + m_dim.N4 *"},
{"lineNum":" 1253","line":"                                                  (i5 + m_dim.N5 *"},
{"lineNum":" 1254","line":"                                                            (i6 + m_dim.N6 *"},
{"lineNum":" 1255","line":"                                                                      i7))))));"},
{"lineNum":" 1256","line":"  }"},
{"lineNum":" 1257","line":""},
{"lineNum":" 1258","line":"  //----------------------------------------"},
{"lineNum":" 1259","line":""},
{"lineNum":" 1260","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1261","line":"  constexpr array_layout layout() const {"},
{"lineNum":" 1262","line":"    return array_layout(m_dim.N0, m_dim.N1, m_dim.N2, m_dim.N3, m_dim.N4,"},
{"lineNum":" 1263","line":"                        m_dim.N5, m_dim.N6, m_dim.N7);"},
{"lineNum":" 1264","line":"  }"},
{"lineNum":" 1265","line":""},
{"lineNum":" 1266","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_0() const {"},
{"lineNum":" 1267","line":"    return m_dim.N0;"},
{"lineNum":" 1268","line":"  }"},
{"lineNum":" 1269","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_1() const {"},
{"lineNum":" 1270","line":"    return m_dim.N1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1271","line":"  }"},
{"lineNum":" 1272","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_2() const {"},
{"lineNum":" 1273","line":"    return m_dim.N2;"},
{"lineNum":" 1274","line":"  }"},
{"lineNum":" 1275","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_3() const {"},
{"lineNum":" 1276","line":"    return m_dim.N3;"},
{"lineNum":" 1277","line":"  }"},
{"lineNum":" 1278","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_4() const {"},
{"lineNum":" 1279","line":"    return m_dim.N4;"},
{"lineNum":" 1280","line":"  }"},
{"lineNum":" 1281","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_5() const {"},
{"lineNum":" 1282","line":"    return m_dim.N5;"},
{"lineNum":" 1283","line":"  }"},
{"lineNum":" 1284","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_6() const {"},
{"lineNum":" 1285","line":"    return m_dim.N6;"},
{"lineNum":" 1286","line":"  }"},
{"lineNum":" 1287","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_7() const {"},
{"lineNum":" 1288","line":"    return m_dim.N7;"},
{"lineNum":" 1289","line":"  }"},
{"lineNum":" 1290","line":""},
{"lineNum":" 1291","line":"  /* Cardinality of the domain index space */"},
{"lineNum":" 1292","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1293","line":"  constexpr size_type size() const {"},
{"lineNum":" 1294","line":"    return m_dim.N0 * m_dim.N1 * m_dim.N2 * m_dim.N3 * m_dim.N4 * m_dim.N5 *"},
{"lineNum":" 1295","line":"           m_dim.N6 * m_dim.N7;"},
{"lineNum":" 1296","line":"  }"},
{"lineNum":" 1297","line":""},
{"lineNum":" 1298","line":"  /* Span of the range space */"},
{"lineNum":" 1299","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1300","line":"  constexpr size_type span() const {"},
{"lineNum":" 1301","line":"    return (m_dim.N0 > size_type(0) ? m_stride : size_type(0)) * m_dim.N1 *","class":"lineNoCov","hits":"0","possible_hits":"62",},
{"lineNum":" 1302","line":"           m_dim.N2 * m_dim.N3 * m_dim.N4 * m_dim.N5 * m_dim.N6 * m_dim.N7;"},
{"lineNum":" 1303","line":"  }"},
{"lineNum":" 1304","line":""},
{"lineNum":" 1305","line":"  KOKKOS_INLINE_FUNCTION constexpr bool span_is_contiguous() const {"},
{"lineNum":" 1306","line":"    return m_stride == m_dim.N0;","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":" 1307","line":"  }"},
{"lineNum":" 1308","line":""},
{"lineNum":" 1309","line":"  /* Strides of dimensions */"},
{"lineNum":" 1310","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_0() const { return 1; }"},
{"lineNum":" 1311","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_1() const {"},
{"lineNum":" 1312","line":"    return m_stride;","class":"lineNoCov","hits":"0","possible_hits":"49",},
{"lineNum":" 1313","line":"  }"},
{"lineNum":" 1314","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_2() const {"},
{"lineNum":" 1315","line":"    return m_stride * m_dim.N1;"},
{"lineNum":" 1316","line":"  }"},
{"lineNum":" 1317","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_3() const {"},
{"lineNum":" 1318","line":"    return m_stride * m_dim.N1 * m_dim.N2;"},
{"lineNum":" 1319","line":"  }"},
{"lineNum":" 1320","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_4() const {"},
{"lineNum":" 1321","line":"    return m_stride * m_dim.N1 * m_dim.N2 * m_dim.N3;"},
{"lineNum":" 1322","line":"  }"},
{"lineNum":" 1323","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_5() const {"},
{"lineNum":" 1324","line":"    return m_stride * m_dim.N1 * m_dim.N2 * m_dim.N3 * m_dim.N4;"},
{"lineNum":" 1325","line":"  }"},
{"lineNum":" 1326","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_6() const {"},
{"lineNum":" 1327","line":"    return m_stride * m_dim.N1 * m_dim.N2 * m_dim.N3 * m_dim.N4 * m_dim.N5;"},
{"lineNum":" 1328","line":"  }"},
{"lineNum":" 1329","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_7() const {"},
{"lineNum":" 1330","line":"    return m_stride * m_dim.N1 * m_dim.N2 * m_dim.N3 * m_dim.N4 * m_dim.N5 *"},
{"lineNum":" 1331","line":"           m_dim.N6;"},
{"lineNum":" 1332","line":"  }"},
{"lineNum":" 1333","line":""},
{"lineNum":" 1334","line":"  // Stride with [ rank ] value is the total length"},
{"lineNum":" 1335","line":"  template <typename iType>"},
{"lineNum":" 1336","line":"  KOKKOS_INLINE_FUNCTION void stride(iType* const s) const {"},
{"lineNum":" 1337","line":"    s[0] = 1;"},
{"lineNum":" 1338","line":"    if (0 < dimension_type::rank) {"},
{"lineNum":" 1339","line":"      s[1] = m_stride;","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1340","line":"    }"},
{"lineNum":" 1341","line":"    if (1 < dimension_type::rank) {"},
{"lineNum":" 1342","line":"      s[2] = s[1] * m_dim.N1;"},
{"lineNum":" 1343","line":"    }"},
{"lineNum":" 1344","line":"    if (2 < dimension_type::rank) {"},
{"lineNum":" 1345","line":"      s[3] = s[2] * m_dim.N2;"},
{"lineNum":" 1346","line":"    }"},
{"lineNum":" 1347","line":"    if (3 < dimension_type::rank) {"},
{"lineNum":" 1348","line":"      s[4] = s[3] * m_dim.N3;"},
{"lineNum":" 1349","line":"    }"},
{"lineNum":" 1350","line":"    if (4 < dimension_type::rank) {"},
{"lineNum":" 1351","line":"      s[5] = s[4] * m_dim.N4;"},
{"lineNum":" 1352","line":"    }"},
{"lineNum":" 1353","line":"    if (5 < dimension_type::rank) {"},
{"lineNum":" 1354","line":"      s[6] = s[5] * m_dim.N5;"},
{"lineNum":" 1355","line":"    }"},
{"lineNum":" 1356","line":"    if (6 < dimension_type::rank) {"},
{"lineNum":" 1357","line":"      s[7] = s[6] * m_dim.N6;"},
{"lineNum":" 1358","line":"    }"},
{"lineNum":" 1359","line":"    if (7 < dimension_type::rank) {"},
{"lineNum":" 1360","line":"      s[8] = s[7] * m_dim.N7;"},
{"lineNum":" 1361","line":"    }"},
{"lineNum":" 1362","line":"  }"},
{"lineNum":" 1363","line":""},
{"lineNum":" 1364","line":"  //----------------------------------------"},
{"lineNum":" 1365","line":""},
{"lineNum":" 1366","line":" private:"},
{"lineNum":" 1367","line":"  template <unsigned TrivialScalarSize>"},
{"lineNum":" 1368","line":"  struct Padding {"},
{"lineNum":" 1369","line":"    enum {"},
{"lineNum":" 1370","line":"      div = TrivialScalarSize == 0"},
{"lineNum":" 1371","line":"                ? 0"},
{"lineNum":" 1372","line":"                : Kokkos::Impl::MEMORY_ALIGNMENT /"},
{"lineNum":" 1373","line":"                      (TrivialScalarSize ? TrivialScalarSize : 1)"},
{"lineNum":" 1374","line":"    };"},
{"lineNum":" 1375","line":"    enum {"},
{"lineNum":" 1376","line":"      mod = TrivialScalarSize == 0"},
{"lineNum":" 1377","line":"                ? 0"},
{"lineNum":" 1378","line":"                : Kokkos::Impl::MEMORY_ALIGNMENT %"},
{"lineNum":" 1379","line":"                      (TrivialScalarSize ? TrivialScalarSize : 1)"},
{"lineNum":" 1380","line":"    };"},
{"lineNum":" 1381","line":""},
{"lineNum":" 1382","line":"    // If memory alignment is a multiple of the trivial scalar size then attempt"},
{"lineNum":" 1383","line":"    // to align."},
{"lineNum":" 1384","line":"    enum { align = 0 != TrivialScalarSize && 0 == mod ? div : 0 };"},
{"lineNum":" 1385","line":"    enum {"},
{"lineNum":" 1386","line":"      div_ok = (div != 0) ? div : 1"},
{"lineNum":" 1387","line":"    };  // To valid modulo zero in constexpr"},
{"lineNum":" 1388","line":""},
{"lineNum":" 1389","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1390","line":"    static constexpr size_t stride(size_t const N) {"},
{"lineNum":" 1391","line":"      return ((align != 0) &&"},
{"lineNum":" 1392","line":"              ((Kokkos::Impl::MEMORY_ALIGNMENT_THRESHOLD * align) < N) &&","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1393","line":"              ((N % div_ok) != 0))"},
{"lineNum":" 1394","line":"                 ? N + align - (N % div_ok)"},
{"lineNum":" 1395","line":"                 : N;"},
{"lineNum":" 1396","line":"    }"},
{"lineNum":" 1397","line":"  };"},
{"lineNum":" 1398","line":""},
{"lineNum":" 1399","line":" public:"},
{"lineNum":" 1400","line":"  // MSVC (16.5.5) + CUDA (10.2) did not generate the defaulted functions"},
{"lineNum":" 1401","line":"  // correct and errors out during compilation. Same for the other places where"},
{"lineNum":" 1402","line":"  // I changed this."},
{"lineNum":" 1403","line":"#ifdef KOKKOS_IMPL_WINDOWS_CUDA"},
{"lineNum":" 1404","line":"  KOKKOS_FUNCTION ViewOffset() : m_dim(dimension_type()), m_stride(0) {}"},
{"lineNum":" 1405","line":"  KOKKOS_FUNCTION ViewOffset(const ViewOffset& src) {"},
{"lineNum":" 1406","line":"    m_dim    = src.m_dim;"},
{"lineNum":" 1407","line":"    m_stride = src.m_stride;"},
{"lineNum":" 1408","line":"  }"},
{"lineNum":" 1409","line":"  KOKKOS_FUNCTION ViewOffset& operator=(const ViewOffset& src) {"},
{"lineNum":" 1410","line":"    m_dim    = src.m_dim;"},
{"lineNum":" 1411","line":"    m_stride = src.m_stride;"},
{"lineNum":" 1412","line":"    return *this;"},
{"lineNum":" 1413","line":"  }"},
{"lineNum":" 1414","line":"#else"},
{"lineNum":" 1415","line":""},
{"lineNum":" 1416","line":"  ViewOffset()                  = default;"},
{"lineNum":" 1417","line":"  ViewOffset(const ViewOffset&) = default;"},
{"lineNum":" 1418","line":"  ViewOffset& operator=(const ViewOffset&) = default;"},
{"lineNum":" 1419","line":"#endif"},
{"lineNum":" 1420","line":""},
{"lineNum":" 1421","line":"  /* Enable padding for trivial scalar types with non-zero trivial scalar size"},
{"lineNum":" 1422","line":"   */"},
{"lineNum":" 1423","line":"  template <unsigned TrivialScalarSize>"},
{"lineNum":" 1424","line":"  KOKKOS_INLINE_FUNCTION constexpr ViewOffset("},
{"lineNum":" 1425","line":"      std::integral_constant<unsigned, TrivialScalarSize> const&,"},
{"lineNum":" 1426","line":"      Kokkos::LayoutLeft const& arg_layout)"},
{"lineNum":" 1427","line":"      : m_dim(arg_layout.dimension[0], arg_layout.dimension[1],","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1428","line":"              arg_layout.dimension[2], arg_layout.dimension[3],"},
{"lineNum":" 1429","line":"              arg_layout.dimension[4], arg_layout.dimension[5],"},
{"lineNum":" 1430","line":"              arg_layout.dimension[6], arg_layout.dimension[7]),"},
{"lineNum":" 1431","line":"        m_stride(Padding<TrivialScalarSize>::stride(arg_layout.dimension[0])) {}"},
{"lineNum":" 1432","line":""},
{"lineNum":" 1433","line":"  template <class DimRHS>"},
{"lineNum":" 1434","line":"  KOKKOS_INLINE_FUNCTION constexpr ViewOffset("},
{"lineNum":" 1435","line":"      const ViewOffset<DimRHS, Kokkos::LayoutLeft, void>& rhs)"},
{"lineNum":" 1436","line":"      : m_dim(rhs.m_dim.N0, rhs.m_dim.N1, rhs.m_dim.N2, rhs.m_dim.N3,","class":"lineNoCov","hits":"0","possible_hits":"36",},
{"lineNum":" 1437","line":"              rhs.m_dim.N4, rhs.m_dim.N5, rhs.m_dim.N6, rhs.m_dim.N7),"},
{"lineNum":" 1438","line":"        m_stride(rhs.stride_1()) {"},
{"lineNum":" 1439","line":"    static_assert(int(DimRHS::rank) == int(dimension_type::rank),"},
{"lineNum":" 1440","line":"                  \"ViewOffset assignment requires equal rank\");"},
{"lineNum":" 1441","line":"    // Also requires equal static dimensions ..."},
{"lineNum":" 1442","line":"  }"},
{"lineNum":" 1443","line":""},
{"lineNum":" 1444","line":"  template <class DimRHS>"},
{"lineNum":" 1445","line":"  KOKKOS_INLINE_FUNCTION ViewOffset("},
{"lineNum":" 1446","line":"      const ViewOffset<DimRHS, Kokkos::LayoutStride, void>& rhs)"},
{"lineNum":" 1447","line":"      : m_dim(rhs.m_dim.N0, rhs.m_dim.N1, rhs.m_dim.N2, rhs.m_dim.N3,"},
{"lineNum":" 1448","line":"              rhs.m_dim.N4, rhs.m_dim.N5, rhs.m_dim.N6, rhs.m_dim.N7),"},
{"lineNum":" 1449","line":"        m_stride(rhs.stride_1()) {"},
{"lineNum":" 1450","line":"    if (rhs.m_stride.S0 != 1) {"},
{"lineNum":" 1451","line":"      Kokkos::abort("},
{"lineNum":" 1452","line":"          \"Kokkos::Impl::ViewOffset assignment of LayoutLeft from LayoutStride \""},
{"lineNum":" 1453","line":"          \"requires stride == 1\");"},
{"lineNum":" 1454","line":"    }"},
{"lineNum":" 1455","line":"  }"},
{"lineNum":" 1456","line":""},
{"lineNum":" 1457","line":"  //----------------------------------------"},
{"lineNum":" 1458","line":"  // Subview construction"},
{"lineNum":" 1459","line":"  // This subview must be 2 == rank and 2 == rank_dynamic"},
{"lineNum":" 1460","line":"  // due to only having stride #0."},
{"lineNum":" 1461","line":"  // The source dimension #0 must be non-zero for stride-one leading dimension."},
{"lineNum":" 1462","line":"  // At most subsequent dimension can be non-zero."},
{"lineNum":" 1463","line":""},
{"lineNum":" 1464","line":"  template <class DimRHS>"},
{"lineNum":" 1465","line":"  KOKKOS_INLINE_FUNCTION constexpr ViewOffset("},
{"lineNum":" 1466","line":"      const ViewOffset<DimRHS, Kokkos::LayoutLeft, void>& rhs,"},
{"lineNum":" 1467","line":"      const SubviewExtents<DimRHS::rank, dimension_type::rank>& sub)"},
{"lineNum":" 1468","line":"      : m_dim(sub.range_extent(0), sub.range_extent(1), sub.range_extent(2),"},
{"lineNum":" 1469","line":"              sub.range_extent(3), sub.range_extent(4), sub.range_extent(5),"},
{"lineNum":" 1470","line":"              sub.range_extent(6), sub.range_extent(7)),"},
{"lineNum":" 1471","line":"        m_stride("},
{"lineNum":" 1472","line":"            (1 == sub.range_index(1)"},
{"lineNum":" 1473","line":"                 ? rhs.stride_1()"},
{"lineNum":" 1474","line":"                 : (2 == sub.range_index(1)"},
{"lineNum":" 1475","line":"                        ? rhs.stride_2()"},
{"lineNum":" 1476","line":"                        : (3 == sub.range_index(1)"},
{"lineNum":" 1477","line":"                               ? rhs.stride_3()"},
{"lineNum":" 1478","line":"                               : (4 == sub.range_index(1)"},
{"lineNum":" 1479","line":"                                      ? rhs.stride_4()"},
{"lineNum":" 1480","line":"                                      : (5 == sub.range_index(1)"},
{"lineNum":" 1481","line":"                                             ? rhs.stride_5()"},
{"lineNum":" 1482","line":"                                             : (6 == sub.range_index(1)"},
{"lineNum":" 1483","line":"                                                    ? rhs.stride_6()"},
{"lineNum":" 1484","line":"                                                    : (7 == sub.range_index(1)"},
{"lineNum":" 1485","line":"                                                           ? rhs.stride_7()"},
{"lineNum":" 1486","line":"                                                           : 0)))))))) {"},
{"lineNum":" 1487","line":"    // static_assert( ( 2 == dimension_type::rank ) &&"},
{"lineNum":" 1488","line":"    //               ( 2 == dimension_type::rank_dynamic ) &&"},
{"lineNum":" 1489","line":"    //               ( 2 <= DimRHS::rank )"},
{"lineNum":" 1490","line":"    //             , \"ViewOffset subview construction requires compatible rank\""},
{"lineNum":" 1491","line":"    //             );"},
{"lineNum":" 1492","line":"  }"},
{"lineNum":" 1493","line":"};"},
{"lineNum":" 1494","line":""},
{"lineNum":" 1495","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1496","line":"// LayoutRight AND ( 1 >= rank OR 0 == rank_dynamic ) : no padding / striding"},
{"lineNum":" 1497","line":"template <class Dimension>"},
{"lineNum":" 1498","line":"struct ViewOffset<"},
{"lineNum":" 1499","line":"    Dimension, Kokkos::LayoutRight,"},
{"lineNum":" 1500","line":"    typename std::enable_if<(1 >= Dimension::rank ||"},
{"lineNum":" 1501","line":"                             0 == Dimension::rank_dynamic)>::type> {"},
{"lineNum":" 1502","line":"  using is_mapping_plugin = std::true_type;"},
{"lineNum":" 1503","line":"  using is_regular        = std::true_type;"},
{"lineNum":" 1504","line":""},
{"lineNum":" 1505","line":"  using size_type      = size_t;"},
{"lineNum":" 1506","line":"  using dimension_type = Dimension;"},
{"lineNum":" 1507","line":"  using array_layout   = Kokkos::LayoutRight;"},
{"lineNum":" 1508","line":""},
{"lineNum":" 1509","line":"  dimension_type m_dim;"},
{"lineNum":" 1510","line":""},
{"lineNum":" 1511","line":"  //----------------------------------------"},
{"lineNum":" 1512","line":""},
{"lineNum":" 1513","line":"  // rank 1"},
{"lineNum":" 1514","line":"  template <typename I0>"},
{"lineNum":" 1515","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()(I0 const& i0) const {"},
{"lineNum":" 1516","line":"    return i0;"},
{"lineNum":" 1517","line":"  }"},
{"lineNum":" 1518","line":""},
{"lineNum":" 1519","line":"  // rank 2"},
{"lineNum":" 1520","line":"  template <typename I0, typename I1>"},
{"lineNum":" 1521","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()(I0 const& i0,"},
{"lineNum":" 1522","line":"                                                        I1 const& i1) const {"},
{"lineNum":" 1523","line":"    return i1 + m_dim.N1 * i0;"},
{"lineNum":" 1524","line":"  }"},
{"lineNum":" 1525","line":""},
{"lineNum":" 1526","line":"  // rank 3"},
{"lineNum":" 1527","line":"  template <typename I0, typename I1, typename I2>"},
{"lineNum":" 1528","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()(I0 const& i0,"},
{"lineNum":" 1529","line":"                                                        I1 const& i1,"},
{"lineNum":" 1530","line":"                                                        I2 const& i2) const {"},
{"lineNum":" 1531","line":"    return i2 + m_dim.N2 * (i1 + m_dim.N1 * (i0));"},
{"lineNum":" 1532","line":"  }"},
{"lineNum":" 1533","line":""},
{"lineNum":" 1534","line":"  // rank 4"},
{"lineNum":" 1535","line":"  template <typename I0, typename I1, typename I2, typename I3>"},
{"lineNum":" 1536","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()(I0 const& i0,"},
{"lineNum":" 1537","line":"                                                        I1 const& i1,"},
{"lineNum":" 1538","line":"                                                        I2 const& i2,"},
{"lineNum":" 1539","line":"                                                        I3 const& i3) const {"},
{"lineNum":" 1540","line":"    return i3 + m_dim.N3 * (i2 + m_dim.N2 * (i1 + m_dim.N1 * (i0)));"},
{"lineNum":" 1541","line":"  }"},
{"lineNum":" 1542","line":""},
{"lineNum":" 1543","line":"  // rank 5"},
{"lineNum":" 1544","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4>"},
{"lineNum":" 1545","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()(I0 const& i0,"},
{"lineNum":" 1546","line":"                                                        I1 const& i1,"},
{"lineNum":" 1547","line":"                                                        I2 const& i2,"},
{"lineNum":" 1548","line":"                                                        I3 const& i3,"},
{"lineNum":" 1549","line":"                                                        I4 const& i4) const {"},
{"lineNum":" 1550","line":"    return i4 + m_dim.N4 *"},
{"lineNum":" 1551","line":"                    (i3 + m_dim.N3 * (i2 + m_dim.N2 * (i1 + m_dim.N1 * (i0))));"},
{"lineNum":" 1552","line":"  }"},
{"lineNum":" 1553","line":""},
{"lineNum":" 1554","line":"  // rank 6"},
{"lineNum":" 1555","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4,"},
{"lineNum":" 1556","line":"            typename I5>"},
{"lineNum":" 1557","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()("},
{"lineNum":" 1558","line":"      I0 const& i0, I1 const& i1, I2 const& i2, I3 const& i3, I4 const& i4,"},
{"lineNum":" 1559","line":"      I5 const& i5) const {"},
{"lineNum":" 1560","line":"    return i5 +"},
{"lineNum":" 1561","line":"           m_dim.N5 *"},
{"lineNum":" 1562","line":"               (i4 +"},
{"lineNum":" 1563","line":"                m_dim.N4 *"},
{"lineNum":" 1564","line":"                    (i3 + m_dim.N3 * (i2 + m_dim.N2 * (i1 + m_dim.N1 * (i0)))));"},
{"lineNum":" 1565","line":"  }"},
{"lineNum":" 1566","line":""},
{"lineNum":" 1567","line":"  // rank 7"},
{"lineNum":" 1568","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4,"},
{"lineNum":" 1569","line":"            typename I5, typename I6>"},
{"lineNum":" 1570","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()("},
{"lineNum":" 1571","line":"      I0 const& i0, I1 const& i1, I2 const& i2, I3 const& i3, I4 const& i4,"},
{"lineNum":" 1572","line":"      I5 const& i5, I6 const& i6) const {"},
{"lineNum":" 1573","line":"    return i6 +"},
{"lineNum":" 1574","line":"           m_dim.N6 *"},
{"lineNum":" 1575","line":"               (i5 +"},
{"lineNum":" 1576","line":"                m_dim.N5 *"},
{"lineNum":" 1577","line":"                    (i4 +"},
{"lineNum":" 1578","line":"                     m_dim.N4 *"},
{"lineNum":" 1579","line":"                         (i3 + m_dim.N3 *"},
{"lineNum":" 1580","line":"                                   (i2 + m_dim.N2 * (i1 + m_dim.N1 * (i0))))));"},
{"lineNum":" 1581","line":"  }"},
{"lineNum":" 1582","line":""},
{"lineNum":" 1583","line":"  // rank 8"},
{"lineNum":" 1584","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4,"},
{"lineNum":" 1585","line":"            typename I5, typename I6, typename I7>"},
{"lineNum":" 1586","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()("},
{"lineNum":" 1587","line":"      I0 const& i0, I1 const& i1, I2 const& i2, I3 const& i3, I4 const& i4,"},
{"lineNum":" 1588","line":"      I5 const& i5, I6 const& i6, I7 const& i7) const {"},
{"lineNum":" 1589","line":"    return i7 +"},
{"lineNum":" 1590","line":"           m_dim.N7 *"},
{"lineNum":" 1591","line":"               (i6 +"},
{"lineNum":" 1592","line":"                m_dim.N6 *"},
{"lineNum":" 1593","line":"                    (i5 +"},
{"lineNum":" 1594","line":"                     m_dim.N5 *"},
{"lineNum":" 1595","line":"                         (i4 +"},
{"lineNum":" 1596","line":"                          m_dim.N4 *"},
{"lineNum":" 1597","line":"                              (i3 +"},
{"lineNum":" 1598","line":"                               m_dim.N3 *"},
{"lineNum":" 1599","line":"                                   (i2 + m_dim.N2 * (i1 + m_dim.N1 * (i0)))))));"},
{"lineNum":" 1600","line":"  }"},
{"lineNum":" 1601","line":""},
{"lineNum":" 1602","line":"  //----------------------------------------"},
{"lineNum":" 1603","line":""},
{"lineNum":" 1604","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1605","line":"  constexpr array_layout layout() const {"},
{"lineNum":" 1606","line":"    return array_layout(m_dim.N0, m_dim.N1, m_dim.N2, m_dim.N3, m_dim.N4,"},
{"lineNum":" 1607","line":"                        m_dim.N5, m_dim.N6, m_dim.N7);"},
{"lineNum":" 1608","line":"  }"},
{"lineNum":" 1609","line":""},
{"lineNum":" 1610","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_0() const {"},
{"lineNum":" 1611","line":"    return m_dim.N0;"},
{"lineNum":" 1612","line":"  }"},
{"lineNum":" 1613","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_1() const {"},
{"lineNum":" 1614","line":"    return m_dim.N1;"},
{"lineNum":" 1615","line":"  }"},
{"lineNum":" 1616","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_2() const {"},
{"lineNum":" 1617","line":"    return m_dim.N2;"},
{"lineNum":" 1618","line":"  }"},
{"lineNum":" 1619","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_3() const {"},
{"lineNum":" 1620","line":"    return m_dim.N3;"},
{"lineNum":" 1621","line":"  }"},
{"lineNum":" 1622","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_4() const {"},
{"lineNum":" 1623","line":"    return m_dim.N4;"},
{"lineNum":" 1624","line":"  }"},
{"lineNum":" 1625","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_5() const {"},
{"lineNum":" 1626","line":"    return m_dim.N5;"},
{"lineNum":" 1627","line":"  }"},
{"lineNum":" 1628","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_6() const {"},
{"lineNum":" 1629","line":"    return m_dim.N6;"},
{"lineNum":" 1630","line":"  }"},
{"lineNum":" 1631","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_7() const {"},
{"lineNum":" 1632","line":"    return m_dim.N7;"},
{"lineNum":" 1633","line":"  }"},
{"lineNum":" 1634","line":""},
{"lineNum":" 1635","line":"  /* Cardinality of the domain index space */"},
{"lineNum":" 1636","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1637","line":"  constexpr size_type size() const {"},
{"lineNum":" 1638","line":"    return m_dim.N0 * m_dim.N1 * m_dim.N2 * m_dim.N3 * m_dim.N4 * m_dim.N5 *"},
{"lineNum":" 1639","line":"           m_dim.N6 * m_dim.N7;"},
{"lineNum":" 1640","line":"  }"},
{"lineNum":" 1641","line":""},
{"lineNum":" 1642","line":"  /* Span of the range space */"},
{"lineNum":" 1643","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1644","line":"  constexpr size_type span() const {"},
{"lineNum":" 1645","line":"    return m_dim.N0 * m_dim.N1 * m_dim.N2 * m_dim.N3 * m_dim.N4 * m_dim.N5 *","class":"lineNoCov","hits":"0","possible_hits":"43",},
{"lineNum":" 1646","line":"           m_dim.N6 * m_dim.N7;"},
{"lineNum":" 1647","line":"  }"},
{"lineNum":" 1648","line":""},
{"lineNum":" 1649","line":"  KOKKOS_INLINE_FUNCTION constexpr bool span_is_contiguous() const {"},
{"lineNum":" 1650","line":"    return true;"},
{"lineNum":" 1651","line":"  }"},
{"lineNum":" 1652","line":""},
{"lineNum":" 1653","line":"  /* Strides of dimensions */"},
{"lineNum":" 1654","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_7() const { return 1; }"},
{"lineNum":" 1655","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_6() const {"},
{"lineNum":" 1656","line":"    return m_dim.N7;"},
{"lineNum":" 1657","line":"  }"},
{"lineNum":" 1658","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_5() const {"},
{"lineNum":" 1659","line":"    return m_dim.N7 * m_dim.N6;"},
{"lineNum":" 1660","line":"  }"},
{"lineNum":" 1661","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_4() const {"},
{"lineNum":" 1662","line":"    return m_dim.N7 * m_dim.N6 * m_dim.N5;"},
{"lineNum":" 1663","line":"  }"},
{"lineNum":" 1664","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_3() const {"},
{"lineNum":" 1665","line":"    return m_dim.N7 * m_dim.N6 * m_dim.N5 * m_dim.N4;"},
{"lineNum":" 1666","line":"  }"},
{"lineNum":" 1667","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_2() const {"},
{"lineNum":" 1668","line":"    return m_dim.N7 * m_dim.N6 * m_dim.N5 * m_dim.N4 * m_dim.N3;"},
{"lineNum":" 1669","line":"  }"},
{"lineNum":" 1670","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_1() const {"},
{"lineNum":" 1671","line":"    return m_dim.N7 * m_dim.N6 * m_dim.N5 * m_dim.N4 * m_dim.N3 * m_dim.N2;"},
{"lineNum":" 1672","line":"  }"},
{"lineNum":" 1673","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_0() const {"},
{"lineNum":" 1674","line":"    return m_dim.N7 * m_dim.N6 * m_dim.N5 * m_dim.N4 * m_dim.N3 * m_dim.N2 *"},
{"lineNum":" 1675","line":"           m_dim.N1;"},
{"lineNum":" 1676","line":"  }"},
{"lineNum":" 1677","line":""},
{"lineNum":" 1678","line":"  // Stride with [ rank ] value is the total length"},
{"lineNum":" 1679","line":"  template <typename iType>"},
{"lineNum":" 1680","line":"  KOKKOS_INLINE_FUNCTION void stride(iType* const s) const {"},
{"lineNum":" 1681","line":"    size_type n = 1;"},
{"lineNum":" 1682","line":"    if (7 < dimension_type::rank) {"},
{"lineNum":" 1683","line":"      s[7] = n;"},
{"lineNum":" 1684","line":"      n *= m_dim.N7;"},
{"lineNum":" 1685","line":"    }"},
{"lineNum":" 1686","line":"    if (6 < dimension_type::rank) {"},
{"lineNum":" 1687","line":"      s[6] = n;"},
{"lineNum":" 1688","line":"      n *= m_dim.N6;"},
{"lineNum":" 1689","line":"    }"},
{"lineNum":" 1690","line":"    if (5 < dimension_type::rank) {"},
{"lineNum":" 1691","line":"      s[5] = n;"},
{"lineNum":" 1692","line":"      n *= m_dim.N5;"},
{"lineNum":" 1693","line":"    }"},
{"lineNum":" 1694","line":"    if (4 < dimension_type::rank) {"},
{"lineNum":" 1695","line":"      s[4] = n;"},
{"lineNum":" 1696","line":"      n *= m_dim.N4;"},
{"lineNum":" 1697","line":"    }"},
{"lineNum":" 1698","line":"    if (3 < dimension_type::rank) {"},
{"lineNum":" 1699","line":"      s[3] = n;"},
{"lineNum":" 1700","line":"      n *= m_dim.N3;"},
{"lineNum":" 1701","line":"    }"},
{"lineNum":" 1702","line":"    if (2 < dimension_type::rank) {"},
{"lineNum":" 1703","line":"      s[2] = n;"},
{"lineNum":" 1704","line":"      n *= m_dim.N2;"},
{"lineNum":" 1705","line":"    }"},
{"lineNum":" 1706","line":"    if (1 < dimension_type::rank) {"},
{"lineNum":" 1707","line":"      s[1] = n;"},
{"lineNum":" 1708","line":"      n *= m_dim.N1;"},
{"lineNum":" 1709","line":"    }"},
{"lineNum":" 1710","line":"    if (0 < dimension_type::rank) {"},
{"lineNum":" 1711","line":"      s[0] = n;"},
{"lineNum":" 1712","line":"    }"},
{"lineNum":" 1713","line":"    s[dimension_type::rank] = n * m_dim.N0;"},
{"lineNum":" 1714","line":"  }"},
{"lineNum":" 1715","line":""},
{"lineNum":" 1716","line":"  //----------------------------------------"},
{"lineNum":" 1717","line":"  // MSVC (16.5.5) + CUDA (10.2) did not generate the defaulted functions"},
{"lineNum":" 1718","line":"  // correct and errors out during compilation. Same for the other places where"},
{"lineNum":" 1719","line":"  // I changed this."},
{"lineNum":" 1720","line":""},
{"lineNum":" 1721","line":"#ifdef KOKKOS_IMPL_WINDOWS_CUDA"},
{"lineNum":" 1722","line":"  KOKKOS_FUNCTION ViewOffset() : m_dim(dimension_type()) {}"},
{"lineNum":" 1723","line":"  KOKKOS_FUNCTION ViewOffset(const ViewOffset& src) { m_dim = src.m_dim; }"},
{"lineNum":" 1724","line":"  KOKKOS_FUNCTION ViewOffset& operator=(const ViewOffset& src) {"},
{"lineNum":" 1725","line":"    m_dim = src.m_dim;"},
{"lineNum":" 1726","line":"    return *this;"},
{"lineNum":" 1727","line":"  }"},
{"lineNum":" 1728","line":"#else"},
{"lineNum":" 1729","line":""},
{"lineNum":" 1730","line":"  ViewOffset()                  = default;"},
{"lineNum":" 1731","line":"  ViewOffset(const ViewOffset&) = default;"},
{"lineNum":" 1732","line":"  ViewOffset& operator=(const ViewOffset&) = default;"},
{"lineNum":" 1733","line":"#endif"},
{"lineNum":" 1734","line":""},
{"lineNum":" 1735","line":"  template <unsigned TrivialScalarSize>"},
{"lineNum":" 1736","line":"  KOKKOS_INLINE_FUNCTION constexpr ViewOffset("},
{"lineNum":" 1737","line":"      std::integral_constant<unsigned, TrivialScalarSize> const&,"},
{"lineNum":" 1738","line":"      Kokkos::LayoutRight const& arg_layout)"},
{"lineNum":" 1739","line":"      : m_dim(arg_layout.dimension[0], 0, 0, 0, 0, 0, 0, 0) {}","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 1740","line":""},
{"lineNum":" 1741","line":"  template <class DimRHS>"},
{"lineNum":" 1742","line":"  KOKKOS_INLINE_FUNCTION constexpr ViewOffset("},
{"lineNum":" 1743","line":"      const ViewOffset<DimRHS, Kokkos::LayoutRight, void>& rhs)"},
{"lineNum":" 1744","line":"      : m_dim(rhs.m_dim.N0, rhs.m_dim.N1, rhs.m_dim.N2, rhs.m_dim.N3,"},
{"lineNum":" 1745","line":"              rhs.m_dim.N4, rhs.m_dim.N5, rhs.m_dim.N6, rhs.m_dim.N7) {"},
{"lineNum":" 1746","line":"    static_assert(int(DimRHS::rank) == int(dimension_type::rank),"},
{"lineNum":" 1747","line":"                  \"ViewOffset assignment requires equal rank\");"},
{"lineNum":" 1748","line":"    // Also requires equal static dimensions ..."},
{"lineNum":" 1749","line":"  }"},
{"lineNum":" 1750","line":""},
{"lineNum":" 1751","line":"  template <class DimRHS>"},
{"lineNum":" 1752","line":"  KOKKOS_INLINE_FUNCTION constexpr ViewOffset("},
{"lineNum":" 1753","line":"      const ViewOffset<DimRHS, Kokkos::LayoutLeft, void>& rhs)"},
{"lineNum":" 1754","line":"      : m_dim(rhs.m_dim.N0, 0, 0, 0, 0, 0, 0, 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1755","line":"    static_assert((DimRHS::rank == 0 && dimension_type::rank == 0) ||"},
{"lineNum":" 1756","line":"                      (DimRHS::rank == 1 && dimension_type::rank == 1 &&"},
{"lineNum":" 1757","line":"                       dimension_type::rank_dynamic == 1),"},
{"lineNum":" 1758","line":"                  \"ViewOffset LayoutRight and LayoutLeft are only compatible \""},
{"lineNum":" 1759","line":"                  \"when rank <= 1\");"},
{"lineNum":" 1760","line":"  }"},
{"lineNum":" 1761","line":""},
{"lineNum":" 1762","line":"  template <class DimRHS>"},
{"lineNum":" 1763","line":"  KOKKOS_INLINE_FUNCTION ViewOffset("},
{"lineNum":" 1764","line":"      const ViewOffset<DimRHS, Kokkos::LayoutStride, void>& rhs)"},
{"lineNum":" 1765","line":"      : m_dim(rhs.m_dim.N0, 0, 0, 0, 0, 0, 0, 0) {}"},
{"lineNum":" 1766","line":""},
{"lineNum":" 1767","line":"  //----------------------------------------"},
{"lineNum":" 1768","line":"  // Subview construction"},
{"lineNum":" 1769","line":""},
{"lineNum":" 1770","line":"  template <class DimRHS>"},
{"lineNum":" 1771","line":"  KOKKOS_INLINE_FUNCTION constexpr ViewOffset("},
{"lineNum":" 1772","line":"      const ViewOffset<DimRHS, Kokkos::LayoutRight, void>&,"},
{"lineNum":" 1773","line":"      const SubviewExtents<DimRHS::rank, dimension_type::rank>& sub)"},
{"lineNum":" 1774","line":"      : m_dim(sub.range_extent(0), 0, 0, 0, 0, 0, 0, 0) {"},
{"lineNum":" 1775","line":"    static_assert((0 == dimension_type::rank_dynamic) ||"},
{"lineNum":" 1776","line":"                      (1 == dimension_type::rank &&"},
{"lineNum":" 1777","line":"                       1 == dimension_type::rank_dynamic && 1 <= DimRHS::rank),"},
{"lineNum":" 1778","line":"                  \"ViewOffset subview construction requires compatible rank\");"},
{"lineNum":" 1779","line":"  }"},
{"lineNum":" 1780","line":"};"},
{"lineNum":" 1781","line":""},
{"lineNum":" 1782","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1783","line":"// LayoutRight AND ( 1 < rank AND 0 < rank_dynamic ) : has padding / striding"},
{"lineNum":" 1784","line":"template <class Dimension>"},
{"lineNum":" 1785","line":"struct ViewOffset<"},
{"lineNum":" 1786","line":"    Dimension, Kokkos::LayoutRight,"},
{"lineNum":" 1787","line":"    typename std::enable_if<(1 < Dimension::rank &&"},
{"lineNum":" 1788","line":"                             0 < Dimension::rank_dynamic)>::type> {"},
{"lineNum":" 1789","line":"  using is_mapping_plugin = std::true_type;"},
{"lineNum":" 1790","line":"  using is_regular        = std::true_type;"},
{"lineNum":" 1791","line":""},
{"lineNum":" 1792","line":"  using size_type      = size_t;"},
{"lineNum":" 1793","line":"  using dimension_type = Dimension;"},
{"lineNum":" 1794","line":"  using array_layout   = Kokkos::LayoutRight;"},
{"lineNum":" 1795","line":""},
{"lineNum":" 1796","line":"  dimension_type m_dim;"},
{"lineNum":" 1797","line":"  size_type m_stride;"},
{"lineNum":" 1798","line":""},
{"lineNum":" 1799","line":"  //----------------------------------------"},
{"lineNum":" 1800","line":""},
{"lineNum":" 1801","line":"  // rank 1"},
{"lineNum":" 1802","line":"  template <typename I0>"},
{"lineNum":" 1803","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()(I0 const& i0) const {"},
{"lineNum":" 1804","line":"    return i0;"},
{"lineNum":" 1805","line":"  }"},
{"lineNum":" 1806","line":""},
{"lineNum":" 1807","line":"  // rank 2"},
{"lineNum":" 1808","line":"  template <typename I0, typename I1>"},
{"lineNum":" 1809","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()(I0 const& i0,"},
{"lineNum":" 1810","line":"                                                        I1 const& i1) const {"},
{"lineNum":" 1811","line":"    return i1 + i0 * m_stride;"},
{"lineNum":" 1812","line":"  }"},
{"lineNum":" 1813","line":""},
{"lineNum":" 1814","line":"  // rank 3"},
{"lineNum":" 1815","line":"  template <typename I0, typename I1, typename I2>"},
{"lineNum":" 1816","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()(I0 const& i0,"},
{"lineNum":" 1817","line":"                                                        I1 const& i1,"},
{"lineNum":" 1818","line":"                                                        I2 const& i2) const {"},
{"lineNum":" 1819","line":"    return i2 + m_dim.N2 * (i1) + i0 * m_stride;"},
{"lineNum":" 1820","line":"  }"},
{"lineNum":" 1821","line":""},
{"lineNum":" 1822","line":"  // rank 4"},
{"lineNum":" 1823","line":"  template <typename I0, typename I1, typename I2, typename I3>"},
{"lineNum":" 1824","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()(I0 const& i0,"},
{"lineNum":" 1825","line":"                                                        I1 const& i1,"},
{"lineNum":" 1826","line":"                                                        I2 const& i2,"},
{"lineNum":" 1827","line":"                                                        I3 const& i3) const {"},
{"lineNum":" 1828","line":"    return i3 + m_dim.N3 * (i2 + m_dim.N2 * (i1)) + i0 * m_stride;"},
{"lineNum":" 1829","line":"  }"},
{"lineNum":" 1830","line":""},
{"lineNum":" 1831","line":"  // rank 5"},
{"lineNum":" 1832","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4>"},
{"lineNum":" 1833","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()(I0 const& i0,"},
{"lineNum":" 1834","line":"                                                        I1 const& i1,"},
{"lineNum":" 1835","line":"                                                        I2 const& i2,"},
{"lineNum":" 1836","line":"                                                        I3 const& i3,"},
{"lineNum":" 1837","line":"                                                        I4 const& i4) const {"},
{"lineNum":" 1838","line":"    return i4 + m_dim.N4 * (i3 + m_dim.N3 * (i2 + m_dim.N2 * (i1))) +"},
{"lineNum":" 1839","line":"           i0 * m_stride;"},
{"lineNum":" 1840","line":"  }"},
{"lineNum":" 1841","line":""},
{"lineNum":" 1842","line":"  // rank 6"},
{"lineNum":" 1843","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4,"},
{"lineNum":" 1844","line":"            typename I5>"},
{"lineNum":" 1845","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()("},
{"lineNum":" 1846","line":"      I0 const& i0, I1 const& i1, I2 const& i2, I3 const& i3, I4 const& i4,"},
{"lineNum":" 1847","line":"      I5 const& i5) const {"},
{"lineNum":" 1848","line":"    return i5 +"},
{"lineNum":" 1849","line":"           m_dim.N5 *"},
{"lineNum":" 1850","line":"               (i4 + m_dim.N4 * (i3 + m_dim.N3 * (i2 + m_dim.N2 * (i1)))) +"},
{"lineNum":" 1851","line":"           i0 * m_stride;"},
{"lineNum":" 1852","line":"  }"},
{"lineNum":" 1853","line":""},
{"lineNum":" 1854","line":"  // rank 7"},
{"lineNum":" 1855","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4,"},
{"lineNum":" 1856","line":"            typename I5, typename I6>"},
{"lineNum":" 1857","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()("},
{"lineNum":" 1858","line":"      I0 const& i0, I1 const& i1, I2 const& i2, I3 const& i3, I4 const& i4,"},
{"lineNum":" 1859","line":"      I5 const& i5, I6 const& i6) const {"},
{"lineNum":" 1860","line":"    return i6 +"},
{"lineNum":" 1861","line":"           m_dim.N6 *"},
{"lineNum":" 1862","line":"               (i5 + m_dim.N5 *"},
{"lineNum":" 1863","line":"                         (i4 + m_dim.N4 *"},
{"lineNum":" 1864","line":"                                   (i3 + m_dim.N3 * (i2 + m_dim.N2 * (i1))))) +"},
{"lineNum":" 1865","line":"           i0 * m_stride;"},
{"lineNum":" 1866","line":"  }"},
{"lineNum":" 1867","line":""},
{"lineNum":" 1868","line":"  // rank 8"},
{"lineNum":" 1869","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4,"},
{"lineNum":" 1870","line":"            typename I5, typename I6, typename I7>"},
{"lineNum":" 1871","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()("},
{"lineNum":" 1872","line":"      I0 const& i0, I1 const& i1, I2 const& i2, I3 const& i3, I4 const& i4,"},
{"lineNum":" 1873","line":"      I5 const& i5, I6 const& i6, I7 const& i7) const {"},
{"lineNum":" 1874","line":"    return i7 +"},
{"lineNum":" 1875","line":"           m_dim.N7 *"},
{"lineNum":" 1876","line":"               (i6 +"},
{"lineNum":" 1877","line":"                m_dim.N6 *"},
{"lineNum":" 1878","line":"                    (i5 +"},
{"lineNum":" 1879","line":"                     m_dim.N5 *"},
{"lineNum":" 1880","line":"                         (i4 + m_dim.N4 *"},
{"lineNum":" 1881","line":"                                   (i3 + m_dim.N3 * (i2 + m_dim.N2 * (i1)))))) +"},
{"lineNum":" 1882","line":"           i0 * m_stride;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1883","line":"  }"},
{"lineNum":" 1884","line":""},
{"lineNum":" 1885","line":"  //----------------------------------------"},
{"lineNum":" 1886","line":""},
{"lineNum":" 1887","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1888","line":"  constexpr array_layout layout() const {"},
{"lineNum":" 1889","line":"    return array_layout(m_dim.N0, m_dim.N1, m_dim.N2, m_dim.N3, m_dim.N4,"},
{"lineNum":" 1890","line":"                        m_dim.N5, m_dim.N6, m_dim.N7);"},
{"lineNum":" 1891","line":"  }"},
{"lineNum":" 1892","line":""},
{"lineNum":" 1893","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_0() const {"},
{"lineNum":" 1894","line":"    return m_dim.N0;"},
{"lineNum":" 1895","line":"  }"},
{"lineNum":" 1896","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_1() const {"},
{"lineNum":" 1897","line":"    return m_dim.N1;"},
{"lineNum":" 1898","line":"  }"},
{"lineNum":" 1899","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_2() const {"},
{"lineNum":" 1900","line":"    return m_dim.N2;"},
{"lineNum":" 1901","line":"  }"},
{"lineNum":" 1902","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_3() const {"},
{"lineNum":" 1903","line":"    return m_dim.N3;"},
{"lineNum":" 1904","line":"  }"},
{"lineNum":" 1905","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_4() const {"},
{"lineNum":" 1906","line":"    return m_dim.N4;"},
{"lineNum":" 1907","line":"  }"},
{"lineNum":" 1908","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_5() const {"},
{"lineNum":" 1909","line":"    return m_dim.N5;"},
{"lineNum":" 1910","line":"  }"},
{"lineNum":" 1911","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_6() const {"},
{"lineNum":" 1912","line":"    return m_dim.N6;"},
{"lineNum":" 1913","line":"  }"},
{"lineNum":" 1914","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_7() const {"},
{"lineNum":" 1915","line":"    return m_dim.N7;"},
{"lineNum":" 1916","line":"  }"},
{"lineNum":" 1917","line":""},
{"lineNum":" 1918","line":"  /* Cardinality of the domain index space */"},
{"lineNum":" 1919","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1920","line":"  constexpr size_type size() const {"},
{"lineNum":" 1921","line":"    return m_dim.N0 * m_dim.N1 * m_dim.N2 * m_dim.N3 * m_dim.N4 * m_dim.N5 *","class":"lineNoCov","hits":"0","possible_hits":"24",},
{"lineNum":" 1922","line":"           m_dim.N6 * m_dim.N7;"},
{"lineNum":" 1923","line":"  }"},
{"lineNum":" 1924","line":""},
{"lineNum":" 1925","line":"  /* Span of the range space */"},
{"lineNum":" 1926","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1927","line":"  constexpr size_type span() const {"},
{"lineNum":" 1928","line":"    return size() > 0 ? m_dim.N0 * m_stride : 0;","class":"lineNoCov","hits":"0","possible_hits":"19",},
{"lineNum":" 1929","line":"  }"},
{"lineNum":" 1930","line":""},
{"lineNum":" 1931","line":"  KOKKOS_INLINE_FUNCTION constexpr bool span_is_contiguous() const {"},
{"lineNum":" 1932","line":"    return m_stride == m_dim.N7 * m_dim.N6 * m_dim.N5 * m_dim.N4 * m_dim.N3 *","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1933","line":"                           m_dim.N2 * m_dim.N1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1934","line":"  }"},
{"lineNum":" 1935","line":""},
{"lineNum":" 1936","line":"  /* Strides of dimensions */"},
{"lineNum":" 1937","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_7() const { return 1; }"},
{"lineNum":" 1938","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_6() const {"},
{"lineNum":" 1939","line":"    return m_dim.N7;"},
{"lineNum":" 1940","line":"  }"},
{"lineNum":" 1941","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_5() const {"},
{"lineNum":" 1942","line":"    return m_dim.N7 * m_dim.N6;"},
{"lineNum":" 1943","line":"  }"},
{"lineNum":" 1944","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_4() const {"},
{"lineNum":" 1945","line":"    return m_dim.N7 * m_dim.N6 * m_dim.N5;"},
{"lineNum":" 1946","line":"  }"},
{"lineNum":" 1947","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_3() const {"},
{"lineNum":" 1948","line":"    return m_dim.N7 * m_dim.N6 * m_dim.N5 * m_dim.N4;"},
{"lineNum":" 1949","line":"  }"},
{"lineNum":" 1950","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_2() const {"},
{"lineNum":" 1951","line":"    return m_dim.N7 * m_dim.N6 * m_dim.N5 * m_dim.N4 * m_dim.N3;"},
{"lineNum":" 1952","line":"  }"},
{"lineNum":" 1953","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_1() const {"},
{"lineNum":" 1954","line":"    return m_dim.N7 * m_dim.N6 * m_dim.N5 * m_dim.N4 * m_dim.N3 * m_dim.N2;"},
{"lineNum":" 1955","line":"  }"},
{"lineNum":" 1956","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_0() const {"},
{"lineNum":" 1957","line":"    return m_stride;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1958","line":"  }"},
{"lineNum":" 1959","line":""},
{"lineNum":" 1960","line":"  // Stride with [ rank ] value is the total length"},
{"lineNum":" 1961","line":"  template <typename iType>"},
{"lineNum":" 1962","line":"  KOKKOS_INLINE_FUNCTION void stride(iType* const s) const {"},
{"lineNum":" 1963","line":"    size_type n = 1;"},
{"lineNum":" 1964","line":"    if (7 < dimension_type::rank) {"},
{"lineNum":" 1965","line":"      s[7] = n;"},
{"lineNum":" 1966","line":"      n *= m_dim.N7;"},
{"lineNum":" 1967","line":"    }"},
{"lineNum":" 1968","line":"    if (6 < dimension_type::rank) {"},
{"lineNum":" 1969","line":"      s[6] = n;"},
{"lineNum":" 1970","line":"      n *= m_dim.N6;"},
{"lineNum":" 1971","line":"    }"},
{"lineNum":" 1972","line":"    if (5 < dimension_type::rank) {"},
{"lineNum":" 1973","line":"      s[5] = n;"},
{"lineNum":" 1974","line":"      n *= m_dim.N5;"},
{"lineNum":" 1975","line":"    }"},
{"lineNum":" 1976","line":"    if (4 < dimension_type::rank) {"},
{"lineNum":" 1977","line":"      s[4] = n;"},
{"lineNum":" 1978","line":"      n *= m_dim.N4;"},
{"lineNum":" 1979","line":"    }"},
{"lineNum":" 1980","line":"    if (3 < dimension_type::rank) {"},
{"lineNum":" 1981","line":"      s[3] = n;"},
{"lineNum":" 1982","line":"      n *= m_dim.N3;"},
{"lineNum":" 1983","line":"    }"},
{"lineNum":" 1984","line":"    if (2 < dimension_type::rank) {"},
{"lineNum":" 1985","line":"      s[2] = n;"},
{"lineNum":" 1986","line":"      n *= m_dim.N2;"},
{"lineNum":" 1987","line":"    }"},
{"lineNum":" 1988","line":"    if (1 < dimension_type::rank) {"},
{"lineNum":" 1989","line":"      s[1] = n;"},
{"lineNum":" 1990","line":"    }"},
{"lineNum":" 1991","line":"    if (0 < dimension_type::rank) {"},
{"lineNum":" 1992","line":"      s[0] = m_stride;"},
{"lineNum":" 1993","line":"    }"},
{"lineNum":" 1994","line":"    s[dimension_type::rank] = m_stride * m_dim.N0;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1995","line":"  }"},
{"lineNum":" 1996","line":""},
{"lineNum":" 1997","line":"  //----------------------------------------"},
{"lineNum":" 1998","line":""},
{"lineNum":" 1999","line":" private:"},
{"lineNum":" 2000","line":"  template <unsigned TrivialScalarSize>"},
{"lineNum":" 2001","line":"  struct Padding {"},
{"lineNum":" 2002","line":"    enum {"},
{"lineNum":" 2003","line":"      div = TrivialScalarSize == 0"},
{"lineNum":" 2004","line":"                ? 0"},
{"lineNum":" 2005","line":"                : Kokkos::Impl::MEMORY_ALIGNMENT /"},
{"lineNum":" 2006","line":"                      (TrivialScalarSize ? TrivialScalarSize : 1)"},
{"lineNum":" 2007","line":"    };"},
{"lineNum":" 2008","line":"    enum {"},
{"lineNum":" 2009","line":"      mod = TrivialScalarSize == 0"},
{"lineNum":" 2010","line":"                ? 0"},
{"lineNum":" 2011","line":"                : Kokkos::Impl::MEMORY_ALIGNMENT %"},
{"lineNum":" 2012","line":"                      (TrivialScalarSize ? TrivialScalarSize : 1)"},
{"lineNum":" 2013","line":"    };"},
{"lineNum":" 2014","line":""},
{"lineNum":" 2015","line":"    // If memory alignment is a multiple of the trivial scalar size then attempt"},
{"lineNum":" 2016","line":"    // to align."},
{"lineNum":" 2017","line":"    enum { align = 0 != TrivialScalarSize && 0 == mod ? div : 0 };"},
{"lineNum":" 2018","line":"    enum {"},
{"lineNum":" 2019","line":"      div_ok = (div != 0) ? div : 1"},
{"lineNum":" 2020","line":"    };  // To valid modulo zero in constexpr"},
{"lineNum":" 2021","line":""},
{"lineNum":" 2022","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 2023","line":"    static constexpr size_t stride(size_t const N) {"},
{"lineNum":" 2024","line":"      return ((align != 0) &&"},
{"lineNum":" 2025","line":"              ((Kokkos::Impl::MEMORY_ALIGNMENT_THRESHOLD * align) < N) &&"},
{"lineNum":" 2026","line":"              ((N % div_ok) != 0))"},
{"lineNum":" 2027","line":"                 ? N + align - (N % div_ok)"},
{"lineNum":" 2028","line":"                 : N;"},
{"lineNum":" 2029","line":"    }"},
{"lineNum":" 2030","line":"  };"},
{"lineNum":" 2031","line":""},
{"lineNum":" 2032","line":" public:"},
{"lineNum":" 2033","line":"  // MSVC (16.5.5) + CUDA (10.2) did not generate the defaulted functions"},
{"lineNum":" 2034","line":"  // correct and errors out during compilation. Same for the other places where"},
{"lineNum":" 2035","line":"  // I changed this."},
{"lineNum":" 2036","line":""},
{"lineNum":" 2037","line":"#ifdef KOKKOS_IMPL_WINDOWS_CUDA"},
{"lineNum":" 2038","line":"  KOKKOS_FUNCTION ViewOffset() : m_dim(dimension_type()), m_stride(0) {}"},
{"lineNum":" 2039","line":"  KOKKOS_FUNCTION ViewOffset(const ViewOffset& src) {"},
{"lineNum":" 2040","line":"    m_dim    = src.m_dim;"},
{"lineNum":" 2041","line":"    m_stride = src.m_stride;"},
{"lineNum":" 2042","line":"  }"},
{"lineNum":" 2043","line":"  KOKKOS_FUNCTION ViewOffset& operator=(const ViewOffset& src) {"},
{"lineNum":" 2044","line":"    m_dim    = src.m_dim;"},
{"lineNum":" 2045","line":"    m_stride = src.m_stride;"},
{"lineNum":" 2046","line":"    return *this;"},
{"lineNum":" 2047","line":"  }"},
{"lineNum":" 2048","line":"#else"},
{"lineNum":" 2049","line":""},
{"lineNum":" 2050","line":"  ViewOffset()                  = default;"},
{"lineNum":" 2051","line":"  ViewOffset(const ViewOffset&) = default;"},
{"lineNum":" 2052","line":"  ViewOffset& operator=(const ViewOffset&) = default;"},
{"lineNum":" 2053","line":"#endif"},
{"lineNum":" 2054","line":""},
{"lineNum":" 2055","line":"  /* Enable padding for trivial scalar types with non-zero trivial scalar size."},
{"lineNum":" 2056","line":"   */"},
{"lineNum":" 2057","line":"  template <unsigned TrivialScalarSize>"},
{"lineNum":" 2058","line":"  KOKKOS_INLINE_FUNCTION constexpr ViewOffset("},
{"lineNum":" 2059","line":"      std::integral_constant<unsigned, TrivialScalarSize> const&,"},
{"lineNum":" 2060","line":"      Kokkos::LayoutRight const& arg_layout)"},
{"lineNum":" 2061","line":"      : m_dim(arg_layout.dimension[0], arg_layout.dimension[1],","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2062","line":"              arg_layout.dimension[2], arg_layout.dimension[3],"},
{"lineNum":" 2063","line":"              arg_layout.dimension[4], arg_layout.dimension[5],"},
{"lineNum":" 2064","line":"              arg_layout.dimension[6], arg_layout.dimension[7]),"},
{"lineNum":" 2065","line":"        m_stride("},
{"lineNum":" 2066","line":"            Padding<TrivialScalarSize>::"},
{"lineNum":" 2067","line":"                stride(/* 2 <= rank */"},
{"lineNum":" 2068","line":"                       m_dim.N1 *"},
{"lineNum":" 2069","line":"                       (dimension_type::rank == 2"},
{"lineNum":" 2070","line":"                            ? 1"},
{"lineNum":" 2071","line":"                            : m_dim.N2 *"},
{"lineNum":" 2072","line":"                                  (dimension_type::rank == 3"},
{"lineNum":" 2073","line":"                                       ? 1"},
{"lineNum":" 2074","line":"                                       : m_dim.N3 *"},
{"lineNum":" 2075","line":"                                             (dimension_type::rank == 4"},
{"lineNum":" 2076","line":"                                                  ? 1"},
{"lineNum":" 2077","line":"                                                  : m_dim.N4 *"},
{"lineNum":" 2078","line":"                                                        (dimension_type::rank =="},
{"lineNum":" 2079","line":"                                                                 5"},
{"lineNum":" 2080","line":"                                                             ? 1"},
{"lineNum":" 2081","line":"                                                             : m_dim.N5 *"},
{"lineNum":" 2082","line":"                                                                   (dimension_type::"},
{"lineNum":" 2083","line":"                                                                                rank =="},
{"lineNum":" 2084","line":"                                                                            6"},
{"lineNum":" 2085","line":"                                                                        ? 1"},
{"lineNum":" 2086","line":"                                                                        : m_dim.N6 *"},
{"lineNum":" 2087","line":"                                                                              (dimension_type::"},
{"lineNum":" 2088","line":"                                                                                           rank =="},
{"lineNum":" 2089","line":"                                                                                       7"},
{"lineNum":" 2090","line":"                                                                                   ? 1"},
{"lineNum":" 2091","line":"                                                                                   : m_dim"},
{"lineNum":" 2092","line":"                                                                                         .N7)))))))) {"},
{"lineNum":" 2093","line":"  }"},
{"lineNum":" 2094","line":""},
{"lineNum":" 2095","line":"  template <class DimRHS>"},
{"lineNum":" 2096","line":"  KOKKOS_INLINE_FUNCTION constexpr ViewOffset("},
{"lineNum":" 2097","line":"      const ViewOffset<DimRHS, Kokkos::LayoutRight, void>& rhs)"},
{"lineNum":" 2098","line":"      : m_dim(rhs.m_dim.N0, rhs.m_dim.N1, rhs.m_dim.N2, rhs.m_dim.N3,"},
{"lineNum":" 2099","line":"              rhs.m_dim.N4, rhs.m_dim.N5, rhs.m_dim.N6, rhs.m_dim.N7),"},
{"lineNum":" 2100","line":"        m_stride(rhs.stride_0()) {"},
{"lineNum":" 2101","line":"    static_assert(int(DimRHS::rank) == int(dimension_type::rank),"},
{"lineNum":" 2102","line":"                  \"ViewOffset assignment requires equal rank\");"},
{"lineNum":" 2103","line":"    // Also requires equal static dimensions ..."},
{"lineNum":" 2104","line":"  }"},
{"lineNum":" 2105","line":""},
{"lineNum":" 2106","line":"  template <class DimRHS>"},
{"lineNum":" 2107","line":"  KOKKOS_INLINE_FUNCTION ViewOffset("},
{"lineNum":" 2108","line":"      const ViewOffset<DimRHS, Kokkos::LayoutStride, void>& rhs)"},
{"lineNum":" 2109","line":"      : m_dim(rhs.m_dim.N0, rhs.m_dim.N1, rhs.m_dim.N2, rhs.m_dim.N3,"},
{"lineNum":" 2110","line":"              rhs.m_dim.N4, rhs.m_dim.N5, rhs.m_dim.N6, rhs.m_dim.N7),"},
{"lineNum":" 2111","line":"        m_stride(rhs.stride_0()) {"},
{"lineNum":" 2112","line":"    if (((dimension_type::rank == 2)"},
{"lineNum":" 2113","line":"             ? rhs.m_stride.S1"},
{"lineNum":" 2114","line":"             : ((dimension_type::rank == 3)"},
{"lineNum":" 2115","line":"                    ? rhs.m_stride.S2"},
{"lineNum":" 2116","line":"                    : ((dimension_type::rank == 4)"},
{"lineNum":" 2117","line":"                           ? rhs.m_stride.S3"},
{"lineNum":" 2118","line":"                           : ((dimension_type::rank == 5)"},
{"lineNum":" 2119","line":"                                  ? rhs.m_stride.S4"},
{"lineNum":" 2120","line":"                                  : ((dimension_type::rank == 6)"},
{"lineNum":" 2121","line":"                                         ? rhs.m_stride.S5"},
{"lineNum":" 2122","line":"                                         : ((dimension_type::rank == 7)"},
{"lineNum":" 2123","line":"                                                ? rhs.m_stride.S6"},
{"lineNum":" 2124","line":"                                                : rhs.m_stride.S7)))))) != 1) {"},
{"lineNum":" 2125","line":"      Kokkos::abort("},
{"lineNum":" 2126","line":"          \"Kokkos::Impl::ViewOffset assignment of LayoutRight from \""},
{"lineNum":" 2127","line":"          \"LayoutStride requires right-most stride == 1\");"},
{"lineNum":" 2128","line":"    }"},
{"lineNum":" 2129","line":"  }"},
{"lineNum":" 2130","line":""},
{"lineNum":" 2131","line":"  //----------------------------------------"},
{"lineNum":" 2132","line":"  // Subview construction"},
{"lineNum":" 2133","line":"  // Last dimension must be non-zero"},
{"lineNum":" 2134","line":""},
{"lineNum":" 2135","line":"  template <class DimRHS>"},
{"lineNum":" 2136","line":"  KOKKOS_INLINE_FUNCTION constexpr ViewOffset("},
{"lineNum":" 2137","line":"      const ViewOffset<DimRHS, Kokkos::LayoutRight, void>& rhs,"},
{"lineNum":" 2138","line":"      const SubviewExtents<DimRHS::rank, dimension_type::rank>& sub)"},
{"lineNum":" 2139","line":"      : m_dim(sub.range_extent(0), sub.range_extent(1), sub.range_extent(2),"},
{"lineNum":" 2140","line":"              sub.range_extent(3), sub.range_extent(4), sub.range_extent(5),"},
{"lineNum":" 2141","line":"              sub.range_extent(6), sub.range_extent(7)),"},
{"lineNum":" 2142","line":"        m_stride("},
{"lineNum":" 2143","line":"            0 == sub.range_index(0)"},
{"lineNum":" 2144","line":"                ? rhs.stride_0()"},
{"lineNum":" 2145","line":"                : (1 == sub.range_index(0)"},
{"lineNum":" 2146","line":"                       ? rhs.stride_1()"},
{"lineNum":" 2147","line":"                       : (2 == sub.range_index(0)"},
{"lineNum":" 2148","line":"                              ? rhs.stride_2()"},
{"lineNum":" 2149","line":"                              : (3 == sub.range_index(0)"},
{"lineNum":" 2150","line":"                                     ? rhs.stride_3()"},
{"lineNum":" 2151","line":"                                     : (4 == sub.range_index(0)"},
{"lineNum":" 2152","line":"                                            ? rhs.stride_4()"},
{"lineNum":" 2153","line":"                                            : (5 == sub.range_index(0)"},
{"lineNum":" 2154","line":"                                                   ? rhs.stride_5()"},
{"lineNum":" 2155","line":"                                                   : (6 == sub.range_index(0)"},
{"lineNum":" 2156","line":"                                                          ? rhs.stride_6()"},
{"lineNum":" 2157","line":"                                                          : 0))))))) {"},
{"lineNum":" 2158","line":"    /*      // This subview must be 2 == rank and 2 == rank_dynamic"},
{"lineNum":" 2159","line":"          // due to only having stride #0."},
{"lineNum":" 2160","line":"          // The source dimension #0 must be non-zero for stride-one leading"},
{"lineNum":" 2161","line":"       dimension."},
{"lineNum":" 2162","line":"          // At most subsequent dimension can be non-zero."},
{"lineNum":" 2163","line":""},
{"lineNum":" 2164","line":"          static_assert( (( 2 == dimension_type::rank ) &&"},
{"lineNum":" 2165","line":"                          ( 2 <= DimRHS::rank )) ||"},
{"lineNum":" 2166","line":"                         ()"},
{"lineNum":" 2167","line":"                       , \"ViewOffset subview construction requires compatible"},
{"lineNum":" 2168","line":"       rank\" );"},
{"lineNum":" 2169","line":"    */"},
{"lineNum":" 2170","line":"  }"},
{"lineNum":" 2171","line":"};"},
{"lineNum":" 2172","line":""},
{"lineNum":" 2173","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 2174","line":"/* Strided array layout only makes sense for 0 < rank */"},
{"lineNum":" 2175","line":"/* rank = 0 included for DynRankView case */"},
{"lineNum":" 2176","line":""},
{"lineNum":" 2177","line":"template <unsigned Rank>"},
{"lineNum":" 2178","line":"struct ViewStride;"},
{"lineNum":" 2179","line":""},
{"lineNum":" 2180","line":"template <>"},
{"lineNum":" 2181","line":"struct ViewStride<0> {"},
{"lineNum":" 2182","line":"  enum { S0 = 0, S1 = 0, S2 = 0, S3 = 0, S4 = 0, S5 = 0, S6 = 0, S7 = 0 };"},
{"lineNum":" 2183","line":""},
{"lineNum":" 2184","line":"  ViewStride()                  = default;"},
{"lineNum":" 2185","line":"  ViewStride(const ViewStride&) = default;"},
{"lineNum":" 2186","line":"  ViewStride& operator=(const ViewStride&) = default;"},
{"lineNum":" 2187","line":""},
{"lineNum":" 2188","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 2189","line":"  constexpr ViewStride(size_t, size_t, size_t, size_t, size_t, size_t, size_t,"},
{"lineNum":" 2190","line":"                       size_t) {}"},
{"lineNum":" 2191","line":"};"},
{"lineNum":" 2192","line":""},
{"lineNum":" 2193","line":"template <>"},
{"lineNum":" 2194","line":"struct ViewStride<1> {"},
{"lineNum":" 2195","line":"  size_t S0;"},
{"lineNum":" 2196","line":"  enum { S1 = 0, S2 = 0, S3 = 0, S4 = 0, S5 = 0, S6 = 0, S7 = 0 };"},
{"lineNum":" 2197","line":""},
{"lineNum":" 2198","line":"  ViewStride()                  = default;"},
{"lineNum":" 2199","line":"  ViewStride(const ViewStride&) = default;"},
{"lineNum":" 2200","line":"  ViewStride& operator=(const ViewStride&) = default;"},
{"lineNum":" 2201","line":""},
{"lineNum":" 2202","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 2203","line":"  constexpr ViewStride(size_t aS0, size_t, size_t, size_t, size_t, size_t,"},
{"lineNum":" 2204","line":"                       size_t, size_t)"},
{"lineNum":" 2205","line":"      : S0(aS0) {}"},
{"lineNum":" 2206","line":"};"},
{"lineNum":" 2207","line":""},
{"lineNum":" 2208","line":"template <>"},
{"lineNum":" 2209","line":"struct ViewStride<2> {"},
{"lineNum":" 2210","line":"  size_t S0, S1;"},
{"lineNum":" 2211","line":"  enum { S2 = 0, S3 = 0, S4 = 0, S5 = 0, S6 = 0, S7 = 0 };"},
{"lineNum":" 2212","line":""},
{"lineNum":" 2213","line":"  ViewStride()                  = default;"},
{"lineNum":" 2214","line":"  ViewStride(const ViewStride&) = default;"},
{"lineNum":" 2215","line":"  ViewStride& operator=(const ViewStride&) = default;"},
{"lineNum":" 2216","line":""},
{"lineNum":" 2217","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 2218","line":"  constexpr ViewStride(size_t aS0, size_t aS1, size_t, size_t, size_t, size_t,"},
{"lineNum":" 2219","line":"                       size_t, size_t)"},
{"lineNum":" 2220","line":"      : S0(aS0), S1(aS1) {}"},
{"lineNum":" 2221","line":"};"},
{"lineNum":" 2222","line":""},
{"lineNum":" 2223","line":"template <>"},
{"lineNum":" 2224","line":"struct ViewStride<3> {"},
{"lineNum":" 2225","line":"  size_t S0, S1, S2;"},
{"lineNum":" 2226","line":"  enum { S3 = 0, S4 = 0, S5 = 0, S6 = 0, S7 = 0 };"},
{"lineNum":" 2227","line":""},
{"lineNum":" 2228","line":"  ViewStride()                  = default;"},
{"lineNum":" 2229","line":"  ViewStride(const ViewStride&) = default;"},
{"lineNum":" 2230","line":"  ViewStride& operator=(const ViewStride&) = default;"},
{"lineNum":" 2231","line":""},
{"lineNum":" 2232","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 2233","line":"  constexpr ViewStride(size_t aS0, size_t aS1, size_t aS2, size_t, size_t,"},
{"lineNum":" 2234","line":"                       size_t, size_t, size_t)"},
{"lineNum":" 2235","line":"      : S0(aS0), S1(aS1), S2(aS2) {}"},
{"lineNum":" 2236","line":"};"},
{"lineNum":" 2237","line":""},
{"lineNum":" 2238","line":"template <>"},
{"lineNum":" 2239","line":"struct ViewStride<4> {"},
{"lineNum":" 2240","line":"  size_t S0, S1, S2, S3;"},
{"lineNum":" 2241","line":"  enum { S4 = 0, S5 = 0, S6 = 0, S7 = 0 };"},
{"lineNum":" 2242","line":""},
{"lineNum":" 2243","line":"  ViewStride()                  = default;"},
{"lineNum":" 2244","line":"  ViewStride(const ViewStride&) = default;"},
{"lineNum":" 2245","line":"  ViewStride& operator=(const ViewStride&) = default;"},
{"lineNum":" 2246","line":""},
{"lineNum":" 2247","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 2248","line":"  constexpr ViewStride(size_t aS0, size_t aS1, size_t aS2, size_t aS3, size_t,"},
{"lineNum":" 2249","line":"                       size_t, size_t, size_t)"},
{"lineNum":" 2250","line":"      : S0(aS0), S1(aS1), S2(aS2), S3(aS3) {}"},
{"lineNum":" 2251","line":"};"},
{"lineNum":" 2252","line":""},
{"lineNum":" 2253","line":"template <>"},
{"lineNum":" 2254","line":"struct ViewStride<5> {"},
{"lineNum":" 2255","line":"  size_t S0, S1, S2, S3, S4;"},
{"lineNum":" 2256","line":"  enum { S5 = 0, S6 = 0, S7 = 0 };"},
{"lineNum":" 2257","line":""},
{"lineNum":" 2258","line":"  ViewStride()                  = default;"},
{"lineNum":" 2259","line":"  ViewStride(const ViewStride&) = default;"},
{"lineNum":" 2260","line":"  ViewStride& operator=(const ViewStride&) = default;"},
{"lineNum":" 2261","line":""},
{"lineNum":" 2262","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 2263","line":"  constexpr ViewStride(size_t aS0, size_t aS1, size_t aS2, size_t aS3,"},
{"lineNum":" 2264","line":"                       size_t aS4, size_t, size_t, size_t)"},
{"lineNum":" 2265","line":"      : S0(aS0), S1(aS1), S2(aS2), S3(aS3), S4(aS4) {}"},
{"lineNum":" 2266","line":"};"},
{"lineNum":" 2267","line":""},
{"lineNum":" 2268","line":"template <>"},
{"lineNum":" 2269","line":"struct ViewStride<6> {"},
{"lineNum":" 2270","line":"  size_t S0, S1, S2, S3, S4, S5;"},
{"lineNum":" 2271","line":"  enum { S6 = 0, S7 = 0 };"},
{"lineNum":" 2272","line":""},
{"lineNum":" 2273","line":"  ViewStride()                  = default;"},
{"lineNum":" 2274","line":"  ViewStride(const ViewStride&) = default;"},
{"lineNum":" 2275","line":"  ViewStride& operator=(const ViewStride&) = default;"},
{"lineNum":" 2276","line":""},
{"lineNum":" 2277","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 2278","line":"  constexpr ViewStride(size_t aS0, size_t aS1, size_t aS2, size_t aS3,"},
{"lineNum":" 2279","line":"                       size_t aS4, size_t aS5, size_t, size_t)"},
{"lineNum":" 2280","line":"      : S0(aS0), S1(aS1), S2(aS2), S3(aS3), S4(aS4), S5(aS5) {}"},
{"lineNum":" 2281","line":"};"},
{"lineNum":" 2282","line":""},
{"lineNum":" 2283","line":"template <>"},
{"lineNum":" 2284","line":"struct ViewStride<7> {"},
{"lineNum":" 2285","line":"  size_t S0, S1, S2, S3, S4, S5, S6;"},
{"lineNum":" 2286","line":"  enum { S7 = 0 };"},
{"lineNum":" 2287","line":""},
{"lineNum":" 2288","line":"  ViewStride()                  = default;"},
{"lineNum":" 2289","line":"  ViewStride(const ViewStride&) = default;"},
{"lineNum":" 2290","line":"  ViewStride& operator=(const ViewStride&) = default;"},
{"lineNum":" 2291","line":""},
{"lineNum":" 2292","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 2293","line":"  constexpr ViewStride(size_t aS0, size_t aS1, size_t aS2, size_t aS3,"},
{"lineNum":" 2294","line":"                       size_t aS4, size_t aS5, size_t aS6, size_t)"},
{"lineNum":" 2295","line":"      : S0(aS0), S1(aS1), S2(aS2), S3(aS3), S4(aS4), S5(aS5), S6(aS6) {}"},
{"lineNum":" 2296","line":"};"},
{"lineNum":" 2297","line":""},
{"lineNum":" 2298","line":"template <>"},
{"lineNum":" 2299","line":"struct ViewStride<8> {"},
{"lineNum":" 2300","line":"  size_t S0, S1, S2, S3, S4, S5, S6, S7;"},
{"lineNum":" 2301","line":""},
{"lineNum":" 2302","line":"  ViewStride()                  = default;"},
{"lineNum":" 2303","line":"  ViewStride(const ViewStride&) = default;"},
{"lineNum":" 2304","line":"  ViewStride& operator=(const ViewStride&) = default;"},
{"lineNum":" 2305","line":""},
{"lineNum":" 2306","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 2307","line":"  constexpr ViewStride(size_t aS0, size_t aS1, size_t aS2, size_t aS3,"},
{"lineNum":" 2308","line":"                       size_t aS4, size_t aS5, size_t aS6, size_t aS7)"},
{"lineNum":" 2309","line":"      : S0(aS0),"},
{"lineNum":" 2310","line":"        S1(aS1),"},
{"lineNum":" 2311","line":"        S2(aS2),"},
{"lineNum":" 2312","line":"        S3(aS3),"},
{"lineNum":" 2313","line":"        S4(aS4),"},
{"lineNum":" 2314","line":"        S5(aS5),"},
{"lineNum":" 2315","line":"        S6(aS6),"},
{"lineNum":" 2316","line":"        S7(aS7) {}"},
{"lineNum":" 2317","line":"};"},
{"lineNum":" 2318","line":""},
{"lineNum":" 2319","line":"template <class Dimension>"},
{"lineNum":" 2320","line":"struct ViewOffset<Dimension, Kokkos::LayoutStride, void> {"},
{"lineNum":" 2321","line":" private:"},
{"lineNum":" 2322","line":"  using stride_type = ViewStride<Dimension::rank>;"},
{"lineNum":" 2323","line":""},
{"lineNum":" 2324","line":" public:"},
{"lineNum":" 2325","line":"  using is_mapping_plugin = std::true_type;"},
{"lineNum":" 2326","line":"  using is_regular        = std::true_type;"},
{"lineNum":" 2327","line":""},
{"lineNum":" 2328","line":"  using size_type      = size_t;"},
{"lineNum":" 2329","line":"  using dimension_type = Dimension;"},
{"lineNum":" 2330","line":"  using array_layout   = Kokkos::LayoutStride;"},
{"lineNum":" 2331","line":""},
{"lineNum":" 2332","line":"  dimension_type m_dim;"},
{"lineNum":" 2333","line":"  stride_type m_stride;"},
{"lineNum":" 2334","line":""},
{"lineNum":" 2335","line":"  //----------------------------------------"},
{"lineNum":" 2336","line":""},
{"lineNum":" 2337","line":"  // rank 1"},
{"lineNum":" 2338","line":"  template <typename I0>"},
{"lineNum":" 2339","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()(I0 const& i0) const {"},
{"lineNum":" 2340","line":"    return i0 * m_stride.S0;"},
{"lineNum":" 2341","line":"  }"},
{"lineNum":" 2342","line":""},
{"lineNum":" 2343","line":"  // rank 2"},
{"lineNum":" 2344","line":"  template <typename I0, typename I1>"},
{"lineNum":" 2345","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()(I0 const& i0,"},
{"lineNum":" 2346","line":"                                                        I1 const& i1) const {"},
{"lineNum":" 2347","line":"    return i0 * m_stride.S0 + i1 * m_stride.S1;"},
{"lineNum":" 2348","line":"  }"},
{"lineNum":" 2349","line":""},
{"lineNum":" 2350","line":"  // rank 3"},
{"lineNum":" 2351","line":"  template <typename I0, typename I1, typename I2>"},
{"lineNum":" 2352","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()(I0 const& i0,"},
{"lineNum":" 2353","line":"                                                        I1 const& i1,"},
{"lineNum":" 2354","line":"                                                        I2 const& i2) const {"},
{"lineNum":" 2355","line":"    return i0 * m_stride.S0 + i1 * m_stride.S1 + i2 * m_stride.S2;"},
{"lineNum":" 2356","line":"  }"},
{"lineNum":" 2357","line":""},
{"lineNum":" 2358","line":"  // rank 4"},
{"lineNum":" 2359","line":"  template <typename I0, typename I1, typename I2, typename I3>"},
{"lineNum":" 2360","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()(I0 const& i0,"},
{"lineNum":" 2361","line":"                                                        I1 const& i1,"},
{"lineNum":" 2362","line":"                                                        I2 const& i2,"},
{"lineNum":" 2363","line":"                                                        I3 const& i3) const {"},
{"lineNum":" 2364","line":"    return i0 * m_stride.S0 + i1 * m_stride.S1 + i2 * m_stride.S2 +"},
{"lineNum":" 2365","line":"           i3 * m_stride.S3;"},
{"lineNum":" 2366","line":"  }"},
{"lineNum":" 2367","line":""},
{"lineNum":" 2368","line":"  // rank 5"},
{"lineNum":" 2369","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4>"},
{"lineNum":" 2370","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()(I0 const& i0,"},
{"lineNum":" 2371","line":"                                                        I1 const& i1,"},
{"lineNum":" 2372","line":"                                                        I2 const& i2,"},
{"lineNum":" 2373","line":"                                                        I3 const& i3,"},
{"lineNum":" 2374","line":"                                                        I4 const& i4) const {"},
{"lineNum":" 2375","line":"    return i0 * m_stride.S0 + i1 * m_stride.S1 + i2 * m_stride.S2 +"},
{"lineNum":" 2376","line":"           i3 * m_stride.S3 + i4 * m_stride.S4;"},
{"lineNum":" 2377","line":"  }"},
{"lineNum":" 2378","line":""},
{"lineNum":" 2379","line":"  // rank 6"},
{"lineNum":" 2380","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4,"},
{"lineNum":" 2381","line":"            typename I5>"},
{"lineNum":" 2382","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()("},
{"lineNum":" 2383","line":"      I0 const& i0, I1 const& i1, I2 const& i2, I3 const& i3, I4 const& i4,"},
{"lineNum":" 2384","line":"      I5 const& i5) const {"},
{"lineNum":" 2385","line":"    return i0 * m_stride.S0 + i1 * m_stride.S1 + i2 * m_stride.S2 +"},
{"lineNum":" 2386","line":"           i3 * m_stride.S3 + i4 * m_stride.S4 + i5 * m_stride.S5;"},
{"lineNum":" 2387","line":"  }"},
{"lineNum":" 2388","line":""},
{"lineNum":" 2389","line":"  // rank 7"},
{"lineNum":" 2390","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4,"},
{"lineNum":" 2391","line":"            typename I5, typename I6>"},
{"lineNum":" 2392","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()("},
{"lineNum":" 2393","line":"      I0 const& i0, I1 const& i1, I2 const& i2, I3 const& i3, I4 const& i4,"},
{"lineNum":" 2394","line":"      I5 const& i5, I6 const& i6) const {"},
{"lineNum":" 2395","line":"    return i0 * m_stride.S0 + i1 * m_stride.S1 + i2 * m_stride.S2 +"},
{"lineNum":" 2396","line":"           i3 * m_stride.S3 + i4 * m_stride.S4 + i5 * m_stride.S5 +"},
{"lineNum":" 2397","line":"           i6 * m_stride.S6;"},
{"lineNum":" 2398","line":"  }"},
{"lineNum":" 2399","line":""},
{"lineNum":" 2400","line":"  // rank 8"},
{"lineNum":" 2401","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4,"},
{"lineNum":" 2402","line":"            typename I5, typename I6, typename I7>"},
{"lineNum":" 2403","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type operator()("},
{"lineNum":" 2404","line":"      I0 const& i0, I1 const& i1, I2 const& i2, I3 const& i3, I4 const& i4,"},
{"lineNum":" 2405","line":"      I5 const& i5, I6 const& i6, I7 const& i7) const {"},
{"lineNum":" 2406","line":"    return i0 * m_stride.S0 + i1 * m_stride.S1 + i2 * m_stride.S2 +"},
{"lineNum":" 2407","line":"           i3 * m_stride.S3 + i4 * m_stride.S4 + i5 * m_stride.S5 +"},
{"lineNum":" 2408","line":"           i6 * m_stride.S6 + i7 * m_stride.S7;"},
{"lineNum":" 2409","line":"  }"},
{"lineNum":" 2410","line":""},
{"lineNum":" 2411","line":"  //----------------------------------------"},
{"lineNum":" 2412","line":""},
{"lineNum":" 2413","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 2414","line":"  constexpr array_layout layout() const {"},
{"lineNum":" 2415","line":"    return array_layout(m_dim.N0, m_stride.S0, m_dim.N1, m_stride.S1, m_dim.N2,"},
{"lineNum":" 2416","line":"                        m_stride.S2, m_dim.N3, m_stride.S3, m_dim.N4,"},
{"lineNum":" 2417","line":"                        m_stride.S4, m_dim.N5, m_stride.S5, m_dim.N6,"},
{"lineNum":" 2418","line":"                        m_stride.S6, m_dim.N7, m_stride.S7);"},
{"lineNum":" 2419","line":"  }"},
{"lineNum":" 2420","line":""},
{"lineNum":" 2421","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_0() const {"},
{"lineNum":" 2422","line":"    return m_dim.N0;"},
{"lineNum":" 2423","line":"  }"},
{"lineNum":" 2424","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_1() const {"},
{"lineNum":" 2425","line":"    return m_dim.N1;"},
{"lineNum":" 2426","line":"  }"},
{"lineNum":" 2427","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_2() const {"},
{"lineNum":" 2428","line":"    return m_dim.N2;"},
{"lineNum":" 2429","line":"  }"},
{"lineNum":" 2430","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_3() const {"},
{"lineNum":" 2431","line":"    return m_dim.N3;"},
{"lineNum":" 2432","line":"  }"},
{"lineNum":" 2433","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_4() const {"},
{"lineNum":" 2434","line":"    return m_dim.N4;"},
{"lineNum":" 2435","line":"  }"},
{"lineNum":" 2436","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_5() const {"},
{"lineNum":" 2437","line":"    return m_dim.N5;"},
{"lineNum":" 2438","line":"  }"},
{"lineNum":" 2439","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_6() const {"},
{"lineNum":" 2440","line":"    return m_dim.N6;"},
{"lineNum":" 2441","line":"  }"},
{"lineNum":" 2442","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type dimension_7() const {"},
{"lineNum":" 2443","line":"    return m_dim.N7;"},
{"lineNum":" 2444","line":"  }"},
{"lineNum":" 2445","line":""},
{"lineNum":" 2446","line":"  /* Cardinality of the domain index space */"},
{"lineNum":" 2447","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 2448","line":"  constexpr size_type size() const {"},
{"lineNum":" 2449","line":"    return m_dim.N0 * m_dim.N1 * m_dim.N2 * m_dim.N3 * m_dim.N4 * m_dim.N5 *"},
{"lineNum":" 2450","line":"           m_dim.N6 * m_dim.N7;"},
{"lineNum":" 2451","line":"  }"},
{"lineNum":" 2452","line":""},
{"lineNum":" 2453","line":" private:"},
{"lineNum":" 2454","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 2455","line":"  static constexpr size_type Max(size_type lhs, size_type rhs) {"},
{"lineNum":" 2456","line":"    return lhs < rhs ? rhs : lhs;"},
{"lineNum":" 2457","line":"  }"},
{"lineNum":" 2458","line":""},
{"lineNum":" 2459","line":" public:"},
{"lineNum":" 2460","line":"  /* Span of the range space, largest stride * dimension */"},
{"lineNum":" 2461","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 2462","line":"  constexpr size_type span() const {"},
{"lineNum":" 2463","line":"    return size() == size_type(0)"},
{"lineNum":" 2464","line":"               ? size_type(0)"},
{"lineNum":" 2465","line":"               : Max(m_dim.N0 * m_stride.S0,"},
{"lineNum":" 2466","line":"                     Max(m_dim.N1 * m_stride.S1,"},
{"lineNum":" 2467","line":"                         Max(m_dim.N2 * m_stride.S2,"},
{"lineNum":" 2468","line":"                             Max(m_dim.N3 * m_stride.S3,"},
{"lineNum":" 2469","line":"                                 Max(m_dim.N4 * m_stride.S4,"},
{"lineNum":" 2470","line":"                                     Max(m_dim.N5 * m_stride.S5,"},
{"lineNum":" 2471","line":"                                         Max(m_dim.N6 * m_stride.S6,"},
{"lineNum":" 2472","line":"                                             m_dim.N7 * m_stride.S7)))))));"},
{"lineNum":" 2473","line":"  }"},
{"lineNum":" 2474","line":""},
{"lineNum":" 2475","line":"  KOKKOS_INLINE_FUNCTION constexpr bool span_is_contiguous() const {"},
{"lineNum":" 2476","line":"    return span() == size();"},
{"lineNum":" 2477","line":"  }"},
{"lineNum":" 2478","line":""},
{"lineNum":" 2479","line":"  /* Strides of dimensions */"},
{"lineNum":" 2480","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_0() const {"},
{"lineNum":" 2481","line":"    return m_stride.S0;"},
{"lineNum":" 2482","line":"  }"},
{"lineNum":" 2483","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_1() const {"},
{"lineNum":" 2484","line":"    return m_stride.S1;"},
{"lineNum":" 2485","line":"  }"},
{"lineNum":" 2486","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_2() const {"},
{"lineNum":" 2487","line":"    return m_stride.S2;"},
{"lineNum":" 2488","line":"  }"},
{"lineNum":" 2489","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_3() const {"},
{"lineNum":" 2490","line":"    return m_stride.S3;"},
{"lineNum":" 2491","line":"  }"},
{"lineNum":" 2492","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_4() const {"},
{"lineNum":" 2493","line":"    return m_stride.S4;"},
{"lineNum":" 2494","line":"  }"},
{"lineNum":" 2495","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_5() const {"},
{"lineNum":" 2496","line":"    return m_stride.S5;"},
{"lineNum":" 2497","line":"  }"},
{"lineNum":" 2498","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_6() const {"},
{"lineNum":" 2499","line":"    return m_stride.S6;"},
{"lineNum":" 2500","line":"  }"},
{"lineNum":" 2501","line":"  KOKKOS_INLINE_FUNCTION constexpr size_type stride_7() const {"},
{"lineNum":" 2502","line":"    return m_stride.S7;"},
{"lineNum":" 2503","line":"  }"},
{"lineNum":" 2504","line":""},
{"lineNum":" 2505","line":"  // Stride with [ rank ] value is the total length"},
{"lineNum":" 2506","line":"  template <typename iType>"},
{"lineNum":" 2507","line":"  KOKKOS_INLINE_FUNCTION void stride(iType* const s) const {"},
{"lineNum":" 2508","line":"    if (0 < dimension_type::rank) {"},
{"lineNum":" 2509","line":"      s[0] = m_stride.S0;"},
{"lineNum":" 2510","line":"    }"},
{"lineNum":" 2511","line":"    if (1 < dimension_type::rank) {"},
{"lineNum":" 2512","line":"      s[1] = m_stride.S1;"},
{"lineNum":" 2513","line":"    }"},
{"lineNum":" 2514","line":"    if (2 < dimension_type::rank) {"},
{"lineNum":" 2515","line":"      s[2] = m_stride.S2;"},
{"lineNum":" 2516","line":"    }"},
{"lineNum":" 2517","line":"    if (3 < dimension_type::rank) {"},
{"lineNum":" 2518","line":"      s[3] = m_stride.S3;"},
{"lineNum":" 2519","line":"    }"},
{"lineNum":" 2520","line":"    if (4 < dimension_type::rank) {"},
{"lineNum":" 2521","line":"      s[4] = m_stride.S4;"},
{"lineNum":" 2522","line":"    }"},
{"lineNum":" 2523","line":"    if (5 < dimension_type::rank) {"},
{"lineNum":" 2524","line":"      s[5] = m_stride.S5;"},
{"lineNum":" 2525","line":"    }"},
{"lineNum":" 2526","line":"    if (6 < dimension_type::rank) {"},
{"lineNum":" 2527","line":"      s[6] = m_stride.S6;"},
{"lineNum":" 2528","line":"    }"},
{"lineNum":" 2529","line":"    if (7 < dimension_type::rank) {"},
{"lineNum":" 2530","line":"      s[7] = m_stride.S7;"},
{"lineNum":" 2531","line":"    }"},
{"lineNum":" 2532","line":"    s[dimension_type::rank] = span();"},
{"lineNum":" 2533","line":"  }"},
{"lineNum":" 2534","line":""},
{"lineNum":" 2535","line":"  //----------------------------------------"},
{"lineNum":" 2536","line":"  // MSVC (16.5.5) + CUDA (10.2) did not generate the defaulted functions"},
{"lineNum":" 2537","line":"  // correct and errors out during compilation. Same for the other places where"},
{"lineNum":" 2538","line":"  // I changed this."},
{"lineNum":" 2539","line":""},
{"lineNum":" 2540","line":"#ifdef KOKKOS_IMPL_WINDOWS_CUDA"},
{"lineNum":" 2541","line":"  KOKKOS_FUNCTION ViewOffset()"},
{"lineNum":" 2542","line":"      : m_dim(dimension_type()), m_stride(stride_type()) {}"},
{"lineNum":" 2543","line":"  KOKKOS_FUNCTION ViewOffset(const ViewOffset& src) {"},
{"lineNum":" 2544","line":"    m_dim    = src.m_dim;"},
{"lineNum":" 2545","line":"    m_stride = src.m_stride;"},
{"lineNum":" 2546","line":"  }"},
{"lineNum":" 2547","line":"  KOKKOS_FUNCTION ViewOffset& operator=(const ViewOffset& src) {"},
{"lineNum":" 2548","line":"    m_dim    = src.m_dim;"},
{"lineNum":" 2549","line":"    m_stride = src.m_stride;"},
{"lineNum":" 2550","line":"    return *this;"},
{"lineNum":" 2551","line":"  }"},
{"lineNum":" 2552","line":"#else"},
{"lineNum":" 2553","line":""},
{"lineNum":" 2554","line":"  ViewOffset()                  = default;"},
{"lineNum":" 2555","line":"  ViewOffset(const ViewOffset&) = default;"},
{"lineNum":" 2556","line":"  ViewOffset& operator=(const ViewOffset&) = default;"},
{"lineNum":" 2557","line":"#endif"},
{"lineNum":" 2558","line":""},
{"lineNum":" 2559","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 2560","line":"  constexpr ViewOffset(std::integral_constant<unsigned, 0> const&,"},
{"lineNum":" 2561","line":"                       Kokkos::LayoutStride const& rhs)"},
{"lineNum":" 2562","line":"      : m_dim(rhs.dimension[0], rhs.dimension[1], rhs.dimension[2],"},
{"lineNum":" 2563","line":"              rhs.dimension[3], rhs.dimension[4], rhs.dimension[5],"},
{"lineNum":" 2564","line":"              rhs.dimension[6], rhs.dimension[7]),"},
{"lineNum":" 2565","line":"        m_stride(rhs.stride[0], rhs.stride[1], rhs.stride[2], rhs.stride[3],"},
{"lineNum":" 2566","line":"                 rhs.stride[4], rhs.stride[5], rhs.stride[6], rhs.stride[7]) {}"},
{"lineNum":" 2567","line":""},
{"lineNum":" 2568","line":"  template <class DimRHS, class LayoutRHS>"},
{"lineNum":" 2569","line":"  KOKKOS_INLINE_FUNCTION constexpr ViewOffset("},
{"lineNum":" 2570","line":"      const ViewOffset<DimRHS, LayoutRHS, void>& rhs)"},
{"lineNum":" 2571","line":"      : m_dim(rhs.m_dim.N0, rhs.m_dim.N1, rhs.m_dim.N2, rhs.m_dim.N3,"},
{"lineNum":" 2572","line":"              rhs.m_dim.N4, rhs.m_dim.N5, rhs.m_dim.N6, rhs.m_dim.N7),"},
{"lineNum":" 2573","line":"        m_stride(rhs.stride_0(), rhs.stride_1(), rhs.stride_2(), rhs.stride_3(),"},
{"lineNum":" 2574","line":"                 rhs.stride_4(), rhs.stride_5(), rhs.stride_6(),"},
{"lineNum":" 2575","line":"                 rhs.stride_7()) {"},
{"lineNum":" 2576","line":"    static_assert(int(DimRHS::rank) == int(dimension_type::rank),"},
{"lineNum":" 2577","line":"                  \"ViewOffset assignment requires equal rank\");"},
{"lineNum":" 2578","line":"    // Also requires equal static dimensions ..."},
{"lineNum":" 2579","line":"  }"},
{"lineNum":" 2580","line":""},
{"lineNum":" 2581","line":"  //----------------------------------------"},
{"lineNum":" 2582","line":"  // Subview construction"},
{"lineNum":" 2583","line":""},
{"lineNum":" 2584","line":" private:"},
{"lineNum":" 2585","line":"  template <class DimRHS, class LayoutRHS>"},
{"lineNum":" 2586","line":"  KOKKOS_INLINE_FUNCTION static constexpr size_t stride("},
{"lineNum":" 2587","line":"      unsigned r, const ViewOffset<DimRHS, LayoutRHS, void>& rhs) {"},
{"lineNum":" 2588","line":"    return r > 7"},
{"lineNum":" 2589","line":"               ? 0"},
{"lineNum":" 2590","line":"               : (r == 0"},
{"lineNum":" 2591","line":"                      ? rhs.stride_0()"},
{"lineNum":" 2592","line":"                      : (r == 1"},
{"lineNum":" 2593","line":"                             ? rhs.stride_1()"},
{"lineNum":" 2594","line":"                             : (r == 2"},
{"lineNum":" 2595","line":"                                    ? rhs.stride_2()"},
{"lineNum":" 2596","line":"                                    : (r == 3"},
{"lineNum":" 2597","line":"                                           ? rhs.stride_3()"},
{"lineNum":" 2598","line":"                                           : (r == 4"},
{"lineNum":" 2599","line":"                                                  ? rhs.stride_4()"},
{"lineNum":" 2600","line":"                                                  : (r == 5"},
{"lineNum":" 2601","line":"                                                         ? rhs.stride_5()"},
{"lineNum":" 2602","line":"                                                         : (r == 6"},
{"lineNum":" 2603","line":"                                                                ? rhs.stride_6()"},
{"lineNum":" 2604","line":"                                                                : rhs.stride_7())))))));"},
{"lineNum":" 2605","line":"  }"},
{"lineNum":" 2606","line":""},
{"lineNum":" 2607","line":" public:"},
{"lineNum":" 2608","line":"  template <class DimRHS, class LayoutRHS>"},
{"lineNum":" 2609","line":"  KOKKOS_INLINE_FUNCTION constexpr ViewOffset("},
{"lineNum":" 2610","line":"      const ViewOffset<DimRHS, LayoutRHS, void>& rhs,"},
{"lineNum":" 2611","line":"      const SubviewExtents<DimRHS::rank, dimension_type::rank>& sub)"},
{"lineNum":" 2612","line":"      // range_extent(r) returns 0 when dimension_type::rank <= r"},
{"lineNum":" 2613","line":"      : m_dim(sub.range_extent(0), sub.range_extent(1), sub.range_extent(2),"},
{"lineNum":" 2614","line":"              sub.range_extent(3), sub.range_extent(4), sub.range_extent(5),"},
{"lineNum":" 2615","line":"              sub.range_extent(6), sub.range_extent(7))"},
{"lineNum":" 2616","line":"        // range_index(r) returns ~0u when dimension_type::rank <= r"},
{"lineNum":" 2617","line":"        ,"},
{"lineNum":" 2618","line":"        m_stride("},
{"lineNum":" 2619","line":"            stride(sub.range_index(0), rhs), stride(sub.range_index(1), rhs),"},
{"lineNum":" 2620","line":"            stride(sub.range_index(2), rhs), stride(sub.range_index(3), rhs),"},
{"lineNum":" 2621","line":"            stride(sub.range_index(4), rhs), stride(sub.range_index(5), rhs),"},
{"lineNum":" 2622","line":"            stride(sub.range_index(6), rhs), stride(sub.range_index(7), rhs)) {}"},
{"lineNum":" 2623","line":"};"},
{"lineNum":" 2624","line":""},
{"lineNum":" 2625","line":"}  // namespace Impl"},
{"lineNum":" 2626","line":"}  // namespace Kokkos"},
{"lineNum":" 2627","line":""},
{"lineNum":" 2628","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 2629","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 2630","line":""},
{"lineNum":" 2631","line":"namespace Kokkos {"},
{"lineNum":" 2632","line":"namespace Impl {"},
{"lineNum":" 2633","line":""},
{"lineNum":" 2634","line":"/** \\brief  ViewDataHandle provides the type of the \'data handle\' which the view"},
{"lineNum":" 2635","line":" *          uses to access data with the [] operator. It also provides"},
{"lineNum":" 2636","line":" *          an allocate function and a function to extract a raw ptr from the"},
{"lineNum":" 2637","line":" *          data handle. ViewDataHandle also defines an enum ReferenceAble which"},
{"lineNum":" 2638","line":" *          specifies whether references/pointers to elements can be taken and a"},
{"lineNum":" 2639","line":" *          \'return_type\' which is what the view operators will give back."},
{"lineNum":" 2640","line":" *          Specialisation of this object allows three things depending"},
{"lineNum":" 2641","line":" *          on ViewTraits and compiler options:"},
{"lineNum":" 2642","line":" *          (i)   Use special allocator (e.g. huge pages/small pages and pinned"},
{"lineNum":" 2643","line":" * memory) (ii)  Use special data handle type (e.g. add Cuda Texture Object)"},
{"lineNum":" 2644","line":" *          (iii) Use special access intrinsics (e.g. texture fetch and"},
{"lineNum":" 2645","line":" * non-caching loads)"},
{"lineNum":" 2646","line":" */"},
{"lineNum":" 2647","line":"template <class Traits, class Enable = void>"},
{"lineNum":" 2648","line":"struct ViewDataHandle {"},
{"lineNum":" 2649","line":"  using value_type  = typename Traits::value_type;"},
{"lineNum":" 2650","line":"  using handle_type = typename Traits::value_type*;"},
{"lineNum":" 2651","line":"  using return_type = typename Traits::value_type&;"},
{"lineNum":" 2652","line":"  using track_type  = Kokkos::Impl::SharedAllocationTracker;"},
{"lineNum":" 2653","line":""},
{"lineNum":" 2654","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 2655","line":"  static handle_type assign(value_type* arg_data_ptr,"},
{"lineNum":" 2656","line":"                            track_type const& /*arg_tracker*/) {"},
{"lineNum":" 2657","line":"    return handle_type(arg_data_ptr);"},
{"lineNum":" 2658","line":"  }"},
{"lineNum":" 2659","line":""},
{"lineNum":" 2660","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 2661","line":"  static handle_type assign(handle_type const arg_data_ptr, size_t offset) {"},
{"lineNum":" 2662","line":"    return handle_type(arg_data_ptr + offset);","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 2663","line":"  }"},
{"lineNum":" 2664","line":"};"},
{"lineNum":" 2665","line":""},
{"lineNum":" 2666","line":"template <class Traits>"},
{"lineNum":" 2667","line":"struct ViewDataHandle<"},
{"lineNum":" 2668","line":"    Traits, typename std::enable_if<("},
{"lineNum":" 2669","line":"                std::is_same<typename Traits::non_const_value_type,"},
{"lineNum":" 2670","line":"                             typename Traits::value_type>::value &&"},
{"lineNum":" 2671","line":"                std::is_same<typename Traits::specialize, void>::value &&"},
{"lineNum":" 2672","line":"                Traits::memory_traits::is_atomic)>::type> {"},
{"lineNum":" 2673","line":"  using value_type  = typename Traits::value_type;"},
{"lineNum":" 2674","line":"  using handle_type = typename Kokkos::Impl::AtomicViewDataHandle<Traits>;"},
{"lineNum":" 2675","line":"  using return_type = typename Kokkos::Impl::AtomicDataElement<Traits>;"},
{"lineNum":" 2676","line":"  using track_type  = Kokkos::Impl::SharedAllocationTracker;"},
{"lineNum":" 2677","line":""},
{"lineNum":" 2678","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 2679","line":"  static handle_type assign(value_type* arg_data_ptr,"},
{"lineNum":" 2680","line":"                            track_type const& /*arg_tracker*/) {"},
{"lineNum":" 2681","line":"    return handle_type(arg_data_ptr);"},
{"lineNum":" 2682","line":"  }"},
{"lineNum":" 2683","line":""},
{"lineNum":" 2684","line":"  template <class SrcHandleType>"},
{"lineNum":" 2685","line":"  KOKKOS_INLINE_FUNCTION static handle_type assign("},
{"lineNum":" 2686","line":"      const SrcHandleType& arg_handle, size_t offset) {"},
{"lineNum":" 2687","line":"    return handle_type(arg_handle + offset);"},
{"lineNum":" 2688","line":"  }"},
{"lineNum":" 2689","line":"};"},
{"lineNum":" 2690","line":""},
{"lineNum":" 2691","line":"template <class Traits>"},
{"lineNum":" 2692","line":"struct ViewDataHandle<"},
{"lineNum":" 2693","line":"    Traits, typename std::enable_if<("},
{"lineNum":" 2694","line":"                std::is_same<typename Traits::specialize, void>::value &&"},
{"lineNum":" 2695","line":"                (!Traits::memory_traits::is_aligned) &&"},
{"lineNum":" 2696","line":"                Traits::memory_traits::is_restrict"},
{"lineNum":" 2697","line":"#ifdef KOKKOS_ENABLE_CUDA"},
{"lineNum":" 2698","line":"                && (!(std::is_same<typename Traits::memory_space,"},
{"lineNum":" 2699","line":"                                   Kokkos::CudaSpace>::value ||"},
{"lineNum":" 2700","line":"                      std::is_same<typename Traits::memory_space,"},
{"lineNum":" 2701","line":"                                   Kokkos::CudaUVMSpace>::value))"},
{"lineNum":" 2702","line":"#endif"},
{"lineNum":" 2703","line":"                && (!Traits::memory_traits::is_atomic))>::type> {"},
{"lineNum":" 2704","line":"  using value_type  = typename Traits::value_type;"},
{"lineNum":" 2705","line":"  using handle_type = typename Traits::value_type* KOKKOS_RESTRICT;"},
{"lineNum":" 2706","line":"  using return_type = typename Traits::value_type& KOKKOS_RESTRICT;"},
{"lineNum":" 2707","line":"  using track_type  = Kokkos::Impl::SharedAllocationTracker;"},
{"lineNum":" 2708","line":""},
{"lineNum":" 2709","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 2710","line":"  static value_type* assign(value_type* arg_data_ptr,"},
{"lineNum":" 2711","line":"                            track_type const& /*arg_tracker*/) {"},
{"lineNum":" 2712","line":"    return (value_type*)(arg_data_ptr);"},
{"lineNum":" 2713","line":"  }"},
{"lineNum":" 2714","line":""},
{"lineNum":" 2715","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 2716","line":"  static value_type* assign(handle_type const arg_data_ptr, size_t offset) {"},
{"lineNum":" 2717","line":"    return (value_type*)(arg_data_ptr + offset);"},
{"lineNum":" 2718","line":"  }"},
{"lineNum":" 2719","line":"};"},
{"lineNum":" 2720","line":""},
{"lineNum":" 2721","line":"template <class Traits>"},
{"lineNum":" 2722","line":"struct ViewDataHandle<"},
{"lineNum":" 2723","line":"    Traits, typename std::enable_if<("},
{"lineNum":" 2724","line":"                std::is_same<typename Traits::specialize, void>::value &&"},
{"lineNum":" 2725","line":"                Traits::memory_traits::is_aligned &&"},
{"lineNum":" 2726","line":"                (!Traits::memory_traits::is_restrict)"},
{"lineNum":" 2727","line":"#ifdef KOKKOS_ENABLE_CUDA"},
{"lineNum":" 2728","line":"                && (!(std::is_same<typename Traits::memory_space,"},
{"lineNum":" 2729","line":"                                   Kokkos::CudaSpace>::value ||"},
{"lineNum":" 2730","line":"                      std::is_same<typename Traits::memory_space,"},
{"lineNum":" 2731","line":"                                   Kokkos::CudaUVMSpace>::value))"},
{"lineNum":" 2732","line":"#endif"},
{"lineNum":" 2733","line":"                && (!Traits::memory_traits::is_atomic))>::type> {"},
{"lineNum":" 2734","line":"  using value_type = typename Traits::value_type;"},
{"lineNum":" 2735","line":"  // typedef work-around for intel compilers error #3186: expected typedef"},
{"lineNum":" 2736","line":"  // declaration"},
{"lineNum":" 2737","line":"  // NOLINTNEXTLINE(modernize-use-using)"},
{"lineNum":" 2738","line":"  typedef value_type* KOKKOS_IMPL_ALIGN_PTR(KOKKOS_MEMORY_ALIGNMENT)"},
{"lineNum":" 2739","line":"      handle_type;"},
{"lineNum":" 2740","line":"  using return_type = typename Traits::value_type&;"},
{"lineNum":" 2741","line":"  using track_type  = Kokkos::Impl::SharedAllocationTracker;"},
{"lineNum":" 2742","line":""},
{"lineNum":" 2743","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 2744","line":"  static handle_type assign(value_type* arg_data_ptr,"},
{"lineNum":" 2745","line":"                            track_type const& /*arg_tracker*/) {"},
{"lineNum":" 2746","line":"    if (reinterpret_cast<uintptr_t>(arg_data_ptr) % Impl::MEMORY_ALIGNMENT) {"},
{"lineNum":" 2747","line":"      Kokkos::abort("},
{"lineNum":" 2748","line":"          \"Assigning NonAligned View or Pointer to Kokkos::View with Aligned \""},
{"lineNum":" 2749","line":"          \"attribute\");"},
{"lineNum":" 2750","line":"    }"},
{"lineNum":" 2751","line":"    return handle_type(arg_data_ptr);"},
{"lineNum":" 2752","line":"  }"},
{"lineNum":" 2753","line":""},
{"lineNum":" 2754","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 2755","line":"  static handle_type assign(handle_type const arg_data_ptr, size_t offset) {"},
{"lineNum":" 2756","line":"    if (reinterpret_cast<uintptr_t>(arg_data_ptr + offset) %"},
{"lineNum":" 2757","line":"        Impl::MEMORY_ALIGNMENT) {"},
{"lineNum":" 2758","line":"      Kokkos::abort("},
{"lineNum":" 2759","line":"          \"Assigning NonAligned View or Pointer to Kokkos::View with Aligned \""},
{"lineNum":" 2760","line":"          \"attribute\");"},
{"lineNum":" 2761","line":"    }"},
{"lineNum":" 2762","line":"    return handle_type(arg_data_ptr + offset);"},
{"lineNum":" 2763","line":"  }"},
{"lineNum":" 2764","line":"};"},
{"lineNum":" 2765","line":""},
{"lineNum":" 2766","line":"template <class Traits>"},
{"lineNum":" 2767","line":"struct ViewDataHandle<"},
{"lineNum":" 2768","line":"    Traits,"},
{"lineNum":" 2769","line":"    typename std::enable_if<("},
{"lineNum":" 2770","line":"        std::is_same<typename Traits::specialize, void>::value &&"},
{"lineNum":" 2771","line":"        Traits::memory_traits::is_aligned && Traits::memory_traits::is_restrict"},
{"lineNum":" 2772","line":"#ifdef KOKKOS_ENABLE_CUDA"},
{"lineNum":" 2773","line":"        && (!(std::is_same<typename Traits::memory_space,"},
{"lineNum":" 2774","line":"                           Kokkos::CudaSpace>::value ||"},
{"lineNum":" 2775","line":"              std::is_same<typename Traits::memory_space,"},
{"lineNum":" 2776","line":"                           Kokkos::CudaUVMSpace>::value))"},
{"lineNum":" 2777","line":"#endif"},
{"lineNum":" 2778","line":"        && (!Traits::memory_traits::is_atomic))>::type> {"},
{"lineNum":" 2779","line":"  using value_type = typename Traits::value_type;"},
{"lineNum":" 2780","line":"  // typedef work-around for intel compilers error #3186: expected typedef"},
{"lineNum":" 2781","line":"  // declaration"},
{"lineNum":" 2782","line":"  // NOLINTNEXTLINE(modernize-use-using)"},
{"lineNum":" 2783","line":"  typedef value_type* KOKKOS_IMPL_ALIGN_PTR(KOKKOS_MEMORY_ALIGNMENT)"},
{"lineNum":" 2784","line":"      handle_type;"},
{"lineNum":" 2785","line":"  using return_type = typename Traits::value_type& KOKKOS_RESTRICT;"},
{"lineNum":" 2786","line":"  using track_type  = Kokkos::Impl::SharedAllocationTracker;"},
{"lineNum":" 2787","line":""},
{"lineNum":" 2788","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 2789","line":"  static value_type* assign(value_type* arg_data_ptr,"},
{"lineNum":" 2790","line":"                            track_type const& /*arg_tracker*/) {"},
{"lineNum":" 2791","line":"    if (reinterpret_cast<uintptr_t>(arg_data_ptr) % Impl::MEMORY_ALIGNMENT) {"},
{"lineNum":" 2792","line":"      Kokkos::abort("},
{"lineNum":" 2793","line":"          \"Assigning NonAligned View or Pointer to Kokkos::View with Aligned \""},
{"lineNum":" 2794","line":"          \"attribute\");"},
{"lineNum":" 2795","line":"    }"},
{"lineNum":" 2796","line":"    return (value_type*)(arg_data_ptr);"},
{"lineNum":" 2797","line":"  }"},
{"lineNum":" 2798","line":""},
{"lineNum":" 2799","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 2800","line":"  static value_type* assign(handle_type const arg_data_ptr, size_t offset) {"},
{"lineNum":" 2801","line":"    if (reinterpret_cast<uintptr_t>(arg_data_ptr + offset) %"},
{"lineNum":" 2802","line":"        Impl::MEMORY_ALIGNMENT) {"},
{"lineNum":" 2803","line":"      Kokkos::abort("},
{"lineNum":" 2804","line":"          \"Assigning NonAligned View or Pointer to Kokkos::View with Aligned \""},
{"lineNum":" 2805","line":"          \"attribute\");"},
{"lineNum":" 2806","line":"    }"},
{"lineNum":" 2807","line":"    return (value_type*)(arg_data_ptr + offset);"},
{"lineNum":" 2808","line":"  }"},
{"lineNum":" 2809","line":"};"},
{"lineNum":" 2810","line":"}  // namespace Impl"},
{"lineNum":" 2811","line":"}  // namespace Kokkos"},
{"lineNum":" 2812","line":""},
{"lineNum":" 2813","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 2814","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 2815","line":""},
{"lineNum":" 2816","line":"namespace Kokkos {"},
{"lineNum":" 2817","line":"namespace Impl {"},
{"lineNum":" 2818","line":""},
{"lineNum":" 2819","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 2820","line":""},
{"lineNum":" 2821","line":"/*"},
{"lineNum":" 2822","line":" *  The construction, assignment to default, and destruction"},
{"lineNum":" 2823","line":" *  are merged into a single functor."},
{"lineNum":" 2824","line":" *  Primarily to work around an unresolved CUDA back-end bug"},
{"lineNum":" 2825","line":" *  that would lose the destruction cuda device function when"},
{"lineNum":" 2826","line":" *  called from the shared memory tracking destruction."},
{"lineNum":" 2827","line":" *  Secondarily to have two fewer partial specializations."},
{"lineNum":" 2828","line":" */"},
{"lineNum":" 2829","line":"template <class ExecSpace, class ValueType,"},
{"lineNum":" 2830","line":"          bool IsScalar = std::is_scalar<ValueType>::value>"},
{"lineNum":" 2831","line":"struct ViewValueFunctor;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2832","line":""},
{"lineNum":" 2833","line":"template <class ExecSpace, class ValueType>"},
{"lineNum":" 2834","line":"struct ViewValueFunctor<ExecSpace, ValueType, false /* is_scalar */> {"},
{"lineNum":" 2835","line":"  using PolicyType = Kokkos::RangePolicy<ExecSpace, Kokkos::IndexType<int64_t>>;"},
{"lineNum":" 2836","line":"  using Exec       = typename ExecSpace::execution_space;"},
{"lineNum":" 2837","line":""},
{"lineNum":" 2838","line":"  Exec space;"},
{"lineNum":" 2839","line":"  ValueType* ptr;"},
{"lineNum":" 2840","line":"  size_t n;"},
{"lineNum":" 2841","line":"  bool destroy;"},
{"lineNum":" 2842","line":"  std::string name;"},
{"lineNum":" 2843","line":""},
{"lineNum":" 2844","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 2845","line":"  void operator()(const size_t i) const {"},
{"lineNum":" 2846","line":"    if (destroy) {","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":" 2847","line":"      (ptr + i)->~ValueType();"},
{"lineNum":" 2848","line":"    }  // KOKKOS_IMPL_CUDA_CLANG_WORKAROUND this line causes ptax error"},
{"lineNum":" 2849","line":"       // __cxa_begin_catch in nested_view unit-test"},
{"lineNum":" 2850","line":"    else {"},
{"lineNum":" 2851","line":"      new (ptr + i) ValueType();","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2852","line":"    }"},
{"lineNum":" 2853","line":"  }"},
{"lineNum":" 2854","line":""},
{"lineNum":" 2855","line":"  ViewValueFunctor()                        = default;"},
{"lineNum":" 2856","line":"  ViewValueFunctor(const ViewValueFunctor&) = default;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2857","line":"  ViewValueFunctor& operator=(const ViewValueFunctor&) = default;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2858","line":""},
{"lineNum":" 2859","line":"  ViewValueFunctor(ExecSpace const& arg_space, ValueType* const arg_ptr,"},
{"lineNum":" 2860","line":"                   size_t const arg_n, std::string arg_name)"},
{"lineNum":" 2861","line":"      : space(arg_space),"},
{"lineNum":" 2862","line":"        ptr(arg_ptr),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2863","line":"        n(arg_n),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2864","line":"        destroy(false),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2865","line":"        name(std::move(arg_name)) {}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2866","line":""},
{"lineNum":" 2867","line":"  void execute(bool arg) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2868","line":"    destroy = arg;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2869","line":"    PolicyType policy(0, n);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2870","line":"    std::string functor_name;"},
{"lineNum":" 2871","line":"    if (!space.in_parallel()) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2872","line":"      uint64_t kpID = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2873","line":"      if (Kokkos::Profiling::profileLibraryLoaded()) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2874","line":"        functor_name ="},
{"lineNum":" 2875","line":"            (destroy ? \"Kokkos::View::destruction [\" + name + \"]\"","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2876","line":"                     : \"Kokkos::View::initialization [\" + name + \"]\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2877","line":"        Kokkos::Tools::Impl::begin_parallel_for(policy, *this, functor_name,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2878","line":"                                                kpID);"},
{"lineNum":" 2879","line":"      }"},
{"lineNum":" 2880","line":"#ifdef KOKKOS_ENABLE_CUDA"},
{"lineNum":" 2881","line":"      if (std::is_same<ExecSpace, Kokkos::Cuda>::value) {"},
{"lineNum":" 2882","line":"        Kokkos::Impl::cuda_prefetch_pointer(space, ptr, sizeof(ValueType) * n,"},
{"lineNum":" 2883","line":"                                            true);"},
{"lineNum":" 2884","line":"      }"},
{"lineNum":" 2885","line":"#endif"},
{"lineNum":" 2886","line":"      const Kokkos::Impl::ParallelFor<ViewValueFunctor, PolicyType> closure("},
{"lineNum":" 2887","line":"          *this, policy);"},
{"lineNum":" 2888","line":"      closure.execute();"},
{"lineNum":" 2889","line":"      space.fence();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2890","line":"      if (Kokkos::Profiling::profileLibraryLoaded()) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2891","line":"        Kokkos::Tools::Impl::end_parallel_for(policy, *this, functor_name,"},
{"lineNum":" 2892","line":"                                              kpID);"},
{"lineNum":" 2893","line":"      }"},
{"lineNum":" 2894","line":"    } else {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2895","line":"      for (size_t i = 0; i < n; ++i) operator()(i);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2896","line":"    }"},
{"lineNum":" 2897","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2898","line":""},
{"lineNum":" 2899","line":"  void construct_shared_allocation() { execute(false); }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2900","line":""},
{"lineNum":" 2901","line":"  void destroy_shared_allocation() { execute(true); }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2902","line":"};"},
{"lineNum":" 2903","line":""},
{"lineNum":" 2904","line":"template <class ExecSpace, class ValueType>"},
{"lineNum":" 2905","line":"struct ViewValueFunctor<ExecSpace, ValueType, true /* is_scalar */> {"},
{"lineNum":" 2906","line":"  using PolicyType = Kokkos::RangePolicy<ExecSpace, Kokkos::IndexType<int64_t>>;"},
{"lineNum":" 2907","line":""},
{"lineNum":" 2908","line":"  ExecSpace space;"},
{"lineNum":" 2909","line":"  ValueType* ptr;"},
{"lineNum":" 2910","line":"  size_t n;"},
{"lineNum":" 2911","line":"  std::string name;"},
{"lineNum":" 2912","line":""},
{"lineNum":" 2913","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 2914","line":"  void operator()(const size_t i) const { ptr[i] = ValueType(); }","class":"lineNoCov","hits":"0","possible_hits":"62",},
{"lineNum":" 2915","line":""},
{"lineNum":" 2916","line":"  ViewValueFunctor()                        = default;"},
{"lineNum":" 2917","line":"  ViewValueFunctor(const ViewValueFunctor&) = default;","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":" 2918","line":"  ViewValueFunctor& operator=(const ViewValueFunctor&) = default;","class":"lineNoCov","hits":"0","possible_hits":"22",},
{"lineNum":" 2919","line":""},
{"lineNum":" 2920","line":"  ViewValueFunctor(ExecSpace const& arg_space, ValueType* const arg_ptr,"},
{"lineNum":" 2921","line":"                   size_t const arg_n, std::string arg_name)"},
{"lineNum":" 2922","line":"      : space(arg_space), ptr(arg_ptr), n(arg_n), name(std::move(arg_name)) {}","class":"lineNoCov","hits":"0","possible_hits":"22",},
{"lineNum":" 2923","line":""},
{"lineNum":" 2924","line":"  void construct_shared_allocation() {","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":" 2925","line":"    if (!space.in_parallel()) {","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":" 2926","line":"      uint64_t kpID = 0;","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":" 2927","line":"      if (Kokkos::Profiling::profileLibraryLoaded()) {","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":" 2928","line":"        Kokkos::Profiling::beginParallelFor(","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":" 2929","line":"            \"Kokkos::View::initialization [\" + name + \"]\", 0, &kpID);","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":" 2930","line":"      }"},
{"lineNum":" 2931","line":"#ifdef KOKKOS_ENABLE_CUDA"},
{"lineNum":" 2932","line":"      if (std::is_same<ExecSpace, Kokkos::Cuda>::value) {"},
{"lineNum":" 2933","line":"        Kokkos::Impl::cuda_prefetch_pointer(space, ptr, sizeof(ValueType) * n,"},
{"lineNum":" 2934","line":"                                            true);"},
{"lineNum":" 2935","line":"      }"},
{"lineNum":" 2936","line":"#endif"},
{"lineNum":" 2937","line":"      const Kokkos::Impl::ParallelFor<ViewValueFunctor, PolicyType> closure("},
{"lineNum":" 2938","line":"          *this, PolicyType(0, n));","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":" 2939","line":"      closure.execute();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2940","line":"      space.fence();","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":" 2941","line":"      if (Kokkos::Profiling::profileLibraryLoaded()) {","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":" 2942","line":"        Kokkos::Profiling::endParallelFor(kpID);","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":" 2943","line":"      }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2944","line":"    } else {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2945","line":"      for (size_t i = 0; i < n; ++i) operator()(i);","class":"lineNoCov","hits":"0","possible_hits":"15",},
{"lineNum":" 2946","line":"    }"},
{"lineNum":" 2947","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":" 2948","line":""},
{"lineNum":" 2949","line":"  void destroy_shared_allocation() {}"},
{"lineNum":" 2950","line":"};"},
{"lineNum":" 2951","line":""},
{"lineNum":" 2952","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 2953","line":"/** \\brief  View mapping for non-specialized data type and standard layout */"},
{"lineNum":" 2954","line":"template <class Traits>"},
{"lineNum":" 2955","line":"class ViewMapping<"},
{"lineNum":" 2956","line":"    Traits,"},
{"lineNum":" 2957","line":"    typename std::enable_if<("},
{"lineNum":" 2958","line":"        std::is_same<typename Traits::specialize, void>::value &&"},
{"lineNum":" 2959","line":"        ViewOffset<typename Traits::dimension, typename Traits::array_layout,"},
{"lineNum":" 2960","line":"                   void>::is_mapping_plugin::value)>::type> {"},
{"lineNum":" 2961","line":" public:"},
{"lineNum":" 2962","line":"  using offset_type = ViewOffset<typename Traits::dimension,"},
{"lineNum":" 2963","line":"                                 typename Traits::array_layout, void>;"},
{"lineNum":" 2964","line":""},
{"lineNum":" 2965","line":"  using handle_type = typename ViewDataHandle<Traits>::handle_type;"},
{"lineNum":" 2966","line":""},
{"lineNum":" 2967","line":"  handle_type m_impl_handle;"},
{"lineNum":" 2968","line":"  offset_type m_impl_offset;"},
{"lineNum":" 2969","line":""},
{"lineNum":" 2970","line":" private:"},
{"lineNum":" 2971","line":"  template <class, class...>"},
{"lineNum":" 2972","line":"  friend class ViewMapping;"},
{"lineNum":" 2973","line":""},
{"lineNum":" 2974","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 2975","line":"  ViewMapping(const handle_type& arg_handle, const offset_type& arg_offset)"},
{"lineNum":" 2976","line":"      : m_impl_handle(arg_handle), m_impl_offset(arg_offset) {}"},
{"lineNum":" 2977","line":""},
{"lineNum":" 2978","line":" public:"},
{"lineNum":" 2979","line":"  using printable_label_typedef = void;"},
{"lineNum":" 2980","line":"  enum { is_managed = Traits::is_managed };"},
{"lineNum":" 2981","line":""},
{"lineNum":" 2982","line":"  //----------------------------------------"},
{"lineNum":" 2983","line":"  // Domain dimensions"},
{"lineNum":" 2984","line":""},
{"lineNum":" 2985","line":"  enum { Rank = Traits::dimension::rank };"},
{"lineNum":" 2986","line":""},
{"lineNum":" 2987","line":"  template <typename iType>"},
{"lineNum":" 2988","line":"  KOKKOS_INLINE_FUNCTION constexpr size_t extent(const iType& r) const {"},
{"lineNum":" 2989","line":"    return m_impl_offset.m_dim.extent(r);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 2990","line":"  }"},
{"lineNum":" 2991","line":""},
{"lineNum":" 2992","line":"  static KOKKOS_INLINE_FUNCTION constexpr size_t static_extent("},
{"lineNum":" 2993","line":"      const unsigned r) noexcept {"},
{"lineNum":" 2994","line":"    using dim_type = typename offset_type::dimension_type;"},
{"lineNum":" 2995","line":"    return dim_type::static_extent(r);"},
{"lineNum":" 2996","line":"  }"},
{"lineNum":" 2997","line":""},
{"lineNum":" 2998","line":"  KOKKOS_INLINE_FUNCTION constexpr typename Traits::array_layout layout()"},
{"lineNum":" 2999","line":"      const {"},
{"lineNum":" 3000","line":"    return m_impl_offset.layout();"},
{"lineNum":" 3001","line":"  }"},
{"lineNum":" 3002","line":""},
{"lineNum":" 3003","line":"  KOKKOS_INLINE_FUNCTION constexpr size_t dimension_0() const {"},
{"lineNum":" 3004","line":"    return m_impl_offset.dimension_0();"},
{"lineNum":" 3005","line":"  }"},
{"lineNum":" 3006","line":"  KOKKOS_INLINE_FUNCTION constexpr size_t dimension_1() const {"},
{"lineNum":" 3007","line":"    return m_impl_offset.dimension_1();"},
{"lineNum":" 3008","line":"  }"},
{"lineNum":" 3009","line":"  KOKKOS_INLINE_FUNCTION constexpr size_t dimension_2() const {"},
{"lineNum":" 3010","line":"    return m_impl_offset.dimension_2();"},
{"lineNum":" 3011","line":"  }"},
{"lineNum":" 3012","line":"  KOKKOS_INLINE_FUNCTION constexpr size_t dimension_3() const {"},
{"lineNum":" 3013","line":"    return m_impl_offset.dimension_3();"},
{"lineNum":" 3014","line":"  }"},
{"lineNum":" 3015","line":"  KOKKOS_INLINE_FUNCTION constexpr size_t dimension_4() const {"},
{"lineNum":" 3016","line":"    return m_impl_offset.dimension_4();"},
{"lineNum":" 3017","line":"  }"},
{"lineNum":" 3018","line":"  KOKKOS_INLINE_FUNCTION constexpr size_t dimension_5() const {"},
{"lineNum":" 3019","line":"    return m_impl_offset.dimension_5();"},
{"lineNum":" 3020","line":"  }"},
{"lineNum":" 3021","line":"  KOKKOS_INLINE_FUNCTION constexpr size_t dimension_6() const {"},
{"lineNum":" 3022","line":"    return m_impl_offset.dimension_6();"},
{"lineNum":" 3023","line":"  }"},
{"lineNum":" 3024","line":"  KOKKOS_INLINE_FUNCTION constexpr size_t dimension_7() const {"},
{"lineNum":" 3025","line":"    return m_impl_offset.dimension_7();"},
{"lineNum":" 3026","line":"  }"},
{"lineNum":" 3027","line":""},
{"lineNum":" 3028","line":"  // Is a regular layout with uniform striding for each index."},
{"lineNum":" 3029","line":"  using is_regular = typename offset_type::is_regular;"},
{"lineNum":" 3030","line":""},
{"lineNum":" 3031","line":"  KOKKOS_INLINE_FUNCTION constexpr size_t stride_0() const {"},
{"lineNum":" 3032","line":"    return m_impl_offset.stride_0();"},
{"lineNum":" 3033","line":"  }"},
{"lineNum":" 3034","line":"  KOKKOS_INLINE_FUNCTION constexpr size_t stride_1() const {"},
{"lineNum":" 3035","line":"    return m_impl_offset.stride_1();"},
{"lineNum":" 3036","line":"  }"},
{"lineNum":" 3037","line":"  KOKKOS_INLINE_FUNCTION constexpr size_t stride_2() const {"},
{"lineNum":" 3038","line":"    return m_impl_offset.stride_2();"},
{"lineNum":" 3039","line":"  }"},
{"lineNum":" 3040","line":"  KOKKOS_INLINE_FUNCTION constexpr size_t stride_3() const {"},
{"lineNum":" 3041","line":"    return m_impl_offset.stride_3();"},
{"lineNum":" 3042","line":"  }"},
{"lineNum":" 3043","line":"  KOKKOS_INLINE_FUNCTION constexpr size_t stride_4() const {"},
{"lineNum":" 3044","line":"    return m_impl_offset.stride_4();"},
{"lineNum":" 3045","line":"  }"},
{"lineNum":" 3046","line":"  KOKKOS_INLINE_FUNCTION constexpr size_t stride_5() const {"},
{"lineNum":" 3047","line":"    return m_impl_offset.stride_5();"},
{"lineNum":" 3048","line":"  }"},
{"lineNum":" 3049","line":"  KOKKOS_INLINE_FUNCTION constexpr size_t stride_6() const {"},
{"lineNum":" 3050","line":"    return m_impl_offset.stride_6();"},
{"lineNum":" 3051","line":"  }"},
{"lineNum":" 3052","line":"  KOKKOS_INLINE_FUNCTION constexpr size_t stride_7() const {"},
{"lineNum":" 3053","line":"    return m_impl_offset.stride_7();"},
{"lineNum":" 3054","line":"  }"},
{"lineNum":" 3055","line":""},
{"lineNum":" 3056","line":"  template <typename iType>"},
{"lineNum":" 3057","line":"  KOKKOS_INLINE_FUNCTION void stride(iType* const s) const {"},
{"lineNum":" 3058","line":"    m_impl_offset.stride(s);"},
{"lineNum":" 3059","line":"  }"},
{"lineNum":" 3060","line":""},
{"lineNum":" 3061","line":"  //----------------------------------------"},
{"lineNum":" 3062","line":"  // Range span"},
{"lineNum":" 3063","line":""},
{"lineNum":" 3064","line":"  /** \\brief  Span of the mapped range */"},
{"lineNum":" 3065","line":"  KOKKOS_INLINE_FUNCTION constexpr size_t span() const {"},
{"lineNum":" 3066","line":"    return m_impl_offset.span();"},
{"lineNum":" 3067","line":"  }"},
{"lineNum":" 3068","line":""},
{"lineNum":" 3069","line":"  /** \\brief  Is the mapped range span contiguous */"},
{"lineNum":" 3070","line":"  KOKKOS_INLINE_FUNCTION constexpr bool span_is_contiguous() const {"},
{"lineNum":" 3071","line":"    return m_impl_offset.span_is_contiguous();"},
{"lineNum":" 3072","line":"  }"},
{"lineNum":" 3073","line":""},
{"lineNum":" 3074","line":"  using reference_type = typename ViewDataHandle<Traits>::return_type;"},
{"lineNum":" 3075","line":"  using pointer_type   = typename Traits::value_type*;"},
{"lineNum":" 3076","line":""},
{"lineNum":" 3077","line":"  /** \\brief  Query raw pointer to memory */"},
{"lineNum":" 3078","line":"  KOKKOS_INLINE_FUNCTION constexpr pointer_type data() const {"},
{"lineNum":" 3079","line":"    return m_impl_handle;","class":"lineNoCov","hits":"0","possible_hits":"148",},
{"lineNum":" 3080","line":"  }"},
{"lineNum":" 3081","line":""},
{"lineNum":" 3082","line":"  //----------------------------------------"},
{"lineNum":" 3083","line":"  // The View class performs all rank and bounds checking before"},
{"lineNum":" 3084","line":"  // calling these element reference methods."},
{"lineNum":" 3085","line":""},
{"lineNum":" 3086","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":" 3087","line":"  reference_type reference() const { return m_impl_handle[0]; }"},
{"lineNum":" 3088","line":""},
{"lineNum":" 3089","line":"  template <typename I0>"},
{"lineNum":" 3090","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":" 3091","line":"      typename std::enable_if<(std::is_integral<I0>::value &&"},
{"lineNum":" 3092","line":"                               // if layout is neither stride nor irregular,"},
{"lineNum":" 3093","line":"                               // then just use the handle directly"},
{"lineNum":" 3094","line":"                               !(std::is_same<typename Traits::array_layout,"},
{"lineNum":" 3095","line":"                                              Kokkos::LayoutStride>::value ||"},
{"lineNum":" 3096","line":"                                 !is_regular::value)),"},
{"lineNum":" 3097","line":"                              reference_type>::type"},
{"lineNum":" 3098","line":"      reference(const I0& i0) const {"},
{"lineNum":" 3099","line":"    return m_impl_handle[i0];"},
{"lineNum":" 3100","line":"  }"},
{"lineNum":" 3101","line":""},
{"lineNum":" 3102","line":"  template <typename I0>"},
{"lineNum":" 3103","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":" 3104","line":"      typename std::enable_if<(std::is_integral<I0>::value &&"},
{"lineNum":" 3105","line":"                               // if the layout is strided or irregular, then"},
{"lineNum":" 3106","line":"                               // we have to use the offset"},
{"lineNum":" 3107","line":"                               (std::is_same<typename Traits::array_layout,"},
{"lineNum":" 3108","line":"                                             Kokkos::LayoutStride>::value ||"},
{"lineNum":" 3109","line":"                                !is_regular::value)),"},
{"lineNum":" 3110","line":"                              reference_type>::type"},
{"lineNum":" 3111","line":"      reference(const I0& i0) const {"},
{"lineNum":" 3112","line":"    return m_impl_handle[m_impl_offset(i0)];"},
{"lineNum":" 3113","line":"  }"},
{"lineNum":" 3114","line":""},
{"lineNum":" 3115","line":"  template <typename I0, typename I1>"},
{"lineNum":" 3116","line":"  KOKKOS_FORCEINLINE_FUNCTION reference_type reference(const I0& i0,"},
{"lineNum":" 3117","line":"                                                       const I1& i1) const {"},
{"lineNum":" 3118","line":"    return m_impl_handle[m_impl_offset(i0, i1)];"},
{"lineNum":" 3119","line":"  }"},
{"lineNum":" 3120","line":""},
{"lineNum":" 3121","line":"  template <typename I0, typename I1, typename I2>"},
{"lineNum":" 3122","line":"  KOKKOS_FORCEINLINE_FUNCTION reference_type reference(const I0& i0,"},
{"lineNum":" 3123","line":"                                                       const I1& i1,"},
{"lineNum":" 3124","line":"                                                       const I2& i2) const {"},
{"lineNum":" 3125","line":"    return m_impl_handle[m_impl_offset(i0, i1, i2)];"},
{"lineNum":" 3126","line":"  }"},
{"lineNum":" 3127","line":""},
{"lineNum":" 3128","line":"  template <typename I0, typename I1, typename I2, typename I3>"},
{"lineNum":" 3129","line":"  KOKKOS_FORCEINLINE_FUNCTION reference_type"},
{"lineNum":" 3130","line":"  reference(const I0& i0, const I1& i1, const I2& i2, const I3& i3) const {"},
{"lineNum":" 3131","line":"    return m_impl_handle[m_impl_offset(i0, i1, i2, i3)];"},
{"lineNum":" 3132","line":"  }"},
{"lineNum":" 3133","line":""},
{"lineNum":" 3134","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4>"},
{"lineNum":" 3135","line":"  KOKKOS_FORCEINLINE_FUNCTION reference_type reference(const I0& i0,"},
{"lineNum":" 3136","line":"                                                       const I1& i1,"},
{"lineNum":" 3137","line":"                                                       const I2& i2,"},
{"lineNum":" 3138","line":"                                                       const I3& i3,"},
{"lineNum":" 3139","line":"                                                       const I4& i4) const {"},
{"lineNum":" 3140","line":"    return m_impl_handle[m_impl_offset(i0, i1, i2, i3, i4)];"},
{"lineNum":" 3141","line":"  }"},
{"lineNum":" 3142","line":""},
{"lineNum":" 3143","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4,"},
{"lineNum":" 3144","line":"            typename I5>"},
{"lineNum":" 3145","line":"  KOKKOS_FORCEINLINE_FUNCTION reference_type"},
{"lineNum":" 3146","line":"  reference(const I0& i0, const I1& i1, const I2& i2, const I3& i3,"},
{"lineNum":" 3147","line":"            const I4& i4, const I5& i5) const {"},
{"lineNum":" 3148","line":"    return m_impl_handle[m_impl_offset(i0, i1, i2, i3, i4, i5)];"},
{"lineNum":" 3149","line":"  }"},
{"lineNum":" 3150","line":""},
{"lineNum":" 3151","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4,"},
{"lineNum":" 3152","line":"            typename I5, typename I6>"},
{"lineNum":" 3153","line":"  KOKKOS_FORCEINLINE_FUNCTION reference_type"},
{"lineNum":" 3154","line":"  reference(const I0& i0, const I1& i1, const I2& i2, const I3& i3,"},
{"lineNum":" 3155","line":"            const I4& i4, const I5& i5, const I6& i6) const {"},
{"lineNum":" 3156","line":"    return m_impl_handle[m_impl_offset(i0, i1, i2, i3, i4, i5, i6)];"},
{"lineNum":" 3157","line":"  }"},
{"lineNum":" 3158","line":""},
{"lineNum":" 3159","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4,"},
{"lineNum":" 3160","line":"            typename I5, typename I6, typename I7>"},
{"lineNum":" 3161","line":"  KOKKOS_FORCEINLINE_FUNCTION reference_type"},
{"lineNum":" 3162","line":"  reference(const I0& i0, const I1& i1, const I2& i2, const I3& i3,"},
{"lineNum":" 3163","line":"            const I4& i4, const I5& i5, const I6& i6, const I7& i7) const {"},
{"lineNum":" 3164","line":"    return m_impl_handle[m_impl_offset(i0, i1, i2, i3, i4, i5, i6, i7)];"},
{"lineNum":" 3165","line":"  }"},
{"lineNum":" 3166","line":""},
{"lineNum":" 3167","line":"  //----------------------------------------"},
{"lineNum":" 3168","line":""},
{"lineNum":" 3169","line":" private:"},
{"lineNum":" 3170","line":"  enum { MemorySpanMask = 8 - 1 /* Force alignment on 8 byte boundary */ };"},
{"lineNum":" 3171","line":"  enum { MemorySpanSize = sizeof(typename Traits::value_type) };"},
{"lineNum":" 3172","line":""},
{"lineNum":" 3173","line":" public:"},
{"lineNum":" 3174","line":"  /** \\brief  Span, in bytes, of the referenced memory */"},
{"lineNum":" 3175","line":"  KOKKOS_INLINE_FUNCTION constexpr size_t memory_span() const {"},
{"lineNum":" 3176","line":"    return (m_impl_offset.span() * sizeof(typename Traits::value_type) +"},
{"lineNum":" 3177","line":"            MemorySpanMask) &"},
{"lineNum":" 3178","line":"           ~size_t(MemorySpanMask);"},
{"lineNum":" 3179","line":"  }"},
{"lineNum":" 3180","line":""},
{"lineNum":" 3181","line":"  //----------------------------------------"},
{"lineNum":" 3182","line":""},
{"lineNum":" 3183","line":"  KOKKOS_DEFAULTED_FUNCTION ~ViewMapping() = default;"},
{"lineNum":" 3184","line":"  KOKKOS_INLINE_FUNCTION ViewMapping() : m_impl_handle(), m_impl_offset() {}","class":"lineNoCov","hits":"0","possible_hits":"83",},
{"lineNum":" 3185","line":""},
{"lineNum":" 3186","line":"  KOKKOS_DEFAULTED_FUNCTION ViewMapping(const ViewMapping&) = default;"},
{"lineNum":" 3187","line":"  KOKKOS_DEFAULTED_FUNCTION ViewMapping& operator=(const ViewMapping&) ="},
{"lineNum":" 3188","line":"      default;"},
{"lineNum":" 3189","line":""},
{"lineNum":" 3190","line":"  KOKKOS_DEFAULTED_FUNCTION ViewMapping(ViewMapping&&) = default;"},
{"lineNum":" 3191","line":"  KOKKOS_DEFAULTED_FUNCTION ViewMapping& operator=(ViewMapping&&) = default;"},
{"lineNum":" 3192","line":""},
{"lineNum":" 3193","line":"  //----------------------------------------"},
{"lineNum":" 3194","line":""},
{"lineNum":" 3195","line":"  /**\\brief  Span, in bytes, of the required memory */"},
{"lineNum":" 3196","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 3197","line":"  static constexpr size_t memory_span("},
{"lineNum":" 3198","line":"      typename Traits::array_layout const& arg_layout) {"},
{"lineNum":" 3199","line":"    using padding = std::integral_constant<unsigned int, 0>;"},
{"lineNum":" 3200","line":"    return (offset_type(padding(), arg_layout).span() * MemorySpanSize +"},
{"lineNum":" 3201","line":"            MemorySpanMask) &"},
{"lineNum":" 3202","line":"           ~size_t(MemorySpanMask);"},
{"lineNum":" 3203","line":"  }"},
{"lineNum":" 3204","line":""},
{"lineNum":" 3205","line":"  /**\\brief  Wrap a span of memory */"},
{"lineNum":" 3206","line":"  template <class... P>"},
{"lineNum":" 3207","line":"  KOKKOS_INLINE_FUNCTION ViewMapping("},
{"lineNum":" 3208","line":"      Kokkos::Impl::ViewCtorProp<P...> const& arg_prop,"},
{"lineNum":" 3209","line":"      typename Traits::array_layout const& arg_layout)"},
{"lineNum":" 3210","line":"      : m_impl_handle("},
{"lineNum":" 3211","line":"            ((Kokkos::Impl::ViewCtorProp<void, pointer_type> const&)arg_prop)"},
{"lineNum":" 3212","line":"                .value),"},
{"lineNum":" 3213","line":"        m_impl_offset(std::integral_constant<unsigned, 0>(), arg_layout) {}"},
{"lineNum":" 3214","line":""},
{"lineNum":" 3215","line":"  /**\\brief  Assign data */"},
{"lineNum":" 3216","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 3217","line":"  void assign_data(pointer_type arg_ptr) {"},
{"lineNum":" 3218","line":"    m_impl_handle = handle_type(arg_ptr);"},
{"lineNum":" 3219","line":"  }"},
{"lineNum":" 3220","line":""},
{"lineNum":" 3221","line":"  //----------------------------------------"},
{"lineNum":" 3222","line":"  /*  Allocate and construct mapped array."},
{"lineNum":" 3223","line":"   *  Allocate via shared allocation record and"},
{"lineNum":" 3224","line":"   *  return that record for allocation tracking."},
{"lineNum":" 3225","line":"   */"},
{"lineNum":" 3226","line":"  template <class... P>"},
{"lineNum":" 3227","line":"  Kokkos::Impl::SharedAllocationRecord<>* allocate_shared("},
{"lineNum":" 3228","line":"      Kokkos::Impl::ViewCtorProp<P...> const& arg_prop,"},
{"lineNum":" 3229","line":"      typename Traits::array_layout const& arg_layout) {","class":"lineNoCov","hits":"0","possible_hits":"23",},
{"lineNum":" 3230","line":"    using alloc_prop = Kokkos::Impl::ViewCtorProp<P...>;"},
{"lineNum":" 3231","line":""},
{"lineNum":" 3232","line":"    using execution_space = typename alloc_prop::execution_space;"},
{"lineNum":" 3233","line":"    using memory_space    = typename Traits::memory_space;"},
{"lineNum":" 3234","line":"    using value_type      = typename Traits::value_type;"},
{"lineNum":" 3235","line":"    using functor_type    = ViewValueFunctor<execution_space, value_type>;"},
{"lineNum":" 3236","line":"    using record_type ="},
{"lineNum":" 3237","line":"        Kokkos::Impl::SharedAllocationRecord<memory_space, functor_type>;"},
{"lineNum":" 3238","line":""},
{"lineNum":" 3239","line":"    // Query the mapping for byte-size of allocation."},
{"lineNum":" 3240","line":"    // If padding is allowed then pass in sizeof value type"},
{"lineNum":" 3241","line":"    // for padding computation."},
{"lineNum":" 3242","line":"    using padding = std::integral_constant<"},
{"lineNum":" 3243","line":"        unsigned int, alloc_prop::allow_padding ? sizeof(value_type) : 0>;"},
{"lineNum":" 3244","line":""},
{"lineNum":" 3245","line":"    m_impl_offset = offset_type(padding(), arg_layout);","class":"lineNoCov","hits":"0","possible_hits":"24",},
{"lineNum":" 3246","line":""},
{"lineNum":" 3247","line":"    const size_t alloc_size ="},
{"lineNum":" 3248","line":"        (m_impl_offset.span() * MemorySpanSize + MemorySpanMask) &","class":"lineNoCov","hits":"0","possible_hits":"25",},
{"lineNum":" 3249","line":"        ~size_t(MemorySpanMask);"},
{"lineNum":" 3250","line":"    const std::string& alloc_name ="},
{"lineNum":" 3251","line":"        static_cast<Kokkos::Impl::ViewCtorProp<void, std::string> const&>("},
{"lineNum":" 3252","line":"            arg_prop)"},
{"lineNum":" 3253","line":"            .value;"},
{"lineNum":" 3254","line":"    // Create shared memory tracking record with allocate memory from the memory"},
{"lineNum":" 3255","line":"    // space"},
{"lineNum":" 3256","line":"    record_type* const record = record_type::allocate(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 3257","line":"        static_cast<Kokkos::Impl::ViewCtorProp<void, memory_space> const&>("},
{"lineNum":" 3258","line":"            arg_prop)"},
{"lineNum":" 3259","line":"            .value,","class":"lineNoCov","hits":"0","possible_hits":"23",},
{"lineNum":" 3260","line":"        alloc_name, alloc_size);"},
{"lineNum":" 3261","line":""},
{"lineNum":" 3262","line":"    m_impl_handle = handle_type(reinterpret_cast<pointer_type>(record->data()));","class":"lineNoCov","hits":"0","possible_hits":"24",},
{"lineNum":" 3263","line":""},
{"lineNum":" 3264","line":"    //  Only initialize if the allocation is non-zero."},
{"lineNum":" 3265","line":"    //  May be zero if one of the dimensions is zero."},
{"lineNum":" 3266","line":"    if (alloc_size && alloc_prop::initialize) {","class":"lineNoCov","hits":"0","possible_hits":"23",},
{"lineNum":" 3267","line":"      // Assume destruction is only required when construction is requested."},
{"lineNum":" 3268","line":"      // The ViewValueFunctor has both value construction and destruction"},
{"lineNum":" 3269","line":"      // operators."},
{"lineNum":" 3270","line":"      record->m_destroy = functor_type(","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 3271","line":"          static_cast<Kokkos::Impl::ViewCtorProp<void, execution_space> const&>("},
{"lineNum":" 3272","line":"              arg_prop)"},
{"lineNum":" 3273","line":"              .value,"},
{"lineNum":" 3274","line":"          (value_type*)m_impl_handle, m_impl_offset.span(), alloc_name);","class":"lineNoCov","hits":"0","possible_hits":"23",},
{"lineNum":" 3275","line":""},
{"lineNum":" 3276","line":"      // Construct values"},
{"lineNum":" 3277","line":"      record->m_destroy.construct_shared_allocation();","class":"lineNoCov","hits":"0","possible_hits":"22",},
{"lineNum":" 3278","line":"    }"},
{"lineNum":" 3279","line":""},
{"lineNum":" 3280","line":"    return record;","class":"lineNoCov","hits":"0","possible_hits":"23",},
{"lineNum":" 3281","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 3282","line":"};"},
{"lineNum":" 3283","line":""},
{"lineNum":" 3284","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 3285","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 3286","line":"/** \\brief  Assign compatible default mappings */"},
{"lineNum":" 3287","line":""},
{"lineNum":" 3288","line":"template <class DstTraits, class SrcTraits>"},
{"lineNum":" 3289","line":"class ViewMapping<"},
{"lineNum":" 3290","line":"    DstTraits, SrcTraits,"},
{"lineNum":" 3291","line":"    typename std::enable_if<("},
{"lineNum":" 3292","line":"        !(std::is_same<typename SrcTraits::array_layout, LayoutStride>::"},
{"lineNum":" 3293","line":"              value) &&  // Added to have a new specialization for SrcType of"},
{"lineNum":" 3294","line":"                         // LayoutStride"},
{"lineNum":" 3295","line":"        // default mappings"},
{"lineNum":" 3296","line":"        std::is_same<typename DstTraits::specialize, void>::value &&"},
{"lineNum":" 3297","line":"        std::is_same<typename SrcTraits::specialize, void>::value &&"},
{"lineNum":" 3298","line":"        ("},
{"lineNum":" 3299","line":"            // same layout"},
{"lineNum":" 3300","line":"            std::is_same<typename DstTraits::array_layout,"},
{"lineNum":" 3301","line":"                         typename SrcTraits::array_layout>::value ||"},
{"lineNum":" 3302","line":"            // known layout"},
{"lineNum":" 3303","line":"            ((std::is_same<typename DstTraits::array_layout,"},
{"lineNum":" 3304","line":"                           Kokkos::LayoutLeft>::value ||"},
{"lineNum":" 3305","line":"              std::is_same<typename DstTraits::array_layout,"},
{"lineNum":" 3306","line":"                           Kokkos::LayoutRight>::value ||"},
{"lineNum":" 3307","line":"              std::is_same<typename DstTraits::array_layout,"},
{"lineNum":" 3308","line":"                           Kokkos::LayoutStride>::value) &&"},
{"lineNum":" 3309","line":"             (std::is_same<typename SrcTraits::array_layout,"},
{"lineNum":" 3310","line":"                           Kokkos::LayoutLeft>::value ||"},
{"lineNum":" 3311","line":"              std::is_same<typename SrcTraits::array_layout,"},
{"lineNum":" 3312","line":"                           Kokkos::LayoutRight>::value ||"},
{"lineNum":" 3313","line":"              std::is_same<typename SrcTraits::array_layout,"},
{"lineNum":" 3314","line":"                           Kokkos::LayoutStride>::value))))>::type> {"},
{"lineNum":" 3315","line":" private:"},
{"lineNum":" 3316","line":"  enum {"},
{"lineNum":" 3317","line":"    is_assignable_space ="},
{"lineNum":" 3318","line":"#if 1"},
{"lineNum":" 3319","line":"        Kokkos::Impl::MemorySpaceAccess<"},
{"lineNum":" 3320","line":"            typename DstTraits::memory_space,"},
{"lineNum":" 3321","line":"            typename SrcTraits::memory_space>::assignable"},
{"lineNum":" 3322","line":"  };"},
{"lineNum":" 3323","line":"#else"},
{"lineNum":" 3324","line":"        std::is_same<typename DstTraits::memory_space,"},
{"lineNum":" 3325","line":"                     typename SrcTraits::memory_space>::value"},
{"lineNum":" 3326","line":"  };"},
{"lineNum":" 3327","line":"#endif"},
{"lineNum":" 3328","line":""},
{"lineNum":" 3329","line":"  enum {"},
{"lineNum":" 3330","line":"    is_assignable_value_type ="},
{"lineNum":" 3331","line":"        std::is_same<typename DstTraits::value_type,"},
{"lineNum":" 3332","line":"                     typename SrcTraits::value_type>::value ||"},
{"lineNum":" 3333","line":"        std::is_same<typename DstTraits::value_type,"},
{"lineNum":" 3334","line":"                     typename SrcTraits::const_value_type>::value"},
{"lineNum":" 3335","line":"  };"},
{"lineNum":" 3336","line":""},
{"lineNum":" 3337","line":"  enum {"},
{"lineNum":" 3338","line":"    is_assignable_dimension ="},
{"lineNum":" 3339","line":"        ViewDimensionAssignable<typename DstTraits::dimension,"},
{"lineNum":" 3340","line":"                                typename SrcTraits::dimension>::value"},
{"lineNum":" 3341","line":"  };"},
{"lineNum":" 3342","line":""},
{"lineNum":" 3343","line":"  enum {"},
{"lineNum":" 3344","line":"    is_assignable_layout ="},
{"lineNum":" 3345","line":"        std::is_same<typename DstTraits::array_layout,"},
{"lineNum":" 3346","line":"                     typename SrcTraits::array_layout>::value ||"},
{"lineNum":" 3347","line":"        std::is_same<typename DstTraits::array_layout,"},
{"lineNum":" 3348","line":"                     Kokkos::LayoutStride>::value ||"},
{"lineNum":" 3349","line":"        (DstTraits::dimension::rank == 0) ||"},
{"lineNum":" 3350","line":"        (DstTraits::dimension::rank == 1 &&"},
{"lineNum":" 3351","line":"         DstTraits::dimension::rank_dynamic == 1)"},
{"lineNum":" 3352","line":"  };"},
{"lineNum":" 3353","line":""},
{"lineNum":" 3354","line":" public:"},
{"lineNum":" 3355","line":"  enum {"},
{"lineNum":" 3356","line":"    is_assignable_data_type ="},
{"lineNum":" 3357","line":"        is_assignable_value_type && is_assignable_dimension"},
{"lineNum":" 3358","line":"  };"},
{"lineNum":" 3359","line":"  enum {"},
{"lineNum":" 3360","line":"    is_assignable = is_assignable_space && is_assignable_value_type &&"},
{"lineNum":" 3361","line":"                    is_assignable_dimension && is_assignable_layout"},
{"lineNum":" 3362","line":"  };"},
{"lineNum":" 3363","line":""},
{"lineNum":" 3364","line":"  using TrackType = Kokkos::Impl::SharedAllocationTracker;"},
{"lineNum":" 3365","line":"  using DstType   = ViewMapping<DstTraits, void>;"},
{"lineNum":" 3366","line":"  using SrcType   = ViewMapping<SrcTraits, void>;"},
{"lineNum":" 3367","line":""},
{"lineNum":" 3368","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 3369","line":"  static void assign(DstType& dst, const SrcType& src,"},
{"lineNum":" 3370","line":"                     const TrackType& src_track) {"},
{"lineNum":" 3371","line":"    static_assert(is_assignable_space,"},
{"lineNum":" 3372","line":"                  \"View assignment must have compatible spaces\");"},
{"lineNum":" 3373","line":""},
{"lineNum":" 3374","line":"    static_assert("},
{"lineNum":" 3375","line":"        is_assignable_value_type,"},
{"lineNum":" 3376","line":"        \"View assignment must have same value type or const = non-const\");"},
{"lineNum":" 3377","line":""},
{"lineNum":" 3378","line":"    static_assert(is_assignable_dimension,"},
{"lineNum":" 3379","line":"                  \"View assignment must have compatible dimensions\");"},
{"lineNum":" 3380","line":""},
{"lineNum":" 3381","line":"    static_assert("},
{"lineNum":" 3382","line":"        is_assignable_layout,"},
{"lineNum":" 3383","line":"        \"View assignment must have compatible layout or have rank <= 1\");"},
{"lineNum":" 3384","line":""},
{"lineNum":" 3385","line":"    using dst_offset_type = typename DstType::offset_type;"},
{"lineNum":" 3386","line":""},
{"lineNum":" 3387","line":"    if (size_t(DstTraits::dimension::rank_dynamic) <"},
{"lineNum":" 3388","line":"        size_t(SrcTraits::dimension::rank_dynamic)) {"},
{"lineNum":" 3389","line":"      using dst_dim   = typename DstTraits::dimension;"},
{"lineNum":" 3390","line":"      bool assignable = ((1 > DstTraits::dimension::rank_dynamic &&"},
{"lineNum":" 3391","line":"                          1 <= SrcTraits::dimension::rank_dynamic)"},
{"lineNum":" 3392","line":"                             ? dst_dim::ArgN0 == src.dimension_0()"},
{"lineNum":" 3393","line":"                             : true) &&"},
{"lineNum":" 3394","line":"                        ((2 > DstTraits::dimension::rank_dynamic &&"},
{"lineNum":" 3395","line":"                          2 <= SrcTraits::dimension::rank_dynamic)"},
{"lineNum":" 3396","line":"                             ? dst_dim::ArgN1 == src.dimension_1()"},
{"lineNum":" 3397","line":"                             : true) &&"},
{"lineNum":" 3398","line":"                        ((3 > DstTraits::dimension::rank_dynamic &&"},
{"lineNum":" 3399","line":"                          3 <= SrcTraits::dimension::rank_dynamic)"},
{"lineNum":" 3400","line":"                             ? dst_dim::ArgN2 == src.dimension_2()"},
{"lineNum":" 3401","line":"                             : true) &&"},
{"lineNum":" 3402","line":"                        ((4 > DstTraits::dimension::rank_dynamic &&"},
{"lineNum":" 3403","line":"                          4 <= SrcTraits::dimension::rank_dynamic)"},
{"lineNum":" 3404","line":"                             ? dst_dim::ArgN3 == src.dimension_3()"},
{"lineNum":" 3405","line":"                             : true) &&"},
{"lineNum":" 3406","line":"                        ((5 > DstTraits::dimension::rank_dynamic &&"},
{"lineNum":" 3407","line":"                          5 <= SrcTraits::dimension::rank_dynamic)"},
{"lineNum":" 3408","line":"                             ? dst_dim::ArgN4 == src.dimension_4()"},
{"lineNum":" 3409","line":"                             : true) &&"},
{"lineNum":" 3410","line":"                        ((6 > DstTraits::dimension::rank_dynamic &&"},
{"lineNum":" 3411","line":"                          6 <= SrcTraits::dimension::rank_dynamic)"},
{"lineNum":" 3412","line":"                             ? dst_dim::ArgN5 == src.dimension_5()"},
{"lineNum":" 3413","line":"                             : true) &&"},
{"lineNum":" 3414","line":"                        ((7 > DstTraits::dimension::rank_dynamic &&"},
{"lineNum":" 3415","line":"                          7 <= SrcTraits::dimension::rank_dynamic)"},
{"lineNum":" 3416","line":"                             ? dst_dim::ArgN6 == src.dimension_6()"},
{"lineNum":" 3417","line":"                             : true) &&"},
{"lineNum":" 3418","line":"                        ((8 > DstTraits::dimension::rank_dynamic &&"},
{"lineNum":" 3419","line":"                          8 <= SrcTraits::dimension::rank_dynamic)"},
{"lineNum":" 3420","line":"                             ? dst_dim::ArgN7 == src.dimension_7()"},
{"lineNum":" 3421","line":"                             : true);"},
{"lineNum":" 3422","line":"      if (!assignable)"},
{"lineNum":" 3423","line":"        Kokkos::abort("},
{"lineNum":" 3424","line":"            \"View Assignment: trying to assign runtime dimension to non \""},
{"lineNum":" 3425","line":"            \"matching compile time dimension.\");"},
{"lineNum":" 3426","line":"    }"},
{"lineNum":" 3427","line":"    dst.m_impl_offset = dst_offset_type(src.m_impl_offset);","class":"lineNoCov","hits":"0","possible_hits":"191",},
{"lineNum":" 3428","line":"    dst.m_impl_handle = Kokkos::Impl::ViewDataHandle<DstTraits>::assign(","class":"lineNoCov","hits":"0","possible_hits":"186",},
{"lineNum":" 3429","line":"        src.m_impl_handle, src_track);","class":"lineNoCov","hits":"0","possible_hits":"214",},
{"lineNum":" 3430","line":"  }"},
{"lineNum":" 3431","line":"};"},
{"lineNum":" 3432","line":""},
{"lineNum":" 3433","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 3434","line":"// Create new specialization for SrcType of LayoutStride. Runtime check for"},
{"lineNum":" 3435","line":"// compatible layout"},
{"lineNum":" 3436","line":"template <class DstTraits, class SrcTraits>"},
{"lineNum":" 3437","line":"class ViewMapping<"},
{"lineNum":" 3438","line":"    DstTraits, SrcTraits,"},
{"lineNum":" 3439","line":"    typename std::enable_if<("},
{"lineNum":" 3440","line":"        std::is_same<typename SrcTraits::array_layout,"},
{"lineNum":" 3441","line":"                     Kokkos::LayoutStride>::value &&"},
{"lineNum":" 3442","line":"        std::is_same<typename DstTraits::specialize, void>::value &&"},
{"lineNum":" 3443","line":"        std::is_same<typename SrcTraits::specialize, void>::value &&"},
{"lineNum":" 3444","line":"        ("},
{"lineNum":" 3445","line":"            // same layout"},
{"lineNum":" 3446","line":"            std::is_same<typename DstTraits::array_layout,"},
{"lineNum":" 3447","line":"                         typename SrcTraits::array_layout>::value ||"},
{"lineNum":" 3448","line":"            // known layout"},
{"lineNum":" 3449","line":"            (std::is_same<typename DstTraits::array_layout,"},
{"lineNum":" 3450","line":"                          Kokkos::LayoutLeft>::value ||"},
{"lineNum":" 3451","line":"             std::is_same<typename DstTraits::array_layout,"},
{"lineNum":" 3452","line":"                          Kokkos::LayoutRight>::value ||"},
{"lineNum":" 3453","line":"             std::is_same<typename DstTraits::array_layout,"},
{"lineNum":" 3454","line":"                          Kokkos::LayoutStride>::value)))>::type> {"},
{"lineNum":" 3455","line":" private:"},
{"lineNum":" 3456","line":"  enum {"},
{"lineNum":" 3457","line":"    is_assignable_space = Kokkos::Impl::MemorySpaceAccess<"},
{"lineNum":" 3458","line":"        typename DstTraits::memory_space,"},
{"lineNum":" 3459","line":"        typename SrcTraits::memory_space>::assignable"},
{"lineNum":" 3460","line":"  };"},
{"lineNum":" 3461","line":""},
{"lineNum":" 3462","line":"  enum {"},
{"lineNum":" 3463","line":"    is_assignable_value_type ="},
{"lineNum":" 3464","line":"        std::is_same<typename DstTraits::value_type,"},
{"lineNum":" 3465","line":"                     typename SrcTraits::value_type>::value ||"},
{"lineNum":" 3466","line":"        std::is_same<typename DstTraits::value_type,"},
{"lineNum":" 3467","line":"                     typename SrcTraits::const_value_type>::value"},
{"lineNum":" 3468","line":"  };"},
{"lineNum":" 3469","line":""},
{"lineNum":" 3470","line":"  enum {"},
{"lineNum":" 3471","line":"    is_assignable_dimension ="},
{"lineNum":" 3472","line":"        ViewDimensionAssignable<typename DstTraits::dimension,"},
{"lineNum":" 3473","line":"                                typename SrcTraits::dimension>::value"},
{"lineNum":" 3474","line":"  };"},
{"lineNum":" 3475","line":""},
{"lineNum":" 3476","line":" public:"},
{"lineNum":" 3477","line":"  enum {"},
{"lineNum":" 3478","line":"    is_assignable_data_type ="},
{"lineNum":" 3479","line":"        is_assignable_value_type && is_assignable_dimension"},
{"lineNum":" 3480","line":"  };"},
{"lineNum":" 3481","line":"  enum {"},
{"lineNum":" 3482","line":"    is_assignable = is_assignable_space && is_assignable_value_type &&"},
{"lineNum":" 3483","line":"                    is_assignable_dimension"},
{"lineNum":" 3484","line":"  };"},
{"lineNum":" 3485","line":""},
{"lineNum":" 3486","line":"  using TrackType = Kokkos::Impl::SharedAllocationTracker;"},
{"lineNum":" 3487","line":"  using DstType   = ViewMapping<DstTraits, void>;"},
{"lineNum":" 3488","line":"  using SrcType   = ViewMapping<SrcTraits, void>;"},
{"lineNum":" 3489","line":""},
{"lineNum":" 3490","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 3491","line":"  static bool assignable_layout_check(DstType&,"},
{"lineNum":" 3492","line":"                                      const SrcType& src)  // Runtime check"},
{"lineNum":" 3493","line":"  {"},
{"lineNum":" 3494","line":"    size_t strides[9];"},
{"lineNum":" 3495","line":"    bool assignable = true;"},
{"lineNum":" 3496","line":"    src.stride(strides);"},
{"lineNum":" 3497","line":"    size_t exp_stride = 1;"},
{"lineNum":" 3498","line":"    if (std::is_same<typename DstTraits::array_layout,"},
{"lineNum":" 3499","line":"                     Kokkos::LayoutLeft>::value) {"},
{"lineNum":" 3500","line":"      for (int i = 0; i < src.Rank; i++) {"},
{"lineNum":" 3501","line":"        if (i > 0) exp_stride *= src.extent(i - 1);"},
{"lineNum":" 3502","line":"        if (strides[i] != exp_stride) {"},
{"lineNum":" 3503","line":"          assignable = false;"},
{"lineNum":" 3504","line":"          break;"},
{"lineNum":" 3505","line":"        }"},
{"lineNum":" 3506","line":"      }"},
{"lineNum":" 3507","line":"    } else if (std::is_same<typename DstTraits::array_layout,"},
{"lineNum":" 3508","line":"                            Kokkos::LayoutRight>::value) {"},
{"lineNum":" 3509","line":"      for (int i = src.Rank - 1; i >= 0; i--) {"},
{"lineNum":" 3510","line":"        if (i < src.Rank - 1) exp_stride *= src.extent(i + 1);"},
{"lineNum":" 3511","line":"        if (strides[i] != exp_stride) {"},
{"lineNum":" 3512","line":"          assignable = false;"},
{"lineNum":" 3513","line":"          break;"},
{"lineNum":" 3514","line":"        }"},
{"lineNum":" 3515","line":"      }"},
{"lineNum":" 3516","line":"    }"},
{"lineNum":" 3517","line":"    return assignable;"},
{"lineNum":" 3518","line":"  }"},
{"lineNum":" 3519","line":""},
{"lineNum":" 3520","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 3521","line":"  static void assign(DstType& dst, const SrcType& src,"},
{"lineNum":" 3522","line":"                     const TrackType& src_track) {"},
{"lineNum":" 3523","line":"    static_assert(is_assignable_space,"},
{"lineNum":" 3524","line":"                  \"View assignment must have compatible spaces\");"},
{"lineNum":" 3525","line":""},
{"lineNum":" 3526","line":"    static_assert("},
{"lineNum":" 3527","line":"        is_assignable_value_type,"},
{"lineNum":" 3528","line":"        \"View assignment must have same value type or const = non-const\");"},
{"lineNum":" 3529","line":""},
{"lineNum":" 3530","line":"    static_assert(is_assignable_dimension,"},
{"lineNum":" 3531","line":"                  \"View assignment must have compatible dimensions\");"},
{"lineNum":" 3532","line":""},
{"lineNum":" 3533","line":"    bool assignable_layout = assignable_layout_check(dst, src);  // Runtime"},
{"lineNum":" 3534","line":"                                                                 // check"},
{"lineNum":" 3535","line":"    if (!assignable_layout)"},
{"lineNum":" 3536","line":"      Kokkos::abort(\"View assignment must have compatible layouts\\n\");"},
{"lineNum":" 3537","line":""},
{"lineNum":" 3538","line":"    using dst_offset_type = typename DstType::offset_type;"},
{"lineNum":" 3539","line":""},
{"lineNum":" 3540","line":"    if (size_t(DstTraits::dimension::rank_dynamic) <"},
{"lineNum":" 3541","line":"        size_t(SrcTraits::dimension::rank_dynamic)) {"},
{"lineNum":" 3542","line":"      using dst_dim   = typename DstTraits::dimension;"},
{"lineNum":" 3543","line":"      bool assignable = ((1 > DstTraits::dimension::rank_dynamic &&"},
{"lineNum":" 3544","line":"                          1 <= SrcTraits::dimension::rank_dynamic)"},
{"lineNum":" 3545","line":"                             ? dst_dim::ArgN0 == src.dimension_0()"},
{"lineNum":" 3546","line":"                             : true) &&"},
{"lineNum":" 3547","line":"                        ((2 > DstTraits::dimension::rank_dynamic &&"},
{"lineNum":" 3548","line":"                          2 <= SrcTraits::dimension::rank_dynamic)"},
{"lineNum":" 3549","line":"                             ? dst_dim::ArgN1 == src.dimension_1()"},
{"lineNum":" 3550","line":"                             : true) &&"},
{"lineNum":" 3551","line":"                        ((3 > DstTraits::dimension::rank_dynamic &&"},
{"lineNum":" 3552","line":"                          3 <= SrcTraits::dimension::rank_dynamic)"},
{"lineNum":" 3553","line":"                             ? dst_dim::ArgN2 == src.dimension_2()"},
{"lineNum":" 3554","line":"                             : true) &&"},
{"lineNum":" 3555","line":"                        ((4 > DstTraits::dimension::rank_dynamic &&"},
{"lineNum":" 3556","line":"                          4 <= SrcTraits::dimension::rank_dynamic)"},
{"lineNum":" 3557","line":"                             ? dst_dim::ArgN3 == src.dimension_3()"},
{"lineNum":" 3558","line":"                             : true) &&"},
{"lineNum":" 3559","line":"                        ((5 > DstTraits::dimension::rank_dynamic &&"},
{"lineNum":" 3560","line":"                          5 <= SrcTraits::dimension::rank_dynamic)"},
{"lineNum":" 3561","line":"                             ? dst_dim::ArgN4 == src.dimension_4()"},
{"lineNum":" 3562","line":"                             : true) &&"},
{"lineNum":" 3563","line":"                        ((6 > DstTraits::dimension::rank_dynamic &&"},
{"lineNum":" 3564","line":"                          6 <= SrcTraits::dimension::rank_dynamic)"},
{"lineNum":" 3565","line":"                             ? dst_dim::ArgN5 == src.dimension_5()"},
{"lineNum":" 3566","line":"                             : true) &&"},
{"lineNum":" 3567","line":"                        ((7 > DstTraits::dimension::rank_dynamic &&"},
{"lineNum":" 3568","line":"                          7 <= SrcTraits::dimension::rank_dynamic)"},
{"lineNum":" 3569","line":"                             ? dst_dim::ArgN6 == src.dimension_6()"},
{"lineNum":" 3570","line":"                             : true) &&"},
{"lineNum":" 3571","line":"                        ((8 > DstTraits::dimension::rank_dynamic &&"},
{"lineNum":" 3572","line":"                          8 <= SrcTraits::dimension::rank_dynamic)"},
{"lineNum":" 3573","line":"                             ? dst_dim::ArgN7 == src.dimension_7()"},
{"lineNum":" 3574","line":"                             : true);"},
{"lineNum":" 3575","line":"      if (!assignable)"},
{"lineNum":" 3576","line":"        Kokkos::abort("},
{"lineNum":" 3577","line":"            \"View Assignment: trying to assign runtime dimension to non \""},
{"lineNum":" 3578","line":"            \"matching compile time dimension.\");"},
{"lineNum":" 3579","line":"    }"},
{"lineNum":" 3580","line":"    dst.m_impl_offset = dst_offset_type(src.m_impl_offset);"},
{"lineNum":" 3581","line":"    dst.m_impl_handle = Kokkos::Impl::ViewDataHandle<DstTraits>::assign("},
{"lineNum":" 3582","line":"        src.m_impl_handle, src_track);"},
{"lineNum":" 3583","line":"  }"},
{"lineNum":" 3584","line":"};"},
{"lineNum":" 3585","line":""},
{"lineNum":" 3586","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 3587","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 3588","line":"// Subview mapping."},
{"lineNum":" 3589","line":"// Deduce destination view type from source view traits and subview arguments"},
{"lineNum":" 3590","line":""},
{"lineNum":" 3591","line":"template <class, class ValueType, class Exts, class... Args>"},
{"lineNum":" 3592","line":"struct SubViewDataTypeImpl;"},
{"lineNum":" 3593","line":""},
{"lineNum":" 3594","line":"/* base case */"},
{"lineNum":" 3595","line":"template <class ValueType>"},
{"lineNum":" 3596","line":"struct SubViewDataTypeImpl<void, ValueType, Kokkos::Experimental::Extents<>> {"},
{"lineNum":" 3597","line":"  using type = ValueType;"},
{"lineNum":" 3598","line":"};"},
{"lineNum":" 3599","line":""},
{"lineNum":" 3600","line":"/* for integral args, subview doesn\'t have that dimension */"},
{"lineNum":" 3601","line":"template <class ValueType, ptrdiff_t Ext, ptrdiff_t... Exts, class Integral,"},
{"lineNum":" 3602","line":"          class... Args>"},
{"lineNum":" 3603","line":"struct SubViewDataTypeImpl<"},
{"lineNum":" 3604","line":"    typename std::enable_if<"},
{"lineNum":" 3605","line":"        std::is_integral<typename std::decay<Integral>::type>::value>::type,"},
{"lineNum":" 3606","line":"    ValueType, Kokkos::Experimental::Extents<Ext, Exts...>, Integral, Args...>"},
{"lineNum":" 3607","line":"    : SubViewDataTypeImpl<void, ValueType,"},
{"lineNum":" 3608","line":"                          Kokkos::Experimental::Extents<Exts...>, Args...> {};"},
{"lineNum":" 3609","line":""},
{"lineNum":" 3610","line":"/* for ALL slice, subview has the same dimension */"},
{"lineNum":" 3611","line":"template <class ValueType, ptrdiff_t Ext, ptrdiff_t... Exts, class... Args>"},
{"lineNum":" 3612","line":"struct SubViewDataTypeImpl<void, ValueType,"},
{"lineNum":" 3613","line":"                           Kokkos::Experimental::Extents<Ext, Exts...>, ALL_t,"},
{"lineNum":" 3614","line":"                           Args...>"},
{"lineNum":" 3615","line":"    : SubViewDataTypeImpl<void, typename ApplyExtent<ValueType, Ext>::type,"},
{"lineNum":" 3616","line":"                          Kokkos::Experimental::Extents<Exts...>, Args...> {};"},
{"lineNum":" 3617","line":""},
{"lineNum":" 3618","line":"/* for pair-style slice, subview has dynamic dimension, since pair doesn\'t give"},
{"lineNum":" 3619","line":" * static sizes */"},
{"lineNum":" 3620","line":"/* Since we don\'t allow interleaving of dynamic and static extents, make all of"},
{"lineNum":" 3621","line":" * the dimensions to the left dynamic  */"},
{"lineNum":" 3622","line":"template <class ValueType, ptrdiff_t Ext, ptrdiff_t... Exts, class PairLike,"},
{"lineNum":" 3623","line":"          class... Args>"},
{"lineNum":" 3624","line":"struct SubViewDataTypeImpl<"},
{"lineNum":" 3625","line":"    typename std::enable_if<is_pair_like<PairLike>::value>::type, ValueType,"},
{"lineNum":" 3626","line":"    Kokkos::Experimental::Extents<Ext, Exts...>, PairLike, Args...>"},
{"lineNum":" 3627","line":"    : SubViewDataTypeImpl<"},
{"lineNum":" 3628","line":"          void, typename make_all_extents_into_pointers<ValueType>::type*,"},
{"lineNum":" 3629","line":"          Kokkos::Experimental::Extents<Exts...>, Args...> {};"},
{"lineNum":" 3630","line":""},
{"lineNum":" 3631","line":"template <class ValueType, class Exts, class... Args>"},
{"lineNum":" 3632","line":"struct SubViewDataType : SubViewDataTypeImpl<void, ValueType, Exts, Args...> {};"},
{"lineNum":" 3633","line":""},
{"lineNum":" 3634","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 3635","line":""},
{"lineNum":" 3636","line":"template <class SrcTraits, class... Args>"},
{"lineNum":" 3637","line":"class ViewMapping<"},
{"lineNum":" 3638","line":"    typename std::enable_if<("},
{"lineNum":" 3639","line":"        std::is_same<typename SrcTraits::specialize, void>::value &&"},
{"lineNum":" 3640","line":"        (std::is_same<typename SrcTraits::array_layout,"},
{"lineNum":" 3641","line":"                      Kokkos::LayoutLeft>::value ||"},
{"lineNum":" 3642","line":"         std::is_same<typename SrcTraits::array_layout,"},
{"lineNum":" 3643","line":"                      Kokkos::LayoutRight>::value ||"},
{"lineNum":" 3644","line":"         std::is_same<typename SrcTraits::array_layout,"},
{"lineNum":" 3645","line":"                      Kokkos::LayoutStride>::value))>::type,"},
{"lineNum":" 3646","line":"    SrcTraits, Args...> {"},
{"lineNum":" 3647","line":" private:"},
{"lineNum":" 3648","line":"  static_assert(SrcTraits::rank == sizeof...(Args),"},
{"lineNum":" 3649","line":"                \"Subview mapping requires one argument for each dimension of \""},
{"lineNum":" 3650","line":"                \"source View\");"},
{"lineNum":" 3651","line":""},
{"lineNum":" 3652","line":"  enum {"},
{"lineNum":" 3653","line":"    RZ = false,"},
{"lineNum":" 3654","line":"    R0 = bool(is_integral_extent<0, Args...>::value),"},
{"lineNum":" 3655","line":"    R1 = bool(is_integral_extent<1, Args...>::value),"},
{"lineNum":" 3656","line":"    R2 = bool(is_integral_extent<2, Args...>::value),"},
{"lineNum":" 3657","line":"    R3 = bool(is_integral_extent<3, Args...>::value),"},
{"lineNum":" 3658","line":"    R4 = bool(is_integral_extent<4, Args...>::value),"},
{"lineNum":" 3659","line":"    R5 = bool(is_integral_extent<5, Args...>::value),"},
{"lineNum":" 3660","line":"    R6 = bool(is_integral_extent<6, Args...>::value),"},
{"lineNum":" 3661","line":"    R7 = bool(is_integral_extent<7, Args...>::value)"},
{"lineNum":" 3662","line":"  };"},
{"lineNum":" 3663","line":""},
{"lineNum":" 3664","line":"  enum {"},
{"lineNum":" 3665","line":"    rank = unsigned(R0) + unsigned(R1) + unsigned(R2) + unsigned(R3) +"},
{"lineNum":" 3666","line":"           unsigned(R4) + unsigned(R5) + unsigned(R6) + unsigned(R7)"},
{"lineNum":" 3667","line":"  };"},
{"lineNum":" 3668","line":""},
{"lineNum":" 3669","line":"  // Whether right-most rank is a range."},
{"lineNum":" 3670","line":"  enum {"},
{"lineNum":" 3671","line":"    R0_rev ="},
{"lineNum":" 3672","line":"        (0 == SrcTraits::rank"},
{"lineNum":" 3673","line":"             ? RZ"},
{"lineNum":" 3674","line":"             : (1 == SrcTraits::rank"},
{"lineNum":" 3675","line":"                    ? R0"},
{"lineNum":" 3676","line":"                    : (2 == SrcTraits::rank"},
{"lineNum":" 3677","line":"                           ? R1"},
{"lineNum":" 3678","line":"                           : (3 == SrcTraits::rank"},
{"lineNum":" 3679","line":"                                  ? R2"},
{"lineNum":" 3680","line":"                                  : (4 == SrcTraits::rank"},
{"lineNum":" 3681","line":"                                         ? R3"},
{"lineNum":" 3682","line":"                                         : (5 == SrcTraits::rank"},
{"lineNum":" 3683","line":"                                                ? R4"},
{"lineNum":" 3684","line":"                                                : (6 == SrcTraits::rank"},
{"lineNum":" 3685","line":"                                                       ? R5"},
{"lineNum":" 3686","line":"                                                       : (7 == SrcTraits::rank"},
{"lineNum":" 3687","line":"                                                              ? R6"},
{"lineNum":" 3688","line":"                                                              : R7))))))))"},
{"lineNum":" 3689","line":"  };"},
{"lineNum":" 3690","line":""},
{"lineNum":" 3691","line":"  // Subview\'s layout"},
{"lineNum":" 3692","line":"  using array_layout = typename std::conditional<"},
{"lineNum":" 3693","line":"      (            /* Same array layout IF */"},
{"lineNum":" 3694","line":"       (rank == 0) /* output rank zero */"},
{"lineNum":" 3695","line":"       || SubviewLegalArgsCompileTime<typename SrcTraits::array_layout,"},
{"lineNum":" 3696","line":"                                      typename SrcTraits::array_layout, rank,"},
{"lineNum":" 3697","line":"                                      SrcTraits::rank, 0, Args...>::value ||"},
{"lineNum":" 3698","line":"       // OutputRank 1 or 2, InputLayout Left, Interval 0"},
{"lineNum":" 3699","line":"       // because single stride one or second index has a stride."},
{"lineNum":" 3700","line":"       (rank <= 2 && R0 &&"},
{"lineNum":" 3701","line":"        std::is_same<typename SrcTraits::array_layout,"},
{"lineNum":" 3702","line":"                     Kokkos::LayoutLeft>::value)  // replace with input rank"},
{"lineNum":" 3703","line":"       ||"},
{"lineNum":" 3704","line":"       // OutputRank 1 or 2, InputLayout Right, Interval [InputRank-1]"},
{"lineNum":" 3705","line":"       // because single stride one or second index has a stride."},
{"lineNum":" 3706","line":"       (rank <= 2 && R0_rev &&"},
{"lineNum":" 3707","line":"        std::is_same<typename SrcTraits::array_layout,"},
{"lineNum":" 3708","line":"                     Kokkos::LayoutRight>::value)  // replace input rank"},
{"lineNum":" 3709","line":"       ),"},
{"lineNum":" 3710","line":"      typename SrcTraits::array_layout, Kokkos::LayoutStride>::type;"},
{"lineNum":" 3711","line":""},
{"lineNum":" 3712","line":"  using value_type = typename SrcTraits::value_type;"},
{"lineNum":" 3713","line":""},
{"lineNum":" 3714","line":"  using data_type ="},
{"lineNum":" 3715","line":"      typename SubViewDataType<value_type,"},
{"lineNum":" 3716","line":"                               typename Kokkos::Impl::ParseViewExtents<"},
{"lineNum":" 3717","line":"                                   typename SrcTraits::data_type>::type,"},
{"lineNum":" 3718","line":"                               Args...>::type;"},
{"lineNum":" 3719","line":""},
{"lineNum":" 3720","line":" public:"},
{"lineNum":" 3721","line":"  using traits_type = Kokkos::ViewTraits<data_type, array_layout,"},
{"lineNum":" 3722","line":"                                         typename SrcTraits::device_type,"},
{"lineNum":" 3723","line":"                                         typename SrcTraits::memory_traits>;"},
{"lineNum":" 3724","line":""},
{"lineNum":" 3725","line":"  using type ="},
{"lineNum":" 3726","line":"      Kokkos::View<data_type, array_layout, typename SrcTraits::device_type,"},
{"lineNum":" 3727","line":"                   typename SrcTraits::memory_traits>;"},
{"lineNum":" 3728","line":""},
{"lineNum":" 3729","line":"  template <class MemoryTraits>"},
{"lineNum":" 3730","line":"  struct apply {"},
{"lineNum":" 3731","line":"    static_assert(Kokkos::Impl::is_memory_traits<MemoryTraits>::value, \"\");"},
{"lineNum":" 3732","line":""},
{"lineNum":" 3733","line":"    using traits_type ="},
{"lineNum":" 3734","line":"        Kokkos::ViewTraits<data_type, array_layout,"},
{"lineNum":" 3735","line":"                           typename SrcTraits::device_type, MemoryTraits>;"},
{"lineNum":" 3736","line":""},
{"lineNum":" 3737","line":"    using type = Kokkos::View<data_type, array_layout,"},
{"lineNum":" 3738","line":"                              typename SrcTraits::device_type, MemoryTraits>;"},
{"lineNum":" 3739","line":"  };"},
{"lineNum":" 3740","line":""},
{"lineNum":" 3741","line":"  // The presumed type is \'ViewMapping< traits_type , void >\'"},
{"lineNum":" 3742","line":"  // However, a compatible ViewMapping is acceptable."},
{"lineNum":" 3743","line":"  template <class DstTraits>"},
{"lineNum":" 3744","line":"  KOKKOS_INLINE_FUNCTION static void assign("},
{"lineNum":" 3745","line":"      ViewMapping<DstTraits, void>& dst,"},
{"lineNum":" 3746","line":"      ViewMapping<SrcTraits, void> const& src, Args... args) {"},
{"lineNum":" 3747","line":"    static_assert(ViewMapping<DstTraits, traits_type, void>::is_assignable,"},
{"lineNum":" 3748","line":"                  \"Subview destination type must be compatible with subview \""},
{"lineNum":" 3749","line":"                  \"derived type\");"},
{"lineNum":" 3750","line":""},
{"lineNum":" 3751","line":"    using DstType = ViewMapping<DstTraits, void>;"},
{"lineNum":" 3752","line":""},
{"lineNum":" 3753","line":"    using dst_offset_type = typename DstType::offset_type;"},
{"lineNum":" 3754","line":""},
{"lineNum":" 3755","line":"    const SubviewExtents<SrcTraits::rank, rank> extents(src.m_impl_offset.m_dim,"},
{"lineNum":" 3756","line":"                                                        args...);"},
{"lineNum":" 3757","line":""},
{"lineNum":" 3758","line":"    dst.m_impl_offset = dst_offset_type(src.m_impl_offset, extents);","class":"lineNoCov","hits":"0","possible_hits":"19",},
{"lineNum":" 3759","line":""},
{"lineNum":" 3760","line":"    dst.m_impl_handle = ViewDataHandle<DstTraits>::assign(","class":"lineNoCov","hits":"0","possible_hits":"19",},
{"lineNum":" 3761","line":"        src.m_impl_handle,","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":" 3762","line":"        src.m_impl_offset(extents.domain_offset(0), extents.domain_offset(1),"},
{"lineNum":" 3763","line":"                          extents.domain_offset(2), extents.domain_offset(3),"},
{"lineNum":" 3764","line":"                          extents.domain_offset(4), extents.domain_offset(5),"},
{"lineNum":" 3765","line":"                          extents.domain_offset(6), extents.domain_offset(7)));"},
{"lineNum":" 3766","line":"  }"},
{"lineNum":" 3767","line":"};"},
{"lineNum":" 3768","line":""},
{"lineNum":" 3769","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 3770","line":""},
{"lineNum":" 3771","line":"}  // namespace Impl"},
{"lineNum":" 3772","line":"}  // namespace Kokkos"},
{"lineNum":" 3773","line":""},
{"lineNum":" 3774","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 3775","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 3776","line":""},
{"lineNum":" 3777","line":"namespace Kokkos {"},
{"lineNum":" 3778","line":"namespace Impl {"},
{"lineNum":" 3779","line":""},
{"lineNum":" 3780","line":"template <unsigned, class MapType>"},
{"lineNum":" 3781","line":"KOKKOS_INLINE_FUNCTION bool view_verify_operator_bounds(const MapType&) {"},
{"lineNum":" 3782","line":"  return true;"},
{"lineNum":" 3783","line":"}"},
{"lineNum":" 3784","line":""},
{"lineNum":" 3785","line":"template <unsigned R, class MapType, class iType, class... Args>"},
{"lineNum":" 3786","line":"KOKKOS_INLINE_FUNCTION bool view_verify_operator_bounds(const MapType& map,"},
{"lineNum":" 3787","line":"                                                        const iType& i,"},
{"lineNum":" 3788","line":"                                                        Args... args) {"},
{"lineNum":" 3789","line":"  return (size_t(i) < map.extent(R)) &&"},
{"lineNum":" 3790","line":"         view_verify_operator_bounds<R + 1>(map, args...);"},
{"lineNum":" 3791","line":"}"},
{"lineNum":" 3792","line":""},
{"lineNum":" 3793","line":"template <unsigned, class MapType>"},
{"lineNum":" 3794","line":"inline void view_error_operator_bounds(char*, int, const MapType&) {}"},
{"lineNum":" 3795","line":""},
{"lineNum":" 3796","line":"template <unsigned R, class MapType, class iType, class... Args>"},
{"lineNum":" 3797","line":"inline void view_error_operator_bounds(char* buf, int len, const MapType& map,"},
{"lineNum":" 3798","line":"                                       const iType& i, Args... args) {"},
{"lineNum":" 3799","line":"  const int n = snprintf("},
{"lineNum":" 3800","line":"      buf, len, \" %ld < %ld %c\", static_cast<unsigned long>(i),"},
{"lineNum":" 3801","line":"      static_cast<unsigned long>(map.extent(R)), (sizeof...(Args) ? \',\' : \')\'));"},
{"lineNum":" 3802","line":"  view_error_operator_bounds<R + 1>(buf + n, len - n, map, args...);"},
{"lineNum":" 3803","line":"}"},
{"lineNum":" 3804","line":""},
{"lineNum":" 3805","line":"#if !defined(KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_HOST)"},
{"lineNum":" 3806","line":""},
{"lineNum":" 3807","line":"/* Check #3: is the View managed as determined by the MemoryTraits? */"},
{"lineNum":" 3808","line":"template <class MapType, bool is_managed = (MapType::is_managed != 0)>"},
{"lineNum":" 3809","line":"struct OperatorBoundsErrorOnDevice;"},
{"lineNum":" 3810","line":""},
{"lineNum":" 3811","line":"template <class MapType>"},
{"lineNum":" 3812","line":"struct OperatorBoundsErrorOnDevice<MapType, false> {"},
{"lineNum":" 3813","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 3814","line":"  static void run(MapType const&) { Kokkos::abort(\"View bounds error\"); }"},
{"lineNum":" 3815","line":"};"},
{"lineNum":" 3816","line":""},
{"lineNum":" 3817","line":"template <class MapType>"},
{"lineNum":" 3818","line":"struct OperatorBoundsErrorOnDevice<MapType, true> {"},
{"lineNum":" 3819","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 3820","line":"  static void run(MapType const& map) {"},
{"lineNum":" 3821","line":"    SharedAllocationHeader const* const header ="},
{"lineNum":" 3822","line":"        SharedAllocationHeader::get_header((void*)(map.data()));"},
{"lineNum":" 3823","line":"    char const* const label = header->label();"},
{"lineNum":" 3824","line":"    enum { LEN = 128 };"},
{"lineNum":" 3825","line":"    char msg[LEN];"},
{"lineNum":" 3826","line":"    char const* const first_part = \"View bounds error of view \";"},
{"lineNum":" 3827","line":"    char* p                      = msg;"},
{"lineNum":" 3828","line":"    char* const end              = msg + LEN - 1;"},
{"lineNum":" 3829","line":"    for (char const* p2 = first_part; (*p2 != \'\\0\') && (p < end); ++p, ++p2) {"},
{"lineNum":" 3830","line":"      *p = *p2;"},
{"lineNum":" 3831","line":"    }"},
{"lineNum":" 3832","line":"    for (char const* p2 = label; (*p2 != \'\\0\') && (p < end); ++p, ++p2) {"},
{"lineNum":" 3833","line":"      *p = *p2;"},
{"lineNum":" 3834","line":"    }"},
{"lineNum":" 3835","line":"    *p = \'\\0\';"},
{"lineNum":" 3836","line":"    Kokkos::abort(msg);"},
{"lineNum":" 3837","line":"  }"},
{"lineNum":" 3838","line":"};"},
{"lineNum":" 3839","line":""},
{"lineNum":" 3840","line":"/* Check #2: does the ViewMapping have the printable_label_typedef defined?"},
{"lineNum":" 3841","line":"   See above that only the non-specialized standard-layout ViewMapping has"},
{"lineNum":" 3842","line":"   this defined by default."},
{"lineNum":" 3843","line":"   The existence of this alias indicates the existence of MapType::is_managed"},
{"lineNum":" 3844","line":" */"},
{"lineNum":" 3845","line":"template <class T, class Enable = void>"},
{"lineNum":" 3846","line":"struct has_printable_label_typedef : public std::false_type {};"},
{"lineNum":" 3847","line":""},
{"lineNum":" 3848","line":"template <class T>"},
{"lineNum":" 3849","line":"struct has_printable_label_typedef<T,"},
{"lineNum":" 3850","line":"                                   void_t<typename T::printable_label_typedef>>"},
{"lineNum":" 3851","line":"    : public std::true_type {};"},
{"lineNum":" 3852","line":""},
{"lineNum":" 3853","line":"template <class MapType>"},
{"lineNum":" 3854","line":"KOKKOS_INLINE_FUNCTION void operator_bounds_error_on_device(MapType const&,"},
{"lineNum":" 3855","line":"                                                            std::false_type) {"},
{"lineNum":" 3856","line":"  Kokkos::abort(\"View bounds error\");"},
{"lineNum":" 3857","line":"}"},
{"lineNum":" 3858","line":""},
{"lineNum":" 3859","line":"template <class MapType>"},
{"lineNum":" 3860","line":"KOKKOS_INLINE_FUNCTION void operator_bounds_error_on_device(MapType const& map,"},
{"lineNum":" 3861","line":"                                                            std::true_type) {"},
{"lineNum":" 3862","line":"  OperatorBoundsErrorOnDevice<MapType>::run(map);"},
{"lineNum":" 3863","line":"}"},
{"lineNum":" 3864","line":""},
{"lineNum":" 3865","line":"#endif  // ! defined( KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_HOST )"},
{"lineNum":" 3866","line":""},
{"lineNum":" 3867","line":"template <class MemorySpace, class ViewType, class MapType, class... Args>"},
{"lineNum":" 3868","line":"KOKKOS_INLINE_FUNCTION void view_verify_operator_bounds("},
{"lineNum":" 3869","line":"    Kokkos::Impl::ViewTracker<ViewType> const& tracker, const MapType& map,"},
{"lineNum":" 3870","line":"    Args... args) {"},
{"lineNum":" 3871","line":"  if (!view_verify_operator_bounds<0>(map, args...)) {"},
{"lineNum":" 3872","line":"#if defined(KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_HOST)"},
{"lineNum":" 3873","line":"    enum { LEN = 1024 };"},
{"lineNum":" 3874","line":"    char buffer[LEN];"},
{"lineNum":" 3875","line":"    const std::string label ="},
{"lineNum":" 3876","line":"        tracker.m_tracker.template get_label<MemorySpace>();"},
{"lineNum":" 3877","line":"    int n ="},
{"lineNum":" 3878","line":"        snprintf(buffer, LEN, \"View bounds error of view %s (\", label.c_str());"},
{"lineNum":" 3879","line":"    view_error_operator_bounds<0>(buffer + n, LEN - n, map, args...);"},
{"lineNum":" 3880","line":"    Kokkos::Impl::throw_runtime_exception(std::string(buffer));"},
{"lineNum":" 3881","line":"#else"},
{"lineNum":" 3882","line":"    /* Check #1: is there a SharedAllocationRecord?"},
{"lineNum":" 3883","line":"       (we won\'t use it, but if its not there then there isn\'t"},
{"lineNum":" 3884","line":"        a corresponding SharedAllocationHeader containing a label)."},
{"lineNum":" 3885","line":"       This check should cover the case of Views that don\'t"},
{"lineNum":" 3886","line":"       have the Unmanaged trait but were initialized by pointer. */"},
{"lineNum":" 3887","line":"    if (tracker.m_tracker.has_record()) {"},
{"lineNum":" 3888","line":"      operator_bounds_error_on_device<MapType>("},
{"lineNum":" 3889","line":"          map, has_printable_label_typedef<MapType>());"},
{"lineNum":" 3890","line":"    } else {"},
{"lineNum":" 3891","line":"      Kokkos::abort(\"View bounds error\");"},
{"lineNum":" 3892","line":"    }"},
{"lineNum":" 3893","line":"#endif"},
{"lineNum":" 3894","line":"  }"},
{"lineNum":" 3895","line":"}"},
{"lineNum":" 3896","line":""},
{"lineNum":" 3897","line":"} /* namespace Impl */"},
{"lineNum":" 3898","line":"} /* namespace Kokkos */"},
{"lineNum":" 3899","line":""},
{"lineNum":" 3900","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 3901","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 3902","line":""},
{"lineNum":" 3903","line":"#endif /* #ifndef KOKKOS_EXPERIMENTAL_VIEW_MAPPING_HPP */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 100, "covered" : 0,};
var merged_data = [];
