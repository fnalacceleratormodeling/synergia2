var data = {lines:[
{"lineNum":"    1","line":"// Tencent is pleased to support the open source community by making RapidJSON available."},
{"lineNum":"    2","line":"//"},
{"lineNum":"    3","line":"// Copyright (C) 2015 THL A29 Limited, a Tencent company, and Milo Yip. All rights reserved."},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// Licensed under the MIT License (the \"License\"); you may not use this file except"},
{"lineNum":"    6","line":"// in compliance with the License. You may obtain a copy of the License at"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"// http://opensource.org/licenses/MIT"},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// Unless required by applicable law or agreed to in writing, software distributed"},
{"lineNum":"   11","line":"// under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR"},
{"lineNum":"   12","line":"// CONDITIONS OF ANY KIND, either express or implied. See the License for the"},
{"lineNum":"   13","line":"// specific language governing permissions and limitations under the License."},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"#ifndef CEREAL_RAPIDJSON_ISTREAMWRAPPER_H_"},
{"lineNum":"   16","line":"#define CEREAL_RAPIDJSON_ISTREAMWRAPPER_H_"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"#include \"stream.h\""},
{"lineNum":"   19","line":"#include <iosfwd>"},
{"lineNum":"   20","line":"#include <ios>"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"#ifdef __clang__"},
{"lineNum":"   23","line":"CEREAL_RAPIDJSON_DIAG_PUSH"},
{"lineNum":"   24","line":"CEREAL_RAPIDJSON_DIAG_OFF(padded)"},
{"lineNum":"   25","line":"#elif defined(_MSC_VER)"},
{"lineNum":"   26","line":"CEREAL_RAPIDJSON_DIAG_PUSH"},
{"lineNum":"   27","line":"CEREAL_RAPIDJSON_DIAG_OFF(4351) // new behavior: elements of array \'array\' will be default initialized"},
{"lineNum":"   28","line":"#endif"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"CEREAL_RAPIDJSON_NAMESPACE_BEGIN"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"//! Wrapper of \\c std::basic_istream into RapidJSON\'s Stream concept."},
{"lineNum":"   33","line":"/*!"},
{"lineNum":"   34","line":"    The classes can be wrapped including but not limited to:"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"    - \\c std::istringstream"},
{"lineNum":"   37","line":"    - \\c std::stringstream"},
{"lineNum":"   38","line":"    - \\c std::wistringstream"},
{"lineNum":"   39","line":"    - \\c std::wstringstream"},
{"lineNum":"   40","line":"    - \\c std::ifstream"},
{"lineNum":"   41","line":"    - \\c std::fstream"},
{"lineNum":"   42","line":"    - \\c std::wifstream"},
{"lineNum":"   43","line":"    - \\c std::wfstream"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"    \\tparam StreamType Class derived from \\c std::basic_istream."},
{"lineNum":"   46","line":"*/"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"template <typename StreamType>"},
{"lineNum":"   49","line":"class BasicIStreamWrapper {"},
{"lineNum":"   50","line":"public:"},
{"lineNum":"   51","line":"    typedef typename StreamType::char_type Ch;"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"    //! Constructor."},
{"lineNum":"   54","line":"    /*!"},
{"lineNum":"   55","line":"        \\param stream stream opened for read."},
{"lineNum":"   56","line":"    */"},
{"lineNum":"   57","line":"    BasicIStreamWrapper(StreamType &stream) : stream_(stream), buffer_(peekBuffer_), bufferSize_(4), bufferLast_(0), current_(buffer_), readCount_(0), count_(0), eof_(false) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   58","line":"        Read();"},
{"lineNum":"   59","line":"    }"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"    //! Constructor."},
{"lineNum":"   62","line":"    /*!"},
{"lineNum":"   63","line":"        \\param stream stream opened for read."},
{"lineNum":"   64","line":"        \\param buffer user-supplied buffer."},
{"lineNum":"   65","line":"        \\param bufferSize size of buffer in bytes. Must >=4 bytes."},
{"lineNum":"   66","line":"    */"},
{"lineNum":"   67","line":"    BasicIStreamWrapper(StreamType &stream, char* buffer, size_t bufferSize) : stream_(stream), buffer_(buffer), bufferSize_(bufferSize), bufferLast_(0), current_(buffer_), readCount_(0), count_(0), eof_(false) {"},
{"lineNum":"   68","line":"        CEREAL_RAPIDJSON_ASSERT(bufferSize >= 4);"},
{"lineNum":"   69","line":"        Read();"},
{"lineNum":"   70","line":"    }"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"    Ch Peek() const { return *current_; }","class":"lineNoCov","hits":"0","possible_hits":"58",},
{"lineNum":"   73","line":"    Ch Take() { Ch c = *current_; Read(); return c; }","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"   74","line":"    size_t Tell() const { return count_ + static_cast<size_t>(current_ - buffer_); }","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"    // Not implemented"},
{"lineNum":"   77","line":"    void Put(Ch) { CEREAL_RAPIDJSON_ASSERT(false); }"},
{"lineNum":"   78","line":"    void Flush() { CEREAL_RAPIDJSON_ASSERT(false); }"},
{"lineNum":"   79","line":"    Ch* PutBegin() { CEREAL_RAPIDJSON_ASSERT(false); return 0; }"},
{"lineNum":"   80","line":"    size_t PutEnd(Ch*) { CEREAL_RAPIDJSON_ASSERT(false); return 0; }"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"    // For encoding detection only."},
{"lineNum":"   83","line":"    const Ch* Peek4() const {"},
{"lineNum":"   84","line":"        return (current_ + 4 - !eof_ <= bufferLast_) ? current_ : 0;"},
{"lineNum":"   85","line":"    }"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"private:"},
{"lineNum":"   88","line":"    BasicIStreamWrapper();"},
{"lineNum":"   89","line":"    BasicIStreamWrapper(const BasicIStreamWrapper&);"},
{"lineNum":"   90","line":"    BasicIStreamWrapper& operator=(const BasicIStreamWrapper&);"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"    void Read() {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   93","line":"        if (current_ < bufferLast_)","class":"lineNoCov","hits":"0","possible_hits":"66",},
{"lineNum":"   94","line":"            ++current_;","class":"lineNoCov","hits":"0","possible_hits":"66",},
{"lineNum":"   95","line":"        else if (!eof_) {","class":"lineNoCov","hits":"0","possible_hits":"65",},
{"lineNum":"   96","line":"            count_ += readCount_;","class":"lineNoCov","hits":"0","possible_hits":"64",},
{"lineNum":"   97","line":"            readCount_ = bufferSize_;","class":"lineNoCov","hits":"0","possible_hits":"65",},
{"lineNum":"   98","line":"            bufferLast_ = buffer_ + readCount_ - 1;","class":"lineNoCov","hits":"0","possible_hits":"67",},
{"lineNum":"   99","line":"            current_ = buffer_;","class":"lineNoCov","hits":"0","possible_hits":"65",},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"            if (!stream_.read(buffer_, static_cast<std::streamsize>(bufferSize_))) {","class":"lineNoCov","hits":"0","possible_hits":"192",},
{"lineNum":"  102","line":"                readCount_ = static_cast<size_t>(stream_.gcount());","class":"lineNoCov","hits":"0","possible_hits":"130",},
{"lineNum":"  103","line":"                *(bufferLast_ = buffer_ + readCount_) = \'\\0\';","class":"lineNoCov","hits":"0","possible_hits":"130",},
{"lineNum":"  104","line":"                eof_ = true;","class":"lineNoCov","hits":"0","possible_hits":"65",},
{"lineNum":"  105","line":"            }"},
{"lineNum":"  106","line":"        }"},
{"lineNum":"  107","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"    StreamType &stream_;"},
{"lineNum":"  110","line":"    Ch peekBuffer_[4], *buffer_;"},
{"lineNum":"  111","line":"    size_t bufferSize_;"},
{"lineNum":"  112","line":"    Ch *bufferLast_;"},
{"lineNum":"  113","line":"    Ch *current_;"},
{"lineNum":"  114","line":"    size_t readCount_;"},
{"lineNum":"  115","line":"    size_t count_;  //!< Number of characters read"},
{"lineNum":"  116","line":"    bool eof_;"},
{"lineNum":"  117","line":"};"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"typedef BasicIStreamWrapper<std::istream> IStreamWrapper;"},
{"lineNum":"  120","line":"typedef BasicIStreamWrapper<std::wistream> WIStreamWrapper;"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"#if defined(__clang__) || defined(_MSC_VER)"},
{"lineNum":"  123","line":"CEREAL_RAPIDJSON_DIAG_POP"},
{"lineNum":"  124","line":"#endif"},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"CEREAL_RAPIDJSON_NAMESPACE_END"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"#endif // CEREAL_RAPIDJSON_ISTREAMWRAPPER_H_"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 17, "covered" : 0,};
var merged_data = [];
