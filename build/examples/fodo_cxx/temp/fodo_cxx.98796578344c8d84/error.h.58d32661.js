var data = {lines:[
{"lineNum":"    1","line":"// Tencent is pleased to support the open source community by making RapidJSON available."},
{"lineNum":"    2","line":"//"},
{"lineNum":"    3","line":"// Copyright (C) 2015 THL A29 Limited, a Tencent company, and Milo Yip. All rights reserved."},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// Licensed under the MIT License (the \"License\"); you may not use this file except"},
{"lineNum":"    6","line":"// in compliance with the License. You may obtain a copy of the License at"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"// http://opensource.org/licenses/MIT"},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// Unless required by applicable law or agreed to in writing, software distributed"},
{"lineNum":"   11","line":"// under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR"},
{"lineNum":"   12","line":"// CONDITIONS OF ANY KIND, either express or implied. See the License for the"},
{"lineNum":"   13","line":"// specific language governing permissions and limitations under the License."},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"#ifndef CEREAL_RAPIDJSON_ERROR_ERROR_H_"},
{"lineNum":"   16","line":"#define CEREAL_RAPIDJSON_ERROR_ERROR_H_"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"#include \"../rapidjson.h\""},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"#ifdef __clang__"},
{"lineNum":"   21","line":"CEREAL_RAPIDJSON_DIAG_PUSH"},
{"lineNum":"   22","line":"CEREAL_RAPIDJSON_DIAG_OFF(padded)"},
{"lineNum":"   23","line":"#endif"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"/*! \\file error.h */"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"/*! \\defgroup CEREAL_RAPIDJSON_ERRORS RapidJSON error handling */"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   30","line":"// CEREAL_RAPIDJSON_ERROR_CHARTYPE"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"//! Character type of error messages."},
{"lineNum":"   33","line":"/*! \\ingroup CEREAL_RAPIDJSON_ERRORS"},
{"lineNum":"   34","line":"    The default character type is \\c char."},
{"lineNum":"   35","line":"    On Windows, user can define this macro as \\c TCHAR for supporting both"},
{"lineNum":"   36","line":"    unicode/non-unicode settings."},
{"lineNum":"   37","line":"*/"},
{"lineNum":"   38","line":"#ifndef CEREAL_RAPIDJSON_ERROR_CHARTYPE"},
{"lineNum":"   39","line":"#define CEREAL_RAPIDJSON_ERROR_CHARTYPE char"},
{"lineNum":"   40","line":"#endif"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   43","line":"// CEREAL_RAPIDJSON_ERROR_STRING"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"//! Macro for converting string literial to \\ref CEREAL_RAPIDJSON_ERROR_CHARTYPE[]."},
{"lineNum":"   46","line":"/*! \\ingroup CEREAL_RAPIDJSON_ERRORS"},
{"lineNum":"   47","line":"    By default this conversion macro does nothing."},
{"lineNum":"   48","line":"    On Windows, user can define this macro as \\c _T(x) for supporting both"},
{"lineNum":"   49","line":"    unicode/non-unicode settings."},
{"lineNum":"   50","line":"*/"},
{"lineNum":"   51","line":"#ifndef CEREAL_RAPIDJSON_ERROR_STRING"},
{"lineNum":"   52","line":"#define CEREAL_RAPIDJSON_ERROR_STRING(x) x"},
{"lineNum":"   53","line":"#endif"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"CEREAL_RAPIDJSON_NAMESPACE_BEGIN"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   58","line":"// ParseErrorCode"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"//! Error code of parsing."},
{"lineNum":"   61","line":"/*! \\ingroup CEREAL_RAPIDJSON_ERRORS"},
{"lineNum":"   62","line":"    \\see GenericReader::Parse, GenericReader::GetParseErrorCode"},
{"lineNum":"   63","line":"*/"},
{"lineNum":"   64","line":"enum ParseErrorCode {"},
{"lineNum":"   65","line":"    kParseErrorNone = 0,                        //!< No error."},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"    kParseErrorDocumentEmpty,                   //!< The document is empty."},
{"lineNum":"   68","line":"    kParseErrorDocumentRootNotSingular,         //!< The document root must not follow by other values."},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"    kParseErrorValueInvalid,                    //!< Invalid value."},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"    kParseErrorObjectMissName,                  //!< Missing a name for object member."},
{"lineNum":"   73","line":"    kParseErrorObjectMissColon,                 //!< Missing a colon after a name of object member."},
{"lineNum":"   74","line":"    kParseErrorObjectMissCommaOrCurlyBracket,   //!< Missing a comma or \'}\' after an object member."},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"    kParseErrorArrayMissCommaOrSquareBracket,   //!< Missing a comma or \']\' after an array element."},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"    kParseErrorStringUnicodeEscapeInvalidHex,   //!< Incorrect hex digit after \\\\u escape in string."},
{"lineNum":"   79","line":"    kParseErrorStringUnicodeSurrogateInvalid,   //!< The surrogate pair in string is invalid."},
{"lineNum":"   80","line":"    kParseErrorStringEscapeInvalid,             //!< Invalid escape character in string."},
{"lineNum":"   81","line":"    kParseErrorStringMissQuotationMark,         //!< Missing a closing quotation mark in string."},
{"lineNum":"   82","line":"    kParseErrorStringInvalidEncoding,           //!< Invalid encoding in string."},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"    kParseErrorNumberTooBig,                    //!< Number too big to be stored in double."},
{"lineNum":"   85","line":"    kParseErrorNumberMissFraction,              //!< Miss fraction part in number."},
{"lineNum":"   86","line":"    kParseErrorNumberMissExponent,              //!< Miss exponent in number."},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"    kParseErrorTermination,                     //!< Parsing was terminated."},
{"lineNum":"   89","line":"    kParseErrorUnspecificSyntaxError            //!< Unspecific syntax error."},
{"lineNum":"   90","line":"};"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"//! Result of parsing (wraps ParseErrorCode)"},
{"lineNum":"   93","line":"/*!"},
{"lineNum":"   94","line":"    \\ingroup CEREAL_RAPIDJSON_ERRORS"},
{"lineNum":"   95","line":"    \\code"},
{"lineNum":"   96","line":"        Document doc;"},
{"lineNum":"   97","line":"        ParseResult ok = doc.Parse(\"[42]\");"},
{"lineNum":"   98","line":"        if (!ok) {"},
{"lineNum":"   99","line":"            fprintf(stderr, \"JSON parse error: %s (%u)\","},
{"lineNum":"  100","line":"                    GetParseError_En(ok.Code()), ok.Offset());"},
{"lineNum":"  101","line":"            exit(EXIT_FAILURE);"},
{"lineNum":"  102","line":"        }"},
{"lineNum":"  103","line":"    \\endcode"},
{"lineNum":"  104","line":"    \\see GenericReader::Parse, GenericDocument::Parse"},
{"lineNum":"  105","line":"*/"},
{"lineNum":"  106","line":"struct ParseResult {"},
{"lineNum":"  107","line":"    //!! Unspecified boolean type"},
{"lineNum":"  108","line":"    typedef bool (ParseResult::*BooleanType)() const;"},
{"lineNum":"  109","line":"public:"},
{"lineNum":"  110","line":"    //! Default constructor, no error."},
{"lineNum":"  111","line":"    ParseResult() : code_(kParseErrorNone), offset_(0) {}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  112","line":"    //! Constructor to set an error."},
{"lineNum":"  113","line":"    ParseResult(ParseErrorCode code, size_t offset) : code_(code), offset_(offset) {}"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"    //! Get the error code."},
{"lineNum":"  116","line":"    ParseErrorCode Code() const { return code_; }"},
{"lineNum":"  117","line":"    //! Get the error offset, if \\ref IsError(), 0 otherwise."},
{"lineNum":"  118","line":"    size_t Offset() const { return offset_; }"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"    //! Explicit conversion to \\c bool, returns \\c true, iff !\\ref IsError()."},
{"lineNum":"  121","line":"    operator BooleanType() const { return !IsError() ? &ParseResult::IsError : NULL; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  122","line":"    //! Whether the result is an error."},
{"lineNum":"  123","line":"    bool IsError() const { return code_ != kParseErrorNone; }","class":"lineNoCov","hits":"0","possible_hits":"42",},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"    bool operator==(const ParseResult& that) const { return code_ == that.code_; }"},
{"lineNum":"  126","line":"    bool operator==(ParseErrorCode code) const { return code_ == code; }"},
{"lineNum":"  127","line":"    friend bool operator==(ParseErrorCode code, const ParseResult & err) { return code == err.code_; }"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"    bool operator!=(const ParseResult& that) const { return !(*this == that); }"},
{"lineNum":"  130","line":"    bool operator!=(ParseErrorCode code) const { return !(*this == code); }"},
{"lineNum":"  131","line":"    friend bool operator!=(ParseErrorCode code, const ParseResult & err) { return err != code; }"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"    //! Reset error code."},
{"lineNum":"  134","line":"    void Clear() { Set(kParseErrorNone); }"},
{"lineNum":"  135","line":"    //! Update error code and offset."},
{"lineNum":"  136","line":"    void Set(ParseErrorCode code, size_t offset = 0) { code_ = code; offset_ = offset; }","class":"lineNoCov","hits":"0","possible_hits":"19",},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"private:"},
{"lineNum":"  139","line":"    ParseErrorCode code_;"},
{"lineNum":"  140","line":"    size_t offset_;"},
{"lineNum":"  141","line":"};"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"//! Function pointer type of GetParseError()."},
{"lineNum":"  144","line":"/*! \\ingroup CEREAL_RAPIDJSON_ERRORS"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"    This is the prototype for \\c GetParseError_X(), where \\c X is a locale."},
{"lineNum":"  147","line":"    User can dynamically change locale in runtime, e.g.:"},
{"lineNum":"  148","line":"\\code"},
{"lineNum":"  149","line":"    GetParseErrorFunc GetParseError = GetParseError_En; // or whatever"},
{"lineNum":"  150","line":"    const CEREAL_RAPIDJSON_ERROR_CHARTYPE* s = GetParseError(document.GetParseErrorCode());"},
{"lineNum":"  151","line":"\\endcode"},
{"lineNum":"  152","line":"*/"},
{"lineNum":"  153","line":"typedef const CEREAL_RAPIDJSON_ERROR_CHARTYPE* (*GetParseErrorFunc)(ParseErrorCode);"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"CEREAL_RAPIDJSON_NAMESPACE_END"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"#ifdef __clang__"},
{"lineNum":"  158","line":"CEREAL_RAPIDJSON_DIAG_POP"},
{"lineNum":"  159","line":"#endif"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"#endif // CEREAL_RAPIDJSON_ERROR_ERROR_H_"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 4, "covered" : 0,};
var merged_data = [];
