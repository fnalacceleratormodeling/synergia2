var data = {lines:[
{"lineNum":"    1","line":"/*"},
{"lineNum":"    2","line":"//@HEADER"},
{"lineNum":"    3","line":"// ************************************************************************"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"//                        Kokkos v. 3.0"},
{"lineNum":"    6","line":"//       Copyright (2020) National Technology & Engineering"},
{"lineNum":"    7","line":"//               Solutions of Sandia, LLC (NTESS)."},
{"lineNum":"    8","line":"//"},
{"lineNum":"    9","line":"// Under the terms of Contract DE-NA0003525 with NTESS,"},
{"lineNum":"   10","line":"// the U.S. Government retains certain rights in this software."},
{"lineNum":"   11","line":"//"},
{"lineNum":"   12","line":"// Redistribution and use in source and binary forms, with or without"},
{"lineNum":"   13","line":"// modification, are permitted provided that the following conditions are"},
{"lineNum":"   14","line":"// met:"},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"// 1. Redistributions of source code must retain the above copyright"},
{"lineNum":"   17","line":"// notice, this list of conditions and the following disclaimer."},
{"lineNum":"   18","line":"//"},
{"lineNum":"   19","line":"// 2. Redistributions in binary form must reproduce the above copyright"},
{"lineNum":"   20","line":"// notice, this list of conditions and the following disclaimer in the"},
{"lineNum":"   21","line":"// documentation and/or other materials provided with the distribution."},
{"lineNum":"   22","line":"//"},
{"lineNum":"   23","line":"// 3. Neither the name of the Corporation nor the names of the"},
{"lineNum":"   24","line":"// contributors may be used to endorse or promote products derived from"},
{"lineNum":"   25","line":"// this software without specific prior written permission."},
{"lineNum":"   26","line":"//"},
{"lineNum":"   27","line":"// THIS SOFTWARE IS PROVIDED BY NTESS \"AS IS\" AND ANY"},
{"lineNum":"   28","line":"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"},
{"lineNum":"   29","line":"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR"},
{"lineNum":"   30","line":"// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NTESS OR THE"},
{"lineNum":"   31","line":"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,"},
{"lineNum":"   32","line":"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,"},
{"lineNum":"   33","line":"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR"},
{"lineNum":"   34","line":"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF"},
{"lineNum":"   35","line":"// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING"},
{"lineNum":"   36","line":"// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"},
{"lineNum":"   37","line":"// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   38","line":"//"},
{"lineNum":"   39","line":"// Questions? Contact Christian R. Trott (crtrott@sandia.gov)"},
{"lineNum":"   40","line":"//"},
{"lineNum":"   41","line":"// ************************************************************************"},
{"lineNum":"   42","line":"//@HEADER"},
{"lineNum":"   43","line":"*/"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"#include <Kokkos_Macros.hpp>"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"#include <impl/Kokkos_Error.hpp>"},
{"lineNum":"   48","line":"#include <impl/Kokkos_MemorySpace.hpp>"},
{"lineNum":"   49","line":"#include <impl/Kokkos_Tools.hpp>"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"/*--------------------------------------------------------------------------*/"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"#if defined(__INTEL_COMPILER) && !defined(KOKKOS_ENABLE_CUDA)"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"// Intel specialized allocator does not interoperate with CUDA memory allocation"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"#define KOKKOS_ENABLE_INTEL_MM_ALLOC"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"#endif"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"/*--------------------------------------------------------------------------*/"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"#if defined(KOKKOS_ENABLE_POSIX_MEMALIGN)"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"#include <unistd.h>"},
{"lineNum":"   66","line":"#include <sys/mman.h>"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"/* mmap flags for private anonymous memory allocation */"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"#if defined(MAP_ANONYMOUS) && defined(MAP_PRIVATE)"},
{"lineNum":"   71","line":"#define KOKKOS_IMPL_POSIX_MMAP_FLAGS (MAP_PRIVATE | MAP_ANONYMOUS)"},
{"lineNum":"   72","line":"#elif defined(MAP_ANON) && defined(MAP_PRIVATE)"},
{"lineNum":"   73","line":"#define KOKKOS_IMPL_POSIX_MMAP_FLAGS (MAP_PRIVATE | MAP_ANON)"},
{"lineNum":"   74","line":"#endif"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"// mmap flags for huge page tables"},
{"lineNum":"   77","line":"// the Cuda driver does not interoperate with MAP_HUGETLB"},
{"lineNum":"   78","line":"#if defined(KOKKOS_IMPL_POSIX_MMAP_FLAGS)"},
{"lineNum":"   79","line":"#if defined(MAP_HUGETLB) && !defined(KOKKOS_ENABLE_CUDA)"},
{"lineNum":"   80","line":"#define KOKKOS_IMPL_POSIX_MMAP_FLAGS_HUGE \\"},
{"lineNum":"   81","line":"  (KOKKOS_IMPL_POSIX_MMAP_FLAGS | MAP_HUGETLB)"},
{"lineNum":"   82","line":"#else"},
{"lineNum":"   83","line":"#define KOKKOS_IMPL_POSIX_MMAP_FLAGS_HUGE KOKKOS_IMPL_POSIX_MMAP_FLAGS"},
{"lineNum":"   84","line":"#endif"},
{"lineNum":"   85","line":"#endif"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"#endif"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"/*--------------------------------------------------------------------------*/"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"#include <cstddef>"},
{"lineNum":"   92","line":"#include <cstdlib>"},
{"lineNum":"   93","line":"#include <cstdint>"},
{"lineNum":"   94","line":"#include <cstring>"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"#include <iostream>"},
{"lineNum":"   97","line":"#include <sstream>"},
{"lineNum":"   98","line":"#include <cstring>"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"#include <Kokkos_HostSpace.hpp>"},
{"lineNum":"  101","line":"#include <impl/Kokkos_Error.hpp>"},
{"lineNum":"  102","line":"#include <Kokkos_Atomic.hpp>"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"#if (defined(KOKKOS_ENABLE_ASM) || defined(KOKKOS_ENABLE_TM)) && \\"},
{"lineNum":"  105","line":"    defined(KOKKOS_ENABLE_ISA_X86_64) && !defined(KOKKOS_COMPILER_PGI)"},
{"lineNum":"  106","line":"#include <immintrin.h>"},
{"lineNum":"  107","line":"#endif"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  110","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"namespace Kokkos {"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"/* Default allocation mechanism */"},
{"lineNum":"  115","line":"HostSpace::HostSpace()"},
{"lineNum":"  116","line":"    : m_alloc_mech(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  117","line":"#if defined(KOKKOS_ENABLE_INTEL_MM_ALLOC)"},
{"lineNum":"  118","line":"          HostSpace::INTEL_MM_ALLOC"},
{"lineNum":"  119","line":"#elif defined(KOKKOS_IMPL_POSIX_MMAP_FLAGS)"},
{"lineNum":"  120","line":"          HostSpace::POSIX_MMAP"},
{"lineNum":"  121","line":"#elif defined(KOKKOS_ENABLE_POSIX_MEMALIGN)"},
{"lineNum":"  122","line":"          HostSpace::POSIX_MEMALIGN"},
{"lineNum":"  123","line":"#else"},
{"lineNum":"  124","line":"          HostSpace::STD_MALLOC"},
{"lineNum":"  125","line":"#endif"},
{"lineNum":"  126","line":"      ) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  127","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"/* Default allocation mechanism */"},
{"lineNum":"  130","line":"HostSpace::HostSpace(const HostSpace::AllocationMechanism &arg_alloc_mech)"},
{"lineNum":"  131","line":"    : m_alloc_mech(HostSpace::STD_MALLOC) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  132","line":"  if (arg_alloc_mech == STD_MALLOC) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  133","line":"    m_alloc_mech = HostSpace::STD_MALLOC;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  134","line":"  }"},
{"lineNum":"  135","line":"#if defined(KOKKOS_ENABLE_INTEL_MM_ALLOC)"},
{"lineNum":"  136","line":"  else if (arg_alloc_mech == HostSpace::INTEL_MM_ALLOC) {"},
{"lineNum":"  137","line":"    m_alloc_mech = HostSpace::INTEL_MM_ALLOC;"},
{"lineNum":"  138","line":"  }"},
{"lineNum":"  139","line":"#elif defined(KOKKOS_ENABLE_POSIX_MEMALIGN)"},
{"lineNum":"  140","line":"  else if (arg_alloc_mech == HostSpace::POSIX_MEMALIGN) {"},
{"lineNum":"  141","line":"    m_alloc_mech = HostSpace::POSIX_MEMALIGN;"},
{"lineNum":"  142","line":"  }"},
{"lineNum":"  143","line":"#elif defined(KOKKOS_IMPL_POSIX_MMAP_FLAGS)"},
{"lineNum":"  144","line":"  else if (arg_alloc_mech == HostSpace::POSIX_MMAP) {"},
{"lineNum":"  145","line":"    m_alloc_mech = HostSpace::POSIX_MMAP;"},
{"lineNum":"  146","line":"  }"},
{"lineNum":"  147","line":"#endif"},
{"lineNum":"  148","line":"  else {"},
{"lineNum":"  149","line":"    const char *const mech ="},
{"lineNum":"  150","line":"        (arg_alloc_mech == HostSpace::INTEL_MM_ALLOC)"},
{"lineNum":"  151","line":"            ? \"INTEL_MM_ALLOC\""},
{"lineNum":"  152","line":"            : ((arg_alloc_mech == HostSpace::POSIX_MEMALIGN)"},
{"lineNum":"  153","line":"                   ? \"POSIX_MEMALIGN\""},
{"lineNum":"  154","line":"                   : ((arg_alloc_mech == HostSpace::POSIX_MMAP) ? \"POSIX_MMAP\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  155","line":"                                                                : \"\"));"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"    std::string msg;"},
{"lineNum":"  158","line":"    msg.append(\"Kokkos::HostSpace \");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  159","line":"    msg.append(mech);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  160","line":"    msg.append(\" is not available\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  161","line":"    Kokkos::Impl::throw_runtime_exception(msg);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  162","line":"  }"},
{"lineNum":"  163","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"void *HostSpace::allocate(const size_t arg_alloc_size) const {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  166","line":"  return allocate(\"[unlabeled]\", arg_alloc_size);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  167","line":"}"},
{"lineNum":"  168","line":"void *HostSpace::allocate(const char *arg_label, const size_t arg_alloc_size,"},
{"lineNum":"  169","line":"                          const size_t"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"                              arg_logical_size) const {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  172","line":"  return impl_allocate(arg_label, arg_alloc_size, arg_logical_size);","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  173","line":"}"},
{"lineNum":"  174","line":"void *HostSpace::impl_allocate("},
{"lineNum":"  175","line":"    const char *arg_label, const size_t arg_alloc_size,"},
{"lineNum":"  176","line":"    const size_t arg_logical_size,"},
{"lineNum":"  177","line":"    const Kokkos::Tools::SpaceHandle arg_handle) const {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  178","line":"  const size_t reported_size ="},
{"lineNum":"  179","line":"      (arg_logical_size > 0) ? arg_logical_size : arg_alloc_size;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  180","line":"  static_assert(sizeof(void *) == sizeof(uintptr_t),"},
{"lineNum":"  181","line":"                \"Error sizeof(void*) != sizeof(uintptr_t)\");"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"  static_assert("},
{"lineNum":"  184","line":"      Kokkos::Impl::is_integral_power_of_two(Kokkos::Impl::MEMORY_ALIGNMENT),"},
{"lineNum":"  185","line":"      \"Memory alignment must be power of two\");"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"  constexpr uintptr_t alignment      = Kokkos::Impl::MEMORY_ALIGNMENT;"},
{"lineNum":"  188","line":"  constexpr uintptr_t alignment_mask = alignment - 1;"},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"  void *ptr = nullptr;"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"  if (arg_alloc_size) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  193","line":"    if (m_alloc_mech == STD_MALLOC) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  194","line":"      // Over-allocate to and round up to guarantee proper alignment."},
{"lineNum":"  195","line":"      size_t size_padded = arg_alloc_size + sizeof(void *) + alignment;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"      void *alloc_ptr = malloc(size_padded);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"      if (alloc_ptr) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  200","line":"        auto address = reinterpret_cast<uintptr_t>(alloc_ptr);"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"        // offset enough to record the alloc_ptr"},
{"lineNum":"  203","line":"        address += sizeof(void *);"},
{"lineNum":"  204","line":"        uintptr_t rem    = address % alignment;"},
{"lineNum":"  205","line":"        uintptr_t offset = rem ? (alignment - rem) : 0u;"},
{"lineNum":"  206","line":"        address += offset;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  207","line":"        ptr = reinterpret_cast<void *>(address);"},
{"lineNum":"  208","line":"        // record the alloc\'d pointer"},
{"lineNum":"  209","line":"        address -= sizeof(void *);"},
{"lineNum":"  210","line":"        *reinterpret_cast<void **>(address) = alloc_ptr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  211","line":"      }"},
{"lineNum":"  212","line":"    }"},
{"lineNum":"  213","line":"#if defined(KOKKOS_ENABLE_INTEL_MM_ALLOC)"},
{"lineNum":"  214","line":"    else if (m_alloc_mech == INTEL_MM_ALLOC) {"},
{"lineNum":"  215","line":"      ptr = _mm_malloc(arg_alloc_size, alignment);"},
{"lineNum":"  216","line":"    }"},
{"lineNum":"  217","line":"#endif"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"#if defined(KOKKOS_ENABLE_POSIX_MEMALIGN)"},
{"lineNum":"  220","line":"    else if (m_alloc_mech == POSIX_MEMALIGN) {"},
{"lineNum":"  221","line":"      posix_memalign(&ptr, alignment, arg_alloc_size);"},
{"lineNum":"  222","line":"    }"},
{"lineNum":"  223","line":"#endif"},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"#if defined(KOKKOS_IMPL_POSIX_MMAP_FLAGS)"},
{"lineNum":"  226","line":"    else if (m_alloc_mech == POSIX_MMAP) {"},
{"lineNum":"  227","line":"      constexpr size_t use_huge_pages = (1u << 27);"},
{"lineNum":"  228","line":"      constexpr int prot              = PROT_READ | PROT_WRITE;"},
{"lineNum":"  229","line":"      const int flags                 = arg_alloc_size < use_huge_pages"},
{"lineNum":"  230","line":"                            ? KOKKOS_IMPL_POSIX_MMAP_FLAGS"},
{"lineNum":"  231","line":"                            : KOKKOS_IMPL_POSIX_MMAP_FLAGS_HUGE;"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"      // read write access to private memory"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"      ptr ="},
{"lineNum":"  236","line":"          mmap(nullptr /* address hint, if nullptr OS kernel chooses address */"},
{"lineNum":"  237","line":"               ,"},
{"lineNum":"  238","line":"               arg_alloc_size /* size in bytes */"},
{"lineNum":"  239","line":"               ,"},
{"lineNum":"  240","line":"               prot /* memory protection */"},
{"lineNum":"  241","line":"               ,"},
{"lineNum":"  242","line":"               flags /* visibility of updates */"},
{"lineNum":"  243","line":"               ,"},
{"lineNum":"  244","line":"               -1 /* file descriptor */"},
{"lineNum":"  245","line":"               ,"},
{"lineNum":"  246","line":"               0 /* offset */"},
{"lineNum":"  247","line":"          );"},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"      /* Associated reallocation:"},
{"lineNum":"  250","line":"             ptr = mremap( old_ptr , old_size , new_size , MREMAP_MAYMOVE );"},
{"lineNum":"  251","line":"      */"},
{"lineNum":"  252","line":"    }"},
{"lineNum":"  253","line":"#endif"},
{"lineNum":"  254","line":"  }"},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"  if ((ptr == nullptr) || (reinterpret_cast<uintptr_t>(ptr) == ~uintptr_t(0)) ||","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  257","line":"      (reinterpret_cast<uintptr_t>(ptr) & alignment_mask)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  258","line":"    Experimental::RawMemoryAllocationFailure::FailureMode failure_mode ="},
{"lineNum":"  259","line":"        Experimental::RawMemoryAllocationFailure::FailureMode::"},
{"lineNum":"  260","line":"            AllocationNotAligned;"},
{"lineNum":"  261","line":"    if (ptr == nullptr) {"},
{"lineNum":"  262","line":"      failure_mode = Experimental::RawMemoryAllocationFailure::FailureMode::"},
{"lineNum":"  263","line":"          OutOfMemoryError;"},
{"lineNum":"  264","line":"    }"},
{"lineNum":"  265","line":""},
{"lineNum":"  266","line":"    Experimental::RawMemoryAllocationFailure::AllocationMechanism alloc_mec ="},
{"lineNum":"  267","line":"        Experimental::RawMemoryAllocationFailure::AllocationMechanism::"},
{"lineNum":"  268","line":"            StdMalloc;"},
{"lineNum":"  269","line":"    switch (m_alloc_mech) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  270","line":"      case STD_MALLOC: break;  // default"},
{"lineNum":"  271","line":"      case POSIX_MEMALIGN:"},
{"lineNum":"  272","line":"        alloc_mec = Experimental::RawMemoryAllocationFailure::"},
{"lineNum":"  273","line":"            AllocationMechanism::PosixMemAlign;"},
{"lineNum":"  274","line":"        break;"},
{"lineNum":"  275","line":"      case POSIX_MMAP:"},
{"lineNum":"  276","line":"        alloc_mec = Experimental::RawMemoryAllocationFailure::"},
{"lineNum":"  277","line":"            AllocationMechanism::PosixMMap;"},
{"lineNum":"  278","line":"        break;"},
{"lineNum":"  279","line":"      case INTEL_MM_ALLOC:"},
{"lineNum":"  280","line":"        alloc_mec = Experimental::RawMemoryAllocationFailure::"},
{"lineNum":"  281","line":"            AllocationMechanism::IntelMMAlloc;"},
{"lineNum":"  282","line":"        break;"},
{"lineNum":"  283","line":"    }"},
{"lineNum":"  284","line":""},
{"lineNum":"  285","line":"    throw Kokkos::Experimental::RawMemoryAllocationFailure(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  286","line":"        arg_alloc_size, alignment, failure_mode, alloc_mec);"},
{"lineNum":"  287","line":"  }"},
{"lineNum":"  288","line":"  if (Kokkos::Profiling::profileLibraryLoaded()) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  289","line":"    Kokkos::Profiling::allocateData(arg_handle, arg_label, ptr, reported_size);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  290","line":"  }"},
{"lineNum":"  291","line":"  return ptr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  292","line":"}"},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"void HostSpace::deallocate(void *const arg_alloc_ptr,"},
{"lineNum":"  295","line":"                           const size_t arg_alloc_size) const {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  296","line":"  deallocate(\"[unlabeled]\", arg_alloc_ptr, arg_alloc_size);"},
{"lineNum":"  297","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"void HostSpace::deallocate(const char *arg_label, void *const arg_alloc_ptr,"},
{"lineNum":"  300","line":"                           const size_t arg_alloc_size,"},
{"lineNum":"  301","line":"                           const size_t"},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"                               arg_logical_size) const {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  304","line":"  impl_deallocate(arg_label, arg_alloc_ptr, arg_alloc_size, arg_logical_size);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  305","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  306","line":"void HostSpace::impl_deallocate("},
{"lineNum":"  307","line":"    const char *arg_label, void *const arg_alloc_ptr,"},
{"lineNum":"  308","line":"    const size_t arg_alloc_size, const size_t arg_logical_size,"},
{"lineNum":"  309","line":"    const Kokkos::Tools::SpaceHandle arg_handle) const {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  310","line":"  if (arg_alloc_ptr) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  311","line":"    size_t reported_size ="},
{"lineNum":"  312","line":"        (arg_logical_size > 0) ? arg_logical_size : arg_alloc_size;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  313","line":"    if (Kokkos::Profiling::profileLibraryLoaded()) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  314","line":"      Kokkos::Profiling::deallocateData(arg_handle, arg_label, arg_alloc_ptr,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  315","line":"                                        reported_size);"},
{"lineNum":"  316","line":"    }"},
{"lineNum":"  317","line":"    if (m_alloc_mech == STD_MALLOC) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  318","line":"      void *alloc_ptr = *(reinterpret_cast<void **>(arg_alloc_ptr) - 1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  319","line":"      free(alloc_ptr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  320","line":"    }"},
{"lineNum":"  321","line":"#if defined(KOKKOS_ENABLE_INTEL_MM_ALLOC)"},
{"lineNum":"  322","line":"    else if (m_alloc_mech == INTEL_MM_ALLOC) {"},
{"lineNum":"  323","line":"      _mm_free(arg_alloc_ptr);"},
{"lineNum":"  324","line":"    }"},
{"lineNum":"  325","line":"#endif"},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"#if defined(KOKKOS_ENABLE_POSIX_MEMALIGN)"},
{"lineNum":"  328","line":"    else if (m_alloc_mech == POSIX_MEMALIGN) {"},
{"lineNum":"  329","line":"      free(arg_alloc_ptr);"},
{"lineNum":"  330","line":"    }"},
{"lineNum":"  331","line":"#endif"},
{"lineNum":"  332","line":""},
{"lineNum":"  333","line":"#if defined(KOKKOS_IMPL_POSIX_MMAP_FLAGS)"},
{"lineNum":"  334","line":"    else if (m_alloc_mech == POSIX_MMAP) {"},
{"lineNum":"  335","line":"      munmap(arg_alloc_ptr, arg_alloc_size);"},
{"lineNum":"  336","line":"    }"},
{"lineNum":"  337","line":"#endif"},
{"lineNum":"  338","line":"  }"},
{"lineNum":"  339","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  340","line":""},
{"lineNum":"  341","line":"}  // namespace Kokkos"},
{"lineNum":"  342","line":""},
{"lineNum":"  343","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  344","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  345","line":""},
{"lineNum":"  346","line":"namespace Kokkos {"},
{"lineNum":"  347","line":"namespace Impl {"},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"#ifdef KOKKOS_ENABLE_DEBUG"},
{"lineNum":"  350","line":"SharedAllocationRecord<void, void>"},
{"lineNum":"  351","line":"    SharedAllocationRecord<Kokkos::HostSpace, void>::s_root_record;"},
{"lineNum":"  352","line":"#endif"},
{"lineNum":"  353","line":""},
{"lineNum":"  354","line":"SharedAllocationRecord<Kokkos::HostSpace, void>::~SharedAllocationRecord()"},
{"lineNum":"  355","line":"#if defined( \\"},
{"lineNum":"  356","line":"    KOKKOS_IMPL_INTEL_WORKAROUND_NOEXCEPT_SPECIFICATION_VIRTUAL_FUNCTION)"},
{"lineNum":"  357","line":"    noexcept"},
{"lineNum":"  358","line":"#endif"},
{"lineNum":"  359","line":"{","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  360","line":"  m_space.deallocate(RecordBase::m_alloc_ptr->m_label,","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  361","line":"                     SharedAllocationRecord<void, void>::m_alloc_ptr,"},
{"lineNum":"  362","line":"                     SharedAllocationRecord<void, void>::m_alloc_size,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  363","line":"                     (SharedAllocationRecord<void, void>::m_alloc_size -","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  364","line":"                      sizeof(SharedAllocationHeader)));"},
{"lineNum":"  365","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  366","line":""},
{"lineNum":"  367","line":"SharedAllocationHeader *_do_allocation(Kokkos::HostSpace const &space,"},
{"lineNum":"  368","line":"                                       std::string const &label,"},
{"lineNum":"  369","line":"                                       size_t alloc_size) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  370","line":"  try {"},
{"lineNum":"  371","line":"    return reinterpret_cast<SharedAllocationHeader *>("},
{"lineNum":"  372","line":"        space.allocate(alloc_size));"},
{"lineNum":"  373","line":"  } catch (Experimental::RawMemoryAllocationFailure const &failure) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  374","line":"    if (failure.failure_mode() == Experimental::RawMemoryAllocationFailure::"},
{"lineNum":"  375","line":"                                      FailureMode::AllocationNotAligned) {"},
{"lineNum":"  376","line":"      // TODO: delete the misaligned memory"},
{"lineNum":"  377","line":"    }"},
{"lineNum":"  378","line":""},
{"lineNum":"  379","line":"    std::cerr << \"Kokkos failed to allocate memory for label \\\"\" << label","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  380","line":"              << \"\\\".  Allocation using MemorySpace named \\\"\" << space.name()"},
{"lineNum":"  381","line":"              << \" failed with the following error:  \";"},
{"lineNum":"  382","line":"    failure.print_error_message(std::cerr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  383","line":"    std::cerr.flush();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  384","line":"    Kokkos::Impl::throw_runtime_exception(\"Memory allocation failure\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  385","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  386","line":"  return nullptr;  // unreachable"},
{"lineNum":"  387","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  388","line":""},
{"lineNum":"  389","line":"SharedAllocationRecord<Kokkos::HostSpace, void>::SharedAllocationRecord("},
{"lineNum":"  390","line":"    const Kokkos::HostSpace &arg_space, const std::string &arg_label,"},
{"lineNum":"  391","line":"    const size_t arg_alloc_size,"},
{"lineNum":"  392","line":"    const SharedAllocationRecord<void, void>::function_type arg_dealloc)"},
{"lineNum":"  393","line":"    // Pass through allocated [ SharedAllocationHeader , user_memory ]"},
{"lineNum":"  394","line":"    // Pass through deallocation function"},
{"lineNum":"  395","line":"    : base_t("},
{"lineNum":"  396","line":"#ifdef KOKKOS_ENABLE_DEBUG"},
{"lineNum":"  397","line":"          &SharedAllocationRecord<Kokkos::HostSpace, void>::s_root_record,"},
{"lineNum":"  398","line":"#endif"},
{"lineNum":"  399","line":"          Impl::checked_allocation_with_header(arg_space, arg_label,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  400","line":"                                               arg_alloc_size),"},
{"lineNum":"  401","line":"          sizeof(SharedAllocationHeader) + arg_alloc_size, arg_dealloc),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  402","line":"      m_space(arg_space) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  403","line":"  this->base_t::_fill_host_accessible_header_info(*RecordBase::m_alloc_ptr,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  404","line":"                                                  arg_label);"},
{"lineNum":"  405","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  406","line":""},
{"lineNum":"  407","line":"}  // namespace Impl"},
{"lineNum":"  408","line":"}  // namespace Kokkos"},
{"lineNum":"  409","line":""},
{"lineNum":"  410","line":"/*--------------------------------------------------------------------------*/"},
{"lineNum":"  411","line":"/*--------------------------------------------------------------------------*/"},
{"lineNum":"  412","line":""},
{"lineNum":"  413","line":"namespace Kokkos {"},
{"lineNum":"  414","line":"namespace {"},
{"lineNum":"  415","line":"const unsigned HOST_SPACE_ATOMIC_MASK     = 0xFFFF;"},
{"lineNum":"  416","line":"const unsigned HOST_SPACE_ATOMIC_XOR_MASK = 0x5A39;"},
{"lineNum":"  417","line":"static int HOST_SPACE_ATOMIC_LOCKS[HOST_SPACE_ATOMIC_MASK + 1];"},
{"lineNum":"  418","line":"}  // namespace"},
{"lineNum":"  419","line":""},
{"lineNum":"  420","line":"namespace Impl {"},
{"lineNum":"  421","line":"void init_lock_array_host_space() {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  422","line":"  static int is_initialized = 0;"},
{"lineNum":"  423","line":"  if (!is_initialized)"},
{"lineNum":"  424","line":"    for (int i = 0; i < static_cast<int>(HOST_SPACE_ATOMIC_MASK + 1); i++)"},
{"lineNum":"  425","line":"      HOST_SPACE_ATOMIC_LOCKS[i] = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  426","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  427","line":""},
{"lineNum":"  428","line":"bool lock_address_host_space(void *ptr) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  429","line":"#if defined(KOKKOS_ENABLE_ISA_X86_64) && defined(KOKKOS_ENABLE_TM) && \\"},
{"lineNum":"  430","line":"    !defined(KOKKOS_COMPILER_PGI)"},
{"lineNum":"  431","line":"  const unsigned status = _xbegin();"},
{"lineNum":"  432","line":""},
{"lineNum":"  433","line":"  if (_XBEGIN_STARTED == status) {"},
{"lineNum":"  434","line":"    const int val ="},
{"lineNum":"  435","line":"        HOST_SPACE_ATOMIC_LOCKS[((size_t(ptr) >> 2) & HOST_SPACE_ATOMIC_MASK) ^"},
{"lineNum":"  436","line":"                                HOST_SPACE_ATOMIC_XOR_MASK];"},
{"lineNum":"  437","line":""},
{"lineNum":"  438","line":"    if (0 == val) {"},
{"lineNum":"  439","line":"      HOST_SPACE_ATOMIC_LOCKS[((size_t(ptr) >> 2) & HOST_SPACE_ATOMIC_MASK) ^"},
{"lineNum":"  440","line":"                              HOST_SPACE_ATOMIC_XOR_MASK] = 1;"},
{"lineNum":"  441","line":"    } else {"},
{"lineNum":"  442","line":"      _xabort(1);"},
{"lineNum":"  443","line":"    }"},
{"lineNum":"  444","line":""},
{"lineNum":"  445","line":"    _xend();"},
{"lineNum":"  446","line":""},
{"lineNum":"  447","line":"    return 1;"},
{"lineNum":"  448","line":"  } else {"},
{"lineNum":"  449","line":"#endif"},
{"lineNum":"  450","line":"    return 0 == atomic_compare_exchange(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  451","line":"                    &HOST_SPACE_ATOMIC_LOCKS[((size_t(ptr) >> 2) &","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  452","line":"                                              HOST_SPACE_ATOMIC_MASK) ^","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  453","line":"                                             HOST_SPACE_ATOMIC_XOR_MASK],"},
{"lineNum":"  454","line":"                    0, 1);"},
{"lineNum":"  455","line":"#if defined(KOKKOS_ENABLE_ISA_X86_64) && defined(KOKKOS_ENABLE_TM) && \\"},
{"lineNum":"  456","line":"    !defined(KOKKOS_COMPILER_PGI)"},
{"lineNum":"  457","line":"  }"},
{"lineNum":"  458","line":"#endif"},
{"lineNum":"  459","line":"}"},
{"lineNum":"  460","line":""},
{"lineNum":"  461","line":"void unlock_address_host_space(void *ptr) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  462","line":"#if defined(KOKKOS_ENABLE_ISA_X86_64) && defined(KOKKOS_ENABLE_TM) && \\"},
{"lineNum":"  463","line":"    !defined(KOKKOS_COMPILER_PGI)"},
{"lineNum":"  464","line":"  const unsigned status = _xbegin();"},
{"lineNum":"  465","line":""},
{"lineNum":"  466","line":"  if (_XBEGIN_STARTED == status) {"},
{"lineNum":"  467","line":"    HOST_SPACE_ATOMIC_LOCKS[((size_t(ptr) >> 2) & HOST_SPACE_ATOMIC_MASK) ^"},
{"lineNum":"  468","line":"                            HOST_SPACE_ATOMIC_XOR_MASK] = 0;"},
{"lineNum":"  469","line":"  } else {"},
{"lineNum":"  470","line":"#endif"},
{"lineNum":"  471","line":"    atomic_exchange("},
{"lineNum":"  472","line":"        &HOST_SPACE_ATOMIC_LOCKS[((size_t(ptr) >> 2) & HOST_SPACE_ATOMIC_MASK) ^","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  473","line":"                                 HOST_SPACE_ATOMIC_XOR_MASK],"},
{"lineNum":"  474","line":"        0);"},
{"lineNum":"  475","line":"#if defined(KOKKOS_ENABLE_ISA_X86_64) && defined(KOKKOS_ENABLE_TM) && \\"},
{"lineNum":"  476","line":"    !defined(KOKKOS_COMPILER_PGI)"},
{"lineNum":"  477","line":"  }"},
{"lineNum":"  478","line":"#endif"},
{"lineNum":"  479","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  480","line":""},
{"lineNum":"  481","line":"}  // namespace Impl"},
{"lineNum":"  482","line":"}  // namespace Kokkos"},
{"lineNum":"  483","line":""},
{"lineNum":"  484","line":"//=============================================================================="},
{"lineNum":"  485","line":"// <editor-fold desc=\"Explicit instantiations of CRTP Base classes\"> {{{1"},
{"lineNum":"  486","line":""},
{"lineNum":"  487","line":"#include <impl/Kokkos_SharedAlloc_timpl.hpp>"},
{"lineNum":"  488","line":""},
{"lineNum":"  489","line":"namespace Kokkos {"},
{"lineNum":"  490","line":"namespace Impl {"},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"// To avoid additional compilation cost for something that\'s (mostly?) not"},
{"lineNum":"  493","line":"// performance sensitive, we explicity instantiate these CRTP base classes here,"},
{"lineNum":"  494","line":"// where we have access to the associated *_timpl.hpp header files."},
{"lineNum":"  495","line":"template class SharedAllocationRecordCommon<Kokkos::HostSpace>;"},
{"lineNum":"  496","line":""},
{"lineNum":"  497","line":"}  // end namespace Impl"},
{"lineNum":"  498","line":"}  // end namespace Kokkos"},
{"lineNum":"  499","line":""},
{"lineNum":"  500","line":"// </editor-fold> end Explicit instantiations of CRTP Base classes }}}1"},
{"lineNum":"  501","line":"//=============================================================================="},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 74, "covered" : 0,};
var merged_data = [];
