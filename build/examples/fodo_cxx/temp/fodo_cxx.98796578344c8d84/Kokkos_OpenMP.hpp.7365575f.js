var data = {lines:[
{"lineNum":"    1","line":"/*"},
{"lineNum":"    2","line":"//@HEADER"},
{"lineNum":"    3","line":"// ************************************************************************"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"//                        Kokkos v. 3.0"},
{"lineNum":"    6","line":"//       Copyright (2020) National Technology & Engineering"},
{"lineNum":"    7","line":"//               Solutions of Sandia, LLC (NTESS)."},
{"lineNum":"    8","line":"//"},
{"lineNum":"    9","line":"// Under the terms of Contract DE-NA0003525 with NTESS,"},
{"lineNum":"   10","line":"// the U.S. Government retains certain rights in this software."},
{"lineNum":"   11","line":"//"},
{"lineNum":"   12","line":"// Redistribution and use in source and binary forms, with or without"},
{"lineNum":"   13","line":"// modification, are permitted provided that the following conditions are"},
{"lineNum":"   14","line":"// met:"},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"// 1. Redistributions of source code must retain the above copyright"},
{"lineNum":"   17","line":"// notice, this list of conditions and the following disclaimer."},
{"lineNum":"   18","line":"//"},
{"lineNum":"   19","line":"// 2. Redistributions in binary form must reproduce the above copyright"},
{"lineNum":"   20","line":"// notice, this list of conditions and the following disclaimer in the"},
{"lineNum":"   21","line":"// documentation and/or other materials provided with the distribution."},
{"lineNum":"   22","line":"//"},
{"lineNum":"   23","line":"// 3. Neither the name of the Corporation nor the names of the"},
{"lineNum":"   24","line":"// contributors may be used to endorse or promote products derived from"},
{"lineNum":"   25","line":"// this software without specific prior written permission."},
{"lineNum":"   26","line":"//"},
{"lineNum":"   27","line":"// THIS SOFTWARE IS PROVIDED BY NTESS \"AS IS\" AND ANY"},
{"lineNum":"   28","line":"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"},
{"lineNum":"   29","line":"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR"},
{"lineNum":"   30","line":"// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NTESS OR THE"},
{"lineNum":"   31","line":"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,"},
{"lineNum":"   32","line":"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,"},
{"lineNum":"   33","line":"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR"},
{"lineNum":"   34","line":"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF"},
{"lineNum":"   35","line":"// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING"},
{"lineNum":"   36","line":"// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"},
{"lineNum":"   37","line":"// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   38","line":"//"},
{"lineNum":"   39","line":"// Questions? Contact Christian R. Trott (crtrott@sandia.gov)"},
{"lineNum":"   40","line":"//"},
{"lineNum":"   41","line":"// ************************************************************************"},
{"lineNum":"   42","line":"//@HEADER"},
{"lineNum":"   43","line":"*/"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"#ifndef KOKKOS_OPENMP_HPP"},
{"lineNum":"   46","line":"#define KOKKOS_OPENMP_HPP"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"#include <Kokkos_Macros.hpp>"},
{"lineNum":"   49","line":"#if defined(KOKKOS_ENABLE_OPENMP)"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"#include <Kokkos_Core_fwd.hpp>"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"#include <cstddef>"},
{"lineNum":"   54","line":"#include <iosfwd>"},
{"lineNum":"   55","line":"#include <Kokkos_HostSpace.hpp>"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"#ifdef KOKKOS_ENABLE_HBWSPACE"},
{"lineNum":"   58","line":"#include <Kokkos_HBWSpace.hpp>"},
{"lineNum":"   59","line":"#endif"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"#include <Kokkos_ScratchSpace.hpp>"},
{"lineNum":"   62","line":"#include <Kokkos_Parallel.hpp>"},
{"lineNum":"   63","line":"#include <Kokkos_TaskScheduler.hpp>"},
{"lineNum":"   64","line":"#include <Kokkos_Layout.hpp>"},
{"lineNum":"   65","line":"#include <impl/Kokkos_Tags.hpp>"},
{"lineNum":"   66","line":"#include <impl/Kokkos_Profiling_Interface.hpp>"},
{"lineNum":"   67","line":"#include <impl/Kokkos_ExecSpaceInitializer.hpp>"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"#include <vector>"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"/*--------------------------------------------------------------------------*/"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"namespace Kokkos {"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"namespace Impl {"},
{"lineNum":"   76","line":"class OpenMPExec;"},
{"lineNum":"   77","line":"}"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"/// \\class OpenMP"},
{"lineNum":"   80","line":"/// \\brief Kokkos device for multicore processors in the host memory space."},
{"lineNum":"   81","line":"class OpenMP {"},
{"lineNum":"   82","line":" public:"},
{"lineNum":"   83","line":"  //! Tag this class as a kokkos execution space"},
{"lineNum":"   84","line":"  using execution_space = OpenMP;"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"  using memory_space ="},
{"lineNum":"   87","line":"#ifdef KOKKOS_ENABLE_HBWSPACE"},
{"lineNum":"   88","line":"      Experimental::HBWSpace;"},
{"lineNum":"   89","line":"#else"},
{"lineNum":"   90","line":"      HostSpace;"},
{"lineNum":"   91","line":"#endif"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"  //! This execution space preferred device_type"},
{"lineNum":"   94","line":"  using device_type          = Kokkos::Device<execution_space, memory_space>;"},
{"lineNum":"   95","line":"  using array_layout         = LayoutRight;"},
{"lineNum":"   96","line":"  using size_type            = memory_space::size_type;"},
{"lineNum":"   97","line":"  using scratch_memory_space = ScratchMemorySpace<OpenMP>;"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"  /// \\brief Print configuration information to the given output stream."},
{"lineNum":"  100","line":"  static void print_configuration(std::ostream&, const bool verbose = false);"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"  /// \\brief is the instance running a parallel algorithm"},
{"lineNum":"  103","line":"  inline static bool in_parallel(OpenMP const& = OpenMP()) noexcept;"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"  /// \\brief Wait until all dispatched functors complete on the given instance"},
{"lineNum":"  106","line":"  ///"},
{"lineNum":"  107","line":"  ///  This is a no-op on OpenMP"},
{"lineNum":"  108","line":"  static void impl_static_fence(OpenMP const& = OpenMP()) noexcept;"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"  void fence() const;"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"  /// \\brief Does the given instance return immediately after launching"},
{"lineNum":"  113","line":"  /// a parallel algorithm"},
{"lineNum":"  114","line":"  ///"},
{"lineNum":"  115","line":"  /// This always returns false on OpenMP"},
{"lineNum":"  116","line":"  inline static bool is_asynchronous(OpenMP const& = OpenMP()) noexcept;"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"  /// \\brief Partition the default instance into new instances without creating"},
{"lineNum":"  119","line":"  ///  new masters"},
{"lineNum":"  120","line":"  ///"},
{"lineNum":"  121","line":"  /// This is a no-op on OpenMP since the default instance cannot be partitioned"},
{"lineNum":"  122","line":"  /// without promoting other threads to \'master\'"},
{"lineNum":"  123","line":"  static std::vector<OpenMP> partition(...);"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"  /// Non-default instances should be ref-counted so that when the last"},
{"lineNum":"  126","line":"  /// is destroyed the instance resources are released"},
{"lineNum":"  127","line":"  ///"},
{"lineNum":"  128","line":"  /// This is a no-op on OpenMP since a non default instance cannot be created"},
{"lineNum":"  129","line":"  static OpenMP create_instance(...);"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"  /// \\brief Partition the default instance and call \'f\' on each new \'master\'"},
{"lineNum":"  132","line":"  /// thread"},
{"lineNum":"  133","line":"  ///"},
{"lineNum":"  134","line":"  /// Func is a functor with the following signiture"},
{"lineNum":"  135","line":"  ///   void( int partition_id, int num_partitions )"},
{"lineNum":"  136","line":"  template <typename F>"},
{"lineNum":"  137","line":"  static void partition_master(F const& f, int requested_num_partitions = 0,"},
{"lineNum":"  138","line":"                               int requested_partition_size = 0);"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"  // use UniqueToken"},
{"lineNum":"  141","line":"  static int concurrency();"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"  static void impl_initialize(int thread_count = -1);"},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"  /// \\brief is the default execution space initialized for current \'master\'"},
{"lineNum":"  146","line":"  /// thread"},
{"lineNum":"  147","line":"  static bool impl_is_initialized() noexcept;"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"  /// \\brief Free any resources being consumed by the default execution space"},
{"lineNum":"  150","line":"  static void impl_finalize();"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"  inline static int impl_thread_pool_size() noexcept;"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"  /** \\brief  The rank of the executing thread in this thread pool */"},
{"lineNum":"  155","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  156","line":"  static int impl_thread_pool_rank() noexcept;"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"  inline static int impl_thread_pool_size(int depth);"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"  // use UniqueToken"},
{"lineNum":"  161","line":"  inline static int impl_max_hardware_threads() noexcept;"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"  // use UniqueToken"},
{"lineNum":"  164","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  165","line":"  static int impl_hardware_thread_id() noexcept;"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"  static int impl_get_current_max_threads() noexcept;"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"  static constexpr const char* name() noexcept { return \"OpenMP\"; }"},
{"lineNum":"  170","line":"  uint32_t impl_instance_id() const noexcept { return 0; }"},
{"lineNum":"  171","line":"};"},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"namespace Tools {"},
{"lineNum":"  174","line":"namespace Experimental {"},
{"lineNum":"  175","line":"template <>"},
{"lineNum":"  176","line":"struct DeviceTypeTraits<OpenMP> {"},
{"lineNum":"  177","line":"  static constexpr DeviceType id = DeviceType::OpenMP;"},
{"lineNum":"  178","line":"};"},
{"lineNum":"  179","line":"}  // namespace Experimental"},
{"lineNum":"  180","line":"}  // namespace Tools"},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"namespace Impl {"},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"class OpenMPSpaceInitializer : public ExecSpaceInitializerBase {"},
{"lineNum":"  185","line":" public:"},
{"lineNum":"  186","line":"  OpenMPSpaceInitializer()  = default;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  187","line":"  ~OpenMPSpaceInitializer() = default;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  188","line":"  void initialize(const InitArguments& args) final;"},
{"lineNum":"  189","line":"  void finalize(const bool) final;"},
{"lineNum":"  190","line":"  void fence() final;"},
{"lineNum":"  191","line":"  void print_configuration(std::ostream& msg, const bool detail) final;"},
{"lineNum":"  192","line":"};"},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"}  // namespace Impl"},
{"lineNum":"  195","line":"}  // namespace Kokkos"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"/*--------------------------------------------------------------------------*/"},
{"lineNum":"  198","line":"/*--------------------------------------------------------------------------*/"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"namespace Kokkos {"},
{"lineNum":"  201","line":"namespace Impl {"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"template <>"},
{"lineNum":"  204","line":"struct MemorySpaceAccess<Kokkos::OpenMP::memory_space,"},
{"lineNum":"  205","line":"                         Kokkos::OpenMP::scratch_memory_space> {"},
{"lineNum":"  206","line":"  enum : bool { assignable = false };"},
{"lineNum":"  207","line":"  enum : bool { accessible = true };"},
{"lineNum":"  208","line":"  enum : bool { deepcopy = false };"},
{"lineNum":"  209","line":"};"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"}  // namespace Impl"},
{"lineNum":"  212","line":"}  // namespace Kokkos"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"/*--------------------------------------------------------------------------*/"},
{"lineNum":"  215","line":"/*--------------------------------------------------------------------------*/"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"#include <OpenMP/Kokkos_OpenMP_Exec.hpp>"},
{"lineNum":"  218","line":"#include <OpenMP/Kokkos_OpenMP_Team.hpp>"},
{"lineNum":"  219","line":"#include <OpenMP/Kokkos_OpenMP_Parallel.hpp>"},
{"lineNum":"  220","line":"#include <OpenMP/Kokkos_OpenMP_Task.hpp>"},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"#include <KokkosExp_MDRangePolicy.hpp>"},
{"lineNum":"  223","line":"/*--------------------------------------------------------------------------*/"},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"#endif /* #if defined( KOKKOS_ENABLE_OPENMP ) && defined( _OPENMP ) */"},
{"lineNum":"  226","line":"#endif /* #ifndef KOKKOS_OPENMP_HPP */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 2, "covered" : 0,};
var merged_data = [];
