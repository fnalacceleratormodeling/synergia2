var data = {lines:[
{"lineNum":"    1","line":"#ifndef FF_DRIFT_H"},
{"lineNum":"    2","line":"#define FF_DRIFT_H"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#include \"synergia/libFF/ff_algorithm.h\""},
{"lineNum":"    5","line":"#include \"synergia/utils/simple_timer.h\""},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"namespace drift_impl"},
{"lineNum":"    8","line":"{"},
{"lineNum":"    9","line":"    template<class BP>"},
{"lineNum":"   10","line":"    struct PropDrift"},
{"lineNum":"   11","line":"    {"},
{"lineNum":"   12","line":"        typename BP::parts_t p;"},
{"lineNum":"   13","line":"        typename BP::const_masks_t masks;"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"        double len, ref_p, mass, ref_t;"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   18","line":"        void operator()(const int i) const"},
{"lineNum":"   19","line":"        {"},
{"lineNum":"   20","line":"            if (masks(i))"},
{"lineNum":"   21","line":"                FF_algorithm::drift_unit("},
{"lineNum":"   22","line":"                        p(i, 0), p(i, 1), p(i, 2),"},
{"lineNum":"   23","line":"                        p(i, 3), p(i, 4), p(i, 5),"},
{"lineNum":"   24","line":"                        len, ref_p, mass, ref_t);"},
{"lineNum":"   25","line":"        }"},
{"lineNum":"   26","line":"    };"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"    template<class BP>"},
{"lineNum":"   29","line":"    struct PropDriftSimd","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   30","line":"    {"},
{"lineNum":"   31","line":"        using gsv_t = typename BP::gsv_t;"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"        typename BP::parts_t p;"},
{"lineNum":"   34","line":"        typename BP::const_masks_t masks;"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"        double len, ref_p, mass, ref_t;"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   39","line":"        void operator()(const int idx) const"},
{"lineNum":"   40","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   41","line":"            int i = idx * gsv_t::size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"            int m = 0;"},
{"lineNum":"   44","line":"            for(int x=i; x<i+gsv_t::size(); ++x) m |= masks(x);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"            if (m)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   47","line":"            {"},
{"lineNum":"   48","line":"                gsv_t p0(&p(i, 0));"},
{"lineNum":"   49","line":"                gsv_t p1(&p(i, 1));"},
{"lineNum":"   50","line":"                gsv_t p2(&p(i, 2));"},
{"lineNum":"   51","line":"                gsv_t p3(&p(i, 3));"},
{"lineNum":"   52","line":"                gsv_t p4(&p(i, 4));"},
{"lineNum":"   53","line":"                gsv_t p5(&p(i, 5));"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"                FF_algorithm::drift_unit(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   56","line":"                        p0, p1, p2, p3, p4, p5,"},
{"lineNum":"   57","line":"                        len, ref_p, mass, ref_t);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"                p0.store(&p(i, 0));"},
{"lineNum":"   60","line":"                p2.store(&p(i, 2));"},
{"lineNum":"   61","line":"                p4.store(&p(i, 4));"},
{"lineNum":"   62","line":"            }"},
{"lineNum":"   63","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   64","line":"    };"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"    inline double get_reference_cdt(double length, Reference_particle & ref)"},
{"lineNum":"   68","line":"    {"},
{"lineNum":"   69","line":"        double x(ref.get_state()[Bunch::x]);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   70","line":"        double xp(ref.get_state()[Bunch::xp]);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   71","line":"        double y(ref.get_state()[Bunch::y]);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   72","line":"        double yp(ref.get_state()[Bunch::yp]);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   73","line":"        double cdt(0.0);"},
{"lineNum":"   74","line":"        double dpop(ref.get_state()[Bunch::dpop]);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   75","line":"        double ref_p = ref.get_momentum();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   76","line":"        double m = ref.get_mass();","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"        FF_algorithm::drift_unit(x, xp, y, yp, cdt, dpop, length, ref_p, m, 0.0);"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"        // propagate and update the bunch design reference particle state"},
{"lineNum":"   81","line":"        ref.set_state(x, xp, y, yp, cdt, dpop);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"        return cdt;"},
{"lineNum":"   84","line":"    }"},
{"lineNum":"   85","line":"}"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"namespace FF_drift"},
{"lineNum":"   89","line":"{"},
{"lineNum":"   90","line":"    template<class BunchT>"},
{"lineNum":"   91","line":"    inline void apply(Lattice_element_slice const& slice, BunchT & bunch)"},
{"lineNum":"   92","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   93","line":"        using namespace drift_impl;"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"        scoped_simple_timer timer(\"libFF_drift\");"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"        const double  length = slice.get_right() - slice.get_left();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   98","line":"        const double    mass = bunch.get_mass();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"        // zero-length drift does nothing"},
{"lineNum":"  101","line":"        if (close_to_zero(length))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  102","line":"        {"},
{"lineNum":"  103","line":"            bunch.get_design_reference_particle().set_state_cdt(0.0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  104","line":"            return;"},
{"lineNum":"  105","line":"        }"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"        Reference_particle       & ref_l = bunch.get_design_reference_particle();"},
{"lineNum":"  108","line":"        Reference_particle const & ref_b = bunch.get_reference_particle();"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"        const double ref_p   = ref_b.get_momentum() * (1.0 + ref_b.get_state()[Bunch::dpop]);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  111","line":"        const double ref_cdt = get_reference_cdt(length, ref_l);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"        // apply method"},
{"lineNum":"  114","line":"        auto apply_impl = [&](ParticleGroup pg) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  115","line":"            auto bp = bunch.get_bunch_particles(pg);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  116","line":"            if (!bp.num_valid()) return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"            using namespace Kokkos;"},
{"lineNum":"  119","line":"            using bp_t = typename BunchT::bp_t;"},
{"lineNum":"  120","line":"            using exec = typename BunchT::exec_space;"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"#if LIBFF_USE_GSV"},
{"lineNum":"  123","line":"            auto range = RangePolicy<exec>(0, bp.size_in_gsv());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  124","line":"            PropDriftSimd<bp_t> drift{","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  125","line":"                bp.parts, bp.masks, length, ref_p, mass, ref_cdt};","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  126","line":"            parallel_for(range, drift);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  127","line":"#else"},
{"lineNum":"  128","line":"            auto range = RangePolicy<exec>(0, bp.size());"},
{"lineNum":"  129","line":"            PropDrift<bp_t> drift{"},
{"lineNum":"  130","line":"                bp.parts, bp.masks, length, ref_p, mass, ref_cdt};"},
{"lineNum":"  131","line":"            parallel_for(range, drift);"},
{"lineNum":"  132","line":"#endif"},
{"lineNum":"  133","line":"        };","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"        // apply on bunch"},
{"lineNum":"  136","line":"        apply_impl(ParticleGroup::regular);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  137","line":"        apply_impl(ParticleGroup::spectator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"        // trajectory"},
{"lineNum":"  140","line":"        bunch.get_reference_particle().increment_trajectory(length);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"        Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  143","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  144","line":"}"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"#endif // FF_DRIFT_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 36, "covered" : 0,};
var merged_data = [];
