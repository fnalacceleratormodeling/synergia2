var data = {lines:[
{"lineNum":"    1","line":"#include \"synergia/collective/deposit.h\""},
{"lineNum":"    2","line":"#include \"synergia/foundation/physical_constants.h\""},
{"lineNum":"    3","line":"#include \"synergia/bunch/core_diagnostics.h\""},
{"lineNum":"    4","line":"#include \"synergia/utils/distributed_fft3d.h\""},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"#include <Kokkos_ScatterView.hpp>"},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"namespace deposit_impl"},
{"lineNum":"   10","line":"{"},
{"lineNum":"   11","line":"    using scatter_t = Kokkos::Experimental::ScatterView<"},
{"lineNum":"   12","line":"        double*, Kokkos::LayoutLeft>;"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   15","line":"    int fast_int_floor_kokkos(const double x)"},
{"lineNum":"   16","line":"    {"},
{"lineNum":"   17","line":"        int ix = static_cast<int>(x);","class":"lineNoCov","hits":"0","possible_hits":"24",},
{"lineNum":"   18","line":"        return x > 0.0 ? ix : ((x - ix == 0) ? ix : ix - 1);","class":"lineNoCov","hits":"0","possible_hits":"24",},
{"lineNum":"   19","line":"    }"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   22","line":"    void get_leftmost_indices_offset("},
{"lineNum":"   23","line":"            double pos, double left, double inv_cell_size,"},
{"lineNum":"   24","line":"            int & idx, double & off )"},
{"lineNum":"   25","line":"    {"},
{"lineNum":"   26","line":"        double scaled_location = (pos - left) * inv_cell_size - 0.5;","class":"lineNoCov","hits":"0","possible_hits":"25",},
{"lineNum":"   27","line":"        idx = fast_int_floor_kokkos(scaled_location);"},
{"lineNum":"   28","line":"        off = scaled_location - idx;","class":"lineNoCov","hits":"0","possible_hits":"24",},
{"lineNum":"   29","line":"    }"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   32","line":"    bool ingrid(int i, int g)"},
{"lineNum":"   33","line":"    {"},
{"lineNum":"   34","line":"        return i>=0 && i<g;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   35","line":"    }"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   38","line":"    bool ingrid(int ix, int iy, int iz, int gx, int gy, int gz)"},
{"lineNum":"   39","line":"    {"},
{"lineNum":"   40","line":"        //return ix>=0 && ix<gx && iy>=0 && iy<gy && iz>=0 && iz<gz;"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"        // exclude edges"},
{"lineNum":"   43","line":"        return ix>0 && ix<gx-1 && iy>0 && iy<gy-1 && iz>0 && iz<gz-1;","class":"lineNoCov","hits":"0","possible_hits":"36",},
{"lineNum":"   44","line":"    }"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"    struct rho_reducer","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   47","line":"    {"},
{"lineNum":"   48","line":"        typedef double value_type[];"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"        const int value_count;"},
{"lineNum":"   51","line":"        ConstParticles p;"},
{"lineNum":"   52","line":"        karray2d_dev bin;"},
{"lineNum":"   53","line":"        int gx, gy, gz;"},
{"lineNum":"   54","line":"        double ihx, ihy, ihz;"},
{"lineNum":"   55","line":"        double lx, ly, lz;"},
{"lineNum":"   56","line":"        double w0;"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"        rho_reducer("},
{"lineNum":"   59","line":"                ConstParticles const & p,"},
{"lineNum":"   60","line":"                karray2d_dev   const & bin,"},
{"lineNum":"   61","line":"                std::array<int,    3> const & g,"},
{"lineNum":"   62","line":"                std::array<double, 3> const & h,"},
{"lineNum":"   63","line":"                std::array<double, 3> const & l,"},
{"lineNum":"   64","line":"                double w0 )"},
{"lineNum":"   65","line":"            : value_count(g[0]*g[1]+g[2])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   66","line":"            , p(p), bin(bin)"},
{"lineNum":"   67","line":"            , gx(g[0]), gy(g[1]), gz(g[2])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   68","line":"            , ihx(1.0/h[0]), ihy(1.0/h[1]), ihz(1.0/h[2])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   69","line":"            , lx(l[0]), ly(l[1]), lz(l[2])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   70","line":"            , w0(w0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   71","line":"        { }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   74","line":"        void operator() (const int i, value_type sum) const"},
{"lineNum":"   75","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   76","line":"            int ix, iy, iz;"},
{"lineNum":"   77","line":"            double offx, offy, offz;"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"            get_leftmost_indices_offset(p(i, 0), lx, ihx, ix, offx);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   80","line":"            get_leftmost_indices_offset(p(i, 2), ly, ihy, iy, offy);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   81","line":"            get_leftmost_indices_offset(p(i, 4), lz, ihz, iz, offz);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"            bin(i, 0) = ix;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   84","line":"            bin(i, 1) = offx;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   85","line":"            bin(i, 2) = iy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   86","line":"            bin(i, 3) = offy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   87","line":"            bin(i, 4) = iz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   88","line":"            bin(i, 5) = offz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"            int cellz1 = iz;"},
{"lineNum":"   91","line":"            int cellz2 = cellz1 + 1;"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"            if (ingrid(cellz1, gz)) sum[gx*gy + cellz1] += (1.0 - offz) * ihz;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   94","line":"            if (ingrid(cellz2, gz)) sum[gx*gy + cellz2] += offz * ihz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"            if( ix<0 || ix>gx-1 || iy<0 || iy>gy-1 ) return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"            int cellx1, cellx2, celly1, celly2;"},
{"lineNum":"   99","line":"            cellx1 = ix;"},
{"lineNum":"  100","line":"            cellx2 = ix + 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  101","line":"            celly1 = iy;"},
{"lineNum":"  102","line":"            celly2 = iy + 1;"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"            double aoffx, aoffy;"},
{"lineNum":"  105","line":"            aoffx = 1. - offx;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  106","line":"            aoffy = 1. - offy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"            sum[cellx1*gy + celly1] += w0 * aoffx * aoffy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  109","line":"            sum[cellx1*gx + celly2] += w0 * aoffx *  offy;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  110","line":"            sum[cellx2*gy + celly1] += w0 *  offx * aoffy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  111","line":"            sum[cellx2*gx + celly2] += w0 *  offx *  offy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  112","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  113","line":"    };"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"    // move the rho data from double array to complex array"},
{"lineNum":"  116","line":"    struct rho_mover","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  117","line":"    {"},
{"lineNum":"  118","line":"        karray1d_dev r0;"},
{"lineNum":"  119","line":"        karray1d_dev r1;"},
{"lineNum":"  120","line":"        int gx, gy;"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"        rho_mover("},
{"lineNum":"  123","line":"                karray1d_dev const & rho_double,"},
{"lineNum":"  124","line":"                karray1d_dev const & rho_complex,"},
{"lineNum":"  125","line":"                std::array<int, 3> const & g )"},
{"lineNum":"  126","line":"            : r0(rho_double), r1(rho_complex)"},
{"lineNum":"  127","line":"            , gx(g[0]), gy(g[1])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  128","line":"        { }"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  131","line":"        void operator() (const int i) const"},
{"lineNum":"  132","line":"        {"},
{"lineNum":"  133","line":"            if (i < gx*gy)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  134","line":"            {"},
{"lineNum":"  135","line":"                r1(i*2) = r0(i);"},
{"lineNum":"  136","line":"            }"},
{"lineNum":"  137","line":"            else"},
{"lineNum":"  138","line":"            {"},
{"lineNum":"  139","line":"                int z = i - gx*gy;"},
{"lineNum":"  140","line":"                r1(gx*gy*2 + z) = r0(gx*gy + z);"},
{"lineNum":"  141","line":"            }"},
{"lineNum":"  142","line":"        }"},
{"lineNum":"  143","line":"    };"},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"    // use atomic add"},
{"lineNum":"  146","line":"    struct atomic_rho_reducer","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  147","line":"    {"},
{"lineNum":"  148","line":"        ConstParticles p;"},
{"lineNum":"  149","line":"        karray1d_atomic_dev rho;"},
{"lineNum":"  150","line":"        karray2d_dev bin;"},
{"lineNum":"  151","line":"        int gx, gy, gz;"},
{"lineNum":"  152","line":"        double ihx, ihy, ihz;"},
{"lineNum":"  153","line":"        double lx, ly, lz;"},
{"lineNum":"  154","line":"        double w0;"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"        atomic_rho_reducer("},
{"lineNum":"  157","line":"                ConstParticles          const & p,"},
{"lineNum":"  158","line":"                karray1d_atomic_dev     const & rho,"},
{"lineNum":"  159","line":"                karray2d_dev            const & bin,"},
{"lineNum":"  160","line":"                std::array<int,    3>   const & g,"},
{"lineNum":"  161","line":"                std::array<double, 3>   const & h,"},
{"lineNum":"  162","line":"                std::array<double, 3>   const & l,"},
{"lineNum":"  163","line":"                double w0 )"},
{"lineNum":"  164","line":"            : p(p), rho(rho), bin(bin)"},
{"lineNum":"  165","line":"            , gx(g[0]), gy(g[1]), gz(g[2])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  166","line":"            , ihx(1.0/h[0]), ihy(1.0/h[1]), ihz(1.0/h[2])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  167","line":"            , lx(l[0]), ly(l[1]), lz(l[2])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  168","line":"            , w0(w0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  169","line":"        { }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  172","line":"        void operator() (const int i) const"},
{"lineNum":"  173","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  174","line":"            int ix, iy, iz;"},
{"lineNum":"  175","line":"            double offx, offy, offz;"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"            get_leftmost_indices_offset(p(i, 0), lx, ihx, ix, offx);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  178","line":"            get_leftmost_indices_offset(p(i, 2), ly, ihy, iy, offy);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  179","line":"            get_leftmost_indices_offset(p(i, 4), lz, ihz, iz, offz);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"            bin(i, 0) = ix;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  182","line":"            bin(i, 1) = offx;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  183","line":"            bin(i, 2) = iy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  184","line":"            bin(i, 3) = offy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  185","line":"            bin(i, 4) = iz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  186","line":"            bin(i, 5) = offz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"            int cellz1 = iz;"},
{"lineNum":"  189","line":"            int cellz2 = cellz1 + 1;"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"            if( cellz1>=0 && cellz1<gz ) rho(gx*gy*2 + cellz1) += (1.0 - offz) * ihz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  192","line":"            if( cellz2>=0 && cellz2<gz ) rho(gx*gy*2 + cellz2) += offz * ihz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"            if( ix<0 || ix>gx-1 || iy<0 || iy>gy-1 ) return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"            int cellx1, cellx2, celly1, celly2;"},
{"lineNum":"  197","line":"            cellx1 = ix;"},
{"lineNum":"  198","line":"            cellx2 = ix + 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  199","line":"            celly1 = iy;"},
{"lineNum":"  200","line":"            celly2 = iy + 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"            double aoffx, aoffy;"},
{"lineNum":"  203","line":"            aoffx = 1. - offx;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  204","line":"            aoffy = 1. - offy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"            rho( (cellx1*gy + celly1)*2 ) += w0 * aoffx * aoffy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  207","line":"            rho( (cellx1*gx + celly2)*2 ) += w0 * aoffx *  offy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  208","line":"            rho( (cellx2*gy + celly1)*2 ) += w0 *  offx * aoffy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  209","line":"            rho( (cellx2*gx + celly2)*2 ) += w0 *  offx *  offy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  210","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  211","line":"    };"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"    struct rho_zeroer","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  214","line":"    {"},
{"lineNum":"  215","line":"        karray1d_dev rho;"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  218","line":"        void operator() (const int i) const"},
{"lineNum":"  219","line":"        { rho(i) = 0.0; }","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"  220","line":"    };"},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"    // use scatter view"},
{"lineNum":"  223","line":"    struct sv_rho_reducer","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  224","line":"    {"},
{"lineNum":"  225","line":"        ConstParticles p;"},
{"lineNum":"  226","line":"        ConstParticleMasks masks;"},
{"lineNum":"  227","line":""},
{"lineNum":"  228","line":"        Kokkos::Experimental::ScatterView<double*, Kokkos::LayoutLeft> scatter;"},
{"lineNum":"  229","line":"        karray2d_dev bin;"},
{"lineNum":"  230","line":"        int gx, gy, gz;"},
{"lineNum":"  231","line":"        double ihx, ihy, ihz;"},
{"lineNum":"  232","line":"        double lx, ly, lz;"},
{"lineNum":"  233","line":"        double w0;"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"        sv_rho_reducer("},
{"lineNum":"  236","line":"                ConstParticles          const & p,"},
{"lineNum":"  237","line":"                ConstParticleMasks      const & masks,"},
{"lineNum":"  238","line":"                Kokkos::Experimental::ScatterView<double*, Kokkos::LayoutLeft> const& scatter,"},
{"lineNum":"  239","line":"                karray2d_dev            const & bin,"},
{"lineNum":"  240","line":"                std::array<int,    3>   const & g,"},
{"lineNum":"  241","line":"                std::array<double, 3>   const & h,"},
{"lineNum":"  242","line":"                std::array<double, 3>   const & l,"},
{"lineNum":"  243","line":"                double w0 )"},
{"lineNum":"  244","line":"            : p(p), masks(masks), scatter(scatter), bin(bin)"},
{"lineNum":"  245","line":"            , gx(g[0]), gy(g[1]), gz(g[2])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  246","line":"            , ihx(1.0/h[0]), ihy(1.0/h[1]), ihz(1.0/h[2])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  247","line":"            , lx(l[0]), ly(l[1]), lz(l[2])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  248","line":"            , w0(w0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  249","line":"        { }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  250","line":""},
{"lineNum":"  251","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  252","line":"        void operator() (const int i) const"},
{"lineNum":"  253","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  254","line":"            if (masks(i))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  255","line":"            {"},
{"lineNum":"  256","line":"                auto access = scatter.access();"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"                int ix, iy, iz;"},
{"lineNum":"  259","line":"                double offx, offy, offz;"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"                get_leftmost_indices_offset(p(i, 0), lx, ihx, ix, offx);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  262","line":"                get_leftmost_indices_offset(p(i, 2), ly, ihy, iy, offy);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  263","line":"                get_leftmost_indices_offset(p(i, 4), lz, ihz, iz, offz);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"                bin(i, 0) = ix;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  266","line":"                bin(i, 1) = offx;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  267","line":"                bin(i, 2) = iy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  268","line":"                bin(i, 3) = offy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  269","line":"                bin(i, 4) = iz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  270","line":"                bin(i, 5) = offz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"                int cellz1 = iz;"},
{"lineNum":"  273","line":"                int cellz2 = cellz1 + 1;"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"                if( cellz1>=0 && cellz1<gz ) access(gx*gy*2 + cellz1) += (1.0 - offz) * ihz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  276","line":"                if( cellz2>=0 && cellz2<gz ) access(gx*gy*2 + cellz2) += offz * ihz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  277","line":""},
{"lineNum":"  278","line":"                if( ix<0 || ix>gx-1 || iy<0 || iy>gy-1 ) return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  279","line":""},
{"lineNum":"  280","line":"                int cellx1, cellx2, celly1, celly2;"},
{"lineNum":"  281","line":"                cellx1 = ix;"},
{"lineNum":"  282","line":"                cellx2 = ix + 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  283","line":"                celly1 = iy;"},
{"lineNum":"  284","line":"                celly2 = iy + 1;"},
{"lineNum":"  285","line":""},
{"lineNum":"  286","line":"                double aoffx, aoffy;"},
{"lineNum":"  287","line":"                aoffx = 1. - offx;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  288","line":"                aoffy = 1. - offy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"                access( (cellx1*gy + celly1)*2 ) += w0 * aoffx * aoffy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  291","line":"                access( (cellx1*gx + celly2)*2 ) += w0 * aoffx *  offy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  292","line":"                access( (cellx2*gy + celly1)*2 ) += w0 *  offx * aoffy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  293","line":"                access( (cellx2*gx + celly2)*2 ) += w0 *  offx *  offy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  294","line":"            }"},
{"lineNum":"  295","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  296","line":"    };"},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":"    // use scatter view"},
{"lineNum":"  299","line":"    struct sv_zyx_rho_reducer_non_periodic","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  300","line":"    {"},
{"lineNum":"  301","line":"        ConstParticles p;"},
{"lineNum":"  302","line":"        ConstParticleMasks masks;"},
{"lineNum":"  303","line":""},
{"lineNum":"  304","line":"        scatter_t scatter;"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"        int gx, gy, gz; // original grid size"},
{"lineNum":"  307","line":"        int dx, dy, dz; // dimensions of the grid"},
{"lineNum":"  308","line":"        double ihx, ihy, ihz;"},
{"lineNum":"  309","line":"        double lx, ly, lz;"},
{"lineNum":"  310","line":"        double w0;"},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":"        sv_zyx_rho_reducer_non_periodic("},
{"lineNum":"  313","line":"                ConstParticles        const& p,"},
{"lineNum":"  314","line":"                ConstParticleMasks    const& masks,"},
{"lineNum":"  315","line":"                scatter_t             const& scatter,"},
{"lineNum":"  316","line":"                std::array<int,    3> const& g,"},
{"lineNum":"  317","line":"                std::array<int,    3> const& d,"},
{"lineNum":"  318","line":"                std::array<double, 3> const& h,"},
{"lineNum":"  319","line":"                std::array<double, 3> const& l,"},
{"lineNum":"  320","line":"                double w0 )"},
{"lineNum":"  321","line":"            : p(p), masks(masks), scatter(scatter)"},
{"lineNum":"  322","line":"            , gx(g[0]), gy(g[1]), gz(g[2])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  323","line":"            , dx(d[0]), dy(d[1]), dz(d[2])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  324","line":"            , ihx(1.0/h[0]), ihy(1.0/h[1]), ihz(1.0/h[2])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  325","line":"            , lx(l[0]), ly(l[1]), lz(l[2])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  326","line":"            , w0(w0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  327","line":"        { }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  330","line":"        void operator() (const int i) const"},
{"lineNum":"  331","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  332","line":"            if (masks(i))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  333","line":"            {"},
{"lineNum":"  334","line":"                auto access = scatter.access();"},
{"lineNum":"  335","line":""},
{"lineNum":"  336","line":"                int ix, iy, iz;"},
{"lineNum":"  337","line":"                double ox, oy, oz;"},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"                get_leftmost_indices_offset(p(i, 0), lx, ihx, ix, ox);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  340","line":"                get_leftmost_indices_offset(p(i, 2), ly, ihy, iy, oy);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  341","line":"                get_leftmost_indices_offset(p(i, 4), lz, ihz, iz, oz);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  342","line":""},
{"lineNum":"  343","line":"                double aox = 1.0 - ox;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  344","line":"                double aoy = 1.0 - oy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  345","line":"                double aoz = 1.0 - oz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"                int base = iz * dx * dy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"                if (ingrid(ix, iy, iz, gx, gy, gz))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  350","line":"                    access(base + iy*dx + ix) += w0 * aox * aoy * aoz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"                if (ingrid(ix+1, iy, iz, gx, gy, gz))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  353","line":"                    access(base + iy*dx + ix+1) += w0 * ox * aoy * aoz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"                if (ingrid(ix, iy+1, iz, gx, gy, gz))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  356","line":"                    access(base + (iy+1)*dx + ix) += w0 * aox * oy * aoz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"                if (ingrid(ix+1, iy+1, iz, gx, gy, gz))"},
{"lineNum":"  359","line":"                    access(base + (iy+1)*dx + ix+1) += w0 * ox * oy * aoz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  360","line":""},
{"lineNum":"  361","line":"                base = (iz+1) * dx * dy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"                if (ingrid(ix, iy, iz+1, gx, gy, gz))"},
{"lineNum":"  364","line":"                    access(base + iy*dx + ix) += w0 * aox * aoy * oz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":"                if (ingrid(ix+1, iy, iz+1, gx, gy, gz))"},
{"lineNum":"  367","line":"                    access(base + iy*dx + ix+1) += w0 * ox * aoy * oz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  368","line":""},
{"lineNum":"  369","line":"                if (ingrid(ix, iy+1, iz+1, gx, gy, gz))"},
{"lineNum":"  370","line":"                    access(base + (iy+1)*dx + ix) += w0 * aox * oy * oz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  371","line":""},
{"lineNum":"  372","line":"                if (ingrid(ix+1, iy+1, iz+1, gx, gy, gz))"},
{"lineNum":"  373","line":"                    access(base + (iy+1)*dx + ix+1) += w0 * ox * oy * oz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  374","line":"            }"},
{"lineNum":"  375","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  376","line":"    };"},
{"lineNum":"  377","line":""},
{"lineNum":"  378","line":"    // use scatter view"},
{"lineNum":"  379","line":"    struct sv_xyz_rho_reducer_non_periodic","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  380","line":"    {"},
{"lineNum":"  381","line":"        ConstParticles p;"},
{"lineNum":"  382","line":"        ConstParticleMasks masks;"},
{"lineNum":"  383","line":""},
{"lineNum":"  384","line":"        scatter_t scatter;"},
{"lineNum":"  385","line":""},
{"lineNum":"  386","line":"        int gx, gy, gz; // original grid size"},
{"lineNum":"  387","line":"        int dx, dy, dz; // dimensions of the grid"},
{"lineNum":"  388","line":"        double ihx, ihy, ihz;"},
{"lineNum":"  389","line":"        double lx, ly, lz;"},
{"lineNum":"  390","line":"        double w0;"},
{"lineNum":"  391","line":""},
{"lineNum":"  392","line":"        sv_xyz_rho_reducer_non_periodic("},
{"lineNum":"  393","line":"                ConstParticles        const& p,"},
{"lineNum":"  394","line":"                ConstParticleMasks    const& masks,"},
{"lineNum":"  395","line":"                scatter_t             const& scatter,"},
{"lineNum":"  396","line":"                std::array<int,    3> const& g,"},
{"lineNum":"  397","line":"                std::array<int,    3> const& d,"},
{"lineNum":"  398","line":"                std::array<double, 3> const& h,"},
{"lineNum":"  399","line":"                std::array<double, 3> const& l,"},
{"lineNum":"  400","line":"                double w0 )"},
{"lineNum":"  401","line":"            : p(p), masks(masks), scatter(scatter)"},
{"lineNum":"  402","line":"            , gx(g[0]), gy(g[1]), gz(g[2])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  403","line":"            , dx(d[0]), dy(d[1]), dz(d[2])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  404","line":"            , ihx(1.0/h[0]), ihy(1.0/h[1]), ihz(1.0/h[2])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  405","line":"            , lx(l[0]), ly(l[1]), lz(l[2])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  406","line":"            , w0(w0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  407","line":"        { }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  408","line":""},
{"lineNum":"  409","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  410","line":"        void operator() (const int i) const"},
{"lineNum":"  411","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  412","line":"            if (masks(i))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  413","line":"            {"},
{"lineNum":"  414","line":"                auto access = scatter.access();"},
{"lineNum":"  415","line":""},
{"lineNum":"  416","line":"                int ix, iy, iz;"},
{"lineNum":"  417","line":"                double ox, oy, oz;"},
{"lineNum":"  418","line":""},
{"lineNum":"  419","line":"                get_leftmost_indices_offset(p(i, 0), lx, ihx, ix, ox);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  420","line":"                get_leftmost_indices_offset(p(i, 2), ly, ihy, iy, oy);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  421","line":"                get_leftmost_indices_offset(p(i, 4), lz, ihz, iz, oz);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  422","line":""},
{"lineNum":"  423","line":"                double aox = 1.0 - ox;"},
{"lineNum":"  424","line":"                double aoy = 1.0 - oy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  425","line":"                double aoz = 1.0 - oz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  426","line":""},
{"lineNum":"  427","line":"                int base = ix * dy * dz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  428","line":""},
{"lineNum":"  429","line":"                if (ingrid(ix, iy, iz, gx, gy, gz))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  430","line":"                    access(base + iy*dz + iz) += w0 * aox * aoy * aoz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  431","line":""},
{"lineNum":"  432","line":"                if (ingrid(ix, iy, iz+1, gx, gy, gz))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  433","line":"                    access(base + iy*dz + iz+1) += w0 * aox * aoy * oz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  434","line":""},
{"lineNum":"  435","line":"                if (ingrid(ix, iy+1, iz, gx, gy, gz))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  436","line":"                    access(base + (iy+1)*dz + iz) += w0 * aox * oy * aoz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  437","line":""},
{"lineNum":"  438","line":"                if (ingrid(ix, iy+1, iz+1, gx, gy, gz))"},
{"lineNum":"  439","line":"                    access(base + (iy+1)*dz + iz+1) += w0 * aox * oy * oz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"                base = (ix+1) * dy * dz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  442","line":""},
{"lineNum":"  443","line":"                if (ingrid(ix+1, iy, iz, gx, gy, gz))"},
{"lineNum":"  444","line":"                    access(base + iy*dz + iz) += w0 * ox * aoy * aoz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  445","line":""},
{"lineNum":"  446","line":"                if (ingrid(ix+1, iy, iz+1, gx, gy, gz))"},
{"lineNum":"  447","line":"                    access(base + iy*dz + iz+1) += w0 * ox * aoy * oz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  448","line":""},
{"lineNum":"  449","line":"                if (ingrid(ix+1, iy+1, iz, gx, gy, gz))"},
{"lineNum":"  450","line":"                    access(base + (iy+1)*dz + iz) += w0 * ox * oy * aoz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  451","line":""},
{"lineNum":"  452","line":"                if (ingrid(ix+1, iy+1, iz+1, gx, gy, gz))"},
{"lineNum":"  453","line":"                    access(base + (iy+1)*dz + iz+1) += w0 * ox * oy * oz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  454","line":"            }"},
{"lineNum":"  455","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  456","line":"    };"},
{"lineNum":"  457","line":""},
{"lineNum":"  458","line":"}"},
{"lineNum":"  459","line":""},
{"lineNum":"  460","line":""},
{"lineNum":"  461","line":"karray1d_dev deposit_charge_rectangular_2d_kokkos("},
{"lineNum":"  462","line":"        Rectangular_grid_domain & domain,"},
{"lineNum":"  463","line":"        karray2d_dev & particle_bin,"},
{"lineNum":"  464","line":"        Bunch const & bunch )"},
{"lineNum":"  465","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  466","line":"    using deposit_impl::rho_reducer;"},
{"lineNum":"  467","line":"    using deposit_impl::rho_mover;"},
{"lineNum":"  468","line":""},
{"lineNum":"  469","line":"    auto g = domain.get_grid_shape();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  470","line":"    auto h = domain.get_cell_size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  471","line":"    auto l = domain.get_left();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  472","line":""},
{"lineNum":"  473","line":"    auto parts = bunch.get_local_particles();"},
{"lineNum":"  474","line":"    int nparts = bunch.get_local_num();"},
{"lineNum":"  475","line":""},
{"lineNum":"  476","line":"    double weight0 = (bunch.get_real_num() / bunch.get_total_num())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  477","line":"            * bunch.get_particle_charge() * pconstants::e","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  478","line":"            / (h[0] * h[1]); // * h[2]);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  479","line":""},
{"lineNum":"  480","line":"    karray1d_dev rho_dbl(\"rho\", g[0]*g[1] + g[2]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  481","line":"    rho_reducer rr(parts, particle_bin, g, h, l, weight0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  482","line":"    Kokkos::parallel_reduce(nparts, rr, rho_dbl);"},
{"lineNum":"  483","line":""},
{"lineNum":"  484","line":"    karray1d_dev rho_cplx(\"rho_cplx\", g[0]*g[1]*2 + g[2]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  485","line":"    rho_mover rm(rho_dbl, rho_cplx, g);"},
{"lineNum":"  486","line":"    Kokkos::parallel_for(g[0]*g[1] + g[2], rm);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  487","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  488","line":""},
{"lineNum":"  489","line":"    return rho_cplx;"},
{"lineNum":"  490","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"karray1d_dev deposit_charge_rectangular_2d_kokkos_atomic("},
{"lineNum":"  493","line":"        Rectangular_grid_domain & domain,"},
{"lineNum":"  494","line":"        karray2d_dev & particle_bin,"},
{"lineNum":"  495","line":"        Bunch const & bunch )"},
{"lineNum":"  496","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  497","line":"    using deposit_impl::atomic_rho_reducer;"},
{"lineNum":"  498","line":""},
{"lineNum":"  499","line":"    auto g = domain.get_grid_shape();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  500","line":"    auto h = domain.get_cell_size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  501","line":"    auto l = domain.get_left();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  502","line":""},
{"lineNum":"  503","line":"    auto parts = bunch.get_local_particles();"},
{"lineNum":"  504","line":"    int nparts = bunch.get_local_num();"},
{"lineNum":"  505","line":""},
{"lineNum":"  506","line":"    double weight0 = (bunch.get_real_num() / bunch.get_total_num())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  507","line":"            * bunch.get_particle_charge() * pconstants::e","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  508","line":"            / (h[0] * h[1]); // * h[2]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  509","line":""},
{"lineNum":"  510","line":"    // double[x][y][2] + double[z]"},
{"lineNum":"  511","line":"    karray1d_dev        rho_dev(\"rho\", g[0]*g[1]*2 + g[2]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  512","line":"    karray1d_atomic_dev rho_atomic = rho_dev;"},
{"lineNum":"  513","line":""},
{"lineNum":"  514","line":"    atomic_rho_reducer rr(parts, rho_atomic, particle_bin, g, h, l, weight0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  515","line":"    Kokkos::parallel_for(nparts, rr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  516","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  517","line":""},
{"lineNum":"  518","line":"    return rho_dev;"},
{"lineNum":"  519","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  520","line":""},
{"lineNum":"  521","line":"void"},
{"lineNum":"  522","line":"deposit_charge_rectangular_2d_kokkos_scatter_view("},
{"lineNum":"  523","line":"        karray1d_dev & rho_dev,"},
{"lineNum":"  524","line":"        Rectangular_grid_domain & domain,"},
{"lineNum":"  525","line":"        karray2d_dev & particle_bin,"},
{"lineNum":"  526","line":"        Bunch const & bunch )"},
{"lineNum":"  527","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  528","line":"    using deposit_impl::sv_rho_reducer;"},
{"lineNum":"  529","line":"    using deposit_impl::rho_zeroer;"},
{"lineNum":"  530","line":""},
{"lineNum":"  531","line":"    auto g = domain.get_grid_shape();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  532","line":"    auto h = domain.get_cell_size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  533","line":"    auto l = domain.get_left();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  534","line":""},
{"lineNum":"  535","line":"    auto parts = bunch.get_local_particles();"},
{"lineNum":"  536","line":"    auto masks = bunch.get_local_particle_masks();"},
{"lineNum":"  537","line":"    int nparts = bunch.size();"},
{"lineNum":"  538","line":""},
{"lineNum":"  539","line":"    double weight0 = (bunch.get_real_num() / bunch.get_total_num())"},
{"lineNum":"  540","line":"            * bunch.get_particle_charge() * pconstants::e"},
{"lineNum":"  541","line":"            / (h[0] * h[1]); // * h[2]);"},
{"lineNum":"  542","line":""},
{"lineNum":"  543","line":"    // double[x][y][2] + double[z]"},
{"lineNum":"  544","line":"    if (rho_dev.extent(0) != g[0]*g[1]*2 + g[2])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  545","line":"        throw std::runtime_error(\"wrong size for rho in deposit charge\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  546","line":""},
{"lineNum":"  547","line":"    // zero first"},
{"lineNum":"  548","line":"    rho_zeroer rz{rho_dev};"},
{"lineNum":"  549","line":"    Kokkos::parallel_for(rho_dev.extent(0), rz);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  550","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  551","line":""},
{"lineNum":"  552","line":"    // deposit"},
{"lineNum":"  553","line":"    Kokkos::Experimental::ScatterView<double*, Kokkos::LayoutLeft> scatter(rho_dev);"},
{"lineNum":"  554","line":""},
{"lineNum":"  555","line":"    sv_rho_reducer rr(parts, masks, scatter, particle_bin, g, h, l, weight0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  556","line":"    Kokkos::parallel_for(nparts, rr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  557","line":"    Kokkos::Experimental::contribute(rho_dev, scatter);"},
{"lineNum":"  558","line":""},
{"lineNum":"  559","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  560","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  561","line":""},
{"lineNum":"  562","line":"void"},
{"lineNum":"  563","line":"deposit_charge_rectangular_3d_kokkos_scatter_view("},
{"lineNum":"  564","line":"        karray1d_dev & rho_dev,"},
{"lineNum":"  565","line":"        Rectangular_grid_domain & domain,"},
{"lineNum":"  566","line":"        std::array<int, 3> const& dims,"},
{"lineNum":"  567","line":"        Bunch const & bunch )"},
{"lineNum":"  568","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  569","line":"    using namespace deposit_impl;"},
{"lineNum":"  570","line":""},
{"lineNum":"  571","line":"    auto g = domain.get_grid_shape();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  572","line":"    auto h = domain.get_cell_size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  573","line":"    auto l = domain.get_left();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  574","line":""},
{"lineNum":"  575","line":"    // g[0] (nx) needs to be padded to (2*(g[0]/2+1))"},
{"lineNum":"  576","line":"    // int padded_gx = Distributed_fft3d::get_padded_shape_real(g[0]);"},
{"lineNum":"  577","line":""},
{"lineNum":"  578","line":"    auto parts = bunch.get_local_particles();"},
{"lineNum":"  579","line":"    auto masks = bunch.get_local_particle_masks();"},
{"lineNum":"  580","line":"    int nparts = bunch.size();"},
{"lineNum":"  581","line":""},
{"lineNum":"  582","line":"    double weight0 = (bunch.get_real_num() / bunch.get_total_num())"},
{"lineNum":"  583","line":"            * bunch.get_particle_charge() * pconstants::e"},
{"lineNum":"  584","line":"            / (h[0] * h[1] * h[2]);"},
{"lineNum":"  585","line":""},
{"lineNum":"  586","line":"    if (rho_dev.extent(0) < g[0]*g[1]*g[2])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  587","line":"        throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  588","line":"                \"insufficient size for rho in deposit charge\");"},
{"lineNum":"  589","line":""},
{"lineNum":"  590","line":"    // zero first"},
{"lineNum":"  591","line":"    rho_zeroer rz{rho_dev};"},
{"lineNum":"  592","line":"    Kokkos::parallel_for(rho_dev.extent(0), rz);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  593","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  594","line":""},
{"lineNum":"  595","line":"    // deposit"},
{"lineNum":"  596","line":"    scatter_t scatter(rho_dev);"},
{"lineNum":"  597","line":"    sv_zyx_rho_reducer_non_periodic rr(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  598","line":"            parts, masks, scatter, g, dims, h, l, weight0);"},
{"lineNum":"  599","line":""},
{"lineNum":"  600","line":"    Kokkos::parallel_for(nparts, rr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  601","line":"    Kokkos::Experimental::contribute(rho_dev, scatter);"},
{"lineNum":"  602","line":""},
{"lineNum":"  603","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  604","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  605","line":""},
{"lineNum":"  606","line":"void"},
{"lineNum":"  607","line":"deposit_charge_rectangular_3d_kokkos_scatter_view_xyz("},
{"lineNum":"  608","line":"        karray1d_dev & rho_dev,"},
{"lineNum":"  609","line":"        Rectangular_grid_domain & domain,"},
{"lineNum":"  610","line":"        std::array<int, 3> const& dims,"},
{"lineNum":"  611","line":"        Bunch const & bunch )"},
{"lineNum":"  612","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  613","line":"    using namespace deposit_impl;"},
{"lineNum":"  614","line":""},
{"lineNum":"  615","line":"    auto g = domain.get_grid_shape();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  616","line":"    auto h = domain.get_cell_size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  617","line":"    auto l = domain.get_left();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  618","line":""},
{"lineNum":"  619","line":"    // g[0] (nx) needs to be padded to (2*(g[0]/2+1))"},
{"lineNum":"  620","line":"    // int padded_gx = Distributed_fft3d::get_padded_shape_real(g[0]);"},
{"lineNum":"  621","line":""},
{"lineNum":"  622","line":"    auto parts = bunch.get_local_particles();"},
{"lineNum":"  623","line":"    auto masks = bunch.get_local_particle_masks();"},
{"lineNum":"  624","line":"    int nparts = bunch.size();"},
{"lineNum":"  625","line":""},
{"lineNum":"  626","line":"    double weight0 = (bunch.get_real_num() / bunch.get_total_num())"},
{"lineNum":"  627","line":"            * bunch.get_particle_charge() * pconstants::e"},
{"lineNum":"  628","line":"            / (h[0] * h[1] * h[2]);"},
{"lineNum":"  629","line":""},
{"lineNum":"  630","line":"    if (rho_dev.extent(0) < g[0]*g[1]*g[2])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  631","line":"        throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  632","line":"                \"insufficient size for rho in deposit charge\");"},
{"lineNum":"  633","line":""},
{"lineNum":"  634","line":"    // zero first"},
{"lineNum":"  635","line":"    rho_zeroer rz{rho_dev};"},
{"lineNum":"  636","line":"    Kokkos::parallel_for(rho_dev.extent(0), rz);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  637","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  638","line":""},
{"lineNum":"  639","line":"    // deposit"},
{"lineNum":"  640","line":"    scatter_t scatter(rho_dev);"},
{"lineNum":"  641","line":"    sv_xyz_rho_reducer_non_periodic rr(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  642","line":"            parts, masks, scatter, g, dims, h, l, weight0);"},
{"lineNum":"  643","line":""},
{"lineNum":"  644","line":"    Kokkos::parallel_for(nparts, rr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  645","line":"    Kokkos::Experimental::contribute(rho_dev, scatter);"},
{"lineNum":"  646","line":""},
{"lineNum":"  647","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  648","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  649","line":""},
{"lineNum":"  650","line":"#ifdef Kokkos_ENABLE_OPENMP"},
{"lineNum":"  651","line":"void"},
{"lineNum":"  652","line":"deposit_charge_rectangular_2d_omp_reduce("},
{"lineNum":"  653","line":"        karray1d_dev & rho_dev,"},
{"lineNum":"  654","line":"        Rectangular_grid_domain & domain,"},
{"lineNum":"  655","line":"        karray2d_dev & bin,"},
{"lineNum":"  656","line":"        Bunch const & bunch )"},
{"lineNum":"  657","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  658","line":"    using namespace deposit_impl;"},
{"lineNum":"  659","line":""},
{"lineNum":"  660","line":"    auto g = domain.get_grid_shape();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  661","line":"    auto h = domain.get_cell_size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  662","line":"    auto l = domain.get_left();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  663","line":""},
{"lineNum":"  664","line":"    auto parts = bunch.get_local_particles();"},
{"lineNum":"  665","line":"    auto masks = bunch.get_local_particle_masks();"},
{"lineNum":"  666","line":"    int  npart = bunch.size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  667","line":""},
{"lineNum":"  668","line":"    double w0 = (bunch.get_real_num() / bunch.get_total_num())","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  669","line":"            * bunch.get_particle_charge() * pconstants::e","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  670","line":"            / (h[0] * h[1]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  671","line":""},
{"lineNum":"  672","line":"    if (rho_dev.extent(0) != g[0]*g[1]*2 + g[2])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  673","line":"        throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  674","line":"                \"insufficient size for rho in deposit charge\");"},
{"lineNum":"  675","line":""},
{"lineNum":"  676","line":"    // zero first"},
{"lineNum":"  677","line":"    rho_zeroer rz{rho_dev};"},
{"lineNum":"  678","line":"    Kokkos::parallel_for(rho_dev.extent(0), rz);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  679","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  680","line":""},
{"lineNum":"  681","line":"    int gx = g[0];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  682","line":"    int gy = g[1];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  683","line":"    int gz = g[2];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  684","line":""},
{"lineNum":"  685","line":"    int nc  = gx*gy + gz; // num of cells","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  686","line":""},
{"lineNum":"  687","line":"    static int nt = 0;"},
{"lineNum":"  688","line":"    static int ncc = 0;"},
{"lineNum":"  689","line":"    static double * rl = 0;"},
{"lineNum":"  690","line":""},
{"lineNum":"  691","line":"    if( nt==0 )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  692","line":"    {"},
{"lineNum":"  693","line":"        #pragma omp parallel","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  694","line":"        { nt = omp_get_num_threads(); }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  695","line":""},
{"lineNum":"  696","line":"        ncc = nc;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  697","line":""},
{"lineNum":"  698","line":"        rl = new double[nt*nc];  // nt copies of +1 cells","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  699","line":"    }"},
{"lineNum":"  700","line":""},
{"lineNum":"  701","line":"    if( nc!=ncc )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  702","line":"    {"},
{"lineNum":"  703","line":"        // bunch geometry has been changed"},
{"lineNum":"  704","line":"        delete [] rl;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  705","line":""},
{"lineNum":"  706","line":"        ncc = nc;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  707","line":""},
{"lineNum":"  708","line":"        rl = new double[nt*nc];  // nt copies of +1 cells","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  709","line":"    }"},
{"lineNum":"  710","line":""},
{"lineNum":"  711","line":"    double lx = l[0];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  712","line":"    double ly = l[1];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  713","line":"    double lz = l[2];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  714","line":""},
{"lineNum":"  715","line":"    double ihx = 1.0/h[0];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  716","line":"    double ihy = 1.0/h[1];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  717","line":"    double ihz = 1.0/h[2];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  718","line":""},
{"lineNum":"  719","line":"    #pragma omp parallel shared(npart, parts, masks, bin, lx, ly, lz, ihx, ihy, ihz, w0, gx, gy, gz, rl, nc, rho_dev)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  720","line":"    {"},
{"lineNum":"  721","line":"        int nt = omp_get_num_threads();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  722","line":"        int it = omp_get_thread_num();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  723","line":""},
{"lineNum":"  724","line":"        int np = npart;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  725","line":"        int le = npart / nt;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  726","line":"        int ps = it * le;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  727","line":"        int pe = (it == nt-1) ? np : (it+1)*le;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  728","line":""},
{"lineNum":"  729","line":"        // zero the worksheet"},
{"lineNum":"  730","line":"        std::memset(rl + it*nc, 0, sizeof(double)*nc);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  731","line":""},
{"lineNum":"  732","line":"        double ox, oy, oz, w;"},
{"lineNum":"  733","line":"        int    ix, iy, iz;"},
{"lineNum":"  734","line":""},
{"lineNum":"  735","line":"        for(int n=ps; n<pe; ++n)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  736","line":"        {"},
{"lineNum":"  737","line":"            if (!masks(n)) continue;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  738","line":""},
{"lineNum":"  739","line":"            get_leftmost_indices_offset(parts(n, 0), lx, ihx, ix, ox);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  740","line":"            get_leftmost_indices_offset(parts(n, 2), ly, ihy, iy, oy);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  741","line":"            get_leftmost_indices_offset(parts(n, 4), lz, ihz, iz, oz);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  742","line":""},
{"lineNum":"  743","line":"            bin(n, 0) = ix;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  744","line":"            bin(n, 1) = ox;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  745","line":"            bin(n, 2) = iy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  746","line":"            bin(n, 3) = oy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  747","line":"            bin(n, 4) = iz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  748","line":"            bin(n, 5) = oz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  749","line":""},
{"lineNum":"  750","line":"            int base = it*nc;"},
{"lineNum":"  751","line":""},
{"lineNum":"  752","line":"            int cellz1 = iz;"},
{"lineNum":"  753","line":"            int cellz2 = cellz1 + 1;"},
{"lineNum":"  754","line":""},
{"lineNum":"  755","line":"            if( cellz1>=0 && cellz1<gz )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  756","line":"                rl[base + gx*gy + cellz1] += (1.0-oz)*ihz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  757","line":""},
{"lineNum":"  758","line":"            if( cellz2>=0 && cellz2<gz )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  759","line":"                rl[base + gx*gy + cellz2] += oz*ihz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  760","line":""},
{"lineNum":"  761","line":"            if( ix<0 || ix>gx-1 || iy<0 || iy>gy-1 ) continue;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  762","line":""},
{"lineNum":"  763","line":"            int cellx1 = ix;"},
{"lineNum":"  764","line":"            int cellx2 = ix + 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  765","line":"            int celly1 = iy;"},
{"lineNum":"  766","line":"            int celly2 = iy + 1;"},
{"lineNum":"  767","line":""},
{"lineNum":"  768","line":"            double aox, aoy;"},
{"lineNum":"  769","line":"            aox = 1. - ox;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  770","line":"            aoy = 1. - oy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  771","line":""},
{"lineNum":"  772","line":"            rl[base + cellx1*gy + celly1] += w0 * aox * aoy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  773","line":"            rl[base + cellx1*gy + celly2] += w0 * aox *  oy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  774","line":"            rl[base + cellx2*gy + celly1] += w0 *  ox * aoy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  775","line":"            rl[base + cellx2*gy + celly2] += w0 *  ox *  oy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  776","line":"        }"},
{"lineNum":"  777","line":""},
{"lineNum":"  778","line":"        #pragma omp barrier","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  779","line":""},
{"lineNum":"  780","line":"        // reduction"},
{"lineNum":"  781","line":"        le = gy/nt;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  782","line":"        ps = it*le;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  783","line":"        pe = (it == nt-1) ? gy : (ps + le);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  784","line":""},
{"lineNum":"  785","line":"        for(int y=ps; y<pe; ++y)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  786","line":"        {"},
{"lineNum":"  787","line":"            for(int x=0; x<gx; ++x)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  788","line":"            {"},
{"lineNum":"  789","line":"                w = 0.0;"},
{"lineNum":"  790","line":""},
{"lineNum":"  791","line":"                for(int n=0; n<nt; ++n)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  792","line":"                    w += rl[n*nc + (x*gy + y)];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  793","line":""},
{"lineNum":"  794","line":"                rho_dev((x*gy + y) * 2) = w;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  795","line":"            }"},
{"lineNum":"  796","line":"        }"},
{"lineNum":"  797","line":""},
{"lineNum":"  798","line":"        #pragma omp barrier","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  799","line":""},
{"lineNum":"  800","line":"        le = gz/nt;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  801","line":"        ps = it*le;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  802","line":"        pe = (it == nt-1) ? gz : (ps + le);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  803","line":""},
{"lineNum":"  804","line":"        for(int z=ps; z<pe; ++z)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  805","line":"        {"},
{"lineNum":"  806","line":"            w = 0.0;"},
{"lineNum":"  807","line":""},
{"lineNum":"  808","line":"            for(int n=0; n<nt; ++n)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  809","line":"                w += rl[n*nc + gx*gy + z];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  810","line":""},
{"lineNum":"  811","line":"            rho_dev(gx*gy*2 + z) = w;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  812","line":"        }"},
{"lineNum":"  813","line":""},
{"lineNum":"  814","line":"        #pragma omp barrier","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  815","line":""},
{"lineNum":"  816","line":"    } //  end of #pragma parallel"},
{"lineNum":"  817","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  818","line":""},
{"lineNum":"  819","line":""},
{"lineNum":"  820","line":"void"},
{"lineNum":"  821","line":"deposit_charge_rectangular_3d_omp_reduce("},
{"lineNum":"  822","line":"        karray1d_dev & rho_dev,"},
{"lineNum":"  823","line":"        Rectangular_grid_domain & domain,"},
{"lineNum":"  824","line":"        std::array<int, 3> const& dims,"},
{"lineNum":"  825","line":"        Bunch const & bunch )"},
{"lineNum":"  826","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  827","line":"    using namespace deposit_impl;"},
{"lineNum":"  828","line":""},
{"lineNum":"  829","line":"    auto g = domain.get_grid_shape();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  830","line":"    auto h = domain.get_cell_size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  831","line":"    auto l = domain.get_left();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  832","line":""},
{"lineNum":"  833","line":"    auto parts = bunch.get_local_particles();"},
{"lineNum":"  834","line":"    auto masks = bunch.get_local_particle_masks();"},
{"lineNum":"  835","line":"    int  npart = bunch.size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  836","line":""},
{"lineNum":"  837","line":"    double w0 = (bunch.get_real_num() / bunch.get_total_num())","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  838","line":"            * bunch.get_particle_charge() * pconstants::e","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  839","line":"            / (h[0] * h[1] * h[2]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  840","line":""},
{"lineNum":"  841","line":"    if (rho_dev.extent(0) < g[0]*g[1]*g[2])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  842","line":"        throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  843","line":"                \"insufficient size for rho in deposit charge\");"},
{"lineNum":"  844","line":""},
{"lineNum":"  845","line":"    // zero first"},
{"lineNum":"  846","line":"    rho_zeroer rz{rho_dev};"},
{"lineNum":"  847","line":"    Kokkos::parallel_for(rho_dev.extent(0), rz);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  848","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  849","line":""},
{"lineNum":"  850","line":"    int gx = g[0];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  851","line":"    int gy = g[1];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  852","line":"    int gz = g[2];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  853","line":""},
{"lineNum":"  854","line":"    int dx = dims[0];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  855","line":"    int dy = dims[1];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  856","line":"    int dz = dims[2];"},
{"lineNum":"  857","line":""},
{"lineNum":"  858","line":"    int nc  = gx * gy * gz; // num of cells","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  859","line":""},
{"lineNum":"  860","line":"    static int nt = 0;"},
{"lineNum":"  861","line":"    static int ncc = 0;"},
{"lineNum":"  862","line":"    static double * rl = 0;"},
{"lineNum":"  863","line":""},
{"lineNum":"  864","line":"    if( nt==0 )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  865","line":"    {"},
{"lineNum":"  866","line":"        #pragma omp parallel","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  867","line":"        { nt = omp_get_num_threads(); }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  868","line":""},
{"lineNum":"  869","line":"        ncc = nc;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  870","line":""},
{"lineNum":"  871","line":"        rl = new double[nt*nc];  // nt copies of +1 cells","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  872","line":"    }"},
{"lineNum":"  873","line":""},
{"lineNum":"  874","line":"    if( nc!=ncc )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  875","line":"    {"},
{"lineNum":"  876","line":"        // bunch geometry has been changed"},
{"lineNum":"  877","line":"        delete [] rl;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  878","line":""},
{"lineNum":"  879","line":"        ncc = nc;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  880","line":""},
{"lineNum":"  881","line":"        rl = new double[nt*nc];  // nt copies of +1 cells","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  882","line":"    }"},
{"lineNum":"  883","line":""},
{"lineNum":"  884","line":"    double lx = l[0];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  885","line":"    double ly = l[1];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  886","line":"    double lz = l[2];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  887","line":""},
{"lineNum":"  888","line":"    double ihx = 1.0/h[0];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  889","line":"    double ihy = 1.0/h[1];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  890","line":"    double ihz = 1.0/h[2];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  891","line":""},
{"lineNum":"  892","line":"    #pragma omp parallel shared(npart, parts, masks, lx, ly, lz, ihx, ihy, ihz, w0, gx, gy, gz, dx, dy, dz, rl, nc, rho_dev)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  893","line":"    {"},
{"lineNum":"  894","line":"        int nt = omp_get_num_threads();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  895","line":"        int it = omp_get_thread_num();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  896","line":""},
{"lineNum":"  897","line":"        int np = npart;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  898","line":"        int le = npart / nt;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  899","line":"        int ps = it * le;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  900","line":"        int pe = (it == nt-1) ? np : (it+1)*le;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  901","line":""},
{"lineNum":"  902","line":"        // zero the worksheet"},
{"lineNum":"  903","line":"        std::memset(rl + it*nc, 0, sizeof(double)*nc);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  904","line":""},
{"lineNum":"  905","line":"        double ox, oy, oz, w;"},
{"lineNum":"  906","line":"        int    ix, iy, iz;"},
{"lineNum":"  907","line":""},
{"lineNum":"  908","line":"        for(int n=ps; n<pe; ++n)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  909","line":"        {"},
{"lineNum":"  910","line":"            if (!masks(n)) continue;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  911","line":""},
{"lineNum":"  912","line":"            get_leftmost_indices_offset(parts(n, 0), lx, ihx, ix, ox);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  913","line":"            get_leftmost_indices_offset(parts(n, 2), ly, ihy, iy, oy);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  914","line":"            get_leftmost_indices_offset(parts(n, 4), lz, ihz, iz, oz);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  915","line":""},
{"lineNum":"  916","line":"            int base = it*nc + iz*gx*gy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  917","line":""},
{"lineNum":"  918","line":"            if( ingrid(ix  , iy  , iz, gx, gy, gz) )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  919","line":"                //rl[(base + (iy  )*gx + ix  )*nt+it] += w0*(1-ox)*(1-oy)*(1-oz);"},
{"lineNum":"  920","line":"                rl[(base + (iy  )*gx + ix  )] += w0*(1-ox)*(1-oy)*(1-oz);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  921","line":""},
{"lineNum":"  922","line":"            if( ingrid(ix+1, iy  , iz, gx, gy, gz) )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  923","line":"                //rl[(base + (iy  )*gx + ix+1)*nt+it] += w0*(  ox)*(1-oy)*(1-oz);"},
{"lineNum":"  924","line":"                rl[(base + (iy  )*gx + ix+1)] += w0*(  ox)*(1-oy)*(1-oz);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  925","line":""},
{"lineNum":"  926","line":"            if( ingrid(ix  , iy+1, iz, gx, gy, gz) )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  927","line":"                //rl[(base + (iy+1)*gx + ix  )*nt+it] += w0*(1-ox)*(  oy)*(1-oz);"},
{"lineNum":"  928","line":"                rl[(base + (iy+1)*gx + ix  )] += w0*(1-ox)*(  oy)*(1-oz);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  929","line":""},
{"lineNum":"  930","line":"            if( ingrid(ix+1, iy+1, iz, gx, gy, gz) )"},
{"lineNum":"  931","line":"                //rl[(base + (iy+1)*gx + ix+1)*nt+it] += w0*(  ox)*(  oy)*(1-oz);"},
{"lineNum":"  932","line":"                rl[(base + (iy+1)*gx + ix+1)] += w0*(  ox)*(  oy)*(1-oz);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  933","line":""},
{"lineNum":"  934","line":"            base = it*nc + (iz+1)*gx*gy;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  935","line":""},
{"lineNum":"  936","line":"            if( ingrid(ix  , iy  , iz+1, gx, gy, gz) )"},
{"lineNum":"  937","line":"                //rl[(base + (iy  )*gx + ix  )*nt+it] += w0*(1-ox)*(1-oy)*(oz);"},
{"lineNum":"  938","line":"                rl[(base + (iy  )*gx + ix  )] += w0*(1-ox)*(1-oy)*(oz);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  939","line":""},
{"lineNum":"  940","line":"            if( ingrid(ix+1, iy  , iz+1, gx, gy, gz) )"},
{"lineNum":"  941","line":"                //rl[(base + (iy  )*gx + ix+1)*nt+it] += w0*(  ox)*(1-oy)*(oz);"},
{"lineNum":"  942","line":"                rl[(base + (iy  )*gx + ix+1)] += w0*(  ox)*(1-oy)*(oz);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  943","line":""},
{"lineNum":"  944","line":"            if( ingrid(ix  , iy+1, iz+1, gx, gy, gz) )"},
{"lineNum":"  945","line":"                //rl[(base + (iy+1)*gx + ix  )*nt+it] += w0*(1-ox)*(  oy)*(oz);"},
{"lineNum":"  946","line":"                rl[(base + (iy+1)*gx + ix  )] += w0*(1-ox)*(  oy)*(oz);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  947","line":""},
{"lineNum":"  948","line":"            if( ingrid(ix+1, iy+1, iz+1, gx, gy, gz) )"},
{"lineNum":"  949","line":"                //rl[(base + (iy+1)*gx + ix+1)*nt+it] += w0*(  ox)*(  oy)*(oz);"},
{"lineNum":"  950","line":"                rl[(base + (iy+1)*gx + ix+1)] += w0*(  ox)*(  oy)*(oz);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  951","line":"        }"},
{"lineNum":"  952","line":""},
{"lineNum":"  953","line":"        #pragma omp barrier","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  954","line":""},
{"lineNum":"  955","line":"        // reduction"},
{"lineNum":"  956","line":"        le = gz/nt;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  957","line":"        ps = it*le;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  958","line":"        pe = (it == nt-1) ? gz : (ps + le);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  959","line":""},
{"lineNum":"  960","line":"        for(int z=ps; z<pe; ++z)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  961","line":"        {"},
{"lineNum":"  962","line":"            for(int y=0; y<gy; ++y)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  963","line":"            {"},
{"lineNum":"  964","line":"                for(int x=0; x<gx; ++x)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  965","line":"                {"},
{"lineNum":"  966","line":"                    w = 0.0;"},
{"lineNum":"  967","line":"                    for(int n=0; n<nt; ++n)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  968","line":"                        //w += rl[(z*gx*gy + y*gx + x)*nt+n];"},
{"lineNum":"  969","line":"                        w += rl[n*nc + (z*gx*gy + y*gx + x)];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  970","line":""},
{"lineNum":"  971","line":"                    rho_dev(z*dx*dy + y*dx +x) = w;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  972","line":"                }"},
{"lineNum":"  973","line":"            }"},
{"lineNum":"  974","line":"        }"},
{"lineNum":"  975","line":""},
{"lineNum":"  976","line":"        #pragma omp barrier","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  977","line":""},
{"lineNum":"  978","line":"    } //  end of #pragma parallel"},
{"lineNum":"  979","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  980","line":""},
{"lineNum":"  981","line":"void"},
{"lineNum":"  982","line":"deposit_charge_rectangular_3d_omp_reduce_xyz("},
{"lineNum":"  983","line":"        karray1d_dev & rho_dev,"},
{"lineNum":"  984","line":"        Rectangular_grid_domain & domain,"},
{"lineNum":"  985","line":"        std::array<int, 3> const& dims,"},
{"lineNum":"  986","line":"        Bunch const & bunch )"},
{"lineNum":"  987","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  988","line":"    using namespace deposit_impl;"},
{"lineNum":"  989","line":""},
{"lineNum":"  990","line":"    auto g = domain.get_grid_shape();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  991","line":"    auto h = domain.get_cell_size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  992","line":"    auto l = domain.get_left();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  993","line":""},
{"lineNum":"  994","line":"    auto parts = bunch.get_local_particles();"},
{"lineNum":"  995","line":"    auto masks = bunch.get_local_particle_masks();"},
{"lineNum":"  996","line":"    int  npart = bunch.size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  997","line":""},
{"lineNum":"  998","line":"    double w0 = (bunch.get_real_num() / bunch.get_total_num())","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  999","line":"            * bunch.get_particle_charge() * pconstants::e","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1000","line":"            / (h[0] * h[1] * h[2]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1001","line":""},
{"lineNum":" 1002","line":"    if (rho_dev.extent(0) < g[0]*g[1]*g[2])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1003","line":"        throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1004","line":"                \"insufficient size for rho in deposit charge\");"},
{"lineNum":" 1005","line":""},
{"lineNum":" 1006","line":"    // zero first"},
{"lineNum":" 1007","line":"    rho_zeroer rz{rho_dev};"},
{"lineNum":" 1008","line":"    Kokkos::parallel_for(rho_dev.extent(0), rz);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1009","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1010","line":""},
{"lineNum":" 1011","line":"    int gx = g[0];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1012","line":"    int gy = g[1];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1013","line":"    int gz = g[2];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1014","line":""},
{"lineNum":" 1015","line":"    int dx = dims[0];"},
{"lineNum":" 1016","line":"    int dy = dims[1];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1017","line":"    int dz = dims[2];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1018","line":""},
{"lineNum":" 1019","line":"    int nc  = gx * gy * gz; // num of cells","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1020","line":""},
{"lineNum":" 1021","line":"    static int nt = 0;"},
{"lineNum":" 1022","line":"    static int ncc = 0;"},
{"lineNum":" 1023","line":"    static double * rl = 0;"},
{"lineNum":" 1024","line":""},
{"lineNum":" 1025","line":"    if( nt==0 )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1026","line":"    {"},
{"lineNum":" 1027","line":"        #pragma omp parallel","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1028","line":"        { nt = omp_get_num_threads(); }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1029","line":""},
{"lineNum":" 1030","line":"        ncc = nc;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1031","line":""},
{"lineNum":" 1032","line":"        rl = new double[nt*nc];  // nt copies of +1 cells","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1033","line":"    }"},
{"lineNum":" 1034","line":""},
{"lineNum":" 1035","line":"    if( nc!=ncc )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1036","line":"    {"},
{"lineNum":" 1037","line":"        // bunch geometry has been changed"},
{"lineNum":" 1038","line":"        delete [] rl;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1039","line":""},
{"lineNum":" 1040","line":"        ncc = nc;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1041","line":""},
{"lineNum":" 1042","line":"        rl = new double[nt*nc];  // nt copies of +1 cells","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1043","line":"    }"},
{"lineNum":" 1044","line":""},
{"lineNum":" 1045","line":"    double lx = l[0];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1046","line":"    double ly = l[1];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1047","line":"    double lz = l[2];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1048","line":""},
{"lineNum":" 1049","line":"    double ihx = 1.0/h[0];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1050","line":"    double ihy = 1.0/h[1];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1051","line":"    double ihz = 1.0/h[2];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1052","line":""},
{"lineNum":" 1053","line":"    #pragma omp parallel shared(npart, parts, masks, lx, ly, lz, ihx, ihy, ihz, w0, gx, gy, gz, dx, dy, dz, rl, nc, rho_dev)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1054","line":"    {"},
{"lineNum":" 1055","line":"        int nt = omp_get_num_threads();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1056","line":"        int it = omp_get_thread_num();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1057","line":""},
{"lineNum":" 1058","line":"        int np = npart;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1059","line":"        int le = npart / nt;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1060","line":"        int ps = it * le;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1061","line":"        int pe = (it == nt-1) ? np : (it+1)*le;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1062","line":""},
{"lineNum":" 1063","line":"        // zero the worksheet"},
{"lineNum":" 1064","line":"        std::memset(rl + it*nc, 0, sizeof(double)*nc);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1065","line":""},
{"lineNum":" 1066","line":"        double ox, oy, oz, w;"},
{"lineNum":" 1067","line":"        int    ix, iy, iz;"},
{"lineNum":" 1068","line":""},
{"lineNum":" 1069","line":"        for(int n=ps; n<pe; ++n)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1070","line":"        {"},
{"lineNum":" 1071","line":"            if (!masks(n)) continue;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1072","line":""},
{"lineNum":" 1073","line":"            get_leftmost_indices_offset(parts(n, 0), lx, ihx, ix, ox);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1074","line":"            get_leftmost_indices_offset(parts(n, 2), ly, ihy, iy, oy);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1075","line":"            get_leftmost_indices_offset(parts(n, 4), lz, ihz, iz, oz);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1076","line":""},
{"lineNum":" 1077","line":"            int base = it*nc + ix*gy*gz;"},
{"lineNum":" 1078","line":""},
{"lineNum":" 1079","line":"            if( ingrid(ix, iy  , iz  , gx, gy, gz) )"},
{"lineNum":" 1080","line":"                rl[(base + (iy  )*gz + iz  )] += w0*(1-ox)*(1-oy)*(1-oz);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1081","line":""},
{"lineNum":" 1082","line":"            if( ingrid(ix, iy  , iz+1, gx, gy, gz) )","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1083","line":"                rl[(base + (iy  )*gz + iz+1)] += w0*(1-ox)*(1-oy)*(oz);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1084","line":""},
{"lineNum":" 1085","line":"            if( ingrid(ix, iy+1, iz, gx, gy, gz) )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1086","line":"                rl[(base + (iy+1)*gz + iz  )] += w0*(1-ox)*(  oy)*(1-oz);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1087","line":""},
{"lineNum":" 1088","line":"            if( ingrid(ix, iy+1, iz+1, gx, gy, gz) )"},
{"lineNum":" 1089","line":"                rl[(base + (iy+1)*gz + iz+1)] += w0*(1-ox)*(  oy)*(oz);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1090","line":""},
{"lineNum":" 1091","line":"            base = it*nc + (ix+1)*gy*gz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1092","line":""},
{"lineNum":" 1093","line":"            if( ingrid(ix+1, iy  , iz, gx, gy, gz) )"},
{"lineNum":" 1094","line":"                rl[(base + (iy  )*gz + iz  )] += w0*(ox)*(1-oy)*(1-oz);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1095","line":""},
{"lineNum":" 1096","line":"            if( ingrid(ix+1, iy  , iz+1, gx, gy, gz) )"},
{"lineNum":" 1097","line":"                rl[(base + (iy  )*gz + iz+1)] += w0*(ox)*(1-oy)*(oz);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1098","line":""},
{"lineNum":" 1099","line":"            if( ingrid(ix+1, iy+1, iz, gx, gy, gz) )"},
{"lineNum":" 1100","line":"                rl[(base + (iy+1)*gz + iz  )] += w0*(ox)*(  oy)*(1-oz);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1101","line":""},
{"lineNum":" 1102","line":"            if( ingrid(ix+1, iy+1, iz+1, gx, gy, gz) )"},
{"lineNum":" 1103","line":"                rl[(base + (iy+1)*gz + iz+1)] += w0*(ox)*(  oy)*(oz);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1104","line":"        }"},
{"lineNum":" 1105","line":""},
{"lineNum":" 1106","line":"        #pragma omp barrier","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1107","line":""},
{"lineNum":" 1108","line":"        // reduction"},
{"lineNum":" 1109","line":"        le = gz/nt;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1110","line":"        ps = it*le;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1111","line":"        pe = (it == nt-1) ? gz : (ps + le);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1112","line":""},
{"lineNum":" 1113","line":"        for(int z=ps; z<pe; ++z)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1114","line":"        {"},
{"lineNum":" 1115","line":"            for(int y=0; y<gy; ++y)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1116","line":"            {"},
{"lineNum":" 1117","line":"                for(int x=0; x<gx; ++x)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1118","line":"                {"},
{"lineNum":" 1119","line":"                    w = 0.0;"},
{"lineNum":" 1120","line":"                    for(int n=0; n<nt; ++n)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1121","line":"                        //w += rl[(z*gx*gy + y*gx + x)*nt+n];"},
{"lineNum":" 1122","line":"                        w += rl[n*nc + (x*gy*gz + y*gz + z)];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1123","line":""},
{"lineNum":" 1124","line":"                    rho_dev(x*dy*dz + y*dz +z) = w;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1125","line":"                }"},
{"lineNum":" 1126","line":"            }"},
{"lineNum":" 1127","line":"        }"},
{"lineNum":" 1128","line":""},
{"lineNum":" 1129","line":"        #pragma omp barrier","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1130","line":""},
{"lineNum":" 1131","line":"    } //  end of #pragma parallel"},
{"lineNum":" 1132","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1133","line":"#endif  // Kokkos_ENABLE_OPENMP"},
{"lineNum":" 1134","line":""},
{"lineNum":" 1135","line":""},
{"lineNum":" 1136","line":""},
{"lineNum":" 1137","line":"#if 0"},
{"lineNum":" 1138","line":"void"},
{"lineNum":" 1139","line":"deposit_charge_rectangular_2d_omp_reduce(Rectangular_grid & rho_grid,"},
{"lineNum":" 1140","line":"        Raw_MArray2d & particle_bin, Bunch const& bunch, bool zero_first)"},
{"lineNum":" 1141","line":"{"},
{"lineNum":" 1142","line":"    MArray2dc_ref rho_2dc(rho_grid.get_grid_points_2dc());"},
{"lineNum":" 1143","line":"    MArray1d_ref rho_1d(rho_grid.get_grid_points_1d());"},
{"lineNum":" 1144","line":"    Const_MArray2d_ref parts(bunch.get_local_particles());"},
{"lineNum":" 1145","line":""},
{"lineNum":" 1146","line":"    int g0, g1, g2;"},
{"lineNum":" 1147","line":"    g0 = rho_2dc.shape()[0];"},
{"lineNum":" 1148","line":"    g1 = rho_2dc.shape()[1];"},
{"lineNum":" 1149","line":"    g2 = rho_1d.shape()[0];"},
{"lineNum":" 1150","line":""},
{"lineNum":" 1151","line":"#if 0"},
{"lineNum":" 1152","line":"    int G0 = g0 + 2;"},
{"lineNum":" 1153","line":"    int G1 = g1 + 2;"},
{"lineNum":" 1154","line":"    int G2 = g2 + 2;"},
{"lineNum":" 1155","line":"#endif"},
{"lineNum":" 1156","line":""},
{"lineNum":" 1157","line":"    int npart = bunch.get_local_num();"},
{"lineNum":" 1158","line":""},
{"lineNum":" 1159","line":"    int nt = 1;"},
{"lineNum":" 1160","line":""},
{"lineNum":" 1161","line":"    #pragma omp parallel shared(nt)"},
{"lineNum":" 1162","line":"    { nt = omp_get_num_threads(); }"},
{"lineNum":" 1163","line":""},
{"lineNum":" 1164","line":"    double * lrho2d = new double[g0*g1*nt];"},
{"lineNum":" 1165","line":"    double * lrho1d = new double[g2*nt];"},
{"lineNum":" 1166","line":""},
{"lineNum":" 1167","line":"    if (zero_first)"},
{"lineNum":" 1168","line":"    {"},
{"lineNum":" 1169","line":"        for (unsigned int i = 0; i < g0; ++i)         // x"},
{"lineNum":" 1170","line":"        {"},
{"lineNum":" 1171","line":"            for (unsigned int j = 0; j < g1; ++j)     // y"},
{"lineNum":" 1172","line":"            {"},
{"lineNum":" 1173","line":"                rho_2dc[i][j] = 0.0;"},
{"lineNum":" 1174","line":"            }"},
{"lineNum":" 1175","line":"        }"},
{"lineNum":" 1176","line":""},
{"lineNum":" 1177","line":"        for (unsigned int k = 0; k < g2; ++k)         // z"},
{"lineNum":" 1178","line":"        {"},
{"lineNum":" 1179","line":"            rho_1d[k] = 0.0;"},
{"lineNum":" 1180","line":"        }"},
{"lineNum":" 1181","line":"    }"},
{"lineNum":" 1182","line":""},
{"lineNum":" 1183","line":"    std::vector<double > h(rho_grid.get_domain().get_cell_size());"},
{"lineNum":" 1184","line":"    double weight0 = (bunch.get_real_num() / bunch.get_total_num())"},
{"lineNum":" 1185","line":"            * bunch.get_particle_charge() * pconstants::e"},
{"lineNum":" 1186","line":"            / (h[0] * h[1]); // * h[2]);"},
{"lineNum":" 1187","line":""},
{"lineNum":" 1188","line":"    if (g2 == 1)"},
{"lineNum":" 1189","line":"    {"},
{"lineNum":" 1190","line":"        double mean(Core_diagnostics::calculate_z_mean(bunch));"},
{"lineNum":" 1191","line":"        double std(Core_diagnostics::calculate_z_std(bunch, mean));"},
{"lineNum":" 1192","line":"        rho_1d[0] = bunch.get_local_num() / (std::sqrt(12.0) * std);"},
{"lineNum":" 1193","line":"    }"},
{"lineNum":" 1194","line":""},
{"lineNum":" 1195","line":"    #pragma omp parallel \\"},
{"lineNum":" 1196","line":"        default(none) \\"},
{"lineNum":" 1197","line":"        shared(nt, npart, parts, lrho2d, lrho1d, h, \\"},
{"lineNum":" 1198","line":"               g0, g1, g2, particle_bin, \\"},
{"lineNum":" 1199","line":"               weight0, rho_2dc, rho_1d, rho_grid)"},
{"lineNum":" 1200","line":"    {"},
{"lineNum":" 1201","line":"        int ix, iy, iz;"},
{"lineNum":" 1202","line":"        double offx, offy, offz;"},
{"lineNum":" 1203","line":""},
{"lineNum":" 1204","line":"        int it = omp_get_thread_num();"},
{"lineNum":" 1205","line":""},
{"lineNum":" 1206","line":"        int l  = npart / nt;                  // length"},
{"lineNum":" 1207","line":"        int s  = it * l;                      // start particle"},
{"lineNum":" 1208","line":"        int e  = (it==nt-1) ? npart : (s+l);  // end particle"},
{"lineNum":" 1209","line":""},
{"lineNum":" 1210","line":"        double * r2d = lrho2d + it * g0 * g1;"},
{"lineNum":" 1211","line":"        double * r1d = lrho1d + it * g2;"},
{"lineNum":" 1212","line":""},
{"lineNum":" 1213","line":"        // zero buffer"},
{"lineNum":" 1214","line":"        std::memset( r2d, 0, sizeof(double)*g0*g1 );"},
{"lineNum":" 1215","line":"        std::memset( r1d, 0, sizeof(double)*g2    );"},
{"lineNum":" 1216","line":""},
{"lineNum":" 1217","line":"        for (int n = s; n < e; ++n) {"},
{"lineNum":" 1218","line":"            // no xyz->zyx transformation"},
{"lineNum":" 1219","line":"            rho_grid.get_domain().get_leftmost_indices_offsets("},
{"lineNum":" 1220","line":"                    parts[n][0], parts[n][2], parts[n][4], ix, iy, iz, offx,"},
{"lineNum":" 1221","line":"                    offy, offz);"},
{"lineNum":" 1222","line":""},
{"lineNum":" 1223","line":"            particle_bin.m[n][0] = ix;"},
{"lineNum":" 1224","line":"            particle_bin.m[n][1] = offx;"},
{"lineNum":" 1225","line":"            particle_bin.m[n][2] = iy;"},
{"lineNum":" 1226","line":"            particle_bin.m[n][3] = offy;"},
{"lineNum":" 1227","line":"            particle_bin.m[n][4] = iz;"},
{"lineNum":" 1228","line":"            particle_bin.m[n][5] = offz;"},
{"lineNum":" 1229","line":""},
{"lineNum":" 1230","line":"            int cellz1 = iz;"},
{"lineNum":" 1231","line":"            int cellz2 = cellz1 + 1;"},
{"lineNum":" 1232","line":""},
{"lineNum":" 1233","line":"            if( cellz1>=0 && cellz1<g2 ) r1d[cellz1] += (1.0 - offz) / h[2];"},
{"lineNum":" 1234","line":"            if( cellz2>=0 && cellz2<g2 ) r1d[cellz2] += offz / h[2];"},
{"lineNum":" 1235","line":""},
{"lineNum":" 1236","line":"            if( ix<0 || ix>g0-1 || iy<0 || iy>g1-1 ) continue;"},
{"lineNum":" 1237","line":""},
{"lineNum":" 1238","line":"            int cellx1, cellx2, celly1, celly2;"},
{"lineNum":" 1239","line":"            cellx1 = ix;"},
{"lineNum":" 1240","line":"            cellx2 = ix + 1;"},
{"lineNum":" 1241","line":"            celly1 = iy;"},
{"lineNum":" 1242","line":"            celly2 = iy + 1;"},
{"lineNum":" 1243","line":""},
{"lineNum":" 1244","line":"            double aoffx, aoffy;"},
{"lineNum":" 1245","line":"            aoffx = 1. - offx;"},
{"lineNum":" 1246","line":"            aoffy = 1. - offy;"},
{"lineNum":" 1247","line":""},
{"lineNum":" 1248","line":"            r2d[celly1*g0 + cellx1] += weight0 * aoffx * aoffy;"},
{"lineNum":" 1249","line":"            r2d[celly1*g0 + cellx2] += weight0 *  offx * aoffy;"},
{"lineNum":" 1250","line":"            r2d[celly2*g0 + cellx1] += weight0 * aoffx *  offy;"},
{"lineNum":" 1251","line":"            r2d[celly2*g0 + cellx2] += weight0 *  offx *  offy;"},
{"lineNum":" 1252","line":"        }"},
{"lineNum":" 1253","line":""},
{"lineNum":" 1254","line":"        // set boundary to zero"},
{"lineNum":" 1255","line":"        for (int x=0; x<g0; ++x)"},
{"lineNum":" 1256","line":"        {"},
{"lineNum":" 1257","line":"            r2d[x] = 0.0;"},
{"lineNum":" 1258","line":"            r2d[(g1-1)*g0 + x] = 0.0;"},
{"lineNum":" 1259","line":"        }"},
{"lineNum":" 1260","line":""},
{"lineNum":" 1261","line":"        for (int y=0; y<g1; ++y)"},
{"lineNum":" 1262","line":"        {"},
{"lineNum":" 1263","line":"            r2d[y*g0] = 0.0;"},
{"lineNum":" 1264","line":"            r2d[y*g0 + g0 - 1] = 0.0;"},
{"lineNum":" 1265","line":"        }"},
{"lineNum":" 1266","line":"    }"},
{"lineNum":" 1267","line":""},
{"lineNum":" 1268","line":"    for (int t = 0; t < nt; ++t)"},
{"lineNum":" 1269","line":"    {"},
{"lineNum":" 1270","line":"        for (int y = 0; y < g1; ++y)"},
{"lineNum":" 1271","line":"            for (int x = 0; x < g0; ++x)"},
{"lineNum":" 1272","line":"                rho_2dc[x][y] += lrho2d[t*g0*g1 + y*g0 + x];"},
{"lineNum":" 1273","line":""},
{"lineNum":" 1274","line":"        if (g2 > 1)"},
{"lineNum":" 1275","line":"            for (int z = 0; z < g2; ++z)"},
{"lineNum":" 1276","line":"                rho_1d[z] += lrho1d[t*g2 + z];"},
{"lineNum":" 1277","line":"    }"},
{"lineNum":" 1278","line":""},
{"lineNum":" 1279","line":"    delete [] lrho2d;"},
{"lineNum":" 1280","line":"    delete [] lrho1d;"},
{"lineNum":" 1281","line":"}"},
{"lineNum":" 1282","line":"#endif"},
{"lineNum":" 1283","line":""},
{"lineNum":" 1284","line":""},
{"lineNum":" 1285","line":""},
{"lineNum":" 1286","line":"#if 0"},
{"lineNum":" 1287","line":"/// Deposit charge using Cloud-in-Cell (CIC) algorithm."},
{"lineNum":" 1288","line":"/// The indices on the rho array are in an unusual order: [z][y][x],"},
{"lineNum":" 1289","line":"/// so that the FFTW routines can distribute along the z-axis."},
{"lineNum":" 1290","line":"/// The resulting charge density has units C/m^3."},
{"lineNum":" 1291","line":"//"},
{"lineNum":" 1292","line":"void"},
{"lineNum":" 1293","line":"deposit_charge_rectangular_zyx(Rectangular_grid & rho_grid, Bunch const& bunch,"},
{"lineNum":" 1294","line":"        bool zero_first)"},
{"lineNum":" 1295","line":"{"},
{"lineNum":" 1296","line":"    MArray3d_ref rho(rho_grid.get_grid_points());"},
{"lineNum":" 1297","line":"    Const_MArray2d_ref parts(bunch.get_local_particles());"},
{"lineNum":" 1298","line":""},
{"lineNum":" 1299","line":"    if (zero_first) {"},
{"lineNum":" 1300","line":"        std::memset( rho.data(), 0, sizeof(double)*rho.num_elements() );"},
{"lineNum":" 1301","line":"    }"},
{"lineNum":" 1302","line":""},
{"lineNum":" 1303","line":"    std::vector<double > h(rho_grid.get_domain().get_cell_size());"},
{"lineNum":" 1304","line":"    double weight0 = (bunch.get_real_num() / bunch.get_total_num())"},
{"lineNum":" 1305","line":"            * bunch.get_particle_charge() * pconstants::e"},
{"lineNum":" 1306","line":"            / (h[0] * h[1] * h[2]);"},
{"lineNum":" 1307","line":"    int ix, iy, iz;"},
{"lineNum":" 1308","line":"    double offx, offy, offz;"},
{"lineNum":" 1309","line":""},
{"lineNum":" 1310","line":"    // jfa: This is probably a premature optimization. Two versions of the"},
{"lineNum":" 1311","line":"    // deposit loop -- one for periodic, one for non-periodic."},
{"lineNum":" 1312","line":"    if (rho_grid.get_domain().is_periodic()) {"},
{"lineNum":" 1313","line":"        for (int n = 0; n < bunch.get_local_num(); ++n) {"},
{"lineNum":" 1314","line":"            // domain doesn\'t know about xyz->zyx transformation, so we"},
{"lineNum":" 1315","line":"            // do it in the order of arguments here"},
{"lineNum":" 1316","line":"            rho_grid.get_domain().get_leftmost_indices_offsets("},
{"lineNum":" 1317","line":"                    parts[n][4], parts[n][2], parts[n][0], iz, iy, ix, offz,"},
{"lineNum":" 1318","line":"                    offy, offx);"},
{"lineNum":" 1319","line":"            for (int i = 0; i < 2; ++i) {"},
{"lineNum":" 1320","line":"                for (int j = 0; j < 2; ++j) {"},
{"lineNum":" 1321","line":"                    for (int k = 0; k < 2; ++k) {"},
{"lineNum":" 1322","line":"                        int cellx = ix + i;"},
{"lineNum":" 1323","line":"                        int celly = iy + j;"},
{"lineNum":" 1324","line":"                        if ((cellx >0) && (cellx < int(rho.shape()[2]-1))"},
{"lineNum":" 1325","line":"                                && (celly > 0)"},
{"lineNum":" 1326","line":"                                && (celly < int(rho.shape()[1]-1))) {"},
{"lineNum":" 1327","line":"                            int cellz = iz + k;"},
{"lineNum":" 1328","line":"                            if (cellz >= 0) {"},
{"lineNum":" 1329","line":"                                cellz = cellz % rho.shape()[0];"},
{"lineNum":" 1330","line":"                            } else {"},
{"lineNum":" 1331","line":"                                int period = rho.shape()[0];"},
{"lineNum":" 1332","line":"                                cellz = period - 1 - ((-cellz - 1) % period);"},
{"lineNum":" 1333","line":"                            }"},
{"lineNum":" 1334","line":"                            double weight = weight0 * (1 - i - (1 - 2 * i)"},
{"lineNum":" 1335","line":"                                    * offx) * (1 - j - (1 - 2 * j) * offy) * (1"},
{"lineNum":" 1336","line":"                                    - k - (1 - 2 * k) * offz);"},
{"lineNum":" 1337","line":"                            rho[cellz][celly][cellx] += weight;"},
{"lineNum":" 1338","line":"                        }"},
{"lineNum":" 1339","line":"                    }"},
{"lineNum":" 1340","line":"                }"},
{"lineNum":" 1341","line":"            }"},
{"lineNum":" 1342","line":"        }"},
{"lineNum":" 1343","line":"    } else {"},
{"lineNum":" 1344","line":"        for (int n = 0; n < bunch.get_local_num(); ++n) {"},
{"lineNum":" 1345","line":"            // domain doesn\'t know about xyz->zyx transformation, so we"},
{"lineNum":" 1346","line":"            // do it in the order of arguments here"},
{"lineNum":" 1347","line":"            rho_grid.get_domain().get_leftmost_indices_offsets("},
{"lineNum":" 1348","line":"                    parts[n][4], parts[n][2], parts[n][0], iz, iy, ix, offz,"},
{"lineNum":" 1349","line":"                    offy, offx);"},
{"lineNum":" 1350","line":"            for (int i = 0; i < 2; ++i) {"},
{"lineNum":" 1351","line":"                for (int j = 0; j < 2; ++j) {"},
{"lineNum":" 1352","line":"                    for (int k = 0; k < 2; ++k) {"},
{"lineNum":" 1353","line":"                        int cellx = ix + i;"},
{"lineNum":" 1354","line":"                        int celly = iy + j;"},
{"lineNum":" 1355","line":"                        int cellz = iz + k;"},
{"lineNum":" 1356","line":"//AM!  make sure the charge distribution is zero at the edge of the grid"},
{"lineNum":" 1357","line":"// THIS toghether with zero electric field at the edge of the grid is essential for a conservative approximation"},
{"lineNum":" 1358","line":"                        if ((cellx >0) && (cellx < int(rho.shape()[2]-1))"},
{"lineNum":" 1359","line":"                                && (celly > 0)"},
{"lineNum":" 1360","line":"                                && (celly < int(rho.shape()[1]-1))"},
{"lineNum":" 1361","line":"                                && (cellz > 0)"},
{"lineNum":" 1362","line":"                                && (cellz < int(rho.shape()[0]-1))) {"},
{"lineNum":" 1363","line":"                            double weight = weight0 * (1 - i - (1 - 2 * i)"},
{"lineNum":" 1364","line":"                                    * offx) * (1 - j - (1 - 2 * j) * offy) * (1"},
{"lineNum":" 1365","line":"                                    - k - (1 - 2 * k) * offz);"},
{"lineNum":" 1366","line":"                            rho[cellz][celly][cellx] += weight;"},
{"lineNum":" 1367","line":"                        }"},
{"lineNum":" 1368","line":"                    }"},
{"lineNum":" 1369","line":"                }"},
{"lineNum":" 1370","line":"            }"},
{"lineNum":" 1371","line":"        }"},
{"lineNum":" 1372","line":"    }"},
{"lineNum":" 1373","line":"}"},
{"lineNum":" 1374","line":""},
{"lineNum":" 1375","line":""},
{"lineNum":" 1376","line":"inline bool ingrid(int x, int gx)"},
{"lineNum":" 1377","line":"{"},
{"lineNum":" 1378","line":"  return x>=0 && x<gx;"},
{"lineNum":" 1379","line":"}"},
{"lineNum":" 1380","line":""},
{"lineNum":" 1381","line":"inline bool ingrid(int x, int y, int z, int gx, int gy, int gz)"},
{"lineNum":" 1382","line":"{"},
{"lineNum":" 1383","line":"  return x>=0 && y>=0 && z>=0 && x<gx && y<gy && z<gz;"},
{"lineNum":" 1384","line":"}"},
{"lineNum":" 1385","line":""},
{"lineNum":" 1386","line":""},
{"lineNum":" 1387","line":"void"},
{"lineNum":" 1388","line":"deposit_charge_rectangular_zyx_omp_reduce(Rectangular_grid & rho_grid, Bunch const& bunch,"},
{"lineNum":" 1389","line":"        bool zero_first)"},
{"lineNum":" 1390","line":"{"},
{"lineNum":" 1391","line":"    MArray3d_ref rho(rho_grid.get_grid_points());"},
{"lineNum":" 1392","line":"    Const_MArray2d_ref parts(bunch.get_local_particles());"},
{"lineNum":" 1393","line":""},
{"lineNum":" 1394","line":"    const std::vector<double> & h    = rho_grid.get_domain_sptr()->get_cell_size();"},
{"lineNum":" 1395","line":"    const std::vector<double> & offs = rho_grid.get_domain_sptr()->get_physical_offset();"},
{"lineNum":" 1396","line":"    const std::vector<double> & size = rho_grid.get_domain_sptr()->get_physical_size();"},
{"lineNum":" 1397","line":""},
{"lineNum":" 1398","line":"    double w0 = (bunch.get_real_num() / bunch.get_total_num())"},
{"lineNum":" 1399","line":"            * bunch.get_particle_charge() * pconstants::e"},
{"lineNum":" 1400","line":"            / (h[0] * h[1] * h[2]);"},
{"lineNum":" 1401","line":""},
{"lineNum":" 1402","line":"    int npart = bunch.get_local_num();"},
{"lineNum":" 1403","line":""},
{"lineNum":" 1404","line":"    int gx = rho.shape()[2];"},
{"lineNum":" 1405","line":"    int gy = rho.shape()[1];"},
{"lineNum":" 1406","line":"    int gz = rho.shape()[0];"},
{"lineNum":" 1407","line":""},
{"lineNum":" 1408","line":"    int nc  = gx * gy * gz; // num of cells"},
{"lineNum":" 1409","line":""},
{"lineNum":" 1410","line":"    static int nt = 0;"},
{"lineNum":" 1411","line":"    static int ncc = 0;"},
{"lineNum":" 1412","line":"    static double * rl = 0;"},
{"lineNum":" 1413","line":"    static double * rs = 0;"},
{"lineNum":" 1414","line":""},
{"lineNum":" 1415","line":"    if( nt==0 )"},
{"lineNum":" 1416","line":"    {"},
{"lineNum":" 1417","line":"        #pragma omp parallel"},
{"lineNum":" 1418","line":"        { nt = omp_get_num_threads(); }"},
{"lineNum":" 1419","line":""},
{"lineNum":" 1420","line":"        ncc = nc;"},
{"lineNum":" 1421","line":""},
{"lineNum":" 1422","line":"        rl = new double[nt*nc];  // nt copies of +1 cells"},
{"lineNum":" 1423","line":"        rs = new double[nc];"},
{"lineNum":" 1424","line":"    }"},
{"lineNum":" 1425","line":""},
{"lineNum":" 1426","line":"    if( nc!=ncc )"},
{"lineNum":" 1427","line":"    {"},
{"lineNum":" 1428","line":"        // bunch geometry has been changed"},
{"lineNum":" 1429","line":"        delete [] rl;"},
{"lineNum":" 1430","line":"        delete [] rs;"},
{"lineNum":" 1431","line":""},
{"lineNum":" 1432","line":"        ncc = nc;"},
{"lineNum":" 1433","line":""},
{"lineNum":" 1434","line":"        rl = new double[nt*nc];  // nt copies of +1 cells"},
{"lineNum":" 1435","line":"        rs = new double[nc];"},
{"lineNum":" 1436","line":"    }"},
{"lineNum":" 1437","line":""},
{"lineNum":" 1438","line":"    double lx = offs[2] - size[2] / 2.0;"},
{"lineNum":" 1439","line":"    double ly = offs[1] - size[1] / 2.0;"},
{"lineNum":" 1440","line":"    double lz = offs[0] - size[0] / 2.0;"},
{"lineNum":" 1441","line":""},
{"lineNum":" 1442","line":"    double cx = h[2];"},
{"lineNum":" 1443","line":"    double cy = h[1];"},
{"lineNum":" 1444","line":"    double cz = h[0];"},
{"lineNum":" 1445","line":""},
{"lineNum":" 1446","line":"    // jfa: This is probably a premature optimization. Two versions of the"},
{"lineNum":" 1447","line":"    // deposit loop -- one for periodic, one for non-periodic."},
{"lineNum":" 1448","line":"    if (rho_grid.get_domain().is_periodic()) {"},
{"lineNum":" 1449","line":"#if 0"},
{"lineNum":" 1450","line":"        for (int n = 0; n < bunch.get_local_num(); ++n) {"},
{"lineNum":" 1451","line":"            // domain doesn\'t know about xyz->zyx transformation, so we"},
{"lineNum":" 1452","line":"            // do it in the order of arguments here"},
{"lineNum":" 1453","line":"            rho_grid.get_domain().get_leftmost_indices_offsets("},
{"lineNum":" 1454","line":"                    parts[n][4], parts[n][2], parts[n][0], iz, iy, ix, offz,"},
{"lineNum":" 1455","line":"                    offy, offx);"},
{"lineNum":" 1456","line":"            for (int i = 0; i < 2; ++i) {"},
{"lineNum":" 1457","line":"                for (int j = 0; j < 2; ++j) {"},
{"lineNum":" 1458","line":"                    for (int k = 0; k < 2; ++k) {"},
{"lineNum":" 1459","line":"                        int cellx = ix + i;"},
{"lineNum":" 1460","line":"                        int celly = iy + j;"},
{"lineNum":" 1461","line":"                        if ((cellx >= 0) && (cellx < int(rho.shape()[2]))"},
{"lineNum":" 1462","line":"                                && (celly >= 0)"},
{"lineNum":" 1463","line":"                                && (celly < int(rho.shape()[1]))) {"},
{"lineNum":" 1464","line":"                            int cellz = iz + k;"},
{"lineNum":" 1465","line":"                            if (cellz >= 0) {"},
{"lineNum":" 1466","line":"                                cellz = cellz % rho.shape()[0];"},
{"lineNum":" 1467","line":"                            } else {"},
{"lineNum":" 1468","line":"                                int period = rho.shape()[0];"},
{"lineNum":" 1469","line":"                                cellz = period - 1 - ((-cellz - 1) % period);"},
{"lineNum":" 1470","line":"                            }"},
{"lineNum":" 1471","line":"                            double weight = weight0 * (1 - i - (1 - 2 * i)"},
{"lineNum":" 1472","line":"                                    * offx) * (1 - j - (1 - 2 * j) * offy) * (1"},
{"lineNum":" 1473","line":"                                    - k - (1 - 2 * k) * offz);"},
{"lineNum":" 1474","line":"                            rho[cellz][celly][cellx] += weight;"},
{"lineNum":" 1475","line":"                        }"},
{"lineNum":" 1476","line":"                    }"},
{"lineNum":" 1477","line":"                }"},
{"lineNum":" 1478","line":"            }"},
{"lineNum":" 1479","line":"        }"},
{"lineNum":" 1480","line":"#endif"},
{"lineNum":" 1481","line":"    }"},
{"lineNum":" 1482","line":"    else"},
{"lineNum":" 1483","line":"    {"},
{"lineNum":" 1484","line":"        #pragma omp parallel shared(npart, parts, lx, ly, lz, cx, cy, cz, w0, gx, gy, gz, rl, rs, nc, rho)"},
{"lineNum":" 1485","line":"        {"},
{"lineNum":" 1486","line":"            int nt = omp_get_num_threads();"},
{"lineNum":" 1487","line":"            int it = omp_get_thread_num();"},
{"lineNum":" 1488","line":""},
{"lineNum":" 1489","line":"            int np = npart;"},
{"lineNum":" 1490","line":"            int le = npart / nt;"},
{"lineNum":" 1491","line":"            int ps = it * le;"},
{"lineNum":" 1492","line":"            int pe = (it == nt-1) ? np : (it+1)*le;"},
{"lineNum":" 1493","line":""},
{"lineNum":" 1494","line":"            // zero the worksheet"},
{"lineNum":" 1495","line":"            std::memset(rl + it*nc, 0, sizeof(double)*nc);"},
{"lineNum":" 1496","line":""},
{"lineNum":" 1497","line":"            double scaled_location;"},
{"lineNum":" 1498","line":"            double ox, oy, oz, w;"},
{"lineNum":" 1499","line":"            int    ix, iy, iz;"},
{"lineNum":" 1500","line":""},
{"lineNum":" 1501","line":"            for(int n=ps; n<pe; ++n)"},
{"lineNum":" 1502","line":"            {"},
{"lineNum":" 1503","line":"                scaled_location = (parts[n][0] - lx) / cx - 0.5;"},
{"lineNum":" 1504","line":"                ix = fast_int_floor(scaled_location);"},
{"lineNum":" 1505","line":"                ox = scaled_location - ix;"},
{"lineNum":" 1506","line":""},
{"lineNum":" 1507","line":"                scaled_location = (parts[n][2] - ly) / cy - 0.5;"},
{"lineNum":" 1508","line":"                iy = fast_int_floor(scaled_location);"},
{"lineNum":" 1509","line":"                oy = scaled_location - iy;"},
{"lineNum":" 1510","line":""},
{"lineNum":" 1511","line":"                scaled_location = (parts[n][4] - lz) / cz - 0.5;"},
{"lineNum":" 1512","line":"                iz = fast_int_floor(scaled_location);"},
{"lineNum":" 1513","line":"                oz = scaled_location - iz;"},
{"lineNum":" 1514","line":""},
{"lineNum":" 1515","line":"                int base = iz * gx * gy;"},
{"lineNum":" 1516","line":""},
{"lineNum":" 1517","line":"                if( ingrid(ix  , iy  , iz, gx, gy, gz) )"},
{"lineNum":" 1518","line":"                    rl[(base + (iy  )*gx + ix  )*nt+it] += w0*(1-ox)*(1-oy)*(1-oz);"},
{"lineNum":" 1519","line":"                if( ingrid(ix+1, iy  , iz, gx, gy, gz) )"},
{"lineNum":" 1520","line":"                    rl[(base + (iy  )*gx + ix+1)*nt+it] += w0*(  ox)*(1-oy)*(1-oz);"},
{"lineNum":" 1521","line":"                if( ingrid(ix  , iy+1, iz, gx, gy, gz) )"},
{"lineNum":" 1522","line":"                    rl[(base + (iy+1)*gx + ix  )*nt+it] += w0*(1-ox)*(  oy)*(1-oz);"},
{"lineNum":" 1523","line":"                if( ingrid(ix+1, iy+1, iz, gx, gy, gz) )"},
{"lineNum":" 1524","line":"                    rl[(base + (iy+1)*gx + ix+1)*nt+it] += w0*(  ox)*(  oy)*(1-oz);"},
{"lineNum":" 1525","line":""},
{"lineNum":" 1526","line":"                base = (iz+1) * gx * gy;"},
{"lineNum":" 1527","line":""},
{"lineNum":" 1528","line":"                if( ingrid(ix  , iy  , iz+1, gx, gy, gz) )"},
{"lineNum":" 1529","line":"                    rl[(base + (iy  )*gx + ix  )*nt+it] += w0*(1-ox)*(1-oy)*(oz);"},
{"lineNum":" 1530","line":"                if( ingrid(ix+1, iy  , iz+1, gx, gy, gz) )"},
{"lineNum":" 1531","line":"                    rl[(base + (iy  )*gx + ix+1)*nt+it] += w0*(  ox)*(1-oy)*(oz);"},
{"lineNum":" 1532","line":"                if( ingrid(ix  , iy+1, iz+1, gx, gy, gz) )"},
{"lineNum":" 1533","line":"                    rl[(base + (iy+1)*gx + ix  )*nt+it] += w0*(1-ox)*(  oy)*(oz);"},
{"lineNum":" 1534","line":"                if( ingrid(ix+1, iy+1, iz+1, gx, gy, gz) )"},
{"lineNum":" 1535","line":"                    rl[(base + (iy+1)*gx + ix+1)*nt+it] += w0*(  ox)*(  oy)*(oz);"},
{"lineNum":" 1536","line":"            }"},
{"lineNum":" 1537","line":""},
{"lineNum":" 1538","line":"            #pragma omp barrier"},
{"lineNum":" 1539","line":""},
{"lineNum":" 1540","line":"            // reduction"},
{"lineNum":" 1541","line":"            le = gz/nt;"},
{"lineNum":" 1542","line":"            ps = it*le;"},
{"lineNum":" 1543","line":"            pe = (it == nt-1) ? gz : (ps + le);"},
{"lineNum":" 1544","line":""},
{"lineNum":" 1545","line":"            for(int z=ps; z<pe; ++z)"},
{"lineNum":" 1546","line":"            {"},
{"lineNum":" 1547","line":"                for(int y=0; y<gy; ++y)"},
{"lineNum":" 1548","line":"                {"},
{"lineNum":" 1549","line":"                    for(int x=0; x<gx; ++x)"},
{"lineNum":" 1550","line":"                    {"},
{"lineNum":" 1551","line":"                        w = 0.0;"},
{"lineNum":" 1552","line":"                        for(int n=0; n<nt; ++n) w += rl[(z*gx*gy + y*gx + x)*nt+n];"},
{"lineNum":" 1553","line":"                        rs[z*gx*gy + y*gx +x] = w;"},
{"lineNum":" 1554","line":"                    }"},
{"lineNum":" 1555","line":"                }"},
{"lineNum":" 1556","line":"            }"},
{"lineNum":" 1557","line":""},
{"lineNum":" 1558","line":"            #pragma omp barrier"},
{"lineNum":" 1559","line":""},
{"lineNum":" 1560","line":"        } //  end of #pragma parallel"},
{"lineNum":" 1561","line":""},
{"lineNum":" 1562","line":"    } // end of periodic if"},
{"lineNum":" 1563","line":""},
{"lineNum":" 1564","line":"    memcpy( rho.data(), rs, sizeof(double)*nc );"},
{"lineNum":" 1565","line":"}"},
{"lineNum":" 1566","line":""},
{"lineNum":" 1567","line":""},
{"lineNum":" 1568","line":"void"},
{"lineNum":" 1569","line":"deposit_charge_rectangular_zyx_omp_interleaved(Rectangular_grid & rho_grid, Bunch const& bunch,"},
{"lineNum":" 1570","line":"        bool zero_first)"},
{"lineNum":" 1571","line":"{"},
{"lineNum":" 1572","line":"    MArray3d_ref rho(rho_grid.get_grid_points());"},
{"lineNum":" 1573","line":"    Const_MArray2d_ref parts(bunch.get_local_particles());"},
{"lineNum":" 1574","line":""},
{"lineNum":" 1575","line":"    int gx = rho.shape()[2];"},
{"lineNum":" 1576","line":"    int gy = rho.shape()[1];"},
{"lineNum":" 1577","line":"    int gz = rho.shape()[0];"},
{"lineNum":" 1578","line":""},
{"lineNum":" 1579","line":"    int npart = bunch.get_local_num();"},
{"lineNum":" 1580","line":""},
{"lineNum":" 1581","line":"    double * po = new double[npart*3];  // offx, offy, offz"},
{"lineNum":" 1582","line":"    int    * pi = new int[npart];       // cell index of particles"},
{"lineNum":" 1583","line":"    int    * pc = new int[gx*gy*gz+1];  // accumulated particle count in cells"},
{"lineNum":" 1584","line":"    int    * count = new int[gx*gy*gz]; // particle count in cells"},
{"lineNum":" 1585","line":"    int    * pll = new int[npart];      // indexed list"},
{"lineNum":" 1586","line":""},
{"lineNum":" 1587","line":"    static int nt = 0;"},
{"lineNum":" 1588","line":""},
{"lineNum":" 1589","line":"    if( nt==0 )"},
{"lineNum":" 1590","line":"    {"},
{"lineNum":" 1591","line":"        #pragma omp parallel"},
{"lineNum":" 1592","line":"        { nt = omp_get_num_threads(); }"},
{"lineNum":" 1593","line":"    }"},
{"lineNum":" 1594","line":""},
{"lineNum":" 1595","line":"    #pragma omp parallel for"},
{"lineNum":" 1596","line":"    for(int i=0; i<gx*gy*gz+1; ++i) pc[i] = 0;"},
{"lineNum":" 1597","line":"    //memset( pc   , 0, sizeof(int)*(gx*gy*gz+1) );"},
{"lineNum":" 1598","line":""},
{"lineNum":" 1599","line":"    #pragma omp parallel for"},
{"lineNum":" 1600","line":"    for(int i=0; i<gx*gy*gz; ++i) count[i] = 0;"},
{"lineNum":" 1601","line":"    //memset( count, 0, sizeof(int)*(gx*gy*gz) );"},
{"lineNum":" 1602","line":""},
{"lineNum":" 1603","line":"    if (zero_first) {"},
{"lineNum":" 1604","line":"      #pragma omp parallel for"},
{"lineNum":" 1605","line":"      for(int i=0; i<gx*gy*gz; ++i)"},
{"lineNum":" 1606","line":"        ((double*)&rho[0][0][0])[i] = 0.0;"},
{"lineNum":" 1607","line":"      //memset( &rho[0][0][0], 0, sizeof(double)*gx*gy*gz );"},
{"lineNum":" 1608","line":"    }"},
{"lineNum":" 1609","line":""},
{"lineNum":" 1610","line":"    std::vector<double > h(rho_grid.get_domain_sptr()->get_cell_size());"},
{"lineNum":" 1611","line":"    double weight0 = (bunch.get_real_num() / bunch.get_total_num())"},
{"lineNum":" 1612","line":"            * bunch.get_particle_charge() * pconstants::e"},
{"lineNum":" 1613","line":"            / (h[0] * h[1] * h[2]);"},
{"lineNum":" 1614","line":"    int ix, iy, iz;"},
{"lineNum":" 1615","line":"    double offx, offy, offz;"},
{"lineNum":" 1616","line":""},
{"lineNum":" 1617","line":"    const std::vector<double> & offs  = rho_grid.get_domain_sptr()->get_physical_offset();"},
{"lineNum":" 1618","line":"    const std::vector<double> & size  = rho_grid.get_domain_sptr()->get_physical_size();"},
{"lineNum":" 1619","line":""},
{"lineNum":" 1620","line":"    double lx = offs[2] - size[2] / 2.0;"},
{"lineNum":" 1621","line":"    double ly = offs[1] - size[1] / 2.0;"},
{"lineNum":" 1622","line":"    double lz = offs[0] - size[0] / 2.0;"},
{"lineNum":" 1623","line":""},
{"lineNum":" 1624","line":"    double cx = h[2];"},
{"lineNum":" 1625","line":"    double cy = h[1];"},
{"lineNum":" 1626","line":"    double cz = h[0];"},
{"lineNum":" 1627","line":""},
{"lineNum":" 1628","line":"    double w0 = weight0;"},
{"lineNum":" 1629","line":""},
{"lineNum":" 1630","line":"    // jfa: This is probably a premature optimization. Two versions of the"},
{"lineNum":" 1631","line":"    // deposit loop -- one for periodic, one for non-periodic."},
{"lineNum":" 1632","line":"    if (rho_grid.get_domain_sptr()->is_periodic())"},
{"lineNum":" 1633","line":"    {"},
{"lineNum":" 1634","line":"#if 0"},
{"lineNum":" 1635","line":"        for (int n = 0; n < bunch.get_local_num(); ++n)"},
{"lineNum":" 1636","line":"        {"},
{"lineNum":" 1637","line":"            // domain doesn\'t know about xyz->zyx transformation, so we"},
{"lineNum":" 1638","line":"            // do it in the order of arguments here"},
{"lineNum":" 1639","line":"            rho_grid.get_domain_sptr()->get_leftmost_indices_offsets("},
{"lineNum":" 1640","line":"                    parts[n][4], parts[n][2], parts[n][0], iz, iy, ix, offz,"},
{"lineNum":" 1641","line":"                    offy, offx);"},
{"lineNum":" 1642","line":""},
{"lineNum":" 1643","line":"            for (int i = 0; i < 2; ++i) {"},
{"lineNum":" 1644","line":"                for (int j = 0; j < 2; ++j) {"},
{"lineNum":" 1645","line":"                    for (int k = 0; k < 2; ++k) {"},
{"lineNum":" 1646","line":"                        int cellx = ix + i;"},
{"lineNum":" 1647","line":"                        int celly = iy + j;"},
{"lineNum":" 1648","line":""},
{"lineNum":" 1649","line":"                        if ((cellx >= 0) && (cellx < int(rho.shape()[2]))"},
{"lineNum":" 1650","line":"                                && (celly >= 0)"},
{"lineNum":" 1651","line":"                                && (celly < int(rho.shape()[1]))) {"},
{"lineNum":" 1652","line":"                            int cellz = iz + k;"},
{"lineNum":" 1653","line":""},
{"lineNum":" 1654","line":"                            if (cellz >= 0) {"},
{"lineNum":" 1655","line":"                                cellz = cellz % rho.shape()[0];"},
{"lineNum":" 1656","line":"                            } else {"},
{"lineNum":" 1657","line":"                                int period = rho.shape()[0];"},
{"lineNum":" 1658","line":"                                cellz = period - 1 - ((-cellz - 1) % period);"},
{"lineNum":" 1659","line":"                            }"},
{"lineNum":" 1660","line":""},
{"lineNum":" 1661","line":"                            double weight = weight0 * (1 - i - (1 - 2 * i) * offx)"},
{"lineNum":" 1662","line":"                                                    * (1 - j - (1 - 2 * j) * offy)"},
{"lineNum":" 1663","line":"                                                    * (1 - k - (1 - 2 * k) * offz);"},
{"lineNum":" 1664","line":""},
{"lineNum":" 1665","line":"                            rho[cellz][celly][cellx] += weight;"},
{"lineNum":" 1666","line":"                        }"},
{"lineNum":" 1667","line":""},
{"lineNum":" 1668","line":"                    } // end of k"},
{"lineNum":" 1669","line":"                } // end of j"},
{"lineNum":" 1670","line":"            } // end of i"},
{"lineNum":" 1671","line":"        }"},
{"lineNum":" 1672","line":"#endif"},
{"lineNum":" 1673","line":"    }"},
{"lineNum":" 1674","line":"    else"},
{"lineNum":" 1675","line":"    {"},
{"lineNum":" 1676","line":"        // decl. for private variables"},
{"lineNum":" 1677","line":"        int n, i, c_idx, x, y, z;"},
{"lineNum":" 1678","line":"        int tid, nthreads, seg;"},
{"lineNum":" 1679","line":"        double scaled_location;"},
{"lineNum":" 1680","line":"        double w, ox, oy, oz;"},
{"lineNum":" 1681","line":""},
{"lineNum":" 1682","line":"        int * p;"},
{"lineNum":" 1683","line":"        double * ws0;"},
{"lineNum":" 1684","line":"        double * ws1;"},
{"lineNum":" 1685","line":""},
{"lineNum":" 1686","line":"        // count"},
{"lineNum":" 1687","line":"        #pragma omp parallel for \\"},
{"lineNum":" 1688","line":"            shared( pi, po ) \\"},
{"lineNum":" 1689","line":"            private(n, c_idx, p, ix, iy, iz, offx, offy, offz, scaled_location)"},
{"lineNum":" 1690","line":"        for(n=0; n<npart; ++n )"},
{"lineNum":" 1691","line":"        {"},
{"lineNum":" 1692","line":"            scaled_location = (parts[n][0] - lx) / cx - 0.5;"},
{"lineNum":" 1693","line":"            ix = fast_int_floor(scaled_location);"},
{"lineNum":" 1694","line":"            offx = scaled_location - ix;"},
{"lineNum":" 1695","line":""},
{"lineNum":" 1696","line":"            scaled_location = (parts[n][2] - ly) / cy - 0.5;"},
{"lineNum":" 1697","line":"            iy = fast_int_floor(scaled_location);"},
{"lineNum":" 1698","line":"            offy = scaled_location - iy;"},
{"lineNum":" 1699","line":""},
{"lineNum":" 1700","line":"            scaled_location = (parts[n][4] - lz) / cz - 0.5;"},
{"lineNum":" 1701","line":"            iz = fast_int_floor(scaled_location);"},
{"lineNum":" 1702","line":"            offz = scaled_location - iz;"},
{"lineNum":" 1703","line":""},
{"lineNum":" 1704","line":"            if( ix<0 || iy<0 || iz<0 || ix>=gx || iy>=gy || iz>=gz )"},
{"lineNum":" 1705","line":"            {"},
{"lineNum":" 1706","line":"              pi[n] = -1;"},
{"lineNum":" 1707","line":"            }"},
{"lineNum":" 1708","line":"            else"},
{"lineNum":" 1709","line":"            {"},
{"lineNum":" 1710","line":"              c_idx = iz*gx*gy + iy*gx + ix;"},
{"lineNum":" 1711","line":"              pi[n] = c_idx;"},
{"lineNum":" 1712","line":""},
{"lineNum":" 1713","line":"              po[n*3+0] = offx;"},
{"lineNum":" 1714","line":"              po[n*3+1] = offy;"},
{"lineNum":" 1715","line":"              po[n*3+2] = offz;"},
{"lineNum":" 1716","line":""},
{"lineNum":" 1717","line":"              // gcc build-in atomic add"},
{"lineNum":" 1718","line":"              __sync_fetch_and_add(pc+c_idx+1, 1);"},
{"lineNum":" 1719","line":""},
{"lineNum":" 1720","line":"              // another choice is to use the omp atomic"},
{"lineNum":" 1721","line":"              //#pragma omp atomic"},
{"lineNum":" 1722","line":"              //++pc[c_idx+1];"},
{"lineNum":" 1723","line":"            }"},
{"lineNum":" 1724","line":"        }"},
{"lineNum":" 1725","line":""},
{"lineNum":" 1726","line":"        // accumulate particle counts"},
{"lineNum":" 1727","line":"        for(i=1; i<=gx*gy*gz; ++i)"},
{"lineNum":" 1728","line":"          pc[i] += pc[i-1];"},
{"lineNum":" 1729","line":""},
{"lineNum":" 1730","line":"        int idx, pos;"},
{"lineNum":" 1731","line":""},
{"lineNum":" 1732","line":"        // build indexed list in parallel"},
{"lineNum":" 1733","line":"        #pragma omp parallel for shared(pi, count) private(i, idx, pos)"},
{"lineNum":" 1734","line":"        for(i=0; i<npart; ++i)"},
{"lineNum":" 1735","line":"        {"},
{"lineNum":" 1736","line":"          idx = pi[i];"},
{"lineNum":" 1737","line":"          if( idx==-1 ) continue;"},
{"lineNum":" 1738","line":"          pos = pc[idx] + __sync_fetch_and_add( count+idx, 1 );"},
{"lineNum":" 1739","line":"          pll[pos] = i;"},
{"lineNum":" 1740","line":"        }"},
{"lineNum":" 1741","line":""},
{"lineNum":" 1742","line":"        // deposit to cells"},
{"lineNum":" 1743","line":"        #pragma omp parallel \\"},
{"lineNum":" 1744","line":"            shared( rho, pi, po, pc, count, pll  ) \\"},
{"lineNum":" 1745","line":"            private(x, y, z, ox, oy, oz, n, i, c_idx, w, ws0, ws1, tid, nthreads, seg)"},
{"lineNum":" 1746","line":"        {"},
{"lineNum":" 1747","line":"          tid = omp_get_thread_num();"},
{"lineNum":" 1748","line":"          nthreads = omp_get_num_threads();"},
{"lineNum":" 1749","line":""},
{"lineNum":" 1750","line":"          // temp work table to hold intermediate results"},
{"lineNum":" 1751","line":"          ws0 = new double[(gx+1)*(gy+1)]();"},
{"lineNum":" 1752","line":"          ws1 = new double[(gx+1)*(gy+1)]();"},
{"lineNum":" 1753","line":""},
{"lineNum":" 1754","line":"          // interleaved partitioning along z-axis to have"},
{"lineNum":" 1755","line":"          // evenly balanced loads for each thread"},
{"lineNum":" 1756","line":"          for(z=tid; z<gz; z+=nthreads)"},
{"lineNum":" 1757","line":"          {"},
{"lineNum":" 1758","line":"            memset(ws0, 0, sizeof(double)*(gx+1)*(gy+1));"},
{"lineNum":" 1759","line":"            memset(ws1, 0, sizeof(double)*(gx+1)*(gy+1));"},
{"lineNum":" 1760","line":""},
{"lineNum":" 1761","line":"            for(x=0; x<gx; ++x)"},
{"lineNum":" 1762","line":"            {"},
{"lineNum":" 1763","line":"              for(y=0; y<gy; ++y)"},
{"lineNum":" 1764","line":"              {"},
{"lineNum":" 1765","line":"                c_idx = z*gx*gy + y*gx + x;"},
{"lineNum":" 1766","line":""},
{"lineNum":" 1767","line":"                for(n=0; n<count[c_idx]; ++n)"},
{"lineNum":" 1768","line":"                {"},
{"lineNum":" 1769","line":"                  i = pll[pc[c_idx]+n]; // index of the particle"},
{"lineNum":" 1770","line":""},
{"lineNum":" 1771","line":"                  ox = po[i*3+0]; oy = po[i*3+1]; oz = po[i*3+2];"},
{"lineNum":" 1772","line":""},
{"lineNum":" 1773","line":"                  w = w0 * (1-ox) * (1-oy) * (1-oz); ws0[(y  )*(gx+1) + x  ] += w;"},
{"lineNum":" 1774","line":"                  w = w0 * (  ox) * (1-oy) * (1-oz); ws0[(y  )*(gx+1) + x+1] += w;"},
{"lineNum":" 1775","line":"                  w = w0 * (1-ox) * (  oy) * (1-oz); ws0[(y+1)*(gx+1) + x  ] += w;"},
{"lineNum":" 1776","line":"                  w = w0 * (  ox) * (  oy) * (1-oz); ws0[(y+1)*(gx+1) + x+1] += w;"},
{"lineNum":" 1777","line":""},
{"lineNum":" 1778","line":"                  w = w0 * (1-ox) * (1-oy) * (  oz); ws1[(y  )*(gx+1) + x  ] += w;"},
{"lineNum":" 1779","line":"                  w = w0 * (  ox) * (1-oy) * (  oz); ws1[(y  )*(gx+1) + x+1] += w;"},
{"lineNum":" 1780","line":"                  w = w0 * (1-ox) * (  oy) * (  oz); ws1[(y+1)*(gx+1) + x  ] += w;"},
{"lineNum":" 1781","line":"                  w = w0 * (  ox) * (  oy) * (  oz); ws1[(y+1)*(gx+1) + x+1] += w;"},
{"lineNum":" 1782","line":"                }"},
{"lineNum":" 1783","line":""},
{"lineNum":" 1784","line":"              } //end of y"},
{"lineNum":" 1785","line":"            } // end of x"},
{"lineNum":" 1786","line":""},
{"lineNum":" 1787","line":"            // write to global memory"},
{"lineNum":" 1788","line":"            for(x=0; x<gx; ++x)"},
{"lineNum":" 1789","line":"              for(y=0; y<gy; ++y)"},
{"lineNum":" 1790","line":"                rho[z][y][x] += ws0[ y*(gx+1) + x ];"},
{"lineNum":" 1791","line":""},
{"lineNum":" 1792","line":"            // a synchronization is needed to avoid data pollution"},
{"lineNum":" 1793","line":"            #pragma omp barrier"},
{"lineNum":" 1794","line":""},
{"lineNum":" 1795","line":"            if( z!=gz-1 )"},
{"lineNum":" 1796","line":"              for(x=0; x<gx; ++x)"},
{"lineNum":" 1797","line":"                for(y=0; y<gy; ++y)"},
{"lineNum":" 1798","line":"                  rho[z+1][y][x] += ws1[ y*(gx+1) + x ];"},
{"lineNum":" 1799","line":""},
{"lineNum":" 1800","line":"          } // end of z loop"},
{"lineNum":" 1801","line":""},
{"lineNum":" 1802","line":""},
{"lineNum":" 1803","line":"          delete [] ws0;"},
{"lineNum":" 1804","line":"          delete [] ws1;"},
{"lineNum":" 1805","line":"        }"},
{"lineNum":" 1806","line":""},
{"lineNum":" 1807","line":"    }"},
{"lineNum":" 1808","line":""},
{"lineNum":" 1809","line":"    delete [] po;"},
{"lineNum":" 1810","line":"    delete [] pi;"},
{"lineNum":" 1811","line":"    delete [] pc;"},
{"lineNum":" 1812","line":"    delete [] count;"},
{"lineNum":" 1813","line":"    delete [] pll;"},
{"lineNum":" 1814","line":"}"},
{"lineNum":" 1815","line":""},
{"lineNum":" 1816","line":""},
{"lineNum":" 1817","line":""},
{"lineNum":" 1818","line":"void"},
{"lineNum":" 1819","line":"deposit_charge_rectangular_xyz(Rectangular_grid & rho_grid, Bunch const& bunch,"},
{"lineNum":" 1820","line":"        bool zero_first)"},
{"lineNum":" 1821","line":"{"},
{"lineNum":" 1822","line":"// the particles close (i.e at a distance smaller than cell_size/2) to the grid edges are not deposited"},
{"lineNum":" 1823","line":"// they should aslo not be kicked by the electric field"},
{"lineNum":" 1824","line":""},
{"lineNum":" 1825","line":"    std::vector<double > h(rho_grid.get_domain().get_cell_size());"},
{"lineNum":" 1826","line":"    double weight0 = (bunch.get_real_num() / bunch.get_total_num())"},
{"lineNum":" 1827","line":"            * bunch.get_particle_charge() * pconstants::e"},
{"lineNum":" 1828","line":"            / (h[0] * h[1] * h[2]);"},
{"lineNum":" 1829","line":""},
{"lineNum":" 1830","line":""},
{"lineNum":" 1831","line":"    MArray3d_ref rho(rho_grid.get_grid_points());"},
{"lineNum":" 1832","line":"    Const_MArray2d_ref parts(bunch.get_local_particles());"},
{"lineNum":" 1833","line":"    if (zero_first) {"},
{"lineNum":" 1834","line":"        for (unsigned int i = 0; i < rho.shape()[0]; ++i) {"},
{"lineNum":" 1835","line":"            for (unsigned int j = 0; j < rho.shape()[1]; ++j) {"},
{"lineNum":" 1836","line":"                for (unsigned int k = 0; k < rho.shape()[2]; ++k) {"},
{"lineNum":" 1837","line":"                    rho[i][j][k] = 0.0;"},
{"lineNum":" 1838","line":"                }"},
{"lineNum":" 1839","line":"            }"},
{"lineNum":" 1840","line":"        }"},
{"lineNum":" 1841","line":"    }"},
{"lineNum":" 1842","line":""},
{"lineNum":" 1843","line":""},
{"lineNum":" 1844","line":"    int ix, iy, iz;"},
{"lineNum":" 1845","line":"    double offx, offy, offz;"},
{"lineNum":" 1846","line":"    if (rho_grid.get_domain().is_periodic()) {"},
{"lineNum":" 1847","line":"        for (int n = 0; n < bunch.get_local_num(); ++n) {"},
{"lineNum":" 1848","line":"            if (rho_grid.get_domain().get_leftmost_indices_offsets("},
{"lineNum":" 1849","line":"                        parts[n][0], parts[n][2], parts[n][4], ix, iy, iz, offx, offy, offz)){"},
{"lineNum":" 1850","line":"                for (int i = 0; i < 2; ++i) {"},
{"lineNum":" 1851","line":"                    for (int j = 0; j < 2; ++j) {"},
{"lineNum":" 1852","line":"                        int cellx = ix + i;"},
{"lineNum":" 1853","line":"                        int celly = iy + j;"},
{"lineNum":" 1854","line":"                        for (int k = 0; k < 2; ++k) {"},
{"lineNum":" 1855","line":"                            if ((cellx >0) && (cellx < int(rho.shape()[0]-1))"},
{"lineNum":" 1856","line":"                                && (celly > 0)"},
{"lineNum":" 1857","line":"                                && (celly < int(rho.shape()[1]-1))) {"},
{"lineNum":" 1858","line":"                                  int cellz = iz + k;"},
{"lineNum":" 1859","line":"                                  int period = rho.shape()[2];"},
{"lineNum":" 1860","line":"                                  cellz = (cellz % period)*(cellz >= 0)+(period - 1 - ((-cellz - 1) % period))*(cellz < 0);"},
{"lineNum":" 1861","line":"                                  double weight = weight0 * (1 - i - (1 - 2 * i) * offx) *"},
{"lineNum":" 1862","line":"                                              (1 - j - (1 - 2 * j) * offy) *"},
{"lineNum":" 1863","line":"                                              (1 - k - (1 - 2 * k) * offz);"},
{"lineNum":" 1864","line":"                                  rho[cellx][celly][cellz] += weight;"},
{"lineNum":" 1865","line":"                           }"},
{"lineNum":" 1866","line":"                       }"},
{"lineNum":" 1867","line":"                    }"},
{"lineNum":" 1868","line":"                }"},
{"lineNum":" 1869","line":"            }"},
{"lineNum":" 1870","line":"        }"},
{"lineNum":" 1871","line":"    }"},
{"lineNum":" 1872","line":"    else{"},
{"lineNum":" 1873","line":"        for (int n = 0; n < bunch.get_local_num(); ++n) {"},
{"lineNum":" 1874","line":"            if (rho_grid.get_domain().get_leftmost_indices_offsets("},
{"lineNum":" 1875","line":"                        parts[n][0], parts[n][2], parts[n][4], ix, iy, iz, offx, offy, offz)){"},
{"lineNum":" 1876","line":"                for (int i = 0; i < 2; ++i) {"},
{"lineNum":" 1877","line":"                    for (int j = 0; j < 2; ++j) {"},
{"lineNum":" 1878","line":"                        for (int k = 0; k < 2; ++k) {"},
{"lineNum":" 1879","line":"                            int cellx = ix + i;"},
{"lineNum":" 1880","line":"                            int celly = iy + j;"},
{"lineNum":" 1881","line":"                            int cellz = iz + k;"},
{"lineNum":" 1882","line":"                            if ((cellx >0) && (cellx < int(rho.shape()[0]-1))"},
{"lineNum":" 1883","line":"                                && (celly > 0)"},
{"lineNum":" 1884","line":"                                && (celly < int(rho.shape()[1]-1))"},
{"lineNum":" 1885","line":"                                && (cellz > 0)"},
{"lineNum":" 1886","line":"                                && (cellz < int(rho.shape()[2]-1))) {"},
{"lineNum":" 1887","line":"                                      double weight = weight0 * (1 - i - (1 - 2 * i) * offx) *"},
{"lineNum":" 1888","line":"                                                  (1 - j - (1 - 2 * j) * offy) *"},
{"lineNum":" 1889","line":"                                                  (1 - k - (1 - 2 * k) * offz);"},
{"lineNum":" 1890","line":"                                      rho[cellx][celly][cellz] += weight;"},
{"lineNum":" 1891","line":"                            }"},
{"lineNum":" 1892","line":"                        }"},
{"lineNum":" 1893","line":"                    }"},
{"lineNum":" 1894","line":"                }"},
{"lineNum":" 1895","line":"            }"},
{"lineNum":" 1896","line":"        }"},
{"lineNum":" 1897","line":"    }"},
{"lineNum":" 1898","line":"   //  rho_grid.set_normalization(total_charge_per_cell_vol*(h[0] * h[1] * h[2]));"},
{"lineNum":" 1899","line":""},
{"lineNum":" 1900","line":"}"},
{"lineNum":" 1901","line":""},
{"lineNum":" 1902","line":"void"},
{"lineNum":" 1903","line":"deposit_charge_rectangular_2d(Rectangular_grid & rho_grid, Bunch const& bunch,"},
{"lineNum":" 1904","line":"        bool zero_first)"},
{"lineNum":" 1905","line":"{"},
{"lineNum":" 1906","line":"    MArray2dc_ref rho_2dc(rho_grid.get_grid_points_2dc());"},
{"lineNum":" 1907","line":"    MArray1d_ref rho_1d(rho_grid.get_grid_points_1d());"},
{"lineNum":" 1908","line":"    Const_MArray2d_ref parts(bunch.get_local_particles());"},
{"lineNum":" 1909","line":"    std::vector<int > grid_shape(3);"},
{"lineNum":" 1910","line":"    grid_shape[0] = rho_2dc.shape()[0];"},
{"lineNum":" 1911","line":"    grid_shape[1] = rho_2dc.shape()[1];"},
{"lineNum":" 1912","line":"    grid_shape[2] = rho_1d.shape()[0];"},
{"lineNum":" 1913","line":"    if (zero_first) {"},
{"lineNum":" 1914","line":"        for (int i = 0; i < grid_shape[0]; ++i) {           // x"},
{"lineNum":" 1915","line":"            for (int j = 0; j < grid_shape[1]; ++j) {       // y"},
{"lineNum":" 1916","line":"                rho_2dc[i][j] = 0.0;"},
{"lineNum":" 1917","line":"            }"},
{"lineNum":" 1918","line":"        }"},
{"lineNum":" 1919","line":"        for (int k = 0; k < grid_shape[2]; ++k) {            // z"},
{"lineNum":" 1920","line":"            rho_1d[k] = 0.0;"},
{"lineNum":" 1921","line":"        }"},
{"lineNum":" 1922","line":"    }"},
{"lineNum":" 1923","line":"    std::vector<double > h(rho_grid.get_domain().get_cell_size());"},
{"lineNum":" 1924","line":"    double weight0 = (bunch.get_real_num() / bunch.get_total_num())"},
{"lineNum":" 1925","line":"            * bunch.get_particle_charge() * pconstants::e"},
{"lineNum":" 1926","line":"            / (h[0] * h[1]); // * h[2]);"},
{"lineNum":" 1927","line":"    int ix, iy, iz;"},
{"lineNum":" 1928","line":"    double offx, offy, offz;"},
{"lineNum":" 1929","line":"    if (grid_shape[2] == 1) {"},
{"lineNum":" 1930","line":"        double mean(Core_diagnostics::calculate_z_mean(bunch));"},
{"lineNum":" 1931","line":"        double std(Core_diagnostics::calculate_z_std(bunch, mean));"},
{"lineNum":" 1932","line":"        rho_1d[0] = bunch.get_total_num() / (std::sqrt(12.0) * std);"},
{"lineNum":" 1933","line":"    }"},
{"lineNum":" 1934","line":"    for (int n = 0; n < bunch.get_local_num(); ++n) {"},
{"lineNum":" 1935","line":"        // no xyz->zyx transformation"},
{"lineNum":" 1936","line":"        rho_grid.get_domain().get_leftmost_indices_offsets("},
{"lineNum":" 1937","line":"                parts[n][0], parts[n][2], parts[n][4], ix, iy, iz, offx,"},
{"lineNum":" 1938","line":"                offy, offz);"},
{"lineNum":" 1939","line":"        for (int i = 0; i < 2; ++i) {"},
{"lineNum":" 1940","line":"            for (int j = 0; j < 2; ++j) {"},
{"lineNum":" 1941","line":"                int cellx = ix + i;"},
{"lineNum":" 1942","line":"                int celly = iy + j;"},
{"lineNum":" 1943","line":"                if ((cellx >= 0) && (cellx < grid_shape[0]) && (celly >= 0)"},
{"lineNum":" 1944","line":"                        && (celly < grid_shape[1])) {"},
{"lineNum":" 1945","line":"                    double weight = weight0 * (1 - i - (1 - 2 * i)"},
{"lineNum":" 1946","line":"                            * offx) * (1 - j - (1 - 2 * j) * offy);"},
{"lineNum":" 1947","line":"                    rho_2dc[cellx][celly] += weight;"},
{"lineNum":" 1948","line":"                }"},
{"lineNum":" 1949","line":"            }"},
{"lineNum":" 1950","line":"        }"},
{"lineNum":" 1951","line":"        for (int k = 0; k < 2; ++k) {"},
{"lineNum":" 1952","line":"            int cellz = iz + k;"},
{"lineNum":" 1953","line":"            if ((grid_shape[2] > 1) && (cellz >= 0) && (cellz < grid_shape[2])) {"},
{"lineNum":" 1954","line":"                double weight = (1 - k - (1 - 2 * k) * offz) / h[2];"},
{"lineNum":" 1955","line":"                rho_1d[cellz] += weight;"},
{"lineNum":" 1956","line":"            }"},
{"lineNum":" 1957","line":"        }"},
{"lineNum":" 1958","line":"    }"},
{"lineNum":" 1959","line":"}"},
{"lineNum":" 1960","line":""},
{"lineNum":" 1961","line":"void"},
{"lineNum":" 1962","line":"deposit_charge_rectangular_2d(Rectangular_grid & rho_grid,"},
{"lineNum":" 1963","line":"        Raw_MArray2d & particle_bin, Bunch const& bunch, bool zero_first)"},
{"lineNum":" 1964","line":"{"},
{"lineNum":" 1965","line":"    MArray2dc_ref rho_2dc(rho_grid.get_grid_points_2dc());"},
{"lineNum":" 1966","line":"    MArray1d_ref rho_1d(rho_grid.get_grid_points_1d());"},
{"lineNum":" 1967","line":"    Const_MArray2d_ref parts(bunch.get_local_particles());"},
{"lineNum":" 1968","line":"    std::vector<int > grid_shape(3);"},
{"lineNum":" 1969","line":"    grid_shape[0] = rho_2dc.shape()[0];"},
{"lineNum":" 1970","line":"    grid_shape[1] = rho_2dc.shape()[1];"},
{"lineNum":" 1971","line":"    grid_shape[2] = rho_1d.shape()[0];"},
{"lineNum":" 1972","line":"    if (zero_first) {"},
{"lineNum":" 1973","line":"        for (int i = 0; i < grid_shape[0]; ++i) {           // x"},
{"lineNum":" 1974","line":"            for (int j = 0; j < grid_shape[1]; ++j) {       // y"},
{"lineNum":" 1975","line":"                rho_2dc[i][j] = 0.0;"},
{"lineNum":" 1976","line":"            }"},
{"lineNum":" 1977","line":"        }"},
{"lineNum":" 1978","line":"        for (int k = 0; k < grid_shape[2]; ++k) {            // z"},
{"lineNum":" 1979","line":"            rho_1d[k] = 0.0;"},
{"lineNum":" 1980","line":"        }"},
{"lineNum":" 1981","line":"    }"},
{"lineNum":" 1982","line":"    std::vector<double > h(rho_grid.get_domain().get_cell_size());"},
{"lineNum":" 1983","line":"    double weight0 = (bunch.get_real_num() / bunch.get_total_num())"},
{"lineNum":" 1984","line":"            * bunch.get_particle_charge() * pconstants::e"},
{"lineNum":" 1985","line":"            / (h[0] * h[1]); // * h[2]);"},
{"lineNum":" 1986","line":"    int ix, iy, iz;"},
{"lineNum":" 1987","line":"    double offx, offy, offz;"},
{"lineNum":" 1988","line":"    if (grid_shape[2] == 1) {"},
{"lineNum":" 1989","line":"        double mean(Core_diagnostics::calculate_z_mean(bunch));"},
{"lineNum":" 1990","line":"        double std(Core_diagnostics::calculate_z_std(bunch, mean));"},
{"lineNum":" 1991","line":"        rho_1d[0] = bunch.get_local_num() / (std::sqrt(12.0) * std);"},
{"lineNum":" 1992","line":"    }"},
{"lineNum":" 1993","line":"    for (int n = 0; n < bunch.get_local_num(); ++n) {"},
{"lineNum":" 1994","line":"        // no xyz->zyx transformation"},
{"lineNum":" 1995","line":"        rho_grid.get_domain().get_leftmost_indices_offsets("},
{"lineNum":" 1996","line":"                parts[n][0], parts[n][2], parts[n][4], ix, iy, iz, offx,"},
{"lineNum":" 1997","line":"                offy, offz);"},
{"lineNum":" 1998","line":"        particle_bin.m[n][0] = ix;"},
{"lineNum":" 1999","line":"        particle_bin.m[n][1] = offx;"},
{"lineNum":" 2000","line":"        particle_bin.m[n][2] = iy;"},
{"lineNum":" 2001","line":"        particle_bin.m[n][3] = offy;"},
{"lineNum":" 2002","line":"        particle_bin.m[n][4] = iz;"},
{"lineNum":" 2003","line":"        particle_bin.m[n][5] = offz;"},
{"lineNum":" 2004","line":"        int cellx1, cellx2, celly1, celly2;"},
{"lineNum":" 2005","line":"        cellx1 = ix;"},
{"lineNum":" 2006","line":"        cellx2 = cellx1 + 1;"},
{"lineNum":" 2007","line":"        celly1 = iy;"},
{"lineNum":" 2008","line":"        celly2 = celly1 + 1;"},
{"lineNum":" 2009","line":"        if ((cellx1 >= 0) && (cellx2 < grid_shape[0]) && (celly1 >= 0)"},
{"lineNum":" 2010","line":"                && (celly2 < grid_shape[1])) {"},
{"lineNum":" 2011","line":"            double aoffx, aoffy;"},
{"lineNum":" 2012","line":"            aoffx = 1. - offx;"},
{"lineNum":" 2013","line":"            aoffy = 1. - offy;"},
{"lineNum":" 2014","line":"            rho_2dc[cellx1][celly1] += weight0 * aoffx * aoffy;"},
{"lineNum":" 2015","line":"            rho_2dc[cellx1][celly2] += weight0 * aoffx * offy;"},
{"lineNum":" 2016","line":"            rho_2dc[cellx2][celly1] += weight0 * offx * aoffy;"},
{"lineNum":" 2017","line":"            rho_2dc[cellx2][celly2] += weight0 * offx * offy;"},
{"lineNum":" 2018","line":"        }"},
{"lineNum":" 2019","line":""},
{"lineNum":" 2020","line":"        for (int k = 0; k < 2; ++k) {"},
{"lineNum":" 2021","line":"            int cellz = iz + k;"},
{"lineNum":" 2022","line":"            if ((grid_shape[2] > 1) && (cellz >= 0) && (cellz < grid_shape[2])) {"},
{"lineNum":" 2023","line":"                double weight = (1 - k - (1 - 2 * k) * offz) / h[2];"},
{"lineNum":" 2024","line":"                rho_1d[cellz] += weight;"},
{"lineNum":" 2025","line":"            }"},
{"lineNum":" 2026","line":"        }"},
{"lineNum":" 2027","line":"    }"},
{"lineNum":" 2028","line":"}"},
{"lineNum":" 2029","line":""},
{"lineNum":" 2030","line":"void"},
{"lineNum":" 2031","line":"deposit_charge_rectangular_2d_omp_reduce(Rectangular_grid & rho_grid,"},
{"lineNum":" 2032","line":"        Raw_MArray2d & particle_bin, Bunch const& bunch, bool zero_first)"},
{"lineNum":" 2033","line":"{"},
{"lineNum":" 2034","line":"    MArray2dc_ref rho_2dc(rho_grid.get_grid_points_2dc());"},
{"lineNum":" 2035","line":"    MArray1d_ref rho_1d(rho_grid.get_grid_points_1d());"},
{"lineNum":" 2036","line":"    Const_MArray2d_ref parts(bunch.get_local_particles());"},
{"lineNum":" 2037","line":""},
{"lineNum":" 2038","line":"    int g0, g1, g2;"},
{"lineNum":" 2039","line":"    g0 = rho_2dc.shape()[0];"},
{"lineNum":" 2040","line":"    g1 = rho_2dc.shape()[1];"},
{"lineNum":" 2041","line":"    g2 = rho_1d.shape()[0];"},
{"lineNum":" 2042","line":""},
{"lineNum":" 2043","line":"#if 0"},
{"lineNum":" 2044","line":"    int G0 = g0 + 2;"},
{"lineNum":" 2045","line":"    int G1 = g1 + 2;"},
{"lineNum":" 2046","line":"    int G2 = g2 + 2;"},
{"lineNum":" 2047","line":"#endif"},
{"lineNum":" 2048","line":""},
{"lineNum":" 2049","line":"    int npart = bunch.get_local_num();"},
{"lineNum":" 2050","line":""},
{"lineNum":" 2051","line":"    int nt = 1;"},
{"lineNum":" 2052","line":""},
{"lineNum":" 2053","line":"    #pragma omp parallel shared(nt)"},
{"lineNum":" 2054","line":"    { nt = omp_get_num_threads(); }"},
{"lineNum":" 2055","line":""},
{"lineNum":" 2056","line":"    double * lrho2d = new double[g0*g1*nt];"},
{"lineNum":" 2057","line":"    double * lrho1d = new double[g2*nt];"},
{"lineNum":" 2058","line":""},
{"lineNum":" 2059","line":"    if (zero_first)"},
{"lineNum":" 2060","line":"    {"},
{"lineNum":" 2061","line":"        for (unsigned int i = 0; i < g0; ++i)         // x"},
{"lineNum":" 2062","line":"        {"},
{"lineNum":" 2063","line":"            for (unsigned int j = 0; j < g1; ++j)     // y"},
{"lineNum":" 2064","line":"            {"},
{"lineNum":" 2065","line":"                rho_2dc[i][j] = 0.0;"},
{"lineNum":" 2066","line":"            }"},
{"lineNum":" 2067","line":"        }"},
{"lineNum":" 2068","line":""},
{"lineNum":" 2069","line":"        for (unsigned int k = 0; k < g2; ++k)         // z"},
{"lineNum":" 2070","line":"        {"},
{"lineNum":" 2071","line":"            rho_1d[k] = 0.0;"},
{"lineNum":" 2072","line":"        }"},
{"lineNum":" 2073","line":"    }"},
{"lineNum":" 2074","line":""},
{"lineNum":" 2075","line":"    std::vector<double > h(rho_grid.get_domain().get_cell_size());"},
{"lineNum":" 2076","line":"    double weight0 = (bunch.get_real_num() / bunch.get_total_num())"},
{"lineNum":" 2077","line":"            * bunch.get_particle_charge() * pconstants::e"},
{"lineNum":" 2078","line":"            / (h[0] * h[1]); // * h[2]);"},
{"lineNum":" 2079","line":""},
{"lineNum":" 2080","line":"    if (g2 == 1)"},
{"lineNum":" 2081","line":"    {"},
{"lineNum":" 2082","line":"        double mean(Core_diagnostics::calculate_z_mean(bunch));"},
{"lineNum":" 2083","line":"        double std(Core_diagnostics::calculate_z_std(bunch, mean));"},
{"lineNum":" 2084","line":"        rho_1d[0] = bunch.get_local_num() / (std::sqrt(12.0) * std);"},
{"lineNum":" 2085","line":"    }"},
{"lineNum":" 2086","line":""},
{"lineNum":" 2087","line":"    #pragma omp parallel \\"},
{"lineNum":" 2088","line":"        default(none) \\"},
{"lineNum":" 2089","line":"        shared(nt, npart, parts, lrho2d, lrho1d, h, \\"},
{"lineNum":" 2090","line":"               g0, g1, g2, particle_bin, \\"},
{"lineNum":" 2091","line":"               weight0, rho_2dc, rho_1d, rho_grid)"},
{"lineNum":" 2092","line":"    {"},
{"lineNum":" 2093","line":"        int ix, iy, iz;"},
{"lineNum":" 2094","line":"        double offx, offy, offz;"},
{"lineNum":" 2095","line":""},
{"lineNum":" 2096","line":"        int it = omp_get_thread_num();"},
{"lineNum":" 2097","line":""},
{"lineNum":" 2098","line":"        int l  = npart / nt;                  // length"},
{"lineNum":" 2099","line":"        int s  = it * l;                      // start particle"},
{"lineNum":" 2100","line":"        int e  = (it==nt-1) ? npart : (s+l);  // end particle"},
{"lineNum":" 2101","line":""},
{"lineNum":" 2102","line":"        double * r2d = lrho2d + it * g0 * g1;"},
{"lineNum":" 2103","line":"        double * r1d = lrho1d + it * g2;"},
{"lineNum":" 2104","line":""},
{"lineNum":" 2105","line":"        // zero buffer"},
{"lineNum":" 2106","line":"        std::memset( r2d, 0, sizeof(double)*g0*g1 );"},
{"lineNum":" 2107","line":"        std::memset( r1d, 0, sizeof(double)*g2    );"},
{"lineNum":" 2108","line":""},
{"lineNum":" 2109","line":"        for (int n = s; n < e; ++n) {"},
{"lineNum":" 2110","line":"            // no xyz->zyx transformation"},
{"lineNum":" 2111","line":"            rho_grid.get_domain().get_leftmost_indices_offsets("},
{"lineNum":" 2112","line":"                    parts[n][0], parts[n][2], parts[n][4], ix, iy, iz, offx,"},
{"lineNum":" 2113","line":"                    offy, offz);"},
{"lineNum":" 2114","line":""},
{"lineNum":" 2115","line":"            particle_bin.m[n][0] = ix;"},
{"lineNum":" 2116","line":"            particle_bin.m[n][1] = offx;"},
{"lineNum":" 2117","line":"            particle_bin.m[n][2] = iy;"},
{"lineNum":" 2118","line":"            particle_bin.m[n][3] = offy;"},
{"lineNum":" 2119","line":"            particle_bin.m[n][4] = iz;"},
{"lineNum":" 2120","line":"            particle_bin.m[n][5] = offz;"},
{"lineNum":" 2121","line":""},
{"lineNum":" 2122","line":"            int cellz1 = iz;"},
{"lineNum":" 2123","line":"            int cellz2 = cellz1 + 1;"},
{"lineNum":" 2124","line":""},
{"lineNum":" 2125","line":"            if( cellz1>=0 && cellz1<g2 ) r1d[cellz1] += (1.0 - offz) / h[2];"},
{"lineNum":" 2126","line":"            if( cellz2>=0 && cellz2<g2 ) r1d[cellz2] += offz / h[2];"},
{"lineNum":" 2127","line":""},
{"lineNum":" 2128","line":"            if( ix<0 || ix>g0-1 || iy<0 || iy>g1-1 ) continue;"},
{"lineNum":" 2129","line":""},
{"lineNum":" 2130","line":"            int cellx1, cellx2, celly1, celly2;"},
{"lineNum":" 2131","line":"            cellx1 = ix;"},
{"lineNum":" 2132","line":"            cellx2 = ix + 1;"},
{"lineNum":" 2133","line":"            celly1 = iy;"},
{"lineNum":" 2134","line":"            celly2 = iy + 1;"},
{"lineNum":" 2135","line":""},
{"lineNum":" 2136","line":"            double aoffx, aoffy;"},
{"lineNum":" 2137","line":"            aoffx = 1. - offx;"},
{"lineNum":" 2138","line":"            aoffy = 1. - offy;"},
{"lineNum":" 2139","line":""},
{"lineNum":" 2140","line":"            r2d[celly1*g0 + cellx1] += weight0 * aoffx * aoffy;"},
{"lineNum":" 2141","line":"            r2d[celly1*g0 + cellx2] += weight0 *  offx * aoffy;"},
{"lineNum":" 2142","line":"            r2d[celly2*g0 + cellx1] += weight0 * aoffx *  offy;"},
{"lineNum":" 2143","line":"            r2d[celly2*g0 + cellx2] += weight0 *  offx *  offy;"},
{"lineNum":" 2144","line":"        }"},
{"lineNum":" 2145","line":""},
{"lineNum":" 2146","line":"        // set boundary to zero"},
{"lineNum":" 2147","line":"        for (int x=0; x<g0; ++x)"},
{"lineNum":" 2148","line":"        {"},
{"lineNum":" 2149","line":"            r2d[x] = 0.0;"},
{"lineNum":" 2150","line":"            r2d[(g1-1)*g0 + x] = 0.0;"},
{"lineNum":" 2151","line":"        }"},
{"lineNum":" 2152","line":""},
{"lineNum":" 2153","line":"        for (int y=0; y<g1; ++y)"},
{"lineNum":" 2154","line":"        {"},
{"lineNum":" 2155","line":"            r2d[y*g0] = 0.0;"},
{"lineNum":" 2156","line":"            r2d[y*g0 + g0 - 1] = 0.0;"},
{"lineNum":" 2157","line":"        }"},
{"lineNum":" 2158","line":"    }"},
{"lineNum":" 2159","line":""},
{"lineNum":" 2160","line":"    for (int t = 0; t < nt; ++t)"},
{"lineNum":" 2161","line":"    {"},
{"lineNum":" 2162","line":"        for (int y = 0; y < g1; ++y)"},
{"lineNum":" 2163","line":"            for (int x = 0; x < g0; ++x)"},
{"lineNum":" 2164","line":"                rho_2dc[x][y] += lrho2d[t*g0*g1 + y*g0 + x];"},
{"lineNum":" 2165","line":""},
{"lineNum":" 2166","line":"        if (g2 > 1)"},
{"lineNum":" 2167","line":"            for (int z = 0; z < g2; ++z)"},
{"lineNum":" 2168","line":"                rho_1d[z] += lrho1d[t*g2 + z];"},
{"lineNum":" 2169","line":"    }"},
{"lineNum":" 2170","line":""},
{"lineNum":" 2171","line":"    delete [] lrho2d;"},
{"lineNum":" 2172","line":"    delete [] lrho1d;"},
{"lineNum":" 2173","line":"}"},
{"lineNum":" 2174","line":""},
{"lineNum":" 2175","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 434, "covered" : 0,};
var merged_data = [];
