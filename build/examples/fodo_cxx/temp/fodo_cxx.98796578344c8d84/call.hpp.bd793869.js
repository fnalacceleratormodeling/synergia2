var data = {lines:[
{"lineNum":"    1","line":"/*=============================================================================="},
{"lineNum":"    2","line":"    Copyright (c) 2005-2010 Joel de Guzman"},
{"lineNum":"    3","line":"    Copyright (c) 2011 Thomas Heller"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"    Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    6","line":"    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    7","line":"==============================================================================*/"},
{"lineNum":"    8","line":"#ifndef BOOST_PHOENIX_CORE_CALL_HPP"},
{"lineNum":"    9","line":"#define BOOST_PHOENIX_CORE_CALL_HPP"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"#include <boost/phoenix/core/limits.hpp>"},
{"lineNum":"   12","line":"#include <boost/phoenix/core/environment.hpp>"},
{"lineNum":"   13","line":"#include <boost/proto/proto_fwd.hpp>"},
{"lineNum":"   14","line":"#include <boost/proto/traits.hpp>"},
{"lineNum":"   15","line":"#include <boost/proto/transform/impl.hpp>"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"#ifndef BOOST_PHOENIX_NO_VARIADIC_CALL"},
{"lineNum":"   18","line":"#   include <boost/phoenix/core/detail/index_sequence.hpp>"},
{"lineNum":"   19","line":"#endif"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"namespace boost { namespace phoenix"},
{"lineNum":"   22","line":"{"},
{"lineNum":"   23","line":"    namespace detail"},
{"lineNum":"   24","line":"    {"},
{"lineNum":"   25","line":"        template <"},
{"lineNum":"   26","line":"            typename Fun"},
{"lineNum":"   27","line":"          , typename Expr"},
{"lineNum":"   28","line":"          , typename State"},
{"lineNum":"   29","line":"          , typename Data"},
{"lineNum":"   30","line":"          , long Arity = proto::arity_of<Expr>::value"},
{"lineNum":"   31","line":"        >"},
{"lineNum":"   32","line":"        struct call_impl;"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"        template <typename Fun, typename Expr, typename State, typename Data>"},
{"lineNum":"   35","line":"        struct call_impl<Fun, Expr, State, Data, 0>"},
{"lineNum":"   36","line":"            : proto::transform_impl<Expr, State, Data>"},
{"lineNum":"   37","line":"        {"},
{"lineNum":"   38","line":"            typedef"},
{"lineNum":"   39","line":"                typename boost::phoenix::result_of::context<State, Data>::type"},
{"lineNum":"   40","line":"                context_type;"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"            typedef"},
{"lineNum":"   43","line":"                typename boost::result_of<"},
{"lineNum":"   44","line":"                    Fun(Expr, context_type)"},
{"lineNum":"   45","line":"                >::type"},
{"lineNum":"   46","line":"                result_type;"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"            result_type operator()("},
{"lineNum":"   49","line":"                typename call_impl::expr_param e"},
{"lineNum":"   50","line":"              , typename call_impl::state_param s"},
{"lineNum":"   51","line":"              , typename call_impl::data_param d"},
{"lineNum":"   52","line":"            ) const"},
{"lineNum":"   53","line":"            {"},
{"lineNum":"   54","line":"                return Fun()(e, boost::phoenix::context(s, d));"},
{"lineNum":"   55","line":"            }"},
{"lineNum":"   56","line":"        };"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"#ifdef BOOST_PHOENIX_NO_VARIADIC_CALL"},
{"lineNum":"   59","line":"        #include <boost/phoenix/core/detail/cpp03/call.hpp>"},
{"lineNum":"   60","line":"#else"},
{"lineNum":"   61","line":"        template <typename Fun, typename Expr, typename State, typename Data"},
{"lineNum":"   62","line":"                , typename Indices>"},
{"lineNum":"   63","line":"        struct call_impl_;"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"        template <typename Fun, typename Expr, typename State, typename Data"},
{"lineNum":"   66","line":"                , std::size_t... Indices>"},
{"lineNum":"   67","line":"        struct call_impl_<Fun, Expr, State, Data, index_sequence<Indices...> >"},
{"lineNum":"   68","line":"            : proto::transform_impl<Expr, State, Data>"},
{"lineNum":"   69","line":"        {"},
{"lineNum":"   70","line":"            typedef"},
{"lineNum":"   71","line":"                typename boost::phoenix::result_of::context<State, Data>::type"},
{"lineNum":"   72","line":"                context_type;"},
{"lineNum":"   73","line":"            template <std::size_t Index>"},
{"lineNum":"   74","line":"            struct result_of_expr"},
{"lineNum":"   75","line":"            {"},
{"lineNum":"   76","line":"                typedef"},
{"lineNum":"   77","line":"                    typename proto::result_of::child_c<Expr, Index>::type"},
{"lineNum":"   78","line":"                    type;"},
{"lineNum":"   79","line":"            };"},
{"lineNum":"   80","line":"            typedef"},
{"lineNum":"   81","line":"                typename boost::result_of<"},
{"lineNum":"   82","line":"                    Fun("},
{"lineNum":"   83","line":"                        typename result_of_expr<Indices>::type..."},
{"lineNum":"   84","line":"                      , context_type"},
{"lineNum":"   85","line":"                    )"},
{"lineNum":"   86","line":"                >::type"},
{"lineNum":"   87","line":"                result_type;"},
{"lineNum":"   88","line":"            result_type operator()("},
{"lineNum":"   89","line":"                typename call_impl_::expr_param e"},
{"lineNum":"   90","line":"              , typename call_impl_::state_param s"},
{"lineNum":"   91","line":"              , typename call_impl_::data_param d"},
{"lineNum":"   92","line":"            ) const"},
{"lineNum":"   93","line":"            {"},
{"lineNum":"   94","line":"                return"},
{"lineNum":"   95","line":"                    Fun()(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   96","line":"                        proto::child_c<Indices>(e)..."},
{"lineNum":"   97","line":"                      , boost::phoenix::context(s, d)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   98","line":"                    );"},
{"lineNum":"   99","line":"            }"},
{"lineNum":"  100","line":"        };"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"        template <typename Fun, typename Expr, typename State, typename Data, long Arity>"},
{"lineNum":"  103","line":"        struct call_impl"},
{"lineNum":"  104","line":"            : call_impl_<Fun, Expr, State, Data, typename make_index_sequence<Arity>::type>"},
{"lineNum":"  105","line":"        {"},
{"lineNum":"  106","line":"        };"},
{"lineNum":"  107","line":"#endif"},
{"lineNum":"  108","line":"    }"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"    template <typename Fun, typename Dummy = void>"},
{"lineNum":"  111","line":"    struct call"},
{"lineNum":"  112","line":"        : proto::transform<call<Fun> >"},
{"lineNum":"  113","line":"    {"},
{"lineNum":"  114","line":"        template <typename Expr, typename State, typename Data>"},
{"lineNum":"  115","line":"        struct impl"},
{"lineNum":"  116","line":"            : detail::call_impl<Fun, Expr, State, Data>"},
{"lineNum":"  117","line":"        {};"},
{"lineNum":"  118","line":"    };"},
{"lineNum":"  119","line":"}"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"    namespace proto"},
{"lineNum":"  122","line":"    {"},
{"lineNum":"  123","line":"        template <typename Fun, typename Dummy>"},
{"lineNum":"  124","line":"        struct is_callable<phoenix::call<Fun, Dummy> > : mpl::true_ {};"},
{"lineNum":"  125","line":"    }"},
{"lineNum":"  126","line":"}"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 2, "covered" : 0,};
var merged_data = [];
