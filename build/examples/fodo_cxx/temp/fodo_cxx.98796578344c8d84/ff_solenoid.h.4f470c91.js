var data = {lines:[
{"lineNum":"    1","line":"#ifndef FF_SOLENOID_H"},
{"lineNum":"    2","line":"#define FF_SOLENOID_H"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#include \"synergia/libFF/ff_drift.h\""},
{"lineNum":"    5","line":"#include \"synergia/libFF/ff_algorithm.h\""},
{"lineNum":"    6","line":"#include \"synergia/libFF/ff_patterned_propagator.h\""},
{"lineNum":"    7","line":"#include \"synergia/utils/simple_timer.h\""},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"namespace solenoid_impl"},
{"lineNum":"   10","line":"{"},
{"lineNum":"   11","line":"    template<class T>"},
{"lineNum":"   12","line":"    using kf_t = void(*)(T const&, T&, T const&, T&, double);"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"    template<class BunchT, kf_t<typename BunchT::gsv_t> KF>"},
{"lineNum":"   15","line":"    struct solenoid_edge_kicker","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"   16","line":"    {"},
{"lineNum":"   17","line":"        using gsv_t = typename BunchT::gsv_t;"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"        typename BunchT::parts_t p;"},
{"lineNum":"   20","line":"        typename BunchT::const_masks_t m;"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"        double kse;"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   25","line":"        void operator() (const int idx) const"},
{"lineNum":"   26","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   27","line":"            int i = idx * gsv_t::size();"},
{"lineNum":"   28","line":"            int mask = 0;"},
{"lineNum":"   29","line":"            for(int x=i; x<i+gsv_t::size(); ++x) mask |= m(x);","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"            if (mask)","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   32","line":"            {"},
{"lineNum":"   33","line":"                gsv_t p0(&p(i, 0));"},
{"lineNum":"   34","line":"                gsv_t p1(&p(i, 1));"},
{"lineNum":"   35","line":"                gsv_t p2(&p(i, 2));"},
{"lineNum":"   36","line":"                gsv_t p3(&p(i, 3));"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"                KF(p0, p1, p2, p3, kse);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"                p1.store(&p(i, 1));"},
{"lineNum":"   41","line":"                p3.store(&p(i, 3));"},
{"lineNum":"   42","line":"            }"},
{"lineNum":"   43","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   44","line":"    };"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"    template<class BunchT, kf_t<typename BunchT::gsv_t> KF>"},
{"lineNum":"   47","line":"    void apply_edge_kick(BunchT& bunch, ParticleGroup pg, double kse)"},
{"lineNum":"   48","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   49","line":"        if(!bunch.get_local_num(pg)) return;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"        auto parts = bunch.get_local_particles(pg);"},
{"lineNum":"   52","line":"        auto masks = bunch.get_local_particle_masks(pg);"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"        using exec = typename BunchT::exec_space;"},
{"lineNum":"   55","line":"        auto range = Kokkos::RangePolicy<exec>(0, bunch.size_in_gsv(pg));","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"        solenoid_edge_kicker<BunchT, KF> sk{parts, masks, kse};","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   58","line":"        Kokkos::parallel_for(range, sk);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   59","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"    template<class BunchT>"},
{"lineNum":"   62","line":"    struct solenoid_unit_kicker","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   63","line":"    {"},
{"lineNum":"   64","line":"        using gsv_t = typename BunchT::gsv_t;"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"        typename BunchT::parts_t p;"},
{"lineNum":"   67","line":"        typename BunchT::const_masks_t m;"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"        double ksl;"},
{"lineNum":"   70","line":"        double ks;"},
{"lineNum":"   71","line":"        double length;"},
{"lineNum":"   72","line":"        double ref_p;"},
{"lineNum":"   73","line":"        double mass;"},
{"lineNum":"   74","line":"        double ref_cdt;"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   77","line":"        void operator() (const int idx) const"},
{"lineNum":"   78","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   79","line":"            int i = idx * gsv_t::size();"},
{"lineNum":"   80","line":"            int mask = 0;"},
{"lineNum":"   81","line":"            for(int x=i; x<i+gsv_t::size(); ++x) mask |= m(x);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"            if (mask)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   84","line":"            {"},
{"lineNum":"   85","line":"                gsv_t p0(&p(i, 0));"},
{"lineNum":"   86","line":"                gsv_t p1(&p(i, 1));"},
{"lineNum":"   87","line":"                gsv_t p2(&p(i, 2));"},
{"lineNum":"   88","line":"                gsv_t p3(&p(i, 3));"},
{"lineNum":"   89","line":"                gsv_t p4(&p(i, 4));"},
{"lineNum":"   90","line":"                gsv_t p5(&p(i, 5));"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"                FF_algorithm::solenoid_unit(","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   93","line":"                        p0, p1, p2, p3, p4, p5,"},
{"lineNum":"   94","line":"                        ksl, ks, length, ref_p, mass, ref_cdt);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"                p0.store(&p(i, 0));"},
{"lineNum":"   97","line":"                p1.store(&p(i, 1));"},
{"lineNum":"   98","line":"                p2.store(&p(i, 2));"},
{"lineNum":"   99","line":"                p3.store(&p(i, 3));"},
{"lineNum":"  100","line":"                p4.store(&p(i, 4));"},
{"lineNum":"  101","line":"            }"},
{"lineNum":"  102","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  103","line":"    };"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"    template<class BunchT>"},
{"lineNum":"  106","line":"    void apply_solenoid_unit(BunchT& bunch, ParticleGroup pg,"},
{"lineNum":"  107","line":"            double ksl, double ks, double length, double ref_p,"},
{"lineNum":"  108","line":"            double mass, double ref_cdt)"},
{"lineNum":"  109","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  110","line":"        if(!bunch.get_local_num(pg)) return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"        auto parts = bunch.get_local_particles(pg);"},
{"lineNum":"  113","line":"        auto masks = bunch.get_local_particle_masks(pg);"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"        using exec = typename BunchT::exec_space;"},
{"lineNum":"  116","line":"        auto range = Kokkos::RangePolicy<exec>(0, bunch.size_in_gsv(pg));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"        solenoid_unit_kicker<BunchT> sk{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  119","line":"            parts, masks, ksl, ks, length,"},
{"lineNum":"  120","line":"            ref_p, mass, ref_cdt"},
{"lineNum":"  121","line":"        };"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"        Kokkos::parallel_for(range, sk);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  124","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"    inline double get_reference_cdt_solenoid("},
{"lineNum":"  128","line":"            double length, Reference_particle & reference_particle,"},
{"lineNum":"  129","line":"            bool in_edge, bool out_edge, double ks, double kse, double ksl)"},
{"lineNum":"  130","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  131","line":"        double x(reference_particle.get_state()[Bunch::x]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  132","line":"        double xp(reference_particle.get_state()[Bunch::xp]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  133","line":"        double y(reference_particle.get_state()[Bunch::y]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  134","line":"        double yp(reference_particle.get_state()[Bunch::yp]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  135","line":"        double cdt(0.0);"},
{"lineNum":"  136","line":"        double dpop(reference_particle.get_state()[Bunch::dpop]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"        double ref_p = reference_particle.get_momentum()*(1+dpop);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  139","line":"        double mass  = reference_particle.get_mass();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"        // in edge"},
{"lineNum":"  142","line":"        if (in_edge)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  143","line":"        {"},
{"lineNum":"  144","line":"            FF_algorithm::solenoid_in_edge_kick(x, xp, y, yp, kse);"},
{"lineNum":"  145","line":"        }"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"        // body"},
{"lineNum":"  148","line":"        FF_algorithm::solenoid_unit( x, xp, y, yp, cdt, dpop,"},
{"lineNum":"  149","line":"                ksl, ks, length, ref_p, mass, 0.0);"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"        // out edge"},
{"lineNum":"  152","line":"        if (out_edge)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  153","line":"        {"},
{"lineNum":"  154","line":"            FF_algorithm::solenoid_out_edge_kick(x, xp, y, yp, kse);"},
{"lineNum":"  155","line":"        }"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"        // propagate and update the bunch design reference particle state"},
{"lineNum":"  158","line":"        reference_particle.set_state(x, xp, y, yp, cdt, dpop);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"        return cdt;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  161","line":"    }"},
{"lineNum":"  162","line":"}"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"namespace FF_solenoid"},
{"lineNum":"  166","line":"{"},
{"lineNum":"  167","line":"    template<class BunchT>"},
{"lineNum":"  168","line":"    void apply(Lattice_element_slice const& slice, BunchT& bunch)"},
{"lineNum":"  169","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  170","line":"        using namespace solenoid_impl;"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"        const double  length = slice.get_right() - slice.get_left();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  173","line":"        const double    mass = bunch.get_mass();"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"        // in edge, out edge"},
{"lineNum":"  176","line":"        const bool has_in_edge  = slice.has_left_edge();"},
{"lineNum":"  177","line":"        const bool has_out_edge = slice.has_right_edge();"},
{"lineNum":"  178","line":""},
{"lineNum":"  179","line":"        // ks here is the field"},
{"lineNum":"  180","line":"        double ks = slice.get_lattice_element().get_double_attribute(\"ks\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"        Reference_particle       & ref_l = bunch.get_design_reference_particle();"},
{"lineNum":"  183","line":"        Reference_particle const & ref_b = bunch.get_reference_particle();"},
{"lineNum":"  184","line":"        const double ref_p = ref_b.get_momentum() * (1.0 + ref_b.get_state()[Bunch::dpop]);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"        // if ks=0 it is effectively a drift"},
{"lineNum":"  187","line":"        if (fabs(ks) < 1e-12)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  188","line":"        {"},
{"lineNum":"  189","line":"            FF_drift::apply(slice, bunch);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  190","line":"            return;"},
{"lineNum":"  191","line":"        }"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"        // scaling"},
{"lineNum":"  194","line":"        double brho_l = ref_l.get_momentum()","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  195","line":"            * (1.0 + ref_l.get_state()[Bunch::dpop]) / ref_l.get_charge();  // GV/c","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"        double brho_b = ref_b.get_momentum()","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  198","line":"            * (1.0 + ref_b.get_state()[Bunch::dpop]) / ref_l.get_charge();  // GV/c","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"        double scale = brho_l / brho_b;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"                ks = ks * scale;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  203","line":"        double ksl = ks * length;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  204","line":"        double kse = ks * 0.5;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"        // reference cdt"},
{"lineNum":"  207","line":"        const double ref_cdt = get_reference_cdt_solenoid(length, ref_l,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  208","line":"                has_in_edge, has_out_edge, ks, kse, ksl);"},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"        using gsv_t = typename BunchT::gsv_t;"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"        // in-edge"},
{"lineNum":"  213","line":"        if (has_in_edge)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  214","line":"        {"},
{"lineNum":"  215","line":"            apply_edge_kick<BunchT,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  216","line":"                FF_algorithm::solenoid_in_edge_kick<gsv_t>>("},
{"lineNum":"  217","line":"                    bunch, ParticleGroup::regular, kse);"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"            apply_edge_kick<BunchT,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  220","line":"                FF_algorithm::solenoid_in_edge_kick<gsv_t>>("},
{"lineNum":"  221","line":"                    bunch, ParticleGroup::spectator, kse);"},
{"lineNum":"  222","line":"        }"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"        // body"},
{"lineNum":"  225","line":"        apply_solenoid_unit(bunch, ParticleGroup::regular,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  226","line":"                ksl, ks, length, ref_p, mass, ref_cdt);"},
{"lineNum":"  227","line":""},
{"lineNum":"  228","line":"        apply_solenoid_unit(bunch, ParticleGroup::spectator,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  229","line":"                ksl, ks, length, ref_p, mass, ref_cdt);"},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"        // out-edge"},
{"lineNum":"  232","line":"        if (has_out_edge)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  233","line":"        {"},
{"lineNum":"  234","line":"            apply_edge_kick<BunchT,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  235","line":"                FF_algorithm::solenoid_out_edge_kick<gsv_t>>("},
{"lineNum":"  236","line":"                    bunch, ParticleGroup::regular, kse);"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"            apply_edge_kick<BunchT,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  239","line":"                FF_algorithm::solenoid_out_edge_kick<gsv_t>>("},
{"lineNum":"  240","line":"                    bunch, ParticleGroup::spectator, kse);"},
{"lineNum":"  241","line":"        }"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"        // trajectory"},
{"lineNum":"  244","line":"        bunch.get_reference_particle().increment_trajectory(length);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  245","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  246","line":"}"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"#endif // FF_SOLENOID_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 62, "covered" : 0,};
var merged_data = [];
