var data = {lines:[
{"lineNum":"    1","line":"/*"},
{"lineNum":"    2","line":"//@HEADER"},
{"lineNum":"    3","line":"// ************************************************************************"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"//                        Kokkos v. 3.0"},
{"lineNum":"    6","line":"//       Copyright (2020) National Technology & Engineering"},
{"lineNum":"    7","line":"//               Solutions of Sandia, LLC (NTESS)."},
{"lineNum":"    8","line":"//"},
{"lineNum":"    9","line":"// Under the terms of Contract DE-NA0003525 with NTESS,"},
{"lineNum":"   10","line":"// the U.S. Government retains certain rights in this software."},
{"lineNum":"   11","line":"//"},
{"lineNum":"   12","line":"// Redistribution and use in source and binary forms, with or without"},
{"lineNum":"   13","line":"// modification, are permitted provided that the following conditions are"},
{"lineNum":"   14","line":"// met:"},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"// 1. Redistributions of source code must retain the above copyright"},
{"lineNum":"   17","line":"// notice, this list of conditions and the following disclaimer."},
{"lineNum":"   18","line":"//"},
{"lineNum":"   19","line":"// 2. Redistributions in binary form must reproduce the above copyright"},
{"lineNum":"   20","line":"// notice, this list of conditions and the following disclaimer in the"},
{"lineNum":"   21","line":"// documentation and/or other materials provided with the distribution."},
{"lineNum":"   22","line":"//"},
{"lineNum":"   23","line":"// 3. Neither the name of the Corporation nor the names of the"},
{"lineNum":"   24","line":"// contributors may be used to endorse or promote products derived from"},
{"lineNum":"   25","line":"// this software without specific prior written permission."},
{"lineNum":"   26","line":"//"},
{"lineNum":"   27","line":"// THIS SOFTWARE IS PROVIDED BY NTESS \"AS IS\" AND ANY"},
{"lineNum":"   28","line":"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"},
{"lineNum":"   29","line":"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR"},
{"lineNum":"   30","line":"// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NTESS OR THE"},
{"lineNum":"   31","line":"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,"},
{"lineNum":"   32","line":"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,"},
{"lineNum":"   33","line":"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR"},
{"lineNum":"   34","line":"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF"},
{"lineNum":"   35","line":"// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING"},
{"lineNum":"   36","line":"// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"},
{"lineNum":"   37","line":"// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   38","line":"//"},
{"lineNum":"   39","line":"// Questions? Contact Christian R. Trott (crtrott@sandia.gov)"},
{"lineNum":"   40","line":"//"},
{"lineNum":"   41","line":"// ************************************************************************"},
{"lineNum":"   42","line":"//@HEADER"},
{"lineNum":"   43","line":"*/"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"#include <cstdio>"},
{"lineNum":"   46","line":"#include <cstring>"},
{"lineNum":"   47","line":"#include <cstdlib>"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"#include <ostream>"},
{"lineNum":"   50","line":"#include <sstream>"},
{"lineNum":"   51","line":"#include <iomanip>"},
{"lineNum":"   52","line":"#include <stdexcept>"},
{"lineNum":"   53","line":"#include <impl/Kokkos_Error.hpp>"},
{"lineNum":"   54","line":"#include <Cuda/Kokkos_Cuda_Error.hpp>"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"//----------------------------------------------------------------------------"},
{"lineNum":"   57","line":"//----------------------------------------------------------------------------"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"namespace Kokkos {"},
{"lineNum":"   60","line":"namespace Impl {"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"void host_abort(const char *const message) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   63","line":"  fwrite(message, 1, strlen(message), stderr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   64","line":"  fflush(stderr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   65","line":"  ::abort();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   66","line":"}"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"void throw_runtime_exception(const std::string &msg) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   69","line":"  std::ostringstream o;"},
{"lineNum":"   70","line":"  o << msg;"},
{"lineNum":"   71","line":"  traceback_callstack(o);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   72","line":"  throw std::runtime_error(o.str());","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   73","line":"}"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"std::string human_memory_size(size_t arg_bytes) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   76","line":"  double bytes   = arg_bytes;"},
{"lineNum":"   77","line":"  const double K = 1024;"},
{"lineNum":"   78","line":"  const double M = K * 1024;"},
{"lineNum":"   79","line":"  const double G = M * 1024;"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"  std::ostringstream out;"},
{"lineNum":"   82","line":"  if (bytes < K) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   83","line":"    out << std::setprecision(4) << bytes << \" B\";","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   84","line":"  } else if (bytes < M) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   85","line":"    bytes /= K;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   86","line":"    out << std::setprecision(4) << bytes << \" K\";","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   87","line":"  } else if (bytes < G) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   88","line":"    bytes /= M;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   89","line":"    out << std::setprecision(4) << bytes << \" M\";","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   90","line":"  } else {"},
{"lineNum":"   91","line":"    bytes /= G;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   92","line":"    out << std::setprecision(4) << bytes << \" G\";","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   93","line":"  }"},
{"lineNum":"   94","line":"  return out.str();"},
{"lineNum":"   95","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"}  // namespace Impl"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"void Experimental::RawMemoryAllocationFailure::print_error_message("},
{"lineNum":"  100","line":"    std::ostream &o) const {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  101","line":"  o << \"Allocation of size \" << Impl::human_memory_size(m_attempted_size);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  102","line":"  o << \" failed\";"},
{"lineNum":"  103","line":"  switch (m_failure_mode) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  104","line":"    case FailureMode::OutOfMemoryError:"},
{"lineNum":"  105","line":"      o << \", likely due to insufficient memory.\";"},
{"lineNum":"  106","line":"      break;"},
{"lineNum":"  107","line":"    case FailureMode::AllocationNotAligned:"},
{"lineNum":"  108","line":"      o << \" because the allocation was improperly aligned.\";"},
{"lineNum":"  109","line":"      break;"},
{"lineNum":"  110","line":"    case FailureMode::InvalidAllocationSize:"},
{"lineNum":"  111","line":"      o << \" because the requested allocation size is not a valid size for the\""},
{"lineNum":"  112","line":"           \" requested allocation mechanism (it\'s probably too large).\";"},
{"lineNum":"  113","line":"      break;"},
{"lineNum":"  114","line":"    // TODO move this to the subclass for Cuda-related things"},
{"lineNum":"  115","line":"    case FailureMode::MaximumCudaUVMAllocationsExceeded:"},
{"lineNum":"  116","line":"      o << \" because the maximum Cuda UVM allocations was exceeded.\";"},
{"lineNum":"  117","line":"      break;"},
{"lineNum":"  118","line":"    case FailureMode::Unknown: o << \" because of an unknown error.\"; break;"},
{"lineNum":"  119","line":"  }"},
{"lineNum":"  120","line":"  o << \"  (The allocation mechanism was \";"},
{"lineNum":"  121","line":"  switch (m_mechanism) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  122","line":"    case AllocationMechanism::StdMalloc: o << \"standard malloc().\"; break;"},
{"lineNum":"  123","line":"    case AllocationMechanism::PosixMemAlign: o << \"posix_memalign().\"; break;"},
{"lineNum":"  124","line":"    case AllocationMechanism::PosixMMap: o << \"POSIX mmap().\"; break;"},
{"lineNum":"  125","line":"    case AllocationMechanism::IntelMMAlloc:"},
{"lineNum":"  126","line":"      o << \"the Intel _mm_malloc() intrinsic.\";"},
{"lineNum":"  127","line":"      break;"},
{"lineNum":"  128","line":"    case AllocationMechanism::CudaMalloc: o << \"cudaMalloc().\"; break;"},
{"lineNum":"  129","line":"    case AllocationMechanism::CudaMallocManaged:"},
{"lineNum":"  130","line":"      o << \"cudaMallocManaged().\";"},
{"lineNum":"  131","line":"      break;"},
{"lineNum":"  132","line":"    case AllocationMechanism::CudaHostAlloc: o << \"cudaHostAlloc().\"; break;"},
{"lineNum":"  133","line":"    case AllocationMechanism::HIPMalloc: o << \"hipMalloc().\"; break;"},
{"lineNum":"  134","line":"    case AllocationMechanism::HIPHostMalloc: o << \"hipHostMalloc().\"; break;"},
{"lineNum":"  135","line":"    case AllocationMechanism::SYCLMallocDevice:"},
{"lineNum":"  136","line":"      o << \"sycl::malloc_device().\";"},
{"lineNum":"  137","line":"      break;"},
{"lineNum":"  138","line":"    case AllocationMechanism::SYCLMallocShared:"},
{"lineNum":"  139","line":"      o << \"sycl::malloc_shared().\";"},
{"lineNum":"  140","line":"      break;"},
{"lineNum":"  141","line":"  }"},
{"lineNum":"  142","line":"  append_additional_error_information(o);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  143","line":"  o << \")\" << std::endl;"},
{"lineNum":"  144","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"std::string Experimental::RawMemoryAllocationFailure::get_error_message()"},
{"lineNum":"  147","line":"    const {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  148","line":"  std::ostringstream out;"},
{"lineNum":"  149","line":"  print_error_message(out);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  150","line":"  return out.str();"},
{"lineNum":"  151","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"}  // namespace Kokkos"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  156","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"namespace Kokkos {"},
{"lineNum":"  159","line":"namespace Impl {"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"void traceback_callstack(std::ostream &msg) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  162","line":"  msg << std::endl << \"Traceback functionality not available\" << std::endl;"},
{"lineNum":"  163","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"}  // namespace Impl"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"#ifdef KOKKOS_ENABLE_CUDA"},
{"lineNum":"  168","line":"namespace Experimental {"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"void CudaRawMemoryAllocationFailure::append_additional_error_information("},
{"lineNum":"  171","line":"    std::ostream &o) const {"},
{"lineNum":"  172","line":"  if (m_error_code != cudaSuccess) {"},
{"lineNum":"  173","line":"    o << \"  The Cuda allocation returned the error code \\\"\\\"\""},
{"lineNum":"  174","line":"      << cudaGetErrorName(m_error_code) << \"\\\".\";"},
{"lineNum":"  175","line":"  }"},
{"lineNum":"  176","line":"}"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"}  // end namespace Experimental"},
{"lineNum":"  179","line":"#endif"},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"}  // namespace Kokkos"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 30, "covered" : 0,};
var merged_data = [];
