var data = {lines:[
{"lineNum":"    1","line":"/*============================================================================="},
{"lineNum":"    2","line":"    Copyright (c) 2001-2011 Joel de Guzman"},
{"lineNum":"    3","line":"    Copyright (c) 2001-2011 Hartmut Kaiser"},
{"lineNum":"    4","line":"    Copyright (c)      2010 Bryce Lelbach"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"    Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    7","line":"    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    8","line":"================================================_==============================*/"},
{"lineNum":"    9","line":"#if !defined(BOOST_SPIRIT_STRING_TRAITS_OCTOBER_2008_1252PM)"},
{"lineNum":"   10","line":"#define BOOST_SPIRIT_STRING_TRAITS_OCTOBER_2008_1252PM"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"#if defined(_MSC_VER)"},
{"lineNum":"   13","line":"#pragma once"},
{"lineNum":"   14","line":"#endif"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"#include <boost/spirit/home/support/container.hpp>"},
{"lineNum":"   17","line":"#include <string>"},
{"lineNum":"   18","line":"#include <boost/mpl/bool.hpp>"},
{"lineNum":"   19","line":"#include <boost/mpl/identity.hpp>"},
{"lineNum":"   20","line":"#include <boost/mpl/if.hpp>"},
{"lineNum":"   21","line":"#include <boost/proto/proto_fwd.hpp>"},
{"lineNum":"   22","line":"#include <boost/type_traits/is_const.hpp>"},
{"lineNum":"   23","line":"#if defined(__GNUC__) && (__GNUC__ < 4)"},
{"lineNum":"   24","line":"#include <boost/type_traits/add_const.hpp>"},
{"lineNum":"   25","line":"#endif"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"namespace boost { namespace spirit { namespace traits"},
{"lineNum":"   28","line":"{"},
{"lineNum":"   29","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   30","line":"    // Determine if T is a character type"},
{"lineNum":"   31","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   32","line":"    template <typename T>"},
{"lineNum":"   33","line":"    struct is_char : mpl::false_ {};"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"    template <typename T>"},
{"lineNum":"   36","line":"    struct is_char<T const> : is_char<T> {};"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"    template <>"},
{"lineNum":"   39","line":"    struct is_char<char> : mpl::true_ {};"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"    template <>"},
{"lineNum":"   42","line":"    struct is_char<wchar_t> : mpl::true_ {};"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   45","line":"    // Determine if T is a string"},
{"lineNum":"   46","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   47","line":"    template <typename T>"},
{"lineNum":"   48","line":"    struct is_string : mpl::false_ {};"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"    template <typename T>"},
{"lineNum":"   51","line":"    struct is_string<T const> : is_string<T> {};"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"    template <>"},
{"lineNum":"   54","line":"    struct is_string<char const*> : mpl::true_ {};"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"    template <>"},
{"lineNum":"   57","line":"    struct is_string<wchar_t const*> : mpl::true_ {};"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"    template <>"},
{"lineNum":"   60","line":"    struct is_string<char*> : mpl::true_ {};"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"    template <>"},
{"lineNum":"   63","line":"    struct is_string<wchar_t*> : mpl::true_ {};"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"    template <std::size_t N>"},
{"lineNum":"   66","line":"    struct is_string<char[N]> : mpl::true_ {};"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"    template <std::size_t N>"},
{"lineNum":"   69","line":"    struct is_string<wchar_t[N]> : mpl::true_ {};"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"    template <std::size_t N>"},
{"lineNum":"   72","line":"    struct is_string<char const[N]> : mpl::true_ {};"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"    template <std::size_t N>"},
{"lineNum":"   75","line":"    struct is_string<wchar_t const[N]> : mpl::true_ {};"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"    template <std::size_t N>"},
{"lineNum":"   78","line":"    struct is_string<char(&)[N]> : mpl::true_ {};"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"    template <std::size_t N>"},
{"lineNum":"   81","line":"    struct is_string<wchar_t(&)[N]> : mpl::true_ {};"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"    template <std::size_t N>"},
{"lineNum":"   84","line":"    struct is_string<char const(&)[N]> : mpl::true_ {};"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"    template <std::size_t N>"},
{"lineNum":"   87","line":"    struct is_string<wchar_t const(&)[N]> : mpl::true_ {};"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"    template <typename T, typename Traits, typename Allocator>"},
{"lineNum":"   90","line":"    struct is_string<std::basic_string<T, Traits, Allocator> > : mpl::true_ {};"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   93","line":"    // Get the underlying char type of a string"},
{"lineNum":"   94","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   95","line":"    template <typename T>"},
{"lineNum":"   96","line":"    struct char_type_of;"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"    template <typename T>"},
{"lineNum":"   99","line":"    struct char_type_of<T const> : char_type_of<T> {};"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"    template <>"},
{"lineNum":"  102","line":"    struct char_type_of<char> : mpl::identity<char> {};"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"    template <>"},
{"lineNum":"  105","line":"    struct char_type_of<wchar_t> : mpl::identity<wchar_t> {};"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"    template <>"},
{"lineNum":"  108","line":"    struct char_type_of<char const*> : mpl::identity<char const> {};"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"    template <>"},
{"lineNum":"  111","line":"    struct char_type_of<wchar_t const*> : mpl::identity<wchar_t const> {};"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"    template <>"},
{"lineNum":"  114","line":"    struct char_type_of<char*> : mpl::identity<char> {};"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"    template <>"},
{"lineNum":"  117","line":"    struct char_type_of<wchar_t*> : mpl::identity<wchar_t> {};"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"    template <std::size_t N>"},
{"lineNum":"  120","line":"    struct char_type_of<char[N]> : mpl::identity<char> {};"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"    template <std::size_t N>"},
{"lineNum":"  123","line":"    struct char_type_of<wchar_t[N]> : mpl::identity<wchar_t> {};"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"    template <std::size_t N>"},
{"lineNum":"  126","line":"    struct char_type_of<char const[N]> : mpl::identity<char const> {};"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"    template <std::size_t N>"},
{"lineNum":"  129","line":"    struct char_type_of<wchar_t const[N]> : mpl::identity<wchar_t const> {};"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"    template <std::size_t N>"},
{"lineNum":"  132","line":"    struct char_type_of<char(&)[N]> : mpl::identity<char> {};"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"    template <std::size_t N>"},
{"lineNum":"  135","line":"    struct char_type_of<wchar_t(&)[N]> : mpl::identity<wchar_t> {};"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"    template <std::size_t N>"},
{"lineNum":"  138","line":"    struct char_type_of<char const(&)[N]> : mpl::identity<char const> {};"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"    template <std::size_t N>"},
{"lineNum":"  141","line":"    struct char_type_of<wchar_t const(&)[N]> : mpl::identity<wchar_t const> {};"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"    template <typename T, typename Traits, typename Allocator>"},
{"lineNum":"  144","line":"    struct char_type_of<std::basic_string<T, Traits, Allocator> >"},
{"lineNum":"  145","line":"      : mpl::identity<T> {};"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  148","line":"    // Get the C string from a string"},
{"lineNum":"  149","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  150","line":"    template <typename String>"},
{"lineNum":"  151","line":"    struct extract_c_string;"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"    template <typename String>"},
{"lineNum":"  154","line":"    struct extract_c_string"},
{"lineNum":"  155","line":"    {"},
{"lineNum":"  156","line":"        typedef typename char_type_of<String>::type char_type;"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"        template <typename T>"},
{"lineNum":"  159","line":"        static T const* call (T* str)"},
{"lineNum":"  160","line":"        {"},
{"lineNum":"  161","line":"            return (T const*)str;"},
{"lineNum":"  162","line":"        }"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"        template <typename T>"},
{"lineNum":"  165","line":"        static T const* call (T const* str)"},
{"lineNum":"  166","line":"        {"},
{"lineNum":"  167","line":"            return str;"},
{"lineNum":"  168","line":"        }"},
{"lineNum":"  169","line":"    };"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"    // Forwarder that strips const"},
{"lineNum":"  172","line":"    template <typename T>"},
{"lineNum":"  173","line":"    struct extract_c_string<T const>"},
{"lineNum":"  174","line":"    {"},
{"lineNum":"  175","line":"        typedef typename extract_c_string<T>::char_type char_type;"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"        static typename extract_c_string<T>::char_type const* call (T const str)"},
{"lineNum":"  178","line":"        {"},
{"lineNum":"  179","line":"            return extract_c_string<T>::call(str);"},
{"lineNum":"  180","line":"        }"},
{"lineNum":"  181","line":"    };"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"    // Forwarder that strips references"},
{"lineNum":"  184","line":"    template <typename T>"},
{"lineNum":"  185","line":"    struct extract_c_string<T&>"},
{"lineNum":"  186","line":"    {"},
{"lineNum":"  187","line":"        typedef typename extract_c_string<T>::char_type char_type;"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"        static typename extract_c_string<T>::char_type const* call (T& str)"},
{"lineNum":"  190","line":"        {"},
{"lineNum":"  191","line":"            return extract_c_string<T>::call(str);"},
{"lineNum":"  192","line":"        }"},
{"lineNum":"  193","line":"    };"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"    // Forwarder that strips const references"},
{"lineNum":"  196","line":"    template <typename T>"},
{"lineNum":"  197","line":"    struct extract_c_string<T const&>"},
{"lineNum":"  198","line":"    {"},
{"lineNum":"  199","line":"        typedef typename extract_c_string<T>::char_type char_type;"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"        static typename extract_c_string<T>::char_type const* call (T const& str)"},
{"lineNum":"  202","line":"        {"},
{"lineNum":"  203","line":"            return extract_c_string<T>::call(str);"},
{"lineNum":"  204","line":"        }"},
{"lineNum":"  205","line":"    };"},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"    template <typename T, typename Traits, typename Allocator>"},
{"lineNum":"  208","line":"    struct extract_c_string<std::basic_string<T, Traits, Allocator> >"},
{"lineNum":"  209","line":"    {"},
{"lineNum":"  210","line":"        typedef T char_type;"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"        typedef std::basic_string<T, Traits, Allocator> string;"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"        static T const* call (string const& str)"},
{"lineNum":"  215","line":"        {"},
{"lineNum":"  216","line":"            return str.c_str();"},
{"lineNum":"  217","line":"        }"},
{"lineNum":"  218","line":"    };"},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"    template <typename T>"},
{"lineNum":"  221","line":"    typename extract_c_string<T*>::char_type const*"},
{"lineNum":"  222","line":"    get_c_string (T* str)"},
{"lineNum":"  223","line":"    {"},
{"lineNum":"  224","line":"        return extract_c_string<T*>::call(str);"},
{"lineNum":"  225","line":"    }"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"    template <typename T>"},
{"lineNum":"  228","line":"    typename extract_c_string<T const*>::char_type const*"},
{"lineNum":"  229","line":"    get_c_string (T const* str)"},
{"lineNum":"  230","line":"    {"},
{"lineNum":"  231","line":"        return extract_c_string<T const*>::call(str);"},
{"lineNum":"  232","line":"    }"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"    template <typename String>"},
{"lineNum":"  235","line":"    typename extract_c_string<String>::char_type const*"},
{"lineNum":"  236","line":"    get_c_string (String& str)"},
{"lineNum":"  237","line":"    {"},
{"lineNum":"  238","line":"        return extract_c_string<String>::call(str);"},
{"lineNum":"  239","line":"    }"},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"    template <typename String>"},
{"lineNum":"  242","line":"    typename extract_c_string<String>::char_type const*"},
{"lineNum":"  243","line":"    get_c_string (String const& str)"},
{"lineNum":"  244","line":"    {"},
{"lineNum":"  245","line":"        return extract_c_string<String>::call(str);"},
{"lineNum":"  246","line":"    }"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  249","line":"    // Get the begin/end iterators from a string"},
{"lineNum":"  250","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"    // Implementation for C-style strings."},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"// gcc 3.x.x has problems resolving ambiguities here"},
{"lineNum":"  255","line":"#if defined(__GNUC__) && (__GNUC__ < 4)"},
{"lineNum":"  256","line":"    template <typename T>"},
{"lineNum":"  257","line":"    inline typename add_const<T>::type * get_begin(T* str) { return str; }"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"    template <typename T>"},
{"lineNum":"  260","line":"    inline typename add_const<T>::type* get_end(T* str)"},
{"lineNum":"  261","line":"    {"},
{"lineNum":"  262","line":"        T* last = str;"},
{"lineNum":"  263","line":"        while (*last)"},
{"lineNum":"  264","line":"            last++;"},
{"lineNum":"  265","line":"        return last;"},
{"lineNum":"  266","line":"    }"},
{"lineNum":"  267","line":"#else"},
{"lineNum":"  268","line":"    template <typename T>"},
{"lineNum":"  269","line":"    inline T const* get_begin(T const* str) { return str; }"},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"    template <typename T>"},
{"lineNum":"  272","line":"    inline T* get_begin(T* str) { return str; }"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"    template <typename T>"},
{"lineNum":"  275","line":"    inline T const* get_end(T const* str)"},
{"lineNum":"  276","line":"    {"},
{"lineNum":"  277","line":"        T const* last = str;"},
{"lineNum":"  278","line":"        while (*last)","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  279","line":"            last++;"},
{"lineNum":"  280","line":"        return last;"},
{"lineNum":"  281","line":"    }"},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"    template <typename T>"},
{"lineNum":"  284","line":"    inline T* get_end(T* str)"},
{"lineNum":"  285","line":"    {"},
{"lineNum":"  286","line":"        T* last = str;"},
{"lineNum":"  287","line":"        while (*last)"},
{"lineNum":"  288","line":"            last++;"},
{"lineNum":"  289","line":"        return last;"},
{"lineNum":"  290","line":"    }"},
{"lineNum":"  291","line":"#endif"},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"    // Implementation for containers (includes basic_string)."},
{"lineNum":"  294","line":"    template <typename T, typename Str>"},
{"lineNum":"  295","line":"    inline typename Str::const_iterator get_begin(Str const& str)"},
{"lineNum":"  296","line":"    { return str.begin(); }"},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":"    template <typename T, typename Str>"},
{"lineNum":"  299","line":"    inline typename Str::iterator"},
{"lineNum":"  300","line":"    get_begin(Str& str BOOST_PROTO_DISABLE_IF_IS_CONST(Str))"},
{"lineNum":"  301","line":"    { return str.begin(); }"},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"    template <typename T, typename Str>"},
{"lineNum":"  304","line":"    inline typename Str::const_iterator get_end(Str const& str)"},
{"lineNum":"  305","line":"    { return str.end(); }"},
{"lineNum":"  306","line":""},
{"lineNum":"  307","line":"    template <typename T, typename Str>"},
{"lineNum":"  308","line":"    inline typename Str::iterator"},
{"lineNum":"  309","line":"    get_end(Str& str BOOST_PROTO_DISABLE_IF_IS_CONST(Str))"},
{"lineNum":"  310","line":"    { return str.end(); }"},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":"    // Default implementation for other types: try a C-style string"},
{"lineNum":"  313","line":"    // conversion."},
{"lineNum":"  314","line":"    // These overloads are explicitly disabled for containers,"},
{"lineNum":"  315","line":"    // as they would be ambiguous with the previous ones."},
{"lineNum":"  316","line":"    template <typename T, typename Str>"},
{"lineNum":"  317","line":"    inline typename disable_if<is_container<Str>"},
{"lineNum":"  318","line":"      , T const*>::type get_begin(Str const& str)"},
{"lineNum":"  319","line":"    { return str; }"},
{"lineNum":"  320","line":""},
{"lineNum":"  321","line":"    template <typename T, typename Str>"},
{"lineNum":"  322","line":"    inline typename disable_if<is_container<Str>"},
{"lineNum":"  323","line":"      , T const*>::type get_end(Str const& str)"},
{"lineNum":"  324","line":"    { return get_end(get_begin<T>(str)); }"},
{"lineNum":"  325","line":"}"},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"namespace result_of"},
{"lineNum":"  328","line":"{"},
{"lineNum":"  329","line":"    template <typename Char, typename T, typename Enable = void>"},
{"lineNum":"  330","line":"    struct get_begin"},
{"lineNum":"  331","line":"    {"},
{"lineNum":"  332","line":"        typedef typename traits::char_type_of<T>::type char_type;"},
{"lineNum":"  333","line":""},
{"lineNum":"  334","line":"        typedef typename mpl::if_<"},
{"lineNum":"  335","line":"            is_const<char_type>"},
{"lineNum":"  336","line":"          , char_type const"},
{"lineNum":"  337","line":"          , char_type"},
{"lineNum":"  338","line":"        >::type* type;"},
{"lineNum":"  339","line":"    };"},
{"lineNum":"  340","line":""},
{"lineNum":"  341","line":"    template <typename Char, typename Str>"},
{"lineNum":"  342","line":"    struct get_begin<Char, Str"},
{"lineNum":"  343","line":"      , typename enable_if<traits::is_container<Str> >::type>"},
{"lineNum":"  344","line":"    {"},
{"lineNum":"  345","line":"        typedef typename mpl::if_<"},
{"lineNum":"  346","line":"            is_const<Str>"},
{"lineNum":"  347","line":"          , typename Str::const_iterator"},
{"lineNum":"  348","line":"          , typename Str::iterator"},
{"lineNum":"  349","line":"        >::type type;"},
{"lineNum":"  350","line":"    };"},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"    template <typename Char, typename T>"},
{"lineNum":"  353","line":"    struct get_end : get_begin<Char, T> {};"},
{"lineNum":"  354","line":"}"},
{"lineNum":"  355","line":""},
{"lineNum":"  356","line":"}}"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 1, "covered" : 0,};
var merged_data = [];
