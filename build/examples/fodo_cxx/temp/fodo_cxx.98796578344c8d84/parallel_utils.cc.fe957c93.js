var data = {lines:[
{"lineNum":"    1","line":"#include \"parallel_utils.h\""},
{"lineNum":"    2","line":"#include <cmath>"},
{"lineNum":"    3","line":"#include <stdexcept>"},
{"lineNum":"    4","line":"void"},
{"lineNum":"    5","line":"decompose_1d_raw(int processors, int length, std::vector<int > &offsets,"},
{"lineNum":"    6","line":"        std::vector<int > &counts)"},
{"lineNum":"    7","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"    8","line":"    int min_counts = length / processors;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"    9","line":"    int remainder = static_cast<int > (fmod(length, processors));","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   10","line":"    int offset = 0;"},
{"lineNum":"   11","line":"    for (int i = 0; i < processors; ++i) {","class":"lineNoCov","hits":"0","possible_hits":"15",},
{"lineNum":"   12","line":"        int count = min_counts;"},
{"lineNum":"   13","line":"        if (i >= (processors - remainder)) {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   14","line":"            count += 1;"},
{"lineNum":"   15","line":"        }"},
{"lineNum":"   16","line":"        offsets.at(i) = offset;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   17","line":"        counts.at(i) = count;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   18","line":"        offset += count;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   19","line":"    }"},
{"lineNum":"   20","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"void"},
{"lineNum":"   23","line":"decompose_1d(Commxx const& comm, int length, std::vector<int > & offsets, std::vector<"},
{"lineNum":"   24","line":"        int > &counts)"},
{"lineNum":"   25","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   26","line":"    int size = comm.get_size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   27","line":"    decompose_1d_raw(size, length, offsets, counts);"},
{"lineNum":"   28","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"int"},
{"lineNum":"   31","line":"decompose_1d_local(Commxx const& comm, int length)"},
{"lineNum":"   32","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   33","line":"    int size = comm.get_size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   34","line":"    int rank = comm.get_rank();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   35","line":"    std::vector<int > offsets(size), counts(size);"},
{"lineNum":"   36","line":"    decompose_1d_raw(size, length, offsets, counts);"},
{"lineNum":"   37","line":"    return counts[rank];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   38","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"std::vector<std::vector<int > >"},
{"lineNum":"   41","line":"distribute_1d_raw(int processors, int elements)"},
{"lineNum":"   42","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   43","line":"    std::vector<std::vector<int > > retval(elements);"},
{"lineNum":"   44","line":"    std::vector<int > offsets(elements), counts(elements);"},
{"lineNum":"   45","line":"    if (processors < elements) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   46","line":"        decompose_1d_raw(processors, elements, offsets, counts);"},
{"lineNum":"   47","line":"        int element = 0;"},
{"lineNum":"   48","line":"        for (int processor = 0; processor < processors; ++processor) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   49","line":"            for (int count = 0; count < counts.at(processor); ++count) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   50","line":"                retval.at(element).resize(1);"},
{"lineNum":"   51","line":"                retval.at(element).at(0) = processor;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   52","line":"                ++element;"},
{"lineNum":"   53","line":"            }"},
{"lineNum":"   54","line":"        }"},
{"lineNum":"   55","line":"    } else {"},
{"lineNum":"   56","line":"        decompose_1d_raw(elements, processors, offsets, counts);"},
{"lineNum":"   57","line":"        for (int element = 0; element < elements; ++element) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   58","line":"            retval.at(element).resize(counts.at(element));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   59","line":"            for (int count = 0; count < counts.at(element); ++count) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   60","line":"                retval.at(element).at(count) = offsets.at(element) + count;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   61","line":"            }"},
{"lineNum":"   62","line":"        }"},
{"lineNum":"   63","line":"    }"},
{"lineNum":"   64","line":"    return retval;"},
{"lineNum":"   65","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"std::vector<std::vector<int > >"},
{"lineNum":"   68","line":"distribute_1d(Commxx const& comm, int elements)"},
{"lineNum":"   69","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   70","line":"    return distribute_1d_raw(comm.get_size(), elements);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   71","line":"}"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"void"},
{"lineNum":"   74","line":"counts_and_offsets_for_impedance_raw(unsigned int  processors, int length, std::vector<int > &offsets,"},
{"lineNum":"   75","line":"        std::vector<int > &counts)"},
{"lineNum":"   76","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":" if (offsets.size() != processors)  throw std::runtime_error(\"parallel utilis:counts and offsets for imped, offsets size\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   79","line":" if (counts.size() != processors)  throw std::runtime_error(\"parallel utilis:counts and offsets for imped. counts size\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   80","line":" std::vector<std::vector<int > > ranks("},
{"lineNum":"   81","line":"            distribute_1d_raw(processors, length));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"        int count=0;"},
{"lineNum":"   84","line":"        int proc, proc_saved;"},
{"lineNum":"   85","line":"        proc_saved=ranks[0][0];"},
{"lineNum":"   86","line":"        for (int elm = 0; elm < length; ++elm) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   87","line":"            proc=ranks[elm][0];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   88","line":"            counts[proc]+=1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   89","line":"            if (proc!= proc_saved) count += counts[proc_saved];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   90","line":"            offsets[proc]=count;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   91","line":"            proc_saved=proc;"},
{"lineNum":"   92","line":"        }"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"void"},
{"lineNum":"   97","line":"counts_and_offsets_for_impedance(Commxx const& comm,int length, std::vector<int > &offsets,"},
{"lineNum":"   98","line":" std::vector<int > &counts)"},
{"lineNum":"   99","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  100","line":"  counts_and_offsets_for_impedance_raw( comm.get_size(), length, offsets, counts);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  101","line":"}"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 41, "covered" : 0,};
var merged_data = [];
