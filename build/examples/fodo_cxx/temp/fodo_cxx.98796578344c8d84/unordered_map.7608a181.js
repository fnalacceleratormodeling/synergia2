var data = {lines:[
{"lineNum":"    1","line":"// -*- C++ -*-"},
{"lineNum":"    2","line":"//===-------------------------- unordered_map -----------------------------===//"},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions."},
{"lineNum":"    5","line":"// See https://llvm.org/LICENSE.txt for license information."},
{"lineNum":"    6","line":"// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef _LIBCPP_UNORDERED_MAP"},
{"lineNum":"   11","line":"#define _LIBCPP_UNORDERED_MAP"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"/*"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"    unordered_map synopsis"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"#include <initializer_list>"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"namespace std"},
{"lineNum":"   20","line":"{"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"template <class Key, class T, class Hash = hash<Key>, class Pred = equal_to<Key>,"},
{"lineNum":"   23","line":"          class Alloc = allocator<pair<const Key, T>>>"},
{"lineNum":"   24","line":"class unordered_map"},
{"lineNum":"   25","line":"{"},
{"lineNum":"   26","line":"public:"},
{"lineNum":"   27","line":"    // types"},
{"lineNum":"   28","line":"    typedef Key                                                        key_type;"},
{"lineNum":"   29","line":"    typedef T                                                          mapped_type;"},
{"lineNum":"   30","line":"    typedef Hash                                                       hasher;"},
{"lineNum":"   31","line":"    typedef Pred                                                       key_equal;"},
{"lineNum":"   32","line":"    typedef Alloc                                                      allocator_type;"},
{"lineNum":"   33","line":"    typedef pair<const key_type, mapped_type>                          value_type;"},
{"lineNum":"   34","line":"    typedef value_type&                                                reference;"},
{"lineNum":"   35","line":"    typedef const value_type&                                          const_reference;"},
{"lineNum":"   36","line":"    typedef typename allocator_traits<allocator_type>::pointer         pointer;"},
{"lineNum":"   37","line":"    typedef typename allocator_traits<allocator_type>::const_pointer   const_pointer;"},
{"lineNum":"   38","line":"    typedef typename allocator_traits<allocator_type>::size_type       size_type;"},
{"lineNum":"   39","line":"    typedef typename allocator_traits<allocator_type>::difference_type difference_type;"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"    typedef /unspecified/ iterator;"},
{"lineNum":"   42","line":"    typedef /unspecified/ const_iterator;"},
{"lineNum":"   43","line":"    typedef /unspecified/ local_iterator;"},
{"lineNum":"   44","line":"    typedef /unspecified/ const_local_iterator;"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"    typedef unspecified                             node_type;            // C++17"},
{"lineNum":"   47","line":"    typedef INSERT_RETURN_TYPE<iterator, node_type> insert_return_type;   // C++17"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"    unordered_map()"},
{"lineNum":"   50","line":"        noexcept("},
{"lineNum":"   51","line":"            is_nothrow_default_constructible<hasher>::value &&"},
{"lineNum":"   52","line":"            is_nothrow_default_constructible<key_equal>::value &&"},
{"lineNum":"   53","line":"            is_nothrow_default_constructible<allocator_type>::value);"},
{"lineNum":"   54","line":"    explicit unordered_map(size_type n, const hasher& hf = hasher(),"},
{"lineNum":"   55","line":"                           const key_equal& eql = key_equal(),"},
{"lineNum":"   56","line":"                           const allocator_type& a = allocator_type());"},
{"lineNum":"   57","line":"    template <class InputIterator>"},
{"lineNum":"   58","line":"        unordered_map(InputIterator f, InputIterator l,"},
{"lineNum":"   59","line":"                      size_type n = 0, const hasher& hf = hasher(),"},
{"lineNum":"   60","line":"                      const key_equal& eql = key_equal(),"},
{"lineNum":"   61","line":"                      const allocator_type& a = allocator_type());"},
{"lineNum":"   62","line":"    explicit unordered_map(const allocator_type&);"},
{"lineNum":"   63","line":"    unordered_map(const unordered_map&);"},
{"lineNum":"   64","line":"    unordered_map(const unordered_map&, const Allocator&);"},
{"lineNum":"   65","line":"    unordered_map(unordered_map&&)"},
{"lineNum":"   66","line":"        noexcept("},
{"lineNum":"   67","line":"            is_nothrow_move_constructible<hasher>::value &&"},
{"lineNum":"   68","line":"            is_nothrow_move_constructible<key_equal>::value &&"},
{"lineNum":"   69","line":"            is_nothrow_move_constructible<allocator_type>::value);"},
{"lineNum":"   70","line":"    unordered_map(unordered_map&&, const Allocator&);"},
{"lineNum":"   71","line":"    unordered_map(initializer_list<value_type>, size_type n = 0,"},
{"lineNum":"   72","line":"                  const hasher& hf = hasher(), const key_equal& eql = key_equal(),"},
{"lineNum":"   73","line":"                  const allocator_type& a = allocator_type());"},
{"lineNum":"   74","line":"    unordered_map(size_type n, const allocator_type& a)"},
{"lineNum":"   75","line":"      : unordered_map(n, hasher(), key_equal(), a) {}  // C++14"},
{"lineNum":"   76","line":"    unordered_map(size_type n, const hasher& hf, const allocator_type& a)"},
{"lineNum":"   77","line":"      : unordered_map(n, hf, key_equal(), a) {}  // C++14"},
{"lineNum":"   78","line":"    template <class InputIterator>"},
{"lineNum":"   79","line":"      unordered_map(InputIterator f, InputIterator l, size_type n, const allocator_type& a)"},
{"lineNum":"   80","line":"      : unordered_map(f, l, n, hasher(), key_equal(), a) {}  // C++14"},
{"lineNum":"   81","line":"    template <class InputIterator>"},
{"lineNum":"   82","line":"      unordered_map(InputIterator f, InputIterator l, size_type n, const hasher& hf,"},
{"lineNum":"   83","line":"        const allocator_type& a)"},
{"lineNum":"   84","line":"      : unordered_map(f, l, n, hf, key_equal(), a) {}  // C++14"},
{"lineNum":"   85","line":"    unordered_map(initializer_list<value_type> il, size_type n, const allocator_type& a)"},
{"lineNum":"   86","line":"      : unordered_map(il, n, hasher(), key_equal(), a) {}  // C++14"},
{"lineNum":"   87","line":"    unordered_map(initializer_list<value_type> il, size_type n, const hasher& hf,"},
{"lineNum":"   88","line":"      const allocator_type& a)"},
{"lineNum":"   89","line":"      : unordered_map(il, n, hf, key_equal(), a) {}  // C++14"},
{"lineNum":"   90","line":"    ~unordered_map();"},
{"lineNum":"   91","line":"    unordered_map& operator=(const unordered_map&);"},
{"lineNum":"   92","line":"    unordered_map& operator=(unordered_map&&)"},
{"lineNum":"   93","line":"        noexcept("},
{"lineNum":"   94","line":"            allocator_type::propagate_on_container_move_assignment::value &&"},
{"lineNum":"   95","line":"            is_nothrow_move_assignable<allocator_type>::value &&"},
{"lineNum":"   96","line":"            is_nothrow_move_assignable<hasher>::value &&"},
{"lineNum":"   97","line":"            is_nothrow_move_assignable<key_equal>::value);"},
{"lineNum":"   98","line":"    unordered_map& operator=(initializer_list<value_type>);"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"    allocator_type get_allocator() const noexcept;"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"    bool      empty() const noexcept;"},
{"lineNum":"  103","line":"    size_type size() const noexcept;"},
{"lineNum":"  104","line":"    size_type max_size() const noexcept;"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"    iterator       begin() noexcept;"},
{"lineNum":"  107","line":"    iterator       end() noexcept;"},
{"lineNum":"  108","line":"    const_iterator begin()  const noexcept;"},
{"lineNum":"  109","line":"    const_iterator end()    const noexcept;"},
{"lineNum":"  110","line":"    const_iterator cbegin() const noexcept;"},
{"lineNum":"  111","line":"    const_iterator cend()   const noexcept;"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"    template <class... Args>"},
{"lineNum":"  114","line":"        pair<iterator, bool> emplace(Args&&... args);"},
{"lineNum":"  115","line":"    template <class... Args>"},
{"lineNum":"  116","line":"        iterator emplace_hint(const_iterator position, Args&&... args);"},
{"lineNum":"  117","line":"    pair<iterator, bool> insert(const value_type& obj);"},
{"lineNum":"  118","line":"    template <class P>"},
{"lineNum":"  119","line":"        pair<iterator, bool> insert(P&& obj);"},
{"lineNum":"  120","line":"    iterator insert(const_iterator hint, const value_type& obj);"},
{"lineNum":"  121","line":"    template <class P>"},
{"lineNum":"  122","line":"        iterator insert(const_iterator hint, P&& obj);"},
{"lineNum":"  123","line":"    template <class InputIterator>"},
{"lineNum":"  124","line":"        void insert(InputIterator first, InputIterator last);"},
{"lineNum":"  125","line":"    void insert(initializer_list<value_type>);"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"    node_type extract(const_iterator position);                                       // C++17"},
{"lineNum":"  128","line":"    node_type extract(const key_type& x);                                             // C++17"},
{"lineNum":"  129","line":"    insert_return_type insert(node_type&& nh);                                        // C++17"},
{"lineNum":"  130","line":"    iterator           insert(const_iterator hint, node_type&& nh);                   // C++17"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"    template <class... Args>"},
{"lineNum":"  133","line":"        pair<iterator, bool> try_emplace(const key_type& k, Args&&... args);          // C++17"},
{"lineNum":"  134","line":"    template <class... Args>"},
{"lineNum":"  135","line":"        pair<iterator, bool> try_emplace(key_type&& k, Args&&... args);               // C++17"},
{"lineNum":"  136","line":"    template <class... Args>"},
{"lineNum":"  137","line":"        iterator try_emplace(const_iterator hint, const key_type& k, Args&&... args); // C++17"},
{"lineNum":"  138","line":"    template <class... Args>"},
{"lineNum":"  139","line":"        iterator try_emplace(const_iterator hint, key_type&& k, Args&&... args);      // C++17"},
{"lineNum":"  140","line":"    template <class M>"},
{"lineNum":"  141","line":"        pair<iterator, bool> insert_or_assign(const key_type& k, M&& obj);            // C++17"},
{"lineNum":"  142","line":"    template <class M>"},
{"lineNum":"  143","line":"        pair<iterator, bool> insert_or_assign(key_type&& k, M&& obj);                 // C++17"},
{"lineNum":"  144","line":"    template <class M>"},
{"lineNum":"  145","line":"        iterator insert_or_assign(const_iterator hint, const key_type& k, M&& obj);   // C++17"},
{"lineNum":"  146","line":"    template <class M>"},
{"lineNum":"  147","line":"        iterator insert_or_assign(const_iterator hint, key_type&& k, M&& obj);        // C++17"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"    iterator erase(const_iterator position);"},
{"lineNum":"  150","line":"    iterator erase(iterator position);  // C++14"},
{"lineNum":"  151","line":"    size_type erase(const key_type& k);"},
{"lineNum":"  152","line":"    iterator erase(const_iterator first, const_iterator last);"},
{"lineNum":"  153","line":"    void clear() noexcept;"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"    template<class H2, class P2>"},
{"lineNum":"  156","line":"      void merge(unordered_map<Key, T, H2, P2, Allocator>& source);         // C++17"},
{"lineNum":"  157","line":"    template<class H2, class P2>"},
{"lineNum":"  158","line":"      void merge(unordered_map<Key, T, H2, P2, Allocator>&& source);        // C++17"},
{"lineNum":"  159","line":"    template<class H2, class P2>"},
{"lineNum":"  160","line":"      void merge(unordered_multimap<Key, T, H2, P2, Allocator>& source);    // C++17"},
{"lineNum":"  161","line":"    template<class H2, class P2>"},
{"lineNum":"  162","line":"      void merge(unordered_multimap<Key, T, H2, P2, Allocator>&& source);   // C++17"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"    void swap(unordered_map&)"},
{"lineNum":"  165","line":"        noexcept("},
{"lineNum":"  166","line":"            (!allocator_type::propagate_on_container_swap::value ||"},
{"lineNum":"  167","line":"             __is_nothrow_swappable<allocator_type>::value) &&"},
{"lineNum":"  168","line":"            __is_nothrow_swappable<hasher>::value &&"},
{"lineNum":"  169","line":"            __is_nothrow_swappable<key_equal>::value);"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"    hasher hash_function() const;"},
{"lineNum":"  172","line":"    key_equal key_eq() const;"},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"    iterator       find(const key_type& k);"},
{"lineNum":"  175","line":"    const_iterator find(const key_type& k) const;"},
{"lineNum":"  176","line":"    template<typename K>"},
{"lineNum":"  177","line":"        iterator find(const K& x);              // C++20"},
{"lineNum":"  178","line":"    template<typename K>"},
{"lineNum":"  179","line":"        const_iterator find(const K& x) const;  // C++20"},
{"lineNum":"  180","line":"    size_type count(const key_type& k) const;"},
{"lineNum":"  181","line":"    template<typename K>"},
{"lineNum":"  182","line":"        size_type count(const K& k) const; // C++20"},
{"lineNum":"  183","line":"    bool contains(const key_type& k) const; // C++20"},
{"lineNum":"  184","line":"    template<typename K>"},
{"lineNum":"  185","line":"        bool contains(const K& k) const; // C++20"},
{"lineNum":"  186","line":"    pair<iterator, iterator>             equal_range(const key_type& k);"},
{"lineNum":"  187","line":"    pair<const_iterator, const_iterator> equal_range(const key_type& k) const;"},
{"lineNum":"  188","line":"    template<typename K>"},
{"lineNum":"  189","line":"        pair<iterator, iterator>             equal_range(const K& k); // C++20"},
{"lineNum":"  190","line":"    template<typename K>"},
{"lineNum":"  191","line":"        pair<const_iterator, const_iterator> equal_range(const K& k) const; // C++20"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"    mapped_type& operator[](const key_type& k);"},
{"lineNum":"  194","line":"    mapped_type& operator[](key_type&& k);"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"    mapped_type&       at(const key_type& k);"},
{"lineNum":"  197","line":"    const mapped_type& at(const key_type& k) const;"},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"    size_type bucket_count() const noexcept;"},
{"lineNum":"  200","line":"    size_type max_bucket_count() const noexcept;"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"    size_type bucket_size(size_type n) const;"},
{"lineNum":"  203","line":"    size_type bucket(const key_type& k) const;"},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"    local_iterator       begin(size_type n);"},
{"lineNum":"  206","line":"    local_iterator       end(size_type n);"},
{"lineNum":"  207","line":"    const_local_iterator begin(size_type n) const;"},
{"lineNum":"  208","line":"    const_local_iterator end(size_type n) const;"},
{"lineNum":"  209","line":"    const_local_iterator cbegin(size_type n) const;"},
{"lineNum":"  210","line":"    const_local_iterator cend(size_type n) const;"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"    float load_factor() const noexcept;"},
{"lineNum":"  213","line":"    float max_load_factor() const noexcept;"},
{"lineNum":"  214","line":"    void max_load_factor(float z);"},
{"lineNum":"  215","line":"    void rehash(size_type n);"},
{"lineNum":"  216","line":"    void reserve(size_type n);"},
{"lineNum":"  217","line":"};"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"template <class Key, class T, class Hash, class Pred, class Alloc>"},
{"lineNum":"  220","line":"    void swap(unordered_map<Key, T, Hash, Pred, Alloc>& x,"},
{"lineNum":"  221","line":"              unordered_map<Key, T, Hash, Pred, Alloc>& y)"},
{"lineNum":"  222","line":"              noexcept(noexcept(x.swap(y)));"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"template <class Key, class T, class Hash, class Pred, class Alloc>"},
{"lineNum":"  225","line":"    bool"},
{"lineNum":"  226","line":"    operator==(const unordered_map<Key, T, Hash, Pred, Alloc>& x,"},
{"lineNum":"  227","line":"               const unordered_map<Key, T, Hash, Pred, Alloc>& y);"},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"template <class Key, class T, class Hash, class Pred, class Alloc>"},
{"lineNum":"  230","line":"    bool"},
{"lineNum":"  231","line":"    operator!=(const unordered_map<Key, T, Hash, Pred, Alloc>& x,"},
{"lineNum":"  232","line":"               const unordered_map<Key, T, Hash, Pred, Alloc>& y);"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"template <class Key, class T, class Hash = hash<Key>, class Pred = equal_to<Key>,"},
{"lineNum":"  235","line":"          class Alloc = allocator<pair<const Key, T>>>"},
{"lineNum":"  236","line":"class unordered_multimap"},
{"lineNum":"  237","line":"{"},
{"lineNum":"  238","line":"public:"},
{"lineNum":"  239","line":"    // types"},
{"lineNum":"  240","line":"    typedef Key                                                        key_type;"},
{"lineNum":"  241","line":"    typedef T                                                          mapped_type;"},
{"lineNum":"  242","line":"    typedef Hash                                                       hasher;"},
{"lineNum":"  243","line":"    typedef Pred                                                       key_equal;"},
{"lineNum":"  244","line":"    typedef Alloc                                                      allocator_type;"},
{"lineNum":"  245","line":"    typedef pair<const key_type, mapped_type>                          value_type;"},
{"lineNum":"  246","line":"    typedef value_type&                                                reference;"},
{"lineNum":"  247","line":"    typedef const value_type&                                          const_reference;"},
{"lineNum":"  248","line":"    typedef typename allocator_traits<allocator_type>::pointer         pointer;"},
{"lineNum":"  249","line":"    typedef typename allocator_traits<allocator_type>::const_pointer   const_pointer;"},
{"lineNum":"  250","line":"    typedef typename allocator_traits<allocator_type>::size_type       size_type;"},
{"lineNum":"  251","line":"    typedef typename allocator_traits<allocator_type>::difference_type difference_type;"},
{"lineNum":"  252","line":""},
{"lineNum":"  253","line":"    typedef /unspecified/ iterator;"},
{"lineNum":"  254","line":"    typedef /unspecified/ const_iterator;"},
{"lineNum":"  255","line":"    typedef /unspecified/ local_iterator;"},
{"lineNum":"  256","line":"    typedef /unspecified/ const_local_iterator;"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"    typedef unspecified node_type;    // C++17"},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"    unordered_multimap()"},
{"lineNum":"  261","line":"        noexcept("},
{"lineNum":"  262","line":"            is_nothrow_default_constructible<hasher>::value &&"},
{"lineNum":"  263","line":"            is_nothrow_default_constructible<key_equal>::value &&"},
{"lineNum":"  264","line":"            is_nothrow_default_constructible<allocator_type>::value);"},
{"lineNum":"  265","line":"    explicit unordered_multimap(size_type n, const hasher& hf = hasher(),"},
{"lineNum":"  266","line":"                           const key_equal& eql = key_equal(),"},
{"lineNum":"  267","line":"                           const allocator_type& a = allocator_type());"},
{"lineNum":"  268","line":"    template <class InputIterator>"},
{"lineNum":"  269","line":"        unordered_multimap(InputIterator f, InputIterator l,"},
{"lineNum":"  270","line":"                      size_type n = 0, const hasher& hf = hasher(),"},
{"lineNum":"  271","line":"                      const key_equal& eql = key_equal(),"},
{"lineNum":"  272","line":"                      const allocator_type& a = allocator_type());"},
{"lineNum":"  273","line":"    explicit unordered_multimap(const allocator_type&);"},
{"lineNum":"  274","line":"    unordered_multimap(const unordered_multimap&);"},
{"lineNum":"  275","line":"    unordered_multimap(const unordered_multimap&, const Allocator&);"},
{"lineNum":"  276","line":"    unordered_multimap(unordered_multimap&&)"},
{"lineNum":"  277","line":"        noexcept("},
{"lineNum":"  278","line":"            is_nothrow_move_constructible<hasher>::value &&"},
{"lineNum":"  279","line":"            is_nothrow_move_constructible<key_equal>::value &&"},
{"lineNum":"  280","line":"            is_nothrow_move_constructible<allocator_type>::value);"},
{"lineNum":"  281","line":"    unordered_multimap(unordered_multimap&&, const Allocator&);"},
{"lineNum":"  282","line":"    unordered_multimap(initializer_list<value_type>, size_type n = 0,"},
{"lineNum":"  283","line":"                  const hasher& hf = hasher(), const key_equal& eql = key_equal(),"},
{"lineNum":"  284","line":"                  const allocator_type& a = allocator_type());"},
{"lineNum":"  285","line":"    unordered_multimap(size_type n, const allocator_type& a)"},
{"lineNum":"  286","line":"      : unordered_multimap(n, hasher(), key_equal(), a) {}  // C++14"},
{"lineNum":"  287","line":"    unordered_multimap(size_type n, const hasher& hf, const allocator_type& a)"},
{"lineNum":"  288","line":"      : unordered_multimap(n, hf, key_equal(), a) {}  // C++14"},
{"lineNum":"  289","line":"    template <class InputIterator>"},
{"lineNum":"  290","line":"      unordered_multimap(InputIterator f, InputIterator l, size_type n, const allocator_type& a)"},
{"lineNum":"  291","line":"      : unordered_multimap(f, l, n, hasher(), key_equal(), a) {}  // C++14"},
{"lineNum":"  292","line":"    template <class InputIterator>"},
{"lineNum":"  293","line":"      unordered_multimap(InputIterator f, InputIterator l, size_type n, const hasher& hf,"},
{"lineNum":"  294","line":"        const allocator_type& a)"},
{"lineNum":"  295","line":"      : unordered_multimap(f, l, n, hf, key_equal(), a) {}  // C++14"},
{"lineNum":"  296","line":"    unordered_multimap(initializer_list<value_type> il, size_type n, const allocator_type& a)"},
{"lineNum":"  297","line":"      : unordered_multimap(il, n, hasher(), key_equal(), a) {}  // C++14"},
{"lineNum":"  298","line":"    unordered_multimap(initializer_list<value_type> il, size_type n, const hasher& hf,"},
{"lineNum":"  299","line":"      const allocator_type& a)"},
{"lineNum":"  300","line":"      : unordered_multimap(il, n, hf, key_equal(), a) {}  // C++14"},
{"lineNum":"  301","line":"    ~unordered_multimap();"},
{"lineNum":"  302","line":"    unordered_multimap& operator=(const unordered_multimap&);"},
{"lineNum":"  303","line":"    unordered_multimap& operator=(unordered_multimap&&)"},
{"lineNum":"  304","line":"        noexcept("},
{"lineNum":"  305","line":"            allocator_type::propagate_on_container_move_assignment::value &&"},
{"lineNum":"  306","line":"            is_nothrow_move_assignable<allocator_type>::value &&"},
{"lineNum":"  307","line":"            is_nothrow_move_assignable<hasher>::value &&"},
{"lineNum":"  308","line":"            is_nothrow_move_assignable<key_equal>::value);"},
{"lineNum":"  309","line":"    unordered_multimap& operator=(initializer_list<value_type>);"},
{"lineNum":"  310","line":""},
{"lineNum":"  311","line":"    allocator_type get_allocator() const noexcept;"},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":"    bool      empty() const noexcept;"},
{"lineNum":"  314","line":"    size_type size() const noexcept;"},
{"lineNum":"  315","line":"    size_type max_size() const noexcept;"},
{"lineNum":"  316","line":""},
{"lineNum":"  317","line":"    iterator       begin() noexcept;"},
{"lineNum":"  318","line":"    iterator       end() noexcept;"},
{"lineNum":"  319","line":"    const_iterator begin()  const noexcept;"},
{"lineNum":"  320","line":"    const_iterator end()    const noexcept;"},
{"lineNum":"  321","line":"    const_iterator cbegin() const noexcept;"},
{"lineNum":"  322","line":"    const_iterator cend()   const noexcept;"},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"    template <class... Args>"},
{"lineNum":"  325","line":"        iterator emplace(Args&&... args);"},
{"lineNum":"  326","line":"    template <class... Args>"},
{"lineNum":"  327","line":"        iterator emplace_hint(const_iterator position, Args&&... args);"},
{"lineNum":"  328","line":"    iterator insert(const value_type& obj);"},
{"lineNum":"  329","line":"    template <class P>"},
{"lineNum":"  330","line":"        iterator insert(P&& obj);"},
{"lineNum":"  331","line":"    iterator insert(const_iterator hint, const value_type& obj);"},
{"lineNum":"  332","line":"    template <class P>"},
{"lineNum":"  333","line":"        iterator insert(const_iterator hint, P&& obj);"},
{"lineNum":"  334","line":"    template <class InputIterator>"},
{"lineNum":"  335","line":"        void insert(InputIterator first, InputIterator last);"},
{"lineNum":"  336","line":"    void insert(initializer_list<value_type>);"},
{"lineNum":"  337","line":""},
{"lineNum":"  338","line":"    node_type extract(const_iterator position);                // C++17"},
{"lineNum":"  339","line":"    node_type extract(const key_type& x);                      // C++17"},
{"lineNum":"  340","line":"    iterator insert(node_type&& nh);                           // C++17"},
{"lineNum":"  341","line":"    iterator insert(const_iterator hint, node_type&& nh);      // C++17"},
{"lineNum":"  342","line":""},
{"lineNum":"  343","line":"    iterator erase(const_iterator position);"},
{"lineNum":"  344","line":"    iterator erase(iterator position);  // C++14"},
{"lineNum":"  345","line":"    size_type erase(const key_type& k);"},
{"lineNum":"  346","line":"    iterator erase(const_iterator first, const_iterator last);"},
{"lineNum":"  347","line":"    void clear() noexcept;"},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"    template<class H2, class P2>"},
{"lineNum":"  350","line":"      void merge(unordered_multimap<Key, T, H2, P2, Allocator>& source);    // C++17"},
{"lineNum":"  351","line":"    template<class H2, class P2>"},
{"lineNum":"  352","line":"      void merge(unordered_multimap<Key, T, H2, P2, Allocator>&& source);   // C++17"},
{"lineNum":"  353","line":"    template<class H2, class P2>"},
{"lineNum":"  354","line":"      void merge(unordered_map<Key, T, H2, P2, Allocator>& source);         // C++17"},
{"lineNum":"  355","line":"    template<class H2, class P2>"},
{"lineNum":"  356","line":"      void merge(unordered_map<Key, T, H2, P2, Allocator>&& source);        // C++17"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"    void swap(unordered_multimap&)"},
{"lineNum":"  359","line":"        noexcept("},
{"lineNum":"  360","line":"            (!allocator_type::propagate_on_container_swap::value ||"},
{"lineNum":"  361","line":"             __is_nothrow_swappable<allocator_type>::value) &&"},
{"lineNum":"  362","line":"            __is_nothrow_swappable<hasher>::value &&"},
{"lineNum":"  363","line":"            __is_nothrow_swappable<key_equal>::value);"},
{"lineNum":"  364","line":""},
{"lineNum":"  365","line":"    hasher hash_function() const;"},
{"lineNum":"  366","line":"    key_equal key_eq() const;"},
{"lineNum":"  367","line":""},
{"lineNum":"  368","line":"    iterator       find(const key_type& k);"},
{"lineNum":"  369","line":"    const_iterator find(const key_type& k) const;"},
{"lineNum":"  370","line":"    template<typename K>"},
{"lineNum":"  371","line":"        iterator find(const K& x);              // C++20"},
{"lineNum":"  372","line":"    template<typename K>"},
{"lineNum":"  373","line":"        const_iterator find(const K& x) const;  // C++20"},
{"lineNum":"  374","line":"    size_type count(const key_type& k) const;"},
{"lineNum":"  375","line":"    template<typename K>"},
{"lineNum":"  376","line":"        size_type count(const K& k) const; // C++20"},
{"lineNum":"  377","line":"    bool contains(const key_type& k) const; // C++20"},
{"lineNum":"  378","line":"    template<typename K>"},
{"lineNum":"  379","line":"        bool contains(const K& k) const; // C++20"},
{"lineNum":"  380","line":"    pair<iterator, iterator>             equal_range(const key_type& k);"},
{"lineNum":"  381","line":"    pair<const_iterator, const_iterator> equal_range(const key_type& k) const;"},
{"lineNum":"  382","line":"    template<typename K>"},
{"lineNum":"  383","line":"        pair<iterator, iterator>             equal_range(const K& k); // C++20"},
{"lineNum":"  384","line":"    template<typename K>"},
{"lineNum":"  385","line":"        pair<const_iterator, const_iterator> equal_range(const K& k) const; // C++20"},
{"lineNum":"  386","line":""},
{"lineNum":"  387","line":"    size_type bucket_count() const noexcept;"},
{"lineNum":"  388","line":"    size_type max_bucket_count() const noexcept;"},
{"lineNum":"  389","line":""},
{"lineNum":"  390","line":"    size_type bucket_size(size_type n) const;"},
{"lineNum":"  391","line":"    size_type bucket(const key_type& k) const;"},
{"lineNum":"  392","line":""},
{"lineNum":"  393","line":"    local_iterator       begin(size_type n);"},
{"lineNum":"  394","line":"    local_iterator       end(size_type n);"},
{"lineNum":"  395","line":"    const_local_iterator begin(size_type n) const;"},
{"lineNum":"  396","line":"    const_local_iterator end(size_type n) const;"},
{"lineNum":"  397","line":"    const_local_iterator cbegin(size_type n) const;"},
{"lineNum":"  398","line":"    const_local_iterator cend(size_type n) const;"},
{"lineNum":"  399","line":""},
{"lineNum":"  400","line":"    float load_factor() const noexcept;"},
{"lineNum":"  401","line":"    float max_load_factor() const noexcept;"},
{"lineNum":"  402","line":"    void max_load_factor(float z);"},
{"lineNum":"  403","line":"    void rehash(size_type n);"},
{"lineNum":"  404","line":"    void reserve(size_type n);"},
{"lineNum":"  405","line":"};"},
{"lineNum":"  406","line":""},
{"lineNum":"  407","line":"template <class Key, class T, class Hash, class Pred, class Alloc>"},
{"lineNum":"  408","line":"    void swap(unordered_multimap<Key, T, Hash, Pred, Alloc>& x,"},
{"lineNum":"  409","line":"              unordered_multimap<Key, T, Hash, Pred, Alloc>& y)"},
{"lineNum":"  410","line":"              noexcept(noexcept(x.swap(y)));"},
{"lineNum":"  411","line":""},
{"lineNum":"  412","line":"template <class K, class T, class H, class P, class A, class Predicate>"},
{"lineNum":"  413","line":"    typename unordered_map<K, T, H, P, A>::size_type"},
{"lineNum":"  414","line":"    erase_if(unordered_map<K, T, H, P, A>& c, Predicate pred);       // C++20"},
{"lineNum":"  415","line":""},
{"lineNum":"  416","line":"template <class K, class T, class H, class P, class A, class Predicate>"},
{"lineNum":"  417","line":"    typename unordered_multimap<K, T, H, P, A>::size_type"},
{"lineNum":"  418","line":"    erase_if(unordered_multimap<K, T, H, P, A>& c, Predicate pred);  // C++20"},
{"lineNum":"  419","line":""},
{"lineNum":"  420","line":"template <class Key, class T, class Hash, class Pred, class Alloc>"},
{"lineNum":"  421","line":"    bool"},
{"lineNum":"  422","line":"    operator==(const unordered_multimap<Key, T, Hash, Pred, Alloc>& x,"},
{"lineNum":"  423","line":"               const unordered_multimap<Key, T, Hash, Pred, Alloc>& y);"},
{"lineNum":"  424","line":""},
{"lineNum":"  425","line":"template <class Key, class T, class Hash, class Pred, class Alloc>"},
{"lineNum":"  426","line":"    bool"},
{"lineNum":"  427","line":"    operator!=(const unordered_multimap<Key, T, Hash, Pred, Alloc>& x,"},
{"lineNum":"  428","line":"               const unordered_multimap<Key, T, Hash, Pred, Alloc>& y);"},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":"}  // std"},
{"lineNum":"  431","line":""},
{"lineNum":"  432","line":"*/"},
{"lineNum":"  433","line":""},
{"lineNum":"  434","line":"#include <__config>"},
{"lineNum":"  435","line":"#include <__debug>"},
{"lineNum":"  436","line":"#include <__functional/is_transparent.h>"},
{"lineNum":"  437","line":"#include <__hash_table>"},
{"lineNum":"  438","line":"#include <__node_handle>"},
{"lineNum":"  439","line":"#include <__utility/forward.h>"},
{"lineNum":"  440","line":"#include <compare>"},
{"lineNum":"  441","line":"#include <functional>"},
{"lineNum":"  442","line":"#include <iterator> // __libcpp_erase_if_container"},
{"lineNum":"  443","line":"#include <stdexcept>"},
{"lineNum":"  444","line":"#include <tuple>"},
{"lineNum":"  445","line":"#include <version>"},
{"lineNum":"  446","line":""},
{"lineNum":"  447","line":"#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"},
{"lineNum":"  448","line":"#pragma GCC system_header"},
{"lineNum":"  449","line":"#endif"},
{"lineNum":"  450","line":""},
{"lineNum":"  451","line":"_LIBCPP_BEGIN_NAMESPACE_STD"},
{"lineNum":"  452","line":""},
{"lineNum":"  453","line":"template <class _Key, class _Cp, class _Hash, class _Pred,"},
{"lineNum":"  454","line":"          bool = is_empty<_Hash>::value && !__libcpp_is_final<_Hash>::value>"},
{"lineNum":"  455","line":"class __unordered_map_hasher"},
{"lineNum":"  456","line":"    : private _Hash"},
{"lineNum":"  457","line":"{"},
{"lineNum":"  458","line":"public:"},
{"lineNum":"  459","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  460","line":"    __unordered_map_hasher()"},
{"lineNum":"  461","line":"        _NOEXCEPT_(is_nothrow_default_constructible<_Hash>::value)"},
{"lineNum":"  462","line":"        : _Hash() {}"},
{"lineNum":"  463","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  464","line":"    __unordered_map_hasher(const _Hash& __h)"},
{"lineNum":"  465","line":"        _NOEXCEPT_(is_nothrow_copy_constructible<_Hash>::value)"},
{"lineNum":"  466","line":"        : _Hash(__h) {}"},
{"lineNum":"  467","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  468","line":"    const _Hash& hash_function() const _NOEXCEPT {return *this;}"},
{"lineNum":"  469","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  470","line":"    size_t operator()(const _Cp& __x) const"},
{"lineNum":"  471","line":"        {return static_cast<const _Hash&>(*this)(__x.__get_value().first);}","class":"linePartCov","hits":"2","order":"609","possible_hits":"5",},
{"lineNum":"  472","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  473","line":"    size_t operator()(const _Key& __x) const"},
{"lineNum":"  474","line":"        {return static_cast<const _Hash&>(*this)(__x);}","class":"linePartCov","hits":"8","order":"115","possible_hits":"38",},
{"lineNum":"  475","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":"  476","line":"    template <typename _K2, typename = _EnableIf<__is_transparent<_Hash, _K2>::value && __is_transparent<_Pred, _K2>::value>>"},
{"lineNum":"  477","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  478","line":"    size_t operator()(const _K2& __x) const"},
{"lineNum":"  479","line":"        {return static_cast<const _Hash&>(*this)(__x);}"},
{"lineNum":"  480","line":"#endif"},
{"lineNum":"  481","line":"    void swap(__unordered_map_hasher&__y)"},
{"lineNum":"  482","line":"        _NOEXCEPT_(__is_nothrow_swappable<_Hash>::value)"},
{"lineNum":"  483","line":"    {"},
{"lineNum":"  484","line":"        using _VSTD::swap;"},
{"lineNum":"  485","line":"        swap(static_cast<_Hash&>(*this), static_cast<_Hash&>(__y));"},
{"lineNum":"  486","line":"    }"},
{"lineNum":"  487","line":"};"},
{"lineNum":"  488","line":""},
{"lineNum":"  489","line":"template <class _Key, class _Cp, class _Hash, class _Pred>"},
{"lineNum":"  490","line":"class __unordered_map_hasher<_Key, _Cp, _Hash, _Pred, false>"},
{"lineNum":"  491","line":"{"},
{"lineNum":"  492","line":"    _Hash __hash_;"},
{"lineNum":"  493","line":"public:"},
{"lineNum":"  494","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  495","line":"    __unordered_map_hasher()"},
{"lineNum":"  496","line":"        _NOEXCEPT_(is_nothrow_default_constructible<_Hash>::value)"},
{"lineNum":"  497","line":"        : __hash_() {}"},
{"lineNum":"  498","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  499","line":"    __unordered_map_hasher(const _Hash& __h)"},
{"lineNum":"  500","line":"        _NOEXCEPT_(is_nothrow_copy_constructible<_Hash>::value)"},
{"lineNum":"  501","line":"        : __hash_(__h) {}"},
{"lineNum":"  502","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  503","line":"    const _Hash& hash_function() const _NOEXCEPT {return __hash_;}"},
{"lineNum":"  504","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  505","line":"    size_t operator()(const _Cp& __x) const"},
{"lineNum":"  506","line":"        {return __hash_(__x.__get_value().first);}"},
{"lineNum":"  507","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  508","line":"    size_t operator()(const _Key& __x) const"},
{"lineNum":"  509","line":"        {return __hash_(__x);}"},
{"lineNum":"  510","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":"  511","line":"    template <typename _K2, typename = _EnableIf<__is_transparent<_Hash, _K2>::value && __is_transparent<_Pred, _K2>::value>>"},
{"lineNum":"  512","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  513","line":"    size_t operator()(const _K2& __x) const"},
{"lineNum":"  514","line":"        {return __hash_(__x);}"},
{"lineNum":"  515","line":"#endif"},
{"lineNum":"  516","line":"    void swap(__unordered_map_hasher&__y)"},
{"lineNum":"  517","line":"        _NOEXCEPT_(__is_nothrow_swappable<_Hash>::value)"},
{"lineNum":"  518","line":"    {"},
{"lineNum":"  519","line":"        using _VSTD::swap;"},
{"lineNum":"  520","line":"        swap(__hash_, __y.__hash_);"},
{"lineNum":"  521","line":"    }"},
{"lineNum":"  522","line":"};"},
{"lineNum":"  523","line":""},
{"lineNum":"  524","line":"template <class _Key, class _Cp, class _Hash, class _Pred, bool __b>"},
{"lineNum":"  525","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  526","line":"void"},
{"lineNum":"  527","line":"swap(__unordered_map_hasher<_Key, _Cp, _Hash, _Pred, __b>& __x,"},
{"lineNum":"  528","line":"     __unordered_map_hasher<_Key, _Cp, _Hash, _Pred, __b>& __y)"},
{"lineNum":"  529","line":"    _NOEXCEPT_(_NOEXCEPT_(__x.swap(__y)))"},
{"lineNum":"  530","line":"{"},
{"lineNum":"  531","line":"    __x.swap(__y);"},
{"lineNum":"  532","line":"}"},
{"lineNum":"  533","line":""},
{"lineNum":"  534","line":"template <class _Key, class _Cp, class _Pred, class _Hash,"},
{"lineNum":"  535","line":"          bool = is_empty<_Pred>::value && !__libcpp_is_final<_Pred>::value>"},
{"lineNum":"  536","line":"class __unordered_map_equal"},
{"lineNum":"  537","line":"    : private _Pred"},
{"lineNum":"  538","line":"{"},
{"lineNum":"  539","line":"public:"},
{"lineNum":"  540","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  541","line":"    __unordered_map_equal()"},
{"lineNum":"  542","line":"        _NOEXCEPT_(is_nothrow_default_constructible<_Pred>::value)"},
{"lineNum":"  543","line":"        : _Pred() {}"},
{"lineNum":"  544","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  545","line":"    __unordered_map_equal(const _Pred& __p)"},
{"lineNum":"  546","line":"        _NOEXCEPT_(is_nothrow_copy_constructible<_Pred>::value)"},
{"lineNum":"  547","line":"        : _Pred(__p) {}"},
{"lineNum":"  548","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  549","line":"    const _Pred& key_eq() const _NOEXCEPT {return *this;}"},
{"lineNum":"  550","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  551","line":"    bool operator()(const _Cp& __x, const _Cp& __y) const"},
{"lineNum":"  552","line":"        {return static_cast<const _Pred&>(*this)(__x.__get_value().first, __y.__get_value().first);}"},
{"lineNum":"  553","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  554","line":"    bool operator()(const _Cp& __x, const _Key& __y) const"},
{"lineNum":"  555","line":"        {return static_cast<const _Pred&>(*this)(__x.__get_value().first, __y);}"},
{"lineNum":"  556","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  557","line":"    bool operator()(const _Key& __x, const _Cp& __y) const"},
{"lineNum":"  558","line":"        {return static_cast<const _Pred&>(*this)(__x, __y.__get_value().first);}"},
{"lineNum":"  559","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":"  560","line":"    template <typename _K2, typename = _EnableIf<__is_transparent<_Hash, _K2>::value && __is_transparent<_Pred, _K2>::value>>"},
{"lineNum":"  561","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  562","line":"    bool operator()(const _Cp& __x, const _K2& __y) const"},
{"lineNum":"  563","line":"        {return static_cast<const _Pred&>(*this)(__x.__get_value().first, __y);}"},
{"lineNum":"  564","line":"    template <typename _K2, typename = _EnableIf<__is_transparent<_Hash, _K2>::value && __is_transparent<_Pred, _K2>::value>>"},
{"lineNum":"  565","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  566","line":"    bool operator()(const _K2& __x, const _Cp& __y) const"},
{"lineNum":"  567","line":"        {return static_cast<const _Pred&>(*this)(__x, __y.__get_value().first);}"},
{"lineNum":"  568","line":"    template <typename _K2, typename = _EnableIf<__is_transparent<_Hash, _K2>::value && __is_transparent<_Pred, _K2>::value>>"},
{"lineNum":"  569","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  570","line":"    bool operator()(const _Key& __x, const _K2& __y) const"},
{"lineNum":"  571","line":"        {return static_cast<const _Pred&>(*this)(__x, __y);}"},
{"lineNum":"  572","line":"    template <typename _K2, typename = _EnableIf<__is_transparent<_Hash, _K2>::value && __is_transparent<_Pred, _K2>::value>>"},
{"lineNum":"  573","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  574","line":"    bool operator()(const _K2& __x, const _Key& __y) const"},
{"lineNum":"  575","line":"        {return static_cast<const _Pred&>(*this)(__x, __y);}"},
{"lineNum":"  576","line":"#endif"},
{"lineNum":"  577","line":"    void swap(__unordered_map_equal&__y)"},
{"lineNum":"  578","line":"        _NOEXCEPT_(__is_nothrow_swappable<_Pred>::value)"},
{"lineNum":"  579","line":"    {"},
{"lineNum":"  580","line":"        using _VSTD::swap;"},
{"lineNum":"  581","line":"        swap(static_cast<_Pred&>(*this), static_cast<_Pred&>(__y));"},
{"lineNum":"  582","line":"    }"},
{"lineNum":"  583","line":"};"},
{"lineNum":"  584","line":""},
{"lineNum":"  585","line":"template <class _Key, class _Cp, class _Pred, class _Hash>"},
{"lineNum":"  586","line":"class __unordered_map_equal<_Key, _Cp, _Pred, _Hash, false>"},
{"lineNum":"  587","line":"{"},
{"lineNum":"  588","line":"    _Pred __pred_;"},
{"lineNum":"  589","line":"public:"},
{"lineNum":"  590","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  591","line":"    __unordered_map_equal()"},
{"lineNum":"  592","line":"        _NOEXCEPT_(is_nothrow_default_constructible<_Pred>::value)"},
{"lineNum":"  593","line":"        : __pred_() {}"},
{"lineNum":"  594","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  595","line":"    __unordered_map_equal(const _Pred& __p)"},
{"lineNum":"  596","line":"        _NOEXCEPT_(is_nothrow_copy_constructible<_Pred>::value)"},
{"lineNum":"  597","line":"        : __pred_(__p) {}"},
{"lineNum":"  598","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  599","line":"    const _Pred& key_eq() const _NOEXCEPT {return __pred_;}"},
{"lineNum":"  600","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  601","line":"    bool operator()(const _Cp& __x, const _Cp& __y) const"},
{"lineNum":"  602","line":"        {return __pred_(__x.__get_value().first, __y.__get_value().first);}"},
{"lineNum":"  603","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  604","line":"    bool operator()(const _Cp& __x, const _Key& __y) const"},
{"lineNum":"  605","line":"        {return __pred_(__x.__get_value().first, __y);}"},
{"lineNum":"  606","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  607","line":"    bool operator()(const _Key& __x, const _Cp& __y) const"},
{"lineNum":"  608","line":"        {return __pred_(__x, __y.__get_value().first);}"},
{"lineNum":"  609","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":"  610","line":"    template <typename _K2, typename = _EnableIf<__is_transparent<_Hash, _K2>::value && __is_transparent<_Pred, _K2>::value>>"},
{"lineNum":"  611","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  612","line":"    bool operator()(const _Cp& __x, const _K2& __y) const"},
{"lineNum":"  613","line":"        {return __pred_(__x.__get_value().first, __y);}"},
{"lineNum":"  614","line":"    template <typename _K2, typename = _EnableIf<__is_transparent<_Hash, _K2>::value && __is_transparent<_Pred, _K2>::value>>"},
{"lineNum":"  615","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  616","line":"    bool operator()(const _K2& __x, const _Cp& __y) const"},
{"lineNum":"  617","line":"        {return __pred_(__x, __y.__get_value().first);}"},
{"lineNum":"  618","line":"    template <typename _K2, typename = _EnableIf<__is_transparent<_Hash, _K2>::value && __is_transparent<_Pred, _K2>::value>>"},
{"lineNum":"  619","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  620","line":"    bool operator()(const _Key& __x, const _K2& __y) const"},
{"lineNum":"  621","line":"        {return __pred_(__x, __y);}"},
{"lineNum":"  622","line":"    template <typename _K2, typename = _EnableIf<__is_transparent<_Hash, _K2>::value && __is_transparent<_Pred, _K2>::value>>"},
{"lineNum":"  623","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  624","line":"    bool operator()(const _K2& __x, const _Key& __y) const"},
{"lineNum":"  625","line":"        {return __pred_(__x, __y);}"},
{"lineNum":"  626","line":"#endif"},
{"lineNum":"  627","line":"    void swap(__unordered_map_equal&__y)"},
{"lineNum":"  628","line":"        _NOEXCEPT_(__is_nothrow_swappable<_Pred>::value)"},
{"lineNum":"  629","line":"    {"},
{"lineNum":"  630","line":"        using _VSTD::swap;"},
{"lineNum":"  631","line":"        swap(__pred_, __y.__pred_);"},
{"lineNum":"  632","line":"    }"},
{"lineNum":"  633","line":"};"},
{"lineNum":"  634","line":""},
{"lineNum":"  635","line":"template <class _Key, class _Cp, class _Pred, class _Hash, bool __b>"},
{"lineNum":"  636","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  637","line":"void"},
{"lineNum":"  638","line":"swap(__unordered_map_equal<_Key, _Cp, _Pred, _Hash, __b>& __x,"},
{"lineNum":"  639","line":"     __unordered_map_equal<_Key, _Cp, _Pred, _Hash, __b>& __y)"},
{"lineNum":"  640","line":"    _NOEXCEPT_(_NOEXCEPT_(__x.swap(__y)))"},
{"lineNum":"  641","line":"{"},
{"lineNum":"  642","line":"    __x.swap(__y);"},
{"lineNum":"  643","line":"}"},
{"lineNum":"  644","line":""},
{"lineNum":"  645","line":"template <class _Alloc>"},
{"lineNum":"  646","line":"class __hash_map_node_destructor"},
{"lineNum":"  647","line":"{"},
{"lineNum":"  648","line":"    typedef _Alloc                              allocator_type;"},
{"lineNum":"  649","line":"    typedef allocator_traits<allocator_type>    __alloc_traits;"},
{"lineNum":"  650","line":""},
{"lineNum":"  651","line":"public:"},
{"lineNum":"  652","line":""},
{"lineNum":"  653","line":"    typedef typename __alloc_traits::pointer       pointer;"},
{"lineNum":"  654","line":"private:"},
{"lineNum":"  655","line":""},
{"lineNum":"  656","line":"    allocator_type& __na_;"},
{"lineNum":"  657","line":""},
{"lineNum":"  658","line":"    __hash_map_node_destructor& operator=(const __hash_map_node_destructor&);"},
{"lineNum":"  659","line":""},
{"lineNum":"  660","line":"public:"},
{"lineNum":"  661","line":"    bool __first_constructed;"},
{"lineNum":"  662","line":"    bool __second_constructed;"},
{"lineNum":"  663","line":""},
{"lineNum":"  664","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  665","line":"    explicit __hash_map_node_destructor(allocator_type& __na) _NOEXCEPT"},
{"lineNum":"  666","line":"        : __na_(__na),"},
{"lineNum":"  667","line":"          __first_constructed(false),"},
{"lineNum":"  668","line":"          __second_constructed(false)"},
{"lineNum":"  669","line":"        {}"},
{"lineNum":"  670","line":""},
{"lineNum":"  671","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  672","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  673","line":"    __hash_map_node_destructor(__hash_node_destructor<allocator_type>&& __x)"},
{"lineNum":"  674","line":"        _NOEXCEPT"},
{"lineNum":"  675","line":"        : __na_(__x.__na_),"},
{"lineNum":"  676","line":"          __first_constructed(__x.__value_constructed),"},
{"lineNum":"  677","line":"          __second_constructed(__x.__value_constructed)"},
{"lineNum":"  678","line":"        {"},
{"lineNum":"  679","line":"            __x.__value_constructed = false;"},
{"lineNum":"  680","line":"        }"},
{"lineNum":"  681","line":"#else  // _LIBCPP_CXX03_LANG"},
{"lineNum":"  682","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  683","line":"    __hash_map_node_destructor(const __hash_node_destructor<allocator_type>& __x)"},
{"lineNum":"  684","line":"        : __na_(__x.__na_),"},
{"lineNum":"  685","line":"          __first_constructed(__x.__value_constructed),"},
{"lineNum":"  686","line":"          __second_constructed(__x.__value_constructed)"},
{"lineNum":"  687","line":"        {"},
{"lineNum":"  688","line":"            const_cast<bool&>(__x.__value_constructed) = false;"},
{"lineNum":"  689","line":"        }"},
{"lineNum":"  690","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":"  691","line":""},
{"lineNum":"  692","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  693","line":"    void operator()(pointer __p) _NOEXCEPT"},
{"lineNum":"  694","line":"    {"},
{"lineNum":"  695","line":"        if (__second_constructed)"},
{"lineNum":"  696","line":"            __alloc_traits::destroy(__na_, _VSTD::addressof(__p->__value_.__get_value().second));"},
{"lineNum":"  697","line":"        if (__first_constructed)"},
{"lineNum":"  698","line":"            __alloc_traits::destroy(__na_, _VSTD::addressof(__p->__value_.__get_value().first));"},
{"lineNum":"  699","line":"        if (__p)"},
{"lineNum":"  700","line":"            __alloc_traits::deallocate(__na_, __p, 1);"},
{"lineNum":"  701","line":"    }"},
{"lineNum":"  702","line":"};"},
{"lineNum":"  703","line":""},
{"lineNum":"  704","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  705","line":"template <class _Key, class _Tp>"},
{"lineNum":"  706","line":"struct _LIBCPP_STANDALONE_DEBUG __hash_value_type"},
{"lineNum":"  707","line":"{"},
{"lineNum":"  708","line":"    typedef _Key                                     key_type;"},
{"lineNum":"  709","line":"    typedef _Tp                                      mapped_type;"},
{"lineNum":"  710","line":"    typedef pair<const key_type, mapped_type>        value_type;"},
{"lineNum":"  711","line":"    typedef pair<key_type&, mapped_type&>            __nc_ref_pair_type;"},
{"lineNum":"  712","line":"    typedef pair<key_type&&, mapped_type&&>          __nc_rref_pair_type;"},
{"lineNum":"  713","line":""},
{"lineNum":"  714","line":"private:"},
{"lineNum":"  715","line":"    value_type __cc;"},
{"lineNum":"  716","line":""},
{"lineNum":"  717","line":"public:"},
{"lineNum":"  718","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  719","line":"    value_type& __get_value()"},
{"lineNum":"  720","line":"    {"},
{"lineNum":"  721","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":"  722","line":"        return *_VSTD::launder(_VSTD::addressof(__cc));","class":"linePartCov","hits":"2","order":"643","possible_hits":"13",},
{"lineNum":"  723","line":"#else"},
{"lineNum":"  724","line":"        return __cc;"},
{"lineNum":"  725","line":"#endif"},
{"lineNum":"  726","line":"    }"},
{"lineNum":"  727","line":""},
{"lineNum":"  728","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  729","line":"    const value_type& __get_value() const"},
{"lineNum":"  730","line":"    {"},
{"lineNum":"  731","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":"  732","line":"        return *_VSTD::launder(_VSTD::addressof(__cc));"},
{"lineNum":"  733","line":"#else"},
{"lineNum":"  734","line":"        return __cc;"},
{"lineNum":"  735","line":"#endif"},
{"lineNum":"  736","line":"    }"},
{"lineNum":"  737","line":""},
{"lineNum":"  738","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  739","line":"    __nc_ref_pair_type __ref()"},
{"lineNum":"  740","line":"    {"},
{"lineNum":"  741","line":"        value_type& __v = __get_value();"},
{"lineNum":"  742","line":"        return __nc_ref_pair_type(const_cast<key_type&>(__v.first), __v.second);"},
{"lineNum":"  743","line":"    }"},
{"lineNum":"  744","line":""},
{"lineNum":"  745","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  746","line":"    __nc_rref_pair_type __move()"},
{"lineNum":"  747","line":"    {"},
{"lineNum":"  748","line":"        value_type& __v = __get_value();"},
{"lineNum":"  749","line":"        return __nc_rref_pair_type("},
{"lineNum":"  750","line":"            _VSTD::move(const_cast<key_type&>(__v.first)),"},
{"lineNum":"  751","line":"            _VSTD::move(__v.second));"},
{"lineNum":"  752","line":"    }"},
{"lineNum":"  753","line":""},
{"lineNum":"  754","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  755","line":"    __hash_value_type& operator=(const __hash_value_type& __v)"},
{"lineNum":"  756","line":"    {"},
{"lineNum":"  757","line":"        __ref() = __v.__get_value();"},
{"lineNum":"  758","line":"        return *this;"},
{"lineNum":"  759","line":"    }"},
{"lineNum":"  760","line":""},
{"lineNum":"  761","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  762","line":"    __hash_value_type& operator=(__hash_value_type&& __v)"},
{"lineNum":"  763","line":"    {"},
{"lineNum":"  764","line":"        __ref() = __v.__move();"},
{"lineNum":"  765","line":"        return *this;"},
{"lineNum":"  766","line":"    }"},
{"lineNum":"  767","line":""},
{"lineNum":"  768","line":"    template <class _ValueTp,"},
{"lineNum":"  769","line":"              class = typename enable_if<"},
{"lineNum":"  770","line":"                    __is_same_uncvref<_ValueTp, value_type>::value"},
{"lineNum":"  771","line":"                 >::type"},
{"lineNum":"  772","line":"             >"},
{"lineNum":"  773","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  774","line":"    __hash_value_type& operator=(_ValueTp&& __v)"},
{"lineNum":"  775","line":"    {"},
{"lineNum":"  776","line":"        __ref() = _VSTD::forward<_ValueTp>(__v);"},
{"lineNum":"  777","line":"        return *this;"},
{"lineNum":"  778","line":"    }"},
{"lineNum":"  779","line":""},
{"lineNum":"  780","line":"private:"},
{"lineNum":"  781","line":"    __hash_value_type(const __hash_value_type& __v) = delete;"},
{"lineNum":"  782","line":"    __hash_value_type(__hash_value_type&& __v) = delete;"},
{"lineNum":"  783","line":"    template <class ..._Args>"},
{"lineNum":"  784","line":"    explicit __hash_value_type(_Args&& ...__args) = delete;"},
{"lineNum":"  785","line":""},
{"lineNum":"  786","line":"    ~__hash_value_type() = delete;"},
{"lineNum":"  787","line":"};"},
{"lineNum":"  788","line":""},
{"lineNum":"  789","line":"#else"},
{"lineNum":"  790","line":""},
{"lineNum":"  791","line":"template <class _Key, class _Tp>"},
{"lineNum":"  792","line":"struct __hash_value_type"},
{"lineNum":"  793","line":"{"},
{"lineNum":"  794","line":"    typedef _Key                                     key_type;"},
{"lineNum":"  795","line":"    typedef _Tp                                      mapped_type;"},
{"lineNum":"  796","line":"    typedef pair<const key_type, mapped_type>        value_type;"},
{"lineNum":"  797","line":""},
{"lineNum":"  798","line":"private:"},
{"lineNum":"  799","line":"    value_type __cc;"},
{"lineNum":"  800","line":""},
{"lineNum":"  801","line":"public:"},
{"lineNum":"  802","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  803","line":"    value_type& __get_value() { return __cc; }"},
{"lineNum":"  804","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  805","line":"    const value_type& __get_value() const { return __cc; }"},
{"lineNum":"  806","line":""},
{"lineNum":"  807","line":"private:"},
{"lineNum":"  808","line":"   ~__hash_value_type();"},
{"lineNum":"  809","line":"};"},
{"lineNum":"  810","line":""},
{"lineNum":"  811","line":"#endif"},
{"lineNum":"  812","line":""},
{"lineNum":"  813","line":"template <class _HashIterator>"},
{"lineNum":"  814","line":"class _LIBCPP_TEMPLATE_VIS __hash_map_iterator"},
{"lineNum":"  815","line":"{"},
{"lineNum":"  816","line":"    _HashIterator __i_;"},
{"lineNum":"  817","line":""},
{"lineNum":"  818","line":"    typedef  __hash_node_types_from_iterator<_HashIterator> _NodeTypes;"},
{"lineNum":"  819","line":""},
{"lineNum":"  820","line":"public:"},
{"lineNum":"  821","line":"    typedef forward_iterator_tag                                 iterator_category;"},
{"lineNum":"  822","line":"    typedef typename _NodeTypes::__map_value_type                value_type;"},
{"lineNum":"  823","line":"    typedef typename _NodeTypes::difference_type                 difference_type;"},
{"lineNum":"  824","line":"    typedef value_type&                                          reference;"},
{"lineNum":"  825","line":"    typedef typename _NodeTypes::__map_value_type_pointer       pointer;"},
{"lineNum":"  826","line":""},
{"lineNum":"  827","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  828","line":"    __hash_map_iterator() _NOEXCEPT {}"},
{"lineNum":"  829","line":""},
{"lineNum":"  830","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  831","line":"    __hash_map_iterator(_HashIterator __i) _NOEXCEPT : __i_(__i) {}"},
{"lineNum":"  832","line":""},
{"lineNum":"  833","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  834","line":"    reference operator*() const {return __i_->__get_value();}"},
{"lineNum":"  835","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  836","line":"    pointer operator->() const {return pointer_traits<pointer>::pointer_to(__i_->__get_value());}"},
{"lineNum":"  837","line":""},
{"lineNum":"  838","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  839","line":"    __hash_map_iterator& operator++() {++__i_; return *this;}"},
{"lineNum":"  840","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  841","line":"    __hash_map_iterator operator++(int)"},
{"lineNum":"  842","line":"    {"},
{"lineNum":"  843","line":"        __hash_map_iterator __t(*this);"},
{"lineNum":"  844","line":"        ++(*this);"},
{"lineNum":"  845","line":"        return __t;"},
{"lineNum":"  846","line":"    }"},
{"lineNum":"  847","line":""},
{"lineNum":"  848","line":"    friend _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  849","line":"        bool operator==(const __hash_map_iterator& __x, const __hash_map_iterator& __y)"},
{"lineNum":"  850","line":"        {return __x.__i_ == __y.__i_;}"},
{"lineNum":"  851","line":"    friend _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  852","line":"        bool operator!=(const __hash_map_iterator& __x, const __hash_map_iterator& __y)"},
{"lineNum":"  853","line":"        {return __x.__i_ != __y.__i_;}"},
{"lineNum":"  854","line":""},
{"lineNum":"  855","line":"    template <class, class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS unordered_map;"},
{"lineNum":"  856","line":"    template <class, class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS unordered_multimap;"},
{"lineNum":"  857","line":"    template <class> friend class _LIBCPP_TEMPLATE_VIS __hash_const_iterator;"},
{"lineNum":"  858","line":"    template <class> friend class _LIBCPP_TEMPLATE_VIS __hash_const_local_iterator;"},
{"lineNum":"  859","line":"    template <class> friend class _LIBCPP_TEMPLATE_VIS __hash_map_const_iterator;"},
{"lineNum":"  860","line":"};"},
{"lineNum":"  861","line":""},
{"lineNum":"  862","line":"template <class _HashIterator>"},
{"lineNum":"  863","line":"class _LIBCPP_TEMPLATE_VIS __hash_map_const_iterator"},
{"lineNum":"  864","line":"{"},
{"lineNum":"  865","line":"    _HashIterator __i_;"},
{"lineNum":"  866","line":""},
{"lineNum":"  867","line":"    typedef  __hash_node_types_from_iterator<_HashIterator> _NodeTypes;"},
{"lineNum":"  868","line":""},
{"lineNum":"  869","line":"public:"},
{"lineNum":"  870","line":"    typedef forward_iterator_tag                                 iterator_category;"},
{"lineNum":"  871","line":"    typedef typename _NodeTypes::__map_value_type                value_type;"},
{"lineNum":"  872","line":"    typedef typename _NodeTypes::difference_type                 difference_type;"},
{"lineNum":"  873","line":"    typedef const value_type&                                    reference;"},
{"lineNum":"  874","line":"    typedef typename _NodeTypes::__const_map_value_type_pointer  pointer;"},
{"lineNum":"  875","line":""},
{"lineNum":"  876","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  877","line":"    __hash_map_const_iterator() _NOEXCEPT {}"},
{"lineNum":"  878","line":""},
{"lineNum":"  879","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  880","line":"    __hash_map_const_iterator(_HashIterator __i) _NOEXCEPT : __i_(__i) {}"},
{"lineNum":"  881","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  882","line":"    __hash_map_const_iterator("},
{"lineNum":"  883","line":"            __hash_map_iterator<typename _HashIterator::__non_const_iterator> __i)"},
{"lineNum":"  884","line":"                 _NOEXCEPT"},
{"lineNum":"  885","line":"                : __i_(__i.__i_) {}"},
{"lineNum":"  886","line":""},
{"lineNum":"  887","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  888","line":"    reference operator*() const {return __i_->__get_value();}"},
{"lineNum":"  889","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  890","line":"    pointer operator->() const {return pointer_traits<pointer>::pointer_to(__i_->__get_value());}"},
{"lineNum":"  891","line":""},
{"lineNum":"  892","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  893","line":"    __hash_map_const_iterator& operator++() {++__i_; return *this;}"},
{"lineNum":"  894","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  895","line":"    __hash_map_const_iterator operator++(int)"},
{"lineNum":"  896","line":"    {"},
{"lineNum":"  897","line":"        __hash_map_const_iterator __t(*this);"},
{"lineNum":"  898","line":"        ++(*this);"},
{"lineNum":"  899","line":"        return __t;"},
{"lineNum":"  900","line":"    }"},
{"lineNum":"  901","line":""},
{"lineNum":"  902","line":"    friend _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  903","line":"        bool operator==(const __hash_map_const_iterator& __x, const __hash_map_const_iterator& __y)"},
{"lineNum":"  904","line":"        {return __x.__i_ == __y.__i_;}"},
{"lineNum":"  905","line":"    friend _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  906","line":"        bool operator!=(const __hash_map_const_iterator& __x, const __hash_map_const_iterator& __y)"},
{"lineNum":"  907","line":"        {return __x.__i_ != __y.__i_;}"},
{"lineNum":"  908","line":""},
{"lineNum":"  909","line":"    template <class, class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS unordered_map;"},
{"lineNum":"  910","line":"    template <class, class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS unordered_multimap;"},
{"lineNum":"  911","line":"    template <class> friend class _LIBCPP_TEMPLATE_VIS __hash_const_iterator;"},
{"lineNum":"  912","line":"    template <class> friend class _LIBCPP_TEMPLATE_VIS __hash_const_local_iterator;"},
{"lineNum":"  913","line":"};"},
{"lineNum":"  914","line":""},
{"lineNum":"  915","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":"  916","line":"class unordered_multimap;"},
{"lineNum":"  917","line":""},
{"lineNum":"  918","line":"template <class _Key, class _Tp, class _Hash = hash<_Key>, class _Pred = equal_to<_Key>,"},
{"lineNum":"  919","line":"          class _Alloc = allocator<pair<const _Key, _Tp> > >"},
{"lineNum":"  920","line":"class _LIBCPP_TEMPLATE_VIS unordered_map"},
{"lineNum":"  921","line":"{"},
{"lineNum":"  922","line":"public:"},
{"lineNum":"  923","line":"    // types"},
{"lineNum":"  924","line":"    typedef _Key                                           key_type;"},
{"lineNum":"  925","line":"    typedef _Tp                                            mapped_type;"},
{"lineNum":"  926","line":"    typedef __identity_t<_Hash>                            hasher;"},
{"lineNum":"  927","line":"    typedef __identity_t<_Pred>                            key_equal;"},
{"lineNum":"  928","line":"    typedef __identity_t<_Alloc>                           allocator_type;"},
{"lineNum":"  929","line":"    typedef pair<const key_type, mapped_type>              value_type;"},
{"lineNum":"  930","line":"    typedef value_type&                                    reference;"},
{"lineNum":"  931","line":"    typedef const value_type&                              const_reference;"},
{"lineNum":"  932","line":"    static_assert((is_same<value_type, typename allocator_type::value_type>::value),"},
{"lineNum":"  933","line":"                  \"Invalid allocator::value_type\");"},
{"lineNum":"  934","line":""},
{"lineNum":"  935","line":"private:"},
{"lineNum":"  936","line":"    typedef __hash_value_type<key_type, mapped_type>                          __value_type;"},
{"lineNum":"  937","line":"    typedef __unordered_map_hasher<key_type, __value_type, hasher, key_equal> __hasher;"},
{"lineNum":"  938","line":"    typedef __unordered_map_equal<key_type, __value_type, key_equal, hasher>  __key_equal;"},
{"lineNum":"  939","line":"    typedef typename __rebind_alloc_helper<allocator_traits<allocator_type>,"},
{"lineNum":"  940","line":"                                                 __value_type>::type          __allocator_type;"},
{"lineNum":"  941","line":""},
{"lineNum":"  942","line":"    typedef __hash_table<__value_type, __hasher,"},
{"lineNum":"  943","line":"                         __key_equal,  __allocator_type>   __table;"},
{"lineNum":"  944","line":""},
{"lineNum":"  945","line":"    __table __table_;"},
{"lineNum":"  946","line":""},
{"lineNum":"  947","line":"    typedef typename __table::_NodeTypes                   _NodeTypes;"},
{"lineNum":"  948","line":"    typedef typename __table::__node_pointer               __node_pointer;"},
{"lineNum":"  949","line":"    typedef typename __table::__node_const_pointer         __node_const_pointer;"},
{"lineNum":"  950","line":"    typedef typename __table::__node_traits                __node_traits;"},
{"lineNum":"  951","line":"    typedef typename __table::__node_allocator             __node_allocator;"},
{"lineNum":"  952","line":"    typedef typename __table::__node                       __node;"},
{"lineNum":"  953","line":"    typedef __hash_map_node_destructor<__node_allocator>   _Dp;"},
{"lineNum":"  954","line":"    typedef unique_ptr<__node, _Dp>                         __node_holder;"},
{"lineNum":"  955","line":"    typedef allocator_traits<allocator_type>               __alloc_traits;"},
{"lineNum":"  956","line":""},
{"lineNum":"  957","line":"    static_assert((is_same<typename __table::__container_value_type, value_type>::value), \"\");"},
{"lineNum":"  958","line":"    static_assert((is_same<typename __table::__node_value_type, __value_type>::value), \"\");"},
{"lineNum":"  959","line":"public:"},
{"lineNum":"  960","line":"    typedef typename __alloc_traits::pointer         pointer;"},
{"lineNum":"  961","line":"    typedef typename __alloc_traits::const_pointer   const_pointer;"},
{"lineNum":"  962","line":"    typedef typename __table::size_type              size_type;"},
{"lineNum":"  963","line":"    typedef typename __table::difference_type        difference_type;"},
{"lineNum":"  964","line":""},
{"lineNum":"  965","line":"    typedef __hash_map_iterator<typename __table::iterator>       iterator;"},
{"lineNum":"  966","line":"    typedef __hash_map_const_iterator<typename __table::const_iterator> const_iterator;"},
{"lineNum":"  967","line":"    typedef __hash_map_iterator<typename __table::local_iterator> local_iterator;"},
{"lineNum":"  968","line":"    typedef __hash_map_const_iterator<typename __table::const_local_iterator> const_local_iterator;"},
{"lineNum":"  969","line":""},
{"lineNum":"  970","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":"  971","line":"    typedef __map_node_handle<__node, allocator_type> node_type;"},
{"lineNum":"  972","line":"    typedef __insert_return_type<iterator, node_type> insert_return_type;"},
{"lineNum":"  973","line":"#endif"},
{"lineNum":"  974","line":""},
{"lineNum":"  975","line":"    template <class _Key2, class _Tp2, class _Hash2, class _Pred2, class _Alloc2>"},
{"lineNum":"  976","line":"        friend class _LIBCPP_TEMPLATE_VIS unordered_map;"},
{"lineNum":"  977","line":"    template <class _Key2, class _Tp2, class _Hash2, class _Pred2, class _Alloc2>"},
{"lineNum":"  978","line":"        friend class _LIBCPP_TEMPLATE_VIS unordered_multimap;"},
{"lineNum":"  979","line":""},
{"lineNum":"  980","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  981","line":"    unordered_map()"},
{"lineNum":"  982","line":"        _NOEXCEPT_(is_nothrow_default_constructible<__table>::value)"},
{"lineNum":"  983","line":"        {","class":"lineCov","hits":"1","order":"98","possible_hits":"1",},
{"lineNum":"  984","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  985","line":"            __get_db()->__insert_c(this);"},
{"lineNum":"  986","line":"#endif"},
{"lineNum":"  987","line":"        }","class":"linePartCov","hits":"1","order":"101","possible_hits":"2",},
{"lineNum":"  988","line":"    explicit unordered_map(size_type __n, const hasher& __hf = hasher(),"},
{"lineNum":"  989","line":"                           const key_equal& __eql = key_equal());"},
{"lineNum":"  990","line":"    unordered_map(size_type __n, const hasher& __hf,"},
{"lineNum":"  991","line":"                  const key_equal& __eql,"},
{"lineNum":"  992","line":"                  const allocator_type& __a);"},
{"lineNum":"  993","line":"    template <class _InputIterator>"},
{"lineNum":"  994","line":"        unordered_map(_InputIterator __first, _InputIterator __last);"},
{"lineNum":"  995","line":"    template <class _InputIterator>"},
{"lineNum":"  996","line":"        unordered_map(_InputIterator __first, _InputIterator __last,"},
{"lineNum":"  997","line":"                      size_type __n, const hasher& __hf = hasher(),"},
{"lineNum":"  998","line":"                      const key_equal& __eql = key_equal());"},
{"lineNum":"  999","line":"    template <class _InputIterator>"},
{"lineNum":" 1000","line":"        unordered_map(_InputIterator __first, _InputIterator __last,"},
{"lineNum":" 1001","line":"                      size_type __n, const hasher& __hf,"},
{"lineNum":" 1002","line":"                      const key_equal& __eql,"},
{"lineNum":" 1003","line":"                      const allocator_type& __a);"},
{"lineNum":" 1004","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1005","line":"    explicit unordered_map(const allocator_type& __a);"},
{"lineNum":" 1006","line":"    unordered_map(const unordered_map& __u);"},
{"lineNum":" 1007","line":"    unordered_map(const unordered_map& __u, const allocator_type& __a);"},
{"lineNum":" 1008","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1009","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1010","line":"    unordered_map(unordered_map&& __u)"},
{"lineNum":" 1011","line":"        _NOEXCEPT_(is_nothrow_move_constructible<__table>::value);"},
{"lineNum":" 1012","line":"    unordered_map(unordered_map&& __u, const allocator_type& __a);"},
{"lineNum":" 1013","line":"    unordered_map(initializer_list<value_type> __il);"},
{"lineNum":" 1014","line":"    unordered_map(initializer_list<value_type> __il, size_type __n,"},
{"lineNum":" 1015","line":"                  const hasher& __hf = hasher(), const key_equal& __eql = key_equal());"},
{"lineNum":" 1016","line":"    unordered_map(initializer_list<value_type> __il, size_type __n,"},
{"lineNum":" 1017","line":"                  const hasher& __hf, const key_equal& __eql,"},
{"lineNum":" 1018","line":"                  const allocator_type& __a);"},
{"lineNum":" 1019","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 1020","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 1021","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1022","line":"    unordered_map(size_type __n, const allocator_type& __a)"},
{"lineNum":" 1023","line":"      : unordered_map(__n, hasher(), key_equal(), __a) {}"},
{"lineNum":" 1024","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1025","line":"    unordered_map(size_type __n, const hasher& __hf, const allocator_type& __a)"},
{"lineNum":" 1026","line":"      : unordered_map(__n, __hf, key_equal(), __a) {}"},
{"lineNum":" 1027","line":"    template <class _InputIterator>"},
{"lineNum":" 1028","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1029","line":"      unordered_map(_InputIterator __first, _InputIterator __last, size_type __n, const allocator_type& __a)"},
{"lineNum":" 1030","line":"      : unordered_map(__first, __last, __n, hasher(), key_equal(), __a) {}"},
{"lineNum":" 1031","line":"    template <class _InputIterator>"},
{"lineNum":" 1032","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1033","line":"      unordered_map(_InputIterator __first, _InputIterator __last, size_type __n, const hasher& __hf,"},
{"lineNum":" 1034","line":"        const allocator_type& __a)"},
{"lineNum":" 1035","line":"      : unordered_map(__first, __last, __n, __hf, key_equal(), __a) {}"},
{"lineNum":" 1036","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1037","line":"    unordered_map(initializer_list<value_type> __il, size_type __n, const allocator_type& __a)"},
{"lineNum":" 1038","line":"      : unordered_map(__il, __n, hasher(), key_equal(), __a) {}"},
{"lineNum":" 1039","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1040","line":"    unordered_map(initializer_list<value_type> __il, size_type __n, const hasher& __hf,"},
{"lineNum":" 1041","line":"      const allocator_type& __a)"},
{"lineNum":" 1042","line":"      : unordered_map(__il, __n, __hf, key_equal(), __a) {}"},
{"lineNum":" 1043","line":"#endif"},
{"lineNum":" 1044","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1045","line":"    ~unordered_map() {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1046","line":"        static_assert(sizeof(__diagnose_unordered_container_requirements<_Key, _Hash, _Pred>(0)), \"\");"},
{"lineNum":" 1047","line":"    }","class":"linePartCov","hits":"11","order":"165","possible_hits":"52",},
{"lineNum":" 1048","line":""},
{"lineNum":" 1049","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1050","line":"    unordered_map& operator=(const unordered_map& __u)"},
{"lineNum":" 1051","line":"    {"},
{"lineNum":" 1052","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1053","line":"        __table_ = __u.__table_;"},
{"lineNum":" 1054","line":"#else"},
{"lineNum":" 1055","line":"        if (this != &__u) {"},
{"lineNum":" 1056","line":"            __table_.clear();"},
{"lineNum":" 1057","line":"            __table_.hash_function() = __u.__table_.hash_function();"},
{"lineNum":" 1058","line":"            __table_.key_eq() = __u.__table_.key_eq();"},
{"lineNum":" 1059","line":"            __table_.max_load_factor() = __u.__table_.max_load_factor();"},
{"lineNum":" 1060","line":"            __table_.__copy_assign_alloc(__u.__table_);"},
{"lineNum":" 1061","line":"            insert(__u.begin(), __u.end());"},
{"lineNum":" 1062","line":"        }"},
{"lineNum":" 1063","line":"#endif"},
{"lineNum":" 1064","line":"        return *this;"},
{"lineNum":" 1065","line":"    }"},
{"lineNum":" 1066","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1067","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1068","line":"    unordered_map& operator=(unordered_map&& __u)"},
{"lineNum":" 1069","line":"        _NOEXCEPT_(is_nothrow_move_assignable<__table>::value);"},
{"lineNum":" 1070","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1071","line":"    unordered_map& operator=(initializer_list<value_type> __il);"},
{"lineNum":" 1072","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 1073","line":""},
{"lineNum":" 1074","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1075","line":"    allocator_type get_allocator() const _NOEXCEPT"},
{"lineNum":" 1076","line":"        {return allocator_type(__table_.__node_alloc());}"},
{"lineNum":" 1077","line":""},
{"lineNum":" 1078","line":"    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1079","line":"    bool      empty() const _NOEXCEPT {return __table_.size() == 0;}"},
{"lineNum":" 1080","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1081","line":"    size_type size() const _NOEXCEPT  {return __table_.size();}"},
{"lineNum":" 1082","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1083","line":"    size_type max_size() const _NOEXCEPT {return __table_.max_size();}"},
{"lineNum":" 1084","line":""},
{"lineNum":" 1085","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1086","line":"    iterator       begin() _NOEXCEPT        {return __table_.begin();}"},
{"lineNum":" 1087","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1088","line":"    iterator       end() _NOEXCEPT          {return __table_.end();}"},
{"lineNum":" 1089","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1090","line":"    const_iterator begin()  const _NOEXCEPT {return __table_.begin();}"},
{"lineNum":" 1091","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1092","line":"    const_iterator end()    const _NOEXCEPT {return __table_.end();}"},
{"lineNum":" 1093","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1094","line":"    const_iterator cbegin() const _NOEXCEPT {return __table_.begin();}"},
{"lineNum":" 1095","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1096","line":"    const_iterator cend()   const _NOEXCEPT {return __table_.end();}"},
{"lineNum":" 1097","line":""},
{"lineNum":" 1098","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1099","line":"    pair<iterator, bool> insert(const value_type& __x)"},
{"lineNum":" 1100","line":"        {return __table_.__insert_unique(__x);}"},
{"lineNum":" 1101","line":""},
{"lineNum":" 1102","line":"    iterator insert(const_iterator __p, const value_type& __x) {"},
{"lineNum":" 1103","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1104","line":"        _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__p) == this,"},
{"lineNum":" 1105","line":"            \"unordered_map::insert(const_iterator, const value_type&) called with an iterator not\""},
{"lineNum":" 1106","line":"            \" referring to this unordered_map\");"},
{"lineNum":" 1107","line":"#else"},
{"lineNum":" 1108","line":"        ((void)__p);"},
{"lineNum":" 1109","line":"#endif"},
{"lineNum":" 1110","line":"        return insert(__x).first;"},
{"lineNum":" 1111","line":"    }"},
{"lineNum":" 1112","line":""},
{"lineNum":" 1113","line":"    template <class _InputIterator>"},
{"lineNum":" 1114","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1115","line":"        void insert(_InputIterator __first, _InputIterator __last);"},
{"lineNum":" 1116","line":""},
{"lineNum":" 1117","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1118","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1119","line":"    void insert(initializer_list<value_type> __il)"},
{"lineNum":" 1120","line":"        {insert(__il.begin(), __il.end());}"},
{"lineNum":" 1121","line":""},
{"lineNum":" 1122","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1123","line":"    pair<iterator, bool> insert(value_type&& __x)"},
{"lineNum":" 1124","line":"        {return __table_.__insert_unique(_VSTD::move(__x));}","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1125","line":""},
{"lineNum":" 1126","line":"    iterator insert(const_iterator __p, value_type&& __x) {"},
{"lineNum":" 1127","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1128","line":"        _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__p) == this,"},
{"lineNum":" 1129","line":"            \"unordered_map::insert(const_iterator, const value_type&) called with an iterator not\""},
{"lineNum":" 1130","line":"            \" referring to this unordered_map\");"},
{"lineNum":" 1131","line":"#else"},
{"lineNum":" 1132","line":"        ((void)__p);"},
{"lineNum":" 1133","line":"#endif"},
{"lineNum":" 1134","line":"        return __table_.__insert_unique(_VSTD::move(__x)).first;"},
{"lineNum":" 1135","line":"    }"},
{"lineNum":" 1136","line":""},
{"lineNum":" 1137","line":"    template <class _Pp,"},
{"lineNum":" 1138","line":"              class = typename enable_if<is_constructible<value_type, _Pp>::value>::type>"},
{"lineNum":" 1139","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1140","line":"        pair<iterator, bool> insert(_Pp&& __x)"},
{"lineNum":" 1141","line":"            {return __table_.__insert_unique(_VSTD::forward<_Pp>(__x));}"},
{"lineNum":" 1142","line":""},
{"lineNum":" 1143","line":"    template <class _Pp,"},
{"lineNum":" 1144","line":"              class = typename enable_if<is_constructible<value_type, _Pp>::value>::type>"},
{"lineNum":" 1145","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1146","line":"        iterator insert(const_iterator __p, _Pp&& __x)"},
{"lineNum":" 1147","line":"        {"},
{"lineNum":" 1148","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1149","line":"            _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__p) == this,"},
{"lineNum":" 1150","line":"                \"unordered_map::insert(const_iterator, value_type&&) called with an iterator not\""},
{"lineNum":" 1151","line":"                \" referring to this unordered_map\");"},
{"lineNum":" 1152","line":"#else"},
{"lineNum":" 1153","line":"          ((void)__p);"},
{"lineNum":" 1154","line":"#endif"},
{"lineNum":" 1155","line":"            return insert(_VSTD::forward<_Pp>(__x)).first;"},
{"lineNum":" 1156","line":"        }"},
{"lineNum":" 1157","line":""},
{"lineNum":" 1158","line":"    template <class... _Args>"},
{"lineNum":" 1159","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1160","line":"    pair<iterator, bool> emplace(_Args&&... __args) {"},
{"lineNum":" 1161","line":"        return __table_.__emplace_unique(_VSTD::forward<_Args>(__args)...);"},
{"lineNum":" 1162","line":"    }"},
{"lineNum":" 1163","line":""},
{"lineNum":" 1164","line":"    template <class... _Args>"},
{"lineNum":" 1165","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1166","line":"    iterator emplace_hint(const_iterator __p, _Args&&... __args) {"},
{"lineNum":" 1167","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1168","line":"        _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__p) == this,"},
{"lineNum":" 1169","line":"            \"unordered_map::emplace_hint(const_iterator, args...) called with an iterator not\""},
{"lineNum":" 1170","line":"            \" referring to this unordered_map\");"},
{"lineNum":" 1171","line":"#else"},
{"lineNum":" 1172","line":"          ((void)__p);"},
{"lineNum":" 1173","line":"#endif"},
{"lineNum":" 1174","line":"        return __table_.__emplace_unique(_VSTD::forward<_Args>(__args)...).first;"},
{"lineNum":" 1175","line":"    }"},
{"lineNum":" 1176","line":""},
{"lineNum":" 1177","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 1178","line":""},
{"lineNum":" 1179","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 1180","line":"    template <class... _Args>"},
{"lineNum":" 1181","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1182","line":"        pair<iterator, bool> try_emplace(const key_type& __k, _Args&&... __args)"},
{"lineNum":" 1183","line":"    {"},
{"lineNum":" 1184","line":"        return __table_.__emplace_unique_key_args(__k, piecewise_construct,"},
{"lineNum":" 1185","line":"            _VSTD::forward_as_tuple(__k),"},
{"lineNum":" 1186","line":"            _VSTD::forward_as_tuple(_VSTD::forward<_Args>(__args)...));"},
{"lineNum":" 1187","line":"    }"},
{"lineNum":" 1188","line":""},
{"lineNum":" 1189","line":"    template <class... _Args>"},
{"lineNum":" 1190","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1191","line":"        pair<iterator, bool> try_emplace(key_type&& __k, _Args&&... __args)"},
{"lineNum":" 1192","line":"    {"},
{"lineNum":" 1193","line":"        return __table_.__emplace_unique_key_args(__k, piecewise_construct,"},
{"lineNum":" 1194","line":"            _VSTD::forward_as_tuple(_VSTD::move(__k)),"},
{"lineNum":" 1195","line":"            _VSTD::forward_as_tuple(_VSTD::forward<_Args>(__args)...));"},
{"lineNum":" 1196","line":"    }"},
{"lineNum":" 1197","line":""},
{"lineNum":" 1198","line":"    template <class... _Args>"},
{"lineNum":" 1199","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1200","line":"        iterator try_emplace(const_iterator __h, const key_type& __k, _Args&&... __args)"},
{"lineNum":" 1201","line":"    {"},
{"lineNum":" 1202","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1203","line":"        _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__h) == this,"},
{"lineNum":" 1204","line":"            \"unordered_map::try_emplace(const_iterator, key, args...) called with an iterator not\""},
{"lineNum":" 1205","line":"            \" referring to this unordered_map\");"},
{"lineNum":" 1206","line":"#else"},
{"lineNum":" 1207","line":"        ((void)__h);"},
{"lineNum":" 1208","line":"#endif"},
{"lineNum":" 1209","line":"        return try_emplace(__k, _VSTD::forward<_Args>(__args)...).first;"},
{"lineNum":" 1210","line":"    }"},
{"lineNum":" 1211","line":""},
{"lineNum":" 1212","line":"    template <class... _Args>"},
{"lineNum":" 1213","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1214","line":"        iterator try_emplace(const_iterator __h, key_type&& __k, _Args&&... __args)"},
{"lineNum":" 1215","line":"    {"},
{"lineNum":" 1216","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1217","line":"        _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__h) == this,"},
{"lineNum":" 1218","line":"            \"unordered_map::try_emplace(const_iterator, key, args...) called with an iterator not\""},
{"lineNum":" 1219","line":"            \" referring to this unordered_map\");"},
{"lineNum":" 1220","line":"#else"},
{"lineNum":" 1221","line":"        ((void)__h);"},
{"lineNum":" 1222","line":"#endif"},
{"lineNum":" 1223","line":"        return try_emplace(_VSTD::move(__k), _VSTD::forward<_Args>(__args)...).first;"},
{"lineNum":" 1224","line":"    }"},
{"lineNum":" 1225","line":""},
{"lineNum":" 1226","line":"    template <class _Vp>"},
{"lineNum":" 1227","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1228","line":"        pair<iterator, bool> insert_or_assign(const key_type& __k, _Vp&& __v)"},
{"lineNum":" 1229","line":"    {"},
{"lineNum":" 1230","line":"        pair<iterator, bool> __res = __table_.__emplace_unique_key_args(__k,"},
{"lineNum":" 1231","line":"            __k, _VSTD::forward<_Vp>(__v));"},
{"lineNum":" 1232","line":"        if (!__res.second) {"},
{"lineNum":" 1233","line":"            __res.first->second = _VSTD::forward<_Vp>(__v);"},
{"lineNum":" 1234","line":"        }"},
{"lineNum":" 1235","line":"        return __res;"},
{"lineNum":" 1236","line":"    }"},
{"lineNum":" 1237","line":""},
{"lineNum":" 1238","line":"    template <class _Vp>"},
{"lineNum":" 1239","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1240","line":"        pair<iterator, bool> insert_or_assign(key_type&& __k, _Vp&& __v)"},
{"lineNum":" 1241","line":"    {"},
{"lineNum":" 1242","line":"        pair<iterator, bool> __res = __table_.__emplace_unique_key_args(__k,"},
{"lineNum":" 1243","line":"            _VSTD::move(__k), _VSTD::forward<_Vp>(__v));"},
{"lineNum":" 1244","line":"        if (!__res.second) {"},
{"lineNum":" 1245","line":"            __res.first->second = _VSTD::forward<_Vp>(__v);"},
{"lineNum":" 1246","line":"        }"},
{"lineNum":" 1247","line":"        return __res;"},
{"lineNum":" 1248","line":"    }"},
{"lineNum":" 1249","line":""},
{"lineNum":" 1250","line":"    template <class _Vp>"},
{"lineNum":" 1251","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1252","line":"        iterator insert_or_assign(const_iterator, const key_type& __k, _Vp&& __v)"},
{"lineNum":" 1253","line":"     {"},
{"lineNum":" 1254","line":"          // FIXME: Add debug mode checking for the iterator input"},
{"lineNum":" 1255","line":"          return insert_or_assign(__k, _VSTD::forward<_Vp>(__v)).first;"},
{"lineNum":" 1256","line":"     }"},
{"lineNum":" 1257","line":""},
{"lineNum":" 1258","line":"    template <class _Vp>"},
{"lineNum":" 1259","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1260","line":"        iterator insert_or_assign(const_iterator, key_type&& __k, _Vp&& __v)"},
{"lineNum":" 1261","line":"     {"},
{"lineNum":" 1262","line":"        // FIXME: Add debug mode checking for the iterator input"},
{"lineNum":" 1263","line":"        return insert_or_assign(_VSTD::move(__k), _VSTD::forward<_Vp>(__v)).first;"},
{"lineNum":" 1264","line":"     }"},
{"lineNum":" 1265","line":"#endif // _LIBCPP_STD_VER > 14"},
{"lineNum":" 1266","line":""},
{"lineNum":" 1267","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1268","line":"    iterator erase(const_iterator __p) {return __table_.erase(__p.__i_);}"},
{"lineNum":" 1269","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1270","line":"    iterator erase(iterator __p)       {return __table_.erase(__p.__i_);}"},
{"lineNum":" 1271","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1272","line":"    size_type erase(const key_type& __k) {return __table_.__erase_unique(__k);}"},
{"lineNum":" 1273","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1274","line":"    iterator erase(const_iterator __first, const_iterator __last)"},
{"lineNum":" 1275","line":"        {return __table_.erase(__first.__i_, __last.__i_);}"},
{"lineNum":" 1276","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1277","line":"        void clear() _NOEXCEPT {__table_.clear();}"},
{"lineNum":" 1278","line":""},
{"lineNum":" 1279","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 1280","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1281","line":"    insert_return_type insert(node_type&& __nh)"},
{"lineNum":" 1282","line":"    {"},
{"lineNum":" 1283","line":"        _LIBCPP_ASSERT(__nh.empty() || __nh.get_allocator() == get_allocator(),"},
{"lineNum":" 1284","line":"            \"node_type with incompatible allocator passed to unordered_map::insert()\");"},
{"lineNum":" 1285","line":"        return __table_.template __node_handle_insert_unique<"},
{"lineNum":" 1286","line":"            node_type, insert_return_type>(_VSTD::move(__nh));"},
{"lineNum":" 1287","line":"    }"},
{"lineNum":" 1288","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1289","line":"    iterator insert(const_iterator __hint, node_type&& __nh)"},
{"lineNum":" 1290","line":"    {"},
{"lineNum":" 1291","line":"        _LIBCPP_ASSERT(__nh.empty() || __nh.get_allocator() == get_allocator(),"},
{"lineNum":" 1292","line":"            \"node_type with incompatible allocator passed to unordered_map::insert()\");"},
{"lineNum":" 1293","line":"        return __table_.template __node_handle_insert_unique<node_type>("},
{"lineNum":" 1294","line":"            __hint.__i_, _VSTD::move(__nh));"},
{"lineNum":" 1295","line":"    }"},
{"lineNum":" 1296","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1297","line":"    node_type extract(key_type const& __key)"},
{"lineNum":" 1298","line":"    {"},
{"lineNum":" 1299","line":"        return __table_.template __node_handle_extract<node_type>(__key);"},
{"lineNum":" 1300","line":"    }"},
{"lineNum":" 1301","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1302","line":"    node_type extract(const_iterator __it)"},
{"lineNum":" 1303","line":"    {"},
{"lineNum":" 1304","line":"        return __table_.template __node_handle_extract<node_type>("},
{"lineNum":" 1305","line":"            __it.__i_);"},
{"lineNum":" 1306","line":"    }"},
{"lineNum":" 1307","line":""},
{"lineNum":" 1308","line":"    template <class _H2, class _P2>"},
{"lineNum":" 1309","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1310","line":"    void merge(unordered_map<key_type, mapped_type, _H2, _P2, allocator_type>& __source)"},
{"lineNum":" 1311","line":"    {"},
{"lineNum":" 1312","line":"        _LIBCPP_ASSERT(__source.get_allocator() == get_allocator(),"},
{"lineNum":" 1313","line":"                       \"merging container with incompatible allocator\");"},
{"lineNum":" 1314","line":"        return __table_.__node_handle_merge_unique(__source.__table_);"},
{"lineNum":" 1315","line":"    }"},
{"lineNum":" 1316","line":"    template <class _H2, class _P2>"},
{"lineNum":" 1317","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1318","line":"    void merge(unordered_map<key_type, mapped_type, _H2, _P2, allocator_type>&& __source)"},
{"lineNum":" 1319","line":"    {"},
{"lineNum":" 1320","line":"        _LIBCPP_ASSERT(__source.get_allocator() == get_allocator(),"},
{"lineNum":" 1321","line":"                       \"merging container with incompatible allocator\");"},
{"lineNum":" 1322","line":"        return __table_.__node_handle_merge_unique(__source.__table_);"},
{"lineNum":" 1323","line":"    }"},
{"lineNum":" 1324","line":"    template <class _H2, class _P2>"},
{"lineNum":" 1325","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1326","line":"    void merge(unordered_multimap<key_type, mapped_type, _H2, _P2, allocator_type>& __source)"},
{"lineNum":" 1327","line":"    {"},
{"lineNum":" 1328","line":"        _LIBCPP_ASSERT(__source.get_allocator() == get_allocator(),"},
{"lineNum":" 1329","line":"                       \"merging container with incompatible allocator\");"},
{"lineNum":" 1330","line":"        return __table_.__node_handle_merge_unique(__source.__table_);"},
{"lineNum":" 1331","line":"    }"},
{"lineNum":" 1332","line":"    template <class _H2, class _P2>"},
{"lineNum":" 1333","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1334","line":"    void merge(unordered_multimap<key_type, mapped_type, _H2, _P2, allocator_type>&& __source)"},
{"lineNum":" 1335","line":"    {"},
{"lineNum":" 1336","line":"        _LIBCPP_ASSERT(__source.get_allocator() == get_allocator(),"},
{"lineNum":" 1337","line":"                       \"merging container with incompatible allocator\");"},
{"lineNum":" 1338","line":"        return __table_.__node_handle_merge_unique(__source.__table_);"},
{"lineNum":" 1339","line":"    }"},
{"lineNum":" 1340","line":"#endif"},
{"lineNum":" 1341","line":""},
{"lineNum":" 1342","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1343","line":"    void swap(unordered_map& __u)"},
{"lineNum":" 1344","line":"        _NOEXCEPT_(__is_nothrow_swappable<__table>::value)"},
{"lineNum":" 1345","line":"        { __table_.swap(__u.__table_);}"},
{"lineNum":" 1346","line":""},
{"lineNum":" 1347","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1348","line":"    hasher hash_function() const"},
{"lineNum":" 1349","line":"        {return __table_.hash_function().hash_function();}"},
{"lineNum":" 1350","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1351","line":"    key_equal key_eq() const"},
{"lineNum":" 1352","line":"        {return __table_.key_eq().key_eq();}"},
{"lineNum":" 1353","line":""},
{"lineNum":" 1354","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1355","line":"    iterator       find(const key_type& __k)       {return __table_.find(__k);}","class":"linePartCov","hits":"2","order":"644","possible_hits":"23",},
{"lineNum":" 1356","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1357","line":"    const_iterator find(const key_type& __k) const {return __table_.find(__k);}","class":"linePartCov","hits":"2","order":"533","possible_hits":"56",},
{"lineNum":" 1358","line":""},
{"lineNum":" 1359","line":"    #if _LIBCPP_STD_VER > 17"},
{"lineNum":" 1360","line":"        template <typename _K2>"},
{"lineNum":" 1361","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1362","line":"        _EnableIf<__is_transparent<hasher, _K2>::value && __is_transparent<key_equal, _K2>::value, iterator>"},
{"lineNum":" 1363","line":"        find(const _K2& __k)       {return __table_.find(__k);}"},
{"lineNum":" 1364","line":"        template <typename _K2>"},
{"lineNum":" 1365","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1366","line":"        _EnableIf<__is_transparent<hasher, _K2>::value && __is_transparent<key_equal, _K2>::value, const_iterator>"},
{"lineNum":" 1367","line":"        find(const _K2& __k) const {return __table_.find(__k);}"},
{"lineNum":" 1368","line":"    #endif // _LIBCPP_STD_VER > 17"},
{"lineNum":" 1369","line":""},
{"lineNum":" 1370","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1371","line":"    size_type count(const key_type& __k) const {return __table_.__count_unique(__k);}"},
{"lineNum":" 1372","line":"    #if _LIBCPP_STD_VER > 17"},
{"lineNum":" 1373","line":"        template <typename _K2>"},
{"lineNum":" 1374","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1375","line":"        _EnableIf<__is_transparent<hasher, _K2>::value && __is_transparent<key_equal, _K2>::value, size_type>"},
{"lineNum":" 1376","line":"        count(const _K2& __k) const {return __table_.__count_unique(__k);}"},
{"lineNum":" 1377","line":"    #endif // _LIBCPP_STD_VER > 17"},
{"lineNum":" 1378","line":"    #if _LIBCPP_STD_VER > 17"},
{"lineNum":" 1379","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1380","line":"        bool contains(const key_type& __k) const {return find(__k) != end();}"},
{"lineNum":" 1381","line":""},
{"lineNum":" 1382","line":"        template <typename _K2>"},
{"lineNum":" 1383","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1384","line":"        _EnableIf<__is_transparent<hasher, _K2>::value && __is_transparent<key_equal, _K2>::value, bool>"},
{"lineNum":" 1385","line":"        contains(const _K2& __k) const {return find(__k) != end();}"},
{"lineNum":" 1386","line":"    #endif // _LIBCPP_STD_VER > 17"},
{"lineNum":" 1387","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1388","line":"    pair<iterator, iterator>             equal_range(const key_type& __k)"},
{"lineNum":" 1389","line":"        {return __table_.__equal_range_unique(__k);}"},
{"lineNum":" 1390","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1391","line":"    pair<const_iterator, const_iterator> equal_range(const key_type& __k) const"},
{"lineNum":" 1392","line":"        {return __table_.__equal_range_unique(__k);}"},
{"lineNum":" 1393","line":"    #if _LIBCPP_STD_VER > 17"},
{"lineNum":" 1394","line":"        template <typename _K2>"},
{"lineNum":" 1395","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1396","line":"        _EnableIf<__is_transparent<hasher, _K2>::value && __is_transparent<key_equal, _K2>::value, pair<iterator, iterator>>"},
{"lineNum":" 1397","line":"        equal_range(const _K2& __k)       {return __table_.__equal_range_unique(__k);}"},
{"lineNum":" 1398","line":"        template <typename _K2>"},
{"lineNum":" 1399","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1400","line":"        _EnableIf<__is_transparent<hasher, _K2>::value && __is_transparent<key_equal, _K2>::value, pair<const_iterator, const_iterator>>"},
{"lineNum":" 1401","line":"        equal_range(const _K2& __k) const {return __table_.__equal_range_unique(__k);}"},
{"lineNum":" 1402","line":"    #endif // _LIBCPP_STD_VER > 17"},
{"lineNum":" 1403","line":""},
{"lineNum":" 1404","line":"    mapped_type& operator[](const key_type& __k);"},
{"lineNum":" 1405","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1406","line":"    mapped_type& operator[](key_type&& __k);"},
{"lineNum":" 1407","line":"#endif"},
{"lineNum":" 1408","line":""},
{"lineNum":" 1409","line":"    mapped_type&       at(const key_type& __k);"},
{"lineNum":" 1410","line":"    const mapped_type& at(const key_type& __k) const;"},
{"lineNum":" 1411","line":""},
{"lineNum":" 1412","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1413","line":"    size_type bucket_count() const _NOEXCEPT {return __table_.bucket_count();}"},
{"lineNum":" 1414","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1415","line":"    size_type max_bucket_count() const _NOEXCEPT {return __table_.max_bucket_count();}"},
{"lineNum":" 1416","line":""},
{"lineNum":" 1417","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1418","line":"    size_type bucket_size(size_type __n) const"},
{"lineNum":" 1419","line":"        {return __table_.bucket_size(__n);}"},
{"lineNum":" 1420","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1421","line":"    size_type bucket(const key_type& __k) const {return __table_.bucket(__k);}"},
{"lineNum":" 1422","line":""},
{"lineNum":" 1423","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1424","line":"    local_iterator       begin(size_type __n)        {return __table_.begin(__n);}"},
{"lineNum":" 1425","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1426","line":"    local_iterator       end(size_type __n)          {return __table_.end(__n);}"},
{"lineNum":" 1427","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1428","line":"    const_local_iterator begin(size_type __n) const  {return __table_.cbegin(__n);}"},
{"lineNum":" 1429","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1430","line":"    const_local_iterator end(size_type __n) const    {return __table_.cend(__n);}"},
{"lineNum":" 1431","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1432","line":"    const_local_iterator cbegin(size_type __n) const {return __table_.cbegin(__n);}"},
{"lineNum":" 1433","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1434","line":"    const_local_iterator cend(size_type __n) const   {return __table_.cend(__n);}"},
{"lineNum":" 1435","line":""},
{"lineNum":" 1436","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1437","line":"    float load_factor() const _NOEXCEPT {return __table_.load_factor();}"},
{"lineNum":" 1438","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1439","line":"    float max_load_factor() const _NOEXCEPT {return __table_.max_load_factor();}"},
{"lineNum":" 1440","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1441","line":"    void max_load_factor(float __mlf) {__table_.max_load_factor(__mlf);}"},
{"lineNum":" 1442","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1443","line":"    void rehash(size_type __n) {__table_.rehash(__n);}"},
{"lineNum":" 1444","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1445","line":"    void reserve(size_type __n) {__table_.reserve(__n);}"},
{"lineNum":" 1446","line":""},
{"lineNum":" 1447","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1448","line":""},
{"lineNum":" 1449","line":"    bool __dereferenceable(const const_iterator* __i) const"},
{"lineNum":" 1450","line":"        {return __table_.__dereferenceable(&__i->__i_);}"},
{"lineNum":" 1451","line":"    bool __decrementable(const const_iterator* __i) const"},
{"lineNum":" 1452","line":"        {return __table_.__decrementable(&__i->__i_);}"},
{"lineNum":" 1453","line":"    bool __addable(const const_iterator* __i, ptrdiff_t __n) const"},
{"lineNum":" 1454","line":"        {return __table_.__addable(&__i->__i_, __n);}"},
{"lineNum":" 1455","line":"    bool __subscriptable(const const_iterator* __i, ptrdiff_t __n) const"},
{"lineNum":" 1456","line":"        {return __table_.__addable(&__i->__i_, __n);}"},
{"lineNum":" 1457","line":""},
{"lineNum":" 1458","line":"#endif // _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1459","line":""},
{"lineNum":" 1460","line":"private:"},
{"lineNum":" 1461","line":""},
{"lineNum":" 1462","line":"#ifdef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1463","line":"    __node_holder __construct_node_with_key(const key_type& __k);"},
{"lineNum":" 1464","line":"#endif"},
{"lineNum":" 1465","line":"};"},
{"lineNum":" 1466","line":""},
{"lineNum":" 1467","line":"#ifndef _LIBCPP_HAS_NO_DEDUCTION_GUIDES"},
{"lineNum":" 1468","line":"template<class _InputIterator,"},
{"lineNum":" 1469","line":"         class _Hash = hash<__iter_key_type<_InputIterator>>,"},
{"lineNum":" 1470","line":"         class _Pred = equal_to<__iter_key_type<_InputIterator>>,"},
{"lineNum":" 1471","line":"         class _Allocator = allocator<__iter_to_alloc_type<_InputIterator>>,"},
{"lineNum":" 1472","line":"         class = _EnableIf<!__is_allocator<_Hash>::value>,"},
{"lineNum":" 1473","line":"         class = _EnableIf<!is_integral<_Hash>::value>,"},
{"lineNum":" 1474","line":"         class = _EnableIf<!__is_allocator<_Pred>::value>,"},
{"lineNum":" 1475","line":"         class = _EnableIf<__is_allocator<_Allocator>::value>>"},
{"lineNum":" 1476","line":"unordered_map(_InputIterator, _InputIterator, typename allocator_traits<_Allocator>::size_type = 0,"},
{"lineNum":" 1477","line":"              _Hash = _Hash(), _Pred = _Pred(), _Allocator = _Allocator())"},
{"lineNum":" 1478","line":"  -> unordered_map<__iter_key_type<_InputIterator>, __iter_mapped_type<_InputIterator>, _Hash, _Pred, _Allocator>;"},
{"lineNum":" 1479","line":""},
{"lineNum":" 1480","line":"template<class _Key, class _Tp, class _Hash = hash<remove_const_t<_Key>>,"},
{"lineNum":" 1481","line":"         class _Pred = equal_to<remove_const_t<_Key>>,"},
{"lineNum":" 1482","line":"         class _Allocator = allocator<pair<const _Key, _Tp>>,"},
{"lineNum":" 1483","line":"         class = _EnableIf<!__is_allocator<_Hash>::value>,"},
{"lineNum":" 1484","line":"         class = _EnableIf<!is_integral<_Hash>::value>,"},
{"lineNum":" 1485","line":"         class = _EnableIf<!__is_allocator<_Pred>::value>,"},
{"lineNum":" 1486","line":"         class = _EnableIf<__is_allocator<_Allocator>::value>>"},
{"lineNum":" 1487","line":"unordered_map(initializer_list<pair<_Key, _Tp>>, typename allocator_traits<_Allocator>::size_type = 0,"},
{"lineNum":" 1488","line":"              _Hash = _Hash(), _Pred = _Pred(), _Allocator = _Allocator())"},
{"lineNum":" 1489","line":"  -> unordered_map<remove_const_t<_Key>, _Tp, _Hash, _Pred, _Allocator>;"},
{"lineNum":" 1490","line":""},
{"lineNum":" 1491","line":"template<class _InputIterator, class _Allocator,"},
{"lineNum":" 1492","line":"         class = _EnableIf<__is_allocator<_Allocator>::value>>"},
{"lineNum":" 1493","line":"unordered_map(_InputIterator, _InputIterator, typename allocator_traits<_Allocator>::size_type, _Allocator)"},
{"lineNum":" 1494","line":"  -> unordered_map<__iter_key_type<_InputIterator>, __iter_mapped_type<_InputIterator>,"},
{"lineNum":" 1495","line":"                   hash<__iter_key_type<_InputIterator>>, equal_to<__iter_key_type<_InputIterator>>, _Allocator>;"},
{"lineNum":" 1496","line":""},
{"lineNum":" 1497","line":"template<class _InputIterator, class _Allocator,"},
{"lineNum":" 1498","line":"         class = _EnableIf<__is_allocator<_Allocator>::value>>"},
{"lineNum":" 1499","line":"unordered_map(_InputIterator, _InputIterator, _Allocator)"},
{"lineNum":" 1500","line":"  -> unordered_map<__iter_key_type<_InputIterator>, __iter_mapped_type<_InputIterator>,"},
{"lineNum":" 1501","line":"                   hash<__iter_key_type<_InputIterator>>, equal_to<__iter_key_type<_InputIterator>>, _Allocator>;"},
{"lineNum":" 1502","line":""},
{"lineNum":" 1503","line":"template<class _InputIterator, class _Hash, class _Allocator,"},
{"lineNum":" 1504","line":"         class = _EnableIf<!__is_allocator<_Hash>::value>,"},
{"lineNum":" 1505","line":"         class = _EnableIf<!is_integral<_Hash>::value>,"},
{"lineNum":" 1506","line":"         class = _EnableIf<__is_allocator<_Allocator>::value>>"},
{"lineNum":" 1507","line":"unordered_map(_InputIterator, _InputIterator, typename allocator_traits<_Allocator>::size_type, _Hash, _Allocator)"},
{"lineNum":" 1508","line":"  -> unordered_map<__iter_key_type<_InputIterator>, __iter_mapped_type<_InputIterator>,"},
{"lineNum":" 1509","line":"                   _Hash, equal_to<__iter_key_type<_InputIterator>>, _Allocator>;"},
{"lineNum":" 1510","line":""},
{"lineNum":" 1511","line":"template<class _Key, class _Tp, class _Allocator,"},
{"lineNum":" 1512","line":"         class = _EnableIf<__is_allocator<_Allocator>::value>>"},
{"lineNum":" 1513","line":"unordered_map(initializer_list<pair<_Key, _Tp>>, typename allocator_traits<_Allocator>::size_type, _Allocator)"},
{"lineNum":" 1514","line":"  -> unordered_map<remove_const_t<_Key>, _Tp,"},
{"lineNum":" 1515","line":"                   hash<remove_const_t<_Key>>,"},
{"lineNum":" 1516","line":"                   equal_to<remove_const_t<_Key>>, _Allocator>;"},
{"lineNum":" 1517","line":""},
{"lineNum":" 1518","line":"template<class _Key, class _Tp, class _Allocator,"},
{"lineNum":" 1519","line":"         class = _EnableIf<__is_allocator<_Allocator>::value>>"},
{"lineNum":" 1520","line":"unordered_map(initializer_list<pair<_Key, _Tp>>, _Allocator)"},
{"lineNum":" 1521","line":"  -> unordered_map<remove_const_t<_Key>, _Tp,"},
{"lineNum":" 1522","line":"                   hash<remove_const_t<_Key>>,"},
{"lineNum":" 1523","line":"                   equal_to<remove_const_t<_Key>>, _Allocator>;"},
{"lineNum":" 1524","line":""},
{"lineNum":" 1525","line":"template<class _Key, class _Tp, class _Hash, class _Allocator,"},
{"lineNum":" 1526","line":"         class = _EnableIf<!__is_allocator<_Hash>::value>,"},
{"lineNum":" 1527","line":"         class = _EnableIf<!is_integral<_Hash>::value>,"},
{"lineNum":" 1528","line":"         class = _EnableIf<__is_allocator<_Allocator>::value>>"},
{"lineNum":" 1529","line":"unordered_map(initializer_list<pair<_Key, _Tp>>, typename allocator_traits<_Allocator>::size_type, _Hash, _Allocator)"},
{"lineNum":" 1530","line":"  -> unordered_map<remove_const_t<_Key>, _Tp, _Hash,"},
{"lineNum":" 1531","line":"                   equal_to<remove_const_t<_Key>>, _Allocator>;"},
{"lineNum":" 1532","line":"#endif"},
{"lineNum":" 1533","line":""},
{"lineNum":" 1534","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1535","line":"unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map("},
{"lineNum":" 1536","line":"        size_type __n, const hasher& __hf, const key_equal& __eql)"},
{"lineNum":" 1537","line":"    : __table_(__hf, __eql)"},
{"lineNum":" 1538","line":"{"},
{"lineNum":" 1539","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1540","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1541","line":"#endif"},
{"lineNum":" 1542","line":"    __table_.rehash(__n);"},
{"lineNum":" 1543","line":"}"},
{"lineNum":" 1544","line":""},
{"lineNum":" 1545","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1546","line":"unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map("},
{"lineNum":" 1547","line":"        size_type __n, const hasher& __hf, const key_equal& __eql,"},
{"lineNum":" 1548","line":"        const allocator_type& __a)"},
{"lineNum":" 1549","line":"    : __table_(__hf, __eql, typename __table::allocator_type(__a))"},
{"lineNum":" 1550","line":"{"},
{"lineNum":" 1551","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1552","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1553","line":"#endif"},
{"lineNum":" 1554","line":"    __table_.rehash(__n);"},
{"lineNum":" 1555","line":"}"},
{"lineNum":" 1556","line":""},
{"lineNum":" 1557","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1558","line":"inline"},
{"lineNum":" 1559","line":"unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map("},
{"lineNum":" 1560","line":"        const allocator_type& __a)"},
{"lineNum":" 1561","line":"    : __table_(typename __table::allocator_type(__a))"},
{"lineNum":" 1562","line":"{"},
{"lineNum":" 1563","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1564","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1565","line":"#endif"},
{"lineNum":" 1566","line":"}"},
{"lineNum":" 1567","line":""},
{"lineNum":" 1568","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1569","line":"template <class _InputIterator>"},
{"lineNum":" 1570","line":"unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map("},
{"lineNum":" 1571","line":"        _InputIterator __first, _InputIterator __last)"},
{"lineNum":" 1572","line":"{"},
{"lineNum":" 1573","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1574","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1575","line":"#endif"},
{"lineNum":" 1576","line":"    insert(__first, __last);"},
{"lineNum":" 1577","line":"}"},
{"lineNum":" 1578","line":""},
{"lineNum":" 1579","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1580","line":"template <class _InputIterator>"},
{"lineNum":" 1581","line":"unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map("},
{"lineNum":" 1582","line":"        _InputIterator __first, _InputIterator __last, size_type __n,"},
{"lineNum":" 1583","line":"        const hasher& __hf, const key_equal& __eql)"},
{"lineNum":" 1584","line":"    : __table_(__hf, __eql)"},
{"lineNum":" 1585","line":"{"},
{"lineNum":" 1586","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1587","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1588","line":"#endif"},
{"lineNum":" 1589","line":"    __table_.rehash(__n);"},
{"lineNum":" 1590","line":"    insert(__first, __last);"},
{"lineNum":" 1591","line":"}"},
{"lineNum":" 1592","line":""},
{"lineNum":" 1593","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1594","line":"template <class _InputIterator>"},
{"lineNum":" 1595","line":"unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map("},
{"lineNum":" 1596","line":"        _InputIterator __first, _InputIterator __last, size_type __n,"},
{"lineNum":" 1597","line":"        const hasher& __hf, const key_equal& __eql, const allocator_type& __a)"},
{"lineNum":" 1598","line":"    : __table_(__hf, __eql, typename __table::allocator_type(__a))"},
{"lineNum":" 1599","line":"{"},
{"lineNum":" 1600","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1601","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1602","line":"#endif"},
{"lineNum":" 1603","line":"    __table_.rehash(__n);"},
{"lineNum":" 1604","line":"    insert(__first, __last);"},
{"lineNum":" 1605","line":"}"},
{"lineNum":" 1606","line":""},
{"lineNum":" 1607","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1608","line":"unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map("},
{"lineNum":" 1609","line":"        const unordered_map& __u)"},
{"lineNum":" 1610","line":"    : __table_(__u.__table_)"},
{"lineNum":" 1611","line":"{"},
{"lineNum":" 1612","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1613","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1614","line":"#endif"},
{"lineNum":" 1615","line":"    __table_.rehash(__u.bucket_count());"},
{"lineNum":" 1616","line":"    insert(__u.begin(), __u.end());"},
{"lineNum":" 1617","line":"}"},
{"lineNum":" 1618","line":""},
{"lineNum":" 1619","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1620","line":"unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map("},
{"lineNum":" 1621","line":"        const unordered_map& __u, const allocator_type& __a)"},
{"lineNum":" 1622","line":"    : __table_(__u.__table_, typename __table::allocator_type(__a))"},
{"lineNum":" 1623","line":"{"},
{"lineNum":" 1624","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1625","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1626","line":"#endif"},
{"lineNum":" 1627","line":"    __table_.rehash(__u.bucket_count());"},
{"lineNum":" 1628","line":"    insert(__u.begin(), __u.end());"},
{"lineNum":" 1629","line":"}"},
{"lineNum":" 1630","line":""},
{"lineNum":" 1631","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1632","line":""},
{"lineNum":" 1633","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1634","line":"inline"},
{"lineNum":" 1635","line":"unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map("},
{"lineNum":" 1636","line":"        unordered_map&& __u)"},
{"lineNum":" 1637","line":"    _NOEXCEPT_(is_nothrow_move_constructible<__table>::value)"},
{"lineNum":" 1638","line":"    : __table_(_VSTD::move(__u.__table_))","class":"lineCov","hits":"12","order":"102","possible_hits":"12",},
{"lineNum":" 1639","line":"{"},
{"lineNum":" 1640","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1641","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1642","line":"    __get_db()->swap(this, &__u);"},
{"lineNum":" 1643","line":"#endif"},
{"lineNum":" 1644","line":"}"},
{"lineNum":" 1645","line":""},
{"lineNum":" 1646","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1647","line":"unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map("},
{"lineNum":" 1648","line":"        unordered_map&& __u, const allocator_type& __a)"},
{"lineNum":" 1649","line":"    : __table_(_VSTD::move(__u.__table_), typename __table::allocator_type(__a))"},
{"lineNum":" 1650","line":"{"},
{"lineNum":" 1651","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1652","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1653","line":"#endif"},
{"lineNum":" 1654","line":"    if (__a != __u.get_allocator())"},
{"lineNum":" 1655","line":"    {"},
{"lineNum":" 1656","line":"        iterator __i = __u.begin();"},
{"lineNum":" 1657","line":"        while (__u.size() != 0) {"},
{"lineNum":" 1658","line":"            __table_.__emplace_unique("},
{"lineNum":" 1659","line":"                __u.__table_.remove((__i++).__i_)->__value_.__move());"},
{"lineNum":" 1660","line":"        }"},
{"lineNum":" 1661","line":"    }"},
{"lineNum":" 1662","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1663","line":"    else"},
{"lineNum":" 1664","line":"        __get_db()->swap(this, &__u);"},
{"lineNum":" 1665","line":"#endif"},
{"lineNum":" 1666","line":"}"},
{"lineNum":" 1667","line":""},
{"lineNum":" 1668","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1669","line":"unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map("},
{"lineNum":" 1670","line":"        initializer_list<value_type> __il)"},
{"lineNum":" 1671","line":"{"},
{"lineNum":" 1672","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1673","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1674","line":"#endif"},
{"lineNum":" 1675","line":"    insert(__il.begin(), __il.end());"},
{"lineNum":" 1676","line":"}"},
{"lineNum":" 1677","line":""},
{"lineNum":" 1678","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1679","line":"unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map("},
{"lineNum":" 1680","line":"        initializer_list<value_type> __il, size_type __n, const hasher& __hf,"},
{"lineNum":" 1681","line":"        const key_equal& __eql)"},
{"lineNum":" 1682","line":"    : __table_(__hf, __eql)"},
{"lineNum":" 1683","line":"{"},
{"lineNum":" 1684","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1685","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1686","line":"#endif"},
{"lineNum":" 1687","line":"    __table_.rehash(__n);"},
{"lineNum":" 1688","line":"    insert(__il.begin(), __il.end());"},
{"lineNum":" 1689","line":"}"},
{"lineNum":" 1690","line":""},
{"lineNum":" 1691","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1692","line":"unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map("},
{"lineNum":" 1693","line":"        initializer_list<value_type> __il, size_type __n, const hasher& __hf,"},
{"lineNum":" 1694","line":"        const key_equal& __eql, const allocator_type& __a)"},
{"lineNum":" 1695","line":"    : __table_(__hf, __eql, typename __table::allocator_type(__a))"},
{"lineNum":" 1696","line":"{"},
{"lineNum":" 1697","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1698","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1699","line":"#endif"},
{"lineNum":" 1700","line":"    __table_.rehash(__n);"},
{"lineNum":" 1701","line":"    insert(__il.begin(), __il.end());"},
{"lineNum":" 1702","line":"}"},
{"lineNum":" 1703","line":""},
{"lineNum":" 1704","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1705","line":"inline"},
{"lineNum":" 1706","line":"unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>&"},
{"lineNum":" 1707","line":"unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::operator=(unordered_map&& __u)"},
{"lineNum":" 1708","line":"    _NOEXCEPT_(is_nothrow_move_assignable<__table>::value)"},
{"lineNum":" 1709","line":"{"},
{"lineNum":" 1710","line":"    __table_ = _VSTD::move(__u.__table_);"},
{"lineNum":" 1711","line":"    return *this;"},
{"lineNum":" 1712","line":"}"},
{"lineNum":" 1713","line":""},
{"lineNum":" 1714","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1715","line":"inline"},
{"lineNum":" 1716","line":"unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>&"},
{"lineNum":" 1717","line":"unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::operator=("},
{"lineNum":" 1718","line":"        initializer_list<value_type> __il)"},
{"lineNum":" 1719","line":"{"},
{"lineNum":" 1720","line":"    __table_.__assign_unique(__il.begin(), __il.end());"},
{"lineNum":" 1721","line":"    return *this;"},
{"lineNum":" 1722","line":"}"},
{"lineNum":" 1723","line":""},
{"lineNum":" 1724","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 1725","line":""},
{"lineNum":" 1726","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1727","line":"template <class _InputIterator>"},
{"lineNum":" 1728","line":"inline"},
{"lineNum":" 1729","line":"void"},
{"lineNum":" 1730","line":"unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::insert(_InputIterator __first,"},
{"lineNum":" 1731","line":"                                                       _InputIterator __last)"},
{"lineNum":" 1732","line":"{"},
{"lineNum":" 1733","line":"    for (; __first != __last; ++__first)"},
{"lineNum":" 1734","line":"        __table_.__insert_unique(*__first);"},
{"lineNum":" 1735","line":"}"},
{"lineNum":" 1736","line":""},
{"lineNum":" 1737","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1738","line":""},
{"lineNum":" 1739","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1740","line":"_Tp&"},
{"lineNum":" 1741","line":"unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::operator[](const key_type& __k)"},
{"lineNum":" 1742","line":"{"},
{"lineNum":" 1743","line":"    return __table_.__emplace_unique_key_args(__k,","class":"linePartCov","hits":"15","order":"302","possible_hits":"275",},
{"lineNum":" 1744","line":"        piecewise_construct, _VSTD::forward_as_tuple(__k),","class":"linePartCov","hits":"15","order":"300","possible_hits":"191",},
{"lineNum":" 1745","line":"                             _VSTD::forward_as_tuple()).first->__get_value().second;","class":"linePartCov","hits":"2","order":"655","possible_hits":"62",},
{"lineNum":" 1746","line":"}"},
{"lineNum":" 1747","line":""},
{"lineNum":" 1748","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1749","line":"_Tp&"},
{"lineNum":" 1750","line":"unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::operator[](key_type&& __k)"},
{"lineNum":" 1751","line":"{"},
{"lineNum":" 1752","line":"    return __table_.__emplace_unique_key_args(__k,"},
{"lineNum":" 1753","line":"        piecewise_construct, _VSTD::forward_as_tuple(_VSTD::move(__k)),"},
{"lineNum":" 1754","line":"                             _VSTD::forward_as_tuple()).first->__get_value().second;"},
{"lineNum":" 1755","line":"}"},
{"lineNum":" 1756","line":"#else // _LIBCPP_CXX03_LANG"},
{"lineNum":" 1757","line":""},
{"lineNum":" 1758","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1759","line":"typename unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::__node_holder"},
{"lineNum":" 1760","line":"unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::__construct_node_with_key(const key_type& __k)"},
{"lineNum":" 1761","line":"{"},
{"lineNum":" 1762","line":"    __node_allocator& __na = __table_.__node_alloc();"},
{"lineNum":" 1763","line":"    __node_holder __h(__node_traits::allocate(__na, 1), _Dp(__na));"},
{"lineNum":" 1764","line":"    __node_traits::construct(__na, _VSTD::addressof(__h->__value_.__get_value().first), __k);"},
{"lineNum":" 1765","line":"    __h.get_deleter().__first_constructed = true;"},
{"lineNum":" 1766","line":"    __node_traits::construct(__na, _VSTD::addressof(__h->__value_.__get_value().second));"},
{"lineNum":" 1767","line":"    __h.get_deleter().__second_constructed = true;"},
{"lineNum":" 1768","line":"    return __h;"},
{"lineNum":" 1769","line":"}"},
{"lineNum":" 1770","line":""},
{"lineNum":" 1771","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1772","line":"_Tp&"},
{"lineNum":" 1773","line":"unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::operator[](const key_type& __k)"},
{"lineNum":" 1774","line":"{"},
{"lineNum":" 1775","line":"    iterator __i = find(__k);"},
{"lineNum":" 1776","line":"    if (__i != end())"},
{"lineNum":" 1777","line":"        return __i->second;"},
{"lineNum":" 1778","line":"    __node_holder __h = __construct_node_with_key(__k);"},
{"lineNum":" 1779","line":"    pair<iterator, bool> __r = __table_.__node_insert_unique(__h.get());"},
{"lineNum":" 1780","line":"    __h.release();"},
{"lineNum":" 1781","line":"    return __r.first->second;"},
{"lineNum":" 1782","line":"}"},
{"lineNum":" 1783","line":""},
{"lineNum":" 1784","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 1785","line":""},
{"lineNum":" 1786","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1787","line":"_Tp&"},
{"lineNum":" 1788","line":"unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::at(const key_type& __k)"},
{"lineNum":" 1789","line":"{"},
{"lineNum":" 1790","line":"    iterator __i = find(__k);"},
{"lineNum":" 1791","line":"    if (__i == end())"},
{"lineNum":" 1792","line":"        __throw_out_of_range(\"unordered_map::at: key not found\");"},
{"lineNum":" 1793","line":"    return __i->second;"},
{"lineNum":" 1794","line":"}"},
{"lineNum":" 1795","line":""},
{"lineNum":" 1796","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1797","line":"const _Tp&"},
{"lineNum":" 1798","line":"unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::at(const key_type& __k) const"},
{"lineNum":" 1799","line":"{"},
{"lineNum":" 1800","line":"    const_iterator __i = find(__k);"},
{"lineNum":" 1801","line":"    if (__i == end())"},
{"lineNum":" 1802","line":"        __throw_out_of_range(\"unordered_map::at: key not found\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1803","line":"    return __i->second;"},
{"lineNum":" 1804","line":"}"},
{"lineNum":" 1805","line":""},
{"lineNum":" 1806","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1807","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1808","line":"void"},
{"lineNum":" 1809","line":"swap(unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,"},
{"lineNum":" 1810","line":"     unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)"},
{"lineNum":" 1811","line":"    _NOEXCEPT_(_NOEXCEPT_(__x.swap(__y)))"},
{"lineNum":" 1812","line":"{"},
{"lineNum":" 1813","line":"    __x.swap(__y);"},
{"lineNum":" 1814","line":"}"},
{"lineNum":" 1815","line":""},
{"lineNum":" 1816","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":" 1817","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc,"},
{"lineNum":" 1818","line":"          class _Predicate>"},
{"lineNum":" 1819","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1820","line":"    typename unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::size_type"},
{"lineNum":" 1821","line":"    erase_if(unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __c,"},
{"lineNum":" 1822","line":"             _Predicate __pred) {"},
{"lineNum":" 1823","line":"  return _VSTD::__libcpp_erase_if_container(__c, __pred);"},
{"lineNum":" 1824","line":"}"},
{"lineNum":" 1825","line":"#endif"},
{"lineNum":" 1826","line":""},
{"lineNum":" 1827","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1828","line":"bool"},
{"lineNum":" 1829","line":"operator==(const unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,"},
{"lineNum":" 1830","line":"           const unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)"},
{"lineNum":" 1831","line":"{"},
{"lineNum":" 1832","line":"    if (__x.size() != __y.size())"},
{"lineNum":" 1833","line":"        return false;"},
{"lineNum":" 1834","line":"    typedef typename unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::const_iterator"},
{"lineNum":" 1835","line":"                                                                 const_iterator;"},
{"lineNum":" 1836","line":"    for (const_iterator __i = __x.begin(), __ex = __x.end(), __ey = __y.end();"},
{"lineNum":" 1837","line":"            __i != __ex; ++__i)"},
{"lineNum":" 1838","line":"    {"},
{"lineNum":" 1839","line":"        const_iterator __j = __y.find(__i->first);"},
{"lineNum":" 1840","line":"        if (__j == __ey || !(*__i == *__j))"},
{"lineNum":" 1841","line":"            return false;"},
{"lineNum":" 1842","line":"    }"},
{"lineNum":" 1843","line":"    return true;"},
{"lineNum":" 1844","line":"}"},
{"lineNum":" 1845","line":""},
{"lineNum":" 1846","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1847","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1848","line":"bool"},
{"lineNum":" 1849","line":"operator!=(const unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,"},
{"lineNum":" 1850","line":"           const unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)"},
{"lineNum":" 1851","line":"{"},
{"lineNum":" 1852","line":"    return !(__x == __y);"},
{"lineNum":" 1853","line":"}"},
{"lineNum":" 1854","line":""},
{"lineNum":" 1855","line":"template <class _Key, class _Tp, class _Hash = hash<_Key>, class _Pred = equal_to<_Key>,"},
{"lineNum":" 1856","line":"          class _Alloc = allocator<pair<const _Key, _Tp> > >"},
{"lineNum":" 1857","line":"class _LIBCPP_TEMPLATE_VIS unordered_multimap"},
{"lineNum":" 1858","line":"{"},
{"lineNum":" 1859","line":"public:"},
{"lineNum":" 1860","line":"    // types"},
{"lineNum":" 1861","line":"    typedef _Key                                           key_type;"},
{"lineNum":" 1862","line":"    typedef _Tp                                            mapped_type;"},
{"lineNum":" 1863","line":"    typedef __identity_t<_Hash>                            hasher;"},
{"lineNum":" 1864","line":"    typedef __identity_t<_Pred>                            key_equal;"},
{"lineNum":" 1865","line":"    typedef __identity_t<_Alloc>                           allocator_type;"},
{"lineNum":" 1866","line":"    typedef pair<const key_type, mapped_type>              value_type;"},
{"lineNum":" 1867","line":"    typedef value_type&                                    reference;"},
{"lineNum":" 1868","line":"    typedef const value_type&                              const_reference;"},
{"lineNum":" 1869","line":"    static_assert((is_same<value_type, typename allocator_type::value_type>::value),"},
{"lineNum":" 1870","line":"                  \"Invalid allocator::value_type\");"},
{"lineNum":" 1871","line":""},
{"lineNum":" 1872","line":"private:"},
{"lineNum":" 1873","line":"    typedef __hash_value_type<key_type, mapped_type>                          __value_type;"},
{"lineNum":" 1874","line":"    typedef __unordered_map_hasher<key_type, __value_type, hasher, key_equal> __hasher;"},
{"lineNum":" 1875","line":"    typedef __unordered_map_equal<key_type, __value_type, key_equal, hasher>  __key_equal;"},
{"lineNum":" 1876","line":"    typedef typename __rebind_alloc_helper<allocator_traits<allocator_type>,"},
{"lineNum":" 1877","line":"                                                 __value_type>::type          __allocator_type;"},
{"lineNum":" 1878","line":""},
{"lineNum":" 1879","line":"    typedef __hash_table<__value_type, __hasher,"},
{"lineNum":" 1880","line":"                         __key_equal,  __allocator_type>   __table;"},
{"lineNum":" 1881","line":""},
{"lineNum":" 1882","line":"    __table __table_;"},
{"lineNum":" 1883","line":""},
{"lineNum":" 1884","line":"    typedef typename __table::_NodeTypes                   _NodeTypes;"},
{"lineNum":" 1885","line":"    typedef typename __table::__node_traits                __node_traits;"},
{"lineNum":" 1886","line":"    typedef typename __table::__node_allocator             __node_allocator;"},
{"lineNum":" 1887","line":"    typedef typename __table::__node                       __node;"},
{"lineNum":" 1888","line":"    typedef __hash_map_node_destructor<__node_allocator>   _Dp;"},
{"lineNum":" 1889","line":"    typedef unique_ptr<__node, _Dp>                         __node_holder;"},
{"lineNum":" 1890","line":"    typedef allocator_traits<allocator_type>               __alloc_traits;"},
{"lineNum":" 1891","line":"    static_assert((is_same<typename __node_traits::size_type,"},
{"lineNum":" 1892","line":"                          typename __alloc_traits::size_type>::value),"},
{"lineNum":" 1893","line":"                 \"Allocator uses different size_type for different types\");"},
{"lineNum":" 1894","line":"public:"},
{"lineNum":" 1895","line":"    typedef typename __alloc_traits::pointer         pointer;"},
{"lineNum":" 1896","line":"    typedef typename __alloc_traits::const_pointer   const_pointer;"},
{"lineNum":" 1897","line":"    typedef typename __table::size_type              size_type;"},
{"lineNum":" 1898","line":"    typedef typename __table::difference_type        difference_type;"},
{"lineNum":" 1899","line":""},
{"lineNum":" 1900","line":"    typedef __hash_map_iterator<typename __table::iterator>       iterator;"},
{"lineNum":" 1901","line":"    typedef __hash_map_const_iterator<typename __table::const_iterator> const_iterator;"},
{"lineNum":" 1902","line":"    typedef __hash_map_iterator<typename __table::local_iterator> local_iterator;"},
{"lineNum":" 1903","line":"    typedef __hash_map_const_iterator<typename __table::const_local_iterator> const_local_iterator;"},
{"lineNum":" 1904","line":""},
{"lineNum":" 1905","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 1906","line":"    typedef __map_node_handle<__node, allocator_type> node_type;"},
{"lineNum":" 1907","line":"#endif"},
{"lineNum":" 1908","line":""},
{"lineNum":" 1909","line":"    template <class _Key2, class _Tp2, class _Hash2, class _Pred2, class _Alloc2>"},
{"lineNum":" 1910","line":"        friend class _LIBCPP_TEMPLATE_VIS unordered_map;"},
{"lineNum":" 1911","line":"    template <class _Key2, class _Tp2, class _Hash2, class _Pred2, class _Alloc2>"},
{"lineNum":" 1912","line":"        friend class _LIBCPP_TEMPLATE_VIS unordered_multimap;"},
{"lineNum":" 1913","line":""},
{"lineNum":" 1914","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1915","line":"    unordered_multimap()"},
{"lineNum":" 1916","line":"        _NOEXCEPT_(is_nothrow_default_constructible<__table>::value)"},
{"lineNum":" 1917","line":"        {","class":"lineCov","hits":"1","order":"289","possible_hits":"1",},
{"lineNum":" 1918","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1919","line":"            __get_db()->__insert_c(this);"},
{"lineNum":" 1920","line":"#endif"},
{"lineNum":" 1921","line":"        }","class":"linePartCov","hits":"1","order":"290","possible_hits":"2",},
{"lineNum":" 1922","line":"    explicit unordered_multimap(size_type __n, const hasher& __hf = hasher(),"},
{"lineNum":" 1923","line":"                                const key_equal& __eql = key_equal());"},
{"lineNum":" 1924","line":"    unordered_multimap(size_type __n, const hasher& __hf,"},
{"lineNum":" 1925","line":"                                const key_equal& __eql,"},
{"lineNum":" 1926","line":"                                const allocator_type& __a);"},
{"lineNum":" 1927","line":"    template <class _InputIterator>"},
{"lineNum":" 1928","line":"        unordered_multimap(_InputIterator __first, _InputIterator __last);"},
{"lineNum":" 1929","line":"    template <class _InputIterator>"},
{"lineNum":" 1930","line":"        unordered_multimap(_InputIterator __first, _InputIterator __last,"},
{"lineNum":" 1931","line":"                      size_type __n, const hasher& __hf = hasher(),"},
{"lineNum":" 1932","line":"                      const key_equal& __eql = key_equal());"},
{"lineNum":" 1933","line":"    template <class _InputIterator>"},
{"lineNum":" 1934","line":"        unordered_multimap(_InputIterator __first, _InputIterator __last,"},
{"lineNum":" 1935","line":"                      size_type __n, const hasher& __hf,"},
{"lineNum":" 1936","line":"                      const key_equal& __eql,"},
{"lineNum":" 1937","line":"                      const allocator_type& __a);"},
{"lineNum":" 1938","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1939","line":"    explicit unordered_multimap(const allocator_type& __a);"},
{"lineNum":" 1940","line":"    unordered_multimap(const unordered_multimap& __u);"},
{"lineNum":" 1941","line":"    unordered_multimap(const unordered_multimap& __u, const allocator_type& __a);"},
{"lineNum":" 1942","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1943","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1944","line":"    unordered_multimap(unordered_multimap&& __u)"},
{"lineNum":" 1945","line":"        _NOEXCEPT_(is_nothrow_move_constructible<__table>::value);"},
{"lineNum":" 1946","line":"    unordered_multimap(unordered_multimap&& __u, const allocator_type& __a);"},
{"lineNum":" 1947","line":"    unordered_multimap(initializer_list<value_type> __il);"},
{"lineNum":" 1948","line":"    unordered_multimap(initializer_list<value_type> __il, size_type __n,"},
{"lineNum":" 1949","line":"                       const hasher& __hf = hasher(),"},
{"lineNum":" 1950","line":"                       const key_equal& __eql = key_equal());"},
{"lineNum":" 1951","line":"    unordered_multimap(initializer_list<value_type> __il, size_type __n,"},
{"lineNum":" 1952","line":"                       const hasher& __hf, const key_equal& __eql,"},
{"lineNum":" 1953","line":"                       const allocator_type& __a);"},
{"lineNum":" 1954","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 1955","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 1956","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1957","line":"    unordered_multimap(size_type __n, const allocator_type& __a)"},
{"lineNum":" 1958","line":"      : unordered_multimap(__n, hasher(), key_equal(), __a) {}"},
{"lineNum":" 1959","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1960","line":"    unordered_multimap(size_type __n, const hasher& __hf, const allocator_type& __a)"},
{"lineNum":" 1961","line":"      : unordered_multimap(__n, __hf, key_equal(), __a) {}"},
{"lineNum":" 1962","line":"    template <class _InputIterator>"},
{"lineNum":" 1963","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1964","line":"      unordered_multimap(_InputIterator __first, _InputIterator __last, size_type __n, const allocator_type& __a)"},
{"lineNum":" 1965","line":"      : unordered_multimap(__first, __last, __n, hasher(), key_equal(), __a) {}"},
{"lineNum":" 1966","line":"    template <class _InputIterator>"},
{"lineNum":" 1967","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1968","line":"      unordered_multimap(_InputIterator __first, _InputIterator __last, size_type __n, const hasher& __hf,"},
{"lineNum":" 1969","line":"        const allocator_type& __a)"},
{"lineNum":" 1970","line":"      : unordered_multimap(__first, __last, __n, __hf, key_equal(), __a) {}"},
{"lineNum":" 1971","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1972","line":"    unordered_multimap(initializer_list<value_type> __il, size_type __n, const allocator_type& __a)"},
{"lineNum":" 1973","line":"      : unordered_multimap(__il, __n, hasher(), key_equal(), __a) {}"},
{"lineNum":" 1974","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1975","line":"    unordered_multimap(initializer_list<value_type> __il, size_type __n, const hasher& __hf,"},
{"lineNum":" 1976","line":"      const allocator_type& __a)"},
{"lineNum":" 1977","line":"      : unordered_multimap(__il, __n, __hf, key_equal(), __a) {}"},
{"lineNum":" 1978","line":"#endif"},
{"lineNum":" 1979","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1980","line":"    ~unordered_multimap() {"},
{"lineNum":" 1981","line":"        static_assert(sizeof(__diagnose_unordered_container_requirements<_Key, _Hash, _Pred>(0)), \"\");"},
{"lineNum":" 1982","line":"    }","class":"linePartCov","hits":"11","order":"356","possible_hits":"22",},
{"lineNum":" 1983","line":""},
{"lineNum":" 1984","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1985","line":"    unordered_multimap& operator=(const unordered_multimap& __u)"},
{"lineNum":" 1986","line":"    {"},
{"lineNum":" 1987","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1988","line":"        __table_ = __u.__table_;"},
{"lineNum":" 1989","line":"#else"},
{"lineNum":" 1990","line":"        if (this != &__u) {"},
{"lineNum":" 1991","line":"            __table_.clear();"},
{"lineNum":" 1992","line":"            __table_.hash_function() = __u.__table_.hash_function();"},
{"lineNum":" 1993","line":"            __table_.key_eq() = __u.__table_.key_eq();"},
{"lineNum":" 1994","line":"            __table_.max_load_factor() = __u.__table_.max_load_factor();"},
{"lineNum":" 1995","line":"            __table_.__copy_assign_alloc(__u.__table_);"},
{"lineNum":" 1996","line":"            insert(__u.begin(), __u.end());"},
{"lineNum":" 1997","line":"        }"},
{"lineNum":" 1998","line":"#endif"},
{"lineNum":" 1999","line":"        return *this;"},
{"lineNum":" 2000","line":"    }"},
{"lineNum":" 2001","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 2002","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2003","line":"    unordered_multimap& operator=(unordered_multimap&& __u)"},
{"lineNum":" 2004","line":"        _NOEXCEPT_(is_nothrow_move_assignable<__table>::value);"},
{"lineNum":" 2005","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2006","line":"    unordered_multimap& operator=(initializer_list<value_type> __il);"},
{"lineNum":" 2007","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 2008","line":""},
{"lineNum":" 2009","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2010","line":"    allocator_type get_allocator() const _NOEXCEPT"},
{"lineNum":" 2011","line":"        {return allocator_type(__table_.__node_alloc());}"},
{"lineNum":" 2012","line":""},
{"lineNum":" 2013","line":"    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2014","line":"    bool      empty() const _NOEXCEPT {return __table_.size() == 0;}"},
{"lineNum":" 2015","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2016","line":"    size_type size() const _NOEXCEPT  {return __table_.size();}"},
{"lineNum":" 2017","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2018","line":"    size_type max_size() const _NOEXCEPT {return __table_.max_size();}"},
{"lineNum":" 2019","line":""},
{"lineNum":" 2020","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2021","line":"    iterator       begin() _NOEXCEPT        {return __table_.begin();}"},
{"lineNum":" 2022","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2023","line":"    iterator       end() _NOEXCEPT          {return __table_.end();}"},
{"lineNum":" 2024","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2025","line":"    const_iterator begin()  const _NOEXCEPT {return __table_.begin();}"},
{"lineNum":" 2026","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2027","line":"    const_iterator end()    const _NOEXCEPT {return __table_.end();}"},
{"lineNum":" 2028","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2029","line":"    const_iterator cbegin() const _NOEXCEPT {return __table_.begin();}"},
{"lineNum":" 2030","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2031","line":"    const_iterator cend()   const _NOEXCEPT {return __table_.end();}"},
{"lineNum":" 2032","line":""},
{"lineNum":" 2033","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2034","line":"    iterator insert(const value_type& __x) {return __table_.__insert_multi(__x);}"},
{"lineNum":" 2035","line":""},
{"lineNum":" 2036","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2037","line":"    iterator insert(const_iterator __p, const value_type& __x)"},
{"lineNum":" 2038","line":"        {return __table_.__insert_multi(__p.__i_, __x);}"},
{"lineNum":" 2039","line":""},
{"lineNum":" 2040","line":"    template <class _InputIterator>"},
{"lineNum":" 2041","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2042","line":"    void insert(_InputIterator __first, _InputIterator __last);"},
{"lineNum":" 2043","line":""},
{"lineNum":" 2044","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 2045","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2046","line":"    void insert(initializer_list<value_type> __il)"},
{"lineNum":" 2047","line":"        {insert(__il.begin(), __il.end());}"},
{"lineNum":" 2048","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2049","line":"    iterator insert(value_type&& __x) {return __table_.__insert_multi(_VSTD::move(__x));}"},
{"lineNum":" 2050","line":""},
{"lineNum":" 2051","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2052","line":"    iterator insert(const_iterator __p, value_type&& __x)"},
{"lineNum":" 2053","line":"        {return __table_.__insert_multi(__p.__i_, _VSTD::move(__x));}"},
{"lineNum":" 2054","line":""},
{"lineNum":" 2055","line":"    template <class _Pp,"},
{"lineNum":" 2056","line":"              class = typename enable_if<is_constructible<value_type, _Pp>::value>::type>"},
{"lineNum":" 2057","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2058","line":"    iterator insert(_Pp&& __x)"},
{"lineNum":" 2059","line":"        {return __table_.__insert_multi(_VSTD::forward<_Pp>(__x));}"},
{"lineNum":" 2060","line":""},
{"lineNum":" 2061","line":"    template <class _Pp,"},
{"lineNum":" 2062","line":"              class = typename enable_if<is_constructible<value_type, _Pp>::value>::type>"},
{"lineNum":" 2063","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2064","line":"    iterator insert(const_iterator __p, _Pp&& __x)"},
{"lineNum":" 2065","line":"        {return __table_.__insert_multi(__p.__i_, _VSTD::forward<_Pp>(__x));}"},
{"lineNum":" 2066","line":""},
{"lineNum":" 2067","line":"    template <class... _Args>"},
{"lineNum":" 2068","line":"    iterator emplace(_Args&&... __args) {"},
{"lineNum":" 2069","line":"        return __table_.__emplace_multi(_VSTD::forward<_Args>(__args)...);"},
{"lineNum":" 2070","line":"    }"},
{"lineNum":" 2071","line":""},
{"lineNum":" 2072","line":"    template <class... _Args>"},
{"lineNum":" 2073","line":"    iterator emplace_hint(const_iterator __p, _Args&&... __args) {"},
{"lineNum":" 2074","line":"        return __table_.__emplace_hint_multi(__p.__i_, _VSTD::forward<_Args>(__args)...);","class":"linePartCov","hits":"2","order":"602","possible_hits":"11",},
{"lineNum":" 2075","line":"    }"},
{"lineNum":" 2076","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 2077","line":""},
{"lineNum":" 2078","line":""},
{"lineNum":" 2079","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2080","line":"    iterator erase(const_iterator __p) {return __table_.erase(__p.__i_);}"},
{"lineNum":" 2081","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2082","line":"    iterator erase(iterator __p)       {return __table_.erase(__p.__i_);}"},
{"lineNum":" 2083","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2084","line":"    size_type erase(const key_type& __k) {return __table_.__erase_multi(__k);}"},
{"lineNum":" 2085","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2086","line":"    iterator erase(const_iterator __first, const_iterator __last)"},
{"lineNum":" 2087","line":"        {return __table_.erase(__first.__i_, __last.__i_);}"},
{"lineNum":" 2088","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2089","line":"    void clear() _NOEXCEPT {__table_.clear();}"},
{"lineNum":" 2090","line":""},
{"lineNum":" 2091","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 2092","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2093","line":"    iterator insert(node_type&& __nh)"},
{"lineNum":" 2094","line":"    {"},
{"lineNum":" 2095","line":"        _LIBCPP_ASSERT(__nh.empty() || __nh.get_allocator() == get_allocator(),"},
{"lineNum":" 2096","line":"            \"node_type with incompatible allocator passed to unordered_multimap::insert()\");"},
{"lineNum":" 2097","line":"        return __table_.template __node_handle_insert_multi<node_type>("},
{"lineNum":" 2098","line":"            _VSTD::move(__nh));"},
{"lineNum":" 2099","line":"    }"},
{"lineNum":" 2100","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2101","line":"    iterator insert(const_iterator __hint, node_type&& __nh)"},
{"lineNum":" 2102","line":"    {"},
{"lineNum":" 2103","line":"        _LIBCPP_ASSERT(__nh.empty() || __nh.get_allocator() == get_allocator(),"},
{"lineNum":" 2104","line":"            \"node_type with incompatible allocator passed to unordered_multimap::insert()\");"},
{"lineNum":" 2105","line":"        return __table_.template __node_handle_insert_multi<node_type>("},
{"lineNum":" 2106","line":"            __hint.__i_, _VSTD::move(__nh));"},
{"lineNum":" 2107","line":"    }"},
{"lineNum":" 2108","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2109","line":"    node_type extract(key_type const& __key)"},
{"lineNum":" 2110","line":"    {"},
{"lineNum":" 2111","line":"        return __table_.template __node_handle_extract<node_type>(__key);"},
{"lineNum":" 2112","line":"    }"},
{"lineNum":" 2113","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2114","line":"    node_type extract(const_iterator __it)"},
{"lineNum":" 2115","line":"    {"},
{"lineNum":" 2116","line":"        return __table_.template __node_handle_extract<node_type>("},
{"lineNum":" 2117","line":"            __it.__i_);"},
{"lineNum":" 2118","line":"    }"},
{"lineNum":" 2119","line":""},
{"lineNum":" 2120","line":"    template <class _H2, class _P2>"},
{"lineNum":" 2121","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2122","line":"    void merge(unordered_multimap<key_type, mapped_type, _H2, _P2, allocator_type>& __source)"},
{"lineNum":" 2123","line":"    {"},
{"lineNum":" 2124","line":"        _LIBCPP_ASSERT(__source.get_allocator() == get_allocator(),"},
{"lineNum":" 2125","line":"                       \"merging container with incompatible allocator\");"},
{"lineNum":" 2126","line":"        return __table_.__node_handle_merge_multi(__source.__table_);"},
{"lineNum":" 2127","line":"    }"},
{"lineNum":" 2128","line":"    template <class _H2, class _P2>"},
{"lineNum":" 2129","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2130","line":"    void merge(unordered_multimap<key_type, mapped_type, _H2, _P2, allocator_type>&& __source)"},
{"lineNum":" 2131","line":"    {"},
{"lineNum":" 2132","line":"        _LIBCPP_ASSERT(__source.get_allocator() == get_allocator(),"},
{"lineNum":" 2133","line":"                       \"merging container with incompatible allocator\");"},
{"lineNum":" 2134","line":"        return __table_.__node_handle_merge_multi(__source.__table_);"},
{"lineNum":" 2135","line":"    }"},
{"lineNum":" 2136","line":"    template <class _H2, class _P2>"},
{"lineNum":" 2137","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2138","line":"    void merge(unordered_map<key_type, mapped_type, _H2, _P2, allocator_type>& __source)"},
{"lineNum":" 2139","line":"    {"},
{"lineNum":" 2140","line":"        _LIBCPP_ASSERT(__source.get_allocator() == get_allocator(),"},
{"lineNum":" 2141","line":"                       \"merging container with incompatible allocator\");"},
{"lineNum":" 2142","line":"        return __table_.__node_handle_merge_multi(__source.__table_);"},
{"lineNum":" 2143","line":"    }"},
{"lineNum":" 2144","line":"    template <class _H2, class _P2>"},
{"lineNum":" 2145","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2146","line":"    void merge(unordered_map<key_type, mapped_type, _H2, _P2, allocator_type>&& __source)"},
{"lineNum":" 2147","line":"    {"},
{"lineNum":" 2148","line":"        _LIBCPP_ASSERT(__source.get_allocator() == get_allocator(),"},
{"lineNum":" 2149","line":"                       \"merging container with incompatible allocator\");"},
{"lineNum":" 2150","line":"        return __table_.__node_handle_merge_multi(__source.__table_);"},
{"lineNum":" 2151","line":"    }"},
{"lineNum":" 2152","line":"#endif"},
{"lineNum":" 2153","line":""},
{"lineNum":" 2154","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2155","line":"    void swap(unordered_multimap& __u)"},
{"lineNum":" 2156","line":"        _NOEXCEPT_(__is_nothrow_swappable<__table>::value)"},
{"lineNum":" 2157","line":"        {__table_.swap(__u.__table_);}"},
{"lineNum":" 2158","line":""},
{"lineNum":" 2159","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2160","line":"    hasher hash_function() const"},
{"lineNum":" 2161","line":"        {return __table_.hash_function().hash_function();}"},
{"lineNum":" 2162","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2163","line":"    key_equal key_eq() const"},
{"lineNum":" 2164","line":"        {return __table_.key_eq().key_eq();}"},
{"lineNum":" 2165","line":""},
{"lineNum":" 2166","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2167","line":"    iterator       find(const key_type& __k)       {return __table_.find(__k);}"},
{"lineNum":" 2168","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2169","line":"    const_iterator find(const key_type& __k) const {return __table_.find(__k);}"},
{"lineNum":" 2170","line":"    #if _LIBCPP_STD_VER > 17"},
{"lineNum":" 2171","line":"        template <typename _K2>"},
{"lineNum":" 2172","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2173","line":"        _EnableIf<__is_transparent<hasher, _K2>::value && __is_transparent<key_equal, _K2>::value, iterator>"},
{"lineNum":" 2174","line":"        find(const _K2& __k)       {return __table_.find(__k);}"},
{"lineNum":" 2175","line":"        template <typename _K2>"},
{"lineNum":" 2176","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2177","line":"        _EnableIf<__is_transparent<hasher, _K2>::value && __is_transparent<key_equal, _K2>::value, const_iterator>"},
{"lineNum":" 2178","line":"        find(const _K2& __k) const {return __table_.find(__k);}"},
{"lineNum":" 2179","line":"    #endif // _LIBCPP_STD_VER > 17"},
{"lineNum":" 2180","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2181","line":"    size_type count(const key_type& __k) const {return __table_.__count_multi(__k);}"},
{"lineNum":" 2182","line":"    #if _LIBCPP_STD_VER > 17"},
{"lineNum":" 2183","line":"        template <typename _K2>"},
{"lineNum":" 2184","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2185","line":"        _EnableIf<__is_transparent<hasher, _K2>::value && __is_transparent<key_equal, _K2>::value, size_type>"},
{"lineNum":" 2186","line":"        count(const _K2& __k) const {return __table_.__count_multi(__k);}"},
{"lineNum":" 2187","line":"    #endif // _LIBCPP_STD_VER > 17"},
{"lineNum":" 2188","line":"    #if _LIBCPP_STD_VER > 17"},
{"lineNum":" 2189","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2190","line":"        bool contains(const key_type& __k) const {return find(__k) != end();}"},
{"lineNum":" 2191","line":""},
{"lineNum":" 2192","line":"        template <typename _K2>"},
{"lineNum":" 2193","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2194","line":"        _EnableIf<__is_transparent<hasher, _K2>::value && __is_transparent<key_equal, _K2>::value, bool>"},
{"lineNum":" 2195","line":"        contains(const _K2& __k) const {return find(__k) != end();}"},
{"lineNum":" 2196","line":"    #endif // _LIBCPP_STD_VER > 17"},
{"lineNum":" 2197","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2198","line":"    pair<iterator, iterator>             equal_range(const key_type& __k)"},
{"lineNum":" 2199","line":"        {return __table_.__equal_range_multi(__k);}","class":"linePartCov","hits":"2","order":"591","possible_hits":"11",},
{"lineNum":" 2200","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2201","line":"    pair<const_iterator, const_iterator> equal_range(const key_type& __k) const"},
{"lineNum":" 2202","line":"        {return __table_.__equal_range_multi(__k);}"},
{"lineNum":" 2203","line":"    #if _LIBCPP_STD_VER > 17"},
{"lineNum":" 2204","line":"        template <typename _K2>"},
{"lineNum":" 2205","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2206","line":"        _EnableIf<__is_transparent<hasher, _K2>::value && __is_transparent<key_equal, _K2>::value, pair<iterator, iterator>>"},
{"lineNum":" 2207","line":"        equal_range(const _K2& __k)       {return __table_.__equal_range_multi(__k);}"},
{"lineNum":" 2208","line":"        template <typename _K2>"},
{"lineNum":" 2209","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2210","line":"        _EnableIf<__is_transparent<hasher, _K2>::value && __is_transparent<key_equal, _K2>::value, pair<const_iterator, const_iterator>>"},
{"lineNum":" 2211","line":"        equal_range(const _K2& __k) const {return __table_.__equal_range_multi(__k);}"},
{"lineNum":" 2212","line":"    #endif // _LIBCPP_STD_VER > 17"},
{"lineNum":" 2213","line":""},
{"lineNum":" 2214","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2215","line":"    size_type bucket_count() const _NOEXCEPT {return __table_.bucket_count();}"},
{"lineNum":" 2216","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2217","line":"    size_type max_bucket_count() const _NOEXCEPT"},
{"lineNum":" 2218","line":"        {return __table_.max_bucket_count();}"},
{"lineNum":" 2219","line":""},
{"lineNum":" 2220","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2221","line":"    size_type bucket_size(size_type __n) const"},
{"lineNum":" 2222","line":"        {return __table_.bucket_size(__n);}"},
{"lineNum":" 2223","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2224","line":"    size_type bucket(const key_type& __k) const {return __table_.bucket(__k);}"},
{"lineNum":" 2225","line":""},
{"lineNum":" 2226","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2227","line":"    local_iterator       begin(size_type __n)        {return __table_.begin(__n);}"},
{"lineNum":" 2228","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2229","line":"    local_iterator       end(size_type __n)          {return __table_.end(__n);}"},
{"lineNum":" 2230","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2231","line":"    const_local_iterator begin(size_type __n) const  {return __table_.cbegin(__n);}"},
{"lineNum":" 2232","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2233","line":"    const_local_iterator end(size_type __n) const    {return __table_.cend(__n);}"},
{"lineNum":" 2234","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2235","line":"    const_local_iterator cbegin(size_type __n) const {return __table_.cbegin(__n);}"},
{"lineNum":" 2236","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2237","line":"    const_local_iterator cend(size_type __n) const   {return __table_.cend(__n);}"},
{"lineNum":" 2238","line":""},
{"lineNum":" 2239","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2240","line":"    float load_factor() const _NOEXCEPT {return __table_.load_factor();}"},
{"lineNum":" 2241","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2242","line":"    float max_load_factor() const _NOEXCEPT {return __table_.max_load_factor();}"},
{"lineNum":" 2243","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2244","line":"    void max_load_factor(float __mlf) {__table_.max_load_factor(__mlf);}"},
{"lineNum":" 2245","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2246","line":"    void rehash(size_type __n) {__table_.rehash(__n);}"},
{"lineNum":" 2247","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2248","line":"    void reserve(size_type __n) {__table_.reserve(__n);}"},
{"lineNum":" 2249","line":""},
{"lineNum":" 2250","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2251","line":""},
{"lineNum":" 2252","line":"    bool __dereferenceable(const const_iterator* __i) const"},
{"lineNum":" 2253","line":"        {return __table_.__dereferenceable(&__i->__i_);}"},
{"lineNum":" 2254","line":"    bool __decrementable(const const_iterator* __i) const"},
{"lineNum":" 2255","line":"        {return __table_.__decrementable(&__i->__i_);}"},
{"lineNum":" 2256","line":"    bool __addable(const const_iterator* __i, ptrdiff_t __n) const"},
{"lineNum":" 2257","line":"        {return __table_.__addable(&__i->__i_, __n);}"},
{"lineNum":" 2258","line":"    bool __subscriptable(const const_iterator* __i, ptrdiff_t __n) const"},
{"lineNum":" 2259","line":"        {return __table_.__addable(&__i->__i_, __n);}"},
{"lineNum":" 2260","line":""},
{"lineNum":" 2261","line":"#endif // _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2262","line":""},
{"lineNum":" 2263","line":""},
{"lineNum":" 2264","line":"};"},
{"lineNum":" 2265","line":""},
{"lineNum":" 2266","line":"#ifndef _LIBCPP_HAS_NO_DEDUCTION_GUIDES"},
{"lineNum":" 2267","line":"template<class _InputIterator,"},
{"lineNum":" 2268","line":"         class _Hash = hash<__iter_key_type<_InputIterator>>,"},
{"lineNum":" 2269","line":"         class _Pred = equal_to<__iter_key_type<_InputIterator>>,"},
{"lineNum":" 2270","line":"         class _Allocator = allocator<__iter_to_alloc_type<_InputIterator>>,"},
{"lineNum":" 2271","line":"         class = _EnableIf<!__is_allocator<_Hash>::value>,"},
{"lineNum":" 2272","line":"         class = _EnableIf<!is_integral<_Hash>::value>,"},
{"lineNum":" 2273","line":"         class = _EnableIf<!__is_allocator<_Pred>::value>,"},
{"lineNum":" 2274","line":"         class = _EnableIf<__is_allocator<_Allocator>::value>>"},
{"lineNum":" 2275","line":"unordered_multimap(_InputIterator, _InputIterator, typename allocator_traits<_Allocator>::size_type = 0,"},
{"lineNum":" 2276","line":"                   _Hash = _Hash(), _Pred = _Pred(), _Allocator = _Allocator())"},
{"lineNum":" 2277","line":"  -> unordered_multimap<__iter_key_type<_InputIterator>, __iter_mapped_type<_InputIterator>, _Hash, _Pred, _Allocator>;"},
{"lineNum":" 2278","line":""},
{"lineNum":" 2279","line":"template<class _Key, class _Tp, class _Hash = hash<remove_const_t<_Key>>,"},
{"lineNum":" 2280","line":"         class _Pred = equal_to<remove_const_t<_Key>>,"},
{"lineNum":" 2281","line":"         class _Allocator = allocator<pair<const _Key, _Tp>>,"},
{"lineNum":" 2282","line":"         class = _EnableIf<!__is_allocator<_Hash>::value>,"},
{"lineNum":" 2283","line":"         class = _EnableIf<!is_integral<_Hash>::value>,"},
{"lineNum":" 2284","line":"         class = _EnableIf<!__is_allocator<_Pred>::value>,"},
{"lineNum":" 2285","line":"         class = _EnableIf<__is_allocator<_Allocator>::value>>"},
{"lineNum":" 2286","line":"unordered_multimap(initializer_list<pair<_Key, _Tp>>, typename allocator_traits<_Allocator>::size_type = 0,"},
{"lineNum":" 2287","line":"                   _Hash = _Hash(), _Pred = _Pred(), _Allocator = _Allocator())"},
{"lineNum":" 2288","line":"  -> unordered_multimap<remove_const_t<_Key>, _Tp, _Hash, _Pred, _Allocator>;"},
{"lineNum":" 2289","line":""},
{"lineNum":" 2290","line":"template<class _InputIterator, class _Allocator,"},
{"lineNum":" 2291","line":"         class = _EnableIf<__is_allocator<_Allocator>::value>>"},
{"lineNum":" 2292","line":"unordered_multimap(_InputIterator, _InputIterator, typename allocator_traits<_Allocator>::size_type, _Allocator)"},
{"lineNum":" 2293","line":"  -> unordered_multimap<__iter_key_type<_InputIterator>, __iter_mapped_type<_InputIterator>,"},
{"lineNum":" 2294","line":"                        hash<__iter_key_type<_InputIterator>>, equal_to<__iter_key_type<_InputIterator>>, _Allocator>;"},
{"lineNum":" 2295","line":""},
{"lineNum":" 2296","line":"template<class _InputIterator, class _Allocator,"},
{"lineNum":" 2297","line":"         class = _EnableIf<__is_allocator<_Allocator>::value>>"},
{"lineNum":" 2298","line":"unordered_multimap(_InputIterator, _InputIterator, _Allocator)"},
{"lineNum":" 2299","line":"  -> unordered_multimap<__iter_key_type<_InputIterator>, __iter_mapped_type<_InputIterator>,"},
{"lineNum":" 2300","line":"                        hash<__iter_key_type<_InputIterator>>, equal_to<__iter_key_type<_InputIterator>>, _Allocator>;"},
{"lineNum":" 2301","line":""},
{"lineNum":" 2302","line":"template<class _InputIterator, class _Hash, class _Allocator,"},
{"lineNum":" 2303","line":"         class = _EnableIf<!__is_allocator<_Hash>::value>,"},
{"lineNum":" 2304","line":"         class = _EnableIf<!is_integral<_Hash>::value>,"},
{"lineNum":" 2305","line":"         class = _EnableIf<__is_allocator<_Allocator>::value>>"},
{"lineNum":" 2306","line":"unordered_multimap(_InputIterator, _InputIterator, typename allocator_traits<_Allocator>::size_type, _Hash, _Allocator)"},
{"lineNum":" 2307","line":"  -> unordered_multimap<__iter_key_type<_InputIterator>, __iter_mapped_type<_InputIterator>,"},
{"lineNum":" 2308","line":"                        _Hash, equal_to<__iter_key_type<_InputIterator>>, _Allocator>;"},
{"lineNum":" 2309","line":""},
{"lineNum":" 2310","line":"template<class _Key, class _Tp, class _Allocator,"},
{"lineNum":" 2311","line":"         class = _EnableIf<__is_allocator<_Allocator>::value>>"},
{"lineNum":" 2312","line":"unordered_multimap(initializer_list<pair<_Key, _Tp>>, typename allocator_traits<_Allocator>::size_type, _Allocator)"},
{"lineNum":" 2313","line":"  -> unordered_multimap<remove_const_t<_Key>, _Tp,"},
{"lineNum":" 2314","line":"                        hash<remove_const_t<_Key>>,"},
{"lineNum":" 2315","line":"                        equal_to<remove_const_t<_Key>>, _Allocator>;"},
{"lineNum":" 2316","line":""},
{"lineNum":" 2317","line":"template<class _Key, class _Tp, class _Allocator,"},
{"lineNum":" 2318","line":"         class = _EnableIf<__is_allocator<_Allocator>::value>>"},
{"lineNum":" 2319","line":"unordered_multimap(initializer_list<pair<_Key, _Tp>>, _Allocator)"},
{"lineNum":" 2320","line":"  -> unordered_multimap<remove_const_t<_Key>, _Tp,"},
{"lineNum":" 2321","line":"                        hash<remove_const_t<_Key>>,"},
{"lineNum":" 2322","line":"                        equal_to<remove_const_t<_Key>>, _Allocator>;"},
{"lineNum":" 2323","line":""},
{"lineNum":" 2324","line":"template<class _Key, class _Tp, class _Hash, class _Allocator,"},
{"lineNum":" 2325","line":"         class = _EnableIf<!__is_allocator<_Hash>::value>,"},
{"lineNum":" 2326","line":"         class = _EnableIf<!is_integral<_Hash>::value>,"},
{"lineNum":" 2327","line":"         class = _EnableIf<__is_allocator<_Allocator>::value>>"},
{"lineNum":" 2328","line":"unordered_multimap(initializer_list<pair<_Key, _Tp>>, typename allocator_traits<_Allocator>::size_type, _Hash, _Allocator)"},
{"lineNum":" 2329","line":"  -> unordered_multimap<remove_const_t<_Key>, _Tp, _Hash,"},
{"lineNum":" 2330","line":"                        equal_to<remove_const_t<_Key>>, _Allocator>;"},
{"lineNum":" 2331","line":"#endif"},
{"lineNum":" 2332","line":""},
{"lineNum":" 2333","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 2334","line":"unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap("},
{"lineNum":" 2335","line":"        size_type __n, const hasher& __hf, const key_equal& __eql)"},
{"lineNum":" 2336","line":"    : __table_(__hf, __eql)"},
{"lineNum":" 2337","line":"{"},
{"lineNum":" 2338","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2339","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 2340","line":"#endif"},
{"lineNum":" 2341","line":"    __table_.rehash(__n);"},
{"lineNum":" 2342","line":"}"},
{"lineNum":" 2343","line":""},
{"lineNum":" 2344","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 2345","line":"unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap("},
{"lineNum":" 2346","line":"        size_type __n, const hasher& __hf, const key_equal& __eql,"},
{"lineNum":" 2347","line":"        const allocator_type& __a)"},
{"lineNum":" 2348","line":"    : __table_(__hf, __eql, typename __table::allocator_type(__a))"},
{"lineNum":" 2349","line":"{"},
{"lineNum":" 2350","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2351","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 2352","line":"#endif"},
{"lineNum":" 2353","line":"    __table_.rehash(__n);"},
{"lineNum":" 2354","line":"}"},
{"lineNum":" 2355","line":""},
{"lineNum":" 2356","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 2357","line":"template <class _InputIterator>"},
{"lineNum":" 2358","line":"unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap("},
{"lineNum":" 2359","line":"        _InputIterator __first, _InputIterator __last)"},
{"lineNum":" 2360","line":"{"},
{"lineNum":" 2361","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2362","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 2363","line":"#endif"},
{"lineNum":" 2364","line":"    insert(__first, __last);"},
{"lineNum":" 2365","line":"}"},
{"lineNum":" 2366","line":""},
{"lineNum":" 2367","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 2368","line":"template <class _InputIterator>"},
{"lineNum":" 2369","line":"unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap("},
{"lineNum":" 2370","line":"        _InputIterator __first, _InputIterator __last, size_type __n,"},
{"lineNum":" 2371","line":"        const hasher& __hf, const key_equal& __eql)"},
{"lineNum":" 2372","line":"    : __table_(__hf, __eql)"},
{"lineNum":" 2373","line":"{"},
{"lineNum":" 2374","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2375","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 2376","line":"#endif"},
{"lineNum":" 2377","line":"    __table_.rehash(__n);"},
{"lineNum":" 2378","line":"    insert(__first, __last);"},
{"lineNum":" 2379","line":"}"},
{"lineNum":" 2380","line":""},
{"lineNum":" 2381","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 2382","line":"template <class _InputIterator>"},
{"lineNum":" 2383","line":"unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap("},
{"lineNum":" 2384","line":"        _InputIterator __first, _InputIterator __last, size_type __n,"},
{"lineNum":" 2385","line":"        const hasher& __hf, const key_equal& __eql, const allocator_type& __a)"},
{"lineNum":" 2386","line":"    : __table_(__hf, __eql, typename __table::allocator_type(__a))"},
{"lineNum":" 2387","line":"{"},
{"lineNum":" 2388","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2389","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 2390","line":"#endif"},
{"lineNum":" 2391","line":"    __table_.rehash(__n);"},
{"lineNum":" 2392","line":"    insert(__first, __last);"},
{"lineNum":" 2393","line":"}"},
{"lineNum":" 2394","line":""},
{"lineNum":" 2395","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 2396","line":"inline"},
{"lineNum":" 2397","line":"unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap("},
{"lineNum":" 2398","line":"        const allocator_type& __a)"},
{"lineNum":" 2399","line":"    : __table_(typename __table::allocator_type(__a))"},
{"lineNum":" 2400","line":"{"},
{"lineNum":" 2401","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2402","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 2403","line":"#endif"},
{"lineNum":" 2404","line":"}"},
{"lineNum":" 2405","line":""},
{"lineNum":" 2406","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 2407","line":"unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap("},
{"lineNum":" 2408","line":"        const unordered_multimap& __u)"},
{"lineNum":" 2409","line":"    : __table_(__u.__table_)"},
{"lineNum":" 2410","line":"{"},
{"lineNum":" 2411","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2412","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 2413","line":"#endif"},
{"lineNum":" 2414","line":"    __table_.rehash(__u.bucket_count());"},
{"lineNum":" 2415","line":"    insert(__u.begin(), __u.end());"},
{"lineNum":" 2416","line":"}"},
{"lineNum":" 2417","line":""},
{"lineNum":" 2418","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 2419","line":"unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap("},
{"lineNum":" 2420","line":"        const unordered_multimap& __u, const allocator_type& __a)"},
{"lineNum":" 2421","line":"    : __table_(__u.__table_, typename __table::allocator_type(__a))"},
{"lineNum":" 2422","line":"{"},
{"lineNum":" 2423","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2424","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 2425","line":"#endif"},
{"lineNum":" 2426","line":"    __table_.rehash(__u.bucket_count());"},
{"lineNum":" 2427","line":"    insert(__u.begin(), __u.end());"},
{"lineNum":" 2428","line":"}"},
{"lineNum":" 2429","line":""},
{"lineNum":" 2430","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 2431","line":""},
{"lineNum":" 2432","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 2433","line":"inline"},
{"lineNum":" 2434","line":"unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap("},
{"lineNum":" 2435","line":"        unordered_multimap&& __u)"},
{"lineNum":" 2436","line":"    _NOEXCEPT_(is_nothrow_move_constructible<__table>::value)"},
{"lineNum":" 2437","line":"    : __table_(_VSTD::move(__u.__table_))"},
{"lineNum":" 2438","line":"{"},
{"lineNum":" 2439","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2440","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 2441","line":"    __get_db()->swap(this, &__u);"},
{"lineNum":" 2442","line":"#endif"},
{"lineNum":" 2443","line":"}"},
{"lineNum":" 2444","line":""},
{"lineNum":" 2445","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 2446","line":"unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap("},
{"lineNum":" 2447","line":"        unordered_multimap&& __u, const allocator_type& __a)"},
{"lineNum":" 2448","line":"    : __table_(_VSTD::move(__u.__table_), typename __table::allocator_type(__a))"},
{"lineNum":" 2449","line":"{"},
{"lineNum":" 2450","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2451","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 2452","line":"#endif"},
{"lineNum":" 2453","line":"    if (__a != __u.get_allocator())"},
{"lineNum":" 2454","line":"    {"},
{"lineNum":" 2455","line":"        iterator __i = __u.begin();"},
{"lineNum":" 2456","line":"        while (__u.size() != 0)"},
{"lineNum":" 2457","line":"        {"},
{"lineNum":" 2458","line":"            __table_.__insert_multi("},
{"lineNum":" 2459","line":"                __u.__table_.remove((__i++).__i_)->__value_.__move());"},
{"lineNum":" 2460","line":"        }"},
{"lineNum":" 2461","line":"    }"},
{"lineNum":" 2462","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2463","line":"    else"},
{"lineNum":" 2464","line":"        __get_db()->swap(this, &__u);"},
{"lineNum":" 2465","line":"#endif"},
{"lineNum":" 2466","line":"}"},
{"lineNum":" 2467","line":""},
{"lineNum":" 2468","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 2469","line":"unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap("},
{"lineNum":" 2470","line":"        initializer_list<value_type> __il)"},
{"lineNum":" 2471","line":"{"},
{"lineNum":" 2472","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2473","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 2474","line":"#endif"},
{"lineNum":" 2475","line":"    insert(__il.begin(), __il.end());"},
{"lineNum":" 2476","line":"}"},
{"lineNum":" 2477","line":""},
{"lineNum":" 2478","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 2479","line":"unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap("},
{"lineNum":" 2480","line":"        initializer_list<value_type> __il, size_type __n, const hasher& __hf,"},
{"lineNum":" 2481","line":"        const key_equal& __eql)"},
{"lineNum":" 2482","line":"    : __table_(__hf, __eql)"},
{"lineNum":" 2483","line":"{"},
{"lineNum":" 2484","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2485","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 2486","line":"#endif"},
{"lineNum":" 2487","line":"    __table_.rehash(__n);"},
{"lineNum":" 2488","line":"    insert(__il.begin(), __il.end());"},
{"lineNum":" 2489","line":"}"},
{"lineNum":" 2490","line":""},
{"lineNum":" 2491","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 2492","line":"unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap("},
{"lineNum":" 2493","line":"        initializer_list<value_type> __il, size_type __n, const hasher& __hf,"},
{"lineNum":" 2494","line":"        const key_equal& __eql, const allocator_type& __a)"},
{"lineNum":" 2495","line":"    : __table_(__hf, __eql, typename __table::allocator_type(__a))"},
{"lineNum":" 2496","line":"{"},
{"lineNum":" 2497","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2498","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 2499","line":"#endif"},
{"lineNum":" 2500","line":"    __table_.rehash(__n);"},
{"lineNum":" 2501","line":"    insert(__il.begin(), __il.end());"},
{"lineNum":" 2502","line":"}"},
{"lineNum":" 2503","line":""},
{"lineNum":" 2504","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 2505","line":"inline"},
{"lineNum":" 2506","line":"unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>&"},
{"lineNum":" 2507","line":"unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::operator=(unordered_multimap&& __u)"},
{"lineNum":" 2508","line":"    _NOEXCEPT_(is_nothrow_move_assignable<__table>::value)"},
{"lineNum":" 2509","line":"{"},
{"lineNum":" 2510","line":"    __table_ = _VSTD::move(__u.__table_);"},
{"lineNum":" 2511","line":"    return *this;"},
{"lineNum":" 2512","line":"}"},
{"lineNum":" 2513","line":""},
{"lineNum":" 2514","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 2515","line":"inline"},
{"lineNum":" 2516","line":"unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>&"},
{"lineNum":" 2517","line":"unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::operator=("},
{"lineNum":" 2518","line":"        initializer_list<value_type> __il)"},
{"lineNum":" 2519","line":"{"},
{"lineNum":" 2520","line":"    __table_.__assign_multi(__il.begin(), __il.end());"},
{"lineNum":" 2521","line":"    return *this;"},
{"lineNum":" 2522","line":"}"},
{"lineNum":" 2523","line":""},
{"lineNum":" 2524","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 2525","line":""},
{"lineNum":" 2526","line":""},
{"lineNum":" 2527","line":""},
{"lineNum":" 2528","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 2529","line":"template <class _InputIterator>"},
{"lineNum":" 2530","line":"inline"},
{"lineNum":" 2531","line":"void"},
{"lineNum":" 2532","line":"unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::insert(_InputIterator __first,"},
{"lineNum":" 2533","line":"                                                            _InputIterator __last)"},
{"lineNum":" 2534","line":"{"},
{"lineNum":" 2535","line":"    for (; __first != __last; ++__first)"},
{"lineNum":" 2536","line":"        __table_.__insert_multi(*__first);"},
{"lineNum":" 2537","line":"}"},
{"lineNum":" 2538","line":""},
{"lineNum":" 2539","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 2540","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2541","line":"void"},
{"lineNum":" 2542","line":"swap(unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,"},
{"lineNum":" 2543","line":"     unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)"},
{"lineNum":" 2544","line":"    _NOEXCEPT_(_NOEXCEPT_(__x.swap(__y)))"},
{"lineNum":" 2545","line":"{"},
{"lineNum":" 2546","line":"    __x.swap(__y);"},
{"lineNum":" 2547","line":"}"},
{"lineNum":" 2548","line":""},
{"lineNum":" 2549","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":" 2550","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc,"},
{"lineNum":" 2551","line":"          class _Predicate>"},
{"lineNum":" 2552","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2553","line":"    typename unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::size_type"},
{"lineNum":" 2554","line":"    erase_if(unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __c,"},
{"lineNum":" 2555","line":"             _Predicate __pred) {"},
{"lineNum":" 2556","line":"  return _VSTD::__libcpp_erase_if_container(__c, __pred);"},
{"lineNum":" 2557","line":"}"},
{"lineNum":" 2558","line":"#endif"},
{"lineNum":" 2559","line":""},
{"lineNum":" 2560","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 2561","line":"bool"},
{"lineNum":" 2562","line":"operator==(const unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,"},
{"lineNum":" 2563","line":"           const unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)"},
{"lineNum":" 2564","line":"{"},
{"lineNum":" 2565","line":"    if (__x.size() != __y.size())"},
{"lineNum":" 2566","line":"        return false;"},
{"lineNum":" 2567","line":"    typedef typename unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::const_iterator"},
{"lineNum":" 2568","line":"                                                                 const_iterator;"},
{"lineNum":" 2569","line":"    typedef pair<const_iterator, const_iterator> _EqRng;"},
{"lineNum":" 2570","line":"    for (const_iterator __i = __x.begin(), __ex = __x.end(); __i != __ex;)"},
{"lineNum":" 2571","line":"    {"},
{"lineNum":" 2572","line":"        _EqRng __xeq = __x.equal_range(__i->first);"},
{"lineNum":" 2573","line":"        _EqRng __yeq = __y.equal_range(__i->first);"},
{"lineNum":" 2574","line":"        if (_VSTD::distance(__xeq.first, __xeq.second) !="},
{"lineNum":" 2575","line":"            _VSTD::distance(__yeq.first, __yeq.second) ||"},
{"lineNum":" 2576","line":"                  !_VSTD::is_permutation(__xeq.first, __xeq.second, __yeq.first))"},
{"lineNum":" 2577","line":"            return false;"},
{"lineNum":" 2578","line":"        __i = __xeq.second;"},
{"lineNum":" 2579","line":"    }"},
{"lineNum":" 2580","line":"    return true;"},
{"lineNum":" 2581","line":"}"},
{"lineNum":" 2582","line":""},
{"lineNum":" 2583","line":"template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 2584","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2585","line":"bool"},
{"lineNum":" 2586","line":"operator!=(const unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,"},
{"lineNum":" 2587","line":"           const unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)"},
{"lineNum":" 2588","line":"{"},
{"lineNum":" 2589","line":"    return !(__x == __y);"},
{"lineNum":" 2590","line":"}"},
{"lineNum":" 2591","line":""},
{"lineNum":" 2592","line":"_LIBCPP_END_NAMESPACE_STD"},
{"lineNum":" 2593","line":""},
{"lineNum":" 2594","line":"#endif // _LIBCPP_UNORDERED_MAP"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 20, "covered" : 17,};
var merged_data = [];
