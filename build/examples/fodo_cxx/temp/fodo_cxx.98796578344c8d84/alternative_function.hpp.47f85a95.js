var data = {lines:[
{"lineNum":"    1","line":"/*============================================================================="},
{"lineNum":"    2","line":"    Copyright (c) 2001-2011 Hartmut Kaiser"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"    Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    5","line":"    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    6","line":"=============================================================================*/"},
{"lineNum":"    7","line":"#if !defined(SPIRIT_ALTERNATIVE_FUNCTION_APRIL_23_2007_1046AM)"},
{"lineNum":"    8","line":"#define SPIRIT_ALTERNATIVE_FUNCTION_APRIL_23_2007_1046AM"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#if defined(_MSC_VER)"},
{"lineNum":"   11","line":"#pragma once"},
{"lineNum":"   12","line":"#endif"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"#include <boost/spirit/home/qi/domain.hpp>"},
{"lineNum":"   15","line":"#include <boost/spirit/home/qi/detail/assign_to.hpp>"},
{"lineNum":"   16","line":"#include <boost/spirit/home/support/unused.hpp>"},
{"lineNum":"   17","line":"#include <boost/spirit/home/qi/detail/attributes.hpp>"},
{"lineNum":"   18","line":"#include <boost/variant.hpp>"},
{"lineNum":"   19","line":"#include <boost/mpl/bool.hpp>"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"namespace boost { namespace spirit { namespace qi { namespace detail"},
{"lineNum":"   22","line":"{"},
{"lineNum":"   23","line":"    template <typename Variant, typename Expected>"},
{"lineNum":"   24","line":"    struct find_substitute"},
{"lineNum":"   25","line":"    {"},
{"lineNum":"   26","line":"        // Get the type from the variant that can be a substitute for Expected."},
{"lineNum":"   27","line":"        // If none is found, just return Expected"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"        typedef Variant variant_type;"},
{"lineNum":"   30","line":"        typedef typename variant_type::types types;"},
{"lineNum":"   31","line":"        typedef typename mpl::end<types>::type end;"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"        typedef typename mpl::find<types, Expected>::type iter_1;"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"        typedef typename"},
{"lineNum":"   36","line":"            mpl::eval_if<"},
{"lineNum":"   37","line":"                is_same<iter_1, end>,"},
{"lineNum":"   38","line":"                mpl::find_if<types, traits::is_substitute<mpl::_1, Expected> >,"},
{"lineNum":"   39","line":"                mpl::identity<iter_1>"},
{"lineNum":"   40","line":"            >::type"},
{"lineNum":"   41","line":"        iter;"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"        typedef typename"},
{"lineNum":"   44","line":"            mpl::eval_if<"},
{"lineNum":"   45","line":"                is_same<iter, end>,"},
{"lineNum":"   46","line":"                mpl::identity<Expected>,"},
{"lineNum":"   47","line":"                mpl::deref<iter>"},
{"lineNum":"   48","line":"            >::type"},
{"lineNum":"   49","line":"        type;"},
{"lineNum":"   50","line":"    };"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"    template <typename Iterator, typename Context, typename Skipper,"},
{"lineNum":"   53","line":"        typename Attribute>"},
{"lineNum":"   54","line":"    struct alternative_function"},
{"lineNum":"   55","line":"    {"},
{"lineNum":"   56","line":"        alternative_function("},
{"lineNum":"   57","line":"            Iterator& first_, Iterator const& last_, Context& context_,"},
{"lineNum":"   58","line":"            Skipper const& skipper_, Attribute& attr_)"},
{"lineNum":"   59","line":"          : first(first_), last(last_), context(context_), skipper(skipper_),"},
{"lineNum":"   60","line":"            attr(attr_)"},
{"lineNum":"   61","line":"        {"},
{"lineNum":"   62","line":"        }"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"        template <typename Component>"},
{"lineNum":"   65","line":"        bool call(Component const& component, mpl::true_) const"},
{"lineNum":"   66","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   67","line":"            // if Attribute is not a variant, then pass it as-is"},
{"lineNum":"   68","line":"            return component.parse(first, last, context, skipper, attr);","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"   69","line":"        }"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"        template <typename Component>"},
{"lineNum":"   72","line":"        bool call_optional_or_variant(Component const& component, mpl::true_) const"},
{"lineNum":"   73","line":"        {"},
{"lineNum":"   74","line":"            // If Attribute is an optional, then create an attribute for the Component"},
{"lineNum":"   75","line":"            // with the type optional::value_type. If the expected attribute is unused type,"},
{"lineNum":"   76","line":"            // use it instead."},
{"lineNum":"   77","line":"            typedef typename"},
{"lineNum":"   78","line":"                traits::attribute_of<Component, Context, Iterator>::type"},
{"lineNum":"   79","line":"            expected_type;"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"            typename mpl::if_<"},
{"lineNum":"   82","line":"                is_same<expected_type, unused_type>,"},
{"lineNum":"   83","line":"                unused_type,"},
{"lineNum":"   84","line":"                typename Attribute::value_type>::type"},
{"lineNum":"   85","line":"            val;"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"            if (component.parse(first, last, context, skipper, val))"},
{"lineNum":"   88","line":"            {"},
{"lineNum":"   89","line":"                traits::assign_to(val, attr);"},
{"lineNum":"   90","line":"                return true;"},
{"lineNum":"   91","line":"            }"},
{"lineNum":"   92","line":"            return false;"},
{"lineNum":"   93","line":"        }"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"        template <typename Component>"},
{"lineNum":"   96","line":"        bool call_variant(Component const& component, mpl::false_) const"},
{"lineNum":"   97","line":"        {"},
{"lineNum":"   98","line":"            // If Attribute is a variant, then search the variant types for a"},
{"lineNum":"   99","line":"            // suitable substitute type."},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"            typename"},
{"lineNum":"  102","line":"                find_substitute<Attribute,"},
{"lineNum":"  103","line":"                    typename traits::attribute_of<Component, Context, Iterator>::type"},
{"lineNum":"  104","line":"                >::type"},
{"lineNum":"  105","line":"            val;"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"            if (component.parse(first, last, context, skipper, val))"},
{"lineNum":"  108","line":"            {"},
{"lineNum":"  109","line":"                traits::assign_to(val, attr);"},
{"lineNum":"  110","line":"                return true;"},
{"lineNum":"  111","line":"            }"},
{"lineNum":"  112","line":"            return false;"},
{"lineNum":"  113","line":"        }"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"        template <typename Component>"},
{"lineNum":"  116","line":"        bool call_variant(Component const& component, mpl::true_) const"},
{"lineNum":"  117","line":"        {"},
{"lineNum":"  118","line":"            // If Attribute is a variant and the expected attribute is"},
{"lineNum":"  119","line":"            // the same type (pass the variant as-is)."},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"            return component.parse(first, last, context, skipper, attr);"},
{"lineNum":"  122","line":"        }"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"        template <typename Component>"},
{"lineNum":"  125","line":"        bool call_optional_or_variant(Component const& component, mpl::false_) const"},
{"lineNum":"  126","line":"        {"},
{"lineNum":"  127","line":"            // Attribute is a variant..."},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"            typedef typename"},
{"lineNum":"  130","line":"                traits::attribute_of<Component, Context, Iterator>::type"},
{"lineNum":"  131","line":"            expected;"},
{"lineNum":"  132","line":"            return call_variant(component,"},
{"lineNum":"  133","line":"                is_same<Attribute, expected>());"},
{"lineNum":"  134","line":"        }"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"        template <typename Component>"},
{"lineNum":"  137","line":"        bool call(Component const& component, mpl::false_) const"},
{"lineNum":"  138","line":"        {"},
{"lineNum":"  139","line":"            return call_optional_or_variant("},
{"lineNum":"  140","line":"                component, spirit::traits::not_is_variant<Attribute, qi::domain>());"},
{"lineNum":"  141","line":"        }"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"        template <typename Component>"},
{"lineNum":"  144","line":"        bool call_unused(Component const& component, mpl::true_) const"},
{"lineNum":"  145","line":"        {"},
{"lineNum":"  146","line":"            // return true if the parser succeeds"},
{"lineNum":"  147","line":"            return call(component,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  148","line":"                mpl::and_<"},
{"lineNum":"  149","line":"                    spirit::traits::not_is_variant<Attribute, qi::domain>,"},
{"lineNum":"  150","line":"                    spirit::traits::not_is_optional<Attribute, qi::domain>"},
{"lineNum":"  151","line":"                >());"},
{"lineNum":"  152","line":"        }"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"        template <typename Component>"},
{"lineNum":"  155","line":"        bool call_unused(Component const& component, mpl::false_) const"},
{"lineNum":"  156","line":"        {"},
{"lineNum":"  157","line":"            return component.parse(first, last, context, skipper, unused);"},
{"lineNum":"  158","line":"        }"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"        template <typename Component>"},
{"lineNum":"  161","line":"        bool operator()(Component const& component) const"},
{"lineNum":"  162","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  163","line":"            // return true if the parser succeeds"},
{"lineNum":"  164","line":"            typedef typename traits::not_is_unused<"},
{"lineNum":"  165","line":"                typename traits::attribute_of<Component, Context, Iterator>::type"},
{"lineNum":"  166","line":"            >::type predicate;"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"            return call_unused(component, predicate());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  169","line":"        }"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"        Iterator& first;"},
{"lineNum":"  172","line":"        Iterator const& last;"},
{"lineNum":"  173","line":"        Context& context;"},
{"lineNum":"  174","line":"        Skipper const& skipper;"},
{"lineNum":"  175","line":"        Attribute& attr;"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"    private:"},
{"lineNum":"  178","line":"        // silence MSVC warning C4512: assignment operator could not be generated"},
{"lineNum":"  179","line":"        alternative_function& operator= (alternative_function const&);"},
{"lineNum":"  180","line":"    };"},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"    template <typename Iterator, typename Context, typename Skipper>"},
{"lineNum":"  183","line":"    struct alternative_function<Iterator, Context, Skipper, unused_type const>"},
{"lineNum":"  184","line":"    {"},
{"lineNum":"  185","line":"        alternative_function("},
{"lineNum":"  186","line":"            Iterator& first_, Iterator const& last_, Context& context_,"},
{"lineNum":"  187","line":"            Skipper const& skipper_, unused_type)"},
{"lineNum":"  188","line":"          : first(first_), last(last_), context(context_), skipper(skipper_)"},
{"lineNum":"  189","line":"        {"},
{"lineNum":"  190","line":"        }"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"        template <typename Component>"},
{"lineNum":"  193","line":"        bool operator()(Component const& component) const"},
{"lineNum":"  194","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  195","line":"            // return true if the parser succeeds"},
{"lineNum":"  196","line":"            return component.parse(first, last, context, skipper,","class":"lineNoCov","hits":"0","possible_hits":"32",},
{"lineNum":"  197","line":"                unused);"},
{"lineNum":"  198","line":"        }"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"        Iterator& first;"},
{"lineNum":"  201","line":"        Iterator const& last;"},
{"lineNum":"  202","line":"        Context& context;"},
{"lineNum":"  203","line":"        Skipper const& skipper;"},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"    private:"},
{"lineNum":"  206","line":"        // silence MSVC warning C4512: assignment operator could not be generated"},
{"lineNum":"  207","line":"        alternative_function& operator= (alternative_function const&);"},
{"lineNum":"  208","line":"    };"},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"}}}}"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 7, "covered" : 0,};
var merged_data = [];
