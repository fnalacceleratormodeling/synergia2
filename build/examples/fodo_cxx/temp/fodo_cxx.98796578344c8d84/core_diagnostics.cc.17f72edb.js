var data = {lines:[
{"lineNum":"    1","line":"#include \"core_diagnostics.h\""},
{"lineNum":"    2","line":"#include <cmath>"},
{"lineNum":"    3","line":"//#include \"Eigen/Core\""},
{"lineNum":"    4","line":"//#include \"Eigen/LU\""},
{"lineNum":"    5","line":"#include <stdexcept>"},
{"lineNum":"    6","line":"#include \"synergia/foundation/physical_constants.h\""},
{"lineNum":"    7","line":"#include \"synergia/foundation/math_constants.h\""},
{"lineNum":"    8","line":"#include \"synergia/utils/logger.h\""},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#include <functional>"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"//using namespace Eigen;"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"#if 0"},
{"lineNum":"   15","line":"// note: cannot get the template F to work with CUDA"},
{"lineNum":"   16","line":"//"},
{"lineNum":"   17","line":"template<typename F, size_t... I>"},
{"lineNum":"   18","line":"struct particle_reducer"},
{"lineNum":"   19","line":"{"},
{"lineNum":"   20","line":"    typedef double value_type[];"},
{"lineNum":"   21","line":"    typedef Particles::size_type size_type;"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"    constexpr size_type value_count;"},
{"lineNum":"   24","line":"    F f;"},
{"lineNum":"   25","line":"    ConstParticles p;"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"    particle_reducer(F f, ConstParticles const & parts)"},
{"lineNum":"   28","line":"        : value_count(sizeof...(I)), f(f), p(parts)"},
{"lineNum":"   29","line":"    { }"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"    KOKKOS_INLINE_FUNCTION void"},
{"lineNum":"   32","line":"    operator() (const size_type i, value_type sum) const"},
{"lineNum":"   33","line":"    {"},
{"lineNum":"   34","line":"        //sum[0] += f(p, i, 0);"},
{"lineNum":"   35","line":"        //sum[2] += f(p, i, 2);"},
{"lineNum":"   36","line":"        //sum[4] += f(p, i, 4);"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"        // it works, pros? cons?"},
{"lineNum":"   39","line":"        //(void)(std::initializer_list<double>{ (sum[I] += f(p, i, I))... } );"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"        // only with c++17"},
{"lineNum":"   42","line":"        //((sum[I] += f(p, i, I)),...);"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"        constexpr std::array<size_t, sizeof...(I)> indices{{I...}};"},
{"lineNum":"   45","line":"        for (size_type j=0; j<value_count; ++j) sum[j] += f(p, i, indices[j]);"},
{"lineNum":"   46","line":"    }"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"    KOKKOS_INLINE_FUNCTION void"},
{"lineNum":"   49","line":"    join(volatile value_type dst, const volatile value_type src) const"},
{"lineNum":"   50","line":"    {"},
{"lineNum":"   51","line":"        for (size_type j=0; j<value_count; ++j) dst[j] += src[j];"},
{"lineNum":"   52","line":"    }"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"    KOKKOS_INLINE_FUNCTION void"},
{"lineNum":"   55","line":"    init(value_type sum) const"},
{"lineNum":"   56","line":"    {"},
{"lineNum":"   57","line":"        for (size_type j=0; j<value_count; ++j) sum[j] = 0.0;"},
{"lineNum":"   58","line":"    }"},
{"lineNum":"   59","line":"};"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"using p_fun_t = double(ConstParticles const &, int, int);"},
{"lineNum":"   62","line":"using fun_t = std::function<double(ConstParticles const &, int, int)>;"},
{"lineNum":"   63","line":"#endif"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"namespace core_diagnostics_impl"},
{"lineNum":"   66","line":"{"},
{"lineNum":"   67","line":"    struct mean_tag   { constexpr static int size = 6; };"},
{"lineNum":"   68","line":"    struct abs_mean_tag { constexpr static int size = 6; };"},
{"lineNum":"   69","line":"    struct z_mean_tag { constexpr static int size = 1; };"},
{"lineNum":"   70","line":"    struct std_tag    { constexpr static int size = 6; };"},
{"lineNum":"   71","line":"    struct min_tag    { constexpr static int size = 3; };"},
{"lineNum":"   72","line":"    struct max_tag    { constexpr static int size = 3; };"},
{"lineNum":"   73","line":"    struct mom2_tag   { constexpr static int size = 36; };"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"    template<typename F>"},
{"lineNum":"   76","line":"    struct particle_reducer","class":"lineNoCov","hits":"0","possible_hits":"35",},
{"lineNum":"   77","line":"    {"},
{"lineNum":"   78","line":"        typedef double value_type[];"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"        const int value_count = F::size;","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   81","line":"        ConstParticles p;"},
{"lineNum":"   82","line":"        ConstParticleMasks masks;"},
{"lineNum":"   83","line":"        karray1d_dev dev_mean;"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"        particle_reducer("},
{"lineNum":"   86","line":"                ConstParticles const & p,"},
{"lineNum":"   87","line":"                ConstParticleMasks const & masks,"},
{"lineNum":"   88","line":"                karray1d const & mean = karray1d(\"mean\", 6) )"},
{"lineNum":"   89","line":"            : p(p), masks(masks), dev_mean(\"dev_mean\", 6)","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   90","line":"        { Kokkos::deep_copy(dev_mean, mean); }","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   93","line":"        void init(value_type dst) const"},
{"lineNum":"   94","line":"        { for (int j=0; j<value_count; ++j) dst[j] = 0.0; }","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   97","line":"        void join(volatile value_type dst, const volatile value_type src) const"},
{"lineNum":"   98","line":"        { for (int j=0; j<value_count; ++j) dst[j] += src[j]; }","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  101","line":"        void operator() (const int i, value_type sum) const;"},
{"lineNum":"  102","line":"    };"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"    // init"},
{"lineNum":"  105","line":"    template<>"},
{"lineNum":"  106","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  107","line":"    void particle_reducer<min_tag>::init(value_type dst) const"},
{"lineNum":"  108","line":"    { for (int j=0; j<value_count; ++j) dst[j] = 1e100; }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"    template<>"},
{"lineNum":"  111","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  112","line":"    void particle_reducer<max_tag>::init(value_type dst) const"},
{"lineNum":"  113","line":"    { for (int j=0; j<value_count; ++j) dst[j] = -1e100; }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"    // join"},
{"lineNum":"  116","line":"    template<>"},
{"lineNum":"  117","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  118","line":"    void particle_reducer<min_tag>::join(volatile value_type dst,"},
{"lineNum":"  119","line":"            const volatile value_type src) const"},
{"lineNum":"  120","line":"    {"},
{"lineNum":"  121","line":"        for (int j=0; j<value_count; ++j)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  122","line":"            if (dst[j] > src[j]) dst[j] = src[j];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  123","line":"    }"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"    template<>"},
{"lineNum":"  126","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  127","line":"    void particle_reducer<max_tag>::join(volatile value_type dst,"},
{"lineNum":"  128","line":"            const volatile value_type src) const"},
{"lineNum":"  129","line":"    {"},
{"lineNum":"  130","line":"        for (int j=0; j<value_count; ++j)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  131","line":"            if (dst[j] < src[j]) dst[j] = src[j];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  132","line":"    }"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"    // operator()"},
{"lineNum":"  135","line":"    template<>"},
{"lineNum":"  136","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  137","line":"    void particle_reducer<mean_tag>::operator()   (const int i, value_type sum) const"},
{"lineNum":"  138","line":"    {"},
{"lineNum":"  139","line":"        if (masks(i))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  140","line":"            for (int j=0; j<value_count; ++j) sum[j] += p(i, j);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  141","line":"    }"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"    template<>"},
{"lineNum":"  144","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  145","line":"    void particle_reducer<abs_mean_tag>::operator()   (const int i, value_type sum) const"},
{"lineNum":"  146","line":"    {"},
{"lineNum":"  147","line":"        if (masks(i))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  148","line":"            for (int j=0; j<value_count; ++j) sum[j] += fabs(p(i, j));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  149","line":"    }"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"    template<>"},
{"lineNum":"  152","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  153","line":"    void particle_reducer<z_mean_tag>::operator() (const int i, value_type sum) const"},
{"lineNum":"  154","line":"    {"},
{"lineNum":"  155","line":"        if (masks(i)) sum[0] += p(i, 4);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  156","line":"    }"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"    template<>"},
{"lineNum":"  159","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  160","line":"    void particle_reducer<std_tag>::operator()    (const int i, value_type sum) const"},
{"lineNum":"  161","line":"    {"},
{"lineNum":"  162","line":"        if (masks(i))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  163","line":"            for (int j=0; j<value_count; ++j)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  164","line":"                sum[j] += (p(i, j) - dev_mean(j)) * (p(i, j) - dev_mean(j));","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  165","line":"    }"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"    template<>"},
{"lineNum":"  168","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  169","line":"    void particle_reducer<min_tag>::operator()    (const int i, value_type min) const"},
{"lineNum":"  170","line":"    {"},
{"lineNum":"  171","line":"        if (masks(i))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  172","line":"        {"},
{"lineNum":"  173","line":"            min[0] = (p(i,0) < min[0]) ? p(i,0) : min[0];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  174","line":"            min[1] = (p(i,2) < min[1]) ? p(i,2) : min[1];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  175","line":"            min[2] = (p(i,4) < min[2]) ? p(i,4) : min[2];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"            //if (p(i,0) < min[0]) min[0] = p(i,0);"},
{"lineNum":"  178","line":"            //if (p(i,2) < min[1]) min[1] = p(i,2);"},
{"lineNum":"  179","line":"            //if (p(i,4) < min[2]) min[2] = p(i,4);"},
{"lineNum":"  180","line":"        }"},
{"lineNum":"  181","line":"    }"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"    template<>"},
{"lineNum":"  184","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  185","line":"    void particle_reducer<max_tag>::operator()    (const int i, value_type max) const"},
{"lineNum":"  186","line":"    {"},
{"lineNum":"  187","line":"        if (masks(i))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  188","line":"        {"},
{"lineNum":"  189","line":"            max[0] = (p(i,0) > max[0]) ? p(i,0) : max[0];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  190","line":"            max[1] = (p(i,2) > max[1]) ? p(i,2) : max[1];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  191","line":"            max[2] = (p(i,4) > max[2]) ? p(i,4) : max[2];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"            //if (p(i,0) > max[0]) max[0] = p(i,0);"},
{"lineNum":"  194","line":"            //if (p(i,2) > max[1]) max[1] = p(i,2);"},
{"lineNum":"  195","line":"            //if (p(i,4) > max[2]) max[2] = p(i,4);"},
{"lineNum":"  196","line":"        }"},
{"lineNum":"  197","line":"    }"},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"    template<>"},
{"lineNum":"  201","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  202","line":"    void particle_reducer<mom2_tag>::operator()   (const int i, value_type sum) const"},
{"lineNum":"  203","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  204","line":"        if (masks(i))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  205","line":"        {"},
{"lineNum":"  206","line":"            for (int j=0; j<6; ++j)"},
{"lineNum":"  207","line":"            {"},
{"lineNum":"  208","line":"                double diff_j = p(i, j) - dev_mean(j);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  209","line":"                for (int k=0; k<=j; ++k)"},
{"lineNum":"  210","line":"                {"},
{"lineNum":"  211","line":"                    double diff_k = p(i, k) - dev_mean(k);","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"  212","line":"                    sum[j*6+k] += diff_j * diff_k;","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":"  213","line":"                }"},
{"lineNum":"  214","line":"            }"},
{"lineNum":"  215","line":"        }"},
{"lineNum":"  216","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  217","line":"}"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"karray1d"},
{"lineNum":"  220","line":"Core_diagnostics::calculate_mean(Bunch const & bunch)"},
{"lineNum":"  221","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  222","line":"    using core_diagnostics_impl::particle_reducer;"},
{"lineNum":"  223","line":"    using core_diagnostics_impl::mean_tag;"},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"    karray1d mean(\"mean\", 6);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"    auto particles = bunch.get_local_particles();"},
{"lineNum":"  228","line":"    auto masks = bunch.get_local_particle_masks();"},
{"lineNum":"  229","line":"    const int npart = bunch.size();"},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"    particle_reducer<mean_tag> pr(particles, masks);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  232","line":"    Kokkos::parallel_reduce(\"cal_mean\", npart, pr, mean.data());"},
{"lineNum":"  233","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"    MPI_Allreduce(MPI_IN_PLACE, mean.data(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  236","line":"            6, MPI_DOUBLE, MPI_SUM, bunch.get_comm());"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"    for (int i=0; i<6; ++i)"},
{"lineNum":"  239","line":"        mean(i) /= bunch.get_total_num();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"    return mean;"},
{"lineNum":"  242","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"double"},
{"lineNum":"  245","line":"Core_diagnostics::calculate_z_mean(Bunch const& bunch)"},
{"lineNum":"  246","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  247","line":"    using core_diagnostics_impl::particle_reducer;"},
{"lineNum":"  248","line":"    using core_diagnostics_impl::z_mean_tag;"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"    double mean = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"    auto particles = bunch.get_local_particles();"},
{"lineNum":"  253","line":"    auto masks = bunch.get_local_particle_masks();"},
{"lineNum":"  254","line":"    const int npart = bunch.size();"},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"    particle_reducer<z_mean_tag> pr(particles, masks);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  257","line":"    Kokkos::parallel_reduce(npart, pr, &mean);"},
{"lineNum":"  258","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"    MPI_Allreduce(MPI_IN_PLACE, &mean,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  261","line":"            1, MPI_DOUBLE, MPI_SUM, bunch.get_comm());"},
{"lineNum":"  262","line":""},
{"lineNum":"  263","line":"    mean = mean / bunch.get_total_num();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"    return mean;"},
{"lineNum":"  266","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  267","line":""},
{"lineNum":"  268","line":"karray1d"},
{"lineNum":"  269","line":"Core_diagnostics::calculate_abs_mean(Bunch const & bunch)"},
{"lineNum":"  270","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  271","line":"    using core_diagnostics_impl::particle_reducer;"},
{"lineNum":"  272","line":"    using core_diagnostics_impl::abs_mean_tag;"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"    karray1d abs_mean(\"abs_mean\", 6);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"    auto particles = bunch.get_local_particles();"},
{"lineNum":"  277","line":"    auto masks = bunch.get_local_particle_masks();"},
{"lineNum":"  278","line":"    const int npart = bunch.size();"},
{"lineNum":"  279","line":""},
{"lineNum":"  280","line":"    particle_reducer<abs_mean_tag> pr(particles, masks);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  281","line":"    Kokkos::parallel_reduce(\"cal_abs_mean\", npart, pr, abs_mean.data());"},
{"lineNum":"  282","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"    MPI_Allreduce(MPI_IN_PLACE, abs_mean.data(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  285","line":"            6, MPI_DOUBLE, MPI_SUM, bunch.get_comm());"},
{"lineNum":"  286","line":""},
{"lineNum":"  287","line":"    for (int i=0; i<6; ++i)"},
{"lineNum":"  288","line":"        abs_mean(i) /= bunch.get_total_num();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"    return abs_mean;"},
{"lineNum":"  291","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"double"},
{"lineNum":"  295","line":"Core_diagnostics::calculate_z_std(Bunch const& bunch, double const& mean)"},
{"lineNum":"  296","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  297","line":"#if 0"},
{"lineNum":"  298","line":"    double sum = 0;"},
{"lineNum":"  299","line":"    double std = 0;"},
{"lineNum":"  300","line":"    Const_MArray2d_ref particles(bunch.get_local_particles());"},
{"lineNum":"  301","line":"    for (int part = 0; part < bunch.get_local_num(); ++part) {"},
{"lineNum":"  302","line":"        double diff = particles[part][4] - mean;"},
{"lineNum":"  303","line":"        sum += diff * diff;"},
{"lineNum":"  304","line":"    }"},
{"lineNum":"  305","line":"    MPI_Allreduce(&sum, &std, 1, MPI_DOUBLE, MPI_SUM, bunch.get_comm().get());"},
{"lineNum":"  306","line":"    std = std::sqrt(std / bunch.get_total_num());"},
{"lineNum":"  307","line":"    return std;"},
{"lineNum":"  308","line":"#endif"},
{"lineNum":"  309","line":"    return 0.0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  310","line":"}"},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":"karray1d"},
{"lineNum":"  313","line":"Core_diagnostics::calculate_spatial_mean(Bunch const& bunch)"},
{"lineNum":"  314","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  315","line":"    karray1d mean(\"mean\", 3);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  316","line":"#if 0"},
{"lineNum":"  317","line":"    double sum[3] = { 0, 0, 0 };"},
{"lineNum":"  318","line":"    Const_MArray2d_ref particles(bunch.get_local_particles());"},
{"lineNum":"  319","line":"    int npart = bunch.get_local_num();"},
{"lineNum":"  320","line":""},
{"lineNum":"  321","line":"    #pragma omp parallel shared(npart, particles)"},
{"lineNum":"  322","line":"    {"},
{"lineNum":"  323","line":"        int nt = omp_get_num_threads();"},
{"lineNum":"  324","line":"        int it = omp_get_thread_num();"},
{"lineNum":"  325","line":""},
{"lineNum":"  326","line":"        int l = npart / nt;"},
{"lineNum":"  327","line":"        int s = it * l;"},
{"lineNum":"  328","line":"        int e = (it==nt-1) ? npart : (it+1)*l;"},
{"lineNum":"  329","line":""},
{"lineNum":"  330","line":"        double lsum0 = 0, lsum1 = 0, lsum2 = 0;"},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"        for (int part = s; part < e; ++part)"},
{"lineNum":"  333","line":"        {"},
{"lineNum":"  334","line":"            lsum0 += particles[part][0];"},
{"lineNum":"  335","line":"            lsum1 += particles[part][2];"},
{"lineNum":"  336","line":"            lsum2 += particles[part][4];"},
{"lineNum":"  337","line":"        }"},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"        #pragma omp critical"},
{"lineNum":"  340","line":"        {"},
{"lineNum":"  341","line":"            sum[0] += lsum0;"},
{"lineNum":"  342","line":"            sum[1] += lsum1;"},
{"lineNum":"  343","line":"            sum[2] += lsum2;"},
{"lineNum":"  344","line":"        }"},
{"lineNum":"  345","line":"    }"},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"    MPI_Allreduce(sum, mean.origin(), 3, MPI_DOUBLE, MPI_SUM,"},
{"lineNum":"  348","line":"            bunch.get_comm().get());"},
{"lineNum":"  349","line":""},
{"lineNum":"  350","line":"    for (int i = 0; i < 3; ++i) {"},
{"lineNum":"  351","line":"        mean[i] /= bunch.get_total_num();"},
{"lineNum":"  352","line":"    }"},
{"lineNum":"  353","line":"#endif"},
{"lineNum":"  354","line":"    return mean;"},
{"lineNum":"  355","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  356","line":""},
{"lineNum":"  357","line":"karray1d"},
{"lineNum":"  358","line":"Core_diagnostics::calculate_std(Bunch const & bunch, karray1d const & mean)"},
{"lineNum":"  359","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  360","line":"    using core_diagnostics_impl::particle_reducer;"},
{"lineNum":"  361","line":"    using core_diagnostics_impl::std_tag;"},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"    karray1d std(\"std\", 6);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  364","line":""},
{"lineNum":"  365","line":"    auto particles = bunch.get_local_particles();"},
{"lineNum":"  366","line":"    auto masks = bunch.get_local_particle_masks();"},
{"lineNum":"  367","line":"    const int npart = bunch.size();"},
{"lineNum":"  368","line":""},
{"lineNum":"  369","line":"    particle_reducer<std_tag> pr(particles, masks, mean);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  370","line":"    Kokkos::parallel_reduce(npart, pr, std.data());"},
{"lineNum":"  371","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  372","line":""},
{"lineNum":"  373","line":"    MPI_Allreduce(MPI_IN_PLACE, std.data(), 6, MPI_DOUBLE, MPI_SUM, bunch.get_comm());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  374","line":"    for (int i=0; i<6; ++i) std(i) = std::sqrt(std(i) / bunch.get_total_num());","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"    return std;"},
{"lineNum":"  377","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  378","line":""},
{"lineNum":"  379","line":"karray1d"},
{"lineNum":"  380","line":"Core_diagnostics::calculate_spatial_std(Bunch const& bunch, karray1d const& mean)"},
{"lineNum":"  381","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  382","line":"    karray1d std(\"std\", 3);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  383","line":"#if 0"},
{"lineNum":"  384","line":"    double sum[3] = { 0, 0, 0 };"},
{"lineNum":"  385","line":"    Const_MArray2d_ref particles(bunch.get_local_particles());"},
{"lineNum":"  386","line":"    int npart = bunch.get_local_num();"},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"    #pragma omp parallel shared(npart, particles)"},
{"lineNum":"  389","line":"    {"},
{"lineNum":"  390","line":"        int nt = omp_get_num_threads();"},
{"lineNum":"  391","line":"        int it = omp_get_thread_num();"},
{"lineNum":"  392","line":""},
{"lineNum":"  393","line":"        int l = npart / nt;"},
{"lineNum":"  394","line":"        int s = it * l;"},
{"lineNum":"  395","line":"        int e = (it==nt-1) ? npart : (it+1)*l;"},
{"lineNum":"  396","line":""},
{"lineNum":"  397","line":"        double lsum[3] = { 0, 0, 0 };"},
{"lineNum":"  398","line":"        double diff;"},
{"lineNum":"  399","line":""},
{"lineNum":"  400","line":"        for(int part = s; part < e; ++part)"},
{"lineNum":"  401","line":"        {"},
{"lineNum":"  402","line":"            diff = particles[part][0] - mean[0]; lsum[0] += diff * diff;"},
{"lineNum":"  403","line":"            diff = particles[part][2] - mean[1]; lsum[1] += diff * diff;"},
{"lineNum":"  404","line":"            diff = particles[part][4] - mean[2]; lsum[2] += diff * diff;"},
{"lineNum":"  405","line":"        }"},
{"lineNum":"  406","line":""},
{"lineNum":"  407","line":"        #pragma omp critical"},
{"lineNum":"  408","line":"        {"},
{"lineNum":"  409","line":"            sum[0] += lsum[0];"},
{"lineNum":"  410","line":"            sum[1] += lsum[1];"},
{"lineNum":"  411","line":"            sum[2] += lsum[2];"},
{"lineNum":"  412","line":"        } // end of omp critical"},
{"lineNum":"  413","line":"    }"},
{"lineNum":"  414","line":""},
{"lineNum":"  415","line":"    MPI_Allreduce(sum, std.origin(), 3, MPI_DOUBLE, MPI_SUM,"},
{"lineNum":"  416","line":"            bunch.get_comm().get());"},
{"lineNum":"  417","line":"    for (int i = 0; i < 3; ++i) {"},
{"lineNum":"  418","line":"        std[i] = std::sqrt(std[i] / bunch.get_total_num());"},
{"lineNum":"  419","line":"    }"},
{"lineNum":"  420","line":"#endif"},
{"lineNum":"  421","line":"    return std;"},
{"lineNum":"  422","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  423","line":""},
{"lineNum":"  424","line":"karray2d_row"},
{"lineNum":"  425","line":"Core_diagnostics::calculate_sum2(Bunch const& bunch, karray1d const& mean)"},
{"lineNum":"  426","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  427","line":"    using core_diagnostics_impl::particle_reducer;"},
{"lineNum":"  428","line":"    using core_diagnostics_impl::mom2_tag;"},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":"    karray2d_row sum2(\"sum2\", 6, 6);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  431","line":""},
{"lineNum":"  432","line":"    auto particles = bunch.get_local_particles();"},
{"lineNum":"  433","line":"    auto masks = bunch.get_local_particle_masks();"},
{"lineNum":"  434","line":"    auto npart = bunch.size();"},
{"lineNum":"  435","line":""},
{"lineNum":"  436","line":"    particle_reducer<mom2_tag> pr(particles, masks, mean);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  437","line":"    Kokkos::parallel_reduce(npart, pr, sum2.data());"},
{"lineNum":"  438","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  439","line":""},
{"lineNum":"  440","line":"    for (int i=0; i<5; ++i)"},
{"lineNum":"  441","line":"        for (int j=i+1; j<6; ++j)"},
{"lineNum":"  442","line":"            sum2(i, j) = sum2(j, i);","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"  443","line":""},
{"lineNum":"  444","line":"    MPI_Allreduce(MPI_IN_PLACE, sum2.data(), 36, MPI_DOUBLE, MPI_SUM, bunch.get_comm());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  445","line":""},
{"lineNum":"  446","line":"    return sum2;"},
{"lineNum":"  447","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  448","line":""},
{"lineNum":"  449","line":""},
{"lineNum":"  450","line":"karray2d_row"},
{"lineNum":"  451","line":"Core_diagnostics::calculate_mom2(Bunch const& bunch, karray1d const& mean)"},
{"lineNum":"  452","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  453","line":"    auto sum2 = calculate_sum2(bunch, mean);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  454","line":"    karray2d_row mom2(\"mom2\", 6, 6);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  455","line":""},
{"lineNum":"  456","line":"    for (int i=0; i<6; ++i)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  457","line":"        for (int j=0; j<6; ++j)"},
{"lineNum":"  458","line":"            mom2(i, j) = sum2(i, j) / bunch.get_total_num();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  459","line":""},
{"lineNum":"  460","line":"    return mom2;"},
{"lineNum":"  461","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  462","line":""},
{"lineNum":"  463","line":"karray1d"},
{"lineNum":"  464","line":"Core_diagnostics::calculate_min(Bunch const& bunch)"},
{"lineNum":"  465","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  466","line":"    using core_diagnostics_impl::particle_reducer;"},
{"lineNum":"  467","line":"    using core_diagnostics_impl::min_tag;"},
{"lineNum":"  468","line":""},
{"lineNum":"  469","line":"    karray1d min(\"min\", 3);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  470","line":"    min(0) = 1e100; min(1) = 1e100; min(2) = 1e100;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  471","line":""},
{"lineNum":"  472","line":"    auto particles = bunch.get_local_particles();"},
{"lineNum":"  473","line":"    auto masks = bunch.get_local_particle_masks();"},
{"lineNum":"  474","line":"    const int npart = bunch.size();"},
{"lineNum":"  475","line":""},
{"lineNum":"  476","line":"    particle_reducer<min_tag> pr(particles, masks);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  477","line":"    Kokkos::parallel_reduce(\"cal_min\", npart, pr, min);"},
{"lineNum":"  478","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  479","line":""},
{"lineNum":"  480","line":"    MPI_Allreduce(MPI_IN_PLACE, min.data(), 3,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  481","line":"            MPI_DOUBLE, MPI_MIN, bunch.get_comm());"},
{"lineNum":"  482","line":""},
{"lineNum":"  483","line":"    return min;"},
{"lineNum":"  484","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  485","line":""},
{"lineNum":"  486","line":"karray1d"},
{"lineNum":"  487","line":"Core_diagnostics::calculate_max(Bunch const& bunch)"},
{"lineNum":"  488","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  489","line":"    using core_diagnostics_impl::particle_reducer;"},
{"lineNum":"  490","line":"    using core_diagnostics_impl::max_tag;"},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"    karray1d max(\"max\", 3);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  493","line":"    max(0) = -1e100; max(1) = -1e100; max(2) = -1e100;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  494","line":""},
{"lineNum":"  495","line":"    auto particles = bunch.get_local_particles();"},
{"lineNum":"  496","line":"    auto masks = bunch.get_local_particle_masks();"},
{"lineNum":"  497","line":"    const int npart = bunch.size();"},
{"lineNum":"  498","line":""},
{"lineNum":"  499","line":"    particle_reducer<max_tag> pr(particles, masks);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  500","line":"    Kokkos::parallel_reduce(\"cal_max\", npart, pr, max);"},
{"lineNum":"  501","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  502","line":""},
{"lineNum":"  503","line":"    MPI_Allreduce(MPI_IN_PLACE, max.data(), 3,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  504","line":"            MPI_DOUBLE, MPI_MAX, bunch.get_comm());"},
{"lineNum":"  505","line":""},
{"lineNum":"  506","line":"    return max;"},
{"lineNum":"  507","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  508","line":""},
{"lineNum":"  509","line":"void"},
{"lineNum":"  510","line":"Core_diagnostics::print_bunch_parameters(karray2d const& mom2, double beta)"},
{"lineNum":"  511","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  512","line":"#if 0"},
{"lineNum":"  513","line":"  ///emitx,emity,emitz correspond to sigma^2/beta for a matched beam. Note there is no pi factor in our definition."},
{"lineNum":"  514","line":"  /// 95% emitts...corespond to Fermilab measured emittances defined as (6 pi sigma^2/beta0."},
{"lineNum":"  515","line":""},
{"lineNum":"  516","line":"   double gamma=1./sqrt(1.-beta*beta);"},
{"lineNum":"  517","line":"   double pz = gamma * beta *pconstants::mp;"},
{"lineNum":"  518","line":"   double energy=pconstants::mp * gamma;"},
{"lineNum":"  519","line":"   std::vector<double> units(6);"},
{"lineNum":"  520","line":"   units[0]=1.;"},
{"lineNum":"  521","line":"   units[1]=1./pz;"},
{"lineNum":"  522","line":"   units[2]=1.;"},
{"lineNum":"  523","line":"   units[3]=1./pz;"},
{"lineNum":"  524","line":"   units[4]=1./beta;"},
{"lineNum":"  525","line":"   units[5]=1./pz;"},
{"lineNum":"  526","line":""},
{"lineNum":"  527","line":"   double emitx=sqrt(mom2[0][0]*mom2[1][1]-mom2[0][1]*mom2[1][0])/units[0]/units[1]; // this is xrms^2/beta_lattice !!!!!"},
{"lineNum":"  528","line":"   double emity=sqrt(mom2[2][2]*mom2[3][3]-mom2[2][3]*mom2[3][2])/units[2]/units[3]; // this is yrms^2/beta_lattice !!!!!"},
{"lineNum":"  529","line":"   double emitz=sqrt(mom2[4][4]*mom2[5][5]-mom2[4][5]*mom2[5][4])/units[4]/units[5]; // this is zrms^2/beta_lattice !!!!!"},
{"lineNum":"  530","line":""},
{"lineNum":"  531","line":"   // don\'t print out 10000 copies of the the bunch parameters"},
{"lineNum":"  532","line":"   Logger logger(0);"},
{"lineNum":"  533","line":""},
{"lineNum":"  534","line":"  logger<< \"************ BEAM MATCHED PARAMETERS*************\"<<std::endl;"},
{"lineNum":"  535","line":"  logger<<\"*    emitx=\"<< emitx<<\" meters*GeV/c   =\"<<emitx/pz<<\" meters*rad (synergia units)=\"<<emitx/pz/mconstants::pi<<\" pi*meters*rad\"<<std::endl;"},
{"lineNum":"  536","line":"  logger<<\"*    emity=\"<< emity<< \" meters*GeV/c   =\"<<emity/pz<< \" meters*rad (synergia units)=\"<< emity/pz/mconstants::pi<<\" pi*meters*rad\"<<std::endl;"},
{"lineNum":"  537","line":"  logger<<\"*    emitz=\"<<emitz<<\" meters*GeV/c =\"<<emitz*1.e9/(pconstants::c)<<\" eV*s =\" <<emitz*beta*beta*energy/pz"},
{"lineNum":"  538","line":"            <<\" meters*GeV =\"<<emitz/pz/beta<<\" [cdt*dp/p] (synergia units)\"<<std::endl;"},
{"lineNum":"  539","line":"  logger<<std::endl;"},
{"lineNum":"  540","line":"  logger<<\"*    90%emitx=\"<< 4.605*mconstants::pi*emitx/pz<<\"  meters*rad =\"<<4.605*emitx/pz<<\" pi*meters*rad\"<<std::endl;"},
{"lineNum":"  541","line":"  logger<<\"*    90%emity=\"<< 4.605*mconstants::pi*emity/pz<<\" meters*rad =\"<<4.605*emity/pz<<\" pi*meters*rad\"<<std::endl;"},
{"lineNum":"  542","line":"  logger<<\"*    90%emitz=\"<< 4.605*mconstants::pi*emitz*1.e9/(pconstants::c)<<\" eV*s\" <<std::endl;"},
{"lineNum":"  543","line":"  logger<<std::endl;"},
{"lineNum":"  544","line":"  logger<<std::endl;"},
{"lineNum":"  545","line":"  logger<<\"*    95%emitx=\"<< 5.991*mconstants::pi*emitx/pz<<\"  meters*rad =\"<<5.991*emitx/pz<<\" pi*meters*rad\" <<std::endl;"},
{"lineNum":"  546","line":"  logger<<\"*    95%emity=\"<< 5.991*mconstants::pi*emity/pz<<\" meters*rad =\"<<5.991*emity/pz<<\" pi*meters*rad\" <<std::endl;"},
{"lineNum":"  547","line":"  logger<<\"*    95%emitz=\"<< 5.991*mconstants::pi*emitz*1.e9/(pconstants::c)<<\" eV*s\"<<std::endl;"},
{"lineNum":"  548","line":"  logger<<std::endl;"},
{"lineNum":"  549","line":"  logger<<\"*    Normalized emitx=\"<< emitx*gamma*beta/pz<<\" meters*rad =\"<<emitx*gamma*beta/pz/mconstants::pi<<\" pi*meters*rad\"<<std::endl;"},
{"lineNum":"  550","line":"  logger<<\"*    Normalized emity=\"<< emity*gamma*beta/pz<<\" meters*rad =\"<<emity*gamma*beta/pz/mconstants::pi<<\" pi*meters*rad\"<<std::endl;"},
{"lineNum":"  551","line":"  logger<<std::endl;"},
{"lineNum":"  552","line":"  logger<<\"*    Normalized 90%emitx=\"<< 4.605*mconstants::pi*emitx*gamma*beta/pz<<\"  meters*rad =\"<<4.605*emitx*gamma*beta/pz<<\" pi*meters*rad\"<<std::endl;"},
{"lineNum":"  553","line":"  logger<<\"*    Normalized 90%emity=\"<< 4.605*mconstants::pi*emity*gamma*beta/pz<<\" meters*rad =\"<<4.605*emity*gamma*beta/pz<<\" pi*meters*rad\"<<std::endl;"},
{"lineNum":"  554","line":"  logger<<std::endl;"},
{"lineNum":"  555","line":"  logger<<\"*    Normalized 95%emitx=\"<< 5.991*mconstants::pi*emitx*gamma*beta/pz<<\"  meters*rad =\"<<5.991*emitx*gamma*beta/pz<<\" pi*meters*rad\"<<std::endl;"},
{"lineNum":"  556","line":"  logger<<\"*    Normalized 95%emity=\"<< 5.991*mconstants::pi*emity*gamma*beta/pz<<\" meters*rad =\"<<5.991*emity*gamma*beta/pz<<\" pi*meters*rad\"<<std::endl;"},
{"lineNum":"  557","line":"  logger<<std::endl;"},
{"lineNum":"  558","line":"  logger<<\"*    xrms=\"<<sqrt(mom2[0][0])/units[0] <<\" meters\"<<std::endl;"},
{"lineNum":"  559","line":"  logger<<\"*    yrms=\"<<sqrt(mom2[2][2])/units[2]<<\" meters\"<<std::endl;"},
{"lineNum":"  560","line":"  logger<<\"*    zrms=\"<<sqrt(mom2[4][4])/units[4] <<\" meters=\"<<1e9*sqrt(mom2[4][4])/units[4]/pconstants::c/beta<<\" ns  \"<<std::endl;"},
{"lineNum":"  561","line":""},
{"lineNum":"  562","line":"  logger<<\"*    pxrms=\"<<sqrt(mom2[1][1])/units[1] <<\" GeV/c,  dpx/p=\"<<sqrt(mom2[1][1])<<std::endl;"},
{"lineNum":"  563","line":"  logger<<\"*    pyrms=\"<<sqrt(mom2[3][3])/units[3] <<\" GeV/c,   dpy/p=\"<<sqrt(mom2[3][3])<<std::endl;"},
{"lineNum":"  564","line":"  logger<<\"*    pzrms=\"<<sqrt(mom2[5][5])/units[5] <<\" GeV/c,  dpz/p=\"<<sqrt(mom2[5][5])<<std::endl;"},
{"lineNum":"  565","line":"  logger<<\"*    Erms=\"<<sqrt(mom2[5][5])*beta*beta*energy<<\" GeV,  deoe=\"<<sqrt(mom2[5][5])*beta*beta<<std::endl;"},
{"lineNum":"  566","line":""},
{"lineNum":"  567","line":"  logger<<\"*    pz=\"<<pz<<\"  GeV/c\"<<std::endl;"},
{"lineNum":"  568","line":"  logger<<\"*    total energy=\"<<energy<<\"GeV,  kinetic energy=\"<<energy-pconstants::mp<<\"GeV\"<<std::endl;"},
{"lineNum":"  569","line":"  logger<<\"****************************************************\"<<std::endl;"},
{"lineNum":"  570","line":"#endif"},
{"lineNum":"  571","line":""},
{"lineNum":"  572","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 99, "covered" : 0,};
var merged_data = [];
