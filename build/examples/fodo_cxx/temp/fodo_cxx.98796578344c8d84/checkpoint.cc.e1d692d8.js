var data = {lines:[
{"lineNum":"    1","line":"#include \"synergia/simulation/checkpoint.h\""},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"#include \"synergia/simulation/propagator.h\""},
{"lineNum":"    4","line":"#include \"synergia/simulation/bunch_simulator.h\""},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"namespace syn"},
{"lineNum":"    8","line":"{"},
{"lineNum":"    9","line":"    void"},
{"lineNum":"   10","line":"    checkpoint_save_as_json("},
{"lineNum":"   11","line":"            std::string const& prop_str,"},
{"lineNum":"   12","line":"            std::string const& sims_str,"},
{"lineNum":"   13","line":"            std::vector<int> const& displs,"},
{"lineNum":"   14","line":"            std::vector<int> const& lens );"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"    std::pair<std::string, std::string>"},
{"lineNum":"   17","line":"    checkpoint_load_json("},
{"lineNum":"   18","line":"            std::vector<char> const& buf,"},
{"lineNum":"   19","line":"            int rank );"},
{"lineNum":"   20","line":"}"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"void"},
{"lineNum":"   24","line":"syn::checkpoint_save( Propagator const& prop,"},
{"lineNum":"   25","line":"                      Bunch_simulator const& sim )"},
{"lineNum":"   26","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   27","line":"    std::string prop_str = prop.dump();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   28","line":"    std::string sim_str = sim.dump();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"    // collect sim_str to the root rank"},
{"lineNum":"   31","line":"    auto const& comm = sim.get_comm();"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"    const int root = 0;"},
{"lineNum":"   34","line":"    const int mpi_size = comm.size();"},
{"lineNum":"   35","line":"    const int mpi_rank = comm.rank();"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"    int len = sim_str.size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   38","line":"    std::vector<int> lens(mpi_size, 0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"    // gather string size"},
{"lineNum":"   41","line":"    MPI_Gather(&len, 1, MPI_INT, lens.data(), 1, MPI_INT, root, comm);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"    // accumulate sizes"},
{"lineNum":"   44","line":"    std::vector<int> displs(mpi_size, 0);"},
{"lineNum":"   45","line":"    for(int i=1; i<mpi_size; ++i) displs[i] = displs[i-1] + lens[i-1];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"    // recv string buffer"},
{"lineNum":"   48","line":"    int total_len = displs[mpi_size-1] + lens[mpi_size-1];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   49","line":"    std::string sims_str(total_len, \' \');"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"    // gather strings"},
{"lineNum":"   52","line":"    MPI_Gatherv( sim_str.data(), sim_str.size(), MPI_CHAR,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   53","line":"            (void*)sims_str.data(), lens.data(), displs.data(), MPI_CHAR,"},
{"lineNum":"   54","line":"            root, comm );"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"    // extract each string and parse into a JSON object"},
{"lineNum":"   57","line":"    if (mpi_rank == root)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   58","line":"        checkpoint_save_as_json(prop_str, sims_str, displs, lens);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   59","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"std::pair<Propagator, Bunch_simulator>"},
{"lineNum":"   62","line":"syn::checkpoint_load()"},
{"lineNum":"   63","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   64","line":"    const int root = 0;"},
{"lineNum":"   65","line":"    const int mpi_size = Commxx::world_size();"},
{"lineNum":"   66","line":"    const int mpi_rank = Commxx::world_rank();"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"    size_t len;"},
{"lineNum":"   69","line":"    std::vector<char> buf;"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"    if (mpi_rank == root)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   72","line":"    {"},
{"lineNum":"   73","line":"        // read states from file"},
{"lineNum":"   74","line":"        std::ifstream file(\"cp_state.json\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   75","line":"        if (!file.good()) throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   76","line":"                \"Error at openning checkpointing file\");"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"        file.seekg(0, std::ios::end);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   79","line":"        len = file.tellg();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"        // broadcast the buffer length"},
{"lineNum":"   82","line":"        MPI_Bcast(&len, 1, MPI_UINT64_T, root, Commxx::World);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"        // read the buffer"},
{"lineNum":"   85","line":"        buf.resize(len);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   86","line":"        file.seekg(0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   87","line":"        file.read(&buf[0], len);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"        // broadcast the buffer"},
{"lineNum":"   90","line":"        MPI_Bcast(&buf[0], len, MPI_BYTE, root, Commxx::World);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   91","line":"    }"},
{"lineNum":"   92","line":"    else"},
{"lineNum":"   93","line":"    {"},
{"lineNum":"   94","line":"        // receive the buffer length"},
{"lineNum":"   95","line":"        MPI_Bcast(&len, 1, MPI_UINT64_T, root, Commxx::World);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"        // prepare buffer"},
{"lineNum":"   98","line":"        buf.resize(len);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"        // receive the buffer"},
{"lineNum":"  101","line":"        MPI_Bcast(&buf[0], len, MPI_BYTE, root, Commxx::World);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  102","line":"    }"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"    // parse the json object"},
{"lineNum":"  105","line":"    auto cp = syn::checkpoint_load_json(buf, mpi_rank);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"    // recreate the objects"},
{"lineNum":"  108","line":"    return std::make_pair(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  109","line":"            Propagator::load_from_string(cp.first),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  110","line":"            Bunch_simulator::load_from_string(cp.second) );","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  111","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"void syn::resume()"},
{"lineNum":"  114","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  115","line":"    Logger simlog(0, LoggerV::INFO_STEP);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"    auto cp = syn::checkpoint_load();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"    Propagator& propagator = cp.first;"},
{"lineNum":"  120","line":"    Bunch_simulator& sim = cp.second;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"    propagator.propagate(sim, simlog);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  123","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 37, "covered" : 0,};
var merged_data = [];
