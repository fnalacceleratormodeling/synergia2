var data = {lines:[
{"lineNum":"    1","line":"#ifndef COMMXX_H_"},
{"lineNum":"    2","line":"#define COMMXX_H_"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#include \"mpi.h\""},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"#include <vector>"},
{"lineNum":"    7","line":"#include <memory>"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"#include <cereal/types/memory.hpp>"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"/// Commxx is a wrapper around MPI communicator (MPI_Comm) objects."},
{"lineNum":"   12","line":"///"},
{"lineNum":"   13","line":"/// Python:  (jfa: needs update) The equivalent functionality is provided by mpi4py Comm objects."},
{"lineNum":"   14","line":"/// mpi4py Comm objects may be passed from python anywhere a Commxx object is"},
{"lineNum":"   15","line":"/// expected."},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"enum class comm_type"},
{"lineNum":"   18","line":"{ null, world, regular };"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"class Commxx : public std::enable_shared_from_this<Commxx>","class":"lineNoCov","hits":"0","possible_hits":"50",},
{"lineNum":"   21","line":"{"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"public:"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"    static const Commxx World;"},
{"lineNum":"   26","line":"    static const Commxx Null;"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"    static int world_rank()"},
{"lineNum":"   29","line":"    { int r; MPI_Comm_rank(MPI_COMM_WORLD, &r); return r; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"    static int world_size()"},
{"lineNum":"   32","line":"    { int s; MPI_Comm_size(MPI_COMM_WORLD, &s); return s; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"private:"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"    std::shared_ptr<const MPI_Comm> comm;"},
{"lineNum":"   37","line":"    std::shared_ptr<const Commxx> parent_comm;"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"    comm_type type;"},
{"lineNum":"   40","line":"    int color, key;"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"private:"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"    Commxx(std::shared_ptr<const Commxx> const& parent, int color, int key);"},
{"lineNum":"   45","line":"    void construct();"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"public:"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"    /// Construct a Commxx object of MPI_COMM_WORLD or MPI_COMM_NULL"},
{"lineNum":"   50","line":"    Commxx(comm_type type = comm_type::world);"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"    operator MPI_Comm() const"},
{"lineNum":"   53","line":"    { if (comm) return *comm; else return MPI_COMM_NULL; }","class":"lineNoCov","hits":"0","possible_hits":"48",},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"    /// get communicator type"},
{"lineNum":"   56","line":"    comm_type get_type() const { return type; }"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"    /// Get communicator rank"},
{"lineNum":"   59","line":"    int get_rank() const;"},
{"lineNum":"   60","line":"    int rank() const { return get_rank(); }","class":"lineNoCov","hits":"0","possible_hits":"23",},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"    /// Get communicator size"},
{"lineNum":"   63","line":"    int get_size() const;"},
{"lineNum":"   64","line":"    int size() const { return get_size(); }","class":"lineNoCov","hits":"0","possible_hits":"44",},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"    /// Test to see if the communicator contains this rank"},
{"lineNum":"   67","line":"    bool has_this_rank() const { return (bool)comm; }"},
{"lineNum":"   68","line":"    bool is_null() const { return !(bool)comm; }"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"    /// is this the root Commxx object"},
{"lineNum":"   71","line":"    bool is_root() const { return type != comm_type::regular; }"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"    // get the parent communicator if available"},
{"lineNum":"   74","line":"    Commxx parent() const;"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"    // the rank in the context of parent communicator"},
{"lineNum":"   77","line":"    // int rank_in_parent_comm() const;"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"    // the ranks (in the context of parent communicator) of"},
{"lineNum":"   80","line":"    // all processors in the current communicator"},
{"lineNum":"   81","line":"    // std::vector<int> ranks_in_parent_comm() const;"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"    Commxx dup() const;"},
{"lineNum":"   84","line":"    Commxx split(int color) const;"},
{"lineNum":"   85","line":"    Commxx split(int color, int key) const;"},
{"lineNum":"   86","line":"    Commxx divide(int subgroup_size) const;"},
{"lineNum":"   87","line":"    Commxx group(std::vector<int> const & ranks) const;"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"    template<class AR>"},
{"lineNum":"   90","line":"    void save(AR & ar) const"},
{"lineNum":"   91","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   92","line":"        ar(CEREAL_NVP(parent_comm));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   93","line":"        ar(CEREAL_NVP(type));"},
{"lineNum":"   94","line":"        ar(CEREAL_NVP(color));"},
{"lineNum":"   95","line":"        ar(CEREAL_NVP(key));"},
{"lineNum":"   96","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"    template<class AR>"},
{"lineNum":"   99","line":"    void load(AR & ar)"},
{"lineNum":"  100","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  101","line":"        ar(CEREAL_NVP(parent_comm));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  102","line":"        ar(CEREAL_NVP(type));"},
{"lineNum":"  103","line":"        ar(CEREAL_NVP(color));"},
{"lineNum":"  104","line":"        ar(CEREAL_NVP(key));"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"        switch(type)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  107","line":"        {"},
{"lineNum":"  108","line":"        case comm_type::null: comm.reset(); break;"},
{"lineNum":"  109","line":"        case comm_type::world: comm.reset(new MPI_Comm(MPI_COMM_WORLD)); break;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  110","line":"        case comm_type::regular: construct(); break;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  111","line":"        }"},
{"lineNum":"  112","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  113","line":"};"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"bool operator== (Commxx const & comm1, Commxx const & comm2);"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"inline bool operator!= (Commxx const & comm1, Commxx const & comm2)"},
{"lineNum":"  118","line":"{ return !(comm1 == comm2); }"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"#endif /* COMMXX_H_ */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 15, "covered" : 0,};
var merged_data = [];
