var data = {lines:[
{"lineNum":"    1","line":"// -*- C++ -*-"},
{"lineNum":"    2","line":"//===---------------------------- chrono ----------------------------------===//"},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions."},
{"lineNum":"    5","line":"// See https://llvm.org/LICENSE.txt for license information."},
{"lineNum":"    6","line":"// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef _LIBCPP_CHRONO"},
{"lineNum":"   11","line":"#define _LIBCPP_CHRONO"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"/*"},
{"lineNum":"   14","line":"    chrono synopsis"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"namespace std"},
{"lineNum":"   17","line":"{"},
{"lineNum":"   18","line":"namespace chrono"},
{"lineNum":"   19","line":"{"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"template <class ToDuration, class Rep, class Period>"},
{"lineNum":"   22","line":"constexpr"},
{"lineNum":"   23","line":"ToDuration"},
{"lineNum":"   24","line":"duration_cast(const duration<Rep, Period>& fd);"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"template <class Rep> struct treat_as_floating_point : is_floating_point<Rep> {};"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"template <class Rep> inline constexpr bool treat_as_floating_point_v"},
{"lineNum":"   29","line":"    = treat_as_floating_point<Rep>::value;                       // C++17"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"template <class Rep>"},
{"lineNum":"   32","line":"struct duration_values"},
{"lineNum":"   33","line":"{"},
{"lineNum":"   34","line":"public:"},
{"lineNum":"   35","line":"    static constexpr Rep zero(); // noexcept in C++20"},
{"lineNum":"   36","line":"    static constexpr Rep max();  // noexcept in C++20"},
{"lineNum":"   37","line":"    static constexpr Rep min();  // noexcept in C++20"},
{"lineNum":"   38","line":"};"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"// duration"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"template <class Rep, class Period = ratio<1>>"},
{"lineNum":"   43","line":"class duration"},
{"lineNum":"   44","line":"{"},
{"lineNum":"   45","line":"    static_assert(!__is_duration<Rep>::value, \"A duration representation can not be a duration\");"},
{"lineNum":"   46","line":"    static_assert(__is_ratio<Period>::value, \"Second template parameter of duration must be a std::ratio\");"},
{"lineNum":"   47","line":"    static_assert(Period::num > 0, \"duration period must be positive\");"},
{"lineNum":"   48","line":"public:"},
{"lineNum":"   49","line":"    typedef Rep rep;"},
{"lineNum":"   50","line":"    typedef typename _Period::type period;"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"    constexpr duration() = default;"},
{"lineNum":"   53","line":"    template <class Rep2>"},
{"lineNum":"   54","line":"        constexpr explicit duration(const Rep2& r,"},
{"lineNum":"   55","line":"            typename enable_if"},
{"lineNum":"   56","line":"            <"},
{"lineNum":"   57","line":"               is_convertible<Rep2, rep>::value &&"},
{"lineNum":"   58","line":"               (treat_as_floating_point<rep>::value ||"},
{"lineNum":"   59","line":"               !treat_as_floating_point<rep>::value && !treat_as_floating_point<Rep2>::value)"},
{"lineNum":"   60","line":"            >::type* = 0);"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"    // conversions"},
{"lineNum":"   63","line":"    template <class Rep2, class Period2>"},
{"lineNum":"   64","line":"        constexpr duration(const duration<Rep2, Period2>& d,"},
{"lineNum":"   65","line":"            typename enable_if"},
{"lineNum":"   66","line":"            <"},
{"lineNum":"   67","line":"                treat_as_floating_point<rep>::value ||"},
{"lineNum":"   68","line":"                ratio_divide<Period2, period>::type::den == 1"},
{"lineNum":"   69","line":"            >::type* = 0);"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"    // observer"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"    constexpr rep count() const;"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"    // arithmetic"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"    constexpr common_type<duration>::type  operator+() const;"},
{"lineNum":"   78","line":"    constexpr common_type<duration>::type  operator-() const;"},
{"lineNum":"   79","line":"    constexpr duration& operator++();    // constexpr in C++17"},
{"lineNum":"   80","line":"    constexpr duration  operator++(int); // constexpr in C++17"},
{"lineNum":"   81","line":"    constexpr duration& operator--();    // constexpr in C++17"},
{"lineNum":"   82","line":"    constexpr duration  operator--(int); // constexpr in C++17"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"    constexpr duration& operator+=(const duration& d);  // constexpr in C++17"},
{"lineNum":"   85","line":"    constexpr duration& operator-=(const duration& d);  // constexpr in C++17"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"    duration& operator*=(const rep& rhs);       // constexpr in C++17"},
{"lineNum":"   88","line":"    duration& operator/=(const rep& rhs);       // constexpr in C++17"},
{"lineNum":"   89","line":"    duration& operator%=(const rep& rhs);       // constexpr in C++17"},
{"lineNum":"   90","line":"    duration& operator%=(const duration& rhs);  // constexpr in C++17"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"    // special values"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"    static constexpr duration zero(); // noexcept in C++20"},
{"lineNum":"   95","line":"    static constexpr duration min();  // noexcept in C++20"},
{"lineNum":"   96","line":"    static constexpr duration max();  // noexcept in C++20"},
{"lineNum":"   97","line":"};"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"typedef duration<long long,         nano> nanoseconds;"},
{"lineNum":"  100","line":"typedef duration<long long,        micro> microseconds;"},
{"lineNum":"  101","line":"typedef duration<long long,        milli> milliseconds;"},
{"lineNum":"  102","line":"typedef duration<long long              > seconds;"},
{"lineNum":"  103","line":"typedef duration<     long, ratio<  60> > minutes;"},
{"lineNum":"  104","line":"typedef duration<     long, ratio<3600> > hours;"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"template <class Clock, class Duration = typename Clock::duration>"},
{"lineNum":"  107","line":"class time_point"},
{"lineNum":"  108","line":"{"},
{"lineNum":"  109","line":"public:"},
{"lineNum":"  110","line":"    typedef Clock                     clock;"},
{"lineNum":"  111","line":"    typedef Duration                  duration;"},
{"lineNum":"  112","line":"    typedef typename duration::rep    rep;"},
{"lineNum":"  113","line":"    typedef typename duration::period period;"},
{"lineNum":"  114","line":"private:"},
{"lineNum":"  115","line":"    duration d_;  // exposition only"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"public:"},
{"lineNum":"  118","line":"    time_point();  // has value \"epoch\" // constexpr in C++14"},
{"lineNum":"  119","line":"    explicit time_point(const duration& d);  // same as time_point() + d // constexpr in C++14"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"    // conversions"},
{"lineNum":"  122","line":"    template <class Duration2>"},
{"lineNum":"  123","line":"       time_point(const time_point<clock, Duration2>& t); // constexpr in C++14"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"    // observer"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"    duration time_since_epoch() const; // constexpr in C++14"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"    // arithmetic"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"    time_point& operator+=(const duration& d); // constexpr in C++17"},
{"lineNum":"  132","line":"    time_point& operator-=(const duration& d); // constexpr in C++17"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"    // special values"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"    static constexpr time_point min();  // noexcept in C++20"},
{"lineNum":"  137","line":"    static constexpr time_point max();  // noexcept in C++20"},
{"lineNum":"  138","line":"};"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"} // chrono"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"// common_type traits"},
{"lineNum":"  143","line":"template <class Rep1, class Period1, class Rep2, class Period2>"},
{"lineNum":"  144","line":"  struct common_type<chrono::duration<Rep1, Period1>, chrono::duration<Rep2, Period2>>;"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"template <class Clock, class Duration1, class Duration2>"},
{"lineNum":"  147","line":"  struct common_type<chrono::time_point<Clock, Duration1>, chrono::time_point<Clock, Duration2>>;"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"namespace chrono {"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"template<class T> struct is_clock;  // C++20"},
{"lineNum":"  153","line":"template<class T> inline constexpr bool is_clock_v = is_clock<T>::value;   // C++20"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"// duration arithmetic"},
{"lineNum":"  157","line":"template <class Rep1, class Period1, class Rep2, class Period2>"},
{"lineNum":"  158","line":"  constexpr"},
{"lineNum":"  159","line":"  typename common_type<duration<Rep1, Period1>, duration<Rep2, Period2>>::type"},
{"lineNum":"  160","line":"  operator+(const duration<Rep1, Period1>& lhs, const duration<Rep2, Period2>& rhs);"},
{"lineNum":"  161","line":"template <class Rep1, class Period1, class Rep2, class Period2>"},
{"lineNum":"  162","line":"  constexpr"},
{"lineNum":"  163","line":"  typename common_type<duration<Rep1, Period1>, duration<Rep2, Period2>>::type"},
{"lineNum":"  164","line":"  operator-(const duration<Rep1, Period1>& lhs, const duration<Rep2, Period2>& rhs);"},
{"lineNum":"  165","line":"template <class Rep1, class Period, class Rep2>"},
{"lineNum":"  166","line":"  constexpr"},
{"lineNum":"  167","line":"  duration<typename common_type<Rep1, Rep2>::type, Period>"},
{"lineNum":"  168","line":"  operator*(const duration<Rep1, Period>& d, const Rep2& s);"},
{"lineNum":"  169","line":"template <class Rep1, class Period, class Rep2>"},
{"lineNum":"  170","line":"  constexpr"},
{"lineNum":"  171","line":"  duration<typename common_type<Rep1, Rep2>::type, Period>"},
{"lineNum":"  172","line":"  operator*(const Rep1& s, const duration<Rep2, Period>& d);"},
{"lineNum":"  173","line":"template <class Rep1, class Period, class Rep2>"},
{"lineNum":"  174","line":"  constexpr"},
{"lineNum":"  175","line":"  duration<typename common_type<Rep1, Rep2>::type, Period>"},
{"lineNum":"  176","line":"  operator/(const duration<Rep1, Period>& d, const Rep2& s);"},
{"lineNum":"  177","line":"template <class Rep1, class Period1, class Rep2, class Period2>"},
{"lineNum":"  178","line":"  constexpr"},
{"lineNum":"  179","line":"  typename common_type<Rep1, Rep2>::type"},
{"lineNum":"  180","line":"  operator/(const duration<Rep1, Period1>& lhs, const duration<Rep2, Period2>& rhs);"},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"// duration comparisons"},
{"lineNum":"  183","line":"template <class Rep1, class Period1, class Rep2, class Period2>"},
{"lineNum":"  184","line":"   constexpr"},
{"lineNum":"  185","line":"   bool operator==(const duration<Rep1, Period1>& lhs, const duration<Rep2, Period2>& rhs);"},
{"lineNum":"  186","line":"template <class Rep1, class Period1, class Rep2, class Period2>"},
{"lineNum":"  187","line":"   constexpr"},
{"lineNum":"  188","line":"   bool operator!=(const duration<Rep1, Period1>& lhs, const duration<Rep2, Period2>& rhs);"},
{"lineNum":"  189","line":"template <class Rep1, class Period1, class Rep2, class Period2>"},
{"lineNum":"  190","line":"   constexpr"},
{"lineNum":"  191","line":"   bool operator< (const duration<Rep1, Period1>& lhs, const duration<Rep2, Period2>& rhs);"},
{"lineNum":"  192","line":"template <class Rep1, class Period1, class Rep2, class Period2>"},
{"lineNum":"  193","line":"   constexpr"},
{"lineNum":"  194","line":"   bool operator<=(const duration<Rep1, Period1>& lhs, const duration<Rep2, Period2>& rhs);"},
{"lineNum":"  195","line":"template <class Rep1, class Period1, class Rep2, class Period2>"},
{"lineNum":"  196","line":"   constexpr"},
{"lineNum":"  197","line":"   bool operator> (const duration<Rep1, Period1>& lhs, const duration<Rep2, Period2>& rhs);"},
{"lineNum":"  198","line":"template <class Rep1, class Period1, class Rep2, class Period2>"},
{"lineNum":"  199","line":"   constexpr"},
{"lineNum":"  200","line":"   bool operator>=(const duration<Rep1, Period1>& lhs, const duration<Rep2, Period2>& rhs);"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"// duration_cast"},
{"lineNum":"  203","line":"template <class ToDuration, class Rep, class Period>"},
{"lineNum":"  204","line":"  ToDuration duration_cast(const duration<Rep, Period>& d);"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"template <class ToDuration, class Rep, class Period>"},
{"lineNum":"  207","line":"    constexpr ToDuration floor(const duration<Rep, Period>& d);    // C++17"},
{"lineNum":"  208","line":"template <class ToDuration, class Rep, class Period>"},
{"lineNum":"  209","line":"    constexpr ToDuration ceil(const duration<Rep, Period>& d);     // C++17"},
{"lineNum":"  210","line":"template <class ToDuration, class Rep, class Period>"},
{"lineNum":"  211","line":"    constexpr ToDuration round(const duration<Rep, Period>& d);    // C++17"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"// duration I/O is elsewhere"},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"// time_point arithmetic (all constexpr in C++14)"},
{"lineNum":"  216","line":"template <class Clock, class Duration1, class Rep2, class Period2>"},
{"lineNum":"  217","line":"  time_point<Clock, typename common_type<Duration1, duration<Rep2, Period2>>::type>"},
{"lineNum":"  218","line":"  operator+(const time_point<Clock, Duration1>& lhs, const duration<Rep2, Period2>& rhs);"},
{"lineNum":"  219","line":"template <class Rep1, class Period1, class Clock, class Duration2>"},
{"lineNum":"  220","line":"  time_point<Clock, typename common_type<duration<Rep1, Period1>, Duration2>::type>"},
{"lineNum":"  221","line":"  operator+(const duration<Rep1, Period1>& lhs, const time_point<Clock, Duration2>& rhs);"},
{"lineNum":"  222","line":"template <class Clock, class Duration1, class Rep2, class Period2>"},
{"lineNum":"  223","line":"  time_point<Clock, typename common_type<Duration1, duration<Rep2, Period2>>::type>"},
{"lineNum":"  224","line":"  operator-(const time_point<Clock, Duration1>& lhs, const duration<Rep2, Period2>& rhs);"},
{"lineNum":"  225","line":"template <class Clock, class Duration1, class Duration2>"},
{"lineNum":"  226","line":"  typename common_type<Duration1, Duration2>::type"},
{"lineNum":"  227","line":"  operator-(const time_point<Clock, Duration1>& lhs, const time_point<Clock, Duration2>& rhs);"},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"// time_point comparisons (all constexpr in C++14)"},
{"lineNum":"  230","line":"template <class Clock, class Duration1, class Duration2>"},
{"lineNum":"  231","line":"   bool operator==(const time_point<Clock, Duration1>& lhs, const time_point<Clock, Duration2>& rhs);"},
{"lineNum":"  232","line":"template <class Clock, class Duration1, class Duration2>"},
{"lineNum":"  233","line":"   bool operator!=(const time_point<Clock, Duration1>& lhs, const time_point<Clock, Duration2>& rhs);"},
{"lineNum":"  234","line":"template <class Clock, class Duration1, class Duration2>"},
{"lineNum":"  235","line":"   bool operator< (const time_point<Clock, Duration1>& lhs, const time_point<Clock, Duration2>& rhs);"},
{"lineNum":"  236","line":"template <class Clock, class Duration1, class Duration2>"},
{"lineNum":"  237","line":"   bool operator<=(const time_point<Clock, Duration1>& lhs, const time_point<Clock, Duration2>& rhs);"},
{"lineNum":"  238","line":"template <class Clock, class Duration1, class Duration2>"},
{"lineNum":"  239","line":"   bool operator> (const time_point<Clock, Duration1>& lhs, const time_point<Clock, Duration2>& rhs);"},
{"lineNum":"  240","line":"template <class Clock, class Duration1, class Duration2>"},
{"lineNum":"  241","line":"   bool operator>=(const time_point<Clock, Duration1>& lhs, const time_point<Clock, Duration2>& rhs);"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"// time_point_cast (constexpr in C++14)"},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"template <class ToDuration, class Clock, class Duration>"},
{"lineNum":"  246","line":"  time_point<Clock, ToDuration> time_point_cast(const time_point<Clock, Duration>& t);"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"template <class ToDuration, class Clock, class Duration>"},
{"lineNum":"  249","line":"    constexpr time_point<Clock, ToDuration>"},
{"lineNum":"  250","line":"    floor(const time_point<Clock, Duration>& tp);                  // C++17"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"template <class ToDuration, class Clock, class Duration>"},
{"lineNum":"  253","line":"    constexpr time_point<Clock, ToDuration>"},
{"lineNum":"  254","line":"    ceil(const time_point<Clock, Duration>& tp);                   // C++17"},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"template <class ToDuration, class Clock, class Duration>"},
{"lineNum":"  257","line":"    constexpr time_point<Clock, ToDuration>"},
{"lineNum":"  258","line":"    round(const time_point<Clock, Duration>& tp);                  // C++17"},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"template <class Rep, class Period>"},
{"lineNum":"  261","line":"    constexpr duration<Rep, Period> abs(duration<Rep, Period> d);  // C++17"},
{"lineNum":"  262","line":""},
{"lineNum":"  263","line":"// Clocks"},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"class system_clock"},
{"lineNum":"  266","line":"{"},
{"lineNum":"  267","line":"public:"},
{"lineNum":"  268","line":"    typedef microseconds                     duration;"},
{"lineNum":"  269","line":"    typedef duration::rep                    rep;"},
{"lineNum":"  270","line":"    typedef duration::period                 period;"},
{"lineNum":"  271","line":"    typedef chrono::time_point<system_clock> time_point;"},
{"lineNum":"  272","line":"    static const bool is_steady =            false; // constexpr in C++14"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"    static time_point now() noexcept;"},
{"lineNum":"  275","line":"    static time_t     to_time_t  (const time_point& __t) noexcept;"},
{"lineNum":"  276","line":"    static time_point from_time_t(time_t __t) noexcept;"},
{"lineNum":"  277","line":"};"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"template <class Duration>"},
{"lineNum":"  280","line":"  using sys_time  = time_point<system_clock, Duration>; // C++20"},
{"lineNum":"  281","line":"using sys_seconds = sys_time<seconds>;                  // C++20"},
{"lineNum":"  282","line":"using sys_days    = sys_time<days>;                     // C++20"},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"class utc_clock;                                        // C++20"},
{"lineNum":"  285","line":""},
{"lineNum":"  286","line":"template <class Duration>"},
{"lineNum":"  287","line":"  using utc_time  = time_point<utc_clock, Duration>;    // C++20"},
{"lineNum":"  288","line":"using utc_seconds = utc_time<seconds>;                  // C++20"},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"class tai_clock;                                        // C++20"},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"template <class Duration>"},
{"lineNum":"  293","line":"  using tai_time  = time_point<tai_clock, Duration>;    // C++20"},
{"lineNum":"  294","line":"using tai_seconds = tai_time<seconds>;                  // C++20"},
{"lineNum":"  295","line":""},
{"lineNum":"  296","line":"class file_clock;                                       // C++20"},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":"template<class Duration>"},
{"lineNum":"  299","line":"  using file_time = time_point<file_clock, Duration>;   // C++20"},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"class steady_clock"},
{"lineNum":"  302","line":"{"},
{"lineNum":"  303","line":"public:"},
{"lineNum":"  304","line":"    typedef nanoseconds                                   duration;"},
{"lineNum":"  305","line":"    typedef duration::rep                                 rep;"},
{"lineNum":"  306","line":"    typedef duration::period                              period;"},
{"lineNum":"  307","line":"    typedef chrono::time_point<steady_clock, duration>    time_point;"},
{"lineNum":"  308","line":"    static const bool is_steady =                         true; // constexpr in C++14"},
{"lineNum":"  309","line":""},
{"lineNum":"  310","line":"    static time_point now() noexcept;"},
{"lineNum":"  311","line":"};"},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":"typedef steady_clock high_resolution_clock;"},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"// 25.7.8, local time           // C++20"},
{"lineNum":"  316","line":"struct local_t {};"},
{"lineNum":"  317","line":"template<class Duration>"},
{"lineNum":"  318","line":"  using local_time  = time_point<local_t, Duration>;"},
{"lineNum":"  319","line":"using local_seconds = local_time<seconds>;"},
{"lineNum":"  320","line":"using local_days    = local_time<days>;"},
{"lineNum":"  321","line":""},
{"lineNum":"  322","line":"// 25.7.9, time_point conversions template<class DestClock, class SourceClock>    // C++20"},
{"lineNum":"  323","line":"struct clock_time_conversion;"},
{"lineNum":"  324","line":""},
{"lineNum":"  325","line":"template<class DestClock, class SourceClock, class Duration>"},
{"lineNum":"  326","line":"  auto clock_cast(const time_point<SourceClock, Duration>& t);"},
{"lineNum":"  327","line":""},
{"lineNum":"  328","line":"// 25.8.2, class last_spec    // C++20"},
{"lineNum":"  329","line":"struct last_spec;"},
{"lineNum":"  330","line":""},
{"lineNum":"  331","line":"// 25.8.3, class day          // C++20"},
{"lineNum":"  332","line":""},
{"lineNum":"  333","line":"class day;"},
{"lineNum":"  334","line":"constexpr bool operator==(const day& x, const day& y) noexcept;"},
{"lineNum":"  335","line":"constexpr bool operator!=(const day& x, const day& y) noexcept;"},
{"lineNum":"  336","line":"constexpr bool operator< (const day& x, const day& y) noexcept;"},
{"lineNum":"  337","line":"constexpr bool operator> (const day& x, const day& y) noexcept;"},
{"lineNum":"  338","line":"constexpr bool operator<=(const day& x, const day& y) noexcept;"},
{"lineNum":"  339","line":"constexpr bool operator>=(const day& x, const day& y) noexcept;"},
{"lineNum":"  340","line":"constexpr day  operator+(const day&  x, const days& y) noexcept;"},
{"lineNum":"  341","line":"constexpr day  operator+(const days& x, const day&  y) noexcept;"},
{"lineNum":"  342","line":"constexpr day  operator-(const day&  x, const days& y) noexcept;"},
{"lineNum":"  343","line":"constexpr days operator-(const day&  x, const day&  y) noexcept;"},
{"lineNum":"  344","line":""},
{"lineNum":"  345","line":"// 25.8.4, class month    // C++20"},
{"lineNum":"  346","line":"class month;"},
{"lineNum":"  347","line":"constexpr bool operator==(const month& x, const month& y) noexcept;"},
{"lineNum":"  348","line":"constexpr bool operator!=(const month& x, const month& y) noexcept;"},
{"lineNum":"  349","line":"constexpr bool operator< (const month& x, const month& y) noexcept;"},
{"lineNum":"  350","line":"constexpr bool operator> (const month& x, const month& y) noexcept;"},
{"lineNum":"  351","line":"constexpr bool operator<=(const month& x, const month& y) noexcept;"},
{"lineNum":"  352","line":"constexpr bool operator>=(const month& x, const month& y) noexcept;"},
{"lineNum":"  353","line":"constexpr month  operator+(const month&  x, const months& y) noexcept;"},
{"lineNum":"  354","line":"constexpr month  operator+(const months& x,  const month& y) noexcept;"},
{"lineNum":"  355","line":"constexpr month  operator-(const month&  x, const months& y) noexcept;"},
{"lineNum":"  356","line":"constexpr months operator-(const month&  x,  const month& y) noexcept;"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"// 25.8.5, class year    // C++20"},
{"lineNum":"  359","line":"class year;"},
{"lineNum":"  360","line":"constexpr bool operator==(const year& x, const year& y) noexcept;"},
{"lineNum":"  361","line":"constexpr bool operator!=(const year& x, const year& y) noexcept;"},
{"lineNum":"  362","line":"constexpr bool operator< (const year& x, const year& y) noexcept;"},
{"lineNum":"  363","line":"constexpr bool operator> (const year& x, const year& y) noexcept;"},
{"lineNum":"  364","line":"constexpr bool operator<=(const year& x, const year& y) noexcept;"},
{"lineNum":"  365","line":"constexpr bool operator>=(const year& x, const year& y) noexcept;"},
{"lineNum":"  366","line":"constexpr year  operator+(const year&  x, const years& y) noexcept;"},
{"lineNum":"  367","line":"constexpr year  operator+(const years& x, const year&  y) noexcept;"},
{"lineNum":"  368","line":"constexpr year  operator-(const year&  x, const years& y) noexcept;"},
{"lineNum":"  369","line":"constexpr years operator-(const year&  x, const year&  y) noexcept;"},
{"lineNum":"  370","line":""},
{"lineNum":"  371","line":"// 25.8.6, class weekday    // C++20"},
{"lineNum":"  372","line":"class weekday;"},
{"lineNum":"  373","line":""},
{"lineNum":"  374","line":"constexpr bool operator==(const weekday& x, const weekday& y) noexcept;"},
{"lineNum":"  375","line":"constexpr bool operator!=(const weekday& x, const weekday& y) noexcept;"},
{"lineNum":"  376","line":"constexpr weekday operator+(const weekday& x, const days&    y) noexcept;"},
{"lineNum":"  377","line":"constexpr weekday operator+(const days&    x, const weekday& y) noexcept;"},
{"lineNum":"  378","line":"constexpr weekday operator-(const weekday& x, const days&    y) noexcept;"},
{"lineNum":"  379","line":"constexpr days    operator-(const weekday& x, const weekday& y) noexcept;"},
{"lineNum":"  380","line":""},
{"lineNum":"  381","line":"// 25.8.7, class weekday_indexed    // C++20"},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"class weekday_indexed;"},
{"lineNum":"  384","line":"constexpr bool operator==(const weekday_indexed& x, const weekday_indexed& y) noexcept;"},
{"lineNum":"  385","line":"constexpr bool operator!=(const weekday_indexed& x, const weekday_indexed& y) noexcept;"},
{"lineNum":"  386","line":""},
{"lineNum":"  387","line":"// 25.8.8, class weekday_last    // C++20"},
{"lineNum":"  388","line":"class weekday_last;"},
{"lineNum":"  389","line":""},
{"lineNum":"  390","line":"constexpr bool operator==(const weekday_last& x, const weekday_last& y) noexcept;"},
{"lineNum":"  391","line":"constexpr bool operator!=(const weekday_last& x, const weekday_last& y) noexcept;"},
{"lineNum":"  392","line":""},
{"lineNum":"  393","line":"// 25.8.9, class month_day    // C++20"},
{"lineNum":"  394","line":"class month_day;"},
{"lineNum":"  395","line":""},
{"lineNum":"  396","line":"constexpr bool operator==(const month_day& x, const month_day& y) noexcept;"},
{"lineNum":"  397","line":"constexpr bool operator!=(const month_day& x, const month_day& y) noexcept;"},
{"lineNum":"  398","line":"constexpr bool operator< (const month_day& x, const month_day& y) noexcept;"},
{"lineNum":"  399","line":"constexpr bool operator> (const month_day& x, const month_day& y) noexcept;"},
{"lineNum":"  400","line":"constexpr bool operator<=(const month_day& x, const month_day& y) noexcept;"},
{"lineNum":"  401","line":"constexpr bool operator>=(const month_day& x, const month_day& y) noexcept;"},
{"lineNum":"  402","line":""},
{"lineNum":"  403","line":""},
{"lineNum":"  404","line":"// 25.8.10, class month_day_last    // C++20"},
{"lineNum":"  405","line":"class month_day_last;"},
{"lineNum":"  406","line":""},
{"lineNum":"  407","line":"constexpr bool operator==(const month_day_last& x, const month_day_last& y) noexcept;"},
{"lineNum":"  408","line":"constexpr bool operator!=(const month_day_last& x, const month_day_last& y) noexcept;"},
{"lineNum":"  409","line":"constexpr bool operator< (const month_day_last& x, const month_day_last& y) noexcept;"},
{"lineNum":"  410","line":"constexpr bool operator> (const month_day_last& x, const month_day_last& y) noexcept;"},
{"lineNum":"  411","line":"constexpr bool operator<=(const month_day_last& x, const month_day_last& y) noexcept;"},
{"lineNum":"  412","line":"constexpr bool operator>=(const month_day_last& x, const month_day_last& y) noexcept;"},
{"lineNum":"  413","line":""},
{"lineNum":"  414","line":"// 25.8.11, class month_weekday    // C++20"},
{"lineNum":"  415","line":"class month_weekday;"},
{"lineNum":"  416","line":""},
{"lineNum":"  417","line":"constexpr bool operator==(const month_weekday& x, const month_weekday& y) noexcept;"},
{"lineNum":"  418","line":"constexpr bool operator!=(const month_weekday& x, const month_weekday& y) noexcept;"},
{"lineNum":"  419","line":""},
{"lineNum":"  420","line":"// 25.8.12, class month_weekday_last    // C++20"},
{"lineNum":"  421","line":"class month_weekday_last;"},
{"lineNum":"  422","line":""},
{"lineNum":"  423","line":"constexpr bool operator==(const month_weekday_last& x, const month_weekday_last& y) noexcept;"},
{"lineNum":"  424","line":"constexpr bool operator!=(const month_weekday_last& x, const month_weekday_last& y) noexcept;"},
{"lineNum":"  425","line":""},
{"lineNum":"  426","line":""},
{"lineNum":"  427","line":"// 25.8.13, class year_month    // C++20"},
{"lineNum":"  428","line":"class year_month;"},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":"constexpr bool operator==(const year_month& x, const year_month& y) noexcept;"},
{"lineNum":"  431","line":"constexpr bool operator!=(const year_month& x, const year_month& y) noexcept;"},
{"lineNum":"  432","line":"constexpr bool operator< (const year_month& x, const year_month& y) noexcept;"},
{"lineNum":"  433","line":"constexpr bool operator> (const year_month& x, const year_month& y) noexcept;"},
{"lineNum":"  434","line":"constexpr bool operator<=(const year_month& x, const year_month& y) noexcept;"},
{"lineNum":"  435","line":"constexpr bool operator>=(const year_month& x, const year_month& y) noexcept;"},
{"lineNum":"  436","line":""},
{"lineNum":"  437","line":"constexpr year_month operator+(const year_month& ym, const months& dm) noexcept;"},
{"lineNum":"  438","line":"constexpr year_month operator+(const months& dm, const year_month& ym) noexcept;"},
{"lineNum":"  439","line":"constexpr year_month operator-(const year_month& ym, const months& dm) noexcept;"},
{"lineNum":"  440","line":"constexpr months operator-(const year_month& x, const year_month& y) noexcept;"},
{"lineNum":"  441","line":"constexpr year_month operator+(const year_month& ym, const years& dy) noexcept;"},
{"lineNum":"  442","line":"constexpr year_month operator+(const years& dy, const year_month& ym) noexcept;"},
{"lineNum":"  443","line":"constexpr year_month operator-(const year_month& ym, const years& dy) noexcept;"},
{"lineNum":"  444","line":""},
{"lineNum":"  445","line":"// 25.8.14, class year_month_day class    // C++20"},
{"lineNum":"  446","line":"year_month_day;"},
{"lineNum":"  447","line":""},
{"lineNum":"  448","line":"constexpr bool operator==(const year_month_day& x, const year_month_day& y) noexcept;"},
{"lineNum":"  449","line":"constexpr bool operator!=(const year_month_day& x, const year_month_day& y) noexcept;"},
{"lineNum":"  450","line":"constexpr bool operator< (const year_month_day& x, const year_month_day& y) noexcept;"},
{"lineNum":"  451","line":"constexpr bool operator> (const year_month_day& x, const year_month_day& y) noexcept;"},
{"lineNum":"  452","line":"constexpr bool operator<=(const year_month_day& x, const year_month_day& y) noexcept;"},
{"lineNum":"  453","line":"constexpr bool operator>=(const year_month_day& x, const year_month_day& y) noexcept;"},
{"lineNum":"  454","line":""},
{"lineNum":"  455","line":"constexpr year_month_day operator+(const year_month_day& ymd, const months& dm) noexcept;"},
{"lineNum":"  456","line":"constexpr year_month_day operator+(const months& dm, const year_month_day& ymd) noexcept;"},
{"lineNum":"  457","line":"constexpr year_month_day operator+(const year_month_day& ymd, const years& dy) noexcept;"},
{"lineNum":"  458","line":"constexpr year_month_day operator+(const years& dy, const year_month_day& ymd) noexcept;"},
{"lineNum":"  459","line":"constexpr year_month_day operator-(const year_month_day& ymd, const months& dm) noexcept;"},
{"lineNum":"  460","line":"constexpr year_month_day operator-(const year_month_day& ymd, const years& dy) noexcept;"},
{"lineNum":"  461","line":""},
{"lineNum":"  462","line":""},
{"lineNum":"  463","line":"// 25.8.15, class year_month_day_last    // C++20"},
{"lineNum":"  464","line":"class year_month_day_last;"},
{"lineNum":"  465","line":""},
{"lineNum":"  466","line":"constexpr bool operator==(const year_month_day_last& x,"},
{"lineNum":"  467","line":"                          const year_month_day_last& y) noexcept;"},
{"lineNum":"  468","line":"constexpr bool operator!=(const year_month_day_last& x,"},
{"lineNum":"  469","line":"                          const year_month_day_last& y) noexcept;"},
{"lineNum":"  470","line":"constexpr bool operator< (const year_month_day_last& x,"},
{"lineNum":"  471","line":"                          const year_month_day_last& y) noexcept;"},
{"lineNum":"  472","line":"constexpr bool operator> (const year_month_day_last& x,"},
{"lineNum":"  473","line":"                          const year_month_day_last& y) noexcept;"},
{"lineNum":"  474","line":"constexpr bool operator<=(const year_month_day_last& x,"},
{"lineNum":"  475","line":"                          const year_month_day_last& y) noexcept;"},
{"lineNum":"  476","line":"constexpr bool operator>=(const year_month_day_last& x,"},
{"lineNum":"  477","line":"                          const year_month_day_last& y) noexcept;"},
{"lineNum":"  478","line":""},
{"lineNum":"  479","line":"constexpr year_month_day_last"},
{"lineNum":"  480","line":"  operator+(const year_month_day_last& ymdl, const months& dm) noexcept;"},
{"lineNum":"  481","line":"constexpr year_month_day_last"},
{"lineNum":"  482","line":"  operator+(const months& dm, const year_month_day_last& ymdl) noexcept;"},
{"lineNum":"  483","line":"constexpr year_month_day_last"},
{"lineNum":"  484","line":"  operator+(const year_month_day_last& ymdl, const years& dy) noexcept;"},
{"lineNum":"  485","line":"constexpr year_month_day_last"},
{"lineNum":"  486","line":"  operator+(const years& dy, const year_month_day_last& ymdl) noexcept;"},
{"lineNum":"  487","line":"constexpr year_month_day_last"},
{"lineNum":"  488","line":"  operator-(const year_month_day_last& ymdl, const months& dm) noexcept;"},
{"lineNum":"  489","line":"constexpr year_month_day_last"},
{"lineNum":"  490","line":"  operator-(const year_month_day_last& ymdl, const years& dy) noexcept;"},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"// 25.8.16, class year_month_weekday    // C++20"},
{"lineNum":"  493","line":"class year_month_weekday;"},
{"lineNum":"  494","line":""},
{"lineNum":"  495","line":"constexpr bool operator==(const year_month_weekday& x,"},
{"lineNum":"  496","line":"                          const year_month_weekday& y) noexcept;"},
{"lineNum":"  497","line":"constexpr bool operator!=(const year_month_weekday& x,"},
{"lineNum":"  498","line":"                          const year_month_weekday& y) noexcept;"},
{"lineNum":"  499","line":""},
{"lineNum":"  500","line":"constexpr year_month_weekday"},
{"lineNum":"  501","line":"  operator+(const year_month_weekday& ymwd, const months& dm) noexcept;"},
{"lineNum":"  502","line":"constexpr year_month_weekday"},
{"lineNum":"  503","line":"  operator+(const months& dm, const year_month_weekday& ymwd) noexcept;"},
{"lineNum":"  504","line":"constexpr year_month_weekday"},
{"lineNum":"  505","line":"  operator+(const year_month_weekday& ymwd, const years& dy) noexcept;"},
{"lineNum":"  506","line":"constexpr year_month_weekday"},
{"lineNum":"  507","line":"  operator+(const years& dy, const year_month_weekday& ymwd) noexcept;"},
{"lineNum":"  508","line":"constexpr year_month_weekday"},
{"lineNum":"  509","line":"  operator-(const year_month_weekday& ymwd, const months& dm) noexcept;"},
{"lineNum":"  510","line":"constexpr year_month_weekday"},
{"lineNum":"  511","line":"  operator-(const year_month_weekday& ymwd, const years& dy) noexcept;"},
{"lineNum":"  512","line":""},
{"lineNum":"  513","line":"// 25.8.17, class year_month_weekday_last    // C++20"},
{"lineNum":"  514","line":"class year_month_weekday_last;"},
{"lineNum":"  515","line":""},
{"lineNum":"  516","line":"constexpr bool operator==(const year_month_weekday_last& x,"},
{"lineNum":"  517","line":"                          const year_month_weekday_last& y) noexcept;"},
{"lineNum":"  518","line":"constexpr bool operator!=(const year_month_weekday_last& x,"},
{"lineNum":"  519","line":"                          const year_month_weekday_last& y) noexcept;"},
{"lineNum":"  520","line":"constexpr year_month_weekday_last"},
{"lineNum":"  521","line":"  operator+(const year_month_weekday_last& ymwdl, const months& dm) noexcept;"},
{"lineNum":"  522","line":"constexpr year_month_weekday_last"},
{"lineNum":"  523","line":"  operator+(const months& dm, const year_month_weekday_last& ymwdl) noexcept;"},
{"lineNum":"  524","line":"constexpr year_month_weekday_last"},
{"lineNum":"  525","line":"  operator+(const year_month_weekday_last& ymwdl, const years& dy) noexcept;"},
{"lineNum":"  526","line":"constexpr year_month_weekday_last"},
{"lineNum":"  527","line":"  operator+(const years& dy, const year_month_weekday_last& ymwdl) noexcept;"},
{"lineNum":"  528","line":"constexpr year_month_weekday_last"},
{"lineNum":"  529","line":"  operator-(const year_month_weekday_last& ymwdl, const months& dm) noexcept;"},
{"lineNum":"  530","line":"constexpr year_month_weekday_last"},
{"lineNum":"  531","line":"  operator-(const year_month_weekday_last& ymwdl, const years& dy) noexcept;"},
{"lineNum":"  532","line":""},
{"lineNum":"  533","line":"// 25.8.18, civil calendar conventional syntax operators    // C++20"},
{"lineNum":"  534","line":"constexpr year_month"},
{"lineNum":"  535","line":"  operator/(const year& y, const month& m) noexcept;"},
{"lineNum":"  536","line":"constexpr year_month"},
{"lineNum":"  537","line":"  operator/(const year& y, int m) noexcept;"},
{"lineNum":"  538","line":"constexpr month_day"},
{"lineNum":"  539","line":"  operator/(const month& m, const day& d) noexcept;"},
{"lineNum":"  540","line":"constexpr month_day"},
{"lineNum":"  541","line":"  operator/(const month& m, int d) noexcept;"},
{"lineNum":"  542","line":"constexpr month_day"},
{"lineNum":"  543","line":"  operator/(int m, const day& d) noexcept;"},
{"lineNum":"  544","line":"constexpr month_day"},
{"lineNum":"  545","line":"  operator/(const day& d, const month& m) noexcept;"},
{"lineNum":"  546","line":"constexpr month_day"},
{"lineNum":"  547","line":"  operator/(const day& d, int m) noexcept;"},
{"lineNum":"  548","line":"constexpr month_day_last"},
{"lineNum":"  549","line":"  operator/(const month& m, last_spec) noexcept;"},
{"lineNum":"  550","line":"constexpr month_day_last"},
{"lineNum":"  551","line":"  operator/(int m, last_spec) noexcept;"},
{"lineNum":"  552","line":"constexpr month_day_last"},
{"lineNum":"  553","line":"  operator/(last_spec, const month& m) noexcept;"},
{"lineNum":"  554","line":"constexpr month_day_last"},
{"lineNum":"  555","line":"  operator/(last_spec, int m) noexcept;"},
{"lineNum":"  556","line":"constexpr month_weekday"},
{"lineNum":"  557","line":"  operator/(const month& m, const weekday_indexed& wdi) noexcept;"},
{"lineNum":"  558","line":"constexpr month_weekday"},
{"lineNum":"  559","line":"  operator/(int m, const weekday_indexed& wdi) noexcept;"},
{"lineNum":"  560","line":"constexpr month_weekday"},
{"lineNum":"  561","line":"  operator/(const weekday_indexed& wdi, const month& m) noexcept;"},
{"lineNum":"  562","line":"constexpr month_weekday"},
{"lineNum":"  563","line":"  operator/(const weekday_indexed& wdi, int m) noexcept;"},
{"lineNum":"  564","line":"constexpr month_weekday_last"},
{"lineNum":"  565","line":"  operator/(const month& m, const weekday_last& wdl) noexcept;"},
{"lineNum":"  566","line":"constexpr month_weekday_last"},
{"lineNum":"  567","line":"  operator/(int m, const weekday_last& wdl) noexcept;"},
{"lineNum":"  568","line":"constexpr month_weekday_last"},
{"lineNum":"  569","line":"  operator/(const weekday_last& wdl, const month& m) noexcept;"},
{"lineNum":"  570","line":"constexpr month_weekday_last"},
{"lineNum":"  571","line":"  operator/(const weekday_last& wdl, int m) noexcept;"},
{"lineNum":"  572","line":"constexpr year_month_day"},
{"lineNum":"  573","line":"  operator/(const year_month& ym, const day& d) noexcept;"},
{"lineNum":"  574","line":"constexpr year_month_day"},
{"lineNum":"  575","line":"  operator/(const year_month& ym, int d) noexcept;"},
{"lineNum":"  576","line":"constexpr year_month_day"},
{"lineNum":"  577","line":"  operator/(const year& y, const month_day& md) noexcept;"},
{"lineNum":"  578","line":"constexpr year_month_day"},
{"lineNum":"  579","line":"  operator/(int y, const month_day& md) noexcept;"},
{"lineNum":"  580","line":"constexpr year_month_day"},
{"lineNum":"  581","line":"  operator/(const month_day& md, const year& y) noexcept;"},
{"lineNum":"  582","line":"constexpr year_month_day"},
{"lineNum":"  583","line":"  operator/(const month_day& md, int y) noexcept;"},
{"lineNum":"  584","line":"constexpr year_month_day_last"},
{"lineNum":"  585","line":"  operator/(const year_month& ym, last_spec) noexcept;"},
{"lineNum":"  586","line":"constexpr year_month_day_last"},
{"lineNum":"  587","line":"  operator/(const year& y, const month_day_last& mdl) noexcept;"},
{"lineNum":"  588","line":"constexpr year_month_day_last"},
{"lineNum":"  589","line":"  operator/(int y, const month_day_last& mdl) noexcept;"},
{"lineNum":"  590","line":"constexpr year_month_day_last"},
{"lineNum":"  591","line":"  operator/(const month_day_last& mdl, const year& y) noexcept;"},
{"lineNum":"  592","line":"constexpr year_month_day_last"},
{"lineNum":"  593","line":"  operator/(const month_day_last& mdl, int y) noexcept;"},
{"lineNum":"  594","line":"constexpr year_month_weekday"},
{"lineNum":"  595","line":"  operator/(const year_month& ym, const weekday_indexed& wdi) noexcept;"},
{"lineNum":"  596","line":"constexpr year_month_weekday"},
{"lineNum":"  597","line":"  operator/(const year& y, const month_weekday& mwd) noexcept;"},
{"lineNum":"  598","line":"constexpr year_month_weekday"},
{"lineNum":"  599","line":"  operator/(int y, const month_weekday& mwd) noexcept;"},
{"lineNum":"  600","line":"constexpr year_month_weekday"},
{"lineNum":"  601","line":"  operator/(const month_weekday& mwd, const year& y) noexcept;"},
{"lineNum":"  602","line":"constexpr year_month_weekday"},
{"lineNum":"  603","line":"  operator/(const month_weekday& mwd, int y) noexcept;"},
{"lineNum":"  604","line":"constexpr year_month_weekday_last"},
{"lineNum":"  605","line":"  operator/(const year_month& ym, const weekday_last& wdl) noexcept;"},
{"lineNum":"  606","line":"constexpr year_month_weekday_last"},
{"lineNum":"  607","line":"  operator/(const year& y, const month_weekday_last& mwdl) noexcept;"},
{"lineNum":"  608","line":"constexpr year_month_weekday_last"},
{"lineNum":"  609","line":"  operator/(int y, const month_weekday_last& mwdl) noexcept;"},
{"lineNum":"  610","line":"constexpr year_month_weekday_last"},
{"lineNum":"  611","line":"  operator/(const month_weekday_last& mwdl, const year& y) noexcept;"},
{"lineNum":"  612","line":"constexpr year_month_weekday_last"},
{"lineNum":"  613","line":"  operator/(const month_weekday_last& mwdl, int y) noexcept;"},
{"lineNum":"  614","line":""},
{"lineNum":"  615","line":"// 26.9, class template hh_mm_ss"},
{"lineNum":"  616","line":"template <class Duration>"},
{"lineNum":"  617","line":"class hh_mm_ss"},
{"lineNum":"  618","line":"{"},
{"lineNum":"  619","line":"    bool            is_neg; // exposition only"},
{"lineNum":"  620","line":"    chrono::hours   h;      // exposition only"},
{"lineNum":"  621","line":"    chrono::minutes m;      // exposition only"},
{"lineNum":"  622","line":"    chrono::seconds s;      // exposition only"},
{"lineNum":"  623","line":"    precision       ss;     // exposition only"},
{"lineNum":"  624","line":""},
{"lineNum":"  625","line":"public:"},
{"lineNum":"  626","line":"    static unsigned constexpr fractional_width = see below;"},
{"lineNum":"  627","line":"    using precision                            = see below;"},
{"lineNum":"  628","line":""},
{"lineNum":"  629","line":"    constexpr hh_mm_ss() noexcept : hh_mm_ss{Duration::zero()} {}"},
{"lineNum":"  630","line":"    constexpr explicit hh_mm_ss(Duration d) noexcept;"},
{"lineNum":"  631","line":""},
{"lineNum":"  632","line":"    constexpr bool is_negative() const noexcept;"},
{"lineNum":"  633","line":"    constexpr chrono::hours hours() const noexcept;"},
{"lineNum":"  634","line":"    constexpr chrono::minutes minutes() const noexcept;"},
{"lineNum":"  635","line":"    constexpr chrono::seconds seconds() const noexcept;"},
{"lineNum":"  636","line":"    constexpr precision subseconds() const noexcept;"},
{"lineNum":"  637","line":""},
{"lineNum":"  638","line":"    constexpr explicit operator  precision()   const noexcept;"},
{"lineNum":"  639","line":"    constexpr          precision to_duration() const noexcept;"},
{"lineNum":"  640","line":"};"},
{"lineNum":"  641","line":""},
{"lineNum":"  642","line":"template <class charT, class traits, class Duration>"},
{"lineNum":"  643","line":"  basic_ostream<charT, traits>&"},
{"lineNum":"  644","line":"    operator<<(basic_ostream<charT, traits>& os, hh_mm_ss<Duration> const& hms);"},
{"lineNum":"  645","line":""},
{"lineNum":"  646","line":"// 26.10, 12/24 hour functions"},
{"lineNum":"  647","line":"constexpr bool is_am(hours const& h) noexcept;"},
{"lineNum":"  648","line":"constexpr bool is_pm(hours const& h) noexcept;"},
{"lineNum":"  649","line":"constexpr hours make12(const hours& h) noexcept;"},
{"lineNum":"  650","line":"constexpr hours make24(const hours& h, bool is_pm) noexcept;"},
{"lineNum":"  651","line":""},
{"lineNum":"  652","line":""},
{"lineNum":"  653","line":"// 25.10.2, time zone database     // C++20"},
{"lineNum":"  654","line":"struct tzdb;"},
{"lineNum":"  655","line":"class tzdb_list;"},
{"lineNum":"  656","line":""},
{"lineNum":"  657","line":"// 25.10.2.3, time zone database access    // C++20"},
{"lineNum":"  658","line":"const tzdb& get_tzdb();"},
{"lineNum":"  659","line":"tzdb_list& get_tzdb_list();"},
{"lineNum":"  660","line":"const time_zone* locate_zone(string_view tz_name);"},
{"lineNum":"  661","line":"const time_zone* current_zone();"},
{"lineNum":"  662","line":""},
{"lineNum":"  663","line":"// 25.10.2.4, remote time zone database support    // C++20"},
{"lineNum":"  664","line":"const tzdb& reload_tzdb();"},
{"lineNum":"  665","line":"string remote_version();"},
{"lineNum":"  666","line":""},
{"lineNum":"  667","line":"// 25.10.3, exception classes    // C++20"},
{"lineNum":"  668","line":"class nonexistent_local_time;"},
{"lineNum":"  669","line":"class ambiguous_local_time;"},
{"lineNum":"  670","line":""},
{"lineNum":"  671","line":"// 25.10.4, information classes    // C++20"},
{"lineNum":"  672","line":"struct sys_info;"},
{"lineNum":"  673","line":"struct local_info;"},
{"lineNum":"  674","line":""},
{"lineNum":"  675","line":"// 25.10.5, class time_zone    // C++20"},
{"lineNum":"  676","line":"enum class choose {earliest, latest};"},
{"lineNum":"  677","line":"class time_zone;"},
{"lineNum":"  678","line":"bool operator==(const time_zone& x, const time_zone& y) noexcept;"},
{"lineNum":"  679","line":"bool operator!=(const time_zone& x, const time_zone& y) noexcept;"},
{"lineNum":"  680","line":"bool operator<(const time_zone& x, const time_zone& y) noexcept;"},
{"lineNum":"  681","line":"bool operator>(const time_zone& x, const time_zone& y) noexcept;"},
{"lineNum":"  682","line":"bool operator<=(const time_zone& x, const time_zone& y) noexcept;"},
{"lineNum":"  683","line":"bool operator>=(const time_zone& x, const time_zone& y) noexcept;"},
{"lineNum":"  684","line":""},
{"lineNum":"  685","line":"// 25.10.6, class template zoned_traits    // C++20"},
{"lineNum":"  686","line":"template<class T> struct zoned_traits;"},
{"lineNum":"  687","line":""},
{"lineNum":"  688","line":"// 25.10.7, class template zoned_time    // C++20"},
{"lineNum":"  689","line":"template<class Duration, class TimeZonePtr = const time_zone*> class zoned_time;"},
{"lineNum":"  690","line":"using zoned_seconds = zoned_time<seconds>;"},
{"lineNum":"  691","line":""},
{"lineNum":"  692","line":"template<class Duration1, class Duration2, class TimeZonePtr>"},
{"lineNum":"  693","line":"  bool operator==(const zoned_time<Duration1, TimeZonePtr>& x,"},
{"lineNum":"  694","line":"                  const zoned_time<Duration2, TimeZonePtr>& y);"},
{"lineNum":"  695","line":"template<class Duration1, class Duration2, class TimeZonePtr>"},
{"lineNum":"  696","line":"  bool operator!=(const zoned_time<Duration1, TimeZonePtr>& x,"},
{"lineNum":"  697","line":"                  const zoned_time<Duration2, TimeZonePtr>& y);"},
{"lineNum":"  698","line":""},
{"lineNum":"  699","line":"// 25.10.8, leap second support    // C++20"},
{"lineNum":"  700","line":"class leap;"},
{"lineNum":"  701","line":""},
{"lineNum":"  702","line":"bool operator==(const leap& x, const leap& y);"},
{"lineNum":"  703","line":"bool operator!=(const leap& x, const leap& y);"},
{"lineNum":"  704","line":"bool operator< (const leap& x, const leap& y);"},
{"lineNum":"  705","line":"bool operator> (const leap& x, const leap& y);"},
{"lineNum":"  706","line":"bool operator<=(const leap& x, const leap& y);"},
{"lineNum":"  707","line":"bool operator>=(const leap& x, const leap& y);"},
{"lineNum":"  708","line":"template<class Duration>"},
{"lineNum":"  709","line":"  bool operator==(const leap& x, const sys_time<Duration>& y);"},
{"lineNum":"  710","line":"template<class Duration>"},
{"lineNum":"  711","line":"  bool operator==(const sys_time<Duration>& x, const leap& y);"},
{"lineNum":"  712","line":"template<class Duration>"},
{"lineNum":"  713","line":"  bool operator!=(const leap& x, const sys_time<Duration>& y);"},
{"lineNum":"  714","line":"template<class Duration>"},
{"lineNum":"  715","line":"  bool operator!=(const sys_time<Duration>& x, const leap& y);"},
{"lineNum":"  716","line":"template<class Duration>"},
{"lineNum":"  717","line":"  bool operator< (const leap& x, const sys_time<Duration>& y);"},
{"lineNum":"  718","line":"template<class Duration>"},
{"lineNum":"  719","line":"  bool operator< (const sys_time<Duration>& x, const leap& y);"},
{"lineNum":"  720","line":"template<class Duration>"},
{"lineNum":"  721","line":"  bool operator> (const leap& x, const sys_time<Duration>& y);"},
{"lineNum":"  722","line":"template<class Duration>"},
{"lineNum":"  723","line":"  bool operator> (const sys_time<Duration>& x, const leap& y);"},
{"lineNum":"  724","line":"template<class Duration>"},
{"lineNum":"  725","line":"  bool operator<=(const leap& x, const sys_time<Duration>& y);"},
{"lineNum":"  726","line":"template<class Duration>"},
{"lineNum":"  727","line":"  bool operator<=(const sys_time<Duration>& x, const leap& y);"},
{"lineNum":"  728","line":"template<class Duration>"},
{"lineNum":"  729","line":"  bool operator>=(const leap& x, const sys_time<Duration>& y);"},
{"lineNum":"  730","line":"template<class Duration>"},
{"lineNum":"  731","line":"  bool operator>=(const sys_time<Duration>& x, const leap& y);"},
{"lineNum":"  732","line":""},
{"lineNum":"  733","line":"// 25.10.9, class link    // C++20"},
{"lineNum":"  734","line":"class link;"},
{"lineNum":"  735","line":"bool operator==(const link& x, const link& y);"},
{"lineNum":"  736","line":"bool operator!=(const link& x, const link& y);"},
{"lineNum":"  737","line":"bool operator< (const link& x, const link& y);"},
{"lineNum":"  738","line":"bool operator> (const link& x, const link& y);"},
{"lineNum":"  739","line":"bool operator<=(const link& x, const link& y);"},
{"lineNum":"  740","line":"bool operator>=(const link& x, const link& y);"},
{"lineNum":"  741","line":""},
{"lineNum":"  742","line":"// 25.11, formatting    // C++20"},
{"lineNum":"  743","line":"template<class charT, class Streamable>"},
{"lineNum":"  744","line":"  basic_string<charT>"},
{"lineNum":"  745","line":"    format(const charT* fmt, const Streamable& s);"},
{"lineNum":"  746","line":""},
{"lineNum":"  747","line":"template<class charT, class Streamable>"},
{"lineNum":"  748","line":"  basic_string<charT>"},
{"lineNum":"  749","line":"    format(const locale& loc, const charT* fmt, const Streamable& s);"},
{"lineNum":"  750","line":""},
{"lineNum":"  751","line":"template<class charT, class traits, class Alloc, class Streamable>"},
{"lineNum":"  752","line":"  basic_string<charT, traits, Alloc>"},
{"lineNum":"  753","line":"    format(const basic_string<charT, traits, Alloc>& fmt, const Streamable& s);"},
{"lineNum":"  754","line":""},
{"lineNum":"  755","line":"template<class charT, class traits, class Alloc, class Streamable>"},
{"lineNum":"  756","line":"  basic_string<charT, traits, Alloc>"},
{"lineNum":"  757","line":"    format(const locale& loc, const basic_string<charT, traits, Alloc>& fmt,"},
{"lineNum":"  758","line":"           const Streamable& s);"},
{"lineNum":"  759","line":""},
{"lineNum":"  760","line":"// 25.12, parsing    // C++20"},
{"lineNum":"  761","line":"template<class charT, class traits, class Alloc, class Parsable>"},
{"lineNum":"  762","line":"unspecified"},
{"lineNum":"  763","line":"    parse(const basic_string<charT, traits, Alloc>& format, Parsable& tp);"},
{"lineNum":"  764","line":""},
{"lineNum":"  765","line":"template<class charT, class traits, class Alloc, class Parsable>"},
{"lineNum":"  766","line":"unspecified"},
{"lineNum":"  767","line":"    parse(const basic_string<charT, traits, Alloc>& format, Parsable& tp,"},
{"lineNum":"  768","line":"          basic_string<charT, traits, Alloc>& abbrev);"},
{"lineNum":"  769","line":""},
{"lineNum":"  770","line":"template<class charT, class traits, class Alloc, class Parsable>"},
{"lineNum":"  771","line":"unspecified"},
{"lineNum":"  772","line":"    parse(const basic_string<charT, traits, Alloc>& format, Parsable& tp,"},
{"lineNum":"  773","line":"          minutes& offset);"},
{"lineNum":"  774","line":""},
{"lineNum":"  775","line":"template<class charT, class traits, class Alloc, class Parsable>"},
{"lineNum":"  776","line":"unspecified"},
{"lineNum":"  777","line":"    parse(const basic_string<charT, traits, Alloc>& format, Parsable& tp,"},
{"lineNum":"  778","line":"          basic_string<charT, traits, Alloc>& abbrev, minutes& offset);"},
{"lineNum":"  779","line":""},
{"lineNum":"  780","line":"// calendrical constants"},
{"lineNum":"  781","line":"inline constexpr last_spec                              last{};       // C++20"},
{"lineNum":"  782","line":"inline constexpr chrono::weekday                        Sunday{0};    // C++20"},
{"lineNum":"  783","line":"inline constexpr chrono::weekday                        Monday{1};    // C++20"},
{"lineNum":"  784","line":"inline constexpr chrono::weekday                        Tuesday{2};   // C++20"},
{"lineNum":"  785","line":"inline constexpr chrono::weekday                        Wednesday{3}; // C++20"},
{"lineNum":"  786","line":"inline constexpr chrono::weekday                        Thursday{4};  // C++20"},
{"lineNum":"  787","line":"inline constexpr chrono::weekday                        Friday{5};    // C++20"},
{"lineNum":"  788","line":"inline constexpr chrono::weekday                        Saturday{6};  // C++20"},
{"lineNum":"  789","line":""},
{"lineNum":"  790","line":"inline constexpr chrono::month                          January{1};   // C++20"},
{"lineNum":"  791","line":"inline constexpr chrono::month                          February{2};  // C++20"},
{"lineNum":"  792","line":"inline constexpr chrono::month                          March{3};     // C++20"},
{"lineNum":"  793","line":"inline constexpr chrono::month                          April{4};     // C++20"},
{"lineNum":"  794","line":"inline constexpr chrono::month                          May{5};       // C++20"},
{"lineNum":"  795","line":"inline constexpr chrono::month                          June{6};      // C++20"},
{"lineNum":"  796","line":"inline constexpr chrono::month                          July{7};      // C++20"},
{"lineNum":"  797","line":"inline constexpr chrono::month                          August{8};    // C++20"},
{"lineNum":"  798","line":"inline constexpr chrono::month                          September{9}; // C++20"},
{"lineNum":"  799","line":"inline constexpr chrono::month                          October{10};  // C++20"},
{"lineNum":"  800","line":"inline constexpr chrono::month                          November{11}; // C++20"},
{"lineNum":"  801","line":"inline constexpr chrono::month                          December{12}; // C++20"},
{"lineNum":"  802","line":"}  // chrono"},
{"lineNum":"  803","line":""},
{"lineNum":"  804","line":"inline namespace literals {"},
{"lineNum":"  805","line":"  inline namespace chrono_literals {"},
{"lineNum":"  806","line":"constexpr chrono::hours                                 operator \"\"h(unsigned long long); // C++14"},
{"lineNum":"  807","line":"constexpr chrono::duration<unspecified , ratio<3600,1>> operator \"\"h(long double); // C++14"},
{"lineNum":"  808","line":"constexpr chrono::minutes                               operator \"\"min(unsigned long long); // C++14"},
{"lineNum":"  809","line":"constexpr chrono::duration<unspecified , ratio<60,1>>   operator \"\"min(long double); // C++14"},
{"lineNum":"  810","line":"constexpr chrono::seconds                               operator \"\"s(unsigned long long); // C++14"},
{"lineNum":"  811","line":"constexpr chrono::duration<unspecified >                operator \"\"s(long double); // C++14"},
{"lineNum":"  812","line":"constexpr chrono::milliseconds                          operator \"\"ms(unsigned long long); // C++14"},
{"lineNum":"  813","line":"constexpr chrono::duration<unspecified , milli>         operator \"\"ms(long double); // C++14"},
{"lineNum":"  814","line":"constexpr chrono::microseconds                          operator \"\"us(unsigned long long); // C++14"},
{"lineNum":"  815","line":"constexpr chrono::duration<unspecified , micro>         operator \"\"us(long double); // C++14"},
{"lineNum":"  816","line":"constexpr chrono::nanoseconds                           operator \"\"ns(unsigned long long); // C++14"},
{"lineNum":"  817","line":"constexpr chrono::duration<unspecified , nano>          operator \"\"ns(long double); // C++14"},
{"lineNum":"  818","line":"constexpr chrono::day                                   operator \"\"d(unsigned long long d) noexcept; // C++20"},
{"lineNum":"  819","line":"constexpr chrono::year                                  operator \"\"y(unsigned long long y) noexcept; // C++20"},
{"lineNum":"  820","line":"}  // chrono_literals"},
{"lineNum":"  821","line":"}  // literals"},
{"lineNum":"  822","line":""},
{"lineNum":"  823","line":"}  // std"},
{"lineNum":"  824","line":"*/"},
{"lineNum":"  825","line":""},
{"lineNum":"  826","line":"#include <__availability>"},
{"lineNum":"  827","line":"#include <__config>"},
{"lineNum":"  828","line":"#include <compare>"},
{"lineNum":"  829","line":"#include <ctime>"},
{"lineNum":"  830","line":"#include <limits>"},
{"lineNum":"  831","line":"#include <ratio>"},
{"lineNum":"  832","line":"#include <type_traits>"},
{"lineNum":"  833","line":"#include <version>"},
{"lineNum":"  834","line":""},
{"lineNum":"  835","line":"#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"},
{"lineNum":"  836","line":"#pragma GCC system_header"},
{"lineNum":"  837","line":"#endif"},
{"lineNum":"  838","line":""},
{"lineNum":"  839","line":"_LIBCPP_PUSH_MACROS"},
{"lineNum":"  840","line":"#include <__undef_macros>"},
{"lineNum":"  841","line":""},
{"lineNum":"  842","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  843","line":"_LIBCPP_BEGIN_NAMESPACE_FILESYSTEM"},
{"lineNum":"  844","line":"struct _FilesystemClock;"},
{"lineNum":"  845","line":"_LIBCPP_END_NAMESPACE_FILESYSTEM"},
{"lineNum":"  846","line":"#endif // !_LIBCPP_CXX03_LANG"},
{"lineNum":"  847","line":""},
{"lineNum":"  848","line":"_LIBCPP_BEGIN_NAMESPACE_STD"},
{"lineNum":"  849","line":""},
{"lineNum":"  850","line":"namespace chrono"},
{"lineNum":"  851","line":"{"},
{"lineNum":"  852","line":""},
{"lineNum":"  853","line":"template <class _Rep, class _Period = ratio<1> > class _LIBCPP_TEMPLATE_VIS duration;"},
{"lineNum":"  854","line":""},
{"lineNum":"  855","line":"template <class _Tp>"},
{"lineNum":"  856","line":"struct __is_duration : false_type {};"},
{"lineNum":"  857","line":""},
{"lineNum":"  858","line":"template <class _Rep, class _Period>"},
{"lineNum":"  859","line":"struct __is_duration<duration<_Rep, _Period> > : true_type  {};"},
{"lineNum":"  860","line":""},
{"lineNum":"  861","line":"template <class _Rep, class _Period>"},
{"lineNum":"  862","line":"struct __is_duration<const duration<_Rep, _Period> > : true_type  {};"},
{"lineNum":"  863","line":""},
{"lineNum":"  864","line":"template <class _Rep, class _Period>"},
{"lineNum":"  865","line":"struct __is_duration<volatile duration<_Rep, _Period> > : true_type  {};"},
{"lineNum":"  866","line":""},
{"lineNum":"  867","line":"template <class _Rep, class _Period>"},
{"lineNum":"  868","line":"struct __is_duration<const volatile duration<_Rep, _Period> > : true_type  {};"},
{"lineNum":"  869","line":""},
{"lineNum":"  870","line":"} // chrono"},
{"lineNum":"  871","line":""},
{"lineNum":"  872","line":"template <class _Rep1, class _Period1, class _Rep2, class _Period2>"},
{"lineNum":"  873","line":"struct _LIBCPP_TEMPLATE_VIS common_type<chrono::duration<_Rep1, _Period1>,"},
{"lineNum":"  874","line":"                                         chrono::duration<_Rep2, _Period2> >"},
{"lineNum":"  875","line":"{"},
{"lineNum":"  876","line":"    typedef chrono::duration<typename common_type<_Rep1, _Rep2>::type,"},
{"lineNum":"  877","line":"                             typename __ratio_gcd<_Period1, _Period2>::type> type;"},
{"lineNum":"  878","line":"};"},
{"lineNum":"  879","line":""},
{"lineNum":"  880","line":"namespace chrono {"},
{"lineNum":"  881","line":""},
{"lineNum":"  882","line":"// duration_cast"},
{"lineNum":"  883","line":""},
{"lineNum":"  884","line":"template <class _FromDuration, class _ToDuration,"},
{"lineNum":"  885","line":"          class _Period = typename ratio_divide<typename _FromDuration::period, typename _ToDuration::period>::type,"},
{"lineNum":"  886","line":"          bool = _Period::num == 1,"},
{"lineNum":"  887","line":"          bool = _Period::den == 1>"},
{"lineNum":"  888","line":"struct __duration_cast;"},
{"lineNum":"  889","line":""},
{"lineNum":"  890","line":"template <class _FromDuration, class _ToDuration, class _Period>"},
{"lineNum":"  891","line":"struct __duration_cast<_FromDuration, _ToDuration, _Period, true, true>"},
{"lineNum":"  892","line":"{"},
{"lineNum":"  893","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":"  894","line":"    _ToDuration operator()(const _FromDuration& __fd) const"},
{"lineNum":"  895","line":"    {"},
{"lineNum":"  896","line":"        return _ToDuration(static_cast<typename _ToDuration::rep>(__fd.count()));"},
{"lineNum":"  897","line":"    }"},
{"lineNum":"  898","line":"};"},
{"lineNum":"  899","line":""},
{"lineNum":"  900","line":"template <class _FromDuration, class _ToDuration, class _Period>"},
{"lineNum":"  901","line":"struct __duration_cast<_FromDuration, _ToDuration, _Period, true, false>"},
{"lineNum":"  902","line":"{"},
{"lineNum":"  903","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":"  904","line":"    _ToDuration operator()(const _FromDuration& __fd) const"},
{"lineNum":"  905","line":"    {"},
{"lineNum":"  906","line":"        typedef typename common_type<typename _ToDuration::rep, typename _FromDuration::rep, intmax_t>::type _Ct;"},
{"lineNum":"  907","line":"        return _ToDuration(static_cast<typename _ToDuration::rep>("},
{"lineNum":"  908","line":"                           static_cast<_Ct>(__fd.count()) / static_cast<_Ct>(_Period::den)));"},
{"lineNum":"  909","line":"    }"},
{"lineNum":"  910","line":"};"},
{"lineNum":"  911","line":""},
{"lineNum":"  912","line":"template <class _FromDuration, class _ToDuration, class _Period>"},
{"lineNum":"  913","line":"struct __duration_cast<_FromDuration, _ToDuration, _Period, false, true>"},
{"lineNum":"  914","line":"{"},
{"lineNum":"  915","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":"  916","line":"    _ToDuration operator()(const _FromDuration& __fd) const"},
{"lineNum":"  917","line":"    {"},
{"lineNum":"  918","line":"        typedef typename common_type<typename _ToDuration::rep, typename _FromDuration::rep, intmax_t>::type _Ct;"},
{"lineNum":"  919","line":"        return _ToDuration(static_cast<typename _ToDuration::rep>("},
{"lineNum":"  920","line":"                           static_cast<_Ct>(__fd.count()) * static_cast<_Ct>(_Period::num)));"},
{"lineNum":"  921","line":"    }"},
{"lineNum":"  922","line":"};"},
{"lineNum":"  923","line":""},
{"lineNum":"  924","line":"template <class _FromDuration, class _ToDuration, class _Period>"},
{"lineNum":"  925","line":"struct __duration_cast<_FromDuration, _ToDuration, _Period, false, false>"},
{"lineNum":"  926","line":"{"},
{"lineNum":"  927","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":"  928","line":"    _ToDuration operator()(const _FromDuration& __fd) const"},
{"lineNum":"  929","line":"    {"},
{"lineNum":"  930","line":"        typedef typename common_type<typename _ToDuration::rep, typename _FromDuration::rep, intmax_t>::type _Ct;"},
{"lineNum":"  931","line":"        return _ToDuration(static_cast<typename _ToDuration::rep>("},
{"lineNum":"  932","line":"                           static_cast<_Ct>(__fd.count()) * static_cast<_Ct>(_Period::num)"},
{"lineNum":"  933","line":"                                                          / static_cast<_Ct>(_Period::den)));"},
{"lineNum":"  934","line":"    }"},
{"lineNum":"  935","line":"};"},
{"lineNum":"  936","line":""},
{"lineNum":"  937","line":"template <class _ToDuration, class _Rep, class _Period>"},
{"lineNum":"  938","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  939","line":"_LIBCPP_CONSTEXPR"},
{"lineNum":"  940","line":"typename enable_if"},
{"lineNum":"  941","line":"<"},
{"lineNum":"  942","line":"    __is_duration<_ToDuration>::value,"},
{"lineNum":"  943","line":"    _ToDuration"},
{"lineNum":"  944","line":">::type"},
{"lineNum":"  945","line":"duration_cast(const duration<_Rep, _Period>& __fd)"},
{"lineNum":"  946","line":"{"},
{"lineNum":"  947","line":"    return __duration_cast<duration<_Rep, _Period>, _ToDuration>()(__fd);"},
{"lineNum":"  948","line":"}"},
{"lineNum":"  949","line":""},
{"lineNum":"  950","line":"template <class _Rep>"},
{"lineNum":"  951","line":"struct _LIBCPP_TEMPLATE_VIS treat_as_floating_point : is_floating_point<_Rep> {};"},
{"lineNum":"  952","line":""},
{"lineNum":"  953","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":"  954","line":"template <class _Rep>"},
{"lineNum":"  955","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool treat_as_floating_point_v"},
{"lineNum":"  956","line":"    = treat_as_floating_point<_Rep>::value;"},
{"lineNum":"  957","line":"#endif"},
{"lineNum":"  958","line":""},
{"lineNum":"  959","line":"template <class _Rep>"},
{"lineNum":"  960","line":"struct _LIBCPP_TEMPLATE_VIS duration_values"},
{"lineNum":"  961","line":"{"},
{"lineNum":"  962","line":"public:"},
{"lineNum":"  963","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR _Rep zero() _NOEXCEPT {return _Rep(0);}"},
{"lineNum":"  964","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR _Rep max()  _NOEXCEPT {return numeric_limits<_Rep>::max();}"},
{"lineNum":"  965","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR _Rep min()  _NOEXCEPT {return numeric_limits<_Rep>::lowest();}"},
{"lineNum":"  966","line":"};"},
{"lineNum":"  967","line":""},
{"lineNum":"  968","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":"  969","line":"template <class _ToDuration, class _Rep, class _Period>"},
{"lineNum":"  970","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":"  971","line":"typename enable_if"},
{"lineNum":"  972","line":"<"},
{"lineNum":"  973","line":"    __is_duration<_ToDuration>::value,"},
{"lineNum":"  974","line":"    _ToDuration"},
{"lineNum":"  975","line":">::type"},
{"lineNum":"  976","line":"floor(const duration<_Rep, _Period>& __d)"},
{"lineNum":"  977","line":"{"},
{"lineNum":"  978","line":"    _ToDuration __t = duration_cast<_ToDuration>(__d);"},
{"lineNum":"  979","line":"    if (__t > __d)"},
{"lineNum":"  980","line":"        __t = __t - _ToDuration{1};"},
{"lineNum":"  981","line":"    return __t;"},
{"lineNum":"  982","line":"}"},
{"lineNum":"  983","line":""},
{"lineNum":"  984","line":"template <class _ToDuration, class _Rep, class _Period>"},
{"lineNum":"  985","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":"  986","line":"typename enable_if"},
{"lineNum":"  987","line":"<"},
{"lineNum":"  988","line":"    __is_duration<_ToDuration>::value,"},
{"lineNum":"  989","line":"    _ToDuration"},
{"lineNum":"  990","line":">::type"},
{"lineNum":"  991","line":"ceil(const duration<_Rep, _Period>& __d)"},
{"lineNum":"  992","line":"{"},
{"lineNum":"  993","line":"    _ToDuration __t = duration_cast<_ToDuration>(__d);"},
{"lineNum":"  994","line":"    if (__t < __d)"},
{"lineNum":"  995","line":"        __t = __t + _ToDuration{1};"},
{"lineNum":"  996","line":"    return __t;"},
{"lineNum":"  997","line":"}"},
{"lineNum":"  998","line":""},
{"lineNum":"  999","line":"template <class _ToDuration, class _Rep, class _Period>"},
{"lineNum":" 1000","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":" 1001","line":"typename enable_if"},
{"lineNum":" 1002","line":"<"},
{"lineNum":" 1003","line":"    __is_duration<_ToDuration>::value,"},
{"lineNum":" 1004","line":"    _ToDuration"},
{"lineNum":" 1005","line":">::type"},
{"lineNum":" 1006","line":"round(const duration<_Rep, _Period>& __d)"},
{"lineNum":" 1007","line":"{"},
{"lineNum":" 1008","line":"    _ToDuration __lower = floor<_ToDuration>(__d);"},
{"lineNum":" 1009","line":"    _ToDuration __upper = __lower + _ToDuration{1};"},
{"lineNum":" 1010","line":"    auto __lowerDiff = __d - __lower;"},
{"lineNum":" 1011","line":"    auto __upperDiff = __upper - __d;"},
{"lineNum":" 1012","line":"    if (__lowerDiff < __upperDiff)"},
{"lineNum":" 1013","line":"        return __lower;"},
{"lineNum":" 1014","line":"    if (__lowerDiff > __upperDiff)"},
{"lineNum":" 1015","line":"        return __upper;"},
{"lineNum":" 1016","line":"    return __lower.count() & 1 ? __upper : __lower;"},
{"lineNum":" 1017","line":"}"},
{"lineNum":" 1018","line":"#endif"},
{"lineNum":" 1019","line":""},
{"lineNum":" 1020","line":"// duration"},
{"lineNum":" 1021","line":""},
{"lineNum":" 1022","line":"template <class _Rep, class _Period>"},
{"lineNum":" 1023","line":"class _LIBCPP_TEMPLATE_VIS duration"},
{"lineNum":" 1024","line":"{"},
{"lineNum":" 1025","line":"    static_assert(!__is_duration<_Rep>::value, \"A duration representation can not be a duration\");"},
{"lineNum":" 1026","line":"    static_assert(__is_ratio<_Period>::value, \"Second template parameter of duration must be a std::ratio\");"},
{"lineNum":" 1027","line":"    static_assert(_Period::num > 0, \"duration period must be positive\");"},
{"lineNum":" 1028","line":""},
{"lineNum":" 1029","line":"    template <class _R1, class _R2>"},
{"lineNum":" 1030","line":"    struct __no_overflow"},
{"lineNum":" 1031","line":"    {"},
{"lineNum":" 1032","line":"    private:"},
{"lineNum":" 1033","line":"        static const intmax_t __gcd_n1_n2 = __static_gcd<_R1::num, _R2::num>::value;"},
{"lineNum":" 1034","line":"        static const intmax_t __gcd_d1_d2 = __static_gcd<_R1::den, _R2::den>::value;"},
{"lineNum":" 1035","line":"        static const intmax_t __n1 = _R1::num / __gcd_n1_n2;"},
{"lineNum":" 1036","line":"        static const intmax_t __d1 = _R1::den / __gcd_d1_d2;"},
{"lineNum":" 1037","line":"        static const intmax_t __n2 = _R2::num / __gcd_n1_n2;"},
{"lineNum":" 1038","line":"        static const intmax_t __d2 = _R2::den / __gcd_d1_d2;"},
{"lineNum":" 1039","line":"        static const intmax_t max = -((intmax_t(1) << (sizeof(intmax_t) * CHAR_BIT - 1)) + 1);"},
{"lineNum":" 1040","line":""},
{"lineNum":" 1041","line":"        template <intmax_t _Xp, intmax_t _Yp, bool __overflow>"},
{"lineNum":" 1042","line":"        struct __mul    // __overflow == false"},
{"lineNum":" 1043","line":"        {"},
{"lineNum":" 1044","line":"            static const intmax_t value = _Xp * _Yp;"},
{"lineNum":" 1045","line":"        };"},
{"lineNum":" 1046","line":""},
{"lineNum":" 1047","line":"        template <intmax_t _Xp, intmax_t _Yp>"},
{"lineNum":" 1048","line":"        struct __mul<_Xp, _Yp, true>"},
{"lineNum":" 1049","line":"        {"},
{"lineNum":" 1050","line":"            static const intmax_t value = 1;"},
{"lineNum":" 1051","line":"        };"},
{"lineNum":" 1052","line":""},
{"lineNum":" 1053","line":"    public:"},
{"lineNum":" 1054","line":"        static const bool value = (__n1 <= max / __d2) && (__n2 <= max / __d1);"},
{"lineNum":" 1055","line":"        typedef ratio<__mul<__n1, __d2, !value>::value,"},
{"lineNum":" 1056","line":"                      __mul<__n2, __d1, !value>::value> type;"},
{"lineNum":" 1057","line":"    };"},
{"lineNum":" 1058","line":""},
{"lineNum":" 1059","line":"public:"},
{"lineNum":" 1060","line":"    typedef _Rep rep;"},
{"lineNum":" 1061","line":"    typedef typename _Period::type period;"},
{"lineNum":" 1062","line":"private:"},
{"lineNum":" 1063","line":"    rep __rep_;"},
{"lineNum":" 1064","line":"public:"},
{"lineNum":" 1065","line":""},
{"lineNum":" 1066","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":" 1067","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1068","line":"        duration() = default;"},
{"lineNum":" 1069","line":"#else"},
{"lineNum":" 1070","line":"        duration() {}"},
{"lineNum":" 1071","line":"#endif"},
{"lineNum":" 1072","line":""},
{"lineNum":" 1073","line":"    template <class _Rep2>"},
{"lineNum":" 1074","line":"        _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":" 1075","line":"        explicit duration(const _Rep2& __r,"},
{"lineNum":" 1076","line":"            typename enable_if"},
{"lineNum":" 1077","line":"            <"},
{"lineNum":" 1078","line":"               is_convertible<_Rep2, rep>::value &&"},
{"lineNum":" 1079","line":"               (treat_as_floating_point<rep>::value ||"},
{"lineNum":" 1080","line":"               !treat_as_floating_point<_Rep2>::value)"},
{"lineNum":" 1081","line":"            >::type* = nullptr)"},
{"lineNum":" 1082","line":"                : __rep_(__r) {}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1083","line":""},
{"lineNum":" 1084","line":"    // conversions"},
{"lineNum":" 1085","line":"    template <class _Rep2, class _Period2>"},
{"lineNum":" 1086","line":"        _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":" 1087","line":"        duration(const duration<_Rep2, _Period2>& __d,"},
{"lineNum":" 1088","line":"            typename enable_if"},
{"lineNum":" 1089","line":"            <"},
{"lineNum":" 1090","line":"                __no_overflow<_Period2, period>::value && ("},
{"lineNum":" 1091","line":"                treat_as_floating_point<rep>::value ||"},
{"lineNum":" 1092","line":"                (__no_overflow<_Period2, period>::type::den == 1 &&"},
{"lineNum":" 1093","line":"                 !treat_as_floating_point<_Rep2>::value))"},
{"lineNum":" 1094","line":"            >::type* = nullptr)"},
{"lineNum":" 1095","line":"                : __rep_(chrono::duration_cast<duration>(__d).count()) {}"},
{"lineNum":" 1096","line":""},
{"lineNum":" 1097","line":"    // observer"},
{"lineNum":" 1098","line":""},
{"lineNum":" 1099","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR rep count() const {return __rep_;}"},
{"lineNum":" 1100","line":""},
{"lineNum":" 1101","line":"    // arithmetic"},
{"lineNum":" 1102","line":""},
{"lineNum":" 1103","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR typename common_type<duration>::type operator+() const {return typename common_type<duration>::type(*this);}"},
{"lineNum":" 1104","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR typename common_type<duration>::type operator-() const {return typename common_type<duration>::type(-__rep_);}"},
{"lineNum":" 1105","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 duration& operator++()      {++__rep_; return *this;}"},
{"lineNum":" 1106","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 duration  operator++(int)   {return duration(__rep_++);}"},
{"lineNum":" 1107","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 duration& operator--()      {--__rep_; return *this;}"},
{"lineNum":" 1108","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 duration  operator--(int)   {return duration(__rep_--);}"},
{"lineNum":" 1109","line":""},
{"lineNum":" 1110","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 duration& operator+=(const duration& __d) {__rep_ += __d.count(); return *this;}"},
{"lineNum":" 1111","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 duration& operator-=(const duration& __d) {__rep_ -= __d.count(); return *this;}"},
{"lineNum":" 1112","line":""},
{"lineNum":" 1113","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 duration& operator*=(const rep& rhs) {__rep_ *= rhs; return *this;}"},
{"lineNum":" 1114","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 duration& operator/=(const rep& rhs) {__rep_ /= rhs; return *this;}"},
{"lineNum":" 1115","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 duration& operator%=(const rep& rhs) {__rep_ %= rhs; return *this;}"},
{"lineNum":" 1116","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 duration& operator%=(const duration& rhs) {__rep_ %= rhs.count(); return *this;}"},
{"lineNum":" 1117","line":""},
{"lineNum":" 1118","line":"    // special values"},
{"lineNum":" 1119","line":""},
{"lineNum":" 1120","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR duration zero() _NOEXCEPT {return duration(duration_values<rep>::zero());}"},
{"lineNum":" 1121","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR duration min()  _NOEXCEPT {return duration(duration_values<rep>::min());}"},
{"lineNum":" 1122","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR duration max()  _NOEXCEPT {return duration(duration_values<rep>::max());}"},
{"lineNum":" 1123","line":"};"},
{"lineNum":" 1124","line":""},
{"lineNum":" 1125","line":"typedef duration<long long,         nano> nanoseconds;"},
{"lineNum":" 1126","line":"typedef duration<long long,        micro> microseconds;"},
{"lineNum":" 1127","line":"typedef duration<long long,        milli> milliseconds;"},
{"lineNum":" 1128","line":"typedef duration<long long              > seconds;"},
{"lineNum":" 1129","line":"typedef duration<     long, ratio<  60> > minutes;"},
{"lineNum":" 1130","line":"typedef duration<     long, ratio<3600> > hours;"},
{"lineNum":" 1131","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":" 1132","line":"typedef duration<     int, ratio_multiply<ratio<24>, hours::period>>         days;"},
{"lineNum":" 1133","line":"typedef duration<     int, ratio_multiply<ratio<7>,   days::period>>         weeks;"},
{"lineNum":" 1134","line":"typedef duration<     int, ratio_multiply<ratio<146097, 400>, days::period>> years;"},
{"lineNum":" 1135","line":"typedef duration<     int, ratio_divide<years::period, ratio<12>>>           months;"},
{"lineNum":" 1136","line":"#endif"},
{"lineNum":" 1137","line":"// Duration =="},
{"lineNum":" 1138","line":""},
{"lineNum":" 1139","line":"template <class _LhsDuration, class _RhsDuration>"},
{"lineNum":" 1140","line":"struct __duration_eq"},
{"lineNum":" 1141","line":"{"},
{"lineNum":" 1142","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":" 1143","line":"    bool operator()(const _LhsDuration& __lhs, const _RhsDuration& __rhs) const"},
{"lineNum":" 1144","line":"        {"},
{"lineNum":" 1145","line":"            typedef typename common_type<_LhsDuration, _RhsDuration>::type _Ct;"},
{"lineNum":" 1146","line":"            return _Ct(__lhs).count() == _Ct(__rhs).count();"},
{"lineNum":" 1147","line":"        }"},
{"lineNum":" 1148","line":"};"},
{"lineNum":" 1149","line":""},
{"lineNum":" 1150","line":"template <class _LhsDuration>"},
{"lineNum":" 1151","line":"struct __duration_eq<_LhsDuration, _LhsDuration>"},
{"lineNum":" 1152","line":"{"},
{"lineNum":" 1153","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":" 1154","line":"    bool operator()(const _LhsDuration& __lhs, const _LhsDuration& __rhs) const"},
{"lineNum":" 1155","line":"        {return __lhs.count() == __rhs.count();}"},
{"lineNum":" 1156","line":"};"},
{"lineNum":" 1157","line":""},
{"lineNum":" 1158","line":"template <class _Rep1, class _Period1, class _Rep2, class _Period2>"},
{"lineNum":" 1159","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1160","line":"_LIBCPP_CONSTEXPR"},
{"lineNum":" 1161","line":"bool"},
{"lineNum":" 1162","line":"operator==(const duration<_Rep1, _Period1>& __lhs, const duration<_Rep2, _Period2>& __rhs)"},
{"lineNum":" 1163","line":"{"},
{"lineNum":" 1164","line":"    return __duration_eq<duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >()(__lhs, __rhs);"},
{"lineNum":" 1165","line":"}"},
{"lineNum":" 1166","line":""},
{"lineNum":" 1167","line":"// Duration !="},
{"lineNum":" 1168","line":""},
{"lineNum":" 1169","line":"template <class _Rep1, class _Period1, class _Rep2, class _Period2>"},
{"lineNum":" 1170","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1171","line":"_LIBCPP_CONSTEXPR"},
{"lineNum":" 1172","line":"bool"},
{"lineNum":" 1173","line":"operator!=(const duration<_Rep1, _Period1>& __lhs, const duration<_Rep2, _Period2>& __rhs)"},
{"lineNum":" 1174","line":"{"},
{"lineNum":" 1175","line":"    return !(__lhs == __rhs);"},
{"lineNum":" 1176","line":"}"},
{"lineNum":" 1177","line":""},
{"lineNum":" 1178","line":"// Duration <"},
{"lineNum":" 1179","line":""},
{"lineNum":" 1180","line":"template <class _LhsDuration, class _RhsDuration>"},
{"lineNum":" 1181","line":"struct __duration_lt"},
{"lineNum":" 1182","line":"{"},
{"lineNum":" 1183","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":" 1184","line":"    bool operator()(const _LhsDuration& __lhs, const _RhsDuration& __rhs) const"},
{"lineNum":" 1185","line":"        {"},
{"lineNum":" 1186","line":"            typedef typename common_type<_LhsDuration, _RhsDuration>::type _Ct;"},
{"lineNum":" 1187","line":"            return _Ct(__lhs).count() < _Ct(__rhs).count();"},
{"lineNum":" 1188","line":"        }"},
{"lineNum":" 1189","line":"};"},
{"lineNum":" 1190","line":""},
{"lineNum":" 1191","line":"template <class _LhsDuration>"},
{"lineNum":" 1192","line":"struct __duration_lt<_LhsDuration, _LhsDuration>"},
{"lineNum":" 1193","line":"{"},
{"lineNum":" 1194","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":" 1195","line":"    bool operator()(const _LhsDuration& __lhs, const _LhsDuration& __rhs) const"},
{"lineNum":" 1196","line":"        {return __lhs.count() < __rhs.count();}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1197","line":"};"},
{"lineNum":" 1198","line":""},
{"lineNum":" 1199","line":"template <class _Rep1, class _Period1, class _Rep2, class _Period2>"},
{"lineNum":" 1200","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1201","line":"_LIBCPP_CONSTEXPR"},
{"lineNum":" 1202","line":"bool"},
{"lineNum":" 1203","line":"operator< (const duration<_Rep1, _Period1>& __lhs, const duration<_Rep2, _Period2>& __rhs)"},
{"lineNum":" 1204","line":"{"},
{"lineNum":" 1205","line":"    return __duration_lt<duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >()(__lhs, __rhs);"},
{"lineNum":" 1206","line":"}"},
{"lineNum":" 1207","line":""},
{"lineNum":" 1208","line":"// Duration >"},
{"lineNum":" 1209","line":""},
{"lineNum":" 1210","line":"template <class _Rep1, class _Period1, class _Rep2, class _Period2>"},
{"lineNum":" 1211","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1212","line":"_LIBCPP_CONSTEXPR"},
{"lineNum":" 1213","line":"bool"},
{"lineNum":" 1214","line":"operator> (const duration<_Rep1, _Period1>& __lhs, const duration<_Rep2, _Period2>& __rhs)"},
{"lineNum":" 1215","line":"{"},
{"lineNum":" 1216","line":"    return __rhs < __lhs;"},
{"lineNum":" 1217","line":"}"},
{"lineNum":" 1218","line":""},
{"lineNum":" 1219","line":"// Duration <="},
{"lineNum":" 1220","line":""},
{"lineNum":" 1221","line":"template <class _Rep1, class _Period1, class _Rep2, class _Period2>"},
{"lineNum":" 1222","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1223","line":"_LIBCPP_CONSTEXPR"},
{"lineNum":" 1224","line":"bool"},
{"lineNum":" 1225","line":"operator<=(const duration<_Rep1, _Period1>& __lhs, const duration<_Rep2, _Period2>& __rhs)"},
{"lineNum":" 1226","line":"{"},
{"lineNum":" 1227","line":"    return !(__rhs < __lhs);"},
{"lineNum":" 1228","line":"}"},
{"lineNum":" 1229","line":""},
{"lineNum":" 1230","line":"// Duration >="},
{"lineNum":" 1231","line":""},
{"lineNum":" 1232","line":"template <class _Rep1, class _Period1, class _Rep2, class _Period2>"},
{"lineNum":" 1233","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1234","line":"_LIBCPP_CONSTEXPR"},
{"lineNum":" 1235","line":"bool"},
{"lineNum":" 1236","line":"operator>=(const duration<_Rep1, _Period1>& __lhs, const duration<_Rep2, _Period2>& __rhs)"},
{"lineNum":" 1237","line":"{"},
{"lineNum":" 1238","line":"    return !(__lhs < __rhs);"},
{"lineNum":" 1239","line":"}"},
{"lineNum":" 1240","line":""},
{"lineNum":" 1241","line":"// Duration +"},
{"lineNum":" 1242","line":""},
{"lineNum":" 1243","line":"template <class _Rep1, class _Period1, class _Rep2, class _Period2>"},
{"lineNum":" 1244","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1245","line":"_LIBCPP_CONSTEXPR"},
{"lineNum":" 1246","line":"typename common_type<duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >::type"},
{"lineNum":" 1247","line":"operator+(const duration<_Rep1, _Period1>& __lhs, const duration<_Rep2, _Period2>& __rhs)"},
{"lineNum":" 1248","line":"{"},
{"lineNum":" 1249","line":"    typedef typename common_type<duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >::type _Cd;"},
{"lineNum":" 1250","line":"    return _Cd(_Cd(__lhs).count() + _Cd(__rhs).count());"},
{"lineNum":" 1251","line":"}"},
{"lineNum":" 1252","line":""},
{"lineNum":" 1253","line":"// Duration -"},
{"lineNum":" 1254","line":""},
{"lineNum":" 1255","line":"template <class _Rep1, class _Period1, class _Rep2, class _Period2>"},
{"lineNum":" 1256","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1257","line":"_LIBCPP_CONSTEXPR"},
{"lineNum":" 1258","line":"typename common_type<duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >::type"},
{"lineNum":" 1259","line":"operator-(const duration<_Rep1, _Period1>& __lhs, const duration<_Rep2, _Period2>& __rhs)"},
{"lineNum":" 1260","line":"{"},
{"lineNum":" 1261","line":"    typedef typename common_type<duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >::type _Cd;"},
{"lineNum":" 1262","line":"    return _Cd(_Cd(__lhs).count() - _Cd(__rhs).count());"},
{"lineNum":" 1263","line":"}"},
{"lineNum":" 1264","line":""},
{"lineNum":" 1265","line":"// Duration *"},
{"lineNum":" 1266","line":""},
{"lineNum":" 1267","line":"template <class _Rep1, class _Period, class _Rep2>"},
{"lineNum":" 1268","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1269","line":"_LIBCPP_CONSTEXPR"},
{"lineNum":" 1270","line":"typename enable_if"},
{"lineNum":" 1271","line":"<"},
{"lineNum":" 1272","line":"    is_convertible<_Rep2, typename common_type<_Rep1, _Rep2>::type>::value,"},
{"lineNum":" 1273","line":"    duration<typename common_type<_Rep1, _Rep2>::type, _Period>"},
{"lineNum":" 1274","line":">::type"},
{"lineNum":" 1275","line":"operator*(const duration<_Rep1, _Period>& __d, const _Rep2& __s)"},
{"lineNum":" 1276","line":"{"},
{"lineNum":" 1277","line":"    typedef typename common_type<_Rep1, _Rep2>::type _Cr;"},
{"lineNum":" 1278","line":"    typedef duration<_Cr, _Period> _Cd;"},
{"lineNum":" 1279","line":"    return _Cd(_Cd(__d).count() * static_cast<_Cr>(__s));"},
{"lineNum":" 1280","line":"}"},
{"lineNum":" 1281","line":""},
{"lineNum":" 1282","line":"template <class _Rep1, class _Period, class _Rep2>"},
{"lineNum":" 1283","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1284","line":"_LIBCPP_CONSTEXPR"},
{"lineNum":" 1285","line":"typename enable_if"},
{"lineNum":" 1286","line":"<"},
{"lineNum":" 1287","line":"    is_convertible<_Rep1, typename common_type<_Rep1, _Rep2>::type>::value,"},
{"lineNum":" 1288","line":"    duration<typename common_type<_Rep1, _Rep2>::type, _Period>"},
{"lineNum":" 1289","line":">::type"},
{"lineNum":" 1290","line":"operator*(const _Rep1& __s, const duration<_Rep2, _Period>& __d)"},
{"lineNum":" 1291","line":"{"},
{"lineNum":" 1292","line":"    return __d * __s;"},
{"lineNum":" 1293","line":"}"},
{"lineNum":" 1294","line":""},
{"lineNum":" 1295","line":"// Duration /"},
{"lineNum":" 1296","line":""},
{"lineNum":" 1297","line":"template <class _Rep1, class _Period, class _Rep2>"},
{"lineNum":" 1298","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1299","line":"_LIBCPP_CONSTEXPR"},
{"lineNum":" 1300","line":"typename enable_if"},
{"lineNum":" 1301","line":"<"},
{"lineNum":" 1302","line":"    !__is_duration<_Rep2>::value &&"},
{"lineNum":" 1303","line":"      is_convertible<_Rep2, typename common_type<_Rep1, _Rep2>::type>::value,"},
{"lineNum":" 1304","line":"    duration<typename common_type<_Rep1, _Rep2>::type, _Period>"},
{"lineNum":" 1305","line":">::type"},
{"lineNum":" 1306","line":"operator/(const duration<_Rep1, _Period>& __d, const _Rep2& __s)"},
{"lineNum":" 1307","line":"{"},
{"lineNum":" 1308","line":"    typedef typename common_type<_Rep1, _Rep2>::type _Cr;"},
{"lineNum":" 1309","line":"    typedef duration<_Cr, _Period> _Cd;"},
{"lineNum":" 1310","line":"    return _Cd(_Cd(__d).count() / static_cast<_Cr>(__s));"},
{"lineNum":" 1311","line":"}"},
{"lineNum":" 1312","line":""},
{"lineNum":" 1313","line":"template <class _Rep1, class _Period1, class _Rep2, class _Period2>"},
{"lineNum":" 1314","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1315","line":"_LIBCPP_CONSTEXPR"},
{"lineNum":" 1316","line":"typename common_type<_Rep1, _Rep2>::type"},
{"lineNum":" 1317","line":"operator/(const duration<_Rep1, _Period1>& __lhs, const duration<_Rep2, _Period2>& __rhs)"},
{"lineNum":" 1318","line":"{"},
{"lineNum":" 1319","line":"    typedef typename common_type<duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >::type _Ct;"},
{"lineNum":" 1320","line":"    return _Ct(__lhs).count() / _Ct(__rhs).count();"},
{"lineNum":" 1321","line":"}"},
{"lineNum":" 1322","line":""},
{"lineNum":" 1323","line":"// Duration %"},
{"lineNum":" 1324","line":""},
{"lineNum":" 1325","line":"template <class _Rep1, class _Period, class _Rep2>"},
{"lineNum":" 1326","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1327","line":"_LIBCPP_CONSTEXPR"},
{"lineNum":" 1328","line":"typename enable_if"},
{"lineNum":" 1329","line":"<"},
{"lineNum":" 1330","line":"    !__is_duration<_Rep2>::value &&"},
{"lineNum":" 1331","line":"      is_convertible<_Rep2, typename common_type<_Rep1, _Rep2>::type>::value,"},
{"lineNum":" 1332","line":"    duration<typename common_type<_Rep1, _Rep2>::type, _Period>"},
{"lineNum":" 1333","line":">::type"},
{"lineNum":" 1334","line":"operator%(const duration<_Rep1, _Period>& __d, const _Rep2& __s)"},
{"lineNum":" 1335","line":"{"},
{"lineNum":" 1336","line":"    typedef typename common_type<_Rep1, _Rep2>::type _Cr;"},
{"lineNum":" 1337","line":"    typedef duration<_Cr, _Period> _Cd;"},
{"lineNum":" 1338","line":"    return _Cd(_Cd(__d).count() % static_cast<_Cr>(__s));"},
{"lineNum":" 1339","line":"}"},
{"lineNum":" 1340","line":""},
{"lineNum":" 1341","line":"template <class _Rep1, class _Period1, class _Rep2, class _Period2>"},
{"lineNum":" 1342","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1343","line":"_LIBCPP_CONSTEXPR"},
{"lineNum":" 1344","line":"typename common_type<duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >::type"},
{"lineNum":" 1345","line":"operator%(const duration<_Rep1, _Period1>& __lhs, const duration<_Rep2, _Period2>& __rhs)"},
{"lineNum":" 1346","line":"{"},
{"lineNum":" 1347","line":"    typedef typename common_type<_Rep1, _Rep2>::type _Cr;"},
{"lineNum":" 1348","line":"    typedef typename common_type<duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >::type _Cd;"},
{"lineNum":" 1349","line":"    return _Cd(static_cast<_Cr>(_Cd(__lhs).count()) % static_cast<_Cr>(_Cd(__rhs).count()));"},
{"lineNum":" 1350","line":"}"},
{"lineNum":" 1351","line":""},
{"lineNum":" 1352","line":"//////////////////////////////////////////////////////////"},
{"lineNum":" 1353","line":"///////////////////// time_point /////////////////////////"},
{"lineNum":" 1354","line":"//////////////////////////////////////////////////////////"},
{"lineNum":" 1355","line":""},
{"lineNum":" 1356","line":"template <class _Clock, class _Duration = typename _Clock::duration>"},
{"lineNum":" 1357","line":"class _LIBCPP_TEMPLATE_VIS time_point"},
{"lineNum":" 1358","line":"{"},
{"lineNum":" 1359","line":"    static_assert(__is_duration<_Duration>::value,"},
{"lineNum":" 1360","line":"                  \"Second template parameter of time_point must be a std::chrono::duration\");"},
{"lineNum":" 1361","line":"public:"},
{"lineNum":" 1362","line":"    typedef _Clock                    clock;"},
{"lineNum":" 1363","line":"    typedef _Duration                 duration;"},
{"lineNum":" 1364","line":"    typedef typename duration::rep    rep;"},
{"lineNum":" 1365","line":"    typedef typename duration::period period;"},
{"lineNum":" 1366","line":"private:"},
{"lineNum":" 1367","line":"    duration __d_;"},
{"lineNum":" 1368","line":""},
{"lineNum":" 1369","line":"public:"},
{"lineNum":" 1370","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 time_point() : __d_(duration::zero()) {}"},
{"lineNum":" 1371","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 explicit time_point(const duration& __d) : __d_(__d) {}"},
{"lineNum":" 1372","line":""},
{"lineNum":" 1373","line":"    // conversions"},
{"lineNum":" 1374","line":"    template <class _Duration2>"},
{"lineNum":" 1375","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":" 1376","line":"    time_point(const time_point<clock, _Duration2>& t,"},
{"lineNum":" 1377","line":"        typename enable_if"},
{"lineNum":" 1378","line":"        <"},
{"lineNum":" 1379","line":"            is_convertible<_Duration2, duration>::value"},
{"lineNum":" 1380","line":"        >::type* = nullptr)"},
{"lineNum":" 1381","line":"            : __d_(t.time_since_epoch()) {}"},
{"lineNum":" 1382","line":""},
{"lineNum":" 1383","line":"    // observer"},
{"lineNum":" 1384","line":""},
{"lineNum":" 1385","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 duration time_since_epoch() const {return __d_;}"},
{"lineNum":" 1386","line":""},
{"lineNum":" 1387","line":"    // arithmetic"},
{"lineNum":" 1388","line":""},
{"lineNum":" 1389","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 time_point& operator+=(const duration& __d) {__d_ += __d; return *this;}"},
{"lineNum":" 1390","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 time_point& operator-=(const duration& __d) {__d_ -= __d; return *this;}"},
{"lineNum":" 1391","line":""},
{"lineNum":" 1392","line":"    // special values"},
{"lineNum":" 1393","line":""},
{"lineNum":" 1394","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR time_point min() _NOEXCEPT {return time_point(duration::min());}"},
{"lineNum":" 1395","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR time_point max() _NOEXCEPT {return time_point(duration::max());}"},
{"lineNum":" 1396","line":"};"},
{"lineNum":" 1397","line":""},
{"lineNum":" 1398","line":"} // chrono"},
{"lineNum":" 1399","line":""},
{"lineNum":" 1400","line":"template <class _Clock, class _Duration1, class _Duration2>"},
{"lineNum":" 1401","line":"struct _LIBCPP_TEMPLATE_VIS common_type<chrono::time_point<_Clock, _Duration1>,"},
{"lineNum":" 1402","line":"                                         chrono::time_point<_Clock, _Duration2> >"},
{"lineNum":" 1403","line":"{"},
{"lineNum":" 1404","line":"    typedef chrono::time_point<_Clock, typename common_type<_Duration1, _Duration2>::type> type;"},
{"lineNum":" 1405","line":"};"},
{"lineNum":" 1406","line":""},
{"lineNum":" 1407","line":"namespace chrono {"},
{"lineNum":" 1408","line":""},
{"lineNum":" 1409","line":"template <class _ToDuration, class _Clock, class _Duration>"},
{"lineNum":" 1410","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":" 1411","line":"time_point<_Clock, _ToDuration>"},
{"lineNum":" 1412","line":"time_point_cast(const time_point<_Clock, _Duration>& __t)"},
{"lineNum":" 1413","line":"{"},
{"lineNum":" 1414","line":"    return time_point<_Clock, _ToDuration>(chrono::duration_cast<_ToDuration>(__t.time_since_epoch()));"},
{"lineNum":" 1415","line":"}"},
{"lineNum":" 1416","line":""},
{"lineNum":" 1417","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 1418","line":"template <class _ToDuration, class _Clock, class _Duration>"},
{"lineNum":" 1419","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":" 1420","line":"typename enable_if"},
{"lineNum":" 1421","line":"<"},
{"lineNum":" 1422","line":"    __is_duration<_ToDuration>::value,"},
{"lineNum":" 1423","line":"    time_point<_Clock, _ToDuration>"},
{"lineNum":" 1424","line":">::type"},
{"lineNum":" 1425","line":"floor(const time_point<_Clock, _Duration>& __t)"},
{"lineNum":" 1426","line":"{"},
{"lineNum":" 1427","line":"    return time_point<_Clock, _ToDuration>{floor<_ToDuration>(__t.time_since_epoch())};"},
{"lineNum":" 1428","line":"}"},
{"lineNum":" 1429","line":""},
{"lineNum":" 1430","line":"template <class _ToDuration, class _Clock, class _Duration>"},
{"lineNum":" 1431","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":" 1432","line":"typename enable_if"},
{"lineNum":" 1433","line":"<"},
{"lineNum":" 1434","line":"    __is_duration<_ToDuration>::value,"},
{"lineNum":" 1435","line":"    time_point<_Clock, _ToDuration>"},
{"lineNum":" 1436","line":">::type"},
{"lineNum":" 1437","line":"ceil(const time_point<_Clock, _Duration>& __t)"},
{"lineNum":" 1438","line":"{"},
{"lineNum":" 1439","line":"    return time_point<_Clock, _ToDuration>{ceil<_ToDuration>(__t.time_since_epoch())};"},
{"lineNum":" 1440","line":"}"},
{"lineNum":" 1441","line":""},
{"lineNum":" 1442","line":"template <class _ToDuration, class _Clock, class _Duration>"},
{"lineNum":" 1443","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":" 1444","line":"typename enable_if"},
{"lineNum":" 1445","line":"<"},
{"lineNum":" 1446","line":"    __is_duration<_ToDuration>::value,"},
{"lineNum":" 1447","line":"    time_point<_Clock, _ToDuration>"},
{"lineNum":" 1448","line":">::type"},
{"lineNum":" 1449","line":"round(const time_point<_Clock, _Duration>& __t)"},
{"lineNum":" 1450","line":"{"},
{"lineNum":" 1451","line":"    return time_point<_Clock, _ToDuration>{round<_ToDuration>(__t.time_since_epoch())};"},
{"lineNum":" 1452","line":"}"},
{"lineNum":" 1453","line":""},
{"lineNum":" 1454","line":"template <class _Rep, class _Period>"},
{"lineNum":" 1455","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":" 1456","line":"typename enable_if"},
{"lineNum":" 1457","line":"<"},
{"lineNum":" 1458","line":"    numeric_limits<_Rep>::is_signed,"},
{"lineNum":" 1459","line":"    duration<_Rep, _Period>"},
{"lineNum":" 1460","line":">::type"},
{"lineNum":" 1461","line":"abs(duration<_Rep, _Period> __d)"},
{"lineNum":" 1462","line":"{"},
{"lineNum":" 1463","line":"    return __d >= __d.zero() ? +__d : -__d;"},
{"lineNum":" 1464","line":"}"},
{"lineNum":" 1465","line":"#endif"},
{"lineNum":" 1466","line":""},
{"lineNum":" 1467","line":"// time_point =="},
{"lineNum":" 1468","line":""},
{"lineNum":" 1469","line":"template <class _Clock, class _Duration1, class _Duration2>"},
{"lineNum":" 1470","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":" 1471","line":"bool"},
{"lineNum":" 1472","line":"operator==(const time_point<_Clock, _Duration1>& __lhs, const time_point<_Clock, _Duration2>& __rhs)"},
{"lineNum":" 1473","line":"{"},
{"lineNum":" 1474","line":"    return __lhs.time_since_epoch() == __rhs.time_since_epoch();"},
{"lineNum":" 1475","line":"}"},
{"lineNum":" 1476","line":""},
{"lineNum":" 1477","line":"// time_point !="},
{"lineNum":" 1478","line":""},
{"lineNum":" 1479","line":"template <class _Clock, class _Duration1, class _Duration2>"},
{"lineNum":" 1480","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":" 1481","line":"bool"},
{"lineNum":" 1482","line":"operator!=(const time_point<_Clock, _Duration1>& __lhs, const time_point<_Clock, _Duration2>& __rhs)"},
{"lineNum":" 1483","line":"{"},
{"lineNum":" 1484","line":"    return !(__lhs == __rhs);"},
{"lineNum":" 1485","line":"}"},
{"lineNum":" 1486","line":""},
{"lineNum":" 1487","line":"// time_point <"},
{"lineNum":" 1488","line":""},
{"lineNum":" 1489","line":"template <class _Clock, class _Duration1, class _Duration2>"},
{"lineNum":" 1490","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":" 1491","line":"bool"},
{"lineNum":" 1492","line":"operator<(const time_point<_Clock, _Duration1>& __lhs, const time_point<_Clock, _Duration2>& __rhs)"},
{"lineNum":" 1493","line":"{"},
{"lineNum":" 1494","line":"    return __lhs.time_since_epoch() < __rhs.time_since_epoch();"},
{"lineNum":" 1495","line":"}"},
{"lineNum":" 1496","line":""},
{"lineNum":" 1497","line":"// time_point >"},
{"lineNum":" 1498","line":""},
{"lineNum":" 1499","line":"template <class _Clock, class _Duration1, class _Duration2>"},
{"lineNum":" 1500","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":" 1501","line":"bool"},
{"lineNum":" 1502","line":"operator>(const time_point<_Clock, _Duration1>& __lhs, const time_point<_Clock, _Duration2>& __rhs)"},
{"lineNum":" 1503","line":"{"},
{"lineNum":" 1504","line":"    return __rhs < __lhs;"},
{"lineNum":" 1505","line":"}"},
{"lineNum":" 1506","line":""},
{"lineNum":" 1507","line":"// time_point <="},
{"lineNum":" 1508","line":""},
{"lineNum":" 1509","line":"template <class _Clock, class _Duration1, class _Duration2>"},
{"lineNum":" 1510","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":" 1511","line":"bool"},
{"lineNum":" 1512","line":"operator<=(const time_point<_Clock, _Duration1>& __lhs, const time_point<_Clock, _Duration2>& __rhs)"},
{"lineNum":" 1513","line":"{"},
{"lineNum":" 1514","line":"    return !(__rhs < __lhs);"},
{"lineNum":" 1515","line":"}"},
{"lineNum":" 1516","line":""},
{"lineNum":" 1517","line":"// time_point >="},
{"lineNum":" 1518","line":""},
{"lineNum":" 1519","line":"template <class _Clock, class _Duration1, class _Duration2>"},
{"lineNum":" 1520","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":" 1521","line":"bool"},
{"lineNum":" 1522","line":"operator>=(const time_point<_Clock, _Duration1>& __lhs, const time_point<_Clock, _Duration2>& __rhs)"},
{"lineNum":" 1523","line":"{"},
{"lineNum":" 1524","line":"    return !(__lhs < __rhs);"},
{"lineNum":" 1525","line":"}"},
{"lineNum":" 1526","line":""},
{"lineNum":" 1527","line":"// time_point operator+(time_point x, duration y);"},
{"lineNum":" 1528","line":""},
{"lineNum":" 1529","line":"template <class _Clock, class _Duration1, class _Rep2, class _Period2>"},
{"lineNum":" 1530","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":" 1531","line":"time_point<_Clock, typename common_type<_Duration1, duration<_Rep2, _Period2> >::type>"},
{"lineNum":" 1532","line":"operator+(const time_point<_Clock, _Duration1>& __lhs, const duration<_Rep2, _Period2>& __rhs)"},
{"lineNum":" 1533","line":"{"},
{"lineNum":" 1534","line":"    typedef time_point<_Clock, typename common_type<_Duration1, duration<_Rep2, _Period2> >::type> _Tr;"},
{"lineNum":" 1535","line":"    return _Tr (__lhs.time_since_epoch() + __rhs);"},
{"lineNum":" 1536","line":"}"},
{"lineNum":" 1537","line":""},
{"lineNum":" 1538","line":"// time_point operator+(duration x, time_point y);"},
{"lineNum":" 1539","line":""},
{"lineNum":" 1540","line":"template <class _Rep1, class _Period1, class _Clock, class _Duration2>"},
{"lineNum":" 1541","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":" 1542","line":"time_point<_Clock, typename common_type<duration<_Rep1, _Period1>, _Duration2>::type>"},
{"lineNum":" 1543","line":"operator+(const duration<_Rep1, _Period1>& __lhs, const time_point<_Clock, _Duration2>& __rhs)"},
{"lineNum":" 1544","line":"{"},
{"lineNum":" 1545","line":"    return __rhs + __lhs;"},
{"lineNum":" 1546","line":"}"},
{"lineNum":" 1547","line":""},
{"lineNum":" 1548","line":"// time_point operator-(time_point x, duration y);"},
{"lineNum":" 1549","line":""},
{"lineNum":" 1550","line":"template <class _Clock, class _Duration1, class _Rep2, class _Period2>"},
{"lineNum":" 1551","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":" 1552","line":"time_point<_Clock, typename common_type<_Duration1, duration<_Rep2, _Period2> >::type>"},
{"lineNum":" 1553","line":"operator-(const time_point<_Clock, _Duration1>& __lhs, const duration<_Rep2, _Period2>& __rhs)"},
{"lineNum":" 1554","line":"{"},
{"lineNum":" 1555","line":"    typedef time_point<_Clock, typename common_type<_Duration1, duration<_Rep2, _Period2> >::type> _Ret;"},
{"lineNum":" 1556","line":"    return _Ret(__lhs.time_since_epoch() -__rhs);"},
{"lineNum":" 1557","line":"}"},
{"lineNum":" 1558","line":""},
{"lineNum":" 1559","line":"// duration operator-(time_point x, time_point y);"},
{"lineNum":" 1560","line":""},
{"lineNum":" 1561","line":"template <class _Clock, class _Duration1, class _Duration2>"},
{"lineNum":" 1562","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":" 1563","line":"typename common_type<_Duration1, _Duration2>::type"},
{"lineNum":" 1564","line":"operator-(const time_point<_Clock, _Duration1>& __lhs, const time_point<_Clock, _Duration2>& __rhs)"},
{"lineNum":" 1565","line":"{"},
{"lineNum":" 1566","line":"    return __lhs.time_since_epoch() - __rhs.time_since_epoch();"},
{"lineNum":" 1567","line":"}"},
{"lineNum":" 1568","line":""},
{"lineNum":" 1569","line":"//////////////////////////////////////////////////////////"},
{"lineNum":" 1570","line":"/////////////////////// clocks ///////////////////////////"},
{"lineNum":" 1571","line":"//////////////////////////////////////////////////////////"},
{"lineNum":" 1572","line":""},
{"lineNum":" 1573","line":"class _LIBCPP_TYPE_VIS system_clock"},
{"lineNum":" 1574","line":"{"},
{"lineNum":" 1575","line":"public:"},
{"lineNum":" 1576","line":"    typedef microseconds                     duration;"},
{"lineNum":" 1577","line":"    typedef duration::rep                    rep;"},
{"lineNum":" 1578","line":"    typedef duration::period                 period;"},
{"lineNum":" 1579","line":"    typedef chrono::time_point<system_clock> time_point;"},
{"lineNum":" 1580","line":"    static _LIBCPP_CONSTEXPR_AFTER_CXX11 const bool is_steady = false;"},
{"lineNum":" 1581","line":""},
{"lineNum":" 1582","line":"    static time_point now() _NOEXCEPT;"},
{"lineNum":" 1583","line":"    static time_t     to_time_t  (const time_point& __t) _NOEXCEPT;"},
{"lineNum":" 1584","line":"    static time_point from_time_t(time_t __t) _NOEXCEPT;"},
{"lineNum":" 1585","line":"};"},
{"lineNum":" 1586","line":""},
{"lineNum":" 1587","line":"#ifndef _LIBCPP_HAS_NO_MONOTONIC_CLOCK"},
{"lineNum":" 1588","line":"class _LIBCPP_TYPE_VIS steady_clock"},
{"lineNum":" 1589","line":"{"},
{"lineNum":" 1590","line":"public:"},
{"lineNum":" 1591","line":"    typedef nanoseconds                                   duration;"},
{"lineNum":" 1592","line":"    typedef duration::rep                                 rep;"},
{"lineNum":" 1593","line":"    typedef duration::period                              period;"},
{"lineNum":" 1594","line":"    typedef chrono::time_point<steady_clock, duration>    time_point;"},
{"lineNum":" 1595","line":"    static _LIBCPP_CONSTEXPR_AFTER_CXX11 const bool is_steady = true;"},
{"lineNum":" 1596","line":""},
{"lineNum":" 1597","line":"    static time_point now() _NOEXCEPT;"},
{"lineNum":" 1598","line":"};"},
{"lineNum":" 1599","line":""},
{"lineNum":" 1600","line":"typedef steady_clock high_resolution_clock;"},
{"lineNum":" 1601","line":"#else"},
{"lineNum":" 1602","line":"typedef system_clock high_resolution_clock;"},
{"lineNum":" 1603","line":"#endif"},
{"lineNum":" 1604","line":""},
{"lineNum":" 1605","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":" 1606","line":"// [time.clock.file], type file_clock"},
{"lineNum":" 1607","line":"using file_clock = _VSTD_FS::_FilesystemClock;"},
{"lineNum":" 1608","line":""},
{"lineNum":" 1609","line":"template<class _Duration>"},
{"lineNum":" 1610","line":"using file_time = time_point<file_clock, _Duration>;"},
{"lineNum":" 1611","line":""},
{"lineNum":" 1612","line":""},
{"lineNum":" 1613","line":"template <class _Duration>"},
{"lineNum":" 1614","line":"using sys_time    = time_point<system_clock, _Duration>;"},
{"lineNum":" 1615","line":"using sys_seconds = sys_time<seconds>;"},
{"lineNum":" 1616","line":"using sys_days    = sys_time<days>;"},
{"lineNum":" 1617","line":""},
{"lineNum":" 1618","line":"struct local_t {};"},
{"lineNum":" 1619","line":"template<class Duration>"},
{"lineNum":" 1620","line":"using local_time  = time_point<local_t, Duration>;"},
{"lineNum":" 1621","line":"using local_seconds = local_time<seconds>;"},
{"lineNum":" 1622","line":"using local_days    = local_time<days>;"},
{"lineNum":" 1623","line":""},
{"lineNum":" 1624","line":""},
{"lineNum":" 1625","line":"struct last_spec { explicit last_spec() = default; };"},
{"lineNum":" 1626","line":""},
{"lineNum":" 1627","line":"class day {"},
{"lineNum":" 1628","line":"private:"},
{"lineNum":" 1629","line":"    unsigned char __d;"},
{"lineNum":" 1630","line":"public:"},
{"lineNum":" 1631","line":"    day() = default;"},
{"lineNum":" 1632","line":"    explicit inline constexpr day(unsigned __val) noexcept : __d(static_cast<unsigned char>(__val)) {}"},
{"lineNum":" 1633","line":"    inline constexpr day& operator++()    noexcept { ++__d; return *this; }"},
{"lineNum":" 1634","line":"    inline constexpr day  operator++(int) noexcept { day __tmp = *this; ++(*this); return __tmp; }"},
{"lineNum":" 1635","line":"    inline constexpr day& operator--()    noexcept { --__d; return *this; }"},
{"lineNum":" 1636","line":"    inline constexpr day  operator--(int) noexcept { day __tmp = *this; --(*this); return __tmp; }"},
{"lineNum":" 1637","line":"           constexpr day& operator+=(const days& __dd) noexcept;"},
{"lineNum":" 1638","line":"           constexpr day& operator-=(const days& __dd) noexcept;"},
{"lineNum":" 1639","line":"    explicit inline constexpr operator unsigned() const noexcept { return __d; }"},
{"lineNum":" 1640","line":"    inline constexpr bool ok() const noexcept { return __d >= 1 && __d <= 31; }"},
{"lineNum":" 1641","line":"  };"},
{"lineNum":" 1642","line":""},
{"lineNum":" 1643","line":""},
{"lineNum":" 1644","line":"inline constexpr"},
{"lineNum":" 1645","line":"bool operator==(const day& __lhs, const day& __rhs) noexcept"},
{"lineNum":" 1646","line":"{ return static_cast<unsigned>(__lhs) == static_cast<unsigned>(__rhs); }"},
{"lineNum":" 1647","line":""},
{"lineNum":" 1648","line":"inline constexpr"},
{"lineNum":" 1649","line":"bool operator!=(const day& __lhs, const day& __rhs) noexcept"},
{"lineNum":" 1650","line":"{ return !(__lhs == __rhs); }"},
{"lineNum":" 1651","line":""},
{"lineNum":" 1652","line":"inline constexpr"},
{"lineNum":" 1653","line":"bool operator< (const day& __lhs, const day& __rhs) noexcept"},
{"lineNum":" 1654","line":"{ return static_cast<unsigned>(__lhs) <  static_cast<unsigned>(__rhs); }"},
{"lineNum":" 1655","line":""},
{"lineNum":" 1656","line":"inline constexpr"},
{"lineNum":" 1657","line":"bool operator> (const day& __lhs, const day& __rhs) noexcept"},
{"lineNum":" 1658","line":"{ return __rhs < __lhs; }"},
{"lineNum":" 1659","line":""},
{"lineNum":" 1660","line":"inline constexpr"},
{"lineNum":" 1661","line":"bool operator<=(const day& __lhs, const day& __rhs) noexcept"},
{"lineNum":" 1662","line":"{ return !(__rhs < __lhs);}"},
{"lineNum":" 1663","line":""},
{"lineNum":" 1664","line":"inline constexpr"},
{"lineNum":" 1665","line":"bool operator>=(const day& __lhs, const day& __rhs) noexcept"},
{"lineNum":" 1666","line":"{ return !(__lhs < __rhs); }"},
{"lineNum":" 1667","line":""},
{"lineNum":" 1668","line":"inline constexpr"},
{"lineNum":" 1669","line":"day operator+ (const day& __lhs, const days& __rhs) noexcept"},
{"lineNum":" 1670","line":"{ return day(static_cast<unsigned>(__lhs) + __rhs.count()); }"},
{"lineNum":" 1671","line":""},
{"lineNum":" 1672","line":"inline constexpr"},
{"lineNum":" 1673","line":"day operator+ (const days& __lhs, const day& __rhs) noexcept"},
{"lineNum":" 1674","line":"{ return __rhs + __lhs; }"},
{"lineNum":" 1675","line":""},
{"lineNum":" 1676","line":"inline constexpr"},
{"lineNum":" 1677","line":"day operator- (const day& __lhs, const days& __rhs) noexcept"},
{"lineNum":" 1678","line":"{ return __lhs + -__rhs; }"},
{"lineNum":" 1679","line":""},
{"lineNum":" 1680","line":"inline constexpr"},
{"lineNum":" 1681","line":"days operator-(const day& __lhs, const day& __rhs) noexcept"},
{"lineNum":" 1682","line":"{ return days(static_cast<int>(static_cast<unsigned>(__lhs)) -"},
{"lineNum":" 1683","line":"              static_cast<int>(static_cast<unsigned>(__rhs))); }"},
{"lineNum":" 1684","line":""},
{"lineNum":" 1685","line":"inline constexpr day& day::operator+=(const days& __dd) noexcept"},
{"lineNum":" 1686","line":"{ *this = *this + __dd; return *this; }"},
{"lineNum":" 1687","line":""},
{"lineNum":" 1688","line":"inline constexpr day& day::operator-=(const days& __dd) noexcept"},
{"lineNum":" 1689","line":"{ *this = *this - __dd; return *this; }"},
{"lineNum":" 1690","line":""},
{"lineNum":" 1691","line":""},
{"lineNum":" 1692","line":"class month {"},
{"lineNum":" 1693","line":"private:"},
{"lineNum":" 1694","line":"    unsigned char __m;"},
{"lineNum":" 1695","line":"public:"},
{"lineNum":" 1696","line":"    month() = default;"},
{"lineNum":" 1697","line":"    explicit inline constexpr month(unsigned __val) noexcept : __m(static_cast<unsigned char>(__val)) {}"},
{"lineNum":" 1698","line":"    inline constexpr month& operator++()    noexcept { ++__m; return *this; }"},
{"lineNum":" 1699","line":"    inline constexpr month  operator++(int) noexcept { month __tmp = *this; ++(*this); return __tmp; }"},
{"lineNum":" 1700","line":"    inline constexpr month& operator--()    noexcept { --__m; return *this; }"},
{"lineNum":" 1701","line":"    inline constexpr month  operator--(int) noexcept { month __tmp = *this; --(*this); return __tmp; }"},
{"lineNum":" 1702","line":"           constexpr month& operator+=(const months& __m1) noexcept;"},
{"lineNum":" 1703","line":"           constexpr month& operator-=(const months& __m1) noexcept;"},
{"lineNum":" 1704","line":"    explicit inline constexpr operator unsigned() const noexcept { return __m; }"},
{"lineNum":" 1705","line":"    inline constexpr bool ok() const noexcept { return __m >= 1 && __m <= 12; }"},
{"lineNum":" 1706","line":"};"},
{"lineNum":" 1707","line":""},
{"lineNum":" 1708","line":""},
{"lineNum":" 1709","line":"inline constexpr"},
{"lineNum":" 1710","line":"bool operator==(const month& __lhs, const month& __rhs) noexcept"},
{"lineNum":" 1711","line":"{ return static_cast<unsigned>(__lhs) == static_cast<unsigned>(__rhs); }"},
{"lineNum":" 1712","line":""},
{"lineNum":" 1713","line":"inline constexpr"},
{"lineNum":" 1714","line":"bool operator!=(const month& __lhs, const month& __rhs) noexcept"},
{"lineNum":" 1715","line":"{ return !(__lhs == __rhs); }"},
{"lineNum":" 1716","line":""},
{"lineNum":" 1717","line":"inline constexpr"},
{"lineNum":" 1718","line":"bool operator< (const month& __lhs, const month& __rhs) noexcept"},
{"lineNum":" 1719","line":"{ return static_cast<unsigned>(__lhs)  < static_cast<unsigned>(__rhs); }"},
{"lineNum":" 1720","line":""},
{"lineNum":" 1721","line":"inline constexpr"},
{"lineNum":" 1722","line":"bool operator> (const month& __lhs, const month& __rhs) noexcept"},
{"lineNum":" 1723","line":"{ return __rhs < __lhs; }"},
{"lineNum":" 1724","line":""},
{"lineNum":" 1725","line":"inline constexpr"},
{"lineNum":" 1726","line":"bool operator<=(const month& __lhs, const month& __rhs) noexcept"},
{"lineNum":" 1727","line":"{ return !(__rhs < __lhs); }"},
{"lineNum":" 1728","line":""},
{"lineNum":" 1729","line":"inline constexpr"},
{"lineNum":" 1730","line":"bool operator>=(const month& __lhs, const month& __rhs) noexcept"},
{"lineNum":" 1731","line":"{ return !(__lhs < __rhs); }"},
{"lineNum":" 1732","line":""},
{"lineNum":" 1733","line":"inline constexpr"},
{"lineNum":" 1734","line":"month operator+ (const month& __lhs, const months& __rhs) noexcept"},
{"lineNum":" 1735","line":"{"},
{"lineNum":" 1736","line":"    auto const __mu = static_cast<long long>(static_cast<unsigned>(__lhs)) + (__rhs.count() - 1);"},
{"lineNum":" 1737","line":"    auto const __yr = (__mu >= 0 ? __mu : __mu - 11) / 12;"},
{"lineNum":" 1738","line":"    return month{static_cast<unsigned>(__mu - __yr * 12 + 1)};"},
{"lineNum":" 1739","line":"}"},
{"lineNum":" 1740","line":""},
{"lineNum":" 1741","line":"inline constexpr"},
{"lineNum":" 1742","line":"month operator+ (const months& __lhs, const month& __rhs) noexcept"},
{"lineNum":" 1743","line":"{ return __rhs + __lhs; }"},
{"lineNum":" 1744","line":""},
{"lineNum":" 1745","line":"inline constexpr"},
{"lineNum":" 1746","line":"month operator- (const month& __lhs, const months& __rhs) noexcept"},
{"lineNum":" 1747","line":"{ return __lhs + -__rhs; }"},
{"lineNum":" 1748","line":""},
{"lineNum":" 1749","line":"inline constexpr"},
{"lineNum":" 1750","line":"months operator-(const month& __lhs, const month& __rhs) noexcept"},
{"lineNum":" 1751","line":"{"},
{"lineNum":" 1752","line":"    auto const __dm = static_cast<unsigned>(__lhs) - static_cast<unsigned>(__rhs);"},
{"lineNum":" 1753","line":"    return months(__dm <= 11 ? __dm : __dm + 12);"},
{"lineNum":" 1754","line":"}"},
{"lineNum":" 1755","line":""},
{"lineNum":" 1756","line":"inline constexpr month& month::operator+=(const months& __dm) noexcept"},
{"lineNum":" 1757","line":"{ *this = *this + __dm; return *this; }"},
{"lineNum":" 1758","line":""},
{"lineNum":" 1759","line":"inline constexpr month& month::operator-=(const months& __dm) noexcept"},
{"lineNum":" 1760","line":"{ *this = *this - __dm; return *this; }"},
{"lineNum":" 1761","line":""},
{"lineNum":" 1762","line":""},
{"lineNum":" 1763","line":"class year {"},
{"lineNum":" 1764","line":"private:"},
{"lineNum":" 1765","line":"    short __y;"},
{"lineNum":" 1766","line":"public:"},
{"lineNum":" 1767","line":"    year() = default;"},
{"lineNum":" 1768","line":"    explicit inline constexpr year(int __val) noexcept : __y(static_cast<short>(__val)) {}"},
{"lineNum":" 1769","line":""},
{"lineNum":" 1770","line":"    inline constexpr year& operator++()    noexcept { ++__y; return *this; }"},
{"lineNum":" 1771","line":"    inline constexpr year  operator++(int) noexcept { year __tmp = *this; ++(*this); return __tmp; }"},
{"lineNum":" 1772","line":"    inline constexpr year& operator--()    noexcept { --__y; return *this; }"},
{"lineNum":" 1773","line":"    inline constexpr year  operator--(int) noexcept { year __tmp = *this; --(*this); return __tmp; }"},
{"lineNum":" 1774","line":"           constexpr year& operator+=(const years& __dy) noexcept;"},
{"lineNum":" 1775","line":"           constexpr year& operator-=(const years& __dy) noexcept;"},
{"lineNum":" 1776","line":"    inline constexpr year operator+() const noexcept { return *this; }"},
{"lineNum":" 1777","line":"    inline constexpr year operator-() const noexcept { return year{-__y}; }"},
{"lineNum":" 1778","line":""},
{"lineNum":" 1779","line":"    inline constexpr bool is_leap() const noexcept { return __y % 4 == 0 && (__y % 100 != 0 || __y % 400 == 0); }"},
{"lineNum":" 1780","line":"    explicit inline constexpr operator int() const noexcept { return __y; }"},
{"lineNum":" 1781","line":"           constexpr bool ok() const noexcept;"},
{"lineNum":" 1782","line":"    static inline constexpr year min() noexcept { return year{-32767}; }"},
{"lineNum":" 1783","line":"    static inline constexpr year max() noexcept { return year{ 32767}; }"},
{"lineNum":" 1784","line":"};"},
{"lineNum":" 1785","line":""},
{"lineNum":" 1786","line":""},
{"lineNum":" 1787","line":"inline constexpr"},
{"lineNum":" 1788","line":"bool operator==(const year& __lhs, const year& __rhs) noexcept"},
{"lineNum":" 1789","line":"{ return static_cast<int>(__lhs) == static_cast<int>(__rhs); }"},
{"lineNum":" 1790","line":""},
{"lineNum":" 1791","line":"inline constexpr"},
{"lineNum":" 1792","line":"bool operator!=(const year& __lhs, const year& __rhs) noexcept"},
{"lineNum":" 1793","line":"{ return !(__lhs == __rhs); }"},
{"lineNum":" 1794","line":""},
{"lineNum":" 1795","line":"inline constexpr"},
{"lineNum":" 1796","line":"bool operator< (const year& __lhs, const year& __rhs) noexcept"},
{"lineNum":" 1797","line":"{ return static_cast<int>(__lhs)  < static_cast<int>(__rhs); }"},
{"lineNum":" 1798","line":""},
{"lineNum":" 1799","line":"inline constexpr"},
{"lineNum":" 1800","line":"bool operator> (const year& __lhs, const year& __rhs) noexcept"},
{"lineNum":" 1801","line":"{ return __rhs < __lhs; }"},
{"lineNum":" 1802","line":""},
{"lineNum":" 1803","line":"inline constexpr"},
{"lineNum":" 1804","line":"bool operator<=(const year& __lhs, const year& __rhs) noexcept"},
{"lineNum":" 1805","line":"{ return !(__rhs < __lhs); }"},
{"lineNum":" 1806","line":""},
{"lineNum":" 1807","line":"inline constexpr"},
{"lineNum":" 1808","line":"bool operator>=(const year& __lhs, const year& __rhs) noexcept"},
{"lineNum":" 1809","line":"{ return !(__lhs < __rhs); }"},
{"lineNum":" 1810","line":""},
{"lineNum":" 1811","line":"inline constexpr"},
{"lineNum":" 1812","line":"year operator+ (const year& __lhs, const years& __rhs) noexcept"},
{"lineNum":" 1813","line":"{ return year(static_cast<int>(__lhs) + __rhs.count()); }"},
{"lineNum":" 1814","line":""},
{"lineNum":" 1815","line":"inline constexpr"},
{"lineNum":" 1816","line":"year operator+ (const years& __lhs, const year& __rhs) noexcept"},
{"lineNum":" 1817","line":"{ return __rhs + __lhs; }"},
{"lineNum":" 1818","line":""},
{"lineNum":" 1819","line":"inline constexpr"},
{"lineNum":" 1820","line":"year operator- (const year& __lhs, const years& __rhs) noexcept"},
{"lineNum":" 1821","line":"{ return __lhs + -__rhs; }"},
{"lineNum":" 1822","line":""},
{"lineNum":" 1823","line":"inline constexpr"},
{"lineNum":" 1824","line":"years operator-(const year& __lhs, const year& __rhs) noexcept"},
{"lineNum":" 1825","line":"{ return years{static_cast<int>(__lhs) - static_cast<int>(__rhs)}; }"},
{"lineNum":" 1826","line":""},
{"lineNum":" 1827","line":""},
{"lineNum":" 1828","line":"inline constexpr year& year::operator+=(const years& __dy) noexcept"},
{"lineNum":" 1829","line":"{ *this = *this + __dy; return *this; }"},
{"lineNum":" 1830","line":""},
{"lineNum":" 1831","line":"inline constexpr year& year::operator-=(const years& __dy) noexcept"},
{"lineNum":" 1832","line":"{ *this = *this - __dy; return *this; }"},
{"lineNum":" 1833","line":""},
{"lineNum":" 1834","line":"inline constexpr bool year::ok() const noexcept"},
{"lineNum":" 1835","line":"{ return static_cast<int>(min()) <= __y && __y <= static_cast<int>(max()); }"},
{"lineNum":" 1836","line":""},
{"lineNum":" 1837","line":"class weekday_indexed;"},
{"lineNum":" 1838","line":"class weekday_last;"},
{"lineNum":" 1839","line":""},
{"lineNum":" 1840","line":"class weekday {"},
{"lineNum":" 1841","line":"private:"},
{"lineNum":" 1842","line":"    unsigned char __wd;"},
{"lineNum":" 1843","line":"public:"},
{"lineNum":" 1844","line":"  weekday() = default;"},
{"lineNum":" 1845","line":"  inline explicit constexpr weekday(unsigned __val) noexcept : __wd(static_cast<unsigned char>(__val == 7 ? 0 : __val)) {}"},
{"lineNum":" 1846","line":"  inline constexpr          weekday(const sys_days& __sysd) noexcept"},
{"lineNum":" 1847","line":"          : __wd(__weekday_from_days(__sysd.time_since_epoch().count())) {}"},
{"lineNum":" 1848","line":"  inline explicit constexpr weekday(const local_days& __locd) noexcept"},
{"lineNum":" 1849","line":"          : __wd(__weekday_from_days(__locd.time_since_epoch().count())) {}"},
{"lineNum":" 1850","line":""},
{"lineNum":" 1851","line":"  inline constexpr weekday& operator++()    noexcept { __wd = (__wd == 6 ? 0 : __wd + 1); return *this; }"},
{"lineNum":" 1852","line":"  inline constexpr weekday  operator++(int) noexcept { weekday __tmp = *this; ++(*this); return __tmp; }"},
{"lineNum":" 1853","line":"  inline constexpr weekday& operator--()    noexcept { __wd = (__wd == 0 ? 6 : __wd - 1); return *this; }"},
{"lineNum":" 1854","line":"  inline constexpr weekday  operator--(int) noexcept { weekday __tmp = *this; --(*this); return __tmp; }"},
{"lineNum":" 1855","line":"         constexpr weekday& operator+=(const days& __dd) noexcept;"},
{"lineNum":" 1856","line":"         constexpr weekday& operator-=(const days& __dd) noexcept;"},
{"lineNum":" 1857","line":"  inline constexpr unsigned c_encoding()   const noexcept { return __wd; }"},
{"lineNum":" 1858","line":"  inline constexpr unsigned iso_encoding() const noexcept { return __wd == 0u ? 7 : __wd; }"},
{"lineNum":" 1859","line":"  inline constexpr bool ok() const noexcept { return __wd <= 6; }"},
{"lineNum":" 1860","line":"         constexpr weekday_indexed operator[](unsigned __index) const noexcept;"},
{"lineNum":" 1861","line":"         constexpr weekday_last    operator[](last_spec) const noexcept;"},
{"lineNum":" 1862","line":""},
{"lineNum":" 1863","line":"  // TODO: Make private?"},
{"lineNum":" 1864","line":"  static constexpr unsigned char __weekday_from_days(int __days) noexcept;"},
{"lineNum":" 1865","line":"};"},
{"lineNum":" 1866","line":""},
{"lineNum":" 1867","line":""},
{"lineNum":" 1868","line":"// https://howardhinnant.github.io/date_algorithms.html#weekday_from_days"},
{"lineNum":" 1869","line":"inline constexpr"},
{"lineNum":" 1870","line":"unsigned char weekday::__weekday_from_days(int __days) noexcept"},
{"lineNum":" 1871","line":"{"},
{"lineNum":" 1872","line":"    return static_cast<unsigned char>("},
{"lineNum":" 1873","line":"              static_cast<unsigned>(__days >= -4 ? (__days+4) % 7 : (__days+5) % 7 + 6)"},
{"lineNum":" 1874","line":"           );"},
{"lineNum":" 1875","line":"}"},
{"lineNum":" 1876","line":""},
{"lineNum":" 1877","line":"inline constexpr"},
{"lineNum":" 1878","line":"bool operator==(const weekday& __lhs, const weekday& __rhs) noexcept"},
{"lineNum":" 1879","line":"{ return __lhs.c_encoding() == __rhs.c_encoding(); }"},
{"lineNum":" 1880","line":""},
{"lineNum":" 1881","line":"inline constexpr"},
{"lineNum":" 1882","line":"bool operator!=(const weekday& __lhs, const weekday& __rhs) noexcept"},
{"lineNum":" 1883","line":"{ return !(__lhs == __rhs); }"},
{"lineNum":" 1884","line":""},
{"lineNum":" 1885","line":"inline constexpr"},
{"lineNum":" 1886","line":"bool operator< (const weekday& __lhs, const weekday& __rhs) noexcept"},
{"lineNum":" 1887","line":"{ return __lhs.c_encoding() < __rhs.c_encoding(); }"},
{"lineNum":" 1888","line":""},
{"lineNum":" 1889","line":"inline constexpr"},
{"lineNum":" 1890","line":"bool operator> (const weekday& __lhs, const weekday& __rhs) noexcept"},
{"lineNum":" 1891","line":"{ return __rhs < __lhs; }"},
{"lineNum":" 1892","line":""},
{"lineNum":" 1893","line":"inline constexpr"},
{"lineNum":" 1894","line":"bool operator<=(const weekday& __lhs, const weekday& __rhs) noexcept"},
{"lineNum":" 1895","line":"{ return !(__rhs < __lhs);}"},
{"lineNum":" 1896","line":""},
{"lineNum":" 1897","line":"inline constexpr"},
{"lineNum":" 1898","line":"bool operator>=(const weekday& __lhs, const weekday& __rhs) noexcept"},
{"lineNum":" 1899","line":"{ return !(__lhs < __rhs); }"},
{"lineNum":" 1900","line":""},
{"lineNum":" 1901","line":"constexpr weekday operator+(const weekday& __lhs, const days& __rhs) noexcept"},
{"lineNum":" 1902","line":"{"},
{"lineNum":" 1903","line":"    auto const __mu = static_cast<long long>(__lhs.c_encoding()) + __rhs.count();"},
{"lineNum":" 1904","line":"    auto const __yr = (__mu >= 0 ? __mu : __mu - 6) / 7;"},
{"lineNum":" 1905","line":"    return weekday{static_cast<unsigned>(__mu - __yr * 7)};"},
{"lineNum":" 1906","line":"}"},
{"lineNum":" 1907","line":""},
{"lineNum":" 1908","line":"constexpr weekday operator+(const days& __lhs, const weekday& __rhs) noexcept"},
{"lineNum":" 1909","line":"{ return __rhs + __lhs; }"},
{"lineNum":" 1910","line":""},
{"lineNum":" 1911","line":"constexpr weekday operator-(const weekday& __lhs, const days& __rhs) noexcept"},
{"lineNum":" 1912","line":"{ return __lhs + -__rhs; }"},
{"lineNum":" 1913","line":""},
{"lineNum":" 1914","line":"constexpr days operator-(const weekday& __lhs, const weekday& __rhs) noexcept"},
{"lineNum":" 1915","line":"{"},
{"lineNum":" 1916","line":"    const int __wdu = __lhs.c_encoding() - __rhs.c_encoding();"},
{"lineNum":" 1917","line":"    const int __wk = (__wdu >= 0 ? __wdu : __wdu-6) / 7;"},
{"lineNum":" 1918","line":"    return days{__wdu - __wk * 7};"},
{"lineNum":" 1919","line":"}"},
{"lineNum":" 1920","line":""},
{"lineNum":" 1921","line":"inline constexpr weekday& weekday::operator+=(const days& __dd) noexcept"},
{"lineNum":" 1922","line":"{ *this = *this + __dd; return *this; }"},
{"lineNum":" 1923","line":""},
{"lineNum":" 1924","line":"inline constexpr weekday& weekday::operator-=(const days& __dd) noexcept"},
{"lineNum":" 1925","line":"{ *this = *this - __dd; return *this; }"},
{"lineNum":" 1926","line":""},
{"lineNum":" 1927","line":""},
{"lineNum":" 1928","line":"class weekday_indexed {"},
{"lineNum":" 1929","line":"private:"},
{"lineNum":" 1930","line":"    chrono::weekday __wd;"},
{"lineNum":" 1931","line":"    unsigned char          __idx;"},
{"lineNum":" 1932","line":"public:"},
{"lineNum":" 1933","line":"    weekday_indexed() = default;"},
{"lineNum":" 1934","line":"    inline constexpr weekday_indexed(const chrono::weekday& __wdval, unsigned __idxval) noexcept"},
{"lineNum":" 1935","line":"        : __wd{__wdval}, __idx(__idxval) {}"},
{"lineNum":" 1936","line":"    inline constexpr chrono::weekday weekday() const noexcept { return __wd; }"},
{"lineNum":" 1937","line":"    inline constexpr unsigned                 index() const noexcept { return __idx; }"},
{"lineNum":" 1938","line":"    inline constexpr bool ok() const noexcept { return __wd.ok() && __idx >= 1 && __idx <= 5; }"},
{"lineNum":" 1939","line":"};"},
{"lineNum":" 1940","line":""},
{"lineNum":" 1941","line":"inline constexpr"},
{"lineNum":" 1942","line":"bool operator==(const weekday_indexed& __lhs, const weekday_indexed& __rhs) noexcept"},
{"lineNum":" 1943","line":"{ return __lhs.weekday() == __rhs.weekday() && __lhs.index() == __rhs.index(); }"},
{"lineNum":" 1944","line":""},
{"lineNum":" 1945","line":"inline constexpr"},
{"lineNum":" 1946","line":"bool operator!=(const weekday_indexed& __lhs, const weekday_indexed& __rhs) noexcept"},
{"lineNum":" 1947","line":"{ return !(__lhs == __rhs); }"},
{"lineNum":" 1948","line":""},
{"lineNum":" 1949","line":""},
{"lineNum":" 1950","line":"class weekday_last {"},
{"lineNum":" 1951","line":"private:"},
{"lineNum":" 1952","line":"    chrono::weekday __wd;"},
{"lineNum":" 1953","line":"public:"},
{"lineNum":" 1954","line":"    explicit constexpr weekday_last(const chrono::weekday& __val) noexcept"},
{"lineNum":" 1955","line":"        : __wd{__val} {}"},
{"lineNum":" 1956","line":"    constexpr chrono::weekday weekday() const noexcept { return __wd; }"},
{"lineNum":" 1957","line":"    constexpr bool ok() const noexcept { return __wd.ok(); }"},
{"lineNum":" 1958","line":"};"},
{"lineNum":" 1959","line":""},
{"lineNum":" 1960","line":"inline constexpr"},
{"lineNum":" 1961","line":"bool operator==(const weekday_last& __lhs, const weekday_last& __rhs) noexcept"},
{"lineNum":" 1962","line":"{ return __lhs.weekday() == __rhs.weekday(); }"},
{"lineNum":" 1963","line":""},
{"lineNum":" 1964","line":"inline constexpr"},
{"lineNum":" 1965","line":"bool operator!=(const weekday_last& __lhs, const weekday_last& __rhs) noexcept"},
{"lineNum":" 1966","line":"{ return !(__lhs == __rhs); }"},
{"lineNum":" 1967","line":""},
{"lineNum":" 1968","line":"inline constexpr"},
{"lineNum":" 1969","line":"weekday_indexed weekday::operator[](unsigned __index) const noexcept { return weekday_indexed{*this, __index}; }"},
{"lineNum":" 1970","line":""},
{"lineNum":" 1971","line":"inline constexpr"},
{"lineNum":" 1972","line":"weekday_last    weekday::operator[](last_spec) const noexcept { return weekday_last{*this}; }"},
{"lineNum":" 1973","line":""},
{"lineNum":" 1974","line":""},
{"lineNum":" 1975","line":"inline constexpr last_spec last{};"},
{"lineNum":" 1976","line":"inline constexpr weekday   Sunday{0};"},
{"lineNum":" 1977","line":"inline constexpr weekday   Monday{1};"},
{"lineNum":" 1978","line":"inline constexpr weekday   Tuesday{2};"},
{"lineNum":" 1979","line":"inline constexpr weekday   Wednesday{3};"},
{"lineNum":" 1980","line":"inline constexpr weekday   Thursday{4};"},
{"lineNum":" 1981","line":"inline constexpr weekday   Friday{5};"},
{"lineNum":" 1982","line":"inline constexpr weekday   Saturday{6};"},
{"lineNum":" 1983","line":""},
{"lineNum":" 1984","line":"inline constexpr month January{1};"},
{"lineNum":" 1985","line":"inline constexpr month February{2};"},
{"lineNum":" 1986","line":"inline constexpr month March{3};"},
{"lineNum":" 1987","line":"inline constexpr month April{4};"},
{"lineNum":" 1988","line":"inline constexpr month May{5};"},
{"lineNum":" 1989","line":"inline constexpr month June{6};"},
{"lineNum":" 1990","line":"inline constexpr month July{7};"},
{"lineNum":" 1991","line":"inline constexpr month August{8};"},
{"lineNum":" 1992","line":"inline constexpr month September{9};"},
{"lineNum":" 1993","line":"inline constexpr month October{10};"},
{"lineNum":" 1994","line":"inline constexpr month November{11};"},
{"lineNum":" 1995","line":"inline constexpr month December{12};"},
{"lineNum":" 1996","line":""},
{"lineNum":" 1997","line":""},
{"lineNum":" 1998","line":"class month_day {"},
{"lineNum":" 1999","line":"private:"},
{"lineNum":" 2000","line":"   chrono::month __m;"},
{"lineNum":" 2001","line":"   chrono::day   __d;"},
{"lineNum":" 2002","line":"public:"},
{"lineNum":" 2003","line":"    month_day() = default;"},
{"lineNum":" 2004","line":"    constexpr month_day(const chrono::month& __mval, const chrono::day& __dval) noexcept"},
{"lineNum":" 2005","line":"        : __m{__mval}, __d{__dval} {}"},
{"lineNum":" 2006","line":"    inline constexpr chrono::month month() const noexcept { return __m; }"},
{"lineNum":" 2007","line":"    inline constexpr chrono::day   day()   const noexcept { return __d; }"},
{"lineNum":" 2008","line":"    constexpr bool ok() const noexcept;"},
{"lineNum":" 2009","line":"};"},
{"lineNum":" 2010","line":""},
{"lineNum":" 2011","line":"inline constexpr"},
{"lineNum":" 2012","line":"bool month_day::ok() const noexcept"},
{"lineNum":" 2013","line":"{"},
{"lineNum":" 2014","line":"    if (!__m.ok()) return false;"},
{"lineNum":" 2015","line":"    const unsigned __dval = static_cast<unsigned>(__d);"},
{"lineNum":" 2016","line":"    if (__dval < 1 || __dval > 31) return false;"},
{"lineNum":" 2017","line":"    if (__dval <= 29) return true;"},
{"lineNum":" 2018","line":"//  Now we\'ve got either 30 or 31"},
{"lineNum":" 2019","line":"    const unsigned __mval = static_cast<unsigned>(__m);"},
{"lineNum":" 2020","line":"    if (__mval == 2) return false;"},
{"lineNum":" 2021","line":"    if (__mval == 4 || __mval == 6 || __mval == 9 || __mval == 11)"},
{"lineNum":" 2022","line":"        return __dval == 30;"},
{"lineNum":" 2023","line":"    return true;"},
{"lineNum":" 2024","line":"}"},
{"lineNum":" 2025","line":""},
{"lineNum":" 2026","line":"inline constexpr"},
{"lineNum":" 2027","line":"bool operator==(const month_day& __lhs, const month_day& __rhs) noexcept"},
{"lineNum":" 2028","line":"{ return __lhs.month() == __rhs.month() && __lhs.day() == __rhs.day(); }"},
{"lineNum":" 2029","line":""},
{"lineNum":" 2030","line":"inline constexpr"},
{"lineNum":" 2031","line":"bool operator!=(const month_day& __lhs, const month_day& __rhs) noexcept"},
{"lineNum":" 2032","line":"{ return !(__lhs == __rhs); }"},
{"lineNum":" 2033","line":""},
{"lineNum":" 2034","line":"inline constexpr"},
{"lineNum":" 2035","line":"month_day operator/(const month& __lhs, const day& __rhs) noexcept"},
{"lineNum":" 2036","line":"{ return month_day{__lhs, __rhs}; }"},
{"lineNum":" 2037","line":""},
{"lineNum":" 2038","line":"constexpr"},
{"lineNum":" 2039","line":"month_day operator/(const day& __lhs, const month& __rhs) noexcept"},
{"lineNum":" 2040","line":"{ return __rhs / __lhs; }"},
{"lineNum":" 2041","line":""},
{"lineNum":" 2042","line":"inline constexpr"},
{"lineNum":" 2043","line":"month_day operator/(const month& __lhs, int __rhs) noexcept"},
{"lineNum":" 2044","line":"{ return __lhs / day(__rhs); }"},
{"lineNum":" 2045","line":""},
{"lineNum":" 2046","line":"constexpr"},
{"lineNum":" 2047","line":"month_day operator/(int __lhs, const day& __rhs) noexcept"},
{"lineNum":" 2048","line":"{ return month(__lhs) / __rhs; }"},
{"lineNum":" 2049","line":""},
{"lineNum":" 2050","line":"constexpr"},
{"lineNum":" 2051","line":"month_day operator/(const day& __lhs, int __rhs) noexcept"},
{"lineNum":" 2052","line":"{ return month(__rhs) / __lhs; }"},
{"lineNum":" 2053","line":""},
{"lineNum":" 2054","line":""},
{"lineNum":" 2055","line":"inline constexpr"},
{"lineNum":" 2056","line":"bool operator< (const month_day& __lhs, const month_day& __rhs) noexcept"},
{"lineNum":" 2057","line":"{ return __lhs.month() != __rhs.month() ? __lhs.month() < __rhs.month() : __lhs.day() < __rhs.day(); }"},
{"lineNum":" 2058","line":""},
{"lineNum":" 2059","line":"inline constexpr"},
{"lineNum":" 2060","line":"bool operator> (const month_day& __lhs, const month_day& __rhs) noexcept"},
{"lineNum":" 2061","line":"{ return __rhs < __lhs; }"},
{"lineNum":" 2062","line":""},
{"lineNum":" 2063","line":"inline constexpr"},
{"lineNum":" 2064","line":"bool operator<=(const month_day& __lhs, const month_day& __rhs) noexcept"},
{"lineNum":" 2065","line":"{ return !(__rhs < __lhs);}"},
{"lineNum":" 2066","line":""},
{"lineNum":" 2067","line":"inline constexpr"},
{"lineNum":" 2068","line":"bool operator>=(const month_day& __lhs, const month_day& __rhs) noexcept"},
{"lineNum":" 2069","line":"{ return !(__lhs < __rhs); }"},
{"lineNum":" 2070","line":""},
{"lineNum":" 2071","line":""},
{"lineNum":" 2072","line":""},
{"lineNum":" 2073","line":"class month_day_last {"},
{"lineNum":" 2074","line":"private:"},
{"lineNum":" 2075","line":"    chrono::month __m;"},
{"lineNum":" 2076","line":"public:"},
{"lineNum":" 2077","line":"    explicit constexpr month_day_last(const chrono::month& __val) noexcept"},
{"lineNum":" 2078","line":"        : __m{__val} {}"},
{"lineNum":" 2079","line":"    inline constexpr chrono::month month() const noexcept { return __m; }"},
{"lineNum":" 2080","line":"    inline constexpr bool ok() const noexcept { return __m.ok(); }"},
{"lineNum":" 2081","line":"};"},
{"lineNum":" 2082","line":""},
{"lineNum":" 2083","line":"inline constexpr"},
{"lineNum":" 2084","line":"bool operator==(const month_day_last& __lhs, const month_day_last& __rhs) noexcept"},
{"lineNum":" 2085","line":"{ return __lhs.month() == __rhs.month(); }"},
{"lineNum":" 2086","line":""},
{"lineNum":" 2087","line":"inline constexpr"},
{"lineNum":" 2088","line":"bool operator!=(const month_day_last& __lhs, const month_day_last& __rhs) noexcept"},
{"lineNum":" 2089","line":"{ return !(__lhs == __rhs); }"},
{"lineNum":" 2090","line":""},
{"lineNum":" 2091","line":"inline constexpr"},
{"lineNum":" 2092","line":"bool operator< (const month_day_last& __lhs, const month_day_last& __rhs) noexcept"},
{"lineNum":" 2093","line":"{ return __lhs.month() < __rhs.month(); }"},
{"lineNum":" 2094","line":""},
{"lineNum":" 2095","line":"inline constexpr"},
{"lineNum":" 2096","line":"bool operator> (const month_day_last& __lhs, const month_day_last& __rhs) noexcept"},
{"lineNum":" 2097","line":"{ return __rhs < __lhs; }"},
{"lineNum":" 2098","line":""},
{"lineNum":" 2099","line":"inline constexpr"},
{"lineNum":" 2100","line":"bool operator<=(const month_day_last& __lhs, const month_day_last& __rhs) noexcept"},
{"lineNum":" 2101","line":"{ return !(__rhs < __lhs);}"},
{"lineNum":" 2102","line":""},
{"lineNum":" 2103","line":"inline constexpr"},
{"lineNum":" 2104","line":"bool operator>=(const month_day_last& __lhs, const month_day_last& __rhs) noexcept"},
{"lineNum":" 2105","line":"{ return !(__lhs < __rhs); }"},
{"lineNum":" 2106","line":""},
{"lineNum":" 2107","line":"inline constexpr"},
{"lineNum":" 2108","line":"month_day_last operator/(const month& __lhs, last_spec) noexcept"},
{"lineNum":" 2109","line":"{ return month_day_last{__lhs}; }"},
{"lineNum":" 2110","line":""},
{"lineNum":" 2111","line":"inline constexpr"},
{"lineNum":" 2112","line":"month_day_last operator/(last_spec, const month& __rhs) noexcept"},
{"lineNum":" 2113","line":"{ return month_day_last{__rhs}; }"},
{"lineNum":" 2114","line":""},
{"lineNum":" 2115","line":"inline constexpr"},
{"lineNum":" 2116","line":"month_day_last operator/(int __lhs, last_spec) noexcept"},
{"lineNum":" 2117","line":"{ return month_day_last{month(__lhs)}; }"},
{"lineNum":" 2118","line":""},
{"lineNum":" 2119","line":"inline constexpr"},
{"lineNum":" 2120","line":"month_day_last operator/(last_spec, int __rhs) noexcept"},
{"lineNum":" 2121","line":"{ return month_day_last{month(__rhs)}; }"},
{"lineNum":" 2122","line":""},
{"lineNum":" 2123","line":""},
{"lineNum":" 2124","line":"class month_weekday {"},
{"lineNum":" 2125","line":"private:"},
{"lineNum":" 2126","line":"    chrono::month __m;"},
{"lineNum":" 2127","line":"    chrono::weekday_indexed __wdi;"},
{"lineNum":" 2128","line":"public:"},
{"lineNum":" 2129","line":"    month_weekday() = default;"},
{"lineNum":" 2130","line":"    constexpr month_weekday(const chrono::month& __mval, const chrono::weekday_indexed& __wdival) noexcept"},
{"lineNum":" 2131","line":"        : __m{__mval}, __wdi{__wdival} {}"},
{"lineNum":" 2132","line":"    inline constexpr chrono::month                     month() const noexcept { return __m; }"},
{"lineNum":" 2133","line":"    inline constexpr chrono::weekday_indexed weekday_indexed() const noexcept { return __wdi; }"},
{"lineNum":" 2134","line":"    inline constexpr bool                                 ok() const noexcept { return __m.ok() && __wdi.ok(); }"},
{"lineNum":" 2135","line":"};"},
{"lineNum":" 2136","line":""},
{"lineNum":" 2137","line":"inline constexpr"},
{"lineNum":" 2138","line":"bool operator==(const month_weekday& __lhs, const month_weekday& __rhs) noexcept"},
{"lineNum":" 2139","line":"{ return __lhs.month() == __rhs.month() && __lhs.weekday_indexed() == __rhs.weekday_indexed(); }"},
{"lineNum":" 2140","line":""},
{"lineNum":" 2141","line":"inline constexpr"},
{"lineNum":" 2142","line":"bool operator!=(const month_weekday& __lhs, const month_weekday& __rhs) noexcept"},
{"lineNum":" 2143","line":"{ return !(__lhs == __rhs); }"},
{"lineNum":" 2144","line":""},
{"lineNum":" 2145","line":"inline constexpr"},
{"lineNum":" 2146","line":"month_weekday operator/(const month& __lhs, const weekday_indexed& __rhs) noexcept"},
{"lineNum":" 2147","line":"{ return month_weekday{__lhs, __rhs}; }"},
{"lineNum":" 2148","line":""},
{"lineNum":" 2149","line":"inline constexpr"},
{"lineNum":" 2150","line":"month_weekday operator/(int __lhs, const weekday_indexed& __rhs) noexcept"},
{"lineNum":" 2151","line":"{ return month_weekday{month(__lhs), __rhs}; }"},
{"lineNum":" 2152","line":""},
{"lineNum":" 2153","line":"inline constexpr"},
{"lineNum":" 2154","line":"month_weekday operator/(const weekday_indexed& __lhs, const month& __rhs) noexcept"},
{"lineNum":" 2155","line":"{ return month_weekday{__rhs, __lhs}; }"},
{"lineNum":" 2156","line":""},
{"lineNum":" 2157","line":"inline constexpr"},
{"lineNum":" 2158","line":"month_weekday operator/(const weekday_indexed& __lhs, int __rhs) noexcept"},
{"lineNum":" 2159","line":"{ return month_weekday{month(__rhs), __lhs}; }"},
{"lineNum":" 2160","line":""},
{"lineNum":" 2161","line":""},
{"lineNum":" 2162","line":"class month_weekday_last {"},
{"lineNum":" 2163","line":"    chrono::month        __m;"},
{"lineNum":" 2164","line":"    chrono::weekday_last __wdl;"},
{"lineNum":" 2165","line":"  public:"},
{"lineNum":" 2166","line":"    constexpr month_weekday_last(const chrono::month& __mval, const chrono::weekday_last& __wdlval) noexcept"},
{"lineNum":" 2167","line":"        : __m{__mval}, __wdl{__wdlval} {}"},
{"lineNum":" 2168","line":"    inline constexpr chrono::month               month() const noexcept { return __m; }"},
{"lineNum":" 2169","line":"    inline constexpr chrono::weekday_last weekday_last() const noexcept { return __wdl; }"},
{"lineNum":" 2170","line":"    inline constexpr bool                           ok() const noexcept { return __m.ok() && __wdl.ok(); }"},
{"lineNum":" 2171","line":"};"},
{"lineNum":" 2172","line":""},
{"lineNum":" 2173","line":"inline constexpr"},
{"lineNum":" 2174","line":"bool operator==(const month_weekday_last& __lhs, const month_weekday_last& __rhs) noexcept"},
{"lineNum":" 2175","line":"{ return __lhs.month() == __rhs.month() && __lhs.weekday_last() == __rhs.weekday_last(); }"},
{"lineNum":" 2176","line":""},
{"lineNum":" 2177","line":"inline constexpr"},
{"lineNum":" 2178","line":"bool operator!=(const month_weekday_last& __lhs, const month_weekday_last& __rhs) noexcept"},
{"lineNum":" 2179","line":"{ return !(__lhs == __rhs); }"},
{"lineNum":" 2180","line":""},
{"lineNum":" 2181","line":""},
{"lineNum":" 2182","line":"inline constexpr"},
{"lineNum":" 2183","line":"month_weekday_last operator/(const month& __lhs, const weekday_last& __rhs) noexcept"},
{"lineNum":" 2184","line":"{ return month_weekday_last{__lhs, __rhs}; }"},
{"lineNum":" 2185","line":""},
{"lineNum":" 2186","line":"inline constexpr"},
{"lineNum":" 2187","line":"month_weekday_last operator/(int __lhs, const weekday_last& __rhs) noexcept"},
{"lineNum":" 2188","line":"{ return month_weekday_last{month(__lhs), __rhs}; }"},
{"lineNum":" 2189","line":""},
{"lineNum":" 2190","line":"inline constexpr"},
{"lineNum":" 2191","line":"month_weekday_last operator/(const weekday_last& __lhs, const month& __rhs) noexcept"},
{"lineNum":" 2192","line":"{ return month_weekday_last{__rhs, __lhs}; }"},
{"lineNum":" 2193","line":""},
{"lineNum":" 2194","line":"inline constexpr"},
{"lineNum":" 2195","line":"month_weekday_last operator/(const weekday_last& __lhs, int __rhs) noexcept"},
{"lineNum":" 2196","line":"{ return month_weekday_last{month(__rhs), __lhs}; }"},
{"lineNum":" 2197","line":""},
{"lineNum":" 2198","line":""},
{"lineNum":" 2199","line":"class year_month {"},
{"lineNum":" 2200","line":"    chrono::year  __y;"},
{"lineNum":" 2201","line":"    chrono::month __m;"},
{"lineNum":" 2202","line":"public:"},
{"lineNum":" 2203","line":"    year_month() = default;"},
{"lineNum":" 2204","line":"    constexpr year_month(const chrono::year& __yval, const chrono::month& __mval) noexcept"},
{"lineNum":" 2205","line":"        : __y{__yval}, __m{__mval} {}"},
{"lineNum":" 2206","line":"    inline constexpr chrono::year  year()  const noexcept { return __y; }"},
{"lineNum":" 2207","line":"    inline constexpr chrono::month month() const noexcept { return __m; }"},
{"lineNum":" 2208","line":"    inline constexpr year_month& operator+=(const months& __dm) noexcept { this->__m += __dm; return *this; }"},
{"lineNum":" 2209","line":"    inline constexpr year_month& operator-=(const months& __dm) noexcept { this->__m -= __dm; return *this; }"},
{"lineNum":" 2210","line":"    inline constexpr year_month& operator+=(const years& __dy)  noexcept { this->__y += __dy; return *this; }"},
{"lineNum":" 2211","line":"    inline constexpr year_month& operator-=(const years& __dy)  noexcept { this->__y -= __dy; return *this; }"},
{"lineNum":" 2212","line":"    inline constexpr bool ok() const noexcept { return __y.ok() && __m.ok(); }"},
{"lineNum":" 2213","line":"};"},
{"lineNum":" 2214","line":""},
{"lineNum":" 2215","line":"inline constexpr"},
{"lineNum":" 2216","line":"year_month operator/(const year& __y, const month& __m) noexcept { return year_month{__y, __m}; }"},
{"lineNum":" 2217","line":""},
{"lineNum":" 2218","line":"inline constexpr"},
{"lineNum":" 2219","line":"year_month operator/(const year& __y, int __m) noexcept { return year_month{__y, month(__m)}; }"},
{"lineNum":" 2220","line":""},
{"lineNum":" 2221","line":"inline constexpr"},
{"lineNum":" 2222","line":"bool operator==(const year_month& __lhs, const year_month& __rhs) noexcept"},
{"lineNum":" 2223","line":"{ return __lhs.year() == __rhs.year() && __lhs.month() == __rhs.month(); }"},
{"lineNum":" 2224","line":""},
{"lineNum":" 2225","line":"inline constexpr"},
{"lineNum":" 2226","line":"bool operator!=(const year_month& __lhs, const year_month& __rhs) noexcept"},
{"lineNum":" 2227","line":"{ return !(__lhs == __rhs); }"},
{"lineNum":" 2228","line":""},
{"lineNum":" 2229","line":"inline constexpr"},
{"lineNum":" 2230","line":"bool operator< (const year_month& __lhs, const year_month& __rhs) noexcept"},
{"lineNum":" 2231","line":"{ return __lhs.year() != __rhs.year() ? __lhs.year() < __rhs.year() : __lhs.month() < __rhs.month(); }"},
{"lineNum":" 2232","line":""},
{"lineNum":" 2233","line":"inline constexpr"},
{"lineNum":" 2234","line":"bool operator> (const year_month& __lhs, const year_month& __rhs) noexcept"},
{"lineNum":" 2235","line":"{ return __rhs < __lhs; }"},
{"lineNum":" 2236","line":""},
{"lineNum":" 2237","line":"inline constexpr"},
{"lineNum":" 2238","line":"bool operator<=(const year_month& __lhs, const year_month& __rhs) noexcept"},
{"lineNum":" 2239","line":"{ return !(__rhs < __lhs);}"},
{"lineNum":" 2240","line":""},
{"lineNum":" 2241","line":"inline constexpr"},
{"lineNum":" 2242","line":"bool operator>=(const year_month& __lhs, const year_month& __rhs) noexcept"},
{"lineNum":" 2243","line":"{ return !(__lhs < __rhs); }"},
{"lineNum":" 2244","line":""},
{"lineNum":" 2245","line":"constexpr year_month operator+(const year_month& __lhs, const months& __rhs) noexcept"},
{"lineNum":" 2246","line":"{"},
{"lineNum":" 2247","line":"    int __dmi = static_cast<int>(static_cast<unsigned>(__lhs.month())) - 1 + __rhs.count();"},
{"lineNum":" 2248","line":"    const int __dy = (__dmi >= 0 ? __dmi : __dmi-11) / 12;"},
{"lineNum":" 2249","line":"    __dmi = __dmi - __dy * 12 + 1;"},
{"lineNum":" 2250","line":"    return (__lhs.year() + years(__dy)) / month(static_cast<unsigned>(__dmi));"},
{"lineNum":" 2251","line":"}"},
{"lineNum":" 2252","line":""},
{"lineNum":" 2253","line":"constexpr year_month operator+(const months& __lhs, const year_month& __rhs) noexcept"},
{"lineNum":" 2254","line":"{ return __rhs + __lhs; }"},
{"lineNum":" 2255","line":""},
{"lineNum":" 2256","line":"constexpr year_month operator+(const year_month& __lhs, const years& __rhs) noexcept"},
{"lineNum":" 2257","line":"{ return (__lhs.year() + __rhs) / __lhs.month(); }"},
{"lineNum":" 2258","line":""},
{"lineNum":" 2259","line":"constexpr year_month operator+(const years& __lhs, const year_month& __rhs) noexcept"},
{"lineNum":" 2260","line":"{ return __rhs + __lhs; }"},
{"lineNum":" 2261","line":""},
{"lineNum":" 2262","line":"constexpr months     operator-(const year_month& __lhs, const year_month& __rhs) noexcept"},
{"lineNum":" 2263","line":"{ return (__lhs.year() - __rhs.year()) + months(static_cast<unsigned>(__lhs.month()) - static_cast<unsigned>(__rhs.month())); }"},
{"lineNum":" 2264","line":""},
{"lineNum":" 2265","line":"constexpr year_month operator-(const year_month& __lhs, const months& __rhs) noexcept"},
{"lineNum":" 2266","line":"{ return __lhs + -__rhs; }"},
{"lineNum":" 2267","line":""},
{"lineNum":" 2268","line":"constexpr year_month operator-(const year_month& __lhs, const years& __rhs) noexcept"},
{"lineNum":" 2269","line":"{ return __lhs + -__rhs; }"},
{"lineNum":" 2270","line":""},
{"lineNum":" 2271","line":"class year_month_day_last;"},
{"lineNum":" 2272","line":""},
{"lineNum":" 2273","line":"class year_month_day {"},
{"lineNum":" 2274","line":"private:"},
{"lineNum":" 2275","line":"    chrono::year  __y;"},
{"lineNum":" 2276","line":"    chrono::month __m;"},
{"lineNum":" 2277","line":"    chrono::day   __d;"},
{"lineNum":" 2278","line":"public:"},
{"lineNum":" 2279","line":"     year_month_day() = default;"},
{"lineNum":" 2280","line":"     inline constexpr year_month_day("},
{"lineNum":" 2281","line":"            const chrono::year& __yval, const chrono::month& __mval, const chrono::day& __dval) noexcept"},
{"lineNum":" 2282","line":"            : __y{__yval}, __m{__mval}, __d{__dval} {}"},
{"lineNum":" 2283","line":"            constexpr year_month_day(const year_month_day_last& __ymdl) noexcept;"},
{"lineNum":" 2284","line":"     inline constexpr year_month_day(const sys_days& __sysd) noexcept"},
{"lineNum":" 2285","line":"            : year_month_day(__from_days(__sysd.time_since_epoch())) {}"},
{"lineNum":" 2286","line":"     inline explicit constexpr year_month_day(const local_days& __locd) noexcept"},
{"lineNum":" 2287","line":"            : year_month_day(__from_days(__locd.time_since_epoch())) {}"},
{"lineNum":" 2288","line":""},
{"lineNum":" 2289","line":"            constexpr year_month_day& operator+=(const months& __dm) noexcept;"},
{"lineNum":" 2290","line":"            constexpr year_month_day& operator-=(const months& __dm) noexcept;"},
{"lineNum":" 2291","line":"            constexpr year_month_day& operator+=(const years& __dy)  noexcept;"},
{"lineNum":" 2292","line":"            constexpr year_month_day& operator-=(const years& __dy)  noexcept;"},
{"lineNum":" 2293","line":""},
{"lineNum":" 2294","line":"     inline constexpr chrono::year   year() const noexcept { return __y; }"},
{"lineNum":" 2295","line":"     inline constexpr chrono::month month() const noexcept { return __m; }"},
{"lineNum":" 2296","line":"     inline constexpr chrono::day     day() const noexcept { return __d; }"},
{"lineNum":" 2297","line":"     inline constexpr operator   sys_days() const noexcept          { return   sys_days{__to_days()}; }"},
{"lineNum":" 2298","line":"     inline explicit constexpr operator local_days() const noexcept { return local_days{__to_days()}; }"},
{"lineNum":" 2299","line":""},
{"lineNum":" 2300","line":"            constexpr bool             ok() const noexcept;"},
{"lineNum":" 2301","line":""},
{"lineNum":" 2302","line":"     static constexpr year_month_day __from_days(days __d) noexcept;"},
{"lineNum":" 2303","line":"     constexpr days __to_days() const noexcept;"},
{"lineNum":" 2304","line":"};"},
{"lineNum":" 2305","line":""},
{"lineNum":" 2306","line":""},
{"lineNum":" 2307","line":"// https://howardhinnant.github.io/date_algorithms.html#civil_from_days"},
{"lineNum":" 2308","line":"inline constexpr"},
{"lineNum":" 2309","line":"year_month_day"},
{"lineNum":" 2310","line":"year_month_day::__from_days(days __d) noexcept"},
{"lineNum":" 2311","line":"{"},
{"lineNum":" 2312","line":"    static_assert(numeric_limits<unsigned>::digits >= 18, \"\");"},
{"lineNum":" 2313","line":"    static_assert(numeric_limits<int>::digits >= 20     , \"\");"},
{"lineNum":" 2314","line":"    const int      __z = __d.count() + 719468;"},
{"lineNum":" 2315","line":"    const int      __era = (__z >= 0 ? __z : __z - 146096) / 146097;"},
{"lineNum":" 2316","line":"    const unsigned __doe = static_cast<unsigned>(__z - __era * 146097);              // [0, 146096]"},
{"lineNum":" 2317","line":"    const unsigned __yoe = (__doe - __doe/1460 + __doe/36524 - __doe/146096) / 365;  // [0, 399]"},
{"lineNum":" 2318","line":"    const int      __yr = static_cast<int>(__yoe) + __era * 400;"},
{"lineNum":" 2319","line":"    const unsigned __doy = __doe - (365 * __yoe + __yoe/4 - __yoe/100);              // [0, 365]"},
{"lineNum":" 2320","line":"    const unsigned __mp = (5 * __doy + 2)/153;                                       // [0, 11]"},
{"lineNum":" 2321","line":"    const unsigned __dy = __doy - (153 * __mp + 2)/5 + 1;                            // [1, 31]"},
{"lineNum":" 2322","line":"    const unsigned __mth = __mp + (__mp < 10 ? 3 : -9);                              // [1, 12]"},
{"lineNum":" 2323","line":"    return year_month_day{chrono::year{__yr + (__mth <= 2)}, chrono::month{__mth}, chrono::day{__dy}};"},
{"lineNum":" 2324","line":"}"},
{"lineNum":" 2325","line":""},
{"lineNum":" 2326","line":"// https://howardhinnant.github.io/date_algorithms.html#days_from_civil"},
{"lineNum":" 2327","line":"inline constexpr days year_month_day::__to_days() const noexcept"},
{"lineNum":" 2328","line":"{"},
{"lineNum":" 2329","line":"    static_assert(numeric_limits<unsigned>::digits >= 18, \"\");"},
{"lineNum":" 2330","line":"    static_assert(numeric_limits<int>::digits >= 20     , \"\");"},
{"lineNum":" 2331","line":""},
{"lineNum":" 2332","line":"    const int      __yr  = static_cast<int>(__y) - (__m <= February);"},
{"lineNum":" 2333","line":"    const unsigned __mth = static_cast<unsigned>(__m);"},
{"lineNum":" 2334","line":"    const unsigned __dy  = static_cast<unsigned>(__d);"},
{"lineNum":" 2335","line":""},
{"lineNum":" 2336","line":"    const int      __era = (__yr >= 0 ? __yr : __yr - 399) / 400;"},
{"lineNum":" 2337","line":"    const unsigned __yoe = static_cast<unsigned>(__yr - __era * 400);                // [0, 399]"},
{"lineNum":" 2338","line":"    const unsigned __doy = (153 * (__mth + (__mth > 2 ? -3 : 9)) + 2) / 5 + __dy-1;  // [0, 365]"},
{"lineNum":" 2339","line":"    const unsigned __doe = __yoe * 365 + __yoe/4 - __yoe/100 + __doy;                // [0, 146096]"},
{"lineNum":" 2340","line":"    return days{__era * 146097 + static_cast<int>(__doe) - 719468};"},
{"lineNum":" 2341","line":"}"},
{"lineNum":" 2342","line":""},
{"lineNum":" 2343","line":"inline constexpr"},
{"lineNum":" 2344","line":"bool operator==(const year_month_day& __lhs, const year_month_day& __rhs) noexcept"},
{"lineNum":" 2345","line":"{ return __lhs.year() == __rhs.year() && __lhs.month() == __rhs.month() && __lhs.day() == __rhs.day(); }"},
{"lineNum":" 2346","line":""},
{"lineNum":" 2347","line":"inline constexpr"},
{"lineNum":" 2348","line":"bool operator!=(const year_month_day& __lhs, const year_month_day& __rhs) noexcept"},
{"lineNum":" 2349","line":"{ return !(__lhs == __rhs); }"},
{"lineNum":" 2350","line":""},
{"lineNum":" 2351","line":"inline constexpr"},
{"lineNum":" 2352","line":"bool operator< (const year_month_day& __lhs, const year_month_day& __rhs) noexcept"},
{"lineNum":" 2353","line":"{"},
{"lineNum":" 2354","line":"    if (__lhs.year() < __rhs.year()) return true;"},
{"lineNum":" 2355","line":"    if (__lhs.year() > __rhs.year()) return false;"},
{"lineNum":" 2356","line":"    if (__lhs.month() < __rhs.month()) return true;"},
{"lineNum":" 2357","line":"    if (__lhs.month() > __rhs.month()) return false;"},
{"lineNum":" 2358","line":"    return __lhs.day() < __rhs.day();"},
{"lineNum":" 2359","line":"}"},
{"lineNum":" 2360","line":""},
{"lineNum":" 2361","line":"inline constexpr"},
{"lineNum":" 2362","line":"bool operator> (const year_month_day& __lhs, const year_month_day& __rhs) noexcept"},
{"lineNum":" 2363","line":"{ return __rhs < __lhs; }"},
{"lineNum":" 2364","line":""},
{"lineNum":" 2365","line":"inline constexpr"},
{"lineNum":" 2366","line":"bool operator<=(const year_month_day& __lhs, const year_month_day& __rhs) noexcept"},
{"lineNum":" 2367","line":"{ return !(__rhs < __lhs);}"},
{"lineNum":" 2368","line":""},
{"lineNum":" 2369","line":"inline constexpr"},
{"lineNum":" 2370","line":"bool operator>=(const year_month_day& __lhs, const year_month_day& __rhs) noexcept"},
{"lineNum":" 2371","line":"{ return !(__lhs < __rhs); }"},
{"lineNum":" 2372","line":""},
{"lineNum":" 2373","line":"inline constexpr"},
{"lineNum":" 2374","line":"year_month_day operator/(const year_month& __lhs, const day& __rhs) noexcept"},
{"lineNum":" 2375","line":"{ return year_month_day{__lhs.year(), __lhs.month(), __rhs}; }"},
{"lineNum":" 2376","line":""},
{"lineNum":" 2377","line":"inline constexpr"},
{"lineNum":" 2378","line":"year_month_day operator/(const year_month& __lhs, int __rhs) noexcept"},
{"lineNum":" 2379","line":"{ return __lhs / day(__rhs); }"},
{"lineNum":" 2380","line":""},
{"lineNum":" 2381","line":"inline constexpr"},
{"lineNum":" 2382","line":"year_month_day operator/(const year& __lhs, const month_day& __rhs) noexcept"},
{"lineNum":" 2383","line":"{ return __lhs / __rhs.month() / __rhs.day(); }"},
{"lineNum":" 2384","line":""},
{"lineNum":" 2385","line":"inline constexpr"},
{"lineNum":" 2386","line":"year_month_day operator/(int __lhs, const month_day& __rhs) noexcept"},
{"lineNum":" 2387","line":"{ return year(__lhs) / __rhs; }"},
{"lineNum":" 2388","line":""},
{"lineNum":" 2389","line":"inline constexpr"},
{"lineNum":" 2390","line":"year_month_day operator/(const month_day& __lhs, const year& __rhs) noexcept"},
{"lineNum":" 2391","line":"{ return __rhs / __lhs; }"},
{"lineNum":" 2392","line":""},
{"lineNum":" 2393","line":"inline constexpr"},
{"lineNum":" 2394","line":"year_month_day operator/(const month_day& __lhs, int __rhs) noexcept"},
{"lineNum":" 2395","line":"{ return year(__rhs) / __lhs; }"},
{"lineNum":" 2396","line":""},
{"lineNum":" 2397","line":""},
{"lineNum":" 2398","line":"inline constexpr"},
{"lineNum":" 2399","line":"year_month_day operator+(const year_month_day& __lhs, const months& __rhs) noexcept"},
{"lineNum":" 2400","line":"{ return (__lhs.year()/__lhs.month() + __rhs)/__lhs.day(); }"},
{"lineNum":" 2401","line":""},
{"lineNum":" 2402","line":"inline constexpr"},
{"lineNum":" 2403","line":"year_month_day operator+(const months& __lhs, const year_month_day& __rhs) noexcept"},
{"lineNum":" 2404","line":"{ return __rhs + __lhs; }"},
{"lineNum":" 2405","line":""},
{"lineNum":" 2406","line":"inline constexpr"},
{"lineNum":" 2407","line":"year_month_day operator-(const year_month_day& __lhs, const months& __rhs) noexcept"},
{"lineNum":" 2408","line":"{ return __lhs + -__rhs; }"},
{"lineNum":" 2409","line":""},
{"lineNum":" 2410","line":"inline constexpr"},
{"lineNum":" 2411","line":"year_month_day operator+(const year_month_day& __lhs, const years& __rhs) noexcept"},
{"lineNum":" 2412","line":"{ return (__lhs.year() + __rhs) / __lhs.month() / __lhs.day(); }"},
{"lineNum":" 2413","line":""},
{"lineNum":" 2414","line":"inline constexpr"},
{"lineNum":" 2415","line":"year_month_day operator+(const years& __lhs, const year_month_day& __rhs) noexcept"},
{"lineNum":" 2416","line":"{ return __rhs + __lhs; }"},
{"lineNum":" 2417","line":""},
{"lineNum":" 2418","line":"inline constexpr"},
{"lineNum":" 2419","line":"year_month_day operator-(const year_month_day& __lhs, const years& __rhs) noexcept"},
{"lineNum":" 2420","line":"{ return __lhs + -__rhs; }"},
{"lineNum":" 2421","line":""},
{"lineNum":" 2422","line":"inline constexpr year_month_day& year_month_day::operator+=(const months& __dm) noexcept { *this = *this + __dm; return *this; }"},
{"lineNum":" 2423","line":"inline constexpr year_month_day& year_month_day::operator-=(const months& __dm) noexcept { *this = *this - __dm; return *this; }"},
{"lineNum":" 2424","line":"inline constexpr year_month_day& year_month_day::operator+=(const years& __dy)  noexcept { *this = *this + __dy; return *this; }"},
{"lineNum":" 2425","line":"inline constexpr year_month_day& year_month_day::operator-=(const years& __dy)  noexcept { *this = *this - __dy; return *this; }"},
{"lineNum":" 2426","line":""},
{"lineNum":" 2427","line":"class year_month_day_last {"},
{"lineNum":" 2428","line":"private:"},
{"lineNum":" 2429","line":"    chrono::year           __y;"},
{"lineNum":" 2430","line":"    chrono::month_day_last __mdl;"},
{"lineNum":" 2431","line":"public:"},
{"lineNum":" 2432","line":"     constexpr year_month_day_last(const year& __yval, const month_day_last& __mdlval) noexcept"},
{"lineNum":" 2433","line":"        : __y{__yval}, __mdl{__mdlval} {}"},
{"lineNum":" 2434","line":""},
{"lineNum":" 2435","line":"     constexpr year_month_day_last& operator+=(const months& __m) noexcept;"},
{"lineNum":" 2436","line":"     constexpr year_month_day_last& operator-=(const months& __m) noexcept;"},
{"lineNum":" 2437","line":"     constexpr year_month_day_last& operator+=(const years& __y)  noexcept;"},
{"lineNum":" 2438","line":"     constexpr year_month_day_last& operator-=(const years& __y)  noexcept;"},
{"lineNum":" 2439","line":""},
{"lineNum":" 2440","line":"     inline constexpr chrono::year                     year() const noexcept { return __y; }"},
{"lineNum":" 2441","line":"     inline constexpr chrono::month                   month() const noexcept { return __mdl.month(); }"},
{"lineNum":" 2442","line":"     inline constexpr chrono::month_day_last month_day_last() const noexcept { return __mdl; }"},
{"lineNum":" 2443","line":"            constexpr chrono::day                       day() const noexcept;"},
{"lineNum":" 2444","line":"     inline constexpr operator                     sys_days() const noexcept { return   sys_days{year()/month()/day()}; }"},
{"lineNum":" 2445","line":"     inline explicit constexpr operator          local_days() const noexcept { return local_days{year()/month()/day()}; }"},
{"lineNum":" 2446","line":"     inline constexpr bool                               ok() const noexcept { return __y.ok() && __mdl.ok(); }"},
{"lineNum":" 2447","line":"};"},
{"lineNum":" 2448","line":""},
{"lineNum":" 2449","line":"inline constexpr"},
{"lineNum":" 2450","line":"chrono::day year_month_day_last::day() const noexcept"},
{"lineNum":" 2451","line":"{"},
{"lineNum":" 2452","line":"    constexpr chrono::day __d[] ="},
{"lineNum":" 2453","line":"    {"},
{"lineNum":" 2454","line":"        chrono::day(31), chrono::day(28), chrono::day(31),"},
{"lineNum":" 2455","line":"        chrono::day(30), chrono::day(31), chrono::day(30),"},
{"lineNum":" 2456","line":"        chrono::day(31), chrono::day(31), chrono::day(30),"},
{"lineNum":" 2457","line":"        chrono::day(31), chrono::day(30), chrono::day(31)"},
{"lineNum":" 2458","line":"    };"},
{"lineNum":" 2459","line":"    return (month() != February || !__y.is_leap()) && month().ok() ?"},
{"lineNum":" 2460","line":"        __d[static_cast<unsigned>(month()) - 1] : chrono::day{29};"},
{"lineNum":" 2461","line":"}"},
{"lineNum":" 2462","line":""},
{"lineNum":" 2463","line":"inline constexpr"},
{"lineNum":" 2464","line":"bool operator==(const year_month_day_last& __lhs, const year_month_day_last& __rhs) noexcept"},
{"lineNum":" 2465","line":"{ return __lhs.year() == __rhs.year() && __lhs.month_day_last() == __rhs.month_day_last(); }"},
{"lineNum":" 2466","line":""},
{"lineNum":" 2467","line":"inline constexpr"},
{"lineNum":" 2468","line":"bool operator!=(const year_month_day_last& __lhs, const year_month_day_last& __rhs) noexcept"},
{"lineNum":" 2469","line":"{ return !(__lhs == __rhs); }"},
{"lineNum":" 2470","line":""},
{"lineNum":" 2471","line":"inline constexpr"},
{"lineNum":" 2472","line":"bool operator< (const year_month_day_last& __lhs, const year_month_day_last& __rhs) noexcept"},
{"lineNum":" 2473","line":"{"},
{"lineNum":" 2474","line":"    if (__lhs.year() < __rhs.year()) return true;"},
{"lineNum":" 2475","line":"    if (__lhs.year() > __rhs.year()) return false;"},
{"lineNum":" 2476","line":"    return __lhs.month_day_last() < __rhs.month_day_last();"},
{"lineNum":" 2477","line":"}"},
{"lineNum":" 2478","line":""},
{"lineNum":" 2479","line":"inline constexpr"},
{"lineNum":" 2480","line":"bool operator> (const year_month_day_last& __lhs, const year_month_day_last& __rhs) noexcept"},
{"lineNum":" 2481","line":"{ return __rhs < __lhs; }"},
{"lineNum":" 2482","line":""},
{"lineNum":" 2483","line":"inline constexpr"},
{"lineNum":" 2484","line":"bool operator<=(const year_month_day_last& __lhs, const year_month_day_last& __rhs) noexcept"},
{"lineNum":" 2485","line":"{ return !(__rhs < __lhs);}"},
{"lineNum":" 2486","line":""},
{"lineNum":" 2487","line":"inline constexpr"},
{"lineNum":" 2488","line":"bool operator>=(const year_month_day_last& __lhs, const year_month_day_last& __rhs) noexcept"},
{"lineNum":" 2489","line":"{ return !(__lhs < __rhs); }"},
{"lineNum":" 2490","line":""},
{"lineNum":" 2491","line":"inline constexpr year_month_day_last operator/(const year_month& __lhs, last_spec) noexcept"},
{"lineNum":" 2492","line":"{ return year_month_day_last{__lhs.year(), month_day_last{__lhs.month()}}; }"},
{"lineNum":" 2493","line":""},
{"lineNum":" 2494","line":"inline constexpr year_month_day_last operator/(const year& __lhs, const month_day_last& __rhs) noexcept"},
{"lineNum":" 2495","line":"{ return year_month_day_last{__lhs, __rhs}; }"},
{"lineNum":" 2496","line":""},
{"lineNum":" 2497","line":"inline constexpr year_month_day_last operator/(int __lhs, const month_day_last& __rhs) noexcept"},
{"lineNum":" 2498","line":"{ return year_month_day_last{year{__lhs}, __rhs}; }"},
{"lineNum":" 2499","line":""},
{"lineNum":" 2500","line":"inline constexpr year_month_day_last operator/(const month_day_last& __lhs, const year& __rhs) noexcept"},
{"lineNum":" 2501","line":"{ return __rhs / __lhs; }"},
{"lineNum":" 2502","line":""},
{"lineNum":" 2503","line":"inline constexpr year_month_day_last operator/(const month_day_last& __lhs, int __rhs) noexcept"},
{"lineNum":" 2504","line":"{ return year{__rhs} / __lhs; }"},
{"lineNum":" 2505","line":""},
{"lineNum":" 2506","line":""},
{"lineNum":" 2507","line":"inline constexpr"},
{"lineNum":" 2508","line":"year_month_day_last operator+(const year_month_day_last& __lhs, const months& __rhs) noexcept"},
{"lineNum":" 2509","line":"{ return (__lhs.year() / __lhs.month() + __rhs) / last; }"},
{"lineNum":" 2510","line":""},
{"lineNum":" 2511","line":"inline constexpr"},
{"lineNum":" 2512","line":"year_month_day_last operator+(const months& __lhs, const year_month_day_last& __rhs) noexcept"},
{"lineNum":" 2513","line":"{ return __rhs + __lhs; }"},
{"lineNum":" 2514","line":""},
{"lineNum":" 2515","line":"inline constexpr"},
{"lineNum":" 2516","line":"year_month_day_last operator-(const year_month_day_last& __lhs, const months& __rhs) noexcept"},
{"lineNum":" 2517","line":"{ return __lhs + (-__rhs); }"},
{"lineNum":" 2518","line":""},
{"lineNum":" 2519","line":"inline constexpr"},
{"lineNum":" 2520","line":"year_month_day_last operator+(const year_month_day_last& __lhs, const years& __rhs) noexcept"},
{"lineNum":" 2521","line":"{ return year_month_day_last{__lhs.year() + __rhs, __lhs.month_day_last()}; }"},
{"lineNum":" 2522","line":""},
{"lineNum":" 2523","line":"inline constexpr"},
{"lineNum":" 2524","line":"year_month_day_last operator+(const years& __lhs, const year_month_day_last& __rhs) noexcept"},
{"lineNum":" 2525","line":"{ return __rhs + __lhs; }"},
{"lineNum":" 2526","line":""},
{"lineNum":" 2527","line":"inline constexpr"},
{"lineNum":" 2528","line":"year_month_day_last operator-(const year_month_day_last& __lhs, const years& __rhs) noexcept"},
{"lineNum":" 2529","line":"{ return __lhs + (-__rhs); }"},
{"lineNum":" 2530","line":""},
{"lineNum":" 2531","line":"inline constexpr year_month_day_last& year_month_day_last::operator+=(const months& __dm) noexcept { *this = *this + __dm; return *this; }"},
{"lineNum":" 2532","line":"inline constexpr year_month_day_last& year_month_day_last::operator-=(const months& __dm) noexcept { *this = *this - __dm; return *this; }"},
{"lineNum":" 2533","line":"inline constexpr year_month_day_last& year_month_day_last::operator+=(const years& __dy)  noexcept { *this = *this + __dy; return *this; }"},
{"lineNum":" 2534","line":"inline constexpr year_month_day_last& year_month_day_last::operator-=(const years& __dy)  noexcept { *this = *this - __dy; return *this; }"},
{"lineNum":" 2535","line":""},
{"lineNum":" 2536","line":"inline constexpr year_month_day::year_month_day(const year_month_day_last& __ymdl) noexcept"},
{"lineNum":" 2537","line":"    : __y{__ymdl.year()}, __m{__ymdl.month()}, __d{__ymdl.day()} {}"},
{"lineNum":" 2538","line":""},
{"lineNum":" 2539","line":"inline constexpr bool year_month_day::ok() const noexcept"},
{"lineNum":" 2540","line":"{"},
{"lineNum":" 2541","line":"    if (!__y.ok() || !__m.ok()) return false;"},
{"lineNum":" 2542","line":"    return chrono::day{1} <= __d && __d <= (__y / __m / last).day();"},
{"lineNum":" 2543","line":"}"},
{"lineNum":" 2544","line":""},
{"lineNum":" 2545","line":"class year_month_weekday {"},
{"lineNum":" 2546","line":"    chrono::year            __y;"},
{"lineNum":" 2547","line":"    chrono::month           __m;"},
{"lineNum":" 2548","line":"    chrono::weekday_indexed __wdi;"},
{"lineNum":" 2549","line":"public:"},
{"lineNum":" 2550","line":"    year_month_weekday() = default;"},
{"lineNum":" 2551","line":"    constexpr year_month_weekday(const chrono::year& __yval, const chrono::month& __mval,"},
{"lineNum":" 2552","line":"                               const chrono::weekday_indexed& __wdival) noexcept"},
{"lineNum":" 2553","line":"        : __y{__yval}, __m{__mval}, __wdi{__wdival} {}"},
{"lineNum":" 2554","line":"    constexpr year_month_weekday(const sys_days& __sysd) noexcept"},
{"lineNum":" 2555","line":"            : year_month_weekday(__from_days(__sysd.time_since_epoch())) {}"},
{"lineNum":" 2556","line":"    inline explicit constexpr year_month_weekday(const local_days& __locd) noexcept"},
{"lineNum":" 2557","line":"            : year_month_weekday(__from_days(__locd.time_since_epoch())) {}"},
{"lineNum":" 2558","line":"    constexpr year_month_weekday& operator+=(const months& m) noexcept;"},
{"lineNum":" 2559","line":"    constexpr year_month_weekday& operator-=(const months& m) noexcept;"},
{"lineNum":" 2560","line":"    constexpr year_month_weekday& operator+=(const years& y)  noexcept;"},
{"lineNum":" 2561","line":"    constexpr year_month_weekday& operator-=(const years& y)  noexcept;"},
{"lineNum":" 2562","line":""},
{"lineNum":" 2563","line":"    inline constexpr chrono::year                       year() const noexcept { return __y; }"},
{"lineNum":" 2564","line":"    inline constexpr chrono::month                     month() const noexcept { return __m; }"},
{"lineNum":" 2565","line":"    inline constexpr chrono::weekday                 weekday() const noexcept { return __wdi.weekday(); }"},
{"lineNum":" 2566","line":"    inline constexpr unsigned                          index() const noexcept { return __wdi.index(); }"},
{"lineNum":" 2567","line":"    inline constexpr chrono::weekday_indexed weekday_indexed() const noexcept { return __wdi; }"},
{"lineNum":" 2568","line":""},
{"lineNum":" 2569","line":"    inline constexpr                       operator sys_days() const noexcept { return   sys_days{__to_days()}; }"},
{"lineNum":" 2570","line":"    inline explicit constexpr operator            local_days() const noexcept { return local_days{__to_days()}; }"},
{"lineNum":" 2571","line":"    inline constexpr bool ok() const noexcept"},
{"lineNum":" 2572","line":"    {"},
{"lineNum":" 2573","line":"        if (!__y.ok() || !__m.ok() || !__wdi.ok()) return false;"},
{"lineNum":" 2574","line":"        if (__wdi.index() <= 4) return true;"},
{"lineNum":" 2575","line":"        auto __nth_weekday_day ="},
{"lineNum":" 2576","line":"            __wdi.weekday() -"},
{"lineNum":" 2577","line":"            chrono::weekday{static_cast<sys_days>(__y / __m / 1)} +"},
{"lineNum":" 2578","line":"            days{(__wdi.index() - 1) * 7 + 1};"},
{"lineNum":" 2579","line":"        return static_cast<unsigned>(__nth_weekday_day.count()) <="},
{"lineNum":" 2580","line":"               static_cast<unsigned>((__y / __m / last).day());"},
{"lineNum":" 2581","line":"    }"},
{"lineNum":" 2582","line":""},
{"lineNum":" 2583","line":"    static constexpr year_month_weekday __from_days(days __d) noexcept;"},
{"lineNum":" 2584","line":"    constexpr days __to_days() const noexcept;"},
{"lineNum":" 2585","line":"};"},
{"lineNum":" 2586","line":""},
{"lineNum":" 2587","line":"inline constexpr"},
{"lineNum":" 2588","line":"year_month_weekday year_month_weekday::__from_days(days __d) noexcept"},
{"lineNum":" 2589","line":"{"},
{"lineNum":" 2590","line":"    const sys_days      __sysd{__d};"},
{"lineNum":" 2591","line":"    const chrono::weekday __wd = chrono::weekday(__sysd);"},
{"lineNum":" 2592","line":"    const year_month_day __ymd = year_month_day(__sysd);"},
{"lineNum":" 2593","line":"    return year_month_weekday{__ymd.year(), __ymd.month(),"},
{"lineNum":" 2594","line":"                              __wd[(static_cast<unsigned>(__ymd.day())-1)/7+1]};"},
{"lineNum":" 2595","line":"}"},
{"lineNum":" 2596","line":""},
{"lineNum":" 2597","line":"inline constexpr"},
{"lineNum":" 2598","line":"days year_month_weekday::__to_days() const noexcept"},
{"lineNum":" 2599","line":"{"},
{"lineNum":" 2600","line":"    const sys_days __sysd = sys_days(__y/__m/1);"},
{"lineNum":" 2601","line":"    return (__sysd + (__wdi.weekday() - chrono::weekday(__sysd) + days{(__wdi.index()-1)*7}))"},
{"lineNum":" 2602","line":"                .time_since_epoch();"},
{"lineNum":" 2603","line":"}"},
{"lineNum":" 2604","line":""},
{"lineNum":" 2605","line":"inline constexpr"},
{"lineNum":" 2606","line":"bool operator==(const year_month_weekday& __lhs, const year_month_weekday& __rhs) noexcept"},
{"lineNum":" 2607","line":"{ return __lhs.year() == __rhs.year() && __lhs.month() == __rhs.month() && __lhs.weekday_indexed() == __rhs.weekday_indexed(); }"},
{"lineNum":" 2608","line":""},
{"lineNum":" 2609","line":"inline constexpr"},
{"lineNum":" 2610","line":"bool operator!=(const year_month_weekday& __lhs, const year_month_weekday& __rhs) noexcept"},
{"lineNum":" 2611","line":"{ return !(__lhs == __rhs); }"},
{"lineNum":" 2612","line":""},
{"lineNum":" 2613","line":"inline constexpr"},
{"lineNum":" 2614","line":"year_month_weekday operator/(const year_month& __lhs, const weekday_indexed& __rhs) noexcept"},
{"lineNum":" 2615","line":"{ return year_month_weekday{__lhs.year(), __lhs.month(), __rhs}; }"},
{"lineNum":" 2616","line":""},
{"lineNum":" 2617","line":"inline constexpr"},
{"lineNum":" 2618","line":"year_month_weekday operator/(const year& __lhs, const month_weekday& __rhs) noexcept"},
{"lineNum":" 2619","line":"{ return year_month_weekday{__lhs, __rhs.month(), __rhs.weekday_indexed()}; }"},
{"lineNum":" 2620","line":""},
{"lineNum":" 2621","line":"inline constexpr"},
{"lineNum":" 2622","line":"year_month_weekday operator/(int __lhs, const month_weekday& __rhs) noexcept"},
{"lineNum":" 2623","line":"{ return year(__lhs) / __rhs; }"},
{"lineNum":" 2624","line":""},
{"lineNum":" 2625","line":"inline constexpr"},
{"lineNum":" 2626","line":"year_month_weekday operator/(const month_weekday& __lhs, const year& __rhs) noexcept"},
{"lineNum":" 2627","line":"{ return __rhs / __lhs; }"},
{"lineNum":" 2628","line":""},
{"lineNum":" 2629","line":"inline constexpr"},
{"lineNum":" 2630","line":"year_month_weekday operator/(const month_weekday& __lhs, int __rhs) noexcept"},
{"lineNum":" 2631","line":"{ return year(__rhs) / __lhs; }"},
{"lineNum":" 2632","line":""},
{"lineNum":" 2633","line":""},
{"lineNum":" 2634","line":"inline constexpr"},
{"lineNum":" 2635","line":"year_month_weekday operator+(const year_month_weekday& __lhs, const months& __rhs) noexcept"},
{"lineNum":" 2636","line":"{ return (__lhs.year() / __lhs.month() + __rhs) / __lhs.weekday_indexed(); }"},
{"lineNum":" 2637","line":""},
{"lineNum":" 2638","line":"inline constexpr"},
{"lineNum":" 2639","line":"year_month_weekday operator+(const months& __lhs, const year_month_weekday& __rhs) noexcept"},
{"lineNum":" 2640","line":"{ return __rhs + __lhs; }"},
{"lineNum":" 2641","line":""},
{"lineNum":" 2642","line":"inline constexpr"},
{"lineNum":" 2643","line":"year_month_weekday operator-(const year_month_weekday& __lhs, const months& __rhs) noexcept"},
{"lineNum":" 2644","line":"{ return __lhs + (-__rhs); }"},
{"lineNum":" 2645","line":""},
{"lineNum":" 2646","line":"inline constexpr"},
{"lineNum":" 2647","line":"year_month_weekday operator+(const year_month_weekday& __lhs, const years& __rhs) noexcept"},
{"lineNum":" 2648","line":"{ return year_month_weekday{__lhs.year() + __rhs, __lhs.month(), __lhs.weekday_indexed()}; }"},
{"lineNum":" 2649","line":""},
{"lineNum":" 2650","line":"inline constexpr"},
{"lineNum":" 2651","line":"year_month_weekday operator+(const years& __lhs, const year_month_weekday& __rhs) noexcept"},
{"lineNum":" 2652","line":"{ return __rhs + __lhs; }"},
{"lineNum":" 2653","line":""},
{"lineNum":" 2654","line":"inline constexpr"},
{"lineNum":" 2655","line":"year_month_weekday operator-(const year_month_weekday& __lhs, const years& __rhs) noexcept"},
{"lineNum":" 2656","line":"{ return __lhs + (-__rhs); }"},
{"lineNum":" 2657","line":""},
{"lineNum":" 2658","line":""},
{"lineNum":" 2659","line":"inline constexpr year_month_weekday& year_month_weekday::operator+=(const months& __dm) noexcept { *this = *this + __dm; return *this; }"},
{"lineNum":" 2660","line":"inline constexpr year_month_weekday& year_month_weekday::operator-=(const months& __dm) noexcept { *this = *this - __dm; return *this; }"},
{"lineNum":" 2661","line":"inline constexpr year_month_weekday& year_month_weekday::operator+=(const years& __dy)  noexcept { *this = *this + __dy; return *this; }"},
{"lineNum":" 2662","line":"inline constexpr year_month_weekday& year_month_weekday::operator-=(const years& __dy)  noexcept { *this = *this - __dy; return *this; }"},
{"lineNum":" 2663","line":""},
{"lineNum":" 2664","line":"class year_month_weekday_last {"},
{"lineNum":" 2665","line":"private:"},
{"lineNum":" 2666","line":"    chrono::year         __y;"},
{"lineNum":" 2667","line":"    chrono::month        __m;"},
{"lineNum":" 2668","line":"    chrono::weekday_last __wdl;"},
{"lineNum":" 2669","line":"public:"},
{"lineNum":" 2670","line":"    constexpr year_month_weekday_last(const chrono::year& __yval, const chrono::month& __mval,"},
{"lineNum":" 2671","line":"                                      const chrono::weekday_last& __wdlval) noexcept"},
{"lineNum":" 2672","line":"                : __y{__yval}, __m{__mval}, __wdl{__wdlval} {}"},
{"lineNum":" 2673","line":"    constexpr year_month_weekday_last& operator+=(const months& __dm) noexcept;"},
{"lineNum":" 2674","line":"    constexpr year_month_weekday_last& operator-=(const months& __dm) noexcept;"},
{"lineNum":" 2675","line":"    constexpr year_month_weekday_last& operator+=(const years& __dy)  noexcept;"},
{"lineNum":" 2676","line":"    constexpr year_month_weekday_last& operator-=(const years& __dy)  noexcept;"},
{"lineNum":" 2677","line":""},
{"lineNum":" 2678","line":"    inline constexpr chrono::year                 year() const noexcept { return __y; }"},
{"lineNum":" 2679","line":"    inline constexpr chrono::month               month() const noexcept { return __m; }"},
{"lineNum":" 2680","line":"    inline constexpr chrono::weekday           weekday() const noexcept { return __wdl.weekday(); }"},
{"lineNum":" 2681","line":"    inline constexpr chrono::weekday_last weekday_last() const noexcept { return __wdl; }"},
{"lineNum":" 2682","line":"    inline constexpr operator                 sys_days() const noexcept { return   sys_days{__to_days()}; }"},
{"lineNum":" 2683","line":"    inline explicit constexpr operator      local_days() const noexcept { return local_days{__to_days()}; }"},
{"lineNum":" 2684","line":"    inline constexpr bool ok() const noexcept { return __y.ok() && __m.ok() && __wdl.ok(); }"},
{"lineNum":" 2685","line":""},
{"lineNum":" 2686","line":"    constexpr days __to_days() const noexcept;"},
{"lineNum":" 2687","line":""},
{"lineNum":" 2688","line":"};"},
{"lineNum":" 2689","line":""},
{"lineNum":" 2690","line":"inline constexpr"},
{"lineNum":" 2691","line":"days year_month_weekday_last::__to_days() const noexcept"},
{"lineNum":" 2692","line":"{"},
{"lineNum":" 2693","line":"    const sys_days __last = sys_days{__y/__m/last};"},
{"lineNum":" 2694","line":"    return (__last - (chrono::weekday{__last} - __wdl.weekday())).time_since_epoch();"},
{"lineNum":" 2695","line":""},
{"lineNum":" 2696","line":"}"},
{"lineNum":" 2697","line":""},
{"lineNum":" 2698","line":"inline constexpr"},
{"lineNum":" 2699","line":"bool operator==(const year_month_weekday_last& __lhs, const year_month_weekday_last& __rhs) noexcept"},
{"lineNum":" 2700","line":"{ return __lhs.year() == __rhs.year() && __lhs.month() == __rhs.month() && __lhs.weekday_last() == __rhs.weekday_last(); }"},
{"lineNum":" 2701","line":""},
{"lineNum":" 2702","line":"inline constexpr"},
{"lineNum":" 2703","line":"bool operator!=(const year_month_weekday_last& __lhs, const year_month_weekday_last& __rhs) noexcept"},
{"lineNum":" 2704","line":"{ return !(__lhs == __rhs); }"},
{"lineNum":" 2705","line":""},
{"lineNum":" 2706","line":""},
{"lineNum":" 2707","line":"inline constexpr"},
{"lineNum":" 2708","line":"year_month_weekday_last operator/(const year_month& __lhs, const weekday_last& __rhs) noexcept"},
{"lineNum":" 2709","line":"{ return year_month_weekday_last{__lhs.year(), __lhs.month(), __rhs}; }"},
{"lineNum":" 2710","line":""},
{"lineNum":" 2711","line":"inline constexpr"},
{"lineNum":" 2712","line":"year_month_weekday_last operator/(const year& __lhs, const month_weekday_last& __rhs) noexcept"},
{"lineNum":" 2713","line":"{ return year_month_weekday_last{__lhs, __rhs.month(), __rhs.weekday_last()}; }"},
{"lineNum":" 2714","line":""},
{"lineNum":" 2715","line":"inline constexpr"},
{"lineNum":" 2716","line":"year_month_weekday_last operator/(int __lhs, const month_weekday_last& __rhs) noexcept"},
{"lineNum":" 2717","line":"{ return year(__lhs) / __rhs; }"},
{"lineNum":" 2718","line":""},
{"lineNum":" 2719","line":"inline constexpr"},
{"lineNum":" 2720","line":"year_month_weekday_last operator/(const month_weekday_last& __lhs, const year& __rhs) noexcept"},
{"lineNum":" 2721","line":"{ return __rhs / __lhs; }"},
{"lineNum":" 2722","line":""},
{"lineNum":" 2723","line":"inline constexpr"},
{"lineNum":" 2724","line":"year_month_weekday_last operator/(const month_weekday_last& __lhs, int __rhs) noexcept"},
{"lineNum":" 2725","line":"{ return year(__rhs) / __lhs; }"},
{"lineNum":" 2726","line":""},
{"lineNum":" 2727","line":""},
{"lineNum":" 2728","line":"inline constexpr"},
{"lineNum":" 2729","line":"year_month_weekday_last operator+(const year_month_weekday_last& __lhs, const months& __rhs) noexcept"},
{"lineNum":" 2730","line":"{ return (__lhs.year() / __lhs.month() + __rhs) / __lhs.weekday_last(); }"},
{"lineNum":" 2731","line":""},
{"lineNum":" 2732","line":"inline constexpr"},
{"lineNum":" 2733","line":"year_month_weekday_last operator+(const months& __lhs, const year_month_weekday_last& __rhs) noexcept"},
{"lineNum":" 2734","line":"{ return __rhs + __lhs; }"},
{"lineNum":" 2735","line":""},
{"lineNum":" 2736","line":"inline constexpr"},
{"lineNum":" 2737","line":"year_month_weekday_last operator-(const year_month_weekday_last& __lhs, const months& __rhs) noexcept"},
{"lineNum":" 2738","line":"{ return __lhs + (-__rhs); }"},
{"lineNum":" 2739","line":""},
{"lineNum":" 2740","line":"inline constexpr"},
{"lineNum":" 2741","line":"year_month_weekday_last operator+(const year_month_weekday_last& __lhs, const years& __rhs) noexcept"},
{"lineNum":" 2742","line":"{ return year_month_weekday_last{__lhs.year() + __rhs, __lhs.month(), __lhs.weekday_last()}; }"},
{"lineNum":" 2743","line":""},
{"lineNum":" 2744","line":"inline constexpr"},
{"lineNum":" 2745","line":"year_month_weekday_last operator+(const years& __lhs, const year_month_weekday_last& __rhs) noexcept"},
{"lineNum":" 2746","line":"{ return __rhs + __lhs; }"},
{"lineNum":" 2747","line":""},
{"lineNum":" 2748","line":"inline constexpr"},
{"lineNum":" 2749","line":"year_month_weekday_last operator-(const year_month_weekday_last& __lhs, const years& __rhs) noexcept"},
{"lineNum":" 2750","line":"{ return __lhs + (-__rhs); }"},
{"lineNum":" 2751","line":""},
{"lineNum":" 2752","line":"inline constexpr year_month_weekday_last& year_month_weekday_last::operator+=(const months& __dm) noexcept { *this = *this + __dm; return *this; }"},
{"lineNum":" 2753","line":"inline constexpr year_month_weekday_last& year_month_weekday_last::operator-=(const months& __dm) noexcept { *this = *this - __dm; return *this; }"},
{"lineNum":" 2754","line":"inline constexpr year_month_weekday_last& year_month_weekday_last::operator+=(const years& __dy)  noexcept { *this = *this + __dy; return *this; }"},
{"lineNum":" 2755","line":"inline constexpr year_month_weekday_last& year_month_weekday_last::operator-=(const years& __dy)  noexcept { *this = *this - __dy; return *this; }"},
{"lineNum":" 2756","line":""},
{"lineNum":" 2757","line":""},
{"lineNum":" 2758","line":"template <class _Duration>"},
{"lineNum":" 2759","line":"class hh_mm_ss"},
{"lineNum":" 2760","line":"{"},
{"lineNum":" 2761","line":"private:"},
{"lineNum":" 2762","line":"    static_assert(__is_duration<_Duration>::value, \"template parameter of hh_mm_ss must be a std::chrono::duration\");"},
{"lineNum":" 2763","line":"    using __CommonType = common_type_t<_Duration, chrono::seconds>;"},
{"lineNum":" 2764","line":""},
{"lineNum":" 2765","line":"    static constexpr uint64_t __pow10(unsigned __exp)"},
{"lineNum":" 2766","line":"    {"},
{"lineNum":" 2767","line":"        uint64_t __ret = 1;"},
{"lineNum":" 2768","line":"        for (unsigned __i = 0; __i < __exp; ++__i)"},
{"lineNum":" 2769","line":"            __ret *= 10U;"},
{"lineNum":" 2770","line":"        return __ret;"},
{"lineNum":" 2771","line":"    }"},
{"lineNum":" 2772","line":""},
{"lineNum":" 2773","line":"    static constexpr unsigned __width(uint64_t __n, uint64_t __d = 10, unsigned __w = 0)"},
{"lineNum":" 2774","line":"    {"},
{"lineNum":" 2775","line":"        if (__n >= 2 && __d != 0 && __w < 19)"},
{"lineNum":" 2776","line":"            return 1 + __width(__n, __d % __n * 10, __w+1);"},
{"lineNum":" 2777","line":"        return 0;"},
{"lineNum":" 2778","line":"    }"},
{"lineNum":" 2779","line":""},
{"lineNum":" 2780","line":"public:"},
{"lineNum":" 2781","line":"    static unsigned constexpr fractional_width = __width(__CommonType::period::den) < 19 ?"},
{"lineNum":" 2782","line":"                                                 __width(__CommonType::period::den) : 6u;"},
{"lineNum":" 2783","line":"    using precision = duration<typename __CommonType::rep, ratio<1, __pow10(fractional_width)>>;"},
{"lineNum":" 2784","line":""},
{"lineNum":" 2785","line":"    constexpr hh_mm_ss() noexcept : hh_mm_ss{_Duration::zero()} {}"},
{"lineNum":" 2786","line":""},
{"lineNum":" 2787","line":"    constexpr explicit hh_mm_ss(_Duration __d) noexcept :"},
{"lineNum":" 2788","line":"        __is_neg(__d < _Duration(0)),"},
{"lineNum":" 2789","line":"        __h(duration_cast<chrono::hours>  (abs(__d))),"},
{"lineNum":" 2790","line":"        __m(duration_cast<chrono::minutes>(abs(__d) - hours())),"},
{"lineNum":" 2791","line":"        __s(duration_cast<chrono::seconds>(abs(__d) - hours() - minutes())),"},
{"lineNum":" 2792","line":"        __f(duration_cast<precision>      (abs(__d) - hours() - minutes() - seconds()))"},
{"lineNum":" 2793","line":"        {}"},
{"lineNum":" 2794","line":""},
{"lineNum":" 2795","line":"    constexpr bool is_negative()        const noexcept { return __is_neg; }"},
{"lineNum":" 2796","line":"    constexpr chrono::hours hours()     const noexcept { return __h; }"},
{"lineNum":" 2797","line":"    constexpr chrono::minutes minutes() const noexcept { return __m; }"},
{"lineNum":" 2798","line":"    constexpr chrono::seconds seconds() const noexcept { return __s; }"},
{"lineNum":" 2799","line":"    constexpr precision subseconds()    const noexcept { return __f; }"},
{"lineNum":" 2800","line":""},
{"lineNum":" 2801","line":"    constexpr precision to_duration() const noexcept"},
{"lineNum":" 2802","line":"    {"},
{"lineNum":" 2803","line":"        auto __dur = __h + __m + __s + __f;"},
{"lineNum":" 2804","line":"        return __is_neg ? -__dur : __dur;"},
{"lineNum":" 2805","line":"    }"},
{"lineNum":" 2806","line":""},
{"lineNum":" 2807","line":"    constexpr explicit operator precision() const noexcept { return to_duration(); }"},
{"lineNum":" 2808","line":""},
{"lineNum":" 2809","line":"private:"},
{"lineNum":" 2810","line":"    bool            __is_neg;"},
{"lineNum":" 2811","line":"    chrono::hours   __h;"},
{"lineNum":" 2812","line":"    chrono::minutes __m;"},
{"lineNum":" 2813","line":"    chrono::seconds __s;"},
{"lineNum":" 2814","line":"    precision       __f;"},
{"lineNum":" 2815","line":"};"},
{"lineNum":" 2816","line":""},
{"lineNum":" 2817","line":"constexpr bool is_am(const hours& __h) noexcept { return __h >= hours( 0) && __h < hours(12); }"},
{"lineNum":" 2818","line":"constexpr bool is_pm(const hours& __h) noexcept { return __h >= hours(12) && __h < hours(24); }"},
{"lineNum":" 2819","line":""},
{"lineNum":" 2820","line":"constexpr hours make12(const hours& __h) noexcept"},
{"lineNum":" 2821","line":"{"},
{"lineNum":" 2822","line":"    if      (__h == hours( 0)) return hours(12);"},
{"lineNum":" 2823","line":"    else if (__h <= hours(12)) return __h;"},
{"lineNum":" 2824","line":"    else                       return __h - hours(12);"},
{"lineNum":" 2825","line":"}"},
{"lineNum":" 2826","line":""},
{"lineNum":" 2827","line":"constexpr hours make24(const hours& __h, bool __is_pm) noexcept"},
{"lineNum":" 2828","line":"{"},
{"lineNum":" 2829","line":"    if (__is_pm)"},
{"lineNum":" 2830","line":"        return __h == hours(12) ? __h : __h + hours(12);"},
{"lineNum":" 2831","line":"    else"},
{"lineNum":" 2832","line":"        return __h == hours(12) ? hours(0) : __h;"},
{"lineNum":" 2833","line":"}"},
{"lineNum":" 2834","line":""},
{"lineNum":" 2835","line":"#endif // _LIBCPP_STD_VER > 17"},
{"lineNum":" 2836","line":"} // chrono"},
{"lineNum":" 2837","line":""},
{"lineNum":" 2838","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 2839","line":"// Suffixes for duration literals [time.duration.literals]"},
{"lineNum":" 2840","line":"inline namespace literals"},
{"lineNum":" 2841","line":"{"},
{"lineNum":" 2842","line":"  inline namespace chrono_literals"},
{"lineNum":" 2843","line":"  {"},
{"lineNum":" 2844","line":""},
{"lineNum":" 2845","line":"    constexpr chrono::hours operator\"\"h(unsigned long long __h)"},
{"lineNum":" 2846","line":"    {"},
{"lineNum":" 2847","line":"        return chrono::hours(static_cast<chrono::hours::rep>(__h));"},
{"lineNum":" 2848","line":"    }"},
{"lineNum":" 2849","line":""},
{"lineNum":" 2850","line":"    constexpr chrono::duration<long double, ratio<3600,1>> operator\"\"h(long double __h)"},
{"lineNum":" 2851","line":"    {"},
{"lineNum":" 2852","line":"        return chrono::duration<long double, ratio<3600,1>>(__h);"},
{"lineNum":" 2853","line":"    }"},
{"lineNum":" 2854","line":""},
{"lineNum":" 2855","line":""},
{"lineNum":" 2856","line":"    constexpr chrono::minutes operator\"\"min(unsigned long long __m)"},
{"lineNum":" 2857","line":"    {"},
{"lineNum":" 2858","line":"        return chrono::minutes(static_cast<chrono::minutes::rep>(__m));"},
{"lineNum":" 2859","line":"    }"},
{"lineNum":" 2860","line":""},
{"lineNum":" 2861","line":"    constexpr chrono::duration<long double, ratio<60,1>> operator\"\"min(long double __m)"},
{"lineNum":" 2862","line":"    {"},
{"lineNum":" 2863","line":"        return chrono::duration<long double, ratio<60,1>> (__m);"},
{"lineNum":" 2864","line":"    }"},
{"lineNum":" 2865","line":""},
{"lineNum":" 2866","line":""},
{"lineNum":" 2867","line":"    constexpr chrono::seconds operator\"\"s(unsigned long long __s)"},
{"lineNum":" 2868","line":"    {"},
{"lineNum":" 2869","line":"        return chrono::seconds(static_cast<chrono::seconds::rep>(__s));"},
{"lineNum":" 2870","line":"    }"},
{"lineNum":" 2871","line":""},
{"lineNum":" 2872","line":"    constexpr chrono::duration<long double> operator\"\"s(long double __s)"},
{"lineNum":" 2873","line":"    {"},
{"lineNum":" 2874","line":"        return chrono::duration<long double> (__s);"},
{"lineNum":" 2875","line":"    }"},
{"lineNum":" 2876","line":""},
{"lineNum":" 2877","line":""},
{"lineNum":" 2878","line":"    constexpr chrono::milliseconds operator\"\"ms(unsigned long long __ms)"},
{"lineNum":" 2879","line":"    {"},
{"lineNum":" 2880","line":"        return chrono::milliseconds(static_cast<chrono::milliseconds::rep>(__ms));"},
{"lineNum":" 2881","line":"    }"},
{"lineNum":" 2882","line":""},
{"lineNum":" 2883","line":"    constexpr chrono::duration<long double, milli> operator\"\"ms(long double __ms)"},
{"lineNum":" 2884","line":"    {"},
{"lineNum":" 2885","line":"        return chrono::duration<long double, milli>(__ms);"},
{"lineNum":" 2886","line":"    }"},
{"lineNum":" 2887","line":""},
{"lineNum":" 2888","line":""},
{"lineNum":" 2889","line":"    constexpr chrono::microseconds operator\"\"us(unsigned long long __us)"},
{"lineNum":" 2890","line":"    {"},
{"lineNum":" 2891","line":"        return chrono::microseconds(static_cast<chrono::microseconds::rep>(__us));"},
{"lineNum":" 2892","line":"    }"},
{"lineNum":" 2893","line":""},
{"lineNum":" 2894","line":"    constexpr chrono::duration<long double, micro> operator\"\"us(long double __us)"},
{"lineNum":" 2895","line":"    {"},
{"lineNum":" 2896","line":"        return chrono::duration<long double, micro> (__us);"},
{"lineNum":" 2897","line":"    }"},
{"lineNum":" 2898","line":""},
{"lineNum":" 2899","line":""},
{"lineNum":" 2900","line":"    constexpr chrono::nanoseconds operator\"\"ns(unsigned long long __ns)"},
{"lineNum":" 2901","line":"    {"},
{"lineNum":" 2902","line":"        return chrono::nanoseconds(static_cast<chrono::nanoseconds::rep>(__ns));"},
{"lineNum":" 2903","line":"    }"},
{"lineNum":" 2904","line":""},
{"lineNum":" 2905","line":"    constexpr chrono::duration<long double, nano> operator\"\"ns(long double __ns)"},
{"lineNum":" 2906","line":"    {"},
{"lineNum":" 2907","line":"        return chrono::duration<long double, nano> (__ns);"},
{"lineNum":" 2908","line":"    }"},
{"lineNum":" 2909","line":""},
{"lineNum":" 2910","line":"#if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_CXX20_CHRONO_LITERALS)"},
{"lineNum":" 2911","line":"    constexpr chrono::day operator \"\"d(unsigned long long __d) noexcept"},
{"lineNum":" 2912","line":"    {"},
{"lineNum":" 2913","line":"        return chrono::day(static_cast<unsigned>(__d));"},
{"lineNum":" 2914","line":"    }"},
{"lineNum":" 2915","line":""},
{"lineNum":" 2916","line":"    constexpr chrono::year operator \"\"y(unsigned long long __y) noexcept"},
{"lineNum":" 2917","line":"    {"},
{"lineNum":" 2918","line":"        return chrono::year(static_cast<int>(__y));"},
{"lineNum":" 2919","line":"    }"},
{"lineNum":" 2920","line":"#endif"},
{"lineNum":" 2921","line":"}}"},
{"lineNum":" 2922","line":""},
{"lineNum":" 2923","line":"namespace chrono { // hoist the literals into namespace std::chrono"},
{"lineNum":" 2924","line":"   using namespace literals::chrono_literals;"},
{"lineNum":" 2925","line":"}"},
{"lineNum":" 2926","line":""},
{"lineNum":" 2927","line":"#endif"},
{"lineNum":" 2928","line":""},
{"lineNum":" 2929","line":"_LIBCPP_END_NAMESPACE_STD"},
{"lineNum":" 2930","line":""},
{"lineNum":" 2931","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 2932","line":"_LIBCPP_BEGIN_NAMESPACE_FILESYSTEM"},
{"lineNum":" 2933","line":"struct _FilesystemClock {"},
{"lineNum":" 2934","line":"#if !defined(_LIBCPP_HAS_NO_INT128)"},
{"lineNum":" 2935","line":"  typedef __int128_t rep;"},
{"lineNum":" 2936","line":"  typedef nano period;"},
{"lineNum":" 2937","line":"#else"},
{"lineNum":" 2938","line":"  typedef long long rep;"},
{"lineNum":" 2939","line":"  typedef nano period;"},
{"lineNum":" 2940","line":"#endif"},
{"lineNum":" 2941","line":""},
{"lineNum":" 2942","line":"  typedef chrono::duration<rep, period> duration;"},
{"lineNum":" 2943","line":"  typedef chrono::time_point<_FilesystemClock> time_point;"},
{"lineNum":" 2944","line":""},
{"lineNum":" 2945","line":"  _LIBCPP_EXPORTED_FROM_ABI"},
{"lineNum":" 2946","line":"  static _LIBCPP_CONSTEXPR_AFTER_CXX11 const bool is_steady = false;"},
{"lineNum":" 2947","line":""},
{"lineNum":" 2948","line":"  _LIBCPP_AVAILABILITY_FILESYSTEM _LIBCPP_FUNC_VIS static time_point now() noexcept;"},
{"lineNum":" 2949","line":""},
{"lineNum":" 2950","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2951","line":"  static time_t to_time_t(const time_point& __t) noexcept {"},
{"lineNum":" 2952","line":"      typedef chrono::duration<rep> __secs;"},
{"lineNum":" 2953","line":"      return time_t("},
{"lineNum":" 2954","line":"          chrono::duration_cast<__secs>(__t.time_since_epoch()).count());"},
{"lineNum":" 2955","line":"  }"},
{"lineNum":" 2956","line":""},
{"lineNum":" 2957","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2958","line":"  static time_point from_time_t(time_t __t) noexcept {"},
{"lineNum":" 2959","line":"      typedef chrono::duration<rep> __secs;"},
{"lineNum":" 2960","line":"      return time_point(__secs(__t));"},
{"lineNum":" 2961","line":"  }"},
{"lineNum":" 2962","line":"};"},
{"lineNum":" 2963","line":"_LIBCPP_END_NAMESPACE_FILESYSTEM"},
{"lineNum":" 2964","line":"#endif // !_LIBCPP_CXX03_LANG"},
{"lineNum":" 2965","line":""},
{"lineNum":" 2966","line":"_LIBCPP_POP_MACROS"},
{"lineNum":" 2967","line":""},
{"lineNum":" 2968","line":"#endif // _LIBCPP_CHRONO"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 2, "covered" : 0,};
var merged_data = [];
