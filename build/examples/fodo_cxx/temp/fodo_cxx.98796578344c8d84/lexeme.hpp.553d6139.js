var data = {lines:[
{"lineNum":"    1","line":"/*============================================================================="},
{"lineNum":"    2","line":"    Copyright (c) 2001-2011 Joel de Guzman"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"    Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    5","line":"    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    6","line":"=============================================================================*/"},
{"lineNum":"    7","line":"#if !defined(SPIRIT_LEXEME_MARCH_24_2007_0802AM)"},
{"lineNum":"    8","line":"#define SPIRIT_LEXEME_MARCH_24_2007_0802AM"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#if defined(_MSC_VER)"},
{"lineNum":"   11","line":"#pragma once"},
{"lineNum":"   12","line":"#endif"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"#include <boost/spirit/home/qi/meta_compiler.hpp>"},
{"lineNum":"   15","line":"#include <boost/spirit/home/qi/skip_over.hpp>"},
{"lineNum":"   16","line":"#include <boost/spirit/home/qi/parser.hpp>"},
{"lineNum":"   17","line":"#include <boost/spirit/home/qi/detail/unused_skipper.hpp>"},
{"lineNum":"   18","line":"#include <boost/spirit/home/support/unused.hpp>"},
{"lineNum":"   19","line":"#include <boost/spirit/home/support/common_terminals.hpp>"},
{"lineNum":"   20","line":"#include <boost/spirit/home/qi/detail/attributes.hpp>"},
{"lineNum":"   21","line":"#include <boost/spirit/home/support/info.hpp>"},
{"lineNum":"   22","line":"#include <boost/spirit/home/support/handles_container.hpp>"},
{"lineNum":"   23","line":"#include <boost/utility/enable_if.hpp>"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"namespace boost { namespace spirit"},
{"lineNum":"   26","line":"{"},
{"lineNum":"   27","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   28","line":"    // Enablers"},
{"lineNum":"   29","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   30","line":"    template <>"},
{"lineNum":"   31","line":"    struct use_directive<qi::domain, tag::lexeme> // enables lexeme"},
{"lineNum":"   32","line":"      : mpl::true_ {};"},
{"lineNum":"   33","line":"}}"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"namespace boost { namespace spirit { namespace qi"},
{"lineNum":"   36","line":"{"},
{"lineNum":"   37","line":"#ifndef BOOST_SPIRIT_NO_PREDEFINED_TERMINALS"},
{"lineNum":"   38","line":"    using spirit::lexeme;"},
{"lineNum":"   39","line":"#endif"},
{"lineNum":"   40","line":"    using spirit::lexeme_type;"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"    template <typename Subject>"},
{"lineNum":"   43","line":"    struct lexeme_directive : unary_parser<lexeme_directive<Subject> >"},
{"lineNum":"   44","line":"    {"},
{"lineNum":"   45","line":"        typedef Subject subject_type;"},
{"lineNum":"   46","line":"        lexeme_directive(Subject const& subject_)"},
{"lineNum":"   47","line":"          : subject(subject_) {}"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"        template <typename Context, typename Iterator>"},
{"lineNum":"   50","line":"        struct attribute"},
{"lineNum":"   51","line":"        {"},
{"lineNum":"   52","line":"            typedef typename"},
{"lineNum":"   53","line":"                traits::attribute_of<subject_type, Context, Iterator>::type"},
{"lineNum":"   54","line":"            type;"},
{"lineNum":"   55","line":"        };"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"        template <typename Iterator, typename Context"},
{"lineNum":"   58","line":"          , typename Skipper, typename Attribute>"},
{"lineNum":"   59","line":"        typename disable_if<detail::is_unused_skipper<Skipper>, bool>::type"},
{"lineNum":"   60","line":"        parse(Iterator& first, Iterator const& last"},
{"lineNum":"   61","line":"          , Context& context, Skipper const& skipper"},
{"lineNum":"   62","line":"          , Attribute& attr_) const"},
{"lineNum":"   63","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   64","line":"            qi::skip_over(first, last, skipper);"},
{"lineNum":"   65","line":"            return subject.parse(first, last, context","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   66","line":"              , detail::unused_skipper<Skipper>(skipper), attr_);"},
{"lineNum":"   67","line":"        }"},
{"lineNum":"   68","line":"        template <typename Iterator, typename Context"},
{"lineNum":"   69","line":"          , typename Skipper, typename Attribute>"},
{"lineNum":"   70","line":"        typename enable_if<detail::is_unused_skipper<Skipper>, bool>::type"},
{"lineNum":"   71","line":"        parse(Iterator& first, Iterator const& last"},
{"lineNum":"   72","line":"          , Context& context, Skipper const& skipper"},
{"lineNum":"   73","line":"          , Attribute& attr_) const"},
{"lineNum":"   74","line":"        {"},
{"lineNum":"   75","line":"            //  no need to pre-skip if skipper is unused"},
{"lineNum":"   76","line":"            //- qi::skip_over(first, last, skipper);"},
{"lineNum":"   77","line":"            return subject.parse(first, last, context"},
{"lineNum":"   78","line":"              , skipper, attr_);"},
{"lineNum":"   79","line":"        }"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"        template <typename Context>"},
{"lineNum":"   82","line":"        info what(Context& context) const"},
{"lineNum":"   83","line":"        {"},
{"lineNum":"   84","line":"            return info(\"lexeme\", subject.what(context));"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"        }"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"        Subject subject;"},
{"lineNum":"   89","line":"    };"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   92","line":"    // Parser generators: make_xxx function (objects)"},
{"lineNum":"   93","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   94","line":"    template <typename Subject, typename Modifiers>"},
{"lineNum":"   95","line":"    struct make_directive<tag::lexeme, Subject, Modifiers>"},
{"lineNum":"   96","line":"    {"},
{"lineNum":"   97","line":"        typedef lexeme_directive<Subject> result_type;"},
{"lineNum":"   98","line":"        result_type operator()(unused_type, Subject const& subject, unused_type) const"},
{"lineNum":"   99","line":"        {"},
{"lineNum":"  100","line":"            return result_type(subject);"},
{"lineNum":"  101","line":"        }"},
{"lineNum":"  102","line":"    };"},
{"lineNum":"  103","line":"}}}"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"namespace boost { namespace spirit { namespace traits"},
{"lineNum":"  106","line":"{"},
{"lineNum":"  107","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  108","line":"    template <typename Subject>"},
{"lineNum":"  109","line":"    struct has_semantic_action<qi::lexeme_directive<Subject> >"},
{"lineNum":"  110","line":"      : unary_has_semantic_action<Subject> {};"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  113","line":"    template <typename Subject, typename Attribute, typename Context"},
{"lineNum":"  114","line":"        , typename Iterator>"},
{"lineNum":"  115","line":"    struct handles_container<qi::lexeme_directive<Subject>, Attribute"},
{"lineNum":"  116","line":"        , Context, Iterator>"},
{"lineNum":"  117","line":"      : unary_handles_container<Subject, Attribute, Context, Iterator> {};"},
{"lineNum":"  118","line":"}}}"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 2, "covered" : 0,};
var merged_data = [];
