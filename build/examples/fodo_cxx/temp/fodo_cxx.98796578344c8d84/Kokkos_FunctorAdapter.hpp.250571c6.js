var data = {lines:[
{"lineNum":"    1","line":"/*"},
{"lineNum":"    2","line":"//@HEADER"},
{"lineNum":"    3","line":"// ************************************************************************"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"//                        Kokkos v. 3.0"},
{"lineNum":"    6","line":"//       Copyright (2020) National Technology & Engineering"},
{"lineNum":"    7","line":"//               Solutions of Sandia, LLC (NTESS)."},
{"lineNum":"    8","line":"//"},
{"lineNum":"    9","line":"// Under the terms of Contract DE-NA0003525 with NTESS,"},
{"lineNum":"   10","line":"// the U.S. Government retains certain rights in this software."},
{"lineNum":"   11","line":"//"},
{"lineNum":"   12","line":"// Redistribution and use in source and binary forms, with or without"},
{"lineNum":"   13","line":"// modification, are permitted provided that the following conditions are"},
{"lineNum":"   14","line":"// met:"},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"// 1. Redistributions of source code must retain the above copyright"},
{"lineNum":"   17","line":"// notice, this list of conditions and the following disclaimer."},
{"lineNum":"   18","line":"//"},
{"lineNum":"   19","line":"// 2. Redistributions in binary form must reproduce the above copyright"},
{"lineNum":"   20","line":"// notice, this list of conditions and the following disclaimer in the"},
{"lineNum":"   21","line":"// documentation and/or other materials provided with the distribution."},
{"lineNum":"   22","line":"//"},
{"lineNum":"   23","line":"// 3. Neither the name of the Corporation nor the names of the"},
{"lineNum":"   24","line":"// contributors may be used to endorse or promote products derived from"},
{"lineNum":"   25","line":"// this software without specific prior written permission."},
{"lineNum":"   26","line":"//"},
{"lineNum":"   27","line":"// THIS SOFTWARE IS PROVIDED BY NTESS \"AS IS\" AND ANY"},
{"lineNum":"   28","line":"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"},
{"lineNum":"   29","line":"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR"},
{"lineNum":"   30","line":"// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NTESS OR THE"},
{"lineNum":"   31","line":"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,"},
{"lineNum":"   32","line":"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,"},
{"lineNum":"   33","line":"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR"},
{"lineNum":"   34","line":"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF"},
{"lineNum":"   35","line":"// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING"},
{"lineNum":"   36","line":"// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"},
{"lineNum":"   37","line":"// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   38","line":"//"},
{"lineNum":"   39","line":"// Questions? Contact Christian R. Trott (crtrott@sandia.gov)"},
{"lineNum":"   40","line":"//"},
{"lineNum":"   41","line":"// ************************************************************************"},
{"lineNum":"   42","line":"//@HEADER"},
{"lineNum":"   43","line":"*/"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"#ifndef KOKKOS_FUNCTORADAPTER_HPP"},
{"lineNum":"   46","line":"#define KOKKOS_FUNCTORADAPTER_HPP"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"#include <cstddef>"},
{"lineNum":"   49","line":"#include <Kokkos_Core_fwd.hpp>"},
{"lineNum":"   50","line":"#include <impl/Kokkos_Traits.hpp>"},
{"lineNum":"   51","line":"#include <impl/Kokkos_Tags.hpp>"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"//----------------------------------------------------------------------------"},
{"lineNum":"   54","line":"//----------------------------------------------------------------------------"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"namespace Kokkos {"},
{"lineNum":"   57","line":"namespace Impl {"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"template <class FunctorType, class Enable = void>"},
{"lineNum":"   60","line":"struct ReduceFunctorHasInit {"},
{"lineNum":"   61","line":"  enum : bool { value = false };"},
{"lineNum":"   62","line":"};"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"// The else clause idiom failed with NVCC+MSVC, causing some symbols not being"},
{"lineNum":"   65","line":"// compiled for the device. The code in there is anyway sketchy, and likely not"},
{"lineNum":"   66","line":"// standard compliant (just happens to work on all compilers we ever used)"},
{"lineNum":"   67","line":"// We intend to replace all of this long term with proper detection idiom."},
{"lineNum":"   68","line":"#if defined(KOKKOS_COMPILER_MSVC) || defined(KOKKOS_IMPL_WINDOWS_CUDA)"},
{"lineNum":"   69","line":"template <class>"},
{"lineNum":"   70","line":"using impl_void_t_workaround = void;"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"template <class F>"},
{"lineNum":"   73","line":"using init_archetype = decltype(&F::init);"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"template <class FunctorType>"},
{"lineNum":"   76","line":"struct ReduceFunctorHasInit<"},
{"lineNum":"   77","line":"    FunctorType, impl_void_t_workaround<init_archetype<FunctorType>>> {"},
{"lineNum":"   78","line":"  enum : bool { value = true };"},
{"lineNum":"   79","line":"};"},
{"lineNum":"   80","line":"#else"},
{"lineNum":"   81","line":"template <class FunctorType>"},
{"lineNum":"   82","line":"struct ReduceFunctorHasInit<"},
{"lineNum":"   83","line":"    FunctorType,"},
{"lineNum":"   84","line":"    typename std::enable_if<0 < sizeof(&FunctorType::init)>::type> {"},
{"lineNum":"   85","line":"  enum : bool { value = true };"},
{"lineNum":"   86","line":"};"},
{"lineNum":"   87","line":"#endif"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"template <class FunctorType, class Enable = void>"},
{"lineNum":"   90","line":"struct ReduceFunctorHasJoin {"},
{"lineNum":"   91","line":"  enum : bool { value = false };"},
{"lineNum":"   92","line":"};"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"#if defined(KOKKOS_COMPILER_MSVC) || defined(KOKKOS_IMPL_WINDOWS_CUDA)"},
{"lineNum":"   95","line":"template <class F>"},
{"lineNum":"   96","line":"using join_archetype = decltype(&F::join);"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"template <class FunctorType>"},
{"lineNum":"   99","line":"struct ReduceFunctorHasJoin<"},
{"lineNum":"  100","line":"    FunctorType, impl_void_t_workaround<join_archetype<FunctorType>>> {"},
{"lineNum":"  101","line":"  enum : bool { value = true };"},
{"lineNum":"  102","line":"};"},
{"lineNum":"  103","line":"#else"},
{"lineNum":"  104","line":"template <class FunctorType>"},
{"lineNum":"  105","line":"struct ReduceFunctorHasJoin<"},
{"lineNum":"  106","line":"    FunctorType,"},
{"lineNum":"  107","line":"    typename std::enable_if<0 < sizeof(&FunctorType::join)>::type> {"},
{"lineNum":"  108","line":"  enum : bool { value = true };"},
{"lineNum":"  109","line":"};"},
{"lineNum":"  110","line":"#endif"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"template <class FunctorType, class Enable = void>"},
{"lineNum":"  113","line":"struct ReduceFunctorHasFinal {"},
{"lineNum":"  114","line":"  enum : bool { value = false };"},
{"lineNum":"  115","line":"};"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"#if defined(KOKKOS_COMPILER_MSVC) || defined(KOKKOS_IMPL_WINDOWS_CUDA)"},
{"lineNum":"  118","line":"template <class F>"},
{"lineNum":"  119","line":"using final_archetype = decltype(&F::final);"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"template <class FunctorType>"},
{"lineNum":"  122","line":"struct ReduceFunctorHasFinal<"},
{"lineNum":"  123","line":"    FunctorType, impl_void_t_workaround<final_archetype<FunctorType>>> {"},
{"lineNum":"  124","line":"  enum : bool { value = true };"},
{"lineNum":"  125","line":"};"},
{"lineNum":"  126","line":"#else"},
{"lineNum":"  127","line":"template <class FunctorType>"},
{"lineNum":"  128","line":"struct ReduceFunctorHasFinal<"},
{"lineNum":"  129","line":"    FunctorType,"},
{"lineNum":"  130","line":"    typename std::enable_if<0 < sizeof(&FunctorType::final)>::type> {"},
{"lineNum":"  131","line":"  enum : bool { value = true };"},
{"lineNum":"  132","line":"};"},
{"lineNum":"  133","line":"#endif"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"template <class FunctorType, class Enable = void>"},
{"lineNum":"  136","line":"struct ReduceFunctorHasShmemSize {"},
{"lineNum":"  137","line":"  enum : bool { value = false };"},
{"lineNum":"  138","line":"};"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"#if defined(KOKKOS_COMPILER_MSVC) || defined(KOKKOS_IMPL_WINDOWS_CUDA)"},
{"lineNum":"  141","line":"template <class F>"},
{"lineNum":"  142","line":"using shmemsize_archetype = decltype(&F::team_shmem_size);"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"template <class FunctorType>"},
{"lineNum":"  145","line":"struct ReduceFunctorHasShmemSize<"},
{"lineNum":"  146","line":"    FunctorType, impl_void_t_workaround<shmemsize_archetype<FunctorType>>> {"},
{"lineNum":"  147","line":"  enum : bool { value = true };"},
{"lineNum":"  148","line":"};"},
{"lineNum":"  149","line":"#else"},
{"lineNum":"  150","line":"template <class FunctorType>"},
{"lineNum":"  151","line":"struct ReduceFunctorHasShmemSize<"},
{"lineNum":"  152","line":"    FunctorType,"},
{"lineNum":"  153","line":"    typename std::enable_if<0 < sizeof(&FunctorType::team_shmem_size)>::type> {"},
{"lineNum":"  154","line":"  enum : bool { value = true };"},
{"lineNum":"  155","line":"};"},
{"lineNum":"  156","line":"#endif"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"template <class FunctorType, class ArgTag, class Enable = void>"},
{"lineNum":"  159","line":"struct FunctorDeclaresValueType : public std::false_type {};"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"template <class FunctorType, class ArgTag>"},
{"lineNum":"  162","line":"struct FunctorDeclaresValueType<FunctorType, ArgTag,"},
{"lineNum":"  163","line":"                                void_t<typename FunctorType::value_type>>"},
{"lineNum":"  164","line":"    : public std::true_type {};"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"template <class FunctorType,"},
{"lineNum":"  167","line":"          bool Enable = (FunctorDeclaresValueType<FunctorType, void>::value) ||"},
{"lineNum":"  168","line":"                        (ReduceFunctorHasInit<FunctorType>::value) ||"},
{"lineNum":"  169","line":"                        (ReduceFunctorHasJoin<FunctorType>::value) ||"},
{"lineNum":"  170","line":"                        (ReduceFunctorHasFinal<FunctorType>::value) ||"},
{"lineNum":"  171","line":"                        (ReduceFunctorHasShmemSize<FunctorType>::value)>"},
{"lineNum":"  172","line":"struct IsNonTrivialReduceFunctor {"},
{"lineNum":"  173","line":"  enum : bool { value = false };"},
{"lineNum":"  174","line":"};"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"template <class FunctorType>"},
{"lineNum":"  177","line":"struct IsNonTrivialReduceFunctor<FunctorType, true> {"},
{"lineNum":"  178","line":"  enum : bool { value = true };"},
{"lineNum":"  179","line":"};"},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"/** \\brief  Query Functor and execution policy argument tag for value type."},
{"lineNum":"  182","line":" *"},
{"lineNum":"  183","line":" *  If C++11 enabled and \'value_type\' is not explicitly declared then attempt"},
{"lineNum":"  184","line":" *  to deduce the type from FunctorType::operator()."},
{"lineNum":"  185","line":" */"},
{"lineNum":"  186","line":"template <class FunctorType, class ArgTag,"},
{"lineNum":"  187","line":"          bool Dec = FunctorDeclaresValueType<FunctorType, ArgTag>::value>"},
{"lineNum":"  188","line":"struct FunctorValueTraits {"},
{"lineNum":"  189","line":"  using value_type     = void;"},
{"lineNum":"  190","line":"  using pointer_type   = void;"},
{"lineNum":"  191","line":"  using reference_type = void;"},
{"lineNum":"  192","line":"  using functor_type   = void;"},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"  enum { StaticValueSize = 0 };"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"  KOKKOS_FORCEINLINE_FUNCTION static unsigned value_count(const FunctorType&) {"},
{"lineNum":"  197","line":"    return 0;"},
{"lineNum":"  198","line":"  }"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"  KOKKOS_FORCEINLINE_FUNCTION static unsigned value_size(const FunctorType&) {"},
{"lineNum":"  201","line":"    return 0;"},
{"lineNum":"  202","line":"  }"},
{"lineNum":"  203","line":"};"},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"template <class ArgTag>"},
{"lineNum":"  206","line":"struct FunctorValueTraits<void, ArgTag, false> {"},
{"lineNum":"  207","line":"  using value_type     = void;"},
{"lineNum":"  208","line":"  using pointer_type   = void;"},
{"lineNum":"  209","line":"  using reference_type = void;"},
{"lineNum":"  210","line":"  using functor_type   = void;"},
{"lineNum":"  211","line":"};"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"/** \\brief  FunctorType::value_type is explicitly declared so use it."},
{"lineNum":"  214","line":" *"},
{"lineNum":"  215","line":" * Two options for declaration"},
{"lineNum":"  216","line":" *"},
{"lineNum":"  217","line":" *   1) A plain-old-data (POD) type"},
{"lineNum":"  218","line":" *        using value_type = {pod_type};"},
{"lineNum":"  219","line":" *"},
{"lineNum":"  220","line":" *   2) An array of POD of a runtime specified count."},
{"lineNum":"  221","line":" *        using value_type = {pod_type}[];"},
{"lineNum":"  222","line":" *        const unsigned     value_count ;"},
{"lineNum":"  223","line":" */"},
{"lineNum":"  224","line":"template <class FunctorType, class ArgTag>"},
{"lineNum":"  225","line":"struct FunctorValueTraits<FunctorType, ArgTag,"},
{"lineNum":"  226","line":"                          true /* == exists FunctorType::value_type */> {"},
{"lineNum":"  227","line":"  using value_type ="},
{"lineNum":"  228","line":"      typename std::remove_extent<typename FunctorType::value_type>::type;"},
{"lineNum":"  229","line":"  using functor_type = FunctorType;"},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"  static_assert((sizeof(value_type) < sizeof(int)) ||"},
{"lineNum":"  232","line":"                    0 == (sizeof(value_type) % sizeof(int)),"},
{"lineNum":"  233","line":"                \"Reduction functor\'s declared value_type requires: 0 == \""},
{"lineNum":"  234","line":"                \"sizeof(value_type) % sizeof(int)\");"},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":"  /* this cast to bool is needed for correctness by NVCC */"},
{"lineNum":"  237","line":"  enum : bool {"},
{"lineNum":"  238","line":"    IsArray = static_cast<bool>("},
{"lineNum":"  239","line":"        std::is_array<typename FunctorType::value_type>::value)"},
{"lineNum":"  240","line":"  };"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"  // If not an array then what is the sizeof(value_type)"},
{"lineNum":"  243","line":"  enum { StaticValueSize = IsArray ? 0 : sizeof(value_type) };"},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"  using pointer_type = value_type*;"},
{"lineNum":"  246","line":""},
{"lineNum":"  247","line":"  // The reference_type for an array is \'value_type *\'"},
{"lineNum":"  248","line":"  // The reference_type for a single value is \'value_type &\'"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"  using reference_type = std::conditional_t<IsArray, value_type*, value_type&>;"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"  // Number of values if single value"},
{"lineNum":"  253","line":"  template <class F>"},
{"lineNum":"  254","line":"  KOKKOS_FORCEINLINE_FUNCTION static"},
{"lineNum":"  255","line":"      typename std::enable_if<std::is_same<F, FunctorType>::value && !IsArray,"},
{"lineNum":"  256","line":"                              unsigned>::type"},
{"lineNum":"  257","line":"      value_count(const F&) {"},
{"lineNum":"  258","line":"    return 1;"},
{"lineNum":"  259","line":"  }"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"  // Number of values if an array, protect via templating because"},
{"lineNum":"  262","line":"  // \'f.value_count\' will only exist when the functor declares the value_type to"},
{"lineNum":"  263","line":"  // be an array."},
{"lineNum":"  264","line":"  template <class F>"},
{"lineNum":"  265","line":"  KOKKOS_FORCEINLINE_FUNCTION static"},
{"lineNum":"  266","line":"      typename std::enable_if<std::is_same<F, FunctorType>::value && IsArray,"},
{"lineNum":"  267","line":"                              unsigned>::type"},
{"lineNum":"  268","line":"      value_count(const F& f) {"},
{"lineNum":"  269","line":"    return f.value_count;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  270","line":"  }"},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"  // Total size of the value"},
{"lineNum":"  273","line":"  KOKKOS_INLINE_FUNCTION static unsigned value_size(const FunctorType& f) {"},
{"lineNum":"  274","line":"    return value_count(f) * sizeof(value_type);"},
{"lineNum":"  275","line":"  }"},
{"lineNum":"  276","line":"};"},
{"lineNum":"  277","line":""},
{"lineNum":"  278","line":"template <class FunctorType, class ArgTag>"},
{"lineNum":"  279","line":"struct FunctorValueTraits<FunctorType, ArgTag,"},
{"lineNum":"  280","line":"                          false /* == exists FunctorType::value_type */"},
{"lineNum":"  281","line":"                          > {"},
{"lineNum":"  282","line":" private:"},
{"lineNum":"  283","line":"  struct VOIDTAG {"},
{"lineNum":"  284","line":"  };  // Allow declaration of non-matching operator() with void argument tag."},
{"lineNum":"  285","line":"  struct REJECTTAG {"},
{"lineNum":"  286","line":"  };  // Reject tagged operator() when using non-tagged execution policy."},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"  using tag_type ="},
{"lineNum":"  289","line":"      std::conditional_t<std::is_same<ArgTag, void>::value, VOIDTAG, ArgTag>;"},
{"lineNum":"  290","line":""},
{"lineNum":"  291","line":"  //----------------------------------------"},
{"lineNum":"  292","line":"  // parallel_for operator without a tag:"},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"  template <class ArgMember>"},
{"lineNum":"  295","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  296","line":"      VOIDTAG, void (FunctorType::*)(ArgMember) const) {}"},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":"  template <class ArgMember>"},
{"lineNum":"  299","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  300","line":"      VOIDTAG, void (FunctorType::*)(ArgMember, ArgMember) const) {}"},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":"  template <class ArgMember>"},
{"lineNum":"  303","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  304","line":"      VOIDTAG, void (FunctorType::*)(ArgMember, ArgMember, ArgMember) const) {}"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"  template <class ArgMember>"},
{"lineNum":"  307","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  308","line":"      VOIDTAG, void (FunctorType::*)(ArgMember, ArgMember, ArgMember, ArgMember)"},
{"lineNum":"  309","line":"                   const) {}"},
{"lineNum":"  310","line":""},
{"lineNum":"  311","line":"  template <class ArgMember>"},
{"lineNum":"  312","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  313","line":"      VOIDTAG, void (FunctorType::*)(ArgMember, ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  314","line":"                                     ArgMember) const) {}"},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":"  template <class ArgMember>"},
{"lineNum":"  317","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  318","line":"      VOIDTAG, void (FunctorType::*)(ArgMember, ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  319","line":"                                     ArgMember, ArgMember) const) {}"},
{"lineNum":"  320","line":""},
{"lineNum":"  321","line":"  template <class ArgMember>"},
{"lineNum":"  322","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  323","line":"      VOIDTAG, void (FunctorType::*)(ArgMember, ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  324","line":"                                     ArgMember, ArgMember, ArgMember) const) {}"},
{"lineNum":"  325","line":""},
{"lineNum":"  326","line":"  template <class ArgMember>"},
{"lineNum":"  327","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  328","line":"      VOIDTAG, void (FunctorType::*)(ArgMember, ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  329","line":"                                     ArgMember, ArgMember, ArgMember, ArgMember)"},
{"lineNum":"  330","line":"                   const) {}"},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"  template <class ArgMember>"},
{"lineNum":"  333","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  334","line":"      VOIDTAG, void (FunctorType::*)(const ArgMember&) const) {}"},
{"lineNum":"  335","line":""},
{"lineNum":"  336","line":"  template <class ArgMember>"},
{"lineNum":"  337","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  338","line":"      VOIDTAG,"},
{"lineNum":"  339","line":"      void (FunctorType::*)(const ArgMember&, const ArgMember&) const) {}"},
{"lineNum":"  340","line":""},
{"lineNum":"  341","line":"  template <class ArgMember>"},
{"lineNum":"  342","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  343","line":"      VOIDTAG, void (FunctorType::*)(const ArgMember&, const ArgMember&,"},
{"lineNum":"  344","line":"                                     const ArgMember&) const) {}"},
{"lineNum":"  345","line":""},
{"lineNum":"  346","line":"  template <class ArgMember>"},
{"lineNum":"  347","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  348","line":"      VOIDTAG,"},
{"lineNum":"  349","line":"      void (FunctorType::*)(const ArgMember&, const ArgMember&,"},
{"lineNum":"  350","line":"                            const ArgMember&, const ArgMember&) const) {}"},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"  template <class ArgMember>"},
{"lineNum":"  353","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  354","line":"      VOIDTAG, void (FunctorType::*)(const ArgMember&, const ArgMember&,"},
{"lineNum":"  355","line":"                                     const ArgMember&, const ArgMember&,"},
{"lineNum":"  356","line":"                                     const ArgMember&) const) {}"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"  template <class ArgMember>"},
{"lineNum":"  359","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  360","line":"      VOIDTAG,"},
{"lineNum":"  361","line":"      void (FunctorType::*)(const ArgMember&, const ArgMember&,"},
{"lineNum":"  362","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":"  363","line":"                            const ArgMember&, const ArgMember&) const) {}"},
{"lineNum":"  364","line":""},
{"lineNum":"  365","line":"  template <class ArgMember>"},
{"lineNum":"  366","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  367","line":"      VOIDTAG, void (FunctorType::*)(const ArgMember&, const ArgMember&,"},
{"lineNum":"  368","line":"                                     const ArgMember&, const ArgMember&,"},
{"lineNum":"  369","line":"                                     const ArgMember&, const ArgMember&,"},
{"lineNum":"  370","line":"                                     const ArgMember&) const) {}"},
{"lineNum":"  371","line":""},
{"lineNum":"  372","line":"  template <class ArgMember>"},
{"lineNum":"  373","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  374","line":"      VOIDTAG,"},
{"lineNum":"  375","line":"      void (FunctorType::*)(const ArgMember&, const ArgMember&,"},
{"lineNum":"  376","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":"  377","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":"  378","line":"                            const ArgMember&, const ArgMember&) const) {}"},
{"lineNum":"  379","line":""},
{"lineNum":"  380","line":"  template <class TagType, class ArgMember>"},
{"lineNum":"  381","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  382","line":"      VOIDTAG, void (FunctorType::*)(TagType, ArgMember) const) {}"},
{"lineNum":"  383","line":""},
{"lineNum":"  384","line":"  template <class TagType, class ArgMember>"},
{"lineNum":"  385","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  386","line":"      VOIDTAG, void (FunctorType::*)(TagType, ArgMember, ArgMember) const) {}"},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"  template <class TagType, class ArgMember>"},
{"lineNum":"  389","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  390","line":"      VOIDTAG,"},
{"lineNum":"  391","line":"      void (FunctorType::*)(TagType, ArgMember, ArgMember, ArgMember) const) {}"},
{"lineNum":"  392","line":""},
{"lineNum":"  393","line":"  template <class TagType, class ArgMember>"},
{"lineNum":"  394","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  395","line":"      VOIDTAG, void (FunctorType::*)(TagType, ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  396","line":"                                     ArgMember) const) {}"},
{"lineNum":"  397","line":""},
{"lineNum":"  398","line":"  template <class TagType, class ArgMember>"},
{"lineNum":"  399","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  400","line":"      VOIDTAG, void (FunctorType::*)(TagType, ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  401","line":"                                     ArgMember, ArgMember) const) {}"},
{"lineNum":"  402","line":""},
{"lineNum":"  403","line":"  template <class TagType, class ArgMember>"},
{"lineNum":"  404","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  405","line":"      VOIDTAG, void (FunctorType::*)(TagType, ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  406","line":"                                     ArgMember, ArgMember, ArgMember) const) {}"},
{"lineNum":"  407","line":""},
{"lineNum":"  408","line":"  template <class TagType, class ArgMember>"},
{"lineNum":"  409","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  410","line":"      VOIDTAG,"},
{"lineNum":"  411","line":"      void (FunctorType::*)(TagType, ArgMember, ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  412","line":"                            ArgMember, ArgMember, ArgMember) const) {}"},
{"lineNum":"  413","line":""},
{"lineNum":"  414","line":"  template <class TagType, class ArgMember>"},
{"lineNum":"  415","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  416","line":"      VOIDTAG, void (FunctorType::*)(TagType, ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  417","line":"                                     ArgMember, ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  418","line":"                                     ArgMember) const) {}"},
{"lineNum":"  419","line":""},
{"lineNum":"  420","line":"  template <class TagType, class ArgMember>"},
{"lineNum":"  421","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  422","line":"      VOIDTAG, void (FunctorType::*)(TagType, const ArgMember&) const) {}"},
{"lineNum":"  423","line":""},
{"lineNum":"  424","line":"  template <class TagType, class ArgMember>"},
{"lineNum":"  425","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  426","line":"      VOIDTAG, void (FunctorType::*)(TagType, const ArgMember&,"},
{"lineNum":"  427","line":"                                     const ArgMember&) const) {}"},
{"lineNum":"  428","line":""},
{"lineNum":"  429","line":"  template <class TagType, class ArgMember>"},
{"lineNum":"  430","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  431","line":"      VOIDTAG,"},
{"lineNum":"  432","line":"      void (FunctorType::*)(TagType, const ArgMember&, const ArgMember&,"},
{"lineNum":"  433","line":"                            const ArgMember&) const) {}"},
{"lineNum":"  434","line":""},
{"lineNum":"  435","line":"  template <class TagType, class ArgMember>"},
{"lineNum":"  436","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  437","line":"      VOIDTAG,"},
{"lineNum":"  438","line":"      void (FunctorType::*)(TagType, const ArgMember&, const ArgMember&,"},
{"lineNum":"  439","line":"                            const ArgMember&, const ArgMember&) const) {}"},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"  template <class TagType, class ArgMember>"},
{"lineNum":"  442","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  443","line":"      VOIDTAG,"},
{"lineNum":"  444","line":"      void (FunctorType::*)(TagType, const ArgMember&, const ArgMember&,"},
{"lineNum":"  445","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":"  446","line":"                            const ArgMember&) const) {}"},
{"lineNum":"  447","line":""},
{"lineNum":"  448","line":"  template <class TagType, class ArgMember>"},
{"lineNum":"  449","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  450","line":"      VOIDTAG,"},
{"lineNum":"  451","line":"      void (FunctorType::*)(TagType, const ArgMember&, const ArgMember&,"},
{"lineNum":"  452","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":"  453","line":"                            const ArgMember&, const ArgMember&) const) {}"},
{"lineNum":"  454","line":""},
{"lineNum":"  455","line":"  template <class TagType, class ArgMember>"},
{"lineNum":"  456","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  457","line":"      VOIDTAG,"},
{"lineNum":"  458","line":"      void (FunctorType::*)(TagType, const ArgMember&, const ArgMember&,"},
{"lineNum":"  459","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":"  460","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":"  461","line":"                            const ArgMember&) const) {}"},
{"lineNum":"  462","line":""},
{"lineNum":"  463","line":"  template <class TagType, class ArgMember>"},
{"lineNum":"  464","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  465","line":"      VOIDTAG,"},
{"lineNum":"  466","line":"      void (FunctorType::*)(TagType, const ArgMember&, const ArgMember&,"},
{"lineNum":"  467","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":"  468","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":"  469","line":"                            const ArgMember&, const ArgMember&) const) {}"},
{"lineNum":"  470","line":""},
{"lineNum":"  471","line":"  template <class TagType, class ArgMember>"},
{"lineNum":"  472","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  473","line":"      VOIDTAG, void (FunctorType::*)(const TagType&, ArgMember) const) {}"},
{"lineNum":"  474","line":""},
{"lineNum":"  475","line":"  template <class TagType, class ArgMember>"},
{"lineNum":"  476","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  477","line":"      VOIDTAG,"},
{"lineNum":"  478","line":"      void (FunctorType::*)(const TagType&, ArgMember, ArgMember) const) {}"},
{"lineNum":"  479","line":""},
{"lineNum":"  480","line":"  template <class TagType, class ArgMember>"},
{"lineNum":"  481","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  482","line":"      VOIDTAG, void (FunctorType::*)(const TagType&, ArgMember, ArgMember,"},
{"lineNum":"  483","line":"                                     ArgMember) const) {}"},
{"lineNum":"  484","line":""},
{"lineNum":"  485","line":"  template <class TagType, class ArgMember>"},
{"lineNum":"  486","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  487","line":"      VOIDTAG, void (FunctorType::*)(const TagType&, ArgMember, ArgMember,"},
{"lineNum":"  488","line":"                                     ArgMember, ArgMember) const) {}"},
{"lineNum":"  489","line":""},
{"lineNum":"  490","line":"  template <class TagType, class ArgMember>"},
{"lineNum":"  491","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  492","line":"      VOIDTAG, void (FunctorType::*)(const TagType&, ArgMember, ArgMember,"},
{"lineNum":"  493","line":"                                     ArgMember, ArgMember, ArgMember) const) {}"},
{"lineNum":"  494","line":""},
{"lineNum":"  495","line":"  template <class TagType, class ArgMember>"},
{"lineNum":"  496","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  497","line":"      VOIDTAG,"},
{"lineNum":"  498","line":"      void (FunctorType::*)(const TagType&, ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  499","line":"                            ArgMember, ArgMember, ArgMember) const) {}"},
{"lineNum":"  500","line":""},
{"lineNum":"  501","line":"  template <class TagType, class ArgMember>"},
{"lineNum":"  502","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  503","line":"      VOIDTAG, void (FunctorType::*)(const TagType&, ArgMember, ArgMember,"},
{"lineNum":"  504","line":"                                     ArgMember, ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  505","line":"                                     ArgMember) const) {}"},
{"lineNum":"  506","line":""},
{"lineNum":"  507","line":"  template <class TagType, class ArgMember>"},
{"lineNum":"  508","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  509","line":"      VOIDTAG, void (FunctorType::*)(const TagType&, ArgMember, ArgMember,"},
{"lineNum":"  510","line":"                                     ArgMember, ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  511","line":"                                     ArgMember, ArgMember) const) {}"},
{"lineNum":"  512","line":""},
{"lineNum":"  513","line":"  template <class TagType, class ArgMember>"},
{"lineNum":"  514","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  515","line":"      VOIDTAG, void (FunctorType::*)(const TagType&, const ArgMember&) const) {}"},
{"lineNum":"  516","line":""},
{"lineNum":"  517","line":"  template <class TagType, class ArgMember>"},
{"lineNum":"  518","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  519","line":"      VOIDTAG, void (FunctorType::*)(const TagType&, const ArgMember&,"},
{"lineNum":"  520","line":"                                     const ArgMember&) const) {}"},
{"lineNum":"  521","line":""},
{"lineNum":"  522","line":"  template <class TagType, class ArgMember>"},
{"lineNum":"  523","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  524","line":"      VOIDTAG,"},
{"lineNum":"  525","line":"      void (FunctorType::*)(const TagType&, const ArgMember&, const ArgMember&,"},
{"lineNum":"  526","line":"                            const ArgMember&) const) {}"},
{"lineNum":"  527","line":""},
{"lineNum":"  528","line":"  template <class TagType, class ArgMember>"},
{"lineNum":"  529","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  530","line":"      VOIDTAG,"},
{"lineNum":"  531","line":"      void (FunctorType::*)(const TagType&, const ArgMember&, const ArgMember&,"},
{"lineNum":"  532","line":"                            const ArgMember&, const ArgMember&) const) {}"},
{"lineNum":"  533","line":""},
{"lineNum":"  534","line":"  template <class TagType, class ArgMember>"},
{"lineNum":"  535","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  536","line":"      VOIDTAG,"},
{"lineNum":"  537","line":"      void (FunctorType::*)(const TagType&, const ArgMember&, const ArgMember&,"},
{"lineNum":"  538","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":"  539","line":"                            const ArgMember&) const) {}"},
{"lineNum":"  540","line":""},
{"lineNum":"  541","line":"  template <class TagType, class ArgMember>"},
{"lineNum":"  542","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  543","line":"      VOIDTAG,"},
{"lineNum":"  544","line":"      void (FunctorType::*)(const TagType&, const ArgMember&, const ArgMember&,"},
{"lineNum":"  545","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":"  546","line":"                            const ArgMember&, const ArgMember&) const) {}"},
{"lineNum":"  547","line":""},
{"lineNum":"  548","line":"  template <class TagType, class ArgMember>"},
{"lineNum":"  549","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  550","line":"      VOIDTAG,"},
{"lineNum":"  551","line":"      void (FunctorType::*)(const TagType&, const ArgMember&, const ArgMember&,"},
{"lineNum":"  552","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":"  553","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":"  554","line":"                            const ArgMember&) const) {}"},
{"lineNum":"  555","line":""},
{"lineNum":"  556","line":"  template <class TagType, class ArgMember>"},
{"lineNum":"  557","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  558","line":"      VOIDTAG,"},
{"lineNum":"  559","line":"      void (FunctorType::*)(const TagType&, const ArgMember&, const ArgMember&,"},
{"lineNum":"  560","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":"  561","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":"  562","line":"                            const ArgMember&, const ArgMember&) const) {}"},
{"lineNum":"  563","line":""},
{"lineNum":"  564","line":"  //----------------------------------------"},
{"lineNum":"  565","line":"  // parallel_for operator with a tag:"},
{"lineNum":"  566","line":""},
{"lineNum":"  567","line":"  template <class ArgMember>"},
{"lineNum":"  568","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  569","line":"      tag_type, void (FunctorType::*)(tag_type, ArgMember) const) {}"},
{"lineNum":"  570","line":""},
{"lineNum":"  571","line":"  template <class ArgMember>"},
{"lineNum":"  572","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  573","line":"      tag_type, void (FunctorType::*)(tag_type, ArgMember, ArgMember) const) {}"},
{"lineNum":"  574","line":""},
{"lineNum":"  575","line":"  template <class ArgMember>"},
{"lineNum":"  576","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  577","line":"      tag_type,"},
{"lineNum":"  578","line":"      void (FunctorType::*)(tag_type, ArgMember, ArgMember, ArgMember) const) {}"},
{"lineNum":"  579","line":""},
{"lineNum":"  580","line":"  template <class ArgMember>"},
{"lineNum":"  581","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  582","line":"      tag_type, void (FunctorType::*)(tag_type, ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  583","line":"                                      ArgMember) const) {}"},
{"lineNum":"  584","line":""},
{"lineNum":"  585","line":"  template <class ArgMember>"},
{"lineNum":"  586","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  587","line":"      tag_type, void (FunctorType::*)(tag_type, ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  588","line":"                                      ArgMember, ArgMember) const) {}"},
{"lineNum":"  589","line":""},
{"lineNum":"  590","line":"  template <class ArgMember>"},
{"lineNum":"  591","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  592","line":"      tag_type, void (FunctorType::*)(tag_type, ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  593","line":"                                      ArgMember, ArgMember, ArgMember) const) {}"},
{"lineNum":"  594","line":""},
{"lineNum":"  595","line":"  template <class ArgMember>"},
{"lineNum":"  596","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  597","line":"      tag_type, void (FunctorType::*)(tag_type, ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  598","line":"                                      ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  599","line":"                                      ArgMember) const) {}"},
{"lineNum":"  600","line":""},
{"lineNum":"  601","line":"  template <class ArgMember>"},
{"lineNum":"  602","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  603","line":"      tag_type, void (FunctorType::*)(tag_type, ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  604","line":"                                      ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  605","line":"                                      ArgMember, ArgMember) const) {}"},
{"lineNum":"  606","line":""},
{"lineNum":"  607","line":"  template <class ArgMember>"},
{"lineNum":"  608","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  609","line":"      tag_type, void (FunctorType::*)(const tag_type&, ArgMember) const) {}"},
{"lineNum":"  610","line":""},
{"lineNum":"  611","line":"  template <class ArgMember>"},
{"lineNum":"  612","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  613","line":"      tag_type,"},
{"lineNum":"  614","line":"      void (FunctorType::*)(const tag_type&, ArgMember, ArgMember) const) {}"},
{"lineNum":"  615","line":""},
{"lineNum":"  616","line":"  template <class ArgMember>"},
{"lineNum":"  617","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  618","line":"      tag_type, void (FunctorType::*)(const tag_type&, ArgMember, ArgMember,"},
{"lineNum":"  619","line":"                                      ArgMember) const) {}"},
{"lineNum":"  620","line":""},
{"lineNum":"  621","line":"  template <class ArgMember>"},
{"lineNum":"  622","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  623","line":"      tag_type, void (FunctorType::*)(const tag_type&, ArgMember, ArgMember,"},
{"lineNum":"  624","line":"                                      ArgMember, ArgMember) const) {}"},
{"lineNum":"  625","line":""},
{"lineNum":"  626","line":"  template <class ArgMember>"},
{"lineNum":"  627","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  628","line":"      tag_type, void (FunctorType::*)(const tag_type&, ArgMember, ArgMember,"},
{"lineNum":"  629","line":"                                      ArgMember, ArgMember, ArgMember) const) {}"},
{"lineNum":"  630","line":""},
{"lineNum":"  631","line":"  template <class ArgMember>"},
{"lineNum":"  632","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  633","line":"      tag_type,"},
{"lineNum":"  634","line":"      void (FunctorType::*)(const tag_type&, ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  635","line":"                            ArgMember, ArgMember, ArgMember) const) {}"},
{"lineNum":"  636","line":""},
{"lineNum":"  637","line":"  template <class ArgMember>"},
{"lineNum":"  638","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  639","line":"      tag_type, void (FunctorType::*)(const tag_type&, ArgMember, ArgMember,"},
{"lineNum":"  640","line":"                                      ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  641","line":"                                      ArgMember, ArgMember) const) {}"},
{"lineNum":"  642","line":""},
{"lineNum":"  643","line":"  template <class ArgMember>"},
{"lineNum":"  644","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  645","line":"      tag_type, void (FunctorType::*)(const tag_type&, ArgMember, ArgMember,"},
{"lineNum":"  646","line":"                                      ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  647","line":"                                      ArgMember, ArgMember, ArgMember) const) {}"},
{"lineNum":"  648","line":""},
{"lineNum":"  649","line":"  template <class ArgMember>"},
{"lineNum":"  650","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  651","line":"      tag_type, void (FunctorType::*)(tag_type, const ArgMember&) const) {}"},
{"lineNum":"  652","line":""},
{"lineNum":"  653","line":"  template <class ArgMember>"},
{"lineNum":"  654","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  655","line":"      tag_type, void (FunctorType::*)(tag_type, const ArgMember&,"},
{"lineNum":"  656","line":"                                      const ArgMember&) const) {}"},
{"lineNum":"  657","line":""},
{"lineNum":"  658","line":"  template <class ArgMember>"},
{"lineNum":"  659","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  660","line":"      tag_type,"},
{"lineNum":"  661","line":"      void (FunctorType::*)(tag_type, const ArgMember&, const ArgMember&,"},
{"lineNum":"  662","line":"                            const ArgMember&) const) {}"},
{"lineNum":"  663","line":""},
{"lineNum":"  664","line":"  template <class ArgMember>"},
{"lineNum":"  665","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  666","line":"      tag_type,"},
{"lineNum":"  667","line":"      void (FunctorType::*)(tag_type, const ArgMember&, const ArgMember&,"},
{"lineNum":"  668","line":"                            const ArgMember&, const ArgMember&) const) {}"},
{"lineNum":"  669","line":""},
{"lineNum":"  670","line":"  template <class ArgMember>"},
{"lineNum":"  671","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  672","line":"      tag_type,"},
{"lineNum":"  673","line":"      void (FunctorType::*)(tag_type, const ArgMember&, const ArgMember&,"},
{"lineNum":"  674","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":"  675","line":"                            const ArgMember&) const) {}"},
{"lineNum":"  676","line":""},
{"lineNum":"  677","line":"  template <class ArgMember>"},
{"lineNum":"  678","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  679","line":"      tag_type,"},
{"lineNum":"  680","line":"      void (FunctorType::*)(tag_type, const ArgMember&, const ArgMember&,"},
{"lineNum":"  681","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":"  682","line":"                            const ArgMember&, const ArgMember&) const) {}"},
{"lineNum":"  683","line":""},
{"lineNum":"  684","line":"  template <class ArgMember>"},
{"lineNum":"  685","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  686","line":"      tag_type,"},
{"lineNum":"  687","line":"      void (FunctorType::*)(tag_type, const ArgMember&, const ArgMember&,"},
{"lineNum":"  688","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":"  689","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":"  690","line":"                            const ArgMember&) const) {}"},
{"lineNum":"  691","line":""},
{"lineNum":"  692","line":"  template <class ArgMember>"},
{"lineNum":"  693","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  694","line":"      tag_type,"},
{"lineNum":"  695","line":"      void (FunctorType::*)(tag_type, const ArgMember&, const ArgMember&,"},
{"lineNum":"  696","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":"  697","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":"  698","line":"                            const ArgMember&, const ArgMember&) const) {}"},
{"lineNum":"  699","line":""},
{"lineNum":"  700","line":"  template <class ArgMember>"},
{"lineNum":"  701","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  702","line":"      tag_type,"},
{"lineNum":"  703","line":"      void (FunctorType::*)(const tag_type&, const ArgMember&) const) {}"},
{"lineNum":"  704","line":""},
{"lineNum":"  705","line":"  template <class ArgMember>"},
{"lineNum":"  706","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  707","line":"      tag_type, void (FunctorType::*)(const tag_type&, const ArgMember&,"},
{"lineNum":"  708","line":"                                      const ArgMember&) const) {}"},
{"lineNum":"  709","line":""},
{"lineNum":"  710","line":"  template <class ArgMember>"},
{"lineNum":"  711","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  712","line":"      tag_type,"},
{"lineNum":"  713","line":"      void (FunctorType::*)(const tag_type&, const ArgMember&, const ArgMember&,"},
{"lineNum":"  714","line":"                            const ArgMember&) const) {}"},
{"lineNum":"  715","line":""},
{"lineNum":"  716","line":"  template <class ArgMember>"},
{"lineNum":"  717","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  718","line":"      tag_type,"},
{"lineNum":"  719","line":"      void (FunctorType::*)(const tag_type&, const ArgMember&, const ArgMember&,"},
{"lineNum":"  720","line":"                            const ArgMember&, const ArgMember&) const) {}"},
{"lineNum":"  721","line":""},
{"lineNum":"  722","line":"  template <class ArgMember>"},
{"lineNum":"  723","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  724","line":"      tag_type,"},
{"lineNum":"  725","line":"      void (FunctorType::*)(const tag_type&, const ArgMember&, const ArgMember&,"},
{"lineNum":"  726","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":"  727","line":"                            const ArgMember&) const) {}"},
{"lineNum":"  728","line":""},
{"lineNum":"  729","line":"  template <class ArgMember>"},
{"lineNum":"  730","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  731","line":"      tag_type,"},
{"lineNum":"  732","line":"      void (FunctorType::*)(const tag_type&, const ArgMember&, const ArgMember&,"},
{"lineNum":"  733","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":"  734","line":"                            const ArgMember&, const ArgMember&) const) {}"},
{"lineNum":"  735","line":""},
{"lineNum":"  736","line":"  template <class ArgMember>"},
{"lineNum":"  737","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  738","line":"      tag_type,"},
{"lineNum":"  739","line":"      void (FunctorType::*)(const tag_type&, const ArgMember&, const ArgMember&,"},
{"lineNum":"  740","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":"  741","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":"  742","line":"                            const ArgMember&) const) {}"},
{"lineNum":"  743","line":""},
{"lineNum":"  744","line":"  template <class ArgMember>"},
{"lineNum":"  745","line":"  KOKKOS_INLINE_FUNCTION static VOIDTAG deduce_reduce_type("},
{"lineNum":"  746","line":"      tag_type,"},
{"lineNum":"  747","line":"      void (FunctorType::*)(const tag_type&, const ArgMember&, const ArgMember&,"},
{"lineNum":"  748","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":"  749","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":"  750","line":"                            const ArgMember&, const ArgMember&) const) {}"},
{"lineNum":"  751","line":""},
{"lineNum":"  752","line":"  //----------------------------------------"},
{"lineNum":"  753","line":"  // parallel_reduce operator without a tag:"},
{"lineNum":"  754","line":"  template <class ArgMember, class T>"},
{"lineNum":"  755","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":"  756","line":"      VOIDTAG, void (FunctorType::*)(ArgMember, T&) const) {}"},
{"lineNum":"  757","line":""},
{"lineNum":"  758","line":"  template <class ArgMember, class T>"},
{"lineNum":"  759","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":"  760","line":"      VOIDTAG, void (FunctorType::*)(ArgMember, ArgMember, T&) const) {}"},
{"lineNum":"  761","line":""},
{"lineNum":"  762","line":"  template <class ArgMember, class T>"},
{"lineNum":"  763","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":"  764","line":"      VOIDTAG,"},
{"lineNum":"  765","line":"      void (FunctorType::*)(ArgMember, ArgMember, ArgMember, T&) const) {}"},
{"lineNum":"  766","line":""},
{"lineNum":"  767","line":"  template <class ArgMember, class T>"},
{"lineNum":"  768","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":"  769","line":"      VOIDTAG, void (FunctorType::*)(ArgMember, ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  770","line":"                                     T&) const) {}"},
{"lineNum":"  771","line":""},
{"lineNum":"  772","line":"  template <class ArgMember, class T>"},
{"lineNum":"  773","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":"  774","line":"      VOIDTAG, void (FunctorType::*)(ArgMember, ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  775","line":"                                     ArgMember, T&) const) {}"},
{"lineNum":"  776","line":""},
{"lineNum":"  777","line":"  template <class ArgMember, class T>"},
{"lineNum":"  778","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":"  779","line":"      VOIDTAG, void (FunctorType::*)(ArgMember, ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  780","line":"                                     ArgMember, ArgMember, T&) const) {}"},
{"lineNum":"  781","line":""},
{"lineNum":"  782","line":"  template <class ArgMember, class T>"},
{"lineNum":"  783","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":"  784","line":"      VOIDTAG,"},
{"lineNum":"  785","line":"      void (FunctorType::*)(ArgMember, ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  786","line":"                            ArgMember, ArgMember, ArgMember, T&) const) {}"},
{"lineNum":"  787","line":""},
{"lineNum":"  788","line":"  template <class ArgMember, class T>"},
{"lineNum":"  789","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":"  790","line":"      VOIDTAG, void (FunctorType::*)(ArgMember, ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  791","line":"                                     ArgMember, ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  792","line":"                                     T&) const) {}"},
{"lineNum":"  793","line":""},
{"lineNum":"  794","line":"  template <class ArgMember, class T>"},
{"lineNum":"  795","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":"  796","line":"      VOIDTAG, void (FunctorType::*)(const ArgMember&, T&) const) {}"},
{"lineNum":"  797","line":""},
{"lineNum":"  798","line":"  template <class ArgMember, class T>"},
{"lineNum":"  799","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":"  800","line":"      VOIDTAG,"},
{"lineNum":"  801","line":"      void (FunctorType::*)(const ArgMember&, const ArgMember&, T&) const) {}"},
{"lineNum":"  802","line":""},
{"lineNum":"  803","line":"  template <class ArgMember, class T>"},
{"lineNum":"  804","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":"  805","line":"      VOIDTAG, void (FunctorType::*)(const ArgMember&, const ArgMember&,"},
{"lineNum":"  806","line":"                                     const ArgMember&, T&) const) {}"},
{"lineNum":"  807","line":""},
{"lineNum":"  808","line":"  template <class ArgMember, class T>"},
{"lineNum":"  809","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":"  810","line":"      VOIDTAG,"},
{"lineNum":"  811","line":"      void (FunctorType::*)(const ArgMember&, const ArgMember&,"},
{"lineNum":"  812","line":"                            const ArgMember&, const ArgMember&, T&) const) {}"},
{"lineNum":"  813","line":""},
{"lineNum":"  814","line":"  template <class ArgMember, class T>"},
{"lineNum":"  815","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":"  816","line":"      VOIDTAG, void (FunctorType::*)(const ArgMember&, const ArgMember&,"},
{"lineNum":"  817","line":"                                     const ArgMember&, const ArgMember&,"},
{"lineNum":"  818","line":"                                     const ArgMember&, T&) const) {}"},
{"lineNum":"  819","line":""},
{"lineNum":"  820","line":"  template <class ArgMember, class T>"},
{"lineNum":"  821","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":"  822","line":"      VOIDTAG,"},
{"lineNum":"  823","line":"      void (FunctorType::*)(const ArgMember&, const ArgMember&,"},
{"lineNum":"  824","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":"  825","line":"                            const ArgMember&, const ArgMember&, T&) const) {}"},
{"lineNum":"  826","line":""},
{"lineNum":"  827","line":"  template <class ArgMember, class T>"},
{"lineNum":"  828","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":"  829","line":"      VOIDTAG, void (FunctorType::*)(const ArgMember&, const ArgMember&,"},
{"lineNum":"  830","line":"                                     const ArgMember&, const ArgMember&,"},
{"lineNum":"  831","line":"                                     const ArgMember&, const ArgMember&,"},
{"lineNum":"  832","line":"                                     const ArgMember&, T&) const) {}"},
{"lineNum":"  833","line":""},
{"lineNum":"  834","line":"  template <class ArgMember, class T>"},
{"lineNum":"  835","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":"  836","line":"      VOIDTAG,"},
{"lineNum":"  837","line":"      void (FunctorType::*)(const ArgMember&, const ArgMember&,"},
{"lineNum":"  838","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":"  839","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":"  840","line":"                            const ArgMember&, const ArgMember&, T&) const) {}"},
{"lineNum":"  841","line":""},
{"lineNum":"  842","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":"  843","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  844","line":"      VOIDTAG, void (FunctorType::*)(TagType, ArgMember, T&) const) {}"},
{"lineNum":"  845","line":""},
{"lineNum":"  846","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":"  847","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  848","line":"      VOIDTAG, void (FunctorType::*)(TagType, ArgMember, ArgMember, T&) const) {"},
{"lineNum":"  849","line":"  }"},
{"lineNum":"  850","line":""},
{"lineNum":"  851","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":"  852","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  853","line":"      VOIDTAG, void (FunctorType::*)(TagType, ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  854","line":"                                     T&) const) {}"},
{"lineNum":"  855","line":""},
{"lineNum":"  856","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":"  857","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  858","line":"      VOIDTAG, void (FunctorType::*)(TagType, ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  859","line":"                                     ArgMember, T&) const) {}"},
{"lineNum":"  860","line":""},
{"lineNum":"  861","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":"  862","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  863","line":"      VOIDTAG, void (FunctorType::*)(TagType, ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  864","line":"                                     ArgMember, ArgMember, T&) const) {}"},
{"lineNum":"  865","line":""},
{"lineNum":"  866","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":"  867","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  868","line":"      VOIDTAG,"},
{"lineNum":"  869","line":"      void (FunctorType::*)(TagType, ArgMember, ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  870","line":"                            ArgMember, ArgMember, T&) const) {}"},
{"lineNum":"  871","line":""},
{"lineNum":"  872","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":"  873","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  874","line":"      VOIDTAG,"},
{"lineNum":"  875","line":"      void (FunctorType::*)(TagType, ArgMember, ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  876","line":"                            ArgMember, ArgMember, ArgMember, T&) const) {}"},
{"lineNum":"  877","line":""},
{"lineNum":"  878","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":"  879","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  880","line":"      VOIDTAG, void (FunctorType::*)(TagType, ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  881","line":"                                     ArgMember, ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  882","line":"                                     ArgMember, T&) const) {}"},
{"lineNum":"  883","line":""},
{"lineNum":"  884","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":"  885","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  886","line":"      VOIDTAG, void (FunctorType::*)(TagType, const ArgMember&, T&) const) {}"},
{"lineNum":"  887","line":""},
{"lineNum":"  888","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":"  889","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  890","line":"      VOIDTAG, void (FunctorType::*)(TagType, const ArgMember&,"},
{"lineNum":"  891","line":"                                     const ArgMember&, T&) const) {}"},
{"lineNum":"  892","line":""},
{"lineNum":"  893","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":"  894","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  895","line":"      VOIDTAG,"},
{"lineNum":"  896","line":"      void (FunctorType::*)(TagType, const ArgMember&, const ArgMember&,"},
{"lineNum":"  897","line":"                            const ArgMember&, T&) const) {}"},
{"lineNum":"  898","line":""},
{"lineNum":"  899","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":"  900","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  901","line":"      VOIDTAG,"},
{"lineNum":"  902","line":"      void (FunctorType::*)(TagType, const ArgMember&, const ArgMember&,"},
{"lineNum":"  903","line":"                            const ArgMember&, const ArgMember&, T&) const) {}"},
{"lineNum":"  904","line":""},
{"lineNum":"  905","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":"  906","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  907","line":"      VOIDTAG,"},
{"lineNum":"  908","line":"      void (FunctorType::*)(TagType, const ArgMember&, const ArgMember&,"},
{"lineNum":"  909","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":"  910","line":"                            const ArgMember&, T&) const) {}"},
{"lineNum":"  911","line":""},
{"lineNum":"  912","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":"  913","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  914","line":"      VOIDTAG,"},
{"lineNum":"  915","line":"      void (FunctorType::*)(TagType, const ArgMember&, const ArgMember&,"},
{"lineNum":"  916","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":"  917","line":"                            const ArgMember&, const ArgMember&, T&) const) {}"},
{"lineNum":"  918","line":""},
{"lineNum":"  919","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":"  920","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  921","line":"      VOIDTAG,"},
{"lineNum":"  922","line":"      void (FunctorType::*)(TagType, const ArgMember&, const ArgMember&,"},
{"lineNum":"  923","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":"  924","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":"  925","line":"                            const ArgMember&, T&) const) {}"},
{"lineNum":"  926","line":""},
{"lineNum":"  927","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":"  928","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  929","line":"      VOIDTAG,"},
{"lineNum":"  930","line":"      void (FunctorType::*)(TagType, const ArgMember&, const ArgMember&,"},
{"lineNum":"  931","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":"  932","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":"  933","line":"                            const ArgMember&, const ArgMember&, T&) const) {}"},
{"lineNum":"  934","line":""},
{"lineNum":"  935","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":"  936","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  937","line":"      VOIDTAG, void (FunctorType::*)(const TagType&, ArgMember, T&) const) {}"},
{"lineNum":"  938","line":""},
{"lineNum":"  939","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":"  940","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  941","line":"      VOIDTAG,"},
{"lineNum":"  942","line":"      void (FunctorType::*)(const TagType&, ArgMember, ArgMember, T&) const) {}"},
{"lineNum":"  943","line":""},
{"lineNum":"  944","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":"  945","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  946","line":"      VOIDTAG, void (FunctorType::*)(const TagType&, ArgMember, ArgMember,"},
{"lineNum":"  947","line":"                                     ArgMember, T&) const) {}"},
{"lineNum":"  948","line":""},
{"lineNum":"  949","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":"  950","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  951","line":"      VOIDTAG, void (FunctorType::*)(const TagType&, ArgMember, ArgMember,"},
{"lineNum":"  952","line":"                                     ArgMember, ArgMember, T&) const) {}"},
{"lineNum":"  953","line":""},
{"lineNum":"  954","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":"  955","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  956","line":"      VOIDTAG,"},
{"lineNum":"  957","line":"      void (FunctorType::*)(const TagType&, ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  958","line":"                            ArgMember, ArgMember, T&) const) {}"},
{"lineNum":"  959","line":""},
{"lineNum":"  960","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":"  961","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  962","line":"      VOIDTAG,"},
{"lineNum":"  963","line":"      void (FunctorType::*)(const TagType&, ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  964","line":"                            ArgMember, ArgMember, ArgMember, T&) const) {}"},
{"lineNum":"  965","line":""},
{"lineNum":"  966","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":"  967","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  968","line":"      VOIDTAG, void (FunctorType::*)(const TagType&, ArgMember, ArgMember,"},
{"lineNum":"  969","line":"                                     ArgMember, ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  970","line":"                                     ArgMember, T&) const) {}"},
{"lineNum":"  971","line":""},
{"lineNum":"  972","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":"  973","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  974","line":"      VOIDTAG, void (FunctorType::*)(const TagType&, ArgMember, ArgMember,"},
{"lineNum":"  975","line":"                                     ArgMember, ArgMember, ArgMember, ArgMember,"},
{"lineNum":"  976","line":"                                     ArgMember, ArgMember, T&) const) {}"},
{"lineNum":"  977","line":""},
{"lineNum":"  978","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":"  979","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  980","line":"      VOIDTAG,"},
{"lineNum":"  981","line":"      void (FunctorType::*)(const TagType&, const ArgMember&, T&) const) {}"},
{"lineNum":"  982","line":""},
{"lineNum":"  983","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":"  984","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  985","line":"      VOIDTAG, void (FunctorType::*)(const TagType&, const ArgMember&,"},
{"lineNum":"  986","line":"                                     const ArgMember&, T&) const) {}"},
{"lineNum":"  987","line":""},
{"lineNum":"  988","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":"  989","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  990","line":"      VOIDTAG,"},
{"lineNum":"  991","line":"      void (FunctorType::*)(const TagType&, const ArgMember&, const ArgMember&,"},
{"lineNum":"  992","line":"                            const ArgMember&, T&) const) {}"},
{"lineNum":"  993","line":""},
{"lineNum":"  994","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":"  995","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":"  996","line":"      VOIDTAG,"},
{"lineNum":"  997","line":"      void (FunctorType::*)(const TagType&, const ArgMember&, const ArgMember&,"},
{"lineNum":"  998","line":"                            const ArgMember&, const ArgMember&, T&) const) {}"},
{"lineNum":"  999","line":""},
{"lineNum":" 1000","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":" 1001","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":" 1002","line":"      VOIDTAG,"},
{"lineNum":" 1003","line":"      void (FunctorType::*)(const TagType&, const ArgMember&, const ArgMember&,"},
{"lineNum":" 1004","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":" 1005","line":"                            const ArgMember&, T&) const) {}"},
{"lineNum":" 1006","line":""},
{"lineNum":" 1007","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":" 1008","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":" 1009","line":"      VOIDTAG,"},
{"lineNum":" 1010","line":"      void (FunctorType::*)(const TagType&, const ArgMember&, const ArgMember&,"},
{"lineNum":" 1011","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":" 1012","line":"                            const ArgMember&, const ArgMember&, T&) const) {}"},
{"lineNum":" 1013","line":""},
{"lineNum":" 1014","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":" 1015","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":" 1016","line":"      VOIDTAG,"},
{"lineNum":" 1017","line":"      void (FunctorType::*)(const TagType&, const ArgMember&, const ArgMember&,"},
{"lineNum":" 1018","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":" 1019","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":" 1020","line":"                            const ArgMember&, T&) const) {}"},
{"lineNum":" 1021","line":""},
{"lineNum":" 1022","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":" 1023","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":" 1024","line":"      VOIDTAG,"},
{"lineNum":" 1025","line":"      void (FunctorType::*)(const TagType&, const ArgMember&, const ArgMember&,"},
{"lineNum":" 1026","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":" 1027","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":" 1028","line":"                            const ArgMember&, const ArgMember&, T&) const) {}"},
{"lineNum":" 1029","line":""},
{"lineNum":" 1030","line":"  //----------------------------------------"},
{"lineNum":" 1031","line":"  // parallel_reduce operator with a tag:"},
{"lineNum":" 1032","line":""},
{"lineNum":" 1033","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1034","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1035","line":"      tag_type, void (FunctorType::*)(tag_type, ArgMember, T&) const) {}"},
{"lineNum":" 1036","line":""},
{"lineNum":" 1037","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1038","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1039","line":"      tag_type,"},
{"lineNum":" 1040","line":"      void (FunctorType::*)(tag_type, ArgMember, ArgMember, T&) const) {}"},
{"lineNum":" 1041","line":""},
{"lineNum":" 1042","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1043","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1044","line":"      tag_type, void (FunctorType::*)(tag_type, ArgMember, ArgMember, ArgMember,"},
{"lineNum":" 1045","line":"                                      T&) const) {}"},
{"lineNum":" 1046","line":""},
{"lineNum":" 1047","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1048","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1049","line":"      tag_type, void (FunctorType::*)(tag_type, ArgMember, ArgMember, ArgMember,"},
{"lineNum":" 1050","line":"                                      ArgMember, T&) const) {}"},
{"lineNum":" 1051","line":""},
{"lineNum":" 1052","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1053","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1054","line":"      tag_type, void (FunctorType::*)(tag_type, ArgMember, ArgMember, ArgMember,"},
{"lineNum":" 1055","line":"                                      ArgMember, ArgMember, T&) const) {}"},
{"lineNum":" 1056","line":""},
{"lineNum":" 1057","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1058","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1059","line":"      tag_type,"},
{"lineNum":" 1060","line":"      void (FunctorType::*)(tag_type, ArgMember, ArgMember, ArgMember,"},
{"lineNum":" 1061","line":"                            ArgMember, ArgMember, ArgMember, T&) const) {}"},
{"lineNum":" 1062","line":""},
{"lineNum":" 1063","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1064","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1065","line":"      tag_type, void (FunctorType::*)(tag_type, ArgMember, ArgMember, ArgMember,"},
{"lineNum":" 1066","line":"                                      ArgMember, ArgMember, ArgMember,"},
{"lineNum":" 1067","line":"                                      ArgMember, T&) const) {}"},
{"lineNum":" 1068","line":""},
{"lineNum":" 1069","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1070","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1071","line":"      tag_type, void (FunctorType::*)(tag_type, ArgMember, ArgMember, ArgMember,"},
{"lineNum":" 1072","line":"                                      ArgMember, ArgMember, ArgMember,"},
{"lineNum":" 1073","line":"                                      ArgMember, ArgMember, T&) const) {}"},
{"lineNum":" 1074","line":""},
{"lineNum":" 1075","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1076","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1077","line":"      tag_type, void (FunctorType::*)(const tag_type&, ArgMember, T&) const) {}"},
{"lineNum":" 1078","line":""},
{"lineNum":" 1079","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1080","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1081","line":"      tag_type,"},
{"lineNum":" 1082","line":"      void (FunctorType::*)(const tag_type&, ArgMember, ArgMember, T&) const) {}"},
{"lineNum":" 1083","line":""},
{"lineNum":" 1084","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1085","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1086","line":"      tag_type, void (FunctorType::*)(const tag_type&, ArgMember, ArgMember,"},
{"lineNum":" 1087","line":"                                      ArgMember, T&) const) {}"},
{"lineNum":" 1088","line":""},
{"lineNum":" 1089","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1090","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1091","line":"      tag_type, void (FunctorType::*)(const tag_type&, ArgMember, ArgMember,"},
{"lineNum":" 1092","line":"                                      ArgMember, ArgMember, T&) const) {}"},
{"lineNum":" 1093","line":""},
{"lineNum":" 1094","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1095","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1096","line":"      tag_type,"},
{"lineNum":" 1097","line":"      void (FunctorType::*)(const tag_type&, ArgMember, ArgMember, ArgMember,"},
{"lineNum":" 1098","line":"                            ArgMember, ArgMember, T&) const) {}"},
{"lineNum":" 1099","line":""},
{"lineNum":" 1100","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1101","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1102","line":"      tag_type,"},
{"lineNum":" 1103","line":"      void (FunctorType::*)(const tag_type&, ArgMember, ArgMember, ArgMember,"},
{"lineNum":" 1104","line":"                            ArgMember, ArgMember, ArgMember, T&) const) {}"},
{"lineNum":" 1105","line":""},
{"lineNum":" 1106","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1107","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1108","line":"      tag_type, void (FunctorType::*)(const tag_type&, ArgMember, ArgMember,"},
{"lineNum":" 1109","line":"                                      ArgMember, ArgMember, ArgMember,"},
{"lineNum":" 1110","line":"                                      ArgMember, ArgMember, T&) const) {}"},
{"lineNum":" 1111","line":""},
{"lineNum":" 1112","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1113","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1114","line":"      tag_type,"},
{"lineNum":" 1115","line":"      void (FunctorType::*)(const tag_type&, ArgMember, ArgMember, ArgMember,"},
{"lineNum":" 1116","line":"                            ArgMember, ArgMember, ArgMember, ArgMember,"},
{"lineNum":" 1117","line":"                            ArgMember, T&) const) {}"},
{"lineNum":" 1118","line":""},
{"lineNum":" 1119","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1120","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1121","line":"      tag_type, void (FunctorType::*)(tag_type, const ArgMember&, T&) const) {}"},
{"lineNum":" 1122","line":""},
{"lineNum":" 1123","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1124","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1125","line":"      tag_type, void (FunctorType::*)(tag_type, const ArgMember&,"},
{"lineNum":" 1126","line":"                                      const ArgMember&, T&) const) {}"},
{"lineNum":" 1127","line":""},
{"lineNum":" 1128","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1129","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1130","line":"      tag_type,"},
{"lineNum":" 1131","line":"      void (FunctorType::*)(tag_type, const ArgMember&, const ArgMember&,"},
{"lineNum":" 1132","line":"                            const ArgMember&, T&) const) {}"},
{"lineNum":" 1133","line":""},
{"lineNum":" 1134","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1135","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1136","line":"      tag_type,"},
{"lineNum":" 1137","line":"      void (FunctorType::*)(tag_type, const ArgMember&, const ArgMember&,"},
{"lineNum":" 1138","line":"                            const ArgMember&, const ArgMember&, T&) const) {}"},
{"lineNum":" 1139","line":""},
{"lineNum":" 1140","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1141","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1142","line":"      tag_type,"},
{"lineNum":" 1143","line":"      void (FunctorType::*)(tag_type, const ArgMember&, const ArgMember&,"},
{"lineNum":" 1144","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":" 1145","line":"                            const ArgMember&, T&) const) {}"},
{"lineNum":" 1146","line":""},
{"lineNum":" 1147","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1148","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1149","line":"      tag_type,"},
{"lineNum":" 1150","line":"      void (FunctorType::*)(tag_type, const ArgMember&, const ArgMember&,"},
{"lineNum":" 1151","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":" 1152","line":"                            const ArgMember&, const ArgMember&, T&) const) {}"},
{"lineNum":" 1153","line":""},
{"lineNum":" 1154","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1155","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1156","line":"      tag_type,"},
{"lineNum":" 1157","line":"      void (FunctorType::*)(tag_type, const ArgMember&, const ArgMember&,"},
{"lineNum":" 1158","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":" 1159","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":" 1160","line":"                            const ArgMember&, T&) const) {}"},
{"lineNum":" 1161","line":""},
{"lineNum":" 1162","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1163","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1164","line":"      tag_type,"},
{"lineNum":" 1165","line":"      void (FunctorType::*)(tag_type, const ArgMember&, const ArgMember&,"},
{"lineNum":" 1166","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":" 1167","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":" 1168","line":"                            const ArgMember&, const ArgMember&, T&) const) {}"},
{"lineNum":" 1169","line":""},
{"lineNum":" 1170","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1171","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1172","line":"      tag_type,"},
{"lineNum":" 1173","line":"      void (FunctorType::*)(const tag_type&, const ArgMember&, T&) const) {}"},
{"lineNum":" 1174","line":""},
{"lineNum":" 1175","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1176","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1177","line":"      tag_type, void (FunctorType::*)(const tag_type&, const ArgMember&,"},
{"lineNum":" 1178","line":"                                      const ArgMember&, T&) const) {}"},
{"lineNum":" 1179","line":""},
{"lineNum":" 1180","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1181","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1182","line":"      tag_type,"},
{"lineNum":" 1183","line":"      void (FunctorType::*)(const tag_type&, const ArgMember&, const ArgMember&,"},
{"lineNum":" 1184","line":"                            const ArgMember&, T&) const) {}"},
{"lineNum":" 1185","line":""},
{"lineNum":" 1186","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1187","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1188","line":"      tag_type,"},
{"lineNum":" 1189","line":"      void (FunctorType::*)(const tag_type&, const ArgMember&, const ArgMember&,"},
{"lineNum":" 1190","line":"                            const ArgMember&, const ArgMember&, T&) const) {}"},
{"lineNum":" 1191","line":""},
{"lineNum":" 1192","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1193","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1194","line":"      tag_type,"},
{"lineNum":" 1195","line":"      void (FunctorType::*)(const tag_type&, const ArgMember&, const ArgMember&,"},
{"lineNum":" 1196","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":" 1197","line":"                            const ArgMember&, T&) const) {}"},
{"lineNum":" 1198","line":""},
{"lineNum":" 1199","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1200","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1201","line":"      tag_type,"},
{"lineNum":" 1202","line":"      void (FunctorType::*)(const tag_type&, const ArgMember&, const ArgMember&,"},
{"lineNum":" 1203","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":" 1204","line":"                            const ArgMember&, const ArgMember&, T&) const) {}"},
{"lineNum":" 1205","line":""},
{"lineNum":" 1206","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1207","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1208","line":"      tag_type,"},
{"lineNum":" 1209","line":"      void (FunctorType::*)(const tag_type&, const ArgMember&, const ArgMember&,"},
{"lineNum":" 1210","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":" 1211","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":" 1212","line":"                            const ArgMember&, T&) const) {}"},
{"lineNum":" 1213","line":""},
{"lineNum":" 1214","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1215","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1216","line":"      tag_type,"},
{"lineNum":" 1217","line":"      void (FunctorType::*)(const tag_type&, const ArgMember&, const ArgMember&,"},
{"lineNum":" 1218","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":" 1219","line":"                            const ArgMember&, const ArgMember&,"},
{"lineNum":" 1220","line":"                            const ArgMember&, const ArgMember&, T&) const) {}"},
{"lineNum":" 1221","line":""},
{"lineNum":" 1222","line":"  //----------------------------------------"},
{"lineNum":" 1223","line":"  // parallel_scan operator without a tag:"},
{"lineNum":" 1224","line":""},
{"lineNum":" 1225","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1226","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1227","line":"      VOIDTAG, void (FunctorType::*)(ArgMember, T&, bool) const) {}"},
{"lineNum":" 1228","line":""},
{"lineNum":" 1229","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1230","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1231","line":"      VOIDTAG, void (FunctorType::*)(const ArgMember&, T&, bool) const) {}"},
{"lineNum":" 1232","line":""},
{"lineNum":" 1233","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":" 1234","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":" 1235","line":"      VOIDTAG, void (FunctorType::*)(TagType, ArgMember, T&, bool) const) {}"},
{"lineNum":" 1236","line":""},
{"lineNum":" 1237","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":" 1238","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":" 1239","line":"      VOIDTAG,"},
{"lineNum":" 1240","line":"      void (FunctorType::*)(TagType, const ArgMember&, T&, bool) const) {}"},
{"lineNum":" 1241","line":""},
{"lineNum":" 1242","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":" 1243","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":" 1244","line":"      VOIDTAG,"},
{"lineNum":" 1245","line":"      void (FunctorType::*)(const TagType&, ArgMember, T&, bool) const) {}"},
{"lineNum":" 1246","line":""},
{"lineNum":" 1247","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":" 1248","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":" 1249","line":"      VOIDTAG, void (FunctorType::*)(const TagType&, const ArgMember&, T&, bool)"},
{"lineNum":" 1250","line":"                   const) {}"},
{"lineNum":" 1251","line":""},
{"lineNum":" 1252","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1253","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1254","line":"      VOIDTAG, void (FunctorType::*)(ArgMember, T&, const bool&) const) {}"},
{"lineNum":" 1255","line":""},
{"lineNum":" 1256","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1257","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1258","line":"      VOIDTAG, void (FunctorType::*)(const ArgMember&, T&, const bool&) const) {"},
{"lineNum":" 1259","line":"  }"},
{"lineNum":" 1260","line":""},
{"lineNum":" 1261","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":" 1262","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":" 1263","line":"      VOIDTAG,"},
{"lineNum":" 1264","line":"      void (FunctorType::*)(TagType, ArgMember, T&, const bool&) const) {}"},
{"lineNum":" 1265","line":""},
{"lineNum":" 1266","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":" 1267","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":" 1268","line":"      VOIDTAG, void (FunctorType::*)(TagType, const ArgMember&, T&, const bool&)"},
{"lineNum":" 1269","line":"                   const) {}"},
{"lineNum":" 1270","line":""},
{"lineNum":" 1271","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":" 1272","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":" 1273","line":"      VOIDTAG, void (FunctorType::*)(const TagType&, ArgMember, T&, const bool&)"},
{"lineNum":" 1274","line":"                   const) {}"},
{"lineNum":" 1275","line":""},
{"lineNum":" 1276","line":"  template <class TagType, class ArgMember, class T>"},
{"lineNum":" 1277","line":"  KOKKOS_INLINE_FUNCTION static REJECTTAG deduce_reduce_type("},
{"lineNum":" 1278","line":"      VOIDTAG, void (FunctorType::*)(const TagType&, const ArgMember&, T&,"},
{"lineNum":" 1279","line":"                                     const bool&) const) {}"},
{"lineNum":" 1280","line":"  //----------------------------------------"},
{"lineNum":" 1281","line":"  // parallel_scan operator with a tag:"},
{"lineNum":" 1282","line":""},
{"lineNum":" 1283","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1284","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1285","line":"      tag_type, void (FunctorType::*)(tag_type, ArgMember, T&, bool) const) {}"},
{"lineNum":" 1286","line":""},
{"lineNum":" 1287","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1288","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1289","line":"      tag_type,"},
{"lineNum":" 1290","line":"      void (FunctorType::*)(const tag_type&, ArgMember, T&, bool) const) {}"},
{"lineNum":" 1291","line":""},
{"lineNum":" 1292","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1293","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1294","line":"      tag_type,"},
{"lineNum":" 1295","line":"      void (FunctorType::*)(tag_type, const ArgMember&, T&, bool) const) {}"},
{"lineNum":" 1296","line":""},
{"lineNum":" 1297","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1298","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1299","line":"      tag_type, void (FunctorType::*)(const tag_type&, const ArgMember&, T&,"},
{"lineNum":" 1300","line":"                                      bool) const) {}"},
{"lineNum":" 1301","line":""},
{"lineNum":" 1302","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1303","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1304","line":"      tag_type,"},
{"lineNum":" 1305","line":"      void (FunctorType::*)(tag_type, ArgMember, T&, const bool&) const) {}"},
{"lineNum":" 1306","line":""},
{"lineNum":" 1307","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1308","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1309","line":"      tag_type, void (FunctorType::*)(const tag_type&, ArgMember, T&,"},
{"lineNum":" 1310","line":"                                      const bool&) const) {}"},
{"lineNum":" 1311","line":""},
{"lineNum":" 1312","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1313","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1314","line":"      tag_type, void (FunctorType::*)(tag_type, const ArgMember&, T&,"},
{"lineNum":" 1315","line":"                                      const bool&) const) {}"},
{"lineNum":" 1316","line":""},
{"lineNum":" 1317","line":"  template <class ArgMember, class T>"},
{"lineNum":" 1318","line":"  KOKKOS_INLINE_FUNCTION static T deduce_reduce_type("},
{"lineNum":" 1319","line":"      tag_type, void (FunctorType::*)(const tag_type&, const ArgMember&, T&,"},
{"lineNum":" 1320","line":"                                      const bool&) const) {}"},
{"lineNum":" 1321","line":"  //----------------------------------------"},
{"lineNum":" 1322","line":""},
{"lineNum":" 1323","line":"  using ValueType ="},
{"lineNum":" 1324","line":"      decltype(deduce_reduce_type(tag_type(), &FunctorType::operator()));"},
{"lineNum":" 1325","line":""},
{"lineNum":" 1326","line":"  enum { IS_VOID = std::is_same<VOIDTAG, ValueType>::value };"},
{"lineNum":" 1327","line":"  enum { IS_REJECT = std::is_same<REJECTTAG, ValueType>::value };"},
{"lineNum":" 1328","line":""},
{"lineNum":" 1329","line":" public:"},
{"lineNum":" 1330","line":"  using value_type = std::conditional_t<IS_VOID || IS_REJECT, void, ValueType>;"},
{"lineNum":" 1331","line":"  using pointer_type ="},
{"lineNum":" 1332","line":"      std::conditional_t<IS_VOID || IS_REJECT, void, ValueType*>;"},
{"lineNum":" 1333","line":"  using reference_type ="},
{"lineNum":" 1334","line":"      std::conditional_t<IS_VOID || IS_REJECT, void, ValueType&>;"},
{"lineNum":" 1335","line":"  using functor_type = FunctorType;"},
{"lineNum":" 1336","line":""},
{"lineNum":" 1337","line":"  static_assert("},
{"lineNum":" 1338","line":"      IS_VOID || IS_REJECT || 0 == (sizeof(ValueType) % sizeof(int)),"},
{"lineNum":" 1339","line":"      \"Reduction functor\'s value_type deduced from functor::operator() \""},
{"lineNum":" 1340","line":"      \"requires: 0 == sizeof(value_type) % sizeof(int)\");"},
{"lineNum":" 1341","line":""},
{"lineNum":" 1342","line":"  enum { StaticValueSize = IS_VOID || IS_REJECT ? 0 : sizeof(ValueType) };"},
{"lineNum":" 1343","line":""},
{"lineNum":" 1344","line":"  KOKKOS_FORCEINLINE_FUNCTION static unsigned value_size(const FunctorType&) {"},
{"lineNum":" 1345","line":"    return StaticValueSize;"},
{"lineNum":" 1346","line":"  }"},
{"lineNum":" 1347","line":""},
{"lineNum":" 1348","line":"  KOKKOS_FORCEINLINE_FUNCTION static unsigned value_count(const FunctorType&) {"},
{"lineNum":" 1349","line":"    return IS_VOID || IS_REJECT ? 0 : 1;"},
{"lineNum":" 1350","line":"  }"},
{"lineNum":" 1351","line":"};"},
{"lineNum":" 1352","line":""},
{"lineNum":" 1353","line":"}  // namespace Impl"},
{"lineNum":" 1354","line":"}  // namespace Kokkos"},
{"lineNum":" 1355","line":""},
{"lineNum":" 1356","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1357","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1358","line":""},
{"lineNum":" 1359","line":"namespace Kokkos {"},
{"lineNum":" 1360","line":"namespace Impl {"},
{"lineNum":" 1361","line":""},
{"lineNum":" 1362","line":"/** Function signatures for FunctorType::init function with a tag."},
{"lineNum":" 1363","line":" *  reference_type is \'value_type &\' for scalar and \'value_type *\' for array."},
{"lineNum":" 1364","line":" */"},
{"lineNum":" 1365","line":"template <class FunctorType, class ArgTag>"},
{"lineNum":" 1366","line":"struct FunctorValueInitFunction {"},
{"lineNum":" 1367","line":"  using reference_type ="},
{"lineNum":" 1368","line":"      typename FunctorValueTraits<FunctorType, ArgTag>::reference_type;"},
{"lineNum":" 1369","line":""},
{"lineNum":" 1370","line":"  KOKKOS_INLINE_FUNCTION static void enable_if("},
{"lineNum":" 1371","line":"      void (FunctorType::*)(ArgTag, reference_type) const);"},
{"lineNum":" 1372","line":"  KOKKOS_INLINE_FUNCTION static void enable_if("},
{"lineNum":" 1373","line":"      void (FunctorType::*)(ArgTag const&, reference_type) const);"},
{"lineNum":" 1374","line":"  KOKKOS_INLINE_FUNCTION static void enable_if(void (*)(ArgTag,"},
{"lineNum":" 1375","line":"                                                        reference_type));"},
{"lineNum":" 1376","line":"  KOKKOS_INLINE_FUNCTION static void enable_if(void (*)(ArgTag const&,"},
{"lineNum":" 1377","line":"                                                        reference_type));"},
{"lineNum":" 1378","line":"};"},
{"lineNum":" 1379","line":""},
{"lineNum":" 1380","line":"/** Function signatures for FunctorType::init function without a tag."},
{"lineNum":" 1381","line":" *  reference_type is \'value_type &\' for scalar and \'value_type *\' for array."},
{"lineNum":" 1382","line":" */"},
{"lineNum":" 1383","line":"template <class FunctorType>"},
{"lineNum":" 1384","line":"struct FunctorValueInitFunction<FunctorType, void> {"},
{"lineNum":" 1385","line":"  using reference_type ="},
{"lineNum":" 1386","line":"      typename FunctorValueTraits<FunctorType, void>::reference_type;"},
{"lineNum":" 1387","line":""},
{"lineNum":" 1388","line":"  KOKKOS_INLINE_FUNCTION static void enable_if("},
{"lineNum":" 1389","line":"      void (FunctorType::*)(reference_type) const);"},
{"lineNum":" 1390","line":"  KOKKOS_INLINE_FUNCTION static void enable_if(void (*)(reference_type));"},
{"lineNum":" 1391","line":"};"},
{"lineNum":" 1392","line":""},
{"lineNum":" 1393","line":"// Adapter for value initialization function."},
{"lineNum":" 1394","line":"// If a proper FunctorType::init is declared then use it,"},
{"lineNum":" 1395","line":"// otherwise use default constructor."},
{"lineNum":" 1396","line":"template <class FunctorType, class ArgTag,"},
{"lineNum":" 1397","line":"          class T = typename FunctorValueTraits<FunctorType, ArgTag>::"},
{"lineNum":" 1398","line":"              reference_type  // FIXME Fix FunctorValueTraits for multi-dim"},
{"lineNum":" 1399","line":"                              // operator"},
{"lineNum":" 1400","line":"          ,"},
{"lineNum":" 1401","line":"          class Enable = void>"},
{"lineNum":" 1402","line":"struct FunctorValueInit;"},
{"lineNum":" 1403","line":""},
{"lineNum":" 1404","line":"/* No \'init\' function provided for single value */"},
{"lineNum":" 1405","line":"template <class FunctorType, class ArgTag, class T, class Enable>"},
{"lineNum":" 1406","line":"struct FunctorValueInit<FunctorType, ArgTag, T&, Enable> {"},
{"lineNum":" 1407","line":"  KOKKOS_FORCEINLINE_FUNCTION static T& init(const FunctorType&, void* p) {"},
{"lineNum":" 1408","line":"    return *(new (p) T());","class":"lineNoCov","hits":"0","possible_hits":"17",},
{"lineNum":" 1409","line":"  };"},
{"lineNum":" 1410","line":"};"},
{"lineNum":" 1411","line":""},
{"lineNum":" 1412","line":"/* No \'init\' function provided for array value */"},
{"lineNum":" 1413","line":"template <class FunctorType, class ArgTag, class T, class Enable>"},
{"lineNum":" 1414","line":"struct FunctorValueInit<FunctorType, ArgTag, T*, Enable> {"},
{"lineNum":" 1415","line":"  KOKKOS_FORCEINLINE_FUNCTION static T* init(const FunctorType& f, void* p) {"},
{"lineNum":" 1416","line":"    const int n = FunctorValueTraits<FunctorType, ArgTag>::value_count(f);"},
{"lineNum":" 1417","line":"    for (int i = 0; i < n; ++i) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1418","line":"      new (((T*)p) + i) T();","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1419","line":"    }"},
{"lineNum":" 1420","line":"    return (T*)p;"},
{"lineNum":" 1421","line":"  }"},
{"lineNum":" 1422","line":"};"},
{"lineNum":" 1423","line":""},
{"lineNum":" 1424","line":"/* \'init\' function provided for single value */"},
{"lineNum":" 1425","line":"template <class FunctorType, class T>"},
{"lineNum":" 1426","line":"struct FunctorValueInit<"},
{"lineNum":" 1427","line":"    FunctorType, void,"},
{"lineNum":" 1428","line":"    T&"},
{"lineNum":" 1429","line":"    // First  substitution failure when FunctorType::init does not exist."},
{"lineNum":" 1430","line":"    // Second substitution failure when FunctorType::init is not compatible."},
{"lineNum":" 1431","line":"    ,"},
{"lineNum":" 1432","line":"    decltype(FunctorValueInitFunction<FunctorType, void>::enable_if("},
{"lineNum":" 1433","line":"        &FunctorType::init))> {"},
{"lineNum":" 1434","line":"  KOKKOS_FORCEINLINE_FUNCTION static T& init(const FunctorType& f, void* p) {"},
{"lineNum":" 1435","line":"    f.init(*((T*)p));"},
{"lineNum":" 1436","line":"    return *((T*)p);"},
{"lineNum":" 1437","line":"  }"},
{"lineNum":" 1438","line":"};"},
{"lineNum":" 1439","line":""},
{"lineNum":" 1440","line":"/* \'init\' function provided for array value */"},
{"lineNum":" 1441","line":"template <class FunctorType, class T>"},
{"lineNum":" 1442","line":"struct FunctorValueInit<"},
{"lineNum":" 1443","line":"    FunctorType, void,"},
{"lineNum":" 1444","line":"    T*"},
{"lineNum":" 1445","line":"    // First  substitution failure when FunctorType::init does not exist."},
{"lineNum":" 1446","line":"    // Second substitution failure when FunctorType::init is not compatible"},
{"lineNum":" 1447","line":"    ,"},
{"lineNum":" 1448","line":"    decltype(FunctorValueInitFunction<FunctorType, void>::enable_if("},
{"lineNum":" 1449","line":"        &FunctorType::init))> {"},
{"lineNum":" 1450","line":"  KOKKOS_FORCEINLINE_FUNCTION static T* init(const FunctorType& f, void* p) {"},
{"lineNum":" 1451","line":"    f.init((T*)p);"},
{"lineNum":" 1452","line":"    return (T*)p;"},
{"lineNum":" 1453","line":"  }"},
{"lineNum":" 1454","line":"};"},
{"lineNum":" 1455","line":""},
{"lineNum":" 1456","line":"/* \'init\' function provided for single value */"},
{"lineNum":" 1457","line":"template <class FunctorType, class ArgTag, class T>"},
{"lineNum":" 1458","line":"struct FunctorValueInit<"},
{"lineNum":" 1459","line":"    FunctorType, ArgTag,"},
{"lineNum":" 1460","line":"    T&"},
{"lineNum":" 1461","line":"    // First  substitution failure when FunctorType::init does not exist."},
{"lineNum":" 1462","line":"    // Second substitution failure when FunctorType::init is not compatible."},
{"lineNum":" 1463","line":"    ,"},
{"lineNum":" 1464","line":"    typename std::enable_if<"},
{"lineNum":" 1465","line":"        !std::is_same<ArgTag, void>::value,"},
{"lineNum":" 1466","line":"        decltype(FunctorValueInitFunction<FunctorType, ArgTag>::enable_if("},
{"lineNum":" 1467","line":"            &FunctorType::init))>::type> {"},
{"lineNum":" 1468","line":"  KOKKOS_FORCEINLINE_FUNCTION static T& init(const FunctorType& f, void* p) {"},
{"lineNum":" 1469","line":"    f.init(ArgTag(), *((T*)p));"},
{"lineNum":" 1470","line":"    return *((T*)p);"},
{"lineNum":" 1471","line":"  }"},
{"lineNum":" 1472","line":"};"},
{"lineNum":" 1473","line":""},
{"lineNum":" 1474","line":"/* \'init\' function provided for array value */"},
{"lineNum":" 1475","line":"template <class FunctorType, class ArgTag, class T>"},
{"lineNum":" 1476","line":"struct FunctorValueInit<"},
{"lineNum":" 1477","line":"    FunctorType, ArgTag,"},
{"lineNum":" 1478","line":"    T*"},
{"lineNum":" 1479","line":"    // First  substitution failure when FunctorType::init does not exist."},
{"lineNum":" 1480","line":"    // Second substitution failure when FunctorType::init is not compatible"},
{"lineNum":" 1481","line":"    ,"},
{"lineNum":" 1482","line":"    typename std::enable_if<"},
{"lineNum":" 1483","line":"        !std::is_same<ArgTag, void>::value,"},
{"lineNum":" 1484","line":"        decltype(FunctorValueInitFunction<FunctorType, ArgTag>::enable_if("},
{"lineNum":" 1485","line":"            &FunctorType::init))>::type> {"},
{"lineNum":" 1486","line":"  KOKKOS_FORCEINLINE_FUNCTION static T* init(const FunctorType& f, void* p) {"},
{"lineNum":" 1487","line":"    f.init(ArgTag(), (T*)p);"},
{"lineNum":" 1488","line":"    return (T*)p;"},
{"lineNum":" 1489","line":"  }"},
{"lineNum":" 1490","line":"};"},
{"lineNum":" 1491","line":""},
{"lineNum":" 1492","line":"}  // namespace Impl"},
{"lineNum":" 1493","line":"}  // namespace Kokkos"},
{"lineNum":" 1494","line":""},
{"lineNum":" 1495","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1496","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1497","line":""},
{"lineNum":" 1498","line":"namespace Kokkos {"},
{"lineNum":" 1499","line":"namespace Impl {"},
{"lineNum":" 1500","line":""},
{"lineNum":" 1501","line":"// Signatures for compatible FunctorType::join with tag and not an array"},
{"lineNum":" 1502","line":"template <class FunctorType, class ArgTag,"},
{"lineNum":" 1503","line":"          bool IsArray ="},
{"lineNum":" 1504","line":"              0 == FunctorValueTraits<FunctorType, ArgTag>::StaticValueSize>"},
{"lineNum":" 1505","line":"struct FunctorValueJoinFunction {"},
{"lineNum":" 1506","line":"  using value_type ="},
{"lineNum":" 1507","line":"      typename FunctorValueTraits<FunctorType, ArgTag>::value_type;"},
{"lineNum":" 1508","line":""},
{"lineNum":" 1509","line":"  using vref_type  = volatile value_type&;"},
{"lineNum":" 1510","line":"  using cvref_type = const volatile value_type&;"},
{"lineNum":" 1511","line":""},
{"lineNum":" 1512","line":"  KOKKOS_INLINE_FUNCTION static void enable_if("},
{"lineNum":" 1513","line":"      void (FunctorType::*)(ArgTag, vref_type, cvref_type) const);"},
{"lineNum":" 1514","line":"  KOKKOS_INLINE_FUNCTION static void enable_if("},
{"lineNum":" 1515","line":"      void (FunctorType::*)(ArgTag const&, vref_type, cvref_type) const);"},
{"lineNum":" 1516","line":"  KOKKOS_INLINE_FUNCTION static void enable_if(void (*)(ArgTag, vref_type,"},
{"lineNum":" 1517","line":"                                                        cvref_type));"},
{"lineNum":" 1518","line":"  KOKKOS_INLINE_FUNCTION static void enable_if(void (*)(ArgTag const&,"},
{"lineNum":" 1519","line":"                                                        vref_type, cvref_type));"},
{"lineNum":" 1520","line":"};"},
{"lineNum":" 1521","line":""},
{"lineNum":" 1522","line":"// Signatures for compatible FunctorType::join with tag and is an array"},
{"lineNum":" 1523","line":"template <class FunctorType, class ArgTag>"},
{"lineNum":" 1524","line":"struct FunctorValueJoinFunction<FunctorType, ArgTag, true> {"},
{"lineNum":" 1525","line":"  using value_type ="},
{"lineNum":" 1526","line":"      typename FunctorValueTraits<FunctorType, ArgTag>::value_type;"},
{"lineNum":" 1527","line":""},
{"lineNum":" 1528","line":"  using vptr_type  = volatile value_type*;"},
{"lineNum":" 1529","line":"  using cvptr_type = const volatile value_type*;"},
{"lineNum":" 1530","line":""},
{"lineNum":" 1531","line":"  KOKKOS_INLINE_FUNCTION static void enable_if("},
{"lineNum":" 1532","line":"      void (FunctorType::*)(ArgTag, vptr_type, cvptr_type) const);"},
{"lineNum":" 1533","line":"  KOKKOS_INLINE_FUNCTION static void enable_if("},
{"lineNum":" 1534","line":"      void (FunctorType::*)(ArgTag const&, vptr_type, cvptr_type) const);"},
{"lineNum":" 1535","line":"  KOKKOS_INLINE_FUNCTION static void enable_if(void (*)(ArgTag, vptr_type,"},
{"lineNum":" 1536","line":"                                                        cvptr_type));"},
{"lineNum":" 1537","line":"  KOKKOS_INLINE_FUNCTION static void enable_if(void (*)(ArgTag const&,"},
{"lineNum":" 1538","line":"                                                        vptr_type, cvptr_type));"},
{"lineNum":" 1539","line":"};"},
{"lineNum":" 1540","line":""},
{"lineNum":" 1541","line":"// Signatures for compatible FunctorType::join without tag and not an array"},
{"lineNum":" 1542","line":"template <class FunctorType>"},
{"lineNum":" 1543","line":"struct FunctorValueJoinFunction<FunctorType, void, false> {"},
{"lineNum":" 1544","line":"  using value_type = typename FunctorValueTraits<FunctorType, void>::value_type;"},
{"lineNum":" 1545","line":""},
{"lineNum":" 1546","line":"  using vref_type  = volatile value_type&;"},
{"lineNum":" 1547","line":"  using cvref_type = const volatile value_type&;"},
{"lineNum":" 1548","line":""},
{"lineNum":" 1549","line":"  KOKKOS_INLINE_FUNCTION static void enable_if(void (FunctorType::*)(vref_type,"},
{"lineNum":" 1550","line":"                                                                     cvref_type)"},
{"lineNum":" 1551","line":"                                                   const);"},
{"lineNum":" 1552","line":"  KOKKOS_INLINE_FUNCTION static void enable_if(void (*)(vref_type, cvref_type));"},
{"lineNum":" 1553","line":"};"},
{"lineNum":" 1554","line":""},
{"lineNum":" 1555","line":"// Signatures for compatible FunctorType::join without tag and is an array"},
{"lineNum":" 1556","line":"template <class FunctorType>"},
{"lineNum":" 1557","line":"struct FunctorValueJoinFunction<FunctorType, void, true> {"},
{"lineNum":" 1558","line":"  using value_type = typename FunctorValueTraits<FunctorType, void>::value_type;"},
{"lineNum":" 1559","line":""},
{"lineNum":" 1560","line":"  using vptr_type  = volatile value_type*;"},
{"lineNum":" 1561","line":"  using cvptr_type = const volatile value_type*;"},
{"lineNum":" 1562","line":""},
{"lineNum":" 1563","line":"  KOKKOS_INLINE_FUNCTION static void enable_if(void (FunctorType::*)(vptr_type,"},
{"lineNum":" 1564","line":"                                                                     cvptr_type)"},
{"lineNum":" 1565","line":"                                                   const);"},
{"lineNum":" 1566","line":"  KOKKOS_INLINE_FUNCTION static void enable_if(void (*)(vptr_type, cvptr_type));"},
{"lineNum":" 1567","line":"};"},
{"lineNum":" 1568","line":""},
{"lineNum":" 1569","line":"template <class FunctorType, class ArgTag,"},
{"lineNum":" 1570","line":"          class T ="},
{"lineNum":" 1571","line":"              typename FunctorValueTraits<FunctorType, ArgTag>::reference_type,"},
{"lineNum":" 1572","line":"          class Enable = void>"},
{"lineNum":" 1573","line":"struct FunctorValueJoin;"},
{"lineNum":" 1574","line":""},
{"lineNum":" 1575","line":"/* No \'join\' function provided, single value */"},
{"lineNum":" 1576","line":"template <class FunctorType, class ArgTag, class T, class Enable>"},
{"lineNum":" 1577","line":"struct FunctorValueJoin<FunctorType, ArgTag, T&, Enable> {"},
{"lineNum":" 1578","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":" 1579","line":"  FunctorValueJoin(const FunctorType&) {}"},
{"lineNum":" 1580","line":""},
{"lineNum":" 1581","line":"  KOKKOS_FORCEINLINE_FUNCTION static void join(const FunctorType& /*f*/,"},
{"lineNum":" 1582","line":"                                               volatile void* const lhs,"},
{"lineNum":" 1583","line":"                                               const volatile void* const rhs) {"},
{"lineNum":" 1584","line":"    *((volatile T*)lhs) += *((const volatile T*)rhs);","class":"lineNoCov","hits":"0","possible_hits":"24",},
{"lineNum":" 1585","line":"  }"},
{"lineNum":" 1586","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":" 1587","line":"  void operator()(volatile T& lhs, const volatile T& rhs) const { lhs += rhs; }"},
{"lineNum":" 1588","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":" 1589","line":"  void operator()(T& lhs, const T& rhs) const { lhs += rhs; }"},
{"lineNum":" 1590","line":"};"},
{"lineNum":" 1591","line":""},
{"lineNum":" 1592","line":"/* No \'join\' function provided, array of values */"},
{"lineNum":" 1593","line":"template <class FunctorType, class ArgTag, class T, class Enable>"},
{"lineNum":" 1594","line":"struct FunctorValueJoin<FunctorType, ArgTag, T*, Enable> {"},
{"lineNum":" 1595","line":"  const FunctorType& f;"},
{"lineNum":" 1596","line":""},
{"lineNum":" 1597","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":" 1598","line":"  FunctorValueJoin(const FunctorType& f_) : f(f_) {}"},
{"lineNum":" 1599","line":""},
{"lineNum":" 1600","line":"  KOKKOS_FORCEINLINE_FUNCTION static void join(const FunctorType& f_,"},
{"lineNum":" 1601","line":"                                               volatile void* const lhs,"},
{"lineNum":" 1602","line":"                                               const volatile void* const rhs) {"},
{"lineNum":" 1603","line":"    const int n = FunctorValueTraits<FunctorType, ArgTag>::value_count(f_);"},
{"lineNum":" 1604","line":""},
{"lineNum":" 1605","line":"    for (int i = 0; i < n; ++i) {","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1606","line":"      ((volatile T*)lhs)[i] += ((const volatile T*)rhs)[i];","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1607","line":"    }"},
{"lineNum":" 1608","line":"  }"},
{"lineNum":" 1609","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":" 1610","line":"  void operator()(volatile T* const lhs, const volatile T* const rhs) const {"},
{"lineNum":" 1611","line":"    const int n = FunctorValueTraits<FunctorType, ArgTag>::value_count(f);"},
{"lineNum":" 1612","line":""},
{"lineNum":" 1613","line":"    for (int i = 0; i < n; ++i) {"},
{"lineNum":" 1614","line":"      lhs[i] += rhs[i];"},
{"lineNum":" 1615","line":"    }"},
{"lineNum":" 1616","line":"  }"},
{"lineNum":" 1617","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":" 1618","line":"  void operator()(T* lhs, const T* rhs) const {"},
{"lineNum":" 1619","line":"    const int n = FunctorValueTraits<FunctorType, ArgTag>::value_count(f);"},
{"lineNum":" 1620","line":""},
{"lineNum":" 1621","line":"    for (int i = 0; i < n; ++i) {"},
{"lineNum":" 1622","line":"      lhs[i] += rhs[i];"},
{"lineNum":" 1623","line":"    }"},
{"lineNum":" 1624","line":"  }"},
{"lineNum":" 1625","line":"};"},
{"lineNum":" 1626","line":""},
{"lineNum":" 1627","line":"/* \'join\' function provided, single value */"},
{"lineNum":" 1628","line":"template <class FunctorType, class ArgTag, class T>"},
{"lineNum":" 1629","line":"struct FunctorValueJoin<"},
{"lineNum":" 1630","line":"    FunctorType, ArgTag,"},
{"lineNum":" 1631","line":"    T&"},
{"lineNum":" 1632","line":"    // First  substitution failure when FunctorType::join does not exist."},
{"lineNum":" 1633","line":"    // Second substitution failure when enable_if( & Functor::join ) does not"},
{"lineNum":" 1634","line":"    // exist"},
{"lineNum":" 1635","line":"    ,"},
{"lineNum":" 1636","line":"    decltype(FunctorValueJoinFunction<FunctorType, ArgTag>::enable_if("},
{"lineNum":" 1637","line":"        &FunctorType::join))> {"},
{"lineNum":" 1638","line":"  const FunctorType& f;"},
{"lineNum":" 1639","line":""},
{"lineNum":" 1640","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":" 1641","line":"  FunctorValueJoin(const FunctorType& f_) : f(f_) {}"},
{"lineNum":" 1642","line":""},
{"lineNum":" 1643","line":"  KOKKOS_FORCEINLINE_FUNCTION static void join(const FunctorType& f_,"},
{"lineNum":" 1644","line":"                                               volatile void* const lhs,"},
{"lineNum":" 1645","line":"                                               const volatile void* const rhs) {"},
{"lineNum":" 1646","line":"    f_.join(ArgTag(), *((volatile T*)lhs), *((const volatile T*)rhs));"},
{"lineNum":" 1647","line":"  }"},
{"lineNum":" 1648","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":" 1649","line":"  void operator()(volatile T& lhs, const volatile T& rhs) const {"},
{"lineNum":" 1650","line":"    f.join(ArgTag(), lhs, rhs);"},
{"lineNum":" 1651","line":"  }"},
{"lineNum":" 1652","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":" 1653","line":"  void operator()(T& lhs, const T& rhs) const { f.join(ArgTag(), lhs, rhs); }"},
{"lineNum":" 1654","line":"};"},
{"lineNum":" 1655","line":""},
{"lineNum":" 1656","line":"/* \'join\' function provided, no tag, single value */"},
{"lineNum":" 1657","line":"template <class FunctorType, class T>"},
{"lineNum":" 1658","line":"struct FunctorValueJoin<"},
{"lineNum":" 1659","line":"    FunctorType, void,"},
{"lineNum":" 1660","line":"    T&"},
{"lineNum":" 1661","line":"    // First  substitution failure when FunctorType::join does not exist."},
{"lineNum":" 1662","line":"    // Second substitution failure when enable_if( & Functor::join ) does not"},
{"lineNum":" 1663","line":"    // exist"},
{"lineNum":" 1664","line":"    ,"},
{"lineNum":" 1665","line":"    decltype(FunctorValueJoinFunction<FunctorType, void>::enable_if("},
{"lineNum":" 1666","line":"        &FunctorType::join))> {"},
{"lineNum":" 1667","line":"  const FunctorType& f;"},
{"lineNum":" 1668","line":""},
{"lineNum":" 1669","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":" 1670","line":"  FunctorValueJoin(const FunctorType& f_) : f(f_) {}"},
{"lineNum":" 1671","line":""},
{"lineNum":" 1672","line":"  KOKKOS_FORCEINLINE_FUNCTION static void join(const FunctorType& f_,"},
{"lineNum":" 1673","line":"                                               volatile void* const lhs,"},
{"lineNum":" 1674","line":"                                               const volatile void* const rhs) {"},
{"lineNum":" 1675","line":"    f_.join(*((volatile T*)lhs), *((const volatile T*)rhs));"},
{"lineNum":" 1676","line":"  }"},
{"lineNum":" 1677","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":" 1678","line":"  void operator()(volatile T& lhs, const volatile T& rhs) const {"},
{"lineNum":" 1679","line":"    f.join(lhs, rhs);"},
{"lineNum":" 1680","line":"  }"},
{"lineNum":" 1681","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":" 1682","line":"  void operator()(T& lhs, const T& rhs) const { f.join(lhs, rhs); }"},
{"lineNum":" 1683","line":"};"},
{"lineNum":" 1684","line":""},
{"lineNum":" 1685","line":"/* \'join\' function provided for array value */"},
{"lineNum":" 1686","line":"template <class FunctorType, class ArgTag, class T>"},
{"lineNum":" 1687","line":"struct FunctorValueJoin<"},
{"lineNum":" 1688","line":"    FunctorType, ArgTag,"},
{"lineNum":" 1689","line":"    T*"},
{"lineNum":" 1690","line":"    // First  substitution failure when FunctorType::join does not exist."},
{"lineNum":" 1691","line":"    // Second substitution failure when enable_if( & Functor::join ) does not"},
{"lineNum":" 1692","line":"    // exist"},
{"lineNum":" 1693","line":"    ,"},
{"lineNum":" 1694","line":"    decltype(FunctorValueJoinFunction<FunctorType, ArgTag>::enable_if("},
{"lineNum":" 1695","line":"        &FunctorType::join))> {"},
{"lineNum":" 1696","line":"  const FunctorType& f;"},
{"lineNum":" 1697","line":""},
{"lineNum":" 1698","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":" 1699","line":"  FunctorValueJoin(const FunctorType& f_) : f(f_) {}"},
{"lineNum":" 1700","line":""},
{"lineNum":" 1701","line":"  KOKKOS_FORCEINLINE_FUNCTION static void join(const FunctorType& f_,"},
{"lineNum":" 1702","line":"                                               volatile void* const lhs,"},
{"lineNum":" 1703","line":"                                               const volatile void* const rhs) {"},
{"lineNum":" 1704","line":"    f_.join(ArgTag(), (volatile T*)lhs, (const volatile T*)rhs);"},
{"lineNum":" 1705","line":"  }"},
{"lineNum":" 1706","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":" 1707","line":"  void operator()(volatile T* const lhs, const volatile T* const rhs) const {"},
{"lineNum":" 1708","line":"    f.join(ArgTag(), lhs, rhs);"},
{"lineNum":" 1709","line":"  }"},
{"lineNum":" 1710","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":" 1711","line":"  void operator()(T* lhs, const T* rhs) const { f.join(ArgTag(), lhs, rhs); }"},
{"lineNum":" 1712","line":"};"},
{"lineNum":" 1713","line":""},
{"lineNum":" 1714","line":"/* \'join\' function provided, no tag, array value */"},
{"lineNum":" 1715","line":"template <class FunctorType, class T>"},
{"lineNum":" 1716","line":"struct FunctorValueJoin<"},
{"lineNum":" 1717","line":"    FunctorType, void,"},
{"lineNum":" 1718","line":"    T*"},
{"lineNum":" 1719","line":"    // First  substitution failure when FunctorType::join does not exist."},
{"lineNum":" 1720","line":"    // Second substitution failure when enable_if( & Functor::join ) does not"},
{"lineNum":" 1721","line":"    // exist"},
{"lineNum":" 1722","line":"    ,"},
{"lineNum":" 1723","line":"    decltype(FunctorValueJoinFunction<FunctorType, void>::enable_if("},
{"lineNum":" 1724","line":"        &FunctorType::join))> {"},
{"lineNum":" 1725","line":"  const FunctorType& f;"},
{"lineNum":" 1726","line":""},
{"lineNum":" 1727","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":" 1728","line":"  FunctorValueJoin(const FunctorType& f_) : f(f_) {}"},
{"lineNum":" 1729","line":""},
{"lineNum":" 1730","line":"  KOKKOS_FORCEINLINE_FUNCTION static void join(const FunctorType& f_,"},
{"lineNum":" 1731","line":"                                               volatile void* const lhs,"},
{"lineNum":" 1732","line":"                                               const volatile void* const rhs) {"},
{"lineNum":" 1733","line":"    f_.join((volatile T*)lhs, (const volatile T*)rhs);"},
{"lineNum":" 1734","line":"  }"},
{"lineNum":" 1735","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":" 1736","line":"  void operator()(volatile T* const lhs, const volatile T* const rhs) const {"},
{"lineNum":" 1737","line":"    f.join(lhs, rhs);"},
{"lineNum":" 1738","line":"  }"},
{"lineNum":" 1739","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":" 1740","line":"  void operator()(T* lhs, const T* rhs) const { f.join(lhs, rhs); }"},
{"lineNum":" 1741","line":"};"},
{"lineNum":" 1742","line":""},
{"lineNum":" 1743","line":"}  // namespace Impl"},
{"lineNum":" 1744","line":"}  // namespace Kokkos"},
{"lineNum":" 1745","line":""},
{"lineNum":" 1746","line":"namespace Kokkos {"},
{"lineNum":" 1747","line":""},
{"lineNum":" 1748","line":"namespace Impl {"},
{"lineNum":" 1749","line":""},
{"lineNum":" 1750","line":"template <typename ValueType, class JoinOp, class Enable = void>"},
{"lineNum":" 1751","line":"struct JoinLambdaAdapter {"},
{"lineNum":" 1752","line":"  using value_type = ValueType;"},
{"lineNum":" 1753","line":"  const JoinOp& lambda;"},
{"lineNum":" 1754","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1755","line":"  JoinLambdaAdapter(const JoinOp& lambda_) : lambda(lambda_) {}"},
{"lineNum":" 1756","line":""},
{"lineNum":" 1757","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1758","line":"  void join(volatile value_type& dst, const volatile value_type& src) const {"},
{"lineNum":" 1759","line":"    lambda(dst, src);"},
{"lineNum":" 1760","line":"  }"},
{"lineNum":" 1761","line":""},
{"lineNum":" 1762","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1763","line":"  void join(value_type& dst, const value_type& src) const { lambda(dst, src); }"},
{"lineNum":" 1764","line":""},
{"lineNum":" 1765","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1766","line":"  void operator()(volatile value_type& dst,"},
{"lineNum":" 1767","line":"                  const volatile value_type& src) const {"},
{"lineNum":" 1768","line":"    lambda(dst, src);"},
{"lineNum":" 1769","line":"  }"},
{"lineNum":" 1770","line":""},
{"lineNum":" 1771","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1772","line":"  void operator()(value_type& dst, const value_type& src) const {"},
{"lineNum":" 1773","line":"    lambda(dst, src);"},
{"lineNum":" 1774","line":"  }"},
{"lineNum":" 1775","line":"};"},
{"lineNum":" 1776","line":""},
{"lineNum":" 1777","line":"template <typename ValueType, class JoinOp>"},
{"lineNum":" 1778","line":"struct JoinLambdaAdapter<ValueType, JoinOp,"},
{"lineNum":" 1779","line":"                         decltype(FunctorValueJoinFunction<"},
{"lineNum":" 1780","line":"                                  JoinOp, void>::enable_if(&JoinOp::join))> {"},
{"lineNum":" 1781","line":"  using value_type = ValueType;"},
{"lineNum":" 1782","line":"  static_assert("},
{"lineNum":" 1783","line":"      std::is_same<ValueType, typename JoinOp::value_type>::value,"},
{"lineNum":" 1784","line":"      \"JoinLambdaAdapter static_assert Fail: ValueType != JoinOp::value_type\");"},
{"lineNum":" 1785","line":""},
{"lineNum":" 1786","line":"  const JoinOp& lambda;"},
{"lineNum":" 1787","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1788","line":"  JoinLambdaAdapter(const JoinOp& lambda_) : lambda(lambda_) {}"},
{"lineNum":" 1789","line":""},
{"lineNum":" 1790","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1791","line":"  void join(volatile value_type& dst, const volatile value_type& src) const {"},
{"lineNum":" 1792","line":"    lambda.join(dst, src);"},
{"lineNum":" 1793","line":"  }"},
{"lineNum":" 1794","line":""},
{"lineNum":" 1795","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1796","line":"  void join(value_type& dst, const value_type& src) const {"},
{"lineNum":" 1797","line":"    lambda.join(dst, src);"},
{"lineNum":" 1798","line":"  }"},
{"lineNum":" 1799","line":""},
{"lineNum":" 1800","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1801","line":"  void operator()(volatile value_type& dst,"},
{"lineNum":" 1802","line":"                  const volatile value_type& src) const {"},
{"lineNum":" 1803","line":"    lambda.join(dst, src);"},
{"lineNum":" 1804","line":"  }"},
{"lineNum":" 1805","line":""},
{"lineNum":" 1806","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1807","line":"  void operator()(value_type& dst, const value_type& src) const {"},
{"lineNum":" 1808","line":"    lambda.join(dst, src);"},
{"lineNum":" 1809","line":"  }"},
{"lineNum":" 1810","line":"};"},
{"lineNum":" 1811","line":""},
{"lineNum":" 1812","line":"template <typename ValueType>"},
{"lineNum":" 1813","line":"struct JoinAdd {"},
{"lineNum":" 1814","line":"  using value_type = ValueType;"},
{"lineNum":" 1815","line":""},
{"lineNum":" 1816","line":"  KOKKOS_DEFAULTED_FUNCTION"},
{"lineNum":" 1817","line":"  JoinAdd() = default;"},
{"lineNum":" 1818","line":""},
{"lineNum":" 1819","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1820","line":"  void join(volatile value_type& dst, const volatile value_type& src) const {"},
{"lineNum":" 1821","line":"    dst += src;"},
{"lineNum":" 1822","line":"  }"},
{"lineNum":" 1823","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1824","line":"  void operator()(value_type& dst, const value_type& src) const { dst += src; }"},
{"lineNum":" 1825","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1826","line":"  void operator()(volatile value_type& dst,"},
{"lineNum":" 1827","line":"                  const volatile value_type& src) const {"},
{"lineNum":" 1828","line":"    dst += src;"},
{"lineNum":" 1829","line":"  }"},
{"lineNum":" 1830","line":"};"},
{"lineNum":" 1831","line":""},
{"lineNum":" 1832","line":"}  // namespace Impl"},
{"lineNum":" 1833","line":"}  // namespace Kokkos"},
{"lineNum":" 1834","line":""},
{"lineNum":" 1835","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1836","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1837","line":""},
{"lineNum":" 1838","line":"namespace Kokkos {"},
{"lineNum":" 1839","line":"namespace Impl {"},
{"lineNum":" 1840","line":""},
{"lineNum":" 1841","line":"template <class FunctorType, class ArgTag,"},
{"lineNum":" 1842","line":"          class T ="},
{"lineNum":" 1843","line":"              typename FunctorValueTraits<FunctorType, ArgTag>::reference_type>"},
{"lineNum":" 1844","line":"struct FunctorValueOps;"},
{"lineNum":" 1845","line":""},
{"lineNum":" 1846","line":"template <class FunctorType, class ArgTag, class T>"},
{"lineNum":" 1847","line":"struct FunctorValueOps<FunctorType, ArgTag, T&> {"},
{"lineNum":" 1848","line":"  KOKKOS_FORCEINLINE_FUNCTION static T* pointer(T& r) { return &r; }"},
{"lineNum":" 1849","line":""},
{"lineNum":" 1850","line":"  KOKKOS_FORCEINLINE_FUNCTION static T& reference(void* p) { return *((T*)p); }"},
{"lineNum":" 1851","line":""},
{"lineNum":" 1852","line":"  KOKKOS_FORCEINLINE_FUNCTION static void copy(const FunctorType&,"},
{"lineNum":" 1853","line":"                                               void* const lhs,"},
{"lineNum":" 1854","line":"                                               const void* const rhs) {"},
{"lineNum":" 1855","line":"    *((T*)lhs) = *((const T*)rhs);"},
{"lineNum":" 1856","line":"  }"},
{"lineNum":" 1857","line":"};"},
{"lineNum":" 1858","line":""},
{"lineNum":" 1859","line":"/* No \'join\' function provided, array of values */"},
{"lineNum":" 1860","line":"template <class FunctorType, class ArgTag, class T>"},
{"lineNum":" 1861","line":"struct FunctorValueOps<FunctorType, ArgTag, T*> {"},
{"lineNum":" 1862","line":"  KOKKOS_FORCEINLINE_FUNCTION static T* pointer(T* p) { return p; }"},
{"lineNum":" 1863","line":""},
{"lineNum":" 1864","line":"  KOKKOS_FORCEINLINE_FUNCTION static T* reference(void* p) { return ((T*)p); }"},
{"lineNum":" 1865","line":""},
{"lineNum":" 1866","line":"  KOKKOS_FORCEINLINE_FUNCTION static void copy(const FunctorType& f,"},
{"lineNum":" 1867","line":"                                               void* const lhs,"},
{"lineNum":" 1868","line":"                                               const void* const rhs) {"},
{"lineNum":" 1869","line":"    const int n = FunctorValueTraits<FunctorType, ArgTag>::value_count(f);"},
{"lineNum":" 1870","line":"    for (int i = 0; i < n; ++i) {"},
{"lineNum":" 1871","line":"      ((T*)lhs)[i] = ((const T*)rhs)[i];"},
{"lineNum":" 1872","line":"    }"},
{"lineNum":" 1873","line":"  }"},
{"lineNum":" 1874","line":"};"},
{"lineNum":" 1875","line":""},
{"lineNum":" 1876","line":"}  // namespace Impl"},
{"lineNum":" 1877","line":"}  // namespace Kokkos"},
{"lineNum":" 1878","line":""},
{"lineNum":" 1879","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1880","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1881","line":""},
{"lineNum":" 1882","line":"namespace Kokkos {"},
{"lineNum":" 1883","line":"namespace Impl {"},
{"lineNum":" 1884","line":""},
{"lineNum":" 1885","line":"// Compatible functions for \'final\' function and value_type not an array"},
{"lineNum":" 1886","line":"template <class FunctorType, class ArgTag,"},
{"lineNum":" 1887","line":"          bool IsArray ="},
{"lineNum":" 1888","line":"              0 == FunctorValueTraits<FunctorType, ArgTag>::StaticValueSize>"},
{"lineNum":" 1889","line":"struct FunctorFinalFunction {"},
{"lineNum":" 1890","line":"  using value_type ="},
{"lineNum":" 1891","line":"      typename FunctorValueTraits<FunctorType, ArgTag>::value_type;"},
{"lineNum":" 1892","line":""},
{"lineNum":" 1893","line":"  KOKKOS_INLINE_FUNCTION static void enable_if("},
{"lineNum":" 1894","line":"      void (FunctorType::*)(ArgTag, value_type&) const);"},
{"lineNum":" 1895","line":"  KOKKOS_INLINE_FUNCTION static void enable_if("},
{"lineNum":" 1896","line":"      void (FunctorType::*)(ArgTag const&, value_type&) const);"},
{"lineNum":" 1897","line":"  KOKKOS_INLINE_FUNCTION static void enable_if("},
{"lineNum":" 1898","line":"      void (FunctorType::*)(ArgTag, value_type&));"},
{"lineNum":" 1899","line":"  KOKKOS_INLINE_FUNCTION static void enable_if("},
{"lineNum":" 1900","line":"      void (FunctorType::*)(ArgTag const&, value_type&));"},
{"lineNum":" 1901","line":"  KOKKOS_INLINE_FUNCTION static void enable_if(void (*)(ArgTag, value_type&));"},
{"lineNum":" 1902","line":"  KOKKOS_INLINE_FUNCTION static void enable_if(void (*)(ArgTag const&,"},
{"lineNum":" 1903","line":"                                                        value_type&));"},
{"lineNum":" 1904","line":""},
{"lineNum":" 1905","line":"  // KOKKOS_INLINE_FUNCTION static void enable_if( void (FunctorType::*)( ArgTag"},
{"lineNum":" 1906","line":"  // , value_type volatile & ) const ); KOKKOS_INLINE_FUNCTION static void"},
{"lineNum":" 1907","line":"  // enable_if( void (FunctorType::*)( ArgTag const & , value_type volatile & )"},
{"lineNum":" 1908","line":"  // const ); KOKKOS_INLINE_FUNCTION static void enable_if( void"},
{"lineNum":" 1909","line":"  // (FunctorType::*)( ArgTag         , value_type volatile & ) );"},
{"lineNum":" 1910","line":"  // KOKKOS_INLINE_FUNCTION static void enable_if( void (FunctorType::*)( ArgTag"},
{"lineNum":" 1911","line":"  // const & , value_type volatile & ) ); KOKKOS_INLINE_FUNCTION static void"},
{"lineNum":" 1912","line":"  // enable_if( void (             *)( ArgTag         , value_type volatile & )"},
{"lineNum":" 1913","line":"  // ); KOKKOS_INLINE_FUNCTION static void enable_if( void (             *)("},
{"lineNum":" 1914","line":"  // ArgTag const & , value_type volatile & ) );"},
{"lineNum":" 1915","line":""},
{"lineNum":" 1916","line":"  KOKKOS_INLINE_FUNCTION static void enable_if("},
{"lineNum":" 1917","line":"      void (FunctorType::*)(ArgTag, value_type const&) const);"},
{"lineNum":" 1918","line":"  KOKKOS_INLINE_FUNCTION static void enable_if("},
{"lineNum":" 1919","line":"      void (FunctorType::*)(ArgTag const&, value_type const&) const);"},
{"lineNum":" 1920","line":"  KOKKOS_INLINE_FUNCTION static void enable_if("},
{"lineNum":" 1921","line":"      void (FunctorType::*)(ArgTag, value_type const&));"},
{"lineNum":" 1922","line":"  KOKKOS_INLINE_FUNCTION static void enable_if("},
{"lineNum":" 1923","line":"      void (FunctorType::*)(ArgTag const&, value_type const&));"},
{"lineNum":" 1924","line":"  KOKKOS_INLINE_FUNCTION static void enable_if(void (*)(ArgTag,"},
{"lineNum":" 1925","line":"                                                        value_type const&));"},
{"lineNum":" 1926","line":"  KOKKOS_INLINE_FUNCTION static void enable_if(void (*)(ArgTag const&,"},
{"lineNum":" 1927","line":"                                                        value_type const&));"},
{"lineNum":" 1928","line":""},
{"lineNum":" 1929","line":"  // KOKKOS_INLINE_FUNCTION static void enable_if( void (FunctorType::*)( ArgTag"},
{"lineNum":" 1930","line":"  // , value_type const volatile & ) const ); KOKKOS_INLINE_FUNCTION static void"},
{"lineNum":" 1931","line":"  // enable_if( void (FunctorType::*)( ArgTag const & , value_type const"},
{"lineNum":" 1932","line":"  // volatile & ) const ); KOKKOS_INLINE_FUNCTION static void enable_if( void"},
{"lineNum":" 1933","line":"  // (FunctorType::*)( ArgTag         , value_type const volatile & ) );"},
{"lineNum":" 1934","line":"  // KOKKOS_INLINE_FUNCTION static void enable_if( void (FunctorType::*)( ArgTag"},
{"lineNum":" 1935","line":"  // const & , value_type const volatile & ) ); KOKKOS_INLINE_FUNCTION static"},
{"lineNum":" 1936","line":"  // void enable_if( void (             *)( ArgTag         , value_type const"},
{"lineNum":" 1937","line":"  // volatile & ) ); KOKKOS_INLINE_FUNCTION static void enable_if( void ( *)("},
{"lineNum":" 1938","line":"  // ArgTag const & , value_type const volatile & ) );"},
{"lineNum":" 1939","line":"};"},
{"lineNum":" 1940","line":""},
{"lineNum":" 1941","line":"// Compatible functions for \'final\' function and value_type is an array"},
{"lineNum":" 1942","line":"template <class FunctorType, class ArgTag>"},
{"lineNum":" 1943","line":"struct FunctorFinalFunction<FunctorType, ArgTag, true> {"},
{"lineNum":" 1944","line":"  using value_type ="},
{"lineNum":" 1945","line":"      typename FunctorValueTraits<FunctorType, ArgTag>::value_type;"},
{"lineNum":" 1946","line":""},
{"lineNum":" 1947","line":"  KOKKOS_INLINE_FUNCTION static void enable_if("},
{"lineNum":" 1948","line":"      void (FunctorType::*)(ArgTag, value_type*) const);"},
{"lineNum":" 1949","line":"  KOKKOS_INLINE_FUNCTION static void enable_if("},
{"lineNum":" 1950","line":"      void (FunctorType::*)(ArgTag const&, value_type*) const);"},
{"lineNum":" 1951","line":"  KOKKOS_INLINE_FUNCTION static void enable_if("},
{"lineNum":" 1952","line":"      void (FunctorType::*)(ArgTag, value_type*));"},
{"lineNum":" 1953","line":"  KOKKOS_INLINE_FUNCTION static void enable_if("},
{"lineNum":" 1954","line":"      void (FunctorType::*)(ArgTag const&, value_type*));"},
{"lineNum":" 1955","line":"  KOKKOS_INLINE_FUNCTION static void enable_if(void (*)(ArgTag, value_type*));"},
{"lineNum":" 1956","line":"  KOKKOS_INLINE_FUNCTION static void enable_if(void (*)(ArgTag const&,"},
{"lineNum":" 1957","line":"                                                        value_type*));"},
{"lineNum":" 1958","line":""},
{"lineNum":" 1959","line":"  // KOKKOS_INLINE_FUNCTION static void enable_if( void (FunctorType::*)( ArgTag"},
{"lineNum":" 1960","line":"  // , value_type volatile * ) const ); KOKKOS_INLINE_FUNCTION static void"},
{"lineNum":" 1961","line":"  // enable_if( void (FunctorType::*)( ArgTag const & , value_type volatile * )"},
{"lineNum":" 1962","line":"  // const ); KOKKOS_INLINE_FUNCTION static void enable_if( void"},
{"lineNum":" 1963","line":"  // (FunctorType::*)( ArgTag         , value_type volatile * ) );"},
{"lineNum":" 1964","line":"  // KOKKOS_INLINE_FUNCTION static void enable_if( void (FunctorType::*)( ArgTag"},
{"lineNum":" 1965","line":"  // const & , value_type volatile * ) ); KOKKOS_INLINE_FUNCTION static void"},
{"lineNum":" 1966","line":"  // enable_if( void (             *)( ArgTag         , value_type volatile * )"},
{"lineNum":" 1967","line":"  // ); KOKKOS_INLINE_FUNCTION static void enable_if( void (             *)("},
{"lineNum":" 1968","line":"  // ArgTag const & , value_type volatile * ) );"},
{"lineNum":" 1969","line":""},
{"lineNum":" 1970","line":"  KOKKOS_INLINE_FUNCTION static void enable_if("},
{"lineNum":" 1971","line":"      void (FunctorType::*)(ArgTag, value_type const*) const);"},
{"lineNum":" 1972","line":"  KOKKOS_INLINE_FUNCTION static void enable_if("},
{"lineNum":" 1973","line":"      void (FunctorType::*)(ArgTag const&, value_type const*) const);"},
{"lineNum":" 1974","line":"  KOKKOS_INLINE_FUNCTION static void enable_if("},
{"lineNum":" 1975","line":"      void (FunctorType::*)(ArgTag, value_type const*));"},
{"lineNum":" 1976","line":"  KOKKOS_INLINE_FUNCTION static void enable_if("},
{"lineNum":" 1977","line":"      void (FunctorType::*)(ArgTag const&, value_type const*));"},
{"lineNum":" 1978","line":"  KOKKOS_INLINE_FUNCTION static void enable_if(void (*)(ArgTag,"},
{"lineNum":" 1979","line":"                                                        value_type const*));"},
{"lineNum":" 1980","line":"  KOKKOS_INLINE_FUNCTION static void enable_if(void (*)(ArgTag const&,"},
{"lineNum":" 1981","line":"                                                        value_type const*));"},
{"lineNum":" 1982","line":""},
{"lineNum":" 1983","line":"  // KOKKOS_INLINE_FUNCTION static void enable_if( void (FunctorType::*)( ArgTag"},
{"lineNum":" 1984","line":"  // , value_type const volatile * ) const ); KOKKOS_INLINE_FUNCTION static void"},
{"lineNum":" 1985","line":"  // enable_if( void (FunctorType::*)( ArgTag const & , value_type const"},
{"lineNum":" 1986","line":"  // volatile * ) const ); KOKKOS_INLINE_FUNCTION static void enable_if( void"},
{"lineNum":" 1987","line":"  // (FunctorType::*)( ArgTag         , value_type const volatile * ) );"},
{"lineNum":" 1988","line":"  // KOKKOS_INLINE_FUNCTION static void enable_if( void (FunctorType::*)( ArgTag"},
{"lineNum":" 1989","line":"  // const & , value_type const volatile * ) ); KOKKOS_INLINE_FUNCTION static"},
{"lineNum":" 1990","line":"  // void enable_if( void (             *)( ArgTag         , value_type const"},
{"lineNum":" 1991","line":"  // volatile * ) ); KOKKOS_INLINE_FUNCTION static void enable_if( void ( *)("},
{"lineNum":" 1992","line":"  // ArgTag const & , value_type const volatile * ) );"},
{"lineNum":" 1993","line":"};"},
{"lineNum":" 1994","line":""},
{"lineNum":" 1995","line":"template <class FunctorType>"},
{"lineNum":" 1996","line":"struct FunctorFinalFunction<FunctorType, void, false> {"},
{"lineNum":" 1997","line":"  using value_type = typename FunctorValueTraits<FunctorType, void>::value_type;"},
{"lineNum":" 1998","line":""},
{"lineNum":" 1999","line":"  KOKKOS_INLINE_FUNCTION static void enable_if("},
{"lineNum":" 2000","line":"      void (FunctorType::*)(value_type&) const);"},
{"lineNum":" 2001","line":"  KOKKOS_INLINE_FUNCTION static void enable_if("},
{"lineNum":" 2002","line":"      void (FunctorType::*)(value_type&));"},
{"lineNum":" 2003","line":"  KOKKOS_INLINE_FUNCTION static void enable_if(void (*)(value_type&));"},
{"lineNum":" 2004","line":""},
{"lineNum":" 2005","line":"  KOKKOS_INLINE_FUNCTION static void enable_if("},
{"lineNum":" 2006","line":"      void (FunctorType::*)(const value_type&) const);"},
{"lineNum":" 2007","line":"  KOKKOS_INLINE_FUNCTION static void enable_if("},
{"lineNum":" 2008","line":"      void (FunctorType::*)(const value_type&));"},
{"lineNum":" 2009","line":"  KOKKOS_INLINE_FUNCTION static void enable_if(void (*)(const value_type&));"},
{"lineNum":" 2010","line":"};"},
{"lineNum":" 2011","line":""},
{"lineNum":" 2012","line":"template <class FunctorType>"},
{"lineNum":" 2013","line":"struct FunctorFinalFunction<FunctorType, void, true> {"},
{"lineNum":" 2014","line":"  using value_type = typename FunctorValueTraits<FunctorType, void>::value_type;"},
{"lineNum":" 2015","line":""},
{"lineNum":" 2016","line":"  KOKKOS_INLINE_FUNCTION static void enable_if("},
{"lineNum":" 2017","line":"      void (FunctorType::*)(value_type*) const);"},
{"lineNum":" 2018","line":"  KOKKOS_INLINE_FUNCTION static void enable_if("},
{"lineNum":" 2019","line":"      void (FunctorType::*)(value_type*));"},
{"lineNum":" 2020","line":"  KOKKOS_INLINE_FUNCTION static void enable_if(void (*)(value_type*));"},
{"lineNum":" 2021","line":""},
{"lineNum":" 2022","line":"  KOKKOS_INLINE_FUNCTION static void enable_if("},
{"lineNum":" 2023","line":"      void (FunctorType::*)(const value_type*) const);"},
{"lineNum":" 2024","line":"  KOKKOS_INLINE_FUNCTION static void enable_if("},
{"lineNum":" 2025","line":"      void (FunctorType::*)(const value_type*));"},
{"lineNum":" 2026","line":"  KOKKOS_INLINE_FUNCTION static void enable_if(void (*)(const value_type*));"},
{"lineNum":" 2027","line":"};"},
{"lineNum":" 2028","line":""},
{"lineNum":" 2029","line":"/* No \'final\' function provided */"},
{"lineNum":" 2030","line":"template <class FunctorType, class ArgTag,"},
{"lineNum":" 2031","line":"          class ResultType ="},
{"lineNum":" 2032","line":"              typename FunctorValueTraits<FunctorType, ArgTag>::reference_type,"},
{"lineNum":" 2033","line":"          class Enable = void>"},
{"lineNum":" 2034","line":"struct FunctorFinal {"},
{"lineNum":" 2035","line":"  KOKKOS_FORCEINLINE_FUNCTION static void final(const FunctorType&, void*) {}"},
{"lineNum":" 2036","line":"};"},
{"lineNum":" 2037","line":""},
{"lineNum":" 2038","line":"/* \'final\' function provided for single value but no tag*/"},
{"lineNum":" 2039","line":"template <class FunctorType, class ArgTag, class T>"},
{"lineNum":" 2040","line":"struct FunctorFinal<"},
{"lineNum":" 2041","line":"    FunctorType, ArgTag,"},
{"lineNum":" 2042","line":"    T&"},
{"lineNum":" 2043","line":"    // First  substitution failure when FunctorType::final does not exist."},
{"lineNum":" 2044","line":"    // Second substitution failure when FunctorType::final is not compatible."},
{"lineNum":" 2045","line":"    ,"},
{"lineNum":" 2046","line":"    typename std::enable_if<"},
{"lineNum":" 2047","line":"        std::is_same<ArgTag, void>::value,"},
{"lineNum":" 2048","line":"        decltype(FunctorFinalFunction<FunctorType, ArgTag>::enable_if("},
{"lineNum":" 2049","line":"            &FunctorType::final))>::type> {"},
{"lineNum":" 2050","line":"  KOKKOS_FORCEINLINE_FUNCTION static void final(const FunctorType& f, void* p) {"},
{"lineNum":" 2051","line":"    f.final(*((T*)p));"},
{"lineNum":" 2052","line":"  }"},
{"lineNum":" 2053","line":"};"},
{"lineNum":" 2054","line":""},
{"lineNum":" 2055","line":"/* \'final\' function provided for array value but no tag*/"},
{"lineNum":" 2056","line":"template <class FunctorType, class ArgTag, class T>"},
{"lineNum":" 2057","line":"struct FunctorFinal<"},
{"lineNum":" 2058","line":"    FunctorType, ArgTag,"},
{"lineNum":" 2059","line":"    T*"},
{"lineNum":" 2060","line":"    // First  substitution failure when FunctorType::final does not exist."},
{"lineNum":" 2061","line":"    // Second substitution failure when FunctorType::final is not compatible."},
{"lineNum":" 2062","line":"    ,"},
{"lineNum":" 2063","line":"    typename std::enable_if<"},
{"lineNum":" 2064","line":"        std::is_same<ArgTag, void>::value,"},
{"lineNum":" 2065","line":"        decltype(FunctorFinalFunction<FunctorType, ArgTag>::enable_if("},
{"lineNum":" 2066","line":"            &FunctorType::final))>::type> {"},
{"lineNum":" 2067","line":"  KOKKOS_FORCEINLINE_FUNCTION static void final(const FunctorType& f, void* p) {"},
{"lineNum":" 2068","line":"    f.final((T*)p);"},
{"lineNum":" 2069","line":"  }"},
{"lineNum":" 2070","line":"};"},
{"lineNum":" 2071","line":""},
{"lineNum":" 2072","line":"/* \'final\' function provided for single value and with tag */"},
{"lineNum":" 2073","line":"template <class FunctorType, class ArgTag, class T>"},
{"lineNum":" 2074","line":"struct FunctorFinal<"},
{"lineNum":" 2075","line":"    FunctorType, ArgTag,"},
{"lineNum":" 2076","line":"    T&"},
{"lineNum":" 2077","line":"    // First  substitution failure when FunctorType::final does not exist."},
{"lineNum":" 2078","line":"    // Second substitution failure when FunctorType::final is not compatible."},
{"lineNum":" 2079","line":"    ,"},
{"lineNum":" 2080","line":"    typename std::enable_if<"},
{"lineNum":" 2081","line":"        !std::is_same<ArgTag, void>::value,"},
{"lineNum":" 2082","line":"        decltype(FunctorFinalFunction<FunctorType, ArgTag>::enable_if("},
{"lineNum":" 2083","line":"            &FunctorType::final))>::type> {"},
{"lineNum":" 2084","line":"  KOKKOS_FORCEINLINE_FUNCTION static void final(const FunctorType& f, void* p) {"},
{"lineNum":" 2085","line":"    f.final(ArgTag(), *((T*)p));"},
{"lineNum":" 2086","line":"  }"},
{"lineNum":" 2087","line":"};"},
{"lineNum":" 2088","line":""},
{"lineNum":" 2089","line":"/* \'final\' function provided for array value and with tag */"},
{"lineNum":" 2090","line":"template <class FunctorType, class ArgTag, class T>"},
{"lineNum":" 2091","line":"struct FunctorFinal<"},
{"lineNum":" 2092","line":"    FunctorType, ArgTag,"},
{"lineNum":" 2093","line":"    T*"},
{"lineNum":" 2094","line":"    // First  substitution failure when FunctorType::final does not exist."},
{"lineNum":" 2095","line":"    // Second substitution failure when FunctorType::final is not compatible."},
{"lineNum":" 2096","line":"    ,"},
{"lineNum":" 2097","line":"    typename std::enable_if<"},
{"lineNum":" 2098","line":"        !std::is_same<ArgTag, void>::value,"},
{"lineNum":" 2099","line":"        decltype(FunctorFinalFunction<FunctorType, ArgTag>::enable_if("},
{"lineNum":" 2100","line":"            &FunctorType::final))>::type> {"},
{"lineNum":" 2101","line":"  KOKKOS_FORCEINLINE_FUNCTION static void final(const FunctorType& f, void* p) {"},
{"lineNum":" 2102","line":"    f.final(ArgTag(), (T*)p);"},
{"lineNum":" 2103","line":"  }"},
{"lineNum":" 2104","line":"};"},
{"lineNum":" 2105","line":""},
{"lineNum":" 2106","line":"}  // namespace Impl"},
{"lineNum":" 2107","line":"}  // namespace Kokkos"},
{"lineNum":" 2108","line":""},
{"lineNum":" 2109","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 2110","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 2111","line":""},
{"lineNum":" 2112","line":"namespace Kokkos {"},
{"lineNum":" 2113","line":"namespace Impl {"},
{"lineNum":" 2114","line":""},
{"lineNum":" 2115","line":"template <class FunctorType, class ArgTag,"},
{"lineNum":" 2116","line":"          class ReferenceType ="},
{"lineNum":" 2117","line":"              typename FunctorValueTraits<FunctorType, ArgTag>::reference_type>"},
{"lineNum":" 2118","line":"struct FunctorApplyFunction {"},
{"lineNum":" 2119","line":"  KOKKOS_INLINE_FUNCTION static void enable_if("},
{"lineNum":" 2120","line":"      void (FunctorType::*)(ArgTag, ReferenceType) const);"},
{"lineNum":" 2121","line":"  KOKKOS_INLINE_FUNCTION static void enable_if("},
{"lineNum":" 2122","line":"      void (FunctorType::*)(ArgTag const&, ReferenceType) const);"},
{"lineNum":" 2123","line":"  KOKKOS_INLINE_FUNCTION static void enable_if("},
{"lineNum":" 2124","line":"      void (FunctorType::*)(ArgTag, ReferenceType));"},
{"lineNum":" 2125","line":"  KOKKOS_INLINE_FUNCTION static void enable_if("},
{"lineNum":" 2126","line":"      void (FunctorType::*)(ArgTag const&, ReferenceType));"},
{"lineNum":" 2127","line":"  KOKKOS_INLINE_FUNCTION static void enable_if(void (*)(ArgTag, ReferenceType));"},
{"lineNum":" 2128","line":"  KOKKOS_INLINE_FUNCTION static void enable_if(void (*)(ArgTag const&,"},
{"lineNum":" 2129","line":"                                                        ReferenceType));"},
{"lineNum":" 2130","line":"};"},
{"lineNum":" 2131","line":""},
{"lineNum":" 2132","line":"template <class FunctorType, class ReferenceType>"},
{"lineNum":" 2133","line":"struct FunctorApplyFunction<FunctorType, void, ReferenceType> {"},
{"lineNum":" 2134","line":"  KOKKOS_INLINE_FUNCTION static void enable_if("},
{"lineNum":" 2135","line":"      void (FunctorType::*)(ReferenceType) const);"},
{"lineNum":" 2136","line":"  KOKKOS_INLINE_FUNCTION static void enable_if("},
{"lineNum":" 2137","line":"      void (FunctorType::*)(ReferenceType));"},
{"lineNum":" 2138","line":"  KOKKOS_INLINE_FUNCTION static void enable_if(void (*)(ReferenceType));"},
{"lineNum":" 2139","line":"};"},
{"lineNum":" 2140","line":""},
{"lineNum":" 2141","line":"template <class FunctorType>"},
{"lineNum":" 2142","line":"struct FunctorApplyFunction<FunctorType, void, void> {"},
{"lineNum":" 2143","line":"  KOKKOS_INLINE_FUNCTION static void enable_if(void (FunctorType::*)() const);"},
{"lineNum":" 2144","line":"  KOKKOS_INLINE_FUNCTION static void enable_if(void (FunctorType::*)());"},
{"lineNum":" 2145","line":"};"},
{"lineNum":" 2146","line":""},
{"lineNum":" 2147","line":"template <class FunctorType, class ArgTag, class ReferenceType,"},
{"lineNum":" 2148","line":"          class Enable = void>"},
{"lineNum":" 2149","line":"struct FunctorApply {"},
{"lineNum":" 2150","line":"  KOKKOS_FORCEINLINE_FUNCTION static void apply(const FunctorType&, void*) {}"},
{"lineNum":" 2151","line":"};"},
{"lineNum":" 2152","line":""},
{"lineNum":" 2153","line":"/* \'apply\' function provided for void value */"},
{"lineNum":" 2154","line":"template <class FunctorType, class ArgTag>"},
{"lineNum":" 2155","line":"struct FunctorApply<"},
{"lineNum":" 2156","line":"    FunctorType, ArgTag,"},
{"lineNum":" 2157","line":"    void"},
{"lineNum":" 2158","line":"    // First  substitution failure when FunctorType::apply does not exist."},
{"lineNum":" 2159","line":"    // Second substitution failure when enable_if( & Functor::apply ) does not"},
{"lineNum":" 2160","line":"    // exist"},
{"lineNum":" 2161","line":"    ,"},
{"lineNum":" 2162","line":"    decltype(FunctorApplyFunction<FunctorType, ArgTag, void>::enable_if("},
{"lineNum":" 2163","line":"        &FunctorType::apply))> {"},
{"lineNum":" 2164","line":"  KOKKOS_FORCEINLINE_FUNCTION static void apply(FunctorType& f) { f.apply(); }"},
{"lineNum":" 2165","line":""},
{"lineNum":" 2166","line":"  KOKKOS_FORCEINLINE_FUNCTION static void apply(const FunctorType& f) {"},
{"lineNum":" 2167","line":"    f.apply();"},
{"lineNum":" 2168","line":"  }"},
{"lineNum":" 2169","line":"};"},
{"lineNum":" 2170","line":""},
{"lineNum":" 2171","line":"/* \'apply\' function provided for single value */"},
{"lineNum":" 2172","line":"template <class FunctorType, class ArgTag, class T>"},
{"lineNum":" 2173","line":"struct FunctorApply<FunctorType, ArgTag,"},
{"lineNum":" 2174","line":"                    T&"},
{"lineNum":" 2175","line":"                    // First  substitution failure when FunctorType::apply does"},
{"lineNum":" 2176","line":"                    // not exist. Second substitution failure when enable_if( &"},
{"lineNum":" 2177","line":"                    // Functor::apply ) does not exist"},
{"lineNum":" 2178","line":"                    ,"},
{"lineNum":" 2179","line":"                    decltype("},
{"lineNum":" 2180","line":"                        FunctorApplyFunction<FunctorType, ArgTag>::enable_if("},
{"lineNum":" 2181","line":"                            &FunctorType::apply))> {"},
{"lineNum":" 2182","line":"  KOKKOS_FORCEINLINE_FUNCTION static void apply(const FunctorType& f, void* p) {"},
{"lineNum":" 2183","line":"    f.apply(*((T*)p));"},
{"lineNum":" 2184","line":"  }"},
{"lineNum":" 2185","line":""},
{"lineNum":" 2186","line":"  KOKKOS_FORCEINLINE_FUNCTION static void apply(FunctorType& f, void* p) {"},
{"lineNum":" 2187","line":"    f.apply(*((T*)p));"},
{"lineNum":" 2188","line":"  }"},
{"lineNum":" 2189","line":"};"},
{"lineNum":" 2190","line":""},
{"lineNum":" 2191","line":"}  // namespace Impl"},
{"lineNum":" 2192","line":"}  // namespace Kokkos"},
{"lineNum":" 2193","line":""},
{"lineNum":" 2194","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 2195","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 2196","line":""},
{"lineNum":" 2197","line":"#endif /* KOKKOS_FUNCTORADAPTER_HPP */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 7, "covered" : 0,};
var merged_data = [];
