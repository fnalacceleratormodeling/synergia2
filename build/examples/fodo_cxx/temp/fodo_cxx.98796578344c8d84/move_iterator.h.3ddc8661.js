var data = {lines:[
{"lineNum":"    1","line":"// -*- C++ -*-"},
{"lineNum":"    2","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions."},
{"lineNum":"    5","line":"// See https://llvm.org/LICENSE.txt for license information."},
{"lineNum":"    6","line":"// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef _LIBCPP___ITERATOR_MOVE_ITERATOR_H"},
{"lineNum":"   11","line":"#define _LIBCPP___ITERATOR_MOVE_ITERATOR_H"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"#include <__config>"},
{"lineNum":"   14","line":"#include <__iterator/iterator_traits.h>"},
{"lineNum":"   15","line":"#include <type_traits>"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"},
{"lineNum":"   18","line":"#pragma GCC system_header"},
{"lineNum":"   19","line":"#endif"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"_LIBCPP_PUSH_MACROS"},
{"lineNum":"   22","line":"#include <__undef_macros>"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"_LIBCPP_BEGIN_NAMESPACE_STD"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"template <class _Iter>"},
{"lineNum":"   27","line":"class _LIBCPP_TEMPLATE_VIS move_iterator"},
{"lineNum":"   28","line":"{"},
{"lineNum":"   29","line":"private:"},
{"lineNum":"   30","line":"    _Iter __i;"},
{"lineNum":"   31","line":"public:"},
{"lineNum":"   32","line":"    typedef _Iter                                            iterator_type;"},
{"lineNum":"   33","line":"    typedef typename iterator_traits<iterator_type>::value_type value_type;"},
{"lineNum":"   34","line":"    typedef typename iterator_traits<iterator_type>::difference_type difference_type;"},
{"lineNum":"   35","line":"    typedef iterator_type pointer;"},
{"lineNum":"   36","line":"    typedef _If<__is_cpp17_random_access_iterator<_Iter>::value,"},
{"lineNum":"   37","line":"        random_access_iterator_tag,"},
{"lineNum":"   38","line":"        typename iterator_traits<_Iter>::iterator_category>  iterator_category;"},
{"lineNum":"   39","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":"   40","line":"    typedef input_iterator_tag                               iterator_concept;"},
{"lineNum":"   41","line":"#endif"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"   44","line":"    typedef typename iterator_traits<iterator_type>::reference __reference;"},
{"lineNum":"   45","line":"    typedef typename conditional<"},
{"lineNum":"   46","line":"            is_reference<__reference>::value,"},
{"lineNum":"   47","line":"            typename remove_reference<__reference>::type&&,"},
{"lineNum":"   48","line":"            __reference"},
{"lineNum":"   49","line":"        >::type reference;"},
{"lineNum":"   50","line":"#else"},
{"lineNum":"   51","line":"    typedef typename iterator_traits<iterator_type>::reference reference;"},
{"lineNum":"   52","line":"#endif"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"   55","line":"    move_iterator() : __i() {}"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"   58","line":"    explicit move_iterator(_Iter __x) : __i(__x) {}"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"    template <class _Up, class = _EnableIf<"},
{"lineNum":"   61","line":"        !is_same<_Up, _Iter>::value && is_convertible<_Up const&, _Iter>::value"},
{"lineNum":"   62","line":"    > >"},
{"lineNum":"   63","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"   64","line":"    move_iterator(const move_iterator<_Up>& __u) : __i(__u.base()) {}"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"    template <class _Up, class = _EnableIf<"},
{"lineNum":"   67","line":"        !is_same<_Up, _Iter>::value &&"},
{"lineNum":"   68","line":"        is_convertible<_Up const&, _Iter>::value &&"},
{"lineNum":"   69","line":"        is_assignable<_Iter&, _Up const&>::value"},
{"lineNum":"   70","line":"    > >"},
{"lineNum":"   71","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"   72","line":"    move_iterator& operator=(const move_iterator<_Up>& __u) {"},
{"lineNum":"   73","line":"        __i = __u.base();"},
{"lineNum":"   74","line":"        return *this;"},
{"lineNum":"   75","line":"    }"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 _Iter base() const {return __i;}"},
{"lineNum":"   78","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"   79","line":"    reference operator*() const { return static_cast<reference>(*__i); }"},
{"lineNum":"   80","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"   81","line":"    pointer  operator->() const { return __i;}"},
{"lineNum":"   82","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"   83","line":"    move_iterator& operator++() {++__i; return *this;}","class":"lineNoCov","hits":"0","possible_hits":"99",},
{"lineNum":"   84","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"   85","line":"    move_iterator  operator++(int) {move_iterator __tmp(*this); ++__i; return __tmp;}"},
{"lineNum":"   86","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"   87","line":"    move_iterator& operator--() {--__i; return *this;}"},
{"lineNum":"   88","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"   89","line":"    move_iterator  operator--(int) {move_iterator __tmp(*this); --__i; return __tmp;}"},
{"lineNum":"   90","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"   91","line":"    move_iterator  operator+ (difference_type __n) const {return move_iterator(__i + __n);}"},
{"lineNum":"   92","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"   93","line":"    move_iterator& operator+=(difference_type __n) {__i += __n; return *this;}"},
{"lineNum":"   94","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"   95","line":"    move_iterator  operator- (difference_type __n) const {return move_iterator(__i - __n);}"},
{"lineNum":"   96","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"   97","line":"    move_iterator& operator-=(difference_type __n) {__i -= __n; return *this;}"},
{"lineNum":"   98","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"   99","line":"    reference operator[](difference_type __n) const { return static_cast<reference>(__i[__n]); }"},
{"lineNum":"  100","line":"};"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"template <class _Iter1, class _Iter2>"},
{"lineNum":"  103","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  104","line":"bool"},
{"lineNum":"  105","line":"operator==(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)"},
{"lineNum":"  106","line":"{"},
{"lineNum":"  107","line":"    return __x.base() == __y.base();"},
{"lineNum":"  108","line":"}"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"template <class _Iter1, class _Iter2>"},
{"lineNum":"  111","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  112","line":"bool"},
{"lineNum":"  113","line":"operator<(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)"},
{"lineNum":"  114","line":"{"},
{"lineNum":"  115","line":"    return __x.base() < __y.base();"},
{"lineNum":"  116","line":"}"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"template <class _Iter1, class _Iter2>"},
{"lineNum":"  119","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  120","line":"bool"},
{"lineNum":"  121","line":"operator!=(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)"},
{"lineNum":"  122","line":"{"},
{"lineNum":"  123","line":"    return __x.base() != __y.base();"},
{"lineNum":"  124","line":"}"},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"template <class _Iter1, class _Iter2>"},
{"lineNum":"  127","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  128","line":"bool"},
{"lineNum":"  129","line":"operator>(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)"},
{"lineNum":"  130","line":"{"},
{"lineNum":"  131","line":"    return __x.base() > __y.base();"},
{"lineNum":"  132","line":"}"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"template <class _Iter1, class _Iter2>"},
{"lineNum":"  135","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  136","line":"bool"},
{"lineNum":"  137","line":"operator>=(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)"},
{"lineNum":"  138","line":"{"},
{"lineNum":"  139","line":"    return __x.base() >= __y.base();"},
{"lineNum":"  140","line":"}"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"template <class _Iter1, class _Iter2>"},
{"lineNum":"  143","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  144","line":"bool"},
{"lineNum":"  145","line":"operator<=(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)"},
{"lineNum":"  146","line":"{"},
{"lineNum":"  147","line":"    return __x.base() <= __y.base();"},
{"lineNum":"  148","line":"}"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  151","line":"template <class _Iter1, class _Iter2>"},
{"lineNum":"  152","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  153","line":"auto"},
{"lineNum":"  154","line":"operator-(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)"},
{"lineNum":"  155","line":"-> decltype(__x.base() - __y.base())"},
{"lineNum":"  156","line":"{"},
{"lineNum":"  157","line":"    return __x.base() - __y.base();","class":"lineNoCov","hits":"0","possible_hits":"104",},
{"lineNum":"  158","line":"}"},
{"lineNum":"  159","line":"#else"},
{"lineNum":"  160","line":"template <class _Iter1, class _Iter2>"},
{"lineNum":"  161","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  162","line":"typename move_iterator<_Iter1>::difference_type"},
{"lineNum":"  163","line":"operator-(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)"},
{"lineNum":"  164","line":"{"},
{"lineNum":"  165","line":"    return __x.base() - __y.base();"},
{"lineNum":"  166","line":"}"},
{"lineNum":"  167","line":"#endif"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"template <class _Iter>"},
{"lineNum":"  170","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  171","line":"move_iterator<_Iter>"},
{"lineNum":"  172","line":"operator+(typename move_iterator<_Iter>::difference_type __n, const move_iterator<_Iter>& __x)"},
{"lineNum":"  173","line":"{"},
{"lineNum":"  174","line":"    return move_iterator<_Iter>(__x.base() + __n);"},
{"lineNum":"  175","line":"}"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"template <class _Iter>"},
{"lineNum":"  178","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  179","line":"move_iterator<_Iter>"},
{"lineNum":"  180","line":"make_move_iterator(_Iter __i)"},
{"lineNum":"  181","line":"{"},
{"lineNum":"  182","line":"    return move_iterator<_Iter>(__i);"},
{"lineNum":"  183","line":"}"},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"_LIBCPP_END_NAMESPACE_STD"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"_LIBCPP_POP_MACROS"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"#endif // _LIBCPP___ITERATOR_MOVE_ITERATOR_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 2, "covered" : 0,};
var merged_data = [];
