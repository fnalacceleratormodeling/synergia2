var data = {lines:[
{"lineNum":"    1","line":"/*! \\file binary.hpp"},
{"lineNum":"    2","line":"    \\brief Binary input and output archives */"},
{"lineNum":"    3","line":"/*"},
{"lineNum":"    4","line":"  Copyright (c) 2014, Randolph Voorhies, Shane Grant"},
{"lineNum":"    5","line":"  All rights reserved."},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"  Redistribution and use in source and binary forms, with or without"},
{"lineNum":"    8","line":"  modification, are permitted provided that the following conditions are met:"},
{"lineNum":"    9","line":"      * Redistributions of source code must retain the above copyright"},
{"lineNum":"   10","line":"        notice, this list of conditions and the following disclaimer."},
{"lineNum":"   11","line":"      * Redistributions in binary form must reproduce the above copyright"},
{"lineNum":"   12","line":"        notice, this list of conditions and the following disclaimer in the"},
{"lineNum":"   13","line":"        documentation and/or other materials provided with the distribution."},
{"lineNum":"   14","line":"      * Neither the name of cereal nor the"},
{"lineNum":"   15","line":"        names of its contributors may be used to endorse or promote products"},
{"lineNum":"   16","line":"        derived from this software without specific prior written permission."},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND"},
{"lineNum":"   19","line":"  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED"},
{"lineNum":"   20","line":"  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE"},
{"lineNum":"   21","line":"  DISCLAIMED. IN NO EVENT SHALL RANDOLPH VOORHIES OR SHANE GRANT BE LIABLE FOR ANY"},
{"lineNum":"   22","line":"  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES"},
{"lineNum":"   23","line":"  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;"},
{"lineNum":"   24","line":"  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"},
{"lineNum":"   25","line":"  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT"},
{"lineNum":"   26","line":"  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"},
{"lineNum":"   27","line":"  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   28","line":"*/"},
{"lineNum":"   29","line":"#ifndef CEREAL_ARCHIVES_BINARY_HPP_"},
{"lineNum":"   30","line":"#define CEREAL_ARCHIVES_BINARY_HPP_"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"#include \"cereal/cereal.hpp\""},
{"lineNum":"   33","line":"#include <sstream>"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"namespace cereal"},
{"lineNum":"   36","line":"{"},
{"lineNum":"   37","line":"  // ######################################################################"},
{"lineNum":"   38","line":"  //! An output archive designed to save data in a compact binary representation"},
{"lineNum":"   39","line":"  /*! This archive outputs data to a stream in an extremely compact binary"},
{"lineNum":"   40","line":"      representation with as little extra metadata as possible."},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"      This archive does nothing to ensure that the endianness of the saved"},
{"lineNum":"   43","line":"      and loaded data is the same.  If you need to have portability over"},
{"lineNum":"   44","line":"      architectures with different endianness, use PortableBinaryOutputArchive."},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"      When using a binary archive and a file stream, you must use the"},
{"lineNum":"   47","line":"      std::ios::binary format flag to avoid having your data altered"},
{"lineNum":"   48","line":"      inadvertently."},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"      \\ingroup Archives */"},
{"lineNum":"   51","line":"  class BinaryOutputArchive : public OutputArchive<BinaryOutputArchive, AllowEmptyClassElision>"},
{"lineNum":"   52","line":"  {"},
{"lineNum":"   53","line":"    public:"},
{"lineNum":"   54","line":"      //! Construct, outputting to the provided stream"},
{"lineNum":"   55","line":"      /*! @param stream The stream to output to.  Can be a stringstream, a file stream, or"},
{"lineNum":"   56","line":"                        even cout! */"},
{"lineNum":"   57","line":"      BinaryOutputArchive(std::ostream & stream) :"},
{"lineNum":"   58","line":"        OutputArchive<BinaryOutputArchive, AllowEmptyClassElision>(this),"},
{"lineNum":"   59","line":"        itsStream(stream)"},
{"lineNum":"   60","line":"      { }"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"      ~BinaryOutputArchive() CEREAL_NOEXCEPT = default;"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"      //! Writes size bytes of data to the output stream"},
{"lineNum":"   65","line":"      void saveBinary( const void * data, std::streamsize size )"},
{"lineNum":"   66","line":"      {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   67","line":"        auto const writtenSize = itsStream.rdbuf()->sputn( reinterpret_cast<const char*>( data ), size );","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"        if(writtenSize != size)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   70","line":"          throw Exception(\"Failed to write \" + std::to_string(size) + \" bytes to output stream! Wrote \" + std::to_string(writtenSize));","class":"lineNoCov","hits":"0","possible_hits":"23",},
{"lineNum":"   71","line":"      }","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"    private:"},
{"lineNum":"   74","line":"      std::ostream & itsStream;"},
{"lineNum":"   75","line":"  };"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"  // ######################################################################"},
{"lineNum":"   78","line":"  //! An input archive designed to load data saved using BinaryOutputArchive"},
{"lineNum":"   79","line":"  /*  This archive does nothing to ensure that the endianness of the saved"},
{"lineNum":"   80","line":"      and loaded data is the same.  If you need to have portability over"},
{"lineNum":"   81","line":"      architectures with different endianness, use PortableBinaryOutputArchive."},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"      When using a binary archive and a file stream, you must use the"},
{"lineNum":"   84","line":"      std::ios::binary format flag to avoid having your data altered"},
{"lineNum":"   85","line":"      inadvertently."},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"      \\ingroup Archives */"},
{"lineNum":"   88","line":"  class BinaryInputArchive : public InputArchive<BinaryInputArchive, AllowEmptyClassElision>"},
{"lineNum":"   89","line":"  {"},
{"lineNum":"   90","line":"    public:"},
{"lineNum":"   91","line":"      //! Construct, loading from the provided stream"},
{"lineNum":"   92","line":"      BinaryInputArchive(std::istream & stream) :"},
{"lineNum":"   93","line":"        InputArchive<BinaryInputArchive, AllowEmptyClassElision>(this),"},
{"lineNum":"   94","line":"        itsStream(stream)"},
{"lineNum":"   95","line":"      { }"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"      ~BinaryInputArchive() CEREAL_NOEXCEPT = default;"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"      //! Reads size bytes of data from the input stream"},
{"lineNum":"  100","line":"      void loadBinary( void * const data, std::streamsize size )"},
{"lineNum":"  101","line":"      {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  102","line":"        auto const readSize = itsStream.rdbuf()->sgetn( reinterpret_cast<char*>( data ), size );","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"        if(readSize != size)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  105","line":"          throw Exception(\"Failed to read \" + std::to_string(size) + \" bytes from input stream! Read \" + std::to_string(readSize));","class":"lineNoCov","hits":"0","possible_hits":"23",},
{"lineNum":"  106","line":"      }","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"    private:"},
{"lineNum":"  109","line":"      std::istream & itsStream;"},
{"lineNum":"  110","line":"  };"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"  // ######################################################################"},
{"lineNum":"  113","line":"  // Common BinaryArchive serialization functions"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"  //! Saving for POD types to binary"},
{"lineNum":"  116","line":"  template<class T> inline"},
{"lineNum":"  117","line":"  typename std::enable_if<std::is_arithmetic<T>::value, void>::type"},
{"lineNum":"  118","line":"  CEREAL_SAVE_FUNCTION_NAME(BinaryOutputArchive & ar, T const & t)"},
{"lineNum":"  119","line":"  {"},
{"lineNum":"  120","line":"    ar.saveBinary(std::addressof(t), sizeof(t));","class":"lineNoCov","hits":"0","possible_hits":"189",},
{"lineNum":"  121","line":"  }"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"  //! Loading for POD types from binary"},
{"lineNum":"  124","line":"  template<class T> inline"},
{"lineNum":"  125","line":"  typename std::enable_if<std::is_arithmetic<T>::value, void>::type"},
{"lineNum":"  126","line":"  CEREAL_LOAD_FUNCTION_NAME(BinaryInputArchive & ar, T & t)"},
{"lineNum":"  127","line":"  {"},
{"lineNum":"  128","line":"    ar.loadBinary(std::addressof(t), sizeof(t));","class":"lineNoCov","hits":"0","possible_hits":"118",},
{"lineNum":"  129","line":"  }"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"  //! Serializing NVP types to binary"},
{"lineNum":"  132","line":"  template <class Archive, class T> inline"},
{"lineNum":"  133","line":"  CEREAL_ARCHIVE_RESTRICT(BinaryInputArchive, BinaryOutputArchive)"},
{"lineNum":"  134","line":"  CEREAL_SERIALIZE_FUNCTION_NAME( Archive & ar, NameValuePair<T> & t )"},
{"lineNum":"  135","line":"  {"},
{"lineNum":"  136","line":"    ar( t.value );"},
{"lineNum":"  137","line":"  }"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"  //! Serializing SizeTags to binary"},
{"lineNum":"  140","line":"  template <class Archive, class T> inline"},
{"lineNum":"  141","line":"  CEREAL_ARCHIVE_RESTRICT(BinaryInputArchive, BinaryOutputArchive)"},
{"lineNum":"  142","line":"  CEREAL_SERIALIZE_FUNCTION_NAME( Archive & ar, SizeTag<T> & t )"},
{"lineNum":"  143","line":"  {"},
{"lineNum":"  144","line":"    ar( t.size );"},
{"lineNum":"  145","line":"  }"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"  //! Saving binary data"},
{"lineNum":"  148","line":"  template <class T> inline"},
{"lineNum":"  149","line":"  void CEREAL_SAVE_FUNCTION_NAME(BinaryOutputArchive & ar, BinaryData<T> const & bd)"},
{"lineNum":"  150","line":"  {"},
{"lineNum":"  151","line":"    ar.saveBinary( bd.data, static_cast<std::streamsize>( bd.size ) );","class":"lineNoCov","hits":"0","possible_hits":"33",},
{"lineNum":"  152","line":"  }"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"  //! Loading binary data"},
{"lineNum":"  155","line":"  template <class T> inline"},
{"lineNum":"  156","line":"  void CEREAL_LOAD_FUNCTION_NAME(BinaryInputArchive & ar, BinaryData<T> & bd)"},
{"lineNum":"  157","line":"  {"},
{"lineNum":"  158","line":"    ar.loadBinary(bd.data, static_cast<std::streamsize>( bd.size ) );","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"  159","line":"  }"},
{"lineNum":"  160","line":"} // namespace cereal"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"// register archives for polymorphic support"},
{"lineNum":"  163","line":"CEREAL_REGISTER_ARCHIVE(cereal::BinaryOutputArchive)"},
{"lineNum":"  164","line":"CEREAL_REGISTER_ARCHIVE(cereal::BinaryInputArchive)"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"// tie input and output archives together"},
{"lineNum":"  167","line":"CEREAL_SETUP_ARCHIVE_TRAITS(cereal::BinaryInputArchive, cereal::BinaryOutputArchive)"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"#endif // CEREAL_ARCHIVES_BINARY_HPP_"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 14, "covered" : 0,};
var merged_data = [];
