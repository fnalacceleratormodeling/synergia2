var data = {lines:[
{"lineNum":"    1","line":"// Tencent is pleased to support the open source community by making RapidJSON available."},
{"lineNum":"    2","line":"//"},
{"lineNum":"    3","line":"// Copyright (C) 2015 THL A29 Limited, a Tencent company, and Milo Yip. All rights reserved."},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// Licensed under the MIT License (the \"License\"); you may not use this file except"},
{"lineNum":"    6","line":"// in compliance with the License. You may obtain a copy of the License at"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"// http://opensource.org/licenses/MIT"},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// Unless required by applicable law or agreed to in writing, software distributed"},
{"lineNum":"   11","line":"// under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR"},
{"lineNum":"   12","line":"// CONDITIONS OF ANY KIND, either express or implied. See the License for the"},
{"lineNum":"   13","line":"// specific language governing permissions and limitations under the License."},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"#ifndef CEREAL_RAPIDJSON_INTERNAL_STACK_H_"},
{"lineNum":"   16","line":"#define CEREAL_RAPIDJSON_INTERNAL_STACK_H_"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"#include \"../allocators.h\""},
{"lineNum":"   19","line":"#include \"swap.h\""},
{"lineNum":"   20","line":"#include <cstddef>"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"#if defined(__clang__)"},
{"lineNum":"   23","line":"CEREAL_RAPIDJSON_DIAG_PUSH"},
{"lineNum":"   24","line":"CEREAL_RAPIDJSON_DIAG_OFF(c++98-compat)"},
{"lineNum":"   25","line":"#endif"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"CEREAL_RAPIDJSON_NAMESPACE_BEGIN"},
{"lineNum":"   28","line":"namespace internal {"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   31","line":"// Stack"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"//! A type-unsafe stack for storing different types of data."},
{"lineNum":"   34","line":"/*! \\tparam Allocator Allocator for allocating stack memory."},
{"lineNum":"   35","line":"*/"},
{"lineNum":"   36","line":"template <typename Allocator>"},
{"lineNum":"   37","line":"class Stack {"},
{"lineNum":"   38","line":"public:"},
{"lineNum":"   39","line":"    // Optimization note: Do not allocate memory for stack_ in constructor."},
{"lineNum":"   40","line":"    // Do it lazily when first Push() -> Expand() -> Resize()."},
{"lineNum":"   41","line":"    Stack(Allocator* allocator, size_t stackCapacity) : allocator_(allocator), ownAllocator_(0), stack_(0), stackTop_(0), stackEnd_(0), initialCapacity_(stackCapacity) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   42","line":"    }"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"#if CEREAL_RAPIDJSON_HAS_CXX11_RVALUE_REFS"},
{"lineNum":"   45","line":"    Stack(Stack&& rhs)"},
{"lineNum":"   46","line":"        : allocator_(rhs.allocator_),"},
{"lineNum":"   47","line":"          ownAllocator_(rhs.ownAllocator_),"},
{"lineNum":"   48","line":"          stack_(rhs.stack_),"},
{"lineNum":"   49","line":"          stackTop_(rhs.stackTop_),"},
{"lineNum":"   50","line":"          stackEnd_(rhs.stackEnd_),"},
{"lineNum":"   51","line":"          initialCapacity_(rhs.initialCapacity_)"},
{"lineNum":"   52","line":"    {"},
{"lineNum":"   53","line":"        rhs.allocator_ = 0;"},
{"lineNum":"   54","line":"        rhs.ownAllocator_ = 0;"},
{"lineNum":"   55","line":"        rhs.stack_ = 0;"},
{"lineNum":"   56","line":"        rhs.stackTop_ = 0;"},
{"lineNum":"   57","line":"        rhs.stackEnd_ = 0;"},
{"lineNum":"   58","line":"        rhs.initialCapacity_ = 0;"},
{"lineNum":"   59","line":"    }"},
{"lineNum":"   60","line":"#endif"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"    ~Stack() {"},
{"lineNum":"   63","line":"        Destroy();","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   64","line":"    }"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"#if CEREAL_RAPIDJSON_HAS_CXX11_RVALUE_REFS"},
{"lineNum":"   67","line":"    Stack& operator=(Stack&& rhs) {"},
{"lineNum":"   68","line":"        if (&rhs != this)"},
{"lineNum":"   69","line":"        {"},
{"lineNum":"   70","line":"            Destroy();"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"            allocator_ = rhs.allocator_;"},
{"lineNum":"   73","line":"            ownAllocator_ = rhs.ownAllocator_;"},
{"lineNum":"   74","line":"            stack_ = rhs.stack_;"},
{"lineNum":"   75","line":"            stackTop_ = rhs.stackTop_;"},
{"lineNum":"   76","line":"            stackEnd_ = rhs.stackEnd_;"},
{"lineNum":"   77","line":"            initialCapacity_ = rhs.initialCapacity_;"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"            rhs.allocator_ = 0;"},
{"lineNum":"   80","line":"            rhs.ownAllocator_ = 0;"},
{"lineNum":"   81","line":"            rhs.stack_ = 0;"},
{"lineNum":"   82","line":"            rhs.stackTop_ = 0;"},
{"lineNum":"   83","line":"            rhs.stackEnd_ = 0;"},
{"lineNum":"   84","line":"            rhs.initialCapacity_ = 0;"},
{"lineNum":"   85","line":"        }"},
{"lineNum":"   86","line":"        return *this;"},
{"lineNum":"   87","line":"    }"},
{"lineNum":"   88","line":"#endif"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"    void Swap(Stack& rhs) CEREAL_RAPIDJSON_NOEXCEPT {"},
{"lineNum":"   91","line":"        internal::Swap(allocator_, rhs.allocator_);"},
{"lineNum":"   92","line":"        internal::Swap(ownAllocator_, rhs.ownAllocator_);"},
{"lineNum":"   93","line":"        internal::Swap(stack_, rhs.stack_);"},
{"lineNum":"   94","line":"        internal::Swap(stackTop_, rhs.stackTop_);"},
{"lineNum":"   95","line":"        internal::Swap(stackEnd_, rhs.stackEnd_);"},
{"lineNum":"   96","line":"        internal::Swap(initialCapacity_, rhs.initialCapacity_);"},
{"lineNum":"   97","line":"    }"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"    void Clear() { stackTop_ = stack_; }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"    void ShrinkToFit() {"},
{"lineNum":"  102","line":"        if (Empty()) {"},
{"lineNum":"  103","line":"            // If the stack is empty, completely deallocate the memory."},
{"lineNum":"  104","line":"            Allocator::Free(stack_); // NOLINT (+clang-analyzer-unix.Malloc)"},
{"lineNum":"  105","line":"            stack_ = 0;"},
{"lineNum":"  106","line":"            stackTop_ = 0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  107","line":"            stackEnd_ = 0;"},
{"lineNum":"  108","line":"        }"},
{"lineNum":"  109","line":"        else"},
{"lineNum":"  110","line":"            Resize(GetSize());"},
{"lineNum":"  111","line":"    }"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"    // Optimization note: try to minimize the size of this function for force inline."},
{"lineNum":"  114","line":"    // Expansion is run very infrequently, so it is moved to another (probably non-inline) function."},
{"lineNum":"  115","line":"    template<typename T>"},
{"lineNum":"  116","line":"    CEREAL_RAPIDJSON_FORCEINLINE void Reserve(size_t count = 1) {"},
{"lineNum":"  117","line":"         // Expand the stack if needed"},
{"lineNum":"  118","line":"        if (CEREAL_RAPIDJSON_UNLIKELY(static_cast<std::ptrdiff_t>(sizeof(T) * count) > (stackEnd_ - stackTop_)))","class":"lineNoCov","hits":"0","possible_hits":"43",},
{"lineNum":"  119","line":"            Expand<T>(count);","class":"lineNoCov","hits":"0","possible_hits":"35",},
{"lineNum":"  120","line":"    }"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"    template<typename T>"},
{"lineNum":"  123","line":"    CEREAL_RAPIDJSON_FORCEINLINE T* Push(size_t count = 1) {"},
{"lineNum":"  124","line":"        Reserve<T>(count);"},
{"lineNum":"  125","line":"        return PushUnsafe<T>(count);"},
{"lineNum":"  126","line":"    }"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"    template<typename T>"},
{"lineNum":"  129","line":"    CEREAL_RAPIDJSON_FORCEINLINE T* PushUnsafe(size_t count = 1) {"},
{"lineNum":"  130","line":"        CEREAL_RAPIDJSON_ASSERT(stackTop_);","class":"lineNoCov","hits":"0","possible_hits":"89",},
{"lineNum":"  131","line":"        CEREAL_RAPIDJSON_ASSERT(static_cast<std::ptrdiff_t>(sizeof(T) * count) <= (stackEnd_ - stackTop_));","class":"lineNoCov","hits":"0","possible_hits":"73",},
{"lineNum":"  132","line":"        T* ret = reinterpret_cast<T*>(stackTop_);"},
{"lineNum":"  133","line":"        stackTop_ += sizeof(T) * count;","class":"lineNoCov","hits":"0","possible_hits":"40",},
{"lineNum":"  134","line":"        return ret;"},
{"lineNum":"  135","line":"    }"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"    template<typename T>"},
{"lineNum":"  138","line":"    T* Pop(size_t count) {"},
{"lineNum":"  139","line":"        CEREAL_RAPIDJSON_ASSERT(GetSize() >= count * sizeof(T));","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  140","line":"        stackTop_ -= count * sizeof(T);","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"  141","line":"        return reinterpret_cast<T*>(stackTop_);"},
{"lineNum":"  142","line":"    }"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"    template<typename T>"},
{"lineNum":"  145","line":"    T* Top() {"},
{"lineNum":"  146","line":"        CEREAL_RAPIDJSON_ASSERT(GetSize() >= sizeof(T));","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  147","line":"        return reinterpret_cast<T*>(stackTop_ - sizeof(T));"},
{"lineNum":"  148","line":"    }"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"    template<typename T>"},
{"lineNum":"  151","line":"    const T* Top() const {"},
{"lineNum":"  152","line":"        CEREAL_RAPIDJSON_ASSERT(GetSize() >= sizeof(T));"},
{"lineNum":"  153","line":"        return reinterpret_cast<T*>(stackTop_ - sizeof(T));"},
{"lineNum":"  154","line":"    }"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"    template<typename T>"},
{"lineNum":"  157","line":"    T* End() { return reinterpret_cast<T*>(stackTop_); }"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"    template<typename T>"},
{"lineNum":"  160","line":"    const T* End() const { return reinterpret_cast<T*>(stackTop_); }"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"    template<typename T>"},
{"lineNum":"  163","line":"    T* Bottom() { return reinterpret_cast<T*>(stack_); }"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"    template<typename T>"},
{"lineNum":"  166","line":"    const T* Bottom() const { return reinterpret_cast<T*>(stack_); }"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"    bool HasAllocator() const {"},
{"lineNum":"  169","line":"        return allocator_ != 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  170","line":"    }"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"    Allocator& GetAllocator() {"},
{"lineNum":"  173","line":"        CEREAL_RAPIDJSON_ASSERT(allocator_);"},
{"lineNum":"  174","line":"        return *allocator_;"},
{"lineNum":"  175","line":"    }"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"    bool Empty() const { return stackTop_ == stack_; }","class":"lineNoCov","hits":"0","possible_hits":"221",},
{"lineNum":"  178","line":"    size_t GetSize() const { return static_cast<size_t>(stackTop_ - stack_); }","class":"lineNoCov","hits":"0","possible_hits":"49",},
{"lineNum":"  179","line":"    size_t GetCapacity() const { return static_cast<size_t>(stackEnd_ - stack_); }","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"private:"},
{"lineNum":"  182","line":"    template<typename T>"},
{"lineNum":"  183","line":"    void Expand(size_t count) {","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  184","line":"        // Only expand the capacity if the current stack exists. Otherwise just create a stack with initial capacity."},
{"lineNum":"  185","line":"        size_t newCapacity;"},
{"lineNum":"  186","line":"        if (stack_ == 0) {","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  187","line":"            if (!allocator_)","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  188","line":"                ownAllocator_ = allocator_ = CEREAL_RAPIDJSON_NEW(Allocator)();","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  189","line":"            newCapacity = initialCapacity_;","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  190","line":"        } else {"},
{"lineNum":"  191","line":"            newCapacity = GetCapacity();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  192","line":"            newCapacity += (newCapacity + 1) / 2;","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  193","line":"        }"},
{"lineNum":"  194","line":"        size_t newSize = GetSize() + sizeof(T) * count;","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  195","line":"        if (newCapacity < newSize)","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  196","line":"            newCapacity = newSize;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"        Resize(newCapacity);"},
{"lineNum":"  199","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"    void Resize(size_t newCapacity) {"},
{"lineNum":"  202","line":"        const size_t size = GetSize();  // Backup the current size"},
{"lineNum":"  203","line":"        stack_ = static_cast<char*>(allocator_->Realloc(stack_, GetCapacity(), newCapacity));","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  204","line":"        stackTop_ = stack_ + size;","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  205","line":"        stackEnd_ = stack_ + newCapacity;","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  206","line":"    }"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"    void Destroy() {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  209","line":"        Allocator::Free(stack_);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  210","line":"        CEREAL_RAPIDJSON_DELETE(ownAllocator_); // Only delete if it is owned by the stack","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  211","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"    // Prohibit copy constructor & assignment operator."},
{"lineNum":"  214","line":"    Stack(const Stack&);"},
{"lineNum":"  215","line":"    Stack& operator=(const Stack&);"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"    Allocator* allocator_;"},
{"lineNum":"  218","line":"    Allocator* ownAllocator_;"},
{"lineNum":"  219","line":"    char *stack_;"},
{"lineNum":"  220","line":"    char *stackTop_;"},
{"lineNum":"  221","line":"    char *stackEnd_;"},
{"lineNum":"  222","line":"    size_t initialCapacity_;"},
{"lineNum":"  223","line":"};"},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"} // namespace internal"},
{"lineNum":"  226","line":"CEREAL_RAPIDJSON_NAMESPACE_END"},
{"lineNum":"  227","line":""},
{"lineNum":"  228","line":"#if defined(__clang__)"},
{"lineNum":"  229","line":"CEREAL_RAPIDJSON_DIAG_POP"},
{"lineNum":"  230","line":"#endif"},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"#endif // CEREAL_RAPIDJSON_STACK_H_"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 34, "covered" : 0,};
var merged_data = [];
