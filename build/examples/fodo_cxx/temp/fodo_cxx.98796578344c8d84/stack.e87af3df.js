var data = {lines:[
{"lineNum":"    1","line":"// -*- C++ -*-"},
{"lineNum":"    2","line":"//===---------------------------- stack -----------------------------------===//"},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions."},
{"lineNum":"    5","line":"// See https://llvm.org/LICENSE.txt for license information."},
{"lineNum":"    6","line":"// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef _LIBCPP_STACK"},
{"lineNum":"   11","line":"#define _LIBCPP_STACK"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"/*"},
{"lineNum":"   14","line":"    stack synopsis"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"namespace std"},
{"lineNum":"   17","line":"{"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"template <class T, class Container = deque<T>>"},
{"lineNum":"   20","line":"class stack"},
{"lineNum":"   21","line":"{"},
{"lineNum":"   22","line":"public:"},
{"lineNum":"   23","line":"    typedef Container                                container_type;"},
{"lineNum":"   24","line":"    typedef typename container_type::value_type      value_type;"},
{"lineNum":"   25","line":"    typedef typename container_type::reference       reference;"},
{"lineNum":"   26","line":"    typedef typename container_type::const_reference const_reference;"},
{"lineNum":"   27","line":"    typedef typename container_type::size_type       size_type;"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"protected:"},
{"lineNum":"   30","line":"    container_type c;"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"public:"},
{"lineNum":"   33","line":"    stack() = default;"},
{"lineNum":"   34","line":"    ~stack() = default;"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"    stack(const stack& q) = default;"},
{"lineNum":"   37","line":"    stack(stack&& q) = default;"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"    stack& operator=(const stack& q) = default;"},
{"lineNum":"   40","line":"    stack& operator=(stack&& q) = default;"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"    explicit stack(const container_type& c);"},
{"lineNum":"   43","line":"    explicit stack(container_type&& c);"},
{"lineNum":"   44","line":"    template <class Alloc> explicit stack(const Alloc& a);"},
{"lineNum":"   45","line":"    template <class Alloc> stack(const container_type& c, const Alloc& a);"},
{"lineNum":"   46","line":"    template <class Alloc> stack(container_type&& c, const Alloc& a);"},
{"lineNum":"   47","line":"    template <class Alloc> stack(const stack& c, const Alloc& a);"},
{"lineNum":"   48","line":"    template <class Alloc> stack(stack&& c, const Alloc& a);"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"    bool empty() const;"},
{"lineNum":"   51","line":"    size_type size() const;"},
{"lineNum":"   52","line":"    reference top();"},
{"lineNum":"   53","line":"    const_reference top() const;"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"    void push(const value_type& x);"},
{"lineNum":"   56","line":"    void push(value_type&& x);"},
{"lineNum":"   57","line":"    template <class... Args> reference emplace(Args&&... args); // reference in C++17"},
{"lineNum":"   58","line":"    void pop();"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"    void swap(stack& c) noexcept(is_nothrow_swappable_v<Container>)"},
{"lineNum":"   61","line":"};"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"template<class Container>"},
{"lineNum":"   64","line":"  stack(Container) -> stack<typename Container::value_type, Container>;  // C++17"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"template<class Container, class Allocator>"},
{"lineNum":"   67","line":"  stack(Container, Allocator) -> stack<typename Container::value_type, Container>; // C++17"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"template <class T, class Container>"},
{"lineNum":"   70","line":"  bool operator==(const stack<T, Container>& x, const stack<T, Container>& y);"},
{"lineNum":"   71","line":"template <class T, class Container>"},
{"lineNum":"   72","line":"  bool operator< (const stack<T, Container>& x, const stack<T, Container>& y);"},
{"lineNum":"   73","line":"template <class T, class Container>"},
{"lineNum":"   74","line":"  bool operator!=(const stack<T, Container>& x, const stack<T, Container>& y);"},
{"lineNum":"   75","line":"template <class T, class Container>"},
{"lineNum":"   76","line":"  bool operator> (const stack<T, Container>& x, const stack<T, Container>& y);"},
{"lineNum":"   77","line":"template <class T, class Container>"},
{"lineNum":"   78","line":"  bool operator>=(const stack<T, Container>& x, const stack<T, Container>& y);"},
{"lineNum":"   79","line":"template <class T, class Container>"},
{"lineNum":"   80","line":"  bool operator<=(const stack<T, Container>& x, const stack<T, Container>& y);"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"template <class T, class Container>"},
{"lineNum":"   83","line":"  void swap(stack<T, Container>& x, stack<T, Container>& y)"},
{"lineNum":"   84","line":"  noexcept(noexcept(x.swap(y)));"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"}  // std"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"*/"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"#include <__config>"},
{"lineNum":"   91","line":"#include <__memory/uses_allocator.h>"},
{"lineNum":"   92","line":"#include <__utility/forward.h>"},
{"lineNum":"   93","line":"#include <deque>"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"},
{"lineNum":"   96","line":"#pragma GCC system_header"},
{"lineNum":"   97","line":"#endif"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"_LIBCPP_BEGIN_NAMESPACE_STD"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"template <class _Tp, class _Container = deque<_Tp> > class _LIBCPP_TEMPLATE_VIS stack;"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"template <class _Tp, class _Container>"},
{"lineNum":"  104","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  105","line":"bool"},
{"lineNum":"  106","line":"operator==(const stack<_Tp, _Container>& __x, const stack<_Tp, _Container>& __y);"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"template <class _Tp, class _Container>"},
{"lineNum":"  109","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  110","line":"bool"},
{"lineNum":"  111","line":"operator< (const stack<_Tp, _Container>& __x, const stack<_Tp, _Container>& __y);"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"template <class _Tp, class _Container /*= deque<_Tp>*/>"},
{"lineNum":"  114","line":"class _LIBCPP_TEMPLATE_VIS stack","class":"linePartCov","hits":"11","order":"363","possible_hits":"30",},
{"lineNum":"  115","line":"{"},
{"lineNum":"  116","line":"public:"},
{"lineNum":"  117","line":"    typedef _Container                               container_type;"},
{"lineNum":"  118","line":"    typedef typename container_type::value_type      value_type;"},
{"lineNum":"  119","line":"    typedef typename container_type::reference       reference;"},
{"lineNum":"  120","line":"    typedef typename container_type::const_reference const_reference;"},
{"lineNum":"  121","line":"    typedef typename container_type::size_type       size_type;"},
{"lineNum":"  122","line":"    static_assert((is_same<_Tp, value_type>::value), \"\" );"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"protected:"},
{"lineNum":"  125","line":"    container_type c;"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"public:"},
{"lineNum":"  128","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  129","line":"    stack()"},
{"lineNum":"  130","line":"        _NOEXCEPT_(is_nothrow_default_constructible<container_type>::value)"},
{"lineNum":"  131","line":"        : c() {}"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  134","line":"    stack(const stack& __q) : c(__q.c) {}"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  137","line":"    stack& operator=(const stack& __q) {c = __q.c; return *this;}"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  141","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  142","line":"    stack(stack&& __q)"},
{"lineNum":"  143","line":"        _NOEXCEPT_(is_nothrow_move_constructible<container_type>::value)"},
{"lineNum":"  144","line":"        : c(_VSTD::move(__q.c)) {}"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  147","line":"    stack& operator=(stack&& __q)"},
{"lineNum":"  148","line":"        _NOEXCEPT_(is_nothrow_move_assignable<container_type>::value)"},
{"lineNum":"  149","line":"        {c = _VSTD::move(__q.c); return *this;}"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  152","line":"    explicit stack(container_type&& __c) : c(_VSTD::move(__c)) {}"},
{"lineNum":"  153","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  156","line":"    explicit stack(const container_type& __c) : c(__c) {}"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"    template <class _Alloc>"},
{"lineNum":"  159","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  160","line":"        explicit stack(const _Alloc& __a,"},
{"lineNum":"  161","line":"                       _EnableIf<uses_allocator<container_type, _Alloc>::value>* = 0)"},
{"lineNum":"  162","line":"            : c(__a) {}"},
{"lineNum":"  163","line":"    template <class _Alloc>"},
{"lineNum":"  164","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  165","line":"        stack(const container_type& __c, const _Alloc& __a,"},
{"lineNum":"  166","line":"              _EnableIf<uses_allocator<container_type, _Alloc>::value>* = 0)"},
{"lineNum":"  167","line":"            : c(__c, __a) {}"},
{"lineNum":"  168","line":"    template <class _Alloc>"},
{"lineNum":"  169","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  170","line":"        stack(const stack& __s, const _Alloc& __a,"},
{"lineNum":"  171","line":"              _EnableIf<uses_allocator<container_type, _Alloc>::value>* = 0)"},
{"lineNum":"  172","line":"            : c(__s.c, __a) {}"},
{"lineNum":"  173","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  174","line":"    template <class _Alloc>"},
{"lineNum":"  175","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  176","line":"        stack(container_type&& __c, const _Alloc& __a,"},
{"lineNum":"  177","line":"              _EnableIf<uses_allocator<container_type, _Alloc>::value>* = 0)"},
{"lineNum":"  178","line":"            : c(_VSTD::move(__c), __a) {}"},
{"lineNum":"  179","line":"    template <class _Alloc>"},
{"lineNum":"  180","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  181","line":"        stack(stack&& __s, const _Alloc& __a,"},
{"lineNum":"  182","line":"              _EnableIf<uses_allocator<container_type, _Alloc>::value>* = 0)"},
{"lineNum":"  183","line":"            : c(_VSTD::move(__s.c), __a) {}"},
{"lineNum":"  184","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  187","line":"    bool empty()     const      {return c.empty();}"},
{"lineNum":"  188","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  189","line":"    size_type size() const      {return c.size();}"},
{"lineNum":"  190","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  191","line":"    reference top()             {return c.back();}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  192","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  193","line":"    const_reference top() const {return c.back();}"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  196","line":"    void push(const value_type& __v) {c.push_back(__v);}","class":"linePartCov","hits":"11","order":"245","possible_hits":"22",},
{"lineNum":"  197","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  198","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  199","line":"    void push(value_type&& __v) {c.push_back(_VSTD::move(__v));}","class":"lineNoCov","hits":"0","possible_hits":"86",},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"    template <class... _Args>"},
{"lineNum":"  202","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  203","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":"  204","line":"        decltype(auto) emplace(_Args&&... __args)"},
{"lineNum":"  205","line":"        { return c.emplace_back(_VSTD::forward<_Args>(__args)...);}","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  206","line":"#else"},
{"lineNum":"  207","line":"        void      emplace(_Args&&... __args)"},
{"lineNum":"  208","line":"        {        c.emplace_back(_VSTD::forward<_Args>(__args)...);}"},
{"lineNum":"  209","line":"#endif"},
{"lineNum":"  210","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  213","line":"    void pop() {c.pop_back();}","class":"lineNoCov","hits":"0","possible_hits":"68",},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  216","line":"    void swap(stack& __s)"},
{"lineNum":"  217","line":"        _NOEXCEPT_(__is_nothrow_swappable<container_type>::value)"},
{"lineNum":"  218","line":"    {"},
{"lineNum":"  219","line":"        using _VSTD::swap;"},
{"lineNum":"  220","line":"        swap(c, __s.c);"},
{"lineNum":"  221","line":"    }"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"    template <class T1, class _C1>"},
{"lineNum":"  224","line":"    friend"},
{"lineNum":"  225","line":"    bool"},
{"lineNum":"  226","line":"    operator==(const stack<T1, _C1>& __x, const stack<T1, _C1>& __y);"},
{"lineNum":"  227","line":""},
{"lineNum":"  228","line":"    template <class T1, class _C1>"},
{"lineNum":"  229","line":"    friend"},
{"lineNum":"  230","line":"    bool"},
{"lineNum":"  231","line":"    operator< (const stack<T1, _C1>& __x, const stack<T1, _C1>& __y);"},
{"lineNum":"  232","line":"};"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"#ifndef _LIBCPP_HAS_NO_DEDUCTION_GUIDES"},
{"lineNum":"  235","line":"template<class _Container,"},
{"lineNum":"  236","line":"         class = _EnableIf<!__is_allocator<_Container>::value>"},
{"lineNum":"  237","line":">"},
{"lineNum":"  238","line":"stack(_Container)"},
{"lineNum":"  239","line":"    -> stack<typename _Container::value_type, _Container>;"},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"template<class _Container,"},
{"lineNum":"  242","line":"         class _Alloc,"},
{"lineNum":"  243","line":"         class = _EnableIf<!__is_allocator<_Container>::value>,"},
{"lineNum":"  244","line":"         class = _EnableIf<uses_allocator<_Container, _Alloc>::value>"},
{"lineNum":"  245","line":"         >"},
{"lineNum":"  246","line":"stack(_Container, _Alloc)"},
{"lineNum":"  247","line":"    -> stack<typename _Container::value_type, _Container>;"},
{"lineNum":"  248","line":"#endif"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"template <class _Tp, class _Container>"},
{"lineNum":"  251","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  252","line":"bool"},
{"lineNum":"  253","line":"operator==(const stack<_Tp, _Container>& __x, const stack<_Tp, _Container>& __y)"},
{"lineNum":"  254","line":"{"},
{"lineNum":"  255","line":"    return __x.c == __y.c;"},
{"lineNum":"  256","line":"}"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"template <class _Tp, class _Container>"},
{"lineNum":"  259","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  260","line":"bool"},
{"lineNum":"  261","line":"operator< (const stack<_Tp, _Container>& __x, const stack<_Tp, _Container>& __y)"},
{"lineNum":"  262","line":"{"},
{"lineNum":"  263","line":"    return __x.c < __y.c;"},
{"lineNum":"  264","line":"}"},
{"lineNum":"  265","line":""},
{"lineNum":"  266","line":"template <class _Tp, class _Container>"},
{"lineNum":"  267","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  268","line":"bool"},
{"lineNum":"  269","line":"operator!=(const stack<_Tp, _Container>& __x, const stack<_Tp, _Container>& __y)"},
{"lineNum":"  270","line":"{"},
{"lineNum":"  271","line":"    return !(__x == __y);"},
{"lineNum":"  272","line":"}"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"template <class _Tp, class _Container>"},
{"lineNum":"  275","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  276","line":"bool"},
{"lineNum":"  277","line":"operator> (const stack<_Tp, _Container>& __x, const stack<_Tp, _Container>& __y)"},
{"lineNum":"  278","line":"{"},
{"lineNum":"  279","line":"    return __y < __x;"},
{"lineNum":"  280","line":"}"},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"template <class _Tp, class _Container>"},
{"lineNum":"  283","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  284","line":"bool"},
{"lineNum":"  285","line":"operator>=(const stack<_Tp, _Container>& __x, const stack<_Tp, _Container>& __y)"},
{"lineNum":"  286","line":"{"},
{"lineNum":"  287","line":"    return !(__x < __y);"},
{"lineNum":"  288","line":"}"},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"template <class _Tp, class _Container>"},
{"lineNum":"  291","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  292","line":"bool"},
{"lineNum":"  293","line":"operator<=(const stack<_Tp, _Container>& __x, const stack<_Tp, _Container>& __y)"},
{"lineNum":"  294","line":"{"},
{"lineNum":"  295","line":"    return !(__y < __x);"},
{"lineNum":"  296","line":"}"},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":"template <class _Tp, class _Container>"},
{"lineNum":"  299","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  300","line":"_EnableIf<__is_swappable<_Container>::value, void>"},
{"lineNum":"  301","line":"swap(stack<_Tp, _Container>& __x, stack<_Tp, _Container>& __y)"},
{"lineNum":"  302","line":"    _NOEXCEPT_(_NOEXCEPT_(__x.swap(__y)))"},
{"lineNum":"  303","line":"{"},
{"lineNum":"  304","line":"    __x.swap(__y);"},
{"lineNum":"  305","line":"}"},
{"lineNum":"  306","line":""},
{"lineNum":"  307","line":"template <class _Tp, class _Container, class _Alloc>"},
{"lineNum":"  308","line":"struct _LIBCPP_TEMPLATE_VIS uses_allocator<stack<_Tp, _Container>, _Alloc>"},
{"lineNum":"  309","line":"    : public uses_allocator<_Container, _Alloc>"},
{"lineNum":"  310","line":"{"},
{"lineNum":"  311","line":"};"},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":"_LIBCPP_END_NAMESPACE_STD"},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"#endif // _LIBCPP_STACK"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 6, "covered" : 2,};
var merged_data = [];
