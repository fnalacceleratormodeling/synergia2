var data = {lines:[
{"lineNum":"    1","line":"/*============================================================================="},
{"lineNum":"    2","line":"    Copyright (c) 2001-2011 Joel de Guzman"},
{"lineNum":"    3","line":"    Copyright (c) 2001-2009 Daniel Nuffer"},
{"lineNum":"    4","line":"    http://spirit.sourceforge.net/"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"  Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    7","line":"  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    8","line":"=============================================================================*/"},
{"lineNum":"    9","line":"#ifndef BOOST_SPIRIT_BASIC_CHSET_APRIL_17_2008"},
{"lineNum":"   10","line":"#define BOOST_SPIRIT_BASIC_CHSET_APRIL_17_2008"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"#if defined(_MSC_VER)"},
{"lineNum":"   13","line":"#pragma once"},
{"lineNum":"   14","line":"#endif"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   17","line":"#include <bitset>"},
{"lineNum":"   18","line":"#include <climits>"},
{"lineNum":"   19","line":"#include <boost/spirit/home/support/char_set/range_run.hpp>"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"namespace boost { namespace spirit { namespace support { namespace detail"},
{"lineNum":"   22","line":"{"},
{"lineNum":"   23","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   24","line":"    //"},
{"lineNum":"   25","line":"    //  basic_chset: basic character set implementation using range_run"},
{"lineNum":"   26","line":"    //"},
{"lineNum":"   27","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   28","line":"    template <typename Char>"},
{"lineNum":"   29","line":"    struct basic_chset"},
{"lineNum":"   30","line":"    {"},
{"lineNum":"   31","line":"        basic_chset() {}"},
{"lineNum":"   32","line":"        basic_chset(basic_chset const& arg_)"},
{"lineNum":"   33","line":"          : rr(arg_.rr) {}"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"        bool"},
{"lineNum":"   36","line":"        test(Char v) const"},
{"lineNum":"   37","line":"        {"},
{"lineNum":"   38","line":"            return rr.test(v);"},
{"lineNum":"   39","line":"        }"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"        void"},
{"lineNum":"   42","line":"        set(Char from, Char to)"},
{"lineNum":"   43","line":"        {"},
{"lineNum":"   44","line":"            rr.set(range<Char>(from, to));"},
{"lineNum":"   45","line":"        }"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"        void"},
{"lineNum":"   48","line":"        set(Char c)"},
{"lineNum":"   49","line":"        {"},
{"lineNum":"   50","line":"            rr.set(range<Char>(c, c));"},
{"lineNum":"   51","line":"        }"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"        void"},
{"lineNum":"   54","line":"        clear(Char from, Char to)"},
{"lineNum":"   55","line":"        {"},
{"lineNum":"   56","line":"            rr.clear(range<Char>(from, to));"},
{"lineNum":"   57","line":"        }"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"        void"},
{"lineNum":"   60","line":"        clear(Char c)"},
{"lineNum":"   61","line":"        {"},
{"lineNum":"   62","line":"            rr.clear(range<Char>(c, c));"},
{"lineNum":"   63","line":"        }"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"        void"},
{"lineNum":"   66","line":"        clear()"},
{"lineNum":"   67","line":"        {"},
{"lineNum":"   68","line":"            rr.clear();"},
{"lineNum":"   69","line":"        }"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"        void"},
{"lineNum":"   72","line":"        inverse()"},
{"lineNum":"   73","line":"        {"},
{"lineNum":"   74","line":"            basic_chset inv;"},
{"lineNum":"   75","line":"            inv.set("},
{"lineNum":"   76","line":"                (std::numeric_limits<Char>::min)(),"},
{"lineNum":"   77","line":"                (std::numeric_limits<Char>::max)()"},
{"lineNum":"   78","line":"            );"},
{"lineNum":"   79","line":"            inv -= *this;"},
{"lineNum":"   80","line":"            swap(inv);"},
{"lineNum":"   81","line":"        }"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"        void"},
{"lineNum":"   84","line":"        swap(basic_chset& x)"},
{"lineNum":"   85","line":"        {"},
{"lineNum":"   86","line":"            rr.swap(x.rr);"},
{"lineNum":"   87","line":"        }"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"        basic_chset&"},
{"lineNum":"   91","line":"        operator|=(basic_chset const& x)"},
{"lineNum":"   92","line":"        {"},
{"lineNum":"   93","line":"            typedef typename range_run<Char>::const_iterator const_iterator;"},
{"lineNum":"   94","line":"            for (const_iterator iter = x.rr.begin(); iter != x.rr.end(); ++iter)"},
{"lineNum":"   95","line":"                rr.set(*iter);"},
{"lineNum":"   96","line":"            return *this;"},
{"lineNum":"   97","line":"        }"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"        basic_chset&"},
{"lineNum":"  100","line":"        operator&=(basic_chset const& x)"},
{"lineNum":"  101","line":"        {"},
{"lineNum":"  102","line":"            basic_chset inv;"},
{"lineNum":"  103","line":"            inv.set("},
{"lineNum":"  104","line":"                (std::numeric_limits<Char>::min)(),"},
{"lineNum":"  105","line":"                (std::numeric_limits<Char>::max)()"},
{"lineNum":"  106","line":"            );"},
{"lineNum":"  107","line":"            inv -= x;"},
{"lineNum":"  108","line":"            *this -= inv;"},
{"lineNum":"  109","line":"            return *this;"},
{"lineNum":"  110","line":"        }"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"        basic_chset&"},
{"lineNum":"  113","line":"        operator-=(basic_chset const& x)"},
{"lineNum":"  114","line":"        {"},
{"lineNum":"  115","line":"            typedef typename range_run<Char>::const_iterator const_iterator;"},
{"lineNum":"  116","line":"            for (const_iterator iter = x.rr.begin(); iter != x.rr.end(); ++iter)"},
{"lineNum":"  117","line":"                rr.clear(*iter);"},
{"lineNum":"  118","line":"            return *this;"},
{"lineNum":"  119","line":"        }"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"        basic_chset&"},
{"lineNum":"  122","line":"        operator^=(basic_chset const& x)"},
{"lineNum":"  123","line":"        {"},
{"lineNum":"  124","line":"            basic_chset bma = x;"},
{"lineNum":"  125","line":"            bma -= *this;"},
{"lineNum":"  126","line":"            *this -= x;"},
{"lineNum":"  127","line":"            *this |= bma;"},
{"lineNum":"  128","line":"            return *this;"},
{"lineNum":"  129","line":"        }"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"        private: range_run<Char> rr;"},
{"lineNum":"  132","line":"    };"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"#if (CHAR_BIT == 8)"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  137","line":"    //"},
{"lineNum":"  138","line":"    //  basic_chset: specializations for 8 bit chars using std::bitset"},
{"lineNum":"  139","line":"    //"},
{"lineNum":"  140","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  141","line":"    template <typename Char>"},
{"lineNum":"  142","line":"    struct basic_chset_8bit"},
{"lineNum":"  143","line":"    {"},
{"lineNum":"  144","line":"        basic_chset_8bit() {}"},
{"lineNum":"  145","line":"        basic_chset_8bit(basic_chset_8bit const& arg_)"},
{"lineNum":"  146","line":"          : bset(arg_.bset) {}","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"        bool"},
{"lineNum":"  149","line":"        test(Char v) const"},
{"lineNum":"  150","line":"        {"},
{"lineNum":"  151","line":"            return bset.test((unsigned char)v);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  152","line":"        }"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"        void"},
{"lineNum":"  155","line":"        set(Char from, Char to)"},
{"lineNum":"  156","line":"        {"},
{"lineNum":"  157","line":"            for (int i = from; i <= to; ++i)","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  158","line":"                bset.set((unsigned char)i);","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  159","line":"        }"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"        void"},
{"lineNum":"  162","line":"        set(Char c)"},
{"lineNum":"  163","line":"        {"},
{"lineNum":"  164","line":"            bset.set((unsigned char)c);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  165","line":"        }"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"        void"},
{"lineNum":"  168","line":"        clear(Char from, Char to)"},
{"lineNum":"  169","line":"        {"},
{"lineNum":"  170","line":"            for (int i = from; i <= to; ++i)"},
{"lineNum":"  171","line":"                bset.reset((unsigned char)i);"},
{"lineNum":"  172","line":"        }"},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"        void"},
{"lineNum":"  175","line":"        clear(Char c)"},
{"lineNum":"  176","line":"        {"},
{"lineNum":"  177","line":"            bset.reset((unsigned char)c);"},
{"lineNum":"  178","line":"        }"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"        void"},
{"lineNum":"  181","line":"        clear()"},
{"lineNum":"  182","line":"        {"},
{"lineNum":"  183","line":"            bset.reset();"},
{"lineNum":"  184","line":"        }"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"        void"},
{"lineNum":"  187","line":"        inverse()"},
{"lineNum":"  188","line":"        {"},
{"lineNum":"  189","line":"            bset.flip();"},
{"lineNum":"  190","line":"        }"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"        void"},
{"lineNum":"  193","line":"        swap(basic_chset_8bit& x)"},
{"lineNum":"  194","line":"        {"},
{"lineNum":"  195","line":"            std::swap(bset, x.bset);"},
{"lineNum":"  196","line":"        }"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"        basic_chset_8bit&"},
{"lineNum":"  199","line":"        operator|=(basic_chset_8bit const& x)"},
{"lineNum":"  200","line":"        {"},
{"lineNum":"  201","line":"            bset |= x.bset;"},
{"lineNum":"  202","line":"            return *this;"},
{"lineNum":"  203","line":"        }"},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"        basic_chset_8bit&"},
{"lineNum":"  206","line":"        operator&=(basic_chset_8bit const& x)"},
{"lineNum":"  207","line":"        {"},
{"lineNum":"  208","line":"            bset &= x.bset;"},
{"lineNum":"  209","line":"            return *this;"},
{"lineNum":"  210","line":"        }"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"        basic_chset_8bit&"},
{"lineNum":"  213","line":"        operator-=(basic_chset_8bit const& x)"},
{"lineNum":"  214","line":"        {"},
{"lineNum":"  215","line":"            bset &= ~x.bset;"},
{"lineNum":"  216","line":"            return *this;"},
{"lineNum":"  217","line":"        }"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"        basic_chset_8bit&"},
{"lineNum":"  220","line":"        operator^=(basic_chset_8bit const& x)"},
{"lineNum":"  221","line":"        {"},
{"lineNum":"  222","line":"            bset ^= x.bset;"},
{"lineNum":"  223","line":"            return *this;"},
{"lineNum":"  224","line":"        }"},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"        private: std::bitset<256> bset;"},
{"lineNum":"  227","line":"    };"},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"    /////////////////////////////////"},
{"lineNum":"  230","line":"    template <>"},
{"lineNum":"  231","line":"    struct basic_chset<char>"},
{"lineNum":"  232","line":"      : basic_chset_8bit<char> {};"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"    /////////////////////////////////"},
{"lineNum":"  235","line":"    template <>"},
{"lineNum":"  236","line":"    struct basic_chset<signed char>"},
{"lineNum":"  237","line":"      : basic_chset_8bit<signed char> {};"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"    /////////////////////////////////"},
{"lineNum":"  240","line":"    template <>"},
{"lineNum":"  241","line":"    struct basic_chset<unsigned char>"},
{"lineNum":"  242","line":"      : basic_chset_8bit<unsigned char> {};"},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"#endif // #if (CHAR_BIT == 8)"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"}}}}"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"#endif"},
{"lineNum":"  249","line":""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 5, "covered" : 0,};
var merged_data = [];
