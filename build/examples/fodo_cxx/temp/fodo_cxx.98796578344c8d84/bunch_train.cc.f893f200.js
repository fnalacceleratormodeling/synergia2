var data = {lines:[
{"lineNum":"    1","line":"#include \"bunch_train.h\""},
{"lineNum":"    2","line":"#include \"synergia/utils/parallel_utils.h\""},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#if 0"},
{"lineNum":"    5","line":"void"},
{"lineNum":"    6","line":"Bunch_train::find_parent_comm()"},
{"lineNum":"    7","line":"{"},
{"lineNum":"    8","line":"  try{"},
{"lineNum":"    9","line":"    if (bunches.size()>0) {"},
{"lineNum":"   10","line":"        // check if all bunches has the same parent communicator"},
{"lineNum":"   11","line":"        MPI_Comm comm_test=bunches[0]->get_comm().get_parent_sptr()->get();"},
{"lineNum":"   12","line":"\tfor (size_t i = 1; i < bunches.size(); ++i) {"},
{"lineNum":"   13","line":" \t      int result;"},
{"lineNum":"   14","line":" \t      MPI_Comm_compare( comm_test, bunches[i]->get_comm().get_parent_sptr()->get(), &result);"},
{"lineNum":"   15","line":" \t      if (result != MPI_IDENT) {"},
{"lineNum":"   16","line":"             \tthrow std::runtime_error(\"Bunch_train, find_parent_comm_sptr: bunches have different parrent comunicator\");"},
{"lineNum":"   17","line":" \t      }"},
{"lineNum":"   18","line":" \t}"},
{"lineNum":"   19","line":" \tparent_comm_sptr=bunches[0]->get_comm().get_parent_sptr();"},
{"lineNum":"   20","line":"    }"},
{"lineNum":"   21","line":"    else{"},
{"lineNum":"   22","line":"\t throw std::runtime_error("},
{"lineNum":"   23","line":"\t    \"Bunch_train, find_parent_comm_sptr: number of bunches is zero, there is no commuicator\");"},
{"lineNum":"   24","line":"    }"},
{"lineNum":"   25","line":"    has_parent_comm=true;"},
{"lineNum":"   26","line":"  }"},
{"lineNum":"   27","line":"  catch (std::exception const& e) {"},
{"lineNum":"   28","line":"         std::cout<<e.what()<<std::endl;"},
{"lineNum":"   29","line":"         MPI_Abort(MPI_COMM_WORLD, 333);"},
{"lineNum":"   30","line":"  }"},
{"lineNum":"   31","line":"}"},
{"lineNum":"   32","line":"#endif"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"void"},
{"lineNum":"   35","line":"Bunch_train::calculates_counts_and_offsets_for_impedance()"},
{"lineNum":"   36","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   37","line":"#if 0"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"  try{"},
{"lineNum":"   40","line":"     if (!has_parent_comm) find_parent_comm_sptr();"},
{"lineNum":"   41","line":"     int size_parent=parent_comm_sptr->get_size();"},
{"lineNum":"   42","line":"     proc_counts_imped.resize(size_parent);"},
{"lineNum":"   43","line":"     proc_offsets_imped.resize(size_parent);"},
{"lineNum":"   44","line":" \t  counts_and_offsets_for_impedance(*parent_comm_sptr, bunches.size(), proc_offsets_imped, proc_counts_imped);"},
{"lineNum":"   45","line":"  }"},
{"lineNum":"   46","line":"  catch (std::exception const& e) {"},
{"lineNum":"   47","line":"        std::cout<<e.what()<<std::endl;"},
{"lineNum":"   48","line":"        MPI_Abort(MPI_COMM_WORLD, 333);"},
{"lineNum":"   49","line":"  }"},
{"lineNum":"   50","line":"#endif"},
{"lineNum":"   51","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"#if 0"},
{"lineNum":"   55","line":"Commxx"},
{"lineNum":"   56","line":"Bunch_train::get_parent_comm()"},
{"lineNum":"   57","line":"{"},
{"lineNum":"   58","line":"  if (!has_parent_comm) find_parent_comm();"},
{"lineNum":"   59","line":"  return parent_comm;"},
{"lineNum":"   60","line":"}"},
{"lineNum":"   61","line":"#endif"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"void"},
{"lineNum":"   64","line":"Bunch_train::set_bucket_indices()"},
{"lineNum":"   65","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   66","line":"#if 0"},
{"lineNum":"   67","line":"    std::list<int > found_indices;"},
{"lineNum":"   68","line":"    for (size_t i = 0; i < bunches.size(); ++i) {"},
{"lineNum":"   69","line":"        if (!bunches[i]->is_bucket_index_assigned()) {"},
{"lineNum":"   70","line":"            bunches[i]->set_bucket_index(i);"},
{"lineNum":"   71","line":"        }"},
{"lineNum":"   72","line":"        for (std::list<int >::const_iterator it = found_indices.begin();"},
{"lineNum":"   73","line":"                it != found_indices.end(); ++it) {"},
{"lineNum":"   74","line":"            if (*it >= bunches[i]->get_bucket_index()) {"},
{"lineNum":"   75","line":"                throw std::runtime_error("},
{"lineNum":"   76","line":"                        \"Bunch_train: bunch bucket indices must be either in strictly increasing order or all zero; otherwise wake field does not work\");"},
{"lineNum":"   77","line":"            }"},
{"lineNum":"   78","line":"        }"},
{"lineNum":"   79","line":"        found_indices.push_back(bunches[i]->get_bucket_index());"},
{"lineNum":"   80","line":"    }"},
{"lineNum":"   81","line":"#endif"},
{"lineNum":"   82","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"#if 0"},
{"lineNum":"   85","line":"Bunch_train::Bunch_train(Bunches const& bunches, double spacing)"},
{"lineNum":"   86","line":"    : bunches(bunches)"},
{"lineNum":"   87","line":"    , spacings(std::vector<double >(bunches.size() - 1, spacing))"},
{"lineNum":"   88","line":"    , has_parent_comm(false)"},
{"lineNum":"   89","line":"{"},
{"lineNum":"   90","line":"    set_bucket_indices();"},
{"lineNum":"   91","line":"    calculates_counts_and_offsets_for_impedance();"},
{"lineNum":"   92","line":"}"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"Bunch_train::Bunch_train(Bunches const& bunches,"},
{"lineNum":"   95","line":"        std::vector<double > const& spacings) :"},
{"lineNum":"   96","line":"                bunches(bunches),"},
{"lineNum":"   97","line":"                spacings(spacings),"},
{"lineNum":"   98","line":"                has_parent_comm(false)"},
{"lineNum":"   99","line":"{"},
{"lineNum":"  100","line":"    if (spacings.size() != bunches.size() - 1) {"},
{"lineNum":"  101","line":"        throw std::runtime_error("},
{"lineNum":"  102","line":"                \"Bunch_train:: spacings must have length (length(bunches)-1)\");"},
{"lineNum":"  103","line":"    }"},
{"lineNum":"  104","line":"    set_bucket_indices();"},
{"lineNum":"  105","line":"    calculates_counts_and_offsets_for_impedance();"},
{"lineNum":"  106","line":"}"},
{"lineNum":"  107","line":"#endif"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"Bunch_train::Bunch_train("},
{"lineNum":"  110","line":"        Reference_particle const & ref,"},
{"lineNum":"  111","line":"        size_t num_bunches,"},
{"lineNum":"  112","line":"        size_t num_particles_per_bunch,"},
{"lineNum":"  113","line":"        double num_real_particles_per_bunch,"},
{"lineNum":"  114","line":"        double spacing,"},
{"lineNum":"  115","line":"        Commxx const & bt_comm,"},
{"lineNum":"  116","line":"        size_t num_spectator_per_bunch,"},
{"lineNum":"  117","line":"        int index )"},
{"lineNum":"  118","line":": comm(std::make_shared<Commxx>(bt_comm))"},
{"lineNum":"  119","line":", bunches()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  120","line":", spacings()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  121","line":", index(index)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  122","line":", num_bunches(num_bunches)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  123","line":", num_buckets(num_bunches)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  124","line":", bunch_idx_map(num_bunches, -1)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  125","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  126","line":"    for(auto i=0; i<num_bunches; ++i)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  127","line":"        spacings.emplace_back( spacing );"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"    // empty train"},
{"lineNum":"  130","line":"    if (comm->is_null()) return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  131","line":"    if (num_bunches == 0) return;"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"    // construct bunches"},
{"lineNum":"  134","line":"    int rank = comm->rank();"},
{"lineNum":"  135","line":"    int size = comm->size();"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"    int bunches_per_rank = 0;"},
{"lineNum":"  138","line":"    int color = 0;"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"    if (size < num_bunches)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  141","line":"    {"},
{"lineNum":"  142","line":"       if (num_bunches % size != 0)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  143","line":"       {"},
{"lineNum":"  144","line":"           throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  145","line":"                   \"Bunch_train::Bunch_train() number of bunches must be divisible \""},
{"lineNum":"  146","line":"                   \"by the number of ranks.\" );"},
{"lineNum":"  147","line":"       }"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"       bunches_per_rank = num_bunches / size;"},
{"lineNum":"  150","line":"       color = rank;"},
{"lineNum":"  151","line":"    }"},
{"lineNum":"  152","line":"    else"},
{"lineNum":"  153","line":"    {"},
{"lineNum":"  154","line":"        if (size % num_bunches != 0)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  155","line":"        {"},
{"lineNum":"  156","line":"            throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  157","line":"                    \"Bunch_train::Bunch_train() number of ranks must be divisible \""},
{"lineNum":"  158","line":"                    \"by the number of bunches.\" );"},
{"lineNum":"  159","line":"        }"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"        bunches_per_rank = 1;"},
{"lineNum":"  162","line":"        color = rank / (size / num_bunches);  // rank / ranks_per_bunch","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  163","line":"    }"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"    for (int b=0; b<bunches_per_rank; ++b)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  166","line":"    {"},
{"lineNum":"  167","line":"        // bunch_index and array_index"},
{"lineNum":"  168","line":"        int b_idx = b + color * bunches_per_rank;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  169","line":"        int a_idx = bunches.size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"        // construct the idx map"},
{"lineNum":"  172","line":"        bunch_idx_map[b_idx] = a_idx;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"        // construct and push bunch object"},
{"lineNum":"  175","line":"        bunches.emplace_back( ref,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  176","line":"                num_particles_per_bunch,"},
{"lineNum":"  177","line":"                num_real_particles_per_bunch,"},
{"lineNum":"  178","line":"                comm->split(color),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  179","line":"                num_spectator_per_bunch,"},
{"lineNum":"  180","line":"                b_idx,         // bunch index in the train"},
{"lineNum":"  181","line":"                b_idx,         // bucket index set to the same of bunch index"},
{"lineNum":"  182","line":"                a_idx,         // array index in the bunches array"},
{"lineNum":"  183","line":"                index          // train index"},
{"lineNum":"  184","line":"                );"},
{"lineNum":"  185","line":"    }"},
{"lineNum":"  186","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"std::vector<double> &"},
{"lineNum":"  189","line":"Bunch_train::get_spacings()"},
{"lineNum":"  190","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  191","line":"    return spacings;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  192","line":"}"},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"std::vector<int> &"},
{"lineNum":"  195","line":"Bunch_train::get_proc_counts_for_impedance()"},
{"lineNum":"  196","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  197","line":"  return proc_counts_imped;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  198","line":"}"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"std::vector<int> &"},
{"lineNum":"  201","line":"Bunch_train::get_proc_offsets_for_impedance()"},
{"lineNum":"  202","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  203","line":"  return proc_offsets_imped;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  204","line":"}"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"void"},
{"lineNum":"  208","line":"Bunch_train::update_bunch_total_num()"},
{"lineNum":"  209","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  210","line":"#if 0"},
{"lineNum":"  211","line":"    const size_t nb = get_size();"},
{"lineNum":"  212","line":"    if (nb == 0) return;"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"    std::vector<int> nums(nb);"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"    for (int i=0; i<nb; ++i)"},
{"lineNum":"  217","line":"    {"},
{"lineNum":"  218","line":"        nums[i] = bunches[i].get_local_num();"},
{"lineNum":"  219","line":"    }"},
{"lineNum":"  220","line":""},
{"lineNum":"  221","line":"    MPI_Allreduce(MPI_IN_PLACE, &nums[0], nb, MPI_INT, MPI_SUM,"},
{"lineNum":"  222","line":"            get_parent_comm());"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"    for (int i=0; i<nb; ++i)"},
{"lineNum":"  225","line":"    {"},
{"lineNum":"  226","line":"        bunches[i].set_total_num(nums[i]);"},
{"lineNum":"  227","line":"    }"},
{"lineNum":"  228","line":"#endif"},
{"lineNum":"  229","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"#if 0"},
{"lineNum":"  233","line":"template<class Archive>"},
{"lineNum":"  234","line":"    void"},
{"lineNum":"  235","line":"    Bunch_train::serialize(Archive & ar, const unsigned int version)"},
{"lineNum":"  236","line":"    {"},
{"lineNum":"  237","line":"        ar & CEREAL_NVP(bunches);"},
{"lineNum":"  238","line":"        ar & CEREAL_NVP(spacings);"},
{"lineNum":"  239","line":"        ar & CEREAL_NVP(has_parent_comm);"},
{"lineNum":"  240","line":"        ar & CEREAL_NVP(parent_comm_sptr);"},
{"lineNum":"  241","line":"        ar & CEREAL_NVP(proc_counts_imped);"},
{"lineNum":"  242","line":"        ar & CEREAL_NVP(proc_offsets_imped);"},
{"lineNum":"  243","line":"    }"},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"template"},
{"lineNum":"  246","line":"void"},
{"lineNum":"  247","line":"Bunch_train::serialize<cereal::BinaryOutputArchive >("},
{"lineNum":"  248","line":"        cereal::BinaryOutputArchive & ar, const unsigned int version);"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"template"},
{"lineNum":"  251","line":"void"},
{"lineNum":"  252","line":"Bunch_train::serialize<cereal::XMLOutputArchive >("},
{"lineNum":"  253","line":"        cereal::XMLOutputArchive & ar, const unsigned int version);"},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"template"},
{"lineNum":"  256","line":"void"},
{"lineNum":"  257","line":"Bunch_train::serialize<cereal::BinaryInputArchive >("},
{"lineNum":"  258","line":"        cereal::BinaryInputArchive & ar, const unsigned int version);"},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"template"},
{"lineNum":"  261","line":"void"},
{"lineNum":"  262","line":"Bunch_train::serialize<cereal::XMLInputArchive >("},
{"lineNum":"  263","line":"        cereal::XMLInputArchive & ar, const unsigned int version);"},
{"lineNum":"  264","line":"#endif"},
{"lineNum":"  265","line":""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 34, "covered" : 0,};
var merged_data = [];
