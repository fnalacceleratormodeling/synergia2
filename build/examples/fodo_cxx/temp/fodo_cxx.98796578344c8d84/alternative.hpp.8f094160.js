var data = {lines:[
{"lineNum":"    1","line":"/*============================================================================="},
{"lineNum":"    2","line":"    Copyright (c) 2001-2011 Joel de Guzman"},
{"lineNum":"    3","line":"    Copyright (c) 2001-2011 Hartmut Kaiser"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"    Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    6","line":"    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    7","line":"=============================================================================*/"},
{"lineNum":"    8","line":"#if !defined(SPIRIT_ALTERNATIVE_FEBRUARY_05_2007_1153AM)"},
{"lineNum":"    9","line":"#define SPIRIT_ALTERNATIVE_FEBRUARY_05_2007_1153AM"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"#if defined(_MSC_VER)"},
{"lineNum":"   12","line":"#pragma once"},
{"lineNum":"   13","line":"#endif"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"#include <boost/spirit/home/qi/detail/alternative_function.hpp>"},
{"lineNum":"   16","line":"#include <boost/spirit/home/qi/meta_compiler.hpp>"},
{"lineNum":"   17","line":"#include <boost/spirit/home/qi/parser.hpp>"},
{"lineNum":"   18","line":"#include <boost/spirit/home/qi/detail/attributes.hpp>"},
{"lineNum":"   19","line":"#include <boost/spirit/home/support/has_semantic_action.hpp>"},
{"lineNum":"   20","line":"#include <boost/spirit/home/support/handles_container.hpp>"},
{"lineNum":"   21","line":"#include <boost/spirit/home/support/detail/what_function.hpp>"},
{"lineNum":"   22","line":"#include <boost/spirit/home/support/unused.hpp>"},
{"lineNum":"   23","line":"#include <boost/spirit/home/support/info.hpp>"},
{"lineNum":"   24","line":"#include <boost/fusion/include/any.hpp>"},
{"lineNum":"   25","line":"#include <boost/fusion/include/mpl.hpp>"},
{"lineNum":"   26","line":"#include <boost/fusion/include/for_each.hpp>"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"namespace boost { namespace spirit"},
{"lineNum":"   29","line":"{"},
{"lineNum":"   30","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   31","line":"    // Enablers"},
{"lineNum":"   32","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   33","line":"    template <>"},
{"lineNum":"   34","line":"    struct use_operator<qi::domain, proto::tag::bitwise_or> // enables |"},
{"lineNum":"   35","line":"      : mpl::true_ {};"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"    template <>"},
{"lineNum":"   38","line":"    struct flatten_tree<qi::domain, proto::tag::bitwise_or> // flattens |"},
{"lineNum":"   39","line":"      : mpl::true_ {};"},
{"lineNum":"   40","line":"}}"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"namespace boost { namespace spirit { namespace qi"},
{"lineNum":"   43","line":"{"},
{"lineNum":"   44","line":"    template <typename Elements>"},
{"lineNum":"   45","line":"    struct alternative : nary_parser<alternative<Elements> >","class":"lineNoCov","hits":"0","possible_hits":"22",},
{"lineNum":"   46","line":"    {"},
{"lineNum":"   47","line":"        template <typename Context, typename Iterator>"},
{"lineNum":"   48","line":"        struct attribute"},
{"lineNum":"   49","line":"        {"},
{"lineNum":"   50","line":"            // Put all the element attributes in a tuple"},
{"lineNum":"   51","line":"            typedef typename traits::build_attribute_sequence<"},
{"lineNum":"   52","line":"                Elements, Context, traits::alternative_attribute_transform"},
{"lineNum":"   53","line":"              , Iterator, qi::domain"},
{"lineNum":"   54","line":"            >::type all_attributes;"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"            // Ok, now make a variant over the attribute sequence. Note that"},
{"lineNum":"   57","line":"            // build_variant makes sure that 1) all attributes in the variant"},
{"lineNum":"   58","line":"            // are unique 2) puts the unused attribute, if there is any, to"},
{"lineNum":"   59","line":"            // the front and 3) collapses single element variants, variant<T>"},
{"lineNum":"   60","line":"            // to T."},
{"lineNum":"   61","line":"            typedef typename"},
{"lineNum":"   62","line":"                traits::build_variant<all_attributes>::type"},
{"lineNum":"   63","line":"            type;"},
{"lineNum":"   64","line":"        };"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"        alternative(Elements const& elements_)"},
{"lineNum":"   67","line":"          : elements(elements_) {}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"        template <typename Iterator, typename Context"},
{"lineNum":"   70","line":"          , typename Skipper, typename Attribute>"},
{"lineNum":"   71","line":"        bool parse(Iterator& first, Iterator const& last"},
{"lineNum":"   72","line":"          , Context& context, Skipper const& skipper"},
{"lineNum":"   73","line":"          , Attribute& attr_) const"},
{"lineNum":"   74","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   75","line":"            detail::alternative_function<Iterator, Context, Skipper, Attribute>"},
{"lineNum":"   76","line":"                f(first, last, context, skipper, attr_);"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"            // return true if *any* of the parsers succeed"},
{"lineNum":"   79","line":"            return fusion::any(elements, f);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   80","line":"        }"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"        template <typename Context>"},
{"lineNum":"   83","line":"        info what(Context& context) const"},
{"lineNum":"   84","line":"        {"},
{"lineNum":"   85","line":"            info result(\"alternative\");"},
{"lineNum":"   86","line":"            fusion::for_each(elements,"},
{"lineNum":"   87","line":"                spirit::detail::what_function<Context>(result, context));"},
{"lineNum":"   88","line":"            return result;"},
{"lineNum":"   89","line":"        }"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"        Elements elements;"},
{"lineNum":"   92","line":"    };"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   95","line":"    // Parser generators: make_xxx function (objects)"},
{"lineNum":"   96","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   97","line":"    template <typename Elements, typename Modifiers>"},
{"lineNum":"   98","line":"    struct make_composite<proto::tag::bitwise_or, Elements, Modifiers>"},
{"lineNum":"   99","line":"      : make_nary_composite<Elements, alternative>"},
{"lineNum":"  100","line":"    {};"},
{"lineNum":"  101","line":"}}}"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"namespace boost { namespace spirit { namespace traits"},
{"lineNum":"  104","line":"{"},
{"lineNum":"  105","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  106","line":"    template <typename Elements>"},
{"lineNum":"  107","line":"    struct has_semantic_action<qi::alternative<Elements> >"},
{"lineNum":"  108","line":"      : nary_has_semantic_action<Elements> {};"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  111","line":"    template <typename Elements, typename Attribute, typename Context"},
{"lineNum":"  112","line":"      , typename Iterator>"},
{"lineNum":"  113","line":"    struct handles_container<qi::alternative<Elements>, Attribute, Context"},
{"lineNum":"  114","line":"      , Iterator>"},
{"lineNum":"  115","line":"      : nary_handles_container<Elements, Attribute, Context, Iterator> {};"},
{"lineNum":"  116","line":"}}}"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 4, "covered" : 0,};
var merged_data = [];
