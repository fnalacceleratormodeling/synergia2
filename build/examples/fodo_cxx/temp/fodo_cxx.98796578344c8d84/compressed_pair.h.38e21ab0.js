var data = {lines:[
{"lineNum":"    1","line":"// -*- C++ -*-"},
{"lineNum":"    2","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions."},
{"lineNum":"    5","line":"// See https://llvm.org/LICENSE.txt for license information."},
{"lineNum":"    6","line":"// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef _LIBCPP___MEMORY_COMPRESSED_PAIR_H"},
{"lineNum":"   11","line":"#define _LIBCPP___MEMORY_COMPRESSED_PAIR_H"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"#include <__config>"},
{"lineNum":"   14","line":"#include <__utility/forward.h>"},
{"lineNum":"   15","line":"#include <tuple> // needed in c++03 for some constructors"},
{"lineNum":"   16","line":"#include <type_traits>"},
{"lineNum":"   17","line":"#include <utility>"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"},
{"lineNum":"   20","line":"#pragma GCC system_header"},
{"lineNum":"   21","line":"#endif"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"_LIBCPP_PUSH_MACROS"},
{"lineNum":"   24","line":"#include <__undef_macros>"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"_LIBCPP_BEGIN_NAMESPACE_STD"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"// Tag used to default initialize one or both of the pair\'s elements."},
{"lineNum":"   29","line":"struct __default_init_tag {};"},
{"lineNum":"   30","line":"struct __value_init_tag {};"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"template <class _Tp, int _Idx,"},
{"lineNum":"   33","line":"          bool _CanBeEmptyBase ="},
{"lineNum":"   34","line":"              is_empty<_Tp>::value && !__libcpp_is_final<_Tp>::value>"},
{"lineNum":"   35","line":"struct __compressed_pair_elem {"},
{"lineNum":"   36","line":"  typedef _Tp _ParamT;"},
{"lineNum":"   37","line":"  typedef _Tp& reference;"},
{"lineNum":"   38","line":"  typedef const _Tp& const_reference;"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":"   41","line":"  __compressed_pair_elem(__default_init_tag) {}"},
{"lineNum":"   42","line":"  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":"   43","line":"  __compressed_pair_elem(__value_init_tag) : __value_() {}"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"  template <class _Up, class = typename enable_if<"},
{"lineNum":"   46","line":"      !is_same<__compressed_pair_elem, typename decay<_Up>::type>::value"},
{"lineNum":"   47","line":"  >::type>"},
{"lineNum":"   48","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"   49","line":"  _LIBCPP_CONSTEXPR explicit"},
{"lineNum":"   50","line":"  __compressed_pair_elem(_Up&& __u)"},
{"lineNum":"   51","line":"      : __value_(_VSTD::forward<_Up>(__u))","class":"linePartCov","hits":"56","order":"12","possible_hits":"1127",},
{"lineNum":"   52","line":"    {"},
{"lineNum":"   53","line":"    }"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"   57","line":"  template <class... _Args, size_t... _Indexes>"},
{"lineNum":"   58","line":"  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"   59","line":"  __compressed_pair_elem(piecewise_construct_t, tuple<_Args...> __args,"},
{"lineNum":"   60","line":"                         __tuple_indices<_Indexes...>)"},
{"lineNum":"   61","line":"      : __value_(_VSTD::forward<_Args>(_VSTD::get<_Indexes>(__args))...) {}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   62","line":"#endif"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"  _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return __value_; }","class":"linePartCov","hits":"35","order":"159","possible_hits":"145",},
{"lineNum":"   66","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"   67","line":"  const_reference __get() const _NOEXCEPT { return __value_; }","class":"linePartCov","hits":"33","order":"16","possible_hits":"133",},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"private:"},
{"lineNum":"   70","line":"  _Tp __value_;"},
{"lineNum":"   71","line":"};"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"template <class _Tp, int _Idx>"},
{"lineNum":"   74","line":"struct __compressed_pair_elem<_Tp, _Idx, true> : private _Tp {"},
{"lineNum":"   75","line":"  typedef _Tp _ParamT;"},
{"lineNum":"   76","line":"  typedef _Tp& reference;"},
{"lineNum":"   77","line":"  typedef const _Tp& const_reference;"},
{"lineNum":"   78","line":"  typedef _Tp __value_type;"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR __compressed_pair_elem() = default;"},
{"lineNum":"   81","line":"  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":"   82","line":"  __compressed_pair_elem(__default_init_tag) {}"},
{"lineNum":"   83","line":"  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":"   84","line":"  __compressed_pair_elem(__value_init_tag) : __value_type() {}"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"  template <class _Up, class = typename enable_if<"},
{"lineNum":"   87","line":"        !is_same<__compressed_pair_elem, typename decay<_Up>::type>::value"},
{"lineNum":"   88","line":"  >::type>"},
{"lineNum":"   89","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"   90","line":"  _LIBCPP_CONSTEXPR explicit"},
{"lineNum":"   91","line":"  __compressed_pair_elem(_Up&& __u)"},
{"lineNum":"   92","line":"      : __value_type(_VSTD::forward<_Up>(__u))"},
{"lineNum":"   93","line":"  {}"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"   96","line":"  template <class... _Args, size_t... _Indexes>"},
{"lineNum":"   97","line":"  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"   98","line":"  __compressed_pair_elem(piecewise_construct_t, tuple<_Args...> __args,"},
{"lineNum":"   99","line":"                         __tuple_indices<_Indexes...>)"},
{"lineNum":"  100","line":"      : __value_type(_VSTD::forward<_Args>(_VSTD::get<_Indexes>(__args))...) {}"},
{"lineNum":"  101","line":"#endif"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"  _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return *this; }"},
{"lineNum":"  104","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  105","line":"  const_reference __get() const _NOEXCEPT { return *this; }"},
{"lineNum":"  106","line":"};"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"template <class _T1, class _T2>"},
{"lineNum":"  109","line":"class __compressed_pair : private __compressed_pair_elem<_T1, 0>,"},
{"lineNum":"  110","line":"                          private __compressed_pair_elem<_T2, 1> {"},
{"lineNum":"  111","line":"public:"},
{"lineNum":"  112","line":"  // NOTE: This static assert should never fire because __compressed_pair"},
{"lineNum":"  113","line":"  // is *almost never* used in a scenario where it\'s possible for T1 == T2."},
{"lineNum":"  114","line":"  // (The exception is std::function where it is possible that the function"},
{"lineNum":"  115","line":"  //  object and the allocator have the same type)."},
{"lineNum":"  116","line":"  static_assert((!is_same<_T1, _T2>::value),"},
{"lineNum":"  117","line":"    \"__compressed_pair cannot be instantiated when T1 and T2 are the same type; \""},
{"lineNum":"  118","line":"    \"The current implementation is NOT ABI-compatible with the previous \""},
{"lineNum":"  119","line":"    \"implementation for this configuration\");"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"    typedef _LIBCPP_NODEBUG_TYPE __compressed_pair_elem<_T1, 0> _Base1;"},
{"lineNum":"  122","line":"    typedef _LIBCPP_NODEBUG_TYPE __compressed_pair_elem<_T2, 1> _Base2;"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"    template <bool _Dummy = true,"},
{"lineNum":"  125","line":"      class = typename enable_if<"},
{"lineNum":"  126","line":"          __dependent_type<is_default_constructible<_T1>, _Dummy>::value &&"},
{"lineNum":"  127","line":"          __dependent_type<is_default_constructible<_T2>, _Dummy>::value"},
{"lineNum":"  128","line":"      >::type"},
{"lineNum":"  129","line":"  >"},
{"lineNum":"  130","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  131","line":"  _LIBCPP_CONSTEXPR __compressed_pair() : _Base1(__value_init_tag()), _Base2(__value_init_tag()) {}"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"  template <class _U1, class _U2>"},
{"lineNum":"  134","line":"  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":"  135","line":"  __compressed_pair(_U1&& __t1, _U2&& __t2)"},
{"lineNum":"  136","line":"      : _Base1(_VSTD::forward<_U1>(__t1)), _Base2(_VSTD::forward<_U2>(__t2)) {}"},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  139","line":"  template <class... _Args1, class... _Args2>"},
{"lineNum":"  140","line":"  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  141","line":"  __compressed_pair(piecewise_construct_t __pc, tuple<_Args1...> __first_args,"},
{"lineNum":"  142","line":"                    tuple<_Args2...> __second_args)"},
{"lineNum":"  143","line":"      : _Base1(__pc, _VSTD::move(__first_args),"},
{"lineNum":"  144","line":"               typename __make_tuple_indices<sizeof...(_Args1)>::type()),"},
{"lineNum":"  145","line":"        _Base2(__pc, _VSTD::move(__second_args),"},
{"lineNum":"  146","line":"               typename __make_tuple_indices<sizeof...(_Args2)>::type()) {}"},
{"lineNum":"  147","line":"#endif"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  150","line":"  typename _Base1::reference first() _NOEXCEPT {"},
{"lineNum":"  151","line":"    return static_cast<_Base1&>(*this).__get();"},
{"lineNum":"  152","line":"  }"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  155","line":"  typename _Base1::const_reference first() const _NOEXCEPT {"},
{"lineNum":"  156","line":"    return static_cast<_Base1 const&>(*this).__get();"},
{"lineNum":"  157","line":"  }"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  160","line":"  typename _Base2::reference second() _NOEXCEPT {"},
{"lineNum":"  161","line":"    return static_cast<_Base2&>(*this).__get();"},
{"lineNum":"  162","line":"  }"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  165","line":"  typename _Base2::const_reference second() const _NOEXCEPT {"},
{"lineNum":"  166","line":"    return static_cast<_Base2 const&>(*this).__get();"},
{"lineNum":"  167","line":"  }"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":"  170","line":"  static _Base1* __get_first_base(__compressed_pair* __pair) _NOEXCEPT {"},
{"lineNum":"  171","line":"    return static_cast<_Base1*>(__pair);"},
{"lineNum":"  172","line":"  }"},
{"lineNum":"  173","line":"  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":"  174","line":"  static _Base2* __get_second_base(__compressed_pair* __pair) _NOEXCEPT {"},
{"lineNum":"  175","line":"    return static_cast<_Base2*>(__pair);"},
{"lineNum":"  176","line":"  }"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  179","line":"  void swap(__compressed_pair& __x)"},
{"lineNum":"  180","line":"    _NOEXCEPT_(__is_nothrow_swappable<_T1>::value &&"},
{"lineNum":"  181","line":"               __is_nothrow_swappable<_T2>::value)"},
{"lineNum":"  182","line":"  {"},
{"lineNum":"  183","line":"    using _VSTD::swap;"},
{"lineNum":"  184","line":"    swap(first(), __x.first());"},
{"lineNum":"  185","line":"    swap(second(), __x.second());"},
{"lineNum":"  186","line":"  }"},
{"lineNum":"  187","line":"};"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"template <class _T1, class _T2>"},
{"lineNum":"  190","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  191","line":"void swap(__compressed_pair<_T1, _T2>& __x, __compressed_pair<_T1, _T2>& __y)"},
{"lineNum":"  192","line":"    _NOEXCEPT_(__is_nothrow_swappable<_T1>::value &&"},
{"lineNum":"  193","line":"               __is_nothrow_swappable<_T2>::value) {"},
{"lineNum":"  194","line":"  __x.swap(__y);"},
{"lineNum":"  195","line":"}"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"_LIBCPP_END_NAMESPACE_STD"},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"_LIBCPP_POP_MACROS"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"#endif // _LIBCPP___MEMORY_COMPRESSED_PAIR_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 4, "covered" : 3,};
var merged_data = [];
