var data = {lines:[
{"lineNum":"    1","line":"/*"},
{"lineNum":"    2","line":"//@HEADER"},
{"lineNum":"    3","line":"// ************************************************************************"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"//                        Kokkos v. 3.0"},
{"lineNum":"    6","line":"//       Copyright (2020) National Technology & Engineering"},
{"lineNum":"    7","line":"//               Solutions of Sandia, LLC (NTESS)."},
{"lineNum":"    8","line":"//"},
{"lineNum":"    9","line":"// Under the terms of Contract DE-NA0003525 with NTESS,"},
{"lineNum":"   10","line":"// the U.S. Government retains certain rights in this software."},
{"lineNum":"   11","line":"//"},
{"lineNum":"   12","line":"// Redistribution and use in source and binary forms, with or without"},
{"lineNum":"   13","line":"// modification, are permitted provided that the following conditions are"},
{"lineNum":"   14","line":"// met:"},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"// 1. Redistributions of source code must retain the above copyright"},
{"lineNum":"   17","line":"// notice, this list of conditions and the following disclaimer."},
{"lineNum":"   18","line":"//"},
{"lineNum":"   19","line":"// 2. Redistributions in binary form must reproduce the above copyright"},
{"lineNum":"   20","line":"// notice, this list of conditions and the following disclaimer in the"},
{"lineNum":"   21","line":"// documentation and/or other materials provided with the distribution."},
{"lineNum":"   22","line":"//"},
{"lineNum":"   23","line":"// 3. Neither the name of the Corporation nor the names of the"},
{"lineNum":"   24","line":"// contributors may be used to endorse or promote products derived from"},
{"lineNum":"   25","line":"// this software without specific prior written permission."},
{"lineNum":"   26","line":"//"},
{"lineNum":"   27","line":"// THIS SOFTWARE IS PROVIDED BY NTESS \"AS IS\" AND ANY"},
{"lineNum":"   28","line":"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"},
{"lineNum":"   29","line":"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR"},
{"lineNum":"   30","line":"// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NTESS OR THE"},
{"lineNum":"   31","line":"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,"},
{"lineNum":"   32","line":"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,"},
{"lineNum":"   33","line":"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR"},
{"lineNum":"   34","line":"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF"},
{"lineNum":"   35","line":"// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING"},
{"lineNum":"   36","line":"// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"},
{"lineNum":"   37","line":"// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   38","line":"//"},
{"lineNum":"   39","line":"// Questions? Contact Christian R. Trott (crtrott@sandia.gov)"},
{"lineNum":"   40","line":"//"},
{"lineNum":"   41","line":"// ************************************************************************"},
{"lineNum":"   42","line":"//@HEADER"},
{"lineNum":"   43","line":"*/"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"#ifndef KOKKOS_CORE_FWD_HPP"},
{"lineNum":"   46","line":"#define KOKKOS_CORE_FWD_HPP"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"//----------------------------------------------------------------------------"},
{"lineNum":"   49","line":"// Kokkos_Macros.hpp does introspection on configuration options"},
{"lineNum":"   50","line":"// and compiler environment then sets a collection of #define macros."},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"#include <Kokkos_Macros.hpp>"},
{"lineNum":"   53","line":"#include <impl/Kokkos_Error.hpp>"},
{"lineNum":"   54","line":"#include <impl/Kokkos_Utilities.hpp>"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"#include <Kokkos_MasterLock.hpp>"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"//----------------------------------------------------------------------------"},
{"lineNum":"   59","line":"// Have assumed a 64bit build (8byte pointers) throughout the code base."},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"static_assert(sizeof(void *) == 8,"},
{"lineNum":"   62","line":"              \"Kokkos assumes 64-bit build; i.e., 8-byte pointers\");"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"//----------------------------------------------------------------------------"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"namespace Kokkos {"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"struct AUTO_t {"},
{"lineNum":"   69","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   70","line":"  constexpr const AUTO_t &operator()() const { return *this; }"},
{"lineNum":"   71","line":"};"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"namespace {"},
{"lineNum":"   74","line":"/**\\brief Token to indicate that a parameter\'s value is to be automatically"},
{"lineNum":"   75","line":" * selected */"},
{"lineNum":"   76","line":"constexpr AUTO_t AUTO = Kokkos::AUTO_t();"},
{"lineNum":"   77","line":"}  // namespace"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"struct InvalidType {};"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"}  // namespace Kokkos"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"//----------------------------------------------------------------------------"},
{"lineNum":"   84","line":"// Forward declarations for class inter-relationships"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"namespace Kokkos {"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"class HostSpace;  ///< Memory space for main process and CPU execution spaces"},
{"lineNum":"   89","line":"class AnonymousSpace;"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"template <class ExecutionSpace, class MemorySpace>"},
{"lineNum":"   92","line":"struct Device;"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"// forward declare here so that backend initializer calls can use it."},
{"lineNum":"   95","line":"struct InitArguments;"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"}  // namespace Kokkos"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"// Include backend forward statements as determined by build options"},
{"lineNum":"  100","line":"#include <KokkosCore_Config_FwdBackend.hpp>"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  103","line":"// Set the default execution space."},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"/// Define Kokkos::DefaultExecutionSpace as per configuration option"},
{"lineNum":"  106","line":"/// or chosen from the enabled execution spaces in the following order:"},
{"lineNum":"  107","line":"/// Kokkos::Cuda, Kokkos::Experimental::OpenMPTarget, Kokkos::OpenMP,"},
{"lineNum":"  108","line":"/// Kokkos::Threads, Kokkos::Serial"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"#if defined(__clang_analyzer__)"},
{"lineNum":"  111","line":"#define KOKKOS_IMPL_DEFAULT_EXEC_SPACE_ANNOTATION \\"},
{"lineNum":"  112","line":"  [[clang::annotate(\"DefaultExecutionSpace\")]]"},
{"lineNum":"  113","line":"#define KOKKOS_IMPL_DEFAULT_HOST_EXEC_SPACE_ANNOTATION \\"},
{"lineNum":"  114","line":"  [[clang::annotate(\"DefaultHostExecutionSpace\")]]"},
{"lineNum":"  115","line":"#else"},
{"lineNum":"  116","line":"#define KOKKOS_IMPL_DEFAULT_EXEC_SPACE_ANNOTATION"},
{"lineNum":"  117","line":"#define KOKKOS_IMPL_DEFAULT_HOST_EXEC_SPACE_ANNOTATION"},
{"lineNum":"  118","line":"#endif"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"namespace Kokkos {"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"#if defined(KOKKOS_ENABLE_DEFAULT_DEVICE_TYPE_CUDA)"},
{"lineNum":"  123","line":"using DefaultExecutionSpace KOKKOS_IMPL_DEFAULT_EXEC_SPACE_ANNOTATION = Cuda;"},
{"lineNum":"  124","line":"#elif defined(KOKKOS_ENABLE_DEFAULT_DEVICE_TYPE_OPENMPTARGET)"},
{"lineNum":"  125","line":"using DefaultExecutionSpace KOKKOS_IMPL_DEFAULT_EXEC_SPACE_ANNOTATION ="},
{"lineNum":"  126","line":"    Experimental::OpenMPTarget;"},
{"lineNum":"  127","line":"#elif defined(KOKKOS_ENABLE_DEFAULT_DEVICE_TYPE_HIP)"},
{"lineNum":"  128","line":"using DefaultExecutionSpace KOKKOS_IMPL_DEFAULT_EXEC_SPACE_ANNOTATION ="},
{"lineNum":"  129","line":"    Experimental::HIP;"},
{"lineNum":"  130","line":"#elif defined(KOKKOS_ENABLE_DEFAULT_DEVICE_TYPE_SYCL)"},
{"lineNum":"  131","line":"using DefaultExecutionSpace KOKKOS_IMPL_DEFAULT_EXEC_SPACE_ANNOTATION ="},
{"lineNum":"  132","line":"    Experimental::SYCL;"},
{"lineNum":"  133","line":"#elif defined(KOKKOS_ENABLE_DEFAULT_DEVICE_TYPE_OPENMP)"},
{"lineNum":"  134","line":"using DefaultExecutionSpace KOKKOS_IMPL_DEFAULT_EXEC_SPACE_ANNOTATION = OpenMP;"},
{"lineNum":"  135","line":"#elif defined(KOKKOS_ENABLE_DEFAULT_DEVICE_TYPE_THREADS)"},
{"lineNum":"  136","line":"using DefaultExecutionSpace KOKKOS_IMPL_DEFAULT_EXEC_SPACE_ANNOTATION = Threads;"},
{"lineNum":"  137","line":"#elif defined(KOKKOS_ENABLE_DEFAULT_DEVICE_TYPE_HPX)"},
{"lineNum":"  138","line":"using DefaultExecutionSpace KOKKOS_IMPL_DEFAULT_EXEC_SPACE_ANNOTATION ="},
{"lineNum":"  139","line":"    Kokkos::Experimental::HPX;"},
{"lineNum":"  140","line":"#elif defined(KOKKOS_ENABLE_DEFAULT_DEVICE_TYPE_SERIAL)"},
{"lineNum":"  141","line":"using DefaultExecutionSpace KOKKOS_IMPL_DEFAULT_EXEC_SPACE_ANNOTATION = Serial;"},
{"lineNum":"  142","line":"#else"},
{"lineNum":"  143","line":"#error \\"},
{"lineNum":"  144","line":"    \"At least one of the following execution spaces must be defined in order to use Kokkos: Kokkos::Cuda, Kokkos::Experimental::HIP, Kokkos::Experimental::SYCL, Kokkos::Experimental::OpenMPTarget, Kokkos::OpenMP, Kokkos::Threads, Kokkos::Experimental::HPX, or Kokkos::Serial.\""},
{"lineNum":"  145","line":"#endif"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"#if defined(KOKKOS_ENABLE_DEFAULT_DEVICE_TYPE_OPENMP)"},
{"lineNum":"  148","line":"using DefaultHostExecutionSpace KOKKOS_IMPL_DEFAULT_HOST_EXEC_SPACE_ANNOTATION ="},
{"lineNum":"  149","line":"    OpenMP;"},
{"lineNum":"  150","line":"#elif defined(KOKKOS_ENABLE_DEFAULT_DEVICE_TYPE_THREADS)"},
{"lineNum":"  151","line":"using DefaultHostExecutionSpace KOKKOS_IMPL_DEFAULT_HOST_EXEC_SPACE_ANNOTATION ="},
{"lineNum":"  152","line":"    Threads;"},
{"lineNum":"  153","line":"#elif defined(KOKKOS_ENABLE_DEFAULT_DEVICE_TYPE_HPX)"},
{"lineNum":"  154","line":"using DefaultHostExecutionSpace KOKKOS_IMPL_DEFAULT_HOST_EXEC_SPACE_ANNOTATION ="},
{"lineNum":"  155","line":"    Kokkos::Experimental::HPX;"},
{"lineNum":"  156","line":"#elif defined(KOKKOS_ENABLE_DEFAULT_DEVICE_TYPE_SERIAL)"},
{"lineNum":"  157","line":"using DefaultHostExecutionSpace KOKKOS_IMPL_DEFAULT_HOST_EXEC_SPACE_ANNOTATION ="},
{"lineNum":"  158","line":"    Serial;"},
{"lineNum":"  159","line":"#elif defined(KOKKOS_ENABLE_OPENMP)"},
{"lineNum":"  160","line":"using DefaultHostExecutionSpace KOKKOS_IMPL_DEFAULT_HOST_EXEC_SPACE_ANNOTATION ="},
{"lineNum":"  161","line":"    OpenMP;"},
{"lineNum":"  162","line":"#elif defined(KOKKOS_ENABLE_THREADS)"},
{"lineNum":"  163","line":"using DefaultHostExecutionSpace KOKKOS_IMPL_DEFAULT_HOST_EXEC_SPACE_ANNOTATION ="},
{"lineNum":"  164","line":"    Threads;"},
{"lineNum":"  165","line":"#elif defined(KOKKOS_ENABLE_HPX)"},
{"lineNum":"  166","line":"using DefaultHostExecutionSpace KOKKOS_IMPL_DEFAULT_HOST_EXEC_SPACE_ANNOTATION ="},
{"lineNum":"  167","line":"    Kokkos::Experimental::HPX;"},
{"lineNum":"  168","line":"#elif defined(KOKKOS_ENABLE_SERIAL)"},
{"lineNum":"  169","line":"using DefaultHostExecutionSpace KOKKOS_IMPL_DEFAULT_HOST_EXEC_SPACE_ANNOTATION ="},
{"lineNum":"  170","line":"    Serial;"},
{"lineNum":"  171","line":"#else"},
{"lineNum":"  172","line":"#error \\"},
{"lineNum":"  173","line":"    \"At least one of the following execution spaces must be defined in order to use Kokkos: Kokkos::OpenMP, Kokkos::Threads, Kokkos::Experimental::HPX, or Kokkos::Serial.\""},
{"lineNum":"  174","line":"#endif"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"}  // namespace Kokkos"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  179","line":"// Detect the active execution space and define its memory space."},
{"lineNum":"  180","line":"// This is used to verify whether a running kernel can access"},
{"lineNum":"  181","line":"// a given memory space."},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"namespace Kokkos {"},
{"lineNum":"  184","line":"namespace Impl {"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"#if defined(KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_CUDA) && \\"},
{"lineNum":"  187","line":"    defined(KOKKOS_ENABLE_CUDA)"},
{"lineNum":"  188","line":"using ActiveExecutionMemorySpace = Kokkos::CudaSpace;"},
{"lineNum":"  189","line":"#elif defined(KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_SYCL)"},
{"lineNum":"  190","line":"using ActiveExecutionMemorySpace = Kokkos::Experimental::SYCLDeviceUSMSpace;"},
{"lineNum":"  191","line":"#elif defined(KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_HIP_GPU)"},
{"lineNum":"  192","line":"using ActiveExecutionMemorySpace = Kokkos::Experimental::HIPSpace;"},
{"lineNum":"  193","line":"#elif defined(KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_HOST)"},
{"lineNum":"  194","line":"using ActiveExecutionMemorySpace = Kokkos::HostSpace;"},
{"lineNum":"  195","line":"#else"},
{"lineNum":"  196","line":"using ActiveExecutionMemorySpace = void;"},
{"lineNum":"  197","line":"#endif"},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"template <typename DstMemorySpace, typename SrcMemorySpace>"},
{"lineNum":"  200","line":"struct MemorySpaceAccess;"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"template <typename DstMemorySpace, typename SrcMemorySpace,"},
{"lineNum":"  203","line":"          bool = Kokkos::Impl::MemorySpaceAccess<DstMemorySpace,"},
{"lineNum":"  204","line":"                                                 SrcMemorySpace>::accessible>"},
{"lineNum":"  205","line":"struct verify_space {"},
{"lineNum":"  206","line":"  KOKKOS_FUNCTION static void check() {}","class":"lineNoCov","hits":"0","possible_hits":"19",},
{"lineNum":"  207","line":"};"},
{"lineNum":"  208","line":""},
{"lineNum":"  209","line":"template <typename DstMemorySpace, typename SrcMemorySpace>"},
{"lineNum":"  210","line":"struct verify_space<DstMemorySpace, SrcMemorySpace, false> {"},
{"lineNum":"  211","line":"  KOKKOS_FUNCTION static void check() {"},
{"lineNum":"  212","line":"    Kokkos::abort("},
{"lineNum":"  213","line":"        \"Kokkos::View ERROR: attempt to access inaccessible memory space\");"},
{"lineNum":"  214","line":"  };"},
{"lineNum":"  215","line":"};"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"// Base class for exec space initializer factories"},
{"lineNum":"  218","line":"class ExecSpaceInitializerBase;"},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"}  // namespace Impl"},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"namespace Experimental {"},
{"lineNum":"  223","line":"template <class, class, class, class>"},
{"lineNum":"  224","line":"class LogicalMemorySpace;"},
{"lineNum":"  225","line":"}"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"}  // namespace Kokkos"},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"#define KOKKOS_RESTRICT_EXECUTION_TO_DATA(DATA_SPACE, DATA_PTR)        \\"},
{"lineNum":"  230","line":"  Kokkos::Impl::verify_space<Kokkos::Impl::ActiveExecutionMemorySpace, \\"},
{"lineNum":"  231","line":"                             DATA_SPACE>::check();"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"#define KOKKOS_RESTRICT_EXECUTION_TO_(DATA_SPACE)                      \\"},
{"lineNum":"  234","line":"  Kokkos::Impl::verify_space<Kokkos::Impl::ActiveExecutionMemorySpace, \\"},
{"lineNum":"  235","line":"                             DATA_SPACE>::check();"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"namespace Kokkos {"},
{"lineNum":"  240","line":"void fence();"},
{"lineNum":"  241","line":"}"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"namespace Kokkos {"},
{"lineNum":"  246","line":""},
{"lineNum":"  247","line":"template <class DataType, class... Properties>"},
{"lineNum":"  248","line":"class View;"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"namespace Impl {"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"template <class DstSpace, class SrcSpace,"},
{"lineNum":"  253","line":"          class ExecutionSpace = typename DstSpace::execution_space>"},
{"lineNum":"  254","line":"struct DeepCopy;"},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"template <class ViewType, class Layout = typename ViewType::array_layout,"},
{"lineNum":"  257","line":"          class ExecSpace = typename ViewType::execution_space,"},
{"lineNum":"  258","line":"          int Rank = ViewType::Rank, typename iType = int64_t>"},
{"lineNum":"  259","line":"struct ViewFill;"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"template <class ViewTypeA, class ViewTypeB, class Layout, class ExecSpace,"},
{"lineNum":"  262","line":"          int Rank, typename iType>"},
{"lineNum":"  263","line":"struct ViewCopy;","class":"lineNoCov","hits":"0","possible_hits":"32",},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"template <class Functor, class Policy>"},
{"lineNum":"  266","line":"struct FunctorPolicyExecutionSpace;"},
{"lineNum":"  267","line":""},
{"lineNum":"  268","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  269","line":"/// \\class ParallelFor"},
{"lineNum":"  270","line":"/// \\brief Implementation of the ParallelFor operator that has a"},
{"lineNum":"  271","line":"///   partial specialization for the device."},
{"lineNum":"  272","line":"///"},
{"lineNum":"  273","line":"/// This is an implementation detail of parallel_for.  Users should"},
{"lineNum":"  274","line":"/// skip this and go directly to the nonmember function parallel_for."},
{"lineNum":"  275","line":"template <class FunctorType, class ExecPolicy,"},
{"lineNum":"  276","line":"          class ExecutionSpace = typename Impl::FunctorPolicyExecutionSpace<"},
{"lineNum":"  277","line":"              FunctorType, ExecPolicy>::execution_space>"},
{"lineNum":"  278","line":"class ParallelFor;"},
{"lineNum":"  279","line":""},
{"lineNum":"  280","line":"/// \\class ParallelReduce"},
{"lineNum":"  281","line":"/// \\brief Implementation detail of parallel_reduce."},
{"lineNum":"  282","line":"///"},
{"lineNum":"  283","line":"/// This is an implementation detail of parallel_reduce.  Users should"},
{"lineNum":"  284","line":"/// skip this and go directly to the nonmember function parallel_reduce."},
{"lineNum":"  285","line":"template <class FunctorType, class ExecPolicy, class ReducerType = InvalidType,"},
{"lineNum":"  286","line":"          class ExecutionSpace = typename Impl::FunctorPolicyExecutionSpace<"},
{"lineNum":"  287","line":"              FunctorType, ExecPolicy>::execution_space>"},
{"lineNum":"  288","line":"class ParallelReduce;"},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"/// \\class ParallelScan"},
{"lineNum":"  291","line":"/// \\brief Implementation detail of parallel_scan."},
{"lineNum":"  292","line":"///"},
{"lineNum":"  293","line":"/// This is an implementation detail of parallel_scan.  Users should"},
{"lineNum":"  294","line":"/// skip this and go directly to the documentation of the nonmember"},
{"lineNum":"  295","line":"/// template function Kokkos::parallel_scan."},
{"lineNum":"  296","line":"template <class FunctorType, class ExecPolicy,"},
{"lineNum":"  297","line":"          class ExecutionSapce = typename Impl::FunctorPolicyExecutionSpace<"},
{"lineNum":"  298","line":"              FunctorType, ExecPolicy>::execution_space>"},
{"lineNum":"  299","line":"class ParallelScan;"},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"template <class FunctorType, class ExecPolicy, class ReturnType = InvalidType,"},
{"lineNum":"  302","line":"          class ExecutionSapce = typename Impl::FunctorPolicyExecutionSpace<"},
{"lineNum":"  303","line":"              FunctorType, ExecPolicy>::execution_space>"},
{"lineNum":"  304","line":"class ParallelScanWithTotal;"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"}  // namespace Impl"},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"template <class ScalarType, class Space = HostSpace>"},
{"lineNum":"  309","line":"struct Sum;"},
{"lineNum":"  310","line":"template <class ScalarType, class Space = HostSpace>"},
{"lineNum":"  311","line":"struct Prod;"},
{"lineNum":"  312","line":"template <class ScalarType, class Space = HostSpace>"},
{"lineNum":"  313","line":"struct Min;"},
{"lineNum":"  314","line":"template <class ScalarType, class Space = HostSpace>"},
{"lineNum":"  315","line":"struct Max;"},
{"lineNum":"  316","line":"template <class ScalarType, class Space = HostSpace>"},
{"lineNum":"  317","line":"struct MinMax;"},
{"lineNum":"  318","line":"template <class ScalarType, class Index, class Space = HostSpace>"},
{"lineNum":"  319","line":"struct MinLoc;"},
{"lineNum":"  320","line":"template <class ScalarType, class Index, class Space = HostSpace>"},
{"lineNum":"  321","line":"struct MaxLoc;"},
{"lineNum":"  322","line":"template <class ScalarType, class Index, class Space = HostSpace>"},
{"lineNum":"  323","line":"struct MinMaxLoc;"},
{"lineNum":"  324","line":"template <class ScalarType, class Space = HostSpace>"},
{"lineNum":"  325","line":"struct BAnd;"},
{"lineNum":"  326","line":"template <class ScalarType, class Space = HostSpace>"},
{"lineNum":"  327","line":"struct BOr;"},
{"lineNum":"  328","line":"template <class ScalarType, class Space = HostSpace>"},
{"lineNum":"  329","line":"struct LAnd;"},
{"lineNum":"  330","line":"template <class ScalarType, class Space = HostSpace>"},
{"lineNum":"  331","line":"struct LOr;"},
{"lineNum":"  332","line":""},
{"lineNum":"  333","line":"}  // namespace Kokkos"},
{"lineNum":"  334","line":""},
{"lineNum":"  335","line":"#endif /* #ifndef KOKKOS_CORE_FWD_HPP */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 2, "covered" : 0,};
var merged_data = [];
