var data = {lines:[
{"lineNum":"    1","line":"    ///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"    2","line":"    /// \\file fold_impl.hpp"},
{"lineNum":"    3","line":"    /// Contains definition of fold_impl<> and reverse_fold_impl<> templates."},
{"lineNum":"    4","line":"    //"},
{"lineNum":"    5","line":"    //  Copyright 2008 Eric Niebler. Distributed under the Boost"},
{"lineNum":"    6","line":"    //  Software License, Version 1.0. (See accompanying file"},
{"lineNum":"    7","line":"    //  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    8","line":"    template<typename State0, typename Fun, typename Expr, typename State, typename Data>"},
{"lineNum":"    9","line":"    struct fold_impl<State0, Fun, Expr, State, Data, 1>"},
{"lineNum":"   10","line":"      : transform_impl<Expr, State, Data>"},
{"lineNum":"   11","line":"    {"},
{"lineNum":"   12","line":"        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state0;"},
{"lineNum":"   13","line":"        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1;"},
{"lineNum":"   14","line":"        typedef state1 result_type;"},
{"lineNum":"   15","line":"        result_type operator ()("},
{"lineNum":"   16","line":"            typename fold_impl::expr_param e"},
{"lineNum":"   17","line":"          , typename fold_impl::state_param s"},
{"lineNum":"   18","line":"          , typename fold_impl::data_param d"},
{"lineNum":"   19","line":"        ) const"},
{"lineNum":"   20","line":"        {"},
{"lineNum":"   21","line":"            state0 s0 ="},
{"lineNum":"   22","line":"                typename when<_, State0>::template impl<Expr, State, Data>()(e, s, d);"},
{"lineNum":"   23","line":"            state1 s1 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >()( proto::child_c< 0>(e) , s0 , d );"},
{"lineNum":"   24","line":"            return s1;"},
{"lineNum":"   25","line":"        }"},
{"lineNum":"   26","line":"    };"},
{"lineNum":"   27","line":"    template<typename State0, typename Fun, typename Expr, typename State, typename Data>"},
{"lineNum":"   28","line":"    struct reverse_fold_impl<State0, Fun, Expr, State, Data, 1>"},
{"lineNum":"   29","line":"      : transform_impl<Expr, State, Data>"},
{"lineNum":"   30","line":"    {"},
{"lineNum":"   31","line":"        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state1;"},
{"lineNum":"   32","line":"        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;"},
{"lineNum":"   33","line":"        typedef state0 result_type;"},
{"lineNum":"   34","line":"        result_type operator ()("},
{"lineNum":"   35","line":"            typename reverse_fold_impl::expr_param e"},
{"lineNum":"   36","line":"          , typename reverse_fold_impl::state_param s"},
{"lineNum":"   37","line":"          , typename reverse_fold_impl::data_param d"},
{"lineNum":"   38","line":"        ) const"},
{"lineNum":"   39","line":"        {"},
{"lineNum":"   40","line":"            state1 s1 ="},
{"lineNum":"   41","line":"                typename when<_, State0>::template impl<Expr, State, Data>()(e, s, d);"},
{"lineNum":"   42","line":"            state0 s0 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >()( proto::child_c<0>(e) , s1 , d );"},
{"lineNum":"   43","line":"            return s0;"},
{"lineNum":"   44","line":"        }"},
{"lineNum":"   45","line":"    };"},
{"lineNum":"   46","line":"    template<typename State0, typename Fun, typename Expr, typename State, typename Data>"},
{"lineNum":"   47","line":"    struct fold_impl<State0, Fun, Expr, State, Data, 2>"},
{"lineNum":"   48","line":"      : transform_impl<Expr, State, Data>"},
{"lineNum":"   49","line":"    {"},
{"lineNum":"   50","line":"        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state0;"},
{"lineNum":"   51","line":"        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2;"},
{"lineNum":"   52","line":"        typedef state2 result_type;"},
{"lineNum":"   53","line":"        result_type operator ()("},
{"lineNum":"   54","line":"            typename fold_impl::expr_param e"},
{"lineNum":"   55","line":"          , typename fold_impl::state_param s"},
{"lineNum":"   56","line":"          , typename fold_impl::data_param d"},
{"lineNum":"   57","line":"        ) const"},
{"lineNum":"   58","line":"        {"},
{"lineNum":"   59","line":"            state0 s0 ="},
{"lineNum":"   60","line":"                typename when<_, State0>::template impl<Expr, State, Data>()(e, s, d);"},
{"lineNum":"   61","line":"            state1 s1 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >()( proto::child_c< 0>(e) , s0 , d ); state2 s2 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >()( proto::child_c< 1>(e) , s1 , d );"},
{"lineNum":"   62","line":"            return s2;"},
{"lineNum":"   63","line":"        }"},
{"lineNum":"   64","line":"    };"},
{"lineNum":"   65","line":"    template<typename State0, typename Fun, typename Expr, typename State, typename Data>"},
{"lineNum":"   66","line":"    struct reverse_fold_impl<State0, Fun, Expr, State, Data, 2>"},
{"lineNum":"   67","line":"      : transform_impl<Expr, State, Data>"},
{"lineNum":"   68","line":"    {"},
{"lineNum":"   69","line":"        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state2;"},
{"lineNum":"   70","line":"        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;"},
{"lineNum":"   71","line":"        typedef state0 result_type;"},
{"lineNum":"   72","line":"        result_type operator ()("},
{"lineNum":"   73","line":"            typename reverse_fold_impl::expr_param e"},
{"lineNum":"   74","line":"          , typename reverse_fold_impl::state_param s"},
{"lineNum":"   75","line":"          , typename reverse_fold_impl::data_param d"},
{"lineNum":"   76","line":"        ) const"},
{"lineNum":"   77","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"   78","line":"            state2 s2 ="},
{"lineNum":"   79","line":"                typename when<_, State0>::template impl<Expr, State, Data>()(e, s, d);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   80","line":"            state1 s1 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >()( proto::child_c<1>(e) , s2 , d ); state0 s0 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >()( proto::child_c<0>(e) , s1 , d );","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   81","line":"            return s0;"},
{"lineNum":"   82","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"30",},
{"lineNum":"   83","line":"    };"},
{"lineNum":"   84","line":"    template<typename State0, typename Fun, typename Expr, typename State, typename Data>"},
{"lineNum":"   85","line":"    struct fold_impl<State0, Fun, Expr, State, Data, 3>"},
{"lineNum":"   86","line":"      : transform_impl<Expr, State, Data>"},
{"lineNum":"   87","line":"    {"},
{"lineNum":"   88","line":"        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state0;"},
{"lineNum":"   89","line":"        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3;"},
{"lineNum":"   90","line":"        typedef state3 result_type;"},
{"lineNum":"   91","line":"        result_type operator ()("},
{"lineNum":"   92","line":"            typename fold_impl::expr_param e"},
{"lineNum":"   93","line":"          , typename fold_impl::state_param s"},
{"lineNum":"   94","line":"          , typename fold_impl::data_param d"},
{"lineNum":"   95","line":"        ) const"},
{"lineNum":"   96","line":"        {"},
{"lineNum":"   97","line":"            state0 s0 ="},
{"lineNum":"   98","line":"                typename when<_, State0>::template impl<Expr, State, Data>()(e, s, d);"},
{"lineNum":"   99","line":"            state1 s1 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >()( proto::child_c< 0>(e) , s0 , d ); state2 s2 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >()( proto::child_c< 1>(e) , s1 , d ); state3 s3 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >()( proto::child_c< 2>(e) , s2 , d );"},
{"lineNum":"  100","line":"            return s3;"},
{"lineNum":"  101","line":"        }"},
{"lineNum":"  102","line":"    };"},
{"lineNum":"  103","line":"    template<typename State0, typename Fun, typename Expr, typename State, typename Data>"},
{"lineNum":"  104","line":"    struct reverse_fold_impl<State0, Fun, Expr, State, Data, 3>"},
{"lineNum":"  105","line":"      : transform_impl<Expr, State, Data>"},
{"lineNum":"  106","line":"    {"},
{"lineNum":"  107","line":"        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state3;"},
{"lineNum":"  108","line":"        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;"},
{"lineNum":"  109","line":"        typedef state0 result_type;"},
{"lineNum":"  110","line":"        result_type operator ()("},
{"lineNum":"  111","line":"            typename reverse_fold_impl::expr_param e"},
{"lineNum":"  112","line":"          , typename reverse_fold_impl::state_param s"},
{"lineNum":"  113","line":"          , typename reverse_fold_impl::data_param d"},
{"lineNum":"  114","line":"        ) const"},
{"lineNum":"  115","line":"        {"},
{"lineNum":"  116","line":"            state3 s3 ="},
{"lineNum":"  117","line":"                typename when<_, State0>::template impl<Expr, State, Data>()(e, s, d);"},
{"lineNum":"  118","line":"            state2 s2 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >()( proto::child_c<2>(e) , s3 , d ); state1 s1 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >()( proto::child_c<1>(e) , s2 , d ); state0 s0 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >()( proto::child_c<0>(e) , s1 , d );"},
{"lineNum":"  119","line":"            return s0;"},
{"lineNum":"  120","line":"        }"},
{"lineNum":"  121","line":"    };"},
{"lineNum":"  122","line":"    template<typename State0, typename Fun, typename Expr, typename State, typename Data>"},
{"lineNum":"  123","line":"    struct fold_impl<State0, Fun, Expr, State, Data, 4>"},
{"lineNum":"  124","line":"      : transform_impl<Expr, State, Data>"},
{"lineNum":"  125","line":"    {"},
{"lineNum":"  126","line":"        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state0;"},
{"lineNum":"  127","line":"        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4;"},
{"lineNum":"  128","line":"        typedef state4 result_type;"},
{"lineNum":"  129","line":"        result_type operator ()("},
{"lineNum":"  130","line":"            typename fold_impl::expr_param e"},
{"lineNum":"  131","line":"          , typename fold_impl::state_param s"},
{"lineNum":"  132","line":"          , typename fold_impl::data_param d"},
{"lineNum":"  133","line":"        ) const"},
{"lineNum":"  134","line":"        {"},
{"lineNum":"  135","line":"            state0 s0 ="},
{"lineNum":"  136","line":"                typename when<_, State0>::template impl<Expr, State, Data>()(e, s, d);"},
{"lineNum":"  137","line":"            state1 s1 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >()( proto::child_c< 0>(e) , s0 , d ); state2 s2 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >()( proto::child_c< 1>(e) , s1 , d ); state3 s3 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >()( proto::child_c< 2>(e) , s2 , d ); state4 s4 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >()( proto::child_c< 3>(e) , s3 , d );"},
{"lineNum":"  138","line":"            return s4;"},
{"lineNum":"  139","line":"        }"},
{"lineNum":"  140","line":"    };"},
{"lineNum":"  141","line":"    template<typename State0, typename Fun, typename Expr, typename State, typename Data>"},
{"lineNum":"  142","line":"    struct reverse_fold_impl<State0, Fun, Expr, State, Data, 4>"},
{"lineNum":"  143","line":"      : transform_impl<Expr, State, Data>"},
{"lineNum":"  144","line":"    {"},
{"lineNum":"  145","line":"        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state4;"},
{"lineNum":"  146","line":"        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;"},
{"lineNum":"  147","line":"        typedef state0 result_type;"},
{"lineNum":"  148","line":"        result_type operator ()("},
{"lineNum":"  149","line":"            typename reverse_fold_impl::expr_param e"},
{"lineNum":"  150","line":"          , typename reverse_fold_impl::state_param s"},
{"lineNum":"  151","line":"          , typename reverse_fold_impl::data_param d"},
{"lineNum":"  152","line":"        ) const"},
{"lineNum":"  153","line":"        {"},
{"lineNum":"  154","line":"            state4 s4 ="},
{"lineNum":"  155","line":"                typename when<_, State0>::template impl<Expr, State, Data>()(e, s, d);"},
{"lineNum":"  156","line":"            state3 s3 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >()( proto::child_c<3>(e) , s4 , d ); state2 s2 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >()( proto::child_c<2>(e) , s3 , d ); state1 s1 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >()( proto::child_c<1>(e) , s2 , d ); state0 s0 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >()( proto::child_c<0>(e) , s1 , d );"},
{"lineNum":"  157","line":"            return s0;"},
{"lineNum":"  158","line":"        }"},
{"lineNum":"  159","line":"    };"},
{"lineNum":"  160","line":"    template<typename State0, typename Fun, typename Expr, typename State, typename Data>"},
{"lineNum":"  161","line":"    struct fold_impl<State0, Fun, Expr, State, Data, 5>"},
{"lineNum":"  162","line":"      : transform_impl<Expr, State, Data>"},
{"lineNum":"  163","line":"    {"},
{"lineNum":"  164","line":"        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state0;"},
{"lineNum":"  165","line":"        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5;"},
{"lineNum":"  166","line":"        typedef state5 result_type;"},
{"lineNum":"  167","line":"        result_type operator ()("},
{"lineNum":"  168","line":"            typename fold_impl::expr_param e"},
{"lineNum":"  169","line":"          , typename fold_impl::state_param s"},
{"lineNum":"  170","line":"          , typename fold_impl::data_param d"},
{"lineNum":"  171","line":"        ) const"},
{"lineNum":"  172","line":"        {"},
{"lineNum":"  173","line":"            state0 s0 ="},
{"lineNum":"  174","line":"                typename when<_, State0>::template impl<Expr, State, Data>()(e, s, d);"},
{"lineNum":"  175","line":"            state1 s1 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >()( proto::child_c< 0>(e) , s0 , d ); state2 s2 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >()( proto::child_c< 1>(e) , s1 , d ); state3 s3 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >()( proto::child_c< 2>(e) , s2 , d ); state4 s4 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >()( proto::child_c< 3>(e) , s3 , d ); state5 s5 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >()( proto::child_c< 4>(e) , s4 , d );"},
{"lineNum":"  176","line":"            return s5;"},
{"lineNum":"  177","line":"        }"},
{"lineNum":"  178","line":"    };"},
{"lineNum":"  179","line":"    template<typename State0, typename Fun, typename Expr, typename State, typename Data>"},
{"lineNum":"  180","line":"    struct reverse_fold_impl<State0, Fun, Expr, State, Data, 5>"},
{"lineNum":"  181","line":"      : transform_impl<Expr, State, Data>"},
{"lineNum":"  182","line":"    {"},
{"lineNum":"  183","line":"        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state5;"},
{"lineNum":"  184","line":"        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;"},
{"lineNum":"  185","line":"        typedef state0 result_type;"},
{"lineNum":"  186","line":"        result_type operator ()("},
{"lineNum":"  187","line":"            typename reverse_fold_impl::expr_param e"},
{"lineNum":"  188","line":"          , typename reverse_fold_impl::state_param s"},
{"lineNum":"  189","line":"          , typename reverse_fold_impl::data_param d"},
{"lineNum":"  190","line":"        ) const"},
{"lineNum":"  191","line":"        {"},
{"lineNum":"  192","line":"            state5 s5 ="},
{"lineNum":"  193","line":"                typename when<_, State0>::template impl<Expr, State, Data>()(e, s, d);"},
{"lineNum":"  194","line":"            state4 s4 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >()( proto::child_c<4>(e) , s5 , d ); state3 s3 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >()( proto::child_c<3>(e) , s4 , d ); state2 s2 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >()( proto::child_c<2>(e) , s3 , d ); state1 s1 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >()( proto::child_c<1>(e) , s2 , d ); state0 s0 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >()( proto::child_c<0>(e) , s1 , d );"},
{"lineNum":"  195","line":"            return s0;"},
{"lineNum":"  196","line":"        }"},
{"lineNum":"  197","line":"    };"},
{"lineNum":"  198","line":"    template<typename State0, typename Fun, typename Expr, typename State, typename Data>"},
{"lineNum":"  199","line":"    struct fold_impl<State0, Fun, Expr, State, Data, 6>"},
{"lineNum":"  200","line":"      : transform_impl<Expr, State, Data>"},
{"lineNum":"  201","line":"    {"},
{"lineNum":"  202","line":"        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state0;"},
{"lineNum":"  203","line":"        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6;"},
{"lineNum":"  204","line":"        typedef state6 result_type;"},
{"lineNum":"  205","line":"        result_type operator ()("},
{"lineNum":"  206","line":"            typename fold_impl::expr_param e"},
{"lineNum":"  207","line":"          , typename fold_impl::state_param s"},
{"lineNum":"  208","line":"          , typename fold_impl::data_param d"},
{"lineNum":"  209","line":"        ) const"},
{"lineNum":"  210","line":"        {"},
{"lineNum":"  211","line":"            state0 s0 ="},
{"lineNum":"  212","line":"                typename when<_, State0>::template impl<Expr, State, Data>()(e, s, d);"},
{"lineNum":"  213","line":"            state1 s1 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >()( proto::child_c< 0>(e) , s0 , d ); state2 s2 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >()( proto::child_c< 1>(e) , s1 , d ); state3 s3 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >()( proto::child_c< 2>(e) , s2 , d ); state4 s4 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >()( proto::child_c< 3>(e) , s3 , d ); state5 s5 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >()( proto::child_c< 4>(e) , s4 , d ); state6 s6 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >()( proto::child_c< 5>(e) , s5 , d );"},
{"lineNum":"  214","line":"            return s6;"},
{"lineNum":"  215","line":"        }"},
{"lineNum":"  216","line":"    };"},
{"lineNum":"  217","line":"    template<typename State0, typename Fun, typename Expr, typename State, typename Data>"},
{"lineNum":"  218","line":"    struct reverse_fold_impl<State0, Fun, Expr, State, Data, 6>"},
{"lineNum":"  219","line":"      : transform_impl<Expr, State, Data>"},
{"lineNum":"  220","line":"    {"},
{"lineNum":"  221","line":"        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state6;"},
{"lineNum":"  222","line":"        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;"},
{"lineNum":"  223","line":"        typedef state0 result_type;"},
{"lineNum":"  224","line":"        result_type operator ()("},
{"lineNum":"  225","line":"            typename reverse_fold_impl::expr_param e"},
{"lineNum":"  226","line":"          , typename reverse_fold_impl::state_param s"},
{"lineNum":"  227","line":"          , typename reverse_fold_impl::data_param d"},
{"lineNum":"  228","line":"        ) const"},
{"lineNum":"  229","line":"        {"},
{"lineNum":"  230","line":"            state6 s6 ="},
{"lineNum":"  231","line":"                typename when<_, State0>::template impl<Expr, State, Data>()(e, s, d);"},
{"lineNum":"  232","line":"            state5 s5 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >()( proto::child_c<5>(e) , s6 , d ); state4 s4 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >()( proto::child_c<4>(e) , s5 , d ); state3 s3 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >()( proto::child_c<3>(e) , s4 , d ); state2 s2 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >()( proto::child_c<2>(e) , s3 , d ); state1 s1 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >()( proto::child_c<1>(e) , s2 , d ); state0 s0 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >()( proto::child_c<0>(e) , s1 , d );"},
{"lineNum":"  233","line":"            return s0;"},
{"lineNum":"  234","line":"        }"},
{"lineNum":"  235","line":"    };"},
{"lineNum":"  236","line":"    template<typename State0, typename Fun, typename Expr, typename State, typename Data>"},
{"lineNum":"  237","line":"    struct fold_impl<State0, Fun, Expr, State, Data, 7>"},
{"lineNum":"  238","line":"      : transform_impl<Expr, State, Data>"},
{"lineNum":"  239","line":"    {"},
{"lineNum":"  240","line":"        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state0;"},
{"lineNum":"  241","line":"        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7;"},
{"lineNum":"  242","line":"        typedef state7 result_type;"},
{"lineNum":"  243","line":"        result_type operator ()("},
{"lineNum":"  244","line":"            typename fold_impl::expr_param e"},
{"lineNum":"  245","line":"          , typename fold_impl::state_param s"},
{"lineNum":"  246","line":"          , typename fold_impl::data_param d"},
{"lineNum":"  247","line":"        ) const"},
{"lineNum":"  248","line":"        {"},
{"lineNum":"  249","line":"            state0 s0 ="},
{"lineNum":"  250","line":"                typename when<_, State0>::template impl<Expr, State, Data>()(e, s, d);"},
{"lineNum":"  251","line":"            state1 s1 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >()( proto::child_c< 0>(e) , s0 , d ); state2 s2 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >()( proto::child_c< 1>(e) , s1 , d ); state3 s3 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >()( proto::child_c< 2>(e) , s2 , d ); state4 s4 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >()( proto::child_c< 3>(e) , s3 , d ); state5 s5 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >()( proto::child_c< 4>(e) , s4 , d ); state6 s6 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >()( proto::child_c< 5>(e) , s5 , d ); state7 s7 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >()( proto::child_c< 6>(e) , s6 , d );"},
{"lineNum":"  252","line":"            return s7;"},
{"lineNum":"  253","line":"        }"},
{"lineNum":"  254","line":"    };"},
{"lineNum":"  255","line":"    template<typename State0, typename Fun, typename Expr, typename State, typename Data>"},
{"lineNum":"  256","line":"    struct reverse_fold_impl<State0, Fun, Expr, State, Data, 7>"},
{"lineNum":"  257","line":"      : transform_impl<Expr, State, Data>"},
{"lineNum":"  258","line":"    {"},
{"lineNum":"  259","line":"        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state7;"},
{"lineNum":"  260","line":"        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;"},
{"lineNum":"  261","line":"        typedef state0 result_type;"},
{"lineNum":"  262","line":"        result_type operator ()("},
{"lineNum":"  263","line":"            typename reverse_fold_impl::expr_param e"},
{"lineNum":"  264","line":"          , typename reverse_fold_impl::state_param s"},
{"lineNum":"  265","line":"          , typename reverse_fold_impl::data_param d"},
{"lineNum":"  266","line":"        ) const"},
{"lineNum":"  267","line":"        {"},
{"lineNum":"  268","line":"            state7 s7 ="},
{"lineNum":"  269","line":"                typename when<_, State0>::template impl<Expr, State, Data>()(e, s, d);"},
{"lineNum":"  270","line":"            state6 s6 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >()( proto::child_c<6>(e) , s7 , d ); state5 s5 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >()( proto::child_c<5>(e) , s6 , d ); state4 s4 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >()( proto::child_c<4>(e) , s5 , d ); state3 s3 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >()( proto::child_c<3>(e) , s4 , d ); state2 s2 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >()( proto::child_c<2>(e) , s3 , d ); state1 s1 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >()( proto::child_c<1>(e) , s2 , d ); state0 s0 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >()( proto::child_c<0>(e) , s1 , d );"},
{"lineNum":"  271","line":"            return s0;"},
{"lineNum":"  272","line":"        }"},
{"lineNum":"  273","line":"    };"},
{"lineNum":"  274","line":"    template<typename State0, typename Fun, typename Expr, typename State, typename Data>"},
{"lineNum":"  275","line":"    struct fold_impl<State0, Fun, Expr, State, Data, 8>"},
{"lineNum":"  276","line":"      : transform_impl<Expr, State, Data>"},
{"lineNum":"  277","line":"    {"},
{"lineNum":"  278","line":"        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state0;"},
{"lineNum":"  279","line":"        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8;"},
{"lineNum":"  280","line":"        typedef state8 result_type;"},
{"lineNum":"  281","line":"        result_type operator ()("},
{"lineNum":"  282","line":"            typename fold_impl::expr_param e"},
{"lineNum":"  283","line":"          , typename fold_impl::state_param s"},
{"lineNum":"  284","line":"          , typename fold_impl::data_param d"},
{"lineNum":"  285","line":"        ) const"},
{"lineNum":"  286","line":"        {"},
{"lineNum":"  287","line":"            state0 s0 ="},
{"lineNum":"  288","line":"                typename when<_, State0>::template impl<Expr, State, Data>()(e, s, d);"},
{"lineNum":"  289","line":"            state1 s1 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >()( proto::child_c< 0>(e) , s0 , d ); state2 s2 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >()( proto::child_c< 1>(e) , s1 , d ); state3 s3 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >()( proto::child_c< 2>(e) , s2 , d ); state4 s4 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >()( proto::child_c< 3>(e) , s3 , d ); state5 s5 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >()( proto::child_c< 4>(e) , s4 , d ); state6 s6 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >()( proto::child_c< 5>(e) , s5 , d ); state7 s7 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >()( proto::child_c< 6>(e) , s6 , d ); state8 s8 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >()( proto::child_c< 7>(e) , s7 , d );"},
{"lineNum":"  290","line":"            return s8;"},
{"lineNum":"  291","line":"        }"},
{"lineNum":"  292","line":"    };"},
{"lineNum":"  293","line":"    template<typename State0, typename Fun, typename Expr, typename State, typename Data>"},
{"lineNum":"  294","line":"    struct reverse_fold_impl<State0, Fun, Expr, State, Data, 8>"},
{"lineNum":"  295","line":"      : transform_impl<Expr, State, Data>"},
{"lineNum":"  296","line":"    {"},
{"lineNum":"  297","line":"        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state8;"},
{"lineNum":"  298","line":"        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;"},
{"lineNum":"  299","line":"        typedef state0 result_type;"},
{"lineNum":"  300","line":"        result_type operator ()("},
{"lineNum":"  301","line":"            typename reverse_fold_impl::expr_param e"},
{"lineNum":"  302","line":"          , typename reverse_fold_impl::state_param s"},
{"lineNum":"  303","line":"          , typename reverse_fold_impl::data_param d"},
{"lineNum":"  304","line":"        ) const"},
{"lineNum":"  305","line":"        {"},
{"lineNum":"  306","line":"            state8 s8 ="},
{"lineNum":"  307","line":"                typename when<_, State0>::template impl<Expr, State, Data>()(e, s, d);"},
{"lineNum":"  308","line":"            state7 s7 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >()( proto::child_c<7>(e) , s8 , d ); state6 s6 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >()( proto::child_c<6>(e) , s7 , d ); state5 s5 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >()( proto::child_c<5>(e) , s6 , d ); state4 s4 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >()( proto::child_c<4>(e) , s5 , d ); state3 s3 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >()( proto::child_c<3>(e) , s4 , d ); state2 s2 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >()( proto::child_c<2>(e) , s3 , d ); state1 s1 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >()( proto::child_c<1>(e) , s2 , d ); state0 s0 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >()( proto::child_c<0>(e) , s1 , d );"},
{"lineNum":"  309","line":"            return s0;"},
{"lineNum":"  310","line":"        }"},
{"lineNum":"  311","line":"    };"},
{"lineNum":"  312","line":"    template<typename State0, typename Fun, typename Expr, typename State, typename Data>"},
{"lineNum":"  313","line":"    struct fold_impl<State0, Fun, Expr, State, Data, 9>"},
{"lineNum":"  314","line":"      : transform_impl<Expr, State, Data>"},
{"lineNum":"  315","line":"    {"},
{"lineNum":"  316","line":"        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state0;"},
{"lineNum":"  317","line":"        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9;"},
{"lineNum":"  318","line":"        typedef state9 result_type;"},
{"lineNum":"  319","line":"        result_type operator ()("},
{"lineNum":"  320","line":"            typename fold_impl::expr_param e"},
{"lineNum":"  321","line":"          , typename fold_impl::state_param s"},
{"lineNum":"  322","line":"          , typename fold_impl::data_param d"},
{"lineNum":"  323","line":"        ) const"},
{"lineNum":"  324","line":"        {"},
{"lineNum":"  325","line":"            state0 s0 ="},
{"lineNum":"  326","line":"                typename when<_, State0>::template impl<Expr, State, Data>()(e, s, d);"},
{"lineNum":"  327","line":"            state1 s1 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >()( proto::child_c< 0>(e) , s0 , d ); state2 s2 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >()( proto::child_c< 1>(e) , s1 , d ); state3 s3 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >()( proto::child_c< 2>(e) , s2 , d ); state4 s4 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >()( proto::child_c< 3>(e) , s3 , d ); state5 s5 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >()( proto::child_c< 4>(e) , s4 , d ); state6 s6 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >()( proto::child_c< 5>(e) , s5 , d ); state7 s7 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >()( proto::child_c< 6>(e) , s6 , d ); state8 s8 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >()( proto::child_c< 7>(e) , s7 , d ); state9 s9 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >()( proto::child_c< 8>(e) , s8 , d );"},
{"lineNum":"  328","line":"            return s9;"},
{"lineNum":"  329","line":"        }"},
{"lineNum":"  330","line":"    };"},
{"lineNum":"  331","line":"    template<typename State0, typename Fun, typename Expr, typename State, typename Data>"},
{"lineNum":"  332","line":"    struct reverse_fold_impl<State0, Fun, Expr, State, Data, 9>"},
{"lineNum":"  333","line":"      : transform_impl<Expr, State, Data>"},
{"lineNum":"  334","line":"    {"},
{"lineNum":"  335","line":"        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state9;"},
{"lineNum":"  336","line":"        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;"},
{"lineNum":"  337","line":"        typedef state0 result_type;"},
{"lineNum":"  338","line":"        result_type operator ()("},
{"lineNum":"  339","line":"            typename reverse_fold_impl::expr_param e"},
{"lineNum":"  340","line":"          , typename reverse_fold_impl::state_param s"},
{"lineNum":"  341","line":"          , typename reverse_fold_impl::data_param d"},
{"lineNum":"  342","line":"        ) const"},
{"lineNum":"  343","line":"        {"},
{"lineNum":"  344","line":"            state9 s9 ="},
{"lineNum":"  345","line":"                typename when<_, State0>::template impl<Expr, State, Data>()(e, s, d);"},
{"lineNum":"  346","line":"            state8 s8 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >()( proto::child_c<8>(e) , s9 , d ); state7 s7 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >()( proto::child_c<7>(e) , s8 , d ); state6 s6 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >()( proto::child_c<6>(e) , s7 , d ); state5 s5 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >()( proto::child_c<5>(e) , s6 , d ); state4 s4 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >()( proto::child_c<4>(e) , s5 , d ); state3 s3 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >()( proto::child_c<3>(e) , s4 , d ); state2 s2 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >()( proto::child_c<2>(e) , s3 , d ); state1 s1 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >()( proto::child_c<1>(e) , s2 , d ); state0 s0 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >()( proto::child_c<0>(e) , s1 , d );"},
{"lineNum":"  347","line":"            return s0;"},
{"lineNum":"  348","line":"        }"},
{"lineNum":"  349","line":"    };"},
{"lineNum":"  350","line":"    template<typename State0, typename Fun, typename Expr, typename State, typename Data>"},
{"lineNum":"  351","line":"    struct fold_impl<State0, Fun, Expr, State, Data, 10>"},
{"lineNum":"  352","line":"      : transform_impl<Expr, State, Data>"},
{"lineNum":"  353","line":"    {"},
{"lineNum":"  354","line":"        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state0;"},
{"lineNum":"  355","line":"        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 9>::type , state9 , Data >::result_type state10;"},
{"lineNum":"  356","line":"        typedef state10 result_type;"},
{"lineNum":"  357","line":"        result_type operator ()("},
{"lineNum":"  358","line":"            typename fold_impl::expr_param e"},
{"lineNum":"  359","line":"          , typename fold_impl::state_param s"},
{"lineNum":"  360","line":"          , typename fold_impl::data_param d"},
{"lineNum":"  361","line":"        ) const"},
{"lineNum":"  362","line":"        {"},
{"lineNum":"  363","line":"            state0 s0 ="},
{"lineNum":"  364","line":"                typename when<_, State0>::template impl<Expr, State, Data>()(e, s, d);"},
{"lineNum":"  365","line":"            state1 s1 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >()( proto::child_c< 0>(e) , s0 , d ); state2 s2 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >()( proto::child_c< 1>(e) , s1 , d ); state3 s3 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >()( proto::child_c< 2>(e) , s2 , d ); state4 s4 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >()( proto::child_c< 3>(e) , s3 , d ); state5 s5 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >()( proto::child_c< 4>(e) , s4 , d ); state6 s6 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >()( proto::child_c< 5>(e) , s5 , d ); state7 s7 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >()( proto::child_c< 6>(e) , s6 , d ); state8 s8 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >()( proto::child_c< 7>(e) , s7 , d ); state9 s9 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >()( proto::child_c< 8>(e) , s8 , d ); state10 s10 = typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 9>::type , state9 , Data >()( proto::child_c< 9>(e) , s9 , d );"},
{"lineNum":"  366","line":"            return s10;"},
{"lineNum":"  367","line":"        }"},
{"lineNum":"  368","line":"    };"},
{"lineNum":"  369","line":"    template<typename State0, typename Fun, typename Expr, typename State, typename Data>"},
{"lineNum":"  370","line":"    struct reverse_fold_impl<State0, Fun, Expr, State, Data, 10>"},
{"lineNum":"  371","line":"      : transform_impl<Expr, State, Data>"},
{"lineNum":"  372","line":"    {"},
{"lineNum":"  373","line":"        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state10;"},
{"lineNum":"  374","line":"        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 9 >::type , state10 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;"},
{"lineNum":"  375","line":"        typedef state0 result_type;"},
{"lineNum":"  376","line":"        result_type operator ()("},
{"lineNum":"  377","line":"            typename reverse_fold_impl::expr_param e"},
{"lineNum":"  378","line":"          , typename reverse_fold_impl::state_param s"},
{"lineNum":"  379","line":"          , typename reverse_fold_impl::data_param d"},
{"lineNum":"  380","line":"        ) const"},
{"lineNum":"  381","line":"        {"},
{"lineNum":"  382","line":"            state10 s10 ="},
{"lineNum":"  383","line":"                typename when<_, State0>::template impl<Expr, State, Data>()(e, s, d);"},
{"lineNum":"  384","line":"            state9 s9 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 9 >::type , state10 , Data >()( proto::child_c<9>(e) , s10 , d ); state8 s8 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >()( proto::child_c<8>(e) , s9 , d ); state7 s7 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >()( proto::child_c<7>(e) , s8 , d ); state6 s6 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >()( proto::child_c<6>(e) , s7 , d ); state5 s5 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >()( proto::child_c<5>(e) , s6 , d ); state4 s4 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >()( proto::child_c<4>(e) , s5 , d ); state3 s3 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >()( proto::child_c<3>(e) , s4 , d ); state2 s2 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >()( proto::child_c<2>(e) , s3 , d ); state1 s1 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >()( proto::child_c<1>(e) , s2 , d ); state0 s0 = typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >()( proto::child_c<0>(e) , s1 , d );"},
{"lineNum":"  385","line":"            return s0;"},
{"lineNum":"  386","line":"        }"},
{"lineNum":"  387","line":"    };"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 4, "covered" : 0,};
var merged_data = [];
