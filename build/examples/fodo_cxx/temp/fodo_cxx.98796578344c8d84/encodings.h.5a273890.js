var data = {lines:[
{"lineNum":"    1","line":"// Tencent is pleased to support the open source community by making RapidJSON available."},
{"lineNum":"    2","line":"//"},
{"lineNum":"    3","line":"// Copyright (C) 2015 THL A29 Limited, a Tencent company, and Milo Yip. All rights reserved."},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// Licensed under the MIT License (the \"License\"); you may not use this file except"},
{"lineNum":"    6","line":"// in compliance with the License. You may obtain a copy of the License at"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"// http://opensource.org/licenses/MIT"},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// Unless required by applicable law or agreed to in writing, software distributed"},
{"lineNum":"   11","line":"// under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR"},
{"lineNum":"   12","line":"// CONDITIONS OF ANY KIND, either express or implied. See the License for the"},
{"lineNum":"   13","line":"// specific language governing permissions and limitations under the License."},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"#ifndef CEREAL_RAPIDJSON_ENCODINGS_H_"},
{"lineNum":"   16","line":"#define CEREAL_RAPIDJSON_ENCODINGS_H_"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"#include \"rapidjson.h\""},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"#if defined(_MSC_VER) && !defined(__clang__)"},
{"lineNum":"   21","line":"CEREAL_RAPIDJSON_DIAG_PUSH"},
{"lineNum":"   22","line":"CEREAL_RAPIDJSON_DIAG_OFF(4244) // conversion from \'type1\' to \'type2\', possible loss of data"},
{"lineNum":"   23","line":"CEREAL_RAPIDJSON_DIAG_OFF(4702)  // unreachable code"},
{"lineNum":"   24","line":"#elif defined(__GNUC__)"},
{"lineNum":"   25","line":"CEREAL_RAPIDJSON_DIAG_PUSH"},
{"lineNum":"   26","line":"CEREAL_RAPIDJSON_DIAG_OFF(effc++)"},
{"lineNum":"   27","line":"CEREAL_RAPIDJSON_DIAG_OFF(overflow)"},
{"lineNum":"   28","line":"#endif"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"CEREAL_RAPIDJSON_NAMESPACE_BEGIN"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   33","line":"// Encoding"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"/*! \\class rapidjson::Encoding"},
{"lineNum":"   36","line":"    \\brief Concept for encoding of Unicode characters."},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"\\code"},
{"lineNum":"   39","line":"concept Encoding {"},
{"lineNum":"   40","line":"    typename Ch;    //! Type of character. A \"character\" is actually a code unit in unicode\'s definition."},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"    enum { supportUnicode = 1 }; // or 0 if not supporting unicode"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"    //! \\brief Encode a Unicode codepoint to an output stream."},
{"lineNum":"   45","line":"    //! \\param os Output stream."},
{"lineNum":"   46","line":"    //! \\param codepoint An unicode codepoint, ranging from 0x0 to 0x10FFFF inclusively."},
{"lineNum":"   47","line":"    template<typename OutputStream>"},
{"lineNum":"   48","line":"    static void Encode(OutputStream& os, unsigned codepoint);"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"    //! \\brief Decode a Unicode codepoint from an input stream."},
{"lineNum":"   51","line":"    //! \\param is Input stream."},
{"lineNum":"   52","line":"    //! \\param codepoint Output of the unicode codepoint."},
{"lineNum":"   53","line":"    //! \\return true if a valid codepoint can be decoded from the stream."},
{"lineNum":"   54","line":"    template <typename InputStream>"},
{"lineNum":"   55","line":"    static bool Decode(InputStream& is, unsigned* codepoint);"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"    //! \\brief Validate one Unicode codepoint from an encoded stream."},
{"lineNum":"   58","line":"    //! \\param is Input stream to obtain codepoint."},
{"lineNum":"   59","line":"    //! \\param os Output for copying one codepoint."},
{"lineNum":"   60","line":"    //! \\return true if it is valid."},
{"lineNum":"   61","line":"    //! \\note This function just validating and copying the codepoint without actually decode it."},
{"lineNum":"   62","line":"    template <typename InputStream, typename OutputStream>"},
{"lineNum":"   63","line":"    static bool Validate(InputStream& is, OutputStream& os);"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"    // The following functions are deal with byte streams."},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"    //! Take a character from input byte stream, skip BOM if exist."},
{"lineNum":"   68","line":"    template <typename InputByteStream>"},
{"lineNum":"   69","line":"    static CharType TakeBOM(InputByteStream& is);"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"    //! Take a character from input byte stream."},
{"lineNum":"   72","line":"    template <typename InputByteStream>"},
{"lineNum":"   73","line":"    static Ch Take(InputByteStream& is);"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"    //! Put BOM to output byte stream."},
{"lineNum":"   76","line":"    template <typename OutputByteStream>"},
{"lineNum":"   77","line":"    static void PutBOM(OutputByteStream& os);"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"    //! Put a character to output byte stream."},
{"lineNum":"   80","line":"    template <typename OutputByteStream>"},
{"lineNum":"   81","line":"    static void Put(OutputByteStream& os, Ch c);"},
{"lineNum":"   82","line":"};"},
{"lineNum":"   83","line":"\\endcode"},
{"lineNum":"   84","line":"*/"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   87","line":"// UTF8"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"//! UTF-8 encoding."},
{"lineNum":"   90","line":"/*! http://en.wikipedia.org/wiki/UTF-8"},
{"lineNum":"   91","line":"    http://tools.ietf.org/html/rfc3629"},
{"lineNum":"   92","line":"    \\tparam CharType Code unit for storing 8-bit UTF-8 data. Default is char."},
{"lineNum":"   93","line":"    \\note implements Encoding concept"},
{"lineNum":"   94","line":"*/"},
{"lineNum":"   95","line":"template<typename CharType = char>"},
{"lineNum":"   96","line":"struct UTF8 {"},
{"lineNum":"   97","line":"    typedef CharType Ch;"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"    enum { supportUnicode = 1 };"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"    template<typename OutputStream>"},
{"lineNum":"  102","line":"    static void Encode(OutputStream& os, unsigned codepoint) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  103","line":"        if (codepoint <= 0x7F)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  104","line":"            os.Put(static_cast<Ch>(codepoint & 0xFF));"},
{"lineNum":"  105","line":"        else if (codepoint <= 0x7FF) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  106","line":"            os.Put(static_cast<Ch>(0xC0 | ((codepoint >> 6) & 0xFF)));"},
{"lineNum":"  107","line":"            os.Put(static_cast<Ch>(0x80 | ((codepoint & 0x3F))));"},
{"lineNum":"  108","line":"        }"},
{"lineNum":"  109","line":"        else if (codepoint <= 0xFFFF) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  110","line":"            os.Put(static_cast<Ch>(0xE0 | ((codepoint >> 12) & 0xFF)));"},
{"lineNum":"  111","line":"            os.Put(static_cast<Ch>(0x80 | ((codepoint >> 6) & 0x3F)));"},
{"lineNum":"  112","line":"            os.Put(static_cast<Ch>(0x80 | (codepoint & 0x3F)));"},
{"lineNum":"  113","line":"        }"},
{"lineNum":"  114","line":"        else {"},
{"lineNum":"  115","line":"            CEREAL_RAPIDJSON_ASSERT(codepoint <= 0x10FFFF);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  116","line":"            os.Put(static_cast<Ch>(0xF0 | ((codepoint >> 18) & 0xFF)));"},
{"lineNum":"  117","line":"            os.Put(static_cast<Ch>(0x80 | ((codepoint >> 12) & 0x3F)));"},
{"lineNum":"  118","line":"            os.Put(static_cast<Ch>(0x80 | ((codepoint >> 6) & 0x3F)));"},
{"lineNum":"  119","line":"            os.Put(static_cast<Ch>(0x80 | (codepoint & 0x3F)));"},
{"lineNum":"  120","line":"        }"},
{"lineNum":"  121","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"    template<typename OutputStream>"},
{"lineNum":"  124","line":"    static void EncodeUnsafe(OutputStream& os, unsigned codepoint) {"},
{"lineNum":"  125","line":"        if (codepoint <= 0x7F)"},
{"lineNum":"  126","line":"            PutUnsafe(os, static_cast<Ch>(codepoint & 0xFF));"},
{"lineNum":"  127","line":"        else if (codepoint <= 0x7FF) {"},
{"lineNum":"  128","line":"            PutUnsafe(os, static_cast<Ch>(0xC0 | ((codepoint >> 6) & 0xFF)));"},
{"lineNum":"  129","line":"            PutUnsafe(os, static_cast<Ch>(0x80 | ((codepoint & 0x3F))));"},
{"lineNum":"  130","line":"        }"},
{"lineNum":"  131","line":"        else if (codepoint <= 0xFFFF) {"},
{"lineNum":"  132","line":"            PutUnsafe(os, static_cast<Ch>(0xE0 | ((codepoint >> 12) & 0xFF)));"},
{"lineNum":"  133","line":"            PutUnsafe(os, static_cast<Ch>(0x80 | ((codepoint >> 6) & 0x3F)));"},
{"lineNum":"  134","line":"            PutUnsafe(os, static_cast<Ch>(0x80 | (codepoint & 0x3F)));"},
{"lineNum":"  135","line":"        }"},
{"lineNum":"  136","line":"        else {"},
{"lineNum":"  137","line":"            CEREAL_RAPIDJSON_ASSERT(codepoint <= 0x10FFFF);"},
{"lineNum":"  138","line":"            PutUnsafe(os, static_cast<Ch>(0xF0 | ((codepoint >> 18) & 0xFF)));"},
{"lineNum":"  139","line":"            PutUnsafe(os, static_cast<Ch>(0x80 | ((codepoint >> 12) & 0x3F)));"},
{"lineNum":"  140","line":"            PutUnsafe(os, static_cast<Ch>(0x80 | ((codepoint >> 6) & 0x3F)));"},
{"lineNum":"  141","line":"            PutUnsafe(os, static_cast<Ch>(0x80 | (codepoint & 0x3F)));"},
{"lineNum":"  142","line":"        }"},
{"lineNum":"  143","line":"    }"},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"    template <typename InputStream>"},
{"lineNum":"  146","line":"    static bool Decode(InputStream& is, unsigned* codepoint) {"},
{"lineNum":"  147","line":"#define CEREAL_RAPIDJSON_COPY() c = is.Take(); *codepoint = (*codepoint << 6) | (static_cast<unsigned char>(c) & 0x3Fu)"},
{"lineNum":"  148","line":"#define CEREAL_RAPIDJSON_TRANS(mask) result &= ((GetRange(static_cast<unsigned char>(c)) & mask) != 0)"},
{"lineNum":"  149","line":"#define CEREAL_RAPIDJSON_TAIL() CEREAL_RAPIDJSON_COPY(); CEREAL_RAPIDJSON_TRANS(0x70)"},
{"lineNum":"  150","line":"        typename InputStream::Ch c = is.Take();"},
{"lineNum":"  151","line":"        if (!(c & 0x80)) {"},
{"lineNum":"  152","line":"            *codepoint = static_cast<unsigned char>(c);"},
{"lineNum":"  153","line":"            return true;"},
{"lineNum":"  154","line":"        }"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"        unsigned char type = GetRange(static_cast<unsigned char>(c));"},
{"lineNum":"  157","line":"        if (type >= 32) {"},
{"lineNum":"  158","line":"            *codepoint = 0;"},
{"lineNum":"  159","line":"        } else {"},
{"lineNum":"  160","line":"            *codepoint = (0xFFu >> type) & static_cast<unsigned char>(c);"},
{"lineNum":"  161","line":"        }"},
{"lineNum":"  162","line":"        bool result = true;"},
{"lineNum":"  163","line":"        switch (type) {"},
{"lineNum":"  164","line":"        case 2: CEREAL_RAPIDJSON_TAIL(); return result;"},
{"lineNum":"  165","line":"        case 3: CEREAL_RAPIDJSON_TAIL(); CEREAL_RAPIDJSON_TAIL(); return result;"},
{"lineNum":"  166","line":"        case 4: CEREAL_RAPIDJSON_COPY(); CEREAL_RAPIDJSON_TRANS(0x50); CEREAL_RAPIDJSON_TAIL(); return result;"},
{"lineNum":"  167","line":"        case 5: CEREAL_RAPIDJSON_COPY(); CEREAL_RAPIDJSON_TRANS(0x10); CEREAL_RAPIDJSON_TAIL(); CEREAL_RAPIDJSON_TAIL(); return result;"},
{"lineNum":"  168","line":"        case 6: CEREAL_RAPIDJSON_TAIL(); CEREAL_RAPIDJSON_TAIL(); CEREAL_RAPIDJSON_TAIL(); return result;"},
{"lineNum":"  169","line":"        case 10: CEREAL_RAPIDJSON_COPY(); CEREAL_RAPIDJSON_TRANS(0x20); CEREAL_RAPIDJSON_TAIL(); return result;"},
{"lineNum":"  170","line":"        case 11: CEREAL_RAPIDJSON_COPY(); CEREAL_RAPIDJSON_TRANS(0x60); CEREAL_RAPIDJSON_TAIL(); CEREAL_RAPIDJSON_TAIL(); return result;"},
{"lineNum":"  171","line":"        default: return false;"},
{"lineNum":"  172","line":"        }"},
{"lineNum":"  173","line":"#undef CEREAL_RAPIDJSON_COPY"},
{"lineNum":"  174","line":"#undef CEREAL_RAPIDJSON_TRANS"},
{"lineNum":"  175","line":"#undef CEREAL_RAPIDJSON_TAIL"},
{"lineNum":"  176","line":"    }"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"    template <typename InputStream, typename OutputStream>"},
{"lineNum":"  179","line":"    static bool Validate(InputStream& is, OutputStream& os) {"},
{"lineNum":"  180","line":"#define CEREAL_RAPIDJSON_COPY() os.Put(c = is.Take())"},
{"lineNum":"  181","line":"#define CEREAL_RAPIDJSON_TRANS(mask) result &= ((GetRange(static_cast<unsigned char>(c)) & mask) != 0)"},
{"lineNum":"  182","line":"#define CEREAL_RAPIDJSON_TAIL() CEREAL_RAPIDJSON_COPY(); CEREAL_RAPIDJSON_TRANS(0x70)"},
{"lineNum":"  183","line":"        Ch c;"},
{"lineNum":"  184","line":"        CEREAL_RAPIDJSON_COPY();"},
{"lineNum":"  185","line":"        if (!(c & 0x80))"},
{"lineNum":"  186","line":"            return true;"},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"        bool result = true;"},
{"lineNum":"  189","line":"        switch (GetRange(static_cast<unsigned char>(c))) {"},
{"lineNum":"  190","line":"        case 2: CEREAL_RAPIDJSON_TAIL(); return result;"},
{"lineNum":"  191","line":"        case 3: CEREAL_RAPIDJSON_TAIL(); CEREAL_RAPIDJSON_TAIL(); return result;"},
{"lineNum":"  192","line":"        case 4: CEREAL_RAPIDJSON_COPY(); CEREAL_RAPIDJSON_TRANS(0x50); CEREAL_RAPIDJSON_TAIL(); return result;"},
{"lineNum":"  193","line":"        case 5: CEREAL_RAPIDJSON_COPY(); CEREAL_RAPIDJSON_TRANS(0x10); CEREAL_RAPIDJSON_TAIL(); CEREAL_RAPIDJSON_TAIL(); return result;"},
{"lineNum":"  194","line":"        case 6: CEREAL_RAPIDJSON_TAIL(); CEREAL_RAPIDJSON_TAIL(); CEREAL_RAPIDJSON_TAIL(); return result;"},
{"lineNum":"  195","line":"        case 10: CEREAL_RAPIDJSON_COPY(); CEREAL_RAPIDJSON_TRANS(0x20); CEREAL_RAPIDJSON_TAIL(); return result;"},
{"lineNum":"  196","line":"        case 11: CEREAL_RAPIDJSON_COPY(); CEREAL_RAPIDJSON_TRANS(0x60); CEREAL_RAPIDJSON_TAIL(); CEREAL_RAPIDJSON_TAIL(); return result;"},
{"lineNum":"  197","line":"        default: return false;"},
{"lineNum":"  198","line":"        }"},
{"lineNum":"  199","line":"#undef CEREAL_RAPIDJSON_COPY"},
{"lineNum":"  200","line":"#undef CEREAL_RAPIDJSON_TRANS"},
{"lineNum":"  201","line":"#undef CEREAL_RAPIDJSON_TAIL"},
{"lineNum":"  202","line":"    }"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"    static unsigned char GetRange(unsigned char c) {"},
{"lineNum":"  205","line":"        // Referring to DFA of http://bjoern.hoehrmann.de/utf-8/decoder/dfa/"},
{"lineNum":"  206","line":"        // With new mapping 1 -> 0x10, 7 -> 0x20, 9 -> 0x40, such that AND operation can test multiple types."},
{"lineNum":"  207","line":"        static const unsigned char type[] = {"},
{"lineNum":"  208","line":"            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"},
{"lineNum":"  209","line":"            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"},
{"lineNum":"  210","line":"            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"},
{"lineNum":"  211","line":"            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"},
{"lineNum":"  212","line":"            0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,"},
{"lineNum":"  213","line":"            0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,"},
{"lineNum":"  214","line":"            0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,"},
{"lineNum":"  215","line":"            0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,"},
{"lineNum":"  216","line":"            8,8,2,2,2,2,2,2,2,2,2,2,2,2,2,2,  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,"},
{"lineNum":"  217","line":"            10,3,3,3,3,3,3,3,3,3,3,3,3,4,3,3, 11,6,6,6,5,8,8,8,8,8,8,8,8,8,8,8,"},
{"lineNum":"  218","line":"        };"},
{"lineNum":"  219","line":"        return type[c];"},
{"lineNum":"  220","line":"    }"},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"    template <typename InputByteStream>"},
{"lineNum":"  223","line":"    static CharType TakeBOM(InputByteStream& is) {"},
{"lineNum":"  224","line":"        CEREAL_RAPIDJSON_STATIC_ASSERT(sizeof(typename InputByteStream::Ch) == 1);"},
{"lineNum":"  225","line":"        typename InputByteStream::Ch c = Take(is);"},
{"lineNum":"  226","line":"        if (static_cast<unsigned char>(c) != 0xEFu) return c;"},
{"lineNum":"  227","line":"        c = is.Take();"},
{"lineNum":"  228","line":"        if (static_cast<unsigned char>(c) != 0xBBu) return c;"},
{"lineNum":"  229","line":"        c = is.Take();"},
{"lineNum":"  230","line":"        if (static_cast<unsigned char>(c) != 0xBFu) return c;"},
{"lineNum":"  231","line":"        c = is.Take();"},
{"lineNum":"  232","line":"        return c;"},
{"lineNum":"  233","line":"    }"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"    template <typename InputByteStream>"},
{"lineNum":"  236","line":"    static Ch Take(InputByteStream& is) {"},
{"lineNum":"  237","line":"        CEREAL_RAPIDJSON_STATIC_ASSERT(sizeof(typename InputByteStream::Ch) == 1);"},
{"lineNum":"  238","line":"        return static_cast<Ch>(is.Take());"},
{"lineNum":"  239","line":"    }"},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"    template <typename OutputByteStream>"},
{"lineNum":"  242","line":"    static void PutBOM(OutputByteStream& os) {"},
{"lineNum":"  243","line":"        CEREAL_RAPIDJSON_STATIC_ASSERT(sizeof(typename OutputByteStream::Ch) == 1);"},
{"lineNum":"  244","line":"        os.Put(static_cast<typename OutputByteStream::Ch>(0xEFu));"},
{"lineNum":"  245","line":"        os.Put(static_cast<typename OutputByteStream::Ch>(0xBBu));"},
{"lineNum":"  246","line":"        os.Put(static_cast<typename OutputByteStream::Ch>(0xBFu));"},
{"lineNum":"  247","line":"    }"},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"    template <typename OutputByteStream>"},
{"lineNum":"  250","line":"    static void Put(OutputByteStream& os, Ch c) {"},
{"lineNum":"  251","line":"        CEREAL_RAPIDJSON_STATIC_ASSERT(sizeof(typename OutputByteStream::Ch) == 1);"},
{"lineNum":"  252","line":"        os.Put(static_cast<typename OutputByteStream::Ch>(c));"},
{"lineNum":"  253","line":"    }"},
{"lineNum":"  254","line":"};"},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  257","line":"// UTF16"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"//! UTF-16 encoding."},
{"lineNum":"  260","line":"/*! http://en.wikipedia.org/wiki/UTF-16"},
{"lineNum":"  261","line":"    http://tools.ietf.org/html/rfc2781"},
{"lineNum":"  262","line":"    \\tparam CharType Type for storing 16-bit UTF-16 data. Default is wchar_t. C++11 may use char16_t instead."},
{"lineNum":"  263","line":"    \\note implements Encoding concept"},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"    \\note For in-memory access, no need to concern endianness. The code units and code points are represented by CPU\'s endianness."},
{"lineNum":"  266","line":"    For streaming, use UTF16LE and UTF16BE, which handle endianness."},
{"lineNum":"  267","line":"*/"},
{"lineNum":"  268","line":"template<typename CharType = wchar_t>"},
{"lineNum":"  269","line":"struct UTF16 {"},
{"lineNum":"  270","line":"    typedef CharType Ch;"},
{"lineNum":"  271","line":"    CEREAL_RAPIDJSON_STATIC_ASSERT(sizeof(Ch) >= 2);"},
{"lineNum":"  272","line":""},
{"lineNum":"  273","line":"    enum { supportUnicode = 1 };"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"    template<typename OutputStream>"},
{"lineNum":"  276","line":"    static void Encode(OutputStream& os, unsigned codepoint) {"},
{"lineNum":"  277","line":"        CEREAL_RAPIDJSON_STATIC_ASSERT(sizeof(typename OutputStream::Ch) >= 2);"},
{"lineNum":"  278","line":"        if (codepoint <= 0xFFFF) {"},
{"lineNum":"  279","line":"            CEREAL_RAPIDJSON_ASSERT(codepoint < 0xD800 || codepoint > 0xDFFF); // Code point itself cannot be surrogate pair"},
{"lineNum":"  280","line":"            os.Put(static_cast<typename OutputStream::Ch>(codepoint));"},
{"lineNum":"  281","line":"        }"},
{"lineNum":"  282","line":"        else {"},
{"lineNum":"  283","line":"            CEREAL_RAPIDJSON_ASSERT(codepoint <= 0x10FFFF);"},
{"lineNum":"  284","line":"            unsigned v = codepoint - 0x10000;"},
{"lineNum":"  285","line":"            os.Put(static_cast<typename OutputStream::Ch>((v >> 10) | 0xD800));"},
{"lineNum":"  286","line":"            os.Put(static_cast<typename OutputStream::Ch>((v & 0x3FF) | 0xDC00));"},
{"lineNum":"  287","line":"        }"},
{"lineNum":"  288","line":"    }"},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":""},
{"lineNum":"  291","line":"    template<typename OutputStream>"},
{"lineNum":"  292","line":"    static void EncodeUnsafe(OutputStream& os, unsigned codepoint) {"},
{"lineNum":"  293","line":"        CEREAL_RAPIDJSON_STATIC_ASSERT(sizeof(typename OutputStream::Ch) >= 2);"},
{"lineNum":"  294","line":"        if (codepoint <= 0xFFFF) {"},
{"lineNum":"  295","line":"            CEREAL_RAPIDJSON_ASSERT(codepoint < 0xD800 || codepoint > 0xDFFF); // Code point itself cannot be surrogate pair"},
{"lineNum":"  296","line":"            PutUnsafe(os, static_cast<typename OutputStream::Ch>(codepoint));"},
{"lineNum":"  297","line":"        }"},
{"lineNum":"  298","line":"        else {"},
{"lineNum":"  299","line":"            CEREAL_RAPIDJSON_ASSERT(codepoint <= 0x10FFFF);"},
{"lineNum":"  300","line":"            unsigned v = codepoint - 0x10000;"},
{"lineNum":"  301","line":"            PutUnsafe(os, static_cast<typename OutputStream::Ch>((v >> 10) | 0xD800));"},
{"lineNum":"  302","line":"            PutUnsafe(os, static_cast<typename OutputStream::Ch>((v & 0x3FF) | 0xDC00));"},
{"lineNum":"  303","line":"        }"},
{"lineNum":"  304","line":"    }"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"    template <typename InputStream>"},
{"lineNum":"  307","line":"    static bool Decode(InputStream& is, unsigned* codepoint) {"},
{"lineNum":"  308","line":"        CEREAL_RAPIDJSON_STATIC_ASSERT(sizeof(typename InputStream::Ch) >= 2);"},
{"lineNum":"  309","line":"        typename InputStream::Ch c = is.Take();"},
{"lineNum":"  310","line":"        if (c < 0xD800 || c > 0xDFFF) {"},
{"lineNum":"  311","line":"            *codepoint = static_cast<unsigned>(c);"},
{"lineNum":"  312","line":"            return true;"},
{"lineNum":"  313","line":"        }"},
{"lineNum":"  314","line":"        else if (c <= 0xDBFF) {"},
{"lineNum":"  315","line":"            *codepoint = (static_cast<unsigned>(c) & 0x3FF) << 10;"},
{"lineNum":"  316","line":"            c = is.Take();"},
{"lineNum":"  317","line":"            *codepoint |= (static_cast<unsigned>(c) & 0x3FF);"},
{"lineNum":"  318","line":"            *codepoint += 0x10000;"},
{"lineNum":"  319","line":"            return c >= 0xDC00 && c <= 0xDFFF;"},
{"lineNum":"  320","line":"        }"},
{"lineNum":"  321","line":"        return false;"},
{"lineNum":"  322","line":"    }"},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"    template <typename InputStream, typename OutputStream>"},
{"lineNum":"  325","line":"    static bool Validate(InputStream& is, OutputStream& os) {"},
{"lineNum":"  326","line":"        CEREAL_RAPIDJSON_STATIC_ASSERT(sizeof(typename InputStream::Ch) >= 2);"},
{"lineNum":"  327","line":"        CEREAL_RAPIDJSON_STATIC_ASSERT(sizeof(typename OutputStream::Ch) >= 2);"},
{"lineNum":"  328","line":"        typename InputStream::Ch c;"},
{"lineNum":"  329","line":"        os.Put(static_cast<typename OutputStream::Ch>(c = is.Take()));"},
{"lineNum":"  330","line":"        if (c < 0xD800 || c > 0xDFFF)"},
{"lineNum":"  331","line":"            return true;"},
{"lineNum":"  332","line":"        else if (c <= 0xDBFF) {"},
{"lineNum":"  333","line":"            os.Put(c = is.Take());"},
{"lineNum":"  334","line":"            return c >= 0xDC00 && c <= 0xDFFF;"},
{"lineNum":"  335","line":"        }"},
{"lineNum":"  336","line":"        return false;"},
{"lineNum":"  337","line":"    }"},
{"lineNum":"  338","line":"};"},
{"lineNum":"  339","line":""},
{"lineNum":"  340","line":"//! UTF-16 little endian encoding."},
{"lineNum":"  341","line":"template<typename CharType = wchar_t>"},
{"lineNum":"  342","line":"struct UTF16LE : UTF16<CharType> {"},
{"lineNum":"  343","line":"    template <typename InputByteStream>"},
{"lineNum":"  344","line":"    static CharType TakeBOM(InputByteStream& is) {"},
{"lineNum":"  345","line":"        CEREAL_RAPIDJSON_STATIC_ASSERT(sizeof(typename InputByteStream::Ch) == 1);"},
{"lineNum":"  346","line":"        CharType c = Take(is);"},
{"lineNum":"  347","line":"        return static_cast<uint16_t>(c) == 0xFEFFu ? Take(is) : c;"},
{"lineNum":"  348","line":"    }"},
{"lineNum":"  349","line":""},
{"lineNum":"  350","line":"    template <typename InputByteStream>"},
{"lineNum":"  351","line":"    static CharType Take(InputByteStream& is) {"},
{"lineNum":"  352","line":"        CEREAL_RAPIDJSON_STATIC_ASSERT(sizeof(typename InputByteStream::Ch) == 1);"},
{"lineNum":"  353","line":"        unsigned c = static_cast<uint8_t>(is.Take());"},
{"lineNum":"  354","line":"        c |= static_cast<unsigned>(static_cast<uint8_t>(is.Take())) << 8;"},
{"lineNum":"  355","line":"        return static_cast<CharType>(c);"},
{"lineNum":"  356","line":"    }"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"    template <typename OutputByteStream>"},
{"lineNum":"  359","line":"    static void PutBOM(OutputByteStream& os) {"},
{"lineNum":"  360","line":"        CEREAL_RAPIDJSON_STATIC_ASSERT(sizeof(typename OutputByteStream::Ch) == 1);"},
{"lineNum":"  361","line":"        os.Put(static_cast<typename OutputByteStream::Ch>(0xFFu));"},
{"lineNum":"  362","line":"        os.Put(static_cast<typename OutputByteStream::Ch>(0xFEu));"},
{"lineNum":"  363","line":"    }"},
{"lineNum":"  364","line":""},
{"lineNum":"  365","line":"    template <typename OutputByteStream>"},
{"lineNum":"  366","line":"    static void Put(OutputByteStream& os, CharType c) {"},
{"lineNum":"  367","line":"        CEREAL_RAPIDJSON_STATIC_ASSERT(sizeof(typename OutputByteStream::Ch) == 1);"},
{"lineNum":"  368","line":"        os.Put(static_cast<typename OutputByteStream::Ch>(static_cast<unsigned>(c) & 0xFFu));"},
{"lineNum":"  369","line":"        os.Put(static_cast<typename OutputByteStream::Ch>((static_cast<unsigned>(c) >> 8) & 0xFFu));"},
{"lineNum":"  370","line":"    }"},
{"lineNum":"  371","line":"};"},
{"lineNum":"  372","line":""},
{"lineNum":"  373","line":"//! UTF-16 big endian encoding."},
{"lineNum":"  374","line":"template<typename CharType = wchar_t>"},
{"lineNum":"  375","line":"struct UTF16BE : UTF16<CharType> {"},
{"lineNum":"  376","line":"    template <typename InputByteStream>"},
{"lineNum":"  377","line":"    static CharType TakeBOM(InputByteStream& is) {"},
{"lineNum":"  378","line":"        CEREAL_RAPIDJSON_STATIC_ASSERT(sizeof(typename InputByteStream::Ch) == 1);"},
{"lineNum":"  379","line":"        CharType c = Take(is);"},
{"lineNum":"  380","line":"        return static_cast<uint16_t>(c) == 0xFEFFu ? Take(is) : c;"},
{"lineNum":"  381","line":"    }"},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"    template <typename InputByteStream>"},
{"lineNum":"  384","line":"    static CharType Take(InputByteStream& is) {"},
{"lineNum":"  385","line":"        CEREAL_RAPIDJSON_STATIC_ASSERT(sizeof(typename InputByteStream::Ch) == 1);"},
{"lineNum":"  386","line":"        unsigned c = static_cast<unsigned>(static_cast<uint8_t>(is.Take())) << 8;"},
{"lineNum":"  387","line":"        c |= static_cast<unsigned>(static_cast<uint8_t>(is.Take()));"},
{"lineNum":"  388","line":"        return static_cast<CharType>(c);"},
{"lineNum":"  389","line":"    }"},
{"lineNum":"  390","line":""},
{"lineNum":"  391","line":"    template <typename OutputByteStream>"},
{"lineNum":"  392","line":"    static void PutBOM(OutputByteStream& os) {"},
{"lineNum":"  393","line":"        CEREAL_RAPIDJSON_STATIC_ASSERT(sizeof(typename OutputByteStream::Ch) == 1);"},
{"lineNum":"  394","line":"        os.Put(static_cast<typename OutputByteStream::Ch>(0xFEu));"},
{"lineNum":"  395","line":"        os.Put(static_cast<typename OutputByteStream::Ch>(0xFFu));"},
{"lineNum":"  396","line":"    }"},
{"lineNum":"  397","line":""},
{"lineNum":"  398","line":"    template <typename OutputByteStream>"},
{"lineNum":"  399","line":"    static void Put(OutputByteStream& os, CharType c) {"},
{"lineNum":"  400","line":"        CEREAL_RAPIDJSON_STATIC_ASSERT(sizeof(typename OutputByteStream::Ch) == 1);"},
{"lineNum":"  401","line":"        os.Put(static_cast<typename OutputByteStream::Ch>((static_cast<unsigned>(c) >> 8) & 0xFFu));"},
{"lineNum":"  402","line":"        os.Put(static_cast<typename OutputByteStream::Ch>(static_cast<unsigned>(c) & 0xFFu));"},
{"lineNum":"  403","line":"    }"},
{"lineNum":"  404","line":"};"},
{"lineNum":"  405","line":""},
{"lineNum":"  406","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  407","line":"// UTF32"},
{"lineNum":"  408","line":""},
{"lineNum":"  409","line":"//! UTF-32 encoding."},
{"lineNum":"  410","line":"/*! http://en.wikipedia.org/wiki/UTF-32"},
{"lineNum":"  411","line":"    \\tparam CharType Type for storing 32-bit UTF-32 data. Default is unsigned. C++11 may use char32_t instead."},
{"lineNum":"  412","line":"    \\note implements Encoding concept"},
{"lineNum":"  413","line":""},
{"lineNum":"  414","line":"    \\note For in-memory access, no need to concern endianness. The code units and code points are represented by CPU\'s endianness."},
{"lineNum":"  415","line":"    For streaming, use UTF32LE and UTF32BE, which handle endianness."},
{"lineNum":"  416","line":"*/"},
{"lineNum":"  417","line":"template<typename CharType = unsigned>"},
{"lineNum":"  418","line":"struct UTF32 {"},
{"lineNum":"  419","line":"    typedef CharType Ch;"},
{"lineNum":"  420","line":"    CEREAL_RAPIDJSON_STATIC_ASSERT(sizeof(Ch) >= 4);"},
{"lineNum":"  421","line":""},
{"lineNum":"  422","line":"    enum { supportUnicode = 1 };"},
{"lineNum":"  423","line":""},
{"lineNum":"  424","line":"    template<typename OutputStream>"},
{"lineNum":"  425","line":"    static void Encode(OutputStream& os, unsigned codepoint) {"},
{"lineNum":"  426","line":"        CEREAL_RAPIDJSON_STATIC_ASSERT(sizeof(typename OutputStream::Ch) >= 4);"},
{"lineNum":"  427","line":"        CEREAL_RAPIDJSON_ASSERT(codepoint <= 0x10FFFF);"},
{"lineNum":"  428","line":"        os.Put(codepoint);"},
{"lineNum":"  429","line":"    }"},
{"lineNum":"  430","line":""},
{"lineNum":"  431","line":"    template<typename OutputStream>"},
{"lineNum":"  432","line":"    static void EncodeUnsafe(OutputStream& os, unsigned codepoint) {"},
{"lineNum":"  433","line":"        CEREAL_RAPIDJSON_STATIC_ASSERT(sizeof(typename OutputStream::Ch) >= 4);"},
{"lineNum":"  434","line":"        CEREAL_RAPIDJSON_ASSERT(codepoint <= 0x10FFFF);"},
{"lineNum":"  435","line":"        PutUnsafe(os, codepoint);"},
{"lineNum":"  436","line":"    }"},
{"lineNum":"  437","line":""},
{"lineNum":"  438","line":"    template <typename InputStream>"},
{"lineNum":"  439","line":"    static bool Decode(InputStream& is, unsigned* codepoint) {"},
{"lineNum":"  440","line":"        CEREAL_RAPIDJSON_STATIC_ASSERT(sizeof(typename InputStream::Ch) >= 4);"},
{"lineNum":"  441","line":"        Ch c = is.Take();"},
{"lineNum":"  442","line":"        *codepoint = c;"},
{"lineNum":"  443","line":"        return c <= 0x10FFFF;"},
{"lineNum":"  444","line":"    }"},
{"lineNum":"  445","line":""},
{"lineNum":"  446","line":"    template <typename InputStream, typename OutputStream>"},
{"lineNum":"  447","line":"    static bool Validate(InputStream& is, OutputStream& os) {"},
{"lineNum":"  448","line":"        CEREAL_RAPIDJSON_STATIC_ASSERT(sizeof(typename InputStream::Ch) >= 4);"},
{"lineNum":"  449","line":"        Ch c;"},
{"lineNum":"  450","line":"        os.Put(c = is.Take());"},
{"lineNum":"  451","line":"        return c <= 0x10FFFF;"},
{"lineNum":"  452","line":"    }"},
{"lineNum":"  453","line":"};"},
{"lineNum":"  454","line":""},
{"lineNum":"  455","line":"//! UTF-32 little endian enocoding."},
{"lineNum":"  456","line":"template<typename CharType = unsigned>"},
{"lineNum":"  457","line":"struct UTF32LE : UTF32<CharType> {"},
{"lineNum":"  458","line":"    template <typename InputByteStream>"},
{"lineNum":"  459","line":"    static CharType TakeBOM(InputByteStream& is) {"},
{"lineNum":"  460","line":"        CEREAL_RAPIDJSON_STATIC_ASSERT(sizeof(typename InputByteStream::Ch) == 1);"},
{"lineNum":"  461","line":"        CharType c = Take(is);"},
{"lineNum":"  462","line":"        return static_cast<uint32_t>(c) == 0x0000FEFFu ? Take(is) : c;"},
{"lineNum":"  463","line":"    }"},
{"lineNum":"  464","line":""},
{"lineNum":"  465","line":"    template <typename InputByteStream>"},
{"lineNum":"  466","line":"    static CharType Take(InputByteStream& is) {"},
{"lineNum":"  467","line":"        CEREAL_RAPIDJSON_STATIC_ASSERT(sizeof(typename InputByteStream::Ch) == 1);"},
{"lineNum":"  468","line":"        unsigned c = static_cast<uint8_t>(is.Take());"},
{"lineNum":"  469","line":"        c |= static_cast<unsigned>(static_cast<uint8_t>(is.Take())) << 8;"},
{"lineNum":"  470","line":"        c |= static_cast<unsigned>(static_cast<uint8_t>(is.Take())) << 16;"},
{"lineNum":"  471","line":"        c |= static_cast<unsigned>(static_cast<uint8_t>(is.Take())) << 24;"},
{"lineNum":"  472","line":"        return static_cast<CharType>(c);"},
{"lineNum":"  473","line":"    }"},
{"lineNum":"  474","line":""},
{"lineNum":"  475","line":"    template <typename OutputByteStream>"},
{"lineNum":"  476","line":"    static void PutBOM(OutputByteStream& os) {"},
{"lineNum":"  477","line":"        CEREAL_RAPIDJSON_STATIC_ASSERT(sizeof(typename OutputByteStream::Ch) == 1);"},
{"lineNum":"  478","line":"        os.Put(static_cast<typename OutputByteStream::Ch>(0xFFu));"},
{"lineNum":"  479","line":"        os.Put(static_cast<typename OutputByteStream::Ch>(0xFEu));"},
{"lineNum":"  480","line":"        os.Put(static_cast<typename OutputByteStream::Ch>(0x00u));"},
{"lineNum":"  481","line":"        os.Put(static_cast<typename OutputByteStream::Ch>(0x00u));"},
{"lineNum":"  482","line":"    }"},
{"lineNum":"  483","line":""},
{"lineNum":"  484","line":"    template <typename OutputByteStream>"},
{"lineNum":"  485","line":"    static void Put(OutputByteStream& os, CharType c) {"},
{"lineNum":"  486","line":"        CEREAL_RAPIDJSON_STATIC_ASSERT(sizeof(typename OutputByteStream::Ch) == 1);"},
{"lineNum":"  487","line":"        os.Put(static_cast<typename OutputByteStream::Ch>(c & 0xFFu));"},
{"lineNum":"  488","line":"        os.Put(static_cast<typename OutputByteStream::Ch>((c >> 8) & 0xFFu));"},
{"lineNum":"  489","line":"        os.Put(static_cast<typename OutputByteStream::Ch>((c >> 16) & 0xFFu));"},
{"lineNum":"  490","line":"        os.Put(static_cast<typename OutputByteStream::Ch>((c >> 24) & 0xFFu));"},
{"lineNum":"  491","line":"    }"},
{"lineNum":"  492","line":"};"},
{"lineNum":"  493","line":""},
{"lineNum":"  494","line":"//! UTF-32 big endian encoding."},
{"lineNum":"  495","line":"template<typename CharType = unsigned>"},
{"lineNum":"  496","line":"struct UTF32BE : UTF32<CharType> {"},
{"lineNum":"  497","line":"    template <typename InputByteStream>"},
{"lineNum":"  498","line":"    static CharType TakeBOM(InputByteStream& is) {"},
{"lineNum":"  499","line":"        CEREAL_RAPIDJSON_STATIC_ASSERT(sizeof(typename InputByteStream::Ch) == 1);"},
{"lineNum":"  500","line":"        CharType c = Take(is);"},
{"lineNum":"  501","line":"        return static_cast<uint32_t>(c) == 0x0000FEFFu ? Take(is) : c;"},
{"lineNum":"  502","line":"    }"},
{"lineNum":"  503","line":""},
{"lineNum":"  504","line":"    template <typename InputByteStream>"},
{"lineNum":"  505","line":"    static CharType Take(InputByteStream& is) {"},
{"lineNum":"  506","line":"        CEREAL_RAPIDJSON_STATIC_ASSERT(sizeof(typename InputByteStream::Ch) == 1);"},
{"lineNum":"  507","line":"        unsigned c = static_cast<unsigned>(static_cast<uint8_t>(is.Take())) << 24;"},
{"lineNum":"  508","line":"        c |= static_cast<unsigned>(static_cast<uint8_t>(is.Take())) << 16;"},
{"lineNum":"  509","line":"        c |= static_cast<unsigned>(static_cast<uint8_t>(is.Take())) << 8;"},
{"lineNum":"  510","line":"        c |= static_cast<unsigned>(static_cast<uint8_t>(is.Take()));"},
{"lineNum":"  511","line":"        return static_cast<CharType>(c);"},
{"lineNum":"  512","line":"    }"},
{"lineNum":"  513","line":""},
{"lineNum":"  514","line":"    template <typename OutputByteStream>"},
{"lineNum":"  515","line":"    static void PutBOM(OutputByteStream& os) {"},
{"lineNum":"  516","line":"        CEREAL_RAPIDJSON_STATIC_ASSERT(sizeof(typename OutputByteStream::Ch) == 1);"},
{"lineNum":"  517","line":"        os.Put(static_cast<typename OutputByteStream::Ch>(0x00u));"},
{"lineNum":"  518","line":"        os.Put(static_cast<typename OutputByteStream::Ch>(0x00u));"},
{"lineNum":"  519","line":"        os.Put(static_cast<typename OutputByteStream::Ch>(0xFEu));"},
{"lineNum":"  520","line":"        os.Put(static_cast<typename OutputByteStream::Ch>(0xFFu));"},
{"lineNum":"  521","line":"    }"},
{"lineNum":"  522","line":""},
{"lineNum":"  523","line":"    template <typename OutputByteStream>"},
{"lineNum":"  524","line":"    static void Put(OutputByteStream& os, CharType c) {"},
{"lineNum":"  525","line":"        CEREAL_RAPIDJSON_STATIC_ASSERT(sizeof(typename OutputByteStream::Ch) == 1);"},
{"lineNum":"  526","line":"        os.Put(static_cast<typename OutputByteStream::Ch>((c >> 24) & 0xFFu));"},
{"lineNum":"  527","line":"        os.Put(static_cast<typename OutputByteStream::Ch>((c >> 16) & 0xFFu));"},
{"lineNum":"  528","line":"        os.Put(static_cast<typename OutputByteStream::Ch>((c >> 8) & 0xFFu));"},
{"lineNum":"  529","line":"        os.Put(static_cast<typename OutputByteStream::Ch>(c & 0xFFu));"},
{"lineNum":"  530","line":"    }"},
{"lineNum":"  531","line":"};"},
{"lineNum":"  532","line":""},
{"lineNum":"  533","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  534","line":"// ASCII"},
{"lineNum":"  535","line":""},
{"lineNum":"  536","line":"//! ASCII encoding."},
{"lineNum":"  537","line":"/*! http://en.wikipedia.org/wiki/ASCII"},
{"lineNum":"  538","line":"    \\tparam CharType Code unit for storing 7-bit ASCII data. Default is char."},
{"lineNum":"  539","line":"    \\note implements Encoding concept"},
{"lineNum":"  540","line":"*/"},
{"lineNum":"  541","line":"template<typename CharType = char>"},
{"lineNum":"  542","line":"struct ASCII {"},
{"lineNum":"  543","line":"    typedef CharType Ch;"},
{"lineNum":"  544","line":""},
{"lineNum":"  545","line":"    enum { supportUnicode = 0 };"},
{"lineNum":"  546","line":""},
{"lineNum":"  547","line":"    template<typename OutputStream>"},
{"lineNum":"  548","line":"    static void Encode(OutputStream& os, unsigned codepoint) {"},
{"lineNum":"  549","line":"        CEREAL_RAPIDJSON_ASSERT(codepoint <= 0x7F);"},
{"lineNum":"  550","line":"        os.Put(static_cast<Ch>(codepoint & 0xFF));"},
{"lineNum":"  551","line":"    }"},
{"lineNum":"  552","line":""},
{"lineNum":"  553","line":"    template<typename OutputStream>"},
{"lineNum":"  554","line":"    static void EncodeUnsafe(OutputStream& os, unsigned codepoint) {"},
{"lineNum":"  555","line":"        CEREAL_RAPIDJSON_ASSERT(codepoint <= 0x7F);"},
{"lineNum":"  556","line":"        PutUnsafe(os, static_cast<Ch>(codepoint & 0xFF));"},
{"lineNum":"  557","line":"    }"},
{"lineNum":"  558","line":""},
{"lineNum":"  559","line":"    template <typename InputStream>"},
{"lineNum":"  560","line":"    static bool Decode(InputStream& is, unsigned* codepoint) {"},
{"lineNum":"  561","line":"        uint8_t c = static_cast<uint8_t>(is.Take());"},
{"lineNum":"  562","line":"        *codepoint = c;"},
{"lineNum":"  563","line":"        return c <= 0X7F;"},
{"lineNum":"  564","line":"    }"},
{"lineNum":"  565","line":""},
{"lineNum":"  566","line":"    template <typename InputStream, typename OutputStream>"},
{"lineNum":"  567","line":"    static bool Validate(InputStream& is, OutputStream& os) {"},
{"lineNum":"  568","line":"        uint8_t c = static_cast<uint8_t>(is.Take());"},
{"lineNum":"  569","line":"        os.Put(static_cast<typename OutputStream::Ch>(c));"},
{"lineNum":"  570","line":"        return c <= 0x7F;"},
{"lineNum":"  571","line":"    }"},
{"lineNum":"  572","line":""},
{"lineNum":"  573","line":"    template <typename InputByteStream>"},
{"lineNum":"  574","line":"    static CharType TakeBOM(InputByteStream& is) {"},
{"lineNum":"  575","line":"        CEREAL_RAPIDJSON_STATIC_ASSERT(sizeof(typename InputByteStream::Ch) == 1);"},
{"lineNum":"  576","line":"        uint8_t c = static_cast<uint8_t>(Take(is));"},
{"lineNum":"  577","line":"        return static_cast<Ch>(c);"},
{"lineNum":"  578","line":"    }"},
{"lineNum":"  579","line":""},
{"lineNum":"  580","line":"    template <typename InputByteStream>"},
{"lineNum":"  581","line":"    static Ch Take(InputByteStream& is) {"},
{"lineNum":"  582","line":"        CEREAL_RAPIDJSON_STATIC_ASSERT(sizeof(typename InputByteStream::Ch) == 1);"},
{"lineNum":"  583","line":"        return static_cast<Ch>(is.Take());"},
{"lineNum":"  584","line":"    }"},
{"lineNum":"  585","line":""},
{"lineNum":"  586","line":"    template <typename OutputByteStream>"},
{"lineNum":"  587","line":"    static void PutBOM(OutputByteStream& os) {"},
{"lineNum":"  588","line":"        CEREAL_RAPIDJSON_STATIC_ASSERT(sizeof(typename OutputByteStream::Ch) == 1);"},
{"lineNum":"  589","line":"        (void)os;"},
{"lineNum":"  590","line":"    }"},
{"lineNum":"  591","line":""},
{"lineNum":"  592","line":"    template <typename OutputByteStream>"},
{"lineNum":"  593","line":"    static void Put(OutputByteStream& os, Ch c) {"},
{"lineNum":"  594","line":"        CEREAL_RAPIDJSON_STATIC_ASSERT(sizeof(typename OutputByteStream::Ch) == 1);"},
{"lineNum":"  595","line":"        os.Put(static_cast<typename OutputByteStream::Ch>(c));"},
{"lineNum":"  596","line":"    }"},
{"lineNum":"  597","line":"};"},
{"lineNum":"  598","line":""},
{"lineNum":"  599","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  600","line":"// AutoUTF"},
{"lineNum":"  601","line":""},
{"lineNum":"  602","line":"//! Runtime-specified UTF encoding type of a stream."},
{"lineNum":"  603","line":"enum UTFType {"},
{"lineNum":"  604","line":"    kUTF8 = 0,      //!< UTF-8."},
{"lineNum":"  605","line":"    kUTF16LE = 1,   //!< UTF-16 little endian."},
{"lineNum":"  606","line":"    kUTF16BE = 2,   //!< UTF-16 big endian."},
{"lineNum":"  607","line":"    kUTF32LE = 3,   //!< UTF-32 little endian."},
{"lineNum":"  608","line":"    kUTF32BE = 4    //!< UTF-32 big endian."},
{"lineNum":"  609","line":"};"},
{"lineNum":"  610","line":""},
{"lineNum":"  611","line":"//! Dynamically select encoding according to stream\'s runtime-specified UTF encoding type."},
{"lineNum":"  612","line":"/*! \\note This class can be used with AutoUTFInputtStream and AutoUTFOutputStream, which provides GetType()."},
{"lineNum":"  613","line":"*/"},
{"lineNum":"  614","line":"template<typename CharType>"},
{"lineNum":"  615","line":"struct AutoUTF {"},
{"lineNum":"  616","line":"    typedef CharType Ch;"},
{"lineNum":"  617","line":""},
{"lineNum":"  618","line":"    enum { supportUnicode = 1 };"},
{"lineNum":"  619","line":""},
{"lineNum":"  620","line":"#define CEREAL_RAPIDJSON_ENCODINGS_FUNC(x) UTF8<Ch>::x, UTF16LE<Ch>::x, UTF16BE<Ch>::x, UTF32LE<Ch>::x, UTF32BE<Ch>::x"},
{"lineNum":"  621","line":""},
{"lineNum":"  622","line":"    template<typename OutputStream>"},
{"lineNum":"  623","line":"    static CEREAL_RAPIDJSON_FORCEINLINE void Encode(OutputStream& os, unsigned codepoint) {"},
{"lineNum":"  624","line":"        typedef void (*EncodeFunc)(OutputStream&, unsigned);"},
{"lineNum":"  625","line":"        static const EncodeFunc f[] = { CEREAL_RAPIDJSON_ENCODINGS_FUNC(Encode) };"},
{"lineNum":"  626","line":"        (*f[os.GetType()])(os, codepoint);"},
{"lineNum":"  627","line":"    }"},
{"lineNum":"  628","line":""},
{"lineNum":"  629","line":"    template<typename OutputStream>"},
{"lineNum":"  630","line":"    static CEREAL_RAPIDJSON_FORCEINLINE void EncodeUnsafe(OutputStream& os, unsigned codepoint) {"},
{"lineNum":"  631","line":"        typedef void (*EncodeFunc)(OutputStream&, unsigned);"},
{"lineNum":"  632","line":"        static const EncodeFunc f[] = { CEREAL_RAPIDJSON_ENCODINGS_FUNC(EncodeUnsafe) };"},
{"lineNum":"  633","line":"        (*f[os.GetType()])(os, codepoint);"},
{"lineNum":"  634","line":"    }"},
{"lineNum":"  635","line":""},
{"lineNum":"  636","line":"    template <typename InputStream>"},
{"lineNum":"  637","line":"    static CEREAL_RAPIDJSON_FORCEINLINE bool Decode(InputStream& is, unsigned* codepoint) {"},
{"lineNum":"  638","line":"        typedef bool (*DecodeFunc)(InputStream&, unsigned*);"},
{"lineNum":"  639","line":"        static const DecodeFunc f[] = { CEREAL_RAPIDJSON_ENCODINGS_FUNC(Decode) };"},
{"lineNum":"  640","line":"        return (*f[is.GetType()])(is, codepoint);"},
{"lineNum":"  641","line":"    }"},
{"lineNum":"  642","line":""},
{"lineNum":"  643","line":"    template <typename InputStream, typename OutputStream>"},
{"lineNum":"  644","line":"    static CEREAL_RAPIDJSON_FORCEINLINE bool Validate(InputStream& is, OutputStream& os) {"},
{"lineNum":"  645","line":"        typedef bool (*ValidateFunc)(InputStream&, OutputStream&);"},
{"lineNum":"  646","line":"        static const ValidateFunc f[] = { CEREAL_RAPIDJSON_ENCODINGS_FUNC(Validate) };"},
{"lineNum":"  647","line":"        return (*f[is.GetType()])(is, os);"},
{"lineNum":"  648","line":"    }"},
{"lineNum":"  649","line":""},
{"lineNum":"  650","line":"#undef CEREAL_RAPIDJSON_ENCODINGS_FUNC"},
{"lineNum":"  651","line":"};"},
{"lineNum":"  652","line":""},
{"lineNum":"  653","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  654","line":"// Transcoder"},
{"lineNum":"  655","line":""},
{"lineNum":"  656","line":"//! Encoding conversion."},
{"lineNum":"  657","line":"template<typename SourceEncoding, typename TargetEncoding>"},
{"lineNum":"  658","line":"struct Transcoder {"},
{"lineNum":"  659","line":"    //! Take one Unicode codepoint from source encoding, convert it to target encoding and put it to the output stream."},
{"lineNum":"  660","line":"    template<typename InputStream, typename OutputStream>"},
{"lineNum":"  661","line":"    static CEREAL_RAPIDJSON_FORCEINLINE bool Transcode(InputStream& is, OutputStream& os) {"},
{"lineNum":"  662","line":"        unsigned codepoint;"},
{"lineNum":"  663","line":"        if (!SourceEncoding::Decode(is, &codepoint))"},
{"lineNum":"  664","line":"            return false;"},
{"lineNum":"  665","line":"        TargetEncoding::Encode(os, codepoint);"},
{"lineNum":"  666","line":"        return true;"},
{"lineNum":"  667","line":"    }"},
{"lineNum":"  668","line":""},
{"lineNum":"  669","line":"    template<typename InputStream, typename OutputStream>"},
{"lineNum":"  670","line":"    static CEREAL_RAPIDJSON_FORCEINLINE bool TranscodeUnsafe(InputStream& is, OutputStream& os) {"},
{"lineNum":"  671","line":"        unsigned codepoint;"},
{"lineNum":"  672","line":"        if (!SourceEncoding::Decode(is, &codepoint))"},
{"lineNum":"  673","line":"            return false;"},
{"lineNum":"  674","line":"        TargetEncoding::EncodeUnsafe(os, codepoint);"},
{"lineNum":"  675","line":"        return true;"},
{"lineNum":"  676","line":"    }"},
{"lineNum":"  677","line":""},
{"lineNum":"  678","line":"    //! Validate one Unicode codepoint from an encoded stream."},
{"lineNum":"  679","line":"    template<typename InputStream, typename OutputStream>"},
{"lineNum":"  680","line":"    static CEREAL_RAPIDJSON_FORCEINLINE bool Validate(InputStream& is, OutputStream& os) {"},
{"lineNum":"  681","line":"        return Transcode(is, os);   // Since source/target encoding is different, must transcode."},
{"lineNum":"  682","line":"    }"},
{"lineNum":"  683","line":"};"},
{"lineNum":"  684","line":""},
{"lineNum":"  685","line":"// Forward declaration."},
{"lineNum":"  686","line":"template<typename Stream>"},
{"lineNum":"  687","line":"inline void PutUnsafe(Stream& stream, typename Stream::Ch c);"},
{"lineNum":"  688","line":""},
{"lineNum":"  689","line":"//! Specialization of Transcoder with same source and target encoding."},
{"lineNum":"  690","line":"template<typename Encoding>"},
{"lineNum":"  691","line":"struct Transcoder<Encoding, Encoding> {"},
{"lineNum":"  692","line":"    template<typename InputStream, typename OutputStream>"},
{"lineNum":"  693","line":"    static CEREAL_RAPIDJSON_FORCEINLINE bool Transcode(InputStream& is, OutputStream& os) {"},
{"lineNum":"  694","line":"        os.Put(is.Take());  // Just copy one code unit. This semantic is different from primary template class."},
{"lineNum":"  695","line":"        return true;"},
{"lineNum":"  696","line":"    }"},
{"lineNum":"  697","line":""},
{"lineNum":"  698","line":"    template<typename InputStream, typename OutputStream>"},
{"lineNum":"  699","line":"    static CEREAL_RAPIDJSON_FORCEINLINE bool TranscodeUnsafe(InputStream& is, OutputStream& os) {"},
{"lineNum":"  700","line":"        PutUnsafe(os, is.Take());  // Just copy one code unit. This semantic is different from primary template class."},
{"lineNum":"  701","line":"        return true;"},
{"lineNum":"  702","line":"    }"},
{"lineNum":"  703","line":""},
{"lineNum":"  704","line":"    template<typename InputStream, typename OutputStream>"},
{"lineNum":"  705","line":"    static CEREAL_RAPIDJSON_FORCEINLINE bool Validate(InputStream& is, OutputStream& os) {"},
{"lineNum":"  706","line":"        return Encoding::Validate(is, os);  // source/target encoding are the same"},
{"lineNum":"  707","line":"    }"},
{"lineNum":"  708","line":"};"},
{"lineNum":"  709","line":""},
{"lineNum":"  710","line":"CEREAL_RAPIDJSON_NAMESPACE_END"},
{"lineNum":"  711","line":""},
{"lineNum":"  712","line":"#if defined(__GNUC__) || (defined(_MSC_VER) && !defined(__clang__))"},
{"lineNum":"  713","line":"CEREAL_RAPIDJSON_DIAG_POP"},
{"lineNum":"  714","line":"#endif"},
{"lineNum":"  715","line":""},
{"lineNum":"  716","line":"#endif // CEREAL_RAPIDJSON_ENCODINGS_H_"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 6, "covered" : 0,};
var merged_data = [];
