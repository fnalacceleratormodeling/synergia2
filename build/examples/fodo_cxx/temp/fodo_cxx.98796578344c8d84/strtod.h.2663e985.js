var data = {lines:[
{"lineNum":"    1","line":"// Tencent is pleased to support the open source community by making RapidJSON available."},
{"lineNum":"    2","line":"//"},
{"lineNum":"    3","line":"// Copyright (C) 2015 THL A29 Limited, a Tencent company, and Milo Yip. All rights reserved."},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// Licensed under the MIT License (the \"License\"); you may not use this file except"},
{"lineNum":"    6","line":"// in compliance with the License. You may obtain a copy of the License at"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"// http://opensource.org/licenses/MIT"},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// Unless required by applicable law or agreed to in writing, software distributed"},
{"lineNum":"   11","line":"// under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR"},
{"lineNum":"   12","line":"// CONDITIONS OF ANY KIND, either express or implied. See the License for the"},
{"lineNum":"   13","line":"// specific language governing permissions and limitations under the License."},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"#ifndef CEREAL_RAPIDJSON_STRTOD_"},
{"lineNum":"   16","line":"#define CEREAL_RAPIDJSON_STRTOD_"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"#include \"ieee754.h\""},
{"lineNum":"   19","line":"#include \"biginteger.h\""},
{"lineNum":"   20","line":"#include \"diyfp.h\""},
{"lineNum":"   21","line":"#include \"pow10.h\""},
{"lineNum":"   22","line":"#include <climits>"},
{"lineNum":"   23","line":"#include <limits>"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"CEREAL_RAPIDJSON_NAMESPACE_BEGIN"},
{"lineNum":"   26","line":"namespace internal {"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"inline double FastPath(double significand, int exp) {"},
{"lineNum":"   29","line":"    if (exp < -308)"},
{"lineNum":"   30","line":"        return 0.0;"},
{"lineNum":"   31","line":"    else if (exp >= 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   32","line":"        return significand * internal::Pow10(exp);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   33","line":"    else"},
{"lineNum":"   34","line":"        return significand / internal::Pow10(-exp);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   35","line":"}"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"inline double StrtodNormalPrecision(double d, int p) {"},
{"lineNum":"   38","line":"    if (p < -308) {"},
{"lineNum":"   39","line":"        // Prevent expSum < -308, making Pow10(p) = 0"},
{"lineNum":"   40","line":"        d = FastPath(d, -308);"},
{"lineNum":"   41","line":"        d = FastPath(d, p + 308);"},
{"lineNum":"   42","line":"    }"},
{"lineNum":"   43","line":"    else"},
{"lineNum":"   44","line":"        d = FastPath(d, p);"},
{"lineNum":"   45","line":"    return d;"},
{"lineNum":"   46","line":"}"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"template <typename T>"},
{"lineNum":"   49","line":"inline T Min3(T a, T b, T c) {"},
{"lineNum":"   50","line":"    T m = a;"},
{"lineNum":"   51","line":"    if (m > b) m = b;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   52","line":"    if (m > c) m = c;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   53","line":"    return m;"},
{"lineNum":"   54","line":"}"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"inline int CheckWithinHalfULP(double b, const BigInteger& d, int dExp) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   57","line":"    const Double db(b);"},
{"lineNum":"   58","line":"    const uint64_t bInt = db.IntegerSignificand();"},
{"lineNum":"   59","line":"    const int bExp = db.IntegerExponent();"},
{"lineNum":"   60","line":"    const int hExp = bExp - 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"    int dS_Exp2 = 0, dS_Exp5 = 0, bS_Exp2 = 0, bS_Exp5 = 0, hS_Exp2 = 0, hS_Exp5 = 0;"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"    // Adjust for decimal exponent"},
{"lineNum":"   65","line":"    if (dExp >= 0) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   66","line":"        dS_Exp2 += dExp;"},
{"lineNum":"   67","line":"        dS_Exp5 += dExp;"},
{"lineNum":"   68","line":"    }"},
{"lineNum":"   69","line":"    else {"},
{"lineNum":"   70","line":"        bS_Exp2 -= dExp;"},
{"lineNum":"   71","line":"        bS_Exp5 -= dExp;"},
{"lineNum":"   72","line":"        hS_Exp2 -= dExp;"},
{"lineNum":"   73","line":"        hS_Exp5 -= dExp;"},
{"lineNum":"   74","line":"    }"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"    // Adjust for binary exponent"},
{"lineNum":"   77","line":"    if (bExp >= 0)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   78","line":"        bS_Exp2 += bExp;"},
{"lineNum":"   79","line":"    else {"},
{"lineNum":"   80","line":"        dS_Exp2 -= bExp;"},
{"lineNum":"   81","line":"        hS_Exp2 -= bExp;"},
{"lineNum":"   82","line":"    }"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"    // Adjust for half ulp exponent"},
{"lineNum":"   85","line":"    if (hExp >= 0)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   86","line":"        hS_Exp2 += hExp;"},
{"lineNum":"   87","line":"    else {"},
{"lineNum":"   88","line":"        dS_Exp2 -= hExp;"},
{"lineNum":"   89","line":"        bS_Exp2 -= hExp;"},
{"lineNum":"   90","line":"    }"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"    // Remove common power of two factor from all three scaled values"},
{"lineNum":"   93","line":"    int common_Exp2 = Min3(dS_Exp2, bS_Exp2, hS_Exp2);"},
{"lineNum":"   94","line":"    dS_Exp2 -= common_Exp2;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   95","line":"    bS_Exp2 -= common_Exp2;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   96","line":"    hS_Exp2 -= common_Exp2;"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"    BigInteger dS = d;"},
{"lineNum":"   99","line":"    dS.MultiplyPow5(static_cast<unsigned>(dS_Exp5)) <<= static_cast<unsigned>(dS_Exp2);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"    BigInteger bS(bInt);"},
{"lineNum":"  102","line":"    bS.MultiplyPow5(static_cast<unsigned>(bS_Exp5)) <<= static_cast<unsigned>(bS_Exp2);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"    BigInteger hS(1);"},
{"lineNum":"  105","line":"    hS.MultiplyPow5(static_cast<unsigned>(hS_Exp5)) <<= static_cast<unsigned>(hS_Exp2);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"    BigInteger delta(0);"},
{"lineNum":"  108","line":"    dS.Difference(bS, &delta);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"    return delta.Compare(hS);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  111","line":"}"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"inline bool StrtodFast(double d, int p, double* result) {"},
{"lineNum":"  114","line":"    // Use fast path for string-to-double conversion if possible"},
{"lineNum":"  115","line":"    // see http://www.exploringbinary.com/fast-path-decimal-to-floating-point-conversion/"},
{"lineNum":"  116","line":"    if (p > 22  && p < 22 + 16) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  117","line":"        // Fast Path Cases In Disguise"},
{"lineNum":"  118","line":"        d *= internal::Pow10(p - 22);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  119","line":"        p = 22;"},
{"lineNum":"  120","line":"    }"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"    if (p >= -22 && p <= 22 && d <= 9007199254740991.0) { // 2^53 - 1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  123","line":"        *result = FastPath(d, p);"},
{"lineNum":"  124","line":"        return true;"},
{"lineNum":"  125","line":"    }"},
{"lineNum":"  126","line":"    else"},
{"lineNum":"  127","line":"        return false;"},
{"lineNum":"  128","line":"}"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"// Compute an approximation and see if it is within 1/2 ULP"},
{"lineNum":"  131","line":"inline bool StrtodDiyFp(const char* decimals, int dLen, int dExp, double* result) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  132","line":"    uint64_t significand = 0;"},
{"lineNum":"  133","line":"    int i = 0;   // 2^64 - 1 = 18446744073709551615, 1844674407370955161 = 0x1999999999999999"},
{"lineNum":"  134","line":"    for (; i < dLen; i++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  135","line":"        if (significand  >  CEREAL_RAPIDJSON_UINT64_C2(0x19999999, 0x99999999) ||"},
{"lineNum":"  136","line":"            (significand == CEREAL_RAPIDJSON_UINT64_C2(0x19999999, 0x99999999) && decimals[i] > \'5\'))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  137","line":"            break;"},
{"lineNum":"  138","line":"        significand = significand * 10u + static_cast<unsigned>(decimals[i] - \'0\');","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  139","line":"    }"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"    if (i < dLen && decimals[i] >= \'5\') // Rounding","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  142","line":"        significand++;"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"    int remaining = dLen - i;"},
{"lineNum":"  145","line":"    const int kUlpShift = 3;"},
{"lineNum":"  146","line":"    const int kUlp = 1 << kUlpShift;"},
{"lineNum":"  147","line":"    int64_t error = (remaining == 0) ? 0 : kUlp / 2;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"    DiyFp v(significand, 0);"},
{"lineNum":"  150","line":"    v = v.Normalize();"},
{"lineNum":"  151","line":"    error <<= -v.e;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"    dExp += remaining;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"    int actualExp;"},
{"lineNum":"  156","line":"    DiyFp cachedPower = GetCachedPower10(dExp, &actualExp);"},
{"lineNum":"  157","line":"    if (actualExp != dExp) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  158","line":"        static const DiyFp kPow10[] = {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  159","line":"            DiyFp(CEREAL_RAPIDJSON_UINT64_C2(0xa0000000, 0x00000000), -60),  // 10^1"},
{"lineNum":"  160","line":"            DiyFp(CEREAL_RAPIDJSON_UINT64_C2(0xc8000000, 0x00000000), -57),  // 10^2"},
{"lineNum":"  161","line":"            DiyFp(CEREAL_RAPIDJSON_UINT64_C2(0xfa000000, 0x00000000), -54),  // 10^3"},
{"lineNum":"  162","line":"            DiyFp(CEREAL_RAPIDJSON_UINT64_C2(0x9c400000, 0x00000000), -50),  // 10^4"},
{"lineNum":"  163","line":"            DiyFp(CEREAL_RAPIDJSON_UINT64_C2(0xc3500000, 0x00000000), -47),  // 10^5"},
{"lineNum":"  164","line":"            DiyFp(CEREAL_RAPIDJSON_UINT64_C2(0xf4240000, 0x00000000), -44),  // 10^6"},
{"lineNum":"  165","line":"            DiyFp(CEREAL_RAPIDJSON_UINT64_C2(0x98968000, 0x00000000), -40)   // 10^7"},
{"lineNum":"  166","line":"        };"},
{"lineNum":"  167","line":"        int adjustment = dExp - actualExp;"},
{"lineNum":"  168","line":"        CEREAL_RAPIDJSON_ASSERT(adjustment >= 1 && adjustment < 8);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  169","line":"        v = v * kPow10[adjustment - 1];"},
{"lineNum":"  170","line":"        if (dLen + adjustment > 19) // has more digits than decimal digits in 64-bit","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  171","line":"            error += kUlp / 2;"},
{"lineNum":"  172","line":"    }"},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"    v = v * cachedPower;"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"    error += kUlp + (error == 0 ? 0 : 1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"    const int oldExp = v.e;"},
{"lineNum":"  179","line":"    v = v.Normalize();"},
{"lineNum":"  180","line":"    error <<= oldExp - v.e;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"    const int effectiveSignificandSize = Double::EffectiveSignificandSize(64 + v.e);"},
{"lineNum":"  183","line":"    int precisionSize = 64 - effectiveSignificandSize;"},
{"lineNum":"  184","line":"    if (precisionSize + kUlpShift >= 64) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  185","line":"        int scaleExp = (precisionSize + kUlpShift) - 63;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  186","line":"        v.f >>= scaleExp;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  187","line":"        v.e += scaleExp;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  188","line":"        error = (error >> scaleExp) + 1 + kUlp;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  189","line":"        precisionSize -= scaleExp;"},
{"lineNum":"  190","line":"    }"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"    DiyFp rounded(v.f >> precisionSize, v.e + precisionSize);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  193","line":"    const uint64_t precisionBits = (v.f & ((uint64_t(1) << precisionSize) - 1)) * kUlp;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  194","line":"    const uint64_t halfWay = (uint64_t(1) << (precisionSize - 1)) * kUlp;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  195","line":"    if (precisionBits >= halfWay + static_cast<unsigned>(error)) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  196","line":"        rounded.f++;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  197","line":"        if (rounded.f & (DiyFp::kDpHiddenBit << 1)) { // rounding overflows mantissa (issue #340)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  198","line":"            rounded.f >>= 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  199","line":"            rounded.e++;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  200","line":"        }"},
{"lineNum":"  201","line":"    }"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"    *result = rounded.ToDouble();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"    return halfWay - static_cast<unsigned>(error) >= precisionBits || precisionBits >= halfWay + static_cast<unsigned>(error);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  206","line":"}"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"inline double StrtodBigInteger(double approx, const char* decimals, int dLen, int dExp) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  209","line":"    CEREAL_RAPIDJSON_ASSERT(dLen >= 0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  210","line":"    const BigInteger dInt(decimals, static_cast<unsigned>(dLen));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  211","line":"    Double a(approx);"},
{"lineNum":"  212","line":"    int cmp = CheckWithinHalfULP(a.Value(), dInt, dExp);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  213","line":"    if (cmp < 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  214","line":"        return a.Value();  // within half ULP"},
{"lineNum":"  215","line":"    else if (cmp == 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  216","line":"        // Round towards even"},
{"lineNum":"  217","line":"        if (a.Significand() & 1)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  218","line":"            return a.NextPositiveDouble();"},
{"lineNum":"  219","line":"        else"},
{"lineNum":"  220","line":"            return a.Value();"},
{"lineNum":"  221","line":"    }"},
{"lineNum":"  222","line":"    else // adjustment"},
{"lineNum":"  223","line":"        return a.NextPositiveDouble();"},
{"lineNum":"  224","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"inline double StrtodFullPrecision(double d, int p, const char* decimals, size_t length, size_t decimalPosition, int exp) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  227","line":"    CEREAL_RAPIDJSON_ASSERT(d >= 0.0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  228","line":"    CEREAL_RAPIDJSON_ASSERT(length >= 1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"    double result = 0.0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  231","line":"    if (StrtodFast(d, p, &result))"},
{"lineNum":"  232","line":"        return result;"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"    CEREAL_RAPIDJSON_ASSERT(length <= INT_MAX);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  235","line":"    int dLen = static_cast<int>(length);"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"    CEREAL_RAPIDJSON_ASSERT(length >= decimalPosition);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  238","line":"    CEREAL_RAPIDJSON_ASSERT(length - decimalPosition <= INT_MAX);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  239","line":"    int dExpAdjust = static_cast<int>(length - decimalPosition);"},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"    CEREAL_RAPIDJSON_ASSERT(exp >= INT_MIN + dExpAdjust);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  242","line":"    int dExp = exp - dExpAdjust;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"    // Make sure length+dExp does not overflow"},
{"lineNum":"  245","line":"    CEREAL_RAPIDJSON_ASSERT(dExp <= INT_MAX - dLen);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  246","line":""},
{"lineNum":"  247","line":"    // Trim leading zeros"},
{"lineNum":"  248","line":"    while (dLen > 0 && *decimals == \'0\') {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  249","line":"        dLen--;"},
{"lineNum":"  250","line":"        decimals++;"},
{"lineNum":"  251","line":"    }"},
{"lineNum":"  252","line":""},
{"lineNum":"  253","line":"    // Trim trailing zeros"},
{"lineNum":"  254","line":"    while (dLen > 0 && decimals[dLen - 1] == \'0\') {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  255","line":"        dLen--;"},
{"lineNum":"  256","line":"        dExp++;"},
{"lineNum":"  257","line":"    }"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"    if (dLen == 0) { // Buffer only contains zeros."},
{"lineNum":"  260","line":"        return 0.0;"},
{"lineNum":"  261","line":"    }"},
{"lineNum":"  262","line":""},
{"lineNum":"  263","line":"    // Trim right-most digits"},
{"lineNum":"  264","line":"    const int kMaxDecimalDigit = 767 + 1;"},
{"lineNum":"  265","line":"    if (dLen > kMaxDecimalDigit) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  266","line":"        dExp += dLen - kMaxDecimalDigit;"},
{"lineNum":"  267","line":"        dLen = kMaxDecimalDigit;"},
{"lineNum":"  268","line":"    }"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"    // If too small, underflow to zero."},
{"lineNum":"  271","line":"    // Any x <= 10^-324 is interpreted as zero."},
{"lineNum":"  272","line":"    if (dLen + dExp <= -324)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  273","line":"        return 0.0;"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"    // If too large, overflow to infinity."},
{"lineNum":"  276","line":"    // Any x >= 10^309 is interpreted as +infinity."},
{"lineNum":"  277","line":"    if (dLen + dExp > 309)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  278","line":"        return std::numeric_limits<double>::infinity();"},
{"lineNum":"  279","line":""},
{"lineNum":"  280","line":"    if (StrtodDiyFp(decimals, dLen, dExp, &result))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  281","line":"        return result;"},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"    // Use approximation from StrtodDiyFp and make adjustment with BigInteger comparison"},
{"lineNum":"  284","line":"    return StrtodBigInteger(result, decimals, dLen, dExp);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  285","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  286","line":""},
{"lineNum":"  287","line":"} // namespace internal"},
{"lineNum":"  288","line":"CEREAL_RAPIDJSON_NAMESPACE_END"},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"#endif // CEREAL_RAPIDJSON_STRTOD_"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 75, "covered" : 0,};
var merged_data = [];
