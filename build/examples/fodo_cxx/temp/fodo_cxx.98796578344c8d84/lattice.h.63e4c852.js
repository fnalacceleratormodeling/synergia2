var data = {lines:[
{"lineNum":"    1","line":"#ifndef LATTICE_H_"},
{"lineNum":"    2","line":"#define LATTICE_H_"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#include <string>"},
{"lineNum":"    5","line":"#include <list>"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"#include \"synergia/lattice/lattice_element.h\""},
{"lineNum":"    8","line":"#include \"synergia/foundation/reference_particle.h\""},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"//#include \"synergia/lattice/diagnostics_apertures_loss.h\""},
{"lineNum":"   11","line":"//#include \"synergia/lattice/element_adaptor.h\""},
{"lineNum":"   12","line":"//#include \"synergia/lattice/element_adaptor_map.h\""},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"#include \"synergia/utils/logger.h\""},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"#include <cereal/types/list.hpp>"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"/// The Lattice class contains an abstract representation of an ordered"},
{"lineNum":"   19","line":"/// set of objects of type Lattice_element."},
{"lineNum":"   20","line":"/// Each element of the Lattice is unique."},
{"lineNum":"   21","line":"class Lattice","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   22","line":"{"},
{"lineNum":"   23","line":"public:"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"    struct update_flags_t"},
{"lineNum":"   26","line":"    {"},
{"lineNum":"   27","line":"        bool ref;        // lattice reference particle updated"},
{"lineNum":"   28","line":"        bool structure;  // add or remove any element"},
{"lineNum":"   29","line":"        bool element;    // changes to the element attributes"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"        template<class AR>"},
{"lineNum":"   32","line":"        void serialize(AR & ar)"},
{"lineNum":"   33","line":"        { ar(ref, structure, element); }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   34","line":"    };"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"private:"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"    std::string name;"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"    Reference_particle reference_particle;"},
{"lineNum":"   41","line":"    std::list<Lattice_element> elements;"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"    update_flags_t updated;"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"    //Element_adaptor_map_sptr element_adaptor_map_sptr;"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"    //Diagnostics_losses diagnostics_loss_list;"},
{"lineNum":"   48","line":"    //bool have_loss_diagnostics;"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"public:"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"    /// Construct a Lattice object without a name."},
{"lineNum":"   53","line":"    /// Defaults to interpreting elements as Mad8 elements"},
{"lineNum":"   54","line":"    Lattice();"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"    /// Copy, move, and assignment of Lattices contain copies of elements"},
{"lineNum":"   57","line":"    Lattice(Lattice const& lattice);"},
{"lineNum":"   58","line":"    Lattice(Lattice && lattice) noexcept;"},
{"lineNum":"   59","line":"    Lattice& operator=(Lattice const& lattice);"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"    /// Construct a Lattice object with a name"},
{"lineNum":"   62","line":"    /// Defaults to interpreting elements as Mad8 elements"},
{"lineNum":"   63","line":"    /// @param name an arbitrary name"},
{"lineNum":"   64","line":"    explicit Lattice(std::string const & name);"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"    /// Construct a Lattice from the Lsexpr representation"},
{"lineNum":"   67","line":"    /// @param lsexpr representation"},
{"lineNum":"   68","line":"    explicit Lattice(Lsexpr const & lsexpr);"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"#if 0"},
{"lineNum":"   71","line":"    /// Extract an Lsexpr representation of the Lattice"},
{"lineNum":"   72","line":"    Lsexpr"},
{"lineNum":"   73","line":"    as_lsexpr() const;"},
{"lineNum":"   74","line":"#endif"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"    /// Get the Lattice name"},
{"lineNum":"   77","line":"    std::string const & get_name() const"},
{"lineNum":"   78","line":"    { return name; }"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"    /// Set the Lattice reference particle"},
{"lineNum":"   81","line":"    /// @param reference_particle a Reference_particle"},
{"lineNum":"   82","line":"    void set_reference_particle(Reference_particle const & ref)"},
{"lineNum":"   83","line":"    { reference_particle = ref; updated.ref = true; }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"    /// Get the Lattice reference particle (const)"},
{"lineNum":"   86","line":"    Reference_particle const& get_reference_particle() const"},
{"lineNum":"   87","line":"    { return reference_particle; }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"    Reference_particle& get_reference_particle()"},
{"lineNum":"   90","line":"    { return reference_particle; }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"    update_flags_t update();"},
{"lineNum":"   93","line":"    update_flags_t is_updated() const { return updated; }"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"    /// Append a copy of a Lattice_element."},
{"lineNum":"   96","line":"    /// @param element a Lattice_element"},
{"lineNum":"   97","line":"    void append(Lattice_element const & element);"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"#if 0"},
{"lineNum":"  100","line":"    /// Derive internal attributes where necessary"},
{"lineNum":"  101","line":"    void derive_internal_attributes();"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"    /// Derive external attributes where necessary"},
{"lineNum":"  104","line":"    void derive_external_attributes();"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"    /// Complete all attribute updates. Includes defaults and derivations."},
{"lineNum":"  107","line":"    void complete_attributes();"},
{"lineNum":"  108","line":"#endif"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"    /// Set the value of the named double attribute on all elements"},
{"lineNum":"  111","line":"    /// @param name attribute name"},
{"lineNum":"  112","line":"    /// @param value attribute value"},
{"lineNum":"  113","line":"    /// @param increment_revision can be set to false for attributes that do not affect dynamics"},
{"lineNum":"  114","line":"    void"},
{"lineNum":"  115","line":"    set_all_double_attribute("},
{"lineNum":"  116","line":"            std::string const& name, double value,"},
{"lineNum":"  117","line":"            bool increment_revision = true);"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"    /// Set the value of the named string attribute on all elements"},
{"lineNum":"  120","line":"    /// @param name attribute name"},
{"lineNum":"  121","line":"    /// @param value attribute value"},
{"lineNum":"  122","line":"    /// @param increment_revision can be set to false for attributes that do not affect dynamics"},
{"lineNum":"  123","line":"    void"},
{"lineNum":"  124","line":"    set_all_string_attribute("},
{"lineNum":"  125","line":"            std::string const& name, std::string const& value,"},
{"lineNum":"  126","line":"            bool increment_revision = true);"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"    /// Get the list of elements in the Lattice"},
{"lineNum":"  129","line":"    std::list<Lattice_element> const &"},
{"lineNum":"  130","line":"    get_elements() const;"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"    std::list<Lattice_element> &"},
{"lineNum":"  133","line":"    get_elements();"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"    /// Clear the h/v tunes and chromaticity markers for all lattice elements"},
{"lineNum":"  136","line":"    void"},
{"lineNum":"  137","line":"    reset_all_markers();"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"    /// Get the combined length of all the elements in the Lattice"},
{"lineNum":"  140","line":"    double"},
{"lineNum":"  141","line":"    get_length() const;"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"    /// Get the total angle in radians subtended by all the elements in the"},
{"lineNum":"  144","line":"    /// Lattice"},
{"lineNum":"  145","line":"    double"},
{"lineNum":"  146","line":"    get_total_angle() const;"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"    /// Return a human-readable summary of the elements in the Lattice."},
{"lineNum":"  149","line":"    std::string"},
{"lineNum":"  150","line":"    as_string() const;"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"    /// Print a human-readable summary of the elements in the Lattice."},
{"lineNum":"  153","line":"    /// The Python version of this function is named \"print_\"."},
{"lineNum":"  154","line":"    void"},
{"lineNum":"  155","line":"    print(Logger & logger) const;"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"    /// Saves the deposited charge to a hdf5 file"},
{"lineNum":"  158","line":"    void"},
{"lineNum":"  159","line":"    save_deposited_charge("},
{"lineNum":"  160","line":"            std::string const& fname,"},
{"lineNum":"  161","line":"            int bunch_idx = 0,"},
{"lineNum":"  162","line":"            int train_idx = 0 ) const;"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"public:"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"    // serialization"},
{"lineNum":"  167","line":"    std::string as_json() const"},
{"lineNum":"  168","line":"    {"},
{"lineNum":"  169","line":"        std::stringstream ss;"},
{"lineNum":"  170","line":"        {"},
{"lineNum":"  171","line":"            cereal::JSONOutputArchive ar(ss);"},
{"lineNum":"  172","line":"            ar(*this);"},
{"lineNum":"  173","line":"        }"},
{"lineNum":"  174","line":"        return ss.str();"},
{"lineNum":"  175","line":"    }"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"    static Lattice load_from_json(std::string const& str)"},
{"lineNum":"  178","line":"    {"},
{"lineNum":"  179","line":"        std::stringstream ss(str);"},
{"lineNum":"  180","line":"        cereal::JSONInputArchive ar(ss);"},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"        Lattice l;"},
{"lineNum":"  183","line":"        ar(l);"},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"        return l;"},
{"lineNum":"  186","line":"    }"},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"    // export madx file"},
{"lineNum":"  189","line":"    void export_madx_file(std::string const& filename) const;"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"    // read from madx file"},
{"lineNum":"  192","line":"    static Lattice import_madx_file("},
{"lineNum":"  193","line":"            std::string const& filename,"},
{"lineNum":"  194","line":"            std::string const& line);"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"private:"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"    friend class cereal::access;"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"    template<class Archive>"},
{"lineNum":"  201","line":"    void save(Archive & ar) const"},
{"lineNum":"  202","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  203","line":"        ar(CEREAL_NVP(name));"},
{"lineNum":"  204","line":"        ar(CEREAL_NVP(reference_particle));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  205","line":"        ar(CEREAL_NVP(elements));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  206","line":"        ar(CEREAL_NVP(updated));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  207","line":"    }"},
{"lineNum":"  208","line":""},
{"lineNum":"  209","line":"    template<class Archive>"},
{"lineNum":"  210","line":"    void load(Archive & ar)"},
{"lineNum":"  211","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  212","line":"        ar(CEREAL_NVP(name));"},
{"lineNum":"  213","line":"        ar(CEREAL_NVP(reference_particle));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  214","line":"        ar(CEREAL_NVP(elements));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  215","line":"        ar(CEREAL_NVP(updated));"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"        for(auto & e : elements)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  218","line":"            e.set_lattice(*this);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  219","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  220","line":"};"},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"#endif /* LATTICE_H_ */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 15, "covered" : 0,};
var merged_data = [];
