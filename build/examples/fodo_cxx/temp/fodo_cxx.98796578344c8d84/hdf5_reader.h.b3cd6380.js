var data = {lines:[
{"lineNum":"    1","line":"#ifndef HDF5_READER_H"},
{"lineNum":"    2","line":"#define HDF5_READER_H"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#include \"synergia/utils/commxx.h\""},
{"lineNum":"    5","line":"#include \"synergia/utils/hdf5_misc.h\""},
{"lineNum":"    6","line":"#include \"synergia/utils/multi_array_typedefs.h\""},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"class Hdf5_reader"},
{"lineNum":"    9","line":"{"},
{"lineNum":"   10","line":"public:"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"    Hdf5_reader() = delete;"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"    // if T is a scalar type, raed in a single value"},
{"lineNum":"   15","line":"    // if T is kokkos::view, read in the array data"},
{"lineNum":"   16","line":"    //"},
{"lineNum":"   17","line":"    // notes:"},
{"lineNum":"   18","line":"    // 1. the array container must be in c ordering"},
{"lineNum":"   19","line":"    //"},
{"lineNum":"   20","line":"    // 2. the read method does a dimension check. e.g.,"},
{"lineNum":"   21","line":"    //    a 3d dataset can be read back only via a"},
{"lineNum":"   22","line":"    //    3d container (kokkos::view) as the template"},
{"lineNum":"   23","line":"    //    parameter"},
{"lineNum":"   24","line":"    //"},
{"lineNum":"   25","line":"    // 3. the returned container will have a shape"},
{"lineNum":"   26","line":"    //    suitable for holding the entire dataset"},
{"lineNum":"   27","line":"    //"},
{"lineNum":"   28","line":"    // 4. no collective read allowed for now. the same"},
{"lineNum":"   29","line":"    //    data object containing the entire array will"},
{"lineNum":"   30","line":"    //    be returned on every rank"},
{"lineNum":"   31","line":"    //"},
{"lineNum":"   32","line":"    template<class T>"},
{"lineNum":"   33","line":"    static T"},
{"lineNum":"   34","line":"    read( Hdf5_handler const& file,"},
{"lineNum":"   35","line":"          std::string const& name,"},
{"lineNum":"   36","line":"          Commxx const& comm,"},
{"lineNum":"   37","line":"          int root_rank )"},
{"lineNum":"   38","line":"    {"},
{"lineNum":"   39","line":"        T retval;"},
{"lineNum":"   40","line":"        auto di = syn::extract_data_info(retval);"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"        // collect dim0"},
{"lineNum":"   43","line":"        auto all_dim0 = syn::collect_dims("},
{"lineNum":"   44","line":"                di.dims, false, comm, root_rank );"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"        read_verify_and_set_data_dims("},
{"lineNum":"   47","line":"                file, name, all_dim0, di,"},
{"lineNum":"   48","line":"                false, comm, root_rank );"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"        syn::resize_data_obj(retval, di);"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"        read_impl(file, name, all_dim0, di,"},
{"lineNum":"   53","line":"                false, comm, root_rank);"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"        return retval;"},
{"lineNum":"   56","line":"    }"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"    template<class T>"},
{"lineNum":"   59","line":"    static T"},
{"lineNum":"   60","line":"    read( Hdf5_handler const& file,"},
{"lineNum":"   61","line":"          std::string const& name,"},
{"lineNum":"   62","line":"          size_t len,"},
{"lineNum":"   63","line":"          Commxx const& comm,"},
{"lineNum":"   64","line":"          int root_rank )"},
{"lineNum":"   65","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   66","line":"        T retval;"},
{"lineNum":"   67","line":"        auto di = syn::extract_data_info(retval);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"        // collective read from an array into a"},
{"lineNum":"   70","line":"        // scalar doesnt make much sense"},
{"lineNum":"   71","line":"        if (di.dims.size()==0) throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   72","line":"                \"hdf5_reader::read() read from an array into a scalar\");"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"        // set the first dim, rests are still 0s"},
{"lineNum":"   75","line":"        di.dims[0] = len;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"        // collect"},
{"lineNum":"   78","line":"        auto all_dim0 = syn::collect_dims(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   79","line":"                di.dims, true, comm, root_rank );"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"        read_verify_and_set_data_dims(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   82","line":"                file, name, all_dim0, di,"},
{"lineNum":"   83","line":"                true, comm, root_rank );"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"        syn::resize_data_obj(retval, di);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"        read_impl(file, name, all_dim0, di,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   88","line":"                true, comm, root_rank);"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"        return retval;"},
{"lineNum":"   91","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"    // read 1d array"},
{"lineNum":"   94","line":"    template<class T>"},
{"lineNum":"   95","line":"    static void"},
{"lineNum":"   96","line":"    read( Hdf5_handler const& file,"},
{"lineNum":"   97","line":"          std::string const& name,"},
{"lineNum":"   98","line":"          T * data,"},
{"lineNum":"   99","line":"          Commxx const& comm,"},
{"lineNum":"  100","line":"          int root_rank )"},
{"lineNum":"  101","line":"    {"},
{"lineNum":"  102","line":"        throw std::runtime_error(\"hdf5_reader::read_3() not implemented\");"},
{"lineNum":"  103","line":"    }"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"    // collective read a 1d array"},
{"lineNum":"  106","line":"    template<class T>"},
{"lineNum":"  107","line":"    static void"},
{"lineNum":"  108","line":"    read( Hdf5_handler const& file,"},
{"lineNum":"  109","line":"          std::string const& name,"},
{"lineNum":"  110","line":"          T * data,"},
{"lineNum":"  111","line":"          size_t len,"},
{"lineNum":"  112","line":"          Commxx const& comm,"},
{"lineNum":"  113","line":"          int root_rank )"},
{"lineNum":"  114","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  115","line":"        syn::data_info_t di{","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  116","line":"            data,"},
{"lineNum":"  117","line":"            {len},"},
{"lineNum":"  118","line":"            hdf5_atomic_data_type<T>(),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  119","line":"            sizeof(T),"},
{"lineNum":"  120","line":"            len"},
{"lineNum":"  121","line":"        };"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"        auto all_dim0 = syn::collect_dims(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  124","line":"                di.dims, true, comm, root_rank );"},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"        read_verify_and_set_data_dims(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  127","line":"                file, name, all_dim0, di,"},
{"lineNum":"  128","line":"                true, comm, root_rank );"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"        read_impl(file, name, all_dim0, di,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  131","line":"                true, comm, root_rank);"},
{"lineNum":"  132","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"    static std::vector<hsize_t>"},
{"lineNum":"  135","line":"    get_dims( Hdf5_handler const& file,"},
{"lineNum":"  136","line":"              std::string  const& name,"},
{"lineNum":"  137","line":"              Commxx const& comm,"},
{"lineNum":"  138","line":"              int root_rank )"},
{"lineNum":"  139","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  140","line":"        int mpi_size = comm.size();"},
{"lineNum":"  141","line":"        int mpi_rank = comm.rank();"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"        if (!has_dataset(file, name, comm, root_rank))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  144","line":"            throw std::runtime_error(\"get_dims() dataset does not exist: \" + name);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"        int rank = 0;"},
{"lineNum":"  147","line":"        std::vector<hsize_t> dims = {};"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"#ifndef USE_PARALLEL_HDF5"},
{"lineNum":"  150","line":"        // get and verify done only on the root_rank"},
{"lineNum":"  151","line":"        if (mpi_rank == root_rank)"},
{"lineNum":"  152","line":"#endif"},
{"lineNum":"  153","line":"        {"},
{"lineNum":"  154","line":"            if (!file.valid())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  155","line":"                throw std::runtime_error(\"invalid file handler\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"            Hdf5_handler dset = H5Dopen(file, name.c_str(), H5P_DEFAULT);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  158","line":"            Hdf5_handler filespace = H5Dget_space(dset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"            // get and check the data rank"},
{"lineNum":"  161","line":"            rank = H5Sget_simple_extent_ndims(filespace);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  162","line":"            if (rank < 0) throw Hdf5_exception(\"error at getting rank\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"            // get, check, and broadcast the dims for non-scalar"},
{"lineNum":"  165","line":"            if (rank)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  166","line":"            {"},
{"lineNum":"  167","line":"                dims.resize(rank);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  168","line":"                herr_t res = H5Sget_simple_extent_dims(filespace, dims.data(), NULL);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  169","line":"                if (res < 0) throw Hdf5_exception(\"error at getting dims\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  170","line":"            }"},
{"lineNum":"  171","line":"        }"},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"#ifndef USE_PARALLEL_HDF5"},
{"lineNum":"  174","line":"        // boradcast data rank"},
{"lineNum":"  175","line":"        MPI_Bcast(&rank, 1, MPI_INT, root_rank, comm);"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"        // broadcast the dims to all ranks"},
{"lineNum":"  178","line":"        if (rank)"},
{"lineNum":"  179","line":"        {"},
{"lineNum":"  180","line":"            dims.resize(rank);"},
{"lineNum":"  181","line":"            MPI_Bcast(dims.data(), dims.size(), MPI_UINT64_T, root_rank, comm);"},
{"lineNum":"  182","line":"        }"},
{"lineNum":"  183","line":"#endif"},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"        return dims;"},
{"lineNum":"  186","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"    static void"},
{"lineNum":"  189","line":"    read_verify_and_set_data_dims("},
{"lineNum":"  190","line":"            Hdf5_handler const& file,"},
{"lineNum":"  191","line":"            std::string  const& name,"},
{"lineNum":"  192","line":"            std::vector<hsize_t>& all_dims_0,"},
{"lineNum":"  193","line":"            syn::data_info_t& di,"},
{"lineNum":"  194","line":"            bool collective,"},
{"lineNum":"  195","line":"            Commxx const& comm,"},
{"lineNum":"  196","line":"            int root_rank )"},
{"lineNum":"  197","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  198","line":"        int mpi_size = comm.size();"},
{"lineNum":"  199","line":"        int mpi_rank = comm.rank();"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"        if (!has_dataset(file, name, comm, root_rank))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  202","line":"            throw std::runtime_error(\"hdf5_read() dataset does not exist: \" + name);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"        // data rank"},
{"lineNum":"  205","line":"        auto data_rank = di.dims.size();"},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"        // offsets for each rank (offsets of dim0 in the combined array)"},
{"lineNum":"  208","line":"        std::vector<hsize_t> offsets(mpi_size, 0);"},
{"lineNum":"  209","line":"        for (int r=0; r<mpi_size-1; ++r) offsets[r+1] = offsets[r] + all_dims_0[r];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"        // dim0 of the combined array"},
{"lineNum":"  212","line":"        hsize_t dim0 = offsets[mpi_size-1] + all_dims_0[mpi_size-1];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"        // get and verify done only on the root_rank"},
{"lineNum":"  215","line":"        int error = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"#ifndef USE_PARALLEL_HDF5"},
{"lineNum":"  218","line":"        if (mpi_rank == root_rank)"},
{"lineNum":"  219","line":"#endif"},
{"lineNum":"  220","line":"        {"},
{"lineNum":"  221","line":"            if (!file.valid())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  222","line":"            {"},
{"lineNum":"  223","line":"                error = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  224","line":"                MPI_Bcast(&error, 1, MPI_INT, root_rank, comm);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  225","line":"                throw std::runtime_error(\"invalid file handler\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  226","line":"            }"},
{"lineNum":"  227","line":""},
{"lineNum":"  228","line":"            Hdf5_handler dset = H5Dopen(file, name.c_str(), H5P_DEFAULT);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  229","line":"            Hdf5_handler filespace = H5Dget_space(dset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"            // get and check the datatype"},
{"lineNum":"  232","line":"            Hdf5_handler type = H5Dget_type(dset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  233","line":"            if (H5Tequal(type, di.atomic_type) <= 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  234","line":"            {"},
{"lineNum":"  235","line":"                error = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  236","line":"                MPI_Bcast(&error, 1, MPI_INT, root_rank, comm);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  237","line":"                throw std::runtime_error(\"wrong atomic data type\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  238","line":"            }"},
{"lineNum":"  239","line":""},
{"lineNum":"  240","line":"            // get and check the data rank"},
{"lineNum":"  241","line":"            int rank = H5Sget_simple_extent_ndims(filespace);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  242","line":"            if (rank < 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  243","line":"            {"},
{"lineNum":"  244","line":"                error = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  245","line":"                MPI_Bcast(&error, 1, MPI_INT, root_rank, comm);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  246","line":"                throw Hdf5_exception(\"error at getting rank\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  247","line":"            }"},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"            if (rank != data_rank)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  250","line":"            {"},
{"lineNum":"  251","line":"                error = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  252","line":"                MPI_Bcast(&error, 1, MPI_INT, root_rank, comm);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  253","line":"                throw std::runtime_error(\"Hdf5_reader: wrong rank\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  254","line":"            }"},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"            // get, check, and broadcast the dims for non-scalar"},
{"lineNum":"  257","line":"            if (rank)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  258","line":"            {"},
{"lineNum":"  259","line":"                std::vector<hsize_t> dims(rank);"},
{"lineNum":"  260","line":"                herr_t res = H5Sget_simple_extent_dims(filespace, dims.data(), NULL);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  261","line":"                if (res < 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  262","line":"                {"},
{"lineNum":"  263","line":"                    error = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  264","line":"                    MPI_Bcast(&error, 1, MPI_INT, root_rank, comm);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  265","line":"                    throw Hdf5_exception(\"error at getting dims\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  266","line":"                }"},
{"lineNum":"  267","line":""},
{"lineNum":"  268","line":"                // only the collective read of non-scalar needs the dim check"},
{"lineNum":"  269","line":"                if (collective && (dims[0] != dim0))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  270","line":"                {"},
{"lineNum":"  271","line":"                    error = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  272","line":"                    MPI_Bcast(&error, 1, MPI_INT, root_rank, comm);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  273","line":"                    throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  274","line":"                            \"Hdf5_reader: combined dim[0] is inconsistent with \""},
{"lineNum":"  275","line":"                            \"the dataset from file\" );"},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"                }"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"                di.dims = dims;"},
{"lineNum":"  280","line":"            }"},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"        }"},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"#ifndef USE_PARALLEL_HDF5"},
{"lineNum":"  285","line":"        MPI_Bcast(&error, 1, MPI_INT, root_rank, comm);"},
{"lineNum":"  286","line":"        if (error) throw std::runtime_error(\"err at root_rank\");"},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"        // broadcast the dims to all ranks"},
{"lineNum":"  289","line":"        if (data_rank)"},
{"lineNum":"  290","line":"            MPI_Bcast(di.dims.data(), data_rank, MPI_UINT64_T, root_rank, comm);"},
{"lineNum":"  291","line":"#endif"},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"        // in collective vector read, all_dim0 is init with everyone\'s read"},
{"lineNum":"  294","line":"        // size. after read_verify, di.dims is populated with the full array"},
{"lineNum":"  295","line":"        // shape. so the final set is needed to get a proper array shape for"},
{"lineNum":"  296","line":"        // each rank"},
{"lineNum":"  297","line":"        //"},
{"lineNum":"  298","line":"        // collective scalar read is prohibited"},
{"lineNum":"  299","line":"        //"},
{"lineNum":"  300","line":"        // in non-collective vector read, all_dim0 is inited with all 0, and"},
{"lineNum":"  301","line":"        // di.dims are set to the dims of the full array. In this case, set the"},
{"lineNum":"  302","line":"        // root rank of all_dims0 to the full dim0, and leave all other ranks"},
{"lineNum":"  303","line":"        // to 0. Later in read_impl it doesnt need to read the file again in"},
{"lineNum":"  304","line":"        // order to figure out the full array size (so when the size is 0, the"},
{"lineNum":"  305","line":"        // read should be skipped)"},
{"lineNum":"  306","line":"        //"},
{"lineNum":"  307","line":"        // in non-collective scalar read, all_dim0 already init with 1 in the"},
{"lineNum":"  308","line":"        // root rank, and 0 in others. so no need to do any more setups."},
{"lineNum":"  309","line":"        //"},
{"lineNum":"  310","line":"        if (collective) di.dims[0] = all_dims_0[mpi_rank];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  311","line":"        else if(data_rank) all_dims_0[root_rank] = di.dims[0];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  312","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  313","line":""},
{"lineNum":"  314","line":"    static void"},
{"lineNum":"  315","line":"    read_impl("},
{"lineNum":"  316","line":"            Hdf5_handler const& file,"},
{"lineNum":"  317","line":"            std::string const& name,"},
{"lineNum":"  318","line":"            std::vector<hsize_t> const& all_dims_0,"},
{"lineNum":"  319","line":"            syn::data_info_t const& di,"},
{"lineNum":"  320","line":"            bool collective,"},
{"lineNum":"  321","line":"            Commxx const& comm,"},
{"lineNum":"  322","line":"            int root_rank )"},
{"lineNum":"  323","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  324","line":"        int mpi_size = comm.size();"},
{"lineNum":"  325","line":"        int mpi_rank = comm.rank();"},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"        // data rank"},
{"lineNum":"  328","line":"        auto data_rank = di.dims.size();"},
{"lineNum":"  329","line":""},
{"lineNum":"  330","line":"        // offsets for each rank (offsets of dim0 in the combined array)"},
{"lineNum":"  331","line":"        std::vector<hsize_t> offsets(mpi_size, 0);"},
{"lineNum":"  332","line":"        for (int r=0; r<mpi_size-1; ++r) offsets[r+1] = offsets[r] + all_dims_0[r];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  333","line":""},
{"lineNum":"  334","line":"        // total dim0"},
{"lineNum":"  335","line":"        hsize_t dim0 = offsets[mpi_size-1] + all_dims_0[mpi_size-1];"},
{"lineNum":"  336","line":""},
{"lineNum":"  337","line":"        // do not read if the file data is empty"},
{"lineNum":"  338","line":"        if (data_rank && dim0 == 0) return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  339","line":""},
{"lineNum":"  340","line":"#ifdef USE_PARALLEL_HDF5"},
{"lineNum":"  341","line":""},
{"lineNum":"  342","line":"        if (!file.valid())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  343","line":"            throw std::runtime_error(\"invalid file handler\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  344","line":""},
{"lineNum":"  345","line":"        // open dataset"},
{"lineNum":"  346","line":"        Hdf5_handler dset   = H5Dopen(file, name.c_str(), H5P_DEFAULT);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  347","line":"        Hdf5_handler fspace = H5Dget_space(dset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  348","line":"        Hdf5_handler mspace = H5Screate_simple(data_rank, di.dims.data(), NULL);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  349","line":""},
{"lineNum":"  350","line":"        if (data_rank)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  351","line":"        {"},
{"lineNum":"  352","line":"            // select the slab"},
{"lineNum":"  353","line":"            auto offset = std::vector<hsize_t>(data_rank, 0);"},
{"lineNum":"  354","line":"            offset[0] = offsets[mpi_rank];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  355","line":""},
{"lineNum":"  356","line":"            auto res = H5Sselect_hyperslab(fspace, H5S_SELECT_SET,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  357","line":"                    offset.data(), NULL, di.dims.data(), NULL);"},
{"lineNum":"  358","line":""},
{"lineNum":"  359","line":"            if (res < 0) throw Hdf5_exception(\"error at select hyperslab\");","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  360","line":"        }"},
{"lineNum":"  361","line":""},
{"lineNum":"  362","line":"        // collective write"},
{"lineNum":"  363","line":"        Hdf5_handler plist_id = H5Pcreate(H5P_DATASET_XFER);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  364","line":"        H5Pset_dxpl_mpio(plist_id, H5FD_MPIO_COLLECTIVE);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":"        // read"},
{"lineNum":"  367","line":"        auto res = H5Dread(dset, di.atomic_type, mspace, fspace, plist_id, (void*)di.ptr);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  368","line":"        if (res < 0) throw Hdf5_exception(\"error read\");","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  369","line":"        //if (res < 0) H5Eprint(H5E_DEFAULT, stdout);"},
{"lineNum":"  370","line":""},
{"lineNum":"  371","line":"#else"},
{"lineNum":"  372","line":""},
{"lineNum":"  373","line":"        if (collective)"},
{"lineNum":"  374","line":"        {"},
{"lineNum":"  375","line":"            // collective read"},
{"lineNum":"  376","line":"            // read a portion and point-to-point send to each rank"},
{"lineNum":"  377","line":"            if (mpi_rank == root_rank)"},
{"lineNum":"  378","line":"            {"},
{"lineNum":"  379","line":"                if (!file.valid())"},
{"lineNum":"  380","line":"                    throw std::runtime_error(\"invalid file handler\");"},
{"lineNum":"  381","line":""},
{"lineNum":"  382","line":"                // open dataset"},
{"lineNum":"  383","line":"                Hdf5_handler dset   = H5Dopen(file, name.c_str(), H5P_DEFAULT);"},
{"lineNum":"  384","line":"                Hdf5_handler fspace = H5Dget_space(dset);"},
{"lineNum":"  385","line":""},
{"lineNum":"  386","line":"                // local dims"},
{"lineNum":"  387","line":"                auto dimsm = di.dims;"},
{"lineNum":"  388","line":""},
{"lineNum":"  389","line":"                for(int r=0; r<mpi_size; ++r)"},
{"lineNum":"  390","line":"                {"},
{"lineNum":"  391","line":"                    // set the read count"},
{"lineNum":"  392","line":"                    if(dimsm.size()) dimsm[0] = all_dims_0[r];"},
{"lineNum":"  393","line":""},
{"lineNum":"  394","line":"                    // memspace"},
{"lineNum":"  395","line":"                    Hdf5_handler mspace = H5Screate_simple(data_rank, dimsm.data(), NULL);"},
{"lineNum":"  396","line":""},
{"lineNum":"  397","line":"                    if (data_rank)"},
{"lineNum":"  398","line":"                    {"},
{"lineNum":"  399","line":"                        // select the slab"},
{"lineNum":"  400","line":"                        auto offset = std::vector<hsize_t>(data_rank, 0);"},
{"lineNum":"  401","line":"                        offset[0] = offsets[r];"},
{"lineNum":"  402","line":""},
{"lineNum":"  403","line":"                        auto res = H5Sselect_hyperslab(fspace, H5S_SELECT_SET,"},
{"lineNum":"  404","line":"                                offset.data(), NULL, dimsm.data(), NULL);"},
{"lineNum":"  405","line":""},
{"lineNum":"  406","line":"                        if (res < 0) throw Hdf5_exception(\"error at select hyperslab\");"},
{"lineNum":"  407","line":"                    }"},
{"lineNum":"  408","line":""},
{"lineNum":"  409","line":"                    if (r == mpi_rank)"},
{"lineNum":"  410","line":"                    {"},
{"lineNum":"  411","line":"                        auto res = H5Dread(dset, di.atomic_type, mspace, fspace, H5P_DEFAULT, (void*)di.ptr);"},
{"lineNum":"  412","line":"                        if (res < 0) throw Hdf5_exception(\"error read\");"},
{"lineNum":"  413","line":"                    }"},
{"lineNum":"  414","line":"                    else"},
{"lineNum":"  415","line":"                    {"},
{"lineNum":"  416","line":"                        size_t sz = di.atomic_data_size;"},
{"lineNum":"  417","line":"                        for(auto d : dimsm) sz *= d;"},
{"lineNum":"  418","line":""},
{"lineNum":"  419","line":"                        if (sz)"},
{"lineNum":"  420","line":"                        {"},
{"lineNum":"  421","line":"                            std::vector<uint8_t> buf(sz);"},
{"lineNum":"  422","line":""},
{"lineNum":"  423","line":"                            // read"},
{"lineNum":"  424","line":"                            auto res = H5Dread(dset, di.atomic_type, mspace, fspace,"},
{"lineNum":"  425","line":"                                    H5P_DEFAULT, (void*)buf.data());"},
{"lineNum":"  426","line":""},
{"lineNum":"  427","line":"                            if (res < 0) throw Hdf5_exception(\"error read\");"},
{"lineNum":"  428","line":""},
{"lineNum":"  429","line":"                            // send to rank r"},
{"lineNum":"  430","line":"                            MPI_Send((void*)buf.data(), buf.size(), MPI_BYTE, r, 0, comm);"},
{"lineNum":"  431","line":"                        }"},
{"lineNum":"  432","line":"                    }"},
{"lineNum":"  433","line":"                }"},
{"lineNum":"  434","line":"            }"},
{"lineNum":"  435","line":"            else"},
{"lineNum":"  436","line":"            {"},
{"lineNum":"  437","line":"                // local dims(counts)"},
{"lineNum":"  438","line":"                auto dimsm = di.dims;"},
{"lineNum":"  439","line":"                if (dimsm.size()) dimsm[0] = all_dims_0[mpi_rank];"},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"                size_t sz = di.atomic_data_size;"},
{"lineNum":"  442","line":"                for(auto d : dimsm) sz *= d;"},
{"lineNum":"  443","line":""},
{"lineNum":"  444","line":"                if (sz)"},
{"lineNum":"  445","line":"                {"},
{"lineNum":"  446","line":"                    MPI_Status status;"},
{"lineNum":"  447","line":"                    MPI_Recv((void*)di.ptr, sz, MPI_BYTE, root_rank, 0, comm, &status);"},
{"lineNum":"  448","line":"                }"},
{"lineNum":"  449","line":"            }"},
{"lineNum":"  450","line":"        }"},
{"lineNum":"  451","line":"        else"},
{"lineNum":"  452","line":"        {"},
{"lineNum":"  453","line":"            // non-collective read"},
{"lineNum":"  454","line":"            // read entire array, and bcast to all ranks"},
{"lineNum":"  455","line":"            if (mpi_rank == root_rank)"},
{"lineNum":"  456","line":"            {"},
{"lineNum":"  457","line":"                if (!file.valid())"},
{"lineNum":"  458","line":"                    throw std::runtime_error(\"invalid file handler\");"},
{"lineNum":"  459","line":""},
{"lineNum":"  460","line":"                // open dataset"},
{"lineNum":"  461","line":"                Hdf5_handler dset   = H5Dopen(file, name.c_str(), H5P_DEFAULT);"},
{"lineNum":"  462","line":"                Hdf5_handler fspace = H5Dget_space(dset);"},
{"lineNum":"  463","line":""},
{"lineNum":"  464","line":"                // memspace"},
{"lineNum":"  465","line":"                Hdf5_handler mspace = H5Screate_simple(data_rank, di.dims.data(), NULL);"},
{"lineNum":"  466","line":""},
{"lineNum":"  467","line":"                // read"},
{"lineNum":"  468","line":"                auto res = H5Dread(dset, di.atomic_type, mspace, fspace, H5P_DEFAULT, (void*)di.ptr);"},
{"lineNum":"  469","line":"                if (res < 0) throw Hdf5_exception(\"error read\");"},
{"lineNum":"  470","line":"            }"},
{"lineNum":"  471","line":""},
{"lineNum":"  472","line":"            // buf size"},
{"lineNum":"  473","line":"            size_t sz = di.atomic_data_size;"},
{"lineNum":"  474","line":"            for(auto d : di.dims) sz *= d;"},
{"lineNum":"  475","line":""},
{"lineNum":"  476","line":"            // brodcast"},
{"lineNum":"  477","line":"            if (sz) MPI_Bcast((void*)di.ptr, sz, MPI_BYTE, root_rank, comm);"},
{"lineNum":"  478","line":"        }"},
{"lineNum":"  479","line":"#endif"},
{"lineNum":"  480","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  481","line":""},
{"lineNum":"  482","line":"    static void"},
{"lineNum":"  483","line":"    bcast_vec_str_send(std::vector<std::string> const& vs, Commxx const& comm, int root)"},
{"lineNum":"  484","line":"    {"},
{"lineNum":"  485","line":"        size_t total = 0;"},
{"lineNum":"  486","line":"        std::vector<size_t> lens;"},
{"lineNum":"  487","line":""},
{"lineNum":"  488","line":"        for(auto const& n : vs)"},
{"lineNum":"  489","line":"        {"},
{"lineNum":"  490","line":"            total += n.size();"},
{"lineNum":"  491","line":"            lens.push_back(n.size());"},
{"lineNum":"  492","line":"        }"},
{"lineNum":"  493","line":""},
{"lineNum":"  494","line":"        lens.push_back(total);"},
{"lineNum":"  495","line":"        size_t l = lens.size();"},
{"lineNum":"  496","line":""},
{"lineNum":"  497","line":"        size_t off = 0;"},
{"lineNum":"  498","line":"        std::vector<char> buf(total);"},
{"lineNum":"  499","line":""},
{"lineNum":"  500","line":"        for(auto const& n : vs)"},
{"lineNum":"  501","line":"        {"},
{"lineNum":"  502","line":"            strcpy(&buf[off], n.c_str());"},
{"lineNum":"  503","line":"            off += n.size();"},
{"lineNum":"  504","line":"        }"},
{"lineNum":"  505","line":""},
{"lineNum":"  506","line":"        MPI_Bcast(&l, 1, MPI_UINT64_T, root, comm);"},
{"lineNum":"  507","line":"        MPI_Bcast(&lens[0], lens.size(), MPI_UINT64_T, root, comm);"},
{"lineNum":"  508","line":"        if (lens.back()) MPI_Bcast(&buf[0], buf.size(), MPI_BYTE, root, comm);"},
{"lineNum":"  509","line":"    }"},
{"lineNum":"  510","line":""},
{"lineNum":"  511","line":"    static void"},
{"lineNum":"  512","line":"    bcast_vec_str_recv(std::vector<std::string>& vs, Commxx const& comm, int root)"},
{"lineNum":"  513","line":"    {"},
{"lineNum":"  514","line":"        size_t l = 0;"},
{"lineNum":"  515","line":"        MPI_Bcast(&l, 1, MPI_UINT64_T, root, comm);"},
{"lineNum":"  516","line":""},
{"lineNum":"  517","line":"        std::vector<size_t> lens(l);"},
{"lineNum":"  518","line":"        MPI_Bcast(&lens[0], lens.size(), MPI_UINT64_T, root, comm);"},
{"lineNum":"  519","line":""},
{"lineNum":"  520","line":"        if (lens.back())"},
{"lineNum":"  521","line":"        {"},
{"lineNum":"  522","line":"            std::vector<char> buf(lens.back());"},
{"lineNum":"  523","line":"            MPI_Bcast(&buf[0], buf.size(), MPI_BYTE, root, comm);"},
{"lineNum":"  524","line":""},
{"lineNum":"  525","line":"            size_t off = 0;"},
{"lineNum":"  526","line":"            for(int i=0; i<lens.size()-1; ++i)"},
{"lineNum":"  527","line":"            {"},
{"lineNum":"  528","line":"                vs.push_back(std::string(&buf[off], lens[i]));"},
{"lineNum":"  529","line":"                off += lens[i];"},
{"lineNum":"  530","line":"            }"},
{"lineNum":"  531","line":"        }"},
{"lineNum":"  532","line":"    }"},
{"lineNum":"  533","line":""},
{"lineNum":"  534","line":"    static std::vector<std::string>"},
{"lineNum":"  535","line":"    get_dataset_names(Hdf5_handler const& file, Commxx const& comm, int root_rank)"},
{"lineNum":"  536","line":"    {"},
{"lineNum":"  537","line":""},
{"lineNum":"  538","line":"        std::vector<std::string> names;"},
{"lineNum":"  539","line":""},
{"lineNum":"  540","line":"        auto cb = [](hid_t oid, const char* name,"},
{"lineNum":"  541","line":"                const H5O_info_t *info, void *op) {"},
{"lineNum":"  542","line":"            if (info->type == H5O_TYPE_DATASET)"},
{"lineNum":"  543","line":"                ((std::vector<std::string>*)op)->push_back(name);"},
{"lineNum":"  544","line":"            return 0;"},
{"lineNum":"  545","line":"        };"},
{"lineNum":"  546","line":""},
{"lineNum":"  547","line":"#ifdef USE_PARALLEL_HDF5"},
{"lineNum":"  548","line":""},
{"lineNum":"  549","line":"    #if H5_VERS_MAJOR==1 && H5_VERS_MINOR < 12"},
{"lineNum":"  550","line":"        auto res = H5Ovisit(file, H5_INDEX_NAME, H5_ITER_NATIVE,"},
{"lineNum":"  551","line":"                cb, (void*)&names );"},
{"lineNum":"  552","line":"    #else"},
{"lineNum":"  553","line":"        auto res = H5Ovisit(file, H5_INDEX_NAME, H5_ITER_NATIVE,"},
{"lineNum":"  554","line":"                cb, (void*)&names, H5O_INFO_BASIC );"},
{"lineNum":"  555","line":"    #endif"},
{"lineNum":"  556","line":""},
{"lineNum":"  557","line":"#else"},
{"lineNum":"  558","line":""},
{"lineNum":"  559","line":"        if (comm.rank() == root_rank)"},
{"lineNum":"  560","line":"        {"},
{"lineNum":"  561","line":"    #if H5_VERS_MAJOR==1 && H5_VERS_MINOR < 12"},
{"lineNum":"  562","line":"            auto res = H5Ovisit(file, H5_INDEX_NAME, H5_ITER_NATIVE,"},
{"lineNum":"  563","line":"                    cb, (void*)&names );"},
{"lineNum":"  564","line":"    #else"},
{"lineNum":"  565","line":"            auto res = H5Ovisit(file, H5_INDEX_NAME, H5_ITER_NATIVE,"},
{"lineNum":"  566","line":"                    cb, (void*)&names, H5O_INFO_BASIC );"},
{"lineNum":"  567","line":"    #endif"},
{"lineNum":"  568","line":""},
{"lineNum":"  569","line":"            bcast_vec_str_send(names, comm, root_rank);"},
{"lineNum":"  570","line":"        }"},
{"lineNum":"  571","line":"        else"},
{"lineNum":"  572","line":"        {"},
{"lineNum":"  573","line":"            bcast_vec_str_recv(names, comm, root_rank);"},
{"lineNum":"  574","line":"        }"},
{"lineNum":"  575","line":""},
{"lineNum":"  576","line":"#endif"},
{"lineNum":"  577","line":""},
{"lineNum":"  578","line":"        return names;"},
{"lineNum":"  579","line":"    }"},
{"lineNum":"  580","line":""},
{"lineNum":"  581","line":"    static bool"},
{"lineNum":"  582","line":"    has_dataset(Hdf5_handler const& file, std::string const& name, Commxx const& comm, int root_rank)"},
{"lineNum":"  583","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  584","line":"        int has = 0;"},
{"lineNum":"  585","line":""},
{"lineNum":"  586","line":"#ifndef USE_PARALLEL_HDF5"},
{"lineNum":"  587","line":"        if (comm.rank() == root_rank)"},
{"lineNum":"  588","line":"#endif"},
{"lineNum":"  589","line":"        {"},
{"lineNum":"  590","line":"            // if the name exists"},
{"lineNum":"  591","line":"            if (H5Oexists_by_name(file, name.c_str(), H5P_DEFAULT) > 0)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  592","line":"            {"},
{"lineNum":"  593","line":"                // and it is a dataset"},
{"lineNum":"  594","line":"                H5O_info_t info;"},
{"lineNum":"  595","line":"    #if H5_VERS_MAJOR==1 && H5_VERS_MINOR < 12"},
{"lineNum":"  596","line":"                auto res = H5Oget_info_by_name(file, name.c_str(), &info, H5P_DEFAULT);"},
{"lineNum":"  597","line":"    #else"},
{"lineNum":"  598","line":"                auto res = H5Oget_info_by_name(file, name.c_str(), &info, H5O_INFO_BASIC, H5P_DEFAULT);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  599","line":"    #endif"},
{"lineNum":"  600","line":"                if (res < 0) throw std::runtime_error(\"error when getting obj info\");","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  601","line":""},
{"lineNum":"  602","line":"                has = (info.type == H5O_TYPE_DATASET);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  603","line":"            }"},
{"lineNum":"  604","line":"        }"},
{"lineNum":"  605","line":""},
{"lineNum":"  606","line":"#ifndef USE_PARALLEL_HDF5"},
{"lineNum":"  607","line":"        MPI_Bcast(&has, 1, MPI_INT, root_rank, comm);"},
{"lineNum":"  608","line":"#endif"},
{"lineNum":"  609","line":""},
{"lineNum":"  610","line":"        return has;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  611","line":"    }"},
{"lineNum":"  612","line":""},
{"lineNum":"  613","line":"};"},
{"lineNum":"  614","line":""},
{"lineNum":"  615","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 92, "covered" : 0,};
var merged_data = [];
