var data = {lines:[
{"lineNum":"    1","line":"// Tencent is pleased to support the open source community by making RapidJSON available."},
{"lineNum":"    2","line":"//"},
{"lineNum":"    3","line":"// Copyright (C) 2015 THL A29 Limited, a Tencent company, and Milo Yip. All rights reserved."},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// Licensed under the MIT License (the \"License\"); you may not use this file except"},
{"lineNum":"    6","line":"// in compliance with the License. You may obtain a copy of the License at"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"// http://opensource.org/licenses/MIT"},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// Unless required by applicable law or agreed to in writing, software distributed"},
{"lineNum":"   11","line":"// under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR"},
{"lineNum":"   12","line":"// CONDITIONS OF ANY KIND, either express or implied. See the License for the"},
{"lineNum":"   13","line":"// specific language governing permissions and limitations under the License."},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"#ifndef CEREAL_RAPIDJSON_WRITER_H_"},
{"lineNum":"   16","line":"#define CEREAL_RAPIDJSON_WRITER_H_"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"#include \"stream.h\""},
{"lineNum":"   19","line":"#include \"internal/meta.h\""},
{"lineNum":"   20","line":"#include \"internal/stack.h\""},
{"lineNum":"   21","line":"#include \"internal/strfunc.h\""},
{"lineNum":"   22","line":"#include \"internal/dtoa.h\""},
{"lineNum":"   23","line":"#include \"internal/itoa.h\""},
{"lineNum":"   24","line":"#include \"stringbuffer.h\""},
{"lineNum":"   25","line":"#include <new>      // placement new"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"#if defined(CEREAL_RAPIDJSON_SIMD) && defined(_MSC_VER)"},
{"lineNum":"   28","line":"#include <intrin.h>"},
{"lineNum":"   29","line":"#pragma intrinsic(_BitScanForward)"},
{"lineNum":"   30","line":"#endif"},
{"lineNum":"   31","line":"#ifdef CEREAL_RAPIDJSON_SSE42"},
{"lineNum":"   32","line":"#include <nmmintrin.h>"},
{"lineNum":"   33","line":"#elif defined(CEREAL_RAPIDJSON_SSE2)"},
{"lineNum":"   34","line":"#include <emmintrin.h>"},
{"lineNum":"   35","line":"#elif defined(CEREAL_RAPIDJSON_NEON)"},
{"lineNum":"   36","line":"#include <arm_neon.h>"},
{"lineNum":"   37","line":"#endif"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"#ifdef __clang__"},
{"lineNum":"   40","line":"CEREAL_RAPIDJSON_DIAG_PUSH"},
{"lineNum":"   41","line":"CEREAL_RAPIDJSON_DIAG_OFF(padded)"},
{"lineNum":"   42","line":"CEREAL_RAPIDJSON_DIAG_OFF(unreachable-code)"},
{"lineNum":"   43","line":"CEREAL_RAPIDJSON_DIAG_OFF(c++98-compat)"},
{"lineNum":"   44","line":"#elif defined(_MSC_VER)"},
{"lineNum":"   45","line":"CEREAL_RAPIDJSON_DIAG_PUSH"},
{"lineNum":"   46","line":"CEREAL_RAPIDJSON_DIAG_OFF(4127) // conditional expression is constant"},
{"lineNum":"   47","line":"#endif"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"CEREAL_RAPIDJSON_NAMESPACE_BEGIN"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   52","line":"// WriteFlag"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"/*! \\def CEREAL_RAPIDJSON_WRITE_DEFAULT_FLAGS"},
{"lineNum":"   55","line":"    \\ingroup CEREAL_RAPIDJSON_CONFIG"},
{"lineNum":"   56","line":"    \\brief User-defined kWriteDefaultFlags definition."},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"    User can define this as any \\c WriteFlag combinations."},
{"lineNum":"   59","line":"*/"},
{"lineNum":"   60","line":"#ifndef CEREAL_RAPIDJSON_WRITE_DEFAULT_FLAGS"},
{"lineNum":"   61","line":"#define CEREAL_RAPIDJSON_WRITE_DEFAULT_FLAGS kWriteNoFlags"},
{"lineNum":"   62","line":"#endif"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"//! Combination of writeFlags"},
{"lineNum":"   65","line":"enum WriteFlag {"},
{"lineNum":"   66","line":"    kWriteNoFlags = 0,              //!< No flags are set."},
{"lineNum":"   67","line":"    kWriteValidateEncodingFlag = 1, //!< Validate encoding of JSON strings."},
{"lineNum":"   68","line":"    kWriteNanAndInfFlag = 2,        //!< Allow writing of Infinity, -Infinity and NaN."},
{"lineNum":"   69","line":"    kWriteDefaultFlags = CEREAL_RAPIDJSON_WRITE_DEFAULT_FLAGS  //!< Default write flags. Can be customized by defining CEREAL_RAPIDJSON_WRITE_DEFAULT_FLAGS"},
{"lineNum":"   70","line":"};"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"//! JSON writer"},
{"lineNum":"   73","line":"/*! Writer implements the concept Handler."},
{"lineNum":"   74","line":"    It generates JSON text by events to an output os."},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"    User may programmatically calls the functions of a writer to generate JSON text."},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"    On the other side, a writer can also be passed to objects that generates events,"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"    for example Reader::Parse() and Document::Accept()."},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"    \\tparam OutputStream Type of output stream."},
{"lineNum":"   83","line":"    \\tparam SourceEncoding Encoding of source string."},
{"lineNum":"   84","line":"    \\tparam TargetEncoding Encoding of output stream."},
{"lineNum":"   85","line":"    \\tparam StackAllocator Type of allocator for allocating memory of stack."},
{"lineNum":"   86","line":"    \\note implements Handler concept"},
{"lineNum":"   87","line":"*/"},
{"lineNum":"   88","line":"template<typename OutputStream, typename SourceEncoding = UTF8<>, typename TargetEncoding = UTF8<>, typename StackAllocator = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags>"},
{"lineNum":"   89","line":"class Writer {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   90","line":"public:"},
{"lineNum":"   91","line":"    typedef typename SourceEncoding::Ch Ch;"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"    static const int kDefaultMaxDecimalPlaces = 324;"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"    //! Constructor"},
{"lineNum":"   96","line":"    /*! \\param os Output stream."},
{"lineNum":"   97","line":"        \\param stackAllocator User supplied allocator. If it is null, it will create a private one."},
{"lineNum":"   98","line":"        \\param levelDepth Initial capacity of stack."},
{"lineNum":"   99","line":"    */"},
{"lineNum":"  100","line":"    explicit"},
{"lineNum":"  101","line":"    Writer(OutputStream& os, StackAllocator* stackAllocator = 0, size_t levelDepth = kDefaultLevelDepth) :"},
{"lineNum":"  102","line":"        os_(&os), level_stack_(stackAllocator, levelDepth * sizeof(Level)), maxDecimalPlaces_(kDefaultMaxDecimalPlaces), hasRoot_(false) {}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"    explicit"},
{"lineNum":"  105","line":"    Writer(StackAllocator* allocator = 0, size_t levelDepth = kDefaultLevelDepth) :"},
{"lineNum":"  106","line":"        os_(0), level_stack_(allocator, levelDepth * sizeof(Level)), maxDecimalPlaces_(kDefaultMaxDecimalPlaces), hasRoot_(false) {}"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"#if CEREAL_RAPIDJSON_HAS_CXX11_RVALUE_REFS"},
{"lineNum":"  109","line":"    Writer(Writer&& rhs) :"},
{"lineNum":"  110","line":"        os_(rhs.os_), level_stack_(std::move(rhs.level_stack_)), maxDecimalPlaces_(rhs.maxDecimalPlaces_), hasRoot_(rhs.hasRoot_) {"},
{"lineNum":"  111","line":"        rhs.os_ = 0;"},
{"lineNum":"  112","line":"    }"},
{"lineNum":"  113","line":"#endif"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"    //! Reset the writer with a new stream."},
{"lineNum":"  116","line":"    /*!"},
{"lineNum":"  117","line":"        This function reset the writer with a new stream and default settings,"},
{"lineNum":"  118","line":"        in order to make a Writer object reusable for output multiple JSONs."},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"        \\param os New output stream."},
{"lineNum":"  121","line":"        \\code"},
{"lineNum":"  122","line":"        Writer<OutputStream> writer(os1);"},
{"lineNum":"  123","line":"        writer.StartObject();"},
{"lineNum":"  124","line":"        // ..."},
{"lineNum":"  125","line":"        writer.EndObject();"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"        writer.Reset(os2);"},
{"lineNum":"  128","line":"        writer.StartObject();"},
{"lineNum":"  129","line":"        // ..."},
{"lineNum":"  130","line":"        writer.EndObject();"},
{"lineNum":"  131","line":"        \\endcode"},
{"lineNum":"  132","line":"    */"},
{"lineNum":"  133","line":"    void Reset(OutputStream& os) {"},
{"lineNum":"  134","line":"        os_ = &os;"},
{"lineNum":"  135","line":"        hasRoot_ = false;"},
{"lineNum":"  136","line":"        level_stack_.Clear();"},
{"lineNum":"  137","line":"    }"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"    //! Checks whether the output is a complete JSON."},
{"lineNum":"  140","line":"    /*!"},
{"lineNum":"  141","line":"        A complete JSON has a complete root object or array."},
{"lineNum":"  142","line":"    */"},
{"lineNum":"  143","line":"    bool IsComplete() const {"},
{"lineNum":"  144","line":"        return hasRoot_ && level_stack_.Empty();"},
{"lineNum":"  145","line":"    }"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"    int GetMaxDecimalPlaces() const {"},
{"lineNum":"  148","line":"        return maxDecimalPlaces_;"},
{"lineNum":"  149","line":"    }"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"    //! Sets the maximum number of decimal places for double output."},
{"lineNum":"  152","line":"    /*!"},
{"lineNum":"  153","line":"        This setting truncates the output with specified number of decimal places."},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"        For example,"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"        \\code"},
{"lineNum":"  158","line":"        writer.SetMaxDecimalPlaces(3);"},
{"lineNum":"  159","line":"        writer.StartArray();"},
{"lineNum":"  160","line":"        writer.Double(0.12345);                 // \"0.123\""},
{"lineNum":"  161","line":"        writer.Double(0.0001);                  // \"0.0\""},
{"lineNum":"  162","line":"        writer.Double(1.234567890123456e30);    // \"1.234567890123456e30\" (do not truncate significand for positive exponent)"},
{"lineNum":"  163","line":"        writer.Double(1.23e-4);                 // \"0.0\"                  (do truncate significand for negative exponent)"},
{"lineNum":"  164","line":"        writer.EndArray();"},
{"lineNum":"  165","line":"        \\endcode"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"        The default setting does not truncate any decimal places. You can restore to this setting by calling"},
{"lineNum":"  168","line":"        \\code"},
{"lineNum":"  169","line":"        writer.SetMaxDecimalPlaces(Writer::kDefaultMaxDecimalPlaces);"},
{"lineNum":"  170","line":"        \\endcode"},
{"lineNum":"  171","line":"    */"},
{"lineNum":"  172","line":"    void SetMaxDecimalPlaces(int maxDecimalPlaces) {"},
{"lineNum":"  173","line":"        maxDecimalPlaces_ = maxDecimalPlaces;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  174","line":"    }"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"    /*!@name Implementation of Handler"},
{"lineNum":"  177","line":"        \\see Handler"},
{"lineNum":"  178","line":"    */"},
{"lineNum":"  179","line":"    //@{"},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"    bool Null()                 { Prefix(kNullType);   return EndValue(WriteNull()); }"},
{"lineNum":"  182","line":"    bool Bool(bool b)           { Prefix(b ? kTrueType : kFalseType); return EndValue(WriteBool(b)); }"},
{"lineNum":"  183","line":"    bool Int(int i)             { Prefix(kNumberType); return EndValue(WriteInt(i)); }"},
{"lineNum":"  184","line":"    bool Uint(unsigned u)       { Prefix(kNumberType); return EndValue(WriteUint(u)); }"},
{"lineNum":"  185","line":"    bool Int64(int64_t i64)     { Prefix(kNumberType); return EndValue(WriteInt64(i64)); }"},
{"lineNum":"  186","line":"    bool Uint64(uint64_t u64)   { Prefix(kNumberType); return EndValue(WriteUint64(u64)); }"},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"    //! Writes the given \\c double value to the stream"},
{"lineNum":"  189","line":"    /*!"},
{"lineNum":"  190","line":"        \\param d The value to be written."},
{"lineNum":"  191","line":"        \\return Whether it is succeed."},
{"lineNum":"  192","line":"    */"},
{"lineNum":"  193","line":"    bool Double(double d)       { Prefix(kNumberType); return EndValue(WriteDouble(d)); }"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"    bool RawNumber(const Ch* str, SizeType length, bool copy = false) {"},
{"lineNum":"  196","line":"        CEREAL_RAPIDJSON_ASSERT(str != 0);"},
{"lineNum":"  197","line":"        (void)copy;"},
{"lineNum":"  198","line":"        Prefix(kNumberType);"},
{"lineNum":"  199","line":"        return EndValue(WriteString(str, length));"},
{"lineNum":"  200","line":"    }"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"    bool String(const Ch* str, SizeType length, bool copy = false) {"},
{"lineNum":"  203","line":"        CEREAL_RAPIDJSON_ASSERT(str != 0);"},
{"lineNum":"  204","line":"        (void)copy;"},
{"lineNum":"  205","line":"        Prefix(kStringType);"},
{"lineNum":"  206","line":"        return EndValue(WriteString(str, length));"},
{"lineNum":"  207","line":"    }"},
{"lineNum":"  208","line":""},
{"lineNum":"  209","line":"#if CEREAL_RAPIDJSON_HAS_STDSTRING"},
{"lineNum":"  210","line":"    bool String(const std::basic_string<Ch>& str) {"},
{"lineNum":"  211","line":"        return String(str.data(), SizeType(str.size()));"},
{"lineNum":"  212","line":"    }"},
{"lineNum":"  213","line":"#endif"},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"    bool StartObject() {"},
{"lineNum":"  216","line":"        Prefix(kObjectType);"},
{"lineNum":"  217","line":"        new (level_stack_.template Push<Level>()) Level(false);"},
{"lineNum":"  218","line":"        return WriteStartObject();"},
{"lineNum":"  219","line":"    }"},
{"lineNum":"  220","line":""},
{"lineNum":"  221","line":"    bool Key(const Ch* str, SizeType length, bool copy = false) { return String(str, length, copy); }"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"#if CEREAL_RAPIDJSON_HAS_STDSTRING"},
{"lineNum":"  224","line":"    bool Key(const std::basic_string<Ch>& str)"},
{"lineNum":"  225","line":"    {"},
{"lineNum":"  226","line":"      return Key(str.data(), SizeType(str.size()));"},
{"lineNum":"  227","line":"    }"},
{"lineNum":"  228","line":"#endif"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"    bool EndObject(SizeType memberCount = 0) {"},
{"lineNum":"  231","line":"        (void)memberCount;"},
{"lineNum":"  232","line":"        CEREAL_RAPIDJSON_ASSERT(level_stack_.GetSize() >= sizeof(Level)); // not inside an Object"},
{"lineNum":"  233","line":"        CEREAL_RAPIDJSON_ASSERT(!level_stack_.template Top<Level>()->inArray); // currently inside an Array, not Object"},
{"lineNum":"  234","line":"        CEREAL_RAPIDJSON_ASSERT(0 == level_stack_.template Top<Level>()->valueCount % 2); // Object has a Key without a Value"},
{"lineNum":"  235","line":"        level_stack_.template Pop<Level>(1);"},
{"lineNum":"  236","line":"        return EndValue(WriteEndObject());"},
{"lineNum":"  237","line":"    }"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"    bool StartArray() {"},
{"lineNum":"  240","line":"        Prefix(kArrayType);"},
{"lineNum":"  241","line":"        new (level_stack_.template Push<Level>()) Level(true);"},
{"lineNum":"  242","line":"        return WriteStartArray();"},
{"lineNum":"  243","line":"    }"},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"    bool EndArray(SizeType elementCount = 0) {"},
{"lineNum":"  246","line":"        (void)elementCount;"},
{"lineNum":"  247","line":"        CEREAL_RAPIDJSON_ASSERT(level_stack_.GetSize() >= sizeof(Level));"},
{"lineNum":"  248","line":"        CEREAL_RAPIDJSON_ASSERT(level_stack_.template Top<Level>()->inArray);"},
{"lineNum":"  249","line":"        level_stack_.template Pop<Level>(1);"},
{"lineNum":"  250","line":"        return EndValue(WriteEndArray());"},
{"lineNum":"  251","line":"    }"},
{"lineNum":"  252","line":"    //@}"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"    /*! @name Convenience extensions */"},
{"lineNum":"  255","line":"    //@{"},
{"lineNum":"  256","line":""},
{"lineNum":"  257","line":"    //! Simpler but slower overload."},
{"lineNum":"  258","line":"    bool String(const Ch* const& str) { return String(str, internal::StrLen(str)); }"},
{"lineNum":"  259","line":"    bool Key(const Ch* const& str) { return Key(str, internal::StrLen(str)); }"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"    //@}"},
{"lineNum":"  262","line":""},
{"lineNum":"  263","line":"    //! Write a raw JSON value."},
{"lineNum":"  264","line":"    /*!"},
{"lineNum":"  265","line":"        For user to write a stringified JSON as a value."},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"        \\param json A well-formed JSON value. It should not contain null character within [0, length - 1] range."},
{"lineNum":"  268","line":"        \\param length Length of the json."},
{"lineNum":"  269","line":"        \\param type Type of the root of json."},
{"lineNum":"  270","line":"    */"},
{"lineNum":"  271","line":"    bool RawValue(const Ch* json, size_t length, Type type) {"},
{"lineNum":"  272","line":"        CEREAL_RAPIDJSON_ASSERT(json != 0);"},
{"lineNum":"  273","line":"        Prefix(type);"},
{"lineNum":"  274","line":"        return EndValue(WriteRawValue(json, length));"},
{"lineNum":"  275","line":"    }"},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"    //! Flush the output stream."},
{"lineNum":"  278","line":"    /*!"},
{"lineNum":"  279","line":"        Allows the user to flush the output stream immediately."},
{"lineNum":"  280","line":"     */"},
{"lineNum":"  281","line":"    void Flush() {"},
{"lineNum":"  282","line":"        os_->Flush();","class":"lineNoCov","hits":"0","possible_hits":"215",},
{"lineNum":"  283","line":"    }"},
{"lineNum":"  284","line":""},
{"lineNum":"  285","line":"protected:"},
{"lineNum":"  286","line":"    //! Information for each nested level"},
{"lineNum":"  287","line":"    struct Level {"},
{"lineNum":"  288","line":"        Level(bool inArray_) : valueCount(0), inArray(inArray_) {}","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  289","line":"        size_t valueCount;  //!< number of values in this level"},
{"lineNum":"  290","line":"        bool inArray;       //!< true if in array, otherwise in object"},
{"lineNum":"  291","line":"    };"},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"    static const size_t kDefaultLevelDepth = 32;"},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":"    bool WriteNull()  {"},
{"lineNum":"  296","line":"        PutReserve(*os_, 4);"},
{"lineNum":"  297","line":"        PutUnsafe(*os_, \'n\'); PutUnsafe(*os_, \'u\'); PutUnsafe(*os_, \'l\'); PutUnsafe(*os_, \'l\'); return true;"},
{"lineNum":"  298","line":"    }"},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"    bool WriteBool(bool b)  {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  301","line":"        if (b) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  302","line":"            PutReserve(*os_, 4);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  303","line":"            PutUnsafe(*os_, \'t\'); PutUnsafe(*os_, \'r\'); PutUnsafe(*os_, \'u\'); PutUnsafe(*os_, \'e\');"},
{"lineNum":"  304","line":"        }"},
{"lineNum":"  305","line":"        else {"},
{"lineNum":"  306","line":"            PutReserve(*os_, 5);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  307","line":"            PutUnsafe(*os_, \'f\'); PutUnsafe(*os_, \'a\'); PutUnsafe(*os_, \'l\'); PutUnsafe(*os_, \'s\'); PutUnsafe(*os_, \'e\');","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  308","line":"        }"},
{"lineNum":"  309","line":"        return true;","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  310","line":"    }"},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":"    bool WriteInt(int i) {"},
{"lineNum":"  313","line":"        char buffer[11];"},
{"lineNum":"  314","line":"        const char* end = internal::i32toa(i, buffer);"},
{"lineNum":"  315","line":"        PutReserve(*os_, static_cast<size_t>(end - buffer));"},
{"lineNum":"  316","line":"        for (const char* p = buffer; p != end; ++p)","class":"lineNoCov","hits":"0","possible_hits":"196",},
{"lineNum":"  317","line":"            PutUnsafe(*os_, static_cast<typename OutputStream::Ch>(*p));","class":"lineNoCov","hits":"0","possible_hits":"98",},
{"lineNum":"  318","line":"        return true;"},
{"lineNum":"  319","line":"    }"},
{"lineNum":"  320","line":""},
{"lineNum":"  321","line":"    bool WriteUint(unsigned u) {"},
{"lineNum":"  322","line":"        char buffer[10];"},
{"lineNum":"  323","line":"        const char* end = internal::u32toa(u, buffer);","class":"lineNoCov","hits":"0","possible_hits":"45",},
{"lineNum":"  324","line":"        PutReserve(*os_, static_cast<size_t>(end - buffer));"},
{"lineNum":"  325","line":"        for (const char* p = buffer; p != end; ++p)","class":"lineNoCov","hits":"0","possible_hits":"90",},
{"lineNum":"  326","line":"            PutUnsafe(*os_, static_cast<typename OutputStream::Ch>(*p));","class":"lineNoCov","hits":"0","possible_hits":"45",},
{"lineNum":"  327","line":"        return true;"},
{"lineNum":"  328","line":"    }"},
{"lineNum":"  329","line":""},
{"lineNum":"  330","line":"    bool WriteInt64(int64_t i64) {"},
{"lineNum":"  331","line":"        char buffer[21];"},
{"lineNum":"  332","line":"        const char* end = internal::i64toa(i64, buffer);"},
{"lineNum":"  333","line":"        PutReserve(*os_, static_cast<size_t>(end - buffer));"},
{"lineNum":"  334","line":"        for (const char* p = buffer; p != end; ++p)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  335","line":"            PutUnsafe(*os_, static_cast<typename OutputStream::Ch>(*p));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  336","line":"        return true;"},
{"lineNum":"  337","line":"    }"},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"    bool WriteUint64(uint64_t u64) {"},
{"lineNum":"  340","line":"        char buffer[20];"},
{"lineNum":"  341","line":"        char* end = internal::u64toa(u64, buffer);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  342","line":"        PutReserve(*os_, static_cast<size_t>(end - buffer));"},
{"lineNum":"  343","line":"        for (char* p = buffer; p != end; ++p)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  344","line":"            PutUnsafe(*os_, static_cast<typename OutputStream::Ch>(*p));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  345","line":"        return true;"},
{"lineNum":"  346","line":"    }"},
{"lineNum":"  347","line":""},
{"lineNum":"  348","line":"    bool WriteDouble(double d) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  349","line":"        if (internal::Double(d).IsNanOrInf()) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  350","line":"            if (!(writeFlags & kWriteNanAndInfFlag))"},
{"lineNum":"  351","line":"                return false;"},
{"lineNum":"  352","line":"            if (internal::Double(d).IsNan()) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  353","line":"                PutReserve(*os_, 3);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  354","line":"                PutUnsafe(*os_, \'N\'); PutUnsafe(*os_, \'a\'); PutUnsafe(*os_, \'N\');","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  355","line":"                return true;"},
{"lineNum":"  356","line":"            }"},
{"lineNum":"  357","line":"            if (internal::Double(d).Sign()) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  358","line":"                PutReserve(*os_, 9);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  359","line":"                PutUnsafe(*os_, \'-\');","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  360","line":"            }"},
{"lineNum":"  361","line":"            else"},
{"lineNum":"  362","line":"                PutReserve(*os_, 8);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  363","line":"            PutUnsafe(*os_, \'I\'); PutUnsafe(*os_, \'n\'); PutUnsafe(*os_, \'f\');","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  364","line":"            PutUnsafe(*os_, \'i\'); PutUnsafe(*os_, \'n\'); PutUnsafe(*os_, \'i\'); PutUnsafe(*os_, \'t\'); PutUnsafe(*os_, \'y\');","class":"lineNoCov","hits":"0","possible_hits":"15",},
{"lineNum":"  365","line":"            return true;"},
{"lineNum":"  366","line":"        }"},
{"lineNum":"  367","line":""},
{"lineNum":"  368","line":"        char buffer[25];"},
{"lineNum":"  369","line":"        char* end = internal::dtoa(d, buffer, maxDecimalPlaces_);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  370","line":"        PutReserve(*os_, static_cast<size_t>(end - buffer));"},
{"lineNum":"  371","line":"        for (char* p = buffer; p != end; ++p)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  372","line":"            PutUnsafe(*os_, static_cast<typename OutputStream::Ch>(*p));","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  373","line":"        return true;"},
{"lineNum":"  374","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"    bool WriteString(const Ch* str, SizeType length)  {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  377","line":"        static const typename OutputStream::Ch hexDigits[16] = { \'0\', \'1\', \'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\', \'A\', \'B\', \'C\', \'D\', \'E\', \'F\' };"},
{"lineNum":"  378","line":"        static const char escape[256] = {"},
{"lineNum":"  379","line":"#define Z16 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"},
{"lineNum":"  380","line":"            //0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F"},
{"lineNum":"  381","line":"            \'u\', \'u\', \'u\', \'u\', \'u\', \'u\', \'u\', \'u\', \'b\', \'t\', \'n\', \'u\', \'f\', \'r\', \'u\', \'u\', // 00"},
{"lineNum":"  382","line":"            \'u\', \'u\', \'u\', \'u\', \'u\', \'u\', \'u\', \'u\', \'u\', \'u\', \'u\', \'u\', \'u\', \'u\', \'u\', \'u\', // 10"},
{"lineNum":"  383","line":"              0,   0, \'\"\',   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, // 20"},
{"lineNum":"  384","line":"            Z16, Z16,                                                                       // 30~4F"},
{"lineNum":"  385","line":"              0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\'\\\\\',   0,   0,   0, // 50"},
{"lineNum":"  386","line":"            Z16, Z16, Z16, Z16, Z16, Z16, Z16, Z16, Z16, Z16                                // 60~FF"},
{"lineNum":"  387","line":"#undef Z16"},
{"lineNum":"  388","line":"        };"},
{"lineNum":"  389","line":""},
{"lineNum":"  390","line":"        if (TargetEncoding::supportUnicode)"},
{"lineNum":"  391","line":"            PutReserve(*os_, 2 + length * 6); // \"\\uxxxx...\""},
{"lineNum":"  392","line":"        else"},
{"lineNum":"  393","line":"            PutReserve(*os_, 2 + length * 12);  // \"\\uxxxx\\uyyyy...\""},
{"lineNum":"  394","line":""},
{"lineNum":"  395","line":"        PutUnsafe(*os_, \'\\\"\');","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  396","line":"        GenericStringStream<SourceEncoding> is(str);"},
{"lineNum":"  397","line":"        while (ScanWriteUnescapedString(is, length)) {","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  398","line":"            const Ch c = is.Peek();"},
{"lineNum":"  399","line":"            if (!TargetEncoding::supportUnicode && static_cast<unsigned>(c) >= 0x80) {"},
{"lineNum":"  400","line":"                // Unicode escaping"},
{"lineNum":"  401","line":"                unsigned codepoint;"},
{"lineNum":"  402","line":"                if (CEREAL_RAPIDJSON_UNLIKELY(!SourceEncoding::Decode(is, &codepoint)))"},
{"lineNum":"  403","line":"                    return false;"},
{"lineNum":"  404","line":"                PutUnsafe(*os_, \'\\\\\');"},
{"lineNum":"  405","line":"                PutUnsafe(*os_, \'u\');"},
{"lineNum":"  406","line":"                if (codepoint <= 0xD7FF || (codepoint >= 0xE000 && codepoint <= 0xFFFF)) {"},
{"lineNum":"  407","line":"                    PutUnsafe(*os_, hexDigits[(codepoint >> 12) & 15]);"},
{"lineNum":"  408","line":"                    PutUnsafe(*os_, hexDigits[(codepoint >>  8) & 15]);"},
{"lineNum":"  409","line":"                    PutUnsafe(*os_, hexDigits[(codepoint >>  4) & 15]);"},
{"lineNum":"  410","line":"                    PutUnsafe(*os_, hexDigits[(codepoint      ) & 15]);"},
{"lineNum":"  411","line":"                }"},
{"lineNum":"  412","line":"                else {"},
{"lineNum":"  413","line":"                    CEREAL_RAPIDJSON_ASSERT(codepoint >= 0x010000 && codepoint <= 0x10FFFF);"},
{"lineNum":"  414","line":"                    // Surrogate pair"},
{"lineNum":"  415","line":"                    unsigned s = codepoint - 0x010000;"},
{"lineNum":"  416","line":"                    unsigned lead = (s >> 10) + 0xD800;"},
{"lineNum":"  417","line":"                    unsigned trail = (s & 0x3FF) + 0xDC00;"},
{"lineNum":"  418","line":"                    PutUnsafe(*os_, hexDigits[(lead >> 12) & 15]);"},
{"lineNum":"  419","line":"                    PutUnsafe(*os_, hexDigits[(lead >>  8) & 15]);"},
{"lineNum":"  420","line":"                    PutUnsafe(*os_, hexDigits[(lead >>  4) & 15]);"},
{"lineNum":"  421","line":"                    PutUnsafe(*os_, hexDigits[(lead      ) & 15]);"},
{"lineNum":"  422","line":"                    PutUnsafe(*os_, \'\\\\\');"},
{"lineNum":"  423","line":"                    PutUnsafe(*os_, \'u\');"},
{"lineNum":"  424","line":"                    PutUnsafe(*os_, hexDigits[(trail >> 12) & 15]);"},
{"lineNum":"  425","line":"                    PutUnsafe(*os_, hexDigits[(trail >>  8) & 15]);"},
{"lineNum":"  426","line":"                    PutUnsafe(*os_, hexDigits[(trail >>  4) & 15]);"},
{"lineNum":"  427","line":"                    PutUnsafe(*os_, hexDigits[(trail      ) & 15]);"},
{"lineNum":"  428","line":"                }"},
{"lineNum":"  429","line":"            }"},
{"lineNum":"  430","line":"            else if ((sizeof(Ch) == 1 || static_cast<unsigned>(c) < 256) && CEREAL_RAPIDJSON_UNLIKELY(escape[static_cast<unsigned char>(c)]))  {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  431","line":"                is.Take();"},
{"lineNum":"  432","line":"                PutUnsafe(*os_, \'\\\\\');","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  433","line":"                PutUnsafe(*os_, static_cast<typename OutputStream::Ch>(escape[static_cast<unsigned char>(c)]));","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  434","line":"                if (escape[static_cast<unsigned char>(c)] == \'u\') {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  435","line":"                    PutUnsafe(*os_, \'0\');","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  436","line":"                    PutUnsafe(*os_, \'0\');","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  437","line":"                    PutUnsafe(*os_, hexDigits[static_cast<unsigned char>(c) >> 4]);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  438","line":"                    PutUnsafe(*os_, hexDigits[static_cast<unsigned char>(c) & 0xF]);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  439","line":"                }"},
{"lineNum":"  440","line":"            }"},
{"lineNum":"  441","line":"            else if (CEREAL_RAPIDJSON_UNLIKELY(!(writeFlags & kWriteValidateEncodingFlag ?","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  442","line":"                Transcoder<SourceEncoding, TargetEncoding>::Validate(is, *os_) :"},
{"lineNum":"  443","line":"                Transcoder<SourceEncoding, TargetEncoding>::TranscodeUnsafe(is, *os_))))"},
{"lineNum":"  444","line":"                return false;"},
{"lineNum":"  445","line":"        }"},
{"lineNum":"  446","line":"        PutUnsafe(*os_, \'\\\"\');","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  447","line":"        return true;"},
{"lineNum":"  448","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  449","line":""},
{"lineNum":"  450","line":"    bool ScanWriteUnescapedString(GenericStringStream<SourceEncoding>& is, size_t length) {"},
{"lineNum":"  451","line":"        return CEREAL_RAPIDJSON_LIKELY(is.Tell() < length);","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  452","line":"    }"},
{"lineNum":"  453","line":""},
{"lineNum":"  454","line":"    bool WriteStartObject() { os_->Put(\'{\'); return true; }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  455","line":"    bool WriteEndObject()   { os_->Put(\'}\'); return true; }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  456","line":"    bool WriteStartArray()  { os_->Put(\'[\'); return true; }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  457","line":"    bool WriteEndArray()    { os_->Put(\']\'); return true; }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  458","line":""},
{"lineNum":"  459","line":"    bool WriteRawValue(const Ch* json, size_t length) {"},
{"lineNum":"  460","line":"        PutReserve(*os_, length);"},
{"lineNum":"  461","line":"        GenericStringStream<SourceEncoding> is(json);"},
{"lineNum":"  462","line":"        while (CEREAL_RAPIDJSON_LIKELY(is.Tell() < length)) {"},
{"lineNum":"  463","line":"            CEREAL_RAPIDJSON_ASSERT(is.Peek() != \'\\0\');"},
{"lineNum":"  464","line":"            if (CEREAL_RAPIDJSON_UNLIKELY(!(writeFlags & kWriteValidateEncodingFlag ?"},
{"lineNum":"  465","line":"                Transcoder<SourceEncoding, TargetEncoding>::Validate(is, *os_) :"},
{"lineNum":"  466","line":"                Transcoder<SourceEncoding, TargetEncoding>::TranscodeUnsafe(is, *os_))))"},
{"lineNum":"  467","line":"                return false;"},
{"lineNum":"  468","line":"        }"},
{"lineNum":"  469","line":"        return true;"},
{"lineNum":"  470","line":"    }"},
{"lineNum":"  471","line":""},
{"lineNum":"  472","line":"    void Prefix(Type type) {"},
{"lineNum":"  473","line":"        (void)type;"},
{"lineNum":"  474","line":"        if (CEREAL_RAPIDJSON_LIKELY(level_stack_.GetSize() != 0)) { // this value is not at root"},
{"lineNum":"  475","line":"            Level* level = level_stack_.template Top<Level>();"},
{"lineNum":"  476","line":"            if (level->valueCount > 0) {"},
{"lineNum":"  477","line":"                if (level->inArray)"},
{"lineNum":"  478","line":"                    os_->Put(\',\'); // add comma if it is not the first element in array"},
{"lineNum":"  479","line":"                else  // in object"},
{"lineNum":"  480","line":"                    os_->Put((level->valueCount % 2 == 0) ? \',\' : \':\');"},
{"lineNum":"  481","line":"            }"},
{"lineNum":"  482","line":"            if (!level->inArray && level->valueCount % 2 == 0)"},
{"lineNum":"  483","line":"                CEREAL_RAPIDJSON_ASSERT(type == kStringType);  // if it\'s in object, then even number should be a name"},
{"lineNum":"  484","line":"            level->valueCount++;"},
{"lineNum":"  485","line":"        }"},
{"lineNum":"  486","line":"        else {"},
{"lineNum":"  487","line":"            CEREAL_RAPIDJSON_ASSERT(!hasRoot_);    // Should only has one and only one root."},
{"lineNum":"  488","line":"            hasRoot_ = true;"},
{"lineNum":"  489","line":"        }"},
{"lineNum":"  490","line":"    }"},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"    // Flush the value if it is the top level one."},
{"lineNum":"  493","line":"    bool EndValue(bool ret) {"},
{"lineNum":"  494","line":"        if (CEREAL_RAPIDJSON_UNLIKELY(level_stack_.Empty()))   // end of json text","class":"lineNoCov","hits":"0","possible_hits":"207",},
{"lineNum":"  495","line":"            Flush();","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  496","line":"        return ret;"},
{"lineNum":"  497","line":"    }"},
{"lineNum":"  498","line":""},
{"lineNum":"  499","line":"    OutputStream* os_;"},
{"lineNum":"  500","line":"    internal::Stack<StackAllocator> level_stack_;"},
{"lineNum":"  501","line":"    int maxDecimalPlaces_;"},
{"lineNum":"  502","line":"    bool hasRoot_;"},
{"lineNum":"  503","line":""},
{"lineNum":"  504","line":"private:"},
{"lineNum":"  505","line":"    // Prohibit copy constructor & assignment operator."},
{"lineNum":"  506","line":"    Writer(const Writer&);"},
{"lineNum":"  507","line":"    Writer& operator=(const Writer&);"},
{"lineNum":"  508","line":"};"},
{"lineNum":"  509","line":""},
{"lineNum":"  510","line":"// Full specialization for StringStream to prevent memory copying"},
{"lineNum":"  511","line":""},
{"lineNum":"  512","line":"template<>"},
{"lineNum":"  513","line":"inline bool Writer<StringBuffer>::WriteInt(int i) {"},
{"lineNum":"  514","line":"    char *buffer = os_->Push(11);"},
{"lineNum":"  515","line":"    const char* end = internal::i32toa(i, buffer);"},
{"lineNum":"  516","line":"    os_->Pop(static_cast<size_t>(11 - (end - buffer)));"},
{"lineNum":"  517","line":"    return true;"},
{"lineNum":"  518","line":"}"},
{"lineNum":"  519","line":""},
{"lineNum":"  520","line":"template<>"},
{"lineNum":"  521","line":"inline bool Writer<StringBuffer>::WriteUint(unsigned u) {"},
{"lineNum":"  522","line":"    char *buffer = os_->Push(10);"},
{"lineNum":"  523","line":"    const char* end = internal::u32toa(u, buffer);"},
{"lineNum":"  524","line":"    os_->Pop(static_cast<size_t>(10 - (end - buffer)));"},
{"lineNum":"  525","line":"    return true;"},
{"lineNum":"  526","line":"}"},
{"lineNum":"  527","line":""},
{"lineNum":"  528","line":"template<>"},
{"lineNum":"  529","line":"inline bool Writer<StringBuffer>::WriteInt64(int64_t i64) {"},
{"lineNum":"  530","line":"    char *buffer = os_->Push(21);"},
{"lineNum":"  531","line":"    const char* end = internal::i64toa(i64, buffer);"},
{"lineNum":"  532","line":"    os_->Pop(static_cast<size_t>(21 - (end - buffer)));"},
{"lineNum":"  533","line":"    return true;"},
{"lineNum":"  534","line":"}"},
{"lineNum":"  535","line":""},
{"lineNum":"  536","line":"template<>"},
{"lineNum":"  537","line":"inline bool Writer<StringBuffer>::WriteUint64(uint64_t u) {"},
{"lineNum":"  538","line":"    char *buffer = os_->Push(20);"},
{"lineNum":"  539","line":"    const char* end = internal::u64toa(u, buffer);"},
{"lineNum":"  540","line":"    os_->Pop(static_cast<size_t>(20 - (end - buffer)));"},
{"lineNum":"  541","line":"    return true;"},
{"lineNum":"  542","line":"}"},
{"lineNum":"  543","line":""},
{"lineNum":"  544","line":"template<>"},
{"lineNum":"  545","line":"inline bool Writer<StringBuffer>::WriteDouble(double d) {"},
{"lineNum":"  546","line":"    if (internal::Double(d).IsNanOrInf()) {"},
{"lineNum":"  547","line":"        // Note: This code path can only be reached if (CEREAL_RAPIDJSON_WRITE_DEFAULT_FLAGS & kWriteNanAndInfFlag)."},
{"lineNum":"  548","line":"        if (!(kWriteDefaultFlags & kWriteNanAndInfFlag))"},
{"lineNum":"  549","line":"            return false;"},
{"lineNum":"  550","line":"        if (internal::Double(d).IsNan()) {"},
{"lineNum":"  551","line":"            PutReserve(*os_, 3);"},
{"lineNum":"  552","line":"            PutUnsafe(*os_, \'N\'); PutUnsafe(*os_, \'a\'); PutUnsafe(*os_, \'N\');"},
{"lineNum":"  553","line":"            return true;"},
{"lineNum":"  554","line":"        }"},
{"lineNum":"  555","line":"        if (internal::Double(d).Sign()) {"},
{"lineNum":"  556","line":"            PutReserve(*os_, 9);"},
{"lineNum":"  557","line":"            PutUnsafe(*os_, \'-\');"},
{"lineNum":"  558","line":"        }"},
{"lineNum":"  559","line":"        else"},
{"lineNum":"  560","line":"            PutReserve(*os_, 8);"},
{"lineNum":"  561","line":"        PutUnsafe(*os_, \'I\'); PutUnsafe(*os_, \'n\'); PutUnsafe(*os_, \'f\');"},
{"lineNum":"  562","line":"        PutUnsafe(*os_, \'i\'); PutUnsafe(*os_, \'n\'); PutUnsafe(*os_, \'i\'); PutUnsafe(*os_, \'t\'); PutUnsafe(*os_, \'y\');"},
{"lineNum":"  563","line":"        return true;"},
{"lineNum":"  564","line":"    }"},
{"lineNum":"  565","line":""},
{"lineNum":"  566","line":"    char *buffer = os_->Push(25);"},
{"lineNum":"  567","line":"    char* end = internal::dtoa(d, buffer, maxDecimalPlaces_);"},
{"lineNum":"  568","line":"    os_->Pop(static_cast<size_t>(25 - (end - buffer)));"},
{"lineNum":"  569","line":"    return true;"},
{"lineNum":"  570","line":"}"},
{"lineNum":"  571","line":""},
{"lineNum":"  572","line":"#if defined(CEREAL_RAPIDJSON_SSE2) || defined(CEREAL_RAPIDJSON_SSE42)"},
{"lineNum":"  573","line":"template<>"},
{"lineNum":"  574","line":"inline bool Writer<StringBuffer>::ScanWriteUnescapedString(StringStream& is, size_t length) {"},
{"lineNum":"  575","line":"    if (length < 16)"},
{"lineNum":"  576","line":"        return CEREAL_RAPIDJSON_LIKELY(is.Tell() < length);"},
{"lineNum":"  577","line":""},
{"lineNum":"  578","line":"    if (!CEREAL_RAPIDJSON_LIKELY(is.Tell() < length))"},
{"lineNum":"  579","line":"        return false;"},
{"lineNum":"  580","line":""},
{"lineNum":"  581","line":"    const char* p = is.src_;"},
{"lineNum":"  582","line":"    const char* end = is.head_ + length;"},
{"lineNum":"  583","line":"    const char* nextAligned = reinterpret_cast<const char*>((reinterpret_cast<size_t>(p) + 15) & static_cast<size_t>(~15));"},
{"lineNum":"  584","line":"    const char* endAligned = reinterpret_cast<const char*>(reinterpret_cast<size_t>(end) & static_cast<size_t>(~15));"},
{"lineNum":"  585","line":"    if (nextAligned > end)"},
{"lineNum":"  586","line":"        return true;"},
{"lineNum":"  587","line":""},
{"lineNum":"  588","line":"    while (p != nextAligned)"},
{"lineNum":"  589","line":"        if (*p < 0x20 || *p == \'\\\"\' || *p == \'\\\\\') {"},
{"lineNum":"  590","line":"            is.src_ = p;"},
{"lineNum":"  591","line":"            return CEREAL_RAPIDJSON_LIKELY(is.Tell() < length);"},
{"lineNum":"  592","line":"        }"},
{"lineNum":"  593","line":"        else"},
{"lineNum":"  594","line":"            os_->PutUnsafe(*p++);"},
{"lineNum":"  595","line":""},
{"lineNum":"  596","line":"    // The rest of string using SIMD"},
{"lineNum":"  597","line":"    static const char dquote[16] = { \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\', \'\\\"\' };"},
{"lineNum":"  598","line":"    static const char bslash[16] = { \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\', \'\\\\\' };"},
{"lineNum":"  599","line":"    static const char space[16]  = { 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F };"},
{"lineNum":"  600","line":"    const __m128i dq = _mm_loadu_si128(reinterpret_cast<const __m128i *>(&dquote[0]));"},
{"lineNum":"  601","line":"    const __m128i bs = _mm_loadu_si128(reinterpret_cast<const __m128i *>(&bslash[0]));"},
{"lineNum":"  602","line":"    const __m128i sp = _mm_loadu_si128(reinterpret_cast<const __m128i *>(&space[0]));"},
{"lineNum":"  603","line":""},
{"lineNum":"  604","line":"    for (; p != endAligned; p += 16) {"},
{"lineNum":"  605","line":"        const __m128i s = _mm_load_si128(reinterpret_cast<const __m128i *>(p));"},
{"lineNum":"  606","line":"        const __m128i t1 = _mm_cmpeq_epi8(s, dq);"},
{"lineNum":"  607","line":"        const __m128i t2 = _mm_cmpeq_epi8(s, bs);"},
{"lineNum":"  608","line":"        const __m128i t3 = _mm_cmpeq_epi8(_mm_max_epu8(s, sp), sp); // s < 0x20 <=> max(s, 0x1F) == 0x1F"},
{"lineNum":"  609","line":"        const __m128i x = _mm_or_si128(_mm_or_si128(t1, t2), t3);"},
{"lineNum":"  610","line":"        unsigned short r = static_cast<unsigned short>(_mm_movemask_epi8(x));"},
{"lineNum":"  611","line":"        if (CEREAL_RAPIDJSON_UNLIKELY(r != 0)) {   // some of characters is escaped"},
{"lineNum":"  612","line":"            SizeType len;"},
{"lineNum":"  613","line":"#ifdef _MSC_VER         // Find the index of first escaped"},
{"lineNum":"  614","line":"            unsigned long offset;"},
{"lineNum":"  615","line":"            _BitScanForward(&offset, r);"},
{"lineNum":"  616","line":"            len = offset;"},
{"lineNum":"  617","line":"#else"},
{"lineNum":"  618","line":"            len = static_cast<SizeType>(__builtin_ffs(r) - 1);"},
{"lineNum":"  619","line":"#endif"},
{"lineNum":"  620","line":"            char* q = reinterpret_cast<char*>(os_->PushUnsafe(len));"},
{"lineNum":"  621","line":"            for (size_t i = 0; i < len; i++)"},
{"lineNum":"  622","line":"                q[i] = p[i];"},
{"lineNum":"  623","line":""},
{"lineNum":"  624","line":"            p += len;"},
{"lineNum":"  625","line":"            break;"},
{"lineNum":"  626","line":"        }"},
{"lineNum":"  627","line":"        _mm_storeu_si128(reinterpret_cast<__m128i *>(os_->PushUnsafe(16)), s);"},
{"lineNum":"  628","line":"    }"},
{"lineNum":"  629","line":""},
{"lineNum":"  630","line":"    is.src_ = p;"},
{"lineNum":"  631","line":"    return CEREAL_RAPIDJSON_LIKELY(is.Tell() < length);"},
{"lineNum":"  632","line":"}"},
{"lineNum":"  633","line":"#elif defined(CEREAL_RAPIDJSON_NEON)"},
{"lineNum":"  634","line":"template<>"},
{"lineNum":"  635","line":"inline bool Writer<StringBuffer>::ScanWriteUnescapedString(StringStream& is, size_t length) {"},
{"lineNum":"  636","line":"    if (length < 16)"},
{"lineNum":"  637","line":"        return CEREAL_RAPIDJSON_LIKELY(is.Tell() < length);"},
{"lineNum":"  638","line":""},
{"lineNum":"  639","line":"    if (!CEREAL_RAPIDJSON_LIKELY(is.Tell() < length))"},
{"lineNum":"  640","line":"        return false;"},
{"lineNum":"  641","line":""},
{"lineNum":"  642","line":"    const char* p = is.src_;"},
{"lineNum":"  643","line":"    const char* end = is.head_ + length;"},
{"lineNum":"  644","line":"    const char* nextAligned = reinterpret_cast<const char*>((reinterpret_cast<size_t>(p) + 15) & static_cast<size_t>(~15));"},
{"lineNum":"  645","line":"    const char* endAligned = reinterpret_cast<const char*>(reinterpret_cast<size_t>(end) & static_cast<size_t>(~15));"},
{"lineNum":"  646","line":"    if (nextAligned > end)"},
{"lineNum":"  647","line":"        return true;"},
{"lineNum":"  648","line":""},
{"lineNum":"  649","line":"    while (p != nextAligned)"},
{"lineNum":"  650","line":"        if (*p < 0x20 || *p == \'\\\"\' || *p == \'\\\\\') {"},
{"lineNum":"  651","line":"            is.src_ = p;"},
{"lineNum":"  652","line":"            return CEREAL_RAPIDJSON_LIKELY(is.Tell() < length);"},
{"lineNum":"  653","line":"        }"},
{"lineNum":"  654","line":"        else"},
{"lineNum":"  655","line":"            os_->PutUnsafe(*p++);"},
{"lineNum":"  656","line":""},
{"lineNum":"  657","line":"    // The rest of string using SIMD"},
{"lineNum":"  658","line":"    const uint8x16_t s0 = vmovq_n_u8(\'\"\');"},
{"lineNum":"  659","line":"    const uint8x16_t s1 = vmovq_n_u8(\'\\\\\');"},
{"lineNum":"  660","line":"    const uint8x16_t s2 = vmovq_n_u8(\'\\b\');"},
{"lineNum":"  661","line":"    const uint8x16_t s3 = vmovq_n_u8(32);"},
{"lineNum":"  662","line":""},
{"lineNum":"  663","line":"    for (; p != endAligned; p += 16) {"},
{"lineNum":"  664","line":"        const uint8x16_t s = vld1q_u8(reinterpret_cast<const uint8_t *>(p));"},
{"lineNum":"  665","line":"        uint8x16_t x = vceqq_u8(s, s0);"},
{"lineNum":"  666","line":"        x = vorrq_u8(x, vceqq_u8(s, s1));"},
{"lineNum":"  667","line":"        x = vorrq_u8(x, vceqq_u8(s, s2));"},
{"lineNum":"  668","line":"        x = vorrq_u8(x, vcltq_u8(s, s3));"},
{"lineNum":"  669","line":""},
{"lineNum":"  670","line":"        x = vrev64q_u8(x);                     // Rev in 64"},
{"lineNum":"  671","line":"        uint64_t low = vgetq_lane_u64(reinterpret_cast<uint64x2_t>(x), 0);   // extract"},
{"lineNum":"  672","line":"        uint64_t high = vgetq_lane_u64(reinterpret_cast<uint64x2_t>(x), 1);  // extract"},
{"lineNum":"  673","line":""},
{"lineNum":"  674","line":"        SizeType len = 0;"},
{"lineNum":"  675","line":"        bool escaped = false;"},
{"lineNum":"  676","line":"        if (low == 0) {"},
{"lineNum":"  677","line":"            if (high != 0) {"},
{"lineNum":"  678","line":"                unsigned lz = (unsigned)__builtin_clzll(high);"},
{"lineNum":"  679","line":"                len = 8 + (lz >> 3);"},
{"lineNum":"  680","line":"                escaped = true;"},
{"lineNum":"  681","line":"            }"},
{"lineNum":"  682","line":"        } else {"},
{"lineNum":"  683","line":"            unsigned lz = (unsigned)__builtin_clzll(low);"},
{"lineNum":"  684","line":"            len = lz >> 3;"},
{"lineNum":"  685","line":"            escaped = true;"},
{"lineNum":"  686","line":"        }"},
{"lineNum":"  687","line":"        if (CEREAL_RAPIDJSON_UNLIKELY(escaped)) {   // some of characters is escaped"},
{"lineNum":"  688","line":"            char* q = reinterpret_cast<char*>(os_->PushUnsafe(len));"},
{"lineNum":"  689","line":"            for (size_t i = 0; i < len; i++)"},
{"lineNum":"  690","line":"                q[i] = p[i];"},
{"lineNum":"  691","line":""},
{"lineNum":"  692","line":"            p += len;"},
{"lineNum":"  693","line":"            break;"},
{"lineNum":"  694","line":"        }"},
{"lineNum":"  695","line":"        vst1q_u8(reinterpret_cast<uint8_t *>(os_->PushUnsafe(16)), s);"},
{"lineNum":"  696","line":"    }"},
{"lineNum":"  697","line":""},
{"lineNum":"  698","line":"    is.src_ = p;"},
{"lineNum":"  699","line":"    return CEREAL_RAPIDJSON_LIKELY(is.Tell() < length);"},
{"lineNum":"  700","line":"}"},
{"lineNum":"  701","line":"#endif // CEREAL_RAPIDJSON_NEON"},
{"lineNum":"  702","line":""},
{"lineNum":"  703","line":"CEREAL_RAPIDJSON_NAMESPACE_END"},
{"lineNum":"  704","line":""},
{"lineNum":"  705","line":"#if defined(_MSC_VER) || defined(__clang__)"},
{"lineNum":"  706","line":"CEREAL_RAPIDJSON_DIAG_POP"},
{"lineNum":"  707","line":"#endif"},
{"lineNum":"  708","line":""},
{"lineNum":"  709","line":"#endif // CEREAL_RAPIDJSON_CEREAL_RAPIDJSON_H_"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 57, "covered" : 0,};
var merged_data = [];
