var data = {lines:[
{"lineNum":"    1","line":"/*"},
{"lineNum":"    2","line":"//@HEADER"},
{"lineNum":"    3","line":"// ************************************************************************"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"//                        Kokkos v. 3.0"},
{"lineNum":"    6","line":"//       Copyright (2020) National Technology & Engineering"},
{"lineNum":"    7","line":"//               Solutions of Sandia, LLC (NTESS)."},
{"lineNum":"    8","line":"//"},
{"lineNum":"    9","line":"// Under the terms of Contract DE-NA0003525 with NTESS,"},
{"lineNum":"   10","line":"// the U.S. Government retains certain rights in this software."},
{"lineNum":"   11","line":"//"},
{"lineNum":"   12","line":"// Redistribution and use in source and binary forms, with or without"},
{"lineNum":"   13","line":"// modification, are permitted provided that the following conditions are"},
{"lineNum":"   14","line":"// met:"},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"// 1. Redistributions of source code must retain the above copyright"},
{"lineNum":"   17","line":"// notice, this list of conditions and the following disclaimer."},
{"lineNum":"   18","line":"//"},
{"lineNum":"   19","line":"// 2. Redistributions in binary form must reproduce the above copyright"},
{"lineNum":"   20","line":"// notice, this list of conditions and the following disclaimer in the"},
{"lineNum":"   21","line":"// documentation and/or other materials provided with the distribution."},
{"lineNum":"   22","line":"//"},
{"lineNum":"   23","line":"// 3. Neither the name of the Corporation nor the names of the"},
{"lineNum":"   24","line":"// contributors may be used to endorse or promote products derived from"},
{"lineNum":"   25","line":"// this software without specific prior written permission."},
{"lineNum":"   26","line":"//"},
{"lineNum":"   27","line":"// THIS SOFTWARE IS PROVIDED BY NTESS \"AS IS\" AND ANY"},
{"lineNum":"   28","line":"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"},
{"lineNum":"   29","line":"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR"},
{"lineNum":"   30","line":"// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NTESS OR THE"},
{"lineNum":"   31","line":"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,"},
{"lineNum":"   32","line":"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,"},
{"lineNum":"   33","line":"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR"},
{"lineNum":"   34","line":"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF"},
{"lineNum":"   35","line":"// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING"},
{"lineNum":"   36","line":"// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"},
{"lineNum":"   37","line":"// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   38","line":"//"},
{"lineNum":"   39","line":"// Questions? Contact Christian R. Trott (crtrott@sandia.gov)"},
{"lineNum":"   40","line":"//"},
{"lineNum":"   41","line":"// ************************************************************************"},
{"lineNum":"   42","line":"//@HEADER"},
{"lineNum":"   43","line":"*/"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"#ifndef KOKKOS_PARALLEL_REDUCE_HPP"},
{"lineNum":"   46","line":"#define KOKKOS_PARALLEL_REDUCE_HPP"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"#include <Kokkos_NumericTraits.hpp>"},
{"lineNum":"   49","line":"#include <Kokkos_View.hpp>"},
{"lineNum":"   50","line":"#include <impl/Kokkos_FunctorAnalysis.hpp>"},
{"lineNum":"   51","line":"#include <impl/Kokkos_FunctorAdapter.hpp>"},
{"lineNum":"   52","line":"#include <type_traits>"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"namespace Kokkos {"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"template <class T, class Enable = void>"},
{"lineNum":"   57","line":"struct is_reducer_type {"},
{"lineNum":"   58","line":"  enum { value = 0 };"},
{"lineNum":"   59","line":"};"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"template <class T>"},
{"lineNum":"   62","line":"struct is_reducer_type<"},
{"lineNum":"   63","line":"    T, typename std::enable_if<std::is_same<"},
{"lineNum":"   64","line":"           typename std::remove_cv<T>::type,"},
{"lineNum":"   65","line":"           typename std::remove_cv<typename T::reducer>::type>::value>::type> {"},
{"lineNum":"   66","line":"  enum { value = 1 };"},
{"lineNum":"   67","line":"};"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"template <class Scalar, class Space>"},
{"lineNum":"   70","line":"struct Sum {"},
{"lineNum":"   71","line":" public:"},
{"lineNum":"   72","line":"  // Required"},
{"lineNum":"   73","line":"  using reducer    = Sum<Scalar, Space>;"},
{"lineNum":"   74","line":"  using value_type = typename std::remove_cv<Scalar>::type;"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"  using result_view_type = Kokkos::View<value_type, Space>;"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":" private:"},
{"lineNum":"   79","line":"  result_view_type value;"},
{"lineNum":"   80","line":"  bool references_scalar_v;"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":" public:"},
{"lineNum":"   83","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   84","line":"  Sum(value_type& value_) : value(&value_), references_scalar_v(true) {}"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   87","line":"  Sum(const result_view_type& value_)"},
{"lineNum":"   88","line":"      : value(value_), references_scalar_v(false) {}"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"  // Required"},
{"lineNum":"   91","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   92","line":"  void join(value_type& dest, const value_type& src) const { dest += src; }"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   95","line":"  void join(volatile value_type& dest, const volatile value_type& src) const {"},
{"lineNum":"   96","line":"    dest += src;"},
{"lineNum":"   97","line":"  }"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  100","line":"  void init(value_type& val) const {"},
{"lineNum":"  101","line":"    val = reduction_identity<value_type>::sum();"},
{"lineNum":"  102","line":"  }"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  105","line":"  value_type& reference() const { return *value.data(); }"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  108","line":"  result_view_type view() const { return value; }"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  111","line":"  bool references_scalar() const { return references_scalar_v; }"},
{"lineNum":"  112","line":"};"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"template <class Scalar, class Space>"},
{"lineNum":"  115","line":"struct Prod {"},
{"lineNum":"  116","line":" public:"},
{"lineNum":"  117","line":"  // Required"},
{"lineNum":"  118","line":"  using reducer    = Prod<Scalar, Space>;"},
{"lineNum":"  119","line":"  using value_type = typename std::remove_cv<Scalar>::type;"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"  using result_view_type = Kokkos::View<value_type, Space>;"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":" private:"},
{"lineNum":"  124","line":"  result_view_type value;"},
{"lineNum":"  125","line":"  bool references_scalar_v;"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":" public:"},
{"lineNum":"  128","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  129","line":"  Prod(value_type& value_) : value(&value_), references_scalar_v(true) {}"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  132","line":"  Prod(const result_view_type& value_)"},
{"lineNum":"  133","line":"      : value(value_), references_scalar_v(false) {}"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"  // Required"},
{"lineNum":"  136","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  137","line":"  void join(value_type& dest, const value_type& src) const { dest *= src; }"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  140","line":"  void join(volatile value_type& dest, const volatile value_type& src) const {"},
{"lineNum":"  141","line":"    dest *= src;"},
{"lineNum":"  142","line":"  }"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  145","line":"  void init(value_type& val) const {"},
{"lineNum":"  146","line":"    val = reduction_identity<value_type>::prod();"},
{"lineNum":"  147","line":"  }"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  150","line":"  value_type& reference() const { return *value.data(); }"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  153","line":"  result_view_type view() const { return value; }"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  156","line":"  bool references_scalar() const { return references_scalar_v; }"},
{"lineNum":"  157","line":"};"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"template <class Scalar, class Space>"},
{"lineNum":"  160","line":"struct Min {"},
{"lineNum":"  161","line":" public:"},
{"lineNum":"  162","line":"  // Required"},
{"lineNum":"  163","line":"  using reducer    = Min<Scalar, Space>;"},
{"lineNum":"  164","line":"  using value_type = typename std::remove_cv<Scalar>::type;"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"  using result_view_type = Kokkos::View<value_type, Space>;"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":" private:"},
{"lineNum":"  169","line":"  result_view_type value;"},
{"lineNum":"  170","line":"  bool references_scalar_v;"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":" public:"},
{"lineNum":"  173","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  174","line":"  Min(value_type& value_) : value(&value_), references_scalar_v(true) {}"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  177","line":"  Min(const result_view_type& value_)"},
{"lineNum":"  178","line":"      : value(value_), references_scalar_v(false) {}"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"  // Required"},
{"lineNum":"  181","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  182","line":"  void join(value_type& dest, const value_type& src) const {"},
{"lineNum":"  183","line":"    if (src < dest) dest = src;"},
{"lineNum":"  184","line":"  }"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  187","line":"  void join(volatile value_type& dest, const volatile value_type& src) const {"},
{"lineNum":"  188","line":"    if (src < dest) dest = src;"},
{"lineNum":"  189","line":"  }"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  192","line":"  void init(value_type& val) const {"},
{"lineNum":"  193","line":"    val = reduction_identity<value_type>::min();"},
{"lineNum":"  194","line":"  }"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  197","line":"  value_type& reference() const { return *value.data(); }"},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  200","line":"  result_view_type view() const { return value; }"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  203","line":"  bool references_scalar() const { return references_scalar_v; }"},
{"lineNum":"  204","line":"};"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"template <class Scalar, class Space>"},
{"lineNum":"  207","line":"struct Max {"},
{"lineNum":"  208","line":" public:"},
{"lineNum":"  209","line":"  // Required"},
{"lineNum":"  210","line":"  using reducer    = Max<Scalar, Space>;"},
{"lineNum":"  211","line":"  using value_type = typename std::remove_cv<Scalar>::type;"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"  using result_view_type = Kokkos::View<value_type, Space>;"},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":" private:"},
{"lineNum":"  216","line":"  result_view_type value;"},
{"lineNum":"  217","line":"  bool references_scalar_v;"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":" public:"},
{"lineNum":"  220","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  221","line":"  Max(value_type& value_) : value(&value_), references_scalar_v(true) {}"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  224","line":"  Max(const result_view_type& value_)"},
{"lineNum":"  225","line":"      : value(value_), references_scalar_v(false) {}"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"  // Required"},
{"lineNum":"  228","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  229","line":"  void join(value_type& dest, const value_type& src) const {"},
{"lineNum":"  230","line":"    if (src > dest) dest = src;"},
{"lineNum":"  231","line":"  }"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  234","line":"  void join(volatile value_type& dest, const volatile value_type& src) const {"},
{"lineNum":"  235","line":"    if (src > dest) dest = src;"},
{"lineNum":"  236","line":"  }"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"  // Required"},
{"lineNum":"  239","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  240","line":"  void init(value_type& val) const {"},
{"lineNum":"  241","line":"    val = reduction_identity<value_type>::max();"},
{"lineNum":"  242","line":"  }"},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  245","line":"  value_type& reference() const { return *value.data(); }"},
{"lineNum":"  246","line":""},
{"lineNum":"  247","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  248","line":"  result_view_type view() const { return value; }"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  251","line":"  bool references_scalar() const { return references_scalar_v; }"},
{"lineNum":"  252","line":"};"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"template <class Scalar, class Space>"},
{"lineNum":"  255","line":"struct LAnd {"},
{"lineNum":"  256","line":" public:"},
{"lineNum":"  257","line":"  // Required"},
{"lineNum":"  258","line":"  using reducer    = LAnd<Scalar, Space>;"},
{"lineNum":"  259","line":"  using value_type = typename std::remove_cv<Scalar>::type;"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"  using result_view_type = Kokkos::View<value_type, Space>;"},
{"lineNum":"  262","line":""},
{"lineNum":"  263","line":" private:"},
{"lineNum":"  264","line":"  result_view_type value;"},
{"lineNum":"  265","line":"  bool references_scalar_v;"},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":" public:"},
{"lineNum":"  268","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  269","line":"  LAnd(value_type& value_) : value(&value_), references_scalar_v(true) {}"},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  272","line":"  LAnd(const result_view_type& value_)"},
{"lineNum":"  273","line":"      : value(value_), references_scalar_v(false) {}"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  276","line":"  void join(value_type& dest, const value_type& src) const {"},
{"lineNum":"  277","line":"    dest = dest && src;"},
{"lineNum":"  278","line":"  }"},
{"lineNum":"  279","line":""},
{"lineNum":"  280","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  281","line":"  void join(volatile value_type& dest, const volatile value_type& src) const {"},
{"lineNum":"  282","line":"    dest = dest && src;"},
{"lineNum":"  283","line":"  }"},
{"lineNum":"  284","line":""},
{"lineNum":"  285","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  286","line":"  void init(value_type& val) const {"},
{"lineNum":"  287","line":"    val = reduction_identity<value_type>::land();"},
{"lineNum":"  288","line":"  }"},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  291","line":"  value_type& reference() const { return *value.data(); }"},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  294","line":"  result_view_type view() const { return value; }"},
{"lineNum":"  295","line":""},
{"lineNum":"  296","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  297","line":"  bool references_scalar() const { return references_scalar_v; }"},
{"lineNum":"  298","line":"};"},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"template <class Scalar, class Space>"},
{"lineNum":"  301","line":"struct LOr {"},
{"lineNum":"  302","line":" public:"},
{"lineNum":"  303","line":"  // Required"},
{"lineNum":"  304","line":"  using reducer    = LOr<Scalar, Space>;"},
{"lineNum":"  305","line":"  using value_type = typename std::remove_cv<Scalar>::type;"},
{"lineNum":"  306","line":""},
{"lineNum":"  307","line":"  using result_view_type = Kokkos::View<value_type, Space>;"},
{"lineNum":"  308","line":""},
{"lineNum":"  309","line":" private:"},
{"lineNum":"  310","line":"  result_view_type value;"},
{"lineNum":"  311","line":"  bool references_scalar_v;"},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":" public:"},
{"lineNum":"  314","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  315","line":"  LOr(value_type& value_) : value(&value_), references_scalar_v(true) {}"},
{"lineNum":"  316","line":""},
{"lineNum":"  317","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  318","line":"  LOr(const result_view_type& value_)"},
{"lineNum":"  319","line":"      : value(value_), references_scalar_v(false) {}"},
{"lineNum":"  320","line":""},
{"lineNum":"  321","line":"  // Required"},
{"lineNum":"  322","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  323","line":"  void join(value_type& dest, const value_type& src) const {"},
{"lineNum":"  324","line":"    dest = dest || src;"},
{"lineNum":"  325","line":"  }"},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  328","line":"  void join(volatile value_type& dest, const volatile value_type& src) const {"},
{"lineNum":"  329","line":"    dest = dest || src;"},
{"lineNum":"  330","line":"  }"},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  333","line":"  void init(value_type& val) const {"},
{"lineNum":"  334","line":"    val = reduction_identity<value_type>::lor();"},
{"lineNum":"  335","line":"  }"},
{"lineNum":"  336","line":""},
{"lineNum":"  337","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  338","line":"  value_type& reference() const { return *value.data(); }"},
{"lineNum":"  339","line":""},
{"lineNum":"  340","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  341","line":"  result_view_type view() const { return value; }"},
{"lineNum":"  342","line":""},
{"lineNum":"  343","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  344","line":"  bool references_scalar() const { return references_scalar_v; }"},
{"lineNum":"  345","line":"};"},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"template <class Scalar, class Space>"},
{"lineNum":"  348","line":"struct BAnd {"},
{"lineNum":"  349","line":" public:"},
{"lineNum":"  350","line":"  // Required"},
{"lineNum":"  351","line":"  using reducer    = BAnd<Scalar, Space>;"},
{"lineNum":"  352","line":"  using value_type = typename std::remove_cv<Scalar>::type;"},
{"lineNum":"  353","line":""},
{"lineNum":"  354","line":"  using result_view_type = Kokkos::View<value_type, Space>;"},
{"lineNum":"  355","line":""},
{"lineNum":"  356","line":" private:"},
{"lineNum":"  357","line":"  result_view_type value;"},
{"lineNum":"  358","line":"  bool references_scalar_v;"},
{"lineNum":"  359","line":""},
{"lineNum":"  360","line":" public:"},
{"lineNum":"  361","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  362","line":"  BAnd(value_type& value_) : value(&value_), references_scalar_v(true) {}"},
{"lineNum":"  363","line":""},
{"lineNum":"  364","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  365","line":"  BAnd(const result_view_type& value_)"},
{"lineNum":"  366","line":"      : value(value_), references_scalar_v(false) {}"},
{"lineNum":"  367","line":""},
{"lineNum":"  368","line":"  // Required"},
{"lineNum":"  369","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  370","line":"  void join(value_type& dest, const value_type& src) const {"},
{"lineNum":"  371","line":"    dest = dest & src;"},
{"lineNum":"  372","line":"  }"},
{"lineNum":"  373","line":""},
{"lineNum":"  374","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  375","line":"  void join(volatile value_type& dest, const volatile value_type& src) const {"},
{"lineNum":"  376","line":"    dest = dest & src;"},
{"lineNum":"  377","line":"  }"},
{"lineNum":"  378","line":""},
{"lineNum":"  379","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  380","line":"  void init(value_type& val) const {"},
{"lineNum":"  381","line":"    val = reduction_identity<value_type>::band();"},
{"lineNum":"  382","line":"  }"},
{"lineNum":"  383","line":""},
{"lineNum":"  384","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  385","line":"  value_type& reference() const { return *value.data(); }"},
{"lineNum":"  386","line":""},
{"lineNum":"  387","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  388","line":"  result_view_type view() const { return value; }"},
{"lineNum":"  389","line":""},
{"lineNum":"  390","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  391","line":"  bool references_scalar() const { return references_scalar_v; }"},
{"lineNum":"  392","line":"};"},
{"lineNum":"  393","line":""},
{"lineNum":"  394","line":"template <class Scalar, class Space>"},
{"lineNum":"  395","line":"struct BOr {"},
{"lineNum":"  396","line":" public:"},
{"lineNum":"  397","line":"  // Required"},
{"lineNum":"  398","line":"  using reducer    = BOr<Scalar, Space>;"},
{"lineNum":"  399","line":"  using value_type = typename std::remove_cv<Scalar>::type;"},
{"lineNum":"  400","line":""},
{"lineNum":"  401","line":"  using result_view_type = Kokkos::View<value_type, Space>;"},
{"lineNum":"  402","line":""},
{"lineNum":"  403","line":" private:"},
{"lineNum":"  404","line":"  result_view_type value;"},
{"lineNum":"  405","line":"  bool references_scalar_v;"},
{"lineNum":"  406","line":""},
{"lineNum":"  407","line":" public:"},
{"lineNum":"  408","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  409","line":"  BOr(value_type& value_) : value(&value_), references_scalar_v(true) {}"},
{"lineNum":"  410","line":""},
{"lineNum":"  411","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  412","line":"  BOr(const result_view_type& value_)"},
{"lineNum":"  413","line":"      : value(value_), references_scalar_v(false) {}"},
{"lineNum":"  414","line":""},
{"lineNum":"  415","line":"  // Required"},
{"lineNum":"  416","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  417","line":"  void join(value_type& dest, const value_type& src) const {"},
{"lineNum":"  418","line":"    dest = dest | src;"},
{"lineNum":"  419","line":"  }"},
{"lineNum":"  420","line":""},
{"lineNum":"  421","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  422","line":"  void join(volatile value_type& dest, const volatile value_type& src) const {"},
{"lineNum":"  423","line":"    dest = dest | src;"},
{"lineNum":"  424","line":"  }"},
{"lineNum":"  425","line":""},
{"lineNum":"  426","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  427","line":"  void init(value_type& val) const {"},
{"lineNum":"  428","line":"    val = reduction_identity<value_type>::bor();"},
{"lineNum":"  429","line":"  }"},
{"lineNum":"  430","line":""},
{"lineNum":"  431","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  432","line":"  value_type& reference() const { return *value.data(); }"},
{"lineNum":"  433","line":""},
{"lineNum":"  434","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  435","line":"  result_view_type view() const { return value; }"},
{"lineNum":"  436","line":""},
{"lineNum":"  437","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  438","line":"  bool references_scalar() const { return references_scalar_v; }"},
{"lineNum":"  439","line":"};"},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"template <class Scalar, class Index>"},
{"lineNum":"  442","line":"struct ValLocScalar {"},
{"lineNum":"  443","line":"  Scalar val;"},
{"lineNum":"  444","line":"  Index loc;"},
{"lineNum":"  445","line":""},
{"lineNum":"  446","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  447","line":"  void operator=(const ValLocScalar& rhs) {"},
{"lineNum":"  448","line":"    val = rhs.val;"},
{"lineNum":"  449","line":"    loc = rhs.loc;"},
{"lineNum":"  450","line":"  }"},
{"lineNum":"  451","line":""},
{"lineNum":"  452","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  453","line":"  void operator=(const volatile ValLocScalar& rhs) volatile {"},
{"lineNum":"  454","line":"    val = rhs.val;"},
{"lineNum":"  455","line":"    loc = rhs.loc;"},
{"lineNum":"  456","line":"  }"},
{"lineNum":"  457","line":"};"},
{"lineNum":"  458","line":""},
{"lineNum":"  459","line":"template <class Scalar, class Index, class Space>"},
{"lineNum":"  460","line":"struct MinLoc {"},
{"lineNum":"  461","line":" private:"},
{"lineNum":"  462","line":"  using scalar_type = typename std::remove_cv<Scalar>::type;"},
{"lineNum":"  463","line":"  using index_type  = typename std::remove_cv<Index>::type;"},
{"lineNum":"  464","line":""},
{"lineNum":"  465","line":" public:"},
{"lineNum":"  466","line":"  // Required"},
{"lineNum":"  467","line":"  using reducer    = MinLoc<Scalar, Index, Space>;"},
{"lineNum":"  468","line":"  using value_type = ValLocScalar<scalar_type, index_type>;"},
{"lineNum":"  469","line":""},
{"lineNum":"  470","line":"  using result_view_type = Kokkos::View<value_type, Space>;"},
{"lineNum":"  471","line":""},
{"lineNum":"  472","line":" private:"},
{"lineNum":"  473","line":"  result_view_type value;"},
{"lineNum":"  474","line":"  bool references_scalar_v;"},
{"lineNum":"  475","line":""},
{"lineNum":"  476","line":" public:"},
{"lineNum":"  477","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  478","line":"  MinLoc(value_type& value_) : value(&value_), references_scalar_v(true) {}"},
{"lineNum":"  479","line":""},
{"lineNum":"  480","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  481","line":"  MinLoc(const result_view_type& value_)"},
{"lineNum":"  482","line":"      : value(value_), references_scalar_v(false) {}"},
{"lineNum":"  483","line":""},
{"lineNum":"  484","line":"  // Required"},
{"lineNum":"  485","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  486","line":"  void join(value_type& dest, const value_type& src) const {"},
{"lineNum":"  487","line":"    if (src.val < dest.val) dest = src;"},
{"lineNum":"  488","line":"  }"},
{"lineNum":"  489","line":""},
{"lineNum":"  490","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  491","line":"  void join(volatile value_type& dest, const volatile value_type& src) const {"},
{"lineNum":"  492","line":"    if (src.val < dest.val) dest = src;"},
{"lineNum":"  493","line":"  }"},
{"lineNum":"  494","line":""},
{"lineNum":"  495","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  496","line":"  void init(value_type& val) const {"},
{"lineNum":"  497","line":"    val.val = reduction_identity<scalar_type>::min();"},
{"lineNum":"  498","line":"    val.loc = reduction_identity<index_type>::min();"},
{"lineNum":"  499","line":"  }"},
{"lineNum":"  500","line":""},
{"lineNum":"  501","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  502","line":"  value_type& reference() const { return *value.data(); }"},
{"lineNum":"  503","line":""},
{"lineNum":"  504","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  505","line":"  result_view_type view() const { return value; }"},
{"lineNum":"  506","line":""},
{"lineNum":"  507","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  508","line":"  bool references_scalar() const { return references_scalar_v; }"},
{"lineNum":"  509","line":"};"},
{"lineNum":"  510","line":""},
{"lineNum":"  511","line":"template <class Scalar, class Index, class Space>"},
{"lineNum":"  512","line":"struct MaxLoc {"},
{"lineNum":"  513","line":" private:"},
{"lineNum":"  514","line":"  using scalar_type = typename std::remove_cv<Scalar>::type;"},
{"lineNum":"  515","line":"  using index_type  = typename std::remove_cv<Index>::type;"},
{"lineNum":"  516","line":""},
{"lineNum":"  517","line":" public:"},
{"lineNum":"  518","line":"  // Required"},
{"lineNum":"  519","line":"  using reducer    = MaxLoc<Scalar, Index, Space>;"},
{"lineNum":"  520","line":"  using value_type = ValLocScalar<scalar_type, index_type>;"},
{"lineNum":"  521","line":""},
{"lineNum":"  522","line":"  using result_view_type = Kokkos::View<value_type, Space>;"},
{"lineNum":"  523","line":""},
{"lineNum":"  524","line":" private:"},
{"lineNum":"  525","line":"  result_view_type value;"},
{"lineNum":"  526","line":"  bool references_scalar_v;"},
{"lineNum":"  527","line":""},
{"lineNum":"  528","line":" public:"},
{"lineNum":"  529","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  530","line":"  MaxLoc(value_type& value_) : value(&value_), references_scalar_v(true) {}"},
{"lineNum":"  531","line":""},
{"lineNum":"  532","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  533","line":"  MaxLoc(const result_view_type& value_)"},
{"lineNum":"  534","line":"      : value(value_), references_scalar_v(false) {}"},
{"lineNum":"  535","line":""},
{"lineNum":"  536","line":"  // Required"},
{"lineNum":"  537","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  538","line":"  void join(value_type& dest, const value_type& src) const {"},
{"lineNum":"  539","line":"    if (src.val > dest.val) dest = src;"},
{"lineNum":"  540","line":"  }"},
{"lineNum":"  541","line":""},
{"lineNum":"  542","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  543","line":"  void join(volatile value_type& dest, const volatile value_type& src) const {"},
{"lineNum":"  544","line":"    if (src.val > dest.val) dest = src;"},
{"lineNum":"  545","line":"  }"},
{"lineNum":"  546","line":""},
{"lineNum":"  547","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  548","line":"  void init(value_type& val) const {"},
{"lineNum":"  549","line":"    val.val = reduction_identity<scalar_type>::max();"},
{"lineNum":"  550","line":"    val.loc = reduction_identity<index_type>::min();"},
{"lineNum":"  551","line":"  }"},
{"lineNum":"  552","line":""},
{"lineNum":"  553","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  554","line":"  value_type& reference() const { return *value.data(); }"},
{"lineNum":"  555","line":""},
{"lineNum":"  556","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  557","line":"  result_view_type view() const { return value; }"},
{"lineNum":"  558","line":""},
{"lineNum":"  559","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  560","line":"  bool references_scalar() const { return references_scalar_v; }"},
{"lineNum":"  561","line":"};"},
{"lineNum":"  562","line":""},
{"lineNum":"  563","line":"template <class Scalar>"},
{"lineNum":"  564","line":"struct MinMaxScalar {"},
{"lineNum":"  565","line":"  Scalar min_val, max_val;"},
{"lineNum":"  566","line":""},
{"lineNum":"  567","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  568","line":"  void operator=(const MinMaxScalar& rhs) {"},
{"lineNum":"  569","line":"    min_val = rhs.min_val;"},
{"lineNum":"  570","line":"    max_val = rhs.max_val;"},
{"lineNum":"  571","line":"  }"},
{"lineNum":"  572","line":""},
{"lineNum":"  573","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  574","line":"  void operator=(const volatile MinMaxScalar& rhs) volatile {"},
{"lineNum":"  575","line":"    min_val = rhs.min_val;"},
{"lineNum":"  576","line":"    max_val = rhs.max_val;"},
{"lineNum":"  577","line":"  }"},
{"lineNum":"  578","line":"};"},
{"lineNum":"  579","line":""},
{"lineNum":"  580","line":"template <class Scalar, class Space>"},
{"lineNum":"  581","line":"struct MinMax {"},
{"lineNum":"  582","line":" private:"},
{"lineNum":"  583","line":"  using scalar_type = typename std::remove_cv<Scalar>::type;"},
{"lineNum":"  584","line":""},
{"lineNum":"  585","line":" public:"},
{"lineNum":"  586","line":"  // Required"},
{"lineNum":"  587","line":"  using reducer    = MinMax<Scalar, Space>;"},
{"lineNum":"  588","line":"  using value_type = MinMaxScalar<scalar_type>;"},
{"lineNum":"  589","line":""},
{"lineNum":"  590","line":"  using result_view_type = Kokkos::View<value_type, Space>;"},
{"lineNum":"  591","line":""},
{"lineNum":"  592","line":" private:"},
{"lineNum":"  593","line":"  result_view_type value;"},
{"lineNum":"  594","line":"  bool references_scalar_v;"},
{"lineNum":"  595","line":""},
{"lineNum":"  596","line":" public:"},
{"lineNum":"  597","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  598","line":"  MinMax(value_type& value_) : value(&value_), references_scalar_v(true) {}"},
{"lineNum":"  599","line":""},
{"lineNum":"  600","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  601","line":"  MinMax(const result_view_type& value_)"},
{"lineNum":"  602","line":"      : value(value_), references_scalar_v(false) {}"},
{"lineNum":"  603","line":""},
{"lineNum":"  604","line":"  // Required"},
{"lineNum":"  605","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  606","line":"  void join(value_type& dest, const value_type& src) const {"},
{"lineNum":"  607","line":"    if (src.min_val < dest.min_val) {"},
{"lineNum":"  608","line":"      dest.min_val = src.min_val;"},
{"lineNum":"  609","line":"    }"},
{"lineNum":"  610","line":"    if (src.max_val > dest.max_val) {"},
{"lineNum":"  611","line":"      dest.max_val = src.max_val;"},
{"lineNum":"  612","line":"    }"},
{"lineNum":"  613","line":"  }"},
{"lineNum":"  614","line":""},
{"lineNum":"  615","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  616","line":"  void join(volatile value_type& dest, const volatile value_type& src) const {"},
{"lineNum":"  617","line":"    if (src.min_val < dest.min_val) {"},
{"lineNum":"  618","line":"      dest.min_val = src.min_val;"},
{"lineNum":"  619","line":"    }"},
{"lineNum":"  620","line":"    if (src.max_val > dest.max_val) {"},
{"lineNum":"  621","line":"      dest.max_val = src.max_val;"},
{"lineNum":"  622","line":"    }"},
{"lineNum":"  623","line":"  }"},
{"lineNum":"  624","line":""},
{"lineNum":"  625","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  626","line":"  void init(value_type& val) const {"},
{"lineNum":"  627","line":"    val.max_val = reduction_identity<scalar_type>::max();"},
{"lineNum":"  628","line":"    val.min_val = reduction_identity<scalar_type>::min();"},
{"lineNum":"  629","line":"  }"},
{"lineNum":"  630","line":""},
{"lineNum":"  631","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  632","line":"  value_type& reference() const { return *value.data(); }"},
{"lineNum":"  633","line":""},
{"lineNum":"  634","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  635","line":"  result_view_type view() const { return value; }"},
{"lineNum":"  636","line":""},
{"lineNum":"  637","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  638","line":"  bool references_scalar() const { return references_scalar_v; }"},
{"lineNum":"  639","line":"};"},
{"lineNum":"  640","line":""},
{"lineNum":"  641","line":"template <class Scalar, class Index>"},
{"lineNum":"  642","line":"struct MinMaxLocScalar {"},
{"lineNum":"  643","line":"  Scalar min_val, max_val;"},
{"lineNum":"  644","line":"  Index min_loc, max_loc;"},
{"lineNum":"  645","line":""},
{"lineNum":"  646","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  647","line":"  void operator=(const MinMaxLocScalar& rhs) {"},
{"lineNum":"  648","line":"    min_val = rhs.min_val;"},
{"lineNum":"  649","line":"    min_loc = rhs.min_loc;"},
{"lineNum":"  650","line":"    max_val = rhs.max_val;"},
{"lineNum":"  651","line":"    max_loc = rhs.max_loc;"},
{"lineNum":"  652","line":"  }"},
{"lineNum":"  653","line":""},
{"lineNum":"  654","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  655","line":"  void operator=(const volatile MinMaxLocScalar& rhs) volatile {"},
{"lineNum":"  656","line":"    min_val = rhs.min_val;"},
{"lineNum":"  657","line":"    min_loc = rhs.min_loc;"},
{"lineNum":"  658","line":"    max_val = rhs.max_val;"},
{"lineNum":"  659","line":"    max_loc = rhs.max_loc;"},
{"lineNum":"  660","line":"  }"},
{"lineNum":"  661","line":"};"},
{"lineNum":"  662","line":""},
{"lineNum":"  663","line":"template <class Scalar, class Index, class Space>"},
{"lineNum":"  664","line":"struct MinMaxLoc {"},
{"lineNum":"  665","line":" private:"},
{"lineNum":"  666","line":"  using scalar_type = typename std::remove_cv<Scalar>::type;"},
{"lineNum":"  667","line":"  using index_type  = typename std::remove_cv<Index>::type;"},
{"lineNum":"  668","line":""},
{"lineNum":"  669","line":" public:"},
{"lineNum":"  670","line":"  // Required"},
{"lineNum":"  671","line":"  using reducer    = MinMaxLoc<Scalar, Index, Space>;"},
{"lineNum":"  672","line":"  using value_type = MinMaxLocScalar<scalar_type, index_type>;"},
{"lineNum":"  673","line":""},
{"lineNum":"  674","line":"  using result_view_type = Kokkos::View<value_type, Space>;"},
{"lineNum":"  675","line":""},
{"lineNum":"  676","line":" private:"},
{"lineNum":"  677","line":"  result_view_type value;"},
{"lineNum":"  678","line":"  bool references_scalar_v;"},
{"lineNum":"  679","line":""},
{"lineNum":"  680","line":" public:"},
{"lineNum":"  681","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  682","line":"  MinMaxLoc(value_type& value_) : value(&value_), references_scalar_v(true) {}"},
{"lineNum":"  683","line":""},
{"lineNum":"  684","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  685","line":"  MinMaxLoc(const result_view_type& value_)"},
{"lineNum":"  686","line":"      : value(value_), references_scalar_v(false) {}"},
{"lineNum":"  687","line":""},
{"lineNum":"  688","line":"  // Required"},
{"lineNum":"  689","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  690","line":"  void join(value_type& dest, const value_type& src) const {"},
{"lineNum":"  691","line":"    if (src.min_val < dest.min_val) {"},
{"lineNum":"  692","line":"      dest.min_val = src.min_val;"},
{"lineNum":"  693","line":"      dest.min_loc = src.min_loc;"},
{"lineNum":"  694","line":"    }"},
{"lineNum":"  695","line":"    if (src.max_val > dest.max_val) {"},
{"lineNum":"  696","line":"      dest.max_val = src.max_val;"},
{"lineNum":"  697","line":"      dest.max_loc = src.max_loc;"},
{"lineNum":"  698","line":"    }"},
{"lineNum":"  699","line":"  }"},
{"lineNum":"  700","line":""},
{"lineNum":"  701","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  702","line":"  void join(volatile value_type& dest, const volatile value_type& src) const {"},
{"lineNum":"  703","line":"    if (src.min_val < dest.min_val) {"},
{"lineNum":"  704","line":"      dest.min_val = src.min_val;"},
{"lineNum":"  705","line":"      dest.min_loc = src.min_loc;"},
{"lineNum":"  706","line":"    }"},
{"lineNum":"  707","line":"    if (src.max_val > dest.max_val) {"},
{"lineNum":"  708","line":"      dest.max_val = src.max_val;"},
{"lineNum":"  709","line":"      dest.max_loc = src.max_loc;"},
{"lineNum":"  710","line":"    }"},
{"lineNum":"  711","line":"  }"},
{"lineNum":"  712","line":""},
{"lineNum":"  713","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  714","line":"  void init(value_type& val) const {"},
{"lineNum":"  715","line":"    val.max_val = reduction_identity<scalar_type>::max();"},
{"lineNum":"  716","line":"    val.min_val = reduction_identity<scalar_type>::min();"},
{"lineNum":"  717","line":"    val.max_loc = reduction_identity<index_type>::min();"},
{"lineNum":"  718","line":"    val.min_loc = reduction_identity<index_type>::min();"},
{"lineNum":"  719","line":"  }"},
{"lineNum":"  720","line":""},
{"lineNum":"  721","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  722","line":"  value_type& reference() const { return *value.data(); }"},
{"lineNum":"  723","line":""},
{"lineNum":"  724","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  725","line":"  result_view_type view() const { return value; }"},
{"lineNum":"  726","line":""},
{"lineNum":"  727","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  728","line":"  bool references_scalar() const { return references_scalar_v; }"},
{"lineNum":"  729","line":"};"},
{"lineNum":"  730","line":"}  // namespace Kokkos"},
{"lineNum":"  731","line":"namespace Kokkos {"},
{"lineNum":"  732","line":"namespace Impl {"},
{"lineNum":"  733","line":""},
{"lineNum":"  734","line":"template <class T, class ReturnType, class ValueTraits>"},
{"lineNum":"  735","line":"struct ParallelReduceReturnValue;"},
{"lineNum":"  736","line":""},
{"lineNum":"  737","line":"template <class ReturnType, class FunctorType>"},
{"lineNum":"  738","line":"struct ParallelReduceReturnValue<"},
{"lineNum":"  739","line":"    typename std::enable_if<Kokkos::is_view<ReturnType>::value>::type,"},
{"lineNum":"  740","line":"    ReturnType, FunctorType> {"},
{"lineNum":"  741","line":"  using return_type  = ReturnType;"},
{"lineNum":"  742","line":"  using reducer_type = InvalidType;"},
{"lineNum":"  743","line":""},
{"lineNum":"  744","line":"  using value_type_scalar = typename return_type::value_type;"},
{"lineNum":"  745","line":"  using value_type_array  = typename return_type::value_type* const;"},
{"lineNum":"  746","line":""},
{"lineNum":"  747","line":"  using value_type = std::conditional_t<return_type::rank == 0,"},
{"lineNum":"  748","line":"                                        value_type_scalar, value_type_array>;"},
{"lineNum":"  749","line":""},
{"lineNum":"  750","line":"  static return_type& return_value(ReturnType& return_val, const FunctorType&) {"},
{"lineNum":"  751","line":"    return return_val;"},
{"lineNum":"  752","line":"  }"},
{"lineNum":"  753","line":"};"},
{"lineNum":"  754","line":""},
{"lineNum":"  755","line":"template <class ReturnType, class FunctorType>"},
{"lineNum":"  756","line":"struct ParallelReduceReturnValue<"},
{"lineNum":"  757","line":"    typename std::enable_if<!Kokkos::is_view<ReturnType>::value &&"},
{"lineNum":"  758","line":"                            (!std::is_array<ReturnType>::value &&"},
{"lineNum":"  759","line":"                             !std::is_pointer<ReturnType>::value) &&"},
{"lineNum":"  760","line":"                            !Kokkos::is_reducer_type<ReturnType>::value>::type,"},
{"lineNum":"  761","line":"    ReturnType, FunctorType> {"},
{"lineNum":"  762","line":"  using return_type ="},
{"lineNum":"  763","line":"      Kokkos::View<ReturnType, Kokkos::HostSpace, Kokkos::MemoryUnmanaged>;"},
{"lineNum":"  764","line":""},
{"lineNum":"  765","line":"  using reducer_type = InvalidType;"},
{"lineNum":"  766","line":""},
{"lineNum":"  767","line":"  using value_type = typename return_type::value_type;"},
{"lineNum":"  768","line":""},
{"lineNum":"  769","line":"  static return_type return_value(ReturnType& return_val, const FunctorType&) {"},
{"lineNum":"  770","line":"    return return_type(&return_val);"},
{"lineNum":"  771","line":"  }"},
{"lineNum":"  772","line":"};"},
{"lineNum":"  773","line":""},
{"lineNum":"  774","line":"template <class ReturnType, class FunctorType>"},
{"lineNum":"  775","line":"struct ParallelReduceReturnValue<"},
{"lineNum":"  776","line":"    typename std::enable_if<(std::is_array<ReturnType>::value ||"},
{"lineNum":"  777","line":"                             std::is_pointer<ReturnType>::value)>::type,"},
{"lineNum":"  778","line":"    ReturnType, FunctorType> {"},
{"lineNum":"  779","line":"  using return_type = Kokkos::View<typename std::remove_const<ReturnType>::type,"},
{"lineNum":"  780","line":"                                   Kokkos::HostSpace, Kokkos::MemoryUnmanaged>;"},
{"lineNum":"  781","line":""},
{"lineNum":"  782","line":"  using reducer_type = InvalidType;"},
{"lineNum":"  783","line":""},
{"lineNum":"  784","line":"  using value_type = typename return_type::value_type[];"},
{"lineNum":"  785","line":""},
{"lineNum":"  786","line":"  static return_type return_value(ReturnType& return_val,"},
{"lineNum":"  787","line":"                                  const FunctorType& functor) {"},
{"lineNum":"  788","line":"    if (std::is_array<ReturnType>::value)"},
{"lineNum":"  789","line":"      return return_type(return_val);"},
{"lineNum":"  790","line":"    else"},
{"lineNum":"  791","line":"      return return_type(return_val, functor.value_count);","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  792","line":"  }"},
{"lineNum":"  793","line":"};"},
{"lineNum":"  794","line":""},
{"lineNum":"  795","line":"template <class ReturnType, class FunctorType>"},
{"lineNum":"  796","line":"struct ParallelReduceReturnValue<"},
{"lineNum":"  797","line":"    typename std::enable_if<Kokkos::is_reducer_type<ReturnType>::value>::type,"},
{"lineNum":"  798","line":"    ReturnType, FunctorType> {"},
{"lineNum":"  799","line":"  using return_type  = ReturnType;"},
{"lineNum":"  800","line":"  using reducer_type = ReturnType;"},
{"lineNum":"  801","line":"  using value_type   = typename return_type::value_type;"},
{"lineNum":"  802","line":""},
{"lineNum":"  803","line":"  static return_type return_value(ReturnType& return_val, const FunctorType&) {"},
{"lineNum":"  804","line":"    return return_val;"},
{"lineNum":"  805","line":"  }"},
{"lineNum":"  806","line":"};"},
{"lineNum":"  807","line":""},
{"lineNum":"  808","line":"template <class T, class ReturnType, class FunctorType>"},
{"lineNum":"  809","line":"struct ParallelReducePolicyType;"},
{"lineNum":"  810","line":""},
{"lineNum":"  811","line":"template <class PolicyType, class FunctorType>"},
{"lineNum":"  812","line":"struct ParallelReducePolicyType<"},
{"lineNum":"  813","line":"    typename std::enable_if<"},
{"lineNum":"  814","line":"        Kokkos::Impl::is_execution_policy<PolicyType>::value>::type,"},
{"lineNum":"  815","line":"    PolicyType, FunctorType> {"},
{"lineNum":"  816","line":"  using policy_type = PolicyType;"},
{"lineNum":"  817","line":"  static PolicyType policy(const PolicyType& policy_) { return policy_; }"},
{"lineNum":"  818","line":"};"},
{"lineNum":"  819","line":""},
{"lineNum":"  820","line":"template <class PolicyType, class FunctorType>"},
{"lineNum":"  821","line":"struct ParallelReducePolicyType<"},
{"lineNum":"  822","line":"    typename std::enable_if<std::is_integral<PolicyType>::value>::type,"},
{"lineNum":"  823","line":"    PolicyType, FunctorType> {"},
{"lineNum":"  824","line":"  using execution_space ="},
{"lineNum":"  825","line":"      typename Impl::FunctorPolicyExecutionSpace<FunctorType,"},
{"lineNum":"  826","line":"                                                 void>::execution_space;"},
{"lineNum":"  827","line":""},
{"lineNum":"  828","line":"  using policy_type = Kokkos::RangePolicy<execution_space>;"},
{"lineNum":"  829","line":""},
{"lineNum":"  830","line":"  static policy_type policy(const PolicyType& policy_) {"},
{"lineNum":"  831","line":"    return policy_type(0, policy_);"},
{"lineNum":"  832","line":"  }"},
{"lineNum":"  833","line":"};"},
{"lineNum":"  834","line":""},
{"lineNum":"  835","line":"template <class FunctorType, class ExecPolicy, class ValueType,"},
{"lineNum":"  836","line":"          class ExecutionSpace>"},
{"lineNum":"  837","line":"struct ParallelReduceFunctorType {"},
{"lineNum":"  838","line":"  using functor_type = FunctorType;"},
{"lineNum":"  839","line":"  static const functor_type& functor(const functor_type& functor) {"},
{"lineNum":"  840","line":"    return functor;"},
{"lineNum":"  841","line":"  }"},
{"lineNum":"  842","line":"};"},
{"lineNum":"  843","line":""},
{"lineNum":"  844","line":"template <class PolicyType, class FunctorType, class ReturnType>"},
{"lineNum":"  845","line":"struct ParallelReduceAdaptor {"},
{"lineNum":"  846","line":"  using return_value_adapter ="},
{"lineNum":"  847","line":"      Impl::ParallelReduceReturnValue<void, ReturnType, FunctorType>;"},
{"lineNum":"  848","line":"#ifdef KOKKOS_IMPL_NEED_FUNCTOR_WRAPPER"},
{"lineNum":"  849","line":"  using functor_adaptor ="},
{"lineNum":"  850","line":"      Impl::ParallelReduceFunctorType<FunctorType, PolicyType,"},
{"lineNum":"  851","line":"                                      typename return_value_adapter::value_type,"},
{"lineNum":"  852","line":"                                      typename PolicyType::execution_space>;"},
{"lineNum":"  853","line":"#endif"},
{"lineNum":"  854","line":"  static inline void execute(const std::string& label, const PolicyType& policy,"},
{"lineNum":"  855","line":"                             const FunctorType& functor,"},
{"lineNum":"  856","line":"                             ReturnType& return_value) {","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  857","line":"    uint64_t kpID = 0;","class":"lineNoCov","hits":"0","possible_hits":"17",},
{"lineNum":"  858","line":""},
{"lineNum":"  859","line":"    PolicyType inner_policy = policy;","class":"lineNoCov","hits":"0","possible_hits":"17",},
{"lineNum":"  860","line":"    Kokkos::Tools::Impl::begin_parallel_reduce<","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  861","line":"        typename return_value_adapter::reducer_type>(inner_policy, functor,"},
{"lineNum":"  862","line":"                                                     label, kpID);"},
{"lineNum":"  863","line":""},
{"lineNum":"  864","line":"    Kokkos::Impl::shared_allocation_tracking_disable();"},
{"lineNum":"  865","line":"#ifdef KOKKOS_IMPL_NEED_FUNCTOR_WRAPPER"},
{"lineNum":"  866","line":"    Impl::ParallelReduce<typename functor_adaptor::functor_type, PolicyType,"},
{"lineNum":"  867","line":"                         typename return_value_adapter::reducer_type>"},
{"lineNum":"  868","line":"        closure(functor_adaptor::functor(functor), inner_policy,"},
{"lineNum":"  869","line":"                return_value_adapter::return_value(return_value, functor));"},
{"lineNum":"  870","line":"#else"},
{"lineNum":"  871","line":"    Impl::ParallelReduce<FunctorType, PolicyType,"},
{"lineNum":"  872","line":"                         typename return_value_adapter::reducer_type>"},
{"lineNum":"  873","line":"        closure(functor, inner_policy,","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  874","line":"                return_value_adapter::return_value(return_value, functor));"},
{"lineNum":"  875","line":"#endif"},
{"lineNum":"  876","line":"    Kokkos::Impl::shared_allocation_tracking_enable();"},
{"lineNum":"  877","line":"    closure.execute();","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  878","line":""},
{"lineNum":"  879","line":"    Kokkos::Tools::Impl::end_parallel_reduce<"},
{"lineNum":"  880","line":"        typename return_value_adapter::reducer_type>(inner_policy, functor,"},
{"lineNum":"  881","line":"                                                     label, kpID);"},
{"lineNum":"  882","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  883","line":"};"},
{"lineNum":"  884","line":"}  // namespace Impl"},
{"lineNum":"  885","line":""},
{"lineNum":"  886","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  887","line":""},
{"lineNum":"  888","line":"/*! \\fn void parallel_reduce(label,policy,functor,return_argument)"},
{"lineNum":"  889","line":"    \\brief Perform a parallel reduction."},
{"lineNum":"  890","line":"    \\param label An optional Label giving the call name. Must be able to"},
{"lineNum":"  891","line":"   construct a std::string from the argument. \\param policy A Kokkos Execution"},
{"lineNum":"  892","line":"   Policy, such as an integer, a RangePolicy or a TeamPolicy. \\param functor A"},
{"lineNum":"  893","line":"   functor with a reduction operator, and optional init, join and final"},
{"lineNum":"  894","line":"   functions. \\param return_argument A return argument which can be a scalar, a"},
{"lineNum":"  895","line":"   View, or a ReducerStruct. This argument can be left out if the functor has a"},
{"lineNum":"  896","line":"   final function."},
{"lineNum":"  897","line":"*/"},
{"lineNum":"  898","line":""},
{"lineNum":"  899","line":"// Parallel Reduce Blocking behavior"},
{"lineNum":"  900","line":""},
{"lineNum":"  901","line":"namespace Impl {"},
{"lineNum":"  902","line":"template <typename T>"},
{"lineNum":"  903","line":"struct ReducerHasTestReferenceFunction {"},
{"lineNum":"  904","line":"  template <typename E>"},
{"lineNum":"  905","line":"  static std::true_type test_func(decltype(&E::references_scalar));"},
{"lineNum":"  906","line":"  template <typename E>"},
{"lineNum":"  907","line":"  static std::false_type test_func(...);"},
{"lineNum":"  908","line":""},
{"lineNum":"  909","line":"  enum {"},
{"lineNum":"  910","line":"    value = std::is_same<std::true_type, decltype(test_func<T>(nullptr))>::value"},
{"lineNum":"  911","line":"  };"},
{"lineNum":"  912","line":"};"},
{"lineNum":"  913","line":""},
{"lineNum":"  914","line":"template <class ExecutionSpace, class Arg>"},
{"lineNum":"  915","line":"constexpr std::enable_if_t<"},
{"lineNum":"  916","line":"    // constraints only necessary because SFINAE lacks subsumption"},
{"lineNum":"  917","line":"    !ReducerHasTestReferenceFunction<Arg>::value &&"},
{"lineNum":"  918","line":"        !Kokkos::is_view<Arg>::value,"},
{"lineNum":"  919","line":"    // return type:"},
{"lineNum":"  920","line":"    bool>"},
{"lineNum":"  921","line":"parallel_reduce_needs_fence(ExecutionSpace const&, Arg const&) {"},
{"lineNum":"  922","line":"  return true;"},
{"lineNum":"  923","line":"}"},
{"lineNum":"  924","line":""},
{"lineNum":"  925","line":"template <class ExecutionSpace, class Reducer>"},
{"lineNum":"  926","line":"constexpr std::enable_if_t<"},
{"lineNum":"  927","line":"    // equivalent to:"},
{"lineNum":"  928","line":"    // (requires (Reducer const& r) {"},
{"lineNum":"  929","line":"    //   { reducer.references_scalar() } -> std::convertible_to<bool>;"},
{"lineNum":"  930","line":"    // })"},
{"lineNum":"  931","line":"    ReducerHasTestReferenceFunction<Reducer>::value,"},
{"lineNum":"  932","line":"    // return type:"},
{"lineNum":"  933","line":"    bool>"},
{"lineNum":"  934","line":"parallel_reduce_needs_fence(ExecutionSpace const&, Reducer const& reducer) {"},
{"lineNum":"  935","line":"  return reducer.references_scalar();"},
{"lineNum":"  936","line":"}"},
{"lineNum":"  937","line":""},
{"lineNum":"  938","line":"template <class ExecutionSpace, class ViewLike>"},
{"lineNum":"  939","line":"constexpr std::enable_if_t<"},
{"lineNum":"  940","line":"    // requires Kokkos::ViewLike<ViewLike>"},
{"lineNum":"  941","line":"    Kokkos::is_view<ViewLike>::value,"},
{"lineNum":"  942","line":"    // return type:"},
{"lineNum":"  943","line":"    bool>"},
{"lineNum":"  944","line":"parallel_reduce_needs_fence(ExecutionSpace const&, ViewLike const&) {"},
{"lineNum":"  945","line":"  return false;"},
{"lineNum":"  946","line":"}"},
{"lineNum":"  947","line":""},
{"lineNum":"  948","line":"template <class ExecutionSpace, class... Args>"},
{"lineNum":"  949","line":"struct ParallelReduceFence {"},
{"lineNum":"  950","line":"  template <class... ArgsDeduced>"},
{"lineNum":"  951","line":"  static void fence(const ExecutionSpace& ex, ArgsDeduced&&... args) {"},
{"lineNum":"  952","line":"    if (Impl::parallel_reduce_needs_fence(ex, (ArgsDeduced &&) args...)) {"},
{"lineNum":"  953","line":"      ex.fence();","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"  954","line":"    }"},
{"lineNum":"  955","line":"  }"},
{"lineNum":"  956","line":"};"},
{"lineNum":"  957","line":""},
{"lineNum":"  958","line":"}  // namespace Impl"},
{"lineNum":"  959","line":""},
{"lineNum":"  960","line":"/** \\brief  Parallel reduction"},
{"lineNum":"  961","line":" *"},
{"lineNum":"  962","line":" * parallel_reduce performs parallel reductions with arbitrary functions - i.e."},
{"lineNum":"  963","line":" * it is not solely data based. The call expects up to 4 arguments:"},
{"lineNum":"  964","line":" *"},
{"lineNum":"  965","line":" *"},
{"lineNum":"  966","line":" * Example of a parallel_reduce functor for a POD (plain old data) value type:"},
{"lineNum":"  967","line":" * \\code"},
{"lineNum":"  968","line":" *  class FunctorType { // For POD value type"},
{"lineNum":"  969","line":" *  public:"},
{"lineNum":"  970","line":" *    using execution_space = ...;"},
{"lineNum":"  971","line":" *    using value_type = <podType>;"},
{"lineNum":"  972","line":" *    void operator()( <intType> iwork , <podType> & update ) const ;"},
{"lineNum":"  973","line":" *    void init( <podType> & update ) const ;"},
{"lineNum":"  974","line":" *    void join( volatile       <podType> & update ,"},
{"lineNum":"  975","line":" *               volatile const <podType> & input ) const ;"},
{"lineNum":"  976","line":" *"},
{"lineNum":"  977","line":" *    using has_final = true_type;"},
{"lineNum":"  978","line":" *    void final( <podType> & update ) const ;"},
{"lineNum":"  979","line":" *  };"},
{"lineNum":"  980","line":" * \\endcode"},
{"lineNum":"  981","line":" *"},
{"lineNum":"  982","line":" * Example of a parallel_reduce functor for an array of POD (plain old data)"},
{"lineNum":"  983","line":" * values:"},
{"lineNum":"  984","line":" * \\code"},
{"lineNum":"  985","line":" *  class FunctorType { // For array of POD value"},
{"lineNum":"  986","line":" *  public:"},
{"lineNum":"  987","line":" *    using execution_space = ...;"},
{"lineNum":"  988","line":" *    using value_type = <podType>[];"},
{"lineNum":"  989","line":" *    void operator()( <intType> , <podType> update[] ) const ;"},
{"lineNum":"  990","line":" *    void init( <podType> update[] ) const ;"},
{"lineNum":"  991","line":" *    void join( volatile       <podType> update[] ,"},
{"lineNum":"  992","line":" *               volatile const <podType> input[] ) const ;"},
{"lineNum":"  993","line":" *"},
{"lineNum":"  994","line":" *    using has_final = true_type;"},
{"lineNum":"  995","line":" *    void final( <podType> update[] ) const ;"},
{"lineNum":"  996","line":" *  };"},
{"lineNum":"  997","line":" * \\endcode"},
{"lineNum":"  998","line":" */"},
{"lineNum":"  999","line":""},
{"lineNum":" 1000","line":"// ReturnValue is scalar or array: take by reference"},
{"lineNum":" 1001","line":""},
{"lineNum":" 1002","line":"template <class PolicyType, class FunctorType, class ReturnType>"},
{"lineNum":" 1003","line":"inline typename std::enable_if<"},
{"lineNum":" 1004","line":"    Kokkos::Impl::is_execution_policy<PolicyType>::value>::type"},
{"lineNum":" 1005","line":"parallel_reduce(const std::string& label, const PolicyType& policy,"},
{"lineNum":" 1006","line":"                const FunctorType& functor, ReturnType& return_value) {"},
{"lineNum":" 1007","line":"  Impl::ParallelReduceAdaptor<PolicyType, FunctorType, ReturnType>::execute("},
{"lineNum":" 1008","line":"      label, policy, functor, return_value);"},
{"lineNum":" 1009","line":"  Impl::ParallelReduceFence<typename PolicyType::execution_space,"},
{"lineNum":" 1010","line":"                            ReturnType>::fence(policy.space(), return_value);"},
{"lineNum":" 1011","line":"}"},
{"lineNum":" 1012","line":""},
{"lineNum":" 1013","line":"template <class PolicyType, class FunctorType, class ReturnType>"},
{"lineNum":" 1014","line":"inline typename std::enable_if<"},
{"lineNum":" 1015","line":"    Kokkos::Impl::is_execution_policy<PolicyType>::value>::type"},
{"lineNum":" 1016","line":"parallel_reduce(const PolicyType& policy, const FunctorType& functor,"},
{"lineNum":" 1017","line":"                ReturnType& return_value) {"},
{"lineNum":" 1018","line":"  Impl::ParallelReduceAdaptor<PolicyType, FunctorType, ReturnType>::execute("},
{"lineNum":" 1019","line":"      \"\", policy, functor, return_value);"},
{"lineNum":" 1020","line":"  Impl::ParallelReduceFence<typename PolicyType::execution_space,"},
{"lineNum":" 1021","line":"                            ReturnType>::fence(policy.space(), return_value);"},
{"lineNum":" 1022","line":"}"},
{"lineNum":" 1023","line":""},
{"lineNum":" 1024","line":"template <class FunctorType, class ReturnType>"},
{"lineNum":" 1025","line":"inline void parallel_reduce(const size_t& policy, const FunctorType& functor,"},
{"lineNum":" 1026","line":"                            ReturnType& return_value) {"},
{"lineNum":" 1027","line":"  using policy_type ="},
{"lineNum":" 1028","line":"      typename Impl::ParallelReducePolicyType<void, size_t,"},
{"lineNum":" 1029","line":"                                              FunctorType>::policy_type;"},
{"lineNum":" 1030","line":"  Impl::ParallelReduceAdaptor<policy_type, FunctorType, ReturnType>::execute(","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1031","line":"      \"\", policy_type(0, policy), functor, return_value);","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":" 1032","line":"  Impl::ParallelReduceFence<typename policy_type::execution_space, ReturnType>::"},
{"lineNum":" 1033","line":"      fence(typename policy_type::execution_space(), return_value);"},
{"lineNum":" 1034","line":"}"},
{"lineNum":" 1035","line":""},
{"lineNum":" 1036","line":"template <class FunctorType, class ReturnType>"},
{"lineNum":" 1037","line":"inline void parallel_reduce(const std::string& label, const size_t& policy,"},
{"lineNum":" 1038","line":"                            const FunctorType& functor,"},
{"lineNum":" 1039","line":"                            ReturnType& return_value) {"},
{"lineNum":" 1040","line":"  using policy_type ="},
{"lineNum":" 1041","line":"      typename Impl::ParallelReducePolicyType<void, size_t,"},
{"lineNum":" 1042","line":"                                              FunctorType>::policy_type;"},
{"lineNum":" 1043","line":"  Impl::ParallelReduceAdaptor<policy_type, FunctorType, ReturnType>::execute(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1044","line":"      label, policy_type(0, policy), functor, return_value);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1045","line":"  Impl::ParallelReduceFence<typename policy_type::execution_space, ReturnType>::"},
{"lineNum":" 1046","line":"      fence(typename policy_type::execution_space(), return_value);"},
{"lineNum":" 1047","line":"}"},
{"lineNum":" 1048","line":""},
{"lineNum":" 1049","line":"// ReturnValue as View or Reducer: take by copy to allow for inline construction"},
{"lineNum":" 1050","line":""},
{"lineNum":" 1051","line":"template <class PolicyType, class FunctorType, class ReturnType>"},
{"lineNum":" 1052","line":"inline typename std::enable_if<"},
{"lineNum":" 1053","line":"    Kokkos::Impl::is_execution_policy<PolicyType>::value>::type"},
{"lineNum":" 1054","line":"parallel_reduce(const std::string& label, const PolicyType& policy,"},
{"lineNum":" 1055","line":"                const FunctorType& functor, const ReturnType& return_value) {"},
{"lineNum":" 1056","line":"  ReturnType return_value_impl = return_value;"},
{"lineNum":" 1057","line":"  Impl::ParallelReduceAdaptor<PolicyType, FunctorType, ReturnType>::execute("},
{"lineNum":" 1058","line":"      label, policy, functor, return_value_impl);"},
{"lineNum":" 1059","line":"  Impl::ParallelReduceFence<typename PolicyType::execution_space,"},
{"lineNum":" 1060","line":"                            ReturnType>::fence(policy.space(), return_value);"},
{"lineNum":" 1061","line":"}"},
{"lineNum":" 1062","line":""},
{"lineNum":" 1063","line":"template <class PolicyType, class FunctorType, class ReturnType>"},
{"lineNum":" 1064","line":"inline typename std::enable_if<"},
{"lineNum":" 1065","line":"    Kokkos::Impl::is_execution_policy<PolicyType>::value>::type"},
{"lineNum":" 1066","line":"parallel_reduce(const PolicyType& policy, const FunctorType& functor,"},
{"lineNum":" 1067","line":"                const ReturnType& return_value) {"},
{"lineNum":" 1068","line":"  ReturnType return_value_impl = return_value;"},
{"lineNum":" 1069","line":"  Impl::ParallelReduceAdaptor<PolicyType, FunctorType, ReturnType>::execute("},
{"lineNum":" 1070","line":"      \"\", policy, functor, return_value_impl);"},
{"lineNum":" 1071","line":"  Impl::ParallelReduceFence<typename PolicyType::execution_space,"},
{"lineNum":" 1072","line":"                            ReturnType>::fence(policy.space(), return_value);"},
{"lineNum":" 1073","line":"}"},
{"lineNum":" 1074","line":""},
{"lineNum":" 1075","line":"template <class FunctorType, class ReturnType>"},
{"lineNum":" 1076","line":"inline void parallel_reduce(const size_t& policy, const FunctorType& functor,"},
{"lineNum":" 1077","line":"                            const ReturnType& return_value) {"},
{"lineNum":" 1078","line":"  using policy_type ="},
{"lineNum":" 1079","line":"      typename Impl::ParallelReducePolicyType<void, size_t,"},
{"lineNum":" 1080","line":"                                              FunctorType>::policy_type;"},
{"lineNum":" 1081","line":"  ReturnType return_value_impl = return_value;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1082","line":"  Impl::ParallelReduceAdaptor<policy_type, FunctorType, ReturnType>::execute(","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1083","line":"      \"\", policy_type(0, policy), functor, return_value_impl);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1084","line":"  Impl::ParallelReduceFence<typename policy_type::execution_space, ReturnType>::"},
{"lineNum":" 1085","line":"      fence(typename policy_type::execution_space(), return_value);"},
{"lineNum":" 1086","line":"}"},
{"lineNum":" 1087","line":""},
{"lineNum":" 1088","line":"template <class FunctorType, class ReturnType>"},
{"lineNum":" 1089","line":"inline void parallel_reduce(const std::string& label, const size_t& policy,"},
{"lineNum":" 1090","line":"                            const FunctorType& functor,"},
{"lineNum":" 1091","line":"                            const ReturnType& return_value) {"},
{"lineNum":" 1092","line":"  using policy_type ="},
{"lineNum":" 1093","line":"      typename Impl::ParallelReducePolicyType<void, size_t,"},
{"lineNum":" 1094","line":"                                              FunctorType>::policy_type;"},
{"lineNum":" 1095","line":"  ReturnType return_value_impl = return_value;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1096","line":"  Impl::ParallelReduceAdaptor<policy_type, FunctorType, ReturnType>::execute(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1097","line":"      label, policy_type(0, policy), functor, return_value_impl);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1098","line":"  Impl::ParallelReduceFence<typename policy_type::execution_space, ReturnType>::"},
{"lineNum":" 1099","line":"      fence(typename policy_type::execution_space(), return_value);"},
{"lineNum":" 1100","line":"}"},
{"lineNum":" 1101","line":""},
{"lineNum":" 1102","line":"// No Return Argument"},
{"lineNum":" 1103","line":""},
{"lineNum":" 1104","line":"template <class PolicyType, class FunctorType>"},
{"lineNum":" 1105","line":"inline void parallel_reduce("},
{"lineNum":" 1106","line":"    const std::string& label, const PolicyType& policy,"},
{"lineNum":" 1107","line":"    const FunctorType& functor,"},
{"lineNum":" 1108","line":"    typename std::enable_if<"},
{"lineNum":" 1109","line":"        Kokkos::Impl::is_execution_policy<PolicyType>::value>::type* ="},
{"lineNum":" 1110","line":"        nullptr) {"},
{"lineNum":" 1111","line":"  using ValueTraits = Kokkos::Impl::FunctorValueTraits<FunctorType, void>;"},
{"lineNum":" 1112","line":"  using value_type  = std::conditional_t<(ValueTraits::StaticValueSize != 0),"},
{"lineNum":" 1113","line":"                                        typename ValueTraits::value_type,"},
{"lineNum":" 1114","line":"                                        typename ValueTraits::pointer_type>;"},
{"lineNum":" 1115","line":""},
{"lineNum":" 1116","line":"  static_assert("},
{"lineNum":" 1117","line":"      Impl::FunctorAnalysis<Impl::FunctorPatternInterface::REDUCE, PolicyType,"},
{"lineNum":" 1118","line":"                            FunctorType>::has_final_member_function,"},
{"lineNum":" 1119","line":"      \"Calling parallel_reduce without either return value or final function.\");"},
{"lineNum":" 1120","line":""},
{"lineNum":" 1121","line":"  using result_view_type ="},
{"lineNum":" 1122","line":"      Kokkos::View<value_type, Kokkos::HostSpace, Kokkos::MemoryUnmanaged>;"},
{"lineNum":" 1123","line":"  result_view_type result_view;"},
{"lineNum":" 1124","line":""},
{"lineNum":" 1125","line":"  Impl::ParallelReduceAdaptor<PolicyType, FunctorType,"},
{"lineNum":" 1126","line":"                              result_view_type>::execute(label, policy, functor,"},
{"lineNum":" 1127","line":"                                                         result_view);"},
{"lineNum":" 1128","line":"}"},
{"lineNum":" 1129","line":""},
{"lineNum":" 1130","line":"template <class PolicyType, class FunctorType>"},
{"lineNum":" 1131","line":"inline void parallel_reduce("},
{"lineNum":" 1132","line":"    const PolicyType& policy, const FunctorType& functor,"},
{"lineNum":" 1133","line":"    typename std::enable_if<"},
{"lineNum":" 1134","line":"        Kokkos::Impl::is_execution_policy<PolicyType>::value>::type* ="},
{"lineNum":" 1135","line":"        nullptr) {"},
{"lineNum":" 1136","line":"  using ValueTraits = Kokkos::Impl::FunctorValueTraits<FunctorType, void>;"},
{"lineNum":" 1137","line":"  using value_type  = std::conditional_t<(ValueTraits::StaticValueSize != 0),"},
{"lineNum":" 1138","line":"                                        typename ValueTraits::value_type,"},
{"lineNum":" 1139","line":"                                        typename ValueTraits::pointer_type>;"},
{"lineNum":" 1140","line":""},
{"lineNum":" 1141","line":"  static_assert("},
{"lineNum":" 1142","line":"      Impl::FunctorAnalysis<Impl::FunctorPatternInterface::REDUCE, PolicyType,"},
{"lineNum":" 1143","line":"                            FunctorType>::has_final_member_function,"},
{"lineNum":" 1144","line":"      \"Calling parallel_reduce without either return value or final function.\");"},
{"lineNum":" 1145","line":""},
{"lineNum":" 1146","line":"  using result_view_type ="},
{"lineNum":" 1147","line":"      Kokkos::View<value_type, Kokkos::HostSpace, Kokkos::MemoryUnmanaged>;"},
{"lineNum":" 1148","line":"  result_view_type result_view;"},
{"lineNum":" 1149","line":""},
{"lineNum":" 1150","line":"  Impl::ParallelReduceAdaptor<PolicyType, FunctorType,"},
{"lineNum":" 1151","line":"                              result_view_type>::execute(\"\", policy, functor,"},
{"lineNum":" 1152","line":"                                                         result_view);"},
{"lineNum":" 1153","line":"}"},
{"lineNum":" 1154","line":""},
{"lineNum":" 1155","line":"template <class FunctorType>"},
{"lineNum":" 1156","line":"inline void parallel_reduce(const size_t& policy, const FunctorType& functor) {"},
{"lineNum":" 1157","line":"  using policy_type ="},
{"lineNum":" 1158","line":"      typename Impl::ParallelReducePolicyType<void, size_t,"},
{"lineNum":" 1159","line":"                                              FunctorType>::policy_type;"},
{"lineNum":" 1160","line":"  using ValueTraits = Kokkos::Impl::FunctorValueTraits<FunctorType, void>;"},
{"lineNum":" 1161","line":"  using value_type  = std::conditional_t<(ValueTraits::StaticValueSize != 0),"},
{"lineNum":" 1162","line":"                                        typename ValueTraits::value_type,"},
{"lineNum":" 1163","line":"                                        typename ValueTraits::pointer_type>;"},
{"lineNum":" 1164","line":""},
{"lineNum":" 1165","line":"  static_assert("},
{"lineNum":" 1166","line":"      Impl::FunctorAnalysis<Impl::FunctorPatternInterface::REDUCE,"},
{"lineNum":" 1167","line":"                            RangePolicy<>,"},
{"lineNum":" 1168","line":"                            FunctorType>::has_final_member_function,"},
{"lineNum":" 1169","line":"      \"Calling parallel_reduce without either return value or final function.\");"},
{"lineNum":" 1170","line":""},
{"lineNum":" 1171","line":"  using result_view_type ="},
{"lineNum":" 1172","line":"      Kokkos::View<value_type, Kokkos::HostSpace, Kokkos::MemoryUnmanaged>;"},
{"lineNum":" 1173","line":"  result_view_type result_view;"},
{"lineNum":" 1174","line":""},
{"lineNum":" 1175","line":"  Impl::ParallelReduceAdaptor<policy_type, FunctorType,"},
{"lineNum":" 1176","line":"                              result_view_type>::execute(\"\","},
{"lineNum":" 1177","line":"                                                         policy_type(0, policy),"},
{"lineNum":" 1178","line":"                                                         functor, result_view);"},
{"lineNum":" 1179","line":"}"},
{"lineNum":" 1180","line":""},
{"lineNum":" 1181","line":"template <class FunctorType>"},
{"lineNum":" 1182","line":"inline void parallel_reduce(const std::string& label, const size_t& policy,"},
{"lineNum":" 1183","line":"                            const FunctorType& functor) {"},
{"lineNum":" 1184","line":"  using policy_type ="},
{"lineNum":" 1185","line":"      typename Impl::ParallelReducePolicyType<void, size_t,"},
{"lineNum":" 1186","line":"                                              FunctorType>::policy_type;"},
{"lineNum":" 1187","line":"  using ValueTraits = Kokkos::Impl::FunctorValueTraits<FunctorType, void>;"},
{"lineNum":" 1188","line":"  using value_type  = std::conditional_t<(ValueTraits::StaticValueSize != 0),"},
{"lineNum":" 1189","line":"                                        typename ValueTraits::value_type,"},
{"lineNum":" 1190","line":"                                        typename ValueTraits::pointer_type>;"},
{"lineNum":" 1191","line":""},
{"lineNum":" 1192","line":"  static_assert("},
{"lineNum":" 1193","line":"      Impl::FunctorAnalysis<Impl::FunctorPatternInterface::REDUCE,"},
{"lineNum":" 1194","line":"                            RangePolicy<>,"},
{"lineNum":" 1195","line":"                            FunctorType>::has_final_member_function,"},
{"lineNum":" 1196","line":"      \"Calling parallel_reduce without either return value or final function.\");"},
{"lineNum":" 1197","line":""},
{"lineNum":" 1198","line":"  using result_view_type ="},
{"lineNum":" 1199","line":"      Kokkos::View<value_type, Kokkos::HostSpace, Kokkos::MemoryUnmanaged>;"},
{"lineNum":" 1200","line":"  result_view_type result_view;"},
{"lineNum":" 1201","line":""},
{"lineNum":" 1202","line":"  Impl::ParallelReduceAdaptor<policy_type, FunctorType,"},
{"lineNum":" 1203","line":"                              result_view_type>::execute(label,"},
{"lineNum":" 1204","line":"                                                         policy_type(0, policy),"},
{"lineNum":" 1205","line":"                                                         functor, result_view);"},
{"lineNum":" 1206","line":"}"},
{"lineNum":" 1207","line":""},
{"lineNum":" 1208","line":"}  // namespace Kokkos"},
{"lineNum":" 1209","line":""},
{"lineNum":" 1210","line":"#endif  // KOKKOS_PARALLEL_REDUCE_HPP"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 19, "covered" : 0,};
var merged_data = [];
