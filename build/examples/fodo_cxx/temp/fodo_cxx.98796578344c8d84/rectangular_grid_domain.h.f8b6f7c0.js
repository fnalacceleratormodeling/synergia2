var data = {lines:[
{"lineNum":"    1","line":"#ifndef RECTANGULAR_GRID_DOMAIN_H_"},
{"lineNum":"    2","line":"#define RECTANGULAR_GRID_DOMAIN_H_"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#include \"synergia/collective/rectangular_grid.h\""},
{"lineNum":"    5","line":"#include \"synergia/utils/fast_int_floor.h\""},
{"lineNum":"    6","line":"#include <array>"},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"class Rectangular_grid_domain"},
{"lineNum":"    9","line":"{"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"private:"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"    std::array<int,    3> grid_shape;"},
{"lineNum":"   14","line":"    std::array<double, 3> physical_size;"},
{"lineNum":"   15","line":"    std::array<double, 3> physical_offset;"},
{"lineNum":"   16","line":"    std::array<double, 3> left;"},
{"lineNum":"   17","line":"    std::array<double, 3> cell_size;"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"    bool periodic_z;"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"public:"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"    Rectangular_grid_domain("},
{"lineNum":"   24","line":"            std::array<int, 3>    const & grid_shape,"},
{"lineNum":"   25","line":"            std::array<double, 3> const & physical_size,"},
{"lineNum":"   26","line":"            std::array<double, 3> const & physical_offset = {0, 0, 0},"},
{"lineNum":"   27","line":"            bool periodic_z = false )"},
{"lineNum":"   28","line":"    : grid_shape(grid_shape)","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"   29","line":"    , physical_size(physical_size)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   30","line":"    , physical_offset(physical_offset)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   31","line":"    , left {"},
{"lineNum":"   32","line":"        physical_offset[0] - physical_size[0]/2.0,","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"   33","line":"        physical_offset[1] - physical_size[1]/2.0,"},
{"lineNum":"   34","line":"        physical_offset[2] - physical_size[2]/2.0 }","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   35","line":"    , cell_size {"},
{"lineNum":"   36","line":"        physical_size[0] / (1.0 * grid_shape[0]),","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":"   37","line":"        physical_size[1] / (1.0 * grid_shape[1]),"},
{"lineNum":"   38","line":"        physical_size[2] / (1.0 * grid_shape[2]) }","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"   39","line":"    , periodic_z(periodic_z)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   40","line":"    { }"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"    bool is_periodic() const"},
{"lineNum":"   43","line":"    { return periodic_z; }"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"    std::array<double, 3> const & get_physical_size() const"},
{"lineNum":"   46","line":"    { return physical_size; }"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"    std::array<double, 3> const & get_physical_offset() const"},
{"lineNum":"   49","line":"    { return physical_offset; }"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"    std::array<int, 3>    const & get_grid_shape() const"},
{"lineNum":"   52","line":"    { return grid_shape; }"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"    std::array<double, 3> const & get_cell_size() const"},
{"lineNum":"   55","line":"    { return cell_size; }"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"    std::array<double, 3> const & get_left() const"},
{"lineNum":"   58","line":"    { return left; }"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"    Rectangular_grid_2dc make_2dc_grid_xy(bool zero = true) const"},
{"lineNum":"   61","line":"    { return Rectangular_grid_2dc(grid_shape[0], grid_shape[1], zero); }"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"    Rectangular_grid_1d  make_1d_grid_z(bool zero = true) const"},
{"lineNum":"   64","line":"    { return Rectangular_grid_1d(grid_shape[2], zero); }"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"    // returns cell location and fractional offset"},
{"lineNum":"   67","line":"    inline bool get_leftmost_indices_offsets("},
{"lineNum":"   68","line":"            double x, double y, double z,"},
{"lineNum":"   69","line":"            int & ix, int & iy, int & iz,"},
{"lineNum":"   70","line":"            double & offx, double & offy, double & offz) const"},
{"lineNum":"   71","line":"    {"},
{"lineNum":"   72","line":"        bool retval;"},
{"lineNum":"   73","line":"        double scaled_location;"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"        scaled_location = (x - left[0]) / cell_size[0] - 0.5;"},
{"lineNum":"   76","line":"        ix = fast_int_floor(scaled_location);"},
{"lineNum":"   77","line":"        offx = scaled_location - ix;"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"        scaled_location = (y - left[1]) / cell_size[1] - 0.5;"},
{"lineNum":"   80","line":"        iy = fast_int_floor(scaled_location);"},
{"lineNum":"   81","line":"        offy = scaled_location - iy;"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"        scaled_location = (z - left[2]) / cell_size[2] - 0.5;"},
{"lineNum":"   84","line":"        iz = fast_int_floor(scaled_location);"},
{"lineNum":"   85","line":"        offz = scaled_location - iz;"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"        if (grid_shape[2] == 1)"},
{"lineNum":"   88","line":"        {"},
{"lineNum":"   89","line":"            // csp: For grid_shape = 1, iz and offz are not used in deposit"},
{"lineNum":"   90","line":"            //      and interpolation. These are just for the reference."},
{"lineNum":"   91","line":"            //      iz is 0 or 1, so that all particles are in domain, i.e.,"},
{"lineNum":"   92","line":"            //      no cutting edge."},
{"lineNum":"   93","line":"            iz += 1;"},
{"lineNum":"   94","line":"            if (iz == 0) offz = -0.5 + offz;"},
{"lineNum":"   95","line":"            if (iz == 1) offz = 0.5 - offz;"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"            retval = ((ix >= 0) && (ix < grid_shape[0] - 1) && (iy >= 0) &&"},
{"lineNum":"   98","line":"                      (iy < grid_shape[1] - 1)) &&"},
{"lineNum":"   99","line":"                     (periodic_z || ((iz >= 0) && (iz <= grid_shape[2])));"},
{"lineNum":"  100","line":"        }"},
{"lineNum":"  101","line":"        else"},
{"lineNum":"  102","line":"        {"},
{"lineNum":"  103","line":"            retval = ((ix >= 0) && (ix < grid_shape[0] - 1) && (iy >= 0) &&"},
{"lineNum":"  104","line":"                      (iy < grid_shape[1] - 1)) &&"},
{"lineNum":"  105","line":"                     (periodic_z || ((iz >= 0) && (iz < grid_shape[2] - 1)));"},
{"lineNum":"  106","line":"        }"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"        return retval;"},
{"lineNum":"  109","line":"    }"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"    void get_cell_coordinates("},
{"lineNum":"  112","line":"            int ix, int iy, int iz,"},
{"lineNum":"  113","line":"            double & x, double & y, double & z) const"},
{"lineNum":"  114","line":"    {"},
{"lineNum":"  115","line":"        x = left[0] + cell_size[0] * (0.5 + ix);"},
{"lineNum":"  116","line":"        y = left[1] + cell_size[1] * (0.5 + iy);"},
{"lineNum":"  117","line":"        z = left[2] + cell_size[2] * (0.5 + iz);"},
{"lineNum":"  118","line":"    }"},
{"lineNum":"  119","line":"};"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"#endif /* RECTANGULAR_GRID_DOMAIN_EIGEN_H_ */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 8, "covered" : 0,};
var merged_data = [];
