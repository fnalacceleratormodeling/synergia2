var data = {lines:[
{"lineNum":"    1","line":"// -*- C++ -*-"},
{"lineNum":"    2","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions."},
{"lineNum":"    5","line":"// See https://llvm.org/LICENSE.txt for license information."},
{"lineNum":"    6","line":"// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef _LIBCPP___ITERATOR_WRAP_ITER_H"},
{"lineNum":"   11","line":"#define _LIBCPP___ITERATOR_WRAP_ITER_H"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"#include <__config>"},
{"lineNum":"   14","line":"#include <__debug>"},
{"lineNum":"   15","line":"#include <__iterator/iterator_traits.h>"},
{"lineNum":"   16","line":"#include <__memory/pointer_traits.h> // __to_address"},
{"lineNum":"   17","line":"#include <type_traits>"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"},
{"lineNum":"   20","line":"#pragma GCC system_header"},
{"lineNum":"   21","line":"#endif"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"_LIBCPP_PUSH_MACROS"},
{"lineNum":"   24","line":"#include <__undef_macros>"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"_LIBCPP_BEGIN_NAMESPACE_STD"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"template <class _Iter>"},
{"lineNum":"   29","line":"class __wrap_iter"},
{"lineNum":"   30","line":"{"},
{"lineNum":"   31","line":"public:"},
{"lineNum":"   32","line":"    typedef _Iter                                                      iterator_type;"},
{"lineNum":"   33","line":"    typedef typename iterator_traits<iterator_type>::value_type        value_type;"},
{"lineNum":"   34","line":"    typedef typename iterator_traits<iterator_type>::difference_type   difference_type;"},
{"lineNum":"   35","line":"    typedef typename iterator_traits<iterator_type>::pointer           pointer;"},
{"lineNum":"   36","line":"    typedef typename iterator_traits<iterator_type>::reference         reference;"},
{"lineNum":"   37","line":"    typedef typename iterator_traits<iterator_type>::iterator_category iterator_category;"},
{"lineNum":"   38","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":"   39","line":"    typedef contiguous_iterator_tag                                    iterator_concept;"},
{"lineNum":"   40","line":"#endif"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"private:"},
{"lineNum":"   43","line":"    iterator_type __i;"},
{"lineNum":"   44","line":"public:"},
{"lineNum":"   45","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter() _NOEXCEPT"},
{"lineNum":"   46","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":"   47","line":"                : __i{}","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   48","line":"#endif"},
{"lineNum":"   49","line":"    {"},
{"lineNum":"   50","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"   51","line":"        __get_db()->__insert_i(this);"},
{"lineNum":"   52","line":"#endif"},
{"lineNum":"   53","line":"    }"},
{"lineNum":"   54","line":"    template <class _Up> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG"},
{"lineNum":"   55","line":"        __wrap_iter(const __wrap_iter<_Up>& __u,"},
{"lineNum":"   56","line":"            typename enable_if<is_convertible<_Up, iterator_type>::value>::type* = nullptr) _NOEXCEPT"},
{"lineNum":"   57","line":"            : __i(__u.base())"},
{"lineNum":"   58","line":"    {"},
{"lineNum":"   59","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"   60","line":"        __get_db()->__iterator_copy(this, &__u);"},
{"lineNum":"   61","line":"#endif"},
{"lineNum":"   62","line":"    }"},
{"lineNum":"   63","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"   64","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG"},
{"lineNum":"   65","line":"    __wrap_iter(const __wrap_iter& __x)"},
{"lineNum":"   66","line":"        : __i(__x.base())"},
{"lineNum":"   67","line":"    {"},
{"lineNum":"   68","line":"        __get_db()->__iterator_copy(this, &__x);"},
{"lineNum":"   69","line":"    }"},
{"lineNum":"   70","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG"},
{"lineNum":"   71","line":"    __wrap_iter& operator=(const __wrap_iter& __x)"},
{"lineNum":"   72","line":"    {"},
{"lineNum":"   73","line":"        if (this != &__x)"},
{"lineNum":"   74","line":"        {"},
{"lineNum":"   75","line":"            __get_db()->__iterator_copy(this, &__x);"},
{"lineNum":"   76","line":"            __i = __x.__i;"},
{"lineNum":"   77","line":"        }"},
{"lineNum":"   78","line":"        return *this;"},
{"lineNum":"   79","line":"    }"},
{"lineNum":"   80","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG"},
{"lineNum":"   81","line":"    ~__wrap_iter()"},
{"lineNum":"   82","line":"    {"},
{"lineNum":"   83","line":"        __get_db()->__erase_i(this);"},
{"lineNum":"   84","line":"    }"},
{"lineNum":"   85","line":"#endif"},
{"lineNum":"   86","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG reference operator*() const _NOEXCEPT"},
{"lineNum":"   87","line":"    {"},
{"lineNum":"   88","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"   89","line":"        _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this),"},
{"lineNum":"   90","line":"                       \"Attempted to dereference a non-dereferenceable iterator\");"},
{"lineNum":"   91","line":"#endif"},
{"lineNum":"   92","line":"        return *__i;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   93","line":"    }"},
{"lineNum":"   94","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG pointer  operator->() const _NOEXCEPT"},
{"lineNum":"   95","line":"    {"},
{"lineNum":"   96","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"   97","line":"        _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this),"},
{"lineNum":"   98","line":"                       \"Attempted to dereference a non-dereferenceable iterator\");"},
{"lineNum":"   99","line":"#endif"},
{"lineNum":"  100","line":"        return _VSTD::__to_address(__i);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  101","line":"    }"},
{"lineNum":"  102","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter& operator++() _NOEXCEPT"},
{"lineNum":"  103","line":"    {"},
{"lineNum":"  104","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  105","line":"        _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this),"},
{"lineNum":"  106","line":"                       \"Attempted to increment a non-incrementable iterator\");"},
{"lineNum":"  107","line":"#endif"},
{"lineNum":"  108","line":"        ++__i;","class":"lineNoCov","hits":"0","possible_hits":"492",},
{"lineNum":"  109","line":"        return *this;"},
{"lineNum":"  110","line":"    }"},
{"lineNum":"  111","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter  operator++(int) _NOEXCEPT"},
{"lineNum":"  112","line":"        {__wrap_iter __tmp(*this); ++(*this); return __tmp;}"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter& operator--() _NOEXCEPT"},
{"lineNum":"  115","line":"    {"},
{"lineNum":"  116","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  117","line":"        _LIBCPP_ASSERT(__get_const_db()->__decrementable(this),"},
{"lineNum":"  118","line":"                       \"Attempted to decrement a non-decrementable iterator\");"},
{"lineNum":"  119","line":"#endif"},
{"lineNum":"  120","line":"        --__i;","class":"lineNoCov","hits":"0","possible_hits":"19",},
{"lineNum":"  121","line":"        return *this;"},
{"lineNum":"  122","line":"    }"},
{"lineNum":"  123","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter  operator--(int) _NOEXCEPT"},
{"lineNum":"  124","line":"        {__wrap_iter __tmp(*this); --(*this); return __tmp;}"},
{"lineNum":"  125","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter  operator+ (difference_type __n) const _NOEXCEPT"},
{"lineNum":"  126","line":"        {__wrap_iter __w(*this); __w += __n; return __w;}"},
{"lineNum":"  127","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter& operator+=(difference_type __n) _NOEXCEPT"},
{"lineNum":"  128","line":"    {"},
{"lineNum":"  129","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  130","line":"        _LIBCPP_ASSERT(__get_const_db()->__addable(this, __n),"},
{"lineNum":"  131","line":"                   \"Attempted to add/subtract an iterator outside its valid range\");"},
{"lineNum":"  132","line":"#endif"},
{"lineNum":"  133","line":"        __i += __n;","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"  134","line":"        return *this;"},
{"lineNum":"  135","line":"    }"},
{"lineNum":"  136","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter  operator- (difference_type __n) const _NOEXCEPT"},
{"lineNum":"  137","line":"        {return *this + (-__n);}"},
{"lineNum":"  138","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter& operator-=(difference_type __n) _NOEXCEPT"},
{"lineNum":"  139","line":"        {*this += -__n; return *this;}"},
{"lineNum":"  140","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG reference    operator[](difference_type __n) const _NOEXCEPT"},
{"lineNum":"  141","line":"    {"},
{"lineNum":"  142","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  143","line":"        _LIBCPP_ASSERT(__get_const_db()->__subscriptable(this, __n),"},
{"lineNum":"  144","line":"                   \"Attempted to subscript an iterator outside its valid range\");"},
{"lineNum":"  145","line":"#endif"},
{"lineNum":"  146","line":"        return __i[__n];"},
{"lineNum":"  147","line":"    }"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG iterator_type base() const _NOEXCEPT {return __i;}","class":"lineNoCov","hits":"0","possible_hits":"54",},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"private:"},
{"lineNum":"  152","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  153","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter(const void* __p, iterator_type __x) : __i(__x)"},
{"lineNum":"  154","line":"    {"},
{"lineNum":"  155","line":"        __get_db()->__insert_ic(this, __p);"},
{"lineNum":"  156","line":"    }"},
{"lineNum":"  157","line":"#else"},
{"lineNum":"  158","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter(iterator_type __x) _NOEXCEPT : __i(__x) {}"},
{"lineNum":"  159","line":"#endif"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"    template <class _Up> friend class __wrap_iter;"},
{"lineNum":"  162","line":"    template <class _CharT, class _Traits, class _Alloc> friend class basic_string;"},
{"lineNum":"  163","line":"    template <class _Tp, class _Alloc> friend class _LIBCPP_TEMPLATE_VIS vector;"},
{"lineNum":"  164","line":"    template <class _Tp, size_t> friend class _LIBCPP_TEMPLATE_VIS span;"},
{"lineNum":"  165","line":"};"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"template <class _Iter1>"},
{"lineNum":"  168","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG"},
{"lineNum":"  169","line":"bool operator==(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) _NOEXCEPT"},
{"lineNum":"  170","line":"{"},
{"lineNum":"  171","line":"    return __x.base() == __y.base();","class":"lineNoCov","hits":"0","possible_hits":"1247",},
{"lineNum":"  172","line":"}"},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"template <class _Iter1, class _Iter2>"},
{"lineNum":"  175","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG"},
{"lineNum":"  176","line":"bool operator==(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT"},
{"lineNum":"  177","line":"{"},
{"lineNum":"  178","line":"    return __x.base() == __y.base();","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":"  179","line":"}"},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"template <class _Iter1>"},
{"lineNum":"  182","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG"},
{"lineNum":"  183","line":"bool operator<(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) _NOEXCEPT"},
{"lineNum":"  184","line":"{"},
{"lineNum":"  185","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  186","line":"    _LIBCPP_ASSERT(__get_const_db()->__less_than_comparable(&__x, &__y),"},
{"lineNum":"  187","line":"                   \"Attempted to compare incomparable iterators\");"},
{"lineNum":"  188","line":"#endif"},
{"lineNum":"  189","line":"    return __x.base() < __y.base();"},
{"lineNum":"  190","line":"}"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"template <class _Iter1, class _Iter2>"},
{"lineNum":"  193","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG"},
{"lineNum":"  194","line":"bool operator<(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT"},
{"lineNum":"  195","line":"{"},
{"lineNum":"  196","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  197","line":"    _LIBCPP_ASSERT(__get_const_db()->__less_than_comparable(&__x, &__y),"},
{"lineNum":"  198","line":"                   \"Attempted to compare incomparable iterators\");"},
{"lineNum":"  199","line":"#endif"},
{"lineNum":"  200","line":"    return __x.base() < __y.base();"},
{"lineNum":"  201","line":"}"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"template <class _Iter1>"},
{"lineNum":"  204","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG"},
{"lineNum":"  205","line":"bool operator!=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) _NOEXCEPT"},
{"lineNum":"  206","line":"{"},
{"lineNum":"  207","line":"    return !(__x == __y);"},
{"lineNum":"  208","line":"}"},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"template <class _Iter1, class _Iter2>"},
{"lineNum":"  211","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG"},
{"lineNum":"  212","line":"bool operator!=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT"},
{"lineNum":"  213","line":"{"},
{"lineNum":"  214","line":"    return !(__x == __y);"},
{"lineNum":"  215","line":"}"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"template <class _Iter1>"},
{"lineNum":"  218","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG"},
{"lineNum":"  219","line":"bool operator>(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) _NOEXCEPT"},
{"lineNum":"  220","line":"{"},
{"lineNum":"  221","line":"    return __y < __x;"},
{"lineNum":"  222","line":"}"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"template <class _Iter1, class _Iter2>"},
{"lineNum":"  225","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG"},
{"lineNum":"  226","line":"bool operator>(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT"},
{"lineNum":"  227","line":"{"},
{"lineNum":"  228","line":"    return __y < __x;"},
{"lineNum":"  229","line":"}"},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"template <class _Iter1>"},
{"lineNum":"  232","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG"},
{"lineNum":"  233","line":"bool operator>=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) _NOEXCEPT"},
{"lineNum":"  234","line":"{"},
{"lineNum":"  235","line":"    return !(__x < __y);"},
{"lineNum":"  236","line":"}"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"template <class _Iter1, class _Iter2>"},
{"lineNum":"  239","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG"},
{"lineNum":"  240","line":"bool operator>=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT"},
{"lineNum":"  241","line":"{"},
{"lineNum":"  242","line":"    return !(__x < __y);"},
{"lineNum":"  243","line":"}"},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"template <class _Iter1>"},
{"lineNum":"  246","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG"},
{"lineNum":"  247","line":"bool operator<=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) _NOEXCEPT"},
{"lineNum":"  248","line":"{"},
{"lineNum":"  249","line":"    return !(__y < __x);"},
{"lineNum":"  250","line":"}"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"template <class _Iter1, class _Iter2>"},
{"lineNum":"  253","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG"},
{"lineNum":"  254","line":"bool operator<=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT"},
{"lineNum":"  255","line":"{"},
{"lineNum":"  256","line":"    return !(__y < __x);"},
{"lineNum":"  257","line":"}"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"template <class _Iter1, class _Iter2>"},
{"lineNum":"  260","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG"},
{"lineNum":"  261","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  262","line":"auto operator-(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT"},
{"lineNum":"  263","line":"    -> decltype(__x.base() - __y.base())"},
{"lineNum":"  264","line":"#else"},
{"lineNum":"  265","line":"typename __wrap_iter<_Iter1>::difference_type"},
{"lineNum":"  266","line":"operator-(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT"},
{"lineNum":"  267","line":"#endif // C++03"},
{"lineNum":"  268","line":"{"},
{"lineNum":"  269","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  270","line":"    _LIBCPP_ASSERT(__get_const_db()->__less_than_comparable(&__x, &__y),"},
{"lineNum":"  271","line":"                   \"Attempted to subtract incompatible iterators\");"},
{"lineNum":"  272","line":"#endif"},
{"lineNum":"  273","line":"    return __x.base() - __y.base();","class":"linePartCov","hits":"2","order":"570","possible_hits":"14",},
{"lineNum":"  274","line":"}"},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"template <class _Iter1>"},
{"lineNum":"  277","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG"},
{"lineNum":"  278","line":"__wrap_iter<_Iter1> operator+(typename __wrap_iter<_Iter1>::difference_type __n, __wrap_iter<_Iter1> __x) _NOEXCEPT"},
{"lineNum":"  279","line":"{"},
{"lineNum":"  280","line":"    __x += __n;"},
{"lineNum":"  281","line":"    return __x;"},
{"lineNum":"  282","line":"}"},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"#if _LIBCPP_STD_VER <= 17"},
{"lineNum":"  285","line":"template <class _It>"},
{"lineNum":"  286","line":"struct __is_cpp17_contiguous_iterator<__wrap_iter<_It> > : true_type {};"},
{"lineNum":"  287","line":"#endif"},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"template <class _Iter>"},
{"lineNum":"  290","line":"_LIBCPP_CONSTEXPR"},
{"lineNum":"  291","line":"decltype(_VSTD::__to_address(declval<_Iter>()))"},
{"lineNum":"  292","line":"__to_address(__wrap_iter<_Iter> __w) _NOEXCEPT {"},
{"lineNum":"  293","line":"    return _VSTD::__to_address(__w.base());"},
{"lineNum":"  294","line":"}"},
{"lineNum":"  295","line":""},
{"lineNum":"  296","line":"_LIBCPP_END_NAMESPACE_STD"},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":"_LIBCPP_POP_MACROS"},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"#endif // _LIBCPP___ITERATOR_WRAP_ITER_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 10, "covered" : 1,};
var merged_data = [];
