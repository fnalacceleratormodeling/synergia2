var data = {lines:[
{"lineNum":"    1","line":"/****************************  vectormath_exp.h   ******************************"},
{"lineNum":"    2","line":"* Author:        Agner Fog"},
{"lineNum":"    3","line":"* Date created:  2014-04-18"},
{"lineNum":"    4","line":"* Last modified: 2019-08-01"},
{"lineNum":"    5","line":"* Version:       1.40.00"},
{"lineNum":"    6","line":"* Project:       vector class library"},
{"lineNum":"    7","line":"* Description:"},
{"lineNum":"    8","line":"* Header file containing inline vector functions of logarithms, exponential"},
{"lineNum":"    9","line":"* and power functions:"},
{"lineNum":"   10","line":"* exp         exponential function"},
{"lineNum":"   11","line":"* exp2        exponential function base 2"},
{"lineNum":"   12","line":"* exp10       exponential function base 10"},
{"lineNum":"   13","line":"* exmp1       exponential function minus 1"},
{"lineNum":"   14","line":"* log         natural logarithm"},
{"lineNum":"   15","line":"* log2        logarithm base 2"},
{"lineNum":"   16","line":"* log10       logarithm base 10"},
{"lineNum":"   17","line":"* log1p       natural logarithm of 1+x"},
{"lineNum":"   18","line":"* cbrt        cube root"},
{"lineNum":"   19","line":"* pow         raise vector elements to power"},
{"lineNum":"   20","line":"* pow_ratio   raise vector elements to rational power"},
{"lineNum":"   21","line":"*"},
{"lineNum":"   22","line":"* Theory, methods and inspiration based partially on these sources:"},
{"lineNum":"   23","line":"* > Moshier, Stephen Lloyd Baluk: Methods and programs for mathematical functions."},
{"lineNum":"   24","line":"*   Ellis Horwood, 1989."},
{"lineNum":"   25","line":"* > VDT library developed on CERN by Danilo Piparo, Thomas Hauth and Vincenzo Innocente,"},
{"lineNum":"   26","line":"*   2012, https://root.cern.ch/doc/v606_/md_math_vdt_ReadMe.html"},
{"lineNum":"   27","line":"* > Cephes math library by Stephen L. Moshier 1992,"},
{"lineNum":"   28","line":"*   http://www.netlib.org/cephes/"},
{"lineNum":"   29","line":"*"},
{"lineNum":"   30","line":"* For detailed instructions, see vcl_manual.pdf"},
{"lineNum":"   31","line":"*"},
{"lineNum":"   32","line":"* (c) Copyright 2014-2019 Agner Fog."},
{"lineNum":"   33","line":"* Apache License version 2.0 or later."},
{"lineNum":"   34","line":"******************************************************************************/"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"#ifndef VECTORMATH_EXP_H"},
{"lineNum":"   37","line":"#define VECTORMATH_EXP_H  1"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"#include \"vectormath_common.h\""},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"#ifdef VCL_NAMESPACE"},
{"lineNum":"   42","line":"namespace VCL_NAMESPACE {"},
{"lineNum":"   43","line":"#endif"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"/******************************************************************************"},
{"lineNum":"   46","line":"*                 Exponential functions"},
{"lineNum":"   47","line":"******************************************************************************/"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"// Helper functions, used internally:"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"// This function calculates pow(2,n) where n must be an integer. Does not check for overflow or underflow"},
{"lineNum":"   52","line":"static inline Vec2d vm_pow2n (Vec2d const & n) {"},
{"lineNum":"   53","line":"    const double pow2_52 = 4503599627370496.0;   // 2^52"},
{"lineNum":"   54","line":"    const double bias = 1023.0;                  // bias in exponent"},
{"lineNum":"   55","line":"    Vec2d a = n + (bias + pow2_52);              // put n + bias in least significant bits"},
{"lineNum":"   56","line":"    Vec2q b = reinterpret_i(a);                  // bit-cast to integer"},
{"lineNum":"   57","line":"    Vec2q c = b << 52;                           // shift left 52 places to get into exponent field"},
{"lineNum":"   58","line":"    Vec2d d = reinterpret_d(c);                  // bit-cast back to double"},
{"lineNum":"   59","line":"    return d;"},
{"lineNum":"   60","line":"}"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"static inline Vec4f vm_pow2n (Vec4f const & n) {"},
{"lineNum":"   63","line":"    const float pow2_23 =  8388608.0;            // 2^23"},
{"lineNum":"   64","line":"    const float bias = 127.0;                    // bias in exponent"},
{"lineNum":"   65","line":"    Vec4f a = n + (bias + pow2_23);              // put n + bias in least significant bits"},
{"lineNum":"   66","line":"    Vec4i b = reinterpret_i(a);                  // bit-cast to integer"},
{"lineNum":"   67","line":"    Vec4i c = b << 23;                           // shift left 23 places to get into exponent field"},
{"lineNum":"   68","line":"    Vec4f d = reinterpret_f(c);                  // bit-cast back to float"},
{"lineNum":"   69","line":"    return d;"},
{"lineNum":"   70","line":"}"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"#if MAX_VECTOR_SIZE >= 256"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"static inline Vec4d vm_pow2n (Vec4d const & n) {"},
{"lineNum":"   75","line":"    const double pow2_52 = 4503599627370496.0;   // 2^52"},
{"lineNum":"   76","line":"    const double bias = 1023.0;                  // bias in exponent"},
{"lineNum":"   77","line":"    Vec4d a = n + (bias + pow2_52);              // put n + bias in least significant bits"},
{"lineNum":"   78","line":"    Vec4q b = reinterpret_i(a);                  // bit-cast to integer"},
{"lineNum":"   79","line":"    Vec4q c = b << 52;                           // shift left 52 places to get value into exponent field"},
{"lineNum":"   80","line":"    Vec4d d = reinterpret_d(c);                  // bit-cast back to double"},
{"lineNum":"   81","line":"    return d;"},
{"lineNum":"   82","line":"}"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"static inline Vec8f vm_pow2n (Vec8f const & n) {"},
{"lineNum":"   85","line":"    const float pow2_23 =  8388608.0;            // 2^23"},
{"lineNum":"   86","line":"    const float bias = 127.0;                    // bias in exponent"},
{"lineNum":"   87","line":"    Vec8f a = n + (bias + pow2_23);              // put n + bias in least significant bits"},
{"lineNum":"   88","line":"    Vec8i b = reinterpret_i(a);                  // bit-cast to integer"},
{"lineNum":"   89","line":"    Vec8i c = b << 23;                           // shift left 23 places to get into exponent field"},
{"lineNum":"   90","line":"    Vec8f d = reinterpret_f(c);                  // bit-cast back to float"},
{"lineNum":"   91","line":"    return d;"},
{"lineNum":"   92","line":"}"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"#endif // MAX_VECTOR_SIZE >= 256"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"#if MAX_VECTOR_SIZE >= 512"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"static inline Vec8d vm_pow2n (Vec8d const & n) {"},
{"lineNum":"   99","line":"#ifdef __AVX512ER__"},
{"lineNum":"  100","line":"    return _mm512_exp2a23_round_pd(n, _MM_FROUND_NO_EXC); // this is exact only for integral n"},
{"lineNum":"  101","line":"#else"},
{"lineNum":"  102","line":"    const double pow2_52 = 4503599627370496.0;   // 2^52"},
{"lineNum":"  103","line":"    const double bias = 1023.0;                  // bias in exponent"},
{"lineNum":"  104","line":"    Vec8d a = n + (bias + pow2_52);              // put n + bias in least significant bits"},
{"lineNum":"  105","line":"    Vec8q b = Vec8q(reinterpret_i(a));           // bit-cast to integer"},
{"lineNum":"  106","line":"    Vec8q c = b << 52;                           // shift left 52 places to get value into exponent field"},
{"lineNum":"  107","line":"    Vec8d d = Vec8d(reinterpret_d(c));           // bit-cast back to double"},
{"lineNum":"  108","line":"    return d;"},
{"lineNum":"  109","line":"#endif"},
{"lineNum":"  110","line":"}"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"static inline Vec16f vm_pow2n (Vec16f const & n) {"},
{"lineNum":"  113","line":"#ifdef __AVX512ER__"},
{"lineNum":"  114","line":"    return _mm512_exp2a23_round_ps(n, _MM_FROUND_NO_EXC);"},
{"lineNum":"  115","line":"#else"},
{"lineNum":"  116","line":"    const float pow2_23 =  8388608.0;            // 2^23"},
{"lineNum":"  117","line":"    const float bias = 127.0;                    // bias in exponent"},
{"lineNum":"  118","line":"    Vec16f a = n + (bias + pow2_23);             // put n + bias in least significant bits"},
{"lineNum":"  119","line":"    Vec16i b = Vec16i(reinterpret_i(a));         // bit-cast to integer"},
{"lineNum":"  120","line":"    Vec16i c = b << 23;                          // shift left 23 places to get into exponent field"},
{"lineNum":"  121","line":"    Vec16f d = Vec16f(reinterpret_f(c));         // bit-cast back to float"},
{"lineNum":"  122","line":"    return d;"},
{"lineNum":"  123","line":"#endif"},
{"lineNum":"  124","line":"}"},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"#endif // MAX_VECTOR_SIZE >= 512"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"// Template for exp function, double precision"},
{"lineNum":"  130","line":"// The limit of abs(x) is defined by max_x below"},
{"lineNum":"  131","line":"// This function does not produce denormals"},
{"lineNum":"  132","line":"// Template parameters:"},
{"lineNum":"  133","line":"// VTYPE:  double vector type"},
{"lineNum":"  134","line":"// BVTYPE: boolean vector type"},
{"lineNum":"  135","line":"// M1: 0 for exp, 1 for expm1, 3 for expm1 with pedantic preservation of signed zero"},
{"lineNum":"  136","line":"// BA: 0 for exp, 1 for 0.5*exp, 2 for pow(2,x), 10 for pow(10,x)"},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"#if 1  // choose method"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"// Taylor expansion"},
{"lineNum":"  141","line":"template<class VTYPE, class BVTYPE, int M1, int BA>"},
{"lineNum":"  142","line":"static inline VTYPE exp_d(VTYPE const & initial_x) {"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"    // Taylor coefficients, 1/n!"},
{"lineNum":"  145","line":"    // Not using minimax approximation because we prioritize precision close to x = 0"},
{"lineNum":"  146","line":"    const double p2  = 1./2.;"},
{"lineNum":"  147","line":"    const double p3  = 1./6.;"},
{"lineNum":"  148","line":"    const double p4  = 1./24.;"},
{"lineNum":"  149","line":"    const double p5  = 1./120.;"},
{"lineNum":"  150","line":"    const double p6  = 1./720.;"},
{"lineNum":"  151","line":"    const double p7  = 1./5040.;"},
{"lineNum":"  152","line":"    const double p8  = 1./40320.;"},
{"lineNum":"  153","line":"    const double p9  = 1./362880.;"},
{"lineNum":"  154","line":"    const double p10 = 1./3628800.;"},
{"lineNum":"  155","line":"    const double p11 = 1./39916800.;"},
{"lineNum":"  156","line":"    const double p12 = 1./479001600.;"},
{"lineNum":"  157","line":"    const double p13 = 1./6227020800.;"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"    // maximum abs(x), value depends on BA, defined below"},
{"lineNum":"  160","line":"    // The lower limit of x is slightly more restrictive than the upper limit."},
{"lineNum":"  161","line":"    // We are specifying the lower limit, except for BA = 1 because it is not used for negative x"},
{"lineNum":"  162","line":"    double max_x;"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"    // data vectors"},
{"lineNum":"  165","line":"    VTYPE  x, r, z, n2;"},
{"lineNum":"  166","line":"    BVTYPE inrange;                              // boolean vector"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"    if (BA <= 1) { // exp(x)"},
{"lineNum":"  169","line":"        max_x = BA == 0 ? 708.39 : 709.7; // lower limit for 0.5*exp(x) is -707.6, but we are using 0.5*exp(x) only for positive x in hyperbolic functions"},
{"lineNum":"  170","line":"        const double ln2d_hi = 0.693145751953125;"},
{"lineNum":"  171","line":"        const double ln2d_lo = 1.42860682030941723212E-6;"},
{"lineNum":"  172","line":"        x  = initial_x;"},
{"lineNum":"  173","line":"        r  = round(initial_x*VM_LOG2E);"},
{"lineNum":"  174","line":"        // subtraction in two steps for higher precision"},
{"lineNum":"  175","line":"        x = nmul_add(r, ln2d_hi, x);             //  x -= r * ln2d_hi;"},
{"lineNum":"  176","line":"        x = nmul_add(r, ln2d_lo, x);             //  x -= r * ln2d_lo;"},
{"lineNum":"  177","line":"    }"},
{"lineNum":"  178","line":"    else if (BA == 2) { // pow(2,x)"},
{"lineNum":"  179","line":"        max_x = 1022.0;"},
{"lineNum":"  180","line":"        r  = round(initial_x);"},
{"lineNum":"  181","line":"        x  = initial_x - r;"},
{"lineNum":"  182","line":"        x *= VM_LN2;"},
{"lineNum":"  183","line":"    }"},
{"lineNum":"  184","line":"    else if (BA == 10) { // pow(10,x)"},
{"lineNum":"  185","line":"        max_x = 307.65;"},
{"lineNum":"  186","line":"        const double log10_2_hi = 0.30102999554947019;     // log10(2) in two parts"},
{"lineNum":"  187","line":"        const double log10_2_lo = 1.1451100899212592E-10;"},
{"lineNum":"  188","line":"        x  = initial_x;"},
{"lineNum":"  189","line":"        r  = round(initial_x*(VM_LOG2E*VM_LN10));"},
{"lineNum":"  190","line":"        // subtraction in two steps for higher precision"},
{"lineNum":"  191","line":"        x  = nmul_add(r, log10_2_hi, x);         //  x -= r * log10_2_hi;"},
{"lineNum":"  192","line":"        x  = nmul_add(r, log10_2_lo, x);         //  x -= r * log10_2_lo;"},
{"lineNum":"  193","line":"        x *= VM_LN10;"},
{"lineNum":"  194","line":"    }"},
{"lineNum":"  195","line":"    else  {  // undefined value of BA"},
{"lineNum":"  196","line":"        return 0.;"},
{"lineNum":"  197","line":"    }"},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"    z = polynomial_13m(x, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13);"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"    if (BA == 1) r--;  // 0.5 * exp(x)"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"    // multiply by power of 2"},
{"lineNum":"  204","line":"    n2 = vm_pow2n(r);"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"    if (M1 == 0) {"},
{"lineNum":"  207","line":"        // exp"},
{"lineNum":"  208","line":"        z = (z + 1.0) * n2;"},
{"lineNum":"  209","line":"    }"},
{"lineNum":"  210","line":"    else {"},
{"lineNum":"  211","line":"        // expm1"},
{"lineNum":"  212","line":"        z = mul_add(z, n2, n2 - 1.0);            // z = z * n2 + (n2 - 1.0);"},
{"lineNum":"  213","line":"        if (M1 & 2) {                            // pedantic preservation of signed zero"},
{"lineNum":"  214","line":"            // (I cannot find a way to detect if -fno-signed-zeros is turned on)"},
{"lineNum":"  215","line":"            z = select(initial_x == 0., initial_x, z);"},
{"lineNum":"  216","line":"        }"},
{"lineNum":"  217","line":"    }"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"    // check for overflow"},
{"lineNum":"  220","line":"    inrange  = abs(initial_x) < max_x;"},
{"lineNum":"  221","line":"    // check for INF and NAN"},
{"lineNum":"  222","line":"    inrange &= is_finite(initial_x);"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"    if (horizontal_and(inrange)) {"},
{"lineNum":"  225","line":"        // fast normal path"},
{"lineNum":"  226","line":"        return z;"},
{"lineNum":"  227","line":"    }"},
{"lineNum":"  228","line":"    else {"},
{"lineNum":"  229","line":"        // overflow, underflow and NAN"},
{"lineNum":"  230","line":"        r = select(sign_bit(initial_x), 0.-(M1&1), infinite_vec<VTYPE>()); // value in case of +/- overflow or INF"},
{"lineNum":"  231","line":"        z = select(inrange, z, r);                                     // +/- underflow"},
{"lineNum":"  232","line":"        z = select(is_nan(initial_x), initial_x, z);                   // NAN goes through"},
{"lineNum":"  233","line":"        return z;"},
{"lineNum":"  234","line":"    }"},
{"lineNum":"  235","line":"}"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"#else"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"// Pade expansion uses less code and fewer registers, but is slower"},
{"lineNum":"  240","line":"template<class VTYPE, class BVTYPE, int M1, int BA>"},
{"lineNum":"  241","line":"static inline VTYPE exp_d(VTYPE const & initial_x) {"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"    // define constants"},
{"lineNum":"  244","line":"    const double ln2p1   = 0.693145751953125;"},
{"lineNum":"  245","line":"    const double ln2p2   = 1.42860682030941723212E-6;"},
{"lineNum":"  246","line":"    const double log2e   = VM_LOG2E;"},
{"lineNum":"  247","line":"    const double max_exp = 708.39;"},
{"lineNum":"  248","line":"    // coefficients of pade polynomials"},
{"lineNum":"  249","line":"    const double P0exp = 9.99999999999999999910E-1;"},
{"lineNum":"  250","line":"    const double P1exp = 3.02994407707441961300E-2;"},
{"lineNum":"  251","line":"    const double P2exp = 1.26177193074810590878E-4;"},
{"lineNum":"  252","line":"    const double Q0exp = 2.00000000000000000009E0;"},
{"lineNum":"  253","line":"    const double Q1exp = 2.27265548208155028766E-1;"},
{"lineNum":"  254","line":"    const double Q2exp = 2.52448340349684104192E-3;"},
{"lineNum":"  255","line":"    const double Q3exp = 3.00198505138664455042E-6;"},
{"lineNum":"  256","line":""},
{"lineNum":"  257","line":"    VTYPE  x, r, xx, px, qx, y, n2;              // data vectors"},
{"lineNum":"  258","line":"    BVTYPE inrange;                              // boolean vector"},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"    x = initial_x;"},
{"lineNum":"  261","line":"    r = round(initial_x*log2e);"},
{"lineNum":"  262","line":""},
{"lineNum":"  263","line":"    // subtraction in one step would gives loss of precision"},
{"lineNum":"  264","line":"    x -= r * ln2p1;"},
{"lineNum":"  265","line":"    x -= r * ln2p2;"},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"    xx = x * x;"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"    // px = x * P(x^2)."},
{"lineNum":"  270","line":"    px = polynomial_2(xx, P0exp, P1exp, P2exp) * x;"},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"    // Evaluate Q(x^2)."},
{"lineNum":"  273","line":"    qx = polynomial_3(xx, Q0exp, Q1exp, Q2exp, Q3exp);"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"    // e^x = 1 + 2*P(x^2)/( Q(x^2) - P(x^2) )"},
{"lineNum":"  276","line":"    y = (2.0 * px) / (qx - px);"},
{"lineNum":"  277","line":""},
{"lineNum":"  278","line":"    // Get 2^n in double."},
{"lineNum":"  279","line":"    // n  = round_to_int64_limited(r);"},
{"lineNum":"  280","line":"    // n2 = exp2(n);"},
{"lineNum":"  281","line":"    n2 = vm_pow2n(r);  // this is faster"},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"    if (M1 == 0) {"},
{"lineNum":"  284","line":"        // exp"},
{"lineNum":"  285","line":"        y = (y + 1.0) * n2;"},
{"lineNum":"  286","line":"    }"},
{"lineNum":"  287","line":"    else {"},
{"lineNum":"  288","line":"        // expm1"},
{"lineNum":"  289","line":"        y = y * n2 + (n2 - 1.0);"},
{"lineNum":"  290","line":"    }"},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"    // overflow"},
{"lineNum":"  293","line":"    inrange  = abs(initial_x) < max_exp;"},
{"lineNum":"  294","line":"    // check for INF and NAN"},
{"lineNum":"  295","line":"    inrange &= is_finite(initial_x);"},
{"lineNum":"  296","line":""},
{"lineNum":"  297","line":"    if (horizontal_and(inrange)) {"},
{"lineNum":"  298","line":"        // fast normal path"},
{"lineNum":"  299","line":"        return y;"},
{"lineNum":"  300","line":"    }"},
{"lineNum":"  301","line":"    else {"},
{"lineNum":"  302","line":"        // overflow, underflow and NAN"},
{"lineNum":"  303","line":"        r = select(sign_bit(initial_x), 0.-M1, infinite_vec<VTYPE>()); // value in case of overflow or INF"},
{"lineNum":"  304","line":"        y = select(inrange, y, r);                                     // +/- overflow"},
{"lineNum":"  305","line":"        y = select(is_nan(initial_x), initial_x, y);                   // NAN goes through"},
{"lineNum":"  306","line":"        return y;"},
{"lineNum":"  307","line":"    }"},
{"lineNum":"  308","line":"}"},
{"lineNum":"  309","line":"#endif"},
{"lineNum":"  310","line":""},
{"lineNum":"  311","line":"// instances of exp_d template"},
{"lineNum":"  312","line":"static inline Vec2d exp(Vec2d const & x) {"},
{"lineNum":"  313","line":"    return exp_d<Vec2d, Vec2db, 0, 0>(x);"},
{"lineNum":"  314","line":"}"},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":"static inline Vec2d expm1(Vec2d const & x) {"},
{"lineNum":"  317","line":"    return exp_d<Vec2d, Vec2db, 3, 0>(x);"},
{"lineNum":"  318","line":"}"},
{"lineNum":"  319","line":""},
{"lineNum":"  320","line":"static inline Vec2d exp2(Vec2d const & x) {"},
{"lineNum":"  321","line":"    return exp_d<Vec2d, Vec2db, 0, 2>(x);"},
{"lineNum":"  322","line":"}"},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"static inline Vec2d exp10(Vec2d const & x) {"},
{"lineNum":"  325","line":"    return exp_d<Vec2d, Vec2db, 0, 10>(x);"},
{"lineNum":"  326","line":"}"},
{"lineNum":"  327","line":""},
{"lineNum":"  328","line":"#if MAX_VECTOR_SIZE >= 256"},
{"lineNum":"  329","line":""},
{"lineNum":"  330","line":"static inline Vec4d exp(Vec4d const & x) {"},
{"lineNum":"  331","line":"    return exp_d<Vec4d, Vec4db, 0, 0>(x);"},
{"lineNum":"  332","line":"}"},
{"lineNum":"  333","line":""},
{"lineNum":"  334","line":"static inline Vec4d expm1(Vec4d const & x) {"},
{"lineNum":"  335","line":"    return exp_d<Vec4d, Vec4db, 3, 0>(x);"},
{"lineNum":"  336","line":"}"},
{"lineNum":"  337","line":""},
{"lineNum":"  338","line":"static inline Vec4d exp2(Vec4d const & x) {"},
{"lineNum":"  339","line":"    return exp_d<Vec4d, Vec4db, 0, 2>(x);"},
{"lineNum":"  340","line":"}"},
{"lineNum":"  341","line":""},
{"lineNum":"  342","line":"static inline Vec4d exp10(Vec4d const & x) {"},
{"lineNum":"  343","line":"    return exp_d<Vec4d, Vec4db, 0, 10>(x);"},
{"lineNum":"  344","line":"}"},
{"lineNum":"  345","line":""},
{"lineNum":"  346","line":"#endif // MAX_VECTOR_SIZE >= 256"},
{"lineNum":"  347","line":""},
{"lineNum":"  348","line":"#if MAX_VECTOR_SIZE >= 512"},
{"lineNum":"  349","line":""},
{"lineNum":"  350","line":"static inline Vec8d exp(Vec8d const & x) {"},
{"lineNum":"  351","line":"    return exp_d<Vec8d, Vec8db, 0, 0>(x);"},
{"lineNum":"  352","line":"}"},
{"lineNum":"  353","line":""},
{"lineNum":"  354","line":"static inline Vec8d expm1(Vec8d const & x) {"},
{"lineNum":"  355","line":"    return exp_d<Vec8d, Vec8db, 3, 0>(x);"},
{"lineNum":"  356","line":"}"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"static inline Vec8d exp2(Vec8d const & x) {"},
{"lineNum":"  359","line":"    return exp_d<Vec8d, Vec8db, 0, 2>(x);"},
{"lineNum":"  360","line":"}"},
{"lineNum":"  361","line":""},
{"lineNum":"  362","line":"static inline Vec8d exp10(Vec8d const & x) {"},
{"lineNum":"  363","line":"    return exp_d<Vec8d, Vec8db, 0, 10>(x);"},
{"lineNum":"  364","line":"}"},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":"#endif // MAX_VECTOR_SIZE >= 512"},
{"lineNum":"  367","line":""},
{"lineNum":"  368","line":"// Template for exp function, single precision"},
{"lineNum":"  369","line":"// The limit of abs(x) is defined by max_x below"},
{"lineNum":"  370","line":"// This function does not produce denormals"},
{"lineNum":"  371","line":"// Template parameters:"},
{"lineNum":"  372","line":"// VTYPE:  float vector type"},
{"lineNum":"  373","line":"// BVTYPE: boolean vector type"},
{"lineNum":"  374","line":"// M1: 0 for exp, 1 for expm1, 3 for expm1 with pedantic preservation of signed zero"},
{"lineNum":"  375","line":"// BA: 0 for exp, 1 for 0.5*exp, 2 for pow(2,x), 10 for pow(10,x)"},
{"lineNum":"  376","line":""},
{"lineNum":"  377","line":"template<class VTYPE, class BVTYPE, int M1, int BA>"},
{"lineNum":"  378","line":"static inline VTYPE exp_f(VTYPE const & initial_x) {"},
{"lineNum":"  379","line":""},
{"lineNum":"  380","line":"    // Taylor coefficients"},
{"lineNum":"  381","line":"    const float P0expf   =  1.f/2.f;"},
{"lineNum":"  382","line":"    const float P1expf   =  1.f/6.f;"},
{"lineNum":"  383","line":"    const float P2expf   =  1.f/24.f;"},
{"lineNum":"  384","line":"    const float P3expf   =  1.f/120.f;"},
{"lineNum":"  385","line":"    const float P4expf   =  1.f/720.f;"},
{"lineNum":"  386","line":"    const float P5expf   =  1.f/5040.f;"},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"    VTYPE  x, r, x2, z, n2;                      // data vectors"},
{"lineNum":"  389","line":"    BVTYPE inrange;                              // boolean vector"},
{"lineNum":"  390","line":""},
{"lineNum":"  391","line":"    // maximum abs(x), value depends on BA, defined below"},
{"lineNum":"  392","line":"    // The lower limit of x is slightly more restrictive than the upper limit."},
{"lineNum":"  393","line":"    // We are specifying the lower limit, except for BA = 1 because it is not used for negative x"},
{"lineNum":"  394","line":"    float max_x;"},
{"lineNum":"  395","line":""},
{"lineNum":"  396","line":"    if (BA <= 1) { // exp(x)"},
{"lineNum":"  397","line":"        const float ln2f_hi  =  0.693359375f;"},
{"lineNum":"  398","line":"        const float ln2f_lo  = -2.12194440e-4f;"},
{"lineNum":"  399","line":"        max_x = (BA == 0) ? 87.3f : 89.0f;"},
{"lineNum":"  400","line":""},
{"lineNum":"  401","line":"        x = initial_x;"},
{"lineNum":"  402","line":"        r = round(initial_x*float(VM_LOG2E));"},
{"lineNum":"  403","line":"        x = nmul_add(r, VTYPE(ln2f_hi), x);      //  x -= r * ln2f_hi;"},
{"lineNum":"  404","line":"        x = nmul_add(r, VTYPE(ln2f_lo), x);      //  x -= r * ln2f_lo;"},
{"lineNum":"  405","line":"    }"},
{"lineNum":"  406","line":"    else if (BA == 2) {                          // pow(2,x)"},
{"lineNum":"  407","line":"        max_x = 126.f;"},
{"lineNum":"  408","line":"        r = round(initial_x);"},
{"lineNum":"  409","line":"        x = initial_x - r;"},
{"lineNum":"  410","line":"        x = x * (float)VM_LN2;"},
{"lineNum":"  411","line":"    }"},
{"lineNum":"  412","line":"    else if (BA == 10) {                         // pow(10,x)"},
{"lineNum":"  413","line":"        max_x = 37.9f;"},
{"lineNum":"  414","line":"        const float log10_2_hi = 0.301025391f;   // log10(2) in two parts"},
{"lineNum":"  415","line":"        const float log10_2_lo = 4.60503907E-6f;"},
{"lineNum":"  416","line":"        x = initial_x;"},
{"lineNum":"  417","line":"        r = round(initial_x*float(VM_LOG2E*VM_LN10));"},
{"lineNum":"  418","line":"        x = nmul_add(r, VTYPE(log10_2_hi), x);   //  x -= r * log10_2_hi;"},
{"lineNum":"  419","line":"        x = nmul_add(r, VTYPE(log10_2_lo), x);   //  x -= r * log10_2_lo;"},
{"lineNum":"  420","line":"        x = x * (float)VM_LN10;"},
{"lineNum":"  421","line":"    }"},
{"lineNum":"  422","line":"    else  {  // undefined value of BA"},
{"lineNum":"  423","line":"        return 0.;"},
{"lineNum":"  424","line":"    }"},
{"lineNum":"  425","line":""},
{"lineNum":"  426","line":"    x2 = x * x;"},
{"lineNum":"  427","line":"    z = polynomial_5(x,P0expf,P1expf,P2expf,P3expf,P4expf,P5expf);"},
{"lineNum":"  428","line":"    z = mul_add(z, x2, x);                       // z *= x2;  z += x;"},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":"    if (BA == 1) r--;                            // 0.5 * exp(x)"},
{"lineNum":"  431","line":""},
{"lineNum":"  432","line":"    // multiply by power of 2"},
{"lineNum":"  433","line":"    n2 = vm_pow2n(r);"},
{"lineNum":"  434","line":""},
{"lineNum":"  435","line":"    if (M1 == 0) {"},
{"lineNum":"  436","line":"        // exp"},
{"lineNum":"  437","line":"        z = (z + 1.0f) * n2;"},
{"lineNum":"  438","line":"    }"},
{"lineNum":"  439","line":"    else {"},
{"lineNum":"  440","line":"        // expm1"},
{"lineNum":"  441","line":"        z = mul_add(z, n2, n2 - 1.0f);           //  z = z * n2 + (n2 - 1.0f);"},
{"lineNum":"  442","line":"        if (M1 & 2) {                            // pedantic preservation of signed zero"},
{"lineNum":"  443","line":"            // (I cannot find a way to detect if -fno-signed-zeros is turned on)"},
{"lineNum":"  444","line":"            z = select(initial_x == 0.f, initial_x, z);"},
{"lineNum":"  445","line":"        }"},
{"lineNum":"  446","line":"    }"},
{"lineNum":"  447","line":""},
{"lineNum":"  448","line":"    // check for overflow"},
{"lineNum":"  449","line":"    inrange  = abs(initial_x) < max_x;"},
{"lineNum":"  450","line":"    // check for INF and NAN"},
{"lineNum":"  451","line":"    inrange &= is_finite(initial_x);"},
{"lineNum":"  452","line":""},
{"lineNum":"  453","line":"    if (horizontal_and(inrange)) {"},
{"lineNum":"  454","line":"        // fast normal path"},
{"lineNum":"  455","line":"        return z;"},
{"lineNum":"  456","line":"    }"},
{"lineNum":"  457","line":"    else {"},
{"lineNum":"  458","line":"        // overflow, underflow and NAN"},
{"lineNum":"  459","line":"        r = select(sign_bit(initial_x), 0.f-(M1&1), infinite_vec<VTYPE>()); // value in case of +/- overflow or INF"},
{"lineNum":"  460","line":"        z = select(inrange, z, r);                                      // +/- underflow"},
{"lineNum":"  461","line":"        z = select(is_nan(initial_x), initial_x, z);                    // NAN goes through"},
{"lineNum":"  462","line":"        return z;"},
{"lineNum":"  463","line":"    }"},
{"lineNum":"  464","line":"}"},
{"lineNum":"  465","line":"#if defined(__AVX512ER__) && MAX_VECTOR_SIZE >= 512"},
{"lineNum":"  466","line":"// forward declarations of fast 512 bit versions"},
{"lineNum":"  467","line":"static Vec16f exp(Vec16f const & x);"},
{"lineNum":"  468","line":"static Vec16f exp2(Vec16f const & x);"},
{"lineNum":"  469","line":"static Vec16f exp10(Vec16f const & x);"},
{"lineNum":"  470","line":"#endif"},
{"lineNum":"  471","line":""},
{"lineNum":"  472","line":"// instances of exp_f template"},
{"lineNum":"  473","line":"static inline Vec4f exp(Vec4f const & x) {"},
{"lineNum":"  474","line":"#if defined(__AVX512ER__) && MAX_VECTOR_SIZE >= 512 // use faster 512 bit version"},
{"lineNum":"  475","line":"    return _mm512_castps512_ps128(exp(Vec16f(_mm512_castps128_ps512(x))));"},
{"lineNum":"  476","line":"#else"},
{"lineNum":"  477","line":"    return exp_f<Vec4f, Vec4fb, 0, 0>(x);"},
{"lineNum":"  478","line":"#endif"},
{"lineNum":"  479","line":"}"},
{"lineNum":"  480","line":""},
{"lineNum":"  481","line":"static inline Vec4f expm1(Vec4f const & x) {"},
{"lineNum":"  482","line":"    return exp_f<Vec4f, Vec4fb, 3, 0>(x);"},
{"lineNum":"  483","line":"}"},
{"lineNum":"  484","line":""},
{"lineNum":"  485","line":"static inline Vec4f exp2(Vec4f const & x) {"},
{"lineNum":"  486","line":"#if defined(__AVX512ER__) && MAX_VECTOR_SIZE >= 512 // use faster 512 bit version"},
{"lineNum":"  487","line":"    return _mm512_castps512_ps128(exp2(Vec16f(_mm512_castps128_ps512(x))));"},
{"lineNum":"  488","line":"#else"},
{"lineNum":"  489","line":"    return exp_f<Vec4f, Vec4fb, 0, 2>(x);"},
{"lineNum":"  490","line":"#endif"},
{"lineNum":"  491","line":"}"},
{"lineNum":"  492","line":""},
{"lineNum":"  493","line":"static inline Vec4f exp10(Vec4f const & x) {"},
{"lineNum":"  494","line":"#if defined(__AVX512ER__) && MAX_VECTOR_SIZE >= 512 // use faster 512 bit version"},
{"lineNum":"  495","line":"    return _mm512_castps512_ps128(exp10(Vec16f(_mm512_castps128_ps512(x))));"},
{"lineNum":"  496","line":"#else"},
{"lineNum":"  497","line":"    return exp_f<Vec4f, Vec4fb, 0, 10>(x);"},
{"lineNum":"  498","line":"#endif"},
{"lineNum":"  499","line":"}"},
{"lineNum":"  500","line":""},
{"lineNum":"  501","line":"#if MAX_VECTOR_SIZE >= 256"},
{"lineNum":"  502","line":""},
{"lineNum":"  503","line":"static inline Vec8f exp(Vec8f const & x) {"},
{"lineNum":"  504","line":"#if defined(__AVX512ER__) && MAX_VECTOR_SIZE >= 512 // use faster 512 bit version"},
{"lineNum":"  505","line":"    return _mm512_castps512_ps256(exp(Vec16f(_mm512_castps256_ps512(x))));"},
{"lineNum":"  506","line":"#else"},
{"lineNum":"  507","line":"    return exp_f<Vec8f, Vec8fb, 0, 0>(x);"},
{"lineNum":"  508","line":"#endif"},
{"lineNum":"  509","line":"}"},
{"lineNum":"  510","line":""},
{"lineNum":"  511","line":"static inline Vec8f expm1(Vec8f const & x) {"},
{"lineNum":"  512","line":"    return exp_f<Vec8f, Vec8fb, 3, 0>(x);"},
{"lineNum":"  513","line":"}"},
{"lineNum":"  514","line":""},
{"lineNum":"  515","line":"static inline Vec8f exp2(Vec8f const & x) {"},
{"lineNum":"  516","line":"#if defined(__AVX512ER__) && MAX_VECTOR_SIZE >= 512 // use faster 512 bit version"},
{"lineNum":"  517","line":"    return _mm512_castps512_ps256(exp2(Vec16f(_mm512_castps256_ps512(x))));"},
{"lineNum":"  518","line":"#else"},
{"lineNum":"  519","line":"    return exp_f<Vec8f, Vec8fb, 0, 2>(x);"},
{"lineNum":"  520","line":"#endif"},
{"lineNum":"  521","line":"}"},
{"lineNum":"  522","line":""},
{"lineNum":"  523","line":"static inline Vec8f exp10(Vec8f const & x) {"},
{"lineNum":"  524","line":"#if defined(__AVX512ER__) && MAX_VECTOR_SIZE >= 512 // use faster 512 bit version"},
{"lineNum":"  525","line":"    return _mm512_castps512_ps256(exp10(Vec16f(_mm512_castps256_ps512(x))));"},
{"lineNum":"  526","line":"#else"},
{"lineNum":"  527","line":"    return exp_f<Vec8f, Vec8fb, 0, 10>(x);"},
{"lineNum":"  528","line":"#endif"},
{"lineNum":"  529","line":"}"},
{"lineNum":"  530","line":""},
{"lineNum":"  531","line":"#endif // MAX_VECTOR_SIZE >= 256"},
{"lineNum":"  532","line":""},
{"lineNum":"  533","line":"#if MAX_VECTOR_SIZE >= 512"},
{"lineNum":"  534","line":""},
{"lineNum":"  535","line":"static inline Vec16f exp(Vec16f const & x) {"},
{"lineNum":"  536","line":"#ifdef __AVX512ER__  // AVX512ER instruction set includes fast exponential function"},
{"lineNum":"  537","line":"#ifdef VCL_FASTEXP"},
{"lineNum":"  538","line":"    // very fast, but less precise for large x:"},
{"lineNum":"  539","line":"    return _mm512_exp2a23_round_ps(x*float(VM_LOG2E), _MM_FROUND_NO_EXC);"},
{"lineNum":"  540","line":"#else"},
{"lineNum":"  541","line":"    // best precision, also for large x:"},
{"lineNum":"  542","line":"    const Vec16f log2e = float(VM_LOG2E);"},
{"lineNum":"  543","line":"    const float ln2f_hi = 0.693359375f;"},
{"lineNum":"  544","line":"    const float ln2f_lo = -2.12194440e-4f;"},
{"lineNum":"  545","line":"    Vec16f x1 = x, r, y;"},
{"lineNum":"  546","line":"    r = round(x1*log2e);"},
{"lineNum":"  547","line":"    x1 = nmul_add(r, Vec16f(ln2f_hi), x1);      //  x -= r * ln2f_hi;"},
{"lineNum":"  548","line":"    x1 = nmul_add(r, Vec16f(ln2f_lo), x1);      //  x -= r * ln2f_lo;"},
{"lineNum":"  549","line":"    x1 = x1 * log2e;"},
{"lineNum":"  550","line":"    y = _mm512_exp2a23_round_ps(r, _MM_FROUND_NO_EXC);"},
{"lineNum":"  551","line":"    // y = vm_pow2n(r);"},
{"lineNum":"  552","line":"    return y * _mm512_exp2a23_round_ps(x1, _MM_FROUND_NO_EXC);"},
{"lineNum":"  553","line":"#endif // VCL_FASTEXP"},
{"lineNum":"  554","line":"#else  // no AVX512ER, use above template"},
{"lineNum":"  555","line":"    return exp_f<Vec16f, Vec16fb, 0, 0>(x);"},
{"lineNum":"  556","line":"#endif"},
{"lineNum":"  557","line":"}"},
{"lineNum":"  558","line":""},
{"lineNum":"  559","line":"static inline Vec16f expm1(Vec16f const & x) {"},
{"lineNum":"  560","line":"    return exp_f<Vec16f, Vec16fb, 3, 0>(x);"},
{"lineNum":"  561","line":"}"},
{"lineNum":"  562","line":""},
{"lineNum":"  563","line":"static inline Vec16f exp2(Vec16f const & x) {"},
{"lineNum":"  564","line":"#ifdef __AVX512ER__"},
{"lineNum":"  565","line":"    return Vec16f(_mm512_exp2a23_round_ps(x, _MM_FROUND_NO_EXC));"},
{"lineNum":"  566","line":"#else"},
{"lineNum":"  567","line":"    return exp_f<Vec16f, Vec16fb, 0, 2>(x);"},
{"lineNum":"  568","line":"#endif"},
{"lineNum":"  569","line":"}"},
{"lineNum":"  570","line":""},
{"lineNum":"  571","line":"static inline Vec16f exp10(Vec16f const & x) {"},
{"lineNum":"  572","line":"#ifdef __AVX512ER__  // AVX512ER instruction set includes fast exponential function"},
{"lineNum":"  573","line":"#ifdef VCL_FASTEXP"},
{"lineNum":"  574","line":"    // very fast, but less precise for large x:"},
{"lineNum":"  575","line":"    return _mm512_exp2a23_round_ps(x*float(VM_LOG210), _MM_FROUND_NO_EXC);"},
{"lineNum":"  576","line":"#else"},
{"lineNum":"  577","line":"    // best precision, also for large x:"},
{"lineNum":"  578","line":"    const float log10_2_hi = 0.301025391f;   // log10(2) in two parts"},
{"lineNum":"  579","line":"    const float log10_2_lo = 4.60503907E-6f;"},
{"lineNum":"  580","line":"    Vec16f x1 = x, r, y;"},
{"lineNum":"  581","line":"    Vec16f log210 = float(VM_LOG210);"},
{"lineNum":"  582","line":"    r = round(x1*log210);"},
{"lineNum":"  583","line":"    x1 = nmul_add(r, Vec16f(log10_2_hi), x1);      //  x -= r * log10_2_hi"},
{"lineNum":"  584","line":"    x1 = nmul_add(r, Vec16f(log10_2_lo), x1);      //  x -= r * log10_2_lo"},
{"lineNum":"  585","line":"    x1 = x1 * log210;"},
{"lineNum":"  586","line":"    // y = vm_pow2n(r);"},
{"lineNum":"  587","line":"    y = _mm512_exp2a23_round_ps(r, _MM_FROUND_NO_EXC);"},
{"lineNum":"  588","line":"    return y * _mm512_exp2a23_round_ps(x1, _MM_FROUND_NO_EXC);"},
{"lineNum":"  589","line":"#endif // VCL_FASTEXP"},
{"lineNum":"  590","line":"#else  // no AVX512ER, use above template"},
{"lineNum":"  591","line":"    return exp_f<Vec16f, Vec16fb, 0, 10>(x);"},
{"lineNum":"  592","line":"#endif"},
{"lineNum":"  593","line":"}"},
{"lineNum":"  594","line":""},
{"lineNum":"  595","line":"#endif // MAX_VECTOR_SIZE >= 512"},
{"lineNum":"  596","line":""},
{"lineNum":"  597","line":""},
{"lineNum":"  598","line":"/******************************************************************************"},
{"lineNum":"  599","line":"*                 Logarithm functions"},
{"lineNum":"  600","line":"******************************************************************************/"},
{"lineNum":"  601","line":""},
{"lineNum":"  602","line":"// Helper function: fraction_2(x) = fraction(x)*0.5"},
{"lineNum":"  603","line":""},
{"lineNum":"  604","line":"// Modified fraction function:"},
{"lineNum":"  605","line":"// Extract the fraction part of a floating point number, and divide by 2"},
{"lineNum":"  606","line":"// The fraction function is defined in vectorf128.h etc."},
{"lineNum":"  607","line":"// fraction_2(x) = fraction(x)*0.5"},
{"lineNum":"  608","line":"// This version gives half the fraction without extra delay"},
{"lineNum":"  609","line":"// Does not work for x = 0"},
{"lineNum":"  610","line":"static inline Vec4f fraction_2(Vec4f const & a) {"},
{"lineNum":"  611","line":"    Vec4ui t1 = _mm_castps_si128(a);   // reinterpret as 32-bit integer"},
{"lineNum":"  612","line":"    Vec4ui t2 = Vec4ui((t1 & 0x007FFFFF) | 0x3F000000); // set exponent to 0 + bias"},
{"lineNum":"  613","line":"    return _mm_castsi128_ps(t2);"},
{"lineNum":"  614","line":"}"},
{"lineNum":"  615","line":""},
{"lineNum":"  616","line":"static inline Vec2d fraction_2(Vec2d const & a) {"},
{"lineNum":"  617","line":"    Vec2uq t1 = _mm_castpd_si128(a);   // reinterpret as 64-bit integer"},
{"lineNum":"  618","line":"    Vec2uq t2 = Vec2uq((t1 & 0x000FFFFFFFFFFFFFll) | 0x3FE0000000000000ll); // set exponent to 0 + bias"},
{"lineNum":"  619","line":"    return _mm_castsi128_pd(t2);"},
{"lineNum":"  620","line":"}"},
{"lineNum":"  621","line":""},
{"lineNum":"  622","line":"#if MAX_VECTOR_SIZE >= 256"},
{"lineNum":"  623","line":""},
{"lineNum":"  624","line":"static inline Vec8f fraction_2(Vec8f const & a) {"},
{"lineNum":"  625","line":"#if defined (VECTORI256_H) && VECTORI256_H > 2  // 256 bit integer vectors are available, AVX2"},
{"lineNum":"  626","line":"    Vec8ui t1 = _mm256_castps_si256(a);   // reinterpret as 32-bit integer"},
{"lineNum":"  627","line":"    Vec8ui t2 = (t1 & 0x007FFFFF) | 0x3F000000; // set exponent to 0 + bias"},
{"lineNum":"  628","line":"    return _mm256_castsi256_ps(t2);"},
{"lineNum":"  629","line":"#else"},
{"lineNum":"  630","line":"    return Vec8f(fraction_2(a.get_low()), fraction_2(a.get_high()));"},
{"lineNum":"  631","line":"#endif"},
{"lineNum":"  632","line":"}"},
{"lineNum":"  633","line":""},
{"lineNum":"  634","line":"static inline Vec4d fraction_2(Vec4d const & a) {"},
{"lineNum":"  635","line":"#if VECTORI256_H > 1  // AVX2"},
{"lineNum":"  636","line":"    Vec4uq t1 = _mm256_castpd_si256(a);   // reinterpret as 64-bit integer"},
{"lineNum":"  637","line":"    Vec4uq t2 = Vec4uq((t1 & 0x000FFFFFFFFFFFFFll) | 0x3FE0000000000000ll); // set exponent to 0 + bias"},
{"lineNum":"  638","line":"    return _mm256_castsi256_pd(t2);"},
{"lineNum":"  639","line":"#else"},
{"lineNum":"  640","line":"    return Vec4d(fraction_2(a.get_low()), fraction_2(a.get_high()));"},
{"lineNum":"  641","line":"#endif"},
{"lineNum":"  642","line":"}"},
{"lineNum":"  643","line":""},
{"lineNum":"  644","line":"#endif // MAX_VECTOR_SIZE >= 256"},
{"lineNum":"  645","line":""},
{"lineNum":"  646","line":"#if MAX_VECTOR_SIZE >= 512"},
{"lineNum":"  647","line":""},
{"lineNum":"  648","line":"static inline Vec16f fraction_2(Vec16f const & a) {"},
{"lineNum":"  649","line":"#if INSTRSET >= 9                    // 512 bit integer vectors are available, AVX512"},
{"lineNum":"  650","line":"    return _mm512_getmant_ps(a, _MM_MANT_NORM_p5_1, _MM_MANT_SIGN_zero);"},
{"lineNum":"  651","line":"    //return Vec16f(_mm512_getmant_ps(a, _MM_MANT_NORM_1_2, _MM_MANT_SIGN_zero)) * 0.5f;"},
{"lineNum":"  652","line":"#else"},
{"lineNum":"  653","line":"    return Vec16f(fraction_2(a.get_low()), fraction_2(a.get_high()));"},
{"lineNum":"  654","line":"#endif"},
{"lineNum":"  655","line":"}"},
{"lineNum":"  656","line":""},
{"lineNum":"  657","line":"static inline Vec8d fraction_2(Vec8d const & a) {"},
{"lineNum":"  658","line":"#if INSTRSET >= 9                    // 512 bit integer vectors are available, AVX512"},
{"lineNum":"  659","line":"    return _mm512_getmant_pd(a, _MM_MANT_NORM_p5_1, _MM_MANT_SIGN_zero);"},
{"lineNum":"  660","line":"    //return Vec8d(_mm512_getmant_pd(a, _MM_MANT_NORM_1_2, _MM_MANT_SIGN_zero)) * 0.5;"},
{"lineNum":"  661","line":"#else"},
{"lineNum":"  662","line":"    return Vec8d(fraction_2(a.get_low()), fraction_2(a.get_high()));"},
{"lineNum":"  663","line":"#endif"},
{"lineNum":"  664","line":"}"},
{"lineNum":"  665","line":""},
{"lineNum":"  666","line":"#endif // MAX_VECTOR_SIZE >= 512"},
{"lineNum":"  667","line":""},
{"lineNum":"  668","line":""},
{"lineNum":"  669","line":"// Helper function: exponent_f(x) = exponent(x) as floating point number"},
{"lineNum":"  670","line":""},
{"lineNum":"  671","line":"union vm_ufi {"},
{"lineNum":"  672","line":"    float f;"},
{"lineNum":"  673","line":"    uint32_t i;"},
{"lineNum":"  674","line":"};"},
{"lineNum":"  675","line":""},
{"lineNum":"  676","line":"union vm_udi {"},
{"lineNum":"  677","line":"    double d;"},
{"lineNum":"  678","line":"    uint64_t i;"},
{"lineNum":"  679","line":"};"},
{"lineNum":"  680","line":""},
{"lineNum":"  681","line":"// extract exponent of a positive number x as a floating point number"},
{"lineNum":"  682","line":"static inline Vec4f exponent_f(Vec4f const & x) {"},
{"lineNum":"  683","line":"#ifdef __AVX512VL__                              // AVX512VL"},
{"lineNum":"  684","line":"    // prevent returning -inf for x=0"},
{"lineNum":"  685","line":"    return _mm_maskz_getexp_ps(_mm_cmp_ps_mask(x,Vec4f(0.f),4), x);"},
{"lineNum":"  686","line":"#else"},
{"lineNum":"  687","line":"    const float pow2_23 =  8388608.0f;           // 2^23"},
{"lineNum":"  688","line":"    const float bias = 127.f;                    // bias in exponent"},
{"lineNum":"  689","line":"    const vm_ufi upow2_23 = {pow2_23};"},
{"lineNum":"  690","line":"    Vec4ui a = reinterpret_i(x);                 // bit-cast x to integer"},
{"lineNum":"  691","line":"    Vec4ui b = a >> 23;                          // shift down exponent to low bits"},
{"lineNum":"  692","line":"    Vec4ui c = b | Vec4ui(upow2_23.i);           // insert new exponent"},
{"lineNum":"  693","line":"    Vec4f  d = reinterpret_f(c);                 // bit-cast back to double"},
{"lineNum":"  694","line":"    Vec4f  e = d - (pow2_23 + bias);             // subtract magic number and bias"},
{"lineNum":"  695","line":"    return e;"},
{"lineNum":"  696","line":"#endif"},
{"lineNum":"  697","line":"}"},
{"lineNum":"  698","line":""},
{"lineNum":"  699","line":"static inline Vec2d exponent_f(Vec2d const & x) {"},
{"lineNum":"  700","line":"#ifdef __AVX512VL__                              // AVX512VL"},
{"lineNum":"  701","line":"    // prevent returning -inf for x=0"},
{"lineNum":"  702","line":"    //return _mm_maskz_getexp_pd(x != 0., x);"},
{"lineNum":"  703","line":"    return _mm_maskz_getexp_pd(_mm_cmp_pd_mask(x,Vec2d(0.),4), x);"},
{"lineNum":"  704","line":""},
{"lineNum":"  705","line":"#else"},
{"lineNum":"  706","line":"    const double pow2_52 = 4503599627370496.0;   // 2^52"},
{"lineNum":"  707","line":"    const double bias = 1023.0;                  // bias in exponent"},
{"lineNum":"  708","line":"    const vm_udi upow2_52 = {pow2_52};"},
{"lineNum":"  709","line":""},
{"lineNum":"  710","line":"    Vec2uq a = reinterpret_i(x);                 // bit-cast x to integer"},
{"lineNum":"  711","line":"    Vec2uq b = a >> 52;                          // shift down exponent to low bits"},
{"lineNum":"  712","line":"    Vec2uq c = b | Vec2uq(upow2_52.i);           // insert new exponent"},
{"lineNum":"  713","line":"    Vec2d  d = reinterpret_d(c);                 // bit-cast back to double"},
{"lineNum":"  714","line":"    Vec2d  e = d - (pow2_52 + bias);             // subtract magic number and bias"},
{"lineNum":"  715","line":"    return e;"},
{"lineNum":"  716","line":"#endif"},
{"lineNum":"  717","line":"}"},
{"lineNum":"  718","line":""},
{"lineNum":"  719","line":"#if MAX_VECTOR_SIZE >= 256"},
{"lineNum":"  720","line":""},
{"lineNum":"  721","line":"static inline Vec8f exponent_f(Vec8f const & x) {"},
{"lineNum":"  722","line":"#ifdef __AVX512VL__                              // AVX512VL"},
{"lineNum":"  723","line":"    // prevent returning -inf for x=0"},
{"lineNum":"  724","line":"    //return _mm256_maskz_getexp_ps(x != 0.f, x);"},
{"lineNum":"  725","line":"    return _mm256_maskz_getexp_ps(_mm256_cmp_ps_mask(x,Vec8f(0.f),4), x);"},
{"lineNum":"  726","line":"#else"},
{"lineNum":"  727","line":"    const float pow2_23 =  8388608.0f;           // 2^23"},
{"lineNum":"  728","line":"    const float bias = 127.f;                    // bias in exponent"},
{"lineNum":"  729","line":"    const vm_ufi upow2_23 = {pow2_23};"},
{"lineNum":"  730","line":"    Vec8ui a = reinterpret_i(x);                 // bit-cast x to integer"},
{"lineNum":"  731","line":"    Vec8ui b = a >> 23;                          // shift down exponent to low bits"},
{"lineNum":"  732","line":"    Vec8ui c = b | Vec8ui(upow2_23.i);           // insert new exponent"},
{"lineNum":"  733","line":"    Vec8f  d = reinterpret_f(c);                 // bit-cast back to double"},
{"lineNum":"  734","line":"    Vec8f  e = d - (pow2_23 + bias);             // subtract magic number and bias"},
{"lineNum":"  735","line":"    return e;"},
{"lineNum":"  736","line":"#endif"},
{"lineNum":"  737","line":"}"},
{"lineNum":"  738","line":""},
{"lineNum":"  739","line":"// extract exponent of a positive number x as a floating point number"},
{"lineNum":"  740","line":"static inline Vec4d exponent_f(Vec4d const & x) {"},
{"lineNum":"  741","line":"#ifdef __AVX512VL__                              // AVX512VL"},
{"lineNum":"  742","line":"    // prevent returning -inf for x=0"},
{"lineNum":"  743","line":"    //return _mm256_maskz_getexp_pd(x != 0., x);"},
{"lineNum":"  744","line":"    return _mm256_maskz_getexp_pd(_mm256_cmp_pd_mask(x,Vec4d(0.),4), x);"},
{"lineNum":"  745","line":"#else"},
{"lineNum":"  746","line":"    const double pow2_52 = 4503599627370496.0;   // 2^52"},
{"lineNum":"  747","line":"    const double bias = 1023.0;                  // bias in exponent"},
{"lineNum":"  748","line":"    const vm_udi upow2_52 = {pow2_52};"},
{"lineNum":"  749","line":"    Vec4uq a = reinterpret_i(x);                 // bit-cast x to integer"},
{"lineNum":"  750","line":"    Vec4uq b = a >> 52;                          // shift down exponent to low bits"},
{"lineNum":"  751","line":"    Vec4uq c = b | Vec4uq(upow2_52.i);           // insert new exponent"},
{"lineNum":"  752","line":"    Vec4d  d = reinterpret_d(c);                 // bit-cast back to double"},
{"lineNum":"  753","line":"    Vec4d  e = d - (pow2_52 + bias);             // subtract magic number and bias"},
{"lineNum":"  754","line":"    return e;"},
{"lineNum":"  755","line":"#endif"},
{"lineNum":"  756","line":"}"},
{"lineNum":"  757","line":""},
{"lineNum":"  758","line":"#endif // MAX_VECTOR_SIZE >= 256"},
{"lineNum":"  759","line":""},
{"lineNum":"  760","line":"#if MAX_VECTOR_SIZE >= 512"},
{"lineNum":"  761","line":""},
{"lineNum":"  762","line":"static inline Vec16f exponent_f(Vec16f const & x) {"},
{"lineNum":"  763","line":"#if INSTRSET >= 9                                // AVX512"},
{"lineNum":"  764","line":"    // prevent returning -inf for x=0"},
{"lineNum":"  765","line":"    return _mm512_maskz_getexp_ps(x != 0.f, x);"},
{"lineNum":"  766","line":"#else"},
{"lineNum":"  767","line":"    return Vec16f(exponent_f(x.get_low()), exponent_f(x.get_high()));"},
{"lineNum":"  768","line":"#endif"},
{"lineNum":"  769","line":"}"},
{"lineNum":"  770","line":""},
{"lineNum":"  771","line":"// extract exponent of a positive number x as a floating point number"},
{"lineNum":"  772","line":"static inline Vec8d exponent_f(Vec8d const & x) {"},
{"lineNum":"  773","line":"#if INSTRSET >= 9                                // AVX512"},
{"lineNum":"  774","line":"    // prevent returning -inf for x=0"},
{"lineNum":"  775","line":"    return _mm512_maskz_getexp_pd(x != 0., x);"},
{"lineNum":"  776","line":"#else"},
{"lineNum":"  777","line":"    return Vec8d(exponent_f(x.get_low()), exponent_f(x.get_high()));"},
{"lineNum":"  778","line":"#endif"},
{"lineNum":"  779","line":"}"},
{"lineNum":"  780","line":""},
{"lineNum":"  781","line":"#endif // MAX_VECTOR_SIZE >= 512"},
{"lineNum":"  782","line":""},
{"lineNum":"  783","line":"// Helper function: log_special_cases(x,r). Handle special cases for log function"},
{"lineNum":"  784","line":"#if MAX_VECTOR_SIZE >= 512"},
{"lineNum":"  785","line":"static inline Vec8d log_special_cases(Vec8d const & x1, Vec8d const & r) {"},
{"lineNum":"  786","line":"    Vec8d res = r;"},
{"lineNum":"  787","line":"#if INSTRSET >= 10  // AVX512DQ"},
{"lineNum":"  788","line":"    Vec8db specialcases = _mm512_fpclass_pd_mask(x1, 0x7E); // zero, subnormal, negative, +-inf"},
{"lineNum":"  789","line":"    if (!horizontal_or(specialcases)) {"},
{"lineNum":"  790","line":"        return res;            // normal path"},
{"lineNum":"  791","line":"    }"},
{"lineNum":"  792","line":"    res = _mm512_fixupimm_pd(res, x1, Vec8q(0x03530411), 0); // handle most cases"},
{"lineNum":"  793","line":"    res = select(Vec8db(_mm512_fpclass_pd_mask(x1, 0x26)),-infinite_vec<Vec8d>(),res); // subnormal -> -INF"},
{"lineNum":"  794","line":"    res = select(Vec8db(_mm512_fpclass_pd_mask(x1, 0x50)),nan_vec<Vec8d>(NAN_LOG),res); // negative -> specific NAN"},
{"lineNum":"  795","line":"    return res;"},
{"lineNum":"  796","line":"#else"},
{"lineNum":"  797","line":"    Vec8db overflow = !is_finite(x1);"},
{"lineNum":"  798","line":"    Vec8db underflow = x1 < VM_SMALLEST_NORMAL;  // denormals not supported by this functions"},
{"lineNum":"  799","line":"    if (!horizontal_or(overflow | underflow)) {"},
{"lineNum":"  800","line":"        return res;                              // normal path"},
{"lineNum":"  801","line":"    }"},
{"lineNum":"  802","line":"    // overflow and underflow"},
{"lineNum":"  803","line":"    res = select(underflow, nan_vec<Vec8d>(NAN_LOG), res);                // x1  < 0 gives NAN"},
{"lineNum":"  804","line":"    res = select(is_zero_or_subnormal(x1), -infinite_vec<Vec8d>(), res);  // x1 == 0 gives -INF"},
{"lineNum":"  805","line":"    res = select(overflow, x1, res);                                      // INF or NAN goes through"},
{"lineNum":"  806","line":"    res = select(is_inf(x1) & sign_bit(x1), nan_vec<Vec8d>(NAN_LOG), res);// -INF gives NAN"},
{"lineNum":"  807","line":"    return res;"},
{"lineNum":"  808","line":"#endif // INSTRSET"},
{"lineNum":"  809","line":"}"},
{"lineNum":"  810","line":""},
{"lineNum":"  811","line":"static inline Vec16f log_special_cases(Vec16f const & x1, Vec16f const & r) {"},
{"lineNum":"  812","line":"    Vec16f res = r;"},
{"lineNum":"  813","line":"#if INSTRSET >= 10  // AVX512DQ"},
{"lineNum":"  814","line":"    Vec16fb specialcases = _mm512_fpclass_ps_mask(x1, 0x7E); // zero, subnormal, negative, +-inf"},
{"lineNum":"  815","line":"    if (!horizontal_or(specialcases)) {"},
{"lineNum":"  816","line":"        return res;            // normal path"},
{"lineNum":"  817","line":"    }"},
{"lineNum":"  818","line":"    res = _mm512_fixupimm_ps(res, x1, Vec16i(0x03530411), 0); // handle most cases"},
{"lineNum":"  819","line":"    res = select(Vec16fb(_mm512_fpclass_ps_mask(x1, 0x26)),-infinite_vec<Vec16f>(),res); // subnormal -> -INF"},
{"lineNum":"  820","line":"    res = select(Vec16fb(_mm512_fpclass_ps_mask(x1, 0x50)),nan_vec<Vec16f>(NAN_LOG),res); // negative -> specific NAN"},
{"lineNum":"  821","line":"    return res;"},
{"lineNum":"  822","line":"#else"},
{"lineNum":"  823","line":"    Vec16fb overflow = !is_finite(x1);"},
{"lineNum":"  824","line":"    Vec16fb underflow = x1 < VM_SMALLEST_NORMALF;  // denormals not supported by this functions"},
{"lineNum":"  825","line":"    if (!horizontal_or(overflow | underflow)) {"},
{"lineNum":"  826","line":"        return res;                              // normal path"},
{"lineNum":"  827","line":"    }"},
{"lineNum":"  828","line":"    // overflow and underflow"},
{"lineNum":"  829","line":"    res = select(underflow, nan_vec<Vec16f>(NAN_LOG), res);                // x1  < 0 gives NAN"},
{"lineNum":"  830","line":"    res = select(is_zero_or_subnormal(x1), -infinite_vec<Vec16f>(), res);  // x1 == 0 gives -INF"},
{"lineNum":"  831","line":"    res = select(overflow, x1, res);                                      // INF or NAN goes through"},
{"lineNum":"  832","line":"    res = select(is_inf(x1) & sign_bit(x1), nan_vec<Vec16f>(NAN_LOG), res);// -INF gives NAN"},
{"lineNum":"  833","line":"    return res;"},
{"lineNum":"  834","line":"#endif // INSTRSET"},
{"lineNum":"  835","line":"}"},
{"lineNum":"  836","line":""},
{"lineNum":"  837","line":"#endif // MAX_VECTOR_SIZE >= 512"},
{"lineNum":"  838","line":""},
{"lineNum":"  839","line":"#if MAX_VECTOR_SIZE >= 256"},
{"lineNum":"  840","line":"static inline Vec4d log_special_cases(Vec4d const & x1, Vec4d const & r) {"},
{"lineNum":"  841","line":"    Vec4d res = r;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  842","line":"#if INSTRSET >= 10  // AVX512DQ AVX512VL"},
{"lineNum":"  843","line":"    __mmask8 specialcases = _mm256_fpclass_pd_mask(x1, 0x7E); // zero, subnormal, negative, +-inf"},
{"lineNum":"  844","line":"    if (specialcases == 0) {"},
{"lineNum":"  845","line":"        return res;            // normal path"},
{"lineNum":"  846","line":"    }"},
{"lineNum":"  847","line":"    res = _mm256_fixupimm_pd(res, x1, Vec4q(0x03530411), 0); // handle most cases"},
{"lineNum":"  848","line":"    res = _mm256_mask_mov_pd(res, _mm256_fpclass_pd_mask(x1, 0x26), -infinite_vec<Vec4d>()); // subnormal -> -INF"},
{"lineNum":"  849","line":"    res = _mm256_mask_mov_pd(res, _mm256_fpclass_pd_mask(x1, 0x50), nan_vec<Vec4d>(NAN_LOG)); // negative -> specific NAN"},
{"lineNum":"  850","line":"    return res;"},
{"lineNum":"  851","line":"#else"},
{"lineNum":"  852","line":"    Vec4db overflow = !is_finite(x1);"},
{"lineNum":"  853","line":"    Vec4db underflow = x1 < VM_SMALLEST_NORMAL;  // denormals not supported by this functions"},
{"lineNum":"  854","line":"    if (!horizontal_or(overflow | underflow)) {","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  855","line":"        return res;                              // normal path"},
{"lineNum":"  856","line":"    }"},
{"lineNum":"  857","line":"    // overflow and underflow"},
{"lineNum":"  858","line":"    res = select(underflow, nan_vec<Vec4d>(NAN_LOG), res);                // x1  < 0 gives NAN"},
{"lineNum":"  859","line":"    res = select(is_zero_or_subnormal(x1), -infinite_vec<Vec4d>(), res);  // x1 == 0 gives -INF"},
{"lineNum":"  860","line":"    res = select(overflow, x1, res);                                      // INF or NAN goes through"},
{"lineNum":"  861","line":"    res = select(is_inf(x1) & sign_bit(x1), nan_vec<Vec4d>(NAN_LOG), res);// -INF gives NAN","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  862","line":"    return res;"},
{"lineNum":"  863","line":"#endif // INSTRSET"},
{"lineNum":"  864","line":"}"},
{"lineNum":"  865","line":""},
{"lineNum":"  866","line":"static inline Vec8f log_special_cases(Vec8f const & x1, Vec8f const & r) {"},
{"lineNum":"  867","line":"    Vec8f res = r;"},
{"lineNum":"  868","line":"#if INSTRSET >= 10  // AVX512DQ AVX512VL"},
{"lineNum":"  869","line":"    __mmask8 specialcases = _mm256_fpclass_ps_mask(x1, 0x7E); // zero, subnormal, negative, +-inf"},
{"lineNum":"  870","line":"    if (specialcases == 0) {"},
{"lineNum":"  871","line":"        return res;            // normal path"},
{"lineNum":"  872","line":"    }"},
{"lineNum":"  873","line":"    res = _mm256_fixupimm_ps(res, x1, Vec8i(0x03530411), 0); // handle most cases"},
{"lineNum":"  874","line":"    res = _mm256_mask_mov_ps(res, _mm256_fpclass_ps_mask(x1, 0x26), -infinite_vec<Vec8f>()); // subnormal -> -INF"},
{"lineNum":"  875","line":"    res = _mm256_mask_mov_ps(res, _mm256_fpclass_ps_mask(x1, 0x50), nan_vec<Vec8f>(NAN_LOG)); // negative -> specific NAN"},
{"lineNum":"  876","line":"    return res;"},
{"lineNum":"  877","line":"#else"},
{"lineNum":"  878","line":"    Vec8fb overflow = !is_finite(x1);"},
{"lineNum":"  879","line":"    Vec8fb underflow = x1 < VM_SMALLEST_NORMALF;  // denormals not supported by this functions"},
{"lineNum":"  880","line":"    if (!horizontal_or(overflow | underflow)) {"},
{"lineNum":"  881","line":"        return res;                              // normal path"},
{"lineNum":"  882","line":"    }"},
{"lineNum":"  883","line":"    // overflow and underflow"},
{"lineNum":"  884","line":"    res = select(underflow, nan_vec<Vec8f>(NAN_LOG), res);                // x1  < 0 gives NAN"},
{"lineNum":"  885","line":"    res = select(is_zero_or_subnormal(x1), -infinite_vec<Vec8f>(), res);  // x1 == 0 gives -INF"},
{"lineNum":"  886","line":"    res = select(overflow, x1, res);                                      // INF or NAN goes through"},
{"lineNum":"  887","line":"    res = select(is_inf(x1) & sign_bit(x1), nan_vec<Vec8f>(NAN_LOG), res);// -INF gives NAN"},
{"lineNum":"  888","line":"    return res;"},
{"lineNum":"  889","line":"#endif // INSTRSET"},
{"lineNum":"  890","line":"}"},
{"lineNum":"  891","line":""},
{"lineNum":"  892","line":"#endif // MAX_VECTOR_SIZE >= 256"},
{"lineNum":"  893","line":""},
{"lineNum":"  894","line":"static inline Vec2d log_special_cases(Vec2d const & x1, Vec2d const & r) {"},
{"lineNum":"  895","line":"    Vec2d res = r;"},
{"lineNum":"  896","line":"#if INSTRSET >= 10  // AVX512DQ AVX512VL"},
{"lineNum":"  897","line":"    __mmask8 specialcases = _mm_fpclass_pd_mask(x1, 0x7E); // zero, subnormal, negative, +-inf"},
{"lineNum":"  898","line":"    if (specialcases == 0) {"},
{"lineNum":"  899","line":"        return res;            // normal path"},
{"lineNum":"  900","line":"    }"},
{"lineNum":"  901","line":"    res = _mm_fixupimm_pd(res, x1, Vec2q(0x03530411), 0); // handle most cases"},
{"lineNum":"  902","line":"    res = _mm_mask_mov_pd(res, _mm_fpclass_pd_mask(x1, 0x26), -infinite_vec<Vec2d>()); // subnormal -> -INF"},
{"lineNum":"  903","line":"    res = _mm_mask_mov_pd(res, _mm_fpclass_pd_mask(x1, 0x50), nan_vec<Vec2d>(NAN_LOG)); // negative -> specific NAN"},
{"lineNum":"  904","line":"    return res;"},
{"lineNum":"  905","line":"#else"},
{"lineNum":"  906","line":"    Vec2db overflow = !is_finite(x1);"},
{"lineNum":"  907","line":"    Vec2db underflow = x1 < VM_SMALLEST_NORMAL;  // denormals not supported by this functions"},
{"lineNum":"  908","line":"    if (!horizontal_or(overflow | underflow)) {"},
{"lineNum":"  909","line":"        return res;                              // normal path"},
{"lineNum":"  910","line":"    }"},
{"lineNum":"  911","line":"    // overflow and underflow"},
{"lineNum":"  912","line":"    res = select(underflow, nan_vec<Vec2d>(NAN_LOG), res);                // x1  < 0 gives NAN"},
{"lineNum":"  913","line":"    res = select(is_zero_or_subnormal(x1), -infinite_vec<Vec2d>(), res);  // x1 == 0 gives -INF"},
{"lineNum":"  914","line":"    res = select(overflow, x1, res);                                      // INF or NAN goes through"},
{"lineNum":"  915","line":"    res = select(is_inf(x1) & sign_bit(x1), nan_vec<Vec2d>(NAN_LOG), res);// -INF gives NAN"},
{"lineNum":"  916","line":"    return res;"},
{"lineNum":"  917","line":"#endif // INSTRSET"},
{"lineNum":"  918","line":"}"},
{"lineNum":"  919","line":""},
{"lineNum":"  920","line":"static inline Vec4f log_special_cases(Vec4f const & x1, Vec4f const & r) {"},
{"lineNum":"  921","line":"    Vec4f res = r;"},
{"lineNum":"  922","line":"#if INSTRSET >= 10  // AVX512DQ AVX512VL"},
{"lineNum":"  923","line":"    __mmask8 specialcases = _mm_fpclass_ps_mask(x1, 0x7E); // zero, subnormal, negative, +-inf"},
{"lineNum":"  924","line":"    if (specialcases == 0) {"},
{"lineNum":"  925","line":"        return res;            // normal path"},
{"lineNum":"  926","line":"    }"},
{"lineNum":"  927","line":"    res = _mm_fixupimm_ps(res, x1, Vec4i(0x03530411), 0); // handle most cases"},
{"lineNum":"  928","line":"    res = _mm_mask_mov_ps(res, _mm_fpclass_ps_mask(x1, 0x26), -infinite_vec<Vec4f>()); // subnormal -> -INF"},
{"lineNum":"  929","line":"    res = _mm_mask_mov_ps(res, _mm_fpclass_ps_mask(x1, 0x50), nan_vec<Vec4f>(NAN_LOG)); // negative -> specific NAN"},
{"lineNum":"  930","line":"    return res;"},
{"lineNum":"  931","line":"#else"},
{"lineNum":"  932","line":"    Vec4fb overflow = !is_finite(x1);"},
{"lineNum":"  933","line":"    Vec4fb underflow = x1 < VM_SMALLEST_NORMALF;  // denormals not supported by this functions"},
{"lineNum":"  934","line":"    if (!horizontal_or(overflow | underflow)) {"},
{"lineNum":"  935","line":"        return res;                              // normal path"},
{"lineNum":"  936","line":"    }"},
{"lineNum":"  937","line":"    // overflow and underflow"},
{"lineNum":"  938","line":"    res = select(underflow, nan_vec<Vec4f>(NAN_LOG), res);                // x1  < 0 gives NAN"},
{"lineNum":"  939","line":"    res = select(is_zero_or_subnormal(x1), -infinite_vec<Vec4f>(), res);  // x1 == 0 gives -INF"},
{"lineNum":"  940","line":"    res = select(overflow, x1, res);                                      // INF or NAN goes through"},
{"lineNum":"  941","line":"    res = select(is_inf(x1) & sign_bit(x1), nan_vec<Vec4f>(NAN_LOG), res);// -INF gives NAN"},
{"lineNum":"  942","line":"    return res;"},
{"lineNum":"  943","line":"#endif // INSTRSET"},
{"lineNum":"  944","line":"}"},
{"lineNum":"  945","line":""},
{"lineNum":"  946","line":""},
{"lineNum":"  947","line":"// log function, double precision"},
{"lineNum":"  948","line":"// template parameters:"},
{"lineNum":"  949","line":"// VTYPE:  f.p. vector type"},
{"lineNum":"  950","line":"// BVTYPE: boolean vector type"},
{"lineNum":"  951","line":"// M1: 0 for log, 1 for log1p, 3 for log1p with pedantic preservation of signed zero"},
{"lineNum":"  952","line":"template<class VTYPE, class BVTYPE, int M1>"},
{"lineNum":"  953","line":"static inline VTYPE log_d(VTYPE const & initial_x) {"},
{"lineNum":"  954","line":""},
{"lineNum":"  955","line":"    // define constants"},
{"lineNum":"  956","line":"    const double ln2_hi =  0.693359375;"},
{"lineNum":"  957","line":"    const double ln2_lo = -2.121944400546905827679E-4;"},
{"lineNum":"  958","line":"    const double P0log  =  7.70838733755885391666E0;"},
{"lineNum":"  959","line":"    const double P1log  =  1.79368678507819816313E1;"},
{"lineNum":"  960","line":"    const double P2log  =  1.44989225341610930846E1;"},
{"lineNum":"  961","line":"    const double P3log  =  4.70579119878881725854E0;"},
{"lineNum":"  962","line":"    const double P4log  =  4.97494994976747001425E-1;"},
{"lineNum":"  963","line":"    const double P5log  =  1.01875663804580931796E-4;"},
{"lineNum":"  964","line":"    const double Q0log  =  2.31251620126765340583E1;"},
{"lineNum":"  965","line":"    const double Q1log  =  7.11544750618563894466E1;"},
{"lineNum":"  966","line":"    const double Q2log  =  8.29875266912776603211E1;"},
{"lineNum":"  967","line":"    const double Q3log  =  4.52279145837532221105E1;"},
{"lineNum":"  968","line":"    const double Q4log  =  1.12873587189167450590E1;"},
{"lineNum":"  969","line":""},
{"lineNum":"  970","line":"    VTYPE  x1, x, x2, px, qx, res, fe;           // data vectors"},
{"lineNum":"  971","line":"    BVTYPE blend;//, overflow, underflow;           // boolean vectors"},
{"lineNum":"  972","line":""},
{"lineNum":"  973","line":"    if (M1 == 0) {"},
{"lineNum":"  974","line":"        x1 = initial_x;                          // log(x)"},
{"lineNum":"  975","line":"    }"},
{"lineNum":"  976","line":"    else {"},
{"lineNum":"  977","line":"        x1 = initial_x + 1.0;                    // log(x+1)"},
{"lineNum":"  978","line":"    }"},
{"lineNum":"  979","line":"    // separate mantissa from exponent"},
{"lineNum":"  980","line":"    // VTYPE x  = fraction(x1) * 0.5;"},
{"lineNum":"  981","line":"    x  = fraction_2(x1);"},
{"lineNum":"  982","line":"    fe = exponent_f(x1);"},
{"lineNum":"  983","line":""},
{"lineNum":"  984","line":"    blend = x > VM_SQRT2*0.5;"},
{"lineNum":"  985","line":"    x  = if_add(!blend, x, x);                   // conditional add"},
{"lineNum":"  986","line":"    fe = if_add(blend, fe, 1.);                  // conditional add"},
{"lineNum":"  987","line":""},
{"lineNum":"  988","line":"    if (M1 == 0) {"},
{"lineNum":"  989","line":"        // log(x). Expand around 1.0"},
{"lineNum":"  990","line":"        x -= 1.0;"},
{"lineNum":"  991","line":"    }"},
{"lineNum":"  992","line":"    else {"},
{"lineNum":"  993","line":"        // log(x+1). Avoid loss of precision when adding 1 and later subtracting 1 if exponent = 0"},
{"lineNum":"  994","line":"        x = select(fe==0., initial_x, x - 1.0);"},
{"lineNum":"  995","line":"    }"},
{"lineNum":"  996","line":""},
{"lineNum":"  997","line":"    // rational form"},
{"lineNum":"  998","line":"    px  = polynomial_5 (x, P0log, P1log, P2log, P3log, P4log, P5log);"},
{"lineNum":"  999","line":"    x2  = x * x;"},
{"lineNum":" 1000","line":"    px *= x * x2;"},
{"lineNum":" 1001","line":"    qx  = polynomial_5n(x, Q0log, Q1log, Q2log, Q3log, Q4log);"},
{"lineNum":" 1002","line":"    res = px / qx ;"},
{"lineNum":" 1003","line":""},
{"lineNum":" 1004","line":"    // add exponent"},
{"lineNum":" 1005","line":"    res  = mul_add(fe, ln2_lo, res);             // res += fe * ln2_lo;"},
{"lineNum":" 1006","line":"    res += nmul_add(x2, 0.5, x);                 // res += x  - 0.5 * x2;"},
{"lineNum":" 1007","line":"    res  = mul_add(fe, ln2_hi, res);             // res += fe * ln2_hi;"},
{"lineNum":" 1008","line":""},
{"lineNum":" 1009","line":"    if (M1 & 2) {                                // pedantic preservation of signed zero"},
{"lineNum":" 1010","line":"        // (I cannot find a way to detect if -fno-signed-zeros is turned on)"},
{"lineNum":" 1011","line":"        res = select(initial_x == 0., initial_x, res);"},
{"lineNum":" 1012","line":"    }"},
{"lineNum":" 1013","line":""},
{"lineNum":" 1014","line":"    // handle special cases, or return res"},
{"lineNum":" 1015","line":"    return log_special_cases(x1, res);"},
{"lineNum":" 1016","line":"}"},
{"lineNum":" 1017","line":""},
{"lineNum":" 1018","line":""},
{"lineNum":" 1019","line":"static inline Vec2d log(Vec2d const & x) {"},
{"lineNum":" 1020","line":"    return log_d<Vec2d, Vec2db, 0>(x);"},
{"lineNum":" 1021","line":"}"},
{"lineNum":" 1022","line":""},
{"lineNum":" 1023","line":"static inline Vec2d log1p(Vec2d const & x) {"},
{"lineNum":" 1024","line":"    return log_d<Vec2d, Vec2db, 3>(x);"},
{"lineNum":" 1025","line":"}"},
{"lineNum":" 1026","line":""},
{"lineNum":" 1027","line":"static inline Vec2d log2(Vec2d const & x) {"},
{"lineNum":" 1028","line":"    return VM_LOG2E * log_d<Vec2d, Vec2db, 0>(x);"},
{"lineNum":" 1029","line":"}"},
{"lineNum":" 1030","line":""},
{"lineNum":" 1031","line":"static inline Vec2d log10(Vec2d const & x) {"},
{"lineNum":" 1032","line":"    return VM_LOG10E * log_d<Vec2d, Vec2db, 0>(x);"},
{"lineNum":" 1033","line":"}"},
{"lineNum":" 1034","line":""},
{"lineNum":" 1035","line":"#if MAX_VECTOR_SIZE >= 256"},
{"lineNum":" 1036","line":""},
{"lineNum":" 1037","line":"static inline Vec4d log(Vec4d const & x) {"},
{"lineNum":" 1038","line":"    return log_d<Vec4d, Vec4db, 0>(x);"},
{"lineNum":" 1039","line":"}"},
{"lineNum":" 1040","line":""},
{"lineNum":" 1041","line":"static inline Vec4d log1p(Vec4d const & x) {"},
{"lineNum":" 1042","line":"    return log_d<Vec4d, Vec4db, 3>(x);"},
{"lineNum":" 1043","line":"}"},
{"lineNum":" 1044","line":""},
{"lineNum":" 1045","line":"static inline Vec4d log2(Vec4d const & x) {"},
{"lineNum":" 1046","line":"    return VM_LOG2E * log_d<Vec4d, Vec4db, 0>(x);"},
{"lineNum":" 1047","line":"}"},
{"lineNum":" 1048","line":""},
{"lineNum":" 1049","line":"static inline Vec4d log10(Vec4d const & x) {"},
{"lineNum":" 1050","line":"    return VM_LOG10E * log_d<Vec4d, Vec4db, 0>(x);"},
{"lineNum":" 1051","line":"}"},
{"lineNum":" 1052","line":""},
{"lineNum":" 1053","line":"#endif // MAX_VECTOR_SIZE >= 256"},
{"lineNum":" 1054","line":""},
{"lineNum":" 1055","line":"#if MAX_VECTOR_SIZE >= 512"},
{"lineNum":" 1056","line":""},
{"lineNum":" 1057","line":"static inline Vec8d log(Vec8d const & x) {"},
{"lineNum":" 1058","line":"    return log_d<Vec8d, Vec8db, 0>(x);"},
{"lineNum":" 1059","line":"}"},
{"lineNum":" 1060","line":""},
{"lineNum":" 1061","line":"static inline Vec8d log1p(Vec8d const & x) {"},
{"lineNum":" 1062","line":"    return log_d<Vec8d, Vec8db, 3>(x);"},
{"lineNum":" 1063","line":"}"},
{"lineNum":" 1064","line":""},
{"lineNum":" 1065","line":"static inline Vec8d log2(Vec8d const & x) {"},
{"lineNum":" 1066","line":"    return VM_LOG2E * log_d<Vec8d, Vec8db, 0>(x);"},
{"lineNum":" 1067","line":"}"},
{"lineNum":" 1068","line":""},
{"lineNum":" 1069","line":"static inline Vec8d log10(Vec8d const & x) {"},
{"lineNum":" 1070","line":"    return VM_LOG10E * log_d<Vec8d, Vec8db, 0>(x);"},
{"lineNum":" 1071","line":"}"},
{"lineNum":" 1072","line":""},
{"lineNum":" 1073","line":"#endif // MAX_VECTOR_SIZE >= 512"},
{"lineNum":" 1074","line":""},
{"lineNum":" 1075","line":""},
{"lineNum":" 1076","line":""},
{"lineNum":" 1077","line":"// log function, single precision"},
{"lineNum":" 1078","line":"// template parameters:"},
{"lineNum":" 1079","line":"// VTYPE:  f.p. vector type"},
{"lineNum":" 1080","line":"// ITYPE:  integer vector type with same element size"},
{"lineNum":" 1081","line":"// BVTYPE: boolean vector type"},
{"lineNum":" 1082","line":"// BTYPEI: boolean vector type for ITYPE"},
{"lineNum":" 1083","line":"// M1: 0 for log, 1 for log1p, 3 for log1p with pedantic preservation of signed zero"},
{"lineNum":" 1084","line":"template<class VTYPE, class ITYPE, class BVTYPE, class BTYPEI, int M1>"},
{"lineNum":" 1085","line":"static inline VTYPE log_f(VTYPE const & initial_x) {"},
{"lineNum":" 1086","line":""},
{"lineNum":" 1087","line":"    // define constants"},
{"lineNum":" 1088","line":"    const float ln2f_hi =  0.693359375f;"},
{"lineNum":" 1089","line":"    const float ln2f_lo = -2.12194440E-4f;"},
{"lineNum":" 1090","line":"    const float P0logf  =  3.3333331174E-1f;"},
{"lineNum":" 1091","line":"    const float P1logf  = -2.4999993993E-1f;"},
{"lineNum":" 1092","line":"    const float P2logf  =  2.0000714765E-1f;"},
{"lineNum":" 1093","line":"    const float P3logf  = -1.6668057665E-1f;"},
{"lineNum":" 1094","line":"    const float P4logf  =  1.4249322787E-1f;"},
{"lineNum":" 1095","line":"    const float P5logf  = -1.2420140846E-1f;"},
{"lineNum":" 1096","line":"    const float P6logf  =  1.1676998740E-1f;"},
{"lineNum":" 1097","line":"    const float P7logf  = -1.1514610310E-1f;"},
{"lineNum":" 1098","line":"    const float P8logf  =  7.0376836292E-2f;"},
{"lineNum":" 1099","line":""},
{"lineNum":" 1100","line":"    VTYPE  x1, x, res, x2, fe;                   // data vectors"},
{"lineNum":" 1101","line":"    ITYPE  e;                                    // integer vector"},
{"lineNum":" 1102","line":"    BVTYPE blend, overflow, underflow;           // boolean vectors"},
{"lineNum":" 1103","line":""},
{"lineNum":" 1104","line":"    if (M1 == 0) {"},
{"lineNum":" 1105","line":"        x1 = initial_x;                          // log(x)"},
{"lineNum":" 1106","line":"    }"},
{"lineNum":" 1107","line":"    else {"},
{"lineNum":" 1108","line":"        x1 = initial_x + 1.0f;                   // log(x+1)"},
{"lineNum":" 1109","line":"    }"},
{"lineNum":" 1110","line":""},
{"lineNum":" 1111","line":"    // separate mantissa from exponent"},
{"lineNum":" 1112","line":"    x = fraction_2(x1);"},
{"lineNum":" 1113","line":"    e = exponent(x1);"},
{"lineNum":" 1114","line":""},
{"lineNum":" 1115","line":"    blend = x > float(VM_SQRT2*0.5);"},
{"lineNum":" 1116","line":"    x  = if_add(!blend, x, x);                   // conditional add"},
{"lineNum":" 1117","line":"    e  = if_add(BTYPEI(blend),  e, ITYPE(1));    // conditional add"},
{"lineNum":" 1118","line":"    fe = to_float(e);"},
{"lineNum":" 1119","line":""},
{"lineNum":" 1120","line":"    if (M1 == 0) {"},
{"lineNum":" 1121","line":"        // log(x). Expand around 1.0"},
{"lineNum":" 1122","line":"        x -= 1.0f;"},
{"lineNum":" 1123","line":"    }"},
{"lineNum":" 1124","line":"    else {"},
{"lineNum":" 1125","line":"        // log(x+1). Avoid loss of precision when adding 1 and later subtracting 1 if exponent = 0"},
{"lineNum":" 1126","line":"        x = select(BVTYPE(e==0), initial_x, x - 1.0f);"},
{"lineNum":" 1127","line":"    }"},
{"lineNum":" 1128","line":""},
{"lineNum":" 1129","line":"    // Taylor expansion"},
{"lineNum":" 1130","line":"    res = polynomial_8(x, P0logf, P1logf, P2logf, P3logf, P4logf, P5logf, P6logf, P7logf, P8logf);"},
{"lineNum":" 1131","line":"    x2  = x*x;"},
{"lineNum":" 1132","line":"    res *= x2*x;"},
{"lineNum":" 1133","line":""},
{"lineNum":" 1134","line":"    // add exponent"},
{"lineNum":" 1135","line":"    res  = mul_add(fe, ln2f_lo, res);            // res += ln2f_lo  * fe;"},
{"lineNum":" 1136","line":"    res += nmul_add(x2, 0.5f, x);                // res += x - 0.5f * x2;"},
{"lineNum":" 1137","line":"    res  = mul_add(fe, ln2f_hi, res);            // res += ln2f_hi  * fe;"},
{"lineNum":" 1138","line":""},
{"lineNum":" 1139","line":"    if (M1 & 2) {                                // pedantic preservation of signed zero"},
{"lineNum":" 1140","line":"        // (I cannot find a way to detect if -fno-signed-zeros is turned on)"},
{"lineNum":" 1141","line":"        res = select(initial_x == 0., initial_x, res);"},
{"lineNum":" 1142","line":"    }"},
{"lineNum":" 1143","line":""},
{"lineNum":" 1144","line":"    // handle special cases, or return res"},
{"lineNum":" 1145","line":"    return log_special_cases(x1, res);"},
{"lineNum":" 1146","line":"}"},
{"lineNum":" 1147","line":""},
{"lineNum":" 1148","line":"static inline Vec4f log(Vec4f const & x) {"},
{"lineNum":" 1149","line":"    return log_f<Vec4f, Vec4i, Vec4fb, Vec4ib, 0>(x);"},
{"lineNum":" 1150","line":"}"},
{"lineNum":" 1151","line":""},
{"lineNum":" 1152","line":"static inline Vec4f log1p(Vec4f const & x) {"},
{"lineNum":" 1153","line":"    return log_f<Vec4f, Vec4i, Vec4fb, Vec4ib, 3>(x);"},
{"lineNum":" 1154","line":"}"},
{"lineNum":" 1155","line":""},
{"lineNum":" 1156","line":"static inline Vec4f log2(Vec4f const & x) {"},
{"lineNum":" 1157","line":"    return float(VM_LOG2E) * log_f<Vec4f, Vec4i, Vec4fb, Vec4ib, 0>(x);"},
{"lineNum":" 1158","line":"}"},
{"lineNum":" 1159","line":""},
{"lineNum":" 1160","line":"static inline Vec4f log10(Vec4f const & x) {"},
{"lineNum":" 1161","line":"    return float(VM_LOG10E) * log_f<Vec4f, Vec4i, Vec4fb, Vec4ib, 0>(x);"},
{"lineNum":" 1162","line":"}"},
{"lineNum":" 1163","line":""},
{"lineNum":" 1164","line":"#if MAX_VECTOR_SIZE >= 256"},
{"lineNum":" 1165","line":""},
{"lineNum":" 1166","line":"static inline Vec8f log(Vec8f const & x) {"},
{"lineNum":" 1167","line":"    return log_f<Vec8f, Vec8i, Vec8fb, Vec8ib, 0>(x);"},
{"lineNum":" 1168","line":"}"},
{"lineNum":" 1169","line":""},
{"lineNum":" 1170","line":"static inline Vec8f log1p(Vec8f const & x) {"},
{"lineNum":" 1171","line":"    return log_f<Vec8f, Vec8i, Vec8fb, Vec8ib, 3>(x);"},
{"lineNum":" 1172","line":"}"},
{"lineNum":" 1173","line":""},
{"lineNum":" 1174","line":"static inline Vec8f log2(Vec8f const & x) {"},
{"lineNum":" 1175","line":"    return float(VM_LOG2E) * log_f<Vec8f, Vec8i, Vec8fb, Vec8ib, 0>(x);"},
{"lineNum":" 1176","line":"}"},
{"lineNum":" 1177","line":""},
{"lineNum":" 1178","line":"static inline Vec8f log10(Vec8f const & x) {"},
{"lineNum":" 1179","line":"    return float(VM_LOG10E) * log_f<Vec8f, Vec8i, Vec8fb, Vec8ib, 0>(x);"},
{"lineNum":" 1180","line":"}"},
{"lineNum":" 1181","line":""},
{"lineNum":" 1182","line":"#endif // MAX_VECTOR_SIZE >= 256"},
{"lineNum":" 1183","line":""},
{"lineNum":" 1184","line":"#if MAX_VECTOR_SIZE >= 512"},
{"lineNum":" 1185","line":""},
{"lineNum":" 1186","line":"static inline Vec16f log(Vec16f const & x) {"},
{"lineNum":" 1187","line":"    return log_f<Vec16f, Vec16i, Vec16fb, Vec16ib, 0>(x);"},
{"lineNum":" 1188","line":"}"},
{"lineNum":" 1189","line":""},
{"lineNum":" 1190","line":"static inline Vec16f log1p(Vec16f const & x) {"},
{"lineNum":" 1191","line":"    return log_f<Vec16f, Vec16i, Vec16fb, Vec16ib, 3>(x);"},
{"lineNum":" 1192","line":"}"},
{"lineNum":" 1193","line":""},
{"lineNum":" 1194","line":"static inline Vec16f log2(Vec16f const & x) {"},
{"lineNum":" 1195","line":"    return float(VM_LOG2E) * log_f<Vec16f, Vec16i, Vec16fb, Vec16ib, 0>(x);"},
{"lineNum":" 1196","line":"}"},
{"lineNum":" 1197","line":""},
{"lineNum":" 1198","line":"static inline Vec16f log10(Vec16f const & x) {"},
{"lineNum":" 1199","line":"    return float(VM_LOG10E) * log_f<Vec16f, Vec16i, Vec16fb, Vec16ib, 0>(x);"},
{"lineNum":" 1200","line":"}"},
{"lineNum":" 1201","line":""},
{"lineNum":" 1202","line":"#endif // MAX_VECTOR_SIZE >= 512"},
{"lineNum":" 1203","line":""},
{"lineNum":" 1204","line":""},
{"lineNum":" 1205","line":"/******************************************************************************"},
{"lineNum":" 1206","line":"*           Cube root and reciprocal cube root"},
{"lineNum":" 1207","line":"******************************************************************************/"},
{"lineNum":" 1208","line":""},
{"lineNum":" 1209","line":"// cube root template, double precision"},
{"lineNum":" 1210","line":"// template parameters:"},
{"lineNum":" 1211","line":"// VTYPE:  f.p. vector type"},
{"lineNum":" 1212","line":"// ITYPE:  uint32_t integer vector type with same total number of bits"},
{"lineNum":" 1213","line":"// ITYPE2: uint64_t integer vector type with same total number of bits"},
{"lineNum":" 1214","line":"// BVTYPE: boolean vector type"},
{"lineNum":" 1215","line":"// CR:     -1 for reciprocal cube root, 1 for cube root, 2 for cube root squared"},
{"lineNum":" 1216","line":"template<class VTYPE, class ITYPE, class ITYPE2, class BVTYPE, int CR>"},
{"lineNum":" 1217","line":"static inline VTYPE cbrt_d(VTYPE const & x) {"},
{"lineNum":" 1218","line":"    const int iter = 7;     // iteration count of x^(-1/3) loop"},
{"lineNum":" 1219","line":"    int i;"},
{"lineNum":" 1220","line":"    VTYPE  xa, xa3, a, a2;"},
{"lineNum":" 1221","line":"    ITYPE  m1, m2;"},
{"lineNum":" 1222","line":"    BVTYPE underflow;"},
{"lineNum":" 1223","line":"    ITYPE2 q1(0x5540000000000000ULL);            // exponent bias"},
{"lineNum":" 1224","line":"    ITYPE2 q2(0x0005555500000000ULL);            // exponent multiplier for 1/3"},
{"lineNum":" 1225","line":"    ITYPE2 q3(0x0010000000000000ULL);            // denormal limit"},
{"lineNum":" 1226","line":"    const double one_third  = 1./3.;"},
{"lineNum":" 1227","line":"    const double four_third = 4./3.;"},
{"lineNum":" 1228","line":""},
{"lineNum":" 1229","line":"    xa  = abs(x);"},
{"lineNum":" 1230","line":"    xa3 = one_third*xa;"},
{"lineNum":" 1231","line":""},
{"lineNum":" 1232","line":"    // multiply exponent by -1/3"},
{"lineNum":" 1233","line":"    m1 = reinterpret_i(xa);"},
{"lineNum":" 1234","line":"    m2 = ITYPE(q1) - (m1 >> 20) * ITYPE(q2);"},
{"lineNum":" 1235","line":"    a  = reinterpret_d(m2);"},
{"lineNum":" 1236","line":"    underflow = BVTYPE(ITYPE2(m1) <= q3);        // true if denormal or zero"},
{"lineNum":" 1237","line":""},
{"lineNum":" 1238","line":"    // Newton Raphson iteration. Warning: may overflow!"},
{"lineNum":" 1239","line":"    for (i = 0; i < iter-1; i++) {"},
{"lineNum":" 1240","line":"        a2 = a * a;"},
{"lineNum":" 1241","line":"        a = nmul_add(xa3, a2*a2, four_third*a);  // a = four_third*a - xa3*a2*a2;"},
{"lineNum":" 1242","line":"    }"},
{"lineNum":" 1243","line":"    // last iteration with better precision"},
{"lineNum":" 1244","line":"    a2 = a * a;"},
{"lineNum":" 1245","line":"    a = mul_add(one_third, nmul_add(xa, a2*a2, a), a); // a = a + one_third*(a - xa*a2*a2);"},
{"lineNum":" 1246","line":""},
{"lineNum":" 1247","line":"    if (CR == -1) {  // reciprocal cube root"},
{"lineNum":" 1248","line":"        // (note: gives wrong sign when input is INF)"},
{"lineNum":" 1249","line":"        // generate INF if underflow"},
{"lineNum":" 1250","line":"        a = select(underflow, infinite_vec<VTYPE>(), a);"},
{"lineNum":" 1251","line":"        // get sign"},
{"lineNum":" 1252","line":"        a = sign_combine(a, x);"},
{"lineNum":" 1253","line":"    }"},
{"lineNum":" 1254","line":"    else if (CR == 1) {     // cube root"},
{"lineNum":" 1255","line":"        a = a * a * x;"},
{"lineNum":" 1256","line":"        // generate 0 if underflow"},
{"lineNum":" 1257","line":"        a = select(underflow, 0., a);"},
{"lineNum":" 1258","line":"    }"},
{"lineNum":" 1259","line":"    else if (CR == 2) {     // cube root squared"},
{"lineNum":" 1260","line":"        // (note: gives wrong sign when input is INF)"},
{"lineNum":" 1261","line":"        a = a * xa;"},
{"lineNum":" 1262","line":"        // generate 0 if underflow"},
{"lineNum":" 1263","line":"        a = select(underflow, 0., a);"},
{"lineNum":" 1264","line":"    }"},
{"lineNum":" 1265","line":"    return a;"},
{"lineNum":" 1266","line":"}"},
{"lineNum":" 1267","line":""},
{"lineNum":" 1268","line":"// template instances for cbrt and reciprocal_cbrt"},
{"lineNum":" 1269","line":""},
{"lineNum":" 1270","line":"// cube root"},
{"lineNum":" 1271","line":"static inline Vec2d cbrt(Vec2d const & x) {"},
{"lineNum":" 1272","line":"    return cbrt_d<Vec2d, Vec4ui, Vec2uq, Vec2db, 1> (x);"},
{"lineNum":" 1273","line":"}"},
{"lineNum":" 1274","line":""},
{"lineNum":" 1275","line":"// reciprocal cube root"},
{"lineNum":" 1276","line":"static inline Vec2d reciprocal_cbrt(Vec2d const & x) {"},
{"lineNum":" 1277","line":"    return cbrt_d<Vec2d, Vec4ui, Vec2uq, Vec2db, -1> (x);"},
{"lineNum":" 1278","line":"}"},
{"lineNum":" 1279","line":""},
{"lineNum":" 1280","line":"// square cube root"},
{"lineNum":" 1281","line":"static inline Vec2d square_cbrt(Vec2d const & x) {"},
{"lineNum":" 1282","line":"    return cbrt_d<Vec2d, Vec4ui, Vec2uq, Vec2db, 2> (x);"},
{"lineNum":" 1283","line":"}"},
{"lineNum":" 1284","line":""},
{"lineNum":" 1285","line":"#if MAX_VECTOR_SIZE >= 256"},
{"lineNum":" 1286","line":""},
{"lineNum":" 1287","line":"static inline Vec4d cbrt(Vec4d const & x) {"},
{"lineNum":" 1288","line":"    return cbrt_d<Vec4d, Vec8ui, Vec4uq, Vec4db, 1> (x);"},
{"lineNum":" 1289","line":"}"},
{"lineNum":" 1290","line":""},
{"lineNum":" 1291","line":"static inline Vec4d reciprocal_cbrt(Vec4d const & x) {"},
{"lineNum":" 1292","line":"    return cbrt_d<Vec4d, Vec8ui, Vec4uq, Vec4db, -1> (x);"},
{"lineNum":" 1293","line":"}"},
{"lineNum":" 1294","line":""},
{"lineNum":" 1295","line":"static inline Vec4d square_cbrt(Vec4d const & x) {"},
{"lineNum":" 1296","line":"    return cbrt_d<Vec4d, Vec8ui, Vec4uq, Vec4db, 2> (x);"},
{"lineNum":" 1297","line":"}"},
{"lineNum":" 1298","line":""},
{"lineNum":" 1299","line":"#endif // MAX_VECTOR_SIZE >= 256"},
{"lineNum":" 1300","line":""},
{"lineNum":" 1301","line":"#if MAX_VECTOR_SIZE >= 512"},
{"lineNum":" 1302","line":""},
{"lineNum":" 1303","line":"static inline Vec8d cbrt(Vec8d const & x) {"},
{"lineNum":" 1304","line":"    return cbrt_d<Vec8d, Vec16ui, Vec8uq, Vec8db, 1> (x);"},
{"lineNum":" 1305","line":"}"},
{"lineNum":" 1306","line":""},
{"lineNum":" 1307","line":"static inline Vec8d reciprocal_cbrt(Vec8d const & x) {"},
{"lineNum":" 1308","line":"    return cbrt_d<Vec8d, Vec16ui, Vec8uq, Vec8db, -1> (x);"},
{"lineNum":" 1309","line":"}"},
{"lineNum":" 1310","line":""},
{"lineNum":" 1311","line":"static inline Vec8d square_cbrt(Vec8d const & x) {"},
{"lineNum":" 1312","line":"    return cbrt_d<Vec8d, Vec16ui, Vec8uq, Vec8db, 2> (x);"},
{"lineNum":" 1313","line":"}"},
{"lineNum":" 1314","line":""},
{"lineNum":" 1315","line":"#endif // MAX_VECTOR_SIZE >= 512"},
{"lineNum":" 1316","line":""},
{"lineNum":" 1317","line":""},
{"lineNum":" 1318","line":"// cube root template, single precision"},
{"lineNum":" 1319","line":"// template parameters:"},
{"lineNum":" 1320","line":"// VTYPE:  f.p. vector type"},
{"lineNum":" 1321","line":"// ITYPE:  uint32_t integer vector type"},
{"lineNum":" 1322","line":"// BVTYPE: boolean vector type"},
{"lineNum":" 1323","line":"// CR:     -1 for reciprocal cube root, 1 for cube root, 2 for cube root squared"},
{"lineNum":" 1324","line":"template<class VTYPE, class ITYPE, class BVTYPE, int CR>"},
{"lineNum":" 1325","line":"static inline VTYPE cbrt_f(VTYPE const & x) {"},
{"lineNum":" 1326","line":""},
{"lineNum":" 1327","line":"    const int iter = 4;                          // iteration count of x^(-1/3) loop"},
{"lineNum":" 1328","line":"    int i;"},
{"lineNum":" 1329","line":"    VTYPE  xa, xa3, a, a2;"},
{"lineNum":" 1330","line":"    ITYPE  m1, m2;"},
{"lineNum":" 1331","line":"    BVTYPE underflow;"},
{"lineNum":" 1332","line":"    ITYPE  q1(0x54800000U);                      // exponent bias"},
{"lineNum":" 1333","line":"    ITYPE  q2(0x002AAAAAU);                      // exponent multiplier for 1/3"},
{"lineNum":" 1334","line":"    ITYPE  q3(0x00800000U);                      // denormal limit"},
{"lineNum":" 1335","line":"    const  float one_third  = float(1./3.);"},
{"lineNum":" 1336","line":"    const  float four_third = float(4./3.);"},
{"lineNum":" 1337","line":""},
{"lineNum":" 1338","line":"    xa  = abs(x);"},
{"lineNum":" 1339","line":"    xa3 = one_third*xa;"},
{"lineNum":" 1340","line":""},
{"lineNum":" 1341","line":"    // multiply exponent by -1/3"},
{"lineNum":" 1342","line":"    m1 = reinterpret_i(xa);"},
{"lineNum":" 1343","line":"    m2 = q1 - (m1 >> 23) * q2;"},
{"lineNum":" 1344","line":"    a  = reinterpret_f(m2);"},
{"lineNum":" 1345","line":""},
{"lineNum":" 1346","line":"    underflow = BVTYPE(m1 <= q3);                // true if denormal or zero"},
{"lineNum":" 1347","line":""},
{"lineNum":" 1348","line":"    // Newton Raphson iteration"},
{"lineNum":" 1349","line":"    for (i = 0; i < iter-1; i++) {"},
{"lineNum":" 1350","line":"        a2 = a*a;"},
{"lineNum":" 1351","line":"        a = nmul_add(xa3, a2*a2, four_third*a);  // a = four_third*a - xa3*a2*a2;"},
{"lineNum":" 1352","line":"    }"},
{"lineNum":" 1353","line":"    // last iteration with better precision"},
{"lineNum":" 1354","line":"    a2 = a*a;"},
{"lineNum":" 1355","line":"    a = mul_add(one_third, nmul_add(xa, a2*a2, a), a); //a = a + one_third*(a - xa*a2*a2);"},
{"lineNum":" 1356","line":""},
{"lineNum":" 1357","line":"    if (CR == -1) {                              // reciprocal cube root"},
{"lineNum":" 1358","line":"        // generate INF if underflow"},
{"lineNum":" 1359","line":"        a = select(underflow, infinite_vec<VTYPE>(), a);"},
{"lineNum":" 1360","line":"        // get sign"},
{"lineNum":" 1361","line":"        a = sign_combine(a, x);"},
{"lineNum":" 1362","line":"    }"},
{"lineNum":" 1363","line":"    else if (CR == 1) {                          // cube root"},
{"lineNum":" 1364","line":"        a = a * a * x;"},
{"lineNum":" 1365","line":"        // generate 0 if underflow"},
{"lineNum":" 1366","line":"        a = select(underflow, 0., a);"},
{"lineNum":" 1367","line":"    }"},
{"lineNum":" 1368","line":"    else if (CR == 2) {                          // cube root squared"},
{"lineNum":" 1369","line":"        a = a * xa;"},
{"lineNum":" 1370","line":"        // generate 0 if underflow"},
{"lineNum":" 1371","line":"        a = select(underflow, 0., a);"},
{"lineNum":" 1372","line":"    }"},
{"lineNum":" 1373","line":"    return a;"},
{"lineNum":" 1374","line":"}"},
{"lineNum":" 1375","line":""},
{"lineNum":" 1376","line":"// template instances for cbrt and reciprocal_cbrt"},
{"lineNum":" 1377","line":""},
{"lineNum":" 1378","line":"// cube root"},
{"lineNum":" 1379","line":"static inline Vec4f cbrt(Vec4f const & x) {"},
{"lineNum":" 1380","line":"    return cbrt_f<Vec4f, Vec4ui, Vec4fb, 1> (x);"},
{"lineNum":" 1381","line":"}"},
{"lineNum":" 1382","line":""},
{"lineNum":" 1383","line":"// reciprocal cube root"},
{"lineNum":" 1384","line":"static inline Vec4f reciprocal_cbrt(Vec4f const & x) {"},
{"lineNum":" 1385","line":"    return cbrt_f<Vec4f, Vec4ui, Vec4fb, -1> (x);"},
{"lineNum":" 1386","line":"}"},
{"lineNum":" 1387","line":""},
{"lineNum":" 1388","line":"// square cube root"},
{"lineNum":" 1389","line":"static inline Vec4f square_cbrt(Vec4f const & x) {"},
{"lineNum":" 1390","line":"    return cbrt_f<Vec4f, Vec4ui, Vec4fb, 2> (x);"},
{"lineNum":" 1391","line":"}"},
{"lineNum":" 1392","line":""},
{"lineNum":" 1393","line":"#if MAX_VECTOR_SIZE >= 256"},
{"lineNum":" 1394","line":""},
{"lineNum":" 1395","line":"static inline Vec8f cbrt(Vec8f const & x) {"},
{"lineNum":" 1396","line":"    return cbrt_f<Vec8f, Vec8ui, Vec8fb, 1> (x);"},
{"lineNum":" 1397","line":"}"},
{"lineNum":" 1398","line":""},
{"lineNum":" 1399","line":"static inline Vec8f reciprocal_cbrt(Vec8f const & x) {"},
{"lineNum":" 1400","line":"    return cbrt_f<Vec8f, Vec8ui, Vec8fb, -1> (x);"},
{"lineNum":" 1401","line":"}"},
{"lineNum":" 1402","line":""},
{"lineNum":" 1403","line":"static inline Vec8f square_cbrt(Vec8f const & x) {"},
{"lineNum":" 1404","line":"    return cbrt_f<Vec8f, Vec8ui, Vec8fb, 2> (x);"},
{"lineNum":" 1405","line":"}"},
{"lineNum":" 1406","line":""},
{"lineNum":" 1407","line":"#endif // MAX_VECTOR_SIZE >= 256"},
{"lineNum":" 1408","line":""},
{"lineNum":" 1409","line":"#if MAX_VECTOR_SIZE >= 512"},
{"lineNum":" 1410","line":""},
{"lineNum":" 1411","line":"static inline Vec16f cbrt(Vec16f const & x) {"},
{"lineNum":" 1412","line":"    return cbrt_f<Vec16f, Vec16ui, Vec16fb, 1> (x);"},
{"lineNum":" 1413","line":"}"},
{"lineNum":" 1414","line":""},
{"lineNum":" 1415","line":"static inline Vec16f reciprocal_cbrt(Vec16f const & x) {"},
{"lineNum":" 1416","line":"    return cbrt_f<Vec16f, Vec16ui, Vec16fb, -1> (x);"},
{"lineNum":" 1417","line":"}"},
{"lineNum":" 1418","line":""},
{"lineNum":" 1419","line":"static inline Vec16f square_cbrt(Vec16f const & x) {"},
{"lineNum":" 1420","line":"    return cbrt_f<Vec16f, Vec16ui, Vec16fb, 2> (x);"},
{"lineNum":" 1421","line":"}"},
{"lineNum":" 1422","line":""},
{"lineNum":" 1423","line":"#endif // MAX_VECTOR_SIZE >= 512"},
{"lineNum":" 1424","line":""},
{"lineNum":" 1425","line":""},
{"lineNum":" 1426","line":"/* ****************************************************************************"},
{"lineNum":" 1427","line":"                    pow functions"},
{"lineNum":" 1428","line":"*******************************************************************************"},
{"lineNum":" 1429","line":"Note about standard conformance:"},
{"lineNum":" 1430","line":"This implementation of a pow function differs from the IEEE 754-2008 floating"},
{"lineNum":" 1431","line":"point standard regarding nan propagation."},
{"lineNum":" 1432","line":"The standard has pow(nan,0) = 1, and pow(1,nan) = 1, probably for historic reasons."},
{"lineNum":" 1433","line":"The present implementation is guaranteed to always propagate nan\'s for reasons"},
{"lineNum":" 1434","line":"explained in this report:"},
{"lineNum":" 1435","line":"Agner Fog: \"NAN propagation versus fault trapping in floating point code\", 2019,"},
{"lineNum":" 1436","line":"https://www.agner.org/optimize/nan_propagation.pdf"},
{"lineNum":" 1437","line":""},
{"lineNum":" 1438","line":"The standard defines another function, powr, which propagates NAN\'s, but powr"},
{"lineNum":" 1439","line":"will be less useful to programmers because it does not allow integer powers of"},
{"lineNum":" 1440","line":"negative x."},
{"lineNum":" 1441","line":""},
{"lineNum":" 1442","line":"******************************************************************************/"},
{"lineNum":" 1443","line":""},
{"lineNum":" 1444","line":"// Helper functions:"},
{"lineNum":" 1445","line":""},
{"lineNum":" 1446","line":"#if MAX_VECTOR_SIZE >= 512"},
{"lineNum":" 1447","line":""},
{"lineNum":" 1448","line":"// Helper function for power function: insert special values of pow(x,y) when x=0:"},
{"lineNum":" 1449","line":"// y<0 -> inf, y=0 -> 1, y>0 -> 0, y=nan -> nan"},
{"lineNum":" 1450","line":"static inline Vec8d wm_pow_case_x0(Vec8db const & xiszero, Vec8d const & y, Vec8d const & z) {"},
{"lineNum":" 1451","line":"#if INSTRSET >= 9"},
{"lineNum":" 1452","line":"    const __m512i table = Vec8q(0x85858A00);"},
{"lineNum":" 1453","line":"    return _mm512_mask_fixupimm_pd(z, xiszero, y, table, 0);"},
{"lineNum":" 1454","line":"#else"},
{"lineNum":" 1455","line":"    return select(xiszero, select(y < 0., infinite_vec<Vec8d>(), select(y == 0., Vec8d(1.), Vec8d(0.))), z);"},
{"lineNum":" 1456","line":"#endif"},
{"lineNum":" 1457","line":"}"},
{"lineNum":" 1458","line":""},
{"lineNum":" 1459","line":"// Helper function for power function: insert special values of pow(x,y) when x=0:"},
{"lineNum":" 1460","line":"// y<0 -> inf, y=0 -> 1, y>0 -> 0, y=nan -> nan"},
{"lineNum":" 1461","line":"static inline Vec16f wm_pow_case_x0(Vec16fb const & xiszero, Vec16f const & y, Vec16f const & z) {"},
{"lineNum":" 1462","line":"#if INSTRSET >= 9"},
{"lineNum":" 1463","line":"    const __m512i table = Vec16ui(0x85858A00);"},
{"lineNum":" 1464","line":"    return _mm512_mask_fixupimm_ps(z, xiszero, y, table, 0);"},
{"lineNum":" 1465","line":"#else"},
{"lineNum":" 1466","line":"    return select(xiszero, select(y < 0.f, infinite_vec<Vec16f>(), select(y == 0.f, Vec16f(1.f), Vec16f(0.f))), z);"},
{"lineNum":" 1467","line":"#endif"},
{"lineNum":" 1468","line":"}"},
{"lineNum":" 1469","line":""},
{"lineNum":" 1470","line":"#endif"},
{"lineNum":" 1471","line":""},
{"lineNum":" 1472","line":"#if MAX_VECTOR_SIZE >= 256"},
{"lineNum":" 1473","line":""},
{"lineNum":" 1474","line":"static inline Vec4d wm_pow_case_x0(Vec4db const & xiszero, Vec4d const & y, Vec4d const & z) {"},
{"lineNum":" 1475","line":"//#if INSTRSET >= 10"},
{"lineNum":" 1476","line":"    //const __m256i table = Vec4q(0x85858A00);"},
{"lineNum":" 1477","line":"    //return _mm256_mask_fixupimm_pd(z, xiszero, y, table, 0);"},
{"lineNum":" 1478","line":"//#else"},
{"lineNum":" 1479","line":"    return select(xiszero, select(y < 0., infinite_vec<Vec4d>(), select(y == 0., Vec4d(1.), Vec4d(0.))), z);"},
{"lineNum":" 1480","line":"//#endif"},
{"lineNum":" 1481","line":"}"},
{"lineNum":" 1482","line":""},
{"lineNum":" 1483","line":"static inline Vec8f wm_pow_case_x0(Vec8fb const & xiszero, Vec8f const & y, Vec8f const & z) {"},
{"lineNum":" 1484","line":"    return select(xiszero, select(y < 0.f, infinite_vec<Vec8f>(), select(y == 0.f, Vec8f(1.f), Vec8f(0.f))), z);"},
{"lineNum":" 1485","line":"}"},
{"lineNum":" 1486","line":""},
{"lineNum":" 1487","line":"#endif"},
{"lineNum":" 1488","line":""},
{"lineNum":" 1489","line":"static inline Vec2d wm_pow_case_x0(Vec2db const & xiszero, Vec2d const & y, Vec2d const & z) {"},
{"lineNum":" 1490","line":"//#if INSTRSET >= 10"},
{"lineNum":" 1491","line":"//    const __m128i table = Vec2q(0x85858A00);"},
{"lineNum":" 1492","line":"//    return _mm_mask_fixupimm_pd(z, xiszero, y, table, 0);"},
{"lineNum":" 1493","line":"//#else"},
{"lineNum":" 1494","line":"    return select(xiszero, select(y < 0., infinite_vec<Vec2d>(), select(y == 0., Vec2d(1.), Vec2d(0.))), z);"},
{"lineNum":" 1495","line":"//#endif"},
{"lineNum":" 1496","line":"}"},
{"lineNum":" 1497","line":""},
{"lineNum":" 1498","line":"static inline Vec4f wm_pow_case_x0(Vec4fb const & xiszero, Vec4f const & y, Vec4f const & z) {"},
{"lineNum":" 1499","line":"    return select(xiszero, select(y < 0.f, infinite_vec<Vec4f>(), select(y == 0.f, Vec4f(1.f), Vec4f(0.f))), z);"},
{"lineNum":" 1500","line":"}"},
{"lineNum":" 1501","line":""},
{"lineNum":" 1502","line":""},
{"lineNum":" 1503","line":"// ****************************************************************************"},
{"lineNum":" 1504","line":"//                pow template, double precision"},
{"lineNum":" 1505","line":"// ****************************************************************************"},
{"lineNum":" 1506","line":"// Calculate x to the power of y."},
{"lineNum":" 1507","line":""},
{"lineNum":" 1508","line":"// Precision is important here because rounding errors get multiplied by y."},
{"lineNum":" 1509","line":"// The logarithm is calculated with extra precision, and the exponent is"},
{"lineNum":" 1510","line":"// calculated separately."},
{"lineNum":" 1511","line":"// The logarithm is calculated by Pade approximation with 6\'th degree"},
{"lineNum":" 1512","line":"// polynomials. A 7\'th degree would be preferred for best precision by high y."},
{"lineNum":" 1513","line":"// The alternative method: log(x) = z + z^3*R(z)/S(z), where z = 2(x-1)/(x+1)"},
{"lineNum":" 1514","line":"// did not give better precision."},
{"lineNum":" 1515","line":""},
{"lineNum":" 1516","line":"// Template parameters:"},
{"lineNum":" 1517","line":"// VTYPE:  data vector type"},
{"lineNum":" 1518","line":"// ITYPE:  signed integer vector type"},
{"lineNum":" 1519","line":"// BVTYPE: boolean vector type"},
{"lineNum":" 1520","line":"template <class VTYPE, class ITYPE, class BVTYPE>"},
{"lineNum":" 1521","line":"static inline VTYPE pow_template_d(VTYPE const & x0, VTYPE const & y) {"},
{"lineNum":" 1522","line":""},
{"lineNum":" 1523","line":"    // define constants"},
{"lineNum":" 1524","line":"    const double ln2d_hi = 0.693145751953125;           // log(2) in extra precision, high bits"},
{"lineNum":" 1525","line":"    const double ln2d_lo = 1.42860682030941723212E-6;   // low bits of log(2)"},
{"lineNum":" 1526","line":"    const double log2e   = VM_LOG2E;                    // 1/log(2)"},
{"lineNum":" 1527","line":"    const double pow2_52 = 4503599627370496.0;          // 2^52"},
{"lineNum":" 1528","line":""},
{"lineNum":" 1529","line":"    // coefficients for Pade polynomials"},
{"lineNum":" 1530","line":"    const double P0logl =  2.0039553499201281259648E1;"},
{"lineNum":" 1531","line":"    const double P1logl =  5.7112963590585538103336E1;"},
{"lineNum":" 1532","line":"    const double P2logl =  6.0949667980987787057556E1;"},
{"lineNum":" 1533","line":"    const double P3logl =  2.9911919328553073277375E1;"},
{"lineNum":" 1534","line":"    const double P4logl =  6.5787325942061044846969E0;"},
{"lineNum":" 1535","line":"    const double P5logl =  4.9854102823193375972212E-1;"},
{"lineNum":" 1536","line":"    const double P6logl =  4.5270000862445199635215E-5;"},
{"lineNum":" 1537","line":"    const double Q0logl =  6.0118660497603843919306E1;"},
{"lineNum":" 1538","line":"    const double Q1logl =  2.1642788614495947685003E2;"},
{"lineNum":" 1539","line":"    const double Q2logl =  3.0909872225312059774938E2;"},
{"lineNum":" 1540","line":"    const double Q3logl =  2.2176239823732856465394E2;"},
{"lineNum":" 1541","line":"    const double Q4logl =  8.3047565967967209469434E1;"},
{"lineNum":" 1542","line":"    const double Q5logl =  1.5062909083469192043167E1;"},
{"lineNum":" 1543","line":""},
{"lineNum":" 1544","line":"    // Taylor coefficients for exp function, 1/n!"},
{"lineNum":" 1545","line":"    const double p2  = 1./2.;"},
{"lineNum":" 1546","line":"    const double p3  = 1./6.;"},
{"lineNum":" 1547","line":"    const double p4  = 1./24.;"},
{"lineNum":" 1548","line":"    const double p5  = 1./120.;"},
{"lineNum":" 1549","line":"    const double p6  = 1./720.;"},
{"lineNum":" 1550","line":"    const double p7  = 1./5040.;"},
{"lineNum":" 1551","line":"    const double p8  = 1./40320.;"},
{"lineNum":" 1552","line":"    const double p9  = 1./362880.;"},
{"lineNum":" 1553","line":"    const double p10 = 1./3628800.;"},
{"lineNum":" 1554","line":"    const double p11 = 1./39916800.;"},
{"lineNum":" 1555","line":"    const double p12 = 1./479001600.;"},
{"lineNum":" 1556","line":"    const double p13 = 1./6227020800.;"},
{"lineNum":" 1557","line":""},
{"lineNum":" 1558","line":"    // data vectors"},
{"lineNum":" 1559","line":"    VTYPE x, x1, x2;                             // x variable"},
{"lineNum":" 1560","line":"    VTYPE px, qx, ef, yr, v;                     // calculation of logarithm"},
{"lineNum":" 1561","line":"    VTYPE lg, lg1, lg2;"},
{"lineNum":" 1562","line":"    VTYPE lgerr, x2err;"},
{"lineNum":" 1563","line":"    VTYPE e1, e2, ee;"},
{"lineNum":" 1564","line":"    VTYPE e3, z, z1;                             // calculation of exp and pow"},
{"lineNum":" 1565","line":"    VTYPE yodd(0);                               // has sign bit set if y is an odd integer"},
{"lineNum":" 1566","line":"    // integer vectors"},
{"lineNum":" 1567","line":"    ITYPE ei, ej;"},
{"lineNum":" 1568","line":"    // boolean vectors"},
{"lineNum":" 1569","line":"    BVTYPE blend, xzero, xsign;              // x conditions"},
{"lineNum":" 1570","line":"    BVTYPE overflow, underflow, xfinite, yfinite, efinite; // error conditions"},
{"lineNum":" 1571","line":""},
{"lineNum":" 1572","line":"    // remove sign"},
{"lineNum":" 1573","line":"    x1 = abs(x0);"},
{"lineNum":" 1574","line":""},
{"lineNum":" 1575","line":"    // Separate mantissa from exponent"},
{"lineNum":" 1576","line":"    // This gives the mantissa * 0.5"},
{"lineNum":" 1577","line":"    x  = fraction_2(x1);"},
{"lineNum":" 1578","line":""},
{"lineNum":" 1579","line":"    // reduce range of x = +/- sqrt(2)/2"},
{"lineNum":" 1580","line":"    blend = x > VM_SQRT2*0.5;"},
{"lineNum":" 1581","line":"    x  = if_add(!blend, x, x);                   // conditional add"},
{"lineNum":" 1582","line":""},
{"lineNum":" 1583","line":"    // Pade approximation"},
{"lineNum":" 1584","line":"    // Higher precision than in log function. Still higher precision wanted"},
{"lineNum":" 1585","line":"    x -= 1.0;"},
{"lineNum":" 1586","line":"    x2 = x*x;"},
{"lineNum":" 1587","line":"    px = polynomial_6  (x, P0logl, P1logl, P2logl, P3logl, P4logl, P5logl, P6logl);"},
{"lineNum":" 1588","line":"    px *= x * x2;"},
{"lineNum":" 1589","line":"    qx = polynomial_6n (x, Q0logl, Q1logl, Q2logl, Q3logl, Q4logl, Q5logl);"},
{"lineNum":" 1590","line":"    lg1 = px / qx;"},
{"lineNum":" 1591","line":""},
{"lineNum":" 1592","line":"    // extract exponent"},
{"lineNum":" 1593","line":"    ef = exponent_f(x1);"},
{"lineNum":" 1594","line":"    ef = if_add(blend, ef, 1.);                  // conditional add"},
{"lineNum":" 1595","line":""},
{"lineNum":" 1596","line":"    // multiply exponent by y"},
{"lineNum":" 1597","line":"    // nearest integer e1 goes into exponent of result, remainder yr is added to log"},
{"lineNum":" 1598","line":"    e1 = round(ef * y);"},
{"lineNum":" 1599","line":"    yr = mul_sub_x(ef, y, e1);                   // calculate remainder yr. precision very important here"},
{"lineNum":" 1600","line":""},
{"lineNum":" 1601","line":"    // add initial terms to Pade expansion"},
{"lineNum":" 1602","line":"    lg = nmul_add(0.5, x2, x) + lg1;             // lg = (x - 0.5 * x2) + lg1;"},
{"lineNum":" 1603","line":"    // calculate rounding errors in lg"},
{"lineNum":" 1604","line":"    // rounding error in multiplication 0.5*x*x"},
{"lineNum":" 1605","line":"    x2err = mul_sub_x(0.5*x, x, 0.5*x2);"},
{"lineNum":" 1606","line":"    // rounding error in additions and subtractions"},
{"lineNum":" 1607","line":"    lgerr = mul_add(0.5, x2, lg - x) - lg1;      // lgerr = ((lg - x) + 0.5 * x2) - lg1;"},
{"lineNum":" 1608","line":""},
{"lineNum":" 1609","line":"    // extract something for the exponent"},
{"lineNum":" 1610","line":"    e2 = round(lg * y * VM_LOG2E);"},
{"lineNum":" 1611","line":"    // subtract this from lg, with extra precision"},
{"lineNum":" 1612","line":"    v = mul_sub_x(lg, y, e2 * ln2d_hi);"},
{"lineNum":" 1613","line":"    v = nmul_add(e2, ln2d_lo, v);                // v -= e2 * ln2d_lo;"},
{"lineNum":" 1614","line":""},
{"lineNum":" 1615","line":"    // add remainder from ef * y"},
{"lineNum":" 1616","line":"    v = mul_add(yr, VM_LN2, v);                  // v += yr * VM_LN2;"},
{"lineNum":" 1617","line":""},
{"lineNum":" 1618","line":"    // correct for previous rounding errors"},
{"lineNum":" 1619","line":"    v = nmul_add(lgerr + x2err, y, v);           // v -= (lgerr + x2err) * y;"},
{"lineNum":" 1620","line":""},
{"lineNum":" 1621","line":"    // exp function"},
{"lineNum":" 1622","line":""},
{"lineNum":" 1623","line":"    // extract something for the exponent if possible"},
{"lineNum":" 1624","line":"    x = v;"},
{"lineNum":" 1625","line":"    e3 = round(x*log2e);"},
{"lineNum":" 1626","line":"    // high precision multiplication not needed here because abs(e3) <= 1"},
{"lineNum":" 1627","line":"    x = nmul_add(e3, VM_LN2, x);                 // x -= e3 * VM_LN2;"},
{"lineNum":" 1628","line":""},
{"lineNum":" 1629","line":"    z = polynomial_13m(x, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13);"},
{"lineNum":" 1630","line":"    z = z + 1.0;"},
{"lineNum":" 1631","line":""},
{"lineNum":" 1632","line":"    // contributions to exponent"},
{"lineNum":" 1633","line":"    ee = e1 + e2 + e3;"},
{"lineNum":" 1634","line":"    //ei = round_to_int64_limited(ee);"},
{"lineNum":" 1635","line":"    ei = round_to_int64(ee);"},
{"lineNum":" 1636","line":"    // biased exponent of result:"},
{"lineNum":" 1637","line":"    ej = ei + (ITYPE(reinterpret_i(z)) >> 52);"},
{"lineNum":" 1638","line":"    // check exponent for overflow and underflow"},
{"lineNum":" 1639","line":"    overflow  = BVTYPE(ej >= 0x07FF) | (ee >  3000.);"},
{"lineNum":" 1640","line":"    underflow = BVTYPE(ej <= 0x0000) | (ee < -3000.);"},
{"lineNum":" 1641","line":""},
{"lineNum":" 1642","line":"    // add exponent by integer addition"},
{"lineNum":" 1643","line":"    z = reinterpret_d(ITYPE(reinterpret_i(z)) + (ei << 52));"},
{"lineNum":" 1644","line":""},
{"lineNum":" 1645","line":"    // check for special cases"},
{"lineNum":" 1646","line":"    xfinite   = is_finite(x0);"},
{"lineNum":" 1647","line":"    yfinite   = is_finite(y);"},
{"lineNum":" 1648","line":"    efinite   = is_finite(ee);"},
{"lineNum":" 1649","line":"    xzero     = is_zero_or_subnormal(x0);"},
{"lineNum":" 1650","line":"    xsign     = sign_bit(x0);  // sign of x0. include -0."},
{"lineNum":" 1651","line":""},
{"lineNum":" 1652","line":"    // check for overflow and underflow"},
{"lineNum":" 1653","line":"    if (horizontal_or(overflow | underflow)) {"},
{"lineNum":" 1654","line":"        // handle errors"},
{"lineNum":" 1655","line":"        z = select(underflow, VTYPE(0.), z);"},
{"lineNum":" 1656","line":"        z = select(overflow, infinite_vec<VTYPE>(), z);"},
{"lineNum":" 1657","line":"    }"},
{"lineNum":" 1658","line":""},
{"lineNum":" 1659","line":"    // check for x == 0"},
{"lineNum":" 1660","line":"    z = wm_pow_case_x0(xzero, y, z);"},
{"lineNum":" 1661","line":"    //z = select(xzero, select(y < 0., infinite_vec<VTYPE>(), select(y == 0., VTYPE(1.), VTYPE(0.))), z);"},
{"lineNum":" 1662","line":""},
{"lineNum":" 1663","line":"    // check for sign of x (include -0.). y must be integer"},
{"lineNum":" 1664","line":"    if (horizontal_or(xsign)) {"},
{"lineNum":" 1665","line":"        // test if y is an integer"},
{"lineNum":" 1666","line":"        BVTYPE yinteger = y == round(y);"},
{"lineNum":" 1667","line":"        // test if y is odd: convert to int and shift bit 0 into position of sign bit."},
{"lineNum":" 1668","line":"        // this will be 0 if overflow"},
{"lineNum":" 1669","line":"        yodd = reinterpret_d(round_to_int64(y) << 63);"},
{"lineNum":" 1670","line":"        z1 = select(yinteger, z | yodd,    // y is integer. get sign if y is odd"},
{"lineNum":" 1671","line":"            select(x0 == 0., z, nan_vec<VTYPE>(NAN_POW)));  // NAN unless x0 == -0."},
{"lineNum":" 1672","line":"        yodd = select(yinteger, yodd, 0.);  // yodd used below. only if y is integer"},
{"lineNum":" 1673","line":"        z = select(xsign, z1, z);"},
{"lineNum":" 1674","line":"    }"},
{"lineNum":" 1675","line":""},
{"lineNum":" 1676","line":"    // check for range errors"},
{"lineNum":" 1677","line":"    if (horizontal_and(xfinite & yfinite & (efinite | xzero))) {"},
{"lineNum":" 1678","line":"        // fast return if no special cases"},
{"lineNum":" 1679","line":"        return z;"},
{"lineNum":" 1680","line":"    }"},
{"lineNum":" 1681","line":""},
{"lineNum":" 1682","line":"    // handle special error cases: y infinite"},
{"lineNum":" 1683","line":"    z1 = select(yfinite & efinite, z,"},
{"lineNum":" 1684","line":"        select(x1 == 1., VTYPE(1.),"},
{"lineNum":" 1685","line":"            select((x1 > 1.) ^ sign_bit(y), infinite_vec<VTYPE>(), 0.)));"},
{"lineNum":" 1686","line":""},
{"lineNum":" 1687","line":"    // handle x infinite"},
{"lineNum":" 1688","line":"    z1 = select(xfinite, z1,"},
{"lineNum":" 1689","line":"        select(y == 0., VTYPE(1.),"},
{"lineNum":" 1690","line":"            select(y < 0., yodd & z,  // 0.0 with the sign of z from above"},
{"lineNum":" 1691","line":"                abs(x0) | (x0 & yodd)))); // get sign of x0 only if y is odd integer"},
{"lineNum":" 1692","line":""},
{"lineNum":" 1693","line":"    // Always propagate nan:"},
{"lineNum":" 1694","line":"    // Deliberately differing from the IEEE-754 standard which has pow(0,nan)=1, and pow(1,nan)=1"},
{"lineNum":" 1695","line":"    z1 = select(is_nan(x0)|is_nan(y), x0+y, z1);"},
{"lineNum":" 1696","line":""},
{"lineNum":" 1697","line":"    return z1;"},
{"lineNum":" 1698","line":"}"},
{"lineNum":" 1699","line":""},
{"lineNum":" 1700","line":""},
{"lineNum":" 1701","line":"//This template is in vectorf128.h to prevent implicit conversion of float y to int when float version is not defined:"},
{"lineNum":" 1702","line":"//template <typename TT> static Vec2d pow(Vec2d const & a, TT n);"},
{"lineNum":" 1703","line":""},
{"lineNum":" 1704","line":"// instantiations of pow_template_d:"},
{"lineNum":" 1705","line":"template <>"},
{"lineNum":" 1706","line":"inline Vec2d pow<Vec2d>(Vec2d const & x, Vec2d const & y) {"},
{"lineNum":" 1707","line":"    return pow_template_d<Vec2d, Vec2q, Vec2db>(x, y);"},
{"lineNum":" 1708","line":"}"},
{"lineNum":" 1709","line":""},
{"lineNum":" 1710","line":"template <>"},
{"lineNum":" 1711","line":"inline Vec2d pow<double>(Vec2d const & x, double const & y) {"},
{"lineNum":" 1712","line":"    return pow_template_d<Vec2d, Vec2q, Vec2db>(x, y);"},
{"lineNum":" 1713","line":"}"},
{"lineNum":" 1714","line":"template <>"},
{"lineNum":" 1715","line":"inline Vec2d pow<float>(Vec2d const & x, float const & y) {"},
{"lineNum":" 1716","line":"    return pow_template_d<Vec2d, Vec2q, Vec2db>(x, (double)y);"},
{"lineNum":" 1717","line":"}"},
{"lineNum":" 1718","line":""},
{"lineNum":" 1719","line":"#if MAX_VECTOR_SIZE >= 256"},
{"lineNum":" 1720","line":""},
{"lineNum":" 1721","line":"template <>"},
{"lineNum":" 1722","line":"inline Vec4d pow<Vec4d>(Vec4d const & x, Vec4d const & y) {"},
{"lineNum":" 1723","line":"    return pow_template_d<Vec4d, Vec4q, Vec4db>(x, y);"},
{"lineNum":" 1724","line":"}"},
{"lineNum":" 1725","line":""},
{"lineNum":" 1726","line":"template <>"},
{"lineNum":" 1727","line":"inline Vec4d pow<double>(Vec4d const & x, double const & y) {"},
{"lineNum":" 1728","line":"    return pow_template_d<Vec4d, Vec4q, Vec4db>(x, y);"},
{"lineNum":" 1729","line":"}"},
{"lineNum":" 1730","line":""},
{"lineNum":" 1731","line":"template <>"},
{"lineNum":" 1732","line":"inline Vec4d pow<float>(Vec4d const & x, float const & y) {"},
{"lineNum":" 1733","line":"    return pow_template_d<Vec4d, Vec4q, Vec4db>(x, (double)y);"},
{"lineNum":" 1734","line":"}"},
{"lineNum":" 1735","line":""},
{"lineNum":" 1736","line":"#endif // MAX_VECTOR_SIZE >= 256"},
{"lineNum":" 1737","line":""},
{"lineNum":" 1738","line":"#if MAX_VECTOR_SIZE >= 512"},
{"lineNum":" 1739","line":""},
{"lineNum":" 1740","line":"template <>"},
{"lineNum":" 1741","line":"inline Vec8d pow<Vec8d>(Vec8d const & x, Vec8d const & y) {"},
{"lineNum":" 1742","line":"    return pow_template_d<Vec8d, Vec8q, Vec8db>(x, y);"},
{"lineNum":" 1743","line":"}"},
{"lineNum":" 1744","line":""},
{"lineNum":" 1745","line":"template <>"},
{"lineNum":" 1746","line":"inline Vec8d pow<double>(Vec8d const & x, double const & y) {"},
{"lineNum":" 1747","line":"    return pow_template_d<Vec8d, Vec8q, Vec8db>(x, y);"},
{"lineNum":" 1748","line":"}"},
{"lineNum":" 1749","line":""},
{"lineNum":" 1750","line":"template <>"},
{"lineNum":" 1751","line":"inline Vec8d pow<float>(Vec8d const & x, float const & y) {"},
{"lineNum":" 1752","line":"    return pow_template_d<Vec8d, Vec8q, Vec8db>(x, (double)y);"},
{"lineNum":" 1753","line":"}"},
{"lineNum":" 1754","line":""},
{"lineNum":" 1755","line":"#endif // MAX_VECTOR_SIZE >= 512"},
{"lineNum":" 1756","line":""},
{"lineNum":" 1757","line":""},
{"lineNum":" 1758","line":"// ****************************************************************************"},
{"lineNum":" 1759","line":"//                pow template, single precision"},
{"lineNum":" 1760","line":"// ****************************************************************************"},
{"lineNum":" 1761","line":""},
{"lineNum":" 1762","line":"// Template parameters:"},
{"lineNum":" 1763","line":"// VTYPE:  data vector type"},
{"lineNum":" 1764","line":"// ITYPE:  signed integer vector type"},
{"lineNum":" 1765","line":"// BVTYPE: boolean vector type"},
{"lineNum":" 1766","line":"// Calculate x to the power of y"},
{"lineNum":" 1767","line":"template <class VTYPE, class ITYPE, class BVTYPE>"},
{"lineNum":" 1768","line":"static inline VTYPE pow_template_f(VTYPE const & x0, VTYPE const & y) {"},
{"lineNum":" 1769","line":""},
{"lineNum":" 1770","line":"    // define constants"},
{"lineNum":" 1771","line":"    const float ln2f_hi  =  0.693359375f;        // log(2), split in two for extended precision"},
{"lineNum":" 1772","line":"    const float ln2f_lo  = -2.12194440e-4f;"},
{"lineNum":" 1773","line":"    const float log2e    =  float(VM_LOG2E);     // 1/log(2)"},
{"lineNum":" 1774","line":""},
{"lineNum":" 1775","line":"    const float P0logf  =  3.3333331174E-1f;     // coefficients for logarithm expansion"},
{"lineNum":" 1776","line":"    const float P1logf  = -2.4999993993E-1f;"},
{"lineNum":" 1777","line":"    const float P2logf  =  2.0000714765E-1f;"},
{"lineNum":" 1778","line":"    const float P3logf  = -1.6668057665E-1f;"},
{"lineNum":" 1779","line":"    const float P4logf  =  1.4249322787E-1f;"},
{"lineNum":" 1780","line":"    const float P5logf  = -1.2420140846E-1f;"},
{"lineNum":" 1781","line":"    const float P6logf  =  1.1676998740E-1f;"},
{"lineNum":" 1782","line":"    const float P7logf  = -1.1514610310E-1f;"},
{"lineNum":" 1783","line":"    const float P8logf  =  7.0376836292E-2f;"},
{"lineNum":" 1784","line":""},
{"lineNum":" 1785","line":"    const float p2expf   =  1.f/2.f;             // coefficients for Taylor expansion of exp"},
{"lineNum":" 1786","line":"    const float p3expf   =  1.f/6.f;"},
{"lineNum":" 1787","line":"    const float p4expf   =  1.f/24.f;"},
{"lineNum":" 1788","line":"    const float p5expf   =  1.f/120.f;"},
{"lineNum":" 1789","line":"    const float p6expf   =  1.f/720.f;"},
{"lineNum":" 1790","line":"    const float p7expf   =  1.f/5040.f;"},
{"lineNum":" 1791","line":""},
{"lineNum":" 1792","line":"    // data vectors"},
{"lineNum":" 1793","line":"    VTYPE x, x1, x2;                             // x variable"},
{"lineNum":" 1794","line":"    VTYPE ef, e1, e2, e3, ee;                    // exponent"},
{"lineNum":" 1795","line":"    VTYPE yr;                                    // remainder"},
{"lineNum":" 1796","line":"    VTYPE lg, lg1, lgerr, x2err, v;              // logarithm"},
{"lineNum":" 1797","line":"    VTYPE z, z1;                                 // pow(x,y)"},
{"lineNum":" 1798","line":"    VTYPE yodd(0);                               // has sign bit set if y is an odd integer"},
{"lineNum":" 1799","line":"    // integer vectors"},
{"lineNum":" 1800","line":"    ITYPE ei, ej;                                // exponent"},
{"lineNum":" 1801","line":"    // boolean vectors"},
{"lineNum":" 1802","line":"    BVTYPE blend, xzero, xsign;                  // x conditions"},
{"lineNum":" 1803","line":"    BVTYPE overflow, underflow, xfinite, yfinite, efinite; // error conditions"},
{"lineNum":" 1804","line":""},
{"lineNum":" 1805","line":"    // remove sign"},
{"lineNum":" 1806","line":"    x1 = abs(x0);"},
{"lineNum":" 1807","line":""},
{"lineNum":" 1808","line":"    // Separate mantissa from exponent"},
{"lineNum":" 1809","line":"    // This gives the mantissa * 0.5"},
{"lineNum":" 1810","line":"    x  = fraction_2(x1);"},
{"lineNum":" 1811","line":""},
{"lineNum":" 1812","line":"    // reduce range of x = +/- sqrt(2)/2"},
{"lineNum":" 1813","line":"    blend = x > float(VM_SQRT2 * 0.5);"},
{"lineNum":" 1814","line":"    x  = if_add(!blend, x, x);                   // conditional add"},
{"lineNum":" 1815","line":""},
{"lineNum":" 1816","line":"    // Taylor expansion, high precision"},
{"lineNum":" 1817","line":"    x   -= 1.0f;"},
{"lineNum":" 1818","line":"    x2   = x * x;"},
{"lineNum":" 1819","line":"    lg1  = polynomial_8(x, P0logf, P1logf, P2logf, P3logf, P4logf, P5logf, P6logf, P7logf, P8logf);"},
{"lineNum":" 1820","line":"    lg1 *= x2 * x;"},
{"lineNum":" 1821","line":""},
{"lineNum":" 1822","line":"    // extract exponent"},
{"lineNum":" 1823","line":"    ef = exponent_f(x1);"},
{"lineNum":" 1824","line":"    ef = if_add(blend, ef, 1.0f);                // conditional add"},
{"lineNum":" 1825","line":""},
{"lineNum":" 1826","line":"    // multiply exponent by y"},
{"lineNum":" 1827","line":"    // nearest integer e1 goes into exponent of result, remainder yr is added to log"},
{"lineNum":" 1828","line":"    e1 = round(ef * y);"},
{"lineNum":" 1829","line":"    yr = mul_sub_x(ef, y, e1);                   // calculate remainder yr. precision very important here"},
{"lineNum":" 1830","line":""},
{"lineNum":" 1831","line":"    // add initial terms to expansion"},
{"lineNum":" 1832","line":"    lg = nmul_add(0.5f, x2, x) + lg1;            // lg = (x - 0.5f * x2) + lg1;"},
{"lineNum":" 1833","line":""},
{"lineNum":" 1834","line":"    // calculate rounding errors in lg"},
{"lineNum":" 1835","line":"    // rounding error in multiplication 0.5*x*x"},
{"lineNum":" 1836","line":"    x2err = mul_sub_x(0.5f*x, x, 0.5f * x2);"},
{"lineNum":" 1837","line":"    // rounding error in additions and subtractions"},
{"lineNum":" 1838","line":"    lgerr = mul_add(0.5f, x2, lg - x) - lg1;     // lgerr = ((lg - x) + 0.5f * x2) - lg1;"},
{"lineNum":" 1839","line":""},
{"lineNum":" 1840","line":"    // extract something for the exponent"},
{"lineNum":" 1841","line":"    e2 = round(lg * y * float(VM_LOG2E));"},
{"lineNum":" 1842","line":"    // subtract this from lg, with extra precision"},
{"lineNum":" 1843","line":"    v = mul_sub_x(lg, y, e2 * ln2f_hi);"},
{"lineNum":" 1844","line":"    v = nmul_add(e2, ln2f_lo, v);                // v -= e2 * ln2f_lo;"},
{"lineNum":" 1845","line":""},
{"lineNum":" 1846","line":"    // correct for previous rounding errors"},
{"lineNum":" 1847","line":"    v -= mul_sub(lgerr + x2err, y, yr * float(VM_LN2)); // v -= (lgerr + x2err) * y - yr * float(VM_LN2) ;"},
{"lineNum":" 1848","line":""},
{"lineNum":" 1849","line":"    // exp function"},
{"lineNum":" 1850","line":""},
{"lineNum":" 1851","line":"    // extract something for the exponent if possible"},
{"lineNum":" 1852","line":"    x = v;"},
{"lineNum":" 1853","line":"    e3 = round(x*log2e);"},
{"lineNum":" 1854","line":"    // high precision multiplication not needed here because abs(e3) <= 1"},
{"lineNum":" 1855","line":"    x = nmul_add(e3, float(VM_LN2), x);          // x -= e3 * float(VM_LN2);"},
{"lineNum":" 1856","line":""},
{"lineNum":" 1857","line":"    // Taylor polynomial"},
{"lineNum":" 1858","line":"    x2  = x  * x;"},
{"lineNum":" 1859","line":"    z = polynomial_5(x, p2expf, p3expf, p4expf, p5expf, p6expf, p7expf)*x2 + x + 1.0f;"},
{"lineNum":" 1860","line":""},
{"lineNum":" 1861","line":"    // contributions to exponent"},
{"lineNum":" 1862","line":"    ee = e1 + e2 + e3;"},
{"lineNum":" 1863","line":"    ei = round_to_int(ee);"},
{"lineNum":" 1864","line":"    // biased exponent of result:"},
{"lineNum":" 1865","line":"    ej = ei + (ITYPE(reinterpret_i(z)) >> 23);"},
{"lineNum":" 1866","line":"    // check exponent for overflow and underflow"},
{"lineNum":" 1867","line":"    overflow  = BVTYPE(ej >= 0x0FF) | (ee >  300.f);"},
{"lineNum":" 1868","line":"    underflow = BVTYPE(ej <= 0x000) | (ee < -300.f);"},
{"lineNum":" 1869","line":""},
{"lineNum":" 1870","line":"    // add exponent by integer addition"},
{"lineNum":" 1871","line":"    z = reinterpret_f(ITYPE(reinterpret_i(z)) + (ei << 23)); // the extra 0x10000 is shifted out here"},
{"lineNum":" 1872","line":""},
{"lineNum":" 1873","line":"    // check for special cases"},
{"lineNum":" 1874","line":"    xfinite   = is_finite(x0);"},
{"lineNum":" 1875","line":"    yfinite   = is_finite(y);"},
{"lineNum":" 1876","line":"    efinite   = is_finite(ee);"},
{"lineNum":" 1877","line":""},
{"lineNum":" 1878","line":"    xzero     = is_zero_or_subnormal(x0);"},
{"lineNum":" 1879","line":"    xsign     = sign_bit(x0);  // x is negative or -0."},
{"lineNum":" 1880","line":""},
{"lineNum":" 1881","line":"    // check for overflow and underflow"},
{"lineNum":" 1882","line":"    if (horizontal_or(overflow | underflow)) {"},
{"lineNum":" 1883","line":"        // handle errors"},
{"lineNum":" 1884","line":"        z = select(underflow, VTYPE(0.f), z);"},
{"lineNum":" 1885","line":"        z = select(overflow, infinite_vec<VTYPE>(), z);"},
{"lineNum":" 1886","line":"    }"},
{"lineNum":" 1887","line":""},
{"lineNum":" 1888","line":"    // check for x == 0"},
{"lineNum":" 1889","line":"    z = wm_pow_case_x0(xzero, y, z);"},
{"lineNum":" 1890","line":"    //z = select(xzero, select(y < 0.f, infinite_vec<VTYPE>(), select(y == 0.f, VTYPE(1.f), VTYPE(0.f))), z);"},
{"lineNum":" 1891","line":""},
{"lineNum":" 1892","line":"    // check for sign of x (include -0.). y must be integer"},
{"lineNum":" 1893","line":"    if (horizontal_or(xsign)) {"},
{"lineNum":" 1894","line":"        // test if y is an integer"},
{"lineNum":" 1895","line":"        BVTYPE yinteger = y == round(y);"},
{"lineNum":" 1896","line":"        // test if y is odd: convert to int and shift bit 0 into position of sign bit."},
{"lineNum":" 1897","line":"        // this will be 0 if overflow"},
{"lineNum":" 1898","line":"        yodd = reinterpret_f(round_to_int(y) << 31);"},
{"lineNum":" 1899","line":"        z1 = select(yinteger, z | yodd,    // y is integer. get sign if y is odd"},
{"lineNum":" 1900","line":"            select(x0 == 0.f, z, nan_vec<VTYPE>(NAN_POW)));  // NAN unless x0 == -0."},
{"lineNum":" 1901","line":"        yodd = select(yinteger, yodd, 0);  // yodd used below. only if y is integer"},
{"lineNum":" 1902","line":"        z = select(xsign, z1, z);"},
{"lineNum":" 1903","line":"    }"},
{"lineNum":" 1904","line":""},
{"lineNum":" 1905","line":"    // check for range errors"},
{"lineNum":" 1906","line":"    if (horizontal_and(xfinite & yfinite & (efinite | xzero))) {"},
{"lineNum":" 1907","line":"        return z;        // fast return if no special cases"},
{"lineNum":" 1908","line":"    }"},
{"lineNum":" 1909","line":""},
{"lineNum":" 1910","line":"    // handle special error cases: y infinite"},
{"lineNum":" 1911","line":"    z1 = select(yfinite & efinite, z,"},
{"lineNum":" 1912","line":"        select(x1 == 1.f, VTYPE(1.f),"},
{"lineNum":" 1913","line":"            select((x1 > 1.f) ^ sign_bit(y), infinite_vec<VTYPE>(), 0.f)));"},
{"lineNum":" 1914","line":""},
{"lineNum":" 1915","line":"    // handle x infinite"},
{"lineNum":" 1916","line":"    z1 = select(xfinite, z1,"},
{"lineNum":" 1917","line":"        select(y == 0.f, VTYPE(1.f),"},
{"lineNum":" 1918","line":"            select(y < 0.f, yodd & z,  // 0.0 with the sign of z from above"},
{"lineNum":" 1919","line":"                abs(x0) | (x0 & yodd)))); // get sign of x0 only if y is odd integer"},
{"lineNum":" 1920","line":""},
{"lineNum":" 1921","line":"    // Always propagate nan:"},
{"lineNum":" 1922","line":"    // Deliberately differing from the IEEE-754 standard which has pow(0,nan)=1, and pow(1,nan)=1"},
{"lineNum":" 1923","line":"    z1 = select(is_nan(x0)|is_nan(y), x0+y, z1);"},
{"lineNum":" 1924","line":"    return z1;"},
{"lineNum":" 1925","line":"}"},
{"lineNum":" 1926","line":""},
{"lineNum":" 1927","line":"//This template is in vectorf128.h to prevent implicit conversion of float y to int when float version is not defined:"},
{"lineNum":" 1928","line":"//template <typename TT> static Vec4f pow(Vec4f const & a, TT n);"},
{"lineNum":" 1929","line":""},
{"lineNum":" 1930","line":"template <>"},
{"lineNum":" 1931","line":"inline Vec4f pow<Vec4f>(Vec4f const & x, Vec4f const & y) {"},
{"lineNum":" 1932","line":"    return pow_template_f<Vec4f, Vec4i, Vec4fb>(x, y);"},
{"lineNum":" 1933","line":"}"},
{"lineNum":" 1934","line":""},
{"lineNum":" 1935","line":"template <>"},
{"lineNum":" 1936","line":"inline Vec4f pow<float>(Vec4f const & x, float const & y) {"},
{"lineNum":" 1937","line":"    return pow_template_f<Vec4f, Vec4i, Vec4fb>(x, y);"},
{"lineNum":" 1938","line":"}"},
{"lineNum":" 1939","line":""},
{"lineNum":" 1940","line":"template <>"},
{"lineNum":" 1941","line":"inline Vec4f pow<double>(Vec4f const & x, double const & y) {"},
{"lineNum":" 1942","line":"    return pow_template_f<Vec4f, Vec4i, Vec4fb>(x, (float)y);"},
{"lineNum":" 1943","line":"}"},
{"lineNum":" 1944","line":""},
{"lineNum":" 1945","line":"#if MAX_VECTOR_SIZE >= 256"},
{"lineNum":" 1946","line":""},
{"lineNum":" 1947","line":"template <>"},
{"lineNum":" 1948","line":"inline Vec8f pow<Vec8f>(Vec8f const & x, Vec8f const & y) {"},
{"lineNum":" 1949","line":"    return pow_template_f<Vec8f, Vec8i,  Vec8fb>(x, y);"},
{"lineNum":" 1950","line":"}"},
{"lineNum":" 1951","line":""},
{"lineNum":" 1952","line":"template <>"},
{"lineNum":" 1953","line":"inline Vec8f pow<float>(Vec8f const & x, float const & y) {"},
{"lineNum":" 1954","line":"    return pow_template_f<Vec8f, Vec8i,  Vec8fb>(x, y);"},
{"lineNum":" 1955","line":"}"},
{"lineNum":" 1956","line":"template <>"},
{"lineNum":" 1957","line":"inline Vec8f pow<double>(Vec8f const & x, double const & y) {"},
{"lineNum":" 1958","line":"    return pow_template_f<Vec8f, Vec8i,  Vec8fb>(x, (float)y);"},
{"lineNum":" 1959","line":"}"},
{"lineNum":" 1960","line":""},
{"lineNum":" 1961","line":"#endif // MAX_VECTOR_SIZE >= 256"},
{"lineNum":" 1962","line":""},
{"lineNum":" 1963","line":"#if MAX_VECTOR_SIZE >= 512"},
{"lineNum":" 1964","line":""},
{"lineNum":" 1965","line":"template <>"},
{"lineNum":" 1966","line":"inline Vec16f pow<Vec16f>(Vec16f const & x, Vec16f const & y) {"},
{"lineNum":" 1967","line":"    return pow_template_f<Vec16f, Vec16i,  Vec16fb>(x, y);"},
{"lineNum":" 1968","line":"}"},
{"lineNum":" 1969","line":""},
{"lineNum":" 1970","line":"template <>"},
{"lineNum":" 1971","line":"inline Vec16f pow<float>(Vec16f const & x, float const & y) {"},
{"lineNum":" 1972","line":"    return pow_template_f<Vec16f, Vec16i,  Vec16fb>(x, y);"},
{"lineNum":" 1973","line":"}"},
{"lineNum":" 1974","line":""},
{"lineNum":" 1975","line":"template <>"},
{"lineNum":" 1976","line":"inline Vec16f pow<double>(Vec16f const & x, double const & y) {"},
{"lineNum":" 1977","line":"    return pow_template_f<Vec16f, Vec16i,  Vec16fb>(x, (float)y);"},
{"lineNum":" 1978","line":"}"},
{"lineNum":" 1979","line":""},
{"lineNum":" 1980","line":"#endif // MAX_VECTOR_SIZE >= 512"},
{"lineNum":" 1981","line":""},
{"lineNum":" 1982","line":""},
{"lineNum":" 1983","line":"// *************************************************************"},
{"lineNum":" 1984","line":"//             power function with rational exponent"},
{"lineNum":" 1985","line":"// *************************************************************"},
{"lineNum":" 1986","line":"// Power function with rational exponent: x^(a/b)"},
{"lineNum":" 1987","line":"// Template must be defined as class to allow partial template specialization"},
{"lineNum":" 1988","line":"template <int a, int b>"},
{"lineNum":" 1989","line":"class Power_rational {"},
{"lineNum":" 1990","line":"public:"},
{"lineNum":" 1991","line":"    // overloaded member function for each vector type"},
{"lineNum":" 1992","line":"    Vec4f poww(Vec4f const & x) {"},
{"lineNum":" 1993","line":"        Vec4f y = x;"},
{"lineNum":" 1994","line":"        // negative x allowed when b odd or a even"},
{"lineNum":" 1995","line":"        // (if a is even then either b is odd or a/b can be reduced,"},
{"lineNum":" 1996","line":"        // but we can check a even anyway at no cost to be sure)"},
{"lineNum":" 1997","line":"        if (a == 0) return 1.f;"},
{"lineNum":" 1998","line":"        if ((b | ~a) & 1) y = abs(y);"},
{"lineNum":" 1999","line":"        y = pow(y, float(double(a)/double(b)));"},
{"lineNum":" 2000","line":"        if ((a & 1) && b == 1) y = sign_combine(y, x);  // apply sign if a odd and b = 1"},
{"lineNum":" 2001","line":"        if ((a ^ b) >= 0) y = select(x == 0.f, 0.f, y); // zero allowed for positive a and b"},
{"lineNum":" 2002","line":"        return y;"},
{"lineNum":" 2003","line":"    }"},
{"lineNum":" 2004","line":"    Vec2d poww(Vec2d const & x) {"},
{"lineNum":" 2005","line":"        Vec2d y = x;"},
{"lineNum":" 2006","line":"        if (a == 0) return 1.;"},
{"lineNum":" 2007","line":"        if ((b | ~a) & 1) y = abs(y);"},
{"lineNum":" 2008","line":"        y = pow(y, double((long double)a/(long double)b));"},
{"lineNum":" 2009","line":"        if ((a & 1) && b == 1) y = sign_combine(y, x);  // apply sign if a odd and b = 1"},
{"lineNum":" 2010","line":"        if ((a ^ b) >= 0) y = select(x == 0., 0., y);"},
{"lineNum":" 2011","line":"        return y;"},
{"lineNum":" 2012","line":"    }"},
{"lineNum":" 2013","line":"#if MAX_VECTOR_SIZE >= 256"},
{"lineNum":" 2014","line":"    Vec8f poww(Vec8f const & x) {"},
{"lineNum":" 2015","line":"        Vec8f y = x;"},
{"lineNum":" 2016","line":"        if (a == 0) return 1.f;"},
{"lineNum":" 2017","line":"        if ((b | ~a) & 1) y = abs(y);"},
{"lineNum":" 2018","line":"        y = pow(y, float(double(a)/double(b)));"},
{"lineNum":" 2019","line":"        if ((a & 1) && b == 1) y = sign_combine(y, x);  // apply sign if a odd and b = 1"},
{"lineNum":" 2020","line":"        if ((a ^ b) >= 0) y = select(x == 0.f, 0.f, y);"},
{"lineNum":" 2021","line":"        return y;"},
{"lineNum":" 2022","line":"    }"},
{"lineNum":" 2023","line":"    Vec4d poww(Vec4d const & x) {"},
{"lineNum":" 2024","line":"        Vec4d y = x;"},
{"lineNum":" 2025","line":"        if (a == 0) return 1.;"},
{"lineNum":" 2026","line":"        if ((b | ~a) & 1) y = abs(y);"},
{"lineNum":" 2027","line":"        y = pow(y, double((long double)a/(long double)b));"},
{"lineNum":" 2028","line":"        if ((a & 1) && b == 1) y = sign_combine(y, x);  // apply sign if a odd and b = 1"},
{"lineNum":" 2029","line":"        if ((a ^ b) >= 0) y = select(x == 0., 0., y);"},
{"lineNum":" 2030","line":"        return y;"},
{"lineNum":" 2031","line":"    }"},
{"lineNum":" 2032","line":"#endif // MAX_VECTOR_SIZE >= 256"},
{"lineNum":" 2033","line":"#if MAX_VECTOR_SIZE >= 512"},
{"lineNum":" 2034","line":"    Vec16f poww(Vec16f const & x) {"},
{"lineNum":" 2035","line":"        Vec16f y = x;"},
{"lineNum":" 2036","line":"        if (a == 0) return 1.f;"},
{"lineNum":" 2037","line":"        if ((b | ~a) & 1) y = abs(y);"},
{"lineNum":" 2038","line":"        y = pow(y, float(double(a)/double(b)));"},
{"lineNum":" 2039","line":"        if ((a & 1) && b == 1) y = sign_combine(y, x);  // apply sign if a odd and b = 1"},
{"lineNum":" 2040","line":"        if ((a ^ b) >= 0) y = select(x == 0.f, 0.f, y);"},
{"lineNum":" 2041","line":"        return y;"},
{"lineNum":" 2042","line":"    }"},
{"lineNum":" 2043","line":"    Vec8d poww(Vec8d const & x) {"},
{"lineNum":" 2044","line":"        Vec8d y = x;"},
{"lineNum":" 2045","line":"        if (a == 0) return 1.;"},
{"lineNum":" 2046","line":"        if ((b | ~a) & 1) y = abs(y);"},
{"lineNum":" 2047","line":"        y = pow(y, double((long double)a/(long double)b));"},
{"lineNum":" 2048","line":"        if ((a & 1) && b == 1) y = sign_combine(y, x);  // apply sign if a odd and b = 1"},
{"lineNum":" 2049","line":"        if ((a ^ b) >= 0) y = select(x == 0., 0., y);"},
{"lineNum":" 2050","line":"        return y;"},
{"lineNum":" 2051","line":"    }"},
{"lineNum":" 2052","line":"#endif // MAX_VECTOR_SIZE >= 512"},
{"lineNum":" 2053","line":"};"},
{"lineNum":" 2054","line":""},
{"lineNum":" 2055","line":"// partial specialization for b = 1"},
{"lineNum":" 2056","line":"template<int a>"},
{"lineNum":" 2057","line":"class Power_rational<a,1> {"},
{"lineNum":" 2058","line":"public:"},
{"lineNum":" 2059","line":"    template<class VTYPE>"},
{"lineNum":" 2060","line":"    VTYPE poww(VTYPE const & x) {return pow_n<VTYPE, a>(x);}"},
{"lineNum":" 2061","line":"};"},
{"lineNum":" 2062","line":""},
{"lineNum":" 2063","line":"// partial specialization for b = 2"},
{"lineNum":" 2064","line":"template<int a>"},
{"lineNum":" 2065","line":"class Power_rational<a,2> {"},
{"lineNum":" 2066","line":"public:"},
{"lineNum":" 2067","line":"    template<class VTYPE>"},
{"lineNum":" 2068","line":"    VTYPE poww(VTYPE const & x) {"},
{"lineNum":" 2069","line":"        VTYPE y = pow_n<VTYPE, (a > 0 ? a/2 : (a-1)/2)>(x);"},
{"lineNum":" 2070","line":"        if (a & 1) y *= sqrt(x);"},
{"lineNum":" 2071","line":"        return y;"},
{"lineNum":" 2072","line":"    }"},
{"lineNum":" 2073","line":"};"},
{"lineNum":" 2074","line":""},
{"lineNum":" 2075","line":"// full specialization for a = 1, b = 2"},
{"lineNum":" 2076","line":"template<>"},
{"lineNum":" 2077","line":"class Power_rational<1,2> {"},
{"lineNum":" 2078","line":"public:"},
{"lineNum":" 2079","line":"    template<class VTYPE>"},
{"lineNum":" 2080","line":"    VTYPE poww(VTYPE const & x) {"},
{"lineNum":" 2081","line":"        return sqrt(x);"},
{"lineNum":" 2082","line":"    }"},
{"lineNum":" 2083","line":"};"},
{"lineNum":" 2084","line":""},
{"lineNum":" 2085","line":"// full specialization for a = -1, b = 2"},
{"lineNum":" 2086","line":"template<>"},
{"lineNum":" 2087","line":"class Power_rational<-1,2> {"},
{"lineNum":" 2088","line":"public:"},
{"lineNum":" 2089","line":"    template<class VTYPE>"},
{"lineNum":" 2090","line":"    VTYPE poww(VTYPE const & x) {"},
{"lineNum":" 2091","line":"        // (this is faster than iteration method on modern CPUs)"},
{"lineNum":" 2092","line":"        return VTYPE(1.f) / abs(sqrt(x));"},
{"lineNum":" 2093","line":"    }"},
{"lineNum":" 2094","line":"};"},
{"lineNum":" 2095","line":""},
{"lineNum":" 2096","line":"// partial specialization for b = 3"},
{"lineNum":" 2097","line":"template<int a>"},
{"lineNum":" 2098","line":"class Power_rational<a,3> {"},
{"lineNum":" 2099","line":"public:"},
{"lineNum":" 2100","line":"    template<class VTYPE>"},
{"lineNum":" 2101","line":"    VTYPE poww(VTYPE const & x) {"},
{"lineNum":" 2102","line":"        VTYPE t;"},
{"lineNum":" 2103","line":"        switch (a % 3) {"},
{"lineNum":" 2104","line":"        case -2:"},
{"lineNum":" 2105","line":"            t = reciprocal_cbrt(x);"},
{"lineNum":" 2106","line":"            t *= t;"},
{"lineNum":" 2107","line":"            if (a == -2) return t;"},
{"lineNum":" 2108","line":"            t = t / pow_n<VTYPE, (-a-2)/3>(x);"},
{"lineNum":" 2109","line":"            break;"},
{"lineNum":" 2110","line":"        case -1:"},
{"lineNum":" 2111","line":"            t = reciprocal_cbrt(x);"},
{"lineNum":" 2112","line":"            if (a == -1) return t;"},
{"lineNum":" 2113","line":"            t = t / pow_n<VTYPE, (-a-1)/3>(x);"},
{"lineNum":" 2114","line":"            break;"},
{"lineNum":" 2115","line":"        case  0:"},
{"lineNum":" 2116","line":"            t = pow_n<VTYPE, a/3>(x);"},
{"lineNum":" 2117","line":"            break;"},
{"lineNum":" 2118","line":"        case  1:"},
{"lineNum":" 2119","line":"            t = cbrt(x);"},
{"lineNum":" 2120","line":"            if (a == 1) return t;"},
{"lineNum":" 2121","line":"            t = t * pow_n<VTYPE, a/3>(x);"},
{"lineNum":" 2122","line":"            break;"},
{"lineNum":" 2123","line":"        case  2:"},
{"lineNum":" 2124","line":"            t = square_cbrt(x);"},
{"lineNum":" 2125","line":"            if (a == 2) return t;"},
{"lineNum":" 2126","line":"            t = t * pow_n<VTYPE, a/3>(x);"},
{"lineNum":" 2127","line":"            break;"},
{"lineNum":" 2128","line":"        }"},
{"lineNum":" 2129","line":"        return t;"},
{"lineNum":" 2130","line":"    }"},
{"lineNum":" 2131","line":"};"},
{"lineNum":" 2132","line":""},
{"lineNum":" 2133","line":"// partial specialization for b = 4"},
{"lineNum":" 2134","line":"template<int a>"},
{"lineNum":" 2135","line":"class Power_rational<a,4> {"},
{"lineNum":" 2136","line":"public:"},
{"lineNum":" 2137","line":"    template<class VTYPE>"},
{"lineNum":" 2138","line":"    VTYPE poww(VTYPE const & x) {"},
{"lineNum":" 2139","line":"        VTYPE t, s1, s2;"},
{"lineNum":" 2140","line":"        s1 = abs(sqrt(x));"},
{"lineNum":" 2141","line":"        if (a & 1) s2 = sqrt(s1);"},
{"lineNum":" 2142","line":"        switch (a % 4) {"},
{"lineNum":" 2143","line":"        case -3:"},
{"lineNum":" 2144","line":"            t = s2 / pow_n<VTYPE, 1+(-a)/4>(x);"},
{"lineNum":" 2145","line":"            break;"},
{"lineNum":" 2146","line":"        case -2:"},
{"lineNum":" 2147","line":"            t = s1 / pow_n<VTYPE, 1+(-a)/4>(x);"},
{"lineNum":" 2148","line":"            break;"},
{"lineNum":" 2149","line":"        case -1:"},
{"lineNum":" 2150","line":"            if (a != -1) s2 *= pow_n<VTYPE, (-a)/4>(x);"},
{"lineNum":" 2151","line":"            t = VTYPE(1.f) / s2;"},
{"lineNum":" 2152","line":"            break;"},
{"lineNum":" 2153","line":"        case  0: default:"},
{"lineNum":" 2154","line":"            t = pow_n<VTYPE, a/4>(x);"},
{"lineNum":" 2155","line":"            break;"},
{"lineNum":" 2156","line":"        case  1:"},
{"lineNum":" 2157","line":"            t = s2;"},
{"lineNum":" 2158","line":"            if (a != 1) t *= pow_n<VTYPE, a/4>(x);"},
{"lineNum":" 2159","line":"            break;"},
{"lineNum":" 2160","line":"        case  2:"},
{"lineNum":" 2161","line":"            t = s1;"},
{"lineNum":" 2162","line":"            if (a != 2) t *= pow_n<VTYPE, a/4>(x);"},
{"lineNum":" 2163","line":"            break;"},
{"lineNum":" 2164","line":"        case  3:"},
{"lineNum":" 2165","line":"            t = s1 * s2;"},
{"lineNum":" 2166","line":"            if (a != 3) t *= pow_n<VTYPE, a/4>(x);"},
{"lineNum":" 2167","line":"            break;"},
{"lineNum":" 2168","line":"        }"},
{"lineNum":" 2169","line":"        return t;"},
{"lineNum":" 2170","line":"    }"},
{"lineNum":" 2171","line":"};"},
{"lineNum":" 2172","line":""},
{"lineNum":" 2173","line":"// partial specialization for b = 6"},
{"lineNum":" 2174","line":"template<int a>"},
{"lineNum":" 2175","line":"class Power_rational<a,6> {"},
{"lineNum":" 2176","line":"public:"},
{"lineNum":" 2177","line":"    template<class VTYPE>"},
{"lineNum":" 2178","line":"    VTYPE poww(VTYPE const & x) {"},
{"lineNum":" 2179","line":"        VTYPE t, s1;"},
{"lineNum":" 2180","line":"        switch (a % 6) {"},
{"lineNum":" 2181","line":"        case -5:"},
{"lineNum":" 2182","line":"            t = cbrt(sqrt(x)) / x;"},
{"lineNum":" 2183","line":"            if (a != -5) t /= pow_n<VTYPE, (-a)/6>(x);"},
{"lineNum":" 2184","line":"            break;"},
{"lineNum":" 2185","line":"        case -4:"},
{"lineNum":" 2186","line":"            t = reciprocal_cbrt(x);"},
{"lineNum":" 2187","line":"            t *= t;"},
{"lineNum":" 2188","line":"            if (a != -4) t /= pow_n<VTYPE, (-a)/6>(x);"},
{"lineNum":" 2189","line":"            break;"},
{"lineNum":" 2190","line":"        case -3:"},
{"lineNum":" 2191","line":"            t = pow_n<VTYPE, a/6>(x);"},
{"lineNum":" 2192","line":"            t /= sqrt(x);"},
{"lineNum":" 2193","line":"            break;"},
{"lineNum":" 2194","line":"        case -2:"},
{"lineNum":" 2195","line":"            t = reciprocal_cbrt(x);"},
{"lineNum":" 2196","line":"            if (a != -2) t /= pow_n<VTYPE, (-a)/6>(x);"},
{"lineNum":" 2197","line":"            break;"},
{"lineNum":" 2198","line":"        case -1:"},
{"lineNum":" 2199","line":"            t = reciprocal_cbrt(sqrt(x));"},
{"lineNum":" 2200","line":"            if (a != -1) t /= pow_n<VTYPE, (-a)/6>(x);"},
{"lineNum":" 2201","line":"            break;"},
{"lineNum":" 2202","line":"        case  0: default:"},
{"lineNum":" 2203","line":"            t = pow_n<VTYPE, a/6>(x);"},
{"lineNum":" 2204","line":"            break;"},
{"lineNum":" 2205","line":"        case  1:"},
{"lineNum":" 2206","line":"            t = cbrt(sqrt(x));"},
{"lineNum":" 2207","line":"            if (a != 1) t *= pow_n<VTYPE, a/6>(x);"},
{"lineNum":" 2208","line":"            break;"},
{"lineNum":" 2209","line":"        case  2:"},
{"lineNum":" 2210","line":"            t = cbrt(x);"},
{"lineNum":" 2211","line":"            if (a != 2) t *= pow_n<VTYPE, a/6>(x);"},
{"lineNum":" 2212","line":"            break;"},
{"lineNum":" 2213","line":"        case  3:"},
{"lineNum":" 2214","line":"            t = sqrt(x);"},
{"lineNum":" 2215","line":"            if (a != 3) t *= pow_n<VTYPE, a/6>(x);"},
{"lineNum":" 2216","line":"            break;"},
{"lineNum":" 2217","line":"        case  4:"},
{"lineNum":" 2218","line":"            t = square_cbrt(x);"},
{"lineNum":" 2219","line":"            if (a != 4) t *= pow_n<VTYPE, a/6>(x);"},
{"lineNum":" 2220","line":"            break;"},
{"lineNum":" 2221","line":"        case  5:"},
{"lineNum":" 2222","line":"            s1 = sqrt(x);"},
{"lineNum":" 2223","line":"            t = cbrt(s1);"},
{"lineNum":" 2224","line":"            t = t*t*s1;"},
{"lineNum":" 2225","line":"            if (a != 5) t *= pow_n<VTYPE, a/6>(x);"},
{"lineNum":" 2226","line":"            break;"},
{"lineNum":" 2227","line":"        }"},
{"lineNum":" 2228","line":"        return t;"},
{"lineNum":" 2229","line":"    }"},
{"lineNum":" 2230","line":"};"},
{"lineNum":" 2231","line":""},
{"lineNum":" 2232","line":"// partial specialization for b = 8"},
{"lineNum":" 2233","line":"template<int a>"},
{"lineNum":" 2234","line":"class Power_rational<a,8> {"},
{"lineNum":" 2235","line":"public:"},
{"lineNum":" 2236","line":"    template<class VTYPE>"},
{"lineNum":" 2237","line":"    VTYPE poww(VTYPE const & x) {"},
{"lineNum":" 2238","line":"        VTYPE t, s1, s2, s3;"},
{"lineNum":" 2239","line":"        s1 = sqrt(x);               // x^(1/2)"},
{"lineNum":" 2240","line":"        if (a & 3) s2 = sqrt(s1);   // x^(1/4)"},
{"lineNum":" 2241","line":"        if (a & 1) s3 = sqrt(s2);   // x^(1/8)"},
{"lineNum":" 2242","line":"        switch (a % 8) {"},
{"lineNum":" 2243","line":"        case -7:"},
{"lineNum":" 2244","line":"            t = s3 / pow_n<VTYPE, 1+(-a)/8>(x);"},
{"lineNum":" 2245","line":"            break;"},
{"lineNum":" 2246","line":"        case -6:"},
{"lineNum":" 2247","line":"            t = s2 / pow_n<VTYPE, 1+(-a)/8>(x);"},
{"lineNum":" 2248","line":"            break;"},
{"lineNum":" 2249","line":"        case -5:"},
{"lineNum":" 2250","line":"            t = s3 * (s2 / pow_n<VTYPE, 1+(-a)/8>(x));"},
{"lineNum":" 2251","line":"            break;"},
{"lineNum":" 2252","line":"        case -4:"},
{"lineNum":" 2253","line":"            t = s1 / pow_n<VTYPE, 1+(-a)/8>(x);"},
{"lineNum":" 2254","line":"            break;"},
{"lineNum":" 2255","line":"        case -3:"},
{"lineNum":" 2256","line":"            t = s3 * (s1 / pow_n<VTYPE, 1+(-a)/8>(x));"},
{"lineNum":" 2257","line":"            break;"},
{"lineNum":" 2258","line":"        case -2:"},
{"lineNum":" 2259","line":"            if (a != -2) s2 *= pow_n<VTYPE, (-a)/8>(x);"},
{"lineNum":" 2260","line":"            t = VTYPE(1.f) / s2;"},
{"lineNum":" 2261","line":"            break;"},
{"lineNum":" 2262","line":"        case -1:"},
{"lineNum":" 2263","line":"            if (a != -1) s3 *= pow_n<VTYPE, (-a)/8>(x);"},
{"lineNum":" 2264","line":"            t = VTYPE(1.f) / s3;"},
{"lineNum":" 2265","line":"            break;"},
{"lineNum":" 2266","line":"        case  0: default:"},
{"lineNum":" 2267","line":"            t = pow_n<VTYPE, a/8>(x);"},
{"lineNum":" 2268","line":"            break;"},
{"lineNum":" 2269","line":"        case  1:"},
{"lineNum":" 2270","line":"            t = s3;"},
{"lineNum":" 2271","line":"            if (a != 1) t *= pow_n<VTYPE, a/8>(x);"},
{"lineNum":" 2272","line":"            break;"},
{"lineNum":" 2273","line":"        case  2:"},
{"lineNum":" 2274","line":"            t = s2;"},
{"lineNum":" 2275","line":"            if (a != 2) t *= pow_n<VTYPE, a/8>(x);"},
{"lineNum":" 2276","line":"            break;"},
{"lineNum":" 2277","line":"        case  3:"},
{"lineNum":" 2278","line":"            t = s2 * s3;"},
{"lineNum":" 2279","line":"            if (a != 3) t *= pow_n<VTYPE, a/8>(x);"},
{"lineNum":" 2280","line":"            break;"},
{"lineNum":" 2281","line":"        case  4:"},
{"lineNum":" 2282","line":"            t = s1;"},
{"lineNum":" 2283","line":"            if (a != 4) t *= pow_n<VTYPE, a/8>(x);"},
{"lineNum":" 2284","line":"            break;"},
{"lineNum":" 2285","line":"        case  5:"},
{"lineNum":" 2286","line":"            t = s1 * s3;"},
{"lineNum":" 2287","line":"            if (a != 5) t *= pow_n<VTYPE, a/8>(x);"},
{"lineNum":" 2288","line":"            break;"},
{"lineNum":" 2289","line":"        case  6:"},
{"lineNum":" 2290","line":"            t = s1 * s2;"},
{"lineNum":" 2291","line":"            if (a != 6) t *= pow_n<VTYPE, a/8>(x);"},
{"lineNum":" 2292","line":"            break;"},
{"lineNum":" 2293","line":"        case  7:"},
{"lineNum":" 2294","line":"            t = s2 * s3;"},
{"lineNum":" 2295","line":"            if (a != 7) s1 *= pow_n<VTYPE, a/8>(x);"},
{"lineNum":" 2296","line":"            t *= s1;"},
{"lineNum":" 2297","line":"            break;"},
{"lineNum":" 2298","line":""},
{"lineNum":" 2299","line":"        }"},
{"lineNum":" 2300","line":"        return t;"},
{"lineNum":" 2301","line":"    }"},
{"lineNum":" 2302","line":"};"},
{"lineNum":" 2303","line":""},
{"lineNum":" 2304","line":"// macro to call template class member function pow"},
{"lineNum":" 2305","line":"#define pow_ratio(x, a, b) (Power_rational<(b)<0 ? -(a):(a), (b)<0 ? -(b):(b)> ().poww(x))"},
{"lineNum":" 2306","line":""},
{"lineNum":" 2307","line":""},
{"lineNum":" 2308","line":"/******************************************************************************"},
{"lineNum":" 2309","line":"*                 Detect NAN codes"},
{"lineNum":" 2310","line":"*"},
{"lineNum":" 2311","line":"* These functions return the code hidden in a NAN. The sign bit is ignored"},
{"lineNum":" 2312","line":"******************************************************************************/"},
{"lineNum":" 2313","line":""},
{"lineNum":" 2314","line":"static inline Vec4ui nan_code(Vec4f const & x) {"},
{"lineNum":" 2315","line":"    Vec4ui a = Vec4ui(reinterpret_i(x));"},
{"lineNum":" 2316","line":"    Vec4ui const n = 0x007FFFFF;"},
{"lineNum":" 2317","line":"    return select(Vec4ib(is_nan(x)), a & n, 0);"},
{"lineNum":" 2318","line":"}"},
{"lineNum":" 2319","line":""},
{"lineNum":" 2320","line":"// This function returns the code hidden in a NAN. The sign bit is ignored"},
{"lineNum":" 2321","line":"static inline Vec2uq nan_code(Vec2d const & x) {"},
{"lineNum":" 2322","line":"    Vec2uq a = Vec2uq(reinterpret_i(x));"},
{"lineNum":" 2323","line":"    return select(Vec2qb(is_nan(x)), a << 12 >> (12+29), 0);"},
{"lineNum":" 2324","line":"}"},
{"lineNum":" 2325","line":""},
{"lineNum":" 2326","line":"#if MAX_VECTOR_SIZE >= 256"},
{"lineNum":" 2327","line":""},
{"lineNum":" 2328","line":"// This function returns the code hidden in a NAN. The sign bit is ignored"},
{"lineNum":" 2329","line":"static inline Vec8ui nan_code(Vec8f const & x) {"},
{"lineNum":" 2330","line":"    Vec8ui a = Vec8ui(reinterpret_i(x));"},
{"lineNum":" 2331","line":"    Vec8ui const n = 0x007FFFFF;"},
{"lineNum":" 2332","line":"    return select(Vec8ib(is_nan(x)), a & n, 0);"},
{"lineNum":" 2333","line":"}"},
{"lineNum":" 2334","line":""},
{"lineNum":" 2335","line":"// This function returns the code hidden in a NAN. The sign bit is ignored"},
{"lineNum":" 2336","line":"static inline Vec4uq nan_code(Vec4d const & x) {"},
{"lineNum":" 2337","line":"    Vec4uq a = Vec4uq(reinterpret_i(x));"},
{"lineNum":" 2338","line":"    return select(Vec4qb(is_nan(x)), a << 12 >> (12+29), 0);"},
{"lineNum":" 2339","line":"}"},
{"lineNum":" 2340","line":""},
{"lineNum":" 2341","line":"#endif // MAX_VECTOR_SIZE >= 256"},
{"lineNum":" 2342","line":"#if MAX_VECTOR_SIZE >= 512"},
{"lineNum":" 2343","line":""},
{"lineNum":" 2344","line":"// This function returns the code hidden in a NAN. The sign bit is ignored"},
{"lineNum":" 2345","line":"static inline Vec16ui nan_code(Vec16f const & x) {"},
{"lineNum":" 2346","line":"    Vec16ui a = Vec16ui(reinterpret_i(x));"},
{"lineNum":" 2347","line":"    Vec16ui const n = 0x007FFFFF;"},
{"lineNum":" 2348","line":"    return select(Vec16ib(is_nan(x)), a & n, 0);"},
{"lineNum":" 2349","line":"}"},
{"lineNum":" 2350","line":""},
{"lineNum":" 2351","line":"// This function returns the code hidden in a NAN. The sign bit is ignored"},
{"lineNum":" 2352","line":"static inline Vec8uq nan_code(Vec8d const & x) {"},
{"lineNum":" 2353","line":"    Vec8uq a = Vec8uq(reinterpret_i(x));"},
{"lineNum":" 2354","line":"    Vec8q const n = 0x000FFFFFFFFFFFFF;"},
{"lineNum":" 2355","line":"    return select(Vec8qb(is_nan(x)), a << 12 >> (12+29), 0);"},
{"lineNum":" 2356","line":"}"},
{"lineNum":" 2357","line":""},
{"lineNum":" 2358","line":"#endif // MAX_VECTOR_SIZE >= 512"},
{"lineNum":" 2359","line":""},
{"lineNum":" 2360","line":"#ifdef VCL_NAMESPACE"},
{"lineNum":" 2361","line":"}"},
{"lineNum":" 2362","line":"#endif"},
{"lineNum":" 2363","line":""},
{"lineNum":" 2364","line":"#endif  // VECTORMATH_EXP_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 3, "covered" : 0,};
var merged_data = [];
