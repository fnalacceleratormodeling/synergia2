var data = {lines:[
{"lineNum":"    1","line":"/*============================================================================="},
{"lineNum":"    2","line":"    Copyright (c) 2001-2011 Joel de Guzman"},
{"lineNum":"    3","line":"    Copyright (c) 2001-2011 Hartmut Kaiser"},
{"lineNum":"    4","line":"    http://spirit.sourceforge.net/"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"    Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    7","line":"    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    8","line":"=============================================================================*/"},
{"lineNum":"    9","line":"#if !defined(BOOST_SPIRIT_CONTAINER_FEBRUARY_06_2007_1001AM)"},
{"lineNum":"   10","line":"#define BOOST_SPIRIT_CONTAINER_FEBRUARY_06_2007_1001AM"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"#if defined(_MSC_VER)"},
{"lineNum":"   13","line":"#pragma once"},
{"lineNum":"   14","line":"#endif"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"#include <boost/spirit/home/support/unused.hpp>"},
{"lineNum":"   17","line":"#include <boost/spirit/home/support/attributes_fwd.hpp>"},
{"lineNum":"   18","line":"#include <boost/mpl/has_xxx.hpp>"},
{"lineNum":"   19","line":"#include <boost/mpl/bool.hpp>"},
{"lineNum":"   20","line":"#include <boost/optional.hpp>"},
{"lineNum":"   21","line":"#include <boost/variant.hpp>"},
{"lineNum":"   22","line":"#include <boost/preprocessor/cat.hpp>"},
{"lineNum":"   23","line":"#include <boost/preprocessor/repeat.hpp>"},
{"lineNum":"   24","line":"#include <boost/range/iterator_range.hpp>"},
{"lineNum":"   25","line":"#include <iterator> // for std::iterator_traits"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"namespace boost { namespace spirit { namespace traits"},
{"lineNum":"   28","line":"{"},
{"lineNum":"   29","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   30","line":"    //  This file contains some container utils for stl containers. The"},
{"lineNum":"   31","line":"    //  utilities provided also accept spirit\'s unused_type; all no-ops."},
{"lineNum":"   32","line":"    //  Compiler optimization will easily strip these away."},
{"lineNum":"   33","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"    namespace detail"},
{"lineNum":"   36","line":"    {"},
{"lineNum":"   37","line":"        BOOST_MPL_HAS_XXX_TRAIT_DEF(value_type)"},
{"lineNum":"   38","line":"        BOOST_MPL_HAS_XXX_TRAIT_DEF(iterator)"},
{"lineNum":"   39","line":"        BOOST_MPL_HAS_XXX_TRAIT_DEF(size_type)"},
{"lineNum":"   40","line":"        BOOST_MPL_HAS_XXX_TRAIT_DEF(reference)"},
{"lineNum":"   41","line":"    }"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"    template <typename T, typename Enable/* = void*/>"},
{"lineNum":"   44","line":"    struct is_container"},
{"lineNum":"   45","line":"      : mpl::bool_<"},
{"lineNum":"   46","line":"            detail::has_value_type<T>::value &&"},
{"lineNum":"   47","line":"            detail::has_iterator<T>::value &&"},
{"lineNum":"   48","line":"            detail::has_size_type<T>::value &&"},
{"lineNum":"   49","line":"            detail::has_reference<T>::value>"},
{"lineNum":"   50","line":"    {};"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"    template <typename T>"},
{"lineNum":"   53","line":"    struct is_container<T&>"},
{"lineNum":"   54","line":"      : is_container<T>"},
{"lineNum":"   55","line":"    {};"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"    template <typename T>"},
{"lineNum":"   58","line":"    struct is_container<boost::optional<T> >"},
{"lineNum":"   59","line":"      : is_container<T>"},
{"lineNum":"   60","line":"    {};"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"#if !defined(BOOST_VARIANT_DO_NOT_USE_VARIADIC_TEMPLATES)"},
{"lineNum":"   63","line":"    template<typename T>"},
{"lineNum":"   64","line":"    struct is_container<boost::variant<T> >"},
{"lineNum":"   65","line":"      : is_container<T>"},
{"lineNum":"   66","line":"    {};"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"    template<typename T0, typename T1, typename ...TN>"},
{"lineNum":"   69","line":"    struct is_container<boost::variant<T0, T1, TN...> >"},
{"lineNum":"   70","line":"      : mpl::bool_<is_container<T0>::value ||"},
{"lineNum":"   71","line":"            is_container<boost::variant<T1, TN...> >::value>"},
{"lineNum":"   72","line":"    {};"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"#else"},
{"lineNum":"   75","line":"#define BOOST_SPIRIT_IS_CONTAINER(z, N, data)                                 \\"},
{"lineNum":"   76","line":"        is_container<BOOST_PP_CAT(T, N)>::value ||                            \\"},
{"lineNum":"   77","line":"    /***/"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"    // make sure unused variant parameters do not affect the outcome"},
{"lineNum":"   80","line":"    template <>"},
{"lineNum":"   81","line":"    struct is_container<boost::detail::variant::void_>"},
{"lineNum":"   82","line":"      : mpl::false_"},
{"lineNum":"   83","line":"    {};"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"    template <BOOST_VARIANT_ENUM_PARAMS(typename T)>"},
{"lineNum":"   86","line":"    struct is_container<variant<BOOST_VARIANT_ENUM_PARAMS(T)> >"},
{"lineNum":"   87","line":"       : mpl::bool_<BOOST_PP_REPEAT(BOOST_VARIANT_LIMIT_TYPES"},
{"lineNum":"   88","line":"            , BOOST_SPIRIT_IS_CONTAINER, _) false>"},
{"lineNum":"   89","line":"    {};"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"#undef BOOST_SPIRIT_IS_CONTAINER"},
{"lineNum":"   92","line":"#endif"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"    template <typename T, typename Enable/* = void*/>"},
{"lineNum":"   95","line":"    struct is_iterator_range"},
{"lineNum":"   96","line":"      : mpl::false_"},
{"lineNum":"   97","line":"    {};"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"    template <typename T>"},
{"lineNum":"  100","line":"    struct is_iterator_range<iterator_range<T> >"},
{"lineNum":"  101","line":"      : mpl::true_"},
{"lineNum":"  102","line":"    {};"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  105","line":"    namespace detail"},
{"lineNum":"  106","line":"    {"},
{"lineNum":"  107","line":"        template <typename T>"},
{"lineNum":"  108","line":"        struct remove_value_const"},
{"lineNum":"  109","line":"        {"},
{"lineNum":"  110","line":"            typedef T type;"},
{"lineNum":"  111","line":"        };"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"        template <typename T>"},
{"lineNum":"  114","line":"        struct remove_value_const<T const>"},
{"lineNum":"  115","line":"          : remove_value_const<T>"},
{"lineNum":"  116","line":"        {};"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"        template <typename F, typename S>"},
{"lineNum":"  119","line":"        struct remove_value_const<std::pair<F, S> >"},
{"lineNum":"  120","line":"        {"},
{"lineNum":"  121","line":"            typedef typename remove_value_const<F>::type first_type;"},
{"lineNum":"  122","line":"            typedef typename remove_value_const<S>::type second_type;"},
{"lineNum":"  123","line":"            typedef std::pair<first_type, second_type> type;"},
{"lineNum":"  124","line":"        };"},
{"lineNum":"  125","line":"    }"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"    ///////////////////////////////////////////////////////////////////////"},
{"lineNum":"  128","line":"    //[customization_container_value_default"},
{"lineNum":"  129","line":"    template <typename Container, typename Enable/* = void*/>"},
{"lineNum":"  130","line":"    struct container_value"},
{"lineNum":"  131","line":"      : detail::remove_value_const<typename Container::value_type>"},
{"lineNum":"  132","line":"    {};"},
{"lineNum":"  133","line":"    //]"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"    template <typename T>"},
{"lineNum":"  136","line":"    struct container_value<T&>"},
{"lineNum":"  137","line":"      : container_value<T>"},
{"lineNum":"  138","line":"    {};"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"    // this will be instantiated if the optional holds a container"},
{"lineNum":"  141","line":"    template <typename T>"},
{"lineNum":"  142","line":"    struct container_value<boost::optional<T> >"},
{"lineNum":"  143","line":"      : container_value<T>"},
{"lineNum":"  144","line":"    {};"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"    // this will be instantiated if the variant holds a container"},
{"lineNum":"  147","line":"    template <BOOST_VARIANT_ENUM_PARAMS(typename T)>"},
{"lineNum":"  148","line":"    struct container_value<variant<BOOST_VARIANT_ENUM_PARAMS(T)> >"},
{"lineNum":"  149","line":"    {"},
{"lineNum":"  150","line":"        typedef typename"},
{"lineNum":"  151","line":"            variant<BOOST_VARIANT_ENUM_PARAMS(T)>::types"},
{"lineNum":"  152","line":"        types;"},
{"lineNum":"  153","line":"        typedef typename"},
{"lineNum":"  154","line":"            mpl::find_if<types, is_container<mpl::_1> >::type"},
{"lineNum":"  155","line":"        iter;"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"        typedef typename container_value<"},
{"lineNum":"  158","line":"            typename mpl::if_<"},
{"lineNum":"  159","line":"                is_same<iter, typename mpl::end<types>::type>"},
{"lineNum":"  160","line":"              , unused_type, typename mpl::deref<iter>::type"},
{"lineNum":"  161","line":"            >::type"},
{"lineNum":"  162","line":"        >::type type;"},
{"lineNum":"  163","line":"    };"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"    //[customization_container_value_unused"},
{"lineNum":"  166","line":"    template <>"},
{"lineNum":"  167","line":"    struct container_value<unused_type>"},
{"lineNum":"  168","line":"    {"},
{"lineNum":"  169","line":"        typedef unused_type type;"},
{"lineNum":"  170","line":"    };"},
{"lineNum":"  171","line":"    //]"},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"    template <>"},
{"lineNum":"  174","line":"    struct container_value<unused_type const>"},
{"lineNum":"  175","line":"    {"},
{"lineNum":"  176","line":"        typedef unused_type type;"},
{"lineNum":"  177","line":"    };"},
{"lineNum":"  178","line":""},
{"lineNum":"  179","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  180","line":"    template <typename Container, typename Enable/* = void*/>"},
{"lineNum":"  181","line":"    struct container_iterator"},
{"lineNum":"  182","line":"    {"},
{"lineNum":"  183","line":"        typedef typename Container::iterator type;"},
{"lineNum":"  184","line":"    };"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"    template <typename Container>"},
{"lineNum":"  187","line":"    struct container_iterator<Container&>"},
{"lineNum":"  188","line":"      : container_iterator<Container>"},
{"lineNum":"  189","line":"    {};"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"    template <typename Container>"},
{"lineNum":"  192","line":"    struct container_iterator<Container const>"},
{"lineNum":"  193","line":"    {"},
{"lineNum":"  194","line":"        typedef typename Container::const_iterator type;"},
{"lineNum":"  195","line":"    };"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"    template <typename T>"},
{"lineNum":"  198","line":"    struct container_iterator<optional<T> >"},
{"lineNum":"  199","line":"      : container_iterator<T>"},
{"lineNum":"  200","line":"    {};"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"    template <typename T>"},
{"lineNum":"  203","line":"    struct container_iterator<optional<T> const>"},
{"lineNum":"  204","line":"      : container_iterator<T const>"},
{"lineNum":"  205","line":"    {};"},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"    template <typename Iterator>"},
{"lineNum":"  208","line":"    struct container_iterator<iterator_range<Iterator> >"},
{"lineNum":"  209","line":"    {"},
{"lineNum":"  210","line":"        typedef typename range_const_iterator<"},
{"lineNum":"  211","line":"              iterator_range<Iterator> >::type type;"},
{"lineNum":"  212","line":"    };"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"    template <>"},
{"lineNum":"  215","line":"    struct container_iterator<unused_type>"},
{"lineNum":"  216","line":"    {"},
{"lineNum":"  217","line":"        typedef unused_type const* type;"},
{"lineNum":"  218","line":"    };"},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"    template <>"},
{"lineNum":"  221","line":"    struct container_iterator<unused_type const>"},
{"lineNum":"  222","line":"    {"},
{"lineNum":"  223","line":"        typedef unused_type const* type;"},
{"lineNum":"  224","line":"    };"},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  227","line":"    template <typename T, typename Enable/* = void*/>"},
{"lineNum":"  228","line":"    struct optional_attribute"},
{"lineNum":"  229","line":"    {"},
{"lineNum":"  230","line":"        typedef T const& type;"},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"        static type call(T const& val)"},
{"lineNum":"  233","line":"        {"},
{"lineNum":"  234","line":"            return val;"},
{"lineNum":"  235","line":"        }"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"        static bool is_valid(T const&)"},
{"lineNum":"  238","line":"        {"},
{"lineNum":"  239","line":"            return true;"},
{"lineNum":"  240","line":"        }"},
{"lineNum":"  241","line":"    };"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"    template <typename T>"},
{"lineNum":"  244","line":"    struct optional_attribute<boost::optional<T> >"},
{"lineNum":"  245","line":"    {"},
{"lineNum":"  246","line":"        typedef T const& type;"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"        static type call(boost::optional<T> const& val)"},
{"lineNum":"  249","line":"        {"},
{"lineNum":"  250","line":"            return boost::get<T>(val);"},
{"lineNum":"  251","line":"        }"},
{"lineNum":"  252","line":""},
{"lineNum":"  253","line":"        static bool is_valid(boost::optional<T> const& val)"},
{"lineNum":"  254","line":"        {"},
{"lineNum":"  255","line":"            return !!val;"},
{"lineNum":"  256","line":"        }"},
{"lineNum":"  257","line":"    };"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"    template <typename T>"},
{"lineNum":"  260","line":"    typename optional_attribute<T>::type"},
{"lineNum":"  261","line":"    optional_value(T const& val)"},
{"lineNum":"  262","line":"    {"},
{"lineNum":"  263","line":"        return optional_attribute<T>::call(val);"},
{"lineNum":"  264","line":"    }"},
{"lineNum":"  265","line":""},
{"lineNum":"  266","line":"    inline unused_type optional_value(unused_type)"},
{"lineNum":"  267","line":"    {"},
{"lineNum":"  268","line":"        return unused;"},
{"lineNum":"  269","line":"    }"},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"    template <typename T>"},
{"lineNum":"  272","line":"    bool has_optional_value(T const& val)"},
{"lineNum":"  273","line":"    {"},
{"lineNum":"  274","line":"        return optional_attribute<T>::is_valid(val);"},
{"lineNum":"  275","line":"    }"},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"    inline bool has_optional_value(unused_type)"},
{"lineNum":"  278","line":"    {"},
{"lineNum":"  279","line":"        return true;"},
{"lineNum":"  280","line":"    }"},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  283","line":"    template <typename Container, typename T>"},
{"lineNum":"  284","line":"    bool push_back(Container& c, T const& val);"},
{"lineNum":"  285","line":""},
{"lineNum":"  286","line":"    //[customization_push_back_default"},
{"lineNum":"  287","line":"    template <typename Container, typename T, typename Enable/* = void*/>"},
{"lineNum":"  288","line":"    struct push_back_container"},
{"lineNum":"  289","line":"    {"},
{"lineNum":"  290","line":"        static bool call(Container& c, T const& val)"},
{"lineNum":"  291","line":"        {"},
{"lineNum":"  292","line":"            c.insert(c.end(), val);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  293","line":"            return true;"},
{"lineNum":"  294","line":"        }"},
{"lineNum":"  295","line":"    };"},
{"lineNum":"  296","line":"    //]"},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":"    template <typename Container, typename T>"},
{"lineNum":"  299","line":"    struct push_back_container<optional<Container>, T>"},
{"lineNum":"  300","line":"    {"},
{"lineNum":"  301","line":"        static bool call(boost::optional<Container>& c, T const& val)"},
{"lineNum":"  302","line":"        {"},
{"lineNum":"  303","line":"            if (!c)"},
{"lineNum":"  304","line":"                c = Container();"},
{"lineNum":"  305","line":"            return push_back(boost::get<Container>(c), val);"},
{"lineNum":"  306","line":"        }"},
{"lineNum":"  307","line":"    };"},
{"lineNum":"  308","line":""},
{"lineNum":"  309","line":"    namespace detail"},
{"lineNum":"  310","line":"    {"},
{"lineNum":"  311","line":"        template <typename T>"},
{"lineNum":"  312","line":"        struct push_back_visitor : public static_visitor<>"},
{"lineNum":"  313","line":"        {"},
{"lineNum":"  314","line":"            typedef bool result_type;"},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":"            push_back_visitor(T const& t) : t_(t) {}"},
{"lineNum":"  317","line":""},
{"lineNum":"  318","line":"            template <typename Container>"},
{"lineNum":"  319","line":"            bool push_back_impl(Container& c, mpl::true_) const"},
{"lineNum":"  320","line":"            {"},
{"lineNum":"  321","line":"                return push_back(c, t_);"},
{"lineNum":"  322","line":"            }"},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"            template <typename T_>"},
{"lineNum":"  325","line":"            bool push_back_impl(T_&, mpl::false_) const"},
{"lineNum":"  326","line":"            {"},
{"lineNum":"  327","line":"                // this variant doesn\'t hold a container"},
{"lineNum":"  328","line":"                BOOST_ASSERT(false && \"This variant doesn\'t hold a container\");"},
{"lineNum":"  329","line":"                return false;"},
{"lineNum":"  330","line":"            }"},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"            template <typename T_>"},
{"lineNum":"  333","line":"            bool operator()(T_& c) const"},
{"lineNum":"  334","line":"            {"},
{"lineNum":"  335","line":"                return push_back_impl(c, typename is_container<T_>::type());"},
{"lineNum":"  336","line":"            }"},
{"lineNum":"  337","line":""},
{"lineNum":"  338","line":"            T const& t_;"},
{"lineNum":"  339","line":"        };"},
{"lineNum":"  340","line":"    }"},
{"lineNum":"  341","line":""},
{"lineNum":"  342","line":"    template <BOOST_VARIANT_ENUM_PARAMS(typename T_), typename T>"},
{"lineNum":"  343","line":"    struct push_back_container<variant<BOOST_VARIANT_ENUM_PARAMS(T_)>, T>"},
{"lineNum":"  344","line":"    {"},
{"lineNum":"  345","line":"        static bool call(variant<BOOST_VARIANT_ENUM_PARAMS(T_)>& c, T const& val)"},
{"lineNum":"  346","line":"        {"},
{"lineNum":"  347","line":"            return apply_visitor(detail::push_back_visitor<T>(val), c);"},
{"lineNum":"  348","line":"        }"},
{"lineNum":"  349","line":"    };"},
{"lineNum":"  350","line":""},
{"lineNum":"  351","line":"    template <typename Container, typename T>"},
{"lineNum":"  352","line":"    bool push_back(Container& c, T const& val)"},
{"lineNum":"  353","line":"    {"},
{"lineNum":"  354","line":"        return push_back_container<Container, T>::call(c, val);"},
{"lineNum":"  355","line":"    }"},
{"lineNum":"  356","line":""},
{"lineNum":"  357","line":"    //[customization_push_back_unused"},
{"lineNum":"  358","line":"    template <typename Container>"},
{"lineNum":"  359","line":"    bool push_back(Container&, unused_type)"},
{"lineNum":"  360","line":"    {"},
{"lineNum":"  361","line":"        return true;"},
{"lineNum":"  362","line":"    }"},
{"lineNum":"  363","line":"    //]"},
{"lineNum":"  364","line":""},
{"lineNum":"  365","line":"    template <typename T>"},
{"lineNum":"  366","line":"    bool push_back(unused_type, T const&)"},
{"lineNum":"  367","line":"    {"},
{"lineNum":"  368","line":"        return true;"},
{"lineNum":"  369","line":"    }"},
{"lineNum":"  370","line":""},
{"lineNum":"  371","line":"    inline bool push_back(unused_type, unused_type)"},
{"lineNum":"  372","line":"    {"},
{"lineNum":"  373","line":"        return true;"},
{"lineNum":"  374","line":"    }"},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  377","line":"    template <typename Container, typename Enable/* = void*/>"},
{"lineNum":"  378","line":"    struct is_empty_container"},
{"lineNum":"  379","line":"    {"},
{"lineNum":"  380","line":"        static bool call(Container const& c)"},
{"lineNum":"  381","line":"        {"},
{"lineNum":"  382","line":"            return c.empty();"},
{"lineNum":"  383","line":"        }"},
{"lineNum":"  384","line":"    };"},
{"lineNum":"  385","line":""},
{"lineNum":"  386","line":"    template <typename Container>"},
{"lineNum":"  387","line":"    bool is_empty(Container const& c)"},
{"lineNum":"  388","line":"    {"},
{"lineNum":"  389","line":"        return is_empty_container<Container>::call(c);"},
{"lineNum":"  390","line":"    }"},
{"lineNum":"  391","line":""},
{"lineNum":"  392","line":"    inline bool is_empty(unused_type)"},
{"lineNum":"  393","line":"    {"},
{"lineNum":"  394","line":"        return true;"},
{"lineNum":"  395","line":"    }"},
{"lineNum":"  396","line":""},
{"lineNum":"  397","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  398","line":"    // Ensure the attribute is actually a container type"},
{"lineNum":"  399","line":"    template <typename Container, typename Enable/* = void*/>"},
{"lineNum":"  400","line":"    struct make_container_attribute"},
{"lineNum":"  401","line":"    {"},
{"lineNum":"  402","line":"        static void call(Container&)"},
{"lineNum":"  403","line":"        {"},
{"lineNum":"  404","line":"            // for static types this function does nothing"},
{"lineNum":"  405","line":"        }"},
{"lineNum":"  406","line":"    };"},
{"lineNum":"  407","line":""},
{"lineNum":"  408","line":"    template <typename T>"},
{"lineNum":"  409","line":"    void make_container(T& t)"},
{"lineNum":"  410","line":"    {"},
{"lineNum":"  411","line":"        make_container_attribute<T>::call(t);"},
{"lineNum":"  412","line":"    }"},
{"lineNum":"  413","line":""},
{"lineNum":"  414","line":"    inline void make_container(unused_type)"},
{"lineNum":"  415","line":"    {"},
{"lineNum":"  416","line":"    }"},
{"lineNum":"  417","line":""},
{"lineNum":"  418","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  419","line":"    template <typename Container, typename Enable/* = void*/>"},
{"lineNum":"  420","line":"    struct begin_container"},
{"lineNum":"  421","line":"    {"},
{"lineNum":"  422","line":"        static typename container_iterator<Container>::type call(Container& c)"},
{"lineNum":"  423","line":"        {"},
{"lineNum":"  424","line":"            return c.begin();"},
{"lineNum":"  425","line":"        }"},
{"lineNum":"  426","line":"    };"},
{"lineNum":"  427","line":""},
{"lineNum":"  428","line":"    template <typename Container>"},
{"lineNum":"  429","line":"    typename spirit::result_of::begin<Container>::type"},
{"lineNum":"  430","line":"    begin(Container& c)"},
{"lineNum":"  431","line":"    {"},
{"lineNum":"  432","line":"        return begin_container<Container>::call(c);"},
{"lineNum":"  433","line":"    }"},
{"lineNum":"  434","line":""},
{"lineNum":"  435","line":"    inline unused_type const*"},
{"lineNum":"  436","line":"    begin(unused_type)"},
{"lineNum":"  437","line":"    {"},
{"lineNum":"  438","line":"        return &unused;"},
{"lineNum":"  439","line":"    }"},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  442","line":"    template <typename Container, typename Enable/* = void*/>"},
{"lineNum":"  443","line":"    struct end_container"},
{"lineNum":"  444","line":"    {"},
{"lineNum":"  445","line":"        static typename container_iterator<Container>::type call(Container& c)"},
{"lineNum":"  446","line":"        {"},
{"lineNum":"  447","line":"            return c.end();"},
{"lineNum":"  448","line":"        }"},
{"lineNum":"  449","line":"    };"},
{"lineNum":"  450","line":""},
{"lineNum":"  451","line":"    template <typename Container>"},
{"lineNum":"  452","line":"    inline typename spirit::result_of::end<Container>::type"},
{"lineNum":"  453","line":"    end(Container& c)"},
{"lineNum":"  454","line":"    {"},
{"lineNum":"  455","line":"        return end_container<Container>::call(c);"},
{"lineNum":"  456","line":"    }"},
{"lineNum":"  457","line":""},
{"lineNum":"  458","line":"    inline unused_type const*"},
{"lineNum":"  459","line":"    end(unused_type)"},
{"lineNum":"  460","line":"    {"},
{"lineNum":"  461","line":"        return &unused;"},
{"lineNum":"  462","line":"    }"},
{"lineNum":"  463","line":""},
{"lineNum":"  464","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  465","line":"    template <typename Iterator, typename Enable/* = void*/>"},
{"lineNum":"  466","line":"    struct deref_iterator"},
{"lineNum":"  467","line":"    {"},
{"lineNum":"  468","line":"        typedef typename std::iterator_traits<Iterator>::reference type;"},
{"lineNum":"  469","line":"        static type call(Iterator& it)"},
{"lineNum":"  470","line":"        {"},
{"lineNum":"  471","line":"            return *it;"},
{"lineNum":"  472","line":"        }"},
{"lineNum":"  473","line":"    };"},
{"lineNum":"  474","line":""},
{"lineNum":"  475","line":"    template <typename Iterator>"},
{"lineNum":"  476","line":"    typename deref_iterator<Iterator>::type"},
{"lineNum":"  477","line":"    deref(Iterator& it)"},
{"lineNum":"  478","line":"    {"},
{"lineNum":"  479","line":"        return deref_iterator<Iterator>::call(it);"},
{"lineNum":"  480","line":"    }"},
{"lineNum":"  481","line":""},
{"lineNum":"  482","line":"    inline unused_type"},
{"lineNum":"  483","line":"    deref(unused_type const*)"},
{"lineNum":"  484","line":"    {"},
{"lineNum":"  485","line":"        return unused;"},
{"lineNum":"  486","line":"    }"},
{"lineNum":"  487","line":""},
{"lineNum":"  488","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  489","line":"    template <typename Iterator, typename Enable/* = void*/>"},
{"lineNum":"  490","line":"    struct next_iterator"},
{"lineNum":"  491","line":"    {"},
{"lineNum":"  492","line":"        static void call(Iterator& it)"},
{"lineNum":"  493","line":"        {"},
{"lineNum":"  494","line":"            ++it;"},
{"lineNum":"  495","line":"        }"},
{"lineNum":"  496","line":"    };"},
{"lineNum":"  497","line":""},
{"lineNum":"  498","line":"    template <typename Iterator>"},
{"lineNum":"  499","line":"    void next(Iterator& it)"},
{"lineNum":"  500","line":"    {"},
{"lineNum":"  501","line":"        next_iterator<Iterator>::call(it);"},
{"lineNum":"  502","line":"    }"},
{"lineNum":"  503","line":""},
{"lineNum":"  504","line":"    inline void next(unused_type const*)"},
{"lineNum":"  505","line":"    {"},
{"lineNum":"  506","line":"        // do nothing"},
{"lineNum":"  507","line":"    }"},
{"lineNum":"  508","line":""},
{"lineNum":"  509","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  510","line":"    template <typename Iterator, typename Enable/* = void*/>"},
{"lineNum":"  511","line":"    struct compare_iterators"},
{"lineNum":"  512","line":"    {"},
{"lineNum":"  513","line":"        static bool call(Iterator const& it1, Iterator const& it2)"},
{"lineNum":"  514","line":"        {"},
{"lineNum":"  515","line":"            return it1 == it2;"},
{"lineNum":"  516","line":"        }"},
{"lineNum":"  517","line":"    };"},
{"lineNum":"  518","line":""},
{"lineNum":"  519","line":"    template <typename Iterator>"},
{"lineNum":"  520","line":"    bool compare(Iterator& it1, Iterator& it2)"},
{"lineNum":"  521","line":"    {"},
{"lineNum":"  522","line":"        return compare_iterators<Iterator>::call(it1, it2);"},
{"lineNum":"  523","line":"    }"},
{"lineNum":"  524","line":""},
{"lineNum":"  525","line":"    inline bool compare(unused_type const*, unused_type const*)"},
{"lineNum":"  526","line":"    {"},
{"lineNum":"  527","line":"        return false;"},
{"lineNum":"  528","line":"    }"},
{"lineNum":"  529","line":"}}}"},
{"lineNum":"  530","line":""},
{"lineNum":"  531","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  532","line":"namespace boost { namespace spirit { namespace result_of"},
{"lineNum":"  533","line":"{"},
{"lineNum":"  534","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  535","line":"    template <typename T>"},
{"lineNum":"  536","line":"    struct optional_value"},
{"lineNum":"  537","line":"    {"},
{"lineNum":"  538","line":"        typedef T type;"},
{"lineNum":"  539","line":"    };"},
{"lineNum":"  540","line":""},
{"lineNum":"  541","line":"    template <typename T>"},
{"lineNum":"  542","line":"    struct optional_value<boost::optional<T> >"},
{"lineNum":"  543","line":"    {"},
{"lineNum":"  544","line":"        typedef T type;"},
{"lineNum":"  545","line":"    };"},
{"lineNum":"  546","line":""},
{"lineNum":"  547","line":"    template <typename T>"},
{"lineNum":"  548","line":"    struct optional_value<boost::optional<T> const>"},
{"lineNum":"  549","line":"    {"},
{"lineNum":"  550","line":"        typedef T const type;"},
{"lineNum":"  551","line":"    };"},
{"lineNum":"  552","line":""},
{"lineNum":"  553","line":"    template <>"},
{"lineNum":"  554","line":"    struct optional_value<unused_type>"},
{"lineNum":"  555","line":"    {"},
{"lineNum":"  556","line":"        typedef unused_type type;"},
{"lineNum":"  557","line":"    };"},
{"lineNum":"  558","line":""},
{"lineNum":"  559","line":"    template <>"},
{"lineNum":"  560","line":"    struct optional_value<unused_type const>"},
{"lineNum":"  561","line":"    {"},
{"lineNum":"  562","line":"        typedef unused_type type;"},
{"lineNum":"  563","line":"    };"},
{"lineNum":"  564","line":""},
{"lineNum":"  565","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  566","line":"    template <typename Container>"},
{"lineNum":"  567","line":"    struct begin"},
{"lineNum":"  568","line":"      : traits::container_iterator<Container>"},
{"lineNum":"  569","line":"    {};"},
{"lineNum":"  570","line":""},
{"lineNum":"  571","line":"    template <typename Container>"},
{"lineNum":"  572","line":"    struct end"},
{"lineNum":"  573","line":"      : traits::container_iterator<Container>"},
{"lineNum":"  574","line":"    {};"},
{"lineNum":"  575","line":""},
{"lineNum":"  576","line":"    template <typename Iterator>"},
{"lineNum":"  577","line":"    struct deref"},
{"lineNum":"  578","line":"      : traits::deref_iterator<Iterator>"},
{"lineNum":"  579","line":"    {};"},
{"lineNum":"  580","line":""},
{"lineNum":"  581","line":"    template <>"},
{"lineNum":"  582","line":"    struct deref<unused_type const*>"},
{"lineNum":"  583","line":"    {"},
{"lineNum":"  584","line":"        typedef unused_type type;"},
{"lineNum":"  585","line":"    };"},
{"lineNum":"  586","line":""},
{"lineNum":"  587","line":"}}}"},
{"lineNum":"  588","line":""},
{"lineNum":"  589","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 1, "covered" : 0,};
var merged_data = [];
