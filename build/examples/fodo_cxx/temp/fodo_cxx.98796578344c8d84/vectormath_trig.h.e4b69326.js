var data = {lines:[
{"lineNum":"    1","line":"/****************************  vectormath_trig.h   ******************************"},
{"lineNum":"    2","line":"* Author:        Agner Fog"},
{"lineNum":"    3","line":"* Date created:  2014-04-18"},
{"lineNum":"    4","line":"* Last modified: 2019-08-01"},
{"lineNum":"    5","line":"* Version:       1.40.00"},
{"lineNum":"    6","line":"* Project:       vector class library"},
{"lineNum":"    7","line":"* Description:"},
{"lineNum":"    8","line":"* Header file containing inline version of trigonometric functions"},
{"lineNum":"    9","line":"* and inverse trigonometric functions"},
{"lineNum":"   10","line":"* sin, cos, sincos, tan"},
{"lineNum":"   11","line":"* asin, acos, atan, atan2"},
{"lineNum":"   12","line":"*"},
{"lineNum":"   13","line":"* Theory, methods and inspiration based partially on these sources:"},
{"lineNum":"   14","line":"* > Moshier, Stephen Lloyd Baluk: Methods and programs for mathematical functions."},
{"lineNum":"   15","line":"*   Ellis Horwood, 1989."},
{"lineNum":"   16","line":"* > VDT library developed on CERN by Danilo Piparo, Thomas Hauth and"},
{"lineNum":"   17","line":"*   Vincenzo Innocente, 2012, https://svnweb.cern.ch/trac/vdt"},
{"lineNum":"   18","line":"* > Cephes math library by Stephen L. Moshier 1992,"},
{"lineNum":"   19","line":"*   http://www.netlib.org/cephes/"},
{"lineNum":"   20","line":"*"},
{"lineNum":"   21","line":"* For detailed instructions, see vcl_manual.pdf"},
{"lineNum":"   22","line":"*"},
{"lineNum":"   23","line":"* (c) Copyright 2014-2019 Agner Fog."},
{"lineNum":"   24","line":"* Apache License version 2.0 or later."},
{"lineNum":"   25","line":"******************************************************************************/"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"#ifndef VECTORMATH_TRIG_H"},
{"lineNum":"   28","line":"#define VECTORMATH_TRIG_H  1"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"#include \"vectormath_common.h\""},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"#ifdef VCL_NAMESPACE"},
{"lineNum":"   33","line":"namespace VCL_NAMESPACE {"},
{"lineNum":"   34","line":"#endif"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"// *************************************************************"},
{"lineNum":"   38","line":"//             sincos template, double precision"},
{"lineNum":"   39","line":"// *************************************************************"},
{"lineNum":"   40","line":"// Template parameters:"},
{"lineNum":"   41","line":"// VTYPE:  f.p. vector type"},
{"lineNum":"   42","line":"// ITYPE:  integer vector type with same element size"},
{"lineNum":"   43","line":"// BVTYPE: boolean vector type"},
{"lineNum":"   44","line":"// SC:     1 = sin, 2 = cos, 3 = sincos"},
{"lineNum":"   45","line":"// Paramterers:"},
{"lineNum":"   46","line":"// xx = input x (radians)"},
{"lineNum":"   47","line":"// cosret = return pointer (only if SC = 3)"},
{"lineNum":"   48","line":"template<class VTYPE, class ITYPE, class BVTYPE, int SC>"},
{"lineNum":"   49","line":"static inline VTYPE sincos_d(VTYPE * cosret, VTYPE const & xx) {"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"    // define constants"},
{"lineNum":"   52","line":"    const double ONEOPIO4 = 4. / VM_PI;"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"    const double P0sin = -1.66666666666666307295E-1;"},
{"lineNum":"   55","line":"    const double P1sin = 8.33333333332211858878E-3;"},
{"lineNum":"   56","line":"    const double P2sin = -1.98412698295895385996E-4;"},
{"lineNum":"   57","line":"    const double P3sin = 2.75573136213857245213E-6;"},
{"lineNum":"   58","line":"    const double P4sin = -2.50507477628578072866E-8;"},
{"lineNum":"   59","line":"    const double P5sin = 1.58962301576546568060E-10;"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"    const double P0cos = 4.16666666666665929218E-2;"},
{"lineNum":"   62","line":"    const double P1cos = -1.38888888888730564116E-3;"},
{"lineNum":"   63","line":"    const double P2cos = 2.48015872888517045348E-5;"},
{"lineNum":"   64","line":"    const double P3cos = -2.75573141792967388112E-7;"},
{"lineNum":"   65","line":"    const double P4cos = 2.08757008419747316778E-9;"},
{"lineNum":"   66","line":"    const double P5cos = -1.13585365213876817300E-11;"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"    const double DP1 = 7.853981554508209228515625E-1 * 2.;"},
{"lineNum":"   69","line":"    const double DP2 = 7.94662735614792836714E-9 * 2.;"},
{"lineNum":"   70","line":"    const double DP3 = 3.06161699786838294307E-17 * 2.;"},
{"lineNum":"   71","line":"    /*"},
{"lineNum":"   72","line":"    const double DP1sc = 7.85398125648498535156E-1;"},
{"lineNum":"   73","line":"    const double DP2sc = 3.77489470793079817668E-8;"},
{"lineNum":"   74","line":"    const double DP3sc = 2.69515142907905952645E-15;"},
{"lineNum":"   75","line":"    */"},
{"lineNum":"   76","line":"    VTYPE  xa, x, y, x2, s, c, sin1, cos1;       // data vectors"},
{"lineNum":"   77","line":"    ITYPE  q, qq, signsin, signcos;              // integer vectors, 64 bit"},
{"lineNum":"   78","line":"    BVTYPE swap, overflow;                       // boolean vectors"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"    xa = abs(xx);"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"    // Find quadrant"},
{"lineNum":"   83","line":"    y = round(xa * (double)(2. / VM_PI));   // quadrant, as float"},
{"lineNum":"   84","line":"    q = round_to_int64(y);                  // quadrant, as integer"},
{"lineNum":"   85","line":"    // Find quadrant"},
{"lineNum":"   86","line":"    //      0 -   pi/4 => 0"},
{"lineNum":"   87","line":"    //   pi/4 - 3*pi/4 => 1"},
{"lineNum":"   88","line":"    // 3*pi/4 - 5*pi/4 => 2"},
{"lineNum":"   89","line":"    // 5*pi/4 - 7*pi/4 => 3"},
{"lineNum":"   90","line":"    // 7*pi/4 - 8*pi/4 => 4"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"    // Reduce by extended precision modular arithmetic"},
{"lineNum":"   93","line":"    x = nmul_add(y, DP3, nmul_add(y, DP2, nmul_add(y, DP1, xa)));    // x = ((xa - y * DP1) - y * DP2) - y * DP3;"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"    // Expansion of sin and cos, valid for -pi/4 <= x <= pi/4"},
{"lineNum":"   96","line":"    x2 = x * x;"},
{"lineNum":"   97","line":"    s = polynomial_5(x2, P0sin, P1sin, P2sin, P3sin, P4sin, P5sin);"},
{"lineNum":"   98","line":"    c = polynomial_5(x2, P0cos, P1cos, P2cos, P3cos, P4cos, P5cos);"},
{"lineNum":"   99","line":"    s = mul_add(x * x2, s, x);                                       // s = x + (x * x2) * s;"},
{"lineNum":"  100","line":"    c = mul_add(x2 * x2, c, nmul_add(x2, 0.5, 1.0));                 // c = 1.0 - x2 * 0.5 + (x2 * x2) * c;"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"    // swap sin and cos if odd quadrant"},
{"lineNum":"  103","line":"    swap = BVTYPE((q & 1) != 0);"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"    // check for overflow"},
{"lineNum":"  107","line":"    overflow = BVTYPE(q > 0x80000000000000);  // q big if overflow"},
{"lineNum":"  108","line":"    overflow &= is_finite(xa);"},
{"lineNum":"  109","line":"    s = select(overflow, 0.0, s);"},
{"lineNum":"  110","line":"    c = select(overflow, 1.0, c);"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"    if (SC & 1) {  // calculate sin"},
{"lineNum":"  113","line":"        sin1 = select(swap, c, s);"},
{"lineNum":"  114","line":"        signsin = ((q << 62) ^ ITYPE(reinterpret_i(xx))) & 0x8000000000000000;"},
{"lineNum":"  115","line":"        sin1 ^= reinterpret_d(signsin);"},
{"lineNum":"  116","line":"    }"},
{"lineNum":"  117","line":"    if (SC & 2) {  // calculate cos"},
{"lineNum":"  118","line":"        cos1 = select(swap, s, c);"},
{"lineNum":"  119","line":"        signcos = ((q + 1) & 2) << 62;"},
{"lineNum":"  120","line":"        cos1 ^= reinterpret_d(signcos);"},
{"lineNum":"  121","line":"    }"},
{"lineNum":"  122","line":"    if (SC == 3) {  // calculate both. cos returned through pointer"},
{"lineNum":"  123","line":"        *cosret = cos1;"},
{"lineNum":"  124","line":"    }"},
{"lineNum":"  125","line":"    if (SC & 1) return sin1; else return cos1;"},
{"lineNum":"  126","line":"}"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"// instantiations of sincos_d template:"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"static inline Vec2d sin(Vec2d const & x) {"},
{"lineNum":"  131","line":"    return sincos_d<Vec2d, Vec2q, Vec2db, 1>(0, x);"},
{"lineNum":"  132","line":"}"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"static inline Vec2d cos(Vec2d const & x) {"},
{"lineNum":"  135","line":"    return sincos_d<Vec2d, Vec2q, Vec2db, 2>(0, x);"},
{"lineNum":"  136","line":"}"},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"static inline Vec2d sincos(Vec2d * cosret, Vec2d const & x) {"},
{"lineNum":"  139","line":"    return sincos_d<Vec2d, Vec2q, Vec2db, 3>(cosret, x);"},
{"lineNum":"  140","line":"}"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"#if MAX_VECTOR_SIZE >= 256"},
{"lineNum":"  143","line":"static inline Vec4d sin(Vec4d const & x) {"},
{"lineNum":"  144","line":"    return sincos_d<Vec4d, Vec4q, Vec4db, 1>(0, x);"},
{"lineNum":"  145","line":"}"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"static inline Vec4d cos(Vec4d const & x) {"},
{"lineNum":"  148","line":"    return sincos_d<Vec4d, Vec4q, Vec4db, 2>(0, x);"},
{"lineNum":"  149","line":"}"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"static inline Vec4d sincos(Vec4d * cosret, Vec4d const & x) {"},
{"lineNum":"  152","line":"    return sincos_d<Vec4d, Vec4q, Vec4db, 3>(cosret, x);"},
{"lineNum":"  153","line":"}"},
{"lineNum":"  154","line":"#endif // MAX_VECTOR_SIZE >= 256"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"#if MAX_VECTOR_SIZE >= 512"},
{"lineNum":"  157","line":"static inline Vec8d sin(Vec8d const & x) {"},
{"lineNum":"  158","line":"    return sincos_d<Vec8d, Vec8q, Vec8db, 1>(0, x);"},
{"lineNum":"  159","line":"}"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"static inline Vec8d cos(Vec8d const & x) {"},
{"lineNum":"  162","line":"    return sincos_d<Vec8d, Vec8q, Vec8db, 2>(0, x);"},
{"lineNum":"  163","line":"}"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"static inline Vec8d sincos(Vec8d * cosret, Vec8d const & x) {"},
{"lineNum":"  166","line":"    return sincos_d<Vec8d, Vec8q, Vec8db, 3>(cosret, x);"},
{"lineNum":"  167","line":"}"},
{"lineNum":"  168","line":"#endif // MAX_VECTOR_SIZE >= 512"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"// *************************************************************"},
{"lineNum":"  172","line":"//             sincos template, single precision"},
{"lineNum":"  173","line":"// *************************************************************"},
{"lineNum":"  174","line":"// Template parameters:"},
{"lineNum":"  175","line":"// VTYPE:  f.p. vector type"},
{"lineNum":"  176","line":"// ITYPE:  integer vector type with same element size"},
{"lineNum":"  177","line":"// BVTYPE: boolean vector type"},
{"lineNum":"  178","line":"// SC:     1 = sin, 2 = cos, 3 = sincos, 4 = tan"},
{"lineNum":"  179","line":"// Paramterers:"},
{"lineNum":"  180","line":"// xx = input x (radians)"},
{"lineNum":"  181","line":"// cosret = return pointer (only if SC = 3)"},
{"lineNum":"  182","line":"template<class VTYPE, class ITYPE, class BVTYPE, int SC>"},
{"lineNum":"  183","line":"static inline VTYPE sincos_f(VTYPE * cosret, VTYPE const & xx) {"},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"    // define constants"},
{"lineNum":"  186","line":"    const float DP1F = 0.78515625f * 2.f;"},
{"lineNum":"  187","line":"    const float DP2F = 2.4187564849853515625E-4f * 2.f;"},
{"lineNum":"  188","line":"    const float DP3F = 3.77489497744594108E-8f * 2.f;"},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"    const float P0sinf = -1.6666654611E-1f;"},
{"lineNum":"  191","line":"    const float P1sinf = 8.3321608736E-3f;"},
{"lineNum":"  192","line":"    const float P2sinf = -1.9515295891E-4f;"},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"    const float P0cosf = 4.166664568298827E-2f;"},
{"lineNum":"  195","line":"    const float P1cosf = -1.388731625493765E-3f;"},
{"lineNum":"  196","line":"    const float P2cosf = 2.443315711809948E-5f;"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"    VTYPE  xa, x, y, x2, s, c, sin1, cos1;  // data vectors"},
{"lineNum":"  199","line":"    ITYPE  q, signsin, signcos;             // integer vectors"},
{"lineNum":"  200","line":"    BVTYPE swap, overflow;                  // boolean vectors"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"    xa = abs(xx);"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"    // Find quadrant"},
{"lineNum":"  205","line":"    y = round(xa * (float)(2. / VM_PI));    // quadrant, as float"},
{"lineNum":"  206","line":"    q = round_to_int(y);                    // quadrant, as integer"},
{"lineNum":"  207","line":"    //      0 -   pi/4 => 0"},
{"lineNum":"  208","line":"    //   pi/4 - 3*pi/4 => 1"},
{"lineNum":"  209","line":"    // 3*pi/4 - 5*pi/4 => 2"},
{"lineNum":"  210","line":"    // 5*pi/4 - 7*pi/4 => 3"},
{"lineNum":"  211","line":"    // 7*pi/4 - 8*pi/4 => 4"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"    // Reduce by extended precision modular arithmetic"},
{"lineNum":"  214","line":"    x = nmul_add(y, DP3F, nmul_add(y, DP2F, nmul_add(y, DP1F, xa))); // x = ((xa - y * DP1F) - y * DP2F) - y * DP3F;"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"    // A two-step reduction saves time at the cost of precision for very big x:"},
{"lineNum":"  217","line":"    //x = (xa - y * DP1F) - y * (DP2F+DP3F);"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"    // Taylor expansion of sin and cos, valid for -pi/4 <= x <= pi/4"},
{"lineNum":"  220","line":"    x2 = x * x;"},
{"lineNum":"  221","line":"    s = polynomial_2(x2, P0sinf, P1sinf, P2sinf) * (x*x2) + x;"},
{"lineNum":"  222","line":"    c = polynomial_2(x2, P0cosf, P1cosf, P2cosf) * (x2*x2) + nmul_add(0.5f, x2, 1.0f);"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"    // swap sin and cos if odd quadrant"},
{"lineNum":"  225","line":"    swap = BVTYPE((q & 1) != 0);"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"    // check for overflow"},
{"lineNum":"  228","line":"    overflow = BVTYPE(q > 0x2000000);  // q big if overflow"},
{"lineNum":"  229","line":"    overflow &= is_finite(xa);"},
{"lineNum":"  230","line":"    s = select(overflow, 0.0f, s);"},
{"lineNum":"  231","line":"    c = select(overflow, 1.0f, c);"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"    if (SC & 5) {  // calculate sin"},
{"lineNum":"  234","line":"        sin1 = select(swap, c, s);"},
{"lineNum":"  235","line":"        signsin = ((q << 30) ^ ITYPE(reinterpret_i(xx))) & 0x80000000;"},
{"lineNum":"  236","line":"        sin1 ^= reinterpret_f(signsin);"},
{"lineNum":"  237","line":"    }"},
{"lineNum":"  238","line":"    if (SC & 6) {  // calculate cos"},
{"lineNum":"  239","line":"        cos1 = select(swap, s, c);"},
{"lineNum":"  240","line":"        signcos = ((q + 1) & 2) << 30;"},
{"lineNum":"  241","line":"        cos1 ^= reinterpret_f(signcos);"},
{"lineNum":"  242","line":"    }"},
{"lineNum":"  243","line":"    if (SC == 1) return sin1;"},
{"lineNum":"  244","line":"    else if (SC == 2) return cos1;"},
{"lineNum":"  245","line":"    else if (SC == 3) {  // calculate both. cos returned through pointer"},
{"lineNum":"  246","line":"        *cosret = cos1;"},
{"lineNum":"  247","line":"        return sin1;"},
{"lineNum":"  248","line":"    }"},
{"lineNum":"  249","line":"    else {  // SC == 4. tan"},
{"lineNum":"  250","line":"        return sin1 / cos1;"},
{"lineNum":"  251","line":"    }"},
{"lineNum":"  252","line":"}"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"// instantiations of sincos_f template:"},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"static inline Vec4f sin(Vec4f const & x) {"},
{"lineNum":"  257","line":"    return sincos_f<Vec4f, Vec4i, Vec4fb, 1>(0, x);"},
{"lineNum":"  258","line":"}"},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"static inline Vec4f cos(Vec4f const & x) {"},
{"lineNum":"  261","line":"    return sincos_f<Vec4f, Vec4i, Vec4fb, 2>(0, x);"},
{"lineNum":"  262","line":"}"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"static inline Vec4f sincos(Vec4f * cosret, Vec4f const & x) {"},
{"lineNum":"  265","line":"    return sincos_f<Vec4f, Vec4i, Vec4fb, 3>(cosret, x);"},
{"lineNum":"  266","line":"}"},
{"lineNum":"  267","line":""},
{"lineNum":"  268","line":"static inline Vec4f tan(Vec4f const & x) {"},
{"lineNum":"  269","line":"    return sincos_f<Vec4f, Vec4i, Vec4fb, 4>(0, x);"},
{"lineNum":"  270","line":"}"},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"#if MAX_VECTOR_SIZE >= 256"},
{"lineNum":"  273","line":"static inline Vec8f sin(Vec8f const & x) {"},
{"lineNum":"  274","line":"    return sincos_f<Vec8f, Vec8i, Vec8fb, 1>(0, x);"},
{"lineNum":"  275","line":"}"},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"static inline Vec8f cos(Vec8f const & x) {"},
{"lineNum":"  278","line":"    return sincos_f<Vec8f, Vec8i, Vec8fb, 2>(0, x);"},
{"lineNum":"  279","line":"}"},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"static inline Vec8f sincos(Vec8f * cosret, Vec8f const & x) {"},
{"lineNum":"  282","line":"    return sincos_f<Vec8f, Vec8i, Vec8fb, 3>(cosret, x);"},
{"lineNum":"  283","line":"}"},
{"lineNum":"  284","line":""},
{"lineNum":"  285","line":"static inline Vec8f tan(Vec8f const & x) {"},
{"lineNum":"  286","line":"    return sincos_f<Vec8f, Vec8i, Vec8fb, 4>(0, x);"},
{"lineNum":"  287","line":"}"},
{"lineNum":"  288","line":"#endif // MAX_VECTOR_SIZE >= 256"},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"#if MAX_VECTOR_SIZE >= 512"},
{"lineNum":"  291","line":"static inline Vec16f sin(Vec16f const & x) {"},
{"lineNum":"  292","line":"    return sincos_f<Vec16f, Vec16i, Vec16fb, 1>(0, x);"},
{"lineNum":"  293","line":"}"},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":"static inline Vec16f cos(Vec16f const & x) {"},
{"lineNum":"  296","line":"    return sincos_f<Vec16f, Vec16i, Vec16fb, 2>(0, x);"},
{"lineNum":"  297","line":"}"},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"static inline Vec16f sincos(Vec16f * cosret, Vec16f const & x) {"},
{"lineNum":"  300","line":"    return sincos_f<Vec16f, Vec16i, Vec16fb, 3>(cosret, x);"},
{"lineNum":"  301","line":"}"},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"static inline Vec16f tan(Vec16f const & x) {"},
{"lineNum":"  304","line":"    return sincos_f<Vec16f, Vec16i, Vec16fb, 4>(0, x);"},
{"lineNum":"  305","line":"}"},
{"lineNum":"  306","line":"#endif // MAX_VECTOR_SIZE >= 512"},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":""},
{"lineNum":"  309","line":"// *************************************************************"},
{"lineNum":"  310","line":"//             tan template, double precision"},
{"lineNum":"  311","line":"// *************************************************************"},
{"lineNum":"  312","line":"// Template parameters:"},
{"lineNum":"  313","line":"// VTYPE:  f.p. vector type"},
{"lineNum":"  314","line":"// ITYPE:  integer vector type with same element size"},
{"lineNum":"  315","line":"// BVTYPE: boolean vector type"},
{"lineNum":"  316","line":"// Paramterers:"},
{"lineNum":"  317","line":"// x = input x (radians)"},
{"lineNum":"  318","line":"template<class VTYPE, class ITYPE, class BVTYPE>"},
{"lineNum":"  319","line":"static inline VTYPE tan_d(VTYPE const & x) {"},
{"lineNum":"  320","line":""},
{"lineNum":"  321","line":"    // define constants"},
{"lineNum":"  322","line":"    const double ONEOPIO4 = 4. / VM_PI;"},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"    const double DP1 = 7.853981554508209228515625E-1 * 2.;;"},
{"lineNum":"  325","line":"    const double DP2 = 7.94662735614792836714E-9 * 2.;;"},
{"lineNum":"  326","line":"    const double DP3 = 3.06161699786838294307E-17 * 2.;;"},
{"lineNum":"  327","line":""},
{"lineNum":"  328","line":"    const double P2tan = -1.30936939181383777646E4;"},
{"lineNum":"  329","line":"    const double P1tan = 1.15351664838587416140E6;"},
{"lineNum":"  330","line":"    const double P0tan = -1.79565251976484877988E7;"},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"    const double Q3tan = 1.36812963470692954678E4;"},
{"lineNum":"  333","line":"    const double Q2tan = -1.32089234440210967447E6;"},
{"lineNum":"  334","line":"    const double Q1tan = 2.50083801823357915839E7;"},
{"lineNum":"  335","line":"    const double Q0tan = -5.38695755929454629881E7;"},
{"lineNum":"  336","line":""},
{"lineNum":"  337","line":"    VTYPE  xa, y, z, zz, px, qx, tn, recip; // data vectors"},
{"lineNum":"  338","line":"    ITYPE  q;                              // integer vector, 64 bit"},
{"lineNum":"  339","line":"    BVTYPE doinvert, xzero, overflow;       // boolean vectors"},
{"lineNum":"  340","line":""},
{"lineNum":"  341","line":"    xa = abs(x);"},
{"lineNum":"  342","line":""},
{"lineNum":"  343","line":"    // Find quadrant"},
{"lineNum":"  344","line":"    y = round(xa * (double)(2. / VM_PI));   // quadrant, as float"},
{"lineNum":"  345","line":"    q = round_to_int64(y);                  // quadrant, as integer"},
{"lineNum":"  346","line":"    // Find quadrant"},
{"lineNum":"  347","line":"    //      0 -   pi/4 => 0"},
{"lineNum":"  348","line":"    //   pi/4 - 3*pi/4 => 1"},
{"lineNum":"  349","line":"    // 3*pi/4 - 5*pi/4 => 2"},
{"lineNum":"  350","line":"    // 5*pi/4 - 7*pi/4 => 3"},
{"lineNum":"  351","line":"    // 7*pi/4 - 8*pi/4 => 4"},
{"lineNum":"  352","line":""},
{"lineNum":"  353","line":"    // Reduce by extended precision modular arithmetic"},
{"lineNum":"  354","line":"    z = nmul_add(y, DP3, nmul_add(y, DP2, nmul_add(y, DP1, xa)));    //z = ((xa - y * DP1) - y * DP2) - y * DP3;"},
{"lineNum":"  355","line":""},
{"lineNum":"  356","line":"    // Pade expansion of tan, valid for -pi/4 <= x <= pi/4"},
{"lineNum":"  357","line":"    zz = z * z;"},
{"lineNum":"  358","line":"    px = polynomial_2(zz, P0tan, P1tan, P2tan);"},
{"lineNum":"  359","line":"    qx = polynomial_4n(zz, Q0tan, Q1tan, Q2tan, Q3tan);"},
{"lineNum":"  360","line":""},
{"lineNum":"  361","line":"    // qx cannot be 0 for x <= pi/4"},
{"lineNum":"  362","line":"    tn = mul_add(px / qx, z * zz, z);            // tn = z + z * zz * px / qx;"},
{"lineNum":"  363","line":""},
{"lineNum":"  364","line":"    // if (q&2) tn = -1/tn"},
{"lineNum":"  365","line":"    doinvert = BVTYPE((q & 1) != 0);"},
{"lineNum":"  366","line":"    xzero = (xa == 0.);"},
{"lineNum":"  367","line":"    // avoid division by 0. We will not be using recip anyway if xa == 0."},
{"lineNum":"  368","line":"    // tn never becomes exactly 0 when x = pi/2 so we only have to make"},
{"lineNum":"  369","line":"    // a special case for x == 0."},
{"lineNum":"  370","line":"    recip = (-1.) / select(xzero, VTYPE(-1.), tn);"},
{"lineNum":"  371","line":"    tn = select(doinvert, recip, tn);"},
{"lineNum":"  372","line":"    tn = sign_combine(tn, x);       // get original sign"},
{"lineNum":"  373","line":""},
{"lineNum":"  374","line":"    overflow = BVTYPE(q > 0x80000000000000) & is_finite(xa);"},
{"lineNum":"  375","line":"    tn = select(overflow, 0., tn);"},
{"lineNum":"  376","line":""},
{"lineNum":"  377","line":"    return tn;"},
{"lineNum":"  378","line":"}"},
{"lineNum":"  379","line":""},
{"lineNum":"  380","line":"// instantiations of tan_d template:"},
{"lineNum":"  381","line":""},
{"lineNum":"  382","line":"static inline Vec2d tan(Vec2d const & x) {"},
{"lineNum":"  383","line":"    return tan_d<Vec2d, Vec2q, Vec2db>(x);"},
{"lineNum":"  384","line":"}"},
{"lineNum":"  385","line":""},
{"lineNum":"  386","line":"#if MAX_VECTOR_SIZE >= 256"},
{"lineNum":"  387","line":"static inline Vec4d tan(Vec4d const & x) {"},
{"lineNum":"  388","line":"    return tan_d<Vec4d, Vec4q, Vec4db>(x);"},
{"lineNum":"  389","line":"}"},
{"lineNum":"  390","line":"#endif // MAX_VECTOR_SIZE >= 256"},
{"lineNum":"  391","line":""},
{"lineNum":"  392","line":"#if MAX_VECTOR_SIZE >= 512"},
{"lineNum":"  393","line":"static inline Vec8d tan(Vec8d const & x) {"},
{"lineNum":"  394","line":"    return tan_d<Vec8d, Vec8q, Vec8db>(x);"},
{"lineNum":"  395","line":"}"},
{"lineNum":"  396","line":"#endif // MAX_VECTOR_SIZE >= 512"},
{"lineNum":"  397","line":""},
{"lineNum":"  398","line":""},
{"lineNum":"  399","line":"// *************************************************************"},
{"lineNum":"  400","line":"//             tan template, single precision"},
{"lineNum":"  401","line":"// *************************************************************"},
{"lineNum":"  402","line":"// This is removed for the single precision version."},
{"lineNum":"  403","line":"// It is faster to use tan(x) = sin(x)/cos(x)"},
{"lineNum":"  404","line":""},
{"lineNum":"  405","line":""},
{"lineNum":"  406","line":""},
{"lineNum":"  407","line":"// *************************************************************"},
{"lineNum":"  408","line":"//             asin/acos template, double precision"},
{"lineNum":"  409","line":"// *************************************************************"},
{"lineNum":"  410","line":"// Template parameters:"},
{"lineNum":"  411","line":"// VTYPE:  f.p. vector type"},
{"lineNum":"  412","line":"// BVTYPE: boolean vector type"},
{"lineNum":"  413","line":"// AC: 0 = asin, 1 = acos"},
{"lineNum":"  414","line":"// Paramterers:"},
{"lineNum":"  415","line":"// x = input x"},
{"lineNum":"  416","line":"template<class VTYPE, class BVTYPE, int AC>"},
{"lineNum":"  417","line":"static inline VTYPE asin_d(VTYPE const & x) {"},
{"lineNum":"  418","line":""},
{"lineNum":"  419","line":"    // define constants"},
{"lineNum":"  420","line":"    const double R4asin = 2.967721961301243206100E-3;"},
{"lineNum":"  421","line":"    const double R3asin = -5.634242780008963776856E-1;"},
{"lineNum":"  422","line":"    const double R2asin = 6.968710824104713396794E0;"},
{"lineNum":"  423","line":"    const double R1asin = -2.556901049652824852289E1;"},
{"lineNum":"  424","line":"    const double R0asin = 2.853665548261061424989E1;"},
{"lineNum":"  425","line":""},
{"lineNum":"  426","line":"    const double S3asin = -2.194779531642920639778E1;"},
{"lineNum":"  427","line":"    const double S2asin = 1.470656354026814941758E2;"},
{"lineNum":"  428","line":"    const double S1asin = -3.838770957603691357202E2;"},
{"lineNum":"  429","line":"    const double S0asin = 3.424398657913078477438E2;"},
{"lineNum":"  430","line":""},
{"lineNum":"  431","line":"    const double P5asin = 4.253011369004428248960E-3;"},
{"lineNum":"  432","line":"    const double P4asin = -6.019598008014123785661E-1;"},
{"lineNum":"  433","line":"    const double P3asin = 5.444622390564711410273E0;"},
{"lineNum":"  434","line":"    const double P2asin = -1.626247967210700244449E1;"},
{"lineNum":"  435","line":"    const double P1asin = 1.956261983317594739197E1;"},
{"lineNum":"  436","line":"    const double P0asin = -8.198089802484824371615E0;"},
{"lineNum":"  437","line":""},
{"lineNum":"  438","line":"    const double Q4asin = -1.474091372988853791896E1;"},
{"lineNum":"  439","line":"    const double Q3asin = 7.049610280856842141659E1;"},
{"lineNum":"  440","line":"    const double Q2asin = -1.471791292232726029859E2;"},
{"lineNum":"  441","line":"    const double Q1asin = 1.395105614657485689735E2;"},
{"lineNum":"  442","line":"    const double Q0asin = -4.918853881490881290097E1;"},
{"lineNum":"  443","line":""},
{"lineNum":"  444","line":"    VTYPE  xa, xb, x1, x2, x3, x4, x5, px, qx, rx, sx, vx, wx, y1, yb, z, z1, z2;"},
{"lineNum":"  445","line":"    BVTYPE big;"},
{"lineNum":"  446","line":"    bool   dobig, dosmall;"},
{"lineNum":"  447","line":""},
{"lineNum":"  448","line":"    xa = abs(x);"},
{"lineNum":"  449","line":"    big = xa >= 0.625;"},
{"lineNum":"  450","line":""},
{"lineNum":"  451","line":"    /*"},
{"lineNum":"  452","line":"    Small: xa < 0.625"},
{"lineNum":"  453","line":"    ------------------"},
{"lineNum":"  454","line":"    x = xa * xa;"},
{"lineNum":"  455","line":"    px = PX(x);"},
{"lineNum":"  456","line":"    qx = QX(x);"},
{"lineNum":"  457","line":"    y1 = x*px/qx;"},
{"lineNum":"  458","line":"    y1 = xa * y1 + xa;"},
{"lineNum":"  459","line":""},
{"lineNum":"  460","line":"    Big: xa >= 0.625"},
{"lineNum":"  461","line":"    ------------------"},
{"lineNum":"  462","line":"    x = 1.0 - xa;"},
{"lineNum":"  463","line":"    rx = RX(x);"},
{"lineNum":"  464","line":"    sx = SX(x);"},
{"lineNum":"  465","line":"    y1 = x * rx/sx;"},
{"lineNum":"  466","line":"    x3 = sqrt(x+x);"},
{"lineNum":"  467","line":"    y3 = x3 * y1 - MOREBITS;"},
{"lineNum":"  468","line":"    z = pi/2 - x3 - y3"},
{"lineNum":"  469","line":"    */"},
{"lineNum":"  470","line":""},
{"lineNum":"  471","line":"    // select a common x for all polynomials"},
{"lineNum":"  472","line":"    // This allows sharing of powers of x through common subexpression elimination"},
{"lineNum":"  473","line":"    x1 = select(big, 1.0 - xa, xa * xa);"},
{"lineNum":"  474","line":""},
{"lineNum":"  475","line":"    // calculate powers of x1 outside branches to make sure they are only calculated once"},
{"lineNum":"  476","line":"    x2 = x1 * x1;"},
{"lineNum":"  477","line":"    x4 = x2 * x2;"},
{"lineNum":"  478","line":"    x5 = x4 * x1;"},
{"lineNum":"  479","line":"    x3 = x2 * x1;"},
{"lineNum":"  480","line":""},
{"lineNum":"  481","line":"    dosmall = !horizontal_and(big);   // at least one element is small"},
{"lineNum":"  482","line":"    dobig = horizontal_or(big);   // at least one element is big"},
{"lineNum":"  483","line":""},
{"lineNum":"  484","line":"    // calculate polynomials (reuse powers of x)"},
{"lineNum":"  485","line":"    if (dosmall) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  486","line":"        // px = polynomial_5 (x1, P0asin, P1asin, P2asin, P3asin, P4asin, P5asin);"},
{"lineNum":"  487","line":"        // qx = polynomial_5n(x1, Q0asin, Q1asin, Q2asin, Q3asin, Q4asin);"},
{"lineNum":"  488","line":"        px = mul_add(x3, P3asin, P0asin) + mul_add(x4, P4asin, x1*P1asin) + mul_add(x5, P5asin, x2*P2asin);"},
{"lineNum":"  489","line":"        qx = mul_add(x4, Q4asin, x5) + mul_add(x3, Q3asin, x1*Q1asin) + mul_add(x2, Q2asin, Q0asin);"},
{"lineNum":"  490","line":"    }"},
{"lineNum":"  491","line":"    if (dobig) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  492","line":"        // rx = polynomial_4 (x1, R0asin, R1asin, R2asin, R3asin, R4asin);"},
{"lineNum":"  493","line":"        // sx = polynomial_4n(x1, S0asin, S1asin, S2asin, S3asin);"},
{"lineNum":"  494","line":"        rx = mul_add(x3, R3asin, x2*R2asin) + mul_add(x4, R4asin, mul_add(x1, R1asin, R0asin));"},
{"lineNum":"  495","line":"        sx = mul_add(x3, S3asin, x4) + mul_add(x2, S2asin, mul_add(x1, S1asin, S0asin));"},
{"lineNum":"  496","line":"    }"},
{"lineNum":"  497","line":""},
{"lineNum":"  498","line":"    // select and divide outside branches to avoid dividing twice"},
{"lineNum":"  499","line":"    vx = select(big, rx, px);"},
{"lineNum":"  500","line":"    wx = select(big, sx, qx);"},
{"lineNum":"  501","line":"    y1 = vx / wx * x1;"},
{"lineNum":"  502","line":""},
{"lineNum":"  503","line":"    // results for big"},
{"lineNum":"  504","line":"    if (dobig) {                                 // avoid square root if all are small","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  505","line":"        xb = sqrt(x1 + x1);                        // this produces NAN if xa > 1 so we don\'t need a special case for xa > 1"},
{"lineNum":"  506","line":"        z1 = mul_add(xb, y1, xb);                // yb = xb * y1; z1 = xb + yb;"},
{"lineNum":"  507","line":"    }"},
{"lineNum":"  508","line":""},
{"lineNum":"  509","line":"    // results for small"},
{"lineNum":"  510","line":"    z2 = mul_add(xa, y1, xa);                    // z2 = xa * y1 + xa;"},
{"lineNum":"  511","line":""},
{"lineNum":"  512","line":"    // correct for sign"},
{"lineNum":"  513","line":"    if (AC) {  // acos"},
{"lineNum":"  514","line":"        z1 = select(x < 0., VM_PI - z1, z1);"},
{"lineNum":"  515","line":"        z2 = VM_PI_2 - sign_combine(z2, x);"},
{"lineNum":"  516","line":"        z = select(big, z1, z2);"},
{"lineNum":"  517","line":"    }"},
{"lineNum":"  518","line":"    else {     // asin"},
{"lineNum":"  519","line":"        z1 = VM_PI_2 - z1;"},
{"lineNum":"  520","line":"        z = select(big, z1, z2);"},
{"lineNum":"  521","line":"        z = sign_combine(z, x);"},
{"lineNum":"  522","line":"    }"},
{"lineNum":"  523","line":"    return z;"},
{"lineNum":"  524","line":"}"},
{"lineNum":"  525","line":""},
{"lineNum":"  526","line":"// instantiations of asin_d template:"},
{"lineNum":"  527","line":""},
{"lineNum":"  528","line":"static inline Vec2d asin(Vec2d const & x) {"},
{"lineNum":"  529","line":"    return asin_d<Vec2d, Vec2db, 0>(x);"},
{"lineNum":"  530","line":"}"},
{"lineNum":"  531","line":""},
{"lineNum":"  532","line":"static inline Vec2d acos(Vec2d const & x) {"},
{"lineNum":"  533","line":"    return asin_d<Vec2d, Vec2db, 1>(x);"},
{"lineNum":"  534","line":"}"},
{"lineNum":"  535","line":""},
{"lineNum":"  536","line":"#if MAX_VECTOR_SIZE >= 256"},
{"lineNum":"  537","line":"static inline Vec4d asin(Vec4d const & x) {"},
{"lineNum":"  538","line":"    return asin_d<Vec4d, Vec4db, 0>(x);"},
{"lineNum":"  539","line":"}"},
{"lineNum":"  540","line":""},
{"lineNum":"  541","line":"static inline Vec4d acos(Vec4d const & x) {"},
{"lineNum":"  542","line":"    return asin_d<Vec4d, Vec4db, 1>(x);"},
{"lineNum":"  543","line":"}"},
{"lineNum":"  544","line":"#endif // MAX_VECTOR_SIZE >= 256"},
{"lineNum":"  545","line":""},
{"lineNum":"  546","line":"#if MAX_VECTOR_SIZE >= 512"},
{"lineNum":"  547","line":"static inline Vec8d asin(Vec8d const & x) {"},
{"lineNum":"  548","line":"    return asin_d<Vec8d, Vec8db, 0>(x);"},
{"lineNum":"  549","line":"}"},
{"lineNum":"  550","line":""},
{"lineNum":"  551","line":"static inline Vec8d acos(Vec8d const & x) {"},
{"lineNum":"  552","line":"    return asin_d<Vec8d, Vec8db, 1>(x);"},
{"lineNum":"  553","line":"}"},
{"lineNum":"  554","line":"#endif // MAX_VECTOR_SIZE >= 512"},
{"lineNum":"  555","line":""},
{"lineNum":"  556","line":""},
{"lineNum":"  557","line":"// *************************************************************"},
{"lineNum":"  558","line":"//             asin/acos template, single precision"},
{"lineNum":"  559","line":"// *************************************************************"},
{"lineNum":"  560","line":"// Template parameters:"},
{"lineNum":"  561","line":"// VTYPE:  f.p. vector type"},
{"lineNum":"  562","line":"// BVTYPE: boolean vector type"},
{"lineNum":"  563","line":"// AC: 0 = asin, 1 = acos"},
{"lineNum":"  564","line":"// Paramterers:"},
{"lineNum":"  565","line":"// x = input x"},
{"lineNum":"  566","line":"template<class VTYPE, class BVTYPE, int AC>"},
{"lineNum":"  567","line":"static inline VTYPE asin_f(VTYPE const & x) {"},
{"lineNum":"  568","line":""},
{"lineNum":"  569","line":"    // define constants"},
{"lineNum":"  570","line":"    const float P4asinf = 4.2163199048E-2f;"},
{"lineNum":"  571","line":"    const float P3asinf = 2.4181311049E-2f;"},
{"lineNum":"  572","line":"    const float P2asinf = 4.5470025998E-2f;"},
{"lineNum":"  573","line":"    const float P1asinf = 7.4953002686E-2f;"},
{"lineNum":"  574","line":"    const float P0asinf = 1.6666752422E-1f;"},
{"lineNum":"  575","line":""},
{"lineNum":"  576","line":"    VTYPE  xa, x1, x2, x3, x4, xb, z, z1, z2;"},
{"lineNum":"  577","line":"    BVTYPE big;"},
{"lineNum":"  578","line":""},
{"lineNum":"  579","line":"    xa = abs(x);"},
{"lineNum":"  580","line":"    big = xa > 0.5f;"},
{"lineNum":"  581","line":""},
{"lineNum":"  582","line":"    x1 = 0.5f * (1.0f - xa);"},
{"lineNum":"  583","line":"    x2 = xa * xa;"},
{"lineNum":"  584","line":"    x3 = select(big, x1, x2);"},
{"lineNum":"  585","line":""},
{"lineNum":"  586","line":"    //if (horizontal_or(big))"},
{"lineNum":"  587","line":"    {"},
{"lineNum":"  588","line":"        xb = sqrt(x1);"},
{"lineNum":"  589","line":"    }"},
{"lineNum":"  590","line":"    x4 = select(big, xb, xa);"},
{"lineNum":"  591","line":""},
{"lineNum":"  592","line":"    z = polynomial_4(x3, P0asinf, P1asinf, P2asinf, P3asinf, P4asinf);"},
{"lineNum":"  593","line":"    z = mul_add(z, x3*x4, x4);                   // z = z * (x3*x4) + x4;"},
{"lineNum":"  594","line":"    z1 = z + z;"},
{"lineNum":"  595","line":""},
{"lineNum":"  596","line":"    // correct for sign"},
{"lineNum":"  597","line":"    if (AC) {  // acos"},
{"lineNum":"  598","line":"        z1 = select(x < 0., float(VM_PI) - z1, z1);"},
{"lineNum":"  599","line":"        z2 = float(VM_PI_2) - sign_combine(z, x);"},
{"lineNum":"  600","line":"        z = select(big, z1, z2);"},
{"lineNum":"  601","line":"    }"},
{"lineNum":"  602","line":"    else {     // asin"},
{"lineNum":"  603","line":"        z1 = float(VM_PI_2) - z1;"},
{"lineNum":"  604","line":"        z = select(big, z1, z);"},
{"lineNum":"  605","line":"        z = sign_combine(z, x);"},
{"lineNum":"  606","line":"    }"},
{"lineNum":"  607","line":""},
{"lineNum":"  608","line":"    return z;"},
{"lineNum":"  609","line":"}"},
{"lineNum":"  610","line":""},
{"lineNum":"  611","line":"// instantiations of asin_f template:"},
{"lineNum":"  612","line":""},
{"lineNum":"  613","line":"static inline Vec4f asin(Vec4f const & x) {"},
{"lineNum":"  614","line":"    return asin_f<Vec4f, Vec4fb, 0>(x);"},
{"lineNum":"  615","line":"}"},
{"lineNum":"  616","line":""},
{"lineNum":"  617","line":"static inline Vec4f acos(Vec4f const & x) {"},
{"lineNum":"  618","line":"    return asin_f<Vec4f, Vec4fb, 1>(x);"},
{"lineNum":"  619","line":"}"},
{"lineNum":"  620","line":""},
{"lineNum":"  621","line":"#if MAX_VECTOR_SIZE >= 256"},
{"lineNum":"  622","line":"static inline Vec8f asin(Vec8f const & x) {"},
{"lineNum":"  623","line":"    return asin_f<Vec8f, Vec8fb, 0>(x);"},
{"lineNum":"  624","line":"}"},
{"lineNum":"  625","line":"static inline Vec8f acos(Vec8f const & x) {"},
{"lineNum":"  626","line":"    return asin_f<Vec8f, Vec8fb, 1>(x);"},
{"lineNum":"  627","line":"}"},
{"lineNum":"  628","line":"#endif // MAX_VECTOR_SIZE >= 256"},
{"lineNum":"  629","line":""},
{"lineNum":"  630","line":"#if MAX_VECTOR_SIZE >= 512"},
{"lineNum":"  631","line":"static inline Vec16f asin(Vec16f const & x) {"},
{"lineNum":"  632","line":"    return asin_f<Vec16f, Vec16fb, 0>(x);"},
{"lineNum":"  633","line":"}"},
{"lineNum":"  634","line":"static inline Vec16f acos(Vec16f const & x) {"},
{"lineNum":"  635","line":"    return asin_f<Vec16f, Vec16fb, 1>(x);"},
{"lineNum":"  636","line":"}"},
{"lineNum":"  637","line":"#endif // MAX_VECTOR_SIZE >= 512"},
{"lineNum":"  638","line":""},
{"lineNum":"  639","line":""},
{"lineNum":"  640","line":"// *************************************************************"},
{"lineNum":"  641","line":"//             atan template, double precision"},
{"lineNum":"  642","line":"// *************************************************************"},
{"lineNum":"  643","line":"// Template parameters:"},
{"lineNum":"  644","line":"// VTYPE:  f.p. vector type"},
{"lineNum":"  645","line":"// BVTYPE: boolean vector type"},
{"lineNum":"  646","line":"// T2:     0 = atan, 1 = atan2"},
{"lineNum":"  647","line":"// Paramterers:"},
{"lineNum":"  648","line":"// y, x. calculate tan(y/x)"},
{"lineNum":"  649","line":"// result is between -pi/2 and +pi/2 when x > 0"},
{"lineNum":"  650","line":"// result is between -pi and -pi/2 or between pi/2 and pi when x < 0 for atan2"},
{"lineNum":"  651","line":"// atan2(0,0) gives NAN. Future versions may give 0"},
{"lineNum":"  652","line":"template<class VTYPE, class BVTYPE, int T2>"},
{"lineNum":"  653","line":"static inline VTYPE atan_d(VTYPE const & y, VTYPE const & x) {"},
{"lineNum":"  654","line":""},
{"lineNum":"  655","line":"    // define constants"},
{"lineNum":"  656","line":"    //const double ONEOPIO4 = 4./VM_PI;"},
{"lineNum":"  657","line":"    const double MOREBITS = 6.123233995736765886130E-17;"},
{"lineNum":"  658","line":"    const double MOREBITSO2 = MOREBITS * 0.5;"},
{"lineNum":"  659","line":"    const double T3PO8 = VM_SQRT2 + 1.; // 2.41421356237309504880;"},
{"lineNum":"  660","line":""},
{"lineNum":"  661","line":"    const double P4atan = -8.750608600031904122785E-1;"},
{"lineNum":"  662","line":"    const double P3atan = -1.615753718733365076637E1;"},
{"lineNum":"  663","line":"    const double P2atan = -7.500855792314704667340E1;"},
{"lineNum":"  664","line":"    const double P1atan = -1.228866684490136173410E2;"},
{"lineNum":"  665","line":"    const double P0atan = -6.485021904942025371773E1;"},
{"lineNum":"  666","line":""},
{"lineNum":"  667","line":"    const double Q4atan = 2.485846490142306297962E1;"},
{"lineNum":"  668","line":"    const double Q3atan = 1.650270098316988542046E2;"},
{"lineNum":"  669","line":"    const double Q2atan = 4.328810604912902668951E2;"},
{"lineNum":"  670","line":"    const double Q1atan = 4.853903996359136964868E2;"},
{"lineNum":"  671","line":"    const double Q0atan = 1.945506571482613964425E2;"},
{"lineNum":"  672","line":""},
{"lineNum":"  673","line":"    VTYPE  t, x1, x2, y1, y2, s, fac, a, b, z, zz, px, qx, re;  // data vectors"},
{"lineNum":"  674","line":"    BVTYPE swapxy, notbig, notsmal;                             // boolean vectors"},
{"lineNum":"  675","line":""},
{"lineNum":"  676","line":"    if (T2) {  // atan2(y,x)"},
{"lineNum":"  677","line":"        // move in first octant"},
{"lineNum":"  678","line":"        x1 = abs(x);"},
{"lineNum":"  679","line":"        y1 = abs(y);"},
{"lineNum":"  680","line":"        swapxy = (y1 > x1);"},
{"lineNum":"  681","line":"        // swap x and y if y1 > x1"},
{"lineNum":"  682","line":"        x2 = select(swapxy, y1, x1);"},
{"lineNum":"  683","line":"        y2 = select(swapxy, x1, y1);"},
{"lineNum":"  684","line":""},
{"lineNum":"  685","line":"        // check for special case: x and y are both +/- INF"},
{"lineNum":"  686","line":"        BVTYPE both_infinite = is_inf(x) & is_inf(y);   // x and Y are both infinite"},
{"lineNum":"  687","line":"        if (horizontal_or(both_infinite)) {             // at least one element has both infinite"},
{"lineNum":"  688","line":"            VTYPE mone = VTYPE(-1.0);"},
{"lineNum":"  689","line":"            // to do in version 2: conditional &. Branch not needed"},
{"lineNum":"  690","line":"            x2 = select(both_infinite, x2 & mone, x2);  // get 1.0 with the sign of x"},
{"lineNum":"  691","line":"            y2 = select(both_infinite, y2 & mone, y2);  // get 1.0 with the sign of y"},
{"lineNum":"  692","line":"        }"},
{"lineNum":"  693","line":""},
{"lineNum":"  694","line":"        t = y2 / x2;                  // x = y = 0 gives NAN here"},
{"lineNum":"  695","line":"    }"},
{"lineNum":"  696","line":"    else {    // atan(y)"},
{"lineNum":"  697","line":"        t = abs(y);"},
{"lineNum":"  698","line":"    }"},
{"lineNum":"  699","line":""},
{"lineNum":"  700","line":"    // small:  t < 0.66"},
{"lineNum":"  701","line":"    // medium: 0.66 <= t <= 2.4142 (1+sqrt(2))"},
{"lineNum":"  702","line":"    // big:    t > 2.4142"},
{"lineNum":"  703","line":"    notbig = t <= T3PO8;  // t <= 2.4142"},
{"lineNum":"  704","line":"    notsmal = t >= 0.66;   // t >= 0.66"},
{"lineNum":"  705","line":""},
{"lineNum":"  706","line":"    s = select(notbig, VTYPE(VM_PI_4), VTYPE(VM_PI_2));"},
{"lineNum":"  707","line":"    s = notsmal & s;                   // select(notsmal, s, 0.);"},
{"lineNum":"  708","line":"    fac = select(notbig, VTYPE(MOREBITSO2), VTYPE(MOREBITS));"},
{"lineNum":"  709","line":"    fac = notsmal & fac;  //select(notsmal, fac, 0.);"},
{"lineNum":"  710","line":""},
{"lineNum":"  711","line":"    // small:  z = t / 1.0;"},
{"lineNum":"  712","line":"    // medium: z = (t-1.0) / (t+1.0);"},
{"lineNum":"  713","line":"    // big:    z = -1.0 / t;"},
{"lineNum":"  714","line":"    a = notbig & t;   // select(notbig, t, 0.);"},
{"lineNum":"  715","line":"    a = if_add(notsmal, a, -1.);"},
{"lineNum":"  716","line":"    b = notbig & VTYPE(1.); //  select(notbig, 1., 0.);"},
{"lineNum":"  717","line":"    b = if_add(notsmal, b, t);"},
{"lineNum":"  718","line":"    z = a / b;      // division by 0 will not occur unless x and y are both 0"},
{"lineNum":"  719","line":""},
{"lineNum":"  720","line":"    zz = z * z;"},
{"lineNum":"  721","line":""},
{"lineNum":"  722","line":"    px = polynomial_4(zz, P0atan, P1atan, P2atan, P3atan, P4atan);"},
{"lineNum":"  723","line":"    qx = polynomial_5n(zz, Q0atan, Q1atan, Q2atan, Q3atan, Q4atan);"},
{"lineNum":"  724","line":""},
{"lineNum":"  725","line":"    re = mul_add(px / qx, z * zz, z);            // re = (px / qx) * (z * zz) + z;"},
{"lineNum":"  726","line":"    re += s + fac;"},
{"lineNum":"  727","line":""},
{"lineNum":"  728","line":"    if (T2) {  // atan2(y,x)"},
{"lineNum":"  729","line":"        // move back in place"},
{"lineNum":"  730","line":"        re = select(swapxy, VM_PI_2 - re, re);"},
{"lineNum":"  731","line":"        re = select((x | y) == 0., 0., re);      // atan2(0,0) = 0 by convention"},
{"lineNum":"  732","line":"        re = select(sign_bit(x), VM_PI - re, re);  // also for x = -0."},
{"lineNum":"  733","line":"    }"},
{"lineNum":"  734","line":"    // get sign bit"},
{"lineNum":"  735","line":"    re = sign_combine(re, y);"},
{"lineNum":"  736","line":""},
{"lineNum":"  737","line":"    return re;"},
{"lineNum":"  738","line":"}"},
{"lineNum":"  739","line":""},
{"lineNum":"  740","line":"// instantiations of atan_d template:"},
{"lineNum":"  741","line":""},
{"lineNum":"  742","line":"static inline Vec2d atan2(Vec2d const & y, Vec2d const & x) {"},
{"lineNum":"  743","line":"    return atan_d<Vec2d, Vec2db, 1>(y, x);"},
{"lineNum":"  744","line":"}"},
{"lineNum":"  745","line":""},
{"lineNum":"  746","line":"static inline Vec2d atan(Vec2d const & y) {"},
{"lineNum":"  747","line":"    return atan_d<Vec2d, Vec2db, 0>(y, 0.);"},
{"lineNum":"  748","line":"}"},
{"lineNum":"  749","line":""},
{"lineNum":"  750","line":"#if MAX_VECTOR_SIZE >= 256"},
{"lineNum":"  751","line":"static inline Vec4d atan2(Vec4d const & y, Vec4d const & x) {"},
{"lineNum":"  752","line":"    return atan_d<Vec4d, Vec4db, 1>(y, x);"},
{"lineNum":"  753","line":"}"},
{"lineNum":"  754","line":""},
{"lineNum":"  755","line":"static inline Vec4d atan(Vec4d const & y) {"},
{"lineNum":"  756","line":"    return atan_d<Vec4d, Vec4db, 0>(y, 0.);"},
{"lineNum":"  757","line":"}"},
{"lineNum":"  758","line":"#endif // MAX_VECTOR_SIZE >= 256"},
{"lineNum":"  759","line":""},
{"lineNum":"  760","line":"#if MAX_VECTOR_SIZE >= 512"},
{"lineNum":"  761","line":"static inline Vec8d atan2(Vec8d const & y, Vec8d const & x) {"},
{"lineNum":"  762","line":"    return atan_d<Vec8d, Vec8db, 1>(y, x);"},
{"lineNum":"  763","line":"}"},
{"lineNum":"  764","line":""},
{"lineNum":"  765","line":"static inline Vec8d atan(Vec8d const & y) {"},
{"lineNum":"  766","line":"    return atan_d<Vec8d, Vec8db, 0>(y, 0.);"},
{"lineNum":"  767","line":"}"},
{"lineNum":"  768","line":"#endif // MAX_VECTOR_SIZE >= 512"},
{"lineNum":"  769","line":""},
{"lineNum":"  770","line":""},
{"lineNum":"  771","line":""},
{"lineNum":"  772","line":"// *************************************************************"},
{"lineNum":"  773","line":"//             atan template, single precision"},
{"lineNum":"  774","line":"// *************************************************************"},
{"lineNum":"  775","line":"// Template parameters:"},
{"lineNum":"  776","line":"// VTYPE:  f.p. vector type"},
{"lineNum":"  777","line":"// BVTYPE: boolean vector type"},
{"lineNum":"  778","line":"// T2:     0 = atan, 1 = atan2"},
{"lineNum":"  779","line":"// Paramterers:"},
{"lineNum":"  780","line":"// y, x. calculate tan(y/x)"},
{"lineNum":"  781","line":"// result is between -pi/2 and +pi/2 when x > 0"},
{"lineNum":"  782","line":"// result is between -pi and -pi/2 or between pi/2 and pi when x < 0 for atan2"},
{"lineNum":"  783","line":"// atan2(0,0) gives NAN. Future versions may give 0"},
{"lineNum":"  784","line":"template<class VTYPE, class BVTYPE, int T2>"},
{"lineNum":"  785","line":"static inline VTYPE atan_f(VTYPE const & y, VTYPE const & x) {"},
{"lineNum":"  786","line":""},
{"lineNum":"  787","line":"    // define constants"},
{"lineNum":"  788","line":"    const float P3atanf = 8.05374449538E-2f;"},
{"lineNum":"  789","line":"    const float P2atanf = -1.38776856032E-1f;"},
{"lineNum":"  790","line":"    const float P1atanf = 1.99777106478E-1f;"},
{"lineNum":"  791","line":"    const float P0atanf = -3.33329491539E-1f;"},
{"lineNum":"  792","line":""},
{"lineNum":"  793","line":"    VTYPE  t, x1, x2, y1, y2, s, a, b, z, zz, re;  // data vectors"},
{"lineNum":"  794","line":"    BVTYPE swapxy, notbig, notsmal;                // boolean vectors"},
{"lineNum":"  795","line":""},
{"lineNum":"  796","line":"    if (T2) {  // atan2(y,x)"},
{"lineNum":"  797","line":"        // move in first octant"},
{"lineNum":"  798","line":"        x1 = abs(x);"},
{"lineNum":"  799","line":"        y1 = abs(y);"},
{"lineNum":"  800","line":"        swapxy = (y1 > x1);"},
{"lineNum":"  801","line":"        // swap x and y if y1 > x1"},
{"lineNum":"  802","line":"        x2 = select(swapxy, y1, x1);"},
{"lineNum":"  803","line":"        y2 = select(swapxy, x1, y1);"},
{"lineNum":"  804","line":""},
{"lineNum":"  805","line":"        // check for special case: x and y are both +/- INF"},
{"lineNum":"  806","line":"        BVTYPE both_infinite = is_inf(x) & is_inf(y);   // x and Y are both infinite"},
{"lineNum":"  807","line":"        if (horizontal_or(both_infinite)) {             // at least one element has both infinite"},
{"lineNum":"  808","line":"            VTYPE mone = VTYPE(-1.0f);"},
{"lineNum":"  809","line":"            // to do: conditional &"},
{"lineNum":"  810","line":"            x2 = select(both_infinite, x2 & mone, x2);  // get 1.0 with the sign of x"},
{"lineNum":"  811","line":"            y2 = select(both_infinite, y2 & mone, y2);  // get 1.0 with the sign of y"},
{"lineNum":"  812","line":"        }"},
{"lineNum":"  813","line":""},
{"lineNum":"  814","line":"        // x = y = 0 will produce NAN. No problem, fixed below"},
{"lineNum":"  815","line":"        t = y2 / x2;"},
{"lineNum":"  816","line":"    }"},
{"lineNum":"  817","line":"    else {    // atan(y)"},
{"lineNum":"  818","line":"        t = abs(y);"},
{"lineNum":"  819","line":"    }"},
{"lineNum":"  820","line":""},
{"lineNum":"  821","line":"    // small:  t < 0.4142"},
{"lineNum":"  822","line":"    // medium: 0.4142 <= t <= 2.4142"},
{"lineNum":"  823","line":"    // big:    t > 2.4142  (not for atan2)"},
{"lineNum":"  824","line":"    if (!T2) {  // atan(y)"},
{"lineNum":"  825","line":"        notsmal = t >= float(VM_SQRT2 - 1.);       // t >= tan  pi/8"},
{"lineNum":"  826","line":"        notbig = t <= float(VM_SQRT2 + 1.);       // t <= tan 3pi/8"},
{"lineNum":"  827","line":""},
{"lineNum":"  828","line":"        s = select(notbig, VTYPE(float(VM_PI_4)), VTYPE(float(VM_PI_2)));"},
{"lineNum":"  829","line":"        s = notsmal & s;      // select(notsmal, s, 0.);"},
{"lineNum":"  830","line":""},
{"lineNum":"  831","line":"        // small:  z = t / 1.0;"},
{"lineNum":"  832","line":"        // medium: z = (t-1.0) / (t+1.0);"},
{"lineNum":"  833","line":"        // big:    z = -1.0 / t;"},
{"lineNum":"  834","line":"        a = notbig & t; // select(notbig, t, 0.);"},
{"lineNum":"  835","line":"        a = if_add(notsmal, a, -1.f);"},
{"lineNum":"  836","line":"        b = notbig & VTYPE(1.f); //  select(notbig, 1., 0.);"},
{"lineNum":"  837","line":"        b = if_add(notsmal, b, t);"},
{"lineNum":"  838","line":"        z = a / b;      // division by 0 will not occur unless x and y are both 0"},
{"lineNum":"  839","line":"    }"},
{"lineNum":"  840","line":"    else {  // atan2(y,x)"},
{"lineNum":"  841","line":"        // small:  z = t / 1.0;"},
{"lineNum":"  842","line":"        // medium: z = (t-1.0) / (t+1.0);"},
{"lineNum":"  843","line":"        notsmal = t >= float(VM_SQRT2 - 1.);"},
{"lineNum":"  844","line":"        a = if_add(notsmal, t, -1.f);"},
{"lineNum":"  845","line":"        b = if_add(notsmal, 1.f, t);"},
{"lineNum":"  846","line":"        s = notsmal & VTYPE(float(VM_PI_4));"},
{"lineNum":"  847","line":"        z = a / b;"},
{"lineNum":"  848","line":"    }"},
{"lineNum":"  849","line":""},
{"lineNum":"  850","line":"    zz = z * z;"},
{"lineNum":"  851","line":""},
{"lineNum":"  852","line":"    // Taylor expansion"},
{"lineNum":"  853","line":"    re = polynomial_3(zz, P0atanf, P1atanf, P2atanf, P3atanf);"},
{"lineNum":"  854","line":"    re = mul_add(re, zz * z, z) + s;"},
{"lineNum":"  855","line":""},
{"lineNum":"  856","line":"    if (T2) {  // atan2(y,x)"},
{"lineNum":"  857","line":"        // move back in place"},
{"lineNum":"  858","line":"        re = select(swapxy, float(VM_PI_2) - re, re);"},
{"lineNum":"  859","line":"        re = select((x | y) == 0.f, 0.f, re);    // atan2(0,+0) = 0 by convention"},
{"lineNum":"  860","line":"        re = select(sign_bit(x), float(VM_PI) - re, re);  // also for x = -0."},
{"lineNum":"  861","line":"    }"},
{"lineNum":"  862","line":"    // get sign bit"},
{"lineNum":"  863","line":"    re = sign_combine(re, y);"},
{"lineNum":"  864","line":""},
{"lineNum":"  865","line":"    return re;"},
{"lineNum":"  866","line":"}"},
{"lineNum":"  867","line":""},
{"lineNum":"  868","line":"// instantiations of atan_f template:"},
{"lineNum":"  869","line":""},
{"lineNum":"  870","line":"static inline Vec4f atan2(Vec4f const & y, Vec4f const & x) {"},
{"lineNum":"  871","line":"    return atan_f<Vec4f, Vec4fb, 1>(y, x);"},
{"lineNum":"  872","line":"}"},
{"lineNum":"  873","line":""},
{"lineNum":"  874","line":"static inline Vec4f atan(Vec4f const & y) {"},
{"lineNum":"  875","line":"    return atan_f<Vec4f, Vec4fb, 0>(y, 0.);"},
{"lineNum":"  876","line":"}"},
{"lineNum":"  877","line":""},
{"lineNum":"  878","line":"#if MAX_VECTOR_SIZE >= 256"},
{"lineNum":"  879","line":"static inline Vec8f atan2(Vec8f const & y, Vec8f const & x) {"},
{"lineNum":"  880","line":"    return atan_f<Vec8f, Vec8fb, 1>(y, x);"},
{"lineNum":"  881","line":"}"},
{"lineNum":"  882","line":""},
{"lineNum":"  883","line":"static inline Vec8f atan(Vec8f const & y) {"},
{"lineNum":"  884","line":"    return atan_f<Vec8f, Vec8fb, 0>(y, 0.);"},
{"lineNum":"  885","line":"}"},
{"lineNum":"  886","line":""},
{"lineNum":"  887","line":"#endif // MAX_VECTOR_SIZE >= 256"},
{"lineNum":"  888","line":""},
{"lineNum":"  889","line":"#if MAX_VECTOR_SIZE >= 512"},
{"lineNum":"  890","line":"static inline Vec16f atan2(Vec16f const & y, Vec16f const & x) {"},
{"lineNum":"  891","line":"    return atan_f<Vec16f, Vec16fb, 1>(y, x);"},
{"lineNum":"  892","line":"}"},
{"lineNum":"  893","line":""},
{"lineNum":"  894","line":"static inline Vec16f atan(Vec16f const & y) {"},
{"lineNum":"  895","line":"    return atan_f<Vec16f, Vec16fb, 0>(y, 0.);"},
{"lineNum":"  896","line":"}"},
{"lineNum":"  897","line":""},
{"lineNum":"  898","line":"#endif // MAX_VECTOR_SIZE >= 512"},
{"lineNum":"  899","line":""},
{"lineNum":"  900","line":"#ifdef VCL_NAMESPACE"},
{"lineNum":"  901","line":"}"},
{"lineNum":"  902","line":"#endif"},
{"lineNum":"  903","line":""},
{"lineNum":"  904","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 3, "covered" : 0,};
var merged_data = [];
