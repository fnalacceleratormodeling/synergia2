var data = {lines:[
{"lineNum":"    1","line":"#ifndef STEPPER_H_"},
{"lineNum":"    2","line":"#define STEPPER_H_"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#include <cereal/types/polymorphic.hpp>"},
{"lineNum":"    5","line":"#include <cereal/access.hpp>"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"#include \"synergia/simulation/step.h\""},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"class Stepper"},
{"lineNum":"   10","line":"{"},
{"lineNum":"   11","line":"public:"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"    static const double fixed_step_tolerance;"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"public:"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"    virtual ~Stepper() = default;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   18","line":"    virtual std::unique_ptr<Stepper> clone() const = 0;"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"    std::vector<Step>"},
{"lineNum":"   21","line":"    apply(Lattice const & lattice) const"},
{"lineNum":"   22","line":"    {"},
{"lineNum":"   23","line":"        auto steps = apply_impl(lattice);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   24","line":"        create_operations(lattice, steps);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   25","line":"        return steps;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   26","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"private:"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"    void create_operations("},
{"lineNum":"   31","line":"            Lattice const & lattice,"},
{"lineNum":"   32","line":"            std::vector<Step> & steps) const"},
{"lineNum":"   33","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   34","line":"        for(auto & step : steps)","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   35","line":"            step.create_operations(lattice);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   36","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"    virtual std::vector<Step>"},
{"lineNum":"   39","line":"    apply_impl(Lattice const & lattice) const = 0;"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"    friend class cereal::access;"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"    template<class Archive>"},
{"lineNum":"   44","line":"    void serialize(Archive & ar) { }"},
{"lineNum":"   45","line":"};"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"// include the archive types before registering the derived class"},
{"lineNum":"   49","line":"#include <cereal/archives/json.hpp>"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"#endif /* STEPPER_H_ */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 9, "covered" : 0,};
var merged_data = [];
