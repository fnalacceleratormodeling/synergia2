var data = {lines:[
{"lineNum":"    1","line":"//-----------------------------------------------------------------------------"},
{"lineNum":"    2","line":"// boost aligned_storage.hpp header file"},
{"lineNum":"    3","line":"// See http://www.boost.org for updates, documentation, and revision history."},
{"lineNum":"    4","line":"//-----------------------------------------------------------------------------"},
{"lineNum":"    5","line":"//"},
{"lineNum":"    6","line":"// Copyright (c) 2002-2003"},
{"lineNum":"    7","line":"// Eric Friedman, Itay Maman"},
{"lineNum":"    8","line":"//"},
{"lineNum":"    9","line":"// Distributed under the Boost Software License, Version 1.0. (See"},
{"lineNum":"   10","line":"// accompanying file LICENSE_1_0.txt or copy at"},
{"lineNum":"   11","line":"// http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"#ifndef BOOST_TT_ALIGNED_STORAGE_HPP"},
{"lineNum":"   14","line":"#define BOOST_TT_ALIGNED_STORAGE_HPP"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"#include <cstddef> // for std::size_t"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"#include <boost/config.hpp>"},
{"lineNum":"   19","line":"#include <boost/detail/workaround.hpp>"},
{"lineNum":"   20","line":"#include <boost/type_traits/alignment_of.hpp>"},
{"lineNum":"   21","line":"#include <boost/type_traits/type_with_alignment.hpp>"},
{"lineNum":"   22","line":"#include <boost/type_traits/is_pod.hpp>"},
{"lineNum":"   23","line":"#include <boost/type_traits/conditional.hpp>"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"namespace boost {"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"namespace detail { namespace aligned_storage {"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"BOOST_STATIC_CONSTANT("},
{"lineNum":"   30","line":"      std::size_t"},
{"lineNum":"   31","line":"    , alignment_of_max_align = ::boost::alignment_of<boost::detail::max_align>::value"},
{"lineNum":"   32","line":"    );"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"//"},
{"lineNum":"   35","line":"// To be TR1 conforming this must be a POD type:"},
{"lineNum":"   36","line":"//"},
{"lineNum":"   37","line":"template <"},
{"lineNum":"   38","line":"      std::size_t size_"},
{"lineNum":"   39","line":"    , std::size_t alignment_"},
{"lineNum":"   40","line":">"},
{"lineNum":"   41","line":"struct aligned_storage_imp"},
{"lineNum":"   42","line":"{"},
{"lineNum":"   43","line":"    union data_t"},
{"lineNum":"   44","line":"    {"},
{"lineNum":"   45","line":"        char buf[size_];"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"        typename ::boost::type_with_alignment<alignment_>::type align_;"},
{"lineNum":"   48","line":"    } data_;"},
{"lineNum":"   49","line":"    void* address() const { return const_cast<aligned_storage_imp*>(this); }","class":"lineNoCov","hits":"0","possible_hits":"235",},
{"lineNum":"   50","line":"};"},
{"lineNum":"   51","line":"template <std::size_t size>"},
{"lineNum":"   52","line":"struct aligned_storage_imp<size, std::size_t(-1)>"},
{"lineNum":"   53","line":"{"},
{"lineNum":"   54","line":"   union data_t"},
{"lineNum":"   55","line":"   {"},
{"lineNum":"   56","line":"      char buf[size];"},
{"lineNum":"   57","line":"      ::boost::detail::max_align align_;"},
{"lineNum":"   58","line":"   } data_;"},
{"lineNum":"   59","line":"   void* address() const { return const_cast<aligned_storage_imp*>(this); }"},
{"lineNum":"   60","line":"};"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"template< std::size_t alignment_ >"},
{"lineNum":"   63","line":"struct aligned_storage_imp<0u,alignment_>"},
{"lineNum":"   64","line":"{"},
{"lineNum":"   65","line":"    /* intentionally empty */"},
{"lineNum":"   66","line":"    void* address() const { return 0; }"},
{"lineNum":"   67","line":"};"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"}} // namespace detail::aligned_storage"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"template <"},
{"lineNum":"   72","line":"      std::size_t size_"},
{"lineNum":"   73","line":"    , std::size_t alignment_ = std::size_t(-1)"},
{"lineNum":"   74","line":">"},
{"lineNum":"   75","line":"class aligned_storage :"},
{"lineNum":"   76","line":"#ifndef __BORLANDC__"},
{"lineNum":"   77","line":"   private"},
{"lineNum":"   78","line":"#else"},
{"lineNum":"   79","line":"   public"},
{"lineNum":"   80","line":"#endif"},
{"lineNum":"   81","line":"   ::boost::detail::aligned_storage::aligned_storage_imp<size_, alignment_>"},
{"lineNum":"   82","line":"{"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"public: // constants"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"    typedef ::boost::detail::aligned_storage::aligned_storage_imp<size_, alignment_> type;"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"    BOOST_STATIC_CONSTANT("},
{"lineNum":"   89","line":"          std::size_t"},
{"lineNum":"   90","line":"        , size = size_"},
{"lineNum":"   91","line":"        );"},
{"lineNum":"   92","line":"    BOOST_STATIC_CONSTANT("},
{"lineNum":"   93","line":"          std::size_t"},
{"lineNum":"   94","line":"        , alignment = ("},
{"lineNum":"   95","line":"              alignment_ == std::size_t(-1)"},
{"lineNum":"   96","line":"            ? ::boost::detail::aligned_storage::alignment_of_max_align"},
{"lineNum":"   97","line":"            : alignment_"},
{"lineNum":"   98","line":"            )"},
{"lineNum":"   99","line":"        );"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"private: // noncopyable"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"    aligned_storage(const aligned_storage&);"},
{"lineNum":"  104","line":"    aligned_storage& operator=(const aligned_storage&);"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"public: // structors"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"    aligned_storage()"},
{"lineNum":"  109","line":"    {"},
{"lineNum":"  110","line":"    }"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"    ~aligned_storage()"},
{"lineNum":"  113","line":"    {"},
{"lineNum":"  114","line":"    }"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"public: // accessors"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"    void* address()"},
{"lineNum":"  119","line":"    {"},
{"lineNum":"  120","line":"        return static_cast<type*>(this)->address();"},
{"lineNum":"  121","line":"    }"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"    const void* address() const"},
{"lineNum":"  124","line":"    {"},
{"lineNum":"  125","line":"        return static_cast<const type*>(this)->address();"},
{"lineNum":"  126","line":"    }"},
{"lineNum":"  127","line":"};"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"//"},
{"lineNum":"  130","line":"// Make sure that is_pod recognises aligned_storage<>::type"},
{"lineNum":"  131","line":"// as a POD (Note that aligned_storage<> itself is not a POD):"},
{"lineNum":"  132","line":"//"},
{"lineNum":"  133","line":"template <std::size_t size_, std::size_t alignment_>"},
{"lineNum":"  134","line":"struct is_pod< ::boost::detail::aligned_storage::aligned_storage_imp<size_, alignment_> > : public true_type{};"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"} // namespace boost"},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"#endif // BOOST_ALIGNED_STORAGE_HPP"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 1, "covered" : 0,};
var merged_data = [];
