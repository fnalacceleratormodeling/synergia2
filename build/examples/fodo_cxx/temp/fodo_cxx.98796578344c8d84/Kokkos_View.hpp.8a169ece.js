var data = {lines:[
{"lineNum":"    1","line":"/*"},
{"lineNum":"    2","line":"//@HEADER"},
{"lineNum":"    3","line":"// ************************************************************************"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"//                        Kokkos v. 3.0"},
{"lineNum":"    6","line":"//       Copyright (2020) National Technology & Engineering"},
{"lineNum":"    7","line":"//               Solutions of Sandia, LLC (NTESS)."},
{"lineNum":"    8","line":"//"},
{"lineNum":"    9","line":"// Under the terms of Contract DE-NA0003525 with NTESS,"},
{"lineNum":"   10","line":"// the U.S. Government retains certain rights in this software."},
{"lineNum":"   11","line":"//"},
{"lineNum":"   12","line":"// Redistribution and use in source and binary forms, with or without"},
{"lineNum":"   13","line":"// modification, are permitted provided that the following conditions are"},
{"lineNum":"   14","line":"// met:"},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"// 1. Redistributions of source code must retain the above copyright"},
{"lineNum":"   17","line":"// notice, this list of conditions and the following disclaimer."},
{"lineNum":"   18","line":"//"},
{"lineNum":"   19","line":"// 2. Redistributions in binary form must reproduce the above copyright"},
{"lineNum":"   20","line":"// notice, this list of conditions and the following disclaimer in the"},
{"lineNum":"   21","line":"// documentation and/or other materials provided with the distribution."},
{"lineNum":"   22","line":"//"},
{"lineNum":"   23","line":"// 3. Neither the name of the Corporation nor the names of the"},
{"lineNum":"   24","line":"// contributors may be used to endorse or promote products derived from"},
{"lineNum":"   25","line":"// this software without specific prior written permission."},
{"lineNum":"   26","line":"//"},
{"lineNum":"   27","line":"// THIS SOFTWARE IS PROVIDED BY NTESS \"AS IS\" AND ANY"},
{"lineNum":"   28","line":"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"},
{"lineNum":"   29","line":"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR"},
{"lineNum":"   30","line":"// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NTESS OR THE"},
{"lineNum":"   31","line":"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,"},
{"lineNum":"   32","line":"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,"},
{"lineNum":"   33","line":"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR"},
{"lineNum":"   34","line":"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF"},
{"lineNum":"   35","line":"// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING"},
{"lineNum":"   36","line":"// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"},
{"lineNum":"   37","line":"// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   38","line":"//"},
{"lineNum":"   39","line":"// Questions? Contact Christian R. Trott (crtrott@sandia.gov)"},
{"lineNum":"   40","line":"//"},
{"lineNum":"   41","line":"// ************************************************************************"},
{"lineNum":"   42","line":"//@HEADER"},
{"lineNum":"   43","line":"*/"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"#ifndef KOKKOS_VIEW_HPP"},
{"lineNum":"   46","line":"#define KOKKOS_VIEW_HPP"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"#include <type_traits>"},
{"lineNum":"   49","line":"#include <string>"},
{"lineNum":"   50","line":"#include <algorithm>"},
{"lineNum":"   51","line":"#include <initializer_list>"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"#include <Kokkos_Core_fwd.hpp>"},
{"lineNum":"   54","line":"#include <Kokkos_HostSpace.hpp>"},
{"lineNum":"   55","line":"#include <Kokkos_MemoryTraits.hpp>"},
{"lineNum":"   56","line":"#include <Kokkos_ExecPolicy.hpp>"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"#include <impl/Kokkos_Tools.hpp>"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"//----------------------------------------------------------------------------"},
{"lineNum":"   61","line":"//----------------------------------------------------------------------------"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"namespace Kokkos {"},
{"lineNum":"   64","line":"namespace Impl {"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"template <class DataType>"},
{"lineNum":"   67","line":"struct ViewArrayAnalysis;"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"template <class DataType, class ArrayLayout,"},
{"lineNum":"   70","line":"          typename ValueType ="},
{"lineNum":"   71","line":"              typename ViewArrayAnalysis<DataType>::non_const_value_type>"},
{"lineNum":"   72","line":"struct ViewDataAnalysis;"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"template <class, class...>"},
{"lineNum":"   75","line":"class ViewMapping {"},
{"lineNum":"   76","line":" public:"},
{"lineNum":"   77","line":"  enum : bool { is_assignable_data_type = false };"},
{"lineNum":"   78","line":"  enum : bool { is_assignable = false };"},
{"lineNum":"   79","line":"};"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"template <typename IntType>"},
{"lineNum":"   82","line":"KOKKOS_INLINE_FUNCTION std::size_t count_valid_integers("},
{"lineNum":"   83","line":"    const IntType i0, const IntType i1, const IntType i2, const IntType i3,"},
{"lineNum":"   84","line":"    const IntType i4, const IntType i5, const IntType i6, const IntType i7) {"},
{"lineNum":"   85","line":"  static_assert(std::is_integral<IntType>::value,"},
{"lineNum":"   86","line":"                \"count_valid_integers() must have integer arguments.\");"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"  return (i0 != KOKKOS_INVALID_INDEX) + (i1 != KOKKOS_INVALID_INDEX) +","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"   89","line":"         (i2 != KOKKOS_INVALID_INDEX) + (i3 != KOKKOS_INVALID_INDEX) +","class":"lineNoCov","hits":"0","possible_hits":"15",},
{"lineNum":"   90","line":"         (i4 != KOKKOS_INVALID_INDEX) + (i5 != KOKKOS_INVALID_INDEX) +","class":"lineNoCov","hits":"0","possible_hits":"15",},
{"lineNum":"   91","line":"         (i6 != KOKKOS_INVALID_INDEX) + (i7 != KOKKOS_INVALID_INDEX);","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"   92","line":"}"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   95","line":"void runtime_check_rank_device(const size_t dyn_rank, const bool is_void_spec,"},
{"lineNum":"   96","line":"                               const size_t i0, const size_t i1,"},
{"lineNum":"   97","line":"                               const size_t i2, const size_t i3,"},
{"lineNum":"   98","line":"                               const size_t i4, const size_t i5,"},
{"lineNum":"   99","line":"                               const size_t i6, const size_t i7) {"},
{"lineNum":"  100","line":"  if (is_void_spec) {"},
{"lineNum":"  101","line":"    const size_t num_passed_args ="},
{"lineNum":"  102","line":"        count_valid_integers(i0, i1, i2, i3, i4, i5, i6, i7);"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"    if (num_passed_args != dyn_rank && is_void_spec) {"},
{"lineNum":"  105","line":"      Kokkos::abort("},
{"lineNum":"  106","line":"          \"Number of arguments passed to Kokkos::View() constructor must match \""},
{"lineNum":"  107","line":"          \"the dynamic rank of the view.\");"},
{"lineNum":"  108","line":"    }"},
{"lineNum":"  109","line":"  }"},
{"lineNum":"  110","line":"}"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"#ifdef KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_HOST"},
{"lineNum":"  113","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  114","line":"void runtime_check_rank_host(const size_t dyn_rank, const bool is_void_spec,"},
{"lineNum":"  115","line":"                             const size_t i0, const size_t i1, const size_t i2,"},
{"lineNum":"  116","line":"                             const size_t i3, const size_t i4, const size_t i5,"},
{"lineNum":"  117","line":"                             const size_t i6, const size_t i7,"},
{"lineNum":"  118","line":"                             const std::string& label) {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  119","line":"  if (is_void_spec) {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  120","line":"    const size_t num_passed_args ="},
{"lineNum":"  121","line":"        count_valid_integers(i0, i1, i2, i3, i4, i5, i6, i7);"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"    if (num_passed_args != dyn_rank) {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  124","line":"      const std::string message ="},
{"lineNum":"  125","line":"          \"Constructor for Kokkos View \'\" + label +","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  126","line":"          \"\' has mismatched number of arguments. Number of arguments = \" +","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  127","line":"          std::to_string(num_passed_args) +","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  128","line":"          \" but dynamic rank = \" + std::to_string(dyn_rank) + \" \\n\";","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  129","line":"      Kokkos::abort(message.c_str());","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  130","line":"    }"},
{"lineNum":"  131","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  132","line":"}","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  133","line":"#endif"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"} /* namespace Impl */"},
{"lineNum":"  136","line":"} /* namespace Kokkos */"},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"// Class to provide a uniform type"},
{"lineNum":"  139","line":"namespace Kokkos {"},
{"lineNum":"  140","line":"namespace Impl {"},
{"lineNum":"  141","line":"template <class ViewType, int Traits = 0>"},
{"lineNum":"  142","line":"struct ViewUniformType;"},
{"lineNum":"  143","line":"}"},
{"lineNum":"  144","line":"}  // namespace Kokkos"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  147","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"namespace Kokkos {"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"/** \\class ViewTraits"},
{"lineNum":"  152","line":" *  \\brief Traits class for accessing attributes of a View."},
{"lineNum":"  153","line":" *"},
{"lineNum":"  154","line":" * This is an implementation detail of View.  It is only of interest"},
{"lineNum":"  155","line":" * to developers implementing a new specialization of View."},
{"lineNum":"  156","line":" *"},
{"lineNum":"  157","line":" * Template argument options:"},
{"lineNum":"  158","line":" *   - View< DataType >"},
{"lineNum":"  159","line":" *   - View< DataType , Space >"},
{"lineNum":"  160","line":" *   - View< DataType , Space , MemoryTraits >"},
{"lineNum":"  161","line":" *   - View< DataType , ArrayLayout >"},
{"lineNum":"  162","line":" *   - View< DataType , ArrayLayout , Space >"},
{"lineNum":"  163","line":" *   - View< DataType , ArrayLayout , MemoryTraits >"},
{"lineNum":"  164","line":" *   - View< DataType , ArrayLayout , Space , MemoryTraits >"},
{"lineNum":"  165","line":" *   - View< DataType , MemoryTraits >"},
{"lineNum":"  166","line":" */"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"template <class DataType, class... Properties>"},
{"lineNum":"  169","line":"struct ViewTraits;"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"template <>"},
{"lineNum":"  172","line":"struct ViewTraits<void> {"},
{"lineNum":"  173","line":"  using execution_space = void;"},
{"lineNum":"  174","line":"  using memory_space    = void;"},
{"lineNum":"  175","line":"  using HostMirrorSpace = void;"},
{"lineNum":"  176","line":"  using array_layout    = void;"},
{"lineNum":"  177","line":"  using memory_traits   = void;"},
{"lineNum":"  178","line":"  using specialize      = void;"},
{"lineNum":"  179","line":"};"},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"template <class... Prop>"},
{"lineNum":"  182","line":"struct ViewTraits<void, void, Prop...> {"},
{"lineNum":"  183","line":"  // Ignore an extraneous \'void\'"},
{"lineNum":"  184","line":"  using execution_space = typename ViewTraits<void, Prop...>::execution_space;"},
{"lineNum":"  185","line":"  using memory_space    = typename ViewTraits<void, Prop...>::memory_space;"},
{"lineNum":"  186","line":"  using HostMirrorSpace = typename ViewTraits<void, Prop...>::HostMirrorSpace;"},
{"lineNum":"  187","line":"  using array_layout    = typename ViewTraits<void, Prop...>::array_layout;"},
{"lineNum":"  188","line":"  using memory_traits   = typename ViewTraits<void, Prop...>::memory_traits;"},
{"lineNum":"  189","line":"  using specialize      = typename ViewTraits<void, Prop...>::specialize;"},
{"lineNum":"  190","line":"};"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"template <class ArrayLayout, class... Prop>"},
{"lineNum":"  193","line":"struct ViewTraits<typename std::enable_if<"},
{"lineNum":"  194","line":"                      Kokkos::Impl::is_array_layout<ArrayLayout>::value>::type,"},
{"lineNum":"  195","line":"                  ArrayLayout, Prop...> {"},
{"lineNum":"  196","line":"  // Specify layout, keep subsequent space and memory traits arguments"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"  using execution_space = typename ViewTraits<void, Prop...>::execution_space;"},
{"lineNum":"  199","line":"  using memory_space    = typename ViewTraits<void, Prop...>::memory_space;"},
{"lineNum":"  200","line":"  using HostMirrorSpace = typename ViewTraits<void, Prop...>::HostMirrorSpace;"},
{"lineNum":"  201","line":"  using array_layout    = ArrayLayout;"},
{"lineNum":"  202","line":"  using memory_traits   = typename ViewTraits<void, Prop...>::memory_traits;"},
{"lineNum":"  203","line":"  using specialize      = typename ViewTraits<void, Prop...>::specialize;"},
{"lineNum":"  204","line":"};"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"template <class Space, class... Prop>"},
{"lineNum":"  207","line":"struct ViewTraits<"},
{"lineNum":"  208","line":"    typename std::enable_if<Kokkos::Impl::is_space<Space>::value>::type, Space,"},
{"lineNum":"  209","line":"    Prop...> {"},
{"lineNum":"  210","line":"  // Specify Space, memory traits should be the only subsequent argument."},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"  static_assert("},
{"lineNum":"  213","line":"      std::is_same<typename ViewTraits<void, Prop...>::execution_space,"},
{"lineNum":"  214","line":"                   void>::value &&"},
{"lineNum":"  215","line":"          std::is_same<typename ViewTraits<void, Prop...>::memory_space,"},
{"lineNum":"  216","line":"                       void>::value &&"},
{"lineNum":"  217","line":"          std::is_same<typename ViewTraits<void, Prop...>::HostMirrorSpace,"},
{"lineNum":"  218","line":"                       void>::value &&"},
{"lineNum":"  219","line":"          std::is_same<typename ViewTraits<void, Prop...>::array_layout,"},
{"lineNum":"  220","line":"                       void>::value,"},
{"lineNum":"  221","line":"      \"Only one View Execution or Memory Space template argument\");"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"  using execution_space = typename Space::execution_space;"},
{"lineNum":"  224","line":"  using memory_space    = typename Space::memory_space;"},
{"lineNum":"  225","line":"  using HostMirrorSpace ="},
{"lineNum":"  226","line":"      typename Kokkos::Impl::HostMirror<Space>::Space::memory_space;"},
{"lineNum":"  227","line":"  using array_layout  = typename execution_space::array_layout;"},
{"lineNum":"  228","line":"  using memory_traits = typename ViewTraits<void, Prop...>::memory_traits;"},
{"lineNum":"  229","line":"  using specialize    = typename ViewTraits<void, Prop...>::specialize;"},
{"lineNum":"  230","line":"};"},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"template <class MemoryTraits, class... Prop>"},
{"lineNum":"  233","line":"struct ViewTraits<typename std::enable_if<Kokkos::Impl::is_memory_traits<"},
{"lineNum":"  234","line":"                      MemoryTraits>::value>::type,"},
{"lineNum":"  235","line":"                  MemoryTraits, Prop...> {"},
{"lineNum":"  236","line":"  // Specify memory trait, should not be any subsequent arguments"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"  static_assert("},
{"lineNum":"  239","line":"      std::is_same<typename ViewTraits<void, Prop...>::execution_space,"},
{"lineNum":"  240","line":"                   void>::value &&"},
{"lineNum":"  241","line":"          std::is_same<typename ViewTraits<void, Prop...>::memory_space,"},
{"lineNum":"  242","line":"                       void>::value &&"},
{"lineNum":"  243","line":"          std::is_same<typename ViewTraits<void, Prop...>::array_layout,"},
{"lineNum":"  244","line":"                       void>::value &&"},
{"lineNum":"  245","line":"          std::is_same<typename ViewTraits<void, Prop...>::memory_traits,"},
{"lineNum":"  246","line":"                       void>::value,"},
{"lineNum":"  247","line":"      \"MemoryTrait is the final optional template argument for a View\");"},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"  using execution_space = void;"},
{"lineNum":"  250","line":"  using memory_space    = void;"},
{"lineNum":"  251","line":"  using HostMirrorSpace = void;"},
{"lineNum":"  252","line":"  using array_layout    = void;"},
{"lineNum":"  253","line":"  using memory_traits   = MemoryTraits;"},
{"lineNum":"  254","line":"  using specialize      = void;"},
{"lineNum":"  255","line":"};"},
{"lineNum":"  256","line":""},
{"lineNum":"  257","line":"template <class DataType, class... Properties>"},
{"lineNum":"  258","line":"struct ViewTraits {"},
{"lineNum":"  259","line":" private:"},
{"lineNum":"  260","line":"  // Unpack the properties arguments"},
{"lineNum":"  261","line":"  using prop = ViewTraits<void, Properties...>;"},
{"lineNum":"  262","line":""},
{"lineNum":"  263","line":"  using ExecutionSpace = typename std::conditional<"},
{"lineNum":"  264","line":"      !std::is_same<typename prop::execution_space, void>::value,"},
{"lineNum":"  265","line":"      typename prop::execution_space, Kokkos::DefaultExecutionSpace>::type;"},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"  using MemorySpace = typename std::conditional<"},
{"lineNum":"  268","line":"      !std::is_same<typename prop::memory_space, void>::value,"},
{"lineNum":"  269","line":"      typename prop::memory_space, typename ExecutionSpace::memory_space>::type;"},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"  using ArrayLayout = typename std::conditional<"},
{"lineNum":"  272","line":"      !std::is_same<typename prop::array_layout, void>::value,"},
{"lineNum":"  273","line":"      typename prop::array_layout, typename ExecutionSpace::array_layout>::type;"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"  using HostMirrorSpace = typename std::conditional<"},
{"lineNum":"  276","line":"      !std::is_same<typename prop::HostMirrorSpace, void>::value,"},
{"lineNum":"  277","line":"      typename prop::HostMirrorSpace,"},
{"lineNum":"  278","line":"      typename Kokkos::Impl::HostMirror<ExecutionSpace>::Space>::type;"},
{"lineNum":"  279","line":""},
{"lineNum":"  280","line":"  using MemoryTraits = typename std::conditional<"},
{"lineNum":"  281","line":"      !std::is_same<typename prop::memory_traits, void>::value,"},
{"lineNum":"  282","line":"      typename prop::memory_traits, typename Kokkos::MemoryManaged>::type;"},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"  // Analyze data type\'s properties,"},
{"lineNum":"  285","line":"  // May be specialized based upon the layout and value type"},
{"lineNum":"  286","line":"  using data_analysis = Kokkos::Impl::ViewDataAnalysis<DataType, ArrayLayout>;"},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":" public:"},
{"lineNum":"  289","line":"  //------------------------------------"},
{"lineNum":"  290","line":"  // Data type traits:"},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"  using data_type           = typename data_analysis::type;"},
{"lineNum":"  293","line":"  using const_data_type     = typename data_analysis::const_type;"},
{"lineNum":"  294","line":"  using non_const_data_type = typename data_analysis::non_const_type;"},
{"lineNum":"  295","line":""},
{"lineNum":"  296","line":"  //------------------------------------"},
{"lineNum":"  297","line":"  // Compatible array of trivial type traits:"},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"  using scalar_array_type = typename data_analysis::scalar_array_type;"},
{"lineNum":"  300","line":"  using const_scalar_array_type ="},
{"lineNum":"  301","line":"      typename data_analysis::const_scalar_array_type;"},
{"lineNum":"  302","line":"  using non_const_scalar_array_type ="},
{"lineNum":"  303","line":"      typename data_analysis::non_const_scalar_array_type;"},
{"lineNum":"  304","line":""},
{"lineNum":"  305","line":"  //------------------------------------"},
{"lineNum":"  306","line":"  // Value type traits:"},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"  using value_type           = typename data_analysis::value_type;"},
{"lineNum":"  309","line":"  using const_value_type     = typename data_analysis::const_value_type;"},
{"lineNum":"  310","line":"  using non_const_value_type = typename data_analysis::non_const_value_type;"},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":"  //------------------------------------"},
{"lineNum":"  313","line":"  // Mapping traits:"},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"  using array_layout = ArrayLayout;"},
{"lineNum":"  316","line":"  using dimension    = typename data_analysis::dimension;"},
{"lineNum":"  317","line":""},
{"lineNum":"  318","line":"  using specialize = typename std::conditional<"},
{"lineNum":"  319","line":"      std::is_same<typename data_analysis::specialize, void>::value,"},
{"lineNum":"  320","line":"      typename prop::specialize, typename data_analysis::specialize>::"},
{"lineNum":"  321","line":"      type; /* mapping specialization tag */"},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"  enum { rank = dimension::rank };"},
{"lineNum":"  324","line":"  enum { rank_dynamic = dimension::rank_dynamic };"},
{"lineNum":"  325","line":""},
{"lineNum":"  326","line":"  //------------------------------------"},
{"lineNum":"  327","line":"  // Execution space, memory space, memory access traits, and host mirror space."},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"  using execution_space   = ExecutionSpace;"},
{"lineNum":"  330","line":"  using memory_space      = MemorySpace;"},
{"lineNum":"  331","line":"  using device_type       = Kokkos::Device<ExecutionSpace, MemorySpace>;"},
{"lineNum":"  332","line":"  using memory_traits     = MemoryTraits;"},
{"lineNum":"  333","line":"  using host_mirror_space = HostMirrorSpace;"},
{"lineNum":"  334","line":""},
{"lineNum":"  335","line":"  using size_type = typename MemorySpace::size_type;"},
{"lineNum":"  336","line":""},
{"lineNum":"  337","line":"  enum { is_hostspace = std::is_same<MemorySpace, HostSpace>::value };"},
{"lineNum":"  338","line":"  enum { is_managed = MemoryTraits::is_unmanaged == 0 };"},
{"lineNum":"  339","line":"  enum { is_random_access = MemoryTraits::is_random_access == 1 };"},
{"lineNum":"  340","line":""},
{"lineNum":"  341","line":"  //------------------------------------"},
{"lineNum":"  342","line":"};"},
{"lineNum":"  343","line":""},
{"lineNum":"  344","line":"/** \\class View"},
{"lineNum":"  345","line":" *  \\brief View to an array of data."},
{"lineNum":"  346","line":" *"},
{"lineNum":"  347","line":" * A View represents an array of one or more dimensions."},
{"lineNum":"  348","line":" * For details, please refer to Kokkos\' tutorial materials."},
{"lineNum":"  349","line":" *"},
{"lineNum":"  350","line":" * \\section Kokkos_View_TemplateParameters Template parameters"},
{"lineNum":"  351","line":" *"},
{"lineNum":"  352","line":" * This class has both required and optional template parameters.  The"},
{"lineNum":"  353","line":" * \\c DataType parameter must always be provided, and must always be"},
{"lineNum":"  354","line":" * first. The parameters \\c Arg1Type, \\c Arg2Type, and \\c Arg3Type are"},
{"lineNum":"  355","line":" * placeholders for different template parameters.  The default value"},
{"lineNum":"  356","line":" * of the fifth template parameter \\c Specialize suffices for most use"},
{"lineNum":"  357","line":" * cases.  When explaining the template parameters, we won\'t refer to"},
{"lineNum":"  358","line":" * \\c Arg1Type, \\c Arg2Type, and \\c Arg3Type; instead, we will refer"},
{"lineNum":"  359","line":" * to the valid categories of template parameters, in whatever order"},
{"lineNum":"  360","line":" * they may occur."},
{"lineNum":"  361","line":" *"},
{"lineNum":"  362","line":" * Valid ways in which template arguments may be specified:"},
{"lineNum":"  363","line":" *   - View< DataType >"},
{"lineNum":"  364","line":" *   - View< DataType , Layout >"},
{"lineNum":"  365","line":" *   - View< DataType , Layout , Space >"},
{"lineNum":"  366","line":" *   - View< DataType , Layout , Space , MemoryTraits >"},
{"lineNum":"  367","line":" *   - View< DataType , Space >"},
{"lineNum":"  368","line":" *   - View< DataType , Space , MemoryTraits >"},
{"lineNum":"  369","line":" *   - View< DataType , MemoryTraits >"},
{"lineNum":"  370","line":" *"},
{"lineNum":"  371","line":" * \\tparam DataType (required) This indicates both the type of each"},
{"lineNum":"  372","line":" *   entry of the array, and the combination of compile-time and"},
{"lineNum":"  373","line":" *   run-time array dimension(s).  For example, <tt>double*</tt>"},
{"lineNum":"  374","line":" *   indicates a one-dimensional array of \\c double with run-time"},
{"lineNum":"  375","line":" *   dimension, and <tt>int*[3]</tt> a two-dimensional array of \\c int"},
{"lineNum":"  376","line":" *   with run-time first dimension and compile-time second dimension"},
{"lineNum":"  377","line":" *   (of 3).  In general, the run-time dimensions (if any) must go"},
{"lineNum":"  378","line":" *   first, followed by zero or more compile-time dimensions.  For"},
{"lineNum":"  379","line":" *   more examples, please refer to the tutorial materials."},
{"lineNum":"  380","line":" *"},
{"lineNum":"  381","line":" * \\tparam Space (required) The memory space."},
{"lineNum":"  382","line":" *"},
{"lineNum":"  383","line":" * \\tparam Layout (optional) The array\'s layout in memory.  For"},
{"lineNum":"  384","line":" *   example, LayoutLeft indicates a column-major (Fortran style)"},
{"lineNum":"  385","line":" *   layout, and LayoutRight a row-major (C style) layout.  If not"},
{"lineNum":"  386","line":" *   specified, this defaults to the preferred layout for the"},
{"lineNum":"  387","line":" *   <tt>Space</tt>."},
{"lineNum":"  388","line":" *"},
{"lineNum":"  389","line":" * \\tparam MemoryTraits (optional) Assertion of the user\'s intended"},
{"lineNum":"  390","line":" *   access behavior.  For example, RandomAccess indicates read-only"},
{"lineNum":"  391","line":" *   access with limited spatial locality, and Unmanaged lets users"},
{"lineNum":"  392","line":" *   wrap externally allocated memory in a View without automatic"},
{"lineNum":"  393","line":" *   deallocation."},
{"lineNum":"  394","line":" *"},
{"lineNum":"  395","line":" * \\section Kokkos_View_MT MemoryTraits discussion"},
{"lineNum":"  396","line":" *"},
{"lineNum":"  397","line":" * \\subsection Kokkos_View_MT_Interp MemoryTraits interpretation depends on"},
{"lineNum":"  398","line":" * Space"},
{"lineNum":"  399","line":" *"},
{"lineNum":"  400","line":" * Some \\c MemoryTraits options may have different interpretations for"},
{"lineNum":"  401","line":" * different \\c Space types.  For example, with the Cuda device,"},
{"lineNum":"  402","line":" * \\c RandomAccess tells Kokkos to fetch the data through the texture"},
{"lineNum":"  403","line":" * cache, whereas the non-GPU devices have no such hardware construct."},
{"lineNum":"  404","line":" *"},
{"lineNum":"  405","line":" * \\subsection Kokkos_View_MT_PrefUse Preferred use of MemoryTraits"},
{"lineNum":"  406","line":" *"},
{"lineNum":"  407","line":" * Users should defer applying the optional \\c MemoryTraits parameter"},
{"lineNum":"  408","line":" * until the point at which they actually plan to rely on it in a"},
{"lineNum":"  409","line":" * computational kernel.  This minimizes the number of template"},
{"lineNum":"  410","line":" * parameters exposed in their code, which reduces the cost of"},
{"lineNum":"  411","line":" * compilation.  Users may always assign a View without specified"},
{"lineNum":"  412","line":" * \\c MemoryTraits to a compatible View with that specification."},
{"lineNum":"  413","line":" * For example:"},
{"lineNum":"  414","line":" * \\code"},
{"lineNum":"  415","line":" * // Pass in the simplest types of View possible."},
{"lineNum":"  416","line":" * void"},
{"lineNum":"  417","line":" * doSomething (View<double*, Cuda> out,"},
{"lineNum":"  418","line":" *              View<const double*, Cuda> in)"},
{"lineNum":"  419","line":" * {"},
{"lineNum":"  420","line":" *   // Assign the \"generic\" View in to a RandomAccess View in_rr."},
{"lineNum":"  421","line":" *   // Note that RandomAccess View objects must have const data."},
{"lineNum":"  422","line":" *   View<const double*, Cuda, RandomAccess> in_rr = in;"},
{"lineNum":"  423","line":" *   // ... do something with in_rr and out ..."},
{"lineNum":"  424","line":" * }"},
{"lineNum":"  425","line":" * \\endcode"},
{"lineNum":"  426","line":" */"},
{"lineNum":"  427","line":""},
{"lineNum":"  428","line":"}  // namespace Kokkos"},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":"namespace Kokkos {"},
{"lineNum":"  431","line":""},
{"lineNum":"  432","line":"template <class T1, class T2>"},
{"lineNum":"  433","line":"struct is_always_assignable_impl;"},
{"lineNum":"  434","line":""},
{"lineNum":"  435","line":"template <class... ViewTDst, class... ViewTSrc>"},
{"lineNum":"  436","line":"struct is_always_assignable_impl<Kokkos::View<ViewTDst...>,"},
{"lineNum":"  437","line":"                                 Kokkos::View<ViewTSrc...>> {"},
{"lineNum":"  438","line":"  using mapping_type = Kokkos::Impl::ViewMapping<"},
{"lineNum":"  439","line":"      typename Kokkos::View<ViewTDst...>::traits,"},
{"lineNum":"  440","line":"      typename Kokkos::View<ViewTSrc...>::traits,"},
{"lineNum":"  441","line":"      typename Kokkos::View<ViewTDst...>::traits::specialize>;"},
{"lineNum":"  442","line":""},
{"lineNum":"  443","line":"  constexpr static bool value ="},
{"lineNum":"  444","line":"      mapping_type::is_assignable &&"},
{"lineNum":"  445","line":"      static_cast<int>(Kokkos::View<ViewTDst...>::rank_dynamic) >="},
{"lineNum":"  446","line":"          static_cast<int>(Kokkos::View<ViewTSrc...>::rank_dynamic);"},
{"lineNum":"  447","line":"};"},
{"lineNum":"  448","line":""},
{"lineNum":"  449","line":"template <class View1, class View2>"},
{"lineNum":"  450","line":"using is_always_assignable = is_always_assignable_impl<"},
{"lineNum":"  451","line":"    typename std::remove_reference<View1>::type,"},
{"lineNum":"  452","line":"    typename std::remove_const<"},
{"lineNum":"  453","line":"        typename std::remove_reference<View2>::type>::type>;"},
{"lineNum":"  454","line":""},
{"lineNum":"  455","line":"#ifdef KOKKOS_ENABLE_CXX17"},
{"lineNum":"  456","line":"template <class T1, class T2>"},
{"lineNum":"  457","line":"inline constexpr bool is_always_assignable_v ="},
{"lineNum":"  458","line":"    is_always_assignable<T1, T2>::value;"},
{"lineNum":"  459","line":"#endif"},
{"lineNum":"  460","line":""},
{"lineNum":"  461","line":"template <class... ViewTDst, class... ViewTSrc>"},
{"lineNum":"  462","line":"constexpr bool is_assignable(const Kokkos::View<ViewTDst...>& dst,"},
{"lineNum":"  463","line":"                             const Kokkos::View<ViewTSrc...>& src) {"},
{"lineNum":"  464","line":"  using DstTraits = typename Kokkos::View<ViewTDst...>::traits;"},
{"lineNum":"  465","line":"  using SrcTraits = typename Kokkos::View<ViewTSrc...>::traits;"},
{"lineNum":"  466","line":"  using mapping_type ="},
{"lineNum":"  467","line":"      Kokkos::Impl::ViewMapping<DstTraits, SrcTraits,"},
{"lineNum":"  468","line":"                                typename DstTraits::specialize>;"},
{"lineNum":"  469","line":""},
{"lineNum":"  470","line":"#ifdef KOKKOS_ENABLE_CXX17"},
{"lineNum":"  471","line":"  return is_always_assignable_v<Kokkos::View<ViewTDst...>,"},
{"lineNum":"  472","line":"                                Kokkos::View<ViewTSrc...>> ||"},
{"lineNum":"  473","line":"#else"},
{"lineNum":"  474","line":"  return is_always_assignable<Kokkos::View<ViewTDst...>,"},
{"lineNum":"  475","line":"                              Kokkos::View<ViewTSrc...>>::value ||"},
{"lineNum":"  476","line":"#endif"},
{"lineNum":"  477","line":"         (mapping_type::is_assignable &&"},
{"lineNum":"  478","line":"          ((DstTraits::dimension::rank_dynamic >= 1) ||"},
{"lineNum":"  479","line":"           (dst.static_extent(0) == src.extent(0))) &&"},
{"lineNum":"  480","line":"          ((DstTraits::dimension::rank_dynamic >= 2) ||"},
{"lineNum":"  481","line":"           (dst.static_extent(1) == src.extent(1))) &&"},
{"lineNum":"  482","line":"          ((DstTraits::dimension::rank_dynamic >= 3) ||"},
{"lineNum":"  483","line":"           (dst.static_extent(2) == src.extent(2))) &&"},
{"lineNum":"  484","line":"          ((DstTraits::dimension::rank_dynamic >= 4) ||"},
{"lineNum":"  485","line":"           (dst.static_extent(3) == src.extent(3))) &&"},
{"lineNum":"  486","line":"          ((DstTraits::dimension::rank_dynamic >= 5) ||"},
{"lineNum":"  487","line":"           (dst.static_extent(4) == src.extent(4))) &&"},
{"lineNum":"  488","line":"          ((DstTraits::dimension::rank_dynamic >= 6) ||"},
{"lineNum":"  489","line":"           (dst.static_extent(5) == src.extent(5))) &&"},
{"lineNum":"  490","line":"          ((DstTraits::dimension::rank_dynamic >= 7) ||"},
{"lineNum":"  491","line":"           (dst.static_extent(6) == src.extent(6))) &&"},
{"lineNum":"  492","line":"          ((DstTraits::dimension::rank_dynamic >= 8) ||"},
{"lineNum":"  493","line":"           (dst.static_extent(7) == src.extent(7))));"},
{"lineNum":"  494","line":"}"},
{"lineNum":"  495","line":""},
{"lineNum":"  496","line":"} /* namespace Kokkos */"},
{"lineNum":"  497","line":""},
{"lineNum":"  498","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  499","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  500","line":""},
{"lineNum":"  501","line":"#include <impl/Kokkos_ViewMapping.hpp>"},
{"lineNum":"  502","line":"#include <impl/Kokkos_ViewArray.hpp>"},
{"lineNum":"  503","line":""},
{"lineNum":"  504","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  505","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  506","line":""},
{"lineNum":"  507","line":"namespace Kokkos {"},
{"lineNum":"  508","line":""},
{"lineNum":"  509","line":"namespace {"},
{"lineNum":"  510","line":""},
{"lineNum":"  511","line":"constexpr Kokkos::Impl::ALL_t ALL = Kokkos::Impl::ALL_t();"},
{"lineNum":"  512","line":""},
{"lineNum":"  513","line":"constexpr Kokkos::Impl::WithoutInitializing_t WithoutInitializing ="},
{"lineNum":"  514","line":"    Kokkos::Impl::WithoutInitializing_t();"},
{"lineNum":"  515","line":""},
{"lineNum":"  516","line":"constexpr Kokkos::Impl::AllowPadding_t AllowPadding ="},
{"lineNum":"  517","line":"    Kokkos::Impl::AllowPadding_t();"},
{"lineNum":"  518","line":""},
{"lineNum":"  519","line":"}  // namespace"},
{"lineNum":"  520","line":""},
{"lineNum":"  521","line":"/** \\brief  Create View allocation parameter bundle from argument list."},
{"lineNum":"  522","line":" *"},
{"lineNum":"  523","line":" *  Valid argument list members are:"},
{"lineNum":"  524","line":" *    1) label as a \"string\" or std::string"},
{"lineNum":"  525","line":" *    2) memory space instance of the View::memory_space type"},
{"lineNum":"  526","line":" *    3) execution space instance compatible with the View::memory_space"},
{"lineNum":"  527","line":" *    4) Kokkos::WithoutInitializing to bypass initialization"},
{"lineNum":"  528","line":" *    4) Kokkos::AllowPadding to allow allocation to pad dimensions for memory"},
{"lineNum":"  529","line":" * alignment"},
{"lineNum":"  530","line":" */"},
{"lineNum":"  531","line":"template <class... Args>"},
{"lineNum":"  532","line":"inline Impl::ViewCtorProp<typename Impl::ViewCtorProp<void, Args>::type...>"},
{"lineNum":"  533","line":"view_alloc(Args const&... args) {"},
{"lineNum":"  534","line":"  using return_type ="},
{"lineNum":"  535","line":"      Impl::ViewCtorProp<typename Impl::ViewCtorProp<void, Args>::type...>;"},
{"lineNum":"  536","line":""},
{"lineNum":"  537","line":"  static_assert(!return_type::has_pointer,"},
{"lineNum":"  538","line":"                \"Cannot give pointer-to-memory for view allocation\");"},
{"lineNum":"  539","line":""},
{"lineNum":"  540","line":"  return return_type(args...);"},
{"lineNum":"  541","line":"}"},
{"lineNum":"  542","line":""},
{"lineNum":"  543","line":"template <class... Args>"},
{"lineNum":"  544","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  545","line":"    Impl::ViewCtorProp<typename Impl::ViewCtorProp<void, Args>::type...>"},
{"lineNum":"  546","line":"    view_wrap(Args const&... args) {"},
{"lineNum":"  547","line":"  using return_type ="},
{"lineNum":"  548","line":"      Impl::ViewCtorProp<typename Impl::ViewCtorProp<void, Args>::type...>;"},
{"lineNum":"  549","line":""},
{"lineNum":"  550","line":"  static_assert(!return_type::has_memory_space &&"},
{"lineNum":"  551","line":"                    !return_type::has_execution_space &&"},
{"lineNum":"  552","line":"                    !return_type::has_label && return_type::has_pointer,"},
{"lineNum":"  553","line":"                \"Must only give pointer-to-memory for view wrapping\");"},
{"lineNum":"  554","line":""},
{"lineNum":"  555","line":"  return return_type(args...);"},
{"lineNum":"  556","line":"}"},
{"lineNum":"  557","line":""},
{"lineNum":"  558","line":"} /* namespace Kokkos */"},
{"lineNum":"  559","line":""},
{"lineNum":"  560","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  561","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  562","line":""},
{"lineNum":"  563","line":"namespace Kokkos {"},
{"lineNum":"  564","line":""},
{"lineNum":"  565","line":"template <class DataType, class... Properties>"},
{"lineNum":"  566","line":"class View;"},
{"lineNum":"  567","line":""},
{"lineNum":"  568","line":"template <class>"},
{"lineNum":"  569","line":"struct is_view : public std::false_type {};"},
{"lineNum":"  570","line":""},
{"lineNum":"  571","line":"template <class D, class... P>"},
{"lineNum":"  572","line":"struct is_view<View<D, P...>> : public std::true_type {};"},
{"lineNum":"  573","line":""},
{"lineNum":"  574","line":"template <class D, class... P>"},
{"lineNum":"  575","line":"struct is_view<const View<D, P...>> : public std::true_type {};"},
{"lineNum":"  576","line":""},
{"lineNum":"  577","line":"template <class DataType, class... Properties>"},
{"lineNum":"  578","line":"class View : public ViewTraits<DataType, Properties...> {"},
{"lineNum":"  579","line":" private:"},
{"lineNum":"  580","line":"  template <class, class...>"},
{"lineNum":"  581","line":"  friend class View;"},
{"lineNum":"  582","line":"  template <class, class...>"},
{"lineNum":"  583","line":"  friend class Kokkos::Impl::ViewMapping;"},
{"lineNum":"  584","line":""},
{"lineNum":"  585","line":"  using view_tracker_type = Kokkos::Impl::ViewTracker<View>;"},
{"lineNum":"  586","line":""},
{"lineNum":"  587","line":" public:"},
{"lineNum":"  588","line":"  using traits = ViewTraits<DataType, Properties...>;"},
{"lineNum":"  589","line":""},
{"lineNum":"  590","line":" private:"},
{"lineNum":"  591","line":"  using map_type ="},
{"lineNum":"  592","line":"      Kokkos::Impl::ViewMapping<traits, typename traits::specialize>;"},
{"lineNum":"  593","line":"  template <typename V>"},
{"lineNum":"  594","line":"  friend struct Kokkos::Impl::ViewTracker;"},
{"lineNum":"  595","line":""},
{"lineNum":"  596","line":"  view_tracker_type m_track;"},
{"lineNum":"  597","line":"  map_type m_map;"},
{"lineNum":"  598","line":""},
{"lineNum":"  599","line":" public:"},
{"lineNum":"  600","line":"  //----------------------------------------"},
{"lineNum":"  601","line":"  /** \\brief  Compatible view of array of scalar types */"},
{"lineNum":"  602","line":"  using array_type ="},
{"lineNum":"  603","line":"      View<typename traits::scalar_array_type, typename traits::array_layout,"},
{"lineNum":"  604","line":"           typename traits::device_type, typename traits::memory_traits>;"},
{"lineNum":"  605","line":""},
{"lineNum":"  606","line":"  /** \\brief  Compatible view of const data type */"},
{"lineNum":"  607","line":"  using const_type ="},
{"lineNum":"  608","line":"      View<typename traits::const_data_type, typename traits::array_layout,"},
{"lineNum":"  609","line":"           typename traits::device_type, typename traits::memory_traits>;"},
{"lineNum":"  610","line":""},
{"lineNum":"  611","line":"  /** \\brief  Compatible view of non-const data type */"},
{"lineNum":"  612","line":"  using non_const_type ="},
{"lineNum":"  613","line":"      View<typename traits::non_const_data_type, typename traits::array_layout,"},
{"lineNum":"  614","line":"           typename traits::device_type, typename traits::memory_traits>;"},
{"lineNum":"  615","line":""},
{"lineNum":"  616","line":"  /** \\brief  Compatible HostMirror view */"},
{"lineNum":"  617","line":"  using HostMirror ="},
{"lineNum":"  618","line":"      View<typename traits::non_const_data_type, typename traits::array_layout,"},
{"lineNum":"  619","line":"           Device<DefaultHostExecutionSpace,"},
{"lineNum":"  620","line":"                  typename traits::host_mirror_space::memory_space>>;"},
{"lineNum":"  621","line":""},
{"lineNum":"  622","line":"  /** \\brief  Compatible HostMirror view */"},
{"lineNum":"  623","line":"  using host_mirror_type ="},
{"lineNum":"  624","line":"      View<typename traits::non_const_data_type, typename traits::array_layout,"},
{"lineNum":"  625","line":"           typename traits::host_mirror_space>;"},
{"lineNum":"  626","line":""},
{"lineNum":"  627","line":"  /** \\brief Unified types */"},
{"lineNum":"  628","line":"  using uniform_type = typename Impl::ViewUniformType<View, 0>::type;"},
{"lineNum":"  629","line":"  using uniform_const_type ="},
{"lineNum":"  630","line":"      typename Impl::ViewUniformType<View, 0>::const_type;"},
{"lineNum":"  631","line":"  using uniform_runtime_type ="},
{"lineNum":"  632","line":"      typename Impl::ViewUniformType<View, 0>::runtime_type;"},
{"lineNum":"  633","line":"  using uniform_runtime_const_type ="},
{"lineNum":"  634","line":"      typename Impl::ViewUniformType<View, 0>::runtime_const_type;"},
{"lineNum":"  635","line":"  using uniform_nomemspace_type ="},
{"lineNum":"  636","line":"      typename Impl::ViewUniformType<View, 0>::nomemspace_type;"},
{"lineNum":"  637","line":"  using uniform_const_nomemspace_type ="},
{"lineNum":"  638","line":"      typename Impl::ViewUniformType<View, 0>::const_nomemspace_type;"},
{"lineNum":"  639","line":"  using uniform_runtime_nomemspace_type ="},
{"lineNum":"  640","line":"      typename Impl::ViewUniformType<View, 0>::runtime_nomemspace_type;"},
{"lineNum":"  641","line":"  using uniform_runtime_const_nomemspace_type ="},
{"lineNum":"  642","line":"      typename Impl::ViewUniformType<View, 0>::runtime_const_nomemspace_type;"},
{"lineNum":"  643","line":""},
{"lineNum":"  644","line":"  //----------------------------------------"},
{"lineNum":"  645","line":"  // Domain rank and extents"},
{"lineNum":"  646","line":""},
{"lineNum":"  647","line":"  enum { Rank = map_type::Rank };"},
{"lineNum":"  648","line":""},
{"lineNum":"  649","line":"  /** \\brief rank() to be implemented"},
{"lineNum":"  650","line":"   */"},
{"lineNum":"  651","line":"  // KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  652","line":"  // static"},
{"lineNum":"  653","line":"  // constexpr unsigned rank() { return map_type::Rank; }"},
{"lineNum":"  654","line":""},
{"lineNum":"  655","line":"  template <typename iType>"},
{"lineNum":"  656","line":"  KOKKOS_INLINE_FUNCTION constexpr"},
{"lineNum":"  657","line":"      typename std::enable_if<std::is_integral<iType>::value, size_t>::type"},
{"lineNum":"  658","line":"      extent(const iType& r) const noexcept {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  659","line":"    return m_map.extent(r);","class":"lineNoCov","hits":"0","possible_hits":"36",},
{"lineNum":"  660","line":"  }"},
{"lineNum":"  661","line":""},
{"lineNum":"  662","line":"  static KOKKOS_INLINE_FUNCTION constexpr size_t static_extent("},
{"lineNum":"  663","line":"      const unsigned r) noexcept {"},
{"lineNum":"  664","line":"    return map_type::static_extent(r);"},
{"lineNum":"  665","line":"  }"},
{"lineNum":"  666","line":""},
{"lineNum":"  667","line":"  template <typename iType>"},
{"lineNum":"  668","line":"  KOKKOS_INLINE_FUNCTION constexpr"},
{"lineNum":"  669","line":"      typename std::enable_if<std::is_integral<iType>::value, int>::type"},
{"lineNum":"  670","line":"      extent_int(const iType& r) const noexcept {"},
{"lineNum":"  671","line":"    return static_cast<int>(m_map.extent(r));"},
{"lineNum":"  672","line":"  }"},
{"lineNum":"  673","line":""},
{"lineNum":"  674","line":"  KOKKOS_INLINE_FUNCTION constexpr typename traits::array_layout layout()"},
{"lineNum":"  675","line":"      const {"},
{"lineNum":"  676","line":"    return m_map.layout();"},
{"lineNum":"  677","line":"  }"},
{"lineNum":"  678","line":""},
{"lineNum":"  679","line":"  //----------------------------------------"},
{"lineNum":"  680","line":"  /*  Deprecate all \'dimension\' functions in favor of"},
{"lineNum":"  681","line":"   *  ISO/C++ vocabulary \'extent\'."},
{"lineNum":"  682","line":"   */"},
{"lineNum":"  683","line":""},
{"lineNum":"  684","line":"  KOKKOS_INLINE_FUNCTION constexpr size_t size() const {"},
{"lineNum":"  685","line":"    return m_map.dimension_0() * m_map.dimension_1() * m_map.dimension_2() *","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  686","line":"           m_map.dimension_3() * m_map.dimension_4() * m_map.dimension_5() *"},
{"lineNum":"  687","line":"           m_map.dimension_6() * m_map.dimension_7();"},
{"lineNum":"  688","line":"  }"},
{"lineNum":"  689","line":""},
{"lineNum":"  690","line":"  KOKKOS_INLINE_FUNCTION constexpr size_t stride_0() const {"},
{"lineNum":"  691","line":"    return m_map.stride_0();"},
{"lineNum":"  692","line":"  }"},
{"lineNum":"  693","line":"  KOKKOS_INLINE_FUNCTION constexpr size_t stride_1() const {"},
{"lineNum":"  694","line":"    return m_map.stride_1();"},
{"lineNum":"  695","line":"  }"},
{"lineNum":"  696","line":"  KOKKOS_INLINE_FUNCTION constexpr size_t stride_2() const {"},
{"lineNum":"  697","line":"    return m_map.stride_2();"},
{"lineNum":"  698","line":"  }"},
{"lineNum":"  699","line":"  KOKKOS_INLINE_FUNCTION constexpr size_t stride_3() const {"},
{"lineNum":"  700","line":"    return m_map.stride_3();"},
{"lineNum":"  701","line":"  }"},
{"lineNum":"  702","line":"  KOKKOS_INLINE_FUNCTION constexpr size_t stride_4() const {"},
{"lineNum":"  703","line":"    return m_map.stride_4();"},
{"lineNum":"  704","line":"  }"},
{"lineNum":"  705","line":"  KOKKOS_INLINE_FUNCTION constexpr size_t stride_5() const {"},
{"lineNum":"  706","line":"    return m_map.stride_5();"},
{"lineNum":"  707","line":"  }"},
{"lineNum":"  708","line":"  KOKKOS_INLINE_FUNCTION constexpr size_t stride_6() const {"},
{"lineNum":"  709","line":"    return m_map.stride_6();"},
{"lineNum":"  710","line":"  }"},
{"lineNum":"  711","line":"  KOKKOS_INLINE_FUNCTION constexpr size_t stride_7() const {"},
{"lineNum":"  712","line":"    return m_map.stride_7();"},
{"lineNum":"  713","line":"  }"},
{"lineNum":"  714","line":""},
{"lineNum":"  715","line":"  template <typename iType>"},
{"lineNum":"  716","line":"  KOKKOS_INLINE_FUNCTION constexpr"},
{"lineNum":"  717","line":"      typename std::enable_if<std::is_integral<iType>::value, size_t>::type"},
{"lineNum":"  718","line":"      stride(iType r) const {"},
{"lineNum":"  719","line":"    return ("},
{"lineNum":"  720","line":"        r == 0"},
{"lineNum":"  721","line":"            ? m_map.stride_0()"},
{"lineNum":"  722","line":"            : (r == 1"},
{"lineNum":"  723","line":"                   ? m_map.stride_1()"},
{"lineNum":"  724","line":"                   : (r == 2"},
{"lineNum":"  725","line":"                          ? m_map.stride_2()"},
{"lineNum":"  726","line":"                          : (r == 3"},
{"lineNum":"  727","line":"                                 ? m_map.stride_3()"},
{"lineNum":"  728","line":"                                 : (r == 4"},
{"lineNum":"  729","line":"                                        ? m_map.stride_4()"},
{"lineNum":"  730","line":"                                        : (r == 5"},
{"lineNum":"  731","line":"                                               ? m_map.stride_5()"},
{"lineNum":"  732","line":"                                               : (r == 6"},
{"lineNum":"  733","line":"                                                      ? m_map.stride_6()"},
{"lineNum":"  734","line":"                                                      : m_map.stride_7())))))));"},
{"lineNum":"  735","line":"  }"},
{"lineNum":"  736","line":""},
{"lineNum":"  737","line":"  template <typename iType>"},
{"lineNum":"  738","line":"  KOKKOS_INLINE_FUNCTION void stride(iType* const s) const {"},
{"lineNum":"  739","line":"    m_map.stride(s);"},
{"lineNum":"  740","line":"  }"},
{"lineNum":"  741","line":""},
{"lineNum":"  742","line":"  //----------------------------------------"},
{"lineNum":"  743","line":"  // Range span is the span which contains all members."},
{"lineNum":"  744","line":""},
{"lineNum":"  745","line":"  using reference_type = typename map_type::reference_type;"},
{"lineNum":"  746","line":"  using pointer_type   = typename map_type::pointer_type;"},
{"lineNum":"  747","line":""},
{"lineNum":"  748","line":"  enum {"},
{"lineNum":"  749","line":"    reference_type_is_lvalue_reference ="},
{"lineNum":"  750","line":"        std::is_lvalue_reference<reference_type>::value"},
{"lineNum":"  751","line":"  };"},
{"lineNum":"  752","line":""},
{"lineNum":"  753","line":"  KOKKOS_INLINE_FUNCTION constexpr size_t span() const { return m_map.span(); }"},
{"lineNum":"  754","line":"  KOKKOS_INLINE_FUNCTION bool span_is_contiguous() const {"},
{"lineNum":"  755","line":"    return m_map.span_is_contiguous();"},
{"lineNum":"  756","line":"  }"},
{"lineNum":"  757","line":"  KOKKOS_INLINE_FUNCTION constexpr bool is_allocated() const {"},
{"lineNum":"  758","line":"    return m_map.data() != nullptr;"},
{"lineNum":"  759","line":"  }"},
{"lineNum":"  760","line":"  KOKKOS_INLINE_FUNCTION constexpr pointer_type data() const {"},
{"lineNum":"  761","line":"    return m_map.data();"},
{"lineNum":"  762","line":"  }"},
{"lineNum":"  763","line":""},
{"lineNum":"  764","line":"  //----------------------------------------"},
{"lineNum":"  765","line":"  // Allow specializations to query their specialized map"},
{"lineNum":"  766","line":""},
{"lineNum":"  767","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  768","line":"  const Kokkos::Impl::ViewMapping<traits, typename traits::specialize>&"},
{"lineNum":"  769","line":"  impl_map() const {"},
{"lineNum":"  770","line":"    return m_map;"},
{"lineNum":"  771","line":"  }"},
{"lineNum":"  772","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  773","line":"  const Kokkos::Impl::SharedAllocationTracker& impl_track() const {"},
{"lineNum":"  774","line":"    return m_track.m_tracker;"},
{"lineNum":"  775","line":"  }"},
{"lineNum":"  776","line":"  //----------------------------------------"},
{"lineNum":"  777","line":""},
{"lineNum":"  778","line":" private:"},
{"lineNum":"  779","line":"  static constexpr bool is_layout_left ="},
{"lineNum":"  780","line":"      std::is_same<typename traits::array_layout, Kokkos::LayoutLeft>::value;"},
{"lineNum":"  781","line":""},
{"lineNum":"  782","line":"  static constexpr bool is_layout_right ="},
{"lineNum":"  783","line":"      std::is_same<typename traits::array_layout, Kokkos::LayoutRight>::value;"},
{"lineNum":"  784","line":""},
{"lineNum":"  785","line":"  static constexpr bool is_layout_stride ="},
{"lineNum":"  786","line":"      std::is_same<typename traits::array_layout, Kokkos::LayoutStride>::value;"},
{"lineNum":"  787","line":""},
{"lineNum":"  788","line":"  static constexpr bool is_default_map ="},
{"lineNum":"  789","line":"      std::is_same<typename traits::specialize, void>::value &&"},
{"lineNum":"  790","line":"      (is_layout_left || is_layout_right || is_layout_stride);"},
{"lineNum":"  791","line":""},
{"lineNum":"  792","line":"#if defined(KOKKOS_ENABLE_DEBUG_BOUNDS_CHECK)"},
{"lineNum":"  793","line":""},
{"lineNum":"  794","line":"#define KOKKOS_IMPL_SINK(ARG) ARG"},
{"lineNum":"  795","line":""},
{"lineNum":"  796","line":"#define KOKKOS_IMPL_VIEW_OPERATOR_VERIFY(ARG)                          \\"},
{"lineNum":"  797","line":"  Kokkos::Impl::verify_space<Kokkos::Impl::ActiveExecutionMemorySpace, \\"},
{"lineNum":"  798","line":"                             typename traits::memory_space>::check();  \\"},
{"lineNum":"  799","line":"  Kokkos::Impl::view_verify_operator_bounds<typename traits::memory_space> ARG;"},
{"lineNum":"  800","line":""},
{"lineNum":"  801","line":"#else"},
{"lineNum":"  802","line":""},
{"lineNum":"  803","line":"#define KOKKOS_IMPL_SINK(ARG)"},
{"lineNum":"  804","line":""},
{"lineNum":"  805","line":"#define KOKKOS_IMPL_VIEW_OPERATOR_VERIFY(ARG)                          \\"},
{"lineNum":"  806","line":"  Kokkos::Impl::verify_space<Kokkos::Impl::ActiveExecutionMemorySpace, \\"},
{"lineNum":"  807","line":"                             typename traits::memory_space>::check();"},
{"lineNum":"  808","line":""},
{"lineNum":"  809","line":"#endif"},
{"lineNum":"  810","line":""},
{"lineNum":"  811","line":" public:"},
{"lineNum":"  812","line":"  //------------------------------"},
{"lineNum":"  813","line":"  // Rank 0 operator()"},
{"lineNum":"  814","line":""},
{"lineNum":"  815","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":"  816","line":"  reference_type operator()() const { return m_map.reference(); }"},
{"lineNum":"  817","line":"  //------------------------------"},
{"lineNum":"  818","line":"  // Rank 1 operator()"},
{"lineNum":"  819","line":""},
{"lineNum":"  820","line":"  template <typename I0>"},
{"lineNum":"  821","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":"  822","line":"      typename std::enable_if<(Kokkos::Impl::are_integral<I0>::value &&"},
{"lineNum":"  823","line":"                               (1 == Rank) && !is_default_map),"},
{"lineNum":"  824","line":"                              reference_type>::type"},
{"lineNum":"  825","line":"      operator()(const I0& i0) const {"},
{"lineNum":"  826","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY((m_track, m_map, i0))"},
{"lineNum":"  827","line":"    return m_map.reference(i0);"},
{"lineNum":"  828","line":"  }"},
{"lineNum":"  829","line":""},
{"lineNum":"  830","line":"  template <typename I0>"},
{"lineNum":"  831","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":"  832","line":"      typename std::enable_if<(Kokkos::Impl::are_integral<I0>::value &&"},
{"lineNum":"  833","line":"                               (1 == Rank) && is_default_map &&"},
{"lineNum":"  834","line":"                               !is_layout_stride),"},
{"lineNum":"  835","line":"                              reference_type>::type"},
{"lineNum":"  836","line":"      operator()(const I0& i0) const {"},
{"lineNum":"  837","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY((m_track, m_map, i0))"},
{"lineNum":"  838","line":"    return m_map.m_impl_handle[i0];","class":"lineNoCov","hits":"0","possible_hits":"414",},
{"lineNum":"  839","line":"  }"},
{"lineNum":"  840","line":""},
{"lineNum":"  841","line":"  template <typename I0>"},
{"lineNum":"  842","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":"  843","line":"      typename std::enable_if<(Kokkos::Impl::are_integral<I0>::value &&"},
{"lineNum":"  844","line":"                               (1 == Rank) && is_default_map &&"},
{"lineNum":"  845","line":"                               is_layout_stride),"},
{"lineNum":"  846","line":"                              reference_type>::type"},
{"lineNum":"  847","line":"      operator()(const I0& i0) const {"},
{"lineNum":"  848","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY((m_track, m_map, i0))"},
{"lineNum":"  849","line":"    return m_map.m_impl_handle[m_map.m_impl_offset.m_stride.S0 * i0];"},
{"lineNum":"  850","line":"  }"},
{"lineNum":"  851","line":"  //------------------------------"},
{"lineNum":"  852","line":"  // Rank 1 operator[]"},
{"lineNum":"  853","line":""},
{"lineNum":"  854","line":"  template <typename I0>"},
{"lineNum":"  855","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":"  856","line":"      typename std::enable_if<(Kokkos::Impl::are_integral<I0>::value &&"},
{"lineNum":"  857","line":"                               (1 == Rank) && !is_default_map),"},
{"lineNum":"  858","line":"                              reference_type>::type"},
{"lineNum":"  859","line":"      operator[](const I0& i0) const {"},
{"lineNum":"  860","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY((m_track, m_map, i0))"},
{"lineNum":"  861","line":"    return m_map.reference(i0);"},
{"lineNum":"  862","line":"  }"},
{"lineNum":"  863","line":""},
{"lineNum":"  864","line":"  template <typename I0>"},
{"lineNum":"  865","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":"  866","line":"      typename std::enable_if<(Kokkos::Impl::are_integral<I0>::value &&"},
{"lineNum":"  867","line":"                               (1 == Rank) && is_default_map &&"},
{"lineNum":"  868","line":"                               !is_layout_stride),"},
{"lineNum":"  869","line":"                              reference_type>::type"},
{"lineNum":"  870","line":"      operator[](const I0& i0) const {"},
{"lineNum":"  871","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY((m_track, m_map, i0))"},
{"lineNum":"  872","line":"    return m_map.m_impl_handle[i0];","class":"lineNoCov","hits":"0","possible_hits":"35",},
{"lineNum":"  873","line":"  }"},
{"lineNum":"  874","line":""},
{"lineNum":"  875","line":"  template <typename I0>"},
{"lineNum":"  876","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":"  877","line":"      typename std::enable_if<(Kokkos::Impl::are_integral<I0>::value &&"},
{"lineNum":"  878","line":"                               (1 == Rank) && is_default_map &&"},
{"lineNum":"  879","line":"                               is_layout_stride),"},
{"lineNum":"  880","line":"                              reference_type>::type"},
{"lineNum":"  881","line":"      operator[](const I0& i0) const {"},
{"lineNum":"  882","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY((m_track, m_map, i0))"},
{"lineNum":"  883","line":"    return m_map.m_impl_handle[m_map.m_impl_offset.m_stride.S0 * i0];"},
{"lineNum":"  884","line":"  }"},
{"lineNum":"  885","line":""},
{"lineNum":"  886","line":"  //------------------------------"},
{"lineNum":"  887","line":"  // Rank 2"},
{"lineNum":"  888","line":""},
{"lineNum":"  889","line":"  template <typename I0, typename I1>"},
{"lineNum":"  890","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":"  891","line":"      typename std::enable_if<(Kokkos::Impl::are_integral<I0, I1>::value &&"},
{"lineNum":"  892","line":"                               (2 == Rank) && !is_default_map),"},
{"lineNum":"  893","line":"                              reference_type>::type"},
{"lineNum":"  894","line":"      operator()(const I0& i0, const I1& i1) const {"},
{"lineNum":"  895","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY((m_track, m_map, i0, i1))"},
{"lineNum":"  896","line":"    return m_map.reference(i0, i1);"},
{"lineNum":"  897","line":"  }"},
{"lineNum":"  898","line":""},
{"lineNum":"  899","line":"  template <typename I0, typename I1>"},
{"lineNum":"  900","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":"  901","line":"      typename std::enable_if<(Kokkos::Impl::are_integral<I0, I1>::value &&"},
{"lineNum":"  902","line":"                               (2 == Rank) && is_default_map &&"},
{"lineNum":"  903","line":"                               is_layout_left && (traits::rank_dynamic == 0)),"},
{"lineNum":"  904","line":"                              reference_type>::type"},
{"lineNum":"  905","line":"      operator()(const I0& i0, const I1& i1) const {"},
{"lineNum":"  906","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY((m_track, m_map, i0, i1))"},
{"lineNum":"  907","line":"    return m_map.m_impl_handle[i0 + m_map.m_impl_offset.m_dim.N0 * i1];"},
{"lineNum":"  908","line":"  }"},
{"lineNum":"  909","line":""},
{"lineNum":"  910","line":"  template <typename I0, typename I1>"},
{"lineNum":"  911","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":"  912","line":"      typename std::enable_if<(Kokkos::Impl::are_integral<I0, I1>::value &&"},
{"lineNum":"  913","line":"                               (2 == Rank) && is_default_map &&"},
{"lineNum":"  914","line":"                               is_layout_left && (traits::rank_dynamic != 0)),"},
{"lineNum":"  915","line":"                              reference_type>::type"},
{"lineNum":"  916","line":"      operator()(const I0& i0, const I1& i1) const {"},
{"lineNum":"  917","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY((m_track, m_map, i0, i1))"},
{"lineNum":"  918","line":"    return m_map.m_impl_handle[i0 + m_map.m_impl_offset.m_stride * i1];","class":"lineNoCov","hits":"0","possible_hits":"1014",},
{"lineNum":"  919","line":"  }"},
{"lineNum":"  920","line":""},
{"lineNum":"  921","line":"  template <typename I0, typename I1>"},
{"lineNum":"  922","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":"  923","line":"      typename std::enable_if<(Kokkos::Impl::are_integral<I0, I1>::value &&"},
{"lineNum":"  924","line":"                               (2 == Rank) && is_default_map &&"},
{"lineNum":"  925","line":"                               is_layout_right && (traits::rank_dynamic == 0)),"},
{"lineNum":"  926","line":"                              reference_type>::type"},
{"lineNum":"  927","line":"      operator()(const I0& i0, const I1& i1) const {"},
{"lineNum":"  928","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY((m_track, m_map, i0, i1))"},
{"lineNum":"  929","line":"    return m_map.m_impl_handle[i1 + m_map.m_impl_offset.m_dim.N1 * i0];"},
{"lineNum":"  930","line":"  }"},
{"lineNum":"  931","line":""},
{"lineNum":"  932","line":"  template <typename I0, typename I1>"},
{"lineNum":"  933","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":"  934","line":"      typename std::enable_if<(Kokkos::Impl::are_integral<I0, I1>::value &&"},
{"lineNum":"  935","line":"                               (2 == Rank) && is_default_map &&"},
{"lineNum":"  936","line":"                               is_layout_right && (traits::rank_dynamic != 0)),"},
{"lineNum":"  937","line":"                              reference_type>::type"},
{"lineNum":"  938","line":"      operator()(const I0& i0, const I1& i1) const {"},
{"lineNum":"  939","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY((m_track, m_map, i0, i1))"},
{"lineNum":"  940","line":"    return m_map.m_impl_handle[i1 + m_map.m_impl_offset.m_stride * i0];","class":"lineNoCov","hits":"0","possible_hits":"79",},
{"lineNum":"  941","line":"  }"},
{"lineNum":"  942","line":""},
{"lineNum":"  943","line":"  template <typename I0, typename I1>"},
{"lineNum":"  944","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":"  945","line":"      typename std::enable_if<(Kokkos::Impl::are_integral<I0, I1>::value &&"},
{"lineNum":"  946","line":"                               (2 == Rank) && is_default_map &&"},
{"lineNum":"  947","line":"                               is_layout_stride),"},
{"lineNum":"  948","line":"                              reference_type>::type"},
{"lineNum":"  949","line":"      operator()(const I0& i0, const I1& i1) const {"},
{"lineNum":"  950","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY((m_track, m_map, i0, i1))"},
{"lineNum":"  951","line":"    return m_map.m_impl_handle[i0 * m_map.m_impl_offset.m_stride.S0 +"},
{"lineNum":"  952","line":"                               i1 * m_map.m_impl_offset.m_stride.S1];"},
{"lineNum":"  953","line":"  }"},
{"lineNum":"  954","line":""},
{"lineNum":"  955","line":"  //------------------------------"},
{"lineNum":"  956","line":"  // Rank 3"},
{"lineNum":"  957","line":""},
{"lineNum":"  958","line":"  template <typename I0, typename I1, typename I2>"},
{"lineNum":"  959","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":"  960","line":"      typename std::enable_if<(Kokkos::Impl::are_integral<I0, I1, I2>::value &&"},
{"lineNum":"  961","line":"                               (3 == Rank) && is_default_map),"},
{"lineNum":"  962","line":"                              reference_type>::type"},
{"lineNum":"  963","line":"      operator()(const I0& i0, const I1& i1, const I2& i2) const {"},
{"lineNum":"  964","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY((m_track, m_map, i0, i1, i2))"},
{"lineNum":"  965","line":"    return m_map.m_impl_handle[m_map.m_impl_offset(i0, i1, i2)];"},
{"lineNum":"  966","line":"  }"},
{"lineNum":"  967","line":""},
{"lineNum":"  968","line":"  template <typename I0, typename I1, typename I2>"},
{"lineNum":"  969","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":"  970","line":"      typename std::enable_if<(Kokkos::Impl::are_integral<I0, I1, I2>::value &&"},
{"lineNum":"  971","line":"                               (3 == Rank) && !is_default_map),"},
{"lineNum":"  972","line":"                              reference_type>::type"},
{"lineNum":"  973","line":"      operator()(const I0& i0, const I1& i1, const I2& i2) const {"},
{"lineNum":"  974","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY((m_track, m_map, i0, i1, i2))"},
{"lineNum":"  975","line":"    return m_map.reference(i0, i1, i2);"},
{"lineNum":"  976","line":"  }"},
{"lineNum":"  977","line":""},
{"lineNum":"  978","line":"  //------------------------------"},
{"lineNum":"  979","line":"  // Rank 4"},
{"lineNum":"  980","line":""},
{"lineNum":"  981","line":"  template <typename I0, typename I1, typename I2, typename I3>"},
{"lineNum":"  982","line":"  KOKKOS_FORCEINLINE_FUNCTION typename std::enable_if<"},
{"lineNum":"  983","line":"      (Kokkos::Impl::are_integral<I0, I1, I2, I3>::value && (4 == Rank) &&"},
{"lineNum":"  984","line":"       is_default_map),"},
{"lineNum":"  985","line":"      reference_type>::type"},
{"lineNum":"  986","line":"  operator()(const I0& i0, const I1& i1, const I2& i2, const I3& i3) const {"},
{"lineNum":"  987","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY((m_track, m_map, i0, i1, i2, i3))"},
{"lineNum":"  988","line":"    return m_map.m_impl_handle[m_map.m_impl_offset(i0, i1, i2, i3)];"},
{"lineNum":"  989","line":"  }"},
{"lineNum":"  990","line":""},
{"lineNum":"  991","line":"  template <typename I0, typename I1, typename I2, typename I3>"},
{"lineNum":"  992","line":"  KOKKOS_FORCEINLINE_FUNCTION typename std::enable_if<"},
{"lineNum":"  993","line":"      (Kokkos::Impl::are_integral<I0, I1, I2, I3>::value && (4 == Rank) &&"},
{"lineNum":"  994","line":"       !is_default_map),"},
{"lineNum":"  995","line":"      reference_type>::type"},
{"lineNum":"  996","line":"  operator()(const I0& i0, const I1& i1, const I2& i2, const I3& i3) const {"},
{"lineNum":"  997","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY((m_track, m_map, i0, i1, i2, i3))"},
{"lineNum":"  998","line":"    return m_map.reference(i0, i1, i2, i3);"},
{"lineNum":"  999","line":"  }"},
{"lineNum":" 1000","line":""},
{"lineNum":" 1001","line":"  //------------------------------"},
{"lineNum":" 1002","line":"  // Rank 5"},
{"lineNum":" 1003","line":""},
{"lineNum":" 1004","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4>"},
{"lineNum":" 1005","line":"  KOKKOS_FORCEINLINE_FUNCTION typename std::enable_if<"},
{"lineNum":" 1006","line":"      (Kokkos::Impl::are_integral<I0, I1, I2, I3, I4>::value && (5 == Rank) &&"},
{"lineNum":" 1007","line":"       is_default_map),"},
{"lineNum":" 1008","line":"      reference_type>::type"},
{"lineNum":" 1009","line":"  operator()(const I0& i0, const I1& i1, const I2& i2, const I3& i3,"},
{"lineNum":" 1010","line":"             const I4& i4) const {"},
{"lineNum":" 1011","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY((m_track, m_map, i0, i1, i2, i3, i4))"},
{"lineNum":" 1012","line":"    return m_map.m_impl_handle[m_map.m_impl_offset(i0, i1, i2, i3, i4)];"},
{"lineNum":" 1013","line":"  }"},
{"lineNum":" 1014","line":""},
{"lineNum":" 1015","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4>"},
{"lineNum":" 1016","line":"  KOKKOS_FORCEINLINE_FUNCTION typename std::enable_if<"},
{"lineNum":" 1017","line":"      (Kokkos::Impl::are_integral<I0, I1, I2, I3, I4>::value && (5 == Rank) &&"},
{"lineNum":" 1018","line":"       !is_default_map),"},
{"lineNum":" 1019","line":"      reference_type>::type"},
{"lineNum":" 1020","line":"  operator()(const I0& i0, const I1& i1, const I2& i2, const I3& i3,"},
{"lineNum":" 1021","line":"             const I4& i4) const {"},
{"lineNum":" 1022","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY((m_track, m_map, i0, i1, i2, i3, i4))"},
{"lineNum":" 1023","line":"    return m_map.reference(i0, i1, i2, i3, i4);"},
{"lineNum":" 1024","line":"  }"},
{"lineNum":" 1025","line":""},
{"lineNum":" 1026","line":"  //------------------------------"},
{"lineNum":" 1027","line":"  // Rank 6"},
{"lineNum":" 1028","line":""},
{"lineNum":" 1029","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4,"},
{"lineNum":" 1030","line":"            typename I5>"},
{"lineNum":" 1031","line":"  KOKKOS_FORCEINLINE_FUNCTION typename std::enable_if<"},
{"lineNum":" 1032","line":"      (Kokkos::Impl::are_integral<I0, I1, I2, I3, I4, I5>::value &&"},
{"lineNum":" 1033","line":"       (6 == Rank) && is_default_map),"},
{"lineNum":" 1034","line":"      reference_type>::type"},
{"lineNum":" 1035","line":"  operator()(const I0& i0, const I1& i1, const I2& i2, const I3& i3,"},
{"lineNum":" 1036","line":"             const I4& i4, const I5& i5) const {"},
{"lineNum":" 1037","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY((m_track, m_map, i0, i1, i2, i3, i4, i5))"},
{"lineNum":" 1038","line":"    return m_map.m_impl_handle[m_map.m_impl_offset(i0, i1, i2, i3, i4, i5)];"},
{"lineNum":" 1039","line":"  }"},
{"lineNum":" 1040","line":""},
{"lineNum":" 1041","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4,"},
{"lineNum":" 1042","line":"            typename I5>"},
{"lineNum":" 1043","line":"  KOKKOS_FORCEINLINE_FUNCTION typename std::enable_if<"},
{"lineNum":" 1044","line":"      (Kokkos::Impl::are_integral<I0, I1, I2, I3, I4, I5>::value &&"},
{"lineNum":" 1045","line":"       (6 == Rank) && !is_default_map),"},
{"lineNum":" 1046","line":"      reference_type>::type"},
{"lineNum":" 1047","line":"  operator()(const I0& i0, const I1& i1, const I2& i2, const I3& i3,"},
{"lineNum":" 1048","line":"             const I4& i4, const I5& i5) const {"},
{"lineNum":" 1049","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY((m_track, m_map, i0, i1, i2, i3, i4, i5))"},
{"lineNum":" 1050","line":"    return m_map.reference(i0, i1, i2, i3, i4, i5);"},
{"lineNum":" 1051","line":"  }"},
{"lineNum":" 1052","line":""},
{"lineNum":" 1053","line":"  //------------------------------"},
{"lineNum":" 1054","line":"  // Rank 7"},
{"lineNum":" 1055","line":""},
{"lineNum":" 1056","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4,"},
{"lineNum":" 1057","line":"            typename I5, typename I6>"},
{"lineNum":" 1058","line":"  KOKKOS_FORCEINLINE_FUNCTION typename std::enable_if<"},
{"lineNum":" 1059","line":"      (Kokkos::Impl::are_integral<I0, I1, I2, I3, I4, I5, I6>::value &&"},
{"lineNum":" 1060","line":"       (7 == Rank) && is_default_map),"},
{"lineNum":" 1061","line":"      reference_type>::type"},
{"lineNum":" 1062","line":"  operator()(const I0& i0, const I1& i1, const I2& i2, const I3& i3,"},
{"lineNum":" 1063","line":"             const I4& i4, const I5& i5, const I6& i6) const {"},
{"lineNum":" 1064","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY("},
{"lineNum":" 1065","line":"        (m_track, m_map, i0, i1, i2, i3, i4, i5, i6))"},
{"lineNum":" 1066","line":"    return m_map.m_impl_handle[m_map.m_impl_offset(i0, i1, i2, i3, i4, i5, i6)];"},
{"lineNum":" 1067","line":"  }"},
{"lineNum":" 1068","line":""},
{"lineNum":" 1069","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4,"},
{"lineNum":" 1070","line":"            typename I5, typename I6>"},
{"lineNum":" 1071","line":"  KOKKOS_FORCEINLINE_FUNCTION typename std::enable_if<"},
{"lineNum":" 1072","line":"      (Kokkos::Impl::are_integral<I0, I1, I2, I3, I4, I5, I6>::value &&"},
{"lineNum":" 1073","line":"       (7 == Rank) && !is_default_map),"},
{"lineNum":" 1074","line":"      reference_type>::type"},
{"lineNum":" 1075","line":"  operator()(const I0& i0, const I1& i1, const I2& i2, const I3& i3,"},
{"lineNum":" 1076","line":"             const I4& i4, const I5& i5, const I6& i6) const {"},
{"lineNum":" 1077","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY("},
{"lineNum":" 1078","line":"        (m_track, m_map, i0, i1, i2, i3, i4, i5, i6))"},
{"lineNum":" 1079","line":"    return m_map.reference(i0, i1, i2, i3, i4, i5, i6);"},
{"lineNum":" 1080","line":"  }"},
{"lineNum":" 1081","line":""},
{"lineNum":" 1082","line":"  //------------------------------"},
{"lineNum":" 1083","line":"  // Rank 8"},
{"lineNum":" 1084","line":""},
{"lineNum":" 1085","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4,"},
{"lineNum":" 1086","line":"            typename I5, typename I6, typename I7>"},
{"lineNum":" 1087","line":"  KOKKOS_FORCEINLINE_FUNCTION typename std::enable_if<"},
{"lineNum":" 1088","line":"      (Kokkos::Impl::are_integral<I0, I1, I2, I3, I4, I5, I6, I7>::value &&"},
{"lineNum":" 1089","line":"       (8 == Rank) && is_default_map),"},
{"lineNum":" 1090","line":"      reference_type>::type"},
{"lineNum":" 1091","line":"  operator()(const I0& i0, const I1& i1, const I2& i2, const I3& i3,"},
{"lineNum":" 1092","line":"             const I4& i4, const I5& i5, const I6& i6, const I7& i7) const {"},
{"lineNum":" 1093","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY("},
{"lineNum":" 1094","line":"        (m_track, m_map, i0, i1, i2, i3, i4, i5, i6, i7))"},
{"lineNum":" 1095","line":"    return m_map"},
{"lineNum":" 1096","line":"        .m_impl_handle[m_map.m_impl_offset(i0, i1, i2, i3, i4, i5, i6, i7)];"},
{"lineNum":" 1097","line":"  }"},
{"lineNum":" 1098","line":""},
{"lineNum":" 1099","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4,"},
{"lineNum":" 1100","line":"            typename I5, typename I6, typename I7>"},
{"lineNum":" 1101","line":"  KOKKOS_FORCEINLINE_FUNCTION typename std::enable_if<"},
{"lineNum":" 1102","line":"      (Kokkos::Impl::are_integral<I0, I1, I2, I3, I4, I5, I6, I7>::value &&"},
{"lineNum":" 1103","line":"       (8 == Rank) && !is_default_map),"},
{"lineNum":" 1104","line":"      reference_type>::type"},
{"lineNum":" 1105","line":"  operator()(const I0& i0, const I1& i1, const I2& i2, const I3& i3,"},
{"lineNum":" 1106","line":"             const I4& i4, const I5& i5, const I6& i6, const I7& i7) const {"},
{"lineNum":" 1107","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY("},
{"lineNum":" 1108","line":"        (m_track, m_map, i0, i1, i2, i3, i4, i5, i6, i7))"},
{"lineNum":" 1109","line":"    return m_map.reference(i0, i1, i2, i3, i4, i5, i6, i7);"},
{"lineNum":" 1110","line":"  }"},
{"lineNum":" 1111","line":""},
{"lineNum":" 1112","line":"  template <class... Args>"},
{"lineNum":" 1113","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":" 1114","line":"      typename std::enable_if<(Kokkos::Impl::are_integral<Args...>::value &&"},
{"lineNum":" 1115","line":"                               (0 == Rank)),"},
{"lineNum":" 1116","line":"                              reference_type>::type"},
{"lineNum":" 1117","line":"      access(Args... KOKKOS_IMPL_SINK(args)) const {"},
{"lineNum":" 1118","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY("},
{"lineNum":" 1119","line":"        KOKKOS_IMPL_SINK((m_track, m_map, args...)))"},
{"lineNum":" 1120","line":"    return m_map.reference();"},
{"lineNum":" 1121","line":"  }"},
{"lineNum":" 1122","line":""},
{"lineNum":" 1123","line":"  template <typename I0, class... Args>"},
{"lineNum":" 1124","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":" 1125","line":"      typename std::enable_if<(Kokkos::Impl::are_integral<I0, Args...>::value &&"},
{"lineNum":" 1126","line":"                               (1 == Rank) && !is_default_map),"},
{"lineNum":" 1127","line":"                              reference_type>::type"},
{"lineNum":" 1128","line":"      access(const I0& i0, Args... KOKKOS_IMPL_SINK(args)) const {"},
{"lineNum":" 1129","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY("},
{"lineNum":" 1130","line":"        KOKKOS_IMPL_SINK((m_track, m_map, i0, args...)))"},
{"lineNum":" 1131","line":"    return m_map.reference(i0);"},
{"lineNum":" 1132","line":"  }"},
{"lineNum":" 1133","line":""},
{"lineNum":" 1134","line":"  template <typename I0, class... Args>"},
{"lineNum":" 1135","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":" 1136","line":"      typename std::enable_if<(Kokkos::Impl::are_integral<I0, Args...>::value &&"},
{"lineNum":" 1137","line":"                               (1 == Rank) && is_default_map &&"},
{"lineNum":" 1138","line":"                               !is_layout_stride),"},
{"lineNum":" 1139","line":"                              reference_type>::type"},
{"lineNum":" 1140","line":"      access(const I0& i0, Args... KOKKOS_IMPL_SINK(args)) const {"},
{"lineNum":" 1141","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY("},
{"lineNum":" 1142","line":"        KOKKOS_IMPL_SINK((m_track, m_map, i0, args...)))"},
{"lineNum":" 1143","line":"    return m_map.m_impl_handle[i0];"},
{"lineNum":" 1144","line":"  }"},
{"lineNum":" 1145","line":""},
{"lineNum":" 1146","line":"  template <typename I0, class... Args>"},
{"lineNum":" 1147","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":" 1148","line":"      typename std::enable_if<(Kokkos::Impl::are_integral<I0, Args...>::value &&"},
{"lineNum":" 1149","line":"                               (1 == Rank) && is_default_map &&"},
{"lineNum":" 1150","line":"                               is_layout_stride),"},
{"lineNum":" 1151","line":"                              reference_type>::type"},
{"lineNum":" 1152","line":"      access(const I0& i0, Args... KOKKOS_IMPL_SINK(args)) const {"},
{"lineNum":" 1153","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY("},
{"lineNum":" 1154","line":"        KOKKOS_IMPL_SINK((m_track, m_map, i0, args...)))"},
{"lineNum":" 1155","line":"    return m_map.m_impl_handle[m_map.m_impl_offset.m_stride.S0 * i0];"},
{"lineNum":" 1156","line":"  }"},
{"lineNum":" 1157","line":""},
{"lineNum":" 1158","line":"  template <typename I0, typename I1, class... Args>"},
{"lineNum":" 1159","line":"  KOKKOS_FORCEINLINE_FUNCTION typename std::enable_if<"},
{"lineNum":" 1160","line":"      (Kokkos::Impl::are_integral<I0, I1, Args...>::value && (2 == Rank) &&"},
{"lineNum":" 1161","line":"       !is_default_map),"},
{"lineNum":" 1162","line":"      reference_type>::type"},
{"lineNum":" 1163","line":"  access(const I0& i0, const I1& i1, Args... KOKKOS_IMPL_SINK(args)) const {"},
{"lineNum":" 1164","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY("},
{"lineNum":" 1165","line":"        KOKKOS_IMPL_SINK((m_track, m_map, i0, i1, args...)))"},
{"lineNum":" 1166","line":"    return m_map.reference(i0, i1);"},
{"lineNum":" 1167","line":"  }"},
{"lineNum":" 1168","line":""},
{"lineNum":" 1169","line":"  template <typename I0, typename I1, class... Args>"},
{"lineNum":" 1170","line":"  KOKKOS_FORCEINLINE_FUNCTION typename std::enable_if<"},
{"lineNum":" 1171","line":"      (Kokkos::Impl::are_integral<I0, I1, Args...>::value && (2 == Rank) &&"},
{"lineNum":" 1172","line":"       is_default_map && is_layout_left && (traits::rank_dynamic == 0)),"},
{"lineNum":" 1173","line":"      reference_type>::type"},
{"lineNum":" 1174","line":"  access(const I0& i0, const I1& i1, Args... KOKKOS_IMPL_SINK(args)) const {"},
{"lineNum":" 1175","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY("},
{"lineNum":" 1176","line":"        KOKKOS_IMPL_SINK((m_track, m_map, i0, i1, args...)))"},
{"lineNum":" 1177","line":"    return m_map.m_impl_handle[i0 + m_map.m_impl_offset.m_dim.N0 * i1];"},
{"lineNum":" 1178","line":"  }"},
{"lineNum":" 1179","line":""},
{"lineNum":" 1180","line":"  template <typename I0, typename I1, class... Args>"},
{"lineNum":" 1181","line":"  KOKKOS_FORCEINLINE_FUNCTION typename std::enable_if<"},
{"lineNum":" 1182","line":"      (Kokkos::Impl::are_integral<I0, I1, Args...>::value && (2 == Rank) &&"},
{"lineNum":" 1183","line":"       is_default_map && is_layout_left && (traits::rank_dynamic != 0)),"},
{"lineNum":" 1184","line":"      reference_type>::type"},
{"lineNum":" 1185","line":"  access(const I0& i0, const I1& i1, Args... KOKKOS_IMPL_SINK(args)) const {"},
{"lineNum":" 1186","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY("},
{"lineNum":" 1187","line":"        KOKKOS_IMPL_SINK((m_track, m_map, i0, i1, args...)))"},
{"lineNum":" 1188","line":"    return m_map.m_impl_handle[i0 + m_map.m_impl_offset.m_stride * i1];"},
{"lineNum":" 1189","line":"  }"},
{"lineNum":" 1190","line":""},
{"lineNum":" 1191","line":"  template <typename I0, typename I1, class... Args>"},
{"lineNum":" 1192","line":"  KOKKOS_FORCEINLINE_FUNCTION typename std::enable_if<"},
{"lineNum":" 1193","line":"      (Kokkos::Impl::are_integral<I0, I1, Args...>::value && (2 == Rank) &&"},
{"lineNum":" 1194","line":"       is_default_map && is_layout_right && (traits::rank_dynamic == 0)),"},
{"lineNum":" 1195","line":"      reference_type>::type"},
{"lineNum":" 1196","line":"  access(const I0& i0, const I1& i1, Args... KOKKOS_IMPL_SINK(args)) const {"},
{"lineNum":" 1197","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY("},
{"lineNum":" 1198","line":"        KOKKOS_IMPL_SINK((m_track, m_map, i0, i1, args...)))"},
{"lineNum":" 1199","line":"    return m_map.m_impl_handle[i1 + m_map.m_impl_offset.m_dim.N1 * i0];"},
{"lineNum":" 1200","line":"  }"},
{"lineNum":" 1201","line":""},
{"lineNum":" 1202","line":"  template <typename I0, typename I1, class... Args>"},
{"lineNum":" 1203","line":"  KOKKOS_FORCEINLINE_FUNCTION typename std::enable_if<"},
{"lineNum":" 1204","line":"      (Kokkos::Impl::are_integral<I0, I1, Args...>::value && (2 == Rank) &&"},
{"lineNum":" 1205","line":"       is_default_map && is_layout_right && (traits::rank_dynamic != 0)),"},
{"lineNum":" 1206","line":"      reference_type>::type"},
{"lineNum":" 1207","line":"  access(const I0& i0, const I1& i1, Args... KOKKOS_IMPL_SINK(args)) const {"},
{"lineNum":" 1208","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY("},
{"lineNum":" 1209","line":"        KOKKOS_IMPL_SINK((m_track, m_map, i0, i1, args...)))"},
{"lineNum":" 1210","line":"    return m_map.m_impl_handle[i1 + m_map.m_impl_offset.m_stride * i0];"},
{"lineNum":" 1211","line":"  }"},
{"lineNum":" 1212","line":""},
{"lineNum":" 1213","line":"  template <typename I0, typename I1, class... Args>"},
{"lineNum":" 1214","line":"  KOKKOS_FORCEINLINE_FUNCTION typename std::enable_if<"},
{"lineNum":" 1215","line":"      (Kokkos::Impl::are_integral<I0, I1, Args...>::value && (2 == Rank) &&"},
{"lineNum":" 1216","line":"       is_default_map && is_layout_stride),"},
{"lineNum":" 1217","line":"      reference_type>::type"},
{"lineNum":" 1218","line":"  access(const I0& i0, const I1& i1, Args... KOKKOS_IMPL_SINK(args)) const {"},
{"lineNum":" 1219","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY("},
{"lineNum":" 1220","line":"        KOKKOS_IMPL_SINK((m_track, m_map, i0, i1, args...)))"},
{"lineNum":" 1221","line":"    return m_map.m_impl_handle[i0 * m_map.m_impl_offset.m_stride.S0 +"},
{"lineNum":" 1222","line":"                               i1 * m_map.m_impl_offset.m_stride.S1];"},
{"lineNum":" 1223","line":"  }"},
{"lineNum":" 1224","line":""},
{"lineNum":" 1225","line":"  //------------------------------"},
{"lineNum":" 1226","line":"  // Rank 3"},
{"lineNum":" 1227","line":""},
{"lineNum":" 1228","line":"  template <typename I0, typename I1, typename I2, class... Args>"},
{"lineNum":" 1229","line":"  KOKKOS_FORCEINLINE_FUNCTION typename std::enable_if<"},
{"lineNum":" 1230","line":"      (Kokkos::Impl::are_integral<I0, I1, I2, Args...>::value && (3 == Rank) &&"},
{"lineNum":" 1231","line":"       is_default_map),"},
{"lineNum":" 1232","line":"      reference_type>::type"},
{"lineNum":" 1233","line":"  access(const I0& i0, const I1& i1, const I2& i2,"},
{"lineNum":" 1234","line":"         Args... KOKKOS_IMPL_SINK(args)) const {"},
{"lineNum":" 1235","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY("},
{"lineNum":" 1236","line":"        KOKKOS_IMPL_SINK((m_track, m_map, i0, i1, i2, args...)))"},
{"lineNum":" 1237","line":"    return m_map.m_impl_handle[m_map.m_impl_offset(i0, i1, i2)];"},
{"lineNum":" 1238","line":"  }"},
{"lineNum":" 1239","line":""},
{"lineNum":" 1240","line":"  template <typename I0, typename I1, typename I2, class... Args>"},
{"lineNum":" 1241","line":"  KOKKOS_FORCEINLINE_FUNCTION typename std::enable_if<"},
{"lineNum":" 1242","line":"      (Kokkos::Impl::are_integral<I0, I1, I2, Args...>::value && (3 == Rank) &&"},
{"lineNum":" 1243","line":"       !is_default_map),"},
{"lineNum":" 1244","line":"      reference_type>::type"},
{"lineNum":" 1245","line":"  access(const I0& i0, const I1& i1, const I2& i2,"},
{"lineNum":" 1246","line":"         Args... KOKKOS_IMPL_SINK(args)) const {"},
{"lineNum":" 1247","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY("},
{"lineNum":" 1248","line":"        KOKKOS_IMPL_SINK((m_track, m_map, i0, i1, i2, args...)))"},
{"lineNum":" 1249","line":"    return m_map.reference(i0, i1, i2);"},
{"lineNum":" 1250","line":"  }"},
{"lineNum":" 1251","line":""},
{"lineNum":" 1252","line":"  //------------------------------"},
{"lineNum":" 1253","line":"  // Rank 4"},
{"lineNum":" 1254","line":""},
{"lineNum":" 1255","line":"  template <typename I0, typename I1, typename I2, typename I3, class... Args>"},
{"lineNum":" 1256","line":"  KOKKOS_FORCEINLINE_FUNCTION typename std::enable_if<"},
{"lineNum":" 1257","line":"      (Kokkos::Impl::are_integral<I0, I1, I2, I3, Args...>::value &&"},
{"lineNum":" 1258","line":"       (4 == Rank) && is_default_map),"},
{"lineNum":" 1259","line":"      reference_type>::type"},
{"lineNum":" 1260","line":"  access(const I0& i0, const I1& i1, const I2& i2, const I3& i3,"},
{"lineNum":" 1261","line":"         Args... KOKKOS_IMPL_SINK(args)) const {"},
{"lineNum":" 1262","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY("},
{"lineNum":" 1263","line":"        KOKKOS_IMPL_SINK((m_track, m_map, i0, i1, i2, i3, args...)))"},
{"lineNum":" 1264","line":"    return m_map.m_impl_handle[m_map.m_impl_offset(i0, i1, i2, i3)];"},
{"lineNum":" 1265","line":"  }"},
{"lineNum":" 1266","line":""},
{"lineNum":" 1267","line":"  template <typename I0, typename I1, typename I2, typename I3, class... Args>"},
{"lineNum":" 1268","line":"  KOKKOS_FORCEINLINE_FUNCTION typename std::enable_if<"},
{"lineNum":" 1269","line":"      (Kokkos::Impl::are_integral<I0, I1, I2, I3, Args...>::value &&"},
{"lineNum":" 1270","line":"       (4 == Rank) && !is_default_map),"},
{"lineNum":" 1271","line":"      reference_type>::type"},
{"lineNum":" 1272","line":"  access(const I0& i0, const I1& i1, const I2& i2, const I3& i3,"},
{"lineNum":" 1273","line":"         Args... KOKKOS_IMPL_SINK(args)) const {"},
{"lineNum":" 1274","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY("},
{"lineNum":" 1275","line":"        KOKKOS_IMPL_SINK((m_track, m_map, i0, i1, i2, i3, args...)))"},
{"lineNum":" 1276","line":"    return m_map.reference(i0, i1, i2, i3);"},
{"lineNum":" 1277","line":"  }"},
{"lineNum":" 1278","line":""},
{"lineNum":" 1279","line":"  //------------------------------"},
{"lineNum":" 1280","line":"  // Rank 5"},
{"lineNum":" 1281","line":""},
{"lineNum":" 1282","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4,"},
{"lineNum":" 1283","line":"            class... Args>"},
{"lineNum":" 1284","line":"  KOKKOS_FORCEINLINE_FUNCTION typename std::enable_if<"},
{"lineNum":" 1285","line":"      (Kokkos::Impl::are_integral<I0, I1, I2, I3, I4, Args...>::value &&"},
{"lineNum":" 1286","line":"       (5 == Rank) && is_default_map),"},
{"lineNum":" 1287","line":"      reference_type>::type"},
{"lineNum":" 1288","line":"  access(const I0& i0, const I1& i1, const I2& i2, const I3& i3, const I4& i4,"},
{"lineNum":" 1289","line":"         Args... KOKKOS_IMPL_SINK(args)) const {"},
{"lineNum":" 1290","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY("},
{"lineNum":" 1291","line":"        KOKKOS_IMPL_SINK((m_track, m_map, i0, i1, i2, i3, i4, args...)))"},
{"lineNum":" 1292","line":"    return m_map.m_impl_handle[m_map.m_impl_offset(i0, i1, i2, i3, i4)];"},
{"lineNum":" 1293","line":"  }"},
{"lineNum":" 1294","line":""},
{"lineNum":" 1295","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4,"},
{"lineNum":" 1296","line":"            class... Args>"},
{"lineNum":" 1297","line":"  KOKKOS_FORCEINLINE_FUNCTION typename std::enable_if<"},
{"lineNum":" 1298","line":"      (Kokkos::Impl::are_integral<I0, I1, I2, I3, I4, Args...>::value &&"},
{"lineNum":" 1299","line":"       (5 == Rank) && !is_default_map),"},
{"lineNum":" 1300","line":"      reference_type>::type"},
{"lineNum":" 1301","line":"  access(const I0& i0, const I1& i1, const I2& i2, const I3& i3, const I4& i4,"},
{"lineNum":" 1302","line":"         Args... KOKKOS_IMPL_SINK(args)) const {"},
{"lineNum":" 1303","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY("},
{"lineNum":" 1304","line":"        KOKKOS_IMPL_SINK((m_track, m_map, i0, i1, i2, i3, i4, args...)))"},
{"lineNum":" 1305","line":"    return m_map.reference(i0, i1, i2, i3, i4);"},
{"lineNum":" 1306","line":"  }"},
{"lineNum":" 1307","line":""},
{"lineNum":" 1308","line":"  //------------------------------"},
{"lineNum":" 1309","line":"  // Rank 6"},
{"lineNum":" 1310","line":""},
{"lineNum":" 1311","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4,"},
{"lineNum":" 1312","line":"            typename I5, class... Args>"},
{"lineNum":" 1313","line":"  KOKKOS_FORCEINLINE_FUNCTION typename std::enable_if<"},
{"lineNum":" 1314","line":"      (Kokkos::Impl::are_integral<I0, I1, I2, I3, I4, I5, Args...>::value &&"},
{"lineNum":" 1315","line":"       (6 == Rank) && is_default_map),"},
{"lineNum":" 1316","line":"      reference_type>::type"},
{"lineNum":" 1317","line":"  access(const I0& i0, const I1& i1, const I2& i2, const I3& i3, const I4& i4,"},
{"lineNum":" 1318","line":"         const I5& i5, Args... KOKKOS_IMPL_SINK(args)) const {"},
{"lineNum":" 1319","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY("},
{"lineNum":" 1320","line":"        KOKKOS_IMPL_SINK((m_track, m_map, i0, i1, i2, i3, i4, i5, args...)))"},
{"lineNum":" 1321","line":"    return m_map.m_impl_handle[m_map.m_impl_offset(i0, i1, i2, i3, i4, i5)];"},
{"lineNum":" 1322","line":"  }"},
{"lineNum":" 1323","line":""},
{"lineNum":" 1324","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4,"},
{"lineNum":" 1325","line":"            typename I5, class... Args>"},
{"lineNum":" 1326","line":"  KOKKOS_FORCEINLINE_FUNCTION typename std::enable_if<"},
{"lineNum":" 1327","line":"      (Kokkos::Impl::are_integral<I0, I1, I2, I3, I4, I5, Args...>::value &&"},
{"lineNum":" 1328","line":"       (6 == Rank) && !is_default_map),"},
{"lineNum":" 1329","line":"      reference_type>::type"},
{"lineNum":" 1330","line":"  access(const I0& i0, const I1& i1, const I2& i2, const I3& i3, const I4& i4,"},
{"lineNum":" 1331","line":"         const I5& i5, Args... KOKKOS_IMPL_SINK(args)) const {"},
{"lineNum":" 1332","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY("},
{"lineNum":" 1333","line":"        KOKKOS_IMPL_SINK((m_track, m_map, i0, i1, i2, i3, i4, i5, args...)))"},
{"lineNum":" 1334","line":"    return m_map.reference(i0, i1, i2, i3, i4, i5);"},
{"lineNum":" 1335","line":"  }"},
{"lineNum":" 1336","line":""},
{"lineNum":" 1337","line":"  //------------------------------"},
{"lineNum":" 1338","line":"  // Rank 7"},
{"lineNum":" 1339","line":""},
{"lineNum":" 1340","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4,"},
{"lineNum":" 1341","line":"            typename I5, typename I6, class... Args>"},
{"lineNum":" 1342","line":"  KOKKOS_FORCEINLINE_FUNCTION typename std::enable_if<"},
{"lineNum":" 1343","line":"      (Kokkos::Impl::are_integral<I0, I1, I2, I3, I4, I5, I6, Args...>::value &&"},
{"lineNum":" 1344","line":"       (7 == Rank) && is_default_map),"},
{"lineNum":" 1345","line":"      reference_type>::type"},
{"lineNum":" 1346","line":"  access(const I0& i0, const I1& i1, const I2& i2, const I3& i3, const I4& i4,"},
{"lineNum":" 1347","line":"         const I5& i5, const I6& i6, Args... KOKKOS_IMPL_SINK(args)) const {"},
{"lineNum":" 1348","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY("},
{"lineNum":" 1349","line":"        KOKKOS_IMPL_SINK((m_track, m_map, i0, i1, i2, i3, i4, i5, i6, args...)))"},
{"lineNum":" 1350","line":"    return m_map.m_impl_handle[m_map.m_impl_offset(i0, i1, i2, i3, i4, i5, i6)];"},
{"lineNum":" 1351","line":"  }"},
{"lineNum":" 1352","line":""},
{"lineNum":" 1353","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4,"},
{"lineNum":" 1354","line":"            typename I5, typename I6, class... Args>"},
{"lineNum":" 1355","line":"  KOKKOS_FORCEINLINE_FUNCTION typename std::enable_if<"},
{"lineNum":" 1356","line":"      (Kokkos::Impl::are_integral<I0, I1, I2, I3, I4, I5, I6, Args...>::value &&"},
{"lineNum":" 1357","line":"       (7 == Rank) && !is_default_map),"},
{"lineNum":" 1358","line":"      reference_type>::type"},
{"lineNum":" 1359","line":"  access(const I0& i0, const I1& i1, const I2& i2, const I3& i3, const I4& i4,"},
{"lineNum":" 1360","line":"         const I5& i5, const I6& i6, Args... KOKKOS_IMPL_SINK(args)) const {"},
{"lineNum":" 1361","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY("},
{"lineNum":" 1362","line":"        KOKKOS_IMPL_SINK((m_track, m_map, i0, i1, i2, i3, i4, i5, i6, args...)))"},
{"lineNum":" 1363","line":"    return m_map.reference(i0, i1, i2, i3, i4, i5, i6);"},
{"lineNum":" 1364","line":"  }"},
{"lineNum":" 1365","line":""},
{"lineNum":" 1366","line":"  //------------------------------"},
{"lineNum":" 1367","line":"  // Rank 8"},
{"lineNum":" 1368","line":""},
{"lineNum":" 1369","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4,"},
{"lineNum":" 1370","line":"            typename I5, typename I6, typename I7, class... Args>"},
{"lineNum":" 1371","line":"  KOKKOS_FORCEINLINE_FUNCTION typename std::enable_if<"},
{"lineNum":" 1372","line":"      (Kokkos::Impl::are_integral<I0, I1, I2, I3, I4, I5, I6, I7,"},
{"lineNum":" 1373","line":"                                  Args...>::value &&"},
{"lineNum":" 1374","line":"       (8 == Rank) && is_default_map),"},
{"lineNum":" 1375","line":"      reference_type>::type"},
{"lineNum":" 1376","line":"  access(const I0& i0, const I1& i1, const I2& i2, const I3& i3, const I4& i4,"},
{"lineNum":" 1377","line":"         const I5& i5, const I6& i6, const I7& i7,"},
{"lineNum":" 1378","line":"         Args... KOKKOS_IMPL_SINK(args)) const {"},
{"lineNum":" 1379","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY(KOKKOS_IMPL_SINK("},
{"lineNum":" 1380","line":"        (m_track, m_map, i0, i1, i2, i3, i4, i5, i6, i7, args...)))"},
{"lineNum":" 1381","line":"    return m_map"},
{"lineNum":" 1382","line":"        .m_impl_handle[m_map.m_impl_offset(i0, i1, i2, i3, i4, i5, i6, i7)];"},
{"lineNum":" 1383","line":"  }"},
{"lineNum":" 1384","line":""},
{"lineNum":" 1385","line":"  template <typename I0, typename I1, typename I2, typename I3, typename I4,"},
{"lineNum":" 1386","line":"            typename I5, typename I6, typename I7, class... Args>"},
{"lineNum":" 1387","line":"  KOKKOS_FORCEINLINE_FUNCTION typename std::enable_if<"},
{"lineNum":" 1388","line":"      (Kokkos::Impl::are_integral<I0, I1, I2, I3, I4, I5, I6, I7,"},
{"lineNum":" 1389","line":"                                  Args...>::value &&"},
{"lineNum":" 1390","line":"       (8 == Rank) && !is_default_map),"},
{"lineNum":" 1391","line":"      reference_type>::type"},
{"lineNum":" 1392","line":"  access(const I0& i0, const I1& i1, const I2& i2, const I3& i3, const I4& i4,"},
{"lineNum":" 1393","line":"         const I5& i5, const I6& i6, const I7& i7,"},
{"lineNum":" 1394","line":"         Args... KOKKOS_IMPL_SINK(args)) const {"},
{"lineNum":" 1395","line":"    KOKKOS_IMPL_VIEW_OPERATOR_VERIFY(KOKKOS_IMPL_SINK("},
{"lineNum":" 1396","line":"        (m_track, m_map, i0, i1, i2, i3, i4, i5, i6, i7, args...)))"},
{"lineNum":" 1397","line":"    return m_map.reference(i0, i1, i2, i3, i4, i5, i6, i7);"},
{"lineNum":" 1398","line":"  }"},
{"lineNum":" 1399","line":""},
{"lineNum":" 1400","line":"#undef KOKKOS_IMPL_VIEW_OPERATOR_VERIFY"},
{"lineNum":" 1401","line":""},
{"lineNum":" 1402","line":"  //----------------------------------------"},
{"lineNum":" 1403","line":"  // Standard destructor, constructors, and assignment operators"},
{"lineNum":" 1404","line":""},
{"lineNum":" 1405","line":"  KOKKOS_DEFAULTED_FUNCTION"},
{"lineNum":" 1406","line":"  ~View() = default;","class":"lineNoCov","hits":"0","possible_hits":"117",},
{"lineNum":" 1407","line":""},
{"lineNum":" 1408","line":"  KOKKOS_DEFAULTED_FUNCTION"},
{"lineNum":" 1409","line":"  View() = default;"},
{"lineNum":" 1410","line":""},
{"lineNum":" 1411","line":"  KOKKOS_DEFAULTED_FUNCTION"},
{"lineNum":" 1412","line":"  View(const View&) = default;","class":"lineNoCov","hits":"0","possible_hits":"613",},
{"lineNum":" 1413","line":""},
{"lineNum":" 1414","line":"  KOKKOS_DEFAULTED_FUNCTION"},
{"lineNum":" 1415","line":"  View(View&&) = default;","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":" 1416","line":""},
{"lineNum":" 1417","line":"  KOKKOS_DEFAULTED_FUNCTION"},
{"lineNum":" 1418","line":"  View& operator=(const View&) = default;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1419","line":""},
{"lineNum":" 1420","line":"  KOKKOS_DEFAULTED_FUNCTION"},
{"lineNum":" 1421","line":"  View& operator=(View&&) = default;","class":"lineNoCov","hits":"0","possible_hits":"106",},
{"lineNum":" 1422","line":""},
{"lineNum":" 1423","line":"  //----------------------------------------"},
{"lineNum":" 1424","line":"  // Compatible view copy constructor and assignment"},
{"lineNum":" 1425","line":"  // may assign unmanaged from managed."},
{"lineNum":" 1426","line":""},
{"lineNum":" 1427","line":"  template <class RT, class... RP>"},
{"lineNum":" 1428","line":"  KOKKOS_INLINE_FUNCTION View("},
{"lineNum":" 1429","line":"      const View<RT, RP...>& rhs,"},
{"lineNum":" 1430","line":"      typename std::enable_if<Kokkos::Impl::ViewMapping<"},
{"lineNum":" 1431","line":"          traits, typename View<RT, RP...>::traits,"},
{"lineNum":" 1432","line":"          typename traits::specialize>::is_assignable_data_type>::type* ="},
{"lineNum":" 1433","line":"          nullptr)"},
{"lineNum":" 1434","line":"      : m_track(rhs), m_map() {"},
{"lineNum":" 1435","line":"    using SrcTraits = typename View<RT, RP...>::traits;"},
{"lineNum":" 1436","line":"    using Mapping   = Kokkos::Impl::ViewMapping<traits, SrcTraits,"},
{"lineNum":" 1437","line":"                                              typename traits::specialize>;"},
{"lineNum":" 1438","line":"    static_assert(Mapping::is_assignable,"},
{"lineNum":" 1439","line":"                  \"Incompatible View copy construction\");"},
{"lineNum":" 1440","line":"    Mapping::assign(m_map, rhs.m_map, rhs.m_track.m_tracker);","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1441","line":"  }"},
{"lineNum":" 1442","line":""},
{"lineNum":" 1443","line":"  template <class RT, class... RP>"},
{"lineNum":" 1444","line":"  KOKKOS_INLINE_FUNCTION typename std::enable_if<"},
{"lineNum":" 1445","line":"      Kokkos::Impl::ViewMapping<"},
{"lineNum":" 1446","line":"          traits, typename View<RT, RP...>::traits,"},
{"lineNum":" 1447","line":"          typename traits::specialize>::is_assignable_data_type,"},
{"lineNum":" 1448","line":"      View>::type&"},
{"lineNum":" 1449","line":"  operator=(const View<RT, RP...>& rhs) {"},
{"lineNum":" 1450","line":"    using SrcTraits = typename View<RT, RP...>::traits;"},
{"lineNum":" 1451","line":"    using Mapping   = Kokkos::Impl::ViewMapping<traits, SrcTraits,"},
{"lineNum":" 1452","line":"                                              typename traits::specialize>;"},
{"lineNum":" 1453","line":"    static_assert(Mapping::is_assignable, \"Incompatible View copy assignment\");"},
{"lineNum":" 1454","line":"    Mapping::assign(m_map, rhs.m_map, rhs.m_track.m_tracker);"},
{"lineNum":" 1455","line":"    m_track.assign(rhs);"},
{"lineNum":" 1456","line":"    return *this;"},
{"lineNum":" 1457","line":"  }"},
{"lineNum":" 1458","line":""},
{"lineNum":" 1459","line":"  //----------------------------------------"},
{"lineNum":" 1460","line":"  // Compatible subview constructor"},
{"lineNum":" 1461","line":"  // may assign unmanaged from managed."},
{"lineNum":" 1462","line":""},
{"lineNum":" 1463","line":"  template <class RT, class... RP, class Arg0, class... Args>"},
{"lineNum":" 1464","line":"  KOKKOS_INLINE_FUNCTION View(const View<RT, RP...>& src_view, const Arg0 arg0,"},
{"lineNum":" 1465","line":"                              Args... args)"},
{"lineNum":" 1466","line":"      : m_track(src_view), m_map() {"},
{"lineNum":" 1467","line":"    using SrcType = View<RT, RP...>;"},
{"lineNum":" 1468","line":""},
{"lineNum":" 1469","line":"    using Mapping = Kokkos::Impl::ViewMapping<void, typename SrcType::traits,"},
{"lineNum":" 1470","line":"                                              Arg0, Args...>;"},
{"lineNum":" 1471","line":""},
{"lineNum":" 1472","line":"    using DstType = typename Mapping::type;"},
{"lineNum":" 1473","line":""},
{"lineNum":" 1474","line":"    static_assert("},
{"lineNum":" 1475","line":"        Kokkos::Impl::ViewMapping<traits, typename DstType::traits,"},
{"lineNum":" 1476","line":"                                  typename traits::specialize>::is_assignable,"},
{"lineNum":" 1477","line":"        \"Subview construction requires compatible view and subview arguments\");"},
{"lineNum":" 1478","line":""},
{"lineNum":" 1479","line":"    Mapping::assign(m_map, src_view.m_map, arg0, args...);"},
{"lineNum":" 1480","line":"  }"},
{"lineNum":" 1481","line":""},
{"lineNum":" 1482","line":"  //----------------------------------------"},
{"lineNum":" 1483","line":"  // Allocation tracking properties"},
{"lineNum":" 1484","line":""},
{"lineNum":" 1485","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1486","line":"  int use_count() const { return m_track.m_tracker.use_count(); }"},
{"lineNum":" 1487","line":""},
{"lineNum":" 1488","line":"  inline const std::string label() const {"},
{"lineNum":" 1489","line":"    return m_track.m_tracker"},
{"lineNum":" 1490","line":"        .template get_label<typename traits::memory_space>();"},
{"lineNum":" 1491","line":"  }"},
{"lineNum":" 1492","line":""},
{"lineNum":" 1493","line":"  //----------------------------------------"},
{"lineNum":" 1494","line":"  // Allocation according to allocation properties and array layout"},
{"lineNum":" 1495","line":""},
{"lineNum":" 1496","line":"  template <class... P>"},
{"lineNum":" 1497","line":"  explicit inline View("},
{"lineNum":" 1498","line":"      const Impl::ViewCtorProp<P...>& arg_prop,"},
{"lineNum":" 1499","line":"      typename std::enable_if<!Impl::ViewCtorProp<P...>::has_pointer,"},
{"lineNum":" 1500","line":"                              typename traits::array_layout>::type const&"},
{"lineNum":" 1501","line":"          arg_layout)"},
{"lineNum":" 1502","line":"      : m_track(), m_map() {","class":"lineNoCov","hits":"0","possible_hits":"24",},
{"lineNum":" 1503","line":"    // Append layout and spaces if not input"},
{"lineNum":" 1504","line":"    using alloc_prop_input = Impl::ViewCtorProp<P...>;"},
{"lineNum":" 1505","line":""},
{"lineNum":" 1506","line":"    // use \'std::integral_constant<unsigned,I>\' for non-types"},
{"lineNum":" 1507","line":"    // to avoid duplicate class error."},
{"lineNum":" 1508","line":"    using alloc_prop = Impl::ViewCtorProp<"},
{"lineNum":" 1509","line":"        P...,"},
{"lineNum":" 1510","line":"        typename std::conditional<alloc_prop_input::has_label,"},
{"lineNum":" 1511","line":"                                  std::integral_constant<unsigned int, 0>,"},
{"lineNum":" 1512","line":"                                  typename std::string>::type,"},
{"lineNum":" 1513","line":"        typename std::conditional<"},
{"lineNum":" 1514","line":"            alloc_prop_input::has_memory_space,"},
{"lineNum":" 1515","line":"            std::integral_constant<unsigned int, 1>,"},
{"lineNum":" 1516","line":"            typename traits::device_type::memory_space>::type,"},
{"lineNum":" 1517","line":"        typename std::conditional<"},
{"lineNum":" 1518","line":"            alloc_prop_input::has_execution_space,"},
{"lineNum":" 1519","line":"            std::integral_constant<unsigned int, 2>,"},
{"lineNum":" 1520","line":"            typename traits::device_type::execution_space>::type>;"},
{"lineNum":" 1521","line":""},
{"lineNum":" 1522","line":"    static_assert(traits::is_managed,"},
{"lineNum":" 1523","line":"                  \"View allocation constructor requires managed memory\");"},
{"lineNum":" 1524","line":""},
{"lineNum":" 1525","line":"    if (alloc_prop::initialize &&","class":"lineNoCov","hits":"0","possible_hits":"23",},
{"lineNum":" 1526","line":"        !alloc_prop::execution_space::impl_is_initialized()) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1527","line":"      // If initializing view data then"},
{"lineNum":" 1528","line":"      // the execution space must be initialized."},
{"lineNum":" 1529","line":"      Kokkos::Impl::throw_runtime_exception(","class":"lineNoCov","hits":"0","possible_hits":"25",},
{"lineNum":" 1530","line":"          \"Constructing View and initializing data with uninitialized \""},
{"lineNum":" 1531","line":"          \"execution space\");"},
{"lineNum":" 1532","line":"    }"},
{"lineNum":" 1533","line":""},
{"lineNum":" 1534","line":"    // Copy the input allocation properties with possibly defaulted properties"},
{"lineNum":" 1535","line":"    alloc_prop prop_copy(arg_prop);"},
{"lineNum":" 1536","line":""},
{"lineNum":" 1537","line":"//------------------------------------------------------------"},
{"lineNum":" 1538","line":"#if defined(KOKKOS_ENABLE_CUDA)"},
{"lineNum":" 1539","line":"    // If allocating in CudaUVMSpace must fence before and after"},
{"lineNum":" 1540","line":"    // the allocation to protect against possible concurrent access"},
{"lineNum":" 1541","line":"    // on the CPU and the GPU."},
{"lineNum":" 1542","line":"    // Fence using the trait\'s execution space (which will be Kokkos::Cuda)"},
{"lineNum":" 1543","line":"    // to avoid incomplete type errors from using Kokkos::Cuda directly."},
{"lineNum":" 1544","line":"    if (std::is_same<Kokkos::CudaUVMSpace,"},
{"lineNum":" 1545","line":"                     typename traits::device_type::memory_space>::value) {"},
{"lineNum":" 1546","line":"      typename traits::device_type::memory_space::execution_space().fence();"},
{"lineNum":" 1547","line":"    }"},
{"lineNum":" 1548","line":"#endif"},
{"lineNum":" 1549","line":"    //------------------------------------------------------------"},
{"lineNum":" 1550","line":""},
{"lineNum":" 1551","line":"    Kokkos::Impl::SharedAllocationRecord<>* record =","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1552","line":"        m_map.allocate_shared(prop_copy, arg_layout);","class":"lineNoCov","hits":"0","possible_hits":"23",},
{"lineNum":" 1553","line":""},
{"lineNum":" 1554","line":"//------------------------------------------------------------"},
{"lineNum":" 1555","line":"#if defined(KOKKOS_ENABLE_CUDA)"},
{"lineNum":" 1556","line":"    if (std::is_same<Kokkos::CudaUVMSpace,"},
{"lineNum":" 1557","line":"                     typename traits::device_type::memory_space>::value) {"},
{"lineNum":" 1558","line":"      typename traits::device_type::memory_space::execution_space().fence();"},
{"lineNum":" 1559","line":"    }"},
{"lineNum":" 1560","line":"#endif"},
{"lineNum":" 1561","line":"    //------------------------------------------------------------"},
{"lineNum":" 1562","line":""},
{"lineNum":" 1563","line":"    // Setup and initialization complete, start tracking"},
{"lineNum":" 1564","line":"    m_track.m_tracker.assign_allocated_record_to_uninitialized(record);"},
{"lineNum":" 1565","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"50",},
{"lineNum":" 1566","line":""},
{"lineNum":" 1567","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1568","line":"  void assign_data(pointer_type arg_data) {"},
{"lineNum":" 1569","line":"    m_track.m_tracker.clear();"},
{"lineNum":" 1570","line":"    m_map.assign_data(arg_data);"},
{"lineNum":" 1571","line":"  }"},
{"lineNum":" 1572","line":""},
{"lineNum":" 1573","line":"  // Wrap memory according to properties and array layout"},
{"lineNum":" 1574","line":"  template <class... P>"},
{"lineNum":" 1575","line":"  explicit KOKKOS_INLINE_FUNCTION View("},
{"lineNum":" 1576","line":"      const Impl::ViewCtorProp<P...>& arg_prop,"},
{"lineNum":" 1577","line":"      typename std::enable_if<Impl::ViewCtorProp<P...>::has_pointer,"},
{"lineNum":" 1578","line":"                              typename traits::array_layout>::type const&"},
{"lineNum":" 1579","line":"          arg_layout)"},
{"lineNum":" 1580","line":"      : m_track()  // No memory tracking"},
{"lineNum":" 1581","line":"        ,"},
{"lineNum":" 1582","line":"        m_map(arg_prop, arg_layout) {"},
{"lineNum":" 1583","line":"    static_assert("},
{"lineNum":" 1584","line":"        std::is_same<pointer_type,"},
{"lineNum":" 1585","line":"                     typename Impl::ViewCtorProp<P...>::pointer_type>::value,"},
{"lineNum":" 1586","line":"        \"Constructing View to wrap user memory must supply matching pointer \""},
{"lineNum":" 1587","line":"        \"type\");"},
{"lineNum":" 1588","line":"  }"},
{"lineNum":" 1589","line":""},
{"lineNum":" 1590","line":"  // Simple dimension-only layout"},
{"lineNum":" 1591","line":"  template <class... P>"},
{"lineNum":" 1592","line":"  explicit inline View("},
{"lineNum":" 1593","line":"      const Impl::ViewCtorProp<P...>& arg_prop,"},
{"lineNum":" 1594","line":"      typename std::enable_if<!Impl::ViewCtorProp<P...>::has_pointer,"},
{"lineNum":" 1595","line":"                              size_t>::type const arg_N0 ="},
{"lineNum":" 1596","line":"          KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1597","line":"      const size_t arg_N1 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1598","line":"      const size_t arg_N2 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1599","line":"      const size_t arg_N3 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1600","line":"      const size_t arg_N4 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1601","line":"      const size_t arg_N5 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1602","line":"      const size_t arg_N6 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1603","line":"      const size_t arg_N7 = KOKKOS_IMPL_CTOR_DEFAULT_ARG)"},
{"lineNum":" 1604","line":"      : View(arg_prop,","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1605","line":"             typename traits::array_layout(arg_N0, arg_N1, arg_N2, arg_N3,"},
{"lineNum":" 1606","line":"                                           arg_N4, arg_N5, arg_N6, arg_N7)) {"},
{"lineNum":" 1607","line":"#ifdef KOKKOS_ENABLE_OPENMPTARGET"},
{"lineNum":" 1608","line":"    KOKKOS_IMPL_IF_ON_HOST"},
{"lineNum":" 1609","line":"    Impl::runtime_check_rank_host("},
{"lineNum":" 1610","line":"        traits::rank_dynamic,"},
{"lineNum":" 1611","line":"        std::is_same<typename traits::specialize, void>::value, arg_N0, arg_N1,"},
{"lineNum":" 1612","line":"        arg_N2, arg_N3, arg_N4, arg_N5, arg_N6, arg_N7, label());"},
{"lineNum":" 1613","line":"    else Impl::runtime_check_rank_device("},
{"lineNum":" 1614","line":"        traits::rank_dynamic,"},
{"lineNum":" 1615","line":"        std::is_same<typename traits::specialize, void>::value, arg_N0, arg_N1,"},
{"lineNum":" 1616","line":"        arg_N2, arg_N3, arg_N4, arg_N5, arg_N6, arg_N7);"},
{"lineNum":" 1617","line":"#elif defined(KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_HOST)"},
{"lineNum":" 1618","line":"    Impl::runtime_check_rank_host(","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1619","line":"        traits::rank_dynamic,"},
{"lineNum":" 1620","line":"        std::is_same<typename traits::specialize, void>::value, arg_N0, arg_N1,"},
{"lineNum":" 1621","line":"        arg_N2, arg_N3, arg_N4, arg_N5, arg_N6, arg_N7, label());"},
{"lineNum":" 1622","line":"#else"},
{"lineNum":" 1623","line":"    Impl::runtime_check_rank_device("},
{"lineNum":" 1624","line":"        traits::rank_dynamic,"},
{"lineNum":" 1625","line":"        std::is_same<typename traits::specialize, void>::value, arg_N0, arg_N1,"},
{"lineNum":" 1626","line":"        arg_N2, arg_N3, arg_N4, arg_N5, arg_N6, arg_N7);"},
{"lineNum":" 1627","line":""},
{"lineNum":" 1628","line":"#endif"},
{"lineNum":" 1629","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1630","line":""},
{"lineNum":" 1631","line":"  template <class... P>"},
{"lineNum":" 1632","line":"  explicit KOKKOS_INLINE_FUNCTION View("},
{"lineNum":" 1633","line":"      const Impl::ViewCtorProp<P...>& arg_prop,"},
{"lineNum":" 1634","line":"      typename std::enable_if<Impl::ViewCtorProp<P...>::has_pointer,"},
{"lineNum":" 1635","line":"                              size_t>::type const arg_N0 ="},
{"lineNum":" 1636","line":"          KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1637","line":"      const size_t arg_N1 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1638","line":"      const size_t arg_N2 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1639","line":"      const size_t arg_N3 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1640","line":"      const size_t arg_N4 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1641","line":"      const size_t arg_N5 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1642","line":"      const size_t arg_N6 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1643","line":"      const size_t arg_N7 = KOKKOS_IMPL_CTOR_DEFAULT_ARG)"},
{"lineNum":" 1644","line":"      : View(arg_prop,"},
{"lineNum":" 1645","line":"             typename traits::array_layout(arg_N0, arg_N1, arg_N2, arg_N3,"},
{"lineNum":" 1646","line":"                                           arg_N4, arg_N5, arg_N6, arg_N7)) {"},
{"lineNum":" 1647","line":"#ifdef KOKKOS_ENABLE_OPENMPTARGET"},
{"lineNum":" 1648","line":"    KOKKOS_IMPL_IF_ON_HOST"},
{"lineNum":" 1649","line":"    Impl::runtime_check_rank_host("},
{"lineNum":" 1650","line":"        traits::rank_dynamic,"},
{"lineNum":" 1651","line":"        std::is_same<typename traits::specialize, void>::value, arg_N0, arg_N1,"},
{"lineNum":" 1652","line":"        arg_N2, arg_N3, arg_N4, arg_N5, arg_N6, arg_N7, label());"},
{"lineNum":" 1653","line":"    else Impl::runtime_check_rank_device("},
{"lineNum":" 1654","line":"        traits::rank_dynamic,"},
{"lineNum":" 1655","line":"        std::is_same<typename traits::specialize, void>::value, arg_N0, arg_N1,"},
{"lineNum":" 1656","line":"        arg_N2, arg_N3, arg_N4, arg_N5, arg_N6, arg_N7);"},
{"lineNum":" 1657","line":"#elif defined(KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_HOST)"},
{"lineNum":" 1658","line":"    Impl::runtime_check_rank_host("},
{"lineNum":" 1659","line":"        traits::rank_dynamic,"},
{"lineNum":" 1660","line":"        std::is_same<typename traits::specialize, void>::value, arg_N0, arg_N1,"},
{"lineNum":" 1661","line":"        arg_N2, arg_N3, arg_N4, arg_N5, arg_N6, arg_N7, label());"},
{"lineNum":" 1662","line":"#else"},
{"lineNum":" 1663","line":"    Impl::runtime_check_rank_device("},
{"lineNum":" 1664","line":"        traits::rank_dynamic,"},
{"lineNum":" 1665","line":"        std::is_same<typename traits::specialize, void>::value, arg_N0, arg_N1,"},
{"lineNum":" 1666","line":"        arg_N2, arg_N3, arg_N4, arg_N5, arg_N6, arg_N7);"},
{"lineNum":" 1667","line":""},
{"lineNum":" 1668","line":"#endif"},
{"lineNum":" 1669","line":"  }"},
{"lineNum":" 1670","line":""},
{"lineNum":" 1671","line":"  // Allocate with label and layout"},
{"lineNum":" 1672","line":"  template <typename Label>"},
{"lineNum":" 1673","line":"  explicit inline View("},
{"lineNum":" 1674","line":"      const Label& arg_label,"},
{"lineNum":" 1675","line":"      typename std::enable_if<Kokkos::Impl::is_view_label<Label>::value,"},
{"lineNum":" 1676","line":"                              typename traits::array_layout>::type const&"},
{"lineNum":" 1677","line":"          arg_layout)"},
{"lineNum":" 1678","line":"      : View(Impl::ViewCtorProp<std::string>(arg_label), arg_layout) {}"},
{"lineNum":" 1679","line":""},
{"lineNum":" 1680","line":"  // Allocate label and layout, must disambiguate from subview constructor."},
{"lineNum":" 1681","line":"  template <typename Label>"},
{"lineNum":" 1682","line":"  explicit inline View("},
{"lineNum":" 1683","line":"      const Label& arg_label,"},
{"lineNum":" 1684","line":"      typename std::enable_if<Kokkos::Impl::is_view_label<Label>::value,"},
{"lineNum":" 1685","line":"                              const size_t>::type arg_N0 ="},
{"lineNum":" 1686","line":"          KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1687","line":"      const size_t arg_N1 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1688","line":"      const size_t arg_N2 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1689","line":"      const size_t arg_N3 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1690","line":"      const size_t arg_N4 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1691","line":"      const size_t arg_N5 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1692","line":"      const size_t arg_N6 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1693","line":"      const size_t arg_N7 = KOKKOS_IMPL_CTOR_DEFAULT_ARG)"},
{"lineNum":" 1694","line":"      : View(Impl::ViewCtorProp<std::string>(arg_label),","class":"lineNoCov","hits":"0","possible_hits":"54",},
{"lineNum":" 1695","line":"             typename traits::array_layout(arg_N0, arg_N1, arg_N2, arg_N3,"},
{"lineNum":" 1696","line":"                                           arg_N4, arg_N5, arg_N6, arg_N7)) {","class":"lineNoCov","hits":"0","possible_hits":"44",},
{"lineNum":" 1697","line":"    static_assert(traits::array_layout::is_extent_constructible,"},
{"lineNum":" 1698","line":"                  \"Layout is not extent constructible. A layout object should \""},
{"lineNum":" 1699","line":"                  \"be passed too.\\n\");"},
{"lineNum":" 1700","line":""},
{"lineNum":" 1701","line":"#ifdef KOKKOS_ENABLE_OPENMPTARGET"},
{"lineNum":" 1702","line":"    KOKKOS_IMPL_IF_ON_HOST"},
{"lineNum":" 1703","line":"    Impl::runtime_check_rank_host("},
{"lineNum":" 1704","line":"        traits::rank_dynamic,"},
{"lineNum":" 1705","line":"        std::is_same<typename traits::specialize, void>::value, arg_N0, arg_N1,"},
{"lineNum":" 1706","line":"        arg_N2, arg_N3, arg_N4, arg_N5, arg_N6, arg_N7, label());"},
{"lineNum":" 1707","line":"    else Impl::runtime_check_rank_device("},
{"lineNum":" 1708","line":"        traits::rank_dynamic,"},
{"lineNum":" 1709","line":"        std::is_same<typename traits::specialize, void>::value, arg_N0, arg_N1,"},
{"lineNum":" 1710","line":"        arg_N2, arg_N3, arg_N4, arg_N5, arg_N6, arg_N7);"},
{"lineNum":" 1711","line":"#elif defined(KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_HOST)"},
{"lineNum":" 1712","line":"    Impl::runtime_check_rank_host(","class":"lineNoCov","hits":"0","possible_hits":"49",},
{"lineNum":" 1713","line":"        traits::rank_dynamic,"},
{"lineNum":" 1714","line":"        std::is_same<typename traits::specialize, void>::value, arg_N0, arg_N1,"},
{"lineNum":" 1715","line":"        arg_N2, arg_N3, arg_N4, arg_N5, arg_N6, arg_N7, label());"},
{"lineNum":" 1716","line":"#else"},
{"lineNum":" 1717","line":"    Impl::runtime_check_rank_device("},
{"lineNum":" 1718","line":"        traits::rank_dynamic,"},
{"lineNum":" 1719","line":"        std::is_same<typename traits::specialize, void>::value, arg_N0, arg_N1,"},
{"lineNum":" 1720","line":"        arg_N2, arg_N3, arg_N4, arg_N5, arg_N6, arg_N7);"},
{"lineNum":" 1721","line":""},
{"lineNum":" 1722","line":"#endif"},
{"lineNum":" 1723","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"85",},
{"lineNum":" 1724","line":""},
{"lineNum":" 1725","line":"  // Construct view from ViewTracker and map"},
{"lineNum":" 1726","line":"  // This should be the preferred method because future extensions may need to"},
{"lineNum":" 1727","line":"  // use the ViewTracker class."},
{"lineNum":" 1728","line":"  template <class Traits>"},
{"lineNum":" 1729","line":"  KOKKOS_INLINE_FUNCTION View("},
{"lineNum":" 1730","line":"      const view_tracker_type& track,"},
{"lineNum":" 1731","line":"      const Kokkos::Impl::ViewMapping<Traits, typename Traits::specialize>& map)"},
{"lineNum":" 1732","line":"      : m_track(track), m_map() {"},
{"lineNum":" 1733","line":"    using Mapping ="},
{"lineNum":" 1734","line":"        Kokkos::Impl::ViewMapping<traits, Traits, typename traits::specialize>;"},
{"lineNum":" 1735","line":"    static_assert(Mapping::is_assignable,"},
{"lineNum":" 1736","line":"                  \"Incompatible View copy construction\");"},
{"lineNum":" 1737","line":"    Mapping::assign(m_map, map, track.m_tracker);"},
{"lineNum":" 1738","line":"  }"},
{"lineNum":" 1739","line":""},
{"lineNum":" 1740","line":"  // Construct View from internal shared allocation tracker object and map"},
{"lineNum":" 1741","line":"  // This is here for backwards compatibility for classes that derive from"},
{"lineNum":" 1742","line":"  // Kokkos::View"},
{"lineNum":" 1743","line":"  template <class Traits>"},
{"lineNum":" 1744","line":"  KOKKOS_INLINE_FUNCTION View("},
{"lineNum":" 1745","line":"      const typename view_tracker_type::track_type& track,"},
{"lineNum":" 1746","line":"      const Kokkos::Impl::ViewMapping<Traits, typename Traits::specialize>& map)"},
{"lineNum":" 1747","line":"      : m_track(track), m_map() {"},
{"lineNum":" 1748","line":"    using Mapping ="},
{"lineNum":" 1749","line":"        Kokkos::Impl::ViewMapping<traits, Traits, typename traits::specialize>;"},
{"lineNum":" 1750","line":"    static_assert(Mapping::is_assignable,"},
{"lineNum":" 1751","line":"                  \"Incompatible View copy construction\");"},
{"lineNum":" 1752","line":"    Mapping::assign(m_map, map, track);"},
{"lineNum":" 1753","line":"  }"},
{"lineNum":" 1754","line":""},
{"lineNum":" 1755","line":"  //----------------------------------------"},
{"lineNum":" 1756","line":"  // Memory span required to wrap these dimensions."},
{"lineNum":" 1757","line":"  static constexpr size_t required_allocation_size("},
{"lineNum":" 1758","line":"      const size_t arg_N0 = 0, const size_t arg_N1 = 0, const size_t arg_N2 = 0,"},
{"lineNum":" 1759","line":"      const size_t arg_N3 = 0, const size_t arg_N4 = 0, const size_t arg_N5 = 0,"},
{"lineNum":" 1760","line":"      const size_t arg_N6 = 0, const size_t arg_N7 = 0) {"},
{"lineNum":" 1761","line":"    return map_type::memory_span(typename traits::array_layout("},
{"lineNum":" 1762","line":"        arg_N0, arg_N1, arg_N2, arg_N3, arg_N4, arg_N5, arg_N6, arg_N7));"},
{"lineNum":" 1763","line":"  }"},
{"lineNum":" 1764","line":""},
{"lineNum":" 1765","line":"  explicit KOKKOS_INLINE_FUNCTION View("},
{"lineNum":" 1766","line":"      pointer_type arg_ptr, const size_t arg_N0 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1767","line":"      const size_t arg_N1 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1768","line":"      const size_t arg_N2 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1769","line":"      const size_t arg_N3 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1770","line":"      const size_t arg_N4 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1771","line":"      const size_t arg_N5 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1772","line":"      const size_t arg_N6 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1773","line":"      const size_t arg_N7 = KOKKOS_IMPL_CTOR_DEFAULT_ARG)"},
{"lineNum":" 1774","line":"      : View(Impl::ViewCtorProp<pointer_type>(arg_ptr),"},
{"lineNum":" 1775","line":"             typename traits::array_layout(arg_N0, arg_N1, arg_N2, arg_N3,"},
{"lineNum":" 1776","line":"                                           arg_N4, arg_N5, arg_N6, arg_N7)) {"},
{"lineNum":" 1777","line":"#ifdef KOKKOS_ENABLE_OPENMPTARGET"},
{"lineNum":" 1778","line":"    KOKKOS_IMPL_IF_ON_HOST"},
{"lineNum":" 1779","line":"    Impl::runtime_check_rank_host("},
{"lineNum":" 1780","line":"        traits::rank_dynamic,"},
{"lineNum":" 1781","line":"        std::is_same<typename traits::specialize, void>::value, arg_N0, arg_N1,"},
{"lineNum":" 1782","line":"        arg_N2, arg_N3, arg_N4, arg_N5, arg_N6, arg_N7, label());"},
{"lineNum":" 1783","line":"    else Impl::runtime_check_rank_device("},
{"lineNum":" 1784","line":"        traits::rank_dynamic,"},
{"lineNum":" 1785","line":"        std::is_same<typename traits::specialize, void>::value, arg_N0, arg_N1,"},
{"lineNum":" 1786","line":"        arg_N2, arg_N3, arg_N4, arg_N5, arg_N6, arg_N7);"},
{"lineNum":" 1787","line":"#elif defined(KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_HOST)"},
{"lineNum":" 1788","line":"    Impl::runtime_check_rank_host(","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1789","line":"        traits::rank_dynamic,"},
{"lineNum":" 1790","line":"        std::is_same<typename traits::specialize, void>::value, arg_N0, arg_N1,"},
{"lineNum":" 1791","line":"        arg_N2, arg_N3, arg_N4, arg_N5, arg_N6, arg_N7, label());"},
{"lineNum":" 1792","line":"#else"},
{"lineNum":" 1793","line":"    Impl::runtime_check_rank_device("},
{"lineNum":" 1794","line":"        traits::rank_dynamic,"},
{"lineNum":" 1795","line":"        std::is_same<typename traits::specialize, void>::value, arg_N0, arg_N1,"},
{"lineNum":" 1796","line":"        arg_N2, arg_N3, arg_N4, arg_N5, arg_N6, arg_N7);"},
{"lineNum":" 1797","line":""},
{"lineNum":" 1798","line":"#endif"},
{"lineNum":" 1799","line":"  }"},
{"lineNum":" 1800","line":""},
{"lineNum":" 1801","line":"  explicit KOKKOS_INLINE_FUNCTION View("},
{"lineNum":" 1802","line":"      pointer_type arg_ptr, const typename traits::array_layout& arg_layout)"},
{"lineNum":" 1803","line":"      : View(Impl::ViewCtorProp<pointer_type>(arg_ptr), arg_layout) {}"},
{"lineNum":" 1804","line":""},
{"lineNum":" 1805","line":"  //----------------------------------------"},
{"lineNum":" 1806","line":"  // Shared scratch memory constructor"},
{"lineNum":" 1807","line":""},
{"lineNum":" 1808","line":"  static inline size_t shmem_size(const size_t arg_N0 = KOKKOS_INVALID_INDEX,"},
{"lineNum":" 1809","line":"                                  const size_t arg_N1 = KOKKOS_INVALID_INDEX,"},
{"lineNum":" 1810","line":"                                  const size_t arg_N2 = KOKKOS_INVALID_INDEX,"},
{"lineNum":" 1811","line":"                                  const size_t arg_N3 = KOKKOS_INVALID_INDEX,"},
{"lineNum":" 1812","line":"                                  const size_t arg_N4 = KOKKOS_INVALID_INDEX,"},
{"lineNum":" 1813","line":"                                  const size_t arg_N5 = KOKKOS_INVALID_INDEX,"},
{"lineNum":" 1814","line":"                                  const size_t arg_N6 = KOKKOS_INVALID_INDEX,"},
{"lineNum":" 1815","line":"                                  const size_t arg_N7 = KOKKOS_INVALID_INDEX) {"},
{"lineNum":" 1816","line":"    if (is_layout_stride) {"},
{"lineNum":" 1817","line":"      Kokkos::abort("},
{"lineNum":" 1818","line":"          \"Kokkos::View::shmem_size(extents...) doesn\'t work with \""},
{"lineNum":" 1819","line":"          \"LayoutStride. Pass a LayoutStride object instead\");"},
{"lineNum":" 1820","line":"    }"},
{"lineNum":" 1821","line":"    const size_t num_passed_args = Impl::count_valid_integers("},
{"lineNum":" 1822","line":"        arg_N0, arg_N1, arg_N2, arg_N3, arg_N4, arg_N5, arg_N6, arg_N7);"},
{"lineNum":" 1823","line":""},
{"lineNum":" 1824","line":"    if (std::is_same<typename traits::specialize, void>::value &&"},
{"lineNum":" 1825","line":"        num_passed_args != traits::rank_dynamic) {"},
{"lineNum":" 1826","line":"      Kokkos::abort("},
{"lineNum":" 1827","line":"          \"Kokkos::View::shmem_size() rank_dynamic != number of arguments.\\n\");"},
{"lineNum":" 1828","line":"    }"},
{"lineNum":" 1829","line":""},
{"lineNum":" 1830","line":"    return View::shmem_size(typename traits::array_layout("},
{"lineNum":" 1831","line":"        arg_N0, arg_N1, arg_N2, arg_N3, arg_N4, arg_N5, arg_N6, arg_N7));"},
{"lineNum":" 1832","line":"  }"},
{"lineNum":" 1833","line":""},
{"lineNum":" 1834","line":"  static inline size_t shmem_size("},
{"lineNum":" 1835","line":"      typename traits::array_layout const& arg_layout) {"},
{"lineNum":" 1836","line":"    return map_type::memory_span(arg_layout) +"},
{"lineNum":" 1837","line":"           sizeof(typename traits::value_type);"},
{"lineNum":" 1838","line":"  }"},
{"lineNum":" 1839","line":""},
{"lineNum":" 1840","line":"  explicit KOKKOS_INLINE_FUNCTION View("},
{"lineNum":" 1841","line":"      const typename traits::execution_space::scratch_memory_space& arg_space,"},
{"lineNum":" 1842","line":"      const typename traits::array_layout& arg_layout)"},
{"lineNum":" 1843","line":"      : View(Impl::ViewCtorProp<pointer_type>("},
{"lineNum":" 1844","line":"                 reinterpret_cast<pointer_type>(arg_space.get_shmem_aligned("},
{"lineNum":" 1845","line":"                     map_type::memory_span(arg_layout),"},
{"lineNum":" 1846","line":"                     sizeof(typename traits::value_type)))),"},
{"lineNum":" 1847","line":"             arg_layout) {}"},
{"lineNum":" 1848","line":""},
{"lineNum":" 1849","line":"  explicit KOKKOS_INLINE_FUNCTION View("},
{"lineNum":" 1850","line":"      const typename traits::execution_space::scratch_memory_space& arg_space,"},
{"lineNum":" 1851","line":"      const size_t arg_N0 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1852","line":"      const size_t arg_N1 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1853","line":"      const size_t arg_N2 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1854","line":"      const size_t arg_N3 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1855","line":"      const size_t arg_N4 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1856","line":"      const size_t arg_N5 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1857","line":"      const size_t arg_N6 = KOKKOS_IMPL_CTOR_DEFAULT_ARG,"},
{"lineNum":" 1858","line":"      const size_t arg_N7 = KOKKOS_IMPL_CTOR_DEFAULT_ARG)"},
{"lineNum":" 1859","line":"      : View(Impl::ViewCtorProp<pointer_type>("},
{"lineNum":" 1860","line":"                 reinterpret_cast<pointer_type>(arg_space.get_shmem_aligned("},
{"lineNum":" 1861","line":"                     map_type::memory_span(typename traits::array_layout("},
{"lineNum":" 1862","line":"                         arg_N0, arg_N1, arg_N2, arg_N3, arg_N4, arg_N5, arg_N6,"},
{"lineNum":" 1863","line":"                         arg_N7)),"},
{"lineNum":" 1864","line":"                     sizeof(typename traits::value_type)))),"},
{"lineNum":" 1865","line":"             typename traits::array_layout(arg_N0, arg_N1, arg_N2, arg_N3,"},
{"lineNum":" 1866","line":"                                           arg_N4, arg_N5, arg_N6, arg_N7)) {"},
{"lineNum":" 1867","line":"#ifdef KOKKOS_ENABLE_OPENMPTARGET"},
{"lineNum":" 1868","line":"    KOKKOS_IMPL_IF_ON_HOST"},
{"lineNum":" 1869","line":"    Impl::runtime_check_rank_host("},
{"lineNum":" 1870","line":"        traits::rank_dynamic,"},
{"lineNum":" 1871","line":"        std::is_same<typename traits::specialize, void>::value, arg_N0, arg_N1,"},
{"lineNum":" 1872","line":"        arg_N2, arg_N3, arg_N4, arg_N5, arg_N6, arg_N7, label());"},
{"lineNum":" 1873","line":"    else Impl::runtime_check_rank_device("},
{"lineNum":" 1874","line":"        traits::rank_dynamic,"},
{"lineNum":" 1875","line":"        std::is_same<typename traits::specialize, void>::value, arg_N0, arg_N1,"},
{"lineNum":" 1876","line":"        arg_N2, arg_N3, arg_N4, arg_N5, arg_N6, arg_N7);"},
{"lineNum":" 1877","line":"#elif defined(KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_HOST)"},
{"lineNum":" 1878","line":"    Impl::runtime_check_rank_host("},
{"lineNum":" 1879","line":"        traits::rank_dynamic,"},
{"lineNum":" 1880","line":"        std::is_same<typename traits::specialize, void>::value, arg_N0, arg_N1,"},
{"lineNum":" 1881","line":"        arg_N2, arg_N3, arg_N4, arg_N5, arg_N6, arg_N7, label());"},
{"lineNum":" 1882","line":"#else"},
{"lineNum":" 1883","line":"    Impl::runtime_check_rank_device("},
{"lineNum":" 1884","line":"        traits::rank_dynamic,"},
{"lineNum":" 1885","line":"        std::is_same<typename traits::specialize, void>::value, arg_N0, arg_N1,"},
{"lineNum":" 1886","line":"        arg_N2, arg_N3, arg_N4, arg_N5, arg_N6, arg_N7);"},
{"lineNum":" 1887","line":""},
{"lineNum":" 1888","line":"#endif"},
{"lineNum":" 1889","line":"  }"},
{"lineNum":" 1890","line":"};"},
{"lineNum":" 1891","line":""},
{"lineNum":" 1892","line":"/** \\brief Temporary free function rank()"},
{"lineNum":" 1893","line":" *         until rank() is implemented"},
{"lineNum":" 1894","line":" *         in the View"},
{"lineNum":" 1895","line":" */"},
{"lineNum":" 1896","line":"template <typename D, class... P>"},
{"lineNum":" 1897","line":"KOKKOS_INLINE_FUNCTION constexpr unsigned rank(const View<D, P...>& V) {"},
{"lineNum":" 1898","line":"  return V.Rank;"},
{"lineNum":" 1899","line":"}  // Temporary until added to view"},
{"lineNum":" 1900","line":""},
{"lineNum":" 1901","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1902","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1903","line":""},
{"lineNum":" 1904","line":"template <class V, class... Args>"},
{"lineNum":" 1905","line":"using Subview ="},
{"lineNum":" 1906","line":"    typename Kokkos::Impl::ViewMapping<void /* deduce subview type from source"},
{"lineNum":" 1907","line":"                                               view traits */"},
{"lineNum":" 1908","line":"                                       ,"},
{"lineNum":" 1909","line":"                                       typename V::traits, Args...>::type;"},
{"lineNum":" 1910","line":""},
{"lineNum":" 1911","line":"template <class D, class... P, class... Args>"},
{"lineNum":" 1912","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1913","line":"    typename Kokkos::Impl::ViewMapping<void /* deduce subview type from source"},
{"lineNum":" 1914","line":"                                               view traits */"},
{"lineNum":" 1915","line":"                                       ,"},
{"lineNum":" 1916","line":"                                       ViewTraits<D, P...>, Args...>::type"},
{"lineNum":" 1917","line":"    subview(const View<D, P...>& src, Args... args) {"},
{"lineNum":" 1918","line":"  static_assert(View<D, P...>::Rank == sizeof...(Args),"},
{"lineNum":" 1919","line":"                \"subview requires one argument for each source View rank\");"},
{"lineNum":" 1920","line":""},
{"lineNum":" 1921","line":"  return typename Kokkos::Impl::ViewMapping<"},
{"lineNum":" 1922","line":"      void /* deduce subview type from source view traits */"},
{"lineNum":" 1923","line":"      ,"},
{"lineNum":" 1924","line":"      ViewTraits<D, P...>, Args...>::type(src, args...);"},
{"lineNum":" 1925","line":"}"},
{"lineNum":" 1926","line":""},
{"lineNum":" 1927","line":"template <class MemoryTraits, class D, class... P, class... Args>"},
{"lineNum":" 1928","line":"KOKKOS_INLINE_FUNCTION typename Kokkos::Impl::ViewMapping<"},
{"lineNum":" 1929","line":"    void /* deduce subview type from source view traits */"},
{"lineNum":" 1930","line":"    ,"},
{"lineNum":" 1931","line":"    ViewTraits<D, P...>, Args...>::template apply<MemoryTraits>::type"},
{"lineNum":" 1932","line":"subview(const View<D, P...>& src, Args... args) {"},
{"lineNum":" 1933","line":"  static_assert(View<D, P...>::Rank == sizeof...(Args),"},
{"lineNum":" 1934","line":"                \"subview requires one argument for each source View rank\");"},
{"lineNum":" 1935","line":""},
{"lineNum":" 1936","line":"  return typename Kokkos::Impl::ViewMapping<"},
{"lineNum":" 1937","line":"      void /* deduce subview type from source view traits */"},
{"lineNum":" 1938","line":"      ,"},
{"lineNum":" 1939","line":"      ViewTraits<D, P...>,"},
{"lineNum":" 1940","line":"      Args...>::template apply<MemoryTraits>::type(src, args...);"},
{"lineNum":" 1941","line":"}"},
{"lineNum":" 1942","line":""},
{"lineNum":" 1943","line":"} /* namespace Kokkos */"},
{"lineNum":" 1944","line":""},
{"lineNum":" 1945","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1946","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1947","line":""},
{"lineNum":" 1948","line":"namespace Kokkos {"},
{"lineNum":" 1949","line":""},
{"lineNum":" 1950","line":"template <class LT, class... LP, class RT, class... RP>"},
{"lineNum":" 1951","line":"KOKKOS_INLINE_FUNCTION bool operator==(const View<LT, LP...>& lhs,"},
{"lineNum":" 1952","line":"                                       const View<RT, RP...>& rhs) {"},
{"lineNum":" 1953","line":"  // Same data, layout, dimensions"},
{"lineNum":" 1954","line":"  using lhs_traits = ViewTraits<LT, LP...>;"},
{"lineNum":" 1955","line":"  using rhs_traits = ViewTraits<RT, RP...>;"},
{"lineNum":" 1956","line":""},
{"lineNum":" 1957","line":"  return std::is_same<typename lhs_traits::const_value_type,"},
{"lineNum":" 1958","line":"                      typename rhs_traits::const_value_type>::value &&"},
{"lineNum":" 1959","line":"         std::is_same<typename lhs_traits::array_layout,"},
{"lineNum":" 1960","line":"                      typename rhs_traits::array_layout>::value &&"},
{"lineNum":" 1961","line":"         std::is_same<typename lhs_traits::memory_space,"},
{"lineNum":" 1962","line":"                      typename rhs_traits::memory_space>::value &&"},
{"lineNum":" 1963","line":"         unsigned(lhs_traits::rank) == unsigned(rhs_traits::rank) &&"},
{"lineNum":" 1964","line":"         lhs.data() == rhs.data() && lhs.span() == rhs.span() &&"},
{"lineNum":" 1965","line":"         lhs.extent(0) == rhs.extent(0) && lhs.extent(1) == rhs.extent(1) &&"},
{"lineNum":" 1966","line":"         lhs.extent(2) == rhs.extent(2) && lhs.extent(3) == rhs.extent(3) &&"},
{"lineNum":" 1967","line":"         lhs.extent(4) == rhs.extent(4) && lhs.extent(5) == rhs.extent(5) &&"},
{"lineNum":" 1968","line":"         lhs.extent(6) == rhs.extent(6) && lhs.extent(7) == rhs.extent(7);"},
{"lineNum":" 1969","line":"}"},
{"lineNum":" 1970","line":""},
{"lineNum":" 1971","line":"template <class LT, class... LP, class RT, class... RP>"},
{"lineNum":" 1972","line":"KOKKOS_INLINE_FUNCTION bool operator!=(const View<LT, LP...>& lhs,"},
{"lineNum":" 1973","line":"                                       const View<RT, RP...>& rhs) {"},
{"lineNum":" 1974","line":"  return !(operator==(lhs, rhs));"},
{"lineNum":" 1975","line":"}"},
{"lineNum":" 1976","line":""},
{"lineNum":" 1977","line":"} /* namespace Kokkos */"},
{"lineNum":" 1978","line":""},
{"lineNum":" 1979","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1980","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1981","line":""},
{"lineNum":" 1982","line":"namespace Kokkos {"},
{"lineNum":" 1983","line":"namespace Impl {"},
{"lineNum":" 1984","line":""},
{"lineNum":" 1985","line":"inline void shared_allocation_tracking_disable() {"},
{"lineNum":" 1986","line":"  Kokkos::Impl::SharedAllocationRecord<void, void>::tracking_disable();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1987","line":"}"},
{"lineNum":" 1988","line":""},
{"lineNum":" 1989","line":"inline void shared_allocation_tracking_enable() {"},
{"lineNum":" 1990","line":"  Kokkos::Impl::SharedAllocationRecord<void, void>::tracking_enable();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1991","line":"}"},
{"lineNum":" 1992","line":""},
{"lineNum":" 1993","line":"} /* namespace Impl */"},
{"lineNum":" 1994","line":"} /* namespace Kokkos */"},
{"lineNum":" 1995","line":""},
{"lineNum":" 1996","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1997","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1998","line":""},
{"lineNum":" 1999","line":"namespace Kokkos {"},
{"lineNum":" 2000","line":"namespace Impl {"},
{"lineNum":" 2001","line":""},
{"lineNum":" 2002","line":"template <class Specialize, typename A, typename B>"},
{"lineNum":" 2003","line":"struct CommonViewValueType;"},
{"lineNum":" 2004","line":""},
{"lineNum":" 2005","line":"template <typename A, typename B>"},
{"lineNum":" 2006","line":"struct CommonViewValueType<void, A, B> {"},
{"lineNum":" 2007","line":"  using value_type = typename std::common_type<A, B>::type;"},
{"lineNum":" 2008","line":"};"},
{"lineNum":" 2009","line":""},
{"lineNum":" 2010","line":"template <class Specialize, class ValueType>"},
{"lineNum":" 2011","line":"struct CommonViewAllocProp;"},
{"lineNum":" 2012","line":""},
{"lineNum":" 2013","line":"template <class ValueType>"},
{"lineNum":" 2014","line":"struct CommonViewAllocProp<void, ValueType> {"},
{"lineNum":" 2015","line":"  using value_type        = ValueType;"},
{"lineNum":" 2016","line":"  using scalar_array_type = ValueType;"},
{"lineNum":" 2017","line":""},
{"lineNum":" 2018","line":"  template <class... Views>"},
{"lineNum":" 2019","line":"  KOKKOS_INLINE_FUNCTION CommonViewAllocProp(const Views&...) {}"},
{"lineNum":" 2020","line":"};"},
{"lineNum":" 2021","line":""},
{"lineNum":" 2022","line":"template <class... Views>"},
{"lineNum":" 2023","line":"struct DeduceCommonViewAllocProp;"},
{"lineNum":" 2024","line":""},
{"lineNum":" 2025","line":"// Base case must provide types for:"},
{"lineNum":" 2026","line":"// 1. specialize  2. value_type  3. is_view  4. prop_type"},
{"lineNum":" 2027","line":"template <class FirstView>"},
{"lineNum":" 2028","line":"struct DeduceCommonViewAllocProp<FirstView> {"},
{"lineNum":" 2029","line":"  using specialize = typename FirstView::traits::specialize;"},
{"lineNum":" 2030","line":""},
{"lineNum":" 2031","line":"  using value_type = typename FirstView::traits::value_type;"},
{"lineNum":" 2032","line":""},
{"lineNum":" 2033","line":"  enum : bool { is_view = is_view<FirstView>::value };"},
{"lineNum":" 2034","line":""},
{"lineNum":" 2035","line":"  using prop_type = CommonViewAllocProp<specialize, value_type>;"},
{"lineNum":" 2036","line":"};"},
{"lineNum":" 2037","line":""},
{"lineNum":" 2038","line":"template <class FirstView, class... NextViews>"},
{"lineNum":" 2039","line":"struct DeduceCommonViewAllocProp<FirstView, NextViews...> {"},
{"lineNum":" 2040","line":"  using NextTraits = DeduceCommonViewAllocProp<NextViews...>;"},
{"lineNum":" 2041","line":""},
{"lineNum":" 2042","line":"  using first_specialize = typename FirstView::traits::specialize;"},
{"lineNum":" 2043","line":"  using first_value_type = typename FirstView::traits::value_type;"},
{"lineNum":" 2044","line":""},
{"lineNum":" 2045","line":"  enum : bool { first_is_view = is_view<FirstView>::value };"},
{"lineNum":" 2046","line":""},
{"lineNum":" 2047","line":"  using next_specialize = typename NextTraits::specialize;"},
{"lineNum":" 2048","line":"  using next_value_type = typename NextTraits::value_type;"},
{"lineNum":" 2049","line":""},
{"lineNum":" 2050","line":"  enum : bool { next_is_view = NextTraits::is_view };"},
{"lineNum":" 2051","line":""},
{"lineNum":" 2052","line":"  // common types"},
{"lineNum":" 2053","line":""},
{"lineNum":" 2054","line":"  // determine specialize type"},
{"lineNum":" 2055","line":"  // if first and next specialize differ, but are not the same specialize, error"},
{"lineNum":" 2056","line":"  // out"},
{"lineNum":" 2057","line":"  static_assert(!(!std::is_same<first_specialize, next_specialize>::value &&"},
{"lineNum":" 2058","line":"                  !std::is_same<first_specialize, void>::value &&"},
{"lineNum":" 2059","line":"                  !std::is_same<void, next_specialize>::value),"},
{"lineNum":" 2060","line":"                \"Kokkos DeduceCommonViewAllocProp ERROR: Only one non-void \""},
{"lineNum":" 2061","line":"                \"specialize trait allowed\");"},
{"lineNum":" 2062","line":""},
{"lineNum":" 2063","line":"  // otherwise choose non-void specialize if either/both are non-void"},
{"lineNum":" 2064","line":"  using specialize = typename std::conditional<"},
{"lineNum":" 2065","line":"      std::is_same<first_specialize, next_specialize>::value, first_specialize,"},
{"lineNum":" 2066","line":"      typename std::conditional<(std::is_same<first_specialize, void>::value &&"},
{"lineNum":" 2067","line":"                                 !std::is_same<next_specialize, void>::value),"},
{"lineNum":" 2068","line":"                                next_specialize, first_specialize>::type>::type;"},
{"lineNum":" 2069","line":""},
{"lineNum":" 2070","line":"  using value_type = typename CommonViewValueType<specialize, first_value_type,"},
{"lineNum":" 2071","line":"                                                  next_value_type>::value_type;"},
{"lineNum":" 2072","line":""},
{"lineNum":" 2073","line":"  enum : bool { is_view = (first_is_view && next_is_view) };"},
{"lineNum":" 2074","line":""},
{"lineNum":" 2075","line":"  using prop_type = CommonViewAllocProp<specialize, value_type>;"},
{"lineNum":" 2076","line":"};"},
{"lineNum":" 2077","line":""},
{"lineNum":" 2078","line":"}  // end namespace Impl"},
{"lineNum":" 2079","line":""},
{"lineNum":" 2080","line":"template <class... Views>"},
{"lineNum":" 2081","line":"using DeducedCommonPropsType ="},
{"lineNum":" 2082","line":"    typename Impl::DeduceCommonViewAllocProp<Views...>::prop_type;"},
{"lineNum":" 2083","line":""},
{"lineNum":" 2084","line":"// User function"},
{"lineNum":" 2085","line":"template <class... Views>"},
{"lineNum":" 2086","line":"KOKKOS_INLINE_FUNCTION DeducedCommonPropsType<Views...> common_view_alloc_prop("},
{"lineNum":" 2087","line":"    Views const&... views) {"},
{"lineNum":" 2088","line":"  return DeducedCommonPropsType<Views...>(views...);"},
{"lineNum":" 2089","line":"}"},
{"lineNum":" 2090","line":""},
{"lineNum":" 2091","line":"}  // namespace Kokkos"},
{"lineNum":" 2092","line":""},
{"lineNum":" 2093","line":"namespace Kokkos {"},
{"lineNum":" 2094","line":"namespace Impl {"},
{"lineNum":" 2095","line":""},
{"lineNum":" 2096","line":"using Kokkos::is_view;"},
{"lineNum":" 2097","line":""},
{"lineNum":" 2098","line":"} /* namespace Impl */"},
{"lineNum":" 2099","line":"} /* namespace Kokkos */"},
{"lineNum":" 2100","line":""},
{"lineNum":" 2101","line":"#include <impl/Kokkos_ViewUniformType.hpp>"},
{"lineNum":" 2102","line":"#include <impl/Kokkos_Atomic_View.hpp>"},
{"lineNum":" 2103","line":""},
{"lineNum":" 2104","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 2105","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 2106","line":""},
{"lineNum":" 2107","line":"#endif /* #ifndef KOKKOS_VIEW_HPP */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 44, "covered" : 0,};
var merged_data = [];
