var data = {lines:[
{"lineNum":"    1","line":"// Tencent is pleased to support the open source community by making RapidJSON available."},
{"lineNum":"    2","line":"//"},
{"lineNum":"    3","line":"// Copyright (C) 2015 THL A29 Limited, a Tencent company, and Milo Yip. All rights reserved."},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// Licensed under the MIT License (the \"License\"); you may not use this file except"},
{"lineNum":"    6","line":"// in compliance with the License. You may obtain a copy of the License at"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"// http://opensource.org/licenses/MIT"},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// Unless required by applicable law or agreed to in writing, software distributed"},
{"lineNum":"   11","line":"// under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR"},
{"lineNum":"   12","line":"// CONDITIONS OF ANY KIND, either express or implied. See the License for the"},
{"lineNum":"   13","line":"// specific language governing permissions and limitations under the License."},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"// This is a C++ header-only implementation of Grisu2 algorithm from the publication:"},
{"lineNum":"   16","line":"// Loitsch, Florian. \"Printing floating-point numbers quickly and accurately with"},
{"lineNum":"   17","line":"// integers.\" ACM Sigplan Notices 45.6 (2010): 233-243."},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"#ifndef CEREAL_RAPIDJSON_DTOA_"},
{"lineNum":"   20","line":"#define CEREAL_RAPIDJSON_DTOA_"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"#include \"itoa.h\" // GetDigitsLut()"},
{"lineNum":"   23","line":"#include \"diyfp.h\""},
{"lineNum":"   24","line":"#include \"ieee754.h\""},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"CEREAL_RAPIDJSON_NAMESPACE_BEGIN"},
{"lineNum":"   27","line":"namespace internal {"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"#ifdef __GNUC__"},
{"lineNum":"   30","line":"CEREAL_RAPIDJSON_DIAG_PUSH"},
{"lineNum":"   31","line":"CEREAL_RAPIDJSON_DIAG_OFF(effc++)"},
{"lineNum":"   32","line":"CEREAL_RAPIDJSON_DIAG_OFF(array-bounds) // some gcc versions generate wrong warnings https://gcc.gnu.org/bugzilla/show_bug.cgi?id=59124"},
{"lineNum":"   33","line":"#endif"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"inline void GrisuRound(char* buffer, int len, uint64_t delta, uint64_t rest, uint64_t ten_kappa, uint64_t wp_w) {"},
{"lineNum":"   36","line":"    while (rest < wp_w && delta - rest >= ten_kappa &&","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":"   37","line":"           (rest + ten_kappa < wp_w ||  /// closer","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   38","line":"            wp_w - rest > rest + ten_kappa - wp_w)) {","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   39","line":"        buffer[len - 1]--;","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   40","line":"        rest += ten_kappa;"},
{"lineNum":"   41","line":"    }"},
{"lineNum":"   42","line":"}"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"inline int CountDecimalDigit32(uint32_t n) {"},
{"lineNum":"   45","line":"    // Simple pure C++ implementation was faster than __builtin_clz version in this situation."},
{"lineNum":"   46","line":"    if (n < 10) return 1;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   47","line":"    if (n < 100) return 2;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   48","line":"    if (n < 1000) return 3;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   49","line":"    if (n < 10000) return 4;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   50","line":"    if (n < 100000) return 5;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   51","line":"    if (n < 1000000) return 6;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   52","line":"    if (n < 10000000) return 7;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   53","line":"    if (n < 100000000) return 8;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   54","line":"    // Will not reach 10 digits in DigitGen()"},
{"lineNum":"   55","line":"    //if (n < 1000000000) return 9;"},
{"lineNum":"   56","line":"    //return 10;"},
{"lineNum":"   57","line":"    return 9;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   58","line":"}"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"inline void DigitGen(const DiyFp& W, const DiyFp& Mp, uint64_t delta, char* buffer, int* len, int* K) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   61","line":"    static const uint32_t kPow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };"},
{"lineNum":"   62","line":"    const DiyFp one(uint64_t(1) << -Mp.e, Mp.e);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   63","line":"    const DiyFp wp_w = Mp - W;"},
{"lineNum":"   64","line":"    uint32_t p1 = static_cast<uint32_t>(Mp.f >> -one.e);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   65","line":"    uint64_t p2 = Mp.f & (one.f - 1);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   66","line":"    int kappa = CountDecimalDigit32(p1); // kappa in [0, 9]"},
{"lineNum":"   67","line":"    *len = 0;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"    while (kappa > 0) {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   70","line":"        uint32_t d = 0;"},
{"lineNum":"   71","line":"        switch (kappa) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   72","line":"            case  9: d = p1 /  100000000; p1 %=  100000000; break;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   73","line":"            case  8: d = p1 /   10000000; p1 %=   10000000; break;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   74","line":"            case  7: d = p1 /    1000000; p1 %=    1000000; break;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   75","line":"            case  6: d = p1 /     100000; p1 %=     100000; break;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   76","line":"            case  5: d = p1 /      10000; p1 %=      10000; break;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   77","line":"            case  4: d = p1 /       1000; p1 %=       1000; break;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   78","line":"            case  3: d = p1 /        100; p1 %=        100; break;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   79","line":"            case  2: d = p1 /         10; p1 %=         10; break;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   80","line":"            case  1: d = p1;              p1 =           0; break;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   81","line":"            default:;"},
{"lineNum":"   82","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   83","line":"        if (d || *len)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   84","line":"            buffer[(*len)++] = static_cast<char>(\'0\' + static_cast<char>(d));","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   85","line":"        kappa--;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   86","line":"        uint64_t tmp = (static_cast<uint64_t>(p1) << -one.e) + p2;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   87","line":"        if (tmp <= delta) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   88","line":"            *K += kappa;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   89","line":"            GrisuRound(buffer, *len, delta, tmp, static_cast<uint64_t>(kPow10[kappa]) << -one.e, wp_w.f);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   90","line":"            return;"},
{"lineNum":"   91","line":"        }"},
{"lineNum":"   92","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"    // kappa = 0"},
{"lineNum":"   95","line":"    for (;;) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   96","line":"        p2 *= 10;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   97","line":"        delta *= 10;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   98","line":"        char d = static_cast<char>(p2 >> -one.e);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   99","line":"        if (d || *len)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  100","line":"            buffer[(*len)++] = static_cast<char>(\'0\' + d);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  101","line":"        p2 &= one.f - 1;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  102","line":"        kappa--;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  103","line":"        if (p2 < delta) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  104","line":"            *K += kappa;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  105","line":"            int index = -kappa;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  106","line":"            GrisuRound(buffer, *len, delta, p2, one.f, wp_w.f * (index < 9 ? kPow10[index] : 0));","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  107","line":"            return;"},
{"lineNum":"  108","line":"        }"},
{"lineNum":"  109","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  110","line":"}","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"inline void Grisu2(double value, char* buffer, int* length, int* K) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  113","line":"    const DiyFp v(value);"},
{"lineNum":"  114","line":"    DiyFp w_m, w_p;"},
{"lineNum":"  115","line":"    v.NormalizedBoundaries(&w_m, &w_p);"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"    const DiyFp c_mk = GetCachedPower(w_p.e, K);"},
{"lineNum":"  118","line":"    const DiyFp W = v.Normalize() * c_mk;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  119","line":"    DiyFp Wp = w_p * c_mk;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  120","line":"    DiyFp Wm = w_m * c_mk;"},
{"lineNum":"  121","line":"    Wm.f++;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  122","line":"    Wp.f--;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  123","line":"    DigitGen(W, Wp, Wp.f - Wm.f, buffer, length, K);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  124","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"inline char* WriteExponent(int K, char* buffer) {"},
{"lineNum":"  127","line":"    if (K < 0) {","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  128","line":"        *buffer++ = \'-\';","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  129","line":"        K = -K;"},
{"lineNum":"  130","line":"    }"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"    if (K >= 100) {"},
{"lineNum":"  133","line":"        *buffer++ = static_cast<char>(\'0\' + static_cast<char>(K / 100));"},
{"lineNum":"  134","line":"        K %= 100;"},
{"lineNum":"  135","line":"        const char* d = GetDigitsLut() + K * 2;"},
{"lineNum":"  136","line":"        *buffer++ = d[0];"},
{"lineNum":"  137","line":"        *buffer++ = d[1];"},
{"lineNum":"  138","line":"    }"},
{"lineNum":"  139","line":"    else if (K >= 10) {"},
{"lineNum":"  140","line":"        const char* d = GetDigitsLut() + K * 2;"},
{"lineNum":"  141","line":"        *buffer++ = d[0];"},
{"lineNum":"  142","line":"        *buffer++ = d[1];"},
{"lineNum":"  143","line":"    }"},
{"lineNum":"  144","line":"    else"},
{"lineNum":"  145","line":"        *buffer++ = static_cast<char>(\'0\' + static_cast<char>(K));"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"    return buffer;"},
{"lineNum":"  148","line":"}"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"inline char* Prettify(char* buffer, int length, int k, int maxDecimalPlaces) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  151","line":"    const int kk = length + k;  // 10^(kk-1) <= v < 10^kk","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"    if (0 <= k && kk <= 21) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  154","line":"        // 1234e7 -> 12340000000"},
{"lineNum":"  155","line":"        for (int i = length; i < kk; i++)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  156","line":"            buffer[i] = \'0\';","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  157","line":"        buffer[kk] = \'.\';","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  158","line":"        buffer[kk + 1] = \'0\';","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  159","line":"        return &buffer[kk + 2];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  160","line":"    }"},
{"lineNum":"  161","line":"    else if (0 < kk && kk <= 21) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  162","line":"        // 1234e-2 -> 12.34"},
{"lineNum":"  163","line":"        std::memmove(&buffer[kk + 1], &buffer[kk], static_cast<size_t>(length - kk));","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  164","line":"        buffer[kk] = \'.\';","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  165","line":"        if (0 > k + maxDecimalPlaces) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  166","line":"            // When maxDecimalPlaces = 2, 1.2345 -> 1.23, 1.102 -> 1.1"},
{"lineNum":"  167","line":"            // Remove extra trailing zeros (at least one) after truncation."},
{"lineNum":"  168","line":"            for (int i = kk + maxDecimalPlaces; i > kk + 1; i--)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  169","line":"                if (buffer[i] != \'0\')","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  170","line":"                    return &buffer[i + 1];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  171","line":"            return &buffer[kk + 2]; // Reserve one zero","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  172","line":"        }"},
{"lineNum":"  173","line":"        else"},
{"lineNum":"  174","line":"            return &buffer[length + 1];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  175","line":"    }"},
{"lineNum":"  176","line":"    else if (-6 < kk && kk <= 0) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  177","line":"        // 1234e-6 -> 0.001234"},
{"lineNum":"  178","line":"        const int offset = 2 - kk;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  179","line":"        std::memmove(&buffer[offset], &buffer[0], static_cast<size_t>(length));","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  180","line":"        buffer[0] = \'0\';","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  181","line":"        buffer[1] = \'.\';"},
{"lineNum":"  182","line":"        for (int i = 2; i < offset; i++)","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  183","line":"            buffer[i] = \'0\';","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  184","line":"        if (length - kk > maxDecimalPlaces) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  185","line":"            // When maxDecimalPlaces = 2, 0.123 -> 0.12, 0.102 -> 0.1"},
{"lineNum":"  186","line":"            // Remove extra trailing zeros (at least one) after truncation."},
{"lineNum":"  187","line":"            for (int i = maxDecimalPlaces + 1; i > 2; i--)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  188","line":"                if (buffer[i] != \'0\')","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  189","line":"                    return &buffer[i + 1];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  190","line":"            return &buffer[3]; // Reserve one zero","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  191","line":"        }"},
{"lineNum":"  192","line":"        else"},
{"lineNum":"  193","line":"            return &buffer[length + offset];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  194","line":"    }"},
{"lineNum":"  195","line":"    else if (kk < -maxDecimalPlaces) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  196","line":"        // Truncate to zero"},
{"lineNum":"  197","line":"        buffer[0] = \'0\';","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  198","line":"        buffer[1] = \'.\';"},
{"lineNum":"  199","line":"        buffer[2] = \'0\';","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  200","line":"        return &buffer[3];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  201","line":"    }"},
{"lineNum":"  202","line":"    else if (length == 1) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  203","line":"        // 1e30"},
{"lineNum":"  204","line":"        buffer[1] = \'e\';","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  205","line":"        return WriteExponent(kk - 1, &buffer[2]);"},
{"lineNum":"  206","line":"    }"},
{"lineNum":"  207","line":"    else {"},
{"lineNum":"  208","line":"        // 1234e30 -> 1.234e33"},
{"lineNum":"  209","line":"        std::memmove(&buffer[2], &buffer[1], static_cast<size_t>(length - 1));","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  210","line":"        buffer[1] = \'.\';","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  211","line":"        buffer[length + 1] = \'e\';","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  212","line":"        return WriteExponent(kk - 1, &buffer[0 + length + 2]);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  213","line":"    }"},
{"lineNum":"  214","line":"}","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"inline char* dtoa(double value, char* buffer, int maxDecimalPlaces = 324) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  217","line":"    CEREAL_RAPIDJSON_ASSERT(maxDecimalPlaces >= 1);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  218","line":"    Double d(value);"},
{"lineNum":"  219","line":"    if (d.IsZero()) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  220","line":"        if (d.Sign())","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  221","line":"            *buffer++ = \'-\';     // -0.0, Issue #289","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  222","line":"        buffer[0] = \'0\';","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  223","line":"        buffer[1] = \'.\';"},
{"lineNum":"  224","line":"        buffer[2] = \'0\';","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  225","line":"        return &buffer[3];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  226","line":"    }"},
{"lineNum":"  227","line":"    else {"},
{"lineNum":"  228","line":"        if (value < 0) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  229","line":"            *buffer++ = \'-\';","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  230","line":"            value = -value;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  231","line":"        }"},
{"lineNum":"  232","line":"        int length, K;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  233","line":"        Grisu2(value, buffer, &length, &K);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  234","line":"        return Prettify(buffer, length, K, maxDecimalPlaces);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  235","line":"    }"},
{"lineNum":"  236","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"#ifdef __GNUC__"},
{"lineNum":"  239","line":"CEREAL_RAPIDJSON_DIAG_POP"},
{"lineNum":"  240","line":"#endif"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"} // namespace internal"},
{"lineNum":"  243","line":"CEREAL_RAPIDJSON_NAMESPACE_END"},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"#endif // CEREAL_RAPIDJSON_DTOA_"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 116, "covered" : 0,};
var merged_data = [];
