var data = {lines:[
{"lineNum":"    1","line":"/*============================================================================="},
{"lineNum":"    2","line":"    Copyright (c) 2001-2011 Joel de Guzman"},
{"lineNum":"    3","line":"    Copyright (c) 2001-2011 Hartmut Kaiser"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"    Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    6","line":"    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    7","line":"==============================================================================*/"},
{"lineNum":"    8","line":"#if !defined(SPIRIT_REAL_POLICIES_APRIL_17_2006_1158PM)"},
{"lineNum":"    9","line":"#define SPIRIT_REAL_POLICIES_APRIL_17_2006_1158PM"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"#if defined(_MSC_VER)"},
{"lineNum":"   12","line":"#pragma once"},
{"lineNum":"   13","line":"#endif"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"#include <boost/spirit/home/qi/numeric/numeric_utils.hpp>"},
{"lineNum":"   16","line":"#include <boost/spirit/home/qi/detail/string_parse.hpp>"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"namespace boost { namespace spirit { namespace qi"},
{"lineNum":"   19","line":"{"},
{"lineNum":"   20","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   21","line":"    //  Default (unsigned) real number policies"},
{"lineNum":"   22","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   23","line":"    template <typename T>"},
{"lineNum":"   24","line":"    struct ureal_policies"},
{"lineNum":"   25","line":"    {"},
{"lineNum":"   26","line":"        // trailing dot policy suggested by Gustavo Guerra"},
{"lineNum":"   27","line":"        static bool const allow_leading_dot = true;"},
{"lineNum":"   28","line":"        static bool const allow_trailing_dot = true;"},
{"lineNum":"   29","line":"        static bool const expect_dot = false;"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"        template <typename Iterator>"},
{"lineNum":"   32","line":"        static bool"},
{"lineNum":"   33","line":"        parse_sign(Iterator& /*first*/, Iterator const& /*last*/)"},
{"lineNum":"   34","line":"        {"},
{"lineNum":"   35","line":"            return false;"},
{"lineNum":"   36","line":"        }"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"        template <typename Iterator, typename Attribute>"},
{"lineNum":"   39","line":"        static bool"},
{"lineNum":"   40","line":"        parse_n(Iterator& first, Iterator const& last, Attribute& attr_)"},
{"lineNum":"   41","line":"        {"},
{"lineNum":"   42","line":"            return extract_uint<Attribute, 10, 1, -1>::call(first, last, attr_);"},
{"lineNum":"   43","line":"        }"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"        template <typename Iterator>"},
{"lineNum":"   46","line":"        static bool"},
{"lineNum":"   47","line":"        parse_dot(Iterator& first, Iterator const& last)"},
{"lineNum":"   48","line":"        {"},
{"lineNum":"   49","line":"            if (first == last || *first != \'.\')","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   50","line":"                return false;"},
{"lineNum":"   51","line":"            ++first;"},
{"lineNum":"   52","line":"            return true;"},
{"lineNum":"   53","line":"        }"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"        template <typename Iterator, typename Attribute>"},
{"lineNum":"   56","line":"        static bool"},
{"lineNum":"   57","line":"        parse_frac_n(Iterator& first, Iterator const& last, Attribute& attr_, int& frac_digits)"},
{"lineNum":"   58","line":"        {"},
{"lineNum":"   59","line":"            Iterator savef = first;"},
{"lineNum":"   60","line":"            bool r = extract_uint<Attribute, 10, 1, -1, true, true>::call(first, last, attr_);"},
{"lineNum":"   61","line":"            if (r)"},
{"lineNum":"   62","line":"            {"},
{"lineNum":"   63","line":"                // Optimization note: don\'t compute frac_digits if T is"},
{"lineNum":"   64","line":"                // an unused_type. This should be optimized away by the compiler."},
{"lineNum":"   65","line":"                if (!is_same<T, unused_type>::value)"},
{"lineNum":"   66","line":"                    frac_digits ="},
{"lineNum":"   67","line":"                        static_cast<int>(std::distance(savef, first));"},
{"lineNum":"   68","line":"                // ignore extra (non-significant digits)"},
{"lineNum":"   69","line":"                extract_uint<unused_type, 10, 1, -1>::call(first, last, unused);"},
{"lineNum":"   70","line":"            }"},
{"lineNum":"   71","line":"            return r;"},
{"lineNum":"   72","line":"        }"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"        template <typename Iterator>"},
{"lineNum":"   75","line":"        static bool"},
{"lineNum":"   76","line":"        parse_exp(Iterator& first, Iterator const& last)"},
{"lineNum":"   77","line":"        {"},
{"lineNum":"   78","line":"            if (first == last || (*first != \'e\' && *first != \'E\'))"},
{"lineNum":"   79","line":"                return false;"},
{"lineNum":"   80","line":"            ++first;"},
{"lineNum":"   81","line":"            return true;"},
{"lineNum":"   82","line":"        }"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"        template <typename Iterator>"},
{"lineNum":"   85","line":"        static bool"},
{"lineNum":"   86","line":"        parse_exp_n(Iterator& first, Iterator const& last, int& attr_)"},
{"lineNum":"   87","line":"        {"},
{"lineNum":"   88","line":"            return extract_int<int, 10, 1, -1>::call(first, last, attr_);"},
{"lineNum":"   89","line":"        }"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"        ///////////////////////////////////////////////////////////////////////"},
{"lineNum":"   92","line":"        //  The parse_nan() and parse_inf() functions get called whenever"},
{"lineNum":"   93","line":"        //  a number to parse does not start with a digit (after having"},
{"lineNum":"   94","line":"        //  successfully parsed an optional sign)."},
{"lineNum":"   95","line":"        //"},
{"lineNum":"   96","line":"        //  The functions should return true if a Nan or Inf has been found. In"},
{"lineNum":"   97","line":"        //  this case the attr should be set to the matched value (NaN or"},
{"lineNum":"   98","line":"        //  Inf). The optional sign will be automatically applied afterwards."},
{"lineNum":"   99","line":"        //"},
{"lineNum":"  100","line":"        //  The default implementation below recognizes representations of NaN"},
{"lineNum":"  101","line":"        //  and Inf as mandated by the C99 Standard and as proposed for"},
{"lineNum":"  102","line":"        //  inclusion into the C++0x Standard: nan, nan(...), inf and infinity"},
{"lineNum":"  103","line":"        //  (the matching is performed case-insensitively)."},
{"lineNum":"  104","line":"        ///////////////////////////////////////////////////////////////////////"},
{"lineNum":"  105","line":"        template <typename Iterator, typename Attribute>"},
{"lineNum":"  106","line":"        static bool"},
{"lineNum":"  107","line":"        parse_nan(Iterator& first, Iterator const& last, Attribute& attr_)"},
{"lineNum":"  108","line":"        {"},
{"lineNum":"  109","line":"            if (first == last)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  110","line":"                return false;   // end of input reached"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"            if (*first != \'n\' && *first != \'N\')","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  113","line":"                return false;   // not \"nan\""},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"            // nan[(...)] ?"},
{"lineNum":"  116","line":"            if (detail::string_parse(\"nan\", \"NAN\", first, last, unused))"},
{"lineNum":"  117","line":"            {"},
{"lineNum":"  118","line":"                if (first != last && *first == \'(\')","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  119","line":"                {"},
{"lineNum":"  120","line":"                    // skip trailing (...) part"},
{"lineNum":"  121","line":"                    Iterator i = first;"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"                    while (++i != last && *i != \')\')","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  124","line":"                        ;"},
{"lineNum":"  125","line":"                    if (i == last)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  126","line":"                        return false;     // no trailing \')\' found, give up"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"                    first = ++i;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  129","line":"                }"},
{"lineNum":"  130","line":"                attr_ = std::numeric_limits<T>::quiet_NaN();"},
{"lineNum":"  131","line":"                return true;"},
{"lineNum":"  132","line":"            }"},
{"lineNum":"  133","line":"            return false;"},
{"lineNum":"  134","line":"        }"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"        template <typename Iterator, typename Attribute>"},
{"lineNum":"  137","line":"        static bool"},
{"lineNum":"  138","line":"        parse_inf(Iterator& first, Iterator const& last, Attribute& attr_)"},
{"lineNum":"  139","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  140","line":"            if (first == last)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  141","line":"                return false;   // end of input reached"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"            if (*first != \'i\' && *first != \'I\')","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  144","line":"                return false;   // not \"inf\""},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"            // inf or infinity ?"},
{"lineNum":"  147","line":"            if (detail::string_parse(\"inf\", \"INF\", first, last, unused))"},
{"lineNum":"  148","line":"            {"},
{"lineNum":"  149","line":"                // skip allowed \'inity\' part of infinity"},
{"lineNum":"  150","line":"                detail::string_parse(\"inity\", \"INITY\", first, last, unused);"},
{"lineNum":"  151","line":"                attr_ = std::numeric_limits<T>::infinity();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  152","line":"                return true;"},
{"lineNum":"  153","line":"            }"},
{"lineNum":"  154","line":"            return false;"},
{"lineNum":"  155","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  156","line":"    };"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  159","line":"    //  Default (signed) real number policies"},
{"lineNum":"  160","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  161","line":"    template <typename T>"},
{"lineNum":"  162","line":"    struct real_policies : ureal_policies<T>"},
{"lineNum":"  163","line":"    {"},
{"lineNum":"  164","line":"        template <typename Iterator>"},
{"lineNum":"  165","line":"        static bool"},
{"lineNum":"  166","line":"        parse_sign(Iterator& first, Iterator const& last)"},
{"lineNum":"  167","line":"        {"},
{"lineNum":"  168","line":"            return extract_sign(first, last);"},
{"lineNum":"  169","line":"        }"},
{"lineNum":"  170","line":"    };"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"    template <typename T>"},
{"lineNum":"  173","line":"    struct strict_ureal_policies : ureal_policies<T>"},
{"lineNum":"  174","line":"    {"},
{"lineNum":"  175","line":"        static bool const expect_dot = true;"},
{"lineNum":"  176","line":"    };"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"    template <typename T>"},
{"lineNum":"  179","line":"    struct strict_real_policies : real_policies<T>"},
{"lineNum":"  180","line":"    {"},
{"lineNum":"  181","line":"        static bool const expect_dot = true;"},
{"lineNum":"  182","line":"    };"},
{"lineNum":"  183","line":"}}}"},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 12, "covered" : 0,};
var merged_data = [];
