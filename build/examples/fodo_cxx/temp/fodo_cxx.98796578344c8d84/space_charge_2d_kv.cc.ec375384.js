var data = {lines:[
{"lineNum":"    1","line":"#include \"space_charge_2d_kv.h\""},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"#include \"synergia/bunch/core_diagnostics.h\""},
{"lineNum":"    4","line":"#include \"synergia/foundation/physical_constants.h\""},
{"lineNum":"    5","line":"#include \"synergia/foundation/math_constants.h\""},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"#include \"synergia/utils/simple_timer.h\""},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"namespace"},
{"lineNum":"   10","line":"{"},
{"lineNum":"   11","line":"    // returns the \"normalized\" electric field in the rest frame of the bunch,"},
{"lineNum":"   12","line":"    // in inverse meters.  To get the field [V/m], this must be multiplied"},
{"lineNum":"   13","line":"    // by Q/(2 pi epsilon_o), where Q is the line density of charge [C/m]"},
{"lineNum":"   14","line":"    // (in rest frame)."},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"    // returns Ex, Ey field for a unit kv charge"},
{"lineNum":"   17","line":"    //"},
{"lineNum":"   18","line":"    // from Miguel A. Furman, Compact Complex Expressions for the Electric"},
{"lineNum":"   19","line":"    // Field of 2-D Elliptical Charge Distributions: LBL-34682, CBP Note 014,"},
{"lineNum":"   20","line":"    // PEP-II/AP Note 34-93"},
{"lineNum":"   21","line":"    //"},
{"lineNum":"   22","line":"    // If strictly_linear is true, use the linear field over all space."},
{"lineNum":"   23","line":"    // Otherwise use the Furman expression outside of the ellipse boundaries."},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   26","line":"    Kokkos::complex<double>"},
{"lineNum":"   27","line":"    unit_efield(double x, double y,"},
{"lineNum":"   28","line":"            bool linear, double sigma_x, double sigma_y)"},
{"lineNum":"   29","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   30","line":"        Kokkos::complex<double> E;"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"        // projected std on 1 axis of 2d uniform distribution of"},
{"lineNum":"   33","line":"        // radius R = R/2."},
{"lineNum":"   34","line":"        double a = 2.0 * sigma_x;"},
{"lineNum":"   35","line":"        double b = 2.0 * sigma_y;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"        bool inside = (x/a)*(x/a) + (y/b)*(y/b) < 1.0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"        int xneg = x<0.0 ? -1 : 1;"},
{"lineNum":"   40","line":"        int yneg = y<0.0 ? -1 : 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"        if (linear || inside)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   43","line":"        {"},
{"lineNum":"   44","line":"            E.real() = 4 * x/(a*(a+b));"},
{"lineNum":"   45","line":"            E.imag() = 4 * y/(b*(a+b));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   46","line":"        }"},
{"lineNum":"   47","line":"        else"},
{"lineNum":"   48","line":"        {"},
{"lineNum":"   49","line":"            // for the exterior, we have to reflect to the"},
{"lineNum":"   50","line":"            // first quadrant"},
{"lineNum":"   51","line":"            x *= xneg;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   52","line":"            y *= yneg;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"            Kokkos::complex<double> zbar(x, -y);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   55","line":"            E = 4.0/(zbar + sqrt(zbar*zbar - a*a + b*b));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"            E.real() *= xneg;"},
{"lineNum":"   58","line":"            E.imag() *= yneg;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   59","line":"        }"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"        return E;"},
{"lineNum":"   62","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"    struct sc_kv_uniform","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   65","line":"    {"},
{"lineNum":"   66","line":"        Particles p;"},
{"lineNum":"   67","line":"        ConstParticleMasks masks;"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"        double offx;"},
{"lineNum":"   70","line":"        double offy;"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"        double sigma_x;"},
{"lineNum":"   73","line":"        double sigma_y;"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"        double factor;"},
{"lineNum":"   76","line":"        double line_charge_density;"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"        bool linear;"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   81","line":"        void operator() (const int i) const"},
{"lineNum":"   82","line":"        {"},
{"lineNum":"   83","line":"            if (masks(i))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   84","line":"            {"},
{"lineNum":"   85","line":"                double x = p(i, 0) - offx;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   86","line":"                double y = p(i, 2) - offy;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"                auto E = unit_efield(x, y, linear, sigma_x, sigma_y);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"                p(i, 1) += E.real() * factor * line_charge_density;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   91","line":"                p(i, 3) += E.imag() * factor * line_charge_density;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   92","line":"            }"},
{"lineNum":"   93","line":"        }"},
{"lineNum":"   94","line":"    };"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"    struct sc_kv_gaussian","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   97","line":"    {"},
{"lineNum":"   98","line":"        Particles p;"},
{"lineNum":"   99","line":"        ConstParticleMasks masks;"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"        double offx;"},
{"lineNum":"  102","line":"        double offy;"},
{"lineNum":"  103","line":"        double offz;"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"        double sigma_x;"},
{"lineNum":"  106","line":"        double sigma_y;"},
{"lineNum":"  107","line":"        double sigma_cdt;"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"        double factor;"},
{"lineNum":"  110","line":"        double coeff;"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"        bool linear;"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  115","line":"        void operator() (const int i) const"},
{"lineNum":"  116","line":"        {"},
{"lineNum":"  117","line":"            if (masks(i))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  118","line":"            {"},
{"lineNum":"  119","line":"                double x = p(i, 0) - offx;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  120","line":"                double y = p(i, 2) - offy;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  121","line":"                double z = p(i, 4) - offz;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"                // coeff = total_q / (sqrt(2.0*pi)*sigma_cdt*beta);"},
{"lineNum":"  124","line":"                double line_charge_density ="},
{"lineNum":"  125","line":"                    exp(-z*z/(2.0*sigma_cdt*sigma_cdt)) * coeff;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"                auto E = unit_efield(x, y, linear, sigma_x, sigma_y);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"                p(i, 1) += E.real() * factor * line_charge_density;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  130","line":"                p(i, 3) += E.imag() * factor * line_charge_density;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  131","line":"            }"},
{"lineNum":"  132","line":"        }"},
{"lineNum":"  133","line":"    };"},
{"lineNum":"  134","line":"}"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"Space_charge_2d_kv::Space_charge_2d_kv("},
{"lineNum":"  138","line":"        Space_charge_2d_kv_options const& opts)"},
{"lineNum":"  139","line":"    : Collective_operator(\"sc_2d_kv\", 1.0)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  140","line":"    , opts(opts)"},
{"lineNum":"  141","line":"{","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  142","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"void"},
{"lineNum":"  145","line":"Space_charge_2d_kv::apply_impl("},
{"lineNum":"  146","line":"            Bunch_simulator& sim,"},
{"lineNum":"  147","line":"            double time_step,"},
{"lineNum":"  148","line":"            Logger& logger)"},
{"lineNum":"  149","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  150","line":"    logger << \"    Space charge 2d kv\\n\";"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"    scoped_simple_timer timer(\"sc2d_kv_total\");"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"    // apply to bunches"},
{"lineNum":"  155","line":"    for(size_t t=0; t<2; ++t)"},
{"lineNum":"  156","line":"    {"},
{"lineNum":"  157","line":"        for(size_t b=0; b<sim[t].get_bunch_array_size(); ++b)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  158","line":"        {"},
{"lineNum":"  159","line":"            apply_bunch(sim[t][b], time_step, logger);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  160","line":"        }"},
{"lineNum":"  161","line":"    }"},
{"lineNum":"  162","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"void"},
{"lineNum":"  165","line":"Space_charge_2d_kv::apply_bunch("},
{"lineNum":"  166","line":"            Bunch& bunch,"},
{"lineNum":"  167","line":"            double time_step,"},
{"lineNum":"  168","line":"            Logger& logger)"},
{"lineNum":"  169","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  170","line":"    auto mean = Core_diagnostics::calculate_mean(bunch);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  171","line":"    auto std  = Core_diagnostics::calculate_std(bunch, mean);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"    // dp/p kick ="},
{"lineNum":"  174","line":"    //"},
{"lineNum":"  175","line":"    //   N r_p * (1/gamma**2) *        delta-t   *         (1/(beta*gamma)) * unit_E_field"},
{"lineNum":"  176","line":"    //              E-B cancellation                               ^"},
{"lineNum":"  177","line":"    //                                                             |"},
{"lineNum":"  178","line":"    //                                                       1/p to get dp/p"},
{"lineNum":"  179","line":"    //"},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"    double beta = bunch.get_reference_particle().get_beta();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  182","line":"    double gamma = bunch.get_reference_particle().get_gamma();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"    double factor = pconstants::rp * pconstants::c"},
{"lineNum":"  185","line":"        * time_step / (gamma*gamma*gamma*beta);"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"    // set longitudinal density depending on the longitudinal flag"},
{"lineNum":"  188","line":"    double total_q = bunch.get_real_num()*bunch.get_particle_charge();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"    double offx = 0;"},
{"lineNum":"  191","line":"    double offy = 0;"},
{"lineNum":"  192","line":"    double offz = 0;"},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"    if (!opts.strictly_centered)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  195","line":"    {"},
{"lineNum":"  196","line":"        offx = mean(0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  197","line":"        offy = mean(2);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  198","line":"        offz = mean(4);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  199","line":"    }"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"    auto parts = bunch.get_local_particles();"},
{"lineNum":"  202","line":"    auto masks = bunch.get_local_particle_masks();"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"    if (opts.longitudinal_distribution ==","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  205","line":"            Space_charge_2d_kv_options::LD::uniform)"},
{"lineNum":"  206","line":"    {"},
{"lineNum":"  207","line":"        // if longitudinally uniform, set the length based on"},
{"lineNum":"  208","line":"        // sqrt(12)*sigma_z because you might not necessarily"},
{"lineNum":"  209","line":"        // have a periodic bunch with a z_period_length and your"},
{"lineNum":"  210","line":"        // actual bunch may not fill the entire bucket."},
{"lineNum":"  211","line":"        double bunch_length = std::sqrt(12)*std(4)*beta;"},
{"lineNum":"  212","line":"        double line_charge_density = total_q / bunch_length;"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"        sc_kv_uniform alg{ parts, masks,","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  215","line":"            offx, offy, std(0), std(2),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  216","line":"            factor, line_charge_density,"},
{"lineNum":"  217","line":"            opts.strictly_linear };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"        Kokkos::parallel_for(bunch.size(), alg);"},
{"lineNum":"  220","line":"    }"},
{"lineNum":"  221","line":"    else"},
{"lineNum":"  222","line":"    {"},
{"lineNum":"  223","line":"        double coeff = total_q /"},
{"lineNum":"  224","line":"            (sqrt(2.0 * mconstants::pi) * std(4) * beta);"},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"        sc_kv_gaussian alg{ parts, masks,","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  227","line":"            offx, offy, offz,"},
{"lineNum":"  228","line":"            std(0), std(2), std(4),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  229","line":"            factor, coeff,"},
{"lineNum":"  230","line":"            opts.strictly_linear };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"        Kokkos::parallel_for(bunch.size(), alg);"},
{"lineNum":"  233","line":"    }"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  236","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  237","line":""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 54, "covered" : 0,};
var merged_data = [];
