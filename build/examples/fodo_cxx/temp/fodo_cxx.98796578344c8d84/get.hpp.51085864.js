var data = {lines:[
{"lineNum":"    1","line":"//-----------------------------------------------------------------------------"},
{"lineNum":"    2","line":"// boost variant/get.hpp header file"},
{"lineNum":"    3","line":"// See http://www.boost.org for updates, documentation, and revision history."},
{"lineNum":"    4","line":"//-----------------------------------------------------------------------------"},
{"lineNum":"    5","line":"//"},
{"lineNum":"    6","line":"// Copyright (c) 2003 Eric Friedman, Itay Maman"},
{"lineNum":"    7","line":"// Copyright (c) 2014-2019 Antony Polukhin"},
{"lineNum":"    8","line":"//"},
{"lineNum":"    9","line":"// Distributed under the Boost Software License, Version 1.0. (See"},
{"lineNum":"   10","line":"// accompanying file LICENSE_1_0.txt or copy at"},
{"lineNum":"   11","line":"// http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"#ifndef BOOST_VARIANT_GET_HPP"},
{"lineNum":"   14","line":"#define BOOST_VARIANT_GET_HPP"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"#include <exception>"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"#include <boost/config.hpp>"},
{"lineNum":"   19","line":"#include <boost/detail/workaround.hpp>"},
{"lineNum":"   20","line":"#include <boost/static_assert.hpp>"},
{"lineNum":"   21","line":"#include <boost/throw_exception.hpp>"},
{"lineNum":"   22","line":"#include <boost/utility/addressof.hpp>"},
{"lineNum":"   23","line":"#include <boost/variant/variant_fwd.hpp>"},
{"lineNum":"   24","line":"#include <boost/variant/detail/element_index.hpp>"},
{"lineNum":"   25","line":"#include <boost/variant/detail/move.hpp>"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"#include <boost/type_traits/add_reference.hpp>"},
{"lineNum":"   28","line":"#include <boost/type_traits/add_pointer.hpp>"},
{"lineNum":"   29","line":"#include <boost/type_traits/is_lvalue_reference.hpp>"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"namespace boost {"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"#if defined(BOOST_CLANG)"},
{"lineNum":"   34","line":"#   pragma clang diagnostic push"},
{"lineNum":"   35","line":"#   pragma clang diagnostic ignored \"-Wweak-vtables\""},
{"lineNum":"   36","line":"#endif"},
{"lineNum":"   37","line":"//////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   38","line":"// class bad_get"},
{"lineNum":"   39","line":"//"},
{"lineNum":"   40","line":"// The exception thrown in the event of a failed get of a value."},
{"lineNum":"   41","line":"//"},
{"lineNum":"   42","line":"class BOOST_SYMBOL_VISIBLE bad_get","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":"   43","line":"    : public std::exception"},
{"lineNum":"   44","line":"{"},
{"lineNum":"   45","line":"public: // std::exception implementation"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"    virtual const char * what() const BOOST_NOEXCEPT_OR_NOTHROW"},
{"lineNum":"   48","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   49","line":"        return \"boost::bad_get: \"","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   50","line":"               \"failed value get using boost::get\";"},
{"lineNum":"   51","line":"    }"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"};"},
{"lineNum":"   54","line":"#if defined(BOOST_CLANG)"},
{"lineNum":"   55","line":"#   pragma clang diagnostic pop"},
{"lineNum":"   56","line":"#endif"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"//////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   60","line":"// function template get<T>"},
{"lineNum":"   61","line":"//"},
{"lineNum":"   62","line":"// Retrieves content of given variant object if content is of type T."},
{"lineNum":"   63","line":"// Otherwise: pointer ver. returns 0; reference ver. throws bad_get."},
{"lineNum":"   64","line":"//"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"namespace detail { namespace variant {"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"// (detail) class template get_visitor"},
{"lineNum":"   69","line":"//"},
{"lineNum":"   70","line":"// Generic static visitor that: if the value is of the specified type,"},
{"lineNum":"   71","line":"// returns a pointer to the value it visits; else a null pointer."},
{"lineNum":"   72","line":"//"},
{"lineNum":"   73","line":"template <typename T>"},
{"lineNum":"   74","line":"struct get_visitor"},
{"lineNum":"   75","line":"{"},
{"lineNum":"   76","line":"private: // private typedefs"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"    typedef typename add_pointer<T>::type pointer;"},
{"lineNum":"   79","line":"    typedef typename add_reference<T>::type reference;"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"public: // visitor typedefs"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"    typedef pointer result_type;"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"public: // visitor interfaces"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"    pointer operator()(reference operand) const BOOST_NOEXCEPT"},
{"lineNum":"   88","line":"    {"},
{"lineNum":"   89","line":"        return boost::addressof(operand);"},
{"lineNum":"   90","line":"    }"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"    template <typename U>"},
{"lineNum":"   93","line":"    pointer operator()(const U&) const BOOST_NOEXCEPT"},
{"lineNum":"   94","line":"    {"},
{"lineNum":"   95","line":"        return static_cast<pointer>(0);"},
{"lineNum":"   96","line":"    }"},
{"lineNum":"   97","line":"};"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"}} // namespace detail::variant"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"#ifndef BOOST_VARIANT_AUX_GET_EXPLICIT_TEMPLATE_TYPE"},
{"lineNum":"  102","line":"#   if !BOOST_WORKAROUND(__BORLANDC__, BOOST_TESTED_AT(0x0551))"},
{"lineNum":"  103","line":"#       define BOOST_VARIANT_AUX_GET_EXPLICIT_TEMPLATE_TYPE(t)"},
{"lineNum":"  104","line":"#   else"},
{"lineNum":"  105","line":"#       define BOOST_VARIANT_AUX_GET_EXPLICIT_TEMPLATE_TYPE(t)  \\"},
{"lineNum":"  106","line":"        , t* = 0"},
{"lineNum":"  107","line":"#   endif"},
{"lineNum":"  108","line":"#endif"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"/////////////////////////////////////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  111","line":"// relaxed_get<U>(variant) methods"},
{"lineNum":"  112","line":"//"},
{"lineNum":"  113","line":"template <typename U, BOOST_VARIANT_ENUM_PARAMS(typename T) >"},
{"lineNum":"  114","line":"inline"},
{"lineNum":"  115","line":"    typename add_pointer<U>::type"},
{"lineNum":"  116","line":"relaxed_get("},
{"lineNum":"  117","line":"      boost::variant< BOOST_VARIANT_ENUM_PARAMS(T) >* operand"},
{"lineNum":"  118","line":"      BOOST_VARIANT_AUX_GET_EXPLICIT_TEMPLATE_TYPE(U)"},
{"lineNum":"  119","line":"    ) BOOST_NOEXCEPT"},
{"lineNum":"  120","line":"{"},
{"lineNum":"  121","line":"    typedef typename add_pointer<U>::type U_ptr;"},
{"lineNum":"  122","line":"    if (!operand) return static_cast<U_ptr>(0);"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"    detail::variant::get_visitor<U> v;"},
{"lineNum":"  125","line":"    return operand->apply_visitor(v);"},
{"lineNum":"  126","line":"}","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"template <typename U, BOOST_VARIANT_ENUM_PARAMS(typename T) >"},
{"lineNum":"  129","line":"inline"},
{"lineNum":"  130","line":"    typename add_pointer<const U>::type"},
{"lineNum":"  131","line":"relaxed_get("},
{"lineNum":"  132","line":"      const boost::variant< BOOST_VARIANT_ENUM_PARAMS(T) >* operand"},
{"lineNum":"  133","line":"      BOOST_VARIANT_AUX_GET_EXPLICIT_TEMPLATE_TYPE(U)"},
{"lineNum":"  134","line":"    ) BOOST_NOEXCEPT"},
{"lineNum":"  135","line":"{"},
{"lineNum":"  136","line":"    typedef typename add_pointer<const U>::type U_ptr;"},
{"lineNum":"  137","line":"    if (!operand) return static_cast<U_ptr>(0);"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"    detail::variant::get_visitor<const U> v;"},
{"lineNum":"  140","line":"    return operand->apply_visitor(v);"},
{"lineNum":"  141","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"template <typename U, BOOST_VARIANT_ENUM_PARAMS(typename T) >"},
{"lineNum":"  144","line":"inline"},
{"lineNum":"  145","line":"    typename add_reference<U>::type"},
{"lineNum":"  146","line":"relaxed_get("},
{"lineNum":"  147","line":"      boost::variant< BOOST_VARIANT_ENUM_PARAMS(T) >& operand"},
{"lineNum":"  148","line":"      BOOST_VARIANT_AUX_GET_EXPLICIT_TEMPLATE_TYPE(U)"},
{"lineNum":"  149","line":"    )"},
{"lineNum":"  150","line":"{"},
{"lineNum":"  151","line":"    typedef typename add_pointer<U>::type U_ptr;"},
{"lineNum":"  152","line":"    U_ptr result = relaxed_get<U>(boost::addressof(operand));"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"    if (!result)","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  155","line":"        boost::throw_exception(bad_get());","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  156","line":"    return *result;"},
{"lineNum":"  157","line":"}"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"template <typename U, BOOST_VARIANT_ENUM_PARAMS(typename T) >"},
{"lineNum":"  160","line":"inline"},
{"lineNum":"  161","line":"    typename add_reference<const U>::type"},
{"lineNum":"  162","line":"relaxed_get("},
{"lineNum":"  163","line":"      const boost::variant< BOOST_VARIANT_ENUM_PARAMS(T) >& operand"},
{"lineNum":"  164","line":"      BOOST_VARIANT_AUX_GET_EXPLICIT_TEMPLATE_TYPE(U)"},
{"lineNum":"  165","line":"    )"},
{"lineNum":"  166","line":"{"},
{"lineNum":"  167","line":"    typedef typename add_pointer<const U>::type U_ptr;"},
{"lineNum":"  168","line":"    U_ptr result = relaxed_get<const U>(boost::addressof(operand));"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"    if (!result)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  171","line":"        boost::throw_exception(bad_get());","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  172","line":"    return *result;"},
{"lineNum":"  173","line":"}"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"#ifndef BOOST_NO_CXX11_RVALUE_REFERENCES"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"#if defined(BOOST_MSVC) && (_MSC_VER < 1900) // MSVC-2014 has fixed the incorrect diagnostics."},
{"lineNum":"  178","line":"#   pragma warning(push)"},
{"lineNum":"  179","line":"#   pragma warning(disable: 4172) // returning address of local variable or temporary"},
{"lineNum":"  180","line":"#endif"},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"template <typename U, BOOST_VARIANT_ENUM_PARAMS(typename T) >"},
{"lineNum":"  183","line":"inline"},
{"lineNum":"  184","line":"    U&&"},
{"lineNum":"  185","line":"relaxed_get("},
{"lineNum":"  186","line":"      boost::variant< BOOST_VARIANT_ENUM_PARAMS(T) >&& operand"},
{"lineNum":"  187","line":"      BOOST_VARIANT_AUX_GET_EXPLICIT_TEMPLATE_TYPE(U)"},
{"lineNum":"  188","line":"    )"},
{"lineNum":"  189","line":"{"},
{"lineNum":"  190","line":"    typedef typename add_pointer<U>::type U_ptr;"},
{"lineNum":"  191","line":"    U_ptr result = relaxed_get<U>(boost::addressof(operand));"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"    if (!result)"},
{"lineNum":"  194","line":"        boost::throw_exception(bad_get());"},
{"lineNum":"  195","line":"    return static_cast<U&&>(*result);"},
{"lineNum":"  196","line":"}"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"#if defined(BOOST_MSVC) && (_MSC_VER < 1900)"},
{"lineNum":"  199","line":"#   pragma warning(pop)"},
{"lineNum":"  200","line":"#endif"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"#endif"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"/////////////////////////////////////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  205","line":"// strict_get<U>(variant) methods"},
{"lineNum":"  206","line":"//"},
{"lineNum":"  207","line":"template <typename U, BOOST_VARIANT_ENUM_PARAMS(typename T) >"},
{"lineNum":"  208","line":"inline"},
{"lineNum":"  209","line":"    typename add_pointer<U>::type"},
{"lineNum":"  210","line":"strict_get("},
{"lineNum":"  211","line":"      boost::variant< BOOST_VARIANT_ENUM_PARAMS(T) >* operand"},
{"lineNum":"  212","line":"      BOOST_VARIANT_AUX_GET_EXPLICIT_TEMPLATE_TYPE(U)"},
{"lineNum":"  213","line":"    ) BOOST_NOEXCEPT"},
{"lineNum":"  214","line":"{"},
{"lineNum":"  215","line":"    BOOST_STATIC_ASSERT_MSG("},
{"lineNum":"  216","line":"        (boost::detail::variant::holds_element<boost::variant< BOOST_VARIANT_ENUM_PARAMS(T) >, U >::value),"},
{"lineNum":"  217","line":"        \"boost::variant does not contain specified type U, \""},
{"lineNum":"  218","line":"        \"call to boost::get<U>(boost::variant<T...>*) will always return NULL\""},
{"lineNum":"  219","line":"    );"},
{"lineNum":"  220","line":""},
{"lineNum":"  221","line":"    return relaxed_get<U>(operand);"},
{"lineNum":"  222","line":"}"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"template <typename U, BOOST_VARIANT_ENUM_PARAMS(typename T) >"},
{"lineNum":"  225","line":"inline"},
{"lineNum":"  226","line":"    typename add_pointer<const U>::type"},
{"lineNum":"  227","line":"strict_get("},
{"lineNum":"  228","line":"      const boost::variant< BOOST_VARIANT_ENUM_PARAMS(T) >* operand"},
{"lineNum":"  229","line":"      BOOST_VARIANT_AUX_GET_EXPLICIT_TEMPLATE_TYPE(U)"},
{"lineNum":"  230","line":"    ) BOOST_NOEXCEPT"},
{"lineNum":"  231","line":"{"},
{"lineNum":"  232","line":"    BOOST_STATIC_ASSERT_MSG("},
{"lineNum":"  233","line":"        (boost::detail::variant::holds_element<boost::variant< BOOST_VARIANT_ENUM_PARAMS(T) >, const U >::value),"},
{"lineNum":"  234","line":"        \"boost::variant does not contain specified type U, \""},
{"lineNum":"  235","line":"        \"call to boost::get<U>(const boost::variant<T...>*) will always return NULL\""},
{"lineNum":"  236","line":"    );"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"    return relaxed_get<U>(operand);"},
{"lineNum":"  239","line":"}"},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"template <typename U, BOOST_VARIANT_ENUM_PARAMS(typename T) >"},
{"lineNum":"  242","line":"inline"},
{"lineNum":"  243","line":"    typename add_reference<U>::type"},
{"lineNum":"  244","line":"strict_get("},
{"lineNum":"  245","line":"      boost::variant< BOOST_VARIANT_ENUM_PARAMS(T) >& operand"},
{"lineNum":"  246","line":"      BOOST_VARIANT_AUX_GET_EXPLICIT_TEMPLATE_TYPE(U)"},
{"lineNum":"  247","line":"    )"},
{"lineNum":"  248","line":"{"},
{"lineNum":"  249","line":"    BOOST_STATIC_ASSERT_MSG("},
{"lineNum":"  250","line":"        (boost::detail::variant::holds_element<boost::variant< BOOST_VARIANT_ENUM_PARAMS(T) >, U >::value),"},
{"lineNum":"  251","line":"        \"boost::variant does not contain specified type U, \""},
{"lineNum":"  252","line":"        \"call to boost::get<U>(boost::variant<T...>&) will always throw boost::bad_get exception\""},
{"lineNum":"  253","line":"    );"},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"    return relaxed_get<U>(operand);"},
{"lineNum":"  256","line":"}"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"template <typename U, BOOST_VARIANT_ENUM_PARAMS(typename T) >"},
{"lineNum":"  259","line":"inline"},
{"lineNum":"  260","line":"    typename add_reference<const U>::type"},
{"lineNum":"  261","line":"strict_get("},
{"lineNum":"  262","line":"      const boost::variant< BOOST_VARIANT_ENUM_PARAMS(T) >& operand"},
{"lineNum":"  263","line":"      BOOST_VARIANT_AUX_GET_EXPLICIT_TEMPLATE_TYPE(U)"},
{"lineNum":"  264","line":"    )"},
{"lineNum":"  265","line":"{"},
{"lineNum":"  266","line":"    BOOST_STATIC_ASSERT_MSG("},
{"lineNum":"  267","line":"        (boost::detail::variant::holds_element<boost::variant< BOOST_VARIANT_ENUM_PARAMS(T) >, const U >::value),"},
{"lineNum":"  268","line":"        \"boost::variant does not contain specified type U, \""},
{"lineNum":"  269","line":"        \"call to boost::get<U>(const boost::variant<T...>&) will always throw boost::bad_get exception\""},
{"lineNum":"  270","line":"    );"},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"    return relaxed_get<U>(operand);"},
{"lineNum":"  273","line":"}"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"#ifndef BOOST_NO_CXX11_RVALUE_REFERENCES"},
{"lineNum":"  276","line":"template <typename U, BOOST_VARIANT_ENUM_PARAMS(typename T) >"},
{"lineNum":"  277","line":"inline"},
{"lineNum":"  278","line":"    U&&"},
{"lineNum":"  279","line":"strict_get("},
{"lineNum":"  280","line":"      boost::variant< BOOST_VARIANT_ENUM_PARAMS(T) >&& operand"},
{"lineNum":"  281","line":"      BOOST_VARIANT_AUX_GET_EXPLICIT_TEMPLATE_TYPE(U)"},
{"lineNum":"  282","line":"    )"},
{"lineNum":"  283","line":"{"},
{"lineNum":"  284","line":"    BOOST_STATIC_ASSERT_MSG("},
{"lineNum":"  285","line":"        (!boost::is_lvalue_reference<U>::value),"},
{"lineNum":"  286","line":"        \"remove ampersand \'&\' from template type U in boost::get<U>(boost::variant<T...>&&) \""},
{"lineNum":"  287","line":"    );"},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"    BOOST_STATIC_ASSERT_MSG("},
{"lineNum":"  290","line":"        (boost::detail::variant::holds_element<boost::variant< BOOST_VARIANT_ENUM_PARAMS(T) >, U >::value),"},
{"lineNum":"  291","line":"        \"boost::variant does not contain specified type U, \""},
{"lineNum":"  292","line":"        \"call to boost::get<U>(const boost::variant<T...>&) will always throw boost::bad_get exception\""},
{"lineNum":"  293","line":"    );"},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":"    return relaxed_get<U>(detail::variant::move(operand));"},
{"lineNum":"  296","line":"}"},
{"lineNum":"  297","line":"#endif"},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"/////////////////////////////////////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  300","line":"// get<U>(variant) methods"},
{"lineNum":"  301","line":"//"},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"template <typename U, BOOST_VARIANT_ENUM_PARAMS(typename T) >"},
{"lineNum":"  304","line":"inline"},
{"lineNum":"  305","line":"    typename add_pointer<U>::type"},
{"lineNum":"  306","line":"get("},
{"lineNum":"  307","line":"      boost::variant< BOOST_VARIANT_ENUM_PARAMS(T) >* operand"},
{"lineNum":"  308","line":"      BOOST_VARIANT_AUX_GET_EXPLICIT_TEMPLATE_TYPE(U)"},
{"lineNum":"  309","line":"    ) BOOST_NOEXCEPT"},
{"lineNum":"  310","line":"{"},
{"lineNum":"  311","line":"#ifdef BOOST_VARIANT_USE_RELAXED_GET_BY_DEFAULT"},
{"lineNum":"  312","line":"    return relaxed_get<U>(operand);"},
{"lineNum":"  313","line":"#else"},
{"lineNum":"  314","line":"    return strict_get<U>(operand);"},
{"lineNum":"  315","line":"#endif"},
{"lineNum":"  316","line":""},
{"lineNum":"  317","line":"}"},
{"lineNum":"  318","line":""},
{"lineNum":"  319","line":"template <typename U, BOOST_VARIANT_ENUM_PARAMS(typename T) >"},
{"lineNum":"  320","line":"inline"},
{"lineNum":"  321","line":"    typename add_pointer<const U>::type"},
{"lineNum":"  322","line":"get("},
{"lineNum":"  323","line":"      const boost::variant< BOOST_VARIANT_ENUM_PARAMS(T) >* operand"},
{"lineNum":"  324","line":"      BOOST_VARIANT_AUX_GET_EXPLICIT_TEMPLATE_TYPE(U)"},
{"lineNum":"  325","line":"    ) BOOST_NOEXCEPT"},
{"lineNum":"  326","line":"{"},
{"lineNum":"  327","line":"#ifdef BOOST_VARIANT_USE_RELAXED_GET_BY_DEFAULT"},
{"lineNum":"  328","line":"    return relaxed_get<U>(operand);"},
{"lineNum":"  329","line":"#else"},
{"lineNum":"  330","line":"    return strict_get<U>(operand);"},
{"lineNum":"  331","line":"#endif"},
{"lineNum":"  332","line":"}"},
{"lineNum":"  333","line":""},
{"lineNum":"  334","line":"template <typename U, BOOST_VARIANT_ENUM_PARAMS(typename T) >"},
{"lineNum":"  335","line":"inline"},
{"lineNum":"  336","line":"    typename add_reference<U>::type"},
{"lineNum":"  337","line":"get("},
{"lineNum":"  338","line":"      boost::variant< BOOST_VARIANT_ENUM_PARAMS(T) >& operand"},
{"lineNum":"  339","line":"      BOOST_VARIANT_AUX_GET_EXPLICIT_TEMPLATE_TYPE(U)"},
{"lineNum":"  340","line":"    )"},
{"lineNum":"  341","line":"{"},
{"lineNum":"  342","line":"#ifdef BOOST_VARIANT_USE_RELAXED_GET_BY_DEFAULT"},
{"lineNum":"  343","line":"    return relaxed_get<U>(operand);"},
{"lineNum":"  344","line":"#else"},
{"lineNum":"  345","line":"    return strict_get<U>(operand);"},
{"lineNum":"  346","line":"#endif"},
{"lineNum":"  347","line":"}"},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"template <typename U, BOOST_VARIANT_ENUM_PARAMS(typename T) >"},
{"lineNum":"  350","line":"inline"},
{"lineNum":"  351","line":"    typename add_reference<const U>::type"},
{"lineNum":"  352","line":"get("},
{"lineNum":"  353","line":"      const boost::variant< BOOST_VARIANT_ENUM_PARAMS(T) >& operand"},
{"lineNum":"  354","line":"      BOOST_VARIANT_AUX_GET_EXPLICIT_TEMPLATE_TYPE(U)"},
{"lineNum":"  355","line":"    )"},
{"lineNum":"  356","line":"{"},
{"lineNum":"  357","line":"#ifdef BOOST_VARIANT_USE_RELAXED_GET_BY_DEFAULT"},
{"lineNum":"  358","line":"    return relaxed_get<U>(operand);"},
{"lineNum":"  359","line":"#else"},
{"lineNum":"  360","line":"    return strict_get<U>(operand);"},
{"lineNum":"  361","line":"#endif"},
{"lineNum":"  362","line":"}"},
{"lineNum":"  363","line":""},
{"lineNum":"  364","line":"#ifndef BOOST_NO_CXX11_RVALUE_REFERENCES"},
{"lineNum":"  365","line":"template <typename U, BOOST_VARIANT_ENUM_PARAMS(typename T) >"},
{"lineNum":"  366","line":"inline"},
{"lineNum":"  367","line":"    U&&"},
{"lineNum":"  368","line":"get("},
{"lineNum":"  369","line":"      boost::variant< BOOST_VARIANT_ENUM_PARAMS(T) >&& operand"},
{"lineNum":"  370","line":"      BOOST_VARIANT_AUX_GET_EXPLICIT_TEMPLATE_TYPE(U)"},
{"lineNum":"  371","line":"    )"},
{"lineNum":"  372","line":"{"},
{"lineNum":"  373","line":"#ifdef BOOST_VARIANT_USE_RELAXED_GET_BY_DEFAULT"},
{"lineNum":"  374","line":"    return relaxed_get<U>(detail::variant::move(operand));"},
{"lineNum":"  375","line":"#else"},
{"lineNum":"  376","line":"    return strict_get<U>(detail::variant::move(operand));"},
{"lineNum":"  377","line":"#endif"},
{"lineNum":"  378","line":"}"},
{"lineNum":"  379","line":"#endif"},
{"lineNum":"  380","line":""},
{"lineNum":"  381","line":"} // namespace boost"},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"#endif // BOOST_VARIANT_GET_HPP"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 9, "covered" : 0,};
var merged_data = [];
