var data = {lines:[
{"lineNum":"    1","line":"// -*- C++ -*-"},
{"lineNum":"    2","line":"//===------------------------------ vector --------------------------------===//"},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions."},
{"lineNum":"    5","line":"// See https://llvm.org/LICENSE.txt for license information."},
{"lineNum":"    6","line":"// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef _LIBCPP_VECTOR"},
{"lineNum":"   11","line":"#define _LIBCPP_VECTOR"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"/*"},
{"lineNum":"   14","line":"    vector synopsis"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"namespace std"},
{"lineNum":"   17","line":"{"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"template <class T, class Allocator = allocator<T> >"},
{"lineNum":"   20","line":"class vector"},
{"lineNum":"   21","line":"{"},
{"lineNum":"   22","line":"public:"},
{"lineNum":"   23","line":"    typedef T                                        value_type;"},
{"lineNum":"   24","line":"    typedef Allocator                                allocator_type;"},
{"lineNum":"   25","line":"    typedef typename allocator_type::reference       reference;"},
{"lineNum":"   26","line":"    typedef typename allocator_type::const_reference const_reference;"},
{"lineNum":"   27","line":"    typedef implementation-defined                   iterator;"},
{"lineNum":"   28","line":"    typedef implementation-defined                   const_iterator;"},
{"lineNum":"   29","line":"    typedef typename allocator_type::size_type       size_type;"},
{"lineNum":"   30","line":"    typedef typename allocator_type::difference_type difference_type;"},
{"lineNum":"   31","line":"    typedef typename allocator_type::pointer         pointer;"},
{"lineNum":"   32","line":"    typedef typename allocator_type::const_pointer   const_pointer;"},
{"lineNum":"   33","line":"    typedef std::reverse_iterator<iterator>          reverse_iterator;"},
{"lineNum":"   34","line":"    typedef std::reverse_iterator<const_iterator>    const_reverse_iterator;"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"    vector()"},
{"lineNum":"   37","line":"        noexcept(is_nothrow_default_constructible<allocator_type>::value);"},
{"lineNum":"   38","line":"    explicit vector(const allocator_type&);"},
{"lineNum":"   39","line":"    explicit vector(size_type n);"},
{"lineNum":"   40","line":"    explicit vector(size_type n, const allocator_type&); // C++14"},
{"lineNum":"   41","line":"    vector(size_type n, const value_type& value, const allocator_type& = allocator_type());"},
{"lineNum":"   42","line":"    template <class InputIterator>"},
{"lineNum":"   43","line":"        vector(InputIterator first, InputIterator last, const allocator_type& = allocator_type());"},
{"lineNum":"   44","line":"    vector(const vector& x);"},
{"lineNum":"   45","line":"    vector(vector&& x)"},
{"lineNum":"   46","line":"        noexcept(is_nothrow_move_constructible<allocator_type>::value);"},
{"lineNum":"   47","line":"    vector(initializer_list<value_type> il);"},
{"lineNum":"   48","line":"    vector(initializer_list<value_type> il, const allocator_type& a);"},
{"lineNum":"   49","line":"    ~vector();"},
{"lineNum":"   50","line":"    vector& operator=(const vector& x);"},
{"lineNum":"   51","line":"    vector& operator=(vector&& x)"},
{"lineNum":"   52","line":"        noexcept("},
{"lineNum":"   53","line":"             allocator_type::propagate_on_container_move_assignment::value ||"},
{"lineNum":"   54","line":"             allocator_type::is_always_equal::value); // C++17"},
{"lineNum":"   55","line":"    vector& operator=(initializer_list<value_type> il);"},
{"lineNum":"   56","line":"    template <class InputIterator>"},
{"lineNum":"   57","line":"        void assign(InputIterator first, InputIterator last);"},
{"lineNum":"   58","line":"    void assign(size_type n, const value_type& u);"},
{"lineNum":"   59","line":"    void assign(initializer_list<value_type> il);"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"    allocator_type get_allocator() const noexcept;"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"    iterator               begin() noexcept;"},
{"lineNum":"   64","line":"    const_iterator         begin()   const noexcept;"},
{"lineNum":"   65","line":"    iterator               end() noexcept;"},
{"lineNum":"   66","line":"    const_iterator         end()     const noexcept;"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"    reverse_iterator       rbegin() noexcept;"},
{"lineNum":"   69","line":"    const_reverse_iterator rbegin()  const noexcept;"},
{"lineNum":"   70","line":"    reverse_iterator       rend() noexcept;"},
{"lineNum":"   71","line":"    const_reverse_iterator rend()    const noexcept;"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"    const_iterator         cbegin()  const noexcept;"},
{"lineNum":"   74","line":"    const_iterator         cend()    const noexcept;"},
{"lineNum":"   75","line":"    const_reverse_iterator crbegin() const noexcept;"},
{"lineNum":"   76","line":"    const_reverse_iterator crend()   const noexcept;"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"    size_type size() const noexcept;"},
{"lineNum":"   79","line":"    size_type max_size() const noexcept;"},
{"lineNum":"   80","line":"    size_type capacity() const noexcept;"},
{"lineNum":"   81","line":"    bool empty() const noexcept;"},
{"lineNum":"   82","line":"    void reserve(size_type n);"},
{"lineNum":"   83","line":"    void shrink_to_fit() noexcept;"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"    reference       operator[](size_type n);"},
{"lineNum":"   86","line":"    const_reference operator[](size_type n) const;"},
{"lineNum":"   87","line":"    reference       at(size_type n);"},
{"lineNum":"   88","line":"    const_reference at(size_type n) const;"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"    reference       front();"},
{"lineNum":"   91","line":"    const_reference front() const;"},
{"lineNum":"   92","line":"    reference       back();"},
{"lineNum":"   93","line":"    const_reference back() const;"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"    value_type*       data() noexcept;"},
{"lineNum":"   96","line":"    const value_type* data() const noexcept;"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"    void push_back(const value_type& x);"},
{"lineNum":"   99","line":"    void push_back(value_type&& x);"},
{"lineNum":"  100","line":"    template <class... Args>"},
{"lineNum":"  101","line":"        reference emplace_back(Args&&... args); // reference in C++17"},
{"lineNum":"  102","line":"    void pop_back();"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"    template <class... Args> iterator emplace(const_iterator position, Args&&... args);"},
{"lineNum":"  105","line":"    iterator insert(const_iterator position, const value_type& x);"},
{"lineNum":"  106","line":"    iterator insert(const_iterator position, value_type&& x);"},
{"lineNum":"  107","line":"    iterator insert(const_iterator position, size_type n, const value_type& x);"},
{"lineNum":"  108","line":"    template <class InputIterator>"},
{"lineNum":"  109","line":"        iterator insert(const_iterator position, InputIterator first, InputIterator last);"},
{"lineNum":"  110","line":"    iterator insert(const_iterator position, initializer_list<value_type> il);"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"    iterator erase(const_iterator position);"},
{"lineNum":"  113","line":"    iterator erase(const_iterator first, const_iterator last);"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"    void clear() noexcept;"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"    void resize(size_type sz);"},
{"lineNum":"  118","line":"    void resize(size_type sz, const value_type& c);"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"    void swap(vector&)"},
{"lineNum":"  121","line":"        noexcept(allocator_traits<allocator_type>::propagate_on_container_swap::value ||"},
{"lineNum":"  122","line":"                 allocator_traits<allocator_type>::is_always_equal::value);  // C++17"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"    bool __invariants() const;"},
{"lineNum":"  125","line":"};"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"template <class Allocator = allocator<T> >"},
{"lineNum":"  128","line":"class vector<bool, Allocator>"},
{"lineNum":"  129","line":"{"},
{"lineNum":"  130","line":"public:"},
{"lineNum":"  131","line":"    typedef bool                                     value_type;"},
{"lineNum":"  132","line":"    typedef Allocator                                allocator_type;"},
{"lineNum":"  133","line":"    typedef implementation-defined                   iterator;"},
{"lineNum":"  134","line":"    typedef implementation-defined                   const_iterator;"},
{"lineNum":"  135","line":"    typedef typename allocator_type::size_type       size_type;"},
{"lineNum":"  136","line":"    typedef typename allocator_type::difference_type difference_type;"},
{"lineNum":"  137","line":"    typedef iterator                                 pointer;"},
{"lineNum":"  138","line":"    typedef const_iterator                           const_pointer;"},
{"lineNum":"  139","line":"    typedef std::reverse_iterator<iterator>          reverse_iterator;"},
{"lineNum":"  140","line":"    typedef std::reverse_iterator<const_iterator>    const_reverse_iterator;"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"    class reference"},
{"lineNum":"  143","line":"    {"},
{"lineNum":"  144","line":"    public:"},
{"lineNum":"  145","line":"        reference(const reference&) noexcept;"},
{"lineNum":"  146","line":"        operator bool() const noexcept;"},
{"lineNum":"  147","line":"        reference& operator=(bool x) noexcept;"},
{"lineNum":"  148","line":"        reference& operator=(const reference& x) noexcept;"},
{"lineNum":"  149","line":"        iterator operator&() const noexcept;"},
{"lineNum":"  150","line":"        void flip() noexcept;"},
{"lineNum":"  151","line":"    };"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"    class const_reference"},
{"lineNum":"  154","line":"    {"},
{"lineNum":"  155","line":"    public:"},
{"lineNum":"  156","line":"        const_reference(const reference&) noexcept;"},
{"lineNum":"  157","line":"        operator bool() const noexcept;"},
{"lineNum":"  158","line":"        const_iterator operator&() const noexcept;"},
{"lineNum":"  159","line":"    };"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"    vector()"},
{"lineNum":"  162","line":"        noexcept(is_nothrow_default_constructible<allocator_type>::value);"},
{"lineNum":"  163","line":"    explicit vector(const allocator_type&);"},
{"lineNum":"  164","line":"    explicit vector(size_type n, const allocator_type& a = allocator_type()); // C++14"},
{"lineNum":"  165","line":"    vector(size_type n, const value_type& value, const allocator_type& = allocator_type());"},
{"lineNum":"  166","line":"    template <class InputIterator>"},
{"lineNum":"  167","line":"        vector(InputIterator first, InputIterator last, const allocator_type& = allocator_type());"},
{"lineNum":"  168","line":"    vector(const vector& x);"},
{"lineNum":"  169","line":"    vector(vector&& x)"},
{"lineNum":"  170","line":"        noexcept(is_nothrow_move_constructible<allocator_type>::value);"},
{"lineNum":"  171","line":"    vector(initializer_list<value_type> il);"},
{"lineNum":"  172","line":"    vector(initializer_list<value_type> il, const allocator_type& a);"},
{"lineNum":"  173","line":"    ~vector();"},
{"lineNum":"  174","line":"    vector& operator=(const vector& x);"},
{"lineNum":"  175","line":"    vector& operator=(vector&& x)"},
{"lineNum":"  176","line":"        noexcept("},
{"lineNum":"  177","line":"             allocator_type::propagate_on_container_move_assignment::value ||"},
{"lineNum":"  178","line":"             allocator_type::is_always_equal::value); // C++17"},
{"lineNum":"  179","line":"    vector& operator=(initializer_list<value_type> il);"},
{"lineNum":"  180","line":"    template <class InputIterator>"},
{"lineNum":"  181","line":"        void assign(InputIterator first, InputIterator last);"},
{"lineNum":"  182","line":"    void assign(size_type n, const value_type& u);"},
{"lineNum":"  183","line":"    void assign(initializer_list<value_type> il);"},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"    allocator_type get_allocator() const noexcept;"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"    iterator               begin() noexcept;"},
{"lineNum":"  188","line":"    const_iterator         begin()   const noexcept;"},
{"lineNum":"  189","line":"    iterator               end() noexcept;"},
{"lineNum":"  190","line":"    const_iterator         end()     const noexcept;"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"    reverse_iterator       rbegin() noexcept;"},
{"lineNum":"  193","line":"    const_reverse_iterator rbegin()  const noexcept;"},
{"lineNum":"  194","line":"    reverse_iterator       rend() noexcept;"},
{"lineNum":"  195","line":"    const_reverse_iterator rend()    const noexcept;"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"    const_iterator         cbegin()  const noexcept;"},
{"lineNum":"  198","line":"    const_iterator         cend()    const noexcept;"},
{"lineNum":"  199","line":"    const_reverse_iterator crbegin() const noexcept;"},
{"lineNum":"  200","line":"    const_reverse_iterator crend()   const noexcept;"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"    size_type size() const noexcept;"},
{"lineNum":"  203","line":"    size_type max_size() const noexcept;"},
{"lineNum":"  204","line":"    size_type capacity() const noexcept;"},
{"lineNum":"  205","line":"    bool empty() const noexcept;"},
{"lineNum":"  206","line":"    void reserve(size_type n);"},
{"lineNum":"  207","line":"    void shrink_to_fit() noexcept;"},
{"lineNum":"  208","line":""},
{"lineNum":"  209","line":"    reference       operator[](size_type n);"},
{"lineNum":"  210","line":"    const_reference operator[](size_type n) const;"},
{"lineNum":"  211","line":"    reference       at(size_type n);"},
{"lineNum":"  212","line":"    const_reference at(size_type n) const;"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"    reference       front();"},
{"lineNum":"  215","line":"    const_reference front() const;"},
{"lineNum":"  216","line":"    reference       back();"},
{"lineNum":"  217","line":"    const_reference back() const;"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"    void push_back(const value_type& x);"},
{"lineNum":"  220","line":"    template <class... Args> reference emplace_back(Args&&... args);  // C++14; reference in C++17"},
{"lineNum":"  221","line":"    void pop_back();"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"    template <class... Args> iterator emplace(const_iterator position, Args&&... args);  // C++14"},
{"lineNum":"  224","line":"    iterator insert(const_iterator position, const value_type& x);"},
{"lineNum":"  225","line":"    iterator insert(const_iterator position, size_type n, const value_type& x);"},
{"lineNum":"  226","line":"    template <class InputIterator>"},
{"lineNum":"  227","line":"        iterator insert(const_iterator position, InputIterator first, InputIterator last);"},
{"lineNum":"  228","line":"    iterator insert(const_iterator position, initializer_list<value_type> il);"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"    iterator erase(const_iterator position);"},
{"lineNum":"  231","line":"    iterator erase(const_iterator first, const_iterator last);"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"    void clear() noexcept;"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"    void resize(size_type sz);"},
{"lineNum":"  236","line":"    void resize(size_type sz, value_type x);"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"    void swap(vector&)"},
{"lineNum":"  239","line":"        noexcept(allocator_traits<allocator_type>::propagate_on_container_swap::value ||"},
{"lineNum":"  240","line":"                 allocator_traits<allocator_type>::is_always_equal::value);  // C++17"},
{"lineNum":"  241","line":"    void flip() noexcept;"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"    bool __invariants() const;"},
{"lineNum":"  244","line":"};"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"template <class InputIterator, class Allocator = allocator<typename iterator_traits<InputIterator>::value_type>>"},
{"lineNum":"  247","line":"   vector(InputIterator, InputIterator, Allocator = Allocator())"},
{"lineNum":"  248","line":"   -> vector<typename iterator_traits<InputIterator>::value_type, Allocator>;"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"template <class Allocator> struct hash<std::vector<bool, Allocator>>;"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"template <class T, class Allocator> bool operator==(const vector<T,Allocator>& x, const vector<T,Allocator>& y);"},
{"lineNum":"  253","line":"template <class T, class Allocator> bool operator< (const vector<T,Allocator>& x, const vector<T,Allocator>& y);"},
{"lineNum":"  254","line":"template <class T, class Allocator> bool operator!=(const vector<T,Allocator>& x, const vector<T,Allocator>& y);"},
{"lineNum":"  255","line":"template <class T, class Allocator> bool operator> (const vector<T,Allocator>& x, const vector<T,Allocator>& y);"},
{"lineNum":"  256","line":"template <class T, class Allocator> bool operator>=(const vector<T,Allocator>& x, const vector<T,Allocator>& y);"},
{"lineNum":"  257","line":"template <class T, class Allocator> bool operator<=(const vector<T,Allocator>& x, const vector<T,Allocator>& y);"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"template <class T, class Allocator>"},
{"lineNum":"  260","line":"void swap(vector<T,Allocator>& x, vector<T,Allocator>& y)"},
{"lineNum":"  261","line":"    noexcept(noexcept(x.swap(y)));"},
{"lineNum":"  262","line":""},
{"lineNum":"  263","line":"template <class T, class Allocator, class U>"},
{"lineNum":"  264","line":"typename vector<T, Allocator>::size_type"},
{"lineNum":"  265","line":"erase(vector<T, Allocator>& c, const U& value);       // C++20"},
{"lineNum":"  266","line":"template <class T, class Allocator, class Predicate>"},
{"lineNum":"  267","line":"typename vector<T, Allocator>::size_type"},
{"lineNum":"  268","line":"erase_if(vector<T, Allocator>& c, Predicate pred);    // C++20"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"}  // std"},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"*/"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"#include <__config>"},
{"lineNum":"  275","line":"#include <__bit_reference>"},
{"lineNum":"  276","line":"#include <__debug>"},
{"lineNum":"  277","line":"#include <__functional_base>"},
{"lineNum":"  278","line":"#include <__iterator/wrap_iter.h>"},
{"lineNum":"  279","line":"#include <__split_buffer>"},
{"lineNum":"  280","line":"#include <__utility/forward.h>"},
{"lineNum":"  281","line":"#include <algorithm>"},
{"lineNum":"  282","line":"#include <climits>"},
{"lineNum":"  283","line":"#include <compare>"},
{"lineNum":"  284","line":"#include <cstdlib>"},
{"lineNum":"  285","line":"#include <cstring>"},
{"lineNum":"  286","line":"#include <initializer_list>"},
{"lineNum":"  287","line":"#include <iosfwd> // for forward declaration of vector"},
{"lineNum":"  288","line":"#include <limits>"},
{"lineNum":"  289","line":"#include <memory>"},
{"lineNum":"  290","line":"#include <stdexcept>"},
{"lineNum":"  291","line":"#include <type_traits>"},
{"lineNum":"  292","line":"#include <version>"},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"},
{"lineNum":"  295","line":"#pragma GCC system_header"},
{"lineNum":"  296","line":"#endif"},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":"_LIBCPP_PUSH_MACROS"},
{"lineNum":"  299","line":"#include <__undef_macros>"},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":"_LIBCPP_BEGIN_NAMESPACE_STD"},
{"lineNum":"  303","line":""},
{"lineNum":"  304","line":"template <bool>"},
{"lineNum":"  305","line":"class _LIBCPP_TEMPLATE_VIS __vector_base_common"},
{"lineNum":"  306","line":"{"},
{"lineNum":"  307","line":"protected:"},
{"lineNum":"  308","line":"    _LIBCPP_INLINE_VISIBILITY __vector_base_common() {}"},
{"lineNum":"  309","line":"    _LIBCPP_NORETURN void __throw_length_error() const;"},
{"lineNum":"  310","line":"    _LIBCPP_NORETURN void __throw_out_of_range() const;"},
{"lineNum":"  311","line":"};"},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":"template <bool __b>"},
{"lineNum":"  314","line":"void"},
{"lineNum":"  315","line":"__vector_base_common<__b>::__throw_length_error() const"},
{"lineNum":"  316","line":"{"},
{"lineNum":"  317","line":"    _VSTD::__throw_length_error(\"vector\");"},
{"lineNum":"  318","line":"}"},
{"lineNum":"  319","line":""},
{"lineNum":"  320","line":"template <bool __b>"},
{"lineNum":"  321","line":"void"},
{"lineNum":"  322","line":"__vector_base_common<__b>::__throw_out_of_range() const"},
{"lineNum":"  323","line":"{"},
{"lineNum":"  324","line":"    _VSTD::__throw_out_of_range(\"vector\");"},
{"lineNum":"  325","line":"}"},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"_LIBCPP_EXTERN_TEMPLATE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS __vector_base_common<true>)"},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"template <class _Tp, class _Allocator>"},
{"lineNum":"  330","line":"class __vector_base"},
{"lineNum":"  331","line":"    : protected __vector_base_common<true>"},
{"lineNum":"  332","line":"{"},
{"lineNum":"  333","line":"public:"},
{"lineNum":"  334","line":"    typedef _Allocator                               allocator_type;"},
{"lineNum":"  335","line":"    typedef allocator_traits<allocator_type>         __alloc_traits;"},
{"lineNum":"  336","line":"    typedef typename __alloc_traits::size_type       size_type;"},
{"lineNum":"  337","line":"protected:"},
{"lineNum":"  338","line":"    typedef _Tp                                      value_type;"},
{"lineNum":"  339","line":"    typedef value_type&                              reference;"},
{"lineNum":"  340","line":"    typedef const value_type&                        const_reference;"},
{"lineNum":"  341","line":"    typedef typename __alloc_traits::difference_type difference_type;"},
{"lineNum":"  342","line":"    typedef typename __alloc_traits::pointer         pointer;"},
{"lineNum":"  343","line":"    typedef typename __alloc_traits::const_pointer   const_pointer;"},
{"lineNum":"  344","line":"    typedef pointer                                  iterator;"},
{"lineNum":"  345","line":"    typedef const_pointer                            const_iterator;"},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"    pointer                                         __begin_;"},
{"lineNum":"  348","line":"    pointer                                         __end_;"},
{"lineNum":"  349","line":"    __compressed_pair<pointer, allocator_type> __end_cap_;"},
{"lineNum":"  350","line":""},
{"lineNum":"  351","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  352","line":"    allocator_type& __alloc() _NOEXCEPT"},
{"lineNum":"  353","line":"        {return __end_cap_.second();}","class":"linePartCov","hits":"3","order":"194","possible_hits":"35",},
{"lineNum":"  354","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  355","line":"    const allocator_type& __alloc() const _NOEXCEPT"},
{"lineNum":"  356","line":"        {return __end_cap_.second();}"},
{"lineNum":"  357","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  358","line":"    pointer& __end_cap() _NOEXCEPT"},
{"lineNum":"  359","line":"        {return __end_cap_.first();}"},
{"lineNum":"  360","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  361","line":"    const pointer& __end_cap() const _NOEXCEPT"},
{"lineNum":"  362","line":"        {return __end_cap_.first();}"},
{"lineNum":"  363","line":""},
{"lineNum":"  364","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  365","line":"    __vector_base()"},
{"lineNum":"  366","line":"        _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value);"},
{"lineNum":"  367","line":"    _LIBCPP_INLINE_VISIBILITY __vector_base(const allocator_type& __a);"},
{"lineNum":"  368","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  369","line":"    _LIBCPP_INLINE_VISIBILITY __vector_base(allocator_type&& __a) _NOEXCEPT;"},
{"lineNum":"  370","line":"#endif"},
{"lineNum":"  371","line":"    ~__vector_base();"},
{"lineNum":"  372","line":""},
{"lineNum":"  373","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  374","line":"    void clear() _NOEXCEPT {__destruct_at_end(__begin_);}","class":"lineNoCov","hits":"0","possible_hits":"68",},
{"lineNum":"  375","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  376","line":"    size_type capacity() const _NOEXCEPT"},
{"lineNum":"  377","line":"        {return static_cast<size_type>(__end_cap() - __begin_);}","class":"linePartCov","hits":"3","order":"200","possible_hits":"216",},
{"lineNum":"  378","line":""},
{"lineNum":"  379","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  380","line":"    void __destruct_at_end(pointer __new_last) _NOEXCEPT;"},
{"lineNum":"  381","line":""},
{"lineNum":"  382","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  383","line":"    void __copy_assign_alloc(const __vector_base& __c)"},
{"lineNum":"  384","line":"        {__copy_assign_alloc(__c, integral_constant<bool,"},
{"lineNum":"  385","line":"                      __alloc_traits::propagate_on_container_copy_assignment::value>());}"},
{"lineNum":"  386","line":""},
{"lineNum":"  387","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  388","line":"    void __move_assign_alloc(__vector_base& __c)"},
{"lineNum":"  389","line":"        _NOEXCEPT_("},
{"lineNum":"  390","line":"            !__alloc_traits::propagate_on_container_move_assignment::value ||"},
{"lineNum":"  391","line":"            is_nothrow_move_assignable<allocator_type>::value)"},
{"lineNum":"  392","line":"        {__move_assign_alloc(__c, integral_constant<bool,"},
{"lineNum":"  393","line":"                      __alloc_traits::propagate_on_container_move_assignment::value>());}"},
{"lineNum":"  394","line":""},
{"lineNum":"  395","line":"    _LIBCPP_NORETURN _LIBCPP_HIDE_FROM_ABI"},
{"lineNum":"  396","line":"    void __throw_length_error() const {","class":"lineNoCov","hits":"0","possible_hits":"74",},
{"lineNum":"  397","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  398","line":"        __vector_base_common<true>::__throw_length_error();","class":"lineNoCov","hits":"0","possible_hits":"147",},
{"lineNum":"  399","line":"#else"},
{"lineNum":"  400","line":"        _VSTD::abort();"},
{"lineNum":"  401","line":"#endif"},
{"lineNum":"  402","line":"    }"},
{"lineNum":"  403","line":""},
{"lineNum":"  404","line":"    _LIBCPP_NORETURN _LIBCPP_HIDE_FROM_ABI"},
{"lineNum":"  405","line":"    void __throw_out_of_range() const {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  406","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  407","line":"        __vector_base_common<true>::__throw_out_of_range();","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  408","line":"#else"},
{"lineNum":"  409","line":"        _VSTD::abort();"},
{"lineNum":"  410","line":"#endif"},
{"lineNum":"  411","line":"    }"},
{"lineNum":"  412","line":""},
{"lineNum":"  413","line":"private:"},
{"lineNum":"  414","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  415","line":"    void __copy_assign_alloc(const __vector_base& __c, true_type)"},
{"lineNum":"  416","line":"        {"},
{"lineNum":"  417","line":"            if (__alloc() != __c.__alloc())"},
{"lineNum":"  418","line":"            {"},
{"lineNum":"  419","line":"                clear();"},
{"lineNum":"  420","line":"                __alloc_traits::deallocate(__alloc(), __begin_, capacity());"},
{"lineNum":"  421","line":"                __begin_ = __end_ = __end_cap() = nullptr;"},
{"lineNum":"  422","line":"            }"},
{"lineNum":"  423","line":"            __alloc() = __c.__alloc();"},
{"lineNum":"  424","line":"        }"},
{"lineNum":"  425","line":""},
{"lineNum":"  426","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  427","line":"    void __copy_assign_alloc(const __vector_base&, false_type)"},
{"lineNum":"  428","line":"        {}"},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  431","line":"    void __move_assign_alloc(__vector_base& __c, true_type)"},
{"lineNum":"  432","line":"        _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value)"},
{"lineNum":"  433","line":"        {"},
{"lineNum":"  434","line":"            __alloc() = _VSTD::move(__c.__alloc());"},
{"lineNum":"  435","line":"        }"},
{"lineNum":"  436","line":""},
{"lineNum":"  437","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  438","line":"    void __move_assign_alloc(__vector_base&, false_type)"},
{"lineNum":"  439","line":"        _NOEXCEPT"},
{"lineNum":"  440","line":"        {}"},
{"lineNum":"  441","line":"};"},
{"lineNum":"  442","line":""},
{"lineNum":"  443","line":"template <class _Tp, class _Allocator>"},
{"lineNum":"  444","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  445","line":"void"},
{"lineNum":"  446","line":"__vector_base<_Tp, _Allocator>::__destruct_at_end(pointer __new_last) _NOEXCEPT"},
{"lineNum":"  447","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  448","line":"    pointer __soon_to_be_end = __end_;","class":"linePartCov","hits":"2","order":"359","possible_hits":"181",},
{"lineNum":"  449","line":"    while (__new_last != __soon_to_be_end)","class":"linePartCov","hits":"2","order":"360","possible_hits":"265",},
{"lineNum":"  450","line":"        __alloc_traits::destroy(__alloc(), _VSTD::__to_address(--__soon_to_be_end));","class":"lineNoCov","hits":"0","possible_hits":"134",},
{"lineNum":"  451","line":"    __end_ = __new_last;","class":"linePartCov","hits":"2","order":"361","possible_hits":"1053",},
{"lineNum":"  452","line":"}","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  453","line":""},
{"lineNum":"  454","line":"template <class _Tp, class _Allocator>"},
{"lineNum":"  455","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  456","line":"__vector_base<_Tp, _Allocator>::__vector_base()"},
{"lineNum":"  457","line":"        _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value)"},
{"lineNum":"  458","line":"    : __begin_(nullptr),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  459","line":"      __end_(nullptr),","class":"linePartCov","hits":"25","order":"175","possible_hits":"204",},
{"lineNum":"  460","line":"      __end_cap_(nullptr, __default_init_tag())"},
{"lineNum":"  461","line":"{"},
{"lineNum":"  462","line":"}"},
{"lineNum":"  463","line":""},
{"lineNum":"  464","line":"template <class _Tp, class _Allocator>"},
{"lineNum":"  465","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  466","line":"__vector_base<_Tp, _Allocator>::__vector_base(const allocator_type& __a)"},
{"lineNum":"  467","line":"    : __begin_(nullptr),"},
{"lineNum":"  468","line":"      __end_(nullptr),"},
{"lineNum":"  469","line":"      __end_cap_(nullptr, __a)"},
{"lineNum":"  470","line":"{"},
{"lineNum":"  471","line":"}"},
{"lineNum":"  472","line":""},
{"lineNum":"  473","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  474","line":"template <class _Tp, class _Allocator>"},
{"lineNum":"  475","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  476","line":"__vector_base<_Tp, _Allocator>::__vector_base(allocator_type&& __a) _NOEXCEPT"},
{"lineNum":"  477","line":"    : __begin_(nullptr),"},
{"lineNum":"  478","line":"      __end_(nullptr),","class":"linePartCov","hits":"1","order":"178","possible_hits":"133",},
{"lineNum":"  479","line":"      __end_cap_(nullptr, _VSTD::move(__a)) {}"},
{"lineNum":"  480","line":"#endif"},
{"lineNum":"  481","line":""},
{"lineNum":"  482","line":"template <class _Tp, class _Allocator>"},
{"lineNum":"  483","line":"__vector_base<_Tp, _Allocator>::~__vector_base()"},
{"lineNum":"  484","line":"{","class":"linePartCov","hits":"2","order":"187","possible_hits":"38",},
{"lineNum":"  485","line":"    if (__begin_ != nullptr)","class":"linePartCov","hits":"2","order":"188","possible_hits":"818",},
{"lineNum":"  486","line":"    {"},
{"lineNum":"  487","line":"        clear();","class":"linePartCov","hits":"2","order":"358","possible_hits":"21",},
{"lineNum":"  488","line":"        __alloc_traits::deallocate(__alloc(), __begin_, capacity());","class":"linePartCov","hits":"2","order":"362","possible_hits":"182",},
{"lineNum":"  489","line":"    }"},
{"lineNum":"  490","line":"}","class":"linePartCov","hits":"1","order":"189","possible_hits":"64",},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"template <class _Tp, class _Allocator /* = allocator<_Tp> */>"},
{"lineNum":"  493","line":"class _LIBCPP_TEMPLATE_VIS vector"},
{"lineNum":"  494","line":"    : private __vector_base<_Tp, _Allocator>"},
{"lineNum":"  495","line":"{"},
{"lineNum":"  496","line":"private:"},
{"lineNum":"  497","line":"    typedef __vector_base<_Tp, _Allocator>           __base;"},
{"lineNum":"  498","line":"    typedef allocator<_Tp>                           __default_allocator_type;"},
{"lineNum":"  499","line":"public:"},
{"lineNum":"  500","line":"    typedef vector                                   __self;"},
{"lineNum":"  501","line":"    typedef _Tp                                      value_type;"},
{"lineNum":"  502","line":"    typedef _Allocator                               allocator_type;"},
{"lineNum":"  503","line":"    typedef typename __base::__alloc_traits          __alloc_traits;"},
{"lineNum":"  504","line":"    typedef typename __base::reference               reference;"},
{"lineNum":"  505","line":"    typedef typename __base::const_reference         const_reference;"},
{"lineNum":"  506","line":"    typedef typename __base::size_type               size_type;"},
{"lineNum":"  507","line":"    typedef typename __base::difference_type         difference_type;"},
{"lineNum":"  508","line":"    typedef typename __base::pointer                 pointer;"},
{"lineNum":"  509","line":"    typedef typename __base::const_pointer           const_pointer;"},
{"lineNum":"  510","line":"    typedef __wrap_iter<pointer>                     iterator;"},
{"lineNum":"  511","line":"    typedef __wrap_iter<const_pointer>               const_iterator;"},
{"lineNum":"  512","line":"    typedef _VSTD::reverse_iterator<iterator>         reverse_iterator;"},
{"lineNum":"  513","line":"    typedef _VSTD::reverse_iterator<const_iterator>   const_reverse_iterator;"},
{"lineNum":"  514","line":""},
{"lineNum":"  515","line":"    static_assert((is_same<typename allocator_type::value_type, value_type>::value),"},
{"lineNum":"  516","line":"                  \"Allocator::value_type must be same type as value_type\");"},
{"lineNum":"  517","line":""},
{"lineNum":"  518","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  519","line":"    vector() _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value)"},
{"lineNum":"  520","line":"        {"},
{"lineNum":"  521","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  522","line":"            __get_db()->__insert_c(this);"},
{"lineNum":"  523","line":"#endif"},
{"lineNum":"  524","line":"        }"},
{"lineNum":"  525","line":"    _LIBCPP_INLINE_VISIBILITY explicit vector(const allocator_type& __a)"},
{"lineNum":"  526","line":"#if _LIBCPP_STD_VER <= 14"},
{"lineNum":"  527","line":"        _NOEXCEPT_(is_nothrow_copy_constructible<allocator_type>::value)"},
{"lineNum":"  528","line":"#else"},
{"lineNum":"  529","line":"        _NOEXCEPT"},
{"lineNum":"  530","line":"#endif"},
{"lineNum":"  531","line":"        : __base(__a)"},
{"lineNum":"  532","line":"    {"},
{"lineNum":"  533","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  534","line":"        __get_db()->__insert_c(this);"},
{"lineNum":"  535","line":"#endif"},
{"lineNum":"  536","line":"    }"},
{"lineNum":"  537","line":"    explicit vector(size_type __n);"},
{"lineNum":"  538","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":"  539","line":"    explicit vector(size_type __n, const allocator_type& __a);"},
{"lineNum":"  540","line":"#endif"},
{"lineNum":"  541","line":"    vector(size_type __n, const value_type& __x);"},
{"lineNum":"  542","line":"    vector(size_type __n, const value_type& __x, const allocator_type& __a);"},
{"lineNum":"  543","line":"    template <class _InputIterator>"},
{"lineNum":"  544","line":"        vector(_InputIterator __first,"},
{"lineNum":"  545","line":"               typename enable_if<__is_cpp17_input_iterator  <_InputIterator>::value &&"},
{"lineNum":"  546","line":"                                 !__is_cpp17_forward_iterator<_InputIterator>::value &&"},
{"lineNum":"  547","line":"                                 is_constructible<"},
{"lineNum":"  548","line":"                                    value_type,"},
{"lineNum":"  549","line":"                                    typename iterator_traits<_InputIterator>::reference>::value,"},
{"lineNum":"  550","line":"                                 _InputIterator>::type __last);"},
{"lineNum":"  551","line":"    template <class _InputIterator>"},
{"lineNum":"  552","line":"        vector(_InputIterator __first, _InputIterator __last, const allocator_type& __a,"},
{"lineNum":"  553","line":"               typename enable_if<__is_cpp17_input_iterator  <_InputIterator>::value &&"},
{"lineNum":"  554","line":"                                 !__is_cpp17_forward_iterator<_InputIterator>::value &&"},
{"lineNum":"  555","line":"                                 is_constructible<"},
{"lineNum":"  556","line":"                                    value_type,"},
{"lineNum":"  557","line":"                                    typename iterator_traits<_InputIterator>::reference>::value>::type* = 0);"},
{"lineNum":"  558","line":"    template <class _ForwardIterator>"},
{"lineNum":"  559","line":"        vector(_ForwardIterator __first,"},
{"lineNum":"  560","line":"               typename enable_if<__is_cpp17_forward_iterator<_ForwardIterator>::value &&"},
{"lineNum":"  561","line":"                                 is_constructible<"},
{"lineNum":"  562","line":"                                    value_type,"},
{"lineNum":"  563","line":"                                    typename iterator_traits<_ForwardIterator>::reference>::value,"},
{"lineNum":"  564","line":"                                 _ForwardIterator>::type __last);"},
{"lineNum":"  565","line":"    template <class _ForwardIterator>"},
{"lineNum":"  566","line":"        vector(_ForwardIterator __first, _ForwardIterator __last, const allocator_type& __a,"},
{"lineNum":"  567","line":"               typename enable_if<__is_cpp17_forward_iterator<_ForwardIterator>::value &&"},
{"lineNum":"  568","line":"                                 is_constructible<"},
{"lineNum":"  569","line":"                                    value_type,"},
{"lineNum":"  570","line":"                                    typename iterator_traits<_ForwardIterator>::reference>::value>::type* = 0);"},
{"lineNum":"  571","line":""},
{"lineNum":"  572","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  573","line":"    ~vector()"},
{"lineNum":"  574","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  575","line":"        __annotate_delete();"},
{"lineNum":"  576","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  577","line":"        __get_db()->__erase_c(this);"},
{"lineNum":"  578","line":"#endif"},
{"lineNum":"  579","line":"    }","class":"linePartCov","hits":"27","order":"186","possible_hits":"125",},
{"lineNum":"  580","line":""},
{"lineNum":"  581","line":"    vector(const vector& __x);"},
{"lineNum":"  582","line":"    vector(const vector& __x, const __identity_t<allocator_type>& __a);"},
{"lineNum":"  583","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  584","line":"    vector& operator=(const vector& __x);"},
{"lineNum":"  585","line":""},
{"lineNum":"  586","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  587","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  588","line":"    vector(initializer_list<value_type> __il);"},
{"lineNum":"  589","line":""},
{"lineNum":"  590","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  591","line":"    vector(initializer_list<value_type> __il, const allocator_type& __a);"},
{"lineNum":"  592","line":""},
{"lineNum":"  593","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  594","line":"    vector(vector&& __x)"},
{"lineNum":"  595","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":"  596","line":"        _NOEXCEPT;"},
{"lineNum":"  597","line":"#else"},
{"lineNum":"  598","line":"        _NOEXCEPT_(is_nothrow_move_constructible<allocator_type>::value);"},
{"lineNum":"  599","line":"#endif"},
{"lineNum":"  600","line":""},
{"lineNum":"  601","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  602","line":"    vector(vector&& __x, const __identity_t<allocator_type>& __a);"},
{"lineNum":"  603","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  604","line":"    vector& operator=(vector&& __x)"},
{"lineNum":"  605","line":"        _NOEXCEPT_((__noexcept_move_assign_container<_Allocator, __alloc_traits>::value));"},
{"lineNum":"  606","line":""},
{"lineNum":"  607","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  608","line":"    vector& operator=(initializer_list<value_type> __il)"},
{"lineNum":"  609","line":"        {assign(__il.begin(), __il.end()); return *this;}","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  610","line":""},
{"lineNum":"  611","line":"#endif // !_LIBCPP_CXX03_LANG"},
{"lineNum":"  612","line":""},
{"lineNum":"  613","line":"    template <class _InputIterator>"},
{"lineNum":"  614","line":"        typename enable_if"},
{"lineNum":"  615","line":"        <"},
{"lineNum":"  616","line":"             __is_cpp17_input_iterator  <_InputIterator>::value &&"},
{"lineNum":"  617","line":"            !__is_cpp17_forward_iterator<_InputIterator>::value &&"},
{"lineNum":"  618","line":"            is_constructible<"},
{"lineNum":"  619","line":"                 value_type,"},
{"lineNum":"  620","line":"                 typename iterator_traits<_InputIterator>::reference>::value,"},
{"lineNum":"  621","line":"            void"},
{"lineNum":"  622","line":"        >::type"},
{"lineNum":"  623","line":"        assign(_InputIterator __first, _InputIterator __last);"},
{"lineNum":"  624","line":"    template <class _ForwardIterator>"},
{"lineNum":"  625","line":"        typename enable_if"},
{"lineNum":"  626","line":"        <"},
{"lineNum":"  627","line":"            __is_cpp17_forward_iterator<_ForwardIterator>::value &&"},
{"lineNum":"  628","line":"            is_constructible<"},
{"lineNum":"  629","line":"                 value_type,"},
{"lineNum":"  630","line":"                 typename iterator_traits<_ForwardIterator>::reference>::value,"},
{"lineNum":"  631","line":"            void"},
{"lineNum":"  632","line":"        >::type"},
{"lineNum":"  633","line":"        assign(_ForwardIterator __first, _ForwardIterator __last);"},
{"lineNum":"  634","line":""},
{"lineNum":"  635","line":"    void assign(size_type __n, const_reference __u);"},
{"lineNum":"  636","line":""},
{"lineNum":"  637","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  638","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  639","line":"    void assign(initializer_list<value_type> __il)"},
{"lineNum":"  640","line":"        {assign(__il.begin(), __il.end());}"},
{"lineNum":"  641","line":"#endif"},
{"lineNum":"  642","line":""},
{"lineNum":"  643","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  644","line":"    allocator_type get_allocator() const _NOEXCEPT"},
{"lineNum":"  645","line":"        {return this->__alloc();}"},
{"lineNum":"  646","line":""},
{"lineNum":"  647","line":"    _LIBCPP_INLINE_VISIBILITY iterator               begin() _NOEXCEPT;"},
{"lineNum":"  648","line":"    _LIBCPP_INLINE_VISIBILITY const_iterator         begin()   const _NOEXCEPT;"},
{"lineNum":"  649","line":"    _LIBCPP_INLINE_VISIBILITY iterator               end() _NOEXCEPT;"},
{"lineNum":"  650","line":"    _LIBCPP_INLINE_VISIBILITY const_iterator         end()     const _NOEXCEPT;"},
{"lineNum":"  651","line":""},
{"lineNum":"  652","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  653","line":"    reverse_iterator       rbegin() _NOEXCEPT"},
{"lineNum":"  654","line":"        {return       reverse_iterator(end());}"},
{"lineNum":"  655","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  656","line":"    const_reverse_iterator rbegin()  const _NOEXCEPT"},
{"lineNum":"  657","line":"        {return const_reverse_iterator(end());}"},
{"lineNum":"  658","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  659","line":"    reverse_iterator       rend() _NOEXCEPT"},
{"lineNum":"  660","line":"        {return       reverse_iterator(begin());}"},
{"lineNum":"  661","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  662","line":"    const_reverse_iterator rend()    const _NOEXCEPT"},
{"lineNum":"  663","line":"        {return const_reverse_iterator(begin());}"},
{"lineNum":"  664","line":""},
{"lineNum":"  665","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  666","line":"    const_iterator         cbegin()  const _NOEXCEPT"},
{"lineNum":"  667","line":"        {return begin();}"},
{"lineNum":"  668","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  669","line":"    const_iterator         cend()    const _NOEXCEPT"},
{"lineNum":"  670","line":"        {return end();}"},
{"lineNum":"  671","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  672","line":"    const_reverse_iterator crbegin() const _NOEXCEPT"},
{"lineNum":"  673","line":"        {return rbegin();}"},
{"lineNum":"  674","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  675","line":"    const_reverse_iterator crend()   const _NOEXCEPT"},
{"lineNum":"  676","line":"        {return rend();}"},
{"lineNum":"  677","line":""},
{"lineNum":"  678","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  679","line":"    size_type size() const _NOEXCEPT"},
{"lineNum":"  680","line":"        {return static_cast<size_type>(this->__end_ - this->__begin_);}","class":"linePartCov","hits":"20","order":"179","possible_hits":"674",},
{"lineNum":"  681","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  682","line":"    size_type capacity() const _NOEXCEPT"},
{"lineNum":"  683","line":"        {return __base::capacity();}"},
{"lineNum":"  684","line":"    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  685","line":"    bool empty() const _NOEXCEPT"},
{"lineNum":"  686","line":"        {return this->__begin_ == this->__end_;}","class":"lineNoCov","hits":"0","possible_hits":"33",},
{"lineNum":"  687","line":"    size_type max_size() const _NOEXCEPT;"},
{"lineNum":"  688","line":"    void reserve(size_type __n);"},
{"lineNum":"  689","line":"    void shrink_to_fit() _NOEXCEPT;"},
{"lineNum":"  690","line":""},
{"lineNum":"  691","line":"    _LIBCPP_INLINE_VISIBILITY reference       operator[](size_type __n) _NOEXCEPT;"},
{"lineNum":"  692","line":"    _LIBCPP_INLINE_VISIBILITY const_reference operator[](size_type __n) const _NOEXCEPT;"},
{"lineNum":"  693","line":"    reference       at(size_type __n);"},
{"lineNum":"  694","line":"    const_reference at(size_type __n) const;"},
{"lineNum":"  695","line":""},
{"lineNum":"  696","line":"    _LIBCPP_INLINE_VISIBILITY reference       front() _NOEXCEPT"},
{"lineNum":"  697","line":"    {"},
{"lineNum":"  698","line":"        _LIBCPP_ASSERT(!empty(), \"front() called on an empty vector\");"},
{"lineNum":"  699","line":"        return *this->__begin_;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  700","line":"    }"},
{"lineNum":"  701","line":"    _LIBCPP_INLINE_VISIBILITY const_reference front() const _NOEXCEPT"},
{"lineNum":"  702","line":"    {"},
{"lineNum":"  703","line":"        _LIBCPP_ASSERT(!empty(), \"front() called on an empty vector\");"},
{"lineNum":"  704","line":"        return *this->__begin_;"},
{"lineNum":"  705","line":"    }"},
{"lineNum":"  706","line":"    _LIBCPP_INLINE_VISIBILITY reference       back() _NOEXCEPT"},
{"lineNum":"  707","line":"    {"},
{"lineNum":"  708","line":"        _LIBCPP_ASSERT(!empty(), \"back() called on an empty vector\");"},
{"lineNum":"  709","line":"        return *(this->__end_ - 1);","class":"lineNoCov","hits":"0","possible_hits":"440",},
{"lineNum":"  710","line":"    }"},
{"lineNum":"  711","line":"    _LIBCPP_INLINE_VISIBILITY const_reference back()  const _NOEXCEPT"},
{"lineNum":"  712","line":"    {"},
{"lineNum":"  713","line":"        _LIBCPP_ASSERT(!empty(), \"back() called on an empty vector\");"},
{"lineNum":"  714","line":"        return *(this->__end_ - 1);"},
{"lineNum":"  715","line":"    }"},
{"lineNum":"  716","line":""},
{"lineNum":"  717","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  718","line":"    value_type*       data() _NOEXCEPT"},
{"lineNum":"  719","line":"        {return _VSTD::__to_address(this->__begin_);}","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  720","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  721","line":"    const value_type* data() const _NOEXCEPT"},
{"lineNum":"  722","line":"        {return _VSTD::__to_address(this->__begin_);}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  723","line":""},
{"lineNum":"  724","line":"#ifdef _LIBCPP_CXX03_LANG"},
{"lineNum":"  725","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  726","line":"    void __emplace_back(const value_type& __x) { push_back(__x); }"},
{"lineNum":"  727","line":"#else"},
{"lineNum":"  728","line":"    template <class _Arg>"},
{"lineNum":"  729","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  730","line":"    void __emplace_back(_Arg&& __arg) {"},
{"lineNum":"  731","line":"      emplace_back(_VSTD::forward<_Arg>(__arg));"},
{"lineNum":"  732","line":"    }"},
{"lineNum":"  733","line":"#endif"},
{"lineNum":"  734","line":""},
{"lineNum":"  735","line":"    _LIBCPP_INLINE_VISIBILITY void push_back(const_reference __x);"},
{"lineNum":"  736","line":""},
{"lineNum":"  737","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  738","line":"    _LIBCPP_INLINE_VISIBILITY void push_back(value_type&& __x);"},
{"lineNum":"  739","line":""},
{"lineNum":"  740","line":"    template <class... _Args>"},
{"lineNum":"  741","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  742","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":"  743","line":"        reference emplace_back(_Args&&... __args);"},
{"lineNum":"  744","line":"#else"},
{"lineNum":"  745","line":"        void      emplace_back(_Args&&... __args);"},
{"lineNum":"  746","line":"#endif"},
{"lineNum":"  747","line":"#endif // !_LIBCPP_CXX03_LANG"},
{"lineNum":"  748","line":""},
{"lineNum":"  749","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  750","line":"    void pop_back();"},
{"lineNum":"  751","line":""},
{"lineNum":"  752","line":"    iterator insert(const_iterator __position, const_reference __x);"},
{"lineNum":"  753","line":""},
{"lineNum":"  754","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  755","line":"    iterator insert(const_iterator __position, value_type&& __x);"},
{"lineNum":"  756","line":"    template <class... _Args>"},
{"lineNum":"  757","line":"        iterator emplace(const_iterator __position, _Args&&... __args);"},
{"lineNum":"  758","line":"#endif // !_LIBCPP_CXX03_LANG"},
{"lineNum":"  759","line":""},
{"lineNum":"  760","line":"    iterator insert(const_iterator __position, size_type __n, const_reference __x);"},
{"lineNum":"  761","line":"    template <class _InputIterator>"},
{"lineNum":"  762","line":"        typename enable_if"},
{"lineNum":"  763","line":"        <"},
{"lineNum":"  764","line":"             __is_cpp17_input_iterator  <_InputIterator>::value &&"},
{"lineNum":"  765","line":"            !__is_cpp17_forward_iterator<_InputIterator>::value &&"},
{"lineNum":"  766","line":"            is_constructible<"},
{"lineNum":"  767","line":"                 value_type,"},
{"lineNum":"  768","line":"                 typename iterator_traits<_InputIterator>::reference>::value,"},
{"lineNum":"  769","line":"            iterator"},
{"lineNum":"  770","line":"        >::type"},
{"lineNum":"  771","line":"        insert(const_iterator __position, _InputIterator __first, _InputIterator __last);"},
{"lineNum":"  772","line":"    template <class _ForwardIterator>"},
{"lineNum":"  773","line":"        typename enable_if"},
{"lineNum":"  774","line":"        <"},
{"lineNum":"  775","line":"            __is_cpp17_forward_iterator<_ForwardIterator>::value &&"},
{"lineNum":"  776","line":"            is_constructible<"},
{"lineNum":"  777","line":"                 value_type,"},
{"lineNum":"  778","line":"                 typename iterator_traits<_ForwardIterator>::reference>::value,"},
{"lineNum":"  779","line":"            iterator"},
{"lineNum":"  780","line":"        >::type"},
{"lineNum":"  781","line":"        insert(const_iterator __position, _ForwardIterator __first, _ForwardIterator __last);"},
{"lineNum":"  782","line":""},
{"lineNum":"  783","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  784","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  785","line":"    iterator insert(const_iterator __position, initializer_list<value_type> __il)"},
{"lineNum":"  786","line":"        {return insert(__position, __il.begin(), __il.end());}"},
{"lineNum":"  787","line":"#endif"},
{"lineNum":"  788","line":""},
{"lineNum":"  789","line":"    _LIBCPP_INLINE_VISIBILITY iterator erase(const_iterator __position);"},
{"lineNum":"  790","line":"    iterator erase(const_iterator __first, const_iterator __last);"},
{"lineNum":"  791","line":""},
{"lineNum":"  792","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  793","line":"    void clear() _NOEXCEPT"},
{"lineNum":"  794","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  795","line":"        size_type __old_size = size();"},
{"lineNum":"  796","line":"        __base::clear();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  797","line":"        __annotate_shrink(__old_size);"},
{"lineNum":"  798","line":"        __invalidate_all_iterators();"},
{"lineNum":"  799","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  800","line":""},
{"lineNum":"  801","line":"    void resize(size_type __sz);"},
{"lineNum":"  802","line":"    void resize(size_type __sz, const_reference __x);"},
{"lineNum":"  803","line":""},
{"lineNum":"  804","line":"    void swap(vector&)"},
{"lineNum":"  805","line":"#if _LIBCPP_STD_VER >= 14"},
{"lineNum":"  806","line":"        _NOEXCEPT;"},
{"lineNum":"  807","line":"#else"},
{"lineNum":"  808","line":"        _NOEXCEPT_(!__alloc_traits::propagate_on_container_swap::value ||"},
{"lineNum":"  809","line":"                    __is_nothrow_swappable<allocator_type>::value);"},
{"lineNum":"  810","line":"#endif"},
{"lineNum":"  811","line":""},
{"lineNum":"  812","line":"    bool __invariants() const;"},
{"lineNum":"  813","line":""},
{"lineNum":"  814","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  815","line":""},
{"lineNum":"  816","line":"    bool __dereferenceable(const const_iterator* __i) const;"},
{"lineNum":"  817","line":"    bool __decrementable(const const_iterator* __i) const;"},
{"lineNum":"  818","line":"    bool __addable(const const_iterator* __i, ptrdiff_t __n) const;"},
{"lineNum":"  819","line":"    bool __subscriptable(const const_iterator* __i, ptrdiff_t __n) const;"},
{"lineNum":"  820","line":""},
{"lineNum":"  821","line":"#endif // _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  822","line":""},
{"lineNum":"  823","line":"private:"},
{"lineNum":"  824","line":"    _LIBCPP_INLINE_VISIBILITY void __invalidate_all_iterators();"},
{"lineNum":"  825","line":"    _LIBCPP_INLINE_VISIBILITY void __invalidate_iterators_past(pointer __new_last);"},
{"lineNum":"  826","line":"    void __vallocate(size_type __n);"},
{"lineNum":"  827","line":"    void __vdeallocate() _NOEXCEPT;"},
{"lineNum":"  828","line":"    _LIBCPP_INLINE_VISIBILITY size_type __recommend(size_type __new_size) const;"},
{"lineNum":"  829","line":"    void __construct_at_end(size_type __n);"},
{"lineNum":"  830","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  831","line":"    void __construct_at_end(size_type __n, const_reference __x);"},
{"lineNum":"  832","line":"    template <class _ForwardIterator>"},
{"lineNum":"  833","line":"        typename enable_if"},
{"lineNum":"  834","line":"        <"},
{"lineNum":"  835","line":"            __is_cpp17_forward_iterator<_ForwardIterator>::value,"},
{"lineNum":"  836","line":"            void"},
{"lineNum":"  837","line":"        >::type"},
{"lineNum":"  838","line":"        __construct_at_end(_ForwardIterator __first, _ForwardIterator __last, size_type __n);"},
{"lineNum":"  839","line":"    void __append(size_type __n);"},
{"lineNum":"  840","line":"    void __append(size_type __n, const_reference __x);"},
{"lineNum":"  841","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  842","line":"    iterator       __make_iter(pointer __p) _NOEXCEPT;"},
{"lineNum":"  843","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  844","line":"    const_iterator __make_iter(const_pointer __p) const _NOEXCEPT;"},
{"lineNum":"  845","line":"    void __swap_out_circular_buffer(__split_buffer<value_type, allocator_type&>& __v);"},
{"lineNum":"  846","line":"    pointer __swap_out_circular_buffer(__split_buffer<value_type, allocator_type&>& __v, pointer __p);"},
{"lineNum":"  847","line":"    void __move_range(pointer __from_s, pointer __from_e, pointer __to);"},
{"lineNum":"  848","line":"    void __move_assign(vector& __c, true_type)"},
{"lineNum":"  849","line":"        _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value);"},
{"lineNum":"  850","line":"    void __move_assign(vector& __c, false_type)"},
{"lineNum":"  851","line":"        _NOEXCEPT_(__alloc_traits::is_always_equal::value);"},
{"lineNum":"  852","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  853","line":"    void __destruct_at_end(pointer __new_last) _NOEXCEPT"},
{"lineNum":"  854","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  855","line":"        __invalidate_iterators_past(__new_last);"},
{"lineNum":"  856","line":"        size_type __old_size = size();"},
{"lineNum":"  857","line":"        __base::__destruct_at_end(__new_last);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  858","line":"        __annotate_shrink(__old_size);"},
{"lineNum":"  859","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  860","line":""},
{"lineNum":"  861","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  862","line":"    template <class _Up>"},
{"lineNum":"  863","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  864","line":"    inline void __push_back_slow_path(_Up&& __x);"},
{"lineNum":"  865","line":""},
{"lineNum":"  866","line":"    template <class... _Args>"},
{"lineNum":"  867","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  868","line":"    inline void __emplace_back_slow_path(_Args&&... __args);"},
{"lineNum":"  869","line":"#else"},
{"lineNum":"  870","line":"    template <class _Up>"},
{"lineNum":"  871","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  872","line":"    inline void __push_back_slow_path(_Up& __x);"},
{"lineNum":"  873","line":"#endif"},
{"lineNum":"  874","line":""},
{"lineNum":"  875","line":"    // The following functions are no-ops outside of AddressSanitizer mode."},
{"lineNum":"  876","line":"    // We call annotatations only for the default Allocator because other allocators"},
{"lineNum":"  877","line":"    // may not meet the AddressSanitizer alignment constraints."},
{"lineNum":"  878","line":"    // See the documentation for __sanitizer_annotate_contiguous_container for more details."},
{"lineNum":"  879","line":"#ifndef _LIBCPP_HAS_NO_ASAN"},
{"lineNum":"  880","line":"    void __annotate_contiguous_container(const void *__beg, const void *__end,"},
{"lineNum":"  881","line":"                                         const void *__old_mid,"},
{"lineNum":"  882","line":"                                         const void *__new_mid) const"},
{"lineNum":"  883","line":"    {"},
{"lineNum":"  884","line":""},
{"lineNum":"  885","line":"      if (__beg && is_same<allocator_type, __default_allocator_type>::value)"},
{"lineNum":"  886","line":"        __sanitizer_annotate_contiguous_container(__beg, __end, __old_mid, __new_mid);"},
{"lineNum":"  887","line":"    }"},
{"lineNum":"  888","line":"#else"},
{"lineNum":"  889","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  890","line":"    void __annotate_contiguous_container(const void*, const void*, const void*,"},
{"lineNum":"  891","line":"                                         const void*) const _NOEXCEPT {}"},
{"lineNum":"  892","line":"#endif"},
{"lineNum":"  893","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  894","line":"    void __annotate_new(size_type __current_size) const _NOEXCEPT {"},
{"lineNum":"  895","line":"      __annotate_contiguous_container(data(), data() + capacity(),"},
{"lineNum":"  896","line":"                                      data() + capacity(), data() + __current_size);"},
{"lineNum":"  897","line":"    }"},
{"lineNum":"  898","line":""},
{"lineNum":"  899","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  900","line":"    void __annotate_delete() const _NOEXCEPT {"},
{"lineNum":"  901","line":"      __annotate_contiguous_container(data(), data() + capacity(),"},
{"lineNum":"  902","line":"                                      data() + size(), data() + capacity());"},
{"lineNum":"  903","line":"    }"},
{"lineNum":"  904","line":""},
{"lineNum":"  905","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  906","line":"    void __annotate_increase(size_type __n) const _NOEXCEPT"},
{"lineNum":"  907","line":"    {"},
{"lineNum":"  908","line":"      __annotate_contiguous_container(data(), data() + capacity(),"},
{"lineNum":"  909","line":"                                      data() + size(), data() + size() + __n);"},
{"lineNum":"  910","line":"    }"},
{"lineNum":"  911","line":""},
{"lineNum":"  912","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  913","line":"    void __annotate_shrink(size_type __old_size) const _NOEXCEPT"},
{"lineNum":"  914","line":"    {"},
{"lineNum":"  915","line":"      __annotate_contiguous_container(data(), data() + capacity(),"},
{"lineNum":"  916","line":"                                      data() + __old_size, data() + size());"},
{"lineNum":"  917","line":"    }"},
{"lineNum":"  918","line":""},
{"lineNum":"  919","line":"  struct _ConstructTransaction {"},
{"lineNum":"  920","line":"    explicit _ConstructTransaction(vector &__v, size_type __n)"},
{"lineNum":"  921","line":"      : __v_(__v),  __pos_(__v.__end_), __new_end_(__v.__end_ + __n) {","class":"linePartCov","hits":"2","order":"557","possible_hits":"11",},
{"lineNum":"  922","line":"#ifndef _LIBCPP_HAS_NO_ASAN"},
{"lineNum":"  923","line":"      __v_.__annotate_increase(__n);"},
{"lineNum":"  924","line":"#endif"},
{"lineNum":"  925","line":"    }"},
{"lineNum":"  926","line":"    ~_ConstructTransaction() {"},
{"lineNum":"  927","line":"      __v_.__end_ = __pos_;","class":"linePartCov","hits":"1","order":"562","possible_hits":"466",},
{"lineNum":"  928","line":"#ifndef _LIBCPP_HAS_NO_ASAN"},
{"lineNum":"  929","line":"      if (__pos_ != __new_end_) {"},
{"lineNum":"  930","line":"        __v_.__annotate_shrink(__new_end_ - __v_.__begin_);"},
{"lineNum":"  931","line":"      }"},
{"lineNum":"  932","line":"#endif"},
{"lineNum":"  933","line":"    }"},
{"lineNum":"  934","line":""},
{"lineNum":"  935","line":"    vector &__v_;"},
{"lineNum":"  936","line":"    pointer __pos_;"},
{"lineNum":"  937","line":"    const_pointer const __new_end_;"},
{"lineNum":"  938","line":""},
{"lineNum":"  939","line":"  private:"},
{"lineNum":"  940","line":"    _ConstructTransaction(_ConstructTransaction const&) = delete;"},
{"lineNum":"  941","line":"    _ConstructTransaction& operator=(_ConstructTransaction const&) = delete;"},
{"lineNum":"  942","line":"  };"},
{"lineNum":"  943","line":""},
{"lineNum":"  944","line":"  template <class ..._Args>"},
{"lineNum":"  945","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  946","line":"  void __construct_one_at_end(_Args&& ...__args) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  947","line":"    _ConstructTransaction __tx(*this, 1);"},
{"lineNum":"  948","line":"    __alloc_traits::construct(this->__alloc(), _VSTD::__to_address(__tx.__pos_),"},
{"lineNum":"  949","line":"        _VSTD::forward<_Args>(__args)...);"},
{"lineNum":"  950","line":"    ++__tx.__pos_;","class":"lineNoCov","hits":"0","possible_hits":"273",},
{"lineNum":"  951","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  952","line":"};"},
{"lineNum":"  953","line":""},
{"lineNum":"  954","line":"#ifndef _LIBCPP_HAS_NO_DEDUCTION_GUIDES"},
{"lineNum":"  955","line":"template<class _InputIterator,"},
{"lineNum":"  956","line":"         class _Alloc = allocator<__iter_value_type<_InputIterator>>,"},
{"lineNum":"  957","line":"         class = _EnableIf<__is_allocator<_Alloc>::value>"},
{"lineNum":"  958","line":"         >"},
{"lineNum":"  959","line":"vector(_InputIterator, _InputIterator)"},
{"lineNum":"  960","line":"  -> vector<__iter_value_type<_InputIterator>, _Alloc>;"},
{"lineNum":"  961","line":""},
{"lineNum":"  962","line":"template<class _InputIterator,"},
{"lineNum":"  963","line":"         class _Alloc,"},
{"lineNum":"  964","line":"         class = _EnableIf<__is_allocator<_Alloc>::value>"},
{"lineNum":"  965","line":"         >"},
{"lineNum":"  966","line":"vector(_InputIterator, _InputIterator, _Alloc)"},
{"lineNum":"  967","line":"  -> vector<__iter_value_type<_InputIterator>, _Alloc>;"},
{"lineNum":"  968","line":"#endif"},
{"lineNum":"  969","line":""},
{"lineNum":"  970","line":"template <class _Tp, class _Allocator>"},
{"lineNum":"  971","line":"void"},
{"lineNum":"  972","line":"vector<_Tp, _Allocator>::__swap_out_circular_buffer(__split_buffer<value_type, allocator_type&>& __v)"},
{"lineNum":"  973","line":"{","class":"linePartCov","hits":"2","order":"213","possible_hits":"6",},
{"lineNum":"  974","line":""},
{"lineNum":"  975","line":"    __annotate_delete();"},
{"lineNum":"  976","line":"    _VSTD::__construct_backward_with_exception_guarantees(this->__alloc(), this->__begin_, this->__end_, __v.__begin_);","class":"linePartCov","hits":"2","order":"214","possible_hits":"45",},
{"lineNum":"  977","line":"    _VSTD::swap(this->__begin_, __v.__begin_);"},
{"lineNum":"  978","line":"    _VSTD::swap(this->__end_, __v.__end_);"},
{"lineNum":"  979","line":"    _VSTD::swap(this->__end_cap(), __v.__end_cap());"},
{"lineNum":"  980","line":"    __v.__first_ = __v.__begin_;","class":"linePartCov","hits":"2","order":"221","possible_hits":"20",},
{"lineNum":"  981","line":"    __annotate_new(size());"},
{"lineNum":"  982","line":"    __invalidate_all_iterators();"},
{"lineNum":"  983","line":"}","class":"linePartCov","hits":"2","order":"222","possible_hits":"12",},
{"lineNum":"  984","line":""},
{"lineNum":"  985","line":"template <class _Tp, class _Allocator>"},
{"lineNum":"  986","line":"typename vector<_Tp, _Allocator>::pointer"},
{"lineNum":"  987","line":"vector<_Tp, _Allocator>::__swap_out_circular_buffer(__split_buffer<value_type, allocator_type&>& __v, pointer __p)"},
{"lineNum":"  988","line":"{","class":"lineCov","hits":"1","order":"582","possible_hits":"1",},
{"lineNum":"  989","line":"    __annotate_delete();"},
{"lineNum":"  990","line":"    pointer __r = __v.__begin_;","class":"linePartCov","hits":"1","order":"583","possible_hits":"2",},
{"lineNum":"  991","line":"    _VSTD::__construct_backward_with_exception_guarantees(this->__alloc(), this->__begin_, __p, __v.__begin_);","class":"linePartCov","hits":"1","order":"584","possible_hits":"4",},
{"lineNum":"  992","line":"    _VSTD::__construct_forward_with_exception_guarantees(this->__alloc(), __p, this->__end_, __v.__end_);","class":"linePartCov","hits":"1","order":"585","possible_hits":"3",},
{"lineNum":"  993","line":"    _VSTD::swap(this->__begin_, __v.__begin_);"},
{"lineNum":"  994","line":"    _VSTD::swap(this->__end_, __v.__end_);"},
{"lineNum":"  995","line":"    _VSTD::swap(this->__end_cap(), __v.__end_cap());"},
{"lineNum":"  996","line":"    __v.__first_ = __v.__begin_;","class":"linePartCov","hits":"1","order":"587","possible_hits":"2",},
{"lineNum":"  997","line":"    __annotate_new(size());"},
{"lineNum":"  998","line":"    __invalidate_all_iterators();"},
{"lineNum":"  999","line":"    return __r;","class":"linePartCov","hits":"1","order":"588","possible_hits":"2",},
{"lineNum":" 1000","line":"}"},
{"lineNum":" 1001","line":""},
{"lineNum":" 1002","line":"//  Allocate space for __n objects"},
{"lineNum":" 1003","line":"//  throws length_error if __n > max_size()"},
{"lineNum":" 1004","line":"//  throws (probably bad_alloc) if memory run out"},
{"lineNum":" 1005","line":"//  Precondition:  __begin_ == __end_ == __end_cap() == 0"},
{"lineNum":" 1006","line":"//  Precondition:  __n > 0"},
{"lineNum":" 1007","line":"//  Postcondition:  capacity() == __n"},
{"lineNum":" 1008","line":"//  Postcondition:  size() == 0"},
{"lineNum":" 1009","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1010","line":"void"},
{"lineNum":" 1011","line":"vector<_Tp, _Allocator>::__vallocate(size_type __n)"},
{"lineNum":" 1012","line":"{","class":"lineCov","hits":"1","order":"551","possible_hits":"1",},
{"lineNum":" 1013","line":"    if (__n > max_size())","class":"linePartCov","hits":"1","order":"552","possible_hits":"104",},
{"lineNum":" 1014","line":"        this->__throw_length_error();","class":"lineNoCov","hits":"0","possible_hits":"81",},
{"lineNum":" 1015","line":"    this->__begin_ = this->__end_ = __alloc_traits::allocate(this->__alloc(), __n);","class":"linePartCov","hits":"1","order":"553","possible_hits":"125",},
{"lineNum":" 1016","line":"    this->__end_cap() = this->__begin_ + __n;","class":"linePartCov","hits":"1","order":"554","possible_hits":"127",},
{"lineNum":" 1017","line":"    __annotate_new(0);"},
{"lineNum":" 1018","line":"}","class":"lineCov","hits":"1","order":"555","possible_hits":"1",},
{"lineNum":" 1019","line":""},
{"lineNum":" 1020","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1021","line":"void"},
{"lineNum":" 1022","line":"vector<_Tp, _Allocator>::__vdeallocate() _NOEXCEPT"},
{"lineNum":" 1023","line":"{","class":"linePartCov","hits":"1","order":"663","possible_hits":"2",},
{"lineNum":" 1024","line":"    if (this->__begin_ != nullptr)","class":"linePartCov","hits":"1","order":"664","possible_hits":"28",},
{"lineNum":" 1025","line":"    {"},
{"lineNum":" 1026","line":"        clear();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1027","line":"        __alloc_traits::deallocate(this->__alloc(), this->__begin_, capacity());","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":" 1028","line":"        this->__begin_ = this->__end_ = this->__end_cap() = nullptr;","class":"lineNoCov","hits":"0","possible_hits":"28",},
{"lineNum":" 1029","line":"    }"},
{"lineNum":" 1030","line":"}","class":"linePartCov","hits":"1","order":"665","possible_hits":"4",},
{"lineNum":" 1031","line":""},
{"lineNum":" 1032","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1033","line":"typename vector<_Tp, _Allocator>::size_type"},
{"lineNum":" 1034","line":"vector<_Tp, _Allocator>::max_size() const _NOEXCEPT"},
{"lineNum":" 1035","line":"{"},
{"lineNum":" 1036","line":"    return _VSTD::min<size_type>(__alloc_traits::max_size(this->__alloc()),"},
{"lineNum":" 1037","line":"                                 numeric_limits<difference_type>::max());"},
{"lineNum":" 1038","line":"}"},
{"lineNum":" 1039","line":""},
{"lineNum":" 1040","line":"//  Precondition:  __new_size > capacity()"},
{"lineNum":" 1041","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1042","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1043","line":"typename vector<_Tp, _Allocator>::size_type"},
{"lineNum":" 1044","line":"vector<_Tp, _Allocator>::__recommend(size_type __new_size) const"},
{"lineNum":" 1045","line":"{","class":"linePartCov","hits":"2","order":"196","possible_hits":"6",},
{"lineNum":" 1046","line":"    const size_type __ms = max_size();"},
{"lineNum":" 1047","line":"    if (__new_size > __ms)","class":"linePartCov","hits":"2","order":"199","possible_hits":"252",},
{"lineNum":" 1048","line":"        this->__throw_length_error();","class":"lineNoCov","hits":"0","possible_hits":"155",},
{"lineNum":" 1049","line":"    const size_type __cap = capacity();"},
{"lineNum":" 1050","line":"    if (__cap >= __ms / 2)","class":"linePartCov","hits":"2","order":"201","possible_hits":"254",},
{"lineNum":" 1051","line":"        return __ms;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1052","line":"    return _VSTD::max<size_type>(2 * __cap, __new_size);","class":"linePartCov","hits":"2","order":"202","possible_hits":"6",},
{"lineNum":" 1053","line":"}","class":"linePartCov","hits":"2","order":"203","possible_hits":"12",},
{"lineNum":" 1054","line":""},
{"lineNum":" 1055","line":"//  Default constructs __n objects starting at __end_"},
{"lineNum":" 1056","line":"//  throws if construction throws"},
{"lineNum":" 1057","line":"//  Precondition:  __n > 0"},
{"lineNum":" 1058","line":"//  Precondition:  size() + __n <= capacity()"},
{"lineNum":" 1059","line":"//  Postcondition:  size() == size() + __n"},
{"lineNum":" 1060","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1061","line":"void"},
{"lineNum":" 1062","line":"vector<_Tp, _Allocator>::__construct_at_end(size_type __n)"},
{"lineNum":" 1063","line":"{"},
{"lineNum":" 1064","line":"    _ConstructTransaction __tx(*this, __n);"},
{"lineNum":" 1065","line":"    const_pointer __new_end = __tx.__new_end_;"},
{"lineNum":" 1066","line":"    for (pointer __pos = __tx.__pos_; __pos != __new_end; ++__pos, __tx.__pos_ = __pos) {","class":"lineNoCov","hits":"0","possible_hits":"60",},
{"lineNum":" 1067","line":"        __alloc_traits::construct(this->__alloc(), _VSTD::__to_address(__pos));"},
{"lineNum":" 1068","line":"    }"},
{"lineNum":" 1069","line":"}"},
{"lineNum":" 1070","line":""},
{"lineNum":" 1071","line":"//  Copy constructs __n objects starting at __end_ from __x"},
{"lineNum":" 1072","line":"//  throws if construction throws"},
{"lineNum":" 1073","line":"//  Precondition:  __n > 0"},
{"lineNum":" 1074","line":"//  Precondition:  size() + __n <= capacity()"},
{"lineNum":" 1075","line":"//  Postcondition:  size() == old size() + __n"},
{"lineNum":" 1076","line":"//  Postcondition:  [i] == __x for all i in [size() - __n, __n)"},
{"lineNum":" 1077","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1078","line":"inline"},
{"lineNum":" 1079","line":"void"},
{"lineNum":" 1080","line":"vector<_Tp, _Allocator>::__construct_at_end(size_type __n, const_reference __x)"},
{"lineNum":" 1081","line":"{"},
{"lineNum":" 1082","line":"    _ConstructTransaction __tx(*this, __n);"},
{"lineNum":" 1083","line":"    const_pointer __new_end = __tx.__new_end_;"},
{"lineNum":" 1084","line":"    for (pointer __pos = __tx.__pos_; __pos != __new_end; ++__pos, __tx.__pos_ = __pos) {","class":"lineNoCov","hits":"0","possible_hits":"23",},
{"lineNum":" 1085","line":"        __alloc_traits::construct(this->__alloc(), _VSTD::__to_address(__pos), __x);"},
{"lineNum":" 1086","line":"    }"},
{"lineNum":" 1087","line":"}"},
{"lineNum":" 1088","line":""},
{"lineNum":" 1089","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1090","line":"template <class _ForwardIterator>"},
{"lineNum":" 1091","line":"typename enable_if"},
{"lineNum":" 1092","line":"<"},
{"lineNum":" 1093","line":"    __is_cpp17_forward_iterator<_ForwardIterator>::value,"},
{"lineNum":" 1094","line":"    void"},
{"lineNum":" 1095","line":">::type"},
{"lineNum":" 1096","line":"vector<_Tp, _Allocator>::__construct_at_end(_ForwardIterator __first, _ForwardIterator __last, size_type __n)"},
{"lineNum":" 1097","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1098","line":"    _ConstructTransaction __tx(*this, __n);"},
{"lineNum":" 1099","line":"    _VSTD::__construct_range_forward(this->__alloc(), __first, __last, __tx.__pos_);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1100","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1101","line":""},
{"lineNum":" 1102","line":"//  Default constructs __n objects starting at __end_"},
{"lineNum":" 1103","line":"//  throws if construction throws"},
{"lineNum":" 1104","line":"//  Postcondition:  size() == size() + __n"},
{"lineNum":" 1105","line":"//  Exception safety: strong."},
{"lineNum":" 1106","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1107","line":"void"},
{"lineNum":" 1108","line":"vector<_Tp, _Allocator>::__append(size_type __n)"},
{"lineNum":" 1109","line":"{","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":" 1110","line":"    if (static_cast<size_type>(this->__end_cap() - this->__end_) >= __n)","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":" 1111","line":"        this->__construct_at_end(__n);"},
{"lineNum":" 1112","line":"    else"},
{"lineNum":" 1113","line":"    {"},
{"lineNum":" 1114","line":"        allocator_type& __a = this->__alloc();"},
{"lineNum":" 1115","line":"        __split_buffer<value_type, allocator_type&> __v(__recommend(size() + __n), size(), __a);","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":" 1116","line":"        __v.__construct_at_end(__n);"},
{"lineNum":" 1117","line":"        __swap_out_circular_buffer(__v);"},
{"lineNum":" 1118","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1119","line":"}","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":" 1120","line":""},
{"lineNum":" 1121","line":"//  Default constructs __n objects starting at __end_"},
{"lineNum":" 1122","line":"//  throws if construction throws"},
{"lineNum":" 1123","line":"//  Postcondition:  size() == size() + __n"},
{"lineNum":" 1124","line":"//  Exception safety: strong."},
{"lineNum":" 1125","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1126","line":"void"},
{"lineNum":" 1127","line":"vector<_Tp, _Allocator>::__append(size_type __n, const_reference __x)"},
{"lineNum":" 1128","line":"{","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1129","line":"    if (static_cast<size_type>(this->__end_cap() - this->__end_) >= __n)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1130","line":"        this->__construct_at_end(__n, __x);"},
{"lineNum":" 1131","line":"    else"},
{"lineNum":" 1132","line":"    {"},
{"lineNum":" 1133","line":"        allocator_type& __a = this->__alloc();"},
{"lineNum":" 1134","line":"        __split_buffer<value_type, allocator_type&> __v(__recommend(size() + __n), size(), __a);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1135","line":"        __v.__construct_at_end(__n, __x);"},
{"lineNum":" 1136","line":"        __swap_out_circular_buffer(__v);"},
{"lineNum":" 1137","line":"    }"},
{"lineNum":" 1138","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1139","line":""},
{"lineNum":" 1140","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1141","line":"vector<_Tp, _Allocator>::vector(size_type __n)"},
{"lineNum":" 1142","line":"{"},
{"lineNum":" 1143","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1144","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1145","line":"#endif"},
{"lineNum":" 1146","line":"    if (__n > 0)","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":" 1147","line":"    {"},
{"lineNum":" 1148","line":"        __vallocate(__n);"},
{"lineNum":" 1149","line":"        __construct_at_end(__n);"},
{"lineNum":" 1150","line":"    }"},
{"lineNum":" 1151","line":"}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1152","line":""},
{"lineNum":" 1153","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 1154","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1155","line":"vector<_Tp, _Allocator>::vector(size_type __n, const allocator_type& __a)"},
{"lineNum":" 1156","line":"    : __base(__a)"},
{"lineNum":" 1157","line":"{"},
{"lineNum":" 1158","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1159","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1160","line":"#endif"},
{"lineNum":" 1161","line":"    if (__n > 0)"},
{"lineNum":" 1162","line":"    {"},
{"lineNum":" 1163","line":"        __vallocate(__n);"},
{"lineNum":" 1164","line":"        __construct_at_end(__n);"},
{"lineNum":" 1165","line":"    }"},
{"lineNum":" 1166","line":"}"},
{"lineNum":" 1167","line":"#endif"},
{"lineNum":" 1168","line":""},
{"lineNum":" 1169","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1170","line":"vector<_Tp, _Allocator>::vector(size_type __n, const value_type& __x)"},
{"lineNum":" 1171","line":"{"},
{"lineNum":" 1172","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1173","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1174","line":"#endif"},
{"lineNum":" 1175","line":"    if (__n > 0)","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":" 1176","line":"    {"},
{"lineNum":" 1177","line":"        __vallocate(__n);"},
{"lineNum":" 1178","line":"        __construct_at_end(__n, __x);"},
{"lineNum":" 1179","line":"    }"},
{"lineNum":" 1180","line":"}"},
{"lineNum":" 1181","line":""},
{"lineNum":" 1182","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1183","line":"vector<_Tp, _Allocator>::vector(size_type __n, const value_type& __x, const allocator_type& __a)"},
{"lineNum":" 1184","line":"    : __base(__a)"},
{"lineNum":" 1185","line":"{"},
{"lineNum":" 1186","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1187","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1188","line":"#endif"},
{"lineNum":" 1189","line":"    if (__n > 0)"},
{"lineNum":" 1190","line":"    {"},
{"lineNum":" 1191","line":"        __vallocate(__n);"},
{"lineNum":" 1192","line":"        __construct_at_end(__n, __x);"},
{"lineNum":" 1193","line":"    }"},
{"lineNum":" 1194","line":"}"},
{"lineNum":" 1195","line":""},
{"lineNum":" 1196","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1197","line":"template <class _InputIterator>"},
{"lineNum":" 1198","line":"vector<_Tp, _Allocator>::vector(_InputIterator __first,"},
{"lineNum":" 1199","line":"       typename enable_if<__is_cpp17_input_iterator  <_InputIterator>::value &&"},
{"lineNum":" 1200","line":"                         !__is_cpp17_forward_iterator<_InputIterator>::value &&"},
{"lineNum":" 1201","line":"                         is_constructible<"},
{"lineNum":" 1202","line":"                            value_type,"},
{"lineNum":" 1203","line":"                            typename iterator_traits<_InputIterator>::reference>::value,"},
{"lineNum":" 1204","line":"                          _InputIterator>::type __last)"},
{"lineNum":" 1205","line":"{"},
{"lineNum":" 1206","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1207","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1208","line":"#endif"},
{"lineNum":" 1209","line":"    for (; __first != __last; ++__first)"},
{"lineNum":" 1210","line":"        __emplace_back(*__first);"},
{"lineNum":" 1211","line":"}"},
{"lineNum":" 1212","line":""},
{"lineNum":" 1213","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1214","line":"template <class _InputIterator>"},
{"lineNum":" 1215","line":"vector<_Tp, _Allocator>::vector(_InputIterator __first, _InputIterator __last, const allocator_type& __a,"},
{"lineNum":" 1216","line":"       typename enable_if<__is_cpp17_input_iterator  <_InputIterator>::value &&"},
{"lineNum":" 1217","line":"                         !__is_cpp17_forward_iterator<_InputIterator>::value &&"},
{"lineNum":" 1218","line":"                         is_constructible<"},
{"lineNum":" 1219","line":"                            value_type,"},
{"lineNum":" 1220","line":"                            typename iterator_traits<_InputIterator>::reference>::value>::type*)"},
{"lineNum":" 1221","line":"    : __base(__a)"},
{"lineNum":" 1222","line":"{"},
{"lineNum":" 1223","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1224","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1225","line":"#endif"},
{"lineNum":" 1226","line":"    for (; __first != __last; ++__first)"},
{"lineNum":" 1227","line":"        __emplace_back(*__first);"},
{"lineNum":" 1228","line":"}"},
{"lineNum":" 1229","line":""},
{"lineNum":" 1230","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1231","line":"template <class _ForwardIterator>"},
{"lineNum":" 1232","line":"vector<_Tp, _Allocator>::vector(_ForwardIterator __first,"},
{"lineNum":" 1233","line":"                                typename enable_if<__is_cpp17_forward_iterator<_ForwardIterator>::value &&"},
{"lineNum":" 1234","line":"                                is_constructible<"},
{"lineNum":" 1235","line":"                                   value_type,"},
{"lineNum":" 1236","line":"                                   typename iterator_traits<_ForwardIterator>::reference>::value,"},
{"lineNum":" 1237","line":"                                                   _ForwardIterator>::type __last)"},
{"lineNum":" 1238","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1239","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1240","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1241","line":"#endif"},
{"lineNum":" 1242","line":"    size_type __n = static_cast<size_type>(_VSTD::distance(__first, __last));"},
{"lineNum":" 1243","line":"    if (__n > 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1244","line":"    {"},
{"lineNum":" 1245","line":"        __vallocate(__n);"},
{"lineNum":" 1246","line":"        __construct_at_end(__first, __last, __n);"},
{"lineNum":" 1247","line":"    }"},
{"lineNum":" 1248","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1249","line":""},
{"lineNum":" 1250","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1251","line":"template <class _ForwardIterator>"},
{"lineNum":" 1252","line":"vector<_Tp, _Allocator>::vector(_ForwardIterator __first, _ForwardIterator __last, const allocator_type& __a,"},
{"lineNum":" 1253","line":"                                typename enable_if<__is_cpp17_forward_iterator<_ForwardIterator>::value &&"},
{"lineNum":" 1254","line":"                                is_constructible<"},
{"lineNum":" 1255","line":"                                   value_type,"},
{"lineNum":" 1256","line":"                                   typename iterator_traits<_ForwardIterator>::reference>::value>::type*)"},
{"lineNum":" 1257","line":"    : __base(__a)"},
{"lineNum":" 1258","line":"{"},
{"lineNum":" 1259","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1260","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1261","line":"#endif"},
{"lineNum":" 1262","line":"    size_type __n = static_cast<size_type>(_VSTD::distance(__first, __last));"},
{"lineNum":" 1263","line":"    if (__n > 0)"},
{"lineNum":" 1264","line":"    {"},
{"lineNum":" 1265","line":"        __vallocate(__n);"},
{"lineNum":" 1266","line":"        __construct_at_end(__first, __last, __n);"},
{"lineNum":" 1267","line":"    }"},
{"lineNum":" 1268","line":"}"},
{"lineNum":" 1269","line":""},
{"lineNum":" 1270","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1271","line":"vector<_Tp, _Allocator>::vector(const vector& __x)"},
{"lineNum":" 1272","line":"    : __base(__alloc_traits::select_on_container_copy_construction(__x.__alloc()))"},
{"lineNum":" 1273","line":"{","class":"linePartCov","hits":"1","order":"177","possible_hits":"10",},
{"lineNum":" 1274","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1275","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1276","line":"#endif"},
{"lineNum":" 1277","line":"    size_type __n = __x.size();"},
{"lineNum":" 1278","line":"    if (__n > 0)","class":"linePartCov","hits":"1","order":"180","possible_hits":"60",},
{"lineNum":" 1279","line":"    {"},
{"lineNum":" 1280","line":"        __vallocate(__n);","class":"lineCov","hits":"1","order":"550","possible_hits":"1",},
{"lineNum":" 1281","line":"        __construct_at_end(__x.__begin_, __x.__end_, __n);","class":"linePartCov","hits":"1","order":"556","possible_hits":"37",},
{"lineNum":" 1282","line":"    }","class":"lineCov","hits":"1","order":"563","possible_hits":"1",},
{"lineNum":" 1283","line":"}","class":"linePartCov","hits":"1","order":"181","possible_hits":"20",},
{"lineNum":" 1284","line":""},
{"lineNum":" 1285","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1286","line":"vector<_Tp, _Allocator>::vector(const vector& __x, const __identity_t<allocator_type>& __a)"},
{"lineNum":" 1287","line":"    : __base(__a)"},
{"lineNum":" 1288","line":"{"},
{"lineNum":" 1289","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1290","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1291","line":"#endif"},
{"lineNum":" 1292","line":"    size_type __n = __x.size();"},
{"lineNum":" 1293","line":"    if (__n > 0)"},
{"lineNum":" 1294","line":"    {"},
{"lineNum":" 1295","line":"        __vallocate(__n);"},
{"lineNum":" 1296","line":"        __construct_at_end(__x.__begin_, __x.__end_, __n);"},
{"lineNum":" 1297","line":"    }"},
{"lineNum":" 1298","line":"}"},
{"lineNum":" 1299","line":""},
{"lineNum":" 1300","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1301","line":""},
{"lineNum":" 1302","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1303","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1304","line":"vector<_Tp, _Allocator>::vector(vector&& __x)"},
{"lineNum":" 1305","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 1306","line":"        _NOEXCEPT"},
{"lineNum":" 1307","line":"#else"},
{"lineNum":" 1308","line":"        _NOEXCEPT_(is_nothrow_move_constructible<allocator_type>::value)"},
{"lineNum":" 1309","line":"#endif"},
{"lineNum":" 1310","line":"    : __base(_VSTD::move(__x.__alloc()))"},
{"lineNum":" 1311","line":"{"},
{"lineNum":" 1312","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1313","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1314","line":"    __get_db()->swap(this, &__x);"},
{"lineNum":" 1315","line":"#endif"},
{"lineNum":" 1316","line":"    this->__begin_ = __x.__begin_;","class":"linePartCov","hits":"3","order":"182","possible_hits":"100",},
{"lineNum":" 1317","line":"    this->__end_ = __x.__end_;"},
{"lineNum":" 1318","line":"    this->__end_cap() = __x.__end_cap();","class":"linePartCov","hits":"3","order":"183","possible_hits":"100",},
{"lineNum":" 1319","line":"    __x.__begin_ = __x.__end_ = __x.__end_cap() = nullptr;","class":"linePartCov","hits":"3","order":"184","possible_hits":"100",},
{"lineNum":" 1320","line":"}"},
{"lineNum":" 1321","line":""},
{"lineNum":" 1322","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1323","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1324","line":"vector<_Tp, _Allocator>::vector(vector&& __x, const __identity_t<allocator_type>& __a)"},
{"lineNum":" 1325","line":"    : __base(__a)"},
{"lineNum":" 1326","line":"{"},
{"lineNum":" 1327","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1328","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1329","line":"#endif"},
{"lineNum":" 1330","line":"    if (__a == __x.__alloc())"},
{"lineNum":" 1331","line":"    {"},
{"lineNum":" 1332","line":"        this->__begin_ = __x.__begin_;"},
{"lineNum":" 1333","line":"        this->__end_ = __x.__end_;"},
{"lineNum":" 1334","line":"        this->__end_cap() = __x.__end_cap();"},
{"lineNum":" 1335","line":"        __x.__begin_ = __x.__end_ = __x.__end_cap() = nullptr;"},
{"lineNum":" 1336","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1337","line":"        __get_db()->swap(this, &__x);"},
{"lineNum":" 1338","line":"#endif"},
{"lineNum":" 1339","line":"    }"},
{"lineNum":" 1340","line":"    else"},
{"lineNum":" 1341","line":"    {"},
{"lineNum":" 1342","line":"        typedef move_iterator<iterator> _Ip;"},
{"lineNum":" 1343","line":"        assign(_Ip(__x.begin()), _Ip(__x.end()));"},
{"lineNum":" 1344","line":"    }"},
{"lineNum":" 1345","line":"}"},
{"lineNum":" 1346","line":""},
{"lineNum":" 1347","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1348","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1349","line":"vector<_Tp, _Allocator>::vector(initializer_list<value_type> __il)"},
{"lineNum":" 1350","line":"{"},
{"lineNum":" 1351","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1352","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1353","line":"#endif"},
{"lineNum":" 1354","line":"    if (__il.size() > 0)"},
{"lineNum":" 1355","line":"    {"},
{"lineNum":" 1356","line":"        __vallocate(__il.size());"},
{"lineNum":" 1357","line":"        __construct_at_end(__il.begin(), __il.end(), __il.size());"},
{"lineNum":" 1358","line":"    }"},
{"lineNum":" 1359","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1360","line":""},
{"lineNum":" 1361","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1362","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1363","line":"vector<_Tp, _Allocator>::vector(initializer_list<value_type> __il, const allocator_type& __a)"},
{"lineNum":" 1364","line":"    : __base(__a)"},
{"lineNum":" 1365","line":"{"},
{"lineNum":" 1366","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1367","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1368","line":"#endif"},
{"lineNum":" 1369","line":"    if (__il.size() > 0)"},
{"lineNum":" 1370","line":"    {"},
{"lineNum":" 1371","line":"        __vallocate(__il.size());"},
{"lineNum":" 1372","line":"        __construct_at_end(__il.begin(), __il.end(), __il.size());"},
{"lineNum":" 1373","line":"    }"},
{"lineNum":" 1374","line":"}"},
{"lineNum":" 1375","line":""},
{"lineNum":" 1376","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1377","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1378","line":"vector<_Tp, _Allocator>&"},
{"lineNum":" 1379","line":"vector<_Tp, _Allocator>::operator=(vector&& __x)"},
{"lineNum":" 1380","line":"    _NOEXCEPT_((__noexcept_move_assign_container<_Allocator, __alloc_traits>::value))"},
{"lineNum":" 1381","line":"{"},
{"lineNum":" 1382","line":"    __move_assign(__x, integral_constant<bool,"},
{"lineNum":" 1383","line":"          __alloc_traits::propagate_on_container_move_assignment::value>());"},
{"lineNum":" 1384","line":"    return *this;"},
{"lineNum":" 1385","line":"}"},
{"lineNum":" 1386","line":""},
{"lineNum":" 1387","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1388","line":"void"},
{"lineNum":" 1389","line":"vector<_Tp, _Allocator>::__move_assign(vector& __c, false_type)"},
{"lineNum":" 1390","line":"    _NOEXCEPT_(__alloc_traits::is_always_equal::value)"},
{"lineNum":" 1391","line":"{"},
{"lineNum":" 1392","line":"    if (__base::__alloc() != __c.__alloc())"},
{"lineNum":" 1393","line":"    {"},
{"lineNum":" 1394","line":"        typedef move_iterator<iterator> _Ip;"},
{"lineNum":" 1395","line":"        assign(_Ip(__c.begin()), _Ip(__c.end()));"},
{"lineNum":" 1396","line":"    }"},
{"lineNum":" 1397","line":"    else"},
{"lineNum":" 1398","line":"        __move_assign(__c, true_type());"},
{"lineNum":" 1399","line":"}"},
{"lineNum":" 1400","line":""},
{"lineNum":" 1401","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1402","line":"void"},
{"lineNum":" 1403","line":"vector<_Tp, _Allocator>::__move_assign(vector& __c, true_type)"},
{"lineNum":" 1404","line":"    _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value)"},
{"lineNum":" 1405","line":"{"},
{"lineNum":" 1406","line":"    __vdeallocate();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1407","line":"    __base::__move_assign_alloc(__c); // this can throw"},
{"lineNum":" 1408","line":"    this->__begin_ = __c.__begin_;","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":" 1409","line":"    this->__end_ = __c.__end_;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1410","line":"    this->__end_cap() = __c.__end_cap();","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":" 1411","line":"    __c.__begin_ = __c.__end_ = __c.__end_cap() = nullptr;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1412","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1413","line":"    __get_db()->swap(this, &__c);"},
{"lineNum":" 1414","line":"#endif"},
{"lineNum":" 1415","line":"}"},
{"lineNum":" 1416","line":""},
{"lineNum":" 1417","line":"#endif // !_LIBCPP_CXX03_LANG"},
{"lineNum":" 1418","line":""},
{"lineNum":" 1419","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1420","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1421","line":"vector<_Tp, _Allocator>&"},
{"lineNum":" 1422","line":"vector<_Tp, _Allocator>::operator=(const vector& __x)"},
{"lineNum":" 1423","line":"{"},
{"lineNum":" 1424","line":"    if (this != &__x)","class":"linePartCov","hits":"2","order":"656","possible_hits":"81",},
{"lineNum":" 1425","line":"    {"},
{"lineNum":" 1426","line":"        __base::__copy_assign_alloc(__x);","class":"linePartCov","hits":"2","order":"657","possible_hits":"22",},
{"lineNum":" 1427","line":"        assign(__x.__begin_, __x.__end_);","class":"linePartCov","hits":"2","order":"658","possible_hits":"82",},
{"lineNum":" 1428","line":"    }"},
{"lineNum":" 1429","line":"    return *this;"},
{"lineNum":" 1430","line":"}"},
{"lineNum":" 1431","line":""},
{"lineNum":" 1432","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1433","line":"template <class _InputIterator>"},
{"lineNum":" 1434","line":"typename enable_if"},
{"lineNum":" 1435","line":"<"},
{"lineNum":" 1436","line":"     __is_cpp17_input_iterator  <_InputIterator>::value &&"},
{"lineNum":" 1437","line":"    !__is_cpp17_forward_iterator<_InputIterator>::value &&"},
{"lineNum":" 1438","line":"    is_constructible<"},
{"lineNum":" 1439","line":"       _Tp,"},
{"lineNum":" 1440","line":"       typename iterator_traits<_InputIterator>::reference>::value,"},
{"lineNum":" 1441","line":"    void"},
{"lineNum":" 1442","line":">::type"},
{"lineNum":" 1443","line":"vector<_Tp, _Allocator>::assign(_InputIterator __first, _InputIterator __last)"},
{"lineNum":" 1444","line":"{"},
{"lineNum":" 1445","line":"    clear();"},
{"lineNum":" 1446","line":"    for (; __first != __last; ++__first)"},
{"lineNum":" 1447","line":"        __emplace_back(*__first);"},
{"lineNum":" 1448","line":"}"},
{"lineNum":" 1449","line":""},
{"lineNum":" 1450","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1451","line":"template <class _ForwardIterator>"},
{"lineNum":" 1452","line":"typename enable_if"},
{"lineNum":" 1453","line":"<"},
{"lineNum":" 1454","line":"    __is_cpp17_forward_iterator<_ForwardIterator>::value &&"},
{"lineNum":" 1455","line":"    is_constructible<"},
{"lineNum":" 1456","line":"       _Tp,"},
{"lineNum":" 1457","line":"       typename iterator_traits<_ForwardIterator>::reference>::value,"},
{"lineNum":" 1458","line":"    void"},
{"lineNum":" 1459","line":">::type"},
{"lineNum":" 1460","line":"vector<_Tp, _Allocator>::assign(_ForwardIterator __first, _ForwardIterator __last)"},
{"lineNum":" 1461","line":"{","class":"linePartCov","hits":"1","order":"659","possible_hits":"13",},
{"lineNum":" 1462","line":"    size_type __new_size = static_cast<size_type>(_VSTD::distance(__first, __last));"},
{"lineNum":" 1463","line":"    if (__new_size <= capacity())","class":"linePartCov","hits":"1","order":"661","possible_hits":"13",},
{"lineNum":" 1464","line":"    {"},
{"lineNum":" 1465","line":"        _ForwardIterator __mid = __last;"},
{"lineNum":" 1466","line":"        bool __growing = false;"},
{"lineNum":" 1467","line":"        if (__new_size > size())","class":"lineNoCov","hits":"0","possible_hits":"27",},
{"lineNum":" 1468","line":"        {"},
{"lineNum":" 1469","line":"            __growing = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1470","line":"            __mid =  __first;"},
{"lineNum":" 1471","line":"            _VSTD::advance(__mid, size());"},
{"lineNum":" 1472","line":"        }"},
{"lineNum":" 1473","line":"        pointer __m = _VSTD::copy(__first, __mid, this->__begin_);"},
{"lineNum":" 1474","line":"        if (__growing)","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":" 1475","line":"            __construct_at_end(__mid, __last, __new_size - size());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1476","line":"        else"},
{"lineNum":" 1477","line":"            this->__destruct_at_end(__m);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1478","line":"    }"},
{"lineNum":" 1479","line":"    else"},
{"lineNum":" 1480","line":"    {"},
{"lineNum":" 1481","line":"        __vdeallocate();","class":"lineCov","hits":"1","order":"662","possible_hits":"1",},
{"lineNum":" 1482","line":"        __vallocate(__recommend(__new_size));","class":"lineCov","hits":"1","order":"666","possible_hits":"1",},
{"lineNum":" 1483","line":"        __construct_at_end(__first, __last, __new_size);"},
{"lineNum":" 1484","line":"    }"},
{"lineNum":" 1485","line":"    __invalidate_all_iterators();"},
{"lineNum":" 1486","line":"}","class":"linePartCov","hits":"1","order":"667","possible_hits":"14",},
{"lineNum":" 1487","line":""},
{"lineNum":" 1488","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1489","line":"void"},
{"lineNum":" 1490","line":"vector<_Tp, _Allocator>::assign(size_type __n, const_reference __u)"},
{"lineNum":" 1491","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1492","line":"    if (__n <= capacity())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1493","line":"    {"},
{"lineNum":" 1494","line":"        size_type __s = size();"},
{"lineNum":" 1495","line":"        _VSTD::fill_n(this->__begin_, _VSTD::min(__n, __s), __u);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1496","line":"        if (__n > __s)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1497","line":"            __construct_at_end(__n - __s, __u);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1498","line":"        else"},
{"lineNum":" 1499","line":"            this->__destruct_at_end(this->__begin_ + __n);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1500","line":"    }"},
{"lineNum":" 1501","line":"    else"},
{"lineNum":" 1502","line":"    {"},
{"lineNum":" 1503","line":"        __vdeallocate();"},
{"lineNum":" 1504","line":"        __vallocate(__recommend(static_cast<size_type>(__n)));"},
{"lineNum":" 1505","line":"        __construct_at_end(__n, __u);"},
{"lineNum":" 1506","line":"    }"},
{"lineNum":" 1507","line":"    __invalidate_all_iterators();"},
{"lineNum":" 1508","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1509","line":""},
{"lineNum":" 1510","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1511","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1512","line":"typename vector<_Tp, _Allocator>::iterator"},
{"lineNum":" 1513","line":"vector<_Tp, _Allocator>::__make_iter(pointer __p) _NOEXCEPT"},
{"lineNum":" 1514","line":"{"},
{"lineNum":" 1515","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1516","line":"    return iterator(this, __p);"},
{"lineNum":" 1517","line":"#else"},
{"lineNum":" 1518","line":"    return iterator(__p);"},
{"lineNum":" 1519","line":"#endif"},
{"lineNum":" 1520","line":"}"},
{"lineNum":" 1521","line":""},
{"lineNum":" 1522","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1523","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1524","line":"typename vector<_Tp, _Allocator>::const_iterator"},
{"lineNum":" 1525","line":"vector<_Tp, _Allocator>::__make_iter(const_pointer __p) const _NOEXCEPT"},
{"lineNum":" 1526","line":"{"},
{"lineNum":" 1527","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1528","line":"    return const_iterator(this, __p);"},
{"lineNum":" 1529","line":"#else"},
{"lineNum":" 1530","line":"    return const_iterator(__p);"},
{"lineNum":" 1531","line":"#endif"},
{"lineNum":" 1532","line":"}"},
{"lineNum":" 1533","line":""},
{"lineNum":" 1534","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1535","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1536","line":"typename vector<_Tp, _Allocator>::iterator"},
{"lineNum":" 1537","line":"vector<_Tp, _Allocator>::begin() _NOEXCEPT"},
{"lineNum":" 1538","line":"{"},
{"lineNum":" 1539","line":"    return __make_iter(this->__begin_);","class":"lineNoCov","hits":"0","possible_hits":"95",},
{"lineNum":" 1540","line":"}"},
{"lineNum":" 1541","line":""},
{"lineNum":" 1542","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1543","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1544","line":"typename vector<_Tp, _Allocator>::const_iterator"},
{"lineNum":" 1545","line":"vector<_Tp, _Allocator>::begin() const _NOEXCEPT"},
{"lineNum":" 1546","line":"{"},
{"lineNum":" 1547","line":"    return __make_iter(this->__begin_);","class":"linePartCov","hits":"2","order":"564","possible_hits":"327",},
{"lineNum":" 1548","line":"}"},
{"lineNum":" 1549","line":""},
{"lineNum":" 1550","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1551","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1552","line":"typename vector<_Tp, _Allocator>::iterator"},
{"lineNum":" 1553","line":"vector<_Tp, _Allocator>::end() _NOEXCEPT"},
{"lineNum":" 1554","line":"{"},
{"lineNum":" 1555","line":"    return __make_iter(this->__end_);","class":"linePartCov","hits":"2","order":"566","possible_hits":"116",},
{"lineNum":" 1556","line":"}"},
{"lineNum":" 1557","line":""},
{"lineNum":" 1558","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1559","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1560","line":"typename vector<_Tp, _Allocator>::const_iterator"},
{"lineNum":" 1561","line":"vector<_Tp, _Allocator>::end() const _NOEXCEPT"},
{"lineNum":" 1562","line":"{"},
{"lineNum":" 1563","line":"    return __make_iter(this->__end_);","class":"linePartCov","hits":"2","order":"565","possible_hits":"341",},
{"lineNum":" 1564","line":"}"},
{"lineNum":" 1565","line":""},
{"lineNum":" 1566","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1567","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1568","line":"typename vector<_Tp, _Allocator>::reference"},
{"lineNum":" 1569","line":"vector<_Tp, _Allocator>::operator[](size_type __n) _NOEXCEPT"},
{"lineNum":" 1570","line":"{"},
{"lineNum":" 1571","line":"    _LIBCPP_ASSERT(__n < size(), \"vector[] index out of bounds\");"},
{"lineNum":" 1572","line":"    return this->__begin_[__n];","class":"lineNoCov","hits":"0","possible_hits":"124",},
{"lineNum":" 1573","line":"}"},
{"lineNum":" 1574","line":""},
{"lineNum":" 1575","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1576","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1577","line":"typename vector<_Tp, _Allocator>::const_reference"},
{"lineNum":" 1578","line":"vector<_Tp, _Allocator>::operator[](size_type __n) const _NOEXCEPT"},
{"lineNum":" 1579","line":"{"},
{"lineNum":" 1580","line":"    _LIBCPP_ASSERT(__n < size(), \"vector[] index out of bounds\");"},
{"lineNum":" 1581","line":"    return this->__begin_[__n];","class":"lineNoCov","hits":"0","possible_hits":"32",},
{"lineNum":" 1582","line":"}"},
{"lineNum":" 1583","line":""},
{"lineNum":" 1584","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1585","line":"typename vector<_Tp, _Allocator>::reference"},
{"lineNum":" 1586","line":"vector<_Tp, _Allocator>::at(size_type __n)"},
{"lineNum":" 1587","line":"{"},
{"lineNum":" 1588","line":"    if (__n >= size())","class":"lineNoCov","hits":"0","possible_hits":"23",},
{"lineNum":" 1589","line":"        this->__throw_out_of_range();","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1590","line":"    return this->__begin_[__n];"},
{"lineNum":" 1591","line":"}"},
{"lineNum":" 1592","line":""},
{"lineNum":" 1593","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1594","line":"typename vector<_Tp, _Allocator>::const_reference"},
{"lineNum":" 1595","line":"vector<_Tp, _Allocator>::at(size_type __n) const"},
{"lineNum":" 1596","line":"{"},
{"lineNum":" 1597","line":"    if (__n >= size())"},
{"lineNum":" 1598","line":"        this->__throw_out_of_range();"},
{"lineNum":" 1599","line":"    return this->__begin_[__n];"},
{"lineNum":" 1600","line":"}"},
{"lineNum":" 1601","line":""},
{"lineNum":" 1602","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1603","line":"void"},
{"lineNum":" 1604","line":"vector<_Tp, _Allocator>::reserve(size_type __n)"},
{"lineNum":" 1605","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1606","line":"    if (__n > capacity())","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1607","line":"    {"},
{"lineNum":" 1608","line":"        allocator_type& __a = this->__alloc();"},
{"lineNum":" 1609","line":"        __split_buffer<value_type, allocator_type&> __v(__n, size(), __a);"},
{"lineNum":" 1610","line":"        __swap_out_circular_buffer(__v);"},
{"lineNum":" 1611","line":"    }"},
{"lineNum":" 1612","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1613","line":""},
{"lineNum":" 1614","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1615","line":"void"},
{"lineNum":" 1616","line":"vector<_Tp, _Allocator>::shrink_to_fit() _NOEXCEPT"},
{"lineNum":" 1617","line":"{"},
{"lineNum":" 1618","line":"    if (capacity() > size())"},
{"lineNum":" 1619","line":"    {"},
{"lineNum":" 1620","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1621","line":"        try"},
{"lineNum":" 1622","line":"        {"},
{"lineNum":" 1623","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1624","line":"            allocator_type& __a = this->__alloc();"},
{"lineNum":" 1625","line":"            __split_buffer<value_type, allocator_type&> __v(size(), size(), __a);"},
{"lineNum":" 1626","line":"            __swap_out_circular_buffer(__v);"},
{"lineNum":" 1627","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1628","line":"        }"},
{"lineNum":" 1629","line":"        catch (...)"},
{"lineNum":" 1630","line":"        {"},
{"lineNum":" 1631","line":"        }"},
{"lineNum":" 1632","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1633","line":"    }"},
{"lineNum":" 1634","line":"}"},
{"lineNum":" 1635","line":""},
{"lineNum":" 1636","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1637","line":"template <class _Up>"},
{"lineNum":" 1638","line":"void"},
{"lineNum":" 1639","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1640","line":"vector<_Tp, _Allocator>::__push_back_slow_path(_Up&& __x)"},
{"lineNum":" 1641","line":"#else"},
{"lineNum":" 1642","line":"vector<_Tp, _Allocator>::__push_back_slow_path(_Up& __x)"},
{"lineNum":" 1643","line":"#endif"},
{"lineNum":" 1644","line":"{","class":"linePartCov","hits":"1","order":"193","possible_hits":"29",},
{"lineNum":" 1645","line":"    allocator_type& __a = this->__alloc();"},
{"lineNum":" 1646","line":"    __split_buffer<value_type, allocator_type&> __v(__recommend(size() + 1), size(), __a);","class":"linePartCov","hits":"2","order":"195","possible_hits":"132",},
{"lineNum":" 1647","line":"    // __v.push_back(_VSTD::forward<_Up>(__x));"},
{"lineNum":" 1648","line":"    __alloc_traits::construct(__a, _VSTD::__to_address(__v.__end_), _VSTD::forward<_Up>(__x));","class":"linePartCov","hits":"1","order":"209","possible_hits":"3",},
{"lineNum":" 1649","line":"    __v.__end_++;","class":"linePartCov","hits":"1","order":"211","possible_hits":"62",},
{"lineNum":" 1650","line":"    __swap_out_circular_buffer(__v);","class":"linePartCov","hits":"1","order":"212","possible_hits":"3",},
{"lineNum":" 1651","line":"}","class":"linePartCov","hits":"1","order":"223","possible_hits":"40",},
{"lineNum":" 1652","line":""},
{"lineNum":" 1653","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1654","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1655","line":"void"},
{"lineNum":" 1656","line":"vector<_Tp, _Allocator>::push_back(const_reference __x)"},
{"lineNum":" 1657","line":"{"},
{"lineNum":" 1658","line":"    if (this->__end_ != this->__end_cap())","class":"lineNoCov","hits":"0","possible_hits":"99",},
{"lineNum":" 1659","line":"    {"},
{"lineNum":" 1660","line":"        __construct_one_at_end(__x);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1661","line":"    }"},
{"lineNum":" 1662","line":"    else"},
{"lineNum":" 1663","line":"        __push_back_slow_path(__x);","class":"lineNoCov","hits":"0","possible_hits":"39",},
{"lineNum":" 1664","line":"}"},
{"lineNum":" 1665","line":""},
{"lineNum":" 1666","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1667","line":""},
{"lineNum":" 1668","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1669","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1670","line":"void"},
{"lineNum":" 1671","line":"vector<_Tp, _Allocator>::push_back(value_type&& __x)"},
{"lineNum":" 1672","line":"{"},
{"lineNum":" 1673","line":"    if (this->__end_ < this->__end_cap())","class":"linePartCov","hits":"11","order":"191","possible_hits":"96",},
{"lineNum":" 1674","line":"    {"},
{"lineNum":" 1675","line":"        __construct_one_at_end(_VSTD::move(__x));","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":" 1676","line":"    }"},
{"lineNum":" 1677","line":"    else"},
{"lineNum":" 1678","line":"        __push_back_slow_path(_VSTD::move(__x));","class":"linePartCov","hits":"22","order":"192","possible_hits":"50",},
{"lineNum":" 1679","line":"}"},
{"lineNum":" 1680","line":""},
{"lineNum":" 1681","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1682","line":"template <class... _Args>"},
{"lineNum":" 1683","line":"void"},
{"lineNum":" 1684","line":"vector<_Tp, _Allocator>::__emplace_back_slow_path(_Args&&... __args)"},
{"lineNum":" 1685","line":"{","class":"linePartCov","hits":"1","order":"280","possible_hits":"22",},
{"lineNum":" 1686","line":"    allocator_type& __a = this->__alloc();"},
{"lineNum":" 1687","line":"    __split_buffer<value_type, allocator_type&> __v(__recommend(size() + 1), size(), __a);","class":"linePartCov","hits":"2","order":"281","possible_hits":"88",},
{"lineNum":" 1688","line":"//    __v.emplace_back(_VSTD::forward<_Args>(__args)...);"},
{"lineNum":" 1689","line":"    __alloc_traits::construct(__a, _VSTD::__to_address(__v.__end_), _VSTD::forward<_Args>(__args)...);","class":"linePartCov","hits":"1","order":"282","possible_hits":"6",},
{"lineNum":" 1690","line":"    __v.__end_++;","class":"linePartCov","hits":"1","order":"283","possible_hits":"57",},
{"lineNum":" 1691","line":"    __swap_out_circular_buffer(__v);","class":"linePartCov","hits":"1","order":"284","possible_hits":"6",},
{"lineNum":" 1692","line":"}","class":"linePartCov","hits":"1","order":"285","possible_hits":"31",},
{"lineNum":" 1693","line":""},
{"lineNum":" 1694","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1695","line":"template <class... _Args>"},
{"lineNum":" 1696","line":"inline"},
{"lineNum":" 1697","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 1698","line":"typename vector<_Tp, _Allocator>::reference"},
{"lineNum":" 1699","line":"#else"},
{"lineNum":" 1700","line":"void"},
{"lineNum":" 1701","line":"#endif"},
{"lineNum":" 1702","line":"vector<_Tp, _Allocator>::emplace_back(_Args&&... __args)"},
{"lineNum":" 1703","line":"{","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1704","line":"    if (this->__end_ < this->__end_cap())","class":"linePartCov","hits":"22","order":"278","possible_hits":"115",},
{"lineNum":" 1705","line":"    {"},
{"lineNum":" 1706","line":"        __construct_one_at_end(_VSTD::forward<_Args>(__args)...);","class":"lineNoCov","hits":"0","possible_hits":"27",},
{"lineNum":" 1707","line":"    }"},
{"lineNum":" 1708","line":"    else"},
{"lineNum":" 1709","line":"        __emplace_back_slow_path(_VSTD::forward<_Args>(__args)...);","class":"linePartCov","hits":"22","order":"279","possible_hits":"54",},
{"lineNum":" 1710","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 1711","line":"    return this->back();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1712","line":"#endif"},
{"lineNum":" 1713","line":"}"},
{"lineNum":" 1714","line":""},
{"lineNum":" 1715","line":"#endif // !_LIBCPP_CXX03_LANG"},
{"lineNum":" 1716","line":""},
{"lineNum":" 1717","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1718","line":"inline"},
{"lineNum":" 1719","line":"void"},
{"lineNum":" 1720","line":"vector<_Tp, _Allocator>::pop_back()"},
{"lineNum":" 1721","line":"{"},
{"lineNum":" 1722","line":"    _LIBCPP_ASSERT(!empty(), \"vector::pop_back called on an empty vector\");"},
{"lineNum":" 1723","line":"    this->__destruct_at_end(this->__end_ - 1);","class":"lineNoCov","hits":"0","possible_hits":"219",},
{"lineNum":" 1724","line":"}"},
{"lineNum":" 1725","line":""},
{"lineNum":" 1726","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1727","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1728","line":"typename vector<_Tp, _Allocator>::iterator"},
{"lineNum":" 1729","line":"vector<_Tp, _Allocator>::erase(const_iterator __position)"},
{"lineNum":" 1730","line":"{"},
{"lineNum":" 1731","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1732","line":"    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__position) == this,"},
{"lineNum":" 1733","line":"        \"vector::erase(iterator) called with an iterator not\""},
{"lineNum":" 1734","line":"        \" referring to this vector\");"},
{"lineNum":" 1735","line":"#endif"},
{"lineNum":" 1736","line":"    _LIBCPP_ASSERT(__position != end(),"},
{"lineNum":" 1737","line":"        \"vector::erase(iterator) called with a non-dereferenceable iterator\");"},
{"lineNum":" 1738","line":"    difference_type __ps = __position - cbegin();"},
{"lineNum":" 1739","line":"    pointer __p = this->__begin_ + __ps;"},
{"lineNum":" 1740","line":"    this->__destruct_at_end(_VSTD::move(__p + 1, this->__end_, __p));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1741","line":"    this->__invalidate_iterators_past(__p-1);"},
{"lineNum":" 1742","line":"    iterator __r = __make_iter(__p);"},
{"lineNum":" 1743","line":"    return __r;"},
{"lineNum":" 1744","line":"}"},
{"lineNum":" 1745","line":""},
{"lineNum":" 1746","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1747","line":"typename vector<_Tp, _Allocator>::iterator"},
{"lineNum":" 1748","line":"vector<_Tp, _Allocator>::erase(const_iterator __first, const_iterator __last)"},
{"lineNum":" 1749","line":"{"},
{"lineNum":" 1750","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1751","line":"    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__first) == this,"},
{"lineNum":" 1752","line":"        \"vector::erase(iterator,  iterator) called with an iterator not\""},
{"lineNum":" 1753","line":"        \" referring to this vector\");"},
{"lineNum":" 1754","line":"    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__last) == this,"},
{"lineNum":" 1755","line":"        \"vector::erase(iterator,  iterator) called with an iterator not\""},
{"lineNum":" 1756","line":"        \" referring to this vector\");"},
{"lineNum":" 1757","line":"#endif"},
{"lineNum":" 1758","line":"    _LIBCPP_ASSERT(__first <= __last, \"vector::erase(first, last) called with invalid range\");"},
{"lineNum":" 1759","line":"    pointer __p = this->__begin_ + (__first - begin());"},
{"lineNum":" 1760","line":"    if (__first != __last) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1761","line":"        this->__destruct_at_end(_VSTD::move(__p + (__last - __first), this->__end_, __p));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1762","line":"        this->__invalidate_iterators_past(__p - 1);"},
{"lineNum":" 1763","line":"    }"},
{"lineNum":" 1764","line":"    iterator __r = __make_iter(__p);"},
{"lineNum":" 1765","line":"    return __r;"},
{"lineNum":" 1766","line":"}"},
{"lineNum":" 1767","line":""},
{"lineNum":" 1768","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1769","line":"void"},
{"lineNum":" 1770","line":"vector<_Tp, _Allocator>::__move_range(pointer __from_s, pointer __from_e, pointer __to)"},
{"lineNum":" 1771","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1772","line":"    pointer __old_last = this->__end_;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1773","line":"    difference_type __n = __old_last - __to;","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":" 1774","line":"    {"},
{"lineNum":" 1775","line":"      pointer __i = __from_s + __n;","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":" 1776","line":"      _ConstructTransaction __tx(*this, __from_e - __i);"},
{"lineNum":" 1777","line":"      for (pointer __pos = __tx.__pos_; __i < __from_e;","class":"lineNoCov","hits":"0","possible_hits":"17",},
{"lineNum":" 1778","line":"           ++__i, ++__pos, __tx.__pos_ = __pos) {","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":" 1779","line":"          __alloc_traits::construct(this->__alloc(),"},
{"lineNum":" 1780","line":"                                    _VSTD::__to_address(__pos),"},
{"lineNum":" 1781","line":"                                    _VSTD::move(*__i));"},
{"lineNum":" 1782","line":"      }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1783","line":"    }"},
{"lineNum":" 1784","line":"    _VSTD::move_backward(__from_s, __from_s + __n, __old_last);"},
{"lineNum":" 1785","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1786","line":""},
{"lineNum":" 1787","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1788","line":"typename vector<_Tp, _Allocator>::iterator"},
{"lineNum":" 1789","line":"vector<_Tp, _Allocator>::insert(const_iterator __position, const_reference __x)"},
{"lineNum":" 1790","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1791","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1792","line":"    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__position) == this,"},
{"lineNum":" 1793","line":"        \"vector::insert(iterator, x) called with an iterator not\""},
{"lineNum":" 1794","line":"        \" referring to this vector\");"},
{"lineNum":" 1795","line":"#endif"},
{"lineNum":" 1796","line":"    pointer __p = this->__begin_ + (__position - begin());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1797","line":"    if (this->__end_ < this->__end_cap())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1798","line":"    {"},
{"lineNum":" 1799","line":"        if (__p == this->__end_)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1800","line":"        {"},
{"lineNum":" 1801","line":"            __construct_one_at_end(__x);"},
{"lineNum":" 1802","line":"        }"},
{"lineNum":" 1803","line":"        else"},
{"lineNum":" 1804","line":"        {"},
{"lineNum":" 1805","line":"            __move_range(__p, this->__end_, __p + 1);"},
{"lineNum":" 1806","line":"            const_pointer __xr = pointer_traits<const_pointer>::pointer_to(__x);"},
{"lineNum":" 1807","line":"            if (__p <= __xr && __xr < this->__end_)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1808","line":"                ++__xr;"},
{"lineNum":" 1809","line":"            *__p = *__xr;"},
{"lineNum":" 1810","line":"        }"},
{"lineNum":" 1811","line":"    }"},
{"lineNum":" 1812","line":"    else"},
{"lineNum":" 1813","line":"    {"},
{"lineNum":" 1814","line":"        allocator_type& __a = this->__alloc();"},
{"lineNum":" 1815","line":"        __split_buffer<value_type, allocator_type&> __v(__recommend(size() + 1), __p - this->__begin_, __a);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1816","line":"        __v.push_back(__x);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1817","line":"        __p = __swap_out_circular_buffer(__v, __p);"},
{"lineNum":" 1818","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1819","line":"    return __make_iter(__p);"},
{"lineNum":" 1820","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1821","line":""},
{"lineNum":" 1822","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1823","line":""},
{"lineNum":" 1824","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1825","line":"typename vector<_Tp, _Allocator>::iterator"},
{"lineNum":" 1826","line":"vector<_Tp, _Allocator>::insert(const_iterator __position, value_type&& __x)"},
{"lineNum":" 1827","line":"{"},
{"lineNum":" 1828","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1829","line":"    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__position) == this,"},
{"lineNum":" 1830","line":"        \"vector::insert(iterator, x) called with an iterator not\""},
{"lineNum":" 1831","line":"        \" referring to this vector\");"},
{"lineNum":" 1832","line":"#endif"},
{"lineNum":" 1833","line":"    pointer __p = this->__begin_ + (__position - begin());"},
{"lineNum":" 1834","line":"    if (this->__end_ < this->__end_cap())"},
{"lineNum":" 1835","line":"    {"},
{"lineNum":" 1836","line":"        if (__p == this->__end_)"},
{"lineNum":" 1837","line":"        {"},
{"lineNum":" 1838","line":"            __construct_one_at_end(_VSTD::move(__x));"},
{"lineNum":" 1839","line":"        }"},
{"lineNum":" 1840","line":"        else"},
{"lineNum":" 1841","line":"        {"},
{"lineNum":" 1842","line":"            __move_range(__p, this->__end_, __p + 1);"},
{"lineNum":" 1843","line":"            *__p = _VSTD::move(__x);"},
{"lineNum":" 1844","line":"        }"},
{"lineNum":" 1845","line":"    }"},
{"lineNum":" 1846","line":"    else"},
{"lineNum":" 1847","line":"    {"},
{"lineNum":" 1848","line":"        allocator_type& __a = this->__alloc();"},
{"lineNum":" 1849","line":"        __split_buffer<value_type, allocator_type&> __v(__recommend(size() + 1), __p - this->__begin_, __a);"},
{"lineNum":" 1850","line":"        __v.push_back(_VSTD::move(__x));"},
{"lineNum":" 1851","line":"        __p = __swap_out_circular_buffer(__v, __p);"},
{"lineNum":" 1852","line":"    }"},
{"lineNum":" 1853","line":"    return __make_iter(__p);"},
{"lineNum":" 1854","line":"}"},
{"lineNum":" 1855","line":""},
{"lineNum":" 1856","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1857","line":"template <class... _Args>"},
{"lineNum":" 1858","line":"typename vector<_Tp, _Allocator>::iterator"},
{"lineNum":" 1859","line":"vector<_Tp, _Allocator>::emplace(const_iterator __position, _Args&&... __args)"},
{"lineNum":" 1860","line":"{"},
{"lineNum":" 1861","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1862","line":"    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__position) == this,"},
{"lineNum":" 1863","line":"        \"vector::emplace(iterator, x) called with an iterator not\""},
{"lineNum":" 1864","line":"        \" referring to this vector\");"},
{"lineNum":" 1865","line":"#endif"},
{"lineNum":" 1866","line":"    pointer __p = this->__begin_ + (__position - begin());"},
{"lineNum":" 1867","line":"    if (this->__end_ < this->__end_cap())"},
{"lineNum":" 1868","line":"    {"},
{"lineNum":" 1869","line":"        if (__p == this->__end_)"},
{"lineNum":" 1870","line":"        {"},
{"lineNum":" 1871","line":"            __construct_one_at_end(_VSTD::forward<_Args>(__args)...);"},
{"lineNum":" 1872","line":"        }"},
{"lineNum":" 1873","line":"        else"},
{"lineNum":" 1874","line":"        {"},
{"lineNum":" 1875","line":"            __temp_value<value_type, _Allocator> __tmp(this->__alloc(), _VSTD::forward<_Args>(__args)...);"},
{"lineNum":" 1876","line":"            __move_range(__p, this->__end_, __p + 1);"},
{"lineNum":" 1877","line":"            *__p = _VSTD::move(__tmp.get());"},
{"lineNum":" 1878","line":"        }"},
{"lineNum":" 1879","line":"    }"},
{"lineNum":" 1880","line":"    else"},
{"lineNum":" 1881","line":"    {"},
{"lineNum":" 1882","line":"        allocator_type& __a = this->__alloc();"},
{"lineNum":" 1883","line":"        __split_buffer<value_type, allocator_type&> __v(__recommend(size() + 1), __p - this->__begin_, __a);"},
{"lineNum":" 1884","line":"        __v.emplace_back(_VSTD::forward<_Args>(__args)...);"},
{"lineNum":" 1885","line":"        __p = __swap_out_circular_buffer(__v, __p);"},
{"lineNum":" 1886","line":"    }"},
{"lineNum":" 1887","line":"    return __make_iter(__p);"},
{"lineNum":" 1888","line":"}"},
{"lineNum":" 1889","line":""},
{"lineNum":" 1890","line":"#endif // !_LIBCPP_CXX03_LANG"},
{"lineNum":" 1891","line":""},
{"lineNum":" 1892","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1893","line":"typename vector<_Tp, _Allocator>::iterator"},
{"lineNum":" 1894","line":"vector<_Tp, _Allocator>::insert(const_iterator __position, size_type __n, const_reference __x)"},
{"lineNum":" 1895","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1896","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1897","line":"    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__position) == this,"},
{"lineNum":" 1898","line":"        \"vector::insert(iterator, n, x) called with an iterator not\""},
{"lineNum":" 1899","line":"        \" referring to this vector\");"},
{"lineNum":" 1900","line":"#endif"},
{"lineNum":" 1901","line":"    pointer __p = this->__begin_ + (__position - begin());"},
{"lineNum":" 1902","line":"    if (__n > 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1903","line":"    {"},
{"lineNum":" 1904","line":"        if (__n <= static_cast<size_type>(this->__end_cap() - this->__end_))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1905","line":"        {"},
{"lineNum":" 1906","line":"            size_type __old_n = __n;"},
{"lineNum":" 1907","line":"            pointer __old_last = this->__end_;"},
{"lineNum":" 1908","line":"            if (__n > static_cast<size_type>(this->__end_ - __p))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1909","line":"            {"},
{"lineNum":" 1910","line":"                size_type __cx = __n - (this->__end_ - __p);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1911","line":"                __construct_at_end(__cx, __x);"},
{"lineNum":" 1912","line":"                __n -= __cx;"},
{"lineNum":" 1913","line":"            }"},
{"lineNum":" 1914","line":"            if (__n > 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1915","line":"            {"},
{"lineNum":" 1916","line":"                __move_range(__p, __old_last, __p + __old_n);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1917","line":"                const_pointer __xr = pointer_traits<const_pointer>::pointer_to(__x);"},
{"lineNum":" 1918","line":"                if (__p <= __xr && __xr < this->__end_)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1919","line":"                    __xr += __old_n;"},
{"lineNum":" 1920","line":"                _VSTD::fill_n(__p, __n, *__xr);"},
{"lineNum":" 1921","line":"            }"},
{"lineNum":" 1922","line":"        }"},
{"lineNum":" 1923","line":"        else"},
{"lineNum":" 1924","line":"        {"},
{"lineNum":" 1925","line":"            allocator_type& __a = this->__alloc();"},
{"lineNum":" 1926","line":"            __split_buffer<value_type, allocator_type&> __v(__recommend(size() + __n), __p - this->__begin_, __a);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1927","line":"            __v.__construct_at_end(__n, __x);"},
{"lineNum":" 1928","line":"            __p = __swap_out_circular_buffer(__v, __p);"},
{"lineNum":" 1929","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1930","line":"    }"},
{"lineNum":" 1931","line":"    return __make_iter(__p);"},
{"lineNum":" 1932","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1933","line":""},
{"lineNum":" 1934","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1935","line":"template <class _InputIterator>"},
{"lineNum":" 1936","line":"typename enable_if"},
{"lineNum":" 1937","line":"<"},
{"lineNum":" 1938","line":"     __is_cpp17_input_iterator  <_InputIterator>::value &&"},
{"lineNum":" 1939","line":"    !__is_cpp17_forward_iterator<_InputIterator>::value &&"},
{"lineNum":" 1940","line":"    is_constructible<"},
{"lineNum":" 1941","line":"       _Tp,"},
{"lineNum":" 1942","line":"       typename iterator_traits<_InputIterator>::reference>::value,"},
{"lineNum":" 1943","line":"    typename vector<_Tp, _Allocator>::iterator"},
{"lineNum":" 1944","line":">::type"},
{"lineNum":" 1945","line":"vector<_Tp, _Allocator>::insert(const_iterator __position, _InputIterator __first, _InputIterator __last)"},
{"lineNum":" 1946","line":"{"},
{"lineNum":" 1947","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1948","line":"    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__position) == this,"},
{"lineNum":" 1949","line":"        \"vector::insert(iterator, range) called with an iterator not\""},
{"lineNum":" 1950","line":"        \" referring to this vector\");"},
{"lineNum":" 1951","line":"#endif"},
{"lineNum":" 1952","line":"    difference_type __off = __position - begin();"},
{"lineNum":" 1953","line":"    pointer __p = this->__begin_ + __off;"},
{"lineNum":" 1954","line":"    allocator_type& __a = this->__alloc();"},
{"lineNum":" 1955","line":"    pointer __old_last = this->__end_;"},
{"lineNum":" 1956","line":"    for (; this->__end_ != this->__end_cap() && __first != __last; ++__first)"},
{"lineNum":" 1957","line":"    {"},
{"lineNum":" 1958","line":"        __construct_one_at_end(*__first);"},
{"lineNum":" 1959","line":"    }"},
{"lineNum":" 1960","line":"    __split_buffer<value_type, allocator_type&> __v(__a);"},
{"lineNum":" 1961","line":"    if (__first != __last)"},
{"lineNum":" 1962","line":"    {"},
{"lineNum":" 1963","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1964","line":"        try"},
{"lineNum":" 1965","line":"        {"},
{"lineNum":" 1966","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1967","line":"            __v.__construct_at_end(__first, __last);"},
{"lineNum":" 1968","line":"            difference_type __old_size = __old_last - this->__begin_;"},
{"lineNum":" 1969","line":"            difference_type __old_p = __p - this->__begin_;"},
{"lineNum":" 1970","line":"            reserve(__recommend(size() + __v.size()));"},
{"lineNum":" 1971","line":"            __p = this->__begin_ + __old_p;"},
{"lineNum":" 1972","line":"            __old_last = this->__begin_ + __old_size;"},
{"lineNum":" 1973","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1974","line":"        }"},
{"lineNum":" 1975","line":"        catch (...)"},
{"lineNum":" 1976","line":"        {"},
{"lineNum":" 1977","line":"            erase(__make_iter(__old_last), end());"},
{"lineNum":" 1978","line":"            throw;"},
{"lineNum":" 1979","line":"        }"},
{"lineNum":" 1980","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1981","line":"    }"},
{"lineNum":" 1982","line":"    __p = _VSTD::rotate(__p, __old_last, this->__end_);"},
{"lineNum":" 1983","line":"    insert(__make_iter(__p), _VSTD::make_move_iterator(__v.begin()),"},
{"lineNum":" 1984","line":"                             _VSTD::make_move_iterator(__v.end()));"},
{"lineNum":" 1985","line":"    return begin() + __off;"},
{"lineNum":" 1986","line":"}"},
{"lineNum":" 1987","line":""},
{"lineNum":" 1988","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1989","line":"template <class _ForwardIterator>"},
{"lineNum":" 1990","line":"typename enable_if"},
{"lineNum":" 1991","line":"<"},
{"lineNum":" 1992","line":"    __is_cpp17_forward_iterator<_ForwardIterator>::value &&"},
{"lineNum":" 1993","line":"    is_constructible<"},
{"lineNum":" 1994","line":"       _Tp,"},
{"lineNum":" 1995","line":"       typename iterator_traits<_ForwardIterator>::reference>::value,"},
{"lineNum":" 1996","line":"    typename vector<_Tp, _Allocator>::iterator"},
{"lineNum":" 1997","line":">::type"},
{"lineNum":" 1998","line":"vector<_Tp, _Allocator>::insert(const_iterator __position, _ForwardIterator __first, _ForwardIterator __last)"},
{"lineNum":" 1999","line":"{","class":"linePartCov","hits":"1","order":"568","possible_hits":"5",},
{"lineNum":" 2000","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2001","line":"    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__position) == this,"},
{"lineNum":" 2002","line":"        \"vector::insert(iterator, range) called with an iterator not\""},
{"lineNum":" 2003","line":"        \" referring to this vector\");"},
{"lineNum":" 2004","line":"#endif"},
{"lineNum":" 2005","line":"    pointer __p = this->__begin_ + (__position - begin());","class":"lineCov","hits":"1","order":"569","possible_hits":"1",},
{"lineNum":" 2006","line":"    difference_type __n = _VSTD::distance(__first, __last);"},
{"lineNum":" 2007","line":"    if (__n > 0)","class":"linePartCov","hits":"1","order":"571","possible_hits":"5",},
{"lineNum":" 2008","line":"    {"},
{"lineNum":" 2009","line":"        if (__n <= this->__end_cap() - this->__end_)","class":"linePartCov","hits":"1","order":"572","possible_hits":"5",},
{"lineNum":" 2010","line":"        {"},
{"lineNum":" 2011","line":"            size_type __old_n = __n;"},
{"lineNum":" 2012","line":"            pointer __old_last = this->__end_;"},
{"lineNum":" 2013","line":"            _ForwardIterator __m = __last;"},
{"lineNum":" 2014","line":"            difference_type __dx = this->__end_ - __p;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 2015","line":"            if (__n > __dx)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 2016","line":"            {"},
{"lineNum":" 2017","line":"                __m = __first;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2018","line":"                difference_type __diff = this->__end_ - __p;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2019","line":"                _VSTD::advance(__m, __diff);"},
{"lineNum":" 2020","line":"                __construct_at_end(__m, __last, __n - __diff);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2021","line":"                __n = __dx;"},
{"lineNum":" 2022","line":"            }"},
{"lineNum":" 2023","line":"            if (__n > 0)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 2024","line":"            {"},
{"lineNum":" 2025","line":"                __move_range(__p, __old_last, __p + __old_n);","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 2026","line":"                _VSTD::copy(__first, __m, __p);"},
{"lineNum":" 2027","line":"            }"},
{"lineNum":" 2028","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2029","line":"        else"},
{"lineNum":" 2030","line":"        {"},
{"lineNum":" 2031","line":"            allocator_type& __a = this->__alloc();"},
{"lineNum":" 2032","line":"            __split_buffer<value_type, allocator_type&> __v(__recommend(size() + __n), __p - this->__begin_, __a);","class":"linePartCov","hits":"1","order":"573","possible_hits":"5",},
{"lineNum":" 2033","line":"            __v.__construct_at_end(__first, __last);","class":"lineCov","hits":"1","order":"574","possible_hits":"1",},
{"lineNum":" 2034","line":"            __p = __swap_out_circular_buffer(__v, __p);","class":"lineCov","hits":"1","order":"581","possible_hits":"1",},
{"lineNum":" 2035","line":"        }","class":"linePartCov","hits":"1","order":"589","possible_hits":"2",},
{"lineNum":" 2036","line":"    }"},
{"lineNum":" 2037","line":"    return __make_iter(__p);"},
{"lineNum":" 2038","line":"}","class":"linePartCov","hits":"1","order":"590","possible_hits":"7",},
{"lineNum":" 2039","line":""},
{"lineNum":" 2040","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2041","line":"void"},
{"lineNum":" 2042","line":"vector<_Tp, _Allocator>::resize(size_type __sz)"},
{"lineNum":" 2043","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2044","line":"    size_type __cs = size();"},
{"lineNum":" 2045","line":"    if (__cs < __sz)","class":"lineNoCov","hits":"0","possible_hits":"30",},
{"lineNum":" 2046","line":"        this->__append(__sz - __cs);","class":"lineNoCov","hits":"0","possible_hits":"29",},
{"lineNum":" 2047","line":"    else if (__cs > __sz)","class":"lineNoCov","hits":"0","possible_hits":"27",},
{"lineNum":" 2048","line":"        this->__destruct_at_end(this->__begin_ + __sz);","class":"lineNoCov","hits":"0","possible_hits":"25",},
{"lineNum":" 2049","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2050","line":""},
{"lineNum":" 2051","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2052","line":"void"},
{"lineNum":" 2053","line":"vector<_Tp, _Allocator>::resize(size_type __sz, const_reference __x)"},
{"lineNum":" 2054","line":"{"},
{"lineNum":" 2055","line":"    size_type __cs = size();"},
{"lineNum":" 2056","line":"    if (__cs < __sz)","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":" 2057","line":"        this->__append(__sz - __cs, __x);","class":"lineNoCov","hits":"0","possible_hits":"17",},
{"lineNum":" 2058","line":"    else if (__cs > __sz)","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":" 2059","line":"        this->__destruct_at_end(this->__begin_ + __sz);","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":" 2060","line":"}"},
{"lineNum":" 2061","line":""},
{"lineNum":" 2062","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2063","line":"void"},
{"lineNum":" 2064","line":"vector<_Tp, _Allocator>::swap(vector& __x)"},
{"lineNum":" 2065","line":"#if _LIBCPP_STD_VER >= 14"},
{"lineNum":" 2066","line":"    _NOEXCEPT"},
{"lineNum":" 2067","line":"#else"},
{"lineNum":" 2068","line":"    _NOEXCEPT_(!__alloc_traits::propagate_on_container_swap::value ||"},
{"lineNum":" 2069","line":"                __is_nothrow_swappable<allocator_type>::value)"},
{"lineNum":" 2070","line":"#endif"},
{"lineNum":" 2071","line":"{"},
{"lineNum":" 2072","line":"    _LIBCPP_ASSERT(__alloc_traits::propagate_on_container_swap::value ||"},
{"lineNum":" 2073","line":"                   this->__alloc() == __x.__alloc(),"},
{"lineNum":" 2074","line":"                   \"vector::swap: Either propagate_on_container_swap must be true\""},
{"lineNum":" 2075","line":"                   \" or the allocators must compare equal\");"},
{"lineNum":" 2076","line":"    _VSTD::swap(this->__begin_, __x.__begin_);"},
{"lineNum":" 2077","line":"    _VSTD::swap(this->__end_, __x.__end_);"},
{"lineNum":" 2078","line":"    _VSTD::swap(this->__end_cap(), __x.__end_cap());"},
{"lineNum":" 2079","line":"    _VSTD::__swap_allocator(this->__alloc(), __x.__alloc(),"},
{"lineNum":" 2080","line":"        integral_constant<bool,__alloc_traits::propagate_on_container_swap::value>());"},
{"lineNum":" 2081","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2082","line":"    __get_db()->swap(this, &__x);"},
{"lineNum":" 2083","line":"#endif"},
{"lineNum":" 2084","line":"}"},
{"lineNum":" 2085","line":""},
{"lineNum":" 2086","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2087","line":"bool"},
{"lineNum":" 2088","line":"vector<_Tp, _Allocator>::__invariants() const"},
{"lineNum":" 2089","line":"{"},
{"lineNum":" 2090","line":"    if (this->__begin_ == nullptr)"},
{"lineNum":" 2091","line":"    {"},
{"lineNum":" 2092","line":"        if (this->__end_ != nullptr || this->__end_cap() != nullptr)"},
{"lineNum":" 2093","line":"            return false;"},
{"lineNum":" 2094","line":"    }"},
{"lineNum":" 2095","line":"    else"},
{"lineNum":" 2096","line":"    {"},
{"lineNum":" 2097","line":"        if (this->__begin_ > this->__end_)"},
{"lineNum":" 2098","line":"            return false;"},
{"lineNum":" 2099","line":"        if (this->__begin_ == this->__end_cap())"},
{"lineNum":" 2100","line":"            return false;"},
{"lineNum":" 2101","line":"        if (this->__end_ > this->__end_cap())"},
{"lineNum":" 2102","line":"            return false;"},
{"lineNum":" 2103","line":"    }"},
{"lineNum":" 2104","line":"    return true;"},
{"lineNum":" 2105","line":"}"},
{"lineNum":" 2106","line":""},
{"lineNum":" 2107","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2108","line":""},
{"lineNum":" 2109","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2110","line":"bool"},
{"lineNum":" 2111","line":"vector<_Tp, _Allocator>::__dereferenceable(const const_iterator* __i) const"},
{"lineNum":" 2112","line":"{"},
{"lineNum":" 2113","line":"    return this->__begin_ <= __i->base() && __i->base() < this->__end_;"},
{"lineNum":" 2114","line":"}"},
{"lineNum":" 2115","line":""},
{"lineNum":" 2116","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2117","line":"bool"},
{"lineNum":" 2118","line":"vector<_Tp, _Allocator>::__decrementable(const const_iterator* __i) const"},
{"lineNum":" 2119","line":"{"},
{"lineNum":" 2120","line":"    return this->__begin_ < __i->base() && __i->base() <= this->__end_;"},
{"lineNum":" 2121","line":"}"},
{"lineNum":" 2122","line":""},
{"lineNum":" 2123","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2124","line":"bool"},
{"lineNum":" 2125","line":"vector<_Tp, _Allocator>::__addable(const const_iterator* __i, ptrdiff_t __n) const"},
{"lineNum":" 2126","line":"{"},
{"lineNum":" 2127","line":"    const_pointer __p = __i->base() + __n;"},
{"lineNum":" 2128","line":"    return this->__begin_ <= __p && __p <= this->__end_;"},
{"lineNum":" 2129","line":"}"},
{"lineNum":" 2130","line":""},
{"lineNum":" 2131","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2132","line":"bool"},
{"lineNum":" 2133","line":"vector<_Tp, _Allocator>::__subscriptable(const const_iterator* __i, ptrdiff_t __n) const"},
{"lineNum":" 2134","line":"{"},
{"lineNum":" 2135","line":"    const_pointer __p = __i->base() + __n;"},
{"lineNum":" 2136","line":"    return this->__begin_ <= __p && __p < this->__end_;"},
{"lineNum":" 2137","line":"}"},
{"lineNum":" 2138","line":""},
{"lineNum":" 2139","line":"#endif // _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2140","line":""},
{"lineNum":" 2141","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2142","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2143","line":"void"},
{"lineNum":" 2144","line":"vector<_Tp, _Allocator>::__invalidate_all_iterators()"},
{"lineNum":" 2145","line":"{"},
{"lineNum":" 2146","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2147","line":"    __get_db()->__invalidate_all(this);"},
{"lineNum":" 2148","line":"#endif"},
{"lineNum":" 2149","line":"}"},
{"lineNum":" 2150","line":""},
{"lineNum":" 2151","line":""},
{"lineNum":" 2152","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2153","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2154","line":"void"},
{"lineNum":" 2155","line":"vector<_Tp, _Allocator>::__invalidate_iterators_past(pointer __new_last) {"},
{"lineNum":" 2156","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2157","line":"  __c_node* __c = __get_db()->__find_c_and_lock(this);"},
{"lineNum":" 2158","line":"  for (__i_node** __p = __c->end_; __p != __c->beg_; ) {"},
{"lineNum":" 2159","line":"    --__p;"},
{"lineNum":" 2160","line":"    const_iterator* __i = static_cast<const_iterator*>((*__p)->__i_);"},
{"lineNum":" 2161","line":"    if (__i->base() > __new_last) {"},
{"lineNum":" 2162","line":"      (*__p)->__c_ = nullptr;"},
{"lineNum":" 2163","line":"      if (--__c->end_ != __p)"},
{"lineNum":" 2164","line":"        _VSTD::memmove(__p, __p+1, (__c->end_ - __p)*sizeof(__i_node*));"},
{"lineNum":" 2165","line":"    }"},
{"lineNum":" 2166","line":"  }"},
{"lineNum":" 2167","line":"  __get_db()->unlock();"},
{"lineNum":" 2168","line":"#else"},
{"lineNum":" 2169","line":"  ((void)__new_last);"},
{"lineNum":" 2170","line":"#endif"},
{"lineNum":" 2171","line":"}"},
{"lineNum":" 2172","line":""},
{"lineNum":" 2173","line":"// vector<bool>"},
{"lineNum":" 2174","line":""},
{"lineNum":" 2175","line":"template <class _Allocator> class vector<bool, _Allocator>;"},
{"lineNum":" 2176","line":""},
{"lineNum":" 2177","line":"template <class _Allocator> struct hash<vector<bool, _Allocator> >;"},
{"lineNum":" 2178","line":""},
{"lineNum":" 2179","line":"template <class _Allocator>"},
{"lineNum":" 2180","line":"struct __has_storage_type<vector<bool, _Allocator> >"},
{"lineNum":" 2181","line":"{"},
{"lineNum":" 2182","line":"    static const bool value = true;"},
{"lineNum":" 2183","line":"};"},
{"lineNum":" 2184","line":""},
{"lineNum":" 2185","line":"template <class _Allocator>"},
{"lineNum":" 2186","line":"class _LIBCPP_TEMPLATE_VIS vector<bool, _Allocator>"},
{"lineNum":" 2187","line":"    : private __vector_base_common<true>"},
{"lineNum":" 2188","line":"{"},
{"lineNum":" 2189","line":"public:"},
{"lineNum":" 2190","line":"    typedef vector                                   __self;"},
{"lineNum":" 2191","line":"    typedef bool                                     value_type;"},
{"lineNum":" 2192","line":"    typedef _Allocator                               allocator_type;"},
{"lineNum":" 2193","line":"    typedef allocator_traits<allocator_type>         __alloc_traits;"},
{"lineNum":" 2194","line":"    typedef typename __alloc_traits::size_type       size_type;"},
{"lineNum":" 2195","line":"    typedef typename __alloc_traits::difference_type difference_type;"},
{"lineNum":" 2196","line":"    typedef size_type __storage_type;"},
{"lineNum":" 2197","line":"    typedef __bit_iterator<vector, false>            pointer;"},
{"lineNum":" 2198","line":"    typedef __bit_iterator<vector, true>             const_pointer;"},
{"lineNum":" 2199","line":"    typedef pointer                                  iterator;"},
{"lineNum":" 2200","line":"    typedef const_pointer                            const_iterator;"},
{"lineNum":" 2201","line":"    typedef _VSTD::reverse_iterator<iterator>         reverse_iterator;"},
{"lineNum":" 2202","line":"    typedef _VSTD::reverse_iterator<const_iterator>   const_reverse_iterator;"},
{"lineNum":" 2203","line":""},
{"lineNum":" 2204","line":"private:"},
{"lineNum":" 2205","line":"    typedef typename __rebind_alloc_helper<__alloc_traits, __storage_type>::type __storage_allocator;"},
{"lineNum":" 2206","line":"    typedef allocator_traits<__storage_allocator>    __storage_traits;"},
{"lineNum":" 2207","line":"    typedef typename __storage_traits::pointer       __storage_pointer;"},
{"lineNum":" 2208","line":"    typedef typename __storage_traits::const_pointer __const_storage_pointer;"},
{"lineNum":" 2209","line":""},
{"lineNum":" 2210","line":"    __storage_pointer                                      __begin_;"},
{"lineNum":" 2211","line":"    size_type                                              __size_;"},
{"lineNum":" 2212","line":"    __compressed_pair<size_type, __storage_allocator> __cap_alloc_;"},
{"lineNum":" 2213","line":"public:"},
{"lineNum":" 2214","line":"    typedef __bit_reference<vector>                  reference;"},
{"lineNum":" 2215","line":"    typedef __bit_const_reference<vector>            const_reference;"},
{"lineNum":" 2216","line":"private:"},
{"lineNum":" 2217","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2218","line":"    size_type& __cap() _NOEXCEPT"},
{"lineNum":" 2219","line":"        {return __cap_alloc_.first();}"},
{"lineNum":" 2220","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2221","line":"    const size_type& __cap() const _NOEXCEPT"},
{"lineNum":" 2222","line":"        {return __cap_alloc_.first();}"},
{"lineNum":" 2223","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2224","line":"    __storage_allocator& __alloc() _NOEXCEPT"},
{"lineNum":" 2225","line":"        {return __cap_alloc_.second();}"},
{"lineNum":" 2226","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2227","line":"    const __storage_allocator& __alloc() const _NOEXCEPT"},
{"lineNum":" 2228","line":"        {return __cap_alloc_.second();}"},
{"lineNum":" 2229","line":""},
{"lineNum":" 2230","line":"    static const unsigned __bits_per_word = static_cast<unsigned>(sizeof(__storage_type) * CHAR_BIT);"},
{"lineNum":" 2231","line":""},
{"lineNum":" 2232","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2233","line":"    static size_type __internal_cap_to_external(size_type __n) _NOEXCEPT"},
{"lineNum":" 2234","line":"        {return __n * __bits_per_word;}","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 2235","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2236","line":"    static size_type __external_cap_to_internal(size_type __n) _NOEXCEPT"},
{"lineNum":" 2237","line":"        {return (__n - 1) / __bits_per_word + 1;}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2238","line":""},
{"lineNum":" 2239","line":"public:"},
{"lineNum":" 2240","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2241","line":"    vector() _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value);"},
{"lineNum":" 2242","line":""},
{"lineNum":" 2243","line":"    _LIBCPP_INLINE_VISIBILITY explicit vector(const allocator_type& __a)"},
{"lineNum":" 2244","line":"#if _LIBCPP_STD_VER <= 14"},
{"lineNum":" 2245","line":"        _NOEXCEPT_(is_nothrow_copy_constructible<allocator_type>::value);"},
{"lineNum":" 2246","line":"#else"},
{"lineNum":" 2247","line":"        _NOEXCEPT;"},
{"lineNum":" 2248","line":"#endif"},
{"lineNum":" 2249","line":"    ~vector();"},
{"lineNum":" 2250","line":"    explicit vector(size_type __n);"},
{"lineNum":" 2251","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 2252","line":"    explicit vector(size_type __n, const allocator_type& __a);"},
{"lineNum":" 2253","line":"#endif"},
{"lineNum":" 2254","line":"    vector(size_type __n, const value_type& __v);"},
{"lineNum":" 2255","line":"    vector(size_type __n, const value_type& __v, const allocator_type& __a);"},
{"lineNum":" 2256","line":"    template <class _InputIterator>"},
{"lineNum":" 2257","line":"        vector(_InputIterator __first, _InputIterator __last,"},
{"lineNum":" 2258","line":"               typename enable_if<__is_cpp17_input_iterator  <_InputIterator>::value &&"},
{"lineNum":" 2259","line":"                                 !__is_cpp17_forward_iterator<_InputIterator>::value>::type* = 0);"},
{"lineNum":" 2260","line":"    template <class _InputIterator>"},
{"lineNum":" 2261","line":"        vector(_InputIterator __first, _InputIterator __last, const allocator_type& __a,"},
{"lineNum":" 2262","line":"               typename enable_if<__is_cpp17_input_iterator  <_InputIterator>::value &&"},
{"lineNum":" 2263","line":"                                 !__is_cpp17_forward_iterator<_InputIterator>::value>::type* = 0);"},
{"lineNum":" 2264","line":"    template <class _ForwardIterator>"},
{"lineNum":" 2265","line":"        vector(_ForwardIterator __first, _ForwardIterator __last,"},
{"lineNum":" 2266","line":"               typename enable_if<__is_cpp17_forward_iterator<_ForwardIterator>::value>::type* = 0);"},
{"lineNum":" 2267","line":"    template <class _ForwardIterator>"},
{"lineNum":" 2268","line":"        vector(_ForwardIterator __first, _ForwardIterator __last, const allocator_type& __a,"},
{"lineNum":" 2269","line":"               typename enable_if<__is_cpp17_forward_iterator<_ForwardIterator>::value>::type* = 0);"},
{"lineNum":" 2270","line":""},
{"lineNum":" 2271","line":"    vector(const vector& __v);"},
{"lineNum":" 2272","line":"    vector(const vector& __v, const allocator_type& __a);"},
{"lineNum":" 2273","line":"    vector& operator=(const vector& __v);"},
{"lineNum":" 2274","line":""},
{"lineNum":" 2275","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 2276","line":"    vector(initializer_list<value_type> __il);"},
{"lineNum":" 2277","line":"    vector(initializer_list<value_type> __il, const allocator_type& __a);"},
{"lineNum":" 2278","line":""},
{"lineNum":" 2279","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2280","line":"    vector(vector&& __v)"},
{"lineNum":" 2281","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 2282","line":"        _NOEXCEPT;"},
{"lineNum":" 2283","line":"#else"},
{"lineNum":" 2284","line":"        _NOEXCEPT_(is_nothrow_move_constructible<allocator_type>::value);"},
{"lineNum":" 2285","line":"#endif"},
{"lineNum":" 2286","line":"    vector(vector&& __v, const __identity_t<allocator_type>& __a);"},
{"lineNum":" 2287","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2288","line":"    vector& operator=(vector&& __v)"},
{"lineNum":" 2289","line":"        _NOEXCEPT_((__noexcept_move_assign_container<_Allocator, __alloc_traits>::value));"},
{"lineNum":" 2290","line":""},
{"lineNum":" 2291","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2292","line":"    vector& operator=(initializer_list<value_type> __il)"},
{"lineNum":" 2293","line":"        {assign(__il.begin(), __il.end()); return *this;}"},
{"lineNum":" 2294","line":""},
{"lineNum":" 2295","line":"#endif // !_LIBCPP_CXX03_LANG"},
{"lineNum":" 2296","line":""},
{"lineNum":" 2297","line":"    template <class _InputIterator>"},
{"lineNum":" 2298","line":"        typename enable_if"},
{"lineNum":" 2299","line":"        <"},
{"lineNum":" 2300","line":"            __is_cpp17_input_iterator<_InputIterator>::value &&"},
{"lineNum":" 2301","line":"           !__is_cpp17_forward_iterator<_InputIterator>::value,"},
{"lineNum":" 2302","line":"           void"},
{"lineNum":" 2303","line":"        >::type"},
{"lineNum":" 2304","line":"        assign(_InputIterator __first, _InputIterator __last);"},
{"lineNum":" 2305","line":"    template <class _ForwardIterator>"},
{"lineNum":" 2306","line":"        typename enable_if"},
{"lineNum":" 2307","line":"        <"},
{"lineNum":" 2308","line":"            __is_cpp17_forward_iterator<_ForwardIterator>::value,"},
{"lineNum":" 2309","line":"           void"},
{"lineNum":" 2310","line":"        >::type"},
{"lineNum":" 2311","line":"        assign(_ForwardIterator __first, _ForwardIterator __last);"},
{"lineNum":" 2312","line":""},
{"lineNum":" 2313","line":"    void assign(size_type __n, const value_type& __x);"},
{"lineNum":" 2314","line":""},
{"lineNum":" 2315","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 2316","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2317","line":"    void assign(initializer_list<value_type> __il)"},
{"lineNum":" 2318","line":"        {assign(__il.begin(), __il.end());}"},
{"lineNum":" 2319","line":"#endif"},
{"lineNum":" 2320","line":""},
{"lineNum":" 2321","line":"    _LIBCPP_INLINE_VISIBILITY allocator_type get_allocator() const _NOEXCEPT"},
{"lineNum":" 2322","line":"        {return allocator_type(this->__alloc());}"},
{"lineNum":" 2323","line":""},
{"lineNum":" 2324","line":"    size_type max_size() const _NOEXCEPT;"},
{"lineNum":" 2325","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2326","line":"    size_type capacity() const _NOEXCEPT"},
{"lineNum":" 2327","line":"        {return __internal_cap_to_external(__cap());}","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 2328","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2329","line":"    size_type size() const _NOEXCEPT"},
{"lineNum":" 2330","line":"        {return __size_;}"},
{"lineNum":" 2331","line":"    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2332","line":"    bool empty() const _NOEXCEPT"},
{"lineNum":" 2333","line":"        {return __size_ == 0;}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2334","line":"    void reserve(size_type __n);"},
{"lineNum":" 2335","line":"    void shrink_to_fit() _NOEXCEPT;"},
{"lineNum":" 2336","line":""},
{"lineNum":" 2337","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2338","line":"    iterator begin() _NOEXCEPT"},
{"lineNum":" 2339","line":"        {return __make_iter(0);}"},
{"lineNum":" 2340","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2341","line":"    const_iterator begin() const _NOEXCEPT"},
{"lineNum":" 2342","line":"        {return __make_iter(0);}"},
{"lineNum":" 2343","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2344","line":"    iterator end() _NOEXCEPT"},
{"lineNum":" 2345","line":"        {return __make_iter(__size_);}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2346","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2347","line":"    const_iterator end()   const _NOEXCEPT"},
{"lineNum":" 2348","line":"        {return __make_iter(__size_);}"},
{"lineNum":" 2349","line":""},
{"lineNum":" 2350","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2351","line":"    reverse_iterator rbegin() _NOEXCEPT"},
{"lineNum":" 2352","line":"        {return       reverse_iterator(end());}"},
{"lineNum":" 2353","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2354","line":"    const_reverse_iterator rbegin() const _NOEXCEPT"},
{"lineNum":" 2355","line":"        {return const_reverse_iterator(end());}"},
{"lineNum":" 2356","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2357","line":"    reverse_iterator rend() _NOEXCEPT"},
{"lineNum":" 2358","line":"        {return       reverse_iterator(begin());}"},
{"lineNum":" 2359","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2360","line":"    const_reverse_iterator rend()   const _NOEXCEPT"},
{"lineNum":" 2361","line":"        {return const_reverse_iterator(begin());}"},
{"lineNum":" 2362","line":""},
{"lineNum":" 2363","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2364","line":"    const_iterator         cbegin()  const _NOEXCEPT"},
{"lineNum":" 2365","line":"        {return __make_iter(0);}"},
{"lineNum":" 2366","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2367","line":"    const_iterator         cend()    const _NOEXCEPT"},
{"lineNum":" 2368","line":"        {return __make_iter(__size_);}"},
{"lineNum":" 2369","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2370","line":"    const_reverse_iterator crbegin() const _NOEXCEPT"},
{"lineNum":" 2371","line":"        {return rbegin();}"},
{"lineNum":" 2372","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2373","line":"    const_reverse_iterator crend()   const _NOEXCEPT"},
{"lineNum":" 2374","line":"        {return rend();}"},
{"lineNum":" 2375","line":""},
{"lineNum":" 2376","line":"    _LIBCPP_INLINE_VISIBILITY reference       operator[](size_type __n)       {return __make_ref(__n);}"},
{"lineNum":" 2377","line":"    _LIBCPP_INLINE_VISIBILITY const_reference operator[](size_type __n) const {return __make_ref(__n);}"},
{"lineNum":" 2378","line":"    reference       at(size_type __n);"},
{"lineNum":" 2379","line":"    const_reference at(size_type __n) const;"},
{"lineNum":" 2380","line":""},
{"lineNum":" 2381","line":"    _LIBCPP_INLINE_VISIBILITY reference       front()       {return __make_ref(0);}"},
{"lineNum":" 2382","line":"    _LIBCPP_INLINE_VISIBILITY const_reference front() const {return __make_ref(0);}"},
{"lineNum":" 2383","line":"    _LIBCPP_INLINE_VISIBILITY reference       back()        {return __make_ref(__size_ - 1);}","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":" 2384","line":"    _LIBCPP_INLINE_VISIBILITY const_reference back()  const {return __make_ref(__size_ - 1);}"},
{"lineNum":" 2385","line":""},
{"lineNum":" 2386","line":"    void push_back(const value_type& __x);"},
{"lineNum":" 2387","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 2388","line":"    template <class... _Args>"},
{"lineNum":" 2389","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 2390","line":"    _LIBCPP_INLINE_VISIBILITY reference emplace_back(_Args&&... __args)"},
{"lineNum":" 2391","line":"#else"},
{"lineNum":" 2392","line":"    _LIBCPP_INLINE_VISIBILITY void      emplace_back(_Args&&... __args)"},
{"lineNum":" 2393","line":"#endif"},
{"lineNum":" 2394","line":"    {"},
{"lineNum":" 2395","line":"        push_back ( value_type ( _VSTD::forward<_Args>(__args)... ));"},
{"lineNum":" 2396","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 2397","line":"        return this->back();"},
{"lineNum":" 2398","line":"#endif"},
{"lineNum":" 2399","line":"    }"},
{"lineNum":" 2400","line":"#endif"},
{"lineNum":" 2401","line":""},
{"lineNum":" 2402","line":"    _LIBCPP_INLINE_VISIBILITY void pop_back() {--__size_;}","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 2403","line":""},
{"lineNum":" 2404","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 2405","line":"    template <class... _Args>"},
{"lineNum":" 2406","line":"   _LIBCPP_INLINE_VISIBILITY iterator emplace(const_iterator position, _Args&&... __args)"},
{"lineNum":" 2407","line":"        { return insert ( position, value_type ( _VSTD::forward<_Args>(__args)... )); }"},
{"lineNum":" 2408","line":"#endif"},
{"lineNum":" 2409","line":""},
{"lineNum":" 2410","line":"    iterator insert(const_iterator __position, const value_type& __x);"},
{"lineNum":" 2411","line":"    iterator insert(const_iterator __position, size_type __n, const value_type& __x);"},
{"lineNum":" 2412","line":"    iterator insert(const_iterator __position, size_type __n, const_reference __x);"},
{"lineNum":" 2413","line":"    template <class _InputIterator>"},
{"lineNum":" 2414","line":"        typename enable_if"},
{"lineNum":" 2415","line":"        <"},
{"lineNum":" 2416","line":"             __is_cpp17_input_iterator  <_InputIterator>::value &&"},
{"lineNum":" 2417","line":"            !__is_cpp17_forward_iterator<_InputIterator>::value,"},
{"lineNum":" 2418","line":"            iterator"},
{"lineNum":" 2419","line":"        >::type"},
{"lineNum":" 2420","line":"        insert(const_iterator __position, _InputIterator __first, _InputIterator __last);"},
{"lineNum":" 2421","line":"    template <class _ForwardIterator>"},
{"lineNum":" 2422","line":"        typename enable_if"},
{"lineNum":" 2423","line":"        <"},
{"lineNum":" 2424","line":"            __is_cpp17_forward_iterator<_ForwardIterator>::value,"},
{"lineNum":" 2425","line":"            iterator"},
{"lineNum":" 2426","line":"        >::type"},
{"lineNum":" 2427","line":"        insert(const_iterator __position, _ForwardIterator __first, _ForwardIterator __last);"},
{"lineNum":" 2428","line":""},
{"lineNum":" 2429","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 2430","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2431","line":"    iterator insert(const_iterator __position, initializer_list<value_type> __il)"},
{"lineNum":" 2432","line":"        {return insert(__position, __il.begin(), __il.end());}"},
{"lineNum":" 2433","line":"#endif"},
{"lineNum":" 2434","line":""},
{"lineNum":" 2435","line":"    _LIBCPP_INLINE_VISIBILITY iterator erase(const_iterator __position);"},
{"lineNum":" 2436","line":"    iterator erase(const_iterator __first, const_iterator __last);"},
{"lineNum":" 2437","line":""},
{"lineNum":" 2438","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2439","line":"    void clear() _NOEXCEPT {__size_ = 0;}"},
{"lineNum":" 2440","line":""},
{"lineNum":" 2441","line":"    void swap(vector&)"},
{"lineNum":" 2442","line":"#if _LIBCPP_STD_VER >= 14"},
{"lineNum":" 2443","line":"        _NOEXCEPT;"},
{"lineNum":" 2444","line":"#else"},
{"lineNum":" 2445","line":"        _NOEXCEPT_(!__alloc_traits::propagate_on_container_swap::value ||"},
{"lineNum":" 2446","line":"                    __is_nothrow_swappable<allocator_type>::value);"},
{"lineNum":" 2447","line":"#endif"},
{"lineNum":" 2448","line":"    static void swap(reference __x, reference __y) _NOEXCEPT { _VSTD::swap(__x, __y); }"},
{"lineNum":" 2449","line":""},
{"lineNum":" 2450","line":"    void resize(size_type __sz, value_type __x = false);"},
{"lineNum":" 2451","line":"    void flip() _NOEXCEPT;"},
{"lineNum":" 2452","line":""},
{"lineNum":" 2453","line":"    bool __invariants() const;"},
{"lineNum":" 2454","line":""},
{"lineNum":" 2455","line":"private:"},
{"lineNum":" 2456","line":"    _LIBCPP_INLINE_VISIBILITY void __invalidate_all_iterators();"},
{"lineNum":" 2457","line":"    void __vallocate(size_type __n);"},
{"lineNum":" 2458","line":"    void __vdeallocate() _NOEXCEPT;"},
{"lineNum":" 2459","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2460","line":"    static size_type __align_it(size_type __new_size) _NOEXCEPT"},
{"lineNum":" 2461","line":"        {return __new_size + (__bits_per_word-1) & ~((size_type)__bits_per_word-1);}","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 2462","line":"    _LIBCPP_INLINE_VISIBILITY  size_type __recommend(size_type __new_size) const;"},
{"lineNum":" 2463","line":"    _LIBCPP_INLINE_VISIBILITY void __construct_at_end(size_type __n, bool __x);"},
{"lineNum":" 2464","line":"    template <class _ForwardIterator>"},
{"lineNum":" 2465","line":"        typename enable_if"},
{"lineNum":" 2466","line":"        <"},
{"lineNum":" 2467","line":"            __is_cpp17_forward_iterator<_ForwardIterator>::value,"},
{"lineNum":" 2468","line":"            void"},
{"lineNum":" 2469","line":"        >::type"},
{"lineNum":" 2470","line":"        __construct_at_end(_ForwardIterator __first, _ForwardIterator __last);"},
{"lineNum":" 2471","line":"    void __append(size_type __n, const_reference __x);"},
{"lineNum":" 2472","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2473","line":"    reference __make_ref(size_type __pos) _NOEXCEPT"},
{"lineNum":" 2474","line":"        {return reference(__begin_ + __pos / __bits_per_word, __storage_type(1) << __pos % __bits_per_word);}","class":"lineNoCov","hits":"0","possible_hits":"40",},
{"lineNum":" 2475","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2476","line":"    const_reference __make_ref(size_type __pos) const _NOEXCEPT"},
{"lineNum":" 2477","line":"        {return const_reference(__begin_ + __pos / __bits_per_word, __storage_type(1) << __pos % __bits_per_word);}"},
{"lineNum":" 2478","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2479","line":"    iterator __make_iter(size_type __pos) _NOEXCEPT"},
{"lineNum":" 2480","line":"        {return iterator(__begin_ + __pos / __bits_per_word, static_cast<unsigned>(__pos % __bits_per_word));}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2481","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2482","line":"    const_iterator __make_iter(size_type __pos) const _NOEXCEPT"},
{"lineNum":" 2483","line":"        {return const_iterator(__begin_ + __pos / __bits_per_word, static_cast<unsigned>(__pos % __bits_per_word));}"},
{"lineNum":" 2484","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2485","line":"    iterator __const_iterator_cast(const_iterator __p) _NOEXCEPT"},
{"lineNum":" 2486","line":"        {return begin() + (__p - cbegin());}"},
{"lineNum":" 2487","line":""},
{"lineNum":" 2488","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2489","line":"    void __copy_assign_alloc(const vector& __v)"},
{"lineNum":" 2490","line":"        {__copy_assign_alloc(__v, integral_constant<bool,"},
{"lineNum":" 2491","line":"                      __storage_traits::propagate_on_container_copy_assignment::value>());}"},
{"lineNum":" 2492","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2493","line":"    void __copy_assign_alloc(const vector& __c, true_type)"},
{"lineNum":" 2494","line":"        {"},
{"lineNum":" 2495","line":"            if (__alloc() != __c.__alloc())"},
{"lineNum":" 2496","line":"                __vdeallocate();"},
{"lineNum":" 2497","line":"            __alloc() = __c.__alloc();"},
{"lineNum":" 2498","line":"        }"},
{"lineNum":" 2499","line":""},
{"lineNum":" 2500","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2501","line":"    void __copy_assign_alloc(const vector&, false_type)"},
{"lineNum":" 2502","line":"        {}"},
{"lineNum":" 2503","line":""},
{"lineNum":" 2504","line":"    void __move_assign(vector& __c, false_type);"},
{"lineNum":" 2505","line":"    void __move_assign(vector& __c, true_type)"},
{"lineNum":" 2506","line":"        _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value);"},
{"lineNum":" 2507","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2508","line":"    void __move_assign_alloc(vector& __c)"},
{"lineNum":" 2509","line":"        _NOEXCEPT_("},
{"lineNum":" 2510","line":"            !__storage_traits::propagate_on_container_move_assignment::value ||"},
{"lineNum":" 2511","line":"            is_nothrow_move_assignable<allocator_type>::value)"},
{"lineNum":" 2512","line":"        {__move_assign_alloc(__c, integral_constant<bool,"},
{"lineNum":" 2513","line":"                      __storage_traits::propagate_on_container_move_assignment::value>());}"},
{"lineNum":" 2514","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2515","line":"    void __move_assign_alloc(vector& __c, true_type)"},
{"lineNum":" 2516","line":"        _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value)"},
{"lineNum":" 2517","line":"        {"},
{"lineNum":" 2518","line":"            __alloc() = _VSTD::move(__c.__alloc());"},
{"lineNum":" 2519","line":"        }"},
{"lineNum":" 2520","line":""},
{"lineNum":" 2521","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2522","line":"    void __move_assign_alloc(vector&, false_type)"},
{"lineNum":" 2523","line":"        _NOEXCEPT"},
{"lineNum":" 2524","line":"        {}"},
{"lineNum":" 2525","line":""},
{"lineNum":" 2526","line":"    size_t __hash_code() const _NOEXCEPT;"},
{"lineNum":" 2527","line":""},
{"lineNum":" 2528","line":"    friend class __bit_reference<vector>;"},
{"lineNum":" 2529","line":"    friend class __bit_const_reference<vector>;"},
{"lineNum":" 2530","line":"    friend class __bit_iterator<vector, false>;"},
{"lineNum":" 2531","line":"    friend class __bit_iterator<vector, true>;"},
{"lineNum":" 2532","line":"    friend struct __bit_array<vector>;"},
{"lineNum":" 2533","line":"    friend struct _LIBCPP_TEMPLATE_VIS hash<vector>;"},
{"lineNum":" 2534","line":"};"},
{"lineNum":" 2535","line":""},
{"lineNum":" 2536","line":"template <class _Allocator>"},
{"lineNum":" 2537","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2538","line":"void"},
{"lineNum":" 2539","line":"vector<bool, _Allocator>::__invalidate_all_iterators()"},
{"lineNum":" 2540","line":"{"},
{"lineNum":" 2541","line":"}"},
{"lineNum":" 2542","line":""},
{"lineNum":" 2543","line":"//  Allocate space for __n objects"},
{"lineNum":" 2544","line":"//  throws length_error if __n > max_size()"},
{"lineNum":" 2545","line":"//  throws (probably bad_alloc) if memory run out"},
{"lineNum":" 2546","line":"//  Precondition:  __begin_ == __end_ == __cap() == 0"},
{"lineNum":" 2547","line":"//  Precondition:  __n > 0"},
{"lineNum":" 2548","line":"//  Postcondition:  capacity() == __n"},
{"lineNum":" 2549","line":"//  Postcondition:  size() == 0"},
{"lineNum":" 2550","line":"template <class _Allocator>"},
{"lineNum":" 2551","line":"void"},
{"lineNum":" 2552","line":"vector<bool, _Allocator>::__vallocate(size_type __n)"},
{"lineNum":" 2553","line":"{"},
{"lineNum":" 2554","line":"    if (__n > max_size())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2555","line":"        this->__throw_length_error();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2556","line":"    __n = __external_cap_to_internal(__n);"},
{"lineNum":" 2557","line":"    this->__begin_ = __storage_traits::allocate(this->__alloc(), __n);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2558","line":"    this->__size_ = 0;"},
{"lineNum":" 2559","line":"    this->__cap() = __n;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2560","line":"}"},
{"lineNum":" 2561","line":""},
{"lineNum":" 2562","line":"template <class _Allocator>"},
{"lineNum":" 2563","line":"void"},
{"lineNum":" 2564","line":"vector<bool, _Allocator>::__vdeallocate() _NOEXCEPT"},
{"lineNum":" 2565","line":"{"},
{"lineNum":" 2566","line":"    if (this->__begin_ != nullptr)"},
{"lineNum":" 2567","line":"    {"},
{"lineNum":" 2568","line":"        __storage_traits::deallocate(this->__alloc(), this->__begin_, __cap());"},
{"lineNum":" 2569","line":"        __invalidate_all_iterators();"},
{"lineNum":" 2570","line":"        this->__begin_ = nullptr;"},
{"lineNum":" 2571","line":"        this->__size_ = this->__cap() = 0;"},
{"lineNum":" 2572","line":"    }"},
{"lineNum":" 2573","line":"}"},
{"lineNum":" 2574","line":""},
{"lineNum":" 2575","line":"template <class _Allocator>"},
{"lineNum":" 2576","line":"typename vector<bool, _Allocator>::size_type"},
{"lineNum":" 2577","line":"vector<bool, _Allocator>::max_size() const _NOEXCEPT"},
{"lineNum":" 2578","line":"{"},
{"lineNum":" 2579","line":"    size_type __amax = __storage_traits::max_size(__alloc());"},
{"lineNum":" 2580","line":"    size_type __nmax = numeric_limits<size_type>::max() / 2;  // end() >= begin(), always"},
{"lineNum":" 2581","line":"    if (__nmax / __bits_per_word <= __amax)"},
{"lineNum":" 2582","line":"        return __nmax;"},
{"lineNum":" 2583","line":"    return __internal_cap_to_external(__amax);"},
{"lineNum":" 2584","line":"}"},
{"lineNum":" 2585","line":""},
{"lineNum":" 2586","line":"//  Precondition:  __new_size > capacity()"},
{"lineNum":" 2587","line":"template <class _Allocator>"},
{"lineNum":" 2588","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2589","line":"typename vector<bool, _Allocator>::size_type"},
{"lineNum":" 2590","line":"vector<bool, _Allocator>::__recommend(size_type __new_size) const"},
{"lineNum":" 2591","line":"{"},
{"lineNum":" 2592","line":"    const size_type __ms = max_size();"},
{"lineNum":" 2593","line":"    if (__new_size > __ms)","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 2594","line":"        this->__throw_length_error();","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 2595","line":"    const size_type __cap = capacity();"},
{"lineNum":" 2596","line":"    if (__cap >= __ms / 2)","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 2597","line":"        return __ms;"},
{"lineNum":" 2598","line":"    return _VSTD::max(2 * __cap, __align_it(__new_size));","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":" 2599","line":"}"},
{"lineNum":" 2600","line":""},
{"lineNum":" 2601","line":"//  Default constructs __n objects starting at __end_"},
{"lineNum":" 2602","line":"//  Precondition:  __n > 0"},
{"lineNum":" 2603","line":"//  Precondition:  size() + __n <= capacity()"},
{"lineNum":" 2604","line":"//  Postcondition:  size() == size() + __n"},
{"lineNum":" 2605","line":"template <class _Allocator>"},
{"lineNum":" 2606","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2607","line":"void"},
{"lineNum":" 2608","line":"vector<bool, _Allocator>::__construct_at_end(size_type __n, bool __x)"},
{"lineNum":" 2609","line":"{"},
{"lineNum":" 2610","line":"    size_type __old_size = this->__size_;"},
{"lineNum":" 2611","line":"    this->__size_ += __n;"},
{"lineNum":" 2612","line":"    if (__old_size == 0 || ((__old_size - 1) / __bits_per_word) != ((this->__size_ - 1) / __bits_per_word))"},
{"lineNum":" 2613","line":"    {"},
{"lineNum":" 2614","line":"        if (this->__size_ <= __bits_per_word)"},
{"lineNum":" 2615","line":"            this->__begin_[0] = __storage_type(0);"},
{"lineNum":" 2616","line":"        else"},
{"lineNum":" 2617","line":"            this->__begin_[(this->__size_ - 1) / __bits_per_word] = __storage_type(0);"},
{"lineNum":" 2618","line":"    }"},
{"lineNum":" 2619","line":"    _VSTD::fill_n(__make_iter(__old_size), __n, __x);"},
{"lineNum":" 2620","line":"}"},
{"lineNum":" 2621","line":""},
{"lineNum":" 2622","line":"template <class _Allocator>"},
{"lineNum":" 2623","line":"template <class _ForwardIterator>"},
{"lineNum":" 2624","line":"typename enable_if"},
{"lineNum":" 2625","line":"<"},
{"lineNum":" 2626","line":"    __is_cpp17_forward_iterator<_ForwardIterator>::value,"},
{"lineNum":" 2627","line":"    void"},
{"lineNum":" 2628","line":">::type"},
{"lineNum":" 2629","line":"vector<bool, _Allocator>::__construct_at_end(_ForwardIterator __first, _ForwardIterator __last)"},
{"lineNum":" 2630","line":"{"},
{"lineNum":" 2631","line":"    size_type __old_size = this->__size_;"},
{"lineNum":" 2632","line":"    this->__size_ += _VSTD::distance(__first, __last);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2633","line":"    if (__old_size == 0 || ((__old_size - 1) / __bits_per_word) != ((this->__size_ - 1) / __bits_per_word))"},
{"lineNum":" 2634","line":"    {"},
{"lineNum":" 2635","line":"        if (this->__size_ <= __bits_per_word)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2636","line":"            this->__begin_[0] = __storage_type(0);"},
{"lineNum":" 2637","line":"        else"},
{"lineNum":" 2638","line":"            this->__begin_[(this->__size_ - 1) / __bits_per_word] = __storage_type(0);"},
{"lineNum":" 2639","line":"    }"},
{"lineNum":" 2640","line":"    _VSTD::copy(__first, __last, __make_iter(__old_size));"},
{"lineNum":" 2641","line":"}"},
{"lineNum":" 2642","line":""},
{"lineNum":" 2643","line":"template <class _Allocator>"},
{"lineNum":" 2644","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2645","line":"vector<bool, _Allocator>::vector()"},
{"lineNum":" 2646","line":"    _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value)"},
{"lineNum":" 2647","line":"    : __begin_(nullptr),"},
{"lineNum":" 2648","line":"      __size_(0),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2649","line":"      __cap_alloc_(0, __default_init_tag())"},
{"lineNum":" 2650","line":"{"},
{"lineNum":" 2651","line":"}"},
{"lineNum":" 2652","line":""},
{"lineNum":" 2653","line":"template <class _Allocator>"},
{"lineNum":" 2654","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2655","line":"vector<bool, _Allocator>::vector(const allocator_type& __a)"},
{"lineNum":" 2656","line":"#if _LIBCPP_STD_VER <= 14"},
{"lineNum":" 2657","line":"        _NOEXCEPT_(is_nothrow_copy_constructible<allocator_type>::value)"},
{"lineNum":" 2658","line":"#else"},
{"lineNum":" 2659","line":"        _NOEXCEPT"},
{"lineNum":" 2660","line":"#endif"},
{"lineNum":" 2661","line":"    : __begin_(nullptr),"},
{"lineNum":" 2662","line":"      __size_(0),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2663","line":"      __cap_alloc_(0, static_cast<__storage_allocator>(__a))"},
{"lineNum":" 2664","line":"{"},
{"lineNum":" 2665","line":"}"},
{"lineNum":" 2666","line":""},
{"lineNum":" 2667","line":"template <class _Allocator>"},
{"lineNum":" 2668","line":"vector<bool, _Allocator>::vector(size_type __n)"},
{"lineNum":" 2669","line":"    : __begin_(nullptr),"},
{"lineNum":" 2670","line":"      __size_(0),"},
{"lineNum":" 2671","line":"      __cap_alloc_(0, __default_init_tag())"},
{"lineNum":" 2672","line":"{"},
{"lineNum":" 2673","line":"    if (__n > 0)"},
{"lineNum":" 2674","line":"    {"},
{"lineNum":" 2675","line":"        __vallocate(__n);"},
{"lineNum":" 2676","line":"        __construct_at_end(__n, false);"},
{"lineNum":" 2677","line":"    }"},
{"lineNum":" 2678","line":"}"},
{"lineNum":" 2679","line":""},
{"lineNum":" 2680","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 2681","line":"template <class _Allocator>"},
{"lineNum":" 2682","line":"vector<bool, _Allocator>::vector(size_type __n, const allocator_type& __a)"},
{"lineNum":" 2683","line":"    : __begin_(nullptr),"},
{"lineNum":" 2684","line":"      __size_(0),"},
{"lineNum":" 2685","line":"      __cap_alloc_(0, static_cast<__storage_allocator>(__a))"},
{"lineNum":" 2686","line":"{"},
{"lineNum":" 2687","line":"    if (__n > 0)"},
{"lineNum":" 2688","line":"    {"},
{"lineNum":" 2689","line":"        __vallocate(__n);"},
{"lineNum":" 2690","line":"        __construct_at_end(__n, false);"},
{"lineNum":" 2691","line":"    }"},
{"lineNum":" 2692","line":"}"},
{"lineNum":" 2693","line":"#endif"},
{"lineNum":" 2694","line":""},
{"lineNum":" 2695","line":"template <class _Allocator>"},
{"lineNum":" 2696","line":"vector<bool, _Allocator>::vector(size_type __n, const value_type& __x)"},
{"lineNum":" 2697","line":"    : __begin_(nullptr),"},
{"lineNum":" 2698","line":"      __size_(0),"},
{"lineNum":" 2699","line":"      __cap_alloc_(0, __default_init_tag())"},
{"lineNum":" 2700","line":"{"},
{"lineNum":" 2701","line":"    if (__n > 0)"},
{"lineNum":" 2702","line":"    {"},
{"lineNum":" 2703","line":"        __vallocate(__n);"},
{"lineNum":" 2704","line":"        __construct_at_end(__n, __x);"},
{"lineNum":" 2705","line":"    }"},
{"lineNum":" 2706","line":"}"},
{"lineNum":" 2707","line":""},
{"lineNum":" 2708","line":"template <class _Allocator>"},
{"lineNum":" 2709","line":"vector<bool, _Allocator>::vector(size_type __n, const value_type& __x, const allocator_type& __a)"},
{"lineNum":" 2710","line":"    : __begin_(nullptr),"},
{"lineNum":" 2711","line":"      __size_(0),"},
{"lineNum":" 2712","line":"      __cap_alloc_(0, static_cast<__storage_allocator>(__a))"},
{"lineNum":" 2713","line":"{"},
{"lineNum":" 2714","line":"    if (__n > 0)"},
{"lineNum":" 2715","line":"    {"},
{"lineNum":" 2716","line":"        __vallocate(__n);"},
{"lineNum":" 2717","line":"        __construct_at_end(__n, __x);"},
{"lineNum":" 2718","line":"    }"},
{"lineNum":" 2719","line":"}"},
{"lineNum":" 2720","line":""},
{"lineNum":" 2721","line":"template <class _Allocator>"},
{"lineNum":" 2722","line":"template <class _InputIterator>"},
{"lineNum":" 2723","line":"vector<bool, _Allocator>::vector(_InputIterator __first, _InputIterator __last,"},
{"lineNum":" 2724","line":"       typename enable_if<__is_cpp17_input_iterator  <_InputIterator>::value &&"},
{"lineNum":" 2725","line":"                         !__is_cpp17_forward_iterator<_InputIterator>::value>::type*)"},
{"lineNum":" 2726","line":"    : __begin_(nullptr),"},
{"lineNum":" 2727","line":"      __size_(0),"},
{"lineNum":" 2728","line":"      __cap_alloc_(0, __default_init_tag())"},
{"lineNum":" 2729","line":"{"},
{"lineNum":" 2730","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 2731","line":"    try"},
{"lineNum":" 2732","line":"    {"},
{"lineNum":" 2733","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 2734","line":"        for (; __first != __last; ++__first)"},
{"lineNum":" 2735","line":"            push_back(*__first);"},
{"lineNum":" 2736","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 2737","line":"    }"},
{"lineNum":" 2738","line":"    catch (...)"},
{"lineNum":" 2739","line":"    {"},
{"lineNum":" 2740","line":"        if (__begin_ != nullptr)"},
{"lineNum":" 2741","line":"            __storage_traits::deallocate(__alloc(), __begin_, __cap());"},
{"lineNum":" 2742","line":"        __invalidate_all_iterators();"},
{"lineNum":" 2743","line":"        throw;"},
{"lineNum":" 2744","line":"    }"},
{"lineNum":" 2745","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 2746","line":"}"},
{"lineNum":" 2747","line":""},
{"lineNum":" 2748","line":"template <class _Allocator>"},
{"lineNum":" 2749","line":"template <class _InputIterator>"},
{"lineNum":" 2750","line":"vector<bool, _Allocator>::vector(_InputIterator __first, _InputIterator __last, const allocator_type& __a,"},
{"lineNum":" 2751","line":"       typename enable_if<__is_cpp17_input_iterator  <_InputIterator>::value &&"},
{"lineNum":" 2752","line":"                         !__is_cpp17_forward_iterator<_InputIterator>::value>::type*)"},
{"lineNum":" 2753","line":"    : __begin_(nullptr),"},
{"lineNum":" 2754","line":"      __size_(0),"},
{"lineNum":" 2755","line":"      __cap_alloc_(0, static_cast<__storage_allocator>(__a))"},
{"lineNum":" 2756","line":"{"},
{"lineNum":" 2757","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 2758","line":"    try"},
{"lineNum":" 2759","line":"    {"},
{"lineNum":" 2760","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 2761","line":"        for (; __first != __last; ++__first)"},
{"lineNum":" 2762","line":"            push_back(*__first);"},
{"lineNum":" 2763","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 2764","line":"    }"},
{"lineNum":" 2765","line":"    catch (...)"},
{"lineNum":" 2766","line":"    {"},
{"lineNum":" 2767","line":"        if (__begin_ != nullptr)"},
{"lineNum":" 2768","line":"            __storage_traits::deallocate(__alloc(), __begin_, __cap());"},
{"lineNum":" 2769","line":"        __invalidate_all_iterators();"},
{"lineNum":" 2770","line":"        throw;"},
{"lineNum":" 2771","line":"    }"},
{"lineNum":" 2772","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 2773","line":"}"},
{"lineNum":" 2774","line":""},
{"lineNum":" 2775","line":"template <class _Allocator>"},
{"lineNum":" 2776","line":"template <class _ForwardIterator>"},
{"lineNum":" 2777","line":"vector<bool, _Allocator>::vector(_ForwardIterator __first, _ForwardIterator __last,"},
{"lineNum":" 2778","line":"                                typename enable_if<__is_cpp17_forward_iterator<_ForwardIterator>::value>::type*)"},
{"lineNum":" 2779","line":"    : __begin_(nullptr),"},
{"lineNum":" 2780","line":"      __size_(0),"},
{"lineNum":" 2781","line":"      __cap_alloc_(0, __default_init_tag())"},
{"lineNum":" 2782","line":"{"},
{"lineNum":" 2783","line":"    size_type __n = static_cast<size_type>(_VSTD::distance(__first, __last));"},
{"lineNum":" 2784","line":"    if (__n > 0)"},
{"lineNum":" 2785","line":"    {"},
{"lineNum":" 2786","line":"        __vallocate(__n);"},
{"lineNum":" 2787","line":"        __construct_at_end(__first, __last);"},
{"lineNum":" 2788","line":"    }"},
{"lineNum":" 2789","line":"}"},
{"lineNum":" 2790","line":""},
{"lineNum":" 2791","line":"template <class _Allocator>"},
{"lineNum":" 2792","line":"template <class _ForwardIterator>"},
{"lineNum":" 2793","line":"vector<bool, _Allocator>::vector(_ForwardIterator __first, _ForwardIterator __last, const allocator_type& __a,"},
{"lineNum":" 2794","line":"                                typename enable_if<__is_cpp17_forward_iterator<_ForwardIterator>::value>::type*)"},
{"lineNum":" 2795","line":"    : __begin_(nullptr),"},
{"lineNum":" 2796","line":"      __size_(0),"},
{"lineNum":" 2797","line":"      __cap_alloc_(0, static_cast<__storage_allocator>(__a))"},
{"lineNum":" 2798","line":"{"},
{"lineNum":" 2799","line":"    size_type __n = static_cast<size_type>(_VSTD::distance(__first, __last));"},
{"lineNum":" 2800","line":"    if (__n > 0)"},
{"lineNum":" 2801","line":"    {"},
{"lineNum":" 2802","line":"        __vallocate(__n);"},
{"lineNum":" 2803","line":"        __construct_at_end(__first, __last);"},
{"lineNum":" 2804","line":"    }"},
{"lineNum":" 2805","line":"}"},
{"lineNum":" 2806","line":""},
{"lineNum":" 2807","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 2808","line":""},
{"lineNum":" 2809","line":"template <class _Allocator>"},
{"lineNum":" 2810","line":"vector<bool, _Allocator>::vector(initializer_list<value_type> __il)"},
{"lineNum":" 2811","line":"    : __begin_(nullptr),"},
{"lineNum":" 2812","line":"      __size_(0),"},
{"lineNum":" 2813","line":"      __cap_alloc_(0, __default_init_tag())"},
{"lineNum":" 2814","line":"{"},
{"lineNum":" 2815","line":"    size_type __n = static_cast<size_type>(__il.size());"},
{"lineNum":" 2816","line":"    if (__n > 0)"},
{"lineNum":" 2817","line":"    {"},
{"lineNum":" 2818","line":"        __vallocate(__n);"},
{"lineNum":" 2819","line":"        __construct_at_end(__il.begin(), __il.end());"},
{"lineNum":" 2820","line":"    }"},
{"lineNum":" 2821","line":"}"},
{"lineNum":" 2822","line":""},
{"lineNum":" 2823","line":"template <class _Allocator>"},
{"lineNum":" 2824","line":"vector<bool, _Allocator>::vector(initializer_list<value_type> __il, const allocator_type& __a)"},
{"lineNum":" 2825","line":"    : __begin_(nullptr),"},
{"lineNum":" 2826","line":"      __size_(0),"},
{"lineNum":" 2827","line":"      __cap_alloc_(0, static_cast<__storage_allocator>(__a))"},
{"lineNum":" 2828","line":"{"},
{"lineNum":" 2829","line":"    size_type __n = static_cast<size_type>(__il.size());"},
{"lineNum":" 2830","line":"    if (__n > 0)"},
{"lineNum":" 2831","line":"    {"},
{"lineNum":" 2832","line":"        __vallocate(__n);"},
{"lineNum":" 2833","line":"        __construct_at_end(__il.begin(), __il.end());"},
{"lineNum":" 2834","line":"    }"},
{"lineNum":" 2835","line":"}"},
{"lineNum":" 2836","line":""},
{"lineNum":" 2837","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 2838","line":""},
{"lineNum":" 2839","line":"template <class _Allocator>"},
{"lineNum":" 2840","line":"vector<bool, _Allocator>::~vector()"},
{"lineNum":" 2841","line":"{"},
{"lineNum":" 2842","line":"    if (__begin_ != nullptr)","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":" 2843","line":"        __storage_traits::deallocate(__alloc(), __begin_, __cap());"},
{"lineNum":" 2844","line":"    __invalidate_all_iterators();"},
{"lineNum":" 2845","line":"}"},
{"lineNum":" 2846","line":""},
{"lineNum":" 2847","line":"template <class _Allocator>"},
{"lineNum":" 2848","line":"vector<bool, _Allocator>::vector(const vector& __v)"},
{"lineNum":" 2849","line":"    : __begin_(nullptr),"},
{"lineNum":" 2850","line":"      __size_(0),"},
{"lineNum":" 2851","line":"      __cap_alloc_(0, __storage_traits::select_on_container_copy_construction(__v.__alloc()))"},
{"lineNum":" 2852","line":"{"},
{"lineNum":" 2853","line":"    if (__v.size() > 0)"},
{"lineNum":" 2854","line":"    {"},
{"lineNum":" 2855","line":"        __vallocate(__v.size());"},
{"lineNum":" 2856","line":"        __construct_at_end(__v.begin(), __v.end());"},
{"lineNum":" 2857","line":"    }"},
{"lineNum":" 2858","line":"}"},
{"lineNum":" 2859","line":""},
{"lineNum":" 2860","line":"template <class _Allocator>"},
{"lineNum":" 2861","line":"vector<bool, _Allocator>::vector(const vector& __v, const allocator_type& __a)"},
{"lineNum":" 2862","line":"    : __begin_(nullptr),"},
{"lineNum":" 2863","line":"      __size_(0),"},
{"lineNum":" 2864","line":"      __cap_alloc_(0, __a)"},
{"lineNum":" 2865","line":"{"},
{"lineNum":" 2866","line":"    if (__v.size() > 0)"},
{"lineNum":" 2867","line":"    {"},
{"lineNum":" 2868","line":"        __vallocate(__v.size());"},
{"lineNum":" 2869","line":"        __construct_at_end(__v.begin(), __v.end());"},
{"lineNum":" 2870","line":"    }"},
{"lineNum":" 2871","line":"}"},
{"lineNum":" 2872","line":""},
{"lineNum":" 2873","line":"template <class _Allocator>"},
{"lineNum":" 2874","line":"vector<bool, _Allocator>&"},
{"lineNum":" 2875","line":"vector<bool, _Allocator>::operator=(const vector& __v)"},
{"lineNum":" 2876","line":"{"},
{"lineNum":" 2877","line":"    if (this != &__v)"},
{"lineNum":" 2878","line":"    {"},
{"lineNum":" 2879","line":"        __copy_assign_alloc(__v);"},
{"lineNum":" 2880","line":"        if (__v.__size_)"},
{"lineNum":" 2881","line":"        {"},
{"lineNum":" 2882","line":"            if (__v.__size_ > capacity())"},
{"lineNum":" 2883","line":"            {"},
{"lineNum":" 2884","line":"                __vdeallocate();"},
{"lineNum":" 2885","line":"                __vallocate(__v.__size_);"},
{"lineNum":" 2886","line":"            }"},
{"lineNum":" 2887","line":"            _VSTD::copy(__v.__begin_, __v.__begin_ + __external_cap_to_internal(__v.__size_), __begin_);"},
{"lineNum":" 2888","line":"        }"},
{"lineNum":" 2889","line":"        __size_ = __v.__size_;"},
{"lineNum":" 2890","line":"    }"},
{"lineNum":" 2891","line":"    return *this;"},
{"lineNum":" 2892","line":"}"},
{"lineNum":" 2893","line":""},
{"lineNum":" 2894","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 2895","line":""},
{"lineNum":" 2896","line":"template <class _Allocator>"},
{"lineNum":" 2897","line":"inline _LIBCPP_INLINE_VISIBILITY vector<bool, _Allocator>::vector(vector&& __v)"},
{"lineNum":" 2898","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 2899","line":"    _NOEXCEPT"},
{"lineNum":" 2900","line":"#else"},
{"lineNum":" 2901","line":"    _NOEXCEPT_(is_nothrow_move_constructible<allocator_type>::value)"},
{"lineNum":" 2902","line":"#endif"},
{"lineNum":" 2903","line":"    : __begin_(__v.__begin_),"},
{"lineNum":" 2904","line":"      __size_(__v.__size_),"},
{"lineNum":" 2905","line":"      __cap_alloc_(_VSTD::move(__v.__cap_alloc_)) {"},
{"lineNum":" 2906","line":"    __v.__begin_ = nullptr;"},
{"lineNum":" 2907","line":"    __v.__size_ = 0;"},
{"lineNum":" 2908","line":"    __v.__cap() = 0;"},
{"lineNum":" 2909","line":"}"},
{"lineNum":" 2910","line":""},
{"lineNum":" 2911","line":"template <class _Allocator>"},
{"lineNum":" 2912","line":"vector<bool, _Allocator>::vector(vector&& __v, const __identity_t<allocator_type>& __a)"},
{"lineNum":" 2913","line":"    : __begin_(nullptr),"},
{"lineNum":" 2914","line":"      __size_(0),"},
{"lineNum":" 2915","line":"      __cap_alloc_(0, __a)"},
{"lineNum":" 2916","line":"{"},
{"lineNum":" 2917","line":"    if (__a == allocator_type(__v.__alloc()))"},
{"lineNum":" 2918","line":"    {"},
{"lineNum":" 2919","line":"        this->__begin_ = __v.__begin_;"},
{"lineNum":" 2920","line":"        this->__size_ = __v.__size_;"},
{"lineNum":" 2921","line":"        this->__cap() = __v.__cap();"},
{"lineNum":" 2922","line":"        __v.__begin_ = nullptr;"},
{"lineNum":" 2923","line":"        __v.__cap() = __v.__size_ = 0;"},
{"lineNum":" 2924","line":"    }"},
{"lineNum":" 2925","line":"    else if (__v.size() > 0)"},
{"lineNum":" 2926","line":"    {"},
{"lineNum":" 2927","line":"        __vallocate(__v.size());"},
{"lineNum":" 2928","line":"        __construct_at_end(__v.begin(), __v.end());"},
{"lineNum":" 2929","line":"    }"},
{"lineNum":" 2930","line":"}"},
{"lineNum":" 2931","line":""},
{"lineNum":" 2932","line":"template <class _Allocator>"},
{"lineNum":" 2933","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2934","line":"vector<bool, _Allocator>&"},
{"lineNum":" 2935","line":"vector<bool, _Allocator>::operator=(vector&& __v)"},
{"lineNum":" 2936","line":"    _NOEXCEPT_((__noexcept_move_assign_container<_Allocator, __alloc_traits>::value))"},
{"lineNum":" 2937","line":"{"},
{"lineNum":" 2938","line":"    __move_assign(__v, integral_constant<bool,"},
{"lineNum":" 2939","line":"          __storage_traits::propagate_on_container_move_assignment::value>());"},
{"lineNum":" 2940","line":"    return *this;"},
{"lineNum":" 2941","line":"}"},
{"lineNum":" 2942","line":""},
{"lineNum":" 2943","line":"template <class _Allocator>"},
{"lineNum":" 2944","line":"void"},
{"lineNum":" 2945","line":"vector<bool, _Allocator>::__move_assign(vector& __c, false_type)"},
{"lineNum":" 2946","line":"{"},
{"lineNum":" 2947","line":"    if (__alloc() != __c.__alloc())"},
{"lineNum":" 2948","line":"        assign(__c.begin(), __c.end());"},
{"lineNum":" 2949","line":"    else"},
{"lineNum":" 2950","line":"        __move_assign(__c, true_type());"},
{"lineNum":" 2951","line":"}"},
{"lineNum":" 2952","line":""},
{"lineNum":" 2953","line":"template <class _Allocator>"},
{"lineNum":" 2954","line":"void"},
{"lineNum":" 2955","line":"vector<bool, _Allocator>::__move_assign(vector& __c, true_type)"},
{"lineNum":" 2956","line":"    _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value)"},
{"lineNum":" 2957","line":"{"},
{"lineNum":" 2958","line":"    __vdeallocate();"},
{"lineNum":" 2959","line":"    __move_assign_alloc(__c);"},
{"lineNum":" 2960","line":"    this->__begin_ = __c.__begin_;"},
{"lineNum":" 2961","line":"    this->__size_ = __c.__size_;"},
{"lineNum":" 2962","line":"    this->__cap() = __c.__cap();"},
{"lineNum":" 2963","line":"    __c.__begin_ = nullptr;"},
{"lineNum":" 2964","line":"    __c.__cap() = __c.__size_ = 0;"},
{"lineNum":" 2965","line":"}"},
{"lineNum":" 2966","line":""},
{"lineNum":" 2967","line":"#endif // !_LIBCPP_CXX03_LANG"},
{"lineNum":" 2968","line":""},
{"lineNum":" 2969","line":"template <class _Allocator>"},
{"lineNum":" 2970","line":"void"},
{"lineNum":" 2971","line":"vector<bool, _Allocator>::assign(size_type __n, const value_type& __x)"},
{"lineNum":" 2972","line":"{"},
{"lineNum":" 2973","line":"    __size_ = 0;"},
{"lineNum":" 2974","line":"    if (__n > 0)"},
{"lineNum":" 2975","line":"    {"},
{"lineNum":" 2976","line":"        size_type __c = capacity();"},
{"lineNum":" 2977","line":"        if (__n <= __c)"},
{"lineNum":" 2978","line":"            __size_ = __n;"},
{"lineNum":" 2979","line":"        else"},
{"lineNum":" 2980","line":"        {"},
{"lineNum":" 2981","line":"            vector __v(__alloc());"},
{"lineNum":" 2982","line":"            __v.reserve(__recommend(__n));"},
{"lineNum":" 2983","line":"            __v.__size_ = __n;"},
{"lineNum":" 2984","line":"            swap(__v);"},
{"lineNum":" 2985","line":"        }"},
{"lineNum":" 2986","line":"        _VSTD::fill_n(begin(), __n, __x);"},
{"lineNum":" 2987","line":"    }"},
{"lineNum":" 2988","line":"  __invalidate_all_iterators();"},
{"lineNum":" 2989","line":"}"},
{"lineNum":" 2990","line":""},
{"lineNum":" 2991","line":"template <class _Allocator>"},
{"lineNum":" 2992","line":"template <class _InputIterator>"},
{"lineNum":" 2993","line":"typename enable_if"},
{"lineNum":" 2994","line":"<"},
{"lineNum":" 2995","line":"    __is_cpp17_input_iterator<_InputIterator>::value &&"},
{"lineNum":" 2996","line":"   !__is_cpp17_forward_iterator<_InputIterator>::value,"},
{"lineNum":" 2997","line":"   void"},
{"lineNum":" 2998","line":">::type"},
{"lineNum":" 2999","line":"vector<bool, _Allocator>::assign(_InputIterator __first, _InputIterator __last)"},
{"lineNum":" 3000","line":"{"},
{"lineNum":" 3001","line":"    clear();"},
{"lineNum":" 3002","line":"    for (; __first != __last; ++__first)"},
{"lineNum":" 3003","line":"        push_back(*__first);"},
{"lineNum":" 3004","line":"}"},
{"lineNum":" 3005","line":""},
{"lineNum":" 3006","line":"template <class _Allocator>"},
{"lineNum":" 3007","line":"template <class _ForwardIterator>"},
{"lineNum":" 3008","line":"typename enable_if"},
{"lineNum":" 3009","line":"<"},
{"lineNum":" 3010","line":"    __is_cpp17_forward_iterator<_ForwardIterator>::value,"},
{"lineNum":" 3011","line":"   void"},
{"lineNum":" 3012","line":">::type"},
{"lineNum":" 3013","line":"vector<bool, _Allocator>::assign(_ForwardIterator __first, _ForwardIterator __last)"},
{"lineNum":" 3014","line":"{"},
{"lineNum":" 3015","line":"    clear();"},
{"lineNum":" 3016","line":"    difference_type __ns = _VSTD::distance(__first, __last);"},
{"lineNum":" 3017","line":"    _LIBCPP_ASSERT(__ns >= 0, \"invalid range specified\");"},
{"lineNum":" 3018","line":"    const size_t __n = static_cast<size_type>(__ns);"},
{"lineNum":" 3019","line":"    if (__n)"},
{"lineNum":" 3020","line":"    {"},
{"lineNum":" 3021","line":"        if (__n > capacity())"},
{"lineNum":" 3022","line":"        {"},
{"lineNum":" 3023","line":"            __vdeallocate();"},
{"lineNum":" 3024","line":"            __vallocate(__n);"},
{"lineNum":" 3025","line":"        }"},
{"lineNum":" 3026","line":"        __construct_at_end(__first, __last);"},
{"lineNum":" 3027","line":"    }"},
{"lineNum":" 3028","line":"}"},
{"lineNum":" 3029","line":""},
{"lineNum":" 3030","line":"template <class _Allocator>"},
{"lineNum":" 3031","line":"void"},
{"lineNum":" 3032","line":"vector<bool, _Allocator>::reserve(size_type __n)"},
{"lineNum":" 3033","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3034","line":"    if (__n > capacity())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3035","line":"    {"},
{"lineNum":" 3036","line":"        vector __v(this->__alloc());"},
{"lineNum":" 3037","line":"        __v.__vallocate(__n);"},
{"lineNum":" 3038","line":"        __v.__construct_at_end(this->begin(), this->end());"},
{"lineNum":" 3039","line":"        swap(__v);"},
{"lineNum":" 3040","line":"        __invalidate_all_iterators();"},
{"lineNum":" 3041","line":"    }"},
{"lineNum":" 3042","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3043","line":""},
{"lineNum":" 3044","line":"template <class _Allocator>"},
{"lineNum":" 3045","line":"void"},
{"lineNum":" 3046","line":"vector<bool, _Allocator>::shrink_to_fit() _NOEXCEPT"},
{"lineNum":" 3047","line":"{"},
{"lineNum":" 3048","line":"    if (__external_cap_to_internal(size()) > __cap())"},
{"lineNum":" 3049","line":"    {"},
{"lineNum":" 3050","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 3051","line":"        try"},
{"lineNum":" 3052","line":"        {"},
{"lineNum":" 3053","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 3054","line":"            vector(*this, allocator_type(__alloc())).swap(*this);"},
{"lineNum":" 3055","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 3056","line":"        }"},
{"lineNum":" 3057","line":"        catch (...)"},
{"lineNum":" 3058","line":"        {"},
{"lineNum":" 3059","line":"        }"},
{"lineNum":" 3060","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 3061","line":"    }"},
{"lineNum":" 3062","line":"}"},
{"lineNum":" 3063","line":""},
{"lineNum":" 3064","line":"template <class _Allocator>"},
{"lineNum":" 3065","line":"typename vector<bool, _Allocator>::reference"},
{"lineNum":" 3066","line":"vector<bool, _Allocator>::at(size_type __n)"},
{"lineNum":" 3067","line":"{"},
{"lineNum":" 3068","line":"    if (__n >= size())"},
{"lineNum":" 3069","line":"        this->__throw_out_of_range();"},
{"lineNum":" 3070","line":"    return (*this)[__n];"},
{"lineNum":" 3071","line":"}"},
{"lineNum":" 3072","line":""},
{"lineNum":" 3073","line":"template <class _Allocator>"},
{"lineNum":" 3074","line":"typename vector<bool, _Allocator>::const_reference"},
{"lineNum":" 3075","line":"vector<bool, _Allocator>::at(size_type __n) const"},
{"lineNum":" 3076","line":"{"},
{"lineNum":" 3077","line":"    if (__n >= size())"},
{"lineNum":" 3078","line":"        this->__throw_out_of_range();"},
{"lineNum":" 3079","line":"    return (*this)[__n];"},
{"lineNum":" 3080","line":"}"},
{"lineNum":" 3081","line":""},
{"lineNum":" 3082","line":"template <class _Allocator>"},
{"lineNum":" 3083","line":"void"},
{"lineNum":" 3084","line":"vector<bool, _Allocator>::push_back(const value_type& __x)"},
{"lineNum":" 3085","line":"{"},
{"lineNum":" 3086","line":"    if (this->__size_ == this->capacity())","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":" 3087","line":"        reserve(__recommend(this->__size_ + 1));","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 3088","line":"    ++this->__size_;","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 3089","line":"    back() = __x;"},
{"lineNum":" 3090","line":"}"},
{"lineNum":" 3091","line":""},
{"lineNum":" 3092","line":"template <class _Allocator>"},
{"lineNum":" 3093","line":"typename vector<bool, _Allocator>::iterator"},
{"lineNum":" 3094","line":"vector<bool, _Allocator>::insert(const_iterator __position, const value_type& __x)"},
{"lineNum":" 3095","line":"{"},
{"lineNum":" 3096","line":"    iterator __r;"},
{"lineNum":" 3097","line":"    if (size() < capacity())"},
{"lineNum":" 3098","line":"    {"},
{"lineNum":" 3099","line":"        const_iterator __old_end = end();"},
{"lineNum":" 3100","line":"        ++__size_;"},
{"lineNum":" 3101","line":"        _VSTD::copy_backward(__position, __old_end, end());"},
{"lineNum":" 3102","line":"        __r = __const_iterator_cast(__position);"},
{"lineNum":" 3103","line":"    }"},
{"lineNum":" 3104","line":"    else"},
{"lineNum":" 3105","line":"    {"},
{"lineNum":" 3106","line":"        vector __v(__alloc());"},
{"lineNum":" 3107","line":"        __v.reserve(__recommend(__size_ + 1));"},
{"lineNum":" 3108","line":"        __v.__size_ = __size_ + 1;"},
{"lineNum":" 3109","line":"        __r = _VSTD::copy(cbegin(), __position, __v.begin());"},
{"lineNum":" 3110","line":"        _VSTD::copy_backward(__position, cend(), __v.end());"},
{"lineNum":" 3111","line":"        swap(__v);"},
{"lineNum":" 3112","line":"    }"},
{"lineNum":" 3113","line":"    *__r = __x;"},
{"lineNum":" 3114","line":"    return __r;"},
{"lineNum":" 3115","line":"}"},
{"lineNum":" 3116","line":""},
{"lineNum":" 3117","line":"template <class _Allocator>"},
{"lineNum":" 3118","line":"typename vector<bool, _Allocator>::iterator"},
{"lineNum":" 3119","line":"vector<bool, _Allocator>::insert(const_iterator __position, size_type __n, const value_type& __x)"},
{"lineNum":" 3120","line":"{"},
{"lineNum":" 3121","line":"    iterator __r;"},
{"lineNum":" 3122","line":"    size_type __c = capacity();"},
{"lineNum":" 3123","line":"    if (__n <= __c && size() <= __c - __n)"},
{"lineNum":" 3124","line":"    {"},
{"lineNum":" 3125","line":"        const_iterator __old_end = end();"},
{"lineNum":" 3126","line":"        __size_ += __n;"},
{"lineNum":" 3127","line":"        _VSTD::copy_backward(__position, __old_end, end());"},
{"lineNum":" 3128","line":"        __r = __const_iterator_cast(__position);"},
{"lineNum":" 3129","line":"    }"},
{"lineNum":" 3130","line":"    else"},
{"lineNum":" 3131","line":"    {"},
{"lineNum":" 3132","line":"        vector __v(__alloc());"},
{"lineNum":" 3133","line":"        __v.reserve(__recommend(__size_ + __n));"},
{"lineNum":" 3134","line":"        __v.__size_ = __size_ + __n;"},
{"lineNum":" 3135","line":"        __r = _VSTD::copy(cbegin(), __position, __v.begin());"},
{"lineNum":" 3136","line":"        _VSTD::copy_backward(__position, cend(), __v.end());"},
{"lineNum":" 3137","line":"        swap(__v);"},
{"lineNum":" 3138","line":"    }"},
{"lineNum":" 3139","line":"    _VSTD::fill_n(__r, __n, __x);"},
{"lineNum":" 3140","line":"    return __r;"},
{"lineNum":" 3141","line":"}"},
{"lineNum":" 3142","line":""},
{"lineNum":" 3143","line":"template <class _Allocator>"},
{"lineNum":" 3144","line":"template <class _InputIterator>"},
{"lineNum":" 3145","line":"typename enable_if"},
{"lineNum":" 3146","line":"<"},
{"lineNum":" 3147","line":"     __is_cpp17_input_iterator  <_InputIterator>::value &&"},
{"lineNum":" 3148","line":"    !__is_cpp17_forward_iterator<_InputIterator>::value,"},
{"lineNum":" 3149","line":"    typename vector<bool, _Allocator>::iterator"},
{"lineNum":" 3150","line":">::type"},
{"lineNum":" 3151","line":"vector<bool, _Allocator>::insert(const_iterator __position, _InputIterator __first, _InputIterator __last)"},
{"lineNum":" 3152","line":"{"},
{"lineNum":" 3153","line":"    difference_type __off = __position - begin();"},
{"lineNum":" 3154","line":"    iterator __p = __const_iterator_cast(__position);"},
{"lineNum":" 3155","line":"    iterator __old_end = end();"},
{"lineNum":" 3156","line":"    for (; size() != capacity() && __first != __last; ++__first)"},
{"lineNum":" 3157","line":"    {"},
{"lineNum":" 3158","line":"        ++this->__size_;"},
{"lineNum":" 3159","line":"        back() = *__first;"},
{"lineNum":" 3160","line":"    }"},
{"lineNum":" 3161","line":"    vector __v(__alloc());"},
{"lineNum":" 3162","line":"    if (__first != __last)"},
{"lineNum":" 3163","line":"    {"},
{"lineNum":" 3164","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 3165","line":"        try"},
{"lineNum":" 3166","line":"        {"},
{"lineNum":" 3167","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 3168","line":"            __v.assign(__first, __last);"},
{"lineNum":" 3169","line":"            difference_type __old_size = static_cast<difference_type>(__old_end - begin());"},
{"lineNum":" 3170","line":"            difference_type __old_p = __p - begin();"},
{"lineNum":" 3171","line":"            reserve(__recommend(size() + __v.size()));"},
{"lineNum":" 3172","line":"            __p = begin() + __old_p;"},
{"lineNum":" 3173","line":"            __old_end = begin() + __old_size;"},
{"lineNum":" 3174","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 3175","line":"        }"},
{"lineNum":" 3176","line":"        catch (...)"},
{"lineNum":" 3177","line":"        {"},
{"lineNum":" 3178","line":"            erase(__old_end, end());"},
{"lineNum":" 3179","line":"            throw;"},
{"lineNum":" 3180","line":"        }"},
{"lineNum":" 3181","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 3182","line":"    }"},
{"lineNum":" 3183","line":"    __p = _VSTD::rotate(__p, __old_end, end());"},
{"lineNum":" 3184","line":"    insert(__p, __v.begin(), __v.end());"},
{"lineNum":" 3185","line":"    return begin() + __off;"},
{"lineNum":" 3186","line":"}"},
{"lineNum":" 3187","line":""},
{"lineNum":" 3188","line":"template <class _Allocator>"},
{"lineNum":" 3189","line":"template <class _ForwardIterator>"},
{"lineNum":" 3190","line":"typename enable_if"},
{"lineNum":" 3191","line":"<"},
{"lineNum":" 3192","line":"    __is_cpp17_forward_iterator<_ForwardIterator>::value,"},
{"lineNum":" 3193","line":"    typename vector<bool, _Allocator>::iterator"},
{"lineNum":" 3194","line":">::type"},
{"lineNum":" 3195","line":"vector<bool, _Allocator>::insert(const_iterator __position, _ForwardIterator __first, _ForwardIterator __last)"},
{"lineNum":" 3196","line":"{"},
{"lineNum":" 3197","line":"    const difference_type __n_signed = _VSTD::distance(__first, __last);"},
{"lineNum":" 3198","line":"    _LIBCPP_ASSERT(__n_signed >= 0, \"invalid range specified\");"},
{"lineNum":" 3199","line":"    const size_type __n = static_cast<size_type>(__n_signed);"},
{"lineNum":" 3200","line":"    iterator __r;"},
{"lineNum":" 3201","line":"    size_type __c = capacity();"},
{"lineNum":" 3202","line":"    if (__n <= __c && size() <= __c - __n)"},
{"lineNum":" 3203","line":"    {"},
{"lineNum":" 3204","line":"        const_iterator __old_end = end();"},
{"lineNum":" 3205","line":"        __size_ += __n;"},
{"lineNum":" 3206","line":"        _VSTD::copy_backward(__position, __old_end, end());"},
{"lineNum":" 3207","line":"        __r = __const_iterator_cast(__position);"},
{"lineNum":" 3208","line":"    }"},
{"lineNum":" 3209","line":"    else"},
{"lineNum":" 3210","line":"    {"},
{"lineNum":" 3211","line":"        vector __v(__alloc());"},
{"lineNum":" 3212","line":"        __v.reserve(__recommend(__size_ + __n));"},
{"lineNum":" 3213","line":"        __v.__size_ = __size_ + __n;"},
{"lineNum":" 3214","line":"        __r = _VSTD::copy(cbegin(), __position, __v.begin());"},
{"lineNum":" 3215","line":"        _VSTD::copy_backward(__position, cend(), __v.end());"},
{"lineNum":" 3216","line":"        swap(__v);"},
{"lineNum":" 3217","line":"    }"},
{"lineNum":" 3218","line":"    _VSTD::copy(__first, __last, __r);"},
{"lineNum":" 3219","line":"    return __r;"},
{"lineNum":" 3220","line":"}"},
{"lineNum":" 3221","line":""},
{"lineNum":" 3222","line":"template <class _Allocator>"},
{"lineNum":" 3223","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 3224","line":"typename vector<bool, _Allocator>::iterator"},
{"lineNum":" 3225","line":"vector<bool, _Allocator>::erase(const_iterator __position)"},
{"lineNum":" 3226","line":"{"},
{"lineNum":" 3227","line":"    iterator __r = __const_iterator_cast(__position);"},
{"lineNum":" 3228","line":"    _VSTD::copy(__position + 1, this->cend(), __r);"},
{"lineNum":" 3229","line":"    --__size_;"},
{"lineNum":" 3230","line":"    return __r;"},
{"lineNum":" 3231","line":"}"},
{"lineNum":" 3232","line":""},
{"lineNum":" 3233","line":"template <class _Allocator>"},
{"lineNum":" 3234","line":"typename vector<bool, _Allocator>::iterator"},
{"lineNum":" 3235","line":"vector<bool, _Allocator>::erase(const_iterator __first, const_iterator __last)"},
{"lineNum":" 3236","line":"{"},
{"lineNum":" 3237","line":"    iterator __r = __const_iterator_cast(__first);"},
{"lineNum":" 3238","line":"    difference_type __d = __last - __first;"},
{"lineNum":" 3239","line":"    _VSTD::copy(__last, this->cend(), __r);"},
{"lineNum":" 3240","line":"    __size_ -= __d;"},
{"lineNum":" 3241","line":"    return __r;"},
{"lineNum":" 3242","line":"}"},
{"lineNum":" 3243","line":""},
{"lineNum":" 3244","line":"template <class _Allocator>"},
{"lineNum":" 3245","line":"void"},
{"lineNum":" 3246","line":"vector<bool, _Allocator>::swap(vector& __x)"},
{"lineNum":" 3247","line":"#if _LIBCPP_STD_VER >= 14"},
{"lineNum":" 3248","line":"    _NOEXCEPT"},
{"lineNum":" 3249","line":"#else"},
{"lineNum":" 3250","line":"    _NOEXCEPT_(!__alloc_traits::propagate_on_container_swap::value ||"},
{"lineNum":" 3251","line":"                __is_nothrow_swappable<allocator_type>::value)"},
{"lineNum":" 3252","line":"#endif"},
{"lineNum":" 3253","line":"{"},
{"lineNum":" 3254","line":"    _VSTD::swap(this->__begin_, __x.__begin_);"},
{"lineNum":" 3255","line":"    _VSTD::swap(this->__size_, __x.__size_);"},
{"lineNum":" 3256","line":"    _VSTD::swap(this->__cap(), __x.__cap());"},
{"lineNum":" 3257","line":"    _VSTD::__swap_allocator(this->__alloc(), __x.__alloc(),"},
{"lineNum":" 3258","line":"        integral_constant<bool, __alloc_traits::propagate_on_container_swap::value>());"},
{"lineNum":" 3259","line":"}"},
{"lineNum":" 3260","line":""},
{"lineNum":" 3261","line":"template <class _Allocator>"},
{"lineNum":" 3262","line":"void"},
{"lineNum":" 3263","line":"vector<bool, _Allocator>::resize(size_type __sz, value_type __x)"},
{"lineNum":" 3264","line":"{"},
{"lineNum":" 3265","line":"    size_type __cs = size();"},
{"lineNum":" 3266","line":"    if (__cs < __sz)"},
{"lineNum":" 3267","line":"    {"},
{"lineNum":" 3268","line":"        iterator __r;"},
{"lineNum":" 3269","line":"        size_type __c = capacity();"},
{"lineNum":" 3270","line":"        size_type __n = __sz - __cs;"},
{"lineNum":" 3271","line":"        if (__n <= __c && __cs <= __c - __n)"},
{"lineNum":" 3272","line":"        {"},
{"lineNum":" 3273","line":"            __r = end();"},
{"lineNum":" 3274","line":"            __size_ += __n;"},
{"lineNum":" 3275","line":"        }"},
{"lineNum":" 3276","line":"        else"},
{"lineNum":" 3277","line":"        {"},
{"lineNum":" 3278","line":"            vector __v(__alloc());"},
{"lineNum":" 3279","line":"            __v.reserve(__recommend(__size_ + __n));"},
{"lineNum":" 3280","line":"            __v.__size_ = __size_ + __n;"},
{"lineNum":" 3281","line":"            __r = _VSTD::copy(cbegin(), cend(), __v.begin());"},
{"lineNum":" 3282","line":"            swap(__v);"},
{"lineNum":" 3283","line":"        }"},
{"lineNum":" 3284","line":"        _VSTD::fill_n(__r, __n, __x);"},
{"lineNum":" 3285","line":"    }"},
{"lineNum":" 3286","line":"    else"},
{"lineNum":" 3287","line":"        __size_ = __sz;"},
{"lineNum":" 3288","line":"}"},
{"lineNum":" 3289","line":""},
{"lineNum":" 3290","line":"template <class _Allocator>"},
{"lineNum":" 3291","line":"void"},
{"lineNum":" 3292","line":"vector<bool, _Allocator>::flip() _NOEXCEPT"},
{"lineNum":" 3293","line":"{"},
{"lineNum":" 3294","line":"    // do middle whole words"},
{"lineNum":" 3295","line":"    size_type __n = __size_;"},
{"lineNum":" 3296","line":"    __storage_pointer __p = __begin_;"},
{"lineNum":" 3297","line":"    for (; __n >= __bits_per_word; ++__p, __n -= __bits_per_word)"},
{"lineNum":" 3298","line":"        *__p = ~*__p;"},
{"lineNum":" 3299","line":"    // do last partial word"},
{"lineNum":" 3300","line":"    if (__n > 0)"},
{"lineNum":" 3301","line":"    {"},
{"lineNum":" 3302","line":"        __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);"},
{"lineNum":" 3303","line":"        __storage_type __b = *__p & __m;"},
{"lineNum":" 3304","line":"        *__p &= ~__m;"},
{"lineNum":" 3305","line":"        *__p |= ~__b & __m;"},
{"lineNum":" 3306","line":"    }"},
{"lineNum":" 3307","line":"}"},
{"lineNum":" 3308","line":""},
{"lineNum":" 3309","line":"template <class _Allocator>"},
{"lineNum":" 3310","line":"bool"},
{"lineNum":" 3311","line":"vector<bool, _Allocator>::__invariants() const"},
{"lineNum":" 3312","line":"{"},
{"lineNum":" 3313","line":"    if (this->__begin_ == nullptr)"},
{"lineNum":" 3314","line":"    {"},
{"lineNum":" 3315","line":"        if (this->__size_ != 0 || this->__cap() != 0)"},
{"lineNum":" 3316","line":"            return false;"},
{"lineNum":" 3317","line":"    }"},
{"lineNum":" 3318","line":"    else"},
{"lineNum":" 3319","line":"    {"},
{"lineNum":" 3320","line":"        if (this->__cap() == 0)"},
{"lineNum":" 3321","line":"            return false;"},
{"lineNum":" 3322","line":"        if (this->__size_ > this->capacity())"},
{"lineNum":" 3323","line":"            return false;"},
{"lineNum":" 3324","line":"    }"},
{"lineNum":" 3325","line":"    return true;"},
{"lineNum":" 3326","line":"}"},
{"lineNum":" 3327","line":""},
{"lineNum":" 3328","line":"template <class _Allocator>"},
{"lineNum":" 3329","line":"size_t"},
{"lineNum":" 3330","line":"vector<bool, _Allocator>::__hash_code() const _NOEXCEPT"},
{"lineNum":" 3331","line":"{"},
{"lineNum":" 3332","line":"    size_t __h = 0;"},
{"lineNum":" 3333","line":"    // do middle whole words"},
{"lineNum":" 3334","line":"    size_type __n = __size_;"},
{"lineNum":" 3335","line":"    __storage_pointer __p = __begin_;"},
{"lineNum":" 3336","line":"    for (; __n >= __bits_per_word; ++__p, __n -= __bits_per_word)"},
{"lineNum":" 3337","line":"        __h ^= *__p;"},
{"lineNum":" 3338","line":"    // do last partial word"},
{"lineNum":" 3339","line":"    if (__n > 0)"},
{"lineNum":" 3340","line":"    {"},
{"lineNum":" 3341","line":"        const __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);"},
{"lineNum":" 3342","line":"        __h ^= *__p & __m;"},
{"lineNum":" 3343","line":"    }"},
{"lineNum":" 3344","line":"    return __h;"},
{"lineNum":" 3345","line":"}"},
{"lineNum":" 3346","line":""},
{"lineNum":" 3347","line":"template <class _Allocator>"},
{"lineNum":" 3348","line":"struct _LIBCPP_TEMPLATE_VIS hash<vector<bool, _Allocator> >"},
{"lineNum":" 3349","line":"    : public unary_function<vector<bool, _Allocator>, size_t>"},
{"lineNum":" 3350","line":"{"},
{"lineNum":" 3351","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 3352","line":"    size_t operator()(const vector<bool, _Allocator>& __vec) const _NOEXCEPT"},
{"lineNum":" 3353","line":"        {return __vec.__hash_code();}"},
{"lineNum":" 3354","line":"};"},
{"lineNum":" 3355","line":""},
{"lineNum":" 3356","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 3357","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 3358","line":"bool"},
{"lineNum":" 3359","line":"operator==(const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y)"},
{"lineNum":" 3360","line":"{"},
{"lineNum":" 3361","line":"    const typename vector<_Tp, _Allocator>::size_type __sz = __x.size();"},
{"lineNum":" 3362","line":"    return __sz == __y.size() && _VSTD::equal(__x.begin(), __x.end(), __y.begin());"},
{"lineNum":" 3363","line":"}"},
{"lineNum":" 3364","line":""},
{"lineNum":" 3365","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 3366","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 3367","line":"bool"},
{"lineNum":" 3368","line":"operator!=(const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y)"},
{"lineNum":" 3369","line":"{"},
{"lineNum":" 3370","line":"    return !(__x == __y);"},
{"lineNum":" 3371","line":"}"},
{"lineNum":" 3372","line":""},
{"lineNum":" 3373","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 3374","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 3375","line":"bool"},
{"lineNum":" 3376","line":"operator< (const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y)"},
{"lineNum":" 3377","line":"{"},
{"lineNum":" 3378","line":"    return _VSTD::lexicographical_compare(__x.begin(), __x.end(), __y.begin(), __y.end());"},
{"lineNum":" 3379","line":"}"},
{"lineNum":" 3380","line":""},
{"lineNum":" 3381","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 3382","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 3383","line":"bool"},
{"lineNum":" 3384","line":"operator> (const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y)"},
{"lineNum":" 3385","line":"{"},
{"lineNum":" 3386","line":"    return __y < __x;"},
{"lineNum":" 3387","line":"}"},
{"lineNum":" 3388","line":""},
{"lineNum":" 3389","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 3390","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 3391","line":"bool"},
{"lineNum":" 3392","line":"operator>=(const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y)"},
{"lineNum":" 3393","line":"{"},
{"lineNum":" 3394","line":"    return !(__x < __y);"},
{"lineNum":" 3395","line":"}"},
{"lineNum":" 3396","line":""},
{"lineNum":" 3397","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 3398","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 3399","line":"bool"},
{"lineNum":" 3400","line":"operator<=(const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y)"},
{"lineNum":" 3401","line":"{"},
{"lineNum":" 3402","line":"    return !(__y < __x);"},
{"lineNum":" 3403","line":"}"},
{"lineNum":" 3404","line":""},
{"lineNum":" 3405","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 3406","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 3407","line":"void"},
{"lineNum":" 3408","line":"swap(vector<_Tp, _Allocator>& __x, vector<_Tp, _Allocator>& __y)"},
{"lineNum":" 3409","line":"    _NOEXCEPT_(_NOEXCEPT_(__x.swap(__y)))"},
{"lineNum":" 3410","line":"{"},
{"lineNum":" 3411","line":"    __x.swap(__y);"},
{"lineNum":" 3412","line":"}"},
{"lineNum":" 3413","line":""},
{"lineNum":" 3414","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":" 3415","line":"template <class _Tp, class _Allocator, class _Up>"},
{"lineNum":" 3416","line":"inline _LIBCPP_INLINE_VISIBILITY typename vector<_Tp, _Allocator>::size_type"},
{"lineNum":" 3417","line":"erase(vector<_Tp, _Allocator>& __c, const _Up& __v) {"},
{"lineNum":" 3418","line":"  auto __old_size = __c.size();"},
{"lineNum":" 3419","line":"  __c.erase(_VSTD::remove(__c.begin(), __c.end(), __v), __c.end());"},
{"lineNum":" 3420","line":"  return __old_size - __c.size();"},
{"lineNum":" 3421","line":"}"},
{"lineNum":" 3422","line":""},
{"lineNum":" 3423","line":"template <class _Tp, class _Allocator, class _Predicate>"},
{"lineNum":" 3424","line":"inline _LIBCPP_INLINE_VISIBILITY typename vector<_Tp, _Allocator>::size_type"},
{"lineNum":" 3425","line":"erase_if(vector<_Tp, _Allocator>& __c, _Predicate __pred) {"},
{"lineNum":" 3426","line":"  auto __old_size = __c.size();"},
{"lineNum":" 3427","line":"  __c.erase(_VSTD::remove_if(__c.begin(), __c.end(), __pred), __c.end());"},
{"lineNum":" 3428","line":"  return __old_size - __c.size();"},
{"lineNum":" 3429","line":"}"},
{"lineNum":" 3430","line":"#endif"},
{"lineNum":" 3431","line":""},
{"lineNum":" 3432","line":"_LIBCPP_END_NAMESPACE_STD"},
{"lineNum":" 3433","line":""},
{"lineNum":" 3434","line":"_LIBCPP_POP_MACROS"},
{"lineNum":" 3435","line":""},
{"lineNum":" 3436","line":"#endif // _LIBCPP_VECTOR"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 247, "covered" : 84,};
var merged_data = [];
