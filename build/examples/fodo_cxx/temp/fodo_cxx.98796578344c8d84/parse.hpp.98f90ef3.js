var data = {lines:[
{"lineNum":"    1","line":"/*============================================================================="},
{"lineNum":"    2","line":"    Copyright (c) 2001-2011 Joel de Guzman"},
{"lineNum":"    3","line":"    Copyright (c) 2001-2011 Hartmut Kaiser"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"    Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    6","line":"    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    7","line":"=============================================================================*/"},
{"lineNum":"    8","line":"#if !defined(BOOST_SPIRIT_PARSE_APRIL_16_2006_0442PM)"},
{"lineNum":"    9","line":"#define BOOST_SPIRIT_PARSE_APRIL_16_2006_0442PM"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"#if defined(_MSC_VER)"},
{"lineNum":"   12","line":"#pragma once"},
{"lineNum":"   13","line":"#endif"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"#include <boost/spirit/home/support/context.hpp>"},
{"lineNum":"   16","line":"#include <boost/spirit/home/support/nonterminal/locals.hpp>"},
{"lineNum":"   17","line":"#include <boost/spirit/home/qi/detail/parse.hpp>"},
{"lineNum":"   18","line":"#include <boost/iterator/iterator_concepts.hpp>"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"namespace boost { namespace spirit { namespace qi"},
{"lineNum":"   21","line":"{"},
{"lineNum":"   22","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   23","line":"    template <typename Iterator, typename Expr>"},
{"lineNum":"   24","line":"    inline bool"},
{"lineNum":"   25","line":"    parse("},
{"lineNum":"   26","line":"        Iterator& first"},
{"lineNum":"   27","line":"      , Iterator last"},
{"lineNum":"   28","line":"      , Expr const& expr)"},
{"lineNum":"   29","line":"    {"},
{"lineNum":"   30","line":"        // Make sure the iterator is at least a readable forward traversal iterator."},
{"lineNum":"   31","line":"        // If you got a compilation error here, then you are using a weaker iterator"},
{"lineNum":"   32","line":"        // while calling this function, you need to supply a readable forward traversal"},
{"lineNum":"   33","line":"        // iterator instead."},
{"lineNum":"   34","line":"        BOOST_CONCEPT_ASSERT((boost_concepts::ReadableIteratorConcept<Iterator>));"},
{"lineNum":"   35","line":"        BOOST_CONCEPT_ASSERT((boost_concepts::ForwardTraversalConcept<Iterator>));"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"        return detail::parse_impl<Expr>::call(first, last, expr);"},
{"lineNum":"   38","line":"    }"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"    template <typename Iterator, typename Expr>"},
{"lineNum":"   41","line":"    inline bool"},
{"lineNum":"   42","line":"    parse("},
{"lineNum":"   43","line":"        Iterator const& first_"},
{"lineNum":"   44","line":"      , Iterator last"},
{"lineNum":"   45","line":"      , Expr const& expr)"},
{"lineNum":"   46","line":"    {"},
{"lineNum":"   47","line":"        Iterator first = first_;"},
{"lineNum":"   48","line":"        return qi::parse(first, last, expr);"},
{"lineNum":"   49","line":"    }"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   52","line":"    namespace detail"},
{"lineNum":"   53","line":"    {"},
{"lineNum":"   54","line":"        template <typename T>"},
{"lineNum":"   55","line":"        struct make_context"},
{"lineNum":"   56","line":"        {"},
{"lineNum":"   57","line":"            typedef context<fusion::cons<T&>, locals<> > type;"},
{"lineNum":"   58","line":"        };"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"        template <>"},
{"lineNum":"   61","line":"        struct make_context<unused_type>"},
{"lineNum":"   62","line":"        {"},
{"lineNum":"   63","line":"            typedef unused_type type;"},
{"lineNum":"   64","line":"        };"},
{"lineNum":"   65","line":"    }"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"    template <typename Iterator, typename Expr, typename Attr>"},
{"lineNum":"   68","line":"    inline bool"},
{"lineNum":"   69","line":"    parse("},
{"lineNum":"   70","line":"        Iterator& first"},
{"lineNum":"   71","line":"      , Iterator last"},
{"lineNum":"   72","line":"      , Expr const& expr"},
{"lineNum":"   73","line":"      , Attr& attr)"},
{"lineNum":"   74","line":"    {"},
{"lineNum":"   75","line":"        // Make sure the iterator is at least a readable forward traversal iterator."},
{"lineNum":"   76","line":"        // If you got a compilation error here, then you are using a weaker iterator"},
{"lineNum":"   77","line":"        // while calling this function, you need to supply a readable forward traversal"},
{"lineNum":"   78","line":"        // iterator instead."},
{"lineNum":"   79","line":"        BOOST_CONCEPT_ASSERT((boost_concepts::ReadableIteratorConcept<Iterator>));"},
{"lineNum":"   80","line":"        BOOST_CONCEPT_ASSERT((boost_concepts::ForwardTraversalConcept<Iterator>));"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"        // Report invalid expression error as early as possible."},
{"lineNum":"   83","line":"        // If you got an error_invalid_expression error message here,"},
{"lineNum":"   84","line":"        // then the expression (expr) is not a valid spirit qi expression."},
{"lineNum":"   85","line":"        BOOST_SPIRIT_ASSERT_MATCH(qi::domain, Expr);"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"        typename detail::make_context<Attr>::type context(attr);"},
{"lineNum":"   88","line":"        return compile<qi::domain>(expr).parse(first, last, context, unused, attr);"},
{"lineNum":"   89","line":"    }"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"    template <typename Iterator, typename Expr, typename Attr>"},
{"lineNum":"   92","line":"    inline bool"},
{"lineNum":"   93","line":"    parse("},
{"lineNum":"   94","line":"        Iterator const& first_"},
{"lineNum":"   95","line":"      , Iterator last"},
{"lineNum":"   96","line":"      , Expr const& expr"},
{"lineNum":"   97","line":"      , Attr& attr)"},
{"lineNum":"   98","line":"    {"},
{"lineNum":"   99","line":"        Iterator first = first_;"},
{"lineNum":"  100","line":"        return qi::parse(first, last, expr, attr);"},
{"lineNum":"  101","line":"    }"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  104","line":"    template <typename Iterator, typename Expr, typename Skipper>"},
{"lineNum":"  105","line":"    inline bool"},
{"lineNum":"  106","line":"    phrase_parse("},
{"lineNum":"  107","line":"        Iterator& first"},
{"lineNum":"  108","line":"      , Iterator last"},
{"lineNum":"  109","line":"      , Expr const& expr"},
{"lineNum":"  110","line":"      , Skipper const& skipper"},
{"lineNum":"  111","line":"      , BOOST_SCOPED_ENUM(skip_flag) post_skip = skip_flag::postskip)"},
{"lineNum":"  112","line":"    {"},
{"lineNum":"  113","line":"        // Make sure the iterator is at least a readable forward traversal iterator."},
{"lineNum":"  114","line":"        // If you got a compilation error here, then you are using a weaker iterator"},
{"lineNum":"  115","line":"        // while calling this function, you need to supply a readable forward traversal"},
{"lineNum":"  116","line":"        // iterator instead."},
{"lineNum":"  117","line":"        BOOST_CONCEPT_ASSERT((boost_concepts::ReadableIteratorConcept<Iterator>));"},
{"lineNum":"  118","line":"        BOOST_CONCEPT_ASSERT((boost_concepts::ForwardTraversalConcept<Iterator>));"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"        return detail::phrase_parse_impl<Expr>::call("},
{"lineNum":"  121","line":"            first, last, expr, skipper, post_skip);"},
{"lineNum":"  122","line":"    }"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"    template <typename Iterator, typename Expr, typename Skipper>"},
{"lineNum":"  125","line":"    inline bool"},
{"lineNum":"  126","line":"    phrase_parse("},
{"lineNum":"  127","line":"        Iterator const& first_"},
{"lineNum":"  128","line":"      , Iterator last"},
{"lineNum":"  129","line":"      , Expr const& expr"},
{"lineNum":"  130","line":"      , Skipper const& skipper"},
{"lineNum":"  131","line":"      , BOOST_SCOPED_ENUM(skip_flag) post_skip = skip_flag::postskip)"},
{"lineNum":"  132","line":"    {"},
{"lineNum":"  133","line":"        Iterator first = first_;"},
{"lineNum":"  134","line":"        return qi::phrase_parse(first, last, expr, skipper, post_skip);"},
{"lineNum":"  135","line":"    }"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  138","line":"    template <typename Iterator, typename Expr, typename Skipper, typename Attr>"},
{"lineNum":"  139","line":"    inline bool"},
{"lineNum":"  140","line":"    phrase_parse("},
{"lineNum":"  141","line":"        Iterator& first"},
{"lineNum":"  142","line":"      , Iterator last"},
{"lineNum":"  143","line":"      , Expr const& expr"},
{"lineNum":"  144","line":"      , Skipper const& skipper"},
{"lineNum":"  145","line":"      , BOOST_SCOPED_ENUM(skip_flag) post_skip"},
{"lineNum":"  146","line":"      , Attr& attr)"},
{"lineNum":"  147","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  148","line":"        // Make sure the iterator is at least a readable forward traversal iterator."},
{"lineNum":"  149","line":"        // If you got a compilation error here, then you are using a weaker iterator"},
{"lineNum":"  150","line":"        // while calling this function, you need to supply a readable forward traversal"},
{"lineNum":"  151","line":"        // iterator instead."},
{"lineNum":"  152","line":"        BOOST_CONCEPT_ASSERT((boost_concepts::ReadableIteratorConcept<Iterator>));"},
{"lineNum":"  153","line":"        BOOST_CONCEPT_ASSERT((boost_concepts::ForwardTraversalConcept<Iterator>));"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"        // Report invalid expression error as early as possible."},
{"lineNum":"  156","line":"        // If you got an error_invalid_expression error message here,"},
{"lineNum":"  157","line":"        // then either the expression (expr) or skipper is not a valid"},
{"lineNum":"  158","line":"        // spirit qi expression."},
{"lineNum":"  159","line":"        BOOST_SPIRIT_ASSERT_MATCH(qi::domain, Expr);"},
{"lineNum":"  160","line":"        BOOST_SPIRIT_ASSERT_MATCH(qi::domain, Skipper);"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"        typedef"},
{"lineNum":"  163","line":"            typename result_of::compile<qi::domain, Skipper>::type"},
{"lineNum":"  164","line":"        skipper_type;"},
{"lineNum":"  165","line":"        skipper_type const skipper_ = compile<qi::domain>(skipper);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"        typename detail::make_context<Attr>::type context(attr);"},
{"lineNum":"  168","line":"        if (!compile<qi::domain>(expr).parse(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  169","line":"                first, last, context, skipper_, attr))"},
{"lineNum":"  170","line":"            return false;"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"        if (post_skip == skip_flag::postskip)"},
{"lineNum":"  173","line":"            qi::skip_over(first, last, skipper_);"},
{"lineNum":"  174","line":"        return true;"},
{"lineNum":"  175","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"    template <typename Iterator, typename Expr, typename Skipper, typename Attr>"},
{"lineNum":"  178","line":"    inline bool"},
{"lineNum":"  179","line":"    phrase_parse("},
{"lineNum":"  180","line":"        Iterator const& first_"},
{"lineNum":"  181","line":"      , Iterator last"},
{"lineNum":"  182","line":"      , Expr const& expr"},
{"lineNum":"  183","line":"      , Skipper const& skipper"},
{"lineNum":"  184","line":"      , BOOST_SCOPED_ENUM(skip_flag) post_skip"},
{"lineNum":"  185","line":"      , Attr& attr)"},
{"lineNum":"  186","line":"    {"},
{"lineNum":"  187","line":"        Iterator first = first_;"},
{"lineNum":"  188","line":"        return qi::phrase_parse(first, last, expr, skipper, post_skip, attr);"},
{"lineNum":"  189","line":"    }"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  192","line":"    template <typename Iterator, typename Expr, typename Skipper, typename Attr>"},
{"lineNum":"  193","line":"    inline bool"},
{"lineNum":"  194","line":"    phrase_parse("},
{"lineNum":"  195","line":"        Iterator& first"},
{"lineNum":"  196","line":"      , Iterator last"},
{"lineNum":"  197","line":"      , Expr const& expr"},
{"lineNum":"  198","line":"      , Skipper const& skipper"},
{"lineNum":"  199","line":"      , Attr& attr)"},
{"lineNum":"  200","line":"    {"},
{"lineNum":"  201","line":"        return qi::phrase_parse(first, last, expr, skipper, skip_flag::postskip, attr);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  202","line":"    }"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"    template <typename Iterator, typename Expr, typename Skipper, typename Attr>"},
{"lineNum":"  205","line":"    inline bool"},
{"lineNum":"  206","line":"    phrase_parse("},
{"lineNum":"  207","line":"        Iterator const& first_"},
{"lineNum":"  208","line":"      , Iterator last"},
{"lineNum":"  209","line":"      , Expr const& expr"},
{"lineNum":"  210","line":"      , Skipper const& skipper"},
{"lineNum":"  211","line":"      , Attr& attr)"},
{"lineNum":"  212","line":"    {"},
{"lineNum":"  213","line":"        Iterator first = first_;"},
{"lineNum":"  214","line":"        return qi::phrase_parse(first, last, expr, skipper, skip_flag::postskip, attr);"},
{"lineNum":"  215","line":"    }"},
{"lineNum":"  216","line":"}}}"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"#endif"},
{"lineNum":"  219","line":""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 5, "covered" : 0,};
var merged_data = [];
