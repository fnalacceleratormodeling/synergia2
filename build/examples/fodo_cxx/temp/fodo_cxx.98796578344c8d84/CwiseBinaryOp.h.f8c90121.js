var data = {lines:[
{"lineNum":"    1","line":"// This file is part of Eigen, a lightweight C++ template library"},
{"lineNum":"    2","line":"// for linear algebra."},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Copyright (C) 2008-2014 Gael Guennebaud <gael.guennebaud@inria.fr>"},
{"lineNum":"    5","line":"// Copyright (C) 2006-2008 Benoit Jacob <jacob.benoit.1@gmail.com>"},
{"lineNum":"    6","line":"//"},
{"lineNum":"    7","line":"// This Source Code Form is subject to the terms of the Mozilla"},
{"lineNum":"    8","line":"// Public License v. 2.0. If a copy of the MPL was not distributed"},
{"lineNum":"    9","line":"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/."},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"#ifndef EIGEN_CWISE_BINARY_OP_H"},
{"lineNum":"   12","line":"#define EIGEN_CWISE_BINARY_OP_H"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"#include \"./InternalHeaderCheck.h\""},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"namespace Eigen {"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"namespace internal {"},
{"lineNum":"   19","line":"template<typename BinaryOp, typename Lhs, typename Rhs>"},
{"lineNum":"   20","line":"struct traits<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >"},
{"lineNum":"   21","line":"{"},
{"lineNum":"   22","line":"  // we must not inherit from traits<Lhs> since it has"},
{"lineNum":"   23","line":"  // the potential to cause problems with MSVC"},
{"lineNum":"   24","line":"  typedef typename remove_all<Lhs>::type Ancestor;"},
{"lineNum":"   25","line":"  typedef typename traits<Ancestor>::XprKind XprKind;"},
{"lineNum":"   26","line":"  enum {"},
{"lineNum":"   27","line":"    RowsAtCompileTime = traits<Ancestor>::RowsAtCompileTime,"},
{"lineNum":"   28","line":"    ColsAtCompileTime = traits<Ancestor>::ColsAtCompileTime,"},
{"lineNum":"   29","line":"    MaxRowsAtCompileTime = traits<Ancestor>::MaxRowsAtCompileTime,"},
{"lineNum":"   30","line":"    MaxColsAtCompileTime = traits<Ancestor>::MaxColsAtCompileTime"},
{"lineNum":"   31","line":"  };"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"  // even though we require Lhs and Rhs to have the same scalar type (see CwiseBinaryOp constructor),"},
{"lineNum":"   34","line":"  // we still want to handle the case when the result type is different."},
{"lineNum":"   35","line":"  typedef typename result_of<"},
{"lineNum":"   36","line":"                     BinaryOp("},
{"lineNum":"   37","line":"                       const typename Lhs::Scalar&,"},
{"lineNum":"   38","line":"                       const typename Rhs::Scalar&"},
{"lineNum":"   39","line":"                     )"},
{"lineNum":"   40","line":"                   >::type Scalar;"},
{"lineNum":"   41","line":"  typedef typename cwise_promote_storage_type<typename traits<Lhs>::StorageKind,"},
{"lineNum":"   42","line":"                                              typename traits<Rhs>::StorageKind,"},
{"lineNum":"   43","line":"                                              BinaryOp>::ret StorageKind;"},
{"lineNum":"   44","line":"  typedef typename promote_index_type<typename traits<Lhs>::StorageIndex,"},
{"lineNum":"   45","line":"                                      typename traits<Rhs>::StorageIndex>::type StorageIndex;"},
{"lineNum":"   46","line":"  typedef typename Lhs::Nested LhsNested;"},
{"lineNum":"   47","line":"  typedef typename Rhs::Nested RhsNested;"},
{"lineNum":"   48","line":"  typedef typename remove_reference<LhsNested>::type _LhsNested;"},
{"lineNum":"   49","line":"  typedef typename remove_reference<RhsNested>::type _RhsNested;"},
{"lineNum":"   50","line":"  enum {"},
{"lineNum":"   51","line":"    Flags = cwise_promote_storage_order<typename traits<Lhs>::StorageKind,typename traits<Rhs>::StorageKind,_LhsNested::Flags & RowMajorBit,_RhsNested::Flags & RowMajorBit>::value"},
{"lineNum":"   52","line":"  };"},
{"lineNum":"   53","line":"};"},
{"lineNum":"   54","line":"} // end namespace internal"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"template<typename BinaryOp, typename Lhs, typename Rhs, typename StorageKind>"},
{"lineNum":"   57","line":"class CwiseBinaryOpImpl;"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"/** \\class CwiseBinaryOp"},
{"lineNum":"   60","line":"  * \\ingroup Core_Module"},
{"lineNum":"   61","line":"  *"},
{"lineNum":"   62","line":"  * \\brief Generic expression where a coefficient-wise binary operator is applied to two expressions"},
{"lineNum":"   63","line":"  *"},
{"lineNum":"   64","line":"  * \\tparam BinaryOp template functor implementing the operator"},
{"lineNum":"   65","line":"  * \\tparam LhsType the type of the left-hand side"},
{"lineNum":"   66","line":"  * \\tparam RhsType the type of the right-hand side"},
{"lineNum":"   67","line":"  *"},
{"lineNum":"   68","line":"  * This class represents an expression  where a coefficient-wise binary operator is applied to two expressions."},
{"lineNum":"   69","line":"  * It is the return type of binary operators, by which we mean only those binary operators where"},
{"lineNum":"   70","line":"  * both the left-hand side and the right-hand side are Eigen expressions."},
{"lineNum":"   71","line":"  * For example, the return type of matrix1+matrix2 is a CwiseBinaryOp."},
{"lineNum":"   72","line":"  *"},
{"lineNum":"   73","line":"  * Most of the time, this is the only way that it is used, so you typically don\'t have to name"},
{"lineNum":"   74","line":"  * CwiseBinaryOp types explicitly."},
{"lineNum":"   75","line":"  *"},
{"lineNum":"   76","line":"  * \\sa MatrixBase::binaryExpr(const MatrixBase<OtherDerived> &,const CustomBinaryOp &) const, class CwiseUnaryOp, class CwiseNullaryOp"},
{"lineNum":"   77","line":"  */"},
{"lineNum":"   78","line":"template<typename BinaryOp, typename LhsType, typename RhsType>"},
{"lineNum":"   79","line":"class CwiseBinaryOp :"},
{"lineNum":"   80","line":"  public CwiseBinaryOpImpl<"},
{"lineNum":"   81","line":"          BinaryOp, LhsType, RhsType,"},
{"lineNum":"   82","line":"          typename internal::cwise_promote_storage_type<typename internal::traits<LhsType>::StorageKind,"},
{"lineNum":"   83","line":"                                                        typename internal::traits<RhsType>::StorageKind,"},
{"lineNum":"   84","line":"                                                        BinaryOp>::ret>,"},
{"lineNum":"   85","line":"  internal::no_assignment_operator"},
{"lineNum":"   86","line":"{"},
{"lineNum":"   87","line":"  public:"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"    typedef typename internal::remove_all<BinaryOp>::type Functor;"},
{"lineNum":"   90","line":"    typedef typename internal::remove_all<LhsType>::type Lhs;"},
{"lineNum":"   91","line":"    typedef typename internal::remove_all<RhsType>::type Rhs;"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"    typedef typename CwiseBinaryOpImpl<"},
{"lineNum":"   94","line":"        BinaryOp, LhsType, RhsType,"},
{"lineNum":"   95","line":"        typename internal::cwise_promote_storage_type<typename internal::traits<LhsType>::StorageKind,"},
{"lineNum":"   96","line":"                                                      typename internal::traits<Rhs>::StorageKind,"},
{"lineNum":"   97","line":"                                                      BinaryOp>::ret>::Base Base;"},
{"lineNum":"   98","line":"    EIGEN_GENERIC_PUBLIC_INTERFACE(CwiseBinaryOp)"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"    EIGEN_CHECK_BINARY_COMPATIBILIY(BinaryOp,typename Lhs::Scalar,typename Rhs::Scalar)"},
{"lineNum":"  101","line":"    EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(Lhs, Rhs)"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"    typedef typename internal::ref_selector<LhsType>::type LhsNested;"},
{"lineNum":"  104","line":"    typedef typename internal::ref_selector<RhsType>::type RhsNested;"},
{"lineNum":"  105","line":"    typedef typename internal::remove_reference<LhsNested>::type _LhsNested;"},
{"lineNum":"  106","line":"    typedef typename internal::remove_reference<RhsNested>::type _RhsNested;"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"#if EIGEN_COMP_MSVC && EIGEN_HAS_CXX11"},
{"lineNum":"  109","line":"    //Required for Visual Studio or the Copy constructor will probably not get inlined!"},
{"lineNum":"  110","line":"    EIGEN_STRONG_INLINE"},
{"lineNum":"  111","line":"    CwiseBinaryOp(const CwiseBinaryOp<BinaryOp,LhsType,RhsType>&) = default;"},
{"lineNum":"  112","line":"#endif"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  115","line":"    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())"},
{"lineNum":"  116","line":"      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)","class":"lineNoCov","hits":"0","possible_hits":"17",},
{"lineNum":"  117","line":"    {"},
{"lineNum":"  118","line":"      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());"},
{"lineNum":"  119","line":"    }"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR"},
{"lineNum":"  122","line":"    Index rows() const EIGEN_NOEXCEPT {"},
{"lineNum":"  123","line":"      // return the fixed size type if available to enable compile time optimizations"},
{"lineNum":"  124","line":"      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  125","line":"    }"},
{"lineNum":"  126","line":"    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR"},
{"lineNum":"  127","line":"    Index cols() const EIGEN_NOEXCEPT {"},
{"lineNum":"  128","line":"      // return the fixed size type if available to enable compile time optimizations"},
{"lineNum":"  129","line":"      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();"},
{"lineNum":"  130","line":"    }"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"    /** \\returns the left hand side nested expression */"},
{"lineNum":"  133","line":"    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  134","line":"    const _LhsNested& lhs() const { return m_lhs; }","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  135","line":"    /** \\returns the right hand side nested expression */"},
{"lineNum":"  136","line":"    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  137","line":"    const _RhsNested& rhs() const { return m_rhs; }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  138","line":"    /** \\returns the functor representing the binary operation */"},
{"lineNum":"  139","line":"    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE"},
{"lineNum":"  140","line":"    const BinaryOp& functor() const { return m_functor; }"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"  protected:"},
{"lineNum":"  143","line":"    LhsNested m_lhs;"},
{"lineNum":"  144","line":"    RhsNested m_rhs;"},
{"lineNum":"  145","line":"    const BinaryOp m_functor;"},
{"lineNum":"  146","line":"};"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"// Generic API dispatcher"},
{"lineNum":"  149","line":"template<typename BinaryOp, typename Lhs, typename Rhs, typename StorageKind>"},
{"lineNum":"  150","line":"class CwiseBinaryOpImpl"},
{"lineNum":"  151","line":"  : public internal::generic_xpr_base<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >::type"},
{"lineNum":"  152","line":"{"},
{"lineNum":"  153","line":"public:"},
{"lineNum":"  154","line":"  typedef typename internal::generic_xpr_base<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >::type Base;"},
{"lineNum":"  155","line":"};"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"/** replaces \\c *this by \\c *this - \\a other."},
{"lineNum":"  158","line":"  *"},
{"lineNum":"  159","line":"  * \\returns a reference to \\c *this"},
{"lineNum":"  160","line":"  */"},
{"lineNum":"  161","line":"template<typename Derived>"},
{"lineNum":"  162","line":"template<typename OtherDerived>"},
{"lineNum":"  163","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Derived &"},
{"lineNum":"  164","line":"MatrixBase<Derived>::operator-=(const MatrixBase<OtherDerived> &other)"},
{"lineNum":"  165","line":"{"},
{"lineNum":"  166","line":"  call_assignment(derived(), other.derived(), internal::sub_assign_op<Scalar,typename OtherDerived::Scalar>());"},
{"lineNum":"  167","line":"  return derived();"},
{"lineNum":"  168","line":"}"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"/** replaces \\c *this by \\c *this + \\a other."},
{"lineNum":"  171","line":"  *"},
{"lineNum":"  172","line":"  * \\returns a reference to \\c *this"},
{"lineNum":"  173","line":"  */"},
{"lineNum":"  174","line":"template<typename Derived>"},
{"lineNum":"  175","line":"template<typename OtherDerived>"},
{"lineNum":"  176","line":"EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Derived &"},
{"lineNum":"  177","line":"MatrixBase<Derived>::operator+=(const MatrixBase<OtherDerived>& other)"},
{"lineNum":"  178","line":"{"},
{"lineNum":"  179","line":"  call_assignment(derived(), other.derived(), internal::add_assign_op<Scalar,typename OtherDerived::Scalar>());"},
{"lineNum":"  180","line":"  return derived();"},
{"lineNum":"  181","line":"}"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"} // end namespace Eigen"},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"#endif // EIGEN_CWISE_BINARY_OP_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 4, "covered" : 0,};
var merged_data = [];
