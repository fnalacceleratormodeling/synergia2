var data = {lines:[
{"lineNum":"    1","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"    2","line":"/// \\file default.hpp"},
{"lineNum":"    3","line":"/// Contains definition of the _default transform, which gives operators their"},
{"lineNum":"    4","line":"/// usual C++ meanings and uses Boost.Typeof to deduce return types."},
{"lineNum":"    5","line":"//"},
{"lineNum":"    6","line":"//  Copyright 2008 Eric Niebler. Distributed under the Boost"},
{"lineNum":"    7","line":"//  Software License, Version 1.0. (See accompanying file"},
{"lineNum":"    8","line":"//  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef BOOST_PROTO_TRANSFORM_DEFAULT_HPP_EAN_04_04_2008"},
{"lineNum":"   11","line":"#define BOOST_PROTO_TRANSFORM_DEFAULT_HPP_EAN_04_04_2008"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"#include <boost/preprocessor/iteration/iterate.hpp>"},
{"lineNum":"   14","line":"#include <boost/preprocessor/repetition/repeat.hpp>"},
{"lineNum":"   15","line":"#include <boost/preprocessor/arithmetic/add.hpp>"},
{"lineNum":"   16","line":"#include <boost/preprocessor/arithmetic/sub.hpp>"},
{"lineNum":"   17","line":"#include <boost/preprocessor/repetition/enum.hpp>"},
{"lineNum":"   18","line":"#include <boost/preprocessor/repetition/enum_shifted.hpp>"},
{"lineNum":"   19","line":"#include <boost/preprocessor/repetition/enum_shifted_params.hpp>"},
{"lineNum":"   20","line":"#include <boost/ref.hpp>"},
{"lineNum":"   21","line":"#include <boost/get_pointer.hpp>"},
{"lineNum":"   22","line":"#include <boost/utility/enable_if.hpp>"},
{"lineNum":"   23","line":"#include <boost/type_traits/is_member_pointer.hpp>"},
{"lineNum":"   24","line":"#include <boost/type_traits/is_member_object_pointer.hpp>"},
{"lineNum":"   25","line":"#include <boost/type_traits/is_member_function_pointer.hpp>"},
{"lineNum":"   26","line":"#include <boost/proto/proto_fwd.hpp>"},
{"lineNum":"   27","line":"#include <boost/proto/traits.hpp>"},
{"lineNum":"   28","line":"#include <boost/proto/transform/impl.hpp>"},
{"lineNum":"   29","line":"#include <boost/proto/transform/arg.hpp>"},
{"lineNum":"   30","line":"#include <boost/proto/detail/decltype.hpp>"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"namespace boost { namespace proto"},
{"lineNum":"   33","line":"{"},
{"lineNum":"   34","line":"    namespace detail"},
{"lineNum":"   35","line":"    {"},
{"lineNum":"   36","line":"        template<typename Grammar, typename Tag>"},
{"lineNum":"   37","line":"        struct default_case"},
{"lineNum":"   38","line":"          : not_<_>"},
{"lineNum":"   39","line":"        {};"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"        template<typename Grammar>"},
{"lineNum":"   42","line":"        struct default_case<Grammar, tag::terminal>"},
{"lineNum":"   43","line":"          : when<terminal<_>, _value>"},
{"lineNum":"   44","line":"        {};"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"        template<typename Grammar>"},
{"lineNum":"   47","line":"        struct default_cases"},
{"lineNum":"   48","line":"        {"},
{"lineNum":"   49","line":"            template<typename Tag>"},
{"lineNum":"   50","line":"            struct case_"},
{"lineNum":"   51","line":"              : default_case<Grammar, Tag>"},
{"lineNum":"   52","line":"            {};"},
{"lineNum":"   53","line":"        };"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"        #define BOOST_PROTO_UNARY_DEFAULT_EVAL(OP, TAG, MAKE)                                       \\"},
{"lineNum":"   56","line":"        template<typename Grammar>                                                                  \\"},
{"lineNum":"   57","line":"        struct BOOST_PP_CAT(default_, TAG)                                                          \\"},
{"lineNum":"   58","line":"          : transform<BOOST_PP_CAT(default_, TAG)<Grammar> >                                        \\"},
{"lineNum":"   59","line":"        {                                                                                           \\"},
{"lineNum":"   60","line":"            template<typename Expr, typename State, typename Data>                                  \\"},
{"lineNum":"   61","line":"            struct impl                                                                             \\"},
{"lineNum":"   62","line":"              : transform_impl<Expr, State, Data>                                                   \\"},
{"lineNum":"   63","line":"            {                                                                                       \\"},
{"lineNum":"   64","line":"            private:                                                                                \\"},
{"lineNum":"   65","line":"                typedef typename result_of::child_c<Expr, 0>::type e0;                              \\"},
{"lineNum":"   66","line":"                typedef typename Grammar::template impl<e0, State, Data>::result_type r0;           \\"},
{"lineNum":"   67","line":"            public:                                                                                 \\"},
{"lineNum":"   68","line":"                BOOST_PROTO_DECLTYPE_(OP proto::detail::MAKE<r0>(), result_type)                    \\"},
{"lineNum":"   69","line":"                result_type operator ()(                                                            \\"},
{"lineNum":"   70","line":"                    typename impl::expr_param e                                                     \\"},
{"lineNum":"   71","line":"                  , typename impl::state_param s                                                    \\"},
{"lineNum":"   72","line":"                  , typename impl::data_param d                                                     \\"},
{"lineNum":"   73","line":"                ) const                                                                             \\"},
{"lineNum":"   74","line":"                {                                                                                   \\"},
{"lineNum":"   75","line":"                    typename Grammar::template impl<e0, State, Data> t0;                            \\"},
{"lineNum":"   76","line":"                    return OP t0(proto::child_c<0>(e), s, d);                                       \\"},
{"lineNum":"   77","line":"                }                                                                                   \\"},
{"lineNum":"   78","line":"            };                                                                                      \\"},
{"lineNum":"   79","line":"        };                                                                                          \\"},
{"lineNum":"   80","line":"                                                                                                    \\"},
{"lineNum":"   81","line":"        template<typename Grammar>                                                                  \\"},
{"lineNum":"   82","line":"        struct default_case<Grammar, tag::TAG>                                                      \\"},
{"lineNum":"   83","line":"          : when<unary_expr<tag::TAG, Grammar>, BOOST_PP_CAT(default_, TAG)<Grammar> >              \\"},
{"lineNum":"   84","line":"        {};                                                                                         \\"},
{"lineNum":"   85","line":"        /**/"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"        #define BOOST_PROTO_BINARY_DEFAULT_EVAL(OP, TAG, LMAKE, RMAKE)                              \\"},
{"lineNum":"   88","line":"        template<typename Grammar>                                                                  \\"},
{"lineNum":"   89","line":"        struct BOOST_PP_CAT(default_, TAG)                                                          \\"},
{"lineNum":"   90","line":"          : transform<BOOST_PP_CAT(default_, TAG)<Grammar> >                                        \\"},
{"lineNum":"   91","line":"        {                                                                                           \\"},
{"lineNum":"   92","line":"            template<typename Expr, typename State, typename Data>                                  \\"},
{"lineNum":"   93","line":"            struct impl                                                                             \\"},
{"lineNum":"   94","line":"              : transform_impl<Expr, State, Data>                                                   \\"},
{"lineNum":"   95","line":"            {                                                                                       \\"},
{"lineNum":"   96","line":"            private:                                                                                \\"},
{"lineNum":"   97","line":"                typedef typename result_of::child_c<Expr, 0>::type e0;                              \\"},
{"lineNum":"   98","line":"                typedef typename result_of::child_c<Expr, 1>::type e1;                              \\"},
{"lineNum":"   99","line":"                typedef typename Grammar::template impl<e0, State, Data>::result_type r0;           \\"},
{"lineNum":"  100","line":"                typedef typename Grammar::template impl<e1, State, Data>::result_type r1;           \\"},
{"lineNum":"  101","line":"            public:                                                                                 \\"},
{"lineNum":"  102","line":"                BOOST_PROTO_DECLTYPE_(                                                              \\"},
{"lineNum":"  103","line":"                    proto::detail::LMAKE<r0>() OP proto::detail::RMAKE<r1>()                        \\"},
{"lineNum":"  104","line":"                  , result_type                                                                     \\"},
{"lineNum":"  105","line":"                )                                                                                   \\"},
{"lineNum":"  106","line":"                result_type operator ()(                                                            \\"},
{"lineNum":"  107","line":"                    typename impl::expr_param e                                                     \\"},
{"lineNum":"  108","line":"                  , typename impl::state_param s                                                    \\"},
{"lineNum":"  109","line":"                  , typename impl::data_param d                                                     \\"},
{"lineNum":"  110","line":"                ) const                                                                             \\"},
{"lineNum":"  111","line":"                {                                                                                   \\"},
{"lineNum":"  112","line":"                    typename Grammar::template impl<e0, State, Data> t0;                            \\"},
{"lineNum":"  113","line":"                    typename Grammar::template impl<e1, State, Data> t1;                            \\"},
{"lineNum":"  114","line":"                    return t0(proto::child_c<0>(e), s, d)                                           \\"},
{"lineNum":"  115","line":"                        OP t1(proto::child_c<1>(e), s, d);                                          \\"},
{"lineNum":"  116","line":"                }                                                                                   \\"},
{"lineNum":"  117","line":"            };                                                                                      \\"},
{"lineNum":"  118","line":"        };                                                                                          \\"},
{"lineNum":"  119","line":"                                                                                                    \\"},
{"lineNum":"  120","line":"        template<typename Grammar>                                                                  \\"},
{"lineNum":"  121","line":"        struct default_case<Grammar, tag::TAG>                                                      \\"},
{"lineNum":"  122","line":"          : when<binary_expr<tag::TAG, Grammar, Grammar>, BOOST_PP_CAT(default_, TAG)<Grammar> >    \\"},
{"lineNum":"  123","line":"        {};                                                                                         \\"},
{"lineNum":"  124","line":"        /**/"},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"        BOOST_PROTO_UNARY_DEFAULT_EVAL(+, unary_plus, make)"},
{"lineNum":"  127","line":"        BOOST_PROTO_UNARY_DEFAULT_EVAL(-, negate, make)"},
{"lineNum":"  128","line":"        BOOST_PROTO_UNARY_DEFAULT_EVAL(*, dereference, make)"},
{"lineNum":"  129","line":"        BOOST_PROTO_UNARY_DEFAULT_EVAL(~, complement, make)"},
{"lineNum":"  130","line":"        BOOST_PROTO_UNARY_DEFAULT_EVAL(&, address_of, make)"},
{"lineNum":"  131","line":"        BOOST_PROTO_UNARY_DEFAULT_EVAL(!, logical_not, make)"},
{"lineNum":"  132","line":"        BOOST_PROTO_UNARY_DEFAULT_EVAL(++, pre_inc, make_mutable)"},
{"lineNum":"  133","line":"        BOOST_PROTO_UNARY_DEFAULT_EVAL(--, pre_dec, make_mutable)"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"        BOOST_PROTO_BINARY_DEFAULT_EVAL(<<, shift_left, make_mutable, make)"},
{"lineNum":"  136","line":"        BOOST_PROTO_BINARY_DEFAULT_EVAL(>>, shift_right, make_mutable, make_mutable)"},
{"lineNum":"  137","line":"        BOOST_PROTO_BINARY_DEFAULT_EVAL(*, multiplies, make, make)"},
{"lineNum":"  138","line":"        BOOST_PROTO_BINARY_DEFAULT_EVAL(/, divides, make, make)"},
{"lineNum":"  139","line":"        BOOST_PROTO_BINARY_DEFAULT_EVAL(%, modulus, make, make)"},
{"lineNum":"  140","line":"        BOOST_PROTO_BINARY_DEFAULT_EVAL(+, plus, make, make)"},
{"lineNum":"  141","line":"        BOOST_PROTO_BINARY_DEFAULT_EVAL(-, minus, make, make)"},
{"lineNum":"  142","line":"        BOOST_PROTO_BINARY_DEFAULT_EVAL(<, less, make, make)"},
{"lineNum":"  143","line":"        BOOST_PROTO_BINARY_DEFAULT_EVAL(>, greater, make, make)"},
{"lineNum":"  144","line":"        BOOST_PROTO_BINARY_DEFAULT_EVAL(<=, less_equal, make, make)"},
{"lineNum":"  145","line":"        BOOST_PROTO_BINARY_DEFAULT_EVAL(>=, greater_equal, make, make)"},
{"lineNum":"  146","line":"        BOOST_PROTO_BINARY_DEFAULT_EVAL(==, equal_to, make, make)"},
{"lineNum":"  147","line":"        BOOST_PROTO_BINARY_DEFAULT_EVAL(!=, not_equal_to, make, make)"},
{"lineNum":"  148","line":"        BOOST_PROTO_BINARY_DEFAULT_EVAL(||, logical_or, make, make)"},
{"lineNum":"  149","line":"        BOOST_PROTO_BINARY_DEFAULT_EVAL(&&, logical_and, make, make)"},
{"lineNum":"  150","line":"        BOOST_PROTO_BINARY_DEFAULT_EVAL(&, bitwise_and, make, make)"},
{"lineNum":"  151","line":"        BOOST_PROTO_BINARY_DEFAULT_EVAL(|, bitwise_or, make, make)"},
{"lineNum":"  152","line":"        BOOST_PROTO_BINARY_DEFAULT_EVAL(^, bitwise_xor, make, make)"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"        BOOST_PROTO_BINARY_DEFAULT_EVAL(=, assign, make_mutable, make)","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  155","line":"        BOOST_PROTO_BINARY_DEFAULT_EVAL(<<=, shift_left_assign, make_mutable, make)"},
{"lineNum":"  156","line":"        BOOST_PROTO_BINARY_DEFAULT_EVAL(>>=, shift_right_assign, make_mutable, make)"},
{"lineNum":"  157","line":"        BOOST_PROTO_BINARY_DEFAULT_EVAL(*=, multiplies_assign, make_mutable, make)"},
{"lineNum":"  158","line":"        BOOST_PROTO_BINARY_DEFAULT_EVAL(/=, divides_assign, make_mutable, make)"},
{"lineNum":"  159","line":"        BOOST_PROTO_BINARY_DEFAULT_EVAL(%=, modulus_assign, make_mutable, make)"},
{"lineNum":"  160","line":"        BOOST_PROTO_BINARY_DEFAULT_EVAL(+=, plus_assign, make_mutable, make)"},
{"lineNum":"  161","line":"        BOOST_PROTO_BINARY_DEFAULT_EVAL(-=, minus_assign, make_mutable, make)"},
{"lineNum":"  162","line":"        BOOST_PROTO_BINARY_DEFAULT_EVAL(&=, bitwise_and_assign, make_mutable, make)"},
{"lineNum":"  163","line":"        BOOST_PROTO_BINARY_DEFAULT_EVAL(|=, bitwise_or_assign, make_mutable, make)"},
{"lineNum":"  164","line":"        BOOST_PROTO_BINARY_DEFAULT_EVAL(^=, bitwise_xor_assign, make_mutable, make)"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"        #undef BOOST_PROTO_UNARY_DEFAULT_EVAL"},
{"lineNum":"  167","line":"        #undef BOOST_PROTO_BINARY_DEFAULT_EVAL"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"        /// INTERNAL ONLY"},
{"lineNum":"  170","line":"        template<typename Grammar, typename Expr, typename State, typename Data>"},
{"lineNum":"  171","line":"        struct is_member_function_invocation"},
{"lineNum":"  172","line":"          : is_member_function_pointer<"},
{"lineNum":"  173","line":"                typename uncvref<"},
{"lineNum":"  174","line":"                    typename Grammar::template impl<"},
{"lineNum":"  175","line":"                        typename result_of::child_c<Expr, 1>::type"},
{"lineNum":"  176","line":"                      , State"},
{"lineNum":"  177","line":"                      , Data"},
{"lineNum":"  178","line":"                    >::result_type"},
{"lineNum":"  179","line":"                >::type"},
{"lineNum":"  180","line":"            >"},
{"lineNum":"  181","line":"        {};"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"        /// INTERNAL ONLY"},
{"lineNum":"  184","line":"        template<typename Grammar, typename Expr, typename State, typename Data, bool IsMemFunCall>"},
{"lineNum":"  185","line":"        struct default_mem_ptr_impl"},
{"lineNum":"  186","line":"          : transform_impl<Expr, State, Data>"},
{"lineNum":"  187","line":"        {"},
{"lineNum":"  188","line":"        private:"},
{"lineNum":"  189","line":"            typedef typename result_of::child_c<Expr, 0>::type e0;"},
{"lineNum":"  190","line":"            typedef typename result_of::child_c<Expr, 1>::type e1;"},
{"lineNum":"  191","line":"            typedef typename Grammar::template impl<e0, State, Data>::result_type r0;"},
{"lineNum":"  192","line":"            typedef typename Grammar::template impl<e1, State, Data>::result_type r1;"},
{"lineNum":"  193","line":"        public:"},
{"lineNum":"  194","line":"            typedef typename detail::mem_ptr_fun<r0, r1>::result_type result_type;"},
{"lineNum":"  195","line":"            result_type operator ()("},
{"lineNum":"  196","line":"                typename default_mem_ptr_impl::expr_param e"},
{"lineNum":"  197","line":"              , typename default_mem_ptr_impl::state_param s"},
{"lineNum":"  198","line":"              , typename default_mem_ptr_impl::data_param d"},
{"lineNum":"  199","line":"            ) const"},
{"lineNum":"  200","line":"            {"},
{"lineNum":"  201","line":"                typename Grammar::template impl<e0, State, Data> t0;"},
{"lineNum":"  202","line":"                typename Grammar::template impl<e1, State, Data> t1;"},
{"lineNum":"  203","line":"                return detail::mem_ptr_fun<r0, r1>()("},
{"lineNum":"  204","line":"                    t0(proto::child_c<0>(e), s, d)"},
{"lineNum":"  205","line":"                  , t1(proto::child_c<1>(e), s, d)"},
{"lineNum":"  206","line":"                );"},
{"lineNum":"  207","line":"            }"},
{"lineNum":"  208","line":"        };"},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"        /// INTERNAL ONLY"},
{"lineNum":"  211","line":"        template<typename Grammar, typename Expr, typename State, typename Data>"},
{"lineNum":"  212","line":"        struct default_mem_ptr_impl<Grammar, Expr, State, Data, true>"},
{"lineNum":"  213","line":"          : transform_impl<Expr, State, Data>"},
{"lineNum":"  214","line":"        {"},
{"lineNum":"  215","line":"        private:"},
{"lineNum":"  216","line":"            typedef typename result_of::child_c<Expr, 0>::type e0;"},
{"lineNum":"  217","line":"            typedef typename result_of::child_c<Expr, 1>::type e1;"},
{"lineNum":"  218","line":"            typedef typename Grammar::template impl<e0, State, Data>::result_type r0;"},
{"lineNum":"  219","line":"            typedef typename Grammar::template impl<e1, State, Data>::result_type r1;"},
{"lineNum":"  220","line":"        public:"},
{"lineNum":"  221","line":"            typedef detail::memfun<r0, r1> result_type;"},
{"lineNum":"  222","line":"            result_type const operator ()("},
{"lineNum":"  223","line":"                typename default_mem_ptr_impl::expr_param e"},
{"lineNum":"  224","line":"              , typename default_mem_ptr_impl::state_param s"},
{"lineNum":"  225","line":"              , typename default_mem_ptr_impl::data_param d"},
{"lineNum":"  226","line":"            ) const"},
{"lineNum":"  227","line":"            {"},
{"lineNum":"  228","line":"                typename Grammar::template impl<e0, State, Data> t0;"},
{"lineNum":"  229","line":"                typename Grammar::template impl<e1, State, Data> t1;"},
{"lineNum":"  230","line":"                return detail::memfun<r0, r1>("},
{"lineNum":"  231","line":"                    t0(proto::child_c<0>(e), s, d)"},
{"lineNum":"  232","line":"                  , t1(proto::child_c<1>(e), s, d)"},
{"lineNum":"  233","line":"                );"},
{"lineNum":"  234","line":"            }"},
{"lineNum":"  235","line":"        };"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"        template<typename Grammar>"},
{"lineNum":"  238","line":"        struct default_mem_ptr"},
{"lineNum":"  239","line":"          : transform<default_mem_ptr<Grammar> >"},
{"lineNum":"  240","line":"        {"},
{"lineNum":"  241","line":"            template<typename Expr, typename State, typename Data>"},
{"lineNum":"  242","line":"            struct impl"},
{"lineNum":"  243","line":"              : default_mem_ptr_impl<"},
{"lineNum":"  244","line":"                    Grammar"},
{"lineNum":"  245","line":"                  , Expr"},
{"lineNum":"  246","line":"                  , State"},
{"lineNum":"  247","line":"                  , Data"},
{"lineNum":"  248","line":"                  , is_member_function_invocation<Grammar, Expr, State, Data>::value"},
{"lineNum":"  249","line":"                >"},
{"lineNum":"  250","line":"            {};"},
{"lineNum":"  251","line":"        };"},
{"lineNum":"  252","line":""},
{"lineNum":"  253","line":"        template<typename Grammar>"},
{"lineNum":"  254","line":"        struct default_case<Grammar, tag::mem_ptr>"},
{"lineNum":"  255","line":"          : when<mem_ptr<Grammar, Grammar>, default_mem_ptr<Grammar> >"},
{"lineNum":"  256","line":"        {};"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"        template<typename Grammar>"},
{"lineNum":"  259","line":"        struct default_post_inc"},
{"lineNum":"  260","line":"          : transform<default_post_inc<Grammar> >"},
{"lineNum":"  261","line":"        {"},
{"lineNum":"  262","line":"            template<typename Expr, typename State, typename Data>"},
{"lineNum":"  263","line":"            struct impl"},
{"lineNum":"  264","line":"              : transform_impl<Expr, State, Data>"},
{"lineNum":"  265","line":"            {"},
{"lineNum":"  266","line":"            private:"},
{"lineNum":"  267","line":"                typedef typename result_of::child_c<Expr, 0>::type e0;"},
{"lineNum":"  268","line":"                typedef typename Grammar::template impl<e0, State, Data>::result_type r0;"},
{"lineNum":"  269","line":"            public:"},
{"lineNum":"  270","line":"                BOOST_PROTO_DECLTYPE_(proto::detail::make_mutable<r0>() ++, result_type)"},
{"lineNum":"  271","line":"                result_type operator ()("},
{"lineNum":"  272","line":"                    typename impl::expr_param e"},
{"lineNum":"  273","line":"                  , typename impl::state_param s"},
{"lineNum":"  274","line":"                  , typename impl::data_param d"},
{"lineNum":"  275","line":"                ) const"},
{"lineNum":"  276","line":"                {"},
{"lineNum":"  277","line":"                    typename Grammar::template impl<e0, State, Data> t0;"},
{"lineNum":"  278","line":"                    return t0(proto::child_c<0>(e), s, d) ++;"},
{"lineNum":"  279","line":"                }"},
{"lineNum":"  280","line":"            };"},
{"lineNum":"  281","line":"        };"},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"        template<typename Grammar>"},
{"lineNum":"  284","line":"        struct default_case<Grammar, tag::post_inc>"},
{"lineNum":"  285","line":"          : when<post_inc<Grammar>, default_post_inc<Grammar> >"},
{"lineNum":"  286","line":"        {};"},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"        template<typename Grammar>"},
{"lineNum":"  289","line":"        struct default_post_dec"},
{"lineNum":"  290","line":"          : transform<default_post_dec<Grammar> >"},
{"lineNum":"  291","line":"        {"},
{"lineNum":"  292","line":"            template<typename Expr, typename State, typename Data>"},
{"lineNum":"  293","line":"            struct impl"},
{"lineNum":"  294","line":"              : transform_impl<Expr, State, Data>"},
{"lineNum":"  295","line":"            {"},
{"lineNum":"  296","line":"            private:"},
{"lineNum":"  297","line":"                typedef typename result_of::child_c<Expr, 0>::type e0;"},
{"lineNum":"  298","line":"                typedef typename Grammar::template impl<e0, State, Data>::result_type r0;"},
{"lineNum":"  299","line":"            public:"},
{"lineNum":"  300","line":"                BOOST_PROTO_DECLTYPE_(proto::detail::make_mutable<r0>() --, result_type)"},
{"lineNum":"  301","line":"                result_type operator ()("},
{"lineNum":"  302","line":"                    typename impl::expr_param e"},
{"lineNum":"  303","line":"                  , typename impl::state_param s"},
{"lineNum":"  304","line":"                  , typename impl::data_param d"},
{"lineNum":"  305","line":"                ) const"},
{"lineNum":"  306","line":"                {"},
{"lineNum":"  307","line":"                    typename Grammar::template impl<e0, State, Data> t0;"},
{"lineNum":"  308","line":"                    return t0(proto::child_c<0>(e), s, d) --;"},
{"lineNum":"  309","line":"                }"},
{"lineNum":"  310","line":"            };"},
{"lineNum":"  311","line":"        };"},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":"        template<typename Grammar>"},
{"lineNum":"  314","line":"        struct default_case<Grammar, tag::post_dec>"},
{"lineNum":"  315","line":"          : when<post_dec<Grammar>, default_post_dec<Grammar> >"},
{"lineNum":"  316","line":"        {};"},
{"lineNum":"  317","line":""},
{"lineNum":"  318","line":"        template<typename Grammar>"},
{"lineNum":"  319","line":"        struct default_subscript"},
{"lineNum":"  320","line":"          : transform<default_subscript<Grammar> >"},
{"lineNum":"  321","line":"        {"},
{"lineNum":"  322","line":"            template<typename Expr, typename State, typename Data>"},
{"lineNum":"  323","line":"            struct impl"},
{"lineNum":"  324","line":"              : transform_impl<Expr, State, Data>"},
{"lineNum":"  325","line":"            {"},
{"lineNum":"  326","line":"            private:"},
{"lineNum":"  327","line":"                typedef typename result_of::child_c<Expr, 0>::type e0;"},
{"lineNum":"  328","line":"                typedef typename result_of::child_c<Expr, 1>::type e1;"},
{"lineNum":"  329","line":"                typedef typename Grammar::template impl<e0, State, Data>::result_type r0;"},
{"lineNum":"  330","line":"                typedef typename Grammar::template impl<e1, State, Data>::result_type r1;"},
{"lineNum":"  331","line":"            public:"},
{"lineNum":"  332","line":"                BOOST_PROTO_DECLTYPE_("},
{"lineNum":"  333","line":"                    proto::detail::make_subscriptable<r0>() [ proto::detail::make<r1>() ]"},
{"lineNum":"  334","line":"                  , result_type"},
{"lineNum":"  335","line":"                )"},
{"lineNum":"  336","line":"                result_type operator ()("},
{"lineNum":"  337","line":"                    typename impl::expr_param e"},
{"lineNum":"  338","line":"                  , typename impl::state_param s"},
{"lineNum":"  339","line":"                  , typename impl::data_param d"},
{"lineNum":"  340","line":"                ) const"},
{"lineNum":"  341","line":"                {"},
{"lineNum":"  342","line":"                    typename Grammar::template impl<e0, State, Data> t0;"},
{"lineNum":"  343","line":"                    typename Grammar::template impl<e1, State, Data> t1;"},
{"lineNum":"  344","line":"                    return t0(proto::child_c<0>(e), s, d) ["},
{"lineNum":"  345","line":"                            t1(proto::child_c<1>(e), s, d) ];"},
{"lineNum":"  346","line":"                }"},
{"lineNum":"  347","line":"            };"},
{"lineNum":"  348","line":"        };"},
{"lineNum":"  349","line":""},
{"lineNum":"  350","line":"        template<typename Grammar>"},
{"lineNum":"  351","line":"        struct default_case<Grammar, tag::subscript>"},
{"lineNum":"  352","line":"          : when<subscript<Grammar, Grammar>, default_subscript<Grammar> >"},
{"lineNum":"  353","line":"        {};"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"        template<typename Grammar>"},
{"lineNum":"  356","line":"        struct default_if_else_"},
{"lineNum":"  357","line":"        {"},
{"lineNum":"  358","line":"            template<typename Expr, typename State, typename Data>"},
{"lineNum":"  359","line":"            struct impl"},
{"lineNum":"  360","line":"              : transform_impl<Expr, State, Data>"},
{"lineNum":"  361","line":"            {"},
{"lineNum":"  362","line":"            private:"},
{"lineNum":"  363","line":"                typedef typename result_of::child_c<Expr, 0>::type e0;"},
{"lineNum":"  364","line":"                typedef typename result_of::child_c<Expr, 1>::type e1;"},
{"lineNum":"  365","line":"                typedef typename result_of::child_c<Expr, 2>::type e2;"},
{"lineNum":"  366","line":"                typedef typename Grammar::template impl<e0, State, Data>::result_type r0;"},
{"lineNum":"  367","line":"                typedef typename Grammar::template impl<e1, State, Data>::result_type r1;"},
{"lineNum":"  368","line":"                typedef typename Grammar::template impl<e2, State, Data>::result_type r2;"},
{"lineNum":"  369","line":"            public:"},
{"lineNum":"  370","line":"                BOOST_PROTO_DECLTYPE_("},
{"lineNum":"  371","line":"                    proto::detail::make<r0>()"},
{"lineNum":"  372","line":"                  ? proto::detail::make<r1>()"},
{"lineNum":"  373","line":"                  : proto::detail::make<r2>()"},
{"lineNum":"  374","line":"                  , result_type"},
{"lineNum":"  375","line":"                )"},
{"lineNum":"  376","line":"                result_type operator ()("},
{"lineNum":"  377","line":"                    typename impl::expr_param e"},
{"lineNum":"  378","line":"                  , typename impl::state_param s"},
{"lineNum":"  379","line":"                  , typename impl::data_param d"},
{"lineNum":"  380","line":"                ) const"},
{"lineNum":"  381","line":"                {"},
{"lineNum":"  382","line":"                    typename Grammar::template impl<e0, State, Data> t0;"},
{"lineNum":"  383","line":"                    typename Grammar::template impl<e1, State, Data> t1;"},
{"lineNum":"  384","line":"                    typename Grammar::template impl<e2, State, Data> t2;"},
{"lineNum":"  385","line":"                    return t0(proto::child_c<0>(e), s, d)"},
{"lineNum":"  386","line":"                          ? t1(proto::child_c<1>(e), s, d)"},
{"lineNum":"  387","line":"                          : t2(proto::child_c<2>(e), s, d);"},
{"lineNum":"  388","line":"                }"},
{"lineNum":"  389","line":"            };"},
{"lineNum":"  390","line":"        };"},
{"lineNum":"  391","line":""},
{"lineNum":"  392","line":"        template<typename Grammar>"},
{"lineNum":"  393","line":"        struct default_case<Grammar, tag::if_else_>"},
{"lineNum":"  394","line":"          : when<if_else_<Grammar, Grammar, Grammar>, default_if_else_<Grammar> >"},
{"lineNum":"  395","line":"        {};"},
{"lineNum":"  396","line":""},
{"lineNum":"  397","line":"        template<typename Grammar>"},
{"lineNum":"  398","line":"        struct default_comma"},
{"lineNum":"  399","line":"          : transform<default_comma<Grammar> >"},
{"lineNum":"  400","line":"        {"},
{"lineNum":"  401","line":"            template<typename Expr, typename State, typename Data>"},
{"lineNum":"  402","line":"            struct impl"},
{"lineNum":"  403","line":"              : transform_impl<Expr, State, Data>"},
{"lineNum":"  404","line":"            {"},
{"lineNum":"  405","line":"            private:"},
{"lineNum":"  406","line":"                typedef typename result_of::child_c<Expr, 0>::type e0;"},
{"lineNum":"  407","line":"                typedef typename result_of::child_c<Expr, 1>::type e1;"},
{"lineNum":"  408","line":"                typedef typename Grammar::template impl<e0, State, Data>::result_type r0;"},
{"lineNum":"  409","line":"                typedef typename Grammar::template impl<e1, State, Data>::result_type r1;"},
{"lineNum":"  410","line":"            public:"},
{"lineNum":"  411","line":"                typedef typename proto::detail::comma_result<r0, r1>::type result_type;"},
{"lineNum":"  412","line":"                result_type operator ()("},
{"lineNum":"  413","line":"                    typename impl::expr_param e"},
{"lineNum":"  414","line":"                  , typename impl::state_param s"},
{"lineNum":"  415","line":"                  , typename impl::data_param d"},
{"lineNum":"  416","line":"                ) const"},
{"lineNum":"  417","line":"                {"},
{"lineNum":"  418","line":"                    typename Grammar::template impl<e0, State, Data> t0;"},
{"lineNum":"  419","line":"                    typename Grammar::template impl<e1, State, Data> t1;"},
{"lineNum":"  420","line":"                    return t0(proto::child_c<0>(e), s, d)"},
{"lineNum":"  421","line":"                          , t1(proto::child_c<1>(e), s, d);"},
{"lineNum":"  422","line":"                }"},
{"lineNum":"  423","line":"            };"},
{"lineNum":"  424","line":"        };"},
{"lineNum":"  425","line":""},
{"lineNum":"  426","line":"        template<typename Grammar>"},
{"lineNum":"  427","line":"        struct default_case<Grammar, tag::comma>"},
{"lineNum":"  428","line":"          : when<comma<Grammar, Grammar>, default_comma<Grammar> >"},
{"lineNum":"  429","line":"        {};"},
{"lineNum":"  430","line":""},
{"lineNum":"  431","line":"        template<typename Grammar, typename Expr, typename State, typename Data, long Arity>"},
{"lineNum":"  432","line":"        struct default_function_impl;"},
{"lineNum":"  433","line":""},
{"lineNum":"  434","line":"        template<typename Grammar>"},
{"lineNum":"  435","line":"        struct default_function"},
{"lineNum":"  436","line":"          : transform<default_function<Grammar> >"},
{"lineNum":"  437","line":"        {"},
{"lineNum":"  438","line":"            template<typename Expr, typename State, typename Data>"},
{"lineNum":"  439","line":"            struct impl"},
{"lineNum":"  440","line":"              : default_function_impl<"},
{"lineNum":"  441","line":"                    Grammar"},
{"lineNum":"  442","line":"                  , Expr"},
{"lineNum":"  443","line":"                  , State"},
{"lineNum":"  444","line":"                  , Data"},
{"lineNum":"  445","line":"                  , transform_impl<Expr, State, Data>::expr::proto_arity_c"},
{"lineNum":"  446","line":"                >"},
{"lineNum":"  447","line":"            {};"},
{"lineNum":"  448","line":"        };"},
{"lineNum":"  449","line":""},
{"lineNum":"  450","line":"        template<typename Grammar>"},
{"lineNum":"  451","line":"        struct default_case<Grammar, tag::function>"},
{"lineNum":"  452","line":"          : when<function<Grammar, vararg<Grammar> >, default_function<Grammar> >"},
{"lineNum":"  453","line":"        {};"},
{"lineNum":"  454","line":""},
{"lineNum":"  455","line":"        #define BOOST_PROTO_DEFAULT_EVAL_TYPE(Z, N, DATA)                                       \\"},
{"lineNum":"  456","line":"            typedef                                                                             \\"},
{"lineNum":"  457","line":"                typename result_of::child_c<DATA, N>::type                                      \\"},
{"lineNum":"  458","line":"            BOOST_PP_CAT(e, N);                                                                 \\"},
{"lineNum":"  459","line":"                                                                                                \\"},
{"lineNum":"  460","line":"            typedef                                                                             \\"},
{"lineNum":"  461","line":"                typename Grammar::template impl<BOOST_PP_CAT(e, N), State, Data>::result_type   \\"},
{"lineNum":"  462","line":"            BOOST_PP_CAT(r, N);                                                                 \\"},
{"lineNum":"  463","line":"            /**/"},
{"lineNum":"  464","line":""},
{"lineNum":"  465","line":"        #define BOOST_PROTO_DEFAULT_EVAL(Z, N, DATA)                                            \\"},
{"lineNum":"  466","line":"            typename Grammar::template impl<BOOST_PP_CAT(e, N), State, Data>()(                 \\"},
{"lineNum":"  467","line":"                proto::child_c<N>(DATA), s, d                                                   \\"},
{"lineNum":"  468","line":"            )                                                                                   \\"},
{"lineNum":"  469","line":"            /**/"},
{"lineNum":"  470","line":""},
{"lineNum":"  471","line":"        template<typename Grammar, typename Expr, typename State, typename Data>"},
{"lineNum":"  472","line":"        struct default_function_impl<Grammar, Expr, State, Data, 1>"},
{"lineNum":"  473","line":"          : transform_impl<Expr, State, Data>"},
{"lineNum":"  474","line":"        {"},
{"lineNum":"  475","line":"            BOOST_PROTO_DEFAULT_EVAL_TYPE(~, 0, Expr)"},
{"lineNum":"  476","line":""},
{"lineNum":"  477","line":"            typedef"},
{"lineNum":"  478","line":"                typename proto::detail::result_of_fixup<r0>::type"},
{"lineNum":"  479","line":"            function_type;"},
{"lineNum":"  480","line":""},
{"lineNum":"  481","line":"            typedef"},
{"lineNum":"  482","line":"                typename BOOST_PROTO_RESULT_OF<function_type()>::type"},
{"lineNum":"  483","line":"            result_type;"},
{"lineNum":"  484","line":""},
{"lineNum":"  485","line":"            result_type operator ()("},
{"lineNum":"  486","line":"                typename default_function_impl::expr_param e"},
{"lineNum":"  487","line":"              , typename default_function_impl::state_param s"},
{"lineNum":"  488","line":"              , typename default_function_impl::data_param d"},
{"lineNum":"  489","line":"            ) const"},
{"lineNum":"  490","line":"            {"},
{"lineNum":"  491","line":"                return BOOST_PROTO_DEFAULT_EVAL(~, 0, e)();"},
{"lineNum":"  492","line":"            }"},
{"lineNum":"  493","line":"        };"},
{"lineNum":"  494","line":""},
{"lineNum":"  495","line":"        template<typename Grammar, typename Expr, typename State, typename Data>"},
{"lineNum":"  496","line":"        struct default_function_impl<Grammar, Expr, State, Data, 2>"},
{"lineNum":"  497","line":"          : transform_impl<Expr, State, Data>"},
{"lineNum":"  498","line":"        {"},
{"lineNum":"  499","line":"            BOOST_PROTO_DEFAULT_EVAL_TYPE(~, 0, Expr)"},
{"lineNum":"  500","line":"            BOOST_PROTO_DEFAULT_EVAL_TYPE(~, 1, Expr)"},
{"lineNum":"  501","line":""},
{"lineNum":"  502","line":"            typedef"},
{"lineNum":"  503","line":"                typename proto::detail::result_of_fixup<r0>::type"},
{"lineNum":"  504","line":"            function_type;"},
{"lineNum":"  505","line":""},
{"lineNum":"  506","line":"            typedef"},
{"lineNum":"  507","line":"                typename detail::result_of_<function_type(r1)>::type"},
{"lineNum":"  508","line":"            result_type;"},
{"lineNum":"  509","line":""},
{"lineNum":"  510","line":"            result_type operator ()("},
{"lineNum":"  511","line":"                typename default_function_impl::expr_param e"},
{"lineNum":"  512","line":"              , typename default_function_impl::state_param s"},
{"lineNum":"  513","line":"              , typename default_function_impl::data_param d"},
{"lineNum":"  514","line":"            ) const"},
{"lineNum":"  515","line":"            {"},
{"lineNum":"  516","line":"                return this->invoke("},
{"lineNum":"  517","line":"                    e"},
{"lineNum":"  518","line":"                  , s"},
{"lineNum":"  519","line":"                  , d"},
{"lineNum":"  520","line":"                  , is_member_function_pointer<function_type>()"},
{"lineNum":"  521","line":"                  , is_member_object_pointer<function_type>()"},
{"lineNum":"  522","line":"                );"},
{"lineNum":"  523","line":"            }"},
{"lineNum":"  524","line":""},
{"lineNum":"  525","line":"        private:"},
{"lineNum":"  526","line":"            result_type invoke("},
{"lineNum":"  527","line":"                typename default_function_impl::expr_param e"},
{"lineNum":"  528","line":"              , typename default_function_impl::state_param s"},
{"lineNum":"  529","line":"              , typename default_function_impl::data_param d"},
{"lineNum":"  530","line":"              , mpl::false_"},
{"lineNum":"  531","line":"              , mpl::false_"},
{"lineNum":"  532","line":"            ) const"},
{"lineNum":"  533","line":"            {"},
{"lineNum":"  534","line":"                return BOOST_PROTO_DEFAULT_EVAL(~, 0, e)(BOOST_PROTO_DEFAULT_EVAL(~, 1, e));"},
{"lineNum":"  535","line":"            }"},
{"lineNum":"  536","line":""},
{"lineNum":"  537","line":"            result_type invoke("},
{"lineNum":"  538","line":"                typename default_function_impl::expr_param e"},
{"lineNum":"  539","line":"              , typename default_function_impl::state_param s"},
{"lineNum":"  540","line":"              , typename default_function_impl::data_param d"},
{"lineNum":"  541","line":"              , mpl::true_"},
{"lineNum":"  542","line":"              , mpl::false_"},
{"lineNum":"  543","line":"            ) const"},
{"lineNum":"  544","line":"            {"},
{"lineNum":"  545","line":"                BOOST_PROTO_USE_GET_POINTER();"},
{"lineNum":"  546","line":"                typedef typename detail::class_member_traits<function_type>::class_type class_type;"},
{"lineNum":"  547","line":"                return ("},
{"lineNum":"  548","line":"                    BOOST_PROTO_GET_POINTER(class_type, (BOOST_PROTO_DEFAULT_EVAL(~, 1, e))) ->*"},
{"lineNum":"  549","line":"                    BOOST_PROTO_DEFAULT_EVAL(~, 0, e)"},
{"lineNum":"  550","line":"                )();"},
{"lineNum":"  551","line":"            }"},
{"lineNum":"  552","line":""},
{"lineNum":"  553","line":"            result_type invoke("},
{"lineNum":"  554","line":"                typename default_function_impl::expr_param e"},
{"lineNum":"  555","line":"              , typename default_function_impl::state_param s"},
{"lineNum":"  556","line":"              , typename default_function_impl::data_param d"},
{"lineNum":"  557","line":"              , mpl::false_"},
{"lineNum":"  558","line":"              , mpl::true_"},
{"lineNum":"  559","line":"            ) const"},
{"lineNum":"  560","line":"            {"},
{"lineNum":"  561","line":"                BOOST_PROTO_USE_GET_POINTER();"},
{"lineNum":"  562","line":"                typedef typename detail::class_member_traits<function_type>::class_type class_type;"},
{"lineNum":"  563","line":"                return ("},
{"lineNum":"  564","line":"                    BOOST_PROTO_GET_POINTER(class_type, (BOOST_PROTO_DEFAULT_EVAL(~, 1, e))) ->*"},
{"lineNum":"  565","line":"                    BOOST_PROTO_DEFAULT_EVAL(~, 0, e)"},
{"lineNum":"  566","line":"                );"},
{"lineNum":"  567","line":"            }"},
{"lineNum":"  568","line":"        };"},
{"lineNum":"  569","line":""},
{"lineNum":"  570","line":"        #include <boost/proto/transform/detail/default_function_impl.hpp>"},
{"lineNum":"  571","line":""},
{"lineNum":"  572","line":"        #undef BOOST_PROTO_DEFAULT_EVAL_TYPE"},
{"lineNum":"  573","line":"        #undef BOOST_PROTO_DEFAULT_EVAL"},
{"lineNum":"  574","line":"    }"},
{"lineNum":"  575","line":""},
{"lineNum":"  576","line":"    template<typename Grammar /*= detail::_default*/>"},
{"lineNum":"  577","line":"    struct _default"},
{"lineNum":"  578","line":"      : switch_<detail::default_cases<Grammar> >"},
{"lineNum":"  579","line":"    {};"},
{"lineNum":"  580","line":""},
{"lineNum":"  581","line":"    template<typename Grammar>"},
{"lineNum":"  582","line":"    struct is_callable<_default<Grammar> >"},
{"lineNum":"  583","line":"      : mpl::true_"},
{"lineNum":"  584","line":"    {};"},
{"lineNum":"  585","line":""},
{"lineNum":"  586","line":"    namespace detail"},
{"lineNum":"  587","line":"    {"},
{"lineNum":"  588","line":"        // Loopy indirection that allows proto::_default<> to be"},
{"lineNum":"  589","line":"        // used without specifying a Grammar argument."},
{"lineNum":"  590","line":"        struct _default"},
{"lineNum":"  591","line":"          : proto::_default<>"},
{"lineNum":"  592","line":"        {};"},
{"lineNum":"  593","line":"    }"},
{"lineNum":"  594","line":""},
{"lineNum":"  595","line":"}}"},
{"lineNum":"  596","line":""},
{"lineNum":"  597","line":"#endif"},
{"lineNum":"  598","line":""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 1, "covered" : 0,};
var merged_data = [];
