var data = {lines:[
{"lineNum":"    1","line":"/*"},
{"lineNum":"    2","line":"//@HEADER"},
{"lineNum":"    3","line":"// ************************************************************************"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"//                        Kokkos v. 3.0"},
{"lineNum":"    6","line":"//       Copyright (2020) National Technology & Engineering"},
{"lineNum":"    7","line":"//               Solutions of Sandia, LLC (NTESS)."},
{"lineNum":"    8","line":"//"},
{"lineNum":"    9","line":"// Under the terms of Contract DE-NA0003525 with NTESS,"},
{"lineNum":"   10","line":"// the U.S. Government retains certain rights in this software."},
{"lineNum":"   11","line":"//"},
{"lineNum":"   12","line":"// Redistribution and use in source and binary forms, with or without"},
{"lineNum":"   13","line":"// modification, are permitted provided that the following conditions are"},
{"lineNum":"   14","line":"// met:"},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"// 1. Redistributions of source code must retain the above copyright"},
{"lineNum":"   17","line":"// notice, this list of conditions and the following disclaimer."},
{"lineNum":"   18","line":"//"},
{"lineNum":"   19","line":"// 2. Redistributions in binary form must reproduce the above copyright"},
{"lineNum":"   20","line":"// notice, this list of conditions and the following disclaimer in the"},
{"lineNum":"   21","line":"// documentation and/or other materials provided with the distribution."},
{"lineNum":"   22","line":"//"},
{"lineNum":"   23","line":"// 3. Neither the name of the Corporation nor the names of the"},
{"lineNum":"   24","line":"// contributors may be used to endorse or promote products derived from"},
{"lineNum":"   25","line":"// this software without specific prior written permission."},
{"lineNum":"   26","line":"//"},
{"lineNum":"   27","line":"// THIS SOFTWARE IS PROVIDED BY NTESS \"AS IS\" AND ANY"},
{"lineNum":"   28","line":"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"},
{"lineNum":"   29","line":"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR"},
{"lineNum":"   30","line":"// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NTESS OR THE"},
{"lineNum":"   31","line":"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,"},
{"lineNum":"   32","line":"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,"},
{"lineNum":"   33","line":"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR"},
{"lineNum":"   34","line":"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF"},
{"lineNum":"   35","line":"// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING"},
{"lineNum":"   36","line":"// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"},
{"lineNum":"   37","line":"// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   38","line":"//"},
{"lineNum":"   39","line":"// Questions? Contact Christian R. Trott (crtrott@sandia.gov)"},
{"lineNum":"   40","line":"//"},
{"lineNum":"   41","line":"// ************************************************************************"},
{"lineNum":"   42","line":"//@HEADER"},
{"lineNum":"   43","line":"*/"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"#ifndef KOKKOS_SCRATCHSPACE_HPP"},
{"lineNum":"   46","line":"#define KOKKOS_SCRATCHSPACE_HPP"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"#include <cstdio>"},
{"lineNum":"   49","line":"#include <cstddef>"},
{"lineNum":"   50","line":"#include <Kokkos_Core_fwd.hpp>"},
{"lineNum":"   51","line":"#include <Kokkos_Concepts.hpp>"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"/*--------------------------------------------------------------------------*/"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"namespace Kokkos {"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"/** \\brief  Scratch memory space associated with an execution space."},
{"lineNum":"   58","line":" *"},
{"lineNum":"   59","line":" */"},
{"lineNum":"   60","line":"template <class ExecSpace>"},
{"lineNum":"   61","line":"class ScratchMemorySpace {"},
{"lineNum":"   62","line":"  static_assert("},
{"lineNum":"   63","line":"      is_execution_space<ExecSpace>::value,"},
{"lineNum":"   64","line":"      \"Instantiating ScratchMemorySpace on non-execution-space type.\");"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":" public:"},
{"lineNum":"   67","line":"  // Alignment of memory chunks returned by \'get\'"},
{"lineNum":"   68","line":"  // must be a power of two"},
{"lineNum":"   69","line":"  enum { ALIGN = 8 };"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":" private:"},
{"lineNum":"   72","line":"  mutable char* m_iter_L0 = nullptr;"},
{"lineNum":"   73","line":"  mutable char* m_iter_L1 = nullptr;"},
{"lineNum":"   74","line":"  char* m_end_L0          = nullptr;"},
{"lineNum":"   75","line":"  char* m_end_L1          = nullptr;"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"  mutable int m_multiplier    = 0;"},
{"lineNum":"   78","line":"  mutable int m_offset        = 0;"},
{"lineNum":"   79","line":"  mutable int m_default_level = 0;"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"  enum { MASK = ALIGN - 1 };  // Alignment used by View::shmem_size"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":" public:"},
{"lineNum":"   84","line":"  //! Tag this class as a memory space"},
{"lineNum":"   85","line":"  using memory_space    = ScratchMemorySpace<ExecSpace>;"},
{"lineNum":"   86","line":"  using execution_space = ExecSpace;"},
{"lineNum":"   87","line":"  //! This execution space preferred device_type"},
{"lineNum":"   88","line":"  using device_type = Kokkos::Device<execution_space, memory_space>;"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"  using array_layout = typename ExecSpace::array_layout;"},
{"lineNum":"   91","line":"  using size_type    = typename ExecSpace::size_type;"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"  static constexpr const char* name() { return \"ScratchMemorySpace\"; }"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"  template <typename IntType>"},
{"lineNum":"   96","line":"  KOKKOS_INLINE_FUNCTION static IntType align(const IntType& size) {"},
{"lineNum":"   97","line":"    return (size + MASK) & ~MASK;"},
{"lineNum":"   98","line":"  }"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"  template <typename IntType>"},
{"lineNum":"  101","line":"  KOKKOS_INLINE_FUNCTION void* get_shmem(const IntType& size,"},
{"lineNum":"  102","line":"                                         int level = -1) const {"},
{"lineNum":"  103","line":"    return get_shmem_common</*aligned*/ false>(size, 1, level);"},
{"lineNum":"  104","line":"  }"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"  template <typename IntType>"},
{"lineNum":"  107","line":"  KOKKOS_INLINE_FUNCTION void* get_shmem_aligned(const IntType& size,"},
{"lineNum":"  108","line":"                                                 const ptrdiff_t alignment,"},
{"lineNum":"  109","line":"                                                 int level = -1) const {"},
{"lineNum":"  110","line":"    return get_shmem_common</*aligned*/ true>(size, alignment, level);"},
{"lineNum":"  111","line":"  }"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":" private:"},
{"lineNum":"  114","line":"  template <bool aligned, typename IntType>"},
{"lineNum":"  115","line":"  KOKKOS_INLINE_FUNCTION void* get_shmem_common(const IntType& size,"},
{"lineNum":"  116","line":"                                                const ptrdiff_t alignment,"},
{"lineNum":"  117","line":"                                                int level = -1) const {"},
{"lineNum":"  118","line":"    if (level == -1) level = m_default_level;"},
{"lineNum":"  119","line":"    auto& m_iter              = (level == 0) ? m_iter_L0 : m_iter_L1;"},
{"lineNum":"  120","line":"    auto& m_end               = (level == 0) ? m_end_L0 : m_end_L1;"},
{"lineNum":"  121","line":"    char* previous            = m_iter;"},
{"lineNum":"  122","line":"    const ptrdiff_t missalign = size_t(m_iter) % alignment;"},
{"lineNum":"  123","line":"    if (missalign) m_iter += alignment - missalign;"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"    void* tmp = m_iter + m_offset * (aligned ? size : align(size));"},
{"lineNum":"  126","line":"    if (m_end < (m_iter += (aligned ? size : align(size)) * m_multiplier)) {"},
{"lineNum":"  127","line":"      m_iter = previous;  // put it back like it was"},
{"lineNum":"  128","line":"#ifdef KOKKOS_ENABLE_DEBUG"},
{"lineNum":"  129","line":"      // mfh 23 Jun 2015: printf call consumes 25 registers"},
{"lineNum":"  130","line":"      // in a CUDA build, so only print in debug mode.  The"},
{"lineNum":"  131","line":"      // function still returns nullptr if not enough memory."},
{"lineNum":"  132","line":"      KOKKOS_IMPL_DO_NOT_USE_PRINTF("},
{"lineNum":"  133","line":"          \"ScratchMemorySpace<...>::get_shmem: Failed to allocate \""},
{"lineNum":"  134","line":"          \"%ld byte(s); remaining capacity is %ld byte(s)\\n\","},
{"lineNum":"  135","line":"          long(size), long(m_end - m_iter));"},
{"lineNum":"  136","line":"#endif  // KOKKOS_ENABLE_DEBUG"},
{"lineNum":"  137","line":"      tmp = nullptr;"},
{"lineNum":"  138","line":"    }"},
{"lineNum":"  139","line":"    return tmp;"},
{"lineNum":"  140","line":"  }"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":" public:"},
{"lineNum":"  143","line":"  KOKKOS_DEFAULTED_FUNCTION"},
{"lineNum":"  144","line":"  ScratchMemorySpace() = default;"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"  template <typename IntType>"},
{"lineNum":"  147","line":"  KOKKOS_INLINE_FUNCTION ScratchMemorySpace(void* ptr_L0,"},
{"lineNum":"  148","line":"                                            const IntType& size_L0,"},
{"lineNum":"  149","line":"                                            void* ptr_L1           = nullptr,"},
{"lineNum":"  150","line":"                                            const IntType& size_L1 = 0)"},
{"lineNum":"  151","line":"      : m_iter_L0((char*)ptr_L0),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  152","line":"        m_iter_L1((char*)ptr_L1),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  153","line":"        m_end_L0((char*)ptr_L0 + size_L0),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  154","line":"        m_end_L1((char*)ptr_L1 + size_L1),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  155","line":"        m_multiplier(1),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  156","line":"        m_offset(0),"},
{"lineNum":"  157","line":"        m_default_level(0) {}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  160","line":"  const ScratchMemorySpace& set_team_thread_mode(const int& level,"},
{"lineNum":"  161","line":"                                                 const int& multiplier,"},
{"lineNum":"  162","line":"                                                 const int& offset) const {"},
{"lineNum":"  163","line":"    m_default_level = level;"},
{"lineNum":"  164","line":"    m_multiplier    = multiplier;"},
{"lineNum":"  165","line":"    m_offset        = offset;"},
{"lineNum":"  166","line":"    return *this;"},
{"lineNum":"  167","line":"  }"},
{"lineNum":"  168","line":"};"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"}  // namespace Kokkos"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"#endif /* #ifndef KOKKOS_SCRATCHSPACE_HPP */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 6, "covered" : 0,};
var merged_data = [];
