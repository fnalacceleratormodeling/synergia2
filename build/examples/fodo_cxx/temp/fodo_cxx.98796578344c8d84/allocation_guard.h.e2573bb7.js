var data = {lines:[
{"lineNum":"    1","line":"// -*- C++ -*-"},
{"lineNum":"    2","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions."},
{"lineNum":"    5","line":"// See https://llvm.org/LICENSE.txt for license information."},
{"lineNum":"    6","line":"// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef _LIBCPP___MEMORY_ALLOCATION_GUARD_H"},
{"lineNum":"   11","line":"#define _LIBCPP___MEMORY_ALLOCATION_GUARD_H"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"#include <__config>"},
{"lineNum":"   14","line":"#include <__memory/allocator_traits.h>"},
{"lineNum":"   15","line":"#include <cstddef>"},
{"lineNum":"   16","line":"#include <utility>"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"},
{"lineNum":"   19","line":"#pragma GCC system_header"},
{"lineNum":"   20","line":"#endif"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"_LIBCPP_PUSH_MACROS"},
{"lineNum":"   23","line":"#include <__undef_macros>"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"_LIBCPP_BEGIN_NAMESPACE_STD"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"// Helper class to allocate memory using an Allocator in an exception safe"},
{"lineNum":"   29","line":"// manner."},
{"lineNum":"   30","line":"//"},
{"lineNum":"   31","line":"// The intended usage of this class is as follows:"},
{"lineNum":"   32","line":"//"},
{"lineNum":"   33","line":"// 0"},
{"lineNum":"   34","line":"// 1     __allocation_guard<SomeAllocator> guard(alloc, 10);"},
{"lineNum":"   35","line":"// 2     do_some_initialization_that_may_throw(guard.__get());"},
{"lineNum":"   36","line":"// 3     save_allocated_pointer_in_a_noexcept_operation(guard.__release_ptr());"},
{"lineNum":"   37","line":"// 4"},
{"lineNum":"   38","line":"//"},
{"lineNum":"   39","line":"// If line (2) throws an exception during initialization of the memory, the"},
{"lineNum":"   40","line":"// guard\'s destructor will be called, and the memory will be released using"},
{"lineNum":"   41","line":"// Allocator deallocation. Otherwise, we release the memory from the guard on"},
{"lineNum":"   42","line":"// line (3) in an operation that can\'t throw -- after that, the guard is not"},
{"lineNum":"   43","line":"// responsible for the memory anymore."},
{"lineNum":"   44","line":"//"},
{"lineNum":"   45","line":"// This is similar to a unique_ptr, except it\'s easier to use with a"},
{"lineNum":"   46","line":"// custom allocator."},
{"lineNum":"   47","line":"template<class _Alloc>"},
{"lineNum":"   48","line":"struct __allocation_guard {"},
{"lineNum":"   49","line":"    using _Pointer = typename allocator_traits<_Alloc>::pointer;"},
{"lineNum":"   50","line":"    using _Size = typename allocator_traits<_Alloc>::size_type;"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"    template<class _AllocT> // we perform the allocator conversion inside the constructor"},
{"lineNum":"   53","line":"    _LIBCPP_HIDE_FROM_ABI"},
{"lineNum":"   54","line":"    explicit __allocation_guard(_AllocT __alloc, _Size __n)"},
{"lineNum":"   55","line":"        : __alloc_(_VSTD::move(__alloc))"},
{"lineNum":"   56","line":"        , __n_(__n)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   57","line":"        , __ptr_(allocator_traits<_Alloc>::allocate(__alloc_, __n_)) // initialization order is important","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   58","line":"    { }"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"    _LIBCPP_HIDE_FROM_ABI"},
{"lineNum":"   61","line":"    ~__allocation_guard() _NOEXCEPT {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   62","line":"        if (__ptr_ != nullptr) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   63","line":"            allocator_traits<_Alloc>::deallocate(__alloc_, __ptr_, __n_);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   64","line":"        }"},
{"lineNum":"   65","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"    _LIBCPP_HIDE_FROM_ABI"},
{"lineNum":"   68","line":"    _Pointer __release_ptr() _NOEXCEPT { // not called __release() because it\'s a keyword in objective-c++"},
{"lineNum":"   69","line":"        _Pointer __tmp = __ptr_;"},
{"lineNum":"   70","line":"        __ptr_ = nullptr;"},
{"lineNum":"   71","line":"        return __tmp;"},
{"lineNum":"   72","line":"    }"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"    _LIBCPP_HIDE_FROM_ABI"},
{"lineNum":"   75","line":"    _Pointer __get() const _NOEXCEPT {"},
{"lineNum":"   76","line":"        return __ptr_;"},
{"lineNum":"   77","line":"    }"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"private:"},
{"lineNum":"   80","line":"    _Alloc __alloc_;"},
{"lineNum":"   81","line":"    _Size __n_;"},
{"lineNum":"   82","line":"    _Pointer __ptr_;"},
{"lineNum":"   83","line":"};"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"_LIBCPP_END_NAMESPACE_STD"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"_LIBCPP_POP_MACROS"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"#endif // _LIBCPP___MEMORY_ALLOCATION_GUARD_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 6, "covered" : 0,};
var merged_data = [];
