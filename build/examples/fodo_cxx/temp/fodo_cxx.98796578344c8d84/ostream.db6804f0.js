var data = {lines:[
{"lineNum":"    1","line":"// -*- C++ -*-"},
{"lineNum":"    2","line":"//===-------------------------- ostream -----------------------------------===//"},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions."},
{"lineNum":"    5","line":"// See https://llvm.org/LICENSE.txt for license information."},
{"lineNum":"    6","line":"// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef _LIBCPP_OSTREAM"},
{"lineNum":"   11","line":"#define _LIBCPP_OSTREAM"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"/*"},
{"lineNum":"   14","line":"    ostream synopsis"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"template <class charT, class traits = char_traits<charT> >"},
{"lineNum":"   17","line":"class basic_ostream"},
{"lineNum":"   18","line":"    : virtual public basic_ios<charT,traits>"},
{"lineNum":"   19","line":"{"},
{"lineNum":"   20","line":"public:"},
{"lineNum":"   21","line":"    // types (inherited from basic_ios (27.5.4)):"},
{"lineNum":"   22","line":"    typedef charT                          char_type;"},
{"lineNum":"   23","line":"    typedef traits                         traits_type;"},
{"lineNum":"   24","line":"    typedef typename traits_type::int_type int_type;"},
{"lineNum":"   25","line":"    typedef typename traits_type::pos_type pos_type;"},
{"lineNum":"   26","line":"    typedef typename traits_type::off_type off_type;"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"    // 27.7.2.2 Constructor/destructor:"},
{"lineNum":"   29","line":"    explicit basic_ostream(basic_streambuf<char_type,traits>* sb);"},
{"lineNum":"   30","line":"    basic_ostream(basic_ostream&& rhs);"},
{"lineNum":"   31","line":"    virtual ~basic_ostream();"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"    // 27.7.2.3 Assign/swap"},
{"lineNum":"   34","line":"    basic_ostream& operator=(const basic_ostream& rhs) = delete; // C++14"},
{"lineNum":"   35","line":"    basic_ostream& operator=(basic_ostream&& rhs);"},
{"lineNum":"   36","line":"    void swap(basic_ostream& rhs);"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"    // 27.7.2.4 Prefix/suffix:"},
{"lineNum":"   39","line":"    class sentry;"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"    // 27.7.2.6 Formatted output:"},
{"lineNum":"   42","line":"    basic_ostream& operator<<(basic_ostream& (*pf)(basic_ostream&));"},
{"lineNum":"   43","line":"    basic_ostream& operator<<(basic_ios<charT, traits>& (*pf)(basic_ios<charT,traits>&));"},
{"lineNum":"   44","line":"    basic_ostream& operator<<(ios_base& (*pf)(ios_base&));"},
{"lineNum":"   45","line":"    basic_ostream& operator<<(bool n);"},
{"lineNum":"   46","line":"    basic_ostream& operator<<(short n);"},
{"lineNum":"   47","line":"    basic_ostream& operator<<(unsigned short n);"},
{"lineNum":"   48","line":"    basic_ostream& operator<<(int n);"},
{"lineNum":"   49","line":"    basic_ostream& operator<<(unsigned int n);"},
{"lineNum":"   50","line":"    basic_ostream& operator<<(long n);"},
{"lineNum":"   51","line":"    basic_ostream& operator<<(unsigned long n);"},
{"lineNum":"   52","line":"    basic_ostream& operator<<(long long n);"},
{"lineNum":"   53","line":"    basic_ostream& operator<<(unsigned long long n);"},
{"lineNum":"   54","line":"    basic_ostream& operator<<(float f);"},
{"lineNum":"   55","line":"    basic_ostream& operator<<(double f);"},
{"lineNum":"   56","line":"    basic_ostream& operator<<(long double f);"},
{"lineNum":"   57","line":"    basic_ostream& operator<<(const void* p);"},
{"lineNum":"   58","line":"    basic_ostream& operator<<(basic_streambuf<char_type,traits>* sb);"},
{"lineNum":"   59","line":"    basic_ostream& operator<<(nullptr_t);"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"    // 27.7.2.7 Unformatted output:"},
{"lineNum":"   62","line":"    basic_ostream& put(char_type c);"},
{"lineNum":"   63","line":"    basic_ostream& write(const char_type* s, streamsize n);"},
{"lineNum":"   64","line":"    basic_ostream& flush();"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"    // 27.7.2.5 seeks:"},
{"lineNum":"   67","line":"    pos_type tellp();"},
{"lineNum":"   68","line":"    basic_ostream& seekp(pos_type);"},
{"lineNum":"   69","line":"    basic_ostream& seekp(off_type, ios_base::seekdir);"},
{"lineNum":"   70","line":"protected:"},
{"lineNum":"   71","line":"    basic_ostream(const basic_ostream& rhs) = delete;"},
{"lineNum":"   72","line":"    basic_ostream(basic_ostream&& rhs);"},
{"lineNum":"   73","line":"    // 27.7.3.3 Assign/swap"},
{"lineNum":"   74","line":"    basic_ostream& operator=(basic_ostream& rhs) = delete;"},
{"lineNum":"   75","line":"    basic_ostream& operator=(const basic_ostream&& rhs);"},
{"lineNum":"   76","line":"    void swap(basic_ostream& rhs);"},
{"lineNum":"   77","line":"};"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"// 27.7.2.6.4 character inserters"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"template<class charT, class traits>"},
{"lineNum":"   82","line":"  basic_ostream<charT,traits>& operator<<(basic_ostream<charT,traits>&, charT);"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"template<class charT, class traits>"},
{"lineNum":"   85","line":"  basic_ostream<charT,traits>& operator<<(basic_ostream<charT,traits>&, char);"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"template<class traits>"},
{"lineNum":"   88","line":"  basic_ostream<char,traits>& operator<<(basic_ostream<char,traits>&, char);"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"// signed and unsigned"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"template<class traits>"},
{"lineNum":"   93","line":"  basic_ostream<char,traits>& operator<<(basic_ostream<char,traits>&, signed char);"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"template<class traits>"},
{"lineNum":"   96","line":"  basic_ostream<char,traits>& operator<<(basic_ostream<char,traits>&, unsigned char);"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"// NTBS"},
{"lineNum":"   99","line":"template<class charT, class traits>"},
{"lineNum":"  100","line":"  basic_ostream<charT,traits>& operator<<(basic_ostream<charT,traits>&, const charT*);"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"template<class charT, class traits>"},
{"lineNum":"  103","line":"  basic_ostream<charT,traits>& operator<<(basic_ostream<charT,traits>&, const char*);"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"template<class traits>"},
{"lineNum":"  106","line":"  basic_ostream<char,traits>& operator<<(basic_ostream<char,traits>&, const char*);"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"// signed and unsigned"},
{"lineNum":"  109","line":"template<class traits>"},
{"lineNum":"  110","line":"basic_ostream<char,traits>& operator<<(basic_ostream<char,traits>&, const signed char*);"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"template<class traits>"},
{"lineNum":"  113","line":"  basic_ostream<char,traits>& operator<<(basic_ostream<char,traits>&, const unsigned char*);"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"// swap:"},
{"lineNum":"  116","line":"template <class charT, class traits>"},
{"lineNum":"  117","line":"  void swap(basic_ostream<charT, traits>& x, basic_ostream<charT, traits>& y);"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"template <class charT, class traits>"},
{"lineNum":"  120","line":"  basic_ostream<charT,traits>& endl(basic_ostream<charT,traits>& os);"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"template <class charT, class traits>"},
{"lineNum":"  123","line":"  basic_ostream<charT,traits>& ends(basic_ostream<charT,traits>& os);"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"template <class charT, class traits>"},
{"lineNum":"  126","line":"  basic_ostream<charT,traits>& flush(basic_ostream<charT,traits>& os);"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"// rvalue stream insertion"},
{"lineNum":"  129","line":"template <class Stream, class T>"},
{"lineNum":"  130","line":"  Stream&& operator<<(Stream&& os, const T& x);"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"}  // std"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"*/"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"#include <__config>"},
{"lineNum":"  137","line":"#include <bitset>"},
{"lineNum":"  138","line":"#include <ios>"},
{"lineNum":"  139","line":"#include <iterator>"},
{"lineNum":"  140","line":"#include <locale>"},
{"lineNum":"  141","line":"#include <streambuf>"},
{"lineNum":"  142","line":"#include <version>"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"},
{"lineNum":"  145","line":"#pragma GCC system_header"},
{"lineNum":"  146","line":"#endif"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"_LIBCPP_BEGIN_NAMESPACE_STD"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"template <class _CharT, class _Traits>"},
{"lineNum":"  151","line":"class _LIBCPP_TEMPLATE_VIS basic_ostream"},
{"lineNum":"  152","line":"    : virtual public basic_ios<_CharT, _Traits>"},
{"lineNum":"  153","line":"{"},
{"lineNum":"  154","line":"public:"},
{"lineNum":"  155","line":"    // types (inherited from basic_ios (27.5.4)):"},
{"lineNum":"  156","line":"    typedef _CharT                         char_type;"},
{"lineNum":"  157","line":"    typedef _Traits                        traits_type;"},
{"lineNum":"  158","line":"    typedef typename traits_type::int_type int_type;"},
{"lineNum":"  159","line":"    typedef typename traits_type::pos_type pos_type;"},
{"lineNum":"  160","line":"    typedef typename traits_type::off_type off_type;"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"    // 27.7.2.2 Constructor/destructor:"},
{"lineNum":"  163","line":"    inline _LIBCPP_HIDE_FROM_ABI_AFTER_V1"},
{"lineNum":"  164","line":"    explicit basic_ostream(basic_streambuf<char_type, traits_type>* __sb)"},
{"lineNum":"  165","line":"    { this->init(__sb); }","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"  166","line":"    virtual ~basic_ostream();"},
{"lineNum":"  167","line":"protected:"},
{"lineNum":"  168","line":"    inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  169","line":"    basic_ostream(basic_ostream&& __rhs);"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"    // 27.7.2.3 Assign/swap"},
{"lineNum":"  172","line":"    inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  173","line":"    basic_ostream& operator=(basic_ostream&& __rhs);"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"    inline _LIBCPP_HIDE_FROM_ABI_AFTER_V1"},
{"lineNum":"  176","line":"    void swap(basic_ostream& __rhs)"},
{"lineNum":"  177","line":"    { basic_ios<char_type, traits_type>::swap(__rhs); }"},
{"lineNum":"  178","line":""},
{"lineNum":"  179","line":"    basic_ostream           (const basic_ostream& __rhs) = delete;"},
{"lineNum":"  180","line":"    basic_ostream& operator=(const basic_ostream& __rhs) = delete;"},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"public:"},
{"lineNum":"  183","line":"    // 27.7.2.4 Prefix/suffix:"},
{"lineNum":"  184","line":"    class _LIBCPP_TEMPLATE_VIS sentry;"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"    // 27.7.2.6 Formatted output:"},
{"lineNum":"  187","line":"    inline _LIBCPP_HIDE_FROM_ABI_AFTER_V1"},
{"lineNum":"  188","line":"    basic_ostream& operator<<(basic_ostream& (*__pf)(basic_ostream&))"},
{"lineNum":"  189","line":"    { return __pf(*this); }","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"    inline _LIBCPP_HIDE_FROM_ABI_AFTER_V1"},
{"lineNum":"  192","line":"    basic_ostream& operator<<(basic_ios<char_type, traits_type>&"},
{"lineNum":"  193","line":"                              (*__pf)(basic_ios<char_type,traits_type>&))"},
{"lineNum":"  194","line":"    { __pf(*this); return *this; }"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"    inline _LIBCPP_HIDE_FROM_ABI_AFTER_V1"},
{"lineNum":"  197","line":"    basic_ostream& operator<<(ios_base& (*__pf)(ios_base&))"},
{"lineNum":"  198","line":"    { __pf(*this); return *this; }","class":"lineNoCov","hits":"0","possible_hits":"19",},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"    basic_ostream& operator<<(bool __n);"},
{"lineNum":"  201","line":"    basic_ostream& operator<<(short __n);"},
{"lineNum":"  202","line":"    basic_ostream& operator<<(unsigned short __n);"},
{"lineNum":"  203","line":"    basic_ostream& operator<<(int __n);"},
{"lineNum":"  204","line":"    basic_ostream& operator<<(unsigned int __n);"},
{"lineNum":"  205","line":"    basic_ostream& operator<<(long __n);"},
{"lineNum":"  206","line":"    basic_ostream& operator<<(unsigned long __n);"},
{"lineNum":"  207","line":"    basic_ostream& operator<<(long long __n);"},
{"lineNum":"  208","line":"    basic_ostream& operator<<(unsigned long long __n);"},
{"lineNum":"  209","line":"    basic_ostream& operator<<(float __f);"},
{"lineNum":"  210","line":"    basic_ostream& operator<<(double __f);"},
{"lineNum":"  211","line":"    basic_ostream& operator<<(long double __f);"},
{"lineNum":"  212","line":"    basic_ostream& operator<<(const void* __p);"},
{"lineNum":"  213","line":"    basic_ostream& operator<<(basic_streambuf<char_type, traits_type>* __sb);"},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  216","line":"    basic_ostream& operator<<(nullptr_t)"},
{"lineNum":"  217","line":"    { return *this << \"nullptr\"; }"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"    // 27.7.2.7 Unformatted output:"},
{"lineNum":"  220","line":"    basic_ostream& put(char_type __c);"},
{"lineNum":"  221","line":"    basic_ostream& write(const char_type* __s, streamsize __n);"},
{"lineNum":"  222","line":"    basic_ostream& flush();"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"    // 27.7.2.5 seeks:"},
{"lineNum":"  225","line":"    inline _LIBCPP_HIDE_FROM_ABI_AFTER_V1"},
{"lineNum":"  226","line":"    pos_type tellp();"},
{"lineNum":"  227","line":"    inline _LIBCPP_HIDE_FROM_ABI_AFTER_V1"},
{"lineNum":"  228","line":"    basic_ostream& seekp(pos_type __pos);"},
{"lineNum":"  229","line":"    inline _LIBCPP_HIDE_FROM_ABI_AFTER_V1"},
{"lineNum":"  230","line":"    basic_ostream& seekp(off_type __off, ios_base::seekdir __dir);"},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"protected:"},
{"lineNum":"  233","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  234","line":"    basic_ostream() {}  // extension, intentially does not initialize"},
{"lineNum":"  235","line":"};"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"template <class _CharT, class _Traits>"},
{"lineNum":"  238","line":"class _LIBCPP_TEMPLATE_VIS basic_ostream<_CharT, _Traits>::sentry"},
{"lineNum":"  239","line":"{"},
{"lineNum":"  240","line":"    bool __ok_;"},
{"lineNum":"  241","line":"    basic_ostream<_CharT, _Traits>& __os_;"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"    sentry(const sentry&); // = delete;"},
{"lineNum":"  244","line":"    sentry& operator=(const sentry&); // = delete;"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"public:"},
{"lineNum":"  247","line":"    explicit sentry(basic_ostream<_CharT, _Traits>& __os);"},
{"lineNum":"  248","line":"    ~sentry();"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  251","line":"    explicit operator bool() const {return __ok_;}","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  252","line":"};"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"template <class _CharT, class _Traits>"},
{"lineNum":"  255","line":"basic_ostream<_CharT, _Traits>::sentry::sentry(basic_ostream<_CharT, _Traits>& __os)"},
{"lineNum":"  256","line":"    : __ok_(false),"},
{"lineNum":"  257","line":"      __os_(__os)"},
{"lineNum":"  258","line":"{"},
{"lineNum":"  259","line":"    if (__os.good())"},
{"lineNum":"  260","line":"    {"},
{"lineNum":"  261","line":"        if (__os.tie())"},
{"lineNum":"  262","line":"            __os.tie()->flush();"},
{"lineNum":"  263","line":"        __ok_ = true;"},
{"lineNum":"  264","line":"    }"},
{"lineNum":"  265","line":"}"},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"template <class _CharT, class _Traits>"},
{"lineNum":"  268","line":"basic_ostream<_CharT, _Traits>::sentry::~sentry()"},
{"lineNum":"  269","line":"{"},
{"lineNum":"  270","line":"    if (__os_.rdbuf() && __os_.good() && (__os_.flags() & ios_base::unitbuf)"},
{"lineNum":"  271","line":"                      && !uncaught_exception())"},
{"lineNum":"  272","line":"    {"},
{"lineNum":"  273","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  274","line":"        try"},
{"lineNum":"  275","line":"        {"},
{"lineNum":"  276","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  277","line":"            if (__os_.rdbuf()->pubsync() == -1)"},
{"lineNum":"  278","line":"                __os_.setstate(ios_base::badbit);"},
{"lineNum":"  279","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  280","line":"        }"},
{"lineNum":"  281","line":"        catch (...)"},
{"lineNum":"  282","line":"        {"},
{"lineNum":"  283","line":"        }"},
{"lineNum":"  284","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  285","line":"    }"},
{"lineNum":"  286","line":"}"},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"template <class _CharT, class _Traits>"},
{"lineNum":"  289","line":"basic_ostream<_CharT, _Traits>::basic_ostream(basic_ostream&& __rhs)"},
{"lineNum":"  290","line":"{"},
{"lineNum":"  291","line":"    this->move(__rhs);"},
{"lineNum":"  292","line":"}"},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"template <class _CharT, class _Traits>"},
{"lineNum":"  295","line":"basic_ostream<_CharT, _Traits>&"},
{"lineNum":"  296","line":"basic_ostream<_CharT, _Traits>::operator=(basic_ostream&& __rhs)"},
{"lineNum":"  297","line":"{"},
{"lineNum":"  298","line":"    swap(__rhs);"},
{"lineNum":"  299","line":"    return *this;"},
{"lineNum":"  300","line":"}"},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":"template <class _CharT, class _Traits>"},
{"lineNum":"  303","line":"basic_ostream<_CharT, _Traits>::~basic_ostream()"},
{"lineNum":"  304","line":"{"},
{"lineNum":"  305","line":"}"},
{"lineNum":"  306","line":""},
{"lineNum":"  307","line":"template <class _CharT, class _Traits>"},
{"lineNum":"  308","line":"basic_ostream<_CharT, _Traits>&"},
{"lineNum":"  309","line":"basic_ostream<_CharT, _Traits>::operator<<(basic_streambuf<char_type, traits_type>* __sb)"},
{"lineNum":"  310","line":"{"},
{"lineNum":"  311","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  312","line":"    try"},
{"lineNum":"  313","line":"    {"},
{"lineNum":"  314","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  315","line":"        sentry __s(*this);"},
{"lineNum":"  316","line":"        if (__s)"},
{"lineNum":"  317","line":"        {"},
{"lineNum":"  318","line":"            if (__sb)"},
{"lineNum":"  319","line":"            {"},
{"lineNum":"  320","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  321","line":"                try"},
{"lineNum":"  322","line":"                {"},
{"lineNum":"  323","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  324","line":"                    typedef istreambuf_iterator<_CharT, _Traits> _Ip;"},
{"lineNum":"  325","line":"                    typedef ostreambuf_iterator<_CharT, _Traits> _Op;"},
{"lineNum":"  326","line":"                    _Ip __i(__sb);"},
{"lineNum":"  327","line":"                    _Ip __eof;"},
{"lineNum":"  328","line":"                    _Op __o(*this);"},
{"lineNum":"  329","line":"                    size_t __c = 0;"},
{"lineNum":"  330","line":"                    for (; __i != __eof; ++__i, ++__o, ++__c)"},
{"lineNum":"  331","line":"                    {"},
{"lineNum":"  332","line":"                        *__o = *__i;"},
{"lineNum":"  333","line":"                        if (__o.failed())"},
{"lineNum":"  334","line":"                            break;"},
{"lineNum":"  335","line":"                    }"},
{"lineNum":"  336","line":"                    if (__c == 0)"},
{"lineNum":"  337","line":"                        this->setstate(ios_base::failbit);"},
{"lineNum":"  338","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  339","line":"                }"},
{"lineNum":"  340","line":"                catch (...)"},
{"lineNum":"  341","line":"                {"},
{"lineNum":"  342","line":"                    this->__set_failbit_and_consider_rethrow();"},
{"lineNum":"  343","line":"                }"},
{"lineNum":"  344","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  345","line":"            }"},
{"lineNum":"  346","line":"            else"},
{"lineNum":"  347","line":"                this->setstate(ios_base::badbit);"},
{"lineNum":"  348","line":"        }"},
{"lineNum":"  349","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  350","line":"    }"},
{"lineNum":"  351","line":"    catch (...)"},
{"lineNum":"  352","line":"    {"},
{"lineNum":"  353","line":"        this->__set_badbit_and_consider_rethrow();"},
{"lineNum":"  354","line":"    }"},
{"lineNum":"  355","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  356","line":"    return *this;"},
{"lineNum":"  357","line":"}"},
{"lineNum":"  358","line":""},
{"lineNum":"  359","line":"template <class _CharT, class _Traits>"},
{"lineNum":"  360","line":"basic_ostream<_CharT, _Traits>&"},
{"lineNum":"  361","line":"basic_ostream<_CharT, _Traits>::operator<<(bool __n)"},
{"lineNum":"  362","line":"{"},
{"lineNum":"  363","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  364","line":"    try"},
{"lineNum":"  365","line":"    {"},
{"lineNum":"  366","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  367","line":"        sentry __s(*this);"},
{"lineNum":"  368","line":"        if (__s)"},
{"lineNum":"  369","line":"        {"},
{"lineNum":"  370","line":"            typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;"},
{"lineNum":"  371","line":"            const _Fp& __f = use_facet<_Fp>(this->getloc());"},
{"lineNum":"  372","line":"            if (__f.put(*this, *this, this->fill(), __n).failed())"},
{"lineNum":"  373","line":"                this->setstate(ios_base::badbit | ios_base::failbit);"},
{"lineNum":"  374","line":"        }"},
{"lineNum":"  375","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  376","line":"    }"},
{"lineNum":"  377","line":"    catch (...)"},
{"lineNum":"  378","line":"    {"},
{"lineNum":"  379","line":"        this->__set_badbit_and_consider_rethrow();"},
{"lineNum":"  380","line":"    }"},
{"lineNum":"  381","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  382","line":"    return *this;"},
{"lineNum":"  383","line":"}"},
{"lineNum":"  384","line":""},
{"lineNum":"  385","line":"template <class _CharT, class _Traits>"},
{"lineNum":"  386","line":"basic_ostream<_CharT, _Traits>&"},
{"lineNum":"  387","line":"basic_ostream<_CharT, _Traits>::operator<<(short __n)"},
{"lineNum":"  388","line":"{"},
{"lineNum":"  389","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  390","line":"    try"},
{"lineNum":"  391","line":"    {"},
{"lineNum":"  392","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  393","line":"        sentry __s(*this);"},
{"lineNum":"  394","line":"        if (__s)"},
{"lineNum":"  395","line":"        {"},
{"lineNum":"  396","line":"            ios_base::fmtflags __flags = ios_base::flags() & ios_base::basefield;"},
{"lineNum":"  397","line":"            typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;"},
{"lineNum":"  398","line":"            const _Fp& __f = use_facet<_Fp>(this->getloc());"},
{"lineNum":"  399","line":"            if (__f.put(*this, *this, this->fill(),"},
{"lineNum":"  400","line":"                        __flags == ios_base::oct || __flags == ios_base::hex ?"},
{"lineNum":"  401","line":"                        static_cast<long>(static_cast<unsigned short>(__n))  :"},
{"lineNum":"  402","line":"                        static_cast<long>(__n)).failed())"},
{"lineNum":"  403","line":"                this->setstate(ios_base::badbit | ios_base::failbit);"},
{"lineNum":"  404","line":"        }"},
{"lineNum":"  405","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  406","line":"    }"},
{"lineNum":"  407","line":"    catch (...)"},
{"lineNum":"  408","line":"    {"},
{"lineNum":"  409","line":"        this->__set_badbit_and_consider_rethrow();"},
{"lineNum":"  410","line":"    }"},
{"lineNum":"  411","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  412","line":"    return *this;"},
{"lineNum":"  413","line":"}"},
{"lineNum":"  414","line":""},
{"lineNum":"  415","line":"template <class _CharT, class _Traits>"},
{"lineNum":"  416","line":"basic_ostream<_CharT, _Traits>&"},
{"lineNum":"  417","line":"basic_ostream<_CharT, _Traits>::operator<<(unsigned short __n)"},
{"lineNum":"  418","line":"{"},
{"lineNum":"  419","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  420","line":"    try"},
{"lineNum":"  421","line":"    {"},
{"lineNum":"  422","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  423","line":"        sentry __s(*this);"},
{"lineNum":"  424","line":"        if (__s)"},
{"lineNum":"  425","line":"        {"},
{"lineNum":"  426","line":"            typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;"},
{"lineNum":"  427","line":"            const _Fp& __f = use_facet<_Fp>(this->getloc());"},
{"lineNum":"  428","line":"            if (__f.put(*this, *this, this->fill(), static_cast<unsigned long>(__n)).failed())"},
{"lineNum":"  429","line":"                this->setstate(ios_base::badbit | ios_base::failbit);"},
{"lineNum":"  430","line":"        }"},
{"lineNum":"  431","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  432","line":"    }"},
{"lineNum":"  433","line":"    catch (...)"},
{"lineNum":"  434","line":"    {"},
{"lineNum":"  435","line":"        this->__set_badbit_and_consider_rethrow();"},
{"lineNum":"  436","line":"    }"},
{"lineNum":"  437","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  438","line":"    return *this;"},
{"lineNum":"  439","line":"}"},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"template <class _CharT, class _Traits>"},
{"lineNum":"  442","line":"basic_ostream<_CharT, _Traits>&"},
{"lineNum":"  443","line":"basic_ostream<_CharT, _Traits>::operator<<(int __n)"},
{"lineNum":"  444","line":"{"},
{"lineNum":"  445","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  446","line":"    try"},
{"lineNum":"  447","line":"    {"},
{"lineNum":"  448","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  449","line":"        sentry __s(*this);"},
{"lineNum":"  450","line":"        if (__s)"},
{"lineNum":"  451","line":"        {"},
{"lineNum":"  452","line":"            ios_base::fmtflags __flags = ios_base::flags() & ios_base::basefield;"},
{"lineNum":"  453","line":"            typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;"},
{"lineNum":"  454","line":"            const _Fp& __f = use_facet<_Fp>(this->getloc());"},
{"lineNum":"  455","line":"            if (__f.put(*this, *this, this->fill(),"},
{"lineNum":"  456","line":"                        __flags == ios_base::oct || __flags == ios_base::hex ?"},
{"lineNum":"  457","line":"                        static_cast<long>(static_cast<unsigned int>(__n))  :"},
{"lineNum":"  458","line":"                        static_cast<long>(__n)).failed())"},
{"lineNum":"  459","line":"                this->setstate(ios_base::badbit | ios_base::failbit);"},
{"lineNum":"  460","line":"        }"},
{"lineNum":"  461","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  462","line":"    }"},
{"lineNum":"  463","line":"    catch (...)"},
{"lineNum":"  464","line":"    {"},
{"lineNum":"  465","line":"        this->__set_badbit_and_consider_rethrow();"},
{"lineNum":"  466","line":"    }"},
{"lineNum":"  467","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  468","line":"    return *this;"},
{"lineNum":"  469","line":"}"},
{"lineNum":"  470","line":""},
{"lineNum":"  471","line":"template <class _CharT, class _Traits>"},
{"lineNum":"  472","line":"basic_ostream<_CharT, _Traits>&"},
{"lineNum":"  473","line":"basic_ostream<_CharT, _Traits>::operator<<(unsigned int __n)"},
{"lineNum":"  474","line":"{"},
{"lineNum":"  475","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  476","line":"    try"},
{"lineNum":"  477","line":"    {"},
{"lineNum":"  478","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  479","line":"        sentry __s(*this);"},
{"lineNum":"  480","line":"        if (__s)"},
{"lineNum":"  481","line":"        {"},
{"lineNum":"  482","line":"            typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;"},
{"lineNum":"  483","line":"            const _Fp& __f = use_facet<_Fp>(this->getloc());"},
{"lineNum":"  484","line":"            if (__f.put(*this, *this, this->fill(), static_cast<unsigned long>(__n)).failed())"},
{"lineNum":"  485","line":"                this->setstate(ios_base::badbit | ios_base::failbit);"},
{"lineNum":"  486","line":"        }"},
{"lineNum":"  487","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  488","line":"    }"},
{"lineNum":"  489","line":"    catch (...)"},
{"lineNum":"  490","line":"    {"},
{"lineNum":"  491","line":"        this->__set_badbit_and_consider_rethrow();"},
{"lineNum":"  492","line":"    }"},
{"lineNum":"  493","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  494","line":"    return *this;"},
{"lineNum":"  495","line":"}"},
{"lineNum":"  496","line":""},
{"lineNum":"  497","line":"template <class _CharT, class _Traits>"},
{"lineNum":"  498","line":"basic_ostream<_CharT, _Traits>&"},
{"lineNum":"  499","line":"basic_ostream<_CharT, _Traits>::operator<<(long __n)"},
{"lineNum":"  500","line":"{"},
{"lineNum":"  501","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  502","line":"    try"},
{"lineNum":"  503","line":"    {"},
{"lineNum":"  504","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  505","line":"        sentry __s(*this);"},
{"lineNum":"  506","line":"        if (__s)"},
{"lineNum":"  507","line":"        {"},
{"lineNum":"  508","line":"            typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;"},
{"lineNum":"  509","line":"            const _Fp& __f = use_facet<_Fp>(this->getloc());"},
{"lineNum":"  510","line":"            if (__f.put(*this, *this, this->fill(), __n).failed())"},
{"lineNum":"  511","line":"                this->setstate(ios_base::badbit | ios_base::failbit);"},
{"lineNum":"  512","line":"        }"},
{"lineNum":"  513","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  514","line":"    }"},
{"lineNum":"  515","line":"    catch (...)"},
{"lineNum":"  516","line":"    {"},
{"lineNum":"  517","line":"        this->__set_badbit_and_consider_rethrow();"},
{"lineNum":"  518","line":"    }"},
{"lineNum":"  519","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  520","line":"    return *this;"},
{"lineNum":"  521","line":"}"},
{"lineNum":"  522","line":""},
{"lineNum":"  523","line":"template <class _CharT, class _Traits>"},
{"lineNum":"  524","line":"basic_ostream<_CharT, _Traits>&"},
{"lineNum":"  525","line":"basic_ostream<_CharT, _Traits>::operator<<(unsigned long __n)"},
{"lineNum":"  526","line":"{"},
{"lineNum":"  527","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  528","line":"    try"},
{"lineNum":"  529","line":"    {"},
{"lineNum":"  530","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  531","line":"        sentry __s(*this);"},
{"lineNum":"  532","line":"        if (__s)"},
{"lineNum":"  533","line":"        {"},
{"lineNum":"  534","line":"            typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;"},
{"lineNum":"  535","line":"            const _Fp& __f = use_facet<_Fp>(this->getloc());"},
{"lineNum":"  536","line":"            if (__f.put(*this, *this, this->fill(), __n).failed())"},
{"lineNum":"  537","line":"                this->setstate(ios_base::badbit | ios_base::failbit);"},
{"lineNum":"  538","line":"        }"},
{"lineNum":"  539","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  540","line":"    }"},
{"lineNum":"  541","line":"    catch (...)"},
{"lineNum":"  542","line":"    {"},
{"lineNum":"  543","line":"        this->__set_badbit_and_consider_rethrow();"},
{"lineNum":"  544","line":"    }"},
{"lineNum":"  545","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  546","line":"    return *this;"},
{"lineNum":"  547","line":"}"},
{"lineNum":"  548","line":""},
{"lineNum":"  549","line":"template <class _CharT, class _Traits>"},
{"lineNum":"  550","line":"basic_ostream<_CharT, _Traits>&"},
{"lineNum":"  551","line":"basic_ostream<_CharT, _Traits>::operator<<(long long __n)"},
{"lineNum":"  552","line":"{"},
{"lineNum":"  553","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  554","line":"    try"},
{"lineNum":"  555","line":"    {"},
{"lineNum":"  556","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  557","line":"        sentry __s(*this);"},
{"lineNum":"  558","line":"        if (__s)"},
{"lineNum":"  559","line":"        {"},
{"lineNum":"  560","line":"            typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;"},
{"lineNum":"  561","line":"            const _Fp& __f = use_facet<_Fp>(this->getloc());"},
{"lineNum":"  562","line":"            if (__f.put(*this, *this, this->fill(), __n).failed())"},
{"lineNum":"  563","line":"                this->setstate(ios_base::badbit | ios_base::failbit);"},
{"lineNum":"  564","line":"        }"},
{"lineNum":"  565","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  566","line":"    }"},
{"lineNum":"  567","line":"    catch (...)"},
{"lineNum":"  568","line":"    {"},
{"lineNum":"  569","line":"        this->__set_badbit_and_consider_rethrow();"},
{"lineNum":"  570","line":"    }"},
{"lineNum":"  571","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  572","line":"    return *this;"},
{"lineNum":"  573","line":"}"},
{"lineNum":"  574","line":""},
{"lineNum":"  575","line":"template <class _CharT, class _Traits>"},
{"lineNum":"  576","line":"basic_ostream<_CharT, _Traits>&"},
{"lineNum":"  577","line":"basic_ostream<_CharT, _Traits>::operator<<(unsigned long long __n)"},
{"lineNum":"  578","line":"{"},
{"lineNum":"  579","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  580","line":"    try"},
{"lineNum":"  581","line":"    {"},
{"lineNum":"  582","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  583","line":"        sentry __s(*this);"},
{"lineNum":"  584","line":"        if (__s)"},
{"lineNum":"  585","line":"        {"},
{"lineNum":"  586","line":"            typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;"},
{"lineNum":"  587","line":"            const _Fp& __f = use_facet<_Fp>(this->getloc());"},
{"lineNum":"  588","line":"            if (__f.put(*this, *this, this->fill(), __n).failed())"},
{"lineNum":"  589","line":"                this->setstate(ios_base::badbit | ios_base::failbit);"},
{"lineNum":"  590","line":"        }"},
{"lineNum":"  591","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  592","line":"    }"},
{"lineNum":"  593","line":"    catch (...)"},
{"lineNum":"  594","line":"    {"},
{"lineNum":"  595","line":"        this->__set_badbit_and_consider_rethrow();"},
{"lineNum":"  596","line":"    }"},
{"lineNum":"  597","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  598","line":"    return *this;"},
{"lineNum":"  599","line":"}"},
{"lineNum":"  600","line":""},
{"lineNum":"  601","line":"template <class _CharT, class _Traits>"},
{"lineNum":"  602","line":"basic_ostream<_CharT, _Traits>&"},
{"lineNum":"  603","line":"basic_ostream<_CharT, _Traits>::operator<<(float __n)"},
{"lineNum":"  604","line":"{"},
{"lineNum":"  605","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  606","line":"    try"},
{"lineNum":"  607","line":"    {"},
{"lineNum":"  608","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  609","line":"        sentry __s(*this);"},
{"lineNum":"  610","line":"        if (__s)"},
{"lineNum":"  611","line":"        {"},
{"lineNum":"  612","line":"            typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;"},
{"lineNum":"  613","line":"            const _Fp& __f = use_facet<_Fp>(this->getloc());"},
{"lineNum":"  614","line":"            if (__f.put(*this, *this, this->fill(), static_cast<double>(__n)).failed())"},
{"lineNum":"  615","line":"                this->setstate(ios_base::badbit | ios_base::failbit);"},
{"lineNum":"  616","line":"        }"},
{"lineNum":"  617","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  618","line":"    }"},
{"lineNum":"  619","line":"    catch (...)"},
{"lineNum":"  620","line":"    {"},
{"lineNum":"  621","line":"        this->__set_badbit_and_consider_rethrow();"},
{"lineNum":"  622","line":"    }"},
{"lineNum":"  623","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  624","line":"    return *this;"},
{"lineNum":"  625","line":"}"},
{"lineNum":"  626","line":""},
{"lineNum":"  627","line":"template <class _CharT, class _Traits>"},
{"lineNum":"  628","line":"basic_ostream<_CharT, _Traits>&"},
{"lineNum":"  629","line":"basic_ostream<_CharT, _Traits>::operator<<(double __n)"},
{"lineNum":"  630","line":"{"},
{"lineNum":"  631","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  632","line":"    try"},
{"lineNum":"  633","line":"    {"},
{"lineNum":"  634","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  635","line":"        sentry __s(*this);"},
{"lineNum":"  636","line":"        if (__s)"},
{"lineNum":"  637","line":"        {"},
{"lineNum":"  638","line":"            typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;"},
{"lineNum":"  639","line":"            const _Fp& __f = use_facet<_Fp>(this->getloc());"},
{"lineNum":"  640","line":"            if (__f.put(*this, *this, this->fill(), __n).failed())"},
{"lineNum":"  641","line":"                this->setstate(ios_base::badbit | ios_base::failbit);"},
{"lineNum":"  642","line":"        }"},
{"lineNum":"  643","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  644","line":"    }"},
{"lineNum":"  645","line":"    catch (...)"},
{"lineNum":"  646","line":"    {"},
{"lineNum":"  647","line":"        this->__set_badbit_and_consider_rethrow();"},
{"lineNum":"  648","line":"    }"},
{"lineNum":"  649","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  650","line":"    return *this;"},
{"lineNum":"  651","line":"}"},
{"lineNum":"  652","line":""},
{"lineNum":"  653","line":"template <class _CharT, class _Traits>"},
{"lineNum":"  654","line":"basic_ostream<_CharT, _Traits>&"},
{"lineNum":"  655","line":"basic_ostream<_CharT, _Traits>::operator<<(long double __n)"},
{"lineNum":"  656","line":"{"},
{"lineNum":"  657","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  658","line":"    try"},
{"lineNum":"  659","line":"    {"},
{"lineNum":"  660","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  661","line":"        sentry __s(*this);"},
{"lineNum":"  662","line":"        if (__s)"},
{"lineNum":"  663","line":"        {"},
{"lineNum":"  664","line":"            typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;"},
{"lineNum":"  665","line":"            const _Fp& __f = use_facet<_Fp>(this->getloc());"},
{"lineNum":"  666","line":"            if (__f.put(*this, *this, this->fill(), __n).failed())"},
{"lineNum":"  667","line":"                this->setstate(ios_base::badbit | ios_base::failbit);"},
{"lineNum":"  668","line":"        }"},
{"lineNum":"  669","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  670","line":"    }"},
{"lineNum":"  671","line":"    catch (...)"},
{"lineNum":"  672","line":"    {"},
{"lineNum":"  673","line":"        this->__set_badbit_and_consider_rethrow();"},
{"lineNum":"  674","line":"    }"},
{"lineNum":"  675","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  676","line":"    return *this;"},
{"lineNum":"  677","line":"}"},
{"lineNum":"  678","line":""},
{"lineNum":"  679","line":"template <class _CharT, class _Traits>"},
{"lineNum":"  680","line":"basic_ostream<_CharT, _Traits>&"},
{"lineNum":"  681","line":"basic_ostream<_CharT, _Traits>::operator<<(const void* __n)"},
{"lineNum":"  682","line":"{"},
{"lineNum":"  683","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  684","line":"    try"},
{"lineNum":"  685","line":"    {"},
{"lineNum":"  686","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  687","line":"        sentry __s(*this);"},
{"lineNum":"  688","line":"        if (__s)"},
{"lineNum":"  689","line":"        {"},
{"lineNum":"  690","line":"            typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;"},
{"lineNum":"  691","line":"            const _Fp& __f = use_facet<_Fp>(this->getloc());"},
{"lineNum":"  692","line":"            if (__f.put(*this, *this, this->fill(), __n).failed())"},
{"lineNum":"  693","line":"                this->setstate(ios_base::badbit | ios_base::failbit);"},
{"lineNum":"  694","line":"        }"},
{"lineNum":"  695","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  696","line":"    }"},
{"lineNum":"  697","line":"    catch (...)"},
{"lineNum":"  698","line":"    {"},
{"lineNum":"  699","line":"        this->__set_badbit_and_consider_rethrow();"},
{"lineNum":"  700","line":"    }"},
{"lineNum":"  701","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  702","line":"    return *this;"},
{"lineNum":"  703","line":"}"},
{"lineNum":"  704","line":""},
{"lineNum":"  705","line":"template<class _CharT, class _Traits>"},
{"lineNum":"  706","line":"basic_ostream<_CharT, _Traits>&"},
{"lineNum":"  707","line":"__put_character_sequence(basic_ostream<_CharT, _Traits>& __os,"},
{"lineNum":"  708","line":"                          const _CharT* __str, size_t __len)"},
{"lineNum":"  709","line":"{","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  710","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  711","line":"    try"},
{"lineNum":"  712","line":"    {"},
{"lineNum":"  713","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  714","line":"        typename basic_ostream<_CharT, _Traits>::sentry __s(__os);","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  715","line":"        if (__s)","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  716","line":"        {"},
{"lineNum":"  717","line":"            typedef ostreambuf_iterator<_CharT, _Traits> _Ip;"},
{"lineNum":"  718","line":"            if (__pad_and_output(_Ip(__os),","class":"lineNoCov","hits":"0","possible_hits":"22",},
{"lineNum":"  719","line":"                                 __str,"},
{"lineNum":"  720","line":"                                 (__os.flags() & ios_base::adjustfield) == ios_base::left ?","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":"  721","line":"                                     __str + __len :","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  722","line":"                                     __str,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  723","line":"                                 __str + __len,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  724","line":"                                 __os,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  725","line":"                                 __os.fill()).failed())"},
{"lineNum":"  726","line":"                __os.setstate(ios_base::badbit | ios_base::failbit);","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  727","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  728","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  729","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"23",},
{"lineNum":"  730","line":"    catch (...)"},
{"lineNum":"  731","line":"    {"},
{"lineNum":"  732","line":"        __os.__set_badbit_and_consider_rethrow();","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  733","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  734","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  735","line":"    return __os;","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  736","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  737","line":""},
{"lineNum":"  738","line":""},
{"lineNum":"  739","line":"template<class _CharT, class _Traits>"},
{"lineNum":"  740","line":"basic_ostream<_CharT, _Traits>&"},
{"lineNum":"  741","line":"operator<<(basic_ostream<_CharT, _Traits>& __os, _CharT __c)"},
{"lineNum":"  742","line":"{"},
{"lineNum":"  743","line":"    return _VSTD::__put_character_sequence(__os, &__c, 1);"},
{"lineNum":"  744","line":"}"},
{"lineNum":"  745","line":""},
{"lineNum":"  746","line":"template<class _CharT, class _Traits>"},
{"lineNum":"  747","line":"basic_ostream<_CharT, _Traits>&"},
{"lineNum":"  748","line":"operator<<(basic_ostream<_CharT, _Traits>& __os, char __cn)"},
{"lineNum":"  749","line":"{"},
{"lineNum":"  750","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  751","line":"    try"},
{"lineNum":"  752","line":"    {"},
{"lineNum":"  753","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  754","line":"        typename basic_ostream<_CharT, _Traits>::sentry __s(__os);"},
{"lineNum":"  755","line":"        if (__s)"},
{"lineNum":"  756","line":"        {"},
{"lineNum":"  757","line":"            _CharT __c = __os.widen(__cn);"},
{"lineNum":"  758","line":"            typedef ostreambuf_iterator<_CharT, _Traits> _Ip;"},
{"lineNum":"  759","line":"            if (__pad_and_output(_Ip(__os),"},
{"lineNum":"  760","line":"                                 &__c,"},
{"lineNum":"  761","line":"                                 (__os.flags() & ios_base::adjustfield) == ios_base::left ?"},
{"lineNum":"  762","line":"                                     &__c + 1 :"},
{"lineNum":"  763","line":"                                     &__c,"},
{"lineNum":"  764","line":"                                 &__c + 1,"},
{"lineNum":"  765","line":"                                 __os,"},
{"lineNum":"  766","line":"                                 __os.fill()).failed())"},
{"lineNum":"  767","line":"                __os.setstate(ios_base::badbit | ios_base::failbit);"},
{"lineNum":"  768","line":"        }"},
{"lineNum":"  769","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  770","line":"    }"},
{"lineNum":"  771","line":"    catch (...)"},
{"lineNum":"  772","line":"    {"},
{"lineNum":"  773","line":"        __os.__set_badbit_and_consider_rethrow();"},
{"lineNum":"  774","line":"    }"},
{"lineNum":"  775","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  776","line":"    return __os;"},
{"lineNum":"  777","line":"}"},
{"lineNum":"  778","line":""},
{"lineNum":"  779","line":"template<class _Traits>"},
{"lineNum":"  780","line":"basic_ostream<char, _Traits>&"},
{"lineNum":"  781","line":"operator<<(basic_ostream<char, _Traits>& __os, char __c)"},
{"lineNum":"  782","line":"{"},
{"lineNum":"  783","line":"    return _VSTD::__put_character_sequence(__os, &__c, 1);","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  784","line":"}"},
{"lineNum":"  785","line":""},
{"lineNum":"  786","line":"template<class _Traits>"},
{"lineNum":"  787","line":"basic_ostream<char, _Traits>&"},
{"lineNum":"  788","line":"operator<<(basic_ostream<char, _Traits>& __os, signed char __c)"},
{"lineNum":"  789","line":"{"},
{"lineNum":"  790","line":"    return _VSTD::__put_character_sequence(__os, (char *) &__c, 1);"},
{"lineNum":"  791","line":"}"},
{"lineNum":"  792","line":""},
{"lineNum":"  793","line":"template<class _Traits>"},
{"lineNum":"  794","line":"basic_ostream<char, _Traits>&"},
{"lineNum":"  795","line":"operator<<(basic_ostream<char, _Traits>& __os, unsigned char __c)"},
{"lineNum":"  796","line":"{"},
{"lineNum":"  797","line":"    return _VSTD::__put_character_sequence(__os, (char *) &__c, 1);"},
{"lineNum":"  798","line":"}"},
{"lineNum":"  799","line":""},
{"lineNum":"  800","line":"template<class _CharT, class _Traits>"},
{"lineNum":"  801","line":"basic_ostream<_CharT, _Traits>&"},
{"lineNum":"  802","line":"operator<<(basic_ostream<_CharT, _Traits>& __os, const _CharT* __str)"},
{"lineNum":"  803","line":"{"},
{"lineNum":"  804","line":"    return _VSTD::__put_character_sequence(__os, __str, _Traits::length(__str));"},
{"lineNum":"  805","line":"}"},
{"lineNum":"  806","line":""},
{"lineNum":"  807","line":"template<class _CharT, class _Traits>"},
{"lineNum":"  808","line":"basic_ostream<_CharT, _Traits>&"},
{"lineNum":"  809","line":"operator<<(basic_ostream<_CharT, _Traits>& __os, const char* __strn)"},
{"lineNum":"  810","line":"{"},
{"lineNum":"  811","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  812","line":"    try"},
{"lineNum":"  813","line":"    {"},
{"lineNum":"  814","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  815","line":"        typename basic_ostream<_CharT, _Traits>::sentry __s(__os);"},
{"lineNum":"  816","line":"        if (__s)"},
{"lineNum":"  817","line":"        {"},
{"lineNum":"  818","line":"            typedef ostreambuf_iterator<_CharT, _Traits> _Ip;"},
{"lineNum":"  819","line":"            size_t __len = char_traits<char>::length(__strn);"},
{"lineNum":"  820","line":"            const int __bs = 100;"},
{"lineNum":"  821","line":"            _CharT __wbb[__bs];"},
{"lineNum":"  822","line":"            _CharT* __wb = __wbb;"},
{"lineNum":"  823","line":"            unique_ptr<_CharT, void(*)(void*)> __h(0, free);"},
{"lineNum":"  824","line":"            if (__len > __bs)"},
{"lineNum":"  825","line":"            {"},
{"lineNum":"  826","line":"                __wb = (_CharT*)malloc(__len*sizeof(_CharT));"},
{"lineNum":"  827","line":"                if (__wb == 0)"},
{"lineNum":"  828","line":"                    __throw_bad_alloc();"},
{"lineNum":"  829","line":"                __h.reset(__wb);"},
{"lineNum":"  830","line":"            }"},
{"lineNum":"  831","line":"            for (_CharT* __p = __wb; *__strn != \'\\0\'; ++__strn, ++__p)"},
{"lineNum":"  832","line":"                *__p = __os.widen(*__strn);"},
{"lineNum":"  833","line":"            if (__pad_and_output(_Ip(__os),"},
{"lineNum":"  834","line":"                                 __wb,"},
{"lineNum":"  835","line":"                                 (__os.flags() & ios_base::adjustfield) == ios_base::left ?"},
{"lineNum":"  836","line":"                                     __wb + __len :"},
{"lineNum":"  837","line":"                                     __wb,"},
{"lineNum":"  838","line":"                                 __wb + __len,"},
{"lineNum":"  839","line":"                                 __os,"},
{"lineNum":"  840","line":"                                 __os.fill()).failed())"},
{"lineNum":"  841","line":"                __os.setstate(ios_base::badbit | ios_base::failbit);"},
{"lineNum":"  842","line":"        }"},
{"lineNum":"  843","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  844","line":"    }"},
{"lineNum":"  845","line":"    catch (...)"},
{"lineNum":"  846","line":"    {"},
{"lineNum":"  847","line":"        __os.__set_badbit_and_consider_rethrow();"},
{"lineNum":"  848","line":"    }"},
{"lineNum":"  849","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  850","line":"    return __os;"},
{"lineNum":"  851","line":"}"},
{"lineNum":"  852","line":""},
{"lineNum":"  853","line":"template<class _Traits>"},
{"lineNum":"  854","line":"basic_ostream<char, _Traits>&"},
{"lineNum":"  855","line":"operator<<(basic_ostream<char, _Traits>& __os, const char* __str)"},
{"lineNum":"  856","line":"{"},
{"lineNum":"  857","line":"    return _VSTD::__put_character_sequence(__os, __str, _Traits::length(__str));","class":"lineNoCov","hits":"0","possible_hits":"454",},
{"lineNum":"  858","line":"}"},
{"lineNum":"  859","line":""},
{"lineNum":"  860","line":"template<class _Traits>"},
{"lineNum":"  861","line":"basic_ostream<char, _Traits>&"},
{"lineNum":"  862","line":"operator<<(basic_ostream<char, _Traits>& __os, const signed char* __str)"},
{"lineNum":"  863","line":"{"},
{"lineNum":"  864","line":"    const char *__s = (const char *) __str;"},
{"lineNum":"  865","line":"    return _VSTD::__put_character_sequence(__os, __s, _Traits::length(__s));"},
{"lineNum":"  866","line":"}"},
{"lineNum":"  867","line":""},
{"lineNum":"  868","line":"template<class _Traits>"},
{"lineNum":"  869","line":"basic_ostream<char, _Traits>&"},
{"lineNum":"  870","line":"operator<<(basic_ostream<char, _Traits>& __os, const unsigned char* __str)"},
{"lineNum":"  871","line":"{"},
{"lineNum":"  872","line":"    const char *__s = (const char *) __str;"},
{"lineNum":"  873","line":"    return _VSTD::__put_character_sequence(__os, __s, _Traits::length(__s));"},
{"lineNum":"  874","line":"}"},
{"lineNum":"  875","line":""},
{"lineNum":"  876","line":"template <class _CharT, class _Traits>"},
{"lineNum":"  877","line":"basic_ostream<_CharT, _Traits>&"},
{"lineNum":"  878","line":"basic_ostream<_CharT, _Traits>::put(char_type __c)"},
{"lineNum":"  879","line":"{"},
{"lineNum":"  880","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  881","line":"    try"},
{"lineNum":"  882","line":"    {"},
{"lineNum":"  883","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  884","line":"        sentry __s(*this);"},
{"lineNum":"  885","line":"        if (__s)"},
{"lineNum":"  886","line":"        {"},
{"lineNum":"  887","line":"            typedef ostreambuf_iterator<_CharT, _Traits> _Op;"},
{"lineNum":"  888","line":"            _Op __o(*this);"},
{"lineNum":"  889","line":"            *__o = __c;"},
{"lineNum":"  890","line":"            if (__o.failed())"},
{"lineNum":"  891","line":"                this->setstate(ios_base::badbit);"},
{"lineNum":"  892","line":"        }"},
{"lineNum":"  893","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  894","line":"    }"},
{"lineNum":"  895","line":"    catch (...)"},
{"lineNum":"  896","line":"    {"},
{"lineNum":"  897","line":"        this->__set_badbit_and_consider_rethrow();"},
{"lineNum":"  898","line":"    }"},
{"lineNum":"  899","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  900","line":"    return *this;"},
{"lineNum":"  901","line":"}"},
{"lineNum":"  902","line":""},
{"lineNum":"  903","line":"template <class _CharT, class _Traits>"},
{"lineNum":"  904","line":"basic_ostream<_CharT, _Traits>&"},
{"lineNum":"  905","line":"basic_ostream<_CharT, _Traits>::write(const char_type* __s, streamsize __n)"},
{"lineNum":"  906","line":"{"},
{"lineNum":"  907","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  908","line":"    try"},
{"lineNum":"  909","line":"    {"},
{"lineNum":"  910","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  911","line":"        sentry __sen(*this);"},
{"lineNum":"  912","line":"        if (__sen && __n)"},
{"lineNum":"  913","line":"        {"},
{"lineNum":"  914","line":"            if (this->rdbuf()->sputn(__s, __n) != __n)"},
{"lineNum":"  915","line":"                this->setstate(ios_base::badbit);"},
{"lineNum":"  916","line":"        }"},
{"lineNum":"  917","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  918","line":"    }"},
{"lineNum":"  919","line":"    catch (...)"},
{"lineNum":"  920","line":"    {"},
{"lineNum":"  921","line":"        this->__set_badbit_and_consider_rethrow();"},
{"lineNum":"  922","line":"    }"},
{"lineNum":"  923","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  924","line":"    return *this;"},
{"lineNum":"  925","line":"}"},
{"lineNum":"  926","line":""},
{"lineNum":"  927","line":"template <class _CharT, class _Traits>"},
{"lineNum":"  928","line":"basic_ostream<_CharT, _Traits>&"},
{"lineNum":"  929","line":"basic_ostream<_CharT, _Traits>::flush()"},
{"lineNum":"  930","line":"{"},
{"lineNum":"  931","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  932","line":"    try"},
{"lineNum":"  933","line":"    {"},
{"lineNum":"  934","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  935","line":"        if (this->rdbuf())"},
{"lineNum":"  936","line":"        {"},
{"lineNum":"  937","line":"            sentry __s(*this);"},
{"lineNum":"  938","line":"            if (__s)"},
{"lineNum":"  939","line":"            {"},
{"lineNum":"  940","line":"                if (this->rdbuf()->pubsync() == -1)"},
{"lineNum":"  941","line":"                    this->setstate(ios_base::badbit);"},
{"lineNum":"  942","line":"            }"},
{"lineNum":"  943","line":"        }"},
{"lineNum":"  944","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  945","line":"    }"},
{"lineNum":"  946","line":"    catch (...)"},
{"lineNum":"  947","line":"    {"},
{"lineNum":"  948","line":"        this->__set_badbit_and_consider_rethrow();"},
{"lineNum":"  949","line":"    }"},
{"lineNum":"  950","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  951","line":"    return *this;"},
{"lineNum":"  952","line":"}"},
{"lineNum":"  953","line":""},
{"lineNum":"  954","line":"template <class _CharT, class _Traits>"},
{"lineNum":"  955","line":"typename basic_ostream<_CharT, _Traits>::pos_type"},
{"lineNum":"  956","line":"basic_ostream<_CharT, _Traits>::tellp()"},
{"lineNum":"  957","line":"{"},
{"lineNum":"  958","line":"    if (this->fail())"},
{"lineNum":"  959","line":"        return pos_type(-1);"},
{"lineNum":"  960","line":"    return this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);"},
{"lineNum":"  961","line":"}"},
{"lineNum":"  962","line":""},
{"lineNum":"  963","line":"template <class _CharT, class _Traits>"},
{"lineNum":"  964","line":"basic_ostream<_CharT, _Traits>&"},
{"lineNum":"  965","line":"basic_ostream<_CharT, _Traits>::seekp(pos_type __pos)"},
{"lineNum":"  966","line":"{"},
{"lineNum":"  967","line":"    sentry __s(*this);"},
{"lineNum":"  968","line":"    if (!this->fail())"},
{"lineNum":"  969","line":"    {"},
{"lineNum":"  970","line":"        if (this->rdbuf()->pubseekpos(__pos, ios_base::out) == pos_type(-1))"},
{"lineNum":"  971","line":"            this->setstate(ios_base::failbit);"},
{"lineNum":"  972","line":"    }"},
{"lineNum":"  973","line":"    return *this;"},
{"lineNum":"  974","line":"}"},
{"lineNum":"  975","line":""},
{"lineNum":"  976","line":"template <class _CharT, class _Traits>"},
{"lineNum":"  977","line":"basic_ostream<_CharT, _Traits>&"},
{"lineNum":"  978","line":"basic_ostream<_CharT, _Traits>::seekp(off_type __off, ios_base::seekdir __dir)"},
{"lineNum":"  979","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  980","line":"    sentry __s(*this);","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  981","line":"    if (!this->fail())","class":"lineNoCov","hits":"0","possible_hits":"28",},
{"lineNum":"  982","line":"    {"},
{"lineNum":"  983","line":"        if (this->rdbuf()->pubseekoff(__off, __dir, ios_base::out) == pos_type(-1))","class":"lineNoCov","hits":"0","possible_hits":"17",},
{"lineNum":"  984","line":"            this->setstate(ios_base::failbit);","class":"lineNoCov","hits":"0","possible_hits":"15",},
{"lineNum":"  985","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  986","line":"    return *this;"},
{"lineNum":"  987","line":"}","class":"lineNoCov","hits":"0","possible_hits":"27",},
{"lineNum":"  988","line":""},
{"lineNum":"  989","line":"template <class _CharT, class _Traits>"},
{"lineNum":"  990","line":"inline"},
{"lineNum":"  991","line":"basic_ostream<_CharT, _Traits>&"},
{"lineNum":"  992","line":"endl(basic_ostream<_CharT, _Traits>& __os)"},
{"lineNum":"  993","line":"{","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  994","line":"    __os.put(__os.widen(\'\\n\'));","class":"lineNoCov","hits":"0","possible_hits":"90",},
{"lineNum":"  995","line":"    __os.flush();","class":"lineNoCov","hits":"0","possible_hits":"44",},
{"lineNum":"  996","line":"    return __os;","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  997","line":"}"},
{"lineNum":"  998","line":""},
{"lineNum":"  999","line":"template <class _CharT, class _Traits>"},
{"lineNum":" 1000","line":"inline"},
{"lineNum":" 1001","line":"basic_ostream<_CharT, _Traits>&"},
{"lineNum":" 1002","line":"ends(basic_ostream<_CharT, _Traits>& __os)"},
{"lineNum":" 1003","line":"{"},
{"lineNum":" 1004","line":"    __os.put(_CharT());","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":" 1005","line":"    return __os;"},
{"lineNum":" 1006","line":"}"},
{"lineNum":" 1007","line":""},
{"lineNum":" 1008","line":"template <class _CharT, class _Traits>"},
{"lineNum":" 1009","line":"inline"},
{"lineNum":" 1010","line":"basic_ostream<_CharT, _Traits>&"},
{"lineNum":" 1011","line":"flush(basic_ostream<_CharT, _Traits>& __os)"},
{"lineNum":" 1012","line":"{"},
{"lineNum":" 1013","line":"    __os.flush();"},
{"lineNum":" 1014","line":"    return __os;"},
{"lineNum":" 1015","line":"}"},
{"lineNum":" 1016","line":""},
{"lineNum":" 1017","line":"template <class _Stream, class _Tp, class = void>"},
{"lineNum":" 1018","line":"struct __is_ostreamable : false_type { };"},
{"lineNum":" 1019","line":""},
{"lineNum":" 1020","line":"template <class _Stream, class _Tp>"},
{"lineNum":" 1021","line":"struct __is_ostreamable<_Stream, _Tp, decltype("},
{"lineNum":" 1022","line":"    declval<_Stream>() << declval<_Tp>(), void()"},
{"lineNum":" 1023","line":")> : true_type { };"},
{"lineNum":" 1024","line":""},
{"lineNum":" 1025","line":"template <class _Stream, class _Tp, class = typename enable_if<"},
{"lineNum":" 1026","line":"    _And<is_base_of<ios_base, _Stream>,"},
{"lineNum":" 1027","line":"         __is_ostreamable<_Stream&, const _Tp&> >::value"},
{"lineNum":" 1028","line":">::type>"},
{"lineNum":" 1029","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1030","line":"_Stream&& operator<<(_Stream&& __os, const _Tp& __x)"},
{"lineNum":" 1031","line":"{"},
{"lineNum":" 1032","line":"    __os << __x;"},
{"lineNum":" 1033","line":"    return _VSTD::move(__os);"},
{"lineNum":" 1034","line":"}"},
{"lineNum":" 1035","line":""},
{"lineNum":" 1036","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 1037","line":"basic_ostream<_CharT, _Traits>&"},
{"lineNum":" 1038","line":"operator<<(basic_ostream<_CharT, _Traits>& __os,"},
{"lineNum":" 1039","line":"           const basic_string<_CharT, _Traits, _Allocator>& __str)"},
{"lineNum":" 1040","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1041","line":"    return _VSTD::__put_character_sequence(__os, __str.data(), __str.size());","class":"lineNoCov","hits":"0","possible_hits":"114",},
{"lineNum":" 1042","line":"}"},
{"lineNum":" 1043","line":""},
{"lineNum":" 1044","line":"template<class _CharT, class _Traits>"},
{"lineNum":" 1045","line":"basic_ostream<_CharT, _Traits>&"},
{"lineNum":" 1046","line":"operator<<(basic_ostream<_CharT, _Traits>& __os,"},
{"lineNum":" 1047","line":"           basic_string_view<_CharT, _Traits> __sv)"},
{"lineNum":" 1048","line":"{"},
{"lineNum":" 1049","line":"    return _VSTD::__put_character_sequence(__os, __sv.data(), __sv.size());"},
{"lineNum":" 1050","line":"}"},
{"lineNum":" 1051","line":""},
{"lineNum":" 1052","line":"template <class _CharT, class _Traits>"},
{"lineNum":" 1053","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1054","line":"basic_ostream<_CharT, _Traits>&"},
{"lineNum":" 1055","line":"operator<<(basic_ostream<_CharT, _Traits>& __os, const error_code& __ec)"},
{"lineNum":" 1056","line":"{"},
{"lineNum":" 1057","line":"    return __os << __ec.category().name() << \':\' << __ec.value();"},
{"lineNum":" 1058","line":"}"},
{"lineNum":" 1059","line":""},
{"lineNum":" 1060","line":"template<class _CharT, class _Traits, class _Yp>"},
{"lineNum":" 1061","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1062","line":"basic_ostream<_CharT, _Traits>&"},
{"lineNum":" 1063","line":"operator<<(basic_ostream<_CharT, _Traits>& __os, shared_ptr<_Yp> const& __p)"},
{"lineNum":" 1064","line":"{"},
{"lineNum":" 1065","line":"    return __os << __p.get();"},
{"lineNum":" 1066","line":"}"},
{"lineNum":" 1067","line":""},
{"lineNum":" 1068","line":"template<class _CharT, class _Traits, class _Yp, class _Dp>"},
{"lineNum":" 1069","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1070","line":"typename enable_if"},
{"lineNum":" 1071","line":"<"},
{"lineNum":" 1072","line":"    is_same<void, typename __void_t<decltype((declval<basic_ostream<_CharT, _Traits>&>() << declval<typename unique_ptr<_Yp, _Dp>::pointer>()))>::type>::value,"},
{"lineNum":" 1073","line":"    basic_ostream<_CharT, _Traits>&"},
{"lineNum":" 1074","line":">::type"},
{"lineNum":" 1075","line":"operator<<(basic_ostream<_CharT, _Traits>& __os, unique_ptr<_Yp, _Dp> const& __p)"},
{"lineNum":" 1076","line":"{"},
{"lineNum":" 1077","line":"    return __os << __p.get();"},
{"lineNum":" 1078","line":"}"},
{"lineNum":" 1079","line":""},
{"lineNum":" 1080","line":"template <class _CharT, class _Traits, size_t _Size>"},
{"lineNum":" 1081","line":"basic_ostream<_CharT, _Traits>&"},
{"lineNum":" 1082","line":"operator<<(basic_ostream<_CharT, _Traits>& __os, const bitset<_Size>& __x)"},
{"lineNum":" 1083","line":"{"},
{"lineNum":" 1084","line":"    return __os << __x.template to_string<_CharT, _Traits>"},
{"lineNum":" 1085","line":"                        (use_facet<ctype<_CharT> >(__os.getloc()).widen(\'0\'),"},
{"lineNum":" 1086","line":"                         use_facet<ctype<_CharT> >(__os.getloc()).widen(\'1\'));"},
{"lineNum":" 1087","line":"}"},
{"lineNum":" 1088","line":""},
{"lineNum":" 1089","line":"_LIBCPP_EXTERN_TEMPLATE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS basic_ostream<char>)"},
{"lineNum":" 1090","line":"_LIBCPP_EXTERN_TEMPLATE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS basic_ostream<wchar_t>)"},
{"lineNum":" 1091","line":""},
{"lineNum":" 1092","line":"_LIBCPP_END_NAMESPACE_STD"},
{"lineNum":" 1093","line":""},
{"lineNum":" 1094","line":"#endif // _LIBCPP_OSTREAM"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 36, "covered" : 0,};
var merged_data = [];
