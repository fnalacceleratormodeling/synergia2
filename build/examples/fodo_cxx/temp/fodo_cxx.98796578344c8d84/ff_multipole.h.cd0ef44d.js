var data = {lines:[
{"lineNum":"    1","line":"#ifndef FF_MULTIPOLE_H"},
{"lineNum":"    2","line":"#define FF_MULTIPOLE_H"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#include \"synergia/libFF/ff_algorithm.h\""},
{"lineNum":"    5","line":"#include \"synergia/utils/simple_timer.h\""},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"namespace mpole_impl"},
{"lineNum":"    8","line":"{"},
{"lineNum":"    9","line":"    constexpr const int max_order = 8;"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"    struct MultipoleParams"},
{"lineNum":"   12","line":"    {"},
{"lineNum":"   13","line":"        bool kn[max_order];"},
{"lineNum":"   14","line":"        double kl[max_order*2];"},
{"lineNum":"   15","line":"    };"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"    inline void zero_params(MultipoleParams & mp)"},
{"lineNum":"   18","line":"    {"},
{"lineNum":"   19","line":"        for(int i=0; i<max_order; ++i)"},
{"lineNum":"   20","line":"        {"},
{"lineNum":"   21","line":"            mp.kn[i] = false;"},
{"lineNum":"   22","line":"            mp.kl[i*2+0] = 0.0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   23","line":"            mp.kl[i*2+1] = 0.0;"},
{"lineNum":"   24","line":"        }"},
{"lineNum":"   25","line":"    }"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"    template<class BP>"},
{"lineNum":"   28","line":"    struct PropMultipole","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   29","line":"    {"},
{"lineNum":"   30","line":"        using gsv_t = typename BP::gsv_t;"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"        typename BP::parts_t p;"},
{"lineNum":"   33","line":"        typename BP::const_masks_t masks;"},
{"lineNum":"   34","line":"        const MultipoleParams mp;"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   37","line":"        void operator()(const int idx) const"},
{"lineNum":"   38","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   39","line":"            int i = idx * gsv_t::size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"            int m = 0;"},
{"lineNum":"   42","line":"            for(int x=i; x<i+gsv_t::size(); ++x) m |= masks(x);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"            if (m)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   45","line":"            {"},
{"lineNum":"   46","line":"                gsv_t p0(&p(i,0));"},
{"lineNum":"   47","line":"                gsv_t p1(&p(i,1));"},
{"lineNum":"   48","line":"                gsv_t p2(&p(i,2));"},
{"lineNum":"   49","line":"                gsv_t p3(&p(i,3));"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"                if (mp.kn[0])","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   52","line":"                    FF_algorithm::thin_dipole_unit("},
{"lineNum":"   53","line":"                            p0, p1, p2, p3, &mp.kl[0]);"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"                if (mp.kn[1])","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   56","line":"                    FF_algorithm::thin_quadrupole_unit("},
{"lineNum":"   57","line":"                            p0, p1, p2, p3, &mp.kl[2]);"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"                if (mp.kn[2])","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   60","line":"                    FF_algorithm::thin_sextupole_unit("},
{"lineNum":"   61","line":"                            p0, p1, p2, p3, &mp.kl[4]);"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"                if (mp.kn[3])","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   64","line":"                    FF_algorithm::thin_octupole_unit(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   65","line":"                            p0, p1, p2, p3, &mp.kl[6]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"                for(int n=4; n<max_order; ++n)"},
{"lineNum":"   68","line":"                {"},
{"lineNum":"   69","line":"                    if (mp.kn[n])","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   70","line":"                        FF_algorithm::thin_magnet_unit(","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   71","line":"                                p0, p1, p2, p3, &mp.kl[n*2], n+1);","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   72","line":"                }"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"                p1.store(&p(i,1));"},
{"lineNum":"   75","line":"                p3.store(&p(i,3));"},
{"lineNum":"   76","line":"            }"},
{"lineNum":"   77","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   78","line":"    };"},
{"lineNum":"   79","line":"}"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"namespace FF_multipole"},
{"lineNum":"   82","line":"{"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"    template<class BunchT>"},
{"lineNum":"   85","line":"    inline void apply(Lattice_element_slice const& slice, BunchT& bunch)"},
{"lineNum":"   86","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   87","line":"        using namespace mpole_impl;"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"        scoped_simple_timer timer(\"libFF_multipole\");"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"        if (slice.get_right() - slice.get_left() > 0.0)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   92","line":"            throw std::runtime_error(\"FF_multipole::apply() cannot deal with thick elements\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"        MultipoleParams mp;"},
{"lineNum":"   95","line":"        zero_params(mp);"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"        std::vector<double> knl;"},
{"lineNum":"   98","line":"        std::vector<double> ksl;"},
{"lineNum":"   99","line":"        std::vector<double> tn;"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"        auto const& element = slice.get_lattice_element();"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"        // extract attributes"},
{"lineNum":"  104","line":"        if ( element.has_vector_attribute(\"knl\")","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  105","line":"                || element.has_vector_attribute(\"ksl\") )","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  106","line":"        {"},
{"lineNum":"  107","line":"            // it is in Mad X format"},
{"lineNum":"  108","line":"            std::vector<double> k0(1, 0.0);"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"            knl = element.get_vector_attribute(\"knl\", k0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  111","line":"            ksl = element.get_vector_attribute(\"ksl\", k0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"            if (knl.size() > ksl.size()) ksl.resize(knl.size(), 0.0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  114","line":"            else if (knl.size() < ksl.size()) knl.resize(ksl.size(), 0.0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"            double tilt = element.get_double_attribute(\"tilt\", 0.0);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  117","line":"            tn.resize(knl.size(), tilt);"},
{"lineNum":"  118","line":"        }"},
{"lineNum":"  119","line":"        else"},
{"lineNum":"  120","line":"        {"},
{"lineNum":"  121","line":"            // in Mad 8 format"},
{"lineNum":"  122","line":"            std::string skn(\"k0l\");"},
{"lineNum":"  123","line":"            std::string stn(\"t0\");"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"            for (int i=0; i<6; ++i)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  126","line":"            {"},
{"lineNum":"  127","line":"                skn[1] = \'0\' + i;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  128","line":"                stn[1] = \'0\' + i;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"                knl.push_back( element.get_double_attribute(skn, 0.0) );","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  131","line":"                 tn.push_back( element.get_double_attribute(stn, 0.0) );","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  132","line":"            }"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"            int tail = knl.size()-1;"},
{"lineNum":"  135","line":"            while (tail && knl[tail] == 0.0) --tail;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"            knl.resize(tail+1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  138","line":"            ksl.resize(knl.size(), 0.0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  139","line":"             tn.resize(knl.size(), 0.0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  140","line":"        }"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"        // tilting"},
{"lineNum":"  143","line":"        for (int i=0; i<knl.size(); ++i)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  144","line":"        {"},
{"lineNum":"  145","line":"            if (tn[i] != 0.0)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  146","line":"            {"},
{"lineNum":"  147","line":"                std::complex<double> ck2(knl[i], ksl[i]);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  148","line":"                ck2 = ck2 * exp(std::complex<double>(0.0, -(i+1)*tn[i]));","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  149","line":"                knl[i] = ck2.real();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  150","line":"                ksl[i] = ck2.imag();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  151","line":"            }"},
{"lineNum":"  152","line":"        }"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"        // scaling"},
{"lineNum":"  155","line":"        Reference_particle       & ref_l = bunch.get_design_reference_particle();"},
{"lineNum":"  156","line":"        Reference_particle const & ref_b = bunch.get_reference_particle();"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"        double brho_l = ref_l.get_momentum() / ref_l.get_charge();  // GV/c","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  159","line":"        double brho_b = ref_b.get_momentum()","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  160","line":"                        * (1.0 + ref_b.get_state()[Bunch::dpop])","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  161","line":"                        / ref_l.get_charge();  // GV/c","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"        // scale"},
{"lineNum":"  164","line":"        double scale = brho_l / brho_b;"},
{"lineNum":"  165","line":"        for (int i=0; i<knl.size(); ++i)","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  166","line":"        {"},
{"lineNum":"  167","line":"            knl[i] *= scale;","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  168","line":"            ksl[i] *= scale;","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  169","line":"        }"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"        // prepare the params"},
{"lineNum":"  172","line":"        for (int i=0; i<knl.size(); ++i)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  173","line":"        {"},
{"lineNum":"  174","line":"            if (knl[i] || ksl[i]) mp.kn[i] = true;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"            mp.kl[i*2+0] = knl[i];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  177","line":"            mp.kl[i*2+1] = ksl[i];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  178","line":"        }"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"        // propagate and update the design reference particle"},
{"lineNum":"  181","line":"        double x  = ref_l.get_state()[Bunch::x];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  182","line":"        double xp = ref_l.get_state()[Bunch::xp];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  183","line":"        double y  = ref_l.get_state()[Bunch::y];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  184","line":"        double yp = ref_l.get_state()[Bunch::yp];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  185","line":"        double dpop = ref_l.get_state()[Bunch::dpop];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"        for (int n = 0; n < max_order; ++n) {"},
{"lineNum":"  188","line":"            if (mp.kn[n]) {","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"  189","line":"                FF_algorithm::thin_magnet_unit(x, xp, y, yp, &mp.kl[n*2], n+1);","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"  190","line":"            }"},
{"lineNum":"  191","line":"        }"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"        ref_l.set_state(x, xp, y, yp, 0.0, dpop);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"        // bunch particles"},
{"lineNum":"  196","line":"        auto apply = [&](ParticleGroup pg) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  197","line":"            if(!bunch.get_local_num(pg)) return;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"            auto parts = bunch.get_local_particles(pg);"},
{"lineNum":"  200","line":"            auto masks = bunch.get_local_particle_masks(pg);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"            using exec = typename BunchT::exec_space;"},
{"lineNum":"  203","line":"            auto range = Kokkos::RangePolicy<exec>(0, bunch.size_in_gsv(pg));","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  204","line":"            PropMultipole<typename BunchT::bp_t> multipole{parts, masks, mp};","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  205","line":"            Kokkos::parallel_for(range, multipole);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  206","line":"        };","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"        apply(ParticleGroup::regular);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  209","line":"        apply(ParticleGroup::spectator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  210","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  211","line":"}"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"#endif // FF_MULTIPOLE_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 70, "covered" : 0,};
var merged_data = [];
