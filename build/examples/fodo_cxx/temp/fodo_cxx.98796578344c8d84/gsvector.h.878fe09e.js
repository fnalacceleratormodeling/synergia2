var data = {lines:[
{"lineNum":"    1","line":"// Generic SIMD Vector"},
{"lineNum":"    2","line":"#ifndef GSVECTOR_H_"},
{"lineNum":"    3","line":"#define GSVECTOR_H_"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"#include \"synergia/foundation/trigon_traits.h\""},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"#if 0"},
{"lineNum":"    8","line":"#undef GSV_SSE"},
{"lineNum":"    9","line":"#undef GSV_AVX"},
{"lineNum":"   10","line":"#undef GSV_V4D"},
{"lineNum":"   11","line":"#undef GSV_MIC"},
{"lineNum":"   12","line":"#undef GSV_AVX512"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"#define GSV_AVX"},
{"lineNum":"   15","line":"#endif"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"// no simd when build for CUDA"},
{"lineNum":"   18","line":"#ifdef Kokkos_ENABLE_CUDA"},
{"lineNum":"   19","line":"  #undef GSV_SSE"},
{"lineNum":"   20","line":"  #undef GSV_AVX"},
{"lineNum":"   21","line":"  #undef GSV_V4D"},
{"lineNum":"   22","line":"  #undef GSV_MIC"},
{"lineNum":"   23","line":"#endif"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"// helper"},
{"lineNum":"   26","line":"namespace detail"},
{"lineNum":"   27","line":"{"},
{"lineNum":"   28","line":"    template <class T, class E = void>"},
{"lineNum":"   29","line":"    struct VectorHelper"},
{"lineNum":"   30","line":"    {"},
{"lineNum":"   31","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   32","line":"        static constexpr int size() { return 1; }"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   35","line":"        static T ld(const double *p) { return *p; }","class":"lineNoCov","hits":"0","possible_hits":"57",},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   38","line":"        static void st(double * p, const T & v) { *p = v; }","class":"lineNoCov","hits":"0","possible_hits":"28",},
{"lineNum":"   39","line":"    };"},
{"lineNum":"   40","line":"}"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"// expression class"},
{"lineNum":"   43","line":"template <typename E, class T>"},
{"lineNum":"   44","line":"struct VecExpr"},
{"lineNum":"   45","line":"{"},
{"lineNum":"   46","line":"    typedef T vec_t;"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   49","line":"    vec_t cal() const"},
{"lineNum":"   50","line":"    { return static_cast<E const&>(*this).cal(); }"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   53","line":"    operator E& ()"},
{"lineNum":"   54","line":"    { return static_cast<E &>(*this); }"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   57","line":"    operator E const& () const"},
{"lineNum":"   58","line":"    { return reinterpret_cast<const E&>(*this); }"},
{"lineNum":"   59","line":"    //{ return static_cast<const E &>(*this); }"},
{"lineNum":"   60","line":"};"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"// the vector wrapper base class"},
{"lineNum":"   63","line":"template<class T>"},
{"lineNum":"   64","line":"struct Vec : public VecExpr<Vec<T>, T>"},
{"lineNum":"   65","line":"{"},
{"lineNum":"   66","line":"    using data_t = T;"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"    T data;"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   71","line":"    static constexpr int size() { return detail::VectorHelper<T>::size(); }"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"    template<typename U = T>"},
{"lineNum":"   74","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   75","line":"    Vec(const T * t, typename std::enable_if<is_trigon<U>::value>::type* = 0)"},
{"lineNum":"   76","line":"    : data(*t) { }","class":"lineNoCov","hits":"0","possible_hits":"161",},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   79","line":"    Vec(const double   d) : data( d ) { }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   82","line":"    Vec(const double * p) : data( detail::VectorHelper<T>::ld(p) ) { }","class":"lineNoCov","hits":"0","possible_hits":"35",},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   85","line":"    void load (const double *p) { data = detail::VectorHelper<T>::ld(p); }"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   88","line":"    void store(double *p) const { detail::VectorHelper<T>::st(p, data); }"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"    template<typename U = T>"},
{"lineNum":"   91","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   92","line":"    void store(T *p, typename std::enable_if<is_trigon<U>::value>::type* = 0) const"},
{"lineNum":"   93","line":"    { *p = data; }","class":"lineNoCov","hits":"0","possible_hits":"101",},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   96","line":"    T & cal()       { return data; }"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   99","line":"    T   cal() const { return data; }","class":"lineNoCov","hits":"0","possible_hits":"886",},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"    template <typename E>"},
{"lineNum":"  102","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  103","line":"    Vec(VecExpr<E, T> const & vec)"},
{"lineNum":"  104","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"  105","line":"        E const& v = vec;"},
{"lineNum":"  106","line":"        data = v.cal();","class":"lineNoCov","hits":"0","possible_hits":"254",},
{"lineNum":"  107","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"40",},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"#if 0"},
{"lineNum":"  110","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  111","line":"    operator double() const"},
{"lineNum":"  112","line":"    { return data; }"},
{"lineNum":"  113","line":"#endif"},
{"lineNum":"  114","line":"};"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"template<class T>"},
{"lineNum":"  117","line":"bool operator== (Vec<T> const& lhs, double rhs)"},
{"lineNum":"  118","line":"{ return lhs.data == rhs; }","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"template<class T>"},
{"lineNum":"  121","line":"bool operator< (Vec<T> const& lhs, double rhs)"},
{"lineNum":"  122","line":"{ return lhs.data < rhs; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"template<class T>"},
{"lineNum":"  125","line":"bool operator> (Vec<T> const& lhs, double rhs)"},
{"lineNum":"  126","line":"{ return lhs.data > rhs; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"template<class T>"},
{"lineNum":"  129","line":"bool operator<= (Vec<T> const& lhs, double rhs)"},
{"lineNum":"  130","line":"{ return lhs.data <= rhs; }"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"template<class T>"},
{"lineNum":"  133","line":"bool operator>= (Vec<T> const& lhs, double rhs)"},
{"lineNum":"  134","line":"{ return lhs.data >= rhs; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"// expression classes"},
{"lineNum":"  139","line":"template <typename E1, typename E2, class T, class E = void>"},
{"lineNum":"  140","line":"struct VecAdd : public VecExpr<VecAdd<E1, E2, T>, T>"},
{"lineNum":"  141","line":"{"},
{"lineNum":"  142","line":"    E1 const& _u; E2 const& _v;"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  145","line":"    VecAdd(VecExpr<E1, T> const& u, VecExpr<E2, T> const& v)"},
{"lineNum":"  146","line":"    : _u(u), _v(v) { }"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  149","line":"    typename VecExpr<VecAdd<E1, E2, T>, T>::vec_t cal() const"},
{"lineNum":"  150","line":"    { return _u.cal() + _v.cal(); }","class":"lineNoCov","hits":"0","possible_hits":"209",},
{"lineNum":"  151","line":"};"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"template <typename E1, typename E2, class T>"},
{"lineNum":"  154","line":"struct VecSub : public VecExpr<VecSub<E1, E2, T>, T>"},
{"lineNum":"  155","line":"{"},
{"lineNum":"  156","line":"    E1 const& _u; E2 const& _v;"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  159","line":"    VecSub(VecExpr<E1, T> const& u, VecExpr<E2, T> const& v)"},
{"lineNum":"  160","line":"    : _u(u), _v(v) { }"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  163","line":"    typename VecExpr<VecSub<E1, E2, T>, T>::vec_t cal() const"},
{"lineNum":"  164","line":"    { return _u.cal() - _v.cal(); }","class":"lineNoCov","hits":"0","possible_hits":"145",},
{"lineNum":"  165","line":"};"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"template <typename E1, typename E2, class T>"},
{"lineNum":"  168","line":"struct VecMul : public VecExpr<VecMul<E1, E2, T>, T>"},
{"lineNum":"  169","line":"{"},
{"lineNum":"  170","line":"    E1 const& _u; E2 const& _v;"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  173","line":"    VecMul(VecExpr<E1, T> const& u, VecExpr<E2, T> const& v)"},
{"lineNum":"  174","line":"    : _u(u), _v(v) { }"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  177","line":"    typename VecExpr<VecMul<E1, E2, T>, T>::vec_t cal() const"},
{"lineNum":"  178","line":"    { return _u.cal() * _v.cal(); }","class":"lineNoCov","hits":"0","possible_hits":"504",},
{"lineNum":"  179","line":"};"},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"template <typename E1, typename E2, class T>"},
{"lineNum":"  182","line":"struct VecDiv : public VecExpr<VecDiv<E1, E2, T>, T>"},
{"lineNum":"  183","line":"{"},
{"lineNum":"  184","line":"    E1 const& _u; E2 const& _v;"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  187","line":"    VecDiv(VecExpr<E1, T> const& u, VecExpr<E2, T> const& v)"},
{"lineNum":"  188","line":"    : _u(u), _v(v) { }"},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  191","line":"    typename VecExpr<VecDiv<E1, E2, T>, T>::vec_t cal() const"},
{"lineNum":"  192","line":"    { return _u.cal() / _v.cal(); }","class":"lineNoCov","hits":"0","possible_hits":"101",},
{"lineNum":"  193","line":"};"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"#if 0"},
{"lineNum":"  196","line":"template <typename E1, typename E2, class T>"},
{"lineNum":"  197","line":"struct VecAddAssign : public VecExpr<VecAddAssign<E1, E2, T>, T>"},
{"lineNum":"  198","line":"{"},
{"lineNum":"  199","line":"    E1& _u; E2 const& _v;"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  202","line":"    VecAddAssign(VecExpr<E1, T>& u, VecExpr<E2, T> const& v)"},
{"lineNum":"  203","line":"    : _u(u), _v(v) { }"},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  206","line":"    typename VecExpr<VecAddAssign<E1, E2, T>, T>::vec_t cal()"},
{"lineNum":"  207","line":"    { _u.cal() = _u.cal() + _v.cal(); return _u; }"},
{"lineNum":"  208","line":"};"},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"template <typename E1, typename E2, class T>"},
{"lineNum":"  211","line":"struct VecSubAssign : public VecExpr<VecSubAssign<E1, E2, T>, T>"},
{"lineNum":"  212","line":"{"},
{"lineNum":"  213","line":"    E1& _u; E2 const& _v;"},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  216","line":"    VecSubAssign(VecExpr<E1, T>& u, VecExpr<E2, T> const& v)"},
{"lineNum":"  217","line":"    : _u(u), _v(v) { }"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  220","line":"    typename VecExpr<VecSubAssign<E1, E2, T>, T>::vec_t cal()"},
{"lineNum":"  221","line":"    { _u = _u.cal() - _v.cal(); return _u; }"},
{"lineNum":"  222","line":"};"},
{"lineNum":"  223","line":"#endif"},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"template <typename E, class T>"},
{"lineNum":"  226","line":"struct VecNeg : public VecExpr<VecNeg<E, T>, T>"},
{"lineNum":"  227","line":"{"},
{"lineNum":"  228","line":"    E const& _u;"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  231","line":"    VecNeg(VecExpr<E, T> const& u) : _u(u) { }"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  234","line":"    typename VecExpr<VecNeg<E, T>, T>::vec_t cal() const"},
{"lineNum":"  235","line":"    { return -(_u.cal()); }","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  236","line":"};"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"template <typename E, class T>"},
{"lineNum":"  239","line":"struct VecSqrt : public VecExpr<VecSqrt<E, T>, T>"},
{"lineNum":"  240","line":"{"},
{"lineNum":"  241","line":"    E const& _u;"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  244","line":"    VecSqrt(VecExpr<E, T> const& u) : _u(u) { }"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  247","line":"    typename VecExpr<VecSqrt<E, T>, T>::vec_t cal() const"},
{"lineNum":"  248","line":"    { return sqrt(_u.cal()); }","class":"lineNoCov","hits":"0","possible_hits":"35",},
{"lineNum":"  249","line":"};"},
{"lineNum":"  250","line":""},
{"lineNum":"  251","line":"template <typename E, class T>"},
{"lineNum":"  252","line":"struct VecLog: public VecExpr<VecLog<E, T>, T>"},
{"lineNum":"  253","line":"{"},
{"lineNum":"  254","line":"    E const& _u;"},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  257","line":"    VecLog(VecExpr<E, T> const& u) : _u(u) { }"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  260","line":"    typename VecExpr<VecLog<E, T>, T>::vec_t cal() const"},
{"lineNum":"  261","line":"    { return log(_u.cal()); }","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  262","line":"};"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"template <typename E, class T>"},
{"lineNum":"  265","line":"struct VecExp: public VecExpr<VecExp<E, T>, T>"},
{"lineNum":"  266","line":"{"},
{"lineNum":"  267","line":"    E const& _u;"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  270","line":"    VecExp(VecExpr<E, T> const& u) : _u(u) { }"},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  273","line":"    typename VecExpr<VecExp<E, T>, T>::vec_t cal() const"},
{"lineNum":"  274","line":"    { return exp(_u.cal()); }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  275","line":"};"},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"template <typename E, class T>"},
{"lineNum":"  278","line":"struct VecSin: public VecExpr<VecSin<E, T>, T>"},
{"lineNum":"  279","line":"{"},
{"lineNum":"  280","line":"    E const& _u;"},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  283","line":"    VecSin(VecExpr<E, T> const& u) : _u(u) { }"},
{"lineNum":"  284","line":""},
{"lineNum":"  285","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  286","line":"    typename VecExpr<VecSin<E, T>, T>::vec_t cal() const"},
{"lineNum":"  287","line":"    { return sin(_u.cal()); }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  288","line":"};"},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"template <typename E, class T>"},
{"lineNum":"  291","line":"struct VecCos: public VecExpr<VecCos<E, T>, T>"},
{"lineNum":"  292","line":"{"},
{"lineNum":"  293","line":"    E const& _u;"},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  296","line":"    VecCos(VecExpr<E, T> const& u) : _u(u) { }"},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  299","line":"    typename VecExpr<VecCos<E, T>, T>::vec_t cal() const"},
{"lineNum":"  300","line":"    { return cos(_u.cal()); }"},
{"lineNum":"  301","line":"};"},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"template <typename E, class T>"},
{"lineNum":"  304","line":"struct VecAsin : public VecExpr<VecAsin<E, T>, T>"},
{"lineNum":"  305","line":"{"},
{"lineNum":"  306","line":"    E const& _u;"},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  309","line":"    VecAsin(VecExpr<E, T> const& u) : _u(u) { }"},
{"lineNum":"  310","line":""},
{"lineNum":"  311","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  312","line":"    typename VecExpr<VecAsin<E, T>, T>::vec_t cal() const"},
{"lineNum":"  313","line":"    { return asin(_u.cal()); }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  314","line":"};"},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":"template <typename E, class T>"},
{"lineNum":"  317","line":"struct VecAtan : public VecExpr<VecAtan<E, T>, T>"},
{"lineNum":"  318","line":"{"},
{"lineNum":"  319","line":"    E const& _u;"},
{"lineNum":"  320","line":""},
{"lineNum":"  321","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  322","line":"    VecAtan(VecExpr<E, T> const& u) : _u(u) { }"},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  325","line":"    typename VecExpr<VecAtan<E, T>, T>::vec_t cal() const"},
{"lineNum":"  326","line":"    { return atan(_u.cal()); }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  327","line":"};"},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"// overload operators"},
{"lineNum":"  330","line":"//"},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"template <typename E1, typename E2, class T>"},
{"lineNum":"  333","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  334","line":"VecAdd<E1, E2, T> const"},
{"lineNum":"  335","line":"operator+ (VecExpr<E1, T> const & u, VecExpr<E2, T> const & v)"},
{"lineNum":"  336","line":"{ return VecAdd<E1, E2, T>(u, v); }"},
{"lineNum":"  337","line":""},
{"lineNum":"  338","line":"template <typename E1, typename E2, class T>"},
{"lineNum":"  339","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  340","line":"VecSub<E1, E2, T> const"},
{"lineNum":"  341","line":"operator- (VecExpr<E1, T> const & u, VecExpr<E2, T> const & v)"},
{"lineNum":"  342","line":"{ return VecSub<E1, E2, T>(u, v); }"},
{"lineNum":"  343","line":""},
{"lineNum":"  344","line":"template <typename E1, typename E2, class T>"},
{"lineNum":"  345","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  346","line":"VecMul<E1, E2, T> const"},
{"lineNum":"  347","line":"operator* (VecExpr<E1, T> const & u, VecExpr<E2, T> const & v)"},
{"lineNum":"  348","line":"{ return VecMul<E1, E2, T>(u, v); }"},
{"lineNum":"  349","line":""},
{"lineNum":"  350","line":"template <typename E1, typename E2, class T>"},
{"lineNum":"  351","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  352","line":"VecDiv<E1, E2, T> const"},
{"lineNum":"  353","line":"operator/ (VecExpr<E1, T> const & u, VecExpr<E2, T> const & v)"},
{"lineNum":"  354","line":"{ return VecDiv<E1, E2, T>(u, v); }"},
{"lineNum":"  355","line":""},
{"lineNum":"  356","line":"#if 0"},
{"lineNum":"  357","line":"template <typename E1, typename E2, class T>"},
{"lineNum":"  358","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  359","line":"VecAddAssign<E1, E2, T> const"},
{"lineNum":"  360","line":"operator+= (VecExpr<E1, T>      & u, VecExpr<E2, T> const & v)"},
{"lineNum":"  361","line":"{ return VecAddAssign<E1, E2, T>(u, v); }"},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"template <typename E1, typename E2, class T>"},
{"lineNum":"  364","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  365","line":"VecSubAssign<E1, E2, T> const"},
{"lineNum":"  366","line":"operator-= (VecExpr<E1, T>      & u, VecExpr<E2, T> const & v)"},
{"lineNum":"  367","line":"{ return VecSubAssign<E1, E2, T>(u, v); }"},
{"lineNum":"  368","line":"#endif"},
{"lineNum":"  369","line":""},
{"lineNum":"  370","line":"template <typename E, class T>"},
{"lineNum":"  371","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  372","line":"VecNeg<E, T> const"},
{"lineNum":"  373","line":"operator- (VecExpr<E, T> const & u)"},
{"lineNum":"  374","line":"{ return VecNeg<E, T>(u); }"},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"template <typename E, class T>"},
{"lineNum":"  377","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  378","line":"VecSqrt<E, T> const"},
{"lineNum":"  379","line":"sqrt (VecExpr<E, T> const & u)"},
{"lineNum":"  380","line":"{ return VecSqrt<E, T>(u); }"},
{"lineNum":"  381","line":""},
{"lineNum":"  382","line":"template <typename E, class T>"},
{"lineNum":"  383","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  384","line":"VecLog<E, T> const"},
{"lineNum":"  385","line":"log (VecExpr<E, T> const & u)"},
{"lineNum":"  386","line":"{ return VecLog<E, T>(u); }"},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"template <typename E, class T>"},
{"lineNum":"  389","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  390","line":"VecExp<E, T> const"},
{"lineNum":"  391","line":"exp (VecExpr<E, T> const & u)"},
{"lineNum":"  392","line":"{ return VecExp<E, T>(u); }"},
{"lineNum":"  393","line":""},
{"lineNum":"  394","line":"template <typename E, class T>"},
{"lineNum":"  395","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  396","line":"VecSin<E, T> const"},
{"lineNum":"  397","line":"sin (VecExpr<E, T> const & u)"},
{"lineNum":"  398","line":"{ return VecSin<E, T>(u); }"},
{"lineNum":"  399","line":""},
{"lineNum":"  400","line":"template <typename E, class T>"},
{"lineNum":"  401","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  402","line":"VecCos<E, T> const"},
{"lineNum":"  403","line":"cos (VecExpr<E, T> const & u)"},
{"lineNum":"  404","line":"{ return VecCos<E, T>(u); }"},
{"lineNum":"  405","line":""},
{"lineNum":"  406","line":"template <typename E, class T>"},
{"lineNum":"  407","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  408","line":"VecAsin<E, T> const"},
{"lineNum":"  409","line":"asin (VecExpr<E, T> const & u)"},
{"lineNum":"  410","line":"{ return VecAsin<E, T>(u); }"},
{"lineNum":"  411","line":""},
{"lineNum":"  412","line":"template <typename E, class T>"},
{"lineNum":"  413","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  414","line":"VecAtan<E, T> const"},
{"lineNum":"  415","line":"atan (VecExpr<E, T> const & u)"},
{"lineNum":"  416","line":"{ return VecAtan<E, T>(u); }"},
{"lineNum":"  417","line":""},
{"lineNum":"  418","line":""},
{"lineNum":"  419","line":"// specialization for different platforms"},
{"lineNum":"  420","line":"//"},
{"lineNum":"  421","line":""},
{"lineNum":"  422","line":"class Vec2d;"},
{"lineNum":"  423","line":"class Vec4d;"},
{"lineNum":"  424","line":"class Vec8d;"},
{"lineNum":"  425","line":"class vector4double;"},
{"lineNum":"  426","line":""},
{"lineNum":"  427","line":"// headers"},
{"lineNum":"  428","line":"#if defined(GSV_SSE) || defined(GSV_AVX) || defined(GSV_AVX512)"},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":"  #if defined(__GNUC__)"},
{"lineNum":"  431","line":"    #pragma GCC diagnostic push"},
{"lineNum":"  432","line":"    #pragma GCC diagnostic ignored \"-Wattributes\""},
{"lineNum":"  433","line":"  #endif"},
{"lineNum":"  434","line":""},
{"lineNum":"  435","line":"  #include \"vectorclass/vectorclass.h\""},
{"lineNum":"  436","line":"  #include \"vectorclass/vectormath_trig.h\""},
{"lineNum":"  437","line":"  #include \"vectorclass/vectormath_exp.h\""},
{"lineNum":"  438","line":""},
{"lineNum":"  439","line":"  #if defined(__GNUC__)"},
{"lineNum":"  440","line":"    #pragma GCC diagnostic pop"},
{"lineNum":"  441","line":"  #endif"},
{"lineNum":"  442","line":""},
{"lineNum":"  443","line":"#elif defined(GSV_QPX)"},
{"lineNum":"  444","line":"  #include <mass_simd.h>"},
{"lineNum":"  445","line":"#endif"},
{"lineNum":"  446","line":""},
{"lineNum":"  447","line":"namespace detail"},
{"lineNum":"  448","line":"{"},
{"lineNum":"  449","line":"    // specialization of helper class"},
{"lineNum":"  450","line":"    template <class T>"},
{"lineNum":"  451","line":"    struct VectorHelper<T, typename std::enable_if<std::is_same<T, Vec2d>::value>::type>"},
{"lineNum":"  452","line":"    {"},
{"lineNum":"  453","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  454","line":"        static constexpr int size() { return 2; }"},
{"lineNum":"  455","line":""},
{"lineNum":"  456","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  457","line":"        static T ld(const double *p) { T t; t.load_a(p); return t; }"},
{"lineNum":"  458","line":""},
{"lineNum":"  459","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  460","line":"        static void st(double * p, const T & v) { v.store_a(p); }"},
{"lineNum":"  461","line":"    };"},
{"lineNum":"  462","line":""},
{"lineNum":"  463","line":"    template <class T>"},
{"lineNum":"  464","line":"    struct VectorHelper<T, typename std::enable_if<std::is_same<T, Vec4d>::value>::type>"},
{"lineNum":"  465","line":"    {"},
{"lineNum":"  466","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  467","line":"        static constexpr int size() { return 4; }"},
{"lineNum":"  468","line":""},
{"lineNum":"  469","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  470","line":"        static T ld(const double *p) { T t; t.load_a(p); return t; }"},
{"lineNum":"  471","line":""},
{"lineNum":"  472","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  473","line":"        static void st(double * p, const T & v) { v.store_a(p); }"},
{"lineNum":"  474","line":"    };"},
{"lineNum":"  475","line":""},
{"lineNum":"  476","line":"    template <class T>"},
{"lineNum":"  477","line":"    struct VectorHelper<T, typename std::enable_if<std::is_same<T, Vec8d>::value>::type>"},
{"lineNum":"  478","line":"    {"},
{"lineNum":"  479","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  480","line":"        static constexpr int size() { return 8; }"},
{"lineNum":"  481","line":""},
{"lineNum":"  482","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  483","line":"        static T ld(const double *p) { T t; t.load_a(p); return t; }"},
{"lineNum":"  484","line":""},
{"lineNum":"  485","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  486","line":"        static void st(double * p, const T & v) { v.store_a(p); }"},
{"lineNum":"  487","line":"    };"},
{"lineNum":"  488","line":"}"},
{"lineNum":"  489","line":""},
{"lineNum":"  490","line":""},
{"lineNum":"  491","line":"// operations"},
{"lineNum":"  492","line":"template <typename E1, typename E2, class T>"},
{"lineNum":"  493","line":"struct VecAdd<E1, E2, T, typename std::enable_if<std::is_same<T, vector4double>::value>::type>"},
{"lineNum":"  494","line":" : public VecExpr<VecAdd<E1, E2, T>, T>"},
{"lineNum":"  495","line":"{"},
{"lineNum":"  496","line":"    E1 const & _u; E2 const & _v;"},
{"lineNum":"  497","line":"    VecAdd(VecExpr<E1, T> const & u, VecExpr<E2, T> const & v) : _u(u), _v(v) { }"},
{"lineNum":"  498","line":"    typename VecExpr<VecAdd<E1, E2, T>, T>::vec_t cal() const { return vec_add(_u.cal(), _v.cal()); }"},
{"lineNum":"  499","line":"};"},
{"lineNum":"  500","line":""},
{"lineNum":"  501","line":""},
{"lineNum":"  502","line":"// stream operator"},
{"lineNum":"  503","line":"template <class T>"},
{"lineNum":"  504","line":"inline std::ostream& operator << (std::ostream & out, Vec<T> const& v)"},
{"lineNum":"  505","line":"{"},
{"lineNum":"  506","line":"    out << \"(\" << v.data << \")\";"},
{"lineNum":"  507","line":"    return out;"},
{"lineNum":"  508","line":"}"},
{"lineNum":"  509","line":""},
{"lineNum":"  510","line":"template<class T>"},
{"lineNum":"  511","line":"inline"},
{"lineNum":"  512","line":"std::enable_if_t<std::is_same<T, Vec2d>::value, std::ostream&>"},
{"lineNum":"  513","line":"operator << (std::ostream& out, T const& v)"},
{"lineNum":"  514","line":"{"},
{"lineNum":"  515","line":"    out << v[0] << \", \" << v[1];"},
{"lineNum":"  516","line":"    return out;"},
{"lineNum":"  517","line":"}"},
{"lineNum":"  518","line":""},
{"lineNum":"  519","line":"template<class T>"},
{"lineNum":"  520","line":"inline"},
{"lineNum":"  521","line":"std::enable_if_t<std::is_same<T, Vec4d>::value, std::ostream&>"},
{"lineNum":"  522","line":"operator << (std::ostream& out, T const& v)"},
{"lineNum":"  523","line":"{"},
{"lineNum":"  524","line":"    out << v[0] << \", \" << v[1] << \", \" << v[2] << \", \" << v[3];"},
{"lineNum":"  525","line":"    return out;"},
{"lineNum":"  526","line":"}"},
{"lineNum":"  527","line":""},
{"lineNum":"  528","line":"template<class T>"},
{"lineNum":"  529","line":"inline"},
{"lineNum":"  530","line":"std::enable_if_t<std::is_same<T, Vec8d>::value, std::ostream&>"},
{"lineNum":"  531","line":"operator << (std::ostream& out, T const& v)"},
{"lineNum":"  532","line":"{"},
{"lineNum":"  533","line":"    out << v[0] << \", \" << v[1] << \", \" << v[2] << \", \" << v[3] << \", \""},
{"lineNum":"  534","line":"        << v[4] << \", \" << v[5] << \", \" << v[6] << \", \" << v[7];"},
{"lineNum":"  535","line":"    return out;"},
{"lineNum":"  536","line":"}"},
{"lineNum":"  537","line":""},
{"lineNum":"  538","line":""},
{"lineNum":"  539","line":"// define the GSVector type"},
{"lineNum":"  540","line":"#if defined(GSV_SSE)"},
{"lineNum":"  541","line":"  typedef Vec<Vec2d >        GSVector;"},
{"lineNum":"  542","line":"#elif defined(GSV_AVX)"},
{"lineNum":"  543","line":"  typedef Vec<Vec4d >        GSVector;"},
{"lineNum":"  544","line":"#elif defined(GSV_AVX512)"},
{"lineNum":"  545","line":"  typedef Vec<Vec8d >        GSVector;"},
{"lineNum":"  546","line":"#elif defined(GSV_QPX)"},
{"lineNum":"  547","line":"  typedef Vec<vector4double> GSVector;"},
{"lineNum":"  548","line":"#else"},
{"lineNum":"  549","line":"  typedef Vec<double>        GSVector;"},
{"lineNum":"  550","line":"#endif"},
{"lineNum":"  551","line":""},
{"lineNum":"  552","line":""},
{"lineNum":"  553","line":""},
{"lineNum":"  554","line":"#if 0"},
{"lineNum":"  555","line":""},
{"lineNum":"  556","line":"#if defined(GSV_SSE)"},
{"lineNum":"  557","line":""},
{"lineNum":"  558","line":"#include \"vectorclass.h\""},
{"lineNum":"  559","line":"class GSVector {"},
{"lineNum":"  560","line":"   public:"},
{"lineNum":"  561","line":"    static const int size = 2;"},
{"lineNum":"  562","line":"    static const int implementation = 1;"},
{"lineNum":"  563","line":"    Vec2d vec;"},
{"lineNum":"  564","line":"    GSVector(const MArray2d_ref& marray, size_t index0, size_t index1) : vec() {"},
{"lineNum":"  565","line":"        vec.load(&marray[index0][index1]);"},
{"lineNum":"  566","line":"    }"},
{"lineNum":"  567","line":"    GSVector(double val) : vec(val) {}"},
{"lineNum":"  568","line":"    GSVector(Vec2d const& vec) : vec(vec) {}"},
{"lineNum":"  569","line":"    GSVector(const double* array_start) : vec() { vec.load(array_start); }"},
{"lineNum":"  570","line":"    void store(MArray2d_ref& marray, size_t index0, size_t index1) const {"},
{"lineNum":"  571","line":"        vec.store(&marray[index0][index1]);"},
{"lineNum":"  572","line":"    }"},
{"lineNum":"  573","line":"    void store(double* array_start) const { vec.store(array_start); }"},
{"lineNum":"  574","line":"    void wtf() {"},
{"lineNum":"  575","line":"        std::cout << \"GSVector::wtf \" << vec[0] << \",\" << vec[1] << std::endl;"},
{"lineNum":"  576","line":"    }"},
{"lineNum":"  577","line":""},
{"lineNum":"  578","line":"    friend std::ostream & operator << (std::ostream & out, GSVector & v);"},
{"lineNum":"  579","line":"};"},
{"lineNum":"  580","line":"static inline GSVector operator+(GSVector const& a, GSVector const& b) {"},
{"lineNum":"  581","line":"    return GSVector(a.vec + b.vec);"},
{"lineNum":"  582","line":"}"},
{"lineNum":"  583","line":"static inline GSVector operator+(GSVector const& a, double b) {"},
{"lineNum":"  584","line":"    return a + GSVector(b);"},
{"lineNum":"  585","line":"}"},
{"lineNum":"  586","line":"static inline GSVector operator+(double a, GSVector const& b) {"},
{"lineNum":"  587","line":"    return GSVector(a) + b;"},
{"lineNum":"  588","line":"}"},
{"lineNum":"  589","line":"static inline GSVector& operator+=(GSVector& a, GSVector const& b) {"},
{"lineNum":"  590","line":"    a.vec = a.vec + b.vec;"},
{"lineNum":"  591","line":"    return a;"},
{"lineNum":"  592","line":"}"},
{"lineNum":"  593","line":"static inline GSVector operator-(GSVector const& a, GSVector const& b) {"},
{"lineNum":"  594","line":"    return GSVector(a.vec - b.vec);"},
{"lineNum":"  595","line":"}"},
{"lineNum":"  596","line":"static inline GSVector operator-(GSVector const& a, double b) {"},
{"lineNum":"  597","line":"    return GSVector(a.vec - b);"},
{"lineNum":"  598","line":"}"},
{"lineNum":"  599","line":"static inline GSVector operator-(double a, GSVector const& b) {"},
{"lineNum":"  600","line":"    return GSVector(a - b.vec);"},
{"lineNum":"  601","line":"}"},
{"lineNum":"  602","line":"static inline GSVector operator-(GSVector const& a) { return GSVector(-a.vec); }"},
{"lineNum":"  603","line":"static inline GSVector& operator-=(GSVector& a, GSVector const& b) {"},
{"lineNum":"  604","line":"    a.vec = a.vec - b.vec;"},
{"lineNum":"  605","line":"    return a;"},
{"lineNum":"  606","line":"}"},
{"lineNum":"  607","line":"static inline GSVector operator*(GSVector const& a, GSVector const& b) {"},
{"lineNum":"  608","line":"    return GSVector(a.vec * b.vec);"},
{"lineNum":"  609","line":"}"},
{"lineNum":"  610","line":"static inline GSVector operator*(GSVector const& a, double b) {"},
{"lineNum":"  611","line":"    return GSVector(a.vec * b);"},
{"lineNum":"  612","line":"}"},
{"lineNum":"  613","line":"static inline GSVector operator*(double a, GSVector const& b) {"},
{"lineNum":"  614","line":"    return GSVector(a * b.vec);"},
{"lineNum":"  615","line":"}"},
{"lineNum":"  616","line":"static inline GSVector& operator*=(GSVector& a, GSVector const& b) {"},
{"lineNum":"  617","line":"    a.vec = a.vec * b.vec;"},
{"lineNum":"  618","line":"    return a;"},
{"lineNum":"  619","line":"}"},
{"lineNum":"  620","line":"static inline GSVector operator/(GSVector const& a, GSVector const& b) {"},
{"lineNum":"  621","line":"    return GSVector(a.vec / b.vec);"},
{"lineNum":"  622","line":"}"},
{"lineNum":"  623","line":"static inline GSVector operator/(GSVector const& a, double b) {"},
{"lineNum":"  624","line":"    return GSVector(a.vec / b);"},
{"lineNum":"  625","line":"}"},
{"lineNum":"  626","line":"static inline GSVector operator/(double a, GSVector const& b) {"},
{"lineNum":"  627","line":"    return GSVector(a / b.vec);"},
{"lineNum":"  628","line":"}"},
{"lineNum":"  629","line":"static inline GSVector& operator/=(GSVector& a, GSVector const& b) {"},
{"lineNum":"  630","line":"    a.vec = a.vec / b.vec;"},
{"lineNum":"  631","line":"    return a;"},
{"lineNum":"  632","line":"}"},
{"lineNum":"  633","line":"static inline GSVector sqrt(GSVector const& a) { return GSVector(sqrt(a.vec)); }"},
{"lineNum":"  634","line":"static inline GSVector invsqrt(GSVector const& a) {"},
{"lineNum":"  635","line":"    return GSVector(1.0 / sqrt(a.vec));"},
{"lineNum":"  636","line":"}"},
{"lineNum":"  637","line":""},
{"lineNum":"  638","line":"inline std::ostream & operator << (std::ostream & out, GSVector & v)"},
{"lineNum":"  639","line":"{"},
{"lineNum":"  640","line":"    out << \"(\" << v.vec[0] << \", \" << v.vec[1] << \")\";"},
{"lineNum":"  641","line":"    return out;"},
{"lineNum":"  642","line":"}"},
{"lineNum":"  643","line":""},
{"lineNum":"  644","line":"#elif defined(GSV_AVX)"},
{"lineNum":"  645","line":""},
{"lineNum":"  646","line":"#include \"vectorclass.h\""},
{"lineNum":"  647","line":"class GSVector {"},
{"lineNum":"  648","line":"public:"},
{"lineNum":"  649","line":"    static const int size = 4;"},
{"lineNum":"  650","line":"    static const int implementation = 2;"},
{"lineNum":"  651","line":"    Vec4d vec;"},
{"lineNum":"  652","line":"    GSVector(const MArray2d_ref& marray, size_t index0, size_t index1) : vec() {"},
{"lineNum":"  653","line":"        vec.load(&marray[index0][index1]);"},
{"lineNum":"  654","line":"    }"},
{"lineNum":"  655","line":"    GSVector(double val) : vec(val) {}"},
{"lineNum":"  656","line":"    GSVector(Vec4d const& vec) : vec(vec) {}"},
{"lineNum":"  657","line":"    GSVector(const double* array_start) : vec() { vec.load(array_start); }"},
{"lineNum":"  658","line":"    void store(MArray2d_ref& marray, size_t index0, size_t index1) const {"},
{"lineNum":"  659","line":"        vec.store(&marray[index0][index1]);"},
{"lineNum":"  660","line":"    }"},
{"lineNum":"  661","line":"    void store(double* array_start) const { vec.store(array_start); }"},
{"lineNum":"  662","line":"    void wtf() {"},
{"lineNum":"  663","line":"        std::cout << \"GSVector::wtf \" << vec[0] << \",\" << vec[1] << std::endl;"},
{"lineNum":"  664","line":"    }"},
{"lineNum":"  665","line":""},
{"lineNum":"  666","line":"    friend std::ostream & operator << (std::ostream & out, GSVector & v);"},
{"lineNum":"  667","line":"};"},
{"lineNum":"  668","line":"static inline GSVector operator+(GSVector const& a, GSVector const& b) {"},
{"lineNum":"  669","line":"    return GSVector(a.vec + b.vec);"},
{"lineNum":"  670","line":"}"},
{"lineNum":"  671","line":"static inline GSVector operator+(GSVector const& a, double b) {"},
{"lineNum":"  672","line":"    return a + GSVector(b);"},
{"lineNum":"  673","line":"}"},
{"lineNum":"  674","line":"static inline GSVector operator+(double a, GSVector const& b) {"},
{"lineNum":"  675","line":"    return GSVector(a) + b;"},
{"lineNum":"  676","line":"}"},
{"lineNum":"  677","line":"static inline GSVector& operator+=(GSVector& a, GSVector const& b) {"},
{"lineNum":"  678","line":"    a.vec = a.vec + b.vec;"},
{"lineNum":"  679","line":"    return a;"},
{"lineNum":"  680","line":"}"},
{"lineNum":"  681","line":"static inline GSVector operator-(GSVector const& a, GSVector const& b) {"},
{"lineNum":"  682","line":"    return GSVector(a.vec - b.vec);"},
{"lineNum":"  683","line":"}"},
{"lineNum":"  684","line":"static inline GSVector operator-(GSVector const& a, double b) {"},
{"lineNum":"  685","line":"    return GSVector(a.vec - b);"},
{"lineNum":"  686","line":"}"},
{"lineNum":"  687","line":"static inline GSVector operator-(double a, GSVector const& b) {"},
{"lineNum":"  688","line":"    return GSVector(a - b.vec);"},
{"lineNum":"  689","line":"}"},
{"lineNum":"  690","line":"static inline GSVector operator-(GSVector const& a) { return GSVector(-a.vec); }"},
{"lineNum":"  691","line":"static inline GSVector& operator-=(GSVector& a, GSVector const& b) {"},
{"lineNum":"  692","line":"    a.vec = a.vec - b.vec;"},
{"lineNum":"  693","line":"    return a;"},
{"lineNum":"  694","line":"}"},
{"lineNum":"  695","line":"static inline GSVector operator*(GSVector const& a, GSVector const& b) {"},
{"lineNum":"  696","line":"    return GSVector(a.vec * b.vec);"},
{"lineNum":"  697","line":"}"},
{"lineNum":"  698","line":"static inline GSVector operator*(GSVector const& a, double b) {"},
{"lineNum":"  699","line":"    return GSVector(a.vec * b);"},
{"lineNum":"  700","line":"}"},
{"lineNum":"  701","line":"static inline GSVector operator*(double a, GSVector const& b) {"},
{"lineNum":"  702","line":"    return GSVector(a * b.vec);"},
{"lineNum":"  703","line":"}"},
{"lineNum":"  704","line":"static inline GSVector& operator*=(GSVector& a, GSVector const& b) {"},
{"lineNum":"  705","line":"    a.vec = a.vec * b.vec;"},
{"lineNum":"  706","line":"    return a;"},
{"lineNum":"  707","line":"}"},
{"lineNum":"  708","line":"static inline GSVector operator/(GSVector const& a, GSVector const& b) {"},
{"lineNum":"  709","line":"    return GSVector(a.vec / b.vec);"},
{"lineNum":"  710","line":"}"},
{"lineNum":"  711","line":"static inline GSVector operator/(GSVector const& a, double b) {"},
{"lineNum":"  712","line":"    return GSVector(a.vec / b);"},
{"lineNum":"  713","line":"}"},
{"lineNum":"  714","line":"static inline GSVector operator/(double a, GSVector const& b) {"},
{"lineNum":"  715","line":"    return GSVector(a / b.vec);"},
{"lineNum":"  716","line":"}"},
{"lineNum":"  717","line":"static inline GSVector& operator/=(GSVector& a, GSVector const& b) {"},
{"lineNum":"  718","line":"    a.vec = a.vec / b.vec;"},
{"lineNum":"  719","line":"    return a;"},
{"lineNum":"  720","line":"}"},
{"lineNum":"  721","line":"static inline GSVector sqrt(GSVector const& a) { return GSVector(sqrt(a.vec)); }"},
{"lineNum":"  722","line":"static inline GSVector invsqrt(GSVector const& a) {"},
{"lineNum":"  723","line":"    return GSVector(1.0 / sqrt(a.vec));"},
{"lineNum":"  724","line":"}"},
{"lineNum":"  725","line":""},
{"lineNum":"  726","line":"inline std::ostream & operator << (std::ostream & out, GSVector & v)"},
{"lineNum":"  727","line":"{"},
{"lineNum":"  728","line":"    out << \"(\" << v.vec[0] << \", \" << v.vec[1] << \", \" << v.vec[2] << \", \" << v.vec[3] << \")\";"},
{"lineNum":"  729","line":"    return out;"},
{"lineNum":"  730","line":"}"},
{"lineNum":"  731","line":""},
{"lineNum":"  732","line":"#elif defined(GSV_V4D)"},
{"lineNum":"  733","line":""},
{"lineNum":"  734","line":"#include <mass_simd.h>"},
{"lineNum":"  735","line":"class GSVector {"},
{"lineNum":"  736","line":"public:"},
{"lineNum":"  737","line":"    static const int size = 4;"},
{"lineNum":"  738","line":"    static const int implementation = 1;"},
{"lineNum":"  739","line":"    vector4double vec;"},
{"lineNum":"  740","line":"//    GSVector(const MArray2d_ref& marray, size_t index0, size_t index1) : vec() {"},
{"lineNum":"  741","line":"//        vec.load(&marray[index0][index1]);"},
{"lineNum":"  742","line":"//    }"},
{"lineNum":"  743","line":"    GSVector(double val) : vec((vector4double)(val)) {}"},
{"lineNum":"  744","line":"    GSVector(vector4double const& vec) : vec(vec) {}"},
{"lineNum":"  745","line":"    // The following seems like it should be GSVector(const double * array_start),"},
{"lineNum":"  746","line":"    // but that does not compile."},
{"lineNum":"  747","line":"    GSVector(double* array_start) : vec(vec_lda(0, array_start)) {}"},
{"lineNum":"  748","line":"//    void store(MArray2d_ref& marray, size_t index0, size_t index1) const {"},
{"lineNum":"  749","line":"//        vec.store(&marray[index0][index1]);"},
{"lineNum":"  750","line":"//    }"},
{"lineNum":"  751","line":"    void store(double* array_start) const { vec_sta(vec, 0, array_start); }"},
{"lineNum":"  752","line":"};"},
{"lineNum":"  753","line":"static inline GSVector operator+(GSVector const& a, GSVector const& b) {"},
{"lineNum":"  754","line":"    return GSVector(vec_add(a.vec, b.vec));"},
{"lineNum":"  755","line":"}"},
{"lineNum":"  756","line":"static inline GSVector operator+(GSVector const& a, double b) {"},
{"lineNum":"  757","line":"    return GSVector(vec_add(a.vec, (vector4double)(b)));"},
{"lineNum":"  758","line":"}"},
{"lineNum":"  759","line":"static inline GSVector operator+(double a, GSVector const& b) {"},
{"lineNum":"  760","line":"    return GSVector(vec_add((vector4double)(a), b.vec));"},
{"lineNum":"  761","line":"}"},
{"lineNum":"  762","line":"static inline GSVector& operator+=(GSVector& a, GSVector const& b) {"},
{"lineNum":"  763","line":"    a.vec = vec_add(a.vec, b.vec);"},
{"lineNum":"  764","line":"    return a;"},
{"lineNum":"  765","line":"}"},
{"lineNum":"  766","line":"static inline GSVector operator-(GSVector const& a, GSVector const& b) {"},
{"lineNum":"  767","line":"    return GSVector(vec_sub(a.vec, b.vec));"},
{"lineNum":"  768","line":"}"},
{"lineNum":"  769","line":"static inline GSVector operator-(GSVector const& a, double b) {"},
{"lineNum":"  770","line":"    return GSVector(vec_sub(a.vec, (vector4double)(b)));"},
{"lineNum":"  771","line":"}"},
{"lineNum":"  772","line":"static inline GSVector operator-(double a, GSVector const& b) {"},
{"lineNum":"  773","line":"    return GSVector(vec_sub((vector4double)(a), b.vec));"},
{"lineNum":"  774","line":"}"},
{"lineNum":"  775","line":"static inline GSVector operator-(GSVector const& a) { return GSVector(vec_neg(a.vec)); }"},
{"lineNum":"  776","line":"static inline GSVector& operator-=(GSVector& a, GSVector const& b) {"},
{"lineNum":"  777","line":"    a.vec = vec_sub(a.vec, b.vec);"},
{"lineNum":"  778","line":"    return a;"},
{"lineNum":"  779","line":"}"},
{"lineNum":"  780","line":"static inline GSVector operator*(GSVector const& a, GSVector const& b) {"},
{"lineNum":"  781","line":"    return GSVector(vec_mul(a.vec, b.vec));"},
{"lineNum":"  782","line":"}"},
{"lineNum":"  783","line":"static inline GSVector operator*(GSVector const& a, double b) {"},
{"lineNum":"  784","line":"    return GSVector(vec_mul(a.vec, (vector4double)(b)));"},
{"lineNum":"  785","line":"}"},
{"lineNum":"  786","line":"static inline GSVector operator*(double a, GSVector const& b) {"},
{"lineNum":"  787","line":"    return GSVector(vec_mul((vector4double)(a), b.vec));"},
{"lineNum":"  788","line":"}"},
{"lineNum":"  789","line":"static inline GSVector& operator*=(GSVector& a, GSVector const& b) {"},
{"lineNum":"  790","line":"    a.vec = vec_mul(a.vec, b.vec);"},
{"lineNum":"  791","line":"    return a;"},
{"lineNum":"  792","line":"}"},
{"lineNum":"  793","line":"static inline GSVector operator/(GSVector const& a, GSVector const& b) {"},
{"lineNum":"  794","line":"    return GSVector(vec_swdiv_nochk(a.vec, b.vec));"},
{"lineNum":"  795","line":"}"},
{"lineNum":"  796","line":"static inline GSVector operator/(GSVector const& a, double b) {"},
{"lineNum":"  797","line":"    return GSVector(vec_swdiv_nochk(a.vec, (vector4double)(b)));"},
{"lineNum":"  798","line":"}"},
{"lineNum":"  799","line":"static inline GSVector operator/(double a, GSVector const& b) {"},
{"lineNum":"  800","line":"    return GSVector(vec_swdiv_nochk((vector4double)(a), b.vec));"},
{"lineNum":"  801","line":"}"},
{"lineNum":"  802","line":"static inline GSVector& operator/=(GSVector& a, GSVector const& b) {"},
{"lineNum":"  803","line":"    a.vec = vec_swdiv_nochk(a.vec, b.vec);"},
{"lineNum":"  804","line":"    return a;"},
{"lineNum":"  805","line":"}"},
{"lineNum":"  806","line":"static inline GSVector sqrt(GSVector const& a) { return GSVector(sqrtd4(a.vec)); }"},
{"lineNum":"  807","line":"static inline GSVector invsqrt(GSVector const& a) { return GSVector(rsqrtd4(a.vec)); }"},
{"lineNum":"  808","line":""},
{"lineNum":"  809","line":"#elif defined(GSV_MIC)"},
{"lineNum":"  810","line":""},
{"lineNum":"  811","line":"#include <mic/micvec.h>"},
{"lineNum":"  812","line":"class GSVector {"},
{"lineNum":"  813","line":"public:"},
{"lineNum":"  814","line":"    static const int size = 8;"},
{"lineNum":"  815","line":"    static const int implementation = 4;"},
{"lineNum":"  816","line":"    F64vec8 vec;"},
{"lineNum":"  817","line":"    GSVector(MArray2d_ref& marray, size_t index0, size_t index1) : vec(&marray[index0][index1]) { }"},
{"lineNum":"  818","line":"    GSVector(double val) : vec(val) {}"},
{"lineNum":"  819","line":"    GSVector(F64vec8 const& vec) : vec(vec) {}"},
{"lineNum":"  820","line":"    GSVector(double* array_start) : vec(array_start) {  }"},
{"lineNum":"  821","line":"    void store(MArray2d_ref& marray, size_t index0, size_t index1) const"},
{"lineNum":"  822","line":"    { _mm512_store_pd(&marray[index0][index1], vec); }"},
{"lineNum":"  823","line":"    void store(double* array_start) const"},
{"lineNum":"  824","line":"    { _mm512_store_pd(array_start, vec); }"},
{"lineNum":"  825","line":"#if 0"},
{"lineNum":"  826","line":"    void wtf() {"},
{"lineNum":"  827","line":"        std::cout << \"GSVector::wtf \" << vec[0] << \",\" << vec[1] << std::endl;"},
{"lineNum":"  828","line":"    }"},
{"lineNum":"  829","line":"#endif"},
{"lineNum":"  830","line":""},
{"lineNum":"  831","line":"    friend std::ostream & operator << (std::ostream & out, GSVector & v);"},
{"lineNum":"  832","line":"};"},
{"lineNum":"  833","line":"static inline GSVector operator+(GSVector const& a, GSVector const& b) {"},
{"lineNum":"  834","line":"    return GSVector(a.vec + b.vec);"},
{"lineNum":"  835","line":"}"},
{"lineNum":"  836","line":"static inline GSVector operator+(GSVector const& a, double b) {"},
{"lineNum":"  837","line":"    return a + GSVector(b);"},
{"lineNum":"  838","line":"}"},
{"lineNum":"  839","line":"static inline GSVector operator+(double a, GSVector const& b) {"},
{"lineNum":"  840","line":"    return GSVector(a) + b;"},
{"lineNum":"  841","line":"}"},
{"lineNum":"  842","line":"static inline GSVector& operator+=(GSVector& a, GSVector const& b) {"},
{"lineNum":"  843","line":"    a.vec = a.vec + b.vec;"},
{"lineNum":"  844","line":"    return a;"},
{"lineNum":"  845","line":"}"},
{"lineNum":"  846","line":"static inline GSVector operator-(GSVector const& a, GSVector const& b) {"},
{"lineNum":"  847","line":"    return GSVector(a.vec - b.vec);"},
{"lineNum":"  848","line":"}"},
{"lineNum":"  849","line":"static inline GSVector operator-(GSVector const& a, double b) {"},
{"lineNum":"  850","line":"    return GSVector(a.vec - b);"},
{"lineNum":"  851","line":"}"},
{"lineNum":"  852","line":"static inline GSVector operator-(double a, GSVector const& b) {"},
{"lineNum":"  853","line":"    return GSVector(a - b.vec);"},
{"lineNum":"  854","line":"}"},
{"lineNum":"  855","line":"static inline GSVector operator-(GSVector const& a) { return GSVector(-a.vec); }"},
{"lineNum":"  856","line":"static inline GSVector& operator-=(GSVector& a, GSVector const& b) {"},
{"lineNum":"  857","line":"    a.vec = a.vec - b.vec;"},
{"lineNum":"  858","line":"    return a;"},
{"lineNum":"  859","line":"}"},
{"lineNum":"  860","line":"static inline GSVector operator*(GSVector const& a, GSVector const& b) {"},
{"lineNum":"  861","line":"    return GSVector(a.vec * b.vec);"},
{"lineNum":"  862","line":"}"},
{"lineNum":"  863","line":"static inline GSVector operator*(GSVector const& a, double b) {"},
{"lineNum":"  864","line":"    return GSVector(a.vec * b);"},
{"lineNum":"  865","line":"}"},
{"lineNum":"  866","line":"static inline GSVector operator*(double a, GSVector const& b) {"},
{"lineNum":"  867","line":"    return GSVector(a * b.vec);"},
{"lineNum":"  868","line":"}"},
{"lineNum":"  869","line":"static inline GSVector& operator*=(GSVector& a, GSVector const& b) {"},
{"lineNum":"  870","line":"    a.vec = a.vec * b.vec;"},
{"lineNum":"  871","line":"    return a;"},
{"lineNum":"  872","line":"}"},
{"lineNum":"  873","line":"static inline GSVector operator/(GSVector const& a, GSVector const& b) {"},
{"lineNum":"  874","line":"    return GSVector(a.vec / b.vec);"},
{"lineNum":"  875","line":"}"},
{"lineNum":"  876","line":"static inline GSVector operator/(GSVector const& a, double b) {"},
{"lineNum":"  877","line":"    return GSVector(a.vec / b);"},
{"lineNum":"  878","line":"}"},
{"lineNum":"  879","line":"static inline GSVector operator/(double a, GSVector const& b) {"},
{"lineNum":"  880","line":"    return GSVector(a / b.vec);"},
{"lineNum":"  881","line":"}"},
{"lineNum":"  882","line":"static inline GSVector& operator/=(GSVector& a, GSVector const& b) {"},
{"lineNum":"  883","line":"    a.vec = a.vec / b.vec;"},
{"lineNum":"  884","line":"    return a;"},
{"lineNum":"  885","line":"}"},
{"lineNum":"  886","line":"static inline GSVector sqrt(GSVector const& a) { return GSVector(sqrt(a.vec)); }"},
{"lineNum":"  887","line":"static inline GSVector invsqrt(GSVector const& a) {"},
{"lineNum":"  888","line":"    return GSVector(1.0 / sqrt(a.vec));"},
{"lineNum":"  889","line":"}"},
{"lineNum":"  890","line":""},
{"lineNum":"  891","line":"inline std::ostream & operator << (std::ostream & out, GSVector & v)"},
{"lineNum":"  892","line":"{"},
{"lineNum":"  893","line":"    //out << \"(\" << v.vec[0] << \", \" << v.vec[1] << \", \" << v.vec[2] << \", \" << v.vec[3] << \")\";"},
{"lineNum":"  894","line":"    return out;"},
{"lineNum":"  895","line":"}"},
{"lineNum":"  896","line":""},
{"lineNum":"  897","line":"#else  // no SIMD implementation defined"},
{"lineNum":"  898","line":""},
{"lineNum":"  899","line":"class GSVector {"},
{"lineNum":"  900","line":"   public:"},
{"lineNum":"  901","line":"    static const int size = 1;"},
{"lineNum":"  902","line":"    static const int implementation = 0;"},
{"lineNum":"  903","line":""},
{"lineNum":"  904","line":"    double vec;"},
{"lineNum":"  905","line":"    GSVector(const MArray2d_ref& marray, size_t index0, size_t index1)"},
{"lineNum":"  906","line":"        : vec(marray[index0][index1]) {}"},
{"lineNum":"  907","line":"    GSVector(double val) : vec(val) {}"},
{"lineNum":"  908","line":"    GSVector(const double* array_start) : vec(*array_start) {}"},
{"lineNum":"  909","line":"    void store(MArray2d_ref& marray, size_t index0, size_t index1) const {"},
{"lineNum":"  910","line":"        marray[index0][index1] = vec;"},
{"lineNum":"  911","line":"    }"},
{"lineNum":"  912","line":"    void store(double* array_start) const { *array_start = vec; }"},
{"lineNum":"  913","line":""},
{"lineNum":"  914","line":"    friend std::ostream & operator << (std::ostream & out, GSVector & v);"},
{"lineNum":"  915","line":"};"},
{"lineNum":"  916","line":"static inline GSVector operator+(GSVector const& a, GSVector const& b) {"},
{"lineNum":"  917","line":"    return GSVector(a.vec + b.vec);"},
{"lineNum":"  918","line":"}"},
{"lineNum":"  919","line":"static inline GSVector operator+(GSVector const& a, double b) {"},
{"lineNum":"  920","line":"    return a + GSVector(b);"},
{"lineNum":"  921","line":"}"},
{"lineNum":"  922","line":"static inline GSVector operator+(double a, GSVector const& b) {"},
{"lineNum":"  923","line":"    return GSVector(a) + b;"},
{"lineNum":"  924","line":"}"},
{"lineNum":"  925","line":"static inline GSVector& operator+=(GSVector& a, GSVector const& b) {"},
{"lineNum":"  926","line":"    a.vec = a.vec + b.vec;"},
{"lineNum":"  927","line":"    return a;"},
{"lineNum":"  928","line":"}"},
{"lineNum":"  929","line":"static inline GSVector operator-(GSVector const& a, GSVector const& b) {"},
{"lineNum":"  930","line":"    return GSVector(a.vec - b.vec);"},
{"lineNum":"  931","line":"}"},
{"lineNum":"  932","line":"static inline GSVector operator-(GSVector const& a, double b) {"},
{"lineNum":"  933","line":"    return GSVector(a.vec - b);"},
{"lineNum":"  934","line":"}"},
{"lineNum":"  935","line":"static inline GSVector operator-(double a, GSVector const& b) {"},
{"lineNum":"  936","line":"    return GSVector(a - b.vec);"},
{"lineNum":"  937","line":"}"},
{"lineNum":"  938","line":"static inline GSVector operator-(GSVector const& a) { return GSVector(-a.vec); }"},
{"lineNum":"  939","line":"static inline GSVector& operator-=(GSVector& a, GSVector const& b) {"},
{"lineNum":"  940","line":"    a.vec = a.vec - b.vec;"},
{"lineNum":"  941","line":"    return a;"},
{"lineNum":"  942","line":"}"},
{"lineNum":"  943","line":"static inline GSVector operator*(GSVector const& a, GSVector const& b) {"},
{"lineNum":"  944","line":"    return GSVector(a.vec * b.vec);"},
{"lineNum":"  945","line":"}"},
{"lineNum":"  946","line":"static inline GSVector operator*(GSVector const& a, double b) {"},
{"lineNum":"  947","line":"    return GSVector(a.vec * b);"},
{"lineNum":"  948","line":"}"},
{"lineNum":"  949","line":"static inline GSVector operator*(double a, GSVector const& b) {"},
{"lineNum":"  950","line":"    return GSVector(a * b.vec);"},
{"lineNum":"  951","line":"}"},
{"lineNum":"  952","line":"static inline GSVector& operator*=(GSVector& a, GSVector const& b) {"},
{"lineNum":"  953","line":"    a.vec = a.vec * b.vec;"},
{"lineNum":"  954","line":"    return a;"},
{"lineNum":"  955","line":"}"},
{"lineNum":"  956","line":"static inline GSVector operator/(GSVector const& a, GSVector const& b) {"},
{"lineNum":"  957","line":"    return GSVector(a.vec / b.vec);"},
{"lineNum":"  958","line":"}"},
{"lineNum":"  959","line":"static inline GSVector operator/(GSVector const& a, double b) {"},
{"lineNum":"  960","line":"    return GSVector(a.vec / b);"},
{"lineNum":"  961","line":"}"},
{"lineNum":"  962","line":"static inline GSVector operator/(double a, GSVector const& b) {"},
{"lineNum":"  963","line":"    return GSVector(a / b.vec);"},
{"lineNum":"  964","line":"}"},
{"lineNum":"  965","line":"static inline GSVector& operator/=(GSVector& a, GSVector const& b) {"},
{"lineNum":"  966","line":"    a.vec = a.vec / b.vec;"},
{"lineNum":"  967","line":"    return a;"},
{"lineNum":"  968","line":"}"},
{"lineNum":"  969","line":"static inline GSVector sqrt(GSVector const& a) { return GSVector(sqrt(a.vec)); }"},
{"lineNum":"  970","line":"static inline GSVector invsqrt(GSVector const& a) {"},
{"lineNum":"  971","line":"    return GSVector(1.0 / sqrt(a.vec));"},
{"lineNum":"  972","line":"}"},
{"lineNum":"  973","line":""},
{"lineNum":"  974","line":"inline std::ostream & operator << (std::ostream & out, GSVector & v)"},
{"lineNum":"  975","line":"{"},
{"lineNum":"  976","line":"    out << \"(\" << v.vec << \")\";"},
{"lineNum":"  977","line":"    return out;"},
{"lineNum":"  978","line":"}"},
{"lineNum":"  979","line":""},
{"lineNum":"  980","line":"#endif"},
{"lineNum":"  981","line":""},
{"lineNum":"  982","line":"#endif"},
{"lineNum":"  983","line":""},
{"lineNum":"  984","line":"#endif  // GSVECTOR_H_"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 25, "covered" : 0,};
var merged_data = [];
