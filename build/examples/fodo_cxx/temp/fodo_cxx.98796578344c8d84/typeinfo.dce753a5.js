var data = {lines:[
{"lineNum":"    1","line":"// -*- C++ -*-"},
{"lineNum":"    2","line":"//===-------------------------- typeinfo ----------------------------------===//"},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions."},
{"lineNum":"    5","line":"// See https://llvm.org/LICENSE.txt for license information."},
{"lineNum":"    6","line":"// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef __LIBCPP_TYPEINFO"},
{"lineNum":"   11","line":"#define __LIBCPP_TYPEINFO"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"/*"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"    typeinfo synopsis"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"namespace std {"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"class type_info"},
{"lineNum":"   20","line":"{"},
{"lineNum":"   21","line":"public:"},
{"lineNum":"   22","line":"    virtual ~type_info();"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"    bool operator==(const type_info& rhs) const noexcept;"},
{"lineNum":"   25","line":"    bool operator!=(const type_info& rhs) const noexcept;"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"    bool before(const type_info& rhs) const noexcept;"},
{"lineNum":"   28","line":"    size_t hash_code() const noexcept;"},
{"lineNum":"   29","line":"    const char* name() const noexcept;"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"    type_info(const type_info& rhs) = delete;"},
{"lineNum":"   32","line":"    type_info& operator=(const type_info& rhs) = delete;"},
{"lineNum":"   33","line":"};"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"class bad_cast"},
{"lineNum":"   36","line":"    : public exception"},
{"lineNum":"   37","line":"{"},
{"lineNum":"   38","line":"public:"},
{"lineNum":"   39","line":"    bad_cast() noexcept;"},
{"lineNum":"   40","line":"    bad_cast(const bad_cast&) noexcept;"},
{"lineNum":"   41","line":"    bad_cast& operator=(const bad_cast&) noexcept;"},
{"lineNum":"   42","line":"    virtual const char* what() const noexcept;"},
{"lineNum":"   43","line":"};"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"class bad_typeid"},
{"lineNum":"   46","line":"    : public exception"},
{"lineNum":"   47","line":"{"},
{"lineNum":"   48","line":"public:"},
{"lineNum":"   49","line":"    bad_typeid() noexcept;"},
{"lineNum":"   50","line":"    bad_typeid(const bad_typeid&) noexcept;"},
{"lineNum":"   51","line":"    bad_typeid& operator=(const bad_typeid&) noexcept;"},
{"lineNum":"   52","line":"    virtual const char* what() const noexcept;"},
{"lineNum":"   53","line":"};"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"}  // std"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"*/"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"#include <__availability>"},
{"lineNum":"   60","line":"#include <__config>"},
{"lineNum":"   61","line":"#include <cstddef>"},
{"lineNum":"   62","line":"#include <cstdint>"},
{"lineNum":"   63","line":"#include <exception>"},
{"lineNum":"   64","line":"#include <type_traits>"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"#ifdef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"   67","line":"#include <cstdlib>"},
{"lineNum":"   68","line":"#endif"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"},
{"lineNum":"   71","line":"#pragma GCC system_header"},
{"lineNum":"   72","line":"#endif"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"#if defined(_LIBCPP_ABI_VCRUNTIME)"},
{"lineNum":"   75","line":"#include <vcruntime_typeinfo.h>"},
{"lineNum":"   76","line":"#else"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"namespace std  // purposefully not using versioning namespace"},
{"lineNum":"   79","line":"{"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"#if defined(_LIBCPP_ABI_MICROSOFT)"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"class _LIBCPP_EXCEPTION_ABI type_info"},
{"lineNum":"   85","line":"{"},
{"lineNum":"   86","line":"    type_info& operator=(const type_info&);"},
{"lineNum":"   87","line":"    type_info(const type_info&);"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"    mutable struct {"},
{"lineNum":"   90","line":"      const char *__undecorated_name;"},
{"lineNum":"   91","line":"      const char __decorated_name[1];"},
{"lineNum":"   92","line":"    } __data;"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"    int __compare(const type_info &__rhs) const _NOEXCEPT;"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"public:"},
{"lineNum":"   97","line":"    _LIBCPP_AVAILABILITY_TYPEINFO_VTABLE"},
{"lineNum":"   98","line":"    virtual ~type_info();"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"    const char *name() const _NOEXCEPT;"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  103","line":"    bool before(const type_info& __arg) const _NOEXCEPT {"},
{"lineNum":"  104","line":"      return __compare(__arg) < 0;"},
{"lineNum":"  105","line":"    }"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"    size_t hash_code() const _NOEXCEPT;"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  110","line":"    bool operator==(const type_info& __arg) const _NOEXCEPT {"},
{"lineNum":"  111","line":"      return __compare(__arg) == 0;"},
{"lineNum":"  112","line":"    }"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  115","line":"    bool operator!=(const type_info& __arg) const _NOEXCEPT"},
{"lineNum":"  116","line":"    { return !operator==(__arg); }"},
{"lineNum":"  117","line":"};"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"#else // !defined(_LIBCPP_ABI_MICROSOFT)"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"// ========================================================================== //"},
{"lineNum":"  122","line":"//                           Implementations"},
{"lineNum":"  123","line":"// ========================================================================== //"},
{"lineNum":"  124","line":"// ------------------------------------------------------------------------- //"},
{"lineNum":"  125","line":"//                               Unique"},
{"lineNum":"  126","line":"//               (_LIBCPP_TYPEINFO_COMPARISON_IMPLEMENTATION = 1)"},
{"lineNum":"  127","line":"// ------------------------------------------------------------------------- //"},
{"lineNum":"  128","line":"// This implementation of type_info assumes a unique copy of the RTTI for a"},
{"lineNum":"  129","line":"// given type inside a program. This is a valid assumption when abiding to the"},
{"lineNum":"  130","line":"// Itanium ABI (http://itanium-cxx-abi.github.io/cxx-abi/abi.html#vtable-components)."},
{"lineNum":"  131","line":"// Under this assumption, we can always compare the addresses of the type names"},
{"lineNum":"  132","line":"// to implement equality-comparison of type_infos instead of having to perform"},
{"lineNum":"  133","line":"// a deep string comparison."},
{"lineNum":"  134","line":"// -------------------------------------------------------------------------- //"},
{"lineNum":"  135","line":"//                             NonUnique"},
{"lineNum":"  136","line":"//               (_LIBCPP_TYPEINFO_COMPARISON_IMPLEMENTATION = 2)"},
{"lineNum":"  137","line":"// -------------------------------------------------------------------------- //"},
{"lineNum":"  138","line":"// This implementation of type_info does not assume there is always a unique"},
{"lineNum":"  139","line":"// copy of the RTTI for a given type inside a program. For various reasons"},
{"lineNum":"  140","line":"// the linker may have failed to merge every copy of a types RTTI"},
{"lineNum":"  141","line":"// (For example: -Bsymbolic or llvm.org/PR37398). Under this assumption, two"},
{"lineNum":"  142","line":"// type_infos are equal if their addresses are equal or if a deep string"},
{"lineNum":"  143","line":"// comparison is equal."},
{"lineNum":"  144","line":"// -------------------------------------------------------------------------- //"},
{"lineNum":"  145","line":"//                          NonUniqueARMRTTIBit"},
{"lineNum":"  146","line":"//               (_LIBCPP_TYPEINFO_COMPARISON_IMPLEMENTATION = 3)"},
{"lineNum":"  147","line":"// -------------------------------------------------------------------------- //"},
{"lineNum":"  148","line":"// This implementation is specific to ARM64 on Apple platforms."},
{"lineNum":"  149","line":"//"},
{"lineNum":"  150","line":"// This implementation of type_info does not assume always a unique copy of"},
{"lineNum":"  151","line":"// the RTTI for a given type inside a program. When constructing the type_info,"},
{"lineNum":"  152","line":"// the compiler packs the pointer to the type name into a uintptr_t and reserves"},
{"lineNum":"  153","line":"// the high bit of that pointer, which is assumed to be free for use under that"},
{"lineNum":"  154","line":"// ABI. If that high bit is set, that specific copy of the RTTI can\'t be assumed"},
{"lineNum":"  155","line":"// to be unique within the program. If the high bit is unset, then the RTTI can"},
{"lineNum":"  156","line":"// be assumed to be unique within the program."},
{"lineNum":"  157","line":"//"},
{"lineNum":"  158","line":"// When comparing type_infos, if both RTTIs can be assumed to be unique, it"},
{"lineNum":"  159","line":"// suffices to compare their addresses. If both the RTTIs can\'t be assumed to"},
{"lineNum":"  160","line":"// be unique, we must perform a deep string comparison of the type names."},
{"lineNum":"  161","line":"// However, if one of the RTTIs is guaranteed unique and the other one isn\'t,"},
{"lineNum":"  162","line":"// then both RTTIs are necessarily not to be considered equal."},
{"lineNum":"  163","line":"//"},
{"lineNum":"  164","line":"// The intent of this design is to remove the need for weak symbols. Specifically,"},
{"lineNum":"  165","line":"// if a type would normally have a default-visibility RTTI emitted as a weak"},
{"lineNum":"  166","line":"// symbol, it is given hidden visibility instead and the non-unique bit is set."},
{"lineNum":"  167","line":"// Otherwise, types declared with hidden visibility are always considered to have"},
{"lineNum":"  168","line":"// a unique RTTI: the RTTI is emitted with linkonce_odr linkage and is assumed"},
{"lineNum":"  169","line":"// to be deduplicated by the linker within the linked image. Across linked image"},
{"lineNum":"  170","line":"// boundaries, such types are thus considered different types."},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"// This value can be overriden in the __config_site. When it\'s not overriden,"},
{"lineNum":"  173","line":"// we pick a default implementation based on the platform here."},
{"lineNum":"  174","line":"#ifndef _LIBCPP_TYPEINFO_COMPARISON_IMPLEMENTATION"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"  // Windows binaries can\'t merge typeinfos, so use the NonUnique implementation."},
{"lineNum":"  177","line":"# ifdef _LIBCPP_OBJECT_FORMAT_COFF"},
{"lineNum":"  178","line":"#   define _LIBCPP_TYPEINFO_COMPARISON_IMPLEMENTATION 2"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"  // On arm64 on Apple platforms, use the special NonUniqueARMRTTIBit implementation."},
{"lineNum":"  181","line":"# elif defined(__APPLE__) && defined(__LP64__) && !defined(__x86_64__)"},
{"lineNum":"  182","line":"#   define _LIBCPP_TYPEINFO_COMPARISON_IMPLEMENTATION 3"},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"  // On all other platforms, assume the Itanium C++ ABI and use the Unique implementation."},
{"lineNum":"  185","line":"# else"},
{"lineNum":"  186","line":"#   define _LIBCPP_TYPEINFO_COMPARISON_IMPLEMENTATION 1"},
{"lineNum":"  187","line":"# endif"},
{"lineNum":"  188","line":"#endif"},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"struct __type_info_implementations {"},
{"lineNum":"  191","line":"  struct __string_impl_base {"},
{"lineNum":"  192","line":"    typedef const char* __type_name_t;"},
{"lineNum":"  193","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_ALWAYS_INLINE"},
{"lineNum":"  194","line":"    _LIBCPP_CONSTEXPR static const char* __type_name_to_string(__type_name_t __v) _NOEXCEPT {"},
{"lineNum":"  195","line":"      return __v;"},
{"lineNum":"  196","line":"    }"},
{"lineNum":"  197","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_ALWAYS_INLINE"},
{"lineNum":"  198","line":"    _LIBCPP_CONSTEXPR static __type_name_t __string_to_type_name(const char* __v) _NOEXCEPT {"},
{"lineNum":"  199","line":"      return __v;"},
{"lineNum":"  200","line":"    }"},
{"lineNum":"  201","line":"  };"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"  struct __unique_impl : __string_impl_base {"},
{"lineNum":"  204","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_ALWAYS_INLINE"},
{"lineNum":"  205","line":"    static size_t __hash(__type_name_t __v) _NOEXCEPT {"},
{"lineNum":"  206","line":"      return reinterpret_cast<size_t>(__v);"},
{"lineNum":"  207","line":"    }"},
{"lineNum":"  208","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_ALWAYS_INLINE"},
{"lineNum":"  209","line":"    static bool __eq(__type_name_t __lhs, __type_name_t __rhs) _NOEXCEPT {"},
{"lineNum":"  210","line":"      return __lhs == __rhs;","class":"linePartCov","hits":"31","order":"310","possible_hits":"874",},
{"lineNum":"  211","line":"    }"},
{"lineNum":"  212","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_ALWAYS_INLINE"},
{"lineNum":"  213","line":"    static bool __lt(__type_name_t __lhs, __type_name_t __rhs) _NOEXCEPT {"},
{"lineNum":"  214","line":"      return __lhs < __rhs;","class":"linePartCov","hits":"12","order":"348","possible_hits":"248",},
{"lineNum":"  215","line":"    }"},
{"lineNum":"  216","line":"  };"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"  struct __non_unique_impl : __string_impl_base {"},
{"lineNum":"  219","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_ALWAYS_INLINE"},
{"lineNum":"  220","line":"    static size_t __hash(__type_name_t __ptr) _NOEXCEPT {"},
{"lineNum":"  221","line":"      size_t __hash = 5381;"},
{"lineNum":"  222","line":"      while (unsigned char __c = static_cast<unsigned char>(*__ptr++))"},
{"lineNum":"  223","line":"        __hash = (__hash * 33) ^ __c;"},
{"lineNum":"  224","line":"      return __hash;"},
{"lineNum":"  225","line":"    }"},
{"lineNum":"  226","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_ALWAYS_INLINE"},
{"lineNum":"  227","line":"    static bool __eq(__type_name_t __lhs, __type_name_t __rhs) _NOEXCEPT {"},
{"lineNum":"  228","line":"      return __lhs == __rhs || __builtin_strcmp(__lhs, __rhs) == 0;"},
{"lineNum":"  229","line":"    }"},
{"lineNum":"  230","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_ALWAYS_INLINE"},
{"lineNum":"  231","line":"    static bool __lt(__type_name_t __lhs, __type_name_t __rhs) _NOEXCEPT {"},
{"lineNum":"  232","line":"      return __builtin_strcmp(__lhs, __rhs) < 0;"},
{"lineNum":"  233","line":"    }"},
{"lineNum":"  234","line":"  };"},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":"  struct __non_unique_arm_rtti_bit_impl {"},
{"lineNum":"  237","line":"    typedef uintptr_t __type_name_t;"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_ALWAYS_INLINE"},
{"lineNum":"  240","line":"    static const char* __type_name_to_string(__type_name_t __v) _NOEXCEPT {"},
{"lineNum":"  241","line":"      return reinterpret_cast<const char*>(__v &"},
{"lineNum":"  242","line":"          ~__non_unique_rtti_bit::value);"},
{"lineNum":"  243","line":"    }"},
{"lineNum":"  244","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_ALWAYS_INLINE"},
{"lineNum":"  245","line":"    static __type_name_t __string_to_type_name(const char* __v) _NOEXCEPT {"},
{"lineNum":"  246","line":"      return reinterpret_cast<__type_name_t>(__v);"},
{"lineNum":"  247","line":"    }"},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_ALWAYS_INLINE"},
{"lineNum":"  250","line":"    static size_t __hash(__type_name_t __v) _NOEXCEPT {"},
{"lineNum":"  251","line":"      if (__is_type_name_unique(__v))"},
{"lineNum":"  252","line":"        return __v;"},
{"lineNum":"  253","line":"      return __non_unique_impl::__hash(__type_name_to_string(__v));"},
{"lineNum":"  254","line":"    }"},
{"lineNum":"  255","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_ALWAYS_INLINE"},
{"lineNum":"  256","line":"    static bool __eq(__type_name_t __lhs, __type_name_t __rhs) _NOEXCEPT {"},
{"lineNum":"  257","line":"      if (__lhs == __rhs)"},
{"lineNum":"  258","line":"        return true;"},
{"lineNum":"  259","line":"      if (__is_type_name_unique(__lhs) || __is_type_name_unique(__rhs))"},
{"lineNum":"  260","line":"        // Either both are unique and have a different address, or one of them"},
{"lineNum":"  261","line":"        // is unique and the other one isn\'t. In both cases they are unequal."},
{"lineNum":"  262","line":"        return false;"},
{"lineNum":"  263","line":"      return __builtin_strcmp(__type_name_to_string(__lhs), __type_name_to_string(__rhs)) == 0;"},
{"lineNum":"  264","line":"    }"},
{"lineNum":"  265","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_ALWAYS_INLINE"},
{"lineNum":"  266","line":"    static bool __lt(__type_name_t __lhs, __type_name_t __rhs) _NOEXCEPT {"},
{"lineNum":"  267","line":"      if (__is_type_name_unique(__lhs) || __is_type_name_unique(__rhs))"},
{"lineNum":"  268","line":"        return __lhs < __rhs;"},
{"lineNum":"  269","line":"      return __builtin_strcmp(__type_name_to_string(__lhs), __type_name_to_string(__rhs)) < 0;"},
{"lineNum":"  270","line":"    }"},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"   private:"},
{"lineNum":"  273","line":"    // The unique bit is the top bit. It is expected that __type_name_t is 64 bits when"},
{"lineNum":"  274","line":"    // this implementation is actually used."},
{"lineNum":"  275","line":"    typedef integral_constant<__type_name_t,"},
{"lineNum":"  276","line":"      (1ULL << ((__CHAR_BIT__ * sizeof(__type_name_t)) - 1))> __non_unique_rtti_bit;"},
{"lineNum":"  277","line":""},
{"lineNum":"  278","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  279","line":"    static bool __is_type_name_unique(__type_name_t __lhs) _NOEXCEPT {"},
{"lineNum":"  280","line":"      return !(__lhs & __non_unique_rtti_bit::value);"},
{"lineNum":"  281","line":"    }"},
{"lineNum":"  282","line":"  };"},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"  typedef"},
{"lineNum":"  285","line":"#if _LIBCPP_TYPEINFO_COMPARISON_IMPLEMENTATION == 1"},
{"lineNum":"  286","line":"    __unique_impl"},
{"lineNum":"  287","line":"#elif _LIBCPP_TYPEINFO_COMPARISON_IMPLEMENTATION == 2"},
{"lineNum":"  288","line":"    __non_unique_impl"},
{"lineNum":"  289","line":"#elif _LIBCPP_TYPEINFO_COMPARISON_IMPLEMENTATION == 3"},
{"lineNum":"  290","line":"    __non_unique_arm_rtti_bit_impl"},
{"lineNum":"  291","line":"#else"},
{"lineNum":"  292","line":"#   error invalid configuration for _LIBCPP_TYPEINFO_COMPARISON_IMPLEMENTATION"},
{"lineNum":"  293","line":"#endif"},
{"lineNum":"  294","line":"     __impl;"},
{"lineNum":"  295","line":"};"},
{"lineNum":"  296","line":""},
{"lineNum":"  297","line":"class _LIBCPP_EXCEPTION_ABI type_info"},
{"lineNum":"  298","line":"{"},
{"lineNum":"  299","line":"  type_info& operator=(const type_info&);"},
{"lineNum":"  300","line":"  type_info(const type_info&);"},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":" protected:"},
{"lineNum":"  303","line":"    typedef __type_info_implementations::__impl __impl;"},
{"lineNum":"  304","line":""},
{"lineNum":"  305","line":"    __impl::__type_name_t __type_name;"},
{"lineNum":"  306","line":""},
{"lineNum":"  307","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  308","line":"    explicit type_info(const char* __n)"},
{"lineNum":"  309","line":"      : __type_name(__impl::__string_to_type_name(__n)) {}"},
{"lineNum":"  310","line":""},
{"lineNum":"  311","line":"public:"},
{"lineNum":"  312","line":"    _LIBCPP_AVAILABILITY_TYPEINFO_VTABLE"},
{"lineNum":"  313","line":"    virtual ~type_info();"},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  316","line":"    const char* name() const _NOEXCEPT"},
{"lineNum":"  317","line":"    {"},
{"lineNum":"  318","line":"      return __impl::__type_name_to_string(__type_name);","class":"lineNoCov","hits":"0","possible_hits":"162",},
{"lineNum":"  319","line":"    }"},
{"lineNum":"  320","line":""},
{"lineNum":"  321","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  322","line":"    bool before(const type_info& __arg) const _NOEXCEPT"},
{"lineNum":"  323","line":"    {"},
{"lineNum":"  324","line":"      return __impl::__lt(__type_name, __arg.__type_name);","class":"linePartCov","hits":"8","order":"347","possible_hits":"49",},
{"lineNum":"  325","line":"    }"},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  328","line":"    size_t hash_code() const _NOEXCEPT"},
{"lineNum":"  329","line":"    {"},
{"lineNum":"  330","line":"      return __impl::__hash(__type_name);","class":"linePartCov","hits":"10","order":"116","possible_hits":"33",},
{"lineNum":"  331","line":"    }"},
{"lineNum":"  332","line":""},
{"lineNum":"  333","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  334","line":"    bool operator==(const type_info& __arg) const _NOEXCEPT"},
{"lineNum":"  335","line":"    {"},
{"lineNum":"  336","line":"      return __impl::__eq(__type_name, __arg.__type_name);","class":"linePartCov","hits":"31","order":"309","possible_hits":"529",},
{"lineNum":"  337","line":"    }"},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  340","line":"    bool operator!=(const type_info& __arg) const _NOEXCEPT"},
{"lineNum":"  341","line":"    { return !operator==(__arg); }"},
{"lineNum":"  342","line":"};"},
{"lineNum":"  343","line":"#endif // defined(_LIBCPP_ABI_MICROSOFT)"},
{"lineNum":"  344","line":""},
{"lineNum":"  345","line":"class _LIBCPP_EXCEPTION_ABI bad_cast"},
{"lineNum":"  346","line":"    : public exception"},
{"lineNum":"  347","line":"{"},
{"lineNum":"  348","line":" public:"},
{"lineNum":"  349","line":"  bad_cast() _NOEXCEPT;"},
{"lineNum":"  350","line":"  bad_cast(const bad_cast&) _NOEXCEPT = default;"},
{"lineNum":"  351","line":"  virtual ~bad_cast() _NOEXCEPT;"},
{"lineNum":"  352","line":"  virtual const char* what() const _NOEXCEPT;"},
{"lineNum":"  353","line":"};"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"class _LIBCPP_EXCEPTION_ABI bad_typeid"},
{"lineNum":"  356","line":"    : public exception"},
{"lineNum":"  357","line":"{"},
{"lineNum":"  358","line":" public:"},
{"lineNum":"  359","line":"  bad_typeid() _NOEXCEPT;"},
{"lineNum":"  360","line":"  virtual ~bad_typeid() _NOEXCEPT;"},
{"lineNum":"  361","line":"  virtual const char* what() const _NOEXCEPT;"},
{"lineNum":"  362","line":"};"},
{"lineNum":"  363","line":""},
{"lineNum":"  364","line":"}  // std"},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":"#endif // defined(_LIBCPP_ABI_VCRUNTIME)"},
{"lineNum":"  367","line":""},
{"lineNum":"  368","line":"_LIBCPP_BEGIN_NAMESPACE_STD"},
{"lineNum":"  369","line":"_LIBCPP_NORETURN inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  370","line":"void __throw_bad_cast()"},
{"lineNum":"  371","line":"{","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  372","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":"  373","line":"    throw bad_cast();","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  374","line":"#else"},
{"lineNum":"  375","line":"    _VSTD::abort();"},
{"lineNum":"  376","line":"#endif"},
{"lineNum":"  377","line":"}"},
{"lineNum":"  378","line":"_LIBCPP_END_NAMESPACE_STD"},
{"lineNum":"  379","line":""},
{"lineNum":"  380","line":"#endif // __LIBCPP_TYPEINFO"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 8, "covered" : 5,};
var merged_data = [];
