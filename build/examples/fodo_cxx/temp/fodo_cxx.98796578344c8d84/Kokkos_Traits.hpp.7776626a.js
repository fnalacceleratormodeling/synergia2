var data = {lines:[
{"lineNum":"    1","line":"/*"},
{"lineNum":"    2","line":"//@HEADER"},
{"lineNum":"    3","line":"// ************************************************************************"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"//                        Kokkos v. 3.0"},
{"lineNum":"    6","line":"//       Copyright (2020) National Technology & Engineering"},
{"lineNum":"    7","line":"//               Solutions of Sandia, LLC (NTESS)."},
{"lineNum":"    8","line":"//"},
{"lineNum":"    9","line":"// Under the terms of Contract DE-NA0003525 with NTESS,"},
{"lineNum":"   10","line":"// the U.S. Government retains certain rights in this software."},
{"lineNum":"   11","line":"//"},
{"lineNum":"   12","line":"// Redistribution and use in source and binary forms, with or without"},
{"lineNum":"   13","line":"// modification, are permitted provided that the following conditions are"},
{"lineNum":"   14","line":"// met:"},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"// 1. Redistributions of source code must retain the above copyright"},
{"lineNum":"   17","line":"// notice, this list of conditions and the following disclaimer."},
{"lineNum":"   18","line":"//"},
{"lineNum":"   19","line":"// 2. Redistributions in binary form must reproduce the above copyright"},
{"lineNum":"   20","line":"// notice, this list of conditions and the following disclaimer in the"},
{"lineNum":"   21","line":"// documentation and/or other materials provided with the distribution."},
{"lineNum":"   22","line":"//"},
{"lineNum":"   23","line":"// 3. Neither the name of the Corporation nor the names of the"},
{"lineNum":"   24","line":"// contributors may be used to endorse or promote products derived from"},
{"lineNum":"   25","line":"// this software without specific prior written permission."},
{"lineNum":"   26","line":"//"},
{"lineNum":"   27","line":"// THIS SOFTWARE IS PROVIDED BY NTESS \"AS IS\" AND ANY"},
{"lineNum":"   28","line":"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"},
{"lineNum":"   29","line":"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR"},
{"lineNum":"   30","line":"// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NTESS OR THE"},
{"lineNum":"   31","line":"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,"},
{"lineNum":"   32","line":"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,"},
{"lineNum":"   33","line":"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR"},
{"lineNum":"   34","line":"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF"},
{"lineNum":"   35","line":"// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING"},
{"lineNum":"   36","line":"// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"},
{"lineNum":"   37","line":"// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   38","line":"//"},
{"lineNum":"   39","line":"// Questions? Contact Christian R. Trott (crtrott@sandia.gov)"},
{"lineNum":"   40","line":"//"},
{"lineNum":"   41","line":"// ************************************************************************"},
{"lineNum":"   42","line":"//@HEADER"},
{"lineNum":"   43","line":"*/"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"#ifndef KOKKOSTRAITS_HPP"},
{"lineNum":"   46","line":"#define KOKKOSTRAITS_HPP"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"#include <cstddef>"},
{"lineNum":"   49","line":"#include <cstdint>"},
{"lineNum":"   50","line":"#include <Kokkos_Macros.hpp>"},
{"lineNum":"   51","line":"#include <impl/Kokkos_BitOps.hpp>"},
{"lineNum":"   52","line":"#include <string>"},
{"lineNum":"   53","line":"#include <type_traits>"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"namespace Kokkos {"},
{"lineNum":"   56","line":"namespace Impl {"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"//----------------------------------------------------------------------------"},
{"lineNum":"   59","line":"// Help with C++11 variadic argument packs"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"template <unsigned I, typename... Pack>"},
{"lineNum":"   62","line":"struct get_type {"},
{"lineNum":"   63","line":"  using type = void;"},
{"lineNum":"   64","line":"};"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"template <typename T, typename... Pack>"},
{"lineNum":"   67","line":"struct get_type<0, T, Pack...> {"},
{"lineNum":"   68","line":"  using type = T;"},
{"lineNum":"   69","line":"};"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"template <unsigned I, typename T, typename... Pack>"},
{"lineNum":"   72","line":"struct get_type<I, T, Pack...> {"},
{"lineNum":"   73","line":"  using type = typename get_type<I - 1, Pack...>::type;"},
{"lineNum":"   74","line":"};"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"template <typename T, typename... Pack>"},
{"lineNum":"   77","line":"struct has_type {"},
{"lineNum":"   78","line":"  enum : bool { value = false };"},
{"lineNum":"   79","line":"};"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"template <typename T, typename S, typename... Pack>"},
{"lineNum":"   82","line":"struct has_type<T, S, Pack...> {"},
{"lineNum":"   83","line":" private:"},
{"lineNum":"   84","line":"  enum { self_value = std::is_same<T, S>::value };"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"  using next = has_type<T, Pack...>;"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"  static_assert("},
{"lineNum":"   89","line":"      !(self_value && next::value),"},
{"lineNum":"   90","line":"      \"Error: more than one member of the argument pack matches the type\");"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":" public:"},
{"lineNum":"   93","line":"  enum : bool { value = self_value || next::value };"},
{"lineNum":"   94","line":"};"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"template <typename DefaultType, template <typename> class Condition,"},
{"lineNum":"   97","line":"          typename... Pack>"},
{"lineNum":"   98","line":"struct has_condition {"},
{"lineNum":"   99","line":"  enum : bool { value = false };"},
{"lineNum":"  100","line":"  using type = DefaultType;"},
{"lineNum":"  101","line":"};"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"template <typename DefaultType, template <typename> class Condition, typename S,"},
{"lineNum":"  104","line":"          typename... Pack>"},
{"lineNum":"  105","line":"struct has_condition<DefaultType, Condition, S, Pack...> {"},
{"lineNum":"  106","line":" private:"},
{"lineNum":"  107","line":"  enum { self_value = Condition<S>::value };"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"  using next = has_condition<DefaultType, Condition, Pack...>;"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"  static_assert("},
{"lineNum":"  112","line":"      !(self_value && next::value),"},
{"lineNum":"  113","line":"      \"Error: more than one member of the argument pack satisfies condition\");"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":" public:"},
{"lineNum":"  116","line":"  enum : bool { value = self_value || next::value };"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"  using type ="},
{"lineNum":"  119","line":"      typename std::conditional<self_value, S, typename next::type>::type;"},
{"lineNum":"  120","line":"};"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"template <class... Args>"},
{"lineNum":"  123","line":"struct are_integral {"},
{"lineNum":"  124","line":"  enum : bool { value = true };"},
{"lineNum":"  125","line":"};"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"template <typename T, class... Args>"},
{"lineNum":"  128","line":"struct are_integral<T, Args...> {"},
{"lineNum":"  129","line":"  enum {"},
{"lineNum":"  130","line":"    value ="},
{"lineNum":"  131","line":"        // Accept std::is_integral OR std::is_enum as an integral value"},
{"lineNum":"  132","line":"        // since a simple enum value is automically convertible to an"},
{"lineNum":"  133","line":"        // integral value."},
{"lineNum":"  134","line":"    (std::is_integral<T>::value || std::is_enum<T>::value) &&"},
{"lineNum":"  135","line":"    are_integral<Args...>::value"},
{"lineNum":"  136","line":"  };"},
{"lineNum":"  137","line":"};"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  140","line":"}  // namespace Impl"},
{"lineNum":"  141","line":"}  // namespace Kokkos"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  144","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  145","line":"// Other traits"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"namespace Kokkos {"},
{"lineNum":"  148","line":"namespace Impl {"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  151","line":"// if_"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"template <bool Cond, typename TrueType, typename FalseType>"},
{"lineNum":"  154","line":"struct if_c {"},
{"lineNum":"  155","line":"  enum : bool { value = Cond };"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"  using type = FalseType;"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"  using value_type = typename std::remove_const<"},
{"lineNum":"  160","line":"      typename std::remove_reference<type>::type>::type;"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"  using const_value_type = typename std::add_const<value_type>::type;"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"  static KOKKOS_INLINE_FUNCTION const_value_type& select(const_value_type& v) {"},
{"lineNum":"  165","line":"    return v;"},
{"lineNum":"  166","line":"  }"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"  static KOKKOS_INLINE_FUNCTION value_type& select(value_type& v) { return v; }"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"  template <class T>"},
{"lineNum":"  171","line":"  static KOKKOS_INLINE_FUNCTION value_type& select(const T&) {"},
{"lineNum":"  172","line":"    value_type* ptr(0);"},
{"lineNum":"  173","line":"    return *ptr;"},
{"lineNum":"  174","line":"  }"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"  template <class T>"},
{"lineNum":"  177","line":"  static KOKKOS_INLINE_FUNCTION const_value_type& select(const T&,"},
{"lineNum":"  178","line":"                                                         const_value_type& v) {"},
{"lineNum":"  179","line":"    return v;"},
{"lineNum":"  180","line":"  }"},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"  template <class T>"},
{"lineNum":"  183","line":"  static KOKKOS_INLINE_FUNCTION value_type& select(const T&, value_type& v) {"},
{"lineNum":"  184","line":"    return v;"},
{"lineNum":"  185","line":"  }"},
{"lineNum":"  186","line":"};"},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"template <typename TrueType, typename FalseType>"},
{"lineNum":"  189","line":"struct if_c<true, TrueType, FalseType> {"},
{"lineNum":"  190","line":"  enum : bool { value = true };"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"  using type = TrueType;"},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"  using value_type = typename std::remove_const<"},
{"lineNum":"  195","line":"      typename std::remove_reference<type>::type>::type;"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"  using const_value_type = typename std::add_const<value_type>::type;"},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"  static KOKKOS_INLINE_FUNCTION const_value_type& select(const_value_type& v) {"},
{"lineNum":"  200","line":"    return v;"},
{"lineNum":"  201","line":"  }"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"  static KOKKOS_INLINE_FUNCTION value_type& select(value_type& v) { return v; }"},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"  template <class T>"},
{"lineNum":"  206","line":"  static KOKKOS_INLINE_FUNCTION value_type& select(const T&) {"},
{"lineNum":"  207","line":"    value_type* ptr(0);"},
{"lineNum":"  208","line":"    return *ptr;"},
{"lineNum":"  209","line":"  }"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"  template <class F>"},
{"lineNum":"  212","line":"  static KOKKOS_INLINE_FUNCTION const_value_type& select(const_value_type& v,"},
{"lineNum":"  213","line":"                                                         const F&) {"},
{"lineNum":"  214","line":"    return v;"},
{"lineNum":"  215","line":"  }"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"  template <class F>"},
{"lineNum":"  218","line":"  static KOKKOS_INLINE_FUNCTION value_type& select(value_type& v, const F&) {"},
{"lineNum":"  219","line":"    return v;"},
{"lineNum":"  220","line":"  }"},
{"lineNum":"  221","line":"};"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"template <typename TrueType>"},
{"lineNum":"  224","line":"struct if_c<false, TrueType, void> {"},
{"lineNum":"  225","line":"  enum : bool { value = false };"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"  using type       = void;"},
{"lineNum":"  228","line":"  using value_type = void;"},
{"lineNum":"  229","line":"};"},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"template <typename FalseType>"},
{"lineNum":"  232","line":"struct if_c<true, void, FalseType> {"},
{"lineNum":"  233","line":"  enum : bool { value = true };"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"  using type       = void;"},
{"lineNum":"  236","line":"  using value_type = void;"},
{"lineNum":"  237","line":"};"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  240","line":"// These \'constexpr\'functions can be used as"},
{"lineNum":"  241","line":"// both regular functions and meta-function."},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"/**\\brief  There exists integral \'k\' such that N = 2^k */"},
{"lineNum":"  244","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  245","line":"constexpr bool is_integral_power_of_two(const size_t N) {"},
{"lineNum":"  246","line":"  return (0 < N) && (0 == (N & (N - 1)));","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  247","line":"}"},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"/**\\brief  Return integral \'k\' such that N = 2^k, assuming valid.  */"},
{"lineNum":"  250","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  251","line":"constexpr unsigned integral_power_of_two_assume_valid(const size_t N) {"},
{"lineNum":"  252","line":"  return N == 1 ? 0 : 1 + integral_power_of_two_assume_valid(N >> 1);"},
{"lineNum":"  253","line":"}"},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"/**\\brief  Return integral \'k\' such that N = 2^k, if exists."},
{"lineNum":"  256","line":" *         If does not exist return ~0u."},
{"lineNum":"  257","line":" */"},
{"lineNum":"  258","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  259","line":"constexpr unsigned integral_power_of_two(const size_t N) {"},
{"lineNum":"  260","line":"  return is_integral_power_of_two(N) ? integral_power_of_two_assume_valid(N)"},
{"lineNum":"  261","line":"                                     : ~0u;"},
{"lineNum":"  262","line":"}"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  265","line":""},
{"lineNum":"  266","line":"template <size_t N>"},
{"lineNum":"  267","line":"struct is_power_of_two {"},
{"lineNum":"  268","line":"  enum type { value = (N > 0) && !(N & (N - 1)) };"},
{"lineNum":"  269","line":"};"},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"template <size_t N, bool OK = is_power_of_two<N>::value>"},
{"lineNum":"  272","line":"struct power_of_two;"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"template <size_t N>"},
{"lineNum":"  275","line":"struct power_of_two<N, true> {"},
{"lineNum":"  276","line":"  enum type { value = 1 + power_of_two<(N >> 1), true>::value };"},
{"lineNum":"  277","line":"};"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"template <>"},
{"lineNum":"  280","line":"struct power_of_two<2, true> {"},
{"lineNum":"  281","line":"  enum type { value = 1 };"},
{"lineNum":"  282","line":"};"},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"template <>"},
{"lineNum":"  285","line":"struct power_of_two<1, true> {"},
{"lineNum":"  286","line":"  enum type { value = 0 };"},
{"lineNum":"  287","line":"};"},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"/** \\brief  If power of two then return power,"},
{"lineNum":"  290","line":" *          otherwise return ~0u."},
{"lineNum":"  291","line":" */"},
{"lineNum":"  292","line":"KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":"  293","line":"unsigned power_of_two_if_valid(const unsigned N) {"},
{"lineNum":"  294","line":"  unsigned p = ~0u;"},
{"lineNum":"  295","line":"  if (is_integral_power_of_two(N)) {"},
{"lineNum":"  296","line":"    p = bit_scan_forward(N);"},
{"lineNum":"  297","line":"  }"},
{"lineNum":"  298","line":"  return p;"},
{"lineNum":"  299","line":"}"},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"template <typename T, T v, bool NonZero = (v != T(0))>"},
{"lineNum":"  304","line":"struct integral_nonzero_constant {"},
{"lineNum":"  305","line":"  // Declaration of \'static const\' causes an unresolved linker symbol in debug"},
{"lineNum":"  306","line":"  // static const T value = v ;"},
{"lineNum":"  307","line":"  enum { value = T(v) };"},
{"lineNum":"  308","line":"  using value_type = T;"},
{"lineNum":"  309","line":"  using type       = integral_nonzero_constant<T, v>;"},
{"lineNum":"  310","line":"  KOKKOS_INLINE_FUNCTION integral_nonzero_constant(const T&) {}"},
{"lineNum":"  311","line":"};"},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":"template <typename T, T zero>"},
{"lineNum":"  314","line":"struct integral_nonzero_constant<T, zero, false> {"},
{"lineNum":"  315","line":"  const T value;"},
{"lineNum":"  316","line":"  using value_type = T;"},
{"lineNum":"  317","line":"  using type       = integral_nonzero_constant<T, 0>;"},
{"lineNum":"  318","line":"  KOKKOS_INLINE_FUNCTION integral_nonzero_constant(const T& v) : value(v) {}"},
{"lineNum":"  319","line":"};"},
{"lineNum":"  320","line":""},
{"lineNum":"  321","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"template <class T>"},
{"lineNum":"  324","line":"struct make_all_extents_into_pointers {"},
{"lineNum":"  325","line":"  using type = T;"},
{"lineNum":"  326","line":"};"},
{"lineNum":"  327","line":""},
{"lineNum":"  328","line":"template <class T, unsigned N>"},
{"lineNum":"  329","line":"struct make_all_extents_into_pointers<T[N]> {"},
{"lineNum":"  330","line":"  using type = typename make_all_extents_into_pointers<T>::type*;"},
{"lineNum":"  331","line":"};"},
{"lineNum":"  332","line":""},
{"lineNum":"  333","line":"template <class T>"},
{"lineNum":"  334","line":"struct make_all_extents_into_pointers<T*> {"},
{"lineNum":"  335","line":"  using type = typename make_all_extents_into_pointers<T>::type*;"},
{"lineNum":"  336","line":"};"},
{"lineNum":"  337","line":""},
{"lineNum":"  338","line":"}  // namespace Impl"},
{"lineNum":"  339","line":"}  // namespace Kokkos"},
{"lineNum":"  340","line":""},
{"lineNum":"  341","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  342","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  343","line":""},
{"lineNum":"  344","line":"#endif /* #ifndef KOKKOSTRAITS_HPP */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 1, "covered" : 0,};
var merged_data = [];
