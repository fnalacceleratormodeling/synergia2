var data = {lines:[
{"lineNum":"    1","line":"// -*- C++ -*-"},
{"lineNum":"    2","line":"//===----------------------------- map ------------------------------------===//"},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions."},
{"lineNum":"    5","line":"// See https://llvm.org/LICENSE.txt for license information."},
{"lineNum":"    6","line":"// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef _LIBCPP_MAP"},
{"lineNum":"   11","line":"#define _LIBCPP_MAP"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"/*"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"    map synopsis"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"namespace std"},
{"lineNum":"   18","line":"{"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"template <class Key, class T, class Compare = less<Key>,"},
{"lineNum":"   21","line":"          class Allocator = allocator<pair<const Key, T>>>"},
{"lineNum":"   22","line":"class map"},
{"lineNum":"   23","line":"{"},
{"lineNum":"   24","line":"public:"},
{"lineNum":"   25","line":"    // types:"},
{"lineNum":"   26","line":"    typedef Key                                      key_type;"},
{"lineNum":"   27","line":"    typedef T                                        mapped_type;"},
{"lineNum":"   28","line":"    typedef pair<const key_type, mapped_type>        value_type;"},
{"lineNum":"   29","line":"    typedef Compare                                  key_compare;"},
{"lineNum":"   30","line":"    typedef Allocator                                allocator_type;"},
{"lineNum":"   31","line":"    typedef typename allocator_type::reference       reference;"},
{"lineNum":"   32","line":"    typedef typename allocator_type::const_reference const_reference;"},
{"lineNum":"   33","line":"    typedef typename allocator_type::pointer         pointer;"},
{"lineNum":"   34","line":"    typedef typename allocator_type::const_pointer   const_pointer;"},
{"lineNum":"   35","line":"    typedef typename allocator_type::size_type       size_type;"},
{"lineNum":"   36","line":"    typedef typename allocator_type::difference_type difference_type;"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"    typedef implementation-defined                   iterator;"},
{"lineNum":"   39","line":"    typedef implementation-defined                   const_iterator;"},
{"lineNum":"   40","line":"    typedef std::reverse_iterator<iterator>          reverse_iterator;"},
{"lineNum":"   41","line":"    typedef std::reverse_iterator<const_iterator>    const_reverse_iterator;"},
{"lineNum":"   42","line":"    typedef unspecified                              node_type;              // C++17"},
{"lineNum":"   43","line":"    typedef INSERT_RETURN_TYPE<iterator, node_type>  insert_return_type;     // C++17"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"    class value_compare"},
{"lineNum":"   46","line":"    {"},
{"lineNum":"   47","line":"        friend class map;"},
{"lineNum":"   48","line":"    protected:"},
{"lineNum":"   49","line":"        key_compare comp;"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"        value_compare(key_compare c);"},
{"lineNum":"   52","line":"    public:"},
{"lineNum":"   53","line":"        typedef bool result_type;  // deprecated in C++17, removed in C++20"},
{"lineNum":"   54","line":"        typedef value_type first_argument_type;  // deprecated in C++17, removed in C++20"},
{"lineNum":"   55","line":"        typedef value_type second_argument_type;  // deprecated in C++17, removed in C++20"},
{"lineNum":"   56","line":"        bool operator()(const value_type& x, const value_type& y) const;"},
{"lineNum":"   57","line":"    };"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"    // construct/copy/destroy:"},
{"lineNum":"   60","line":"    map()"},
{"lineNum":"   61","line":"        noexcept("},
{"lineNum":"   62","line":"            is_nothrow_default_constructible<allocator_type>::value &&"},
{"lineNum":"   63","line":"            is_nothrow_default_constructible<key_compare>::value &&"},
{"lineNum":"   64","line":"            is_nothrow_copy_constructible<key_compare>::value);"},
{"lineNum":"   65","line":"    explicit map(const key_compare& comp);"},
{"lineNum":"   66","line":"    map(const key_compare& comp, const allocator_type& a);"},
{"lineNum":"   67","line":"    template <class InputIterator>"},
{"lineNum":"   68","line":"        map(InputIterator first, InputIterator last,"},
{"lineNum":"   69","line":"            const key_compare& comp = key_compare());"},
{"lineNum":"   70","line":"    template <class InputIterator>"},
{"lineNum":"   71","line":"        map(InputIterator first, InputIterator last,"},
{"lineNum":"   72","line":"            const key_compare& comp, const allocator_type& a);"},
{"lineNum":"   73","line":"    map(const map& m);"},
{"lineNum":"   74","line":"    map(map&& m)"},
{"lineNum":"   75","line":"        noexcept("},
{"lineNum":"   76","line":"            is_nothrow_move_constructible<allocator_type>::value &&"},
{"lineNum":"   77","line":"            is_nothrow_move_constructible<key_compare>::value);"},
{"lineNum":"   78","line":"    explicit map(const allocator_type& a);"},
{"lineNum":"   79","line":"    map(const map& m, const allocator_type& a);"},
{"lineNum":"   80","line":"    map(map&& m, const allocator_type& a);"},
{"lineNum":"   81","line":"    map(initializer_list<value_type> il, const key_compare& comp = key_compare());"},
{"lineNum":"   82","line":"    map(initializer_list<value_type> il, const key_compare& comp, const allocator_type& a);"},
{"lineNum":"   83","line":"    template <class InputIterator>"},
{"lineNum":"   84","line":"        map(InputIterator first, InputIterator last, const allocator_type& a)"},
{"lineNum":"   85","line":"            : map(first, last, Compare(), a) {}  // C++14"},
{"lineNum":"   86","line":"    map(initializer_list<value_type> il, const allocator_type& a)"},
{"lineNum":"   87","line":"        : map(il, Compare(), a) {}  // C++14"},
{"lineNum":"   88","line":"   ~map();"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"    map& operator=(const map& m);"},
{"lineNum":"   91","line":"    map& operator=(map&& m)"},
{"lineNum":"   92","line":"        noexcept("},
{"lineNum":"   93","line":"            allocator_type::propagate_on_container_move_assignment::value &&"},
{"lineNum":"   94","line":"            is_nothrow_move_assignable<allocator_type>::value &&"},
{"lineNum":"   95","line":"            is_nothrow_move_assignable<key_compare>::value);"},
{"lineNum":"   96","line":"    map& operator=(initializer_list<value_type> il);"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"    // iterators:"},
{"lineNum":"   99","line":"          iterator begin() noexcept;"},
{"lineNum":"  100","line":"    const_iterator begin() const noexcept;"},
{"lineNum":"  101","line":"          iterator end() noexcept;"},
{"lineNum":"  102","line":"    const_iterator end()   const noexcept;"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"          reverse_iterator rbegin() noexcept;"},
{"lineNum":"  105","line":"    const_reverse_iterator rbegin() const noexcept;"},
{"lineNum":"  106","line":"          reverse_iterator rend() noexcept;"},
{"lineNum":"  107","line":"    const_reverse_iterator rend()   const noexcept;"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"    const_iterator         cbegin()  const noexcept;"},
{"lineNum":"  110","line":"    const_iterator         cend()    const noexcept;"},
{"lineNum":"  111","line":"    const_reverse_iterator crbegin() const noexcept;"},
{"lineNum":"  112","line":"    const_reverse_iterator crend()   const noexcept;"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"    // capacity:"},
{"lineNum":"  115","line":"    bool      empty()    const noexcept;"},
{"lineNum":"  116","line":"    size_type size()     const noexcept;"},
{"lineNum":"  117","line":"    size_type max_size() const noexcept;"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"    // element access:"},
{"lineNum":"  120","line":"    mapped_type& operator[](const key_type& k);"},
{"lineNum":"  121","line":"    mapped_type& operator[](key_type&& k);"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"          mapped_type& at(const key_type& k);"},
{"lineNum":"  124","line":"    const mapped_type& at(const key_type& k) const;"},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"    // modifiers:"},
{"lineNum":"  127","line":"    template <class... Args>"},
{"lineNum":"  128","line":"        pair<iterator, bool> emplace(Args&&... args);"},
{"lineNum":"  129","line":"    template <class... Args>"},
{"lineNum":"  130","line":"        iterator emplace_hint(const_iterator position, Args&&... args);"},
{"lineNum":"  131","line":"    pair<iterator, bool> insert(const value_type& v);"},
{"lineNum":"  132","line":"    pair<iterator, bool> insert(      value_type&& v);                                // C++17"},
{"lineNum":"  133","line":"    template <class P>"},
{"lineNum":"  134","line":"        pair<iterator, bool> insert(P&& p);"},
{"lineNum":"  135","line":"    iterator insert(const_iterator position, const value_type& v);"},
{"lineNum":"  136","line":"    iterator insert(const_iterator position,       value_type&& v);                   // C++17"},
{"lineNum":"  137","line":"    template <class P>"},
{"lineNum":"  138","line":"        iterator insert(const_iterator position, P&& p);"},
{"lineNum":"  139","line":"    template <class InputIterator>"},
{"lineNum":"  140","line":"        void insert(InputIterator first, InputIterator last);"},
{"lineNum":"  141","line":"    void insert(initializer_list<value_type> il);"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"    node_type extract(const_iterator position);                                       // C++17"},
{"lineNum":"  144","line":"    node_type extract(const key_type& x);                                             // C++17"},
{"lineNum":"  145","line":"    insert_return_type insert(node_type&& nh);                                        // C++17"},
{"lineNum":"  146","line":"    iterator insert(const_iterator hint, node_type&& nh);                             // C++17"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"    template <class... Args>"},
{"lineNum":"  149","line":"        pair<iterator, bool> try_emplace(const key_type& k, Args&&... args);          // C++17"},
{"lineNum":"  150","line":"    template <class... Args>"},
{"lineNum":"  151","line":"        pair<iterator, bool> try_emplace(key_type&& k, Args&&... args);               // C++17"},
{"lineNum":"  152","line":"    template <class... Args>"},
{"lineNum":"  153","line":"        iterator try_emplace(const_iterator hint, const key_type& k, Args&&... args); // C++17"},
{"lineNum":"  154","line":"    template <class... Args>"},
{"lineNum":"  155","line":"        iterator try_emplace(const_iterator hint, key_type&& k, Args&&... args);      // C++17"},
{"lineNum":"  156","line":"    template <class M>"},
{"lineNum":"  157","line":"        pair<iterator, bool> insert_or_assign(const key_type& k, M&& obj);            // C++17"},
{"lineNum":"  158","line":"    template <class M>"},
{"lineNum":"  159","line":"        pair<iterator, bool> insert_or_assign(key_type&& k, M&& obj);                 // C++17"},
{"lineNum":"  160","line":"    template <class M>"},
{"lineNum":"  161","line":"        iterator insert_or_assign(const_iterator hint, const key_type& k, M&& obj);   // C++17"},
{"lineNum":"  162","line":"    template <class M>"},
{"lineNum":"  163","line":"        iterator insert_or_assign(const_iterator hint, key_type&& k, M&& obj);        // C++17"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"    iterator  erase(const_iterator position);"},
{"lineNum":"  166","line":"    iterator  erase(iterator position); // C++14"},
{"lineNum":"  167","line":"    size_type erase(const key_type& k);"},
{"lineNum":"  168","line":"    iterator  erase(const_iterator first, const_iterator last);"},
{"lineNum":"  169","line":"    void clear() noexcept;"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"    template<class C2>"},
{"lineNum":"  172","line":"      void merge(map<Key, T, C2, Allocator>& source);         // C++17"},
{"lineNum":"  173","line":"    template<class C2>"},
{"lineNum":"  174","line":"      void merge(map<Key, T, C2, Allocator>&& source);        // C++17"},
{"lineNum":"  175","line":"    template<class C2>"},
{"lineNum":"  176","line":"      void merge(multimap<Key, T, C2, Allocator>& source);    // C++17"},
{"lineNum":"  177","line":"    template<class C2>"},
{"lineNum":"  178","line":"      void merge(multimap<Key, T, C2, Allocator>&& source);   // C++17"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"    void swap(map& m)"},
{"lineNum":"  181","line":"        noexcept(allocator_traits<allocator_type>::is_always_equal::value &&"},
{"lineNum":"  182","line":"            is_nothrow_swappable<key_compare>::value); // C++17"},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"    // observers:"},
{"lineNum":"  185","line":"    allocator_type get_allocator() const noexcept;"},
{"lineNum":"  186","line":"    key_compare    key_comp()      const;"},
{"lineNum":"  187","line":"    value_compare  value_comp()    const;"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"    // map operations:"},
{"lineNum":"  190","line":"          iterator find(const key_type& k);"},
{"lineNum":"  191","line":"    const_iterator find(const key_type& k) const;"},
{"lineNum":"  192","line":"    template<typename K>"},
{"lineNum":"  193","line":"        iterator find(const K& x);              // C++14"},
{"lineNum":"  194","line":"    template<typename K>"},
{"lineNum":"  195","line":"        const_iterator find(const K& x) const;  // C++14"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"    template<typename K>"},
{"lineNum":"  198","line":"      size_type count(const K& x) const;        // C++14"},
{"lineNum":"  199","line":"    size_type      count(const key_type& k) const;"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"    bool           contains(const key_type& x) const;  // C++20"},
{"lineNum":"  202","line":"    template<class K> bool contains(const K& x) const; // C++20"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"          iterator lower_bound(const key_type& k);"},
{"lineNum":"  205","line":"    const_iterator lower_bound(const key_type& k) const;"},
{"lineNum":"  206","line":"    template<typename K>"},
{"lineNum":"  207","line":"        iterator lower_bound(const K& x);              // C++14"},
{"lineNum":"  208","line":"    template<typename K>"},
{"lineNum":"  209","line":"        const_iterator lower_bound(const K& x) const;  // C++14"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"          iterator upper_bound(const key_type& k);"},
{"lineNum":"  212","line":"    const_iterator upper_bound(const key_type& k) const;"},
{"lineNum":"  213","line":"    template<typename K>"},
{"lineNum":"  214","line":"        iterator upper_bound(const K& x);              // C++14"},
{"lineNum":"  215","line":"    template<typename K>"},
{"lineNum":"  216","line":"        const_iterator upper_bound(const K& x) const;  // C++14"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"    pair<iterator,iterator>             equal_range(const key_type& k);"},
{"lineNum":"  219","line":"    pair<const_iterator,const_iterator> equal_range(const key_type& k) const;"},
{"lineNum":"  220","line":"    template<typename K>"},
{"lineNum":"  221","line":"        pair<iterator,iterator>             equal_range(const K& x);        // C++14"},
{"lineNum":"  222","line":"    template<typename K>"},
{"lineNum":"  223","line":"        pair<const_iterator,const_iterator> equal_range(const K& x) const;  // C++14"},
{"lineNum":"  224","line":"};"},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"template <class Key, class T, class Compare, class Allocator>"},
{"lineNum":"  227","line":"bool"},
{"lineNum":"  228","line":"operator==(const map<Key, T, Compare, Allocator>& x,"},
{"lineNum":"  229","line":"           const map<Key, T, Compare, Allocator>& y);"},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"template <class Key, class T, class Compare, class Allocator>"},
{"lineNum":"  232","line":"bool"},
{"lineNum":"  233","line":"operator< (const map<Key, T, Compare, Allocator>& x,"},
{"lineNum":"  234","line":"           const map<Key, T, Compare, Allocator>& y);"},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":"template <class Key, class T, class Compare, class Allocator>"},
{"lineNum":"  237","line":"bool"},
{"lineNum":"  238","line":"operator!=(const map<Key, T, Compare, Allocator>& x,"},
{"lineNum":"  239","line":"           const map<Key, T, Compare, Allocator>& y);"},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"template <class Key, class T, class Compare, class Allocator>"},
{"lineNum":"  242","line":"bool"},
{"lineNum":"  243","line":"operator> (const map<Key, T, Compare, Allocator>& x,"},
{"lineNum":"  244","line":"           const map<Key, T, Compare, Allocator>& y);"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"template <class Key, class T, class Compare, class Allocator>"},
{"lineNum":"  247","line":"bool"},
{"lineNum":"  248","line":"operator>=(const map<Key, T, Compare, Allocator>& x,"},
{"lineNum":"  249","line":"           const map<Key, T, Compare, Allocator>& y);"},
{"lineNum":"  250","line":""},
{"lineNum":"  251","line":"template <class Key, class T, class Compare, class Allocator>"},
{"lineNum":"  252","line":"bool"},
{"lineNum":"  253","line":"operator<=(const map<Key, T, Compare, Allocator>& x,"},
{"lineNum":"  254","line":"           const map<Key, T, Compare, Allocator>& y);"},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"// specialized algorithms:"},
{"lineNum":"  257","line":"template <class Key, class T, class Compare, class Allocator>"},
{"lineNum":"  258","line":"void"},
{"lineNum":"  259","line":"swap(map<Key, T, Compare, Allocator>& x, map<Key, T, Compare, Allocator>& y)"},
{"lineNum":"  260","line":"    noexcept(noexcept(x.swap(y)));"},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"template <class Key, class T, class Compare, class Allocator, class Predicate>"},
{"lineNum":"  263","line":"typename map<Key, T, Compare, Allocator>::size_type"},
{"lineNum":"  264","line":"erase_if(map<Key, T, Compare, Allocator>& c, Predicate pred);  // C++20"},
{"lineNum":"  265","line":""},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"template <class Key, class T, class Compare = less<Key>,"},
{"lineNum":"  268","line":"          class Allocator = allocator<pair<const Key, T>>>"},
{"lineNum":"  269","line":"class multimap"},
{"lineNum":"  270","line":"{"},
{"lineNum":"  271","line":"public:"},
{"lineNum":"  272","line":"    // types:"},
{"lineNum":"  273","line":"    typedef Key                                      key_type;"},
{"lineNum":"  274","line":"    typedef T                                        mapped_type;"},
{"lineNum":"  275","line":"    typedef pair<const key_type,mapped_type>         value_type;"},
{"lineNum":"  276","line":"    typedef Compare                                  key_compare;"},
{"lineNum":"  277","line":"    typedef Allocator                                allocator_type;"},
{"lineNum":"  278","line":"    typedef typename allocator_type::reference       reference;"},
{"lineNum":"  279","line":"    typedef typename allocator_type::const_reference const_reference;"},
{"lineNum":"  280","line":"    typedef typename allocator_type::size_type       size_type;"},
{"lineNum":"  281","line":"    typedef typename allocator_type::difference_type difference_type;"},
{"lineNum":"  282","line":"    typedef typename allocator_type::pointer         pointer;"},
{"lineNum":"  283","line":"    typedef typename allocator_type::const_pointer   const_pointer;"},
{"lineNum":"  284","line":""},
{"lineNum":"  285","line":"    typedef implementation-defined                   iterator;"},
{"lineNum":"  286","line":"    typedef implementation-defined                   const_iterator;"},
{"lineNum":"  287","line":"    typedef std::reverse_iterator<iterator>          reverse_iterator;"},
{"lineNum":"  288","line":"    typedef std::reverse_iterator<const_iterator>    const_reverse_iterator;"},
{"lineNum":"  289","line":"    typedef unspecified                              node_type;              // C++17"},
{"lineNum":"  290","line":""},
{"lineNum":"  291","line":"    class value_compare"},
{"lineNum":"  292","line":"    {"},
{"lineNum":"  293","line":"        friend class multimap;"},
{"lineNum":"  294","line":"    protected:"},
{"lineNum":"  295","line":"        key_compare comp;"},
{"lineNum":"  296","line":"        value_compare(key_compare c);"},
{"lineNum":"  297","line":"    public:"},
{"lineNum":"  298","line":"        typedef bool result_type;  // deprecated in C++17, removed in C++20"},
{"lineNum":"  299","line":"        typedef value_type first_argument_type;  // deprecated in C++17, removed in C++20"},
{"lineNum":"  300","line":"        typedef value_type second_argument_type;  // deprecated in C++17, removed in C++20"},
{"lineNum":"  301","line":"        bool operator()(const value_type& x, const value_type& y) const;"},
{"lineNum":"  302","line":"    };"},
{"lineNum":"  303","line":""},
{"lineNum":"  304","line":"    // construct/copy/destroy:"},
{"lineNum":"  305","line":"    multimap()"},
{"lineNum":"  306","line":"        noexcept("},
{"lineNum":"  307","line":"            is_nothrow_default_constructible<allocator_type>::value &&"},
{"lineNum":"  308","line":"            is_nothrow_default_constructible<key_compare>::value &&"},
{"lineNum":"  309","line":"            is_nothrow_copy_constructible<key_compare>::value);"},
{"lineNum":"  310","line":"    explicit multimap(const key_compare& comp);"},
{"lineNum":"  311","line":"    multimap(const key_compare& comp, const allocator_type& a);"},
{"lineNum":"  312","line":"    template <class InputIterator>"},
{"lineNum":"  313","line":"        multimap(InputIterator first, InputIterator last, const key_compare& comp);"},
{"lineNum":"  314","line":"    template <class InputIterator>"},
{"lineNum":"  315","line":"        multimap(InputIterator first, InputIterator last, const key_compare& comp,"},
{"lineNum":"  316","line":"                 const allocator_type& a);"},
{"lineNum":"  317","line":"    multimap(const multimap& m);"},
{"lineNum":"  318","line":"    multimap(multimap&& m)"},
{"lineNum":"  319","line":"        noexcept("},
{"lineNum":"  320","line":"            is_nothrow_move_constructible<allocator_type>::value &&"},
{"lineNum":"  321","line":"            is_nothrow_move_constructible<key_compare>::value);"},
{"lineNum":"  322","line":"    explicit multimap(const allocator_type& a);"},
{"lineNum":"  323","line":"    multimap(const multimap& m, const allocator_type& a);"},
{"lineNum":"  324","line":"    multimap(multimap&& m, const allocator_type& a);"},
{"lineNum":"  325","line":"    multimap(initializer_list<value_type> il, const key_compare& comp = key_compare());"},
{"lineNum":"  326","line":"    multimap(initializer_list<value_type> il, const key_compare& comp,"},
{"lineNum":"  327","line":"             const allocator_type& a);"},
{"lineNum":"  328","line":"    template <class InputIterator>"},
{"lineNum":"  329","line":"        multimap(InputIterator first, InputIterator last, const allocator_type& a)"},
{"lineNum":"  330","line":"            : multimap(first, last, Compare(), a) {} // C++14"},
{"lineNum":"  331","line":"    multimap(initializer_list<value_type> il, const allocator_type& a)"},
{"lineNum":"  332","line":"        : multimap(il, Compare(), a) {} // C++14"},
{"lineNum":"  333","line":"    ~multimap();"},
{"lineNum":"  334","line":""},
{"lineNum":"  335","line":"    multimap& operator=(const multimap& m);"},
{"lineNum":"  336","line":"    multimap& operator=(multimap&& m)"},
{"lineNum":"  337","line":"        noexcept("},
{"lineNum":"  338","line":"            allocator_type::propagate_on_container_move_assignment::value &&"},
{"lineNum":"  339","line":"            is_nothrow_move_assignable<allocator_type>::value &&"},
{"lineNum":"  340","line":"            is_nothrow_move_assignable<key_compare>::value);"},
{"lineNum":"  341","line":"    multimap& operator=(initializer_list<value_type> il);"},
{"lineNum":"  342","line":""},
{"lineNum":"  343","line":"    // iterators:"},
{"lineNum":"  344","line":"          iterator begin() noexcept;"},
{"lineNum":"  345","line":"    const_iterator begin() const noexcept;"},
{"lineNum":"  346","line":"          iterator end() noexcept;"},
{"lineNum":"  347","line":"    const_iterator end()   const noexcept;"},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"          reverse_iterator rbegin() noexcept;"},
{"lineNum":"  350","line":"    const_reverse_iterator rbegin() const noexcept;"},
{"lineNum":"  351","line":"          reverse_iterator rend() noexcept;"},
{"lineNum":"  352","line":"    const_reverse_iterator rend()   const noexcept;"},
{"lineNum":"  353","line":""},
{"lineNum":"  354","line":"    const_iterator         cbegin()  const noexcept;"},
{"lineNum":"  355","line":"    const_iterator         cend()    const noexcept;"},
{"lineNum":"  356","line":"    const_reverse_iterator crbegin() const noexcept;"},
{"lineNum":"  357","line":"    const_reverse_iterator crend()   const noexcept;"},
{"lineNum":"  358","line":""},
{"lineNum":"  359","line":"    // capacity:"},
{"lineNum":"  360","line":"    bool      empty()    const noexcept;"},
{"lineNum":"  361","line":"    size_type size()     const noexcept;"},
{"lineNum":"  362","line":"    size_type max_size() const noexcept;"},
{"lineNum":"  363","line":""},
{"lineNum":"  364","line":"    // modifiers:"},
{"lineNum":"  365","line":"    template <class... Args>"},
{"lineNum":"  366","line":"        iterator emplace(Args&&... args);"},
{"lineNum":"  367","line":"    template <class... Args>"},
{"lineNum":"  368","line":"        iterator emplace_hint(const_iterator position, Args&&... args);"},
{"lineNum":"  369","line":"    iterator insert(const value_type& v);"},
{"lineNum":"  370","line":"    iterator insert(      value_type&& v);                                            // C++17"},
{"lineNum":"  371","line":"    template <class P>"},
{"lineNum":"  372","line":"        iterator insert(P&& p);"},
{"lineNum":"  373","line":"    iterator insert(const_iterator position, const value_type& v);"},
{"lineNum":"  374","line":"    iterator insert(const_iterator position,       value_type&& v);                   // C++17"},
{"lineNum":"  375","line":"    template <class P>"},
{"lineNum":"  376","line":"        iterator insert(const_iterator position, P&& p);"},
{"lineNum":"  377","line":"    template <class InputIterator>"},
{"lineNum":"  378","line":"        void insert(InputIterator first, InputIterator last);"},
{"lineNum":"  379","line":"    void insert(initializer_list<value_type> il);"},
{"lineNum":"  380","line":""},
{"lineNum":"  381","line":"    node_type extract(const_iterator position);                                       // C++17"},
{"lineNum":"  382","line":"    node_type extract(const key_type& x);                                             // C++17"},
{"lineNum":"  383","line":"    iterator insert(node_type&& nh);                                                  // C++17"},
{"lineNum":"  384","line":"    iterator insert(const_iterator hint, node_type&& nh);                             // C++17"},
{"lineNum":"  385","line":""},
{"lineNum":"  386","line":"    iterator  erase(const_iterator position);"},
{"lineNum":"  387","line":"    iterator  erase(iterator position); // C++14"},
{"lineNum":"  388","line":"    size_type erase(const key_type& k);"},
{"lineNum":"  389","line":"    iterator  erase(const_iterator first, const_iterator last);"},
{"lineNum":"  390","line":"    void clear() noexcept;"},
{"lineNum":"  391","line":""},
{"lineNum":"  392","line":"    template<class C2>"},
{"lineNum":"  393","line":"      void merge(multimap<Key, T, C2, Allocator>& source);    // C++17"},
{"lineNum":"  394","line":"    template<class C2>"},
{"lineNum":"  395","line":"      void merge(multimap<Key, T, C2, Allocator>&& source);   // C++17"},
{"lineNum":"  396","line":"    template<class C2>"},
{"lineNum":"  397","line":"      void merge(map<Key, T, C2, Allocator>& source);         // C++17"},
{"lineNum":"  398","line":"    template<class C2>"},
{"lineNum":"  399","line":"      void merge(map<Key, T, C2, Allocator>&& source);        // C++17"},
{"lineNum":"  400","line":""},
{"lineNum":"  401","line":"    void swap(multimap& m)"},
{"lineNum":"  402","line":"        noexcept(allocator_traits<allocator_type>::is_always_equal::value &&"},
{"lineNum":"  403","line":"            is_nothrow_swappable<key_compare>::value); // C++17"},
{"lineNum":"  404","line":""},
{"lineNum":"  405","line":"    // observers:"},
{"lineNum":"  406","line":"    allocator_type get_allocator() const noexcept;"},
{"lineNum":"  407","line":"    key_compare    key_comp()      const;"},
{"lineNum":"  408","line":"    value_compare  value_comp()    const;"},
{"lineNum":"  409","line":""},
{"lineNum":"  410","line":"    // map operations:"},
{"lineNum":"  411","line":"          iterator find(const key_type& k);"},
{"lineNum":"  412","line":"    const_iterator find(const key_type& k) const;"},
{"lineNum":"  413","line":"    template<typename K>"},
{"lineNum":"  414","line":"        iterator find(const K& x);              // C++14"},
{"lineNum":"  415","line":"    template<typename K>"},
{"lineNum":"  416","line":"        const_iterator find(const K& x) const;  // C++14"},
{"lineNum":"  417","line":""},
{"lineNum":"  418","line":"    template<typename K>"},
{"lineNum":"  419","line":"      size_type count(const K& x) const;        // C++14"},
{"lineNum":"  420","line":"    size_type      count(const key_type& k) const;"},
{"lineNum":"  421","line":""},
{"lineNum":"  422","line":"    bool           contains(const key_type& x) const;  // C++20"},
{"lineNum":"  423","line":"    template<class K> bool contains(const K& x) const; // C++20"},
{"lineNum":"  424","line":""},
{"lineNum":"  425","line":"          iterator lower_bound(const key_type& k);"},
{"lineNum":"  426","line":"    const_iterator lower_bound(const key_type& k) const;"},
{"lineNum":"  427","line":"    template<typename K>"},
{"lineNum":"  428","line":"        iterator lower_bound(const K& x);              // C++14"},
{"lineNum":"  429","line":"    template<typename K>"},
{"lineNum":"  430","line":"        const_iterator lower_bound(const K& x) const;  // C++14"},
{"lineNum":"  431","line":""},
{"lineNum":"  432","line":"          iterator upper_bound(const key_type& k);"},
{"lineNum":"  433","line":"    const_iterator upper_bound(const key_type& k) const;"},
{"lineNum":"  434","line":"    template<typename K>"},
{"lineNum":"  435","line":"        iterator upper_bound(const K& x);              // C++14"},
{"lineNum":"  436","line":"    template<typename K>"},
{"lineNum":"  437","line":"        const_iterator upper_bound(const K& x) const;  // C++14"},
{"lineNum":"  438","line":""},
{"lineNum":"  439","line":"    pair<iterator,iterator>             equal_range(const key_type& k);"},
{"lineNum":"  440","line":"    pair<const_iterator,const_iterator> equal_range(const key_type& k) const;"},
{"lineNum":"  441","line":"    template<typename K>"},
{"lineNum":"  442","line":"        pair<iterator,iterator>             equal_range(const K& x);        // C++14"},
{"lineNum":"  443","line":"    template<typename K>"},
{"lineNum":"  444","line":"        pair<const_iterator,const_iterator> equal_range(const K& x) const;  // C++14"},
{"lineNum":"  445","line":"};"},
{"lineNum":"  446","line":""},
{"lineNum":"  447","line":"template <class Key, class T, class Compare, class Allocator>"},
{"lineNum":"  448","line":"bool"},
{"lineNum":"  449","line":"operator==(const multimap<Key, T, Compare, Allocator>& x,"},
{"lineNum":"  450","line":"           const multimap<Key, T, Compare, Allocator>& y);"},
{"lineNum":"  451","line":""},
{"lineNum":"  452","line":"template <class Key, class T, class Compare, class Allocator>"},
{"lineNum":"  453","line":"bool"},
{"lineNum":"  454","line":"operator< (const multimap<Key, T, Compare, Allocator>& x,"},
{"lineNum":"  455","line":"           const multimap<Key, T, Compare, Allocator>& y);"},
{"lineNum":"  456","line":""},
{"lineNum":"  457","line":"template <class Key, class T, class Compare, class Allocator>"},
{"lineNum":"  458","line":"bool"},
{"lineNum":"  459","line":"operator!=(const multimap<Key, T, Compare, Allocator>& x,"},
{"lineNum":"  460","line":"           const multimap<Key, T, Compare, Allocator>& y);"},
{"lineNum":"  461","line":""},
{"lineNum":"  462","line":"template <class Key, class T, class Compare, class Allocator>"},
{"lineNum":"  463","line":"bool"},
{"lineNum":"  464","line":"operator> (const multimap<Key, T, Compare, Allocator>& x,"},
{"lineNum":"  465","line":"           const multimap<Key, T, Compare, Allocator>& y);"},
{"lineNum":"  466","line":""},
{"lineNum":"  467","line":"template <class Key, class T, class Compare, class Allocator>"},
{"lineNum":"  468","line":"bool"},
{"lineNum":"  469","line":"operator>=(const multimap<Key, T, Compare, Allocator>& x,"},
{"lineNum":"  470","line":"           const multimap<Key, T, Compare, Allocator>& y);"},
{"lineNum":"  471","line":""},
{"lineNum":"  472","line":"template <class Key, class T, class Compare, class Allocator>"},
{"lineNum":"  473","line":"bool"},
{"lineNum":"  474","line":"operator<=(const multimap<Key, T, Compare, Allocator>& x,"},
{"lineNum":"  475","line":"           const multimap<Key, T, Compare, Allocator>& y);"},
{"lineNum":"  476","line":""},
{"lineNum":"  477","line":"// specialized algorithms:"},
{"lineNum":"  478","line":"template <class Key, class T, class Compare, class Allocator>"},
{"lineNum":"  479","line":"void"},
{"lineNum":"  480","line":"swap(multimap<Key, T, Compare, Allocator>& x,"},
{"lineNum":"  481","line":"     multimap<Key, T, Compare, Allocator>& y)"},
{"lineNum":"  482","line":"    noexcept(noexcept(x.swap(y)));"},
{"lineNum":"  483","line":""},
{"lineNum":"  484","line":"template <class Key, class T, class Compare, class Allocator, class Predicate>"},
{"lineNum":"  485","line":"typename multimap<Key, T, Compare, Allocator>::size_type"},
{"lineNum":"  486","line":"erase_if(multimap<Key, T, Compare, Allocator>& c, Predicate pred);  // C++20"},
{"lineNum":"  487","line":""},
{"lineNum":"  488","line":"}  // std"},
{"lineNum":"  489","line":""},
{"lineNum":"  490","line":"*/"},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"#include <__config>"},
{"lineNum":"  493","line":"#include <__debug>"},
{"lineNum":"  494","line":"#include <__functional/is_transparent.h>"},
{"lineNum":"  495","line":"#include <__node_handle>"},
{"lineNum":"  496","line":"#include <__tree>"},
{"lineNum":"  497","line":"#include <__utility/forward.h>"},
{"lineNum":"  498","line":"#include <compare>"},
{"lineNum":"  499","line":"#include <functional>"},
{"lineNum":"  500","line":"#include <initializer_list>"},
{"lineNum":"  501","line":"#include <iterator> // __libcpp_erase_if_container"},
{"lineNum":"  502","line":"#include <memory>"},
{"lineNum":"  503","line":"#include <type_traits>"},
{"lineNum":"  504","line":"#include <utility>"},
{"lineNum":"  505","line":"#include <version>"},
{"lineNum":"  506","line":""},
{"lineNum":"  507","line":"#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"},
{"lineNum":"  508","line":"#pragma GCC system_header"},
{"lineNum":"  509","line":"#endif"},
{"lineNum":"  510","line":""},
{"lineNum":"  511","line":"_LIBCPP_BEGIN_NAMESPACE_STD"},
{"lineNum":"  512","line":""},
{"lineNum":"  513","line":"template <class _Key, class _CP, class _Compare,"},
{"lineNum":"  514","line":"          bool = is_empty<_Compare>::value && !__libcpp_is_final<_Compare>::value>"},
{"lineNum":"  515","line":"class __map_value_compare"},
{"lineNum":"  516","line":"    : private _Compare"},
{"lineNum":"  517","line":"{"},
{"lineNum":"  518","line":"public:"},
{"lineNum":"  519","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  520","line":"    __map_value_compare()"},
{"lineNum":"  521","line":"        _NOEXCEPT_(is_nothrow_default_constructible<_Compare>::value)"},
{"lineNum":"  522","line":"        : _Compare() {}"},
{"lineNum":"  523","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  524","line":"    __map_value_compare(_Compare c)"},
{"lineNum":"  525","line":"        _NOEXCEPT_(is_nothrow_copy_constructible<_Compare>::value)"},
{"lineNum":"  526","line":"        : _Compare(c) {}"},
{"lineNum":"  527","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  528","line":"    const _Compare& key_comp() const _NOEXCEPT {return *this;}"},
{"lineNum":"  529","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  530","line":"    bool operator()(const _CP& __x, const _CP& __y) const"},
{"lineNum":"  531","line":"        {return static_cast<const _Compare&>(*this)(__x.__get_value().first, __y.__get_value().first);}"},
{"lineNum":"  532","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  533","line":"    bool operator()(const _CP& __x, const _Key& __y) const"},
{"lineNum":"  534","line":"        {return static_cast<const _Compare&>(*this)(__x.__get_value().first, __y);}","class":"linePartCov","hits":"3","order":"432","possible_hits":"6",},
{"lineNum":"  535","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  536","line":"    bool operator()(const _Key& __x, const _CP& __y) const"},
{"lineNum":"  537","line":"        {return static_cast<const _Compare&>(*this)(__x, __y.__get_value().first);}","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  538","line":"    void swap(__map_value_compare&__y)"},
{"lineNum":"  539","line":"        _NOEXCEPT_(__is_nothrow_swappable<_Compare>::value)"},
{"lineNum":"  540","line":"    {"},
{"lineNum":"  541","line":"      using _VSTD::swap;"},
{"lineNum":"  542","line":"      swap(static_cast<_Compare&>(*this), static_cast<_Compare&>(__y));"},
{"lineNum":"  543","line":"    }"},
{"lineNum":"  544","line":""},
{"lineNum":"  545","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":"  546","line":"    template <typename _K2>"},
{"lineNum":"  547","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  548","line":"    typename enable_if<__is_transparent<_Compare, _K2>::value, bool>::type"},
{"lineNum":"  549","line":"    operator () ( const _K2& __x, const _CP& __y ) const"},
{"lineNum":"  550","line":"        {return static_cast<const _Compare&>(*this) (__x, __y.__get_value().first);}"},
{"lineNum":"  551","line":""},
{"lineNum":"  552","line":"    template <typename _K2>"},
{"lineNum":"  553","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  554","line":"    typename enable_if<__is_transparent<_Compare, _K2>::value, bool>::type"},
{"lineNum":"  555","line":"    operator () (const _CP& __x, const _K2& __y) const"},
{"lineNum":"  556","line":"        {return static_cast<const _Compare&>(*this) (__x.__get_value().first, __y);}"},
{"lineNum":"  557","line":"#endif"},
{"lineNum":"  558","line":"};"},
{"lineNum":"  559","line":""},
{"lineNum":"  560","line":"template <class _Key, class _CP, class _Compare>"},
{"lineNum":"  561","line":"class __map_value_compare<_Key, _CP, _Compare, false>"},
{"lineNum":"  562","line":"{"},
{"lineNum":"  563","line":"    _Compare comp;"},
{"lineNum":"  564","line":""},
{"lineNum":"  565","line":"public:"},
{"lineNum":"  566","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  567","line":"    __map_value_compare()"},
{"lineNum":"  568","line":"        _NOEXCEPT_(is_nothrow_default_constructible<_Compare>::value)"},
{"lineNum":"  569","line":"        : comp() {}"},
{"lineNum":"  570","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  571","line":"    __map_value_compare(_Compare c)"},
{"lineNum":"  572","line":"        _NOEXCEPT_(is_nothrow_copy_constructible<_Compare>::value)"},
{"lineNum":"  573","line":"        : comp(c) {}"},
{"lineNum":"  574","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  575","line":"    const _Compare& key_comp() const _NOEXCEPT {return comp;}"},
{"lineNum":"  576","line":""},
{"lineNum":"  577","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  578","line":"    bool operator()(const _CP& __x, const _CP& __y) const"},
{"lineNum":"  579","line":"        {return comp(__x.__get_value().first, __y.__get_value().first);}"},
{"lineNum":"  580","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  581","line":"    bool operator()(const _CP& __x, const _Key& __y) const"},
{"lineNum":"  582","line":"        {return comp(__x.__get_value().first, __y);}"},
{"lineNum":"  583","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  584","line":"    bool operator()(const _Key& __x, const _CP& __y) const"},
{"lineNum":"  585","line":"        {return comp(__x, __y.__get_value().first);}"},
{"lineNum":"  586","line":"    void swap(__map_value_compare&__y)"},
{"lineNum":"  587","line":"        _NOEXCEPT_(__is_nothrow_swappable<_Compare>::value)"},
{"lineNum":"  588","line":"    {"},
{"lineNum":"  589","line":"        using _VSTD::swap;"},
{"lineNum":"  590","line":"        swap(comp, __y.comp);"},
{"lineNum":"  591","line":"    }"},
{"lineNum":"  592","line":""},
{"lineNum":"  593","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":"  594","line":"    template <typename _K2>"},
{"lineNum":"  595","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  596","line":"    typename enable_if<__is_transparent<_Compare, _K2>::value, bool>::type"},
{"lineNum":"  597","line":"    operator () ( const _K2& __x, const _CP& __y ) const"},
{"lineNum":"  598","line":"        {return comp (__x, __y.__get_value().first);}"},
{"lineNum":"  599","line":""},
{"lineNum":"  600","line":"    template <typename _K2>"},
{"lineNum":"  601","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  602","line":"    typename enable_if<__is_transparent<_Compare, _K2>::value, bool>::type"},
{"lineNum":"  603","line":"    operator () (const _CP& __x, const _K2& __y) const"},
{"lineNum":"  604","line":"        {return comp (__x.__get_value().first, __y);}"},
{"lineNum":"  605","line":"#endif"},
{"lineNum":"  606","line":"};"},
{"lineNum":"  607","line":""},
{"lineNum":"  608","line":"template <class _Key, class _CP, class _Compare, bool __b>"},
{"lineNum":"  609","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  610","line":"void"},
{"lineNum":"  611","line":"swap(__map_value_compare<_Key, _CP, _Compare, __b>& __x,"},
{"lineNum":"  612","line":"     __map_value_compare<_Key, _CP, _Compare, __b>& __y)"},
{"lineNum":"  613","line":"    _NOEXCEPT_(_NOEXCEPT_(__x.swap(__y)))"},
{"lineNum":"  614","line":"{"},
{"lineNum":"  615","line":"    __x.swap(__y);"},
{"lineNum":"  616","line":"}"},
{"lineNum":"  617","line":""},
{"lineNum":"  618","line":"template <class _Allocator>"},
{"lineNum":"  619","line":"class __map_node_destructor"},
{"lineNum":"  620","line":"{"},
{"lineNum":"  621","line":"    typedef _Allocator                          allocator_type;"},
{"lineNum":"  622","line":"    typedef allocator_traits<allocator_type>    __alloc_traits;"},
{"lineNum":"  623","line":""},
{"lineNum":"  624","line":"public:"},
{"lineNum":"  625","line":"    typedef typename __alloc_traits::pointer    pointer;"},
{"lineNum":"  626","line":""},
{"lineNum":"  627","line":"private:"},
{"lineNum":"  628","line":"    allocator_type& __na_;"},
{"lineNum":"  629","line":""},
{"lineNum":"  630","line":"    __map_node_destructor& operator=(const __map_node_destructor&);"},
{"lineNum":"  631","line":""},
{"lineNum":"  632","line":"public:"},
{"lineNum":"  633","line":"    bool __first_constructed;"},
{"lineNum":"  634","line":"    bool __second_constructed;"},
{"lineNum":"  635","line":""},
{"lineNum":"  636","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  637","line":"    explicit __map_node_destructor(allocator_type& __na) _NOEXCEPT"},
{"lineNum":"  638","line":"        : __na_(__na),"},
{"lineNum":"  639","line":"          __first_constructed(false),"},
{"lineNum":"  640","line":"          __second_constructed(false)"},
{"lineNum":"  641","line":"        {}"},
{"lineNum":"  642","line":""},
{"lineNum":"  643","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  644","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  645","line":"    __map_node_destructor(__tree_node_destructor<allocator_type>&& __x) _NOEXCEPT"},
{"lineNum":"  646","line":"        : __na_(__x.__na_),"},
{"lineNum":"  647","line":"          __first_constructed(__x.__value_constructed),"},
{"lineNum":"  648","line":"          __second_constructed(__x.__value_constructed)"},
{"lineNum":"  649","line":"        {"},
{"lineNum":"  650","line":"            __x.__value_constructed = false;"},
{"lineNum":"  651","line":"        }"},
{"lineNum":"  652","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":"  653","line":""},
{"lineNum":"  654","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  655","line":"    void operator()(pointer __p) _NOEXCEPT"},
{"lineNum":"  656","line":"    {"},
{"lineNum":"  657","line":"        if (__second_constructed)"},
{"lineNum":"  658","line":"            __alloc_traits::destroy(__na_, _VSTD::addressof(__p->__value_.__get_value().second));"},
{"lineNum":"  659","line":"        if (__first_constructed)"},
{"lineNum":"  660","line":"            __alloc_traits::destroy(__na_, _VSTD::addressof(__p->__value_.__get_value().first));"},
{"lineNum":"  661","line":"        if (__p)"},
{"lineNum":"  662","line":"            __alloc_traits::deallocate(__na_, __p, 1);"},
{"lineNum":"  663","line":"    }"},
{"lineNum":"  664","line":"};"},
{"lineNum":"  665","line":""},
{"lineNum":"  666","line":"template <class _Key, class _Tp, class _Compare, class _Allocator>"},
{"lineNum":"  667","line":"    class map;"},
{"lineNum":"  668","line":"template <class _Key, class _Tp, class _Compare, class _Allocator>"},
{"lineNum":"  669","line":"    class multimap;"},
{"lineNum":"  670","line":"template <class _TreeIterator> class __map_const_iterator;"},
{"lineNum":"  671","line":""},
{"lineNum":"  672","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  673","line":""},
{"lineNum":"  674","line":"template <class _Key, class _Tp>"},
{"lineNum":"  675","line":"struct _LIBCPP_STANDALONE_DEBUG __value_type"},
{"lineNum":"  676","line":"{"},
{"lineNum":"  677","line":"    typedef _Key                                     key_type;"},
{"lineNum":"  678","line":"    typedef _Tp                                      mapped_type;"},
{"lineNum":"  679","line":"    typedef pair<const key_type, mapped_type>        value_type;"},
{"lineNum":"  680","line":"    typedef pair<key_type&, mapped_type&>            __nc_ref_pair_type;"},
{"lineNum":"  681","line":"    typedef pair<key_type&&, mapped_type&&>          __nc_rref_pair_type;"},
{"lineNum":"  682","line":""},
{"lineNum":"  683","line":"private:"},
{"lineNum":"  684","line":"    value_type __cc;"},
{"lineNum":"  685","line":""},
{"lineNum":"  686","line":"public:"},
{"lineNum":"  687","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  688","line":"    value_type& __get_value()"},
{"lineNum":"  689","line":"    {"},
{"lineNum":"  690","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":"  691","line":"        return *_VSTD::launder(_VSTD::addressof(__cc));","class":"linePartCov","hits":"12","order":"498","possible_hits":"53",},
{"lineNum":"  692","line":"#else"},
{"lineNum":"  693","line":"        return __cc;"},
{"lineNum":"  694","line":"#endif"},
{"lineNum":"  695","line":"    }"},
{"lineNum":"  696","line":""},
{"lineNum":"  697","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  698","line":"    const value_type& __get_value() const"},
{"lineNum":"  699","line":"    {"},
{"lineNum":"  700","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":"  701","line":"        return *_VSTD::launder(_VSTD::addressof(__cc));","class":"lineNoCov","hits":"0","possible_hits":"22",},
{"lineNum":"  702","line":"#else"},
{"lineNum":"  703","line":"        return __cc;"},
{"lineNum":"  704","line":"#endif"},
{"lineNum":"  705","line":"    }"},
{"lineNum":"  706","line":""},
{"lineNum":"  707","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  708","line":"    __nc_ref_pair_type __ref()"},
{"lineNum":"  709","line":"    {"},
{"lineNum":"  710","line":"        value_type& __v = __get_value();"},
{"lineNum":"  711","line":"        return __nc_ref_pair_type(const_cast<key_type&>(__v.first), __v.second);","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  712","line":"    }"},
{"lineNum":"  713","line":""},
{"lineNum":"  714","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  715","line":"    __nc_rref_pair_type __move()"},
{"lineNum":"  716","line":"    {"},
{"lineNum":"  717","line":"        value_type& __v = __get_value();"},
{"lineNum":"  718","line":"        return __nc_rref_pair_type("},
{"lineNum":"  719","line":"            _VSTD::move(const_cast<key_type&>(__v.first)),"},
{"lineNum":"  720","line":"            _VSTD::move(__v.second));"},
{"lineNum":"  721","line":"    }"},
{"lineNum":"  722","line":""},
{"lineNum":"  723","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  724","line":"    __value_type& operator=(const __value_type& __v)"},
{"lineNum":"  725","line":"    {"},
{"lineNum":"  726","line":"        __ref() = __v.__get_value();"},
{"lineNum":"  727","line":"        return *this;"},
{"lineNum":"  728","line":"    }"},
{"lineNum":"  729","line":""},
{"lineNum":"  730","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  731","line":"    __value_type& operator=(__value_type&& __v)"},
{"lineNum":"  732","line":"    {"},
{"lineNum":"  733","line":"        __ref() = __v.__move();"},
{"lineNum":"  734","line":"        return *this;"},
{"lineNum":"  735","line":"    }"},
{"lineNum":"  736","line":""},
{"lineNum":"  737","line":"    template <class _ValueTp,"},
{"lineNum":"  738","line":"              class = typename enable_if<"},
{"lineNum":"  739","line":"                    __is_same_uncvref<_ValueTp, value_type>::value"},
{"lineNum":"  740","line":"                 >::type"},
{"lineNum":"  741","line":"             >"},
{"lineNum":"  742","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  743","line":"    __value_type& operator=(_ValueTp&& __v)"},
{"lineNum":"  744","line":"    {"},
{"lineNum":"  745","line":"        __ref() = _VSTD::forward<_ValueTp>(__v);"},
{"lineNum":"  746","line":"        return *this;"},
{"lineNum":"  747","line":"    }"},
{"lineNum":"  748","line":""},
{"lineNum":"  749","line":"private:"},
{"lineNum":"  750","line":"    __value_type() _LIBCPP_EQUAL_DELETE;"},
{"lineNum":"  751","line":"    ~__value_type() _LIBCPP_EQUAL_DELETE;"},
{"lineNum":"  752","line":"    __value_type(const __value_type& __v) _LIBCPP_EQUAL_DELETE;"},
{"lineNum":"  753","line":"    __value_type(__value_type&& __v) _LIBCPP_EQUAL_DELETE;"},
{"lineNum":"  754","line":"};"},
{"lineNum":"  755","line":""},
{"lineNum":"  756","line":"#else"},
{"lineNum":"  757","line":""},
{"lineNum":"  758","line":"template <class _Key, class _Tp>"},
{"lineNum":"  759","line":"struct __value_type"},
{"lineNum":"  760","line":"{"},
{"lineNum":"  761","line":"    typedef _Key                                     key_type;"},
{"lineNum":"  762","line":"    typedef _Tp                                      mapped_type;"},
{"lineNum":"  763","line":"    typedef pair<const key_type, mapped_type>        value_type;"},
{"lineNum":"  764","line":""},
{"lineNum":"  765","line":"private:"},
{"lineNum":"  766","line":"    value_type __cc;"},
{"lineNum":"  767","line":""},
{"lineNum":"  768","line":"public:"},
{"lineNum":"  769","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  770","line":"    value_type& __get_value() { return __cc; }"},
{"lineNum":"  771","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  772","line":"    const value_type& __get_value() const { return __cc; }"},
{"lineNum":"  773","line":""},
{"lineNum":"  774","line":"private:"},
{"lineNum":"  775","line":"   __value_type();"},
{"lineNum":"  776","line":"   __value_type(__value_type const&);"},
{"lineNum":"  777","line":"   __value_type& operator=(__value_type const&);"},
{"lineNum":"  778","line":"   ~__value_type();"},
{"lineNum":"  779","line":"};"},
{"lineNum":"  780","line":""},
{"lineNum":"  781","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":"  782","line":""},
{"lineNum":"  783","line":"template <class _Tp>"},
{"lineNum":"  784","line":"struct __extract_key_value_types;"},
{"lineNum":"  785","line":""},
{"lineNum":"  786","line":"template <class _Key, class _Tp>"},
{"lineNum":"  787","line":"struct __extract_key_value_types<__value_type<_Key, _Tp> >"},
{"lineNum":"  788","line":"{"},
{"lineNum":"  789","line":"  typedef _Key const __key_type;"},
{"lineNum":"  790","line":"  typedef _Tp        __mapped_type;"},
{"lineNum":"  791","line":"};"},
{"lineNum":"  792","line":""},
{"lineNum":"  793","line":"template <class _TreeIterator>"},
{"lineNum":"  794","line":"class _LIBCPP_TEMPLATE_VIS __map_iterator"},
{"lineNum":"  795","line":"{"},
{"lineNum":"  796","line":"    typedef typename _TreeIterator::_NodeTypes                   _NodeTypes;"},
{"lineNum":"  797","line":"    typedef typename _TreeIterator::__pointer_traits             __pointer_traits;"},
{"lineNum":"  798","line":""},
{"lineNum":"  799","line":"    _TreeIterator __i_;"},
{"lineNum":"  800","line":""},
{"lineNum":"  801","line":"public:"},
{"lineNum":"  802","line":"    typedef bidirectional_iterator_tag                           iterator_category;"},
{"lineNum":"  803","line":"    typedef typename _NodeTypes::__map_value_type                value_type;"},
{"lineNum":"  804","line":"    typedef typename _TreeIterator::difference_type              difference_type;"},
{"lineNum":"  805","line":"    typedef value_type&                                          reference;"},
{"lineNum":"  806","line":"    typedef typename _NodeTypes::__map_value_type_pointer        pointer;"},
{"lineNum":"  807","line":""},
{"lineNum":"  808","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  809","line":"    __map_iterator() _NOEXCEPT {}"},
{"lineNum":"  810","line":""},
{"lineNum":"  811","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  812","line":"    __map_iterator(_TreeIterator __i) _NOEXCEPT : __i_(__i) {}"},
{"lineNum":"  813","line":""},
{"lineNum":"  814","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  815","line":"    reference operator*() const {return __i_->__get_value();}"},
{"lineNum":"  816","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  817","line":"    pointer operator->() const {return pointer_traits<pointer>::pointer_to(__i_->__get_value());}"},
{"lineNum":"  818","line":""},
{"lineNum":"  819","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  820","line":"    __map_iterator& operator++() {++__i_; return *this;}"},
{"lineNum":"  821","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  822","line":"    __map_iterator operator++(int)"},
{"lineNum":"  823","line":"    {"},
{"lineNum":"  824","line":"        __map_iterator __t(*this);"},
{"lineNum":"  825","line":"        ++(*this);"},
{"lineNum":"  826","line":"        return __t;"},
{"lineNum":"  827","line":"    }"},
{"lineNum":"  828","line":""},
{"lineNum":"  829","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  830","line":"    __map_iterator& operator--() {--__i_; return *this;}"},
{"lineNum":"  831","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  832","line":"    __map_iterator operator--(int)"},
{"lineNum":"  833","line":"    {"},
{"lineNum":"  834","line":"        __map_iterator __t(*this);"},
{"lineNum":"  835","line":"        --(*this);"},
{"lineNum":"  836","line":"        return __t;"},
{"lineNum":"  837","line":"    }"},
{"lineNum":"  838","line":""},
{"lineNum":"  839","line":"    friend _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  840","line":"    bool operator==(const __map_iterator& __x, const __map_iterator& __y)"},
{"lineNum":"  841","line":"        {return __x.__i_ == __y.__i_;}"},
{"lineNum":"  842","line":"    friend"},
{"lineNum":"  843","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  844","line":"    bool operator!=(const __map_iterator& __x, const __map_iterator& __y)"},
{"lineNum":"  845","line":"        {return __x.__i_ != __y.__i_;}"},
{"lineNum":"  846","line":""},
{"lineNum":"  847","line":"    template <class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS map;"},
{"lineNum":"  848","line":"    template <class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS multimap;"},
{"lineNum":"  849","line":"    template <class> friend class _LIBCPP_TEMPLATE_VIS __map_const_iterator;"},
{"lineNum":"  850","line":"};"},
{"lineNum":"  851","line":""},
{"lineNum":"  852","line":"template <class _TreeIterator>"},
{"lineNum":"  853","line":"class _LIBCPP_TEMPLATE_VIS __map_const_iterator"},
{"lineNum":"  854","line":"{"},
{"lineNum":"  855","line":"    typedef typename _TreeIterator::_NodeTypes                   _NodeTypes;"},
{"lineNum":"  856","line":"    typedef typename _TreeIterator::__pointer_traits             __pointer_traits;"},
{"lineNum":"  857","line":""},
{"lineNum":"  858","line":"    _TreeIterator __i_;"},
{"lineNum":"  859","line":""},
{"lineNum":"  860","line":"public:"},
{"lineNum":"  861","line":"    typedef bidirectional_iterator_tag                           iterator_category;"},
{"lineNum":"  862","line":"    typedef typename _NodeTypes::__map_value_type                value_type;"},
{"lineNum":"  863","line":"    typedef typename _TreeIterator::difference_type              difference_type;"},
{"lineNum":"  864","line":"    typedef const value_type&                                    reference;"},
{"lineNum":"  865","line":"    typedef typename _NodeTypes::__const_map_value_type_pointer  pointer;"},
{"lineNum":"  866","line":""},
{"lineNum":"  867","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  868","line":"    __map_const_iterator() _NOEXCEPT {}"},
{"lineNum":"  869","line":""},
{"lineNum":"  870","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  871","line":"    __map_const_iterator(_TreeIterator __i) _NOEXCEPT : __i_(__i) {}"},
{"lineNum":"  872","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  873","line":"    __map_const_iterator(__map_iterator<"},
{"lineNum":"  874","line":"        typename _TreeIterator::__non_const_iterator> __i) _NOEXCEPT"},
{"lineNum":"  875","line":"        : __i_(__i.__i_) {}"},
{"lineNum":"  876","line":""},
{"lineNum":"  877","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  878","line":"    reference operator*() const {return __i_->__get_value();}"},
{"lineNum":"  879","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  880","line":"    pointer operator->() const {return pointer_traits<pointer>::pointer_to(__i_->__get_value());}"},
{"lineNum":"  881","line":""},
{"lineNum":"  882","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  883","line":"    __map_const_iterator& operator++() {++__i_; return *this;}"},
{"lineNum":"  884","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  885","line":"    __map_const_iterator operator++(int)"},
{"lineNum":"  886","line":"    {"},
{"lineNum":"  887","line":"        __map_const_iterator __t(*this);"},
{"lineNum":"  888","line":"        ++(*this);"},
{"lineNum":"  889","line":"        return __t;"},
{"lineNum":"  890","line":"    }"},
{"lineNum":"  891","line":""},
{"lineNum":"  892","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  893","line":"    __map_const_iterator& operator--() {--__i_; return *this;}"},
{"lineNum":"  894","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  895","line":"    __map_const_iterator operator--(int)"},
{"lineNum":"  896","line":"    {"},
{"lineNum":"  897","line":"        __map_const_iterator __t(*this);"},
{"lineNum":"  898","line":"        --(*this);"},
{"lineNum":"  899","line":"        return __t;"},
{"lineNum":"  900","line":"    }"},
{"lineNum":"  901","line":""},
{"lineNum":"  902","line":"    friend _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  903","line":"    bool operator==(const __map_const_iterator& __x, const __map_const_iterator& __y)"},
{"lineNum":"  904","line":"        {return __x.__i_ == __y.__i_;}"},
{"lineNum":"  905","line":"    friend _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  906","line":"    bool operator!=(const __map_const_iterator& __x, const __map_const_iterator& __y)"},
{"lineNum":"  907","line":"        {return __x.__i_ != __y.__i_;}"},
{"lineNum":"  908","line":""},
{"lineNum":"  909","line":"    template <class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS map;"},
{"lineNum":"  910","line":"    template <class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS multimap;"},
{"lineNum":"  911","line":"    template <class, class, class> friend class _LIBCPP_TEMPLATE_VIS __tree_const_iterator;"},
{"lineNum":"  912","line":"};"},
{"lineNum":"  913","line":""},
{"lineNum":"  914","line":"template <class _Key, class _Tp, class _Compare = less<_Key>,"},
{"lineNum":"  915","line":"          class _Allocator = allocator<pair<const _Key, _Tp> > >"},
{"lineNum":"  916","line":"class _LIBCPP_TEMPLATE_VIS map"},
{"lineNum":"  917","line":"{"},
{"lineNum":"  918","line":"public:"},
{"lineNum":"  919","line":"    // types:"},
{"lineNum":"  920","line":"    typedef _Key                                     key_type;"},
{"lineNum":"  921","line":"    typedef _Tp                                      mapped_type;"},
{"lineNum":"  922","line":"    typedef pair<const key_type, mapped_type>        value_type;"},
{"lineNum":"  923","line":"    typedef __identity_t<_Compare>                   key_compare;"},
{"lineNum":"  924","line":"    typedef __identity_t<_Allocator>                 allocator_type;"},
{"lineNum":"  925","line":"    typedef value_type&                              reference;"},
{"lineNum":"  926","line":"    typedef const value_type&                        const_reference;"},
{"lineNum":"  927","line":""},
{"lineNum":"  928","line":"    static_assert((is_same<typename allocator_type::value_type, value_type>::value),"},
{"lineNum":"  929","line":"                  \"Allocator::value_type must be same type as value_type\");"},
{"lineNum":"  930","line":""},
{"lineNum":"  931","line":"_LIBCPP_SUPPRESS_DEPRECATED_PUSH"},
{"lineNum":"  932","line":"    class _LIBCPP_TEMPLATE_VIS value_compare"},
{"lineNum":"  933","line":"#if defined(_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS)"},
{"lineNum":"  934","line":"        : public binary_function<value_type, value_type, bool>"},
{"lineNum":"  935","line":"#endif"},
{"lineNum":"  936","line":"    {"},
{"lineNum":"  937","line":"_LIBCPP_SUPPRESS_DEPRECATED_POP"},
{"lineNum":"  938","line":"        friend class map;"},
{"lineNum":"  939","line":"    protected:"},
{"lineNum":"  940","line":"        key_compare comp;"},
{"lineNum":"  941","line":""},
{"lineNum":"  942","line":"        _LIBCPP_INLINE_VISIBILITY value_compare(key_compare c) : comp(c) {}"},
{"lineNum":"  943","line":"    public:"},
{"lineNum":"  944","line":"#if _LIBCPP_STD_VER <= 17 || defined(_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS)"},
{"lineNum":"  945","line":"        _LIBCPP_DEPRECATED_IN_CXX17 typedef bool result_type;"},
{"lineNum":"  946","line":"        _LIBCPP_DEPRECATED_IN_CXX17 typedef value_type first_argument_type;"},
{"lineNum":"  947","line":"        _LIBCPP_DEPRECATED_IN_CXX17 typedef value_type second_argument_type;"},
{"lineNum":"  948","line":"#endif"},
{"lineNum":"  949","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  950","line":"        bool operator()(const value_type& __x, const value_type& __y) const"},
{"lineNum":"  951","line":"            {return comp(__x.first, __y.first);}"},
{"lineNum":"  952","line":"    };"},
{"lineNum":"  953","line":""},
{"lineNum":"  954","line":"private:"},
{"lineNum":"  955","line":""},
{"lineNum":"  956","line":"    typedef _VSTD::__value_type<key_type, mapped_type>             __value_type;"},
{"lineNum":"  957","line":"    typedef __map_value_compare<key_type, __value_type, key_compare> __vc;"},
{"lineNum":"  958","line":"    typedef typename __rebind_alloc_helper<allocator_traits<allocator_type>,"},
{"lineNum":"  959","line":"                                                 __value_type>::type __allocator_type;"},
{"lineNum":"  960","line":"    typedef __tree<__value_type, __vc, __allocator_type>   __base;"},
{"lineNum":"  961","line":"    typedef typename __base::__node_traits                 __node_traits;"},
{"lineNum":"  962","line":"    typedef allocator_traits<allocator_type>               __alloc_traits;"},
{"lineNum":"  963","line":""},
{"lineNum":"  964","line":"    __base __tree_;"},
{"lineNum":"  965","line":""},
{"lineNum":"  966","line":"public:"},
{"lineNum":"  967","line":"    typedef typename __alloc_traits::pointer               pointer;"},
{"lineNum":"  968","line":"    typedef typename __alloc_traits::const_pointer         const_pointer;"},
{"lineNum":"  969","line":"    typedef typename __alloc_traits::size_type             size_type;"},
{"lineNum":"  970","line":"    typedef typename __alloc_traits::difference_type       difference_type;"},
{"lineNum":"  971","line":"    typedef __map_iterator<typename __base::iterator>             iterator;"},
{"lineNum":"  972","line":"    typedef __map_const_iterator<typename __base::const_iterator> const_iterator;"},
{"lineNum":"  973","line":"    typedef _VSTD::reverse_iterator<iterator>               reverse_iterator;"},
{"lineNum":"  974","line":"    typedef _VSTD::reverse_iterator<const_iterator>         const_reverse_iterator;"},
{"lineNum":"  975","line":""},
{"lineNum":"  976","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":"  977","line":"    typedef __map_node_handle<typename __base::__node, allocator_type> node_type;"},
{"lineNum":"  978","line":"    typedef __insert_return_type<iterator, node_type> insert_return_type;"},
{"lineNum":"  979","line":"#endif"},
{"lineNum":"  980","line":""},
{"lineNum":"  981","line":"    template <class _Key2, class _Value2, class _Comp2, class _Alloc2>"},
{"lineNum":"  982","line":"        friend class _LIBCPP_TEMPLATE_VIS map;"},
{"lineNum":"  983","line":"    template <class _Key2, class _Value2, class _Comp2, class _Alloc2>"},
{"lineNum":"  984","line":"        friend class _LIBCPP_TEMPLATE_VIS multimap;"},
{"lineNum":"  985","line":""},
{"lineNum":"  986","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  987","line":"    map()"},
{"lineNum":"  988","line":"        _NOEXCEPT_("},
{"lineNum":"  989","line":"            is_nothrow_default_constructible<allocator_type>::value &&"},
{"lineNum":"  990","line":"            is_nothrow_default_constructible<key_compare>::value &&"},
{"lineNum":"  991","line":"            is_nothrow_copy_constructible<key_compare>::value)"},
{"lineNum":"  992","line":"        : __tree_(__vc(key_compare())) {}"},
{"lineNum":"  993","line":""},
{"lineNum":"  994","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  995","line":"    explicit map(const key_compare& __comp)"},
{"lineNum":"  996","line":"        _NOEXCEPT_("},
{"lineNum":"  997","line":"            is_nothrow_default_constructible<allocator_type>::value &&"},
{"lineNum":"  998","line":"            is_nothrow_copy_constructible<key_compare>::value)"},
{"lineNum":"  999","line":"        : __tree_(__vc(__comp)) {}"},
{"lineNum":" 1000","line":""},
{"lineNum":" 1001","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1002","line":"    explicit map(const key_compare& __comp, const allocator_type& __a)"},
{"lineNum":" 1003","line":"        : __tree_(__vc(__comp), typename __base::allocator_type(__a)) {}"},
{"lineNum":" 1004","line":""},
{"lineNum":" 1005","line":"    template <class _InputIterator>"},
{"lineNum":" 1006","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1007","line":"        map(_InputIterator __f, _InputIterator __l,"},
{"lineNum":" 1008","line":"            const key_compare& __comp = key_compare())"},
{"lineNum":" 1009","line":"        : __tree_(__vc(__comp))"},
{"lineNum":" 1010","line":"        {"},
{"lineNum":" 1011","line":"            insert(__f, __l);"},
{"lineNum":" 1012","line":"        }"},
{"lineNum":" 1013","line":""},
{"lineNum":" 1014","line":"    template <class _InputIterator>"},
{"lineNum":" 1015","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1016","line":"        map(_InputIterator __f, _InputIterator __l,"},
{"lineNum":" 1017","line":"            const key_compare& __comp, const allocator_type& __a)"},
{"lineNum":" 1018","line":"        : __tree_(__vc(__comp), typename __base::allocator_type(__a))"},
{"lineNum":" 1019","line":"        {"},
{"lineNum":" 1020","line":"            insert(__f, __l);"},
{"lineNum":" 1021","line":"        }"},
{"lineNum":" 1022","line":""},
{"lineNum":" 1023","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 1024","line":"    template <class _InputIterator>"},
{"lineNum":" 1025","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1026","line":"    map(_InputIterator __f, _InputIterator __l, const allocator_type& __a)"},
{"lineNum":" 1027","line":"        : map(__f, __l, key_compare(), __a) {}"},
{"lineNum":" 1028","line":"#endif"},
{"lineNum":" 1029","line":""},
{"lineNum":" 1030","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1031","line":"    map(const map& __m)"},
{"lineNum":" 1032","line":"        : __tree_(__m.__tree_)"},
{"lineNum":" 1033","line":"        {"},
{"lineNum":" 1034","line":"            insert(__m.begin(), __m.end());"},
{"lineNum":" 1035","line":"        }"},
{"lineNum":" 1036","line":""},
{"lineNum":" 1037","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1038","line":"    map& operator=(const map& __m)"},
{"lineNum":" 1039","line":"        {"},
{"lineNum":" 1040","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1041","line":"            __tree_ = __m.__tree_;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1042","line":"#else"},
{"lineNum":" 1043","line":"            if (this != &__m) {"},
{"lineNum":" 1044","line":"                __tree_.clear();"},
{"lineNum":" 1045","line":"                __tree_.value_comp() = __m.__tree_.value_comp();"},
{"lineNum":" 1046","line":"                __tree_.__copy_assign_alloc(__m.__tree_);"},
{"lineNum":" 1047","line":"                insert(__m.begin(), __m.end());"},
{"lineNum":" 1048","line":"            }"},
{"lineNum":" 1049","line":"#endif"},
{"lineNum":" 1050","line":"            return *this;"},
{"lineNum":" 1051","line":"        }"},
{"lineNum":" 1052","line":""},
{"lineNum":" 1053","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1054","line":""},
{"lineNum":" 1055","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1056","line":"    map(map&& __m)"},
{"lineNum":" 1057","line":"        _NOEXCEPT_(is_nothrow_move_constructible<__base>::value)"},
{"lineNum":" 1058","line":"        : __tree_(_VSTD::move(__m.__tree_))"},
{"lineNum":" 1059","line":"        {"},
{"lineNum":" 1060","line":"        }"},
{"lineNum":" 1061","line":""},
{"lineNum":" 1062","line":"    map(map&& __m, const allocator_type& __a);"},
{"lineNum":" 1063","line":""},
{"lineNum":" 1064","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1065","line":"    map& operator=(map&& __m)"},
{"lineNum":" 1066","line":"        _NOEXCEPT_(is_nothrow_move_assignable<__base>::value)"},
{"lineNum":" 1067","line":"        {"},
{"lineNum":" 1068","line":"            __tree_ = _VSTD::move(__m.__tree_);"},
{"lineNum":" 1069","line":"            return *this;"},
{"lineNum":" 1070","line":"        }"},
{"lineNum":" 1071","line":""},
{"lineNum":" 1072","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1073","line":"    map(initializer_list<value_type> __il, const key_compare& __comp = key_compare())"},
{"lineNum":" 1074","line":"        : __tree_(__vc(__comp))"},
{"lineNum":" 1075","line":"        {"},
{"lineNum":" 1076","line":"            insert(__il.begin(), __il.end());"},
{"lineNum":" 1077","line":"        }"},
{"lineNum":" 1078","line":""},
{"lineNum":" 1079","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1080","line":"    map(initializer_list<value_type> __il, const key_compare& __comp, const allocator_type& __a)"},
{"lineNum":" 1081","line":"        : __tree_(__vc(__comp), typename __base::allocator_type(__a))"},
{"lineNum":" 1082","line":"        {"},
{"lineNum":" 1083","line":"            insert(__il.begin(), __il.end());"},
{"lineNum":" 1084","line":"        }"},
{"lineNum":" 1085","line":""},
{"lineNum":" 1086","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 1087","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1088","line":"    map(initializer_list<value_type> __il, const allocator_type& __a)"},
{"lineNum":" 1089","line":"        : map(__il, key_compare(), __a) {}"},
{"lineNum":" 1090","line":"#endif"},
{"lineNum":" 1091","line":""},
{"lineNum":" 1092","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1093","line":"    map& operator=(initializer_list<value_type> __il)"},
{"lineNum":" 1094","line":"        {"},
{"lineNum":" 1095","line":"            __tree_.__assign_unique(__il.begin(), __il.end());"},
{"lineNum":" 1096","line":"            return *this;"},
{"lineNum":" 1097","line":"        }"},
{"lineNum":" 1098","line":""},
{"lineNum":" 1099","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 1100","line":""},
{"lineNum":" 1101","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1102","line":"    explicit map(const allocator_type& __a)"},
{"lineNum":" 1103","line":"        : __tree_(typename __base::allocator_type(__a))"},
{"lineNum":" 1104","line":"        {"},
{"lineNum":" 1105","line":"        }"},
{"lineNum":" 1106","line":""},
{"lineNum":" 1107","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1108","line":"    map(const map& __m, const allocator_type& __a)"},
{"lineNum":" 1109","line":"        : __tree_(__m.__tree_.value_comp(), typename __base::allocator_type(__a))"},
{"lineNum":" 1110","line":"        {"},
{"lineNum":" 1111","line":"            insert(__m.begin(), __m.end());"},
{"lineNum":" 1112","line":"        }"},
{"lineNum":" 1113","line":""},
{"lineNum":" 1114","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1115","line":"    ~map() {","class":"lineNoCov","hits":"0","possible_hits":"15",},
{"lineNum":" 1116","line":"        static_assert(sizeof(__diagnose_non_const_comparator<_Key, _Compare>()), \"\");"},
{"lineNum":" 1117","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"30",},
{"lineNum":" 1118","line":""},
{"lineNum":" 1119","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1120","line":"          iterator begin() _NOEXCEPT {return __tree_.begin();}"},
{"lineNum":" 1121","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1122","line":"    const_iterator begin() const _NOEXCEPT {return __tree_.begin();}"},
{"lineNum":" 1123","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1124","line":"          iterator end() _NOEXCEPT {return __tree_.end();}"},
{"lineNum":" 1125","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1126","line":"    const_iterator end() const _NOEXCEPT {return __tree_.end();}"},
{"lineNum":" 1127","line":""},
{"lineNum":" 1128","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1129","line":"          reverse_iterator rbegin() _NOEXCEPT {return reverse_iterator(end());}"},
{"lineNum":" 1130","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1131","line":"    const_reverse_iterator rbegin() const _NOEXCEPT"},
{"lineNum":" 1132","line":"        {return const_reverse_iterator(end());}"},
{"lineNum":" 1133","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1134","line":"          reverse_iterator rend() _NOEXCEPT"},
{"lineNum":" 1135","line":"            {return       reverse_iterator(begin());}"},
{"lineNum":" 1136","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1137","line":"    const_reverse_iterator rend() const _NOEXCEPT"},
{"lineNum":" 1138","line":"        {return const_reverse_iterator(begin());}"},
{"lineNum":" 1139","line":""},
{"lineNum":" 1140","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1141","line":"    const_iterator cbegin() const _NOEXCEPT {return begin();}"},
{"lineNum":" 1142","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1143","line":"    const_iterator cend() const _NOEXCEPT {return end();}"},
{"lineNum":" 1144","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1145","line":"    const_reverse_iterator crbegin() const _NOEXCEPT {return rbegin();}"},
{"lineNum":" 1146","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1147","line":"    const_reverse_iterator crend() const _NOEXCEPT {return rend();}"},
{"lineNum":" 1148","line":""},
{"lineNum":" 1149","line":"    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1150","line":"    bool      empty() const _NOEXCEPT {return __tree_.size() == 0;}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1151","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1152","line":"    size_type size() const _NOEXCEPT {return __tree_.size();}","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":" 1153","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1154","line":"    size_type max_size() const _NOEXCEPT {return __tree_.max_size();}"},
{"lineNum":" 1155","line":""},
{"lineNum":" 1156","line":"    mapped_type& operator[](const key_type& __k);"},
{"lineNum":" 1157","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1158","line":"    mapped_type& operator[](key_type&& __k);"},
{"lineNum":" 1159","line":"#endif"},
{"lineNum":" 1160","line":""},
{"lineNum":" 1161","line":"          mapped_type& at(const key_type& __k);"},
{"lineNum":" 1162","line":"    const mapped_type& at(const key_type& __k) const;"},
{"lineNum":" 1163","line":""},
{"lineNum":" 1164","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1165","line":"    allocator_type get_allocator() const _NOEXCEPT {return allocator_type(__tree_.__alloc());}"},
{"lineNum":" 1166","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1167","line":"    key_compare    key_comp()      const {return __tree_.value_comp().key_comp();}"},
{"lineNum":" 1168","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1169","line":"    value_compare  value_comp()    const {return value_compare(__tree_.value_comp().key_comp());}"},
{"lineNum":" 1170","line":""},
{"lineNum":" 1171","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1172","line":"    template <class ..._Args>"},
{"lineNum":" 1173","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1174","line":"    pair<iterator, bool> emplace(_Args&& ...__args) {"},
{"lineNum":" 1175","line":"        return __tree_.__emplace_unique(_VSTD::forward<_Args>(__args)...);"},
{"lineNum":" 1176","line":"    }"},
{"lineNum":" 1177","line":""},
{"lineNum":" 1178","line":"    template <class ..._Args>"},
{"lineNum":" 1179","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1180","line":"    iterator emplace_hint(const_iterator __p, _Args&& ...__args) {"},
{"lineNum":" 1181","line":"        return __tree_.__emplace_hint_unique(__p.__i_, _VSTD::forward<_Args>(__args)...);"},
{"lineNum":" 1182","line":"    }"},
{"lineNum":" 1183","line":""},
{"lineNum":" 1184","line":"    template <class _Pp,"},
{"lineNum":" 1185","line":"              class = typename enable_if<is_constructible<value_type, _Pp>::value>::type>"},
{"lineNum":" 1186","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1187","line":"        pair<iterator, bool> insert(_Pp&& __p)"},
{"lineNum":" 1188","line":"            {return __tree_.__insert_unique(_VSTD::forward<_Pp>(__p));}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1189","line":""},
{"lineNum":" 1190","line":"    template <class _Pp,"},
{"lineNum":" 1191","line":"              class = typename enable_if<is_constructible<value_type, _Pp>::value>::type>"},
{"lineNum":" 1192","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1193","line":"        iterator insert(const_iterator __pos, _Pp&& __p)"},
{"lineNum":" 1194","line":"            {return __tree_.__insert_unique(__pos.__i_, _VSTD::forward<_Pp>(__p));}"},
{"lineNum":" 1195","line":""},
{"lineNum":" 1196","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 1197","line":""},
{"lineNum":" 1198","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1199","line":"    pair<iterator, bool>"},
{"lineNum":" 1200","line":"        insert(const value_type& __v) {return __tree_.__insert_unique(__v);}"},
{"lineNum":" 1201","line":""},
{"lineNum":" 1202","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1203","line":"    iterator"},
{"lineNum":" 1204","line":"        insert(const_iterator __p, const value_type& __v)"},
{"lineNum":" 1205","line":"            {return __tree_.__insert_unique(__p.__i_, __v);}"},
{"lineNum":" 1206","line":""},
{"lineNum":" 1207","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1208","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1209","line":"    pair<iterator, bool>"},
{"lineNum":" 1210","line":"    insert(value_type&& __v) {return __tree_.__insert_unique(_VSTD::move(__v));}"},
{"lineNum":" 1211","line":""},
{"lineNum":" 1212","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1213","line":"    iterator insert(const_iterator __p,  value_type&& __v)"},
{"lineNum":" 1214","line":"    {return __tree_.__insert_unique(__p.__i_, _VSTD::move(__v));}"},
{"lineNum":" 1215","line":""},
{"lineNum":" 1216","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1217","line":"    void insert(initializer_list<value_type> __il)"},
{"lineNum":" 1218","line":"        {insert(__il.begin(), __il.end());}"},
{"lineNum":" 1219","line":"#endif"},
{"lineNum":" 1220","line":""},
{"lineNum":" 1221","line":"    template <class _InputIterator>"},
{"lineNum":" 1222","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1223","line":"        void insert(_InputIterator __f, _InputIterator __l)"},
{"lineNum":" 1224","line":"        {"},
{"lineNum":" 1225","line":"            for (const_iterator __e = cend(); __f != __l; ++__f)","class":"lineNoCov","hits":"0","possible_hits":"22",},
{"lineNum":" 1226","line":"                insert(__e.__i_, *__f);"},
{"lineNum":" 1227","line":"        }"},
{"lineNum":" 1228","line":""},
{"lineNum":" 1229","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 1230","line":""},
{"lineNum":" 1231","line":"    template <class... _Args>"},
{"lineNum":" 1232","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1233","line":"        pair<iterator, bool> try_emplace(const key_type& __k, _Args&&... __args)"},
{"lineNum":" 1234","line":"    {"},
{"lineNum":" 1235","line":"        return __tree_.__emplace_unique_key_args(__k,"},
{"lineNum":" 1236","line":"            _VSTD::piecewise_construct,"},
{"lineNum":" 1237","line":"            _VSTD::forward_as_tuple(__k),"},
{"lineNum":" 1238","line":"            _VSTD::forward_as_tuple(_VSTD::forward<_Args>(__args)...));"},
{"lineNum":" 1239","line":"    }"},
{"lineNum":" 1240","line":""},
{"lineNum":" 1241","line":"    template <class... _Args>"},
{"lineNum":" 1242","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1243","line":"        pair<iterator, bool> try_emplace(key_type&& __k, _Args&&... __args)"},
{"lineNum":" 1244","line":"    {"},
{"lineNum":" 1245","line":"        return __tree_.__emplace_unique_key_args(__k,"},
{"lineNum":" 1246","line":"            _VSTD::piecewise_construct,"},
{"lineNum":" 1247","line":"            _VSTD::forward_as_tuple(_VSTD::move(__k)),"},
{"lineNum":" 1248","line":"            _VSTD::forward_as_tuple(_VSTD::forward<_Args>(__args)...));"},
{"lineNum":" 1249","line":"    }"},
{"lineNum":" 1250","line":""},
{"lineNum":" 1251","line":"    template <class... _Args>"},
{"lineNum":" 1252","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1253","line":"        iterator try_emplace(const_iterator __h, const key_type& __k, _Args&&... __args)"},
{"lineNum":" 1254","line":"    {"},
{"lineNum":" 1255","line":"        return __tree_.__emplace_hint_unique_key_args(__h.__i_, __k,"},
{"lineNum":" 1256","line":"            _VSTD::piecewise_construct,"},
{"lineNum":" 1257","line":"            _VSTD::forward_as_tuple(__k),"},
{"lineNum":" 1258","line":"            _VSTD::forward_as_tuple(_VSTD::forward<_Args>(__args)...)).first;"},
{"lineNum":" 1259","line":"    }"},
{"lineNum":" 1260","line":""},
{"lineNum":" 1261","line":"    template <class... _Args>"},
{"lineNum":" 1262","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1263","line":"        iterator try_emplace(const_iterator __h, key_type&& __k, _Args&&... __args)"},
{"lineNum":" 1264","line":"    {"},
{"lineNum":" 1265","line":"        return __tree_.__emplace_hint_unique_key_args(__h.__i_, __k,"},
{"lineNum":" 1266","line":"            _VSTD::piecewise_construct,"},
{"lineNum":" 1267","line":"            _VSTD::forward_as_tuple(_VSTD::move(__k)),"},
{"lineNum":" 1268","line":"            _VSTD::forward_as_tuple(_VSTD::forward<_Args>(__args)...)).first;"},
{"lineNum":" 1269","line":"    }"},
{"lineNum":" 1270","line":""},
{"lineNum":" 1271","line":"    template <class _Vp>"},
{"lineNum":" 1272","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1273","line":"        pair<iterator, bool> insert_or_assign(const key_type& __k, _Vp&& __v)"},
{"lineNum":" 1274","line":"    {"},
{"lineNum":" 1275","line":"        iterator __p = lower_bound(__k);"},
{"lineNum":" 1276","line":"        if ( __p != end() && !key_comp()(__k, __p->first))"},
{"lineNum":" 1277","line":"        {"},
{"lineNum":" 1278","line":"            __p->second = _VSTD::forward<_Vp>(__v);"},
{"lineNum":" 1279","line":"            return _VSTD::make_pair(__p, false);"},
{"lineNum":" 1280","line":"        }"},
{"lineNum":" 1281","line":"        return _VSTD::make_pair(emplace_hint(__p, __k, _VSTD::forward<_Vp>(__v)), true);"},
{"lineNum":" 1282","line":"    }"},
{"lineNum":" 1283","line":""},
{"lineNum":" 1284","line":"    template <class _Vp>"},
{"lineNum":" 1285","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1286","line":"        pair<iterator, bool> insert_or_assign(key_type&& __k, _Vp&& __v)"},
{"lineNum":" 1287","line":"    {"},
{"lineNum":" 1288","line":"        iterator __p = lower_bound(__k);"},
{"lineNum":" 1289","line":"        if ( __p != end() && !key_comp()(__k, __p->first))"},
{"lineNum":" 1290","line":"        {"},
{"lineNum":" 1291","line":"            __p->second = _VSTD::forward<_Vp>(__v);"},
{"lineNum":" 1292","line":"            return _VSTD::make_pair(__p, false);"},
{"lineNum":" 1293","line":"        }"},
{"lineNum":" 1294","line":"        return _VSTD::make_pair(emplace_hint(__p, _VSTD::move(__k), _VSTD::forward<_Vp>(__v)), true);"},
{"lineNum":" 1295","line":"    }"},
{"lineNum":" 1296","line":""},
{"lineNum":" 1297","line":"    template <class _Vp>"},
{"lineNum":" 1298","line":"    _LIBCPP_INLINE_VISIBILITY iterator insert_or_assign(const_iterator __h,"},
{"lineNum":" 1299","line":"                                                        const key_type& __k,"},
{"lineNum":" 1300","line":"                                                        _Vp&& __v) {"},
{"lineNum":" 1301","line":"      auto [__r, __inserted] = __tree_.__emplace_hint_unique_key_args("},
{"lineNum":" 1302","line":"          __h.__i_, __k, __k, _VSTD::forward<_Vp>(__v));"},
{"lineNum":" 1303","line":""},
{"lineNum":" 1304","line":"      if (!__inserted)"},
{"lineNum":" 1305","line":"        __r->__get_value().second = _VSTD::forward<_Vp>(__v);"},
{"lineNum":" 1306","line":""},
{"lineNum":" 1307","line":"      return __r;"},
{"lineNum":" 1308","line":"    }"},
{"lineNum":" 1309","line":""},
{"lineNum":" 1310","line":"    template <class _Vp>"},
{"lineNum":" 1311","line":"    _LIBCPP_INLINE_VISIBILITY iterator insert_or_assign(const_iterator __h,"},
{"lineNum":" 1312","line":"                                                        key_type&& __k,"},
{"lineNum":" 1313","line":"                                                        _Vp&& __v) {"},
{"lineNum":" 1314","line":"      auto [__r, __inserted] = __tree_.__emplace_hint_unique_key_args("},
{"lineNum":" 1315","line":"          __h.__i_, __k, _VSTD::move(__k), _VSTD::forward<_Vp>(__v));"},
{"lineNum":" 1316","line":""},
{"lineNum":" 1317","line":"      if (!__inserted)"},
{"lineNum":" 1318","line":"        __r->__get_value().second = _VSTD::forward<_Vp>(__v);"},
{"lineNum":" 1319","line":""},
{"lineNum":" 1320","line":"      return __r;"},
{"lineNum":" 1321","line":"    }"},
{"lineNum":" 1322","line":""},
{"lineNum":" 1323","line":"#endif // _LIBCPP_STD_VER > 14"},
{"lineNum":" 1324","line":""},
{"lineNum":" 1325","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1326","line":"    iterator erase(const_iterator __p) {return __tree_.erase(__p.__i_);}"},
{"lineNum":" 1327","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1328","line":"    iterator erase(iterator __p)       {return __tree_.erase(__p.__i_);}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1329","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1330","line":"    size_type erase(const key_type& __k)"},
{"lineNum":" 1331","line":"        {return __tree_.__erase_unique(__k);}"},
{"lineNum":" 1332","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1333","line":"    iterator  erase(const_iterator __f, const_iterator __l)"},
{"lineNum":" 1334","line":"        {return __tree_.erase(__f.__i_, __l.__i_);}"},
{"lineNum":" 1335","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1336","line":"    void clear() _NOEXCEPT {__tree_.clear();}"},
{"lineNum":" 1337","line":""},
{"lineNum":" 1338","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 1339","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1340","line":"    insert_return_type insert(node_type&& __nh)"},
{"lineNum":" 1341","line":"    {"},
{"lineNum":" 1342","line":"        _LIBCPP_ASSERT(__nh.empty() || __nh.get_allocator() == get_allocator(),"},
{"lineNum":" 1343","line":"            \"node_type with incompatible allocator passed to map::insert()\");"},
{"lineNum":" 1344","line":"        return __tree_.template __node_handle_insert_unique<"},
{"lineNum":" 1345","line":"            node_type, insert_return_type>(_VSTD::move(__nh));"},
{"lineNum":" 1346","line":"    }"},
{"lineNum":" 1347","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1348","line":"    iterator insert(const_iterator __hint, node_type&& __nh)"},
{"lineNum":" 1349","line":"    {"},
{"lineNum":" 1350","line":"        _LIBCPP_ASSERT(__nh.empty() || __nh.get_allocator() == get_allocator(),"},
{"lineNum":" 1351","line":"            \"node_type with incompatible allocator passed to map::insert()\");"},
{"lineNum":" 1352","line":"        return __tree_.template __node_handle_insert_unique<node_type>("},
{"lineNum":" 1353","line":"            __hint.__i_, _VSTD::move(__nh));"},
{"lineNum":" 1354","line":"    }"},
{"lineNum":" 1355","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1356","line":"    node_type extract(key_type const& __key)"},
{"lineNum":" 1357","line":"    {"},
{"lineNum":" 1358","line":"        return __tree_.template __node_handle_extract<node_type>(__key);"},
{"lineNum":" 1359","line":"    }"},
{"lineNum":" 1360","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1361","line":"    node_type extract(const_iterator __it)"},
{"lineNum":" 1362","line":"    {"},
{"lineNum":" 1363","line":"        return __tree_.template __node_handle_extract<node_type>(__it.__i_);"},
{"lineNum":" 1364","line":"    }"},
{"lineNum":" 1365","line":"    template <class _Compare2>"},
{"lineNum":" 1366","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1367","line":"    void merge(map<key_type, mapped_type, _Compare2, allocator_type>& __source)"},
{"lineNum":" 1368","line":"    {"},
{"lineNum":" 1369","line":"        _LIBCPP_ASSERT(__source.get_allocator() == get_allocator(),"},
{"lineNum":" 1370","line":"                       \"merging container with incompatible allocator\");"},
{"lineNum":" 1371","line":"        __tree_.__node_handle_merge_unique(__source.__tree_);"},
{"lineNum":" 1372","line":"    }"},
{"lineNum":" 1373","line":"    template <class _Compare2>"},
{"lineNum":" 1374","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1375","line":"    void merge(map<key_type, mapped_type, _Compare2, allocator_type>&& __source)"},
{"lineNum":" 1376","line":"    {"},
{"lineNum":" 1377","line":"        _LIBCPP_ASSERT(__source.get_allocator() == get_allocator(),"},
{"lineNum":" 1378","line":"                       \"merging container with incompatible allocator\");"},
{"lineNum":" 1379","line":"        __tree_.__node_handle_merge_unique(__source.__tree_);"},
{"lineNum":" 1380","line":"    }"},
{"lineNum":" 1381","line":"    template <class _Compare2>"},
{"lineNum":" 1382","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1383","line":"    void merge(multimap<key_type, mapped_type, _Compare2, allocator_type>& __source)"},
{"lineNum":" 1384","line":"    {"},
{"lineNum":" 1385","line":"        _LIBCPP_ASSERT(__source.get_allocator() == get_allocator(),"},
{"lineNum":" 1386","line":"                       \"merging container with incompatible allocator\");"},
{"lineNum":" 1387","line":"        __tree_.__node_handle_merge_unique(__source.__tree_);"},
{"lineNum":" 1388","line":"    }"},
{"lineNum":" 1389","line":"    template <class _Compare2>"},
{"lineNum":" 1390","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1391","line":"    void merge(multimap<key_type, mapped_type, _Compare2, allocator_type>&& __source)"},
{"lineNum":" 1392","line":"    {"},
{"lineNum":" 1393","line":"        _LIBCPP_ASSERT(__source.get_allocator() == get_allocator(),"},
{"lineNum":" 1394","line":"                       \"merging container with incompatible allocator\");"},
{"lineNum":" 1395","line":"        __tree_.__node_handle_merge_unique(__source.__tree_);"},
{"lineNum":" 1396","line":"    }"},
{"lineNum":" 1397","line":"#endif"},
{"lineNum":" 1398","line":""},
{"lineNum":" 1399","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1400","line":"    void swap(map& __m)"},
{"lineNum":" 1401","line":"        _NOEXCEPT_(__is_nothrow_swappable<__base>::value)"},
{"lineNum":" 1402","line":"        {__tree_.swap(__m.__tree_);}"},
{"lineNum":" 1403","line":""},
{"lineNum":" 1404","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1405","line":"    iterator find(const key_type& __k)             {return __tree_.find(__k);}","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1406","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1407","line":"    const_iterator find(const key_type& __k) const {return __tree_.find(__k);}","class":"lineNoCov","hits":"0","possible_hits":"29",},
{"lineNum":" 1408","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 1409","line":"    template <typename _K2>"},
{"lineNum":" 1410","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1411","line":"    typename enable_if<__is_transparent<_Compare, _K2>::value,iterator>::type"},
{"lineNum":" 1412","line":"    find(const _K2& __k)                           {return __tree_.find(__k);}"},
{"lineNum":" 1413","line":"    template <typename _K2>"},
{"lineNum":" 1414","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1415","line":"    typename enable_if<__is_transparent<_Compare, _K2>::value,const_iterator>::type"},
{"lineNum":" 1416","line":"    find(const _K2& __k) const                     {return __tree_.find(__k);}"},
{"lineNum":" 1417","line":"#endif"},
{"lineNum":" 1418","line":""},
{"lineNum":" 1419","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1420","line":"    size_type      count(const key_type& __k) const"},
{"lineNum":" 1421","line":"        {return __tree_.__count_unique(__k);}","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1422","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 1423","line":"    template <typename _K2>"},
{"lineNum":" 1424","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1425","line":"    typename enable_if<__is_transparent<_Compare, _K2>::value,size_type>::type"},
{"lineNum":" 1426","line":"    count(const _K2& __k) const {return __tree_.__count_multi(__k);}"},
{"lineNum":" 1427","line":"#endif"},
{"lineNum":" 1428","line":""},
{"lineNum":" 1429","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":" 1430","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1431","line":"    bool contains(const key_type& __k) const {return find(__k) != end();}"},
{"lineNum":" 1432","line":"    template <typename _K2>"},
{"lineNum":" 1433","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1434","line":"    typename enable_if<__is_transparent<_Compare, _K2>::value, bool>::type"},
{"lineNum":" 1435","line":"    contains(const _K2& __k) const { return find(__k) != end(); }"},
{"lineNum":" 1436","line":"#endif // _LIBCPP_STD_VER > 17"},
{"lineNum":" 1437","line":""},
{"lineNum":" 1438","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1439","line":"    iterator lower_bound(const key_type& __k)"},
{"lineNum":" 1440","line":"        {return __tree_.lower_bound(__k);}","class":"lineCov","hits":"27","order":"385","possible_hits":"27",},
{"lineNum":" 1441","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1442","line":"    const_iterator lower_bound(const key_type& __k) const"},
{"lineNum":" 1443","line":"        {return __tree_.lower_bound(__k);}"},
{"lineNum":" 1444","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 1445","line":"    template <typename _K2>"},
{"lineNum":" 1446","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1447","line":"    typename enable_if<__is_transparent<_Compare, _K2>::value,iterator>::type"},
{"lineNum":" 1448","line":"    lower_bound(const _K2& __k)       {return __tree_.lower_bound(__k);}"},
{"lineNum":" 1449","line":""},
{"lineNum":" 1450","line":"    template <typename _K2>"},
{"lineNum":" 1451","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1452","line":"    typename enable_if<__is_transparent<_Compare, _K2>::value,const_iterator>::type"},
{"lineNum":" 1453","line":"    lower_bound(const _K2& __k) const {return __tree_.lower_bound(__k);}"},
{"lineNum":" 1454","line":"#endif"},
{"lineNum":" 1455","line":""},
{"lineNum":" 1456","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1457","line":"    iterator upper_bound(const key_type& __k)"},
{"lineNum":" 1458","line":"        {return __tree_.upper_bound(__k);}"},
{"lineNum":" 1459","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1460","line":"    const_iterator upper_bound(const key_type& __k) const"},
{"lineNum":" 1461","line":"        {return __tree_.upper_bound(__k);}"},
{"lineNum":" 1462","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 1463","line":"    template <typename _K2>"},
{"lineNum":" 1464","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1465","line":"    typename enable_if<__is_transparent<_Compare, _K2>::value,iterator>::type"},
{"lineNum":" 1466","line":"    upper_bound(const _K2& __k)       {return __tree_.upper_bound(__k);}"},
{"lineNum":" 1467","line":"    template <typename _K2>"},
{"lineNum":" 1468","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1469","line":"    typename enable_if<__is_transparent<_Compare, _K2>::value,const_iterator>::type"},
{"lineNum":" 1470","line":"    upper_bound(const _K2& __k) const {return __tree_.upper_bound(__k);}"},
{"lineNum":" 1471","line":"#endif"},
{"lineNum":" 1472","line":""},
{"lineNum":" 1473","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1474","line":"    pair<iterator,iterator> equal_range(const key_type& __k)"},
{"lineNum":" 1475","line":"        {return __tree_.__equal_range_unique(__k);}"},
{"lineNum":" 1476","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1477","line":"    pair<const_iterator,const_iterator> equal_range(const key_type& __k) const"},
{"lineNum":" 1478","line":"        {return __tree_.__equal_range_unique(__k);}"},
{"lineNum":" 1479","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 1480","line":"    template <typename _K2>"},
{"lineNum":" 1481","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1482","line":"    typename enable_if<__is_transparent<_Compare, _K2>::value,pair<iterator,iterator>>::type"},
{"lineNum":" 1483","line":"    equal_range(const _K2& __k)       {return __tree_.__equal_range_multi(__k);}"},
{"lineNum":" 1484","line":"    template <typename _K2>"},
{"lineNum":" 1485","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1486","line":"    typename enable_if<__is_transparent<_Compare, _K2>::value,pair<const_iterator,const_iterator>>::type"},
{"lineNum":" 1487","line":"    equal_range(const _K2& __k) const {return __tree_.__equal_range_multi(__k);}"},
{"lineNum":" 1488","line":"#endif"},
{"lineNum":" 1489","line":""},
{"lineNum":" 1490","line":"private:"},
{"lineNum":" 1491","line":"    typedef typename __base::__node                    __node;"},
{"lineNum":" 1492","line":"    typedef typename __base::__node_allocator          __node_allocator;"},
{"lineNum":" 1493","line":"    typedef typename __base::__node_pointer            __node_pointer;"},
{"lineNum":" 1494","line":"    typedef typename __base::__node_base_pointer       __node_base_pointer;"},
{"lineNum":" 1495","line":"    typedef typename __base::__parent_pointer          __parent_pointer;"},
{"lineNum":" 1496","line":""},
{"lineNum":" 1497","line":"    typedef __map_node_destructor<__node_allocator> _Dp;"},
{"lineNum":" 1498","line":"    typedef unique_ptr<__node, _Dp> __node_holder;"},
{"lineNum":" 1499","line":""},
{"lineNum":" 1500","line":"#ifdef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1501","line":"    __node_holder __construct_node_with_key(const key_type& __k);"},
{"lineNum":" 1502","line":"#endif"},
{"lineNum":" 1503","line":"};"},
{"lineNum":" 1504","line":""},
{"lineNum":" 1505","line":"#ifndef _LIBCPP_HAS_NO_DEDUCTION_GUIDES"},
{"lineNum":" 1506","line":"template<class _InputIterator, class _Compare = less<__iter_key_type<_InputIterator>>,"},
{"lineNum":" 1507","line":"         class _Allocator = allocator<__iter_to_alloc_type<_InputIterator>>,"},
{"lineNum":" 1508","line":"         class = _EnableIf<!__is_allocator<_Compare>::value, void>,"},
{"lineNum":" 1509","line":"         class = _EnableIf<__is_allocator<_Allocator>::value, void>>"},
{"lineNum":" 1510","line":"map(_InputIterator, _InputIterator, _Compare = _Compare(), _Allocator = _Allocator())"},
{"lineNum":" 1511","line":"  -> map<__iter_key_type<_InputIterator>, __iter_mapped_type<_InputIterator>, _Compare, _Allocator>;"},
{"lineNum":" 1512","line":""},
{"lineNum":" 1513","line":"template<class _Key, class _Tp, class _Compare = less<remove_const_t<_Key>>,"},
{"lineNum":" 1514","line":"         class _Allocator = allocator<pair<const _Key, _Tp>>,"},
{"lineNum":" 1515","line":"         class = _EnableIf<!__is_allocator<_Compare>::value, void>,"},
{"lineNum":" 1516","line":"         class = _EnableIf<__is_allocator<_Allocator>::value, void>>"},
{"lineNum":" 1517","line":"map(initializer_list<pair<_Key, _Tp>>, _Compare = _Compare(), _Allocator = _Allocator())"},
{"lineNum":" 1518","line":"  -> map<remove_const_t<_Key>, _Tp, _Compare, _Allocator>;"},
{"lineNum":" 1519","line":""},
{"lineNum":" 1520","line":"template<class _InputIterator, class _Allocator,"},
{"lineNum":" 1521","line":"         class = _EnableIf<__is_allocator<_Allocator>::value, void>>"},
{"lineNum":" 1522","line":"map(_InputIterator, _InputIterator, _Allocator)"},
{"lineNum":" 1523","line":"  -> map<__iter_key_type<_InputIterator>, __iter_mapped_type<_InputIterator>,"},
{"lineNum":" 1524","line":"         less<__iter_key_type<_InputIterator>>, _Allocator>;"},
{"lineNum":" 1525","line":""},
{"lineNum":" 1526","line":"template<class _Key, class _Tp, class _Allocator,"},
{"lineNum":" 1527","line":"         class = _EnableIf<__is_allocator<_Allocator>::value, void>>"},
{"lineNum":" 1528","line":"map(initializer_list<pair<_Key, _Tp>>, _Allocator)"},
{"lineNum":" 1529","line":"  -> map<remove_const_t<_Key>, _Tp, less<remove_const_t<_Key>>, _Allocator>;"},
{"lineNum":" 1530","line":"#endif"},
{"lineNum":" 1531","line":""},
{"lineNum":" 1532","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1533","line":"template <class _Key, class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 1534","line":"map<_Key, _Tp, _Compare, _Allocator>::map(map&& __m, const allocator_type& __a)"},
{"lineNum":" 1535","line":"    : __tree_(_VSTD::move(__m.__tree_), typename __base::allocator_type(__a))"},
{"lineNum":" 1536","line":"{"},
{"lineNum":" 1537","line":"    if (__a != __m.get_allocator())"},
{"lineNum":" 1538","line":"    {"},
{"lineNum":" 1539","line":"        const_iterator __e = cend();"},
{"lineNum":" 1540","line":"        while (!__m.empty())"},
{"lineNum":" 1541","line":"            __tree_.__insert_unique(__e.__i_,"},
{"lineNum":" 1542","line":"                    __m.__tree_.remove(__m.begin().__i_)->__value_.__move());"},
{"lineNum":" 1543","line":"    }"},
{"lineNum":" 1544","line":"}"},
{"lineNum":" 1545","line":""},
{"lineNum":" 1546","line":"template <class _Key, class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 1547","line":"_Tp&"},
{"lineNum":" 1548","line":"map<_Key, _Tp, _Compare, _Allocator>::operator[](const key_type& __k)"},
{"lineNum":" 1549","line":"{"},
{"lineNum":" 1550","line":"    return __tree_.__emplace_unique_key_args(__k,","class":"lineNoCov","hits":"0","possible_hits":"76",},
{"lineNum":" 1551","line":"        _VSTD::piecewise_construct,"},
{"lineNum":" 1552","line":"        _VSTD::forward_as_tuple(__k),","class":"lineNoCov","hits":"0","possible_hits":"72",},
{"lineNum":" 1553","line":"        _VSTD::forward_as_tuple()).first->__get_value().second;","class":"lineNoCov","hits":"0","possible_hits":"61",},
{"lineNum":" 1554","line":"}"},
{"lineNum":" 1555","line":""},
{"lineNum":" 1556","line":"template <class _Key, class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 1557","line":"_Tp&"},
{"lineNum":" 1558","line":"map<_Key, _Tp, _Compare, _Allocator>::operator[](key_type&& __k)"},
{"lineNum":" 1559","line":"{"},
{"lineNum":" 1560","line":"    return __tree_.__emplace_unique_key_args(__k,"},
{"lineNum":" 1561","line":"        _VSTD::piecewise_construct,"},
{"lineNum":" 1562","line":"        _VSTD::forward_as_tuple(_VSTD::move(__k)),"},
{"lineNum":" 1563","line":"        _VSTD::forward_as_tuple()).first->__get_value().second;","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 1564","line":"}"},
{"lineNum":" 1565","line":""},
{"lineNum":" 1566","line":"#else // _LIBCPP_CXX03_LANG"},
{"lineNum":" 1567","line":""},
{"lineNum":" 1568","line":"template <class _Key, class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 1569","line":"typename map<_Key, _Tp, _Compare, _Allocator>::__node_holder"},
{"lineNum":" 1570","line":"map<_Key, _Tp, _Compare, _Allocator>::__construct_node_with_key(const key_type& __k)"},
{"lineNum":" 1571","line":"{"},
{"lineNum":" 1572","line":"    __node_allocator& __na = __tree_.__node_alloc();"},
{"lineNum":" 1573","line":"    __node_holder __h(__node_traits::allocate(__na, 1), _Dp(__na));"},
{"lineNum":" 1574","line":"    __node_traits::construct(__na, _VSTD::addressof(__h->__value_.__get_value().first), __k);"},
{"lineNum":" 1575","line":"    __h.get_deleter().__first_constructed = true;"},
{"lineNum":" 1576","line":"    __node_traits::construct(__na, _VSTD::addressof(__h->__value_.__get_value().second));"},
{"lineNum":" 1577","line":"    __h.get_deleter().__second_constructed = true;"},
{"lineNum":" 1578","line":"    return __h;"},
{"lineNum":" 1579","line":"}"},
{"lineNum":" 1580","line":""},
{"lineNum":" 1581","line":"template <class _Key, class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 1582","line":"_Tp&"},
{"lineNum":" 1583","line":"map<_Key, _Tp, _Compare, _Allocator>::operator[](const key_type& __k)"},
{"lineNum":" 1584","line":"{"},
{"lineNum":" 1585","line":"    __parent_pointer __parent;"},
{"lineNum":" 1586","line":"    __node_base_pointer& __child = __tree_.__find_equal(__parent, __k);"},
{"lineNum":" 1587","line":"    __node_pointer __r = static_cast<__node_pointer>(__child);"},
{"lineNum":" 1588","line":"    if (__child == nullptr)"},
{"lineNum":" 1589","line":"    {"},
{"lineNum":" 1590","line":"        __node_holder __h = __construct_node_with_key(__k);"},
{"lineNum":" 1591","line":"        __tree_.__insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__h.get()));"},
{"lineNum":" 1592","line":"        __r = __h.release();"},
{"lineNum":" 1593","line":"    }"},
{"lineNum":" 1594","line":"    return __r->__value_.__get_value().second;"},
{"lineNum":" 1595","line":"}"},
{"lineNum":" 1596","line":""},
{"lineNum":" 1597","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 1598","line":""},
{"lineNum":" 1599","line":"template <class _Key, class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 1600","line":"_Tp&"},
{"lineNum":" 1601","line":"map<_Key, _Tp, _Compare, _Allocator>::at(const key_type& __k)"},
{"lineNum":" 1602","line":"{"},
{"lineNum":" 1603","line":"    __parent_pointer __parent;"},
{"lineNum":" 1604","line":"    __node_base_pointer& __child = __tree_.__find_equal(__parent, __k);"},
{"lineNum":" 1605","line":"    if (__child == nullptr)"},
{"lineNum":" 1606","line":"        __throw_out_of_range(\"map::at:  key not found\");"},
{"lineNum":" 1607","line":"    return static_cast<__node_pointer>(__child)->__value_.__get_value().second;"},
{"lineNum":" 1608","line":"}"},
{"lineNum":" 1609","line":""},
{"lineNum":" 1610","line":"template <class _Key, class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 1611","line":"const _Tp&"},
{"lineNum":" 1612","line":"map<_Key, _Tp, _Compare, _Allocator>::at(const key_type& __k) const"},
{"lineNum":" 1613","line":"{"},
{"lineNum":" 1614","line":"    __parent_pointer __parent;"},
{"lineNum":" 1615","line":"    __node_base_pointer __child = __tree_.__find_equal(__parent, __k);"},
{"lineNum":" 1616","line":"    if (__child == nullptr)"},
{"lineNum":" 1617","line":"        __throw_out_of_range(\"map::at:  key not found\");"},
{"lineNum":" 1618","line":"    return static_cast<__node_pointer>(__child)->__value_.__get_value().second;"},
{"lineNum":" 1619","line":"}"},
{"lineNum":" 1620","line":""},
{"lineNum":" 1621","line":""},
{"lineNum":" 1622","line":"template <class _Key, class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 1623","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1624","line":"bool"},
{"lineNum":" 1625","line":"operator==(const map<_Key, _Tp, _Compare, _Allocator>& __x,"},
{"lineNum":" 1626","line":"           const map<_Key, _Tp, _Compare, _Allocator>& __y)"},
{"lineNum":" 1627","line":"{"},
{"lineNum":" 1628","line":"    return __x.size() == __y.size() && _VSTD::equal(__x.begin(), __x.end(), __y.begin());"},
{"lineNum":" 1629","line":"}"},
{"lineNum":" 1630","line":""},
{"lineNum":" 1631","line":"template <class _Key, class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 1632","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1633","line":"bool"},
{"lineNum":" 1634","line":"operator< (const map<_Key, _Tp, _Compare, _Allocator>& __x,"},
{"lineNum":" 1635","line":"           const map<_Key, _Tp, _Compare, _Allocator>& __y)"},
{"lineNum":" 1636","line":"{"},
{"lineNum":" 1637","line":"    return _VSTD::lexicographical_compare(__x.begin(), __x.end(), __y.begin(), __y.end());"},
{"lineNum":" 1638","line":"}"},
{"lineNum":" 1639","line":""},
{"lineNum":" 1640","line":"template <class _Key, class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 1641","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1642","line":"bool"},
{"lineNum":" 1643","line":"operator!=(const map<_Key, _Tp, _Compare, _Allocator>& __x,"},
{"lineNum":" 1644","line":"           const map<_Key, _Tp, _Compare, _Allocator>& __y)"},
{"lineNum":" 1645","line":"{"},
{"lineNum":" 1646","line":"    return !(__x == __y);"},
{"lineNum":" 1647","line":"}"},
{"lineNum":" 1648","line":""},
{"lineNum":" 1649","line":"template <class _Key, class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 1650","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1651","line":"bool"},
{"lineNum":" 1652","line":"operator> (const map<_Key, _Tp, _Compare, _Allocator>& __x,"},
{"lineNum":" 1653","line":"           const map<_Key, _Tp, _Compare, _Allocator>& __y)"},
{"lineNum":" 1654","line":"{"},
{"lineNum":" 1655","line":"    return __y < __x;"},
{"lineNum":" 1656","line":"}"},
{"lineNum":" 1657","line":""},
{"lineNum":" 1658","line":"template <class _Key, class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 1659","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1660","line":"bool"},
{"lineNum":" 1661","line":"operator>=(const map<_Key, _Tp, _Compare, _Allocator>& __x,"},
{"lineNum":" 1662","line":"           const map<_Key, _Tp, _Compare, _Allocator>& __y)"},
{"lineNum":" 1663","line":"{"},
{"lineNum":" 1664","line":"    return !(__x < __y);"},
{"lineNum":" 1665","line":"}"},
{"lineNum":" 1666","line":""},
{"lineNum":" 1667","line":"template <class _Key, class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 1668","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1669","line":"bool"},
{"lineNum":" 1670","line":"operator<=(const map<_Key, _Tp, _Compare, _Allocator>& __x,"},
{"lineNum":" 1671","line":"           const map<_Key, _Tp, _Compare, _Allocator>& __y)"},
{"lineNum":" 1672","line":"{"},
{"lineNum":" 1673","line":"    return !(__y < __x);"},
{"lineNum":" 1674","line":"}"},
{"lineNum":" 1675","line":""},
{"lineNum":" 1676","line":"template <class _Key, class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 1677","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1678","line":"void"},
{"lineNum":" 1679","line":"swap(map<_Key, _Tp, _Compare, _Allocator>& __x,"},
{"lineNum":" 1680","line":"     map<_Key, _Tp, _Compare, _Allocator>& __y)"},
{"lineNum":" 1681","line":"    _NOEXCEPT_(_NOEXCEPT_(__x.swap(__y)))"},
{"lineNum":" 1682","line":"{"},
{"lineNum":" 1683","line":"    __x.swap(__y);"},
{"lineNum":" 1684","line":"}"},
{"lineNum":" 1685","line":""},
{"lineNum":" 1686","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":" 1687","line":"template <class _Key, class _Tp, class _Compare, class _Allocator,"},
{"lineNum":" 1688","line":"          class _Predicate>"},
{"lineNum":" 1689","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1690","line":"    typename map<_Key, _Tp, _Compare, _Allocator>::size_type"},
{"lineNum":" 1691","line":"    erase_if(map<_Key, _Tp, _Compare, _Allocator>& __c, _Predicate __pred) {"},
{"lineNum":" 1692","line":"  return _VSTD::__libcpp_erase_if_container(__c, __pred);"},
{"lineNum":" 1693","line":"}"},
{"lineNum":" 1694","line":"#endif"},
{"lineNum":" 1695","line":""},
{"lineNum":" 1696","line":""},
{"lineNum":" 1697","line":"template <class _Key, class _Tp, class _Compare = less<_Key>,"},
{"lineNum":" 1698","line":"          class _Allocator = allocator<pair<const _Key, _Tp> > >"},
{"lineNum":" 1699","line":"class _LIBCPP_TEMPLATE_VIS multimap"},
{"lineNum":" 1700","line":"{"},
{"lineNum":" 1701","line":"public:"},
{"lineNum":" 1702","line":"    // types:"},
{"lineNum":" 1703","line":"    typedef _Key                                     key_type;"},
{"lineNum":" 1704","line":"    typedef _Tp                                      mapped_type;"},
{"lineNum":" 1705","line":"    typedef pair<const key_type, mapped_type>        value_type;"},
{"lineNum":" 1706","line":"    typedef __identity_t<_Compare>                   key_compare;"},
{"lineNum":" 1707","line":"    typedef __identity_t<_Allocator>                 allocator_type;"},
{"lineNum":" 1708","line":"    typedef value_type&                              reference;"},
{"lineNum":" 1709","line":"    typedef const value_type&                        const_reference;"},
{"lineNum":" 1710","line":""},
{"lineNum":" 1711","line":"    static_assert((is_same<typename allocator_type::value_type, value_type>::value),"},
{"lineNum":" 1712","line":"                  \"Allocator::value_type must be same type as value_type\");"},
{"lineNum":" 1713","line":""},
{"lineNum":" 1714","line":"_LIBCPP_SUPPRESS_DEPRECATED_PUSH"},
{"lineNum":" 1715","line":"    class _LIBCPP_TEMPLATE_VIS value_compare"},
{"lineNum":" 1716","line":"#if defined(_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS)"},
{"lineNum":" 1717","line":"        : public binary_function<value_type, value_type, bool>"},
{"lineNum":" 1718","line":"#endif"},
{"lineNum":" 1719","line":"    {"},
{"lineNum":" 1720","line":"_LIBCPP_SUPPRESS_DEPRECATED_POP"},
{"lineNum":" 1721","line":"        friend class multimap;"},
{"lineNum":" 1722","line":"    protected:"},
{"lineNum":" 1723","line":"        key_compare comp;"},
{"lineNum":" 1724","line":""},
{"lineNum":" 1725","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1726","line":"        value_compare(key_compare c) : comp(c) {}"},
{"lineNum":" 1727","line":"    public:"},
{"lineNum":" 1728","line":"#if _LIBCPP_STD_VER <= 17 || defined(_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS)"},
{"lineNum":" 1729","line":"        _LIBCPP_DEPRECATED_IN_CXX17 typedef bool result_type;"},
{"lineNum":" 1730","line":"        _LIBCPP_DEPRECATED_IN_CXX17 typedef value_type first_argument_type;"},
{"lineNum":" 1731","line":"        _LIBCPP_DEPRECATED_IN_CXX17 typedef value_type second_argument_type;"},
{"lineNum":" 1732","line":"#endif"},
{"lineNum":" 1733","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1734","line":"        bool operator()(const value_type& __x, const value_type& __y) const"},
{"lineNum":" 1735","line":"            {return comp(__x.first, __y.first);}"},
{"lineNum":" 1736","line":"    };"},
{"lineNum":" 1737","line":""},
{"lineNum":" 1738","line":"private:"},
{"lineNum":" 1739","line":""},
{"lineNum":" 1740","line":"    typedef _VSTD::__value_type<key_type, mapped_type>             __value_type;"},
{"lineNum":" 1741","line":"    typedef __map_value_compare<key_type, __value_type, key_compare> __vc;"},
{"lineNum":" 1742","line":"    typedef typename __rebind_alloc_helper<allocator_traits<allocator_type>,"},
{"lineNum":" 1743","line":"                                                 __value_type>::type __allocator_type;"},
{"lineNum":" 1744","line":"    typedef __tree<__value_type, __vc, __allocator_type>            __base;"},
{"lineNum":" 1745","line":"    typedef typename __base::__node_traits                          __node_traits;"},
{"lineNum":" 1746","line":"    typedef allocator_traits<allocator_type>                        __alloc_traits;"},
{"lineNum":" 1747","line":""},
{"lineNum":" 1748","line":"    __base __tree_;"},
{"lineNum":" 1749","line":""},
{"lineNum":" 1750","line":"public:"},
{"lineNum":" 1751","line":"    typedef typename __alloc_traits::pointer               pointer;"},
{"lineNum":" 1752","line":"    typedef typename __alloc_traits::const_pointer         const_pointer;"},
{"lineNum":" 1753","line":"    typedef typename __alloc_traits::size_type             size_type;"},
{"lineNum":" 1754","line":"    typedef typename __alloc_traits::difference_type       difference_type;"},
{"lineNum":" 1755","line":"    typedef __map_iterator<typename __base::iterator>      iterator;"},
{"lineNum":" 1756","line":"    typedef __map_const_iterator<typename __base::const_iterator> const_iterator;"},
{"lineNum":" 1757","line":"    typedef _VSTD::reverse_iterator<iterator>               reverse_iterator;"},
{"lineNum":" 1758","line":"    typedef _VSTD::reverse_iterator<const_iterator>         const_reverse_iterator;"},
{"lineNum":" 1759","line":""},
{"lineNum":" 1760","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 1761","line":"    typedef __map_node_handle<typename __base::__node, allocator_type> node_type;"},
{"lineNum":" 1762","line":"#endif"},
{"lineNum":" 1763","line":""},
{"lineNum":" 1764","line":"    template <class _Key2, class _Value2, class _Comp2, class _Alloc2>"},
{"lineNum":" 1765","line":"        friend class _LIBCPP_TEMPLATE_VIS map;"},
{"lineNum":" 1766","line":"    template <class _Key2, class _Value2, class _Comp2, class _Alloc2>"},
{"lineNum":" 1767","line":"        friend class _LIBCPP_TEMPLATE_VIS multimap;"},
{"lineNum":" 1768","line":""},
{"lineNum":" 1769","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1770","line":"    multimap()"},
{"lineNum":" 1771","line":"        _NOEXCEPT_("},
{"lineNum":" 1772","line":"            is_nothrow_default_constructible<allocator_type>::value &&"},
{"lineNum":" 1773","line":"            is_nothrow_default_constructible<key_compare>::value &&"},
{"lineNum":" 1774","line":"            is_nothrow_copy_constructible<key_compare>::value)"},
{"lineNum":" 1775","line":"        : __tree_(__vc(key_compare())) {}"},
{"lineNum":" 1776","line":""},
{"lineNum":" 1777","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1778","line":"    explicit multimap(const key_compare& __comp)"},
{"lineNum":" 1779","line":"        _NOEXCEPT_("},
{"lineNum":" 1780","line":"            is_nothrow_default_constructible<allocator_type>::value &&"},
{"lineNum":" 1781","line":"            is_nothrow_copy_constructible<key_compare>::value)"},
{"lineNum":" 1782","line":"        : __tree_(__vc(__comp)) {}"},
{"lineNum":" 1783","line":""},
{"lineNum":" 1784","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1785","line":"    explicit multimap(const key_compare& __comp, const allocator_type& __a)"},
{"lineNum":" 1786","line":"        : __tree_(__vc(__comp), typename __base::allocator_type(__a)) {}"},
{"lineNum":" 1787","line":""},
{"lineNum":" 1788","line":"    template <class _InputIterator>"},
{"lineNum":" 1789","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1790","line":"        multimap(_InputIterator __f, _InputIterator __l,"},
{"lineNum":" 1791","line":"            const key_compare& __comp = key_compare())"},
{"lineNum":" 1792","line":"        : __tree_(__vc(__comp))"},
{"lineNum":" 1793","line":"        {"},
{"lineNum":" 1794","line":"            insert(__f, __l);"},
{"lineNum":" 1795","line":"        }"},
{"lineNum":" 1796","line":""},
{"lineNum":" 1797","line":"    template <class _InputIterator>"},
{"lineNum":" 1798","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1799","line":"        multimap(_InputIterator __f, _InputIterator __l,"},
{"lineNum":" 1800","line":"            const key_compare& __comp, const allocator_type& __a)"},
{"lineNum":" 1801","line":"        : __tree_(__vc(__comp), typename __base::allocator_type(__a))"},
{"lineNum":" 1802","line":"        {"},
{"lineNum":" 1803","line":"            insert(__f, __l);"},
{"lineNum":" 1804","line":"        }"},
{"lineNum":" 1805","line":""},
{"lineNum":" 1806","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 1807","line":"    template <class _InputIterator>"},
{"lineNum":" 1808","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1809","line":"    multimap(_InputIterator __f, _InputIterator __l, const allocator_type& __a)"},
{"lineNum":" 1810","line":"        : multimap(__f, __l, key_compare(), __a) {}"},
{"lineNum":" 1811","line":"#endif"},
{"lineNum":" 1812","line":""},
{"lineNum":" 1813","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1814","line":"    multimap(const multimap& __m)"},
{"lineNum":" 1815","line":"        : __tree_(__m.__tree_.value_comp(),"},
{"lineNum":" 1816","line":"          __alloc_traits::select_on_container_copy_construction(__m.__tree_.__alloc()))"},
{"lineNum":" 1817","line":"        {"},
{"lineNum":" 1818","line":"            insert(__m.begin(), __m.end());"},
{"lineNum":" 1819","line":"        }"},
{"lineNum":" 1820","line":""},
{"lineNum":" 1821","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1822","line":"    multimap& operator=(const multimap& __m)"},
{"lineNum":" 1823","line":"        {"},
{"lineNum":" 1824","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1825","line":"            __tree_ = __m.__tree_;"},
{"lineNum":" 1826","line":"#else"},
{"lineNum":" 1827","line":"            if (this != &__m) {"},
{"lineNum":" 1828","line":"                __tree_.clear();"},
{"lineNum":" 1829","line":"                __tree_.value_comp() = __m.__tree_.value_comp();"},
{"lineNum":" 1830","line":"                __tree_.__copy_assign_alloc(__m.__tree_);"},
{"lineNum":" 1831","line":"                insert(__m.begin(), __m.end());"},
{"lineNum":" 1832","line":"            }"},
{"lineNum":" 1833","line":"#endif"},
{"lineNum":" 1834","line":"            return *this;"},
{"lineNum":" 1835","line":"        }"},
{"lineNum":" 1836","line":""},
{"lineNum":" 1837","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1838","line":""},
{"lineNum":" 1839","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1840","line":"    multimap(multimap&& __m)"},
{"lineNum":" 1841","line":"        _NOEXCEPT_(is_nothrow_move_constructible<__base>::value)"},
{"lineNum":" 1842","line":"        : __tree_(_VSTD::move(__m.__tree_))"},
{"lineNum":" 1843","line":"        {"},
{"lineNum":" 1844","line":"        }"},
{"lineNum":" 1845","line":""},
{"lineNum":" 1846","line":"    multimap(multimap&& __m, const allocator_type& __a);"},
{"lineNum":" 1847","line":""},
{"lineNum":" 1848","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1849","line":"    multimap& operator=(multimap&& __m)"},
{"lineNum":" 1850","line":"        _NOEXCEPT_(is_nothrow_move_assignable<__base>::value)"},
{"lineNum":" 1851","line":"        {"},
{"lineNum":" 1852","line":"            __tree_ = _VSTD::move(__m.__tree_);"},
{"lineNum":" 1853","line":"            return *this;"},
{"lineNum":" 1854","line":"        }"},
{"lineNum":" 1855","line":""},
{"lineNum":" 1856","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1857","line":"    multimap(initializer_list<value_type> __il, const key_compare& __comp = key_compare())"},
{"lineNum":" 1858","line":"        : __tree_(__vc(__comp))"},
{"lineNum":" 1859","line":"        {"},
{"lineNum":" 1860","line":"            insert(__il.begin(), __il.end());"},
{"lineNum":" 1861","line":"        }"},
{"lineNum":" 1862","line":""},
{"lineNum":" 1863","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1864","line":"    multimap(initializer_list<value_type> __il, const key_compare& __comp, const allocator_type& __a)"},
{"lineNum":" 1865","line":"        : __tree_(__vc(__comp), typename __base::allocator_type(__a))"},
{"lineNum":" 1866","line":"        {"},
{"lineNum":" 1867","line":"            insert(__il.begin(), __il.end());"},
{"lineNum":" 1868","line":"        }"},
{"lineNum":" 1869","line":""},
{"lineNum":" 1870","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 1871","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1872","line":"    multimap(initializer_list<value_type> __il, const allocator_type& __a)"},
{"lineNum":" 1873","line":"        : multimap(__il, key_compare(), __a) {}"},
{"lineNum":" 1874","line":"#endif"},
{"lineNum":" 1875","line":""},
{"lineNum":" 1876","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1877","line":"    multimap& operator=(initializer_list<value_type> __il)"},
{"lineNum":" 1878","line":"        {"},
{"lineNum":" 1879","line":"            __tree_.__assign_multi(__il.begin(), __il.end());"},
{"lineNum":" 1880","line":"            return *this;"},
{"lineNum":" 1881","line":"        }"},
{"lineNum":" 1882","line":""},
{"lineNum":" 1883","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 1884","line":""},
{"lineNum":" 1885","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1886","line":"    explicit multimap(const allocator_type& __a)"},
{"lineNum":" 1887","line":"        : __tree_(typename __base::allocator_type(__a))"},
{"lineNum":" 1888","line":"        {"},
{"lineNum":" 1889","line":"        }"},
{"lineNum":" 1890","line":""},
{"lineNum":" 1891","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1892","line":"    multimap(const multimap& __m, const allocator_type& __a)"},
{"lineNum":" 1893","line":"        : __tree_(__m.__tree_.value_comp(), typename __base::allocator_type(__a))"},
{"lineNum":" 1894","line":"        {"},
{"lineNum":" 1895","line":"            insert(__m.begin(), __m.end());"},
{"lineNum":" 1896","line":"        }"},
{"lineNum":" 1897","line":""},
{"lineNum":" 1898","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1899","line":"    ~multimap() {"},
{"lineNum":" 1900","line":"        static_assert(sizeof(__diagnose_non_const_comparator<_Key, _Compare>()), \"\");"},
{"lineNum":" 1901","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":" 1902","line":""},
{"lineNum":" 1903","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1904","line":"          iterator begin() _NOEXCEPT {return __tree_.begin();}"},
{"lineNum":" 1905","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1906","line":"    const_iterator begin() const _NOEXCEPT {return __tree_.begin();}"},
{"lineNum":" 1907","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1908","line":"          iterator end() _NOEXCEPT {return __tree_.end();}"},
{"lineNum":" 1909","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1910","line":"    const_iterator end() const _NOEXCEPT {return __tree_.end();}"},
{"lineNum":" 1911","line":""},
{"lineNum":" 1912","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1913","line":"          reverse_iterator rbegin() _NOEXCEPT {return reverse_iterator(end());}"},
{"lineNum":" 1914","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1915","line":"    const_reverse_iterator rbegin() const _NOEXCEPT"},
{"lineNum":" 1916","line":"        {return const_reverse_iterator(end());}"},
{"lineNum":" 1917","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1918","line":"          reverse_iterator rend() _NOEXCEPT {return reverse_iterator(begin());}"},
{"lineNum":" 1919","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1920","line":"    const_reverse_iterator rend() const _NOEXCEPT"},
{"lineNum":" 1921","line":"        {return const_reverse_iterator(begin());}"},
{"lineNum":" 1922","line":""},
{"lineNum":" 1923","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1924","line":"    const_iterator cbegin()  const _NOEXCEPT {return begin();}"},
{"lineNum":" 1925","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1926","line":"    const_iterator cend() const _NOEXCEPT {return end();}"},
{"lineNum":" 1927","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1928","line":"    const_reverse_iterator crbegin() const _NOEXCEPT {return rbegin();}"},
{"lineNum":" 1929","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1930","line":"    const_reverse_iterator crend() const _NOEXCEPT {return rend();}"},
{"lineNum":" 1931","line":""},
{"lineNum":" 1932","line":"    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1933","line":"    bool empty() const _NOEXCEPT {return __tree_.size() == 0;}"},
{"lineNum":" 1934","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1935","line":"    size_type size() const _NOEXCEPT {return __tree_.size();}"},
{"lineNum":" 1936","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1937","line":"    size_type max_size() const _NOEXCEPT {return __tree_.max_size();}"},
{"lineNum":" 1938","line":""},
{"lineNum":" 1939","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1940","line":"    allocator_type get_allocator() const _NOEXCEPT {return allocator_type(__tree_.__alloc());}"},
{"lineNum":" 1941","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1942","line":"    key_compare    key_comp() const {return __tree_.value_comp().key_comp();}"},
{"lineNum":" 1943","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1944","line":"    value_compare  value_comp() const"},
{"lineNum":" 1945","line":"        {return value_compare(__tree_.value_comp().key_comp());}"},
{"lineNum":" 1946","line":""},
{"lineNum":" 1947","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1948","line":""},
{"lineNum":" 1949","line":"    template <class ..._Args>"},
{"lineNum":" 1950","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1951","line":"    iterator emplace(_Args&& ...__args) {"},
{"lineNum":" 1952","line":"        return __tree_.__emplace_multi(_VSTD::forward<_Args>(__args)...);","class":"linePartCov","hits":"13","order":"229","possible_hits":"22",},
{"lineNum":" 1953","line":"    }"},
{"lineNum":" 1954","line":""},
{"lineNum":" 1955","line":"    template <class ..._Args>"},
{"lineNum":" 1956","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1957","line":"    iterator emplace_hint(const_iterator __p, _Args&& ...__args) {"},
{"lineNum":" 1958","line":"        return __tree_.__emplace_hint_multi(__p.__i_, _VSTD::forward<_Args>(__args)...);"},
{"lineNum":" 1959","line":"    }"},
{"lineNum":" 1960","line":""},
{"lineNum":" 1961","line":"    template <class _Pp,"},
{"lineNum":" 1962","line":"              class = typename enable_if<is_constructible<value_type, _Pp>::value>::type>"},
{"lineNum":" 1963","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1964","line":"        iterator insert(_Pp&& __p)"},
{"lineNum":" 1965","line":"            {return __tree_.__insert_multi(_VSTD::forward<_Pp>(__p));}"},
{"lineNum":" 1966","line":""},
{"lineNum":" 1967","line":"    template <class _Pp,"},
{"lineNum":" 1968","line":"              class = typename enable_if<is_constructible<value_type, _Pp>::value>::type>"},
{"lineNum":" 1969","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1970","line":"        iterator insert(const_iterator __pos, _Pp&& __p)"},
{"lineNum":" 1971","line":"            {return __tree_.__insert_multi(__pos.__i_, _VSTD::forward<_Pp>(__p));}"},
{"lineNum":" 1972","line":""},
{"lineNum":" 1973","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1974","line":"    iterator insert(value_type&& __v)"},
{"lineNum":" 1975","line":"        {return __tree_.__insert_multi(_VSTD::move(__v));}"},
{"lineNum":" 1976","line":""},
{"lineNum":" 1977","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1978","line":"    iterator insert(const_iterator __p, value_type&& __v)"},
{"lineNum":" 1979","line":"        {return __tree_.__insert_multi(__p.__i_, _VSTD::move(__v));}"},
{"lineNum":" 1980","line":""},
{"lineNum":" 1981","line":""},
{"lineNum":" 1982","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1983","line":"    void insert(initializer_list<value_type> __il)"},
{"lineNum":" 1984","line":"        {insert(__il.begin(), __il.end());}"},
{"lineNum":" 1985","line":""},
{"lineNum":" 1986","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 1987","line":""},
{"lineNum":" 1988","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1989","line":"    iterator insert(const value_type& __v) {return __tree_.__insert_multi(__v);}"},
{"lineNum":" 1990","line":""},
{"lineNum":" 1991","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1992","line":"    iterator insert(const_iterator __p, const value_type& __v)"},
{"lineNum":" 1993","line":"            {return __tree_.__insert_multi(__p.__i_, __v);}"},
{"lineNum":" 1994","line":""},
{"lineNum":" 1995","line":"    template <class _InputIterator>"},
{"lineNum":" 1996","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1997","line":"        void insert(_InputIterator __f, _InputIterator __l)"},
{"lineNum":" 1998","line":"        {"},
{"lineNum":" 1999","line":"            for (const_iterator __e = cend(); __f != __l; ++__f)"},
{"lineNum":" 2000","line":"                __tree_.__insert_multi(__e.__i_, *__f);"},
{"lineNum":" 2001","line":"        }"},
{"lineNum":" 2002","line":""},
{"lineNum":" 2003","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2004","line":"    iterator erase(const_iterator __p) {return __tree_.erase(__p.__i_);}"},
{"lineNum":" 2005","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2006","line":"    iterator erase(iterator __p)       {return __tree_.erase(__p.__i_);}"},
{"lineNum":" 2007","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2008","line":"    size_type erase(const key_type& __k) {return __tree_.__erase_multi(__k);}"},
{"lineNum":" 2009","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2010","line":"    iterator  erase(const_iterator __f, const_iterator __l)"},
{"lineNum":" 2011","line":"        {return __tree_.erase(__f.__i_, __l.__i_);}"},
{"lineNum":" 2012","line":""},
{"lineNum":" 2013","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 2014","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2015","line":"    iterator insert(node_type&& __nh)"},
{"lineNum":" 2016","line":"    {"},
{"lineNum":" 2017","line":"        _LIBCPP_ASSERT(__nh.empty() || __nh.get_allocator() == get_allocator(),"},
{"lineNum":" 2018","line":"            \"node_type with incompatible allocator passed to multimap::insert()\");"},
{"lineNum":" 2019","line":"        return __tree_.template __node_handle_insert_multi<node_type>("},
{"lineNum":" 2020","line":"            _VSTD::move(__nh));"},
{"lineNum":" 2021","line":"    }"},
{"lineNum":" 2022","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2023","line":"    iterator insert(const_iterator __hint, node_type&& __nh)"},
{"lineNum":" 2024","line":"    {"},
{"lineNum":" 2025","line":"        _LIBCPP_ASSERT(__nh.empty() || __nh.get_allocator() == get_allocator(),"},
{"lineNum":" 2026","line":"            \"node_type with incompatible allocator passed to multimap::insert()\");"},
{"lineNum":" 2027","line":"        return __tree_.template __node_handle_insert_multi<node_type>("},
{"lineNum":" 2028","line":"            __hint.__i_, _VSTD::move(__nh));"},
{"lineNum":" 2029","line":"    }"},
{"lineNum":" 2030","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2031","line":"    node_type extract(key_type const& __key)"},
{"lineNum":" 2032","line":"    {"},
{"lineNum":" 2033","line":"        return __tree_.template __node_handle_extract<node_type>(__key);"},
{"lineNum":" 2034","line":"    }"},
{"lineNum":" 2035","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2036","line":"    node_type extract(const_iterator __it)"},
{"lineNum":" 2037","line":"    {"},
{"lineNum":" 2038","line":"        return __tree_.template __node_handle_extract<node_type>("},
{"lineNum":" 2039","line":"            __it.__i_);"},
{"lineNum":" 2040","line":"    }"},
{"lineNum":" 2041","line":"    template <class _Compare2>"},
{"lineNum":" 2042","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2043","line":"    void merge(multimap<key_type, mapped_type, _Compare2, allocator_type>& __source)"},
{"lineNum":" 2044","line":"    {"},
{"lineNum":" 2045","line":"        _LIBCPP_ASSERT(__source.get_allocator() == get_allocator(),"},
{"lineNum":" 2046","line":"                       \"merging container with incompatible allocator\");"},
{"lineNum":" 2047","line":"        return __tree_.__node_handle_merge_multi(__source.__tree_);"},
{"lineNum":" 2048","line":"    }"},
{"lineNum":" 2049","line":"    template <class _Compare2>"},
{"lineNum":" 2050","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2051","line":"    void merge(multimap<key_type, mapped_type, _Compare2, allocator_type>&& __source)"},
{"lineNum":" 2052","line":"    {"},
{"lineNum":" 2053","line":"        _LIBCPP_ASSERT(__source.get_allocator() == get_allocator(),"},
{"lineNum":" 2054","line":"                       \"merging container with incompatible allocator\");"},
{"lineNum":" 2055","line":"        return __tree_.__node_handle_merge_multi(__source.__tree_);"},
{"lineNum":" 2056","line":"    }"},
{"lineNum":" 2057","line":"    template <class _Compare2>"},
{"lineNum":" 2058","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2059","line":"    void merge(map<key_type, mapped_type, _Compare2, allocator_type>& __source)"},
{"lineNum":" 2060","line":"    {"},
{"lineNum":" 2061","line":"        _LIBCPP_ASSERT(__source.get_allocator() == get_allocator(),"},
{"lineNum":" 2062","line":"                       \"merging container with incompatible allocator\");"},
{"lineNum":" 2063","line":"        return __tree_.__node_handle_merge_multi(__source.__tree_);"},
{"lineNum":" 2064","line":"    }"},
{"lineNum":" 2065","line":"    template <class _Compare2>"},
{"lineNum":" 2066","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2067","line":"    void merge(map<key_type, mapped_type, _Compare2, allocator_type>&& __source)"},
{"lineNum":" 2068","line":"    {"},
{"lineNum":" 2069","line":"        _LIBCPP_ASSERT(__source.get_allocator() == get_allocator(),"},
{"lineNum":" 2070","line":"                       \"merging container with incompatible allocator\");"},
{"lineNum":" 2071","line":"        return __tree_.__node_handle_merge_multi(__source.__tree_);"},
{"lineNum":" 2072","line":"    }"},
{"lineNum":" 2073","line":"#endif"},
{"lineNum":" 2074","line":""},
{"lineNum":" 2075","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2076","line":"    void clear() _NOEXCEPT {__tree_.clear();}"},
{"lineNum":" 2077","line":""},
{"lineNum":" 2078","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2079","line":"    void swap(multimap& __m)"},
{"lineNum":" 2080","line":"        _NOEXCEPT_(__is_nothrow_swappable<__base>::value)"},
{"lineNum":" 2081","line":"        {__tree_.swap(__m.__tree_);}"},
{"lineNum":" 2082","line":""},
{"lineNum":" 2083","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2084","line":"    iterator find(const key_type& __k)             {return __tree_.find(__k);}"},
{"lineNum":" 2085","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2086","line":"    const_iterator find(const key_type& __k) const {return __tree_.find(__k);}"},
{"lineNum":" 2087","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 2088","line":"    template <typename _K2>"},
{"lineNum":" 2089","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2090","line":"    typename enable_if<__is_transparent<_Compare, _K2>::value,iterator>::type"},
{"lineNum":" 2091","line":"    find(const _K2& __k)                           {return __tree_.find(__k);}"},
{"lineNum":" 2092","line":"    template <typename _K2>"},
{"lineNum":" 2093","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2094","line":"    typename enable_if<__is_transparent<_Compare, _K2>::value,const_iterator>::type"},
{"lineNum":" 2095","line":"    find(const _K2& __k) const                     {return __tree_.find(__k);}"},
{"lineNum":" 2096","line":"#endif"},
{"lineNum":" 2097","line":""},
{"lineNum":" 2098","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2099","line":"    size_type      count(const key_type& __k) const"},
{"lineNum":" 2100","line":"        {return __tree_.__count_multi(__k);}"},
{"lineNum":" 2101","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 2102","line":"    template <typename _K2>"},
{"lineNum":" 2103","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2104","line":"    typename enable_if<__is_transparent<_Compare, _K2>::value,size_type>::type"},
{"lineNum":" 2105","line":"    count(const _K2& __k) const {return __tree_.__count_multi(__k);}"},
{"lineNum":" 2106","line":"#endif"},
{"lineNum":" 2107","line":""},
{"lineNum":" 2108","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":" 2109","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2110","line":"    bool contains(const key_type& __k) const {return find(__k) != end();}"},
{"lineNum":" 2111","line":"    template <typename _K2>"},
{"lineNum":" 2112","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2113","line":"    typename enable_if<__is_transparent<_Compare, _K2>::value, bool>::type"},
{"lineNum":" 2114","line":"    contains(const _K2& __k) const { return find(__k) != end(); }"},
{"lineNum":" 2115","line":"#endif // _LIBCPP_STD_VER > 17"},
{"lineNum":" 2116","line":""},
{"lineNum":" 2117","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2118","line":"    iterator lower_bound(const key_type& __k)"},
{"lineNum":" 2119","line":"        {return __tree_.lower_bound(__k);}"},
{"lineNum":" 2120","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2121","line":"    const_iterator lower_bound(const key_type& __k) const"},
{"lineNum":" 2122","line":"            {return __tree_.lower_bound(__k);}"},
{"lineNum":" 2123","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 2124","line":"    template <typename _K2>"},
{"lineNum":" 2125","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2126","line":"    typename enable_if<__is_transparent<_Compare, _K2>::value,iterator>::type"},
{"lineNum":" 2127","line":"    lower_bound(const _K2& __k)       {return __tree_.lower_bound(__k);}"},
{"lineNum":" 2128","line":""},
{"lineNum":" 2129","line":"    template <typename _K2>"},
{"lineNum":" 2130","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2131","line":"    typename enable_if<__is_transparent<_Compare, _K2>::value,const_iterator>::type"},
{"lineNum":" 2132","line":"    lower_bound(const _K2& __k) const {return __tree_.lower_bound(__k);}"},
{"lineNum":" 2133","line":"#endif"},
{"lineNum":" 2134","line":""},
{"lineNum":" 2135","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2136","line":"    iterator upper_bound(const key_type& __k)"},
{"lineNum":" 2137","line":"            {return __tree_.upper_bound(__k);}"},
{"lineNum":" 2138","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2139","line":"    const_iterator upper_bound(const key_type& __k) const"},
{"lineNum":" 2140","line":"            {return __tree_.upper_bound(__k);}"},
{"lineNum":" 2141","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 2142","line":"    template <typename _K2>"},
{"lineNum":" 2143","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2144","line":"    typename enable_if<__is_transparent<_Compare, _K2>::value,iterator>::type"},
{"lineNum":" 2145","line":"    upper_bound(const _K2& __k)       {return __tree_.upper_bound(__k);}"},
{"lineNum":" 2146","line":"    template <typename _K2>"},
{"lineNum":" 2147","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2148","line":"    typename enable_if<__is_transparent<_Compare, _K2>::value,const_iterator>::type"},
{"lineNum":" 2149","line":"    upper_bound(const _K2& __k) const {return __tree_.upper_bound(__k);}"},
{"lineNum":" 2150","line":"#endif"},
{"lineNum":" 2151","line":""},
{"lineNum":" 2152","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2153","line":"    pair<iterator,iterator>             equal_range(const key_type& __k)"},
{"lineNum":" 2154","line":"            {return __tree_.__equal_range_multi(__k);}","class":"lineCov","hits":"11","order":"343","possible_hits":"11",},
{"lineNum":" 2155","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2156","line":"    pair<const_iterator,const_iterator> equal_range(const key_type& __k) const"},
{"lineNum":" 2157","line":"            {return __tree_.__equal_range_multi(__k);}"},
{"lineNum":" 2158","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 2159","line":"    template <typename _K2>"},
{"lineNum":" 2160","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2161","line":"    typename enable_if<__is_transparent<_Compare, _K2>::value,pair<iterator,iterator>>::type"},
{"lineNum":" 2162","line":"    equal_range(const _K2& __k)       {return __tree_.__equal_range_multi(__k);}"},
{"lineNum":" 2163","line":"    template <typename _K2>"},
{"lineNum":" 2164","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2165","line":"    typename enable_if<__is_transparent<_Compare, _K2>::value,pair<const_iterator,const_iterator>>::type"},
{"lineNum":" 2166","line":"    equal_range(const _K2& __k) const {return __tree_.__equal_range_multi(__k);}"},
{"lineNum":" 2167","line":"#endif"},
{"lineNum":" 2168","line":""},
{"lineNum":" 2169","line":"private:"},
{"lineNum":" 2170","line":"    typedef typename __base::__node                    __node;"},
{"lineNum":" 2171","line":"    typedef typename __base::__node_allocator          __node_allocator;"},
{"lineNum":" 2172","line":"    typedef typename __base::__node_pointer            __node_pointer;"},
{"lineNum":" 2173","line":""},
{"lineNum":" 2174","line":"    typedef __map_node_destructor<__node_allocator> _Dp;"},
{"lineNum":" 2175","line":"    typedef unique_ptr<__node, _Dp> __node_holder;"},
{"lineNum":" 2176","line":"};"},
{"lineNum":" 2177","line":""},
{"lineNum":" 2178","line":"#ifndef _LIBCPP_HAS_NO_DEDUCTION_GUIDES"},
{"lineNum":" 2179","line":"template<class _InputIterator, class _Compare = less<__iter_key_type<_InputIterator>>,"},
{"lineNum":" 2180","line":"         class _Allocator = allocator<__iter_to_alloc_type<_InputIterator>>,"},
{"lineNum":" 2181","line":"         class = _EnableIf<!__is_allocator<_Compare>::value, void>,"},
{"lineNum":" 2182","line":"         class = _EnableIf<__is_allocator<_Allocator>::value, void>>"},
{"lineNum":" 2183","line":"multimap(_InputIterator, _InputIterator, _Compare = _Compare(), _Allocator = _Allocator())"},
{"lineNum":" 2184","line":"  -> multimap<__iter_key_type<_InputIterator>, __iter_mapped_type<_InputIterator>, _Compare, _Allocator>;"},
{"lineNum":" 2185","line":""},
{"lineNum":" 2186","line":"template<class _Key, class _Tp, class _Compare = less<remove_const_t<_Key>>,"},
{"lineNum":" 2187","line":"         class _Allocator = allocator<pair<const _Key, _Tp>>,"},
{"lineNum":" 2188","line":"         class = _EnableIf<!__is_allocator<_Compare>::value, void>,"},
{"lineNum":" 2189","line":"         class = _EnableIf<__is_allocator<_Allocator>::value, void>>"},
{"lineNum":" 2190","line":"multimap(initializer_list<pair<_Key, _Tp>>, _Compare = _Compare(), _Allocator = _Allocator())"},
{"lineNum":" 2191","line":"  -> multimap<remove_const_t<_Key>, _Tp, _Compare, _Allocator>;"},
{"lineNum":" 2192","line":""},
{"lineNum":" 2193","line":"template<class _InputIterator, class _Allocator,"},
{"lineNum":" 2194","line":"         class = _EnableIf<__is_allocator<_Allocator>::value, void>>"},
{"lineNum":" 2195","line":"multimap(_InputIterator, _InputIterator, _Allocator)"},
{"lineNum":" 2196","line":"  -> multimap<__iter_key_type<_InputIterator>, __iter_mapped_type<_InputIterator>,"},
{"lineNum":" 2197","line":"         less<__iter_key_type<_InputIterator>>, _Allocator>;"},
{"lineNum":" 2198","line":""},
{"lineNum":" 2199","line":"template<class _Key, class _Tp, class _Allocator,"},
{"lineNum":" 2200","line":"         class = _EnableIf<__is_allocator<_Allocator>::value, void>>"},
{"lineNum":" 2201","line":"multimap(initializer_list<pair<_Key, _Tp>>, _Allocator)"},
{"lineNum":" 2202","line":"  -> multimap<remove_const_t<_Key>, _Tp, less<remove_const_t<_Key>>, _Allocator>;"},
{"lineNum":" 2203","line":"#endif"},
{"lineNum":" 2204","line":""},
{"lineNum":" 2205","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 2206","line":"template <class _Key, class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2207","line":"multimap<_Key, _Tp, _Compare, _Allocator>::multimap(multimap&& __m, const allocator_type& __a)"},
{"lineNum":" 2208","line":"    : __tree_(_VSTD::move(__m.__tree_), typename __base::allocator_type(__a))"},
{"lineNum":" 2209","line":"{"},
{"lineNum":" 2210","line":"    if (__a != __m.get_allocator())"},
{"lineNum":" 2211","line":"    {"},
{"lineNum":" 2212","line":"        const_iterator __e = cend();"},
{"lineNum":" 2213","line":"        while (!__m.empty())"},
{"lineNum":" 2214","line":"            __tree_.__insert_multi(__e.__i_,"},
{"lineNum":" 2215","line":"                    _VSTD::move(__m.__tree_.remove(__m.begin().__i_)->__value_.__move()));"},
{"lineNum":" 2216","line":"    }"},
{"lineNum":" 2217","line":"}"},
{"lineNum":" 2218","line":"#endif"},
{"lineNum":" 2219","line":""},
{"lineNum":" 2220","line":"template <class _Key, class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2221","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2222","line":"bool"},
{"lineNum":" 2223","line":"operator==(const multimap<_Key, _Tp, _Compare, _Allocator>& __x,"},
{"lineNum":" 2224","line":"           const multimap<_Key, _Tp, _Compare, _Allocator>& __y)"},
{"lineNum":" 2225","line":"{"},
{"lineNum":" 2226","line":"    return __x.size() == __y.size() && _VSTD::equal(__x.begin(), __x.end(), __y.begin());"},
{"lineNum":" 2227","line":"}"},
{"lineNum":" 2228","line":""},
{"lineNum":" 2229","line":"template <class _Key, class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2230","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2231","line":"bool"},
{"lineNum":" 2232","line":"operator< (const multimap<_Key, _Tp, _Compare, _Allocator>& __x,"},
{"lineNum":" 2233","line":"           const multimap<_Key, _Tp, _Compare, _Allocator>& __y)"},
{"lineNum":" 2234","line":"{"},
{"lineNum":" 2235","line":"    return _VSTD::lexicographical_compare(__x.begin(), __x.end(), __y.begin(), __y.end());"},
{"lineNum":" 2236","line":"}"},
{"lineNum":" 2237","line":""},
{"lineNum":" 2238","line":"template <class _Key, class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2239","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2240","line":"bool"},
{"lineNum":" 2241","line":"operator!=(const multimap<_Key, _Tp, _Compare, _Allocator>& __x,"},
{"lineNum":" 2242","line":"           const multimap<_Key, _Tp, _Compare, _Allocator>& __y)"},
{"lineNum":" 2243","line":"{"},
{"lineNum":" 2244","line":"    return !(__x == __y);"},
{"lineNum":" 2245","line":"}"},
{"lineNum":" 2246","line":""},
{"lineNum":" 2247","line":"template <class _Key, class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2248","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2249","line":"bool"},
{"lineNum":" 2250","line":"operator> (const multimap<_Key, _Tp, _Compare, _Allocator>& __x,"},
{"lineNum":" 2251","line":"           const multimap<_Key, _Tp, _Compare, _Allocator>& __y)"},
{"lineNum":" 2252","line":"{"},
{"lineNum":" 2253","line":"    return __y < __x;"},
{"lineNum":" 2254","line":"}"},
{"lineNum":" 2255","line":""},
{"lineNum":" 2256","line":"template <class _Key, class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2257","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2258","line":"bool"},
{"lineNum":" 2259","line":"operator>=(const multimap<_Key, _Tp, _Compare, _Allocator>& __x,"},
{"lineNum":" 2260","line":"           const multimap<_Key, _Tp, _Compare, _Allocator>& __y)"},
{"lineNum":" 2261","line":"{"},
{"lineNum":" 2262","line":"    return !(__x < __y);"},
{"lineNum":" 2263","line":"}"},
{"lineNum":" 2264","line":""},
{"lineNum":" 2265","line":"template <class _Key, class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2266","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2267","line":"bool"},
{"lineNum":" 2268","line":"operator<=(const multimap<_Key, _Tp, _Compare, _Allocator>& __x,"},
{"lineNum":" 2269","line":"           const multimap<_Key, _Tp, _Compare, _Allocator>& __y)"},
{"lineNum":" 2270","line":"{"},
{"lineNum":" 2271","line":"    return !(__y < __x);"},
{"lineNum":" 2272","line":"}"},
{"lineNum":" 2273","line":""},
{"lineNum":" 2274","line":"template <class _Key, class _Tp, class _Compare, class _Allocator>"},
{"lineNum":" 2275","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2276","line":"void"},
{"lineNum":" 2277","line":"swap(multimap<_Key, _Tp, _Compare, _Allocator>& __x,"},
{"lineNum":" 2278","line":"     multimap<_Key, _Tp, _Compare, _Allocator>& __y)"},
{"lineNum":" 2279","line":"    _NOEXCEPT_(_NOEXCEPT_(__x.swap(__y)))"},
{"lineNum":" 2280","line":"{"},
{"lineNum":" 2281","line":"    __x.swap(__y);"},
{"lineNum":" 2282","line":"}"},
{"lineNum":" 2283","line":""},
{"lineNum":" 2284","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":" 2285","line":"template <class _Key, class _Tp, class _Compare, class _Allocator,"},
{"lineNum":" 2286","line":"          class _Predicate>"},
{"lineNum":" 2287","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2288","line":"    typename multimap<_Key, _Tp, _Compare, _Allocator>::size_type"},
{"lineNum":" 2289","line":"    erase_if(multimap<_Key, _Tp, _Compare, _Allocator>& __c,"},
{"lineNum":" 2290","line":"             _Predicate __pred) {"},
{"lineNum":" 2291","line":"  return _VSTD::__libcpp_erase_if_container(__c, __pred);"},
{"lineNum":" 2292","line":"}"},
{"lineNum":" 2293","line":"#endif"},
{"lineNum":" 2294","line":""},
{"lineNum":" 2295","line":"_LIBCPP_END_NAMESPACE_STD"},
{"lineNum":" 2296","line":""},
{"lineNum":" 2297","line":"#endif // _LIBCPP_MAP"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 24, "covered" : 5,};
var merged_data = [];
