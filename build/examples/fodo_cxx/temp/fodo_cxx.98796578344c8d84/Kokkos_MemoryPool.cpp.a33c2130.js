var data = {lines:[
{"lineNum":"    1","line":"/*"},
{"lineNum":"    2","line":"//@HEADER"},
{"lineNum":"    3","line":"// ************************************************************************"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"//                        Kokkos v. 3.0"},
{"lineNum":"    6","line":"//       Copyright (2020) National Technology & Engineering"},
{"lineNum":"    7","line":"//               Solutions of Sandia, LLC (NTESS)."},
{"lineNum":"    8","line":"//"},
{"lineNum":"    9","line":"// Under the terms of Contract DE-NA0003525 with NTESS,"},
{"lineNum":"   10","line":"// the U.S. Government retains certain rights in this software."},
{"lineNum":"   11","line":"//"},
{"lineNum":"   12","line":"// Redistribution and use in source and binary forms, with or without"},
{"lineNum":"   13","line":"// modification, are permitted provided that the following conditions are"},
{"lineNum":"   14","line":"// met:"},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"// 1. Redistributions of source code must retain the above copyright"},
{"lineNum":"   17","line":"// notice, this list of conditions and the following disclaimer."},
{"lineNum":"   18","line":"//"},
{"lineNum":"   19","line":"// 2. Redistributions in binary form must reproduce the above copyright"},
{"lineNum":"   20","line":"// notice, this list of conditions and the following disclaimer in the"},
{"lineNum":"   21","line":"// documentation and/or other materials provided with the distribution."},
{"lineNum":"   22","line":"//"},
{"lineNum":"   23","line":"// 3. Neither the name of the Corporation nor the names of the"},
{"lineNum":"   24","line":"// contributors may be used to endorse or promote products derived from"},
{"lineNum":"   25","line":"// this software without specific prior written permission."},
{"lineNum":"   26","line":"//"},
{"lineNum":"   27","line":"// THIS SOFTWARE IS PROVIDED BY NTESS \"AS IS\" AND ANY"},
{"lineNum":"   28","line":"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"},
{"lineNum":"   29","line":"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR"},
{"lineNum":"   30","line":"// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NTESS OR THE"},
{"lineNum":"   31","line":"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,"},
{"lineNum":"   32","line":"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,"},
{"lineNum":"   33","line":"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR"},
{"lineNum":"   34","line":"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF"},
{"lineNum":"   35","line":"// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING"},
{"lineNum":"   36","line":"// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"},
{"lineNum":"   37","line":"// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   38","line":"//"},
{"lineNum":"   39","line":"// Questions? Contact Christian R. Trott (crtrott@sandia.gov)"},
{"lineNum":"   40","line":"//"},
{"lineNum":"   41","line":"// ************************************************************************"},
{"lineNum":"   42","line":"//@HEADER"},
{"lineNum":"   43","line":"*/"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"#include <impl/Kokkos_Error.hpp>"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"#include <ostream>"},
{"lineNum":"   48","line":"#include <sstream>"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"//----------------------------------------------------------------------------"},
{"lineNum":"   51","line":"//----------------------------------------------------------------------------"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"namespace Kokkos {"},
{"lineNum":"   54","line":"namespace Impl {"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"/* Verify size constraints:"},
{"lineNum":"   57","line":" *   min_block_alloc_size <= max_block_alloc_size"},
{"lineNum":"   58","line":" *   max_block_alloc_size <= min_superblock_size"},
{"lineNum":"   59","line":" *   min_superblock_size  <= max_superblock_size"},
{"lineNum":"   60","line":" *   min_superblock_size  <= min_total_alloc_size"},
{"lineNum":"   61","line":" *   min_superblock_size  <= min_block_alloc_size *"},
{"lineNum":"   62","line":" *                           max_block_per_superblock"},
{"lineNum":"   63","line":" */"},
{"lineNum":"   64","line":"void memory_pool_bounds_verification(size_t min_block_alloc_size,"},
{"lineNum":"   65","line":"                                     size_t max_block_alloc_size,"},
{"lineNum":"   66","line":"                                     size_t min_superblock_size,"},
{"lineNum":"   67","line":"                                     size_t max_superblock_size,"},
{"lineNum":"   68","line":"                                     size_t max_block_per_superblock,"},
{"lineNum":"   69","line":"                                     size_t min_total_alloc_size) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   70","line":"  const size_t max_superblock = min_block_alloc_size * max_block_per_superblock;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"  if ((size_t(max_superblock_size) < min_superblock_size) ||","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   73","line":"      (min_total_alloc_size < min_superblock_size) ||"},
{"lineNum":"   74","line":"      (max_superblock < min_superblock_size) ||"},
{"lineNum":"   75","line":"      (min_superblock_size < max_block_alloc_size) ||"},
{"lineNum":"   76","line":"      (max_block_alloc_size < min_block_alloc_size)) {"},
{"lineNum":"   77","line":"    std::ostringstream msg;"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"    msg << \"Kokkos::MemoryPool size constraint violation\";"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"    if (size_t(max_superblock_size) < min_superblock_size) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   82","line":"      msg << \" : max_superblock_size(\" << max_superblock_size","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   83","line":"          << \") < min_superblock_size(\" << min_superblock_size << \")\";","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   84","line":"    }"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"    if (min_total_alloc_size < min_superblock_size) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   87","line":"      msg << \" : min_total_alloc_size(\" << min_total_alloc_size","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   88","line":"          << \") < min_superblock_size(\" << min_superblock_size << \")\";","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   89","line":"    }"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"    if (max_superblock < min_superblock_size) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   92","line":"      msg << \" : max_superblock(\" << max_superblock","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   93","line":"          << \") < min_superblock_size(\" << min_superblock_size << \")\";","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   94","line":"    }"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"    if (min_superblock_size < max_block_alloc_size) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   97","line":"      msg << \" : min_superblock_size(\" << min_superblock_size","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   98","line":"          << \") < max_block_alloc_size(\" << max_block_alloc_size << \")\";","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   99","line":"    }"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"    if (max_block_alloc_size < min_block_alloc_size) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  102","line":"      msg << \" : max_block_alloc_size(\" << max_block_alloc_size","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  103","line":"          << \") < min_block_alloc_size(\" << min_block_alloc_size << \")\";","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  104","line":"    }"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"    Kokkos::Impl::throw_runtime_exception(msg.str());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  107","line":"  }"},
{"lineNum":"  108","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"// This has way too many parameters, but it is entirely for moving the iostream"},
{"lineNum":"  111","line":"// inclusion out of the header file with as few changes as possible"},
{"lineNum":"  112","line":"void _print_memory_pool_state(std::ostream& s, uint32_t const* sb_state_ptr,"},
{"lineNum":"  113","line":"                              int32_t sb_count, uint32_t sb_size_lg2,"},
{"lineNum":"  114","line":"                              uint32_t sb_state_size, uint32_t state_shift,"},
{"lineNum":"  115","line":"                              uint32_t state_used_mask) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  116","line":"  s << \"pool_size(\" << (size_t(sb_count) << sb_size_lg2) << \")\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  117","line":"    << \" superblock_size(\" << (1LU << sb_size_lg2) << \")\" << std::endl;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"  for (int32_t i = 0; i < sb_count; ++i, sb_state_ptr += sb_state_size) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  120","line":"    if (*sb_state_ptr) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  121","line":"      const uint32_t block_count_lg2 = (*sb_state_ptr) >> state_shift;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  122","line":"      const uint32_t block_size_lg2  = sb_size_lg2 - block_count_lg2;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  123","line":"      const uint32_t block_count     = 1u << block_count_lg2;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  124","line":"      const uint32_t block_used      = (*sb_state_ptr) & state_used_mask;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"      s << \"Superblock[ \" << i << \" / \" << sb_count << \" ] {\"","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  127","line":"        << \" block_size(\" << (1 << block_size_lg2) << \")\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  128","line":"        << \" block_count( \" << block_used << \" / \" << block_count << \" )\"","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  129","line":"        << std::endl;"},
{"lineNum":"  130","line":"    }"},
{"lineNum":"  131","line":"  }"},
{"lineNum":"  132","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"}  // namespace Impl"},
{"lineNum":"  135","line":"}  // namespace Kokkos"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 33, "covered" : 0,};
var merged_data = [];
