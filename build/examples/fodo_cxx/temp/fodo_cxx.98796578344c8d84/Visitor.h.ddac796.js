var data = {lines:[
{"lineNum":"    1","line":"// This file is part of Eigen, a lightweight C++ template library"},
{"lineNum":"    2","line":"// for linear algebra."},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Copyright (C) 2008 Gael Guennebaud <gael.guennebaud@inria.fr>"},
{"lineNum":"    5","line":"//"},
{"lineNum":"    6","line":"// This Source Code Form is subject to the terms of the Mozilla"},
{"lineNum":"    7","line":"// Public License v. 2.0. If a copy of the MPL was not distributed"},
{"lineNum":"    8","line":"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/."},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef EIGEN_VISITOR_H"},
{"lineNum":"   11","line":"#define EIGEN_VISITOR_H"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"#include \"./InternalHeaderCheck.h\""},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"namespace Eigen {"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"namespace internal {"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"template<typename Visitor, typename Derived, int UnrollCount>"},
{"lineNum":"   20","line":"struct visitor_impl"},
{"lineNum":"   21","line":"{"},
{"lineNum":"   22","line":"  enum {"},
{"lineNum":"   23","line":"    col = (UnrollCount-1) / Derived::RowsAtCompileTime,"},
{"lineNum":"   24","line":"    row = (UnrollCount-1) % Derived::RowsAtCompileTime"},
{"lineNum":"   25","line":"  };"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"   28","line":"  static inline void run(const Derived &mat, Visitor& visitor)"},
{"lineNum":"   29","line":"  {"},
{"lineNum":"   30","line":"    visitor_impl<Visitor, Derived, UnrollCount-1>::run(mat, visitor);"},
{"lineNum":"   31","line":"    visitor(mat.coeff(row, col), row, col);"},
{"lineNum":"   32","line":"  }"},
{"lineNum":"   33","line":"};"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"template<typename Visitor, typename Derived>"},
{"lineNum":"   36","line":"struct visitor_impl<Visitor, Derived, 1>"},
{"lineNum":"   37","line":"{"},
{"lineNum":"   38","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"   39","line":"  static inline void run(const Derived &mat, Visitor& visitor)"},
{"lineNum":"   40","line":"  {"},
{"lineNum":"   41","line":"    return visitor.init(mat.coeff(0, 0), 0, 0);"},
{"lineNum":"   42","line":"  }"},
{"lineNum":"   43","line":"};"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"// This specialization enables visitors on empty matrices at compile-time"},
{"lineNum":"   46","line":"template<typename Visitor, typename Derived>"},
{"lineNum":"   47","line":"struct visitor_impl<Visitor, Derived, 0> {"},
{"lineNum":"   48","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"   49","line":"  static inline void run(const Derived &/*mat*/, Visitor& /*visitor*/)"},
{"lineNum":"   50","line":"  {}"},
{"lineNum":"   51","line":"};"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"template<typename Visitor, typename Derived>"},
{"lineNum":"   54","line":"struct visitor_impl<Visitor, Derived, Dynamic>"},
{"lineNum":"   55","line":"{"},
{"lineNum":"   56","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"   57","line":"  static inline void run(const Derived& mat, Visitor& visitor)"},
{"lineNum":"   58","line":"  {"},
{"lineNum":"   59","line":"    visitor.init(mat.coeff(0,0), 0, 0);"},
{"lineNum":"   60","line":"    for(Index i = 1; i < mat.rows(); ++i)","class":"lineNoCov","hits":"0","possible_hits":"23",},
{"lineNum":"   61","line":"      visitor(mat.coeff(i, 0), i, 0);"},
{"lineNum":"   62","line":"    for(Index j = 1; j < mat.cols(); ++j)"},
{"lineNum":"   63","line":"      for(Index i = 0; i < mat.rows(); ++i)"},
{"lineNum":"   64","line":"        visitor(mat.coeff(i, j), i, j);"},
{"lineNum":"   65","line":"  }"},
{"lineNum":"   66","line":"};"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"// evaluator adaptor"},
{"lineNum":"   69","line":"template<typename XprType>"},
{"lineNum":"   70","line":"class visitor_evaluator"},
{"lineNum":"   71","line":"{"},
{"lineNum":"   72","line":"public:"},
{"lineNum":"   73","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"   74","line":"  explicit visitor_evaluator(const XprType &xpr) : m_evaluator(xpr), m_xpr(xpr) {}"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"  typedef typename XprType::Scalar Scalar;"},
{"lineNum":"   77","line":"  typedef typename XprType::CoeffReturnType CoeffReturnType;"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"  enum {"},
{"lineNum":"   80","line":"    RowsAtCompileTime = XprType::RowsAtCompileTime,"},
{"lineNum":"   81","line":"    CoeffReadCost = internal::evaluator<XprType>::CoeffReadCost"},
{"lineNum":"   82","line":"  };"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index rows() const EIGEN_NOEXCEPT { return m_xpr.rows(); }"},
{"lineNum":"   85","line":"  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index cols() const EIGEN_NOEXCEPT { return m_xpr.cols(); }"},
{"lineNum":"   86","line":"  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index size() const EIGEN_NOEXCEPT { return m_xpr.size(); }"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"  EIGEN_DEVICE_FUNC CoeffReturnType coeff(Index row, Index col) const"},
{"lineNum":"   89","line":"  { return m_evaluator.coeff(row, col); }"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"protected:"},
{"lineNum":"   92","line":"  internal::evaluator<XprType> m_evaluator;"},
{"lineNum":"   93","line":"  const XprType &m_xpr;"},
{"lineNum":"   94","line":"};"},
{"lineNum":"   95","line":"} // end namespace internal"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"/** Applies the visitor \\a visitor to the whole coefficients of the matrix or vector."},
{"lineNum":"   98","line":"  *"},
{"lineNum":"   99","line":"  * The template parameter \\a Visitor is the type of the visitor and provides the following interface:"},
{"lineNum":"  100","line":"  * \\code"},
{"lineNum":"  101","line":"  * struct MyVisitor {"},
{"lineNum":"  102","line":"  *   // called for the first coefficient"},
{"lineNum":"  103","line":"  *   void init(const Scalar& value, Index i, Index j);"},
{"lineNum":"  104","line":"  *   // called for all other coefficients"},
{"lineNum":"  105","line":"  *   void operator() (const Scalar& value, Index i, Index j);"},
{"lineNum":"  106","line":"  * };"},
{"lineNum":"  107","line":"  * \\endcode"},
{"lineNum":"  108","line":"  *"},
{"lineNum":"  109","line":"  * \\note compared to one or two \\em for \\em loops, visitors offer automatic"},
{"lineNum":"  110","line":"  * unrolling for small fixed size matrix."},
{"lineNum":"  111","line":"  *"},
{"lineNum":"  112","line":"  * \\note if the matrix is empty, then the visitor is left unchanged."},
{"lineNum":"  113","line":"  *"},
{"lineNum":"  114","line":"  * \\sa minCoeff(Index*,Index*), maxCoeff(Index*,Index*), DenseBase::redux()"},
{"lineNum":"  115","line":"  */"},
{"lineNum":"  116","line":"template<typename Derived>"},
{"lineNum":"  117","line":"template<typename Visitor>"},
{"lineNum":"  118","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":"  119","line":"void DenseBase<Derived>::visit(Visitor& visitor) const"},
{"lineNum":"  120","line":"{"},
{"lineNum":"  121","line":"  if(size()==0)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  122","line":"    return;"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"  typedef typename internal::visitor_evaluator<Derived> ThisEvaluator;"},
{"lineNum":"  125","line":"  ThisEvaluator thisEval(derived());"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"  enum {"},
{"lineNum":"  128","line":"    unroll =  SizeAtCompileTime != Dynamic"},
{"lineNum":"  129","line":"           && SizeAtCompileTime * int(ThisEvaluator::CoeffReadCost) + (SizeAtCompileTime-1) * int(internal::functor_traits<Visitor>::Cost) <= EIGEN_UNROLLING_LIMIT"},
{"lineNum":"  130","line":"  };"},
{"lineNum":"  131","line":"  return internal::visitor_impl<Visitor, ThisEvaluator, unroll ? int(SizeAtCompileTime) : Dynamic>::run(thisEval, visitor);"},
{"lineNum":"  132","line":"}"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"namespace internal {"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"/** \\internal"},
{"lineNum":"  137","line":"  * \\brief Base class to implement min and max visitors"},
{"lineNum":"  138","line":"  */"},
{"lineNum":"  139","line":"template <typename Derived>"},
{"lineNum":"  140","line":"struct coeff_visitor"},
{"lineNum":"  141","line":"{"},
{"lineNum":"  142","line":"  // default initialization to avoid countless invalid maybe-uninitialized warnings by gcc"},
{"lineNum":"  143","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  144","line":"  coeff_visitor() : row(-1), col(-1), res(0) {}"},
{"lineNum":"  145","line":"  typedef typename Derived::Scalar Scalar;"},
{"lineNum":"  146","line":"  Index row, col;"},
{"lineNum":"  147","line":"  Scalar res;"},
{"lineNum":"  148","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  149","line":"  inline void init(const Scalar& value, Index i, Index j)"},
{"lineNum":"  150","line":"  {"},
{"lineNum":"  151","line":"    res = value;"},
{"lineNum":"  152","line":"    row = i;"},
{"lineNum":"  153","line":"    col = j;"},
{"lineNum":"  154","line":"  }"},
{"lineNum":"  155","line":"};"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"/** \\internal"},
{"lineNum":"  158","line":"  * \\brief Visitor computing the min coefficient with its value and coordinates"},
{"lineNum":"  159","line":"  *"},
{"lineNum":"  160","line":"  * \\sa DenseBase::minCoeff(Index*, Index*)"},
{"lineNum":"  161","line":"  */"},
{"lineNum":"  162","line":"template <typename Derived, int NaNPropagation>"},
{"lineNum":"  163","line":"struct min_coeff_visitor : coeff_visitor<Derived>"},
{"lineNum":"  164","line":"{"},
{"lineNum":"  165","line":"  typedef typename Derived::Scalar Scalar;"},
{"lineNum":"  166","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  167","line":"  void operator() (const Scalar& value, Index i, Index j)"},
{"lineNum":"  168","line":"  {"},
{"lineNum":"  169","line":"    if(value < this->res)"},
{"lineNum":"  170","line":"    {"},
{"lineNum":"  171","line":"      this->res = value;"},
{"lineNum":"  172","line":"      this->row = i;"},
{"lineNum":"  173","line":"      this->col = j;"},
{"lineNum":"  174","line":"    }"},
{"lineNum":"  175","line":"  }"},
{"lineNum":"  176","line":"};"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"template <typename Derived>"},
{"lineNum":"  179","line":"struct min_coeff_visitor<Derived, PropagateNumbers> : coeff_visitor<Derived>"},
{"lineNum":"  180","line":"{"},
{"lineNum":"  181","line":"  typedef typename Derived::Scalar Scalar;"},
{"lineNum":"  182","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  183","line":"  void operator() (const Scalar& value, Index i, Index j)"},
{"lineNum":"  184","line":"  {"},
{"lineNum":"  185","line":"    if((numext::isnan)(this->res) || (!(numext::isnan)(value) && value < this->res))"},
{"lineNum":"  186","line":"    {"},
{"lineNum":"  187","line":"      this->res = value;"},
{"lineNum":"  188","line":"      this->row = i;"},
{"lineNum":"  189","line":"      this->col = j;"},
{"lineNum":"  190","line":"    }"},
{"lineNum":"  191","line":"  }"},
{"lineNum":"  192","line":"};"},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"template <typename Derived>"},
{"lineNum":"  195","line":"struct min_coeff_visitor<Derived, PropagateNaN> : coeff_visitor<Derived>"},
{"lineNum":"  196","line":"{"},
{"lineNum":"  197","line":"  typedef typename Derived::Scalar Scalar;"},
{"lineNum":"  198","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  199","line":"  void operator() (const Scalar& value, Index i, Index j)"},
{"lineNum":"  200","line":"  {"},
{"lineNum":"  201","line":"    if((numext::isnan)(value) || value < this->res)"},
{"lineNum":"  202","line":"    {"},
{"lineNum":"  203","line":"      this->res = value;"},
{"lineNum":"  204","line":"      this->row = i;"},
{"lineNum":"  205","line":"      this->col = j;"},
{"lineNum":"  206","line":"    }"},
{"lineNum":"  207","line":"  }"},
{"lineNum":"  208","line":"};"},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"template<typename Scalar, int NaNPropagation>"},
{"lineNum":"  211","line":"    struct functor_traits<min_coeff_visitor<Scalar, NaNPropagation> > {"},
{"lineNum":"  212","line":"  enum {"},
{"lineNum":"  213","line":"    Cost = NumTraits<Scalar>::AddCost"},
{"lineNum":"  214","line":"  };"},
{"lineNum":"  215","line":"};"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"/** \\internal"},
{"lineNum":"  218","line":"  * \\brief Visitor computing the max coefficient with its value and coordinates"},
{"lineNum":"  219","line":"  *"},
{"lineNum":"  220","line":"  * \\sa DenseBase::maxCoeff(Index*, Index*)"},
{"lineNum":"  221","line":"  */"},
{"lineNum":"  222","line":"template <typename Derived, int NaNPropagation>"},
{"lineNum":"  223","line":"struct max_coeff_visitor : coeff_visitor<Derived>"},
{"lineNum":"  224","line":"{"},
{"lineNum":"  225","line":"  typedef typename Derived::Scalar Scalar;"},
{"lineNum":"  226","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  227","line":"  void operator() (const Scalar& value, Index i, Index j)"},
{"lineNum":"  228","line":"  {"},
{"lineNum":"  229","line":"    if(value > this->res)","class":"lineNoCov","hits":"0","possible_hits":"27",},
{"lineNum":"  230","line":"    {"},
{"lineNum":"  231","line":"      this->res = value;"},
{"lineNum":"  232","line":"      this->row = i;"},
{"lineNum":"  233","line":"      this->col = j;"},
{"lineNum":"  234","line":"    }"},
{"lineNum":"  235","line":"  }"},
{"lineNum":"  236","line":"};"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"template <typename Derived>"},
{"lineNum":"  239","line":"struct max_coeff_visitor<Derived, PropagateNumbers> : coeff_visitor<Derived>"},
{"lineNum":"  240","line":"{"},
{"lineNum":"  241","line":"  typedef typename Derived::Scalar Scalar;"},
{"lineNum":"  242","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  243","line":"  void operator() (const Scalar& value, Index i, Index j)"},
{"lineNum":"  244","line":"  {"},
{"lineNum":"  245","line":"    if((numext::isnan)(this->res) || (!(numext::isnan)(value) && value > this->res))"},
{"lineNum":"  246","line":"    {"},
{"lineNum":"  247","line":"      this->res = value;"},
{"lineNum":"  248","line":"      this->row = i;"},
{"lineNum":"  249","line":"      this->col = j;"},
{"lineNum":"  250","line":"    }"},
{"lineNum":"  251","line":"  }"},
{"lineNum":"  252","line":"};"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"template <typename Derived>"},
{"lineNum":"  255","line":"struct max_coeff_visitor<Derived, PropagateNaN> : coeff_visitor<Derived>"},
{"lineNum":"  256","line":"{"},
{"lineNum":"  257","line":"  typedef typename Derived::Scalar Scalar;"},
{"lineNum":"  258","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  259","line":"  void operator() (const Scalar& value, Index i, Index j)"},
{"lineNum":"  260","line":"  {"},
{"lineNum":"  261","line":"    if((numext::isnan)(value) || value > this->res)"},
{"lineNum":"  262","line":"    {"},
{"lineNum":"  263","line":"      this->res = value;"},
{"lineNum":"  264","line":"      this->row = i;"},
{"lineNum":"  265","line":"      this->col = j;"},
{"lineNum":"  266","line":"    }"},
{"lineNum":"  267","line":"  }"},
{"lineNum":"  268","line":"};"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"template<typename Scalar, int NaNPropagation>"},
{"lineNum":"  271","line":"struct functor_traits<max_coeff_visitor<Scalar, NaNPropagation> > {"},
{"lineNum":"  272","line":"  enum {"},
{"lineNum":"  273","line":"    Cost = NumTraits<Scalar>::AddCost"},
{"lineNum":"  274","line":"  };"},
{"lineNum":"  275","line":"};"},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"} // end namespace internal"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"/** \\fn DenseBase<Derived>::minCoeff(IndexType* rowId, IndexType* colId) const"},
{"lineNum":"  280","line":"  * \\returns the minimum of all coefficients of *this and puts in *row and *col its location."},
{"lineNum":"  281","line":"  *"},
{"lineNum":"  282","line":"  * In case \\c *this contains NaN, NaNPropagation determines the behavior:"},
{"lineNum":"  283","line":"  *   NaNPropagation == PropagateFast : undefined"},
{"lineNum":"  284","line":"  *   NaNPropagation == PropagateNaN : result is NaN"},
{"lineNum":"  285","line":"  *   NaNPropagation == PropagateNumbers : result is maximum of elements that are not NaN"},
{"lineNum":"  286","line":"  * \\warning the matrix must be not empty, otherwise an assertion is triggered."},
{"lineNum":"  287","line":"  *"},
{"lineNum":"  288","line":"  * \\sa DenseBase::minCoeff(Index*), DenseBase::maxCoeff(Index*,Index*), DenseBase::visit(), DenseBase::minCoeff()"},
{"lineNum":"  289","line":"  */"},
{"lineNum":"  290","line":"template<typename Derived>"},
{"lineNum":"  291","line":"template<int NaNPropagation, typename IndexType>"},
{"lineNum":"  292","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":"  293","line":"typename internal::traits<Derived>::Scalar"},
{"lineNum":"  294","line":"DenseBase<Derived>::minCoeff(IndexType* rowId, IndexType* colId) const"},
{"lineNum":"  295","line":"{"},
{"lineNum":"  296","line":"  eigen_assert(this->rows()>0 && this->cols()>0 && \"you are using an empty matrix\");"},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":"  internal::min_coeff_visitor<Derived, NaNPropagation> minVisitor;"},
{"lineNum":"  299","line":"  this->visit(minVisitor);"},
{"lineNum":"  300","line":"  *rowId = minVisitor.row;"},
{"lineNum":"  301","line":"  if (colId) *colId = minVisitor.col;"},
{"lineNum":"  302","line":"  return minVisitor.res;"},
{"lineNum":"  303","line":"}"},
{"lineNum":"  304","line":""},
{"lineNum":"  305","line":"/** \\returns the minimum of all coefficients of *this and puts in *index its location."},
{"lineNum":"  306","line":"  *"},
{"lineNum":"  307","line":"  * In case \\c *this contains NaN, NaNPropagation determines the behavior:"},
{"lineNum":"  308","line":"  *   NaNPropagation == PropagateFast : undefined"},
{"lineNum":"  309","line":"  *   NaNPropagation == PropagateNaN : result is NaN"},
{"lineNum":"  310","line":"  *   NaNPropagation == PropagateNumbers : result is maximum of elements that are not NaN"},
{"lineNum":"  311","line":"  * \\warning the matrix must be not empty, otherwise an assertion is triggered."},
{"lineNum":"  312","line":"  *"},
{"lineNum":"  313","line":"  * \\sa DenseBase::minCoeff(IndexType*,IndexType*), DenseBase::maxCoeff(IndexType*,IndexType*), DenseBase::visit(), DenseBase::minCoeff()"},
{"lineNum":"  314","line":"  */"},
{"lineNum":"  315","line":"template<typename Derived>"},
{"lineNum":"  316","line":"template<int NaNPropagation, typename IndexType>"},
{"lineNum":"  317","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":"  318","line":"typename internal::traits<Derived>::Scalar"},
{"lineNum":"  319","line":"DenseBase<Derived>::minCoeff(IndexType* index) const"},
{"lineNum":"  320","line":"{"},
{"lineNum":"  321","line":"  eigen_assert(this->rows()>0 && this->cols()>0 && \"you are using an empty matrix\");"},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"  EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived)"},
{"lineNum":"  324","line":"      internal::min_coeff_visitor<Derived, NaNPropagation> minVisitor;"},
{"lineNum":"  325","line":"  this->visit(minVisitor);"},
{"lineNum":"  326","line":"  *index = IndexType((RowsAtCompileTime==1) ? minVisitor.col : minVisitor.row);"},
{"lineNum":"  327","line":"  return minVisitor.res;"},
{"lineNum":"  328","line":"}"},
{"lineNum":"  329","line":""},
{"lineNum":"  330","line":"/** \\fn DenseBase<Derived>::maxCoeff(IndexType* rowId, IndexType* colId) const"},
{"lineNum":"  331","line":"  * \\returns the maximum of all coefficients of *this and puts in *row and *col its location."},
{"lineNum":"  332","line":"  *"},
{"lineNum":"  333","line":"  * In case \\c *this contains NaN, NaNPropagation determines the behavior:"},
{"lineNum":"  334","line":"  *   NaNPropagation == PropagateFast : undefined"},
{"lineNum":"  335","line":"  *   NaNPropagation == PropagateNaN : result is NaN"},
{"lineNum":"  336","line":"  *   NaNPropagation == PropagateNumbers : result is maximum of elements that are not NaN"},
{"lineNum":"  337","line":"  * \\warning the matrix must be not empty, otherwise an assertion is triggered."},
{"lineNum":"  338","line":"  *"},
{"lineNum":"  339","line":"  * \\sa DenseBase::minCoeff(IndexType*,IndexType*), DenseBase::visit(), DenseBase::maxCoeff()"},
{"lineNum":"  340","line":"  */"},
{"lineNum":"  341","line":"template<typename Derived>"},
{"lineNum":"  342","line":"template<int NaNPropagation, typename IndexType>"},
{"lineNum":"  343","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":"  344","line":"typename internal::traits<Derived>::Scalar"},
{"lineNum":"  345","line":"DenseBase<Derived>::maxCoeff(IndexType* rowPtr, IndexType* colPtr) const"},
{"lineNum":"  346","line":"{"},
{"lineNum":"  347","line":"  eigen_assert(this->rows()>0 && this->cols()>0 && \"you are using an empty matrix\");"},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"  internal::max_coeff_visitor<Derived, NaNPropagation> maxVisitor;"},
{"lineNum":"  350","line":"  this->visit(maxVisitor);"},
{"lineNum":"  351","line":"  *rowPtr = maxVisitor.row;"},
{"lineNum":"  352","line":"  if (colPtr) *colPtr = maxVisitor.col;"},
{"lineNum":"  353","line":"  return maxVisitor.res;"},
{"lineNum":"  354","line":"}"},
{"lineNum":"  355","line":""},
{"lineNum":"  356","line":"/** \\returns the maximum of all coefficients of *this and puts in *index its location."},
{"lineNum":"  357","line":"  *"},
{"lineNum":"  358","line":"  * In case \\c *this contains NaN, NaNPropagation determines the behavior:"},
{"lineNum":"  359","line":"  *   NaNPropagation == PropagateFast : undefined"},
{"lineNum":"  360","line":"  *   NaNPropagation == PropagateNaN : result is NaN"},
{"lineNum":"  361","line":"  *   NaNPropagation == PropagateNumbers : result is maximum of elements that are not NaN"},
{"lineNum":"  362","line":"  * \\warning the matrix must be not empty, otherwise an assertion is triggered."},
{"lineNum":"  363","line":"  *"},
{"lineNum":"  364","line":"  * \\sa DenseBase::maxCoeff(IndexType*,IndexType*), DenseBase::minCoeff(IndexType*,IndexType*), DenseBase::visitor(), DenseBase::maxCoeff()"},
{"lineNum":"  365","line":"  */"},
{"lineNum":"  366","line":"template<typename Derived>"},
{"lineNum":"  367","line":"template<int NaNPropagation, typename IndexType>"},
{"lineNum":"  368","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":"  369","line":"typename internal::traits<Derived>::Scalar"},
{"lineNum":"  370","line":"DenseBase<Derived>::maxCoeff(IndexType* index) const"},
{"lineNum":"  371","line":"{"},
{"lineNum":"  372","line":"  eigen_assert(this->rows()>0 && this->cols()>0 && \"you are using an empty matrix\");"},
{"lineNum":"  373","line":""},
{"lineNum":"  374","line":"  EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived)"},
{"lineNum":"  375","line":"      internal::max_coeff_visitor<Derived, NaNPropagation> maxVisitor;"},
{"lineNum":"  376","line":"  this->visit(maxVisitor);"},
{"lineNum":"  377","line":"  *index = (RowsAtCompileTime==1) ? maxVisitor.col : maxVisitor.row;"},
{"lineNum":"  378","line":"  return maxVisitor.res;"},
{"lineNum":"  379","line":"}"},
{"lineNum":"  380","line":""},
{"lineNum":"  381","line":"} // end namespace Eigen"},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"#endif // EIGEN_VISITOR_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 3, "covered" : 0,};
var merged_data = [];
