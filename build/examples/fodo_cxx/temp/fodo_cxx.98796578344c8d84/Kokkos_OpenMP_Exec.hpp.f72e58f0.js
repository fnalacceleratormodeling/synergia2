var data = {lines:[
{"lineNum":"    1","line":"/*"},
{"lineNum":"    2","line":"//@HEADER"},
{"lineNum":"    3","line":"// ************************************************************************"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"//                        Kokkos v. 3.0"},
{"lineNum":"    6","line":"//       Copyright (2020) National Technology & Engineering"},
{"lineNum":"    7","line":"//               Solutions of Sandia, LLC (NTESS)."},
{"lineNum":"    8","line":"//"},
{"lineNum":"    9","line":"// Under the terms of Contract DE-NA0003525 with NTESS,"},
{"lineNum":"   10","line":"// the U.S. Government retains certain rights in this software."},
{"lineNum":"   11","line":"//"},
{"lineNum":"   12","line":"// Redistribution and use in source and binary forms, with or without"},
{"lineNum":"   13","line":"// modification, are permitted provided that the following conditions are"},
{"lineNum":"   14","line":"// met:"},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"// 1. Redistributions of source code must retain the above copyright"},
{"lineNum":"   17","line":"// notice, this list of conditions and the following disclaimer."},
{"lineNum":"   18","line":"//"},
{"lineNum":"   19","line":"// 2. Redistributions in binary form must reproduce the above copyright"},
{"lineNum":"   20","line":"// notice, this list of conditions and the following disclaimer in the"},
{"lineNum":"   21","line":"// documentation and/or other materials provided with the distribution."},
{"lineNum":"   22","line":"//"},
{"lineNum":"   23","line":"// 3. Neither the name of the Corporation nor the names of the"},
{"lineNum":"   24","line":"// contributors may be used to endorse or promote products derived from"},
{"lineNum":"   25","line":"// this software without specific prior written permission."},
{"lineNum":"   26","line":"//"},
{"lineNum":"   27","line":"// THIS SOFTWARE IS PROVIDED BY NTESS \"AS IS\" AND ANY"},
{"lineNum":"   28","line":"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"},
{"lineNum":"   29","line":"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR"},
{"lineNum":"   30","line":"// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NTESS OR THE"},
{"lineNum":"   31","line":"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,"},
{"lineNum":"   32","line":"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,"},
{"lineNum":"   33","line":"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR"},
{"lineNum":"   34","line":"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF"},
{"lineNum":"   35","line":"// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING"},
{"lineNum":"   36","line":"// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"},
{"lineNum":"   37","line":"// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   38","line":"//"},
{"lineNum":"   39","line":"// Questions? Contact Christian R. Trott (crtrott@sandia.gov)"},
{"lineNum":"   40","line":"//"},
{"lineNum":"   41","line":"// ************************************************************************"},
{"lineNum":"   42","line":"//@HEADER"},
{"lineNum":"   43","line":"*/"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"#ifndef KOKKOS_OPENMPEXEC_HPP"},
{"lineNum":"   46","line":"#define KOKKOS_OPENMPEXEC_HPP"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"#include <Kokkos_Macros.hpp>"},
{"lineNum":"   49","line":"#if defined(KOKKOS_ENABLE_OPENMP)"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"#if !defined(_OPENMP) && !defined(__CUDA_ARCH__) && \\"},
{"lineNum":"   52","line":"    !defined(__HIP_DEVICE_COMPILE__) && !defined(__SYCL_DEVICE_ONLY__)"},
{"lineNum":"   53","line":"#error \\"},
{"lineNum":"   54","line":"    \"You enabled Kokkos OpenMP support without enabling OpenMP in the compiler!\""},
{"lineNum":"   55","line":"#endif"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"#include <Kokkos_OpenMP.hpp>"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"#include <impl/Kokkos_Traits.hpp>"},
{"lineNum":"   60","line":"#include <impl/Kokkos_HostThreadTeam.hpp>"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"#include <Kokkos_Atomic.hpp>"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"#include <Kokkos_UniqueToken.hpp>"},
{"lineNum":"   65","line":"#include <impl/Kokkos_ConcurrentBitset.hpp>"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"#include <omp.h>"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"//----------------------------------------------------------------------------"},
{"lineNum":"   70","line":"//----------------------------------------------------------------------------"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"namespace Kokkos {"},
{"lineNum":"   73","line":"namespace Impl {"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"class OpenMPExec;"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"extern int g_openmp_hardware_max_threads;"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"extern __thread int t_openmp_hardware_id;"},
{"lineNum":"   80","line":"extern __thread OpenMPExec* t_openmp_instance;"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"//----------------------------------------------------------------------------"},
{"lineNum":"   83","line":"/** \\brief  Data for OpenMP thread execution */"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"class OpenMPExec {"},
{"lineNum":"   86","line":" public:"},
{"lineNum":"   87","line":"  friend class Kokkos::OpenMP;"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"  enum { MAX_THREAD_COUNT = 512 };"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"  void clear_thread_data();"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"  static void validate_partition(const int nthreads, int& num_partitions,"},
{"lineNum":"   94","line":"                                 int& partition_size);"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":" private:"},
{"lineNum":"   97","line":"  OpenMPExec(int arg_pool_size)"},
{"lineNum":"   98","line":"      : m_pool_size{arg_pool_size}, m_level{omp_get_level()}, m_pool() {}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"  ~OpenMPExec() { clear_thread_data(); }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"  int m_pool_size;"},
{"lineNum":"  103","line":"  int m_level;"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"  HostThreadTeamData* m_pool[MAX_THREAD_COUNT];"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":" public:"},
{"lineNum":"  108","line":"  static void verify_is_master(const char* const);"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"  void resize_thread_data(size_t pool_reduce_bytes, size_t team_reduce_bytes,"},
{"lineNum":"  111","line":"                          size_t team_shared_bytes, size_t thread_local_bytes);"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"  inline HostThreadTeamData* get_thread_data() const noexcept {"},
{"lineNum":"  114","line":"    return m_pool[m_level == omp_get_level() ? 0 : omp_get_thread_num()];","class":"lineNoCov","hits":"0","possible_hits":"197",},
{"lineNum":"  115","line":"  }"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"  inline HostThreadTeamData* get_thread_data(int i) const noexcept {"},
{"lineNum":"  118","line":"    return m_pool[i];","class":"lineNoCov","hits":"0","possible_hits":"41",},
{"lineNum":"  119","line":"  }"},
{"lineNum":"  120","line":"};"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"}  // namespace Impl"},
{"lineNum":"  123","line":"}  // namespace Kokkos"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  126","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"namespace Kokkos {"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"inline bool OpenMP::impl_is_initialized() noexcept {"},
{"lineNum":"  131","line":"  return Impl::t_openmp_instance != nullptr;","class":"lineNoCov","hits":"0","possible_hits":"24",},
{"lineNum":"  132","line":"}"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"inline bool OpenMP::in_parallel(OpenMP const&) noexcept {"},
{"lineNum":"  135","line":"  // t_openmp_instance is only non-null on a master thread"},
{"lineNum":"  136","line":"  return !Impl::t_openmp_instance ||","class":"lineNoCov","hits":"0","possible_hits":"277",},
{"lineNum":"  137","line":"         Impl::t_openmp_instance->m_level < omp_get_level();","class":"lineNoCov","hits":"0","possible_hits":"394",},
{"lineNum":"  138","line":"}"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"inline int OpenMP::impl_thread_pool_size() noexcept {"},
{"lineNum":"  141","line":"  return OpenMP::in_parallel() ? omp_get_num_threads()","class":"lineNoCov","hits":"0","possible_hits":"151",},
{"lineNum":"  142","line":"                               : Impl::t_openmp_instance->m_pool_size;","class":"lineNoCov","hits":"0","possible_hits":"143",},
{"lineNum":"  143","line":"}"},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  146","line":"int OpenMP::impl_thread_pool_rank() noexcept {"},
{"lineNum":"  147","line":"#if defined(KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_HOST)"},
{"lineNum":"  148","line":"  return Impl::t_openmp_instance ? 0 : omp_get_thread_num();"},
{"lineNum":"  149","line":"#else"},
{"lineNum":"  150","line":"  return -1;"},
{"lineNum":"  151","line":"#endif"},
{"lineNum":"  152","line":"}"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"inline void OpenMP::impl_static_fence(OpenMP const& /*instance*/) noexcept {}"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"inline bool OpenMP::is_asynchronous(OpenMP const& /*instance*/) noexcept {"},
{"lineNum":"  157","line":"  return false;"},
{"lineNum":"  158","line":"}"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"template <typename F>"},
{"lineNum":"  161","line":"void OpenMP::partition_master(F const& f, int num_partitions,"},
{"lineNum":"  162","line":"                              int partition_size) {"},
{"lineNum":"  163","line":"#if _OPENMP >= 201811"},
{"lineNum":"  164","line":"  if (omp_get_max_active_levels() > 1) {"},
{"lineNum":"  165","line":"#else"},
{"lineNum":"  166","line":"  if (omp_get_nested()) {"},
{"lineNum":"  167","line":"#endif"},
{"lineNum":"  168","line":"    using Exec = Impl::OpenMPExec;"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"    Exec* prev_instance = Impl::t_openmp_instance;"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"    Exec::validate_partition(prev_instance->m_pool_size, num_partitions,"},
{"lineNum":"  173","line":"                             partition_size);"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"    OpenMP::memory_space space;"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"#pragma omp parallel num_threads(num_partitions)"},
{"lineNum":"  178","line":"    {"},
{"lineNum":"  179","line":"      void* ptr = nullptr;"},
{"lineNum":"  180","line":"      try {"},
{"lineNum":"  181","line":"        ptr = space.allocate(sizeof(Exec));"},
{"lineNum":"  182","line":"      } catch ("},
{"lineNum":"  183","line":"          Kokkos::Experimental::RawMemoryAllocationFailure const& failure) {"},
{"lineNum":"  184","line":"        // For now, just rethrow the error message the existing way"},
{"lineNum":"  185","line":"        Kokkos::Impl::throw_runtime_exception(failure.get_error_message());"},
{"lineNum":"  186","line":"      }"},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"      Impl::t_openmp_instance = new (ptr) Exec(partition_size);"},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"      size_t pool_reduce_bytes  = 32 * partition_size;"},
{"lineNum":"  191","line":"      size_t team_reduce_bytes  = 32 * partition_size;"},
{"lineNum":"  192","line":"      size_t team_shared_bytes  = 1024 * partition_size;"},
{"lineNum":"  193","line":"      size_t thread_local_bytes = 1024;"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"      Impl::t_openmp_instance->resize_thread_data("},
{"lineNum":"  196","line":"          pool_reduce_bytes, team_reduce_bytes, team_shared_bytes,"},
{"lineNum":"  197","line":"          thread_local_bytes);"},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"      omp_set_num_threads(partition_size);"},
{"lineNum":"  200","line":"      f(omp_get_thread_num(), omp_get_num_threads());"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"      Impl::t_openmp_instance->~Exec();"},
{"lineNum":"  203","line":"      space.deallocate(Impl::t_openmp_instance, sizeof(Exec));"},
{"lineNum":"  204","line":"      Impl::t_openmp_instance = nullptr;"},
{"lineNum":"  205","line":"    }"},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"    Impl::t_openmp_instance = prev_instance;"},
{"lineNum":"  208","line":"  } else {"},
{"lineNum":"  209","line":"    // nested openmp not enabled"},
{"lineNum":"  210","line":"    f(0, 1);"},
{"lineNum":"  211","line":"  }"},
{"lineNum":"  212","line":"}"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"namespace Experimental {"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"template <>"},
{"lineNum":"  217","line":"class MasterLock<OpenMP> {"},
{"lineNum":"  218","line":" public:"},
{"lineNum":"  219","line":"  void lock() { omp_set_lock(&m_lock); }"},
{"lineNum":"  220","line":"  void unlock() { omp_unset_lock(&m_lock); }"},
{"lineNum":"  221","line":"  bool try_lock() { return static_cast<bool>(omp_test_lock(&m_lock)); }"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"  MasterLock() { omp_init_lock(&m_lock); }"},
{"lineNum":"  224","line":"  ~MasterLock() { omp_destroy_lock(&m_lock); }"},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"  MasterLock(MasterLock const&) = delete;"},
{"lineNum":"  227","line":"  MasterLock(MasterLock&&)      = delete;"},
{"lineNum":"  228","line":"  MasterLock& operator=(MasterLock const&) = delete;"},
{"lineNum":"  229","line":"  MasterLock& operator=(MasterLock&&) = delete;"},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":" private:"},
{"lineNum":"  232","line":"  omp_lock_t m_lock;"},
{"lineNum":"  233","line":"};"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"template <>"},
{"lineNum":"  236","line":"class UniqueToken<OpenMP, UniqueTokenScope::Instance> {"},
{"lineNum":"  237","line":" private:"},
{"lineNum":"  238","line":"  using buffer_type = Kokkos::View<uint32_t*, Kokkos::HostSpace>;"},
{"lineNum":"  239","line":"  int m_count;"},
{"lineNum":"  240","line":"  buffer_type m_buffer_view;"},
{"lineNum":"  241","line":"  uint32_t volatile* m_buffer;"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":" public:"},
{"lineNum":"  244","line":"  using execution_space = OpenMP;"},
{"lineNum":"  245","line":"  using size_type       = int;"},
{"lineNum":"  246","line":""},
{"lineNum":"  247","line":"  /// \\brief create object size for concurrency on the given instance"},
{"lineNum":"  248","line":"  ///"},
{"lineNum":"  249","line":"  /// This object should not be shared between instances"},
{"lineNum":"  250","line":"  UniqueToken(execution_space const& = execution_space()) noexcept"},
{"lineNum":"  251","line":"      : m_count(::Kokkos::OpenMP::impl_thread_pool_size()),"},
{"lineNum":"  252","line":"        m_buffer_view(buffer_type()),"},
{"lineNum":"  253","line":"        m_buffer(nullptr) {}"},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"  UniqueToken(size_type max_size, execution_space const& = execution_space())"},
{"lineNum":"  256","line":"      : m_count(max_size),"},
{"lineNum":"  257","line":"        m_buffer_view(\"UniqueToken::m_buffer_view\","},
{"lineNum":"  258","line":"                      ::Kokkos::Impl::concurrent_bitset::buffer_bound(m_count)),"},
{"lineNum":"  259","line":"        m_buffer(m_buffer_view.data()) {}"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"  /// \\brief upper bound for acquired values, i.e. 0 <= value < size()"},
{"lineNum":"  262","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  263","line":"  int size() const noexcept {"},
{"lineNum":"  264","line":"#if defined(KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_HOST)"},
{"lineNum":"  265","line":"    return m_count;"},
{"lineNum":"  266","line":"#else"},
{"lineNum":"  267","line":"    return 0;"},
{"lineNum":"  268","line":"#endif"},
{"lineNum":"  269","line":"  }"},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"  /// \\brief acquire value such that 0 <= value < size()"},
{"lineNum":"  272","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  273","line":"  int acquire() const noexcept {"},
{"lineNum":"  274","line":"#if defined(KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_HOST)"},
{"lineNum":"  275","line":"    if (m_count >= ::Kokkos::OpenMP::impl_thread_pool_size())"},
{"lineNum":"  276","line":"      return ::Kokkos::OpenMP::impl_thread_pool_rank();"},
{"lineNum":"  277","line":"    const ::Kokkos::pair<int, int> result ="},
{"lineNum":"  278","line":"        ::Kokkos::Impl::concurrent_bitset::acquire_bounded("},
{"lineNum":"  279","line":"            m_buffer, m_count, ::Kokkos::Impl::clock_tic() % m_count);"},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"    if (result.first < 0) {"},
{"lineNum":"  282","line":"      ::Kokkos::abort("},
{"lineNum":"  283","line":"          \"UniqueToken<OpenMP> failure to acquire tokens, no tokens available\");"},
{"lineNum":"  284","line":"    }"},
{"lineNum":"  285","line":""},
{"lineNum":"  286","line":"    return result.first;"},
{"lineNum":"  287","line":"#else"},
{"lineNum":"  288","line":"    return 0;"},
{"lineNum":"  289","line":"#endif"},
{"lineNum":"  290","line":"  }"},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"  /// \\brief release a value acquired by generate"},
{"lineNum":"  293","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  294","line":"  void release(int i) const noexcept {"},
{"lineNum":"  295","line":"#if defined(KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_HOST)"},
{"lineNum":"  296","line":"    if (m_count < ::Kokkos::OpenMP::impl_thread_pool_size())"},
{"lineNum":"  297","line":"      ::Kokkos::Impl::concurrent_bitset::release(m_buffer, i);"},
{"lineNum":"  298","line":"#else"},
{"lineNum":"  299","line":"    (void)i;"},
{"lineNum":"  300","line":"#endif"},
{"lineNum":"  301","line":"  }"},
{"lineNum":"  302","line":"};"},
{"lineNum":"  303","line":""},
{"lineNum":"  304","line":"template <>"},
{"lineNum":"  305","line":"class UniqueToken<OpenMP, UniqueTokenScope::Global> {"},
{"lineNum":"  306","line":" public:"},
{"lineNum":"  307","line":"  using execution_space = OpenMP;"},
{"lineNum":"  308","line":"  using size_type       = int;"},
{"lineNum":"  309","line":""},
{"lineNum":"  310","line":"  /// \\brief create object size for concurrency on the given instance"},
{"lineNum":"  311","line":"  ///"},
{"lineNum":"  312","line":"  /// This object should not be shared between instances"},
{"lineNum":"  313","line":"  UniqueToken(execution_space const& = execution_space()) noexcept {}"},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"  /// \\brief upper bound for acquired values, i.e. 0 <= value < size()"},
{"lineNum":"  316","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  317","line":"  int size() const noexcept {"},
{"lineNum":"  318","line":"#if defined(KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_HOST)"},
{"lineNum":"  319","line":"    return Kokkos::Impl::g_openmp_hardware_max_threads;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  320","line":"#else"},
{"lineNum":"  321","line":"    return 0;"},
{"lineNum":"  322","line":"#endif"},
{"lineNum":"  323","line":"  }"},
{"lineNum":"  324","line":""},
{"lineNum":"  325","line":"  /// \\brief acquire value such that 0 <= value < size()"},
{"lineNum":"  326","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  327","line":"  int acquire() const noexcept {"},
{"lineNum":"  328","line":"#if defined(KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_HOST)"},
{"lineNum":"  329","line":"    return Kokkos::Impl::t_openmp_hardware_id;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  330","line":"#else"},
{"lineNum":"  331","line":"    return 0;"},
{"lineNum":"  332","line":"#endif"},
{"lineNum":"  333","line":"  }"},
{"lineNum":"  334","line":""},
{"lineNum":"  335","line":"  /// \\brief release a value acquired by generate"},
{"lineNum":"  336","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  337","line":"  void release(int) const noexcept {}"},
{"lineNum":"  338","line":"};"},
{"lineNum":"  339","line":""},
{"lineNum":"  340","line":"}  // namespace Experimental"},
{"lineNum":"  341","line":""},
{"lineNum":"  342","line":"inline int OpenMP::impl_thread_pool_size(int depth) {"},
{"lineNum":"  343","line":"  return depth < 2 ? impl_thread_pool_size() : 1;"},
{"lineNum":"  344","line":"}"},
{"lineNum":"  345","line":""},
{"lineNum":"  346","line":"KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  347","line":"int OpenMP::impl_hardware_thread_id() noexcept {"},
{"lineNum":"  348","line":"#if defined(KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_HOST)"},
{"lineNum":"  349","line":"  return Impl::t_openmp_hardware_id;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  350","line":"#else"},
{"lineNum":"  351","line":"  return -1;"},
{"lineNum":"  352","line":"#endif"},
{"lineNum":"  353","line":"}"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"inline int OpenMP::impl_max_hardware_threads() noexcept {"},
{"lineNum":"  356","line":"  return Impl::g_openmp_hardware_max_threads;"},
{"lineNum":"  357","line":"}"},
{"lineNum":"  358","line":""},
{"lineNum":"  359","line":"}  // namespace Kokkos"},
{"lineNum":"  360","line":""},
{"lineNum":"  361","line":"#endif"},
{"lineNum":"  362","line":"#endif /* #ifndef KOKKOS_OPENMPEXEC_HPP */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 12, "covered" : 0,};
var merged_data = [];
