var data = {lines:[
{"lineNum":"    1","line":"/*"},
{"lineNum":"    2","line":"//@HEADER"},
{"lineNum":"    3","line":"// ************************************************************************"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"//                        Kokkos v. 3.0"},
{"lineNum":"    6","line":"//       Copyright (2020) National Technology & Engineering"},
{"lineNum":"    7","line":"//               Solutions of Sandia, LLC (NTESS)."},
{"lineNum":"    8","line":"//"},
{"lineNum":"    9","line":"// Under the terms of Contract DE-NA0003525 with NTESS,"},
{"lineNum":"   10","line":"// the U.S. Government retains certain rights in this software."},
{"lineNum":"   11","line":"//"},
{"lineNum":"   12","line":"// Redistribution and use in source and binary forms, with or without"},
{"lineNum":"   13","line":"// modification, are permitted provided that the following conditions are"},
{"lineNum":"   14","line":"// met:"},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"// 1. Redistributions of source code must retain the above copyright"},
{"lineNum":"   17","line":"// notice, this list of conditions and the following disclaimer."},
{"lineNum":"   18","line":"//"},
{"lineNum":"   19","line":"// 2. Redistributions in binary form must reproduce the above copyright"},
{"lineNum":"   20","line":"// notice, this list of conditions and the following disclaimer in the"},
{"lineNum":"   21","line":"// documentation and/or other materials provided with the distribution."},
{"lineNum":"   22","line":"//"},
{"lineNum":"   23","line":"// 3. Neither the name of the Corporation nor the names of the"},
{"lineNum":"   24","line":"// contributors may be used to endorse or promote products derived from"},
{"lineNum":"   25","line":"// this software without specific prior written permission."},
{"lineNum":"   26","line":"//"},
{"lineNum":"   27","line":"// THIS SOFTWARE IS PROVIDED BY NTESS \"AS IS\" AND ANY"},
{"lineNum":"   28","line":"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"},
{"lineNum":"   29","line":"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR"},
{"lineNum":"   30","line":"// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NTESS OR THE"},
{"lineNum":"   31","line":"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,"},
{"lineNum":"   32","line":"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,"},
{"lineNum":"   33","line":"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR"},
{"lineNum":"   34","line":"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF"},
{"lineNum":"   35","line":"// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING"},
{"lineNum":"   36","line":"// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"},
{"lineNum":"   37","line":"// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   38","line":"//"},
{"lineNum":"   39","line":"// Questions? Contact Christian R. Trott (crtrott@sandia.gov)"},
{"lineNum":"   40","line":"//"},
{"lineNum":"   41","line":"// ************************************************************************"},
{"lineNum":"   42","line":"//@HEADER"},
{"lineNum":"   43","line":"*/"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"#if defined(KOKKOS_ENABLE_RFO_PREFETCH)"},
{"lineNum":"   46","line":"#include <xmmintrin.h>"},
{"lineNum":"   47","line":"#endif"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"#include <Kokkos_Macros.hpp>"},
{"lineNum":"   50","line":"#if defined(KOKKOS_ATOMIC_HPP) && !defined(KOKKOS_ATOMIC_FETCH_ADD_HPP)"},
{"lineNum":"   51","line":"#define KOKKOS_ATOMIC_FETCH_ADD_HPP"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"#if defined(KOKKOS_ENABLE_CUDA)"},
{"lineNum":"   54","line":"#include <Cuda/Kokkos_Cuda_Version_9_8_Compatibility.hpp>"},
{"lineNum":"   55","line":"#endif"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"namespace Kokkos {"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"//----------------------------------------------------------------------------"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"#if defined(KOKKOS_ENABLE_CUDA)"},
{"lineNum":"   62","line":"#if defined(__CUDA_ARCH__) || defined(KOKKOS_IMPL_CUDA_CLANG_WORKAROUND)"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"// Support for int, unsigned int, unsigned long long int, and float"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"__inline__ __device__ int atomic_fetch_add(volatile int* const dest,"},
{"lineNum":"   67","line":"                                           const int val) {"},
{"lineNum":"   68","line":"  return atomicAdd((int*)dest, val);"},
{"lineNum":"   69","line":"}"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"__inline__ __device__ unsigned int atomic_fetch_add("},
{"lineNum":"   72","line":"    volatile unsigned int* const dest, const unsigned int val) {"},
{"lineNum":"   73","line":"  return atomicAdd((unsigned int*)dest, val);"},
{"lineNum":"   74","line":"}"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"__inline__ __device__ unsigned long long int atomic_fetch_add("},
{"lineNum":"   77","line":"    volatile unsigned long long int* const dest,"},
{"lineNum":"   78","line":"    const unsigned long long int val) {"},
{"lineNum":"   79","line":"  return atomicAdd((unsigned long long int*)dest, val);"},
{"lineNum":"   80","line":"}"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"__inline__ __device__ float atomic_fetch_add(volatile float* const dest,"},
{"lineNum":"   83","line":"                                             const float val) {"},
{"lineNum":"   84","line":"  return atomicAdd((float*)dest, val);"},
{"lineNum":"   85","line":"}"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"#if (600 <= __CUDA_ARCH__)"},
{"lineNum":"   88","line":"__inline__ __device__ double atomic_fetch_add(volatile double* const dest,"},
{"lineNum":"   89","line":"                                              const double val) {"},
{"lineNum":"   90","line":"  return atomicAdd((double*)dest, val);"},
{"lineNum":"   91","line":"}"},
{"lineNum":"   92","line":"#endif"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"template <typename T>"},
{"lineNum":"   95","line":"__inline__ __device__ T atomic_fetch_add("},
{"lineNum":"   96","line":"    volatile T* const dest,"},
{"lineNum":"   97","line":"    typename std::enable_if<sizeof(T) == sizeof(int), const T>::type val) {"},
{"lineNum":"   98","line":"  // to work around a bug in the clang cuda compiler, the name here needs to be"},
{"lineNum":"   99","line":"  // different from the one internal to the other overloads"},
{"lineNum":"  100","line":"  union U1 {"},
{"lineNum":"  101","line":"    int i;"},
{"lineNum":"  102","line":"    T t;"},
{"lineNum":"  103","line":"    KOKKOS_INLINE_FUNCTION U1() {}"},
{"lineNum":"  104","line":"  } assume, oldval, newval;"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"  oldval.t = *dest;"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"  do {"},
{"lineNum":"  109","line":"    assume.i = oldval.i;"},
{"lineNum":"  110","line":"    newval.t = assume.t + val;"},
{"lineNum":"  111","line":"    oldval.i = atomicCAS((int*)dest, assume.i, newval.i);"},
{"lineNum":"  112","line":"  } while (assume.i != oldval.i);"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"  return oldval.t;"},
{"lineNum":"  115","line":"}"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"template <typename T>"},
{"lineNum":"  118","line":"__inline__ __device__ T atomic_fetch_add("},
{"lineNum":"  119","line":"    volatile T* const dest,"},
{"lineNum":"  120","line":"    typename std::enable_if<sizeof(T) != sizeof(int) &&"},
{"lineNum":"  121","line":"                                sizeof(T) == sizeof(unsigned long long int),"},
{"lineNum":"  122","line":"                            const T>::type val) {"},
{"lineNum":"  123","line":"  // to work around a bug in the clang cuda compiler, the name here needs to be"},
{"lineNum":"  124","line":"  // different from the one internal to the other overloads"},
{"lineNum":"  125","line":"  union U2 {"},
{"lineNum":"  126","line":"    unsigned long long int i;"},
{"lineNum":"  127","line":"    T t;"},
{"lineNum":"  128","line":"    KOKKOS_INLINE_FUNCTION U2() {}"},
{"lineNum":"  129","line":"  } assume, oldval, newval;"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"  oldval.t = *dest;"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"  do {"},
{"lineNum":"  134","line":"    assume.i = oldval.i;"},
{"lineNum":"  135","line":"    newval.t = assume.t + val;"},
{"lineNum":"  136","line":"    oldval.i = atomicCAS((unsigned long long int*)dest, assume.i, newval.i);"},
{"lineNum":"  137","line":"  } while (assume.i != oldval.i);"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"  return oldval.t;"},
{"lineNum":"  140","line":"}"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"template <typename T>"},
{"lineNum":"  145","line":"__inline__ __device__ T"},
{"lineNum":"  146","line":"atomic_fetch_add(volatile T* const dest,"},
{"lineNum":"  147","line":"                 typename std::enable_if<(sizeof(T) != 4) && (sizeof(T) != 8),"},
{"lineNum":"  148","line":"                                         const T>::type& val) {"},
{"lineNum":"  149","line":"  T return_val;"},
{"lineNum":"  150","line":"  // This is a way to (hopefully) avoid dead lock in a warp"},
{"lineNum":"  151","line":"  int done = 0;"},
{"lineNum":"  152","line":"#ifdef KOKKOS_IMPL_CUDA_SYNCWARP_NEEDS_MASK"},
{"lineNum":"  153","line":"  unsigned int mask   = KOKKOS_IMPL_CUDA_ACTIVEMASK;"},
{"lineNum":"  154","line":"  unsigned int active = KOKKOS_IMPL_CUDA_BALLOT_MASK(mask, 1);"},
{"lineNum":"  155","line":"#else"},
{"lineNum":"  156","line":"  unsigned int active = KOKKOS_IMPL_CUDA_BALLOT(1);"},
{"lineNum":"  157","line":"#endif"},
{"lineNum":"  158","line":"  unsigned int done_active = 0;"},
{"lineNum":"  159","line":"  while (active != done_active) {"},
{"lineNum":"  160","line":"    if (!done) {"},
{"lineNum":"  161","line":"      bool locked = Impl::lock_address_cuda_space((void*)dest);"},
{"lineNum":"  162","line":"      if (locked) {"},
{"lineNum":"  163","line":"        Kokkos::memory_fence();"},
{"lineNum":"  164","line":"        return_val = *dest;"},
{"lineNum":"  165","line":"        *dest      = return_val + val;"},
{"lineNum":"  166","line":"        Kokkos::memory_fence();"},
{"lineNum":"  167","line":"        Impl::unlock_address_cuda_space((void*)dest);"},
{"lineNum":"  168","line":"        done = 1;"},
{"lineNum":"  169","line":"      }"},
{"lineNum":"  170","line":"    }"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"#ifdef KOKKOS_IMPL_CUDA_SYNCWARP_NEEDS_MASK"},
{"lineNum":"  173","line":"    done_active = KOKKOS_IMPL_CUDA_BALLOT_MASK(mask, done);"},
{"lineNum":"  174","line":"#else"},
{"lineNum":"  175","line":"    done_active = KOKKOS_IMPL_CUDA_BALLOT(done);"},
{"lineNum":"  176","line":"#endif"},
{"lineNum":"  177","line":"  }"},
{"lineNum":"  178","line":"  return return_val;"},
{"lineNum":"  179","line":"}"},
{"lineNum":"  180","line":"#endif"},
{"lineNum":"  181","line":"#endif"},
{"lineNum":"  182","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  183","line":"#if !defined(__CUDA_ARCH__) || defined(KOKKOS_IMPL_CUDA_CLANG_WORKAROUND)"},
{"lineNum":"  184","line":"#if defined(KOKKOS_ENABLE_GNU_ATOMICS) || defined(KOKKOS_ENABLE_INTEL_ATOMICS)"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"#if defined(KOKKOS_ENABLE_ASM) && (defined(KOKKOS_ENABLE_ISA_X86_64) || \\"},
{"lineNum":"  187","line":"                                   defined(KOKKOS_KNL_USE_ASM_WORKAROUND))"},
{"lineNum":"  188","line":"inline int atomic_fetch_add(volatile int* dest, const int val) {"},
{"lineNum":"  189","line":"#if defined(KOKKOS_ENABLE_RFO_PREFETCH)"},
{"lineNum":"  190","line":"  _mm_prefetch((const char*)dest, _MM_HINT_ET0);"},
{"lineNum":"  191","line":"#endif"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"  int original = val;"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"  __asm__ __volatile__(\"lock xadd %1, %0\""},
{"lineNum":"  196","line":"                       : \"+m\"(*dest), \"+r\"(original)"},
{"lineNum":"  197","line":"                       : \"m\"(*dest), \"r\"(original)"},
{"lineNum":"  198","line":"                       : \"memory\");"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"  return original;"},
{"lineNum":"  201","line":"}"},
{"lineNum":"  202","line":"#else"},
{"lineNum":"  203","line":"inline int atomic_fetch_add(volatile int* const dest, const int val) {"},
{"lineNum":"  204","line":"#if defined(KOKKOS_ENABLE_RFO_PREFETCH)"},
{"lineNum":"  205","line":"  _mm_prefetch((const char*)dest, _MM_HINT_ET0);"},
{"lineNum":"  206","line":"#endif"},
{"lineNum":"  207","line":"  return __sync_fetch_and_add(dest, val);","class":"lineNoCov","hits":"0","possible_hits":"63",},
{"lineNum":"  208","line":"}"},
{"lineNum":"  209","line":"#endif"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"inline long int atomic_fetch_add(volatile long int* const dest,"},
{"lineNum":"  212","line":"                                 const long int val) {"},
{"lineNum":"  213","line":"#if defined(KOKKOS_ENABLE_RFO_PREFETCH)"},
{"lineNum":"  214","line":"  _mm_prefetch((const char*)dest, _MM_HINT_ET0);"},
{"lineNum":"  215","line":"#endif"},
{"lineNum":"  216","line":"  return __sync_fetch_and_add(dest, val);"},
{"lineNum":"  217","line":"}"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"#if defined(KOKKOS_ENABLE_GNU_ATOMICS)"},
{"lineNum":"  220","line":""},
{"lineNum":"  221","line":"inline unsigned int atomic_fetch_add(volatile unsigned int* const dest,"},
{"lineNum":"  222","line":"                                     const unsigned int val) {"},
{"lineNum":"  223","line":"#if defined(KOKKOS_ENABLE_RFO_PREFETCH)"},
{"lineNum":"  224","line":"  _mm_prefetch((const char*)dest, _MM_HINT_ET0);"},
{"lineNum":"  225","line":"#endif"},
{"lineNum":"  226","line":"  return __sync_fetch_and_add(dest, val);"},
{"lineNum":"  227","line":"}"},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"inline unsigned long int atomic_fetch_add("},
{"lineNum":"  230","line":"    volatile unsigned long int* const dest, const unsigned long int val) {"},
{"lineNum":"  231","line":"#if defined(KOKKOS_ENABLE_RFO_PREFETCH)"},
{"lineNum":"  232","line":"  _mm_prefetch((const char*)dest, _MM_HINT_ET0);"},
{"lineNum":"  233","line":"#endif"},
{"lineNum":"  234","line":"  return __sync_fetch_and_add(dest, val);"},
{"lineNum":"  235","line":"}"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"inline unsigned long long int atomic_fetch_add("},
{"lineNum":"  238","line":"    volatile unsigned long long int* const dest,"},
{"lineNum":"  239","line":"    const unsigned long long int val) {"},
{"lineNum":"  240","line":"#if defined(KOKKOS_ENABLE_RFO_PREFETCH)"},
{"lineNum":"  241","line":"  _mm_prefetch((const char*)dest, _MM_HINT_ET0);"},
{"lineNum":"  242","line":"#endif"},
{"lineNum":"  243","line":"  return __sync_fetch_and_add(dest, val);"},
{"lineNum":"  244","line":"}"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"#endif"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"template <typename T>"},
{"lineNum":"  249","line":"inline T atomic_fetch_add("},
{"lineNum":"  250","line":"    volatile T* const dest,"},
{"lineNum":"  251","line":"    typename std::enable_if<sizeof(T) == sizeof(int), const T>::type val) {"},
{"lineNum":"  252","line":"  union U {"},
{"lineNum":"  253","line":"    int i;"},
{"lineNum":"  254","line":"    T t;"},
{"lineNum":"  255","line":"    inline U() {}"},
{"lineNum":"  256","line":"  } assume, oldval, newval;"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"#if defined(KOKKOS_ENABLE_RFO_PREFETCH)"},
{"lineNum":"  259","line":"  _mm_prefetch((const char*)dest, _MM_HINT_ET0);"},
{"lineNum":"  260","line":"#endif"},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"  oldval.t = *dest;"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"  do {"},
{"lineNum":"  265","line":"    assume.i = oldval.i;"},
{"lineNum":"  266","line":"    newval.t = assume.t + val;"},
{"lineNum":"  267","line":"    oldval.i = __sync_val_compare_and_swap((int*)dest, assume.i, newval.i);"},
{"lineNum":"  268","line":"  } while (assume.i != oldval.i);"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"  return oldval.t;"},
{"lineNum":"  271","line":"}"},
{"lineNum":"  272","line":""},
{"lineNum":"  273","line":"template <typename T>"},
{"lineNum":"  274","line":"inline T atomic_fetch_add(volatile T* const dest,"},
{"lineNum":"  275","line":"                          typename std::enable_if<sizeof(T) != sizeof(int) &&"},
{"lineNum":"  276","line":"                                                      sizeof(T) == sizeof(long),"},
{"lineNum":"  277","line":"                                                  const T>::type val) {"},
{"lineNum":"  278","line":"  union U {"},
{"lineNum":"  279","line":"    long i;"},
{"lineNum":"  280","line":"    T t;"},
{"lineNum":"  281","line":"    inline U() {}"},
{"lineNum":"  282","line":"  } assume, oldval, newval;"},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"#if defined(KOKKOS_ENABLE_RFO_PREFETCH)"},
{"lineNum":"  285","line":"  _mm_prefetch((const char*)dest, _MM_HINT_ET0);"},
{"lineNum":"  286","line":"#endif"},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"  oldval.t = *dest;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"  do {"},
{"lineNum":"  291","line":"    assume.i = oldval.i;"},
{"lineNum":"  292","line":"    newval.t = assume.t + val;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  293","line":"    oldval.i = __sync_val_compare_and_swap((long*)dest, assume.i, newval.i);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  294","line":"  } while (assume.i != oldval.i);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  295","line":""},
{"lineNum":"  296","line":"  return oldval.t;"},
{"lineNum":"  297","line":"}"},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"#if defined(KOKKOS_ENABLE_ASM) && defined(KOKKOS_ENABLE_ISA_X86_64)"},
{"lineNum":"  300","line":"template <typename T>"},
{"lineNum":"  301","line":"inline T atomic_fetch_add("},
{"lineNum":"  302","line":"    volatile T* const dest,"},
{"lineNum":"  303","line":"    typename std::enable_if<sizeof(T) != sizeof(int) &&"},
{"lineNum":"  304","line":"                                sizeof(T) != sizeof(long) &&"},
{"lineNum":"  305","line":"                                sizeof(T) == sizeof(Impl::cas128_t),"},
{"lineNum":"  306","line":"                            const T>::type val) {"},
{"lineNum":"  307","line":"  union U {"},
{"lineNum":"  308","line":"    Impl::cas128_t i;"},
{"lineNum":"  309","line":"    T t;"},
{"lineNum":"  310","line":"    inline U() {}"},
{"lineNum":"  311","line":"  } assume, oldval, newval;"},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":"#if defined(KOKKOS_ENABLE_RFO_PREFETCH)"},
{"lineNum":"  314","line":"  _mm_prefetch((const char*)dest, _MM_HINT_ET0);"},
{"lineNum":"  315","line":"#endif"},
{"lineNum":"  316","line":""},
{"lineNum":"  317","line":"  oldval.t = *dest;"},
{"lineNum":"  318","line":""},
{"lineNum":"  319","line":"  do {"},
{"lineNum":"  320","line":"    assume.i = oldval.i;"},
{"lineNum":"  321","line":"    newval.t = assume.t + val;"},
{"lineNum":"  322","line":"    oldval.i = Impl::cas128((volatile Impl::cas128_t*)dest, assume.i, newval.i);"},
{"lineNum":"  323","line":"  } while (assume.i != oldval.i);"},
{"lineNum":"  324","line":""},
{"lineNum":"  325","line":"  return oldval.t;"},
{"lineNum":"  326","line":"}"},
{"lineNum":"  327","line":"#endif"},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  330","line":""},
{"lineNum":"  331","line":"template <typename T>"},
{"lineNum":"  332","line":"inline T atomic_fetch_add("},
{"lineNum":"  333","line":"    volatile T* const dest,"},
{"lineNum":"  334","line":"    typename std::enable_if<(sizeof(T) != 4) && (sizeof(T) != 8)"},
{"lineNum":"  335","line":"#if defined(KOKKOS_ENABLE_ASM) && defined(KOKKOS_ENABLE_ISA_X86_64)"},
{"lineNum":"  336","line":"                                && (sizeof(T) != 16)"},
{"lineNum":"  337","line":"#endif"},
{"lineNum":"  338","line":"                                ,"},
{"lineNum":"  339","line":"                            const T>::type& val) {"},
{"lineNum":"  340","line":"  while (!Impl::lock_address_host_space((void*)dest))"},
{"lineNum":"  341","line":"    ;"},
{"lineNum":"  342","line":"  Kokkos::memory_fence();"},
{"lineNum":"  343","line":"  T return_val = *dest;"},
{"lineNum":"  344","line":""},
{"lineNum":"  345","line":"  // Don\'t use the following line of code here:"},
{"lineNum":"  346","line":"  //"},
{"lineNum":"  347","line":"  // const T tmp = *dest = return_val + val;"},
{"lineNum":"  348","line":"  //"},
{"lineNum":"  349","line":"  // Instead, put each assignment in its own statement.  This is"},
{"lineNum":"  350","line":"  // because the overload of T::operator= for volatile *this should"},
{"lineNum":"  351","line":"  // return void, not volatile T&.  See Kokkos #177:"},
{"lineNum":"  352","line":"  //"},
{"lineNum":"  353","line":"  // https://github.com/kokkos/kokkos/issues/177"},
{"lineNum":"  354","line":"  *dest       = return_val + val;"},
{"lineNum":"  355","line":"  const T tmp = *dest;"},
{"lineNum":"  356","line":"  (void)tmp;"},
{"lineNum":"  357","line":"  Kokkos::memory_fence();"},
{"lineNum":"  358","line":"  Impl::unlock_address_host_space((void*)dest);"},
{"lineNum":"  359","line":""},
{"lineNum":"  360","line":"  return return_val;"},
{"lineNum":"  361","line":"}"},
{"lineNum":"  362","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  363","line":""},
{"lineNum":"  364","line":"#elif defined(KOKKOS_ENABLE_OPENMP_ATOMICS)"},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":"template <typename T>"},
{"lineNum":"  367","line":"T atomic_fetch_add(volatile T* const dest, const T val) {"},
{"lineNum":"  368","line":"  T retval;"},
{"lineNum":"  369","line":"#pragma omp atomic capture"},
{"lineNum":"  370","line":"  {"},
{"lineNum":"  371","line":"    retval = dest[0];"},
{"lineNum":"  372","line":"    dest[0] += val;"},
{"lineNum":"  373","line":"  }"},
{"lineNum":"  374","line":"  return retval;"},
{"lineNum":"  375","line":"}"},
{"lineNum":"  376","line":""},
{"lineNum":"  377","line":"#elif defined(KOKKOS_ENABLE_SERIAL_ATOMICS)"},
{"lineNum":"  378","line":""},
{"lineNum":"  379","line":"template <typename T>"},
{"lineNum":"  380","line":"T atomic_fetch_add(volatile T* const dest_v,"},
{"lineNum":"  381","line":"                   typename std::add_const<T>::type val) {"},
{"lineNum":"  382","line":"  T* dest  = const_cast<T*>(dest_v);"},
{"lineNum":"  383","line":"  T retval = *dest;"},
{"lineNum":"  384","line":"  *dest += val;"},
{"lineNum":"  385","line":"  return retval;"},
{"lineNum":"  386","line":"}"},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"#endif"},
{"lineNum":"  389","line":"#endif"},
{"lineNum":"  390","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  391","line":""},
{"lineNum":"  392","line":"// dummy for non-CUDA Kokkos headers being processed by NVCC"},
{"lineNum":"  393","line":"#if defined(__CUDA_ARCH__) && !defined(KOKKOS_ENABLE_CUDA)"},
{"lineNum":"  394","line":"template <typename T>"},
{"lineNum":"  395","line":"__inline__ __device__ T atomic_fetch_add(volatile T* const,"},
{"lineNum":"  396","line":"                                         Kokkos::Impl::identity_t<T>) {"},
{"lineNum":"  397","line":"  return T();"},
{"lineNum":"  398","line":"}"},
{"lineNum":"  399","line":"#endif"},
{"lineNum":"  400","line":""},
{"lineNum":"  401","line":"}  // namespace Kokkos"},
{"lineNum":"  402","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 5, "covered" : 0,};
var merged_data = [];
