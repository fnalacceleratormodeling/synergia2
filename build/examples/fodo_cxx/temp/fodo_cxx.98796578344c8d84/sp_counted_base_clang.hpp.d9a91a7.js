var data = {lines:[
{"lineNum":"    1","line":"#ifndef BOOST_SMART_PTR_DETAIL_SP_COUNTED_BASE_CLANG_HPP_INCLUDED"},
{"lineNum":"    2","line":"#define BOOST_SMART_PTR_DETAIL_SP_COUNTED_BASE_CLANG_HPP_INCLUDED"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"// MS compatible compilers support #pragma once"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"#if defined(_MSC_VER) && (_MSC_VER >= 1020)"},
{"lineNum":"    7","line":"# pragma once"},
{"lineNum":"    8","line":"#endif"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"//  detail/sp_counted_base_clang.hpp - __c11 clang intrinsics"},
{"lineNum":"   11","line":"//"},
{"lineNum":"   12","line":"//  Copyright (c) 2007, 2013, 2015 Peter Dimov"},
{"lineNum":"   13","line":"//"},
{"lineNum":"   14","line":"//  Distributed under the Boost Software License, Version 1.0."},
{"lineNum":"   15","line":"//  See accompanying file LICENSE_1_0.txt or copy at"},
{"lineNum":"   16","line":"//  http://www.boost.org/LICENSE_1_0.txt"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"#include <boost/detail/sp_typeinfo.hpp>"},
{"lineNum":"   19","line":"#include <boost/smart_ptr/detail/sp_noexcept.hpp>"},
{"lineNum":"   20","line":"#include <boost/config.hpp>"},
{"lineNum":"   21","line":"#include <boost/cstdint.hpp>"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"namespace boost"},
{"lineNum":"   24","line":"{"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"namespace detail"},
{"lineNum":"   27","line":"{"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"typedef _Atomic( boost::int_least32_t ) atomic_int_least32_t;"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"inline void atomic_increment( atomic_int_least32_t * pw ) BOOST_SP_NOEXCEPT"},
{"lineNum":"   32","line":"{"},
{"lineNum":"   33","line":"    __c11_atomic_fetch_add( pw, 1, __ATOMIC_RELAXED );","class":"lineNoCov","hits":"0","possible_hits":"54",},
{"lineNum":"   34","line":"}"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"inline boost::int_least32_t atomic_decrement( atomic_int_least32_t * pw ) BOOST_SP_NOEXCEPT"},
{"lineNum":"   37","line":"{"},
{"lineNum":"   38","line":"    return __c11_atomic_fetch_sub( pw, 1, __ATOMIC_ACQ_REL );","class":"lineNoCov","hits":"0","possible_hits":"380",},
{"lineNum":"   39","line":"}"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"inline boost::int_least32_t atomic_conditional_increment( atomic_int_least32_t * pw ) BOOST_SP_NOEXCEPT"},
{"lineNum":"   42","line":"{"},
{"lineNum":"   43","line":"    // long r = *pw;"},
{"lineNum":"   44","line":"    // if( r != 0 ) ++*pw;"},
{"lineNum":"   45","line":"    // return r;"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"    boost::int_least32_t r = __c11_atomic_load( pw, __ATOMIC_RELAXED );"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"    for( ;; )"},
{"lineNum":"   50","line":"    {"},
{"lineNum":"   51","line":"        if( r == 0 )"},
{"lineNum":"   52","line":"        {"},
{"lineNum":"   53","line":"            return r;"},
{"lineNum":"   54","line":"        }"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"        if( __c11_atomic_compare_exchange_weak( pw, &r, r + 1, __ATOMIC_RELAXED, __ATOMIC_RELAXED ) )"},
{"lineNum":"   57","line":"        {"},
{"lineNum":"   58","line":"            return r;"},
{"lineNum":"   59","line":"        }"},
{"lineNum":"   60","line":"    }"},
{"lineNum":"   61","line":"}"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"#if defined(__clang__)"},
{"lineNum":"   64","line":"# pragma clang diagnostic push"},
{"lineNum":"   65","line":"# pragma clang diagnostic ignored \"-Wweak-vtables\""},
{"lineNum":"   66","line":"#endif"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"class BOOST_SYMBOL_VISIBLE sp_counted_base"},
{"lineNum":"   69","line":"{"},
{"lineNum":"   70","line":"private:"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"    sp_counted_base( sp_counted_base const & );"},
{"lineNum":"   73","line":"    sp_counted_base & operator= ( sp_counted_base const & );"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"    atomic_int_least32_t use_count_;    // #shared"},
{"lineNum":"   76","line":"    atomic_int_least32_t weak_count_;   // #weak + (#shared != 0)"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"public:"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"    sp_counted_base() BOOST_SP_NOEXCEPT"},
{"lineNum":"   81","line":"    {"},
{"lineNum":"   82","line":"        __c11_atomic_init( &use_count_, 1 );","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   83","line":"        __c11_atomic_init( &weak_count_, 1 );"},
{"lineNum":"   84","line":"    }"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"    virtual ~sp_counted_base() /*BOOST_SP_NOEXCEPT*/"},
{"lineNum":"   87","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   88","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"    // dispose() is called when use_count_ drops to zero, to release"},
{"lineNum":"   91","line":"    // the resources managed by *this."},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"    virtual void dispose() BOOST_SP_NOEXCEPT = 0; // nothrow"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"    // destroy() is called when weak_count_ drops to zero."},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"    virtual void destroy() BOOST_SP_NOEXCEPT // nothrow"},
{"lineNum":"   98","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   99","line":"        delete this;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  100","line":"    }"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"    virtual void * get_deleter( sp_typeinfo const & ti ) BOOST_SP_NOEXCEPT = 0;"},
{"lineNum":"  103","line":"    virtual void * get_local_deleter( sp_typeinfo const & ti ) BOOST_SP_NOEXCEPT = 0;"},
{"lineNum":"  104","line":"    virtual void * get_untyped_deleter() BOOST_SP_NOEXCEPT = 0;"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"    void add_ref_copy() BOOST_SP_NOEXCEPT"},
{"lineNum":"  107","line":"    {"},
{"lineNum":"  108","line":"        atomic_increment( &use_count_ );"},
{"lineNum":"  109","line":"    }"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"    bool add_ref_lock() BOOST_SP_NOEXCEPT // true on success"},
{"lineNum":"  112","line":"    {"},
{"lineNum":"  113","line":"        return atomic_conditional_increment( &use_count_ ) != 0;"},
{"lineNum":"  114","line":"    }"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"    void release() BOOST_SP_NOEXCEPT"},
{"lineNum":"  117","line":"    {"},
{"lineNum":"  118","line":"        if( atomic_decrement( &use_count_ ) == 1 )","class":"lineNoCov","hits":"0","possible_hits":"190",},
{"lineNum":"  119","line":"        {"},
{"lineNum":"  120","line":"            dispose();","class":"lineNoCov","hits":"0","possible_hits":"190",},
{"lineNum":"  121","line":"            weak_release();"},
{"lineNum":"  122","line":"        }"},
{"lineNum":"  123","line":"    }"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"    void weak_add_ref() BOOST_SP_NOEXCEPT"},
{"lineNum":"  126","line":"    {"},
{"lineNum":"  127","line":"        atomic_increment( &weak_count_ );"},
{"lineNum":"  128","line":"    }"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"    void weak_release() BOOST_SP_NOEXCEPT"},
{"lineNum":"  131","line":"    {"},
{"lineNum":"  132","line":"        if( atomic_decrement( &weak_count_ ) == 1 )","class":"lineNoCov","hits":"0","possible_hits":"190",},
{"lineNum":"  133","line":"        {"},
{"lineNum":"  134","line":"            destroy();","class":"lineNoCov","hits":"0","possible_hits":"190",},
{"lineNum":"  135","line":"        }"},
{"lineNum":"  136","line":"    }"},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"    long use_count() const BOOST_SP_NOEXCEPT"},
{"lineNum":"  139","line":"    {"},
{"lineNum":"  140","line":"        return __c11_atomic_load( const_cast< atomic_int_least32_t* >( &use_count_ ), __ATOMIC_ACQUIRE );"},
{"lineNum":"  141","line":"    }"},
{"lineNum":"  142","line":"};"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"#if defined(__clang__)"},
{"lineNum":"  145","line":"# pragma clang diagnostic pop"},
{"lineNum":"  146","line":"#endif"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"} // namespace detail"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"} // namespace boost"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"#endif  // #ifndef BOOST_SMART_PTR_DETAIL_SP_COUNTED_BASE_CLANG_HPP_INCLUDED"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 11, "covered" : 0,};
var merged_data = [];
