var data = {lines:[
{"lineNum":"    1","line":"//"},
{"lineNum":"    2","line":"// Copyright (c) 2013-2019 Antony Polukhin."},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    6","line":"// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"#ifndef BOOST_TYPE_INDEX_STL_TYPE_INDEX_HPP"},
{"lineNum":"   10","line":"#define BOOST_TYPE_INDEX_STL_TYPE_INDEX_HPP"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"/// \\file stl_type_index.hpp"},
{"lineNum":"   13","line":"/// \\brief Contains boost::typeindex::stl_type_index class."},
{"lineNum":"   14","line":"///"},
{"lineNum":"   15","line":"/// boost::typeindex::stl_type_index class can be used as a drop-in replacement"},
{"lineNum":"   16","line":"/// for std::type_index."},
{"lineNum":"   17","line":"///"},
{"lineNum":"   18","line":"/// It is used in situations when RTTI is enabled or typeid() method is available."},
{"lineNum":"   19","line":"/// When typeid() is disabled or BOOST_TYPE_INDEX_FORCE_NO_RTTI_COMPATIBILITY macro"},
{"lineNum":"   20","line":"/// is defined boost::typeindex::ctti is usually used instead of boost::typeindex::stl_type_index."},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"#include <boost/type_index/type_index_facade.hpp>"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"// MSVC is capable of calling typeid(T) even when RTTI is off"},
{"lineNum":"   25","line":"#if defined(BOOST_NO_RTTI) && !defined(BOOST_MSVC)"},
{"lineNum":"   26","line":"#error \"File boost/type_index/stl_type_index.ipp is not usable when typeid() is not available.\""},
{"lineNum":"   27","line":"#endif"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"#include <typeinfo>"},
{"lineNum":"   30","line":"#include <cstring>                                  // std::strcmp, std::strlen, std::strstr"},
{"lineNum":"   31","line":"#include <stdexcept>"},
{"lineNum":"   32","line":"#include <boost/static_assert.hpp>"},
{"lineNum":"   33","line":"#include <boost/throw_exception.hpp>"},
{"lineNum":"   34","line":"#include <boost/core/demangle.hpp>"},
{"lineNum":"   35","line":"#include <boost/type_traits/conditional.hpp>"},
{"lineNum":"   36","line":"#include <boost/type_traits/is_const.hpp>"},
{"lineNum":"   37","line":"#include <boost/type_traits/is_reference.hpp>"},
{"lineNum":"   38","line":"#include <boost/type_traits/is_volatile.hpp>"},
{"lineNum":"   39","line":"#include <boost/type_traits/remove_cv.hpp>"},
{"lineNum":"   40","line":"#include <boost/type_traits/remove_reference.hpp>"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"#if (defined(_MSC_VER) && _MSC_VER > 1600) \\"},
{"lineNum":"   43","line":"    || (defined(__GNUC__) && __GNUC__ == 4 && __GNUC_MINOR__ > 5 && defined(__GXX_EXPERIMENTAL_CXX0X__)) \\"},
{"lineNum":"   44","line":"    || (defined(__GNUC__) && __GNUC__ > 4 && __cplusplus >= 201103)"},
{"lineNum":"   45","line":"#   define BOOST_TYPE_INDEX_STD_TYPE_INDEX_HAS_HASH_CODE"},
{"lineNum":"   46","line":"#else"},
{"lineNum":"   47","line":"#   include <boost/container_hash/hash.hpp>"},
{"lineNum":"   48","line":"#endif"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"#if (defined(__EDG_VERSION__) && __EDG_VERSION__ < 245) \\"},
{"lineNum":"   51","line":"        || (defined(__sgi) && defined(_COMPILER_VERSION) && _COMPILER_VERSION <= 744)"},
{"lineNum":"   52","line":"#   include <boost/type_traits/is_signed.hpp>"},
{"lineNum":"   53","line":"#   include <boost/type_traits/make_signed.hpp>"},
{"lineNum":"   54","line":"#   include <boost/type_traits/type_identity.hpp>"},
{"lineNum":"   55","line":"#endif"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"#ifdef BOOST_HAS_PRAGMA_ONCE"},
{"lineNum":"   58","line":"# pragma once"},
{"lineNum":"   59","line":"#endif"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"namespace boost { namespace typeindex {"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"/// \\class stl_type_index"},
{"lineNum":"   64","line":"/// This class is a wrapper around std::type_info, that workarounds issues and provides"},
{"lineNum":"   65","line":"/// much more rich interface. \\b For \\b description \\b of \\b functions \\b see type_index_facade."},
{"lineNum":"   66","line":"///"},
{"lineNum":"   67","line":"/// This class requires typeid() to work. For cases when RTTI is disabled see ctti_type_index."},
{"lineNum":"   68","line":"class stl_type_index"},
{"lineNum":"   69","line":"    : public type_index_facade<"},
{"lineNum":"   70","line":"        stl_type_index,"},
{"lineNum":"   71","line":"        #ifdef BOOST_NO_STD_TYPEINFO"},
{"lineNum":"   72","line":"            type_info"},
{"lineNum":"   73","line":"        #else"},
{"lineNum":"   74","line":"            std::type_info"},
{"lineNum":"   75","line":"        #endif"},
{"lineNum":"   76","line":"    >"},
{"lineNum":"   77","line":"{"},
{"lineNum":"   78","line":"public:"},
{"lineNum":"   79","line":"#ifdef BOOST_NO_STD_TYPEINFO"},
{"lineNum":"   80","line":"    typedef type_info type_info_t;"},
{"lineNum":"   81","line":"#else"},
{"lineNum":"   82","line":"    typedef std::type_info type_info_t;"},
{"lineNum":"   83","line":"#endif"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"private:"},
{"lineNum":"   86","line":"    const type_info_t* data_;"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"public:"},
{"lineNum":"   89","line":"    inline stl_type_index() BOOST_NOEXCEPT"},
{"lineNum":"   90","line":"        : data_(&typeid(void))"},
{"lineNum":"   91","line":"    {}"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"    inline stl_type_index(const type_info_t& data) BOOST_NOEXCEPT"},
{"lineNum":"   94","line":"        : data_(&data)"},
{"lineNum":"   95","line":"    {}"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"    inline const type_info_t&  type_info() const BOOST_NOEXCEPT;"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"    inline const char*  raw_name() const BOOST_NOEXCEPT;"},
{"lineNum":"  100","line":"    inline const char*  name() const BOOST_NOEXCEPT;"},
{"lineNum":"  101","line":"    inline std::string  pretty_name() const;"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"    inline std::size_t  hash_code() const BOOST_NOEXCEPT;"},
{"lineNum":"  104","line":"    inline bool         equal(const stl_type_index& rhs) const BOOST_NOEXCEPT;"},
{"lineNum":"  105","line":"    inline bool         before(const stl_type_index& rhs) const BOOST_NOEXCEPT;"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"    template <class T>"},
{"lineNum":"  108","line":"    inline static stl_type_index type_id() BOOST_NOEXCEPT;"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"    template <class T>"},
{"lineNum":"  111","line":"    inline static stl_type_index type_id_with_cvr() BOOST_NOEXCEPT;"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"    template <class T>"},
{"lineNum":"  114","line":"    inline static stl_type_index type_id_runtime(const T& value) BOOST_NOEXCEPT;"},
{"lineNum":"  115","line":"};"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"inline const stl_type_index::type_info_t& stl_type_index::type_info() const BOOST_NOEXCEPT {"},
{"lineNum":"  118","line":"    return *data_;"},
{"lineNum":"  119","line":"}"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"inline const char* stl_type_index::raw_name() const BOOST_NOEXCEPT {"},
{"lineNum":"  123","line":"#ifdef _MSC_VER"},
{"lineNum":"  124","line":"    return data_->raw_name();"},
{"lineNum":"  125","line":"#else"},
{"lineNum":"  126","line":"    return data_->name();"},
{"lineNum":"  127","line":"#endif"},
{"lineNum":"  128","line":"}"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"inline const char* stl_type_index::name() const BOOST_NOEXCEPT {"},
{"lineNum":"  131","line":"    return data_->name();"},
{"lineNum":"  132","line":"}"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"inline std::string stl_type_index::pretty_name() const {"},
{"lineNum":"  135","line":"    static const char cvr_saver_name[] = \"boost::typeindex::detail::cvr_saver<\";"},
{"lineNum":"  136","line":"    static BOOST_CONSTEXPR_OR_CONST std::string::size_type cvr_saver_name_len = sizeof(cvr_saver_name) - 1;"},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"    // In case of MSVC demangle() is a no-op, and name() already returns demangled name."},
{"lineNum":"  139","line":"    // In case of GCC and Clang (on non-Windows systems) name() returns mangled name and demangle() undecorates it."},
{"lineNum":"  140","line":"    const boost::core::scoped_demangled_name demangled_name(data_->name());"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"    const char* begin = demangled_name.get();"},
{"lineNum":"  143","line":"    if (!begin) {"},
{"lineNum":"  144","line":"        boost::throw_exception(std::runtime_error(\"Type name demangling failed\"));"},
{"lineNum":"  145","line":"    }"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"    const std::string::size_type len = std::strlen(begin);"},
{"lineNum":"  148","line":"    const char* end = begin + len;"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"    if (len > cvr_saver_name_len) {"},
{"lineNum":"  151","line":"        const char* b = std::strstr(begin, cvr_saver_name);"},
{"lineNum":"  152","line":"        if (b) {"},
{"lineNum":"  153","line":"            b += cvr_saver_name_len;"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"            // Trim leading spaces"},
{"lineNum":"  156","line":"            while (*b == \' \') {         // the string is zero terminated, we won\'t exceed the buffer size"},
{"lineNum":"  157","line":"                ++ b;"},
{"lineNum":"  158","line":"            }"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"            // Skip the closing angle bracket"},
{"lineNum":"  161","line":"            const char* e = end - 1;"},
{"lineNum":"  162","line":"            while (e > b && *e != \'>\') {"},
{"lineNum":"  163","line":"                -- e;"},
{"lineNum":"  164","line":"            }"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"            // Trim trailing spaces"},
{"lineNum":"  167","line":"            while (e > b && *(e - 1) == \' \') {"},
{"lineNum":"  168","line":"                -- e;"},
{"lineNum":"  169","line":"            }"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"            if (b < e) {"},
{"lineNum":"  172","line":"                // Parsing seems to have succeeded, the type name is not empty"},
{"lineNum":"  173","line":"                begin = b;"},
{"lineNum":"  174","line":"                end = e;"},
{"lineNum":"  175","line":"            }"},
{"lineNum":"  176","line":"        }"},
{"lineNum":"  177","line":"    }"},
{"lineNum":"  178","line":""},
{"lineNum":"  179","line":"    return std::string(begin, end);"},
{"lineNum":"  180","line":"}"},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"inline std::size_t stl_type_index::hash_code() const BOOST_NOEXCEPT {"},
{"lineNum":"  184","line":"#ifdef BOOST_TYPE_INDEX_STD_TYPE_INDEX_HAS_HASH_CODE"},
{"lineNum":"  185","line":"    return data_->hash_code();"},
{"lineNum":"  186","line":"#else"},
{"lineNum":"  187","line":"    return boost::hash_range(raw_name(), raw_name() + std::strlen(raw_name()));"},
{"lineNum":"  188","line":"#endif"},
{"lineNum":"  189","line":"}"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"/// @cond"},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"// for this compiler at least, cross-shared-library type_info"},
{"lineNum":"  195","line":"// comparisons don\'t work, so we are using typeid(x).name() instead."},
{"lineNum":"  196","line":"# if (defined(__GNUC__) && (__GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 5))) \\"},
{"lineNum":"  197","line":"    || defined(_AIX) \\"},
{"lineNum":"  198","line":"    || (defined(__sgi) && defined(__host_mips)) \\"},
{"lineNum":"  199","line":"    || (defined(__hpux) && defined(__HP_aCC)) \\"},
{"lineNum":"  200","line":"    || (defined(linux) && defined(__INTEL_COMPILER) && defined(__ICC))"},
{"lineNum":"  201","line":"#  define BOOST_TYPE_INDEX_CLASSINFO_COMPARE_BY_NAMES"},
{"lineNum":"  202","line":"# endif"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"/// @endcond"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"inline bool stl_type_index::equal(const stl_type_index& rhs) const BOOST_NOEXCEPT {"},
{"lineNum":"  207","line":"#ifdef BOOST_TYPE_INDEX_CLASSINFO_COMPARE_BY_NAMES"},
{"lineNum":"  208","line":"    return raw_name() == rhs.raw_name() || !std::strcmp(raw_name(), rhs.raw_name());","class":"lineNoCov","hits":"0","possible_hits":"45",},
{"lineNum":"  209","line":"#else"},
{"lineNum":"  210","line":"    return !!(*data_ == *rhs.data_);"},
{"lineNum":"  211","line":"#endif"},
{"lineNum":"  212","line":"}"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"inline bool stl_type_index::before(const stl_type_index& rhs) const BOOST_NOEXCEPT {"},
{"lineNum":"  215","line":"#ifdef BOOST_TYPE_INDEX_CLASSINFO_COMPARE_BY_NAMES"},
{"lineNum":"  216","line":"    return raw_name() != rhs.raw_name() && std::strcmp(raw_name(), rhs.raw_name()) < 0;"},
{"lineNum":"  217","line":"#else"},
{"lineNum":"  218","line":"    return !!data_->before(*rhs.data_);"},
{"lineNum":"  219","line":"#endif"},
{"lineNum":"  220","line":"}"},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"#undef BOOST_TYPE_INDEX_CLASSINFO_COMPARE_BY_NAMES"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"template <class T>"},
{"lineNum":"  226","line":"inline stl_type_index stl_type_index::type_id() BOOST_NOEXCEPT {"},
{"lineNum":"  227","line":"    typedef BOOST_DEDUCED_TYPENAME boost::remove_reference<T>::type no_ref_t;"},
{"lineNum":"  228","line":"    typedef BOOST_DEDUCED_TYPENAME boost::remove_cv<no_ref_t>::type no_cvr_prefinal_t;"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"    #  if (defined(__EDG_VERSION__) && __EDG_VERSION__ < 245) \\"},
{"lineNum":"  231","line":"        || (defined(__sgi) && defined(_COMPILER_VERSION) && _COMPILER_VERSION <= 744)"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"        // Old EDG-based compilers seem to mistakenly distinguish \'integral\' from \'signed integral\'"},
{"lineNum":"  234","line":"        // in typeid() expressions. Full template specialization for \'integral\' fixes that issue:"},
{"lineNum":"  235","line":"        typedef BOOST_DEDUCED_TYPENAME boost::conditional<"},
{"lineNum":"  236","line":"            boost::is_signed<no_cvr_prefinal_t>::value,"},
{"lineNum":"  237","line":"            boost::make_signed<no_cvr_prefinal_t>,"},
{"lineNum":"  238","line":"            boost::type_identity<no_cvr_prefinal_t>"},
{"lineNum":"  239","line":"        >::type no_cvr_prefinal_lazy_t;"},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"        typedef BOOST_DEDUCED_TYPENAME no_cvr_prefinal_t::type no_cvr_t;"},
{"lineNum":"  242","line":"    #else"},
{"lineNum":"  243","line":"        typedef no_cvr_prefinal_t no_cvr_t;"},
{"lineNum":"  244","line":"    #endif"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"    return typeid(no_cvr_t);"},
{"lineNum":"  247","line":"}"},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"namespace detail {"},
{"lineNum":"  250","line":"    template <class T> class cvr_saver{};"},
{"lineNum":"  251","line":"}"},
{"lineNum":"  252","line":""},
{"lineNum":"  253","line":"template <class T>"},
{"lineNum":"  254","line":"inline stl_type_index stl_type_index::type_id_with_cvr() BOOST_NOEXCEPT {"},
{"lineNum":"  255","line":"    typedef BOOST_DEDUCED_TYPENAME boost::conditional<"},
{"lineNum":"  256","line":"        boost::is_reference<T>::value ||  boost::is_const<T>::value || boost::is_volatile<T>::value,"},
{"lineNum":"  257","line":"        detail::cvr_saver<T>,"},
{"lineNum":"  258","line":"        T"},
{"lineNum":"  259","line":"    >::type type;"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"    return typeid(type);"},
{"lineNum":"  262","line":"}"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"template <class T>"},
{"lineNum":"  266","line":"inline stl_type_index stl_type_index::type_id_runtime(const T& value) BOOST_NOEXCEPT {"},
{"lineNum":"  267","line":"#ifdef BOOST_NO_RTTI"},
{"lineNum":"  268","line":"    return value.boost_type_index_type_id_runtime_();"},
{"lineNum":"  269","line":"#else"},
{"lineNum":"  270","line":"    return typeid(value);"},
{"lineNum":"  271","line":"#endif"},
{"lineNum":"  272","line":"}"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"}} // namespace boost::typeindex"},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"#undef BOOST_TYPE_INDEX_STD_TYPE_INDEX_HAS_HASH_CODE"},
{"lineNum":"  277","line":""},
{"lineNum":"  278","line":"#endif // BOOST_TYPE_INDEX_STL_TYPE_INDEX_HPP"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 1, "covered" : 0,};
var merged_data = [];
