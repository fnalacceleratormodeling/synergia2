var data = {lines:[
{"lineNum":"    1","line":"/*============================================================================="},
{"lineNum":"    2","line":"    Copyright (c) 2014-2015 Kohei Takahashi"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"    Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    5","line":"    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    6","line":"==============================================================================*/"},
{"lineNum":"    7","line":"#ifndef FUSION_VECTOR_11052014_1625"},
{"lineNum":"    8","line":"#define FUSION_VECTOR_11052014_1625"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#include <boost/config.hpp>"},
{"lineNum":"   11","line":"#include <boost/fusion/support/config.hpp>"},
{"lineNum":"   12","line":"#include <boost/fusion/container/vector/detail/config.hpp>"},
{"lineNum":"   13","line":"#include <boost/fusion/container/vector/vector_fwd.hpp>"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   16","line":"// Without variadics, we will use the PP version"},
{"lineNum":"   17","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   18","line":"#if !defined(BOOST_FUSION_HAS_VARIADIC_VECTOR)"},
{"lineNum":"   19","line":"# include <boost/fusion/container/vector/detail/cpp03/vector.hpp>"},
{"lineNum":"   20","line":"#else"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   23","line":"// C++11 interface"},
{"lineNum":"   24","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   25","line":"#include <boost/fusion/support/sequence_base.hpp>"},
{"lineNum":"   26","line":"#include <boost/fusion/support/is_sequence.hpp>"},
{"lineNum":"   27","line":"#include <boost/fusion/support/detail/and.hpp>"},
{"lineNum":"   28","line":"#include <boost/fusion/support/detail/index_sequence.hpp>"},
{"lineNum":"   29","line":"#include <boost/fusion/container/vector/detail/at_impl.hpp>"},
{"lineNum":"   30","line":"#include <boost/fusion/container/vector/detail/value_at_impl.hpp>"},
{"lineNum":"   31","line":"#include <boost/fusion/container/vector/detail/begin_impl.hpp>"},
{"lineNum":"   32","line":"#include <boost/fusion/container/vector/detail/end_impl.hpp>"},
{"lineNum":"   33","line":"#include <boost/fusion/sequence/intrinsic/begin.hpp>"},
{"lineNum":"   34","line":"#include <boost/fusion/sequence/intrinsic/size.hpp>"},
{"lineNum":"   35","line":"#include <boost/fusion/iterator/advance.hpp>"},
{"lineNum":"   36","line":"#include <boost/fusion/iterator/deref.hpp>"},
{"lineNum":"   37","line":"#include <boost/core/enable_if.hpp>"},
{"lineNum":"   38","line":"#include <boost/mpl/int.hpp>"},
{"lineNum":"   39","line":"#include <boost/type_traits/integral_constant.hpp>"},
{"lineNum":"   40","line":"#include <boost/type_traits/is_base_of.hpp>"},
{"lineNum":"   41","line":"#include <boost/type_traits/is_convertible.hpp>"},
{"lineNum":"   42","line":"#include <boost/type_traits/remove_reference.hpp>"},
{"lineNum":"   43","line":"#include <cstddef>"},
{"lineNum":"   44","line":"#include <utility>"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"namespace boost { namespace fusion"},
{"lineNum":"   47","line":"{"},
{"lineNum":"   48","line":"    struct vector_tag;"},
{"lineNum":"   49","line":"    struct random_access_traversal_tag;"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"    namespace vector_detail"},
{"lineNum":"   52","line":"    {"},
{"lineNum":"   53","line":"        struct each_elem {};"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"        template <"},
{"lineNum":"   56","line":"            typename This, typename T, typename T_, std::size_t Size, bool IsSeq"},
{"lineNum":"   57","line":"        >"},
{"lineNum":"   58","line":"        struct can_convert_impl : false_type {};"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"        template <typename This, typename T, typename Sequence, std::size_t Size>"},
{"lineNum":"   61","line":"        struct can_convert_impl<This, T, Sequence, Size, true> : true_type {};"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"        template <typename This, typename Sequence, typename T>"},
{"lineNum":"   64","line":"        struct can_convert_impl<This, Sequence, T, 1, true>"},
{"lineNum":"   65","line":"            : integral_constant<"},
{"lineNum":"   66","line":"                  bool"},
{"lineNum":"   67","line":"                , !is_convertible<"},
{"lineNum":"   68","line":"                      Sequence"},
{"lineNum":"   69","line":"                    , typename fusion::extension::value_at_impl<vector_tag>::"},
{"lineNum":"   70","line":"                          template apply< This, mpl::int_<0> >::type"},
{"lineNum":"   71","line":"                  >::value"},
{"lineNum":"   72","line":"              >"},
{"lineNum":"   73","line":"        {};"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"        template <typename This, typename T, typename T_, std::size_t Size>"},
{"lineNum":"   76","line":"        struct can_convert"},
{"lineNum":"   77","line":"            : can_convert_impl<"},
{"lineNum":"   78","line":"                  This, T, T_, Size, traits::is_sequence<T_>::value"},
{"lineNum":"   79","line":"              >"},
{"lineNum":"   80","line":"        {};"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"        template <typename T, bool IsSeq, std::size_t Size>"},
{"lineNum":"   83","line":"        struct is_longer_sequence_impl : false_type {};"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"        template <typename Sequence, std::size_t Size>"},
{"lineNum":"   86","line":"        struct is_longer_sequence_impl<Sequence, true, Size>"},
{"lineNum":"   87","line":"            : integral_constant<"},
{"lineNum":"   88","line":"                  bool, (fusion::result_of::size<Sequence>::value >= Size)"},
{"lineNum":"   89","line":"              >"},
{"lineNum":"   90","line":"        {};"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"        template<typename T, std::size_t Size>"},
{"lineNum":"   93","line":"        struct is_longer_sequence"},
{"lineNum":"   94","line":"            : is_longer_sequence_impl<T, traits::is_sequence<T>::value, Size>"},
{"lineNum":"   95","line":"        {};"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"        // forward_at_c allows to access Nth element even if ForwardSequence"},
{"lineNum":"   98","line":"        // since fusion::at_c requires RandomAccessSequence."},
{"lineNum":"   99","line":"        namespace result_of"},
{"lineNum":"  100","line":"        {"},
{"lineNum":"  101","line":"            template <typename Sequence, int N>"},
{"lineNum":"  102","line":"            struct forward_at_c"},
{"lineNum":"  103","line":"                : fusion::result_of::deref<"},
{"lineNum":"  104","line":"                      typename fusion::result_of::advance_c<"},
{"lineNum":"  105","line":"                          typename fusion::result_of::begin<"},
{"lineNum":"  106","line":"                              typename remove_reference<Sequence>::type"},
{"lineNum":"  107","line":"                          >::type"},
{"lineNum":"  108","line":"                        , N"},
{"lineNum":"  109","line":"                      >::type"},
{"lineNum":"  110","line":"                  >"},
{"lineNum":"  111","line":"            {};"},
{"lineNum":"  112","line":"        }"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"        template <int N, typename Sequence>"},
{"lineNum":"  115","line":"        BOOST_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"  116","line":"        inline typename result_of::forward_at_c<Sequence, N>::type"},
{"lineNum":"  117","line":"        forward_at_c(Sequence&& seq)"},
{"lineNum":"  118","line":"        {"},
{"lineNum":"  119","line":"            typedef typename"},
{"lineNum":"  120","line":"                result_of::forward_at_c<Sequence, N>::type"},
{"lineNum":"  121","line":"            result;"},
{"lineNum":"  122","line":"            return std::forward<result>(*advance_c<N>(begin(seq)));"},
{"lineNum":"  123","line":"        }"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"        // Object proxy since preserve object order"},
{"lineNum":"  126","line":"        template <std::size_t, typename T>"},
{"lineNum":"  127","line":"        struct store","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  128","line":"        {"},
{"lineNum":"  129","line":"            BOOST_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"  130","line":"            store()"},
{"lineNum":"  131","line":"                : elem() // value-initialized explicitly","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  132","line":"            {}"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"            BOOST_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"  135","line":"            store(store const& rhs)"},
{"lineNum":"  136","line":"                : elem(rhs.elem)","class":"lineNoCov","hits":"0","possible_hits":"30",},
{"lineNum":"  137","line":"            {}"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"            BOOST_CXX14_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"  140","line":"            store&"},
{"lineNum":"  141","line":"            operator=(store const& rhs)"},
{"lineNum":"  142","line":"            {"},
{"lineNum":"  143","line":"                elem = rhs.elem;"},
{"lineNum":"  144","line":"                return *this;"},
{"lineNum":"  145","line":"            }"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"            BOOST_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"  148","line":"            store(store&& rhs)"},
{"lineNum":"  149","line":"                : elem(static_cast<T&&>(rhs.elem))"},
{"lineNum":"  150","line":"            {}"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"            BOOST_CXX14_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"  153","line":"            store&"},
{"lineNum":"  154","line":"            operator=(store&& rhs)"},
{"lineNum":"  155","line":"            {"},
{"lineNum":"  156","line":"                elem = static_cast<T&&>(rhs.elem);"},
{"lineNum":"  157","line":"                return *this;"},
{"lineNum":"  158","line":"            }"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"            template <"},
{"lineNum":"  161","line":"                typename U"},
{"lineNum":"  162","line":"              , typename = typename boost::disable_if<"},
{"lineNum":"  163","line":"                    is_base_of<store, typename remove_reference<U>::type>"},
{"lineNum":"  164","line":"                >::type"},
{"lineNum":"  165","line":"            >"},
{"lineNum":"  166","line":"            BOOST_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"  167","line":"            store(U&& rhs)"},
{"lineNum":"  168","line":"                : elem(std::forward<U>(rhs))","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  169","line":"            {}"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"            using elem_type = T;"},
{"lineNum":"  172","line":"            T elem;"},
{"lineNum":"  173","line":"        };"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"        // placed outside of vector_data due to GCC < 6 bug"},
{"lineNum":"  176","line":"        template <std::size_t J, typename U>"},
{"lineNum":"  177","line":"        static inline BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"  178","line":"        store<J, U> store_at_impl(store<J, U>*);"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"        template <typename I, typename ...T>"},
{"lineNum":"  181","line":"        struct vector_data;"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"        template <std::size_t ...I, typename ...T>"},
{"lineNum":"  184","line":"        struct vector_data<detail::index_sequence<I...>, T...>","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":"  185","line":"            : store<I, T>..."},
{"lineNum":"  186","line":"            , sequence_base<vector_data<detail::index_sequence<I...>, T...> >"},
{"lineNum":"  187","line":"        {"},
{"lineNum":"  188","line":"            typedef vector_tag                  fusion_tag;"},
{"lineNum":"  189","line":"            typedef fusion_sequence_tag         tag; // this gets picked up by MPL"},
{"lineNum":"  190","line":"            typedef mpl::false_                 is_view;"},
{"lineNum":"  191","line":"            typedef random_access_traversal_tag category;"},
{"lineNum":"  192","line":"            typedef mpl::int_<sizeof...(T)>     size;"},
{"lineNum":"  193","line":"            typedef vector<T...>                type_sequence;"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"            BOOST_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"  196","line":"            BOOST_DEFAULTED_FUNCTION(vector_data(), {})"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"            template <"},
{"lineNum":"  199","line":"                typename Sequence"},
{"lineNum":"  200","line":"              , typename Sequence_ = typename remove_reference<Sequence>::type"},
{"lineNum":"  201","line":"              , typename = typename boost::enable_if<"},
{"lineNum":"  202","line":"                    can_convert<vector_data, Sequence, Sequence_, sizeof...(I)>"},
{"lineNum":"  203","line":"                >::type"},
{"lineNum":"  204","line":"            >"},
{"lineNum":"  205","line":"            BOOST_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"  206","line":"            explicit"},
{"lineNum":"  207","line":"            vector_data(each_elem, Sequence&& rhs)"},
{"lineNum":"  208","line":"                : store<I, T>(forward_at_c<I>(std::forward<Sequence>(rhs)))..."},
{"lineNum":"  209","line":"            {}"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"            template <typename ...U>"},
{"lineNum":"  212","line":"            BOOST_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"  213","line":"            explicit"},
{"lineNum":"  214","line":"            vector_data(each_elem, U&&... var)"},
{"lineNum":"  215","line":"                : store<I, T>(std::forward<U>(var))..."},
{"lineNum":"  216","line":"            {}"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"            template <typename Sequence>"},
{"lineNum":"  219","line":"            BOOST_CXX14_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"  220","line":"            void"},
{"lineNum":"  221","line":"            assign_sequence(Sequence&& seq)"},
{"lineNum":"  222","line":"            {"},
{"lineNum":"  223","line":"                assign(std::forward<Sequence>(seq), detail::index_sequence<I...>());"},
{"lineNum":"  224","line":"            }"},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"            template <typename Sequence>"},
{"lineNum":"  227","line":"            BOOST_CXX14_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"  228","line":"            void"},
{"lineNum":"  229","line":"            assign(Sequence&&, detail::index_sequence<>) {}"},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"            template <typename Sequence, std::size_t N, std::size_t ...M>"},
{"lineNum":"  232","line":"            BOOST_CXX14_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"  233","line":"            void"},
{"lineNum":"  234","line":"            assign(Sequence&& seq, detail::index_sequence<N, M...>)"},
{"lineNum":"  235","line":"            {"},
{"lineNum":"  236","line":"                at_impl(mpl::int_<N>()) = vector_detail::forward_at_c<N>(seq);"},
{"lineNum":"  237","line":"                assign(std::forward<Sequence>(seq), detail::index_sequence<M...>());"},
{"lineNum":"  238","line":"            }"},
{"lineNum":"  239","line":""},
{"lineNum":"  240","line":"        private:"},
{"lineNum":"  241","line":"            template <std::size_t J>"},
{"lineNum":"  242","line":"            using store_at = decltype(store_at_impl<J>(static_cast<vector_data*>(nullptr)));"},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"        public:"},
{"lineNum":"  245","line":"            template <typename J>"},
{"lineNum":"  246","line":"            BOOST_CXX14_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"  247","line":"            typename store_at<J::value>::elem_type& at_impl(J)"},
{"lineNum":"  248","line":"            {"},
{"lineNum":"  249","line":"                return store_at<J::value>::elem;","class":"lineNoCov","hits":"0","possible_hits":"28",},
{"lineNum":"  250","line":"            }"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"            template <typename J>"},
{"lineNum":"  253","line":"            BOOST_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"  254","line":"            typename store_at<J::value>::elem_type const& at_impl(J) const"},
{"lineNum":"  255","line":"            {"},
{"lineNum":"  256","line":"                return store_at<J::value>::elem;"},
{"lineNum":"  257","line":"            }"},
{"lineNum":"  258","line":"        };"},
{"lineNum":"  259","line":"    } // namespace boost::fusion::vector_detail"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"    template <typename... T>"},
{"lineNum":"  262","line":"    struct vector"},
{"lineNum":"  263","line":"        : vector_detail::vector_data<"},
{"lineNum":"  264","line":"              typename detail::make_index_sequence<sizeof...(T)>::type"},
{"lineNum":"  265","line":"            , T..."},
{"lineNum":"  266","line":"          >"},
{"lineNum":"  267","line":"    {"},
{"lineNum":"  268","line":"        typedef vector_detail::vector_data<"},
{"lineNum":"  269","line":"            typename detail::make_index_sequence<sizeof...(T)>::type"},
{"lineNum":"  270","line":"          , T..."},
{"lineNum":"  271","line":"        > base;"},
{"lineNum":"  272","line":""},
{"lineNum":"  273","line":"        BOOST_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"  274","line":"        BOOST_DEFAULTED_FUNCTION(vector(), {})"},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"        template <"},
{"lineNum":"  277","line":"            typename... U"},
{"lineNum":"  278","line":"          , typename = typename boost::enable_if_c<("},
{"lineNum":"  279","line":"                sizeof...(U) >= 1 &&"},
{"lineNum":"  280","line":"                fusion::detail::and_<is_convertible<U, T>...>::value &&"},
{"lineNum":"  281","line":"                !fusion::detail::and_<"},
{"lineNum":"  282","line":"                    is_base_of<vector, typename remove_reference<U>::type>..."},
{"lineNum":"  283","line":"                >::value"},
{"lineNum":"  284","line":"            )>::type"},
{"lineNum":"  285","line":"        >"},
{"lineNum":"  286","line":"        // XXX: constexpr become error due to pull-request #79, booooo!!"},
{"lineNum":"  287","line":"        //      In the (near) future release, should be fixed."},
{"lineNum":"  288","line":"        /* BOOST_CONSTEXPR */ BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"  289","line":"        explicit vector(U&&... u)"},
{"lineNum":"  290","line":"            : base(vector_detail::each_elem(), std::forward<U>(u)...)"},
{"lineNum":"  291","line":"        {}"},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"        template <"},
{"lineNum":"  294","line":"            typename Sequence"},
{"lineNum":"  295","line":"          , typename = typename boost::enable_if_c<"},
{"lineNum":"  296","line":"                vector_detail::is_longer_sequence<"},
{"lineNum":"  297","line":"                    typename remove_reference<Sequence>::type, sizeof...(T)"},
{"lineNum":"  298","line":"                >::value"},
{"lineNum":"  299","line":"            >::type"},
{"lineNum":"  300","line":"        >"},
{"lineNum":"  301","line":"        BOOST_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"  302","line":"        vector(Sequence&& seq)"},
{"lineNum":"  303","line":"            : base(vector_detail::each_elem(), std::forward<Sequence>(seq))"},
{"lineNum":"  304","line":"        {}"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"        template <typename Sequence>"},
{"lineNum":"  307","line":"        BOOST_CXX14_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"  308","line":"        vector&"},
{"lineNum":"  309","line":"        operator=(Sequence&& rhs)"},
{"lineNum":"  310","line":"        {"},
{"lineNum":"  311","line":"            base::assign_sequence(std::forward<Sequence>(rhs));"},
{"lineNum":"  312","line":"            return *this;"},
{"lineNum":"  313","line":"        }"},
{"lineNum":"  314","line":"    };"},
{"lineNum":"  315","line":"}}"},
{"lineNum":"  316","line":""},
{"lineNum":"  317","line":"#endif"},
{"lineNum":"  318","line":"#endif"},
{"lineNum":"  319","line":""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 6, "covered" : 0,};
var merged_data = [];
