var data = {lines:[
{"lineNum":"    1","line":"/*"},
{"lineNum":"    2","line":"//@HEADER"},
{"lineNum":"    3","line":"// ************************************************************************"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"//                        Kokkos v. 3.0"},
{"lineNum":"    6","line":"//       Copyright (2020) National Technology & Engineering"},
{"lineNum":"    7","line":"//               Solutions of Sandia, LLC (NTESS)."},
{"lineNum":"    8","line":"//"},
{"lineNum":"    9","line":"// Under the terms of Contract DE-NA0003525 with NTESS,"},
{"lineNum":"   10","line":"// the U.S. Government retains certain rights in this software."},
{"lineNum":"   11","line":"//"},
{"lineNum":"   12","line":"// Redistribution and use in source and binary forms, with or without"},
{"lineNum":"   13","line":"// modification, are permitted provided that the following conditions are"},
{"lineNum":"   14","line":"// met:"},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"// 1. Redistributions of source code must retain the above copyright"},
{"lineNum":"   17","line":"// notice, this list of conditions and the following disclaimer."},
{"lineNum":"   18","line":"//"},
{"lineNum":"   19","line":"// 2. Redistributions in binary form must reproduce the above copyright"},
{"lineNum":"   20","line":"// notice, this list of conditions and the following disclaimer in the"},
{"lineNum":"   21","line":"// documentation and/or other materials provided with the distribution."},
{"lineNum":"   22","line":"//"},
{"lineNum":"   23","line":"// 3. Neither the name of the Corporation nor the names of the"},
{"lineNum":"   24","line":"// contributors may be used to endorse or promote products derived from"},
{"lineNum":"   25","line":"// this software without specific prior written permission."},
{"lineNum":"   26","line":"//"},
{"lineNum":"   27","line":"// THIS SOFTWARE IS PROVIDED BY NTESS \"AS IS\" AND ANY"},
{"lineNum":"   28","line":"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"},
{"lineNum":"   29","line":"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR"},
{"lineNum":"   30","line":"// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NTESS OR THE"},
{"lineNum":"   31","line":"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,"},
{"lineNum":"   32","line":"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,"},
{"lineNum":"   33","line":"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR"},
{"lineNum":"   34","line":"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF"},
{"lineNum":"   35","line":"// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING"},
{"lineNum":"   36","line":"// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"},
{"lineNum":"   37","line":"// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   38","line":"//"},
{"lineNum":"   39","line":"// Questions? Contact Christian R. Trott (crtrott@sandia.gov)"},
{"lineNum":"   40","line":"//"},
{"lineNum":"   41","line":"// ************************************************************************"},
{"lineNum":"   42","line":"//@HEADER"},
{"lineNum":"   43","line":"*/"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"#include <Kokkos_Core.hpp>"},
{"lineNum":"   46","line":"#include <impl/Kokkos_Error.hpp>"},
{"lineNum":"   47","line":"#include <impl/Kokkos_ExecSpaceInitializer.hpp>"},
{"lineNum":"   48","line":"#include <cctype>"},
{"lineNum":"   49","line":"#include <cstring>"},
{"lineNum":"   50","line":"#include <iostream>"},
{"lineNum":"   51","line":"#include <sstream>"},
{"lineNum":"   52","line":"#include <cstdlib>"},
{"lineNum":"   53","line":"#include <stack>"},
{"lineNum":"   54","line":"#include <functional>"},
{"lineNum":"   55","line":"#include <list>"},
{"lineNum":"   56","line":"#include <cerrno>"},
{"lineNum":"   57","line":"#include <regex>"},
{"lineNum":"   58","line":"#ifndef _WIN32"},
{"lineNum":"   59","line":"#include <unistd.h>"},
{"lineNum":"   60","line":"#else"},
{"lineNum":"   61","line":"#include <Windows.h>"},
{"lineNum":"   62","line":"#endif"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"//----------------------------------------------------------------------------"},
{"lineNum":"   65","line":"namespace {"},
{"lineNum":"   66","line":"bool g_is_initialized = false;"},
{"lineNum":"   67","line":"bool g_show_warnings  = true;"},
{"lineNum":"   68","line":"bool g_tune_internals = false;"},
{"lineNum":"   69","line":"// When compiling with clang/LLVM and using the GNU (GCC) C++ Standard Library"},
{"lineNum":"   70","line":"// (any recent version between GCC 7.3 and GCC 9.2), std::deque SEGV\'s during"},
{"lineNum":"   71","line":"// the unwinding of the atexit(3C) handlers at program termination.  However,"},
{"lineNum":"   72","line":"// this bug is not observable when building with GCC."},
{"lineNum":"   73","line":"// As an added bonus, std::list<T> provides constant insertion and"},
{"lineNum":"   74","line":"// deletion time complexity, which translates to better run-time performance. As"},
{"lineNum":"   75","line":"// opposed to std::deque<T> which does not provide the same constant time"},
{"lineNum":"   76","line":"// complexity for inserts/removals, since std::deque<T> is implemented as a"},
{"lineNum":"   77","line":"// segmented array."},
{"lineNum":"   78","line":"using hook_function_type = std::function<void()>;"},
{"lineNum":"   79","line":"std::stack<hook_function_type, std::list<hook_function_type>> finalize_hooks;"},
{"lineNum":"   80","line":"}  // namespace"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"namespace Kokkos {"},
{"lineNum":"   83","line":"namespace Impl {"},
{"lineNum":"   84","line":"/**"},
{"lineNum":"   85","line":" * The category is only used in printing, tools"},
{"lineNum":"   86","line":" * get all metadata free of category"},
{"lineNum":"   87","line":" */"},
{"lineNum":"   88","line":"using metadata_category_type = std::string;"},
{"lineNum":"   89","line":"using metadata_key_type      = std::string;"},
{"lineNum":"   90","line":"using metadata_value_type    = std::string;"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"std::map<metadata_category_type,"},
{"lineNum":"   93","line":"         std::map<metadata_key_type, metadata_value_type>>"},
{"lineNum":"   94","line":"    metadata_map;"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"void declare_configuration_metadata(const std::string& category,"},
{"lineNum":"   97","line":"                                    const std::string& key,"},
{"lineNum":"   98","line":"                                    const std::string& value) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   99","line":"  metadata_map[category][key] = value;","class":"lineNoCov","hits":"0","possible_hits":"27",},
{"lineNum":"  100","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"ExecSpaceManager& ExecSpaceManager::get_instance() {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  103","line":"  static ExecSpaceManager space_initializer = {};","class":"lineNoCov","hits":"0","possible_hits":"15",},
{"lineNum":"  104","line":"  return space_initializer;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  105","line":"}"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"void ExecSpaceManager::register_space_factory("},
{"lineNum":"  108","line":"    const std::string name, std::unique_ptr<ExecSpaceInitializerBase> space) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  109","line":"  exec_space_factory_list[name] = std::move(space);"},
{"lineNum":"  110","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"void ExecSpaceManager::initialize_spaces(const Kokkos::InitArguments& args) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  113","line":"  // Note: the names of the execution spaces, used as keys in the map, encode"},
{"lineNum":"  114","line":"  // the ordering of the initialization code from the old initializtion stuff."},
{"lineNum":"  115","line":"  // Eventually, we may want to do something less brittle than this, but for now"},
{"lineNum":"  116","line":"  // we\'re just preserving compatibility with the old implementation."},
{"lineNum":"  117","line":"  for (auto& to_init : exec_space_factory_list) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  118","line":"    to_init.second->initialize(args);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  119","line":"  }"},
{"lineNum":"  120","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"void ExecSpaceManager::finalize_spaces(const bool all_spaces) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  123","line":"  for (auto& to_finalize : exec_space_factory_list) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  124","line":"    to_finalize.second->finalize(all_spaces);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  125","line":"  }"},
{"lineNum":"  126","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"void ExecSpaceManager::static_fence() {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  129","line":"  for (auto& to_fence : exec_space_factory_list) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  130","line":"    to_fence.second->fence();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  131","line":"  }"},
{"lineNum":"  132","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  133","line":"void ExecSpaceManager::print_configuration(std::ostream& msg,"},
{"lineNum":"  134","line":"                                           const bool detail) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  135","line":"  for (auto& to_print : exec_space_factory_list) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  136","line":"    to_print.second->print_configuration(msg, detail);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  137","line":"  }"},
{"lineNum":"  138","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"int get_ctest_gpu(const char* local_rank_str) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  141","line":"  auto const* ctest_kokkos_device_type ="},
{"lineNum":"  142","line":"      std::getenv(\"CTEST_KOKKOS_DEVICE_TYPE\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  143","line":"  if (!ctest_kokkos_device_type) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  144","line":"    return 0;"},
{"lineNum":"  145","line":"  }"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"  auto const* ctest_resource_group_count_str ="},
{"lineNum":"  148","line":"      std::getenv(\"CTEST_RESOURCE_GROUP_COUNT\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  149","line":"  if (!ctest_resource_group_count_str) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  150","line":"    return 0;"},
{"lineNum":"  151","line":"  }"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"  // Make sure rank is within bounds of resource groups specified by CTest"},
{"lineNum":"  154","line":"  auto resource_group_count = std::stoi(ctest_resource_group_count_str);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  155","line":"  auto local_rank           = std::stoi(local_rank_str);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  156","line":"  if (local_rank >= resource_group_count) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  157","line":"    std::ostringstream ss;"},
{"lineNum":"  158","line":"    ss << \"Error: local rank \" << local_rank","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  159","line":"       << \" is outside the bounds of resource groups provided by CTest. Raised\""},
{"lineNum":"  160","line":"       << \" by Kokkos::Impl::get_ctest_gpu().\";"},
{"lineNum":"  161","line":"    throw_runtime_exception(ss.str());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  162","line":"  }"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"  // Get the resource types allocated to this resource group"},
{"lineNum":"  165","line":"  std::ostringstream ctest_resource_group;"},
{"lineNum":"  166","line":"  ctest_resource_group << \"CTEST_RESOURCE_GROUP_\" << local_rank;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  167","line":"  std::string ctest_resource_group_name = ctest_resource_group.str();"},
{"lineNum":"  168","line":"  auto const* ctest_resource_group_str ="},
{"lineNum":"  169","line":"      std::getenv(ctest_resource_group_name.c_str());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  170","line":"  if (!ctest_resource_group_str) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  171","line":"    std::ostringstream ss;"},
{"lineNum":"  172","line":"    ss << \"Error: \" << ctest_resource_group_name << \" is not specified. Raised\""},
{"lineNum":"  173","line":"       << \" by Kokkos::Impl::get_ctest_gpu().\";"},
{"lineNum":"  174","line":"    throw_runtime_exception(ss.str());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  175","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"  // Look for the device type specified in CTEST_KOKKOS_DEVICE_TYPE"},
{"lineNum":"  178","line":"  bool found_device                        = false;"},
{"lineNum":"  179","line":"  std::string ctest_resource_group_cxx_str = ctest_resource_group_str;"},
{"lineNum":"  180","line":"  std::istringstream instream(ctest_resource_group_cxx_str);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  181","line":"  while (true) {"},
{"lineNum":"  182","line":"    std::string devName;"},
{"lineNum":"  183","line":"    std::getline(instream, devName, \',\');","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  184","line":"    if (devName == ctest_kokkos_device_type) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  185","line":"      found_device = true;"},
{"lineNum":"  186","line":"      break;"},
{"lineNum":"  187","line":"    }"},
{"lineNum":"  188","line":"    if (instream.eof() || devName.length() == 0) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  189","line":"      break;"},
{"lineNum":"  190","line":"    }"},
{"lineNum":"  191","line":"  }"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"  if (!found_device) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  194","line":"    std::ostringstream ss;"},
{"lineNum":"  195","line":"    ss << \"Error: device type \'\" << ctest_kokkos_device_type"},
{"lineNum":"  196","line":"       << \"\' not included in \" << ctest_resource_group_name"},
{"lineNum":"  197","line":"       << \". Raised by Kokkos::Impl::get_ctest_gpu().\";"},
{"lineNum":"  198","line":"    throw_runtime_exception(ss.str());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  199","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"  // Get the device ID"},
{"lineNum":"  202","line":"  std::string ctest_device_type_upper = ctest_kokkos_device_type;"},
{"lineNum":"  203","line":"  for (auto& c : ctest_device_type_upper) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  204","line":"    c = std::toupper(c);","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  205","line":"  }"},
{"lineNum":"  206","line":"  ctest_resource_group << \"_\" << ctest_device_type_upper;"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"  std::string ctest_resource_group_id_name = ctest_resource_group.str();"},
{"lineNum":"  209","line":"  auto resource_str = std::getenv(ctest_resource_group_id_name.c_str());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  210","line":"  if (!resource_str) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  211","line":"    std::ostringstream ss;"},
{"lineNum":"  212","line":"    ss << \"Error: \" << ctest_resource_group_id_name"},
{"lineNum":"  213","line":"       << \" is not specified. Raised by Kokkos::Impl::get_ctest_gpu().\";"},
{"lineNum":"  214","line":"    throw_runtime_exception(ss.str());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  215","line":"  }"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"  auto const* comma = std::strchr(resource_str, \',\');","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  218","line":"  if (!comma || strncmp(resource_str, \"id:\", 3)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  219","line":"    std::ostringstream ss;"},
{"lineNum":"  220","line":"    ss << \"Error: invalid value of \" << ctest_resource_group_id_name << \": \'\""},
{"lineNum":"  221","line":"       << resource_str << \"\'. Raised by Kokkos::Impl::get_ctest_gpu().\";"},
{"lineNum":"  222","line":"    throw_runtime_exception(ss.str());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  223","line":"  }"},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"  std::string id(resource_str + 3, comma - resource_str - 3);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  226","line":"  return std::stoi(id.c_str());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  227","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"// function to extract gpu # from args"},
{"lineNum":"  230","line":"int get_gpu(const InitArguments& args) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  231","line":"  int use_gpu        = args.device_id;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  232","line":"  const int ndevices = [](int num_devices) -> int {"},
{"lineNum":"  233","line":"    if (num_devices > 0) return num_devices;"},
{"lineNum":"  234","line":"#if defined(KOKKOS_ENABLE_CUDA)"},
{"lineNum":"  235","line":"    return Cuda::detect_device_count();"},
{"lineNum":"  236","line":"#elif defined(KOKKOS_ENABLE_HIP)"},
{"lineNum":"  237","line":"    return Experimental::HIP::detect_device_count();"},
{"lineNum":"  238","line":"#elif defined(KOKKOS_ENABLE_SYCL)"},
{"lineNum":"  239","line":"    return sycl::device::get_devices(sycl::info::device_type::gpu).size();"},
{"lineNum":"  240","line":"#else"},
{"lineNum":"  241","line":"    return num_devices;"},
{"lineNum":"  242","line":"#endif"},
{"lineNum":"  243","line":"  }(args.ndevices);"},
{"lineNum":"  244","line":"  const int skip_device = args.skip_device;"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"  // if the exact device is not set, but ndevices was given, assign round-robin"},
{"lineNum":"  247","line":"  // using on-node MPI rank"},
{"lineNum":"  248","line":"  if (use_gpu < 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  249","line":"    auto const* local_rank_str ="},
{"lineNum":"  250","line":"        std::getenv(\"OMPI_COMM_WORLD_LOCAL_RANK\");  // OpenMPI","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  251","line":"    if (!local_rank_str)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  252","line":"      local_rank_str = std::getenv(\"MV2_COMM_WORLD_LOCAL_RANK\");  // MVAPICH2","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  253","line":"    if (!local_rank_str)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  254","line":"      local_rank_str = std::getenv(\"SLURM_LOCALID\");  // SLURM","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"    auto const* ctest_kokkos_device_type ="},
{"lineNum":"  257","line":"        std::getenv(\"CTEST_KOKKOS_DEVICE_TYPE\");  // CTest","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  258","line":"    auto const* ctest_resource_group_count_str ="},
{"lineNum":"  259","line":"        std::getenv(\"CTEST_RESOURCE_GROUP_COUNT\");  // CTest","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  260","line":"    if (ctest_kokkos_device_type && ctest_resource_group_count_str &&","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  261","line":"        local_rank_str) {"},
{"lineNum":"  262","line":"      // Use the device assigned by CTest"},
{"lineNum":"  263","line":"      use_gpu = get_ctest_gpu(local_rank_str);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  264","line":"    } else if (ndevices > 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  265","line":"      // Use the device assigned by the rank"},
{"lineNum":"  266","line":"      if (local_rank_str) {"},
{"lineNum":"  267","line":"        auto local_rank = std::stoi(local_rank_str);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  268","line":"        use_gpu         = local_rank % ndevices;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  269","line":"      } else {"},
{"lineNum":"  270","line":"        // user only gave use ndevices, but the MPI environment variable wasn\'t"},
{"lineNum":"  271","line":"        // set. start with GPU 0 at this point"},
{"lineNum":"  272","line":"        use_gpu = 0;"},
{"lineNum":"  273","line":"      }"},
{"lineNum":"  274","line":"    }"},
{"lineNum":"  275","line":"    // shift assignments over by one so no one is assigned to \"skip_device\""},
{"lineNum":"  276","line":"    if (use_gpu >= skip_device) ++use_gpu;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  277","line":"  }"},
{"lineNum":"  278","line":"  return use_gpu;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  279","line":"}"},
{"lineNum":"  280","line":"namespace {"},
{"lineNum":"  281","line":"bool is_unsigned_int(const char* str) {"},
{"lineNum":"  282","line":"  const size_t len = strlen(str);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  283","line":"  for (size_t i = 0; i < len; ++i) {","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  284","line":"    if (!isdigit(str[i])) {","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  285","line":"      return false;"},
{"lineNum":"  286","line":"    }"},
{"lineNum":"  287","line":"  }"},
{"lineNum":"  288","line":"  return true;"},
{"lineNum":"  289","line":"}"},
{"lineNum":"  290","line":""},
{"lineNum":"  291","line":"void initialize_backends(const InitArguments& args) {"},
{"lineNum":"  292","line":"// This is an experimental setting"},
{"lineNum":"  293","line":"// For KNL in Flat mode this variable should be set, so that"},
{"lineNum":"  294","line":"// memkind allocates high bandwidth memory correctly."},
{"lineNum":"  295","line":"#ifdef KOKKOS_ENABLE_HBWSPACE"},
{"lineNum":"  296","line":"  setenv(\"MEMKIND_HBW_NODES\", \"1\", 0);"},
{"lineNum":"  297","line":"#endif"},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"  Impl::ExecSpaceManager::get_instance().initialize_spaces(args);"},
{"lineNum":"  300","line":"}"},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":"void initialize_profiling(const InitArguments& args) {"},
{"lineNum":"  303","line":"  Kokkos::Profiling::initialize(args.tool_lib);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  304","line":"  if (args.tool_help) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  305","line":"    if (!Kokkos::Tools::printHelp(args.tool_args)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  306","line":"      std::cerr << \"Tool has not provided a help message\" << std::endl;"},
{"lineNum":"  307","line":"    }"},
{"lineNum":"  308","line":"    g_is_initialized = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  309","line":"    ::Kokkos::finalize();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  310","line":"    std::exit(EXIT_SUCCESS);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  311","line":"  }"},
{"lineNum":"  312","line":"  Kokkos::Tools::parseArgs(args.tool_args);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  313","line":"  for (const auto& category_value : Kokkos::Impl::metadata_map) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  314","line":"    for (const auto& key_value : category_value.second) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  315","line":"      Kokkos::Tools::declareMetadata(key_value.first, key_value.second);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  316","line":"    }"},
{"lineNum":"  317","line":"  }"},
{"lineNum":"  318","line":"}"},
{"lineNum":"  319","line":""},
{"lineNum":"  320","line":"std::string version_string_from_int(int version_number) {"},
{"lineNum":"  321","line":"  std::stringstream str_builder;"},
{"lineNum":"  322","line":"  str_builder << version_number / 10000 << \".\" << (version_number % 10000) / 100","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  323","line":"              << \".\" << version_number % 100;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  324","line":"  return str_builder.str();"},
{"lineNum":"  325","line":"}"},
{"lineNum":"  326","line":"void pre_initialize_internal(const InitArguments& args) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  327","line":"  if (args.disable_warnings) g_show_warnings = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  328","line":"  if (args.tune_internals) g_tune_internals = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  329","line":"  declare_configuration_metadata(\"version_info\", \"Kokkos Version\","},
{"lineNum":"  330","line":"                                 version_string_from_int(KOKKOS_VERSION));"},
{"lineNum":"  331","line":"#ifdef KOKKOS_COMPILER_APPLECC"},
{"lineNum":"  332","line":"  declare_configuration_metadata(\"compiler_version\", \"KOKKOS_COMPILER_APPLECC\","},
{"lineNum":"  333","line":"                                 std::to_string(KOKKOS_COMPILER_APPLECC));"},
{"lineNum":"  334","line":"  declare_configuration_metadata(\"tools_only\", \"compiler_family\", \"apple\");"},
{"lineNum":"  335","line":"#endif"},
{"lineNum":"  336","line":"#ifdef KOKKOS_COMPILER_CLANG"},
{"lineNum":"  337","line":"  declare_configuration_metadata(\"compiler_version\", \"KOKKOS_COMPILER_CLANG\","},
{"lineNum":"  338","line":"                                 std::to_string(KOKKOS_COMPILER_CLANG));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  339","line":"  declare_configuration_metadata(\"tools_only\", \"compiler_family\", \"clang\");"},
{"lineNum":"  340","line":"#endif"},
{"lineNum":"  341","line":"#ifdef KOKKOS_COMPILER_CRAYC"},
{"lineNum":"  342","line":"  declare_configuration_metadata(\"compiler_version\", \"KOKKOS_COMPILER_CRAYC\","},
{"lineNum":"  343","line":"                                 std::to_string(KOKKOS_COMPILER_CRAYC));"},
{"lineNum":"  344","line":"  declare_configuration_metadata(\"tools_only\", \"compiler_family\", \"cray\");"},
{"lineNum":"  345","line":"#endif"},
{"lineNum":"  346","line":"#ifdef KOKKOS_COMPILER_GNU"},
{"lineNum":"  347","line":"  declare_configuration_metadata(\"compiler_version\", \"KOKKOS_COMPILER_GNU\","},
{"lineNum":"  348","line":"                                 std::to_string(KOKKOS_COMPILER_GNU));"},
{"lineNum":"  349","line":"  declare_configuration_metadata(\"tools_only\", \"compiler_family\", \"gnu\");"},
{"lineNum":"  350","line":"#endif"},
{"lineNum":"  351","line":"#ifdef KOKKOS_COMPILER_IBM"},
{"lineNum":"  352","line":"  declare_configuration_metadata(\"compiler_version\", \"KOKKOS_COMPILER_IBM\","},
{"lineNum":"  353","line":"                                 std::to_string(KOKKOS_COMPILER_IBM));"},
{"lineNum":"  354","line":"  declare_configuration_metadata(\"tools_only\", \"compiler_family\", \"ibm\");"},
{"lineNum":"  355","line":"#endif"},
{"lineNum":"  356","line":"#ifdef KOKKOS_COMPILER_INTEL"},
{"lineNum":"  357","line":"  declare_configuration_metadata(\"compiler_version\", \"KOKKOS_COMPILER_INTEL\","},
{"lineNum":"  358","line":"                                 std::to_string(KOKKOS_COMPILER_INTEL));"},
{"lineNum":"  359","line":"  declare_configuration_metadata(\"tools_only\", \"compiler_family\", \"intel\");"},
{"lineNum":"  360","line":"#endif"},
{"lineNum":"  361","line":"#ifdef KOKKOS_COMPILER_NVCC"},
{"lineNum":"  362","line":"  declare_configuration_metadata(\"compiler_version\", \"KOKKOS_COMPILER_NVCC\","},
{"lineNum":"  363","line":"                                 std::to_string(KOKKOS_COMPILER_NVCC));"},
{"lineNum":"  364","line":"  declare_configuration_metadata(\"tools_only\", \"compiler_family\", \"nvcc\");"},
{"lineNum":"  365","line":"#endif"},
{"lineNum":"  366","line":"#ifdef KOKKOS_COMPILER_PGI"},
{"lineNum":"  367","line":"  declare_configuration_metadata(\"compiler_version\", \"KOKKOS_COMPILER_PGI\","},
{"lineNum":"  368","line":"                                 std::to_string(KOKKOS_COMPILER_PGI));"},
{"lineNum":"  369","line":"  declare_configuration_metadata(\"tools_only\", \"compiler_family\", \"pgi\");"},
{"lineNum":"  370","line":"#endif"},
{"lineNum":"  371","line":"#ifdef KOKKOS_COMPILER_MSVC"},
{"lineNum":"  372","line":"  declare_configuration_metadata(\"compiler_version\", \"KOKKOS_COMPILER_MSVC\","},
{"lineNum":"  373","line":"                                 std::to_string(KOKKOS_COMPILER_MSVC));"},
{"lineNum":"  374","line":"  declare_configuration_metadata(\"tools_only\", \"compiler_family\", \"msvc\");"},
{"lineNum":"  375","line":"#endif"},
{"lineNum":"  376","line":"#ifdef KOKKOS_ENABLE_ISA_KNC"},
{"lineNum":"  377","line":"  declare_configuration_metadata(\"architecture\", \"KOKKOS_ENABLE_ISA_KNC\","},
{"lineNum":"  378","line":"                                 \"yes\");"},
{"lineNum":"  379","line":"#else"},
{"lineNum":"  380","line":"  declare_configuration_metadata(\"architecture\", \"KOKKOS_ENABLE_ISA_KNC\", \"no\");"},
{"lineNum":"  381","line":"#endif"},
{"lineNum":"  382","line":"#ifdef KOKKOS_ENABLE_ISA_POWERPCLE"},
{"lineNum":"  383","line":"  declare_configuration_metadata(\"architecture\", \"KOKKOS_ENABLE_ISA_POWERPCLE\","},
{"lineNum":"  384","line":"                                 \"yes\");"},
{"lineNum":"  385","line":"#else"},
{"lineNum":"  386","line":"  declare_configuration_metadata(\"architecture\", \"KOKKOS_ENABLE_ISA_POWERPCLE\","},
{"lineNum":"  387","line":"                                 \"no\");"},
{"lineNum":"  388","line":"#endif"},
{"lineNum":"  389","line":"#ifdef KOKKOS_ENABLE_ISA_X86_64"},
{"lineNum":"  390","line":"  declare_configuration_metadata(\"architecture\", \"KOKKOS_ENABLE_ISA_X86_64\","},
{"lineNum":"  391","line":"                                 \"yes\");"},
{"lineNum":"  392","line":"#else"},
{"lineNum":"  393","line":"  declare_configuration_metadata(\"architecture\", \"KOKKOS_ENABLE_ISA_X86_64\","},
{"lineNum":"  394","line":"                                 \"no\");"},
{"lineNum":"  395","line":"#endif"},
{"lineNum":"  396","line":""},
{"lineNum":"  397","line":"#ifdef KOKKOS_ENABLE_GNU_ATOMICS"},
{"lineNum":"  398","line":"  declare_configuration_metadata(\"atomics\", \"KOKKOS_ENABLE_GNU_ATOMICS\", \"yes\");"},
{"lineNum":"  399","line":"#else"},
{"lineNum":"  400","line":"  declare_configuration_metadata(\"atomics\", \"KOKKOS_ENABLE_GNU_ATOMICS\", \"no\");"},
{"lineNum":"  401","line":"#endif"},
{"lineNum":"  402","line":"#ifdef KOKKOS_ENABLE_INTEL_ATOMICS"},
{"lineNum":"  403","line":"  declare_configuration_metadata(\"atomics\", \"KOKKOS_ENABLE_INTEL_ATOMICS\","},
{"lineNum":"  404","line":"                                 \"yes\");"},
{"lineNum":"  405","line":"#else"},
{"lineNum":"  406","line":"  declare_configuration_metadata(\"atomics\", \"KOKKOS_ENABLE_INTEL_ATOMICS\","},
{"lineNum":"  407","line":"                                 \"no\");"},
{"lineNum":"  408","line":"#endif"},
{"lineNum":"  409","line":"#ifdef KOKKOS_ENABLE_WINDOWS_ATOMICS"},
{"lineNum":"  410","line":"  declare_configuration_metadata(\"atomics\", \"KOKKOS_ENABLE_WINDOWS_ATOMICS\","},
{"lineNum":"  411","line":"                                 \"yes\");"},
{"lineNum":"  412","line":"#else"},
{"lineNum":"  413","line":"  declare_configuration_metadata(\"atomics\", \"KOKKOS_ENABLE_WINDOWS_ATOMICS\","},
{"lineNum":"  414","line":"                                 \"no\");"},
{"lineNum":"  415","line":"#endif"},
{"lineNum":"  416","line":""},
{"lineNum":"  417","line":"#ifdef KOKKOS_ENABLE_PRAGMA_IVDEP"},
{"lineNum":"  418","line":"  declare_configuration_metadata(\"vectorization\", \"KOKKOS_ENABLE_PRAGMA_IVDEP\","},
{"lineNum":"  419","line":"                                 \"yes\");"},
{"lineNum":"  420","line":"#else"},
{"lineNum":"  421","line":"  declare_configuration_metadata(\"vectorization\", \"KOKKOS_ENABLE_PRAGMA_IVDEP\","},
{"lineNum":"  422","line":"                                 \"no\");"},
{"lineNum":"  423","line":"#endif"},
{"lineNum":"  424","line":"#ifdef KOKKOS_ENABLE_PRAGMA_LOOPCOUNT"},
{"lineNum":"  425","line":"  declare_configuration_metadata(\"vectorization\","},
{"lineNum":"  426","line":"                                 \"KOKKOS_ENABLE_PRAGMA_LOOPCOUNT\", \"yes\");"},
{"lineNum":"  427","line":"#else"},
{"lineNum":"  428","line":"  declare_configuration_metadata(\"vectorization\","},
{"lineNum":"  429","line":"                                 \"KOKKOS_ENABLE_PRAGMA_LOOPCOUNT\", \"no\");"},
{"lineNum":"  430","line":"#endif"},
{"lineNum":"  431","line":"#ifdef KOKKOS_ENABLE_PRAGMA_SIMD"},
{"lineNum":"  432","line":"  declare_configuration_metadata(\"vectorization\", \"KOKKOS_ENABLE_PRAGMA_SIMD\","},
{"lineNum":"  433","line":"                                 \"yes\");"},
{"lineNum":"  434","line":"#else"},
{"lineNum":"  435","line":"  declare_configuration_metadata(\"vectorization\", \"KOKKOS_ENABLE_PRAGMA_SIMD\","},
{"lineNum":"  436","line":"                                 \"no\");"},
{"lineNum":"  437","line":"#endif"},
{"lineNum":"  438","line":"#ifdef KOKKOS_ENABLE_PRAGMA_UNROLL"},
{"lineNum":"  439","line":"  declare_configuration_metadata(\"vectorization\", \"KOKKOS_ENABLE_PRAGMA_UNROLL\","},
{"lineNum":"  440","line":"                                 \"yes\");"},
{"lineNum":"  441","line":"#else"},
{"lineNum":"  442","line":"  declare_configuration_metadata(\"vectorization\", \"KOKKOS_ENABLE_PRAGMA_UNROLL\","},
{"lineNum":"  443","line":"                                 \"no\");"},
{"lineNum":"  444","line":"#endif"},
{"lineNum":"  445","line":"#ifdef KOKKOS_ENABLE_PRAGMA_VECTOR"},
{"lineNum":"  446","line":"  declare_configuration_metadata(\"vectorization\", \"KOKKOS_ENABLE_PRAGMA_VECTOR\","},
{"lineNum":"  447","line":"                                 \"yes\");"},
{"lineNum":"  448","line":"#else"},
{"lineNum":"  449","line":"  declare_configuration_metadata(\"vectorization\", \"KOKKOS_ENABLE_PRAGMA_VECTOR\","},
{"lineNum":"  450","line":"                                 \"no\");"},
{"lineNum":"  451","line":"#endif"},
{"lineNum":"  452","line":""},
{"lineNum":"  453","line":"#ifdef KOKKOS_ENABLE_HBWSPACE"},
{"lineNum":"  454","line":"  declare_configuration_metadata(\"memory\", \"KOKKOS_ENABLE_HBWSPACE\", \"yes\");"},
{"lineNum":"  455","line":"#else"},
{"lineNum":"  456","line":"  declare_configuration_metadata(\"memory\", \"KOKKOS_ENABLE_HBWSPACE\", \"no\");"},
{"lineNum":"  457","line":"#endif"},
{"lineNum":"  458","line":"#ifdef KOKKOS_ENABLE_INTEL_MM_ALLOC"},
{"lineNum":"  459","line":"  declare_configuration_metadata(\"memory\", \"KOKKOS_ENABLE_INTEL_MM_ALLOC\","},
{"lineNum":"  460","line":"                                 \"yes\");"},
{"lineNum":"  461","line":"#else"},
{"lineNum":"  462","line":"  declare_configuration_metadata(\"memory\", \"KOKKOS_ENABLE_INTEL_MM_ALLOC\","},
{"lineNum":"  463","line":"                                 \"no\");"},
{"lineNum":"  464","line":"#endif"},
{"lineNum":"  465","line":"#ifdef KOKKOS_ENABLE_POSIX_MEMALIGN"},
{"lineNum":"  466","line":"  declare_configuration_metadata(\"memory\", \"KOKKOS_ENABLE_POSIX_MEMALIGN\","},
{"lineNum":"  467","line":"                                 \"yes\");"},
{"lineNum":"  468","line":"#else"},
{"lineNum":"  469","line":"  declare_configuration_metadata(\"memory\", \"KOKKOS_ENABLE_POSIX_MEMALIGN\","},
{"lineNum":"  470","line":"                                 \"no\");"},
{"lineNum":"  471","line":"#endif"},
{"lineNum":"  472","line":""},
{"lineNum":"  473","line":"#ifdef KOKKOS_ENABLE_ASM"},
{"lineNum":"  474","line":"  declare_configuration_metadata(\"options\", \"KOKKOS_ENABLE_ASM\", \"yes\");"},
{"lineNum":"  475","line":"#else"},
{"lineNum":"  476","line":"  declare_configuration_metadata(\"options\", \"KOKKOS_ENABLE_ASM\", \"no\");"},
{"lineNum":"  477","line":"#endif"},
{"lineNum":"  478","line":"#ifdef KOKKOS_ENABLE_CXX14"},
{"lineNum":"  479","line":"  declare_configuration_metadata(\"options\", \"KOKKOS_ENABLE_CXX14\", \"yes\");"},
{"lineNum":"  480","line":"#else"},
{"lineNum":"  481","line":"  declare_configuration_metadata(\"options\", \"KOKKOS_ENABLE_CXX14\", \"no\");"},
{"lineNum":"  482","line":"#endif"},
{"lineNum":"  483","line":"#ifdef KOKKOS_ENABLE_CXX17"},
{"lineNum":"  484","line":"  declare_configuration_metadata(\"options\", \"KOKKOS_ENABLE_CXX17\", \"yes\");"},
{"lineNum":"  485","line":"#else"},
{"lineNum":"  486","line":"  declare_configuration_metadata(\"options\", \"KOKKOS_ENABLE_CXX17\", \"no\");"},
{"lineNum":"  487","line":"#endif"},
{"lineNum":"  488","line":"#ifdef KOKKOS_ENABLE_CXX20"},
{"lineNum":"  489","line":"  declare_configuration_metadata(\"options\", \"KOKKOS_ENABLE_CXX20\", \"yes\");"},
{"lineNum":"  490","line":"#else"},
{"lineNum":"  491","line":"  declare_configuration_metadata(\"options\", \"KOKKOS_ENABLE_CXX20\", \"no\");"},
{"lineNum":"  492","line":"#endif"},
{"lineNum":"  493","line":"#ifdef KOKKOS_ENABLE_DEBUG_BOUNDS_CHECK"},
{"lineNum":"  494","line":"  declare_configuration_metadata(\"options\", \"KOKKOS_ENABLE_DEBUG_BOUNDS_CHECK\","},
{"lineNum":"  495","line":"                                 \"yes\");"},
{"lineNum":"  496","line":"#else"},
{"lineNum":"  497","line":"  declare_configuration_metadata(\"options\", \"KOKKOS_ENABLE_DEBUG_BOUNDS_CHECK\","},
{"lineNum":"  498","line":"                                 \"no\");"},
{"lineNum":"  499","line":"#endif"},
{"lineNum":"  500","line":"#ifdef KOKKOS_ENABLE_HWLOC"},
{"lineNum":"  501","line":"  declare_configuration_metadata(\"options\", \"KOKKOS_ENABLE_HWLOC\", \"yes\");"},
{"lineNum":"  502","line":"#else"},
{"lineNum":"  503","line":"  declare_configuration_metadata(\"options\", \"KOKKOS_ENABLE_HWLOC\", \"no\");"},
{"lineNum":"  504","line":"#endif"},
{"lineNum":"  505","line":"#ifdef KOKKOS_ENABLE_LIBRT"},
{"lineNum":"  506","line":"  declare_configuration_metadata(\"options\", \"KOKKOS_ENABLE_LIBRT\", \"yes\");"},
{"lineNum":"  507","line":"#else"},
{"lineNum":"  508","line":"  declare_configuration_metadata(\"options\", \"KOKKOS_ENABLE_LIBRT\", \"no\");"},
{"lineNum":"  509","line":"#endif"},
{"lineNum":"  510","line":"#ifdef KOKKOS_ENABLE_MPI"},
{"lineNum":"  511","line":"  declare_configuration_metadata(\"options\", \"KOKKOS_ENABLE_MPI\", \"yes\");"},
{"lineNum":"  512","line":"#else"},
{"lineNum":"  513","line":"  declare_configuration_metadata(\"options\", \"KOKKOS_ENABLE_MPI\", \"no\");"},
{"lineNum":"  514","line":"#endif"},
{"lineNum":"  515","line":"  declare_configuration_metadata(\"architecture\", \"Default Device\","},
{"lineNum":"  516","line":"                                 typeid(Kokkos::DefaultExecutionSpace).name());"},
{"lineNum":"  517","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  518","line":""},
{"lineNum":"  519","line":"void post_initialize_internal(const InitArguments& args) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  520","line":"  initialize_profiling(args);"},
{"lineNum":"  521","line":"  g_is_initialized = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  522","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  523","line":""},
{"lineNum":"  524","line":"void initialize_internal(const InitArguments& args) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  525","line":"  pre_initialize_internal(args);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  526","line":"  initialize_backends(args);"},
{"lineNum":"  527","line":"  post_initialize_internal(args);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  528","line":"}"},
{"lineNum":"  529","line":""},
{"lineNum":"  530","line":"void finalize_internal(const bool all_spaces = false) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  531","line":"  typename decltype(finalize_hooks)::size_type numSuccessfulCalls = 0;"},
{"lineNum":"  532","line":"  while (!finalize_hooks.empty()) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  533","line":"    auto f = finalize_hooks.top();"},
{"lineNum":"  534","line":"    try {"},
{"lineNum":"  535","line":"      f();"},
{"lineNum":"  536","line":"    } catch (...) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  537","line":"      std::cerr << \"Kokkos::finalize: A finalize hook (set via \""},
{"lineNum":"  538","line":"                   \"Kokkos::push_finalize_hook) threw an exception that it did \""},
{"lineNum":"  539","line":"                   \"not catch.\""},
{"lineNum":"  540","line":"                   \"  Per std::atexit rules, this results in std::terminate.  \""},
{"lineNum":"  541","line":"                   \"This is \""},
{"lineNum":"  542","line":"                   \"finalize hook number \""},
{"lineNum":"  543","line":"                << numSuccessfulCalls","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  544","line":"                << \" (1-based indexing) \""},
{"lineNum":"  545","line":"                   \"out of \""},
{"lineNum":"  546","line":"                << finalize_hooks.size()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  547","line":"                << \" to call.  Remember that \""},
{"lineNum":"  548","line":"                   \"Kokkos::finalize calls finalize hooks in reverse order \""},
{"lineNum":"  549","line":"                   \"from how they \""},
{"lineNum":"  550","line":"                   \"were pushed.\""},
{"lineNum":"  551","line":"                << std::endl;"},
{"lineNum":"  552","line":"      std::terminate();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  553","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  554","line":"    finalize_hooks.pop();"},
{"lineNum":"  555","line":"    ++numSuccessfulCalls;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  556","line":"  }"},
{"lineNum":"  557","line":""},
{"lineNum":"  558","line":"  Kokkos::Profiling::finalize();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  559","line":""},
{"lineNum":"  560","line":"  Impl::ExecSpaceManager::get_instance().finalize_spaces(all_spaces);"},
{"lineNum":"  561","line":""},
{"lineNum":"  562","line":"  g_is_initialized = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  563","line":"  g_show_warnings  = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  564","line":"  g_tune_internals = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  565","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  566","line":""},
{"lineNum":"  567","line":"void fence_internal() { Impl::ExecSpaceManager::get_instance().static_fence(); }"},
{"lineNum":"  568","line":""},
{"lineNum":"  569","line":"bool check_arg(char const* arg, char const* expected) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  570","line":"  std::size_t arg_len = std::strlen(arg);","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  571","line":"  std::size_t exp_len = std::strlen(expected);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  572","line":"  if (arg_len < exp_len) return false;","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"  573","line":"  if (std::strncmp(arg, expected, exp_len) != 0) return false;","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  574","line":"  if (arg_len == exp_len) return true;","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"  575","line":"  /* if expected is \"--threads\", ignore \"--threads-for-application\""},
{"lineNum":"  576","line":"     by checking this character          ---------^"},
{"lineNum":"  577","line":"     to see if it continues to make a longer name */"},
{"lineNum":"  578","line":"  if (std::isalnum(arg[exp_len]) || arg[exp_len] == \'-\' ||","class":"lineNoCov","hits":"0","possible_hits":"42",},
{"lineNum":"  579","line":"      arg[exp_len] == \'_\') {"},
{"lineNum":"  580","line":"    return false;"},
{"lineNum":"  581","line":"  }"},
{"lineNum":"  582","line":"  return true;"},
{"lineNum":"  583","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  584","line":""},
{"lineNum":"  585","line":"bool check_int_arg(char const* arg, char const* expected, int* value) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  586","line":"  if (!check_arg(arg, expected)) return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  587","line":"  std::size_t arg_len = std::strlen(arg);"},
{"lineNum":"  588","line":"  std::size_t exp_len = std::strlen(expected);"},
{"lineNum":"  589","line":"  bool okay           = true;"},
{"lineNum":"  590","line":"  if (arg_len == exp_len || arg[exp_len] != \'=\') okay = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  591","line":"  char const* number = arg + exp_len + 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  592","line":"  if (!Impl::is_unsigned_int(number) || strlen(number) == 0) okay = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  593","line":"  *value = std::stoi(number);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  594","line":"  if (!okay) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  595","line":"    std::ostringstream ss;"},
{"lineNum":"  596","line":"    ss << \"Error: expecting an \'=INT\' after command line argument \'\" << expected"},
{"lineNum":"  597","line":"       << \"\'\";"},
{"lineNum":"  598","line":"    ss << \". Raised by Kokkos::initialize(int narg, char* argc[]).\";"},
{"lineNum":"  599","line":"    Impl::throw_runtime_exception(ss.str());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  600","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  601","line":"  return true;"},
{"lineNum":"  602","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  603","line":""},
{"lineNum":"  604","line":"bool check_str_arg(char const* arg, char const* expected, std::string& value) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  605","line":"  if (!check_arg(arg, expected)) return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  606","line":"  std::size_t arg_len = std::strlen(arg);"},
{"lineNum":"  607","line":"  std::size_t exp_len = std::strlen(expected);"},
{"lineNum":"  608","line":"  bool okay           = true;"},
{"lineNum":"  609","line":"  if (arg_len == exp_len || arg[exp_len] != \'=\') okay = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  610","line":"  char const* remain = arg + exp_len + 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  611","line":"  value              = remain;"},
{"lineNum":"  612","line":"  if (!okay) {"},
{"lineNum":"  613","line":"    std::ostringstream ss;"},
{"lineNum":"  614","line":"    ss << \"Error: expecting an \'=STRING\' after command line argument \'\""},
{"lineNum":"  615","line":"       << expected << \"\'\";"},
{"lineNum":"  616","line":"    ss << \". Raised by Kokkos::initialize(int narg, char* argc[]).\";"},
{"lineNum":"  617","line":"    Impl::throw_runtime_exception(ss.str());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  618","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  619","line":"  return true;"},
{"lineNum":"  620","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  621","line":""},
{"lineNum":"  622","line":"void warn_deprecated_command_line_argument(std::string deprecated,"},
{"lineNum":"  623","line":"                                           std::string valid) {"},
{"lineNum":"  624","line":"  std::cerr"},
{"lineNum":"  625","line":"      << \"Warning: command line argument \'\" << deprecated"},
{"lineNum":"  626","line":"      << \"\' is deprecated. Use \'\" << valid"},
{"lineNum":"  627","line":"      << \"\' instead. Raised by Kokkos::initialize(int narg, char* argc[]).\""},
{"lineNum":"  628","line":"      << std::endl;"},
{"lineNum":"  629","line":"}"},
{"lineNum":"  630","line":""},
{"lineNum":"  631","line":"unsigned get_process_id() {"},
{"lineNum":"  632","line":"#ifdef _WIN32"},
{"lineNum":"  633","line":"  return unsigned(GetCurrentProcessId());"},
{"lineNum":"  634","line":"#else"},
{"lineNum":"  635","line":"  return unsigned(getpid());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  636","line":"#endif"},
{"lineNum":"  637","line":"}"},
{"lineNum":"  638","line":""},
{"lineNum":"  639","line":"void parse_command_line_arguments(int& narg, char* arg[],"},
{"lineNum":"  640","line":"                                  InitArguments& arguments) {"},
{"lineNum":"  641","line":"  auto& num_threads      = arguments.num_threads;"},
{"lineNum":"  642","line":"  auto& numa             = arguments.num_numa;"},
{"lineNum":"  643","line":"  auto& device           = arguments.device_id;"},
{"lineNum":"  644","line":"  auto& ndevices         = arguments.ndevices;"},
{"lineNum":"  645","line":"  auto& skip_device      = arguments.skip_device;"},
{"lineNum":"  646","line":"  auto& disable_warnings = arguments.disable_warnings;"},
{"lineNum":"  647","line":"  auto& tune_internals   = arguments.tune_internals;"},
{"lineNum":"  648","line":"  auto& tool_help        = arguments.tool_help;"},
{"lineNum":"  649","line":"  auto& tool_args        = arguments.tool_args;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  650","line":"  auto& tool_lib         = arguments.tool_lib;"},
{"lineNum":"  651","line":""},
{"lineNum":"  652","line":"  bool kokkos_threads_found  = false;"},
{"lineNum":"  653","line":"  bool kokkos_numa_found     = false;"},
{"lineNum":"  654","line":"  bool kokkos_device_found   = false;"},
{"lineNum":"  655","line":"  bool kokkos_ndevices_found = false;"},
{"lineNum":"  656","line":""},
{"lineNum":"  657","line":"  int iarg = 0;"},
{"lineNum":"  658","line":""},
{"lineNum":"  659","line":"  while (iarg < narg) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  660","line":"    if (check_int_arg(arg[iarg], \"--kokkos-threads\", &num_threads)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  661","line":"      for (int k = iarg; k < narg - 1; k++) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  662","line":"        arg[k] = arg[k + 1];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  663","line":"      }"},
{"lineNum":"  664","line":"      kokkos_threads_found = true;"},
{"lineNum":"  665","line":"      narg--;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  666","line":"    } else if (!kokkos_threads_found &&","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  667","line":"               check_int_arg(arg[iarg], \"--threads\", &num_threads)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  668","line":"      iarg++;"},
{"lineNum":"  669","line":"    } else if (check_int_arg(arg[iarg], \"--kokkos-numa\", &numa)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  670","line":"      for (int k = iarg; k < narg - 1; k++) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  671","line":"        arg[k] = arg[k + 1];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  672","line":"      }"},
{"lineNum":"  673","line":"      kokkos_numa_found = true;"},
{"lineNum":"  674","line":"      narg--;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  675","line":"    } else if (!kokkos_numa_found &&","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  676","line":"               check_int_arg(arg[iarg], \"--numa\", &numa)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  677","line":"      iarg++;"},
{"lineNum":"  678","line":"    } else if (check_int_arg(arg[iarg], \"--kokkos-device-id\", &device) ||","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  679","line":"               check_int_arg(arg[iarg], \"--kokkos-device\", &device)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  680","line":"      if (check_arg(arg[iarg], \"--kokkos-device\")) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  681","line":"        warn_deprecated_command_line_argument(\"--kokkos-device\","},
{"lineNum":"  682","line":"                                              \"--kokkos-device-id\");"},
{"lineNum":"  683","line":"      }"},
{"lineNum":"  684","line":"      for (int k = iarg; k < narg - 1; k++) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  685","line":"        arg[k] = arg[k + 1];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  686","line":"      }"},
{"lineNum":"  687","line":"      kokkos_device_found = true;"},
{"lineNum":"  688","line":"      narg--;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  689","line":"    } else if (!kokkos_device_found &&","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  690","line":"               (check_int_arg(arg[iarg], \"--device-id\", &device) ||","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  691","line":"                check_int_arg(arg[iarg], \"--device\", &device))) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  692","line":"      if (check_arg(arg[iarg], \"--device\")) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  693","line":"        warn_deprecated_command_line_argument(\"--device\", \"--device-id\");"},
{"lineNum":"  694","line":"      }"},
{"lineNum":"  695","line":"      iarg++;"},
{"lineNum":"  696","line":"    } else if (check_arg(arg[iarg], \"--kokkos-num-devices\") ||","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  697","line":"               check_arg(arg[iarg], \"--num-devices\") ||","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  698","line":"               check_arg(arg[iarg], \"--kokkos-ndevices\") ||","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  699","line":"               check_arg(arg[iarg], \"--ndevices\")) {"},
{"lineNum":"  700","line":"      if (check_arg(arg[iarg], \"--ndevices\")) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  701","line":"        warn_deprecated_command_line_argument(\"--ndevices\", \"--num-devices\");"},
{"lineNum":"  702","line":"      }"},
{"lineNum":"  703","line":"      if (check_arg(arg[iarg], \"--kokkos-ndevices\")) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  704","line":"        warn_deprecated_command_line_argument(\"--kokkos-ndevices\","},
{"lineNum":"  705","line":"                                              \"--kokkos-num-devices\");"},
{"lineNum":"  706","line":"      }"},
{"lineNum":"  707","line":"      // Find the number of device (expecting --device=XX)"},
{"lineNum":"  708","line":"      if (!((strncmp(arg[iarg], \"--kokkos-num-devices=\", 21) == 0) ||","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  709","line":"            (strncmp(arg[iarg], \"--num-ndevices=\", 14) == 0) ||","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  710","line":"            (strncmp(arg[iarg], \"--kokkos-ndevices=\", 18) == 0) ||","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  711","line":"            (strncmp(arg[iarg], \"--ndevices=\", 11) == 0)))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  712","line":"        throw_runtime_exception(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  713","line":"            \"Error: expecting an \'=INT[,INT]\' after command line argument \""},
{"lineNum":"  714","line":"            \"\'--num-devices/--kokkos-num-devices\'. Raised by \""},
{"lineNum":"  715","line":"            \"Kokkos::initialize(int narg, char* argc[]).\");"},
{"lineNum":"  716","line":""},
{"lineNum":"  717","line":"      char* num1      = strchr(arg[iarg], \'=\') + 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  718","line":"      char* num2      = strpbrk(num1, \",\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  719","line":"      int num1_len    = num2 == nullptr ? strlen(num1) : num2 - num1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  720","line":"      char* num1_only = new char[num1_len + 1];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  721","line":"      strncpy(num1_only, num1, num1_len);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  722","line":"      num1_only[num1_len] = \'\\0\';","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  723","line":""},
{"lineNum":"  724","line":"      if (!is_unsigned_int(num1_only) || (strlen(num1_only) == 0)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  725","line":"        throw_runtime_exception(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  726","line":"            \"Error: expecting an integer number after command line argument \""},
{"lineNum":"  727","line":"            \"\'--kokkos-numdevices\'. Raised by \""},
{"lineNum":"  728","line":"            \"Kokkos::initialize(int narg, char* argc[]).\");"},
{"lineNum":"  729","line":"      }"},
{"lineNum":"  730","line":"      if (check_arg(arg[iarg], \"--kokkos-num-devices\") ||","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  731","line":"          check_arg(arg[iarg], \"--kokkos-ndevices\") || !kokkos_ndevices_found)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  732","line":"        ndevices = std::stoi(num1_only);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  733","line":"      delete[] num1_only;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  734","line":""},
{"lineNum":"  735","line":"      if (num2 != nullptr) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  736","line":"        if ((!is_unsigned_int(num2 + 1)) || (strlen(num2) == 1))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  737","line":"          throw_runtime_exception(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  738","line":"              \"Error: expecting an integer number after command line argument \""},
{"lineNum":"  739","line":"              \"\'--kokkos-num-devices=XX,\'. Raised by \""},
{"lineNum":"  740","line":"              \"Kokkos::initialize(int narg, char* argc[]).\");"},
{"lineNum":"  741","line":""},
{"lineNum":"  742","line":"        if (check_arg(arg[iarg], \"--kokkos-num-devices\") ||","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  743","line":"            check_arg(arg[iarg], \"--kokkos-ndevices\") || !kokkos_ndevices_found)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  744","line":"          skip_device = std::stoi(num2 + 1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  745","line":"      }"},
{"lineNum":"  746","line":""},
{"lineNum":"  747","line":"      // Remove the --kokkos-num-devices argument from the list but leave"},
{"lineNum":"  748","line":"      // --num-devices"},
{"lineNum":"  749","line":"      if (check_arg(arg[iarg], \"--kokkos-num-devices\") ||","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  750","line":"          check_arg(arg[iarg], \"--kokkos-ndevices\")) {"},
{"lineNum":"  751","line":"        for (int k = iarg; k < narg - 1; k++) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  752","line":"          arg[k] = arg[k + 1];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  753","line":"        }"},
{"lineNum":"  754","line":"        kokkos_ndevices_found = true;"},
{"lineNum":"  755","line":"        narg--;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  756","line":"      } else {"},
{"lineNum":"  757","line":"        iarg++;"},
{"lineNum":"  758","line":"      }"},
{"lineNum":"  759","line":"    } else if (check_arg(arg[iarg], \"--kokkos-disable-warnings\")) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  760","line":"      disable_warnings = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  761","line":"      for (int k = iarg; k < narg - 1; k++) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  762","line":"        arg[k] = arg[k + 1];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  763","line":"      }"},
{"lineNum":"  764","line":"      narg--;"},
{"lineNum":"  765","line":"    } else if (check_arg(arg[iarg], \"--kokkos-tune-internals\")) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  766","line":"      tune_internals = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  767","line":"      for (int k = iarg; k < narg - 1; k++) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  768","line":"        arg[k] = arg[k + 1];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  769","line":"      }"},
{"lineNum":"  770","line":"      narg--;"},
{"lineNum":"  771","line":"    } else if (check_str_arg(arg[iarg], \"--kokkos-tools-library\", tool_lib)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  772","line":"      for (int k = iarg; k < narg - 1; k++) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  773","line":"        arg[k] = arg[k + 1];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  774","line":"      }"},
{"lineNum":"  775","line":"      narg--;"},
{"lineNum":"  776","line":"    } else if (check_str_arg(arg[iarg], \"--kokkos-tools-args\", tool_args)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  777","line":"      for (int k = iarg; k < narg - 1; k++) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  778","line":"        arg[k] = arg[k + 1];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  779","line":"      }"},
{"lineNum":"  780","line":"      narg--;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  781","line":"      // strip any leading and/or trailing quotes if they were retained in the"},
{"lineNum":"  782","line":"      // string because this will very likely cause parsing issues for tools."},
{"lineNum":"  783","line":"      // If the quotes are retained (via bypassing the shell):"},
{"lineNum":"  784","line":"      //    <EXE> --kokkos-tools-args=\"-c my example\""},
{"lineNum":"  785","line":"      // would be tokenized as:"},
{"lineNum":"  786","line":"      //    \"<EXE>\" \"\\\"-c\" \"my\" \"example\\\"\""},
{"lineNum":"  787","line":"      // instead of:"},
{"lineNum":"  788","line":"      //    \"<EXE>\" \"-c\" \"my\" \"example\""},
{"lineNum":"  789","line":"      if (!tool_args.empty()) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  790","line":"        if (tool_args.front() == \'\"\') tool_args = tool_args.substr(1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  791","line":"        if (tool_args.back() == \'\"\')","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  792","line":"          tool_args = tool_args.substr(0, tool_args.length() - 1);"},
{"lineNum":"  793","line":"      }"},
{"lineNum":"  794","line":"      // add the name of the executable to the beginning"},
{"lineNum":"  795","line":"      if (narg > 0) tool_args = std::string(arg[0]) + \" \" + tool_args;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  796","line":"    } else if (check_arg(arg[iarg], \"--kokkos-tools-help\")) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  797","line":"      tool_help = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  798","line":"      for (int k = iarg; k < narg - 1; k++) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  799","line":"        arg[k] = arg[k + 1];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  800","line":"      }"},
{"lineNum":"  801","line":"      narg--;"},
{"lineNum":"  802","line":"    } else if (check_arg(arg[iarg], \"--kokkos-help\") ||","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  803","line":"               check_arg(arg[iarg], \"--help\")) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  804","line":"      auto const help_message = R\"("},
{"lineNum":"  805","line":"      --------------------------------------------------------------------------------"},
{"lineNum":"  806","line":"      -------------Kokkos command line arguments--------------------------------------"},
{"lineNum":"  807","line":"      --------------------------------------------------------------------------------"},
{"lineNum":"  808","line":"      The following arguments exist also without prefix \'kokkos\' (e.g. --help)."},
{"lineNum":"  809","line":"      The prefixed arguments will be removed from the list by Kokkos::initialize(),"},
{"lineNum":"  810","line":"      the non-prefixed ones are not removed. Prefixed versions take precedence over"},
{"lineNum":"  811","line":"      non prefixed ones, and the last occurrence of an argument overwrites prior"},
{"lineNum":"  812","line":"      settings."},
{"lineNum":"  813","line":""},
{"lineNum":"  814","line":"      --kokkos-help                  : print this message"},
{"lineNum":"  815","line":"      --kokkos-disable-warnings      : disable kokkos warning messages"},
{"lineNum":"  816","line":"      --kokkos-tune-internals        : allow Kokkos to autotune policies and declare"},
{"lineNum":"  817","line":"                                       tuning features through the tuning system. If"},
{"lineNum":"  818","line":"                                       left off, Kokkos uses heuristics"},
{"lineNum":"  819","line":"      --kokkos-threads=INT           : specify total number of threads or"},
{"lineNum":"  820","line":"                                       number of threads per NUMA region if"},
{"lineNum":"  821","line":"                                       used in conjunction with \'--numa\' option."},
{"lineNum":"  822","line":"      --kokkos-numa=INT              : specify number of NUMA regions used by process."},
{"lineNum":"  823","line":"      --kokkos-device-id=INT         : specify device id to be used by Kokkos."},
{"lineNum":"  824","line":"      --kokkos-num-devices=INT[,INT] : used when running MPI jobs. Specify number of"},
{"lineNum":"  825","line":"                                       devices per node to be used. Process to device"},
{"lineNum":"  826","line":"                                       mapping happens by obtaining the local MPI rank"},
{"lineNum":"  827","line":"                                       and assigning devices round-robin. The optional"},
{"lineNum":"  828","line":"                                       second argument allows for an existing device"},
{"lineNum":"  829","line":"                                       to be ignored. This is most useful on workstations"},
{"lineNum":"  830","line":"                                       with multiple GPUs of which one is used to drive"},
{"lineNum":"  831","line":"                                       screen output."},
{"lineNum":"  832","line":"      --kokkos-tools-library         : Equivalent to KOKKOS_PROFILE_LIBRARY environment"},
{"lineNum":"  833","line":"                                       variable. Must either be full path to library or"},
{"lineNum":"  834","line":"                                       name of library if the path is present in the"},
{"lineNum":"  835","line":"                                       runtime library search path (e.g. LD_LIBRARY_PATH)"},
{"lineNum":"  836","line":"      --kokkos-tools-help            : Query the (loaded) kokkos-tool for its command-line"},
{"lineNum":"  837","line":"                                       option support (which should then be passed via"},
{"lineNum":"  838","line":"                                       --kokkos-tools-args=\"...\")"},
{"lineNum":"  839","line":"      --kokkos-tools-args=STR        : A single (quoted) string of options which will be"},
{"lineNum":"  840","line":"                                       whitespace delimited and passed to the loaded"},
{"lineNum":"  841","line":"                                       kokkos-tool as command-line arguments. E.g."},
{"lineNum":"  842","line":"                                       `<EXE> --kokkos-tools-args=\"-c input.txt\"` will"},
{"lineNum":"  843","line":"                                       pass `<EXE> -c input.txt` as argc/argv to tool"},
{"lineNum":"  844","line":"      --------------------------------------------------------------------------------"},
{"lineNum":"  845","line":")\";"},
{"lineNum":"  846","line":"      std::cout << help_message << std::endl;"},
{"lineNum":"  847","line":""},
{"lineNum":"  848","line":"      // Remove the --kokkos-help argument from the list but leave --help"},
{"lineNum":"  849","line":"      if (check_arg(arg[iarg], \"--kokkos-help\")) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  850","line":"        for (int k = iarg; k < narg - 1; k++) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  851","line":"          arg[k] = arg[k + 1];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  852","line":"        }"},
{"lineNum":"  853","line":"        narg--;"},
{"lineNum":"  854","line":"      } else {"},
{"lineNum":"  855","line":"        iarg++;"},
{"lineNum":"  856","line":"      }"},
{"lineNum":"  857","line":"    } else"},
{"lineNum":"  858","line":"      iarg++;"},
{"lineNum":"  859","line":"  }"},
{"lineNum":"  860","line":"  if (tool_args.empty() && narg > 0) tool_args = arg[0];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  861","line":"}"},
{"lineNum":"  862","line":""},
{"lineNum":"  863","line":"void parse_environment_variables(InitArguments& arguments) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  864","line":"  auto& num_threads      = arguments.num_threads;"},
{"lineNum":"  865","line":"  auto& numa             = arguments.num_numa;"},
{"lineNum":"  866","line":"  auto& device           = arguments.device_id;"},
{"lineNum":"  867","line":"  auto& ndevices         = arguments.ndevices;"},
{"lineNum":"  868","line":"  auto& skip_device      = arguments.skip_device;"},
{"lineNum":"  869","line":"  auto& disable_warnings = arguments.disable_warnings;"},
{"lineNum":"  870","line":"  auto& tune_internals   = arguments.tune_internals;"},
{"lineNum":"  871","line":"  auto& tool_lib         = arguments.tool_lib;"},
{"lineNum":"  872","line":"  char* endptr;"},
{"lineNum":"  873","line":"  auto env_num_threads_str = std::getenv(\"KOKKOS_NUM_THREADS\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  874","line":"  if (env_num_threads_str != nullptr) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  875","line":"    errno                = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  876","line":"    auto env_num_threads = std::strtol(env_num_threads_str, &endptr, 10);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  877","line":"    if (endptr == env_num_threads_str)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  878","line":"      Impl::throw_runtime_exception(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  879","line":"          \"Error: cannot convert KOKKOS_NUM_THREADS to an integer. Raised by \""},
{"lineNum":"  880","line":"          \"Kokkos::initialize(int narg, char* argc[]).\");"},
{"lineNum":"  881","line":"    if (errno == ERANGE)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  882","line":"      Impl::throw_runtime_exception(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  883","line":"          \"Error: KOKKOS_NUM_THREADS out of range of representable values by \""},
{"lineNum":"  884","line":"          \"an integer. Raised by Kokkos::initialize(int narg, char* argc[]).\");"},
{"lineNum":"  885","line":"    if ((num_threads != -1) && (env_num_threads != num_threads))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  886","line":"      Impl::throw_runtime_exception(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  887","line":"          \"Error: expecting a match between --kokkos-threads and \""},
{"lineNum":"  888","line":"          \"KOKKOS_NUM_THREADS if both are set. Raised by \""},
{"lineNum":"  889","line":"          \"Kokkos::initialize(int narg, char* argc[]).\");"},
{"lineNum":"  890","line":"    else"},
{"lineNum":"  891","line":"      num_threads = env_num_threads;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  892","line":"  }"},
{"lineNum":"  893","line":"  auto env_numa_str = std::getenv(\"KOKKOS_NUMA\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  894","line":"  if (env_numa_str != nullptr) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  895","line":"    errno         = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  896","line":"    auto env_numa = std::strtol(env_numa_str, &endptr, 10);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  897","line":"    if (endptr == env_numa_str)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  898","line":"      Impl::throw_runtime_exception(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  899","line":"          \"Error: cannot convert KOKKOS_NUMA to an integer. Raised by \""},
{"lineNum":"  900","line":"          \"Kokkos::initialize(int narg, char* argc[]).\");"},
{"lineNum":"  901","line":"    if (errno == ERANGE)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  902","line":"      Impl::throw_runtime_exception(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  903","line":"          \"Error: KOKKOS_NUMA out of range of representable values by an \""},
{"lineNum":"  904","line":"          \"integer. Raised by Kokkos::initialize(int narg, char* argc[]).\");"},
{"lineNum":"  905","line":"    if ((numa != -1) && (env_numa != numa))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  906","line":"      Impl::throw_runtime_exception(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  907","line":"          \"Error: expecting a match between --kokkos-numa and KOKKOS_NUMA if \""},
{"lineNum":"  908","line":"          \"both are set. Raised by Kokkos::initialize(int narg, char* \""},
{"lineNum":"  909","line":"          \"argc[]).\");"},
{"lineNum":"  910","line":"    else"},
{"lineNum":"  911","line":"      numa = env_numa;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  912","line":"  }"},
{"lineNum":"  913","line":"  auto env_device_str = std::getenv(\"KOKKOS_DEVICE_ID\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  914","line":"  if (env_device_str != nullptr) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  915","line":"    errno           = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  916","line":"    auto env_device = std::strtol(env_device_str, &endptr, 10);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  917","line":"    if (endptr == env_device_str)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  918","line":"      Impl::throw_runtime_exception(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  919","line":"          \"Error: cannot convert KOKKOS_DEVICE_ID to an integer. Raised by \""},
{"lineNum":"  920","line":"          \"Kokkos::initialize(int narg, char* argc[]).\");"},
{"lineNum":"  921","line":"    if (errno == ERANGE)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  922","line":"      Impl::throw_runtime_exception(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  923","line":"          \"Error: KOKKOS_DEVICE_ID out of range of representable values by an \""},
{"lineNum":"  924","line":"          \"integer. Raised by Kokkos::initialize(int narg, char* argc[]).\");"},
{"lineNum":"  925","line":"    if ((device != -1) && (env_device != device))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  926","line":"      Impl::throw_runtime_exception(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  927","line":"          \"Error: expecting a match between --kokkos-device and \""},
{"lineNum":"  928","line":"          \"KOKKOS_DEVICE_ID if both are set. Raised by Kokkos::initialize(int \""},
{"lineNum":"  929","line":"          \"narg, char* argc[]).\");"},
{"lineNum":"  930","line":"    else"},
{"lineNum":"  931","line":"      device = env_device;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  932","line":"  }"},
{"lineNum":"  933","line":"  auto env_rdevices_str = std::getenv(\"KOKKOS_RAND_DEVICES\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  934","line":"  auto env_ndevices_str = std::getenv(\"KOKKOS_NUM_DEVICES\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  935","line":"  if (env_ndevices_str != nullptr || env_rdevices_str != nullptr) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  936","line":"    errno = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  937","line":"    if (env_ndevices_str != nullptr && env_rdevices_str != nullptr) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  938","line":"      Impl::throw_runtime_exception(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  939","line":"          \"Error: cannot specify both KOKKOS_NUM_DEVICES and \""},
{"lineNum":"  940","line":"          \"KOKKOS_RAND_DEVICES. \""},
{"lineNum":"  941","line":"          \"Raised by Kokkos::initialize(int narg, char* argc[]).\");"},
{"lineNum":"  942","line":"    }"},
{"lineNum":"  943","line":"    int rdevices = -1;"},
{"lineNum":"  944","line":"    if (env_ndevices_str != nullptr) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  945","line":"      auto env_ndevices = std::strtol(env_ndevices_str, &endptr, 10);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  946","line":"      if (endptr == env_ndevices_str)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  947","line":"        Impl::throw_runtime_exception(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  948","line":"            \"Error: cannot convert KOKKOS_NUM_DEVICES to an integer. Raised by \""},
{"lineNum":"  949","line":"            \"Kokkos::initialize(int narg, char* argc[]).\");"},
{"lineNum":"  950","line":"      if (errno == ERANGE)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  951","line":"        Impl::throw_runtime_exception(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  952","line":"            \"Error: KOKKOS_NUM_DEVICES out of range of representable values by \""},
{"lineNum":"  953","line":"            \"an integer. Raised by Kokkos::initialize(int narg, char* \""},
{"lineNum":"  954","line":"            \"argc[]).\");"},
{"lineNum":"  955","line":"      if ((ndevices != -1) && (env_ndevices != ndevices))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  956","line":"        Impl::throw_runtime_exception(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  957","line":"            \"Error: expecting a match between --kokkos-ndevices and \""},
{"lineNum":"  958","line":"            \"KOKKOS_NUM_DEVICES if both are set. Raised by \""},
{"lineNum":"  959","line":"            \"Kokkos::initialize(int narg, char* argc[]).\");"},
{"lineNum":"  960","line":"      else"},
{"lineNum":"  961","line":"        ndevices = env_ndevices;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  962","line":"    } else {  // you set KOKKOS_RAND_DEVICES"},
{"lineNum":"  963","line":"      auto env_rdevices = std::strtol(env_rdevices_str, &endptr, 10);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  964","line":"      if (endptr == env_ndevices_str)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  965","line":"        Impl::throw_runtime_exception(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  966","line":"            \"Error: cannot convert KOKKOS_RAND_DEVICES to an integer. Raised \""},
{"lineNum":"  967","line":"            \"by Kokkos::initialize(int narg, char* argc[]).\");"},
{"lineNum":"  968","line":"      if (errno == ERANGE)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  969","line":"        Impl::throw_runtime_exception(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  970","line":"            \"Error: KOKKOS_RAND_DEVICES out of range of representable values \""},
{"lineNum":"  971","line":"            \"by an integer. Raised by Kokkos::initialize(int narg, char* \""},
{"lineNum":"  972","line":"            \"argc[]).\");"},
{"lineNum":"  973","line":"      else"},
{"lineNum":"  974","line":"        rdevices = env_rdevices;"},
{"lineNum":"  975","line":"    }"},
{"lineNum":"  976","line":"    // Skip device"},
{"lineNum":"  977","line":"    auto env_skip_device_str = std::getenv(\"KOKKOS_SKIP_DEVICE\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  978","line":"    if (env_skip_device_str != nullptr) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  979","line":"      errno                = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  980","line":"      auto env_skip_device = std::strtol(env_skip_device_str, &endptr, 10);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  981","line":"      if (endptr == env_skip_device_str)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  982","line":"        Impl::throw_runtime_exception(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  983","line":"            \"Error: cannot convert KOKKOS_SKIP_DEVICE to an integer. Raised by \""},
{"lineNum":"  984","line":"            \"Kokkos::initialize(int narg, char* argc[]).\");"},
{"lineNum":"  985","line":"      if (errno == ERANGE)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  986","line":"        Impl::throw_runtime_exception(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  987","line":"            \"Error: KOKKOS_SKIP_DEVICE out of range of representable values by \""},
{"lineNum":"  988","line":"            \"an integer. Raised by Kokkos::initialize(int narg, char* \""},
{"lineNum":"  989","line":"            \"argc[]).\");"},
{"lineNum":"  990","line":"      if ((skip_device != 9999) && (env_skip_device != skip_device))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  991","line":"        Impl::throw_runtime_exception(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  992","line":"            \"Error: expecting a match between --kokkos-ndevices and \""},
{"lineNum":"  993","line":"            \"KOKKOS_SKIP_DEVICE if both are set. Raised by \""},
{"lineNum":"  994","line":"            \"Kokkos::initialize(int narg, char* argc[]).\");"},
{"lineNum":"  995","line":"      else"},
{"lineNum":"  996","line":"        skip_device = env_skip_device;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  997","line":"    }"},
{"lineNum":"  998","line":"    if (rdevices > 0) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  999","line":"      if (skip_device > 0 && rdevices == 1)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1000","line":"        Impl::throw_runtime_exception(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1001","line":"            \"Error: cannot KOKKOS_SKIP_DEVICE the only KOKKOS_RAND_DEVICE. \""},
{"lineNum":" 1002","line":"            \"Raised by Kokkos::initialize(int narg, char* argc[]).\");"},
{"lineNum":" 1003","line":""},
{"lineNum":" 1004","line":"      std::srand(get_process_id());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1005","line":"      while (device < 0) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1006","line":"        int test_device = std::rand() % rdevices;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1007","line":"        if (test_device != skip_device) device = test_device;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1008","line":"      }"},
{"lineNum":" 1009","line":"    }"},
{"lineNum":" 1010","line":"  }"},
{"lineNum":" 1011","line":"  char* env_disablewarnings_str = std::getenv(\"KOKKOS_DISABLE_WARNINGS\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1012","line":"  if (env_disablewarnings_str != nullptr) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1013","line":"    std::string env_str(env_disablewarnings_str);  // deep-copies string"},
{"lineNum":" 1014","line":"    for (char& c : env_str) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1015","line":"      c = toupper(c);","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":" 1016","line":"    }"},
{"lineNum":" 1017","line":"    const auto _rc = std::regex_constants::icase | std::regex_constants::egrep;"},
{"lineNum":" 1018","line":"    const auto _re = std::regex(\"^(true|on|yes|[1-9])$\", _rc);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1019","line":"    if (std::regex_match(env_str, _re))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1020","line":"      disable_warnings = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1021","line":"    else if (disable_warnings)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1022","line":"      Impl::throw_runtime_exception(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1023","line":"          \"Error: expecting a match between --kokkos-disable-warnings and \""},
{"lineNum":" 1024","line":"          \"KOKKOS_DISABLE_WARNINGS if both are set. Raised by \""},
{"lineNum":" 1025","line":"          \"Kokkos::initialize(int narg, char* argc[]).\");"},
{"lineNum":" 1026","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1027","line":"  char* env_tuneinternals_str = std::getenv(\"KOKKOS_TUNE_INTERNALS\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1028","line":"  if (env_tuneinternals_str != nullptr) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1029","line":"    std::string env_str(env_tuneinternals_str);  // deep-copies string"},
{"lineNum":" 1030","line":"    for (char& c : env_str) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1031","line":"      c = toupper(c);","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":" 1032","line":"    }"},
{"lineNum":" 1033","line":"    if ((env_str == \"TRUE\") || (env_str == \"ON\") || (env_str == \"1\"))","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1034","line":"      tune_internals = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1035","line":"    else if (tune_internals)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1036","line":"      Impl::throw_runtime_exception(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1037","line":"          \"Error: expecting a match between --kokkos-tune-internals and \""},
{"lineNum":" 1038","line":"          \"KOKKOS_TUNE_INTERNALS if both are set. Raised by \""},
{"lineNum":" 1039","line":"          \"Kokkos::initialize(int narg, char* argc[]).\");"},
{"lineNum":" 1040","line":"  }"},
{"lineNum":" 1041","line":"  auto env_tool_lib = std::getenv(\"KOKKOS_PROFILE_LIBRARY\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1042","line":"  if (env_tool_lib != nullptr) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1043","line":"    if (!tool_lib.empty() && std::string(env_tool_lib) != tool_lib)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1044","line":"      Impl::throw_runtime_exception(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1045","line":"          \"Error: expecting a match between --kokkos-tools-library and \""},
{"lineNum":" 1046","line":"          \"KOKKOS_PROFILE_LIBRARY if both are set. Raised by \""},
{"lineNum":" 1047","line":"          \"Kokkos::initialize(int narg, char* argc[]).\");"},
{"lineNum":" 1048","line":"    else"},
{"lineNum":" 1049","line":"      tool_lib = env_tool_lib;"},
{"lineNum":" 1050","line":"  }"},
{"lineNum":" 1051","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1052","line":""},
{"lineNum":" 1053","line":"}  // namespace"},
{"lineNum":" 1054","line":""},
{"lineNum":" 1055","line":"}  // namespace Impl"},
{"lineNum":" 1056","line":"}  // namespace Kokkos"},
{"lineNum":" 1057","line":""},
{"lineNum":" 1058","line":"//----------------------------------------------------------------------------"},
{"lineNum":" 1059","line":""},
{"lineNum":" 1060","line":"namespace Kokkos {"},
{"lineNum":" 1061","line":""},
{"lineNum":" 1062","line":"void initialize(int& narg, char* arg[]) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1063","line":"  InitArguments arguments;"},
{"lineNum":" 1064","line":"  Impl::parse_command_line_arguments(narg, arg, arguments);"},
{"lineNum":" 1065","line":"  Impl::parse_environment_variables(arguments);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1066","line":"  Impl::initialize_internal(arguments);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1067","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1068","line":""},
{"lineNum":" 1069","line":"void initialize(InitArguments arguments) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1070","line":"  Impl::parse_environment_variables(arguments);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1071","line":"  Impl::initialize_internal(arguments);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1072","line":"}"},
{"lineNum":" 1073","line":""},
{"lineNum":" 1074","line":"namespace Impl {"},
{"lineNum":" 1075","line":""},
{"lineNum":" 1076","line":"void pre_initialize(const InitArguments& args) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1077","line":"  pre_initialize_internal(args);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1078","line":"}"},
{"lineNum":" 1079","line":""},
{"lineNum":" 1080","line":"void post_initialize(const InitArguments& args) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1081","line":"  post_initialize_internal(args);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1082","line":"}"},
{"lineNum":" 1083","line":""},
{"lineNum":" 1084","line":"}  // namespace Impl"},
{"lineNum":" 1085","line":""},
{"lineNum":" 1086","line":"void push_finalize_hook(std::function<void()> f) { finalize_hooks.push(f); }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1087","line":""},
{"lineNum":" 1088","line":"void finalize() { Impl::finalize_internal(); }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1089","line":""},
{"lineNum":" 1090","line":"void finalize_all() {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1091","line":"  enum : bool { all_spaces = true };"},
{"lineNum":" 1092","line":"  Impl::finalize_internal(all_spaces);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1093","line":"}"},
{"lineNum":" 1094","line":""},
{"lineNum":" 1095","line":"void fence() { Impl::fence_internal(); }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1096","line":""},
{"lineNum":" 1097","line":"void print_helper(std::ostringstream& out,"},
{"lineNum":" 1098","line":"                  const std::map<std::string, std::string>& print_me) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1099","line":"  for (const auto& kv : print_me) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1100","line":"    out << kv.first << \": \" << kv.second << \'\\n\';"},
{"lineNum":" 1101","line":"  }"},
{"lineNum":" 1102","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1103","line":""},
{"lineNum":" 1104","line":"void print_configuration(std::ostream& out, const bool detail) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1105","line":"  std::ostringstream msg;"},
{"lineNum":" 1106","line":""},
{"lineNum":" 1107","line":"  print_helper(msg, Kokkos::Impl::metadata_map[\"version_info\"]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1108","line":""},
{"lineNum":" 1109","line":"  msg << \"Compiler:\" << std::endl;"},
{"lineNum":" 1110","line":"  print_helper(msg, Kokkos::Impl::metadata_map[\"compiler_version\"]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1111","line":""},
{"lineNum":" 1112","line":"  msg << \"Architecture:\" << std::endl;"},
{"lineNum":" 1113","line":"  print_helper(msg, Kokkos::Impl::metadata_map[\"architecture\"]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1114","line":""},
{"lineNum":" 1115","line":"  msg << \"Atomics:\" << std::endl;"},
{"lineNum":" 1116","line":"  print_helper(msg, Kokkos::Impl::metadata_map[\"atomics\"]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1117","line":""},
{"lineNum":" 1118","line":"  msg << \"Vectorization:\" << std::endl;"},
{"lineNum":" 1119","line":"  print_helper(msg, Kokkos::Impl::metadata_map[\"vectorization\"]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1120","line":""},
{"lineNum":" 1121","line":"  msg << \"Memory:\" << std::endl;"},
{"lineNum":" 1122","line":"  print_helper(msg, Kokkos::Impl::metadata_map[\"memory\"]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1123","line":""},
{"lineNum":" 1124","line":"  msg << \"Options:\" << std::endl;"},
{"lineNum":" 1125","line":"  print_helper(msg, Kokkos::Impl::metadata_map[\"options\"]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1126","line":""},
{"lineNum":" 1127","line":"  Impl::ExecSpaceManager::get_instance().print_configuration(msg, detail);"},
{"lineNum":" 1128","line":""},
{"lineNum":" 1129","line":"  out << msg.str() << std::endl;"},
{"lineNum":" 1130","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1131","line":""},
{"lineNum":" 1132","line":"bool is_initialized() noexcept { return g_is_initialized; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1133","line":""},
{"lineNum":" 1134","line":"bool show_warnings() noexcept { return g_show_warnings; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1135","line":"bool tune_internals() noexcept { return g_tune_internals; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1136","line":""},
{"lineNum":" 1137","line":"#ifdef KOKKOS_COMPILER_PGI"},
{"lineNum":" 1138","line":"namespace Impl {"},
{"lineNum":" 1139","line":"// Bizzarely, an extra jump instruction forces the PGI compiler to not have a"},
{"lineNum":" 1140","line":"// bug related to (probably?) empty base optimization and/or aggregate"},
{"lineNum":" 1141","line":"// construction."},
{"lineNum":" 1142","line":"void _kokkos_pgi_compiler_bug_workaround() {}"},
{"lineNum":" 1143","line":"}  // end namespace Impl"},
{"lineNum":" 1144","line":"#endif"},
{"lineNum":" 1145","line":""},
{"lineNum":" 1146","line":"}  // namespace Kokkos"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 350, "covered" : 0,};
var merged_data = [];
