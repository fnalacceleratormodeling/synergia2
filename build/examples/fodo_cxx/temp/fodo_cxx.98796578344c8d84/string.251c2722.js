var data = {lines:[
{"lineNum":"    1","line":"// -*- C++ -*-"},
{"lineNum":"    2","line":"//===--------------------------- string -----------------------------------===//"},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions."},
{"lineNum":"    5","line":"// See https://llvm.org/LICENSE.txt for license information."},
{"lineNum":"    6","line":"// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef _LIBCPP_STRING"},
{"lineNum":"   11","line":"#define _LIBCPP_STRING"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"/*"},
{"lineNum":"   14","line":"    string synopsis"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"namespace std"},
{"lineNum":"   17","line":"{"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"template <class stateT>"},
{"lineNum":"   20","line":"class fpos"},
{"lineNum":"   21","line":"{"},
{"lineNum":"   22","line":"private:"},
{"lineNum":"   23","line":"    stateT st;"},
{"lineNum":"   24","line":"public:"},
{"lineNum":"   25","line":"    fpos(streamoff = streamoff());"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"    operator streamoff() const;"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"    stateT state() const;"},
{"lineNum":"   30","line":"    void state(stateT);"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"    fpos& operator+=(streamoff);"},
{"lineNum":"   33","line":"    fpos  operator+ (streamoff) const;"},
{"lineNum":"   34","line":"    fpos& operator-=(streamoff);"},
{"lineNum":"   35","line":"    fpos  operator- (streamoff) const;"},
{"lineNum":"   36","line":"};"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"template <class stateT> streamoff operator-(const fpos<stateT>& x, const fpos<stateT>& y);"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"template <class stateT> bool operator==(const fpos<stateT>& x, const fpos<stateT>& y);"},
{"lineNum":"   41","line":"template <class stateT> bool operator!=(const fpos<stateT>& x, const fpos<stateT>& y);"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"template <class charT>"},
{"lineNum":"   44","line":"struct char_traits"},
{"lineNum":"   45","line":"{"},
{"lineNum":"   46","line":"    typedef charT     char_type;"},
{"lineNum":"   47","line":"    typedef ...       int_type;"},
{"lineNum":"   48","line":"    typedef streamoff off_type;"},
{"lineNum":"   49","line":"    typedef streampos pos_type;"},
{"lineNum":"   50","line":"    typedef mbstate_t state_type;"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"    static void assign(char_type& c1, const char_type& c2) noexcept;"},
{"lineNum":"   53","line":"    static constexpr bool eq(char_type c1, char_type c2) noexcept;"},
{"lineNum":"   54","line":"    static constexpr bool lt(char_type c1, char_type c2) noexcept;"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"    static int              compare(const char_type* s1, const char_type* s2, size_t n);"},
{"lineNum":"   57","line":"    static size_t           length(const char_type* s);"},
{"lineNum":"   58","line":"    static const char_type* find(const char_type* s, size_t n, const char_type& a);"},
{"lineNum":"   59","line":"    static char_type*       move(char_type* s1, const char_type* s2, size_t n);"},
{"lineNum":"   60","line":"    static char_type*       copy(char_type* s1, const char_type* s2, size_t n);"},
{"lineNum":"   61","line":"    static char_type*       assign(char_type* s, size_t n, char_type a);"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"    static constexpr int_type  not_eof(int_type c) noexcept;"},
{"lineNum":"   64","line":"    static constexpr char_type to_char_type(int_type c) noexcept;"},
{"lineNum":"   65","line":"    static constexpr int_type  to_int_type(char_type c) noexcept;"},
{"lineNum":"   66","line":"    static constexpr bool      eq_int_type(int_type c1, int_type c2) noexcept;"},
{"lineNum":"   67","line":"    static constexpr int_type  eof() noexcept;"},
{"lineNum":"   68","line":"};"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"template <> struct char_traits<char>;"},
{"lineNum":"   71","line":"template <> struct char_traits<wchar_t>;"},
{"lineNum":"   72","line":"template <> struct char_traits<char8_t>;  // C++20"},
{"lineNum":"   73","line":"template <> struct char_traits<char16_t>;"},
{"lineNum":"   74","line":"template <> struct char_traits<char32_t>;"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"template<class charT, class traits = char_traits<charT>, class Allocator = allocator<charT> >"},
{"lineNum":"   77","line":"class basic_string"},
{"lineNum":"   78","line":"{"},
{"lineNum":"   79","line":"public:"},
{"lineNum":"   80","line":"// types:"},
{"lineNum":"   81","line":"    typedef traits traits_type;"},
{"lineNum":"   82","line":"    typedef typename traits_type::char_type value_type;"},
{"lineNum":"   83","line":"    typedef Allocator allocator_type;"},
{"lineNum":"   84","line":"    typedef typename allocator_type::size_type size_type;"},
{"lineNum":"   85","line":"    typedef typename allocator_type::difference_type difference_type;"},
{"lineNum":"   86","line":"    typedef typename allocator_type::reference reference;"},
{"lineNum":"   87","line":"    typedef typename allocator_type::const_reference const_reference;"},
{"lineNum":"   88","line":"    typedef typename allocator_type::pointer pointer;"},
{"lineNum":"   89","line":"    typedef typename allocator_type::const_pointer const_pointer;"},
{"lineNum":"   90","line":"    typedef implementation-defined iterator;"},
{"lineNum":"   91","line":"    typedef implementation-defined const_iterator;"},
{"lineNum":"   92","line":"    typedef std::reverse_iterator<iterator> reverse_iterator;"},
{"lineNum":"   93","line":"    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"    static const size_type npos = -1;"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"    basic_string()"},
{"lineNum":"   98","line":"        noexcept(is_nothrow_default_constructible<allocator_type>::value);"},
{"lineNum":"   99","line":"    explicit basic_string(const allocator_type& a);"},
{"lineNum":"  100","line":"    basic_string(const basic_string& str);"},
{"lineNum":"  101","line":"    basic_string(basic_string&& str)"},
{"lineNum":"  102","line":"        noexcept(is_nothrow_move_constructible<allocator_type>::value);"},
{"lineNum":"  103","line":"    basic_string(const basic_string& str, size_type pos,"},
{"lineNum":"  104","line":"                 const allocator_type& a = allocator_type());"},
{"lineNum":"  105","line":"    basic_string(const basic_string& str, size_type pos, size_type n,"},
{"lineNum":"  106","line":"                 const Allocator& a = Allocator());"},
{"lineNum":"  107","line":"    template<class T>"},
{"lineNum":"  108","line":"        basic_string(const T& t, size_type pos, size_type n, const Allocator& a = Allocator()); // C++17"},
{"lineNum":"  109","line":"    template <class T>"},
{"lineNum":"  110","line":"        explicit basic_string(const T& t, const Allocator& a = Allocator()); // C++17"},
{"lineNum":"  111","line":"    basic_string(const value_type* s, const allocator_type& a = allocator_type());"},
{"lineNum":"  112","line":"    basic_string(const value_type* s, size_type n, const allocator_type& a = allocator_type());"},
{"lineNum":"  113","line":"    basic_string(nullptr_t) = delete; // C++2b"},
{"lineNum":"  114","line":"    basic_string(size_type n, value_type c, const allocator_type& a = allocator_type());"},
{"lineNum":"  115","line":"    template<class InputIterator>"},
{"lineNum":"  116","line":"        basic_string(InputIterator begin, InputIterator end,"},
{"lineNum":"  117","line":"                     const allocator_type& a = allocator_type());"},
{"lineNum":"  118","line":"    basic_string(initializer_list<value_type>, const Allocator& = Allocator());"},
{"lineNum":"  119","line":"    basic_string(const basic_string&, const Allocator&);"},
{"lineNum":"  120","line":"    basic_string(basic_string&&, const Allocator&);"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"    ~basic_string();"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"    operator basic_string_view<charT, traits>() const noexcept;"},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"    basic_string& operator=(const basic_string& str);"},
{"lineNum":"  127","line":"    template <class T>"},
{"lineNum":"  128","line":"        basic_string& operator=(const T& t); // C++17"},
{"lineNum":"  129","line":"    basic_string& operator=(basic_string&& str)"},
{"lineNum":"  130","line":"        noexcept("},
{"lineNum":"  131","line":"             allocator_type::propagate_on_container_move_assignment::value ||"},
{"lineNum":"  132","line":"             allocator_type::is_always_equal::value ); // C++17"},
{"lineNum":"  133","line":"    basic_string& operator=(const value_type* s);"},
{"lineNum":"  134","line":"    basic_string& operator=(nullptr_t) = delete; // C++2b"},
{"lineNum":"  135","line":"    basic_string& operator=(value_type c);"},
{"lineNum":"  136","line":"    basic_string& operator=(initializer_list<value_type>);"},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"    iterator       begin() noexcept;"},
{"lineNum":"  139","line":"    const_iterator begin() const noexcept;"},
{"lineNum":"  140","line":"    iterator       end() noexcept;"},
{"lineNum":"  141","line":"    const_iterator end() const noexcept;"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"    reverse_iterator       rbegin() noexcept;"},
{"lineNum":"  144","line":"    const_reverse_iterator rbegin() const noexcept;"},
{"lineNum":"  145","line":"    reverse_iterator       rend() noexcept;"},
{"lineNum":"  146","line":"    const_reverse_iterator rend() const noexcept;"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"    const_iterator         cbegin() const noexcept;"},
{"lineNum":"  149","line":"    const_iterator         cend() const noexcept;"},
{"lineNum":"  150","line":"    const_reverse_iterator crbegin() const noexcept;"},
{"lineNum":"  151","line":"    const_reverse_iterator crend() const noexcept;"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"    size_type size() const noexcept;"},
{"lineNum":"  154","line":"    size_type length() const noexcept;"},
{"lineNum":"  155","line":"    size_type max_size() const noexcept;"},
{"lineNum":"  156","line":"    size_type capacity() const noexcept;"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"    void resize(size_type n, value_type c);"},
{"lineNum":"  159","line":"    void resize(size_type n);"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"    void reserve(size_type res_arg);"},
{"lineNum":"  162","line":"    void reserve(); // deprecated in C++20"},
{"lineNum":"  163","line":"    void shrink_to_fit();"},
{"lineNum":"  164","line":"    void clear() noexcept;"},
{"lineNum":"  165","line":"    bool empty() const noexcept;"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"    const_reference operator[](size_type pos) const;"},
{"lineNum":"  168","line":"    reference       operator[](size_type pos);"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"    const_reference at(size_type n) const;"},
{"lineNum":"  171","line":"    reference       at(size_type n);"},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"    basic_string& operator+=(const basic_string& str);"},
{"lineNum":"  174","line":"    template <class T>"},
{"lineNum":"  175","line":"        basic_string& operator+=(const T& t);              // C++17"},
{"lineNum":"  176","line":"    basic_string& operator+=(const value_type* s);"},
{"lineNum":"  177","line":"    basic_string& operator+=(value_type c);"},
{"lineNum":"  178","line":"    basic_string& operator+=(initializer_list<value_type>);"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"    basic_string& append(const basic_string& str);"},
{"lineNum":"  181","line":"    template <class T>"},
{"lineNum":"  182","line":"        basic_string& append(const T& t);                 // C++17"},
{"lineNum":"  183","line":"    basic_string& append(const basic_string& str, size_type pos, size_type n=npos); //C++14"},
{"lineNum":"  184","line":"    template <class T>"},
{"lineNum":"  185","line":"        basic_string& append(const T& t, size_type pos, size_type n=npos); // C++17"},
{"lineNum":"  186","line":"    basic_string& append(const value_type* s, size_type n);"},
{"lineNum":"  187","line":"    basic_string& append(const value_type* s);"},
{"lineNum":"  188","line":"    basic_string& append(size_type n, value_type c);"},
{"lineNum":"  189","line":"    template<class InputIterator>"},
{"lineNum":"  190","line":"        basic_string& append(InputIterator first, InputIterator last);"},
{"lineNum":"  191","line":"    basic_string& append(initializer_list<value_type>);"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"    void push_back(value_type c);"},
{"lineNum":"  194","line":"    void pop_back();"},
{"lineNum":"  195","line":"    reference       front();"},
{"lineNum":"  196","line":"    const_reference front() const;"},
{"lineNum":"  197","line":"    reference       back();"},
{"lineNum":"  198","line":"    const_reference back() const;"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"    basic_string& assign(const basic_string& str);"},
{"lineNum":"  201","line":"    template <class T>"},
{"lineNum":"  202","line":"        basic_string& assign(const T& t);  // C++17"},
{"lineNum":"  203","line":"    basic_string& assign(basic_string&& str);"},
{"lineNum":"  204","line":"    basic_string& assign(const basic_string& str, size_type pos, size_type n=npos); // C++14"},
{"lineNum":"  205","line":"    template <class T>"},
{"lineNum":"  206","line":"        basic_string& assign(const T& t, size_type pos, size_type n=npos); // C++17"},
{"lineNum":"  207","line":"    basic_string& assign(const value_type* s, size_type n);"},
{"lineNum":"  208","line":"    basic_string& assign(const value_type* s);"},
{"lineNum":"  209","line":"    basic_string& assign(size_type n, value_type c);"},
{"lineNum":"  210","line":"    template<class InputIterator>"},
{"lineNum":"  211","line":"        basic_string& assign(InputIterator first, InputIterator last);"},
{"lineNum":"  212","line":"    basic_string& assign(initializer_list<value_type>);"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"    basic_string& insert(size_type pos1, const basic_string& str);"},
{"lineNum":"  215","line":"    template <class T>"},
{"lineNum":"  216","line":"        basic_string& insert(size_type pos1, const T& t);"},
{"lineNum":"  217","line":"    basic_string& insert(size_type pos1, const basic_string& str,"},
{"lineNum":"  218","line":"                         size_type pos2, size_type n);"},
{"lineNum":"  219","line":"    template <class T>"},
{"lineNum":"  220","line":"        basic_string& insert(size_type pos1, const T& t, size_type pos2, size_type n); // C++17"},
{"lineNum":"  221","line":"    basic_string& insert(size_type pos, const value_type* s, size_type n=npos); //C++14"},
{"lineNum":"  222","line":"    basic_string& insert(size_type pos, const value_type* s);"},
{"lineNum":"  223","line":"    basic_string& insert(size_type pos, size_type n, value_type c);"},
{"lineNum":"  224","line":"    iterator      insert(const_iterator p, value_type c);"},
{"lineNum":"  225","line":"    iterator      insert(const_iterator p, size_type n, value_type c);"},
{"lineNum":"  226","line":"    template<class InputIterator>"},
{"lineNum":"  227","line":"        iterator insert(const_iterator p, InputIterator first, InputIterator last);"},
{"lineNum":"  228","line":"    iterator      insert(const_iterator p, initializer_list<value_type>);"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"    basic_string& erase(size_type pos = 0, size_type n = npos);"},
{"lineNum":"  231","line":"    iterator      erase(const_iterator position);"},
{"lineNum":"  232","line":"    iterator      erase(const_iterator first, const_iterator last);"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"    basic_string& replace(size_type pos1, size_type n1, const basic_string& str);"},
{"lineNum":"  235","line":"    template <class T>"},
{"lineNum":"  236","line":"    basic_string& replace(size_type pos1, size_type n1, const T& t);  // C++17"},
{"lineNum":"  237","line":"    basic_string& replace(size_type pos1, size_type n1, const basic_string& str,"},
{"lineNum":"  238","line":"                          size_type pos2, size_type n2=npos); // C++14"},
{"lineNum":"  239","line":"    template <class T>"},
{"lineNum":"  240","line":"        basic_string& replace(size_type pos1, size_type n1, const T& t,"},
{"lineNum":"  241","line":"                              size_type pos2, size_type n); // C++17"},
{"lineNum":"  242","line":"    basic_string& replace(size_type pos, size_type n1, const value_type* s, size_type n2);"},
{"lineNum":"  243","line":"    basic_string& replace(size_type pos, size_type n1, const value_type* s);"},
{"lineNum":"  244","line":"    basic_string& replace(size_type pos, size_type n1, size_type n2, value_type c);"},
{"lineNum":"  245","line":"    basic_string& replace(const_iterator i1, const_iterator i2, const basic_string& str);"},
{"lineNum":"  246","line":"    template <class T>"},
{"lineNum":"  247","line":"        basic_string& replace(const_iterator i1, const_iterator i2, const T& t);  // C++17"},
{"lineNum":"  248","line":"    basic_string& replace(const_iterator i1, const_iterator i2, const value_type* s, size_type n);"},
{"lineNum":"  249","line":"    basic_string& replace(const_iterator i1, const_iterator i2, const value_type* s);"},
{"lineNum":"  250","line":"    basic_string& replace(const_iterator i1, const_iterator i2, size_type n, value_type c);"},
{"lineNum":"  251","line":"    template<class InputIterator>"},
{"lineNum":"  252","line":"        basic_string& replace(const_iterator i1, const_iterator i2, InputIterator j1, InputIterator j2);"},
{"lineNum":"  253","line":"    basic_string& replace(const_iterator i1, const_iterator i2, initializer_list<value_type>);"},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"    size_type copy(value_type* s, size_type n, size_type pos = 0) const;"},
{"lineNum":"  256","line":"    basic_string substr(size_type pos = 0, size_type n = npos) const;"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"    void swap(basic_string& str)"},
{"lineNum":"  259","line":"        noexcept(allocator_traits<allocator_type>::propagate_on_container_swap::value ||"},
{"lineNum":"  260","line":"                 allocator_traits<allocator_type>::is_always_equal::value);  // C++17"},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"    const value_type* c_str() const noexcept;"},
{"lineNum":"  263","line":"    const value_type* data() const noexcept;"},
{"lineNum":"  264","line":"          value_type* data()       noexcept;   // C++17"},
{"lineNum":"  265","line":""},
{"lineNum":"  266","line":"    allocator_type get_allocator() const noexcept;"},
{"lineNum":"  267","line":""},
{"lineNum":"  268","line":"    size_type find(const basic_string& str, size_type pos = 0) const noexcept;"},
{"lineNum":"  269","line":"    template <class T>"},
{"lineNum":"  270","line":"        size_type find(const T& t, size_type pos = 0) const noexcept; // C++17, noexcept as an extension"},
{"lineNum":"  271","line":"    size_type find(const value_type* s, size_type pos, size_type n) const noexcept;"},
{"lineNum":"  272","line":"    size_type find(const value_type* s, size_type pos = 0) const noexcept;"},
{"lineNum":"  273","line":"    size_type find(value_type c, size_type pos = 0) const noexcept;"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"    size_type rfind(const basic_string& str, size_type pos = npos) const noexcept;"},
{"lineNum":"  276","line":"    template <class T>"},
{"lineNum":"  277","line":"        size_type rfind(const T& t, size_type pos = npos) const noexcept; // C++17, noexcept as an extension"},
{"lineNum":"  278","line":"    size_type rfind(const value_type* s, size_type pos, size_type n) const noexcept;"},
{"lineNum":"  279","line":"    size_type rfind(const value_type* s, size_type pos = npos) const noexcept;"},
{"lineNum":"  280","line":"    size_type rfind(value_type c, size_type pos = npos) const noexcept;"},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"    size_type find_first_of(const basic_string& str, size_type pos = 0) const noexcept;"},
{"lineNum":"  283","line":"    template <class T>"},
{"lineNum":"  284","line":"        size_type find_first_of(const T& t, size_type pos = 0) const noexcept; // C++17, noexcept as an extension"},
{"lineNum":"  285","line":"    size_type find_first_of(const value_type* s, size_type pos, size_type n) const noexcept;"},
{"lineNum":"  286","line":"    size_type find_first_of(const value_type* s, size_type pos = 0) const noexcept;"},
{"lineNum":"  287","line":"    size_type find_first_of(value_type c, size_type pos = 0) const noexcept;"},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"    size_type find_last_of(const basic_string& str, size_type pos = npos) const noexcept;"},
{"lineNum":"  290","line":"    template <class T>"},
{"lineNum":"  291","line":"        size_type find_last_of(const T& t, size_type pos = npos) const noexcept noexcept; // C++17, noexcept as an extension"},
{"lineNum":"  292","line":"    size_type find_last_of(const value_type* s, size_type pos, size_type n) const noexcept;"},
{"lineNum":"  293","line":"    size_type find_last_of(const value_type* s, size_type pos = npos) const noexcept;"},
{"lineNum":"  294","line":"    size_type find_last_of(value_type c, size_type pos = npos) const noexcept;"},
{"lineNum":"  295","line":""},
{"lineNum":"  296","line":"    size_type find_first_not_of(const basic_string& str, size_type pos = 0) const noexcept;"},
{"lineNum":"  297","line":"    template <class T>"},
{"lineNum":"  298","line":"        size_type find_first_not_of(const T& t, size_type pos = 0) const noexcept; // C++17, noexcept as an extension"},
{"lineNum":"  299","line":"    size_type find_first_not_of(const value_type* s, size_type pos, size_type n) const noexcept;"},
{"lineNum":"  300","line":"    size_type find_first_not_of(const value_type* s, size_type pos = 0) const noexcept;"},
{"lineNum":"  301","line":"    size_type find_first_not_of(value_type c, size_type pos = 0) const noexcept;"},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"    size_type find_last_not_of(const basic_string& str, size_type pos = npos) const noexcept;"},
{"lineNum":"  304","line":"    template <class T>"},
{"lineNum":"  305","line":"        size_type find_last_not_of(const T& t, size_type pos = npos) const noexcept; // C++17, noexcept as an extension"},
{"lineNum":"  306","line":"    size_type find_last_not_of(const value_type* s, size_type pos, size_type n) const noexcept;"},
{"lineNum":"  307","line":"    size_type find_last_not_of(const value_type* s, size_type pos = npos) const noexcept;"},
{"lineNum":"  308","line":"    size_type find_last_not_of(value_type c, size_type pos = npos) const noexcept;"},
{"lineNum":"  309","line":""},
{"lineNum":"  310","line":"    int compare(const basic_string& str) const noexcept;"},
{"lineNum":"  311","line":"    template <class T>"},
{"lineNum":"  312","line":"        int compare(const T& t) const noexcept;  // C++17, noexcept as an extension"},
{"lineNum":"  313","line":"    int compare(size_type pos1, size_type n1, const basic_string& str) const;"},
{"lineNum":"  314","line":"    template <class T>"},
{"lineNum":"  315","line":"        int compare(size_type pos1, size_type n1, const T& t) const;  // C++17"},
{"lineNum":"  316","line":"    int compare(size_type pos1, size_type n1, const basic_string& str,"},
{"lineNum":"  317","line":"                size_type pos2, size_type n2=npos) const; // C++14"},
{"lineNum":"  318","line":"    template <class T>"},
{"lineNum":"  319","line":"        int compare(size_type pos1, size_type n1, const T& t,"},
{"lineNum":"  320","line":"                    size_type pos2, size_type n2=npos) const; // C++17"},
{"lineNum":"  321","line":"    int compare(const value_type* s) const noexcept;"},
{"lineNum":"  322","line":"    int compare(size_type pos1, size_type n1, const value_type* s) const;"},
{"lineNum":"  323","line":"    int compare(size_type pos1, size_type n1, const value_type* s, size_type n2) const;"},
{"lineNum":"  324","line":""},
{"lineNum":"  325","line":"    bool starts_with(basic_string_view<charT, traits> sv) const noexcept; // C++20"},
{"lineNum":"  326","line":"    bool starts_with(charT c) const noexcept;                             // C++20"},
{"lineNum":"  327","line":"    bool starts_with(const charT* s) const;                               // C++20"},
{"lineNum":"  328","line":"    bool ends_with(basic_string_view<charT, traits> sv) const noexcept;   // C++20"},
{"lineNum":"  329","line":"    bool ends_with(charT c) const noexcept;                               // C++20"},
{"lineNum":"  330","line":"    bool ends_with(const charT* s) const;                                 // C++20"},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"    constexpr bool contains(basic_string_view<charT, traits> sv) const noexcept; // C++2b"},
{"lineNum":"  333","line":"    constexpr bool contains(charT c) const noexcept;                             // C++2b"},
{"lineNum":"  334","line":"    constexpr bool contains(const charT* s) const;                               // C++2b"},
{"lineNum":"  335","line":""},
{"lineNum":"  336","line":"    bool __invariants() const;"},
{"lineNum":"  337","line":"};"},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"template<class InputIterator,"},
{"lineNum":"  340","line":"         class Allocator = allocator<typename iterator_traits<InputIterator>::value_type>>"},
{"lineNum":"  341","line":"basic_string(InputIterator, InputIterator, Allocator = Allocator())"},
{"lineNum":"  342","line":"   -> basic_string<typename iterator_traits<InputIterator>::value_type,"},
{"lineNum":"  343","line":"                  char_traits<typename iterator_traits<InputIterator>::value_type>,"},
{"lineNum":"  344","line":"                  Allocator>;   // C++17"},
{"lineNum":"  345","line":""},
{"lineNum":"  346","line":"template<class charT, class traits, class Allocator>"},
{"lineNum":"  347","line":"basic_string<charT, traits, Allocator>"},
{"lineNum":"  348","line":"operator+(const basic_string<charT, traits, Allocator>& lhs,"},
{"lineNum":"  349","line":"          const basic_string<charT, traits, Allocator>& rhs);"},
{"lineNum":"  350","line":""},
{"lineNum":"  351","line":"template<class charT, class traits, class Allocator>"},
{"lineNum":"  352","line":"basic_string<charT, traits, Allocator>"},
{"lineNum":"  353","line":"operator+(const charT* lhs , const basic_string<charT,traits,Allocator>&rhs);"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"template<class charT, class traits, class Allocator>"},
{"lineNum":"  356","line":"basic_string<charT, traits, Allocator>"},
{"lineNum":"  357","line":"operator+(charT lhs, const basic_string<charT,traits,Allocator>& rhs);"},
{"lineNum":"  358","line":""},
{"lineNum":"  359","line":"template<class charT, class traits, class Allocator>"},
{"lineNum":"  360","line":"basic_string<charT, traits, Allocator>"},
{"lineNum":"  361","line":"operator+(const basic_string<charT, traits, Allocator>& lhs, const charT* rhs);"},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"template<class charT, class traits, class Allocator>"},
{"lineNum":"  364","line":"basic_string<charT, traits, Allocator>"},
{"lineNum":"  365","line":"operator+(const basic_string<charT, traits, Allocator>& lhs, charT rhs);"},
{"lineNum":"  366","line":""},
{"lineNum":"  367","line":"template<class charT, class traits, class Allocator>"},
{"lineNum":"  368","line":"bool operator==(const basic_string<charT, traits, Allocator>& lhs,"},
{"lineNum":"  369","line":"                const basic_string<charT, traits, Allocator>& rhs) noexcept;"},
{"lineNum":"  370","line":""},
{"lineNum":"  371","line":"template<class charT, class traits, class Allocator>"},
{"lineNum":"  372","line":"bool operator==(const charT* lhs, const basic_string<charT, traits, Allocator>& rhs) noexcept;"},
{"lineNum":"  373","line":""},
{"lineNum":"  374","line":"template<class charT, class traits, class Allocator>"},
{"lineNum":"  375","line":"bool operator==(const basic_string<charT,traits,Allocator>& lhs, const charT* rhs) noexcept;"},
{"lineNum":"  376","line":""},
{"lineNum":"  377","line":"template<class charT, class traits, class Allocator>"},
{"lineNum":"  378","line":"bool operator!=(const basic_string<charT,traits,Allocator>& lhs,"},
{"lineNum":"  379","line":"                const basic_string<charT, traits, Allocator>& rhs) noexcept;"},
{"lineNum":"  380","line":""},
{"lineNum":"  381","line":"template<class charT, class traits, class Allocator>"},
{"lineNum":"  382","line":"bool operator!=(const charT* lhs, const basic_string<charT, traits, Allocator>& rhs) noexcept;"},
{"lineNum":"  383","line":""},
{"lineNum":"  384","line":"template<class charT, class traits, class Allocator>"},
{"lineNum":"  385","line":"bool operator!=(const basic_string<charT, traits, Allocator>& lhs, const charT* rhs) noexcept;"},
{"lineNum":"  386","line":""},
{"lineNum":"  387","line":"template<class charT, class traits, class Allocator>"},
{"lineNum":"  388","line":"bool operator< (const basic_string<charT, traits, Allocator>& lhs,"},
{"lineNum":"  389","line":"                const basic_string<charT, traits, Allocator>& rhs) noexcept;"},
{"lineNum":"  390","line":""},
{"lineNum":"  391","line":"template<class charT, class traits, class Allocator>"},
{"lineNum":"  392","line":"bool operator< (const basic_string<charT, traits, Allocator>& lhs, const charT* rhs) noexcept;"},
{"lineNum":"  393","line":""},
{"lineNum":"  394","line":"template<class charT, class traits, class Allocator>"},
{"lineNum":"  395","line":"bool operator< (const charT* lhs, const basic_string<charT, traits, Allocator>& rhs) noexcept;"},
{"lineNum":"  396","line":""},
{"lineNum":"  397","line":"template<class charT, class traits, class Allocator>"},
{"lineNum":"  398","line":"bool operator> (const basic_string<charT, traits, Allocator>& lhs,"},
{"lineNum":"  399","line":"                const basic_string<charT, traits, Allocator>& rhs) noexcept;"},
{"lineNum":"  400","line":""},
{"lineNum":"  401","line":"template<class charT, class traits, class Allocator>"},
{"lineNum":"  402","line":"bool operator> (const basic_string<charT, traits, Allocator>& lhs, const charT* rhs) noexcept;"},
{"lineNum":"  403","line":""},
{"lineNum":"  404","line":"template<class charT, class traits, class Allocator>"},
{"lineNum":"  405","line":"bool operator> (const charT* lhs, const basic_string<charT, traits, Allocator>& rhs) noexcept;"},
{"lineNum":"  406","line":""},
{"lineNum":"  407","line":"template<class charT, class traits, class Allocator>"},
{"lineNum":"  408","line":"bool operator<=(const basic_string<charT, traits, Allocator>& lhs,"},
{"lineNum":"  409","line":"                const basic_string<charT, traits, Allocator>& rhs) noexcept;"},
{"lineNum":"  410","line":""},
{"lineNum":"  411","line":"template<class charT, class traits, class Allocator>"},
{"lineNum":"  412","line":"bool operator<=(const basic_string<charT, traits, Allocator>& lhs, const charT* rhs) noexcept;"},
{"lineNum":"  413","line":""},
{"lineNum":"  414","line":"template<class charT, class traits, class Allocator>"},
{"lineNum":"  415","line":"bool operator<=(const charT* lhs, const basic_string<charT, traits, Allocator>& rhs) noexcept;"},
{"lineNum":"  416","line":""},
{"lineNum":"  417","line":"template<class charT, class traits, class Allocator>"},
{"lineNum":"  418","line":"bool operator>=(const basic_string<charT, traits, Allocator>& lhs,"},
{"lineNum":"  419","line":"                const basic_string<charT, traits, Allocator>& rhs) noexcept;"},
{"lineNum":"  420","line":""},
{"lineNum":"  421","line":"template<class charT, class traits, class Allocator>"},
{"lineNum":"  422","line":"bool operator>=(const basic_string<charT, traits, Allocator>& lhs, const charT* rhs) noexcept;"},
{"lineNum":"  423","line":""},
{"lineNum":"  424","line":"template<class charT, class traits, class Allocator>"},
{"lineNum":"  425","line":"bool operator>=(const charT* lhs, const basic_string<charT, traits, Allocator>& rhs) noexcept;"},
{"lineNum":"  426","line":""},
{"lineNum":"  427","line":"template<class charT, class traits, class Allocator>"},
{"lineNum":"  428","line":"void swap(basic_string<charT, traits, Allocator>& lhs,"},
{"lineNum":"  429","line":"          basic_string<charT, traits, Allocator>& rhs)"},
{"lineNum":"  430","line":"            noexcept(noexcept(lhs.swap(rhs)));"},
{"lineNum":"  431","line":""},
{"lineNum":"  432","line":"template<class charT, class traits, class Allocator>"},
{"lineNum":"  433","line":"basic_istream<charT, traits>&"},
{"lineNum":"  434","line":"operator>>(basic_istream<charT, traits>& is, basic_string<charT, traits, Allocator>& str);"},
{"lineNum":"  435","line":""},
{"lineNum":"  436","line":"template<class charT, class traits, class Allocator>"},
{"lineNum":"  437","line":"basic_ostream<charT, traits>&"},
{"lineNum":"  438","line":"operator<<(basic_ostream<charT, traits>& os, const basic_string<charT, traits, Allocator>& str);"},
{"lineNum":"  439","line":""},
{"lineNum":"  440","line":"template<class charT, class traits, class Allocator>"},
{"lineNum":"  441","line":"basic_istream<charT, traits>&"},
{"lineNum":"  442","line":"getline(basic_istream<charT, traits>& is, basic_string<charT, traits, Allocator>& str,"},
{"lineNum":"  443","line":"        charT delim);"},
{"lineNum":"  444","line":""},
{"lineNum":"  445","line":"template<class charT, class traits, class Allocator>"},
{"lineNum":"  446","line":"basic_istream<charT, traits>&"},
{"lineNum":"  447","line":"getline(basic_istream<charT, traits>& is, basic_string<charT, traits, Allocator>& str);"},
{"lineNum":"  448","line":""},
{"lineNum":"  449","line":"template<class charT, class traits, class Allocator, class U>"},
{"lineNum":"  450","line":"typename basic_string<charT, traits, Allocator>::size_type"},
{"lineNum":"  451","line":"erase(basic_string<charT, traits, Allocator>& c, const U& value);    // C++20"},
{"lineNum":"  452","line":"template<class charT, class traits, class Allocator, class Predicate>"},
{"lineNum":"  453","line":"typename basic_string<charT, traits, Allocator>::size_type"},
{"lineNum":"  454","line":"erase_if(basic_string<charT, traits, Allocator>& c, Predicate pred); // C++20"},
{"lineNum":"  455","line":""},
{"lineNum":"  456","line":"typedef basic_string<char>    string;"},
{"lineNum":"  457","line":"typedef basic_string<wchar_t> wstring;"},
{"lineNum":"  458","line":"typedef basic_string<char8_t> u8string; // C++20"},
{"lineNum":"  459","line":"typedef basic_string<char16_t> u16string;"},
{"lineNum":"  460","line":"typedef basic_string<char32_t> u32string;"},
{"lineNum":"  461","line":""},
{"lineNum":"  462","line":"int                stoi  (const string& str, size_t* idx = nullptr, int base = 10);"},
{"lineNum":"  463","line":"long               stol  (const string& str, size_t* idx = nullptr, int base = 10);"},
{"lineNum":"  464","line":"unsigned long      stoul (const string& str, size_t* idx = nullptr, int base = 10);"},
{"lineNum":"  465","line":"long long          stoll (const string& str, size_t* idx = nullptr, int base = 10);"},
{"lineNum":"  466","line":"unsigned long long stoull(const string& str, size_t* idx = nullptr, int base = 10);"},
{"lineNum":"  467","line":""},
{"lineNum":"  468","line":"float       stof (const string& str, size_t* idx = nullptr);"},
{"lineNum":"  469","line":"double      stod (const string& str, size_t* idx = nullptr);"},
{"lineNum":"  470","line":"long double stold(const string& str, size_t* idx = nullptr);"},
{"lineNum":"  471","line":""},
{"lineNum":"  472","line":"string to_string(int val);"},
{"lineNum":"  473","line":"string to_string(unsigned val);"},
{"lineNum":"  474","line":"string to_string(long val);"},
{"lineNum":"  475","line":"string to_string(unsigned long val);"},
{"lineNum":"  476","line":"string to_string(long long val);"},
{"lineNum":"  477","line":"string to_string(unsigned long long val);"},
{"lineNum":"  478","line":"string to_string(float val);"},
{"lineNum":"  479","line":"string to_string(double val);"},
{"lineNum":"  480","line":"string to_string(long double val);"},
{"lineNum":"  481","line":""},
{"lineNum":"  482","line":"int                stoi  (const wstring& str, size_t* idx = nullptr, int base = 10);"},
{"lineNum":"  483","line":"long               stol  (const wstring& str, size_t* idx = nullptr, int base = 10);"},
{"lineNum":"  484","line":"unsigned long      stoul (const wstring& str, size_t* idx = nullptr, int base = 10);"},
{"lineNum":"  485","line":"long long          stoll (const wstring& str, size_t* idx = nullptr, int base = 10);"},
{"lineNum":"  486","line":"unsigned long long stoull(const wstring& str, size_t* idx = nullptr, int base = 10);"},
{"lineNum":"  487","line":""},
{"lineNum":"  488","line":"float       stof (const wstring& str, size_t* idx = nullptr);"},
{"lineNum":"  489","line":"double      stod (const wstring& str, size_t* idx = nullptr);"},
{"lineNum":"  490","line":"long double stold(const wstring& str, size_t* idx = nullptr);"},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"wstring to_wstring(int val);"},
{"lineNum":"  493","line":"wstring to_wstring(unsigned val);"},
{"lineNum":"  494","line":"wstring to_wstring(long val);"},
{"lineNum":"  495","line":"wstring to_wstring(unsigned long val);"},
{"lineNum":"  496","line":"wstring to_wstring(long long val);"},
{"lineNum":"  497","line":"wstring to_wstring(unsigned long long val);"},
{"lineNum":"  498","line":"wstring to_wstring(float val);"},
{"lineNum":"  499","line":"wstring to_wstring(double val);"},
{"lineNum":"  500","line":"wstring to_wstring(long double val);"},
{"lineNum":"  501","line":""},
{"lineNum":"  502","line":"template <> struct hash<string>;"},
{"lineNum":"  503","line":"template <> struct hash<u8string>; // C++20"},
{"lineNum":"  504","line":"template <> struct hash<u16string>;"},
{"lineNum":"  505","line":"template <> struct hash<u32string>;"},
{"lineNum":"  506","line":"template <> struct hash<wstring>;"},
{"lineNum":"  507","line":""},
{"lineNum":"  508","line":"basic_string<char>     operator \"\" s( const char *str,     size_t len ); // C++14"},
{"lineNum":"  509","line":"basic_string<wchar_t>  operator \"\" s( const wchar_t *str,  size_t len ); // C++14"},
{"lineNum":"  510","line":"basic_string<char8_t>  operator \"\" s( const char8_t *str,  size_t len ); // C++20"},
{"lineNum":"  511","line":"basic_string<char16_t> operator \"\" s( const char16_t *str, size_t len ); // C++14"},
{"lineNum":"  512","line":"basic_string<char32_t> operator \"\" s( const char32_t *str, size_t len ); // C++14"},
{"lineNum":"  513","line":""},
{"lineNum":"  514","line":"}  // std"},
{"lineNum":"  515","line":""},
{"lineNum":"  516","line":"*/"},
{"lineNum":"  517","line":""},
{"lineNum":"  518","line":"#include <__config>"},
{"lineNum":"  519","line":"#include <__debug>"},
{"lineNum":"  520","line":"#include <__functional_base>"},
{"lineNum":"  521","line":"#include <__iterator/wrap_iter.h>"},
{"lineNum":"  522","line":"#include <algorithm>"},
{"lineNum":"  523","line":"#include <compare>"},
{"lineNum":"  524","line":"#include <cstdio>  // EOF"},
{"lineNum":"  525","line":"#include <cstdlib>"},
{"lineNum":"  526","line":"#include <cstring>"},
{"lineNum":"  527","line":"#include <cwchar>"},
{"lineNum":"  528","line":"#include <initializer_list>"},
{"lineNum":"  529","line":"#include <iosfwd>"},
{"lineNum":"  530","line":"#include <iterator>"},
{"lineNum":"  531","line":"#include <memory>"},
{"lineNum":"  532","line":"#include <stdexcept>"},
{"lineNum":"  533","line":"#include <string_view>"},
{"lineNum":"  534","line":"#include <type_traits>"},
{"lineNum":"  535","line":"#include <utility>"},
{"lineNum":"  536","line":"#include <version>"},
{"lineNum":"  537","line":""},
{"lineNum":"  538","line":"#ifndef _LIBCPP_HAS_NO_UNICODE_CHARS"},
{"lineNum":"  539","line":"# include <cstdint>"},
{"lineNum":"  540","line":"#endif"},
{"lineNum":"  541","line":""},
{"lineNum":"  542","line":"#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"},
{"lineNum":"  543","line":"#pragma GCC system_header"},
{"lineNum":"  544","line":"#endif"},
{"lineNum":"  545","line":""},
{"lineNum":"  546","line":"_LIBCPP_PUSH_MACROS"},
{"lineNum":"  547","line":"#include <__undef_macros>"},
{"lineNum":"  548","line":""},
{"lineNum":"  549","line":""},
{"lineNum":"  550","line":"_LIBCPP_BEGIN_NAMESPACE_STD"},
{"lineNum":"  551","line":""},
{"lineNum":"  552","line":"// fpos"},
{"lineNum":"  553","line":""},
{"lineNum":"  554","line":"template <class _StateT>"},
{"lineNum":"  555","line":"class _LIBCPP_TEMPLATE_VIS fpos"},
{"lineNum":"  556","line":"{"},
{"lineNum":"  557","line":"private:"},
{"lineNum":"  558","line":"    _StateT __st_;"},
{"lineNum":"  559","line":"    streamoff __off_;"},
{"lineNum":"  560","line":"public:"},
{"lineNum":"  561","line":"    _LIBCPP_INLINE_VISIBILITY fpos(streamoff __off = streamoff()) : __st_(), __off_(__off) {}"},
{"lineNum":"  562","line":""},
{"lineNum":"  563","line":"    _LIBCPP_INLINE_VISIBILITY operator streamoff() const {return __off_;}"},
{"lineNum":"  564","line":""},
{"lineNum":"  565","line":"    _LIBCPP_INLINE_VISIBILITY _StateT state() const {return __st_;}"},
{"lineNum":"  566","line":"    _LIBCPP_INLINE_VISIBILITY void state(_StateT __st) {__st_ = __st;}"},
{"lineNum":"  567","line":""},
{"lineNum":"  568","line":"    _LIBCPP_INLINE_VISIBILITY fpos& operator+=(streamoff __off) {__off_ += __off; return *this;}"},
{"lineNum":"  569","line":"    _LIBCPP_INLINE_VISIBILITY fpos  operator+ (streamoff __off) const {fpos __t(*this); __t += __off; return __t;}"},
{"lineNum":"  570","line":"    _LIBCPP_INLINE_VISIBILITY fpos& operator-=(streamoff __off) {__off_ -= __off; return *this;}"},
{"lineNum":"  571","line":"    _LIBCPP_INLINE_VISIBILITY fpos  operator- (streamoff __off) const {fpos __t(*this); __t -= __off; return __t;}"},
{"lineNum":"  572","line":"};"},
{"lineNum":"  573","line":""},
{"lineNum":"  574","line":"template <class _StateT>"},
{"lineNum":"  575","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  576","line":"streamoff operator-(const fpos<_StateT>& __x, const fpos<_StateT>& __y)"},
{"lineNum":"  577","line":"    {return streamoff(__x) - streamoff(__y);}"},
{"lineNum":"  578","line":""},
{"lineNum":"  579","line":"template <class _StateT>"},
{"lineNum":"  580","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  581","line":"bool operator==(const fpos<_StateT>& __x, const fpos<_StateT>& __y)"},
{"lineNum":"  582","line":"    {return streamoff(__x) == streamoff(__y);}","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  583","line":""},
{"lineNum":"  584","line":"template <class _StateT>"},
{"lineNum":"  585","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  586","line":"bool operator!=(const fpos<_StateT>& __x, const fpos<_StateT>& __y)"},
{"lineNum":"  587","line":"    {return streamoff(__x) != streamoff(__y);}"},
{"lineNum":"  588","line":""},
{"lineNum":"  589","line":"// basic_string"},
{"lineNum":"  590","line":""},
{"lineNum":"  591","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":"  592","line":"basic_string<_CharT, _Traits, _Allocator>"},
{"lineNum":"  593","line":"operator+(const basic_string<_CharT, _Traits, _Allocator>& __x,"},
{"lineNum":"  594","line":"          const basic_string<_CharT, _Traits, _Allocator>& __y);"},
{"lineNum":"  595","line":""},
{"lineNum":"  596","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":"  597","line":"basic_string<_CharT, _Traits, _Allocator>"},
{"lineNum":"  598","line":"operator+(const _CharT* __x, const basic_string<_CharT,_Traits,_Allocator>& __y);"},
{"lineNum":"  599","line":""},
{"lineNum":"  600","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":"  601","line":"basic_string<_CharT, _Traits, _Allocator>"},
{"lineNum":"  602","line":"operator+(_CharT __x, const basic_string<_CharT,_Traits,_Allocator>& __y);"},
{"lineNum":"  603","line":""},
{"lineNum":"  604","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":"  605","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  606","line":"basic_string<_CharT, _Traits, _Allocator>"},
{"lineNum":"  607","line":"operator+(const basic_string<_CharT, _Traits, _Allocator>& __x, const _CharT* __y);"},
{"lineNum":"  608","line":""},
{"lineNum":"  609","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":"  610","line":"basic_string<_CharT, _Traits, _Allocator>"},
{"lineNum":"  611","line":"operator+(const basic_string<_CharT, _Traits, _Allocator>& __x, _CharT __y);"},
{"lineNum":"  612","line":""},
{"lineNum":"  613","line":"_LIBCPP_EXTERN_TEMPLATE(_LIBCPP_FUNC_VIS string operator+<char, char_traits<char>, allocator<char> >(char const*, string const&))"},
{"lineNum":"  614","line":""},
{"lineNum":"  615","line":"template <bool>"},
{"lineNum":"  616","line":"class _LIBCPP_TEMPLATE_VIS __basic_string_common"},
{"lineNum":"  617","line":"{"},
{"lineNum":"  618","line":"protected:"},
{"lineNum":"  619","line":"    _LIBCPP_NORETURN void __throw_length_error() const;"},
{"lineNum":"  620","line":"    _LIBCPP_NORETURN void __throw_out_of_range() const;"},
{"lineNum":"  621","line":"};"},
{"lineNum":"  622","line":""},
{"lineNum":"  623","line":"template <bool __b>"},
{"lineNum":"  624","line":"void"},
{"lineNum":"  625","line":"__basic_string_common<__b>::__throw_length_error() const"},
{"lineNum":"  626","line":"{"},
{"lineNum":"  627","line":"    _VSTD::__throw_length_error(\"basic_string\");"},
{"lineNum":"  628","line":"}"},
{"lineNum":"  629","line":""},
{"lineNum":"  630","line":"template <bool __b>"},
{"lineNum":"  631","line":"void"},
{"lineNum":"  632","line":"__basic_string_common<__b>::__throw_out_of_range() const"},
{"lineNum":"  633","line":"{"},
{"lineNum":"  634","line":"    _VSTD::__throw_out_of_range(\"basic_string\");"},
{"lineNum":"  635","line":"}"},
{"lineNum":"  636","line":""},
{"lineNum":"  637","line":"_LIBCPP_EXTERN_TEMPLATE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS __basic_string_common<true>)"},
{"lineNum":"  638","line":""},
{"lineNum":"  639","line":"template <class _Iter>"},
{"lineNum":"  640","line":"struct __string_is_trivial_iterator : public false_type {};"},
{"lineNum":"  641","line":""},
{"lineNum":"  642","line":"template <class _Tp>"},
{"lineNum":"  643","line":"struct __string_is_trivial_iterator<_Tp*>"},
{"lineNum":"  644","line":"    : public is_arithmetic<_Tp> {};"},
{"lineNum":"  645","line":""},
{"lineNum":"  646","line":"template <class _Iter>"},
{"lineNum":"  647","line":"struct __string_is_trivial_iterator<__wrap_iter<_Iter> >"},
{"lineNum":"  648","line":"    : public __string_is_trivial_iterator<_Iter> {};"},
{"lineNum":"  649","line":""},
{"lineNum":"  650","line":"template <class _CharT, class _Traits, class _Tp>"},
{"lineNum":"  651","line":"struct __can_be_converted_to_string_view : public _BoolConstant<"},
{"lineNum":"  652","line":"      is_convertible<const _Tp&, basic_string_view<_CharT, _Traits> >::value &&"},
{"lineNum":"  653","line":"     !is_convertible<const _Tp&, const _CharT*>::value"},
{"lineNum":"  654","line":"    > {};"},
{"lineNum":"  655","line":""},
{"lineNum":"  656","line":"#ifdef _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT"},
{"lineNum":"  657","line":""},
{"lineNum":"  658","line":"template <class _CharT, size_t = sizeof(_CharT)>"},
{"lineNum":"  659","line":"struct __padding"},
{"lineNum":"  660","line":"{"},
{"lineNum":"  661","line":"    unsigned char __xx[sizeof(_CharT)-1];"},
{"lineNum":"  662","line":"};"},
{"lineNum":"  663","line":""},
{"lineNum":"  664","line":"template <class _CharT>"},
{"lineNum":"  665","line":"struct __padding<_CharT, 1>"},
{"lineNum":"  666","line":"{"},
{"lineNum":"  667","line":"};"},
{"lineNum":"  668","line":""},
{"lineNum":"  669","line":"#endif // _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT"},
{"lineNum":"  670","line":""},
{"lineNum":"  671","line":"#ifndef _LIBCPP_HAS_NO_CHAR8_T"},
{"lineNum":"  672","line":"typedef basic_string<char8_t> u8string;"},
{"lineNum":"  673","line":"#endif"},
{"lineNum":"  674","line":""},
{"lineNum":"  675","line":"#ifndef _LIBCPP_HAS_NO_UNICODE_CHARS"},
{"lineNum":"  676","line":"typedef basic_string<char16_t> u16string;"},
{"lineNum":"  677","line":"typedef basic_string<char32_t> u32string;"},
{"lineNum":"  678","line":"#endif // _LIBCPP_HAS_NO_UNICODE_CHARS"},
{"lineNum":"  679","line":""},
{"lineNum":"  680","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":"  681","line":"class"},
{"lineNum":"  682","line":"    _LIBCPP_TEMPLATE_VIS"},
{"lineNum":"  683","line":"#ifndef _LIBCPP_HAS_NO_CHAR8_T"},
{"lineNum":"  684","line":"    _LIBCPP_PREFERRED_NAME(u8string)"},
{"lineNum":"  685","line":"#endif"},
{"lineNum":"  686","line":"#ifndef _LIBCPP_HAS_NO_UNICODE_CHARS"},
{"lineNum":"  687","line":"    _LIBCPP_PREFERRED_NAME(u16string)"},
{"lineNum":"  688","line":"    _LIBCPP_PREFERRED_NAME(u32string)"},
{"lineNum":"  689","line":"#endif"},
{"lineNum":"  690","line":"    basic_string"},
{"lineNum":"  691","line":"    : private __basic_string_common<true>"},
{"lineNum":"  692","line":"{"},
{"lineNum":"  693","line":"public:"},
{"lineNum":"  694","line":"    typedef basic_string                                 __self;"},
{"lineNum":"  695","line":"    typedef basic_string_view<_CharT, _Traits>           __self_view;"},
{"lineNum":"  696","line":"    typedef _Traits                                      traits_type;"},
{"lineNum":"  697","line":"    typedef _CharT                                       value_type;"},
{"lineNum":"  698","line":"    typedef _Allocator                                   allocator_type;"},
{"lineNum":"  699","line":"    typedef allocator_traits<allocator_type>             __alloc_traits;"},
{"lineNum":"  700","line":"    typedef typename __alloc_traits::size_type           size_type;"},
{"lineNum":"  701","line":"    typedef typename __alloc_traits::difference_type     difference_type;"},
{"lineNum":"  702","line":"    typedef value_type&                                  reference;"},
{"lineNum":"  703","line":"    typedef const value_type&                            const_reference;"},
{"lineNum":"  704","line":"    typedef typename __alloc_traits::pointer             pointer;"},
{"lineNum":"  705","line":"    typedef typename __alloc_traits::const_pointer       const_pointer;"},
{"lineNum":"  706","line":""},
{"lineNum":"  707","line":"    static_assert((!is_array<value_type>::value), \"Character type of basic_string must not be an array\");"},
{"lineNum":"  708","line":"    static_assert(( is_standard_layout<value_type>::value), \"Character type of basic_string must be standard-layout\");"},
{"lineNum":"  709","line":"    static_assert(( is_trivial<value_type>::value), \"Character type of basic_string must be trivial\");"},
{"lineNum":"  710","line":"    static_assert(( is_same<_CharT, typename traits_type::char_type>::value),"},
{"lineNum":"  711","line":"                  \"traits_type::char_type must be the same type as CharT\");"},
{"lineNum":"  712","line":"    static_assert(( is_same<typename allocator_type::value_type, value_type>::value),"},
{"lineNum":"  713","line":"                  \"Allocator::value_type must be same type as value_type\");"},
{"lineNum":"  714","line":""},
{"lineNum":"  715","line":"    typedef __wrap_iter<pointer>                         iterator;"},
{"lineNum":"  716","line":"    typedef __wrap_iter<const_pointer>                   const_iterator;"},
{"lineNum":"  717","line":"    typedef _VSTD::reverse_iterator<iterator>             reverse_iterator;"},
{"lineNum":"  718","line":"    typedef _VSTD::reverse_iterator<const_iterator>       const_reverse_iterator;"},
{"lineNum":"  719","line":""},
{"lineNum":"  720","line":"private:"},
{"lineNum":"  721","line":""},
{"lineNum":"  722","line":"#ifdef _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT"},
{"lineNum":"  723","line":""},
{"lineNum":"  724","line":"    struct __long"},
{"lineNum":"  725","line":"    {"},
{"lineNum":"  726","line":"        pointer   __data_;"},
{"lineNum":"  727","line":"        size_type __size_;"},
{"lineNum":"  728","line":"        size_type __cap_;"},
{"lineNum":"  729","line":"    };"},
{"lineNum":"  730","line":""},
{"lineNum":"  731","line":"#ifdef _LIBCPP_BIG_ENDIAN"},
{"lineNum":"  732","line":"    static const size_type __short_mask = 0x01;"},
{"lineNum":"  733","line":"    static const size_type __long_mask  = 0x1ul;"},
{"lineNum":"  734","line":"#else  // _LIBCPP_BIG_ENDIAN"},
{"lineNum":"  735","line":"    static const size_type __short_mask = 0x80;"},
{"lineNum":"  736","line":"    static const size_type __long_mask  = ~(size_type(~0) >> 1);"},
{"lineNum":"  737","line":"#endif // _LIBCPP_BIG_ENDIAN"},
{"lineNum":"  738","line":""},
{"lineNum":"  739","line":"    enum {__min_cap = (sizeof(__long) - 1)/sizeof(value_type) > 2 ?"},
{"lineNum":"  740","line":"                      (sizeof(__long) - 1)/sizeof(value_type) : 2};"},
{"lineNum":"  741","line":""},
{"lineNum":"  742","line":"    struct __short"},
{"lineNum":"  743","line":"    {"},
{"lineNum":"  744","line":"        value_type __data_[__min_cap];"},
{"lineNum":"  745","line":"        struct"},
{"lineNum":"  746","line":"            : __padding<value_type>"},
{"lineNum":"  747","line":"        {"},
{"lineNum":"  748","line":"            unsigned char __size_;"},
{"lineNum":"  749","line":"        };"},
{"lineNum":"  750","line":"    };"},
{"lineNum":"  751","line":""},
{"lineNum":"  752","line":"#else"},
{"lineNum":"  753","line":""},
{"lineNum":"  754","line":"    struct __long"},
{"lineNum":"  755","line":"    {"},
{"lineNum":"  756","line":"        size_type __cap_;"},
{"lineNum":"  757","line":"        size_type __size_;"},
{"lineNum":"  758","line":"        pointer   __data_;"},
{"lineNum":"  759","line":"    };"},
{"lineNum":"  760","line":""},
{"lineNum":"  761","line":"#ifdef _LIBCPP_BIG_ENDIAN"},
{"lineNum":"  762","line":"    static const size_type __short_mask = 0x80;"},
{"lineNum":"  763","line":"    static const size_type __long_mask  = ~(size_type(~0) >> 1);"},
{"lineNum":"  764","line":"#else  // _LIBCPP_BIG_ENDIAN"},
{"lineNum":"  765","line":"    static const size_type __short_mask = 0x01;"},
{"lineNum":"  766","line":"    static const size_type __long_mask  = 0x1ul;"},
{"lineNum":"  767","line":"#endif // _LIBCPP_BIG_ENDIAN"},
{"lineNum":"  768","line":""},
{"lineNum":"  769","line":"    enum {__min_cap = (sizeof(__long) - 1)/sizeof(value_type) > 2 ?"},
{"lineNum":"  770","line":"                      (sizeof(__long) - 1)/sizeof(value_type) : 2};"},
{"lineNum":"  771","line":""},
{"lineNum":"  772","line":"    struct __short"},
{"lineNum":"  773","line":"    {"},
{"lineNum":"  774","line":"        union"},
{"lineNum":"  775","line":"        {"},
{"lineNum":"  776","line":"            unsigned char __size_;"},
{"lineNum":"  777","line":"            value_type __lx;"},
{"lineNum":"  778","line":"        };"},
{"lineNum":"  779","line":"        value_type __data_[__min_cap];"},
{"lineNum":"  780","line":"    };"},
{"lineNum":"  781","line":""},
{"lineNum":"  782","line":"#endif // _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT"},
{"lineNum":"  783","line":""},
{"lineNum":"  784","line":"    union __ulx{__long __lx; __short __lxx;};"},
{"lineNum":"  785","line":""},
{"lineNum":"  786","line":"    enum {__n_words = sizeof(__ulx) / sizeof(size_type)};"},
{"lineNum":"  787","line":""},
{"lineNum":"  788","line":"    struct __raw"},
{"lineNum":"  789","line":"    {"},
{"lineNum":"  790","line":"        size_type __words[__n_words];"},
{"lineNum":"  791","line":"    };"},
{"lineNum":"  792","line":""},
{"lineNum":"  793","line":"    struct __rep"},
{"lineNum":"  794","line":"    {"},
{"lineNum":"  795","line":"        union"},
{"lineNum":"  796","line":"        {"},
{"lineNum":"  797","line":"            __long  __l;"},
{"lineNum":"  798","line":"            __short __s;"},
{"lineNum":"  799","line":"            __raw   __r;"},
{"lineNum":"  800","line":"        };"},
{"lineNum":"  801","line":"    };"},
{"lineNum":"  802","line":""},
{"lineNum":"  803","line":"    __compressed_pair<__rep, allocator_type> __r_;"},
{"lineNum":"  804","line":""},
{"lineNum":"  805","line":"public:"},
{"lineNum":"  806","line":"    _LIBCPP_TEMPLATE_DATA_VIS"},
{"lineNum":"  807","line":"    static const size_type npos = -1;"},
{"lineNum":"  808","line":""},
{"lineNum":"  809","line":"    _LIBCPP_INLINE_VISIBILITY basic_string()"},
{"lineNum":"  810","line":"        _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value);"},
{"lineNum":"  811","line":""},
{"lineNum":"  812","line":"    _LIBCPP_INLINE_VISIBILITY explicit basic_string(const allocator_type& __a)"},
{"lineNum":"  813","line":"#if _LIBCPP_STD_VER <= 14"},
{"lineNum":"  814","line":"        _NOEXCEPT_(is_nothrow_copy_constructible<allocator_type>::value);"},
{"lineNum":"  815","line":"#else"},
{"lineNum":"  816","line":"        _NOEXCEPT;"},
{"lineNum":"  817","line":"#endif"},
{"lineNum":"  818","line":""},
{"lineNum":"  819","line":"    basic_string(const basic_string& __str);"},
{"lineNum":"  820","line":"    basic_string(const basic_string& __str, const allocator_type& __a);"},
{"lineNum":"  821","line":""},
{"lineNum":"  822","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  823","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  824","line":"    basic_string(basic_string&& __str)"},
{"lineNum":"  825","line":"#if _LIBCPP_STD_VER <= 14"},
{"lineNum":"  826","line":"        _NOEXCEPT_(is_nothrow_move_constructible<allocator_type>::value);"},
{"lineNum":"  827","line":"#else"},
{"lineNum":"  828","line":"        _NOEXCEPT;"},
{"lineNum":"  829","line":"#endif"},
{"lineNum":"  830","line":""},
{"lineNum":"  831","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  832","line":"    basic_string(basic_string&& __str, const allocator_type& __a);"},
{"lineNum":"  833","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":"  834","line":""},
{"lineNum":"  835","line":"    template <class = _EnableIf<__is_allocator<_Allocator>::value, nullptr_t> >"},
{"lineNum":"  836","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  837","line":"    basic_string(const _CharT* __s) : __r_(__default_init_tag(), __default_init_tag()) {","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  838","line":"      _LIBCPP_ASSERT(__s != nullptr, \"basic_string(const char*) detected nullptr\");"},
{"lineNum":"  839","line":"      __init(__s, traits_type::length(__s));","class":"linePartCov","hits":"27","order":"384","possible_hits":"156",},
{"lineNum":"  840","line":"#   if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  841","line":"      __get_db()->__insert_c(this);"},
{"lineNum":"  842","line":"#   endif"},
{"lineNum":"  843","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  844","line":""},
{"lineNum":"  845","line":"    template <class = _EnableIf<__is_allocator<_Allocator>::value, nullptr_t> >"},
{"lineNum":"  846","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  847","line":"        basic_string(const _CharT* __s, const _Allocator& __a);"},
{"lineNum":"  848","line":""},
{"lineNum":"  849","line":"#if _LIBCPP_STD_VER > 20"},
{"lineNum":"  850","line":"    basic_string(nullptr_t) = delete;"},
{"lineNum":"  851","line":"#endif"},
{"lineNum":"  852","line":""},
{"lineNum":"  853","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  854","line":"    basic_string(const _CharT* __s, size_type __n);"},
{"lineNum":"  855","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  856","line":"    basic_string(const _CharT* __s, size_type __n, const _Allocator& __a);"},
{"lineNum":"  857","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  858","line":"    basic_string(size_type __n, _CharT __c);"},
{"lineNum":"  859","line":""},
{"lineNum":"  860","line":"    template <class = _EnableIf<__is_allocator<_Allocator>::value, nullptr_t> >"},
{"lineNum":"  861","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  862","line":"        basic_string(size_type __n, _CharT __c, const _Allocator& __a);"},
{"lineNum":"  863","line":""},
{"lineNum":"  864","line":"    basic_string(const basic_string& __str, size_type __pos, size_type __n,"},
{"lineNum":"  865","line":"                 const _Allocator& __a = _Allocator());"},
{"lineNum":"  866","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  867","line":"    basic_string(const basic_string& __str, size_type __pos,"},
{"lineNum":"  868","line":"                 const _Allocator& __a = _Allocator());"},
{"lineNum":"  869","line":""},
{"lineNum":"  870","line":"    template<class _Tp, class = _EnableIf<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value && !__is_same_uncvref<_Tp, basic_string>::value> >"},
{"lineNum":"  871","line":"        _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS"},
{"lineNum":"  872","line":"        basic_string(const _Tp& __t, size_type __pos, size_type __n,"},
{"lineNum":"  873","line":"                     const allocator_type& __a = allocator_type());"},
{"lineNum":"  874","line":""},
{"lineNum":"  875","line":"    template<class _Tp, class = _EnableIf<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&"},
{"lineNum":"  876","line":"                                          !__is_same_uncvref<_Tp, basic_string>::value> >"},
{"lineNum":"  877","line":"        _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS"},
{"lineNum":"  878","line":"        explicit basic_string(const _Tp& __t);"},
{"lineNum":"  879","line":""},
{"lineNum":"  880","line":"    template<class _Tp, class = _EnableIf<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value && !__is_same_uncvref<_Tp, basic_string>::value> >"},
{"lineNum":"  881","line":"        _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS"},
{"lineNum":"  882","line":"        explicit basic_string(const _Tp& __t, const allocator_type& __a);"},
{"lineNum":"  883","line":""},
{"lineNum":"  884","line":"    template<class _InputIterator, class = _EnableIf<__is_cpp17_input_iterator<_InputIterator>::value> >"},
{"lineNum":"  885","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  886","line":"        basic_string(_InputIterator __first, _InputIterator __last);"},
{"lineNum":"  887","line":"    template<class _InputIterator, class = _EnableIf<__is_cpp17_input_iterator<_InputIterator>::value> >"},
{"lineNum":"  888","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  889","line":"        basic_string(_InputIterator __first, _InputIterator __last, const allocator_type& __a);"},
{"lineNum":"  890","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  891","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  892","line":"    basic_string(initializer_list<_CharT> __il);"},
{"lineNum":"  893","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  894","line":"    basic_string(initializer_list<_CharT> __il, const _Allocator& __a);"},
{"lineNum":"  895","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":"  896","line":""},
{"lineNum":"  897","line":"    inline ~basic_string();"},
{"lineNum":"  898","line":""},
{"lineNum":"  899","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  900","line":"    operator __self_view() const _NOEXCEPT { return __self_view(data(), size()); }","class":"linePartCov","hits":"3","order":"434","possible_hits":"4",},
{"lineNum":"  901","line":""},
{"lineNum":"  902","line":"    basic_string& operator=(const basic_string& __str);"},
{"lineNum":"  903","line":""},
{"lineNum":"  904","line":"    template <class _Tp, class = _EnableIf<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value && !__is_same_uncvref<_Tp, basic_string>::value> >"},
{"lineNum":"  905","line":"    basic_string& operator=(const _Tp& __t)"},
{"lineNum":"  906","line":"        {__self_view __sv = __t; return assign(__sv);}"},
{"lineNum":"  907","line":""},
{"lineNum":"  908","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  909","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  910","line":"    basic_string& operator=(basic_string&& __str)"},
{"lineNum":"  911","line":"        _NOEXCEPT_((__noexcept_move_assign_container<_Allocator, __alloc_traits>::value));"},
{"lineNum":"  912","line":"     _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  913","line":"    basic_string& operator=(initializer_list<value_type> __il) {return assign(__il.begin(), __il.size());}"},
{"lineNum":"  914","line":"#endif"},
{"lineNum":"  915","line":"    _LIBCPP_INLINE_VISIBILITY basic_string& operator=(const value_type* __s) {return assign(__s);}","class":"lineNoCov","hits":"0","possible_hits":"17",},
{"lineNum":"  916","line":"#if _LIBCPP_STD_VER > 20"},
{"lineNum":"  917","line":"    basic_string& operator=(nullptr_t) = delete;"},
{"lineNum":"  918","line":"#endif"},
{"lineNum":"  919","line":"    basic_string& operator=(value_type __c);"},
{"lineNum":"  920","line":""},
{"lineNum":"  921","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  922","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  923","line":"    iterator begin() _NOEXCEPT"},
{"lineNum":"  924","line":"        {return iterator(this, __get_pointer());}"},
{"lineNum":"  925","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  926","line":"    const_iterator begin() const _NOEXCEPT"},
{"lineNum":"  927","line":"        {return const_iterator(this, __get_pointer());}"},
{"lineNum":"  928","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  929","line":"    iterator end() _NOEXCEPT"},
{"lineNum":"  930","line":"        {return iterator(this, __get_pointer() + size());}"},
{"lineNum":"  931","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  932","line":"    const_iterator end() const _NOEXCEPT"},
{"lineNum":"  933","line":"        {return const_iterator(this, __get_pointer() + size());}"},
{"lineNum":"  934","line":"#else"},
{"lineNum":"  935","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  936","line":"    iterator begin() _NOEXCEPT"},
{"lineNum":"  937","line":"        {return iterator(__get_pointer());}"},
{"lineNum":"  938","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  939","line":"    const_iterator begin() const _NOEXCEPT"},
{"lineNum":"  940","line":"        {return const_iterator(__get_pointer());}"},
{"lineNum":"  941","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  942","line":"    iterator end() _NOEXCEPT"},
{"lineNum":"  943","line":"        {return iterator(__get_pointer() + size());}","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  944","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  945","line":"    const_iterator end() const _NOEXCEPT"},
{"lineNum":"  946","line":"        {return const_iterator(__get_pointer() + size());}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  947","line":"#endif // _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  948","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  949","line":"    reverse_iterator rbegin() _NOEXCEPT"},
{"lineNum":"  950","line":"        {return reverse_iterator(end());}"},
{"lineNum":"  951","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  952","line":"    const_reverse_iterator rbegin() const _NOEXCEPT"},
{"lineNum":"  953","line":"        {return const_reverse_iterator(end());}"},
{"lineNum":"  954","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  955","line":"    reverse_iterator rend() _NOEXCEPT"},
{"lineNum":"  956","line":"        {return reverse_iterator(begin());}"},
{"lineNum":"  957","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  958","line":"    const_reverse_iterator rend() const _NOEXCEPT"},
{"lineNum":"  959","line":"        {return const_reverse_iterator(begin());}"},
{"lineNum":"  960","line":""},
{"lineNum":"  961","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  962","line":"    const_iterator cbegin() const _NOEXCEPT"},
{"lineNum":"  963","line":"        {return begin();}"},
{"lineNum":"  964","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  965","line":"    const_iterator cend() const _NOEXCEPT"},
{"lineNum":"  966","line":"        {return end();}"},
{"lineNum":"  967","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  968","line":"    const_reverse_iterator crbegin() const _NOEXCEPT"},
{"lineNum":"  969","line":"        {return rbegin();}"},
{"lineNum":"  970","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  971","line":"    const_reverse_iterator crend() const _NOEXCEPT"},
{"lineNum":"  972","line":"        {return rend();}"},
{"lineNum":"  973","line":""},
{"lineNum":"  974","line":"    _LIBCPP_INLINE_VISIBILITY size_type size() const _NOEXCEPT"},
{"lineNum":"  975","line":"        {return __is_long() ? __get_long_size() : __get_short_size();}","class":"linePartCov","hits":"8","order":"437","possible_hits":"1381",},
{"lineNum":"  976","line":"    _LIBCPP_INLINE_VISIBILITY size_type length() const _NOEXCEPT {return size();}"},
{"lineNum":"  977","line":"    _LIBCPP_INLINE_VISIBILITY size_type max_size() const _NOEXCEPT;"},
{"lineNum":"  978","line":"    _LIBCPP_INLINE_VISIBILITY size_type capacity() const _NOEXCEPT"},
{"lineNum":"  979","line":"        {return (__is_long() ? __get_long_cap()","class":"lineNoCov","hits":"0","possible_hits":"34",},
{"lineNum":"  980","line":"                             : static_cast<size_type>(__min_cap)) - 1;}"},
{"lineNum":"  981","line":""},
{"lineNum":"  982","line":"    void resize(size_type __n, value_type __c);"},
{"lineNum":"  983","line":"    _LIBCPP_INLINE_VISIBILITY void resize(size_type __n) {resize(__n, value_type());}","class":"lineNoCov","hits":"0","possible_hits":"43",},
{"lineNum":"  984","line":""},
{"lineNum":"  985","line":"    void reserve(size_type __requested_capacity);"},
{"lineNum":"  986","line":"    _LIBCPP_INLINE_VISIBILITY void __resize_default_init(size_type __n);"},
{"lineNum":"  987","line":""},
{"lineNum":"  988","line":"    _LIBCPP_DEPRECATED_IN_CXX20 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  989","line":"    void reserve() _NOEXCEPT {shrink_to_fit();}"},
{"lineNum":"  990","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  991","line":"    void shrink_to_fit() _NOEXCEPT;"},
{"lineNum":"  992","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  993","line":"    void clear() _NOEXCEPT;"},
{"lineNum":"  994","line":"    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  995","line":"    bool empty() const _NOEXCEPT {return size() == 0;}","class":"lineNoCov","hits":"0","possible_hits":"188",},
{"lineNum":"  996","line":""},
{"lineNum":"  997","line":"    _LIBCPP_INLINE_VISIBILITY const_reference operator[](size_type __pos) const _NOEXCEPT;"},
{"lineNum":"  998","line":"    _LIBCPP_INLINE_VISIBILITY reference       operator[](size_type __pos)       _NOEXCEPT;"},
{"lineNum":"  999","line":""},
{"lineNum":" 1000","line":"    const_reference at(size_type __n) const;"},
{"lineNum":" 1001","line":"    reference       at(size_type __n);"},
{"lineNum":" 1002","line":""},
{"lineNum":" 1003","line":"    _LIBCPP_INLINE_VISIBILITY basic_string& operator+=(const basic_string& __str) {return append(__str);}"},
{"lineNum":" 1004","line":""},
{"lineNum":" 1005","line":"    template <class _Tp>"},
{"lineNum":" 1006","line":"    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS"},
{"lineNum":" 1007","line":"    _EnableIf"},
{"lineNum":" 1008","line":"        <"},
{"lineNum":" 1009","line":"            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value"},
{"lineNum":" 1010","line":"            && !__is_same_uncvref<_Tp, basic_string >::value,"},
{"lineNum":" 1011","line":"            basic_string&"},
{"lineNum":" 1012","line":"        >"},
{"lineNum":" 1013","line":"                                            operator+=(const _Tp& __t)            {__self_view __sv = __t; return append(__sv);}"},
{"lineNum":" 1014","line":"    _LIBCPP_INLINE_VISIBILITY basic_string& operator+=(const value_type* __s)     {return append(__s);}","class":"lineNoCov","hits":"0","possible_hits":"332",},
{"lineNum":" 1015","line":"    _LIBCPP_INLINE_VISIBILITY basic_string& operator+=(value_type __c)            {push_back(__c); return *this;}","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":" 1016","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1017","line":"    _LIBCPP_INLINE_VISIBILITY basic_string& operator+=(initializer_list<value_type> __il) {return append(__il);}"},
{"lineNum":" 1018","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 1019","line":""},
{"lineNum":" 1020","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1021","line":"    basic_string& append(const basic_string& __str);"},
{"lineNum":" 1022","line":""},
{"lineNum":" 1023","line":"    template <class _Tp>"},
{"lineNum":" 1024","line":"    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS"},
{"lineNum":" 1025","line":"    _EnableIf<"},
{"lineNum":" 1026","line":"            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value"},
{"lineNum":" 1027","line":"            && !__is_same_uncvref<_Tp, basic_string>::value,"},
{"lineNum":" 1028","line":"            basic_string&"},
{"lineNum":" 1029","line":"        >"},
{"lineNum":" 1030","line":"                  append(const _Tp& __t) { __self_view __sv = __t; return append(__sv.data(), __sv.size()); }"},
{"lineNum":" 1031","line":"    basic_string& append(const basic_string& __str, size_type __pos, size_type __n=npos);"},
{"lineNum":" 1032","line":""},
{"lineNum":" 1033","line":"    template <class _Tp>"},
{"lineNum":" 1034","line":"    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS"},
{"lineNum":" 1035","line":"    _EnableIf"},
{"lineNum":" 1036","line":"        <"},
{"lineNum":" 1037","line":"            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value"},
{"lineNum":" 1038","line":"            && !__is_same_uncvref<_Tp, basic_string>::value,"},
{"lineNum":" 1039","line":"            basic_string&"},
{"lineNum":" 1040","line":"        >"},
{"lineNum":" 1041","line":"                  append(const _Tp& __t, size_type __pos, size_type __n=npos);"},
{"lineNum":" 1042","line":"    basic_string& append(const value_type* __s, size_type __n);"},
{"lineNum":" 1043","line":"    basic_string& append(const value_type* __s);"},
{"lineNum":" 1044","line":"    basic_string& append(size_type __n, value_type __c);"},
{"lineNum":" 1045","line":""},
{"lineNum":" 1046","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1047","line":"    void __append_default_init(size_type __n);"},
{"lineNum":" 1048","line":""},
{"lineNum":" 1049","line":"    template<class _InputIterator>"},
{"lineNum":" 1050","line":"    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS"},
{"lineNum":" 1051","line":"    _EnableIf"},
{"lineNum":" 1052","line":"        <"},
{"lineNum":" 1053","line":"            __is_exactly_cpp17_input_iterator<_InputIterator>::value,"},
{"lineNum":" 1054","line":"            basic_string&"},
{"lineNum":" 1055","line":"        >"},
{"lineNum":" 1056","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1057","line":"    append(_InputIterator __first, _InputIterator __last) {"},
{"lineNum":" 1058","line":"      const basic_string __temp(__first, __last, __alloc());"},
{"lineNum":" 1059","line":"      append(__temp.data(), __temp.size());"},
{"lineNum":" 1060","line":"      return *this;"},
{"lineNum":" 1061","line":"    }"},
{"lineNum":" 1062","line":"    template<class _ForwardIterator>"},
{"lineNum":" 1063","line":"    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS"},
{"lineNum":" 1064","line":"    _EnableIf"},
{"lineNum":" 1065","line":"        <"},
{"lineNum":" 1066","line":"            __is_cpp17_forward_iterator<_ForwardIterator>::value,"},
{"lineNum":" 1067","line":"            basic_string&"},
{"lineNum":" 1068","line":"        >"},
{"lineNum":" 1069","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1070","line":"    append(_ForwardIterator __first, _ForwardIterator __last);"},
{"lineNum":" 1071","line":""},
{"lineNum":" 1072","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1073","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1074","line":"    basic_string& append(initializer_list<value_type> __il) {return append(__il.begin(), __il.size());}"},
{"lineNum":" 1075","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 1076","line":""},
{"lineNum":" 1077","line":"    void push_back(value_type __c);"},
{"lineNum":" 1078","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1079","line":"    void pop_back();"},
{"lineNum":" 1080","line":"    _LIBCPP_INLINE_VISIBILITY reference       front() _NOEXCEPT;"},
{"lineNum":" 1081","line":"    _LIBCPP_INLINE_VISIBILITY const_reference front() const _NOEXCEPT;"},
{"lineNum":" 1082","line":"    _LIBCPP_INLINE_VISIBILITY reference       back() _NOEXCEPT;"},
{"lineNum":" 1083","line":"    _LIBCPP_INLINE_VISIBILITY const_reference back() const _NOEXCEPT;"},
{"lineNum":" 1084","line":""},
{"lineNum":" 1085","line":"    template <class _Tp>"},
{"lineNum":" 1086","line":"    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS"},
{"lineNum":" 1087","line":"    _EnableIf"},
{"lineNum":" 1088","line":"        <"},
{"lineNum":" 1089","line":"            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,"},
{"lineNum":" 1090","line":"            basic_string&"},
{"lineNum":" 1091","line":"        >"},
{"lineNum":" 1092","line":"                 assign(const _Tp & __t) { __self_view __sv = __t; return assign(__sv.data(), __sv.size()); }"},
{"lineNum":" 1093","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1094","line":"    basic_string& assign(const basic_string& __str) { return *this = __str; }"},
{"lineNum":" 1095","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1096","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1097","line":"    basic_string& assign(basic_string&& __str)"},
{"lineNum":" 1098","line":"        _NOEXCEPT_((__noexcept_move_assign_container<_Allocator, __alloc_traits>::value))"},
{"lineNum":" 1099","line":"        {*this = _VSTD::move(__str); return *this;}"},
{"lineNum":" 1100","line":"#endif"},
{"lineNum":" 1101","line":"    basic_string& assign(const basic_string& __str, size_type __pos, size_type __n=npos);"},
{"lineNum":" 1102","line":"    template <class _Tp>"},
{"lineNum":" 1103","line":"    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS"},
{"lineNum":" 1104","line":"    _EnableIf"},
{"lineNum":" 1105","line":"        <"},
{"lineNum":" 1106","line":"            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value"},
{"lineNum":" 1107","line":"            && !__is_same_uncvref<_Tp, basic_string>::value,"},
{"lineNum":" 1108","line":"            basic_string&"},
{"lineNum":" 1109","line":"        >"},
{"lineNum":" 1110","line":"                  assign(const _Tp & __t, size_type __pos, size_type __n=npos);"},
{"lineNum":" 1111","line":"    basic_string& assign(const value_type* __s, size_type __n);"},
{"lineNum":" 1112","line":"    basic_string& assign(const value_type* __s);"},
{"lineNum":" 1113","line":"    basic_string& assign(size_type __n, value_type __c);"},
{"lineNum":" 1114","line":"    template<class _InputIterator>"},
{"lineNum":" 1115","line":"    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS"},
{"lineNum":" 1116","line":"    _EnableIf"},
{"lineNum":" 1117","line":"        <"},
{"lineNum":" 1118","line":"            __is_exactly_cpp17_input_iterator<_InputIterator>::value,"},
{"lineNum":" 1119","line":"            basic_string&"},
{"lineNum":" 1120","line":"        >"},
{"lineNum":" 1121","line":"        assign(_InputIterator __first, _InputIterator __last);"},
{"lineNum":" 1122","line":"    template<class _ForwardIterator>"},
{"lineNum":" 1123","line":"    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS"},
{"lineNum":" 1124","line":"    _EnableIf"},
{"lineNum":" 1125","line":"        <"},
{"lineNum":" 1126","line":"            __is_cpp17_forward_iterator<_ForwardIterator>::value,"},
{"lineNum":" 1127","line":"            basic_string&"},
{"lineNum":" 1128","line":"        >"},
{"lineNum":" 1129","line":"        assign(_ForwardIterator __first, _ForwardIterator __last);"},
{"lineNum":" 1130","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1131","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1132","line":"    basic_string& assign(initializer_list<value_type> __il) {return assign(__il.begin(), __il.size());}"},
{"lineNum":" 1133","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 1134","line":""},
{"lineNum":" 1135","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1136","line":"    basic_string& insert(size_type __pos1, const basic_string& __str);"},
{"lineNum":" 1137","line":""},
{"lineNum":" 1138","line":"    template <class _Tp>"},
{"lineNum":" 1139","line":"    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS"},
{"lineNum":" 1140","line":"    _EnableIf"},
{"lineNum":" 1141","line":"        <"},
{"lineNum":" 1142","line":"            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,"},
{"lineNum":" 1143","line":"            basic_string&"},
{"lineNum":" 1144","line":"        >"},
{"lineNum":" 1145","line":"                 insert(size_type __pos1, const _Tp& __t)"},
{"lineNum":" 1146","line":"    { __self_view __sv = __t; return insert(__pos1, __sv.data(), __sv.size()); }"},
{"lineNum":" 1147","line":""},
{"lineNum":" 1148","line":"    template <class _Tp>"},
{"lineNum":" 1149","line":"    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS"},
{"lineNum":" 1150","line":"    _EnableIf"},
{"lineNum":" 1151","line":"        <"},
{"lineNum":" 1152","line":"            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value && !__is_same_uncvref<_Tp, basic_string>::value,"},
{"lineNum":" 1153","line":"            basic_string&"},
{"lineNum":" 1154","line":"        >"},
{"lineNum":" 1155","line":"                  insert(size_type __pos1, const _Tp& __t, size_type __pos2, size_type __n=npos);"},
{"lineNum":" 1156","line":"    basic_string& insert(size_type __pos1, const basic_string& __str, size_type __pos2, size_type __n=npos);"},
{"lineNum":" 1157","line":"    basic_string& insert(size_type __pos, const value_type* __s, size_type __n);"},
{"lineNum":" 1158","line":"    basic_string& insert(size_type __pos, const value_type* __s);"},
{"lineNum":" 1159","line":"    basic_string& insert(size_type __pos, size_type __n, value_type __c);"},
{"lineNum":" 1160","line":"    iterator      insert(const_iterator __pos, value_type __c);"},
{"lineNum":" 1161","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1162","line":"    iterator      insert(const_iterator __pos, size_type __n, value_type __c);"},
{"lineNum":" 1163","line":"    template<class _InputIterator>"},
{"lineNum":" 1164","line":"    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS"},
{"lineNum":" 1165","line":"    _EnableIf"},
{"lineNum":" 1166","line":"        <"},
{"lineNum":" 1167","line":"            __is_exactly_cpp17_input_iterator<_InputIterator>::value,"},
{"lineNum":" 1168","line":"            iterator"},
{"lineNum":" 1169","line":"        >"},
{"lineNum":" 1170","line":"        insert(const_iterator __pos, _InputIterator __first, _InputIterator __last);"},
{"lineNum":" 1171","line":"    template<class _ForwardIterator>"},
{"lineNum":" 1172","line":"    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS"},
{"lineNum":" 1173","line":"    _EnableIf"},
{"lineNum":" 1174","line":"        <"},
{"lineNum":" 1175","line":"            __is_cpp17_forward_iterator<_ForwardIterator>::value,"},
{"lineNum":" 1176","line":"            iterator"},
{"lineNum":" 1177","line":"        >"},
{"lineNum":" 1178","line":"        insert(const_iterator __pos, _ForwardIterator __first, _ForwardIterator __last);"},
{"lineNum":" 1179","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1180","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1181","line":"    iterator insert(const_iterator __pos, initializer_list<value_type> __il)"},
{"lineNum":" 1182","line":"                    {return insert(__pos, __il.begin(), __il.end());}"},
{"lineNum":" 1183","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 1184","line":""},
{"lineNum":" 1185","line":"    basic_string& erase(size_type __pos = 0, size_type __n = npos);"},
{"lineNum":" 1186","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1187","line":"    iterator      erase(const_iterator __pos);"},
{"lineNum":" 1188","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1189","line":"    iterator      erase(const_iterator __first, const_iterator __last);"},
{"lineNum":" 1190","line":""},
{"lineNum":" 1191","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1192","line":"    basic_string& replace(size_type __pos1, size_type __n1, const basic_string& __str);"},
{"lineNum":" 1193","line":""},
{"lineNum":" 1194","line":"    template <class _Tp>"},
{"lineNum":" 1195","line":"    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS"},
{"lineNum":" 1196","line":"    _EnableIf"},
{"lineNum":" 1197","line":"        <"},
{"lineNum":" 1198","line":"            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,"},
{"lineNum":" 1199","line":"            basic_string&"},
{"lineNum":" 1200","line":"        >"},
{"lineNum":" 1201","line":"                  replace(size_type __pos1, size_type __n1, const _Tp& __t) { __self_view __sv = __t; return replace(__pos1, __n1, __sv.data(), __sv.size()); }"},
{"lineNum":" 1202","line":"    basic_string& replace(size_type __pos1, size_type __n1, const basic_string& __str, size_type __pos2, size_type __n2=npos);"},
{"lineNum":" 1203","line":"    template <class _Tp>"},
{"lineNum":" 1204","line":"    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS"},
{"lineNum":" 1205","line":"    _EnableIf"},
{"lineNum":" 1206","line":"        <"},
{"lineNum":" 1207","line":"            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value  && !__is_same_uncvref<_Tp, basic_string>::value,"},
{"lineNum":" 1208","line":"            basic_string&"},
{"lineNum":" 1209","line":"        >"},
{"lineNum":" 1210","line":"                  replace(size_type __pos1, size_type __n1, const _Tp& __t, size_type __pos2, size_type __n2=npos);"},
{"lineNum":" 1211","line":"    basic_string& replace(size_type __pos, size_type __n1, const value_type* __s, size_type __n2);"},
{"lineNum":" 1212","line":"    basic_string& replace(size_type __pos, size_type __n1, const value_type* __s);"},
{"lineNum":" 1213","line":"    basic_string& replace(size_type __pos, size_type __n1, size_type __n2, value_type __c);"},
{"lineNum":" 1214","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1215","line":"    basic_string& replace(const_iterator __i1, const_iterator __i2, const basic_string& __str);"},
{"lineNum":" 1216","line":""},
{"lineNum":" 1217","line":"    template <class _Tp>"},
{"lineNum":" 1218","line":"    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS"},
{"lineNum":" 1219","line":"    _EnableIf"},
{"lineNum":" 1220","line":"        <"},
{"lineNum":" 1221","line":"            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,"},
{"lineNum":" 1222","line":"            basic_string&"},
{"lineNum":" 1223","line":"        >"},
{"lineNum":" 1224","line":"                  replace(const_iterator __i1, const_iterator __i2, const _Tp& __t) { __self_view __sv = __t; return replace(__i1 - begin(), __i2 - __i1, __sv); }"},
{"lineNum":" 1225","line":""},
{"lineNum":" 1226","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1227","line":"    basic_string& replace(const_iterator __i1, const_iterator __i2, const value_type* __s, size_type __n);"},
{"lineNum":" 1228","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1229","line":"    basic_string& replace(const_iterator __i1, const_iterator __i2, const value_type* __s);"},
{"lineNum":" 1230","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1231","line":"    basic_string& replace(const_iterator __i1, const_iterator __i2, size_type __n, value_type __c);"},
{"lineNum":" 1232","line":"    template<class _InputIterator>"},
{"lineNum":" 1233","line":"    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS"},
{"lineNum":" 1234","line":"    _EnableIf"},
{"lineNum":" 1235","line":"        <"},
{"lineNum":" 1236","line":"            __is_cpp17_input_iterator<_InputIterator>::value,"},
{"lineNum":" 1237","line":"            basic_string&"},
{"lineNum":" 1238","line":"        >"},
{"lineNum":" 1239","line":"        replace(const_iterator __i1, const_iterator __i2, _InputIterator __j1, _InputIterator __j2);"},
{"lineNum":" 1240","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1241","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1242","line":"    basic_string& replace(const_iterator __i1, const_iterator __i2, initializer_list<value_type> __il)"},
{"lineNum":" 1243","line":"        {return replace(__i1, __i2, __il.begin(), __il.end());}"},
{"lineNum":" 1244","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 1245","line":""},
{"lineNum":" 1246","line":"    size_type copy(value_type* __s, size_type __n, size_type __pos = 0) const;"},
{"lineNum":" 1247","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1248","line":"    basic_string substr(size_type __pos = 0, size_type __n = npos) const;"},
{"lineNum":" 1249","line":""},
{"lineNum":" 1250","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1251","line":"    void swap(basic_string& __str)"},
{"lineNum":" 1252","line":"#if _LIBCPP_STD_VER >= 14"},
{"lineNum":" 1253","line":"        _NOEXCEPT;"},
{"lineNum":" 1254","line":"#else"},
{"lineNum":" 1255","line":"        _NOEXCEPT_(!__alloc_traits::propagate_on_container_swap::value ||"},
{"lineNum":" 1256","line":"                    __is_nothrow_swappable<allocator_type>::value);"},
{"lineNum":" 1257","line":"#endif"},
{"lineNum":" 1258","line":""},
{"lineNum":" 1259","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1260","line":"    const value_type* c_str() const _NOEXCEPT {return data();}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1261","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1262","line":"    const value_type* data() const _NOEXCEPT  {return _VSTD::__to_address(__get_pointer());}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1263","line":"#if _LIBCPP_STD_VER > 14 || defined(_LIBCPP_BUILDING_LIBRARY)"},
{"lineNum":" 1264","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1265","line":"    value_type* data()             _NOEXCEPT  {return _VSTD::__to_address(__get_pointer());}"},
{"lineNum":" 1266","line":"#endif"},
{"lineNum":" 1267","line":""},
{"lineNum":" 1268","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1269","line":"    allocator_type get_allocator() const _NOEXCEPT {return __alloc();}"},
{"lineNum":" 1270","line":""},
{"lineNum":" 1271","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1272","line":"    size_type find(const basic_string& __str, size_type __pos = 0) const _NOEXCEPT;"},
{"lineNum":" 1273","line":""},
{"lineNum":" 1274","line":"    template <class _Tp>"},
{"lineNum":" 1275","line":"    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS"},
{"lineNum":" 1276","line":"    _EnableIf"},
{"lineNum":" 1277","line":"        <"},
{"lineNum":" 1278","line":"            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,"},
{"lineNum":" 1279","line":"            size_type"},
{"lineNum":" 1280","line":"        >"},
{"lineNum":" 1281","line":"              find(const _Tp& __t, size_type __pos = 0) const _NOEXCEPT;"},
{"lineNum":" 1282","line":"    size_type find(const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT;"},
{"lineNum":" 1283","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1284","line":"    size_type find(const value_type* __s, size_type __pos = 0) const _NOEXCEPT;"},
{"lineNum":" 1285","line":"    size_type find(value_type __c, size_type __pos = 0) const _NOEXCEPT;"},
{"lineNum":" 1286","line":""},
{"lineNum":" 1287","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1288","line":"    size_type rfind(const basic_string& __str, size_type __pos = npos) const _NOEXCEPT;"},
{"lineNum":" 1289","line":""},
{"lineNum":" 1290","line":"    template <class _Tp>"},
{"lineNum":" 1291","line":"    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS"},
{"lineNum":" 1292","line":"    _EnableIf"},
{"lineNum":" 1293","line":"        <"},
{"lineNum":" 1294","line":"            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,"},
{"lineNum":" 1295","line":"            size_type"},
{"lineNum":" 1296","line":"        >"},
{"lineNum":" 1297","line":"              rfind(const _Tp& __t, size_type __pos = npos) const _NOEXCEPT;"},
{"lineNum":" 1298","line":"    size_type rfind(const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT;"},
{"lineNum":" 1299","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1300","line":"    size_type rfind(const value_type* __s, size_type __pos = npos) const _NOEXCEPT;"},
{"lineNum":" 1301","line":"    size_type rfind(value_type __c, size_type __pos = npos) const _NOEXCEPT;"},
{"lineNum":" 1302","line":""},
{"lineNum":" 1303","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1304","line":"    size_type find_first_of(const basic_string& __str, size_type __pos = 0) const _NOEXCEPT;"},
{"lineNum":" 1305","line":""},
{"lineNum":" 1306","line":"    template <class _Tp>"},
{"lineNum":" 1307","line":"    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS"},
{"lineNum":" 1308","line":"    _EnableIf"},
{"lineNum":" 1309","line":"        <"},
{"lineNum":" 1310","line":"            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,"},
{"lineNum":" 1311","line":"            size_type"},
{"lineNum":" 1312","line":"        >"},
{"lineNum":" 1313","line":"              find_first_of(const _Tp& __t, size_type __pos = 0) const _NOEXCEPT;"},
{"lineNum":" 1314","line":"    size_type find_first_of(const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT;"},
{"lineNum":" 1315","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1316","line":"    size_type find_first_of(const value_type* __s, size_type __pos = 0) const _NOEXCEPT;"},
{"lineNum":" 1317","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1318","line":"    size_type find_first_of(value_type __c, size_type __pos = 0) const _NOEXCEPT;"},
{"lineNum":" 1319","line":""},
{"lineNum":" 1320","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1321","line":"    size_type find_last_of(const basic_string& __str, size_type __pos = npos) const _NOEXCEPT;"},
{"lineNum":" 1322","line":""},
{"lineNum":" 1323","line":"    template <class _Tp>"},
{"lineNum":" 1324","line":"    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS"},
{"lineNum":" 1325","line":"    _EnableIf"},
{"lineNum":" 1326","line":"        <"},
{"lineNum":" 1327","line":"            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,"},
{"lineNum":" 1328","line":"            size_type"},
{"lineNum":" 1329","line":"        >"},
{"lineNum":" 1330","line":"              find_last_of(const _Tp& __t, size_type __pos = npos) const _NOEXCEPT;"},
{"lineNum":" 1331","line":"    size_type find_last_of(const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT;"},
{"lineNum":" 1332","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1333","line":"    size_type find_last_of(const value_type* __s, size_type __pos = npos) const _NOEXCEPT;"},
{"lineNum":" 1334","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1335","line":"    size_type find_last_of(value_type __c, size_type __pos = npos) const _NOEXCEPT;"},
{"lineNum":" 1336","line":""},
{"lineNum":" 1337","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1338","line":"    size_type find_first_not_of(const basic_string& __str, size_type __pos = 0) const _NOEXCEPT;"},
{"lineNum":" 1339","line":""},
{"lineNum":" 1340","line":"    template <class _Tp>"},
{"lineNum":" 1341","line":"    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS"},
{"lineNum":" 1342","line":"    _EnableIf"},
{"lineNum":" 1343","line":"        <"},
{"lineNum":" 1344","line":"            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,"},
{"lineNum":" 1345","line":"            size_type"},
{"lineNum":" 1346","line":"        >"},
{"lineNum":" 1347","line":"              find_first_not_of(const _Tp &__t, size_type __pos = 0) const _NOEXCEPT;"},
{"lineNum":" 1348","line":"    size_type find_first_not_of(const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT;"},
{"lineNum":" 1349","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1350","line":"    size_type find_first_not_of(const value_type* __s, size_type __pos = 0) const _NOEXCEPT;"},
{"lineNum":" 1351","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1352","line":"    size_type find_first_not_of(value_type __c, size_type __pos = 0) const _NOEXCEPT;"},
{"lineNum":" 1353","line":""},
{"lineNum":" 1354","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1355","line":"    size_type find_last_not_of(const basic_string& __str, size_type __pos = npos) const _NOEXCEPT;"},
{"lineNum":" 1356","line":""},
{"lineNum":" 1357","line":"    template <class _Tp>"},
{"lineNum":" 1358","line":"    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS"},
{"lineNum":" 1359","line":"    _EnableIf"},
{"lineNum":" 1360","line":"        <"},
{"lineNum":" 1361","line":"            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,"},
{"lineNum":" 1362","line":"            size_type"},
{"lineNum":" 1363","line":"        >"},
{"lineNum":" 1364","line":"              find_last_not_of(const _Tp& __t, size_type __pos = npos) const _NOEXCEPT;"},
{"lineNum":" 1365","line":"    size_type find_last_not_of(const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT;"},
{"lineNum":" 1366","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1367","line":"    size_type find_last_not_of(const value_type* __s, size_type __pos = npos) const _NOEXCEPT;"},
{"lineNum":" 1368","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1369","line":"    size_type find_last_not_of(value_type __c, size_type __pos = npos) const _NOEXCEPT;"},
{"lineNum":" 1370","line":""},
{"lineNum":" 1371","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1372","line":"    int compare(const basic_string& __str) const _NOEXCEPT;"},
{"lineNum":" 1373","line":""},
{"lineNum":" 1374","line":"    template <class _Tp>"},
{"lineNum":" 1375","line":"    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS"},
{"lineNum":" 1376","line":"    _EnableIf"},
{"lineNum":" 1377","line":"        <"},
{"lineNum":" 1378","line":"            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,"},
{"lineNum":" 1379","line":"            int"},
{"lineNum":" 1380","line":"        >"},
{"lineNum":" 1381","line":"        compare(const _Tp &__t) const _NOEXCEPT;"},
{"lineNum":" 1382","line":""},
{"lineNum":" 1383","line":"    template <class _Tp>"},
{"lineNum":" 1384","line":"    _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS"},
{"lineNum":" 1385","line":"    _EnableIf"},
{"lineNum":" 1386","line":"        <"},
{"lineNum":" 1387","line":"            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,"},
{"lineNum":" 1388","line":"            int"},
{"lineNum":" 1389","line":"        >"},
{"lineNum":" 1390","line":"         compare(size_type __pos1, size_type __n1, const _Tp& __t) const;"},
{"lineNum":" 1391","line":""},
{"lineNum":" 1392","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1393","line":"    int compare(size_type __pos1, size_type __n1, const basic_string& __str) const;"},
{"lineNum":" 1394","line":"    int compare(size_type __pos1, size_type __n1, const basic_string& __str, size_type __pos2, size_type __n2=npos) const;"},
{"lineNum":" 1395","line":""},
{"lineNum":" 1396","line":"    template <class _Tp>"},
{"lineNum":" 1397","line":"    inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1398","line":"        _EnableIf"},
{"lineNum":" 1399","line":"        <"},
{"lineNum":" 1400","line":"            __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value  && !__is_same_uncvref<_Tp, basic_string>::value,"},
{"lineNum":" 1401","line":"            int"},
{"lineNum":" 1402","line":"        >"},
{"lineNum":" 1403","line":"        compare(size_type __pos1, size_type __n1, const _Tp& __t, size_type __pos2, size_type __n2=npos) const;"},
{"lineNum":" 1404","line":"    int compare(const value_type* __s) const _NOEXCEPT;"},
{"lineNum":" 1405","line":"    int compare(size_type __pos1, size_type __n1, const value_type* __s) const;"},
{"lineNum":" 1406","line":"    int compare(size_type __pos1, size_type __n1, const value_type* __s, size_type __n2) const;"},
{"lineNum":" 1407","line":""},
{"lineNum":" 1408","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":" 1409","line":"    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1410","line":"    bool starts_with(__self_view __sv) const _NOEXCEPT"},
{"lineNum":" 1411","line":"    { return __self_view(data(), size()).starts_with(__sv); }"},
{"lineNum":" 1412","line":""},
{"lineNum":" 1413","line":"    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1414","line":"    bool starts_with(value_type __c) const _NOEXCEPT"},
{"lineNum":" 1415","line":"    { return !empty() && _Traits::eq(front(), __c); }"},
{"lineNum":" 1416","line":""},
{"lineNum":" 1417","line":"    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1418","line":"    bool starts_with(const value_type* __s) const _NOEXCEPT"},
{"lineNum":" 1419","line":"    { return starts_with(__self_view(__s)); }"},
{"lineNum":" 1420","line":""},
{"lineNum":" 1421","line":"    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1422","line":"    bool ends_with(__self_view __sv) const _NOEXCEPT"},
{"lineNum":" 1423","line":"    { return __self_view(data(), size()).ends_with( __sv); }"},
{"lineNum":" 1424","line":""},
{"lineNum":" 1425","line":"    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1426","line":"    bool ends_with(value_type __c) const _NOEXCEPT"},
{"lineNum":" 1427","line":"    { return !empty() && _Traits::eq(back(), __c); }"},
{"lineNum":" 1428","line":""},
{"lineNum":" 1429","line":"    _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1430","line":"    bool ends_with(const value_type* __s) const _NOEXCEPT"},
{"lineNum":" 1431","line":"    { return ends_with(__self_view(__s)); }"},
{"lineNum":" 1432","line":"#endif"},
{"lineNum":" 1433","line":""},
{"lineNum":" 1434","line":"#if _LIBCPP_STD_VER > 20"},
{"lineNum":" 1435","line":"    constexpr _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1436","line":"    bool contains(__self_view __sv) const noexcept"},
{"lineNum":" 1437","line":"    { return __self_view(data(), size()).contains(__sv); }"},
{"lineNum":" 1438","line":""},
{"lineNum":" 1439","line":"    constexpr _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1440","line":"    bool contains(value_type __c) const noexcept"},
{"lineNum":" 1441","line":"    { return __self_view(data(), size()).contains(__c); }"},
{"lineNum":" 1442","line":""},
{"lineNum":" 1443","line":"    constexpr _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1444","line":"    bool contains(const value_type* __s) const"},
{"lineNum":" 1445","line":"    { return __self_view(data(), size()).contains(__s); }"},
{"lineNum":" 1446","line":"#endif"},
{"lineNum":" 1447","line":""},
{"lineNum":" 1448","line":"    _LIBCPP_INLINE_VISIBILITY bool __invariants() const;"},
{"lineNum":" 1449","line":""},
{"lineNum":" 1450","line":"    _LIBCPP_INLINE_VISIBILITY void __clear_and_shrink() _NOEXCEPT;"},
{"lineNum":" 1451","line":""},
{"lineNum":" 1452","line":"    _LIBCPP_INLINE_VISIBILITY void __shrink_or_extend(size_type __target_capacity);"},
{"lineNum":" 1453","line":""},
{"lineNum":" 1454","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1455","line":"    bool __is_long() const _NOEXCEPT"},
{"lineNum":" 1456","line":"        {return bool(__r_.first().__s.__size_ & __short_mask);}","class":"linePartCov","hits":"35","order":"411","possible_hits":"11065",},
{"lineNum":" 1457","line":""},
{"lineNum":" 1458","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1459","line":""},
{"lineNum":" 1460","line":"    bool __dereferenceable(const const_iterator* __i) const;"},
{"lineNum":" 1461","line":"    bool __decrementable(const const_iterator* __i) const;"},
{"lineNum":" 1462","line":"    bool __addable(const const_iterator* __i, ptrdiff_t __n) const;"},
{"lineNum":" 1463","line":"    bool __subscriptable(const const_iterator* __i, ptrdiff_t __n) const;"},
{"lineNum":" 1464","line":""},
{"lineNum":" 1465","line":"#endif // _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1466","line":""},
{"lineNum":" 1467","line":"private:"},
{"lineNum":" 1468","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1469","line":"    allocator_type& __alloc() _NOEXCEPT"},
{"lineNum":" 1470","line":"        {return __r_.second();}"},
{"lineNum":" 1471","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1472","line":"    const allocator_type& __alloc() const _NOEXCEPT"},
{"lineNum":" 1473","line":"        {return __r_.second();}"},
{"lineNum":" 1474","line":""},
{"lineNum":" 1475","line":"#ifdef _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT"},
{"lineNum":" 1476","line":""},
{"lineNum":" 1477","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1478","line":"    void __set_short_size(size_type __s) _NOEXCEPT"},
{"lineNum":" 1479","line":"#   ifdef _LIBCPP_BIG_ENDIAN"},
{"lineNum":" 1480","line":"        {__r_.first().__s.__size_ = (unsigned char)(__s << 1);}"},
{"lineNum":" 1481","line":"#   else"},
{"lineNum":" 1482","line":"        {__r_.first().__s.__size_ = (unsigned char)(__s);}"},
{"lineNum":" 1483","line":"#   endif"},
{"lineNum":" 1484","line":""},
{"lineNum":" 1485","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1486","line":"    size_type __get_short_size() const _NOEXCEPT"},
{"lineNum":" 1487","line":"#   ifdef _LIBCPP_BIG_ENDIAN"},
{"lineNum":" 1488","line":"        {return __r_.first().__s.__size_ >> 1;}"},
{"lineNum":" 1489","line":"#   else"},
{"lineNum":" 1490","line":"        {return __r_.first().__s.__size_;}"},
{"lineNum":" 1491","line":"#   endif"},
{"lineNum":" 1492","line":""},
{"lineNum":" 1493","line":"#else  // _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT"},
{"lineNum":" 1494","line":""},
{"lineNum":" 1495","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1496","line":"    void __set_short_size(size_type __s) _NOEXCEPT"},
{"lineNum":" 1497","line":"#   ifdef _LIBCPP_BIG_ENDIAN"},
{"lineNum":" 1498","line":"        {__r_.first().__s.__size_ = (unsigned char)(__s);}"},
{"lineNum":" 1499","line":"#   else"},
{"lineNum":" 1500","line":"        {__r_.first().__s.__size_ = (unsigned char)(__s << 1);}","class":"linePartCov","hits":"1","order":"708","possible_hits":"1277",},
{"lineNum":" 1501","line":"#   endif"},
{"lineNum":" 1502","line":""},
{"lineNum":" 1503","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1504","line":"    size_type __get_short_size() const _NOEXCEPT"},
{"lineNum":" 1505","line":"#   ifdef _LIBCPP_BIG_ENDIAN"},
{"lineNum":" 1506","line":"        {return __r_.first().__s.__size_;}"},
{"lineNum":" 1507","line":"#   else"},
{"lineNum":" 1508","line":"        {return __r_.first().__s.__size_ >> 1;}","class":"linePartCov","hits":"4","order":"438","possible_hits":"129",},
{"lineNum":" 1509","line":"#   endif"},
{"lineNum":" 1510","line":""},
{"lineNum":" 1511","line":"#endif // _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT"},
{"lineNum":" 1512","line":""},
{"lineNum":" 1513","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1514","line":"    void __set_long_size(size_type __s) _NOEXCEPT"},
{"lineNum":" 1515","line":"        {__r_.first().__l.__size_ = __s;}","class":"lineNoCov","hits":"0","possible_hits":"372",},
{"lineNum":" 1516","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1517","line":"    size_type __get_long_size() const _NOEXCEPT"},
{"lineNum":" 1518","line":"        {return __r_.first().__l.__size_;}","class":"linePartCov","hits":"4","order":"679","possible_hits":"129",},
{"lineNum":" 1519","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1520","line":"    void __set_size(size_type __s) _NOEXCEPT"},
{"lineNum":" 1521","line":"        {if (__is_long()) __set_long_size(__s); else __set_short_size(__s);}"},
{"lineNum":" 1522","line":""},
{"lineNum":" 1523","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1524","line":"    void __set_long_cap(size_type __s) _NOEXCEPT"},
{"lineNum":" 1525","line":"        {__r_.first().__l.__cap_  = __long_mask | __s;}","class":"linePartCov","hits":"1","order":"702","possible_hits":"631",},
{"lineNum":" 1526","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1527","line":"    size_type __get_long_cap() const _NOEXCEPT"},
{"lineNum":" 1528","line":"        {return __r_.first().__l.__cap_ & size_type(~__long_mask);}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1529","line":""},
{"lineNum":" 1530","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1531","line":"    void __set_long_pointer(pointer __p) _NOEXCEPT"},
{"lineNum":" 1532","line":"        {__r_.first().__l.__data_ = __p;}","class":"linePartCov","hits":"1","order":"701","possible_hits":"631",},
{"lineNum":" 1533","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1534","line":"    pointer __get_long_pointer() _NOEXCEPT"},
{"lineNum":" 1535","line":"        {return __r_.first().__l.__data_;}","class":"linePartCov","hits":"3","order":"682","possible_hits":"6233",},
{"lineNum":" 1536","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1537","line":"    const_pointer __get_long_pointer() const _NOEXCEPT"},
{"lineNum":" 1538","line":"        {return __r_.first().__l.__data_;}","class":"linePartCov","hits":"2","order":"678","possible_hits":"121",},
{"lineNum":" 1539","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1540","line":"    pointer __get_short_pointer() _NOEXCEPT"},
{"lineNum":" 1541","line":"        {return pointer_traits<pointer>::pointer_to(__r_.first().__s.__data_[0]);}","class":"lineNoCov","hits":"0","possible_hits":"406",},
{"lineNum":" 1542","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1543","line":"    const_pointer __get_short_pointer() const _NOEXCEPT"},
{"lineNum":" 1544","line":"        {return pointer_traits<const_pointer>::pointer_to(__r_.first().__s.__data_[0]);}","class":"linePartCov","hits":"2","order":"436","possible_hits":"117",},
{"lineNum":" 1545","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1546","line":"    pointer __get_pointer() _NOEXCEPT"},
{"lineNum":" 1547","line":"        {return __is_long() ? __get_long_pointer() : __get_short_pointer();}","class":"lineNoCov","hits":"0","possible_hits":"323",},
{"lineNum":" 1548","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1549","line":"    const_pointer __get_pointer() const _NOEXCEPT"},
{"lineNum":" 1550","line":"        {return __is_long() ? __get_long_pointer() : __get_short_pointer();}","class":"linePartCov","hits":"4","order":"435","possible_hits":"1587",},
{"lineNum":" 1551","line":""},
{"lineNum":" 1552","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1553","line":"    void __zero() _NOEXCEPT"},
{"lineNum":" 1554","line":"        {"},
{"lineNum":" 1555","line":"            size_type (&__a)[__n_words] = __r_.first().__r.__words;"},
{"lineNum":" 1556","line":"            for (unsigned __i = 0; __i < __n_words; ++__i)","class":"linePartCov","hits":"54","order":"391","possible_hits":"204",},
{"lineNum":" 1557","line":"                __a[__i] = 0;","class":"linePartCov","hits":"54","order":"390","possible_hits":"1175",},
{"lineNum":" 1558","line":"        }"},
{"lineNum":" 1559","line":""},
{"lineNum":" 1560","line":"    template <size_type __a> static"},
{"lineNum":" 1561","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1562","line":"        size_type __align_it(size_type __s) _NOEXCEPT"},
{"lineNum":" 1563","line":"            {return (__s + (__a-1)) & ~(__a-1);}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1564","line":"    enum {__alignment = 16};"},
{"lineNum":" 1565","line":"    static _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1566","line":"    size_type __recommend(size_type __s) _NOEXCEPT"},
{"lineNum":" 1567","line":"        {"},
{"lineNum":" 1568","line":"        if (__s < __min_cap) return static_cast<size_type>(__min_cap) - 1;","class":"lineNoCov","hits":"0","possible_hits":"363",},
{"lineNum":" 1569","line":"        size_type __guess = __align_it<sizeof(value_type) < __alignment ?"},
{"lineNum":" 1570","line":"                     __alignment/sizeof(value_type) : 1 > (__s+1) - 1;"},
{"lineNum":" 1571","line":"        if (__guess == __min_cap) ++__guess;"},
{"lineNum":" 1572","line":"        return __guess;"},
{"lineNum":" 1573","line":"        }"},
{"lineNum":" 1574","line":""},
{"lineNum":" 1575","line":"    inline"},
{"lineNum":" 1576","line":"    void __init(const value_type* __s, size_type __sz, size_type __reserve);"},
{"lineNum":" 1577","line":"    inline"},
{"lineNum":" 1578","line":"    void __init(const value_type* __s, size_type __sz);"},
{"lineNum":" 1579","line":"    inline"},
{"lineNum":" 1580","line":"    void __init(size_type __n, value_type __c);"},
{"lineNum":" 1581","line":""},
{"lineNum":" 1582","line":"    // Slow path for the (inlined) copy constructor for \'long\' strings."},
{"lineNum":" 1583","line":"    // Always externally instantiated and not inlined."},
{"lineNum":" 1584","line":"    // Requires that __s is zero terminated."},
{"lineNum":" 1585","line":"    // The main reason for this function to exist is because for unstable, we"},
{"lineNum":" 1586","line":"    // want to allow inlining of the copy constructor. However, we don\'t want"},
{"lineNum":" 1587","line":"    // to call the __init() functions as those are marked as inline which may"},
{"lineNum":" 1588","line":"    // result in over-aggressive inlining by the compiler, where our aim is"},
{"lineNum":" 1589","line":"    // to only inline the fast path code directly in the ctor."},
{"lineNum":" 1590","line":"    void __init_copy_ctor_external(const value_type* __s, size_type __sz);"},
{"lineNum":" 1591","line":""},
{"lineNum":" 1592","line":"    template <class _InputIterator>"},
{"lineNum":" 1593","line":"    inline"},
{"lineNum":" 1594","line":"    _EnableIf"},
{"lineNum":" 1595","line":"    <"},
{"lineNum":" 1596","line":"        __is_exactly_cpp17_input_iterator<_InputIterator>::value"},
{"lineNum":" 1597","line":"    >"},
{"lineNum":" 1598","line":"    __init(_InputIterator __first, _InputIterator __last);"},
{"lineNum":" 1599","line":""},
{"lineNum":" 1600","line":"    template <class _ForwardIterator>"},
{"lineNum":" 1601","line":"    inline"},
{"lineNum":" 1602","line":"    _EnableIf"},
{"lineNum":" 1603","line":"    <"},
{"lineNum":" 1604","line":"        __is_cpp17_forward_iterator<_ForwardIterator>::value"},
{"lineNum":" 1605","line":"    >"},
{"lineNum":" 1606","line":"    __init(_ForwardIterator __first, _ForwardIterator __last);"},
{"lineNum":" 1607","line":""},
{"lineNum":" 1608","line":"    void __grow_by(size_type __old_cap, size_type __delta_cap, size_type __old_sz,"},
{"lineNum":" 1609","line":"                   size_type __n_copy,  size_type __n_del,     size_type __n_add = 0);"},
{"lineNum":" 1610","line":"    void __grow_by_and_replace(size_type __old_cap, size_type __delta_cap, size_type __old_sz,"},
{"lineNum":" 1611","line":"                               size_type __n_copy,  size_type __n_del,"},
{"lineNum":" 1612","line":"                               size_type __n_add, const value_type* __p_new_stuff);"},
{"lineNum":" 1613","line":""},
{"lineNum":" 1614","line":"    // __assign_no_alias is invoked for assignment operations where we"},
{"lineNum":" 1615","line":"    // have proof that the input does not alias the current instance."},
{"lineNum":" 1616","line":"    // For example, operator=(basic_string) performs a \'self\' check."},
{"lineNum":" 1617","line":"    template <bool __is_short>"},
{"lineNum":" 1618","line":"    basic_string& __assign_no_alias(const value_type* __s, size_type __n);"},
{"lineNum":" 1619","line":""},
{"lineNum":" 1620","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1621","line":"    void __erase_to_end(size_type __pos);"},
{"lineNum":" 1622","line":""},
{"lineNum":" 1623","line":"    // __erase_external_with_move is invoked for erase() invocations where"},
{"lineNum":" 1624","line":"    // `n ~= npos`, likely requiring memory moves on the string data."},
{"lineNum":" 1625","line":"    void __erase_external_with_move(size_type __pos, size_type __n);"},
{"lineNum":" 1626","line":""},
{"lineNum":" 1627","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1628","line":"    void __copy_assign_alloc(const basic_string& __str)"},
{"lineNum":" 1629","line":"        {__copy_assign_alloc(__str, integral_constant<bool,"},
{"lineNum":" 1630","line":"                      __alloc_traits::propagate_on_container_copy_assignment::value>());}"},
{"lineNum":" 1631","line":""},
{"lineNum":" 1632","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1633","line":"    void __copy_assign_alloc(const basic_string& __str, true_type)"},
{"lineNum":" 1634","line":"        {"},
{"lineNum":" 1635","line":"            if (__alloc() == __str.__alloc())"},
{"lineNum":" 1636","line":"                __alloc() = __str.__alloc();"},
{"lineNum":" 1637","line":"            else"},
{"lineNum":" 1638","line":"            {"},
{"lineNum":" 1639","line":"                if (!__str.__is_long())"},
{"lineNum":" 1640","line":"                {"},
{"lineNum":" 1641","line":"                    __clear_and_shrink();"},
{"lineNum":" 1642","line":"                    __alloc() = __str.__alloc();"},
{"lineNum":" 1643","line":"                }"},
{"lineNum":" 1644","line":"                else"},
{"lineNum":" 1645","line":"                {"},
{"lineNum":" 1646","line":"                    allocator_type __a = __str.__alloc();"},
{"lineNum":" 1647","line":"                    pointer __p = __alloc_traits::allocate(__a, __str.__get_long_cap());"},
{"lineNum":" 1648","line":"                    __clear_and_shrink();"},
{"lineNum":" 1649","line":"                    __alloc() = _VSTD::move(__a);"},
{"lineNum":" 1650","line":"                    __set_long_pointer(__p);"},
{"lineNum":" 1651","line":"                    __set_long_cap(__str.__get_long_cap());"},
{"lineNum":" 1652","line":"                    __set_long_size(__str.size());"},
{"lineNum":" 1653","line":"                }"},
{"lineNum":" 1654","line":"            }"},
{"lineNum":" 1655","line":"        }"},
{"lineNum":" 1656","line":""},
{"lineNum":" 1657","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1658","line":"    void __copy_assign_alloc(const basic_string&, false_type) _NOEXCEPT"},
{"lineNum":" 1659","line":"        {}"},
{"lineNum":" 1660","line":""},
{"lineNum":" 1661","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1662","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1663","line":"    void __move_assign(basic_string& __str, false_type)"},
{"lineNum":" 1664","line":"        _NOEXCEPT_(__alloc_traits::is_always_equal::value);"},
{"lineNum":" 1665","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1666","line":"    void __move_assign(basic_string& __str, true_type)"},
{"lineNum":" 1667","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 1668","line":"        _NOEXCEPT;"},
{"lineNum":" 1669","line":"#else"},
{"lineNum":" 1670","line":"        _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value);"},
{"lineNum":" 1671","line":"#endif"},
{"lineNum":" 1672","line":"#endif"},
{"lineNum":" 1673","line":""},
{"lineNum":" 1674","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1675","line":"    void"},
{"lineNum":" 1676","line":"    __move_assign_alloc(basic_string& __str)"},
{"lineNum":" 1677","line":"        _NOEXCEPT_("},
{"lineNum":" 1678","line":"            !__alloc_traits::propagate_on_container_move_assignment::value ||"},
{"lineNum":" 1679","line":"            is_nothrow_move_assignable<allocator_type>::value)"},
{"lineNum":" 1680","line":"    {__move_assign_alloc(__str, integral_constant<bool,"},
{"lineNum":" 1681","line":"                      __alloc_traits::propagate_on_container_move_assignment::value>());}"},
{"lineNum":" 1682","line":""},
{"lineNum":" 1683","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1684","line":"    void __move_assign_alloc(basic_string& __c, true_type)"},
{"lineNum":" 1685","line":"        _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value)"},
{"lineNum":" 1686","line":"        {"},
{"lineNum":" 1687","line":"            __alloc() = _VSTD::move(__c.__alloc());"},
{"lineNum":" 1688","line":"        }"},
{"lineNum":" 1689","line":""},
{"lineNum":" 1690","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1691","line":"    void __move_assign_alloc(basic_string&, false_type)"},
{"lineNum":" 1692","line":"        _NOEXCEPT"},
{"lineNum":" 1693","line":"        {}"},
{"lineNum":" 1694","line":""},
{"lineNum":" 1695","line":"    basic_string& __assign_external(const value_type* __s);"},
{"lineNum":" 1696","line":"    basic_string& __assign_external(const value_type* __s, size_type __n);"},
{"lineNum":" 1697","line":""},
{"lineNum":" 1698","line":"    // Assigns the value in __s, guaranteed to be __n < __min_cap in length."},
{"lineNum":" 1699","line":"    inline basic_string& __assign_short(const value_type* __s, size_type __n) {"},
{"lineNum":" 1700","line":"      pointer __p = __is_long()"},
{"lineNum":" 1701","line":"                        ? (__set_long_size(__n), __get_long_pointer())"},
{"lineNum":" 1702","line":"                        : (__set_short_size(__n), __get_short_pointer());"},
{"lineNum":" 1703","line":"      traits_type::move(_VSTD::__to_address(__p), __s, __n);"},
{"lineNum":" 1704","line":"      traits_type::assign(__p[__n], value_type());"},
{"lineNum":" 1705","line":"      return *this;"},
{"lineNum":" 1706","line":"    }"},
{"lineNum":" 1707","line":""},
{"lineNum":" 1708","line":"    _LIBCPP_INLINE_VISIBILITY void __invalidate_all_iterators();"},
{"lineNum":" 1709","line":"    _LIBCPP_INLINE_VISIBILITY void __invalidate_iterators_past(size_type);"},
{"lineNum":" 1710","line":""},
{"lineNum":" 1711","line":"    template<class _Tp>"},
{"lineNum":" 1712","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1713","line":"    bool __addr_in_range(_Tp&& __t) const {"},
{"lineNum":" 1714","line":"        const volatile void *__p = _VSTD::addressof(__t);"},
{"lineNum":" 1715","line":"        return data() <= __p && __p <= data() + size();"},
{"lineNum":" 1716","line":"    }"},
{"lineNum":" 1717","line":""},
{"lineNum":" 1718","line":"    _LIBCPP_NORETURN _LIBCPP_HIDE_FROM_ABI"},
{"lineNum":" 1719","line":"    void __throw_length_error() const {","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":" 1720","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1721","line":"        __basic_string_common<true>::__throw_length_error();","class":"lineNoCov","hits":"0","possible_hits":"22",},
{"lineNum":" 1722","line":"#else"},
{"lineNum":" 1723","line":"        _VSTD::abort();"},
{"lineNum":" 1724","line":"#endif"},
{"lineNum":" 1725","line":"    }"},
{"lineNum":" 1726","line":""},
{"lineNum":" 1727","line":"    _LIBCPP_NORETURN _LIBCPP_HIDE_FROM_ABI"},
{"lineNum":" 1728","line":"    void __throw_out_of_range() const {"},
{"lineNum":" 1729","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1730","line":"        __basic_string_common<true>::__throw_out_of_range();"},
{"lineNum":" 1731","line":"#else"},
{"lineNum":" 1732","line":"        _VSTD::abort();"},
{"lineNum":" 1733","line":"#endif"},
{"lineNum":" 1734","line":"    }"},
{"lineNum":" 1735","line":""},
{"lineNum":" 1736","line":"    friend basic_string operator+<>(const basic_string&, const basic_string&);"},
{"lineNum":" 1737","line":"    friend basic_string operator+<>(const value_type*, const basic_string&);"},
{"lineNum":" 1738","line":"    friend basic_string operator+<>(value_type, const basic_string&);"},
{"lineNum":" 1739","line":"    friend basic_string operator+<>(const basic_string&, const value_type*);"},
{"lineNum":" 1740","line":"    friend basic_string operator+<>(const basic_string&, value_type);"},
{"lineNum":" 1741","line":"};"},
{"lineNum":" 1742","line":""},
{"lineNum":" 1743","line":"// These declarations must appear before any functions are implicitly used"},
{"lineNum":" 1744","line":"// so that they have the correct visibility specifier."},
{"lineNum":" 1745","line":"#ifdef _LIBCPP_ABI_STRING_OPTIMIZED_EXTERNAL_INSTANTIATION"},
{"lineNum":" 1746","line":"_LIBCPP_STRING_UNSTABLE_EXTERN_TEMPLATE_LIST(_LIBCPP_EXTERN_TEMPLATE, char)"},
{"lineNum":" 1747","line":"_LIBCPP_STRING_UNSTABLE_EXTERN_TEMPLATE_LIST(_LIBCPP_EXTERN_TEMPLATE, wchar_t)"},
{"lineNum":" 1748","line":"#else"},
{"lineNum":" 1749","line":"_LIBCPP_STRING_V1_EXTERN_TEMPLATE_LIST(_LIBCPP_EXTERN_TEMPLATE, char)"},
{"lineNum":" 1750","line":"_LIBCPP_STRING_V1_EXTERN_TEMPLATE_LIST(_LIBCPP_EXTERN_TEMPLATE, wchar_t)"},
{"lineNum":" 1751","line":"#endif"},
{"lineNum":" 1752","line":""},
{"lineNum":" 1753","line":""},
{"lineNum":" 1754","line":"#ifndef _LIBCPP_HAS_NO_DEDUCTION_GUIDES"},
{"lineNum":" 1755","line":"template<class _InputIterator,"},
{"lineNum":" 1756","line":"         class _CharT = __iter_value_type<_InputIterator>,"},
{"lineNum":" 1757","line":"         class _Allocator = allocator<_CharT>,"},
{"lineNum":" 1758","line":"         class = _EnableIf<__is_cpp17_input_iterator<_InputIterator>::value>,"},
{"lineNum":" 1759","line":"         class = _EnableIf<__is_allocator<_Allocator>::value>"},
{"lineNum":" 1760","line":"         >"},
{"lineNum":" 1761","line":"basic_string(_InputIterator, _InputIterator, _Allocator = _Allocator())"},
{"lineNum":" 1762","line":"  -> basic_string<_CharT, char_traits<_CharT>, _Allocator>;"},
{"lineNum":" 1763","line":""},
{"lineNum":" 1764","line":"template<class _CharT,"},
{"lineNum":" 1765","line":"         class _Traits,"},
{"lineNum":" 1766","line":"         class _Allocator = allocator<_CharT>,"},
{"lineNum":" 1767","line":"         class = _EnableIf<__is_allocator<_Allocator>::value>"},
{"lineNum":" 1768","line":"         >"},
{"lineNum":" 1769","line":"explicit basic_string(basic_string_view<_CharT, _Traits>, const _Allocator& = _Allocator())"},
{"lineNum":" 1770","line":"  -> basic_string<_CharT, _Traits, _Allocator>;"},
{"lineNum":" 1771","line":""},
{"lineNum":" 1772","line":"template<class _CharT,"},
{"lineNum":" 1773","line":"         class _Traits,"},
{"lineNum":" 1774","line":"         class _Allocator = allocator<_CharT>,"},
{"lineNum":" 1775","line":"         class = _EnableIf<__is_allocator<_Allocator>::value>,"},
{"lineNum":" 1776","line":"         class _Sz = typename allocator_traits<_Allocator>::size_type"},
{"lineNum":" 1777","line":"         >"},
{"lineNum":" 1778","line":"basic_string(basic_string_view<_CharT, _Traits>, _Sz, _Sz, const _Allocator& = _Allocator())"},
{"lineNum":" 1779","line":"  -> basic_string<_CharT, _Traits, _Allocator>;"},
{"lineNum":" 1780","line":"#endif"},
{"lineNum":" 1781","line":""},
{"lineNum":" 1782","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 1783","line":"inline"},
{"lineNum":" 1784","line":"void"},
{"lineNum":" 1785","line":"basic_string<_CharT, _Traits, _Allocator>::__invalidate_all_iterators()"},
{"lineNum":" 1786","line":"{"},
{"lineNum":" 1787","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1788","line":"    __get_db()->__invalidate_all(this);"},
{"lineNum":" 1789","line":"#endif"},
{"lineNum":" 1790","line":"}"},
{"lineNum":" 1791","line":""},
{"lineNum":" 1792","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 1793","line":"inline"},
{"lineNum":" 1794","line":"void"},
{"lineNum":" 1795","line":"basic_string<_CharT, _Traits, _Allocator>::__invalidate_iterators_past(size_type __pos)"},
{"lineNum":" 1796","line":"{"},
{"lineNum":" 1797","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1798","line":"    __c_node* __c = __get_db()->__find_c_and_lock(this);"},
{"lineNum":" 1799","line":"    if (__c)"},
{"lineNum":" 1800","line":"    {"},
{"lineNum":" 1801","line":"        const_pointer __new_last = __get_pointer() + __pos;"},
{"lineNum":" 1802","line":"        for (__i_node** __p = __c->end_; __p != __c->beg_; )"},
{"lineNum":" 1803","line":"        {"},
{"lineNum":" 1804","line":"            --__p;"},
{"lineNum":" 1805","line":"            const_iterator* __i = static_cast<const_iterator*>((*__p)->__i_);"},
{"lineNum":" 1806","line":"            if (__i->base() > __new_last)"},
{"lineNum":" 1807","line":"            {"},
{"lineNum":" 1808","line":"                (*__p)->__c_ = nullptr;"},
{"lineNum":" 1809","line":"                if (--__c->end_ != __p)"},
{"lineNum":" 1810","line":"                    _VSTD::memmove(__p, __p+1, (__c->end_ - __p)*sizeof(__i_node*));"},
{"lineNum":" 1811","line":"            }"},
{"lineNum":" 1812","line":"        }"},
{"lineNum":" 1813","line":"        __get_db()->unlock();"},
{"lineNum":" 1814","line":"    }"},
{"lineNum":" 1815","line":"#else"},
{"lineNum":" 1816","line":"    (void)__pos;"},
{"lineNum":" 1817","line":"#endif // _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1818","line":"}"},
{"lineNum":" 1819","line":""},
{"lineNum":" 1820","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 1821","line":"inline"},
{"lineNum":" 1822","line":"basic_string<_CharT, _Traits, _Allocator>::basic_string()"},
{"lineNum":" 1823","line":"    _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value)"},
{"lineNum":" 1824","line":"     : __r_(__default_init_tag(), __default_init_tag())"},
{"lineNum":" 1825","line":"{"},
{"lineNum":" 1826","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1827","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1828","line":"#endif"},
{"lineNum":" 1829","line":"    __zero();"},
{"lineNum":" 1830","line":"}"},
{"lineNum":" 1831","line":""},
{"lineNum":" 1832","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 1833","line":"inline"},
{"lineNum":" 1834","line":"basic_string<_CharT, _Traits, _Allocator>::basic_string(const allocator_type& __a)"},
{"lineNum":" 1835","line":"#if _LIBCPP_STD_VER <= 14"},
{"lineNum":" 1836","line":"        _NOEXCEPT_(is_nothrow_copy_constructible<allocator_type>::value)"},
{"lineNum":" 1837","line":"#else"},
{"lineNum":" 1838","line":"        _NOEXCEPT"},
{"lineNum":" 1839","line":"#endif"},
{"lineNum":" 1840","line":": __r_(__default_init_tag(), __a)"},
{"lineNum":" 1841","line":"{"},
{"lineNum":" 1842","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1843","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1844","line":"#endif"},
{"lineNum":" 1845","line":"    __zero();"},
{"lineNum":" 1846","line":"}"},
{"lineNum":" 1847","line":""},
{"lineNum":" 1848","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 1849","line":"void basic_string<_CharT, _Traits, _Allocator>::__init(const value_type* __s,"},
{"lineNum":" 1850","line":"                                                       size_type __sz,"},
{"lineNum":" 1851","line":"                                                       size_type __reserve)"},
{"lineNum":" 1852","line":"{"},
{"lineNum":" 1853","line":"    if (__reserve > max_size())","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":" 1854","line":"        this->__throw_length_error();","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1855","line":"    pointer __p;"},
{"lineNum":" 1856","line":"    if (__reserve < __min_cap)","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":" 1857","line":"    {"},
{"lineNum":" 1858","line":"        __set_short_size(__sz);"},
{"lineNum":" 1859","line":"        __p = __get_short_pointer();"},
{"lineNum":" 1860","line":"    }"},
{"lineNum":" 1861","line":"    else"},
{"lineNum":" 1862","line":"    {"},
{"lineNum":" 1863","line":"        size_type __cap = __recommend(__reserve);"},
{"lineNum":" 1864","line":"        __p = __alloc_traits::allocate(__alloc(), __cap+1);"},
{"lineNum":" 1865","line":"        __set_long_pointer(__p);"},
{"lineNum":" 1866","line":"        __set_long_cap(__cap+1);"},
{"lineNum":" 1867","line":"        __set_long_size(__sz);"},
{"lineNum":" 1868","line":"    }"},
{"lineNum":" 1869","line":"    traits_type::copy(_VSTD::__to_address(__p), __s, __sz);"},
{"lineNum":" 1870","line":"    traits_type::assign(__p[__sz], value_type());"},
{"lineNum":" 1871","line":"}"},
{"lineNum":" 1872","line":""},
{"lineNum":" 1873","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 1874","line":"void"},
{"lineNum":" 1875","line":"basic_string<_CharT, _Traits, _Allocator>::__init(const value_type* __s, size_type __sz)"},
{"lineNum":" 1876","line":"{"},
{"lineNum":" 1877","line":"    if (__sz > max_size())","class":"lineNoCov","hits":"0","possible_hits":"311",},
{"lineNum":" 1878","line":"        this->__throw_length_error();","class":"lineNoCov","hits":"0","possible_hits":"282",},
{"lineNum":" 1879","line":"    pointer __p;"},
{"lineNum":" 1880","line":"    if (__sz < __min_cap)","class":"lineNoCov","hits":"0","possible_hits":"311",},
{"lineNum":" 1881","line":"    {"},
{"lineNum":" 1882","line":"        __set_short_size(__sz);","class":"linePartCov","hits":"1","order":"707","possible_hits":"4",},
{"lineNum":" 1883","line":"        __p = __get_short_pointer();"},
{"lineNum":" 1884","line":"    }"},
{"lineNum":" 1885","line":"    else"},
{"lineNum":" 1886","line":"    {"},
{"lineNum":" 1887","line":"        size_type __cap = __recommend(__sz);","class":"lineCov","hits":"1","order":"700","possible_hits":"1",},
{"lineNum":" 1888","line":"        __p = __alloc_traits::allocate(__alloc(), __cap+1);"},
{"lineNum":" 1889","line":"        __set_long_pointer(__p);"},
{"lineNum":" 1890","line":"        __set_long_cap(__cap+1);"},
{"lineNum":" 1891","line":"        __set_long_size(__sz);"},
{"lineNum":" 1892","line":"    }"},
{"lineNum":" 1893","line":"    traits_type::copy(_VSTD::__to_address(__p), __s, __sz);"},
{"lineNum":" 1894","line":"    traits_type::assign(__p[__sz], value_type());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1895","line":"}"},
{"lineNum":" 1896","line":""},
{"lineNum":" 1897","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 1898","line":"template <class>"},
{"lineNum":" 1899","line":"basic_string<_CharT, _Traits, _Allocator>::basic_string(const _CharT* __s, const _Allocator& __a)"},
{"lineNum":" 1900","line":"    : __r_(__default_init_tag(), __a)"},
{"lineNum":" 1901","line":"{"},
{"lineNum":" 1902","line":"    _LIBCPP_ASSERT(__s != nullptr, \"basic_string(const char*, allocator) detected nullptr\");"},
{"lineNum":" 1903","line":"    __init(__s, traits_type::length(__s));"},
{"lineNum":" 1904","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1905","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1906","line":"#endif"},
{"lineNum":" 1907","line":"}"},
{"lineNum":" 1908","line":""},
{"lineNum":" 1909","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 1910","line":"inline"},
{"lineNum":" 1911","line":"basic_string<_CharT, _Traits, _Allocator>::basic_string(const _CharT* __s, size_type __n)"},
{"lineNum":" 1912","line":"     : __r_(__default_init_tag(), __default_init_tag())"},
{"lineNum":" 1913","line":"{"},
{"lineNum":" 1914","line":"    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, \"basic_string(const char*, n) detected nullptr\");"},
{"lineNum":" 1915","line":"    __init(__s, __n);"},
{"lineNum":" 1916","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1917","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1918","line":"#endif"},
{"lineNum":" 1919","line":"}"},
{"lineNum":" 1920","line":""},
{"lineNum":" 1921","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 1922","line":"inline"},
{"lineNum":" 1923","line":"basic_string<_CharT, _Traits, _Allocator>::basic_string(const _CharT* __s, size_type __n, const _Allocator& __a)"},
{"lineNum":" 1924","line":"    : __r_(__default_init_tag(), __a)"},
{"lineNum":" 1925","line":"{"},
{"lineNum":" 1926","line":"    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, \"basic_string(const char*, n, allocator) detected nullptr\");"},
{"lineNum":" 1927","line":"    __init(__s, __n);"},
{"lineNum":" 1928","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1929","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1930","line":"#endif"},
{"lineNum":" 1931","line":"}"},
{"lineNum":" 1932","line":""},
{"lineNum":" 1933","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 1934","line":"basic_string<_CharT, _Traits, _Allocator>::basic_string(const basic_string& __str)"},
{"lineNum":" 1935","line":"    : __r_(__default_init_tag(), __alloc_traits::select_on_container_copy_construction(__str.__alloc()))"},
{"lineNum":" 1936","line":"{"},
{"lineNum":" 1937","line":"    if (!__str.__is_long())"},
{"lineNum":" 1938","line":"        __r_.first().__r = __str.__r_.first().__r;"},
{"lineNum":" 1939","line":"    else"},
{"lineNum":" 1940","line":"        __init_copy_ctor_external(_VSTD::__to_address(__str.__get_long_pointer()),"},
{"lineNum":" 1941","line":"                                  __str.__get_long_size());"},
{"lineNum":" 1942","line":""},
{"lineNum":" 1943","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1944","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1945","line":"#endif"},
{"lineNum":" 1946","line":"}"},
{"lineNum":" 1947","line":""},
{"lineNum":" 1948","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 1949","line":"basic_string<_CharT, _Traits, _Allocator>::basic_string("},
{"lineNum":" 1950","line":"    const basic_string& __str, const allocator_type& __a)"},
{"lineNum":" 1951","line":"    : __r_(__default_init_tag(), __a)"},
{"lineNum":" 1952","line":"{"},
{"lineNum":" 1953","line":"    if (!__str.__is_long())"},
{"lineNum":" 1954","line":"        __r_.first().__r = __str.__r_.first().__r;"},
{"lineNum":" 1955","line":"    else"},
{"lineNum":" 1956","line":"        __init_copy_ctor_external(_VSTD::__to_address(__str.__get_long_pointer()),"},
{"lineNum":" 1957","line":"                                  __str.__get_long_size());"},
{"lineNum":" 1958","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1959","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1960","line":"#endif"},
{"lineNum":" 1961","line":"}"},
{"lineNum":" 1962","line":""},
{"lineNum":" 1963","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 1964","line":"void basic_string<_CharT, _Traits, _Allocator>::__init_copy_ctor_external("},
{"lineNum":" 1965","line":"    const value_type* __s, size_type __sz) {"},
{"lineNum":" 1966","line":"  pointer __p;"},
{"lineNum":" 1967","line":"  if (__sz < __min_cap) {"},
{"lineNum":" 1968","line":"    __p = __get_short_pointer();"},
{"lineNum":" 1969","line":"    __set_short_size(__sz);"},
{"lineNum":" 1970","line":"  } else {"},
{"lineNum":" 1971","line":"    if (__sz > max_size())"},
{"lineNum":" 1972","line":"      this->__throw_length_error();"},
{"lineNum":" 1973","line":"    size_t __cap = __recommend(__sz);"},
{"lineNum":" 1974","line":"    __p = __alloc_traits::allocate(__alloc(), __cap + 1);"},
{"lineNum":" 1975","line":"    __set_long_pointer(__p);"},
{"lineNum":" 1976","line":"    __set_long_cap(__cap + 1);"},
{"lineNum":" 1977","line":"    __set_long_size(__sz);"},
{"lineNum":" 1978","line":"  }"},
{"lineNum":" 1979","line":"  traits_type::copy(_VSTD::__to_address(__p), __s, __sz + 1);"},
{"lineNum":" 1980","line":"}"},
{"lineNum":" 1981","line":""},
{"lineNum":" 1982","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1983","line":""},
{"lineNum":" 1984","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 1985","line":"inline"},
{"lineNum":" 1986","line":"basic_string<_CharT, _Traits, _Allocator>::basic_string(basic_string&& __str)"},
{"lineNum":" 1987","line":"#if _LIBCPP_STD_VER <= 14"},
{"lineNum":" 1988","line":"        _NOEXCEPT_(is_nothrow_move_constructible<allocator_type>::value)"},
{"lineNum":" 1989","line":"#else"},
{"lineNum":" 1990","line":"        _NOEXCEPT"},
{"lineNum":" 1991","line":"#endif"},
{"lineNum":" 1992","line":"    : __r_(_VSTD::move(__str.__r_))","class":"linePartCov","hits":"27","order":"389","possible_hits":"708",},
{"lineNum":" 1993","line":"{"},
{"lineNum":" 1994","line":"    __str.__zero();"},
{"lineNum":" 1995","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1996","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1997","line":"    if (__is_long())"},
{"lineNum":" 1998","line":"        __get_db()->swap(this, &__str);"},
{"lineNum":" 1999","line":"#endif"},
{"lineNum":" 2000","line":"}"},
{"lineNum":" 2001","line":""},
{"lineNum":" 2002","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2003","line":"inline"},
{"lineNum":" 2004","line":"basic_string<_CharT, _Traits, _Allocator>::basic_string(basic_string&& __str, const allocator_type& __a)"},
{"lineNum":" 2005","line":"    : __r_(__default_init_tag(), __a)"},
{"lineNum":" 2006","line":"{"},
{"lineNum":" 2007","line":"    if (__str.__is_long() && __a != __str.__alloc()) // copy, not move"},
{"lineNum":" 2008","line":"        __init(_VSTD::__to_address(__str.__get_long_pointer()), __str.__get_long_size());"},
{"lineNum":" 2009","line":"    else"},
{"lineNum":" 2010","line":"    {"},
{"lineNum":" 2011","line":"        __r_.first().__r = __str.__r_.first().__r;"},
{"lineNum":" 2012","line":"        __str.__zero();"},
{"lineNum":" 2013","line":"    }"},
{"lineNum":" 2014","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2015","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 2016","line":"    if (__is_long())"},
{"lineNum":" 2017","line":"        __get_db()->swap(this, &__str);"},
{"lineNum":" 2018","line":"#endif"},
{"lineNum":" 2019","line":"}"},
{"lineNum":" 2020","line":""},
{"lineNum":" 2021","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 2022","line":""},
{"lineNum":" 2023","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2024","line":"void"},
{"lineNum":" 2025","line":"basic_string<_CharT, _Traits, _Allocator>::__init(size_type __n, value_type __c)"},
{"lineNum":" 2026","line":"{"},
{"lineNum":" 2027","line":"    if (__n > max_size())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2028","line":"        this->__throw_length_error();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2029","line":"    pointer __p;"},
{"lineNum":" 2030","line":"    if (__n < __min_cap)","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":" 2031","line":"    {"},
{"lineNum":" 2032","line":"        __set_short_size(__n);"},
{"lineNum":" 2033","line":"        __p = __get_short_pointer();"},
{"lineNum":" 2034","line":"    }"},
{"lineNum":" 2035","line":"    else"},
{"lineNum":" 2036","line":"    {"},
{"lineNum":" 2037","line":"        size_type __cap = __recommend(__n);"},
{"lineNum":" 2038","line":"        __p = __alloc_traits::allocate(__alloc(), __cap+1);"},
{"lineNum":" 2039","line":"        __set_long_pointer(__p);"},
{"lineNum":" 2040","line":"        __set_long_cap(__cap+1);"},
{"lineNum":" 2041","line":"        __set_long_size(__n);"},
{"lineNum":" 2042","line":"    }"},
{"lineNum":" 2043","line":"    traits_type::assign(_VSTD::__to_address(__p), __n, __c);"},
{"lineNum":" 2044","line":"    traits_type::assign(__p[__n], value_type());"},
{"lineNum":" 2045","line":"}"},
{"lineNum":" 2046","line":""},
{"lineNum":" 2047","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2048","line":"inline"},
{"lineNum":" 2049","line":"basic_string<_CharT, _Traits, _Allocator>::basic_string(size_type __n, _CharT __c)"},
{"lineNum":" 2050","line":"     : __r_(__default_init_tag(), __default_init_tag())"},
{"lineNum":" 2051","line":"{"},
{"lineNum":" 2052","line":"    __init(__n, __c);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2053","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2054","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 2055","line":"#endif"},
{"lineNum":" 2056","line":"}"},
{"lineNum":" 2057","line":""},
{"lineNum":" 2058","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2059","line":"template <class>"},
{"lineNum":" 2060","line":"basic_string<_CharT, _Traits, _Allocator>::basic_string(size_type __n, _CharT __c, const _Allocator& __a)"},
{"lineNum":" 2061","line":"    : __r_(__default_init_tag(), __a)"},
{"lineNum":" 2062","line":"{"},
{"lineNum":" 2063","line":"    __init(__n, __c);"},
{"lineNum":" 2064","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2065","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 2066","line":"#endif"},
{"lineNum":" 2067","line":"}"},
{"lineNum":" 2068","line":""},
{"lineNum":" 2069","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2070","line":"basic_string<_CharT, _Traits, _Allocator>::basic_string(const basic_string& __str,"},
{"lineNum":" 2071","line":"                                                        size_type __pos, size_type __n,"},
{"lineNum":" 2072","line":"                                                        const _Allocator& __a)"},
{"lineNum":" 2073","line":"    : __r_(__default_init_tag(), __a)"},
{"lineNum":" 2074","line":"{"},
{"lineNum":" 2075","line":"    size_type __str_sz = __str.size();"},
{"lineNum":" 2076","line":"    if (__pos > __str_sz)"},
{"lineNum":" 2077","line":"        this->__throw_out_of_range();"},
{"lineNum":" 2078","line":"    __init(__str.data() + __pos, _VSTD::min(__n, __str_sz - __pos));"},
{"lineNum":" 2079","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2080","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 2081","line":"#endif"},
{"lineNum":" 2082","line":"}"},
{"lineNum":" 2083","line":""},
{"lineNum":" 2084","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2085","line":"inline"},
{"lineNum":" 2086","line":"basic_string<_CharT, _Traits, _Allocator>::basic_string(const basic_string& __str, size_type __pos,"},
{"lineNum":" 2087","line":"                                                        const _Allocator& __a)"},
{"lineNum":" 2088","line":"    : __r_(__default_init_tag(), __a)"},
{"lineNum":" 2089","line":"{"},
{"lineNum":" 2090","line":"    size_type __str_sz = __str.size();"},
{"lineNum":" 2091","line":"    if (__pos > __str_sz)"},
{"lineNum":" 2092","line":"        this->__throw_out_of_range();"},
{"lineNum":" 2093","line":"    __init(__str.data() + __pos, __str_sz - __pos);"},
{"lineNum":" 2094","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2095","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 2096","line":"#endif"},
{"lineNum":" 2097","line":"}"},
{"lineNum":" 2098","line":""},
{"lineNum":" 2099","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2100","line":"template <class _Tp, class>"},
{"lineNum":" 2101","line":"basic_string<_CharT, _Traits, _Allocator>::basic_string("},
{"lineNum":" 2102","line":"             const _Tp& __t, size_type __pos, size_type __n, const allocator_type& __a)"},
{"lineNum":" 2103","line":"    : __r_(__default_init_tag(), __a)"},
{"lineNum":" 2104","line":"{"},
{"lineNum":" 2105","line":"    __self_view __sv0 = __t;"},
{"lineNum":" 2106","line":"    __self_view __sv = __sv0.substr(__pos, __n);"},
{"lineNum":" 2107","line":"    __init(__sv.data(), __sv.size());"},
{"lineNum":" 2108","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2109","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 2110","line":"#endif"},
{"lineNum":" 2111","line":"}"},
{"lineNum":" 2112","line":""},
{"lineNum":" 2113","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2114","line":"template <class _Tp, class>"},
{"lineNum":" 2115","line":"basic_string<_CharT, _Traits, _Allocator>::basic_string(const _Tp & __t)"},
{"lineNum":" 2116","line":"     : __r_(__default_init_tag(), __default_init_tag())"},
{"lineNum":" 2117","line":"{"},
{"lineNum":" 2118","line":"    __self_view __sv = __t;"},
{"lineNum":" 2119","line":"    __init(__sv.data(), __sv.size());"},
{"lineNum":" 2120","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2121","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 2122","line":"#endif"},
{"lineNum":" 2123","line":"}"},
{"lineNum":" 2124","line":""},
{"lineNum":" 2125","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2126","line":"template <class _Tp, class>"},
{"lineNum":" 2127","line":"basic_string<_CharT, _Traits, _Allocator>::basic_string(const _Tp & __t, const _Allocator& __a)"},
{"lineNum":" 2128","line":"    : __r_(__default_init_tag(), __a)"},
{"lineNum":" 2129","line":"{"},
{"lineNum":" 2130","line":"    __self_view __sv = __t;"},
{"lineNum":" 2131","line":"    __init(__sv.data(), __sv.size());"},
{"lineNum":" 2132","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2133","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 2134","line":"#endif"},
{"lineNum":" 2135","line":"}"},
{"lineNum":" 2136","line":""},
{"lineNum":" 2137","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2138","line":"template <class _InputIterator>"},
{"lineNum":" 2139","line":"_EnableIf"},
{"lineNum":" 2140","line":"<"},
{"lineNum":" 2141","line":"    __is_exactly_cpp17_input_iterator<_InputIterator>::value"},
{"lineNum":" 2142","line":">"},
{"lineNum":" 2143","line":"basic_string<_CharT, _Traits, _Allocator>::__init(_InputIterator __first, _InputIterator __last)"},
{"lineNum":" 2144","line":"{","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 2145","line":"    __zero();"},
{"lineNum":" 2146","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 2147","line":"    try"},
{"lineNum":" 2148","line":"    {"},
{"lineNum":" 2149","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 2150","line":"    for (; __first != __last; ++__first)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 2151","line":"        push_back(*__first);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 2152","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 2153","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 2154","line":"    catch (...)"},
{"lineNum":" 2155","line":"    {"},
{"lineNum":" 2156","line":"        if (__is_long())","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 2157","line":"            __alloc_traits::deallocate(__alloc(), __get_long_pointer(), __get_long_cap());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2158","line":"        throw;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 2159","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 2160","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 2161","line":"}","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 2162","line":""},
{"lineNum":" 2163","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2164","line":"template <class _ForwardIterator>"},
{"lineNum":" 2165","line":"_EnableIf"},
{"lineNum":" 2166","line":"<"},
{"lineNum":" 2167","line":"    __is_cpp17_forward_iterator<_ForwardIterator>::value"},
{"lineNum":" 2168","line":">"},
{"lineNum":" 2169","line":"basic_string<_CharT, _Traits, _Allocator>::__init(_ForwardIterator __first, _ForwardIterator __last)"},
{"lineNum":" 2170","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2171","line":"    size_type __sz = static_cast<size_type>(_VSTD::distance(__first, __last));"},
{"lineNum":" 2172","line":"    if (__sz > max_size())","class":"lineNoCov","hits":"0","possible_hits":"30",},
{"lineNum":" 2173","line":"        this->__throw_length_error();","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":" 2174","line":"    pointer __p;"},
{"lineNum":" 2175","line":"    if (__sz < __min_cap)","class":"lineNoCov","hits":"0","possible_hits":"30",},
{"lineNum":" 2176","line":"    {"},
{"lineNum":" 2177","line":"        __set_short_size(__sz);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2178","line":"        __p = __get_short_pointer();"},
{"lineNum":" 2179","line":"    }"},
{"lineNum":" 2180","line":"    else"},
{"lineNum":" 2181","line":"    {"},
{"lineNum":" 2182","line":"        size_type __cap = __recommend(__sz);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2183","line":"        __p = __alloc_traits::allocate(__alloc(), __cap+1);"},
{"lineNum":" 2184","line":"        __set_long_pointer(__p);"},
{"lineNum":" 2185","line":"        __set_long_cap(__cap+1);"},
{"lineNum":" 2186","line":"        __set_long_size(__sz);"},
{"lineNum":" 2187","line":"    }"},
{"lineNum":" 2188","line":""},
{"lineNum":" 2189","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 2190","line":"    try"},
{"lineNum":" 2191","line":"    {"},
{"lineNum":" 2192","line":"#endif  // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 2193","line":"    for (; __first != __last; ++__first, (void) ++__p)","class":"lineNoCov","hits":"0","possible_hits":"139",},
{"lineNum":" 2194","line":"        traits_type::assign(*__p, *__first);"},
{"lineNum":" 2195","line":"    traits_type::assign(*__p, value_type());"},
{"lineNum":" 2196","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 2197","line":"    }"},
{"lineNum":" 2198","line":"    catch (...)"},
{"lineNum":" 2199","line":"    {"},
{"lineNum":" 2200","line":"        if (__is_long())"},
{"lineNum":" 2201","line":"            __alloc_traits::deallocate(__alloc(), __get_long_pointer(), __get_long_cap());"},
{"lineNum":" 2202","line":"        throw;"},
{"lineNum":" 2203","line":"    }"},
{"lineNum":" 2204","line":"#endif  // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 2205","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2206","line":""},
{"lineNum":" 2207","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2208","line":"template<class _InputIterator, class>"},
{"lineNum":" 2209","line":"inline"},
{"lineNum":" 2210","line":"basic_string<_CharT, _Traits, _Allocator>::basic_string(_InputIterator __first, _InputIterator __last)"},
{"lineNum":" 2211","line":"     : __r_(__default_init_tag(), __default_init_tag())"},
{"lineNum":" 2212","line":"{"},
{"lineNum":" 2213","line":"    __init(__first, __last);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2214","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2215","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 2216","line":"#endif"},
{"lineNum":" 2217","line":"}"},
{"lineNum":" 2218","line":""},
{"lineNum":" 2219","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2220","line":"template<class _InputIterator, class>"},
{"lineNum":" 2221","line":"inline"},
{"lineNum":" 2222","line":"basic_string<_CharT, _Traits, _Allocator>::basic_string(_InputIterator __first, _InputIterator __last,"},
{"lineNum":" 2223","line":"                                                        const allocator_type& __a)"},
{"lineNum":" 2224","line":"    : __r_(__default_init_tag(), __a)"},
{"lineNum":" 2225","line":"{"},
{"lineNum":" 2226","line":"    __init(__first, __last);","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":" 2227","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2228","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 2229","line":"#endif"},
{"lineNum":" 2230","line":"}"},
{"lineNum":" 2231","line":""},
{"lineNum":" 2232","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 2233","line":""},
{"lineNum":" 2234","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2235","line":"inline"},
{"lineNum":" 2236","line":"basic_string<_CharT, _Traits, _Allocator>::basic_string("},
{"lineNum":" 2237","line":"    initializer_list<_CharT> __il)"},
{"lineNum":" 2238","line":"     : __r_(__default_init_tag(), __default_init_tag())"},
{"lineNum":" 2239","line":"{"},
{"lineNum":" 2240","line":"    __init(__il.begin(), __il.end());"},
{"lineNum":" 2241","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2242","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 2243","line":"#endif"},
{"lineNum":" 2244","line":"}"},
{"lineNum":" 2245","line":""},
{"lineNum":" 2246","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2247","line":"inline"},
{"lineNum":" 2248","line":""},
{"lineNum":" 2249","line":"basic_string<_CharT, _Traits, _Allocator>::basic_string("},
{"lineNum":" 2250","line":"    initializer_list<_CharT> __il, const _Allocator& __a)"},
{"lineNum":" 2251","line":"    : __r_(__default_init_tag(), __a)"},
{"lineNum":" 2252","line":"{"},
{"lineNum":" 2253","line":"    __init(__il.begin(), __il.end());"},
{"lineNum":" 2254","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2255","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 2256","line":"#endif"},
{"lineNum":" 2257","line":"}"},
{"lineNum":" 2258","line":""},
{"lineNum":" 2259","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 2260","line":""},
{"lineNum":" 2261","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2262","line":"basic_string<_CharT, _Traits, _Allocator>::~basic_string()"},
{"lineNum":" 2263","line":"{"},
{"lineNum":" 2264","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2265","line":"    __get_db()->__erase_c(this);"},
{"lineNum":" 2266","line":"#endif"},
{"lineNum":" 2267","line":"    if (__is_long())","class":"linePartCov","hits":"30","order":"412","possible_hits":"8440",},
{"lineNum":" 2268","line":"        __alloc_traits::deallocate(__alloc(), __get_long_pointer(), __get_long_cap());","class":"linePartCov","hits":"3","order":"681","possible_hits":"422",},
{"lineNum":" 2269","line":"}"},
{"lineNum":" 2270","line":""},
{"lineNum":" 2271","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2272","line":"void"},
{"lineNum":" 2273","line":"basic_string<_CharT, _Traits, _Allocator>::__grow_by_and_replace"},
{"lineNum":" 2274","line":"    (size_type __old_cap, size_type __delta_cap, size_type __old_sz,"},
{"lineNum":" 2275","line":"     size_type __n_copy,  size_type __n_del,     size_type __n_add, const value_type* __p_new_stuff)"},
{"lineNum":" 2276","line":"{"},
{"lineNum":" 2277","line":"    size_type __ms = max_size();"},
{"lineNum":" 2278","line":"    if (__delta_cap > __ms - __old_cap - 1)"},
{"lineNum":" 2279","line":"        this->__throw_length_error();"},
{"lineNum":" 2280","line":"    pointer __old_p = __get_pointer();"},
{"lineNum":" 2281","line":"    size_type __cap = __old_cap < __ms / 2 - __alignment ?"},
{"lineNum":" 2282","line":"                          __recommend(_VSTD::max(__old_cap + __delta_cap, 2 * __old_cap)) :"},
{"lineNum":" 2283","line":"                          __ms - 1;"},
{"lineNum":" 2284","line":"    pointer __p = __alloc_traits::allocate(__alloc(), __cap+1);"},
{"lineNum":" 2285","line":"    __invalidate_all_iterators();"},
{"lineNum":" 2286","line":"    if (__n_copy != 0)"},
{"lineNum":" 2287","line":"        traits_type::copy(_VSTD::__to_address(__p),"},
{"lineNum":" 2288","line":"                          _VSTD::__to_address(__old_p), __n_copy);"},
{"lineNum":" 2289","line":"    if (__n_add != 0)"},
{"lineNum":" 2290","line":"        traits_type::copy(_VSTD::__to_address(__p) + __n_copy, __p_new_stuff, __n_add);"},
{"lineNum":" 2291","line":"    size_type __sec_cp_sz = __old_sz - __n_del - __n_copy;"},
{"lineNum":" 2292","line":"    if (__sec_cp_sz != 0)"},
{"lineNum":" 2293","line":"        traits_type::copy(_VSTD::__to_address(__p) + __n_copy + __n_add,"},
{"lineNum":" 2294","line":"                          _VSTD::__to_address(__old_p) + __n_copy + __n_del, __sec_cp_sz);"},
{"lineNum":" 2295","line":"    if (__old_cap+1 != __min_cap)"},
{"lineNum":" 2296","line":"        __alloc_traits::deallocate(__alloc(), __old_p, __old_cap+1);"},
{"lineNum":" 2297","line":"    __set_long_pointer(__p);"},
{"lineNum":" 2298","line":"    __set_long_cap(__cap+1);"},
{"lineNum":" 2299","line":"    __old_sz = __n_copy + __n_add + __sec_cp_sz;"},
{"lineNum":" 2300","line":"    __set_long_size(__old_sz);"},
{"lineNum":" 2301","line":"    traits_type::assign(__p[__old_sz], value_type());"},
{"lineNum":" 2302","line":"}"},
{"lineNum":" 2303","line":""},
{"lineNum":" 2304","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2305","line":"void"},
{"lineNum":" 2306","line":"basic_string<_CharT, _Traits, _Allocator>::__grow_by(size_type __old_cap, size_type __delta_cap, size_type __old_sz,"},
{"lineNum":" 2307","line":"                                                     size_type __n_copy,  size_type __n_del,     size_type __n_add)"},
{"lineNum":" 2308","line":"{"},
{"lineNum":" 2309","line":"    size_type __ms = max_size();"},
{"lineNum":" 2310","line":"    if (__delta_cap > __ms - __old_cap)"},
{"lineNum":" 2311","line":"        this->__throw_length_error();"},
{"lineNum":" 2312","line":"    pointer __old_p = __get_pointer();"},
{"lineNum":" 2313","line":"    size_type __cap = __old_cap < __ms / 2 - __alignment ?"},
{"lineNum":" 2314","line":"                          __recommend(_VSTD::max(__old_cap + __delta_cap, 2 * __old_cap)) :"},
{"lineNum":" 2315","line":"                          __ms - 1;"},
{"lineNum":" 2316","line":"    pointer __p = __alloc_traits::allocate(__alloc(), __cap+1);"},
{"lineNum":" 2317","line":"    __invalidate_all_iterators();"},
{"lineNum":" 2318","line":"    if (__n_copy != 0)"},
{"lineNum":" 2319","line":"        traits_type::copy(_VSTD::__to_address(__p),"},
{"lineNum":" 2320","line":"                          _VSTD::__to_address(__old_p), __n_copy);"},
{"lineNum":" 2321","line":"    size_type __sec_cp_sz = __old_sz - __n_del - __n_copy;"},
{"lineNum":" 2322","line":"    if (__sec_cp_sz != 0)"},
{"lineNum":" 2323","line":"        traits_type::copy(_VSTD::__to_address(__p) + __n_copy + __n_add,"},
{"lineNum":" 2324","line":"                          _VSTD::__to_address(__old_p) + __n_copy + __n_del,"},
{"lineNum":" 2325","line":"                          __sec_cp_sz);"},
{"lineNum":" 2326","line":"    if (__old_cap+1 != __min_cap)"},
{"lineNum":" 2327","line":"        __alloc_traits::deallocate(__alloc(), __old_p, __old_cap+1);"},
{"lineNum":" 2328","line":"    __set_long_pointer(__p);"},
{"lineNum":" 2329","line":"    __set_long_cap(__cap+1);"},
{"lineNum":" 2330","line":"}"},
{"lineNum":" 2331","line":""},
{"lineNum":" 2332","line":"// assign"},
{"lineNum":" 2333","line":""},
{"lineNum":" 2334","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2335","line":"template <bool __is_short>"},
{"lineNum":" 2336","line":"basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 2337","line":"basic_string<_CharT, _Traits, _Allocator>::__assign_no_alias("},
{"lineNum":" 2338","line":"    const value_type* __s, size_type __n) {"},
{"lineNum":" 2339","line":"  size_type __cap = __is_short ? __min_cap : __get_long_cap();"},
{"lineNum":" 2340","line":"  if (__n < __cap) {"},
{"lineNum":" 2341","line":"    pointer __p = __is_short ? __get_short_pointer() : __get_long_pointer();"},
{"lineNum":" 2342","line":"    __is_short ? __set_short_size(__n) : __set_long_size(__n);"},
{"lineNum":" 2343","line":"    traits_type::copy(_VSTD::__to_address(__p), __s, __n);"},
{"lineNum":" 2344","line":"    traits_type::assign(__p[__n], value_type());"},
{"lineNum":" 2345","line":"    __invalidate_iterators_past(__n);"},
{"lineNum":" 2346","line":"  } else {"},
{"lineNum":" 2347","line":"    size_type __sz = __is_short ? __get_short_size() : __get_long_size();"},
{"lineNum":" 2348","line":"    __grow_by_and_replace(__cap - 1, __n - __cap + 1, __sz, 0, __sz, __n, __s);"},
{"lineNum":" 2349","line":"  }"},
{"lineNum":" 2350","line":"  return *this;"},
{"lineNum":" 2351","line":"}"},
{"lineNum":" 2352","line":""},
{"lineNum":" 2353","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2354","line":"basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 2355","line":"basic_string<_CharT, _Traits, _Allocator>::__assign_external("},
{"lineNum":" 2356","line":"    const value_type* __s, size_type __n) {"},
{"lineNum":" 2357","line":"  size_type __cap = capacity();"},
{"lineNum":" 2358","line":"  if (__cap >= __n) {"},
{"lineNum":" 2359","line":"    value_type* __p = _VSTD::__to_address(__get_pointer());"},
{"lineNum":" 2360","line":"    traits_type::move(__p, __s, __n);"},
{"lineNum":" 2361","line":"    traits_type::assign(__p[__n], value_type());"},
{"lineNum":" 2362","line":"    __set_size(__n);"},
{"lineNum":" 2363","line":"    __invalidate_iterators_past(__n);"},
{"lineNum":" 2364","line":"  } else {"},
{"lineNum":" 2365","line":"    size_type __sz = size();"},
{"lineNum":" 2366","line":"    __grow_by_and_replace(__cap, __n - __cap, __sz, 0, __sz, __n, __s);"},
{"lineNum":" 2367","line":"  }"},
{"lineNum":" 2368","line":"  return *this;"},
{"lineNum":" 2369","line":"}"},
{"lineNum":" 2370","line":""},
{"lineNum":" 2371","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2372","line":"basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 2373","line":"basic_string<_CharT, _Traits, _Allocator>::assign(const value_type* __s, size_type __n)"},
{"lineNum":" 2374","line":"{"},
{"lineNum":" 2375","line":"    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, \"string::assign received nullptr\");"},
{"lineNum":" 2376","line":"    return (_LIBCPP_BUILTIN_CONSTANT_P(__n) && __n < __min_cap)"},
{"lineNum":" 2377","line":"               ? __assign_short(__s, __n)"},
{"lineNum":" 2378","line":"               : __assign_external(__s, __n);"},
{"lineNum":" 2379","line":"}"},
{"lineNum":" 2380","line":""},
{"lineNum":" 2381","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2382","line":"basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 2383","line":"basic_string<_CharT, _Traits, _Allocator>::assign(size_type __n, value_type __c)"},
{"lineNum":" 2384","line":"{"},
{"lineNum":" 2385","line":"    size_type __cap = capacity();"},
{"lineNum":" 2386","line":"    if (__cap < __n)"},
{"lineNum":" 2387","line":"    {"},
{"lineNum":" 2388","line":"        size_type __sz = size();"},
{"lineNum":" 2389","line":"        __grow_by(__cap, __n - __cap, __sz, 0, __sz);"},
{"lineNum":" 2390","line":"    }"},
{"lineNum":" 2391","line":"    value_type* __p = _VSTD::__to_address(__get_pointer());"},
{"lineNum":" 2392","line":"    traits_type::assign(__p, __n, __c);"},
{"lineNum":" 2393","line":"    traits_type::assign(__p[__n], value_type());"},
{"lineNum":" 2394","line":"    __set_size(__n);"},
{"lineNum":" 2395","line":"    __invalidate_iterators_past(__n);"},
{"lineNum":" 2396","line":"    return *this;"},
{"lineNum":" 2397","line":"}"},
{"lineNum":" 2398","line":""},
{"lineNum":" 2399","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2400","line":"basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 2401","line":"basic_string<_CharT, _Traits, _Allocator>::operator=(value_type __c)"},
{"lineNum":" 2402","line":"{"},
{"lineNum":" 2403","line":"    pointer __p;"},
{"lineNum":" 2404","line":"    if (__is_long())"},
{"lineNum":" 2405","line":"    {"},
{"lineNum":" 2406","line":"        __p = __get_long_pointer();"},
{"lineNum":" 2407","line":"        __set_long_size(1);"},
{"lineNum":" 2408","line":"    }"},
{"lineNum":" 2409","line":"    else"},
{"lineNum":" 2410","line":"    {"},
{"lineNum":" 2411","line":"        __p = __get_short_pointer();"},
{"lineNum":" 2412","line":"        __set_short_size(1);"},
{"lineNum":" 2413","line":"    }"},
{"lineNum":" 2414","line":"    traits_type::assign(*__p, __c);"},
{"lineNum":" 2415","line":"    traits_type::assign(*++__p, value_type());"},
{"lineNum":" 2416","line":"    __invalidate_iterators_past(1);"},
{"lineNum":" 2417","line":"    return *this;"},
{"lineNum":" 2418","line":"}"},
{"lineNum":" 2419","line":""},
{"lineNum":" 2420","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2421","line":"basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 2422","line":"basic_string<_CharT, _Traits, _Allocator>::operator=(const basic_string& __str)"},
{"lineNum":" 2423","line":"{"},
{"lineNum":" 2424","line":"  if (this != &__str) {"},
{"lineNum":" 2425","line":"    __copy_assign_alloc(__str);"},
{"lineNum":" 2426","line":"    if (!__is_long()) {"},
{"lineNum":" 2427","line":"      if (!__str.__is_long()) {"},
{"lineNum":" 2428","line":"        __r_.first().__r = __str.__r_.first().__r;"},
{"lineNum":" 2429","line":"      } else {"},
{"lineNum":" 2430","line":"        return __assign_no_alias<true>(__str.data(), __str.size());"},
{"lineNum":" 2431","line":"      }"},
{"lineNum":" 2432","line":"    } else {"},
{"lineNum":" 2433","line":"      return __assign_no_alias<false>(__str.data(), __str.size());"},
{"lineNum":" 2434","line":"    }"},
{"lineNum":" 2435","line":"  }"},
{"lineNum":" 2436","line":"  return *this;"},
{"lineNum":" 2437","line":"}"},
{"lineNum":" 2438","line":""},
{"lineNum":" 2439","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 2440","line":""},
{"lineNum":" 2441","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2442","line":"inline"},
{"lineNum":" 2443","line":"void"},
{"lineNum":" 2444","line":"basic_string<_CharT, _Traits, _Allocator>::__move_assign(basic_string& __str, false_type)"},
{"lineNum":" 2445","line":"    _NOEXCEPT_(__alloc_traits::is_always_equal::value)"},
{"lineNum":" 2446","line":"{"},
{"lineNum":" 2447","line":"    if (__alloc() != __str.__alloc())"},
{"lineNum":" 2448","line":"        assign(__str);"},
{"lineNum":" 2449","line":"    else"},
{"lineNum":" 2450","line":"        __move_assign(__str, true_type());"},
{"lineNum":" 2451","line":"}"},
{"lineNum":" 2452","line":""},
{"lineNum":" 2453","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2454","line":"inline"},
{"lineNum":" 2455","line":"void"},
{"lineNum":" 2456","line":"basic_string<_CharT, _Traits, _Allocator>::__move_assign(basic_string& __str, true_type)"},
{"lineNum":" 2457","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 2458","line":"    _NOEXCEPT"},
{"lineNum":" 2459","line":"#else"},
{"lineNum":" 2460","line":"    _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value)"},
{"lineNum":" 2461","line":"#endif"},
{"lineNum":" 2462","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2463","line":"  if (__is_long()) {","class":"lineNoCov","hits":"0","possible_hits":"35",},
{"lineNum":" 2464","line":"    __alloc_traits::deallocate(__alloc(), __get_long_pointer(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2465","line":"                               __get_long_cap());"},
{"lineNum":" 2466","line":"#if _LIBCPP_STD_VER <= 14"},
{"lineNum":" 2467","line":"    if (!is_nothrow_move_assignable<allocator_type>::value) {"},
{"lineNum":" 2468","line":"      __set_short_size(0);"},
{"lineNum":" 2469","line":"      traits_type::assign(__get_short_pointer()[0], value_type());"},
{"lineNum":" 2470","line":"    }"},
{"lineNum":" 2471","line":"#endif"},
{"lineNum":" 2472","line":"  }"},
{"lineNum":" 2473","line":"  __move_assign_alloc(__str);"},
{"lineNum":" 2474","line":"  __r_.first() = __str.__r_.first();","class":"lineNoCov","hits":"0","possible_hits":"164",},
{"lineNum":" 2475","line":"  __str.__set_short_size(0);"},
{"lineNum":" 2476","line":"  traits_type::assign(__str.__get_short_pointer()[0], value_type());"},
{"lineNum":" 2477","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2478","line":""},
{"lineNum":" 2479","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2480","line":"inline"},
{"lineNum":" 2481","line":"basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 2482","line":"basic_string<_CharT, _Traits, _Allocator>::operator=(basic_string&& __str)"},
{"lineNum":" 2483","line":"    _NOEXCEPT_((__noexcept_move_assign_container<_Allocator, __alloc_traits>::value))"},
{"lineNum":" 2484","line":"{"},
{"lineNum":" 2485","line":"    __move_assign(__str, integral_constant<bool,","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 2486","line":"          __alloc_traits::propagate_on_container_move_assignment::value>());"},
{"lineNum":" 2487","line":"    return *this;"},
{"lineNum":" 2488","line":"}"},
{"lineNum":" 2489","line":""},
{"lineNum":" 2490","line":"#endif"},
{"lineNum":" 2491","line":""},
{"lineNum":" 2492","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2493","line":"template<class _InputIterator>"},
{"lineNum":" 2494","line":"_EnableIf"},
{"lineNum":" 2495","line":"<"},
{"lineNum":" 2496","line":"     __is_exactly_cpp17_input_iterator<_InputIterator>::value,"},
{"lineNum":" 2497","line":"    basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 2498","line":">"},
{"lineNum":" 2499","line":"basic_string<_CharT, _Traits, _Allocator>::assign(_InputIterator __first, _InputIterator __last)"},
{"lineNum":" 2500","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2501","line":"    const basic_string __temp(__first, __last, __alloc());"},
{"lineNum":" 2502","line":"    assign(__temp.data(), __temp.size());","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 2503","line":"    return *this;"},
{"lineNum":" 2504","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2505","line":""},
{"lineNum":" 2506","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2507","line":"template<class _ForwardIterator>"},
{"lineNum":" 2508","line":"_EnableIf"},
{"lineNum":" 2509","line":"<"},
{"lineNum":" 2510","line":"    __is_cpp17_forward_iterator<_ForwardIterator>::value,"},
{"lineNum":" 2511","line":"    basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 2512","line":">"},
{"lineNum":" 2513","line":"basic_string<_CharT, _Traits, _Allocator>::assign(_ForwardIterator __first, _ForwardIterator __last)"},
{"lineNum":" 2514","line":"{"},
{"lineNum":" 2515","line":"    size_type __cap = capacity();"},
{"lineNum":" 2516","line":"    size_type __n = __string_is_trivial_iterator<_ForwardIterator>::value ?"},
{"lineNum":" 2517","line":"        static_cast<size_type>(_VSTD::distance(__first, __last)) : 0;"},
{"lineNum":" 2518","line":""},
{"lineNum":" 2519","line":"    if (__string_is_trivial_iterator<_ForwardIterator>::value &&"},
{"lineNum":" 2520","line":"        (__cap >= __n || !__addr_in_range(*__first)))"},
{"lineNum":" 2521","line":"    {"},
{"lineNum":" 2522","line":"        if (__cap < __n)"},
{"lineNum":" 2523","line":"        {"},
{"lineNum":" 2524","line":"            size_type __sz = size();"},
{"lineNum":" 2525","line":"            __grow_by(__cap, __n - __cap, __sz, 0, __sz);"},
{"lineNum":" 2526","line":"        }"},
{"lineNum":" 2527","line":"        pointer __p = __get_pointer();"},
{"lineNum":" 2528","line":"        for (; __first != __last; ++__first, ++__p)"},
{"lineNum":" 2529","line":"            traits_type::assign(*__p, *__first);"},
{"lineNum":" 2530","line":"        traits_type::assign(*__p, value_type());"},
{"lineNum":" 2531","line":"        __set_size(__n);"},
{"lineNum":" 2532","line":"        __invalidate_iterators_past(__n);"},
{"lineNum":" 2533","line":"    }"},
{"lineNum":" 2534","line":"    else"},
{"lineNum":" 2535","line":"    {"},
{"lineNum":" 2536","line":"        const basic_string __temp(__first, __last, __alloc());"},
{"lineNum":" 2537","line":"        assign(__temp.data(), __temp.size());"},
{"lineNum":" 2538","line":"    }"},
{"lineNum":" 2539","line":"    return *this;"},
{"lineNum":" 2540","line":"}"},
{"lineNum":" 2541","line":""},
{"lineNum":" 2542","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2543","line":"basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 2544","line":"basic_string<_CharT, _Traits, _Allocator>::assign(const basic_string& __str, size_type __pos, size_type __n)"},
{"lineNum":" 2545","line":"{"},
{"lineNum":" 2546","line":"    size_type __sz = __str.size();"},
{"lineNum":" 2547","line":"    if (__pos > __sz)"},
{"lineNum":" 2548","line":"        this->__throw_out_of_range();"},
{"lineNum":" 2549","line":"    return assign(__str.data() + __pos, _VSTD::min(__n, __sz - __pos));"},
{"lineNum":" 2550","line":"}"},
{"lineNum":" 2551","line":""},
{"lineNum":" 2552","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2553","line":"template <class _Tp>"},
{"lineNum":" 2554","line":"_EnableIf"},
{"lineNum":" 2555","line":"<"},
{"lineNum":" 2556","line":"    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value"},
{"lineNum":" 2557","line":"    && !__is_same_uncvref<_Tp, basic_string<_CharT, _Traits, _Allocator> >::value,"},
{"lineNum":" 2558","line":"    basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 2559","line":">"},
{"lineNum":" 2560","line":"basic_string<_CharT, _Traits, _Allocator>::assign(const _Tp & __t, size_type __pos, size_type __n)"},
{"lineNum":" 2561","line":"{"},
{"lineNum":" 2562","line":"    __self_view __sv = __t;"},
{"lineNum":" 2563","line":"    size_type __sz = __sv.size();"},
{"lineNum":" 2564","line":"    if (__pos > __sz)"},
{"lineNum":" 2565","line":"        this->__throw_out_of_range();"},
{"lineNum":" 2566","line":"    return assign(__sv.data() + __pos, _VSTD::min(__n, __sz - __pos));"},
{"lineNum":" 2567","line":"}"},
{"lineNum":" 2568","line":""},
{"lineNum":" 2569","line":""},
{"lineNum":" 2570","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2571","line":"basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 2572","line":"basic_string<_CharT, _Traits, _Allocator>::__assign_external(const value_type* __s) {"},
{"lineNum":" 2573","line":"  return __assign_external(__s, traits_type::length(__s));"},
{"lineNum":" 2574","line":"}"},
{"lineNum":" 2575","line":""},
{"lineNum":" 2576","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2577","line":"basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 2578","line":"basic_string<_CharT, _Traits, _Allocator>::assign(const value_type* __s)"},
{"lineNum":" 2579","line":"{"},
{"lineNum":" 2580","line":"    _LIBCPP_ASSERT(__s != nullptr, \"string::assign received nullptr\");"},
{"lineNum":" 2581","line":"    return _LIBCPP_BUILTIN_CONSTANT_P(*__s)"},
{"lineNum":" 2582","line":"               ? (traits_type::length(__s) < __min_cap"},
{"lineNum":" 2583","line":"                      ? __assign_short(__s, traits_type::length(__s))"},
{"lineNum":" 2584","line":"                      : __assign_external(__s, traits_type::length(__s)))"},
{"lineNum":" 2585","line":"               : __assign_external(__s);"},
{"lineNum":" 2586","line":"}"},
{"lineNum":" 2587","line":"// append"},
{"lineNum":" 2588","line":""},
{"lineNum":" 2589","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2590","line":"basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 2591","line":"basic_string<_CharT, _Traits, _Allocator>::append(const value_type* __s, size_type __n)"},
{"lineNum":" 2592","line":"{"},
{"lineNum":" 2593","line":"    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, \"string::append received nullptr\");"},
{"lineNum":" 2594","line":"    size_type __cap = capacity();"},
{"lineNum":" 2595","line":"    size_type __sz = size();"},
{"lineNum":" 2596","line":"    if (__cap - __sz >= __n)"},
{"lineNum":" 2597","line":"    {"},
{"lineNum":" 2598","line":"        if (__n)"},
{"lineNum":" 2599","line":"        {"},
{"lineNum":" 2600","line":"            value_type* __p = _VSTD::__to_address(__get_pointer());"},
{"lineNum":" 2601","line":"            traits_type::copy(__p + __sz, __s, __n);"},
{"lineNum":" 2602","line":"            __sz += __n;"},
{"lineNum":" 2603","line":"            __set_size(__sz);"},
{"lineNum":" 2604","line":"            traits_type::assign(__p[__sz], value_type());"},
{"lineNum":" 2605","line":"        }"},
{"lineNum":" 2606","line":"    }"},
{"lineNum":" 2607","line":"    else"},
{"lineNum":" 2608","line":"        __grow_by_and_replace(__cap, __sz + __n - __cap, __sz, __sz, 0, __n, __s);"},
{"lineNum":" 2609","line":"    return *this;"},
{"lineNum":" 2610","line":"}"},
{"lineNum":" 2611","line":""},
{"lineNum":" 2612","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2613","line":"basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 2614","line":"basic_string<_CharT, _Traits, _Allocator>::append(size_type __n, value_type __c)"},
{"lineNum":" 2615","line":"{"},
{"lineNum":" 2616","line":"    if (__n)"},
{"lineNum":" 2617","line":"    {"},
{"lineNum":" 2618","line":"        size_type __cap = capacity();"},
{"lineNum":" 2619","line":"        size_type __sz = size();"},
{"lineNum":" 2620","line":"        if (__cap - __sz < __n)"},
{"lineNum":" 2621","line":"            __grow_by(__cap, __sz + __n - __cap, __sz, __sz, 0);"},
{"lineNum":" 2622","line":"        pointer __p = __get_pointer();"},
{"lineNum":" 2623","line":"        traits_type::assign(_VSTD::__to_address(__p) + __sz, __n, __c);"},
{"lineNum":" 2624","line":"        __sz += __n;"},
{"lineNum":" 2625","line":"        __set_size(__sz);"},
{"lineNum":" 2626","line":"        traits_type::assign(__p[__sz], value_type());"},
{"lineNum":" 2627","line":"    }"},
{"lineNum":" 2628","line":"    return *this;"},
{"lineNum":" 2629","line":"}"},
{"lineNum":" 2630","line":""},
{"lineNum":" 2631","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2632","line":"inline void"},
{"lineNum":" 2633","line":"basic_string<_CharT, _Traits, _Allocator>::__append_default_init(size_type __n)"},
{"lineNum":" 2634","line":"{"},
{"lineNum":" 2635","line":"    if (__n)"},
{"lineNum":" 2636","line":"    {"},
{"lineNum":" 2637","line":"        size_type __cap = capacity();"},
{"lineNum":" 2638","line":"        size_type __sz = size();"},
{"lineNum":" 2639","line":"        if (__cap - __sz < __n)"},
{"lineNum":" 2640","line":"            __grow_by(__cap, __sz + __n - __cap, __sz, __sz, 0);"},
{"lineNum":" 2641","line":"        pointer __p = __get_pointer();"},
{"lineNum":" 2642","line":"        __sz += __n;"},
{"lineNum":" 2643","line":"        __set_size(__sz);"},
{"lineNum":" 2644","line":"        traits_type::assign(__p[__sz], value_type());"},
{"lineNum":" 2645","line":"    }"},
{"lineNum":" 2646","line":"}"},
{"lineNum":" 2647","line":""},
{"lineNum":" 2648","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2649","line":"void"},
{"lineNum":" 2650","line":"basic_string<_CharT, _Traits, _Allocator>::push_back(value_type __c)"},
{"lineNum":" 2651","line":"{"},
{"lineNum":" 2652","line":"    bool __is_short = !__is_long();"},
{"lineNum":" 2653","line":"    size_type __cap;"},
{"lineNum":" 2654","line":"    size_type __sz;"},
{"lineNum":" 2655","line":"    if (__is_short)"},
{"lineNum":" 2656","line":"    {"},
{"lineNum":" 2657","line":"        __cap = __min_cap - 1;"},
{"lineNum":" 2658","line":"        __sz = __get_short_size();"},
{"lineNum":" 2659","line":"    }"},
{"lineNum":" 2660","line":"    else"},
{"lineNum":" 2661","line":"    {"},
{"lineNum":" 2662","line":"        __cap = __get_long_cap() - 1;"},
{"lineNum":" 2663","line":"        __sz = __get_long_size();"},
{"lineNum":" 2664","line":"    }"},
{"lineNum":" 2665","line":"    if (__sz == __cap)"},
{"lineNum":" 2666","line":"    {"},
{"lineNum":" 2667","line":"        __grow_by(__cap, 1, __sz, __sz, 0);"},
{"lineNum":" 2668","line":"        __is_short = !__is_long();"},
{"lineNum":" 2669","line":"    }"},
{"lineNum":" 2670","line":"    pointer __p;"},
{"lineNum":" 2671","line":"    if (__is_short)"},
{"lineNum":" 2672","line":"    {"},
{"lineNum":" 2673","line":"        __p = __get_short_pointer() + __sz;"},
{"lineNum":" 2674","line":"        __set_short_size(__sz+1);"},
{"lineNum":" 2675","line":"    }"},
{"lineNum":" 2676","line":"    else"},
{"lineNum":" 2677","line":"    {"},
{"lineNum":" 2678","line":"        __p = __get_long_pointer() + __sz;"},
{"lineNum":" 2679","line":"        __set_long_size(__sz+1);"},
{"lineNum":" 2680","line":"    }"},
{"lineNum":" 2681","line":"    traits_type::assign(*__p, __c);"},
{"lineNum":" 2682","line":"    traits_type::assign(*++__p, value_type());"},
{"lineNum":" 2683","line":"}"},
{"lineNum":" 2684","line":""},
{"lineNum":" 2685","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2686","line":"template<class _ForwardIterator>"},
{"lineNum":" 2687","line":"_EnableIf"},
{"lineNum":" 2688","line":"<"},
{"lineNum":" 2689","line":"    __is_cpp17_forward_iterator<_ForwardIterator>::value,"},
{"lineNum":" 2690","line":"    basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 2691","line":">"},
{"lineNum":" 2692","line":"basic_string<_CharT, _Traits, _Allocator>::append("},
{"lineNum":" 2693","line":"    _ForwardIterator __first, _ForwardIterator __last)"},
{"lineNum":" 2694","line":"{"},
{"lineNum":" 2695","line":"    size_type __sz = size();"},
{"lineNum":" 2696","line":"    size_type __cap = capacity();"},
{"lineNum":" 2697","line":"    size_type __n = static_cast<size_type>(_VSTD::distance(__first, __last));"},
{"lineNum":" 2698","line":"    if (__n)"},
{"lineNum":" 2699","line":"    {"},
{"lineNum":" 2700","line":"        if (__string_is_trivial_iterator<_ForwardIterator>::value &&"},
{"lineNum":" 2701","line":"            !__addr_in_range(*__first))"},
{"lineNum":" 2702","line":"        {"},
{"lineNum":" 2703","line":"            if (__cap - __sz < __n)"},
{"lineNum":" 2704","line":"                __grow_by(__cap, __sz + __n - __cap, __sz, __sz, 0);"},
{"lineNum":" 2705","line":"            pointer __p = __get_pointer() + __sz;"},
{"lineNum":" 2706","line":"            for (; __first != __last; ++__p, ++__first)"},
{"lineNum":" 2707","line":"                traits_type::assign(*__p, *__first);"},
{"lineNum":" 2708","line":"            traits_type::assign(*__p, value_type());"},
{"lineNum":" 2709","line":"            __set_size(__sz + __n);"},
{"lineNum":" 2710","line":"        }"},
{"lineNum":" 2711","line":"        else"},
{"lineNum":" 2712","line":"        {"},
{"lineNum":" 2713","line":"            const basic_string __temp(__first, __last, __alloc());"},
{"lineNum":" 2714","line":"            append(__temp.data(), __temp.size());"},
{"lineNum":" 2715","line":"        }"},
{"lineNum":" 2716","line":"    }"},
{"lineNum":" 2717","line":"    return *this;"},
{"lineNum":" 2718","line":"}"},
{"lineNum":" 2719","line":""},
{"lineNum":" 2720","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2721","line":"inline"},
{"lineNum":" 2722","line":"basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 2723","line":"basic_string<_CharT, _Traits, _Allocator>::append(const basic_string& __str)"},
{"lineNum":" 2724","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2725","line":"    return append(__str.data(), __str.size());","class":"lineNoCov","hits":"0","possible_hits":"448",},
{"lineNum":" 2726","line":"}"},
{"lineNum":" 2727","line":""},
{"lineNum":" 2728","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2729","line":"basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 2730","line":"basic_string<_CharT, _Traits, _Allocator>::append(const basic_string& __str, size_type __pos, size_type __n)"},
{"lineNum":" 2731","line":"{"},
{"lineNum":" 2732","line":"    size_type __sz = __str.size();"},
{"lineNum":" 2733","line":"    if (__pos > __sz)"},
{"lineNum":" 2734","line":"        this->__throw_out_of_range();"},
{"lineNum":" 2735","line":"    return append(__str.data() + __pos, _VSTD::min(__n, __sz - __pos));"},
{"lineNum":" 2736","line":"}"},
{"lineNum":" 2737","line":""},
{"lineNum":" 2738","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2739","line":"template <class _Tp>"},
{"lineNum":" 2740","line":"    _EnableIf"},
{"lineNum":" 2741","line":"    <"},
{"lineNum":" 2742","line":"        __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value  && !__is_same_uncvref<_Tp, basic_string<_CharT, _Traits, _Allocator> >::value,"},
{"lineNum":" 2743","line":"        basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 2744","line":"    >"},
{"lineNum":" 2745","line":"basic_string<_CharT, _Traits, _Allocator>::append(const _Tp & __t, size_type __pos, size_type __n)"},
{"lineNum":" 2746","line":"{"},
{"lineNum":" 2747","line":"    __self_view __sv = __t;"},
{"lineNum":" 2748","line":"    size_type __sz = __sv.size();"},
{"lineNum":" 2749","line":"    if (__pos > __sz)"},
{"lineNum":" 2750","line":"        this->__throw_out_of_range();"},
{"lineNum":" 2751","line":"    return append(__sv.data() + __pos, _VSTD::min(__n, __sz - __pos));"},
{"lineNum":" 2752","line":"}"},
{"lineNum":" 2753","line":""},
{"lineNum":" 2754","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2755","line":"basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 2756","line":"basic_string<_CharT, _Traits, _Allocator>::append(const value_type* __s)"},
{"lineNum":" 2757","line":"{"},
{"lineNum":" 2758","line":"    _LIBCPP_ASSERT(__s != nullptr, \"string::append received nullptr\");"},
{"lineNum":" 2759","line":"    return append(__s, traits_type::length(__s));"},
{"lineNum":" 2760","line":"}"},
{"lineNum":" 2761","line":""},
{"lineNum":" 2762","line":"// insert"},
{"lineNum":" 2763","line":""},
{"lineNum":" 2764","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2765","line":"basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 2766","line":"basic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos, const value_type* __s, size_type __n)"},
{"lineNum":" 2767","line":"{"},
{"lineNum":" 2768","line":"    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, \"string::insert received nullptr\");"},
{"lineNum":" 2769","line":"    size_type __sz = size();"},
{"lineNum":" 2770","line":"    if (__pos > __sz)"},
{"lineNum":" 2771","line":"        this->__throw_out_of_range();"},
{"lineNum":" 2772","line":"    size_type __cap = capacity();"},
{"lineNum":" 2773","line":"    if (__cap - __sz >= __n)"},
{"lineNum":" 2774","line":"    {"},
{"lineNum":" 2775","line":"        if (__n)"},
{"lineNum":" 2776","line":"        {"},
{"lineNum":" 2777","line":"            value_type* __p = _VSTD::__to_address(__get_pointer());"},
{"lineNum":" 2778","line":"            size_type __n_move = __sz - __pos;"},
{"lineNum":" 2779","line":"            if (__n_move != 0)"},
{"lineNum":" 2780","line":"            {"},
{"lineNum":" 2781","line":"                if (__p + __pos <= __s && __s < __p + __sz)"},
{"lineNum":" 2782","line":"                    __s += __n;"},
{"lineNum":" 2783","line":"                traits_type::move(__p + __pos + __n, __p + __pos, __n_move);"},
{"lineNum":" 2784","line":"            }"},
{"lineNum":" 2785","line":"            traits_type::move(__p + __pos, __s, __n);"},
{"lineNum":" 2786","line":"            __sz += __n;"},
{"lineNum":" 2787","line":"            __set_size(__sz);"},
{"lineNum":" 2788","line":"            traits_type::assign(__p[__sz], value_type());"},
{"lineNum":" 2789","line":"        }"},
{"lineNum":" 2790","line":"    }"},
{"lineNum":" 2791","line":"    else"},
{"lineNum":" 2792","line":"        __grow_by_and_replace(__cap, __sz + __n - __cap, __sz, __pos, 0, __n, __s);"},
{"lineNum":" 2793","line":"    return *this;"},
{"lineNum":" 2794","line":"}"},
{"lineNum":" 2795","line":""},
{"lineNum":" 2796","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2797","line":"basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 2798","line":"basic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos, size_type __n, value_type __c)"},
{"lineNum":" 2799","line":"{"},
{"lineNum":" 2800","line":"    size_type __sz = size();"},
{"lineNum":" 2801","line":"    if (__pos > __sz)"},
{"lineNum":" 2802","line":"        this->__throw_out_of_range();"},
{"lineNum":" 2803","line":"    if (__n)"},
{"lineNum":" 2804","line":"    {"},
{"lineNum":" 2805","line":"        size_type __cap = capacity();"},
{"lineNum":" 2806","line":"        value_type* __p;"},
{"lineNum":" 2807","line":"        if (__cap - __sz >= __n)"},
{"lineNum":" 2808","line":"        {"},
{"lineNum":" 2809","line":"            __p = _VSTD::__to_address(__get_pointer());"},
{"lineNum":" 2810","line":"            size_type __n_move = __sz - __pos;"},
{"lineNum":" 2811","line":"            if (__n_move != 0)"},
{"lineNum":" 2812","line":"                traits_type::move(__p + __pos + __n, __p + __pos, __n_move);"},
{"lineNum":" 2813","line":"        }"},
{"lineNum":" 2814","line":"        else"},
{"lineNum":" 2815","line":"        {"},
{"lineNum":" 2816","line":"            __grow_by(__cap, __sz + __n - __cap, __sz, __pos, 0, __n);"},
{"lineNum":" 2817","line":"            __p = _VSTD::__to_address(__get_long_pointer());"},
{"lineNum":" 2818","line":"        }"},
{"lineNum":" 2819","line":"        traits_type::assign(__p + __pos, __n, __c);"},
{"lineNum":" 2820","line":"        __sz += __n;"},
{"lineNum":" 2821","line":"        __set_size(__sz);"},
{"lineNum":" 2822","line":"        traits_type::assign(__p[__sz], value_type());"},
{"lineNum":" 2823","line":"    }"},
{"lineNum":" 2824","line":"    return *this;"},
{"lineNum":" 2825","line":"}"},
{"lineNum":" 2826","line":""},
{"lineNum":" 2827","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2828","line":"template<class _InputIterator>"},
{"lineNum":" 2829","line":"_EnableIf"},
{"lineNum":" 2830","line":"<"},
{"lineNum":" 2831","line":"   __is_exactly_cpp17_input_iterator<_InputIterator>::value,"},
{"lineNum":" 2832","line":"   typename basic_string<_CharT, _Traits, _Allocator>::iterator"},
{"lineNum":" 2833","line":">"},
{"lineNum":" 2834","line":"basic_string<_CharT, _Traits, _Allocator>::insert(const_iterator __pos, _InputIterator __first, _InputIterator __last)"},
{"lineNum":" 2835","line":"{"},
{"lineNum":" 2836","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2837","line":"    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__pos) == this,"},
{"lineNum":" 2838","line":"        \"string::insert(iterator, range) called with an iterator not\""},
{"lineNum":" 2839","line":"        \" referring to this string\");"},
{"lineNum":" 2840","line":"#endif"},
{"lineNum":" 2841","line":"    const basic_string __temp(__first, __last, __alloc());"},
{"lineNum":" 2842","line":"    return insert(__pos, __temp.data(), __temp.data() + __temp.size());"},
{"lineNum":" 2843","line":"}"},
{"lineNum":" 2844","line":""},
{"lineNum":" 2845","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2846","line":"template<class _ForwardIterator>"},
{"lineNum":" 2847","line":"_EnableIf"},
{"lineNum":" 2848","line":"<"},
{"lineNum":" 2849","line":"    __is_cpp17_forward_iterator<_ForwardIterator>::value,"},
{"lineNum":" 2850","line":"    typename basic_string<_CharT, _Traits, _Allocator>::iterator"},
{"lineNum":" 2851","line":">"},
{"lineNum":" 2852","line":"basic_string<_CharT, _Traits, _Allocator>::insert(const_iterator __pos, _ForwardIterator __first, _ForwardIterator __last)"},
{"lineNum":" 2853","line":"{"},
{"lineNum":" 2854","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2855","line":"    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__pos) == this,"},
{"lineNum":" 2856","line":"        \"string::insert(iterator, range) called with an iterator not\""},
{"lineNum":" 2857","line":"        \" referring to this string\");"},
{"lineNum":" 2858","line":"#endif"},
{"lineNum":" 2859","line":"    size_type __ip = static_cast<size_type>(__pos - begin());"},
{"lineNum":" 2860","line":"    size_type __n = static_cast<size_type>(_VSTD::distance(__first, __last));"},
{"lineNum":" 2861","line":"    if (__n)"},
{"lineNum":" 2862","line":"    {"},
{"lineNum":" 2863","line":"        if (__string_is_trivial_iterator<_ForwardIterator>::value &&"},
{"lineNum":" 2864","line":"            !__addr_in_range(*__first))"},
{"lineNum":" 2865","line":"        {"},
{"lineNum":" 2866","line":"            size_type __sz = size();"},
{"lineNum":" 2867","line":"            size_type __cap = capacity();"},
{"lineNum":" 2868","line":"            value_type* __p;"},
{"lineNum":" 2869","line":"            if (__cap - __sz >= __n)"},
{"lineNum":" 2870","line":"            {"},
{"lineNum":" 2871","line":"                __p = _VSTD::__to_address(__get_pointer());"},
{"lineNum":" 2872","line":"                size_type __n_move = __sz - __ip;"},
{"lineNum":" 2873","line":"                if (__n_move != 0)"},
{"lineNum":" 2874","line":"                    traits_type::move(__p + __ip + __n, __p + __ip, __n_move);"},
{"lineNum":" 2875","line":"            }"},
{"lineNum":" 2876","line":"            else"},
{"lineNum":" 2877","line":"            {"},
{"lineNum":" 2878","line":"                __grow_by(__cap, __sz + __n - __cap, __sz, __ip, 0, __n);"},
{"lineNum":" 2879","line":"                __p = _VSTD::__to_address(__get_long_pointer());"},
{"lineNum":" 2880","line":"            }"},
{"lineNum":" 2881","line":"            __sz += __n;"},
{"lineNum":" 2882","line":"            __set_size(__sz);"},
{"lineNum":" 2883","line":"            traits_type::assign(__p[__sz], value_type());"},
{"lineNum":" 2884","line":"            for (__p += __ip; __first != __last; ++__p, ++__first)"},
{"lineNum":" 2885","line":"                traits_type::assign(*__p, *__first);"},
{"lineNum":" 2886","line":"        }"},
{"lineNum":" 2887","line":"        else"},
{"lineNum":" 2888","line":"        {"},
{"lineNum":" 2889","line":"            const basic_string __temp(__first, __last, __alloc());"},
{"lineNum":" 2890","line":"            return insert(__pos, __temp.data(), __temp.data() + __temp.size());"},
{"lineNum":" 2891","line":"        }"},
{"lineNum":" 2892","line":"    }"},
{"lineNum":" 2893","line":"    return begin() + __ip;"},
{"lineNum":" 2894","line":"}"},
{"lineNum":" 2895","line":""},
{"lineNum":" 2896","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2897","line":"inline"},
{"lineNum":" 2898","line":"basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 2899","line":"basic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos1, const basic_string& __str)"},
{"lineNum":" 2900","line":"{"},
{"lineNum":" 2901","line":"    return insert(__pos1, __str.data(), __str.size());"},
{"lineNum":" 2902","line":"}"},
{"lineNum":" 2903","line":""},
{"lineNum":" 2904","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2905","line":"basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 2906","line":"basic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos1, const basic_string& __str,"},
{"lineNum":" 2907","line":"                                                  size_type __pos2, size_type __n)"},
{"lineNum":" 2908","line":"{"},
{"lineNum":" 2909","line":"    size_type __str_sz = __str.size();"},
{"lineNum":" 2910","line":"    if (__pos2 > __str_sz)"},
{"lineNum":" 2911","line":"        this->__throw_out_of_range();"},
{"lineNum":" 2912","line":"    return insert(__pos1, __str.data() + __pos2, _VSTD::min(__n, __str_sz - __pos2));"},
{"lineNum":" 2913","line":"}"},
{"lineNum":" 2914","line":""},
{"lineNum":" 2915","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2916","line":"template <class _Tp>"},
{"lineNum":" 2917","line":"_EnableIf"},
{"lineNum":" 2918","line":"<"},
{"lineNum":" 2919","line":"    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value  && !__is_same_uncvref<_Tp, basic_string<_CharT, _Traits, _Allocator> >::value,"},
{"lineNum":" 2920","line":"    basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 2921","line":">"},
{"lineNum":" 2922","line":"basic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos1, const _Tp& __t,"},
{"lineNum":" 2923","line":"                                                  size_type __pos2, size_type __n)"},
{"lineNum":" 2924","line":"{"},
{"lineNum":" 2925","line":"    __self_view __sv = __t;"},
{"lineNum":" 2926","line":"    size_type __str_sz = __sv.size();"},
{"lineNum":" 2927","line":"    if (__pos2 > __str_sz)"},
{"lineNum":" 2928","line":"        this->__throw_out_of_range();"},
{"lineNum":" 2929","line":"    return insert(__pos1, __sv.data() + __pos2, _VSTD::min(__n, __str_sz - __pos2));"},
{"lineNum":" 2930","line":"}"},
{"lineNum":" 2931","line":""},
{"lineNum":" 2932","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2933","line":"basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 2934","line":"basic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos, const value_type* __s)"},
{"lineNum":" 2935","line":"{"},
{"lineNum":" 2936","line":"    _LIBCPP_ASSERT(__s != nullptr, \"string::insert received nullptr\");"},
{"lineNum":" 2937","line":"    return insert(__pos, __s, traits_type::length(__s));"},
{"lineNum":" 2938","line":"}"},
{"lineNum":" 2939","line":""},
{"lineNum":" 2940","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2941","line":"typename basic_string<_CharT, _Traits, _Allocator>::iterator"},
{"lineNum":" 2942","line":"basic_string<_CharT, _Traits, _Allocator>::insert(const_iterator __pos, value_type __c)"},
{"lineNum":" 2943","line":"{"},
{"lineNum":" 2944","line":"    size_type __ip = static_cast<size_type>(__pos - begin());"},
{"lineNum":" 2945","line":"    size_type __sz = size();"},
{"lineNum":" 2946","line":"    size_type __cap = capacity();"},
{"lineNum":" 2947","line":"    value_type* __p;"},
{"lineNum":" 2948","line":"    if (__cap == __sz)"},
{"lineNum":" 2949","line":"    {"},
{"lineNum":" 2950","line":"        __grow_by(__cap, 1, __sz, __ip, 0, 1);"},
{"lineNum":" 2951","line":"        __p = _VSTD::__to_address(__get_long_pointer());"},
{"lineNum":" 2952","line":"    }"},
{"lineNum":" 2953","line":"    else"},
{"lineNum":" 2954","line":"    {"},
{"lineNum":" 2955","line":"        __p = _VSTD::__to_address(__get_pointer());"},
{"lineNum":" 2956","line":"        size_type __n_move = __sz - __ip;"},
{"lineNum":" 2957","line":"        if (__n_move != 0)"},
{"lineNum":" 2958","line":"            traits_type::move(__p + __ip + 1, __p + __ip, __n_move);"},
{"lineNum":" 2959","line":"    }"},
{"lineNum":" 2960","line":"    traits_type::assign(__p[__ip], __c);"},
{"lineNum":" 2961","line":"    traits_type::assign(__p[++__sz], value_type());"},
{"lineNum":" 2962","line":"    __set_size(__sz);"},
{"lineNum":" 2963","line":"    return begin() + static_cast<difference_type>(__ip);"},
{"lineNum":" 2964","line":"}"},
{"lineNum":" 2965","line":""},
{"lineNum":" 2966","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2967","line":"inline"},
{"lineNum":" 2968","line":"typename basic_string<_CharT, _Traits, _Allocator>::iterator"},
{"lineNum":" 2969","line":"basic_string<_CharT, _Traits, _Allocator>::insert(const_iterator __pos, size_type __n, value_type __c)"},
{"lineNum":" 2970","line":"{"},
{"lineNum":" 2971","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2972","line":"    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__pos) == this,"},
{"lineNum":" 2973","line":"        \"string::insert(iterator, n, value) called with an iterator not\""},
{"lineNum":" 2974","line":"        \" referring to this string\");"},
{"lineNum":" 2975","line":"#endif"},
{"lineNum":" 2976","line":"    difference_type __p = __pos - begin();"},
{"lineNum":" 2977","line":"    insert(static_cast<size_type>(__p), __n, __c);"},
{"lineNum":" 2978","line":"    return begin() + __p;"},
{"lineNum":" 2979","line":"}"},
{"lineNum":" 2980","line":""},
{"lineNum":" 2981","line":"// replace"},
{"lineNum":" 2982","line":""},
{"lineNum":" 2983","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 2984","line":"basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 2985","line":"basic_string<_CharT, _Traits, _Allocator>::replace(size_type __pos, size_type __n1, const value_type* __s, size_type __n2)"},
{"lineNum":" 2986","line":"    _LIBCPP_DISABLE_UBSAN_UNSIGNED_INTEGER_CHECK"},
{"lineNum":" 2987","line":"{"},
{"lineNum":" 2988","line":"    _LIBCPP_ASSERT(__n2 == 0 || __s != nullptr, \"string::replace received nullptr\");"},
{"lineNum":" 2989","line":"    size_type __sz = size();"},
{"lineNum":" 2990","line":"    if (__pos > __sz)"},
{"lineNum":" 2991","line":"        this->__throw_out_of_range();"},
{"lineNum":" 2992","line":"    __n1 = _VSTD::min(__n1, __sz - __pos);"},
{"lineNum":" 2993","line":"    size_type __cap = capacity();"},
{"lineNum":" 2994","line":"    if (__cap - __sz + __n1 >= __n2)"},
{"lineNum":" 2995","line":"    {"},
{"lineNum":" 2996","line":"        value_type* __p = _VSTD::__to_address(__get_pointer());"},
{"lineNum":" 2997","line":"        if (__n1 != __n2)"},
{"lineNum":" 2998","line":"        {"},
{"lineNum":" 2999","line":"            size_type __n_move = __sz - __pos - __n1;"},
{"lineNum":" 3000","line":"            if (__n_move != 0)"},
{"lineNum":" 3001","line":"            {"},
{"lineNum":" 3002","line":"                if (__n1 > __n2)"},
{"lineNum":" 3003","line":"                {"},
{"lineNum":" 3004","line":"                    traits_type::move(__p + __pos, __s, __n2);"},
{"lineNum":" 3005","line":"                    traits_type::move(__p + __pos + __n2, __p + __pos + __n1, __n_move);"},
{"lineNum":" 3006","line":"                    goto __finish;"},
{"lineNum":" 3007","line":"                }"},
{"lineNum":" 3008","line":"                if (__p + __pos < __s && __s < __p + __sz)"},
{"lineNum":" 3009","line":"                {"},
{"lineNum":" 3010","line":"                    if (__p + __pos + __n1 <= __s)"},
{"lineNum":" 3011","line":"                        __s += __n2 - __n1;"},
{"lineNum":" 3012","line":"                    else // __p + __pos < __s < __p + __pos + __n1"},
{"lineNum":" 3013","line":"                    {"},
{"lineNum":" 3014","line":"                        traits_type::move(__p + __pos, __s, __n1);"},
{"lineNum":" 3015","line":"                        __pos += __n1;"},
{"lineNum":" 3016","line":"                        __s += __n2;"},
{"lineNum":" 3017","line":"                        __n2 -= __n1;"},
{"lineNum":" 3018","line":"                        __n1 = 0;"},
{"lineNum":" 3019","line":"                    }"},
{"lineNum":" 3020","line":"                }"},
{"lineNum":" 3021","line":"                traits_type::move(__p + __pos + __n2, __p + __pos + __n1, __n_move);"},
{"lineNum":" 3022","line":"            }"},
{"lineNum":" 3023","line":"        }"},
{"lineNum":" 3024","line":"        traits_type::move(__p + __pos, __s, __n2);"},
{"lineNum":" 3025","line":"__finish:"},
{"lineNum":" 3026","line":"// __sz += __n2 - __n1; in this and the below function below can cause unsigned"},
{"lineNum":" 3027","line":"// integer overflow, but this is a safe operation, so we disable the check."},
{"lineNum":" 3028","line":"        __sz += __n2 - __n1;"},
{"lineNum":" 3029","line":"        __set_size(__sz);"},
{"lineNum":" 3030","line":"        __invalidate_iterators_past(__sz);"},
{"lineNum":" 3031","line":"        traits_type::assign(__p[__sz], value_type());"},
{"lineNum":" 3032","line":"    }"},
{"lineNum":" 3033","line":"    else"},
{"lineNum":" 3034","line":"        __grow_by_and_replace(__cap, __sz - __n1 + __n2 - __cap, __sz, __pos, __n1, __n2, __s);"},
{"lineNum":" 3035","line":"    return *this;"},
{"lineNum":" 3036","line":"}"},
{"lineNum":" 3037","line":""},
{"lineNum":" 3038","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3039","line":"basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 3040","line":"basic_string<_CharT, _Traits, _Allocator>::replace(size_type __pos, size_type __n1, size_type __n2, value_type __c)"},
{"lineNum":" 3041","line":"    _LIBCPP_DISABLE_UBSAN_UNSIGNED_INTEGER_CHECK"},
{"lineNum":" 3042","line":"{"},
{"lineNum":" 3043","line":"    size_type __sz = size();"},
{"lineNum":" 3044","line":"    if (__pos > __sz)"},
{"lineNum":" 3045","line":"        this->__throw_out_of_range();"},
{"lineNum":" 3046","line":"    __n1 = _VSTD::min(__n1, __sz - __pos);"},
{"lineNum":" 3047","line":"    size_type __cap = capacity();"},
{"lineNum":" 3048","line":"    value_type* __p;"},
{"lineNum":" 3049","line":"    if (__cap - __sz + __n1 >= __n2)"},
{"lineNum":" 3050","line":"    {"},
{"lineNum":" 3051","line":"        __p = _VSTD::__to_address(__get_pointer());"},
{"lineNum":" 3052","line":"        if (__n1 != __n2)"},
{"lineNum":" 3053","line":"        {"},
{"lineNum":" 3054","line":"            size_type __n_move = __sz - __pos - __n1;"},
{"lineNum":" 3055","line":"            if (__n_move != 0)"},
{"lineNum":" 3056","line":"                traits_type::move(__p + __pos + __n2, __p + __pos + __n1, __n_move);"},
{"lineNum":" 3057","line":"        }"},
{"lineNum":" 3058","line":"    }"},
{"lineNum":" 3059","line":"    else"},
{"lineNum":" 3060","line":"    {"},
{"lineNum":" 3061","line":"        __grow_by(__cap, __sz - __n1 + __n2 - __cap, __sz, __pos, __n1, __n2);"},
{"lineNum":" 3062","line":"        __p = _VSTD::__to_address(__get_long_pointer());"},
{"lineNum":" 3063","line":"    }"},
{"lineNum":" 3064","line":"    traits_type::assign(__p + __pos, __n2, __c);"},
{"lineNum":" 3065","line":"    __sz += __n2 - __n1;"},
{"lineNum":" 3066","line":"    __set_size(__sz);"},
{"lineNum":" 3067","line":"    __invalidate_iterators_past(__sz);"},
{"lineNum":" 3068","line":"    traits_type::assign(__p[__sz], value_type());"},
{"lineNum":" 3069","line":"    return *this;"},
{"lineNum":" 3070","line":"}"},
{"lineNum":" 3071","line":""},
{"lineNum":" 3072","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3073","line":"template<class _InputIterator>"},
{"lineNum":" 3074","line":"_EnableIf"},
{"lineNum":" 3075","line":"<"},
{"lineNum":" 3076","line":"    __is_cpp17_input_iterator<_InputIterator>::value,"},
{"lineNum":" 3077","line":"    basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 3078","line":">"},
{"lineNum":" 3079","line":"basic_string<_CharT, _Traits, _Allocator>::replace(const_iterator __i1, const_iterator __i2,"},
{"lineNum":" 3080","line":"                                                   _InputIterator __j1, _InputIterator __j2)"},
{"lineNum":" 3081","line":"{"},
{"lineNum":" 3082","line":"    const basic_string __temp(__j1, __j2, __alloc());"},
{"lineNum":" 3083","line":"    return this->replace(__i1, __i2, __temp);"},
{"lineNum":" 3084","line":"}"},
{"lineNum":" 3085","line":""},
{"lineNum":" 3086","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3087","line":"inline"},
{"lineNum":" 3088","line":"basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 3089","line":"basic_string<_CharT, _Traits, _Allocator>::replace(size_type __pos1, size_type __n1, const basic_string& __str)"},
{"lineNum":" 3090","line":"{"},
{"lineNum":" 3091","line":"    return replace(__pos1, __n1, __str.data(), __str.size());"},
{"lineNum":" 3092","line":"}"},
{"lineNum":" 3093","line":""},
{"lineNum":" 3094","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3095","line":"basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 3096","line":"basic_string<_CharT, _Traits, _Allocator>::replace(size_type __pos1, size_type __n1, const basic_string& __str,"},
{"lineNum":" 3097","line":"                                                   size_type __pos2, size_type __n2)"},
{"lineNum":" 3098","line":"{"},
{"lineNum":" 3099","line":"    size_type __str_sz = __str.size();"},
{"lineNum":" 3100","line":"    if (__pos2 > __str_sz)"},
{"lineNum":" 3101","line":"        this->__throw_out_of_range();"},
{"lineNum":" 3102","line":"    return replace(__pos1, __n1, __str.data() + __pos2, _VSTD::min(__n2, __str_sz - __pos2));"},
{"lineNum":" 3103","line":"}"},
{"lineNum":" 3104","line":""},
{"lineNum":" 3105","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3106","line":"template <class _Tp>"},
{"lineNum":" 3107","line":"_EnableIf"},
{"lineNum":" 3108","line":"<"},
{"lineNum":" 3109","line":"    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value && !__is_same_uncvref<_Tp, basic_string<_CharT, _Traits, _Allocator> >::value,"},
{"lineNum":" 3110","line":"    basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 3111","line":">"},
{"lineNum":" 3112","line":"basic_string<_CharT, _Traits, _Allocator>::replace(size_type __pos1, size_type __n1, const _Tp& __t,"},
{"lineNum":" 3113","line":"                                                   size_type __pos2, size_type __n2)"},
{"lineNum":" 3114","line":"{"},
{"lineNum":" 3115","line":"    __self_view __sv = __t;"},
{"lineNum":" 3116","line":"    size_type __str_sz = __sv.size();"},
{"lineNum":" 3117","line":"    if (__pos2 > __str_sz)"},
{"lineNum":" 3118","line":"        this->__throw_out_of_range();"},
{"lineNum":" 3119","line":"    return replace(__pos1, __n1, __sv.data() + __pos2, _VSTD::min(__n2, __str_sz - __pos2));"},
{"lineNum":" 3120","line":"}"},
{"lineNum":" 3121","line":""},
{"lineNum":" 3122","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3123","line":"basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 3124","line":"basic_string<_CharT, _Traits, _Allocator>::replace(size_type __pos, size_type __n1, const value_type* __s)"},
{"lineNum":" 3125","line":"{"},
{"lineNum":" 3126","line":"    _LIBCPP_ASSERT(__s != nullptr, \"string::replace received nullptr\");"},
{"lineNum":" 3127","line":"    return replace(__pos, __n1, __s, traits_type::length(__s));"},
{"lineNum":" 3128","line":"}"},
{"lineNum":" 3129","line":""},
{"lineNum":" 3130","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3131","line":"inline"},
{"lineNum":" 3132","line":"basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 3133","line":"basic_string<_CharT, _Traits, _Allocator>::replace(const_iterator __i1, const_iterator __i2, const basic_string& __str)"},
{"lineNum":" 3134","line":"{"},
{"lineNum":" 3135","line":"    return replace(static_cast<size_type>(__i1 - begin()), static_cast<size_type>(__i2 - __i1),"},
{"lineNum":" 3136","line":"                   __str.data(), __str.size());"},
{"lineNum":" 3137","line":"}"},
{"lineNum":" 3138","line":""},
{"lineNum":" 3139","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3140","line":"inline"},
{"lineNum":" 3141","line":"basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 3142","line":"basic_string<_CharT, _Traits, _Allocator>::replace(const_iterator __i1, const_iterator __i2, const value_type* __s, size_type __n)"},
{"lineNum":" 3143","line":"{"},
{"lineNum":" 3144","line":"    return replace(static_cast<size_type>(__i1 - begin()), static_cast<size_type>(__i2 - __i1), __s, __n);"},
{"lineNum":" 3145","line":"}"},
{"lineNum":" 3146","line":""},
{"lineNum":" 3147","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3148","line":"inline"},
{"lineNum":" 3149","line":"basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 3150","line":"basic_string<_CharT, _Traits, _Allocator>::replace(const_iterator __i1, const_iterator __i2, const value_type* __s)"},
{"lineNum":" 3151","line":"{"},
{"lineNum":" 3152","line":"    return replace(static_cast<size_type>(__i1 - begin()), static_cast<size_type>(__i2 - __i1), __s);"},
{"lineNum":" 3153","line":"}"},
{"lineNum":" 3154","line":""},
{"lineNum":" 3155","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3156","line":"inline"},
{"lineNum":" 3157","line":"basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 3158","line":"basic_string<_CharT, _Traits, _Allocator>::replace(const_iterator __i1, const_iterator __i2, size_type __n, value_type __c)"},
{"lineNum":" 3159","line":"{"},
{"lineNum":" 3160","line":"    return replace(static_cast<size_type>(__i1 - begin()), static_cast<size_type>(__i2 - __i1), __n, __c);"},
{"lineNum":" 3161","line":"}"},
{"lineNum":" 3162","line":""},
{"lineNum":" 3163","line":"// erase"},
{"lineNum":" 3164","line":""},
{"lineNum":" 3165","line":"// \'externally instantiated\' erase() implementation, called when __n != npos."},
{"lineNum":" 3166","line":"// Does not check __pos against size()"},
{"lineNum":" 3167","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3168","line":"void"},
{"lineNum":" 3169","line":"basic_string<_CharT, _Traits, _Allocator>::__erase_external_with_move("},
{"lineNum":" 3170","line":"    size_type __pos, size_type __n)"},
{"lineNum":" 3171","line":"{"},
{"lineNum":" 3172","line":"    if (__n)"},
{"lineNum":" 3173","line":"    {"},
{"lineNum":" 3174","line":"        size_type __sz = size();"},
{"lineNum":" 3175","line":"        value_type* __p = _VSTD::__to_address(__get_pointer());"},
{"lineNum":" 3176","line":"        __n = _VSTD::min(__n, __sz - __pos);"},
{"lineNum":" 3177","line":"        size_type __n_move = __sz - __pos - __n;"},
{"lineNum":" 3178","line":"        if (__n_move != 0)"},
{"lineNum":" 3179","line":"            traits_type::move(__p + __pos, __p + __pos + __n, __n_move);"},
{"lineNum":" 3180","line":"        __sz -= __n;"},
{"lineNum":" 3181","line":"        __set_size(__sz);"},
{"lineNum":" 3182","line":"        __invalidate_iterators_past(__sz);"},
{"lineNum":" 3183","line":"        traits_type::assign(__p[__sz], value_type());"},
{"lineNum":" 3184","line":"    }"},
{"lineNum":" 3185","line":"}"},
{"lineNum":" 3186","line":""},
{"lineNum":" 3187","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3188","line":"basic_string<_CharT, _Traits, _Allocator>&"},
{"lineNum":" 3189","line":"basic_string<_CharT, _Traits, _Allocator>::erase(size_type __pos,"},
{"lineNum":" 3190","line":"                                                 size_type __n) {"},
{"lineNum":" 3191","line":"  if (__pos > size()) this->__throw_out_of_range();"},
{"lineNum":" 3192","line":"  if (__n == npos) {"},
{"lineNum":" 3193","line":"    __erase_to_end(__pos);"},
{"lineNum":" 3194","line":"  } else {"},
{"lineNum":" 3195","line":"    __erase_external_with_move(__pos, __n);"},
{"lineNum":" 3196","line":"  }"},
{"lineNum":" 3197","line":"  return *this;"},
{"lineNum":" 3198","line":"}"},
{"lineNum":" 3199","line":""},
{"lineNum":" 3200","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3201","line":"inline"},
{"lineNum":" 3202","line":"typename basic_string<_CharT, _Traits, _Allocator>::iterator"},
{"lineNum":" 3203","line":"basic_string<_CharT, _Traits, _Allocator>::erase(const_iterator __pos)"},
{"lineNum":" 3204","line":"{"},
{"lineNum":" 3205","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 3206","line":"    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__pos) == this,"},
{"lineNum":" 3207","line":"        \"string::erase(iterator) called with an iterator not\""},
{"lineNum":" 3208","line":"        \" referring to this string\");"},
{"lineNum":" 3209","line":"#endif"},
{"lineNum":" 3210","line":"    _LIBCPP_ASSERT(__pos != end(),"},
{"lineNum":" 3211","line":"        \"string::erase(iterator) called with a non-dereferenceable iterator\");"},
{"lineNum":" 3212","line":"    iterator __b = begin();"},
{"lineNum":" 3213","line":"    size_type __r = static_cast<size_type>(__pos - __b);"},
{"lineNum":" 3214","line":"    erase(__r, 1);"},
{"lineNum":" 3215","line":"    return __b + static_cast<difference_type>(__r);"},
{"lineNum":" 3216","line":"}"},
{"lineNum":" 3217","line":""},
{"lineNum":" 3218","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3219","line":"inline"},
{"lineNum":" 3220","line":"typename basic_string<_CharT, _Traits, _Allocator>::iterator"},
{"lineNum":" 3221","line":"basic_string<_CharT, _Traits, _Allocator>::erase(const_iterator __first, const_iterator __last)"},
{"lineNum":" 3222","line":"{"},
{"lineNum":" 3223","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 3224","line":"    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__first) == this,"},
{"lineNum":" 3225","line":"        \"string::erase(iterator,  iterator) called with an iterator not\""},
{"lineNum":" 3226","line":"        \" referring to this string\");"},
{"lineNum":" 3227","line":"#endif"},
{"lineNum":" 3228","line":"    _LIBCPP_ASSERT(__first <= __last, \"string::erase(first, last) called with invalid range\");"},
{"lineNum":" 3229","line":"    iterator __b = begin();"},
{"lineNum":" 3230","line":"    size_type __r = static_cast<size_type>(__first - __b);"},
{"lineNum":" 3231","line":"    erase(__r, static_cast<size_type>(__last - __first));"},
{"lineNum":" 3232","line":"    return __b + static_cast<difference_type>(__r);"},
{"lineNum":" 3233","line":"}"},
{"lineNum":" 3234","line":""},
{"lineNum":" 3235","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3236","line":"inline"},
{"lineNum":" 3237","line":"void"},
{"lineNum":" 3238","line":"basic_string<_CharT, _Traits, _Allocator>::pop_back()"},
{"lineNum":" 3239","line":"{"},
{"lineNum":" 3240","line":"    _LIBCPP_ASSERT(!empty(), \"string::pop_back(): string is already empty\");"},
{"lineNum":" 3241","line":"    size_type __sz;"},
{"lineNum":" 3242","line":"    if (__is_long())"},
{"lineNum":" 3243","line":"    {"},
{"lineNum":" 3244","line":"        __sz = __get_long_size() - 1;"},
{"lineNum":" 3245","line":"        __set_long_size(__sz);"},
{"lineNum":" 3246","line":"        traits_type::assign(*(__get_long_pointer() + __sz), value_type());"},
{"lineNum":" 3247","line":"    }"},
{"lineNum":" 3248","line":"    else"},
{"lineNum":" 3249","line":"    {"},
{"lineNum":" 3250","line":"        __sz = __get_short_size() - 1;"},
{"lineNum":" 3251","line":"        __set_short_size(__sz);"},
{"lineNum":" 3252","line":"        traits_type::assign(*(__get_short_pointer() + __sz), value_type());"},
{"lineNum":" 3253","line":"    }"},
{"lineNum":" 3254","line":"    __invalidate_iterators_past(__sz);"},
{"lineNum":" 3255","line":"}"},
{"lineNum":" 3256","line":""},
{"lineNum":" 3257","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3258","line":"inline"},
{"lineNum":" 3259","line":"void"},
{"lineNum":" 3260","line":"basic_string<_CharT, _Traits, _Allocator>::clear() _NOEXCEPT"},
{"lineNum":" 3261","line":"{"},
{"lineNum":" 3262","line":"    __invalidate_all_iterators();"},
{"lineNum":" 3263","line":"    if (__is_long())","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 3264","line":"    {"},
{"lineNum":" 3265","line":"        traits_type::assign(*__get_long_pointer(), value_type());"},
{"lineNum":" 3266","line":"        __set_long_size(0);"},
{"lineNum":" 3267","line":"    }"},
{"lineNum":" 3268","line":"    else"},
{"lineNum":" 3269","line":"    {"},
{"lineNum":" 3270","line":"        traits_type::assign(*__get_short_pointer(), value_type());"},
{"lineNum":" 3271","line":"        __set_short_size(0);"},
{"lineNum":" 3272","line":"    }"},
{"lineNum":" 3273","line":"}"},
{"lineNum":" 3274","line":""},
{"lineNum":" 3275","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3276","line":"inline"},
{"lineNum":" 3277","line":"void"},
{"lineNum":" 3278","line":"basic_string<_CharT, _Traits, _Allocator>::__erase_to_end(size_type __pos)"},
{"lineNum":" 3279","line":"{"},
{"lineNum":" 3280","line":"    if (__is_long())"},
{"lineNum":" 3281","line":"    {"},
{"lineNum":" 3282","line":"        traits_type::assign(*(__get_long_pointer() + __pos), value_type());"},
{"lineNum":" 3283","line":"        __set_long_size(__pos);"},
{"lineNum":" 3284","line":"    }"},
{"lineNum":" 3285","line":"    else"},
{"lineNum":" 3286","line":"    {"},
{"lineNum":" 3287","line":"        traits_type::assign(*(__get_short_pointer() + __pos), value_type());"},
{"lineNum":" 3288","line":"        __set_short_size(__pos);"},
{"lineNum":" 3289","line":"    }"},
{"lineNum":" 3290","line":"    __invalidate_iterators_past(__pos);"},
{"lineNum":" 3291","line":"}"},
{"lineNum":" 3292","line":""},
{"lineNum":" 3293","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3294","line":"void"},
{"lineNum":" 3295","line":"basic_string<_CharT, _Traits, _Allocator>::resize(size_type __n, value_type __c)"},
{"lineNum":" 3296","line":"{"},
{"lineNum":" 3297","line":"    size_type __sz = size();"},
{"lineNum":" 3298","line":"    if (__n > __sz)"},
{"lineNum":" 3299","line":"        append(__n - __sz, __c);"},
{"lineNum":" 3300","line":"    else"},
{"lineNum":" 3301","line":"        __erase_to_end(__n);"},
{"lineNum":" 3302","line":"}"},
{"lineNum":" 3303","line":""},
{"lineNum":" 3304","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3305","line":"inline void"},
{"lineNum":" 3306","line":"basic_string<_CharT, _Traits, _Allocator>::__resize_default_init(size_type __n)"},
{"lineNum":" 3307","line":"{"},
{"lineNum":" 3308","line":"    size_type __sz = size();"},
{"lineNum":" 3309","line":"    if (__n > __sz) {"},
{"lineNum":" 3310","line":"       __append_default_init(__n - __sz);"},
{"lineNum":" 3311","line":"    } else"},
{"lineNum":" 3312","line":"        __erase_to_end(__n);"},
{"lineNum":" 3313","line":"}"},
{"lineNum":" 3314","line":""},
{"lineNum":" 3315","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3316","line":"inline"},
{"lineNum":" 3317","line":"typename basic_string<_CharT, _Traits, _Allocator>::size_type"},
{"lineNum":" 3318","line":"basic_string<_CharT, _Traits, _Allocator>::max_size() const _NOEXCEPT"},
{"lineNum":" 3319","line":"{"},
{"lineNum":" 3320","line":"    size_type __m = __alloc_traits::max_size(__alloc());"},
{"lineNum":" 3321","line":"#ifdef _LIBCPP_BIG_ENDIAN"},
{"lineNum":" 3322","line":"    return (__m <= ~__long_mask ? __m : __m/2) - __alignment;"},
{"lineNum":" 3323","line":"#else"},
{"lineNum":" 3324","line":"    return __m - __alignment;"},
{"lineNum":" 3325","line":"#endif"},
{"lineNum":" 3326","line":"}"},
{"lineNum":" 3327","line":""},
{"lineNum":" 3328","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3329","line":"void"},
{"lineNum":" 3330","line":"basic_string<_CharT, _Traits, _Allocator>::reserve(size_type __requested_capacity)"},
{"lineNum":" 3331","line":"{"},
{"lineNum":" 3332","line":"    if (__requested_capacity > max_size())"},
{"lineNum":" 3333","line":"        this->__throw_length_error();"},
{"lineNum":" 3334","line":""},
{"lineNum":" 3335","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":" 3336","line":"    // Reserve never shrinks as of C++20."},
{"lineNum":" 3337","line":"    if (__requested_capacity <= capacity()) return;"},
{"lineNum":" 3338","line":"#endif"},
{"lineNum":" 3339","line":""},
{"lineNum":" 3340","line":"    size_type __target_capacity = _VSTD::max(__requested_capacity, size());"},
{"lineNum":" 3341","line":"    __target_capacity = __recommend(__target_capacity);"},
{"lineNum":" 3342","line":"    if (__target_capacity == capacity()) return;"},
{"lineNum":" 3343","line":""},
{"lineNum":" 3344","line":"    __shrink_or_extend(__target_capacity);"},
{"lineNum":" 3345","line":"}"},
{"lineNum":" 3346","line":""},
{"lineNum":" 3347","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3348","line":"void"},
{"lineNum":" 3349","line":"basic_string<_CharT, _Traits, _Allocator>::shrink_to_fit() _NOEXCEPT"},
{"lineNum":" 3350","line":"{"},
{"lineNum":" 3351","line":"    size_type __target_capacity = __recommend(size());"},
{"lineNum":" 3352","line":"    if (__target_capacity == capacity()) return;"},
{"lineNum":" 3353","line":""},
{"lineNum":" 3354","line":"    __shrink_or_extend(__target_capacity);"},
{"lineNum":" 3355","line":"}"},
{"lineNum":" 3356","line":""},
{"lineNum":" 3357","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3358","line":"void"},
{"lineNum":" 3359","line":"basic_string<_CharT, _Traits, _Allocator>::__shrink_or_extend(size_type __target_capacity)"},
{"lineNum":" 3360","line":"{"},
{"lineNum":" 3361","line":"    size_type __cap = capacity();"},
{"lineNum":" 3362","line":"    size_type __sz = size();"},
{"lineNum":" 3363","line":""},
{"lineNum":" 3364","line":"    pointer __new_data, __p;"},
{"lineNum":" 3365","line":"    bool __was_long, __now_long;"},
{"lineNum":" 3366","line":"    if (__target_capacity == __min_cap - 1)"},
{"lineNum":" 3367","line":"    {"},
{"lineNum":" 3368","line":"        __was_long = true;"},
{"lineNum":" 3369","line":"        __now_long = false;"},
{"lineNum":" 3370","line":"        __new_data = __get_short_pointer();"},
{"lineNum":" 3371","line":"        __p = __get_long_pointer();"},
{"lineNum":" 3372","line":"    }"},
{"lineNum":" 3373","line":"    else"},
{"lineNum":" 3374","line":"    {"},
{"lineNum":" 3375","line":"        if (__target_capacity > __cap)"},
{"lineNum":" 3376","line":"            __new_data = __alloc_traits::allocate(__alloc(), __target_capacity+1);"},
{"lineNum":" 3377","line":"        else"},
{"lineNum":" 3378","line":"        {"},
{"lineNum":" 3379","line":"        #ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 3380","line":"            try"},
{"lineNum":" 3381","line":"            {"},
{"lineNum":" 3382","line":"        #endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 3383","line":"                __new_data = __alloc_traits::allocate(__alloc(), __target_capacity+1);"},
{"lineNum":" 3384","line":"        #ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 3385","line":"            }"},
{"lineNum":" 3386","line":"            catch (...)"},
{"lineNum":" 3387","line":"            {"},
{"lineNum":" 3388","line":"                return;"},
{"lineNum":" 3389","line":"            }"},
{"lineNum":" 3390","line":"        #else  // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 3391","line":"            if (__new_data == nullptr)"},
{"lineNum":" 3392","line":"                return;"},
{"lineNum":" 3393","line":"        #endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 3394","line":"        }"},
{"lineNum":" 3395","line":"        __now_long = true;"},
{"lineNum":" 3396","line":"        __was_long = __is_long();"},
{"lineNum":" 3397","line":"        __p = __get_pointer();"},
{"lineNum":" 3398","line":"    }"},
{"lineNum":" 3399","line":"    traits_type::copy(_VSTD::__to_address(__new_data),"},
{"lineNum":" 3400","line":"                        _VSTD::__to_address(__p), size()+1);"},
{"lineNum":" 3401","line":"    if (__was_long)"},
{"lineNum":" 3402","line":"        __alloc_traits::deallocate(__alloc(), __p, __cap+1);"},
{"lineNum":" 3403","line":"    if (__now_long)"},
{"lineNum":" 3404","line":"    {"},
{"lineNum":" 3405","line":"        __set_long_cap(__target_capacity+1);"},
{"lineNum":" 3406","line":"        __set_long_size(__sz);"},
{"lineNum":" 3407","line":"        __set_long_pointer(__new_data);"},
{"lineNum":" 3408","line":"    }"},
{"lineNum":" 3409","line":"    else"},
{"lineNum":" 3410","line":"        __set_short_size(__sz);"},
{"lineNum":" 3411","line":"    __invalidate_all_iterators();"},
{"lineNum":" 3412","line":"}"},
{"lineNum":" 3413","line":""},
{"lineNum":" 3414","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3415","line":"inline"},
{"lineNum":" 3416","line":"typename basic_string<_CharT, _Traits, _Allocator>::const_reference"},
{"lineNum":" 3417","line":"basic_string<_CharT, _Traits, _Allocator>::operator[](size_type __pos) const _NOEXCEPT"},
{"lineNum":" 3418","line":"{"},
{"lineNum":" 3419","line":"    _LIBCPP_ASSERT(__pos <= size(), \"string index out of bounds\");"},
{"lineNum":" 3420","line":"    return *(data() + __pos);"},
{"lineNum":" 3421","line":"}"},
{"lineNum":" 3422","line":""},
{"lineNum":" 3423","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3424","line":"inline"},
{"lineNum":" 3425","line":"typename basic_string<_CharT, _Traits, _Allocator>::reference"},
{"lineNum":" 3426","line":"basic_string<_CharT, _Traits, _Allocator>::operator[](size_type __pos) _NOEXCEPT"},
{"lineNum":" 3427","line":"{"},
{"lineNum":" 3428","line":"    _LIBCPP_ASSERT(__pos <= size(), \"string index out of bounds\");"},
{"lineNum":" 3429","line":"    return *(__get_pointer() + __pos);","class":"lineNoCov","hits":"0","possible_hits":"46",},
{"lineNum":" 3430","line":"}"},
{"lineNum":" 3431","line":""},
{"lineNum":" 3432","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3433","line":"typename basic_string<_CharT, _Traits, _Allocator>::const_reference"},
{"lineNum":" 3434","line":"basic_string<_CharT, _Traits, _Allocator>::at(size_type __n) const"},
{"lineNum":" 3435","line":"{"},
{"lineNum":" 3436","line":"    if (__n >= size())"},
{"lineNum":" 3437","line":"        this->__throw_out_of_range();"},
{"lineNum":" 3438","line":"    return (*this)[__n];"},
{"lineNum":" 3439","line":"}"},
{"lineNum":" 3440","line":""},
{"lineNum":" 3441","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3442","line":"typename basic_string<_CharT, _Traits, _Allocator>::reference"},
{"lineNum":" 3443","line":"basic_string<_CharT, _Traits, _Allocator>::at(size_type __n)"},
{"lineNum":" 3444","line":"{"},
{"lineNum":" 3445","line":"    if (__n >= size())"},
{"lineNum":" 3446","line":"        this->__throw_out_of_range();"},
{"lineNum":" 3447","line":"    return (*this)[__n];"},
{"lineNum":" 3448","line":"}"},
{"lineNum":" 3449","line":""},
{"lineNum":" 3450","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3451","line":"inline"},
{"lineNum":" 3452","line":"typename basic_string<_CharT, _Traits, _Allocator>::reference"},
{"lineNum":" 3453","line":"basic_string<_CharT, _Traits, _Allocator>::front() _NOEXCEPT"},
{"lineNum":" 3454","line":"{"},
{"lineNum":" 3455","line":"    _LIBCPP_ASSERT(!empty(), \"string::front(): string is empty\");"},
{"lineNum":" 3456","line":"    return *__get_pointer();"},
{"lineNum":" 3457","line":"}"},
{"lineNum":" 3458","line":""},
{"lineNum":" 3459","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3460","line":"inline"},
{"lineNum":" 3461","line":"typename basic_string<_CharT, _Traits, _Allocator>::const_reference"},
{"lineNum":" 3462","line":"basic_string<_CharT, _Traits, _Allocator>::front() const _NOEXCEPT"},
{"lineNum":" 3463","line":"{"},
{"lineNum":" 3464","line":"    _LIBCPP_ASSERT(!empty(), \"string::front(): string is empty\");"},
{"lineNum":" 3465","line":"    return *data();"},
{"lineNum":" 3466","line":"}"},
{"lineNum":" 3467","line":""},
{"lineNum":" 3468","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3469","line":"inline"},
{"lineNum":" 3470","line":"typename basic_string<_CharT, _Traits, _Allocator>::reference"},
{"lineNum":" 3471","line":"basic_string<_CharT, _Traits, _Allocator>::back() _NOEXCEPT"},
{"lineNum":" 3472","line":"{"},
{"lineNum":" 3473","line":"    _LIBCPP_ASSERT(!empty(), \"string::back(): string is empty\");"},
{"lineNum":" 3474","line":"    return *(__get_pointer() + size() - 1);"},
{"lineNum":" 3475","line":"}"},
{"lineNum":" 3476","line":""},
{"lineNum":" 3477","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3478","line":"inline"},
{"lineNum":" 3479","line":"typename basic_string<_CharT, _Traits, _Allocator>::const_reference"},
{"lineNum":" 3480","line":"basic_string<_CharT, _Traits, _Allocator>::back() const _NOEXCEPT"},
{"lineNum":" 3481","line":"{"},
{"lineNum":" 3482","line":"    _LIBCPP_ASSERT(!empty(), \"string::back(): string is empty\");"},
{"lineNum":" 3483","line":"    return *(data() + size() - 1);"},
{"lineNum":" 3484","line":"}"},
{"lineNum":" 3485","line":""},
{"lineNum":" 3486","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3487","line":"typename basic_string<_CharT, _Traits, _Allocator>::size_type"},
{"lineNum":" 3488","line":"basic_string<_CharT, _Traits, _Allocator>::copy(value_type* __s, size_type __n, size_type __pos) const"},
{"lineNum":" 3489","line":"{"},
{"lineNum":" 3490","line":"    size_type __sz = size();"},
{"lineNum":" 3491","line":"    if (__pos > __sz)"},
{"lineNum":" 3492","line":"        this->__throw_out_of_range();"},
{"lineNum":" 3493","line":"    size_type __rlen = _VSTD::min(__n, __sz - __pos);"},
{"lineNum":" 3494","line":"    traits_type::copy(__s, data() + __pos, __rlen);"},
{"lineNum":" 3495","line":"    return __rlen;"},
{"lineNum":" 3496","line":"}"},
{"lineNum":" 3497","line":""},
{"lineNum":" 3498","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3499","line":"inline"},
{"lineNum":" 3500","line":"basic_string<_CharT, _Traits, _Allocator>"},
{"lineNum":" 3501","line":"basic_string<_CharT, _Traits, _Allocator>::substr(size_type __pos, size_type __n) const"},
{"lineNum":" 3502","line":"{"},
{"lineNum":" 3503","line":"    return basic_string(*this, __pos, __n, __alloc());","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":" 3504","line":"}"},
{"lineNum":" 3505","line":""},
{"lineNum":" 3506","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3507","line":"inline"},
{"lineNum":" 3508","line":"void"},
{"lineNum":" 3509","line":"basic_string<_CharT, _Traits, _Allocator>::swap(basic_string& __str)"},
{"lineNum":" 3510","line":"#if _LIBCPP_STD_VER >= 14"},
{"lineNum":" 3511","line":"        _NOEXCEPT"},
{"lineNum":" 3512","line":"#else"},
{"lineNum":" 3513","line":"        _NOEXCEPT_(!__alloc_traits::propagate_on_container_swap::value ||"},
{"lineNum":" 3514","line":"                    __is_nothrow_swappable<allocator_type>::value)"},
{"lineNum":" 3515","line":"#endif"},
{"lineNum":" 3516","line":"{"},
{"lineNum":" 3517","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 3518","line":"    if (!__is_long())"},
{"lineNum":" 3519","line":"        __get_db()->__invalidate_all(this);"},
{"lineNum":" 3520","line":"    if (!__str.__is_long())"},
{"lineNum":" 3521","line":"        __get_db()->__invalidate_all(&__str);"},
{"lineNum":" 3522","line":"    __get_db()->swap(this, &__str);"},
{"lineNum":" 3523","line":"#endif"},
{"lineNum":" 3524","line":"    _LIBCPP_ASSERT("},
{"lineNum":" 3525","line":"        __alloc_traits::propagate_on_container_swap::value ||"},
{"lineNum":" 3526","line":"        __alloc_traits::is_always_equal::value ||"},
{"lineNum":" 3527","line":"        __alloc() == __str.__alloc(), \"swapping non-equal allocators\");"},
{"lineNum":" 3528","line":"    _VSTD::swap(__r_.first(), __str.__r_.first());"},
{"lineNum":" 3529","line":"    _VSTD::__swap_allocator(__alloc(), __str.__alloc());"},
{"lineNum":" 3530","line":"}"},
{"lineNum":" 3531","line":""},
{"lineNum":" 3532","line":"// find"},
{"lineNum":" 3533","line":""},
{"lineNum":" 3534","line":"template <class _Traits>"},
{"lineNum":" 3535","line":"struct _LIBCPP_HIDDEN __traits_eq"},
{"lineNum":" 3536","line":"{"},
{"lineNum":" 3537","line":"    typedef typename _Traits::char_type char_type;"},
{"lineNum":" 3538","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 3539","line":"    bool operator()(const char_type& __x, const char_type& __y) _NOEXCEPT"},
{"lineNum":" 3540","line":"        {return _Traits::eq(__x, __y);}"},
{"lineNum":" 3541","line":"};"},
{"lineNum":" 3542","line":""},
{"lineNum":" 3543","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3544","line":"typename basic_string<_CharT, _Traits, _Allocator>::size_type"},
{"lineNum":" 3545","line":"basic_string<_CharT, _Traits, _Allocator>::find(const value_type* __s,"},
{"lineNum":" 3546","line":"                                                size_type __pos,"},
{"lineNum":" 3547","line":"                                                size_type __n) const _NOEXCEPT"},
{"lineNum":" 3548","line":"{"},
{"lineNum":" 3549","line":"    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, \"string::find(): received nullptr\");"},
{"lineNum":" 3550","line":"    return __str_find<value_type, size_type, traits_type, npos>"},
{"lineNum":" 3551","line":"        (data(), size(), __s, __pos, __n);"},
{"lineNum":" 3552","line":"}"},
{"lineNum":" 3553","line":""},
{"lineNum":" 3554","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3555","line":"inline"},
{"lineNum":" 3556","line":"typename basic_string<_CharT, _Traits, _Allocator>::size_type"},
{"lineNum":" 3557","line":"basic_string<_CharT, _Traits, _Allocator>::find(const basic_string& __str,"},
{"lineNum":" 3558","line":"                                                size_type __pos) const _NOEXCEPT"},
{"lineNum":" 3559","line":"{"},
{"lineNum":" 3560","line":"    return __str_find<value_type, size_type, traits_type, npos>"},
{"lineNum":" 3561","line":"        (data(), size(), __str.data(), __pos, __str.size());"},
{"lineNum":" 3562","line":"}"},
{"lineNum":" 3563","line":""},
{"lineNum":" 3564","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3565","line":"template <class _Tp>"},
{"lineNum":" 3566","line":"_EnableIf"},
{"lineNum":" 3567","line":"<"},
{"lineNum":" 3568","line":"    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,"},
{"lineNum":" 3569","line":"    typename basic_string<_CharT, _Traits, _Allocator>::size_type"},
{"lineNum":" 3570","line":">"},
{"lineNum":" 3571","line":"basic_string<_CharT, _Traits, _Allocator>::find(const _Tp &__t,"},
{"lineNum":" 3572","line":"                                                size_type __pos) const _NOEXCEPT"},
{"lineNum":" 3573","line":"{"},
{"lineNum":" 3574","line":"    __self_view __sv = __t;"},
{"lineNum":" 3575","line":"    return __str_find<value_type, size_type, traits_type, npos>"},
{"lineNum":" 3576","line":"        (data(), size(), __sv.data(), __pos, __sv.size());"},
{"lineNum":" 3577","line":"}"},
{"lineNum":" 3578","line":""},
{"lineNum":" 3579","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3580","line":"inline"},
{"lineNum":" 3581","line":"typename basic_string<_CharT, _Traits, _Allocator>::size_type"},
{"lineNum":" 3582","line":"basic_string<_CharT, _Traits, _Allocator>::find(const value_type* __s,"},
{"lineNum":" 3583","line":"                                                size_type __pos) const _NOEXCEPT"},
{"lineNum":" 3584","line":"{"},
{"lineNum":" 3585","line":"    _LIBCPP_ASSERT(__s != nullptr, \"string::find(): received nullptr\");"},
{"lineNum":" 3586","line":"    return __str_find<value_type, size_type, traits_type, npos>"},
{"lineNum":" 3587","line":"        (data(), size(), __s, __pos, traits_type::length(__s));"},
{"lineNum":" 3588","line":"}"},
{"lineNum":" 3589","line":""},
{"lineNum":" 3590","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3591","line":"typename basic_string<_CharT, _Traits, _Allocator>::size_type"},
{"lineNum":" 3592","line":"basic_string<_CharT, _Traits, _Allocator>::find(value_type __c,"},
{"lineNum":" 3593","line":"                                                size_type __pos) const _NOEXCEPT"},
{"lineNum":" 3594","line":"{"},
{"lineNum":" 3595","line":"    return __str_find<value_type, size_type, traits_type, npos>"},
{"lineNum":" 3596","line":"        (data(), size(), __c, __pos);"},
{"lineNum":" 3597","line":"}"},
{"lineNum":" 3598","line":""},
{"lineNum":" 3599","line":"// rfind"},
{"lineNum":" 3600","line":""},
{"lineNum":" 3601","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3602","line":"typename basic_string<_CharT, _Traits, _Allocator>::size_type"},
{"lineNum":" 3603","line":"basic_string<_CharT, _Traits, _Allocator>::rfind(const value_type* __s,"},
{"lineNum":" 3604","line":"                                                 size_type __pos,"},
{"lineNum":" 3605","line":"                                                 size_type __n) const _NOEXCEPT"},
{"lineNum":" 3606","line":"{"},
{"lineNum":" 3607","line":"    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, \"string::rfind(): received nullptr\");"},
{"lineNum":" 3608","line":"    return __str_rfind<value_type, size_type, traits_type, npos>"},
{"lineNum":" 3609","line":"        (data(), size(), __s, __pos, __n);"},
{"lineNum":" 3610","line":"}"},
{"lineNum":" 3611","line":""},
{"lineNum":" 3612","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3613","line":"inline"},
{"lineNum":" 3614","line":"typename basic_string<_CharT, _Traits, _Allocator>::size_type"},
{"lineNum":" 3615","line":"basic_string<_CharT, _Traits, _Allocator>::rfind(const basic_string& __str,"},
{"lineNum":" 3616","line":"                                                 size_type __pos) const _NOEXCEPT"},
{"lineNum":" 3617","line":"{"},
{"lineNum":" 3618","line":"    return __str_rfind<value_type, size_type, traits_type, npos>"},
{"lineNum":" 3619","line":"        (data(), size(), __str.data(), __pos, __str.size());"},
{"lineNum":" 3620","line":"}"},
{"lineNum":" 3621","line":""},
{"lineNum":" 3622","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3623","line":"template <class _Tp>"},
{"lineNum":" 3624","line":"_EnableIf"},
{"lineNum":" 3625","line":"<"},
{"lineNum":" 3626","line":"    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,"},
{"lineNum":" 3627","line":"    typename basic_string<_CharT, _Traits, _Allocator>::size_type"},
{"lineNum":" 3628","line":">"},
{"lineNum":" 3629","line":"basic_string<_CharT, _Traits, _Allocator>::rfind(const _Tp& __t,"},
{"lineNum":" 3630","line":"                                                size_type __pos) const _NOEXCEPT"},
{"lineNum":" 3631","line":"{"},
{"lineNum":" 3632","line":"    __self_view __sv = __t;"},
{"lineNum":" 3633","line":"    return __str_rfind<value_type, size_type, traits_type, npos>"},
{"lineNum":" 3634","line":"        (data(), size(), __sv.data(), __pos, __sv.size());"},
{"lineNum":" 3635","line":"}"},
{"lineNum":" 3636","line":""},
{"lineNum":" 3637","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3638","line":"inline"},
{"lineNum":" 3639","line":"typename basic_string<_CharT, _Traits, _Allocator>::size_type"},
{"lineNum":" 3640","line":"basic_string<_CharT, _Traits, _Allocator>::rfind(const value_type* __s,"},
{"lineNum":" 3641","line":"                                                 size_type __pos) const _NOEXCEPT"},
{"lineNum":" 3642","line":"{"},
{"lineNum":" 3643","line":"    _LIBCPP_ASSERT(__s != nullptr, \"string::rfind(): received nullptr\");"},
{"lineNum":" 3644","line":"    return __str_rfind<value_type, size_type, traits_type, npos>"},
{"lineNum":" 3645","line":"        (data(), size(), __s, __pos, traits_type::length(__s));"},
{"lineNum":" 3646","line":"}"},
{"lineNum":" 3647","line":""},
{"lineNum":" 3648","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3649","line":"typename basic_string<_CharT, _Traits, _Allocator>::size_type"},
{"lineNum":" 3650","line":"basic_string<_CharT, _Traits, _Allocator>::rfind(value_type __c,"},
{"lineNum":" 3651","line":"                                                 size_type __pos) const _NOEXCEPT"},
{"lineNum":" 3652","line":"{"},
{"lineNum":" 3653","line":"    return __str_rfind<value_type, size_type, traits_type, npos>"},
{"lineNum":" 3654","line":"        (data(), size(), __c, __pos);"},
{"lineNum":" 3655","line":"}"},
{"lineNum":" 3656","line":""},
{"lineNum":" 3657","line":"// find_first_of"},
{"lineNum":" 3658","line":""},
{"lineNum":" 3659","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3660","line":"typename basic_string<_CharT, _Traits, _Allocator>::size_type"},
{"lineNum":" 3661","line":"basic_string<_CharT, _Traits, _Allocator>::find_first_of(const value_type* __s,"},
{"lineNum":" 3662","line":"                                                         size_type __pos,"},
{"lineNum":" 3663","line":"                                                         size_type __n) const _NOEXCEPT"},
{"lineNum":" 3664","line":"{"},
{"lineNum":" 3665","line":"    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, \"string::find_first_of(): received nullptr\");"},
{"lineNum":" 3666","line":"    return __str_find_first_of<value_type, size_type, traits_type, npos>"},
{"lineNum":" 3667","line":"        (data(), size(), __s, __pos, __n);"},
{"lineNum":" 3668","line":"}"},
{"lineNum":" 3669","line":""},
{"lineNum":" 3670","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3671","line":"inline"},
{"lineNum":" 3672","line":"typename basic_string<_CharT, _Traits, _Allocator>::size_type"},
{"lineNum":" 3673","line":"basic_string<_CharT, _Traits, _Allocator>::find_first_of(const basic_string& __str,"},
{"lineNum":" 3674","line":"                                                         size_type __pos) const _NOEXCEPT"},
{"lineNum":" 3675","line":"{"},
{"lineNum":" 3676","line":"    return __str_find_first_of<value_type, size_type, traits_type, npos>"},
{"lineNum":" 3677","line":"        (data(), size(), __str.data(), __pos, __str.size());"},
{"lineNum":" 3678","line":"}"},
{"lineNum":" 3679","line":""},
{"lineNum":" 3680","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3681","line":"template <class _Tp>"},
{"lineNum":" 3682","line":"_EnableIf"},
{"lineNum":" 3683","line":"<"},
{"lineNum":" 3684","line":"    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,"},
{"lineNum":" 3685","line":"    typename basic_string<_CharT, _Traits, _Allocator>::size_type"},
{"lineNum":" 3686","line":">"},
{"lineNum":" 3687","line":"basic_string<_CharT, _Traits, _Allocator>::find_first_of(const _Tp& __t,"},
{"lineNum":" 3688","line":"                                                size_type __pos) const _NOEXCEPT"},
{"lineNum":" 3689","line":"{"},
{"lineNum":" 3690","line":"    __self_view __sv = __t;"},
{"lineNum":" 3691","line":"    return __str_find_first_of<value_type, size_type, traits_type, npos>"},
{"lineNum":" 3692","line":"        (data(), size(), __sv.data(), __pos, __sv.size());"},
{"lineNum":" 3693","line":"}"},
{"lineNum":" 3694","line":""},
{"lineNum":" 3695","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3696","line":"inline"},
{"lineNum":" 3697","line":"typename basic_string<_CharT, _Traits, _Allocator>::size_type"},
{"lineNum":" 3698","line":"basic_string<_CharT, _Traits, _Allocator>::find_first_of(const value_type* __s,"},
{"lineNum":" 3699","line":"                                                         size_type __pos) const _NOEXCEPT"},
{"lineNum":" 3700","line":"{"},
{"lineNum":" 3701","line":"    _LIBCPP_ASSERT(__s != nullptr, \"string::find_first_of(): received nullptr\");"},
{"lineNum":" 3702","line":"    return __str_find_first_of<value_type, size_type, traits_type, npos>"},
{"lineNum":" 3703","line":"        (data(), size(), __s, __pos, traits_type::length(__s));"},
{"lineNum":" 3704","line":"}"},
{"lineNum":" 3705","line":""},
{"lineNum":" 3706","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3707","line":"inline"},
{"lineNum":" 3708","line":"typename basic_string<_CharT, _Traits, _Allocator>::size_type"},
{"lineNum":" 3709","line":"basic_string<_CharT, _Traits, _Allocator>::find_first_of(value_type __c,"},
{"lineNum":" 3710","line":"                                                         size_type __pos) const _NOEXCEPT"},
{"lineNum":" 3711","line":"{"},
{"lineNum":" 3712","line":"    return find(__c, __pos);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3713","line":"}"},
{"lineNum":" 3714","line":""},
{"lineNum":" 3715","line":"// find_last_of"},
{"lineNum":" 3716","line":""},
{"lineNum":" 3717","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3718","line":"typename basic_string<_CharT, _Traits, _Allocator>::size_type"},
{"lineNum":" 3719","line":"basic_string<_CharT, _Traits, _Allocator>::find_last_of(const value_type* __s,"},
{"lineNum":" 3720","line":"                                                        size_type __pos,"},
{"lineNum":" 3721","line":"                                                        size_type __n) const _NOEXCEPT"},
{"lineNum":" 3722","line":"{"},
{"lineNum":" 3723","line":"    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, \"string::find_last_of(): received nullptr\");"},
{"lineNum":" 3724","line":"    return __str_find_last_of<value_type, size_type, traits_type, npos>"},
{"lineNum":" 3725","line":"        (data(), size(), __s, __pos, __n);"},
{"lineNum":" 3726","line":"}"},
{"lineNum":" 3727","line":""},
{"lineNum":" 3728","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3729","line":"inline"},
{"lineNum":" 3730","line":"typename basic_string<_CharT, _Traits, _Allocator>::size_type"},
{"lineNum":" 3731","line":"basic_string<_CharT, _Traits, _Allocator>::find_last_of(const basic_string& __str,"},
{"lineNum":" 3732","line":"                                                        size_type __pos) const _NOEXCEPT"},
{"lineNum":" 3733","line":"{"},
{"lineNum":" 3734","line":"    return __str_find_last_of<value_type, size_type, traits_type, npos>"},
{"lineNum":" 3735","line":"        (data(), size(), __str.data(), __pos, __str.size());"},
{"lineNum":" 3736","line":"}"},
{"lineNum":" 3737","line":""},
{"lineNum":" 3738","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3739","line":"template <class _Tp>"},
{"lineNum":" 3740","line":"_EnableIf"},
{"lineNum":" 3741","line":"<"},
{"lineNum":" 3742","line":"    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,"},
{"lineNum":" 3743","line":"    typename basic_string<_CharT, _Traits, _Allocator>::size_type"},
{"lineNum":" 3744","line":">"},
{"lineNum":" 3745","line":"basic_string<_CharT, _Traits, _Allocator>::find_last_of(const _Tp& __t,"},
{"lineNum":" 3746","line":"                                                size_type __pos) const _NOEXCEPT"},
{"lineNum":" 3747","line":"{"},
{"lineNum":" 3748","line":"    __self_view __sv = __t;"},
{"lineNum":" 3749","line":"    return __str_find_last_of<value_type, size_type, traits_type, npos>"},
{"lineNum":" 3750","line":"        (data(), size(), __sv.data(), __pos, __sv.size());"},
{"lineNum":" 3751","line":"}"},
{"lineNum":" 3752","line":""},
{"lineNum":" 3753","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3754","line":"inline"},
{"lineNum":" 3755","line":"typename basic_string<_CharT, _Traits, _Allocator>::size_type"},
{"lineNum":" 3756","line":"basic_string<_CharT, _Traits, _Allocator>::find_last_of(const value_type* __s,"},
{"lineNum":" 3757","line":"                                                        size_type __pos) const _NOEXCEPT"},
{"lineNum":" 3758","line":"{"},
{"lineNum":" 3759","line":"    _LIBCPP_ASSERT(__s != nullptr, \"string::find_last_of(): received nullptr\");"},
{"lineNum":" 3760","line":"    return __str_find_last_of<value_type, size_type, traits_type, npos>"},
{"lineNum":" 3761","line":"        (data(), size(), __s, __pos, traits_type::length(__s));"},
{"lineNum":" 3762","line":"}"},
{"lineNum":" 3763","line":""},
{"lineNum":" 3764","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3765","line":"inline"},
{"lineNum":" 3766","line":"typename basic_string<_CharT, _Traits, _Allocator>::size_type"},
{"lineNum":" 3767","line":"basic_string<_CharT, _Traits, _Allocator>::find_last_of(value_type __c,"},
{"lineNum":" 3768","line":"                                                        size_type __pos) const _NOEXCEPT"},
{"lineNum":" 3769","line":"{"},
{"lineNum":" 3770","line":"    return rfind(__c, __pos);"},
{"lineNum":" 3771","line":"}"},
{"lineNum":" 3772","line":""},
{"lineNum":" 3773","line":"// find_first_not_of"},
{"lineNum":" 3774","line":""},
{"lineNum":" 3775","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3776","line":"typename basic_string<_CharT, _Traits, _Allocator>::size_type"},
{"lineNum":" 3777","line":"basic_string<_CharT, _Traits, _Allocator>::find_first_not_of(const value_type* __s,"},
{"lineNum":" 3778","line":"                                                             size_type __pos,"},
{"lineNum":" 3779","line":"                                                             size_type __n) const _NOEXCEPT"},
{"lineNum":" 3780","line":"{"},
{"lineNum":" 3781","line":"    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, \"string::find_first_not_of(): received nullptr\");"},
{"lineNum":" 3782","line":"    return __str_find_first_not_of<value_type, size_type, traits_type, npos>"},
{"lineNum":" 3783","line":"        (data(), size(), __s, __pos, __n);"},
{"lineNum":" 3784","line":"}"},
{"lineNum":" 3785","line":""},
{"lineNum":" 3786","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3787","line":"inline"},
{"lineNum":" 3788","line":"typename basic_string<_CharT, _Traits, _Allocator>::size_type"},
{"lineNum":" 3789","line":"basic_string<_CharT, _Traits, _Allocator>::find_first_not_of(const basic_string& __str,"},
{"lineNum":" 3790","line":"                                                             size_type __pos) const _NOEXCEPT"},
{"lineNum":" 3791","line":"{"},
{"lineNum":" 3792","line":"    return __str_find_first_not_of<value_type, size_type, traits_type, npos>"},
{"lineNum":" 3793","line":"        (data(), size(), __str.data(), __pos, __str.size());"},
{"lineNum":" 3794","line":"}"},
{"lineNum":" 3795","line":""},
{"lineNum":" 3796","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3797","line":"template <class _Tp>"},
{"lineNum":" 3798","line":"_EnableIf"},
{"lineNum":" 3799","line":"<"},
{"lineNum":" 3800","line":"    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,"},
{"lineNum":" 3801","line":"    typename basic_string<_CharT, _Traits, _Allocator>::size_type"},
{"lineNum":" 3802","line":">"},
{"lineNum":" 3803","line":"basic_string<_CharT, _Traits, _Allocator>::find_first_not_of(const _Tp& __t,"},
{"lineNum":" 3804","line":"                                                size_type __pos) const _NOEXCEPT"},
{"lineNum":" 3805","line":"{"},
{"lineNum":" 3806","line":"    __self_view __sv = __t;"},
{"lineNum":" 3807","line":"    return __str_find_first_not_of<value_type, size_type, traits_type, npos>"},
{"lineNum":" 3808","line":"        (data(), size(), __sv.data(), __pos, __sv.size());"},
{"lineNum":" 3809","line":"}"},
{"lineNum":" 3810","line":""},
{"lineNum":" 3811","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3812","line":"inline"},
{"lineNum":" 3813","line":"typename basic_string<_CharT, _Traits, _Allocator>::size_type"},
{"lineNum":" 3814","line":"basic_string<_CharT, _Traits, _Allocator>::find_first_not_of(const value_type* __s,"},
{"lineNum":" 3815","line":"                                                             size_type __pos) const _NOEXCEPT"},
{"lineNum":" 3816","line":"{"},
{"lineNum":" 3817","line":"    _LIBCPP_ASSERT(__s != nullptr, \"string::find_first_not_of(): received nullptr\");"},
{"lineNum":" 3818","line":"    return __str_find_first_not_of<value_type, size_type, traits_type, npos>"},
{"lineNum":" 3819","line":"        (data(), size(), __s, __pos, traits_type::length(__s));"},
{"lineNum":" 3820","line":"}"},
{"lineNum":" 3821","line":""},
{"lineNum":" 3822","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3823","line":"inline"},
{"lineNum":" 3824","line":"typename basic_string<_CharT, _Traits, _Allocator>::size_type"},
{"lineNum":" 3825","line":"basic_string<_CharT, _Traits, _Allocator>::find_first_not_of(value_type __c,"},
{"lineNum":" 3826","line":"                                                             size_type __pos) const _NOEXCEPT"},
{"lineNum":" 3827","line":"{"},
{"lineNum":" 3828","line":"    return __str_find_first_not_of<value_type, size_type, traits_type, npos>"},
{"lineNum":" 3829","line":"        (data(), size(), __c, __pos);"},
{"lineNum":" 3830","line":"}"},
{"lineNum":" 3831","line":""},
{"lineNum":" 3832","line":"// find_last_not_of"},
{"lineNum":" 3833","line":""},
{"lineNum":" 3834","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3835","line":"typename basic_string<_CharT, _Traits, _Allocator>::size_type"},
{"lineNum":" 3836","line":"basic_string<_CharT, _Traits, _Allocator>::find_last_not_of(const value_type* __s,"},
{"lineNum":" 3837","line":"                                                            size_type __pos,"},
{"lineNum":" 3838","line":"                                                            size_type __n) const _NOEXCEPT"},
{"lineNum":" 3839","line":"{"},
{"lineNum":" 3840","line":"    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, \"string::find_last_not_of(): received nullptr\");"},
{"lineNum":" 3841","line":"    return __str_find_last_not_of<value_type, size_type, traits_type, npos>"},
{"lineNum":" 3842","line":"        (data(), size(), __s, __pos, __n);"},
{"lineNum":" 3843","line":"}"},
{"lineNum":" 3844","line":""},
{"lineNum":" 3845","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3846","line":"inline"},
{"lineNum":" 3847","line":"typename basic_string<_CharT, _Traits, _Allocator>::size_type"},
{"lineNum":" 3848","line":"basic_string<_CharT, _Traits, _Allocator>::find_last_not_of(const basic_string& __str,"},
{"lineNum":" 3849","line":"                                                            size_type __pos) const _NOEXCEPT"},
{"lineNum":" 3850","line":"{"},
{"lineNum":" 3851","line":"    return __str_find_last_not_of<value_type, size_type, traits_type, npos>"},
{"lineNum":" 3852","line":"        (data(), size(), __str.data(), __pos, __str.size());"},
{"lineNum":" 3853","line":"}"},
{"lineNum":" 3854","line":""},
{"lineNum":" 3855","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3856","line":"template <class _Tp>"},
{"lineNum":" 3857","line":"_EnableIf"},
{"lineNum":" 3858","line":"<"},
{"lineNum":" 3859","line":"    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,"},
{"lineNum":" 3860","line":"    typename basic_string<_CharT, _Traits, _Allocator>::size_type"},
{"lineNum":" 3861","line":">"},
{"lineNum":" 3862","line":"basic_string<_CharT, _Traits, _Allocator>::find_last_not_of(const _Tp& __t,"},
{"lineNum":" 3863","line":"                                                size_type __pos) const _NOEXCEPT"},
{"lineNum":" 3864","line":"{"},
{"lineNum":" 3865","line":"    __self_view __sv = __t;"},
{"lineNum":" 3866","line":"    return __str_find_last_not_of<value_type, size_type, traits_type, npos>"},
{"lineNum":" 3867","line":"        (data(), size(), __sv.data(), __pos, __sv.size());"},
{"lineNum":" 3868","line":"}"},
{"lineNum":" 3869","line":""},
{"lineNum":" 3870","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3871","line":"inline"},
{"lineNum":" 3872","line":"typename basic_string<_CharT, _Traits, _Allocator>::size_type"},
{"lineNum":" 3873","line":"basic_string<_CharT, _Traits, _Allocator>::find_last_not_of(const value_type* __s,"},
{"lineNum":" 3874","line":"                                                            size_type __pos) const _NOEXCEPT"},
{"lineNum":" 3875","line":"{"},
{"lineNum":" 3876","line":"    _LIBCPP_ASSERT(__s != nullptr, \"string::find_last_not_of(): received nullptr\");"},
{"lineNum":" 3877","line":"    return __str_find_last_not_of<value_type, size_type, traits_type, npos>"},
{"lineNum":" 3878","line":"        (data(), size(), __s, __pos, traits_type::length(__s));"},
{"lineNum":" 3879","line":"}"},
{"lineNum":" 3880","line":""},
{"lineNum":" 3881","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3882","line":"inline"},
{"lineNum":" 3883","line":"typename basic_string<_CharT, _Traits, _Allocator>::size_type"},
{"lineNum":" 3884","line":"basic_string<_CharT, _Traits, _Allocator>::find_last_not_of(value_type __c,"},
{"lineNum":" 3885","line":"                                                            size_type __pos) const _NOEXCEPT"},
{"lineNum":" 3886","line":"{"},
{"lineNum":" 3887","line":"    return __str_find_last_not_of<value_type, size_type, traits_type, npos>"},
{"lineNum":" 3888","line":"        (data(), size(), __c, __pos);"},
{"lineNum":" 3889","line":"}"},
{"lineNum":" 3890","line":""},
{"lineNum":" 3891","line":"// compare"},
{"lineNum":" 3892","line":""},
{"lineNum":" 3893","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3894","line":"template <class _Tp>"},
{"lineNum":" 3895","line":"_EnableIf"},
{"lineNum":" 3896","line":"<"},
{"lineNum":" 3897","line":"    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,"},
{"lineNum":" 3898","line":"    int"},
{"lineNum":" 3899","line":">"},
{"lineNum":" 3900","line":"basic_string<_CharT, _Traits, _Allocator>::compare(const _Tp& __t) const _NOEXCEPT"},
{"lineNum":" 3901","line":"{","class":"lineCov","hits":"1","order":"439","possible_hits":"1",},
{"lineNum":" 3902","line":"    __self_view __sv = __t;","class":"lineCov","hits":"1","order":"440","possible_hits":"1",},
{"lineNum":" 3903","line":"    size_t __lhs_sz = size();"},
{"lineNum":" 3904","line":"    size_t __rhs_sz = __sv.size();"},
{"lineNum":" 3905","line":"    int __result = traits_type::compare(data(), __sv.data(),"},
{"lineNum":" 3906","line":"                                        _VSTD::min(__lhs_sz, __rhs_sz));","class":"linePartCov","hits":"1","order":"442","possible_hits":"181",},
{"lineNum":" 3907","line":"    if (__result != 0)","class":"linePartCov","hits":"1","order":"445","possible_hits":"225",},
{"lineNum":" 3908","line":"        return __result;","class":"lineCov","hits":"1","order":"446","possible_hits":"1",},
{"lineNum":" 3909","line":"    if (__lhs_sz < __rhs_sz)","class":"linePartCov","hits":"1","order":"696","possible_hits":"269",},
{"lineNum":" 3910","line":"        return -1;","class":"lineCov","hits":"1","order":"697","possible_hits":"1",},
{"lineNum":" 3911","line":"    if (__lhs_sz > __rhs_sz)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3912","line":"        return 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3913","line":"    return 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3914","line":"}","class":"linePartCov","hits":"1","order":"447","possible_hits":"2",},
{"lineNum":" 3915","line":""},
{"lineNum":" 3916","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3917","line":"inline"},
{"lineNum":" 3918","line":"int"},
{"lineNum":" 3919","line":"basic_string<_CharT, _Traits, _Allocator>::compare(const basic_string& __str) const _NOEXCEPT"},
{"lineNum":" 3920","line":"{"},
{"lineNum":" 3921","line":"    return compare(__self_view(__str));","class":"linePartCov","hits":"9","order":"433","possible_hits":"27",},
{"lineNum":" 3922","line":"}"},
{"lineNum":" 3923","line":""},
{"lineNum":" 3924","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3925","line":"int"},
{"lineNum":" 3926","line":"basic_string<_CharT, _Traits, _Allocator>::compare(size_type __pos1,"},
{"lineNum":" 3927","line":"                                                   size_type __n1,"},
{"lineNum":" 3928","line":"                                                   const value_type* __s,"},
{"lineNum":" 3929","line":"                                                   size_type __n2) const"},
{"lineNum":" 3930","line":"{"},
{"lineNum":" 3931","line":"    _LIBCPP_ASSERT(__n2 == 0 || __s != nullptr, \"string::compare(): received nullptr\");"},
{"lineNum":" 3932","line":"    size_type __sz = size();"},
{"lineNum":" 3933","line":"    if (__pos1 > __sz || __n2 == npos)"},
{"lineNum":" 3934","line":"        this->__throw_out_of_range();"},
{"lineNum":" 3935","line":"    size_type __rlen = _VSTD::min(__n1, __sz - __pos1);"},
{"lineNum":" 3936","line":"    int __r = traits_type::compare(data() + __pos1, __s, _VSTD::min(__rlen, __n2));"},
{"lineNum":" 3937","line":"    if (__r == 0)"},
{"lineNum":" 3938","line":"    {"},
{"lineNum":" 3939","line":"        if (__rlen < __n2)"},
{"lineNum":" 3940","line":"            __r = -1;"},
{"lineNum":" 3941","line":"        else if (__rlen > __n2)"},
{"lineNum":" 3942","line":"            __r = 1;"},
{"lineNum":" 3943","line":"    }"},
{"lineNum":" 3944","line":"    return __r;"},
{"lineNum":" 3945","line":"}"},
{"lineNum":" 3946","line":""},
{"lineNum":" 3947","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3948","line":"template <class _Tp>"},
{"lineNum":" 3949","line":"_EnableIf"},
{"lineNum":" 3950","line":"<"},
{"lineNum":" 3951","line":"    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value,"},
{"lineNum":" 3952","line":"    int"},
{"lineNum":" 3953","line":">"},
{"lineNum":" 3954","line":"basic_string<_CharT, _Traits, _Allocator>::compare(size_type __pos1,"},
{"lineNum":" 3955","line":"                                                   size_type __n1,"},
{"lineNum":" 3956","line":"                                                   const _Tp& __t) const"},
{"lineNum":" 3957","line":"{"},
{"lineNum":" 3958","line":"    __self_view __sv = __t;"},
{"lineNum":" 3959","line":"    return compare(__pos1, __n1, __sv.data(), __sv.size());"},
{"lineNum":" 3960","line":"}"},
{"lineNum":" 3961","line":""},
{"lineNum":" 3962","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3963","line":"inline"},
{"lineNum":" 3964","line":"int"},
{"lineNum":" 3965","line":"basic_string<_CharT, _Traits, _Allocator>::compare(size_type __pos1,"},
{"lineNum":" 3966","line":"                                                   size_type __n1,"},
{"lineNum":" 3967","line":"                                                   const basic_string& __str) const"},
{"lineNum":" 3968","line":"{"},
{"lineNum":" 3969","line":"    return compare(__pos1, __n1, __str.data(), __str.size());"},
{"lineNum":" 3970","line":"}"},
{"lineNum":" 3971","line":""},
{"lineNum":" 3972","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3973","line":"template <class _Tp>"},
{"lineNum":" 3974","line":"_EnableIf"},
{"lineNum":" 3975","line":"<"},
{"lineNum":" 3976","line":"    __can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value"},
{"lineNum":" 3977","line":"    && !__is_same_uncvref<_Tp, basic_string<_CharT, _Traits, _Allocator> >::value,"},
{"lineNum":" 3978","line":"    int"},
{"lineNum":" 3979","line":">"},
{"lineNum":" 3980","line":"basic_string<_CharT, _Traits, _Allocator>::compare(size_type __pos1,"},
{"lineNum":" 3981","line":"                                                   size_type __n1,"},
{"lineNum":" 3982","line":"                                                   const _Tp& __t,"},
{"lineNum":" 3983","line":"                                                   size_type __pos2,"},
{"lineNum":" 3984","line":"                                                   size_type __n2) const"},
{"lineNum":" 3985","line":"{"},
{"lineNum":" 3986","line":"    __self_view __sv = __t;"},
{"lineNum":" 3987","line":"    return __self_view(*this).substr(__pos1, __n1).compare(__sv.substr(__pos2, __n2));"},
{"lineNum":" 3988","line":"}"},
{"lineNum":" 3989","line":""},
{"lineNum":" 3990","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 3991","line":"int"},
{"lineNum":" 3992","line":"basic_string<_CharT, _Traits, _Allocator>::compare(size_type __pos1,"},
{"lineNum":" 3993","line":"                                                   size_type __n1,"},
{"lineNum":" 3994","line":"                                                   const basic_string& __str,"},
{"lineNum":" 3995","line":"                                                   size_type __pos2,"},
{"lineNum":" 3996","line":"                                                   size_type __n2) const"},
{"lineNum":" 3997","line":"{"},
{"lineNum":" 3998","line":"        return compare(__pos1, __n1, __self_view(__str), __pos2, __n2);"},
{"lineNum":" 3999","line":"}"},
{"lineNum":" 4000","line":""},
{"lineNum":" 4001","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4002","line":"int"},
{"lineNum":" 4003","line":"basic_string<_CharT, _Traits, _Allocator>::compare(const value_type* __s) const _NOEXCEPT"},
{"lineNum":" 4004","line":"{"},
{"lineNum":" 4005","line":"    _LIBCPP_ASSERT(__s != nullptr, \"string::compare(): received nullptr\");"},
{"lineNum":" 4006","line":"    return compare(0, npos, __s, traits_type::length(__s));"},
{"lineNum":" 4007","line":"}"},
{"lineNum":" 4008","line":""},
{"lineNum":" 4009","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4010","line":"int"},
{"lineNum":" 4011","line":"basic_string<_CharT, _Traits, _Allocator>::compare(size_type __pos1,"},
{"lineNum":" 4012","line":"                                                   size_type __n1,"},
{"lineNum":" 4013","line":"                                                   const value_type* __s) const"},
{"lineNum":" 4014","line":"{"},
{"lineNum":" 4015","line":"    _LIBCPP_ASSERT(__s != nullptr, \"string::compare(): received nullptr\");"},
{"lineNum":" 4016","line":"    return compare(__pos1, __n1, __s, traits_type::length(__s));"},
{"lineNum":" 4017","line":"}"},
{"lineNum":" 4018","line":""},
{"lineNum":" 4019","line":"// __invariants"},
{"lineNum":" 4020","line":""},
{"lineNum":" 4021","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4022","line":"inline"},
{"lineNum":" 4023","line":"bool"},
{"lineNum":" 4024","line":"basic_string<_CharT, _Traits, _Allocator>::__invariants() const"},
{"lineNum":" 4025","line":"{"},
{"lineNum":" 4026","line":"    if (size() > capacity())"},
{"lineNum":" 4027","line":"        return false;"},
{"lineNum":" 4028","line":"    if (capacity() < __min_cap - 1)"},
{"lineNum":" 4029","line":"        return false;"},
{"lineNum":" 4030","line":"    if (data() == nullptr)"},
{"lineNum":" 4031","line":"        return false;"},
{"lineNum":" 4032","line":"    if (data()[size()] != value_type())"},
{"lineNum":" 4033","line":"        return false;"},
{"lineNum":" 4034","line":"    return true;"},
{"lineNum":" 4035","line":"}"},
{"lineNum":" 4036","line":""},
{"lineNum":" 4037","line":"// __clear_and_shrink"},
{"lineNum":" 4038","line":""},
{"lineNum":" 4039","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4040","line":"inline"},
{"lineNum":" 4041","line":"void"},
{"lineNum":" 4042","line":"basic_string<_CharT, _Traits, _Allocator>::__clear_and_shrink() _NOEXCEPT"},
{"lineNum":" 4043","line":"{"},
{"lineNum":" 4044","line":"    clear();"},
{"lineNum":" 4045","line":"    if(__is_long())"},
{"lineNum":" 4046","line":"    {"},
{"lineNum":" 4047","line":"        __alloc_traits::deallocate(__alloc(), __get_long_pointer(), capacity() + 1);"},
{"lineNum":" 4048","line":"        __set_long_cap(0);"},
{"lineNum":" 4049","line":"        __set_short_size(0);"},
{"lineNum":" 4050","line":"        traits_type::assign(*__get_short_pointer(), value_type());"},
{"lineNum":" 4051","line":"    }"},
{"lineNum":" 4052","line":"}"},
{"lineNum":" 4053","line":""},
{"lineNum":" 4054","line":"// operator=="},
{"lineNum":" 4055","line":""},
{"lineNum":" 4056","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4057","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4058","line":"bool"},
{"lineNum":" 4059","line":"operator==(const basic_string<_CharT, _Traits, _Allocator>& __lhs,"},
{"lineNum":" 4060","line":"           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT"},
{"lineNum":" 4061","line":"{"},
{"lineNum":" 4062","line":"    size_t __lhs_sz = __lhs.size();"},
{"lineNum":" 4063","line":"    return __lhs_sz == __rhs.size() && _Traits::compare(__lhs.data(),"},
{"lineNum":" 4064","line":"                                                        __rhs.data(),"},
{"lineNum":" 4065","line":"                                                        __lhs_sz) == 0;"},
{"lineNum":" 4066","line":"}"},
{"lineNum":" 4067","line":""},
{"lineNum":" 4068","line":"template<class _Allocator>"},
{"lineNum":" 4069","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4070","line":"bool"},
{"lineNum":" 4071","line":"operator==(const basic_string<char, char_traits<char>, _Allocator>& __lhs,"},
{"lineNum":" 4072","line":"           const basic_string<char, char_traits<char>, _Allocator>& __rhs) _NOEXCEPT"},
{"lineNum":" 4073","line":"{","class":"lineCov","hits":"1","order":"499","possible_hits":"1",},
{"lineNum":" 4074","line":"    size_t __lhs_sz = __lhs.size();"},
{"lineNum":" 4075","line":"    if (__lhs_sz != __rhs.size())","class":"linePartCov","hits":"2","order":"500","possible_hits":"75",},
{"lineNum":" 4076","line":"        return false;","class":"lineCov","hits":"1","order":"501","possible_hits":"1",},
{"lineNum":" 4077","line":"    const char* __lp = __lhs.data();"},
{"lineNum":" 4078","line":"    const char* __rp = __rhs.data();"},
{"lineNum":" 4079","line":"    if (__lhs.__is_long())","class":"lineNoCov","hits":"0","possible_hits":"76",},
{"lineNum":" 4080","line":"        return char_traits<char>::compare(__lp, __rp, __lhs_sz) == 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 4081","line":"    for (; __lhs_sz != 0; --__lhs_sz, ++__lp, ++__rp)","class":"lineNoCov","hits":"0","possible_hits":"91",},
{"lineNum":" 4082","line":"        if (*__lp != *__rp)","class":"lineNoCov","hits":"0","possible_hits":"129",},
{"lineNum":" 4083","line":"            return false;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 4084","line":"    return true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 4085","line":"}","class":"linePartCov","hits":"1","order":"502","possible_hits":"3",},
{"lineNum":" 4086","line":""},
{"lineNum":" 4087","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4088","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4089","line":"bool"},
{"lineNum":" 4090","line":"operator==(const _CharT* __lhs,"},
{"lineNum":" 4091","line":"           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT"},
{"lineNum":" 4092","line":"{"},
{"lineNum":" 4093","line":"    typedef basic_string<_CharT, _Traits, _Allocator> _String;"},
{"lineNum":" 4094","line":"    _LIBCPP_ASSERT(__lhs != nullptr, \"operator==(char*, basic_string): received nullptr\");"},
{"lineNum":" 4095","line":"    size_t __lhs_len = _Traits::length(__lhs);"},
{"lineNum":" 4096","line":"    if (__lhs_len != __rhs.size()) return false;"},
{"lineNum":" 4097","line":"    return __rhs.compare(0, _String::npos, __lhs, __lhs_len) == 0;"},
{"lineNum":" 4098","line":"}"},
{"lineNum":" 4099","line":""},
{"lineNum":" 4100","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4101","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4102","line":"bool"},
{"lineNum":" 4103","line":"operator==(const basic_string<_CharT,_Traits,_Allocator>& __lhs,"},
{"lineNum":" 4104","line":"           const _CharT* __rhs) _NOEXCEPT"},
{"lineNum":" 4105","line":"{"},
{"lineNum":" 4106","line":"    typedef basic_string<_CharT, _Traits, _Allocator> _String;"},
{"lineNum":" 4107","line":"    _LIBCPP_ASSERT(__rhs != nullptr, \"operator==(basic_string, char*): received nullptr\");"},
{"lineNum":" 4108","line":"    size_t __rhs_len = _Traits::length(__rhs);"},
{"lineNum":" 4109","line":"    if (__rhs_len != __lhs.size()) return false;","class":"lineNoCov","hits":"0","possible_hits":"97",},
{"lineNum":" 4110","line":"    return __lhs.compare(0, _String::npos, __rhs, __rhs_len) == 0;","class":"lineNoCov","hits":"0","possible_hits":"84",},
{"lineNum":" 4111","line":"}","class":"lineNoCov","hits":"0","possible_hits":"28",},
{"lineNum":" 4112","line":""},
{"lineNum":" 4113","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4114","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4115","line":"bool"},
{"lineNum":" 4116","line":"operator!=(const basic_string<_CharT,_Traits,_Allocator>& __lhs,"},
{"lineNum":" 4117","line":"           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT"},
{"lineNum":" 4118","line":"{"},
{"lineNum":" 4119","line":"    return !(__lhs == __rhs);"},
{"lineNum":" 4120","line":"}"},
{"lineNum":" 4121","line":""},
{"lineNum":" 4122","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4123","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4124","line":"bool"},
{"lineNum":" 4125","line":"operator!=(const _CharT* __lhs,"},
{"lineNum":" 4126","line":"           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT"},
{"lineNum":" 4127","line":"{"},
{"lineNum":" 4128","line":"    return !(__lhs == __rhs);"},
{"lineNum":" 4129","line":"}"},
{"lineNum":" 4130","line":""},
{"lineNum":" 4131","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4132","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4133","line":"bool"},
{"lineNum":" 4134","line":"operator!=(const basic_string<_CharT, _Traits, _Allocator>& __lhs,"},
{"lineNum":" 4135","line":"           const _CharT* __rhs) _NOEXCEPT"},
{"lineNum":" 4136","line":"{"},
{"lineNum":" 4137","line":"    return !(__lhs == __rhs);"},
{"lineNum":" 4138","line":"}"},
{"lineNum":" 4139","line":""},
{"lineNum":" 4140","line":"// operator<"},
{"lineNum":" 4141","line":""},
{"lineNum":" 4142","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4143","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4144","line":"bool"},
{"lineNum":" 4145","line":"operator< (const basic_string<_CharT, _Traits, _Allocator>& __lhs,"},
{"lineNum":" 4146","line":"           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT"},
{"lineNum":" 4147","line":"{"},
{"lineNum":" 4148","line":"    return __lhs.compare(__rhs) < 0;","class":"linePartCov","hits":"9","order":"448","possible_hits":"95",},
{"lineNum":" 4149","line":"}"},
{"lineNum":" 4150","line":""},
{"lineNum":" 4151","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4152","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4153","line":"bool"},
{"lineNum":" 4154","line":"operator< (const basic_string<_CharT, _Traits, _Allocator>& __lhs,"},
{"lineNum":" 4155","line":"           const _CharT* __rhs) _NOEXCEPT"},
{"lineNum":" 4156","line":"{"},
{"lineNum":" 4157","line":"    return __lhs.compare(__rhs) < 0;"},
{"lineNum":" 4158","line":"}"},
{"lineNum":" 4159","line":""},
{"lineNum":" 4160","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4161","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4162","line":"bool"},
{"lineNum":" 4163","line":"operator< (const _CharT* __lhs,"},
{"lineNum":" 4164","line":"           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT"},
{"lineNum":" 4165","line":"{"},
{"lineNum":" 4166","line":"    return __rhs.compare(__lhs) > 0;"},
{"lineNum":" 4167","line":"}"},
{"lineNum":" 4168","line":""},
{"lineNum":" 4169","line":"// operator>"},
{"lineNum":" 4170","line":""},
{"lineNum":" 4171","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4172","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4173","line":"bool"},
{"lineNum":" 4174","line":"operator> (const basic_string<_CharT, _Traits, _Allocator>& __lhs,"},
{"lineNum":" 4175","line":"           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT"},
{"lineNum":" 4176","line":"{"},
{"lineNum":" 4177","line":"    return __rhs < __lhs;"},
{"lineNum":" 4178","line":"}"},
{"lineNum":" 4179","line":""},
{"lineNum":" 4180","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4181","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4182","line":"bool"},
{"lineNum":" 4183","line":"operator> (const basic_string<_CharT, _Traits, _Allocator>& __lhs,"},
{"lineNum":" 4184","line":"           const _CharT* __rhs) _NOEXCEPT"},
{"lineNum":" 4185","line":"{"},
{"lineNum":" 4186","line":"    return __rhs < __lhs;"},
{"lineNum":" 4187","line":"}"},
{"lineNum":" 4188","line":""},
{"lineNum":" 4189","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4190","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4191","line":"bool"},
{"lineNum":" 4192","line":"operator> (const _CharT* __lhs,"},
{"lineNum":" 4193","line":"           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT"},
{"lineNum":" 4194","line":"{"},
{"lineNum":" 4195","line":"    return __rhs < __lhs;"},
{"lineNum":" 4196","line":"}"},
{"lineNum":" 4197","line":""},
{"lineNum":" 4198","line":"// operator<="},
{"lineNum":" 4199","line":""},
{"lineNum":" 4200","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4201","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4202","line":"bool"},
{"lineNum":" 4203","line":"operator<=(const basic_string<_CharT, _Traits, _Allocator>& __lhs,"},
{"lineNum":" 4204","line":"           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT"},
{"lineNum":" 4205","line":"{"},
{"lineNum":" 4206","line":"    return !(__rhs < __lhs);"},
{"lineNum":" 4207","line":"}"},
{"lineNum":" 4208","line":""},
{"lineNum":" 4209","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4210","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4211","line":"bool"},
{"lineNum":" 4212","line":"operator<=(const basic_string<_CharT, _Traits, _Allocator>& __lhs,"},
{"lineNum":" 4213","line":"           const _CharT* __rhs) _NOEXCEPT"},
{"lineNum":" 4214","line":"{"},
{"lineNum":" 4215","line":"    return !(__rhs < __lhs);"},
{"lineNum":" 4216","line":"}"},
{"lineNum":" 4217","line":""},
{"lineNum":" 4218","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4219","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4220","line":"bool"},
{"lineNum":" 4221","line":"operator<=(const _CharT* __lhs,"},
{"lineNum":" 4222","line":"           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT"},
{"lineNum":" 4223","line":"{"},
{"lineNum":" 4224","line":"    return !(__rhs < __lhs);"},
{"lineNum":" 4225","line":"}"},
{"lineNum":" 4226","line":""},
{"lineNum":" 4227","line":"// operator>="},
{"lineNum":" 4228","line":""},
{"lineNum":" 4229","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4230","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4231","line":"bool"},
{"lineNum":" 4232","line":"operator>=(const basic_string<_CharT, _Traits, _Allocator>& __lhs,"},
{"lineNum":" 4233","line":"           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT"},
{"lineNum":" 4234","line":"{"},
{"lineNum":" 4235","line":"    return !(__lhs < __rhs);"},
{"lineNum":" 4236","line":"}"},
{"lineNum":" 4237","line":""},
{"lineNum":" 4238","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4239","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4240","line":"bool"},
{"lineNum":" 4241","line":"operator>=(const basic_string<_CharT, _Traits, _Allocator>& __lhs,"},
{"lineNum":" 4242","line":"           const _CharT* __rhs) _NOEXCEPT"},
{"lineNum":" 4243","line":"{"},
{"lineNum":" 4244","line":"    return !(__lhs < __rhs);"},
{"lineNum":" 4245","line":"}"},
{"lineNum":" 4246","line":""},
{"lineNum":" 4247","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4248","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4249","line":"bool"},
{"lineNum":" 4250","line":"operator>=(const _CharT* __lhs,"},
{"lineNum":" 4251","line":"           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT"},
{"lineNum":" 4252","line":"{"},
{"lineNum":" 4253","line":"    return !(__lhs < __rhs);"},
{"lineNum":" 4254","line":"}"},
{"lineNum":" 4255","line":""},
{"lineNum":" 4256","line":"// operator +"},
{"lineNum":" 4257","line":""},
{"lineNum":" 4258","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4259","line":"basic_string<_CharT, _Traits, _Allocator>"},
{"lineNum":" 4260","line":"operator+(const basic_string<_CharT, _Traits, _Allocator>& __lhs,"},
{"lineNum":" 4261","line":"          const basic_string<_CharT, _Traits, _Allocator>& __rhs)"},
{"lineNum":" 4262","line":"{"},
{"lineNum":" 4263","line":"    basic_string<_CharT, _Traits, _Allocator> __r(__lhs.get_allocator());"},
{"lineNum":" 4264","line":"    typename basic_string<_CharT, _Traits, _Allocator>::size_type __lhs_sz = __lhs.size();"},
{"lineNum":" 4265","line":"    typename basic_string<_CharT, _Traits, _Allocator>::size_type __rhs_sz = __rhs.size();"},
{"lineNum":" 4266","line":"    __r.__init(__lhs.data(), __lhs_sz, __lhs_sz + __rhs_sz);"},
{"lineNum":" 4267","line":"    __r.append(__rhs.data(), __rhs_sz);"},
{"lineNum":" 4268","line":"    return __r;"},
{"lineNum":" 4269","line":"}"},
{"lineNum":" 4270","line":""},
{"lineNum":" 4271","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4272","line":"basic_string<_CharT, _Traits, _Allocator>"},
{"lineNum":" 4273","line":"operator+(const _CharT* __lhs , const basic_string<_CharT,_Traits,_Allocator>& __rhs)"},
{"lineNum":" 4274","line":"{"},
{"lineNum":" 4275","line":"    basic_string<_CharT, _Traits, _Allocator> __r(__rhs.get_allocator());"},
{"lineNum":" 4276","line":"    typename basic_string<_CharT, _Traits, _Allocator>::size_type __lhs_sz = _Traits::length(__lhs);"},
{"lineNum":" 4277","line":"    typename basic_string<_CharT, _Traits, _Allocator>::size_type __rhs_sz = __rhs.size();"},
{"lineNum":" 4278","line":"    __r.__init(__lhs, __lhs_sz, __lhs_sz + __rhs_sz);"},
{"lineNum":" 4279","line":"    __r.append(__rhs.data(), __rhs_sz);"},
{"lineNum":" 4280","line":"    return __r;"},
{"lineNum":" 4281","line":"}"},
{"lineNum":" 4282","line":""},
{"lineNum":" 4283","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4284","line":"basic_string<_CharT, _Traits, _Allocator>"},
{"lineNum":" 4285","line":"operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Allocator>& __rhs)"},
{"lineNum":" 4286","line":"{"},
{"lineNum":" 4287","line":"    basic_string<_CharT, _Traits, _Allocator> __r(__rhs.get_allocator());"},
{"lineNum":" 4288","line":"    typename basic_string<_CharT, _Traits, _Allocator>::size_type __rhs_sz = __rhs.size();"},
{"lineNum":" 4289","line":"    __r.__init(&__lhs, 1, 1 + __rhs_sz);"},
{"lineNum":" 4290","line":"    __r.append(__rhs.data(), __rhs_sz);"},
{"lineNum":" 4291","line":"    return __r;"},
{"lineNum":" 4292","line":"}"},
{"lineNum":" 4293","line":""},
{"lineNum":" 4294","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4295","line":"inline"},
{"lineNum":" 4296","line":"basic_string<_CharT, _Traits, _Allocator>"},
{"lineNum":" 4297","line":"operator+(const basic_string<_CharT, _Traits, _Allocator>& __lhs, const _CharT* __rhs)"},
{"lineNum":" 4298","line":"{"},
{"lineNum":" 4299","line":"    basic_string<_CharT, _Traits, _Allocator> __r(__lhs.get_allocator());"},
{"lineNum":" 4300","line":"    typename basic_string<_CharT, _Traits, _Allocator>::size_type __lhs_sz = __lhs.size();"},
{"lineNum":" 4301","line":"    typename basic_string<_CharT, _Traits, _Allocator>::size_type __rhs_sz = _Traits::length(__rhs);"},
{"lineNum":" 4302","line":"    __r.__init(__lhs.data(), __lhs_sz, __lhs_sz + __rhs_sz);","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":" 4303","line":"    __r.append(__rhs, __rhs_sz);","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":" 4304","line":"    return __r;"},
{"lineNum":" 4305","line":"}"},
{"lineNum":" 4306","line":""},
{"lineNum":" 4307","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4308","line":"basic_string<_CharT, _Traits, _Allocator>"},
{"lineNum":" 4309","line":"operator+(const basic_string<_CharT, _Traits, _Allocator>& __lhs, _CharT __rhs)"},
{"lineNum":" 4310","line":"{"},
{"lineNum":" 4311","line":"    basic_string<_CharT, _Traits, _Allocator> __r(__lhs.get_allocator());"},
{"lineNum":" 4312","line":"    typename basic_string<_CharT, _Traits, _Allocator>::size_type __lhs_sz = __lhs.size();"},
{"lineNum":" 4313","line":"    __r.__init(__lhs.data(), __lhs_sz, __lhs_sz + 1);"},
{"lineNum":" 4314","line":"    __r.push_back(__rhs);"},
{"lineNum":" 4315","line":"    return __r;"},
{"lineNum":" 4316","line":"}"},
{"lineNum":" 4317","line":""},
{"lineNum":" 4318","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 4319","line":""},
{"lineNum":" 4320","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4321","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4322","line":"basic_string<_CharT, _Traits, _Allocator>"},
{"lineNum":" 4323","line":"operator+(basic_string<_CharT, _Traits, _Allocator>&& __lhs, const basic_string<_CharT, _Traits, _Allocator>& __rhs)"},
{"lineNum":" 4324","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 4325","line":"    return _VSTD::move(__lhs.append(__rhs));","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 4326","line":"}"},
{"lineNum":" 4327","line":""},
{"lineNum":" 4328","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4329","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4330","line":"basic_string<_CharT, _Traits, _Allocator>"},
{"lineNum":" 4331","line":"operator+(const basic_string<_CharT, _Traits, _Allocator>& __lhs, basic_string<_CharT, _Traits, _Allocator>&& __rhs)"},
{"lineNum":" 4332","line":"{"},
{"lineNum":" 4333","line":"    return _VSTD::move(__rhs.insert(0, __lhs));"},
{"lineNum":" 4334","line":"}"},
{"lineNum":" 4335","line":""},
{"lineNum":" 4336","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4337","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4338","line":"basic_string<_CharT, _Traits, _Allocator>"},
{"lineNum":" 4339","line":"operator+(basic_string<_CharT, _Traits, _Allocator>&& __lhs, basic_string<_CharT, _Traits, _Allocator>&& __rhs)"},
{"lineNum":" 4340","line":"{","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 4341","line":"    return _VSTD::move(__lhs.append(__rhs));","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":" 4342","line":"}"},
{"lineNum":" 4343","line":""},
{"lineNum":" 4344","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4345","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4346","line":"basic_string<_CharT, _Traits, _Allocator>"},
{"lineNum":" 4347","line":"operator+(const _CharT* __lhs , basic_string<_CharT,_Traits,_Allocator>&& __rhs)"},
{"lineNum":" 4348","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 4349","line":"    return _VSTD::move(__rhs.insert(0, __lhs));","class":"lineNoCov","hits":"0","possible_hits":"138",},
{"lineNum":" 4350","line":"}"},
{"lineNum":" 4351","line":""},
{"lineNum":" 4352","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4353","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4354","line":"basic_string<_CharT, _Traits, _Allocator>"},
{"lineNum":" 4355","line":"operator+(_CharT __lhs, basic_string<_CharT,_Traits,_Allocator>&& __rhs)"},
{"lineNum":" 4356","line":"{"},
{"lineNum":" 4357","line":"    __rhs.insert(__rhs.begin(), __lhs);"},
{"lineNum":" 4358","line":"    return _VSTD::move(__rhs);"},
{"lineNum":" 4359","line":"}"},
{"lineNum":" 4360","line":""},
{"lineNum":" 4361","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4362","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4363","line":"basic_string<_CharT, _Traits, _Allocator>"},
{"lineNum":" 4364","line":"operator+(basic_string<_CharT, _Traits, _Allocator>&& __lhs, const _CharT* __rhs)"},
{"lineNum":" 4365","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 4366","line":"    return _VSTD::move(__lhs.append(__rhs));","class":"lineNoCov","hits":"0","possible_hits":"260",},
{"lineNum":" 4367","line":"}"},
{"lineNum":" 4368","line":""},
{"lineNum":" 4369","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4370","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4371","line":"basic_string<_CharT, _Traits, _Allocator>"},
{"lineNum":" 4372","line":"operator+(basic_string<_CharT, _Traits, _Allocator>&& __lhs, _CharT __rhs)"},
{"lineNum":" 4373","line":"{"},
{"lineNum":" 4374","line":"    __lhs.push_back(__rhs);"},
{"lineNum":" 4375","line":"    return _VSTD::move(__lhs);"},
{"lineNum":" 4376","line":"}"},
{"lineNum":" 4377","line":""},
{"lineNum":" 4378","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 4379","line":""},
{"lineNum":" 4380","line":"// swap"},
{"lineNum":" 4381","line":""},
{"lineNum":" 4382","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4383","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4384","line":"void"},
{"lineNum":" 4385","line":"swap(basic_string<_CharT, _Traits, _Allocator>& __lhs,"},
{"lineNum":" 4386","line":"     basic_string<_CharT, _Traits, _Allocator>& __rhs)"},
{"lineNum":" 4387","line":"     _NOEXCEPT_(_NOEXCEPT_(__lhs.swap(__rhs)))"},
{"lineNum":" 4388","line":"{"},
{"lineNum":" 4389","line":"    __lhs.swap(__rhs);"},
{"lineNum":" 4390","line":"}"},
{"lineNum":" 4391","line":""},
{"lineNum":" 4392","line":"_LIBCPP_FUNC_VIS int                stoi  (const string& __str, size_t* __idx = nullptr, int __base = 10);"},
{"lineNum":" 4393","line":"_LIBCPP_FUNC_VIS long               stol  (const string& __str, size_t* __idx = nullptr, int __base = 10);"},
{"lineNum":" 4394","line":"_LIBCPP_FUNC_VIS unsigned long      stoul (const string& __str, size_t* __idx = nullptr, int __base = 10);"},
{"lineNum":" 4395","line":"_LIBCPP_FUNC_VIS long long          stoll (const string& __str, size_t* __idx = nullptr, int __base = 10);"},
{"lineNum":" 4396","line":"_LIBCPP_FUNC_VIS unsigned long long stoull(const string& __str, size_t* __idx = nullptr, int __base = 10);"},
{"lineNum":" 4397","line":""},
{"lineNum":" 4398","line":"_LIBCPP_FUNC_VIS float       stof (const string& __str, size_t* __idx = nullptr);"},
{"lineNum":" 4399","line":"_LIBCPP_FUNC_VIS double      stod (const string& __str, size_t* __idx = nullptr);"},
{"lineNum":" 4400","line":"_LIBCPP_FUNC_VIS long double stold(const string& __str, size_t* __idx = nullptr);"},
{"lineNum":" 4401","line":""},
{"lineNum":" 4402","line":"_LIBCPP_FUNC_VIS string to_string(int __val);"},
{"lineNum":" 4403","line":"_LIBCPP_FUNC_VIS string to_string(unsigned __val);"},
{"lineNum":" 4404","line":"_LIBCPP_FUNC_VIS string to_string(long __val);"},
{"lineNum":" 4405","line":"_LIBCPP_FUNC_VIS string to_string(unsigned long __val);"},
{"lineNum":" 4406","line":"_LIBCPP_FUNC_VIS string to_string(long long __val);"},
{"lineNum":" 4407","line":"_LIBCPP_FUNC_VIS string to_string(unsigned long long __val);"},
{"lineNum":" 4408","line":"_LIBCPP_FUNC_VIS string to_string(float __val);"},
{"lineNum":" 4409","line":"_LIBCPP_FUNC_VIS string to_string(double __val);"},
{"lineNum":" 4410","line":"_LIBCPP_FUNC_VIS string to_string(long double __val);"},
{"lineNum":" 4411","line":""},
{"lineNum":" 4412","line":"_LIBCPP_FUNC_VIS int                stoi  (const wstring& __str, size_t* __idx = nullptr, int __base = 10);"},
{"lineNum":" 4413","line":"_LIBCPP_FUNC_VIS long               stol  (const wstring& __str, size_t* __idx = nullptr, int __base = 10);"},
{"lineNum":" 4414","line":"_LIBCPP_FUNC_VIS unsigned long      stoul (const wstring& __str, size_t* __idx = nullptr, int __base = 10);"},
{"lineNum":" 4415","line":"_LIBCPP_FUNC_VIS long long          stoll (const wstring& __str, size_t* __idx = nullptr, int __base = 10);"},
{"lineNum":" 4416","line":"_LIBCPP_FUNC_VIS unsigned long long stoull(const wstring& __str, size_t* __idx = nullptr, int __base = 10);"},
{"lineNum":" 4417","line":""},
{"lineNum":" 4418","line":"_LIBCPP_FUNC_VIS float       stof (const wstring& __str, size_t* __idx = nullptr);"},
{"lineNum":" 4419","line":"_LIBCPP_FUNC_VIS double      stod (const wstring& __str, size_t* __idx = nullptr);"},
{"lineNum":" 4420","line":"_LIBCPP_FUNC_VIS long double stold(const wstring& __str, size_t* __idx = nullptr);"},
{"lineNum":" 4421","line":""},
{"lineNum":" 4422","line":"_LIBCPP_FUNC_VIS wstring to_wstring(int __val);"},
{"lineNum":" 4423","line":"_LIBCPP_FUNC_VIS wstring to_wstring(unsigned __val);"},
{"lineNum":" 4424","line":"_LIBCPP_FUNC_VIS wstring to_wstring(long __val);"},
{"lineNum":" 4425","line":"_LIBCPP_FUNC_VIS wstring to_wstring(unsigned long __val);"},
{"lineNum":" 4426","line":"_LIBCPP_FUNC_VIS wstring to_wstring(long long __val);"},
{"lineNum":" 4427","line":"_LIBCPP_FUNC_VIS wstring to_wstring(unsigned long long __val);"},
{"lineNum":" 4428","line":"_LIBCPP_FUNC_VIS wstring to_wstring(float __val);"},
{"lineNum":" 4429","line":"_LIBCPP_FUNC_VIS wstring to_wstring(double __val);"},
{"lineNum":" 4430","line":"_LIBCPP_FUNC_VIS wstring to_wstring(long double __val);"},
{"lineNum":" 4431","line":""},
{"lineNum":" 4432","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4433","line":"_LIBCPP_TEMPLATE_DATA_VIS"},
{"lineNum":" 4434","line":"const typename basic_string<_CharT, _Traits, _Allocator>::size_type"},
{"lineNum":" 4435","line":"               basic_string<_CharT, _Traits, _Allocator>::npos;"},
{"lineNum":" 4436","line":""},
{"lineNum":" 4437","line":"template <class _CharT, class _Allocator>"},
{"lineNum":" 4438","line":"struct _LIBCPP_TEMPLATE_VIS"},
{"lineNum":" 4439","line":"    hash<basic_string<_CharT, char_traits<_CharT>, _Allocator> >"},
{"lineNum":" 4440","line":"    : public unary_function<"},
{"lineNum":" 4441","line":"          basic_string<_CharT, char_traits<_CharT>, _Allocator>, size_t>"},
{"lineNum":" 4442","line":"{"},
{"lineNum":" 4443","line":"    size_t"},
{"lineNum":" 4444","line":"    operator()(const basic_string<_CharT, char_traits<_CharT>, _Allocator>& __val) const _NOEXCEPT"},
{"lineNum":" 4445","line":"    { return __do_string_hash(__val.data(), __val.data() + __val.size()); }","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 4446","line":"};"},
{"lineNum":" 4447","line":""},
{"lineNum":" 4448","line":""},
{"lineNum":" 4449","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4450","line":"basic_ostream<_CharT, _Traits>&"},
{"lineNum":" 4451","line":"operator<<(basic_ostream<_CharT, _Traits>& __os,"},
{"lineNum":" 4452","line":"           const basic_string<_CharT, _Traits, _Allocator>& __str);"},
{"lineNum":" 4453","line":""},
{"lineNum":" 4454","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4455","line":"basic_istream<_CharT, _Traits>&"},
{"lineNum":" 4456","line":"operator>>(basic_istream<_CharT, _Traits>& __is,"},
{"lineNum":" 4457","line":"           basic_string<_CharT, _Traits, _Allocator>& __str);"},
{"lineNum":" 4458","line":""},
{"lineNum":" 4459","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4460","line":"basic_istream<_CharT, _Traits>&"},
{"lineNum":" 4461","line":"getline(basic_istream<_CharT, _Traits>& __is,"},
{"lineNum":" 4462","line":"        basic_string<_CharT, _Traits, _Allocator>& __str, _CharT __dlm);"},
{"lineNum":" 4463","line":""},
{"lineNum":" 4464","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4465","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4466","line":"basic_istream<_CharT, _Traits>&"},
{"lineNum":" 4467","line":"getline(basic_istream<_CharT, _Traits>& __is,"},
{"lineNum":" 4468","line":"        basic_string<_CharT, _Traits, _Allocator>& __str);"},
{"lineNum":" 4469","line":""},
{"lineNum":" 4470","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4471","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4472","line":"basic_istream<_CharT, _Traits>&"},
{"lineNum":" 4473","line":"getline(basic_istream<_CharT, _Traits>&& __is,"},
{"lineNum":" 4474","line":"        basic_string<_CharT, _Traits, _Allocator>& __str, _CharT __dlm);"},
{"lineNum":" 4475","line":""},
{"lineNum":" 4476","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4477","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4478","line":"basic_istream<_CharT, _Traits>&"},
{"lineNum":" 4479","line":"getline(basic_istream<_CharT, _Traits>&& __is,"},
{"lineNum":" 4480","line":"        basic_string<_CharT, _Traits, _Allocator>& __str);"},
{"lineNum":" 4481","line":""},
{"lineNum":" 4482","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":" 4483","line":"template <class _CharT, class _Traits, class _Allocator, class _Up>"},
{"lineNum":" 4484","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4485","line":"    typename basic_string<_CharT, _Traits, _Allocator>::size_type"},
{"lineNum":" 4486","line":"    erase(basic_string<_CharT, _Traits, _Allocator>& __str, const _Up& __v) {"},
{"lineNum":" 4487","line":"  auto __old_size = __str.size();"},
{"lineNum":" 4488","line":"  __str.erase(_VSTD::remove(__str.begin(), __str.end(), __v), __str.end());"},
{"lineNum":" 4489","line":"  return __old_size - __str.size();"},
{"lineNum":" 4490","line":"}"},
{"lineNum":" 4491","line":""},
{"lineNum":" 4492","line":"template <class _CharT, class _Traits, class _Allocator, class _Predicate>"},
{"lineNum":" 4493","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4494","line":"    typename basic_string<_CharT, _Traits, _Allocator>::size_type"},
{"lineNum":" 4495","line":"    erase_if(basic_string<_CharT, _Traits, _Allocator>& __str,"},
{"lineNum":" 4496","line":"             _Predicate __pred) {"},
{"lineNum":" 4497","line":"  auto __old_size = __str.size();"},
{"lineNum":" 4498","line":"  __str.erase(_VSTD::remove_if(__str.begin(), __str.end(), __pred),"},
{"lineNum":" 4499","line":"              __str.end());"},
{"lineNum":" 4500","line":"  return __old_size - __str.size();"},
{"lineNum":" 4501","line":"}"},
{"lineNum":" 4502","line":"#endif"},
{"lineNum":" 4503","line":""},
{"lineNum":" 4504","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 4505","line":""},
{"lineNum":" 4506","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4507","line":"bool"},
{"lineNum":" 4508","line":"basic_string<_CharT, _Traits, _Allocator>::__dereferenceable(const const_iterator* __i) const"},
{"lineNum":" 4509","line":"{"},
{"lineNum":" 4510","line":"    return this->data() <= _VSTD::__to_address(__i->base()) &&"},
{"lineNum":" 4511","line":"           _VSTD::__to_address(__i->base()) < this->data() + this->size();"},
{"lineNum":" 4512","line":"}"},
{"lineNum":" 4513","line":""},
{"lineNum":" 4514","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4515","line":"bool"},
{"lineNum":" 4516","line":"basic_string<_CharT, _Traits, _Allocator>::__decrementable(const const_iterator* __i) const"},
{"lineNum":" 4517","line":"{"},
{"lineNum":" 4518","line":"    return this->data() < _VSTD::__to_address(__i->base()) &&"},
{"lineNum":" 4519","line":"           _VSTD::__to_address(__i->base()) <= this->data() + this->size();"},
{"lineNum":" 4520","line":"}"},
{"lineNum":" 4521","line":""},
{"lineNum":" 4522","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4523","line":"bool"},
{"lineNum":" 4524","line":"basic_string<_CharT, _Traits, _Allocator>::__addable(const const_iterator* __i, ptrdiff_t __n) const"},
{"lineNum":" 4525","line":"{"},
{"lineNum":" 4526","line":"    const value_type* __p = _VSTD::__to_address(__i->base()) + __n;"},
{"lineNum":" 4527","line":"    return this->data() <= __p && __p <= this->data() + this->size();"},
{"lineNum":" 4528","line":"}"},
{"lineNum":" 4529","line":""},
{"lineNum":" 4530","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":" 4531","line":"bool"},
{"lineNum":" 4532","line":"basic_string<_CharT, _Traits, _Allocator>::__subscriptable(const const_iterator* __i, ptrdiff_t __n) const"},
{"lineNum":" 4533","line":"{"},
{"lineNum":" 4534","line":"    const value_type* __p = _VSTD::__to_address(__i->base()) + __n;"},
{"lineNum":" 4535","line":"    return this->data() <= __p && __p < this->data() + this->size();"},
{"lineNum":" 4536","line":"}"},
{"lineNum":" 4537","line":""},
{"lineNum":" 4538","line":"#endif // _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 4539","line":""},
{"lineNum":" 4540","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 4541","line":"// Literal suffixes for basic_string [basic.string.literals]"},
{"lineNum":" 4542","line":"inline namespace literals"},
{"lineNum":" 4543","line":"{"},
{"lineNum":" 4544","line":"  inline namespace string_literals"},
{"lineNum":" 4545","line":"  {"},
{"lineNum":" 4546","line":"    inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4547","line":"    basic_string<char> operator \"\" s( const char *__str, size_t __len )"},
{"lineNum":" 4548","line":"    {"},
{"lineNum":" 4549","line":"        return basic_string<char> (__str, __len);"},
{"lineNum":" 4550","line":"    }"},
{"lineNum":" 4551","line":""},
{"lineNum":" 4552","line":"    inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4553","line":"    basic_string<wchar_t> operator \"\" s( const wchar_t *__str, size_t __len )"},
{"lineNum":" 4554","line":"    {"},
{"lineNum":" 4555","line":"        return basic_string<wchar_t> (__str, __len);"},
{"lineNum":" 4556","line":"    }"},
{"lineNum":" 4557","line":""},
{"lineNum":" 4558","line":"#ifndef _LIBCPP_HAS_NO_CHAR8_T"},
{"lineNum":" 4559","line":"    inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4560","line":"    basic_string<char8_t> operator \"\" s(const char8_t *__str, size_t __len) _NOEXCEPT"},
{"lineNum":" 4561","line":"    {"},
{"lineNum":" 4562","line":"        return basic_string<char8_t> (__str, __len);"},
{"lineNum":" 4563","line":"    }"},
{"lineNum":" 4564","line":"#endif"},
{"lineNum":" 4565","line":""},
{"lineNum":" 4566","line":"    inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4567","line":"    basic_string<char16_t> operator \"\" s( const char16_t *__str, size_t __len )"},
{"lineNum":" 4568","line":"    {"},
{"lineNum":" 4569","line":"        return basic_string<char16_t> (__str, __len);"},
{"lineNum":" 4570","line":"    }"},
{"lineNum":" 4571","line":""},
{"lineNum":" 4572","line":"    inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4573","line":"    basic_string<char32_t> operator \"\" s( const char32_t *__str, size_t __len )"},
{"lineNum":" 4574","line":"    {"},
{"lineNum":" 4575","line":"        return basic_string<char32_t> (__str, __len);"},
{"lineNum":" 4576","line":"    }"},
{"lineNum":" 4577","line":"  }"},
{"lineNum":" 4578","line":"}"},
{"lineNum":" 4579","line":"#endif"},
{"lineNum":" 4580","line":""},
{"lineNum":" 4581","line":"_LIBCPP_END_NAMESPACE_STD"},
{"lineNum":" 4582","line":""},
{"lineNum":" 4583","line":"_LIBCPP_POP_MACROS"},
{"lineNum":" 4584","line":""},
{"lineNum":" 4585","line":"#endif // _LIBCPP_STRING"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 123, "covered" : 34,};
var merged_data = [];
