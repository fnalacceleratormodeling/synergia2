var data = {lines:[
{"lineNum":"    1","line":"/*============================================================================="},
{"lineNum":"    2","line":"    Copyright (c) 2016 Kohei Takahashi"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"    Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    5","line":"    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    6","line":"==============================================================================*/"},
{"lineNum":"    7","line":"#ifndef BOOST_PHOENIX_CORE_EXPRESSION_HPP"},
{"lineNum":"    8","line":"#define BOOST_PHOENIX_CORE_EXPRESSION_HPP"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#include <boost/phoenix/core/limits.hpp>"},
{"lineNum":"   11","line":"#include <boost/fusion/sequence/intrinsic/at.hpp>"},
{"lineNum":"   12","line":"#include <boost/phoenix/core/as_actor.hpp>"},
{"lineNum":"   13","line":"#include <boost/phoenix/core/detail/expression.hpp>"},
{"lineNum":"   14","line":"#include <boost/phoenix/core/domain.hpp>"},
{"lineNum":"   15","line":"#include <boost/proto/domain.hpp>"},
{"lineNum":"   16","line":"#include <boost/proto/make_expr.hpp>"},
{"lineNum":"   17","line":"#include <boost/proto/transform/pass_through.hpp>"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"namespace boost { namespace phoenix"},
{"lineNum":"   20","line":"{"},
{"lineNum":"   21","line":"    template <typename Expr> struct actor;"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"#ifdef BOOST_PHOENIX_NO_VARIADIC_EXPRESSION"},
{"lineNum":"   24","line":"    #include <boost/phoenix/core/detail/cpp03/expression.hpp>"},
{"lineNum":"   25","line":"#else"},
{"lineNum":"   26","line":"    template <template <typename> class Actor, typename Tag, typename... A>"},
{"lineNum":"   27","line":"    struct expr_ext;"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"    // This filter cuts arguments of a template pack after a first void."},
{"lineNum":"   30","line":"    // It is necessary because the interface can be used in C++03 style."},
{"lineNum":"   31","line":"    template <typename Tag, typename... A>"},
{"lineNum":"   32","line":"    struct expr_impl;"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"    // Helper template. Used to store filtered argument types."},
{"lineNum":"   35","line":"    template <typename... A>"},
{"lineNum":"   36","line":"    struct expr_arg_types {};"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"    template <typename Tag, typename... A>"},
{"lineNum":"   39","line":"    struct expr_impl<Tag, expr_arg_types<A...>> : expr_ext<actor, Tag, A...> {};"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"    template <typename Tag, typename... A, typename... T>"},
{"lineNum":"   42","line":"    struct expr_impl<Tag, expr_arg_types<A...>, void, T...> : expr_ext<actor, Tag, A...> {};"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"    template <typename Tag, typename... A, typename H, typename... T>"},
{"lineNum":"   45","line":"    struct expr_impl<Tag, expr_arg_types<A...>, H, T...> : expr_impl<Tag, expr_arg_types<A..., H>, T...> {};"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"    template <typename Tag, typename... A>"},
{"lineNum":"   48","line":"    struct expr : expr_impl<Tag, expr_arg_types<>, A...> {};"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"    template <template <typename> class Actor, typename Tag, typename... A>"},
{"lineNum":"   51","line":"    struct expr_ext"},
{"lineNum":"   52","line":"        : proto::transform<expr_ext<Actor, Tag, A...>, int>"},
{"lineNum":"   53","line":"    {"},
{"lineNum":"   54","line":"        typedef"},
{"lineNum":"   55","line":"            typename proto::result_of::make_expr<"},
{"lineNum":"   56","line":"                Tag"},
{"lineNum":"   57","line":"              , phoenix_default_domain //proto::basic_default_domain"},
{"lineNum":"   58","line":"              , typename proto::detail::uncvref<A>::type..."},
{"lineNum":"   59","line":"            >::type"},
{"lineNum":"   60","line":"        base_type;"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"        typedef Actor<base_type> type;"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"        typedef typename proto::nary_expr<Tag, A...>::proto_grammar proto_grammar;"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"        static type make(A const&... a)"},
{"lineNum":"   67","line":"        { //?? actor or Actor??","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   68","line":"            //Actor<base_type> const e ="},
{"lineNum":"   69","line":"            actor<base_type> const e ="},
{"lineNum":"   70","line":"            {"},
{"lineNum":"   71","line":"                proto::make_expr<Tag, phoenix_default_domain>(a...)"},
{"lineNum":"   72","line":"            };"},
{"lineNum":"   73","line":"            return e;"},
{"lineNum":"   74","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"        template<typename Expr, typename State, typename Data>"},
{"lineNum":"   77","line":"        struct impl"},
{"lineNum":"   78","line":"            : proto::pass_through<expr_ext>::template impl<Expr, State, Data>"},
{"lineNum":"   79","line":"        {};"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"        typedef Tag proto_tag;"},
{"lineNum":"   82","line":"    };"},
{"lineNum":"   83","line":"#endif"},
{"lineNum":"   84","line":"}}"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 2, "covered" : 0,};
var merged_data = [];
