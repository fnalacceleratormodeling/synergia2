var data = {lines:[
{"lineNum":"    1","line":"#ifndef SYNERGIA_UTILS_HDF5_SEQ_WRITER_H"},
{"lineNum":"    2","line":"#define SYNERGIA_UTILS_HDF5_SEQ_WRITER_H"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#include <vector>"},
{"lineNum":"    5","line":"#include <string>"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"#include \"synergia/utils/commxx.h\""},
{"lineNum":"    8","line":"#include \"synergia/utils/hdf5_misc.h\""},
{"lineNum":"    9","line":"#include \"synergia/utils/hdf5_reader.h\""},
{"lineNum":"   10","line":"#include \"synergia/utils/multi_array_typedefs.h\""},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"class Hdf5_seq_writer","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":"   13","line":"{"},
{"lineNum":"   14","line":"private:"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"    Hdf5_handler const& file;"},
{"lineNum":"   17","line":"    std::string name;"},
{"lineNum":"   18","line":"    Commxx const& comm;"},
{"lineNum":"   19","line":"    int root;"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"    int mpi_size;"},
{"lineNum":"   22","line":"    int mpi_rank;"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"    std::vector<hsize_t> fdims;"},
{"lineNum":"   25","line":"    std::vector<hsize_t> offset;"},
{"lineNum":"   26","line":"    Hdf5_handler dataset;"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"    bool setup;"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"public:"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"    Hdf5_seq_writer("},
{"lineNum":"   33","line":"            Hdf5_handler const& file,"},
{"lineNum":"   34","line":"            std::string  const& name,"},
{"lineNum":"   35","line":"            Commxx const& comm,"},
{"lineNum":"   36","line":"            int root_rank)"},
{"lineNum":"   37","line":"        : file(file)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   38","line":"        , name(name)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   39","line":"        , comm(comm)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   40","line":"        , root(root_rank)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   41","line":"        , mpi_size(comm.size())","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   42","line":"        , mpi_rank(comm.rank())","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   43","line":"        , fdims()"},
{"lineNum":"   44","line":"        , offset()"},
{"lineNum":"   45","line":"        , dataset()"},
{"lineNum":"   46","line":"        , setup(false)"},
{"lineNum":"   47","line":"    { }"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"    template<typename T>"},
{"lineNum":"   50","line":"    void append(T const& data, bool collective)"},
{"lineNum":"   51","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   52","line":"        auto di = syn::extract_data_info(data);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"        // promote the dimension for collective write of a scalar"},
{"lineNum":"   55","line":"        if (collective && di.dims.size()==0)","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"   56","line":"            di.dims = {1};","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"        // collect data dims"},
{"lineNum":"   59","line":"        auto all_dims0 = syn::collect_dims(","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   60","line":"                di.dims, collective, comm, root);","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"        // offsets for each rank (offsets of dim0 in the combined array)"},
{"lineNum":"   63","line":"        std::vector<hsize_t> offsets(mpi_size, 0);","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"   64","line":"        for (int r=0; r<mpi_size-1; ++r) offsets[r+1] = offsets[r] + all_dims0[r];","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"        // dim0 of the combined array"},
{"lineNum":"   67","line":"        hsize_t dim0 = offsets[mpi_size-1] + all_dims0[mpi_size-1];","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"        // promote the data dim and set the first dim to 1"},
{"lineNum":"   70","line":"        di.dims.resize(di.dims.size() + 1);"},
{"lineNum":"   71","line":"        for(int i=di.dims.size()-1; i>0; --i) di.dims[i] = di.dims[i-1];","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   72","line":"        di.dims[0] = 1;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"        // setup dataset"},
{"lineNum":"   75","line":"        if(!setup)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   76","line":"        {"},
{"lineNum":"   77","line":"            bool has = Hdf5_reader::has_dataset(file, name, comm, root);","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"#ifndef USE_PARALLEL_HDF5"},
{"lineNum":"   80","line":"            if (mpi_rank == root)"},
{"lineNum":"   81","line":"#endif"},
{"lineNum":"   82","line":"            {"},
{"lineNum":"   83","line":"                setup_dataset(di, offsets, dim0, has);","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   84","line":"            }"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"            setup = true;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   87","line":"        }"},
{"lineNum":"   88","line":"        else"},
{"lineNum":"   89","line":"        {"},
{"lineNum":"   90","line":"#ifndef USE_PARALLEL_HDF5"},
{"lineNum":"   91","line":"            if (mpi_rank == root)"},
{"lineNum":"   92","line":"#endif"},
{"lineNum":"   93","line":"            {"},
{"lineNum":"   94","line":"                if (!verify_dims(di, dim0)) throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"   95","line":"                        \"Hdf5_seq_writer: inconsistent dims in consective write\");"},
{"lineNum":"   96","line":"            }"},
{"lineNum":"   97","line":"        }"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"        do_append(di, offsets, all_dims0);","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  100","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"    bool verify_dims(syn::data_info_t const& di, hsize_t dim0)"},
{"lineNum":"  103","line":"    {"},
{"lineNum":"  104","line":"        if (fdims.size()>1 && dim0!=fdims[1]) return false;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"        for (int i=2; i<di.dims.size(); ++i)","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"  107","line":"            if (di.dims[i] != fdims[i]) return false;","class":"lineNoCov","hits":"0","possible_hits":"15",},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"        return true;"},
{"lineNum":"  110","line":"    }"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"    void setup_dataset("},
{"lineNum":"  113","line":"            syn::data_info_t& di,"},
{"lineNum":"  114","line":"            std::vector<hsize_t> const& offsets,"},
{"lineNum":"  115","line":"            hsize_t dim0,"},
{"lineNum":"  116","line":"            bool has_dataset )"},
{"lineNum":"  117","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  118","line":"        const size_t good_chunk_size = 8192; // pulled out of air"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"        // extended data rank"},
{"lineNum":"  121","line":"        auto d_rank = di.dims.size();"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"        // offset of the slab (nslabs, off0, 0, 0, ... )"},
{"lineNum":"  124","line":"        offset = std::vector<hsize_t>(d_rank, 0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"        // dims of all data in the current file"},
{"lineNum":"  127","line":"        // (num_slabs x size_of_a_slab), or,"},
{"lineNum":"  128","line":"        // (num_slabs x all_dim0 x dim1 x dim2 x ...)"},
{"lineNum":"  129","line":"        fdims = di.dims;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  130","line":"        if (fdims.size() > 1) fdims[1] = dim0;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  131","line":"        fdims[0] = 0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"        // need to have a valid file handler to proceed"},
{"lineNum":"  134","line":"        if (!file.valid())","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  135","line":"            throw std::runtime_error(\"invalid file handler\");","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"        auto max_fdims = fdims;"},
{"lineNum":"  138","line":"        auto chunk_fdims = fdims;"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"        size_t num_ele = 1;"},
{"lineNum":"  141","line":"        for(int i=1; i<fdims.size(); ++i) num_ele *= fdims[i];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  142","line":"        auto data_size = di.atomic_data_size * num_ele;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"        max_fdims[0]   = H5S_UNLIMITED;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  145","line":"        chunk_fdims[0] = (data_size < good_chunk_size)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  146","line":"                         ? good_chunk_size/data_size : 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"        // are we resuming from an existing file or start new"},
{"lineNum":"  149","line":"        if (has_dataset)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  150","line":"        {"},
{"lineNum":"  151","line":"            // try to open the dataset"},
{"lineNum":"  152","line":"            dataset = H5Dopen(file, name.c_str(), H5P_DEFAULT);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  153","line":"            Hdf5_handler fspace = H5Dget_space(dataset);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"            // check the data_rank"},
{"lineNum":"  156","line":"            if ( H5Sget_simple_extent_ndims(fspace) != d_rank )","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  157","line":"            {"},
{"lineNum":"  158","line":"                throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  159","line":"                        \"Hdf5_seq_writer::resumed data has wrong rank\");"},
{"lineNum":"  160","line":"            }"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"            std::vector<hsize_t> file_dims(d_rank);"},
{"lineNum":"  163","line":"            herr_t res = H5Sget_simple_extent_dims(fspace, &file_dims[0], NULL);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  164","line":"            if (res < 0) throw Hdf5_exception(\"Error getting dims of the dataspace\");","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"            // check the dims of each rank"},
{"lineNum":"  167","line":"            for (int i=1; i<d_rank; ++i)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  168","line":"            {"},
{"lineNum":"  169","line":"                if (fdims[i] != file_dims[i]) throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  170","line":"                        \"Hdf5_seq_writer::inconsistent data dimensions\" );"},
{"lineNum":"  171","line":"            }"},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"            fdims[0]  = file_dims[0];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  174","line":"            offset[0] = file_dims[0];","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  175","line":"        }"},
{"lineNum":"  176","line":"        else"},
{"lineNum":"  177","line":"        {"},
{"lineNum":"  178","line":"            // dataset not exist, create a new one"},
{"lineNum":"  179","line":"            if (dim0 == 0) throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  180","line":"                    \"Hdf5_seq_writer: zero data size encountered\");"},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"            Hdf5_handler cparms = H5Pcreate(H5P_DATASET_CREATE);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  183","line":"            herr_t res = H5Pset_chunk(cparms, d_rank, &chunk_fdims[0]);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  184","line":"            if (res < 0) throw Hdf5_exception();","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"            Hdf5_handler fspace = H5Screate_simple(d_rank, &fdims[0], &max_fdims[0]);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  187","line":"            dataset = H5Dcreate(file, name.c_str(), di.atomic_type,","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  188","line":"                    fspace, H5P_DEFAULT, cparms, H5P_DEFAULT);"},
{"lineNum":"  189","line":"        }"},
{"lineNum":"  190","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"    void do_append("},
{"lineNum":"  194","line":"            syn::data_info_t const& di,"},
{"lineNum":"  195","line":"            std::vector<hsize_t> const& offsets,"},
{"lineNum":"  196","line":"            std::vector<hsize_t> const& all_dims0 )"},
{"lineNum":"  197","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  198","line":"#ifdef USE_PARALLEL_HDF5"},
{"lineNum":"  199","line":"        if (!file.valid())","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  200","line":"            throw std::runtime_error(\"invalid file handler\");","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"        auto dimsm = di.dims;"},
{"lineNum":"  203","line":"        if (dimsm.size() > 1) dimsm[1] = all_dims0[mpi_rank];","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"        // create dataspace for current data block (it looks like max_dims can be null)"},
{"lineNum":"  206","line":"        Hdf5_handler mspace = H5Screate_simple(dimsm.size(), dimsm.data(), NULL);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"        // increment and extend the dataset to the new size (last_dim+1)"},
{"lineNum":"  209","line":"        ++fdims[0];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  210","line":"        herr_t res = H5Dset_extent(dataset, fdims.data());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  211","line":"        if (res < 0) throw Hdf5_exception();","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"        // select the slab to write"},
{"lineNum":"  214","line":"        Hdf5_handler fspace = H5Dget_space(dataset);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  215","line":"        if (offset.size() > 1) offset[1] = offsets[mpi_rank];","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"        res = H5Sselect_hyperslab(fspace, H5S_SELECT_SET,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  218","line":"                offset.data(), NULL, dimsm.data(), NULL);"},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"        if (res < 0) throw Hdf5_exception();","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"        // collective"},
{"lineNum":"  223","line":"        Hdf5_handler plist_id = H5Pcreate(H5P_DATASET_XFER);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  224","line":"        H5Pset_dxpl_mpio(plist_id, H5FD_MPIO_COLLECTIVE);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"        // write"},
{"lineNum":"  227","line":"        res = H5Dwrite(dataset, di.atomic_type, mspace, fspace, plist_id, di.ptr);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  228","line":"        if (res < 0) throw Hdf5_exception();","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"        // increment the offset"},
{"lineNum":"  231","line":"        ++offset[0];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  232","line":"#else"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"        if (mpi_rank == root)"},
{"lineNum":"  235","line":"        {"},
{"lineNum":"  236","line":"            if (!file.valid())"},
{"lineNum":"  237","line":"                throw std::runtime_error(\"invalid file handler\");"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"            // increment and extend the dataset to the new size (last_dim+1)"},
{"lineNum":"  240","line":"            ++fdims[0];"},
{"lineNum":"  241","line":"            herr_t res = H5Dset_extent(dataset, fdims.data());"},
{"lineNum":"  242","line":"            if (res < 0) throw Hdf5_exception();"},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"            // filespace"},
{"lineNum":"  245","line":"            Hdf5_handler fspace = H5Dget_space(dataset);"},
{"lineNum":"  246","line":""},
{"lineNum":"  247","line":"            // local data"},
{"lineNum":"  248","line":"            auto dimsm = di.dims;"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"            // loop through ranks, recv and write"},
{"lineNum":"  251","line":"            for(int r=0; r<mpi_size; ++r)"},
{"lineNum":"  252","line":"            {"},
{"lineNum":"  253","line":"                if (dimsm.size()>1) dimsm[1] = all_dims0[r];"},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"                // create dataspace for current data block (it looks like max_dims can be null)"},
{"lineNum":"  256","line":"                Hdf5_handler mspace = H5Screate_simple(dimsm.size(), dimsm.data(), NULL);"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"                // select the slab to write"},
{"lineNum":"  259","line":"                if (offset.size() > 1) offset[1] = offsets[r];"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"                res = H5Sselect_hyperslab(fspace, H5S_SELECT_SET,"},
{"lineNum":"  262","line":"                        offset.data(), NULL, dimsm.data(), NULL);"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"                if (res < 0) throw Hdf5_exception();"},
{"lineNum":"  265","line":""},
{"lineNum":"  266","line":"                if (r == root)"},
{"lineNum":"  267","line":"                {"},
{"lineNum":"  268","line":"                    // write"},
{"lineNum":"  269","line":"                    res = H5Dwrite(dataset, di.atomic_type, mspace, fspace, H5P_DEFAULT, di.ptr);"},
{"lineNum":"  270","line":"                    if (res < 0) throw Hdf5_exception();"},
{"lineNum":"  271","line":"                }"},
{"lineNum":"  272","line":"                else"},
{"lineNum":"  273","line":"                {"},
{"lineNum":"  274","line":"                    size_t sz = di.atomic_data_size;"},
{"lineNum":"  275","line":"                    for(auto d : dimsm) sz *= d;"},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"                    if (sz)"},
{"lineNum":"  278","line":"                    {"},
{"lineNum":"  279","line":"                        std::vector<uint8_t> buf(sz);;"},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"                        // mpi recv from rank r"},
{"lineNum":"  282","line":"                        MPI_Status status;"},
{"lineNum":"  283","line":"                        MPI_Recv((void*)buf.data(), buf.size(), MPI_BYTE, r, 0, comm, &status);"},
{"lineNum":"  284","line":""},
{"lineNum":"  285","line":"                        // write"},
{"lineNum":"  286","line":"                        herr_t res = H5Dwrite(dataset, di.atomic_type, mspace, fspace,"},
{"lineNum":"  287","line":"                                H5P_DEFAULT, (void*)buf.data());"},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"                        if (res < 0) throw Hdf5_exception();"},
{"lineNum":"  290","line":"                    }"},
{"lineNum":"  291","line":"                }"},
{"lineNum":"  292","line":"            }"},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"            // increment the offset"},
{"lineNum":"  295","line":"            ++offset[0];"},
{"lineNum":"  296","line":"        }"},
{"lineNum":"  297","line":"        else"},
{"lineNum":"  298","line":"        {"},
{"lineNum":"  299","line":"            // local dims(counts)"},
{"lineNum":"  300","line":"            auto dimsm = di.dims;"},
{"lineNum":"  301","line":"            if (dimsm.size()>1) dimsm[1] = all_dims0[mpi_rank];"},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"            size_t sz = di.atomic_data_size;"},
{"lineNum":"  304","line":"            for(auto d : dimsm) sz *= d;"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"            if (sz) MPI_Send((void*)di.ptr, sz, MPI_BYTE, root, 0, comm);"},
{"lineNum":"  307","line":"        }"},
{"lineNum":"  308","line":""},
{"lineNum":"  309","line":"#endif"},
{"lineNum":"  310","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":""},
{"lineNum":"  314","line":"};"},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 76, "covered" : 0,};
var merged_data = [];
