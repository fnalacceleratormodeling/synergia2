var data = {lines:[
{"lineNum":"    1","line":""},
{"lineNum":"    2","line":"#include \"mx_parse.h\""},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#include <cmath>"},
{"lineNum":"    5","line":"#include <limits>"},
{"lineNum":"    6","line":"#include <iterator>"},
{"lineNum":"    7","line":"#include <fstream>"},
{"lineNum":"    8","line":"#include <sstream>"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#include <boost/any.hpp>"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"#include <boost/math/constants/constants.hpp>"},
{"lineNum":"   13","line":"#include <boost/algorithm/string.hpp>"},
{"lineNum":"   14","line":"#include <boost/algorithm/string/split.hpp>"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"#include <boost/spirit/include/qi.hpp>"},
{"lineNum":"   17","line":"#include <boost/spirit/include/phoenix_bind.hpp>"},
{"lineNum":"   18","line":"#include <boost/spirit/include/phoenix_core.hpp>"},
{"lineNum":"   19","line":"#include <boost/spirit/include/phoenix_operator.hpp>"},
{"lineNum":"   20","line":"#include <boost/spirit/include/phoenix.hpp>"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"#include <boost/fusion/include/std_pair.hpp>"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"#include <synergia/foundation/physical_constants.h>"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"namespace ascii = ::boost::spirit::ascii;"},
{"lineNum":"   28","line":"namespace phx   = ::boost::phoenix;"},
{"lineNum":"   29","line":"namespace qi    = ::boost::spirit::qi;"},
{"lineNum":"   30","line":"namespace ql    = ::boost::spirit::qi::labels;"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"using ascii::char_;"},
{"lineNum":"   33","line":"using ascii::no_case;"},
{"lineNum":"   34","line":"using ascii::digit;"},
{"lineNum":"   35","line":"using ascii::graph;"},
{"lineNum":"   36","line":"using ascii::space;"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"//using phx::ref;"},
{"lineNum":"   39","line":"//using phx::bind;"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"using qi::_1;"},
{"lineNum":"   42","line":"using qi::_2;"},
{"lineNum":"   43","line":"using qi::_3;"},
{"lineNum":"   44","line":"using qi::_val;"},
{"lineNum":"   45","line":"using qi::_a;"},
{"lineNum":"   46","line":"using qi::_b;"},
{"lineNum":"   47","line":"using qi::eol;"},
{"lineNum":"   48","line":"using qi::lexeme;"},
{"lineNum":"   49","line":"using qi::lit;"},
{"lineNum":"   50","line":"using qi::bool_;"},
{"lineNum":"   51","line":"using qi::int_;"},
{"lineNum":"   52","line":"using qi::double_;"},
{"lineNum":"   53","line":"//using qi::as;  -- boost 1.45+"},
{"lineNum":"   54","line":"using qi::raw;"},
{"lineNum":"   55","line":"using qi::skip;"},
{"lineNum":"   56","line":"using qi::locals;"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"using boost::spirit::qi::real_parser;"},
{"lineNum":"   59","line":"using boost::spirit::qi::real_policies;"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"using boost::any;"},
{"lineNum":"   62","line":"using boost::any_cast;"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"using namespace qi::labels;"},
{"lineNum":"   65","line":"using namespace std;"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"// ------------------------------------------------------------------"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"namespace synergia"},
{"lineNum":"   71","line":"{"},
{"lineNum":"   72","line":"  namespace detail"},
{"lineNum":"   73","line":"  {"},
{"lineNum":"   74","line":"    double pos(double v) { return v; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   75","line":"    double neg(double v) { return -v; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"    double add(double v1, double v2) { return v1+v2; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   78","line":"    double sub(double v1, double v2) { return v1-v2; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   79","line":"    double mul(double v1, double v2) { return v1*v2; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   80","line":"    double div(double v1, double v2) { return v1/v2; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"    bool op_l (double l, double r) { return l< r; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   83","line":"    bool op_le(double l, double r) { return l<=r; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   84","line":"    bool op_e (double l, double r) { return l==r; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   85","line":"    bool op_ne(double l, double r) { return l!=r; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   86","line":"    bool op_g (double l, double r) { return l> r; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   87","line":"    bool op_ge(double l, double r) { return l>=r; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   88","line":"  }"},
{"lineNum":"   89","line":"}"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"namespace synergia"},
{"lineNum":"   93","line":"{"},
{"lineNum":"   94","line":"  template <typename Iterator, typename Skip>"},
{"lineNum":"   95","line":"    struct expression;"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"  // parse doc into a statement tree"},
{"lineNum":"   98","line":"  template <typename Iterator, typename Skip>"},
{"lineNum":"   99","line":"    struct madx_tree_parser;"},
{"lineNum":"  100","line":"}"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"template <typename Iterator, typename Skip>"},
{"lineNum":"  104","line":"struct synergia::expression","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  105","line":"  : qi::grammar< Iterator, mx_expr(), Skip >"},
{"lineNum":"  106","line":"{"},
{"lineNum":"  107","line":"  // real policy to allow \'d\' and \'D\' as exponent"},
{"lineNum":"  108","line":"  struct ts_real_policies"},
{"lineNum":"  109","line":"      : boost::spirit::qi::real_policies<double>"},
{"lineNum":"  110","line":"  {"},
{"lineNum":"  111","line":"    static bool"},
{"lineNum":"  112","line":"      parse_exp(Iterator & first, Iterator const &)"},
{"lineNum":"  113","line":"    {"},
{"lineNum":"  114","line":"      if( string(\"eEdD\").find(*first) != string::npos )","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  115","line":"      {"},
{"lineNum":"  116","line":"        ++first; return true;"},
{"lineNum":"  117","line":"      }"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"      return false;"},
{"lineNum":"  120","line":"    }"},
{"lineNum":"  121","line":"  };"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"  // symbol table for constants like \"pi\""},
{"lineNum":"  125","line":"  struct constant_"},
{"lineNum":"  126","line":"    : qi::symbols< typename std::iterator_traits<Iterator>::value_type, double>"},
{"lineNum":"  127","line":"  {"},
{"lineNum":"  128","line":"    constant_()"},
{"lineNum":"  129","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  130","line":"      this->add (\"pi\"     , boost::math::constants::pi<double>()     )"},
{"lineNum":"  131","line":"                (\"twopi\"  , boost::math::constants::two_pi<double>() )"},
{"lineNum":"  132","line":"             // (\"degpi\"  , boost::math::constants::radian<double>() )   -- boost 1.51+"},
{"lineNum":"  133","line":"             // (\"raddeg\" , boost::math::constants::degree<double>() )   -- boost 1.51+"},
{"lineNum":"  134","line":"                (\"degrad\" , 180.0 / boost::math::constants::pi<double>() )"},
{"lineNum":"  135","line":"                (\"raddeg\" , boost::math::constants::pi<double>() / 180.0 )"},
{"lineNum":"  136","line":"                (\"e\"      , boost::math::constants::e<double>()      )"},
{"lineNum":"  137","line":"                (\"emass\"  , pconstants::me                           )"},
{"lineNum":"  138","line":"                (\"pmass\"  , pconstants::mp                           )"},
{"lineNum":"  139","line":"                (\"mumass\" , pconstants::mmu                          )"},
{"lineNum":"  140","line":"                (\"clight\" , pconstants::c                            )"},
{"lineNum":"  141","line":"                (\"qelect\" , pconstants::e                            )"},
{"lineNum":"  142","line":"                (\"true\" , 1.0                                        )"},
{"lineNum":"  143","line":"                (\"false\", 0.0                                        )"},
{"lineNum":"  144","line":"      ;"},
{"lineNum":"  145","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  146","line":"  } constant;"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"  // symbol table for unary operator like \"- 1.0\""},
{"lineNum":"  149","line":"  struct uop_"},
{"lineNum":"  150","line":"    : qi::symbols< typename std::iterator_traits<Iterator>::value_type, ufunc_t >"},
{"lineNum":"  151","line":"  {"},
{"lineNum":"  152","line":"    uop_()"},
{"lineNum":"  153","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  154","line":"      this->add (\"+\", (ufunc_t) detail::pos )"},
{"lineNum":"  155","line":"                (\"-\", (ufunc_t) detail::neg )"},
{"lineNum":"  156","line":"      ;"},
{"lineNum":"  157","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  158","line":"  } uop;"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"  // symbol table for binary operator like \"1.0+2.2\""},
{"lineNum":"  161","line":"  struct bop1_"},
{"lineNum":"  162","line":"    : qi::symbols< typename std::iterator_traits<Iterator>::value_type, bfunc_t >"},
{"lineNum":"  163","line":"  {"},
{"lineNum":"  164","line":"    bop1_()"},
{"lineNum":"  165","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  166","line":"      this->add (\"+\", (bfunc_t) detail::add )"},
{"lineNum":"  167","line":"                (\"-\", (bfunc_t) detail::sub )"},
{"lineNum":"  168","line":"      ;"},
{"lineNum":"  169","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  170","line":"  } bop1;"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"  // symbol table for binary operator like \"1.0*2.2\""},
{"lineNum":"  173","line":"  struct bop2_"},
{"lineNum":"  174","line":"    : qi::symbols< typename std::iterator_traits<Iterator>::value_type, bfunc_t >"},
{"lineNum":"  175","line":"  {"},
{"lineNum":"  176","line":"    bop2_()"},
{"lineNum":"  177","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  178","line":"      this->add (\"*\", (bfunc_t) detail::mul )"},
{"lineNum":"  179","line":"                (\"/\", (bfunc_t) detail::div )"},
{"lineNum":"  180","line":"      ;"},
{"lineNum":"  181","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  182","line":"  } bop2;"},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"  // symbol table for binary operator like \"1.0^2.2\""},
{"lineNum":"  185","line":"  struct bop3_"},
{"lineNum":"  186","line":"    : qi::symbols< typename std::iterator_traits<Iterator>::value_type, bfunc_t >"},
{"lineNum":"  187","line":"  {"},
{"lineNum":"  188","line":"    bop3_()"},
{"lineNum":"  189","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  190","line":"      this->add (\"^\", (bfunc_t) std::pow  )"},
{"lineNum":"  191","line":"      ;"},
{"lineNum":"  192","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  193","line":"  } bop3;"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"  // symbol table for unary functions like \"abs\""},
{"lineNum":"  198","line":"  struct ufunc_"},
{"lineNum":"  199","line":"    : qi::symbols< typename std::iterator_traits<Iterator>::value_type, ufunc_t >"},
{"lineNum":"  200","line":"  {"},
{"lineNum":"  201","line":"    ufunc_()"},
{"lineNum":"  202","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  203","line":"      this->add"},
{"lineNum":"  204","line":"          (\"abs\"   , (ufunc_t) std::abs  )"},
{"lineNum":"  205","line":"          (\"acos\"  , (ufunc_t) std::acos )"},
{"lineNum":"  206","line":"          (\"asin\"  , (ufunc_t) std::asin )"},
{"lineNum":"  207","line":"          (\"atan\"  , (ufunc_t) std::atan )"},
{"lineNum":"  208","line":"          (\"ceil\"  , (ufunc_t) std::ceil )"},
{"lineNum":"  209","line":"          (\"cos\"   , (ufunc_t) std::cos  )"},
{"lineNum":"  210","line":"          (\"cosh\"  , (ufunc_t) std::cosh )"},
{"lineNum":"  211","line":"          (\"exp\"   , (ufunc_t) std::exp  )"},
{"lineNum":"  212","line":"          (\"floor\" , (ufunc_t) std::floor)"},
{"lineNum":"  213","line":"          (\"log\"   , (ufunc_t) std::log  )"},
{"lineNum":"  214","line":"          (\"log10\" , (ufunc_t) std::log10)"},
{"lineNum":"  215","line":"          (\"sin\"   , (ufunc_t) std::sin  )"},
{"lineNum":"  216","line":"          (\"sinh\"  , (ufunc_t) std::sinh )"},
{"lineNum":"  217","line":"          (\"sqrt\"  , (ufunc_t) std::sqrt )"},
{"lineNum":"  218","line":"          (\"tan\"   , (ufunc_t) std::tan  )"},
{"lineNum":"  219","line":"          (\"tanh\"  , (ufunc_t) std::tanh )"},
{"lineNum":"  220","line":"      ;"},
{"lineNum":"  221","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  222","line":"  } ufunc;"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"  // symbol table for binary functions like \"pow\""},
{"lineNum":"  225","line":"  struct bfunc_"},
{"lineNum":"  226","line":"    : qi::symbols< typename std::iterator_traits<Iterator>::value_type, bfunc_t >"},
{"lineNum":"  227","line":"  {"},
{"lineNum":"  228","line":"    bfunc_()"},
{"lineNum":"  229","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  230","line":"      this->add"},
{"lineNum":"  231","line":"          (\"pow\"  , (bfunc_t) std::pow  )"},
{"lineNum":"  232","line":"          (\"atan2\", (bfunc_t) std::atan2)"},
{"lineNum":"  233","line":"      ;"},
{"lineNum":"  234","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  235","line":"  } bfunc;"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"  qi::rule< Iterator, mx_expr(), Skip > expr;"},
{"lineNum":"  238","line":"  qi::rule< Iterator, mx_expr(), Skip > term;"},
{"lineNum":"  239","line":"  qi::rule< Iterator, mx_expr(), Skip > factor;"},
{"lineNum":"  240","line":"  qi::rule< Iterator, mx_expr(), Skip > primary;"},
{"lineNum":"  241","line":"  qi::rule< Iterator, string() , Skip > name;"},
{"lineNum":"  242","line":"  qi::rule< Iterator, string_pair_t(), Skip > cmdref;"},
{"lineNum":"  243","line":"  qi::real_parser< double, ts_real_policies > real;"},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"  expression()"},
{"lineNum":"  246","line":"    : expression::base_type( expr )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  247","line":"  {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  248","line":"    expr ="},
{"lineNum":"  249","line":"        term                 [_val = phx::construct<nop_t>(_1)]"},
{"lineNum":"  250","line":"        >> *( bop1 >> term ) [_val = phx::construct<bop_t>(_1, _val, _2)]"},
{"lineNum":"  251","line":"        ;  // \'+\' and \'-\'"},
{"lineNum":"  252","line":""},
{"lineNum":"  253","line":"    term ="},
{"lineNum":"  254","line":"        factor                 [_val = phx::construct<nop_t>(_1)]"},
{"lineNum":"  255","line":"        >> *( bop2 >> factor ) [_val = phx::construct<bop_t>(_1, _val, _2)]"},
{"lineNum":"  256","line":"        ;  // \'*\' and \'/\'"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"    factor ="},
{"lineNum":"  259","line":"        primary                 [_val = phx::construct<nop_t>(_1)]"},
{"lineNum":"  260","line":"        >> *( bop3 >> primary ) [_val = phx::construct<bop_t>(_1, _val, _2)]"},
{"lineNum":"  261","line":"        ;  // \'^\'"},
{"lineNum":"  262","line":""},
{"lineNum":"  263","line":"    primary ="},
{"lineNum":"  264","line":"        real                     [_val = _1]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  265","line":"        | ( \'(\' >> expr >> \')\' ) [_val = phx::construct<nop_t>(_1)]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  266","line":"        | ( uop >> primary     ) [_val = phx::construct<uop_t>(_1, _2)]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  267","line":"        | ( no_case[constant] >> !char_(\".a-zA-Z_0-9\")         ) [_val = _1]","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  268","line":"        | ( no_case[ufunc] >> \'(\' >> expr >> \')\'               ) [_val = phx::construct<uop_t>(_1, _2)]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  269","line":"        | ( no_case[bfunc] >> \'(\' >> expr >> \',\' >> expr >> \')\') [_val = phx::construct<bop_t>(_1, _2, _3)]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  270","line":"        | ( lit(\"table\")   >> \'(\' >> name >> \',\' >> name >> \')\') [_val = 1.0]  // eat table()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  271","line":"        | ( cmdref             ) [_val = _1]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  272","line":"        | ( name               ) [_val = _1]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  273","line":"        ;"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"    cmdref ="},
{"lineNum":"  276","line":"        name >> \"->\" >> name;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  277","line":""},
{"lineNum":"  278","line":"    name =","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  279","line":"        lexeme[char_(\"a-zA-Z_\") >> *char_(\".a-zA-Z_0-9\")];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  280","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  281","line":"};"},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"bool synergia::parse_expression( string const & s"},
{"lineNum":"  285","line":"                               , mx_expr & expr )"},
{"lineNum":"  286","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  287","line":"  if( s.empty() ) return false;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"  typedef string::const_iterator iter_t;"},
{"lineNum":"  290","line":"  typedef qi::rule<iter_t> ws_t;"},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"  ws_t whitespace = space"},
{"lineNum":"  293","line":"                  | lit(\'!\')  >> *(char_ - eol) >> eol"},
{"lineNum":"  294","line":"                  | lit(\"//\") >> *(char_ - eol) >> eol;"},
{"lineNum":"  295","line":""},
{"lineNum":"  296","line":"  expression<iter_t, ws_t> parser;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":"  iter_t       begin = s.begin();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  299","line":"  iter_t const end   = s.end();"},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"  bool b = qi::phrase_parse( begin, end, parser, whitespace, expr)"},
{"lineNum":"  302","line":"         && begin == end;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  303","line":""},
{"lineNum":"  304","line":"  return b;"},
{"lineNum":"  305","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  306","line":""},
{"lineNum":"  307","line":"bool synergia::parse_expression( string const & s"},
{"lineNum":"  308","line":"                               , double & result )"},
{"lineNum":"  309","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  310","line":"  mx_expr expr;"},
{"lineNum":"  311","line":"  bool b = parse_expression( s, expr );","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  312","line":"  if( !b ) return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  313","line":""},
{"lineNum":"  314","line":"  result = boost::apply_visitor(synergia::mx_calculator(), expr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  315","line":"  return true;"},
{"lineNum":"  316","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  317","line":""},
{"lineNum":"  318","line":"////"},
{"lineNum":"  319","line":"// semantic actions for madx tree parser"},
{"lineNum":"  320","line":"namespace synergia"},
{"lineNum":"  321","line":"{"},
{"lineNum":"  322","line":"  namespace"},
{"lineNum":"  323","line":"  {"},
{"lineNum":"  324","line":"    void set_logic( mx_logic & logic, mx_expr const & lhs, logic_op_t op, mx_expr const & rhs)"},
{"lineNum":"  325","line":"    { logic.set(lhs, op, rhs); }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"    void ins_if(mx_if & if_, mx_logic const & logic, mx_tree const & block)"},
{"lineNum":"  328","line":"    { if_.assign_if(logic, block); }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  329","line":""},
{"lineNum":"  330","line":"    void ins_elseif(mx_if & if_, mx_logic const & logic, mx_tree const & block)"},
{"lineNum":"  331","line":"    { if_.assign_elseif(logic, block); }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  332","line":""},
{"lineNum":"  333","line":"    void ins_else(mx_if & if_, mx_tree const & block)"},
{"lineNum":"  334","line":"    { if_.assign_else(block); }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  335","line":""},
{"lineNum":"  336","line":"    void ins_while(mx_while & while_, mx_logic const & logic, mx_tree const & block)"},
{"lineNum":"  337","line":"    { while_.assign(logic, block); }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"    void ins_seq_member(mx_line_seq & seq, boost::optional<char> m, boost::optional<int> o, mx_line_member const & member)"},
{"lineNum":"  340","line":"    { int op=m?-1:1; if(o) op*=o.get(); seq.insert_member(op, member); }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  341","line":""},
{"lineNum":"  342","line":"    void set_attr(mx_attr & attr, string const & name, boost::optional<char> c, any const & v)"},
{"lineNum":"  343","line":"    { if(c) attr.set_lazy_attr(name, v); else attr.set_attr(name, v); }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  344","line":""},
{"lineNum":"  345","line":"    void set_flag_attr(mx_attr & attr, boost::optional<char> c, string const & name)"},
{"lineNum":"  346","line":"    { if(c) attr.set_attr(name, boost::any(mx_expr(0.0))); else attr.set_attr(name, boost::any(mx_expr(1.0))); }","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  347","line":""},
{"lineNum":"  348","line":"    void set_cmd_label(mx_command & cmd, string const & label)"},
{"lineNum":"  349","line":"    { cmd.set_label(label); }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  350","line":""},
{"lineNum":"  351","line":"    void set_cmd_keyword(mx_command & cmd, mx_keyword const & keyword)"},
{"lineNum":"  352","line":"    { cmd.set_keyword(keyword); }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  353","line":""},
{"lineNum":"  354","line":"    void ins_cmd_attr(mx_command & cmd, mx_attr const & attr)"},
{"lineNum":"  355","line":"    { cmd.ins_attr(attr); }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  356","line":"  }"},
{"lineNum":"  357","line":"}"},
{"lineNum":"  358","line":""},
{"lineNum":"  359","line":"template <typename Iterator, typename Skip>"},
{"lineNum":"  360","line":"struct synergia::madx_tree_parser","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  361","line":"  : qi::grammar< Iterator, mx_tree(), Skip >"},
{"lineNum":"  362","line":"{"},
{"lineNum":"  363","line":"  // keywords"},
{"lineNum":"  364","line":"  struct logic_op_"},
{"lineNum":"  365","line":"    : boost::spirit::qi::symbols< typename std::iterator_traits<Iterator>::value_type,"},
{"lineNum":"  366","line":"                                  logic_op_t >"},
{"lineNum":"  367","line":"  {"},
{"lineNum":"  368","line":"    logic_op_()"},
{"lineNum":"  369","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  370","line":"      this->add (\"<\" , (logic_op_t) detail::op_l  )"},
{"lineNum":"  371","line":"                (\"<=\", (logic_op_t) detail::op_le )"},
{"lineNum":"  372","line":"                (\"==\", (logic_op_t) detail::op_e  )"},
{"lineNum":"  373","line":"                (\"!=\", (logic_op_t) detail::op_ne )"},
{"lineNum":"  374","line":"                (\">\" , (logic_op_t) detail::op_g  )"},
{"lineNum":"  375","line":"                (\">=\", (logic_op_t) detail::op_ge )"},
{"lineNum":"  376","line":"      ;"},
{"lineNum":"  377","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  378","line":"  } logic_op;"},
{"lineNum":"  379","line":""},
{"lineNum":"  380","line":"  struct particle_keywords_"},
{"lineNum":"  381","line":"    : boost::spirit::qi::symbols< typename std::iterator_traits<Iterator>::value_type,"},
{"lineNum":"  382","line":"                                  mx_keyword >"},
{"lineNum":"  383","line":"  {"},
{"lineNum":"  384","line":"    particle_keywords_()"},
{"lineNum":"  385","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  386","line":"      this->add","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  387","line":"           (\"proton\"     , mx_keyword(\"proton\"     , MX_KW_PARTICLE) )"},
{"lineNum":"  388","line":"           (\"prot\"       , mx_keyword(\"proton\"     , MX_KW_PARTICLE) )"},
{"lineNum":"  389","line":"           (\"electron\"   , mx_keyword(\"electron\"   , MX_KW_PARTICLE) )"},
{"lineNum":"  390","line":"           (\"positron\"   , mx_keyword(\"positron\"   , MX_KW_PARTICLE) )"},
{"lineNum":"  391","line":"           (\"anti-proton\", mx_keyword(\"anti-proton\", MX_KW_PARTICLE) )"},
{"lineNum":"  392","line":"           (\"posmuon\"    , mx_keyword(\"posmuon\"    , MX_KW_PARTICLE) )"},
{"lineNum":"  393","line":"           (\"negmuon\"    , mx_keyword(\"negmuon\"    , MX_KW_PARTICLE) )"},
{"lineNum":"  394","line":"      ;"},
{"lineNum":"  395","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  396","line":"  } particle_keywords;"},
{"lineNum":"  397","line":""},
{"lineNum":"  398","line":"  struct mp_type_keywords_"},
{"lineNum":"  399","line":"    : boost::spirit::qi::symbols< typename std::iterator_traits<Iterator>::value_type,"},
{"lineNum":"  400","line":"                                  mx_keyword >"},
{"lineNum":"  401","line":"  {"},
{"lineNum":"  402","line":"    mp_type_keywords_()"},
{"lineNum":"  403","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  404","line":"      this->add","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  405","line":"           (\"octpn\"      , mx_keyword(\"octpn\"      , MX_KW_MP_TYPE) )"},
{"lineNum":"  406","line":"           (\"wgl\"        , mx_keyword(\"wgl\"        , MX_KW_MP_TYPE) )"},
{"lineNum":"  407","line":"           (\"sk\"         , mx_keyword(\"sk\"         , MX_KW_MP_TYPE) )"},
{"lineNum":"  408","line":"      ;"},
{"lineNum":"  409","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  410","line":"  } mp_type_keywords;"},
{"lineNum":"  411","line":""},
{"lineNum":"  412","line":""},
{"lineNum":"  413","line":"  struct element_keywords_"},
{"lineNum":"  414","line":"    : boost::spirit::qi::symbols< typename std::iterator_traits<Iterator>::value_type,"},
{"lineNum":"  415","line":"                                  mx_keyword >"},
{"lineNum":"  416","line":"  {"},
{"lineNum":"  417","line":"    element_keywords_()"},
{"lineNum":"  418","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  419","line":"      this->add","class":"lineNoCov","hits":"0","possible_hits":"32",},
{"lineNum":"  420","line":"           (\"drift\"      , mx_keyword(\"drift\"      , MX_KW_ELEMENT) )"},
{"lineNum":"  421","line":"           (\"rbend\"      , mx_keyword(\"rbend\"      , MX_KW_ELEMENT) )"},
{"lineNum":"  422","line":"           (\"sbend\"      , mx_keyword(\"sbend\"      , MX_KW_ELEMENT) )"},
{"lineNum":"  423","line":"           (\"dipedge\"    , mx_keyword(\"dipedge\"    , MX_KW_ELEMENT) )"},
{"lineNum":"  424","line":"           (\"quadrupole\" , mx_keyword(\"quadrupole\" , MX_KW_ELEMENT) )"},
{"lineNum":"  425","line":"           (\"sextupole\"  , mx_keyword(\"sextupole\"  , MX_KW_ELEMENT) )"},
{"lineNum":"  426","line":"           (\"octupole\"   , mx_keyword(\"octupole\"   , MX_KW_ELEMENT) )"},
{"lineNum":"  427","line":"           (\"multipole\"  , mx_keyword(\"multipole\"  , MX_KW_ELEMENT) )"},
{"lineNum":"  428","line":"           (\"solenoid\"   , mx_keyword(\"solenoid\"   , MX_KW_ELEMENT) )"},
{"lineNum":"  429","line":"           (\"nllens\"     , mx_keyword(\"nllens\"     , MX_KW_ELEMENT) )"},
{"lineNum":"  430","line":"           (\"hkicker\"    , mx_keyword(\"hkicker\"    , MX_KW_ELEMENT) )"},
{"lineNum":"  431","line":"           (\"vkicker\"    , mx_keyword(\"vkicker\"    , MX_KW_ELEMENT) )"},
{"lineNum":"  432","line":"           (\"tkicker\"    , mx_keyword(\"tkicker\"    , MX_KW_ELEMENT) )"},
{"lineNum":"  433","line":"           (\"kicker\"     , mx_keyword(\"kicker\"     , MX_KW_ELEMENT) )"},
{"lineNum":"  434","line":"           (\"rfcavity\"   , mx_keyword(\"rfcavity\"   , MX_KW_ELEMENT) )"},
{"lineNum":"  435","line":"           (\"rfmultipole\", mx_keyword(\"rfmultipole\", MX_KW_ELEMENT) )"},
{"lineNum":"  436","line":"           (\"crabcavity\" , mx_keyword(\"crabcavity\" , MX_KW_ELEMENT) )"},
{"lineNum":"  437","line":"           (\"elseparator\", mx_keyword(\"elseparator\", MX_KW_ELEMENT) )"},
{"lineNum":"  438","line":"           (\"hmonitor\"   , mx_keyword(\"hmonitor\"   , MX_KW_ELEMENT) )"},
{"lineNum":"  439","line":"           (\"vmonitor\"   , mx_keyword(\"vmonitor\"   , MX_KW_ELEMENT) )"},
{"lineNum":"  440","line":"           (\"monitor\"    , mx_keyword(\"monitor\"    , MX_KW_ELEMENT) )"},
{"lineNum":"  441","line":"           (\"instrument\" , mx_keyword(\"instrument\" , MX_KW_ELEMENT) )"},
{"lineNum":"  442","line":"           (\"rcollimator\", mx_keyword(\"rcollimator\", MX_KW_ELEMENT) )"},
{"lineNum":"  443","line":"           (\"ecollimator\", mx_keyword(\"ecollimator\", MX_KW_ELEMENT) )"},
{"lineNum":"  444","line":"           (\"yrotation\"  , mx_keyword(\"yrotation\"  , MX_KW_ELEMENT) )"},
{"lineNum":"  445","line":"           (\"srotation\"  , mx_keyword(\"srotation\"  , MX_KW_ELEMENT) )"},
{"lineNum":"  446","line":"           (\"beambeam\"   , mx_keyword(\"beambeam\"   , MX_KW_ELEMENT) )"},
{"lineNum":"  447","line":"           (\"matrix\"     , mx_keyword(\"matrix\"     , MX_KW_ELEMENT) )"},
{"lineNum":"  448","line":"           (\"marker\"     , mx_keyword(\"marker\"     , MX_KW_ELEMENT) )"},
{"lineNum":"  449","line":"           (\"constfoc\"   , mx_keyword(\"constfoc\"   , MX_KW_ELEMENT) )"},
{"lineNum":"  450","line":"           (\"elens\"      , mx_keyword(\"elens\"      , MX_KW_ELEMENT) )"},
{"lineNum":"  451","line":"           (\"foil\"       , mx_keyword(\"foil\"       , MX_KW_ELEMENT) )"},
{"lineNum":"  452","line":"      ;"},
{"lineNum":"  453","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  454","line":"  } element_keywords;"},
{"lineNum":"  455","line":""},
{"lineNum":"  456","line":"  struct command_keywords_"},
{"lineNum":"  457","line":"    : boost::spirit::qi::symbols< typename std::iterator_traits<Iterator>::value_type,"},
{"lineNum":"  458","line":"                                  mx_keyword >"},
{"lineNum":"  459","line":"  {"},
{"lineNum":"  460","line":"    command_keywords_()"},
{"lineNum":"  461","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  462","line":"      this->add","class":"lineNoCov","hits":"0","possible_hits":"43",},
{"lineNum":"  463","line":"           // general"},
{"lineNum":"  464","line":"           (\"assign\"   , mx_keyword(\"assign\"   , MX_KW_COMMAND) )"},
{"lineNum":"  465","line":"           (\"beam\"     , mx_keyword(\"beam\"     , MX_KW_COMMAND) )"},
{"lineNum":"  466","line":"           (\"call\"     , mx_keyword(\"call\"     , MX_KW_COMMAND) )"},
{"lineNum":"  467","line":"           (\"coguess\"  , mx_keyword(\"coguess\"  , MX_KW_COMMAND) )"},
{"lineNum":"  468","line":"           (\"create\"   , mx_keyword(\"create\"   , MX_KW_COMMAND) )"},
{"lineNum":"  469","line":"           (\"dumpsequ\" , mx_keyword(\"dumpsequ\" , MX_KW_COMMAND) )"},
{"lineNum":"  470","line":"           (\"exec\"     , mx_keyword(\"exec\"     , MX_KW_COMMAND) )"},
{"lineNum":"  471","line":"           (\"exit\"     , mx_keyword(\"exit\"     , MX_KW_COMMAND) )"},
{"lineNum":"  472","line":"           (\"fill\"     , mx_keyword(\"fill\"     , MX_KW_COMMAND) )"},
{"lineNum":"  473","line":"           (\"help\"     , mx_keyword(\"help\"     , MX_KW_COMMAND) )"},
{"lineNum":"  474","line":"           (\"option\"   , mx_keyword(\"option\"   , MX_KW_COMMAND) )"},
{"lineNum":"  475","line":"           (\"print\"    , mx_keyword(\"print\"    , MX_KW_COMMAND) )"},
{"lineNum":"  476","line":"           (\"quit\"     , mx_keyword(\"quit\"     , MX_KW_COMMAND) )"},
{"lineNum":"  477","line":"           (\"readtable\", mx_keyword(\"readtable\", MX_KW_COMMAND) )"},
{"lineNum":"  478","line":"           (\"return\"   , mx_keyword(\"return\"   , MX_KW_COMMAND) )"},
{"lineNum":"  479","line":"           (\"save\"     , mx_keyword(\"save\"     , MX_KW_COMMAND) )"},
{"lineNum":"  480","line":"           (\"savebeta\" , mx_keyword(\"savebeta\" , MX_KW_COMMAND) )"},
{"lineNum":"  481","line":"           (\"select\"   , mx_keyword(\"select\"   , MX_KW_COMMAND) )"},
{"lineNum":"  482","line":"           (\"set\"      , mx_keyword(\"set\"      , MX_KW_COMMAND) )"},
{"lineNum":"  483","line":"           (\"show\"     , mx_keyword(\"show\"     , MX_KW_COMMAND) )"},
{"lineNum":"  484","line":"           (\"stop\"     , mx_keyword(\"stop\"     , MX_KW_COMMAND) )"},
{"lineNum":"  485","line":"           (\"system\"   , mx_keyword(\"system\"   , MX_KW_COMMAND) )"},
{"lineNum":"  486","line":"           (\"tabstring\", mx_keyword(\"tabstring\", MX_KW_COMMAND) )"},
{"lineNum":"  487","line":"           (\"title\"    , mx_keyword(\"title\"    , MX_KW_COMMAND) )"},
{"lineNum":"  488","line":"           (\"use\"      , mx_keyword(\"use\"      , MX_KW_COMMAND) )"},
{"lineNum":"  489","line":"           (\"value\"    , mx_keyword(\"value\"    , MX_KW_COMMAND) )"},
{"lineNum":"  490","line":"           (\"write\"    , mx_keyword(\"write\"    , MX_KW_COMMAND) )"},
{"lineNum":"  491","line":"           // beam specification"},
{"lineNum":"  492","line":"           (\"beam\"     , mx_keyword(\"beam\"     , MX_KW_COMMAND) )"},
{"lineNum":"  493","line":"           (\"resbeam\"  , mx_keyword(\"resbeam\"  , MX_KW_COMMAND) )"},
{"lineNum":"  494","line":"           // plot"},
{"lineNum":"  495","line":"           (\"plot\"     , mx_keyword(\"plot\"     , MX_KW_COMMAND) )"},
{"lineNum":"  496","line":"           (\"resplot\"  , mx_keyword(\"resplot\"  , MX_KW_COMMAND) )"},
{"lineNum":"  497","line":"           (\"setplot\"  , mx_keyword(\"setplot\"  , MX_KW_COMMAND) )"},
{"lineNum":"  498","line":"           // sequence editing"},
{"lineNum":"  499","line":"           (\"seqedit\"  , mx_keyword(\"seqedit\"  , MX_KW_COMMAND) )"},
{"lineNum":"  500","line":"           (\"flatten\"  , mx_keyword(\"flatten\"  , MX_KW_COMMAND) )"},
{"lineNum":"  501","line":"           (\"install\"  , mx_keyword(\"install\"  , MX_KW_COMMAND) )"},
{"lineNum":"  502","line":"           (\"move\"     , mx_keyword(\"move\"     , MX_KW_COMMAND) )"},
{"lineNum":"  503","line":"           (\"remove\"   , mx_keyword(\"remove\"   , MX_KW_COMMAND) )"},
{"lineNum":"  504","line":"           (\"cycle\"    , mx_keyword(\"cycle\"    , MX_KW_COMMAND) )"},
{"lineNum":"  505","line":"           (\"reflect\"  , mx_keyword(\"reflect\"  , MX_KW_COMMAND) )"},
{"lineNum":"  506","line":"           (\"endedit\"  , mx_keyword(\"endedit\"  , MX_KW_COMMAND) )"},
{"lineNum":"  507","line":"           // other commands"},
{"lineNum":"  508","line":"           (\"twiss\"    , mx_keyword(\"twiss\"    , MX_KW_COMMAND) )"},
{"lineNum":"  509","line":"           // build sequence ( not present in manual )"},
{"lineNum":"  510","line":"           (\"sequence\" , mx_keyword(\"sequence\" , MX_KW_COMMAND) )"},
{"lineNum":"  511","line":"           (\"endsequence\", mx_keyword(\"endsequence\" , MX_KW_COMMAND) )"},
{"lineNum":"  512","line":"      ;"},
{"lineNum":"  513","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  514","line":"  } command_keywords;"},
{"lineNum":"  515","line":""},
{"lineNum":"  516","line":""},
{"lineNum":"  517","line":"  // rules"},
{"lineNum":"  518","line":"  qi::rule<Iterator, mx_tree()     , Skip> doc;"},
{"lineNum":"  519","line":"  qi::rule<Iterator, mx_tree()     , Skip> block;"},
{"lineNum":"  520","line":"  qi::rule<Iterator, mx_statement(), Skip> statement;"},
{"lineNum":"  521","line":"  qi::rule<Iterator, mx_command()  , Skip> variable;"},
{"lineNum":"  522","line":"  qi::rule<Iterator, mx_command()  , locals<mx_cmd_type>, Skip> cmd;"},
{"lineNum":"  523","line":"  qi::rule<Iterator, mx_command()  , Skip> command;"},
{"lineNum":"  524","line":"  qi::rule<Iterator, mx_line()     , Skip> line;"},
{"lineNum":"  525","line":"  qi::rule<Iterator, mx_line_seq() , Skip> line_seq;"},
{"lineNum":"  526","line":"  qi::rule<Iterator, mx_line_member(), Skip> line_member;"},
{"lineNum":"  527","line":"  qi::rule<Iterator, mx_keyword()  , Skip> ref;"},
{"lineNum":"  528","line":"  qi::rule<Iterator, mx_if()       , Skip> if_flow;"},
{"lineNum":"  529","line":"  qi::rule<Iterator, mx_while()    , Skip> while_flow;"},
{"lineNum":"  530","line":"  qi::rule<Iterator, mx_logic()    , Skip> logic;"},
{"lineNum":"  531","line":"  qi::rule<Iterator, mx_attr()     , Skip> attr;"},
{"lineNum":"  532","line":"  qi::rule<Iterator, mx_attr()     , Skip> flag_attr;"},
{"lineNum":"  533","line":"  qi::rule<Iterator, mx_attr()     , Skip> cmd_attr;"},
{"lineNum":"  534","line":""},
{"lineNum":"  535","line":"  qi::rule<Iterator, string()      , Skip> name;"},
{"lineNum":"  536","line":"  qi::rule<Iterator, string()      , Skip> dblq_str;"},
{"lineNum":"  537","line":"  qi::rule<Iterator, string()      , Skip> snglq_str;"},
{"lineNum":"  538","line":""},
{"lineNum":"  539","line":"  expression<Iterator              , Skip> expr;"},
{"lineNum":"  540","line":"  qi::rule<Iterator, mx_exprs()    , Skip> array;"},
{"lineNum":"  541","line":"  qi::rule<Iterator, any()         , Skip> value;"},
{"lineNum":"  542","line":""},
{"lineNum":"  543","line":""},
{"lineNum":"  544","line":"  qi::rule<Iterator, mx_statements_t(), Skip> statements;"},
{"lineNum":"  545","line":""},
{"lineNum":"  546","line":"  madx_tree_parser()","class":"lineNoCov","hits":"0","possible_hits":"22",},
{"lineNum":"  547","line":"    : madx_tree_parser::base_type( doc )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  548","line":"    , expr()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  549","line":"  {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  550","line":"    doc ="},
{"lineNum":"  551","line":"        //as<mx_statements_t>()[*statement]  -- boost 1.45+"},
{"lineNum":"  552","line":"        statements [_val = _1]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  553","line":"        ;"},
{"lineNum":"  554","line":""},
{"lineNum":"  555","line":"    statements ="},
{"lineNum":"  556","line":"        *statement","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  557","line":"        ;"},
{"lineNum":"  558","line":""},
{"lineNum":"  559","line":"    statement ="},
{"lineNum":"  560","line":"        //if_flow | while_flow | command  -- boost 1.45+"},
{"lineNum":"  561","line":"          if_flow    [_val = _1]"},
{"lineNum":"  562","line":"        | while_flow [_val = _1]"},
{"lineNum":"  563","line":"        | command    [_val = _1]"},
{"lineNum":"  564","line":"        | line       [_val = _1]"},
{"lineNum":"  565","line":"        | \';\'   // empty statement"},
{"lineNum":"  566","line":"        ;"},
{"lineNum":"  567","line":""},
{"lineNum":"  568","line":"    block ="},
{"lineNum":"  569","line":"        //as<mx_statements_t>()[\'{\' >> *statement >> \'}\']  -- boost 1.45+"},
{"lineNum":"  570","line":"        \'{\' >> statements [_val = _1] >> \'}\'","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  571","line":"        ;"},
{"lineNum":"  572","line":""},
{"lineNum":"  573","line":"    logic ="},
{"lineNum":"  574","line":"        //\'(\' >> *(char_ - char_(\')\')) >> \')\'"},
{"lineNum":"  575","line":"        ( \'(\' >> expr >> logic_op >> expr >> \')\' )  [phx::bind(&set_logic, _val, _1, _2, _3)]"},
{"lineNum":"  576","line":"        ;"},
{"lineNum":"  577","line":""},
{"lineNum":"  578","line":"    if_flow ="},
{"lineNum":"  579","line":"            ( no_case[\"if\"]     >> logic >> block ) [phx::bind(&ins_if,     _val, _1, _2)]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  580","line":"        >> *( no_case[\"elseif\"] >> logic >> block ) [phx::bind(&ins_elseif, _val, _1, _2)]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  581","line":"        >> -( no_case[\"else\"]            >> block ) [phx::bind(&ins_else,   _val, _1)]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  582","line":"        ;"},
{"lineNum":"  583","line":""},
{"lineNum":"  584","line":"    while_flow ="},
{"lineNum":"  585","line":"            ( no_case[\"while\"]   >> logic >> block ) [phx::bind(&ins_while,  _val, _1, _2)]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  586","line":"        ;"},
{"lineNum":"  587","line":""},
{"lineNum":"  588","line":"    array ="},
{"lineNum":"  589","line":"        //\'{\' >> expr % \',\' >> \'}\'  -- boost 1.45+"},
{"lineNum":"  590","line":"        \'{\' >> expr [phx::push_back(_val, _1)] % \',\' >> \'}\'","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  591","line":"        ;"},
{"lineNum":"  592","line":""},
{"lineNum":"  593","line":"    value ="},
{"lineNum":"  594","line":"        //dblq_str | snglq_str | no_case[particle_keywords] | expr | array  -- boost 1.45+"},
{"lineNum":"  595","line":"        dblq_str    [_val=_1]"},
{"lineNum":"  596","line":"        | snglq_str [_val=_1]"},
{"lineNum":"  597","line":"        | expr      [_val=_1]"},
{"lineNum":"  598","line":"        | array     [_val=_1]"},
{"lineNum":"  599","line":"        ;"},
{"lineNum":"  600","line":""},
{"lineNum":"  601","line":"    attr ="},
{"lineNum":"  602","line":"          ( no_case[qi::string(\"type\")]     // special attr \'type\'","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  603","line":"              >> -char_(\':\') >> \'=\'","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  604","line":"              >> (name|dblq_str|snglq_str) )      [phx::bind(&set_attr, _val, _1, _2, _3)]","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  605","line":"        | ( no_case[qi::string(\"particle\")] // special attr \'particle\'","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  606","line":"              >> -char_(\':\') >> \'=\'","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  607","line":"              >> no_case[particle_keywords] )     [phx::bind(&set_attr, _val, _1, _2, _3)]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  608","line":"        | ( name                            // generic attr","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  609","line":"              >> -char_(\':\') >> \'=\'","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  610","line":"              >> value )                          [phx::bind(&set_attr, _val, _1, _2, _3)]","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  611","line":"        ;"},
{"lineNum":"  612","line":""},
{"lineNum":"  613","line":"    flag_attr =   // flag attributes, attributes with values only, etc."},
{"lineNum":"  614","line":"          ( -char_(\"-\") >> name )                 [phx::bind(&set_flag_attr, _val, _1, _2)]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  615","line":"        | ( dblq_str )   [phx::bind(&set_attr, _val, string(\"default\"), boost::optional<char>(), _1)]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  616","line":"        | ( snglq_str )  [phx::bind(&set_attr, _val, string(\"default\"), boost::optional<char>(), _1)]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  617","line":"        | ( expr )       [phx::bind(&set_attr, _val, string(\"default\"), boost::optional<char>(), _1)]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  618","line":"        ;"},
{"lineNum":"  619","line":""},
{"lineNum":"  620","line":"    cmd_attr ="},
{"lineNum":"  621","line":"        attr | flag_attr","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  622","line":"        ;"},
{"lineNum":"  623","line":""},
{"lineNum":"  624","line":"    variable ="},
{"lineNum":"  625","line":"        attr [phx::bind(&ins_cmd_attr, _val, _1)]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  626","line":"        ;"},
{"lineNum":"  627","line":""},
{"lineNum":"  628","line":"    cmd ="},
{"lineNum":"  629","line":"           - ( name >> \':\' )     [phx::bind(&set_cmd_label, _val, _1)]   // label","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  630","line":"        >>   ( no_case[element_keywords]","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  631","line":"             | no_case[command_keywords]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  632","line":"             | ref","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  633","line":"             )                   [phx::bind(&set_cmd_keyword, _val, _1)] // keyword","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  634","line":"        >> - ( lit(\',\') )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  635","line":"        >> * ( cmd_attr [phx::bind(&ins_cmd_attr, _val, _1)] % \',\' )     // attributes","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  636","line":"        ;"},
{"lineNum":"  637","line":""},
{"lineNum":"  638","line":"    command ="},
{"lineNum":"  639","line":"        ( variable | cmd ) >> \';\'","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  640","line":"        ;"},
{"lineNum":"  641","line":""},
{"lineNum":"  642","line":"    line ="},
{"lineNum":"  643","line":"        ( name >> \':\' >> no_case[\"line\"] >> \'=\' >> line_seq >> \';\' )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  644","line":"                                 [_val = phx::construct<mx_line>(_1, _2)]"},
{"lineNum":"  645","line":"        ;"},
{"lineNum":"  646","line":""},
{"lineNum":"  647","line":"    line_seq  ="},
{"lineNum":"  648","line":"           lit(\'(\')"},
{"lineNum":"  649","line":"        >> (*lit(\',\'))  // allows 0 or multiple \',\' in front"},
{"lineNum":"  650","line":"        >> ("},
{"lineNum":"  651","line":"             ( -char_(\'-\') >> -( int_ >> \'*\' ) >> line_member )"},
{"lineNum":"  652","line":"                                 [phx::bind(&ins_seq_member, _val, _1, _2, _3)]"},
{"lineNum":"  653","line":"           % (*lit(\',\')) // allows the \',\' in the line_seq to be optional or multiple occurance"},
{"lineNum":"  654","line":"           )"},
{"lineNum":"  655","line":"        >> (*lit(\',\'))  // allows for \',\' in the tail"},
{"lineNum":"  656","line":"        >> lit(\')\')"},
{"lineNum":"  657","line":"        ;"},
{"lineNum":"  658","line":""},
{"lineNum":"  659","line":"    line_member ="},
{"lineNum":"  660","line":"          name     [_val=_1]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  661","line":"        | line_seq [_val=_1]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  662","line":"        ;"},
{"lineNum":"  663","line":""},
{"lineNum":"  664","line":"    ref ="},
{"lineNum":"  665","line":"        name  [ _val = phx::construct<mx_keyword>(_1, MX_KW_ELEMENT_REF) ]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  666","line":"        ;"},
{"lineNum":"  667","line":""},
{"lineNum":"  668","line":"    name =","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  669","line":"        lexeme[char_(\"a-zA-Z_\") >> *char_(\".a-zA-Z_0-9\")]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  670","line":"        ;"},
{"lineNum":"  671","line":""},
{"lineNum":"  672","line":"    dblq_str ="},
{"lineNum":"  673","line":"        lexeme[\'\"\' >> +(char_ - \'\"\') >> \'\"\']","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  674","line":"        ;"},
{"lineNum":"  675","line":""},
{"lineNum":"  676","line":"    snglq_str ="},
{"lineNum":"  677","line":"        lexeme[\'\\\'\' >> +(char_ - \'\\\'\') >> \'\\\'\']","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  678","line":"        ;"},
{"lineNum":"  679","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  680","line":"};"},
{"lineNum":"  681","line":""},
{"lineNum":"  682","line":"bool synergia::parse_int_madx( string const & s, mx_tree & doc, string const & f )"},
{"lineNum":"  683","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  684","line":"  if( s.empty() ) return true;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  685","line":""},
{"lineNum":"  686","line":"  typedef string::const_iterator iter_t;"},
{"lineNum":"  687","line":"  typedef qi::rule<iter_t> ws_t;"},
{"lineNum":"  688","line":""},
{"lineNum":"  689","line":"  ws_t whitespace = space","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  690","line":"                  | lit(\'!\')  >> *(char_ - eol) >> eol","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  691","line":"                  | lit(\'&\')  >> *(char_ - eol) >> eol","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  692","line":"                  | lit(\"//\") >> *(char_ - eol) >> eol","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  693","line":"                  | lit(\"/*\") >> *(char_ - \"*/\") >> \"*/\";","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  694","line":""},
{"lineNum":"  695","line":"  madx_tree_parser<iter_t, ws_t> parser;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  696","line":""},
{"lineNum":"  697","line":"  iter_t       begin = s.begin();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  698","line":"  iter_t const end   = s.end();"},
{"lineNum":"  699","line":""},
{"lineNum":"  700","line":"  bool b = qi::phrase_parse( begin, end, parser, whitespace, doc )"},
{"lineNum":"  701","line":"         && begin == end;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  702","line":""},
{"lineNum":"  703","line":"  if( !b )"},
{"lineNum":"  704","line":"  {"},
{"lineNum":"  705","line":"    iter_t e = distance(begin, end)<100 ? end : begin+100;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  706","line":"    string r = string(begin, e);"},
{"lineNum":"  707","line":""},
{"lineNum":"  708","line":"    throw runtime_error(\"MadX: parsing \" + f + \" failed at \\n>>>\\n\" + r + \"\\n<<<\");","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  709","line":"  }"},
{"lineNum":"  710","line":""},
{"lineNum":"  711","line":"  return b;"},
{"lineNum":"  712","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  713","line":""},
{"lineNum":"  714","line":"bool synergia::parse_madx( string const & str, MadX & mx, string const & f )"},
{"lineNum":"  715","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  716","line":"  // first parse the madx doc into a statement tree"},
{"lineNum":"  717","line":"  string s = str + \"\\n\";"},
{"lineNum":"  718","line":"  mx_tree tree;"},
{"lineNum":"  719","line":"  parse_int_madx(s, tree, f);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  720","line":""},
{"lineNum":"  721","line":"  // print for debug purpose"},
{"lineNum":"  722","line":"  //tree.print();"},
{"lineNum":"  723","line":""},
{"lineNum":"  724","line":"  // interpret the syntax tree into a MadX object"},
{"lineNum":"  725","line":"  tree.interpret(mx);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  726","line":""},
{"lineNum":"  727","line":"  return true;"},
{"lineNum":"  728","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  729","line":""},
{"lineNum":"  730","line":"// helper"},
{"lineNum":"  731","line":"namespace"},
{"lineNum":"  732","line":"{"},
{"lineNum":"  733","line":"  void read_from_file( string const & fname, string & str )"},
{"lineNum":"  734","line":"  {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  735","line":"    ifstream file;"},
{"lineNum":"  736","line":"    file.open(fname.c_str());"},
{"lineNum":"  737","line":""},
{"lineNum":"  738","line":"    if( !file.is_open() )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  739","line":"      throw runtime_error( \"Failed to open file \" + fname + \" for parsing\");","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  740","line":""},
{"lineNum":"  741","line":"    file.seekg(0, std::ios::end);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  742","line":"    str.reserve(file.tellg());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  743","line":"    file.seekg(0, std::ios::beg);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  744","line":""},
{"lineNum":"  745","line":"    str.assign((istreambuf_iterator<char>(file)),"},
{"lineNum":"  746","line":"                istreambuf_iterator<char>());"},
{"lineNum":"  747","line":""},
{"lineNum":"  748","line":"    str.append(\"\\n\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  749","line":""},
{"lineNum":"  750","line":"    file.close();"},
{"lineNum":"  751","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  752","line":"}"},
{"lineNum":"  753","line":""},
{"lineNum":"  754","line":"bool synergia::parse_int_madx_file( string const & fname, mx_tree & doc )"},
{"lineNum":"  755","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  756","line":"  string str;"},
{"lineNum":"  757","line":"  read_from_file( fname, str );","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  758","line":"  return parse_int_madx( str, doc, fname );","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  759","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  760","line":""},
{"lineNum":"  761","line":"bool synergia::parse_madx_file( string const & fname, MadX & mx )"},
{"lineNum":"  762","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  763","line":"  string str;"},
{"lineNum":"  764","line":"  read_from_file( fname, str );","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  765","line":"  return parse_madx( str, mx, fname );","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  766","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  767","line":""},
{"lineNum":"  768","line":""},
{"lineNum":"  769","line":""},
{"lineNum":"  770","line":""},
{"lineNum":"  771","line":""},
{"lineNum":"  772","line":""},
{"lineNum":"  773","line":""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 157, "covered" : 0,};
var merged_data = [];
