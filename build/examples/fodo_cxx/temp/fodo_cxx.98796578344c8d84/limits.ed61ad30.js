var data = {lines:[
{"lineNum":"    1","line":"// -*- C++ -*-"},
{"lineNum":"    2","line":"//===---------------------------- limits ----------------------------------===//"},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions."},
{"lineNum":"    5","line":"// See https://llvm.org/LICENSE.txt for license information."},
{"lineNum":"    6","line":"// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef _LIBCPP_LIMITS"},
{"lineNum":"   11","line":"#define _LIBCPP_LIMITS"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"/*"},
{"lineNum":"   14","line":"    limits synopsis"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"namespace std"},
{"lineNum":"   17","line":"{"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"template<class T>"},
{"lineNum":"   20","line":"class numeric_limits"},
{"lineNum":"   21","line":"{"},
{"lineNum":"   22","line":"public:"},
{"lineNum":"   23","line":"    static constexpr bool is_specialized = false;"},
{"lineNum":"   24","line":"    static constexpr T min() noexcept;"},
{"lineNum":"   25","line":"    static constexpr T max() noexcept;"},
{"lineNum":"   26","line":"    static constexpr T lowest() noexcept;"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"    static constexpr int  digits = 0;"},
{"lineNum":"   29","line":"    static constexpr int  digits10 = 0;"},
{"lineNum":"   30","line":"    static constexpr int  max_digits10 = 0;"},
{"lineNum":"   31","line":"    static constexpr bool is_signed = false;"},
{"lineNum":"   32","line":"    static constexpr bool is_integer = false;"},
{"lineNum":"   33","line":"    static constexpr bool is_exact = false;"},
{"lineNum":"   34","line":"    static constexpr int  radix = 0;"},
{"lineNum":"   35","line":"    static constexpr T epsilon() noexcept;"},
{"lineNum":"   36","line":"    static constexpr T round_error() noexcept;"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"    static constexpr int  min_exponent = 0;"},
{"lineNum":"   39","line":"    static constexpr int  min_exponent10 = 0;"},
{"lineNum":"   40","line":"    static constexpr int  max_exponent = 0;"},
{"lineNum":"   41","line":"    static constexpr int  max_exponent10 = 0;"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"    static constexpr bool has_infinity = false;"},
{"lineNum":"   44","line":"    static constexpr bool has_quiet_NaN = false;"},
{"lineNum":"   45","line":"    static constexpr bool has_signaling_NaN = false;"},
{"lineNum":"   46","line":"    static constexpr float_denorm_style has_denorm = denorm_absent;"},
{"lineNum":"   47","line":"    static constexpr bool has_denorm_loss = false;"},
{"lineNum":"   48","line":"    static constexpr T infinity() noexcept;"},
{"lineNum":"   49","line":"    static constexpr T quiet_NaN() noexcept;"},
{"lineNum":"   50","line":"    static constexpr T signaling_NaN() noexcept;"},
{"lineNum":"   51","line":"    static constexpr T denorm_min() noexcept;"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"    static constexpr bool is_iec559 = false;"},
{"lineNum":"   54","line":"    static constexpr bool is_bounded = false;"},
{"lineNum":"   55","line":"    static constexpr bool is_modulo = false;"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"    static constexpr bool traps = false;"},
{"lineNum":"   58","line":"    static constexpr bool tinyness_before = false;"},
{"lineNum":"   59","line":"    static constexpr float_round_style round_style = round_toward_zero;"},
{"lineNum":"   60","line":"};"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"enum float_round_style"},
{"lineNum":"   63","line":"{"},
{"lineNum":"   64","line":"    round_indeterminate       = -1,"},
{"lineNum":"   65","line":"    round_toward_zero         =  0,"},
{"lineNum":"   66","line":"    round_to_nearest          =  1,"},
{"lineNum":"   67","line":"    round_toward_infinity     =  2,"},
{"lineNum":"   68","line":"    round_toward_neg_infinity =  3"},
{"lineNum":"   69","line":"};"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"enum float_denorm_style"},
{"lineNum":"   72","line":"{"},
{"lineNum":"   73","line":"    denorm_indeterminate = -1,"},
{"lineNum":"   74","line":"    denorm_absent = 0,"},
{"lineNum":"   75","line":"    denorm_present = 1"},
{"lineNum":"   76","line":"};"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"template<> class numeric_limits<cv bool>;"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"template<> class numeric_limits<cv char>;"},
{"lineNum":"   81","line":"template<> class numeric_limits<cv signed char>;"},
{"lineNum":"   82","line":"template<> class numeric_limits<cv unsigned char>;"},
{"lineNum":"   83","line":"template<> class numeric_limits<cv wchar_t>;"},
{"lineNum":"   84","line":"template<> class numeric_limits<cv char8_t>; // C++20"},
{"lineNum":"   85","line":"template<> class numeric_limits<cv char16_t>;"},
{"lineNum":"   86","line":"template<> class numeric_limits<cv char32_t>;"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"template<> class numeric_limits<cv short>;"},
{"lineNum":"   89","line":"template<> class numeric_limits<cv int>;"},
{"lineNum":"   90","line":"template<> class numeric_limits<cv long>;"},
{"lineNum":"   91","line":"template<> class numeric_limits<cv long long>;"},
{"lineNum":"   92","line":"template<> class numeric_limits<cv unsigned short>;"},
{"lineNum":"   93","line":"template<> class numeric_limits<cv unsigned int>;"},
{"lineNum":"   94","line":"template<> class numeric_limits<cv unsigned long>;"},
{"lineNum":"   95","line":"template<> class numeric_limits<cv unsigned long long>;"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"template<> class numeric_limits<cv float>;"},
{"lineNum":"   98","line":"template<> class numeric_limits<cv double>;"},
{"lineNum":"   99","line":"template<> class numeric_limits<cv long double>;"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"}  // std"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"*/"},
{"lineNum":"  104","line":"#include <__config>"},
{"lineNum":"  105","line":"#include <type_traits>"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"#if defined(_LIBCPP_COMPILER_MSVC)"},
{"lineNum":"  108","line":"#include \"__support/win32/limits_msvc_win32.h\""},
{"lineNum":"  109","line":"#endif // _LIBCPP_MSVCRT"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"#if defined(__IBMCPP__)"},
{"lineNum":"  112","line":"#include \"__support/ibm/limits.h\""},
{"lineNum":"  113","line":"#endif // __IBMCPP__"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"},
{"lineNum":"  116","line":"#pragma GCC system_header"},
{"lineNum":"  117","line":"#endif"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"_LIBCPP_PUSH_MACROS"},
{"lineNum":"  120","line":"#include <__undef_macros>"},
{"lineNum":"  121","line":"#include <version>"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"_LIBCPP_BEGIN_NAMESPACE_STD"},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"enum float_round_style"},
{"lineNum":"  127","line":"{"},
{"lineNum":"  128","line":"    round_indeterminate       = -1,"},
{"lineNum":"  129","line":"    round_toward_zero         =  0,"},
{"lineNum":"  130","line":"    round_to_nearest          =  1,"},
{"lineNum":"  131","line":"    round_toward_infinity     =  2,"},
{"lineNum":"  132","line":"    round_toward_neg_infinity =  3"},
{"lineNum":"  133","line":"};"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"enum float_denorm_style"},
{"lineNum":"  136","line":"{"},
{"lineNum":"  137","line":"    denorm_indeterminate = -1,"},
{"lineNum":"  138","line":"    denorm_absent = 0,"},
{"lineNum":"  139","line":"    denorm_present = 1"},
{"lineNum":"  140","line":"};"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"template <class _Tp, bool = is_arithmetic<_Tp>::value>"},
{"lineNum":"  143","line":"class __libcpp_numeric_limits"},
{"lineNum":"  144","line":"{"},
{"lineNum":"  145","line":"protected:"},
{"lineNum":"  146","line":"    typedef _Tp type;"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"    static _LIBCPP_CONSTEXPR const  bool is_specialized = false;"},
{"lineNum":"  149","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type min() _NOEXCEPT {return type();}"},
{"lineNum":"  150","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type max() _NOEXCEPT {return type();}"},
{"lineNum":"  151","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type lowest() _NOEXCEPT {return type();}"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"    static _LIBCPP_CONSTEXPR const int  digits = 0;"},
{"lineNum":"  154","line":"    static _LIBCPP_CONSTEXPR const int  digits10 = 0;"},
{"lineNum":"  155","line":"    static _LIBCPP_CONSTEXPR const int  max_digits10 = 0;"},
{"lineNum":"  156","line":"    static _LIBCPP_CONSTEXPR const bool is_signed = false;"},
{"lineNum":"  157","line":"    static _LIBCPP_CONSTEXPR const bool is_integer = false;"},
{"lineNum":"  158","line":"    static _LIBCPP_CONSTEXPR const bool is_exact = false;"},
{"lineNum":"  159","line":"    static _LIBCPP_CONSTEXPR const int  radix = 0;"},
{"lineNum":"  160","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type epsilon() _NOEXCEPT {return type();}"},
{"lineNum":"  161","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type round_error() _NOEXCEPT {return type();}"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"    static _LIBCPP_CONSTEXPR const int  min_exponent = 0;"},
{"lineNum":"  164","line":"    static _LIBCPP_CONSTEXPR const int  min_exponent10 = 0;"},
{"lineNum":"  165","line":"    static _LIBCPP_CONSTEXPR const int  max_exponent = 0;"},
{"lineNum":"  166","line":"    static _LIBCPP_CONSTEXPR const int  max_exponent10 = 0;"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"    static _LIBCPP_CONSTEXPR const bool has_infinity = false;"},
{"lineNum":"  169","line":"    static _LIBCPP_CONSTEXPR const bool has_quiet_NaN = false;"},
{"lineNum":"  170","line":"    static _LIBCPP_CONSTEXPR const bool has_signaling_NaN = false;"},
{"lineNum":"  171","line":"    static _LIBCPP_CONSTEXPR const float_denorm_style has_denorm = denorm_absent;"},
{"lineNum":"  172","line":"    static _LIBCPP_CONSTEXPR const bool has_denorm_loss = false;"},
{"lineNum":"  173","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type infinity() _NOEXCEPT {return type();}"},
{"lineNum":"  174","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type quiet_NaN() _NOEXCEPT {return type();}"},
{"lineNum":"  175","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type signaling_NaN() _NOEXCEPT {return type();}"},
{"lineNum":"  176","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type denorm_min() _NOEXCEPT {return type();}"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"    static _LIBCPP_CONSTEXPR const bool is_iec559 = false;"},
{"lineNum":"  179","line":"    static _LIBCPP_CONSTEXPR const bool is_bounded = false;"},
{"lineNum":"  180","line":"    static _LIBCPP_CONSTEXPR const bool is_modulo = false;"},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"    static _LIBCPP_CONSTEXPR const bool traps = false;"},
{"lineNum":"  183","line":"    static _LIBCPP_CONSTEXPR const bool tinyness_before = false;"},
{"lineNum":"  184","line":"    static _LIBCPP_CONSTEXPR const float_round_style round_style = round_toward_zero;"},
{"lineNum":"  185","line":"};"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"template <class _Tp, int __digits, bool _IsSigned>"},
{"lineNum":"  188","line":"struct __libcpp_compute_min"},
{"lineNum":"  189","line":"{"},
{"lineNum":"  190","line":"    static _LIBCPP_CONSTEXPR const _Tp value = _Tp(_Tp(1) << __digits);"},
{"lineNum":"  191","line":"};"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"template <class _Tp, int __digits>"},
{"lineNum":"  194","line":"struct __libcpp_compute_min<_Tp, __digits, false>"},
{"lineNum":"  195","line":"{"},
{"lineNum":"  196","line":"    static _LIBCPP_CONSTEXPR const _Tp value = _Tp(0);"},
{"lineNum":"  197","line":"};"},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"template <class _Tp>"},
{"lineNum":"  200","line":"class __libcpp_numeric_limits<_Tp, true>"},
{"lineNum":"  201","line":"{"},
{"lineNum":"  202","line":"protected:"},
{"lineNum":"  203","line":"    typedef _Tp type;"},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"    static _LIBCPP_CONSTEXPR const bool is_specialized = true;"},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"    static _LIBCPP_CONSTEXPR const bool is_signed = type(-1) < type(0);"},
{"lineNum":"  208","line":"    static _LIBCPP_CONSTEXPR const int  digits = static_cast<int>(sizeof(type) * __CHAR_BIT__ - is_signed);"},
{"lineNum":"  209","line":"    static _LIBCPP_CONSTEXPR const int  digits10 = digits * 3 / 10;"},
{"lineNum":"  210","line":"    static _LIBCPP_CONSTEXPR const int  max_digits10 = 0;"},
{"lineNum":"  211","line":"    static _LIBCPP_CONSTEXPR const type __min = __libcpp_compute_min<type, digits, is_signed>::value;"},
{"lineNum":"  212","line":"    static _LIBCPP_CONSTEXPR const type __max = is_signed ? type(type(~0) ^ __min) : type(~0);"},
{"lineNum":"  213","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type min() _NOEXCEPT {return __min;}"},
{"lineNum":"  214","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type max() _NOEXCEPT {return __max;}","class":"linePartCov","hits":"5","order":"198","possible_hits":"26",},
{"lineNum":"  215","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type lowest() _NOEXCEPT {return min();}"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"    static _LIBCPP_CONSTEXPR const bool is_integer = true;"},
{"lineNum":"  218","line":"    static _LIBCPP_CONSTEXPR const bool is_exact = true;"},
{"lineNum":"  219","line":"    static _LIBCPP_CONSTEXPR const int  radix = 2;"},
{"lineNum":"  220","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type epsilon() _NOEXCEPT {return type(0);}"},
{"lineNum":"  221","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type round_error() _NOEXCEPT {return type(0);}"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"    static _LIBCPP_CONSTEXPR const int  min_exponent = 0;"},
{"lineNum":"  224","line":"    static _LIBCPP_CONSTEXPR const int  min_exponent10 = 0;"},
{"lineNum":"  225","line":"    static _LIBCPP_CONSTEXPR const int  max_exponent = 0;"},
{"lineNum":"  226","line":"    static _LIBCPP_CONSTEXPR const int  max_exponent10 = 0;"},
{"lineNum":"  227","line":""},
{"lineNum":"  228","line":"    static _LIBCPP_CONSTEXPR const bool has_infinity = false;"},
{"lineNum":"  229","line":"    static _LIBCPP_CONSTEXPR const bool has_quiet_NaN = false;"},
{"lineNum":"  230","line":"    static _LIBCPP_CONSTEXPR const bool has_signaling_NaN = false;"},
{"lineNum":"  231","line":"    static _LIBCPP_CONSTEXPR const float_denorm_style has_denorm = denorm_absent;"},
{"lineNum":"  232","line":"    static _LIBCPP_CONSTEXPR const bool has_denorm_loss = false;"},
{"lineNum":"  233","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type infinity() _NOEXCEPT {return type(0);}"},
{"lineNum":"  234","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type quiet_NaN() _NOEXCEPT {return type(0);}"},
{"lineNum":"  235","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type signaling_NaN() _NOEXCEPT {return type(0);}"},
{"lineNum":"  236","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type denorm_min() _NOEXCEPT {return type(0);}"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"    static _LIBCPP_CONSTEXPR const bool is_iec559 = false;"},
{"lineNum":"  239","line":"    static _LIBCPP_CONSTEXPR const bool is_bounded = true;"},
{"lineNum":"  240","line":"    static _LIBCPP_CONSTEXPR const bool is_modulo = !_VSTD::is_signed<_Tp>::value;"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"#if defined(__i386__) || defined(__x86_64__) || defined(__pnacl__) || \\"},
{"lineNum":"  243","line":"    defined(__wasm__)"},
{"lineNum":"  244","line":"    static _LIBCPP_CONSTEXPR const bool traps = true;"},
{"lineNum":"  245","line":"#else"},
{"lineNum":"  246","line":"    static _LIBCPP_CONSTEXPR const bool traps = false;"},
{"lineNum":"  247","line":"#endif"},
{"lineNum":"  248","line":"    static _LIBCPP_CONSTEXPR const bool tinyness_before = false;"},
{"lineNum":"  249","line":"    static _LIBCPP_CONSTEXPR const float_round_style round_style = round_toward_zero;"},
{"lineNum":"  250","line":"};"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"template <>"},
{"lineNum":"  253","line":"class __libcpp_numeric_limits<bool, true>"},
{"lineNum":"  254","line":"{"},
{"lineNum":"  255","line":"protected:"},
{"lineNum":"  256","line":"    typedef bool type;"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"    static _LIBCPP_CONSTEXPR const bool is_specialized = true;"},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"    static _LIBCPP_CONSTEXPR const bool is_signed = false;"},
{"lineNum":"  261","line":"    static _LIBCPP_CONSTEXPR const int  digits = 1;"},
{"lineNum":"  262","line":"    static _LIBCPP_CONSTEXPR const int  digits10 = 0;"},
{"lineNum":"  263","line":"    static _LIBCPP_CONSTEXPR const int  max_digits10 = 0;"},
{"lineNum":"  264","line":"    static _LIBCPP_CONSTEXPR const type __min = false;"},
{"lineNum":"  265","line":"    static _LIBCPP_CONSTEXPR const type __max = true;"},
{"lineNum":"  266","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type min() _NOEXCEPT {return __min;}"},
{"lineNum":"  267","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type max() _NOEXCEPT {return __max;}"},
{"lineNum":"  268","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type lowest() _NOEXCEPT {return min();}"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"    static _LIBCPP_CONSTEXPR const bool is_integer = true;"},
{"lineNum":"  271","line":"    static _LIBCPP_CONSTEXPR const bool is_exact = true;"},
{"lineNum":"  272","line":"    static _LIBCPP_CONSTEXPR const int  radix = 2;"},
{"lineNum":"  273","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type epsilon() _NOEXCEPT {return type(0);}"},
{"lineNum":"  274","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type round_error() _NOEXCEPT {return type(0);}"},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"    static _LIBCPP_CONSTEXPR const int  min_exponent = 0;"},
{"lineNum":"  277","line":"    static _LIBCPP_CONSTEXPR const int  min_exponent10 = 0;"},
{"lineNum":"  278","line":"    static _LIBCPP_CONSTEXPR const int  max_exponent = 0;"},
{"lineNum":"  279","line":"    static _LIBCPP_CONSTEXPR const int  max_exponent10 = 0;"},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"    static _LIBCPP_CONSTEXPR const bool has_infinity = false;"},
{"lineNum":"  282","line":"    static _LIBCPP_CONSTEXPR const bool has_quiet_NaN = false;"},
{"lineNum":"  283","line":"    static _LIBCPP_CONSTEXPR const bool has_signaling_NaN = false;"},
{"lineNum":"  284","line":"    static _LIBCPP_CONSTEXPR const float_denorm_style has_denorm = denorm_absent;"},
{"lineNum":"  285","line":"    static _LIBCPP_CONSTEXPR const bool has_denorm_loss = false;"},
{"lineNum":"  286","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type infinity() _NOEXCEPT {return type(0);}"},
{"lineNum":"  287","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type quiet_NaN() _NOEXCEPT {return type(0);}"},
{"lineNum":"  288","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type signaling_NaN() _NOEXCEPT {return type(0);}"},
{"lineNum":"  289","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type denorm_min() _NOEXCEPT {return type(0);}"},
{"lineNum":"  290","line":""},
{"lineNum":"  291","line":"    static _LIBCPP_CONSTEXPR const bool is_iec559 = false;"},
{"lineNum":"  292","line":"    static _LIBCPP_CONSTEXPR const bool is_bounded = true;"},
{"lineNum":"  293","line":"    static _LIBCPP_CONSTEXPR const bool is_modulo = false;"},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":"    static _LIBCPP_CONSTEXPR const bool traps = false;"},
{"lineNum":"  296","line":"    static _LIBCPP_CONSTEXPR const bool tinyness_before = false;"},
{"lineNum":"  297","line":"    static _LIBCPP_CONSTEXPR const float_round_style round_style = round_toward_zero;"},
{"lineNum":"  298","line":"};"},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"template <>"},
{"lineNum":"  301","line":"class __libcpp_numeric_limits<float, true>"},
{"lineNum":"  302","line":"{"},
{"lineNum":"  303","line":"protected:"},
{"lineNum":"  304","line":"    typedef float type;"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"    static _LIBCPP_CONSTEXPR const bool is_specialized = true;"},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"    static _LIBCPP_CONSTEXPR const bool is_signed = true;"},
{"lineNum":"  309","line":"    static _LIBCPP_CONSTEXPR const int  digits = __FLT_MANT_DIG__;"},
{"lineNum":"  310","line":"    static _LIBCPP_CONSTEXPR const int  digits10 = __FLT_DIG__;"},
{"lineNum":"  311","line":"    static _LIBCPP_CONSTEXPR const int  max_digits10 = 2+(digits * 30103l)/100000l;"},
{"lineNum":"  312","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type min() _NOEXCEPT {return __FLT_MIN__;}"},
{"lineNum":"  313","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type max() _NOEXCEPT {return __FLT_MAX__;}"},
{"lineNum":"  314","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type lowest() _NOEXCEPT {return -max();}"},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":"    static _LIBCPP_CONSTEXPR const bool is_integer = false;"},
{"lineNum":"  317","line":"    static _LIBCPP_CONSTEXPR const bool is_exact = false;"},
{"lineNum":"  318","line":"    static _LIBCPP_CONSTEXPR const int  radix = __FLT_RADIX__;"},
{"lineNum":"  319","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type epsilon() _NOEXCEPT {return __FLT_EPSILON__;}"},
{"lineNum":"  320","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type round_error() _NOEXCEPT {return 0.5F;}"},
{"lineNum":"  321","line":""},
{"lineNum":"  322","line":"    static _LIBCPP_CONSTEXPR const int  min_exponent = __FLT_MIN_EXP__;"},
{"lineNum":"  323","line":"    static _LIBCPP_CONSTEXPR const int  min_exponent10 = __FLT_MIN_10_EXP__;"},
{"lineNum":"  324","line":"    static _LIBCPP_CONSTEXPR const int  max_exponent = __FLT_MAX_EXP__;"},
{"lineNum":"  325","line":"    static _LIBCPP_CONSTEXPR const int  max_exponent10 = __FLT_MAX_10_EXP__;"},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"    static _LIBCPP_CONSTEXPR const bool has_infinity = true;"},
{"lineNum":"  328","line":"    static _LIBCPP_CONSTEXPR const bool has_quiet_NaN = true;"},
{"lineNum":"  329","line":"    static _LIBCPP_CONSTEXPR const bool has_signaling_NaN = true;"},
{"lineNum":"  330","line":"    static _LIBCPP_CONSTEXPR const float_denorm_style has_denorm = denorm_present;"},
{"lineNum":"  331","line":"    static _LIBCPP_CONSTEXPR const bool has_denorm_loss = false;"},
{"lineNum":"  332","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type infinity() _NOEXCEPT {return __builtin_huge_valf();}"},
{"lineNum":"  333","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type quiet_NaN() _NOEXCEPT {return __builtin_nanf(\"\");}"},
{"lineNum":"  334","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type signaling_NaN() _NOEXCEPT {return __builtin_nansf(\"\");}"},
{"lineNum":"  335","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type denorm_min() _NOEXCEPT {return __FLT_DENORM_MIN__;}"},
{"lineNum":"  336","line":""},
{"lineNum":"  337","line":"    static _LIBCPP_CONSTEXPR const bool is_iec559 = true;"},
{"lineNum":"  338","line":"    static _LIBCPP_CONSTEXPR const bool is_bounded = true;"},
{"lineNum":"  339","line":"    static _LIBCPP_CONSTEXPR const bool is_modulo = false;"},
{"lineNum":"  340","line":""},
{"lineNum":"  341","line":"    static _LIBCPP_CONSTEXPR const bool traps = false;"},
{"lineNum":"  342","line":"    static _LIBCPP_CONSTEXPR const bool tinyness_before = false;"},
{"lineNum":"  343","line":"    static _LIBCPP_CONSTEXPR const float_round_style round_style = round_to_nearest;"},
{"lineNum":"  344","line":"};"},
{"lineNum":"  345","line":""},
{"lineNum":"  346","line":"template <>"},
{"lineNum":"  347","line":"class __libcpp_numeric_limits<double, true>"},
{"lineNum":"  348","line":"{"},
{"lineNum":"  349","line":"protected:"},
{"lineNum":"  350","line":"    typedef double type;"},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"    static _LIBCPP_CONSTEXPR const bool is_specialized = true;"},
{"lineNum":"  353","line":""},
{"lineNum":"  354","line":"    static _LIBCPP_CONSTEXPR const bool is_signed = true;"},
{"lineNum":"  355","line":"    static _LIBCPP_CONSTEXPR const int  digits = __DBL_MANT_DIG__;"},
{"lineNum":"  356","line":"    static _LIBCPP_CONSTEXPR const int  digits10 = __DBL_DIG__;"},
{"lineNum":"  357","line":"    static _LIBCPP_CONSTEXPR const int  max_digits10 = 2+(digits * 30103l)/100000l;"},
{"lineNum":"  358","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type min() _NOEXCEPT {return __DBL_MIN__;}"},
{"lineNum":"  359","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type max() _NOEXCEPT {return __DBL_MAX__;}"},
{"lineNum":"  360","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type lowest() _NOEXCEPT {return -max();}"},
{"lineNum":"  361","line":""},
{"lineNum":"  362","line":"    static _LIBCPP_CONSTEXPR const bool is_integer = false;"},
{"lineNum":"  363","line":"    static _LIBCPP_CONSTEXPR const bool is_exact = false;"},
{"lineNum":"  364","line":"    static _LIBCPP_CONSTEXPR const int  radix = __FLT_RADIX__;"},
{"lineNum":"  365","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type epsilon() _NOEXCEPT {return __DBL_EPSILON__;}"},
{"lineNum":"  366","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type round_error() _NOEXCEPT {return 0.5;}"},
{"lineNum":"  367","line":""},
{"lineNum":"  368","line":"    static _LIBCPP_CONSTEXPR const int  min_exponent = __DBL_MIN_EXP__;"},
{"lineNum":"  369","line":"    static _LIBCPP_CONSTEXPR const int  min_exponent10 = __DBL_MIN_10_EXP__;"},
{"lineNum":"  370","line":"    static _LIBCPP_CONSTEXPR const int  max_exponent = __DBL_MAX_EXP__;"},
{"lineNum":"  371","line":"    static _LIBCPP_CONSTEXPR const int  max_exponent10 = __DBL_MAX_10_EXP__;"},
{"lineNum":"  372","line":""},
{"lineNum":"  373","line":"    static _LIBCPP_CONSTEXPR const bool has_infinity = true;"},
{"lineNum":"  374","line":"    static _LIBCPP_CONSTEXPR const bool has_quiet_NaN = true;"},
{"lineNum":"  375","line":"    static _LIBCPP_CONSTEXPR const bool has_signaling_NaN = true;"},
{"lineNum":"  376","line":"    static _LIBCPP_CONSTEXPR const float_denorm_style has_denorm = denorm_present;"},
{"lineNum":"  377","line":"    static _LIBCPP_CONSTEXPR const bool has_denorm_loss = false;"},
{"lineNum":"  378","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type infinity() _NOEXCEPT {return __builtin_huge_val();}"},
{"lineNum":"  379","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type quiet_NaN() _NOEXCEPT {return __builtin_nan(\"\");}"},
{"lineNum":"  380","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type signaling_NaN() _NOEXCEPT {return __builtin_nans(\"\");}"},
{"lineNum":"  381","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type denorm_min() _NOEXCEPT {return __DBL_DENORM_MIN__;}"},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"    static _LIBCPP_CONSTEXPR const bool is_iec559 = true;"},
{"lineNum":"  384","line":"    static _LIBCPP_CONSTEXPR const bool is_bounded = true;"},
{"lineNum":"  385","line":"    static _LIBCPP_CONSTEXPR const bool is_modulo = false;"},
{"lineNum":"  386","line":""},
{"lineNum":"  387","line":"    static _LIBCPP_CONSTEXPR const bool traps = false;"},
{"lineNum":"  388","line":"    static _LIBCPP_CONSTEXPR const bool tinyness_before = false;"},
{"lineNum":"  389","line":"    static _LIBCPP_CONSTEXPR const float_round_style round_style = round_to_nearest;"},
{"lineNum":"  390","line":"};"},
{"lineNum":"  391","line":""},
{"lineNum":"  392","line":"template <>"},
{"lineNum":"  393","line":"class __libcpp_numeric_limits<long double, true>"},
{"lineNum":"  394","line":"{"},
{"lineNum":"  395","line":"protected:"},
{"lineNum":"  396","line":"    typedef long double type;"},
{"lineNum":"  397","line":""},
{"lineNum":"  398","line":"    static _LIBCPP_CONSTEXPR const bool is_specialized = true;"},
{"lineNum":"  399","line":""},
{"lineNum":"  400","line":"    static _LIBCPP_CONSTEXPR const bool is_signed = true;"},
{"lineNum":"  401","line":"    static _LIBCPP_CONSTEXPR const int  digits = __LDBL_MANT_DIG__;"},
{"lineNum":"  402","line":"    static _LIBCPP_CONSTEXPR const int  digits10 = __LDBL_DIG__;"},
{"lineNum":"  403","line":"    static _LIBCPP_CONSTEXPR const int  max_digits10 = 2+(digits * 30103l)/100000l;"},
{"lineNum":"  404","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type min() _NOEXCEPT {return __LDBL_MIN__;}"},
{"lineNum":"  405","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type max() _NOEXCEPT {return __LDBL_MAX__;}"},
{"lineNum":"  406","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type lowest() _NOEXCEPT {return -max();}"},
{"lineNum":"  407","line":""},
{"lineNum":"  408","line":"    static _LIBCPP_CONSTEXPR const bool is_integer = false;"},
{"lineNum":"  409","line":"    static _LIBCPP_CONSTEXPR const bool is_exact = false;"},
{"lineNum":"  410","line":"    static _LIBCPP_CONSTEXPR const int  radix = __FLT_RADIX__;"},
{"lineNum":"  411","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type epsilon() _NOEXCEPT {return __LDBL_EPSILON__;}"},
{"lineNum":"  412","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type round_error() _NOEXCEPT {return 0.5L;}"},
{"lineNum":"  413","line":""},
{"lineNum":"  414","line":"    static _LIBCPP_CONSTEXPR const int  min_exponent = __LDBL_MIN_EXP__;"},
{"lineNum":"  415","line":"    static _LIBCPP_CONSTEXPR const int  min_exponent10 = __LDBL_MIN_10_EXP__;"},
{"lineNum":"  416","line":"    static _LIBCPP_CONSTEXPR const int  max_exponent = __LDBL_MAX_EXP__;"},
{"lineNum":"  417","line":"    static _LIBCPP_CONSTEXPR const int  max_exponent10 = __LDBL_MAX_10_EXP__;"},
{"lineNum":"  418","line":""},
{"lineNum":"  419","line":"    static _LIBCPP_CONSTEXPR const bool has_infinity = true;"},
{"lineNum":"  420","line":"    static _LIBCPP_CONSTEXPR const bool has_quiet_NaN = true;"},
{"lineNum":"  421","line":"    static _LIBCPP_CONSTEXPR const bool has_signaling_NaN = true;"},
{"lineNum":"  422","line":"    static _LIBCPP_CONSTEXPR const float_denorm_style has_denorm = denorm_present;"},
{"lineNum":"  423","line":"    static _LIBCPP_CONSTEXPR const bool has_denorm_loss = false;"},
{"lineNum":"  424","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type infinity() _NOEXCEPT {return __builtin_huge_vall();}"},
{"lineNum":"  425","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type quiet_NaN() _NOEXCEPT {return __builtin_nanl(\"\");}"},
{"lineNum":"  426","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type signaling_NaN() _NOEXCEPT {return __builtin_nansl(\"\");}"},
{"lineNum":"  427","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type denorm_min() _NOEXCEPT {return __LDBL_DENORM_MIN__;}"},
{"lineNum":"  428","line":""},
{"lineNum":"  429","line":"#if (defined(__ppc__) || defined(__ppc64__))"},
{"lineNum":"  430","line":"    static _LIBCPP_CONSTEXPR const bool is_iec559 = false;"},
{"lineNum":"  431","line":"#else"},
{"lineNum":"  432","line":"    static _LIBCPP_CONSTEXPR const bool is_iec559 = true;"},
{"lineNum":"  433","line":"#endif"},
{"lineNum":"  434","line":"    static _LIBCPP_CONSTEXPR const bool is_bounded = true;"},
{"lineNum":"  435","line":"    static _LIBCPP_CONSTEXPR const bool is_modulo = false;"},
{"lineNum":"  436","line":""},
{"lineNum":"  437","line":"    static _LIBCPP_CONSTEXPR const bool traps = false;"},
{"lineNum":"  438","line":"    static _LIBCPP_CONSTEXPR const bool tinyness_before = false;"},
{"lineNum":"  439","line":"    static _LIBCPP_CONSTEXPR const float_round_style round_style = round_to_nearest;"},
{"lineNum":"  440","line":"};"},
{"lineNum":"  441","line":""},
{"lineNum":"  442","line":"template <class _Tp>"},
{"lineNum":"  443","line":"class _LIBCPP_TEMPLATE_VIS numeric_limits"},
{"lineNum":"  444","line":"    : private __libcpp_numeric_limits<typename remove_cv<_Tp>::type>"},
{"lineNum":"  445","line":"{"},
{"lineNum":"  446","line":"    typedef __libcpp_numeric_limits<typename remove_cv<_Tp>::type> __base;"},
{"lineNum":"  447","line":"    typedef typename __base::type type;"},
{"lineNum":"  448","line":"public:"},
{"lineNum":"  449","line":"    static _LIBCPP_CONSTEXPR const bool is_specialized = __base::is_specialized;"},
{"lineNum":"  450","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type min() _NOEXCEPT {return __base::min();}"},
{"lineNum":"  451","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type max() _NOEXCEPT {return __base::max();}","class":"linePartCov","hits":"5","order":"197","possible_hits":"26",},
{"lineNum":"  452","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type lowest() _NOEXCEPT {return __base::lowest();}"},
{"lineNum":"  453","line":""},
{"lineNum":"  454","line":"    static _LIBCPP_CONSTEXPR const int  digits = __base::digits;"},
{"lineNum":"  455","line":"    static _LIBCPP_CONSTEXPR const int  digits10 = __base::digits10;"},
{"lineNum":"  456","line":"    static _LIBCPP_CONSTEXPR const int  max_digits10 = __base::max_digits10;"},
{"lineNum":"  457","line":"    static _LIBCPP_CONSTEXPR const bool is_signed = __base::is_signed;"},
{"lineNum":"  458","line":"    static _LIBCPP_CONSTEXPR const bool is_integer = __base::is_integer;"},
{"lineNum":"  459","line":"    static _LIBCPP_CONSTEXPR const bool is_exact = __base::is_exact;"},
{"lineNum":"  460","line":"    static _LIBCPP_CONSTEXPR const int  radix = __base::radix;"},
{"lineNum":"  461","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type epsilon() _NOEXCEPT {return __base::epsilon();}"},
{"lineNum":"  462","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type round_error() _NOEXCEPT {return __base::round_error();}"},
{"lineNum":"  463","line":""},
{"lineNum":"  464","line":"    static _LIBCPP_CONSTEXPR const int  min_exponent = __base::min_exponent;"},
{"lineNum":"  465","line":"    static _LIBCPP_CONSTEXPR const int  min_exponent10 = __base::min_exponent10;"},
{"lineNum":"  466","line":"    static _LIBCPP_CONSTEXPR const int  max_exponent = __base::max_exponent;"},
{"lineNum":"  467","line":"    static _LIBCPP_CONSTEXPR const int  max_exponent10 = __base::max_exponent10;"},
{"lineNum":"  468","line":""},
{"lineNum":"  469","line":"    static _LIBCPP_CONSTEXPR const bool has_infinity = __base::has_infinity;"},
{"lineNum":"  470","line":"    static _LIBCPP_CONSTEXPR const bool has_quiet_NaN = __base::has_quiet_NaN;"},
{"lineNum":"  471","line":"    static _LIBCPP_CONSTEXPR const bool has_signaling_NaN = __base::has_signaling_NaN;"},
{"lineNum":"  472","line":"    static _LIBCPP_CONSTEXPR const float_denorm_style has_denorm = __base::has_denorm;"},
{"lineNum":"  473","line":"    static _LIBCPP_CONSTEXPR const bool has_denorm_loss = __base::has_denorm_loss;"},
{"lineNum":"  474","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type infinity() _NOEXCEPT {return __base::infinity();}"},
{"lineNum":"  475","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type quiet_NaN() _NOEXCEPT {return __base::quiet_NaN();}"},
{"lineNum":"  476","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type signaling_NaN() _NOEXCEPT {return __base::signaling_NaN();}"},
{"lineNum":"  477","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type denorm_min() _NOEXCEPT {return __base::denorm_min();}"},
{"lineNum":"  478","line":""},
{"lineNum":"  479","line":"    static _LIBCPP_CONSTEXPR const bool is_iec559 = __base::is_iec559;"},
{"lineNum":"  480","line":"    static _LIBCPP_CONSTEXPR const bool is_bounded = __base::is_bounded;"},
{"lineNum":"  481","line":"    static _LIBCPP_CONSTEXPR const bool is_modulo = __base::is_modulo;"},
{"lineNum":"  482","line":""},
{"lineNum":"  483","line":"    static _LIBCPP_CONSTEXPR const bool traps = __base::traps;"},
{"lineNum":"  484","line":"    static _LIBCPP_CONSTEXPR const bool tinyness_before = __base::tinyness_before;"},
{"lineNum":"  485","line":"    static _LIBCPP_CONSTEXPR const float_round_style round_style = __base::round_style;"},
{"lineNum":"  486","line":"};"},
{"lineNum":"  487","line":""},
{"lineNum":"  488","line":"template <class _Tp>"},
{"lineNum":"  489","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<_Tp>::is_specialized;"},
{"lineNum":"  490","line":"template <class _Tp>"},
{"lineNum":"  491","line":"    _LIBCPP_CONSTEXPR const int numeric_limits<_Tp>::digits;"},
{"lineNum":"  492","line":"template <class _Tp>"},
{"lineNum":"  493","line":"    _LIBCPP_CONSTEXPR const int numeric_limits<_Tp>::digits10;"},
{"lineNum":"  494","line":"template <class _Tp>"},
{"lineNum":"  495","line":"    _LIBCPP_CONSTEXPR const int numeric_limits<_Tp>::max_digits10;"},
{"lineNum":"  496","line":"template <class _Tp>"},
{"lineNum":"  497","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<_Tp>::is_signed;"},
{"lineNum":"  498","line":"template <class _Tp>"},
{"lineNum":"  499","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<_Tp>::is_integer;"},
{"lineNum":"  500","line":"template <class _Tp>"},
{"lineNum":"  501","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<_Tp>::is_exact;"},
{"lineNum":"  502","line":"template <class _Tp>"},
{"lineNum":"  503","line":"    _LIBCPP_CONSTEXPR const int numeric_limits<_Tp>::radix;"},
{"lineNum":"  504","line":"template <class _Tp>"},
{"lineNum":"  505","line":"    _LIBCPP_CONSTEXPR const int numeric_limits<_Tp>::min_exponent;"},
{"lineNum":"  506","line":"template <class _Tp>"},
{"lineNum":"  507","line":"    _LIBCPP_CONSTEXPR const int numeric_limits<_Tp>::min_exponent10;"},
{"lineNum":"  508","line":"template <class _Tp>"},
{"lineNum":"  509","line":"    _LIBCPP_CONSTEXPR const int numeric_limits<_Tp>::max_exponent;"},
{"lineNum":"  510","line":"template <class _Tp>"},
{"lineNum":"  511","line":"    _LIBCPP_CONSTEXPR const int numeric_limits<_Tp>::max_exponent10;"},
{"lineNum":"  512","line":"template <class _Tp>"},
{"lineNum":"  513","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<_Tp>::has_infinity;"},
{"lineNum":"  514","line":"template <class _Tp>"},
{"lineNum":"  515","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<_Tp>::has_quiet_NaN;"},
{"lineNum":"  516","line":"template <class _Tp>"},
{"lineNum":"  517","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<_Tp>::has_signaling_NaN;"},
{"lineNum":"  518","line":"template <class _Tp>"},
{"lineNum":"  519","line":"    _LIBCPP_CONSTEXPR const float_denorm_style numeric_limits<_Tp>::has_denorm;"},
{"lineNum":"  520","line":"template <class _Tp>"},
{"lineNum":"  521","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<_Tp>::has_denorm_loss;"},
{"lineNum":"  522","line":"template <class _Tp>"},
{"lineNum":"  523","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<_Tp>::is_iec559;"},
{"lineNum":"  524","line":"template <class _Tp>"},
{"lineNum":"  525","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<_Tp>::is_bounded;"},
{"lineNum":"  526","line":"template <class _Tp>"},
{"lineNum":"  527","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<_Tp>::is_modulo;"},
{"lineNum":"  528","line":"template <class _Tp>"},
{"lineNum":"  529","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<_Tp>::traps;"},
{"lineNum":"  530","line":"template <class _Tp>"},
{"lineNum":"  531","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<_Tp>::tinyness_before;"},
{"lineNum":"  532","line":"template <class _Tp>"},
{"lineNum":"  533","line":"    _LIBCPP_CONSTEXPR const float_round_style numeric_limits<_Tp>::round_style;"},
{"lineNum":"  534","line":""},
{"lineNum":"  535","line":"template <class _Tp>"},
{"lineNum":"  536","line":"class _LIBCPP_TEMPLATE_VIS numeric_limits<const _Tp>"},
{"lineNum":"  537","line":"    : private numeric_limits<_Tp>"},
{"lineNum":"  538","line":"{"},
{"lineNum":"  539","line":"    typedef numeric_limits<_Tp> __base;"},
{"lineNum":"  540","line":"    typedef _Tp type;"},
{"lineNum":"  541","line":"public:"},
{"lineNum":"  542","line":"    static _LIBCPP_CONSTEXPR const bool is_specialized = __base::is_specialized;"},
{"lineNum":"  543","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type min() _NOEXCEPT {return __base::min();}"},
{"lineNum":"  544","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type max() _NOEXCEPT {return __base::max();}"},
{"lineNum":"  545","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type lowest() _NOEXCEPT {return __base::lowest();}"},
{"lineNum":"  546","line":""},
{"lineNum":"  547","line":"    static _LIBCPP_CONSTEXPR const int  digits = __base::digits;"},
{"lineNum":"  548","line":"    static _LIBCPP_CONSTEXPR const int  digits10 = __base::digits10;"},
{"lineNum":"  549","line":"    static _LIBCPP_CONSTEXPR const int  max_digits10 = __base::max_digits10;"},
{"lineNum":"  550","line":"    static _LIBCPP_CONSTEXPR const bool is_signed = __base::is_signed;"},
{"lineNum":"  551","line":"    static _LIBCPP_CONSTEXPR const bool is_integer = __base::is_integer;"},
{"lineNum":"  552","line":"    static _LIBCPP_CONSTEXPR const bool is_exact = __base::is_exact;"},
{"lineNum":"  553","line":"    static _LIBCPP_CONSTEXPR const int  radix = __base::radix;"},
{"lineNum":"  554","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type epsilon() _NOEXCEPT {return __base::epsilon();}"},
{"lineNum":"  555","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type round_error() _NOEXCEPT {return __base::round_error();}"},
{"lineNum":"  556","line":""},
{"lineNum":"  557","line":"    static _LIBCPP_CONSTEXPR const int  min_exponent = __base::min_exponent;"},
{"lineNum":"  558","line":"    static _LIBCPP_CONSTEXPR const int  min_exponent10 = __base::min_exponent10;"},
{"lineNum":"  559","line":"    static _LIBCPP_CONSTEXPR const int  max_exponent = __base::max_exponent;"},
{"lineNum":"  560","line":"    static _LIBCPP_CONSTEXPR const int  max_exponent10 = __base::max_exponent10;"},
{"lineNum":"  561","line":""},
{"lineNum":"  562","line":"    static _LIBCPP_CONSTEXPR const bool has_infinity = __base::has_infinity;"},
{"lineNum":"  563","line":"    static _LIBCPP_CONSTEXPR const bool has_quiet_NaN = __base::has_quiet_NaN;"},
{"lineNum":"  564","line":"    static _LIBCPP_CONSTEXPR const bool has_signaling_NaN = __base::has_signaling_NaN;"},
{"lineNum":"  565","line":"    static _LIBCPP_CONSTEXPR const float_denorm_style has_denorm = __base::has_denorm;"},
{"lineNum":"  566","line":"    static _LIBCPP_CONSTEXPR const bool has_denorm_loss = __base::has_denorm_loss;"},
{"lineNum":"  567","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type infinity() _NOEXCEPT {return __base::infinity();}"},
{"lineNum":"  568","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type quiet_NaN() _NOEXCEPT {return __base::quiet_NaN();}"},
{"lineNum":"  569","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type signaling_NaN() _NOEXCEPT {return __base::signaling_NaN();}"},
{"lineNum":"  570","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type denorm_min() _NOEXCEPT {return __base::denorm_min();}"},
{"lineNum":"  571","line":""},
{"lineNum":"  572","line":"    static _LIBCPP_CONSTEXPR const bool is_iec559 = __base::is_iec559;"},
{"lineNum":"  573","line":"    static _LIBCPP_CONSTEXPR const bool is_bounded = __base::is_bounded;"},
{"lineNum":"  574","line":"    static _LIBCPP_CONSTEXPR const bool is_modulo = __base::is_modulo;"},
{"lineNum":"  575","line":""},
{"lineNum":"  576","line":"    static _LIBCPP_CONSTEXPR const bool traps = __base::traps;"},
{"lineNum":"  577","line":"    static _LIBCPP_CONSTEXPR const bool tinyness_before = __base::tinyness_before;"},
{"lineNum":"  578","line":"    static _LIBCPP_CONSTEXPR const float_round_style round_style = __base::round_style;"},
{"lineNum":"  579","line":"};"},
{"lineNum":"  580","line":""},
{"lineNum":"  581","line":"template <class _Tp>"},
{"lineNum":"  582","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<const _Tp>::is_specialized;"},
{"lineNum":"  583","line":"template <class _Tp>"},
{"lineNum":"  584","line":"    _LIBCPP_CONSTEXPR const int numeric_limits<const _Tp>::digits;"},
{"lineNum":"  585","line":"template <class _Tp>"},
{"lineNum":"  586","line":"    _LIBCPP_CONSTEXPR const int numeric_limits<const _Tp>::digits10;"},
{"lineNum":"  587","line":"template <class _Tp>"},
{"lineNum":"  588","line":"    _LIBCPP_CONSTEXPR const int numeric_limits<const _Tp>::max_digits10;"},
{"lineNum":"  589","line":"template <class _Tp>"},
{"lineNum":"  590","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<const _Tp>::is_signed;"},
{"lineNum":"  591","line":"template <class _Tp>"},
{"lineNum":"  592","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<const _Tp>::is_integer;"},
{"lineNum":"  593","line":"template <class _Tp>"},
{"lineNum":"  594","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<const _Tp>::is_exact;"},
{"lineNum":"  595","line":"template <class _Tp>"},
{"lineNum":"  596","line":"    _LIBCPP_CONSTEXPR const int numeric_limits<const _Tp>::radix;"},
{"lineNum":"  597","line":"template <class _Tp>"},
{"lineNum":"  598","line":"    _LIBCPP_CONSTEXPR const int numeric_limits<const _Tp>::min_exponent;"},
{"lineNum":"  599","line":"template <class _Tp>"},
{"lineNum":"  600","line":"    _LIBCPP_CONSTEXPR const int numeric_limits<const _Tp>::min_exponent10;"},
{"lineNum":"  601","line":"template <class _Tp>"},
{"lineNum":"  602","line":"    _LIBCPP_CONSTEXPR const int numeric_limits<const _Tp>::max_exponent;"},
{"lineNum":"  603","line":"template <class _Tp>"},
{"lineNum":"  604","line":"    _LIBCPP_CONSTEXPR const int numeric_limits<const _Tp>::max_exponent10;"},
{"lineNum":"  605","line":"template <class _Tp>"},
{"lineNum":"  606","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<const _Tp>::has_infinity;"},
{"lineNum":"  607","line":"template <class _Tp>"},
{"lineNum":"  608","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<const _Tp>::has_quiet_NaN;"},
{"lineNum":"  609","line":"template <class _Tp>"},
{"lineNum":"  610","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<const _Tp>::has_signaling_NaN;"},
{"lineNum":"  611","line":"template <class _Tp>"},
{"lineNum":"  612","line":"    _LIBCPP_CONSTEXPR const float_denorm_style numeric_limits<const _Tp>::has_denorm;"},
{"lineNum":"  613","line":"template <class _Tp>"},
{"lineNum":"  614","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<const _Tp>::has_denorm_loss;"},
{"lineNum":"  615","line":"template <class _Tp>"},
{"lineNum":"  616","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<const _Tp>::is_iec559;"},
{"lineNum":"  617","line":"template <class _Tp>"},
{"lineNum":"  618","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<const _Tp>::is_bounded;"},
{"lineNum":"  619","line":"template <class _Tp>"},
{"lineNum":"  620","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<const _Tp>::is_modulo;"},
{"lineNum":"  621","line":"template <class _Tp>"},
{"lineNum":"  622","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<const _Tp>::traps;"},
{"lineNum":"  623","line":"template <class _Tp>"},
{"lineNum":"  624","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<const _Tp>::tinyness_before;"},
{"lineNum":"  625","line":"template <class _Tp>"},
{"lineNum":"  626","line":"    _LIBCPP_CONSTEXPR const float_round_style numeric_limits<const _Tp>::round_style;"},
{"lineNum":"  627","line":""},
{"lineNum":"  628","line":"template <class _Tp>"},
{"lineNum":"  629","line":"class _LIBCPP_TEMPLATE_VIS numeric_limits<volatile _Tp>"},
{"lineNum":"  630","line":"    : private numeric_limits<_Tp>"},
{"lineNum":"  631","line":"{"},
{"lineNum":"  632","line":"    typedef numeric_limits<_Tp> __base;"},
{"lineNum":"  633","line":"    typedef _Tp type;"},
{"lineNum":"  634","line":"public:"},
{"lineNum":"  635","line":"    static _LIBCPP_CONSTEXPR const bool is_specialized = __base::is_specialized;"},
{"lineNum":"  636","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type min() _NOEXCEPT {return __base::min();}"},
{"lineNum":"  637","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type max() _NOEXCEPT {return __base::max();}"},
{"lineNum":"  638","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type lowest() _NOEXCEPT {return __base::lowest();}"},
{"lineNum":"  639","line":""},
{"lineNum":"  640","line":"    static _LIBCPP_CONSTEXPR const int  digits = __base::digits;"},
{"lineNum":"  641","line":"    static _LIBCPP_CONSTEXPR const int  digits10 = __base::digits10;"},
{"lineNum":"  642","line":"    static _LIBCPP_CONSTEXPR const int  max_digits10 = __base::max_digits10;"},
{"lineNum":"  643","line":"    static _LIBCPP_CONSTEXPR const bool is_signed = __base::is_signed;"},
{"lineNum":"  644","line":"    static _LIBCPP_CONSTEXPR const bool is_integer = __base::is_integer;"},
{"lineNum":"  645","line":"    static _LIBCPP_CONSTEXPR const bool is_exact = __base::is_exact;"},
{"lineNum":"  646","line":"    static _LIBCPP_CONSTEXPR const int  radix = __base::radix;"},
{"lineNum":"  647","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type epsilon() _NOEXCEPT {return __base::epsilon();}"},
{"lineNum":"  648","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type round_error() _NOEXCEPT {return __base::round_error();}"},
{"lineNum":"  649","line":""},
{"lineNum":"  650","line":"    static _LIBCPP_CONSTEXPR const int  min_exponent = __base::min_exponent;"},
{"lineNum":"  651","line":"    static _LIBCPP_CONSTEXPR const int  min_exponent10 = __base::min_exponent10;"},
{"lineNum":"  652","line":"    static _LIBCPP_CONSTEXPR const int  max_exponent = __base::max_exponent;"},
{"lineNum":"  653","line":"    static _LIBCPP_CONSTEXPR const int  max_exponent10 = __base::max_exponent10;"},
{"lineNum":"  654","line":""},
{"lineNum":"  655","line":"    static _LIBCPP_CONSTEXPR const bool has_infinity = __base::has_infinity;"},
{"lineNum":"  656","line":"    static _LIBCPP_CONSTEXPR const bool has_quiet_NaN = __base::has_quiet_NaN;"},
{"lineNum":"  657","line":"    static _LIBCPP_CONSTEXPR const bool has_signaling_NaN = __base::has_signaling_NaN;"},
{"lineNum":"  658","line":"    static _LIBCPP_CONSTEXPR const float_denorm_style has_denorm = __base::has_denorm;"},
{"lineNum":"  659","line":"    static _LIBCPP_CONSTEXPR const bool has_denorm_loss = __base::has_denorm_loss;"},
{"lineNum":"  660","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type infinity() _NOEXCEPT {return __base::infinity();}"},
{"lineNum":"  661","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type quiet_NaN() _NOEXCEPT {return __base::quiet_NaN();}"},
{"lineNum":"  662","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type signaling_NaN() _NOEXCEPT {return __base::signaling_NaN();}"},
{"lineNum":"  663","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type denorm_min() _NOEXCEPT {return __base::denorm_min();}"},
{"lineNum":"  664","line":""},
{"lineNum":"  665","line":"    static _LIBCPP_CONSTEXPR const bool is_iec559 = __base::is_iec559;"},
{"lineNum":"  666","line":"    static _LIBCPP_CONSTEXPR const bool is_bounded = __base::is_bounded;"},
{"lineNum":"  667","line":"    static _LIBCPP_CONSTEXPR const bool is_modulo = __base::is_modulo;"},
{"lineNum":"  668","line":""},
{"lineNum":"  669","line":"    static _LIBCPP_CONSTEXPR const bool traps = __base::traps;"},
{"lineNum":"  670","line":"    static _LIBCPP_CONSTEXPR const bool tinyness_before = __base::tinyness_before;"},
{"lineNum":"  671","line":"    static _LIBCPP_CONSTEXPR const float_round_style round_style = __base::round_style;"},
{"lineNum":"  672","line":"};"},
{"lineNum":"  673","line":""},
{"lineNum":"  674","line":"template <class _Tp>"},
{"lineNum":"  675","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<volatile _Tp>::is_specialized;"},
{"lineNum":"  676","line":"template <class _Tp>"},
{"lineNum":"  677","line":"    _LIBCPP_CONSTEXPR const int numeric_limits<volatile _Tp>::digits;"},
{"lineNum":"  678","line":"template <class _Tp>"},
{"lineNum":"  679","line":"    _LIBCPP_CONSTEXPR const int numeric_limits<volatile _Tp>::digits10;"},
{"lineNum":"  680","line":"template <class _Tp>"},
{"lineNum":"  681","line":"    _LIBCPP_CONSTEXPR const int numeric_limits<volatile _Tp>::max_digits10;"},
{"lineNum":"  682","line":"template <class _Tp>"},
{"lineNum":"  683","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<volatile _Tp>::is_signed;"},
{"lineNum":"  684","line":"template <class _Tp>"},
{"lineNum":"  685","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<volatile _Tp>::is_integer;"},
{"lineNum":"  686","line":"template <class _Tp>"},
{"lineNum":"  687","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<volatile _Tp>::is_exact;"},
{"lineNum":"  688","line":"template <class _Tp>"},
{"lineNum":"  689","line":"    _LIBCPP_CONSTEXPR const int numeric_limits<volatile _Tp>::radix;"},
{"lineNum":"  690","line":"template <class _Tp>"},
{"lineNum":"  691","line":"    _LIBCPP_CONSTEXPR const int numeric_limits<volatile _Tp>::min_exponent;"},
{"lineNum":"  692","line":"template <class _Tp>"},
{"lineNum":"  693","line":"    _LIBCPP_CONSTEXPR const int numeric_limits<volatile _Tp>::min_exponent10;"},
{"lineNum":"  694","line":"template <class _Tp>"},
{"lineNum":"  695","line":"    _LIBCPP_CONSTEXPR const int numeric_limits<volatile _Tp>::max_exponent;"},
{"lineNum":"  696","line":"template <class _Tp>"},
{"lineNum":"  697","line":"    _LIBCPP_CONSTEXPR const int numeric_limits<volatile _Tp>::max_exponent10;"},
{"lineNum":"  698","line":"template <class _Tp>"},
{"lineNum":"  699","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<volatile _Tp>::has_infinity;"},
{"lineNum":"  700","line":"template <class _Tp>"},
{"lineNum":"  701","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<volatile _Tp>::has_quiet_NaN;"},
{"lineNum":"  702","line":"template <class _Tp>"},
{"lineNum":"  703","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<volatile _Tp>::has_signaling_NaN;"},
{"lineNum":"  704","line":"template <class _Tp>"},
{"lineNum":"  705","line":"    _LIBCPP_CONSTEXPR const float_denorm_style numeric_limits<volatile _Tp>::has_denorm;"},
{"lineNum":"  706","line":"template <class _Tp>"},
{"lineNum":"  707","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<volatile _Tp>::has_denorm_loss;"},
{"lineNum":"  708","line":"template <class _Tp>"},
{"lineNum":"  709","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<volatile _Tp>::is_iec559;"},
{"lineNum":"  710","line":"template <class _Tp>"},
{"lineNum":"  711","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<volatile _Tp>::is_bounded;"},
{"lineNum":"  712","line":"template <class _Tp>"},
{"lineNum":"  713","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<volatile _Tp>::is_modulo;"},
{"lineNum":"  714","line":"template <class _Tp>"},
{"lineNum":"  715","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<volatile _Tp>::traps;"},
{"lineNum":"  716","line":"template <class _Tp>"},
{"lineNum":"  717","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<volatile _Tp>::tinyness_before;"},
{"lineNum":"  718","line":"template <class _Tp>"},
{"lineNum":"  719","line":"    _LIBCPP_CONSTEXPR const float_round_style numeric_limits<volatile _Tp>::round_style;"},
{"lineNum":"  720","line":""},
{"lineNum":"  721","line":"template <class _Tp>"},
{"lineNum":"  722","line":"class _LIBCPP_TEMPLATE_VIS numeric_limits<const volatile _Tp>"},
{"lineNum":"  723","line":"    : private numeric_limits<_Tp>"},
{"lineNum":"  724","line":"{"},
{"lineNum":"  725","line":"    typedef numeric_limits<_Tp> __base;"},
{"lineNum":"  726","line":"    typedef _Tp type;"},
{"lineNum":"  727","line":"public:"},
{"lineNum":"  728","line":"    static _LIBCPP_CONSTEXPR const bool is_specialized = __base::is_specialized;"},
{"lineNum":"  729","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type min() _NOEXCEPT {return __base::min();}"},
{"lineNum":"  730","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type max() _NOEXCEPT {return __base::max();}"},
{"lineNum":"  731","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type lowest() _NOEXCEPT {return __base::lowest();}"},
{"lineNum":"  732","line":""},
{"lineNum":"  733","line":"    static _LIBCPP_CONSTEXPR const int  digits = __base::digits;"},
{"lineNum":"  734","line":"    static _LIBCPP_CONSTEXPR const int  digits10 = __base::digits10;"},
{"lineNum":"  735","line":"    static _LIBCPP_CONSTEXPR const int  max_digits10 = __base::max_digits10;"},
{"lineNum":"  736","line":"    static _LIBCPP_CONSTEXPR const bool is_signed = __base::is_signed;"},
{"lineNum":"  737","line":"    static _LIBCPP_CONSTEXPR const bool is_integer = __base::is_integer;"},
{"lineNum":"  738","line":"    static _LIBCPP_CONSTEXPR const bool is_exact = __base::is_exact;"},
{"lineNum":"  739","line":"    static _LIBCPP_CONSTEXPR const int  radix = __base::radix;"},
{"lineNum":"  740","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type epsilon() _NOEXCEPT {return __base::epsilon();}"},
{"lineNum":"  741","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type round_error() _NOEXCEPT {return __base::round_error();}"},
{"lineNum":"  742","line":""},
{"lineNum":"  743","line":"    static _LIBCPP_CONSTEXPR const int  min_exponent = __base::min_exponent;"},
{"lineNum":"  744","line":"    static _LIBCPP_CONSTEXPR const int  min_exponent10 = __base::min_exponent10;"},
{"lineNum":"  745","line":"    static _LIBCPP_CONSTEXPR const int  max_exponent = __base::max_exponent;"},
{"lineNum":"  746","line":"    static _LIBCPP_CONSTEXPR const int  max_exponent10 = __base::max_exponent10;"},
{"lineNum":"  747","line":""},
{"lineNum":"  748","line":"    static _LIBCPP_CONSTEXPR const bool has_infinity = __base::has_infinity;"},
{"lineNum":"  749","line":"    static _LIBCPP_CONSTEXPR const bool has_quiet_NaN = __base::has_quiet_NaN;"},
{"lineNum":"  750","line":"    static _LIBCPP_CONSTEXPR const bool has_signaling_NaN = __base::has_signaling_NaN;"},
{"lineNum":"  751","line":"    static _LIBCPP_CONSTEXPR const float_denorm_style has_denorm = __base::has_denorm;"},
{"lineNum":"  752","line":"    static _LIBCPP_CONSTEXPR const bool has_denorm_loss = __base::has_denorm_loss;"},
{"lineNum":"  753","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type infinity() _NOEXCEPT {return __base::infinity();}"},
{"lineNum":"  754","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type quiet_NaN() _NOEXCEPT {return __base::quiet_NaN();}"},
{"lineNum":"  755","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type signaling_NaN() _NOEXCEPT {return __base::signaling_NaN();}"},
{"lineNum":"  756","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR type denorm_min() _NOEXCEPT {return __base::denorm_min();}"},
{"lineNum":"  757","line":""},
{"lineNum":"  758","line":"    static _LIBCPP_CONSTEXPR const bool is_iec559 = __base::is_iec559;"},
{"lineNum":"  759","line":"    static _LIBCPP_CONSTEXPR const bool is_bounded = __base::is_bounded;"},
{"lineNum":"  760","line":"    static _LIBCPP_CONSTEXPR const bool is_modulo = __base::is_modulo;"},
{"lineNum":"  761","line":""},
{"lineNum":"  762","line":"    static _LIBCPP_CONSTEXPR const bool traps = __base::traps;"},
{"lineNum":"  763","line":"    static _LIBCPP_CONSTEXPR const bool tinyness_before = __base::tinyness_before;"},
{"lineNum":"  764","line":"    static _LIBCPP_CONSTEXPR const float_round_style round_style = __base::round_style;"},
{"lineNum":"  765","line":"};"},
{"lineNum":"  766","line":""},
{"lineNum":"  767","line":"template <class _Tp>"},
{"lineNum":"  768","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<const volatile _Tp>::is_specialized;"},
{"lineNum":"  769","line":"template <class _Tp>"},
{"lineNum":"  770","line":"    _LIBCPP_CONSTEXPR const int numeric_limits<const volatile _Tp>::digits;"},
{"lineNum":"  771","line":"template <class _Tp>"},
{"lineNum":"  772","line":"    _LIBCPP_CONSTEXPR const int numeric_limits<const volatile _Tp>::digits10;"},
{"lineNum":"  773","line":"template <class _Tp>"},
{"lineNum":"  774","line":"    _LIBCPP_CONSTEXPR const int numeric_limits<const volatile _Tp>::max_digits10;"},
{"lineNum":"  775","line":"template <class _Tp>"},
{"lineNum":"  776","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<const volatile _Tp>::is_signed;"},
{"lineNum":"  777","line":"template <class _Tp>"},
{"lineNum":"  778","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<const volatile _Tp>::is_integer;"},
{"lineNum":"  779","line":"template <class _Tp>"},
{"lineNum":"  780","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<const volatile _Tp>::is_exact;"},
{"lineNum":"  781","line":"template <class _Tp>"},
{"lineNum":"  782","line":"    _LIBCPP_CONSTEXPR const int numeric_limits<const volatile _Tp>::radix;"},
{"lineNum":"  783","line":"template <class _Tp>"},
{"lineNum":"  784","line":"    _LIBCPP_CONSTEXPR const int numeric_limits<const volatile _Tp>::min_exponent;"},
{"lineNum":"  785","line":"template <class _Tp>"},
{"lineNum":"  786","line":"    _LIBCPP_CONSTEXPR const int numeric_limits<const volatile _Tp>::min_exponent10;"},
{"lineNum":"  787","line":"template <class _Tp>"},
{"lineNum":"  788","line":"    _LIBCPP_CONSTEXPR const int numeric_limits<const volatile _Tp>::max_exponent;"},
{"lineNum":"  789","line":"template <class _Tp>"},
{"lineNum":"  790","line":"    _LIBCPP_CONSTEXPR const int numeric_limits<const volatile _Tp>::max_exponent10;"},
{"lineNum":"  791","line":"template <class _Tp>"},
{"lineNum":"  792","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<const volatile _Tp>::has_infinity;"},
{"lineNum":"  793","line":"template <class _Tp>"},
{"lineNum":"  794","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<const volatile _Tp>::has_quiet_NaN;"},
{"lineNum":"  795","line":"template <class _Tp>"},
{"lineNum":"  796","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<const volatile _Tp>::has_signaling_NaN;"},
{"lineNum":"  797","line":"template <class _Tp>"},
{"lineNum":"  798","line":"    _LIBCPP_CONSTEXPR const float_denorm_style numeric_limits<const volatile _Tp>::has_denorm;"},
{"lineNum":"  799","line":"template <class _Tp>"},
{"lineNum":"  800","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<const volatile _Tp>::has_denorm_loss;"},
{"lineNum":"  801","line":"template <class _Tp>"},
{"lineNum":"  802","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<const volatile _Tp>::is_iec559;"},
{"lineNum":"  803","line":"template <class _Tp>"},
{"lineNum":"  804","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<const volatile _Tp>::is_bounded;"},
{"lineNum":"  805","line":"template <class _Tp>"},
{"lineNum":"  806","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<const volatile _Tp>::is_modulo;"},
{"lineNum":"  807","line":"template <class _Tp>"},
{"lineNum":"  808","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<const volatile _Tp>::traps;"},
{"lineNum":"  809","line":"template <class _Tp>"},
{"lineNum":"  810","line":"    _LIBCPP_CONSTEXPR const bool numeric_limits<const volatile _Tp>::tinyness_before;"},
{"lineNum":"  811","line":"template <class _Tp>"},
{"lineNum":"  812","line":"    _LIBCPP_CONSTEXPR const float_round_style numeric_limits<const volatile _Tp>::round_style;"},
{"lineNum":"  813","line":""},
{"lineNum":"  814","line":"_LIBCPP_END_NAMESPACE_STD"},
{"lineNum":"  815","line":""},
{"lineNum":"  816","line":"_LIBCPP_POP_MACROS"},
{"lineNum":"  817","line":""},
{"lineNum":"  818","line":"#endif // _LIBCPP_LIMITS"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 2, "covered" : 2,};
var merged_data = [];
