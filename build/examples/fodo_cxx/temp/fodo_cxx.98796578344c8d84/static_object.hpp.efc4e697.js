var data = {lines:[
{"lineNum":"    1","line":"/*! \\file static_object.hpp"},
{"lineNum":"    2","line":"    \\brief Internal polymorphism static object support"},
{"lineNum":"    3","line":"    \\ingroup Internal */"},
{"lineNum":"    4","line":"/*"},
{"lineNum":"    5","line":"  Copyright (c) 2014, Randolph Voorhies, Shane Grant"},
{"lineNum":"    6","line":"  All rights reserved."},
{"lineNum":"    7","line":"  Redistribution and use in source and binary forms, with or without"},
{"lineNum":"    8","line":"  modification, are permitted provided that the following conditions are met:"},
{"lineNum":"    9","line":"      * Redistributions of source code must retain the above copyright"},
{"lineNum":"   10","line":"        notice, this list of conditions and the following disclaimer."},
{"lineNum":"   11","line":"      * Redistributions in binary form must reproduce the above copyright"},
{"lineNum":"   12","line":"        notice, this list of conditions and the following disclaimer in the"},
{"lineNum":"   13","line":"        documentation and/or other materials provided with the distribution."},
{"lineNum":"   14","line":"      * Neither the name of cereal nor the"},
{"lineNum":"   15","line":"        names of its contributors may be used to endorse or promote products"},
{"lineNum":"   16","line":"        derived from this software without specific prior written permission."},
{"lineNum":"   17","line":"  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND"},
{"lineNum":"   18","line":"  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED"},
{"lineNum":"   19","line":"  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE"},
{"lineNum":"   20","line":"  DISCLAIMED. IN NO EVENT SHALL RANDOLPH VOORHIES OR SHANE GRANT BE LIABLE FOR ANY"},
{"lineNum":"   21","line":"  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES"},
{"lineNum":"   22","line":"  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;"},
{"lineNum":"   23","line":"  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"},
{"lineNum":"   24","line":"  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT"},
{"lineNum":"   25","line":"  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"},
{"lineNum":"   26","line":"  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   27","line":"*/"},
{"lineNum":"   28","line":"#ifndef CEREAL_DETAILS_STATIC_OBJECT_HPP_"},
{"lineNum":"   29","line":"#define CEREAL_DETAILS_STATIC_OBJECT_HPP_"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"#include \"cereal/macros.hpp\""},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"#if CEREAL_THREAD_SAFE"},
{"lineNum":"   34","line":"#include <mutex>"},
{"lineNum":"   35","line":"#endif"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"//! Prevent link optimization from removing non-referenced static objects"},
{"lineNum":"   38","line":"/*! Especially for polymorphic support, we create static objects which"},
{"lineNum":"   39","line":"    may not ever be explicitly referenced.  Most linkers will detect this"},
{"lineNum":"   40","line":"    and remove the code causing various unpleasant runtime errors.  These"},
{"lineNum":"   41","line":"    macros, adopted from Boost (see force_include.hpp) prevent this"},
{"lineNum":"   42","line":"    (C) Copyright 2002 Robert Ramey - http://www.rrsd.com ."},
{"lineNum":"   43","line":"    Use, modification and distribution is subject to the Boost Software"},
{"lineNum":"   44","line":"    License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at"},
{"lineNum":"   45","line":"    http://www.boost.org/LICENSE_1_0.txt) */"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"#if defined(_MSC_VER) && !defined(__clang__)"},
{"lineNum":"   48","line":"#   define CEREAL_DLL_EXPORT __declspec(dllexport)"},
{"lineNum":"   49","line":"#   define CEREAL_USED"},
{"lineNum":"   50","line":"#else // clang or gcc"},
{"lineNum":"   51","line":"#   define CEREAL_DLL_EXPORT __attribute__ ((visibility(\"default\")))"},
{"lineNum":"   52","line":"#   define CEREAL_USED __attribute__ ((__used__))"},
{"lineNum":"   53","line":"#endif"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"namespace cereal"},
{"lineNum":"   56","line":"{"},
{"lineNum":"   57","line":"  namespace detail"},
{"lineNum":"   58","line":"  {"},
{"lineNum":"   59","line":"    //! A static, pre-execution object"},
{"lineNum":"   60","line":"    /*! This class will create a single copy (singleton) of some"},
{"lineNum":"   61","line":"        type and ensures that merely referencing this type will"},
{"lineNum":"   62","line":"        cause it to be instantiated and initialized pre-execution."},
{"lineNum":"   63","line":"        For example, this is used heavily in the polymorphic pointer"},
{"lineNum":"   64","line":"        serialization mechanisms to bind various archive types with"},
{"lineNum":"   65","line":"        different polymorphic classes */"},
{"lineNum":"   66","line":"    template <class T>"},
{"lineNum":"   67","line":"    class CEREAL_DLL_EXPORT StaticObject"},
{"lineNum":"   68","line":"    {"},
{"lineNum":"   69","line":"      private:"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"        static T & create()"},
{"lineNum":"   72","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"   73","line":"          static T t;","class":"linePartCov","hits":"52","order":"9","possible_hits":"1884",},
{"lineNum":"   74","line":"          //! Forces instantiation at pre-execution time"},
{"lineNum":"   75","line":"          (void)instance;","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":"   76","line":"          return t;","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"   77","line":"        }"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"        StaticObject( StaticObject const & /*other*/ ) {}"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"      public:"},
{"lineNum":"   82","line":"        static T & getInstance()"},
{"lineNum":"   83","line":"        {","class":"lineCov","hits":"6","order":"7","possible_hits":"6",},
{"lineNum":"   84","line":"          return create();","class":"linePartCov","hits":"35","order":"8","possible_hits":"197",},
{"lineNum":"   85","line":"        }"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"        //! A class that acts like std::lock_guard"},
{"lineNum":"   88","line":"        class LockGuard"},
{"lineNum":"   89","line":"        {"},
{"lineNum":"   90","line":"          #if CEREAL_THREAD_SAFE"},
{"lineNum":"   91","line":"          public:"},
{"lineNum":"   92","line":"            LockGuard(std::mutex & m) : lock(m) {}"},
{"lineNum":"   93","line":"          private:"},
{"lineNum":"   94","line":"            std::unique_lock<std::mutex> lock;"},
{"lineNum":"   95","line":"          #else"},
{"lineNum":"   96","line":"          public:"},
{"lineNum":"   97","line":"            LockGuard() = default;"},
{"lineNum":"   98","line":"            LockGuard(LockGuard const &) = default; // prevents implicit copy ctor warning"},
{"lineNum":"   99","line":"            ~LockGuard() CEREAL_NOEXCEPT {} // prevents variable not used"},
{"lineNum":"  100","line":"          #endif"},
{"lineNum":"  101","line":"        };"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"        //! Attempts to lock this static object for the current scope"},
{"lineNum":"  104","line":"        /*! @note This function is a no-op if cereal is not compiled with"},
{"lineNum":"  105","line":"                  thread safety enabled (CEREAL_THREAD_SAFE = 1)."},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"            This function returns an object that holds a lock for"},
{"lineNum":"  108","line":"            this StaticObject that will release its lock upon destruction. This"},
{"lineNum":"  109","line":"            call will block until the lock is available. */"},
{"lineNum":"  110","line":"        static LockGuard lock()"},
{"lineNum":"  111","line":"        {"},
{"lineNum":"  112","line":"          #if CEREAL_THREAD_SAFE"},
{"lineNum":"  113","line":"          static std::mutex instanceMutex;"},
{"lineNum":"  114","line":"          return LockGuard{instanceMutex};"},
{"lineNum":"  115","line":"          #else"},
{"lineNum":"  116","line":"          return LockGuard{};"},
{"lineNum":"  117","line":"          #endif"},
{"lineNum":"  118","line":"        }"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"      private:"},
{"lineNum":"  121","line":"        static T & instance;"},
{"lineNum":"  122","line":"    };"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"    template <class T> T & StaticObject<T>::instance = StaticObject<T>::create();","class":"linePartCov","hits":"81","order":"698","possible_hits":"496",},
{"lineNum":"  125","line":"  } // namespace detail"},
{"lineNum":"  126","line":"} // namespace cereal"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"#endif // CEREAL_DETAILS_STATIC_OBJECT_HPP_"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 7, "covered" : 4,};
var merged_data = [];
