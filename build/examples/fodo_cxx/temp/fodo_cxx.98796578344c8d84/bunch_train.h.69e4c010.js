var data = {lines:[
{"lineNum":"    1","line":"#ifndef BUNCH_TRAIN_H_"},
{"lineNum":"    2","line":"#define BUNCH_TRAIN_H_"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#include \"synergia/bunch/bunch.h\""},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"#include <cereal/types/array.hpp>"},
{"lineNum":"    7","line":"#include <cereal/types/vector.hpp>"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"class Bunch_train","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   10","line":"{"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"private:"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"    std::shared_ptr<Commxx> comm;"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"    std::vector<Bunch> bunches;"},
{"lineNum":"   17","line":"    std::vector<double> spacings;"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"    int index;"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"    int num_bunches;"},
{"lineNum":"   22","line":"    int num_buckets;"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"    // bunch_idx_map[bunch] stores the index in the local bunch array."},
{"lineNum":"   25","line":"    // the array has the dim of num_bunches, if the bunch is not present in"},
{"lineNum":"   26","line":"    // the current rank, the stored value is -1"},
{"lineNum":"   27","line":"    std::vector<int> bunch_idx_map;"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"    /// counts and offsets are needed for impedance, counts.size()=offsets.size()=num_procs"},
{"lineNum":"   30","line":"    /// they are meaningfull only on the local rank=0 of every bunch communicator"},
{"lineNum":"   31","line":"    /// for example:  3 bunches on 5 processors: proc 2 and 4 has local rank different form zero"},
{"lineNum":"   32","line":"    ///              (count[0]=1, offset[0]=0), (count[1]=1, offset[3]=1), (count[3]=1, offset[3]=2)"},
{"lineNum":"   33","line":"    /// for example:  5 bunches on 3 processors:"},
{"lineNum":"   34","line":"    ///                (count[0]=1, offset[0]=0), (count[1]=2, offset[3]=1), (count[2]=2, offset[2]=3)"},
{"lineNum":"   35","line":"    std::vector< int> proc_counts_imped;"},
{"lineNum":"   36","line":"    std::vector< int> proc_offsets_imped;"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"    void set_bucket_indices();"},
{"lineNum":"   39","line":"    void find_parent_comm();"},
{"lineNum":"   40","line":"    void calculates_counts_and_offsets_for_impedance();"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"public:"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"    //Bunch_train(Bunches const& bunches, double spacing);"},
{"lineNum":"   45","line":"    //Bunch_train(Bunches const& bunches, std::vector<double > const& spacings);"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"    Bunch_train("},
{"lineNum":"   48","line":"            Reference_particle const & ref,"},
{"lineNum":"   49","line":"            size_t num_bunches,"},
{"lineNum":"   50","line":"            size_t num_particles_per_bunch,"},
{"lineNum":"   51","line":"            double num_real_particles_per_bunch,"},
{"lineNum":"   52","line":"            double spacing,"},
{"lineNum":"   53","line":"            Commxx const & comm = Commxx(),"},
{"lineNum":"   54","line":"            size_t num_spectator_per_bunch = 0,"},
{"lineNum":"   55","line":"            int index = 0 );"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"    // Get the communicator"},
{"lineNum":"   58","line":"    Commxx const& get_comm() const { return *comm; }"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"    // total number of bunches in the train. it is not always"},
{"lineNum":"   61","line":"    // the same as the size of the bunch array"},
{"lineNum":"   62","line":"    int get_num_bunches() const"},
{"lineNum":"   63","line":"    { return num_bunches; }","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"    // number of local bunches on this rank. alias for"},
{"lineNum":"   66","line":"    // get_bunch_array_size()"},
{"lineNum":"   67","line":"    int get_num_local_bunches() const"},
{"lineNum":"   68","line":"    { return get_bunch_array_size(); }"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"    // number of buckets. it is not necessary for the bunches to"},
{"lineNum":"   71","line":"    // occupy consecutive buckets, so there might be some empty"},
{"lineNum":"   72","line":"    // buckets in-between bunches"},
{"lineNum":"   73","line":"    // for now it is always the same as the number of bunches"},
{"lineNum":"   74","line":"    int get_num_buckets() const"},
{"lineNum":"   75","line":"    { return num_buckets; }"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"    // index of the train (0 or 1)"},
{"lineNum":"   78","line":"    int get_index() const"},
{"lineNum":"   79","line":"    { return index; }"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"    // number of bunches on this rank (size of the bunch array)"},
{"lineNum":"   82","line":"    size_t get_bunch_array_size() const"},
{"lineNum":"   83","line":"    { return bunches.size(); }"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"    // get the local array index from the bunch index in the train"},
{"lineNum":"   86","line":"    // returns -1 if the bunch is not available locally"},
{"lineNum":"   87","line":"    int get_array_idx_of_bunch(int bunch_idx) const"},
{"lineNum":"   88","line":"    { return bunch_idx_map[bunch_idx]; }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"    // get the bunch index in the train from the local array index"},
{"lineNum":"   91","line":"    int get_train_idx_of_bunch(int array_idx) const"},
{"lineNum":"   92","line":"    { return bunches[array_idx].get_bunch_index(); }"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"    // access the local bunch"},
{"lineNum":"   95","line":"    Bunch& operator[](size_t array_idx)"},
{"lineNum":"   96","line":"    { return bunches[array_idx]; }"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"    Bunch const& operator[](size_t array_idx) const"},
{"lineNum":"   99","line":"    { return bunches[array_idx]; }"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"    // access the local bunch array"},
{"lineNum":"  102","line":"    std::vector<Bunch>& get_bunches()"},
{"lineNum":"  103","line":"    { return bunches; }"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"    std::vector<Bunch> const& get_bunches() const"},
{"lineNum":"  106","line":"    { return bunches; }"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"    std::vector<double>& get_spacings();"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"    // update the total particle number for all bunches in the bunch train"},
{"lineNum":"  111","line":"    // note that calling each bunch\'s update_total_num() wont do the actual"},
{"lineNum":"  112","line":"    // work if the caller\'s rank is not part of the bunch\'s communicator."},
{"lineNum":"  113","line":"    // on the other hand, calling bunch_train\'s update_bunch_total_num()"},
{"lineNum":"  114","line":"    // gurantees that all bunches are updated for all ranks"},
{"lineNum":"  115","line":"    void update_bunch_total_num();"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"    void set_longitudinal_boundary("},
{"lineNum":"  118","line":"            LongitudinalBoundary lb, double param = 0.0)"},
{"lineNum":"  119","line":"    { for(auto& b : bunches)"},
{"lineNum":"  120","line":"            b.set_longitudinal_boundary(lb, param); }"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"    std::vector< int> & get_proc_counts_for_impedance();"},
{"lineNum":"  123","line":"    std::vector< int> & get_proc_offsets_for_impedance();"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"private:"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"    friend class cereal::access;"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"    template<class Archive>"},
{"lineNum":"  130","line":"    void serialize(Archive & ar)"},
{"lineNum":"  131","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  132","line":"        ar(CEREAL_NVP(comm));"},
{"lineNum":"  133","line":"        ar(CEREAL_NVP(bunches));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  134","line":"        ar(CEREAL_NVP(spacings));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  135","line":"        ar(CEREAL_NVP(index));"},
{"lineNum":"  136","line":"        ar(CEREAL_NVP(num_bunches));"},
{"lineNum":"  137","line":"        ar(CEREAL_NVP(num_buckets));"},
{"lineNum":"  138","line":"        ar(CEREAL_NVP(bunch_idx_map));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  139","line":"        ar(CEREAL_NVP(proc_counts_imped));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  140","line":"        ar(CEREAL_NVP(proc_offsets_imped));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  141","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  142","line":"};"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"#endif /* BUNCH_TRAIN_H_ */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 10, "covered" : 0,};
var merged_data = [];
