var data = {lines:[
{"lineNum":"    1","line":"/*============================================================================="},
{"lineNum":"    2","line":"    Copyright (c) 2001-2011 Joel de Guzman"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"    Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    5","line":"    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    6","line":"==============================================================================*/"},
{"lineNum":"    7","line":"#if !defined(BOOST_SPIRIT_TST_MARCH_09_2007_0905AM)"},
{"lineNum":"    8","line":"#define BOOST_SPIRIT_TST_MARCH_09_2007_0905AM"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#if defined(_MSC_VER)"},
{"lineNum":"   11","line":"#pragma once"},
{"lineNum":"   12","line":"#endif"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"#include <boost/call_traits.hpp>"},
{"lineNum":"   15","line":"#include <iterator> // for std::iterator_traits"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"namespace boost { namespace spirit { namespace qi { namespace detail"},
{"lineNum":"   18","line":"{"},
{"lineNum":"   19","line":"    // This file contains low level TST routines, not for"},
{"lineNum":"   20","line":"    // public consumption."},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"    template <typename Char, typename T>"},
{"lineNum":"   23","line":"    struct tst_node"},
{"lineNum":"   24","line":"    {"},
{"lineNum":"   25","line":"        tst_node(Char id_)"},
{"lineNum":"   26","line":"          : id(id_), data(0), lt(0), eq(0), gt(0)","class":"lineNoCov","hits":"0","possible_hits":"153",},
{"lineNum":"   27","line":"        {"},
{"lineNum":"   28","line":"        }"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"        template <typename Alloc>"},
{"lineNum":"   31","line":"        static void"},
{"lineNum":"   32","line":"        destruct_node(tst_node* p, Alloc* alloc)"},
{"lineNum":"   33","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   34","line":"            if (p)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   35","line":"            {"},
{"lineNum":"   36","line":"                if (p->data)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   37","line":"                    alloc->delete_data(p->data);"},
{"lineNum":"   38","line":"                destruct_node(p->lt, alloc);","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   39","line":"                destruct_node(p->eq, alloc);","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   40","line":"                destruct_node(p->gt, alloc);","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   41","line":"                alloc->delete_node(p);"},
{"lineNum":"   42","line":"            }"},
{"lineNum":"   43","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"        template <typename Alloc>"},
{"lineNum":"   46","line":"        static tst_node*"},
{"lineNum":"   47","line":"        clone_node(tst_node* p, Alloc* alloc)"},
{"lineNum":"   48","line":"        {"},
{"lineNum":"   49","line":"            if (p)"},
{"lineNum":"   50","line":"            {"},
{"lineNum":"   51","line":"                tst_node* clone = alloc->new_node(p->id);"},
{"lineNum":"   52","line":"                if (p->data)"},
{"lineNum":"   53","line":"                    clone->data = alloc->new_data(*p->data);"},
{"lineNum":"   54","line":"                clone->lt = clone_node(p->lt, alloc);"},
{"lineNum":"   55","line":"                clone->eq = clone_node(p->eq, alloc);"},
{"lineNum":"   56","line":"                clone->gt = clone_node(p->gt, alloc);"},
{"lineNum":"   57","line":"                return clone;"},
{"lineNum":"   58","line":"            }"},
{"lineNum":"   59","line":"            return 0;"},
{"lineNum":"   60","line":"        }"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"        template <typename Iterator, typename Filter>"},
{"lineNum":"   63","line":"        static T*"},
{"lineNum":"   64","line":"        find(tst_node* start, Iterator& first, Iterator last, Filter filter)"},
{"lineNum":"   65","line":"        {"},
{"lineNum":"   66","line":"            if (first == last)","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   67","line":"                return 0;"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"            Iterator i = first;"},
{"lineNum":"   70","line":"            Iterator latest = first;"},
{"lineNum":"   71","line":"            tst_node* p = start;"},
{"lineNum":"   72","line":"            T* found = 0;"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"            while (p && i != last)","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"   75","line":"            {"},
{"lineNum":"   76","line":"                typename"},
{"lineNum":"   77","line":"                    std::iterator_traits<Iterator>::value_type"},
{"lineNum":"   78","line":"                c = filter(*i); // filter only the input","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"                if (c == p->id)","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   81","line":"                {"},
{"lineNum":"   82","line":"                    if (p->data)","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   83","line":"                    {"},
{"lineNum":"   84","line":"                        found = p->data;"},
{"lineNum":"   85","line":"                        latest = i;"},
{"lineNum":"   86","line":"                    }"},
{"lineNum":"   87","line":"                    p = p->eq;","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   88","line":"                    i++;"},
{"lineNum":"   89","line":"                }"},
{"lineNum":"   90","line":"                else if (c < p->id)","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   91","line":"                {"},
{"lineNum":"   92","line":"                    p = p->lt;","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   93","line":"                }"},
{"lineNum":"   94","line":"                else"},
{"lineNum":"   95","line":"                {"},
{"lineNum":"   96","line":"                    p = p->gt;","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   97","line":"                }"},
{"lineNum":"   98","line":"            }"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"            if (found)","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  101","line":"                first = ++latest; // one past the last matching char","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  102","line":"            return found;"},
{"lineNum":"  103","line":"        }"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"        template <typename Iterator, typename Alloc>"},
{"lineNum":"  106","line":"        static T*"},
{"lineNum":"  107","line":"        add("},
{"lineNum":"  108","line":"            tst_node*& start"},
{"lineNum":"  109","line":"          , Iterator first"},
{"lineNum":"  110","line":"          , Iterator last"},
{"lineNum":"  111","line":"          , typename boost::call_traits<T>::param_type val"},
{"lineNum":"  112","line":"          , Alloc* alloc)"},
{"lineNum":"  113","line":"        {"},
{"lineNum":"  114","line":"            if (first == last)","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  115","line":"                return 0;"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"            tst_node** pp = &start;"},
{"lineNum":"  118","line":"            for(;;)"},
{"lineNum":"  119","line":"            {"},
{"lineNum":"  120","line":"                typename"},
{"lineNum":"  121","line":"                    std::iterator_traits<Iterator>::value_type"},
{"lineNum":"  122","line":"                c = *first;"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"                if (*pp == 0)","class":"lineNoCov","hits":"0","possible_hits":"163",},
{"lineNum":"  125","line":"                    *pp = alloc->new_node(c);","class":"lineNoCov","hits":"0","possible_hits":"153",},
{"lineNum":"  126","line":"                tst_node* p = *pp;"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"                if (c == p->id)","class":"lineNoCov","hits":"0","possible_hits":"153",},
{"lineNum":"  129","line":"                {"},
{"lineNum":"  130","line":"                    if (++first == last)","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  131","line":"                    {"},
{"lineNum":"  132","line":"                        if (p->data == 0)","class":"lineNoCov","hits":"0","possible_hits":"53",},
{"lineNum":"  133","line":"                            p->data = alloc->new_data(val);","class":"lineNoCov","hits":"0","possible_hits":"53",},
{"lineNum":"  134","line":"                        return p->data;"},
{"lineNum":"  135","line":"                    }"},
{"lineNum":"  136","line":"                    pp = &p->eq;","class":"lineNoCov","hits":"0","possible_hits":"109",},
{"lineNum":"  137","line":"                }"},
{"lineNum":"  138","line":"                else if (c < p->id)","class":"lineNoCov","hits":"0","possible_hits":"153",},
{"lineNum":"  139","line":"                {"},
{"lineNum":"  140","line":"                    pp = &p->lt;"},
{"lineNum":"  141","line":"                }"},
{"lineNum":"  142","line":"                else"},
{"lineNum":"  143","line":"                {"},
{"lineNum":"  144","line":"                    pp = &p->gt;"},
{"lineNum":"  145","line":"                }"},
{"lineNum":"  146","line":"            }"},
{"lineNum":"  147","line":"        }"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"        template <typename Iterator, typename Alloc>"},
{"lineNum":"  150","line":"        static void"},
{"lineNum":"  151","line":"        remove(tst_node*& p, Iterator first, Iterator last, Alloc* alloc)"},
{"lineNum":"  152","line":"        {"},
{"lineNum":"  153","line":"            if (p == 0 || first == last)"},
{"lineNum":"  154","line":"                return;"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"            typename"},
{"lineNum":"  157","line":"                std::iterator_traits<Iterator>::value_type"},
{"lineNum":"  158","line":"            c = *first;"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"            if (c == p->id)"},
{"lineNum":"  161","line":"            {"},
{"lineNum":"  162","line":"                if (++first == last)"},
{"lineNum":"  163","line":"                {"},
{"lineNum":"  164","line":"                    if (p->data)"},
{"lineNum":"  165","line":"                    {"},
{"lineNum":"  166","line":"                        alloc->delete_data(p->data);"},
{"lineNum":"  167","line":"                        p->data = 0;"},
{"lineNum":"  168","line":"                    }"},
{"lineNum":"  169","line":"                }"},
{"lineNum":"  170","line":"                remove(p->eq, first, last, alloc);"},
{"lineNum":"  171","line":"            }"},
{"lineNum":"  172","line":"            else if (c < p->id)"},
{"lineNum":"  173","line":"            {"},
{"lineNum":"  174","line":"                remove(p->lt, first, last, alloc);"},
{"lineNum":"  175","line":"            }"},
{"lineNum":"  176","line":"            else"},
{"lineNum":"  177","line":"            {"},
{"lineNum":"  178","line":"                remove(p->gt, first, last, alloc);"},
{"lineNum":"  179","line":"            }"},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"            if (p->data == 0 && p->lt == 0 && p->eq == 0 && p->gt == 0)"},
{"lineNum":"  182","line":"            {"},
{"lineNum":"  183","line":"                alloc->delete_node(p);"},
{"lineNum":"  184","line":"                p = 0;"},
{"lineNum":"  185","line":"            }"},
{"lineNum":"  186","line":"        }"},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"        template <typename F>"},
{"lineNum":"  189","line":"        static void"},
{"lineNum":"  190","line":"        for_each(tst_node* p, std::basic_string<Char> prefix, F f)"},
{"lineNum":"  191","line":"        {"},
{"lineNum":"  192","line":"            if (p)"},
{"lineNum":"  193","line":"            {"},
{"lineNum":"  194","line":"                for_each(p->lt, prefix, f);"},
{"lineNum":"  195","line":"                std::basic_string<Char> s = prefix + p->id;"},
{"lineNum":"  196","line":"                for_each(p->eq, s, f);"},
{"lineNum":"  197","line":"                if (p->data)"},
{"lineNum":"  198","line":"                    f(s, *p->data);"},
{"lineNum":"  199","line":"                for_each(p->gt, prefix, f);"},
{"lineNum":"  200","line":"            }"},
{"lineNum":"  201","line":"        }"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"        Char id;        // the node\'s identity character"},
{"lineNum":"  204","line":"        T* data;        // optional data"},
{"lineNum":"  205","line":"        tst_node* lt;   // left pointer"},
{"lineNum":"  206","line":"        tst_node* eq;   // middle pointer"},
{"lineNum":"  207","line":"        tst_node* gt;   // right pointer"},
{"lineNum":"  208","line":"    };"},
{"lineNum":"  209","line":"}}}}"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 28, "covered" : 0,};
var merged_data = [];
