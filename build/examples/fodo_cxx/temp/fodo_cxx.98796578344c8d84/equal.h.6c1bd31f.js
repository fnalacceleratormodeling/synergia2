var data = {lines:[
{"lineNum":"    1","line":"// -*- C++ -*-"},
{"lineNum":"    2","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions."},
{"lineNum":"    5","line":"// See https://llvm.org/LICENSE.txt for license information."},
{"lineNum":"    6","line":"// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef _LIBCPP___ALGORITHM_EQUAL_H"},
{"lineNum":"   11","line":"#define _LIBCPP___ALGORITHM_EQUAL_H"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"#include <__config>"},
{"lineNum":"   14","line":"#include <__algorithm/comp.h>"},
{"lineNum":"   15","line":"#include <__iterator/iterator_traits.h>"},
{"lineNum":"   16","line":"#include <iterator> // FIXME: replace with <__iterator/distance.h> when it lands"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"},
{"lineNum":"   19","line":"#pragma GCC system_header"},
{"lineNum":"   20","line":"#endif"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"_LIBCPP_PUSH_MACROS"},
{"lineNum":"   23","line":"#include <__undef_macros>"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"_LIBCPP_BEGIN_NAMESPACE_STD"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"template <class _InputIterator1, class _InputIterator2, class _BinaryPredicate>"},
{"lineNum":"   28","line":"_LIBCPP_NODISCARD_EXT inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 bool"},
{"lineNum":"   29","line":"equal(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _BinaryPredicate __pred) {"},
{"lineNum":"   30","line":"  for (; __first1 != __last1; ++__first1, (void)++__first2)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   31","line":"    if (!__pred(*__first1, *__first2))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   32","line":"      return false;"},
{"lineNum":"   33","line":"  return true;"},
{"lineNum":"   34","line":"}"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"template <class _InputIterator1, class _InputIterator2>"},
{"lineNum":"   37","line":"_LIBCPP_NODISCARD_EXT inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 bool"},
{"lineNum":"   38","line":"equal(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2) {"},
{"lineNum":"   39","line":"  typedef typename iterator_traits<_InputIterator1>::value_type __v1;"},
{"lineNum":"   40","line":"  typedef typename iterator_traits<_InputIterator2>::value_type __v2;"},
{"lineNum":"   41","line":"  return _VSTD::equal(__first1, __last1, __first2, __equal_to<__v1, __v2>());"},
{"lineNum":"   42","line":"}"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":"   45","line":"template <class _BinaryPredicate, class _InputIterator1, class _InputIterator2>"},
{"lineNum":"   46","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 bool"},
{"lineNum":"   47","line":"__equal(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2,"},
{"lineNum":"   48","line":"        _BinaryPredicate __pred, input_iterator_tag, input_iterator_tag) {"},
{"lineNum":"   49","line":"  for (; __first1 != __last1 && __first2 != __last2; ++__first1, (void)++__first2)"},
{"lineNum":"   50","line":"    if (!__pred(*__first1, *__first2))"},
{"lineNum":"   51","line":"      return false;"},
{"lineNum":"   52","line":"  return __first1 == __last1 && __first2 == __last2;"},
{"lineNum":"   53","line":"}"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"template <class _BinaryPredicate, class _RandomAccessIterator1, class _RandomAccessIterator2>"},
{"lineNum":"   56","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 bool"},
{"lineNum":"   57","line":"__equal(_RandomAccessIterator1 __first1, _RandomAccessIterator1 __last1, _RandomAccessIterator2 __first2,"},
{"lineNum":"   58","line":"        _RandomAccessIterator2 __last2, _BinaryPredicate __pred, random_access_iterator_tag,"},
{"lineNum":"   59","line":"        random_access_iterator_tag) {"},
{"lineNum":"   60","line":"  if (_VSTD::distance(__first1, __last1) != _VSTD::distance(__first2, __last2))"},
{"lineNum":"   61","line":"    return false;"},
{"lineNum":"   62","line":"  return _VSTD::equal<_RandomAccessIterator1, _RandomAccessIterator2,"},
{"lineNum":"   63","line":"                      typename add_lvalue_reference<_BinaryPredicate>::type>(__first1, __last1, __first2, __pred);"},
{"lineNum":"   64","line":"}"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"template <class _InputIterator1, class _InputIterator2, class _BinaryPredicate>"},
{"lineNum":"   67","line":"_LIBCPP_NODISCARD_EXT inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 bool"},
{"lineNum":"   68","line":"equal(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2,"},
{"lineNum":"   69","line":"      _BinaryPredicate __pred) {"},
{"lineNum":"   70","line":"  return _VSTD::__equal<typename add_lvalue_reference<_BinaryPredicate>::type>("},
{"lineNum":"   71","line":"      __first1, __last1, __first2, __last2, __pred, typename iterator_traits<_InputIterator1>::iterator_category(),"},
{"lineNum":"   72","line":"      typename iterator_traits<_InputIterator2>::iterator_category());"},
{"lineNum":"   73","line":"}"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"template <class _InputIterator1, class _InputIterator2>"},
{"lineNum":"   76","line":"_LIBCPP_NODISCARD_EXT inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 bool"},
{"lineNum":"   77","line":"equal(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2) {"},
{"lineNum":"   78","line":"  typedef typename iterator_traits<_InputIterator1>::value_type __v1;"},
{"lineNum":"   79","line":"  typedef typename iterator_traits<_InputIterator2>::value_type __v2;"},
{"lineNum":"   80","line":"  return _VSTD::__equal(__first1, __last1, __first2, __last2, __equal_to<__v1, __v2>(),"},
{"lineNum":"   81","line":"                        typename iterator_traits<_InputIterator1>::iterator_category(),"},
{"lineNum":"   82","line":"                        typename iterator_traits<_InputIterator2>::iterator_category());"},
{"lineNum":"   83","line":"}"},
{"lineNum":"   84","line":"#endif"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"_LIBCPP_END_NAMESPACE_STD"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"_LIBCPP_POP_MACROS"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"#endif // _LIBCPP___ALGORITHM_EQUAL_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 2, "covered" : 0,};
var merged_data = [];
