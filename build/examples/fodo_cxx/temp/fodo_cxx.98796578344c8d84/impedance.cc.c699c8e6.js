var data = {lines:[
{"lineNum":"    1","line":"#include \"impedance.h\""},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"#include \"synergia/bunch/core_diagnostics.h\""},
{"lineNum":"    4","line":"#include \"synergia/foundation/physical_constants.h\""},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"#include \"synergia/bunch/period.h\""},
{"lineNum":"    7","line":"#include \"synergia/utils/kokkos_tools.h\""},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"#include \"synergia/utils/simple_timer.h\""},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"#include <Kokkos_ScatterView.hpp>"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"typedef Kokkos::TeamPolicy<> team_policy;"},
{"lineNum":"   15","line":"typedef typename team_policy::member_type team_member;"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"using scatter_t = Kokkos::Experimental::ScatterView<"},
{"lineNum":"   18","line":"    double*, Kokkos::LayoutLeft>;"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"namespace"},
{"lineNum":"   21","line":"{"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"    struct alg_zeroer"},
{"lineNum":"   24","line":"    {"},
{"lineNum":"   25","line":"        karray1d_dev arr;"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   28","line":"        void operator() (const int i) const"},
{"lineNum":"   29","line":"        { arr(i) = 0.0; }"},
{"lineNum":"   30","line":"    };"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"    void zero_karray(karray1d_dev const& arr)"},
{"lineNum":"   33","line":"    {"},
{"lineNum":"   34","line":"        alg_zeroer alg{arr};"},
{"lineNum":"   35","line":"        Kokkos::parallel_for(arr.extent(0), alg);"},
{"lineNum":"   36","line":"    }"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"    struct alg_write_bps","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   39","line":"    {"},
{"lineNum":"   40","line":"        Bunch_props bps;"},
{"lineNum":"   41","line":"        karray1d_dev vbi_buf;"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   44","line":"        void operator() (const int i) const"},
{"lineNum":"   45","line":"        {"},
{"lineNum":"   46","line":"            int idx = bps.get_write_index(i);"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"            bps.xmean(idx) = vbi_buf(i*5 + 0);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   49","line":"            bps.ymean(idx) = vbi_buf(i*5 + 1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   50","line":"            bps.zmean(idx) = vbi_buf(i*5 + 2);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   51","line":"            bps.realnum(idx) = vbi_buf(i*5 + 3);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   52","line":"            bps.bucket_index(idx) = (int)vbi_buf(i*5 + 4);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   53","line":"        }"},
{"lineNum":"   54","line":"    };"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"    struct alg_z_binning"},
{"lineNum":"   57","line":"    {"},
{"lineNum":"   58","line":"        typedef double value_type[];"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"        const int value_count;"},
{"lineNum":"   61","line":"        const int z_grid;"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"        ConstParticles p;"},
{"lineNum":"   64","line":"        ConstParticleMasks masks;"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"        const double z_left;"},
{"lineNum":"   67","line":"        const double recip_h;"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"        alg_z_binning("},
{"lineNum":"   70","line":"                ConstParticles const& p,"},
{"lineNum":"   71","line":"                ConstParticleMasks const& masks,"},
{"lineNum":"   72","line":"                int z_grid, double z_left, double h)"},
{"lineNum":"   73","line":"        : value_count(z_grid*3), z_grid(z_grid)"},
{"lineNum":"   74","line":"        , p(p), masks(masks)"},
{"lineNum":"   75","line":"        , z_left(z_left), recip_h(1.0/h)"},
{"lineNum":"   76","line":"        { }"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   79","line":"        void operator() (const int i, value_type sum) const"},
{"lineNum":"   80","line":"        {"},
{"lineNum":"   81","line":"            if (masks(i))"},
{"lineNum":"   82","line":"            {"},
{"lineNum":"   83","line":"                int bin = (p(i, 4) - z_left) * recip_h;"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"                if (bin == z_grid)"},
{"lineNum":"   86","line":"                {"},
{"lineNum":"   87","line":"                    sum[z_grid*0 + bin-1] += 1;"},
{"lineNum":"   88","line":"                }"},
{"lineNum":"   89","line":"                else"},
{"lineNum":"   90","line":"                {"},
{"lineNum":"   91","line":"                    sum[z_grid*0 + bin] += 1;        // zdensity"},
{"lineNum":"   92","line":"                    sum[z_grid*1 + bin] += p(i, 0);  // xmom"},
{"lineNum":"   93","line":"                    sum[z_grid*2 + bin] += p(i, 2);  // ymom"},
{"lineNum":"   94","line":"                }"},
{"lineNum":"   95","line":"            }"},
{"lineNum":"   96","line":"        }"},
{"lineNum":"   97","line":"    };"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"    struct alg_z_binning_sv","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  100","line":"    {"},
{"lineNum":"  101","line":"        ConstParticles p;"},
{"lineNum":"  102","line":"        ConstParticleMasks masks;"},
{"lineNum":"  103","line":"        scatter_t scatter;"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"        const int z_grid;"},
{"lineNum":"  106","line":"        const double z_left;"},
{"lineNum":"  107","line":"        const double recip_h;"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  110","line":"        void operator() (const int i) const"},
{"lineNum":"  111","line":"        {"},
{"lineNum":"  112","line":"            if (masks(i))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  113","line":"            {"},
{"lineNum":"  114","line":"                auto access = scatter.access();"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"                int bin = (p(i, 4) - z_left) * recip_h;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  117","line":"                if (bin == z_grid)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  118","line":"                {"},
{"lineNum":"  119","line":"                    access(z_grid*0 + bin-1) += 1;"},
{"lineNum":"  120","line":"                }"},
{"lineNum":"  121","line":"                else"},
{"lineNum":"  122","line":"                {"},
{"lineNum":"  123","line":"                    access(z_grid*0 + bin) += 1;        // zdensity"},
{"lineNum":"  124","line":"                    access(z_grid*1 + bin) += p(i, 0);  // xmom","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  125","line":"                    access(z_grid*2 + bin) += p(i, 2);  // ymom","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  126","line":"                }"},
{"lineNum":"  127","line":"            }"},
{"lineNum":"  128","line":"        }"},
{"lineNum":"  129","line":"    };"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"    struct alg_z_normalize","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  132","line":"    {"},
{"lineNum":"  133","line":"        karray1d_dev binning;"},
{"lineNum":"  134","line":"        const int z_grid;"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  137","line":"        void operator() (const int i) const"},
{"lineNum":"  138","line":"        {"},
{"lineNum":"  139","line":"            double zden = binning(z_grid*0 + i);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"            if (zden)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  142","line":"            {"},
{"lineNum":"  143","line":"                binning(z_grid*1+i) /= zden;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  144","line":"                binning(z_grid*2+i) /= zden;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  145","line":"            }"},
{"lineNum":"  146","line":"        }"},
{"lineNum":"  147","line":"    };"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  150","line":"    int get_zindex_for_wake(double z, double dz, int istart, double zstart)"},
{"lineNum":"  151","line":"    {"},
{"lineNum":"  152","line":"        //if  (z< (-istart*istart*dz+zstart)) return -100;"},
{"lineNum":"  153","line":"        if ( z >= zstart ) return (static_cast<int>(floor(sqrt((z-zstart)/dz)))) + istart;","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  154","line":"        else return (-static_cast<int>(floor(sqrt((zstart-z)/dz)))) +istart;","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  155","line":"    }"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"    struct alg_z_wake_reduce"},
{"lineNum":"  158","line":"    {"},
{"lineNum":"  159","line":"        typedef kt::array_type<double, 5> value_type;"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"        const int i;"},
{"lineNum":"  162","line":"        const int z_grid;"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"        const double cell_size_z;"},
{"lineNum":"  165","line":"        const double N_factor;"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"        const int size_wake;"},
{"lineNum":"  168","line":"        const int istart;"},
{"lineNum":"  169","line":"        const double zstart;"},
{"lineNum":"  170","line":"        const double delta_z;"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"        karray1d_dev const& zbins;"},
{"lineNum":"  173","line":"        karray1d_dev const& wf;"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  176","line":"        alg_z_wake_reduce(int i, int z_grid,"},
{"lineNum":"  177","line":"                Bunch_params const& bp,"},
{"lineNum":"  178","line":"                Wake_field const& wf,"},
{"lineNum":"  179","line":"                karray1d_dev const& zbins )"},
{"lineNum":"  180","line":"            : i(i), z_grid(z_grid)"},
{"lineNum":"  181","line":"            , cell_size_z(bp.cell_size_z), N_factor(bp.N_factor)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  182","line":"            , size_wake(wf.size_wake), istart(wf.istart)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  183","line":"            , zstart(wf.zstart), delta_z(wf.delta_z)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  184","line":"            , zbins(zbins), wf(wf.terms)"},
{"lineNum":"  185","line":"        { }"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  188","line":"        void operator() (const int j, value_type& sum) const"},
{"lineNum":"  189","line":"        {"},
{"lineNum":"  190","line":"            double* zdensity = &zbins(z_grid*0);"},
{"lineNum":"  191","line":"            double* xmom     = &zbins(z_grid*1);"},
{"lineNum":"  192","line":"            double* ymom     = &zbins(z_grid*2);"},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"            double* z_coord  = &wf(size_wake*0);"},
{"lineNum":"  195","line":"            double* z_wake   = &wf(size_wake*1);"},
{"lineNum":"  196","line":"            double* xw_lead  = &wf(size_wake*2);"},
{"lineNum":"  197","line":"            double* xw_trail = &wf(size_wake*3);"},
{"lineNum":"  198","line":"            double* yw_lead  = &wf(size_wake*4);"},
{"lineNum":"  199","line":"            double* yw_trail = &wf(size_wake*5);"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"            double zji = (j - i) * cell_size_z;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  202","line":"            if (zji < z_coord[0]) return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"            // below it is assumed the wake function is stored using a quadratic grid"},
{"lineNum":"  205","line":"            int iz = get_zindex_for_wake(zji, delta_z, istart, zstart);"},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"            if (iz+1 < size_wake)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  208","line":"            {"},
{"lineNum":"  209","line":"                double z1 = zji - z_coord[iz];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  210","line":"                double recip_z2 = 1.0 / (z_coord[iz+1] - z_coord[iz]);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"                double xwl = xw_lead[iz]  + z1 * (xw_lead[iz+1] - xw_lead[iz])   * recip_z2;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  213","line":"                sum.data[0] += zdensity[j] * N_factor * xmom[j] * xwl;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"                double xwt = xw_trail[iz] + z1 * (xw_trail[iz+1] - xw_trail[iz]) * recip_z2;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  216","line":"                sum.data[1] += zdensity[j] * N_factor * xwt;"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"                double ywl = yw_lead[iz]  + z1 * (yw_lead[iz+1] - yw_lead[iz])   * recip_z2;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  219","line":"                sum.data[2] += zdensity[j] * N_factor * ymom[j] * ywl;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  220","line":""},
{"lineNum":"  221","line":"                double ywt = yw_trail[iz] + z1 * (yw_trail[iz+1] - yw_trail[iz]) * recip_z2;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  222","line":"                sum.data[3] += zdensity[j] * N_factor * ywt;"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"                double zw = z_wake[iz] + z1 * (z_wake[iz+1] - z_wake[iz]) * recip_z2;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  225","line":"                sum.data[4] += zdensity[j] * N_factor * zw;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  226","line":"            }"},
{"lineNum":"  227","line":"        }"},
{"lineNum":"  228","line":"    };"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"    struct alg_z_wake","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  231","line":"    {"},
{"lineNum":"  232","line":"        Bunch_params bp;"},
{"lineNum":"  233","line":"        Wake_field wf;"},
{"lineNum":"  234","line":"        karray1d_dev zbins;"},
{"lineNum":"  235","line":"        karray1d_dev wakes;"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"        alg_z_wake( Bunch_params const& bp,"},
{"lineNum":"  238","line":"                Wake_field const& wf,"},
{"lineNum":"  239","line":"                karray1d_dev const& zbins,"},
{"lineNum":"  240","line":"                karray1d_dev const& wakes )"},
{"lineNum":"  241","line":"            : bp(bp), wf(wf), zbins(zbins), wakes(wakes)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  242","line":"        { }"},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  245","line":"        void operator() (const team_member& member) const"},
{"lineNum":"  246","line":"        {"},
{"lineNum":"  247","line":"            // league size is the z_grid"},
{"lineNum":"  248","line":"            int z_grid = member.league_size();"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"            // li is the index i in zji"},
{"lineNum":"  251","line":"            int li = member.league_rank();"},
{"lineNum":"  252","line":"            int ti = member.team_rank();"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"            typedef kt::array_type<double, 5> value_t;"},
{"lineNum":"  255","line":"            typedef kt::SumArray<double, 5> array_sum_res_t;"},
{"lineNum":"  256","line":""},
{"lineNum":"  257","line":"            value_t sum;"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"            alg_z_wake_reduce z_wake_reduce{"},
{"lineNum":"  260","line":"                li, z_grid, bp, wf, zbins"},
{"lineNum":"  261","line":"            };"},
{"lineNum":"  262","line":""},
{"lineNum":"  263","line":"            Kokkos::parallel_reduce("},
{"lineNum":"  264","line":"                    Kokkos::TeamThreadRange(member, z_grid),"},
{"lineNum":"  265","line":"                    z_wake_reduce,"},
{"lineNum":"  266","line":"                    array_sum_res_t(sum)"},
{"lineNum":"  267","line":"            );"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"            if (ti == 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  270","line":"            {"},
{"lineNum":"  271","line":"                wakes(z_grid*0+li) = sum.data[0];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  272","line":"                wakes(z_grid*1+li) = sum.data[1];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  273","line":"                wakes(z_grid*2+li) = sum.data[2];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  274","line":"                wakes(z_grid*3+li) = sum.data[3];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  275","line":"                wakes(z_grid*4+li) = sum.data[4];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  276","line":"            }"},
{"lineNum":"  277","line":"        }"},
{"lineNum":"  278","line":"    };"},
{"lineNum":"  279","line":""},
{"lineNum":"  280","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  281","line":"    void sum_over_bunch(double* sum,"},
{"lineNum":"  282","line":"            int iz,"},
{"lineNum":"  283","line":"            int size_wake,"},
{"lineNum":"  284","line":"            double zji,"},
{"lineNum":"  285","line":"            double xmean,"},
{"lineNum":"  286","line":"            double ymean,"},
{"lineNum":"  287","line":"            double realnum,"},
{"lineNum":"  288","line":"            karray1d_dev const& wf )"},
{"lineNum":"  289","line":"    {"},
{"lineNum":"  290","line":"        double* z_coord  = &wf(size_wake*0);"},
{"lineNum":"  291","line":"        double* z_wake   = &wf(size_wake*1);"},
{"lineNum":"  292","line":"        double* xw_lead  = &wf(size_wake*2);"},
{"lineNum":"  293","line":"        double* xw_trail = &wf(size_wake*3);"},
{"lineNum":"  294","line":"        double* yw_lead  = &wf(size_wake*4);"},
{"lineNum":"  295","line":"        double* yw_trail = &wf(size_wake*5);"},
{"lineNum":"  296","line":""},
{"lineNum":"  297","line":"        if (iz+1<size_wake && iz>0)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  298","line":"        {"},
{"lineNum":"  299","line":"            double z1 = zji - z_coord[iz];","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  300","line":"            double recip_z2 = 1.0 / (z_coord[iz+1] - z_coord[iz]);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":"            double xwl = xw_lead[iz]  + z1 * (xw_lead[iz+1]  - xw_lead[iz])  * recip_z2;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  303","line":"            sum[0] += realnum * xmean * xwl;","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  304","line":""},
{"lineNum":"  305","line":"            double xwt = xw_trail[iz] + z1 * (xw_trail[iz+1] - xw_trail[iz]) * recip_z2;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  306","line":"            sum[1] += realnum * xwt;"},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"            double ywl = yw_lead[iz]  + z1 * (yw_lead[iz+1]  - yw_lead[iz])  * recip_z2;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  309","line":"            sum[2] += realnum * ymean * ywl;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  310","line":""},
{"lineNum":"  311","line":"            double ywt = yw_trail[iz] + z1 * (yw_trail[iz+1] - yw_trail[iz]) * recip_z2;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  312","line":"            sum[3] += realnum * ywt;"},
{"lineNum":"  313","line":""},
{"lineNum":"  314","line":"            double zw  = z_wake[iz]   + z1 * (z_wake[iz+1]   - z_wake[iz])   * recip_z2;","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  315","line":"            sum[4] += realnum * zw;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  316","line":"        }"},
{"lineNum":"  317","line":"    }"},
{"lineNum":"  318","line":""},
{"lineNum":"  319","line":"    struct alg_bunch_wake","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  320","line":"    {"},
{"lineNum":"  321","line":"        Bunch_params bp;"},
{"lineNum":"  322","line":"        Wake_field wf;"},
{"lineNum":"  323","line":"        Bunch_props bps;"},
{"lineNum":"  324","line":"        karray1d_dev wakes;"},
{"lineNum":"  325","line":""},
{"lineNum":"  326","line":"        const int mean_bin;"},
{"lineNum":"  327","line":"        const double bunch_spacing;"},
{"lineNum":"  328","line":"        const double orbit_length;"},
{"lineNum":"  329","line":"        const bool full_machine;"},
{"lineNum":"  330","line":"        const int z_grid;"},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"        alg_bunch_wake( Bunch_params const& bp,"},
{"lineNum":"  333","line":"                Wake_field const& wf,"},
{"lineNum":"  334","line":"                Bunch_props const& bps,"},
{"lineNum":"  335","line":"                karray1d_dev const& wakes,"},
{"lineNum":"  336","line":"                double bunch_spacing,"},
{"lineNum":"  337","line":"                double orbit_length,"},
{"lineNum":"  338","line":"                bool full_machine,"},
{"lineNum":"  339","line":"                int z_grid)"},
{"lineNum":"  340","line":"            : bp(bp), wf(wf), bps(bps), wakes(wakes)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  341","line":"            , mean_bin((bp.z_mean - bp.z_left) / bp.cell_size_z)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  342","line":"            , bunch_spacing(bunch_spacing)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  343","line":"            , orbit_length(orbit_length)"},
{"lineNum":"  344","line":"            , full_machine(full_machine)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  345","line":"            , z_grid(z_grid)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  346","line":"        { }"},
{"lineNum":"  347","line":""},
{"lineNum":"  348","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  349","line":"        void operator() (const int i) const"},
{"lineNum":"  350","line":"        {"},
{"lineNum":"  351","line":"            double z_to_zmean = (mean_bin - i) * bp.cell_size_z;"},
{"lineNum":"  352","line":""},
{"lineNum":"  353","line":"            int num_bunches = bps.num_bunches;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  354","line":"            double sum[5] = {0, 0, 0, 0, 0};"},
{"lineNum":"  355","line":""},
{"lineNum":"  356","line":""},
{"lineNum":"  357","line":"            // current turn"},
{"lineNum":"  358","line":"            for(int j=0; j<num_bunches; ++j)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  359","line":"            {"},
{"lineNum":"  360","line":"                // 0 is current turn"},
{"lineNum":"  361","line":"                int j_idx = bps.get_read_index(0, j);"},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"                int j_bucket = bps.bucket_index[j_idx];"},
{"lineNum":"  364","line":"                if (j_bucket >= bp.bucket) continue;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":"                double zji = z_to_zmean"},
{"lineNum":"  367","line":"                    + bunch_spacing * (bp.bucket - j_bucket)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  368","line":"                    + (bps.zmean[j_idx] - bp.z_mean);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  369","line":""},
{"lineNum":"  370","line":"                //if (zji < z_coord[0]) continue;"},
{"lineNum":"  371","line":""},
{"lineNum":"  372","line":"                // below it is assumed the wake function is stored using a quadratic grid"},
{"lineNum":"  373","line":"                int iz = get_zindex_for_wake(zji, wf.delta_z, wf.istart, wf.zstart);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  374","line":""},
{"lineNum":"  375","line":"                // accumulate"},
{"lineNum":"  376","line":"                sum_over_bunch(sum,"},
{"lineNum":"  377","line":"                        iz, wf.size_wake, zji,"},
{"lineNum":"  378","line":"                        bps.xmean(j_idx),"},
{"lineNum":"  379","line":"                        bps.ymean(j_idx),"},
{"lineNum":"  380","line":"                        bps.realnum(j_idx),"},
{"lineNum":"  381","line":"                        wf.terms);"},
{"lineNum":"  382","line":"            }"},
{"lineNum":"  383","line":""},
{"lineNum":"  384","line":"            // full machine"},
{"lineNum":"  385","line":"            if (full_machine)"},
{"lineNum":"  386","line":"            {"},
{"lineNum":"  387","line":"                // TODO ..."},
{"lineNum":"  388","line":"            }"},
{"lineNum":"  389","line":""},
{"lineNum":"  390","line":"            // prev turn"},
{"lineNum":"  391","line":"            if (bps.registered_turns > 1)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  392","line":"            {"},
{"lineNum":"  393","line":"                for(int j=0; j<num_bunches; ++j)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  394","line":"                {"},
{"lineNum":"  395","line":"                    // -1 is prev turn"},
{"lineNum":"  396","line":"                    int j_idx = bps.get_read_index(-1, j);"},
{"lineNum":"  397","line":""},
{"lineNum":"  398","line":"                    int j_bucket = bps.bucket_index[j_idx];"},
{"lineNum":"  399","line":"                    if (j_bucket < bp.bucket) continue;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  400","line":""},
{"lineNum":"  401","line":"                    double zji = z_to_zmean"},
{"lineNum":"  402","line":"                        + bunch_spacing * (bp.bucket - j_bucket)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  403","line":"                        + orbit_length","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  404","line":"                        + (bps.zmean(j_idx) - bp.z_mean);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  405","line":""},
{"lineNum":"  406","line":"                    //if (zji < z_coord[0]) continue;"},
{"lineNum":"  407","line":""},
{"lineNum":"  408","line":"                    // below it is assumed the wake function is stored using a quadratic grid"},
{"lineNum":"  409","line":"                    int iz = get_zindex_for_wake(zji, wf.delta_z, wf.istart, wf.zstart);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  410","line":""},
{"lineNum":"  411","line":"                    // accumulate"},
{"lineNum":"  412","line":"                    sum_over_bunch(sum,"},
{"lineNum":"  413","line":"                            iz, wf.size_wake, zji,"},
{"lineNum":"  414","line":"                            bps.xmean(j_idx),"},
{"lineNum":"  415","line":"                            bps.ymean(j_idx),"},
{"lineNum":"  416","line":"                            bps.realnum(j_idx),"},
{"lineNum":"  417","line":"                            wf.terms);"},
{"lineNum":"  418","line":"                }"},
{"lineNum":"  419","line":"            }"},
{"lineNum":"  420","line":""},
{"lineNum":"  421","line":"            wakes(z_grid*0+i) += sum[0];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  422","line":"            wakes(z_grid*1+i) += sum[1];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  423","line":"            wakes(z_grid*2+i) += sum[2];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  424","line":"            wakes(z_grid*3+i) += sum[3];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  425","line":"            wakes(z_grid*4+i) += sum[4];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  426","line":"        }"},
{"lineNum":"  427","line":"    };"},
{"lineNum":"  428","line":""},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":"    struct alg_turn_wake","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  431","line":"    {"},
{"lineNum":"  432","line":"        typedef double value_type[];"},
{"lineNum":"  433","line":""},
{"lineNum":"  434","line":"        Bunch_params bp;"},
{"lineNum":"  435","line":"        Bunch_props bps;"},
{"lineNum":"  436","line":"        Wake_field wf;"},
{"lineNum":"  437","line":""},
{"lineNum":"  438","line":"        const double bunch_spacing;"},
{"lineNum":"  439","line":"        const double orbit_length;"},
{"lineNum":"  440","line":"        const bool full_machine;"},
{"lineNum":"  441","line":""},
{"lineNum":"  442","line":"        const int value_count = 5;"},
{"lineNum":"  443","line":""},
{"lineNum":"  444","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  445","line":"        void operator() (const int i, value_type sum) const"},
{"lineNum":"  446","line":"        {"},
{"lineNum":"  447","line":"            int turn = i+1;"},
{"lineNum":"  448","line":"            int num_bunches = bps.num_bunches;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  449","line":"            double lsum[5] = {0, 0, 0, 0, 0};"},
{"lineNum":"  450","line":""},
{"lineNum":"  451","line":"            // current turn"},
{"lineNum":"  452","line":"            for(int j=0; j<num_bunches; ++j)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  453","line":"            {"},
{"lineNum":"  454","line":"                int j_idx = bps.get_read_index(-turn, j);"},
{"lineNum":"  455","line":""},
{"lineNum":"  456","line":"                int j_bucket = bps.bucket_index[j_idx];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  457","line":"                if (turn == 1 && j_bucket >= bp.bucket) continue;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  458","line":""},
{"lineNum":"  459","line":"                double zji = bunch_spacing * (bp.bucket - j_bucket)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  460","line":"                    + orbit_length * turn","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  461","line":"                    + (bps.zmean[j_idx] - bp.z_mean);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  462","line":""},
{"lineNum":"  463","line":"                // below it is assumed the wake function is stored using a quadratic grid"},
{"lineNum":"  464","line":"                int iz = get_zindex_for_wake(zji, wf.delta_z, wf.istart, wf.zstart);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  465","line":""},
{"lineNum":"  466","line":"                // accumulate"},
{"lineNum":"  467","line":"                sum_over_bunch(lsum,"},
{"lineNum":"  468","line":"                        iz, wf.size_wake, zji,"},
{"lineNum":"  469","line":"                        bps.xmean(j_idx),"},
{"lineNum":"  470","line":"                        bps.ymean(j_idx),"},
{"lineNum":"  471","line":"                        bps.realnum(j_idx),"},
{"lineNum":"  472","line":"                        wf.terms);"},
{"lineNum":"  473","line":"            }"},
{"lineNum":"  474","line":""},
{"lineNum":"  475","line":"            // full machine"},
{"lineNum":"  476","line":"            if (full_machine)"},
{"lineNum":"  477","line":"            {"},
{"lineNum":"  478","line":"                // TODO ..."},
{"lineNum":"  479","line":"            }"},
{"lineNum":"  480","line":""},
{"lineNum":"  481","line":"            sum[0] += lsum[0];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  482","line":"            sum[1] += lsum[1];"},
{"lineNum":"  483","line":"            sum[2] += lsum[2];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  484","line":"            sum[3] += lsum[3];"},
{"lineNum":"  485","line":"            sum[4] += lsum[4];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  486","line":"        }"},
{"lineNum":"  487","line":"    };"},
{"lineNum":"  488","line":""},
{"lineNum":"  489","line":"    struct alg_add_turn_wake","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  490","line":"    {"},
{"lineNum":"  491","line":"        karray1d_dev wakes;"},
{"lineNum":"  492","line":"        karray1d_dev turn_wakes;"},
{"lineNum":"  493","line":"        const int z_grid;"},
{"lineNum":"  494","line":""},
{"lineNum":"  495","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  496","line":"        void operator() (const int i) const"},
{"lineNum":"  497","line":"        {"},
{"lineNum":"  498","line":"            wakes(z_grid*0+i) += turn_wakes(0);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  499","line":"            wakes(z_grid*1+i) += turn_wakes(1);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  500","line":"            wakes(z_grid*2+i) += turn_wakes(2);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  501","line":"            wakes(z_grid*3+i) += turn_wakes(3);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  502","line":"            wakes(z_grid*4+i) += turn_wakes(4);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  503","line":"        }"},
{"lineNum":"  504","line":"    };"},
{"lineNum":"  505","line":""},
{"lineNum":"  506","line":"    struct alg_apply_kick","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  507","line":"    {"},
{"lineNum":"  508","line":"        Particles p;"},
{"lineNum":"  509","line":"        ConstParticleMasks masks;"},
{"lineNum":"  510","line":""},
{"lineNum":"  511","line":"        karray1d_dev wf;"},
{"lineNum":"  512","line":"        const int z_grid;"},
{"lineNum":"  513","line":"        const double z_left;"},
{"lineNum":"  514","line":"        const double recip_h;"},
{"lineNum":"  515","line":"        const double wake_factor;"},
{"lineNum":"  516","line":""},
{"lineNum":"  517","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  518","line":"        void operator() (const int i) const"},
{"lineNum":"  519","line":"        {"},
{"lineNum":"  520","line":"            double* xw_lead  = &wf(z_grid*0);"},
{"lineNum":"  521","line":"            double* xw_trail = &wf(z_grid*1);"},
{"lineNum":"  522","line":"            double* yw_lead  = &wf(z_grid*2);"},
{"lineNum":"  523","line":"            double* yw_trail = &wf(z_grid*3);"},
{"lineNum":"  524","line":"            double* z_wake   = &wf(z_grid*4);"},
{"lineNum":"  525","line":""},
{"lineNum":"  526","line":"            if (masks(i))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  527","line":"            {"},
{"lineNum":"  528","line":"                int bin = (p(i, 4) - z_left) * recip_h;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  529","line":"                if (bin<0 || bin>=z_grid) return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  530","line":""},
{"lineNum":"  531","line":"                double xkick = xw_lead[bin] + xw_trail[bin] * p(i, 0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  532","line":"                double ykick = yw_lead[bin] + yw_trail[bin] * p(i, 2);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  533","line":"                double zkick = z_wake[bin];","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  534","line":""},
{"lineNum":"  535","line":"                p(i, 1) += wake_factor * xkick;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  536","line":"                p(i, 3) += wake_factor * ykick;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  537","line":"                p(i, 5) += wake_factor * zkick;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  538","line":"            }"},
{"lineNum":"  539","line":"        }"},
{"lineNum":"  540","line":"    };"},
{"lineNum":"  541","line":""},
{"lineNum":"  542","line":"}"},
{"lineNum":"  543","line":""},
{"lineNum":"  544","line":"Impedance::Impedance(Impedance_options const& opts)"},
{"lineNum":"  545","line":"    : Collective_operator(\"impedance\", 1.0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  546","line":"    , opts(opts)"},
{"lineNum":"  547","line":"    , bunch_sim_id()"},
{"lineNum":"  548","line":"    , bps(1/*num_bunches*/, opts.nstored_turns)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  549","line":"    , zbinning()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  550","line":"    , h_zbinning()","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  551","line":"    , wakes()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  552","line":"    , h_wakes()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  553","line":"    , wake_field(opts.wake_file, opts.wake_type)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  554","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  555","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  556","line":""},
{"lineNum":"  557","line":""},
{"lineNum":"  558","line":""},
{"lineNum":"  559","line":"void"},
{"lineNum":"  560","line":"Impedance::apply_impl(Bunch_simulator& sim,"},
{"lineNum":"  561","line":"        double time_step, Logger& logger)"},
{"lineNum":"  562","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  563","line":"    if (sim[1].get_num_bunches())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  564","line":"        throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  565","line":"                \"Impedance cannot have bunches in secondary train\");"},
{"lineNum":"  566","line":""},
{"lineNum":"  567","line":"    logger << \"    Impedance\\n\";"},
{"lineNum":"  568","line":"    scoped_simple_timer timer(\"imp_total\");"},
{"lineNum":"  569","line":""},
{"lineNum":"  570","line":"    // construct the workspace for a new bunch simulator"},
{"lineNum":"  571","line":"    if (bunch_sim_id != sim.id())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  572","line":"    {"},
{"lineNum":"  573","line":"        construct_workspaces(sim);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  574","line":"        bunch_sim_id = sim.id();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  575","line":"    }"},
{"lineNum":"  576","line":""},
{"lineNum":"  577","line":"    // pre-work"},
{"lineNum":"  578","line":"    store_bunches_data(sim);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  579","line":""},
{"lineNum":"  580","line":"    // apply to bunches"},
{"lineNum":"  581","line":"    for(auto & train : sim.get_trains())"},
{"lineNum":"  582","line":"        for(auto & bunch : train.get_bunches())","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  583","line":"            apply_bunch(bunch, time_step, logger);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  584","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  585","line":""},
{"lineNum":"  586","line":"void"},
{"lineNum":"  587","line":"Impedance::construct_workspaces(Bunch_simulator const& sim)"},
{"lineNum":"  588","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  589","line":"    zbinning = karray1d_dev(\"zbinning\", opts.z_grid*3);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  590","line":"    h_zbinning = Kokkos::create_mirror_view(zbinning);"},
{"lineNum":"  591","line":""},
{"lineNum":"  592","line":"    wakes = karray1d_dev(\"wakes\", opts.z_grid*5);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  593","line":"    h_wakes = Kokkos::create_mirror_view(wakes);"},
{"lineNum":"  594","line":""},
{"lineNum":"  595","line":"    int num_bunches = sim[0].get_num_bunches();"},
{"lineNum":"  596","line":"    if (num_bunches != bps.num_bunches)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  597","line":"        bps = Bunch_props(num_bunches, opts.nstored_turns);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  598","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  599","line":""},
{"lineNum":"  600","line":"void"},
{"lineNum":"  601","line":"Impedance::store_bunches_data(Bunch_simulator const& sim)"},
{"lineNum":"  602","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  603","line":"    scoped_simple_timer timer(\"imp_store_bunches_data\");"},
{"lineNum":"  604","line":""},
{"lineNum":"  605","line":"    auto const& train = sim[0];"},
{"lineNum":"  606","line":"    auto num_bunches = train.get_num_bunches();"},
{"lineNum":"  607","line":"    auto num_local_bunches = train.get_num_local_bunches();"},
{"lineNum":"  608","line":""},
{"lineNum":"  609","line":"    // each bunch has 5 properties, x/y/z_mean, real_num, and bucket_idx"},
{"lineNum":"  610","line":"    karray1d_dev d_vbi_buf(\"vbi_buf\", num_bunches * 5);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  611","line":"    karray1d_hst vbi_buf = Kokkos::create_mirror_view(d_vbi_buf);"},
{"lineNum":"  612","line":""},
{"lineNum":"  613","line":"    for (int i = 0; i < num_local_bunches; ++i)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  614","line":"    {"},
{"lineNum":"  615","line":"        auto const& bunch = train[i];"},
{"lineNum":"  616","line":"        auto means = Core_diagnostics::calculate_mean(bunch);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  617","line":""},
{"lineNum":"  618","line":"        int bucket_idx = bunch.get_bucket_index();"},
{"lineNum":"  619","line":"        int bunch_idx = bunch.get_bunch_index();"},
{"lineNum":"  620","line":""},
{"lineNum":"  621","line":"        if (opts.full_machine && (bucket_idx != bunch_idx))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  622","line":"            throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  623","line":"                    \"for full_machine the buckets have to be occupied in order\");"},
{"lineNum":"  624","line":"        if (bunch.get_comm().rank() == 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  625","line":"        {"},
{"lineNum":"  626","line":"            vbi_buf[bunch_idx*5+0] = means[0];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  627","line":"            vbi_buf[bunch_idx*5+1] = means[2];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  628","line":"            vbi_buf[bunch_idx*5+2] = means[4];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  629","line":"            vbi_buf[bunch_idx*5+3] = bunch.get_real_num();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  630","line":"            vbi_buf[bunch_idx*5+4] = bucket_idx;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  631","line":"        }"},
{"lineNum":"  632","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  633","line":""},
{"lineNum":"  634","line":"    int error = MPI_Allreduce( MPI_IN_PLACE,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  635","line":"                               (void*)vbi_buf.data(),"},
{"lineNum":"  636","line":"                               num_bunches * 5,"},
{"lineNum":"  637","line":"                               MPI_DOUBLE,"},
{"lineNum":"  638","line":"                               MPI_SUM,"},
{"lineNum":"  639","line":"                               train.get_comm() );"},
{"lineNum":"  640","line":""},
{"lineNum":"  641","line":"    if (error != MPI_SUCCESS)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  642","line":"        throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  643","line":"                \"Impedance::store_bunches_data: MPI error in MPI_Allreduce\");"},
{"lineNum":"  644","line":""},
{"lineNum":"  645","line":"    // copy the vbi_buf to device memory"},
{"lineNum":"  646","line":"    Kokkos::deep_copy(d_vbi_buf, vbi_buf);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  647","line":""},
{"lineNum":"  648","line":"    // copy the buffer to bps"},
{"lineNum":"  649","line":"    alg_write_bps write_bps{bps, d_vbi_buf};","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  650","line":"    Kokkos::parallel_for(num_bunches, write_bps);"},
{"lineNum":"  651","line":""},
{"lineNum":"  652","line":"    // increment the registered turns in bps"},
{"lineNum":"  653","line":"    bps.increment_registered_turns();"},
{"lineNum":"  654","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  655","line":""},
{"lineNum":"  656","line":"void"},
{"lineNum":"  657","line":"Impedance::apply_bunch(Bunch& bunch,"},
{"lineNum":"  658","line":"        double time_step, Logger& logger)"},
{"lineNum":"  659","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  660","line":"    bunch.convert_to_fixed_t_lab();"},
{"lineNum":"  661","line":""},
{"lineNum":"  662","line":"    auto bp = calculate_moments_and_partitions(bunch);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  663","line":""},
{"lineNum":"  664","line":"    auto means = Core_diagnostics::calculate_mean(bunch);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  665","line":"    bp.z_mean = means[4];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  666","line":"    bp.N_factor = bunch.get_real_num() / bunch.get_total_num();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  667","line":"    bp.bucket = bunch.get_bucket_index();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  668","line":""},
{"lineNum":"  669","line":"    calculate_kicks(bunch, bp);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  670","line":""},
{"lineNum":"  671","line":"    ///N.B. the wakefiled file reads W/(Z_0*L), Z_0=1/(epsilon_0*c)"},
{"lineNum":"  672","line":"    double wake_factor = -4. * mconstants::pi * pconstants::rp;"},
{"lineNum":"  673","line":""},
{"lineNum":"  674","line":"    double gamma = bunch.get_reference_particle().get_gamma();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  675","line":"    double beta = bunch.get_reference_particle().get_beta();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  676","line":"    double w_f = wake_factor * time_step / (gamma*beta);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  677","line":""},
{"lineNum":"  678","line":"    apply_impedance_kick(bunch,  bp, w_f);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  679","line":""},
{"lineNum":"  680","line":"    bunch.convert_to_fixed_z_lab();"},
{"lineNum":"  681","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  682","line":""},
{"lineNum":"  683","line":""},
{"lineNum":"  684","line":"Bunch_params"},
{"lineNum":"  685","line":"Impedance::calculate_moments_and_partitions(Bunch const& bunch)"},
{"lineNum":"  686","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  687","line":"    scoped_simple_timer timer(\"imp_moments_and_partitions\");"},
{"lineNum":"  688","line":""},
{"lineNum":"  689","line":"    // output cell_size_z, xmom, ymom, zdensity"},
{"lineNum":"  690","line":"    Bunch_params bp;"},
{"lineNum":"  691","line":""},
{"lineNum":"  692","line":"    auto bunchmin = Core_diagnostics::calculate_min(bunch);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  693","line":"    bp.z_left = bunchmin[2];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  694","line":""},
{"lineNum":"  695","line":"    auto bunchmax = Core_diagnostics::calculate_max(bunch);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  696","line":"    double z_length = bunchmax[2] - bp.z_left;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  697","line":""},
{"lineNum":"  698","line":"    if (z_length <= 1.e-14)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  699","line":"        throw std::runtime_error(\"z_length too small \");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  700","line":""},
{"lineNum":"  701","line":"    // 1e-14 is to make sure the max-z particle falls in the last bin"},
{"lineNum":"  702","line":"    //bp.cell_size_z = z_length / double(opts.z_grid) + 1e-14;"},
{"lineNum":"  703","line":"    bp.cell_size_z = z_length / double(opts.z_grid);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  704","line":""},
{"lineNum":"  705","line":"    // double h = z_length/(opts.z_grid-1.0); // AM why have I done that???"},
{"lineNum":"  706","line":"    double h = bp.cell_size_z;"},
{"lineNum":"  707","line":""},
{"lineNum":"  708","line":"    // get binning results"},
{"lineNum":"  709","line":"    auto parts = bunch.get_local_particles();"},
{"lineNum":"  710","line":"    auto masks = bunch.get_local_particle_masks();"},
{"lineNum":"  711","line":""},
{"lineNum":"  712","line":"#if 0"},
{"lineNum":"  713","line":"    alg_z_binning alg(parts, masks, opts.z_grid, bp.z_left, h);"},
{"lineNum":"  714","line":"    Kokkos::parallel_reduce(bunch.size(), alg, h_zbinning.data());"},
{"lineNum":"  715","line":"    Kokkos::fence();"},
{"lineNum":"  716","line":"#endif"},
{"lineNum":"  717","line":""},
{"lineNum":"  718","line":"    // zero first"},
{"lineNum":"  719","line":"    kt::zero_karray(zbinning);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  720","line":""},
{"lineNum":"  721","line":"    // z binning"},
{"lineNum":"  722","line":"    scatter_t scatter(zbinning);"},
{"lineNum":"  723","line":"    alg_z_binning_sv alg{parts, masks, scatter, opts.z_grid, bp.z_left, 1.0/h};","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  724","line":""},
{"lineNum":"  725","line":"    Kokkos::parallel_for(bunch.size(), alg);"},
{"lineNum":"  726","line":"    Kokkos::Experimental::contribute(zbinning, scatter);"},
{"lineNum":"  727","line":"    Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  728","line":""},
{"lineNum":"  729","line":"    // MPI reduction to get global z-binning results"},
{"lineNum":"  730","line":"    if (bunch.get_comm().size() > 1)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  731","line":"    {"},
{"lineNum":"  732","line":"        // copy to host"},
{"lineNum":"  733","line":"        Kokkos::deep_copy(h_zbinning, zbinning);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  734","line":""},
{"lineNum":"  735","line":"        // all reduce"},
{"lineNum":"  736","line":"        int error = MPI_Allreduce(MPI_IN_PLACE, h_zbinning.data(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  737","line":"                opts.z_grid*3, MPI_DOUBLE, MPI_SUM, bunch.get_comm());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  738","line":""},
{"lineNum":"  739","line":"        if (error != MPI_SUCCESS)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  740","line":"            throw std::runtime_error(\"MPI error in Impedance reduce z_binning\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  741","line":""},
{"lineNum":"  742","line":"        // copy back to device"},
{"lineNum":"  743","line":"        Kokkos::deep_copy(zbinning, h_zbinning);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  744","line":"    }"},
{"lineNum":"  745","line":""},
{"lineNum":"  746","line":"    // normalize"},
{"lineNum":"  747","line":"    alg_z_normalize alg2{zbinning, opts.z_grid};","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  748","line":"    Kokkos::parallel_for(opts.z_grid, alg2);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  749","line":""},
{"lineNum":"  750","line":"#if 0"},
{"lineNum":"  751","line":"    Logger l;"},
{"lineNum":"  752","line":"    kt::print_arr_sum(l, zbinning, 0, opts.z_grid);"},
{"lineNum":"  753","line":"    kt::print_arr_sum(l, zbinning, opts.z_grid*1, opts.z_grid);"},
{"lineNum":"  754","line":"    kt::print_arr_sum(l, zbinning, opts.z_grid*2, opts.z_grid);"},
{"lineNum":"  755","line":"#endif"},
{"lineNum":"  756","line":""},
{"lineNum":"  757","line":"    return bp;"},
{"lineNum":"  758","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  759","line":""},
{"lineNum":"  760","line":""},
{"lineNum":"  761","line":"void Impedance::calculate_kicks(Bunch const& bunch, Bunch_params const& bp)"},
{"lineNum":"  762","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  763","line":"    scoped_simple_timer timer(\"imp_calcualte_kicks\");"},
{"lineNum":"  764","line":""},
{"lineNum":"  765","line":"    int num_trains = 0;"},
{"lineNum":"  766","line":"    int mean_bin = (int)((bp.z_mean - bp.z_left) / bp.cell_size_z);"},
{"lineNum":"  767","line":""},
{"lineNum":"  768","line":"    if (bps.registered_turns == 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  769","line":"        throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  770","line":"                \"registered_turns size cannot be zero, \""},
{"lineNum":"  771","line":"                \"probably you propagate a bunch instead of a bunch_train\");"},
{"lineNum":"  772","line":""},
{"lineNum":"  773","line":"    if (mean_bin < 0 || mean_bin >= opts.z_grid)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  774","line":"        throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  775","line":"                \"impedance: the index bin of beam min cannot be <0 or >z_grid, \""},
{"lineNum":"  776","line":"                \"something is wrong\" );"},
{"lineNum":"  777","line":""},
{"lineNum":"  778","line":"    if (opts.full_machine)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  779","line":"    {"},
{"lineNum":"  780","line":"        /// num_trains is relevant only when the full machine option is considered"},
{"lineNum":"  781","line":"        /// a full machine consideres a num_train of bunches repeats with modulation"},
{"lineNum":"  782","line":"        /// wave wn[]"},
{"lineNum":"  783","line":"        /// all buckets are full, but only numbunches bunches properties are stored"},
{"lineNum":"  784","line":"        /// exemple: full_machine, all bunches identical, no wave across the machine:"},
{"lineNum":"  785","line":"        /// num_trains=num_buckets, wn=[0,0,0], it\'s a one bunch simulation"},
{"lineNum":"  786","line":"        /// example: full_machine, two bunch simulation, num_trains= num_buckets/2"},
{"lineNum":"  787","line":"        num_trains = int(opts.num_buckets / bps.num_bunches);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  788","line":""},
{"lineNum":"  789","line":"        if (std::abs(opts.num_buckets / float(bps.num_bunches) - num_trains) > 1e-8)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  790","line":"            throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  791","line":"                    \"full machine assumes repetitive numer of trains: \""},
{"lineNum":"  792","line":"                    \"num_buckets should be divisible to numbunches\");"},
{"lineNum":"  793","line":""},
{"lineNum":"  794","line":"        if (opts.wn[0] < 0 || opts.wn[0] >= num_trains","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  795","line":"                || opts.wn[1] < 0 || opts.wn[1] >= num_trains","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  796","line":"                || opts.wn[2] < 0 || opts.wn[2] >= num_trains)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  797","line":"            throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  798","line":"                    \"full machine wave number cannot be smaller than zero \""},
{"lineNum":"  799","line":"                    \"or larger than num_trains-1\");"},
{"lineNum":"  800","line":"    }"},
{"lineNum":"  801","line":""},
{"lineNum":"  802","line":"    using Kokkos::TeamPolicy;"},
{"lineNum":"  803","line":"    using Kokkos::TeamThreadRange;"},
{"lineNum":"  804","line":""},
{"lineNum":"  805","line":"    // in-bunch z wake"},
{"lineNum":"  806","line":"    // zbinning: zdensity, xmom, ymom"},
{"lineNum":"  807","line":"    // wakes: xw_lead, xw_trail, yw_lead, yw_trail, zwake"},
{"lineNum":"  808","line":"    alg_z_wake ft_z_wake{bp, wake_field, zbinning, wakes};","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  809","line":""},
{"lineNum":"  810","line":"    const int team_size_max = team_policy(opts.z_grid, 1)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  811","line":"        .team_size_max(ft_z_wake, Kokkos::ParallelForTag());"},
{"lineNum":"  812","line":""},
{"lineNum":"  813","line":"    Kokkos::parallel_for("},
{"lineNum":"  814","line":"            TeamPolicy<>(opts.z_grid, team_size_max),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  815","line":"            ft_z_wake);"},
{"lineNum":"  816","line":""},
{"lineNum":"  817","line":"    // bunch-bunch wake"},
{"lineNum":"  818","line":"    // at the moment bucket 0 is in front of bucket 1,"},
{"lineNum":"  819","line":"    // which is in front of bucket 2, etc..."},
{"lineNum":"  820","line":"    alg_bunch_wake ft_bunch_wake("},
{"lineNum":"  821","line":"        bp, wake_field, bps, wakes,"},
{"lineNum":"  822","line":"        opts.bunch_spacing,"},
{"lineNum":"  823","line":"        opts.orbit_length,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  824","line":"        opts.full_machine,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  825","line":"        opts.z_grid","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  826","line":"    );"},
{"lineNum":"  827","line":"    Kokkos::parallel_for(opts.z_grid, ft_bunch_wake);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  828","line":""},
{"lineNum":"  829","line":"    // turn-turn wake"},
{"lineNum":"  830","line":"    if (bps.registered_turns > 1)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  831","line":"    {"},
{"lineNum":"  832","line":"        // calculate turn-turn wakes"},
{"lineNum":"  833","line":"        karray1d_dev turn_wakes(\"turn_wakes\", 5);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  834","line":"        alg_turn_wake ft_turn_wake{","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  835","line":"            bp, bps, wake_field,","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  836","line":"            opts.bunch_spacing,"},
{"lineNum":"  837","line":"            opts.orbit_length,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  838","line":"            opts.full_machine","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  839","line":"        };"},
{"lineNum":"  840","line":"        Kokkos::parallel_reduce(bps.registered_turns-1,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  841","line":"                ft_turn_wake, turn_wakes);"},
{"lineNum":"  842","line":""},
{"lineNum":"  843","line":"        // add the turn-turn wakes to the final wakes"},
{"lineNum":"  844","line":"        alg_add_turn_wake ft_add_turn_wake{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  845","line":"            wakes, turn_wakes, opts.z_grid","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  846","line":"        };"},
{"lineNum":"  847","line":"        Kokkos::parallel_for(opts.z_grid, ft_add_turn_wake);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  848","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  849","line":""},
{"lineNum":"  850","line":"#if 0"},
{"lineNum":"  851","line":"    // prints"},
{"lineNum":"  852","line":"    Logger l;"},
{"lineNum":"  853","line":"    kt::print_arr_sum(l, wakes, 0, opts.z_grid);"},
{"lineNum":"  854","line":"    kt::print_arr_sum(l, wakes, opts.z_grid*1, opts.z_grid);"},
{"lineNum":"  855","line":"    kt::print_arr_sum(l, wakes, opts.z_grid*2, opts.z_grid);"},
{"lineNum":"  856","line":"    kt::print_arr_sum(l, wakes, opts.z_grid*3, opts.z_grid);"},
{"lineNum":"  857","line":"    kt::print_arr_sum(l, wakes, opts.z_grid*4, opts.z_grid);"},
{"lineNum":"  858","line":"#endif"},
{"lineNum":"  859","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  860","line":""},
{"lineNum":"  861","line":"void"},
{"lineNum":"  862","line":"Impedance::apply_impedance_kick(Bunch& bunch,"},
{"lineNum":"  863","line":"        Bunch_params const& bp, double wake_factor)"},
{"lineNum":"  864","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  865","line":"    scoped_simple_timer timer(\"imp_apply_kick\");"},
{"lineNum":"  866","line":""},
{"lineNum":"  867","line":"    alg_apply_kick alg{","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  868","line":"        bunch.get_local_particles(),"},
{"lineNum":"  869","line":"        bunch.get_local_particle_masks(),"},
{"lineNum":"  870","line":"        wakes,"},
{"lineNum":"  871","line":"        opts.z_grid,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  872","line":"        bp.z_left,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  873","line":"        1.0/bp.cell_size_z,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  874","line":"        wake_factor"},
{"lineNum":"  875","line":"    };"},
{"lineNum":"  876","line":""},
{"lineNum":"  877","line":"    Kokkos::parallel_for(bunch.size(), alg);"},
{"lineNum":"  878","line":""},
{"lineNum":"  879","line":"#if 0"},
{"lineNum":"  880","line":"    Logger l(0, LoggerV::DEBUG);"},
{"lineNum":"  881","line":"    bunch.print_statistics(l);"},
{"lineNum":"  882","line":"#endif"},
{"lineNum":"  883","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  884","line":""},
{"lineNum":"  885","line":""},
{"lineNum":"  886","line":""},
{"lineNum":"  887","line":""},
{"lineNum":"  888","line":""},
{"lineNum":"  889","line":"#if 0"},
{"lineNum":"  890","line":""},
{"lineNum":"  891","line":"Impedance::Impedance("},
{"lineNum":"  892","line":"        std::string const & wake_file,"},
{"lineNum":"  893","line":"        std::string const & wake_type,"},
{"lineNum":"  894","line":"        int const  & zgrid,"},
{"lineNum":"  895","line":"        double const & orbit_length,"},
{"lineNum":"  896","line":"        double const & bunchsp,"},
{"lineNum":"  897","line":"        int const nstored_turns,"},
{"lineNum":"  898","line":"        bool full_machine,"},
{"lineNum":"  899","line":"        std::vector<int > wn)"},
{"lineNum":"  900","line":"    : Collective_operator(\"impedance\")"},
{"lineNum":"  901","line":"    , z_grid(zgrid)"},
{"lineNum":"  902","line":"    , nstored_turns(nstored_turns)"},
{"lineNum":"  903","line":"    , orbit_length(orbit_length)"},
{"lineNum":"  904","line":"    , bunch_spacing(bunchsp)"},
{"lineNum":"  905","line":"    , full_machine(full_machine)"},
{"lineNum":"  906","line":"    ,wn(wn)"},
{"lineNum":"  907","line":"{"},
{"lineNum":"  908","line":""},
{"lineNum":"  909","line":"\ttry {"},
{"lineNum":"  910","line":"\t\tif (std::abs(orbit_length/bunchsp - int(orbit_length/bunchsp + 0.5))"},
{"lineNum":"  911","line":"\t\t\t\t> 1e-8)"},
{"lineNum":"  912","line":"\t\t\tthrow std::runtime_error("},
{"lineNum":"  913","line":"\t\t\t\t\t\"orbit length should divide exacty to bunch_spacing \");"},
{"lineNum":"  914","line":"\t} catch (std::exception const& e) {"},
{"lineNum":"  915","line":"\t\tstd::cout << e.what() << \" but the division is \""},
{"lineNum":"  916","line":"\t\t\t\t<< std::setprecision(17) << orbit_length/bunchsp"},
{"lineNum":"  917","line":"\t\t\t\t<< \" with remainder \" << std::setprecision(17)"},
{"lineNum":"  918","line":"\t\t\t\t<< std::abs(orbit_length/bunchsp - int(orbit_length/bunchsp + 0.5))"},
{"lineNum":"  919","line":"\t\t\t\t<< std::endl;"},
{"lineNum":"  920","line":"\t\tMPI_Abort(MPI_COMM_WORLD, 137);"},
{"lineNum":"  921","line":"\t}"},
{"lineNum":"  922","line":""},
{"lineNum":"  923","line":"\tthis->wake_field_sptr = Wake_field_sptr("},
{"lineNum":"  924","line":"\t\t\tnew Wake_field(wake_file, wake_type));"},
{"lineNum":"  925","line":"\tthis->num_buckets = int(orbit_length/bunchsp + 0.5);"},
{"lineNum":"  926","line":"\tconstruct();"},
{"lineNum":"  927","line":"}"},
{"lineNum":"  928","line":""},
{"lineNum":"  929","line":"Impedance::Impedance("},
{"lineNum":"  930","line":"        std::string const & wake_file,"},
{"lineNum":"  931","line":"        std::string const & wake_type,"},
{"lineNum":"  932","line":"        int const  & zgrid,"},
{"lineNum":"  933","line":"        double const & orbit_length,"},
{"lineNum":"  934","line":"        int const& num_buckets,"},
{"lineNum":"  935","line":"        int const nstored_turns,"},
{"lineNum":"  936","line":"        bool full_machine,"},
{"lineNum":"  937","line":"        std::vector<int > wn):"},
{"lineNum":"  938","line":"Collective_operator(\"impedance\"), z_grid(zgrid), nstored_turns(nstored_turns),"},
{"lineNum":"  939","line":"\t\tnum_buckets(num_buckets), orbit_length(orbit_length),"},
{"lineNum":"  940","line":"              full_machine(full_machine), wn(wn)"},
{"lineNum":"  941","line":"{"},
{"lineNum":"  942","line":"   this->wake_field_sptr=Wake_field_sptr(new Wake_field(wake_file, wake_type));"},
{"lineNum":"  943","line":"   this->bunch_spacing=orbit_length/num_buckets;"},
{"lineNum":"  944","line":"   construct();"},
{"lineNum":"  945","line":"}"},
{"lineNum":"  946","line":""},
{"lineNum":"  947","line":"void"},
{"lineNum":"  948","line":"Impedance::construct()"},
{"lineNum":"  949","line":"{"},
{"lineNum":"  950","line":"  try{"},
{"lineNum":"  951","line":""},
{"lineNum":"  952","line":"    wake_factor=-4.*mconstants::pi*pconstants::rp;   ///N.B. the wakefiled file reads W/(Z_0*L), Z_0=1/(epsilon_0*c)"},
{"lineNum":"  953","line":""},
{"lineNum":"  954","line":"    if (wn.size() !=3) {"},
{"lineNum":"  955","line":"\t      wn.resize(3);"},
{"lineNum":"  956","line":"\t      wn[0]=0;"},
{"lineNum":"  957","line":"\t      wn[1]=0;"},
{"lineNum":"  958","line":"\t      wn[2]=0;"},
{"lineNum":"  959","line":"       }"},
{"lineNum":"  960","line":""},
{"lineNum":"  961","line":"    stored_vbunches=std::list< std::vector<Bunch_properties> >();"},
{"lineNum":"  962","line":""},
{"lineNum":"  963","line":"   // xmom_sptr= boost::shared_ptr<Raw_MArray1d >(new Raw_MArray1d(boost::extents[z_grid]));"},
{"lineNum":"  964","line":"    xmom_sptr= boost::shared_ptr<MArray1d >(new MArray1d(boost::extents[z_grid]));"},
{"lineNum":"  965","line":"    ymom_sptr= boost::shared_ptr<MArray1d >(new MArray1d(boost::extents[z_grid]));"},
{"lineNum":"  966","line":"    zdensity_sptr= boost::shared_ptr<MArray1d >(new MArray1d(boost::extents[z_grid]));"},
{"lineNum":"  967","line":"    xwake_leading_sptr= boost::shared_ptr<MArray1d >(new MArray1d(boost::extents[z_grid]));"},
{"lineNum":"  968","line":"    xwake_trailing_sptr= boost::shared_ptr<MArray1d >(new MArray1d(boost::extents[z_grid]));"},
{"lineNum":"  969","line":"    ywake_leading_sptr= boost::shared_ptr<MArray1d >(new MArray1d(boost::extents[z_grid]));"},
{"lineNum":"  970","line":"    ywake_trailing_sptr= boost::shared_ptr<MArray1d >(new MArray1d(boost::extents[z_grid]));"},
{"lineNum":"  971","line":"    zwake0_sptr= boost::shared_ptr<MArray1d >(new MArray1d(boost::extents[z_grid]));"},
{"lineNum":"  972","line":""},
{"lineNum":"  973","line":""},
{"lineNum":"  974","line":"  }"},
{"lineNum":"  975","line":"  catch (std::exception const& e){"},
{"lineNum":"  976","line":"        std::cout<<e.what()<<std::endl;"},
{"lineNum":"  977","line":"        MPI_Abort(MPI_COMM_WORLD, 777);"},
{"lineNum":"  978","line":"  }"},
{"lineNum":"  979","line":"}"},
{"lineNum":"  980","line":""},
{"lineNum":"  981","line":""},
{"lineNum":"  982","line":""},
{"lineNum":"  983","line":"Impedance::Impedance(Impedance const& impedance)"},
{"lineNum":"  984","line":"{"},
{"lineNum":"  985","line":""},
{"lineNum":"  986","line":"   this->wake_field_sptr=impedance.wake_field_sptr;"},
{"lineNum":"  987","line":"   this->z_grid=impedance.z_grid;"},
{"lineNum":"  988","line":"   this->nstored_turns=impedance.nstored_turns;"},
{"lineNum":"  989","line":"   this->orbit_length=impedance.orbit_length;"},
{"lineNum":"  990","line":"   this->num_buckets=impedance.num_buckets;"},
{"lineNum":"  991","line":"   this->wake_factor=impedance.wake_factor;"},
{"lineNum":"  992","line":"   this->bunch_spacing=impedance.bunch_spacing;"},
{"lineNum":"  993","line":"   this->full_machine=impedance.full_machine;"},
{"lineNum":"  994","line":"   this->wn=impedance.wn;"},
{"lineNum":"  995","line":""},
{"lineNum":"  996","line":" // the following data are not copied"},
{"lineNum":"  997","line":""},
{"lineNum":"  998","line":"//    this->stored_vbunches=std::list< std::vector<Bunch_properties> >();"},
{"lineNum":"  999","line":"//    this->xmom_sptr= boost::shared_ptr<MArray1d >(new MArray1d(boost::extents[z_grid]));"},
{"lineNum":" 1000","line":"//    this->ymom_sptr= boost::shared_ptr<MArray1d >(new MArray1d(boost::extents[z_grid]));"},
{"lineNum":" 1001","line":"//    this->zdensity_sptr= boost::shared_ptr<MArray1d >(new MArray1d(boost::extents[z_grid]));"},
{"lineNum":" 1002","line":"//    this->xwake_leading_sptr= boost::shared_ptr<MArray1d >(new MArray1d(boost::extents[z_grid]));"},
{"lineNum":" 1003","line":"//    this->xwake_trailing_sptr= boost::shared_ptr<MArray1d >(new MArray1d(boost::extents[z_grid]));"},
{"lineNum":" 1004","line":"//    this->ywake_leading_sptr= boost::shared_ptr<MArray1d >(new MArray1d(boost::extents[z_grid]));"},
{"lineNum":" 1005","line":"//    this->ywake_trailing_sptr= boost::shared_ptr<MArray1d >(new MArray1d(boost::extents[z_grid]));"},
{"lineNum":" 1006","line":"//    this->zwake0_sptr= boost::shared_ptr<MArray1d >(new MArray1d(boost::extents[z_grid]));"},
{"lineNum":" 1007","line":""},
{"lineNum":" 1008","line":"   this->xmom_sptr=impedance.xmom_sptr;"},
{"lineNum":" 1009","line":"   this->ymom_sptr= impedance.ymom_sptr;"},
{"lineNum":" 1010","line":"   this->zdensity_sptr=impedance. zdensity_sptr;"},
{"lineNum":" 1011","line":"   this->xwake_leading_sptr=impedance.xwake_leading_sptr;"},
{"lineNum":" 1012","line":"   this->xwake_trailing_sptr=impedance.xwake_trailing_sptr;"},
{"lineNum":" 1013","line":"   this->ywake_leading_sptr=impedance.ywake_leading_sptr;"},
{"lineNum":" 1014","line":"   this->ywake_trailing_sptr=impedance.ywake_trailing_sptr;"},
{"lineNum":" 1015","line":"   this->zwake0_sptr=impedance.zwake0_sptr;"},
{"lineNum":" 1016","line":""},
{"lineNum":" 1017","line":"}"},
{"lineNum":" 1018","line":""},
{"lineNum":" 1019","line":""},
{"lineNum":" 1020","line":"Impedance *"},
{"lineNum":" 1021","line":"Impedance::clone()"},
{"lineNum":" 1022","line":"{"},
{"lineNum":" 1023","line":"    return new Impedance(*this);"},
{"lineNum":" 1024","line":"}"},
{"lineNum":" 1025","line":""},
{"lineNum":" 1026","line":""},
{"lineNum":" 1027","line":""},
{"lineNum":" 1028","line":""},
{"lineNum":" 1029","line":"void"},
{"lineNum":" 1030","line":"Impedance::set_z_grid(int const  & zgrid)"},
{"lineNum":" 1031","line":"{"},
{"lineNum":" 1032","line":"  this->z_grid=zgrid;"},
{"lineNum":" 1033","line":"}"},
{"lineNum":" 1034","line":""},
{"lineNum":" 1035","line":""},
{"lineNum":" 1036","line":""},
{"lineNum":" 1037","line":"Wake_field_sptr"},
{"lineNum":" 1038","line":"Impedance::get_wake_field_sptr() const"},
{"lineNum":" 1039","line":"{"},
{"lineNum":" 1040","line":"  return wake_field_sptr;"},
{"lineNum":" 1041","line":"}"},
{"lineNum":" 1042","line":""},
{"lineNum":" 1043","line":""},
{"lineNum":" 1044","line":"int Impedance::get_z_grid() const { return z_grid;}"},
{"lineNum":" 1045","line":"double Impedance::get_orbit_length() const{ return orbit_length;}"},
{"lineNum":" 1046","line":"double Impedance::get_wake_factor() const { return wake_factor;}"},
{"lineNum":" 1047","line":"double Impedance::get_bunch_spacing() const { return bunch_spacing;}"},
{"lineNum":" 1048","line":""},
{"lineNum":" 1049","line":""},
{"lineNum":" 1050","line":"MArray1d_ref &  Impedance::get_xmom() {return *xmom_sptr;}"},
{"lineNum":" 1051","line":"MArray1d_ref &  Impedance::get_ymom() {return *ymom_sptr;}"},
{"lineNum":" 1052","line":"MArray1d_ref &  Impedance::get_zdensity() {return *zdensity_sptr;}"},
{"lineNum":" 1053","line":"MArray1i_ref & Impedance::get_bin_partition() {return *bin_partition_sptr;}"},
{"lineNum":" 1054","line":""},
{"lineNum":" 1055","line":""},
{"lineNum":" 1056","line":"MArray1d_ref const &  Impedance::get_xmom() const {return *xmom_sptr;}"},
{"lineNum":" 1057","line":"MArray1d_ref const &  Impedance::get_ymom() const {return *ymom_sptr;}"},
{"lineNum":" 1058","line":"MArray1d_ref const &  Impedance::get_zdensity() const {return *zdensity_sptr;}"},
{"lineNum":" 1059","line":"MArray1i_ref const & Impedance::get_bin_partition() const {return *bin_partition_sptr;}"},
{"lineNum":" 1060","line":""},
{"lineNum":" 1061","line":"MArray1d_ref &  Impedance::get_xwake_leading() {return *xwake_leading_sptr;}"},
{"lineNum":" 1062","line":"MArray1d_ref &  Impedance::get_xwake_trailing() {return *xwake_trailing_sptr;}"},
{"lineNum":" 1063","line":"MArray1d_ref &  Impedance::get_ywake_leading() {return *ywake_leading_sptr;}"},
{"lineNum":" 1064","line":"MArray1d_ref &  Impedance::get_ywake_trailing() {return *ywake_trailing_sptr;}"},
{"lineNum":" 1065","line":"MArray1d_ref &  Impedance::get_zwake0() {return *zwake0_sptr;}"},
{"lineNum":" 1066","line":""},
{"lineNum":" 1067","line":"MArray1d_ref const &  Impedance::get_xwake_leading() const {return *xwake_leading_sptr;}"},
{"lineNum":" 1068","line":"MArray1d_ref const &  Impedance::get_xwake_trailing() const {return *xwake_trailing_sptr;}"},
{"lineNum":" 1069","line":"MArray1d_ref const &  Impedance::get_ywake_leading() const {return *ywake_leading_sptr;}"},
{"lineNum":" 1070","line":"MArray1d_ref const &  Impedance::get_ywake_trailing() const {return *ywake_trailing_sptr;}"},
{"lineNum":" 1071","line":"MArray1d_ref const &  Impedance::get_zwake0() const {return *zwake0_sptr;}"},
{"lineNum":" 1072","line":""},
{"lineNum":" 1073","line":"bool Impedance::is_full_machine() const { return full_machine;}"},
{"lineNum":" 1074","line":"int Impedance::get_nstored_turns() const { return nstored_turns;}"},
{"lineNum":" 1075","line":"std::list< std::vector<Bunch_properties> > &"},
{"lineNum":" 1076","line":"Impedance::get_stored_vbunches() {return stored_vbunches;}"},
{"lineNum":" 1077","line":""},
{"lineNum":" 1078","line":"int Impedance::get_num_buckets() const { return num_buckets;}"},
{"lineNum":" 1079","line":"std::vector<int >  Impedance::get_train_wave() const { return wn;}"},
{"lineNum":" 1080","line":""},
{"lineNum":" 1081","line":""},
{"lineNum":" 1082","line":""},
{"lineNum":" 1083","line":"void"},
{"lineNum":" 1084","line":"Impedance::calculate_moments_and_partitions(Bunch & bunch)"},
{"lineNum":" 1085","line":"{"},
{"lineNum":" 1086","line":"/// output cell_size_z, xmom, ymom, zdensity"},
{"lineNum":" 1087","line":""},
{"lineNum":" 1088","line":"    int rank(bunch.get_comm().get_rank());"},
{"lineNum":" 1089","line":""},
{"lineNum":" 1090","line":""},
{"lineNum":" 1091","line":"    MArray1d bunchmin(Core_diagnostics::calculate_min(bunch));"},
{"lineNum":" 1092","line":"    bunch_z_left=bunchmin[2];"},
{"lineNum":" 1093","line":"    double z_left=bunch_z_left;"},
{"lineNum":" 1094","line":"    MArray1d bunchmax(Core_diagnostics::calculate_max(bunch));"},
{"lineNum":" 1095","line":"    double z_length=bunchmax[2]-z_left;"},
{"lineNum":" 1096","line":"    cell_size_z= z_length/double(z_grid);"},
{"lineNum":" 1097","line":""},
{"lineNum":" 1098","line":"   // double h = z_length/(z_grid-1.0); // AM why have I done that???"},
{"lineNum":" 1099","line":"    double h = cell_size_z;"},
{"lineNum":" 1100","line":"    if (z_length<= 1.e-14 )   throw"},
{"lineNum":" 1101","line":"                 std::runtime_error(\"z_length too small \");"},
{"lineNum":" 1102","line":""},
{"lineNum":" 1103","line":""},
{"lineNum":" 1104","line":"    MArray1d_ref xmom(get_xmom());"},
{"lineNum":" 1105","line":"    MArray1d_ref ymom(get_ymom());"},
{"lineNum":" 1106","line":"    MArray1d_ref zdensity(get_zdensity());"},
{"lineNum":" 1107","line":""},
{"lineNum":" 1108","line":"    int lnum_part=bunch.get_local_num();"},
{"lineNum":" 1109","line":"    bin_partition_sptr= boost::shared_ptr<MArray1i >(new MArray1i(boost::extents[lnum_part]));"},
{"lineNum":" 1110","line":"    MArray1i_ref bin_partition(get_bin_partition());"},
{"lineNum":" 1111","line":""},
{"lineNum":" 1112","line":"    MArray1d  local_zdensity(boost::extents[z_grid]);"},
{"lineNum":" 1113","line":"    MArray1d  local_xmom(boost::extents[z_grid]);"},
{"lineNum":" 1114","line":"    MArray1d  local_ymom(boost::extents[z_grid]);"},
{"lineNum":" 1115","line":""},
{"lineNum":" 1116","line":""},
{"lineNum":" 1117","line":"    for (int i=0; i<z_grid;  ++i){"},
{"lineNum":" 1118","line":"        local_zdensity[i]=0.0;"},
{"lineNum":" 1119","line":"        local_xmom[i]=0.0;"},
{"lineNum":" 1120","line":"        local_ymom[i]=0.0;"},
{"lineNum":" 1121","line":"    }"},
{"lineNum":" 1122","line":""},
{"lineNum":" 1123","line":""},
{"lineNum":" 1124","line":""},
{"lineNum":" 1125","line":"     for (int part = 0;  part < bunch.get_local_num(); ++part) {"},
{"lineNum":" 1126","line":"         int bin = static_cast<int>((bunch.get_local_particles()[part][4]-z_left)/h);"},
{"lineNum":" 1127","line":"         if ((bin < z_grid) && (bin >= 0)) {"},
{"lineNum":" 1128","line":"             local_zdensity[bin] += 1;"},
{"lineNum":" 1129","line":"             local_xmom[bin] += bunch.get_local_particles()[part][0];"},
{"lineNum":" 1130","line":"             local_ymom[bin] += bunch.get_local_particles()[part][2];"},
{"lineNum":" 1131","line":"             bin_partition[part]=bin; //bin_partition(n) is the bin where you find the particle n"},
{"lineNum":" 1132","line":"         }"},
{"lineNum":" 1133","line":"         else if ((bin==z_grid) && std::abs(bunch.get_local_particles()[part][4]-z_length-z_left)<z_length*1.e-14) {"},
{"lineNum":" 1134","line":"             local_zdensity[bin-1] += 1; // put the edge particle in the last bin=z_grid-1"},
{"lineNum":" 1135","line":"             bin_partition[part]=z_grid-1;"},
{"lineNum":" 1136","line":"         }"},
{"lineNum":" 1137","line":"         else"},
{"lineNum":" 1138","line":"         {   std::cout << \"  z_left  \"<<z_left<<\"  rank= \"<<rank<<std::endl;"},
{"lineNum":" 1139","line":"          std::cout<<\"bunch.get_local_particles()[part][4]=\"  <<bunch.get_local_particles()[part][4]<<\"  rank= \"<<rank<<std::endl;"},
{"lineNum":" 1140","line":"           std::cout<<\"bunch.get_local_particles()[part]0,1,2,3,4,5=\"  <<bunch.get_local_particles()[part][0]<<"},
{"lineNum":" 1141","line":"           \"  \"<<bunch.get_local_particles()[part][1]<<"},
{"lineNum":" 1142","line":"           \"  \"<<bunch.get_local_particles()[part][2]<<"},
{"lineNum":" 1143","line":"           \"  \"<<bunch.get_local_particles()[part][3]<<"},
{"lineNum":" 1144","line":"           \"  \"<<bunch.get_local_particles()[part][4]<<"},
{"lineNum":" 1145","line":"           \"  \"<<bunch.get_local_particles()[part][5]<<std::endl;"},
{"lineNum":" 1146","line":""},
{"lineNum":" 1147","line":"         std::cout<< \" particle\'s id =\"<<part<<std::endl;"},
{"lineNum":" 1148","line":"         std::cout << \"  z_length  \"<<z_length<<\"  rank= \"<<rank<<std::endl;"},
{"lineNum":" 1149","line":"         std::cout << \"(mbs.local_particles(4,n)-z_left)= \"<<(bunch.get_local_particles()[part][4]-z_left)<<\"  rank= \"<<rank<<std::endl;"},
{"lineNum":" 1150","line":"         std::cout << \"bin: \" << bin<<\"  z_grid=\"<<z_grid<< \"  h=\" << h <<\"  rank= \"<<rank<<std::endl;"},
{"lineNum":" 1151","line":"         std::cout << \"bunch.get_local_particles()[part][4]-z_length-z_left= \"<<std::abs(bunch.get_local_particles()[part][4]-z_length-z_left)<<\"  rank= \"<<rank<<std::endl;"},
{"lineNum":" 1152","line":"         throw"},
{"lineNum":" 1153","line":"                 std::runtime_error(\"particles out of range in calculate_moments_and_partitions \");"},
{"lineNum":" 1154","line":"         }"},
{"lineNum":" 1155","line":""},
{"lineNum":" 1156","line":""},
{"lineNum":" 1157","line":"    }"},
{"lineNum":" 1158","line":""},
{"lineNum":" 1159","line":""},
{"lineNum":" 1160","line":"    int error = MPI_Allreduce(reinterpret_cast<void*>(local_zdensity.origin()),"},
{"lineNum":" 1161","line":"\t\t\t      reinterpret_cast<void*> (zdensity.origin()),"},
{"lineNum":" 1162","line":"\t\t\t      z_grid, MPI_DOUBLE, MPI_SUM, bunch.get_comm().get());"},
{"lineNum":" 1163","line":"    if (error != MPI_SUCCESS) {"},
{"lineNum":" 1164","line":"        throw std::runtime_error("},
{"lineNum":" 1165","line":"                \"MPI error in Impedance zdensity\");"},
{"lineNum":" 1166","line":"    }"},
{"lineNum":" 1167","line":""},
{"lineNum":" 1168","line":""},
{"lineNum":" 1169","line":"    MPI_Allreduce(reinterpret_cast<void*>(local_xmom.origin()),"},
{"lineNum":" 1170","line":"                   reinterpret_cast<void*>(xmom.origin()),"},
{"lineNum":" 1171","line":"                                           z_grid, MPI_DOUBLE, MPI_SUM, bunch.get_comm().get());"},
{"lineNum":" 1172","line":"    if (error != MPI_SUCCESS) {"},
{"lineNum":" 1173","line":"        throw std::runtime_error("},
{"lineNum":" 1174","line":"                \"MPI error in Impedance xmom\");"},
{"lineNum":" 1175","line":"    }"},
{"lineNum":" 1176","line":""},
{"lineNum":" 1177","line":""},
{"lineNum":" 1178","line":""},
{"lineNum":" 1179","line":"    MPI_Allreduce(reinterpret_cast<void*>(local_ymom.origin()),"},
{"lineNum":" 1180","line":"                   reinterpret_cast<void*>(ymom.origin()),"},
{"lineNum":" 1181","line":"                                           z_grid, MPI_DOUBLE, MPI_SUM, bunch.get_comm().get());"},
{"lineNum":" 1182","line":"    if (error != MPI_SUCCESS) {"},
{"lineNum":" 1183","line":"        throw std::runtime_error("},
{"lineNum":" 1184","line":"                \"MPI error in Impedance ymom\");"},
{"lineNum":" 1185","line":"    }"},
{"lineNum":" 1186","line":""},
{"lineNum":" 1187","line":"//     //    dbg is set here"},
{"lineNum":" 1188","line":"//    int dbg = 0;"},
{"lineNum":" 1189","line":"    for (int k = 0; k < z_grid; ++k) {"},
{"lineNum":" 1190","line":"       // std::cout<<\"zdensity[k]=\"<<zdensity[k]<<std::endl;"},
{"lineNum":" 1191","line":"        if (zdensity[k] != 0.0) {"},
{"lineNum":" 1192","line":"         //   if (dbg) std::cout << \"before bin: \" << k << \" zdensity(k): \" << zdensity[k] << \" xmom(k): \""},
{"lineNum":" 1193","line":"\t//\t  <<xmom[k] << \" ymom(k): \" <<  ymom[k] << std::endl;"},
{"lineNum":" 1194","line":"            xmom[k] /= zdensity[k];"},
{"lineNum":" 1195","line":"            ymom[k] /= zdensity[k];"},
{"lineNum":" 1196","line":"\t //    if (dbg) std::cout << \"after bin: \" << k << \" zdensity(k): \" << zdensity[k] << \" xmom(k): \""},
{"lineNum":" 1197","line":"\t//\t  <<xmom[k] << \" ymom(k): \" <<  ymom[k] << std::endl;"},
{"lineNum":" 1198","line":"        } else {"},
{"lineNum":" 1199","line":"            xmom[k] = 0.0;"},
{"lineNum":" 1200","line":"            ymom[k] = 0.0;"},
{"lineNum":" 1201","line":"        }"},
{"lineNum":" 1202","line":"    }"},
{"lineNum":" 1203","line":""},
{"lineNum":" 1204","line":"}"},
{"lineNum":" 1205","line":""},
{"lineNum":" 1206","line":""},
{"lineNum":" 1207","line":""},
{"lineNum":" 1208","line":""},
{"lineNum":" 1209","line":""},
{"lineNum":" 1210","line":""},
{"lineNum":" 1211","line":""},
{"lineNum":" 1212","line":""},
{"lineNum":" 1213","line":""},
{"lineNum":" 1214","line":"inline int get_zindex_for_wake(double z, double dz, int istart, double zstart)"},
{"lineNum":" 1215","line":"{ //if  (z< (-istart*istart*dz+zstart)) return -100;"},
{"lineNum":" 1216","line":"  if (z>=zstart){"},
{"lineNum":" 1217","line":"    return (static_cast<int>(floor(sqrt((z-zstart)/dz)))) +istart;"},
{"lineNum":" 1218","line":"  }else"},
{"lineNum":" 1219","line":"  {"},
{"lineNum":" 1220","line":"    return (-static_cast<int>(floor(sqrt((zstart-z)/dz)))) +istart;"},
{"lineNum":" 1221","line":"  }"},
{"lineNum":" 1222","line":"}"},
{"lineNum":" 1223","line":""},
{"lineNum":" 1224","line":""},
{"lineNum":" 1225","line":""},
{"lineNum":" 1226","line":""},
{"lineNum":" 1227","line":"void Impedance::calculate_kicks(Commxx_sptr const & comm_sptr) {"},
{"lineNum":" 1228","line":""},
{"lineNum":" 1229","line":"\tdouble t, t1;"},
{"lineNum":" 1230","line":"\tt = simple_timer_current();"},
{"lineNum":" 1231","line":""},
{"lineNum":" 1232","line":"\tint zpoints = get_wake_field_sptr()->get_z_coord().size();"},
{"lineNum":" 1233","line":"\tdouble delta_z = get_wake_field_sptr()->get_delta_z();"},
{"lineNum":" 1234","line":"\tint istart = get_wake_field_sptr()->get_istart();"},
{"lineNum":" 1235","line":"\tdouble zstart = get_wake_field_sptr()->get_zstart();"},
{"lineNum":" 1236","line":"\tMArray1d_ref z_coord(get_wake_field_sptr()->get_z_coord());"},
{"lineNum":" 1237","line":"\tMArray1d_ref z_wake(get_wake_field_sptr()->get_z_wake());"},
{"lineNum":" 1238","line":"\tMArray1d_ref xw_lead(get_wake_field_sptr()->get_xw_lead());"},
{"lineNum":" 1239","line":"\tMArray1d_ref xw_trail(get_wake_field_sptr()->get_xw_trail());"},
{"lineNum":" 1240","line":"\tMArray1d_ref yw_lead(get_wake_field_sptr()->get_yw_lead());"},
{"lineNum":" 1241","line":"\tMArray1d_ref yw_trail(get_wake_field_sptr()->get_yw_trail());"},
{"lineNum":" 1242","line":""},
{"lineNum":" 1243","line":"\tt = simple_timer_show(t,"},
{"lineNum":" 1244","line":"\t\t\t\"impedance_calculate_kicks:  ref the  wake fields \");"},
{"lineNum":" 1245","line":""},
{"lineNum":" 1246","line":"\tint registered_turns = stored_vbunches.size();"},
{"lineNum":" 1247","line":"\tint numbunches;"},
{"lineNum":" 1248","line":"\tint num_trains = 0;"},
{"lineNum":" 1249","line":"\tif (registered_turns == 0)"},
{"lineNum":" 1250","line":"\t\tthrow std::runtime_error("},
{"lineNum":" 1251","line":"\t\t\t\t\"registered_turns size cannot be zero, probably you propagate a bunch instead of a bunch_train\");"},
{"lineNum":" 1252","line":""},
{"lineNum":" 1253","line":"\tnumbunches = (*stored_vbunches.begin()).size();"},
{"lineNum":" 1254","line":""},
{"lineNum":" 1255","line":"\tif ((full_machine) && (registered_turns != 0)) {"},
{"lineNum":" 1256","line":"\t\tnum_trains = int(num_buckets / numbunches);"},
{"lineNum":" 1257","line":"      /// num_trains is relevant only when the full machine option is considered"},
{"lineNum":" 1258","line":"      /// a full machine consideres a num_train of bunches repeats with modulation wave wn[]"},
{"lineNum":" 1259","line":"     /// all buckets are full, but only numbunches bunches properties are stored"},
{"lineNum":" 1260","line":"     /// exemple: full_machine, all bunches identical, no wave across the machine: num_trains=num_buckets, wn=[0,0,0], it\'s a one bunch simulation"},
{"lineNum":" 1261","line":"     /// example: full_machine, two bunch simulation, num_trains= num_buckets/2"},
{"lineNum":" 1262","line":""},
{"lineNum":" 1263","line":"\t\tif (std::abs(num_buckets / float(numbunches) - num_trains) > 1e-8)"},
{"lineNum":" 1264","line":"\t\t\tthrow std::runtime_error("},
{"lineNum":" 1265","line":"\t\t\t\t\t\"full machine assumes repetitive numer of trains: num_buckets should be divisible to numbunches\");"},
{"lineNum":" 1266","line":"\t\tif (wn[0] < 0 || wn[0] >= num_trains || wn[1] < 0 || wn[1] >= num_trains"},
{"lineNum":" 1267","line":"\t\t\t\t|| wn[2] < 0 || wn[2] >= num_trains)"},
{"lineNum":" 1268","line":"\t\t\tthrow std::runtime_error("},
{"lineNum":" 1269","line":"\t\t\t\t\t\"full machine wave number cannot be smaller than zero or larger than num_trains-1\");"},
{"lineNum":" 1270","line":"\t}"},
{"lineNum":" 1271","line":""},
{"lineNum":" 1272","line":""},
{"lineNum":" 1273","line":"   // std::cout<<\" registred turns= \"<<registered_turns<<std::endl;"},
{"lineNum":" 1274","line":"   // std::cout<<\" numbunches= \"<<numbunches<<std::endl;"},
{"lineNum":" 1275","line":"   // std::cout<<\" num_buckets= \"<<num_buckets<<std::endl;"},
{"lineNum":" 1276","line":"   //  std::cout<<\" num_trains= \"<<num_trains<<std::endl;"},
{"lineNum":" 1277","line":"   //  std::cout<<\"wn=\"<<wn[0]<<\",\"<<wn[1]<<\",\"<<wn[2]<<std::endl;"},
{"lineNum":" 1278","line":""},
{"lineNum":" 1279","line":"   MArray1d_ref const xmom(get_xmom());"},
{"lineNum":" 1280","line":"   MArray1d_ref const ymom(get_ymom());"},
{"lineNum":" 1281","line":"   MArray1d_ref const zdensity(get_zdensity());"},
{"lineNum":" 1282","line":"   MArray1d_ref xwake_leading(get_xwake_leading());"},
{"lineNum":" 1283","line":"   MArray1d_ref xwake_trailing(get_xwake_trailing());"},
{"lineNum":" 1284","line":"   MArray1d_ref ywake_leading(get_ywake_leading());"},
{"lineNum":" 1285","line":"   MArray1d_ref ywake_trailing(get_ywake_trailing());"},
{"lineNum":" 1286","line":"   MArray1d_ref zwake0(get_zwake0());"},
{"lineNum":" 1287","line":""},
{"lineNum":" 1288","line":""},
{"lineNum":" 1289","line":" //    this->xwake_leading_sptr= boost::shared_ptr<MArray1d >(new MArray1d(boost::extents[z_grid]));"},
{"lineNum":" 1290","line":"//    this->xwake_trailing_sptr= boost::shared_ptr<MArray1d >(new MArray1d(boost::extents[z_grid]));"},
{"lineNum":" 1291","line":"//    this->ywake_leading_sptr= boost::shared_ptr<MArray1d >(new MArray1d(boost::extents[z_grid]));"},
{"lineNum":" 1292","line":"//    this->ywake_trailing_sptr= boost::shared_ptr<MArray1d >(new MArray1d(boost::extents[z_grid]));"},
{"lineNum":" 1293","line":"//    this->zwake0_sptr= boost::shared_ptr<MArray1d >(new MArray1d(boost::extents[z_grid]));"},
{"lineNum":" 1294","line":""},
{"lineNum":" 1295","line":"   int size=comm_sptr->get_size();"},
{"lineNum":" 1296","line":"   std::vector<int >  offsets(size);"},
{"lineNum":" 1297","line":"   std::vector<int >  counts(size);"},
{"lineNum":" 1298","line":"   decompose_1d_raw(size, z_grid, offsets, counts);"},
{"lineNum":" 1299","line":"   int rank=comm_sptr->get_rank();"},
{"lineNum":" 1300","line":""},
{"lineNum":" 1301","line":"   MArray1d xwake_leading_local(boost::extents[counts[rank]]);"},
{"lineNum":" 1302","line":"   MArray1d xwake_trailing_local(boost::extents[counts[rank]]);"},
{"lineNum":" 1303","line":"   MArray1d ywake_leading_local(boost::extents[counts[rank]]);"},
{"lineNum":" 1304","line":"   MArray1d ywake_trailing_local(boost::extents[counts[rank]]);"},
{"lineNum":" 1305","line":"   MArray1d zwake0_local(boost::extents[counts[rank]]);"},
{"lineNum":" 1306","line":""},
{"lineNum":" 1307","line":""},
{"lineNum":" 1308","line":""},
{"lineNum":" 1309","line":"    t1 = simple_timer_current();"},
{"lineNum":" 1310","line":"   // for (int i = offsets[rank]; i <offsets[rank]+counts[rank] ; ++i){"},
{"lineNum":" 1311","line":"    for (int i = 0; i <counts[rank] ; ++i){"},
{"lineNum":" 1312","line":"        int real_i=i+offsets[rank];"},
{"lineNum":" 1313","line":"        xwake_leading_local[i]=0.;"},
{"lineNum":" 1314","line":"        xwake_trailing_local[i]=0. ;"},
{"lineNum":" 1315","line":"        ywake_leading_local[i] =0.;"},
{"lineNum":" 1316","line":"        ywake_trailing_local[i]=0. ;"},
{"lineNum":" 1317","line":"        zwake0_local[i] =0.;"},
{"lineNum":" 1318","line":"      // in-bunch impedance"},
{"lineNum":" 1319","line":"        for (int j = 0; j < z_grid; ++j){"},
{"lineNum":" 1320","line":"            double zji=(j-real_i)*cell_size_z;"},
{"lineNum":" 1321","line":""},
{"lineNum":" 1322","line":"            if (zji>=z_coord[0]) {"},
{"lineNum":" 1323","line":"                // below it is assumed the wake function is stored using a quadratic grid"},
{"lineNum":" 1324","line":"                int iz=get_zindex_for_wake(zji, delta_z, istart, zstart);"},
{"lineNum":" 1325","line":"                double xwl(0.), xwt(0.), ywl(0.), ywt(0.), zw(0.);"},
{"lineNum":" 1326","line":"                    if (iz+1 < zpoints) {"},
{"lineNum":" 1327","line":"                        xwl=xw_lead[iz]+(zji-z_coord[iz])*(xw_lead[iz+1]-xw_lead[iz])/(z_coord[iz+1]-z_coord[iz]);"},
{"lineNum":" 1328","line":"                        xwt=xw_trail[iz]+(zji-z_coord[iz])*(xw_trail[iz+1]-xw_trail[iz])/(z_coord[iz+1]-z_coord[iz]);"},
{"lineNum":" 1329","line":"                        ywl=yw_lead[iz]+(zji-z_coord[iz])*(yw_lead[iz+1]-yw_lead[iz])/(z_coord[iz+1]-z_coord[iz]);"},
{"lineNum":" 1330","line":"                        ywt=yw_trail[iz]+(zji-z_coord[iz])*(yw_trail[iz+1]-yw_trail[iz])/(z_coord[iz+1]-z_coord[iz]);"},
{"lineNum":" 1331","line":"                        zw=z_wake[iz]+(zji-z_coord[iz])*(z_wake[iz+1]-z_wake[iz])/(z_coord[iz+1]-z_coord[iz]);"},
{"lineNum":" 1332","line":"                    }"},
{"lineNum":" 1333","line":"                xwake_leading_local[i]  +=zdensity[j]*N_factor*xmom[j]*xwl;"},
{"lineNum":" 1334","line":"                xwake_trailing_local[i]  += zdensity[j]*N_factor*xwt;"},
{"lineNum":" 1335","line":"                ywake_leading_local[i]  += zdensity[j]*N_factor*ymom[j]*ywl;"},
{"lineNum":" 1336","line":"                ywake_trailing_local[i]  += zdensity[j]*N_factor*ywt;"},
{"lineNum":" 1337","line":"                zwake0_local[i] += zdensity[j]*N_factor*zw;"},
{"lineNum":" 1338","line":"            }"},
{"lineNum":" 1339","line":"         }"},
{"lineNum":" 1340","line":""},
{"lineNum":" 1341","line":""},
{"lineNum":" 1342","line":"        std::list< std::vector<Bunch_properties> >::const_iterator it=stored_vbunches.begin(); // stored_vbunches.begin() stores the bunches info at"},
{"lineNum":" 1343","line":"                                                                                              // at the moment"},
{"lineNum":" 1344","line":"        /// bucket 0 is in front of bucket 1, which is in front of bucket 2, etc..."},
{"lineNum":" 1345","line":"        int mean_bin=static_cast<int>((bunch_z_mean-bunch_z_left)/cell_size_z);"},
{"lineNum":" 1346","line":"        if ((mean_bin<0) || (mean_bin>=z_grid)){"},
{"lineNum":" 1347","line":"            throw std::runtime_error("},
{"lineNum":" 1348","line":"                    \"impedance: the index bin of beam min cannot be <0 or >z_grid, something is wrong  \");"},
{"lineNum":" 1349","line":"        }"},
{"lineNum":" 1350","line":"        double z_to_zmean=(mean_bin-real_i)*cell_size_z;"},
{"lineNum":" 1351","line":"        for (int ibunch= 0; ibunch<numbunches; ++ibunch){"},
{"lineNum":" 1352","line":"            //  double xwl(0.), xwt(0.), ywl(0.), ywt(0.), zw(0.);"},
{"lineNum":" 1353","line":"            int ibucket=(*it)[ibunch].bucket_index;"},
{"lineNum":" 1354","line":"            if(ibucket<bunch_bucket) {///  same turn, the leading buckets effect"},
{"lineNum":" 1355","line":"                double  zji=z_to_zmean+bunch_spacing*(bunch_bucket-ibucket) +((*it)[ibunch].z_mean-bunch_z_mean);"},
{"lineNum":" 1356","line":"            //  int iz=static_cast<int>(floor(sqrt((zji-z_coord[0])/(z_coord[1]-z_coord[0]))));"},
{"lineNum":" 1357","line":"                int iz=get_zindex_for_wake(zji, delta_z, istart, zstart);"},
{"lineNum":" 1358","line":"                if ((iz+1 < zpoints) && (iz>0)) {"},
{"lineNum":" 1359","line":"                    double xwl=xw_lead[iz]+(zji-z_coord[iz])*(xw_lead[iz+1]-xw_lead[iz])/(z_coord[iz+1]-z_coord[iz]);"},
{"lineNum":" 1360","line":"                    double xwt=xw_trail[iz]+(zji-z_coord[iz])*(xw_trail[iz+1]-xw_trail[iz])/(z_coord[iz+1]-z_coord[iz]);"},
{"lineNum":" 1361","line":"                    double ywl=yw_lead[iz]+(zji-z_coord[iz])*(yw_lead[iz+1]-yw_lead[iz])/(z_coord[iz+1]-z_coord[iz]);"},
{"lineNum":" 1362","line":"                    double ywt=yw_trail[iz]+(zji-z_coord[iz])*(yw_trail[iz+1]-yw_trail[iz])/(z_coord[iz+1]-z_coord[iz]);"},
{"lineNum":" 1363","line":"                    double zw=z_wake[iz]+(zji-z_coord[iz])*(z_wake[iz+1]-z_wake[iz])/(z_coord[iz+1]-z_coord[iz]);"},
{"lineNum":" 1364","line":""},
{"lineNum":" 1365","line":"                    xwake_leading_local[i]  +=(*it)[ibunch].realnum*(*it)[ibunch].x_mean*xwl;"},
{"lineNum":" 1366","line":"                    xwake_trailing_local[i]  += (*it)[ibunch].realnum*xwt;"},
{"lineNum":" 1367","line":"                    ywake_leading_local[i]  +=  (*it)[ibunch].realnum*(*it)[ibunch].y_mean*ywl;"},
{"lineNum":" 1368","line":"                    ywake_trailing_local[i]  +=(*it)[ibunch].realnum*ywt;"},
{"lineNum":" 1369","line":"                    zwake0_local[i] += (*it)[ibunch].realnum*zw;"},
{"lineNum":" 1370","line":"                }"},
{"lineNum":" 1371","line":"            }"},
{"lineNum":" 1372","line":"        } // ibunch loop"},
{"lineNum":" 1373","line":""},
{"lineNum":" 1374","line":"        if (full_machine) { // it assumes that all the other trains are in front"},
{"lineNum":" 1375","line":"            for (int itrain= 1; itrain<num_trains; ++itrain){  //for one bunch simulation num_trains = num_buckets, all trains identical except displacement"},
{"lineNum":" 1376","line":"                double wnx=cos(2.*mconstants::pi*wn[0]*itrain/double(num_trains));"},
{"lineNum":" 1377","line":"                double wny=cos(2.*mconstants::pi*wn[1]*itrain/double(num_trains));"},
{"lineNum":" 1378","line":"                double wnz=cos(2.*mconstants::pi*wn[2]*itrain/double(num_trains));"},
{"lineNum":" 1379","line":"                for (int ibunch= 0; ibunch<numbunches; ++ibunch){"},
{"lineNum":" 1380","line":"                    double  zji=z_to_zmean+bunch_spacing*numbunches*itrain+bunch_spacing*(bunch_bucket-ibunch)+"},
{"lineNum":" 1381","line":"                    ((*it)[ibunch].z_mean*wnz-bunch_z_mean);"},
{"lineNum":" 1382","line":"                    //  int iz=static_cast<int>(floor(sqrt((zji-z_coord[0])/(z_coord[1]-z_coord[0]))));"},
{"lineNum":" 1383","line":"                    int iz=get_zindex_for_wake(zji, delta_z, istart, zstart);"},
{"lineNum":" 1384","line":"                    if ((iz+1 < zpoints) && (iz>0)) {"},
{"lineNum":" 1385","line":"                        double xwl=xw_lead[iz]+(zji-z_coord[iz])*(xw_lead[iz+1]-xw_lead[iz])/(z_coord[iz+1]-z_coord[iz]);"},
{"lineNum":" 1386","line":"                        double xwt=xw_trail[iz]+(zji-z_coord[iz])*(xw_trail[iz+1]-xw_trail[iz])/(z_coord[iz+1]-z_coord[iz]);"},
{"lineNum":" 1387","line":"                        double ywl=yw_lead[iz]+(zji-z_coord[iz])*(yw_lead[iz+1]-yw_lead[iz])/(z_coord[iz+1]-z_coord[iz]);"},
{"lineNum":" 1388","line":"                        double ywt=yw_trail[iz]+(zji-z_coord[iz])*(yw_trail[iz+1]-yw_trail[iz])/(z_coord[iz+1]-z_coord[iz]);"},
{"lineNum":" 1389","line":"                        double zw=z_wake[iz]+(zji-z_coord[iz])*(z_wake[iz+1]-z_wake[iz])/(z_coord[iz+1]-z_coord[iz]);"},
{"lineNum":" 1390","line":""},
{"lineNum":" 1391","line":"                        xwake_leading_local[i]  +=(*it)[ibunch].realnum*(*it)[ibunch].x_mean*wnx*xwl;"},
{"lineNum":" 1392","line":"                        xwake_trailing_local[i]  += (*it)[ibunch].realnum*xwt;"},
{"lineNum":" 1393","line":"                        ywake_leading_local[i]  +=  (*it)[ibunch].realnum*(*it)[ibunch].y_mean*wny*ywl;"},
{"lineNum":" 1394","line":"                        ywake_trailing_local[i]  +=(*it)[ibunch].realnum*ywt;"},
{"lineNum":" 1395","line":"                        zwake0_local[i] += (*it)[ibunch].realnum*zw;"},
{"lineNum":" 1396","line":"                    }"},
{"lineNum":" 1397","line":"                }"},
{"lineNum":" 1398","line":"            }"},
{"lineNum":" 1399","line":"        }  // full_machine"},
{"lineNum":" 1400","line":""},
{"lineNum":" 1401","line":"        if (registered_turns>1) {"},
{"lineNum":" 1402","line":"            ++it; ///previous turn, following buckets effect"},
{"lineNum":" 1403","line":"            for (int ibunch= 0; ibunch<numbunches; ++ibunch){"},
{"lineNum":" 1404","line":"                int ibucket=(*it)[ibunch].bucket_index;"},
{"lineNum":" 1405","line":"                if(ibucket>=bunch_bucket) {///  following buckets effect"},
{"lineNum":" 1406","line":"                    double  zji=z_to_zmean+bunch_spacing*(bunch_bucket-ibucket)+orbit_length +((*it)[ibunch].z_mean-bunch_z_mean);"},
{"lineNum":" 1407","line":"                    //  int iz=static_cast<int>(floor(sqrt((zji-z_coord[0])/(z_coord[1]-z_coord[0]))));"},
{"lineNum":" 1408","line":"                    int iz=get_zindex_for_wake(zji, delta_z, istart, zstart);"},
{"lineNum":" 1409","line":"                    if ((iz+1 < zpoints) && (iz>0)) {"},
{"lineNum":" 1410","line":"                        double xwl=xw_lead[iz]+(zji-z_coord[iz])*(xw_lead[iz+1]-xw_lead[iz])/(z_coord[iz+1]-z_coord[iz]);"},
{"lineNum":" 1411","line":"                        double xwt=xw_trail[iz]+(zji-z_coord[iz])*(xw_trail[iz+1]-xw_trail[iz])/(z_coord[iz+1]-z_coord[iz]);"},
{"lineNum":" 1412","line":"                        double ywl=yw_lead[iz]+(zji-z_coord[iz])*(yw_lead[iz+1]-yw_lead[iz])/(z_coord[iz+1]-z_coord[iz]);"},
{"lineNum":" 1413","line":"                        double ywt=yw_trail[iz]+(zji-z_coord[iz])*(yw_trail[iz+1]-yw_trail[iz])/(z_coord[iz+1]-z_coord[iz]);"},
{"lineNum":" 1414","line":"                        double zw=z_wake[iz]+(zji-z_coord[iz])*(z_wake[iz+1]-z_wake[iz])/(z_coord[iz+1]-z_coord[iz]);"},
{"lineNum":" 1415","line":""},
{"lineNum":" 1416","line":"                        xwake_leading_local[i]  +=(*it)[ibunch].realnum*(*it)[ibunch].x_mean*xwl;"},
{"lineNum":" 1417","line":"                        xwake_trailing_local[i]  += (*it)[ibunch].realnum*xwt;"},
{"lineNum":" 1418","line":"                        ywake_leading_local[i]  +=  (*it)[ibunch].realnum*(*it)[ibunch].y_mean*ywl;"},
{"lineNum":" 1419","line":"                        ywake_trailing_local[i]  +=(*it)[ibunch].realnum*ywt;"},
{"lineNum":" 1420","line":"                        zwake0_local[i] += (*it)[ibunch].realnum*zw;"},
{"lineNum":" 1421","line":"                    }"},
{"lineNum":" 1422","line":"                }"},
{"lineNum":" 1423","line":"            } // ibunch loop"},
{"lineNum":" 1424","line":"        }//registered_turns>1"},
{"lineNum":" 1425","line":"    } // i loop"},
{"lineNum":" 1426","line":"    t1 = simple_timer_show(t1, \"impedance_calculate_kicks:  i loop \");"},
{"lineNum":" 1427","line":"    /// it is not necessary to have a loop over i at larger distances, since the effect is negligible"},
{"lineNum":" 1428","line":"    /// might not be  true for coasting beams!"},
{"lineNum":" 1429","line":"    if (registered_turns>1) {"},
{"lineNum":" 1430","line":"        double xwake_l=0.;"},
{"lineNum":" 1431","line":"        double xwake_t=0.;"},
{"lineNum":" 1432","line":"        double ywake_l=0.;"},
{"lineNum":" 1433","line":"        double ywake_t=0.;"},
{"lineNum":" 1434","line":"        double zwake_0=0.;"},
{"lineNum":" 1435","line":""},
{"lineNum":" 1436","line":""},
{"lineNum":" 1437","line":"        std::list< std::vector<Bunch_properties> >::const_iterator it;"},
{"lineNum":" 1438","line":"        std::list< std::vector<Bunch_properties> >::const_iterator jt=stored_vbunches.begin();"},
{"lineNum":" 1439","line":"        ++jt;"},
{"lineNum":" 1440","line":"        int iturn;"},
{"lineNum":" 1441","line":"        for (it=jt,  iturn=1; it !=stored_vbunches.end(); ++it, ++iturn){"},
{"lineNum":" 1442","line":"            for (int ibunch= 0; ibunch<numbunches; ++ibunch){"},
{"lineNum":" 1443","line":"                int ibucket=(*it)[ibunch].bucket_index;"},
{"lineNum":" 1444","line":"                if(((ibucket<bunch_bucket) && (iturn==1))///  finishing the previous turn, for the buckets ahead"},
{"lineNum":" 1445","line":"                ||  (iturn>1))  /// previous turns effects"},
{"lineNum":" 1446","line":"                {"},
{"lineNum":" 1447","line":"                    double  zji=bunch_spacing*(bunch_bucket-ibucket)+orbit_length*iturn +((*it)[ibunch].z_mean-bunch_z_mean);"},
{"lineNum":" 1448","line":"                    //  int iz=static_cast<int>(floor(sqrt((zji-z_coord[0])/(z_coord[1]-z_coord[0]))));"},
{"lineNum":" 1449","line":"                    int iz=get_zindex_for_wake(zji, delta_z, istart, zstart);"},
{"lineNum":" 1450","line":"                    if ((iz+1 < zpoints) && (iz>0)) {"},
{"lineNum":" 1451","line":"                        double  xwl=xw_lead[iz]+(zji-z_coord[iz])*(xw_lead[iz+1]-xw_lead[iz])/(z_coord[iz+1]-z_coord[iz]);"},
{"lineNum":" 1452","line":"                        double  xwt=xw_trail[iz]+(zji-z_coord[iz])*(xw_trail[iz+1]-xw_trail[iz])/(z_coord[iz+1]-z_coord[iz]);"},
{"lineNum":" 1453","line":"                        double  ywl=yw_lead[iz]+(zji-z_coord[iz])*(yw_lead[iz+1]-yw_lead[iz])/(z_coord[iz+1]-z_coord[iz]);"},
{"lineNum":" 1454","line":"                        double  ywt=yw_trail[iz]+(zji-z_coord[iz])*(yw_trail[iz+1]-yw_trail[iz])/(z_coord[iz+1]-z_coord[iz]);"},
{"lineNum":" 1455","line":"                        double  zw=z_wake[iz]+(zji-z_coord[iz])*(z_wake[iz+1]-z_wake[iz])/(z_coord[iz+1]-z_coord[iz]);"},
{"lineNum":" 1456","line":""},
{"lineNum":" 1457","line":"                        xwake_l +=  (*it)[ibunch].realnum*(*it)[ibunch].x_mean*xwl;"},
{"lineNum":" 1458","line":"                        xwake_t += (*it)[ibunch].realnum*xwt;"},
{"lineNum":" 1459","line":"                        ywake_l +=  (*it)[ibunch].realnum*(*it)[ibunch].y_mean*ywl;"},
{"lineNum":" 1460","line":"                        ywake_t += (*it)[ibunch].realnum*ywt;"},
{"lineNum":" 1461","line":"                        zwake_0 += (*it)[ibunch].realnum*zw;"},
{"lineNum":" 1462","line":"                    }"},
{"lineNum":" 1463","line":"                }"},
{"lineNum":" 1464","line":"            }"},
{"lineNum":" 1465","line":""},
{"lineNum":" 1466","line":"            if (full_machine) {"},
{"lineNum":" 1467","line":"                for (int itrain= 1; itrain<num_trains; ++itrain){"},
{"lineNum":" 1468","line":"                    double wnx=cos(2.*mconstants::pi*wn[0]*itrain/double(num_trains));"},
{"lineNum":" 1469","line":"                    double wny=cos(2.*mconstants::pi*wn[1]*itrain/double(num_trains));"},
{"lineNum":" 1470","line":"                    double wnz=cos(2.*mconstants::pi*wn[2]*itrain/double(num_trains));"},
{"lineNum":" 1471","line":"                    for (int ibunch= 0; ibunch<numbunches; ++ibunch){"},
{"lineNum":" 1472","line":"                        double  zji=orbit_length*iturn+bunch_spacing*numbunches*itrain+bunch_spacing*(bunch_bucket-ibunch)+"},
{"lineNum":" 1473","line":"                        ((*it)[ibunch].z_mean*wnz-bunch_z_mean);"},
{"lineNum":" 1474","line":"                        //    int iz=static_cast<int>(floor(sqrt((zji-z_coord[0])/(z_coord[1]-z_coord[0]))));"},
{"lineNum":" 1475","line":"                        int iz=get_zindex_for_wake(zji, delta_z, istart, zstart);"},
{"lineNum":" 1476","line":"                        if ((iz+1 < zpoints) && (iz>0)) {"},
{"lineNum":" 1477","line":"                            double  xwl=xw_lead[iz]+(zji-z_coord[iz])*(xw_lead[iz+1]-xw_lead[iz])/(z_coord[iz+1]-z_coord[iz]);"},
{"lineNum":" 1478","line":"                            double  xwt=xw_trail[iz]+(zji-z_coord[iz])*(xw_trail[iz+1]-xw_trail[iz])/(z_coord[iz+1]-z_coord[iz]);"},
{"lineNum":" 1479","line":"                            double  ywl=yw_lead[iz]+(zji-z_coord[iz])*(yw_lead[iz+1]-yw_lead[iz])/(z_coord[iz+1]-z_coord[iz]);"},
{"lineNum":" 1480","line":"                            double  ywt=yw_trail[iz]+(zji-z_coord[iz])*(yw_trail[iz+1]-yw_trail[iz])/(z_coord[iz+1]-z_coord[iz]);"},
{"lineNum":" 1481","line":"                            double  zw=z_wake[iz]+(zji-z_coord[iz])*(z_wake[iz+1]-z_wake[iz])/(z_coord[iz+1]-z_coord[iz]);"},
{"lineNum":" 1482","line":""},
{"lineNum":" 1483","line":"                            xwake_l +=  (*it)[ibunch].realnum*(*it)[ibunch].x_mean*wnx*xwl;"},
{"lineNum":" 1484","line":"                            xwake_t += (*it)[ibunch].realnum*xwt;"},
{"lineNum":" 1485","line":"                            ywake_l +=  (*it)[ibunch].realnum*(*it)[ibunch].y_mean*wny*ywl;"},
{"lineNum":" 1486","line":"                            ywake_t += (*it)[ibunch].realnum*ywt;"},
{"lineNum":" 1487","line":"                            zwake_0 += (*it)[ibunch].realnum*zw;"},
{"lineNum":" 1488","line":"                        }"},
{"lineNum":" 1489","line":"                    }//ibunch"},
{"lineNum":" 1490","line":"                } ////itrain"},
{"lineNum":" 1491","line":"            }  // full_machine"},
{"lineNum":" 1492","line":"      } //iturn"},
{"lineNum":" 1493","line":"      for (int i = 0; i <counts[rank] ; ++i){"},
{"lineNum":" 1494","line":"            xwake_leading_local[i] +=  xwake_l;"},
{"lineNum":" 1495","line":"            xwake_trailing_local[i] += xwake_t;"},
{"lineNum":" 1496","line":"            ywake_leading_local[i] +=  ywake_l;"},
{"lineNum":" 1497","line":"            ywake_trailing_local[i] += ywake_t ;"},
{"lineNum":" 1498","line":"            zwake0_local[i] += zwake_0;"},
{"lineNum":" 1499","line":"      }"},
{"lineNum":" 1500","line":"   }//registred_turns>1"},
{"lineNum":" 1501","line":"    t1 = simple_timer_show(t1, \"impedance_calculate_kicks: registred_turns loop   \");"},
{"lineNum":" 1502","line":""},
{"lineNum":" 1503","line":"     int error = MPI_Allgatherv(reinterpret_cast<void*>(xwake_leading_local.origin()),"},
{"lineNum":" 1504","line":"\t\t  counts[rank], MPI_DOUBLE,"},
{"lineNum":" 1505","line":"\t\t  reinterpret_cast<void*>(xwake_leading.origin()),"},
{"lineNum":" 1506","line":"\t\t\t\t\t  &counts[0], &offsets[0], MPI_DOUBLE, comm_sptr->get());"},
{"lineNum":" 1507","line":"      if (error != MPI_SUCCESS) {"},
{"lineNum":" 1508","line":"\t  throw std::runtime_error("},
{"lineNum":" 1509","line":"\t      \"MPI error in Impedance_calculate_kicks:MPI_Allgatherv xwake_leading\");"},
{"lineNum":" 1510","line":"      }"},
{"lineNum":" 1511","line":""},
{"lineNum":" 1512","line":""},
{"lineNum":" 1513","line":"     error = MPI_Allgatherv(reinterpret_cast<void*>(xwake_trailing_local.origin()),"},
{"lineNum":" 1514","line":"\t\t  counts[rank], MPI_DOUBLE,"},
{"lineNum":" 1515","line":"\t\t  reinterpret_cast<void*>(xwake_trailing.origin()),"},
{"lineNum":" 1516","line":"\t\t\t\t\t  &counts[0], &offsets[0], MPI_DOUBLE, comm_sptr->get());"},
{"lineNum":" 1517","line":"    if (error != MPI_SUCCESS) {"},
{"lineNum":" 1518","line":"\t  throw std::runtime_error("},
{"lineNum":" 1519","line":"\t      \"MPI error in Impedance_calculate_kicks:MPI_Allgatherv xwake_trailing\");"},
{"lineNum":" 1520","line":"     }"},
{"lineNum":" 1521","line":""},
{"lineNum":" 1522","line":"    error = MPI_Allgatherv(reinterpret_cast<void*>(ywake_leading_local.origin()),"},
{"lineNum":" 1523","line":"\t\t  counts[rank], MPI_DOUBLE,"},
{"lineNum":" 1524","line":"\t\t  reinterpret_cast<void*>(ywake_leading.origin()),"},
{"lineNum":" 1525","line":"\t\t\t\t\t  &counts[0], &offsets[0], MPI_DOUBLE, comm_sptr->get());"},
{"lineNum":" 1526","line":"    if (error != MPI_SUCCESS) {"},
{"lineNum":" 1527","line":"\t  throw std::runtime_error("},
{"lineNum":" 1528","line":"\t      \"MPI error in Impedance_calculate_kicks:MPI_Allgatherv ywake_leading\");"},
{"lineNum":" 1529","line":"     }"},
{"lineNum":" 1530","line":""},
{"lineNum":" 1531","line":""},
{"lineNum":" 1532","line":"    error = MPI_Allgatherv(reinterpret_cast<void*>(ywake_trailing_local.origin()),"},
{"lineNum":" 1533","line":"\t\t  counts[rank], MPI_DOUBLE,"},
{"lineNum":" 1534","line":"\t\t  reinterpret_cast<void*>(ywake_trailing.origin()),"},
{"lineNum":" 1535","line":"\t\t\t\t\t  &counts[0], &offsets[0], MPI_DOUBLE, comm_sptr->get());"},
{"lineNum":" 1536","line":"    if (error != MPI_SUCCESS) {"},
{"lineNum":" 1537","line":"\t  throw std::runtime_error("},
{"lineNum":" 1538","line":"\t      \"MPI error in Impedance_calculate_kicks:MPI_Allgatherv ywake_trailing\");"},
{"lineNum":" 1539","line":"     }"},
{"lineNum":" 1540","line":""},
{"lineNum":" 1541","line":"    error = MPI_Allgatherv(reinterpret_cast<void*>(zwake0_local.origin()),"},
{"lineNum":" 1542","line":"\t\t  counts[rank], MPI_DOUBLE,"},
{"lineNum":" 1543","line":"\t\t  reinterpret_cast<void*>(zwake0.origin()),"},
{"lineNum":" 1544","line":"\t\t\t\t\t  &counts[0], &offsets[0], MPI_DOUBLE, comm_sptr->get());"},
{"lineNum":" 1545","line":"    if (error != MPI_SUCCESS) {"},
{"lineNum":" 1546","line":"\t  throw std::runtime_error("},
{"lineNum":" 1547","line":"\t      \"MPI error in Impedance_calculate_kicks:MPI_Allgatherv zwake0\");"},
{"lineNum":" 1548","line":"     }"},
{"lineNum":" 1549","line":"    t1 = simple_timer_show(t1, \"impedance_calculate_kicks: mpi_allgather   \");"},
{"lineNum":" 1550","line":"}"},
{"lineNum":" 1551","line":""},
{"lineNum":" 1552","line":"void"},
{"lineNum":" 1553","line":"Impedance::apply_impedance_kick(Bunch & bunch, double wake_factor)"},
{"lineNum":" 1554","line":"{"},
{"lineNum":" 1555","line":""},
{"lineNum":" 1556","line":" MArray1i_ref const bin_partition(get_bin_partition());"},
{"lineNum":" 1557","line":" MArray1d_ref const  xwake_leading(get_xwake_leading());"},
{"lineNum":" 1558","line":" MArray1d_ref const xwake_trailing(get_xwake_trailing());"},
{"lineNum":" 1559","line":" MArray1d_ref const  ywake_leading(get_ywake_leading());"},
{"lineNum":" 1560","line":" MArray1d_ref const  ywake_trailing(get_ywake_trailing());"},
{"lineNum":" 1561","line":" MArray1d_ref const zwake0(get_zwake0());"},
{"lineNum":" 1562","line":""},
{"lineNum":" 1563","line":""},
{"lineNum":" 1564","line":" for (int part = 0; part < bunch.get_local_num(); ++part) {"},
{"lineNum":" 1565","line":"        double xkick=0., ykick=0., zkick=0.;"},
{"lineNum":" 1566","line":"        int bin=bin_partition[part];  // bin_partition(n) is the bin where you find the particle n"},
{"lineNum":" 1567","line":"//            if ((bin>=z_grid) || (bin<0))  { std::cout<<\"bin=\"<<bin<<\"z_grid=\"<<z_grid<<std::endl;"},
{"lineNum":" 1568","line":"//         throw"},
{"lineNum":" 1569","line":"//         std::runtime_error(\"something wrong with bining\");}"},
{"lineNum":" 1570","line":""},
{"lineNum":" 1571","line":"        xkick=xwake_leading[bin]+xwake_trailing[bin]*bunch.get_local_particles()[part][0];"},
{"lineNum":" 1572","line":"        ykick=ywake_leading[bin]+ywake_trailing[bin]*bunch.get_local_particles()[part][2];"},
{"lineNum":" 1573","line":"        zkick = zwake0[bin];"},
{"lineNum":" 1574","line":""},
{"lineNum":" 1575","line":""},
{"lineNum":" 1576","line":"        bunch.get_local_particles()[part][1] += wake_factor*xkick;"},
{"lineNum":" 1577","line":"        bunch.get_local_particles()[part][3]  += wake_factor*ykick;"},
{"lineNum":" 1578","line":"        bunch.get_local_particles()[part][5]  += wake_factor*zkick;"},
{"lineNum":" 1579","line":""},
{"lineNum":" 1580","line":""},
{"lineNum":" 1581","line":"    }"},
{"lineNum":" 1582","line":"}"},
{"lineNum":" 1583","line":""},
{"lineNum":" 1584","line":""},
{"lineNum":" 1585","line":""},
{"lineNum":" 1586","line":""},
{"lineNum":" 1587","line":""},
{"lineNum":" 1588","line":""},
{"lineNum":" 1589","line":""},
{"lineNum":" 1590","line":""},
{"lineNum":" 1591","line":"void"},
{"lineNum":" 1592","line":"Impedance::apply(Bunch & bunch, double time_step, Step & step, int verbosity, Logger & logger)"},
{"lineNum":" 1593","line":"{"},
{"lineNum":" 1594","line":"   double t;"},
{"lineNum":" 1595","line":"   t = simple_timer_current();"},
{"lineNum":" 1596","line":"   bunch.convert_to_state(Bunch::fixed_t_lab);"},
{"lineNum":" 1597","line":"   calculate_moments_and_partitions(bunch);"},
{"lineNum":" 1598","line":"   t = simple_timer_show(t, \"impedance_apply:  calculate_moments_and_partitions \");"},
{"lineNum":" 1599","line":""},
{"lineNum":" 1600","line":"//       std::ofstream file;"},
{"lineNum":" 1601","line":"//       file.open(\"zdensity.dat\");"},
{"lineNum":" 1602","line":"// \tfor (int i = 0; i < z_grid; ++i){"},
{"lineNum":" 1603","line":"// \tfile<<i<<\"   \"<<(*zdensity_sptr)[i]<<\"   \"<<(*xmom_sptr)[i]<<\"   \"<<(*ymom_sptr)[i]<<std::endl;"},
{"lineNum":" 1604","line":"// \t}"},
{"lineNum":" 1605","line":"//       file.close();"},
{"lineNum":" 1606","line":"//       abort();"},
{"lineNum":" 1607","line":"   N_factor=bunch.get_real_num()/bunch.get_total_num();"},
{"lineNum":" 1608","line":"   bunch_z_mean=Core_diagnostics::calculate_z_mean(bunch);"},
{"lineNum":" 1609","line":""},
{"lineNum":" 1610","line":"   t = simple_timer_show(t, \"impedance_apply: calculate_z_mean \");"},
{"lineNum":" 1611","line":"   bunch_bucket=bunch.get_bucket_index();"},
{"lineNum":" 1612","line":"   calculate_kicks(bunch.get_comm_sptr());"},
{"lineNum":" 1613","line":"   t = simple_timer_show(t, \"impedance_apply: calculate_kicks \");"},
{"lineNum":" 1614","line":"   double gamma = bunch.get_reference_particle().get_gamma();"},
{"lineNum":" 1615","line":"   double beta= bunch.get_reference_particle().get_beta();"},
{"lineNum":" 1616","line":"   double w_f=get_wake_factor()*time_step/(gamma*beta);"},
{"lineNum":" 1617","line":""},
{"lineNum":" 1618","line":""},
{"lineNum":" 1619","line":"   apply_impedance_kick(bunch,  w_f);"},
{"lineNum":" 1620","line":"   t = simple_timer_show(t, \"impedance apply:apply_impedance_kick \");"},
{"lineNum":" 1621","line":""},
{"lineNum":" 1622","line":"}"},
{"lineNum":" 1623","line":""},
{"lineNum":" 1624","line":""},
{"lineNum":" 1625","line":""},
{"lineNum":" 1626","line":"void"},
{"lineNum":" 1627","line":"Impedance::store_bunches_data(Bunch_train & bunch_train)"},
{"lineNum":" 1628","line":"{"},
{"lineNum":" 1629","line":""},
{"lineNum":" 1630","line":"    Bunches bunches(bunch_train.get_bunches());"},
{"lineNum":" 1631","line":"    size_t num_bunches = bunch_train.get_size();"},
{"lineNum":" 1632","line":"    Bunch_properties bi;"},
{"lineNum":" 1633","line":"    std::vector<Bunch_properties> vbi_local(0);"},
{"lineNum":" 1634","line":"    std::vector<Bunch_properties> vbi(num_bunches);"},
{"lineNum":" 1635","line":"    for (int i = 0; i < num_bunches; ++i){"},
{"lineNum":" 1636","line":"        if (bunches.at(i)->get_comm().has_this_rank()) {"},
{"lineNum":" 1637","line":"\t    Bunch_sptr bunch_sptr=bunches.at(i);"},
{"lineNum":" 1638","line":"            bunch_sptr->convert_to_state(Bunch::fixed_t_lab);"},
{"lineNum":" 1639","line":"\t    MArray1d bunch_means=Core_diagnostics::calculate_mean(*bunch_sptr);"},
{"lineNum":" 1640","line":"\t    if (full_machine)"},
{"lineNum":" 1641","line":"\t      if  (bunch_sptr->get_bucket_index() != i)"},
{"lineNum":" 1642","line":"\t                   throw std::runtime_error(\"for full_machine the buckets have to be occupied in order\");"},
{"lineNum":" 1643","line":"        bi.x_mean=bunch_means[0];"},
{"lineNum":" 1644","line":"\t    bi.y_mean=bunch_means[2];"},
{"lineNum":" 1645","line":"\t    bi.z_mean=bunch_means[4];"},
{"lineNum":" 1646","line":"\t    bi.realnum=bunch_sptr->get_real_num();"},
{"lineNum":" 1647","line":"\t    bi.bucket_index=bunch_sptr->get_bucket_index();"},
{"lineNum":" 1648","line":"\t    if  (bunch_sptr->get_comm().get_rank()==0)   vbi_local.push_back(bi);"},
{"lineNum":" 1649","line":"                     ///only the rank 0 of every communicator sends the bi to all others"},
{"lineNum":" 1650","line":"        }"},
{"lineNum":" 1651","line":"    }"},
{"lineNum":" 1652","line":""},
{"lineNum":" 1653","line":""},
{"lineNum":" 1654","line":""},
{"lineNum":" 1655","line":"    MPI_Datatype Bunch_properties_type;"},
{"lineNum":" 1656","line":"    MPI_Aint lb, extent;"},
{"lineNum":" 1657","line":"    MPI_Type_get_extent(MPI_DOUBLE, &lb, &extent);"},
{"lineNum":" 1658","line":"    MPI_Datatype type[2] = {MPI_DOUBLE, MPI_INT};"},
{"lineNum":" 1659","line":"    int blocklen[2] = {4,1};"},
{"lineNum":" 1660","line":"    MPI_Aint disp[2];"},
{"lineNum":" 1661","line":"    disp[0]=0;"},
{"lineNum":" 1662","line":"    disp[1]=4*extent;"},
{"lineNum":" 1663","line":"    MPI_Type_create_struct(2,blocklen, disp, type, &Bunch_properties_type);"},
{"lineNum":" 1664","line":"    MPI_Type_commit(&Bunch_properties_type);"},
{"lineNum":" 1665","line":""},
{"lineNum":" 1666","line":"    int size_parent_comm=bunch_train.get_parent_comm_sptr()->get_size();"},
{"lineNum":" 1667","line":"    std::vector<int > counts(bunch_train.get_proc_counts_for_impedance());"},
{"lineNum":" 1668","line":"    std::vector<int > offsets(bunch_train.get_proc_offsets_for_impedance());"},
{"lineNum":" 1669","line":""},
{"lineNum":" 1670","line":""},
{"lineNum":" 1671","line":"    int error = MPI_Allgatherv(reinterpret_cast<void*>(&vbi_local[0]), vbi_local.size(), Bunch_properties_type,"},
{"lineNum":" 1672","line":"\t\t\t\t    reinterpret_cast<void*>(&vbi[0]), &counts[0], &offsets[0],"},
{"lineNum":" 1673","line":"\t\t\t\t    Bunch_properties_type,bunch_train.get_parent_comm_sptr()->get() );"},
{"lineNum":" 1674","line":"    if (error != MPI_SUCCESS) {"},
{"lineNum":" 1675","line":"      throw std::runtime_error(\"Impedance::store_bunches_data: MPI error in MPI_Allgatherv\");"},
{"lineNum":" 1676","line":"    }"},
{"lineNum":" 1677","line":""},
{"lineNum":" 1678","line":"    MPI_Type_free(&Bunch_properties_type);"},
{"lineNum":" 1679","line":"    stored_vbunches.push_front(vbi);"},
{"lineNum":" 1680","line":"    if (stored_vbunches.size()>nstored_turns) stored_vbunches.pop_back();"},
{"lineNum":" 1681","line":""},
{"lineNum":" 1682","line":""},
{"lineNum":" 1683","line":"}"},
{"lineNum":" 1684","line":""},
{"lineNum":" 1685","line":""},
{"lineNum":" 1686","line":"void"},
{"lineNum":" 1687","line":"Impedance::apply(Bunch_train & bunch_train, double time_step, Step & step,"},
{"lineNum":" 1688","line":"        int verbosity, Train_diagnosticss const& per_operation_diagnosticss,"},
{"lineNum":" 1689","line":"        Logger & logger)"},
{"lineNum":" 1690","line":"{"},
{"lineNum":" 1691","line":"    store_bunches_data(bunch_train);"},
{"lineNum":" 1692","line":"    Bunches bunches(bunch_train.get_bunches());"},
{"lineNum":" 1693","line":"    size_t num_bunches = bunch_train.get_size();"},
{"lineNum":" 1694","line":"    for (int i = 0; i < num_bunches; ++i)"},
{"lineNum":" 1695","line":"        if (bunches.at(i)->get_comm().has_this_rank()) {"},
{"lineNum":" 1696","line":"            apply(*bunches.at(i), time_step, step, verbosity,logger);"},
{"lineNum":" 1697","line":"        }"},
{"lineNum":" 1698","line":"}"},
{"lineNum":" 1699","line":""},
{"lineNum":" 1700","line":"void"},
{"lineNum":" 1701","line":"Impedance::apply(Bunch_train & bunch_train, double time_step, Step & step, int verbosity,"},
{"lineNum":" 1702","line":"            Train_diagnosticss const& per_operation_train_diagnosticss,"},
{"lineNum":" 1703","line":"            Propagate_actions * propagate_actions_ptr, Stepper & stepper, int step_count,  int turn,"},
{"lineNum":" 1704","line":"            Logger & logger)"},
{"lineNum":" 1705","line":"{"},
{"lineNum":" 1706","line":""},
{"lineNum":" 1707","line":"      apply(bunch_train,time_step,step,verbosity,per_operation_train_diagnosticss,logger);"},
{"lineNum":" 1708","line":"}"},
{"lineNum":" 1709","line":""},
{"lineNum":" 1710","line":""},
{"lineNum":" 1711","line":"Impedance::Impedance()"},
{"lineNum":" 1712","line":"{"},
{"lineNum":" 1713","line":"}"},
{"lineNum":" 1714","line":""},
{"lineNum":" 1715","line":""},
{"lineNum":" 1716","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 221, "covered" : 0,};
var merged_data = [];
