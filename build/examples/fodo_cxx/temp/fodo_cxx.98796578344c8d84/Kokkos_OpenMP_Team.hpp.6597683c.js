var data = {lines:[
{"lineNum":"    1","line":"/*"},
{"lineNum":"    2","line":"//@HEADER"},
{"lineNum":"    3","line":"// ************************************************************************"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"//                        Kokkos v. 3.0"},
{"lineNum":"    6","line":"//       Copyright (2020) National Technology & Engineering"},
{"lineNum":"    7","line":"//               Solutions of Sandia, LLC (NTESS)."},
{"lineNum":"    8","line":"//"},
{"lineNum":"    9","line":"// Under the terms of Contract DE-NA0003525 with NTESS,"},
{"lineNum":"   10","line":"// the U.S. Government retains certain rights in this software."},
{"lineNum":"   11","line":"//"},
{"lineNum":"   12","line":"// Redistribution and use in source and binary forms, with or without"},
{"lineNum":"   13","line":"// modification, are permitted provided that the following conditions are"},
{"lineNum":"   14","line":"// met:"},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"// 1. Redistributions of source code must retain the above copyright"},
{"lineNum":"   17","line":"// notice, this list of conditions and the following disclaimer."},
{"lineNum":"   18","line":"//"},
{"lineNum":"   19","line":"// 2. Redistributions in binary form must reproduce the above copyright"},
{"lineNum":"   20","line":"// notice, this list of conditions and the following disclaimer in the"},
{"lineNum":"   21","line":"// documentation and/or other materials provided with the distribution."},
{"lineNum":"   22","line":"//"},
{"lineNum":"   23","line":"// 3. Neither the name of the Corporation nor the names of the"},
{"lineNum":"   24","line":"// contributors may be used to endorse or promote products derived from"},
{"lineNum":"   25","line":"// this software without specific prior written permission."},
{"lineNum":"   26","line":"//"},
{"lineNum":"   27","line":"// THIS SOFTWARE IS PROVIDED BY NTESS \"AS IS\" AND ANY"},
{"lineNum":"   28","line":"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"},
{"lineNum":"   29","line":"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR"},
{"lineNum":"   30","line":"// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NTESS OR THE"},
{"lineNum":"   31","line":"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,"},
{"lineNum":"   32","line":"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,"},
{"lineNum":"   33","line":"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR"},
{"lineNum":"   34","line":"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF"},
{"lineNum":"   35","line":"// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING"},
{"lineNum":"   36","line":"// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"},
{"lineNum":"   37","line":"// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   38","line":"//"},
{"lineNum":"   39","line":"// Questions? Contact Christian R. Trott (crtrott@sandia.gov)"},
{"lineNum":"   40","line":"//"},
{"lineNum":"   41","line":"// ************************************************************************"},
{"lineNum":"   42","line":"//@HEADER"},
{"lineNum":"   43","line":"*/"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"#ifndef KOKKOS_OPENMP_TEAM_HPP"},
{"lineNum":"   46","line":"#define KOKKOS_OPENMP_TEAM_HPP"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"#include <Kokkos_Macros.hpp>"},
{"lineNum":"   49","line":"#if defined(KOKKOS_ENABLE_OPENMP)"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"#include <OpenMP/Kokkos_OpenMP_Exec.hpp>"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"namespace Kokkos {"},
{"lineNum":"   54","line":"namespace Impl {"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"template <class... Properties>"},
{"lineNum":"   57","line":"class TeamPolicyInternal<Kokkos::OpenMP, Properties...>"},
{"lineNum":"   58","line":"    : public PolicyTraits<Properties...> {"},
{"lineNum":"   59","line":" public:"},
{"lineNum":"   60","line":"  //! Tag this class as a kokkos execution policy"},
{"lineNum":"   61","line":"  using execution_policy = TeamPolicyInternal<OpenMP, Properties...>;"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"  using traits = PolicyTraits<Properties...>;"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"  const typename traits::execution_space& space() const {"},
{"lineNum":"   66","line":"    static typename traits::execution_space m_space;"},
{"lineNum":"   67","line":"    return m_space;"},
{"lineNum":"   68","line":"  }"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"  template <class ExecSpace, class... OtherProperties>"},
{"lineNum":"   71","line":"  friend class TeamPolicyInternal;"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"  template <class... OtherProperties>"},
{"lineNum":"   74","line":"  TeamPolicyInternal("},
{"lineNum":"   75","line":"      const TeamPolicyInternal<Kokkos::OpenMP, OtherProperties...>& p) {"},
{"lineNum":"   76","line":"    m_league_size            = p.m_league_size;"},
{"lineNum":"   77","line":"    m_team_size              = p.m_team_size;"},
{"lineNum":"   78","line":"    m_team_alloc             = p.m_team_alloc;"},
{"lineNum":"   79","line":"    m_team_iter              = p.m_team_iter;"},
{"lineNum":"   80","line":"    m_team_scratch_size[0]   = p.m_team_scratch_size[0];"},
{"lineNum":"   81","line":"    m_thread_scratch_size[0] = p.m_thread_scratch_size[0];"},
{"lineNum":"   82","line":"    m_team_scratch_size[1]   = p.m_team_scratch_size[1];"},
{"lineNum":"   83","line":"    m_thread_scratch_size[1] = p.m_thread_scratch_size[1];"},
{"lineNum":"   84","line":"    m_chunk_size             = p.m_chunk_size;"},
{"lineNum":"   85","line":"    m_tune_team              = p.m_tune_team;"},
{"lineNum":"   86","line":"    m_tune_vector            = p.m_tune_vector;"},
{"lineNum":"   87","line":"  }"},
{"lineNum":"   88","line":"  //----------------------------------------"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"  template <class FunctorType>"},
{"lineNum":"   91","line":"  int team_size_max(const FunctorType&, const ParallelForTag&) const {"},
{"lineNum":"   92","line":"    int pool_size          = traits::execution_space::impl_thread_pool_size(1);"},
{"lineNum":"   93","line":"    int max_host_team_size = Impl::HostThreadTeamData::max_team_members;"},
{"lineNum":"   94","line":"    return pool_size < max_host_team_size ? pool_size : max_host_team_size;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   95","line":"  }"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"  int impl_vector_length() const { return 1; }"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"  template <class FunctorType>"},
{"lineNum":"  100","line":"  int team_size_max(const FunctorType&, const ParallelReduceTag&) const {"},
{"lineNum":"  101","line":"    int pool_size          = traits::execution_space::impl_thread_pool_size(1);"},
{"lineNum":"  102","line":"    int max_host_team_size = Impl::HostThreadTeamData::max_team_members;"},
{"lineNum":"  103","line":"    return pool_size < max_host_team_size ? pool_size : max_host_team_size;"},
{"lineNum":"  104","line":"  }"},
{"lineNum":"  105","line":"  template <class FunctorType, class ReducerType>"},
{"lineNum":"  106","line":"  inline int team_size_max(const FunctorType& f, const ReducerType&,"},
{"lineNum":"  107","line":"                           const ParallelReduceTag& t) const {"},
{"lineNum":"  108","line":"    return team_size_max(f, t);"},
{"lineNum":"  109","line":"  }"},
{"lineNum":"  110","line":"  template <class FunctorType>"},
{"lineNum":"  111","line":"  int team_size_recommended(const FunctorType&, const ParallelForTag&) const {"},
{"lineNum":"  112","line":"    return traits::execution_space::impl_thread_pool_size(2);"},
{"lineNum":"  113","line":"  }"},
{"lineNum":"  114","line":"  template <class FunctorType>"},
{"lineNum":"  115","line":"  int team_size_recommended(const FunctorType&,"},
{"lineNum":"  116","line":"                            const ParallelReduceTag&) const {"},
{"lineNum":"  117","line":"    return traits::execution_space::impl_thread_pool_size(2);"},
{"lineNum":"  118","line":"  }"},
{"lineNum":"  119","line":"  template <class FunctorType, class ReducerType>"},
{"lineNum":"  120","line":"  inline int team_size_recommended(const FunctorType& f, const ReducerType&,"},
{"lineNum":"  121","line":"                                   const ParallelReduceTag& t) const {"},
{"lineNum":"  122","line":"    return team_size_recommended(f, t);"},
{"lineNum":"  123","line":"  }"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"  inline static int vector_length_max() {"},
{"lineNum":"  126","line":"    return 1024;"},
{"lineNum":"  127","line":"  }  // Use arbitrary large number, is meant as a vectorizable length"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"  inline static int scratch_size_max(int level) {"},
{"lineNum":"  130","line":"    return (level == 0 ? 1024 * 32 :  // Roughly L1 size"},
{"lineNum":"  131","line":"                20 * 1024 * 1024);    // Limit to keep compatibility with CUDA"},
{"lineNum":"  132","line":"  }"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"  //----------------------------------------"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":" private:"},
{"lineNum":"  137","line":"  int m_league_size;"},
{"lineNum":"  138","line":"  int m_team_size;"},
{"lineNum":"  139","line":"  int m_team_alloc;"},
{"lineNum":"  140","line":"  int m_team_iter;"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"  size_t m_team_scratch_size[2];"},
{"lineNum":"  143","line":"  size_t m_thread_scratch_size[2];"},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"  int m_chunk_size;"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"  bool m_tune_team;"},
{"lineNum":"  148","line":"  bool m_tune_vector;"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"  inline void init(const int league_size_request, const int team_size_request) {"},
{"lineNum":"  151","line":"    const int pool_size  = traits::execution_space::impl_thread_pool_size(0);"},
{"lineNum":"  152","line":"    const int team_grain = traits::execution_space::impl_thread_pool_size(2);"},
{"lineNum":"  153","line":"    const int max_host_team_size = Impl::HostThreadTeamData::max_team_members;"},
{"lineNum":"  154","line":"    const int team_max ="},
{"lineNum":"  155","line":"        ((pool_size < max_host_team_size) ? pool_size : max_host_team_size);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"    m_league_size = league_size_request;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"    if (team_size_request > team_max)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  160","line":"      Kokkos::abort(\"Kokkos::abort: Requested Team Size is too large!\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  161","line":"    m_team_size = team_size_request < team_max ? team_size_request : team_max;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"    // Round team size up to a multiple of \'team_gain\'"},
{"lineNum":"  164","line":"    const int team_size_grain ="},
{"lineNum":"  165","line":"        team_grain * ((m_team_size + team_grain - 1) / team_grain);"},
{"lineNum":"  166","line":"    const int team_count = pool_size / team_size_grain;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"    // Constraint : pool_size = m_team_alloc * team_count"},
{"lineNum":"  169","line":"    m_team_alloc = pool_size / team_count;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"    // Maxumum number of iterations each team will take:"},
{"lineNum":"  172","line":"    m_team_iter = (m_league_size + team_count - 1) / team_count;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"    set_auto_chunk_size();"},
{"lineNum":"  175","line":"  }"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":" public:"},
{"lineNum":"  178","line":"  inline int team_size() const { return m_team_size; }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  179","line":"  inline int league_size() const { return m_league_size; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  180","line":"  inline bool impl_auto_team_size() const { return m_tune_team; }"},
{"lineNum":"  181","line":"  inline bool impl_auto_vector_length() const { return m_tune_vector; }"},
{"lineNum":"  182","line":"  inline void impl_set_team_size(size_t new_team_size) {"},
{"lineNum":"  183","line":"    m_team_size = new_team_size;"},
{"lineNum":"  184","line":"  }"},
{"lineNum":"  185","line":"  inline void impl_set_vector_length(size_t) {}"},
{"lineNum":"  186","line":"  inline size_t scratch_size(const int& level, int team_size_ = -1) const {"},
{"lineNum":"  187","line":"    if (team_size_ < 0) team_size_ = m_team_size;"},
{"lineNum":"  188","line":"    return m_team_scratch_size[level] +","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  189","line":"           team_size_ * m_thread_scratch_size[level];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  190","line":"  }"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"  /** \\brief  Specify league size, request team size */"},
{"lineNum":"  193","line":"  TeamPolicyInternal(const typename traits::execution_space&,"},
{"lineNum":"  194","line":"                     int league_size_request, int team_size_request,"},
{"lineNum":"  195","line":"                     int /* vector_length_request */ = 1)"},
{"lineNum":"  196","line":"      : m_team_scratch_size{0, 0},"},
{"lineNum":"  197","line":"        m_thread_scratch_size{0, 0},"},
{"lineNum":"  198","line":"        m_chunk_size(0),"},
{"lineNum":"  199","line":"        m_tune_team(false),"},
{"lineNum":"  200","line":"        m_tune_vector(false) {"},
{"lineNum":"  201","line":"    init(league_size_request, team_size_request);"},
{"lineNum":"  202","line":"  }"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"  TeamPolicyInternal(const typename traits::execution_space&,"},
{"lineNum":"  205","line":"                     int league_size_request,"},
{"lineNum":"  206","line":"                     const Kokkos::AUTO_t& /* team_size_request */"},
{"lineNum":"  207","line":"                     ,"},
{"lineNum":"  208","line":"                     int /* vector_length_request */ = 1)"},
{"lineNum":"  209","line":"      : m_team_scratch_size{0, 0},"},
{"lineNum":"  210","line":"        m_thread_scratch_size{0, 0},"},
{"lineNum":"  211","line":"        m_chunk_size(0),"},
{"lineNum":"  212","line":"        m_tune_team(true),"},
{"lineNum":"  213","line":"        m_tune_vector(false) {"},
{"lineNum":"  214","line":"    init(league_size_request,"},
{"lineNum":"  215","line":"         traits::execution_space::impl_thread_pool_size(2));"},
{"lineNum":"  216","line":"  }"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"  TeamPolicyInternal(const typename traits::execution_space&,"},
{"lineNum":"  219","line":"                     int league_size_request,"},
{"lineNum":"  220","line":"                     const Kokkos::AUTO_t& /* team_size_request */"},
{"lineNum":"  221","line":"                     ,"},
{"lineNum":"  222","line":"                     const Kokkos::AUTO_t& /* vector_length_request */)"},
{"lineNum":"  223","line":"      : m_team_scratch_size{0, 0},"},
{"lineNum":"  224","line":"        m_thread_scratch_size{0, 0},"},
{"lineNum":"  225","line":"        m_chunk_size(0),"},
{"lineNum":"  226","line":"        m_tune_team(true),"},
{"lineNum":"  227","line":"        m_tune_vector(true) {"},
{"lineNum":"  228","line":"    init(league_size_request,"},
{"lineNum":"  229","line":"         traits::execution_space::impl_thread_pool_size(2));"},
{"lineNum":"  230","line":"  }"},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"  TeamPolicyInternal(const typename traits::execution_space&,"},
{"lineNum":"  233","line":"                     int league_size_request, const int team_size_request,"},
{"lineNum":"  234","line":"                     const Kokkos::AUTO_t& /* vector_length_request */)"},
{"lineNum":"  235","line":"      : m_team_scratch_size{0, 0},"},
{"lineNum":"  236","line":"        m_thread_scratch_size{0, 0},"},
{"lineNum":"  237","line":"        m_chunk_size(0),"},
{"lineNum":"  238","line":"        m_tune_team(false),"},
{"lineNum":"  239","line":"        m_tune_vector(true) {"},
{"lineNum":"  240","line":"    init(league_size_request, team_size_request);"},
{"lineNum":"  241","line":"  }"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"  TeamPolicyInternal(int league_size_request, int team_size_request,"},
{"lineNum":"  244","line":"                     int /* vector_length_request */ = 1)"},
{"lineNum":"  245","line":"      : m_team_scratch_size{0, 0},","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  246","line":"        m_thread_scratch_size{0, 0},"},
{"lineNum":"  247","line":"        m_chunk_size(0),"},
{"lineNum":"  248","line":"        m_tune_team(false),"},
{"lineNum":"  249","line":"        m_tune_vector(false) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  250","line":"    init(league_size_request, team_size_request);"},
{"lineNum":"  251","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  252","line":""},
{"lineNum":"  253","line":"  TeamPolicyInternal(int league_size_request,"},
{"lineNum":"  254","line":"                     const Kokkos::AUTO_t& /* team_size_request */"},
{"lineNum":"  255","line":"                     ,"},
{"lineNum":"  256","line":"                     int /* vector_length_request */ = 1)"},
{"lineNum":"  257","line":"      : m_team_scratch_size{0, 0},"},
{"lineNum":"  258","line":"        m_thread_scratch_size{0, 0},"},
{"lineNum":"  259","line":"        m_chunk_size(0),"},
{"lineNum":"  260","line":"        m_tune_team(true),"},
{"lineNum":"  261","line":"        m_tune_vector(false) {"},
{"lineNum":"  262","line":"    init(league_size_request,"},
{"lineNum":"  263","line":"         traits::execution_space::impl_thread_pool_size(2));"},
{"lineNum":"  264","line":"  }"},
{"lineNum":"  265","line":""},
{"lineNum":"  266","line":"  TeamPolicyInternal(int league_size_request,"},
{"lineNum":"  267","line":"                     const Kokkos::AUTO_t& /* team_size_request */"},
{"lineNum":"  268","line":"                     ,"},
{"lineNum":"  269","line":"                     const Kokkos::AUTO_t& /* vector_length_request */)"},
{"lineNum":"  270","line":"      : m_team_scratch_size{0, 0},"},
{"lineNum":"  271","line":"        m_thread_scratch_size{0, 0},"},
{"lineNum":"  272","line":"        m_chunk_size(0),"},
{"lineNum":"  273","line":"        m_tune_team(true),"},
{"lineNum":"  274","line":"        m_tune_vector(true) {"},
{"lineNum":"  275","line":"    init(league_size_request,"},
{"lineNum":"  276","line":"         traits::execution_space::impl_thread_pool_size(2));"},
{"lineNum":"  277","line":"  }"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"  TeamPolicyInternal(int league_size_request, int team_size_request,"},
{"lineNum":"  280","line":"                     const Kokkos::AUTO_t& /* vector_length_request */)"},
{"lineNum":"  281","line":"      : m_team_scratch_size{0, 0},"},
{"lineNum":"  282","line":"        m_thread_scratch_size{0, 0},"},
{"lineNum":"  283","line":"        m_chunk_size(0),"},
{"lineNum":"  284","line":"        m_tune_team(true),"},
{"lineNum":"  285","line":"        m_tune_vector(true) {"},
{"lineNum":"  286","line":"    init(league_size_request, team_size_request);"},
{"lineNum":"  287","line":"  }"},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"  inline int team_alloc() const { return m_team_alloc; }"},
{"lineNum":"  290","line":"  inline int team_iter() const { return m_team_iter; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"  inline int chunk_size() const { return m_chunk_size; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"  /** \\brief set chunk_size to a discrete value*/"},
{"lineNum":"  295","line":"  inline TeamPolicyInternal& set_chunk_size("},
{"lineNum":"  296","line":"      typename traits::index_type chunk_size_) {"},
{"lineNum":"  297","line":"    m_chunk_size = chunk_size_;"},
{"lineNum":"  298","line":"    return *this;"},
{"lineNum":"  299","line":"  }"},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"  /** \\brief set per team scratch size for a specific level of the scratch"},
{"lineNum":"  302","line":"   * hierarchy */"},
{"lineNum":"  303","line":"  inline TeamPolicyInternal& set_scratch_size(const int& level,"},
{"lineNum":"  304","line":"                                              const PerTeamValue& per_team) {"},
{"lineNum":"  305","line":"    m_team_scratch_size[level] = per_team.value;"},
{"lineNum":"  306","line":"    return *this;"},
{"lineNum":"  307","line":"  }"},
{"lineNum":"  308","line":""},
{"lineNum":"  309","line":"  /** \\brief set per thread scratch size for a specific level of the scratch"},
{"lineNum":"  310","line":"   * hierarchy */"},
{"lineNum":"  311","line":"  inline TeamPolicyInternal& set_scratch_size("},
{"lineNum":"  312","line":"      const int& level, const PerThreadValue& per_thread) {"},
{"lineNum":"  313","line":"    m_thread_scratch_size[level] = per_thread.value;"},
{"lineNum":"  314","line":"    return *this;"},
{"lineNum":"  315","line":"  }"},
{"lineNum":"  316","line":""},
{"lineNum":"  317","line":"  /** \\brief set per thread and per team scratch size for a specific level of"},
{"lineNum":"  318","line":"   * the scratch hierarchy */"},
{"lineNum":"  319","line":"  inline TeamPolicyInternal& set_scratch_size("},
{"lineNum":"  320","line":"      const int& level, const PerTeamValue& per_team,"},
{"lineNum":"  321","line":"      const PerThreadValue& per_thread) {"},
{"lineNum":"  322","line":"    m_team_scratch_size[level]   = per_team.value;"},
{"lineNum":"  323","line":"    m_thread_scratch_size[level] = per_thread.value;"},
{"lineNum":"  324","line":"    return *this;"},
{"lineNum":"  325","line":"  }"},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":" private:"},
{"lineNum":"  328","line":"  /** \\brief finalize chunk_size if it was set to AUTO*/"},
{"lineNum":"  329","line":"  inline void set_auto_chunk_size() {"},
{"lineNum":"  330","line":"    int concurrency ="},
{"lineNum":"  331","line":"        traits::execution_space::impl_thread_pool_size(0) / m_team_alloc;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  332","line":"    if (concurrency == 0) concurrency = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  333","line":""},
{"lineNum":"  334","line":"    if (m_chunk_size > 0) {"},
{"lineNum":"  335","line":"      if (!Impl::is_integral_power_of_two(m_chunk_size))"},
{"lineNum":"  336","line":"        Kokkos::abort(\"TeamPolicy blocking granularity must be power of two\");"},
{"lineNum":"  337","line":"    }"},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"    int new_chunk_size = 1;"},
{"lineNum":"  340","line":"    while (new_chunk_size * 100 * concurrency < m_league_size)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  341","line":"      new_chunk_size *= 2;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  342","line":"    if (new_chunk_size < 128) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  343","line":"      new_chunk_size = 1;"},
{"lineNum":"  344","line":"      while ((new_chunk_size * 40 * concurrency < m_league_size) &&","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  345","line":"             (new_chunk_size < 128))"},
{"lineNum":"  346","line":"        new_chunk_size *= 2;"},
{"lineNum":"  347","line":"    }"},
{"lineNum":"  348","line":"    m_chunk_size = new_chunk_size;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  349","line":"  }"},
{"lineNum":"  350","line":""},
{"lineNum":"  351","line":" public:"},
{"lineNum":"  352","line":"  using member_type = Impl::HostThreadTeamMember<Kokkos::OpenMP>;"},
{"lineNum":"  353","line":"};"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"}  // namespace Impl"},
{"lineNum":"  356","line":"}  // namespace Kokkos"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"#endif"},
{"lineNum":"  359","line":"#endif /* KOKKOS_OPENMP_TEAM_HPP */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 25, "covered" : 0,};
var merged_data = [];
