var data = {lines:[
{"lineNum":"    1","line":"/*"},
{"lineNum":"    2","line":"//@HEADER"},
{"lineNum":"    3","line":"// ************************************************************************"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"//                        Kokkos v. 3.0"},
{"lineNum":"    6","line":"//       Copyright (2020) National Technology & Engineering"},
{"lineNum":"    7","line":"//               Solutions of Sandia, LLC (NTESS)."},
{"lineNum":"    8","line":"//"},
{"lineNum":"    9","line":"// Under the terms of Contract DE-NA0003525 with NTESS,"},
{"lineNum":"   10","line":"// the U.S. Government retains certain rights in this software."},
{"lineNum":"   11","line":"//"},
{"lineNum":"   12","line":"// Redistribution and use in source and binary forms, with or without"},
{"lineNum":"   13","line":"// modification, are permitted provided that the following conditions are"},
{"lineNum":"   14","line":"// met:"},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"// 1. Redistributions of source code must retain the above copyright"},
{"lineNum":"   17","line":"// notice, this list of conditions and the following disclaimer."},
{"lineNum":"   18","line":"//"},
{"lineNum":"   19","line":"// 2. Redistributions in binary form must reproduce the above copyright"},
{"lineNum":"   20","line":"// notice, this list of conditions and the following disclaimer in the"},
{"lineNum":"   21","line":"// documentation and/or other materials provided with the distribution."},
{"lineNum":"   22","line":"//"},
{"lineNum":"   23","line":"// 3. Neither the name of the Corporation nor the names of the"},
{"lineNum":"   24","line":"// contributors may be used to endorse or promote products derived from"},
{"lineNum":"   25","line":"// this software without specific prior written permission."},
{"lineNum":"   26","line":"//"},
{"lineNum":"   27","line":"// THIS SOFTWARE IS PROVIDED BY NTESS \"AS IS\" AND ANY"},
{"lineNum":"   28","line":"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"},
{"lineNum":"   29","line":"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR"},
{"lineNum":"   30","line":"// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NTESS OR THE"},
{"lineNum":"   31","line":"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,"},
{"lineNum":"   32","line":"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,"},
{"lineNum":"   33","line":"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR"},
{"lineNum":"   34","line":"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF"},
{"lineNum":"   35","line":"// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING"},
{"lineNum":"   36","line":"// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"},
{"lineNum":"   37","line":"// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   38","line":"//"},
{"lineNum":"   39","line":"// Questions? Contact Christian R. Trott (crtrott@sandia.gov)"},
{"lineNum":"   40","line":"//"},
{"lineNum":"   41","line":"// ************************************************************************"},
{"lineNum":"   42","line":"//@HEADER"},
{"lineNum":"   43","line":"*/"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"#ifndef KOKKOS_SHARED_ALLOC_HPP"},
{"lineNum":"   46","line":"#define KOKKOS_SHARED_ALLOC_HPP"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"#include <Kokkos_Macros.hpp>"},
{"lineNum":"   49","line":"#include <Kokkos_Core_fwd.hpp>"},
{"lineNum":"   50","line":"#include <impl/Kokkos_Error.hpp>  // Impl::throw_runtime_exception"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"#include <cstdint>"},
{"lineNum":"   53","line":"#include <string>"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"#if defined(KOKKOS_ENABLE_OPENMPTARGET)"},
{"lineNum":"   56","line":"// Base function."},
{"lineNum":"   57","line":"static constexpr bool kokkos_omp_on_host() { return true; }"},
{"lineNum":"   58","line":"#if defined(KOKKOS_COMPILER_PGI)"},
{"lineNum":"   59","line":"#define KOKKOS_IMPL_IF_ON_HOST if (!__builtin_is_device_code())"},
{"lineNum":"   60","line":"#else"},
{"lineNum":"   61","line":"// Note: OpenMPTarget enforces C++17 at configure time"},
{"lineNum":"   62","line":"#pragma omp begin declare variant match(device = {kind(host)})"},
{"lineNum":"   63","line":"static constexpr bool kokkos_omp_on_host() { return true; }"},
{"lineNum":"   64","line":"#pragma omp end declare variant"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"#pragma omp begin declare variant match(device = {kind(nohost)})"},
{"lineNum":"   67","line":"static constexpr bool kokkos_omp_on_host() { return false; }"},
{"lineNum":"   68","line":"#pragma omp end declare variant"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"#define KOKKOS_IMPL_IF_ON_HOST if constexpr (kokkos_omp_on_host())"},
{"lineNum":"   71","line":"#endif"},
{"lineNum":"   72","line":"#else"},
{"lineNum":"   73","line":"#define KOKKOS_IMPL_IF_ON_HOST if (true)"},
{"lineNum":"   74","line":"#endif"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"namespace Kokkos {"},
{"lineNum":"   77","line":"namespace Impl {"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"template <class MemorySpace = void, class DestroyFunctor = void>"},
{"lineNum":"   80","line":"class SharedAllocationRecord;"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"template <class MemorySpace>"},
{"lineNum":"   83","line":"class SharedAllocationRecordCommon;"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"class SharedAllocationHeader {"},
{"lineNum":"   86","line":" private:"},
{"lineNum":"   87","line":"  using Record = SharedAllocationRecord<void, void>;"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"  static constexpr unsigned maximum_label_length ="},
{"lineNum":"   90","line":"      (1u << 7 /* 128 */) - sizeof(Record*);"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"  template <class, class>"},
{"lineNum":"   93","line":"  friend class SharedAllocationRecord;"},
{"lineNum":"   94","line":"  template <class>"},
{"lineNum":"   95","line":"  friend class SharedAllocationRecordCommon;"},
{"lineNum":"   96","line":"  template <class>"},
{"lineNum":"   97","line":"  friend class HostInaccessibleSharedAllocationRecordCommon;"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"  Record* m_record;"},
{"lineNum":"  100","line":"  char m_label[maximum_label_length];"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":" public:"},
{"lineNum":"  103","line":"  /* Given user memory get pointer to the header */"},
{"lineNum":"  104","line":"  KOKKOS_INLINE_FUNCTION static const SharedAllocationHeader* get_header("},
{"lineNum":"  105","line":"      void* alloc_ptr) {"},
{"lineNum":"  106","line":"    return reinterpret_cast<SharedAllocationHeader*>("},
{"lineNum":"  107","line":"        reinterpret_cast<char*>(alloc_ptr) - sizeof(SharedAllocationHeader));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  108","line":"  }"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  111","line":"  const char* label() const { return m_label; }"},
{"lineNum":"  112","line":"};"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"template <>"},
{"lineNum":"  115","line":"class SharedAllocationRecord<void, void> {"},
{"lineNum":"  116","line":" protected:"},
{"lineNum":"  117","line":"  static_assert(sizeof(SharedAllocationHeader) == (1u << 7 /* 128 */),"},
{"lineNum":"  118","line":"                \"sizeof(SharedAllocationHeader) != 128\");"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"  template <class, class>"},
{"lineNum":"  121","line":"  friend class SharedAllocationRecord;"},
{"lineNum":"  122","line":"  template <class>"},
{"lineNum":"  123","line":"  friend class SharedAllocationRecordCommon;"},
{"lineNum":"  124","line":"  template <class>"},
{"lineNum":"  125","line":"  friend class HostInaccessibleSharedAllocationRecordCommon;"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"  using function_type = void (*)(SharedAllocationRecord<void, void>*);"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"  SharedAllocationHeader* const m_alloc_ptr;"},
{"lineNum":"  130","line":"  size_t const m_alloc_size;"},
{"lineNum":"  131","line":"  function_type const m_dealloc;"},
{"lineNum":"  132","line":"#ifdef KOKKOS_ENABLE_DEBUG"},
{"lineNum":"  133","line":"  SharedAllocationRecord* const m_root;"},
{"lineNum":"  134","line":"  SharedAllocationRecord* m_prev;"},
{"lineNum":"  135","line":"  SharedAllocationRecord* m_next;"},
{"lineNum":"  136","line":"#endif"},
{"lineNum":"  137","line":"  int m_count;"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"  SharedAllocationRecord(SharedAllocationRecord&&)      = delete;"},
{"lineNum":"  140","line":"  SharedAllocationRecord(const SharedAllocationRecord&) = delete;"},
{"lineNum":"  141","line":"  SharedAllocationRecord& operator=(SharedAllocationRecord&&) = delete;"},
{"lineNum":"  142","line":"  SharedAllocationRecord& operator=(const SharedAllocationRecord&) = delete;"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"  /**\\brief  Construct and insert into \'arg_root\' tracking set."},
{"lineNum":"  145","line":"   *         use_count is zero."},
{"lineNum":"  146","line":"   */"},
{"lineNum":"  147","line":"  SharedAllocationRecord("},
{"lineNum":"  148","line":"#ifdef KOKKOS_ENABLE_DEBUG"},
{"lineNum":"  149","line":"      SharedAllocationRecord* arg_root,"},
{"lineNum":"  150","line":"#endif"},
{"lineNum":"  151","line":"      SharedAllocationHeader* arg_alloc_ptr, size_t arg_alloc_size,"},
{"lineNum":"  152","line":"      function_type arg_dealloc);"},
{"lineNum":"  153","line":" private:"},
{"lineNum":"  154","line":"  static KOKKOS_THREAD_LOCAL int t_tracking_enabled;"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":" public:"},
{"lineNum":"  157","line":"  virtual std::string get_label() const { return std::string(\"Unmanaged\"); }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"#ifdef KOKKOS_IMPL_ENABLE_OVERLOAD_HOST_DEVICE"},
{"lineNum":"  160","line":"  /* Device tracking_enabled -- always disabled */"},
{"lineNum":"  161","line":"  KOKKOS_IMPL_DEVICE_FUNCTION"},
{"lineNum":"  162","line":"  static int tracking_enabled() { return 0; }"},
{"lineNum":"  163","line":"#endif"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"  KOKKOS_IMPL_HOST_FUNCTION"},
{"lineNum":"  166","line":"  static int tracking_enabled() {"},
{"lineNum":"  167","line":"    KOKKOS_IMPL_IF_ON_HOST { return t_tracking_enabled; }","class":"lineNoCov","hits":"0","possible_hits":"322",},
{"lineNum":"  168","line":"    else {"},
{"lineNum":"  169","line":"      return 0;"},
{"lineNum":"  170","line":"    }"},
{"lineNum":"  171","line":"  }"},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"  /**\\brief A host process thread claims and disables the"},
{"lineNum":"  174","line":"   *        shared allocation tracking flag."},
{"lineNum":"  175","line":"   */"},
{"lineNum":"  176","line":"  static void tracking_disable() {"},
{"lineNum":"  177","line":"    KOKKOS_IMPL_IF_ON_HOST { t_tracking_enabled = 0; }","class":"lineNoCov","hits":"0","possible_hits":"99",},
{"lineNum":"  178","line":"  }"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"  /**\\brief A host process thread releases and enables the"},
{"lineNum":"  181","line":"   *        shared allocation tracking flag."},
{"lineNum":"  182","line":"   */"},
{"lineNum":"  183","line":"  static void tracking_enable() {"},
{"lineNum":"  184","line":"    KOKKOS_IMPL_IF_ON_HOST { t_tracking_enabled = 1; }","class":"lineNoCov","hits":"0","possible_hits":"132",},
{"lineNum":"  185","line":"  }"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"  virtual ~SharedAllocationRecord() = default;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"  SharedAllocationRecord()"},
{"lineNum":"  190","line":"      : m_alloc_ptr(nullptr),"},
{"lineNum":"  191","line":"        m_alloc_size(0),"},
{"lineNum":"  192","line":"        m_dealloc(nullptr)"},
{"lineNum":"  193","line":"#ifdef KOKKOS_ENABLE_DEBUG"},
{"lineNum":"  194","line":"        ,"},
{"lineNum":"  195","line":"        m_root(this),"},
{"lineNum":"  196","line":"        m_prev(this),"},
{"lineNum":"  197","line":"        m_next(this)"},
{"lineNum":"  198","line":"#endif"},
{"lineNum":"  199","line":"        ,"},
{"lineNum":"  200","line":"        m_count(0) {"},
{"lineNum":"  201","line":"  }"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"  static constexpr unsigned maximum_label_length ="},
{"lineNum":"  204","line":"      SharedAllocationHeader::maximum_label_length;"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  207","line":"  const SharedAllocationHeader* head() const { return m_alloc_ptr; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  208","line":""},
{"lineNum":"  209","line":"  /* User\'s memory begins at the end of the header */"},
{"lineNum":"  210","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  211","line":"  void* data() const { return reinterpret_cast<void*>(m_alloc_ptr + 1); }","class":"lineNoCov","hits":"0","possible_hits":"29",},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"  /* User\'s memory begins at the end of the header */"},
{"lineNum":"  214","line":"  size_t size() const { return m_alloc_size - sizeof(SharedAllocationHeader); }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"  /* Cannot be \'constexpr\' because \'m_count\' is volatile */"},
{"lineNum":"  217","line":"  int use_count() const { return *static_cast<const volatile int*>(&m_count); }"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"#ifdef KOKKOS_IMPL_ENABLE_OVERLOAD_HOST_DEVICE"},
{"lineNum":"  220","line":"  /* Device tracking_enabled -- always disabled */"},
{"lineNum":"  221","line":"  KOKKOS_IMPL_DEVICE_FUNCTION"},
{"lineNum":"  222","line":"  static void increment(SharedAllocationRecord*){};"},
{"lineNum":"  223","line":"#endif"},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"  /* Increment use count */"},
{"lineNum":"  226","line":"  KOKKOS_IMPL_HOST_FUNCTION"},
{"lineNum":"  227","line":"  static void increment(SharedAllocationRecord*);"},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"#ifdef KOKKOS_IMPL_ENABLE_OVERLOAD_HOST_DEVICE"},
{"lineNum":"  230","line":"  /* Device tracking_enabled -- always disabled */"},
{"lineNum":"  231","line":"  KOKKOS_IMPL_DEVICE_FUNCTION"},
{"lineNum":"  232","line":"  static void decrement(SharedAllocationRecord*){};"},
{"lineNum":"  233","line":"#endif"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"  /* Decrement use count. If 1->0 then remove from the tracking list and invoke"},
{"lineNum":"  236","line":"   * m_dealloc */"},
{"lineNum":"  237","line":"  KOKKOS_IMPL_HOST_FUNCTION"},
{"lineNum":"  238","line":"  static SharedAllocationRecord* decrement(SharedAllocationRecord*);"},
{"lineNum":"  239","line":""},
{"lineNum":"  240","line":"  /* Given a root record and data pointer find the record */"},
{"lineNum":"  241","line":"  static SharedAllocationRecord* find(SharedAllocationRecord* const,"},
{"lineNum":"  242","line":"                                      void* const);"},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"  /*  Sanity check for the whole set of records to which the input record"},
{"lineNum":"  245","line":"   * belongs. Locks the set\'s insert/erase operations until the sanity check is"},
{"lineNum":"  246","line":"   * complete."},
{"lineNum":"  247","line":"   */"},
{"lineNum":"  248","line":"  static bool is_sane(SharedAllocationRecord*);"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"  /*  Print host-accessible records */"},
{"lineNum":"  251","line":"  static void print_host_accessible_records("},
{"lineNum":"  252","line":"      std::ostream&, const char* const space_name,"},
{"lineNum":"  253","line":"      const SharedAllocationRecord* const root, const bool detail);"},
{"lineNum":"  254","line":"};"},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"template <class MemorySpace>"},
{"lineNum":"  257","line":"class SharedAllocationRecordCommon : public SharedAllocationRecord<void, void> {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  258","line":" private:"},
{"lineNum":"  259","line":"  using derived_t     = SharedAllocationRecord<MemorySpace, void>;"},
{"lineNum":"  260","line":"  using record_base_t = SharedAllocationRecord<void, void>;"},
{"lineNum":"  261","line":"  derived_t& self() { return *static_cast<derived_t*>(this); }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  262","line":"  derived_t const& self() const { return *static_cast<derived_t const*>(this); }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":" protected:"},
{"lineNum":"  265","line":"  using record_base_t::record_base_t;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"  void _fill_host_accessible_header_info(SharedAllocationHeader& arg_header,"},
{"lineNum":"  268","line":"                                         std::string const& arg_label);"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"  static void deallocate(record_base_t* arg_rec);"},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":" public:"},
{"lineNum":"  273","line":"  static auto allocate(MemorySpace const& arg_space,"},
{"lineNum":"  274","line":"                       std::string const& arg_label, size_t arg_alloc_size)"},
{"lineNum":"  275","line":"      -> derived_t*;"},
{"lineNum":"  276","line":"  /**\\brief  Allocate tracked memory in the space */"},
{"lineNum":"  277","line":"  static void* allocate_tracked(MemorySpace const& arg_space,"},
{"lineNum":"  278","line":"                                std::string const& arg_alloc_label,"},
{"lineNum":"  279","line":"                                size_t arg_alloc_size);"},
{"lineNum":"  280","line":"  /**\\brief  Reallocate tracked memory in the space */"},
{"lineNum":"  281","line":"  static void deallocate_tracked(void* arg_alloc_ptr);"},
{"lineNum":"  282","line":"  /**\\brief  Deallocate tracked memory in the space */"},
{"lineNum":"  283","line":"  static void* reallocate_tracked(void* arg_alloc_ptr, size_t arg_alloc_size);"},
{"lineNum":"  284","line":"  static auto get_record(void* alloc_ptr) -> derived_t*;"},
{"lineNum":"  285","line":"  std::string get_label() const;"},
{"lineNum":"  286","line":"  static void print_records(std::ostream& s, MemorySpace const&,"},
{"lineNum":"  287","line":"                            bool detail = false);"},
{"lineNum":"  288","line":"};"},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"template <class MemorySpace>"},
{"lineNum":"  291","line":"class HostInaccessibleSharedAllocationRecordCommon"},
{"lineNum":"  292","line":"    : public SharedAllocationRecordCommon<MemorySpace> {"},
{"lineNum":"  293","line":" private:"},
{"lineNum":"  294","line":"  using base_t        = SharedAllocationRecordCommon<MemorySpace>;"},
{"lineNum":"  295","line":"  using derived_t     = SharedAllocationRecord<MemorySpace, void>;"},
{"lineNum":"  296","line":"  using record_base_t = SharedAllocationRecord<void, void>;"},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":" protected:"},
{"lineNum":"  299","line":"  using base_t::base_t;"},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":" public:"},
{"lineNum":"  302","line":"  static void print_records(std::ostream& s, MemorySpace const&,"},
{"lineNum":"  303","line":"                            bool detail = false);"},
{"lineNum":"  304","line":"  static auto get_record(void* alloc_ptr) -> derived_t*;"},
{"lineNum":"  305","line":"  std::string get_label() const;"},
{"lineNum":"  306","line":"};"},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"namespace {"},
{"lineNum":"  309","line":""},
{"lineNum":"  310","line":"/* Taking the address of this function so make sure it is unique */"},
{"lineNum":"  311","line":"template <class MemorySpace, class DestroyFunctor>"},
{"lineNum":"  312","line":"void deallocate(SharedAllocationRecord<void, void>* record_ptr) {","class":"lineNoCov","hits":"0","possible_hits":"30",},
{"lineNum":"  313","line":"  using base_type = SharedAllocationRecord<MemorySpace, void>;"},
{"lineNum":"  314","line":"  using this_type = SharedAllocationRecord<MemorySpace, DestroyFunctor>;"},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":"  this_type* const ptr ="},
{"lineNum":"  317","line":"      static_cast<this_type*>(static_cast<base_type*>(record_ptr));"},
{"lineNum":"  318","line":""},
{"lineNum":"  319","line":"  ptr->m_destroy.destroy_shared_allocation();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  320","line":""},
{"lineNum":"  321","line":"  delete ptr;","class":"lineNoCov","hits":"0","possible_hits":"30",},
{"lineNum":"  322","line":"}","class":"lineNoCov","hits":"0","possible_hits":"30",},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"}  // namespace"},
{"lineNum":"  325","line":""},
{"lineNum":"  326","line":"/*"},
{"lineNum":"  327","line":" *  Memory space specialization of SharedAllocationRecord< Space , void >"},
{"lineNum":"  328","line":" * requires :"},
{"lineNum":"  329","line":" *"},
{"lineNum":"  330","line":" *  SharedAllocationRecord< Space , void > : public SharedAllocationRecord< void"},
{"lineNum":"  331","line":" * , void >"},
{"lineNum":"  332","line":" *  {"},
{"lineNum":"  333","line":" *    // delete allocated user memory via static_cast to this type."},
{"lineNum":"  334","line":" *    static void deallocate( const SharedAllocationRecord<void,void> * );"},
{"lineNum":"  335","line":" *    Space m_space ;"},
{"lineNum":"  336","line":" *  }"},
{"lineNum":"  337","line":" */"},
{"lineNum":"  338","line":"template <class MemorySpace, class DestroyFunctor>"},
{"lineNum":"  339","line":"class SharedAllocationRecord","class":"lineNoCov","hits":"0","possible_hits":"81",},
{"lineNum":"  340","line":"    : public SharedAllocationRecord<MemorySpace, void> {"},
{"lineNum":"  341","line":" private:"},
{"lineNum":"  342","line":"  SharedAllocationRecord(const MemorySpace& arg_space,"},
{"lineNum":"  343","line":"                         const std::string& arg_label, const size_t arg_alloc)"},
{"lineNum":"  344","line":"      /*  Allocate user memory as [ SharedAllocationHeader , user_memory ] */"},
{"lineNum":"  345","line":"      : SharedAllocationRecord<MemorySpace, void>(","class":"lineNoCov","hits":"0","possible_hits":"23",},
{"lineNum":"  346","line":"            arg_space, arg_label, arg_alloc,"},
{"lineNum":"  347","line":"            &Kokkos::Impl::deallocate<MemorySpace, DestroyFunctor>),"},
{"lineNum":"  348","line":"        m_destroy() {}","class":"lineNoCov","hits":"0","possible_hits":"23",},
{"lineNum":"  349","line":""},
{"lineNum":"  350","line":"  SharedAllocationRecord()                              = delete;"},
{"lineNum":"  351","line":"  SharedAllocationRecord(const SharedAllocationRecord&) = delete;"},
{"lineNum":"  352","line":"  SharedAllocationRecord& operator=(const SharedAllocationRecord&) = delete;"},
{"lineNum":"  353","line":""},
{"lineNum":"  354","line":" public:"},
{"lineNum":"  355","line":"  DestroyFunctor m_destroy;"},
{"lineNum":"  356","line":""},
{"lineNum":"  357","line":"  // Allocate with a zero use count.  Incrementing the use count from zero to"},
{"lineNum":"  358","line":"  // one inserts the record into the tracking list.  Decrementing the count from"},
{"lineNum":"  359","line":"  // one to zero removes from the trakcing list and deallocates."},
{"lineNum":"  360","line":"  KOKKOS_INLINE_FUNCTION static SharedAllocationRecord* allocate("},
{"lineNum":"  361","line":"      const MemorySpace& arg_space, const std::string& arg_label,"},
{"lineNum":"  362","line":"      const size_t arg_alloc) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  363","line":"#if defined(KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_HOST)"},
{"lineNum":"  364","line":"    return new SharedAllocationRecord(arg_space, arg_label, arg_alloc);","class":"lineNoCov","hits":"0","possible_hits":"46",},
{"lineNum":"  365","line":"#else"},
{"lineNum":"  366","line":"    (void)arg_space;"},
{"lineNum":"  367","line":"    (void)arg_label;"},
{"lineNum":"  368","line":"    (void)arg_alloc;"},
{"lineNum":"  369","line":"    return (SharedAllocationRecord*)0;"},
{"lineNum":"  370","line":"#endif"},
{"lineNum":"  371","line":"  }"},
{"lineNum":"  372","line":"};"},
{"lineNum":"  373","line":""},
{"lineNum":"  374","line":"template <class MemorySpace>"},
{"lineNum":"  375","line":"class SharedAllocationRecord<MemorySpace, void>"},
{"lineNum":"  376","line":"    : public SharedAllocationRecord<void, void> {};"},
{"lineNum":"  377","line":""},
{"lineNum":"  378","line":"union SharedAllocationTracker {"},
{"lineNum":"  379","line":" private:"},
{"lineNum":"  380","line":"  using Record = SharedAllocationRecord<void, void>;"},
{"lineNum":"  381","line":""},
{"lineNum":"  382","line":"  enum : uintptr_t { DO_NOT_DEREF_FLAG = 0x01ul };"},
{"lineNum":"  383","line":""},
{"lineNum":"  384","line":"  // The allocation record resides in Host memory space"},
{"lineNum":"  385","line":"  uintptr_t m_record_bits;"},
{"lineNum":"  386","line":"  Record* m_record;"},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":" public:"},
{"lineNum":"  389","line":"  // Use macros instead of inline functions to reduce"},
{"lineNum":"  390","line":"  // pressure on compiler optimization by reducing"},
{"lineNum":"  391","line":"  // number of symbols and inline functions."},
{"lineNum":"  392","line":""},
{"lineNum":"  393","line":"#if defined(KOKKOS_IMPL_ENABLE_OVERLOAD_HOST_DEVICE)"},
{"lineNum":"  394","line":""},
{"lineNum":"  395","line":"#define KOKKOS_IMPL_SHARED_ALLOCATION_TRACKER_ENABLED Record::tracking_enabled()"},
{"lineNum":"  396","line":""},
{"lineNum":"  397","line":"#ifdef KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_HOST"},
{"lineNum":"  398","line":"#define KOKKOS_IMPL_SHARED_ALLOCATION_TRACKER_CONDITION \\"},
{"lineNum":"  399","line":"  (!(m_record_bits & DO_NOT_DEREF_FLAG))"},
{"lineNum":"  400","line":"#else"},
{"lineNum":"  401","line":"#define KOKKOS_IMPL_SHARED_ALLOCATION_TRACKER_CONDITION (0)"},
{"lineNum":"  402","line":"#endif"},
{"lineNum":"  403","line":""},
{"lineNum":"  404","line":"#define KOKKOS_IMPL_SHARED_ALLOCATION_TRACKER_INCREMENT \\"},
{"lineNum":"  405","line":"  if (KOKKOS_IMPL_SHARED_ALLOCATION_TRACKER_CONDITION)  \\"},
{"lineNum":"  406","line":"    KOKKOS_IMPL_IF_ON_HOST Record::increment(m_record);"},
{"lineNum":"  407","line":""},
{"lineNum":"  408","line":"#define KOKKOS_IMPL_SHARED_ALLOCATION_TRACKER_DECREMENT \\"},
{"lineNum":"  409","line":"  if (KOKKOS_IMPL_SHARED_ALLOCATION_TRACKER_CONDITION)  \\"},
{"lineNum":"  410","line":"    KOKKOS_IMPL_IF_ON_HOST Record::decrement(m_record);"},
{"lineNum":"  411","line":""},
{"lineNum":"  412","line":"#elif defined(KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_HOST)"},
{"lineNum":"  413","line":""},
{"lineNum":"  414","line":"#define KOKKOS_IMPL_SHARED_ALLOCATION_TRACKER_ENABLED Record::tracking_enabled()"},
{"lineNum":"  415","line":""},
{"lineNum":"  416","line":"#define KOKKOS_IMPL_SHARED_ALLOCATION_TRACKER_INCREMENT \\"},
{"lineNum":"  417","line":"  if (!(m_record_bits & DO_NOT_DEREF_FLAG))             \\"},
{"lineNum":"  418","line":"    KOKKOS_IMPL_IF_ON_HOST Record::increment(m_record);"},
{"lineNum":"  419","line":""},
{"lineNum":"  420","line":"#define KOKKOS_IMPL_SHARED_ALLOCATION_TRACKER_DECREMENT \\"},
{"lineNum":"  421","line":"  if (!(m_record_bits & DO_NOT_DEREF_FLAG))             \\"},
{"lineNum":"  422","line":"    KOKKOS_IMPL_IF_ON_HOST Record::decrement(m_record);"},
{"lineNum":"  423","line":""},
{"lineNum":"  424","line":"#else"},
{"lineNum":"  425","line":""},
{"lineNum":"  426","line":"#define KOKKOS_IMPL_SHARED_ALLOCATION_TRACKER_ENABLED 0"},
{"lineNum":"  427","line":""},
{"lineNum":"  428","line":"#define KOKKOS_IMPL_SHARED_ALLOCATION_TRACKER_INCREMENT /* */"},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":"#define KOKKOS_IMPL_SHARED_ALLOCATION_TRACKER_DECREMENT /* */"},
{"lineNum":"  431","line":""},
{"lineNum":"  432","line":"#endif"},
{"lineNum":"  433","line":""},
{"lineNum":"  434","line":"#define KOKKOS_IMPL_SHARED_ALLOCATION_CARRY_RECORD_BITS(rhs,               \\"},
{"lineNum":"  435","line":"                                                        override_tracking) \\"},
{"lineNum":"  436","line":"  (((!override_tracking) || (rhs.m_record_bits & DO_NOT_DEREF_FLAG) ||     \\"},
{"lineNum":"  437","line":"    (!KOKKOS_IMPL_SHARED_ALLOCATION_TRACKER_ENABLED))                      \\"},
{"lineNum":"  438","line":"       ? rhs.m_record_bits | DO_NOT_DEREF_FLAG                             \\"},
{"lineNum":"  439","line":"       : rhs.m_record_bits)"},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"  /** \\brief  Assign a specialized record */"},
{"lineNum":"  442","line":"  inline void assign_allocated_record_to_uninitialized(Record* arg_record) {"},
{"lineNum":"  443","line":"    if (arg_record) {","class":"lineNoCov","hits":"0","possible_hits":"23",},
{"lineNum":"  444","line":"      Record::increment(m_record = arg_record);","class":"lineNoCov","hits":"0","possible_hits":"24",},
{"lineNum":"  445","line":"    } else {"},
{"lineNum":"  446","line":"      m_record_bits = DO_NOT_DEREF_FLAG;","class":"lineNoCov","hits":"0","possible_hits":"23",},
{"lineNum":"  447","line":"    }"},
{"lineNum":"  448","line":"  }"},
{"lineNum":"  449","line":""},
{"lineNum":"  450","line":"  template <class MemorySpace>"},
{"lineNum":"  451","line":"  constexpr SharedAllocationRecord<MemorySpace, void>* get_record() const"},
{"lineNum":"  452","line":"      noexcept {"},
{"lineNum":"  453","line":"    return (m_record_bits & DO_NOT_DEREF_FLAG)"},
{"lineNum":"  454","line":"               ? nullptr"},
{"lineNum":"  455","line":"               : static_cast<SharedAllocationRecord<MemorySpace, void>*>("},
{"lineNum":"  456","line":"                     m_record);"},
{"lineNum":"  457","line":"  }"},
{"lineNum":"  458","line":""},
{"lineNum":"  459","line":"  template <class MemorySpace>"},
{"lineNum":"  460","line":"  std::string get_label() const {"},
{"lineNum":"  461","line":"    return (m_record_bits == DO_NOT_DEREF_FLAG)","class":"lineNoCov","hits":"0","possible_hits":"229",},
{"lineNum":"  462","line":"               ? std::string()","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":"  463","line":"               : reinterpret_cast<SharedAllocationRecord<MemorySpace, void>*>("},
{"lineNum":"  464","line":"                     m_record_bits & ~DO_NOT_DEREF_FLAG)","class":"lineNoCov","hits":"0","possible_hits":"229",},
{"lineNum":"  465","line":"                     ->get_label();","class":"lineNoCov","hits":"0","possible_hits":"229",},
{"lineNum":"  466","line":"  }"},
{"lineNum":"  467","line":""},
{"lineNum":"  468","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  469","line":"  int use_count() const {"},
{"lineNum":"  470","line":"#if defined(KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_HOST)"},
{"lineNum":"  471","line":"    Record* const tmp ="},
{"lineNum":"  472","line":"        reinterpret_cast<Record*>(m_record_bits & ~DO_NOT_DEREF_FLAG);"},
{"lineNum":"  473","line":"    return (tmp ? tmp->use_count() : 0);"},
{"lineNum":"  474","line":"#else"},
{"lineNum":"  475","line":"    return 0;"},
{"lineNum":"  476","line":"#endif"},
{"lineNum":"  477","line":"  }"},
{"lineNum":"  478","line":""},
{"lineNum":"  479","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  480","line":"  bool has_record() const {"},
{"lineNum":"  481","line":"    return (m_record_bits & (~DO_NOT_DEREF_FLAG)) != 0;"},
{"lineNum":"  482","line":"  }"},
{"lineNum":"  483","line":""},
{"lineNum":"  484","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":"  485","line":"  void clear() {"},
{"lineNum":"  486","line":"    // If this is tracking then must decrement"},
{"lineNum":"  487","line":"    KOKKOS_IMPL_SHARED_ALLOCATION_TRACKER_DECREMENT"},
{"lineNum":"  488","line":"    // Reset to default constructed value."},
{"lineNum":"  489","line":"    m_record_bits = DO_NOT_DEREF_FLAG;"},
{"lineNum":"  490","line":"  }"},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"  // Copy:"},
{"lineNum":"  493","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":"  494","line":"  ~SharedAllocationTracker(){KOKKOS_IMPL_SHARED_ALLOCATION_TRACKER_DECREMENT}","class":"lineNoCov","hits":"0","possible_hits":"1172",},
{"lineNum":"  495","line":""},
{"lineNum":"  496","line":"  KOKKOS_FORCEINLINE_FUNCTION constexpr SharedAllocationTracker()"},
{"lineNum":"  497","line":"      : m_record_bits(DO_NOT_DEREF_FLAG) {}","class":"lineNoCov","hits":"0","possible_hits":"96",},
{"lineNum":"  498","line":""},
{"lineNum":"  499","line":"  // Move:"},
{"lineNum":"  500","line":""},
{"lineNum":"  501","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":"  502","line":"  SharedAllocationTracker(SharedAllocationTracker&& rhs)"},
{"lineNum":"  503","line":"      : m_record_bits(rhs.m_record_bits) {"},
{"lineNum":"  504","line":"    rhs.m_record_bits = DO_NOT_DEREF_FLAG;"},
{"lineNum":"  505","line":"  }"},
{"lineNum":"  506","line":""},
{"lineNum":"  507","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":"  508","line":"  SharedAllocationTracker& operator=(SharedAllocationTracker&& rhs) {"},
{"lineNum":"  509","line":"    auto swap_tmp     = m_record_bits;"},
{"lineNum":"  510","line":"    m_record_bits     = rhs.m_record_bits;"},
{"lineNum":"  511","line":"    rhs.m_record_bits = swap_tmp;"},
{"lineNum":"  512","line":"    return *this;"},
{"lineNum":"  513","line":"  }"},
{"lineNum":"  514","line":""},
{"lineNum":"  515","line":"  // Copy:"},
{"lineNum":"  516","line":""},
{"lineNum":"  517","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":"  518","line":"  SharedAllocationTracker(const SharedAllocationTracker& rhs)"},
{"lineNum":"  519","line":"      : m_record_bits(KOKKOS_IMPL_SHARED_ALLOCATION_CARRY_RECORD_BITS(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  520","line":"            rhs, true)){KOKKOS_IMPL_SHARED_ALLOCATION_TRACKER_INCREMENT}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  521","line":""},
{"lineNum":"  522","line":"        /** \\brief  Copy construction may disable tracking. */"},
{"lineNum":"  523","line":"        KOKKOS_FORCEINLINE_FUNCTION SharedAllocationTracker("},
{"lineNum":"  524","line":"            const SharedAllocationTracker& rhs, const bool enable_tracking)"},
{"lineNum":"  525","line":"      : m_record_bits(KOKKOS_IMPL_SHARED_ALLOCATION_CARRY_RECORD_BITS(","class":"lineNoCov","hits":"0","possible_hits":"665",},
{"lineNum":"  526","line":"            rhs,"},
{"lineNum":"  527","line":"            enable_tracking)){KOKKOS_IMPL_SHARED_ALLOCATION_TRACKER_INCREMENT}","class":"lineNoCov","hits":"0","possible_hits":"439",},
{"lineNum":"  528","line":""},
{"lineNum":"  529","line":"        KOKKOS_FORCEINLINE_FUNCTION SharedAllocationTracker"},
{"lineNum":"  530","line":"        &"},
{"lineNum":"  531","line":"        operator=(const SharedAllocationTracker& rhs) {"},
{"lineNum":"  532","line":"    // If this is tracking then must decrement"},
{"lineNum":"  533","line":"    KOKKOS_IMPL_SHARED_ALLOCATION_TRACKER_DECREMENT"},
{"lineNum":"  534","line":"    m_record_bits = KOKKOS_IMPL_SHARED_ALLOCATION_CARRY_RECORD_BITS(rhs, true);"},
{"lineNum":"  535","line":"    KOKKOS_IMPL_SHARED_ALLOCATION_TRACKER_INCREMENT"},
{"lineNum":"  536","line":"    return *this;"},
{"lineNum":"  537","line":"  }"},
{"lineNum":"  538","line":""},
{"lineNum":"  539","line":"  /*  The following functions (assign_direct and assign_force_disable)"},
{"lineNum":"  540","line":"   *  are the result of deconstructing the"},
{"lineNum":"  541","line":"   *  KOKKOS_IMPL_SHARED_ALLOCATION_CARRY_RECORD_BITS macro.  This"},
{"lineNum":"  542","line":"   *  allows the caller to do the check for tracking enabled and managed"},
{"lineNum":"  543","line":"   *  apart from the assignement of the record because the tracking"},
{"lineNum":"  544","line":"   *  enabled / managed question may be important for other tasks as well"},
{"lineNum":"  545","line":"   */"},
{"lineNum":"  546","line":""},
{"lineNum":"  547","line":"  /** \\brief  Copy assignment without the carry bits logic"},
{"lineNum":"  548","line":"   *         This assumes that externally defined tracking is explicitly enabled"},
{"lineNum":"  549","line":"   */"},
{"lineNum":"  550","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":"  551","line":"  void assign_direct(const SharedAllocationTracker& rhs) {"},
{"lineNum":"  552","line":"    KOKKOS_IMPL_SHARED_ALLOCATION_TRACKER_DECREMENT","class":"lineNoCov","hits":"0","possible_hits":"80",},
{"lineNum":"  553","line":"    m_record_bits = rhs.m_record_bits;","class":"lineNoCov","hits":"0","possible_hits":"276",},
{"lineNum":"  554","line":"    KOKKOS_IMPL_SHARED_ALLOCATION_TRACKER_INCREMENT","class":"lineNoCov","hits":"0","possible_hits":"349",},
{"lineNum":"  555","line":"  }"},
{"lineNum":"  556","line":""},
{"lineNum":"  557","line":"  /** \\brief  Copy assignment without the increment"},
{"lineNum":"  558","line":"   *         we cannot assume that current record is unmanaged"},
{"lineNum":"  559","line":"   *         but with externally defined tracking explicitly disabled"},
{"lineNum":"  560","line":"   *         we can go straight to the do not deref flag     */"},
{"lineNum":"  561","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":"  562","line":"  void assign_force_disable(const SharedAllocationTracker& rhs) {"},
{"lineNum":"  563","line":"    KOKKOS_IMPL_SHARED_ALLOCATION_TRACKER_DECREMENT","class":"lineNoCov","hits":"0","possible_hits":"76",},
{"lineNum":"  564","line":"    m_record_bits = rhs.m_record_bits | DO_NOT_DEREF_FLAG;","class":"lineNoCov","hits":"0","possible_hits":"305",},
{"lineNum":"  565","line":"  }"},
{"lineNum":"  566","line":""},
{"lineNum":"  567","line":"  // report if record is tracking or not"},
{"lineNum":"  568","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":"  569","line":"  bool tracking_enabled() { return (!(m_record_bits & DO_NOT_DEREF_FLAG)); }"},
{"lineNum":"  570","line":""},
{"lineNum":"  571","line":"  /** \\brief  Copy assignment may disable tracking */"},
{"lineNum":"  572","line":"  KOKKOS_FORCEINLINE_FUNCTION"},
{"lineNum":"  573","line":"  void assign(const SharedAllocationTracker& rhs, const bool enable_tracking) {"},
{"lineNum":"  574","line":"    KOKKOS_IMPL_SHARED_ALLOCATION_TRACKER_DECREMENT"},
{"lineNum":"  575","line":"    m_record_bits ="},
{"lineNum":"  576","line":"        KOKKOS_IMPL_SHARED_ALLOCATION_CARRY_RECORD_BITS(rhs, enable_tracking);"},
{"lineNum":"  577","line":"    KOKKOS_IMPL_SHARED_ALLOCATION_TRACKER_INCREMENT"},
{"lineNum":"  578","line":"  }"},
{"lineNum":"  579","line":""},
{"lineNum":"  580","line":"#undef KOKKOS_IMPL_SHARED_ALLOCATION_TRACKER_ENABLED"},
{"lineNum":"  581","line":"#undef KOKKOS_IMPL_SHARED_ALLOCATION_TRACKER_INCREMENT"},
{"lineNum":"  582","line":"#undef KOKKOS_IMPL_SHARED_ALLOCATION_TRACKER_DECREMENT"},
{"lineNum":"  583","line":"};"},
{"lineNum":"  584","line":""},
{"lineNum":"  585","line":"} /* namespace Impl */"},
{"lineNum":"  586","line":"} /* namespace Kokkos */"},
{"lineNum":"  587","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 40, "covered" : 0,};
var merged_data = [];
