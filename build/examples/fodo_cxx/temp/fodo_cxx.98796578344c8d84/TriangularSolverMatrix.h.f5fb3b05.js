var data = {lines:[
{"lineNum":"    1","line":"// This file is part of Eigen, a lightweight C++ template library"},
{"lineNum":"    2","line":"// for linear algebra."},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Copyright (C) 2009 Gael Guennebaud <gael.guennebaud@inria.fr>"},
{"lineNum":"    5","line":"//"},
{"lineNum":"    6","line":"// This Source Code Form is subject to the terms of the Mozilla"},
{"lineNum":"    7","line":"// Public License v. 2.0. If a copy of the MPL was not distributed"},
{"lineNum":"    8","line":"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/."},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef EIGEN_TRIANGULAR_SOLVER_MATRIX_H"},
{"lineNum":"   11","line":"#define EIGEN_TRIANGULAR_SOLVER_MATRIX_H"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"#include \"../InternalHeaderCheck.h\""},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"namespace Eigen {"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"namespace internal {"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"// if the rhs is row major, let\'s transpose the product"},
{"lineNum":"   20","line":"template <typename Scalar, typename Index, int Side, int Mode, bool Conjugate, int TriStorageOrder, int OtherInnerStride>"},
{"lineNum":"   21","line":"struct triangular_solve_matrix<Scalar,Index,Side,Mode,Conjugate,TriStorageOrder,RowMajor,OtherInnerStride>"},
{"lineNum":"   22","line":"{"},
{"lineNum":"   23","line":"  static void run("},
{"lineNum":"   24","line":"    Index size, Index cols,"},
{"lineNum":"   25","line":"    const Scalar*  tri, Index triStride,"},
{"lineNum":"   26","line":"    Scalar* _other, Index otherIncr, Index otherStride,"},
{"lineNum":"   27","line":"    level3_blocking<Scalar,Scalar>& blocking)"},
{"lineNum":"   28","line":"  {"},
{"lineNum":"   29","line":"    triangular_solve_matrix<","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   30","line":"      Scalar, Index, Side==OnTheLeft?OnTheRight:OnTheLeft,"},
{"lineNum":"   31","line":"      (Mode&UnitDiag) | ((Mode&Upper) ? Lower : Upper),"},
{"lineNum":"   32","line":"      NumTraits<Scalar>::IsComplex && Conjugate,"},
{"lineNum":"   33","line":"      TriStorageOrder==RowMajor ? ColMajor : RowMajor, ColMajor, OtherInnerStride>"},
{"lineNum":"   34","line":"      ::run(size, cols, tri, triStride, _other, otherIncr, otherStride, blocking);"},
{"lineNum":"   35","line":"  }"},
{"lineNum":"   36","line":"};"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"/* Optimized triangular solver with multiple right hand side and the triangular matrix on the left"},
{"lineNum":"   39","line":" */"},
{"lineNum":"   40","line":"template <typename Scalar, typename Index, int Mode, bool Conjugate, int TriStorageOrder,int OtherInnerStride>"},
{"lineNum":"   41","line":"struct triangular_solve_matrix<Scalar,Index,OnTheLeft,Mode,Conjugate,TriStorageOrder,ColMajor,OtherInnerStride>"},
{"lineNum":"   42","line":"{"},
{"lineNum":"   43","line":"  static EIGEN_DONT_INLINE void run("},
{"lineNum":"   44","line":"    Index size, Index otherSize,"},
{"lineNum":"   45","line":"    const Scalar* _tri, Index triStride,"},
{"lineNum":"   46","line":"    Scalar* _other, Index otherIncr, Index otherStride,"},
{"lineNum":"   47","line":"    level3_blocking<Scalar,Scalar>& blocking);"},
{"lineNum":"   48","line":"};"},
{"lineNum":"   49","line":"template <typename Scalar, typename Index, int Mode, bool Conjugate, int TriStorageOrder, int OtherInnerStride>"},
{"lineNum":"   50","line":"EIGEN_DONT_INLINE void triangular_solve_matrix<Scalar,Index,OnTheLeft,Mode,Conjugate,TriStorageOrder,ColMajor,OtherInnerStride>::run("},
{"lineNum":"   51","line":"    Index size, Index otherSize,"},
{"lineNum":"   52","line":"    const Scalar* _tri, Index triStride,"},
{"lineNum":"   53","line":"    Scalar* _other, Index otherIncr, Index otherStride,"},
{"lineNum":"   54","line":"    level3_blocking<Scalar,Scalar>& blocking)"},
{"lineNum":"   55","line":"  {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   56","line":"    Index cols = otherSize;"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"    typedef const_blas_data_mapper<Scalar, Index, TriStorageOrder> TriMapper;"},
{"lineNum":"   59","line":"    typedef blas_data_mapper<Scalar, Index, ColMajor, Unaligned, OtherInnerStride> OtherMapper;"},
{"lineNum":"   60","line":"    TriMapper tri(_tri, triStride);"},
{"lineNum":"   61","line":"    OtherMapper other(_other, otherStride, otherIncr);"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"    typedef gebp_traits<Scalar,Scalar> Traits;"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"    enum {"},
{"lineNum":"   66","line":"      SmallPanelWidth   = EIGEN_PLAIN_ENUM_MAX(Traits::mr,Traits::nr),"},
{"lineNum":"   67","line":"      IsLower = (Mode&Lower) == Lower"},
{"lineNum":"   68","line":"    };"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"    Index kc = blocking.kc();                   // cache block size along the K direction"},
{"lineNum":"   71","line":"    Index mc = (std::min)(size,blocking.mc());  // cache block size along the M direction","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"    std::size_t sizeA = kc*mc;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   74","line":"    std::size_t sizeB = kc*cols;"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"    ei_declare_aligned_stack_constructed_variable(Scalar, blockA, sizeA, blocking.blockA());","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"   77","line":"    ei_declare_aligned_stack_constructed_variable(Scalar, blockB, sizeB, blocking.blockB());","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"    conj_if<Conjugate> conj;"},
{"lineNum":"   80","line":"    gebp_kernel<Scalar, Scalar, Index, OtherMapper, Traits::mr, Traits::nr, Conjugate, false> gebp_kernel;"},
{"lineNum":"   81","line":"    gemm_pack_lhs<Scalar, Index, TriMapper, Traits::mr, Traits::LhsProgress, typename Traits::LhsPacket4Packing, TriStorageOrder> pack_lhs;"},
{"lineNum":"   82","line":"    gemm_pack_rhs<Scalar, Index, OtherMapper, Traits::nr, ColMajor, false, true> pack_rhs;"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"    // the goal here is to subdivise the Rhs panels such that we keep some cache"},
{"lineNum":"   85","line":"    // coherence when accessing the rhs elements"},
{"lineNum":"   86","line":"    std::ptrdiff_t l1, l2, l3;"},
{"lineNum":"   87","line":"    manage_caching_sizes(GetAction, &l1, &l2, &l3);"},
{"lineNum":"   88","line":"    Index subcols = cols>0 ? l2/(4 * sizeof(Scalar) * std::max<Index>(otherStride,size)) : 0;","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"   89","line":"    subcols = std::max<Index>((subcols/Traits::nr)*Traits::nr, Traits::nr);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"    for(Index k2=IsLower ? 0 : size;","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":"   92","line":"        IsLower ? k2<size : k2>0;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   93","line":"        IsLower ? k2+=kc : k2-=kc)"},
{"lineNum":"   94","line":"    {"},
{"lineNum":"   95","line":"      const Index actual_kc = (std::min)(IsLower ? size-k2 : k2, kc);","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"      // We have selected and packed a big horizontal panel R1 of rhs. Let B be the packed copy of this panel,"},
{"lineNum":"   98","line":"      // and R2 the remaining part of rhs. The corresponding vertical panel of lhs is split into"},
{"lineNum":"   99","line":"      // A11 (the triangular part) and A21 the remaining rectangular part."},
{"lineNum":"  100","line":"      // Then the high level algorithm is:"},
{"lineNum":"  101","line":"      //  - B = R1                    => general block copy (done during the next step)"},
{"lineNum":"  102","line":"      //  - R1 = A11^-1 B             => tricky part"},
{"lineNum":"  103","line":"      //  - update B from the new R1  => actually this has to be performed continuously during the above step"},
{"lineNum":"  104","line":"      //  - R2 -= A21 * B             => GEPP"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"      // The tricky part: compute R1 = A11^-1 B while updating B from R1"},
{"lineNum":"  107","line":"      // The idea is to split A11 into multiple small vertical panels."},
{"lineNum":"  108","line":"      // Each panel can be split into a small triangular part T1k which is processed without optimization,"},
{"lineNum":"  109","line":"      // and the remaining small part T2k which is processed using gebp with appropriate block strides"},
{"lineNum":"  110","line":"      for(Index j2=0; j2<cols; j2+=subcols)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  111","line":"      {"},
{"lineNum":"  112","line":"        Index actual_cols = (std::min)(cols-j2,subcols);","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  113","line":"        // for each small vertical panels [T1k^T, T2k^T]^T of lhs"},
{"lineNum":"  114","line":"        for (Index k1=0; k1<actual_kc; k1+=SmallPanelWidth)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  115","line":"        {"},
{"lineNum":"  116","line":"          Index actualPanelWidth = std::min<Index>(actual_kc-k1, SmallPanelWidth);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  117","line":"          // tr solve"},
{"lineNum":"  118","line":"          for (Index k=0; k<actualPanelWidth; ++k)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  119","line":"          {"},
{"lineNum":"  120","line":"            // TODO write a small kernel handling this (can be shared with trsv)"},
{"lineNum":"  121","line":"            Index i  = IsLower ? k2+k1+k : k2-k1-k-1;"},
{"lineNum":"  122","line":"            Index rs = actualPanelWidth - k - 1; // remaining size"},
{"lineNum":"  123","line":"            Index s  = TriStorageOrder==RowMajor ? (IsLower ? k2+k1 : i+1)"},
{"lineNum":"  124","line":"                                                 :  IsLower ? i+1 : i-rs;"},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"            Scalar a = (Mode & UnitDiag) ? Scalar(1) : Scalar(1)/conj(tri(i,i));"},
{"lineNum":"  127","line":"            for (Index j=j2; j<j2+actual_cols; ++j)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  128","line":"            {"},
{"lineNum":"  129","line":"              if (TriStorageOrder==RowMajor)"},
{"lineNum":"  130","line":"              {"},
{"lineNum":"  131","line":"                Scalar b(0);"},
{"lineNum":"  132","line":"                const Scalar* l = &tri(i,s);"},
{"lineNum":"  133","line":"                typename OtherMapper::LinearMapper r = other.getLinearMapper(s,j);"},
{"lineNum":"  134","line":"                for (Index i3=0; i3<k; ++i3)"},
{"lineNum":"  135","line":"                  b += conj(l[i3]) * r(i3);"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"                other(i,j) = (other(i,j) - b)*a;"},
{"lineNum":"  138","line":"              }"},
{"lineNum":"  139","line":"              else"},
{"lineNum":"  140","line":"              {"},
{"lineNum":"  141","line":"                Scalar& otherij = other(i,j);"},
{"lineNum":"  142","line":"                otherij *= a;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  143","line":"                Scalar b = otherij;"},
{"lineNum":"  144","line":"                typename OtherMapper::LinearMapper r = other.getLinearMapper(s,j);"},
{"lineNum":"  145","line":"                typename TriMapper::LinearMapper l = tri.getLinearMapper(s,i);"},
{"lineNum":"  146","line":"                for (Index i3=0;i3<rs;++i3)","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  147","line":"                  r(i3) -= b * conj(l(i3));","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  148","line":"              }"},
{"lineNum":"  149","line":"            }"},
{"lineNum":"  150","line":"          }"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"          Index lengthTarget = actual_kc-k1-actualPanelWidth;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  153","line":"          Index startBlock   = IsLower ? k2+k1 : k2-k1-actualPanelWidth;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  154","line":"          Index blockBOffset = IsLower ? k1 : lengthTarget;"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"          // update the respective rows of B from other"},
{"lineNum":"  157","line":"          pack_rhs(blockB+actual_kc*j2, other.getSubMapper(startBlock,j2), actualPanelWidth, actual_cols, actual_kc, blockBOffset);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"          // GEBP"},
{"lineNum":"  160","line":"          if (lengthTarget>0)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  161","line":"          {"},
{"lineNum":"  162","line":"            Index startTarget  = IsLower ? k2+k1+actualPanelWidth : k2-actual_kc;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"            pack_lhs(blockA, tri.getSubMapper(startTarget,startBlock), actualPanelWidth, lengthTarget);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"            gebp_kernel(other.getSubMapper(startTarget,j2), blockA, blockB+actual_kc*j2, lengthTarget, actualPanelWidth, actual_cols, Scalar(-1),","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  167","line":"                        actualPanelWidth, actual_kc, 0, blockBOffset);"},
{"lineNum":"  168","line":"          }"},
{"lineNum":"  169","line":"        }"},
{"lineNum":"  170","line":"      }"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"      // R2 -= A21 * B => GEPP"},
{"lineNum":"  173","line":"      {"},
{"lineNum":"  174","line":"        Index start = IsLower ? k2+kc : 0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  175","line":"        Index end   = IsLower ? size : k2-kc;"},
{"lineNum":"  176","line":"        for(Index i2=start; i2<end; i2+=mc)","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  177","line":"        {"},
{"lineNum":"  178","line":"          const Index actual_mc = (std::min)(mc,end-i2);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  179","line":"          if (actual_mc>0)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  180","line":"          {"},
{"lineNum":"  181","line":"            pack_lhs(blockA, tri.getSubMapper(i2, IsLower ? k2 : k2-kc), actual_kc, actual_mc);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"            gebp_kernel(other.getSubMapper(i2, 0), blockA, blockB, actual_mc, actual_kc, cols, Scalar(-1), -1, -1, 0, 0);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  184","line":"          }"},
{"lineNum":"  185","line":"        }"},
{"lineNum":"  186","line":"      }"},
{"lineNum":"  187","line":"    }"},
{"lineNum":"  188","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"/* Optimized triangular solver with multiple left hand sides and the triangular matrix on the right"},
{"lineNum":"  191","line":" */"},
{"lineNum":"  192","line":"template <typename Scalar, typename Index, int Mode, bool Conjugate, int TriStorageOrder, int OtherInnerStride>"},
{"lineNum":"  193","line":"struct triangular_solve_matrix<Scalar,Index,OnTheRight,Mode,Conjugate,TriStorageOrder,ColMajor,OtherInnerStride>"},
{"lineNum":"  194","line":"{"},
{"lineNum":"  195","line":"  static EIGEN_DONT_INLINE void run("},
{"lineNum":"  196","line":"    Index size, Index otherSize,"},
{"lineNum":"  197","line":"    const Scalar* _tri, Index triStride,"},
{"lineNum":"  198","line":"    Scalar* _other, Index otherIncr, Index otherStride,"},
{"lineNum":"  199","line":"    level3_blocking<Scalar,Scalar>& blocking);"},
{"lineNum":"  200","line":"};"},
{"lineNum":"  201","line":"template <typename Scalar, typename Index, int Mode, bool Conjugate, int TriStorageOrder, int OtherInnerStride>"},
{"lineNum":"  202","line":"EIGEN_DONT_INLINE void triangular_solve_matrix<Scalar,Index,OnTheRight,Mode,Conjugate,TriStorageOrder,ColMajor,OtherInnerStride>::run("},
{"lineNum":"  203","line":"    Index size, Index otherSize,"},
{"lineNum":"  204","line":"    const Scalar* _tri, Index triStride,"},
{"lineNum":"  205","line":"    Scalar* _other, Index otherIncr, Index otherStride,"},
{"lineNum":"  206","line":"    level3_blocking<Scalar,Scalar>& blocking)"},
{"lineNum":"  207","line":"  {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  208","line":"    Index rows = otherSize;"},
{"lineNum":"  209","line":"    typedef typename NumTraits<Scalar>::Real RealScalar;"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"    typedef blas_data_mapper<Scalar, Index, ColMajor, Unaligned, OtherInnerStride> LhsMapper;"},
{"lineNum":"  212","line":"    typedef const_blas_data_mapper<Scalar, Index, TriStorageOrder> RhsMapper;"},
{"lineNum":"  213","line":"    LhsMapper lhs(_other, otherStride, otherIncr);"},
{"lineNum":"  214","line":"    RhsMapper rhs(_tri, triStride);"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"    typedef gebp_traits<Scalar,Scalar> Traits;"},
{"lineNum":"  217","line":"    enum {"},
{"lineNum":"  218","line":"      RhsStorageOrder   = TriStorageOrder,"},
{"lineNum":"  219","line":"      SmallPanelWidth   = EIGEN_PLAIN_ENUM_MAX(Traits::mr,Traits::nr),"},
{"lineNum":"  220","line":"      IsLower = (Mode&Lower) == Lower"},
{"lineNum":"  221","line":"    };"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"    Index kc = blocking.kc();                   // cache block size along the K direction"},
{"lineNum":"  224","line":"    Index mc = (std::min)(rows,blocking.mc());  // cache block size along the M direction","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"    std::size_t sizeA = kc*mc;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  227","line":"    std::size_t sizeB = kc*size;"},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"    ei_declare_aligned_stack_constructed_variable(Scalar, blockA, sizeA, blocking.blockA());","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"  230","line":"    ei_declare_aligned_stack_constructed_variable(Scalar, blockB, sizeB, blocking.blockB());","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"    conj_if<Conjugate> conj;"},
{"lineNum":"  233","line":"    gebp_kernel<Scalar, Scalar, Index, LhsMapper, Traits::mr, Traits::nr, false, Conjugate> gebp_kernel;"},
{"lineNum":"  234","line":"    gemm_pack_rhs<Scalar, Index, RhsMapper, Traits::nr, RhsStorageOrder> pack_rhs;"},
{"lineNum":"  235","line":"    gemm_pack_rhs<Scalar, Index, RhsMapper, Traits::nr, RhsStorageOrder,false,true> pack_rhs_panel;"},
{"lineNum":"  236","line":"    gemm_pack_lhs<Scalar, Index, LhsMapper, Traits::mr, Traits::LhsProgress, typename Traits::LhsPacket4Packing, ColMajor, false, true> pack_lhs_panel;"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"    for(Index k2=IsLower ? size : 0;","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"  239","line":"        IsLower ? k2>0 : k2<size;","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  240","line":"        IsLower ? k2-=kc : k2+=kc)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  241","line":"    {"},
{"lineNum":"  242","line":"      const Index actual_kc = (std::min)(IsLower ? k2 : size-k2, kc);","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  243","line":"      Index actual_k2 = IsLower ? k2-actual_kc : k2 ;"},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"      Index startPanel = IsLower ? 0 : k2+actual_kc;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  246","line":"      Index rs = IsLower ? actual_k2 : size - actual_k2 - actual_kc;"},
{"lineNum":"  247","line":"      Scalar* geb = blockB+actual_kc*actual_kc;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"      if (rs>0) pack_rhs(geb, rhs.getSubMapper(actual_k2,startPanel), actual_kc, rs);","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  250","line":""},
{"lineNum":"  251","line":"      // triangular packing (we only pack the panels off the diagonal,"},
{"lineNum":"  252","line":"      // neglecting the blocks overlapping the diagonal"},
{"lineNum":"  253","line":"      {"},
{"lineNum":"  254","line":"        for (Index j2=0; j2<actual_kc; j2+=SmallPanelWidth)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  255","line":"        {"},
{"lineNum":"  256","line":"          Index actualPanelWidth = std::min<Index>(actual_kc-j2, SmallPanelWidth);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  257","line":"          Index actual_j2 = actual_k2 + j2;"},
{"lineNum":"  258","line":"          Index panelOffset = IsLower ? j2+actualPanelWidth : 0;"},
{"lineNum":"  259","line":"          Index panelLength = IsLower ? actual_kc-j2-actualPanelWidth : j2;"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"          if (panelLength>0)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  262","line":"          pack_rhs_panel(blockB+j2*actual_kc,","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  263","line":"                         rhs.getSubMapper(actual_k2+panelOffset, actual_j2),","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  264","line":"                         panelLength, actualPanelWidth,"},
{"lineNum":"  265","line":"                         actual_kc, panelOffset);"},
{"lineNum":"  266","line":"        }"},
{"lineNum":"  267","line":"      }"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"      for(Index i2=0; i2<rows; i2+=mc)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  270","line":"      {"},
{"lineNum":"  271","line":"        const Index actual_mc = (std::min)(mc,rows-i2);","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  272","line":""},
{"lineNum":"  273","line":"        // triangular solver kernel"},
{"lineNum":"  274","line":"        {"},
{"lineNum":"  275","line":"          // for each small block of the diagonal (=> vertical panels of rhs)"},
{"lineNum":"  276","line":"          for (Index j2 = IsLower","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  277","line":"                      ? (actual_kc - ((actual_kc%SmallPanelWidth) ? Index(actual_kc%SmallPanelWidth)"},
{"lineNum":"  278","line":"                                                                  : Index(SmallPanelWidth)))"},
{"lineNum":"  279","line":"                      : 0;"},
{"lineNum":"  280","line":"               IsLower ? j2>=0 : j2<actual_kc;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  281","line":"               IsLower ? j2-=SmallPanelWidth : j2+=SmallPanelWidth)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  282","line":"          {"},
{"lineNum":"  283","line":"            Index actualPanelWidth = std::min<Index>(actual_kc-j2, SmallPanelWidth);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  284","line":"            Index absolute_j2 = actual_k2 + j2;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  285","line":"            Index panelOffset = IsLower ? j2+actualPanelWidth : 0;"},
{"lineNum":"  286","line":"            Index panelLength = IsLower ? actual_kc - j2 - actualPanelWidth : j2;"},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"            // GEBP"},
{"lineNum":"  289","line":"            if(panelLength>0)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  290","line":"            {"},
{"lineNum":"  291","line":"              gebp_kernel(lhs.getSubMapper(i2,absolute_j2),","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  292","line":"                          blockA, blockB+j2*actual_kc,","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  293","line":"                          actual_mc, panelLength, actualPanelWidth,"},
{"lineNum":"  294","line":"                          Scalar(-1),"},
{"lineNum":"  295","line":"                          actual_kc, actual_kc, // strides"},
{"lineNum":"  296","line":"                          panelOffset, panelOffset); // offsets"},
{"lineNum":"  297","line":"            }"},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"            // unblocked triangular solve"},
{"lineNum":"  300","line":"            for (Index k=0; k<actualPanelWidth; ++k)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  301","line":"            {"},
{"lineNum":"  302","line":"              Index j = IsLower ? absolute_j2+actualPanelWidth-k-1 : absolute_j2+k;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  303","line":""},
{"lineNum":"  304","line":"              typename LhsMapper::LinearMapper r = lhs.getLinearMapper(i2,j);"},
{"lineNum":"  305","line":"              for (Index k3=0; k3<k; ++k3)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  306","line":"              {"},
{"lineNum":"  307","line":"                Scalar b = conj(rhs(IsLower ? j+1+k3 : absolute_j2+k3,j));"},
{"lineNum":"  308","line":"                typename LhsMapper::LinearMapper a = lhs.getLinearMapper(i2,IsLower ? j+1+k3 : absolute_j2+k3);"},
{"lineNum":"  309","line":"                for (Index i=0; i<actual_mc; ++i)","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":"  310","line":"                  r(i) -= a(i) * b;","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"  311","line":"              }"},
{"lineNum":"  312","line":"              if((Mode & UnitDiag)==0)"},
{"lineNum":"  313","line":"              {"},
{"lineNum":"  314","line":"                Scalar inv_rjj = RealScalar(1)/conj(rhs(j,j));"},
{"lineNum":"  315","line":"                for (Index i=0; i<actual_mc; ++i)","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  316","line":"                  r(i) *= inv_rjj;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  317","line":"              }"},
{"lineNum":"  318","line":"            }"},
{"lineNum":"  319","line":""},
{"lineNum":"  320","line":"            // pack the just computed part of lhs to A"},
{"lineNum":"  321","line":"            pack_lhs_panel(blockA, lhs.getSubMapper(i2,absolute_j2),","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  322","line":"                           actualPanelWidth, actual_mc,"},
{"lineNum":"  323","line":"                           actual_kc, j2);"},
{"lineNum":"  324","line":"          }"},
{"lineNum":"  325","line":"        }"},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"        if (rs>0)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  328","line":"          gebp_kernel(lhs.getSubMapper(i2, startPanel), blockA, geb,","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  329","line":"                      actual_mc, actual_kc, rs, Scalar(-1),"},
{"lineNum":"  330","line":"                      -1, -1, 0, 0);"},
{"lineNum":"  331","line":"      }"},
{"lineNum":"  332","line":"    }"},
{"lineNum":"  333","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  334","line":""},
{"lineNum":"  335","line":"} // end namespace internal"},
{"lineNum":"  336","line":""},
{"lineNum":"  337","line":"} // end namespace Eigen"},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"#endif // EIGEN_TRIANGULAR_SOLVER_MATRIX_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 72, "covered" : 0,};
var merged_data = [];
