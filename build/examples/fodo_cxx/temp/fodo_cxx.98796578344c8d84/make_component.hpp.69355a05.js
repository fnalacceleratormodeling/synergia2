var data = {lines:[
{"lineNum":"    1","line":"/*============================================================================="},
{"lineNum":"    2","line":"  Copyright (c) 2001-2011 Joel de Guzman"},
{"lineNum":"    3","line":"  http://spirit.sourceforge.net/"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"  Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    6","line":"  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    7","line":"=============================================================================*/"},
{"lineNum":"    8","line":"#ifndef BOOST_SPIRIT_MAKE_COMPONENT_OCTOBER_16_2008_1250PM"},
{"lineNum":"    9","line":"#define BOOST_SPIRIT_MAKE_COMPONENT_OCTOBER_16_2008_1250PM"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"#if defined(_MSC_VER)"},
{"lineNum":"   12","line":"#pragma once"},
{"lineNum":"   13","line":"#endif"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"#include <boost/spirit/include/phoenix_core.hpp>"},
{"lineNum":"   16","line":"#include <boost/proto/proto.hpp>"},
{"lineNum":"   17","line":"#include <boost/spirit/home/support/detail/make_cons.hpp>"},
{"lineNum":"   18","line":"#include <boost/spirit/home/support/modify.hpp>"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"namespace boost { namespace spirit"},
{"lineNum":"   21","line":"{"},
{"lineNum":"   22","line":"    // There is no real \"component\" class. Each domain is responsible"},
{"lineNum":"   23","line":"    // for creating its own components. You need to specialize this for"},
{"lineNum":"   24","line":"    // each component in your domain. Use this as a guide."},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"    template <typename Domain, typename Tag, typename Enable = void>"},
{"lineNum":"   27","line":"    struct make_component"},
{"lineNum":"   28","line":"    {"},
{"lineNum":"   29","line":"        template <typename Sig>"},
{"lineNum":"   30","line":"        struct result;"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"        template <typename This, typename Elements, typename Modifiers>"},
{"lineNum":"   33","line":"        struct result<This(Elements, Modifiers)>;"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"        template <typename Elements, typename Modifiers>"},
{"lineNum":"   36","line":"        typename result<make_component(Elements, Modifiers)>::type"},
{"lineNum":"   37","line":"        operator()(Elements const& elements, Modifiers const& modifiers) const;"},
{"lineNum":"   38","line":"    };"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"    namespace tag"},
{"lineNum":"   41","line":"    {"},
{"lineNum":"   42","line":"        // Normally, we use proto tags as-is to distinguish operators."},
{"lineNum":"   43","line":"        // The special case is proto::tag::subscript. Spirit uses this"},
{"lineNum":"   44","line":"        // as either sementic actions or directives. To distinguish between"},
{"lineNum":"   45","line":"        // the two, we use these special tags below."},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"        struct directive;"},
{"lineNum":"   48","line":"        struct action;"},
{"lineNum":"   49","line":"    }"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"    template <typename Domain, typename T, typename Enable = void>"},
{"lineNum":"   52","line":"    struct flatten_tree;"},
{"lineNum":"   53","line":"}}"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"namespace boost { namespace spirit { namespace detail"},
{"lineNum":"   56","line":"{"},
{"lineNum":"   57","line":"    template <typename Expr, typename State, typename Data, typename Domain>"},
{"lineNum":"   58","line":"    struct make_terminal_impl"},
{"lineNum":"   59","line":"      : proto::transform_impl<Expr, State, Data>"},
{"lineNum":"   60","line":"    {"},
{"lineNum":"   61","line":"        typedef typename"},
{"lineNum":"   62","line":"            proto::result_of::value<Expr>::type"},
{"lineNum":"   63","line":"        value;"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"        typedef typename result_of::make_cons<value>::type elements;"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"        typedef"},
{"lineNum":"   68","line":"            make_component<Domain, proto::tag::terminal>"},
{"lineNum":"   69","line":"        make_component_;"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"        typedef typename"},
{"lineNum":"   72","line":"            make_component_::template"},
{"lineNum":"   73","line":"                result<make_component_(elements, Data)>::type"},
{"lineNum":"   74","line":"        result_type;"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"        result_type operator()("},
{"lineNum":"   77","line":"            typename make_terminal_impl::expr_param expr"},
{"lineNum":"   78","line":"          , typename make_terminal_impl::state_param /*state*/"},
{"lineNum":"   79","line":"          , typename make_terminal_impl::data_param data"},
{"lineNum":"   80","line":"        ) const"},
{"lineNum":"   81","line":"        {"},
{"lineNum":"   82","line":"            return typename make_terminal_impl::make_component_()("},
{"lineNum":"   83","line":"                detail::make_cons(proto::value(expr))"},
{"lineNum":"   84","line":"              , data"},
{"lineNum":"   85","line":"            );"},
{"lineNum":"   86","line":"        }"},
{"lineNum":"   87","line":"    };"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"    template <typename Expr, typename State, typename Data, typename Domain>"},
{"lineNum":"   90","line":"    struct make_terminal_impl<phoenix::actor<Expr>, State, Data, Domain>"},
{"lineNum":"   91","line":"      : proto::transform_impl<phoenix::actor<Expr>, State, Data>"},
{"lineNum":"   92","line":"    {"},
{"lineNum":"   93","line":"        typedef phoenix::actor<Expr> value;"},
{"lineNum":"   94","line":"        typedef typename result_of::make_cons<value>::type elements;"},
{"lineNum":"   95","line":"        typedef make_component<Domain, proto::tag::terminal> make_component_;"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"        typedef typename"},
{"lineNum":"   98","line":"            make_component_::template"},
{"lineNum":"   99","line":"                result<make_component_(elements, Data)>::type"},
{"lineNum":"  100","line":"        result_type;"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"        result_type operator()("},
{"lineNum":"  103","line":"            typename make_terminal_impl::expr_param expr"},
{"lineNum":"  104","line":"          , typename make_terminal_impl::state_param /*state*/"},
{"lineNum":"  105","line":"          , typename make_terminal_impl::data_param data"},
{"lineNum":"  106","line":"        ) const"},
{"lineNum":"  107","line":"        {"},
{"lineNum":"  108","line":"            return typename make_terminal_impl::make_component_()("},
{"lineNum":"  109","line":"                detail::make_cons(expr)"},
{"lineNum":"  110","line":"              , data"},
{"lineNum":"  111","line":"            );"},
{"lineNum":"  112","line":"        }"},
{"lineNum":"  113","line":"    };"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"    template <typename Expr, typename State, typename Data, typename Domain>"},
{"lineNum":"  116","line":"    struct make_terminal_impl<phoenix::actor<Expr> &, State, Data, Domain>"},
{"lineNum":"  117","line":"        : make_terminal_impl<phoenix::actor<Expr>, State, Data, Domain>"},
{"lineNum":"  118","line":"    {};"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"    template <typename Expr, typename State, typename Data, typename Domain>"},
{"lineNum":"  121","line":"    struct make_terminal_impl<phoenix::actor<Expr> const &, State, Data, Domain>"},
{"lineNum":"  122","line":"        : make_terminal_impl<phoenix::actor<Expr>, State, Data, Domain>"},
{"lineNum":"  123","line":"    {};"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"    template <typename Domain>"},
{"lineNum":"  126","line":"    struct make_terminal : proto::transform<make_terminal<Domain> >"},
{"lineNum":"  127","line":"    {"},
{"lineNum":"  128","line":"        template<typename Expr, typename State, typename Data>"},
{"lineNum":"  129","line":"        struct impl : make_terminal_impl<Expr, State, Data, Domain> {};"},
{"lineNum":"  130","line":"    };"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"    template <typename Domain, typename Tag, typename Grammar>"},
{"lineNum":"  133","line":"    struct make_unary : proto::transform<make_unary<Domain, Tag, Grammar> >"},
{"lineNum":"  134","line":"    {"},
{"lineNum":"  135","line":"        template<typename Expr, typename State, typename Data>"},
{"lineNum":"  136","line":"        struct impl : proto::transform_impl<Expr, State, Data>"},
{"lineNum":"  137","line":"        {"},
{"lineNum":"  138","line":"            typedef typename"},
{"lineNum":"  139","line":"                proto::result_of::child_c<Expr, 0>::type"},
{"lineNum":"  140","line":"            child;"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"            typedef typename Grammar::"},
{"lineNum":"  143","line":"                template result<Grammar(child, State, Data)>::type"},
{"lineNum":"  144","line":"            child_component;"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"            typedef typename"},
{"lineNum":"  147","line":"                result_of::make_cons<child_component>::type"},
{"lineNum":"  148","line":"            elements;"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"            typedef make_component<Domain, Tag> make_component_;"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"            typedef typename"},
{"lineNum":"  153","line":"                make_component_::template"},
{"lineNum":"  154","line":"                    result<make_component_(elements, Data)>::type"},
{"lineNum":"  155","line":"            result_type;"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"            result_type operator()("},
{"lineNum":"  158","line":"                typename impl::expr_param expr"},
{"lineNum":"  159","line":"              , typename impl::state_param state"},
{"lineNum":"  160","line":"              , typename impl::data_param data"},
{"lineNum":"  161","line":"            ) const"},
{"lineNum":"  162","line":"            {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  163","line":"                return typename impl::make_component_()(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  164","line":"                    detail::make_cons("},
{"lineNum":"  165","line":"                        Grammar()(proto::child(expr), state, data))"},
{"lineNum":"  166","line":"                  , data"},
{"lineNum":"  167","line":"                );"},
{"lineNum":"  168","line":"            }"},
{"lineNum":"  169","line":"        };"},
{"lineNum":"  170","line":"    };"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"    // un-flattened version"},
{"lineNum":"  173","line":"    template <typename Domain, typename Tag, typename Grammar,"},
{"lineNum":"  174","line":"        bool flatten = flatten_tree<Domain, Tag>::value>"},
{"lineNum":"  175","line":"    struct make_binary"},
{"lineNum":"  176","line":"    {"},
{"lineNum":"  177","line":"        template<typename Expr, typename State, typename Data>"},
{"lineNum":"  178","line":"        struct impl : proto::transform_impl<Expr, State, Data>"},
{"lineNum":"  179","line":"        {"},
{"lineNum":"  180","line":"            typedef typename Grammar::"},
{"lineNum":"  181","line":"                template result<Grammar("},
{"lineNum":"  182","line":"                    typename proto::result_of::child_c<Expr, 0>::type"},
{"lineNum":"  183","line":"                  , State, Data)>::type"},
{"lineNum":"  184","line":"            lhs_component;"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"            typedef typename Grammar::"},
{"lineNum":"  187","line":"                template result<Grammar("},
{"lineNum":"  188","line":"                    typename proto::result_of::child_c<Expr, 1>::type"},
{"lineNum":"  189","line":"                  , State, Data)>::type"},
{"lineNum":"  190","line":"            rhs_component;"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"            typedef typename"},
{"lineNum":"  193","line":"                result_of::make_cons<"},
{"lineNum":"  194","line":"                    lhs_component"},
{"lineNum":"  195","line":"                  , typename result_of::make_cons<rhs_component>::type"},
{"lineNum":"  196","line":"                >::type"},
{"lineNum":"  197","line":"            elements_type;"},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"            typedef make_component<Domain, Tag> make_component_;"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"            typedef typename"},
{"lineNum":"  202","line":"                make_component_::template"},
{"lineNum":"  203","line":"                    result<make_component_(elements_type, Data)>::type"},
{"lineNum":"  204","line":"            result_type;"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"            result_type operator()("},
{"lineNum":"  207","line":"                typename impl::expr_param expr"},
{"lineNum":"  208","line":"              , typename impl::state_param state"},
{"lineNum":"  209","line":"              , typename impl::data_param data"},
{"lineNum":"  210","line":"            ) const"},
{"lineNum":"  211","line":"            {"},
{"lineNum":"  212","line":"                elements_type elements ="},
{"lineNum":"  213","line":"                    detail::make_cons("},
{"lineNum":"  214","line":"                        Grammar()("},
{"lineNum":"  215","line":"                            proto::child_c<0>(expr), state, data)       // LHS"},
{"lineNum":"  216","line":"                      , detail::make_cons("},
{"lineNum":"  217","line":"                            Grammar()("},
{"lineNum":"  218","line":"                                proto::child_c<1>(expr), state, data)   // RHS"},
{"lineNum":"  219","line":"                        )"},
{"lineNum":"  220","line":"                    );"},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"                return make_component_()(elements, data);"},
{"lineNum":"  223","line":"            }"},
{"lineNum":"  224","line":"        };"},
{"lineNum":"  225","line":"    };"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"    template <typename Grammar>"},
{"lineNum":"  228","line":"    struct make_binary_helper : proto::transform<make_binary_helper<Grammar> >"},
{"lineNum":"  229","line":"    {"},
{"lineNum":"  230","line":"        template<typename Expr, typename State, typename Data>"},
{"lineNum":"  231","line":"        struct impl : proto::transform_impl<Expr, State, Data>"},
{"lineNum":"  232","line":"        {"},
{"lineNum":"  233","line":"            typedef typename Grammar::"},
{"lineNum":"  234","line":"                template result<Grammar(Expr, State, Data)>::type"},
{"lineNum":"  235","line":"            lhs;"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"            typedef typename result_of::make_cons<lhs, State>::type result_type;"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"            result_type operator()("},
{"lineNum":"  240","line":"                typename impl::expr_param expr"},
{"lineNum":"  241","line":"              , typename impl::state_param state"},
{"lineNum":"  242","line":"              , typename impl::data_param data"},
{"lineNum":"  243","line":"            ) const"},
{"lineNum":"  244","line":"            {","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"  245","line":"                return detail::make_cons(Grammar()(expr, state, data), state);","class":"lineNoCov","hits":"0","possible_hits":"19",},
{"lineNum":"  246","line":"            }"},
{"lineNum":"  247","line":"        };"},
{"lineNum":"  248","line":"    };"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"    // Flattened version"},
{"lineNum":"  251","line":"    template <typename Domain, typename Tag, typename Grammar>"},
{"lineNum":"  252","line":"    struct make_binary<Domain, Tag, Grammar, true>"},
{"lineNum":"  253","line":"      : proto::transform<make_binary<Domain, Tag, Grammar> >"},
{"lineNum":"  254","line":"    {"},
{"lineNum":"  255","line":"        template<typename Expr, typename State, typename Data>"},
{"lineNum":"  256","line":"        struct impl : proto::transform_impl<Expr, State, Data>"},
{"lineNum":"  257","line":"        {"},
{"lineNum":"  258","line":"            typedef typename"},
{"lineNum":"  259","line":"                proto::reverse_fold_tree<"},
{"lineNum":"  260","line":"                    proto::_"},
{"lineNum":"  261","line":"                  , proto::make<fusion::nil_>"},
{"lineNum":"  262","line":"                  , make_binary_helper<Grammar>"},
{"lineNum":"  263","line":"                >::template impl<Expr, State, Data>"},
{"lineNum":"  264","line":"            reverse_fold_tree;"},
{"lineNum":"  265","line":""},
{"lineNum":"  266","line":"            typedef typename reverse_fold_tree::result_type elements;"},
{"lineNum":"  267","line":"            typedef make_component<Domain, Tag> make_component_;"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"            typedef typename"},
{"lineNum":"  270","line":"                make_component_::template"},
{"lineNum":"  271","line":"                    result<make_component_(elements, Data)>::type"},
{"lineNum":"  272","line":"            result_type;"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"            result_type operator()("},
{"lineNum":"  275","line":"                typename impl::expr_param expr"},
{"lineNum":"  276","line":"              , typename impl::state_param state"},
{"lineNum":"  277","line":"              , typename impl::data_param data"},
{"lineNum":"  278","line":"            ) const"},
{"lineNum":"  279","line":"            {","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  280","line":"                return make_component_()(","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  281","line":"                    reverse_fold_tree()(expr, state, data), data);","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  282","line":"            }"},
{"lineNum":"  283","line":"        };"},
{"lineNum":"  284","line":"    };"},
{"lineNum":"  285","line":""},
{"lineNum":"  286","line":"    template <typename Domain, typename Grammar>"},
{"lineNum":"  287","line":"    struct make_directive : proto::transform<make_directive<Domain, Grammar> >"},
{"lineNum":"  288","line":"    {"},
{"lineNum":"  289","line":"        template<typename Expr, typename State, typename Data>"},
{"lineNum":"  290","line":"        struct impl : proto::transform_impl<Expr, State, Data>"},
{"lineNum":"  291","line":"        {"},
{"lineNum":"  292","line":"            typedef typename"},
{"lineNum":"  293","line":"                proto::result_of::child_c<Expr, 0>::type"},
{"lineNum":"  294","line":"            lhs;"},
{"lineNum":"  295","line":""},
{"lineNum":"  296","line":"            typedef typename"},
{"lineNum":"  297","line":"                proto::result_of::value<lhs>::type"},
{"lineNum":"  298","line":"            tag_type;"},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"            typedef typename modify<Domain>::"},
{"lineNum":"  301","line":"                template result<modify<Domain>(tag_type, Data)>::type"},
{"lineNum":"  302","line":"            modifier_type;"},
{"lineNum":"  303","line":""},
{"lineNum":"  304","line":"            typedef typename Grammar::"},
{"lineNum":"  305","line":"                template result<Grammar("},
{"lineNum":"  306","line":"                    typename proto::result_of::child_c<Expr, 1>::type"},
{"lineNum":"  307","line":"                  , State"},
{"lineNum":"  308","line":"                  , modifier_type"},
{"lineNum":"  309","line":"                )>::type"},
{"lineNum":"  310","line":"            rhs_component;"},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":"            typedef typename"},
{"lineNum":"  313","line":"                result_of::make_cons<"},
{"lineNum":"  314","line":"                    tag_type"},
{"lineNum":"  315","line":"                  , typename result_of::make_cons<rhs_component>::type"},
{"lineNum":"  316","line":"                >::type"},
{"lineNum":"  317","line":"            elements_type;"},
{"lineNum":"  318","line":""},
{"lineNum":"  319","line":"            typedef make_component<Domain, tag::directive> make_component_;"},
{"lineNum":"  320","line":""},
{"lineNum":"  321","line":"            typedef typename"},
{"lineNum":"  322","line":"                make_component_::template"},
{"lineNum":"  323","line":"                    result<make_component_(elements_type, Data)>::type"},
{"lineNum":"  324","line":"            result_type;"},
{"lineNum":"  325","line":""},
{"lineNum":"  326","line":"            result_type operator()("},
{"lineNum":"  327","line":"                typename impl::expr_param expr"},
{"lineNum":"  328","line":"              , typename impl::state_param state"},
{"lineNum":"  329","line":"              , typename impl::data_param data"},
{"lineNum":"  330","line":"            ) const"},
{"lineNum":"  331","line":"            {","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"  332","line":"                tag_type tag = proto::value(proto::child_c<0>(expr));"},
{"lineNum":"  333","line":"                typename remove_reference<modifier_type>::type"},
{"lineNum":"  334","line":"                    modifier = modify<Domain>()(tag, data);"},
{"lineNum":"  335","line":""},
{"lineNum":"  336","line":"                elements_type elements ="},
{"lineNum":"  337","line":"                    detail::make_cons(","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  338","line":"                        tag                                 // LHS"},
{"lineNum":"  339","line":"                      , detail::make_cons("},
{"lineNum":"  340","line":"                            Grammar()("},
{"lineNum":"  341","line":"                                proto::child_c<1>(expr)     // RHS"},
{"lineNum":"  342","line":"                              , state, modifier)"},
{"lineNum":"  343","line":"                        )"},
{"lineNum":"  344","line":"                    );"},
{"lineNum":"  345","line":""},
{"lineNum":"  346","line":"                return make_component_()(elements, data);"},
{"lineNum":"  347","line":"            }","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":"  348","line":"        };"},
{"lineNum":"  349","line":"    };"},
{"lineNum":"  350","line":""},
{"lineNum":"  351","line":"    template <typename Domain, typename Grammar>"},
{"lineNum":"  352","line":"    struct make_action : proto::transform<make_action<Domain, Grammar> >"},
{"lineNum":"  353","line":"    {"},
{"lineNum":"  354","line":"        template<typename Expr, typename State, typename Data>"},
{"lineNum":"  355","line":"        struct impl : proto::transform_impl<Expr, State, Data>"},
{"lineNum":"  356","line":"        {"},
{"lineNum":"  357","line":"            typedef typename Grammar::"},
{"lineNum":"  358","line":"                template result<Grammar("},
{"lineNum":"  359","line":"                    typename proto::result_of::child_c<Expr, 0>::type"},
{"lineNum":"  360","line":"                  , State"},
{"lineNum":"  361","line":"                  , Data"},
{"lineNum":"  362","line":"                )>::type"},
{"lineNum":"  363","line":"            lhs_component;"},
{"lineNum":"  364","line":""},
{"lineNum":"  365","line":"            typedef"},
{"lineNum":"  366","line":"                typename mpl::eval_if_c<"},
{"lineNum":"  367","line":"                    phoenix::is_actor<"},
{"lineNum":"  368","line":"                        typename proto::result_of::child_c<Expr, 1>::type"},
{"lineNum":"  369","line":"                    >::type::value"},
{"lineNum":"  370","line":"                  , proto::result_of::child_c<Expr, 1>"},
{"lineNum":"  371","line":"                  , proto::result_of::value<"},
{"lineNum":"  372","line":"                        typename proto::result_of::child_c<Expr, 1>::type"},
{"lineNum":"  373","line":"                    >"},
{"lineNum":"  374","line":"                >::type"},
{"lineNum":"  375","line":"                rhs_component;"},
{"lineNum":"  376","line":""},
{"lineNum":"  377","line":"            typedef typename"},
{"lineNum":"  378","line":"                result_of::make_cons<"},
{"lineNum":"  379","line":"                    lhs_component"},
{"lineNum":"  380","line":"                  , typename result_of::make_cons<rhs_component>::type"},
{"lineNum":"  381","line":"                >::type"},
{"lineNum":"  382","line":"            elements_type;"},
{"lineNum":"  383","line":""},
{"lineNum":"  384","line":"            typedef make_component<Domain, tag::action> make_component_;"},
{"lineNum":"  385","line":""},
{"lineNum":"  386","line":"            typedef typename"},
{"lineNum":"  387","line":"                make_component_::template"},
{"lineNum":"  388","line":"                    result<make_component_(elements_type, Data)>::type"},
{"lineNum":"  389","line":"            result_type;"},
{"lineNum":"  390","line":""},
{"lineNum":"  391","line":"            result_type operator()("},
{"lineNum":"  392","line":"                typename impl::expr_param expr"},
{"lineNum":"  393","line":"              , typename impl::state_param state"},
{"lineNum":"  394","line":"              , typename impl::data_param data"},
{"lineNum":"  395","line":"            ) const"},
{"lineNum":"  396","line":"            {"},
{"lineNum":"  397","line":"                return"},
{"lineNum":"  398","line":"                    (*this)(","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  399","line":"                        expr"},
{"lineNum":"  400","line":"                      , state"},
{"lineNum":"  401","line":"                      , data"},
{"lineNum":"  402","line":"                      , typename phoenix::is_actor<"},
{"lineNum":"  403","line":"                            typename proto::result_of::child_c<Expr, 1>::type"},
{"lineNum":"  404","line":"                        >::type()"},
{"lineNum":"  405","line":"                    );"},
{"lineNum":"  406","line":"            }"},
{"lineNum":"  407","line":""},
{"lineNum":"  408","line":"            result_type operator()("},
{"lineNum":"  409","line":"                typename impl::expr_param expr"},
{"lineNum":"  410","line":"              , typename impl::state_param state"},
{"lineNum":"  411","line":"              , typename impl::data_param data"},
{"lineNum":"  412","line":"              , mpl::false_"},
{"lineNum":"  413","line":"            ) const"},
{"lineNum":"  414","line":"            {"},
{"lineNum":"  415","line":"                elements_type elements ="},
{"lineNum":"  416","line":"                    detail::make_cons("},
{"lineNum":"  417","line":"                        Grammar()("},
{"lineNum":"  418","line":"                            proto::child_c<0>(expr), state, data)   // LHS"},
{"lineNum":"  419","line":"                      , detail::make_cons("},
{"lineNum":"  420","line":"                            proto::value(proto::child_c<1>(expr)))  // RHS"},
{"lineNum":"  421","line":"                    );"},
{"lineNum":"  422","line":""},
{"lineNum":"  423","line":"                return make_component_()(elements, data);"},
{"lineNum":"  424","line":"            }"},
{"lineNum":"  425","line":""},
{"lineNum":"  426","line":"            result_type operator()("},
{"lineNum":"  427","line":"                typename impl::expr_param expr"},
{"lineNum":"  428","line":"              , typename impl::state_param state"},
{"lineNum":"  429","line":"              , typename impl::data_param data"},
{"lineNum":"  430","line":"              , mpl::true_"},
{"lineNum":"  431","line":"            ) const"},
{"lineNum":"  432","line":"            {","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  433","line":"                elements_type elements ="},
{"lineNum":"  434","line":"                    detail::make_cons("},
{"lineNum":"  435","line":"                        Grammar()("},
{"lineNum":"  436","line":"                            proto::child_c<0>(expr), state, data)   // LHS"},
{"lineNum":"  437","line":"                      , detail::make_cons("},
{"lineNum":"  438","line":"                            proto::child_c<1>(expr))               // RHS"},
{"lineNum":"  439","line":"                    );"},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"                return make_component_()(elements, data);"},
{"lineNum":"  442","line":"            }","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  443","line":"        };"},
{"lineNum":"  444","line":"    };"},
{"lineNum":"  445","line":"}}}"},
{"lineNum":"  446","line":""},
{"lineNum":"  447","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 13, "covered" : 0,};
var merged_data = [];
