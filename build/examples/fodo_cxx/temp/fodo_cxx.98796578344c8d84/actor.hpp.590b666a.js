var data = {lines:[
{"lineNum":"    1","line":"/*============================================================================="},
{"lineNum":"    2","line":"    Copyright (c) 2005-2010 Joel de Guzman"},
{"lineNum":"    3","line":"    Copyright (c) 2010 Eric Niebler"},
{"lineNum":"    4","line":"    Copyright (c) 2010 Thomas Heller"},
{"lineNum":"    5","line":"    Copyright (c) 2014 John Fletcher"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"    Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    8","line":"    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    9","line":"==============================================================================*/"},
{"lineNum":"   10","line":"#ifndef BOOST_PHOENIX_CORE_ACTOR_HPP"},
{"lineNum":"   11","line":"#define BOOST_PHOENIX_CORE_ACTOR_HPP"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"#include <boost/phoenix/core/limits.hpp>"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"#include <boost/is_placeholder.hpp>"},
{"lineNum":"   16","line":"#include <boost/mpl/identity.hpp>"},
{"lineNum":"   17","line":"#include <boost/mpl/eval_if.hpp>"},
{"lineNum":"   18","line":"#include <boost/phoenix/core/domain.hpp>"},
{"lineNum":"   19","line":"#include <boost/phoenix/core/environment.hpp>"},
{"lineNum":"   20","line":"#include <boost/phoenix/core/is_nullary.hpp>"},
{"lineNum":"   21","line":"#include <boost/phoenix/core/meta_grammar.hpp>"},
{"lineNum":"   22","line":"#include <boost/phoenix/support/iterate.hpp>"},
{"lineNum":"   23","line":"#include <boost/phoenix/support/vector.hpp>"},
{"lineNum":"   24","line":"#include <boost/proto/extends.hpp>"},
{"lineNum":"   25","line":"#include <boost/proto/make_expr.hpp>"},
{"lineNum":"   26","line":"#include <boost/utility/result_of.hpp>"},
{"lineNum":"   27","line":"#include <boost/mpl/void.hpp>"},
{"lineNum":"   28","line":"#include <cstring>"},
{"lineNum":"   29","line":"#ifndef BOOST_PHOENIX_NO_VARIADIC_ACTOR"},
{"lineNum":"   30","line":"#   include <boost/mpl/if.hpp>"},
{"lineNum":"   31","line":"#   include <boost/type_traits/is_reference.hpp>"},
{"lineNum":"   32","line":"#   include <boost/phoenix/core/detail/index_sequence.hpp>"},
{"lineNum":"   33","line":"#endif"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"#ifdef BOOST_MSVC"},
{"lineNum":"   36","line":"#pragma warning(push)"},
{"lineNum":"   37","line":"#pragma warning(disable: 4522) // \'this\' used in base member initializer list"},
{"lineNum":"   38","line":"#pragma warning(disable: 4510) // default constructor could not be generated"},
{"lineNum":"   39","line":"#pragma warning(disable: 4610) // can never be instantiated - user defined cons"},
{"lineNum":"   40","line":"#endif"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"namespace boost { namespace phoenix"},
{"lineNum":"   43","line":"{"},
{"lineNum":"   44","line":"    template <typename Expr>"},
{"lineNum":"   45","line":"    struct actor;"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"    namespace detail"},
{"lineNum":"   48","line":"    {"},
{"lineNum":"   49","line":"        struct error_expecting_arguments"},
{"lineNum":"   50","line":"        {"},
{"lineNum":"   51","line":"            template <typename T>"},
{"lineNum":"   52","line":"            error_expecting_arguments(T const&) {}"},
{"lineNum":"   53","line":"        };"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"        struct error_invalid_lambda_expr"},
{"lineNum":"   56","line":"        {"},
{"lineNum":"   57","line":"            template <typename T>"},
{"lineNum":"   58","line":"            error_invalid_lambda_expr(T const&) {}"},
{"lineNum":"   59","line":"        };"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"        template <typename T>"},
{"lineNum":"   62","line":"        struct result_type_deduction_helper"},
{"lineNum":"   63","line":"        {"},
{"lineNum":"   64","line":"            typedef T const & type;"},
{"lineNum":"   65","line":"        };"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"        template <typename T>"},
{"lineNum":"   68","line":"        struct result_type_deduction_helper<T &>"},
{"lineNum":"   69","line":"        {"},
{"lineNum":"   70","line":"            typedef T & type;"},
{"lineNum":"   71","line":"        };"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"        template <typename T>"},
{"lineNum":"   74","line":"        struct result_type_deduction_helper<T const &>"},
{"lineNum":"   75","line":"        {"},
{"lineNum":"   76","line":"            typedef T const & type;"},
{"lineNum":"   77","line":"        };"},
{"lineNum":"   78","line":"    }"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"    namespace result_of"},
{"lineNum":"   81","line":"    {"},
{"lineNum":"   82","line":"#ifdef BOOST_PHOENIX_NO_VARIADIC_ACTOR"},
{"lineNum":"   83","line":"        // Bring in the result_of::actor<>"},
{"lineNum":"   84","line":"        #include <boost/phoenix/core/detail/cpp03/actor_result_of.hpp>"},
{"lineNum":"   85","line":"#else"},
{"lineNum":"   86","line":"        template <typename Expr, typename... A>"},
{"lineNum":"   87","line":"        struct actor_impl"},
{"lineNum":"   88","line":"        {"},
{"lineNum":"   89","line":"            typedef"},
{"lineNum":"   90","line":"                typename boost::phoenix::evaluator::impl<"},
{"lineNum":"   91","line":"                    Expr const&"},
{"lineNum":"   92","line":"                  , vector2<"},
{"lineNum":"   93","line":"                        typename vector_chooser<sizeof...(A) + 1>::"},
{"lineNum":"   94","line":"                          template apply<const ::boost::phoenix::actor<Expr> *, A...>::type&"},
{"lineNum":"   95","line":"                      , default_actions"},
{"lineNum":"   96","line":"                    > const &"},
{"lineNum":"   97","line":"                  , proto::empty_env"},
{"lineNum":"   98","line":"                >::result_type"},
{"lineNum":"   99","line":"                type;"},
{"lineNum":"  100","line":"        };"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"        template <typename Expr, typename... A>"},
{"lineNum":"  103","line":"        struct actor : actor_impl<Expr, A...> {};"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"        template <typename Expr>"},
{"lineNum":"  106","line":"        struct nullary_actor_result : actor_impl<Expr> {};"},
{"lineNum":"  107","line":"#endif"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"        template <typename Expr>"},
{"lineNum":"  110","line":"        struct actor<Expr>"},
{"lineNum":"  111","line":"        {"},
{"lineNum":"  112","line":"            typedef"},
{"lineNum":"  113","line":"                // avoid calling result_of::actor when this is false"},
{"lineNum":"  114","line":"                typename mpl::eval_if_c<"},
{"lineNum":"  115","line":"                    result_of::is_nullary<Expr>::value"},
{"lineNum":"  116","line":"                  , nullary_actor_result<Expr>"},
{"lineNum":"  117","line":"                  , mpl::identity<detail::error_expecting_arguments>"},
{"lineNum":"  118","line":"                >::type"},
{"lineNum":"  119","line":"            type;"},
{"lineNum":"  120","line":"        };"},
{"lineNum":"  121","line":"    }"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"    ////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  124","line":"    //"},
{"lineNum":"  125","line":"    //  actor"},
{"lineNum":"  126","line":"    //"},
{"lineNum":"  127","line":"    //      The actor class. The main thing! In phoenix, everything is an actor"},
{"lineNum":"  128","line":"    //      This class is responsible for full function evaluation. Partial"},
{"lineNum":"  129","line":"    //      function evaluation involves creating a hierarchy of actor objects."},
{"lineNum":"  130","line":"    //"},
{"lineNum":"  131","line":"    ////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  132","line":"    template <typename Expr>"},
{"lineNum":"  133","line":"    struct actor"},
{"lineNum":"  134","line":"    {"},
{"lineNum":"  135","line":"        typedef typename"},
{"lineNum":"  136","line":"            mpl::eval_if_c<"},
{"lineNum":"  137","line":"                mpl::or_<"},
{"lineNum":"  138","line":"                    is_custom_terminal<Expr>"},
{"lineNum":"  139","line":"                  , mpl::bool_<is_placeholder<Expr>::value>"},
{"lineNum":"  140","line":"                >::value"},
{"lineNum":"  141","line":"              , proto::terminal<Expr>"},
{"lineNum":"  142","line":"              , mpl::identity<Expr>"},
{"lineNum":"  143","line":"            >::type"},
{"lineNum":"  144","line":"            expr_type;"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"        BOOST_PROTO_BASIC_EXTENDS(expr_type, actor<Expr>, phoenix_domain)"},
{"lineNum":"  147","line":"        BOOST_PROTO_EXTENDS_SUBSCRIPT()"},
{"lineNum":"  148","line":"        BOOST_PROTO_EXTENDS_ASSIGN()"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"        template <typename Sig>"},
{"lineNum":"  151","line":"        struct result;"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"        typename result_of::actor<proto_base_expr>::type"},
{"lineNum":"  154","line":"        operator()()"},
{"lineNum":"  155","line":"        {"},
{"lineNum":"  156","line":"            typedef vector1<const actor<Expr> *> env_type;"},
{"lineNum":"  157","line":"            env_type env = {this};"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"            return phoenix::eval(*this, phoenix::context(env, default_actions()));"},
{"lineNum":"  160","line":"        }"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"        typename result_of::actor<proto_base_expr>::type"},
{"lineNum":"  163","line":"        operator()() const"},
{"lineNum":"  164","line":"        {"},
{"lineNum":"  165","line":"            typedef vector1<const actor<Expr> *> env_type;"},
{"lineNum":"  166","line":"            env_type env = {this};"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"            return phoenix::eval(*this, phoenix::context(env, default_actions()));"},
{"lineNum":"  169","line":"        }"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"        template <typename Env>"},
{"lineNum":"  172","line":"        typename evaluator::impl<"},
{"lineNum":"  173","line":"            proto_base_expr const &"},
{"lineNum":"  174","line":"          , typename result_of::context<"},
{"lineNum":"  175","line":"                Env const &"},
{"lineNum":"  176","line":"              , default_actions const &"},
{"lineNum":"  177","line":"            >::type"},
{"lineNum":"  178","line":"          , proto::empty_env"},
{"lineNum":"  179","line":"        >::result_type"},
{"lineNum":"  180","line":"        eval(Env const & env) const"},
{"lineNum":"  181","line":"        {"},
{"lineNum":"  182","line":"            return phoenix::eval(*this, phoenix::context(env, default_actions()));"},
{"lineNum":"  183","line":"        }"},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"#ifdef BOOST_PHOENIX_NO_VARIADIC_ACTOR"},
{"lineNum":"  186","line":"        // Bring in the rest"},
{"lineNum":"  187","line":"        #include <boost/phoenix/core/detail/cpp03/actor_operator.hpp>"},
{"lineNum":"  188","line":"#else"},
{"lineNum":"  189","line":"        template <typename This, typename... A>"},
{"lineNum":"  190","line":"        struct result<This(A...)>"},
{"lineNum":"  191","line":"            : result_of::actor<"},
{"lineNum":"  192","line":"                proto_base_expr"},
{"lineNum":"  193","line":"              , typename mpl::if_<is_reference<A>, A, A const &>::type..."},
{"lineNum":"  194","line":"            >"},
{"lineNum":"  195","line":"        {};"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"        template <typename... A>"},
{"lineNum":"  198","line":"        typename result<actor(A...)>::type"},
{"lineNum":"  199","line":"        operator()(A &&... a)"},
{"lineNum":"  200","line":"        {"},
{"lineNum":"  201","line":"            typedef"},
{"lineNum":"  202","line":"                typename vector_chooser<sizeof...(A) + 1>::template apply<"},
{"lineNum":"  203","line":"                    const actor<Expr> *"},
{"lineNum":"  204","line":"                  , typename mpl::if_<is_reference<A>, A, A const &>::type..."},
{"lineNum":"  205","line":"                >::type"},
{"lineNum":"  206","line":"            env_type;"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"            env_type env = {this, a...};"},
{"lineNum":"  209","line":"            return phoenix::eval(*this, phoenix::context(env, default_actions()));"},
{"lineNum":"  210","line":"        }"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"        template <typename... A>"},
{"lineNum":"  213","line":"        typename result<actor(A...)>::type"},
{"lineNum":"  214","line":"        operator()(A &&... a) const"},
{"lineNum":"  215","line":"        {"},
{"lineNum":"  216","line":"            typedef"},
{"lineNum":"  217","line":"                typename vector_chooser<sizeof...(A) + 1>::template apply<"},
{"lineNum":"  218","line":"                    const actor<Expr> *"},
{"lineNum":"  219","line":"                  , typename mpl::if_<is_reference<A>, A, A const &>::type..."},
{"lineNum":"  220","line":"                >::type"},
{"lineNum":"  221","line":"            env_type;"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"            env_type env = {this, a...};","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  224","line":"            return phoenix::eval(*this, phoenix::context(env, default_actions()));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  225","line":"        }"},
{"lineNum":"  226","line":"#endif"},
{"lineNum":"  227","line":"    };"},
{"lineNum":"  228","line":"}}"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"namespace boost"},
{"lineNum":"  231","line":"{"},
{"lineNum":"  232","line":"    // specialize boost::result_of to return the proper result type"},
{"lineNum":"  233","line":"    template <typename Expr>"},
{"lineNum":"  234","line":"    struct result_of<phoenix::actor<Expr>()>"},
{"lineNum":"  235","line":"        : phoenix::result_of::actor<typename phoenix::actor<Expr>::proto_base_expr>"},
{"lineNum":"  236","line":"    {};"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"    template <typename Expr>"},
{"lineNum":"  239","line":"    struct result_of<phoenix::actor<Expr> const()>"},
{"lineNum":"  240","line":"        : phoenix::result_of::actor<typename phoenix::actor<Expr>::proto_base_expr>"},
{"lineNum":"  241","line":"    {};"},
{"lineNum":"  242","line":"}"},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"#ifdef BOOST_MSVC"},
{"lineNum":"  246","line":"#pragma warning(pop)"},
{"lineNum":"  247","line":"#endif"},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"#endif"},
{"lineNum":"  250","line":""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 2, "covered" : 0,};
var merged_data = [];
