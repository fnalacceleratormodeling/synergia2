var data = {lines:[
{"lineNum":"    1","line":"/*"},
{"lineNum":"    2","line":"//@HEADER"},
{"lineNum":"    3","line":"// ************************************************************************"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"//                        Kokkos v. 3.0"},
{"lineNum":"    6","line":"//       Copyright (2020) National Technology & Engineering"},
{"lineNum":"    7","line":"//               Solutions of Sandia, LLC (NTESS)."},
{"lineNum":"    8","line":"//"},
{"lineNum":"    9","line":"// Under the terms of Contract DE-NA0003525 with NTESS,"},
{"lineNum":"   10","line":"// the U.S. Government retains certain rights in this software."},
{"lineNum":"   11","line":"//"},
{"lineNum":"   12","line":"// Redistribution and use in source and binary forms, with or without"},
{"lineNum":"   13","line":"// modification, are permitted provided that the following conditions are"},
{"lineNum":"   14","line":"// met:"},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"// 1. Redistributions of source code must retain the above copyright"},
{"lineNum":"   17","line":"// notice, this list of conditions and the following disclaimer."},
{"lineNum":"   18","line":"//"},
{"lineNum":"   19","line":"// 2. Redistributions in binary form must reproduce the above copyright"},
{"lineNum":"   20","line":"// notice, this list of conditions and the following disclaimer in the"},
{"lineNum":"   21","line":"// documentation and/or other materials provided with the distribution."},
{"lineNum":"   22","line":"//"},
{"lineNum":"   23","line":"// 3. Neither the name of the Corporation nor the names of the"},
{"lineNum":"   24","line":"// contributors may be used to endorse or promote products derived from"},
{"lineNum":"   25","line":"// this software without specific prior written permission."},
{"lineNum":"   26","line":"//"},
{"lineNum":"   27","line":"// THIS SOFTWARE IS PROVIDED BY NTESS \"AS IS\" AND ANY"},
{"lineNum":"   28","line":"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"},
{"lineNum":"   29","line":"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR"},
{"lineNum":"   30","line":"// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NTESS OR THE"},
{"lineNum":"   31","line":"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,"},
{"lineNum":"   32","line":"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,"},
{"lineNum":"   33","line":"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR"},
{"lineNum":"   34","line":"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF"},
{"lineNum":"   35","line":"// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING"},
{"lineNum":"   36","line":"// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"},
{"lineNum":"   37","line":"// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   38","line":"//"},
{"lineNum":"   39","line":"// Questions? Contact Christian R. Trott (crtrott@sandia.gov)"},
{"lineNum":"   40","line":"//"},
{"lineNum":"   41","line":"// ************************************************************************"},
{"lineNum":"   42","line":"//@HEADER"},
{"lineNum":"   43","line":"*/"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"#include <Kokkos_Core.hpp>"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"namespace Kokkos {"},
{"lineNum":"   48","line":"namespace Impl {"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"KOKKOS_THREAD_LOCAL int SharedAllocationRecord<void, void>::t_tracking_enabled ="},
{"lineNum":"   51","line":"    1;"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"#ifdef KOKKOS_ENABLE_DEBUG"},
{"lineNum":"   54","line":"bool SharedAllocationRecord<void, void>::is_sane("},
{"lineNum":"   55","line":"    SharedAllocationRecord<void, void>* arg_record) {"},
{"lineNum":"   56","line":"  SharedAllocationRecord* const root ="},
{"lineNum":"   57","line":"      arg_record ? arg_record->m_root : nullptr;"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"  bool ok = root != nullptr && root->use_count() == 0;"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"  if (ok) {"},
{"lineNum":"   62","line":"    SharedAllocationRecord* root_next             = nullptr;"},
{"lineNum":"   63","line":"    static constexpr SharedAllocationRecord* zero = nullptr;"},
{"lineNum":"   64","line":"    // Lock the list:"},
{"lineNum":"   65","line":"    while ((root_next = Kokkos::atomic_exchange(&root->m_next, zero)) =="},
{"lineNum":"   66","line":"           nullptr)"},
{"lineNum":"   67","line":"      ;"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"    for (SharedAllocationRecord* rec = root_next; ok && rec != root;"},
{"lineNum":"   70","line":"         rec                         = rec->m_next) {"},
{"lineNum":"   71","line":"      const bool ok_non_null ="},
{"lineNum":"   72","line":"          rec && rec->m_prev && (rec == root || rec->m_next);"},
{"lineNum":"   73","line":"      const bool ok_root = ok_non_null && rec->m_root == root;"},
{"lineNum":"   74","line":"      const bool ok_prev_next ="},
{"lineNum":"   75","line":"          ok_non_null &&"},
{"lineNum":"   76","line":"          (rec->m_prev != root ? rec->m_prev->m_next == rec : root_next == rec);"},
{"lineNum":"   77","line":"      const bool ok_next_prev = ok_non_null && rec->m_next->m_prev == rec;"},
{"lineNum":"   78","line":"      const bool ok_count     = ok_non_null && 0 <= rec->use_count();"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"      ok = ok_root && ok_prev_next && ok_next_prev && ok_count;"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"      if (!ok) {"},
{"lineNum":"   83","line":"        // Formatting dependent on sizeof(uintptr_t)"},
{"lineNum":"   84","line":"        const char* format_string;"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"        if (sizeof(uintptr_t) == sizeof(unsigned long)) {"},
{"lineNum":"   87","line":"          format_string ="},
{"lineNum":"   88","line":"              \"Kokkos::Impl::SharedAllocationRecord failed is_sane: \""},
{"lineNum":"   89","line":"              \"rec(0x%.12lx){ m_count(%d) m_root(0x%.12lx) m_next(0x%.12lx) \""},
{"lineNum":"   90","line":"              \"m_prev(0x%.12lx) m_next->m_prev(0x%.12lx) \""},
{"lineNum":"   91","line":"              \"m_prev->m_next(0x%.12lx) }\\n\";"},
{"lineNum":"   92","line":"        } else if (sizeof(uintptr_t) == sizeof(unsigned long long)) {"},
{"lineNum":"   93","line":"          format_string ="},
{"lineNum":"   94","line":"              \"Kokkos::Impl::SharedAllocationRecord failed is_sane: \""},
{"lineNum":"   95","line":"              \"rec(0x%.12llx){ m_count(%d) m_root(0x%.12llx) m_next(0x%.12llx) \""},
{"lineNum":"   96","line":"              \"m_prev(0x%.12llx) m_next->m_prev(0x%.12llx) \""},
{"lineNum":"   97","line":"              \"m_prev->m_next(0x%.12llx) }\\n\";"},
{"lineNum":"   98","line":"        }"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"        fprintf(stderr, format_string, reinterpret_cast<uintptr_t>(rec),"},
{"lineNum":"  101","line":"                rec->use_count(), reinterpret_cast<uintptr_t>(rec->m_root),"},
{"lineNum":"  102","line":"                reinterpret_cast<uintptr_t>(rec->m_next),"},
{"lineNum":"  103","line":"                reinterpret_cast<uintptr_t>(rec->m_prev),"},
{"lineNum":"  104","line":"                reinterpret_cast<uintptr_t>("},
{"lineNum":"  105","line":"                    rec->m_next != nullptr ? rec->m_next->m_prev : nullptr),"},
{"lineNum":"  106","line":"                reinterpret_cast<uintptr_t>(rec->m_prev != rec->m_root"},
{"lineNum":"  107","line":"                                                ? rec->m_prev->m_next"},
{"lineNum":"  108","line":"                                                : root_next));"},
{"lineNum":"  109","line":"      }"},
{"lineNum":"  110","line":"    }"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"    if (nullptr != Kokkos::atomic_exchange(&root->m_next, root_next)) {"},
{"lineNum":"  113","line":"      Kokkos::Impl::throw_runtime_exception("},
{"lineNum":"  114","line":"          \"Kokkos::Impl::SharedAllocationRecord failed is_sane unlocking\");"},
{"lineNum":"  115","line":"    }"},
{"lineNum":"  116","line":"  }"},
{"lineNum":"  117","line":"  return ok;"},
{"lineNum":"  118","line":"}"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"#else"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"bool SharedAllocationRecord<void, void>::is_sane("},
{"lineNum":"  123","line":"    SharedAllocationRecord<void, void>*) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  124","line":"  Kokkos::Impl::throw_runtime_exception(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  125","line":"      \"Kokkos::Impl::SharedAllocationRecord::is_sane only works with \""},
{"lineNum":"  126","line":"      \"KOKKOS_ENABLE_DEBUG enabled\");"},
{"lineNum":"  127","line":"  return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  128","line":"}"},
{"lineNum":"  129","line":"#endif  //#ifdef KOKKOS_ENABLE_DEBUG"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"#ifdef KOKKOS_ENABLE_DEBUG"},
{"lineNum":"  132","line":"SharedAllocationRecord<void, void>* SharedAllocationRecord<void, void>::find("},
{"lineNum":"  133","line":"    SharedAllocationRecord<void, void>* const arg_root,"},
{"lineNum":"  134","line":"    void* const arg_data_ptr) {"},
{"lineNum":"  135","line":"  SharedAllocationRecord* root_next             = nullptr;"},
{"lineNum":"  136","line":"  static constexpr SharedAllocationRecord* zero = nullptr;"},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"  // Lock the list:"},
{"lineNum":"  139","line":"  while ((root_next = Kokkos::atomic_exchange(&arg_root->m_next, zero)) =="},
{"lineNum":"  140","line":"         nullptr)"},
{"lineNum":"  141","line":"    ;"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"  // Iterate searching for the record with this data pointer"},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"  SharedAllocationRecord* r = root_next;"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"  while ((r != arg_root) && (r->data() != arg_data_ptr)) {"},
{"lineNum":"  148","line":"    r = r->m_next;"},
{"lineNum":"  149","line":"  }"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"  if (r == arg_root) {"},
{"lineNum":"  152","line":"    r = nullptr;"},
{"lineNum":"  153","line":"  }"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"  if (nullptr != Kokkos::atomic_exchange(&arg_root->m_next, root_next)) {"},
{"lineNum":"  156","line":"    Kokkos::Impl::throw_runtime_exception("},
{"lineNum":"  157","line":"        \"Kokkos::Impl::SharedAllocationRecord failed locking/unlocking\");"},
{"lineNum":"  158","line":"  }"},
{"lineNum":"  159","line":"  return r;"},
{"lineNum":"  160","line":"}"},
{"lineNum":"  161","line":"#else"},
{"lineNum":"  162","line":"SharedAllocationRecord<void, void>* SharedAllocationRecord<void, void>::find("},
{"lineNum":"  163","line":"    SharedAllocationRecord<void, void>* const, void* const) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  164","line":"  Kokkos::Impl::throw_runtime_exception(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  165","line":"      \"Kokkos::Impl::SharedAllocationRecord::find only works with \""},
{"lineNum":"  166","line":"      \"KOKKOS_ENABLE_DEBUG \""},
{"lineNum":"  167","line":"      \"enabled\");"},
{"lineNum":"  168","line":"  return nullptr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  169","line":"}"},
{"lineNum":"  170","line":"#endif"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"/**\\brief  Construct and insert into \'arg_root\' tracking set."},
{"lineNum":"  173","line":" *         use_count is zero."},
{"lineNum":"  174","line":" */"},
{"lineNum":"  175","line":"SharedAllocationRecord<void, void>::SharedAllocationRecord("},
{"lineNum":"  176","line":"#ifdef KOKKOS_ENABLE_DEBUG"},
{"lineNum":"  177","line":"    SharedAllocationRecord<void, void>* arg_root,"},
{"lineNum":"  178","line":"#endif"},
{"lineNum":"  179","line":"    SharedAllocationHeader* arg_alloc_ptr, size_t arg_alloc_size,"},
{"lineNum":"  180","line":"    SharedAllocationRecord<void, void>::function_type arg_dealloc)"},
{"lineNum":"  181","line":"    : m_alloc_ptr(arg_alloc_ptr),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  182","line":"      m_alloc_size(arg_alloc_size),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  183","line":"      m_dealloc(arg_dealloc)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  184","line":"#ifdef KOKKOS_ENABLE_DEBUG"},
{"lineNum":"  185","line":"      ,"},
{"lineNum":"  186","line":"      m_root(arg_root),"},
{"lineNum":"  187","line":"      m_prev(nullptr),"},
{"lineNum":"  188","line":"      m_next(nullptr)"},
{"lineNum":"  189","line":"#endif"},
{"lineNum":"  190","line":"      ,"},
{"lineNum":"  191","line":"      m_count(0) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  192","line":"  if (nullptr != arg_alloc_ptr) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  193","line":"#ifdef KOKKOS_ENABLE_DEBUG"},
{"lineNum":"  194","line":"    // Insert into the root double-linked list for tracking"},
{"lineNum":"  195","line":"    //"},
{"lineNum":"  196","line":"    // before:  arg_root->m_next == next ; next->m_prev == arg_root"},
{"lineNum":"  197","line":"    // after:   arg_root->m_next == this ; this->m_prev == arg_root ;"},
{"lineNum":"  198","line":"    //              this->m_next == next ; next->m_prev == this"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"    m_prev                                        = m_root;"},
{"lineNum":"  201","line":"    static constexpr SharedAllocationRecord* zero = nullptr;"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"    // Read root->m_next and lock by setting to nullptr"},
{"lineNum":"  204","line":"    while ((m_next = Kokkos::atomic_exchange(&m_root->m_next, zero)) == nullptr)"},
{"lineNum":"  205","line":"      ;"},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"    m_next->m_prev = this;"},
{"lineNum":"  208","line":""},
{"lineNum":"  209","line":"    // memory fence before completing insertion into linked list"},
{"lineNum":"  210","line":"    Kokkos::memory_fence();"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"    if (nullptr != Kokkos::atomic_exchange(&m_root->m_next, this)) {"},
{"lineNum":"  213","line":"      Kokkos::Impl::throw_runtime_exception("},
{"lineNum":"  214","line":"          \"Kokkos::Impl::SharedAllocationRecord failed locking/unlocking\");"},
{"lineNum":"  215","line":"    }"},
{"lineNum":"  216","line":"#endif"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"  } else {"},
{"lineNum":"  219","line":"    Kokkos::Impl::throw_runtime_exception(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  220","line":"        \"Kokkos::Impl::SharedAllocationRecord given nullptr allocation\");"},
{"lineNum":"  221","line":"  }"},
{"lineNum":"  222","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"void SharedAllocationRecord<void, void>::increment("},
{"lineNum":"  225","line":"    SharedAllocationRecord<void, void>* arg_record) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  226","line":"  const int old_count = Kokkos::atomic_fetch_add(&arg_record->m_count, 1);"},
{"lineNum":"  227","line":""},
{"lineNum":"  228","line":"  if (old_count < 0) {  // Error","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  229","line":"    Kokkos::Impl::throw_runtime_exception(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  230","line":"        \"Kokkos::Impl::SharedAllocationRecord failed increment\");"},
{"lineNum":"  231","line":"  }"},
{"lineNum":"  232","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"SharedAllocationRecord<void, void>* SharedAllocationRecord<"},
{"lineNum":"  235","line":"    void, void>::decrement(SharedAllocationRecord<void, void>* arg_record) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  236","line":"  const int old_count = Kokkos::atomic_fetch_sub(&arg_record->m_count, 1);"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"  if (old_count == 1) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  239","line":"    if (!Kokkos::is_initialized()) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  240","line":"      std::stringstream ss;"},
{"lineNum":"  241","line":"      ss << \"Kokkos allocation \\\"\";","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  242","line":"      ss << arg_record->get_label();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  243","line":"      ss << \"\\\" is being deallocated after Kokkos::finalize was called\\n\";"},
{"lineNum":"  244","line":"      auto s = ss.str();"},
{"lineNum":"  245","line":"      Kokkos::Impl::throw_runtime_exception(s);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  246","line":"    }"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"#ifdef KOKKOS_ENABLE_DEBUG"},
{"lineNum":"  249","line":"    // before:  arg_record->m_prev->m_next == arg_record  &&"},
{"lineNum":"  250","line":"    //          arg_record->m_next->m_prev == arg_record"},
{"lineNum":"  251","line":"    //"},
{"lineNum":"  252","line":"    // after:   arg_record->m_prev->m_next == arg_record->m_next  &&"},
{"lineNum":"  253","line":"    //          arg_record->m_next->m_prev == arg_record->m_prev"},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"    SharedAllocationRecord* root_next             = nullptr;"},
{"lineNum":"  256","line":"    static constexpr SharedAllocationRecord* zero = nullptr;"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"    // Lock the list:"},
{"lineNum":"  259","line":"    while ((root_next = Kokkos::atomic_exchange(&arg_record->m_root->m_next,"},
{"lineNum":"  260","line":"                                                zero)) == nullptr)"},
{"lineNum":"  261","line":"      ;"},
{"lineNum":"  262","line":""},
{"lineNum":"  263","line":"    arg_record->m_next->m_prev = arg_record->m_prev;"},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"    if (root_next != arg_record) {"},
{"lineNum":"  266","line":"      arg_record->m_prev->m_next = arg_record->m_next;"},
{"lineNum":"  267","line":"    } else {"},
{"lineNum":"  268","line":"      // before:  arg_record->m_root == arg_record->m_prev"},
{"lineNum":"  269","line":"      // after:   arg_record->m_root == arg_record->m_next"},
{"lineNum":"  270","line":"      root_next = arg_record->m_next;"},
{"lineNum":"  271","line":"    }"},
{"lineNum":"  272","line":""},
{"lineNum":"  273","line":"    Kokkos::memory_fence();"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"    // Unlock the list:"},
{"lineNum":"  276","line":"    if (nullptr !="},
{"lineNum":"  277","line":"        Kokkos::atomic_exchange(&arg_record->m_root->m_next, root_next)) {"},
{"lineNum":"  278","line":"      Kokkos::Impl::throw_runtime_exception("},
{"lineNum":"  279","line":"          \"Kokkos::Impl::SharedAllocationRecord failed decrement unlocking\");"},
{"lineNum":"  280","line":"    }"},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"    arg_record->m_next = nullptr;"},
{"lineNum":"  283","line":"    arg_record->m_prev = nullptr;"},
{"lineNum":"  284","line":"#endif"},
{"lineNum":"  285","line":""},
{"lineNum":"  286","line":"    function_type d = arg_record->m_dealloc;"},
{"lineNum":"  287","line":"    (*d)(arg_record);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  288","line":"    arg_record = nullptr;"},
{"lineNum":"  289","line":"  } else if (old_count < 1) {  // Error","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  290","line":"    fprintf(stderr,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  291","line":"            \"Kokkos::Impl::SharedAllocationRecord \'%s\' failed decrement count \""},
{"lineNum":"  292","line":"            \"= %d\\n\","},
{"lineNum":"  293","line":"            arg_record->m_alloc_ptr->m_label, old_count);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  294","line":"    fflush(stderr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  295","line":"    Kokkos::Impl::throw_runtime_exception(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  296","line":"        \"Kokkos::Impl::SharedAllocationRecord failed decrement count\");"},
{"lineNum":"  297","line":"  }"},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"  return arg_record;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  300","line":"}"},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":"#ifdef KOKKOS_ENABLE_DEBUG"},
{"lineNum":"  303","line":"void SharedAllocationRecord<void, void>::print_host_accessible_records("},
{"lineNum":"  304","line":"    std::ostream& s, const char* const space_name,"},
{"lineNum":"  305","line":"    const SharedAllocationRecord* const root, const bool detail) {"},
{"lineNum":"  306","line":"  const SharedAllocationRecord<void, void>* r = root;"},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"  char buffer[256];"},
{"lineNum":"  309","line":""},
{"lineNum":"  310","line":"  if (detail) {"},
{"lineNum":"  311","line":"    do {"},
{"lineNum":"  312","line":"      // Formatting dependent on sizeof(uintptr_t)"},
{"lineNum":"  313","line":"      const char* format_string;"},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"      if (sizeof(uintptr_t) == sizeof(unsigned long)) {"},
{"lineNum":"  316","line":"        format_string ="},
{"lineNum":"  317","line":"            \"%s addr( 0x%.12lx ) list( 0x%.12lx 0x%.12lx ) extent[ 0x%.12lx + \""},
{"lineNum":"  318","line":"            \"%.8ld ] count(%d) dealloc(0x%.12lx) %s\\n\";"},
{"lineNum":"  319","line":"      } else if (sizeof(uintptr_t) == sizeof(unsigned long long)) {"},
{"lineNum":"  320","line":"        format_string ="},
{"lineNum":"  321","line":"            \"%s addr( 0x%.12llx ) list( 0x%.12llx 0x%.12llx ) extent[ \""},
{"lineNum":"  322","line":"            \"0x%.12llx + %.8ld ] count(%d) dealloc(0x%.12llx) %s\\n\";"},
{"lineNum":"  323","line":"      }"},
{"lineNum":"  324","line":""},
{"lineNum":"  325","line":"      snprintf(buffer, 256, format_string, space_name,"},
{"lineNum":"  326","line":"               reinterpret_cast<uintptr_t>(r),"},
{"lineNum":"  327","line":"               reinterpret_cast<uintptr_t>(r->m_prev),"},
{"lineNum":"  328","line":"               reinterpret_cast<uintptr_t>(r->m_next),"},
{"lineNum":"  329","line":"               reinterpret_cast<uintptr_t>(r->m_alloc_ptr), r->m_alloc_size,"},
{"lineNum":"  330","line":"               r->use_count(), reinterpret_cast<uintptr_t>(r->m_dealloc),"},
{"lineNum":"  331","line":"               r->m_alloc_ptr->m_label);"},
{"lineNum":"  332","line":"      s << buffer;"},
{"lineNum":"  333","line":"      r = r->m_next;"},
{"lineNum":"  334","line":"    } while (r != root);"},
{"lineNum":"  335","line":"  } else {"},
{"lineNum":"  336","line":"    do {"},
{"lineNum":"  337","line":"      if (r->m_alloc_ptr) {"},
{"lineNum":"  338","line":"        // Formatting dependent on sizeof(uintptr_t)"},
{"lineNum":"  339","line":"        const char* format_string;"},
{"lineNum":"  340","line":""},
{"lineNum":"  341","line":"        if (sizeof(uintptr_t) == sizeof(unsigned long)) {"},
{"lineNum":"  342","line":"          format_string = \"%s [ 0x%.12lx + %ld ] %s\\n\";"},
{"lineNum":"  343","line":"        } else if (sizeof(uintptr_t) == sizeof(unsigned long long)) {"},
{"lineNum":"  344","line":"          format_string = \"%s [ 0x%.12llx + %ld ] %s\\n\";"},
{"lineNum":"  345","line":"        }"},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"        snprintf(buffer, 256, format_string, space_name,"},
{"lineNum":"  348","line":"                 reinterpret_cast<uintptr_t>(r->data()), r->size(),"},
{"lineNum":"  349","line":"                 r->m_alloc_ptr->m_label);"},
{"lineNum":"  350","line":"      } else {"},
{"lineNum":"  351","line":"        snprintf(buffer, 256, \"%s [ 0 + 0 ]\\n\", space_name);"},
{"lineNum":"  352","line":"      }"},
{"lineNum":"  353","line":"      s << buffer;"},
{"lineNum":"  354","line":"      r = r->m_next;"},
{"lineNum":"  355","line":"    } while (r != root);"},
{"lineNum":"  356","line":"  }"},
{"lineNum":"  357","line":"}"},
{"lineNum":"  358","line":"#else"},
{"lineNum":"  359","line":"void SharedAllocationRecord<void, void>::print_host_accessible_records("},
{"lineNum":"  360","line":"    std::ostream&, const char* const, const SharedAllocationRecord* const,"},
{"lineNum":"  361","line":"    const bool) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  362","line":"  Kokkos::Impl::throw_runtime_exception(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  363","line":"      \"Kokkos::Impl::SharedAllocationRecord::print_host_accessible_records\""},
{"lineNum":"  364","line":"      \" only works with KOKKOS_ENABLE_DEBUG enabled\");"},
{"lineNum":"  365","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  366","line":"#endif"},
{"lineNum":"  367","line":""},
{"lineNum":"  368","line":"} /* namespace Impl */"},
{"lineNum":"  369","line":"} /* namespace Kokkos */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 33, "covered" : 0,};
var merged_data = [];
