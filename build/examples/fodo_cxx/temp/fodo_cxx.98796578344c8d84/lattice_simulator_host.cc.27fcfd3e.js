var data = {lines:[
{"lineNum":"    1","line":"#include \"Eigen/Eigen\""},
{"lineNum":"    2","line":"#include <sstream>"},
{"lineNum":"    3","line":"#include <iostream>"},
{"lineNum":"    4","line":"#include <iomanip>"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"#include \"synergia/foundation/math_constants.h\""},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"using Vector = Eigen::Matrix<std::complex<double>, 6, 1>;"},
{"lineNum":"    9","line":"using Matrix = Eigen::Matrix<std::complex<double>, 6, 6, Eigen::RowMajor>;"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"Vector"},
{"lineNum":"   12","line":"ev_ordering(Vector const& ev, Matrix const& B);"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"std::array<double, 2>"},
{"lineNum":"   15","line":"filter_transverse_tunes(double const* jac_arr)"},
{"lineNum":"   16","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   17","line":"    constexpr static int EigenIterations = 100000;"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"    using MatrixD = Eigen::Matrix<double,"},
{"lineNum":"   20","line":"          Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor>;"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"    std::array<double, 2> nu;"},
{"lineNum":"   23","line":"    Eigen::Matrix<double, 6, 6, Eigen::RowMajor> jac(jac_arr);"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"    const int ix  = 0;"},
{"lineNum":"   26","line":"    const int ipx = 1;"},
{"lineNum":"   27","line":"    const int iy  = 2;"},
{"lineNum":"   28","line":"    const int ipy = 3;"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"    if ( jac(iy , ix ) || jac(ix , iy ) ||","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   31","line":"         jac(ix , ipy) || jac(iy , ipx) ||","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   32","line":"         jac(ipy, ix ) || jac(ipx, iy ) ||"},
{"lineNum":"   33","line":"         jac(ipy, ipx) || jac(ipx, ipy) )"},
{"lineNum":"   34","line":"    {"},
{"lineNum":"   35","line":"        Eigen::EigenSolver<MatrixD> eigensolver;"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"        eigensolver.setMaxIterations(EigenIterations);"},
{"lineNum":"   38","line":"        eigensolver.compute(jac);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"        if (eigensolver.info() == Eigen::NoConvergence)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   41","line":"            throw std::runtime_error(\"eigensolver no convergence\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"        if (eigensolver.info() != Eigen::Success)"},
{"lineNum":"   44","line":"            throw std::runtime_error(\"failed solving eigenvectors\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"        auto eigen_val = eigensolver.eigenvalues();"},
{"lineNum":"   47","line":"        auto eigen_vec = eigensolver.eigenvectors();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"        auto lambda = ev_ordering(eigen_val, eigen_vec);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"        for(int i=0; i<6; ++i)"},
{"lineNum":"   52","line":"        {"},
{"lineNum":"   53","line":"            if( fabs( abs(lambda(i)) - 1.0 ) > 1.0e-4 )","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   54","line":"            {"},
{"lineNum":"   55","line":"                std::stringstream ss;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   56","line":"                ss << \"filterTransverseTunes: \"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   57","line":"                   << \"the lattice is nearly unstable. \""},
{"lineNum":"   58","line":"                   << \"lambda( \" << i << \" ) has magnitude = \"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   59","line":"                   << abs(lambda(i));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   60","line":"                throw std::runtime_error(ss.str());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   61","line":"            }"},
{"lineNum":"   62","line":"        }"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"        if( (abs(lambda(0) - std::conj(lambda(3))) > 1.0e-4)  ||","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   65","line":"            (abs(lambda(1) - std::conj(lambda(4))) > 1.0e-4) )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   66","line":"        {"},
{"lineNum":"   67","line":"            std::stringstream ss;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   68","line":"            ss << \"filterTransverseTunes: \"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   69","line":"               << \"conjugacy condition has been vilated. \""},
{"lineNum":"   70","line":"               << \"The lattice may be linearly unstable. \""},
{"lineNum":"   71","line":"               << \"Eigenvalues = \" << lambda;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   72","line":"            throw std::runtime_error(ss.str());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   73","line":"        }"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"        double csH = lambda(0).real();"},
{"lineNum":"   76","line":"        double csV = lambda(1).real();"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"        if( fabs( csH - csV ) < 1.0e-4 )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   79","line":"        {"},
{"lineNum":"   80","line":"            std::stringstream ss;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   81","line":"            ss << \"filterTransverseTunes: \"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   82","line":"               << \"\\\"Horizontal\\\" and \\\"vertical\\\" tunes \""},
{"lineNum":"   83","line":"               << \"are too near each other for reasonable results. \""},
{"lineNum":"   84","line":"               << \"The calculation is meaningless.\";"},
{"lineNum":"   85","line":"            throw std::runtime_error(ss.str());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   86","line":"        }"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"        double  dcos, cos2phi, sin2phi, tanphi;"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"        MatrixD U( 2, 2 ), S( 2, 2 );"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"        U << 1.0, 0.0,  0.0, 1.0;"},
{"lineNum":"   93","line":"        S << 0.0, 1.0, -1.0, 0.0;"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"        MatrixD M( 2, 2 ), N( 2, 2 );"},
{"lineNum":"   96","line":"        MatrixD m( 2, 2 ), n( 2, 2 );"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"        M << jac(ix,ix), jac(ix,ipx), jac(ipx,ix), jac(ipx,ipx);"},
{"lineNum":"   99","line":"        N << jac(iy,iy), jac(iy,ipy), jac(ipy,iy), jac(ipy,ipy);"},
{"lineNum":"  100","line":"        m << jac(iy,ix), jac(iy,ipx), jac(ipy,ix), jac(ipy,ipx);"},
{"lineNum":"  101","line":"        n << jac(ix,iy), jac(ix,ipy), jac(ipx,iy), jac(ipx,ipy);"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"#if 0"},
{"lineNum":"  104","line":"        std::cout << \"M = \" << M << \"\\n\";"},
{"lineNum":"  105","line":"        std::cout << \"N = \" << N << \"\\n\";"},
{"lineNum":"  106","line":"        std::cout << \"m = \" << m << \"\\n\";"},
{"lineNum":"  107","line":"        std::cout << \"n = \" << n << \"\\n\";"},
{"lineNum":"  108","line":"#endif"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"        dcos    = csH - csV;"},
{"lineNum":"  111","line":"        cos2phi = ( M - N ).trace() / ( 2.0 *( dcos ) );","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"        if( fabs(cos2phi - 1.0) < 1.0e-4 )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  114","line":"            cos2phi =   1.0;  // ??? Rather coarse,"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"        if( fabs(cos2phi + 1.0) < 1.0e-4 )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  117","line":"            cos2phi = - 1.0;  // ??? isn\'t it?"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"        if( fabs(cos2phi) > 1.0 )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  120","line":"        {"},
{"lineNum":"  121","line":"            std::stringstream ss;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  122","line":"            ss << \"filterTransverseTunes: \"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  123","line":"               << \"cos(2 phi) = \" << std::setprecision(10) << cos2phi","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  124","line":"               << \"; has magnitude larger than one. \""},
{"lineNum":"  125","line":"               << \"Cannot continue calculation. \";"},
{"lineNum":"  126","line":"            throw std::runtime_error(ss.str());","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  127","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"        if( cos2phi < 0.0 )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  130","line":"        {"},
{"lineNum":"  131","line":"            sin2phi = csH;  // Variable used as dummy register."},
{"lineNum":"  132","line":"            csH     = csV;"},
{"lineNum":"  133","line":"            csV     = sin2phi;"},
{"lineNum":"  134","line":"            dcos    = -dcos;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  135","line":"            cos2phi = -cos2phi;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  136","line":"        }"},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"        sin2phi = sqrt( 1.0 - cos2phi*cos2phi );","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  139","line":"        tanphi  = sin2phi / ( 1.0 + cos2phi );"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"#if 0"},
{"lineNum":"  142","line":"        std::cout << \"sin2phi = \" << sin2phi << \"\\n\";"},
{"lineNum":"  143","line":"        std::cout << \"tanphi = \" << tanphi << \"\\n\";"},
{"lineNum":"  144","line":"#endif"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"        MatrixD D( 2, 2 ), A( 2, 2 ), B( 2, 2 );"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"        if( fabs(sin2phi) > 1.0e-8 )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  149","line":"        {"},
{"lineNum":"  150","line":"            D = -(m + S*n.transpose()*S.transpose()) *"},
{"lineNum":"  151","line":"                 (1.0 / (dcos*sin2phi));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  152","line":"        }"},
{"lineNum":"  153","line":"        else"},
{"lineNum":"  154","line":"        {"},
{"lineNum":"  155","line":"            D << 1.0, 0.0, 0.0, 1.0;"},
{"lineNum":"  156","line":"        }"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"        if( fabs(D.determinant() - 1.0) > 1.0e-4 )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  159","line":"        {"},
{"lineNum":"  160","line":"            std::stringstream ss;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  161","line":"            ss << \"filterTransverseTunes: \"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  162","line":"               << \"The matrix D is non-symplectic. \""},
{"lineNum":"  163","line":"               << \"|D| = \" << D.determinant();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  164","line":"            throw std::runtime_error(ss.str());","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  165","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"        // ...... Edwards-Teng sign convention."},
{"lineNum":"  168","line":"        if( D.trace() < 0.0 )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  169","line":"        {"},
{"lineNum":"  170","line":"            D = -D;"},
{"lineNum":"  171","line":"            sin2phi = -sin2phi;"},
{"lineNum":"  172","line":"            tanphi  = -tanphi;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  173","line":"        }"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"        A = M - D.inverse()*m*tanphi;"},
{"lineNum":"  176","line":"        B = N + D*n*tanphi;"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"#if 0"},
{"lineNum":"  179","line":"        std::cout << \"A = \" << A << \"\\n\";"},
{"lineNum":"  180","line":"        std::cout << \"B = \" << B << \"\\n\";"},
{"lineNum":"  181","line":"#endif"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"        // ......  First the \"horizontal\" ......"},
{"lineNum":"  184","line":"        MatrixD JH = A - csH*U;"},
{"lineNum":"  185","line":"        double snH = (JH(0,1)>0.0) ?  sqrt(1.0 - csH*csH)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  186","line":"                                   : -sqrt(1.0 - csH*csH);"},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"        // .......... A little test to keep everyone honest ....."},
{"lineNum":"  189","line":"        if( JH(0,0) )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  190","line":"        {"},
{"lineNum":"  191","line":"            if( fabs((JH(0,0) + JH(1,1)) / (JH(0,0) - JH(1,1))) > 1.0e-4 )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  192","line":"            {"},
{"lineNum":"  193","line":"                std::cout"},
{"lineNum":"  194","line":"                   << \"WARNING -- filterTransverseTunes: \""},
{"lineNum":"  195","line":"                   << \"\\\"Horizontal\\\" matrix does not \""},
{"lineNum":"  196","line":"                   << \"pass symplecticity test. \""},
{"lineNum":"  197","line":"                   << \"JH( 0, 0 ) = \" << JH( 0, 0 ) << \", \"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  198","line":"                   << \"JH( 1, 1 ) = \" << JH( 1, 1 ) << \". \"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  199","line":"                   << \"The ratio is \""},
{"lineNum":"  200","line":"                   << fabs((JH(0,0) + JH(1,1)) / (JH(0,0) - JH(1,1)))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  201","line":"                   << \"\\n\";"},
{"lineNum":"  202","line":"            }"},
{"lineNum":"  203","line":"        }"},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"        // ......  Then  the \"vertical\" ......"},
{"lineNum":"  207","line":"        MatrixD JV = B - csV*U;"},
{"lineNum":"  208","line":"        double snV = (JV(0,1)>0.0) ?  sqrt(1.0 - csV*csV)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  209","line":"                                   : -sqrt(1.0 - csV*csV);"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"        // .......... A little test to keep everyone honest ....."},
{"lineNum":"  212","line":"        if( JV(0,0) )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  213","line":"        {"},
{"lineNum":"  214","line":"            if( fabs((JV(0,0) + JV(1,1)) / (JV(0,0) - JV(1,1))) > 1.0e-4 )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  215","line":"            {"},
{"lineNum":"  216","line":"                std::cout"},
{"lineNum":"  217","line":"                   << \"WARNING -- filterTransverseTunes: \""},
{"lineNum":"  218","line":"                   << \"\\\"Vertical\\\" matrix does not \""},
{"lineNum":"  219","line":"                   << \"pass symplecticity test. \""},
{"lineNum":"  220","line":"                   << \"JV( 0, 0 ) = \" << JV( 0, 0 ) << \", \"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  221","line":"                   << \"JV( 1, 1 ) = \" << JV( 1, 1 ) << \". \"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  222","line":"                   << \"The ratio is \""},
{"lineNum":"  223","line":"                   << fabs((JV(0,0) + JV(1,1)) / (JV(0,0) - JV(1,1)))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  224","line":"                   << \"\\n\";"},
{"lineNum":"  225","line":"            }"},
{"lineNum":"  226","line":"        }"},
{"lineNum":"  227","line":""},
{"lineNum":"  228","line":"        const double M_TWOPI = mconstants::pi * 2;"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"        double theta = atan2( snH, csH );","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  231","line":"        if( theta < 0.0 ) theta += M_TWOPI;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  232","line":"        nu[0] = theta / M_TWOPI;"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"        theta = atan2( snV, csV );","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  235","line":"        if( theta < 0.0 )  theta += M_TWOPI;"},
{"lineNum":"  236","line":"        nu[1] = theta / M_TWOPI;"},
{"lineNum":"  237","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  238","line":"    else"},
{"lineNum":"  239","line":"    {"},
{"lineNum":"  240","line":"        double sn, cs;"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"        // Uncoupled calculation ....."},
{"lineNum":"  243","line":"        // (Lifted from LattFuncSage) ..."},
{"lineNum":"  244","line":"        // ... first horizontal"},
{"lineNum":"  245","line":"        cs = (jac(ix, ix) + jac(ipx, ipx)) / 2.0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  246","line":""},
{"lineNum":"  247","line":"        if( fabs(cs) <= 1.0 )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  248","line":"        {"},
{"lineNum":"  249","line":"            if( jac(ix, ipx) > 0.0 )  sn =   sqrt(1.0 - cs*cs);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  250","line":"            else                      sn = - sqrt(1.0 - cs*cs);"},
{"lineNum":"  251","line":"        }"},
{"lineNum":"  252","line":"        else"},
{"lineNum":"  253","line":"        {"},
{"lineNum":"  254","line":"            std::stringstream ss;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  255","line":"            ss << \"filterTransverseTunes: \"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  256","line":"               << \"cos( psi_H ) = \" << cs << \". \"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  257","line":"               << \"Cannot continue with calculation.\";"},
{"lineNum":"  258","line":"            throw std::runtime_error(ss.str());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  259","line":"        }"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"        const double M_TWOPI = mconstants::pi * 2;"},
{"lineNum":"  262","line":""},
{"lineNum":"  263","line":"        double theta = atan2(sn, cs);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  264","line":"        if( theta < 0.0 )  theta += M_TWOPI;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  265","line":"        nu[0] = theta / M_TWOPI;"},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":""},
{"lineNum":"  268","line":"        // ... then vertical."},
{"lineNum":"  269","line":"        cs = (jac(iy, iy) + jac(ipy, ipy)) / 2.0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"        if( fabs(cs) <= 1.0 )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  272","line":"        {"},
{"lineNum":"  273","line":"            if( jac(iy, ipy) > 0.0 )  sn =   sqrt(1.0 - cs*cs);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  274","line":"            else                      sn = - sqrt(1.0 - cs*cs);"},
{"lineNum":"  275","line":"        }"},
{"lineNum":"  276","line":"        else"},
{"lineNum":"  277","line":"        {"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"            std::stringstream ss;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  280","line":"            ss << \"filterTransverseTunes: \"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  281","line":"               << \"cos( psi_V ) = \" << cs << \". \"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  282","line":"               << \"Cannot continue with calculation.\";"},
{"lineNum":"  283","line":"            throw std::runtime_error(ss.str());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  284","line":"        }"},
{"lineNum":"  285","line":""},
{"lineNum":"  286","line":"        theta = atan2(sn, cs);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  287","line":"        if( theta < 0.0 )   theta += M_TWOPI;"},
{"lineNum":"  288","line":"        nu[1] = theta / M_TWOPI;"},
{"lineNum":"  289","line":"    }"},
{"lineNum":"  290","line":""},
{"lineNum":"  291","line":"    return nu;"},
{"lineNum":"  292","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"Vector"},
{"lineNum":"  295","line":"ev_ordering(Vector const& ev, Matrix const& B)"},
{"lineNum":"  296","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  297","line":"    int Lidx[6]; int unused[6];"},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"    for(int i=0; i<6; ++i)"},
{"lineNum":"  300","line":"    {"},
{"lineNum":"  301","line":"        unused[i] = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  302","line":"        Lidx[i] = -1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  303","line":"    }"},
{"lineNum":"  304","line":""},
{"lineNum":"  305","line":"    // first reorder to L1, L2, L3, L1*, L2*, L3*"},
{"lineNum":"  306","line":"    for(int i=0; i<3; ++i)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  307","line":"    {"},
{"lineNum":"  308","line":"        // find first unused"},
{"lineNum":"  309","line":"        for(int j=0; j<6; ++j)"},
{"lineNum":"  310","line":"        {"},
{"lineNum":"  311","line":"            if(unused[j])","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  312","line":"            {"},
{"lineNum":"  313","line":"                Lidx[i] = j;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  314","line":"                unused[j] = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  315","line":"                break;"},
{"lineNum":"  316","line":"            }"},
{"lineNum":"  317","line":"        }"},
{"lineNum":"  318","line":""},
{"lineNum":"  319","line":"        // eigenvalue of the selected index"},
{"lineNum":"  320","line":"        auto lambda1 = ev(Lidx[i]);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  321","line":""},
{"lineNum":"  322","line":"        // find the pairing eigenvalue"},
{"lineNum":"  323","line":"        for(int j=0; j<6; ++j)"},
{"lineNum":"  324","line":"        {"},
{"lineNum":"  325","line":"            if (unused[j])","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  326","line":"            {"},
{"lineNum":"  327","line":"                auto lambda2 = ev(j);"},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"                // put the matching index to i+3"},
{"lineNum":"  330","line":"                if (abs(lambda1 - std::conj(lambda2)) < 1e-6)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  331","line":"                {"},
{"lineNum":"  332","line":"                    Lidx[i+3] = j;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  333","line":"                    unused[j] = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  334","line":"                    break;"},
{"lineNum":"  335","line":"                }"},
{"lineNum":"  336","line":"            }"},
{"lineNum":"  337","line":"        }"},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"        // do we find the matching one?"},
{"lineNum":"  340","line":"        if (Lidx[i+3] < 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  341","line":"            throw std::runtime_error(\"Failed to find matching eigenvalue\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  342","line":"    }"},
{"lineNum":"  343","line":""},
{"lineNum":"  344","line":"    // next find the largest x component and move to column 0 and 3"},
{"lineNum":"  345","line":"    double max = 0.0;"},
{"lineNum":"  346","line":"    int idx = 0;"},
{"lineNum":"  347","line":""},
{"lineNum":"  348","line":"    for(int i=0; i<3; ++i)"},
{"lineNum":"  349","line":"    {"},
{"lineNum":"  350","line":"        double x = abs(B(0, Lidx[i]));","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"        if (x > max)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  353","line":"        {"},
{"lineNum":"  354","line":"            max = x;"},
{"lineNum":"  355","line":"            idx = i;"},
{"lineNum":"  356","line":"        }"},
{"lineNum":"  357","line":"    }"},
{"lineNum":"  358","line":""},
{"lineNum":"  359","line":"    if (idx != 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  360","line":"    {"},
{"lineNum":"  361","line":"        int tmp = Lidx[0];"},
{"lineNum":"  362","line":"        Lidx[0] = Lidx[idx];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  363","line":"        Lidx[idx] = tmp;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  364","line":""},
{"lineNum":"  365","line":"        tmp = Lidx[3];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  366","line":"        Lidx[3] = Lidx[idx+3];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  367","line":"        Lidx[idx+3] = tmp;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  368","line":"    }"},
{"lineNum":"  369","line":""},
{"lineNum":"  370","line":"    // then find the largest y component and move to column 1 and 4"},
{"lineNum":"  371","line":"    max = 0.0;"},
{"lineNum":"  372","line":""},
{"lineNum":"  373","line":"    for(int i=1; i<3; ++i)"},
{"lineNum":"  374","line":"    {"},
{"lineNum":"  375","line":"        double y = abs(B(1, Lidx[i]));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  376","line":""},
{"lineNum":"  377","line":"        if (y > max)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  378","line":"        {"},
{"lineNum":"  379","line":"            max = y;"},
{"lineNum":"  380","line":"            idx = i;"},
{"lineNum":"  381","line":"        }"},
{"lineNum":"  382","line":"    }"},
{"lineNum":"  383","line":""},
{"lineNum":"  384","line":"    if (idx != 1)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  385","line":"    {"},
{"lineNum":"  386","line":"        int tmp = Lidx[1];"},
{"lineNum":"  387","line":"        Lidx[1] = Lidx[idx];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  388","line":"        Lidx[idx] = tmp;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  389","line":""},
{"lineNum":"  390","line":"        tmp = Lidx[4];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  391","line":"        Lidx[4] = Lidx[idx+3];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  392","line":"        Lidx[idx+3] = tmp;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  393","line":"    }"},
{"lineNum":"  394","line":""},
{"lineNum":"  395","line":"    Vector ev2;"},
{"lineNum":"  396","line":"    for(int i=0; i<6; ++i) ev2(i) = ev(Lidx[i]);","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  397","line":""},
{"lineNum":"  398","line":"    return ev2;"},
{"lineNum":"  399","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  400","line":""},
{"lineNum":"  401","line":""},
{"lineNum":"  402","line":""},
{"lineNum":"  403","line":""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 114, "covered" : 0,};
var merged_data = [];
