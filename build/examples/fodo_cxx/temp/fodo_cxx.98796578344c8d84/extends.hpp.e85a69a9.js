var data = {lines:[
{"lineNum":"    1","line":"///////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"    2","line":"/// \\file extends.hpp"},
{"lineNum":"    3","line":"/// Macros and a base class for defining end-user expression types"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"//  Copyright 2008 Eric Niebler. Distributed under the Boost"},
{"lineNum":"    6","line":"//  Software License, Version 1.0. (See accompanying file"},
{"lineNum":"    7","line":"//  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"#ifndef BOOST_PROTO_EXTENDS_HPP_EAN_11_1_2006"},
{"lineNum":"   10","line":"#define BOOST_PROTO_EXTENDS_HPP_EAN_11_1_2006"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"#include <cstddef> // for offsetof"},
{"lineNum":"   13","line":"#include <boost/config.hpp>"},
{"lineNum":"   14","line":"#include <boost/detail/workaround.hpp>"},
{"lineNum":"   15","line":"#include <boost/preprocessor/facilities/empty.hpp>"},
{"lineNum":"   16","line":"#include <boost/preprocessor/tuple/elem.hpp>"},
{"lineNum":"   17","line":"#include <boost/preprocessor/control/if.hpp>"},
{"lineNum":"   18","line":"#include <boost/preprocessor/arithmetic/inc.hpp>"},
{"lineNum":"   19","line":"#include <boost/preprocessor/arithmetic/dec.hpp>"},
{"lineNum":"   20","line":"#include <boost/preprocessor/iteration/local.hpp>"},
{"lineNum":"   21","line":"#include <boost/preprocessor/repetition/enum_params.hpp>"},
{"lineNum":"   22","line":"#include <boost/preprocessor/repetition/repeat_from_to.hpp>"},
{"lineNum":"   23","line":"#include <boost/preprocessor/repetition/enum_binary_params.hpp>"},
{"lineNum":"   24","line":"#include <boost/preprocessor/repetition/enum_trailing_params.hpp>"},
{"lineNum":"   25","line":"#include <boost/preprocessor/repetition/enum_trailing_binary_params.hpp>"},
{"lineNum":"   26","line":"#include <boost/preprocessor/seq/for_each.hpp>"},
{"lineNum":"   27","line":"#include <boost/utility/addressof.hpp>"},
{"lineNum":"   28","line":"#include <boost/utility/result_of.hpp>"},
{"lineNum":"   29","line":"#include <boost/proto/proto_fwd.hpp>"},
{"lineNum":"   30","line":"#include <boost/proto/traits.hpp>"},
{"lineNum":"   31","line":"#include <boost/proto/expr.hpp>"},
{"lineNum":"   32","line":"#include <boost/proto/args.hpp>"},
{"lineNum":"   33","line":"#include <boost/proto/traits.hpp>"},
{"lineNum":"   34","line":"#include <boost/proto/generate.hpp>"},
{"lineNum":"   35","line":"#include <boost/proto/detail/remove_typename.hpp>"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"#if defined(_MSC_VER)"},
{"lineNum":"   38","line":"# pragma warning(push)"},
{"lineNum":"   39","line":"# pragma warning(disable : 4714) // function \'xxx\' marked as __forceinline not inlined"},
{"lineNum":"   40","line":"#endif"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"namespace boost { namespace proto"},
{"lineNum":"   43","line":"{"},
{"lineNum":"   44","line":"    #ifdef __GNUC__"},
{"lineNum":"   45","line":"    /// INTERNAL ONLY"},
{"lineNum":"   46","line":"    ///"},
{"lineNum":"   47","line":"    # define BOOST_PROTO_ADDROF(x) ((char const volatile*)boost::addressof(x))"},
{"lineNum":"   48","line":"    /// INTERNAL ONLY"},
{"lineNum":"   49","line":"    ///"},
{"lineNum":"   50","line":"    # define BOOST_PROTO_OFFSETOF(s,m) (BOOST_PROTO_ADDROF((((s *)this)->m)) - BOOST_PROTO_ADDROF(*((s *)this)))"},
{"lineNum":"   51","line":"    #else"},
{"lineNum":"   52","line":"    /// INTERNAL ONLY"},
{"lineNum":"   53","line":"    ///"},
{"lineNum":"   54","line":"    # define BOOST_PROTO_OFFSETOF offsetof"},
{"lineNum":"   55","line":"    #endif"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"    /// INTERNAL ONLY"},
{"lineNum":"   58","line":"    ///"},
{"lineNum":"   59","line":"    #define BOOST_PROTO_CONST() const"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"    /// INTERNAL ONLY"},
{"lineNum":"   62","line":"    ///"},
{"lineNum":"   63","line":"    #define BOOST_PROTO_TYPENAME() typename"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"    /// INTERNAL ONLY"},
{"lineNum":"   66","line":"    ///"},
{"lineNum":"   67","line":"    #define BOOST_PROTO_TEMPLATE_YES_(Z, N) template<BOOST_PP_ENUM_PARAMS_Z(Z, N, typename A)>"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"    /// INTERNAL ONLY"},
{"lineNum":"   70","line":"    ///"},
{"lineNum":"   71","line":"    #define BOOST_PROTO_TEMPLATE_NO_(Z, N)"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"    /// INTERNAL ONLY"},
{"lineNum":"   74","line":"    ///"},
{"lineNum":"   75","line":"    #define BOOST_PROTO_DEFINE_FUN_OP_IMPL_(Z, N, DATA, Const)                                      \\"},
{"lineNum":"   76","line":"        BOOST_PP_IF(N, BOOST_PROTO_TEMPLATE_YES_, BOOST_PROTO_TEMPLATE_NO_)(Z, N)                   \\"},
{"lineNum":"   77","line":"        BOOST_PROTO_DISABLE_MSVC_C4714 BOOST_FORCEINLINE                                            \\"},
{"lineNum":"   78","line":"        typename BOOST_PROTO_RESULT_OF<                                                             \\"},
{"lineNum":"   79","line":"            proto_generator(                                                                        \\"},
{"lineNum":"   80","line":"                typename boost::proto::result_of::BOOST_PP_CAT(funop, N)<                           \\"},
{"lineNum":"   81","line":"                    proto_derived_expr Const()                                                      \\"},
{"lineNum":"   82","line":"                  , proto_domain                                                                    \\"},
{"lineNum":"   83","line":"                    BOOST_PP_ENUM_TRAILING_PARAMS_Z(Z, N, const A)                                  \\"},
{"lineNum":"   84","line":"                >::type                                                                             \\"},
{"lineNum":"   85","line":"            )                                                                                       \\"},
{"lineNum":"   86","line":"        >::type const                                                                               \\"},
{"lineNum":"   87","line":"        operator ()(BOOST_PP_ENUM_BINARY_PARAMS_Z(Z, N, A, const &a)) Const()                       \\"},
{"lineNum":"   88","line":"        {                                                                                           \\"},
{"lineNum":"   89","line":"            typedef boost::proto::result_of::BOOST_PP_CAT(funop, N)<                                \\"},
{"lineNum":"   90","line":"                proto_derived_expr Const()                                                          \\"},
{"lineNum":"   91","line":"              , proto_domain                                                                        \\"},
{"lineNum":"   92","line":"                BOOST_PP_ENUM_TRAILING_PARAMS_Z(Z, N, const A)                                      \\"},
{"lineNum":"   93","line":"            > funop;                                                                                \\"},
{"lineNum":"   94","line":"            return proto_generator()(                                                               \\"},
{"lineNum":"   95","line":"                funop::call(                                                                        \\"},
{"lineNum":"   96","line":"                    *static_cast<proto_derived_expr Const() *>(this)                                \\"},
{"lineNum":"   97","line":"                    BOOST_PP_ENUM_TRAILING_PARAMS_Z(Z, N, a)                                        \\"},
{"lineNum":"   98","line":"                )                                                                                   \\"},
{"lineNum":"   99","line":"            );                                                                                      \\"},
{"lineNum":"  100","line":"        }                                                                                           \\"},
{"lineNum":"  101","line":"        /**/"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"    /// INTERNAL ONLY"},
{"lineNum":"  104","line":"    ///"},
{"lineNum":"  105","line":"    #define BOOST_PROTO_DEFINE_FUN_OP_VARIADIC_IMPL_(Const)                                         \\"},
{"lineNum":"  106","line":"        template<typename... A>                                                                     \\"},
{"lineNum":"  107","line":"        BOOST_PROTO_DISABLE_MSVC_C4714 BOOST_FORCEINLINE                                            \\"},
{"lineNum":"  108","line":"        typename BOOST_PROTO_RESULT_OF<                                                             \\"},
{"lineNum":"  109","line":"            proto_generator(                                                                        \\"},
{"lineNum":"  110","line":"                typename boost::proto::result_of::funop<                                            \\"},
{"lineNum":"  111","line":"                    proto_derived_expr Const()(A const &...)                                        \\"},
{"lineNum":"  112","line":"                  , proto_derived_expr                                                              \\"},
{"lineNum":"  113","line":"                  , proto_domain                                                                    \\"},
{"lineNum":"  114","line":"                >::type                                                                             \\"},
{"lineNum":"  115","line":"            )                                                                                       \\"},
{"lineNum":"  116","line":"        >::type const                                                                               \\"},
{"lineNum":"  117","line":"        operator ()(A const &...a) Const()                                                          \\"},
{"lineNum":"  118","line":"        {                                                                                           \\"},
{"lineNum":"  119","line":"            typedef boost::proto::result_of::funop<                                                 \\"},
{"lineNum":"  120","line":"                proto_derived_expr Const()(A const &...)                                            \\"},
{"lineNum":"  121","line":"              , proto_derived_expr                                                                  \\"},
{"lineNum":"  122","line":"              , proto_domain                                                                        \\"},
{"lineNum":"  123","line":"            > funop;                                                                                \\"},
{"lineNum":"  124","line":"            return proto_generator()(                                                               \\"},
{"lineNum":"  125","line":"                funop::call(                                                                        \\"},
{"lineNum":"  126","line":"                    *static_cast<proto_derived_expr Const() *>(this)                                \\"},
{"lineNum":"  127","line":"                  , a...                                                                            \\"},
{"lineNum":"  128","line":"                )                                                                                   \\"},
{"lineNum":"  129","line":"            );                                                                                      \\"},
{"lineNum":"  130","line":"        }                                                                                           \\"},
{"lineNum":"  131","line":"        /**/"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"    /// INTERNAL ONLY"},
{"lineNum":"  134","line":"    ///"},
{"lineNum":"  135","line":"    #define BOOST_PROTO_DEFINE_FUN_OP_CONST(Z, N, DATA)                                             \\"},
{"lineNum":"  136","line":"        BOOST_PROTO_DEFINE_FUN_OP_IMPL_(Z, N, DATA, BOOST_PROTO_CONST)                              \\"},
{"lineNum":"  137","line":"        /**/"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"    /// INTERNAL ONLY"},
{"lineNum":"  140","line":"    ///"},
{"lineNum":"  141","line":"    #define BOOST_PROTO_DEFINE_FUN_OP_NON_CONST(Z, N, DATA)                                         \\"},
{"lineNum":"  142","line":"        BOOST_PROTO_DEFINE_FUN_OP_IMPL_(Z, N, DATA, BOOST_PP_EMPTY)                                 \\"},
{"lineNum":"  143","line":"        /**/"},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"    /// INTERNAL ONLY"},
{"lineNum":"  146","line":"    ///"},
{"lineNum":"  147","line":"    #define BOOST_PROTO_DEFINE_FUN_OP(Z, N, DATA)                                                   \\"},
{"lineNum":"  148","line":"        BOOST_PROTO_DEFINE_FUN_OP_CONST(Z, N, DATA)                                                 \\"},
{"lineNum":"  149","line":"        BOOST_PROTO_DEFINE_FUN_OP_NON_CONST(Z, N, DATA)                                             \\"},
{"lineNum":"  150","line":"        /**/"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"    /// INTERNAL ONLY"},
{"lineNum":"  153","line":"    ///"},
{"lineNum":"  154","line":"    #define BOOST_PROTO_EXTENDS_CHILD(Z, N, DATA)                                                   \\"},
{"lineNum":"  155","line":"        typedef                                                                                     \\"},
{"lineNum":"  156","line":"            typename proto_base_expr::BOOST_PP_CAT(proto_child, N)                                  \\"},
{"lineNum":"  157","line":"        BOOST_PP_CAT(proto_child, N);                                                               \\"},
{"lineNum":"  158","line":"        /**/"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"    #define BOOST_PROTO_BASIC_EXTENDS_(Expr, Derived, Domain)                                       \\"},
{"lineNum":"  161","line":"        Expr proto_expr_;                                                                           \\"},
{"lineNum":"  162","line":"                                                                                                    \\"},
{"lineNum":"  163","line":"        typedef Expr proto_base_expr_; /**< INTERNAL ONLY */                                        \\"},
{"lineNum":"  164","line":"        typedef typename proto_base_expr_::proto_base_expr proto_base_expr;                         \\"},
{"lineNum":"  165","line":"        typedef BOOST_PROTO_REMOVE_TYPENAME(Domain) proto_domain;                                   \\"},
{"lineNum":"  166","line":"        typedef Derived proto_derived_expr;                                                         \\"},
{"lineNum":"  167","line":"        typedef Domain::proto_generator proto_generator;                                            \\"},
{"lineNum":"  168","line":"        typedef typename proto_base_expr::proto_tag proto_tag;                                      \\"},
{"lineNum":"  169","line":"        typedef typename proto_base_expr::proto_args proto_args;                                    \\"},
{"lineNum":"  170","line":"        typedef typename proto_base_expr::proto_arity proto_arity;                                  \\"},
{"lineNum":"  171","line":"        typedef typename proto_base_expr::proto_grammar proto_grammar;                              \\"},
{"lineNum":"  172","line":"        typedef typename proto_base_expr::address_of_hack_type_ proto_address_of_hack_type_;        \\"},
{"lineNum":"  173","line":"        typedef void proto_is_expr_; /**< INTERNAL ONLY */                                          \\"},
{"lineNum":"  174","line":"        static const long proto_arity_c = proto_base_expr::proto_arity_c;                           \\"},
{"lineNum":"  175","line":"        typedef boost::proto::tag::proto_expr<proto_tag, proto_domain> fusion_tag;                  \\"},
{"lineNum":"  176","line":"        BOOST_PP_REPEAT(BOOST_PROTO_MAX_ARITY, BOOST_PROTO_EXTENDS_CHILD, ~)                        \\"},
{"lineNum":"  177","line":"                                                                                                    \\"},
{"lineNum":"  178","line":"        BOOST_PROTO_DISABLE_MSVC_C4714 BOOST_FORCEINLINE                                            \\"},
{"lineNum":"  179","line":"        static proto_derived_expr const make(Expr const &e)                                         \\"},
{"lineNum":"  180","line":"        {                                                                                           \\"},
{"lineNum":"  181","line":"            proto_derived_expr that = {e};                                                          \\"},
{"lineNum":"  182","line":"            return that;                                                                            \\"},
{"lineNum":"  183","line":"        }                                                                                           \\"},
{"lineNum":"  184","line":"                                                                                                    \\"},
{"lineNum":"  185","line":"        BOOST_PROTO_DISABLE_MSVC_C4714 BOOST_FORCEINLINE                                            \\"},
{"lineNum":"  186","line":"        proto_base_expr &proto_base()                                                               \\"},
{"lineNum":"  187","line":"        {                                                                                           \\"},
{"lineNum":"  188","line":"            return this->proto_expr_.proto_base();                                                  \\"},
{"lineNum":"  189","line":"        }                                                                                           \\"},
{"lineNum":"  190","line":"                                                                                                    \\"},
{"lineNum":"  191","line":"        BOOST_PROTO_DISABLE_MSVC_C4714 BOOST_FORCEINLINE                                            \\"},
{"lineNum":"  192","line":"        proto_base_expr const &proto_base() const                                                   \\"},
{"lineNum":"  193","line":"        {                                                                                           \\"},
{"lineNum":"  194","line":"            return this->proto_expr_.proto_base();                                                  \\"},
{"lineNum":"  195","line":"        }                                                                                           \\"},
{"lineNum":"  196","line":"                                                                                                    \\"},
{"lineNum":"  197","line":"        BOOST_PROTO_DISABLE_MSVC_C4714 BOOST_FORCEINLINE                                            \\"},
{"lineNum":"  198","line":"        operator proto_address_of_hack_type_() const                                                \\"},
{"lineNum":"  199","line":"        {                                                                                           \\"},
{"lineNum":"  200","line":"            return boost::addressof(this->proto_base().child0);                                     \\"},
{"lineNum":"  201","line":"        }                                                                                           \\"},
{"lineNum":"  202","line":"        /**/"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"    #define BOOST_PROTO_BASIC_EXTENDS(Expr, Derived, Domain)                                        \\"},
{"lineNum":"  205","line":"        BOOST_PROTO_BASIC_EXTENDS_(Expr, Derived, Domain)                                           \\"},
{"lineNum":"  206","line":"        typedef void proto_is_aggregate_;                                                           \\"},
{"lineNum":"  207","line":"        /**< INTERNAL ONLY */"},
{"lineNum":"  208","line":""},
{"lineNum":"  209","line":"    #define BOOST_PROTO_EXTENDS_COPY_ASSIGN_IMPL_(This, Const, Typename)                            \\"},
{"lineNum":"  210","line":"        BOOST_PROTO_DISABLE_MSVC_C4522                                                              \\"},
{"lineNum":"  211","line":"        BOOST_PROTO_DISABLE_MSVC_C4714 BOOST_FORCEINLINE                                            \\"},
{"lineNum":"  212","line":"        Typename() BOOST_PROTO_RESULT_OF<                                                           \\"},
{"lineNum":"  213","line":"            Typename() This::proto_generator(                                                       \\"},
{"lineNum":"  214","line":"                Typename() boost::proto::base_expr<                                                 \\"},
{"lineNum":"  215","line":"                    Typename() This::proto_domain                                                   \\"},
{"lineNum":"  216","line":"                  , boost::proto::tag::assign                                                       \\"},
{"lineNum":"  217","line":"                  , boost::proto::list2<                                                            \\"},
{"lineNum":"  218","line":"                        This &                                                                      \\"},
{"lineNum":"  219","line":"                      , This Const() &                                                              \\"},
{"lineNum":"  220","line":"                    >                                                                               \\"},
{"lineNum":"  221","line":"                >::type                                                                             \\"},
{"lineNum":"  222","line":"            )                                                                                       \\"},
{"lineNum":"  223","line":"        >::type const                                                                               \\"},
{"lineNum":"  224","line":"        operator =(This Const() &a)                                                                 \\"},
{"lineNum":"  225","line":"        {                                                                                           \\"},
{"lineNum":"  226","line":"            typedef                                                                                 \\"},
{"lineNum":"  227","line":"                Typename() boost::proto::base_expr<                                                 \\"},
{"lineNum":"  228","line":"                    Typename() This::proto_domain                                                   \\"},
{"lineNum":"  229","line":"                  , boost::proto::tag::assign                                                       \\"},
{"lineNum":"  230","line":"                  , boost::proto::list2<                                                            \\"},
{"lineNum":"  231","line":"                        This &                                                                      \\"},
{"lineNum":"  232","line":"                      , This Const() &                                                              \\"},
{"lineNum":"  233","line":"                    >                                                                               \\"},
{"lineNum":"  234","line":"                >::type                                                                             \\"},
{"lineNum":"  235","line":"            that_type;                                                                              \\"},
{"lineNum":"  236","line":"            that_type const that = {                                                                \\"},
{"lineNum":"  237","line":"                *this                                                                               \\"},
{"lineNum":"  238","line":"              , a                                                                                   \\"},
{"lineNum":"  239","line":"            };                                                                                      \\"},
{"lineNum":"  240","line":"            return Typename() This::proto_generator()(that);                                        \\"},
{"lineNum":"  241","line":"        }                                                                                           \\"},
{"lineNum":"  242","line":"        /**/"},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"        // MSVC 8.0 and higher seem to need copy-assignment operator to be overloaded on *both*"},
{"lineNum":"  245","line":"        // const and non-const rhs arguments."},
{"lineNum":"  246","line":"    #if BOOST_WORKAROUND(BOOST_MSVC, BOOST_TESTED_AT(1600)) && (BOOST_MSVC > 1310)"},
{"lineNum":"  247","line":"        #define BOOST_PROTO_EXTENDS_COPY_ASSIGN_(This, Typename)                                    \\"},
{"lineNum":"  248","line":"            BOOST_PROTO_EXTENDS_COPY_ASSIGN_IMPL_(This, BOOST_PP_EMPTY, Typename)                   \\"},
{"lineNum":"  249","line":"            BOOST_PROTO_EXTENDS_COPY_ASSIGN_IMPL_(This, BOOST_PROTO_CONST, Typename)                \\"},
{"lineNum":"  250","line":"            /**/"},
{"lineNum":"  251","line":"    #else"},
{"lineNum":"  252","line":"        #define BOOST_PROTO_EXTENDS_COPY_ASSIGN_(This, Typename)                                    \\"},
{"lineNum":"  253","line":"            BOOST_PROTO_EXTENDS_COPY_ASSIGN_IMPL_(This, BOOST_PROTO_CONST, Typename)                \\"},
{"lineNum":"  254","line":"            /**/"},
{"lineNum":"  255","line":"    #endif"},
{"lineNum":"  256","line":""},
{"lineNum":"  257","line":"        /// INTERNAL ONLY"},
{"lineNum":"  258","line":"        ///"},
{"lineNum":"  259","line":"    #define BOOST_PROTO_EXTENDS_ASSIGN_IMPL_(ThisConst, ThatConst)                                  \\"},
{"lineNum":"  260","line":"        template<typename A>                                                                        \\"},
{"lineNum":"  261","line":"        BOOST_PROTO_DISABLE_MSVC_C4714 BOOST_FORCEINLINE                                            \\"},
{"lineNum":"  262","line":"        typename BOOST_PROTO_RESULT_OF<                                                             \\"},
{"lineNum":"  263","line":"            proto_generator(                                                                        \\"},
{"lineNum":"  264","line":"                typename boost::proto::base_expr<                                                   \\"},
{"lineNum":"  265","line":"                    proto_domain                                                                    \\"},
{"lineNum":"  266","line":"                  , boost::proto::tag::assign                                                       \\"},
{"lineNum":"  267","line":"                  , boost::proto::list2<                                                            \\"},
{"lineNum":"  268","line":"                        proto_derived_expr ThisConst() &                                            \\"},
{"lineNum":"  269","line":"                      , typename boost::proto::result_of::as_child<A ThatConst(), proto_domain>::type \\"},
{"lineNum":"  270","line":"                    >                                                                               \\"},
{"lineNum":"  271","line":"                >::type                                                                             \\"},
{"lineNum":"  272","line":"            )                                                                                       \\"},
{"lineNum":"  273","line":"        >::type const                                                                               \\"},
{"lineNum":"  274","line":"        operator =(A ThatConst() &a) ThisConst()                                                    \\"},
{"lineNum":"  275","line":"        {                                                                                           \\"},
{"lineNum":"  276","line":"            typedef                                                                                 \\"},
{"lineNum":"  277","line":"                typename boost::proto::base_expr<                                                   \\"},
{"lineNum":"  278","line":"                    proto_domain                                                                    \\"},
{"lineNum":"  279","line":"                  , boost::proto::tag::assign                                                       \\"},
{"lineNum":"  280","line":"                  , boost::proto::list2<                                                            \\"},
{"lineNum":"  281","line":"                        proto_derived_expr ThisConst() &                                            \\"},
{"lineNum":"  282","line":"                      , typename boost::proto::result_of::as_child<A ThatConst(), proto_domain>::type \\"},
{"lineNum":"  283","line":"                    >                                                                               \\"},
{"lineNum":"  284","line":"                >::type                                                                             \\"},
{"lineNum":"  285","line":"            that_type;                                                                              \\"},
{"lineNum":"  286","line":"            that_type const that = {                                                                \\"},
{"lineNum":"  287","line":"                *static_cast<proto_derived_expr ThisConst() *>(this)                                \\"},
{"lineNum":"  288","line":"              , boost::proto::as_child<proto_domain>(a)                                             \\"},
{"lineNum":"  289","line":"            };                                                                                      \\"},
{"lineNum":"  290","line":"            return proto_generator()(that);                                                         \\"},
{"lineNum":"  291","line":"        }                                                                                           \\"},
{"lineNum":"  292","line":"        /**/"},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"    #define BOOST_PROTO_EXTENDS_ASSIGN_CONST_()                                                     \\"},
{"lineNum":"  295","line":"        BOOST_PROTO_EXTENDS_ASSIGN_IMPL_(BOOST_PROTO_CONST, BOOST_PP_EMPTY)                         \\"},
{"lineNum":"  296","line":"        BOOST_PROTO_EXTENDS_ASSIGN_IMPL_(BOOST_PROTO_CONST, BOOST_PROTO_CONST)                      \\"},
{"lineNum":"  297","line":"        /**/"},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"    #define BOOST_PROTO_EXTENDS_ASSIGN_NON_CONST_()                                                 \\"},
{"lineNum":"  300","line":"        BOOST_PROTO_EXTENDS_ASSIGN_IMPL_(BOOST_PP_EMPTY, BOOST_PP_EMPTY)                            \\"},
{"lineNum":"  301","line":"        BOOST_PROTO_EXTENDS_ASSIGN_IMPL_(BOOST_PP_EMPTY, BOOST_PROTO_CONST)                         \\"},
{"lineNum":"  302","line":"        /**/"},
{"lineNum":"  303","line":""},
{"lineNum":"  304","line":"    #define BOOST_PROTO_EXTENDS_ASSIGN_()                                                           \\"},
{"lineNum":"  305","line":"        BOOST_PROTO_EXTENDS_ASSIGN_CONST_()                                                         \\"},
{"lineNum":"  306","line":"        BOOST_PROTO_EXTENDS_ASSIGN_NON_CONST_()                                                     \\"},
{"lineNum":"  307","line":"        /**/"},
{"lineNum":"  308","line":""},
{"lineNum":"  309","line":"    #define BOOST_PROTO_EXTENDS_ASSIGN_CONST()                                                      \\"},
{"lineNum":"  310","line":"        BOOST_PROTO_EXTENDS_COPY_ASSIGN_(proto_derived_expr, BOOST_PROTO_TYPENAME)                  \\"},
{"lineNum":"  311","line":"        BOOST_PROTO_EXTENDS_ASSIGN_CONST_()                                                         \\"},
{"lineNum":"  312","line":"        /**/"},
{"lineNum":"  313","line":""},
{"lineNum":"  314","line":"    #define BOOST_PROTO_EXTENDS_ASSIGN_NON_CONST()                                                  \\"},
{"lineNum":"  315","line":"        BOOST_PROTO_EXTENDS_COPY_ASSIGN_(proto_derived_expr, BOOST_PROTO_TYPENAME)                  \\"},
{"lineNum":"  316","line":"        BOOST_PROTO_EXTENDS_ASSIGN_NON_CONST_()                                                     \\"},
{"lineNum":"  317","line":"        /**/"},
{"lineNum":"  318","line":""},
{"lineNum":"  319","line":"    #define BOOST_PROTO_EXTENDS_ASSIGN()                                                            \\"},
{"lineNum":"  320","line":"        BOOST_PROTO_EXTENDS_COPY_ASSIGN_(proto_derived_expr, BOOST_PROTO_TYPENAME)                  \\"},
{"lineNum":"  321","line":"        BOOST_PROTO_EXTENDS_ASSIGN_()                                                               \\"},
{"lineNum":"  322","line":"        /**/"},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"        /// INTERNAL ONLY"},
{"lineNum":"  325","line":"        ///"},
{"lineNum":"  326","line":"    #define BOOST_PROTO_EXTENDS_SUBSCRIPT_IMPL_(ThisConst, ThatConst)                               \\"},
{"lineNum":"  327","line":"        template<typename A>                                                                        \\"},
{"lineNum":"  328","line":"        BOOST_PROTO_DISABLE_MSVC_C4714 BOOST_FORCEINLINE                                            \\"},
{"lineNum":"  329","line":"        typename BOOST_PROTO_RESULT_OF<                                                             \\"},
{"lineNum":"  330","line":"            proto_generator(                                                                        \\"},
{"lineNum":"  331","line":"                typename boost::proto::base_expr<                                                   \\"},
{"lineNum":"  332","line":"                    proto_domain                                                                    \\"},
{"lineNum":"  333","line":"                  , boost::proto::tag::subscript                                                    \\"},
{"lineNum":"  334","line":"                  , boost::proto::list2<                                                            \\"},
{"lineNum":"  335","line":"                        proto_derived_expr ThisConst() &                                            \\"},
{"lineNum":"  336","line":"                      , typename boost::proto::result_of::as_child<A ThatConst(), proto_domain>::type \\"},
{"lineNum":"  337","line":"                    >                                                                               \\"},
{"lineNum":"  338","line":"                >::type                                                                             \\"},
{"lineNum":"  339","line":"            )                                                                                       \\"},
{"lineNum":"  340","line":"        >::type const                                                                               \\"},
{"lineNum":"  341","line":"        operator [](A ThatConst() &a) ThisConst()                                                   \\"},
{"lineNum":"  342","line":"        {                                                                                           \\"},
{"lineNum":"  343","line":"            typedef                                                                                 \\"},
{"lineNum":"  344","line":"                typename boost::proto::base_expr<                                                   \\"},
{"lineNum":"  345","line":"                    proto_domain                                                                    \\"},
{"lineNum":"  346","line":"                  , boost::proto::tag::subscript                                                    \\"},
{"lineNum":"  347","line":"                  , boost::proto::list2<                                                            \\"},
{"lineNum":"  348","line":"                        proto_derived_expr ThisConst() &                                            \\"},
{"lineNum":"  349","line":"                      , typename boost::proto::result_of::as_child<A ThatConst(), proto_domain>::type \\"},
{"lineNum":"  350","line":"                    >                                                                               \\"},
{"lineNum":"  351","line":"                >::type                                                                             \\"},
{"lineNum":"  352","line":"            that_type;                                                                              \\"},
{"lineNum":"  353","line":"            that_type const that = {                                                                \\"},
{"lineNum":"  354","line":"                *static_cast<proto_derived_expr ThisConst() *>(this)                                \\"},
{"lineNum":"  355","line":"              , boost::proto::as_child<proto_domain>(a)                                             \\"},
{"lineNum":"  356","line":"            };                                                                                      \\"},
{"lineNum":"  357","line":"            return proto_generator()(that);                                                         \\"},
{"lineNum":"  358","line":"        }                                                                                           \\"},
{"lineNum":"  359","line":"        /**/"},
{"lineNum":"  360","line":""},
{"lineNum":"  361","line":"    #define BOOST_PROTO_EXTENDS_SUBSCRIPT_CONST()                                                   \\"},
{"lineNum":"  362","line":"        BOOST_PROTO_EXTENDS_SUBSCRIPT_IMPL_(BOOST_PROTO_CONST, BOOST_PP_EMPTY)                      \\"},
{"lineNum":"  363","line":"        BOOST_PROTO_EXTENDS_SUBSCRIPT_IMPL_(BOOST_PROTO_CONST, BOOST_PROTO_CONST)                   \\"},
{"lineNum":"  364","line":"        /**/"},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":"    #define BOOST_PROTO_EXTENDS_SUBSCRIPT_NON_CONST()                                               \\"},
{"lineNum":"  367","line":"        BOOST_PROTO_EXTENDS_SUBSCRIPT_IMPL_(BOOST_PP_EMPTY, BOOST_PP_EMPTY)                         \\"},
{"lineNum":"  368","line":"        BOOST_PROTO_EXTENDS_SUBSCRIPT_IMPL_(BOOST_PP_EMPTY, BOOST_PROTO_CONST)                      \\"},
{"lineNum":"  369","line":"        /**/"},
{"lineNum":"  370","line":""},
{"lineNum":"  371","line":"    #define BOOST_PROTO_EXTENDS_SUBSCRIPT()                                                         \\"},
{"lineNum":"  372","line":"        BOOST_PROTO_EXTENDS_SUBSCRIPT_CONST()                                                       \\"},
{"lineNum":"  373","line":"        BOOST_PROTO_EXTENDS_SUBSCRIPT_NON_CONST()                                                   \\"},
{"lineNum":"  374","line":"        /**/"},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"        /// INTERNAL ONLY"},
{"lineNum":"  377","line":"        ///"},
{"lineNum":"  378","line":"    #define BOOST_PROTO_EXTENDS_FUNCTION_()                                                         \\"},
{"lineNum":"  379","line":"        template<typename Sig>                                                                      \\"},
{"lineNum":"  380","line":"        struct result                                                                               \\"},
{"lineNum":"  381","line":"        {                                                                                           \\"},
{"lineNum":"  382","line":"            typedef                                                                                 \\"},
{"lineNum":"  383","line":"                typename BOOST_PROTO_RESULT_OF<                                                     \\"},
{"lineNum":"  384","line":"                    proto_generator(                                                                \\"},
{"lineNum":"  385","line":"                        typename boost::proto::result_of::funop<                                    \\"},
{"lineNum":"  386","line":"                            Sig                                                                     \\"},
{"lineNum":"  387","line":"                          , proto_derived_expr                                                      \\"},
{"lineNum":"  388","line":"                          , proto_domain                                                            \\"},
{"lineNum":"  389","line":"                        >::type                                                                     \\"},
{"lineNum":"  390","line":"                    )                                                                               \\"},
{"lineNum":"  391","line":"                >::type const                                                                       \\"},
{"lineNum":"  392","line":"            type;                                                                                   \\"},
{"lineNum":"  393","line":"        };                                                                                          \\"},
{"lineNum":"  394","line":"        /**/"},
{"lineNum":"  395","line":""},
{"lineNum":"  396","line":"    #ifndef BOOST_NO_CXX11_VARIADIC_TEMPLATES"},
{"lineNum":"  397","line":"        #define BOOST_PROTO_EXTENDS_FUNCTION_CONST()                                                \\"},
{"lineNum":"  398","line":"            BOOST_PROTO_EXTENDS_FUNCTION_()                                                         \\"},
{"lineNum":"  399","line":"            BOOST_PROTO_DEFINE_FUN_OP_VARIADIC_IMPL_(BOOST_PROTO_CONST)                             \\"},
{"lineNum":"  400","line":"            /**/"},
{"lineNum":"  401","line":""},
{"lineNum":"  402","line":"        #define BOOST_PROTO_EXTENDS_FUNCTION_NON_CONST()                                            \\"},
{"lineNum":"  403","line":"            BOOST_PROTO_EXTENDS_FUNCTION_()                                                         \\"},
{"lineNum":"  404","line":"            BOOST_PROTO_DEFINE_FUN_OP_VARIADIC_IMPL_(BOOST_PP_EMPTY)                                \\"},
{"lineNum":"  405","line":"            /**/"},
{"lineNum":"  406","line":""},
{"lineNum":"  407","line":"        #define BOOST_PROTO_EXTENDS_FUNCTION()                                                      \\"},
{"lineNum":"  408","line":"            BOOST_PROTO_EXTENDS_FUNCTION_()                                                         \\"},
{"lineNum":"  409","line":"            BOOST_PROTO_DEFINE_FUN_OP_VARIADIC_IMPL_(BOOST_PP_EMPTY)                                \\"},
{"lineNum":"  410","line":"            BOOST_PROTO_DEFINE_FUN_OP_VARIADIC_IMPL_(BOOST_PROTO_CONST)                             \\"},
{"lineNum":"  411","line":"            /**/"},
{"lineNum":"  412","line":"    #else"},
{"lineNum":"  413","line":"        #define BOOST_PROTO_EXTENDS_FUNCTION_CONST()                                                \\"},
{"lineNum":"  414","line":"            BOOST_PROTO_EXTENDS_FUNCTION_()                                                         \\"},
{"lineNum":"  415","line":"            BOOST_PP_REPEAT_FROM_TO(                                                                \\"},
{"lineNum":"  416","line":"                0                                                                                   \\"},
{"lineNum":"  417","line":"              , BOOST_PROTO_MAX_FUNCTION_CALL_ARITY                                                 \\"},
{"lineNum":"  418","line":"              , BOOST_PROTO_DEFINE_FUN_OP_CONST                                                     \\"},
{"lineNum":"  419","line":"              , ~                                                                                   \\"},
{"lineNum":"  420","line":"            )                                                                                       \\"},
{"lineNum":"  421","line":"            /**/"},
{"lineNum":"  422","line":""},
{"lineNum":"  423","line":"        #define BOOST_PROTO_EXTENDS_FUNCTION_NON_CONST()                                            \\"},
{"lineNum":"  424","line":"            BOOST_PROTO_EXTENDS_FUNCTION_()                                                         \\"},
{"lineNum":"  425","line":"            BOOST_PP_REPEAT_FROM_TO(                                                                \\"},
{"lineNum":"  426","line":"                0                                                                                   \\"},
{"lineNum":"  427","line":"              , BOOST_PROTO_MAX_FUNCTION_CALL_ARITY                                                 \\"},
{"lineNum":"  428","line":"              , BOOST_PROTO_DEFINE_FUN_OP_NON_CONST                                                 \\"},
{"lineNum":"  429","line":"              , ~                                                                                   \\"},
{"lineNum":"  430","line":"            )                                                                                       \\"},
{"lineNum":"  431","line":"            /**/"},
{"lineNum":"  432","line":""},
{"lineNum":"  433","line":"        #define BOOST_PROTO_EXTENDS_FUNCTION()                                                      \\"},
{"lineNum":"  434","line":"            BOOST_PROTO_EXTENDS_FUNCTION_()                                                         \\"},
{"lineNum":"  435","line":"            BOOST_PP_REPEAT_FROM_TO(                                                                \\"},
{"lineNum":"  436","line":"                0                                                                                   \\"},
{"lineNum":"  437","line":"              , BOOST_PROTO_MAX_FUNCTION_CALL_ARITY                                                 \\"},
{"lineNum":"  438","line":"              , BOOST_PROTO_DEFINE_FUN_OP                                                           \\"},
{"lineNum":"  439","line":"              , ~                                                                                   \\"},
{"lineNum":"  440","line":"            )                                                                                       \\"},
{"lineNum":"  441","line":"            /**/"},
{"lineNum":"  442","line":"    #endif"},
{"lineNum":"  443","line":""},
{"lineNum":"  444","line":"    #define BOOST_PROTO_EXTENDS(Expr, Derived, Domain)                                              \\"},
{"lineNum":"  445","line":"        BOOST_PROTO_BASIC_EXTENDS(Expr, Derived, Domain)                                            \\"},
{"lineNum":"  446","line":"        BOOST_PROTO_EXTENDS_ASSIGN()                                                                \\"},
{"lineNum":"  447","line":"        BOOST_PROTO_EXTENDS_SUBSCRIPT()                                                             \\"},
{"lineNum":"  448","line":"        BOOST_PROTO_EXTENDS_FUNCTION()                                                              \\"},
{"lineNum":"  449","line":"        /**/"},
{"lineNum":"  450","line":""},
{"lineNum":"  451","line":"    #define BOOST_PROTO_EXTENDS_USING_ASSIGN(Derived)                                               \\"},
{"lineNum":"  452","line":"        typedef typename Derived::proto_extends proto_extends;                                      \\"},
{"lineNum":"  453","line":"        using proto_extends::operator =;                                                            \\"},
{"lineNum":"  454","line":"        BOOST_PROTO_EXTENDS_COPY_ASSIGN_(Derived, BOOST_PROTO_TYPENAME)                             \\"},
{"lineNum":"  455","line":"        /**/"},
{"lineNum":"  456","line":""},
{"lineNum":"  457","line":"    #define BOOST_PROTO_EXTENDS_USING_ASSIGN_NON_DEPENDENT(Derived)                                 \\"},
{"lineNum":"  458","line":"        typedef Derived::proto_extends proto_extends;                                               \\"},
{"lineNum":"  459","line":"        using proto_extends::operator =;                                                            \\"},
{"lineNum":"  460","line":"        BOOST_PROTO_EXTENDS_COPY_ASSIGN_(Derived, BOOST_PP_EMPTY)                                   \\"},
{"lineNum":"  461","line":"        /**/"},
{"lineNum":"  462","line":""},
{"lineNum":"  463","line":"    namespace exprns_"},
{"lineNum":"  464","line":"    {"},
{"lineNum":"  465","line":"        /// \\brief Empty type to be used as a dummy template parameter of"},
{"lineNum":"  466","line":"        ///     POD expression wrappers. It allows argument-dependent lookup"},
{"lineNum":"  467","line":"        ///     to find Proto\'s operator overloads."},
{"lineNum":"  468","line":"        ///"},
{"lineNum":"  469","line":"        /// \\c proto::is_proto_expr allows argument-dependent lookup"},
{"lineNum":"  470","line":"        ///     to find Proto\'s operator overloads. For example:"},
{"lineNum":"  471","line":"        ///"},
{"lineNum":"  472","line":"        /// \\code"},
{"lineNum":"  473","line":"        /// template<typename T, typename Dummy = proto::is_proto_expr>"},
{"lineNum":"  474","line":"        /// struct my_terminal"},
{"lineNum":"  475","line":"        /// {"},
{"lineNum":"  476","line":"        ///     BOOST_PROTO_BASIC_EXTENDS("},
{"lineNum":"  477","line":"        ///         typename proto::terminal<T>::type"},
{"lineNum":"  478","line":"        ///       , my_terminal<T>"},
{"lineNum":"  479","line":"        ///       , default_domain"},
{"lineNum":"  480","line":"        ///     )"},
{"lineNum":"  481","line":"        /// };"},
{"lineNum":"  482","line":"        ///"},
{"lineNum":"  483","line":"        /// // ..."},
{"lineNum":"  484","line":"        /// my_terminal<int> _1, _2;"},
{"lineNum":"  485","line":"        /// _1 + _2; // OK, uses proto::operator+"},
{"lineNum":"  486","line":"        /// \\endcode"},
{"lineNum":"  487","line":"        ///"},
{"lineNum":"  488","line":"        /// Without the second \\c Dummy template parameter, Proto\'s operator"},
{"lineNum":"  489","line":"        /// overloads would not be considered by name lookup."},
{"lineNum":"  490","line":"        struct is_proto_expr"},
{"lineNum":"  491","line":"        {};"},
{"lineNum":"  492","line":""},
{"lineNum":"  493","line":"        /// \\brief extends\\<\\> class template for adding behaviors to a Proto expression template"},
{"lineNum":"  494","line":"        ///"},
{"lineNum":"  495","line":"        template<"},
{"lineNum":"  496","line":"            typename Expr"},
{"lineNum":"  497","line":"          , typename Derived"},
{"lineNum":"  498","line":"          , typename Domain     // = proto::default_domain"},
{"lineNum":"  499","line":"          , long Arity          // = Expr::proto_arity_c"},
{"lineNum":"  500","line":"        >"},
{"lineNum":"  501","line":"        struct extends"},
{"lineNum":"  502","line":"        {"},
{"lineNum":"  503","line":"            BOOST_FORCEINLINE"},
{"lineNum":"  504","line":"            extends()"},
{"lineNum":"  505","line":"              : proto_expr_()"},
{"lineNum":"  506","line":"            {}"},
{"lineNum":"  507","line":""},
{"lineNum":"  508","line":"            BOOST_FORCEINLINE"},
{"lineNum":"  509","line":"            extends(extends const &that)"},
{"lineNum":"  510","line":"              : proto_expr_(that.proto_expr_)"},
{"lineNum":"  511","line":"            {}"},
{"lineNum":"  512","line":""},
{"lineNum":"  513","line":"            BOOST_FORCEINLINE"},
{"lineNum":"  514","line":"            extends(Expr const &expr_)"},
{"lineNum":"  515","line":"              : proto_expr_(expr_)"},
{"lineNum":"  516","line":"            {}"},
{"lineNum":"  517","line":""},
{"lineNum":"  518","line":"            typedef extends proto_extends;"},
{"lineNum":"  519","line":"            BOOST_PROTO_BASIC_EXTENDS_(Expr, Derived, typename Domain)"},
{"lineNum":"  520","line":"            BOOST_PROTO_EXTENDS_ASSIGN_CONST_()"},
{"lineNum":"  521","line":"            BOOST_PROTO_EXTENDS_SUBSCRIPT_CONST()"},
{"lineNum":"  522","line":""},
{"lineNum":"  523","line":"            // Instead of using BOOST_PROTO_EXTENDS_FUNCTION, which uses"},
{"lineNum":"  524","line":"            // nested preprocessor loops, use file iteration here to generate"},
{"lineNum":"  525","line":"            // the operator() overloads, which is more efficient."},
{"lineNum":"  526","line":"            #include <boost/proto/detail/extends_funop_const.hpp>"},
{"lineNum":"  527","line":"        };"},
{"lineNum":"  528","line":""},
{"lineNum":"  529","line":"        /// \\brief extends\\<\\> class template for adding behaviors to a Proto expression template"},
{"lineNum":"  530","line":"        ///"},
{"lineNum":"  531","line":"        template<typename Expr, typename Derived, typename Domain>"},
{"lineNum":"  532","line":"        struct extends<Expr, Derived, Domain, 0>"},
{"lineNum":"  533","line":"        {"},
{"lineNum":"  534","line":"            BOOST_FORCEINLINE"},
{"lineNum":"  535","line":"            extends()"},
{"lineNum":"  536","line":"              : proto_expr_()","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  537","line":"            {}"},
{"lineNum":"  538","line":""},
{"lineNum":"  539","line":"            BOOST_FORCEINLINE"},
{"lineNum":"  540","line":"            extends(extends const &that)"},
{"lineNum":"  541","line":"              : proto_expr_(that.proto_expr_)"},
{"lineNum":"  542","line":"            {}"},
{"lineNum":"  543","line":""},
{"lineNum":"  544","line":"            BOOST_FORCEINLINE"},
{"lineNum":"  545","line":"            extends(Expr const &expr_)"},
{"lineNum":"  546","line":"              : proto_expr_(expr_)","class":"lineNoCov","hits":"0","possible_hits":"98",},
{"lineNum":"  547","line":"            {}"},
{"lineNum":"  548","line":""},
{"lineNum":"  549","line":"            typedef extends proto_extends;"},
{"lineNum":"  550","line":"            BOOST_PROTO_BASIC_EXTENDS_(Expr, Derived, typename Domain)"},
{"lineNum":"  551","line":"            BOOST_PROTO_EXTENDS_ASSIGN_()"},
{"lineNum":"  552","line":"            BOOST_PROTO_EXTENDS_SUBSCRIPT()"},
{"lineNum":"  553","line":""},
{"lineNum":"  554","line":"            // Instead of using BOOST_PROTO_EXTENDS_FUNCTION, which uses"},
{"lineNum":"  555","line":"            // nested preprocessor loops, use file iteration here to generate"},
{"lineNum":"  556","line":"            // the operator() overloads, which is more efficient."},
{"lineNum":"  557","line":"            #include <boost/proto/detail/extends_funop.hpp>"},
{"lineNum":"  558","line":"        };"},
{"lineNum":"  559","line":""},
{"lineNum":"  560","line":"        /// INTERNAL ONLY"},
{"lineNum":"  561","line":"        ///"},
{"lineNum":"  562","line":"        template<typename This, typename Fun, typename Domain>"},
{"lineNum":"  563","line":"        struct virtual_member"},
{"lineNum":"  564","line":"        {"},
{"lineNum":"  565","line":"            typedef Domain proto_domain;"},
{"lineNum":"  566","line":"            typedef typename Domain::proto_generator proto_generator;"},
{"lineNum":"  567","line":"            typedef virtual_member<This, Fun, Domain> proto_derived_expr;"},
{"lineNum":"  568","line":"            typedef tag::member proto_tag;"},
{"lineNum":"  569","line":"            typedef list2<This &, expr<tag::terminal, term<Fun> > const &> proto_args;"},
{"lineNum":"  570","line":"            typedef mpl::long_<2> proto_arity;"},
{"lineNum":"  571","line":"            typedef detail::not_a_valid_type proto_address_of_hack_type_;"},
{"lineNum":"  572","line":"            typedef void proto_is_expr_; /**< INTERNAL ONLY */"},
{"lineNum":"  573","line":"            static const long proto_arity_c = 2;"},
{"lineNum":"  574","line":"            typedef boost::proto::tag::proto_expr<proto_tag, Domain> fusion_tag;"},
{"lineNum":"  575","line":"            typedef This &proto_child0;"},
{"lineNum":"  576","line":"            typedef expr<tag::terminal, term<Fun> > const &proto_child1;"},
{"lineNum":"  577","line":"            typedef expr<proto_tag, proto_args, proto_arity_c> proto_base_expr;"},
{"lineNum":"  578","line":"            typedef basic_expr<proto_tag, proto_args, proto_arity_c> proto_grammar;"},
{"lineNum":"  579","line":"            typedef void proto_is_aggregate_; /**< INTERNAL ONLY */"},
{"lineNum":"  580","line":""},
{"lineNum":"  581","line":"            BOOST_PROTO_EXTENDS_ASSIGN_()"},
{"lineNum":"  582","line":"            BOOST_PROTO_EXTENDS_SUBSCRIPT()"},
{"lineNum":"  583","line":""},
{"lineNum":"  584","line":"            // Instead of using BOOST_PROTO_EXTENDS_FUNCTION, which uses"},
{"lineNum":"  585","line":"            // nested preprocessor loops, use file iteration here to generate"},
{"lineNum":"  586","line":"            // the operator() overloads, which is more efficient."},
{"lineNum":"  587","line":"            #define BOOST_PROTO_NO_WAVE_OUTPUT"},
{"lineNum":"  588","line":"            #include <boost/proto/detail/extends_funop.hpp>"},
{"lineNum":"  589","line":"            #undef BOOST_PROTO_NO_WAVE_OUTPUT"},
{"lineNum":"  590","line":""},
{"lineNum":"  591","line":"            BOOST_FORCEINLINE"},
{"lineNum":"  592","line":"            proto_base_expr const proto_base() const"},
{"lineNum":"  593","line":"            {"},
{"lineNum":"  594","line":"                proto_base_expr that = {this->child0(), this->child1()};"},
{"lineNum":"  595","line":"                return that;"},
{"lineNum":"  596","line":"            }"},
{"lineNum":"  597","line":""},
{"lineNum":"  598","line":"            BOOST_FORCEINLINE"},
{"lineNum":"  599","line":"            proto_child0 child0() const"},
{"lineNum":"  600","line":"            {"},
{"lineNum":"  601","line":"                using std::size_t;"},
{"lineNum":"  602","line":"                return *(This *)((char *)this - BOOST_PROTO_OFFSETOF(This, proto_member_union_start_));"},
{"lineNum":"  603","line":"            }"},
{"lineNum":"  604","line":""},
{"lineNum":"  605","line":"            BOOST_FORCEINLINE"},
{"lineNum":"  606","line":"            proto_child1 child1() const"},
{"lineNum":"  607","line":"            {"},
{"lineNum":"  608","line":"                static expr<tag::terminal, term<Fun>, 0> const that = {Fun()};"},
{"lineNum":"  609","line":"                return that;"},
{"lineNum":"  610","line":"            }"},
{"lineNum":"  611","line":"        };"},
{"lineNum":"  612","line":""},
{"lineNum":"  613","line":"        /// INTERNAL ONLY"},
{"lineNum":"  614","line":"        ///"},
{"lineNum":"  615","line":"        #define BOOST_PROTO_EXTENDS_MEMBER_(R, DOMAIN, ELEM)                                            \\"},
{"lineNum":"  616","line":"            boost::proto::exprns_::virtual_member<                                                      \\"},
{"lineNum":"  617","line":"                proto_derived_expr                                                                      \\"},
{"lineNum":"  618","line":"              , BOOST_PP_TUPLE_ELEM(2, 0, ELEM)                                                         \\"},
{"lineNum":"  619","line":"              , DOMAIN                                                                                  \\"},
{"lineNum":"  620","line":"            > BOOST_PP_TUPLE_ELEM(2, 1, ELEM);                                                          \\"},
{"lineNum":"  621","line":"            /**/"},
{"lineNum":"  622","line":""},
{"lineNum":"  623","line":"        /// \\brief For declaring virtual data members in an extension class."},
{"lineNum":"  624","line":"        ///"},
{"lineNum":"  625","line":"        #define BOOST_PROTO_EXTENDS_MEMBERS_WITH_DOMAIN(SEQ, DOMAIN)                                    \\"},
{"lineNum":"  626","line":"            union                                                                                       \\"},
{"lineNum":"  627","line":"            {                                                                                           \\"},
{"lineNum":"  628","line":"                char proto_member_union_start_;                                                         \\"},
{"lineNum":"  629","line":"                BOOST_PP_SEQ_FOR_EACH(BOOST_PROTO_EXTENDS_MEMBER_, DOMAIN, SEQ)                         \\"},
{"lineNum":"  630","line":"            };                                                                                          \\"},
{"lineNum":"  631","line":"            /**/"},
{"lineNum":"  632","line":""},
{"lineNum":"  633","line":"        /// \\brief For declaring virtual data members in an extension class."},
{"lineNum":"  634","line":"        ///"},
{"lineNum":"  635","line":"        #define BOOST_PROTO_EXTENDS_MEMBERS(SEQ)                                                        \\"},
{"lineNum":"  636","line":"            BOOST_PROTO_EXTENDS_MEMBERS_WITH_DOMAIN(SEQ, proto_domain)                                  \\"},
{"lineNum":"  637","line":"            /**/"},
{"lineNum":"  638","line":""},
{"lineNum":"  639","line":"    }"},
{"lineNum":"  640","line":""},
{"lineNum":"  641","line":"}}"},
{"lineNum":"  642","line":""},
{"lineNum":"  643","line":"#if defined(_MSC_VER)"},
{"lineNum":"  644","line":"# pragma warning(pop)"},
{"lineNum":"  645","line":"#endif"},
{"lineNum":"  646","line":""},
{"lineNum":"  647","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 2, "covered" : 0,};
var merged_data = [];
