var data = {lines:[
{"lineNum":"    1","line":"#ifndef DIAGNOSTICS_WORKER_H"},
{"lineNum":"    2","line":"#define DIAGNOSTICS_WORKER_H"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"#include <memory>"},
{"lineNum":"    6","line":"#include <string>"},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"#include <cereal/types/memory.hpp>"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#include \"synergia/bunch/diagnostics.h\""},
{"lineNum":"   11","line":"#include \"synergia/bunch/diagnostics_file.h\""},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"class Diagnostics_worker","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":"   14","line":"{"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"private:"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"    std::shared_ptr<Diagnostics> diag;"},
{"lineNum":"   19","line":"    Diagnostics_file diag_file;"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"public:"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"    // default constructor for serialization only"},
{"lineNum":"   24","line":"    Diagnostics_worker()"},
{"lineNum":"   25","line":"        : diag(), diag_file()","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   26","line":"    { }"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"    // construct a diag worker with given type of diag and filename"},
{"lineNum":"   29","line":"    // specialization is provided for s_p<Diagnostics> so the python"},
{"lineNum":"   30","line":"    // interface can register"},
{"lineNum":"   31","line":"    template<class DiagCal>"},
{"lineNum":"   32","line":"    Diagnostics_worker("},
{"lineNum":"   33","line":"            DiagCal const& diag,"},
{"lineNum":"   34","line":"            std::shared_ptr<Commxx> const& comm)"},
{"lineNum":"   35","line":"        : diag(std::make_shared<DiagCal>(diag))"},
{"lineNum":"   36","line":"        , diag_file(diag.filename(), diag.serial(), comm)","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"   37","line":"    { }","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"    // for registering from python only"},
{"lineNum":"   40","line":"    Diagnostics_worker("},
{"lineNum":"   41","line":"            std::shared_ptr<Diagnostics> const& diag,"},
{"lineNum":"   42","line":"            std::shared_ptr<Commxx> const& comm)"},
{"lineNum":"   43","line":"        : diag(diag)"},
{"lineNum":"   44","line":"        , diag_file(diag->filename(), diag->serial(), comm)"},
{"lineNum":"   45","line":"    { }"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"    std::string type() const;"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"    void update(Bunch const& bunch);"},
{"lineNum":"   50","line":"    void write();"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"    void update_and_write(Bunch const& bunch)"},
{"lineNum":"   53","line":"    { update(bunch); write(); }","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"private:"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"    friend class cereal::access;"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"    template<class AR>"},
{"lineNum":"   60","line":"    void serialize(AR & ar)"},
{"lineNum":"   61","line":"    {"},
{"lineNum":"   62","line":"        ar(CEREAL_NVP(diag));"},
{"lineNum":"   63","line":"        ar(CEREAL_NVP(diag_file));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   64","line":"    }"},
{"lineNum":"   65","line":"};"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"class Diagnostics_handler"},
{"lineNum":"   68","line":"{"},
{"lineNum":"   69","line":"private:"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"    Diagnostics_worker * worker;"},
{"lineNum":"   72","line":"    Bunch const* bunch;"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"public:"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"    Diagnostics_handler()"},
{"lineNum":"   77","line":"        : worker(nullptr), bunch(nullptr)"},
{"lineNum":"   78","line":"    { }"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"    Diagnostics_handler("},
{"lineNum":"   81","line":"            Diagnostics_worker& worker,"},
{"lineNum":"   82","line":"            Bunch const& bunch )"},
{"lineNum":"   83","line":"        : worker(&worker), bunch(&bunch)"},
{"lineNum":"   84","line":"    { }"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"    std::string type() const"},
{"lineNum":"   87","line":"    { return worker ? worker->type() : \"\"; }"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"    void update()"},
{"lineNum":"   90","line":"    { if(worker) worker->update(*bunch); }"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"    void write()"},
{"lineNum":"   93","line":"    { if(worker) worker->write(); }"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"    void update_and_write()"},
{"lineNum":"   96","line":"    { if(worker) worker->update_and_write(*bunch); }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   97","line":"};"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 7, "covered" : 0,};
var merged_data = [];
