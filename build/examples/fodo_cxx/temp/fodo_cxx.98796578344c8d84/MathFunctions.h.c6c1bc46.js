var data = {lines:[
{"lineNum":"    1","line":"// This file is part of Eigen, a lightweight C++ template library"},
{"lineNum":"    2","line":"// for linear algebra."},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Copyright (C) 2006-2010 Benoit Jacob <jacob.benoit.1@gmail.com>"},
{"lineNum":"    5","line":"// Copyright (c) 2021, NVIDIA CORPORATION. All rights reserved."},
{"lineNum":"    6","line":"//"},
{"lineNum":"    7","line":"// This Source Code Form is subject to the terms of the Mozilla"},
{"lineNum":"    8","line":"// Public License v. 2.0. If a copy of the MPL was not distributed"},
{"lineNum":"    9","line":"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/."},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"#ifndef EIGEN_MATHFUNCTIONS_H"},
{"lineNum":"   12","line":"#define EIGEN_MATHFUNCTIONS_H"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"// TODO this should better be moved to NumTraits"},
{"lineNum":"   15","line":"// Source: WolframAlpha"},
{"lineNum":"   16","line":"#define EIGEN_PI    3.141592653589793238462643383279502884197169399375105820974944592307816406L"},
{"lineNum":"   17","line":"#define EIGEN_LOG2E 1.442695040888963407359924681001892137426645954152985934135449406931109219L"},
{"lineNum":"   18","line":"#define EIGEN_LN2   0.693147180559945309417232121458176568075500134360255254120680009493393621L"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"#include \"./InternalHeaderCheck.h\""},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"namespace Eigen {"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"// On WINCE, std::abs is defined for int only, so let\'s defined our own overloads:"},
{"lineNum":"   25","line":"// This issue has been confirmed with MSVC 2008 only, but the issue might exist for more recent versions too."},
{"lineNum":"   26","line":"#if EIGEN_OS_WINCE && EIGEN_COMP_MSVC && EIGEN_COMP_MSVC<=1500"},
{"lineNum":"   27","line":"long        abs(long        x) { return (labs(x));  }"},
{"lineNum":"   28","line":"double      abs(double      x) { return (fabs(x));  }"},
{"lineNum":"   29","line":"float       abs(float       x) { return (fabsf(x)); }"},
{"lineNum":"   30","line":"long double abs(long double x) { return (fabsl(x)); }"},
{"lineNum":"   31","line":"#endif"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"namespace internal {"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"/** \\internal \\class global_math_functions_filtering_base"},
{"lineNum":"   36","line":"  *"},
{"lineNum":"   37","line":"  * What it does:"},
{"lineNum":"   38","line":"  * Defines a typedef \'type\' as follows:"},
{"lineNum":"   39","line":"  * - if type T has a member typedef Eigen_BaseClassForSpecializationOfGlobalMathFuncImpl, then"},
{"lineNum":"   40","line":"  *   global_math_functions_filtering_base<T>::type is a typedef for it."},
{"lineNum":"   41","line":"  * - otherwise, global_math_functions_filtering_base<T>::type is a typedef for T."},
{"lineNum":"   42","line":"  *"},
{"lineNum":"   43","line":"  * How it\'s used:"},
{"lineNum":"   44","line":"  * To allow to defined the global math functions (like sin...) in certain cases, like the Array expressions."},
{"lineNum":"   45","line":"  * When you do sin(array1+array2), the object array1+array2 has a complicated expression type, all what you want to know"},
{"lineNum":"   46","line":"  * is that it inherits ArrayBase. So we implement a partial specialization of sin_impl for ArrayBase<Derived>."},
{"lineNum":"   47","line":"  * So we must make sure to use sin_impl<ArrayBase<Derived> > and not sin_impl<Derived>, otherwise our partial specialization"},
{"lineNum":"   48","line":"  * won\'t be used. How does sin know that? That\'s exactly what global_math_functions_filtering_base tells it."},
{"lineNum":"   49","line":"  *"},
{"lineNum":"   50","line":"  * How it\'s implemented:"},
{"lineNum":"   51","line":"  * SFINAE in the style of enable_if. Highly susceptible of breaking compilers. With GCC, it sure does work, but if you replace"},
{"lineNum":"   52","line":"  * the typename dummy by an integer template parameter, it doesn\'t work anymore!"},
{"lineNum":"   53","line":"  */"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"template<typename T, typename dummy = void>"},
{"lineNum":"   56","line":"struct global_math_functions_filtering_base"},
{"lineNum":"   57","line":"{"},
{"lineNum":"   58","line":"  typedef T type;"},
{"lineNum":"   59","line":"};"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"template<typename T> struct always_void { typedef void type; };"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"template<typename T>"},
{"lineNum":"   64","line":"struct global_math_functions_filtering_base"},
{"lineNum":"   65","line":"  <T,"},
{"lineNum":"   66","line":"   typename always_void<typename T::Eigen_BaseClassForSpecializationOfGlobalMathFuncImpl>::type"},
{"lineNum":"   67","line":"  >"},
{"lineNum":"   68","line":"{"},
{"lineNum":"   69","line":"  typedef typename T::Eigen_BaseClassForSpecializationOfGlobalMathFuncImpl type;"},
{"lineNum":"   70","line":"};"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"#define EIGEN_MATHFUNC_IMPL(func, scalar) Eigen::internal::func##_impl<typename Eigen::internal::global_math_functions_filtering_base<scalar>::type>"},
{"lineNum":"   73","line":"#define EIGEN_MATHFUNC_RETVAL(func, scalar) typename Eigen::internal::func##_retval<typename Eigen::internal::global_math_functions_filtering_base<scalar>::type>::type"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"/****************************************************************************"},
{"lineNum":"   76","line":"* Implementation of real                                                 *"},
{"lineNum":"   77","line":"****************************************************************************/"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"template<typename Scalar, bool IsComplex = NumTraits<Scalar>::IsComplex>"},
{"lineNum":"   80","line":"struct real_default_impl"},
{"lineNum":"   81","line":"{"},
{"lineNum":"   82","line":"  typedef typename NumTraits<Scalar>::Real RealScalar;"},
{"lineNum":"   83","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"   84","line":"  static inline RealScalar run(const Scalar& x)"},
{"lineNum":"   85","line":"  {"},
{"lineNum":"   86","line":"    return x;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   87","line":"  }"},
{"lineNum":"   88","line":"};"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"template<typename Scalar>"},
{"lineNum":"   91","line":"struct real_default_impl<Scalar,true>"},
{"lineNum":"   92","line":"{"},
{"lineNum":"   93","line":"  typedef typename NumTraits<Scalar>::Real RealScalar;"},
{"lineNum":"   94","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"   95","line":"  static inline RealScalar run(const Scalar& x)"},
{"lineNum":"   96","line":"  {"},
{"lineNum":"   97","line":"    using std::real;"},
{"lineNum":"   98","line":"    return real(x);"},
{"lineNum":"   99","line":"  }"},
{"lineNum":"  100","line":"};"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"template<typename Scalar> struct real_impl : real_default_impl<Scalar> {};"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"#if defined(EIGEN_GPU_COMPILE_PHASE)"},
{"lineNum":"  105","line":"template<typename T>"},
{"lineNum":"  106","line":"struct real_impl<std::complex<T> >"},
{"lineNum":"  107","line":"{"},
{"lineNum":"  108","line":"  typedef T RealScalar;"},
{"lineNum":"  109","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  110","line":"  static inline T run(const std::complex<T>& x)"},
{"lineNum":"  111","line":"  {"},
{"lineNum":"  112","line":"    return x.real();"},
{"lineNum":"  113","line":"  }"},
{"lineNum":"  114","line":"};"},
{"lineNum":"  115","line":"#endif"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"template<typename Scalar>"},
{"lineNum":"  118","line":"struct real_retval"},
{"lineNum":"  119","line":"{"},
{"lineNum":"  120","line":"  typedef typename NumTraits<Scalar>::Real type;"},
{"lineNum":"  121","line":"};"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"/****************************************************************************"},
{"lineNum":"  124","line":"* Implementation of imag                                                 *"},
{"lineNum":"  125","line":"****************************************************************************/"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"template<typename Scalar, bool IsComplex = NumTraits<Scalar>::IsComplex>"},
{"lineNum":"  128","line":"struct imag_default_impl"},
{"lineNum":"  129","line":"{"},
{"lineNum":"  130","line":"  typedef typename NumTraits<Scalar>::Real RealScalar;"},
{"lineNum":"  131","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  132","line":"  static inline RealScalar run(const Scalar&)"},
{"lineNum":"  133","line":"  {"},
{"lineNum":"  134","line":"    return RealScalar(0);"},
{"lineNum":"  135","line":"  }"},
{"lineNum":"  136","line":"};"},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"template<typename Scalar>"},
{"lineNum":"  139","line":"struct imag_default_impl<Scalar,true>"},
{"lineNum":"  140","line":"{"},
{"lineNum":"  141","line":"  typedef typename NumTraits<Scalar>::Real RealScalar;"},
{"lineNum":"  142","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  143","line":"  static inline RealScalar run(const Scalar& x)"},
{"lineNum":"  144","line":"  {"},
{"lineNum":"  145","line":"    using std::imag;"},
{"lineNum":"  146","line":"    return imag(x);"},
{"lineNum":"  147","line":"  }"},
{"lineNum":"  148","line":"};"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"template<typename Scalar> struct imag_impl : imag_default_impl<Scalar> {};"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"#if defined(EIGEN_GPU_COMPILE_PHASE)"},
{"lineNum":"  153","line":"template<typename T>"},
{"lineNum":"  154","line":"struct imag_impl<std::complex<T> >"},
{"lineNum":"  155","line":"{"},
{"lineNum":"  156","line":"  typedef T RealScalar;"},
{"lineNum":"  157","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  158","line":"  static inline T run(const std::complex<T>& x)"},
{"lineNum":"  159","line":"  {"},
{"lineNum":"  160","line":"    return x.imag();"},
{"lineNum":"  161","line":"  }"},
{"lineNum":"  162","line":"};"},
{"lineNum":"  163","line":"#endif"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"template<typename Scalar>"},
{"lineNum":"  166","line":"struct imag_retval"},
{"lineNum":"  167","line":"{"},
{"lineNum":"  168","line":"  typedef typename NumTraits<Scalar>::Real type;"},
{"lineNum":"  169","line":"};"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"/****************************************************************************"},
{"lineNum":"  172","line":"* Implementation of real_ref                                             *"},
{"lineNum":"  173","line":"****************************************************************************/"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"template<typename Scalar>"},
{"lineNum":"  176","line":"struct real_ref_impl"},
{"lineNum":"  177","line":"{"},
{"lineNum":"  178","line":"  typedef typename NumTraits<Scalar>::Real RealScalar;"},
{"lineNum":"  179","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  180","line":"  static inline RealScalar& run(Scalar& x)"},
{"lineNum":"  181","line":"  {"},
{"lineNum":"  182","line":"    return reinterpret_cast<RealScalar*>(&x)[0];"},
{"lineNum":"  183","line":"  }"},
{"lineNum":"  184","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  185","line":"  static inline const RealScalar& run(const Scalar& x)"},
{"lineNum":"  186","line":"  {"},
{"lineNum":"  187","line":"    return reinterpret_cast<const RealScalar*>(&x)[0];"},
{"lineNum":"  188","line":"  }"},
{"lineNum":"  189","line":"};"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"template<typename Scalar>"},
{"lineNum":"  192","line":"struct real_ref_retval"},
{"lineNum":"  193","line":"{"},
{"lineNum":"  194","line":"  typedef typename NumTraits<Scalar>::Real & type;"},
{"lineNum":"  195","line":"};"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"/****************************************************************************"},
{"lineNum":"  198","line":"* Implementation of imag_ref                                             *"},
{"lineNum":"  199","line":"****************************************************************************/"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"template<typename Scalar, bool IsComplex>"},
{"lineNum":"  202","line":"struct imag_ref_default_impl"},
{"lineNum":"  203","line":"{"},
{"lineNum":"  204","line":"  typedef typename NumTraits<Scalar>::Real RealScalar;"},
{"lineNum":"  205","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  206","line":"  static inline RealScalar& run(Scalar& x)"},
{"lineNum":"  207","line":"  {"},
{"lineNum":"  208","line":"    return reinterpret_cast<RealScalar*>(&x)[1];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  209","line":"  }"},
{"lineNum":"  210","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  211","line":"  static inline const RealScalar& run(const Scalar& x)"},
{"lineNum":"  212","line":"  {"},
{"lineNum":"  213","line":"    return reinterpret_cast<RealScalar*>(&x)[1];"},
{"lineNum":"  214","line":"  }"},
{"lineNum":"  215","line":"};"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"template<typename Scalar>"},
{"lineNum":"  218","line":"struct imag_ref_default_impl<Scalar, false>"},
{"lineNum":"  219","line":"{"},
{"lineNum":"  220","line":"  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR"},
{"lineNum":"  221","line":"  static inline Scalar run(Scalar&)"},
{"lineNum":"  222","line":"  {"},
{"lineNum":"  223","line":"    return Scalar(0);"},
{"lineNum":"  224","line":"  }"},
{"lineNum":"  225","line":"  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR"},
{"lineNum":"  226","line":"  static inline const Scalar run(const Scalar&)"},
{"lineNum":"  227","line":"  {"},
{"lineNum":"  228","line":"    return Scalar(0);"},
{"lineNum":"  229","line":"  }"},
{"lineNum":"  230","line":"};"},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"template<typename Scalar>"},
{"lineNum":"  233","line":"struct imag_ref_impl : imag_ref_default_impl<Scalar, NumTraits<Scalar>::IsComplex> {};"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"template<typename Scalar>"},
{"lineNum":"  236","line":"struct imag_ref_retval"},
{"lineNum":"  237","line":"{"},
{"lineNum":"  238","line":"  typedef typename NumTraits<Scalar>::Real & type;"},
{"lineNum":"  239","line":"};"},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"/****************************************************************************"},
{"lineNum":"  242","line":"* Implementation of conj                                                 *"},
{"lineNum":"  243","line":"****************************************************************************/"},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"template<typename Scalar, bool IsComplex = NumTraits<Scalar>::IsComplex>"},
{"lineNum":"  246","line":"struct conj_default_impl"},
{"lineNum":"  247","line":"{"},
{"lineNum":"  248","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  249","line":"  static inline Scalar run(const Scalar& x)"},
{"lineNum":"  250","line":"  {"},
{"lineNum":"  251","line":"    return x;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  252","line":"  }"},
{"lineNum":"  253","line":"};"},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"template<typename Scalar>"},
{"lineNum":"  256","line":"struct conj_default_impl<Scalar,true>"},
{"lineNum":"  257","line":"{"},
{"lineNum":"  258","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  259","line":"  static inline Scalar run(const Scalar& x)"},
{"lineNum":"  260","line":"  {"},
{"lineNum":"  261","line":"    using std::conj;"},
{"lineNum":"  262","line":"    return conj(x);"},
{"lineNum":"  263","line":"  }"},
{"lineNum":"  264","line":"};"},
{"lineNum":"  265","line":""},
{"lineNum":"  266","line":"template<typename Scalar, bool IsComplex = NumTraits<Scalar>::IsComplex>"},
{"lineNum":"  267","line":"struct conj_impl : conj_default_impl<Scalar, IsComplex> {};"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"template<typename Scalar>"},
{"lineNum":"  270","line":"struct conj_retval"},
{"lineNum":"  271","line":"{"},
{"lineNum":"  272","line":"  typedef Scalar type;"},
{"lineNum":"  273","line":"};"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"/****************************************************************************"},
{"lineNum":"  276","line":"* Implementation of abs2                                                 *"},
{"lineNum":"  277","line":"****************************************************************************/"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"template<typename Scalar,bool IsComplex>"},
{"lineNum":"  280","line":"struct abs2_impl_default"},
{"lineNum":"  281","line":"{"},
{"lineNum":"  282","line":"  typedef typename NumTraits<Scalar>::Real RealScalar;"},
{"lineNum":"  283","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  284","line":"  static inline RealScalar run(const Scalar& x)"},
{"lineNum":"  285","line":"  {"},
{"lineNum":"  286","line":"    return x*x;","class":"lineNoCov","hits":"0","possible_hits":"25",},
{"lineNum":"  287","line":"  }"},
{"lineNum":"  288","line":"};"},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"template<typename Scalar>"},
{"lineNum":"  291","line":"struct abs2_impl_default<Scalar, true> // IsComplex"},
{"lineNum":"  292","line":"{"},
{"lineNum":"  293","line":"  typedef typename NumTraits<Scalar>::Real RealScalar;"},
{"lineNum":"  294","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  295","line":"  static inline RealScalar run(const Scalar& x)"},
{"lineNum":"  296","line":"  {"},
{"lineNum":"  297","line":"    return x.real()*x.real() + x.imag()*x.imag();","class":"lineNoCov","hits":"0","possible_hits":"24",},
{"lineNum":"  298","line":"  }"},
{"lineNum":"  299","line":"};"},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"template<typename Scalar>"},
{"lineNum":"  302","line":"struct abs2_impl"},
{"lineNum":"  303","line":"{"},
{"lineNum":"  304","line":"  typedef typename NumTraits<Scalar>::Real RealScalar;"},
{"lineNum":"  305","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  306","line":"  static inline RealScalar run(const Scalar& x)"},
{"lineNum":"  307","line":"  {"},
{"lineNum":"  308","line":"    return abs2_impl_default<Scalar,NumTraits<Scalar>::IsComplex>::run(x);"},
{"lineNum":"  309","line":"  }"},
{"lineNum":"  310","line":"};"},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":"template<typename Scalar>"},
{"lineNum":"  313","line":"struct abs2_retval"},
{"lineNum":"  314","line":"{"},
{"lineNum":"  315","line":"  typedef typename NumTraits<Scalar>::Real type;"},
{"lineNum":"  316","line":"};"},
{"lineNum":"  317","line":""},
{"lineNum":"  318","line":"/****************************************************************************"},
{"lineNum":"  319","line":"* Implementation of sqrt/rsqrt                                             *"},
{"lineNum":"  320","line":"****************************************************************************/"},
{"lineNum":"  321","line":""},
{"lineNum":"  322","line":"template<typename Scalar>"},
{"lineNum":"  323","line":"struct sqrt_impl"},
{"lineNum":"  324","line":"{"},
{"lineNum":"  325","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  326","line":"  static EIGEN_ALWAYS_INLINE Scalar run(const Scalar& x)"},
{"lineNum":"  327","line":"  {"},
{"lineNum":"  328","line":"    EIGEN_USING_STD(sqrt);"},
{"lineNum":"  329","line":"    return sqrt(x);"},
{"lineNum":"  330","line":"  }"},
{"lineNum":"  331","line":"};"},
{"lineNum":"  332","line":""},
{"lineNum":"  333","line":"// Complex sqrt defined in MathFunctionsImpl.h."},
{"lineNum":"  334","line":"template<typename T> EIGEN_DEVICE_FUNC std::complex<T> complex_sqrt(const std::complex<T>& a_x);"},
{"lineNum":"  335","line":""},
{"lineNum":"  336","line":"// Custom implementation is faster than `std::sqrt`, works on"},
{"lineNum":"  337","line":"// GPU, and correctly handles special cases (unlike MSVC)."},
{"lineNum":"  338","line":"template<typename T>"},
{"lineNum":"  339","line":"struct sqrt_impl<std::complex<T> >"},
{"lineNum":"  340","line":"{"},
{"lineNum":"  341","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  342","line":"  static EIGEN_ALWAYS_INLINE std::complex<T> run(const std::complex<T>& x)"},
{"lineNum":"  343","line":"  {"},
{"lineNum":"  344","line":"    return complex_sqrt<T>(x);"},
{"lineNum":"  345","line":"  }"},
{"lineNum":"  346","line":"};"},
{"lineNum":"  347","line":""},
{"lineNum":"  348","line":"template<typename Scalar>"},
{"lineNum":"  349","line":"struct sqrt_retval"},
{"lineNum":"  350","line":"{"},
{"lineNum":"  351","line":"  typedef Scalar type;"},
{"lineNum":"  352","line":"};"},
{"lineNum":"  353","line":""},
{"lineNum":"  354","line":"// Default implementation relies on numext::sqrt, at bottom of file."},
{"lineNum":"  355","line":"template<typename T>"},
{"lineNum":"  356","line":"struct rsqrt_impl;"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"// Complex rsqrt defined in MathFunctionsImpl.h."},
{"lineNum":"  359","line":"template<typename T> EIGEN_DEVICE_FUNC std::complex<T> complex_rsqrt(const std::complex<T>& a_x);"},
{"lineNum":"  360","line":""},
{"lineNum":"  361","line":"template<typename T>"},
{"lineNum":"  362","line":"struct rsqrt_impl<std::complex<T> >"},
{"lineNum":"  363","line":"{"},
{"lineNum":"  364","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  365","line":"  static EIGEN_ALWAYS_INLINE std::complex<T> run(const std::complex<T>& x)"},
{"lineNum":"  366","line":"  {"},
{"lineNum":"  367","line":"    return complex_rsqrt<T>(x);"},
{"lineNum":"  368","line":"  }"},
{"lineNum":"  369","line":"};"},
{"lineNum":"  370","line":""},
{"lineNum":"  371","line":"template<typename Scalar>"},
{"lineNum":"  372","line":"struct rsqrt_retval"},
{"lineNum":"  373","line":"{"},
{"lineNum":"  374","line":"  typedef Scalar type;"},
{"lineNum":"  375","line":"};"},
{"lineNum":"  376","line":""},
{"lineNum":"  377","line":"/****************************************************************************"},
{"lineNum":"  378","line":"* Implementation of norm1                                                *"},
{"lineNum":"  379","line":"****************************************************************************/"},
{"lineNum":"  380","line":""},
{"lineNum":"  381","line":"template<typename Scalar, bool IsComplex>"},
{"lineNum":"  382","line":"struct norm1_default_impl;"},
{"lineNum":"  383","line":""},
{"lineNum":"  384","line":"template<typename Scalar>"},
{"lineNum":"  385","line":"struct norm1_default_impl<Scalar,true>"},
{"lineNum":"  386","line":"{"},
{"lineNum":"  387","line":"  typedef typename NumTraits<Scalar>::Real RealScalar;"},
{"lineNum":"  388","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  389","line":"  static inline RealScalar run(const Scalar& x)"},
{"lineNum":"  390","line":"  {"},
{"lineNum":"  391","line":"    EIGEN_USING_STD(abs);"},
{"lineNum":"  392","line":"    return abs(x.real()) + abs(x.imag());"},
{"lineNum":"  393","line":"  }"},
{"lineNum":"  394","line":"};"},
{"lineNum":"  395","line":""},
{"lineNum":"  396","line":"template<typename Scalar>"},
{"lineNum":"  397","line":"struct norm1_default_impl<Scalar, false>"},
{"lineNum":"  398","line":"{"},
{"lineNum":"  399","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  400","line":"  static inline Scalar run(const Scalar& x)"},
{"lineNum":"  401","line":"  {"},
{"lineNum":"  402","line":"    EIGEN_USING_STD(abs);"},
{"lineNum":"  403","line":"    return abs(x);"},
{"lineNum":"  404","line":"  }"},
{"lineNum":"  405","line":"};"},
{"lineNum":"  406","line":""},
{"lineNum":"  407","line":"template<typename Scalar>"},
{"lineNum":"  408","line":"struct norm1_impl : norm1_default_impl<Scalar, NumTraits<Scalar>::IsComplex> {};"},
{"lineNum":"  409","line":""},
{"lineNum":"  410","line":"template<typename Scalar>"},
{"lineNum":"  411","line":"struct norm1_retval"},
{"lineNum":"  412","line":"{"},
{"lineNum":"  413","line":"  typedef typename NumTraits<Scalar>::Real type;"},
{"lineNum":"  414","line":"};"},
{"lineNum":"  415","line":""},
{"lineNum":"  416","line":"/****************************************************************************"},
{"lineNum":"  417","line":"* Implementation of hypot                                                *"},
{"lineNum":"  418","line":"****************************************************************************/"},
{"lineNum":"  419","line":""},
{"lineNum":"  420","line":"template<typename Scalar> struct hypot_impl;"},
{"lineNum":"  421","line":""},
{"lineNum":"  422","line":"template<typename Scalar>"},
{"lineNum":"  423","line":"struct hypot_retval"},
{"lineNum":"  424","line":"{"},
{"lineNum":"  425","line":"  typedef typename NumTraits<Scalar>::Real type;"},
{"lineNum":"  426","line":"};"},
{"lineNum":"  427","line":""},
{"lineNum":"  428","line":"/****************************************************************************"},
{"lineNum":"  429","line":"* Implementation of cast                                                 *"},
{"lineNum":"  430","line":"****************************************************************************/"},
{"lineNum":"  431","line":""},
{"lineNum":"  432","line":"template<typename OldType, typename NewType, typename EnableIf = void>"},
{"lineNum":"  433","line":"struct cast_impl"},
{"lineNum":"  434","line":"{"},
{"lineNum":"  435","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  436","line":"  static inline NewType run(const OldType& x)"},
{"lineNum":"  437","line":"  {"},
{"lineNum":"  438","line":"    return static_cast<NewType>(x);"},
{"lineNum":"  439","line":"  }"},
{"lineNum":"  440","line":"};"},
{"lineNum":"  441","line":""},
{"lineNum":"  442","line":"// Casting from S -> Complex<T> leads to an implicit conversion from S to T,"},
{"lineNum":"  443","line":"// generating warnings on clang.  Here we explicitly cast the real component."},
{"lineNum":"  444","line":"template<typename OldType, typename NewType>"},
{"lineNum":"  445","line":"struct cast_impl<OldType, NewType,"},
{"lineNum":"  446","line":"  typename internal::enable_if<"},
{"lineNum":"  447","line":"    !NumTraits<OldType>::IsComplex && NumTraits<NewType>::IsComplex"},
{"lineNum":"  448","line":"  >::type>"},
{"lineNum":"  449","line":"{"},
{"lineNum":"  450","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  451","line":"  static inline NewType run(const OldType& x)"},
{"lineNum":"  452","line":"  {"},
{"lineNum":"  453","line":"    typedef typename NumTraits<NewType>::Real NewReal;"},
{"lineNum":"  454","line":"    return static_cast<NewType>(static_cast<NewReal>(x));"},
{"lineNum":"  455","line":"  }"},
{"lineNum":"  456","line":"};"},
{"lineNum":"  457","line":""},
{"lineNum":"  458","line":"// here, for once, we\'re plainly returning NewType: we don\'t want cast to do weird things."},
{"lineNum":"  459","line":""},
{"lineNum":"  460","line":"template<typename OldType, typename NewType>"},
{"lineNum":"  461","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":"  462","line":"inline NewType cast(const OldType& x)"},
{"lineNum":"  463","line":"{"},
{"lineNum":"  464","line":"  return cast_impl<OldType, NewType>::run(x);"},
{"lineNum":"  465","line":"}"},
{"lineNum":"  466","line":""},
{"lineNum":"  467","line":"/****************************************************************************"},
{"lineNum":"  468","line":"* Implementation of round                                                   *"},
{"lineNum":"  469","line":"****************************************************************************/"},
{"lineNum":"  470","line":""},
{"lineNum":"  471","line":"template<typename Scalar>"},
{"lineNum":"  472","line":"struct round_impl"},
{"lineNum":"  473","line":"{"},
{"lineNum":"  474","line":"  EIGEN_STATIC_ASSERT((!NumTraits<Scalar>::IsComplex), NUMERIC_TYPE_MUST_BE_REAL)"},
{"lineNum":"  475","line":""},
{"lineNum":"  476","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  477","line":"  static inline Scalar run(const Scalar& x)"},
{"lineNum":"  478","line":"  {"},
{"lineNum":"  479","line":"#if EIGEN_HAS_CXX11_MATH"},
{"lineNum":"  480","line":"    EIGEN_USING_STD(round);"},
{"lineNum":"  481","line":"#endif"},
{"lineNum":"  482","line":"    return Scalar(round(x));"},
{"lineNum":"  483","line":"  }"},
{"lineNum":"  484","line":"};"},
{"lineNum":"  485","line":""},
{"lineNum":"  486","line":"#if !EIGEN_HAS_CXX11_MATH"},
{"lineNum":"  487","line":"#if EIGEN_HAS_C99_MATH"},
{"lineNum":"  488","line":"// Use ::roundf for float."},
{"lineNum":"  489","line":"template<>"},
{"lineNum":"  490","line":"struct round_impl<float> {"},
{"lineNum":"  491","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  492","line":"  static inline float run(const float& x)"},
{"lineNum":"  493","line":"  {"},
{"lineNum":"  494","line":"    return ::roundf(x);"},
{"lineNum":"  495","line":"  }"},
{"lineNum":"  496","line":"};"},
{"lineNum":"  497","line":"#else"},
{"lineNum":"  498","line":"template<typename Scalar>"},
{"lineNum":"  499","line":"struct round_using_floor_ceil_impl"},
{"lineNum":"  500","line":"{"},
{"lineNum":"  501","line":"  EIGEN_STATIC_ASSERT((!NumTraits<Scalar>::IsComplex), NUMERIC_TYPE_MUST_BE_REAL)"},
{"lineNum":"  502","line":""},
{"lineNum":"  503","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  504","line":"  static inline Scalar run(const Scalar& x)"},
{"lineNum":"  505","line":"  {"},
{"lineNum":"  506","line":"    // Without C99 round/roundf, resort to floor/ceil."},
{"lineNum":"  507","line":"    EIGEN_USING_STD(floor);"},
{"lineNum":"  508","line":"    EIGEN_USING_STD(ceil);"},
{"lineNum":"  509","line":"    // If not enough precision to resolve a decimal at all, return the input."},
{"lineNum":"  510","line":"    // Otherwise, adding 0.5 can trigger an increment by 1."},
{"lineNum":"  511","line":"    const Scalar limit = Scalar(1ull << (NumTraits<Scalar>::digits() - 1));"},
{"lineNum":"  512","line":"    if (x >= limit || x <= -limit) {"},
{"lineNum":"  513","line":"      return x;"},
{"lineNum":"  514","line":"    }"},
{"lineNum":"  515","line":"    return (x > Scalar(0)) ? Scalar(floor(x + Scalar(0.5))) : Scalar(ceil(x - Scalar(0.5)));"},
{"lineNum":"  516","line":"  }"},
{"lineNum":"  517","line":"};"},
{"lineNum":"  518","line":""},
{"lineNum":"  519","line":"template<>"},
{"lineNum":"  520","line":"struct round_impl<float> : round_using_floor_ceil_impl<float> {};"},
{"lineNum":"  521","line":""},
{"lineNum":"  522","line":"template<>"},
{"lineNum":"  523","line":"struct round_impl<double> : round_using_floor_ceil_impl<double> {};"},
{"lineNum":"  524","line":"#endif // EIGEN_HAS_C99_MATH"},
{"lineNum":"  525","line":"#endif // !EIGEN_HAS_CXX11_MATH"},
{"lineNum":"  526","line":""},
{"lineNum":"  527","line":"template<typename Scalar>"},
{"lineNum":"  528","line":"struct round_retval"},
{"lineNum":"  529","line":"{"},
{"lineNum":"  530","line":"  typedef Scalar type;"},
{"lineNum":"  531","line":"};"},
{"lineNum":"  532","line":""},
{"lineNum":"  533","line":"/****************************************************************************"},
{"lineNum":"  534","line":"* Implementation of rint                                                    *"},
{"lineNum":"  535","line":"****************************************************************************/"},
{"lineNum":"  536","line":""},
{"lineNum":"  537","line":"template<typename Scalar>"},
{"lineNum":"  538","line":"struct rint_impl {"},
{"lineNum":"  539","line":"  EIGEN_STATIC_ASSERT((!NumTraits<Scalar>::IsComplex), NUMERIC_TYPE_MUST_BE_REAL)"},
{"lineNum":"  540","line":""},
{"lineNum":"  541","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  542","line":"  static inline Scalar run(const Scalar& x)"},
{"lineNum":"  543","line":"  {"},
{"lineNum":"  544","line":"#if EIGEN_HAS_CXX11_MATH"},
{"lineNum":"  545","line":"      EIGEN_USING_STD(rint);"},
{"lineNum":"  546","line":"#endif"},
{"lineNum":"  547","line":"    return rint(x);"},
{"lineNum":"  548","line":"  }"},
{"lineNum":"  549","line":"};"},
{"lineNum":"  550","line":""},
{"lineNum":"  551","line":"#if !EIGEN_HAS_CXX11_MATH"},
{"lineNum":"  552","line":"template<>"},
{"lineNum":"  553","line":"struct rint_impl<double> {"},
{"lineNum":"  554","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  555","line":"  static inline double run(const double& x)"},
{"lineNum":"  556","line":"  {"},
{"lineNum":"  557","line":"    return ::rint(x);"},
{"lineNum":"  558","line":"  }"},
{"lineNum":"  559","line":"};"},
{"lineNum":"  560","line":"template<>"},
{"lineNum":"  561","line":"struct rint_impl<float> {"},
{"lineNum":"  562","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  563","line":"  static inline float run(const float& x)"},
{"lineNum":"  564","line":"  {"},
{"lineNum":"  565","line":"    return ::rintf(x);"},
{"lineNum":"  566","line":"  }"},
{"lineNum":"  567","line":"};"},
{"lineNum":"  568","line":"#endif"},
{"lineNum":"  569","line":""},
{"lineNum":"  570","line":"template<typename Scalar>"},
{"lineNum":"  571","line":"struct rint_retval"},
{"lineNum":"  572","line":"{"},
{"lineNum":"  573","line":"  typedef Scalar type;"},
{"lineNum":"  574","line":"};"},
{"lineNum":"  575","line":""},
{"lineNum":"  576","line":"/****************************************************************************"},
{"lineNum":"  577","line":"* Implementation of arg                                                     *"},
{"lineNum":"  578","line":"****************************************************************************/"},
{"lineNum":"  579","line":""},
{"lineNum":"  580","line":"// Visual Studio 2017 has a bug where arg(float) returns 0 for negative inputs."},
{"lineNum":"  581","line":"// This seems to be fixed in VS 2019."},
{"lineNum":"  582","line":"#if EIGEN_HAS_CXX11_MATH && (!EIGEN_COMP_MSVC || EIGEN_COMP_MSVC >= 1920)"},
{"lineNum":"  583","line":"// std::arg is only defined for types of std::complex, or integer types or float/double/long double"},
{"lineNum":"  584","line":"template<typename Scalar,"},
{"lineNum":"  585","line":"          bool HasStdImpl = NumTraits<Scalar>::IsComplex || is_integral<Scalar>::value"},
{"lineNum":"  586","line":"                            || is_same<Scalar, float>::value || is_same<Scalar, double>::value"},
{"lineNum":"  587","line":"                            || is_same<Scalar, long double>::value >"},
{"lineNum":"  588","line":"struct arg_default_impl;"},
{"lineNum":"  589","line":""},
{"lineNum":"  590","line":"template<typename Scalar>"},
{"lineNum":"  591","line":"struct arg_default_impl<Scalar, true> {"},
{"lineNum":"  592","line":"  typedef typename NumTraits<Scalar>::Real RealScalar;"},
{"lineNum":"  593","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  594","line":"  static inline RealScalar run(const Scalar& x)"},
{"lineNum":"  595","line":"  {"},
{"lineNum":"  596","line":"    #if defined(EIGEN_HIP_DEVICE_COMPILE)"},
{"lineNum":"  597","line":"    // HIP does not seem to have a native device side implementation for the math routine \"arg\""},
{"lineNum":"  598","line":"    using std::arg;"},
{"lineNum":"  599","line":"    #else"},
{"lineNum":"  600","line":"    EIGEN_USING_STD(arg);"},
{"lineNum":"  601","line":"    #endif"},
{"lineNum":"  602","line":"    return static_cast<RealScalar>(arg(x));"},
{"lineNum":"  603","line":"  }"},
{"lineNum":"  604","line":"};"},
{"lineNum":"  605","line":""},
{"lineNum":"  606","line":"// Must be non-complex floating-point type (e.g. half/bfloat16)."},
{"lineNum":"  607","line":"template<typename Scalar>"},
{"lineNum":"  608","line":"struct arg_default_impl<Scalar, false> {"},
{"lineNum":"  609","line":"  typedef typename NumTraits<Scalar>::Real RealScalar;"},
{"lineNum":"  610","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  611","line":"  static inline RealScalar run(const Scalar& x)"},
{"lineNum":"  612","line":"  {"},
{"lineNum":"  613","line":"    return (x < Scalar(0)) ? RealScalar(EIGEN_PI) : RealScalar(0);"},
{"lineNum":"  614","line":"  }"},
{"lineNum":"  615","line":"};"},
{"lineNum":"  616","line":"#else"},
{"lineNum":"  617","line":"template<typename Scalar, bool IsComplex = NumTraits<Scalar>::IsComplex>"},
{"lineNum":"  618","line":"struct arg_default_impl"},
{"lineNum":"  619","line":"{"},
{"lineNum":"  620","line":"  typedef typename NumTraits<Scalar>::Real RealScalar;"},
{"lineNum":"  621","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  622","line":"  static inline RealScalar run(const Scalar& x)"},
{"lineNum":"  623","line":"  {"},
{"lineNum":"  624","line":"    return (x < RealScalar(0)) ? RealScalar(EIGEN_PI) : RealScalar(0);"},
{"lineNum":"  625","line":"  }"},
{"lineNum":"  626","line":"};"},
{"lineNum":"  627","line":""},
{"lineNum":"  628","line":"template<typename Scalar>"},
{"lineNum":"  629","line":"struct arg_default_impl<Scalar,true>"},
{"lineNum":"  630","line":"{"},
{"lineNum":"  631","line":"  typedef typename NumTraits<Scalar>::Real RealScalar;"},
{"lineNum":"  632","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":"  633","line":"  static inline RealScalar run(const Scalar& x)"},
{"lineNum":"  634","line":"  {"},
{"lineNum":"  635","line":"    EIGEN_USING_STD(arg);"},
{"lineNum":"  636","line":"    return arg(x);"},
{"lineNum":"  637","line":"  }"},
{"lineNum":"  638","line":"};"},
{"lineNum":"  639","line":"#endif"},
{"lineNum":"  640","line":"template<typename Scalar> struct arg_impl : arg_default_impl<Scalar> {};"},
{"lineNum":"  641","line":""},
{"lineNum":"  642","line":"template<typename Scalar>"},
{"lineNum":"  643","line":"struct arg_retval"},
{"lineNum":"  644","line":"{"},
{"lineNum":"  645","line":"  typedef typename NumTraits<Scalar>::Real type;"},
{"lineNum":"  646","line":"};"},
{"lineNum":"  647","line":""},
{"lineNum":"  648","line":"/****************************************************************************"},
{"lineNum":"  649","line":"* Implementation of expm1                                                   *"},
{"lineNum":"  650","line":"****************************************************************************/"},
{"lineNum":"  651","line":""},
{"lineNum":"  652","line":"// This implementation is based on GSL Math\'s expm1."},
{"lineNum":"  653","line":"namespace std_fallback {"},
{"lineNum":"  654","line":"  // fallback expm1 implementation in case there is no expm1(Scalar) function in namespace of Scalar,"},
{"lineNum":"  655","line":"  // or that there is no suitable std::expm1 function available. Implementation"},
{"lineNum":"  656","line":"  // attributed to Kahan. See: http://www.plunk.org/~hatch/rightway.php."},
{"lineNum":"  657","line":"  template<typename Scalar>"},
{"lineNum":"  658","line":"  EIGEN_DEVICE_FUNC inline Scalar expm1(const Scalar& x) {"},
{"lineNum":"  659","line":"    EIGEN_STATIC_ASSERT_NON_INTEGER(Scalar)"},
{"lineNum":"  660","line":"    typedef typename NumTraits<Scalar>::Real RealScalar;"},
{"lineNum":"  661","line":""},
{"lineNum":"  662","line":"    EIGEN_USING_STD(exp);"},
{"lineNum":"  663","line":"    Scalar u = exp(x);"},
{"lineNum":"  664","line":"    if (numext::equal_strict(u, Scalar(1))) {"},
{"lineNum":"  665","line":"      return x;"},
{"lineNum":"  666","line":"    }"},
{"lineNum":"  667","line":"    Scalar um1 = u - RealScalar(1);"},
{"lineNum":"  668","line":"    if (numext::equal_strict(um1, Scalar(-1))) {"},
{"lineNum":"  669","line":"      return RealScalar(-1);"},
{"lineNum":"  670","line":"    }"},
{"lineNum":"  671","line":""},
{"lineNum":"  672","line":"    EIGEN_USING_STD(log);"},
{"lineNum":"  673","line":"    Scalar logu = log(u);"},
{"lineNum":"  674","line":"    return numext::equal_strict(u, logu) ? u : (u - RealScalar(1)) * x / logu;"},
{"lineNum":"  675","line":"  }"},
{"lineNum":"  676","line":"}"},
{"lineNum":"  677","line":""},
{"lineNum":"  678","line":"template<typename Scalar>"},
{"lineNum":"  679","line":"struct expm1_impl {"},
{"lineNum":"  680","line":"  EIGEN_DEVICE_FUNC static inline Scalar run(const Scalar& x)"},
{"lineNum":"  681","line":"  {"},
{"lineNum":"  682","line":"    EIGEN_STATIC_ASSERT_NON_INTEGER(Scalar)"},
{"lineNum":"  683","line":"    #if EIGEN_HAS_CXX11_MATH"},
{"lineNum":"  684","line":"    using std::expm1;"},
{"lineNum":"  685","line":"    #else"},
{"lineNum":"  686","line":"    using std_fallback::expm1;"},
{"lineNum":"  687","line":"    #endif"},
{"lineNum":"  688","line":"    return expm1(x);"},
{"lineNum":"  689","line":"  }"},
{"lineNum":"  690","line":"};"},
{"lineNum":"  691","line":""},
{"lineNum":"  692","line":"template<typename Scalar>"},
{"lineNum":"  693","line":"struct expm1_retval"},
{"lineNum":"  694","line":"{"},
{"lineNum":"  695","line":"  typedef Scalar type;"},
{"lineNum":"  696","line":"};"},
{"lineNum":"  697","line":""},
{"lineNum":"  698","line":"/****************************************************************************"},
{"lineNum":"  699","line":"* Implementation of log                                                     *"},
{"lineNum":"  700","line":"****************************************************************************/"},
{"lineNum":"  701","line":""},
{"lineNum":"  702","line":"// Complex log defined in MathFunctionsImpl.h."},
{"lineNum":"  703","line":"template<typename T> EIGEN_DEVICE_FUNC std::complex<T> complex_log(const std::complex<T>& z);"},
{"lineNum":"  704","line":""},
{"lineNum":"  705","line":"template<typename Scalar>"},
{"lineNum":"  706","line":"struct log_impl {"},
{"lineNum":"  707","line":"  EIGEN_DEVICE_FUNC static inline Scalar run(const Scalar& x)"},
{"lineNum":"  708","line":"  {"},
{"lineNum":"  709","line":"    EIGEN_USING_STD(log);"},
{"lineNum":"  710","line":"    return static_cast<Scalar>(log(x));"},
{"lineNum":"  711","line":"  }"},
{"lineNum":"  712","line":"};"},
{"lineNum":"  713","line":""},
{"lineNum":"  714","line":"template<typename Scalar>"},
{"lineNum":"  715","line":"struct log_impl<std::complex<Scalar> > {"},
{"lineNum":"  716","line":"  EIGEN_DEVICE_FUNC static inline std::complex<Scalar> run(const std::complex<Scalar>& z)"},
{"lineNum":"  717","line":"  {"},
{"lineNum":"  718","line":"    return complex_log(z);"},
{"lineNum":"  719","line":"  }"},
{"lineNum":"  720","line":"};"},
{"lineNum":"  721","line":""},
{"lineNum":"  722","line":"/****************************************************************************"},
{"lineNum":"  723","line":"* Implementation of log1p                                                   *"},
{"lineNum":"  724","line":"****************************************************************************/"},
{"lineNum":"  725","line":""},
{"lineNum":"  726","line":"namespace std_fallback {"},
{"lineNum":"  727","line":"  // fallback log1p implementation in case there is no log1p(Scalar) function in namespace of Scalar,"},
{"lineNum":"  728","line":"  // or that there is no suitable std::log1p function available"},
{"lineNum":"  729","line":"  template<typename Scalar>"},
{"lineNum":"  730","line":"  EIGEN_DEVICE_FUNC inline Scalar log1p(const Scalar& x) {"},
{"lineNum":"  731","line":"    EIGEN_STATIC_ASSERT_NON_INTEGER(Scalar)"},
{"lineNum":"  732","line":"    typedef typename NumTraits<Scalar>::Real RealScalar;"},
{"lineNum":"  733","line":"    EIGEN_USING_STD(log);"},
{"lineNum":"  734","line":"    Scalar x1p = RealScalar(1) + x;"},
{"lineNum":"  735","line":"    Scalar log_1p = log_impl<Scalar>::run(x1p);"},
{"lineNum":"  736","line":"    const bool is_small = numext::equal_strict(x1p, Scalar(1));"},
{"lineNum":"  737","line":"    const bool is_inf = numext::equal_strict(x1p, log_1p);"},
{"lineNum":"  738","line":"    return (is_small || is_inf) ? x : x * (log_1p / (x1p - RealScalar(1)));"},
{"lineNum":"  739","line":"  }"},
{"lineNum":"  740","line":"}"},
{"lineNum":"  741","line":""},
{"lineNum":"  742","line":"template<typename Scalar>"},
{"lineNum":"  743","line":"struct log1p_impl {"},
{"lineNum":"  744","line":"  EIGEN_STATIC_ASSERT_NON_INTEGER(Scalar)"},
{"lineNum":"  745","line":""},
{"lineNum":"  746","line":"  EIGEN_DEVICE_FUNC static inline Scalar run(const Scalar& x)"},
{"lineNum":"  747","line":"  {"},
{"lineNum":"  748","line":"    #if EIGEN_HAS_CXX11_MATH"},
{"lineNum":"  749","line":"    using std::log1p;"},
{"lineNum":"  750","line":"    #else"},
{"lineNum":"  751","line":"    using std_fallback::log1p;"},
{"lineNum":"  752","line":"    #endif"},
{"lineNum":"  753","line":"    return log1p(x);"},
{"lineNum":"  754","line":"  }"},
{"lineNum":"  755","line":"};"},
{"lineNum":"  756","line":""},
{"lineNum":"  757","line":"// Specialization for complex types that are not supported by std::log1p."},
{"lineNum":"  758","line":"template <typename RealScalar>"},
{"lineNum":"  759","line":"struct log1p_impl<std::complex<RealScalar> > {"},
{"lineNum":"  760","line":"  EIGEN_STATIC_ASSERT_NON_INTEGER(RealScalar)"},
{"lineNum":"  761","line":""},
{"lineNum":"  762","line":"  EIGEN_DEVICE_FUNC static inline std::complex<RealScalar> run("},
{"lineNum":"  763","line":"      const std::complex<RealScalar>& x) {"},
{"lineNum":"  764","line":"    return std_fallback::log1p(x);"},
{"lineNum":"  765","line":"  }"},
{"lineNum":"  766","line":"};"},
{"lineNum":"  767","line":""},
{"lineNum":"  768","line":"template<typename Scalar>"},
{"lineNum":"  769","line":"struct log1p_retval"},
{"lineNum":"  770","line":"{"},
{"lineNum":"  771","line":"  typedef Scalar type;"},
{"lineNum":"  772","line":"};"},
{"lineNum":"  773","line":""},
{"lineNum":"  774","line":"/****************************************************************************"},
{"lineNum":"  775","line":"* Implementation of pow                                                  *"},
{"lineNum":"  776","line":"****************************************************************************/"},
{"lineNum":"  777","line":""},
{"lineNum":"  778","line":"template<typename ScalarX,typename ScalarY, bool IsInteger = NumTraits<ScalarX>::IsInteger&&NumTraits<ScalarY>::IsInteger>"},
{"lineNum":"  779","line":"struct pow_impl"},
{"lineNum":"  780","line":"{"},
{"lineNum":"  781","line":"  //typedef Scalar retval;"},
{"lineNum":"  782","line":"  typedef typename ScalarBinaryOpTraits<ScalarX,ScalarY,internal::scalar_pow_op<ScalarX,ScalarY> >::ReturnType result_type;"},
{"lineNum":"  783","line":"  static EIGEN_DEVICE_FUNC inline result_type run(const ScalarX& x, const ScalarY& y)"},
{"lineNum":"  784","line":"  {"},
{"lineNum":"  785","line":"    EIGEN_USING_STD(pow);"},
{"lineNum":"  786","line":"    return pow(x, y);"},
{"lineNum":"  787","line":"  }"},
{"lineNum":"  788","line":"};"},
{"lineNum":"  789","line":""},
{"lineNum":"  790","line":"template<typename ScalarX,typename ScalarY>"},
{"lineNum":"  791","line":"struct pow_impl<ScalarX,ScalarY, true>"},
{"lineNum":"  792","line":"{"},
{"lineNum":"  793","line":"  typedef ScalarX result_type;"},
{"lineNum":"  794","line":"  static EIGEN_DEVICE_FUNC inline ScalarX run(ScalarX x, ScalarY y)"},
{"lineNum":"  795","line":"  {"},
{"lineNum":"  796","line":"    ScalarX res(1);"},
{"lineNum":"  797","line":"    eigen_assert(!NumTraits<ScalarY>::IsSigned || y >= 0);"},
{"lineNum":"  798","line":"    if(y & 1) res *= x;"},
{"lineNum":"  799","line":"    y >>= 1;"},
{"lineNum":"  800","line":"    while(y)"},
{"lineNum":"  801","line":"    {"},
{"lineNum":"  802","line":"      x *= x;"},
{"lineNum":"  803","line":"      if(y&1) res *= x;"},
{"lineNum":"  804","line":"      y >>= 1;"},
{"lineNum":"  805","line":"    }"},
{"lineNum":"  806","line":"    return res;"},
{"lineNum":"  807","line":"  }"},
{"lineNum":"  808","line":"};"},
{"lineNum":"  809","line":""},
{"lineNum":"  810","line":"/****************************************************************************"},
{"lineNum":"  811","line":"* Implementation of random                                               *"},
{"lineNum":"  812","line":"****************************************************************************/"},
{"lineNum":"  813","line":""},
{"lineNum":"  814","line":"template<typename Scalar,"},
{"lineNum":"  815","line":"         bool IsComplex,"},
{"lineNum":"  816","line":"         bool IsInteger>"},
{"lineNum":"  817","line":"struct random_default_impl {};"},
{"lineNum":"  818","line":""},
{"lineNum":"  819","line":"template<typename Scalar>"},
{"lineNum":"  820","line":"struct random_impl : random_default_impl<Scalar, NumTraits<Scalar>::IsComplex, NumTraits<Scalar>::IsInteger> {};"},
{"lineNum":"  821","line":""},
{"lineNum":"  822","line":"template<typename Scalar>"},
{"lineNum":"  823","line":"struct random_retval"},
{"lineNum":"  824","line":"{"},
{"lineNum":"  825","line":"  typedef Scalar type;"},
{"lineNum":"  826","line":"};"},
{"lineNum":"  827","line":""},
{"lineNum":"  828","line":"template<typename Scalar> inline EIGEN_MATHFUNC_RETVAL(random, Scalar) random(const Scalar& x, const Scalar& y);"},
{"lineNum":"  829","line":"template<typename Scalar> inline EIGEN_MATHFUNC_RETVAL(random, Scalar) random();"},
{"lineNum":"  830","line":""},
{"lineNum":"  831","line":"template<typename Scalar>"},
{"lineNum":"  832","line":"struct random_default_impl<Scalar, false, false>"},
{"lineNum":"  833","line":"{"},
{"lineNum":"  834","line":"  static inline Scalar run(const Scalar& x, const Scalar& y)"},
{"lineNum":"  835","line":"  {"},
{"lineNum":"  836","line":"    return x + (y-x) * Scalar(std::rand()) / Scalar(RAND_MAX);"},
{"lineNum":"  837","line":"  }"},
{"lineNum":"  838","line":"  static inline Scalar run()"},
{"lineNum":"  839","line":"  {"},
{"lineNum":"  840","line":"    return run(Scalar(NumTraits<Scalar>::IsSigned ? -1 : 0), Scalar(1));"},
{"lineNum":"  841","line":"  }"},
{"lineNum":"  842","line":"};"},
{"lineNum":"  843","line":""},
{"lineNum":"  844","line":"enum {"},
{"lineNum":"  845","line":"  meta_floor_log2_terminate,"},
{"lineNum":"  846","line":"  meta_floor_log2_move_up,"},
{"lineNum":"  847","line":"  meta_floor_log2_move_down,"},
{"lineNum":"  848","line":"  meta_floor_log2_bogus"},
{"lineNum":"  849","line":"};"},
{"lineNum":"  850","line":""},
{"lineNum":"  851","line":"template<unsigned int n, int lower, int upper> struct meta_floor_log2_selector"},
{"lineNum":"  852","line":"{"},
{"lineNum":"  853","line":"  enum { middle = (lower + upper) / 2,"},
{"lineNum":"  854","line":"         value = (upper <= lower + 1) ? int(meta_floor_log2_terminate)"},
{"lineNum":"  855","line":"               : (n < (1 << middle)) ? int(meta_floor_log2_move_down)"},
{"lineNum":"  856","line":"               : (n==0) ? int(meta_floor_log2_bogus)"},
{"lineNum":"  857","line":"               : int(meta_floor_log2_move_up)"},
{"lineNum":"  858","line":"  };"},
{"lineNum":"  859","line":"};"},
{"lineNum":"  860","line":""},
{"lineNum":"  861","line":"template<unsigned int n,"},
{"lineNum":"  862","line":"         int lower = 0,"},
{"lineNum":"  863","line":"         int upper = sizeof(unsigned int) * CHAR_BIT - 1,"},
{"lineNum":"  864","line":"         int selector = meta_floor_log2_selector<n, lower, upper>::value>"},
{"lineNum":"  865","line":"struct meta_floor_log2 {};"},
{"lineNum":"  866","line":""},
{"lineNum":"  867","line":"template<unsigned int n, int lower, int upper>"},
{"lineNum":"  868","line":"struct meta_floor_log2<n, lower, upper, meta_floor_log2_move_down>"},
{"lineNum":"  869","line":"{"},
{"lineNum":"  870","line":"  enum { value = meta_floor_log2<n, lower, meta_floor_log2_selector<n, lower, upper>::middle>::value };"},
{"lineNum":"  871","line":"};"},
{"lineNum":"  872","line":""},
{"lineNum":"  873","line":"template<unsigned int n, int lower, int upper>"},
{"lineNum":"  874","line":"struct meta_floor_log2<n, lower, upper, meta_floor_log2_move_up>"},
{"lineNum":"  875","line":"{"},
{"lineNum":"  876","line":"  enum { value = meta_floor_log2<n, meta_floor_log2_selector<n, lower, upper>::middle, upper>::value };"},
{"lineNum":"  877","line":"};"},
{"lineNum":"  878","line":""},
{"lineNum":"  879","line":"template<unsigned int n, int lower, int upper>"},
{"lineNum":"  880","line":"struct meta_floor_log2<n, lower, upper, meta_floor_log2_terminate>"},
{"lineNum":"  881","line":"{"},
{"lineNum":"  882","line":"  enum { value = (n >= ((unsigned int)(1) << (lower+1))) ? lower+1 : lower };"},
{"lineNum":"  883","line":"};"},
{"lineNum":"  884","line":""},
{"lineNum":"  885","line":"template<unsigned int n, int lower, int upper>"},
{"lineNum":"  886","line":"struct meta_floor_log2<n, lower, upper, meta_floor_log2_bogus>"},
{"lineNum":"  887","line":"{"},
{"lineNum":"  888","line":"  // no value, error at compile time"},
{"lineNum":"  889","line":"};"},
{"lineNum":"  890","line":""},
{"lineNum":"  891","line":"template<typename Scalar>"},
{"lineNum":"  892","line":"struct random_default_impl<Scalar, false, true>"},
{"lineNum":"  893","line":"{"},
{"lineNum":"  894","line":"  static inline Scalar run(const Scalar& x, const Scalar& y)"},
{"lineNum":"  895","line":"  {"},
{"lineNum":"  896","line":"    if (y <= x)"},
{"lineNum":"  897","line":"      return x;"},
{"lineNum":"  898","line":"    // ScalarU is the unsigned counterpart of Scalar, possibly Scalar itself."},
{"lineNum":"  899","line":"    typedef typename make_unsigned<Scalar>::type ScalarU;"},
{"lineNum":"  900","line":"    // ScalarX is the widest of ScalarU and unsigned int."},
{"lineNum":"  901","line":"    // We\'ll deal only with ScalarX and unsigned int below thus avoiding signed"},
{"lineNum":"  902","line":"    // types and arithmetic and signed overflows (which are undefined behavior)."},
{"lineNum":"  903","line":"    typedef typename conditional<(ScalarU(-1) > unsigned(-1)), ScalarU, unsigned>::type ScalarX;"},
{"lineNum":"  904","line":"    // The following difference doesn\'t overflow, provided our integer types are two\'s"},
{"lineNum":"  905","line":"    // complement and have the same number of padding bits in signed and unsigned variants."},
{"lineNum":"  906","line":"    // This is the case in most modern implementations of C++."},
{"lineNum":"  907","line":"    ScalarX range = ScalarX(y) - ScalarX(x);"},
{"lineNum":"  908","line":"    ScalarX offset = 0;"},
{"lineNum":"  909","line":"    ScalarX divisor = 1;"},
{"lineNum":"  910","line":"    ScalarX multiplier = 1;"},
{"lineNum":"  911","line":"    const unsigned rand_max = RAND_MAX;"},
{"lineNum":"  912","line":"    if (range <= rand_max) divisor = (rand_max + 1) / (range + 1);"},
{"lineNum":"  913","line":"    else                   multiplier = 1 + range / (rand_max + 1);"},
{"lineNum":"  914","line":"    // Rejection sampling."},
{"lineNum":"  915","line":"    do {"},
{"lineNum":"  916","line":"      offset = (unsigned(std::rand()) * multiplier) / divisor;"},
{"lineNum":"  917","line":"    } while (offset > range);"},
{"lineNum":"  918","line":"    return Scalar(ScalarX(x) + offset);"},
{"lineNum":"  919","line":"  }"},
{"lineNum":"  920","line":""},
{"lineNum":"  921","line":"  static inline Scalar run()"},
{"lineNum":"  922","line":"  {"},
{"lineNum":"  923","line":"#ifdef EIGEN_MAKING_DOCS"},
{"lineNum":"  924","line":"    return run(Scalar(NumTraits<Scalar>::IsSigned ? -10 : 0), Scalar(10));"},
{"lineNum":"  925","line":"#else"},
{"lineNum":"  926","line":"    enum { rand_bits = meta_floor_log2<(unsigned int)(RAND_MAX)+1>::value,"},
{"lineNum":"  927","line":"           scalar_bits = sizeof(Scalar) * CHAR_BIT,"},
{"lineNum":"  928","line":"           shift = EIGEN_PLAIN_ENUM_MAX(0, int(rand_bits) - int(scalar_bits)),"},
{"lineNum":"  929","line":"           offset = NumTraits<Scalar>::IsSigned ? (1 << (EIGEN_PLAIN_ENUM_MIN(rand_bits,scalar_bits)-1)) : 0"},
{"lineNum":"  930","line":"    };"},
{"lineNum":"  931","line":"    return Scalar((std::rand() >> shift) - offset);"},
{"lineNum":"  932","line":"#endif"},
{"lineNum":"  933","line":"  }"},
{"lineNum":"  934","line":"};"},
{"lineNum":"  935","line":""},
{"lineNum":"  936","line":"template<typename Scalar>"},
{"lineNum":"  937","line":"struct random_default_impl<Scalar, true, false>"},
{"lineNum":"  938","line":"{"},
{"lineNum":"  939","line":"  static inline Scalar run(const Scalar& x, const Scalar& y)"},
{"lineNum":"  940","line":"  {"},
{"lineNum":"  941","line":"    return Scalar(random(x.real(), y.real()),"},
{"lineNum":"  942","line":"                  random(x.imag(), y.imag()));"},
{"lineNum":"  943","line":"  }"},
{"lineNum":"  944","line":"  static inline Scalar run()"},
{"lineNum":"  945","line":"  {"},
{"lineNum":"  946","line":"    typedef typename NumTraits<Scalar>::Real RealScalar;"},
{"lineNum":"  947","line":"    return Scalar(random<RealScalar>(), random<RealScalar>());"},
{"lineNum":"  948","line":"  }"},
{"lineNum":"  949","line":"};"},
{"lineNum":"  950","line":""},
{"lineNum":"  951","line":"template<typename Scalar>"},
{"lineNum":"  952","line":"inline EIGEN_MATHFUNC_RETVAL(random, Scalar) random(const Scalar& x, const Scalar& y)"},
{"lineNum":"  953","line":"{"},
{"lineNum":"  954","line":"  return EIGEN_MATHFUNC_IMPL(random, Scalar)::run(x, y);"},
{"lineNum":"  955","line":"}"},
{"lineNum":"  956","line":""},
{"lineNum":"  957","line":"template<typename Scalar>"},
{"lineNum":"  958","line":"inline EIGEN_MATHFUNC_RETVAL(random, Scalar) random()"},
{"lineNum":"  959","line":"{"},
{"lineNum":"  960","line":"  return EIGEN_MATHFUNC_IMPL(random, Scalar)::run();"},
{"lineNum":"  961","line":"}"},
{"lineNum":"  962","line":""},
{"lineNum":"  963","line":"// Implementation of is* functions"},
{"lineNum":"  964","line":""},
{"lineNum":"  965","line":"// std::is* do not work with fast-math and gcc, std::is* are available on MSVC 2013 and newer, as well as in clang."},
{"lineNum":"  966","line":"#if (EIGEN_HAS_CXX11_MATH && !(EIGEN_COMP_GNUC_STRICT && __FINITE_MATH_ONLY__)) || (EIGEN_COMP_MSVC>=1800) || (EIGEN_COMP_CLANG)"},
{"lineNum":"  967","line":"#define EIGEN_USE_STD_FPCLASSIFY 1"},
{"lineNum":"  968","line":"#else"},
{"lineNum":"  969","line":"#define EIGEN_USE_STD_FPCLASSIFY 0"},
{"lineNum":"  970","line":"#endif"},
{"lineNum":"  971","line":""},
{"lineNum":"  972","line":"template<typename T>"},
{"lineNum":"  973","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":"  974","line":"typename internal::enable_if<internal::is_integral<T>::value,bool>::type"},
{"lineNum":"  975","line":"isnan_impl(const T&) { return false; }"},
{"lineNum":"  976","line":""},
{"lineNum":"  977","line":"template<typename T>"},
{"lineNum":"  978","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":"  979","line":"typename internal::enable_if<internal::is_integral<T>::value,bool>::type"},
{"lineNum":"  980","line":"isinf_impl(const T&) { return false; }"},
{"lineNum":"  981","line":""},
{"lineNum":"  982","line":"template<typename T>"},
{"lineNum":"  983","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":"  984","line":"typename internal::enable_if<internal::is_integral<T>::value,bool>::type"},
{"lineNum":"  985","line":"isfinite_impl(const T&) { return true; }"},
{"lineNum":"  986","line":""},
{"lineNum":"  987","line":"template<typename T>"},
{"lineNum":"  988","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":"  989","line":"typename internal::enable_if<(!internal::is_integral<T>::value)&&(!NumTraits<T>::IsComplex),bool>::type"},
{"lineNum":"  990","line":"isfinite_impl(const T& x)"},
{"lineNum":"  991","line":"{"},
{"lineNum":"  992","line":"  #if defined(EIGEN_GPU_COMPILE_PHASE)"},
{"lineNum":"  993","line":"    return (::isfinite)(x);"},
{"lineNum":"  994","line":"  #elif EIGEN_USE_STD_FPCLASSIFY"},
{"lineNum":"  995","line":"    using std::isfinite;"},
{"lineNum":"  996","line":"    return isfinite EIGEN_NOT_A_MACRO (x);"},
{"lineNum":"  997","line":"  #else"},
{"lineNum":"  998","line":"    return x<=NumTraits<T>::highest() && x>=NumTraits<T>::lowest();"},
{"lineNum":"  999","line":"  #endif"},
{"lineNum":" 1000","line":"}"},
{"lineNum":" 1001","line":""},
{"lineNum":" 1002","line":"template<typename T>"},
{"lineNum":" 1003","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":" 1004","line":"typename internal::enable_if<(!internal::is_integral<T>::value)&&(!NumTraits<T>::IsComplex),bool>::type"},
{"lineNum":" 1005","line":"isinf_impl(const T& x)"},
{"lineNum":" 1006","line":"{"},
{"lineNum":" 1007","line":"  #if defined(EIGEN_GPU_COMPILE_PHASE)"},
{"lineNum":" 1008","line":"    return (::isinf)(x);"},
{"lineNum":" 1009","line":"  #elif EIGEN_USE_STD_FPCLASSIFY"},
{"lineNum":" 1010","line":"    using std::isinf;"},
{"lineNum":" 1011","line":"    return isinf EIGEN_NOT_A_MACRO (x);"},
{"lineNum":" 1012","line":"  #else"},
{"lineNum":" 1013","line":"    return x>NumTraits<T>::highest() || x<NumTraits<T>::lowest();"},
{"lineNum":" 1014","line":"  #endif"},
{"lineNum":" 1015","line":"}"},
{"lineNum":" 1016","line":""},
{"lineNum":" 1017","line":"template<typename T>"},
{"lineNum":" 1018","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":" 1019","line":"typename internal::enable_if<(!internal::is_integral<T>::value)&&(!NumTraits<T>::IsComplex),bool>::type"},
{"lineNum":" 1020","line":"isnan_impl(const T& x)"},
{"lineNum":" 1021","line":"{"},
{"lineNum":" 1022","line":"  #if defined(EIGEN_GPU_COMPILE_PHASE)"},
{"lineNum":" 1023","line":"    return (::isnan)(x);"},
{"lineNum":" 1024","line":"  #elif EIGEN_USE_STD_FPCLASSIFY"},
{"lineNum":" 1025","line":"    using std::isnan;"},
{"lineNum":" 1026","line":"    return isnan EIGEN_NOT_A_MACRO (x);"},
{"lineNum":" 1027","line":"  #else"},
{"lineNum":" 1028","line":"    return x != x;"},
{"lineNum":" 1029","line":"  #endif"},
{"lineNum":" 1030","line":"}"},
{"lineNum":" 1031","line":""},
{"lineNum":" 1032","line":"#if (!EIGEN_USE_STD_FPCLASSIFY)"},
{"lineNum":" 1033","line":""},
{"lineNum":" 1034","line":"#if EIGEN_COMP_MSVC"},
{"lineNum":" 1035","line":""},
{"lineNum":" 1036","line":"template<typename T> EIGEN_DEVICE_FUNC bool isinf_msvc_helper(T x)"},
{"lineNum":" 1037","line":"{"},
{"lineNum":" 1038","line":"  return _fpclass(x)==_FPCLASS_NINF || _fpclass(x)==_FPCLASS_PINF;"},
{"lineNum":" 1039","line":"}"},
{"lineNum":" 1040","line":""},
{"lineNum":" 1041","line":"//MSVC defines a _isnan builtin function, but for double only"},
{"lineNum":" 1042","line":"EIGEN_DEVICE_FUNC inline bool isnan_impl(const long double& x) { return _isnan(x)!=0; }"},
{"lineNum":" 1043","line":"EIGEN_DEVICE_FUNC inline bool isnan_impl(const double& x)      { return _isnan(x)!=0; }"},
{"lineNum":" 1044","line":"EIGEN_DEVICE_FUNC inline bool isnan_impl(const float& x)       { return _isnan(x)!=0; }"},
{"lineNum":" 1045","line":""},
{"lineNum":" 1046","line":"EIGEN_DEVICE_FUNC inline bool isinf_impl(const long double& x) { return isinf_msvc_helper(x); }"},
{"lineNum":" 1047","line":"EIGEN_DEVICE_FUNC inline bool isinf_impl(const double& x)      { return isinf_msvc_helper(x); }"},
{"lineNum":" 1048","line":"EIGEN_DEVICE_FUNC inline bool isinf_impl(const float& x)       { return isinf_msvc_helper(x); }"},
{"lineNum":" 1049","line":""},
{"lineNum":" 1050","line":"#elif (defined __FINITE_MATH_ONLY__ && __FINITE_MATH_ONLY__ && EIGEN_COMP_GNUC)"},
{"lineNum":" 1051","line":""},
{"lineNum":" 1052","line":"#if EIGEN_GNUC_AT_LEAST(5,0)"},
{"lineNum":" 1053","line":"  #define EIGEN_TMP_NOOPT_ATTRIB EIGEN_DEVICE_FUNC inline __attribute__((optimize(\"no-finite-math-only\")))"},
{"lineNum":" 1054","line":"#else"},
{"lineNum":" 1055","line":"  // NOTE the inline qualifier and noinline attribute are both needed: the former is to avoid linking issue (duplicate symbol),"},
{"lineNum":" 1056","line":"  //      while the second prevent too aggressive optimizations in fast-math mode:"},
{"lineNum":" 1057","line":"  #define EIGEN_TMP_NOOPT_ATTRIB EIGEN_DEVICE_FUNC inline __attribute__((noinline,optimize(\"no-finite-math-only\")))"},
{"lineNum":" 1058","line":"#endif"},
{"lineNum":" 1059","line":""},
{"lineNum":" 1060","line":"template<> EIGEN_TMP_NOOPT_ATTRIB bool isnan_impl(const long double& x) { return __builtin_isnan(x); }"},
{"lineNum":" 1061","line":"template<> EIGEN_TMP_NOOPT_ATTRIB bool isnan_impl(const double& x)      { return __builtin_isnan(x); }"},
{"lineNum":" 1062","line":"template<> EIGEN_TMP_NOOPT_ATTRIB bool isnan_impl(const float& x)       { return __builtin_isnan(x); }"},
{"lineNum":" 1063","line":"template<> EIGEN_TMP_NOOPT_ATTRIB bool isinf_impl(const double& x)      { return __builtin_isinf(x); }"},
{"lineNum":" 1064","line":"template<> EIGEN_TMP_NOOPT_ATTRIB bool isinf_impl(const float& x)       { return __builtin_isinf(x); }"},
{"lineNum":" 1065","line":"template<> EIGEN_TMP_NOOPT_ATTRIB bool isinf_impl(const long double& x) { return __builtin_isinf(x); }"},
{"lineNum":" 1066","line":""},
{"lineNum":" 1067","line":"#undef EIGEN_TMP_NOOPT_ATTRIB"},
{"lineNum":" 1068","line":""},
{"lineNum":" 1069","line":"#endif"},
{"lineNum":" 1070","line":""},
{"lineNum":" 1071","line":"#endif"},
{"lineNum":" 1072","line":""},
{"lineNum":" 1073","line":"// The following overload are defined at the end of this file"},
{"lineNum":" 1074","line":"template<typename T> EIGEN_DEVICE_FUNC bool isfinite_impl(const std::complex<T>& x);"},
{"lineNum":" 1075","line":"template<typename T> EIGEN_DEVICE_FUNC bool isnan_impl(const std::complex<T>& x);"},
{"lineNum":" 1076","line":"template<typename T> EIGEN_DEVICE_FUNC bool isinf_impl(const std::complex<T>& x);"},
{"lineNum":" 1077","line":""},
{"lineNum":" 1078","line":"template<typename T> T generic_fast_tanh_float(const T& a_x);"},
{"lineNum":" 1079","line":"} // end namespace internal"},
{"lineNum":" 1080","line":""},
{"lineNum":" 1081","line":"/****************************************************************************"},
{"lineNum":" 1082","line":"* Generic math functions                                                    *"},
{"lineNum":" 1083","line":"****************************************************************************/"},
{"lineNum":" 1084","line":""},
{"lineNum":" 1085","line":"namespace numext {"},
{"lineNum":" 1086","line":""},
{"lineNum":" 1087","line":"#if (!defined(EIGEN_GPUCC) || defined(EIGEN_CONSTEXPR_ARE_DEVICE_FUNC))"},
{"lineNum":" 1088","line":"template<typename T>"},
{"lineNum":" 1089","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":" 1090","line":"EIGEN_ALWAYS_INLINE T mini(const T& x, const T& y)"},
{"lineNum":" 1091","line":"{"},
{"lineNum":" 1092","line":"  EIGEN_USING_STD(min)"},
{"lineNum":" 1093","line":"  return min EIGEN_NOT_A_MACRO (x,y);","class":"lineNoCov","hits":"0","possible_hits":"53",},
{"lineNum":" 1094","line":"}"},
{"lineNum":" 1095","line":""},
{"lineNum":" 1096","line":"template<typename T>"},
{"lineNum":" 1097","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":" 1098","line":"EIGEN_ALWAYS_INLINE T maxi(const T& x, const T& y)"},
{"lineNum":" 1099","line":"{"},
{"lineNum":" 1100","line":"  EIGEN_USING_STD(max)"},
{"lineNum":" 1101","line":"  return max EIGEN_NOT_A_MACRO (x,y);","class":"lineNoCov","hits":"0","possible_hits":"38",},
{"lineNum":" 1102","line":"}"},
{"lineNum":" 1103","line":"#else"},
{"lineNum":" 1104","line":"template<typename T>"},
{"lineNum":" 1105","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":" 1106","line":"EIGEN_ALWAYS_INLINE T mini(const T& x, const T& y)"},
{"lineNum":" 1107","line":"{"},
{"lineNum":" 1108","line":"  return y < x ? y : x;"},
{"lineNum":" 1109","line":"}"},
{"lineNum":" 1110","line":"template<>"},
{"lineNum":" 1111","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":" 1112","line":"EIGEN_ALWAYS_INLINE float mini(const float& x, const float& y)"},
{"lineNum":" 1113","line":"{"},
{"lineNum":" 1114","line":"  return fminf(x, y);"},
{"lineNum":" 1115","line":"}"},
{"lineNum":" 1116","line":"template<>"},
{"lineNum":" 1117","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":" 1118","line":"EIGEN_ALWAYS_INLINE double mini(const double& x, const double& y)"},
{"lineNum":" 1119","line":"{"},
{"lineNum":" 1120","line":"  return fmin(x, y);"},
{"lineNum":" 1121","line":"}"},
{"lineNum":" 1122","line":"template<>"},
{"lineNum":" 1123","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":" 1124","line":"EIGEN_ALWAYS_INLINE long double mini(const long double& x, const long double& y)"},
{"lineNum":" 1125","line":"{"},
{"lineNum":" 1126","line":"#if defined(EIGEN_HIPCC)"},
{"lineNum":" 1127","line":"  // no \"fminl\" on HIP yet"},
{"lineNum":" 1128","line":"  return (x < y) ? x : y;"},
{"lineNum":" 1129","line":"#else"},
{"lineNum":" 1130","line":"  return fminl(x, y);"},
{"lineNum":" 1131","line":"#endif"},
{"lineNum":" 1132","line":"}"},
{"lineNum":" 1133","line":""},
{"lineNum":" 1134","line":"template<typename T>"},
{"lineNum":" 1135","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":" 1136","line":"EIGEN_ALWAYS_INLINE T maxi(const T& x, const T& y)"},
{"lineNum":" 1137","line":"{"},
{"lineNum":" 1138","line":"  return x < y ? y : x;"},
{"lineNum":" 1139","line":"}"},
{"lineNum":" 1140","line":"template<>"},
{"lineNum":" 1141","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":" 1142","line":"EIGEN_ALWAYS_INLINE float maxi(const float& x, const float& y)"},
{"lineNum":" 1143","line":"{"},
{"lineNum":" 1144","line":"  return fmaxf(x, y);"},
{"lineNum":" 1145","line":"}"},
{"lineNum":" 1146","line":"template<>"},
{"lineNum":" 1147","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":" 1148","line":"EIGEN_ALWAYS_INLINE double maxi(const double& x, const double& y)"},
{"lineNum":" 1149","line":"{"},
{"lineNum":" 1150","line":"  return fmax(x, y);"},
{"lineNum":" 1151","line":"}"},
{"lineNum":" 1152","line":"template<>"},
{"lineNum":" 1153","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":" 1154","line":"EIGEN_ALWAYS_INLINE long double maxi(const long double& x, const long double& y)"},
{"lineNum":" 1155","line":"{"},
{"lineNum":" 1156","line":"#if defined(EIGEN_HIPCC)"},
{"lineNum":" 1157","line":"  // no \"fmaxl\" on HIP yet"},
{"lineNum":" 1158","line":"  return (x > y) ? x : y;"},
{"lineNum":" 1159","line":"#else"},
{"lineNum":" 1160","line":"  return fmaxl(x, y);"},
{"lineNum":" 1161","line":"#endif"},
{"lineNum":" 1162","line":"}"},
{"lineNum":" 1163","line":"#endif"},
{"lineNum":" 1164","line":""},
{"lineNum":" 1165","line":"#if defined(SYCL_DEVICE_ONLY)"},
{"lineNum":" 1166","line":""},
{"lineNum":" 1167","line":""},
{"lineNum":" 1168","line":"#define SYCL_SPECIALIZE_SIGNED_INTEGER_TYPES_BINARY(NAME, FUNC) \\"},
{"lineNum":" 1169","line":"  SYCL_SPECIALIZE_BINARY_FUNC(NAME, FUNC, cl::sycl::cl_char)   \\"},
{"lineNum":" 1170","line":"  SYCL_SPECIALIZE_BINARY_FUNC(NAME, FUNC, cl::sycl::cl_short)  \\"},
{"lineNum":" 1171","line":"  SYCL_SPECIALIZE_BINARY_FUNC(NAME, FUNC, cl::sycl::cl_int)    \\"},
{"lineNum":" 1172","line":"  SYCL_SPECIALIZE_BINARY_FUNC(NAME, FUNC, cl::sycl::cl_long)"},
{"lineNum":" 1173","line":"#define SYCL_SPECIALIZE_SIGNED_INTEGER_TYPES_UNARY(NAME, FUNC) \\"},
{"lineNum":" 1174","line":"  SYCL_SPECIALIZE_UNARY_FUNC(NAME, FUNC, cl::sycl::cl_char)   \\"},
{"lineNum":" 1175","line":"  SYCL_SPECIALIZE_UNARY_FUNC(NAME, FUNC, cl::sycl::cl_short)  \\"},
{"lineNum":" 1176","line":"  SYCL_SPECIALIZE_UNARY_FUNC(NAME, FUNC, cl::sycl::cl_int)    \\"},
{"lineNum":" 1177","line":"  SYCL_SPECIALIZE_UNARY_FUNC(NAME, FUNC, cl::sycl::cl_long)"},
{"lineNum":" 1178","line":"#define SYCL_SPECIALIZE_UNSIGNED_INTEGER_TYPES_BINARY(NAME, FUNC) \\"},
{"lineNum":" 1179","line":"  SYCL_SPECIALIZE_BINARY_FUNC(NAME, FUNC, cl::sycl::cl_uchar)  \\"},
{"lineNum":" 1180","line":"  SYCL_SPECIALIZE_BINARY_FUNC(NAME, FUNC, cl::sycl::cl_ushort) \\"},
{"lineNum":" 1181","line":"  SYCL_SPECIALIZE_BINARY_FUNC(NAME, FUNC, cl::sycl::cl_uint)   \\"},
{"lineNum":" 1182","line":"  SYCL_SPECIALIZE_BINARY_FUNC(NAME, FUNC, cl::sycl::cl_ulong)"},
{"lineNum":" 1183","line":"#define SYCL_SPECIALIZE_UNSIGNED_INTEGER_TYPES_UNARY(NAME, FUNC) \\"},
{"lineNum":" 1184","line":"  SYCL_SPECIALIZE_UNARY_FUNC(NAME, FUNC, cl::sycl::cl_uchar)  \\"},
{"lineNum":" 1185","line":"  SYCL_SPECIALIZE_UNARY_FUNC(NAME, FUNC, cl::sycl::cl_ushort) \\"},
{"lineNum":" 1186","line":"  SYCL_SPECIALIZE_UNARY_FUNC(NAME, FUNC, cl::sycl::cl_uint)   \\"},
{"lineNum":" 1187","line":"  SYCL_SPECIALIZE_UNARY_FUNC(NAME, FUNC, cl::sycl::cl_ulong)"},
{"lineNum":" 1188","line":"#define SYCL_SPECIALIZE_INTEGER_TYPES_BINARY(NAME, FUNC) \\"},
{"lineNum":" 1189","line":"  SYCL_SPECIALIZE_SIGNED_INTEGER_TYPES_BINARY(NAME, FUNC) \\"},
{"lineNum":" 1190","line":"  SYCL_SPECIALIZE_UNSIGNED_INTEGER_TYPES_BINARY(NAME, FUNC)"},
{"lineNum":" 1191","line":"#define SYCL_SPECIALIZE_INTEGER_TYPES_UNARY(NAME, FUNC) \\"},
{"lineNum":" 1192","line":"  SYCL_SPECIALIZE_SIGNED_INTEGER_TYPES_UNARY(NAME, FUNC) \\"},
{"lineNum":" 1193","line":"  SYCL_SPECIALIZE_UNSIGNED_INTEGER_TYPES_UNARY(NAME, FUNC)"},
{"lineNum":" 1194","line":"#define SYCL_SPECIALIZE_FLOATING_TYPES_BINARY(NAME, FUNC) \\"},
{"lineNum":" 1195","line":"  SYCL_SPECIALIZE_BINARY_FUNC(NAME, FUNC, cl::sycl::cl_float) \\"},
{"lineNum":" 1196","line":"  SYCL_SPECIALIZE_BINARY_FUNC(NAME, FUNC,cl::sycl::cl_double)"},
{"lineNum":" 1197","line":"#define SYCL_SPECIALIZE_FLOATING_TYPES_UNARY(NAME, FUNC) \\"},
{"lineNum":" 1198","line":"  SYCL_SPECIALIZE_UNARY_FUNC(NAME, FUNC, cl::sycl::cl_float) \\"},
{"lineNum":" 1199","line":"  SYCL_SPECIALIZE_UNARY_FUNC(NAME, FUNC,cl::sycl::cl_double)"},
{"lineNum":" 1200","line":"#define SYCL_SPECIALIZE_FLOATING_TYPES_UNARY_FUNC_RET_TYPE(NAME, FUNC, RET_TYPE) \\"},
{"lineNum":" 1201","line":"  SYCL_SPECIALIZE_GEN_UNARY_FUNC(NAME, FUNC, RET_TYPE, cl::sycl::cl_float) \\"},
{"lineNum":" 1202","line":"  SYCL_SPECIALIZE_GEN_UNARY_FUNC(NAME, FUNC, RET_TYPE, cl::sycl::cl_double)"},
{"lineNum":" 1203","line":""},
{"lineNum":" 1204","line":"#define SYCL_SPECIALIZE_GEN_UNARY_FUNC(NAME, FUNC, RET_TYPE, ARG_TYPE) \\"},
{"lineNum":" 1205","line":"template<>                                               \\"},
{"lineNum":" 1206","line":"  EIGEN_DEVICE_FUNC                                      \\"},
{"lineNum":" 1207","line":"  EIGEN_ALWAYS_INLINE RET_TYPE NAME(const ARG_TYPE& x) { \\"},
{"lineNum":" 1208","line":"    return cl::sycl::FUNC(x);                            \\"},
{"lineNum":" 1209","line":"  }"},
{"lineNum":" 1210","line":""},
{"lineNum":" 1211","line":"#define SYCL_SPECIALIZE_UNARY_FUNC(NAME, FUNC, TYPE) \\"},
{"lineNum":" 1212","line":"  SYCL_SPECIALIZE_GEN_UNARY_FUNC(NAME, FUNC, TYPE, TYPE)"},
{"lineNum":" 1213","line":""},
{"lineNum":" 1214","line":"#define SYCL_SPECIALIZE_GEN1_BINARY_FUNC(NAME, FUNC, RET_TYPE, ARG_TYPE1, ARG_TYPE2) \\"},
{"lineNum":" 1215","line":"  template<>                                                                  \\"},
{"lineNum":" 1216","line":"  EIGEN_DEVICE_FUNC                                                           \\"},
{"lineNum":" 1217","line":"  EIGEN_ALWAYS_INLINE RET_TYPE NAME(const ARG_TYPE1& x, const ARG_TYPE2& y) { \\"},
{"lineNum":" 1218","line":"    return cl::sycl::FUNC(x, y);                                              \\"},
{"lineNum":" 1219","line":"  }"},
{"lineNum":" 1220","line":""},
{"lineNum":" 1221","line":"#define SYCL_SPECIALIZE_GEN2_BINARY_FUNC(NAME, FUNC, RET_TYPE, ARG_TYPE) \\"},
{"lineNum":" 1222","line":"  SYCL_SPECIALIZE_GEN1_BINARY_FUNC(NAME, FUNC, RET_TYPE, ARG_TYPE, ARG_TYPE)"},
{"lineNum":" 1223","line":""},
{"lineNum":" 1224","line":"#define SYCL_SPECIALIZE_BINARY_FUNC(NAME, FUNC, TYPE) \\"},
{"lineNum":" 1225","line":"  SYCL_SPECIALIZE_GEN2_BINARY_FUNC(NAME, FUNC, TYPE, TYPE)"},
{"lineNum":" 1226","line":""},
{"lineNum":" 1227","line":"SYCL_SPECIALIZE_INTEGER_TYPES_BINARY(mini, min)"},
{"lineNum":" 1228","line":"SYCL_SPECIALIZE_FLOATING_TYPES_BINARY(mini, fmin)"},
{"lineNum":" 1229","line":"SYCL_SPECIALIZE_INTEGER_TYPES_BINARY(maxi, max)"},
{"lineNum":" 1230","line":"SYCL_SPECIALIZE_FLOATING_TYPES_BINARY(maxi, fmax)"},
{"lineNum":" 1231","line":""},
{"lineNum":" 1232","line":"#endif"},
{"lineNum":" 1233","line":""},
{"lineNum":" 1234","line":""},
{"lineNum":" 1235","line":"template<typename Scalar>"},
{"lineNum":" 1236","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":" 1237","line":"inline EIGEN_MATHFUNC_RETVAL(real, Scalar) real(const Scalar& x)"},
{"lineNum":" 1238","line":"{"},
{"lineNum":" 1239","line":"  return EIGEN_MATHFUNC_IMPL(real, Scalar)::run(x);"},
{"lineNum":" 1240","line":"}"},
{"lineNum":" 1241","line":""},
{"lineNum":" 1242","line":"template<typename Scalar>"},
{"lineNum":" 1243","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":" 1244","line":"inline typename internal::add_const_on_value_type< EIGEN_MATHFUNC_RETVAL(real_ref, Scalar) >::type real_ref(const Scalar& x)"},
{"lineNum":" 1245","line":"{"},
{"lineNum":" 1246","line":"  return internal::real_ref_impl<Scalar>::run(x);"},
{"lineNum":" 1247","line":"}"},
{"lineNum":" 1248","line":""},
{"lineNum":" 1249","line":"template<typename Scalar>"},
{"lineNum":" 1250","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":" 1251","line":"inline EIGEN_MATHFUNC_RETVAL(real_ref, Scalar) real_ref(Scalar& x)"},
{"lineNum":" 1252","line":"{"},
{"lineNum":" 1253","line":"  return EIGEN_MATHFUNC_IMPL(real_ref, Scalar)::run(x);"},
{"lineNum":" 1254","line":"}"},
{"lineNum":" 1255","line":""},
{"lineNum":" 1256","line":"template<typename Scalar>"},
{"lineNum":" 1257","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":" 1258","line":"inline EIGEN_MATHFUNC_RETVAL(imag, Scalar) imag(const Scalar& x)"},
{"lineNum":" 1259","line":"{"},
{"lineNum":" 1260","line":"  return EIGEN_MATHFUNC_IMPL(imag, Scalar)::run(x);"},
{"lineNum":" 1261","line":"}"},
{"lineNum":" 1262","line":""},
{"lineNum":" 1263","line":"template<typename Scalar>"},
{"lineNum":" 1264","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":" 1265","line":"inline EIGEN_MATHFUNC_RETVAL(arg, Scalar) arg(const Scalar& x)"},
{"lineNum":" 1266","line":"{"},
{"lineNum":" 1267","line":"  return EIGEN_MATHFUNC_IMPL(arg, Scalar)::run(x);"},
{"lineNum":" 1268","line":"}"},
{"lineNum":" 1269","line":""},
{"lineNum":" 1270","line":"template<typename Scalar>"},
{"lineNum":" 1271","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":" 1272","line":"inline typename internal::add_const_on_value_type< EIGEN_MATHFUNC_RETVAL(imag_ref, Scalar) >::type imag_ref(const Scalar& x)"},
{"lineNum":" 1273","line":"{"},
{"lineNum":" 1274","line":"  return internal::imag_ref_impl<Scalar>::run(x);"},
{"lineNum":" 1275","line":"}"},
{"lineNum":" 1276","line":""},
{"lineNum":" 1277","line":"template<typename Scalar>"},
{"lineNum":" 1278","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":" 1279","line":"inline EIGEN_MATHFUNC_RETVAL(imag_ref, Scalar) imag_ref(Scalar& x)"},
{"lineNum":" 1280","line":"{"},
{"lineNum":" 1281","line":"  return EIGEN_MATHFUNC_IMPL(imag_ref, Scalar)::run(x);"},
{"lineNum":" 1282","line":"}"},
{"lineNum":" 1283","line":""},
{"lineNum":" 1284","line":"template<typename Scalar>"},
{"lineNum":" 1285","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":" 1286","line":"inline EIGEN_MATHFUNC_RETVAL(conj, Scalar) conj(const Scalar& x)"},
{"lineNum":" 1287","line":"{"},
{"lineNum":" 1288","line":"  return EIGEN_MATHFUNC_IMPL(conj, Scalar)::run(x);"},
{"lineNum":" 1289","line":"}"},
{"lineNum":" 1290","line":""},
{"lineNum":" 1291","line":"template<typename Scalar>"},
{"lineNum":" 1292","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":" 1293","line":"inline EIGEN_MATHFUNC_RETVAL(abs2, Scalar) abs2(const Scalar& x)"},
{"lineNum":" 1294","line":"{"},
{"lineNum":" 1295","line":"  return EIGEN_MATHFUNC_IMPL(abs2, Scalar)::run(x);"},
{"lineNum":" 1296","line":"}"},
{"lineNum":" 1297","line":""},
{"lineNum":" 1298","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":" 1299","line":"inline bool abs2(bool x) { return x; }"},
{"lineNum":" 1300","line":""},
{"lineNum":" 1301","line":"template<typename T>"},
{"lineNum":" 1302","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":" 1303","line":"EIGEN_ALWAYS_INLINE T absdiff(const T& x, const T& y)"},
{"lineNum":" 1304","line":"{"},
{"lineNum":" 1305","line":"  return x > y ? x - y : y - x;"},
{"lineNum":" 1306","line":"}"},
{"lineNum":" 1307","line":"template<>"},
{"lineNum":" 1308","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":" 1309","line":"EIGEN_ALWAYS_INLINE float absdiff(const float& x, const float& y)"},
{"lineNum":" 1310","line":"{"},
{"lineNum":" 1311","line":"  return fabsf(x - y);"},
{"lineNum":" 1312","line":"}"},
{"lineNum":" 1313","line":"template<>"},
{"lineNum":" 1314","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":" 1315","line":"EIGEN_ALWAYS_INLINE double absdiff(const double& x, const double& y)"},
{"lineNum":" 1316","line":"{"},
{"lineNum":" 1317","line":"  return fabs(x - y);"},
{"lineNum":" 1318","line":"}"},
{"lineNum":" 1319","line":""},
{"lineNum":" 1320","line":"#if !defined(EIGEN_GPUCC)"},
{"lineNum":" 1321","line":"// HIP and CUDA do not support long double."},
{"lineNum":" 1322","line":"template<>"},
{"lineNum":" 1323","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":" 1324","line":"EIGEN_ALWAYS_INLINE long double absdiff(const long double& x, const long double& y) {"},
{"lineNum":" 1325","line":"  return fabsl(x - y);"},
{"lineNum":" 1326","line":"}"},
{"lineNum":" 1327","line":"#endif"},
{"lineNum":" 1328","line":""},
{"lineNum":" 1329","line":"template<typename Scalar>"},
{"lineNum":" 1330","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":" 1331","line":"inline EIGEN_MATHFUNC_RETVAL(norm1, Scalar) norm1(const Scalar& x)"},
{"lineNum":" 1332","line":"{"},
{"lineNum":" 1333","line":"  return EIGEN_MATHFUNC_IMPL(norm1, Scalar)::run(x);"},
{"lineNum":" 1334","line":"}"},
{"lineNum":" 1335","line":""},
{"lineNum":" 1336","line":"template<typename Scalar>"},
{"lineNum":" 1337","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":" 1338","line":"inline EIGEN_MATHFUNC_RETVAL(hypot, Scalar) hypot(const Scalar& x, const Scalar& y)"},
{"lineNum":" 1339","line":"{"},
{"lineNum":" 1340","line":"  return EIGEN_MATHFUNC_IMPL(hypot, Scalar)::run(x, y);"},
{"lineNum":" 1341","line":"}"},
{"lineNum":" 1342","line":""},
{"lineNum":" 1343","line":"#if defined(SYCL_DEVICE_ONLY)"},
{"lineNum":" 1344","line":"  SYCL_SPECIALIZE_FLOATING_TYPES_BINARY(hypot, hypot)"},
{"lineNum":" 1345","line":"#endif"},
{"lineNum":" 1346","line":""},
{"lineNum":" 1347","line":"template<typename Scalar>"},
{"lineNum":" 1348","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":" 1349","line":"inline EIGEN_MATHFUNC_RETVAL(log1p, Scalar) log1p(const Scalar& x)"},
{"lineNum":" 1350","line":"{"},
{"lineNum":" 1351","line":"  return EIGEN_MATHFUNC_IMPL(log1p, Scalar)::run(x);"},
{"lineNum":" 1352","line":"}"},
{"lineNum":" 1353","line":""},
{"lineNum":" 1354","line":"#if defined(SYCL_DEVICE_ONLY)"},
{"lineNum":" 1355","line":"SYCL_SPECIALIZE_FLOATING_TYPES_UNARY(log1p, log1p)"},
{"lineNum":" 1356","line":"#endif"},
{"lineNum":" 1357","line":""},
{"lineNum":" 1358","line":"#if defined(EIGEN_GPUCC)"},
{"lineNum":" 1359","line":"template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1360","line":"float log1p(const float &x) { return ::log1pf(x); }"},
{"lineNum":" 1361","line":""},
{"lineNum":" 1362","line":"template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1363","line":"double log1p(const double &x) { return ::log1p(x); }"},
{"lineNum":" 1364","line":"#endif"},
{"lineNum":" 1365","line":""},
{"lineNum":" 1366","line":"template<typename ScalarX,typename ScalarY>"},
{"lineNum":" 1367","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":" 1368","line":"inline typename internal::pow_impl<ScalarX,ScalarY>::result_type pow(const ScalarX& x, const ScalarY& y)"},
{"lineNum":" 1369","line":"{"},
{"lineNum":" 1370","line":"  return internal::pow_impl<ScalarX,ScalarY>::run(x, y);"},
{"lineNum":" 1371","line":"}"},
{"lineNum":" 1372","line":""},
{"lineNum":" 1373","line":"#if defined(SYCL_DEVICE_ONLY)"},
{"lineNum":" 1374","line":"SYCL_SPECIALIZE_FLOATING_TYPES_BINARY(pow, pow)"},
{"lineNum":" 1375","line":"#endif"},
{"lineNum":" 1376","line":""},
{"lineNum":" 1377","line":"template<typename T> EIGEN_DEVICE_FUNC bool (isnan)   (const T &x) { return internal::isnan_impl(x); }"},
{"lineNum":" 1378","line":"template<typename T> EIGEN_DEVICE_FUNC bool (isinf)   (const T &x) { return internal::isinf_impl(x); }"},
{"lineNum":" 1379","line":"template<typename T> EIGEN_DEVICE_FUNC bool (isfinite)(const T &x) { return internal::isfinite_impl(x); }"},
{"lineNum":" 1380","line":""},
{"lineNum":" 1381","line":"#if defined(SYCL_DEVICE_ONLY)"},
{"lineNum":" 1382","line":"SYCL_SPECIALIZE_FLOATING_TYPES_UNARY_FUNC_RET_TYPE(isnan, isnan, bool)"},
{"lineNum":" 1383","line":"SYCL_SPECIALIZE_FLOATING_TYPES_UNARY_FUNC_RET_TYPE(isinf, isinf, bool)"},
{"lineNum":" 1384","line":"SYCL_SPECIALIZE_FLOATING_TYPES_UNARY_FUNC_RET_TYPE(isfinite, isfinite, bool)"},
{"lineNum":" 1385","line":"#endif"},
{"lineNum":" 1386","line":""},
{"lineNum":" 1387","line":"template<typename Scalar>"},
{"lineNum":" 1388","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":" 1389","line":"inline EIGEN_MATHFUNC_RETVAL(rint, Scalar) rint(const Scalar& x)"},
{"lineNum":" 1390","line":"{"},
{"lineNum":" 1391","line":"  return EIGEN_MATHFUNC_IMPL(rint, Scalar)::run(x);"},
{"lineNum":" 1392","line":"}"},
{"lineNum":" 1393","line":""},
{"lineNum":" 1394","line":"template<typename Scalar>"},
{"lineNum":" 1395","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":" 1396","line":"inline EIGEN_MATHFUNC_RETVAL(round, Scalar) round(const Scalar& x)"},
{"lineNum":" 1397","line":"{"},
{"lineNum":" 1398","line":"  return EIGEN_MATHFUNC_IMPL(round, Scalar)::run(x);"},
{"lineNum":" 1399","line":"}"},
{"lineNum":" 1400","line":""},
{"lineNum":" 1401","line":"#if defined(SYCL_DEVICE_ONLY)"},
{"lineNum":" 1402","line":"SYCL_SPECIALIZE_FLOATING_TYPES_UNARY(round, round)"},
{"lineNum":" 1403","line":"#endif"},
{"lineNum":" 1404","line":""},
{"lineNum":" 1405","line":"template<typename T>"},
{"lineNum":" 1406","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":" 1407","line":"T (floor)(const T& x)"},
{"lineNum":" 1408","line":"{"},
{"lineNum":" 1409","line":"  EIGEN_USING_STD(floor)"},
{"lineNum":" 1410","line":"  return floor(x);"},
{"lineNum":" 1411","line":"}"},
{"lineNum":" 1412","line":""},
{"lineNum":" 1413","line":"#if defined(SYCL_DEVICE_ONLY)"},
{"lineNum":" 1414","line":"SYCL_SPECIALIZE_FLOATING_TYPES_UNARY(floor, floor)"},
{"lineNum":" 1415","line":"#endif"},
{"lineNum":" 1416","line":""},
{"lineNum":" 1417","line":"#if defined(EIGEN_GPUCC)"},
{"lineNum":" 1418","line":"template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1419","line":"float floor(const float &x) { return ::floorf(x); }"},
{"lineNum":" 1420","line":""},
{"lineNum":" 1421","line":"template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1422","line":"double floor(const double &x) { return ::floor(x); }"},
{"lineNum":" 1423","line":"#endif"},
{"lineNum":" 1424","line":""},
{"lineNum":" 1425","line":"template<typename T>"},
{"lineNum":" 1426","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":" 1427","line":"T (ceil)(const T& x)"},
{"lineNum":" 1428","line":"{"},
{"lineNum":" 1429","line":"  EIGEN_USING_STD(ceil);"},
{"lineNum":" 1430","line":"  return ceil(x);"},
{"lineNum":" 1431","line":"}"},
{"lineNum":" 1432","line":""},
{"lineNum":" 1433","line":"#if defined(SYCL_DEVICE_ONLY)"},
{"lineNum":" 1434","line":"SYCL_SPECIALIZE_FLOATING_TYPES_UNARY(ceil, ceil)"},
{"lineNum":" 1435","line":"#endif"},
{"lineNum":" 1436","line":""},
{"lineNum":" 1437","line":"#if defined(EIGEN_GPUCC)"},
{"lineNum":" 1438","line":"template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1439","line":"float ceil(const float &x) { return ::ceilf(x); }"},
{"lineNum":" 1440","line":""},
{"lineNum":" 1441","line":"template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1442","line":"double ceil(const double &x) { return ::ceil(x); }"},
{"lineNum":" 1443","line":"#endif"},
{"lineNum":" 1444","line":""},
{"lineNum":" 1445","line":""},
{"lineNum":" 1446","line":"/** Log base 2 for 32 bits positive integers."},
{"lineNum":" 1447","line":"  * Conveniently returns 0 for x==0. */"},
{"lineNum":" 1448","line":"inline int log2(int x)"},
{"lineNum":" 1449","line":"{"},
{"lineNum":" 1450","line":"  eigen_assert(x>=0);"},
{"lineNum":" 1451","line":"  unsigned int v(x);"},
{"lineNum":" 1452","line":"  static const int table[32] = { 0, 9, 1, 10, 13, 21, 2, 29, 11, 14, 16, 18, 22, 25, 3, 30, 8, 12, 20, 28, 15, 17, 24, 7, 19, 27, 23, 6, 26, 5, 4, 31 };"},
{"lineNum":" 1453","line":"  v |= v >> 1;"},
{"lineNum":" 1454","line":"  v |= v >> 2;"},
{"lineNum":" 1455","line":"  v |= v >> 4;"},
{"lineNum":" 1456","line":"  v |= v >> 8;"},
{"lineNum":" 1457","line":"  v |= v >> 16;"},
{"lineNum":" 1458","line":"  return table[(v * 0x07C4ACDDU) >> 27];"},
{"lineNum":" 1459","line":"}"},
{"lineNum":" 1460","line":""},
{"lineNum":" 1461","line":"/** \\returns the square root of \\a x."},
{"lineNum":" 1462","line":"  *"},
{"lineNum":" 1463","line":"  * It is essentially equivalent to"},
{"lineNum":" 1464","line":"  * \\code using std::sqrt; return sqrt(x); \\endcode"},
{"lineNum":" 1465","line":"  * but slightly faster for float/double and some compilers (e.g., gcc), thanks to"},
{"lineNum":" 1466","line":"  * specializations when SSE is enabled."},
{"lineNum":" 1467","line":"  *"},
{"lineNum":" 1468","line":"  * It\'s usage is justified in performance critical functions, like norm/normalize."},
{"lineNum":" 1469","line":"  */"},
{"lineNum":" 1470","line":"template<typename Scalar>"},
{"lineNum":" 1471","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":" 1472","line":"EIGEN_ALWAYS_INLINE EIGEN_MATHFUNC_RETVAL(sqrt, Scalar) sqrt(const Scalar& x)"},
{"lineNum":" 1473","line":"{"},
{"lineNum":" 1474","line":"  return EIGEN_MATHFUNC_IMPL(sqrt, Scalar)::run(x);"},
{"lineNum":" 1475","line":"}"},
{"lineNum":" 1476","line":""},
{"lineNum":" 1477","line":"// Boolean specialization, avoids implicit float to bool conversion (-Wimplicit-conversion-floating-point-to-bool)."},
{"lineNum":" 1478","line":"template<>"},
{"lineNum":" 1479","line":"EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS EIGEN_DEVICE_FUNC"},
{"lineNum":" 1480","line":"bool sqrt<bool>(const bool &x) { return x; }"},
{"lineNum":" 1481","line":""},
{"lineNum":" 1482","line":"#if defined(SYCL_DEVICE_ONLY)"},
{"lineNum":" 1483","line":"SYCL_SPECIALIZE_FLOATING_TYPES_UNARY(sqrt, sqrt)"},
{"lineNum":" 1484","line":"#endif"},
{"lineNum":" 1485","line":""},
{"lineNum":" 1486","line":"/** \\returns the reciprocal square root of \\a x. **/"},
{"lineNum":" 1487","line":"template<typename T>"},
{"lineNum":" 1488","line":"EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1489","line":"T rsqrt(const T& x)"},
{"lineNum":" 1490","line":"{"},
{"lineNum":" 1491","line":"  return internal::rsqrt_impl<T>::run(x);"},
{"lineNum":" 1492","line":"}"},
{"lineNum":" 1493","line":""},
{"lineNum":" 1494","line":"template<typename T>"},
{"lineNum":" 1495","line":"EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1496","line":"T log(const T &x) {"},
{"lineNum":" 1497","line":"  return internal::log_impl<T>::run(x);"},
{"lineNum":" 1498","line":"}"},
{"lineNum":" 1499","line":""},
{"lineNum":" 1500","line":"#if defined(SYCL_DEVICE_ONLY)"},
{"lineNum":" 1501","line":"SYCL_SPECIALIZE_FLOATING_TYPES_UNARY(log, log)"},
{"lineNum":" 1502","line":"#endif"},
{"lineNum":" 1503","line":""},
{"lineNum":" 1504","line":""},
{"lineNum":" 1505","line":"#if defined(EIGEN_GPUCC)"},
{"lineNum":" 1506","line":"template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1507","line":"float log(const float &x) { return ::logf(x); }"},
{"lineNum":" 1508","line":""},
{"lineNum":" 1509","line":"template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1510","line":"double log(const double &x) { return ::log(x); }"},
{"lineNum":" 1511","line":"#endif"},
{"lineNum":" 1512","line":""},
{"lineNum":" 1513","line":"template<typename T>"},
{"lineNum":" 1514","line":"EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1515","line":"typename internal::enable_if<NumTraits<T>::IsSigned || NumTraits<T>::IsComplex,typename NumTraits<T>::Real>::type"},
{"lineNum":" 1516","line":"abs(const T &x) {"},
{"lineNum":" 1517","line":"  EIGEN_USING_STD(abs);"},
{"lineNum":" 1518","line":"  return abs(x);","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1519","line":"}"},
{"lineNum":" 1520","line":""},
{"lineNum":" 1521","line":"template<typename T>"},
{"lineNum":" 1522","line":"EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1523","line":"typename internal::enable_if<!(NumTraits<T>::IsSigned || NumTraits<T>::IsComplex),typename NumTraits<T>::Real>::type"},
{"lineNum":" 1524","line":"abs(const T &x) {"},
{"lineNum":" 1525","line":"  return x;"},
{"lineNum":" 1526","line":"}"},
{"lineNum":" 1527","line":""},
{"lineNum":" 1528","line":"#if defined(SYCL_DEVICE_ONLY)"},
{"lineNum":" 1529","line":"SYCL_SPECIALIZE_INTEGER_TYPES_UNARY(abs, abs)"},
{"lineNum":" 1530","line":"SYCL_SPECIALIZE_FLOATING_TYPES_UNARY(abs, fabs)"},
{"lineNum":" 1531","line":"#endif"},
{"lineNum":" 1532","line":""},
{"lineNum":" 1533","line":"#if defined(EIGEN_GPUCC)"},
{"lineNum":" 1534","line":"template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1535","line":"float abs(const float &x) { return ::fabsf(x); }"},
{"lineNum":" 1536","line":""},
{"lineNum":" 1537","line":"template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1538","line":"double abs(const double &x) { return ::fabs(x); }"},
{"lineNum":" 1539","line":""},
{"lineNum":" 1540","line":"template <> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1541","line":"float abs(const std::complex<float>& x) {"},
{"lineNum":" 1542","line":"  return ::hypotf(x.real(), x.imag());"},
{"lineNum":" 1543","line":"}"},
{"lineNum":" 1544","line":""},
{"lineNum":" 1545","line":"template <> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1546","line":"double abs(const std::complex<double>& x) {"},
{"lineNum":" 1547","line":"  return ::hypot(x.real(), x.imag());"},
{"lineNum":" 1548","line":"}"},
{"lineNum":" 1549","line":"#endif"},
{"lineNum":" 1550","line":""},
{"lineNum":" 1551","line":"template<typename T>"},
{"lineNum":" 1552","line":"EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1553","line":"T exp(const T &x) {"},
{"lineNum":" 1554","line":"  EIGEN_USING_STD(exp);"},
{"lineNum":" 1555","line":"  return exp(x);"},
{"lineNum":" 1556","line":"}"},
{"lineNum":" 1557","line":""},
{"lineNum":" 1558","line":"#if defined(SYCL_DEVICE_ONLY)"},
{"lineNum":" 1559","line":"SYCL_SPECIALIZE_FLOATING_TYPES_UNARY(exp, exp)"},
{"lineNum":" 1560","line":"#endif"},
{"lineNum":" 1561","line":""},
{"lineNum":" 1562","line":"#if defined(EIGEN_GPUCC)"},
{"lineNum":" 1563","line":"template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1564","line":"float exp(const float &x) { return ::expf(x); }"},
{"lineNum":" 1565","line":""},
{"lineNum":" 1566","line":"template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1567","line":"double exp(const double &x) { return ::exp(x); }"},
{"lineNum":" 1568","line":""},
{"lineNum":" 1569","line":"template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1570","line":"std::complex<float> exp(const std::complex<float>& x) {"},
{"lineNum":" 1571","line":"  float com = ::expf(x.real());"},
{"lineNum":" 1572","line":"  float res_real = com * ::cosf(x.imag());"},
{"lineNum":" 1573","line":"  float res_imag = com * ::sinf(x.imag());"},
{"lineNum":" 1574","line":"  return std::complex<float>(res_real, res_imag);"},
{"lineNum":" 1575","line":"}"},
{"lineNum":" 1576","line":""},
{"lineNum":" 1577","line":"template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1578","line":"std::complex<double> exp(const std::complex<double>& x) {"},
{"lineNum":" 1579","line":"  double com = ::exp(x.real());"},
{"lineNum":" 1580","line":"  double res_real = com * ::cos(x.imag());"},
{"lineNum":" 1581","line":"  double res_imag = com * ::sin(x.imag());"},
{"lineNum":" 1582","line":"  return std::complex<double>(res_real, res_imag);"},
{"lineNum":" 1583","line":"}"},
{"lineNum":" 1584","line":"#endif"},
{"lineNum":" 1585","line":""},
{"lineNum":" 1586","line":"template<typename Scalar>"},
{"lineNum":" 1587","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":" 1588","line":"inline EIGEN_MATHFUNC_RETVAL(expm1, Scalar) expm1(const Scalar& x)"},
{"lineNum":" 1589","line":"{"},
{"lineNum":" 1590","line":"  return EIGEN_MATHFUNC_IMPL(expm1, Scalar)::run(x);"},
{"lineNum":" 1591","line":"}"},
{"lineNum":" 1592","line":""},
{"lineNum":" 1593","line":"#if defined(SYCL_DEVICE_ONLY)"},
{"lineNum":" 1594","line":"SYCL_SPECIALIZE_FLOATING_TYPES_UNARY(expm1, expm1)"},
{"lineNum":" 1595","line":"#endif"},
{"lineNum":" 1596","line":""},
{"lineNum":" 1597","line":"#if defined(EIGEN_GPUCC)"},
{"lineNum":" 1598","line":"template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1599","line":"float expm1(const float &x) { return ::expm1f(x); }"},
{"lineNum":" 1600","line":""},
{"lineNum":" 1601","line":"template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1602","line":"double expm1(const double &x) { return ::expm1(x); }"},
{"lineNum":" 1603","line":"#endif"},
{"lineNum":" 1604","line":""},
{"lineNum":" 1605","line":"template<typename T>"},
{"lineNum":" 1606","line":"EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1607","line":"T cos(const T &x) {"},
{"lineNum":" 1608","line":"  EIGEN_USING_STD(cos);"},
{"lineNum":" 1609","line":"  return cos(x);"},
{"lineNum":" 1610","line":"}"},
{"lineNum":" 1611","line":""},
{"lineNum":" 1612","line":"#if defined(SYCL_DEVICE_ONLY)"},
{"lineNum":" 1613","line":"SYCL_SPECIALIZE_FLOATING_TYPES_UNARY(cos,cos)"},
{"lineNum":" 1614","line":"#endif"},
{"lineNum":" 1615","line":""},
{"lineNum":" 1616","line":"#if defined(EIGEN_GPUCC)"},
{"lineNum":" 1617","line":"template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1618","line":"float cos(const float &x) { return ::cosf(x); }"},
{"lineNum":" 1619","line":""},
{"lineNum":" 1620","line":"template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1621","line":"double cos(const double &x) { return ::cos(x); }"},
{"lineNum":" 1622","line":"#endif"},
{"lineNum":" 1623","line":""},
{"lineNum":" 1624","line":"template<typename T>"},
{"lineNum":" 1625","line":"EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1626","line":"T sin(const T &x) {"},
{"lineNum":" 1627","line":"  EIGEN_USING_STD(sin);"},
{"lineNum":" 1628","line":"  return sin(x);"},
{"lineNum":" 1629","line":"}"},
{"lineNum":" 1630","line":""},
{"lineNum":" 1631","line":"#if defined(SYCL_DEVICE_ONLY)"},
{"lineNum":" 1632","line":"SYCL_SPECIALIZE_FLOATING_TYPES_UNARY(sin, sin)"},
{"lineNum":" 1633","line":"#endif"},
{"lineNum":" 1634","line":""},
{"lineNum":" 1635","line":"#if defined(EIGEN_GPUCC)"},
{"lineNum":" 1636","line":"template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1637","line":"float sin(const float &x) { return ::sinf(x); }"},
{"lineNum":" 1638","line":""},
{"lineNum":" 1639","line":"template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1640","line":"double sin(const double &x) { return ::sin(x); }"},
{"lineNum":" 1641","line":"#endif"},
{"lineNum":" 1642","line":""},
{"lineNum":" 1643","line":"template<typename T>"},
{"lineNum":" 1644","line":"EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1645","line":"T tan(const T &x) {"},
{"lineNum":" 1646","line":"  EIGEN_USING_STD(tan);"},
{"lineNum":" 1647","line":"  return tan(x);"},
{"lineNum":" 1648","line":"}"},
{"lineNum":" 1649","line":""},
{"lineNum":" 1650","line":"#if defined(SYCL_DEVICE_ONLY)"},
{"lineNum":" 1651","line":"SYCL_SPECIALIZE_FLOATING_TYPES_UNARY(tan, tan)"},
{"lineNum":" 1652","line":"#endif"},
{"lineNum":" 1653","line":""},
{"lineNum":" 1654","line":"#if defined(EIGEN_GPUCC)"},
{"lineNum":" 1655","line":"template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1656","line":"float tan(const float &x) { return ::tanf(x); }"},
{"lineNum":" 1657","line":""},
{"lineNum":" 1658","line":"template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1659","line":"double tan(const double &x) { return ::tan(x); }"},
{"lineNum":" 1660","line":"#endif"},
{"lineNum":" 1661","line":""},
{"lineNum":" 1662","line":"template<typename T>"},
{"lineNum":" 1663","line":"EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1664","line":"T acos(const T &x) {"},
{"lineNum":" 1665","line":"  EIGEN_USING_STD(acos);"},
{"lineNum":" 1666","line":"  return acos(x);"},
{"lineNum":" 1667","line":"}"},
{"lineNum":" 1668","line":""},
{"lineNum":" 1669","line":"#if EIGEN_HAS_CXX11_MATH"},
{"lineNum":" 1670","line":"template<typename T>"},
{"lineNum":" 1671","line":"EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1672","line":"T acosh(const T &x) {"},
{"lineNum":" 1673","line":"  EIGEN_USING_STD(acosh);"},
{"lineNum":" 1674","line":"  return static_cast<T>(acosh(x));"},
{"lineNum":" 1675","line":"}"},
{"lineNum":" 1676","line":"#endif"},
{"lineNum":" 1677","line":""},
{"lineNum":" 1678","line":"#if defined(SYCL_DEVICE_ONLY)"},
{"lineNum":" 1679","line":"SYCL_SPECIALIZE_FLOATING_TYPES_UNARY(acos, acos)"},
{"lineNum":" 1680","line":"SYCL_SPECIALIZE_FLOATING_TYPES_UNARY(acosh, acosh)"},
{"lineNum":" 1681","line":"#endif"},
{"lineNum":" 1682","line":""},
{"lineNum":" 1683","line":"#if defined(EIGEN_GPUCC)"},
{"lineNum":" 1684","line":"template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1685","line":"float acos(const float &x) { return ::acosf(x); }"},
{"lineNum":" 1686","line":""},
{"lineNum":" 1687","line":"template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1688","line":"double acos(const double &x) { return ::acos(x); }"},
{"lineNum":" 1689","line":"#endif"},
{"lineNum":" 1690","line":""},
{"lineNum":" 1691","line":"template<typename T>"},
{"lineNum":" 1692","line":"EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1693","line":"T asin(const T &x) {"},
{"lineNum":" 1694","line":"  EIGEN_USING_STD(asin);"},
{"lineNum":" 1695","line":"  return asin(x);"},
{"lineNum":" 1696","line":"}"},
{"lineNum":" 1697","line":""},
{"lineNum":" 1698","line":"#if EIGEN_HAS_CXX11_MATH"},
{"lineNum":" 1699","line":"template<typename T>"},
{"lineNum":" 1700","line":"EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1701","line":"T asinh(const T &x) {"},
{"lineNum":" 1702","line":"  EIGEN_USING_STD(asinh);"},
{"lineNum":" 1703","line":"  return static_cast<T>(asinh(x));"},
{"lineNum":" 1704","line":"}"},
{"lineNum":" 1705","line":"#endif"},
{"lineNum":" 1706","line":""},
{"lineNum":" 1707","line":"#if defined(SYCL_DEVICE_ONLY)"},
{"lineNum":" 1708","line":"SYCL_SPECIALIZE_FLOATING_TYPES_UNARY(asin, asin)"},
{"lineNum":" 1709","line":"SYCL_SPECIALIZE_FLOATING_TYPES_UNARY(asinh, asinh)"},
{"lineNum":" 1710","line":"#endif"},
{"lineNum":" 1711","line":""},
{"lineNum":" 1712","line":"#if defined(EIGEN_GPUCC)"},
{"lineNum":" 1713","line":"template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1714","line":"float asin(const float &x) { return ::asinf(x); }"},
{"lineNum":" 1715","line":""},
{"lineNum":" 1716","line":"template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1717","line":"double asin(const double &x) { return ::asin(x); }"},
{"lineNum":" 1718","line":"#endif"},
{"lineNum":" 1719","line":""},
{"lineNum":" 1720","line":"template<typename T>"},
{"lineNum":" 1721","line":"EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1722","line":"T atan(const T &x) {"},
{"lineNum":" 1723","line":"  EIGEN_USING_STD(atan);"},
{"lineNum":" 1724","line":"  return static_cast<T>(atan(x));"},
{"lineNum":" 1725","line":"}"},
{"lineNum":" 1726","line":""},
{"lineNum":" 1727","line":"#if EIGEN_HAS_CXX11_MATH"},
{"lineNum":" 1728","line":"template<typename T>"},
{"lineNum":" 1729","line":"EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1730","line":"T atanh(const T &x) {"},
{"lineNum":" 1731","line":"  EIGEN_USING_STD(atanh);"},
{"lineNum":" 1732","line":"  return static_cast<T>(atanh(x));"},
{"lineNum":" 1733","line":"}"},
{"lineNum":" 1734","line":"#endif"},
{"lineNum":" 1735","line":""},
{"lineNum":" 1736","line":"#if defined(SYCL_DEVICE_ONLY)"},
{"lineNum":" 1737","line":"SYCL_SPECIALIZE_FLOATING_TYPES_UNARY(atan, atan)"},
{"lineNum":" 1738","line":"SYCL_SPECIALIZE_FLOATING_TYPES_UNARY(atanh, atanh)"},
{"lineNum":" 1739","line":"#endif"},
{"lineNum":" 1740","line":""},
{"lineNum":" 1741","line":"#if defined(EIGEN_GPUCC)"},
{"lineNum":" 1742","line":"template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1743","line":"float atan(const float &x) { return ::atanf(x); }"},
{"lineNum":" 1744","line":""},
{"lineNum":" 1745","line":"template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1746","line":"double atan(const double &x) { return ::atan(x); }"},
{"lineNum":" 1747","line":"#endif"},
{"lineNum":" 1748","line":""},
{"lineNum":" 1749","line":""},
{"lineNum":" 1750","line":"template<typename T>"},
{"lineNum":" 1751","line":"EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1752","line":"T cosh(const T &x) {"},
{"lineNum":" 1753","line":"  EIGEN_USING_STD(cosh);"},
{"lineNum":" 1754","line":"  return static_cast<T>(cosh(x));"},
{"lineNum":" 1755","line":"}"},
{"lineNum":" 1756","line":""},
{"lineNum":" 1757","line":"#if defined(SYCL_DEVICE_ONLY)"},
{"lineNum":" 1758","line":"SYCL_SPECIALIZE_FLOATING_TYPES_UNARY(cosh, cosh)"},
{"lineNum":" 1759","line":"#endif"},
{"lineNum":" 1760","line":""},
{"lineNum":" 1761","line":"#if defined(EIGEN_GPUCC)"},
{"lineNum":" 1762","line":"template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1763","line":"float cosh(const float &x) { return ::coshf(x); }"},
{"lineNum":" 1764","line":""},
{"lineNum":" 1765","line":"template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1766","line":"double cosh(const double &x) { return ::cosh(x); }"},
{"lineNum":" 1767","line":"#endif"},
{"lineNum":" 1768","line":""},
{"lineNum":" 1769","line":"template<typename T>"},
{"lineNum":" 1770","line":"EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1771","line":"T sinh(const T &x) {"},
{"lineNum":" 1772","line":"  EIGEN_USING_STD(sinh);"},
{"lineNum":" 1773","line":"  return static_cast<T>(sinh(x));"},
{"lineNum":" 1774","line":"}"},
{"lineNum":" 1775","line":""},
{"lineNum":" 1776","line":"#if defined(SYCL_DEVICE_ONLY)"},
{"lineNum":" 1777","line":"SYCL_SPECIALIZE_FLOATING_TYPES_UNARY(sinh, sinh)"},
{"lineNum":" 1778","line":"#endif"},
{"lineNum":" 1779","line":""},
{"lineNum":" 1780","line":"#if defined(EIGEN_GPUCC)"},
{"lineNum":" 1781","line":"template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1782","line":"float sinh(const float &x) { return ::sinhf(x); }"},
{"lineNum":" 1783","line":""},
{"lineNum":" 1784","line":"template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1785","line":"double sinh(const double &x) { return ::sinh(x); }"},
{"lineNum":" 1786","line":"#endif"},
{"lineNum":" 1787","line":""},
{"lineNum":" 1788","line":"template<typename T>"},
{"lineNum":" 1789","line":"EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1790","line":"T tanh(const T &x) {"},
{"lineNum":" 1791","line":"  EIGEN_USING_STD(tanh);"},
{"lineNum":" 1792","line":"  return tanh(x);"},
{"lineNum":" 1793","line":"}"},
{"lineNum":" 1794","line":""},
{"lineNum":" 1795","line":"#if (!defined(EIGEN_GPUCC)) && EIGEN_FAST_MATH && !defined(SYCL_DEVICE_ONLY)"},
{"lineNum":" 1796","line":"EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1797","line":"float tanh(float x) { return internal::generic_fast_tanh_float(x); }"},
{"lineNum":" 1798","line":"#endif"},
{"lineNum":" 1799","line":""},
{"lineNum":" 1800","line":"#if defined(SYCL_DEVICE_ONLY)"},
{"lineNum":" 1801","line":"SYCL_SPECIALIZE_FLOATING_TYPES_UNARY(tanh, tanh)"},
{"lineNum":" 1802","line":"#endif"},
{"lineNum":" 1803","line":""},
{"lineNum":" 1804","line":"#if defined(EIGEN_GPUCC)"},
{"lineNum":" 1805","line":"template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1806","line":"float tanh(const float &x) { return ::tanhf(x); }"},
{"lineNum":" 1807","line":""},
{"lineNum":" 1808","line":"template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1809","line":"double tanh(const double &x) { return ::tanh(x); }"},
{"lineNum":" 1810","line":"#endif"},
{"lineNum":" 1811","line":""},
{"lineNum":" 1812","line":"template <typename T>"},
{"lineNum":" 1813","line":"EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1814","line":"T fmod(const T& a, const T& b) {"},
{"lineNum":" 1815","line":"  EIGEN_USING_STD(fmod);"},
{"lineNum":" 1816","line":"  return fmod(a, b);"},
{"lineNum":" 1817","line":"}"},
{"lineNum":" 1818","line":""},
{"lineNum":" 1819","line":"#if defined(SYCL_DEVICE_ONLY)"},
{"lineNum":" 1820","line":"SYCL_SPECIALIZE_FLOATING_TYPES_BINARY(fmod, fmod)"},
{"lineNum":" 1821","line":"#endif"},
{"lineNum":" 1822","line":""},
{"lineNum":" 1823","line":"#if defined(EIGEN_GPUCC)"},
{"lineNum":" 1824","line":"template <>"},
{"lineNum":" 1825","line":"EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1826","line":"float fmod(const float& a, const float& b) {"},
{"lineNum":" 1827","line":"  return ::fmodf(a, b);"},
{"lineNum":" 1828","line":"}"},
{"lineNum":" 1829","line":""},
{"lineNum":" 1830","line":"template <>"},
{"lineNum":" 1831","line":"EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE"},
{"lineNum":" 1832","line":"double fmod(const double& a, const double& b) {"},
{"lineNum":" 1833","line":"  return ::fmod(a, b);"},
{"lineNum":" 1834","line":"}"},
{"lineNum":" 1835","line":"#endif"},
{"lineNum":" 1836","line":""},
{"lineNum":" 1837","line":"#if defined(SYCL_DEVICE_ONLY)"},
{"lineNum":" 1838","line":"#undef SYCL_SPECIALIZE_SIGNED_INTEGER_TYPES_BINARY"},
{"lineNum":" 1839","line":"#undef SYCL_SPECIALIZE_SIGNED_INTEGER_TYPES_UNARY"},
{"lineNum":" 1840","line":"#undef SYCL_SPECIALIZE_UNSIGNED_INTEGER_TYPES_BINARY"},
{"lineNum":" 1841","line":"#undef SYCL_SPECIALIZE_UNSIGNED_INTEGER_TYPES_UNARY"},
{"lineNum":" 1842","line":"#undef SYCL_SPECIALIZE_INTEGER_TYPES_BINARY"},
{"lineNum":" 1843","line":"#undef SYCL_SPECIALIZE_UNSIGNED_INTEGER_TYPES_UNARY"},
{"lineNum":" 1844","line":"#undef SYCL_SPECIALIZE_FLOATING_TYPES_BINARY"},
{"lineNum":" 1845","line":"#undef SYCL_SPECIALIZE_FLOATING_TYPES_UNARY"},
{"lineNum":" 1846","line":"#undef SYCL_SPECIALIZE_FLOATING_TYPES_UNARY_FUNC_RET_TYPE"},
{"lineNum":" 1847","line":"#undef SYCL_SPECIALIZE_GEN_UNARY_FUNC"},
{"lineNum":" 1848","line":"#undef SYCL_SPECIALIZE_UNARY_FUNC"},
{"lineNum":" 1849","line":"#undef SYCL_SPECIALIZE_GEN1_BINARY_FUNC"},
{"lineNum":" 1850","line":"#undef SYCL_SPECIALIZE_GEN2_BINARY_FUNC"},
{"lineNum":" 1851","line":"#undef SYCL_SPECIALIZE_BINARY_FUNC"},
{"lineNum":" 1852","line":"#endif"},
{"lineNum":" 1853","line":""},
{"lineNum":" 1854","line":"} // end namespace numext"},
{"lineNum":" 1855","line":""},
{"lineNum":" 1856","line":"namespace internal {"},
{"lineNum":" 1857","line":""},
{"lineNum":" 1858","line":"template<typename T>"},
{"lineNum":" 1859","line":"EIGEN_DEVICE_FUNC bool isfinite_impl(const std::complex<T>& x)"},
{"lineNum":" 1860","line":"{"},
{"lineNum":" 1861","line":"  return (numext::isfinite)(numext::real(x)) && (numext::isfinite)(numext::imag(x));"},
{"lineNum":" 1862","line":"}"},
{"lineNum":" 1863","line":""},
{"lineNum":" 1864","line":"template<typename T>"},
{"lineNum":" 1865","line":"EIGEN_DEVICE_FUNC bool isnan_impl(const std::complex<T>& x)"},
{"lineNum":" 1866","line":"{"},
{"lineNum":" 1867","line":"  return (numext::isnan)(numext::real(x)) || (numext::isnan)(numext::imag(x));"},
{"lineNum":" 1868","line":"}"},
{"lineNum":" 1869","line":""},
{"lineNum":" 1870","line":"template<typename T>"},
{"lineNum":" 1871","line":"EIGEN_DEVICE_FUNC bool isinf_impl(const std::complex<T>& x)"},
{"lineNum":" 1872","line":"{"},
{"lineNum":" 1873","line":"  return ((numext::isinf)(numext::real(x)) || (numext::isinf)(numext::imag(x))) && (!(numext::isnan)(x));"},
{"lineNum":" 1874","line":"}"},
{"lineNum":" 1875","line":""},
{"lineNum":" 1876","line":"/****************************************************************************"},
{"lineNum":" 1877","line":"* Implementation of fuzzy comparisons                                       *"},
{"lineNum":" 1878","line":"****************************************************************************/"},
{"lineNum":" 1879","line":""},
{"lineNum":" 1880","line":"template<typename Scalar,"},
{"lineNum":" 1881","line":"         bool IsComplex,"},
{"lineNum":" 1882","line":"         bool IsInteger>"},
{"lineNum":" 1883","line":"struct scalar_fuzzy_default_impl {};"},
{"lineNum":" 1884","line":""},
{"lineNum":" 1885","line":"template<typename Scalar>"},
{"lineNum":" 1886","line":"struct scalar_fuzzy_default_impl<Scalar, false, false>"},
{"lineNum":" 1887","line":"{"},
{"lineNum":" 1888","line":"  typedef typename NumTraits<Scalar>::Real RealScalar;"},
{"lineNum":" 1889","line":"  template<typename OtherScalar> EIGEN_DEVICE_FUNC"},
{"lineNum":" 1890","line":"  static inline bool isMuchSmallerThan(const Scalar& x, const OtherScalar& y, const RealScalar& prec)"},
{"lineNum":" 1891","line":"  {"},
{"lineNum":" 1892","line":"    return numext::abs(x) <= numext::abs(y) * prec;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1893","line":"  }"},
{"lineNum":" 1894","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":" 1895","line":"  static inline bool isApprox(const Scalar& x, const Scalar& y, const RealScalar& prec)"},
{"lineNum":" 1896","line":"  {"},
{"lineNum":" 1897","line":"    return numext::abs(x - y) <= numext::mini(numext::abs(x), numext::abs(y)) * prec;"},
{"lineNum":" 1898","line":"  }"},
{"lineNum":" 1899","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":" 1900","line":"  static inline bool isApproxOrLessThan(const Scalar& x, const Scalar& y, const RealScalar& prec)"},
{"lineNum":" 1901","line":"  {"},
{"lineNum":" 1902","line":"    return x <= y || isApprox(x, y, prec);"},
{"lineNum":" 1903","line":"  }"},
{"lineNum":" 1904","line":"};"},
{"lineNum":" 1905","line":""},
{"lineNum":" 1906","line":"template<typename Scalar>"},
{"lineNum":" 1907","line":"struct scalar_fuzzy_default_impl<Scalar, false, true>"},
{"lineNum":" 1908","line":"{"},
{"lineNum":" 1909","line":"  typedef typename NumTraits<Scalar>::Real RealScalar;"},
{"lineNum":" 1910","line":"  template<typename OtherScalar> EIGEN_DEVICE_FUNC"},
{"lineNum":" 1911","line":"  static inline bool isMuchSmallerThan(const Scalar& x, const Scalar&, const RealScalar&)"},
{"lineNum":" 1912","line":"  {"},
{"lineNum":" 1913","line":"    return x == Scalar(0);"},
{"lineNum":" 1914","line":"  }"},
{"lineNum":" 1915","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":" 1916","line":"  static inline bool isApprox(const Scalar& x, const Scalar& y, const RealScalar&)"},
{"lineNum":" 1917","line":"  {"},
{"lineNum":" 1918","line":"    return x == y;"},
{"lineNum":" 1919","line":"  }"},
{"lineNum":" 1920","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":" 1921","line":"  static inline bool isApproxOrLessThan(const Scalar& x, const Scalar& y, const RealScalar&)"},
{"lineNum":" 1922","line":"  {"},
{"lineNum":" 1923","line":"    return x <= y;"},
{"lineNum":" 1924","line":"  }"},
{"lineNum":" 1925","line":"};"},
{"lineNum":" 1926","line":""},
{"lineNum":" 1927","line":"template<typename Scalar>"},
{"lineNum":" 1928","line":"struct scalar_fuzzy_default_impl<Scalar, true, false>"},
{"lineNum":" 1929","line":"{"},
{"lineNum":" 1930","line":"  typedef typename NumTraits<Scalar>::Real RealScalar;"},
{"lineNum":" 1931","line":"  template<typename OtherScalar> EIGEN_DEVICE_FUNC"},
{"lineNum":" 1932","line":"  static inline bool isMuchSmallerThan(const Scalar& x, const OtherScalar& y, const RealScalar& prec)"},
{"lineNum":" 1933","line":"  {"},
{"lineNum":" 1934","line":"    return numext::abs2(x) <= numext::abs2(y) * prec * prec;"},
{"lineNum":" 1935","line":"  }"},
{"lineNum":" 1936","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":" 1937","line":"  static inline bool isApprox(const Scalar& x, const Scalar& y, const RealScalar& prec)"},
{"lineNum":" 1938","line":"  {"},
{"lineNum":" 1939","line":"    return numext::abs2(x - y) <= numext::mini(numext::abs2(x), numext::abs2(y)) * prec * prec;"},
{"lineNum":" 1940","line":"  }"},
{"lineNum":" 1941","line":"};"},
{"lineNum":" 1942","line":""},
{"lineNum":" 1943","line":"template<typename Scalar>"},
{"lineNum":" 1944","line":"struct scalar_fuzzy_impl : scalar_fuzzy_default_impl<Scalar, NumTraits<Scalar>::IsComplex, NumTraits<Scalar>::IsInteger> {};"},
{"lineNum":" 1945","line":""},
{"lineNum":" 1946","line":"template<typename Scalar, typename OtherScalar> EIGEN_DEVICE_FUNC"},
{"lineNum":" 1947","line":"inline bool isMuchSmallerThan(const Scalar& x, const OtherScalar& y,"},
{"lineNum":" 1948","line":"                              const typename NumTraits<Scalar>::Real &precision = NumTraits<Scalar>::dummy_precision())"},
{"lineNum":" 1949","line":"{"},
{"lineNum":" 1950","line":"  return scalar_fuzzy_impl<Scalar>::template isMuchSmallerThan<OtherScalar>(x, y, precision);"},
{"lineNum":" 1951","line":"}"},
{"lineNum":" 1952","line":""},
{"lineNum":" 1953","line":"template<typename Scalar> EIGEN_DEVICE_FUNC"},
{"lineNum":" 1954","line":"inline bool isApprox(const Scalar& x, const Scalar& y,"},
{"lineNum":" 1955","line":"                     const typename NumTraits<Scalar>::Real &precision = NumTraits<Scalar>::dummy_precision())"},
{"lineNum":" 1956","line":"{"},
{"lineNum":" 1957","line":"  return scalar_fuzzy_impl<Scalar>::isApprox(x, y, precision);"},
{"lineNum":" 1958","line":"}"},
{"lineNum":" 1959","line":""},
{"lineNum":" 1960","line":"template<typename Scalar> EIGEN_DEVICE_FUNC"},
{"lineNum":" 1961","line":"inline bool isApproxOrLessThan(const Scalar& x, const Scalar& y,"},
{"lineNum":" 1962","line":"                               const typename NumTraits<Scalar>::Real &precision = NumTraits<Scalar>::dummy_precision())"},
{"lineNum":" 1963","line":"{"},
{"lineNum":" 1964","line":"  return scalar_fuzzy_impl<Scalar>::isApproxOrLessThan(x, y, precision);"},
{"lineNum":" 1965","line":"}"},
{"lineNum":" 1966","line":""},
{"lineNum":" 1967","line":"/******************************************"},
{"lineNum":" 1968","line":"***  The special case of the  bool type ***"},
{"lineNum":" 1969","line":"******************************************/"},
{"lineNum":" 1970","line":""},
{"lineNum":" 1971","line":"template<> struct random_impl<bool>"},
{"lineNum":" 1972","line":"{"},
{"lineNum":" 1973","line":"  static inline bool run()"},
{"lineNum":" 1974","line":"  {"},
{"lineNum":" 1975","line":"    return random<int>(0,1)==0 ? false : true;"},
{"lineNum":" 1976","line":"  }"},
{"lineNum":" 1977","line":""},
{"lineNum":" 1978","line":"  static inline bool run(const bool& a, const bool& b)"},
{"lineNum":" 1979","line":"  {"},
{"lineNum":" 1980","line":"    return random<int>(a, b)==0 ? false : true;"},
{"lineNum":" 1981","line":"  }"},
{"lineNum":" 1982","line":"};"},
{"lineNum":" 1983","line":""},
{"lineNum":" 1984","line":"template<> struct scalar_fuzzy_impl<bool>"},
{"lineNum":" 1985","line":"{"},
{"lineNum":" 1986","line":"  typedef bool RealScalar;"},
{"lineNum":" 1987","line":""},
{"lineNum":" 1988","line":"  template<typename OtherScalar> EIGEN_DEVICE_FUNC"},
{"lineNum":" 1989","line":"  static inline bool isMuchSmallerThan(const bool& x, const bool&, const bool&)"},
{"lineNum":" 1990","line":"  {"},
{"lineNum":" 1991","line":"    return !x;"},
{"lineNum":" 1992","line":"  }"},
{"lineNum":" 1993","line":""},
{"lineNum":" 1994","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":" 1995","line":"  static inline bool isApprox(bool x, bool y, bool)"},
{"lineNum":" 1996","line":"  {"},
{"lineNum":" 1997","line":"    return x == y;"},
{"lineNum":" 1998","line":"  }"},
{"lineNum":" 1999","line":""},
{"lineNum":" 2000","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":" 2001","line":"  static inline bool isApproxOrLessThan(const bool& x, const bool& y, const bool&)"},
{"lineNum":" 2002","line":"  {"},
{"lineNum":" 2003","line":"    return (!x) || y;"},
{"lineNum":" 2004","line":"  }"},
{"lineNum":" 2005","line":""},
{"lineNum":" 2006","line":"};"},
{"lineNum":" 2007","line":""},
{"lineNum":" 2008","line":"} // end namespace internal"},
{"lineNum":" 2009","line":""},
{"lineNum":" 2010","line":"// Default implementations that rely on other numext implementations"},
{"lineNum":" 2011","line":"namespace internal {"},
{"lineNum":" 2012","line":""},
{"lineNum":" 2013","line":"// Specialization for complex types that are not supported by std::expm1."},
{"lineNum":" 2014","line":"template <typename RealScalar>"},
{"lineNum":" 2015","line":"struct expm1_impl<std::complex<RealScalar> > {"},
{"lineNum":" 2016","line":"  EIGEN_STATIC_ASSERT_NON_INTEGER(RealScalar)"},
{"lineNum":" 2017","line":""},
{"lineNum":" 2018","line":"  EIGEN_DEVICE_FUNC static inline std::complex<RealScalar> run("},
{"lineNum":" 2019","line":"      const std::complex<RealScalar>& x) {"},
{"lineNum":" 2020","line":"    RealScalar xr = x.real();"},
{"lineNum":" 2021","line":"    RealScalar xi = x.imag();"},
{"lineNum":" 2022","line":"    // expm1(z) = exp(z) - 1"},
{"lineNum":" 2023","line":"    //          = exp(x +  i * y) - 1"},
{"lineNum":" 2024","line":"    //          = exp(x) * (cos(y) + i * sin(y)) - 1"},
{"lineNum":" 2025","line":"    //          = exp(x) * cos(y) - 1 + i * exp(x) * sin(y)"},
{"lineNum":" 2026","line":"    // Imag(expm1(z)) = exp(x) * sin(y)"},
{"lineNum":" 2027","line":"    // Real(expm1(z)) = exp(x) * cos(y) - 1"},
{"lineNum":" 2028","line":"    //          = exp(x) * cos(y) - 1."},
{"lineNum":" 2029","line":"    //          = expm1(x) + exp(x) * (cos(y) - 1)"},
{"lineNum":" 2030","line":"    //          = expm1(x) + exp(x) * (2 * sin(y / 2) ** 2)"},
{"lineNum":" 2031","line":"    RealScalar erm1 = numext::expm1<RealScalar>(xr);"},
{"lineNum":" 2032","line":"    RealScalar er = erm1 + RealScalar(1.);"},
{"lineNum":" 2033","line":"    RealScalar sin2 = numext::sin(xi / RealScalar(2.));"},
{"lineNum":" 2034","line":"    sin2 = sin2 * sin2;"},
{"lineNum":" 2035","line":"    RealScalar s = numext::sin(xi);"},
{"lineNum":" 2036","line":"    RealScalar real_part = erm1 - RealScalar(2.) * er * sin2;"},
{"lineNum":" 2037","line":"    return std::complex<RealScalar>(real_part, er * s);"},
{"lineNum":" 2038","line":"  }"},
{"lineNum":" 2039","line":"};"},
{"lineNum":" 2040","line":""},
{"lineNum":" 2041","line":"template<typename T>"},
{"lineNum":" 2042","line":"struct rsqrt_impl {"},
{"lineNum":" 2043","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":" 2044","line":"  static EIGEN_ALWAYS_INLINE T run(const T& x) {"},
{"lineNum":" 2045","line":"    return T(1)/numext::sqrt(x);"},
{"lineNum":" 2046","line":"  }"},
{"lineNum":" 2047","line":"};"},
{"lineNum":" 2048","line":""},
{"lineNum":" 2049","line":"#if defined(EIGEN_GPU_COMPILE_PHASE)"},
{"lineNum":" 2050","line":"template<typename T>"},
{"lineNum":" 2051","line":"struct conj_impl<std::complex<T>, true>"},
{"lineNum":" 2052","line":"{"},
{"lineNum":" 2053","line":"  EIGEN_DEVICE_FUNC"},
{"lineNum":" 2054","line":"  static inline std::complex<T> run(const std::complex<T>& x)"},
{"lineNum":" 2055","line":"  {"},
{"lineNum":" 2056","line":"    return std::complex<T>(numext::real(x), -numext::imag(x));"},
{"lineNum":" 2057","line":"  }"},
{"lineNum":" 2058","line":"};"},
{"lineNum":" 2059","line":"#endif"},
{"lineNum":" 2060","line":""},
{"lineNum":" 2061","line":"} // end namespace internal"},
{"lineNum":" 2062","line":""},
{"lineNum":" 2063","line":"} // end namespace Eigen"},
{"lineNum":" 2064","line":""},
{"lineNum":" 2065","line":"#endif // EIGEN_MATHFUNCTIONS_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 9, "covered" : 0,};
var merged_data = [];
