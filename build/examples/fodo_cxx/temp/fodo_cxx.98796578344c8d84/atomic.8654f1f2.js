var data = {lines:[
{"lineNum":"    1","line":"// -*- C++ -*-"},
{"lineNum":"    2","line":"//===--------------------------- atomic -----------------------------------===//"},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions."},
{"lineNum":"    5","line":"// See https://llvm.org/LICENSE.txt for license information."},
{"lineNum":"    6","line":"// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef _LIBCPP_ATOMIC"},
{"lineNum":"   11","line":"#define _LIBCPP_ATOMIC"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"/*"},
{"lineNum":"   14","line":"    atomic synopsis"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"namespace std"},
{"lineNum":"   17","line":"{"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"// feature test macro [version.syn]"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"#define __cpp_lib_atomic_is_always_lock_free"},
{"lineNum":"   22","line":"#define __cpp_lib_atomic_flag_test"},
{"lineNum":"   23","line":"#define __cpp_lib_atomic_lock_free_type_aliases"},
{"lineNum":"   24","line":"#define __cpp_lib_atomic_wait"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":" // order and consistency"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":" enum memory_order: unspecified // enum class in C++20"},
{"lineNum":"   29","line":" {"},
{"lineNum":"   30","line":"    relaxed,"},
{"lineNum":"   31","line":"    consume, // load-consume"},
{"lineNum":"   32","line":"    acquire, // load-acquire"},
{"lineNum":"   33","line":"    release, // store-release"},
{"lineNum":"   34","line":"    acq_rel, // store-release load-acquire"},
{"lineNum":"   35","line":"    seq_cst // store-release load-acquire"},
{"lineNum":"   36","line":" };"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":" inline constexpr auto memory_order_relaxed = memory_order::relaxed;"},
{"lineNum":"   39","line":" inline constexpr auto memory_order_consume = memory_order::consume;"},
{"lineNum":"   40","line":" inline constexpr auto memory_order_acquire = memory_order::acquire;"},
{"lineNum":"   41","line":" inline constexpr auto memory_order_release = memory_order::release;"},
{"lineNum":"   42","line":" inline constexpr auto memory_order_acq_rel = memory_order::acq_rel;"},
{"lineNum":"   43","line":" inline constexpr auto memory_order_seq_cst = memory_order::seq_cst;"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"template <class T> T kill_dependency(T y) noexcept;"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"// lock-free property"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"#define ATOMIC_BOOL_LOCK_FREE unspecified"},
{"lineNum":"   50","line":"#define ATOMIC_CHAR_LOCK_FREE unspecified"},
{"lineNum":"   51","line":"#define ATOMIC_CHAR8_T_LOCK_FREE unspecified // C++20"},
{"lineNum":"   52","line":"#define ATOMIC_CHAR16_T_LOCK_FREE unspecified"},
{"lineNum":"   53","line":"#define ATOMIC_CHAR32_T_LOCK_FREE unspecified"},
{"lineNum":"   54","line":"#define ATOMIC_WCHAR_T_LOCK_FREE unspecified"},
{"lineNum":"   55","line":"#define ATOMIC_SHORT_LOCK_FREE unspecified"},
{"lineNum":"   56","line":"#define ATOMIC_INT_LOCK_FREE unspecified"},
{"lineNum":"   57","line":"#define ATOMIC_LONG_LOCK_FREE unspecified"},
{"lineNum":"   58","line":"#define ATOMIC_LLONG_LOCK_FREE unspecified"},
{"lineNum":"   59","line":"#define ATOMIC_POINTER_LOCK_FREE unspecified"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"template <class T>"},
{"lineNum":"   62","line":"struct atomic"},
{"lineNum":"   63","line":"{"},
{"lineNum":"   64","line":"    using value_type = T;"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"    static constexpr bool is_always_lock_free;"},
{"lineNum":"   67","line":"    bool is_lock_free() const volatile noexcept;"},
{"lineNum":"   68","line":"    bool is_lock_free() const noexcept;"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"    atomic() noexcept = default; // until C++20"},
{"lineNum":"   71","line":"    constexpr atomic() noexcept(is_nothrow_default_constructible_v<T>); // since C++20"},
{"lineNum":"   72","line":"    constexpr atomic(T desr) noexcept;"},
{"lineNum":"   73","line":"    atomic(const atomic&) = delete;"},
{"lineNum":"   74","line":"    atomic& operator=(const atomic&) = delete;"},
{"lineNum":"   75","line":"    atomic& operator=(const atomic&) volatile = delete;"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"    T load(memory_order m = memory_order_seq_cst) const volatile noexcept;"},
{"lineNum":"   78","line":"    T load(memory_order m = memory_order_seq_cst) const noexcept;"},
{"lineNum":"   79","line":"    operator T() const volatile noexcept;"},
{"lineNum":"   80","line":"    operator T() const noexcept;"},
{"lineNum":"   81","line":"    void store(T desr, memory_order m = memory_order_seq_cst) volatile noexcept;"},
{"lineNum":"   82","line":"    void store(T desr, memory_order m = memory_order_seq_cst) noexcept;"},
{"lineNum":"   83","line":"    T operator=(T) volatile noexcept;"},
{"lineNum":"   84","line":"    T operator=(T) noexcept;"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"    T exchange(T desr, memory_order m = memory_order_seq_cst) volatile noexcept;"},
{"lineNum":"   87","line":"    T exchange(T desr, memory_order m = memory_order_seq_cst) noexcept;"},
{"lineNum":"   88","line":"    bool compare_exchange_weak(T& expc, T desr,"},
{"lineNum":"   89","line":"                               memory_order s, memory_order f) volatile noexcept;"},
{"lineNum":"   90","line":"    bool compare_exchange_weak(T& expc, T desr, memory_order s, memory_order f) noexcept;"},
{"lineNum":"   91","line":"    bool compare_exchange_strong(T& expc, T desr,"},
{"lineNum":"   92","line":"                                 memory_order s, memory_order f) volatile noexcept;"},
{"lineNum":"   93","line":"    bool compare_exchange_strong(T& expc, T desr,"},
{"lineNum":"   94","line":"                                 memory_order s, memory_order f) noexcept;"},
{"lineNum":"   95","line":"    bool compare_exchange_weak(T& expc, T desr,"},
{"lineNum":"   96","line":"                               memory_order m = memory_order_seq_cst) volatile noexcept;"},
{"lineNum":"   97","line":"    bool compare_exchange_weak(T& expc, T desr,"},
{"lineNum":"   98","line":"                               memory_order m = memory_order_seq_cst) noexcept;"},
{"lineNum":"   99","line":"    bool compare_exchange_strong(T& expc, T desr,"},
{"lineNum":"  100","line":"                                memory_order m = memory_order_seq_cst) volatile noexcept;"},
{"lineNum":"  101","line":"    bool compare_exchange_strong(T& expc, T desr,"},
{"lineNum":"  102","line":"                                 memory_order m = memory_order_seq_cst) noexcept;"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"    void wait(T, memory_order = memory_order::seq_cst) const volatile noexcept;"},
{"lineNum":"  105","line":"    void wait(T, memory_order = memory_order::seq_cst) const noexcept;"},
{"lineNum":"  106","line":"    void notify_one() volatile noexcept;"},
{"lineNum":"  107","line":"    void notify_one() noexcept;"},
{"lineNum":"  108","line":"    void notify_all() volatile noexcept;"},
{"lineNum":"  109","line":"    void notify_all() noexcept;"},
{"lineNum":"  110","line":"};"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"template <>"},
{"lineNum":"  113","line":"struct atomic<integral>"},
{"lineNum":"  114","line":"{"},
{"lineNum":"  115","line":"    using value_type = integral;"},
{"lineNum":"  116","line":"    using difference_type = value_type;"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"    static constexpr bool is_always_lock_free;"},
{"lineNum":"  119","line":"    bool is_lock_free() const volatile noexcept;"},
{"lineNum":"  120","line":"    bool is_lock_free() const noexcept;"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"    atomic() noexcept = default;"},
{"lineNum":"  123","line":"    constexpr atomic(integral desr) noexcept;"},
{"lineNum":"  124","line":"    atomic(const atomic&) = delete;"},
{"lineNum":"  125","line":"    atomic& operator=(const atomic&) = delete;"},
{"lineNum":"  126","line":"    atomic& operator=(const atomic&) volatile = delete;"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"    integral load(memory_order m = memory_order_seq_cst) const volatile noexcept;"},
{"lineNum":"  129","line":"    integral load(memory_order m = memory_order_seq_cst) const noexcept;"},
{"lineNum":"  130","line":"    operator integral() const volatile noexcept;"},
{"lineNum":"  131","line":"    operator integral() const noexcept;"},
{"lineNum":"  132","line":"    void store(integral desr, memory_order m = memory_order_seq_cst) volatile noexcept;"},
{"lineNum":"  133","line":"    void store(integral desr, memory_order m = memory_order_seq_cst) noexcept;"},
{"lineNum":"  134","line":"    integral operator=(integral desr) volatile noexcept;"},
{"lineNum":"  135","line":"    integral operator=(integral desr) noexcept;"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"    integral exchange(integral desr,"},
{"lineNum":"  138","line":"                      memory_order m = memory_order_seq_cst) volatile noexcept;"},
{"lineNum":"  139","line":"    integral exchange(integral desr, memory_order m = memory_order_seq_cst) noexcept;"},
{"lineNum":"  140","line":"    bool compare_exchange_weak(integral& expc, integral desr,"},
{"lineNum":"  141","line":"                               memory_order s, memory_order f) volatile noexcept;"},
{"lineNum":"  142","line":"    bool compare_exchange_weak(integral& expc, integral desr,"},
{"lineNum":"  143","line":"                               memory_order s, memory_order f) noexcept;"},
{"lineNum":"  144","line":"    bool compare_exchange_strong(integral& expc, integral desr,"},
{"lineNum":"  145","line":"                                 memory_order s, memory_order f) volatile noexcept;"},
{"lineNum":"  146","line":"    bool compare_exchange_strong(integral& expc, integral desr,"},
{"lineNum":"  147","line":"                                 memory_order s, memory_order f) noexcept;"},
{"lineNum":"  148","line":"    bool compare_exchange_weak(integral& expc, integral desr,"},
{"lineNum":"  149","line":"                               memory_order m = memory_order_seq_cst) volatile noexcept;"},
{"lineNum":"  150","line":"    bool compare_exchange_weak(integral& expc, integral desr,"},
{"lineNum":"  151","line":"                               memory_order m = memory_order_seq_cst) noexcept;"},
{"lineNum":"  152","line":"    bool compare_exchange_strong(integral& expc, integral desr,"},
{"lineNum":"  153","line":"                                memory_order m = memory_order_seq_cst) volatile noexcept;"},
{"lineNum":"  154","line":"    bool compare_exchange_strong(integral& expc, integral desr,"},
{"lineNum":"  155","line":"                                 memory_order m = memory_order_seq_cst) noexcept;"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"    integral fetch_add(integral op, memory_order m = memory_order_seq_cst) volatile noexcept;"},
{"lineNum":"  158","line":"    integral fetch_add(integral op, memory_order m = memory_order_seq_cst) noexcept;"},
{"lineNum":"  159","line":"    integral fetch_sub(integral op, memory_order m = memory_order_seq_cst) volatile noexcept;"},
{"lineNum":"  160","line":"    integral fetch_sub(integral op, memory_order m = memory_order_seq_cst) noexcept;"},
{"lineNum":"  161","line":"    integral fetch_and(integral op, memory_order m = memory_order_seq_cst) volatile noexcept;"},
{"lineNum":"  162","line":"    integral fetch_and(integral op, memory_order m = memory_order_seq_cst) noexcept;"},
{"lineNum":"  163","line":"    integral fetch_or(integral op, memory_order m = memory_order_seq_cst) volatile noexcept;"},
{"lineNum":"  164","line":"    integral fetch_or(integral op, memory_order m = memory_order_seq_cst) noexcept;"},
{"lineNum":"  165","line":"    integral fetch_xor(integral op, memory_order m = memory_order_seq_cst) volatile noexcept;"},
{"lineNum":"  166","line":"    integral fetch_xor(integral op, memory_order m = memory_order_seq_cst) noexcept;"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"    integral operator++(int) volatile noexcept;"},
{"lineNum":"  169","line":"    integral operator++(int) noexcept;"},
{"lineNum":"  170","line":"    integral operator--(int) volatile noexcept;"},
{"lineNum":"  171","line":"    integral operator--(int) noexcept;"},
{"lineNum":"  172","line":"    integral operator++() volatile noexcept;"},
{"lineNum":"  173","line":"    integral operator++() noexcept;"},
{"lineNum":"  174","line":"    integral operator--() volatile noexcept;"},
{"lineNum":"  175","line":"    integral operator--() noexcept;"},
{"lineNum":"  176","line":"    integral operator+=(integral op) volatile noexcept;"},
{"lineNum":"  177","line":"    integral operator+=(integral op) noexcept;"},
{"lineNum":"  178","line":"    integral operator-=(integral op) volatile noexcept;"},
{"lineNum":"  179","line":"    integral operator-=(integral op) noexcept;"},
{"lineNum":"  180","line":"    integral operator&=(integral op) volatile noexcept;"},
{"lineNum":"  181","line":"    integral operator&=(integral op) noexcept;"},
{"lineNum":"  182","line":"    integral operator|=(integral op) volatile noexcept;"},
{"lineNum":"  183","line":"    integral operator|=(integral op) noexcept;"},
{"lineNum":"  184","line":"    integral operator^=(integral op) volatile noexcept;"},
{"lineNum":"  185","line":"    integral operator^=(integral op) noexcept;"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"    void wait(integral, memory_order = memory_order::seq_cst) const volatile noexcept;"},
{"lineNum":"  188","line":"    void wait(integral, memory_order = memory_order::seq_cst) const noexcept;"},
{"lineNum":"  189","line":"    void notify_one() volatile noexcept;"},
{"lineNum":"  190","line":"    void notify_one() noexcept;"},
{"lineNum":"  191","line":"    void notify_all() volatile noexcept;"},
{"lineNum":"  192","line":"    void notify_all() noexcept;"},
{"lineNum":"  193","line":"};"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"template <class T>"},
{"lineNum":"  196","line":"struct atomic<T*>"},
{"lineNum":"  197","line":"{"},
{"lineNum":"  198","line":"    using value_type = T*;"},
{"lineNum":"  199","line":"    using difference_type = ptrdiff_t;"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"    static constexpr bool is_always_lock_free;"},
{"lineNum":"  202","line":"    bool is_lock_free() const volatile noexcept;"},
{"lineNum":"  203","line":"    bool is_lock_free() const noexcept;"},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"    atomic() noexcept = default; // until C++20"},
{"lineNum":"  206","line":"    constexpr atomic() noexcept; // since C++20"},
{"lineNum":"  207","line":"    constexpr atomic(T* desr) noexcept;"},
{"lineNum":"  208","line":"    atomic(const atomic&) = delete;"},
{"lineNum":"  209","line":"    atomic& operator=(const atomic&) = delete;"},
{"lineNum":"  210","line":"    atomic& operator=(const atomic&) volatile = delete;"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"    T* load(memory_order m = memory_order_seq_cst) const volatile noexcept;"},
{"lineNum":"  213","line":"    T* load(memory_order m = memory_order_seq_cst) const noexcept;"},
{"lineNum":"  214","line":"    operator T*() const volatile noexcept;"},
{"lineNum":"  215","line":"    operator T*() const noexcept;"},
{"lineNum":"  216","line":"    void store(T* desr, memory_order m = memory_order_seq_cst) volatile noexcept;"},
{"lineNum":"  217","line":"    void store(T* desr, memory_order m = memory_order_seq_cst) noexcept;"},
{"lineNum":"  218","line":"    T* operator=(T*) volatile noexcept;"},
{"lineNum":"  219","line":"    T* operator=(T*) noexcept;"},
{"lineNum":"  220","line":""},
{"lineNum":"  221","line":"    T* exchange(T* desr, memory_order m = memory_order_seq_cst) volatile noexcept;"},
{"lineNum":"  222","line":"    T* exchange(T* desr, memory_order m = memory_order_seq_cst) noexcept;"},
{"lineNum":"  223","line":"    bool compare_exchange_weak(T*& expc, T* desr,"},
{"lineNum":"  224","line":"                               memory_order s, memory_order f) volatile noexcept;"},
{"lineNum":"  225","line":"    bool compare_exchange_weak(T*& expc, T* desr,"},
{"lineNum":"  226","line":"                               memory_order s, memory_order f) noexcept;"},
{"lineNum":"  227","line":"    bool compare_exchange_strong(T*& expc, T* desr,"},
{"lineNum":"  228","line":"                                 memory_order s, memory_order f) volatile noexcept;"},
{"lineNum":"  229","line":"    bool compare_exchange_strong(T*& expc, T* desr,"},
{"lineNum":"  230","line":"                                 memory_order s, memory_order f) noexcept;"},
{"lineNum":"  231","line":"    bool compare_exchange_weak(T*& expc, T* desr,"},
{"lineNum":"  232","line":"                               memory_order m = memory_order_seq_cst) volatile noexcept;"},
{"lineNum":"  233","line":"    bool compare_exchange_weak(T*& expc, T* desr,"},
{"lineNum":"  234","line":"                               memory_order m = memory_order_seq_cst) noexcept;"},
{"lineNum":"  235","line":"    bool compare_exchange_strong(T*& expc, T* desr,"},
{"lineNum":"  236","line":"                                memory_order m = memory_order_seq_cst) volatile noexcept;"},
{"lineNum":"  237","line":"    bool compare_exchange_strong(T*& expc, T* desr,"},
{"lineNum":"  238","line":"                                 memory_order m = memory_order_seq_cst) noexcept;"},
{"lineNum":"  239","line":"    T* fetch_add(ptrdiff_t op, memory_order m = memory_order_seq_cst) volatile noexcept;"},
{"lineNum":"  240","line":"    T* fetch_add(ptrdiff_t op, memory_order m = memory_order_seq_cst) noexcept;"},
{"lineNum":"  241","line":"    T* fetch_sub(ptrdiff_t op, memory_order m = memory_order_seq_cst) volatile noexcept;"},
{"lineNum":"  242","line":"    T* fetch_sub(ptrdiff_t op, memory_order m = memory_order_seq_cst) noexcept;"},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"    T* operator++(int) volatile noexcept;"},
{"lineNum":"  245","line":"    T* operator++(int) noexcept;"},
{"lineNum":"  246","line":"    T* operator--(int) volatile noexcept;"},
{"lineNum":"  247","line":"    T* operator--(int) noexcept;"},
{"lineNum":"  248","line":"    T* operator++() volatile noexcept;"},
{"lineNum":"  249","line":"    T* operator++() noexcept;"},
{"lineNum":"  250","line":"    T* operator--() volatile noexcept;"},
{"lineNum":"  251","line":"    T* operator--() noexcept;"},
{"lineNum":"  252","line":"    T* operator+=(ptrdiff_t op) volatile noexcept;"},
{"lineNum":"  253","line":"    T* operator+=(ptrdiff_t op) noexcept;"},
{"lineNum":"  254","line":"    T* operator-=(ptrdiff_t op) volatile noexcept;"},
{"lineNum":"  255","line":"    T* operator-=(ptrdiff_t op) noexcept;"},
{"lineNum":"  256","line":""},
{"lineNum":"  257","line":"    void wait(T*, memory_order = memory_order::seq_cst) const volatile noexcept;"},
{"lineNum":"  258","line":"    void wait(T*, memory_order = memory_order::seq_cst) const noexcept;"},
{"lineNum":"  259","line":"    void notify_one() volatile noexcept;"},
{"lineNum":"  260","line":"    void notify_one() noexcept;"},
{"lineNum":"  261","line":"    void notify_all() volatile noexcept;"},
{"lineNum":"  262","line":"    void notify_all() noexcept;"},
{"lineNum":"  263","line":"};"},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":""},
{"lineNum":"  266","line":"template <class T>"},
{"lineNum":"  267","line":"  bool atomic_is_lock_free(const volatile atomic<T>* obj) noexcept;"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"template <class T>"},
{"lineNum":"  270","line":"  bool atomic_is_lock_free(const atomic<T>* obj) noexcept;"},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"template <class T>"},
{"lineNum":"  273","line":"  void atomic_store(volatile atomic<T>* obj, T desr) noexcept;"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"template <class T>"},
{"lineNum":"  276","line":"  void atomic_store(atomic<T>* obj, T desr) noexcept;"},
{"lineNum":"  277","line":""},
{"lineNum":"  278","line":"template <class T>"},
{"lineNum":"  279","line":"  void atomic_store_explicit(volatile atomic<T>* obj, T desr, memory_order m) noexcept;"},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"template <class T>"},
{"lineNum":"  282","line":"  void atomic_store_explicit(atomic<T>* obj, T desr, memory_order m) noexcept;"},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"template <class T>"},
{"lineNum":"  285","line":"  T atomic_load(const volatile atomic<T>* obj) noexcept;"},
{"lineNum":"  286","line":""},
{"lineNum":"  287","line":"template <class T>"},
{"lineNum":"  288","line":"  T atomic_load(const atomic<T>* obj) noexcept;"},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"template <class T>"},
{"lineNum":"  291","line":"  T atomic_load_explicit(const volatile atomic<T>* obj, memory_order m) noexcept;"},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"template <class T>"},
{"lineNum":"  294","line":"  T atomic_load_explicit(const atomic<T>* obj, memory_order m) noexcept;"},
{"lineNum":"  295","line":""},
{"lineNum":"  296","line":"template <class T>"},
{"lineNum":"  297","line":"  T atomic_exchange(volatile atomic<T>* obj, T desr) noexcept;"},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"template <class T>"},
{"lineNum":"  300","line":"  T atomic_exchange(atomic<T>* obj, T desr) noexcept;"},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":"template <class T>"},
{"lineNum":"  303","line":"  T atomic_exchange_explicit(volatile atomic<T>* obj, T desr, memory_order m) noexcept;"},
{"lineNum":"  304","line":""},
{"lineNum":"  305","line":"template <class T>"},
{"lineNum":"  306","line":"  T atomic_exchange_explicit(atomic<T>* obj, T desr, memory_order m) noexcept;"},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"template <class T>"},
{"lineNum":"  309","line":"  bool atomic_compare_exchange_weak(volatile atomic<T>* obj, T* expc, T desr) noexcept;"},
{"lineNum":"  310","line":""},
{"lineNum":"  311","line":"template <class T>"},
{"lineNum":"  312","line":"  bool atomic_compare_exchange_weak(atomic<T>* obj, T* expc, T desr) noexcept;"},
{"lineNum":"  313","line":""},
{"lineNum":"  314","line":"template <class T>"},
{"lineNum":"  315","line":"  bool atomic_compare_exchange_strong(volatile atomic<T>* obj, T* expc, T desr) noexcept;"},
{"lineNum":"  316","line":""},
{"lineNum":"  317","line":"template <class T>"},
{"lineNum":"  318","line":"  bool atomic_compare_exchange_strong(atomic<T>* obj, T* expc, T desr) noexcept;"},
{"lineNum":"  319","line":""},
{"lineNum":"  320","line":"template <class T>"},
{"lineNum":"  321","line":"  bool atomic_compare_exchange_weak_explicit(volatile atomic<T>* obj, T* expc,"},
{"lineNum":"  322","line":"                                             T desr,"},
{"lineNum":"  323","line":"                                             memory_order s, memory_order f) noexcept;"},
{"lineNum":"  324","line":""},
{"lineNum":"  325","line":"template <class T>"},
{"lineNum":"  326","line":"  bool atomic_compare_exchange_weak_explicit(atomic<T>* obj, T* expc, T desr,"},
{"lineNum":"  327","line":"                                             memory_order s, memory_order f) noexcept;"},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"template <class T>"},
{"lineNum":"  330","line":"  bool atomic_compare_exchange_strong_explicit(volatile atomic<T>* obj,"},
{"lineNum":"  331","line":"                                               T* expc, T desr,"},
{"lineNum":"  332","line":"                                               memory_order s, memory_order f) noexcept;"},
{"lineNum":"  333","line":""},
{"lineNum":"  334","line":"template <class T>"},
{"lineNum":"  335","line":"  bool atomic_compare_exchange_strong_explicit(atomic<T>* obj, T* expc,"},
{"lineNum":"  336","line":"                                               T desr,"},
{"lineNum":"  337","line":"                                               memory_order s, memory_order f) noexcept;"},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"template <class T>"},
{"lineNum":"  340","line":"  void atomic_wait(const volatile atomic<T>* obj, T old) noexcept;"},
{"lineNum":"  341","line":""},
{"lineNum":"  342","line":"template <class T>"},
{"lineNum":"  343","line":"  void atomic_wait(const atomic<T>* obj, T old) noexcept;"},
{"lineNum":"  344","line":""},
{"lineNum":"  345","line":"template <class T>"},
{"lineNum":"  346","line":"  void atomic_wait_explicit(const volatile atomic<T>* obj, T old, memory_order m) noexcept;"},
{"lineNum":"  347","line":""},
{"lineNum":"  348","line":"template <class T>"},
{"lineNum":"  349","line":"  void atomic_wait_explicit(const atomic<T>* obj, T old, memory_order m) noexcept;"},
{"lineNum":"  350","line":""},
{"lineNum":"  351","line":"template <class T>"},
{"lineNum":"  352","line":"  void atomic_one(volatile atomic<T>* obj) noexcept;"},
{"lineNum":"  353","line":""},
{"lineNum":"  354","line":"template <class T>"},
{"lineNum":"  355","line":"  void atomic_one(atomic<T>* obj) noexcept;"},
{"lineNum":"  356","line":""},
{"lineNum":"  357","line":"template <class T>"},
{"lineNum":"  358","line":"  void atomic_all(volatile atomic<T>* obj) noexcept;"},
{"lineNum":"  359","line":""},
{"lineNum":"  360","line":"template <class T>"},
{"lineNum":"  361","line":"  void atomic_all(atomic<T>* obj) noexcept;"},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"template <class Integral>"},
{"lineNum":"  364","line":"  Integral atomic_fetch_add(volatile atomic<Integral>* obj, Integral op) noexcept;"},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":"template <class Integral>"},
{"lineNum":"  367","line":"  Integral atomic_fetch_add(atomic<Integral>* obj, Integral op) noexcept;"},
{"lineNum":"  368","line":""},
{"lineNum":"  369","line":"template <class Integral>"},
{"lineNum":"  370","line":"  Integral atomic_fetch_add_explicit(volatile atomic<Integral>* obj, Integral op,"},
{"lineNum":"  371","line":"                              memory_order m) noexcept;"},
{"lineNum":"  372","line":"template <class Integral>"},
{"lineNum":"  373","line":"  Integral atomic_fetch_add_explicit(atomic<Integral>* obj, Integral op,"},
{"lineNum":"  374","line":"                              memory_order m) noexcept;"},
{"lineNum":"  375","line":"template <class Integral>"},
{"lineNum":"  376","line":"  Integral atomic_fetch_sub(volatile atomic<Integral>* obj, Integral op) noexcept;"},
{"lineNum":"  377","line":""},
{"lineNum":"  378","line":"template <class Integral>"},
{"lineNum":"  379","line":"  Integral atomic_fetch_sub(atomic<Integral>* obj, Integral op) noexcept;"},
{"lineNum":"  380","line":""},
{"lineNum":"  381","line":"template <class Integral>"},
{"lineNum":"  382","line":"  Integral atomic_fetch_sub_explicit(volatile atomic<Integral>* obj, Integral op,"},
{"lineNum":"  383","line":"                                     memory_order m) noexcept;"},
{"lineNum":"  384","line":""},
{"lineNum":"  385","line":"template <class Integral>"},
{"lineNum":"  386","line":"  Integral atomic_fetch_sub_explicit(atomic<Integral>* obj, Integral op,"},
{"lineNum":"  387","line":"                                     memory_order m) noexcept;"},
{"lineNum":"  388","line":""},
{"lineNum":"  389","line":"template <class Integral>"},
{"lineNum":"  390","line":"  Integral atomic_fetch_and(volatile atomic<Integral>* obj, Integral op) noexcept;"},
{"lineNum":"  391","line":""},
{"lineNum":"  392","line":"template <class Integral>"},
{"lineNum":"  393","line":"  Integral atomic_fetch_and(atomic<Integral>* obj, Integral op) noexcept;"},
{"lineNum":"  394","line":""},
{"lineNum":"  395","line":"template <class Integral>"},
{"lineNum":"  396","line":"  Integral atomic_fetch_and_explicit(volatile atomic<Integral>* obj, Integral op,"},
{"lineNum":"  397","line":"                                     memory_order m) noexcept;"},
{"lineNum":"  398","line":""},
{"lineNum":"  399","line":"template <class Integral>"},
{"lineNum":"  400","line":"  Integral atomic_fetch_and_explicit(atomic<Integral>* obj, Integral op,"},
{"lineNum":"  401","line":"                                     memory_order m) noexcept;"},
{"lineNum":"  402","line":""},
{"lineNum":"  403","line":"template <class Integral>"},
{"lineNum":"  404","line":"  Integral atomic_fetch_or(volatile atomic<Integral>* obj, Integral op) noexcept;"},
{"lineNum":"  405","line":""},
{"lineNum":"  406","line":"template <class Integral>"},
{"lineNum":"  407","line":"  Integral atomic_fetch_or(atomic<Integral>* obj, Integral op) noexcept;"},
{"lineNum":"  408","line":""},
{"lineNum":"  409","line":"template <class Integral>"},
{"lineNum":"  410","line":"  Integral atomic_fetch_or_explicit(volatile atomic<Integral>* obj, Integral op,"},
{"lineNum":"  411","line":"                             memory_order m) noexcept;"},
{"lineNum":"  412","line":""},
{"lineNum":"  413","line":"template <class Integral>"},
{"lineNum":"  414","line":"  Integral atomic_fetch_or_explicit(atomic<Integral>* obj, Integral op,"},
{"lineNum":"  415","line":"                             memory_order m) noexcept;"},
{"lineNum":"  416","line":""},
{"lineNum":"  417","line":"template <class Integral>"},
{"lineNum":"  418","line":"  Integral atomic_fetch_xor(volatile atomic<Integral>* obj, Integral op) noexcept;"},
{"lineNum":"  419","line":""},
{"lineNum":"  420","line":"template <class Integral>"},
{"lineNum":"  421","line":"  Integral atomic_fetch_xor(atomic<Integral>* obj, Integral op) noexcept;"},
{"lineNum":"  422","line":""},
{"lineNum":"  423","line":"template <class Integral>"},
{"lineNum":"  424","line":"  Integral atomic_fetch_xor_explicit(volatile atomic<Integral>* obj, Integral op,"},
{"lineNum":"  425","line":"                                     memory_order m) noexcept;"},
{"lineNum":"  426","line":""},
{"lineNum":"  427","line":"template <class Integral>"},
{"lineNum":"  428","line":"  Integral atomic_fetch_xor_explicit(atomic<Integral>* obj, Integral op,"},
{"lineNum":"  429","line":"                                     memory_order m) noexcept;"},
{"lineNum":"  430","line":""},
{"lineNum":"  431","line":"template <class T>"},
{"lineNum":"  432","line":"  T* atomic_fetch_add(volatile atomic<T*>* obj, ptrdiff_t op) noexcept;"},
{"lineNum":"  433","line":""},
{"lineNum":"  434","line":"template <class T>"},
{"lineNum":"  435","line":"  T* atomic_fetch_add(atomic<T*>* obj, ptrdiff_t op) noexcept;"},
{"lineNum":"  436","line":""},
{"lineNum":"  437","line":"template <class T>"},
{"lineNum":"  438","line":"  T* atomic_fetch_add_explicit(volatile atomic<T*>* obj, ptrdiff_t op,"},
{"lineNum":"  439","line":"                               memory_order m) noexcept;"},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"template <class T>"},
{"lineNum":"  442","line":"  T* atomic_fetch_add_explicit(atomic<T*>* obj, ptrdiff_t op, memory_order m) noexcept;"},
{"lineNum":"  443","line":""},
{"lineNum":"  444","line":"template <class T>"},
{"lineNum":"  445","line":"  T* atomic_fetch_sub(volatile atomic<T*>* obj, ptrdiff_t op) noexcept;"},
{"lineNum":"  446","line":""},
{"lineNum":"  447","line":"template <class T>"},
{"lineNum":"  448","line":"  T* atomic_fetch_sub(atomic<T*>* obj, ptrdiff_t op) noexcept;"},
{"lineNum":"  449","line":""},
{"lineNum":"  450","line":"template <class T>"},
{"lineNum":"  451","line":"  T* atomic_fetch_sub_explicit(volatile atomic<T*>* obj, ptrdiff_t op,"},
{"lineNum":"  452","line":"                               memory_order m) noexcept;"},
{"lineNum":"  453","line":""},
{"lineNum":"  454","line":"template <class T>"},
{"lineNum":"  455","line":"  T* atomic_fetch_sub_explicit(atomic<T*>* obj, ptrdiff_t op, memory_order m) noexcept;"},
{"lineNum":"  456","line":""},
{"lineNum":"  457","line":"// Atomics for standard typedef types"},
{"lineNum":"  458","line":""},
{"lineNum":"  459","line":"typedef atomic<bool>               atomic_bool;"},
{"lineNum":"  460","line":"typedef atomic<char>               atomic_char;"},
{"lineNum":"  461","line":"typedef atomic<signed char>        atomic_schar;"},
{"lineNum":"  462","line":"typedef atomic<unsigned char>      atomic_uchar;"},
{"lineNum":"  463","line":"typedef atomic<short>              atomic_short;"},
{"lineNum":"  464","line":"typedef atomic<unsigned short>     atomic_ushort;"},
{"lineNum":"  465","line":"typedef atomic<int>                atomic_int;"},
{"lineNum":"  466","line":"typedef atomic<unsigned int>       atomic_uint;"},
{"lineNum":"  467","line":"typedef atomic<long>               atomic_long;"},
{"lineNum":"  468","line":"typedef atomic<unsigned long>      atomic_ulong;"},
{"lineNum":"  469","line":"typedef atomic<long long>          atomic_llong;"},
{"lineNum":"  470","line":"typedef atomic<unsigned long long> atomic_ullong;"},
{"lineNum":"  471","line":"typedef atomic<char8_t>            atomic_char8_t; // C++20"},
{"lineNum":"  472","line":"typedef atomic<char16_t>           atomic_char16_t;"},
{"lineNum":"  473","line":"typedef atomic<char32_t>           atomic_char32_t;"},
{"lineNum":"  474","line":"typedef atomic<wchar_t>            atomic_wchar_t;"},
{"lineNum":"  475","line":""},
{"lineNum":"  476","line":"typedef atomic<int_least8_t>   atomic_int_least8_t;"},
{"lineNum":"  477","line":"typedef atomic<uint_least8_t>  atomic_uint_least8_t;"},
{"lineNum":"  478","line":"typedef atomic<int_least16_t>  atomic_int_least16_t;"},
{"lineNum":"  479","line":"typedef atomic<uint_least16_t> atomic_uint_least16_t;"},
{"lineNum":"  480","line":"typedef atomic<int_least32_t>  atomic_int_least32_t;"},
{"lineNum":"  481","line":"typedef atomic<uint_least32_t> atomic_uint_least32_t;"},
{"lineNum":"  482","line":"typedef atomic<int_least64_t>  atomic_int_least64_t;"},
{"lineNum":"  483","line":"typedef atomic<uint_least64_t> atomic_uint_least64_t;"},
{"lineNum":"  484","line":""},
{"lineNum":"  485","line":"typedef atomic<int_fast8_t>   atomic_int_fast8_t;"},
{"lineNum":"  486","line":"typedef atomic<uint_fast8_t>  atomic_uint_fast8_t;"},
{"lineNum":"  487","line":"typedef atomic<int_fast16_t>  atomic_int_fast16_t;"},
{"lineNum":"  488","line":"typedef atomic<uint_fast16_t> atomic_uint_fast16_t;"},
{"lineNum":"  489","line":"typedef atomic<int_fast32_t>  atomic_int_fast32_t;"},
{"lineNum":"  490","line":"typedef atomic<uint_fast32_t> atomic_uint_fast32_t;"},
{"lineNum":"  491","line":"typedef atomic<int_fast64_t>  atomic_int_fast64_t;"},
{"lineNum":"  492","line":"typedef atomic<uint_fast64_t> atomic_uint_fast64_t;"},
{"lineNum":"  493","line":""},
{"lineNum":"  494","line":"typedef atomic<int8_t>   atomic_int8_t;"},
{"lineNum":"  495","line":"typedef atomic<uint8_t>  atomic_uint8_t;"},
{"lineNum":"  496","line":"typedef atomic<int16_t>  atomic_int16_t;"},
{"lineNum":"  497","line":"typedef atomic<uint16_t> atomic_uint16_t;"},
{"lineNum":"  498","line":"typedef atomic<int32_t>  atomic_int32_t;"},
{"lineNum":"  499","line":"typedef atomic<uint32_t> atomic_uint32_t;"},
{"lineNum":"  500","line":"typedef atomic<int64_t>  atomic_int64_t;"},
{"lineNum":"  501","line":"typedef atomic<uint64_t> atomic_uint64_t;"},
{"lineNum":"  502","line":""},
{"lineNum":"  503","line":"typedef atomic<intptr_t>  atomic_intptr_t;"},
{"lineNum":"  504","line":"typedef atomic<uintptr_t> atomic_uintptr_t;"},
{"lineNum":"  505","line":"typedef atomic<size_t>    atomic_size_t;"},
{"lineNum":"  506","line":"typedef atomic<ptrdiff_t> atomic_ptrdiff_t;"},
{"lineNum":"  507","line":"typedef atomic<intmax_t>  atomic_intmax_t;"},
{"lineNum":"  508","line":"typedef atomic<uintmax_t> atomic_uintmax_t;"},
{"lineNum":"  509","line":""},
{"lineNum":"  510","line":"// flag type and operations"},
{"lineNum":"  511","line":""},
{"lineNum":"  512","line":"typedef struct atomic_flag"},
{"lineNum":"  513","line":"{"},
{"lineNum":"  514","line":"    atomic_flag() noexcept = default; // until C++20"},
{"lineNum":"  515","line":"    constexpr atomic_flag() noexcept; // since C++20"},
{"lineNum":"  516","line":"    atomic_flag(const atomic_flag&) = delete;"},
{"lineNum":"  517","line":"    atomic_flag& operator=(const atomic_flag&) = delete;"},
{"lineNum":"  518","line":"    atomic_flag& operator=(const atomic_flag&) volatile = delete;"},
{"lineNum":"  519","line":""},
{"lineNum":"  520","line":"    bool test(memory_order m = memory_order_seq_cst) volatile noexcept;"},
{"lineNum":"  521","line":"    bool test(memory_order m = memory_order_seq_cst) noexcept;"},
{"lineNum":"  522","line":"    bool test_and_set(memory_order m = memory_order_seq_cst) volatile noexcept;"},
{"lineNum":"  523","line":"    bool test_and_set(memory_order m = memory_order_seq_cst) noexcept;"},
{"lineNum":"  524","line":"    void clear(memory_order m = memory_order_seq_cst) volatile noexcept;"},
{"lineNum":"  525","line":"    void clear(memory_order m = memory_order_seq_cst) noexcept;"},
{"lineNum":"  526","line":""},
{"lineNum":"  527","line":"    void wait(bool, memory_order = memory_order::seq_cst) const volatile noexcept;"},
{"lineNum":"  528","line":"    void wait(bool, memory_order = memory_order::seq_cst) const noexcept;"},
{"lineNum":"  529","line":"    void notify_one() volatile noexcept;"},
{"lineNum":"  530","line":"    void notify_one() noexcept;"},
{"lineNum":"  531","line":"    void notify_all() volatile noexcept;"},
{"lineNum":"  532","line":"    void notify_all() noexcept;"},
{"lineNum":"  533","line":"} atomic_flag;"},
{"lineNum":"  534","line":""},
{"lineNum":"  535","line":"bool atomic_flag_test(volatile atomic_flag* obj) noexcept;"},
{"lineNum":"  536","line":"bool atomic_flag_test(atomic_flag* obj) noexcept;"},
{"lineNum":"  537","line":"bool atomic_flag_test_explicit(volatile atomic_flag* obj,"},
{"lineNum":"  538","line":"                               memory_order m) noexcept;"},
{"lineNum":"  539","line":"bool atomic_flag_test_explicit(atomic_flag* obj, memory_order m) noexcept;"},
{"lineNum":"  540","line":"bool atomic_flag_test_and_set(volatile atomic_flag* obj) noexcept;"},
{"lineNum":"  541","line":"bool atomic_flag_test_and_set(atomic_flag* obj) noexcept;"},
{"lineNum":"  542","line":"bool atomic_flag_test_and_set_explicit(volatile atomic_flag* obj,"},
{"lineNum":"  543","line":"                                       memory_order m) noexcept;"},
{"lineNum":"  544","line":"bool atomic_flag_test_and_set_explicit(atomic_flag* obj, memory_order m) noexcept;"},
{"lineNum":"  545","line":"void atomic_flag_clear(volatile atomic_flag* obj) noexcept;"},
{"lineNum":"  546","line":"void atomic_flag_clear(atomic_flag* obj) noexcept;"},
{"lineNum":"  547","line":"void atomic_flag_clear_explicit(volatile atomic_flag* obj, memory_order m) noexcept;"},
{"lineNum":"  548","line":"void atomic_flag_clear_explicit(atomic_flag* obj, memory_order m) noexcept;"},
{"lineNum":"  549","line":""},
{"lineNum":"  550","line":"void atomic_wait(const volatile atomic_flag* obj, T old) noexcept;"},
{"lineNum":"  551","line":"void atomic_wait(const atomic_flag* obj, T old) noexcept;"},
{"lineNum":"  552","line":"void atomic_wait_explicit(const volatile atomic_flag* obj, T old, memory_order m) noexcept;"},
{"lineNum":"  553","line":"void atomic_wait_explicit(const atomic_flag* obj, T old, memory_order m) noexcept;"},
{"lineNum":"  554","line":"void atomic_one(volatile atomic_flag* obj) noexcept;"},
{"lineNum":"  555","line":"void atomic_one(atomic_flag* obj) noexcept;"},
{"lineNum":"  556","line":"void atomic_all(volatile atomic_flag* obj) noexcept;"},
{"lineNum":"  557","line":"void atomic_all(atomic_flag* obj) noexcept;"},
{"lineNum":"  558","line":""},
{"lineNum":"  559","line":"// fences"},
{"lineNum":"  560","line":""},
{"lineNum":"  561","line":"void atomic_thread_fence(memory_order m) noexcept;"},
{"lineNum":"  562","line":"void atomic_signal_fence(memory_order m) noexcept;"},
{"lineNum":"  563","line":""},
{"lineNum":"  564","line":"// deprecated"},
{"lineNum":"  565","line":""},
{"lineNum":"  566","line":"template <class T>"},
{"lineNum":"  567","line":"  void atomic_init(volatile atomic<T>* obj, typename atomic<T>::value_type desr) noexcept;"},
{"lineNum":"  568","line":""},
{"lineNum":"  569","line":"template <class T>"},
{"lineNum":"  570","line":"  void atomic_init(atomic<T>* obj, typename atomic<T>::value_type desr) noexcept;"},
{"lineNum":"  571","line":""},
{"lineNum":"  572","line":"#define ATOMIC_VAR_INIT(value) see below"},
{"lineNum":"  573","line":""},
{"lineNum":"  574","line":"#define ATOMIC_FLAG_INIT see below"},
{"lineNum":"  575","line":""},
{"lineNum":"  576","line":"}  // std"},
{"lineNum":"  577","line":""},
{"lineNum":"  578","line":"*/"},
{"lineNum":"  579","line":""},
{"lineNum":"  580","line":"#include <__availability>"},
{"lineNum":"  581","line":"#include <__config>"},
{"lineNum":"  582","line":"#include <__threading_support>"},
{"lineNum":"  583","line":"#include <cstddef>"},
{"lineNum":"  584","line":"#include <cstdint>"},
{"lineNum":"  585","line":"#include <cstring>"},
{"lineNum":"  586","line":"#include <type_traits>"},
{"lineNum":"  587","line":"#include <version>"},
{"lineNum":"  588","line":""},
{"lineNum":"  589","line":"#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"},
{"lineNum":"  590","line":"#pragma GCC system_header"},
{"lineNum":"  591","line":"#endif"},
{"lineNum":"  592","line":""},
{"lineNum":"  593","line":"#ifdef _LIBCPP_HAS_NO_THREADS"},
{"lineNum":"  594","line":"# error <atomic> is not supported on this single threaded system"},
{"lineNum":"  595","line":"#endif"},
{"lineNum":"  596","line":"#ifdef _LIBCPP_HAS_NO_ATOMIC_HEADER"},
{"lineNum":"  597","line":"# error <atomic> is not implemented"},
{"lineNum":"  598","line":"#endif"},
{"lineNum":"  599","line":"#ifdef kill_dependency"},
{"lineNum":"  600","line":"# error C++ standard library is incompatible with <stdatomic.h>"},
{"lineNum":"  601","line":"#endif"},
{"lineNum":"  602","line":""},
{"lineNum":"  603","line":"#define _LIBCPP_CHECK_STORE_MEMORY_ORDER(__m) \\"},
{"lineNum":"  604","line":"  _LIBCPP_DIAGNOSE_WARNING(__m == memory_order_consume || \\"},
{"lineNum":"  605","line":"                           __m == memory_order_acquire || \\"},
{"lineNum":"  606","line":"                           __m == memory_order_acq_rel,   \\"},
{"lineNum":"  607","line":"                        \"memory order argument to atomic operation is invalid\")"},
{"lineNum":"  608","line":""},
{"lineNum":"  609","line":"#define _LIBCPP_CHECK_LOAD_MEMORY_ORDER(__m) \\"},
{"lineNum":"  610","line":"  _LIBCPP_DIAGNOSE_WARNING(__m == memory_order_release || \\"},
{"lineNum":"  611","line":"                           __m == memory_order_acq_rel,   \\"},
{"lineNum":"  612","line":"                        \"memory order argument to atomic operation is invalid\")"},
{"lineNum":"  613","line":""},
{"lineNum":"  614","line":"#define _LIBCPP_CHECK_EXCHANGE_MEMORY_ORDER(__m, __f) \\"},
{"lineNum":"  615","line":"  _LIBCPP_DIAGNOSE_WARNING(__f == memory_order_release || \\"},
{"lineNum":"  616","line":"                           __f == memory_order_acq_rel,   \\"},
{"lineNum":"  617","line":"                        \"memory order argument to atomic operation is invalid\")"},
{"lineNum":"  618","line":""},
{"lineNum":"  619","line":"_LIBCPP_BEGIN_NAMESPACE_STD"},
{"lineNum":"  620","line":""},
{"lineNum":"  621","line":"// Figure out what the underlying type for `memory_order` would be if it were"},
{"lineNum":"  622","line":"// declared as an unscoped enum (accounting for -fshort-enums). Use this result"},
{"lineNum":"  623","line":"// to pin the underlying type in C++20."},
{"lineNum":"  624","line":"enum __legacy_memory_order {"},
{"lineNum":"  625","line":"    __mo_relaxed,"},
{"lineNum":"  626","line":"    __mo_consume,"},
{"lineNum":"  627","line":"    __mo_acquire,"},
{"lineNum":"  628","line":"    __mo_release,"},
{"lineNum":"  629","line":"    __mo_acq_rel,"},
{"lineNum":"  630","line":"    __mo_seq_cst"},
{"lineNum":"  631","line":"};"},
{"lineNum":"  632","line":""},
{"lineNum":"  633","line":"typedef underlying_type<__legacy_memory_order>::type __memory_order_underlying_t;"},
{"lineNum":"  634","line":""},
{"lineNum":"  635","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":"  636","line":""},
{"lineNum":"  637","line":"enum class memory_order : __memory_order_underlying_t {"},
{"lineNum":"  638","line":"  relaxed = __mo_relaxed,"},
{"lineNum":"  639","line":"  consume = __mo_consume,"},
{"lineNum":"  640","line":"  acquire = __mo_acquire,"},
{"lineNum":"  641","line":"  release = __mo_release,"},
{"lineNum":"  642","line":"  acq_rel = __mo_acq_rel,"},
{"lineNum":"  643","line":"  seq_cst = __mo_seq_cst"},
{"lineNum":"  644","line":"};"},
{"lineNum":"  645","line":""},
{"lineNum":"  646","line":"inline constexpr auto memory_order_relaxed = memory_order::relaxed;"},
{"lineNum":"  647","line":"inline constexpr auto memory_order_consume = memory_order::consume;"},
{"lineNum":"  648","line":"inline constexpr auto memory_order_acquire = memory_order::acquire;"},
{"lineNum":"  649","line":"inline constexpr auto memory_order_release = memory_order::release;"},
{"lineNum":"  650","line":"inline constexpr auto memory_order_acq_rel = memory_order::acq_rel;"},
{"lineNum":"  651","line":"inline constexpr auto memory_order_seq_cst = memory_order::seq_cst;"},
{"lineNum":"  652","line":""},
{"lineNum":"  653","line":"#else"},
{"lineNum":"  654","line":""},
{"lineNum":"  655","line":"typedef enum memory_order {"},
{"lineNum":"  656","line":"  memory_order_relaxed = __mo_relaxed,"},
{"lineNum":"  657","line":"  memory_order_consume = __mo_consume,"},
{"lineNum":"  658","line":"  memory_order_acquire = __mo_acquire,"},
{"lineNum":"  659","line":"  memory_order_release = __mo_release,"},
{"lineNum":"  660","line":"  memory_order_acq_rel = __mo_acq_rel,"},
{"lineNum":"  661","line":"  memory_order_seq_cst = __mo_seq_cst,"},
{"lineNum":"  662","line":"} memory_order;"},
{"lineNum":"  663","line":""},
{"lineNum":"  664","line":"#endif // _LIBCPP_STD_VER > 17"},
{"lineNum":"  665","line":""},
{"lineNum":"  666","line":"template <typename _Tp> _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  667","line":"bool __cxx_nonatomic_compare_equal(_Tp const& __lhs, _Tp const& __rhs) {"},
{"lineNum":"  668","line":"    return _VSTD::memcmp(&__lhs, &__rhs, sizeof(_Tp)) == 0;"},
{"lineNum":"  669","line":"}"},
{"lineNum":"  670","line":""},
{"lineNum":"  671","line":"static_assert((is_same<underlying_type<memory_order>::type, __memory_order_underlying_t>::value),"},
{"lineNum":"  672","line":"  \"unexpected underlying type for std::memory_order\");"},
{"lineNum":"  673","line":""},
{"lineNum":"  674","line":"#if defined(_LIBCPP_HAS_GCC_ATOMIC_IMP) || \\"},
{"lineNum":"  675","line":"    defined(_LIBCPP_ATOMIC_ONLY_USE_BUILTINS)"},
{"lineNum":"  676","line":""},
{"lineNum":"  677","line":"// [atomics.types.generic]p1 guarantees _Tp is trivially copyable. Because"},
{"lineNum":"  678","line":"// the default operator= in an object is not volatile, a byte-by-byte copy"},
{"lineNum":"  679","line":"// is required."},
{"lineNum":"  680","line":"template <typename _Tp, typename _Tv> _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  681","line":"typename enable_if<is_assignable<_Tp&, _Tv>::value>::type"},
{"lineNum":"  682","line":"__cxx_atomic_assign_volatile(_Tp& __a_value, _Tv const& __val) {"},
{"lineNum":"  683","line":"  __a_value = __val;"},
{"lineNum":"  684","line":"}"},
{"lineNum":"  685","line":"template <typename _Tp, typename _Tv> _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  686","line":"typename enable_if<is_assignable<_Tp&, _Tv>::value>::type"},
{"lineNum":"  687","line":"__cxx_atomic_assign_volatile(_Tp volatile& __a_value, _Tv volatile const& __val) {"},
{"lineNum":"  688","line":"  volatile char* __to = reinterpret_cast<volatile char*>(&__a_value);"},
{"lineNum":"  689","line":"  volatile char* __end = __to + sizeof(_Tp);"},
{"lineNum":"  690","line":"  volatile const char* __from = reinterpret_cast<volatile const char*>(&__val);"},
{"lineNum":"  691","line":"  while (__to != __end)"},
{"lineNum":"  692","line":"    *__to++ = *__from++;"},
{"lineNum":"  693","line":"}"},
{"lineNum":"  694","line":""},
{"lineNum":"  695","line":"#endif"},
{"lineNum":"  696","line":""},
{"lineNum":"  697","line":"#if defined(_LIBCPP_HAS_GCC_ATOMIC_IMP)"},
{"lineNum":"  698","line":""},
{"lineNum":"  699","line":"template <typename _Tp>"},
{"lineNum":"  700","line":"struct __cxx_atomic_base_impl {"},
{"lineNum":"  701","line":""},
{"lineNum":"  702","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  703","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  704","line":"    __cxx_atomic_base_impl() _NOEXCEPT = default;"},
{"lineNum":"  705","line":"#else"},
{"lineNum":"  706","line":"    __cxx_atomic_base_impl() _NOEXCEPT : __a_value() {}"},
{"lineNum":"  707","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":"  708","line":"  _LIBCPP_CONSTEXPR explicit __cxx_atomic_base_impl(_Tp value) _NOEXCEPT"},
{"lineNum":"  709","line":"    : __a_value(value) {}"},
{"lineNum":"  710","line":"  _Tp __a_value;"},
{"lineNum":"  711","line":"};"},
{"lineNum":"  712","line":""},
{"lineNum":"  713","line":"_LIBCPP_INLINE_VISIBILITY inline _LIBCPP_CONSTEXPR int __to_gcc_order(memory_order __order) {"},
{"lineNum":"  714","line":"  // Avoid switch statement to make this a constexpr."},
{"lineNum":"  715","line":"  return __order == memory_order_relaxed ? __ATOMIC_RELAXED:"},
{"lineNum":"  716","line":"         (__order == memory_order_acquire ? __ATOMIC_ACQUIRE:"},
{"lineNum":"  717","line":"          (__order == memory_order_release ? __ATOMIC_RELEASE:"},
{"lineNum":"  718","line":"           (__order == memory_order_seq_cst ? __ATOMIC_SEQ_CST:"},
{"lineNum":"  719","line":"            (__order == memory_order_acq_rel ? __ATOMIC_ACQ_REL:"},
{"lineNum":"  720","line":"              __ATOMIC_CONSUME))));"},
{"lineNum":"  721","line":"}"},
{"lineNum":"  722","line":""},
{"lineNum":"  723","line":"_LIBCPP_INLINE_VISIBILITY inline _LIBCPP_CONSTEXPR int __to_gcc_failure_order(memory_order __order) {"},
{"lineNum":"  724","line":"  // Avoid switch statement to make this a constexpr."},
{"lineNum":"  725","line":"  return __order == memory_order_relaxed ? __ATOMIC_RELAXED:"},
{"lineNum":"  726","line":"         (__order == memory_order_acquire ? __ATOMIC_ACQUIRE:"},
{"lineNum":"  727","line":"          (__order == memory_order_release ? __ATOMIC_RELAXED:"},
{"lineNum":"  728","line":"           (__order == memory_order_seq_cst ? __ATOMIC_SEQ_CST:"},
{"lineNum":"  729","line":"            (__order == memory_order_acq_rel ? __ATOMIC_ACQUIRE:"},
{"lineNum":"  730","line":"              __ATOMIC_CONSUME))));"},
{"lineNum":"  731","line":"}"},
{"lineNum":"  732","line":""},
{"lineNum":"  733","line":"template <typename _Tp>"},
{"lineNum":"  734","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  735","line":"void __cxx_atomic_init(volatile __cxx_atomic_base_impl<_Tp>* __a,  _Tp __val) {"},
{"lineNum":"  736","line":"  __cxx_atomic_assign_volatile(__a->__a_value, __val);"},
{"lineNum":"  737","line":"}"},
{"lineNum":"  738","line":""},
{"lineNum":"  739","line":"template <typename _Tp>"},
{"lineNum":"  740","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  741","line":"void __cxx_atomic_init(__cxx_atomic_base_impl<_Tp>* __a,  _Tp __val) {"},
{"lineNum":"  742","line":"  __a->__a_value = __val;"},
{"lineNum":"  743","line":"}"},
{"lineNum":"  744","line":""},
{"lineNum":"  745","line":"_LIBCPP_INLINE_VISIBILITY inline"},
{"lineNum":"  746","line":"void __cxx_atomic_thread_fence(memory_order __order) {"},
{"lineNum":"  747","line":"  __atomic_thread_fence(__to_gcc_order(__order));"},
{"lineNum":"  748","line":"}"},
{"lineNum":"  749","line":""},
{"lineNum":"  750","line":"_LIBCPP_INLINE_VISIBILITY inline"},
{"lineNum":"  751","line":"void __cxx_atomic_signal_fence(memory_order __order) {"},
{"lineNum":"  752","line":"  __atomic_signal_fence(__to_gcc_order(__order));"},
{"lineNum":"  753","line":"}"},
{"lineNum":"  754","line":""},
{"lineNum":"  755","line":"template <typename _Tp>"},
{"lineNum":"  756","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  757","line":"void __cxx_atomic_store(volatile __cxx_atomic_base_impl<_Tp>* __a,  _Tp __val,"},
{"lineNum":"  758","line":"                        memory_order __order) {"},
{"lineNum":"  759","line":"  __atomic_store(&__a->__a_value, &__val,"},
{"lineNum":"  760","line":"                 __to_gcc_order(__order));"},
{"lineNum":"  761","line":"}"},
{"lineNum":"  762","line":""},
{"lineNum":"  763","line":"template <typename _Tp>"},
{"lineNum":"  764","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  765","line":"void __cxx_atomic_store(__cxx_atomic_base_impl<_Tp>* __a,  _Tp __val,"},
{"lineNum":"  766","line":"                        memory_order __order) {"},
{"lineNum":"  767","line":"  __atomic_store(&__a->__a_value, &__val,"},
{"lineNum":"  768","line":"                 __to_gcc_order(__order));"},
{"lineNum":"  769","line":"}"},
{"lineNum":"  770","line":""},
{"lineNum":"  771","line":"template <typename _Tp>"},
{"lineNum":"  772","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  773","line":"_Tp __cxx_atomic_load(const volatile __cxx_atomic_base_impl<_Tp>* __a,"},
{"lineNum":"  774","line":"                      memory_order __order) {"},
{"lineNum":"  775","line":"  _Tp __ret;"},
{"lineNum":"  776","line":"  __atomic_load(&__a->__a_value, &__ret,"},
{"lineNum":"  777","line":"                __to_gcc_order(__order));"},
{"lineNum":"  778","line":"  return __ret;"},
{"lineNum":"  779","line":"}"},
{"lineNum":"  780","line":""},
{"lineNum":"  781","line":"template <typename _Tp>"},
{"lineNum":"  782","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  783","line":"_Tp __cxx_atomic_load(const __cxx_atomic_base_impl<_Tp>* __a, memory_order __order) {"},
{"lineNum":"  784","line":"  _Tp __ret;"},
{"lineNum":"  785","line":"  __atomic_load(&__a->__a_value, &__ret,"},
{"lineNum":"  786","line":"                __to_gcc_order(__order));"},
{"lineNum":"  787","line":"  return __ret;"},
{"lineNum":"  788","line":"}"},
{"lineNum":"  789","line":""},
{"lineNum":"  790","line":"template <typename _Tp>"},
{"lineNum":"  791","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  792","line":"_Tp __cxx_atomic_exchange(volatile __cxx_atomic_base_impl<_Tp>* __a,"},
{"lineNum":"  793","line":"                          _Tp __value, memory_order __order) {"},
{"lineNum":"  794","line":"  _Tp __ret;"},
{"lineNum":"  795","line":"  __atomic_exchange(&__a->__a_value, &__value, &__ret,"},
{"lineNum":"  796","line":"                    __to_gcc_order(__order));"},
{"lineNum":"  797","line":"  return __ret;"},
{"lineNum":"  798","line":"}"},
{"lineNum":"  799","line":""},
{"lineNum":"  800","line":"template <typename _Tp>"},
{"lineNum":"  801","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  802","line":"_Tp __cxx_atomic_exchange(__cxx_atomic_base_impl<_Tp>* __a, _Tp __value,"},
{"lineNum":"  803","line":"                          memory_order __order) {"},
{"lineNum":"  804","line":"  _Tp __ret;"},
{"lineNum":"  805","line":"  __atomic_exchange(&__a->__a_value, &__value, &__ret,"},
{"lineNum":"  806","line":"                    __to_gcc_order(__order));"},
{"lineNum":"  807","line":"  return __ret;"},
{"lineNum":"  808","line":"}"},
{"lineNum":"  809","line":""},
{"lineNum":"  810","line":"template <typename _Tp>"},
{"lineNum":"  811","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  812","line":"bool __cxx_atomic_compare_exchange_strong("},
{"lineNum":"  813","line":"    volatile __cxx_atomic_base_impl<_Tp>* __a, _Tp* __expected, _Tp __value,"},
{"lineNum":"  814","line":"    memory_order __success, memory_order __failure) {"},
{"lineNum":"  815","line":"  return __atomic_compare_exchange(&__a->__a_value, __expected, &__value,"},
{"lineNum":"  816","line":"                                   false,"},
{"lineNum":"  817","line":"                                   __to_gcc_order(__success),"},
{"lineNum":"  818","line":"                                   __to_gcc_failure_order(__failure));"},
{"lineNum":"  819","line":"}"},
{"lineNum":"  820","line":""},
{"lineNum":"  821","line":"template <typename _Tp>"},
{"lineNum":"  822","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  823","line":"bool __cxx_atomic_compare_exchange_strong("},
{"lineNum":"  824","line":"    __cxx_atomic_base_impl<_Tp>* __a, _Tp* __expected, _Tp __value, memory_order __success,"},
{"lineNum":"  825","line":"    memory_order __failure) {"},
{"lineNum":"  826","line":"  return __atomic_compare_exchange(&__a->__a_value, __expected, &__value,"},
{"lineNum":"  827","line":"                                   false,"},
{"lineNum":"  828","line":"                                   __to_gcc_order(__success),"},
{"lineNum":"  829","line":"                                   __to_gcc_failure_order(__failure));"},
{"lineNum":"  830","line":"}"},
{"lineNum":"  831","line":""},
{"lineNum":"  832","line":"template <typename _Tp>"},
{"lineNum":"  833","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  834","line":"bool __cxx_atomic_compare_exchange_weak("},
{"lineNum":"  835","line":"    volatile __cxx_atomic_base_impl<_Tp>* __a, _Tp* __expected, _Tp __value,"},
{"lineNum":"  836","line":"    memory_order __success, memory_order __failure) {"},
{"lineNum":"  837","line":"  return __atomic_compare_exchange(&__a->__a_value, __expected, &__value,"},
{"lineNum":"  838","line":"                                   true,"},
{"lineNum":"  839","line":"                                   __to_gcc_order(__success),"},
{"lineNum":"  840","line":"                                   __to_gcc_failure_order(__failure));"},
{"lineNum":"  841","line":"}"},
{"lineNum":"  842","line":""},
{"lineNum":"  843","line":"template <typename _Tp>"},
{"lineNum":"  844","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  845","line":"bool __cxx_atomic_compare_exchange_weak("},
{"lineNum":"  846","line":"    __cxx_atomic_base_impl<_Tp>* __a, _Tp* __expected, _Tp __value, memory_order __success,"},
{"lineNum":"  847","line":"    memory_order __failure) {"},
{"lineNum":"  848","line":"  return __atomic_compare_exchange(&__a->__a_value, __expected, &__value,"},
{"lineNum":"  849","line":"                                   true,"},
{"lineNum":"  850","line":"                                   __to_gcc_order(__success),"},
{"lineNum":"  851","line":"                                   __to_gcc_failure_order(__failure));"},
{"lineNum":"  852","line":"}"},
{"lineNum":"  853","line":""},
{"lineNum":"  854","line":"template <typename _Tp>"},
{"lineNum":"  855","line":"struct __skip_amt { enum {value = 1}; };"},
{"lineNum":"  856","line":""},
{"lineNum":"  857","line":"template <typename _Tp>"},
{"lineNum":"  858","line":"struct __skip_amt<_Tp*> { enum {value = sizeof(_Tp)}; };"},
{"lineNum":"  859","line":""},
{"lineNum":"  860","line":"// FIXME: Haven\'t figured out what the spec says about using arrays with"},
{"lineNum":"  861","line":"// atomic_fetch_add. Force a failure rather than creating bad behavior."},
{"lineNum":"  862","line":"template <typename _Tp>"},
{"lineNum":"  863","line":"struct __skip_amt<_Tp[]> { };"},
{"lineNum":"  864","line":"template <typename _Tp, int n>"},
{"lineNum":"  865","line":"struct __skip_amt<_Tp[n]> { };"},
{"lineNum":"  866","line":""},
{"lineNum":"  867","line":"template <typename _Tp, typename _Td>"},
{"lineNum":"  868","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  869","line":"_Tp __cxx_atomic_fetch_add(volatile __cxx_atomic_base_impl<_Tp>* __a,"},
{"lineNum":"  870","line":"                           _Td __delta, memory_order __order) {"},
{"lineNum":"  871","line":"  return __atomic_fetch_add(&__a->__a_value, __delta * __skip_amt<_Tp>::value,"},
{"lineNum":"  872","line":"                            __to_gcc_order(__order));"},
{"lineNum":"  873","line":"}"},
{"lineNum":"  874","line":""},
{"lineNum":"  875","line":"template <typename _Tp, typename _Td>"},
{"lineNum":"  876","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  877","line":"_Tp __cxx_atomic_fetch_add(__cxx_atomic_base_impl<_Tp>* __a, _Td __delta,"},
{"lineNum":"  878","line":"                           memory_order __order) {"},
{"lineNum":"  879","line":"  return __atomic_fetch_add(&__a->__a_value, __delta * __skip_amt<_Tp>::value,"},
{"lineNum":"  880","line":"                            __to_gcc_order(__order));"},
{"lineNum":"  881","line":"}"},
{"lineNum":"  882","line":""},
{"lineNum":"  883","line":"template <typename _Tp, typename _Td>"},
{"lineNum":"  884","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  885","line":"_Tp __cxx_atomic_fetch_sub(volatile __cxx_atomic_base_impl<_Tp>* __a,"},
{"lineNum":"  886","line":"                           _Td __delta, memory_order __order) {"},
{"lineNum":"  887","line":"  return __atomic_fetch_sub(&__a->__a_value, __delta * __skip_amt<_Tp>::value,"},
{"lineNum":"  888","line":"                            __to_gcc_order(__order));"},
{"lineNum":"  889","line":"}"},
{"lineNum":"  890","line":""},
{"lineNum":"  891","line":"template <typename _Tp, typename _Td>"},
{"lineNum":"  892","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  893","line":"_Tp __cxx_atomic_fetch_sub(__cxx_atomic_base_impl<_Tp>* __a, _Td __delta,"},
{"lineNum":"  894","line":"                           memory_order __order) {"},
{"lineNum":"  895","line":"  return __atomic_fetch_sub(&__a->__a_value, __delta * __skip_amt<_Tp>::value,"},
{"lineNum":"  896","line":"                            __to_gcc_order(__order));"},
{"lineNum":"  897","line":"}"},
{"lineNum":"  898","line":""},
{"lineNum":"  899","line":"template <typename _Tp>"},
{"lineNum":"  900","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  901","line":"_Tp __cxx_atomic_fetch_and(volatile __cxx_atomic_base_impl<_Tp>* __a,"},
{"lineNum":"  902","line":"                           _Tp __pattern, memory_order __order) {"},
{"lineNum":"  903","line":"  return __atomic_fetch_and(&__a->__a_value, __pattern,"},
{"lineNum":"  904","line":"                            __to_gcc_order(__order));"},
{"lineNum":"  905","line":"}"},
{"lineNum":"  906","line":""},
{"lineNum":"  907","line":"template <typename _Tp>"},
{"lineNum":"  908","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  909","line":"_Tp __cxx_atomic_fetch_and(__cxx_atomic_base_impl<_Tp>* __a,"},
{"lineNum":"  910","line":"                           _Tp __pattern, memory_order __order) {"},
{"lineNum":"  911","line":"  return __atomic_fetch_and(&__a->__a_value, __pattern,"},
{"lineNum":"  912","line":"                            __to_gcc_order(__order));"},
{"lineNum":"  913","line":"}"},
{"lineNum":"  914","line":""},
{"lineNum":"  915","line":"template <typename _Tp>"},
{"lineNum":"  916","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  917","line":"_Tp __cxx_atomic_fetch_or(volatile __cxx_atomic_base_impl<_Tp>* __a,"},
{"lineNum":"  918","line":"                          _Tp __pattern, memory_order __order) {"},
{"lineNum":"  919","line":"  return __atomic_fetch_or(&__a->__a_value, __pattern,"},
{"lineNum":"  920","line":"                           __to_gcc_order(__order));"},
{"lineNum":"  921","line":"}"},
{"lineNum":"  922","line":""},
{"lineNum":"  923","line":"template <typename _Tp>"},
{"lineNum":"  924","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  925","line":"_Tp __cxx_atomic_fetch_or(__cxx_atomic_base_impl<_Tp>* __a, _Tp __pattern,"},
{"lineNum":"  926","line":"                          memory_order __order) {"},
{"lineNum":"  927","line":"  return __atomic_fetch_or(&__a->__a_value, __pattern,"},
{"lineNum":"  928","line":"                           __to_gcc_order(__order));"},
{"lineNum":"  929","line":"}"},
{"lineNum":"  930","line":""},
{"lineNum":"  931","line":"template <typename _Tp>"},
{"lineNum":"  932","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  933","line":"_Tp __cxx_atomic_fetch_xor(volatile __cxx_atomic_base_impl<_Tp>* __a,"},
{"lineNum":"  934","line":"                           _Tp __pattern, memory_order __order) {"},
{"lineNum":"  935","line":"  return __atomic_fetch_xor(&__a->__a_value, __pattern,"},
{"lineNum":"  936","line":"                            __to_gcc_order(__order));"},
{"lineNum":"  937","line":"}"},
{"lineNum":"  938","line":""},
{"lineNum":"  939","line":"template <typename _Tp>"},
{"lineNum":"  940","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  941","line":"_Tp __cxx_atomic_fetch_xor(__cxx_atomic_base_impl<_Tp>* __a, _Tp __pattern,"},
{"lineNum":"  942","line":"                           memory_order __order) {"},
{"lineNum":"  943","line":"  return __atomic_fetch_xor(&__a->__a_value, __pattern,"},
{"lineNum":"  944","line":"                            __to_gcc_order(__order));"},
{"lineNum":"  945","line":"}"},
{"lineNum":"  946","line":""},
{"lineNum":"  947","line":"#define __cxx_atomic_is_lock_free(__s) __atomic_is_lock_free(__s, 0)"},
{"lineNum":"  948","line":""},
{"lineNum":"  949","line":"#elif defined(_LIBCPP_HAS_C_ATOMIC_IMP)"},
{"lineNum":"  950","line":""},
{"lineNum":"  951","line":"template <typename _Tp>"},
{"lineNum":"  952","line":"struct __cxx_atomic_base_impl {"},
{"lineNum":"  953","line":""},
{"lineNum":"  954","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  955","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  956","line":"    __cxx_atomic_base_impl() _NOEXCEPT = default;"},
{"lineNum":"  957","line":"#else"},
{"lineNum":"  958","line":"    __cxx_atomic_base_impl() _NOEXCEPT : __a_value() {}"},
{"lineNum":"  959","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":"  960","line":"  _LIBCPP_CONSTEXPR explicit __cxx_atomic_base_impl(_Tp value) _NOEXCEPT"},
{"lineNum":"  961","line":"    : __a_value(value) {}","class":"lineNoCov","hits":"0","possible_hits":"24",},
{"lineNum":"  962","line":"  _LIBCPP_DISABLE_EXTENSION_WARNING _Atomic(_Tp) __a_value;"},
{"lineNum":"  963","line":"};"},
{"lineNum":"  964","line":""},
{"lineNum":"  965","line":"#define __cxx_atomic_is_lock_free(__s) __c11_atomic_is_lock_free(__s)"},
{"lineNum":"  966","line":""},
{"lineNum":"  967","line":"_LIBCPP_INLINE_VISIBILITY inline"},
{"lineNum":"  968","line":"void __cxx_atomic_thread_fence(memory_order __order) _NOEXCEPT {"},
{"lineNum":"  969","line":"    __c11_atomic_thread_fence(static_cast<__memory_order_underlying_t>(__order));"},
{"lineNum":"  970","line":"}"},
{"lineNum":"  971","line":""},
{"lineNum":"  972","line":"_LIBCPP_INLINE_VISIBILITY inline"},
{"lineNum":"  973","line":"void __cxx_atomic_signal_fence(memory_order __order) _NOEXCEPT {"},
{"lineNum":"  974","line":"    __c11_atomic_signal_fence(static_cast<__memory_order_underlying_t>(__order));"},
{"lineNum":"  975","line":"}"},
{"lineNum":"  976","line":""},
{"lineNum":"  977","line":"template<class _Tp>"},
{"lineNum":"  978","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  979","line":"void __cxx_atomic_init(__cxx_atomic_base_impl<_Tp> volatile* __a, _Tp __val) _NOEXCEPT {"},
{"lineNum":"  980","line":"    __c11_atomic_init(&__a->__a_value, __val);"},
{"lineNum":"  981","line":"}"},
{"lineNum":"  982","line":"template<class _Tp>"},
{"lineNum":"  983","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  984","line":"void __cxx_atomic_init(__cxx_atomic_base_impl<_Tp> * __a, _Tp __val) _NOEXCEPT {"},
{"lineNum":"  985","line":"    __c11_atomic_init(&__a->__a_value, __val);"},
{"lineNum":"  986","line":"}"},
{"lineNum":"  987","line":""},
{"lineNum":"  988","line":"template<class _Tp>"},
{"lineNum":"  989","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  990","line":"void __cxx_atomic_store(__cxx_atomic_base_impl<_Tp> volatile* __a, _Tp __val, memory_order __order) _NOEXCEPT {"},
{"lineNum":"  991","line":"    __c11_atomic_store(&__a->__a_value, __val, static_cast<__memory_order_underlying_t>(__order));"},
{"lineNum":"  992","line":"}"},
{"lineNum":"  993","line":"template<class _Tp>"},
{"lineNum":"  994","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  995","line":"void __cxx_atomic_store(__cxx_atomic_base_impl<_Tp> * __a, _Tp __val, memory_order __order) _NOEXCEPT {"},
{"lineNum":"  996","line":"    __c11_atomic_store(&__a->__a_value, __val, static_cast<__memory_order_underlying_t>(__order));","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  997","line":"}"},
{"lineNum":"  998","line":""},
{"lineNum":"  999","line":"template<class _Tp>"},
{"lineNum":" 1000","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1001","line":"_Tp __cxx_atomic_load(__cxx_atomic_base_impl<_Tp> const volatile* __a, memory_order __order) _NOEXCEPT {"},
{"lineNum":" 1002","line":"    using __ptr_type = typename remove_const<decltype(__a->__a_value)>::type*;"},
{"lineNum":" 1003","line":"    return __c11_atomic_load(const_cast<__ptr_type>(&__a->__a_value), static_cast<__memory_order_underlying_t>(__order));"},
{"lineNum":" 1004","line":"}"},
{"lineNum":" 1005","line":"template<class _Tp>"},
{"lineNum":" 1006","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1007","line":"_Tp __cxx_atomic_load(__cxx_atomic_base_impl<_Tp> const* __a, memory_order __order) _NOEXCEPT {"},
{"lineNum":" 1008","line":"    using __ptr_type = typename remove_const<decltype(__a->__a_value)>::type*;"},
{"lineNum":" 1009","line":"    return __c11_atomic_load(const_cast<__ptr_type>(&__a->__a_value), static_cast<__memory_order_underlying_t>(__order));","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":" 1010","line":"}"},
{"lineNum":" 1011","line":""},
{"lineNum":" 1012","line":"template<class _Tp>"},
{"lineNum":" 1013","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1014","line":"_Tp __cxx_atomic_exchange(__cxx_atomic_base_impl<_Tp> volatile* __a, _Tp __value, memory_order __order) _NOEXCEPT {"},
{"lineNum":" 1015","line":"    return __c11_atomic_exchange(&__a->__a_value, __value, static_cast<__memory_order_underlying_t>(__order));"},
{"lineNum":" 1016","line":"}"},
{"lineNum":" 1017","line":"template<class _Tp>"},
{"lineNum":" 1018","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1019","line":"_Tp __cxx_atomic_exchange(__cxx_atomic_base_impl<_Tp> * __a, _Tp __value, memory_order __order) _NOEXCEPT {"},
{"lineNum":" 1020","line":"    return __c11_atomic_exchange(&__a->__a_value, __value, static_cast<__memory_order_underlying_t>(__order));"},
{"lineNum":" 1021","line":"}"},
{"lineNum":" 1022","line":""},
{"lineNum":" 1023","line":"_LIBCPP_INLINE_VISIBILITY inline _LIBCPP_CONSTEXPR memory_order __to_failure_order(memory_order __order) {"},
{"lineNum":" 1024","line":"  // Avoid switch statement to make this a constexpr."},
{"lineNum":" 1025","line":"  return __order == memory_order_release ? memory_order_relaxed:"},
{"lineNum":" 1026","line":"         (__order == memory_order_acq_rel ? memory_order_acquire:"},
{"lineNum":" 1027","line":"             __order);"},
{"lineNum":" 1028","line":"}"},
{"lineNum":" 1029","line":""},
{"lineNum":" 1030","line":"template<class _Tp>"},
{"lineNum":" 1031","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1032","line":"bool __cxx_atomic_compare_exchange_strong(__cxx_atomic_base_impl<_Tp> volatile* __a, _Tp* __expected, _Tp __value, memory_order __success, memory_order __failure) _NOEXCEPT {"},
{"lineNum":" 1033","line":"    return __c11_atomic_compare_exchange_strong(&__a->__a_value, __expected, __value, static_cast<__memory_order_underlying_t>(__success), static_cast<__memory_order_underlying_t>(__to_failure_order(__failure)));"},
{"lineNum":" 1034","line":"}"},
{"lineNum":" 1035","line":"template<class _Tp>"},
{"lineNum":" 1036","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1037","line":"bool __cxx_atomic_compare_exchange_strong(__cxx_atomic_base_impl<_Tp> * __a, _Tp* __expected, _Tp __value, memory_order __success, memory_order __failure) _NOEXCEPT {"},
{"lineNum":" 1038","line":"    return __c11_atomic_compare_exchange_strong(&__a->__a_value, __expected, __value, static_cast<__memory_order_underlying_t>(__success), static_cast<__memory_order_underlying_t>(__to_failure_order(__failure)));"},
{"lineNum":" 1039","line":"}"},
{"lineNum":" 1040","line":""},
{"lineNum":" 1041","line":"template<class _Tp>"},
{"lineNum":" 1042","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1043","line":"bool __cxx_atomic_compare_exchange_weak(__cxx_atomic_base_impl<_Tp> volatile* __a, _Tp* __expected, _Tp __value, memory_order __success, memory_order __failure) _NOEXCEPT {"},
{"lineNum":" 1044","line":"    return __c11_atomic_compare_exchange_weak(&__a->__a_value, __expected, __value, static_cast<__memory_order_underlying_t>(__success), static_cast<__memory_order_underlying_t>(__to_failure_order(__failure)));"},
{"lineNum":" 1045","line":"}"},
{"lineNum":" 1046","line":"template<class _Tp>"},
{"lineNum":" 1047","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1048","line":"bool __cxx_atomic_compare_exchange_weak(__cxx_atomic_base_impl<_Tp> * __a, _Tp* __expected, _Tp __value, memory_order __success, memory_order __failure) _NOEXCEPT {"},
{"lineNum":" 1049","line":"    return __c11_atomic_compare_exchange_weak(&__a->__a_value, __expected, __value,  static_cast<__memory_order_underlying_t>(__success), static_cast<__memory_order_underlying_t>(__to_failure_order(__failure)));"},
{"lineNum":" 1050","line":"}"},
{"lineNum":" 1051","line":""},
{"lineNum":" 1052","line":"template<class _Tp>"},
{"lineNum":" 1053","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1054","line":"_Tp __cxx_atomic_fetch_add(__cxx_atomic_base_impl<_Tp> volatile* __a, _Tp __delta, memory_order __order) _NOEXCEPT {"},
{"lineNum":" 1055","line":"    return __c11_atomic_fetch_add(&__a->__a_value, __delta, static_cast<__memory_order_underlying_t>(__order));"},
{"lineNum":" 1056","line":"}"},
{"lineNum":" 1057","line":"template<class _Tp>"},
{"lineNum":" 1058","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1059","line":"_Tp __cxx_atomic_fetch_add(__cxx_atomic_base_impl<_Tp> * __a, _Tp __delta, memory_order __order) _NOEXCEPT {"},
{"lineNum":" 1060","line":"    return __c11_atomic_fetch_add(&__a->__a_value, __delta, static_cast<__memory_order_underlying_t>(__order));"},
{"lineNum":" 1061","line":"}"},
{"lineNum":" 1062","line":""},
{"lineNum":" 1063","line":"template<class _Tp>"},
{"lineNum":" 1064","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1065","line":"_Tp* __cxx_atomic_fetch_add(__cxx_atomic_base_impl<_Tp*> volatile* __a, ptrdiff_t __delta, memory_order __order) _NOEXCEPT {"},
{"lineNum":" 1066","line":"    return __c11_atomic_fetch_add(&__a->__a_value, __delta, static_cast<__memory_order_underlying_t>(__order));"},
{"lineNum":" 1067","line":"}"},
{"lineNum":" 1068","line":"template<class _Tp>"},
{"lineNum":" 1069","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1070","line":"_Tp* __cxx_atomic_fetch_add(__cxx_atomic_base_impl<_Tp*> * __a, ptrdiff_t __delta, memory_order __order) _NOEXCEPT {"},
{"lineNum":" 1071","line":"    return __c11_atomic_fetch_add(&__a->__a_value, __delta, static_cast<__memory_order_underlying_t>(__order));"},
{"lineNum":" 1072","line":"}"},
{"lineNum":" 1073","line":""},
{"lineNum":" 1074","line":"template<class _Tp>"},
{"lineNum":" 1075","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1076","line":"_Tp __cxx_atomic_fetch_sub(__cxx_atomic_base_impl<_Tp> volatile* __a, _Tp __delta, memory_order __order) _NOEXCEPT {"},
{"lineNum":" 1077","line":"    return __c11_atomic_fetch_sub(&__a->__a_value, __delta, static_cast<__memory_order_underlying_t>(__order));"},
{"lineNum":" 1078","line":"}"},
{"lineNum":" 1079","line":"template<class _Tp>"},
{"lineNum":" 1080","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1081","line":"_Tp __cxx_atomic_fetch_sub(__cxx_atomic_base_impl<_Tp> * __a, _Tp __delta, memory_order __order) _NOEXCEPT {"},
{"lineNum":" 1082","line":"    return __c11_atomic_fetch_sub(&__a->__a_value, __delta, static_cast<__memory_order_underlying_t>(__order));","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":" 1083","line":"}"},
{"lineNum":" 1084","line":"template<class _Tp>"},
{"lineNum":" 1085","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1086","line":"_Tp* __cxx_atomic_fetch_sub(__cxx_atomic_base_impl<_Tp*> volatile* __a, ptrdiff_t __delta, memory_order __order) _NOEXCEPT {"},
{"lineNum":" 1087","line":"    return __c11_atomic_fetch_sub(&__a->__a_value, __delta, static_cast<__memory_order_underlying_t>(__order));"},
{"lineNum":" 1088","line":"}"},
{"lineNum":" 1089","line":"template<class _Tp>"},
{"lineNum":" 1090","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1091","line":"_Tp* __cxx_atomic_fetch_sub(__cxx_atomic_base_impl<_Tp*> * __a, ptrdiff_t __delta, memory_order __order) _NOEXCEPT {"},
{"lineNum":" 1092","line":"    return __c11_atomic_fetch_sub(&__a->__a_value, __delta, static_cast<__memory_order_underlying_t>(__order));"},
{"lineNum":" 1093","line":"}"},
{"lineNum":" 1094","line":""},
{"lineNum":" 1095","line":"template<class _Tp>"},
{"lineNum":" 1096","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1097","line":"_Tp __cxx_atomic_fetch_and(__cxx_atomic_base_impl<_Tp> volatile* __a, _Tp __pattern, memory_order __order) _NOEXCEPT {"},
{"lineNum":" 1098","line":"    return __c11_atomic_fetch_and(&__a->__a_value, __pattern, static_cast<__memory_order_underlying_t>(__order));"},
{"lineNum":" 1099","line":"}"},
{"lineNum":" 1100","line":"template<class _Tp>"},
{"lineNum":" 1101","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1102","line":"_Tp __cxx_atomic_fetch_and(__cxx_atomic_base_impl<_Tp> * __a, _Tp __pattern, memory_order __order) _NOEXCEPT {"},
{"lineNum":" 1103","line":"    return __c11_atomic_fetch_and(&__a->__a_value, __pattern, static_cast<__memory_order_underlying_t>(__order));"},
{"lineNum":" 1104","line":"}"},
{"lineNum":" 1105","line":""},
{"lineNum":" 1106","line":"template<class _Tp>"},
{"lineNum":" 1107","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1108","line":"_Tp __cxx_atomic_fetch_or(__cxx_atomic_base_impl<_Tp> volatile* __a, _Tp __pattern, memory_order __order) _NOEXCEPT {"},
{"lineNum":" 1109","line":"    return __c11_atomic_fetch_or(&__a->__a_value, __pattern, static_cast<__memory_order_underlying_t>(__order));"},
{"lineNum":" 1110","line":"}"},
{"lineNum":" 1111","line":"template<class _Tp>"},
{"lineNum":" 1112","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1113","line":"_Tp __cxx_atomic_fetch_or(__cxx_atomic_base_impl<_Tp> * __a, _Tp __pattern, memory_order __order) _NOEXCEPT {"},
{"lineNum":" 1114","line":"    return __c11_atomic_fetch_or(&__a->__a_value, __pattern, static_cast<__memory_order_underlying_t>(__order));"},
{"lineNum":" 1115","line":"}"},
{"lineNum":" 1116","line":""},
{"lineNum":" 1117","line":"template<class _Tp>"},
{"lineNum":" 1118","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1119","line":"_Tp __cxx_atomic_fetch_xor(__cxx_atomic_base_impl<_Tp> volatile* __a, _Tp __pattern, memory_order __order) _NOEXCEPT {"},
{"lineNum":" 1120","line":"    return __c11_atomic_fetch_xor(&__a->__a_value, __pattern, static_cast<__memory_order_underlying_t>(__order));"},
{"lineNum":" 1121","line":"}"},
{"lineNum":" 1122","line":"template<class _Tp>"},
{"lineNum":" 1123","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1124","line":"_Tp __cxx_atomic_fetch_xor(__cxx_atomic_base_impl<_Tp> * __a, _Tp __pattern, memory_order __order) _NOEXCEPT {"},
{"lineNum":" 1125","line":"    return __c11_atomic_fetch_xor(&__a->__a_value, __pattern, static_cast<__memory_order_underlying_t>(__order));"},
{"lineNum":" 1126","line":"}"},
{"lineNum":" 1127","line":""},
{"lineNum":" 1128","line":"#endif // _LIBCPP_HAS_GCC_ATOMIC_IMP, _LIBCPP_HAS_C_ATOMIC_IMP"},
{"lineNum":" 1129","line":""},
{"lineNum":" 1130","line":"template <class _Tp>"},
{"lineNum":" 1131","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1132","line":"_Tp kill_dependency(_Tp __y) _NOEXCEPT"},
{"lineNum":" 1133","line":"{"},
{"lineNum":" 1134","line":"    return __y;"},
{"lineNum":" 1135","line":"}"},
{"lineNum":" 1136","line":""},
{"lineNum":" 1137","line":"#if defined(__CLANG_ATOMIC_BOOL_LOCK_FREE)"},
{"lineNum":" 1138","line":"# define ATOMIC_BOOL_LOCK_FREE      __CLANG_ATOMIC_BOOL_LOCK_FREE"},
{"lineNum":" 1139","line":"# define ATOMIC_CHAR_LOCK_FREE      __CLANG_ATOMIC_CHAR_LOCK_FREE"},
{"lineNum":" 1140","line":"#ifndef _LIBCPP_HAS_NO_CHAR8_T"},
{"lineNum":" 1141","line":"# define ATOMIC_CHAR8_T_LOCK_FREE   __CLANG_ATOMIC_CHAR8_T_LOCK_FREE"},
{"lineNum":" 1142","line":"#endif"},
{"lineNum":" 1143","line":"# define ATOMIC_CHAR16_T_LOCK_FREE  __CLANG_ATOMIC_CHAR16_T_LOCK_FREE"},
{"lineNum":" 1144","line":"# define ATOMIC_CHAR32_T_LOCK_FREE  __CLANG_ATOMIC_CHAR32_T_LOCK_FREE"},
{"lineNum":" 1145","line":"# define ATOMIC_WCHAR_T_LOCK_FREE   __CLANG_ATOMIC_WCHAR_T_LOCK_FREE"},
{"lineNum":" 1146","line":"# define ATOMIC_SHORT_LOCK_FREE     __CLANG_ATOMIC_SHORT_LOCK_FREE"},
{"lineNum":" 1147","line":"# define ATOMIC_INT_LOCK_FREE       __CLANG_ATOMIC_INT_LOCK_FREE"},
{"lineNum":" 1148","line":"# define ATOMIC_LONG_LOCK_FREE      __CLANG_ATOMIC_LONG_LOCK_FREE"},
{"lineNum":" 1149","line":"# define ATOMIC_LLONG_LOCK_FREE     __CLANG_ATOMIC_LLONG_LOCK_FREE"},
{"lineNum":" 1150","line":"# define ATOMIC_POINTER_LOCK_FREE   __CLANG_ATOMIC_POINTER_LOCK_FREE"},
{"lineNum":" 1151","line":"#elif defined(__GCC_ATOMIC_BOOL_LOCK_FREE)"},
{"lineNum":" 1152","line":"# define ATOMIC_BOOL_LOCK_FREE      __GCC_ATOMIC_BOOL_LOCK_FREE"},
{"lineNum":" 1153","line":"# define ATOMIC_CHAR_LOCK_FREE      __GCC_ATOMIC_CHAR_LOCK_FREE"},
{"lineNum":" 1154","line":"#ifndef _LIBCPP_HAS_NO_CHAR8_T"},
{"lineNum":" 1155","line":"# define ATOMIC_CHAR8_T_LOCK_FREE   __GCC_ATOMIC_CHAR8_T_LOCK_FREE"},
{"lineNum":" 1156","line":"#endif"},
{"lineNum":" 1157","line":"# define ATOMIC_CHAR16_T_LOCK_FREE  __GCC_ATOMIC_CHAR16_T_LOCK_FREE"},
{"lineNum":" 1158","line":"# define ATOMIC_CHAR32_T_LOCK_FREE  __GCC_ATOMIC_CHAR32_T_LOCK_FREE"},
{"lineNum":" 1159","line":"# define ATOMIC_WCHAR_T_LOCK_FREE   __GCC_ATOMIC_WCHAR_T_LOCK_FREE"},
{"lineNum":" 1160","line":"# define ATOMIC_SHORT_LOCK_FREE     __GCC_ATOMIC_SHORT_LOCK_FREE"},
{"lineNum":" 1161","line":"# define ATOMIC_INT_LOCK_FREE       __GCC_ATOMIC_INT_LOCK_FREE"},
{"lineNum":" 1162","line":"# define ATOMIC_LONG_LOCK_FREE      __GCC_ATOMIC_LONG_LOCK_FREE"},
{"lineNum":" 1163","line":"# define ATOMIC_LLONG_LOCK_FREE     __GCC_ATOMIC_LLONG_LOCK_FREE"},
{"lineNum":" 1164","line":"# define ATOMIC_POINTER_LOCK_FREE   __GCC_ATOMIC_POINTER_LOCK_FREE"},
{"lineNum":" 1165","line":"#endif"},
{"lineNum":" 1166","line":""},
{"lineNum":" 1167","line":"#ifdef _LIBCPP_ATOMIC_ONLY_USE_BUILTINS"},
{"lineNum":" 1168","line":""},
{"lineNum":" 1169","line":"template<typename _Tp>"},
{"lineNum":" 1170","line":"struct __cxx_atomic_lock_impl {"},
{"lineNum":" 1171","line":""},
{"lineNum":" 1172","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1173","line":"  __cxx_atomic_lock_impl() _NOEXCEPT"},
{"lineNum":" 1174","line":"    : __a_value(), __a_lock(0) {}"},
{"lineNum":" 1175","line":"  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR explicit"},
{"lineNum":" 1176","line":"  __cxx_atomic_lock_impl(_Tp value) _NOEXCEPT"},
{"lineNum":" 1177","line":"    : __a_value(value), __a_lock(0) {}"},
{"lineNum":" 1178","line":""},
{"lineNum":" 1179","line":"  _Tp __a_value;"},
{"lineNum":" 1180","line":"  mutable __cxx_atomic_base_impl<_LIBCPP_ATOMIC_FLAG_TYPE> __a_lock;"},
{"lineNum":" 1181","line":""},
{"lineNum":" 1182","line":"  _LIBCPP_INLINE_VISIBILITY void __lock() const volatile {"},
{"lineNum":" 1183","line":"    while(1 == __cxx_atomic_exchange(&__a_lock, _LIBCPP_ATOMIC_FLAG_TYPE(true), memory_order_acquire))"},
{"lineNum":" 1184","line":"        /*spin*/;"},
{"lineNum":" 1185","line":"  }"},
{"lineNum":" 1186","line":"  _LIBCPP_INLINE_VISIBILITY void __lock() const {"},
{"lineNum":" 1187","line":"    while(1 == __cxx_atomic_exchange(&__a_lock, _LIBCPP_ATOMIC_FLAG_TYPE(true), memory_order_acquire))"},
{"lineNum":" 1188","line":"        /*spin*/;"},
{"lineNum":" 1189","line":"  }"},
{"lineNum":" 1190","line":"  _LIBCPP_INLINE_VISIBILITY void __unlock() const volatile {"},
{"lineNum":" 1191","line":"    __cxx_atomic_store(&__a_lock, _LIBCPP_ATOMIC_FLAG_TYPE(false), memory_order_release);"},
{"lineNum":" 1192","line":"  }"},
{"lineNum":" 1193","line":"  _LIBCPP_INLINE_VISIBILITY void __unlock() const {"},
{"lineNum":" 1194","line":"    __cxx_atomic_store(&__a_lock, _LIBCPP_ATOMIC_FLAG_TYPE(false), memory_order_release);"},
{"lineNum":" 1195","line":"  }"},
{"lineNum":" 1196","line":"  _LIBCPP_INLINE_VISIBILITY _Tp __read() const volatile {"},
{"lineNum":" 1197","line":"    __lock();"},
{"lineNum":" 1198","line":"    _Tp __old;"},
{"lineNum":" 1199","line":"    __cxx_atomic_assign_volatile(__old, __a_value);"},
{"lineNum":" 1200","line":"    __unlock();"},
{"lineNum":" 1201","line":"    return __old;"},
{"lineNum":" 1202","line":"  }"},
{"lineNum":" 1203","line":"  _LIBCPP_INLINE_VISIBILITY _Tp __read() const {"},
{"lineNum":" 1204","line":"    __lock();"},
{"lineNum":" 1205","line":"    _Tp __old = __a_value;"},
{"lineNum":" 1206","line":"    __unlock();"},
{"lineNum":" 1207","line":"    return __old;"},
{"lineNum":" 1208","line":"  }"},
{"lineNum":" 1209","line":"};"},
{"lineNum":" 1210","line":""},
{"lineNum":" 1211","line":"template <typename _Tp>"},
{"lineNum":" 1212","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1213","line":"void __cxx_atomic_init(volatile __cxx_atomic_lock_impl<_Tp>* __a,  _Tp __val) {"},
{"lineNum":" 1214","line":"  __cxx_atomic_assign_volatile(__a->__a_value, __val);"},
{"lineNum":" 1215","line":"}"},
{"lineNum":" 1216","line":"template <typename _Tp>"},
{"lineNum":" 1217","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1218","line":"void __cxx_atomic_init(__cxx_atomic_lock_impl<_Tp>* __a,  _Tp __val) {"},
{"lineNum":" 1219","line":"  __a->__a_value = __val;"},
{"lineNum":" 1220","line":"}"},
{"lineNum":" 1221","line":""},
{"lineNum":" 1222","line":"template <typename _Tp>"},
{"lineNum":" 1223","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1224","line":"void __cxx_atomic_store(volatile __cxx_atomic_lock_impl<_Tp>* __a,  _Tp __val, memory_order) {"},
{"lineNum":" 1225","line":"  __a->__lock();"},
{"lineNum":" 1226","line":"  __cxx_atomic_assign_volatile(__a->__a_value, __val);"},
{"lineNum":" 1227","line":"  __a->__unlock();"},
{"lineNum":" 1228","line":"}"},
{"lineNum":" 1229","line":"template <typename _Tp>"},
{"lineNum":" 1230","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1231","line":"void __cxx_atomic_store(__cxx_atomic_lock_impl<_Tp>* __a,  _Tp __val, memory_order) {"},
{"lineNum":" 1232","line":"  __a->__lock();"},
{"lineNum":" 1233","line":"  __a->__a_value = __val;"},
{"lineNum":" 1234","line":"  __a->__unlock();"},
{"lineNum":" 1235","line":"}"},
{"lineNum":" 1236","line":""},
{"lineNum":" 1237","line":"template <typename _Tp>"},
{"lineNum":" 1238","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1239","line":"_Tp __cxx_atomic_load(const volatile __cxx_atomic_lock_impl<_Tp>* __a, memory_order) {"},
{"lineNum":" 1240","line":"  return __a->__read();"},
{"lineNum":" 1241","line":"}"},
{"lineNum":" 1242","line":"template <typename _Tp>"},
{"lineNum":" 1243","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1244","line":"_Tp __cxx_atomic_load(const __cxx_atomic_lock_impl<_Tp>* __a, memory_order) {"},
{"lineNum":" 1245","line":"  return __a->__read();"},
{"lineNum":" 1246","line":"}"},
{"lineNum":" 1247","line":""},
{"lineNum":" 1248","line":"template <typename _Tp>"},
{"lineNum":" 1249","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1250","line":"_Tp __cxx_atomic_exchange(volatile __cxx_atomic_lock_impl<_Tp>* __a, _Tp __value, memory_order) {"},
{"lineNum":" 1251","line":"  __a->__lock();"},
{"lineNum":" 1252","line":"  _Tp __old;"},
{"lineNum":" 1253","line":"  __cxx_atomic_assign_volatile(__old, __a->__a_value);"},
{"lineNum":" 1254","line":"  __cxx_atomic_assign_volatile(__a->__a_value, __value);"},
{"lineNum":" 1255","line":"  __a->__unlock();"},
{"lineNum":" 1256","line":"  return __old;"},
{"lineNum":" 1257","line":"}"},
{"lineNum":" 1258","line":"template <typename _Tp>"},
{"lineNum":" 1259","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1260","line":"_Tp __cxx_atomic_exchange(__cxx_atomic_lock_impl<_Tp>* __a, _Tp __value, memory_order) {"},
{"lineNum":" 1261","line":"  __a->__lock();"},
{"lineNum":" 1262","line":"  _Tp __old = __a->__a_value;"},
{"lineNum":" 1263","line":"  __a->__a_value = __value;"},
{"lineNum":" 1264","line":"  __a->__unlock();"},
{"lineNum":" 1265","line":"  return __old;"},
{"lineNum":" 1266","line":"}"},
{"lineNum":" 1267","line":""},
{"lineNum":" 1268","line":"template <typename _Tp>"},
{"lineNum":" 1269","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1270","line":"bool __cxx_atomic_compare_exchange_strong(volatile __cxx_atomic_lock_impl<_Tp>* __a,"},
{"lineNum":" 1271","line":"                                          _Tp* __expected, _Tp __value, memory_order, memory_order) {"},
{"lineNum":" 1272","line":"  _Tp __temp;"},
{"lineNum":" 1273","line":"  __a->__lock();"},
{"lineNum":" 1274","line":"  __cxx_atomic_assign_volatile(__temp, __a->__a_value);"},
{"lineNum":" 1275","line":"  bool __ret = (_VSTD::memcmp(&__temp, __expected, sizeof(_Tp)) == 0);"},
{"lineNum":" 1276","line":"  if(__ret)"},
{"lineNum":" 1277","line":"    __cxx_atomic_assign_volatile(__a->__a_value, __value);"},
{"lineNum":" 1278","line":"  else"},
{"lineNum":" 1279","line":"    __cxx_atomic_assign_volatile(*__expected, __a->__a_value);"},
{"lineNum":" 1280","line":"  __a->__unlock();"},
{"lineNum":" 1281","line":"  return __ret;"},
{"lineNum":" 1282","line":"}"},
{"lineNum":" 1283","line":"template <typename _Tp>"},
{"lineNum":" 1284","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1285","line":"bool __cxx_atomic_compare_exchange_strong(__cxx_atomic_lock_impl<_Tp>* __a,"},
{"lineNum":" 1286","line":"                                          _Tp* __expected, _Tp __value, memory_order, memory_order) {"},
{"lineNum":" 1287","line":"  __a->__lock();"},
{"lineNum":" 1288","line":"  bool __ret = (_VSTD::memcmp(&__a->__a_value, __expected, sizeof(_Tp)) == 0);"},
{"lineNum":" 1289","line":"  if(__ret)"},
{"lineNum":" 1290","line":"    _VSTD::memcpy(&__a->__a_value, &__value, sizeof(_Tp));"},
{"lineNum":" 1291","line":"  else"},
{"lineNum":" 1292","line":"    _VSTD::memcpy(__expected, &__a->__a_value, sizeof(_Tp));"},
{"lineNum":" 1293","line":"  __a->__unlock();"},
{"lineNum":" 1294","line":"  return __ret;"},
{"lineNum":" 1295","line":"}"},
{"lineNum":" 1296","line":""},
{"lineNum":" 1297","line":"template <typename _Tp>"},
{"lineNum":" 1298","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1299","line":"bool __cxx_atomic_compare_exchange_weak(volatile __cxx_atomic_lock_impl<_Tp>* __a,"},
{"lineNum":" 1300","line":"                                        _Tp* __expected, _Tp __value, memory_order, memory_order) {"},
{"lineNum":" 1301","line":"  _Tp __temp;"},
{"lineNum":" 1302","line":"  __a->__lock();"},
{"lineNum":" 1303","line":"  __cxx_atomic_assign_volatile(__temp, __a->__a_value);"},
{"lineNum":" 1304","line":"  bool __ret = (_VSTD::memcmp(&__temp, __expected, sizeof(_Tp)) == 0);"},
{"lineNum":" 1305","line":"  if(__ret)"},
{"lineNum":" 1306","line":"    __cxx_atomic_assign_volatile(__a->__a_value, __value);"},
{"lineNum":" 1307","line":"  else"},
{"lineNum":" 1308","line":"    __cxx_atomic_assign_volatile(*__expected, __a->__a_value);"},
{"lineNum":" 1309","line":"  __a->__unlock();"},
{"lineNum":" 1310","line":"  return __ret;"},
{"lineNum":" 1311","line":"}"},
{"lineNum":" 1312","line":"template <typename _Tp>"},
{"lineNum":" 1313","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1314","line":"bool __cxx_atomic_compare_exchange_weak(__cxx_atomic_lock_impl<_Tp>* __a,"},
{"lineNum":" 1315","line":"                                        _Tp* __expected, _Tp __value, memory_order, memory_order) {"},
{"lineNum":" 1316","line":"  __a->__lock();"},
{"lineNum":" 1317","line":"  bool __ret = (_VSTD::memcmp(&__a->__a_value, __expected, sizeof(_Tp)) == 0);"},
{"lineNum":" 1318","line":"  if(__ret)"},
{"lineNum":" 1319","line":"    _VSTD::memcpy(&__a->__a_value, &__value, sizeof(_Tp));"},
{"lineNum":" 1320","line":"  else"},
{"lineNum":" 1321","line":"    _VSTD::memcpy(__expected, &__a->__a_value, sizeof(_Tp));"},
{"lineNum":" 1322","line":"  __a->__unlock();"},
{"lineNum":" 1323","line":"  return __ret;"},
{"lineNum":" 1324","line":"}"},
{"lineNum":" 1325","line":""},
{"lineNum":" 1326","line":"template <typename _Tp, typename _Td>"},
{"lineNum":" 1327","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1328","line":"_Tp __cxx_atomic_fetch_add(volatile __cxx_atomic_lock_impl<_Tp>* __a,"},
{"lineNum":" 1329","line":"                           _Td __delta, memory_order) {"},
{"lineNum":" 1330","line":"  __a->__lock();"},
{"lineNum":" 1331","line":"  _Tp __old;"},
{"lineNum":" 1332","line":"  __cxx_atomic_assign_volatile(__old, __a->__a_value);"},
{"lineNum":" 1333","line":"  __cxx_atomic_assign_volatile(__a->__a_value, _Tp(__old + __delta));"},
{"lineNum":" 1334","line":"  __a->__unlock();"},
{"lineNum":" 1335","line":"  return __old;"},
{"lineNum":" 1336","line":"}"},
{"lineNum":" 1337","line":"template <typename _Tp, typename _Td>"},
{"lineNum":" 1338","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1339","line":"_Tp __cxx_atomic_fetch_add(__cxx_atomic_lock_impl<_Tp>* __a,"},
{"lineNum":" 1340","line":"                           _Td __delta, memory_order) {"},
{"lineNum":" 1341","line":"  __a->__lock();"},
{"lineNum":" 1342","line":"  _Tp __old = __a->__a_value;"},
{"lineNum":" 1343","line":"  __a->__a_value += __delta;"},
{"lineNum":" 1344","line":"  __a->__unlock();"},
{"lineNum":" 1345","line":"  return __old;"},
{"lineNum":" 1346","line":"}"},
{"lineNum":" 1347","line":""},
{"lineNum":" 1348","line":"template <typename _Tp, typename _Td>"},
{"lineNum":" 1349","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1350","line":"_Tp* __cxx_atomic_fetch_add(volatile __cxx_atomic_lock_impl<_Tp*>* __a,"},
{"lineNum":" 1351","line":"                           ptrdiff_t __delta, memory_order) {"},
{"lineNum":" 1352","line":"  __a->__lock();"},
{"lineNum":" 1353","line":"  _Tp* __old;"},
{"lineNum":" 1354","line":"  __cxx_atomic_assign_volatile(__old, __a->__a_value);"},
{"lineNum":" 1355","line":"  __cxx_atomic_assign_volatile(__a->__a_value, __old + __delta);"},
{"lineNum":" 1356","line":"  __a->__unlock();"},
{"lineNum":" 1357","line":"  return __old;"},
{"lineNum":" 1358","line":"}"},
{"lineNum":" 1359","line":"template <typename _Tp, typename _Td>"},
{"lineNum":" 1360","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1361","line":"_Tp* __cxx_atomic_fetch_add(__cxx_atomic_lock_impl<_Tp*>* __a,"},
{"lineNum":" 1362","line":"                           ptrdiff_t __delta, memory_order) {"},
{"lineNum":" 1363","line":"  __a->__lock();"},
{"lineNum":" 1364","line":"  _Tp* __old = __a->__a_value;"},
{"lineNum":" 1365","line":"  __a->__a_value += __delta;"},
{"lineNum":" 1366","line":"  __a->__unlock();"},
{"lineNum":" 1367","line":"  return __old;"},
{"lineNum":" 1368","line":"}"},
{"lineNum":" 1369","line":""},
{"lineNum":" 1370","line":"template <typename _Tp, typename _Td>"},
{"lineNum":" 1371","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1372","line":"_Tp __cxx_atomic_fetch_sub(volatile __cxx_atomic_lock_impl<_Tp>* __a,"},
{"lineNum":" 1373","line":"                           _Td __delta, memory_order) {"},
{"lineNum":" 1374","line":"  __a->__lock();"},
{"lineNum":" 1375","line":"  _Tp __old;"},
{"lineNum":" 1376","line":"  __cxx_atomic_assign_volatile(__old, __a->__a_value);"},
{"lineNum":" 1377","line":"  __cxx_atomic_assign_volatile(__a->__a_value, _Tp(__old - __delta));"},
{"lineNum":" 1378","line":"  __a->__unlock();"},
{"lineNum":" 1379","line":"  return __old;"},
{"lineNum":" 1380","line":"}"},
{"lineNum":" 1381","line":"template <typename _Tp, typename _Td>"},
{"lineNum":" 1382","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1383","line":"_Tp __cxx_atomic_fetch_sub(__cxx_atomic_lock_impl<_Tp>* __a,"},
{"lineNum":" 1384","line":"                           _Td __delta, memory_order) {"},
{"lineNum":" 1385","line":"  __a->__lock();"},
{"lineNum":" 1386","line":"  _Tp __old = __a->__a_value;"},
{"lineNum":" 1387","line":"  __a->__a_value -= __delta;"},
{"lineNum":" 1388","line":"  __a->__unlock();"},
{"lineNum":" 1389","line":"  return __old;"},
{"lineNum":" 1390","line":"}"},
{"lineNum":" 1391","line":""},
{"lineNum":" 1392","line":"template <typename _Tp>"},
{"lineNum":" 1393","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1394","line":"_Tp __cxx_atomic_fetch_and(volatile __cxx_atomic_lock_impl<_Tp>* __a,"},
{"lineNum":" 1395","line":"                           _Tp __pattern, memory_order) {"},
{"lineNum":" 1396","line":"  __a->__lock();"},
{"lineNum":" 1397","line":"  _Tp __old;"},
{"lineNum":" 1398","line":"  __cxx_atomic_assign_volatile(__old, __a->__a_value);"},
{"lineNum":" 1399","line":"  __cxx_atomic_assign_volatile(__a->__a_value, _Tp(__old & __pattern));"},
{"lineNum":" 1400","line":"  __a->__unlock();"},
{"lineNum":" 1401","line":"  return __old;"},
{"lineNum":" 1402","line":"}"},
{"lineNum":" 1403","line":"template <typename _Tp>"},
{"lineNum":" 1404","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1405","line":"_Tp __cxx_atomic_fetch_and(__cxx_atomic_lock_impl<_Tp>* __a,"},
{"lineNum":" 1406","line":"                           _Tp __pattern, memory_order) {"},
{"lineNum":" 1407","line":"  __a->__lock();"},
{"lineNum":" 1408","line":"  _Tp __old = __a->__a_value;"},
{"lineNum":" 1409","line":"  __a->__a_value &= __pattern;"},
{"lineNum":" 1410","line":"  __a->__unlock();"},
{"lineNum":" 1411","line":"  return __old;"},
{"lineNum":" 1412","line":"}"},
{"lineNum":" 1413","line":""},
{"lineNum":" 1414","line":"template <typename _Tp>"},
{"lineNum":" 1415","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1416","line":"_Tp __cxx_atomic_fetch_or(volatile __cxx_atomic_lock_impl<_Tp>* __a,"},
{"lineNum":" 1417","line":"                          _Tp __pattern, memory_order) {"},
{"lineNum":" 1418","line":"  __a->__lock();"},
{"lineNum":" 1419","line":"  _Tp __old;"},
{"lineNum":" 1420","line":"  __cxx_atomic_assign_volatile(__old, __a->__a_value);"},
{"lineNum":" 1421","line":"  __cxx_atomic_assign_volatile(__a->__a_value, _Tp(__old | __pattern));"},
{"lineNum":" 1422","line":"  __a->__unlock();"},
{"lineNum":" 1423","line":"  return __old;"},
{"lineNum":" 1424","line":"}"},
{"lineNum":" 1425","line":"template <typename _Tp>"},
{"lineNum":" 1426","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1427","line":"_Tp __cxx_atomic_fetch_or(__cxx_atomic_lock_impl<_Tp>* __a,"},
{"lineNum":" 1428","line":"                          _Tp __pattern, memory_order) {"},
{"lineNum":" 1429","line":"  __a->__lock();"},
{"lineNum":" 1430","line":"  _Tp __old = __a->__a_value;"},
{"lineNum":" 1431","line":"  __a->__a_value |= __pattern;"},
{"lineNum":" 1432","line":"  __a->__unlock();"},
{"lineNum":" 1433","line":"  return __old;"},
{"lineNum":" 1434","line":"}"},
{"lineNum":" 1435","line":""},
{"lineNum":" 1436","line":"template <typename _Tp>"},
{"lineNum":" 1437","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1438","line":"_Tp __cxx_atomic_fetch_xor(volatile __cxx_atomic_lock_impl<_Tp>* __a,"},
{"lineNum":" 1439","line":"                           _Tp __pattern, memory_order) {"},
{"lineNum":" 1440","line":"  __a->__lock();"},
{"lineNum":" 1441","line":"  _Tp __old;"},
{"lineNum":" 1442","line":"  __cxx_atomic_assign_volatile(__old, __a->__a_value);"},
{"lineNum":" 1443","line":"  __cxx_atomic_assign_volatile(__a->__a_value, _Tp(__old ^ __pattern));"},
{"lineNum":" 1444","line":"  __a->__unlock();"},
{"lineNum":" 1445","line":"  return __old;"},
{"lineNum":" 1446","line":"}"},
{"lineNum":" 1447","line":"template <typename _Tp>"},
{"lineNum":" 1448","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1449","line":"_Tp __cxx_atomic_fetch_xor(__cxx_atomic_lock_impl<_Tp>* __a,"},
{"lineNum":" 1450","line":"                           _Tp __pattern, memory_order) {"},
{"lineNum":" 1451","line":"  __a->__lock();"},
{"lineNum":" 1452","line":"  _Tp __old = __a->__a_value;"},
{"lineNum":" 1453","line":"  __a->__a_value ^= __pattern;"},
{"lineNum":" 1454","line":"  __a->__unlock();"},
{"lineNum":" 1455","line":"  return __old;"},
{"lineNum":" 1456","line":"}"},
{"lineNum":" 1457","line":""},
{"lineNum":" 1458","line":"#ifdef __cpp_lib_atomic_is_always_lock_free"},
{"lineNum":" 1459","line":""},
{"lineNum":" 1460","line":"template<typename _Tp> struct __cxx_is_always_lock_free {"},
{"lineNum":" 1461","line":"    enum { __value = __atomic_always_lock_free(sizeof(_Tp), 0) }; };"},
{"lineNum":" 1462","line":""},
{"lineNum":" 1463","line":"#else"},
{"lineNum":" 1464","line":""},
{"lineNum":" 1465","line":"template<typename _Tp> struct __cxx_is_always_lock_free { enum { __value = false }; };"},
{"lineNum":" 1466","line":"// Implementations must match the C ATOMIC_*_LOCK_FREE macro values."},
{"lineNum":" 1467","line":"template<> struct __cxx_is_always_lock_free<bool> { enum { __value = 2 == ATOMIC_BOOL_LOCK_FREE }; };"},
{"lineNum":" 1468","line":"template<> struct __cxx_is_always_lock_free<char> { enum { __value = 2 == ATOMIC_CHAR_LOCK_FREE }; };"},
{"lineNum":" 1469","line":"template<> struct __cxx_is_always_lock_free<signed char> { enum { __value = 2 == ATOMIC_CHAR_LOCK_FREE }; };"},
{"lineNum":" 1470","line":"template<> struct __cxx_is_always_lock_free<unsigned char> { enum { __value = 2 == ATOMIC_CHAR_LOCK_FREE }; };"},
{"lineNum":" 1471","line":"#ifndef _LIBCPP_HAS_NO_CHAR8_T"},
{"lineNum":" 1472","line":"template<> struct __cxx_is_always_lock_free<char8_t> { enum { __value = 2 == ATOMIC_CHAR8_T_LOCK_FREE }; };"},
{"lineNum":" 1473","line":"#endif"},
{"lineNum":" 1474","line":"template<> struct __cxx_is_always_lock_free<char16_t> { enum { __value = 2 == ATOMIC_CHAR16_T_LOCK_FREE }; };"},
{"lineNum":" 1475","line":"template<> struct __cxx_is_always_lock_free<char32_t> { enum { __value = 2 == ATOMIC_CHAR32_T_LOCK_FREE }; };"},
{"lineNum":" 1476","line":"template<> struct __cxx_is_always_lock_free<wchar_t> { enum { __value = 2 == ATOMIC_WCHAR_T_LOCK_FREE }; };"},
{"lineNum":" 1477","line":"template<> struct __cxx_is_always_lock_free<short> { enum { __value = 2 == ATOMIC_SHORT_LOCK_FREE }; };"},
{"lineNum":" 1478","line":"template<> struct __cxx_is_always_lock_free<unsigned short> { enum { __value = 2 == ATOMIC_SHORT_LOCK_FREE }; };"},
{"lineNum":" 1479","line":"template<> struct __cxx_is_always_lock_free<int> { enum { __value = 2 == ATOMIC_INT_LOCK_FREE }; };"},
{"lineNum":" 1480","line":"template<> struct __cxx_is_always_lock_free<unsigned int> { enum { __value = 2 == ATOMIC_INT_LOCK_FREE }; };"},
{"lineNum":" 1481","line":"template<> struct __cxx_is_always_lock_free<long> { enum { __value = 2 == ATOMIC_LONG_LOCK_FREE }; };"},
{"lineNum":" 1482","line":"template<> struct __cxx_is_always_lock_free<unsigned long> { enum { __value = 2 == ATOMIC_LONG_LOCK_FREE }; };"},
{"lineNum":" 1483","line":"template<> struct __cxx_is_always_lock_free<long long> { enum { __value = 2 == ATOMIC_LLONG_LOCK_FREE }; };"},
{"lineNum":" 1484","line":"template<> struct __cxx_is_always_lock_free<unsigned long long> { enum { __value = 2 == ATOMIC_LLONG_LOCK_FREE }; };"},
{"lineNum":" 1485","line":"template<typename _Tp> struct __cxx_is_always_lock_free<_Tp*> { enum { __value = 2 == ATOMIC_POINTER_LOCK_FREE }; };"},
{"lineNum":" 1486","line":"template<> struct __cxx_is_always_lock_free<std::nullptr_t> { enum { __value = 2 == ATOMIC_POINTER_LOCK_FREE }; };"},
{"lineNum":" 1487","line":""},
{"lineNum":" 1488","line":"#endif //__cpp_lib_atomic_is_always_lock_free"},
{"lineNum":" 1489","line":""},
{"lineNum":" 1490","line":"template <typename _Tp,"},
{"lineNum":" 1491","line":"          typename _Base = typename conditional<__cxx_is_always_lock_free<_Tp>::__value,"},
{"lineNum":" 1492","line":"                                                __cxx_atomic_base_impl<_Tp>,"},
{"lineNum":" 1493","line":"                                                __cxx_atomic_lock_impl<_Tp> >::type>"},
{"lineNum":" 1494","line":"#else"},
{"lineNum":" 1495","line":"template <typename _Tp,"},
{"lineNum":" 1496","line":"          typename _Base = __cxx_atomic_base_impl<_Tp> >"},
{"lineNum":" 1497","line":"#endif //_LIBCPP_ATOMIC_ONLY_USE_BUILTINS"},
{"lineNum":" 1498","line":"struct __cxx_atomic_impl : public _Base {"},
{"lineNum":" 1499","line":""},
{"lineNum":" 1500","line":"#if _GNUC_VER >= 501"},
{"lineNum":" 1501","line":"    static_assert(is_trivially_copyable<_Tp>::value,"},
{"lineNum":" 1502","line":"      \"std::atomic<Tp> requires that \'Tp\' be a trivially copyable type\");"},
{"lineNum":" 1503","line":"#endif"},
{"lineNum":" 1504","line":""},
{"lineNum":" 1505","line":"  _LIBCPP_INLINE_VISIBILITY __cxx_atomic_impl() _NOEXCEPT _LIBCPP_DEFAULT"},
{"lineNum":" 1506","line":"  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR explicit __cxx_atomic_impl(_Tp value) _NOEXCEPT"},
{"lineNum":" 1507","line":"    : _Base(value) {}"},
{"lineNum":" 1508","line":"};"},
{"lineNum":" 1509","line":""},
{"lineNum":" 1510","line":"#ifdef __linux__"},
{"lineNum":" 1511","line":"    using __cxx_contention_t = int32_t;"},
{"lineNum":" 1512","line":"#else"},
{"lineNum":" 1513","line":"    using __cxx_contention_t = int64_t;"},
{"lineNum":" 1514","line":"#endif //__linux__"},
{"lineNum":" 1515","line":""},
{"lineNum":" 1516","line":"using __cxx_atomic_contention_t = __cxx_atomic_impl<__cxx_contention_t>;"},
{"lineNum":" 1517","line":""},
{"lineNum":" 1518","line":"#ifndef _LIBCPP_HAS_NO_PLATFORM_WAIT"},
{"lineNum":" 1519","line":""},
{"lineNum":" 1520","line":"_LIBCPP_AVAILABILITY_SYNC _LIBCPP_EXPORTED_FROM_ABI void __cxx_atomic_notify_one(void const volatile*);"},
{"lineNum":" 1521","line":"_LIBCPP_AVAILABILITY_SYNC _LIBCPP_EXPORTED_FROM_ABI void __cxx_atomic_notify_all(void const volatile*);"},
{"lineNum":" 1522","line":"_LIBCPP_AVAILABILITY_SYNC _LIBCPP_EXPORTED_FROM_ABI __cxx_contention_t __libcpp_atomic_monitor(void const volatile*);"},
{"lineNum":" 1523","line":"_LIBCPP_AVAILABILITY_SYNC _LIBCPP_EXPORTED_FROM_ABI void __libcpp_atomic_wait(void const volatile*, __cxx_contention_t);"},
{"lineNum":" 1524","line":""},
{"lineNum":" 1525","line":"_LIBCPP_AVAILABILITY_SYNC _LIBCPP_EXPORTED_FROM_ABI void __cxx_atomic_notify_one(__cxx_atomic_contention_t const volatile*);"},
{"lineNum":" 1526","line":"_LIBCPP_AVAILABILITY_SYNC _LIBCPP_EXPORTED_FROM_ABI void __cxx_atomic_notify_all(__cxx_atomic_contention_t const volatile*);"},
{"lineNum":" 1527","line":"_LIBCPP_AVAILABILITY_SYNC _LIBCPP_EXPORTED_FROM_ABI __cxx_contention_t __libcpp_atomic_monitor(__cxx_atomic_contention_t const volatile*);"},
{"lineNum":" 1528","line":"_LIBCPP_AVAILABILITY_SYNC _LIBCPP_EXPORTED_FROM_ABI void __libcpp_atomic_wait(__cxx_atomic_contention_t const volatile*, __cxx_contention_t);"},
{"lineNum":" 1529","line":""},
{"lineNum":" 1530","line":"template <class _Atp, class _Fn>"},
{"lineNum":" 1531","line":"struct __libcpp_atomic_wait_backoff_impl {"},
{"lineNum":" 1532","line":"    _Atp* __a;"},
{"lineNum":" 1533","line":"    _Fn __test_fn;"},
{"lineNum":" 1534","line":"    _LIBCPP_AVAILABILITY_SYNC"},
{"lineNum":" 1535","line":"    _LIBCPP_INLINE_VISIBILITY bool operator()(chrono::nanoseconds __elapsed) const"},
{"lineNum":" 1536","line":"    {"},
{"lineNum":" 1537","line":"        if(__elapsed > chrono::microseconds(64))"},
{"lineNum":" 1538","line":"        {"},
{"lineNum":" 1539","line":"            auto const __monitor = __libcpp_atomic_monitor(__a);"},
{"lineNum":" 1540","line":"            if(__test_fn())"},
{"lineNum":" 1541","line":"                return true;"},
{"lineNum":" 1542","line":"            __libcpp_atomic_wait(__a, __monitor);"},
{"lineNum":" 1543","line":"        }"},
{"lineNum":" 1544","line":"        else if(__elapsed > chrono::microseconds(4))"},
{"lineNum":" 1545","line":"            __libcpp_thread_yield();"},
{"lineNum":" 1546","line":"        else"},
{"lineNum":" 1547","line":"            {} // poll"},
{"lineNum":" 1548","line":"        return false;"},
{"lineNum":" 1549","line":"    }"},
{"lineNum":" 1550","line":"};"},
{"lineNum":" 1551","line":""},
{"lineNum":" 1552","line":"template <class _Atp, class _Fn>"},
{"lineNum":" 1553","line":"_LIBCPP_AVAILABILITY_SYNC"},
{"lineNum":" 1554","line":"_LIBCPP_INLINE_VISIBILITY bool __cxx_atomic_wait(_Atp* __a, _Fn && __test_fn)"},
{"lineNum":" 1555","line":"{"},
{"lineNum":" 1556","line":"    __libcpp_atomic_wait_backoff_impl<_Atp, typename decay<_Fn>::type> __backoff_fn = {__a, __test_fn};"},
{"lineNum":" 1557","line":"    return __libcpp_thread_poll_with_backoff(__test_fn, __backoff_fn);"},
{"lineNum":" 1558","line":"}"},
{"lineNum":" 1559","line":""},
{"lineNum":" 1560","line":"#else // _LIBCPP_HAS_NO_PLATFORM_WAIT"},
{"lineNum":" 1561","line":""},
{"lineNum":" 1562","line":"template <class _Tp>"},
{"lineNum":" 1563","line":"_LIBCPP_INLINE_VISIBILITY void __cxx_atomic_notify_all(__cxx_atomic_impl<_Tp> const volatile*) { }"},
{"lineNum":" 1564","line":"template <class _Tp>"},
{"lineNum":" 1565","line":"_LIBCPP_INLINE_VISIBILITY void __cxx_atomic_notify_one(__cxx_atomic_impl<_Tp> const volatile*) { }"},
{"lineNum":" 1566","line":"template <class _Atp, class _Fn>"},
{"lineNum":" 1567","line":"_LIBCPP_INLINE_VISIBILITY bool __cxx_atomic_wait(_Atp*, _Fn && __test_fn)"},
{"lineNum":" 1568","line":"{"},
{"lineNum":" 1569","line":"    return __libcpp_thread_poll_with_backoff(__test_fn, __libcpp_timed_backoff_policy());"},
{"lineNum":" 1570","line":"}"},
{"lineNum":" 1571","line":""},
{"lineNum":" 1572","line":"#endif // _LIBCPP_HAS_NO_PLATFORM_WAIT"},
{"lineNum":" 1573","line":""},
{"lineNum":" 1574","line":"template <class _Atp, class _Tp>"},
{"lineNum":" 1575","line":"struct __cxx_atomic_wait_test_fn_impl {"},
{"lineNum":" 1576","line":"    _Atp* __a;"},
{"lineNum":" 1577","line":"    _Tp __val;"},
{"lineNum":" 1578","line":"    memory_order __order;"},
{"lineNum":" 1579","line":"    _LIBCPP_INLINE_VISIBILITY bool operator()() const"},
{"lineNum":" 1580","line":"    {"},
{"lineNum":" 1581","line":"        return !__cxx_nonatomic_compare_equal(__cxx_atomic_load(__a, __order), __val);"},
{"lineNum":" 1582","line":"    }"},
{"lineNum":" 1583","line":"};"},
{"lineNum":" 1584","line":""},
{"lineNum":" 1585","line":"template <class _Atp, class _Tp>"},
{"lineNum":" 1586","line":"_LIBCPP_AVAILABILITY_SYNC"},
{"lineNum":" 1587","line":"_LIBCPP_INLINE_VISIBILITY bool __cxx_atomic_wait(_Atp* __a, _Tp const __val, memory_order __order)"},
{"lineNum":" 1588","line":"{"},
{"lineNum":" 1589","line":"    __cxx_atomic_wait_test_fn_impl<_Atp, _Tp> __test_fn = {__a, __val, __order};"},
{"lineNum":" 1590","line":"    return __cxx_atomic_wait(__a, __test_fn);"},
{"lineNum":" 1591","line":"}"},
{"lineNum":" 1592","line":""},
{"lineNum":" 1593","line":"// general atomic<T>"},
{"lineNum":" 1594","line":""},
{"lineNum":" 1595","line":"template <class _Tp, bool = is_integral<_Tp>::value && !is_same<_Tp, bool>::value>"},
{"lineNum":" 1596","line":"struct __atomic_base  // false"},
{"lineNum":" 1597","line":"{"},
{"lineNum":" 1598","line":"    mutable __cxx_atomic_impl<_Tp> __a_;"},
{"lineNum":" 1599","line":""},
{"lineNum":" 1600","line":"#if defined(__cpp_lib_atomic_is_always_lock_free)"},
{"lineNum":" 1601","line":"  static _LIBCPP_CONSTEXPR bool is_always_lock_free = __atomic_always_lock_free(sizeof(__a_), 0);"},
{"lineNum":" 1602","line":"#endif"},
{"lineNum":" 1603","line":""},
{"lineNum":" 1604","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1605","line":"    bool is_lock_free() const volatile _NOEXCEPT"},
{"lineNum":" 1606","line":"        {return __cxx_atomic_is_lock_free(sizeof(_Tp));}"},
{"lineNum":" 1607","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1608","line":"    bool is_lock_free() const _NOEXCEPT"},
{"lineNum":" 1609","line":"        {return static_cast<__atomic_base const volatile*>(this)->is_lock_free();}"},
{"lineNum":" 1610","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1611","line":"    void store(_Tp __d, memory_order __m = memory_order_seq_cst) volatile _NOEXCEPT"},
{"lineNum":" 1612","line":"      _LIBCPP_CHECK_STORE_MEMORY_ORDER(__m)"},
{"lineNum":" 1613","line":"        {__cxx_atomic_store(&__a_, __d, __m);}"},
{"lineNum":" 1614","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1615","line":"    void store(_Tp __d, memory_order __m = memory_order_seq_cst) _NOEXCEPT"},
{"lineNum":" 1616","line":"      _LIBCPP_CHECK_STORE_MEMORY_ORDER(__m)"},
{"lineNum":" 1617","line":"        {__cxx_atomic_store(&__a_, __d, __m);}"},
{"lineNum":" 1618","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1619","line":"    _Tp load(memory_order __m = memory_order_seq_cst) const volatile _NOEXCEPT"},
{"lineNum":" 1620","line":"      _LIBCPP_CHECK_LOAD_MEMORY_ORDER(__m)"},
{"lineNum":" 1621","line":"        {return __cxx_atomic_load(&__a_, __m);}"},
{"lineNum":" 1622","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1623","line":"    _Tp load(memory_order __m = memory_order_seq_cst) const _NOEXCEPT"},
{"lineNum":" 1624","line":"      _LIBCPP_CHECK_LOAD_MEMORY_ORDER(__m)"},
{"lineNum":" 1625","line":"        {return __cxx_atomic_load(&__a_, __m);}"},
{"lineNum":" 1626","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1627","line":"    operator _Tp() const volatile _NOEXCEPT {return load();}"},
{"lineNum":" 1628","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1629","line":"    operator _Tp() const _NOEXCEPT          {return load();}"},
{"lineNum":" 1630","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1631","line":"    _Tp exchange(_Tp __d, memory_order __m = memory_order_seq_cst) volatile _NOEXCEPT"},
{"lineNum":" 1632","line":"        {return __cxx_atomic_exchange(&__a_, __d, __m);}"},
{"lineNum":" 1633","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1634","line":"    _Tp exchange(_Tp __d, memory_order __m = memory_order_seq_cst) _NOEXCEPT"},
{"lineNum":" 1635","line":"        {return __cxx_atomic_exchange(&__a_, __d, __m);}"},
{"lineNum":" 1636","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1637","line":"    bool compare_exchange_weak(_Tp& __e, _Tp __d,"},
{"lineNum":" 1638","line":"                               memory_order __s, memory_order __f) volatile _NOEXCEPT"},
{"lineNum":" 1639","line":"      _LIBCPP_CHECK_EXCHANGE_MEMORY_ORDER(__s, __f)"},
{"lineNum":" 1640","line":"        {return __cxx_atomic_compare_exchange_weak(&__a_, &__e, __d, __s, __f);}"},
{"lineNum":" 1641","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1642","line":"    bool compare_exchange_weak(_Tp& __e, _Tp __d,"},
{"lineNum":" 1643","line":"                               memory_order __s, memory_order __f) _NOEXCEPT"},
{"lineNum":" 1644","line":"      _LIBCPP_CHECK_EXCHANGE_MEMORY_ORDER(__s, __f)"},
{"lineNum":" 1645","line":"        {return __cxx_atomic_compare_exchange_weak(&__a_, &__e, __d, __s, __f);}"},
{"lineNum":" 1646","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1647","line":"    bool compare_exchange_strong(_Tp& __e, _Tp __d,"},
{"lineNum":" 1648","line":"                                 memory_order __s, memory_order __f) volatile _NOEXCEPT"},
{"lineNum":" 1649","line":"      _LIBCPP_CHECK_EXCHANGE_MEMORY_ORDER(__s, __f)"},
{"lineNum":" 1650","line":"        {return __cxx_atomic_compare_exchange_strong(&__a_, &__e, __d, __s, __f);}"},
{"lineNum":" 1651","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1652","line":"    bool compare_exchange_strong(_Tp& __e, _Tp __d,"},
{"lineNum":" 1653","line":"                                 memory_order __s, memory_order __f) _NOEXCEPT"},
{"lineNum":" 1654","line":"      _LIBCPP_CHECK_EXCHANGE_MEMORY_ORDER(__s, __f)"},
{"lineNum":" 1655","line":"        {return __cxx_atomic_compare_exchange_strong(&__a_, &__e, __d, __s, __f);}"},
{"lineNum":" 1656","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1657","line":"    bool compare_exchange_weak(_Tp& __e, _Tp __d,"},
{"lineNum":" 1658","line":"                              memory_order __m = memory_order_seq_cst) volatile _NOEXCEPT"},
{"lineNum":" 1659","line":"        {return __cxx_atomic_compare_exchange_weak(&__a_, &__e, __d, __m, __m);}"},
{"lineNum":" 1660","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1661","line":"    bool compare_exchange_weak(_Tp& __e, _Tp __d,"},
{"lineNum":" 1662","line":"                               memory_order __m = memory_order_seq_cst) _NOEXCEPT"},
{"lineNum":" 1663","line":"        {return __cxx_atomic_compare_exchange_weak(&__a_, &__e, __d, __m, __m);}"},
{"lineNum":" 1664","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1665","line":"    bool compare_exchange_strong(_Tp& __e, _Tp __d,"},
{"lineNum":" 1666","line":"                              memory_order __m = memory_order_seq_cst) volatile _NOEXCEPT"},
{"lineNum":" 1667","line":"        {return __cxx_atomic_compare_exchange_strong(&__a_, &__e, __d, __m, __m);}"},
{"lineNum":" 1668","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1669","line":"    bool compare_exchange_strong(_Tp& __e, _Tp __d,"},
{"lineNum":" 1670","line":"                                 memory_order __m = memory_order_seq_cst) _NOEXCEPT"},
{"lineNum":" 1671","line":"        {return __cxx_atomic_compare_exchange_strong(&__a_, &__e, __d, __m, __m);}"},
{"lineNum":" 1672","line":""},
{"lineNum":" 1673","line":"    _LIBCPP_AVAILABILITY_SYNC _LIBCPP_INLINE_VISIBILITY void wait(_Tp __v, memory_order __m = memory_order_seq_cst) const volatile _NOEXCEPT"},
{"lineNum":" 1674","line":"        {__cxx_atomic_wait(&__a_, __v, __m);}"},
{"lineNum":" 1675","line":"    _LIBCPP_AVAILABILITY_SYNC _LIBCPP_INLINE_VISIBILITY void wait(_Tp __v, memory_order __m = memory_order_seq_cst) const _NOEXCEPT"},
{"lineNum":" 1676","line":"        {__cxx_atomic_wait(&__a_, __v, __m);}"},
{"lineNum":" 1677","line":"    _LIBCPP_AVAILABILITY_SYNC _LIBCPP_INLINE_VISIBILITY void notify_one() volatile _NOEXCEPT"},
{"lineNum":" 1678","line":"        {__cxx_atomic_notify_one(&__a_);}"},
{"lineNum":" 1679","line":"    _LIBCPP_AVAILABILITY_SYNC _LIBCPP_INLINE_VISIBILITY void notify_one() _NOEXCEPT"},
{"lineNum":" 1680","line":"        {__cxx_atomic_notify_one(&__a_);}"},
{"lineNum":" 1681","line":"    _LIBCPP_AVAILABILITY_SYNC _LIBCPP_INLINE_VISIBILITY void notify_all() volatile _NOEXCEPT"},
{"lineNum":" 1682","line":"        {__cxx_atomic_notify_all(&__a_);}"},
{"lineNum":" 1683","line":"    _LIBCPP_AVAILABILITY_SYNC _LIBCPP_INLINE_VISIBILITY void notify_all() _NOEXCEPT"},
{"lineNum":" 1684","line":"        {__cxx_atomic_notify_all(&__a_);}"},
{"lineNum":" 1685","line":""},
{"lineNum":" 1686","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":" 1687","line":"    _LIBCPP_INLINE_VISIBILITY constexpr"},
{"lineNum":" 1688","line":"    __atomic_base() noexcept(is_nothrow_default_constructible_v<_Tp>) : __a_(_Tp()) {}"},
{"lineNum":" 1689","line":"#else"},
{"lineNum":" 1690","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1691","line":"    __atomic_base() _NOEXCEPT _LIBCPP_DEFAULT"},
{"lineNum":" 1692","line":"#endif"},
{"lineNum":" 1693","line":""},
{"lineNum":" 1694","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":" 1695","line":"    __atomic_base(_Tp __d) _NOEXCEPT : __a_(__d) {}"},
{"lineNum":" 1696","line":""},
{"lineNum":" 1697","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1698","line":"    __atomic_base(const __atomic_base&) = delete;"},
{"lineNum":" 1699","line":"#else"},
{"lineNum":" 1700","line":"private:"},
{"lineNum":" 1701","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1702","line":"    __atomic_base(const __atomic_base&);"},
{"lineNum":" 1703","line":"#endif"},
{"lineNum":" 1704","line":"};"},
{"lineNum":" 1705","line":""},
{"lineNum":" 1706","line":"#if defined(__cpp_lib_atomic_is_always_lock_free)"},
{"lineNum":" 1707","line":"template <class _Tp, bool __b>"},
{"lineNum":" 1708","line":"_LIBCPP_CONSTEXPR bool __atomic_base<_Tp, __b>::is_always_lock_free;"},
{"lineNum":" 1709","line":"#endif"},
{"lineNum":" 1710","line":""},
{"lineNum":" 1711","line":"// atomic<Integral>"},
{"lineNum":" 1712","line":""},
{"lineNum":" 1713","line":"template <class _Tp>"},
{"lineNum":" 1714","line":"struct __atomic_base<_Tp, true>"},
{"lineNum":" 1715","line":"    : public __atomic_base<_Tp, false>"},
{"lineNum":" 1716","line":"{"},
{"lineNum":" 1717","line":"    typedef __atomic_base<_Tp, false> __base;"},
{"lineNum":" 1718","line":""},
{"lineNum":" 1719","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":" 1720","line":"    __atomic_base() _NOEXCEPT _LIBCPP_DEFAULT"},
{"lineNum":" 1721","line":""},
{"lineNum":" 1722","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1723","line":"    _LIBCPP_CONSTEXPR __atomic_base(_Tp __d) _NOEXCEPT : __base(__d) {}"},
{"lineNum":" 1724","line":""},
{"lineNum":" 1725","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1726","line":"    _Tp fetch_add(_Tp __op, memory_order __m = memory_order_seq_cst) volatile _NOEXCEPT"},
{"lineNum":" 1727","line":"        {return __cxx_atomic_fetch_add(&this->__a_, __op, __m);}"},
{"lineNum":" 1728","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1729","line":"    _Tp fetch_add(_Tp __op, memory_order __m = memory_order_seq_cst) _NOEXCEPT"},
{"lineNum":" 1730","line":"        {return __cxx_atomic_fetch_add(&this->__a_, __op, __m);}"},
{"lineNum":" 1731","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1732","line":"    _Tp fetch_sub(_Tp __op, memory_order __m = memory_order_seq_cst) volatile _NOEXCEPT"},
{"lineNum":" 1733","line":"        {return __cxx_atomic_fetch_sub(&this->__a_, __op, __m);}"},
{"lineNum":" 1734","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1735","line":"    _Tp fetch_sub(_Tp __op, memory_order __m = memory_order_seq_cst) _NOEXCEPT"},
{"lineNum":" 1736","line":"        {return __cxx_atomic_fetch_sub(&this->__a_, __op, __m);}"},
{"lineNum":" 1737","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1738","line":"    _Tp fetch_and(_Tp __op, memory_order __m = memory_order_seq_cst) volatile _NOEXCEPT"},
{"lineNum":" 1739","line":"        {return __cxx_atomic_fetch_and(&this->__a_, __op, __m);}"},
{"lineNum":" 1740","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1741","line":"    _Tp fetch_and(_Tp __op, memory_order __m = memory_order_seq_cst) _NOEXCEPT"},
{"lineNum":" 1742","line":"        {return __cxx_atomic_fetch_and(&this->__a_, __op, __m);}"},
{"lineNum":" 1743","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1744","line":"    _Tp fetch_or(_Tp __op, memory_order __m = memory_order_seq_cst) volatile _NOEXCEPT"},
{"lineNum":" 1745","line":"        {return __cxx_atomic_fetch_or(&this->__a_, __op, __m);}"},
{"lineNum":" 1746","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1747","line":"    _Tp fetch_or(_Tp __op, memory_order __m = memory_order_seq_cst) _NOEXCEPT"},
{"lineNum":" 1748","line":"        {return __cxx_atomic_fetch_or(&this->__a_, __op, __m);}"},
{"lineNum":" 1749","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1750","line":"    _Tp fetch_xor(_Tp __op, memory_order __m = memory_order_seq_cst) volatile _NOEXCEPT"},
{"lineNum":" 1751","line":"        {return __cxx_atomic_fetch_xor(&this->__a_, __op, __m);}"},
{"lineNum":" 1752","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1753","line":"    _Tp fetch_xor(_Tp __op, memory_order __m = memory_order_seq_cst) _NOEXCEPT"},
{"lineNum":" 1754","line":"        {return __cxx_atomic_fetch_xor(&this->__a_, __op, __m);}"},
{"lineNum":" 1755","line":""},
{"lineNum":" 1756","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1757","line":"    _Tp operator++(int) volatile _NOEXCEPT      {return fetch_add(_Tp(1));}"},
{"lineNum":" 1758","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1759","line":"    _Tp operator++(int) _NOEXCEPT               {return fetch_add(_Tp(1));}"},
{"lineNum":" 1760","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1761","line":"    _Tp operator--(int) volatile _NOEXCEPT      {return fetch_sub(_Tp(1));}"},
{"lineNum":" 1762","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1763","line":"    _Tp operator--(int) _NOEXCEPT               {return fetch_sub(_Tp(1));}"},
{"lineNum":" 1764","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1765","line":"    _Tp operator++() volatile _NOEXCEPT         {return fetch_add(_Tp(1)) + _Tp(1);}"},
{"lineNum":" 1766","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1767","line":"    _Tp operator++() _NOEXCEPT                  {return fetch_add(_Tp(1)) + _Tp(1);}"},
{"lineNum":" 1768","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1769","line":"    _Tp operator--() volatile _NOEXCEPT         {return fetch_sub(_Tp(1)) - _Tp(1);}"},
{"lineNum":" 1770","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1771","line":"    _Tp operator--() _NOEXCEPT                  {return fetch_sub(_Tp(1)) - _Tp(1);}"},
{"lineNum":" 1772","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1773","line":"    _Tp operator+=(_Tp __op) volatile _NOEXCEPT {return fetch_add(__op) + __op;}"},
{"lineNum":" 1774","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1775","line":"    _Tp operator+=(_Tp __op) _NOEXCEPT          {return fetch_add(__op) + __op;}"},
{"lineNum":" 1776","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1777","line":"    _Tp operator-=(_Tp __op) volatile _NOEXCEPT {return fetch_sub(__op) - __op;}"},
{"lineNum":" 1778","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1779","line":"    _Tp operator-=(_Tp __op) _NOEXCEPT          {return fetch_sub(__op) - __op;}"},
{"lineNum":" 1780","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1781","line":"    _Tp operator&=(_Tp __op) volatile _NOEXCEPT {return fetch_and(__op) & __op;}"},
{"lineNum":" 1782","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1783","line":"    _Tp operator&=(_Tp __op) _NOEXCEPT          {return fetch_and(__op) & __op;}"},
{"lineNum":" 1784","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1785","line":"    _Tp operator|=(_Tp __op) volatile _NOEXCEPT {return fetch_or(__op) | __op;}"},
{"lineNum":" 1786","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1787","line":"    _Tp operator|=(_Tp __op) _NOEXCEPT          {return fetch_or(__op) | __op;}"},
{"lineNum":" 1788","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1789","line":"    _Tp operator^=(_Tp __op) volatile _NOEXCEPT {return fetch_xor(__op) ^ __op;}"},
{"lineNum":" 1790","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1791","line":"    _Tp operator^=(_Tp __op) _NOEXCEPT          {return fetch_xor(__op) ^ __op;}"},
{"lineNum":" 1792","line":"};"},
{"lineNum":" 1793","line":""},
{"lineNum":" 1794","line":"// atomic<T>"},
{"lineNum":" 1795","line":""},
{"lineNum":" 1796","line":"template <class _Tp>"},
{"lineNum":" 1797","line":"struct atomic"},
{"lineNum":" 1798","line":"    : public __atomic_base<_Tp>"},
{"lineNum":" 1799","line":"{"},
{"lineNum":" 1800","line":"    typedef __atomic_base<_Tp> __base;"},
{"lineNum":" 1801","line":"    typedef _Tp value_type;"},
{"lineNum":" 1802","line":"    typedef value_type difference_type;"},
{"lineNum":" 1803","line":""},
{"lineNum":" 1804","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":" 1805","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1806","line":"    atomic() = default;"},
{"lineNum":" 1807","line":"#else"},
{"lineNum":" 1808","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1809","line":"    atomic() _NOEXCEPT _LIBCPP_DEFAULT"},
{"lineNum":" 1810","line":"#endif"},
{"lineNum":" 1811","line":""},
{"lineNum":" 1812","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1813","line":"    _LIBCPP_CONSTEXPR atomic(_Tp __d) _NOEXCEPT : __base(__d) {}"},
{"lineNum":" 1814","line":""},
{"lineNum":" 1815","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1816","line":"    _Tp operator=(_Tp __d) volatile _NOEXCEPT"},
{"lineNum":" 1817","line":"        {__base::store(__d); return __d;}"},
{"lineNum":" 1818","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1819","line":"    _Tp operator=(_Tp __d) _NOEXCEPT"},
{"lineNum":" 1820","line":"        {__base::store(__d); return __d;}"},
{"lineNum":" 1821","line":""},
{"lineNum":" 1822","line":"    atomic& operator=(const atomic&) = delete;"},
{"lineNum":" 1823","line":"    atomic& operator=(const atomic&) volatile = delete;"},
{"lineNum":" 1824","line":"};"},
{"lineNum":" 1825","line":""},
{"lineNum":" 1826","line":"// atomic<T*>"},
{"lineNum":" 1827","line":""},
{"lineNum":" 1828","line":"template <class _Tp>"},
{"lineNum":" 1829","line":"struct atomic<_Tp*>"},
{"lineNum":" 1830","line":"    : public __atomic_base<_Tp*>"},
{"lineNum":" 1831","line":"{"},
{"lineNum":" 1832","line":"    typedef __atomic_base<_Tp*> __base;"},
{"lineNum":" 1833","line":"    typedef _Tp* value_type;"},
{"lineNum":" 1834","line":"    typedef ptrdiff_t difference_type;"},
{"lineNum":" 1835","line":""},
{"lineNum":" 1836","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1837","line":"    atomic() _NOEXCEPT _LIBCPP_DEFAULT"},
{"lineNum":" 1838","line":""},
{"lineNum":" 1839","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1840","line":"    _LIBCPP_CONSTEXPR atomic(_Tp* __d) _NOEXCEPT : __base(__d) {}"},
{"lineNum":" 1841","line":""},
{"lineNum":" 1842","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1843","line":"    _Tp* operator=(_Tp* __d) volatile _NOEXCEPT"},
{"lineNum":" 1844","line":"        {__base::store(__d); return __d;}"},
{"lineNum":" 1845","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1846","line":"    _Tp* operator=(_Tp* __d) _NOEXCEPT"},
{"lineNum":" 1847","line":"        {__base::store(__d); return __d;}"},
{"lineNum":" 1848","line":""},
{"lineNum":" 1849","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1850","line":"    _Tp* fetch_add(ptrdiff_t __op, memory_order __m = memory_order_seq_cst)"},
{"lineNum":" 1851","line":"                                                                        volatile _NOEXCEPT"},
{"lineNum":" 1852","line":"        {return __cxx_atomic_fetch_add(&this->__a_, __op, __m);}"},
{"lineNum":" 1853","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1854","line":"    _Tp* fetch_add(ptrdiff_t __op, memory_order __m = memory_order_seq_cst) _NOEXCEPT"},
{"lineNum":" 1855","line":"        {return __cxx_atomic_fetch_add(&this->__a_, __op, __m);}"},
{"lineNum":" 1856","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1857","line":"    _Tp* fetch_sub(ptrdiff_t __op, memory_order __m = memory_order_seq_cst)"},
{"lineNum":" 1858","line":"                                                                        volatile _NOEXCEPT"},
{"lineNum":" 1859","line":"        {return __cxx_atomic_fetch_sub(&this->__a_, __op, __m);}"},
{"lineNum":" 1860","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1861","line":"    _Tp* fetch_sub(ptrdiff_t __op, memory_order __m = memory_order_seq_cst) _NOEXCEPT"},
{"lineNum":" 1862","line":"        {return __cxx_atomic_fetch_sub(&this->__a_, __op, __m);}"},
{"lineNum":" 1863","line":""},
{"lineNum":" 1864","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1865","line":"    _Tp* operator++(int) volatile _NOEXCEPT            {return fetch_add(1);}"},
{"lineNum":" 1866","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1867","line":"    _Tp* operator++(int) _NOEXCEPT                     {return fetch_add(1);}"},
{"lineNum":" 1868","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1869","line":"    _Tp* operator--(int) volatile _NOEXCEPT            {return fetch_sub(1);}"},
{"lineNum":" 1870","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1871","line":"    _Tp* operator--(int) _NOEXCEPT                     {return fetch_sub(1);}"},
{"lineNum":" 1872","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1873","line":"    _Tp* operator++() volatile _NOEXCEPT               {return fetch_add(1) + 1;}"},
{"lineNum":" 1874","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1875","line":"    _Tp* operator++() _NOEXCEPT                        {return fetch_add(1) + 1;}"},
{"lineNum":" 1876","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1877","line":"    _Tp* operator--() volatile _NOEXCEPT               {return fetch_sub(1) - 1;}"},
{"lineNum":" 1878","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1879","line":"    _Tp* operator--() _NOEXCEPT                        {return fetch_sub(1) - 1;}"},
{"lineNum":" 1880","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1881","line":"    _Tp* operator+=(ptrdiff_t __op) volatile _NOEXCEPT {return fetch_add(__op) + __op;}"},
{"lineNum":" 1882","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1883","line":"    _Tp* operator+=(ptrdiff_t __op) _NOEXCEPT          {return fetch_add(__op) + __op;}"},
{"lineNum":" 1884","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1885","line":"    _Tp* operator-=(ptrdiff_t __op) volatile _NOEXCEPT {return fetch_sub(__op) - __op;}"},
{"lineNum":" 1886","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1887","line":"    _Tp* operator-=(ptrdiff_t __op) _NOEXCEPT          {return fetch_sub(__op) - __op;}"},
{"lineNum":" 1888","line":""},
{"lineNum":" 1889","line":"    atomic& operator=(const atomic&) = delete;"},
{"lineNum":" 1890","line":"    atomic& operator=(const atomic&) volatile = delete;"},
{"lineNum":" 1891","line":"};"},
{"lineNum":" 1892","line":""},
{"lineNum":" 1893","line":"// atomic_is_lock_free"},
{"lineNum":" 1894","line":""},
{"lineNum":" 1895","line":"template <class _Tp>"},
{"lineNum":" 1896","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1897","line":"bool"},
{"lineNum":" 1898","line":"atomic_is_lock_free(const volatile atomic<_Tp>* __o) _NOEXCEPT"},
{"lineNum":" 1899","line":"{"},
{"lineNum":" 1900","line":"    return __o->is_lock_free();"},
{"lineNum":" 1901","line":"}"},
{"lineNum":" 1902","line":""},
{"lineNum":" 1903","line":"template <class _Tp>"},
{"lineNum":" 1904","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1905","line":"bool"},
{"lineNum":" 1906","line":"atomic_is_lock_free(const atomic<_Tp>* __o) _NOEXCEPT"},
{"lineNum":" 1907","line":"{"},
{"lineNum":" 1908","line":"    return __o->is_lock_free();"},
{"lineNum":" 1909","line":"}"},
{"lineNum":" 1910","line":""},
{"lineNum":" 1911","line":"// atomic_init"},
{"lineNum":" 1912","line":""},
{"lineNum":" 1913","line":"template <class _Tp>"},
{"lineNum":" 1914","line":"_LIBCPP_DEPRECATED_IN_CXX20 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1915","line":"void"},
{"lineNum":" 1916","line":"atomic_init(volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type __d) _NOEXCEPT"},
{"lineNum":" 1917","line":"{"},
{"lineNum":" 1918","line":"    __cxx_atomic_init(&__o->__a_, __d);"},
{"lineNum":" 1919","line":"}"},
{"lineNum":" 1920","line":""},
{"lineNum":" 1921","line":"template <class _Tp>"},
{"lineNum":" 1922","line":"_LIBCPP_DEPRECATED_IN_CXX20 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1923","line":"void"},
{"lineNum":" 1924","line":"atomic_init(atomic<_Tp>* __o, typename atomic<_Tp>::value_type __d) _NOEXCEPT"},
{"lineNum":" 1925","line":"{"},
{"lineNum":" 1926","line":"    __cxx_atomic_init(&__o->__a_, __d);"},
{"lineNum":" 1927","line":"}"},
{"lineNum":" 1928","line":""},
{"lineNum":" 1929","line":"// atomic_store"},
{"lineNum":" 1930","line":""},
{"lineNum":" 1931","line":"template <class _Tp>"},
{"lineNum":" 1932","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1933","line":"void"},
{"lineNum":" 1934","line":"atomic_store(volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type __d) _NOEXCEPT"},
{"lineNum":" 1935","line":"{"},
{"lineNum":" 1936","line":"    __o->store(__d);"},
{"lineNum":" 1937","line":"}"},
{"lineNum":" 1938","line":""},
{"lineNum":" 1939","line":"template <class _Tp>"},
{"lineNum":" 1940","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1941","line":"void"},
{"lineNum":" 1942","line":"atomic_store(atomic<_Tp>* __o, typename atomic<_Tp>::value_type __d) _NOEXCEPT"},
{"lineNum":" 1943","line":"{"},
{"lineNum":" 1944","line":"    __o->store(__d);"},
{"lineNum":" 1945","line":"}"},
{"lineNum":" 1946","line":""},
{"lineNum":" 1947","line":"// atomic_store_explicit"},
{"lineNum":" 1948","line":""},
{"lineNum":" 1949","line":"template <class _Tp>"},
{"lineNum":" 1950","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1951","line":"void"},
{"lineNum":" 1952","line":"atomic_store_explicit(volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type __d, memory_order __m) _NOEXCEPT"},
{"lineNum":" 1953","line":"  _LIBCPP_CHECK_STORE_MEMORY_ORDER(__m)"},
{"lineNum":" 1954","line":"{"},
{"lineNum":" 1955","line":"    __o->store(__d, __m);"},
{"lineNum":" 1956","line":"}"},
{"lineNum":" 1957","line":""},
{"lineNum":" 1958","line":"template <class _Tp>"},
{"lineNum":" 1959","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1960","line":"void"},
{"lineNum":" 1961","line":"atomic_store_explicit(atomic<_Tp>* __o, typename atomic<_Tp>::value_type __d, memory_order __m) _NOEXCEPT"},
{"lineNum":" 1962","line":"  _LIBCPP_CHECK_STORE_MEMORY_ORDER(__m)"},
{"lineNum":" 1963","line":"{"},
{"lineNum":" 1964","line":"    __o->store(__d, __m);"},
{"lineNum":" 1965","line":"}"},
{"lineNum":" 1966","line":""},
{"lineNum":" 1967","line":"// atomic_load"},
{"lineNum":" 1968","line":""},
{"lineNum":" 1969","line":"template <class _Tp>"},
{"lineNum":" 1970","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1971","line":"_Tp"},
{"lineNum":" 1972","line":"atomic_load(const volatile atomic<_Tp>* __o) _NOEXCEPT"},
{"lineNum":" 1973","line":"{"},
{"lineNum":" 1974","line":"    return __o->load();"},
{"lineNum":" 1975","line":"}"},
{"lineNum":" 1976","line":""},
{"lineNum":" 1977","line":"template <class _Tp>"},
{"lineNum":" 1978","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1979","line":"_Tp"},
{"lineNum":" 1980","line":"atomic_load(const atomic<_Tp>* __o) _NOEXCEPT"},
{"lineNum":" 1981","line":"{"},
{"lineNum":" 1982","line":"    return __o->load();"},
{"lineNum":" 1983","line":"}"},
{"lineNum":" 1984","line":""},
{"lineNum":" 1985","line":"// atomic_load_explicit"},
{"lineNum":" 1986","line":""},
{"lineNum":" 1987","line":"template <class _Tp>"},
{"lineNum":" 1988","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1989","line":"_Tp"},
{"lineNum":" 1990","line":"atomic_load_explicit(const volatile atomic<_Tp>* __o, memory_order __m) _NOEXCEPT"},
{"lineNum":" 1991","line":"  _LIBCPP_CHECK_LOAD_MEMORY_ORDER(__m)"},
{"lineNum":" 1992","line":"{"},
{"lineNum":" 1993","line":"    return __o->load(__m);"},
{"lineNum":" 1994","line":"}"},
{"lineNum":" 1995","line":""},
{"lineNum":" 1996","line":"template <class _Tp>"},
{"lineNum":" 1997","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1998","line":"_Tp"},
{"lineNum":" 1999","line":"atomic_load_explicit(const atomic<_Tp>* __o, memory_order __m) _NOEXCEPT"},
{"lineNum":" 2000","line":"  _LIBCPP_CHECK_LOAD_MEMORY_ORDER(__m)"},
{"lineNum":" 2001","line":"{"},
{"lineNum":" 2002","line":"    return __o->load(__m);"},
{"lineNum":" 2003","line":"}"},
{"lineNum":" 2004","line":""},
{"lineNum":" 2005","line":"// atomic_exchange"},
{"lineNum":" 2006","line":""},
{"lineNum":" 2007","line":"template <class _Tp>"},
{"lineNum":" 2008","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2009","line":"_Tp"},
{"lineNum":" 2010","line":"atomic_exchange(volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type __d) _NOEXCEPT"},
{"lineNum":" 2011","line":"{"},
{"lineNum":" 2012","line":"    return __o->exchange(__d);"},
{"lineNum":" 2013","line":"}"},
{"lineNum":" 2014","line":""},
{"lineNum":" 2015","line":"template <class _Tp>"},
{"lineNum":" 2016","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2017","line":"_Tp"},
{"lineNum":" 2018","line":"atomic_exchange(atomic<_Tp>* __o, typename atomic<_Tp>::value_type __d) _NOEXCEPT"},
{"lineNum":" 2019","line":"{"},
{"lineNum":" 2020","line":"    return __o->exchange(__d);"},
{"lineNum":" 2021","line":"}"},
{"lineNum":" 2022","line":""},
{"lineNum":" 2023","line":"// atomic_exchange_explicit"},
{"lineNum":" 2024","line":""},
{"lineNum":" 2025","line":"template <class _Tp>"},
{"lineNum":" 2026","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2027","line":"_Tp"},
{"lineNum":" 2028","line":"atomic_exchange_explicit(volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type __d, memory_order __m) _NOEXCEPT"},
{"lineNum":" 2029","line":"{"},
{"lineNum":" 2030","line":"    return __o->exchange(__d, __m);"},
{"lineNum":" 2031","line":"}"},
{"lineNum":" 2032","line":""},
{"lineNum":" 2033","line":"template <class _Tp>"},
{"lineNum":" 2034","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2035","line":"_Tp"},
{"lineNum":" 2036","line":"atomic_exchange_explicit(atomic<_Tp>* __o, typename atomic<_Tp>::value_type __d, memory_order __m) _NOEXCEPT"},
{"lineNum":" 2037","line":"{"},
{"lineNum":" 2038","line":"    return __o->exchange(__d, __m);"},
{"lineNum":" 2039","line":"}"},
{"lineNum":" 2040","line":""},
{"lineNum":" 2041","line":"// atomic_compare_exchange_weak"},
{"lineNum":" 2042","line":""},
{"lineNum":" 2043","line":"template <class _Tp>"},
{"lineNum":" 2044","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2045","line":"bool"},
{"lineNum":" 2046","line":"atomic_compare_exchange_weak(volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type* __e, typename atomic<_Tp>::value_type __d) _NOEXCEPT"},
{"lineNum":" 2047","line":"{"},
{"lineNum":" 2048","line":"    return __o->compare_exchange_weak(*__e, __d);"},
{"lineNum":" 2049","line":"}"},
{"lineNum":" 2050","line":""},
{"lineNum":" 2051","line":"template <class _Tp>"},
{"lineNum":" 2052","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2053","line":"bool"},
{"lineNum":" 2054","line":"atomic_compare_exchange_weak(atomic<_Tp>* __o, typename atomic<_Tp>::value_type* __e, typename atomic<_Tp>::value_type __d) _NOEXCEPT"},
{"lineNum":" 2055","line":"{"},
{"lineNum":" 2056","line":"    return __o->compare_exchange_weak(*__e, __d);"},
{"lineNum":" 2057","line":"}"},
{"lineNum":" 2058","line":""},
{"lineNum":" 2059","line":"// atomic_compare_exchange_strong"},
{"lineNum":" 2060","line":""},
{"lineNum":" 2061","line":"template <class _Tp>"},
{"lineNum":" 2062","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2063","line":"bool"},
{"lineNum":" 2064","line":"atomic_compare_exchange_strong(volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type* __e, typename atomic<_Tp>::value_type __d) _NOEXCEPT"},
{"lineNum":" 2065","line":"{"},
{"lineNum":" 2066","line":"    return __o->compare_exchange_strong(*__e, __d);"},
{"lineNum":" 2067","line":"}"},
{"lineNum":" 2068","line":""},
{"lineNum":" 2069","line":"template <class _Tp>"},
{"lineNum":" 2070","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2071","line":"bool"},
{"lineNum":" 2072","line":"atomic_compare_exchange_strong(atomic<_Tp>* __o, typename atomic<_Tp>::value_type* __e, typename atomic<_Tp>::value_type __d) _NOEXCEPT"},
{"lineNum":" 2073","line":"{"},
{"lineNum":" 2074","line":"    return __o->compare_exchange_strong(*__e, __d);"},
{"lineNum":" 2075","line":"}"},
{"lineNum":" 2076","line":""},
{"lineNum":" 2077","line":"// atomic_compare_exchange_weak_explicit"},
{"lineNum":" 2078","line":""},
{"lineNum":" 2079","line":"template <class _Tp>"},
{"lineNum":" 2080","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2081","line":"bool"},
{"lineNum":" 2082","line":"atomic_compare_exchange_weak_explicit(volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type* __e,"},
{"lineNum":" 2083","line":"                                      typename atomic<_Tp>::value_type __d,"},
{"lineNum":" 2084","line":"                                      memory_order __s, memory_order __f) _NOEXCEPT"},
{"lineNum":" 2085","line":"  _LIBCPP_CHECK_EXCHANGE_MEMORY_ORDER(__s, __f)"},
{"lineNum":" 2086","line":"{"},
{"lineNum":" 2087","line":"    return __o->compare_exchange_weak(*__e, __d, __s, __f);"},
{"lineNum":" 2088","line":"}"},
{"lineNum":" 2089","line":""},
{"lineNum":" 2090","line":"template <class _Tp>"},
{"lineNum":" 2091","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2092","line":"bool"},
{"lineNum":" 2093","line":"atomic_compare_exchange_weak_explicit(atomic<_Tp>* __o, typename atomic<_Tp>::value_type* __e, typename atomic<_Tp>::value_type __d,"},
{"lineNum":" 2094","line":"                                      memory_order __s, memory_order __f) _NOEXCEPT"},
{"lineNum":" 2095","line":"  _LIBCPP_CHECK_EXCHANGE_MEMORY_ORDER(__s, __f)"},
{"lineNum":" 2096","line":"{"},
{"lineNum":" 2097","line":"    return __o->compare_exchange_weak(*__e, __d, __s, __f);"},
{"lineNum":" 2098","line":"}"},
{"lineNum":" 2099","line":""},
{"lineNum":" 2100","line":"// atomic_compare_exchange_strong_explicit"},
{"lineNum":" 2101","line":""},
{"lineNum":" 2102","line":"template <class _Tp>"},
{"lineNum":" 2103","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2104","line":"bool"},
{"lineNum":" 2105","line":"atomic_compare_exchange_strong_explicit(volatile atomic<_Tp>* __o,"},
{"lineNum":" 2106","line":"                                        typename atomic<_Tp>::value_type* __e, typename atomic<_Tp>::value_type __d,"},
{"lineNum":" 2107","line":"                                        memory_order __s, memory_order __f) _NOEXCEPT"},
{"lineNum":" 2108","line":"  _LIBCPP_CHECK_EXCHANGE_MEMORY_ORDER(__s, __f)"},
{"lineNum":" 2109","line":"{"},
{"lineNum":" 2110","line":"    return __o->compare_exchange_strong(*__e, __d, __s, __f);"},
{"lineNum":" 2111","line":"}"},
{"lineNum":" 2112","line":""},
{"lineNum":" 2113","line":"template <class _Tp>"},
{"lineNum":" 2114","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2115","line":"bool"},
{"lineNum":" 2116","line":"atomic_compare_exchange_strong_explicit(atomic<_Tp>* __o, typename atomic<_Tp>::value_type* __e,"},
{"lineNum":" 2117","line":"                                        typename atomic<_Tp>::value_type __d,"},
{"lineNum":" 2118","line":"                                        memory_order __s, memory_order __f) _NOEXCEPT"},
{"lineNum":" 2119","line":"  _LIBCPP_CHECK_EXCHANGE_MEMORY_ORDER(__s, __f)"},
{"lineNum":" 2120","line":"{"},
{"lineNum":" 2121","line":"    return __o->compare_exchange_strong(*__e, __d, __s, __f);"},
{"lineNum":" 2122","line":"}"},
{"lineNum":" 2123","line":""},
{"lineNum":" 2124","line":"// atomic_wait"},
{"lineNum":" 2125","line":""},
{"lineNum":" 2126","line":"template <class _Tp>"},
{"lineNum":" 2127","line":"_LIBCPP_AVAILABILITY_SYNC _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2128","line":"void atomic_wait(const volatile atomic<_Tp>* __o,"},
{"lineNum":" 2129","line":"                 typename atomic<_Tp>::value_type __v) _NOEXCEPT"},
{"lineNum":" 2130","line":"{"},
{"lineNum":" 2131","line":"    return __o->wait(__v);"},
{"lineNum":" 2132","line":"}"},
{"lineNum":" 2133","line":""},
{"lineNum":" 2134","line":"template <class _Tp>"},
{"lineNum":" 2135","line":"_LIBCPP_AVAILABILITY_SYNC _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2136","line":"void atomic_wait(const atomic<_Tp>* __o,"},
{"lineNum":" 2137","line":"                 typename atomic<_Tp>::value_type __v) _NOEXCEPT"},
{"lineNum":" 2138","line":"{"},
{"lineNum":" 2139","line":"    return __o->wait(__v);"},
{"lineNum":" 2140","line":"}"},
{"lineNum":" 2141","line":""},
{"lineNum":" 2142","line":"// atomic_wait_explicit"},
{"lineNum":" 2143","line":""},
{"lineNum":" 2144","line":"template <class _Tp>"},
{"lineNum":" 2145","line":"_LIBCPP_AVAILABILITY_SYNC _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2146","line":"void atomic_wait_explicit(const volatile atomic<_Tp>* __o,"},
{"lineNum":" 2147","line":"                          typename atomic<_Tp>::value_type __v,"},
{"lineNum":" 2148","line":"                          memory_order __m) _NOEXCEPT"},
{"lineNum":" 2149","line":"  _LIBCPP_CHECK_LOAD_MEMORY_ORDER(__m)"},
{"lineNum":" 2150","line":"{"},
{"lineNum":" 2151","line":"    return __o->wait(__v, __m);"},
{"lineNum":" 2152","line":"}"},
{"lineNum":" 2153","line":""},
{"lineNum":" 2154","line":"template <class _Tp>"},
{"lineNum":" 2155","line":"_LIBCPP_AVAILABILITY_SYNC _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2156","line":"void atomic_wait_explicit(const atomic<_Tp>* __o,"},
{"lineNum":" 2157","line":"                          typename atomic<_Tp>::value_type __v,"},
{"lineNum":" 2158","line":"                          memory_order __m) _NOEXCEPT"},
{"lineNum":" 2159","line":"  _LIBCPP_CHECK_LOAD_MEMORY_ORDER(__m)"},
{"lineNum":" 2160","line":"{"},
{"lineNum":" 2161","line":"    return __o->wait(__v, __m);"},
{"lineNum":" 2162","line":"}"},
{"lineNum":" 2163","line":""},
{"lineNum":" 2164","line":"// atomic_notify_one"},
{"lineNum":" 2165","line":""},
{"lineNum":" 2166","line":"template <class _Tp>"},
{"lineNum":" 2167","line":"_LIBCPP_AVAILABILITY_SYNC _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2168","line":"void atomic_notify_one(volatile atomic<_Tp>* __o) _NOEXCEPT"},
{"lineNum":" 2169","line":"{"},
{"lineNum":" 2170","line":"    __o->notify_one();"},
{"lineNum":" 2171","line":"}"},
{"lineNum":" 2172","line":"template <class _Tp>"},
{"lineNum":" 2173","line":"_LIBCPP_AVAILABILITY_SYNC _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2174","line":"void atomic_notify_one(atomic<_Tp>* __o) _NOEXCEPT"},
{"lineNum":" 2175","line":"{"},
{"lineNum":" 2176","line":"    __o->notify_one();"},
{"lineNum":" 2177","line":"}"},
{"lineNum":" 2178","line":""},
{"lineNum":" 2179","line":"// atomic_notify_one"},
{"lineNum":" 2180","line":""},
{"lineNum":" 2181","line":"template <class _Tp>"},
{"lineNum":" 2182","line":"_LIBCPP_AVAILABILITY_SYNC _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2183","line":"void atomic_notify_all(volatile atomic<_Tp>* __o) _NOEXCEPT"},
{"lineNum":" 2184","line":"{"},
{"lineNum":" 2185","line":"    __o->notify_all();"},
{"lineNum":" 2186","line":"}"},
{"lineNum":" 2187","line":"template <class _Tp>"},
{"lineNum":" 2188","line":"_LIBCPP_AVAILABILITY_SYNC _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2189","line":"void atomic_notify_all(atomic<_Tp>* __o) _NOEXCEPT"},
{"lineNum":" 2190","line":"{"},
{"lineNum":" 2191","line":"    __o->notify_all();"},
{"lineNum":" 2192","line":"}"},
{"lineNum":" 2193","line":""},
{"lineNum":" 2194","line":"// atomic_fetch_add"},
{"lineNum":" 2195","line":""},
{"lineNum":" 2196","line":"template <class _Tp>"},
{"lineNum":" 2197","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2198","line":"typename enable_if"},
{"lineNum":" 2199","line":"<"},
{"lineNum":" 2200","line":"    is_integral<_Tp>::value && !is_same<_Tp, bool>::value && !is_const<_Tp>::value,"},
{"lineNum":" 2201","line":"    _Tp"},
{"lineNum":" 2202","line":">::type"},
{"lineNum":" 2203","line":"atomic_fetch_add(volatile atomic<_Tp>* __o, typename atomic<_Tp>::difference_type __op) _NOEXCEPT"},
{"lineNum":" 2204","line":"{"},
{"lineNum":" 2205","line":"    return __o->fetch_add(__op);"},
{"lineNum":" 2206","line":"}"},
{"lineNum":" 2207","line":""},
{"lineNum":" 2208","line":"template <class _Tp>"},
{"lineNum":" 2209","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2210","line":"typename enable_if"},
{"lineNum":" 2211","line":"<"},
{"lineNum":" 2212","line":"    is_integral<_Tp>::value && !is_same<_Tp, bool>::value && !is_const<_Tp>::value,"},
{"lineNum":" 2213","line":"    _Tp"},
{"lineNum":" 2214","line":">::type"},
{"lineNum":" 2215","line":"atomic_fetch_add(atomic<_Tp>* __o, typename atomic<_Tp>::difference_type __op) _NOEXCEPT"},
{"lineNum":" 2216","line":"{"},
{"lineNum":" 2217","line":"    return __o->fetch_add(__op);"},
{"lineNum":" 2218","line":"}"},
{"lineNum":" 2219","line":""},
{"lineNum":" 2220","line":"template <class _Tp>"},
{"lineNum":" 2221","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2222","line":"_Tp*"},
{"lineNum":" 2223","line":"atomic_fetch_add(volatile atomic<_Tp*>* __o, typename atomic<_Tp*>::difference_type __op) _NOEXCEPT"},
{"lineNum":" 2224","line":"{"},
{"lineNum":" 2225","line":"    return __o->fetch_add(__op);"},
{"lineNum":" 2226","line":"}"},
{"lineNum":" 2227","line":""},
{"lineNum":" 2228","line":"template <class _Tp>"},
{"lineNum":" 2229","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2230","line":"_Tp*"},
{"lineNum":" 2231","line":"atomic_fetch_add(atomic<_Tp*>* __o, typename atomic<_Tp*>::difference_type __op) _NOEXCEPT"},
{"lineNum":" 2232","line":"{"},
{"lineNum":" 2233","line":"    return __o->fetch_add(__op);"},
{"lineNum":" 2234","line":"}"},
{"lineNum":" 2235","line":""},
{"lineNum":" 2236","line":"// atomic_fetch_add_explicit"},
{"lineNum":" 2237","line":""},
{"lineNum":" 2238","line":"template <class _Tp>"},
{"lineNum":" 2239","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2240","line":"typename enable_if"},
{"lineNum":" 2241","line":"<"},
{"lineNum":" 2242","line":"    is_integral<_Tp>::value && !is_same<_Tp, bool>::value && !is_const<_Tp>::value,"},
{"lineNum":" 2243","line":"    _Tp"},
{"lineNum":" 2244","line":">::type"},
{"lineNum":" 2245","line":"atomic_fetch_add_explicit(volatile atomic<_Tp>* __o, typename atomic<_Tp>::difference_type __op, memory_order __m) _NOEXCEPT"},
{"lineNum":" 2246","line":"{"},
{"lineNum":" 2247","line":"    return __o->fetch_add(__op, __m);"},
{"lineNum":" 2248","line":"}"},
{"lineNum":" 2249","line":""},
{"lineNum":" 2250","line":"template <class _Tp>"},
{"lineNum":" 2251","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2252","line":"typename enable_if"},
{"lineNum":" 2253","line":"<"},
{"lineNum":" 2254","line":"    is_integral<_Tp>::value && !is_same<_Tp, bool>::value && !is_const<_Tp>::value,"},
{"lineNum":" 2255","line":"    _Tp"},
{"lineNum":" 2256","line":">::type"},
{"lineNum":" 2257","line":"atomic_fetch_add_explicit(atomic<_Tp>* __o, typename atomic<_Tp>::difference_type __op, memory_order __m) _NOEXCEPT"},
{"lineNum":" 2258","line":"{"},
{"lineNum":" 2259","line":"    return __o->fetch_add(__op, __m);"},
{"lineNum":" 2260","line":"}"},
{"lineNum":" 2261","line":""},
{"lineNum":" 2262","line":"template <class _Tp>"},
{"lineNum":" 2263","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2264","line":"_Tp*"},
{"lineNum":" 2265","line":"atomic_fetch_add_explicit(volatile atomic<_Tp*>* __o, typename atomic<_Tp*>::difference_type __op, memory_order __m) _NOEXCEPT"},
{"lineNum":" 2266","line":"{"},
{"lineNum":" 2267","line":"    return __o->fetch_add(__op, __m);"},
{"lineNum":" 2268","line":"}"},
{"lineNum":" 2269","line":""},
{"lineNum":" 2270","line":"template <class _Tp>"},
{"lineNum":" 2271","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2272","line":"_Tp*"},
{"lineNum":" 2273","line":"atomic_fetch_add_explicit(atomic<_Tp*>* __o, typename atomic<_Tp*>::difference_type __op, memory_order __m) _NOEXCEPT"},
{"lineNum":" 2274","line":"{"},
{"lineNum":" 2275","line":"    return __o->fetch_add(__op, __m);"},
{"lineNum":" 2276","line":"}"},
{"lineNum":" 2277","line":""},
{"lineNum":" 2278","line":"// atomic_fetch_sub"},
{"lineNum":" 2279","line":""},
{"lineNum":" 2280","line":"template <class _Tp>"},
{"lineNum":" 2281","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2282","line":"typename enable_if"},
{"lineNum":" 2283","line":"<"},
{"lineNum":" 2284","line":"    is_integral<_Tp>::value && !is_same<_Tp, bool>::value && !is_const<_Tp>::value,"},
{"lineNum":" 2285","line":"    _Tp"},
{"lineNum":" 2286","line":">::type"},
{"lineNum":" 2287","line":"atomic_fetch_sub(volatile atomic<_Tp>* __o, typename atomic<_Tp>::difference_type __op) _NOEXCEPT"},
{"lineNum":" 2288","line":"{"},
{"lineNum":" 2289","line":"    return __o->fetch_sub(__op);"},
{"lineNum":" 2290","line":"}"},
{"lineNum":" 2291","line":""},
{"lineNum":" 2292","line":"template <class _Tp>"},
{"lineNum":" 2293","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2294","line":"typename enable_if"},
{"lineNum":" 2295","line":"<"},
{"lineNum":" 2296","line":"    is_integral<_Tp>::value && !is_same<_Tp, bool>::value && !is_const<_Tp>::value,"},
{"lineNum":" 2297","line":"    _Tp"},
{"lineNum":" 2298","line":">::type"},
{"lineNum":" 2299","line":"atomic_fetch_sub(atomic<_Tp>* __o, typename atomic<_Tp>::difference_type __op) _NOEXCEPT"},
{"lineNum":" 2300","line":"{"},
{"lineNum":" 2301","line":"    return __o->fetch_sub(__op);"},
{"lineNum":" 2302","line":"}"},
{"lineNum":" 2303","line":""},
{"lineNum":" 2304","line":"template <class _Tp>"},
{"lineNum":" 2305","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2306","line":"_Tp*"},
{"lineNum":" 2307","line":"atomic_fetch_sub(volatile atomic<_Tp*>* __o, typename atomic<_Tp*>::difference_type __op) _NOEXCEPT"},
{"lineNum":" 2308","line":"{"},
{"lineNum":" 2309","line":"    return __o->fetch_sub(__op);"},
{"lineNum":" 2310","line":"}"},
{"lineNum":" 2311","line":""},
{"lineNum":" 2312","line":"template <class _Tp>"},
{"lineNum":" 2313","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2314","line":"_Tp*"},
{"lineNum":" 2315","line":"atomic_fetch_sub(atomic<_Tp*>* __o, typename atomic<_Tp*>::difference_type __op) _NOEXCEPT"},
{"lineNum":" 2316","line":"{"},
{"lineNum":" 2317","line":"    return __o->fetch_sub(__op);"},
{"lineNum":" 2318","line":"}"},
{"lineNum":" 2319","line":""},
{"lineNum":" 2320","line":"// atomic_fetch_sub_explicit"},
{"lineNum":" 2321","line":""},
{"lineNum":" 2322","line":"template <class _Tp>"},
{"lineNum":" 2323","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2324","line":"typename enable_if"},
{"lineNum":" 2325","line":"<"},
{"lineNum":" 2326","line":"    is_integral<_Tp>::value && !is_same<_Tp, bool>::value && !is_const<_Tp>::value,"},
{"lineNum":" 2327","line":"    _Tp"},
{"lineNum":" 2328","line":">::type"},
{"lineNum":" 2329","line":"atomic_fetch_sub_explicit(volatile atomic<_Tp>* __o, typename atomic<_Tp>::difference_type __op, memory_order __m) _NOEXCEPT"},
{"lineNum":" 2330","line":"{"},
{"lineNum":" 2331","line":"    return __o->fetch_sub(__op, __m);"},
{"lineNum":" 2332","line":"}"},
{"lineNum":" 2333","line":""},
{"lineNum":" 2334","line":"template <class _Tp>"},
{"lineNum":" 2335","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2336","line":"typename enable_if"},
{"lineNum":" 2337","line":"<"},
{"lineNum":" 2338","line":"    is_integral<_Tp>::value && !is_same<_Tp, bool>::value && !is_const<_Tp>::value,"},
{"lineNum":" 2339","line":"    _Tp"},
{"lineNum":" 2340","line":">::type"},
{"lineNum":" 2341","line":"atomic_fetch_sub_explicit(atomic<_Tp>* __o, typename atomic<_Tp>::difference_type __op, memory_order __m) _NOEXCEPT"},
{"lineNum":" 2342","line":"{"},
{"lineNum":" 2343","line":"    return __o->fetch_sub(__op, __m);"},
{"lineNum":" 2344","line":"}"},
{"lineNum":" 2345","line":""},
{"lineNum":" 2346","line":"template <class _Tp>"},
{"lineNum":" 2347","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2348","line":"_Tp*"},
{"lineNum":" 2349","line":"atomic_fetch_sub_explicit(volatile atomic<_Tp*>* __o, typename atomic<_Tp*>::difference_type __op, memory_order __m) _NOEXCEPT"},
{"lineNum":" 2350","line":"{"},
{"lineNum":" 2351","line":"    return __o->fetch_sub(__op, __m);"},
{"lineNum":" 2352","line":"}"},
{"lineNum":" 2353","line":""},
{"lineNum":" 2354","line":"template <class _Tp>"},
{"lineNum":" 2355","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2356","line":"_Tp*"},
{"lineNum":" 2357","line":"atomic_fetch_sub_explicit(atomic<_Tp*>* __o, typename atomic<_Tp*>::difference_type __op, memory_order __m) _NOEXCEPT"},
{"lineNum":" 2358","line":"{"},
{"lineNum":" 2359","line":"    return __o->fetch_sub(__op, __m);"},
{"lineNum":" 2360","line":"}"},
{"lineNum":" 2361","line":""},
{"lineNum":" 2362","line":"// atomic_fetch_and"},
{"lineNum":" 2363","line":""},
{"lineNum":" 2364","line":"template <class _Tp>"},
{"lineNum":" 2365","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2366","line":"typename enable_if"},
{"lineNum":" 2367","line":"<"},
{"lineNum":" 2368","line":"    is_integral<_Tp>::value && !is_same<_Tp, bool>::value,"},
{"lineNum":" 2369","line":"    _Tp"},
{"lineNum":" 2370","line":">::type"},
{"lineNum":" 2371","line":"atomic_fetch_and(volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type __op) _NOEXCEPT"},
{"lineNum":" 2372","line":"{"},
{"lineNum":" 2373","line":"    return __o->fetch_and(__op);"},
{"lineNum":" 2374","line":"}"},
{"lineNum":" 2375","line":""},
{"lineNum":" 2376","line":"template <class _Tp>"},
{"lineNum":" 2377","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2378","line":"typename enable_if"},
{"lineNum":" 2379","line":"<"},
{"lineNum":" 2380","line":"    is_integral<_Tp>::value && !is_same<_Tp, bool>::value,"},
{"lineNum":" 2381","line":"    _Tp"},
{"lineNum":" 2382","line":">::type"},
{"lineNum":" 2383","line":"atomic_fetch_and(atomic<_Tp>* __o, typename atomic<_Tp>::value_type __op) _NOEXCEPT"},
{"lineNum":" 2384","line":"{"},
{"lineNum":" 2385","line":"    return __o->fetch_and(__op);"},
{"lineNum":" 2386","line":"}"},
{"lineNum":" 2387","line":""},
{"lineNum":" 2388","line":"// atomic_fetch_and_explicit"},
{"lineNum":" 2389","line":""},
{"lineNum":" 2390","line":"template <class _Tp>"},
{"lineNum":" 2391","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2392","line":"typename enable_if"},
{"lineNum":" 2393","line":"<"},
{"lineNum":" 2394","line":"    is_integral<_Tp>::value && !is_same<_Tp, bool>::value,"},
{"lineNum":" 2395","line":"    _Tp"},
{"lineNum":" 2396","line":">::type"},
{"lineNum":" 2397","line":"atomic_fetch_and_explicit(volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type __op, memory_order __m) _NOEXCEPT"},
{"lineNum":" 2398","line":"{"},
{"lineNum":" 2399","line":"    return __o->fetch_and(__op, __m);"},
{"lineNum":" 2400","line":"}"},
{"lineNum":" 2401","line":""},
{"lineNum":" 2402","line":"template <class _Tp>"},
{"lineNum":" 2403","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2404","line":"typename enable_if"},
{"lineNum":" 2405","line":"<"},
{"lineNum":" 2406","line":"    is_integral<_Tp>::value && !is_same<_Tp, bool>::value,"},
{"lineNum":" 2407","line":"    _Tp"},
{"lineNum":" 2408","line":">::type"},
{"lineNum":" 2409","line":"atomic_fetch_and_explicit(atomic<_Tp>* __o, typename atomic<_Tp>::value_type __op, memory_order __m) _NOEXCEPT"},
{"lineNum":" 2410","line":"{"},
{"lineNum":" 2411","line":"    return __o->fetch_and(__op, __m);"},
{"lineNum":" 2412","line":"}"},
{"lineNum":" 2413","line":""},
{"lineNum":" 2414","line":"// atomic_fetch_or"},
{"lineNum":" 2415","line":""},
{"lineNum":" 2416","line":"template <class _Tp>"},
{"lineNum":" 2417","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2418","line":"typename enable_if"},
{"lineNum":" 2419","line":"<"},
{"lineNum":" 2420","line":"    is_integral<_Tp>::value && !is_same<_Tp, bool>::value,"},
{"lineNum":" 2421","line":"    _Tp"},
{"lineNum":" 2422","line":">::type"},
{"lineNum":" 2423","line":"atomic_fetch_or(volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type __op) _NOEXCEPT"},
{"lineNum":" 2424","line":"{"},
{"lineNum":" 2425","line":"    return __o->fetch_or(__op);"},
{"lineNum":" 2426","line":"}"},
{"lineNum":" 2427","line":""},
{"lineNum":" 2428","line":"template <class _Tp>"},
{"lineNum":" 2429","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2430","line":"typename enable_if"},
{"lineNum":" 2431","line":"<"},
{"lineNum":" 2432","line":"    is_integral<_Tp>::value && !is_same<_Tp, bool>::value,"},
{"lineNum":" 2433","line":"    _Tp"},
{"lineNum":" 2434","line":">::type"},
{"lineNum":" 2435","line":"atomic_fetch_or(atomic<_Tp>* __o, typename atomic<_Tp>::value_type __op) _NOEXCEPT"},
{"lineNum":" 2436","line":"{"},
{"lineNum":" 2437","line":"    return __o->fetch_or(__op);"},
{"lineNum":" 2438","line":"}"},
{"lineNum":" 2439","line":""},
{"lineNum":" 2440","line":"// atomic_fetch_or_explicit"},
{"lineNum":" 2441","line":""},
{"lineNum":" 2442","line":"template <class _Tp>"},
{"lineNum":" 2443","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2444","line":"typename enable_if"},
{"lineNum":" 2445","line":"<"},
{"lineNum":" 2446","line":"    is_integral<_Tp>::value && !is_same<_Tp, bool>::value,"},
{"lineNum":" 2447","line":"    _Tp"},
{"lineNum":" 2448","line":">::type"},
{"lineNum":" 2449","line":"atomic_fetch_or_explicit(volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type __op, memory_order __m) _NOEXCEPT"},
{"lineNum":" 2450","line":"{"},
{"lineNum":" 2451","line":"    return __o->fetch_or(__op, __m);"},
{"lineNum":" 2452","line":"}"},
{"lineNum":" 2453","line":""},
{"lineNum":" 2454","line":"template <class _Tp>"},
{"lineNum":" 2455","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2456","line":"typename enable_if"},
{"lineNum":" 2457","line":"<"},
{"lineNum":" 2458","line":"    is_integral<_Tp>::value && !is_same<_Tp, bool>::value,"},
{"lineNum":" 2459","line":"    _Tp"},
{"lineNum":" 2460","line":">::type"},
{"lineNum":" 2461","line":"atomic_fetch_or_explicit(atomic<_Tp>* __o, typename atomic<_Tp>::value_type __op, memory_order __m) _NOEXCEPT"},
{"lineNum":" 2462","line":"{"},
{"lineNum":" 2463","line":"    return __o->fetch_or(__op, __m);"},
{"lineNum":" 2464","line":"}"},
{"lineNum":" 2465","line":""},
{"lineNum":" 2466","line":"// atomic_fetch_xor"},
{"lineNum":" 2467","line":""},
{"lineNum":" 2468","line":"template <class _Tp>"},
{"lineNum":" 2469","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2470","line":"typename enable_if"},
{"lineNum":" 2471","line":"<"},
{"lineNum":" 2472","line":"    is_integral<_Tp>::value && !is_same<_Tp, bool>::value,"},
{"lineNum":" 2473","line":"    _Tp"},
{"lineNum":" 2474","line":">::type"},
{"lineNum":" 2475","line":"atomic_fetch_xor(volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type __op) _NOEXCEPT"},
{"lineNum":" 2476","line":"{"},
{"lineNum":" 2477","line":"    return __o->fetch_xor(__op);"},
{"lineNum":" 2478","line":"}"},
{"lineNum":" 2479","line":""},
{"lineNum":" 2480","line":"template <class _Tp>"},
{"lineNum":" 2481","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2482","line":"typename enable_if"},
{"lineNum":" 2483","line":"<"},
{"lineNum":" 2484","line":"    is_integral<_Tp>::value && !is_same<_Tp, bool>::value,"},
{"lineNum":" 2485","line":"    _Tp"},
{"lineNum":" 2486","line":">::type"},
{"lineNum":" 2487","line":"atomic_fetch_xor(atomic<_Tp>* __o, typename atomic<_Tp>::value_type __op) _NOEXCEPT"},
{"lineNum":" 2488","line":"{"},
{"lineNum":" 2489","line":"    return __o->fetch_xor(__op);"},
{"lineNum":" 2490","line":"}"},
{"lineNum":" 2491","line":""},
{"lineNum":" 2492","line":"// atomic_fetch_xor_explicit"},
{"lineNum":" 2493","line":""},
{"lineNum":" 2494","line":"template <class _Tp>"},
{"lineNum":" 2495","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2496","line":"typename enable_if"},
{"lineNum":" 2497","line":"<"},
{"lineNum":" 2498","line":"    is_integral<_Tp>::value && !is_same<_Tp, bool>::value,"},
{"lineNum":" 2499","line":"    _Tp"},
{"lineNum":" 2500","line":">::type"},
{"lineNum":" 2501","line":"atomic_fetch_xor_explicit(volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type __op, memory_order __m) _NOEXCEPT"},
{"lineNum":" 2502","line":"{"},
{"lineNum":" 2503","line":"    return __o->fetch_xor(__op, __m);"},
{"lineNum":" 2504","line":"}"},
{"lineNum":" 2505","line":""},
{"lineNum":" 2506","line":"template <class _Tp>"},
{"lineNum":" 2507","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2508","line":"typename enable_if"},
{"lineNum":" 2509","line":"<"},
{"lineNum":" 2510","line":"    is_integral<_Tp>::value && !is_same<_Tp, bool>::value,"},
{"lineNum":" 2511","line":"    _Tp"},
{"lineNum":" 2512","line":">::type"},
{"lineNum":" 2513","line":"atomic_fetch_xor_explicit(atomic<_Tp>* __o, typename atomic<_Tp>::value_type __op, memory_order __m) _NOEXCEPT"},
{"lineNum":" 2514","line":"{"},
{"lineNum":" 2515","line":"    return __o->fetch_xor(__op, __m);"},
{"lineNum":" 2516","line":"}"},
{"lineNum":" 2517","line":""},
{"lineNum":" 2518","line":"// flag type and operations"},
{"lineNum":" 2519","line":""},
{"lineNum":" 2520","line":"typedef struct atomic_flag"},
{"lineNum":" 2521","line":"{"},
{"lineNum":" 2522","line":"    __cxx_atomic_impl<_LIBCPP_ATOMIC_FLAG_TYPE> __a_;"},
{"lineNum":" 2523","line":""},
{"lineNum":" 2524","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2525","line":"    bool test(memory_order __m = memory_order_seq_cst) const volatile _NOEXCEPT"},
{"lineNum":" 2526","line":"        {return _LIBCPP_ATOMIC_FLAG_TYPE(true) == __cxx_atomic_load(&__a_, __m);}"},
{"lineNum":" 2527","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2528","line":"    bool test(memory_order __m = memory_order_seq_cst) const _NOEXCEPT"},
{"lineNum":" 2529","line":"        {return _LIBCPP_ATOMIC_FLAG_TYPE(true) == __cxx_atomic_load(&__a_, __m);}"},
{"lineNum":" 2530","line":""},
{"lineNum":" 2531","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2532","line":"    bool test_and_set(memory_order __m = memory_order_seq_cst) volatile _NOEXCEPT"},
{"lineNum":" 2533","line":"        {return __cxx_atomic_exchange(&__a_, _LIBCPP_ATOMIC_FLAG_TYPE(true), __m);}"},
{"lineNum":" 2534","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2535","line":"    bool test_and_set(memory_order __m = memory_order_seq_cst) _NOEXCEPT"},
{"lineNum":" 2536","line":"        {return __cxx_atomic_exchange(&__a_, _LIBCPP_ATOMIC_FLAG_TYPE(true), __m);}"},
{"lineNum":" 2537","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2538","line":"    void clear(memory_order __m = memory_order_seq_cst) volatile _NOEXCEPT"},
{"lineNum":" 2539","line":"        {__cxx_atomic_store(&__a_, _LIBCPP_ATOMIC_FLAG_TYPE(false), __m);}"},
{"lineNum":" 2540","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2541","line":"    void clear(memory_order __m = memory_order_seq_cst) _NOEXCEPT"},
{"lineNum":" 2542","line":"        {__cxx_atomic_store(&__a_, _LIBCPP_ATOMIC_FLAG_TYPE(false), __m);}"},
{"lineNum":" 2543","line":""},
{"lineNum":" 2544","line":"    _LIBCPP_AVAILABILITY_SYNC _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2545","line":"    void wait(bool __v, memory_order __m = memory_order_seq_cst) const volatile _NOEXCEPT"},
{"lineNum":" 2546","line":"        {__cxx_atomic_wait(&__a_, _LIBCPP_ATOMIC_FLAG_TYPE(__v), __m);}"},
{"lineNum":" 2547","line":"    _LIBCPP_AVAILABILITY_SYNC _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2548","line":"    void wait(bool __v, memory_order __m = memory_order_seq_cst) const _NOEXCEPT"},
{"lineNum":" 2549","line":"        {__cxx_atomic_wait(&__a_, _LIBCPP_ATOMIC_FLAG_TYPE(__v), __m);}"},
{"lineNum":" 2550","line":"    _LIBCPP_AVAILABILITY_SYNC _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2551","line":"    void notify_one() volatile _NOEXCEPT"},
{"lineNum":" 2552","line":"        {__cxx_atomic_notify_one(&__a_);}"},
{"lineNum":" 2553","line":"    _LIBCPP_AVAILABILITY_SYNC _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2554","line":"    void notify_one() _NOEXCEPT"},
{"lineNum":" 2555","line":"        {__cxx_atomic_notify_one(&__a_);}"},
{"lineNum":" 2556","line":"    _LIBCPP_AVAILABILITY_SYNC _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2557","line":"    void notify_all() volatile _NOEXCEPT"},
{"lineNum":" 2558","line":"        {__cxx_atomic_notify_all(&__a_);}"},
{"lineNum":" 2559","line":"    _LIBCPP_AVAILABILITY_SYNC _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2560","line":"    void notify_all() _NOEXCEPT"},
{"lineNum":" 2561","line":"        {__cxx_atomic_notify_all(&__a_);}"},
{"lineNum":" 2562","line":""},
{"lineNum":" 2563","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":" 2564","line":"    _LIBCPP_INLINE_VISIBILITY constexpr"},
{"lineNum":" 2565","line":"    atomic_flag() _NOEXCEPT : __a_(false) {}"},
{"lineNum":" 2566","line":"#else"},
{"lineNum":" 2567","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2568","line":"    atomic_flag() _NOEXCEPT _LIBCPP_DEFAULT"},
{"lineNum":" 2569","line":"#endif"},
{"lineNum":" 2570","line":""},
{"lineNum":" 2571","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":" 2572","line":"    atomic_flag(bool __b) _NOEXCEPT : __a_(__b) {} // EXTENSION"},
{"lineNum":" 2573","line":""},
{"lineNum":" 2574","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 2575","line":"    atomic_flag(const atomic_flag&) = delete;"},
{"lineNum":" 2576","line":"    atomic_flag& operator=(const atomic_flag&) = delete;"},
{"lineNum":" 2577","line":"    atomic_flag& operator=(const atomic_flag&) volatile = delete;"},
{"lineNum":" 2578","line":"#else"},
{"lineNum":" 2579","line":"private:"},
{"lineNum":" 2580","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2581","line":"    atomic_flag(const atomic_flag&);"},
{"lineNum":" 2582","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2583","line":"    atomic_flag& operator=(const atomic_flag&);"},
{"lineNum":" 2584","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2585","line":"    atomic_flag& operator=(const atomic_flag&) volatile;"},
{"lineNum":" 2586","line":"#endif"},
{"lineNum":" 2587","line":"} atomic_flag;"},
{"lineNum":" 2588","line":""},
{"lineNum":" 2589","line":""},
{"lineNum":" 2590","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2591","line":"bool"},
{"lineNum":" 2592","line":"atomic_flag_test(const volatile atomic_flag* __o) _NOEXCEPT"},
{"lineNum":" 2593","line":"{"},
{"lineNum":" 2594","line":"    return __o->test();"},
{"lineNum":" 2595","line":"}"},
{"lineNum":" 2596","line":""},
{"lineNum":" 2597","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2598","line":"bool"},
{"lineNum":" 2599","line":"atomic_flag_test(const atomic_flag* __o) _NOEXCEPT"},
{"lineNum":" 2600","line":"{"},
{"lineNum":" 2601","line":"    return __o->test();"},
{"lineNum":" 2602","line":"}"},
{"lineNum":" 2603","line":""},
{"lineNum":" 2604","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2605","line":"bool"},
{"lineNum":" 2606","line":"atomic_flag_test_explicit(const volatile atomic_flag* __o, memory_order __m) _NOEXCEPT"},
{"lineNum":" 2607","line":"{"},
{"lineNum":" 2608","line":"    return __o->test(__m);"},
{"lineNum":" 2609","line":"}"},
{"lineNum":" 2610","line":""},
{"lineNum":" 2611","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2612","line":"bool"},
{"lineNum":" 2613","line":"atomic_flag_test_explicit(const atomic_flag* __o, memory_order __m) _NOEXCEPT"},
{"lineNum":" 2614","line":"{"},
{"lineNum":" 2615","line":"    return __o->test(__m);"},
{"lineNum":" 2616","line":"}"},
{"lineNum":" 2617","line":""},
{"lineNum":" 2618","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2619","line":"bool"},
{"lineNum":" 2620","line":"atomic_flag_test_and_set(volatile atomic_flag* __o) _NOEXCEPT"},
{"lineNum":" 2621","line":"{"},
{"lineNum":" 2622","line":"    return __o->test_and_set();"},
{"lineNum":" 2623","line":"}"},
{"lineNum":" 2624","line":""},
{"lineNum":" 2625","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2626","line":"bool"},
{"lineNum":" 2627","line":"atomic_flag_test_and_set(atomic_flag* __o) _NOEXCEPT"},
{"lineNum":" 2628","line":"{"},
{"lineNum":" 2629","line":"    return __o->test_and_set();"},
{"lineNum":" 2630","line":"}"},
{"lineNum":" 2631","line":""},
{"lineNum":" 2632","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2633","line":"bool"},
{"lineNum":" 2634","line":"atomic_flag_test_and_set_explicit(volatile atomic_flag* __o, memory_order __m) _NOEXCEPT"},
{"lineNum":" 2635","line":"{"},
{"lineNum":" 2636","line":"    return __o->test_and_set(__m);"},
{"lineNum":" 2637","line":"}"},
{"lineNum":" 2638","line":""},
{"lineNum":" 2639","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2640","line":"bool"},
{"lineNum":" 2641","line":"atomic_flag_test_and_set_explicit(atomic_flag* __o, memory_order __m) _NOEXCEPT"},
{"lineNum":" 2642","line":"{"},
{"lineNum":" 2643","line":"    return __o->test_and_set(__m);"},
{"lineNum":" 2644","line":"}"},
{"lineNum":" 2645","line":""},
{"lineNum":" 2646","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2647","line":"void"},
{"lineNum":" 2648","line":"atomic_flag_clear(volatile atomic_flag* __o) _NOEXCEPT"},
{"lineNum":" 2649","line":"{"},
{"lineNum":" 2650","line":"    __o->clear();"},
{"lineNum":" 2651","line":"}"},
{"lineNum":" 2652","line":""},
{"lineNum":" 2653","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2654","line":"void"},
{"lineNum":" 2655","line":"atomic_flag_clear(atomic_flag* __o) _NOEXCEPT"},
{"lineNum":" 2656","line":"{"},
{"lineNum":" 2657","line":"    __o->clear();"},
{"lineNum":" 2658","line":"}"},
{"lineNum":" 2659","line":""},
{"lineNum":" 2660","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2661","line":"void"},
{"lineNum":" 2662","line":"atomic_flag_clear_explicit(volatile atomic_flag* __o, memory_order __m) _NOEXCEPT"},
{"lineNum":" 2663","line":"{"},
{"lineNum":" 2664","line":"    __o->clear(__m);"},
{"lineNum":" 2665","line":"}"},
{"lineNum":" 2666","line":""},
{"lineNum":" 2667","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2668","line":"void"},
{"lineNum":" 2669","line":"atomic_flag_clear_explicit(atomic_flag* __o, memory_order __m) _NOEXCEPT"},
{"lineNum":" 2670","line":"{"},
{"lineNum":" 2671","line":"    __o->clear(__m);"},
{"lineNum":" 2672","line":"}"},
{"lineNum":" 2673","line":""},
{"lineNum":" 2674","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_AVAILABILITY_SYNC"},
{"lineNum":" 2675","line":"void"},
{"lineNum":" 2676","line":"atomic_flag_wait(const volatile atomic_flag* __o, bool __v) _NOEXCEPT"},
{"lineNum":" 2677","line":"{"},
{"lineNum":" 2678","line":"    __o->wait(__v);"},
{"lineNum":" 2679","line":"}"},
{"lineNum":" 2680","line":""},
{"lineNum":" 2681","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_AVAILABILITY_SYNC"},
{"lineNum":" 2682","line":"void"},
{"lineNum":" 2683","line":"atomic_flag_wait(const atomic_flag* __o, bool __v) _NOEXCEPT"},
{"lineNum":" 2684","line":"{"},
{"lineNum":" 2685","line":"    __o->wait(__v);"},
{"lineNum":" 2686","line":"}"},
{"lineNum":" 2687","line":""},
{"lineNum":" 2688","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_AVAILABILITY_SYNC"},
{"lineNum":" 2689","line":"void"},
{"lineNum":" 2690","line":"atomic_flag_wait_explicit(const volatile atomic_flag* __o,"},
{"lineNum":" 2691","line":"                          bool __v, memory_order __m) _NOEXCEPT"},
{"lineNum":" 2692","line":"{"},
{"lineNum":" 2693","line":"    __o->wait(__v, __m);"},
{"lineNum":" 2694","line":"}"},
{"lineNum":" 2695","line":""},
{"lineNum":" 2696","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_AVAILABILITY_SYNC"},
{"lineNum":" 2697","line":"void"},
{"lineNum":" 2698","line":"atomic_flag_wait_explicit(const atomic_flag* __o,"},
{"lineNum":" 2699","line":"                          bool __v, memory_order __m) _NOEXCEPT"},
{"lineNum":" 2700","line":"{"},
{"lineNum":" 2701","line":"    __o->wait(__v, __m);"},
{"lineNum":" 2702","line":"}"},
{"lineNum":" 2703","line":""},
{"lineNum":" 2704","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_AVAILABILITY_SYNC"},
{"lineNum":" 2705","line":"void"},
{"lineNum":" 2706","line":"atomic_flag_notify_one(volatile atomic_flag* __o) _NOEXCEPT"},
{"lineNum":" 2707","line":"{"},
{"lineNum":" 2708","line":"    __o->notify_one();"},
{"lineNum":" 2709","line":"}"},
{"lineNum":" 2710","line":""},
{"lineNum":" 2711","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_AVAILABILITY_SYNC"},
{"lineNum":" 2712","line":"void"},
{"lineNum":" 2713","line":"atomic_flag_notify_one(atomic_flag* __o) _NOEXCEPT"},
{"lineNum":" 2714","line":"{"},
{"lineNum":" 2715","line":"    __o->notify_one();"},
{"lineNum":" 2716","line":"}"},
{"lineNum":" 2717","line":""},
{"lineNum":" 2718","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_AVAILABILITY_SYNC"},
{"lineNum":" 2719","line":"void"},
{"lineNum":" 2720","line":"atomic_flag_notify_all(volatile atomic_flag* __o) _NOEXCEPT"},
{"lineNum":" 2721","line":"{"},
{"lineNum":" 2722","line":"    __o->notify_all();"},
{"lineNum":" 2723","line":"}"},
{"lineNum":" 2724","line":""},
{"lineNum":" 2725","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_AVAILABILITY_SYNC"},
{"lineNum":" 2726","line":"void"},
{"lineNum":" 2727","line":"atomic_flag_notify_all(atomic_flag* __o) _NOEXCEPT"},
{"lineNum":" 2728","line":"{"},
{"lineNum":" 2729","line":"    __o->notify_all();"},
{"lineNum":" 2730","line":"}"},
{"lineNum":" 2731","line":""},
{"lineNum":" 2732","line":"// fences"},
{"lineNum":" 2733","line":""},
{"lineNum":" 2734","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2735","line":"void"},
{"lineNum":" 2736","line":"atomic_thread_fence(memory_order __m) _NOEXCEPT"},
{"lineNum":" 2737","line":"{"},
{"lineNum":" 2738","line":"    __cxx_atomic_thread_fence(__m);"},
{"lineNum":" 2739","line":"}"},
{"lineNum":" 2740","line":""},
{"lineNum":" 2741","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2742","line":"void"},
{"lineNum":" 2743","line":"atomic_signal_fence(memory_order __m) _NOEXCEPT"},
{"lineNum":" 2744","line":"{"},
{"lineNum":" 2745","line":"    __cxx_atomic_signal_fence(__m);"},
{"lineNum":" 2746","line":"}"},
{"lineNum":" 2747","line":""},
{"lineNum":" 2748","line":"// Atomics for standard typedef types"},
{"lineNum":" 2749","line":""},
{"lineNum":" 2750","line":"typedef atomic<bool>               atomic_bool;"},
{"lineNum":" 2751","line":"typedef atomic<char>               atomic_char;"},
{"lineNum":" 2752","line":"typedef atomic<signed char>        atomic_schar;"},
{"lineNum":" 2753","line":"typedef atomic<unsigned char>      atomic_uchar;"},
{"lineNum":" 2754","line":"typedef atomic<short>              atomic_short;"},
{"lineNum":" 2755","line":"typedef atomic<unsigned short>     atomic_ushort;"},
{"lineNum":" 2756","line":"typedef atomic<int>                atomic_int;"},
{"lineNum":" 2757","line":"typedef atomic<unsigned int>       atomic_uint;"},
{"lineNum":" 2758","line":"typedef atomic<long>               atomic_long;"},
{"lineNum":" 2759","line":"typedef atomic<unsigned long>      atomic_ulong;"},
{"lineNum":" 2760","line":"typedef atomic<long long>          atomic_llong;"},
{"lineNum":" 2761","line":"typedef atomic<unsigned long long> atomic_ullong;"},
{"lineNum":" 2762","line":"#ifndef _LIBCPP_HAS_NO_CHAR8_T"},
{"lineNum":" 2763","line":"typedef atomic<char8_t>            atomic_char8_t;"},
{"lineNum":" 2764","line":"#endif"},
{"lineNum":" 2765","line":"typedef atomic<char16_t>           atomic_char16_t;"},
{"lineNum":" 2766","line":"typedef atomic<char32_t>           atomic_char32_t;"},
{"lineNum":" 2767","line":"typedef atomic<wchar_t>            atomic_wchar_t;"},
{"lineNum":" 2768","line":""},
{"lineNum":" 2769","line":"typedef atomic<int_least8_t>   atomic_int_least8_t;"},
{"lineNum":" 2770","line":"typedef atomic<uint_least8_t>  atomic_uint_least8_t;"},
{"lineNum":" 2771","line":"typedef atomic<int_least16_t>  atomic_int_least16_t;"},
{"lineNum":" 2772","line":"typedef atomic<uint_least16_t> atomic_uint_least16_t;"},
{"lineNum":" 2773","line":"typedef atomic<int_least32_t>  atomic_int_least32_t;"},
{"lineNum":" 2774","line":"typedef atomic<uint_least32_t> atomic_uint_least32_t;"},
{"lineNum":" 2775","line":"typedef atomic<int_least64_t>  atomic_int_least64_t;"},
{"lineNum":" 2776","line":"typedef atomic<uint_least64_t> atomic_uint_least64_t;"},
{"lineNum":" 2777","line":""},
{"lineNum":" 2778","line":"typedef atomic<int_fast8_t>   atomic_int_fast8_t;"},
{"lineNum":" 2779","line":"typedef atomic<uint_fast8_t>  atomic_uint_fast8_t;"},
{"lineNum":" 2780","line":"typedef atomic<int_fast16_t>  atomic_int_fast16_t;"},
{"lineNum":" 2781","line":"typedef atomic<uint_fast16_t> atomic_uint_fast16_t;"},
{"lineNum":" 2782","line":"typedef atomic<int_fast32_t>  atomic_int_fast32_t;"},
{"lineNum":" 2783","line":"typedef atomic<uint_fast32_t> atomic_uint_fast32_t;"},
{"lineNum":" 2784","line":"typedef atomic<int_fast64_t>  atomic_int_fast64_t;"},
{"lineNum":" 2785","line":"typedef atomic<uint_fast64_t> atomic_uint_fast64_t;"},
{"lineNum":" 2786","line":""},
{"lineNum":" 2787","line":"typedef atomic< int8_t>  atomic_int8_t;"},
{"lineNum":" 2788","line":"typedef atomic<uint8_t>  atomic_uint8_t;"},
{"lineNum":" 2789","line":"typedef atomic< int16_t> atomic_int16_t;"},
{"lineNum":" 2790","line":"typedef atomic<uint16_t> atomic_uint16_t;"},
{"lineNum":" 2791","line":"typedef atomic< int32_t> atomic_int32_t;"},
{"lineNum":" 2792","line":"typedef atomic<uint32_t> atomic_uint32_t;"},
{"lineNum":" 2793","line":"typedef atomic< int64_t> atomic_int64_t;"},
{"lineNum":" 2794","line":"typedef atomic<uint64_t> atomic_uint64_t;"},
{"lineNum":" 2795","line":""},
{"lineNum":" 2796","line":"typedef atomic<intptr_t>  atomic_intptr_t;"},
{"lineNum":" 2797","line":"typedef atomic<uintptr_t> atomic_uintptr_t;"},
{"lineNum":" 2798","line":"typedef atomic<size_t>    atomic_size_t;"},
{"lineNum":" 2799","line":"typedef atomic<ptrdiff_t> atomic_ptrdiff_t;"},
{"lineNum":" 2800","line":"typedef atomic<intmax_t>  atomic_intmax_t;"},
{"lineNum":" 2801","line":"typedef atomic<uintmax_t> atomic_uintmax_t;"},
{"lineNum":" 2802","line":""},
{"lineNum":" 2803","line":"// atomic_*_lock_free : prefer the contention type most highly, then the largest lock-free type"},
{"lineNum":" 2804","line":""},
{"lineNum":" 2805","line":"#ifdef __cpp_lib_atomic_is_always_lock_free"},
{"lineNum":" 2806","line":"# define _LIBCPP_CONTENTION_LOCK_FREE __atomic_always_lock_free(sizeof(__cxx_contention_t), 0)"},
{"lineNum":" 2807","line":"#else"},
{"lineNum":" 2808","line":"# define _LIBCPP_CONTENTION_LOCK_FREE false"},
{"lineNum":" 2809","line":"#endif"},
{"lineNum":" 2810","line":""},
{"lineNum":" 2811","line":"#if ATOMIC_LLONG_LOCK_FREE == 2"},
{"lineNum":" 2812","line":"typedef conditional<_LIBCPP_CONTENTION_LOCK_FREE, __cxx_contention_t, long long>::type          __libcpp_signed_lock_free;"},
{"lineNum":" 2813","line":"typedef conditional<_LIBCPP_CONTENTION_LOCK_FREE, __cxx_contention_t, unsigned long long>::type __libcpp_unsigned_lock_free;"},
{"lineNum":" 2814","line":"#elif ATOMIC_INT_LOCK_FREE == 2"},
{"lineNum":" 2815","line":"typedef conditional<_LIBCPP_CONTENTION_LOCK_FREE, __cxx_contention_t, int>::type                __libcpp_signed_lock_free;"},
{"lineNum":" 2816","line":"typedef conditional<_LIBCPP_CONTENTION_LOCK_FREE, __cxx_contention_t, unsigned int>::type       __libcpp_unsigned_lock_free;"},
{"lineNum":" 2817","line":"#elif ATOMIC_SHORT_LOCK_FREE == 2"},
{"lineNum":" 2818","line":"typedef conditional<_LIBCPP_CONTENTION_LOCK_FREE, __cxx_contention_t, short>::type              __libcpp_signed_lock_free;"},
{"lineNum":" 2819","line":"typedef conditional<_LIBCPP_CONTENTION_LOCK_FREE, __cxx_contention_t, unsigned short>::type     __libcpp_unsigned_lock_free;"},
{"lineNum":" 2820","line":"#elif ATOMIC_CHAR_LOCK_FREE == 2"},
{"lineNum":" 2821","line":"typedef conditional<_LIBCPP_CONTENTION_LOCK_FREE, __cxx_contention_t, char>::type               __libcpp_signed_lock_free;"},
{"lineNum":" 2822","line":"typedef conditional<_LIBCPP_CONTENTION_LOCK_FREE, __cxx_contention_t, unsigned char>::type      __libcpp_unsigned_lock_free;"},
{"lineNum":" 2823","line":"#else"},
{"lineNum":" 2824","line":"    // No signed/unsigned lock-free types"},
{"lineNum":" 2825","line":"#endif"},
{"lineNum":" 2826","line":""},
{"lineNum":" 2827","line":"typedef atomic<__libcpp_signed_lock_free> atomic_signed_lock_free;"},
{"lineNum":" 2828","line":"typedef atomic<__libcpp_unsigned_lock_free> atomic_unsigned_lock_free;"},
{"lineNum":" 2829","line":""},
{"lineNum":" 2830","line":"#define ATOMIC_FLAG_INIT {false}"},
{"lineNum":" 2831","line":"#define ATOMIC_VAR_INIT(__v) {__v}"},
{"lineNum":" 2832","line":""},
{"lineNum":" 2833","line":"_LIBCPP_END_NAMESPACE_STD"},
{"lineNum":" 2834","line":""},
{"lineNum":" 2835","line":"#endif // _LIBCPP_ATOMIC"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 4, "covered" : 0,};
var merged_data = [];
