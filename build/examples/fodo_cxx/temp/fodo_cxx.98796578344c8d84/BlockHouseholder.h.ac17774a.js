var data = {lines:[
{"lineNum":"    1","line":"// This file is part of Eigen, a lightweight C++ template library"},
{"lineNum":"    2","line":"// for linear algebra."},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Copyright (C) 2010 Vincent Lejeune"},
{"lineNum":"    5","line":"// Copyright (C) 2010 Gael Guennebaud <gael.guennebaud@inria.fr>"},
{"lineNum":"    6","line":"//"},
{"lineNum":"    7","line":"// This Source Code Form is subject to the terms of the Mozilla"},
{"lineNum":"    8","line":"// Public License v. 2.0. If a copy of the MPL was not distributed"},
{"lineNum":"    9","line":"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/."},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"#ifndef EIGEN_BLOCK_HOUSEHOLDER_H"},
{"lineNum":"   12","line":"#define EIGEN_BLOCK_HOUSEHOLDER_H"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"// This file contains some helper function to deal with block householder reflectors"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"#include \"./InternalHeaderCheck.h\""},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"namespace Eigen {"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"namespace internal {"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"/** \\internal */"},
{"lineNum":"   23","line":"// template<typename TriangularFactorType,typename VectorsType,typename CoeffsType>"},
{"lineNum":"   24","line":"// void make_block_householder_triangular_factor(TriangularFactorType& triFactor, const VectorsType& vectors, const CoeffsType& hCoeffs)"},
{"lineNum":"   25","line":"// {"},
{"lineNum":"   26","line":"//   typedef typename VectorsType::Scalar Scalar;"},
{"lineNum":"   27","line":"//   const Index nbVecs = vectors.cols();"},
{"lineNum":"   28","line":"//   eigen_assert(triFactor.rows() == nbVecs && triFactor.cols() == nbVecs && vectors.rows()>=nbVecs);"},
{"lineNum":"   29","line":"//"},
{"lineNum":"   30","line":"//   for(Index i = 0; i < nbVecs; i++)"},
{"lineNum":"   31","line":"//   {"},
{"lineNum":"   32","line":"//     Index rs = vectors.rows() - i;"},
{"lineNum":"   33","line":"//     // Warning, note that hCoeffs may alias with vectors."},
{"lineNum":"   34","line":"//     // It is then necessary to copy it before modifying vectors(i,i)."},
{"lineNum":"   35","line":"//     typename CoeffsType::Scalar h = hCoeffs(i);"},
{"lineNum":"   36","line":"//     // This hack permits to pass trough nested Block<> and Transpose<> expressions."},
{"lineNum":"   37","line":"//     Scalar *Vii_ptr = const_cast<Scalar*>(vectors.data() + vectors.outerStride()*i + vectors.innerStride()*i);"},
{"lineNum":"   38","line":"//     Scalar Vii = *Vii_ptr;"},
{"lineNum":"   39","line":"//     *Vii_ptr = Scalar(1);"},
{"lineNum":"   40","line":"//     triFactor.col(i).head(i).noalias() = -h * vectors.block(i, 0, rs, i).adjoint()"},
{"lineNum":"   41","line":"//                                        * vectors.col(i).tail(rs);"},
{"lineNum":"   42","line":"//     *Vii_ptr = Vii;"},
{"lineNum":"   43","line":"//     // FIXME add .noalias() once the triangular product can work inplace"},
{"lineNum":"   44","line":"//     triFactor.col(i).head(i) = triFactor.block(0,0,i,i).template triangularView<Upper>()"},
{"lineNum":"   45","line":"//                              * triFactor.col(i).head(i);"},
{"lineNum":"   46","line":"//     triFactor(i,i) = hCoeffs(i);"},
{"lineNum":"   47","line":"//   }"},
{"lineNum":"   48","line":"// }"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"/** \\internal */"},
{"lineNum":"   51","line":"// This variant avoid modifications in vectors"},
{"lineNum":"   52","line":"template<typename TriangularFactorType,typename VectorsType,typename CoeffsType>"},
{"lineNum":"   53","line":"void make_block_householder_triangular_factor(TriangularFactorType& triFactor, const VectorsType& vectors, const CoeffsType& hCoeffs)"},
{"lineNum":"   54","line":"{","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   55","line":"  const Index nbVecs = vectors.cols();"},
{"lineNum":"   56","line":"  eigen_assert(triFactor.rows() == nbVecs && triFactor.cols() == nbVecs && vectors.rows()>=nbVecs);"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"  for(Index i = nbVecs-1; i >=0 ; --i)","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   59","line":"  {"},
{"lineNum":"   60","line":"    Index rs = vectors.rows() - i - 1;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   61","line":"    Index rt = nbVecs-i-1;"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"    if(rt>0)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   64","line":"    {"},
{"lineNum":"   65","line":"      triFactor.row(i).tail(rt).noalias() = -hCoeffs(i) * vectors.col(i).tail(rs).adjoint()","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   66","line":"                                                        * vectors.bottomRightCorner(rs, rt).template triangularView<UnitLower>();"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"      // FIXME use the following line with .noalias() once the triangular product can work inplace"},
{"lineNum":"   69","line":"      // triFactor.row(i).tail(rt) = triFactor.row(i).tail(rt) * triFactor.bottomRightCorner(rt,rt).template triangularView<Upper>();"},
{"lineNum":"   70","line":"      for(Index j=nbVecs-1; j>i; --j)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   71","line":"      {"},
{"lineNum":"   72","line":"        typename TriangularFactorType::Scalar z = triFactor(i,j);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   73","line":"        triFactor(i,j) = z * triFactor(j,j);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   74","line":"        if(nbVecs-j-1>0)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   75","line":"          triFactor.row(i).tail(nbVecs-j-1) += z * triFactor.row(j).tail(nbVecs-j-1);"},
{"lineNum":"   76","line":"      }"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"    }"},
{"lineNum":"   79","line":"    triFactor(i,i) = hCoeffs(i);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   80","line":"  }"},
{"lineNum":"   81","line":"}","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"/** \\internal"},
{"lineNum":"   84","line":"  * if forward then perform   mat = H0 * H1 * H2 * mat"},
{"lineNum":"   85","line":"  * otherwise perform         mat = H2 * H1 * H0 * mat"},
{"lineNum":"   86","line":"  */"},
{"lineNum":"   87","line":"template<typename MatrixType,typename VectorsType,typename CoeffsType>"},
{"lineNum":"   88","line":"void apply_block_householder_on_the_left(MatrixType& mat, const VectorsType& vectors, const CoeffsType& hCoeffs, bool forward)"},
{"lineNum":"   89","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   90","line":"  enum { TFactorSize = MatrixType::ColsAtCompileTime };"},
{"lineNum":"   91","line":"  Index nbVecs = vectors.cols();"},
{"lineNum":"   92","line":"  Matrix<typename MatrixType::Scalar, TFactorSize, TFactorSize, RowMajor> T(nbVecs,nbVecs);"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"  if(forward) make_block_householder_triangular_factor(T, vectors, hCoeffs);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   95","line":"  else        make_block_householder_triangular_factor(T, vectors, hCoeffs.conjugate());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   96","line":"  const TriangularView<const VectorsType, UnitLower> V(vectors);"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"  // A -= V T V^* A"},
{"lineNum":"   99","line":"  Matrix<typename MatrixType::Scalar,VectorsType::ColsAtCompileTime,MatrixType::ColsAtCompileTime,"},
{"lineNum":"  100","line":"         (VectorsType::MaxColsAtCompileTime==1 && MatrixType::MaxColsAtCompileTime!=1)?RowMajor:ColMajor,"},
{"lineNum":"  101","line":"         VectorsType::MaxColsAtCompileTime,MatrixType::MaxColsAtCompileTime> tmp = V.adjoint() * mat;"},
{"lineNum":"  102","line":"  // FIXME add .noalias() once the triangular product can work inplace"},
{"lineNum":"  103","line":"  if(forward) tmp = T.template triangularView<Upper>()           * tmp;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  104","line":"  else        tmp = T.template triangularView<Upper>().adjoint() * tmp;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  105","line":"  mat.noalias() -= V * tmp;"},
{"lineNum":"  106","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"} // end namespace internal"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"} // end namespace Eigen"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"#endif // EIGEN_BLOCK_HOUSEHOLDER_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 17, "covered" : 0,};
var merged_data = [];
