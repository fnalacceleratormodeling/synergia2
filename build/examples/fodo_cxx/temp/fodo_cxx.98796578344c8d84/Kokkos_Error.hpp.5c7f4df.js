var data = {lines:[
{"lineNum":"    1","line":"/*"},
{"lineNum":"    2","line":"//@HEADER"},
{"lineNum":"    3","line":"// ************************************************************************"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"//                        Kokkos v. 3.0"},
{"lineNum":"    6","line":"//       Copyright (2020) National Technology & Engineering"},
{"lineNum":"    7","line":"//               Solutions of Sandia, LLC (NTESS)."},
{"lineNum":"    8","line":"//"},
{"lineNum":"    9","line":"// Under the terms of Contract DE-NA0003525 with NTESS,"},
{"lineNum":"   10","line":"// the U.S. Government retains certain rights in this software."},
{"lineNum":"   11","line":"//"},
{"lineNum":"   12","line":"// Redistribution and use in source and binary forms, with or without"},
{"lineNum":"   13","line":"// modification, are permitted provided that the following conditions are"},
{"lineNum":"   14","line":"// met:"},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"// 1. Redistributions of source code must retain the above copyright"},
{"lineNum":"   17","line":"// notice, this list of conditions and the following disclaimer."},
{"lineNum":"   18","line":"//"},
{"lineNum":"   19","line":"// 2. Redistributions in binary form must reproduce the above copyright"},
{"lineNum":"   20","line":"// notice, this list of conditions and the following disclaimer in the"},
{"lineNum":"   21","line":"// documentation and/or other materials provided with the distribution."},
{"lineNum":"   22","line":"//"},
{"lineNum":"   23","line":"// 3. Neither the name of the Corporation nor the names of the"},
{"lineNum":"   24","line":"// contributors may be used to endorse or promote products derived from"},
{"lineNum":"   25","line":"// this software without specific prior written permission."},
{"lineNum":"   26","line":"//"},
{"lineNum":"   27","line":"// THIS SOFTWARE IS PROVIDED BY NTESS \"AS IS\" AND ANY"},
{"lineNum":"   28","line":"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"},
{"lineNum":"   29","line":"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR"},
{"lineNum":"   30","line":"// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NTESS OR THE"},
{"lineNum":"   31","line":"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,"},
{"lineNum":"   32","line":"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,"},
{"lineNum":"   33","line":"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR"},
{"lineNum":"   34","line":"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF"},
{"lineNum":"   35","line":"// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING"},
{"lineNum":"   36","line":"// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"},
{"lineNum":"   37","line":"// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   38","line":"//"},
{"lineNum":"   39","line":"// Questions? Contact Christian R. Trott (crtrott@sandia.gov)"},
{"lineNum":"   40","line":"//"},
{"lineNum":"   41","line":"// ************************************************************************"},
{"lineNum":"   42","line":"//@HEADER"},
{"lineNum":"   43","line":"*/"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"#ifndef KOKKOS_IMPL_ERROR_HPP"},
{"lineNum":"   46","line":"#define KOKKOS_IMPL_ERROR_HPP"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"#include <string>"},
{"lineNum":"   49","line":"#include <iosfwd>"},
{"lineNum":"   50","line":"#include <Kokkos_Macros.hpp>"},
{"lineNum":"   51","line":"#ifdef KOKKOS_ENABLE_CUDA"},
{"lineNum":"   52","line":"#include <Cuda/Kokkos_Cuda_abort.hpp>"},
{"lineNum":"   53","line":"#endif"},
{"lineNum":"   54","line":"#ifdef KOKKOS_ENABLE_HIP"},
{"lineNum":"   55","line":"#include <HIP/Kokkos_HIP_Abort.hpp>"},
{"lineNum":"   56","line":"#endif"},
{"lineNum":"   57","line":"#ifdef KOKKOS_ENABLE_SYCL"},
{"lineNum":"   58","line":"#include <SYCL/Kokkos_SYCL_Abort.hpp>"},
{"lineNum":"   59","line":"#endif"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"#ifndef KOKKOS_ABORT_MESSAGE_BUFFER_SIZE"},
{"lineNum":"   62","line":"#define KOKKOS_ABORT_MESSAGE_BUFFER_SIZE 2048"},
{"lineNum":"   63","line":"#endif  // ifndef KOKKOS_ABORT_MESSAGE_BUFFER_SIZE"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"namespace Kokkos {"},
{"lineNum":"   66","line":"namespace Impl {"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"[[noreturn]] void host_abort(const char *const);"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"void throw_runtime_exception(const std::string &);"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"void traceback_callstack(std::ostream &);"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"std::string human_memory_size(size_t arg_bytes);"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"}  // namespace Impl"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"namespace Experimental {"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"class RawMemoryAllocationFailure : public std::bad_alloc {"},
{"lineNum":"   81","line":" public:"},
{"lineNum":"   82","line":"  enum class FailureMode {"},
{"lineNum":"   83","line":"    OutOfMemoryError,"},
{"lineNum":"   84","line":"    AllocationNotAligned,"},
{"lineNum":"   85","line":"    InvalidAllocationSize,"},
{"lineNum":"   86","line":"    MaximumCudaUVMAllocationsExceeded,"},
{"lineNum":"   87","line":"    Unknown"},
{"lineNum":"   88","line":"  };"},
{"lineNum":"   89","line":"  enum class AllocationMechanism {"},
{"lineNum":"   90","line":"    StdMalloc,"},
{"lineNum":"   91","line":"    PosixMemAlign,"},
{"lineNum":"   92","line":"    PosixMMap,"},
{"lineNum":"   93","line":"    IntelMMAlloc,"},
{"lineNum":"   94","line":"    CudaMalloc,"},
{"lineNum":"   95","line":"    CudaMallocManaged,"},
{"lineNum":"   96","line":"    CudaHostAlloc,"},
{"lineNum":"   97","line":"    HIPMalloc,"},
{"lineNum":"   98","line":"    HIPHostMalloc,"},
{"lineNum":"   99","line":"    SYCLMallocDevice,"},
{"lineNum":"  100","line":"    SYCLMallocShared"},
{"lineNum":"  101","line":"  };"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":" private:"},
{"lineNum":"  104","line":"  size_t m_attempted_size;"},
{"lineNum":"  105","line":"  size_t m_attempted_alignment;"},
{"lineNum":"  106","line":"  FailureMode m_failure_mode;"},
{"lineNum":"  107","line":"  AllocationMechanism m_mechanism;"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":" public:"},
{"lineNum":"  110","line":"  RawMemoryAllocationFailure(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  111","line":"      size_t arg_attempted_size, size_t arg_attempted_alignment,"},
{"lineNum":"  112","line":"      FailureMode arg_failure_mode = FailureMode::OutOfMemoryError,"},
{"lineNum":"  113","line":"      AllocationMechanism arg_mechanism ="},
{"lineNum":"  114","line":"          AllocationMechanism::StdMalloc) noexcept"},
{"lineNum":"  115","line":"      : m_attempted_size(arg_attempted_size),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  116","line":"        m_attempted_alignment(arg_attempted_alignment),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  117","line":"        m_failure_mode(arg_failure_mode),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  118","line":"        m_mechanism(arg_mechanism) {}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"  RawMemoryAllocationFailure() noexcept = delete;"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"  RawMemoryAllocationFailure(RawMemoryAllocationFailure const &) noexcept ="},
{"lineNum":"  123","line":"      default;"},
{"lineNum":"  124","line":"  RawMemoryAllocationFailure(RawMemoryAllocationFailure &&) noexcept = default;"},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"  RawMemoryAllocationFailure &operator             =("},
{"lineNum":"  127","line":"      RawMemoryAllocationFailure const &) noexcept = default;"},
{"lineNum":"  128","line":"  RawMemoryAllocationFailure &operator             =("},
{"lineNum":"  129","line":"      RawMemoryAllocationFailure &&) noexcept = default;"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"  ~RawMemoryAllocationFailure() noexcept override = default;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"  KOKKOS_ATTRIBUTE_NODISCARD"},
{"lineNum":"  134","line":"  const char *what() const noexcept override {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  135","line":"    if (m_failure_mode == FailureMode::OutOfMemoryError) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  136","line":"      return \"Memory allocation error: out of memory\";"},
{"lineNum":"  137","line":"    } else if (m_failure_mode == FailureMode::AllocationNotAligned) {"},
{"lineNum":"  138","line":"      return \"Memory allocation error: allocation result was under-aligned\";"},
{"lineNum":"  139","line":"    }"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"    return nullptr;  // unreachable"},
{"lineNum":"  142","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"  KOKKOS_ATTRIBUTE_NODISCARD"},
{"lineNum":"  145","line":"  size_t attempted_size() const noexcept { return m_attempted_size; }"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"  KOKKOS_ATTRIBUTE_NODISCARD"},
{"lineNum":"  148","line":"  size_t attempted_alignment() const noexcept { return m_attempted_alignment; }"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"  KOKKOS_ATTRIBUTE_NODISCARD"},
{"lineNum":"  151","line":"  AllocationMechanism allocation_mechanism() const noexcept {"},
{"lineNum":"  152","line":"    return m_mechanism;"},
{"lineNum":"  153","line":"  }"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"  KOKKOS_ATTRIBUTE_NODISCARD"},
{"lineNum":"  156","line":"  FailureMode failure_mode() const noexcept { return m_failure_mode; }"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"  void print_error_message(std::ostream &o) const;"},
{"lineNum":"  159","line":"  KOKKOS_ATTRIBUTE_NODISCARD"},
{"lineNum":"  160","line":"  std::string get_error_message() const;"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"  virtual void append_additional_error_information(std::ostream &) const {}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  163","line":"};"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"}  // end namespace Experimental"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"}  // namespace Kokkos"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  170","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"#if defined(KOKKOS_ENABLE_CUDA) && defined(__CUDA_ARCH__)"},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"#if defined(__APPLE__) || defined(KOKKOS_ENABLE_DEBUG_BOUNDS_CHECK)"},
{"lineNum":"  175","line":"// cuda_abort does not abort when building for macOS."},
{"lineNum":"  176","line":"// required to workaround failures in random number generator unit tests with"},
{"lineNum":"  177","line":"// pre-volta architectures"},
{"lineNum":"  178","line":"#define KOKKOS_IMPL_ABORT_NORETURN"},
{"lineNum":"  179","line":"#else"},
{"lineNum":"  180","line":"// cuda_abort aborts when building for other platforms than macOS"},
{"lineNum":"  181","line":"#define KOKKOS_IMPL_ABORT_NORETURN [[noreturn]]"},
{"lineNum":"  182","line":"#endif"},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"#elif defined(KOKKOS_ENABLE_HIP) && defined(__HIP_DEVICE_COMPILE__)"},
{"lineNum":"  185","line":"// HIP aborts"},
{"lineNum":"  186","line":"#define KOKKOS_IMPL_ABORT_NORETURN [[noreturn]]"},
{"lineNum":"  187","line":"#elif defined(KOKKOS_ENABLE_SYCL) && defined(__SYCL_DEVICE_ONLY__)"},
{"lineNum":"  188","line":"// FIXME_SYCL SYCL doesn\'t abort"},
{"lineNum":"  189","line":"#define KOKKOS_IMPL_ABORT_NORETURN"},
{"lineNum":"  190","line":"#elif !defined(KOKKOS_ENABLE_OPENMPTARGET)"},
{"lineNum":"  191","line":"// Host aborts"},
{"lineNum":"  192","line":"#define KOKKOS_IMPL_ABORT_NORETURN [[noreturn]]"},
{"lineNum":"  193","line":"#else"},
{"lineNum":"  194","line":"// Everything else does not abort"},
{"lineNum":"  195","line":"#define KOKKOS_IMPL_ABORT_NORETURN"},
{"lineNum":"  196","line":"#endif"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"namespace Kokkos {"},
{"lineNum":"  199","line":"KOKKOS_IMPL_ABORT_NORETURN KOKKOS_INLINE_FUNCTION void abort("},
{"lineNum":"  200","line":"    const char *const message) {","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  201","line":"#if defined(KOKKOS_ENABLE_CUDA) && defined(__CUDA_ARCH__)"},
{"lineNum":"  202","line":"  Kokkos::Impl::cuda_abort(message);"},
{"lineNum":"  203","line":"#elif defined(KOKKOS_ENABLE_HIP) && defined(__HIP_DEVICE_COMPILE__)"},
{"lineNum":"  204","line":"  Kokkos::Impl::hip_abort(message);"},
{"lineNum":"  205","line":"#elif defined(KOKKOS_ENABLE_SYCL) && defined(__SYCL_DEVICE_ONLY__)"},
{"lineNum":"  206","line":"  Kokkos::Impl::sycl_abort(message);"},
{"lineNum":"  207","line":"#elif !defined(KOKKOS_ENABLE_OPENMPTARGET)"},
{"lineNum":"  208","line":"  Kokkos::Impl::host_abort(message);","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  209","line":"#else"},
{"lineNum":"  210","line":"  (void)message;  // FIXME_OPENMPTARGET"},
{"lineNum":"  211","line":"#endif"},
{"lineNum":"  212","line":"}"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"}  // namespace Kokkos"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  217","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"#if !defined(NDEBUG) || defined(KOKKOS_ENFORCE_CONTRACTS) || \\"},
{"lineNum":"  220","line":"    defined(KOKKOS_ENABLE_DEBUG)"},
{"lineNum":"  221","line":"#define KOKKOS_EXPECTS(...)                                               \\"},
{"lineNum":"  222","line":"  {                                                                       \\"},
{"lineNum":"  223","line":"    if (!bool(__VA_ARGS__)) {                                             \\"},
{"lineNum":"  224","line":"      ::Kokkos::abort(                                                    \\"},
{"lineNum":"  225","line":"          \"Kokkos contract violation:\\n  \"                                \\"},
{"lineNum":"  226","line":"          \"  Expected precondition `\" #__VA_ARGS__ \"` evaluated false.\"); \\"},
{"lineNum":"  227","line":"    }                                                                     \\"},
{"lineNum":"  228","line":"  }"},
{"lineNum":"  229","line":"#define KOKKOS_ENSURES(...)                                               \\"},
{"lineNum":"  230","line":"  {                                                                       \\"},
{"lineNum":"  231","line":"    if (!bool(__VA_ARGS__)) {                                             \\"},
{"lineNum":"  232","line":"      ::Kokkos::abort(                                                    \\"},
{"lineNum":"  233","line":"          \"Kokkos contract violation:\\n  \"                                \\"},
{"lineNum":"  234","line":"          \"  Ensured postcondition `\" #__VA_ARGS__ \"` evaluated false.\"); \\"},
{"lineNum":"  235","line":"    }                                                                     \\"},
{"lineNum":"  236","line":"  }"},
{"lineNum":"  237","line":"// some projects already define this for themselves, so don\'t mess them up"},
{"lineNum":"  238","line":"#ifndef KOKKOS_ASSERT"},
{"lineNum":"  239","line":"#define KOKKOS_ASSERT(...)                                             \\"},
{"lineNum":"  240","line":"  {                                                                    \\"},
{"lineNum":"  241","line":"    if (!bool(__VA_ARGS__)) {                                          \\"},
{"lineNum":"  242","line":"      ::Kokkos::abort(                                                 \\"},
{"lineNum":"  243","line":"          \"Kokkos contract violation:\\n  \"                             \\"},
{"lineNum":"  244","line":"          \"  Asserted condition `\" #__VA_ARGS__ \"` evaluated false.\"); \\"},
{"lineNum":"  245","line":"    }                                                                  \\"},
{"lineNum":"  246","line":"  }"},
{"lineNum":"  247","line":"#endif  // ifndef KOKKOS_ASSERT"},
{"lineNum":"  248","line":"#else   // not debug mode"},
{"lineNum":"  249","line":"#define KOKKOS_EXPECTS(...)"},
{"lineNum":"  250","line":"#define KOKKOS_ENSURES(...)"},
{"lineNum":"  251","line":"#ifndef KOKKOS_ASSERT"},
{"lineNum":"  252","line":"#define KOKKOS_ASSERT(...)"},
{"lineNum":"  253","line":"#endif  // ifndef KOKKOS_ASSERT"},
{"lineNum":"  254","line":"#endif  // end debug mode ifdefs"},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  257","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"#endif /* #ifndef KOKKOS_IMPL_ERROR_HPP */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 12, "covered" : 0,};
var merged_data = [];
