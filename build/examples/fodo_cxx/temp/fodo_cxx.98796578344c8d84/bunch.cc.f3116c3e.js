var data = {lines:[
{"lineNum":"    1","line":""},
{"lineNum":"    2","line":"#include \"synergia/bunch/bunch.h\""},
{"lineNum":"    3","line":"#include \"synergia/bunch/core_diagnostics.h\""},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"#include <stdexcept>"},
{"lineNum":"    6","line":"#include <cmath>"},
{"lineNum":"    7","line":"#include <algorithm>"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"template<>"},
{"lineNum":"   10","line":"Bunch::bunch_t("},
{"lineNum":"   11","line":"        Reference_particle const& reference_particle,"},
{"lineNum":"   12","line":"        int total_num,"},
{"lineNum":"   13","line":"        double real_num,"},
{"lineNum":"   14","line":"        Commxx bunch_comm,"},
{"lineNum":"   15","line":"        int total_spectator_num,"},
{"lineNum":"   16","line":"        int bunch_index,"},
{"lineNum":"   17","line":"        int bucket_index,"},
{"lineNum":"   18","line":"        int array_index,"},
{"lineNum":"   19","line":"        int train_index )"},
{"lineNum":"   20","line":"    : comm(std::make_shared<Commxx>(bunch_comm))"},
{"lineNum":"   21","line":"    , boundary(LB::open)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   22","line":"    , boundary_param(0.0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   23","line":"    , ref_part(reference_particle)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   24","line":"    , design_ref_part(reference_particle)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   25","line":"    , particle_charge(reference_particle.get_charge())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   26","line":"    , real_num(real_num)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   27","line":"    , parts{ BunchParticles(PG::regular, total_num, -1, *comm),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   28","line":"             BunchParticles(PG::spectator, total_spectator_num, -1, *comm) }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   29","line":"    , bunch_index(bunch_index)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   30","line":"    , bucket_index(bucket_index)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   31","line":"    , array_index(array_index)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   32","line":"    , train_index(train_index)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   33","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   34","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"template<>"},
{"lineNum":"   37","line":"Bunch::bunch_t()"},
{"lineNum":"   38","line":"    : comm(new Commxx())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   39","line":"    , boundary(LB::open)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   40","line":"    , boundary_param(0.0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   41","line":"    , ref_part()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   42","line":"    , design_ref_part()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   43","line":"    , particle_charge(ref_part.get_charge())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   44","line":"    , real_num(1.0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   45","line":"    , parts{ BunchParticles(PG::regular, 0, 0, *comm),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   46","line":"             BunchParticles(PG::spectator, 0, 0, *comm) }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   47","line":"    , bunch_index(0)"},
{"lineNum":"   48","line":"    , bucket_index(0)"},
{"lineNum":"   49","line":"    , array_index(0)"},
{"lineNum":"   50","line":"    , train_index(0)"},
{"lineNum":"   51","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   52","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"template<>"},
{"lineNum":"   55","line":"void"},
{"lineNum":"   56","line":"Bunch::inject(Bunch const& o)"},
{"lineNum":"   57","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   58","line":"    const double weight_tolerance = 1.0e-14;"},
{"lineNum":"   59","line":"    const double particle_tolerance = 1.0e-14;"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"    auto const& ref = ref_part;"},
{"lineNum":"   62","line":"    auto const& oref = o.ref_part;"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"    // The charge and mass of the bunch particles must match"},
{"lineNum":"   65","line":"    if (particle_charge != o.particle_charge)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   66","line":"    {"},
{"lineNum":"   67","line":"        throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   68","line":"                \"Bunch.inject: bunch particle charges do not match.\");"},
{"lineNum":"   69","line":"    }"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"    if (std::abs(ref.get_mass()/oref.get_mass() - 1.0) > particle_tolerance)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   72","line":"    {"},
{"lineNum":"   73","line":"        throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   74","line":"                \"Bunch:inject: bunch particle masses do not match.\");"},
{"lineNum":"   75","line":"    }"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"    // total num for regualr particles"},
{"lineNum":"   78","line":"    int total_num = parts[0].num_total();"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"    // can only check particle weight if total_num is nonzero"},
{"lineNum":"   81","line":"    if (total_num != 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   82","line":"    {"},
{"lineNum":"   83","line":"        double wgt1 = real_num/total_num;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   84","line":"        double wgt2 = o.get_real_num()/o.get_total_num();"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"        if (std::abs(wgt1/wgt2 - 1.0) > weight_tolerance)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   87","line":"        {"},
{"lineNum":"   88","line":"            throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   89","line":"                \"Bunch.inject: macroparticle weight of injected bunch does not match.\");"},
{"lineNum":"   90","line":"        }"},
{"lineNum":"   91","line":"    }"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"    // prepare"},
{"lineNum":"   94","line":"    double target_momentum = ref.get_momentum();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   95","line":"    double injected_momentum = oref.get_momentum();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   96","line":"    double pdiff = injected_momentum / target_momentum;"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"    karray1d_dev ref_st_diff(\"\", 6);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   99","line":"    karray1d_dev tgt_st(\"\", 6);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  100","line":"    karray1d_dev inj_st(\"\", 6);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"    auto h_ref_st_diff = Kokkos::create_mirror_view(ref_st_diff);"},
{"lineNum":"  103","line":"    auto h_tgt_st      = Kokkos::create_mirror_view(tgt_st);"},
{"lineNum":"  104","line":"    auto h_inj_st      = Kokkos::create_mirror_view(inj_st);"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"    for (int i = 0; i < 6; ++i)"},
{"lineNum":"  107","line":"    {"},
{"lineNum":"  108","line":"        h_tgt_st(i) = ref.get_state()[i];","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  109","line":"        h_inj_st(i) = oref.get_state()[i];","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  110","line":"        h_ref_st_diff(i) = h_inj_st(i) - h_tgt_st(i);","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  111","line":"    }"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"    Kokkos::deep_copy(ref_st_diff, h_ref_st_diff);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  114","line":"    Kokkos::deep_copy(tgt_st, h_tgt_st);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  115","line":"    Kokkos::deep_copy(inj_st, h_inj_st);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"    // regular"},
{"lineNum":"  118","line":"    get_bunch_particles(PG::regular).inject(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  119","line":"            o.get_bunch_particles(PG::regular),"},
{"lineNum":"  120","line":"            ref_st_diff, tgt_st, inj_st, pdiff );"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"    // spectator"},
{"lineNum":"  123","line":"    get_bunch_particles(PG::spectator).inject(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  124","line":"            o.get_bunch_particles(PG::spectator),"},
{"lineNum":"  125","line":"            ref_st_diff, tgt_st, inj_st, pdiff );"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"    // update total number, for both real and spectator particles"},
{"lineNum":"  128","line":"    int old_total = update_total_num();"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"    // target bunch is empty.  Set the weights from the injected bunch"},
{"lineNum":"  131","line":"    if (old_total == 0) real_num = o.get_real_num();"},
{"lineNum":"  132","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"template<>"},
{"lineNum":"  135","line":"void"},
{"lineNum":"  136","line":"Bunch::print_statistics(Logger& logger) const"},
{"lineNum":"  137","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  138","line":"    using LV = LoggerV;"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"    logger(LV::DEBUG)"},
{"lineNum":"  141","line":"        << \"Bunch statistics: \""},
{"lineNum":"  142","line":"        << \"num_valid = \" << get_local_num()"},
{"lineNum":"  143","line":"        << \", size = \" << size()"},
{"lineNum":"  144","line":"        << \", capacity = \" << capacity()"},
{"lineNum":"  145","line":"        << \", total_num = \" << get_total_num()"},
{"lineNum":"  146","line":"        <<\"\\nMean and std: \";"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"    // print particles after propagate"},
{"lineNum":"  149","line":"    auto mean = Core_diagnostics::calculate_mean(*this);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  150","line":"    auto std  = Core_diagnostics::calculate_std(*this, mean);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"    logger(LV::DEBUG)"},
{"lineNum":"  153","line":"        << std::resetiosflags(std::ios::fixed)"},
{"lineNum":"  154","line":"        << std::setprecision(16)"},
{"lineNum":"  155","line":"        << std::setiosflags(std::ios::showpos | std::ios::scientific)"},
{"lineNum":"  156","line":"        << \"\\n\""},
{"lineNum":"  157","line":"        //<< \"\\nmean\\tstd\\n\""},
{"lineNum":"  158","line":"        ;"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"    for (int i=0; i<6; ++i)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  161","line":"        logger(LV::DEBUG) << mean[i] << \", \" << std[i] << \"\\n\";"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"    logger(LV::DEBUG)"},
{"lineNum":"  164","line":"        << std::resetiosflags(std::ios::showpos | std::ios::scientific)"},
{"lineNum":"  165","line":"        << \"\\n\";"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  168","line":""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 53, "covered" : 0,};
var merged_data = [];
