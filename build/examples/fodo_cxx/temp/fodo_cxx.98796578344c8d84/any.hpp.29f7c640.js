var data = {lines:[
{"lineNum":"    1","line":"// See http://www.boost.org/libs/any for Documentation."},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"#ifndef BOOST_ANY_INCLUDED"},
{"lineNum":"    4","line":"#define BOOST_ANY_INCLUDED"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"#if defined(_MSC_VER)"},
{"lineNum":"    7","line":"# pragma once"},
{"lineNum":"    8","line":"#endif"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"// what:  variant type boost::any"},
{"lineNum":"   11","line":"// who:   contributed by Kevlin Henney,"},
{"lineNum":"   12","line":"//        with features contributed and bugs found by"},
{"lineNum":"   13","line":"//        Antony Polukhin, Ed Brey, Mark Rodgers,"},
{"lineNum":"   14","line":"//        Peter Dimov, and James Curran"},
{"lineNum":"   15","line":"// when:  July 2001, April 2013 - 2019"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"#include <algorithm>"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"#include <boost/config.hpp>"},
{"lineNum":"   20","line":"#include <boost/type_index.hpp>"},
{"lineNum":"   21","line":"#include <boost/type_traits/remove_reference.hpp>"},
{"lineNum":"   22","line":"#include <boost/type_traits/decay.hpp>"},
{"lineNum":"   23","line":"#include <boost/type_traits/remove_cv.hpp>"},
{"lineNum":"   24","line":"#include <boost/type_traits/add_reference.hpp>"},
{"lineNum":"   25","line":"#include <boost/type_traits/is_reference.hpp>"},
{"lineNum":"   26","line":"#include <boost/type_traits/is_const.hpp>"},
{"lineNum":"   27","line":"#include <boost/throw_exception.hpp>"},
{"lineNum":"   28","line":"#include <boost/static_assert.hpp>"},
{"lineNum":"   29","line":"#include <boost/utility/enable_if.hpp>"},
{"lineNum":"   30","line":"#include <boost/core/addressof.hpp>"},
{"lineNum":"   31","line":"#include <boost/type_traits/is_same.hpp>"},
{"lineNum":"   32","line":"#include <boost/type_traits/is_const.hpp>"},
{"lineNum":"   33","line":"#include <boost/type_traits/conditional.hpp>"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"namespace boost"},
{"lineNum":"   36","line":"{"},
{"lineNum":"   37","line":"    class any"},
{"lineNum":"   38","line":"    {"},
{"lineNum":"   39","line":"    public: // structors"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"        any() BOOST_NOEXCEPT"},
{"lineNum":"   42","line":"          : content(0)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   43","line":"        {"},
{"lineNum":"   44","line":"        }"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"        template<typename ValueType>"},
{"lineNum":"   47","line":"        any(const ValueType & value)"},
{"lineNum":"   48","line":"          : content(new holder<","class":"lineNoCov","hits":"0","possible_hits":"32",},
{"lineNum":"   49","line":"                BOOST_DEDUCED_TYPENAME remove_cv<BOOST_DEDUCED_TYPENAME decay<const ValueType>::type>::type"},
{"lineNum":"   50","line":"            >(value))"},
{"lineNum":"   51","line":"        {"},
{"lineNum":"   52","line":"        }"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"        any(const any & other)"},
{"lineNum":"   55","line":"          : content(other.content ? other.content->clone() : 0)","class":"lineNoCov","hits":"0","possible_hits":"80",},
{"lineNum":"   56","line":"        {"},
{"lineNum":"   57","line":"        }"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"#ifndef BOOST_NO_CXX11_RVALUE_REFERENCES"},
{"lineNum":"   60","line":"        // Move constructor"},
{"lineNum":"   61","line":"        any(any&& other) BOOST_NOEXCEPT"},
{"lineNum":"   62","line":"          : content(other.content)","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"   63","line":"        {"},
{"lineNum":"   64","line":"            other.content = 0;","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"   65","line":"        }"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"        // Perfect forwarding of ValueType"},
{"lineNum":"   68","line":"        template<typename ValueType>"},
{"lineNum":"   69","line":"        any(ValueType&& value"},
{"lineNum":"   70","line":"            , typename boost::disable_if<boost::is_same<any&, ValueType> >::type* = 0 // disable if value has type `any&`"},
{"lineNum":"   71","line":"            , typename boost::disable_if<boost::is_const<ValueType> >::type* = 0) // disable if value has type `const ValueType&&`"},
{"lineNum":"   72","line":"          : content(new holder< typename decay<ValueType>::type >(static_cast<ValueType&&>(value)))","class":"lineNoCov","hits":"0","possible_hits":"40",},
{"lineNum":"   73","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   74","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   75","line":"#endif"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"        ~any() BOOST_NOEXCEPT"},
{"lineNum":"   78","line":"        {"},
{"lineNum":"   79","line":"            delete content;","class":"lineNoCov","hits":"0","possible_hits":"182",},
{"lineNum":"   80","line":"        }"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"    public: // modifiers"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"        any & swap(any & rhs) BOOST_NOEXCEPT"},
{"lineNum":"   85","line":"        {"},
{"lineNum":"   86","line":"            std::swap(content, rhs.content);"},
{"lineNum":"   87","line":"            return *this;"},
{"lineNum":"   88","line":"        }"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"#ifdef BOOST_NO_CXX11_RVALUE_REFERENCES"},
{"lineNum":"   92","line":"        template<typename ValueType>"},
{"lineNum":"   93","line":"        any & operator=(const ValueType & rhs)"},
{"lineNum":"   94","line":"        {"},
{"lineNum":"   95","line":"            any(rhs).swap(*this);"},
{"lineNum":"   96","line":"            return *this;"},
{"lineNum":"   97","line":"        }"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"        any & operator=(any rhs)"},
{"lineNum":"  100","line":"        {"},
{"lineNum":"  101","line":"            any(rhs).swap(*this);"},
{"lineNum":"  102","line":"            return *this;"},
{"lineNum":"  103","line":"        }"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"#else"},
{"lineNum":"  106","line":"        any & operator=(const any& rhs)"},
{"lineNum":"  107","line":"        {"},
{"lineNum":"  108","line":"            any(rhs).swap(*this);"},
{"lineNum":"  109","line":"            return *this;"},
{"lineNum":"  110","line":"        }"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"        // move assignment"},
{"lineNum":"  113","line":"        any & operator=(any&& rhs) BOOST_NOEXCEPT"},
{"lineNum":"  114","line":"        {"},
{"lineNum":"  115","line":"            rhs.swap(*this);"},
{"lineNum":"  116","line":"            any().swap(rhs);"},
{"lineNum":"  117","line":"            return *this;"},
{"lineNum":"  118","line":"        }"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"        // Perfect forwarding of ValueType"},
{"lineNum":"  121","line":"        template <class ValueType>"},
{"lineNum":"  122","line":"        any & operator=(ValueType&& rhs)"},
{"lineNum":"  123","line":"        {"},
{"lineNum":"  124","line":"            any(static_cast<ValueType&&>(rhs)).swap(*this);"},
{"lineNum":"  125","line":"            return *this;"},
{"lineNum":"  126","line":"        }"},
{"lineNum":"  127","line":"#endif"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"    public: // queries"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"        bool empty() const BOOST_NOEXCEPT"},
{"lineNum":"  132","line":"        {"},
{"lineNum":"  133","line":"            return !content;"},
{"lineNum":"  134","line":"        }"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"        void clear() BOOST_NOEXCEPT"},
{"lineNum":"  137","line":"        {"},
{"lineNum":"  138","line":"            any().swap(*this);"},
{"lineNum":"  139","line":"        }"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"        const boost::typeindex::type_info& type() const BOOST_NOEXCEPT"},
{"lineNum":"  142","line":"        {"},
{"lineNum":"  143","line":"            return content ? content->type() : boost::typeindex::type_id<void>().type_info();","class":"lineNoCov","hits":"0","possible_hits":"30",},
{"lineNum":"  144","line":"        }"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"#ifndef BOOST_NO_MEMBER_TEMPLATE_FRIENDS"},
{"lineNum":"  147","line":"    private: // types"},
{"lineNum":"  148","line":"#else"},
{"lineNum":"  149","line":"    public: // types (public so any_cast can be non-friend)"},
{"lineNum":"  150","line":"#endif"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"        class BOOST_SYMBOL_VISIBLE placeholder"},
{"lineNum":"  153","line":"        {"},
{"lineNum":"  154","line":"        public: // structors"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"            virtual ~placeholder()"},
{"lineNum":"  157","line":"            {"},
{"lineNum":"  158","line":"            }"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"        public: // queries"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"            virtual const boost::typeindex::type_info& type() const BOOST_NOEXCEPT = 0;"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"            virtual placeholder * clone() const = 0;"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"        };"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"        template<typename ValueType>"},
{"lineNum":"  169","line":"        class holder : public placeholder","class":"lineNoCov","hits":"0","possible_hits":"57",},
{"lineNum":"  170","line":"        {"},
{"lineNum":"  171","line":"        public: // structors"},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"            holder(const ValueType & value)"},
{"lineNum":"  174","line":"              : held(value)","class":"lineNoCov","hits":"0","possible_hits":"22",},
{"lineNum":"  175","line":"            {","class":"lineNoCov","hits":"0","possible_hits":"34",},
{"lineNum":"  176","line":"            }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"#ifndef BOOST_NO_CXX11_RVALUE_REFERENCES"},
{"lineNum":"  179","line":"            holder(ValueType&& value)"},
{"lineNum":"  180","line":"              : held(static_cast< ValueType&& >(value))"},
{"lineNum":"  181","line":"            {","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  182","line":"            }"},
{"lineNum":"  183","line":"#endif"},
{"lineNum":"  184","line":"        public: // queries"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"            virtual const boost::typeindex::type_info& type() const BOOST_NOEXCEPT"},
{"lineNum":"  187","line":"            {","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  188","line":"                return boost::typeindex::type_id<ValueType>().type_info();","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":"  189","line":"            }"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"            virtual placeholder * clone() const"},
{"lineNum":"  192","line":"            {","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  193","line":"                return new holder(held);","class":"lineNoCov","hits":"0","possible_hits":"17",},
{"lineNum":"  194","line":"            }"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"        public: // representation"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"            ValueType held;"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"        private: // intentionally left unimplemented"},
{"lineNum":"  201","line":"            holder & operator=(const holder &);"},
{"lineNum":"  202","line":"        };"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"#ifndef BOOST_NO_MEMBER_TEMPLATE_FRIENDS"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"    private: // representation"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"        template<typename ValueType>"},
{"lineNum":"  209","line":"        friend ValueType * any_cast(any *) BOOST_NOEXCEPT;"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"        template<typename ValueType>"},
{"lineNum":"  212","line":"        friend ValueType * unsafe_any_cast(any *) BOOST_NOEXCEPT;"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"#else"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"    public: // representation (public so any_cast can be non-friend)"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"#endif"},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"        placeholder * content;"},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"    };"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"    inline void swap(any & lhs, any & rhs) BOOST_NOEXCEPT"},
{"lineNum":"  225","line":"    {"},
{"lineNum":"  226","line":"        lhs.swap(rhs);"},
{"lineNum":"  227","line":"    }"},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"    class BOOST_SYMBOL_VISIBLE bad_any_cast :","class":"lineNoCov","hits":"0","possible_hits":"25",},
{"lineNum":"  230","line":"#ifndef BOOST_NO_RTTI"},
{"lineNum":"  231","line":"        public std::bad_cast"},
{"lineNum":"  232","line":"#else"},
{"lineNum":"  233","line":"        public std::exception"},
{"lineNum":"  234","line":"#endif"},
{"lineNum":"  235","line":"    {"},
{"lineNum":"  236","line":"    public:"},
{"lineNum":"  237","line":"        virtual const char * what() const BOOST_NOEXCEPT_OR_NOTHROW"},
{"lineNum":"  238","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  239","line":"            return \"boost::bad_any_cast: \"","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  240","line":"                   \"failed conversion using boost::any_cast\";"},
{"lineNum":"  241","line":"        }"},
{"lineNum":"  242","line":"    };"},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"    template<typename ValueType>"},
{"lineNum":"  245","line":"    ValueType * any_cast(any * operand) BOOST_NOEXCEPT"},
{"lineNum":"  246","line":"    {"},
{"lineNum":"  247","line":"        return operand && operand->type() == boost::typeindex::type_id<ValueType>()","class":"lineNoCov","hits":"0","possible_hits":"19",},
{"lineNum":"  248","line":"            ? boost::addressof("},
{"lineNum":"  249","line":"                static_cast<any::holder<BOOST_DEDUCED_TYPENAME remove_cv<ValueType>::type> *>(operand->content)->held","class":"lineNoCov","hits":"0","possible_hits":"19",},
{"lineNum":"  250","line":"              )"},
{"lineNum":"  251","line":"            : 0;"},
{"lineNum":"  252","line":"    }"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"    template<typename ValueType>"},
{"lineNum":"  255","line":"    inline const ValueType * any_cast(const any * operand) BOOST_NOEXCEPT"},
{"lineNum":"  256","line":"    {"},
{"lineNum":"  257","line":"        return any_cast<ValueType>(const_cast<any *>(operand));"},
{"lineNum":"  258","line":"    }"},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"    template<typename ValueType>"},
{"lineNum":"  261","line":"    ValueType any_cast(any & operand)"},
{"lineNum":"  262","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  263","line":"        typedef BOOST_DEDUCED_TYPENAME remove_reference<ValueType>::type nonref;"},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":""},
{"lineNum":"  266","line":"        nonref * result = any_cast<nonref>(boost::addressof(operand));"},
{"lineNum":"  267","line":"        if(!result)"},
{"lineNum":"  268","line":"            boost::throw_exception(bad_any_cast());","class":"lineNoCov","hits":"0","possible_hits":"39",},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"        // Attempt to avoid construction of a temporary object in cases when"},
{"lineNum":"  271","line":"        // `ValueType` is not a reference. Example:"},
{"lineNum":"  272","line":"        // `static_cast<std::string>(*result);`"},
{"lineNum":"  273","line":"        // which is equal to `std::string(*result);`"},
{"lineNum":"  274","line":"        typedef BOOST_DEDUCED_TYPENAME boost::conditional<"},
{"lineNum":"  275","line":"            boost::is_reference<ValueType>::value,"},
{"lineNum":"  276","line":"            ValueType,"},
{"lineNum":"  277","line":"            BOOST_DEDUCED_TYPENAME boost::add_reference<ValueType>::type"},
{"lineNum":"  278","line":"        >::type ref_type;"},
{"lineNum":"  279","line":""},
{"lineNum":"  280","line":"#ifdef BOOST_MSVC"},
{"lineNum":"  281","line":"#   pragma warning(push)"},
{"lineNum":"  282","line":"#   pragma warning(disable: 4172) // \"returning address of local variable or temporary\" but *result is not local!"},
{"lineNum":"  283","line":"#endif"},
{"lineNum":"  284","line":"        return static_cast<ref_type>(*result);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  285","line":"#ifdef BOOST_MSVC"},
{"lineNum":"  286","line":"#   pragma warning(pop)"},
{"lineNum":"  287","line":"#endif"},
{"lineNum":"  288","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"    template<typename ValueType>"},
{"lineNum":"  291","line":"    inline ValueType any_cast(const any & operand)"},
{"lineNum":"  292","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  293","line":"        typedef BOOST_DEDUCED_TYPENAME remove_reference<ValueType>::type nonref;"},
{"lineNum":"  294","line":"        return any_cast<const nonref &>(const_cast<any &>(operand));","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  295","line":"    }"},
{"lineNum":"  296","line":""},
{"lineNum":"  297","line":"#ifndef BOOST_NO_CXX11_RVALUE_REFERENCES"},
{"lineNum":"  298","line":"    template<typename ValueType>"},
{"lineNum":"  299","line":"    inline ValueType any_cast(any&& operand)"},
{"lineNum":"  300","line":"    {"},
{"lineNum":"  301","line":"        BOOST_STATIC_ASSERT_MSG("},
{"lineNum":"  302","line":"            boost::is_rvalue_reference<ValueType&&>::value /*true if ValueType is rvalue or just a value*/"},
{"lineNum":"  303","line":"            || boost::is_const< typename boost::remove_reference<ValueType>::type >::value,"},
{"lineNum":"  304","line":"            \"boost::any_cast shall not be used for getting nonconst references to temporary objects\""},
{"lineNum":"  305","line":"        );"},
{"lineNum":"  306","line":"        return any_cast<ValueType>(operand);","class":"lineNoCov","hits":"0","possible_hits":"25",},
{"lineNum":"  307","line":"    }"},
{"lineNum":"  308","line":"#endif"},
{"lineNum":"  309","line":""},
{"lineNum":"  310","line":""},
{"lineNum":"  311","line":"    // Note: The \"unsafe\" versions of any_cast are not part of the"},
{"lineNum":"  312","line":"    // public interface and may be removed at any time. They are"},
{"lineNum":"  313","line":"    // required where we know what type is stored in the any and can\'t"},
{"lineNum":"  314","line":"    // use typeid() comparison, e.g., when our types may travel across"},
{"lineNum":"  315","line":"    // different shared libraries."},
{"lineNum":"  316","line":"    template<typename ValueType>"},
{"lineNum":"  317","line":"    inline ValueType * unsafe_any_cast(any * operand) BOOST_NOEXCEPT"},
{"lineNum":"  318","line":"    {"},
{"lineNum":"  319","line":"        return boost::addressof("},
{"lineNum":"  320","line":"            static_cast<any::holder<ValueType> *>(operand->content)->held"},
{"lineNum":"  321","line":"        );"},
{"lineNum":"  322","line":"    }"},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"    template<typename ValueType>"},
{"lineNum":"  325","line":"    inline const ValueType * unsafe_any_cast(const any * operand) BOOST_NOEXCEPT"},
{"lineNum":"  326","line":"    {"},
{"lineNum":"  327","line":"        return unsafe_any_cast<ValueType>(const_cast<any *>(operand));"},
{"lineNum":"  328","line":"    }"},
{"lineNum":"  329","line":"}"},
{"lineNum":"  330","line":""},
{"lineNum":"  331","line":"// Copyright Kevlin Henney, 2000, 2001, 2002. All rights reserved."},
{"lineNum":"  332","line":"// Copyright Antony Polukhin, 2013-2019."},
{"lineNum":"  333","line":"//"},
{"lineNum":"  334","line":"// Distributed under the Boost Software License, Version 1.0. (See"},
{"lineNum":"  335","line":"// accompanying file LICENSE_1_0.txt or copy at"},
{"lineNum":"  336","line":"// http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"  337","line":""},
{"lineNum":"  338","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 31, "covered" : 0,};
var merged_data = [];
