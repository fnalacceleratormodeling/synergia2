var data = {lines:[
{"lineNum":"    1","line":"// This file is part of Eigen, a lightweight C++ template library"},
{"lineNum":"    2","line":"// for linear algebra."},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Copyright (C) 2017 Gael Guennebaud <gael.guennebaud@inria.fr>"},
{"lineNum":"    5","line":"//"},
{"lineNum":"    6","line":"// This Source Code Form is subject to the terms of the Mozilla"},
{"lineNum":"    7","line":"// Public License v. 2.0. If a copy of the MPL was not distributed"},
{"lineNum":"    8","line":"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/."},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"#ifndef EIGEN_INTEGRAL_CONSTANT_H"},
{"lineNum":"   12","line":"#define EIGEN_INTEGRAL_CONSTANT_H"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"#include \"../InternalHeaderCheck.h\""},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"namespace Eigen {"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"namespace internal {"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"template<int N> class FixedInt;"},
{"lineNum":"   21","line":"template<int N> class VariableAndFixedInt;"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"/** \\internal"},
{"lineNum":"   24","line":"  * \\class FixedInt"},
{"lineNum":"   25","line":"  *"},
{"lineNum":"   26","line":"  * This class embeds a compile-time integer \\c N."},
{"lineNum":"   27","line":"  *"},
{"lineNum":"   28","line":"  * It is similar to c++11 std::integral_constant<int,N> but with some additional features"},
{"lineNum":"   29","line":"  * such as:"},
{"lineNum":"   30","line":"  *  - implicit conversion to int"},
{"lineNum":"   31","line":"  *  - arithmetic and some bitwise operators: -, +, *, /, %, &, |"},
{"lineNum":"   32","line":"  *  - c++98/14 compatibility with fix<N> and fix<N>() syntax to define integral constants."},
{"lineNum":"   33","line":"  *"},
{"lineNum":"   34","line":"  * It is strongly discouraged to directly deal with this class FixedInt. Instances are expcected to"},
{"lineNum":"   35","line":"  * be created by the user using Eigen::fix<N> or Eigen::fix<N>(). In C++98-11, the former syntax does"},
{"lineNum":"   36","line":"  * not create a FixedInt<N> instance but rather a point to function that needs to be \\em cleaned-up"},
{"lineNum":"   37","line":"  * using the generic helper:"},
{"lineNum":"   38","line":"  * \\code"},
{"lineNum":"   39","line":"  * internal::cleanup_index_type<T>::type"},
{"lineNum":"   40","line":"  * internal::cleanup_index_type<T,DynamicKey>::type"},
{"lineNum":"   41","line":"  * \\endcode"},
{"lineNum":"   42","line":"  * where T can a FixedInt<N>, a pointer to function FixedInt<N> (*)(), or numerous other integer-like representations."},
{"lineNum":"   43","line":"  * \\c DynamicKey is either Dynamic (default) or DynamicIndex and used to identify true compile-time values."},
{"lineNum":"   44","line":"  *"},
{"lineNum":"   45","line":"  * For convenience, you can extract the compile-time value \\c N in a generic way using the following helper:"},
{"lineNum":"   46","line":"  * \\code"},
{"lineNum":"   47","line":"  * internal::get_fixed_value<T,DefaultVal>::value"},
{"lineNum":"   48","line":"  * \\endcode"},
{"lineNum":"   49","line":"  * that will give you \\c N if T equals FixedInt<N> or FixedInt<N> (*)(), and \\c DefaultVal if T does not embed any compile-time value (e.g., T==int)."},
{"lineNum":"   50","line":"  *"},
{"lineNum":"   51","line":"  * \\sa fix<N>, class VariableAndFixedInt"},
{"lineNum":"   52","line":"  */"},
{"lineNum":"   53","line":"template<int N> class FixedInt"},
{"lineNum":"   54","line":"{"},
{"lineNum":"   55","line":"public:"},
{"lineNum":"   56","line":"  static const int value = N;"},
{"lineNum":"   57","line":"  EIGEN_CONSTEXPR operator int() const { return value; }"},
{"lineNum":"   58","line":"  FixedInt() {}"},
{"lineNum":"   59","line":"  FixedInt( VariableAndFixedInt<N> other) {"},
{"lineNum":"   60","line":"    #ifndef EIGEN_INTERNAL_DEBUGGING"},
{"lineNum":"   61","line":"    EIGEN_UNUSED_VARIABLE(other);"},
{"lineNum":"   62","line":"    #endif"},
{"lineNum":"   63","line":"    eigen_internal_assert(int(other)==N);"},
{"lineNum":"   64","line":"  }"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"  FixedInt<-N> operator-() const { return FixedInt<-N>(); }"},
{"lineNum":"   67","line":"  template<int M>"},
{"lineNum":"   68","line":"  FixedInt<N+M> operator+( FixedInt<M>) const { return FixedInt<N+M>(); }"},
{"lineNum":"   69","line":"  template<int M>"},
{"lineNum":"   70","line":"  FixedInt<N-M> operator-( FixedInt<M>) const { return FixedInt<N-M>(); }"},
{"lineNum":"   71","line":"  template<int M>"},
{"lineNum":"   72","line":"  FixedInt<N*M> operator*( FixedInt<M>) const { return FixedInt<N*M>(); }"},
{"lineNum":"   73","line":"  template<int M>"},
{"lineNum":"   74","line":"  FixedInt<N/M> operator/( FixedInt<M>) const { return FixedInt<N/M>(); }"},
{"lineNum":"   75","line":"  template<int M>"},
{"lineNum":"   76","line":"  FixedInt<N%M> operator%( FixedInt<M>) const { return FixedInt<N%M>(); }"},
{"lineNum":"   77","line":"  template<int M>"},
{"lineNum":"   78","line":"  FixedInt<N|M> operator|( FixedInt<M>) const { return FixedInt<N|M>(); }"},
{"lineNum":"   79","line":"  template<int M>"},
{"lineNum":"   80","line":"  FixedInt<N&M> operator&( FixedInt<M>) const { return FixedInt<N&M>(); }"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"#if EIGEN_HAS_CXX14_VARIABLE_TEMPLATES"},
{"lineNum":"   83","line":"  // Needed in C++14 to allow fix<N>():"},
{"lineNum":"   84","line":"  FixedInt operator() () const { return *this; }"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"  VariableAndFixedInt<N> operator() (int val) const { return VariableAndFixedInt<N>(val); }"},
{"lineNum":"   87","line":"#else"},
{"lineNum":"   88","line":"  FixedInt ( FixedInt<N> (*)() ) {}"},
{"lineNum":"   89","line":"#endif"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"#if EIGEN_HAS_CXX11"},
{"lineNum":"   92","line":"  FixedInt(std::integral_constant<int,N>) {}"},
{"lineNum":"   93","line":"#endif"},
{"lineNum":"   94","line":"};"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"/** \\internal"},
{"lineNum":"   97","line":"  * \\class VariableAndFixedInt"},
{"lineNum":"   98","line":"  *"},
{"lineNum":"   99","line":"  * This class embeds both a compile-time integer \\c N and a runtime integer."},
{"lineNum":"  100","line":"  * Both values are supposed to be equal unless the compile-time value \\c N has a special"},
{"lineNum":"  101","line":"  * value meaning that the runtime-value should be used. Depending on the context, this special"},
{"lineNum":"  102","line":"  * value can be either Eigen::Dynamic (for positive quantities) or Eigen::DynamicIndex (for"},
{"lineNum":"  103","line":"  * quantities that can be negative)."},
{"lineNum":"  104","line":"  *"},
{"lineNum":"  105","line":"  * It is the return-type of the function Eigen::fix<N>(int), and most of the time this is the only"},
{"lineNum":"  106","line":"  * way it is used. It is strongly discouraged to directly deal with instances of VariableAndFixedInt."},
{"lineNum":"  107","line":"  * Indeed, in order to write generic code, it is the responsibility of the callee to properly convert"},
{"lineNum":"  108","line":"  * it to either a true compile-time quantity (i.e. a FixedInt<N>), or to a runtime quantity (e.g., an Index)"},
{"lineNum":"  109","line":"  * using the following generic helper:"},
{"lineNum":"  110","line":"  * \\code"},
{"lineNum":"  111","line":"  * internal::cleanup_index_type<T>::type"},
{"lineNum":"  112","line":"  * internal::cleanup_index_type<T,DynamicKey>::type"},
{"lineNum":"  113","line":"  * \\endcode"},
{"lineNum":"  114","line":"  * where T can be a template instantiation of VariableAndFixedInt or numerous other integer-like representations."},
{"lineNum":"  115","line":"  * \\c DynamicKey is either Dynamic (default) or DynamicIndex and used to identify true compile-time values."},
{"lineNum":"  116","line":"  *"},
{"lineNum":"  117","line":"  * For convenience, you can also extract the compile-time value \\c N using the following helper:"},
{"lineNum":"  118","line":"  * \\code"},
{"lineNum":"  119","line":"  * internal::get_fixed_value<T,DefaultVal>::value"},
{"lineNum":"  120","line":"  * \\endcode"},
{"lineNum":"  121","line":"  * that will give you \\c N if T equals VariableAndFixedInt<N>, and \\c DefaultVal if T does not embed any compile-time value (e.g., T==int)."},
{"lineNum":"  122","line":"  *"},
{"lineNum":"  123","line":"  * \\sa fix<N>(int), class FixedInt"},
{"lineNum":"  124","line":"  */"},
{"lineNum":"  125","line":"template<int N> class VariableAndFixedInt"},
{"lineNum":"  126","line":"{"},
{"lineNum":"  127","line":"public:"},
{"lineNum":"  128","line":"  static const int value = N;"},
{"lineNum":"  129","line":"  operator int() const { return m_value; }"},
{"lineNum":"  130","line":"  VariableAndFixedInt(int val) { m_value = val; }"},
{"lineNum":"  131","line":"protected:"},
{"lineNum":"  132","line":"  int m_value;"},
{"lineNum":"  133","line":"};"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"template<typename T, int Default=Dynamic> struct get_fixed_value {"},
{"lineNum":"  136","line":"  static const int value = Default;"},
{"lineNum":"  137","line":"};"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"template<int N,int Default> struct get_fixed_value<FixedInt<N>,Default> {"},
{"lineNum":"  140","line":"  static const int value = N;"},
{"lineNum":"  141","line":"};"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"#if !EIGEN_HAS_CXX14_VARIABLE_TEMPLATES"},
{"lineNum":"  144","line":"template<int N,int Default> struct get_fixed_value<FixedInt<N> (*)(),Default> {"},
{"lineNum":"  145","line":"  static const int value = N;"},
{"lineNum":"  146","line":"};"},
{"lineNum":"  147","line":"#endif"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"template<int N,int Default> struct get_fixed_value<VariableAndFixedInt<N>,Default> {"},
{"lineNum":"  150","line":"  static const int value = N ;"},
{"lineNum":"  151","line":"};"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"template<typename T, int N, int Default>"},
{"lineNum":"  154","line":"struct get_fixed_value<variable_if_dynamic<T,N>,Default> {"},
{"lineNum":"  155","line":"  static const int value = N;"},
{"lineNum":"  156","line":"};"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"template<typename T> EIGEN_DEVICE_FUNC Index get_runtime_value(const T &x) { return x; }","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  159","line":"#if !EIGEN_HAS_CXX14_VARIABLE_TEMPLATES"},
{"lineNum":"  160","line":"template<int N> EIGEN_DEVICE_FUNC Index get_runtime_value(FixedInt<N> (*)()) { return N; }"},
{"lineNum":"  161","line":"#endif"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"// Cleanup integer/FixedInt/VariableAndFixedInt/etc types:"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"// By default, no cleanup:"},
{"lineNum":"  166","line":"template<typename T, int DynamicKey=Dynamic, typename EnableIf=void> struct cleanup_index_type { typedef T type; };"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"// Convert any integral type (e.g., short, int, unsigned int, etc.) to Eigen::Index"},
{"lineNum":"  169","line":"template<typename T, int DynamicKey> struct cleanup_index_type<T,DynamicKey,typename internal::enable_if<internal::is_integral<T>::value>::type> { typedef Index type; };"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"#if !EIGEN_HAS_CXX14_VARIABLE_TEMPLATES"},
{"lineNum":"  172","line":"// In c++98/c++11, fix<N> is a pointer to function that we better cleanup to a true FixedInt<N>:"},
{"lineNum":"  173","line":"template<int N, int DynamicKey> struct cleanup_index_type<FixedInt<N> (*)(), DynamicKey> { typedef FixedInt<N> type; };"},
{"lineNum":"  174","line":"#endif"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"// If VariableAndFixedInt does not match DynamicKey, then we turn it to a pure compile-time value:"},
{"lineNum":"  177","line":"template<int N, int DynamicKey> struct cleanup_index_type<VariableAndFixedInt<N>, DynamicKey> { typedef FixedInt<N> type; };"},
{"lineNum":"  178","line":"// If VariableAndFixedInt matches DynamicKey, then we turn it to a pure runtime-value (aka Index):"},
{"lineNum":"  179","line":"template<int DynamicKey> struct cleanup_index_type<VariableAndFixedInt<DynamicKey>, DynamicKey> { typedef Index type; };"},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"#if EIGEN_HAS_CXX11"},
{"lineNum":"  182","line":"template<int N, int DynamicKey> struct cleanup_index_type<std::integral_constant<int,N>, DynamicKey> { typedef FixedInt<N> type; };"},
{"lineNum":"  183","line":"#endif"},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"} // end namespace internal"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"#ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"#if EIGEN_HAS_CXX14_VARIABLE_TEMPLATES"},
{"lineNum":"  190","line":"template<int N>"},
{"lineNum":"  191","line":"static const internal::FixedInt<N> fix{};"},
{"lineNum":"  192","line":"#else"},
{"lineNum":"  193","line":"template<int N>"},
{"lineNum":"  194","line":"inline internal::FixedInt<N> fix() { return internal::FixedInt<N>(); }"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"// The generic typename T is mandatory. Otherwise, a code like fix<N> could refer to either the function above or this next overload."},
{"lineNum":"  197","line":"// This way a code like fix<N> can only refer to the previous function."},
{"lineNum":"  198","line":"template<int N,typename T>"},
{"lineNum":"  199","line":"inline internal::VariableAndFixedInt<N> fix(T val) { return internal::VariableAndFixedInt<N>(internal::convert_index<int>(val)); }"},
{"lineNum":"  200","line":"#endif"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"#else // EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"/** \\var fix<N>()"},
{"lineNum":"  205","line":"  * \\ingroup Core_Module"},
{"lineNum":"  206","line":"  *"},
{"lineNum":"  207","line":"  * This \\em identifier permits to construct an object embedding a compile-time integer \\c N."},
{"lineNum":"  208","line":"  *"},
{"lineNum":"  209","line":"  * \\tparam N the compile-time integer value"},
{"lineNum":"  210","line":"  *"},
{"lineNum":"  211","line":"  * It is typically used in conjunction with the Eigen::seq and Eigen::seqN functions to pass compile-time values to them:"},
{"lineNum":"  212","line":"  * \\code"},
{"lineNum":"  213","line":"  * seqN(10,fix<4>,fix<-3>)   // <=> [10 7 4 1]"},
{"lineNum":"  214","line":"  * \\endcode"},
{"lineNum":"  215","line":"  *"},
{"lineNum":"  216","line":"  * See also the function fix(int) to pass both a compile-time and runtime value."},
{"lineNum":"  217","line":"  *"},
{"lineNum":"  218","line":"  * In c++14, it is implemented as:"},
{"lineNum":"  219","line":"  * \\code"},
{"lineNum":"  220","line":"  * template<int N> static const internal::FixedInt<N> fix{};"},
{"lineNum":"  221","line":"  * \\endcode"},
{"lineNum":"  222","line":"  * where internal::FixedInt<N> is an internal template class similar to"},
{"lineNum":"  223","line":"  * <a href=\"http://en.cppreference.com/w/cpp/types/integral_constant\">\\c std::integral_constant </a><tt> <int,N> </tt>"},
{"lineNum":"  224","line":"  * Here, \\c fix<N> is thus an object of type \\c internal::FixedInt<N>."},
{"lineNum":"  225","line":"  *"},
{"lineNum":"  226","line":"  * In c++98/11, it is implemented as a function:"},
{"lineNum":"  227","line":"  * \\code"},
{"lineNum":"  228","line":"  * template<int N> inline internal::FixedInt<N> fix();"},
{"lineNum":"  229","line":"  * \\endcode"},
{"lineNum":"  230","line":"  * Here internal::FixedInt<N> is thus a pointer to function."},
{"lineNum":"  231","line":"  *"},
{"lineNum":"  232","line":"  * If for some reason you want a true object in c++98 then you can write: \\code fix<N>() \\endcode which is also valid in c++14."},
{"lineNum":"  233","line":"  *"},
{"lineNum":"  234","line":"  * \\sa fix<N>(int), seq, seqN"},
{"lineNum":"  235","line":"  */"},
{"lineNum":"  236","line":"template<int N>"},
{"lineNum":"  237","line":"static const auto fix();"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"/** \\fn fix<N>(int)"},
{"lineNum":"  240","line":"  * \\ingroup Core_Module"},
{"lineNum":"  241","line":"  *"},
{"lineNum":"  242","line":"  * This function returns an object embedding both a compile-time integer \\c N, and a fallback runtime value \\a val."},
{"lineNum":"  243","line":"  *"},
{"lineNum":"  244","line":"  * \\tparam N the compile-time integer value"},
{"lineNum":"  245","line":"  * \\param  val the fallback runtime integer value"},
{"lineNum":"  246","line":"  *"},
{"lineNum":"  247","line":"  * This function is a more general version of the \\ref fix identifier/function that can be used in template code"},
{"lineNum":"  248","line":"  * where the compile-time value could turn out to actually mean \"undefined at compile-time\". For positive integers"},
{"lineNum":"  249","line":"  * such as a size or a dimension, this case is identified by Eigen::Dynamic, whereas runtime signed integers"},
{"lineNum":"  250","line":"  * (e.g., an increment/stride) are identified as Eigen::DynamicIndex. In such a case, the runtime value \\a val"},
{"lineNum":"  251","line":"  * will be used as a fallback."},
{"lineNum":"  252","line":"  *"},
{"lineNum":"  253","line":"  * A typical use case would be:"},
{"lineNum":"  254","line":"  * \\code"},
{"lineNum":"  255","line":"  * template<typename Derived> void foo(const MatrixBase<Derived> &mat) {"},
{"lineNum":"  256","line":"  *   const int N = Derived::RowsAtCompileTime==Dynamic ? Dynamic : Derived::RowsAtCompileTime/2;"},
{"lineNum":"  257","line":"  *   const int n = mat.rows()/2;"},
{"lineNum":"  258","line":"  *   ... mat( seqN(0,fix<N>(n) ) ...;"},
{"lineNum":"  259","line":"  * }"},
{"lineNum":"  260","line":"  * \\endcode"},
{"lineNum":"  261","line":"  * In this example, the function Eigen::seqN knows that the second argument is expected to be a size."},
{"lineNum":"  262","line":"  * If the passed compile-time value N equals Eigen::Dynamic, then the proxy object returned by fix will be dissmissed, and converted to an Eigen::Index of value \\c n."},
{"lineNum":"  263","line":"  * Otherwise, the runtime-value \\c n will be dissmissed, and the returned ArithmeticSequence will be of the exact same type as <tt> seqN(0,fix<N>) </tt>."},
{"lineNum":"  264","line":"  *"},
{"lineNum":"  265","line":"  * \\sa fix, seqN, class ArithmeticSequence"},
{"lineNum":"  266","line":"  */"},
{"lineNum":"  267","line":"template<int N>"},
{"lineNum":"  268","line":"static const auto fix(int val);"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"#endif // EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"} // end namespace Eigen"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"#endif // EIGEN_INTEGRAL_CONSTANT_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 1, "covered" : 0,};
var merged_data = [];
