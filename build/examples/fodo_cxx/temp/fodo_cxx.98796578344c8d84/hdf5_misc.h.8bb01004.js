var data = {lines:[
{"lineNum":"    1","line":"#ifndef HDF5_MISC_H_"},
{"lineNum":"    2","line":"#define HDF5_MISC_H_"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#include \"hdf5.h\""},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"#include <stdexcept>"},
{"lineNum":"    7","line":"#include <sstream>"},
{"lineNum":"    8","line":"#include <iomanip>"},
{"lineNum":"    9","line":"#include <type_traits>"},
{"lineNum":"   10","line":"#include <vector>"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"#include <Kokkos_Core.hpp>"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"namespace storage_order"},
{"lineNum":"   15","line":"{"},
{"lineNum":"   16","line":"    constexpr int c = 0;"},
{"lineNum":"   17","line":"    constexpr int fortran = 1;"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"    constexpr int right = c;"},
{"lineNum":"   20","line":"    constexpr int left = fortran;"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"    constexpr int row = c;"},
{"lineNum":"   23","line":"    constexpr int col = fortran;"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"    constexpr int hdf5_default = c;"},
{"lineNum":"   26","line":"}"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"// hdf5 exceptions"},
{"lineNum":"   29","line":"struct Hdf5_exception : public std::exception"},
{"lineNum":"   30","line":"{"},
{"lineNum":"   31","line":"    Hdf5_exception(std::string const & msg = \"\")"},
{"lineNum":"   32","line":"        : hdf5_msg(), user_msg(msg), what_msg()","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   33","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   34","line":"        std::stringstream buf;"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"        //H5Eprint(H5E_DEFAULT, stderr);"},
{"lineNum":"   37","line":"        H5Ewalk(H5E_DEFAULT, H5E_WALK_UPWARD, &Hdf5_exception::err_walk, &buf);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"        hdf5_msg = buf.str();"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"        what_msg = std::string(\"\\n\")"},
{"lineNum":"   42","line":"            + \"===================================\\n\""},
{"lineNum":"   43","line":"            + \"USER MESSAGE:\\n  \" + user_msg + \"\\n\\n\""},
{"lineNum":"   44","line":"            + \"HDF5 MESSAGE:\\n\"   + hdf5_msg"},
{"lineNum":"   45","line":"            + \"===================================\\n\";"},
{"lineNum":"   46","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"    ~Hdf5_exception() throw() { }","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"    const char* what() const noexcept override"},
{"lineNum":"   51","line":"    { return what_msg.c_str(); }","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"private:"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"    static herr_t err_walk(unsigned int n, H5E_error_t const *err_desc, void *client_data)"},
{"lineNum":"   56","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   57","line":"        std::stringstream *ss = (std::stringstream *)client_data;"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"        /* Check arguments */"},
{"lineNum":"   60","line":"        if (!client_data) return 0;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"        /* Get descriptions for the major and minor error numbers */"},
{"lineNum":"   63","line":"        const char *maj_str = H5Eget_major(err_desc->maj_num);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   64","line":"        const char *min_str = H5Eget_minor(err_desc->min_num);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"        /* Print error message */"},
{"lineNum":"   67","line":"        (*ss) << \"  #\" << std::setfill(\'0\') << std::setw(4) << n","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   68","line":"              << \": \" << err_desc->file_name << \" line \" << err_desc->line","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   69","line":"              << \" in \" << err_desc->func_name << \"(): \" << err_desc->desc << \"\\n\"","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   70","line":"              << \"    major(\" << std::setfill(\'0\') << std::setw(3) << (int)err_desc->maj_num","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   71","line":"              << \"): \" << maj_str << \"\\n\""},
{"lineNum":"   72","line":"              << \"    minor(\" << std::setfill(\'0\') << std::setw(3) << (int)err_desc->min_num","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   73","line":"              << \"): \" << min_str << \"\\n\""},
{"lineNum":"   74","line":"            ;"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"        return 0;"},
{"lineNum":"   77","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"    std::string hdf5_msg;"},
{"lineNum":"   80","line":"    std::string user_msg;"},
{"lineNum":"   81","line":"    std::string what_msg;"},
{"lineNum":"   82","line":"};"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"// handles the closing of resources in the RAII way"},
{"lineNum":"   85","line":"struct Hdf5_handler"},
{"lineNum":"   86","line":"{"},
{"lineNum":"   87","line":"    Hdf5_handler(hid_t handler = 0) : hid(handler)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   88","line":"    { if (hid < 0) throw Hdf5_exception(\"Bad HDF5 Handler\"); }","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"    Hdf5_handler(Hdf5_handler&& o) noexcept : hid(o.hid)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   91","line":"    { o.hid = 0; }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"    Hdf5_handler & operator= (hid_t handler)"},
{"lineNum":"   94","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   95","line":"        if (handler < 0) throw Hdf5_exception(\"Bad HDF5 Handler\");","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"   96","line":"        hid = handler; return *this;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   97","line":"    }"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"    // no copy and copy assignment"},
{"lineNum":"  100","line":"    Hdf5_handler(Hdf5_handler const&) = delete;"},
{"lineNum":"  101","line":"    Hdf5_handler& operator= (Hdf5_handler const&) = delete;"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"    ~Hdf5_handler()"},
{"lineNum":"  104","line":"    { close(); }","class":"lineNoCov","hits":"0","possible_hits":"135",},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"    void close()"},
{"lineNum":"  107","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  108","line":"        if (hid == 0) return;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"        switch(H5Iget_type(hid))","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  111","line":"        {"},
{"lineNum":"  112","line":"        case H5I_FILE:      H5Fclose(hid); break;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  113","line":"        case H5I_GROUP:     H5Gclose(hid); break;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  114","line":"        case H5I_DATATYPE:  H5Tclose(hid); break;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  115","line":"        case H5I_DATASPACE: H5Sclose(hid); break;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  116","line":"        case H5I_DATASET:   H5Dclose(hid); break;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  117","line":"        case H5I_ATTR:      H5Aclose(hid); break;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  118","line":"        case H5I_GENPROP_LST: H5Pclose(hid); break;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  119","line":"        default: throw std::runtime_error(\"close of unhandled Hdf5 handler type\");","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  120","line":"        }"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"        hid = 0;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  123","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"    operator hid_t() const"},
{"lineNum":"  126","line":"    { return hid; }","class":"lineNoCov","hits":"0","possible_hits":"59",},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"    bool valid() const"},
{"lineNum":"  129","line":"    { return hid != 0; }","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"    hid_t hid;"},
{"lineNum":"  132","line":"};"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"#if 0"},
{"lineNum":"  135","line":"template<typename T>"},
{"lineNum":"  136","line":"struct hdf5_traits"},
{"lineNum":"  137","line":"{ using value_type = T::value_type; }"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"template<>"},
{"lineNum":"  140","line":"struct hdf5_traits<int> { using value_type = int; }"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"template<typename T, int N>"},
{"lineNum":"  143","line":"struct hdf5_traits<Boost::multi_array<T, N>> { using value_type = T; }"},
{"lineNum":"  144","line":"#endif"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"// The generic (T) version of h5_atomic_data_type is undefined."},
{"lineNum":"  147","line":"// Only versions with specializations will compile."},
{"lineNum":"  148","line":"template<typename T>"},
{"lineNum":"  149","line":"inline hid_t hdf5_atomic_data_type()"},
{"lineNum":"  150","line":"{ return hdf5_atomic_data_type<typename T::value_type>(); }"},
{"lineNum":"  151","line":"//{ return hdf5_traits<T>::value_type; }"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"#if 0"},
{"lineNum":"  154","line":"template<typename T,"},
{"lineNum":"  155","line":"    typename std::enable_if<Kokkos::is_view<T>::value>::type = 0>"},
{"lineNum":"  156","line":"inline hid_t hdf5_atomic_data_type()"},
{"lineNum":"  157","line":"{ return hdf5_atomic_data_type<typename T::value_type>(); }"},
{"lineNum":"  158","line":"#endif"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"template<>"},
{"lineNum":"  161","line":"inline hid_t hdf5_atomic_data_type<uint8_t>()"},
{"lineNum":"  162","line":"{ return H5Tcopy(H5T_NATIVE_UCHAR); }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"template<>"},
{"lineNum":"  165","line":"inline hid_t hdf5_atomic_data_type<int>()"},
{"lineNum":"  166","line":"{ return H5Tcopy(H5T_NATIVE_INT); }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"template<>"},
{"lineNum":"  169","line":"inline hid_t hdf5_atomic_data_type<double>()"},
{"lineNum":"  170","line":"{ return H5Tcopy(H5T_NATIVE_DOUBLE); }","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"class Commxx;"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"namespace syn"},
{"lineNum":"  176","line":"{"},
{"lineNum":"  177","line":"    struct data_info_t","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  178","line":"    {"},
{"lineNum":"  179","line":"        void const* ptr;"},
{"lineNum":"  180","line":"        std::vector<hsize_t> dims;"},
{"lineNum":"  181","line":"        Hdf5_handler atomic_type;"},
{"lineNum":"  182","line":"        size_t atomic_data_size;"},
{"lineNum":"  183","line":"        size_t size;"},
{"lineNum":"  184","line":"    };"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"    template<class T>"},
{"lineNum":"  187","line":"    std::enable_if_t<std::is_arithmetic<T>::value, data_info_t>"},
{"lineNum":"  188","line":"    extract_data_info(T const& t)"},
{"lineNum":"  189","line":"    { return {&t, {}, hdf5_atomic_data_type<T>(), sizeof(T), 1}; }","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"    template<class T>"},
{"lineNum":"  192","line":"    std::enable_if_t<Kokkos::is_view<T>::value, data_info_t>"},
{"lineNum":"  193","line":"    extract_data_info(T const& t)"},
{"lineNum":"  194","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  195","line":"        size_t size = 1;"},
{"lineNum":"  196","line":"        std::vector<hsize_t> dims(T::Rank);"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"        for(int i=0; i<T::Rank; ++i)"},
{"lineNum":"  199","line":"        {"},
{"lineNum":"  200","line":"            dims[i] = t.extent(i);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  201","line":"            size *= t.extent(i);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  202","line":"        }"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"        return { t.data(), dims,","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  205","line":"            hdf5_atomic_data_type<typename T::value_type>(),","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  206","line":"            sizeof(typename T::value_type), size };"},
{"lineNum":"  207","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  208","line":""},
{"lineNum":"  209","line":"    template<class T>"},
{"lineNum":"  210","line":"    std::enable_if_t<std::is_arithmetic<T>::value, void>"},
{"lineNum":"  211","line":"    resize_data_obj(T& t, data_info_t& di)"},
{"lineNum":"  212","line":"    {"},
{"lineNum":"  213","line":"        if (di.dims.size()) throw std::runtime_error("},
{"lineNum":"  214","line":"                \"resize_data_obj: non-zero rank resizing scalar\");"},
{"lineNum":"  215","line":"    }"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"    template<class T>"},
{"lineNum":"  218","line":"    std::enable_if_t<Kokkos::is_view<T>::value, void>"},
{"lineNum":"  219","line":"    resize_data_obj(T& t, data_info_t& di)"},
{"lineNum":"  220","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  221","line":"        if (di.dims.size() != T::Rank) throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  222","line":"                \"resize_data_obj: inconsistent data rank\");"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"        switch(di.dims.size())"},
{"lineNum":"  225","line":"        {"},
{"lineNum":"  226","line":"            case 1: Kokkos::resize(t, di.dims[0]); break;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  227","line":"            case 2: Kokkos::resize(t, di.dims[0], di.dims[1]); break;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  228","line":"            case 3: Kokkos::resize(t, di.dims[0], di.dims[1], di.dims[2]); break;"},
{"lineNum":"  229","line":"            default: throw std::runtime_error(\"unsupported dims\");"},
{"lineNum":"  230","line":"        }"},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"        di.ptr = t.data();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  233","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"    // collects dims of the data object thats about to be written/read"},
{"lineNum":"  240","line":"    // from all mpi ranks, does the sanity check, and produces an array"},
{"lineNum":"  241","line":"    // of all_dim0[mpi_rank] containing the portion of data responsible"},
{"lineNum":"  242","line":"    // for the particular mpi_rank."},
{"lineNum":"  243","line":"    //"},
{"lineNum":"  244","line":"    // examples (root_rank = 0):"},
{"lineNum":"  245","line":"    //"},
{"lineNum":"  246","line":"    // no | r0        | r1        | col   | all_dim_0 | notes"},
{"lineNum":"  247","line":"    //----------------------------------------------------------------------"},
{"lineNum":"  248","line":"    // 1  | {}        | {}        | true  | error     | scalars in col write"},
{"lineNum":"  249","line":"    //    |           |           |       |           | must be promoted"},
{"lineNum":"  250","line":"    //----+-----------+-----------+-------+-----------+----------------------"},
{"lineNum":"  251","line":"    // 2  | {}        | {}        | false | [1, 0]    | write from r0 only"},
{"lineNum":"  252","line":"    //----+-----------+-----------+-------+-----------+----------------------"},
{"lineNum":"  253","line":"    // 3  | {3}       | {4}       | true  | [3, 4]    |"},
{"lineNum":"  254","line":"    //----+-----------+-----------+-------+-----------+----------------------"},
{"lineNum":"  255","line":"    // 4  | {3}       | {0}       | true  | [3, 0]    | it is allowed"},
{"lineNum":"  256","line":"    //----+-----------+-----------+-------+-----------+----------------------"},
{"lineNum":"  257","line":"    // 5  | {0}       | {0}       | true  | [0, 0]    | also allowed"},
{"lineNum":"  258","line":"    //----+-----------+-----------+-------+-----------+----------------------"},
{"lineNum":"  259","line":"    // 6  | {3}       | {4}       | false | error     | dims must be the same"},
{"lineNum":"  260","line":"    //----+-----------+-----------+-------+-----------+----------------------"},
{"lineNum":"  261","line":"    // 7  | {4}       | {4}       | false | [4, 0]    |"},
{"lineNum":"  262","line":"    //----+-----------+-----------+-------+-----------+----------------------"},
{"lineNum":"  263","line":"    // 8  | {0}       | {0}       | false | [0, 0]    |"},
{"lineNum":"  264","line":"    //----+-----------+-----------+-------+-----------+----------------------"},
{"lineNum":"  265","line":"    // 9  | {3, 3}    | {4, 4}    | true  | error     | only 1st dim can be diff"},
{"lineNum":"  266","line":"    //----+-----------+-----------+-------+-----------+----------------------"},
{"lineNum":"  267","line":"    // 10 | {3, 5}    | {4, 5}    | true  | [3, 4]    |"},
{"lineNum":"  268","line":"    //----+-----------+-----------+-------+-----------+----------------------"},
{"lineNum":"  269","line":"    // 11 | {3, 5}    | {3, 5}    | true  | [3, 3]    |"},
{"lineNum":"  270","line":"    //----+-----------+-----------+-------+-----------+----------------------"},
{"lineNum":"  271","line":"    // 12 | {3, 3}    | {4, 3}    | false | error     | dims must be the same"},
{"lineNum":"  272","line":"    //----+-----------+-----------+-------+-----------+----------------------"},
{"lineNum":"  273","line":"    // 13 | {3, 4}    | {3, 4}    | false | [3, 0]    |"},
{"lineNum":"  274","line":"    //----+-----------+-----------+-------+-----------+----------------------"},
{"lineNum":"  275","line":"    // 14 | {3, 4, 5} | {6, 4, 4} | true  | error     |"},
{"lineNum":"  276","line":"    //----+-----------+-----------+-------+-----------+----------------------"},
{"lineNum":"  277","line":"    // 15 | {3, 4, 5} | {6, 4, 5} | true  | [3, 6]    |"},
{"lineNum":"  278","line":"    //----+-----------+-----------+-------+-----------+----------------------"},
{"lineNum":"  279","line":"    // 16 | {3, 4, 5} | {6, 4, 5} | false | error     |"},
{"lineNum":"  280","line":"    //----+-----------+-----------+-------+-----------+----------------------"},
{"lineNum":"  281","line":"    // 17 | {3, 4, 5} | {3, 4, 5} | false | [3, 0]    |"},
{"lineNum":"  282","line":"    //----+-----------+-----------+-------+-----------+----------------------"},
{"lineNum":"  283","line":"    // 18 | {3}       | {3, 4}    | true  | error     | data rank must be same"},
{"lineNum":"  284","line":"    //----+-----------+-----------+-------+-----------+----------------------"},
{"lineNum":"  285","line":"    // 19 | {3}       | {3, 4}    | false | error     | data rank must be same"},
{"lineNum":"  286","line":"    //----+-----------+-----------+-------+-----------+----------------------"},
{"lineNum":"  287","line":"    //"},
{"lineNum":"  288","line":"    std::vector<hsize_t>"},
{"lineNum":"  289","line":"    collect_dims( std::vector<hsize_t> const& dims,"},
{"lineNum":"  290","line":"                  bool collective,"},
{"lineNum":"  291","line":"                  Commxx const& comm,"},
{"lineNum":"  292","line":"                  int root_rank );"},
{"lineNum":"  293","line":"}"},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":""},
{"lineNum":"  296","line":"#endif /* HDF5_MISC_H_ */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 56, "covered" : 0,};
var merged_data = [];
