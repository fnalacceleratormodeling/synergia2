var data = {lines:[
{"lineNum":"    1","line":"/*"},
{"lineNum":"    2","line":"//@HEADER"},
{"lineNum":"    3","line":"// ************************************************************************"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"//                        Kokkos v. 3.0"},
{"lineNum":"    6","line":"//       Copyright (2020) National Technology & Engineering"},
{"lineNum":"    7","line":"//               Solutions of Sandia, LLC (NTESS)."},
{"lineNum":"    8","line":"//"},
{"lineNum":"    9","line":"// Under the terms of Contract DE-NA0003525 with NTESS,"},
{"lineNum":"   10","line":"// the U.S. Government retains certain rights in this software."},
{"lineNum":"   11","line":"//"},
{"lineNum":"   12","line":"// Redistribution and use in source and binary forms, with or without"},
{"lineNum":"   13","line":"// modification, are permitted provided that the following conditions are"},
{"lineNum":"   14","line":"// met:"},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"// 1. Redistributions of source code must retain the above copyright"},
{"lineNum":"   17","line":"// notice, this list of conditions and the following disclaimer."},
{"lineNum":"   18","line":"//"},
{"lineNum":"   19","line":"// 2. Redistributions in binary form must reproduce the above copyright"},
{"lineNum":"   20","line":"// notice, this list of conditions and the following disclaimer in the"},
{"lineNum":"   21","line":"// documentation and/or other materials provided with the distribution."},
{"lineNum":"   22","line":"//"},
{"lineNum":"   23","line":"// 3. Neither the name of the Corporation nor the names of the"},
{"lineNum":"   24","line":"// contributors may be used to endorse or promote products derived from"},
{"lineNum":"   25","line":"// this software without specific prior written permission."},
{"lineNum":"   26","line":"//"},
{"lineNum":"   27","line":"// THIS SOFTWARE IS PROVIDED BY NTESS \"AS IS\" AND ANY"},
{"lineNum":"   28","line":"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"},
{"lineNum":"   29","line":"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR"},
{"lineNum":"   30","line":"// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NTESS OR THE"},
{"lineNum":"   31","line":"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,"},
{"lineNum":"   32","line":"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,"},
{"lineNum":"   33","line":"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR"},
{"lineNum":"   34","line":"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF"},
{"lineNum":"   35","line":"// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING"},
{"lineNum":"   36","line":"// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"},
{"lineNum":"   37","line":"// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   38","line":"//"},
{"lineNum":"   39","line":"// Questions? Contact Christian R. Trott (crtrott@sandia.gov)"},
{"lineNum":"   40","line":"//"},
{"lineNum":"   41","line":"// ************************************************************************"},
{"lineNum":"   42","line":"//@HEADER"},
{"lineNum":"   43","line":"*/"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"#include \"Kokkos_Core.hpp\""},
{"lineNum":"   46","line":"#include \"Kokkos_HostSpace_deepcopy.hpp\""},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"namespace Kokkos {"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"namespace Impl {"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"#ifndef KOKKOS_IMPL_HOST_DEEP_COPY_SERIAL_LIMIT"},
{"lineNum":"   53","line":"#define KOKKOS_IMPL_HOST_DEEP_COPY_SERIAL_LIMIT 10 * 8192"},
{"lineNum":"   54","line":"#endif"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"void hostspace_parallel_deepcopy(void* dst, const void* src, ptrdiff_t n) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   57","line":"  if ((n < KOKKOS_IMPL_HOST_DEEP_COPY_SERIAL_LIMIT) ||","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   58","line":"      (Kokkos::DefaultHostExecutionSpace().concurrency() == 1)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   59","line":"    std::memcpy(dst, src, n);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   60","line":"    return;"},
{"lineNum":"   61","line":"  }"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"  using policy_t = Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>;"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"  // Both src and dst are aligned the same way with respect to 8 byte words"},
{"lineNum":"   66","line":"  if (reinterpret_cast<ptrdiff_t>(src) % 8 ==","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   67","line":"      reinterpret_cast<ptrdiff_t>(dst) % 8) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   68","line":"    char* dst_c       = reinterpret_cast<char*>(dst);"},
{"lineNum":"   69","line":"    const char* src_c = reinterpret_cast<const char*>(src);"},
{"lineNum":"   70","line":"    int count         = 0;"},
{"lineNum":"   71","line":"    // get initial bytes copied"},
{"lineNum":"   72","line":"    while (reinterpret_cast<ptrdiff_t>(dst_c) % 8 != 0) {","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"   73","line":"      *dst_c = *src_c;","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   74","line":"      dst_c++;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   75","line":"      src_c++;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   76","line":"      count++;"},
{"lineNum":"   77","line":"    }"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"    // copy the bulk of the data"},
{"lineNum":"   80","line":"    double* dst_p       = reinterpret_cast<double*>(dst_c);"},
{"lineNum":"   81","line":"    const double* src_p = reinterpret_cast<const double*>(src_c);"},
{"lineNum":"   82","line":"    Kokkos::parallel_for(\"Kokkos::Impl::host_space_deepcopy_double\","},
{"lineNum":"   83","line":"                         policy_t(0, (n - count) / 8),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   84","line":"                         [=](const ptrdiff_t i) { dst_p[i] = src_p[i]; });","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"    // get final data copied"},
{"lineNum":"   87","line":"    dst_c += ((n - count) / 8) * 8;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   88","line":"    src_c += ((n - count) / 8) * 8;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   89","line":"    char* dst_end = reinterpret_cast<char*>(dst) + n;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   90","line":"    while (dst_c != dst_end) {","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   91","line":"      *dst_c = *src_c;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   92","line":"      dst_c++;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   93","line":"      src_c++;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   94","line":"    }"},
{"lineNum":"   95","line":"    return;"},
{"lineNum":"   96","line":"  }"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"  // Both src and dst are aligned the same way with respect to 4 byte words"},
{"lineNum":"   99","line":"  if (reinterpret_cast<ptrdiff_t>(src) % 4 ==","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  100","line":"      reinterpret_cast<ptrdiff_t>(dst) % 4) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  101","line":"    char* dst_c       = reinterpret_cast<char*>(dst);"},
{"lineNum":"  102","line":"    const char* src_c = reinterpret_cast<const char*>(src);"},
{"lineNum":"  103","line":"    int count         = 0;"},
{"lineNum":"  104","line":"    // get initial bytes copied"},
{"lineNum":"  105","line":"    while (reinterpret_cast<ptrdiff_t>(dst_c) % 4 != 0) {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  106","line":"      *dst_c = *src_c;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  107","line":"      dst_c++;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  108","line":"      src_c++;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  109","line":"      count++;"},
{"lineNum":"  110","line":"    }"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"    // copy the bulk of the data"},
{"lineNum":"  113","line":"    int32_t* dst_p       = reinterpret_cast<int32_t*>(dst_c);"},
{"lineNum":"  114","line":"    const int32_t* src_p = reinterpret_cast<const int32_t*>(src_c);"},
{"lineNum":"  115","line":"    Kokkos::parallel_for(\"Kokkos::Impl::host_space_deepcopy_int\","},
{"lineNum":"  116","line":"                         policy_t(0, (n - count) / 4),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  117","line":"                         [=](const ptrdiff_t i) { dst_p[i] = src_p[i]; });","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"    // get final data copied"},
{"lineNum":"  120","line":"    dst_c += ((n - count) / 4) * 4;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  121","line":"    src_c += ((n - count) / 4) * 4;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  122","line":"    char* dst_end = reinterpret_cast<char*>(dst) + n;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  123","line":"    while (dst_c != dst_end) {","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  124","line":"      *dst_c = *src_c;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  125","line":"      dst_c++;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  126","line":"      src_c++;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  127","line":"    }"},
{"lineNum":"  128","line":"    return;"},
{"lineNum":"  129","line":"  }"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"  // Src and dst are not aligned the same way, we can only to byte wise copy."},
{"lineNum":"  132","line":"  {"},
{"lineNum":"  133","line":"    char* dst_p       = reinterpret_cast<char*>(dst);"},
{"lineNum":"  134","line":"    const char* src_p = reinterpret_cast<const char*>(src);"},
{"lineNum":"  135","line":"    Kokkos::parallel_for(\"Kokkos::Impl::host_space_deepcopy_char\","},
{"lineNum":"  136","line":"                         policy_t(0, n),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  137","line":"                         [=](const ptrdiff_t i) { dst_p[i] = src_p[i]; });","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  138","line":"  }"},
{"lineNum":"  139","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"}  // namespace Impl"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"}  // namespace Kokkos"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 37, "covered" : 0,};
var merged_data = [];
