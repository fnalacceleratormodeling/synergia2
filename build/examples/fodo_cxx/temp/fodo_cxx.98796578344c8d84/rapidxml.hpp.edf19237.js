var data = {lines:[
{"lineNum":"    1","line":"#ifndef CEREAL_RAPIDXML_HPP_INCLUDED"},
{"lineNum":"    2","line":"#define CEREAL_RAPIDXML_HPP_INCLUDED"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"// Copyright (C) 2006, 2009 Marcin Kalicinski"},
{"lineNum":"    5","line":"// Version 1.13"},
{"lineNum":"    6","line":"// Revision $DateTime: 2009/05/13 01:46:17 $"},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"// If standard library is disabled, user must provide implementations of required functions and typedefs"},
{"lineNum":"    9","line":"#if !defined(CEREAL_RAPIDXML_NO_STDLIB)"},
{"lineNum":"   10","line":"    #include <cstdlib>      // For std::size_t"},
{"lineNum":"   11","line":"    #include <cassert>      // For assert"},
{"lineNum":"   12","line":"    #include <new>          // For placement new"},
{"lineNum":"   13","line":"#endif"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"// On MSVC, disable \"conditional expression is constant\" warning (level 4)."},
{"lineNum":"   16","line":"// This warning is almost impossible to avoid with certain types of templated code"},
{"lineNum":"   17","line":"#ifdef _MSC_VER"},
{"lineNum":"   18","line":"    #pragma warning(push)"},
{"lineNum":"   19","line":"    #pragma warning(disable:4127)   // Conditional expression is constant"},
{"lineNum":"   20","line":"    #pragma warning(disable:4100)   // unreferenced formal parameter"},
{"lineNum":"   21","line":"#endif"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   24","line":"// CEREAL_RAPIDXML_PARSE_ERROR"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"#if defined(CEREAL_RAPIDXML_NO_EXCEPTIONS)"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"#define CEREAL_RAPIDXML_PARSE_ERROR(what, where) { parse_error_handler(what, where); assert(0); }"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"namespace cereal {"},
{"lineNum":"   31","line":"namespace rapidxml"},
{"lineNum":"   32","line":"{"},
{"lineNum":"   33","line":"    //! When exceptions are disabled by defining CEREAL_RAPIDXML_NO_EXCEPTIONS,"},
{"lineNum":"   34","line":"    //! this function is called to notify user about the error."},
{"lineNum":"   35","line":"    //! It must be defined by the user."},
{"lineNum":"   36","line":"    //! <br><br>"},
{"lineNum":"   37","line":"    //! This function cannot return. If it does, the results are undefined."},
{"lineNum":"   38","line":"    //! <br><br>"},
{"lineNum":"   39","line":"    //! A very simple definition might look like that:"},
{"lineNum":"   40","line":"    //! <pre>"},
{"lineNum":"   41","line":"    //! void %rapidxml::%parse_error_handler(const char *what, void *where)"},
{"lineNum":"   42","line":"    //! {"},
{"lineNum":"   43","line":"    //!     std::cout << \"Parse error: \" << what << \"\\n\";"},
{"lineNum":"   44","line":"    //!     std::abort();"},
{"lineNum":"   45","line":"    //! }"},
{"lineNum":"   46","line":"    //! </pre>"},
{"lineNum":"   47","line":"    //! \\param what Human readable description of the error."},
{"lineNum":"   48","line":"    //! \\param where Pointer to character data where error was detected."},
{"lineNum":"   49","line":"    void parse_error_handler(const char *what, void *where);"},
{"lineNum":"   50","line":"}"},
{"lineNum":"   51","line":"} // end namespace cereal"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"#else"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"#include <exception>    // For std::exception"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"#define CEREAL_RAPIDXML_PARSE_ERROR(what, where) throw parse_error(what, where)"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"namespace cereal {"},
{"lineNum":"   60","line":"namespace rapidxml"},
{"lineNum":"   61","line":"{"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"    //! Parse error exception."},
{"lineNum":"   64","line":"    //! This exception is thrown by the parser when an error occurs."},
{"lineNum":"   65","line":"    //! Use what() function to get human-readable error message."},
{"lineNum":"   66","line":"    //! Use where() function to get a pointer to position within source text where error was detected."},
{"lineNum":"   67","line":"    //! <br><br>"},
{"lineNum":"   68","line":"    //! If throwing exceptions by the parser is undesirable,"},
{"lineNum":"   69","line":"    //! it can be disabled by defining CEREAL_RAPIDXML_NO_EXCEPTIONS macro before rapidxml.hpp is included."},
{"lineNum":"   70","line":"    //! This will cause the parser to call rapidxml::parse_error_handler() function instead of throwing an exception."},
{"lineNum":"   71","line":"    //! This function must be defined by the user."},
{"lineNum":"   72","line":"    //! <br><br>"},
{"lineNum":"   73","line":"    //! This class derives from <code>std::exception</code> class."},
{"lineNum":"   74","line":"    class parse_error: public std::exception"},
{"lineNum":"   75","line":"    {"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"    public:"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"        //! Constructs parse error"},
{"lineNum":"   80","line":"        parse_error(const char *what_, void *where_)"},
{"lineNum":"   81","line":"            : m_what(what_)"},
{"lineNum":"   82","line":"            , m_where(where_)"},
{"lineNum":"   83","line":"        {"},
{"lineNum":"   84","line":"        }"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"        //! Gets human readable description of error."},
{"lineNum":"   87","line":"        //! \\return Pointer to null terminated description of the error."},
{"lineNum":"   88","line":"        virtual const char *what() const CEREAL_NOEXCEPT override"},
{"lineNum":"   89","line":"        {"},
{"lineNum":"   90","line":"            return m_what;"},
{"lineNum":"   91","line":"        }"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"        //! Gets pointer to character data where error happened."},
{"lineNum":"   94","line":"        //! Ch should be the same as char type of xml_document that produced the error."},
{"lineNum":"   95","line":"        //! \\return Pointer to location within the parsed string where error occured."},
{"lineNum":"   96","line":"        template<class Ch>"},
{"lineNum":"   97","line":"        Ch *where() const"},
{"lineNum":"   98","line":"        {"},
{"lineNum":"   99","line":"            return reinterpret_cast<Ch *>(m_where);"},
{"lineNum":"  100","line":"        }"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"    private:"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"        const char *m_what;"},
{"lineNum":"  105","line":"        void *m_where;"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"    };"},
{"lineNum":"  108","line":"}"},
{"lineNum":"  109","line":"} // end namespace cereal"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"#endif"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  114","line":"// Pool sizes"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"#ifndef CEREAL_RAPIDXML_STATIC_POOL_SIZE"},
{"lineNum":"  117","line":"    // Size of static memory block of memory_pool."},
{"lineNum":"  118","line":"    // Define CEREAL_RAPIDXML_STATIC_POOL_SIZE before including rapidxml.hpp if you want to override the default value."},
{"lineNum":"  119","line":"    // No dynamic memory allocations are performed by memory_pool until static memory is exhausted."},
{"lineNum":"  120","line":"    #define CEREAL_RAPIDXML_STATIC_POOL_SIZE (64 * 1024)"},
{"lineNum":"  121","line":"#endif"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"#ifndef CEREAL_RAPIDXML_DYNAMIC_POOL_SIZE"},
{"lineNum":"  124","line":"    // Size of dynamic memory block of memory_pool."},
{"lineNum":"  125","line":"    // Define CEREAL_RAPIDXML_DYNAMIC_POOL_SIZE before including rapidxml.hpp if you want to override the default value."},
{"lineNum":"  126","line":"    // After the static block is exhausted, dynamic blocks with approximately this size are allocated by memory_pool."},
{"lineNum":"  127","line":"    #define CEREAL_RAPIDXML_DYNAMIC_POOL_SIZE (64 * 1024)"},
{"lineNum":"  128","line":"#endif"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"#ifndef CEREAL_RAPIDXML_ALIGNMENT"},
{"lineNum":"  131","line":"    // Memory allocation alignment."},
{"lineNum":"  132","line":"    // Define CEREAL_RAPIDXML_ALIGNMENT before including rapidxml.hpp if you want to override the default value, which is the size of pointer."},
{"lineNum":"  133","line":"    // All memory allocations for nodes, attributes and strings will be aligned to this value."},
{"lineNum":"  134","line":"    // This must be a power of 2 and at least 1, otherwise memory_pool will not work."},
{"lineNum":"  135","line":"    #define CEREAL_RAPIDXML_ALIGNMENT sizeof(void *)"},
{"lineNum":"  136","line":"#endif"},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"namespace cereal {"},
{"lineNum":"  139","line":"namespace rapidxml"},
{"lineNum":"  140","line":"{"},
{"lineNum":"  141","line":"    // Forward declarations"},
{"lineNum":"  142","line":"    template<class Ch> class xml_node;"},
{"lineNum":"  143","line":"    template<class Ch> class xml_attribute;"},
{"lineNum":"  144","line":"    template<class Ch> class xml_document;"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"    //! Enumeration listing all node types produced by the parser."},
{"lineNum":"  147","line":"    //! Use xml_node::type() function to query node type."},
{"lineNum":"  148","line":"    enum node_type"},
{"lineNum":"  149","line":"    {"},
{"lineNum":"  150","line":"        node_document,      //!< A document node. Name and value are empty."},
{"lineNum":"  151","line":"        node_element,       //!< An element node. Name contains element name. Value contains text of first data node."},
{"lineNum":"  152","line":"        node_data,          //!< A data node. Name is empty. Value contains data text."},
{"lineNum":"  153","line":"        node_cdata,         //!< A CDATA node. Name is empty. Value contains data text."},
{"lineNum":"  154","line":"        node_comment,       //!< A comment node. Name is empty. Value contains comment text."},
{"lineNum":"  155","line":"        node_declaration,   //!< A declaration node. Name and value are empty. Declaration parameters (version, encoding and standalone) are in node attributes."},
{"lineNum":"  156","line":"        node_doctype,       //!< A DOCTYPE node. Name is empty. Value contains DOCTYPE text."},
{"lineNum":"  157","line":"        node_pi             //!< A PI node. Name contains target. Value contains instructions."},
{"lineNum":"  158","line":"    };"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"    ///////////////////////////////////////////////////////////////////////"},
{"lineNum":"  161","line":"    // Parsing flags"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"    //! Parse flag instructing the parser to not create data nodes."},
{"lineNum":"  164","line":"    //! Text of first data node will still be placed in value of parent element, unless rapidxml::parse_no_element_values flag is also specified."},
{"lineNum":"  165","line":"    //! Can be combined with other flags by use of | operator."},
{"lineNum":"  166","line":"    //! <br><br>"},
{"lineNum":"  167","line":"    //! See xml_document::parse() function."},
{"lineNum":"  168","line":"    const int parse_no_data_nodes = 0x1;"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"    //! Parse flag instructing the parser to not use text of first data node as a value of parent element."},
{"lineNum":"  171","line":"    //! Can be combined with other flags by use of | operator."},
{"lineNum":"  172","line":"    //! Note that child data nodes of element node take precendence over its value when printing."},
{"lineNum":"  173","line":"    //! That is, if element has one or more child data nodes <em>and</em> a value, the value will be ignored."},
{"lineNum":"  174","line":"    //! Use rapidxml::parse_no_data_nodes flag to prevent creation of data nodes if you want to manipulate data using values of elements."},
{"lineNum":"  175","line":"    //! <br><br>"},
{"lineNum":"  176","line":"    //! See xml_document::parse() function."},
{"lineNum":"  177","line":"    const int parse_no_element_values = 0x2;"},
{"lineNum":"  178","line":""},
{"lineNum":"  179","line":"    //! Parse flag instructing the parser to not place zero terminators after strings in the source text."},
{"lineNum":"  180","line":"    //! By default zero terminators are placed, modifying source text."},
{"lineNum":"  181","line":"    //! Can be combined with other flags by use of | operator."},
{"lineNum":"  182","line":"    //! <br><br>"},
{"lineNum":"  183","line":"    //! See xml_document::parse() function."},
{"lineNum":"  184","line":"    const int parse_no_string_terminators = 0x4;"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"    //! Parse flag instructing the parser to not translate entities in the source text."},
{"lineNum":"  187","line":"    //! By default entities are translated, modifying source text."},
{"lineNum":"  188","line":"    //! Can be combined with other flags by use of | operator."},
{"lineNum":"  189","line":"    //! <br><br>"},
{"lineNum":"  190","line":"    //! See xml_document::parse() function."},
{"lineNum":"  191","line":"    const int parse_no_entity_translation = 0x8;"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"    //! Parse flag instructing the parser to disable UTF-8 handling and assume plain 8 bit characters."},
{"lineNum":"  194","line":"    //! By default, UTF-8 handling is enabled."},
{"lineNum":"  195","line":"    //! Can be combined with other flags by use of | operator."},
{"lineNum":"  196","line":"    //! <br><br>"},
{"lineNum":"  197","line":"    //! See xml_document::parse() function."},
{"lineNum":"  198","line":"    const int parse_no_utf8 = 0x10;"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"    //! Parse flag instructing the parser to create XML declaration node."},
{"lineNum":"  201","line":"    //! By default, declaration node is not created."},
{"lineNum":"  202","line":"    //! Can be combined with other flags by use of | operator."},
{"lineNum":"  203","line":"    //! <br><br>"},
{"lineNum":"  204","line":"    //! See xml_document::parse() function."},
{"lineNum":"  205","line":"    const int parse_declaration_node = 0x20;"},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"    //! Parse flag instructing the parser to create comments nodes."},
{"lineNum":"  208","line":"    //! By default, comment nodes are not created."},
{"lineNum":"  209","line":"    //! Can be combined with other flags by use of | operator."},
{"lineNum":"  210","line":"    //! <br><br>"},
{"lineNum":"  211","line":"    //! See xml_document::parse() function."},
{"lineNum":"  212","line":"    const int parse_comment_nodes = 0x40;"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"    //! Parse flag instructing the parser to create DOCTYPE node."},
{"lineNum":"  215","line":"    //! By default, doctype node is not created."},
{"lineNum":"  216","line":"    //! Although W3C specification allows at most one DOCTYPE node, RapidXml will silently accept documents with more than one."},
{"lineNum":"  217","line":"    //! Can be combined with other flags by use of | operator."},
{"lineNum":"  218","line":"    //! <br><br>"},
{"lineNum":"  219","line":"    //! See xml_document::parse() function."},
{"lineNum":"  220","line":"    const int parse_doctype_node = 0x80;"},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"    //! Parse flag instructing the parser to create PI nodes."},
{"lineNum":"  223","line":"    //! By default, PI nodes are not created."},
{"lineNum":"  224","line":"    //! Can be combined with other flags by use of | operator."},
{"lineNum":"  225","line":"    //! <br><br>"},
{"lineNum":"  226","line":"    //! See xml_document::parse() function."},
{"lineNum":"  227","line":"    const int parse_pi_nodes = 0x100;"},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"    //! Parse flag instructing the parser to validate closing tag names."},
{"lineNum":"  230","line":"    //! If not set, name inside closing tag is irrelevant to the parser."},
{"lineNum":"  231","line":"    //! By default, closing tags are not validated."},
{"lineNum":"  232","line":"    //! Can be combined with other flags by use of | operator."},
{"lineNum":"  233","line":"    //! <br><br>"},
{"lineNum":"  234","line":"    //! See xml_document::parse() function."},
{"lineNum":"  235","line":"    const int parse_validate_closing_tags = 0x200;"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"    //! Parse flag instructing the parser to trim all leading and trailing whitespace of data nodes."},
{"lineNum":"  238","line":"    //! By default, whitespace is not trimmed."},
{"lineNum":"  239","line":"    //! This flag does not cause the parser to modify source text."},
{"lineNum":"  240","line":"    //! Can be combined with other flags by use of | operator."},
{"lineNum":"  241","line":"    //! <br><br>"},
{"lineNum":"  242","line":"    //! See xml_document::parse() function."},
{"lineNum":"  243","line":"    const int parse_trim_whitespace = 0x400;"},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"    //! Parse flag instructing the parser to condense all whitespace runs of data nodes to a single space character."},
{"lineNum":"  246","line":"    //! Trimming of leading and trailing whitespace of data is controlled by rapidxml::parse_trim_whitespace flag."},
{"lineNum":"  247","line":"    //! By default, whitespace is not normalized."},
{"lineNum":"  248","line":"    //! If this flag is specified, source text will be modified."},
{"lineNum":"  249","line":"    //! Can be combined with other flags by use of | operator."},
{"lineNum":"  250","line":"    //! <br><br>"},
{"lineNum":"  251","line":"    //! See xml_document::parse() function."},
{"lineNum":"  252","line":"    const int parse_normalize_whitespace = 0x800;"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"    // Compound flags"},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"    //! Parse flags which represent default behaviour of the parser."},
{"lineNum":"  257","line":"    //! This is always equal to 0, so that all other flags can be simply ored together."},
{"lineNum":"  258","line":"    //! Normally there is no need to inconveniently disable flags by anding with their negated (~) values."},
{"lineNum":"  259","line":"    //! This also means that meaning of each flag is a <i>negation</i> of the default setting."},
{"lineNum":"  260","line":"    //! For example, if flag name is rapidxml::parse_no_utf8, it means that utf-8 is <i>enabled</i> by default,"},
{"lineNum":"  261","line":"    //! and using the flag will disable it."},
{"lineNum":"  262","line":"    //! <br><br>"},
{"lineNum":"  263","line":"    //! See xml_document::parse() function."},
{"lineNum":"  264","line":"    const int parse_default = 0;"},
{"lineNum":"  265","line":""},
{"lineNum":"  266","line":"    //! A combination of parse flags that forbids any modifications of the source text."},
{"lineNum":"  267","line":"    //! This also results in faster parsing. However, note that the following will occur:"},
{"lineNum":"  268","line":"    //! <ul>"},
{"lineNum":"  269","line":"    //! <li>names and values of nodes will not be zero terminated, you have to use xml_base::name_size() and xml_base::value_size() functions to determine where name and value ends</li>"},
{"lineNum":"  270","line":"    //! <li>entities will not be translated</li>"},
{"lineNum":"  271","line":"    //! <li>whitespace will not be normalized</li>"},
{"lineNum":"  272","line":"    //! </ul>"},
{"lineNum":"  273","line":"    //! See xml_document::parse() function."},
{"lineNum":"  274","line":"    const int parse_non_destructive = parse_no_string_terminators | parse_no_entity_translation;"},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"    //! A combination of parse flags resulting in fastest possible parsing, without sacrificing important data."},
{"lineNum":"  277","line":"    //! <br><br>"},
{"lineNum":"  278","line":"    //! See xml_document::parse() function."},
{"lineNum":"  279","line":"    const int parse_fastest = parse_non_destructive | parse_no_data_nodes;"},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"    //! A combination of parse flags resulting in largest amount of data being extracted."},
{"lineNum":"  282","line":"    //! This usually results in slowest parsing."},
{"lineNum":"  283","line":"    //! <br><br>"},
{"lineNum":"  284","line":"    //! See xml_document::parse() function."},
{"lineNum":"  285","line":"    const int parse_full = parse_declaration_node | parse_comment_nodes | parse_doctype_node | parse_pi_nodes | parse_validate_closing_tags;"},
{"lineNum":"  286","line":""},
{"lineNum":"  287","line":"    ///////////////////////////////////////////////////////////////////////"},
{"lineNum":"  288","line":"    // Internals"},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"    //! \\cond internal"},
{"lineNum":"  291","line":"    namespace internal"},
{"lineNum":"  292","line":"    {"},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"        // Struct that contains lookup tables for the parser"},
{"lineNum":"  295","line":"        // It must be a template to allow correct linking (because it has static data members, which are defined in a header file)."},
{"lineNum":"  296","line":"        template<int Dummy>"},
{"lineNum":"  297","line":"        struct lookup_tables"},
{"lineNum":"  298","line":"        {"},
{"lineNum":"  299","line":"            static const unsigned char lookup_whitespace[256];              // Whitespace table"},
{"lineNum":"  300","line":"            static const unsigned char lookup_node_name[256];               // Node name table"},
{"lineNum":"  301","line":"            static const unsigned char lookup_text[256];                    // Text table"},
{"lineNum":"  302","line":"            static const unsigned char lookup_text_pure_no_ws[256];         // Text table"},
{"lineNum":"  303","line":"            static const unsigned char lookup_text_pure_with_ws[256];       // Text table"},
{"lineNum":"  304","line":"            static const unsigned char lookup_attribute_name[256];          // Attribute name table"},
{"lineNum":"  305","line":"            static const unsigned char lookup_attribute_data_1[256];        // Attribute data table with single quote"},
{"lineNum":"  306","line":"            static const unsigned char lookup_attribute_data_1_pure[256];   // Attribute data table with single quote"},
{"lineNum":"  307","line":"            static const unsigned char lookup_attribute_data_2[256];        // Attribute data table with double quotes"},
{"lineNum":"  308","line":"            static const unsigned char lookup_attribute_data_2_pure[256];   // Attribute data table with double quotes"},
{"lineNum":"  309","line":"            static const unsigned char lookup_digits[256];                  // Digits"},
{"lineNum":"  310","line":"            static const unsigned char lookup_upcase[256];                  // To uppercase conversion table for ASCII characters"},
{"lineNum":"  311","line":"        };"},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":"        // Find length of the string"},
{"lineNum":"  314","line":"        template<class Ch>"},
{"lineNum":"  315","line":"        inline std::size_t measure(const Ch *p)"},
{"lineNum":"  316","line":"        {"},
{"lineNum":"  317","line":"            const Ch *tmp = p;"},
{"lineNum":"  318","line":"            while (*tmp)","class":"lineNoCov","hits":"0","possible_hits":"366",},
{"lineNum":"  319","line":"                ++tmp;","class":"lineNoCov","hits":"0","possible_hits":"102",},
{"lineNum":"  320","line":"            return static_cast<std::size_t>(tmp - p);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  321","line":"        }"},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"        // Compare strings for equality"},
{"lineNum":"  324","line":"        template<class Ch>"},
{"lineNum":"  325","line":"        inline bool compare(const Ch *p1, std::size_t size1, const Ch *p2, std::size_t size2, bool case_sensitive)"},
{"lineNum":"  326","line":"        {"},
{"lineNum":"  327","line":"            if (size1 != size2)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  328","line":"                return false;"},
{"lineNum":"  329","line":"            if (case_sensitive)"},
{"lineNum":"  330","line":"            {"},
{"lineNum":"  331","line":"                for (const Ch *end = p1 + size1; p1 < end; ++p1, ++p2)","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  332","line":"                    if (*p1 != *p2)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  333","line":"                        return false;"},
{"lineNum":"  334","line":"            }"},
{"lineNum":"  335","line":"            else"},
{"lineNum":"  336","line":"            {"},
{"lineNum":"  337","line":"                for (const Ch *end = p1 + size1; p1 < end; ++p1, ++p2)"},
{"lineNum":"  338","line":"                    if (lookup_tables<0>::lookup_upcase[static_cast<unsigned char>(*p1)] != lookup_tables<0>::lookup_upcase[static_cast<unsigned char>(*p2)])"},
{"lineNum":"  339","line":"                        return false;"},
{"lineNum":"  340","line":"            }"},
{"lineNum":"  341","line":"            return true;"},
{"lineNum":"  342","line":"        }"},
{"lineNum":"  343","line":""},
{"lineNum":"  344","line":"        template<class Ch>"},
{"lineNum":"  345","line":"        inline bool preserve_space(xml_node<Ch>* node)"},
{"lineNum":"  346","line":"        {"},
{"lineNum":"  347","line":"            const Ch preserve_value[] = { Ch(\'p\'), Ch(\'r\'), Ch(\'e\'), Ch(\'s\'), Ch(\'e\'), Ch(\'r\'), Ch(\'v\'), Ch(\'e\') };"},
{"lineNum":"  348","line":"            const xml_attribute<Ch>* space = node->first_attribute(\"xml:space\");"},
{"lineNum":"  349","line":"            return space && internal::compare(space->value(), space->value_size(), preserve_value, sizeof(preserve_value) / sizeof(Ch), true);"},
{"lineNum":"  350","line":"        }"},
{"lineNum":"  351","line":"    }"},
{"lineNum":"  352","line":"    //! \\endcond"},
{"lineNum":"  353","line":""},
{"lineNum":"  354","line":"    ///////////////////////////////////////////////////////////////////////"},
{"lineNum":"  355","line":"    // Memory pool"},
{"lineNum":"  356","line":""},
{"lineNum":"  357","line":"    //! This class is used by the parser to create new nodes and attributes, without overheads of dynamic memory allocation."},
{"lineNum":"  358","line":"    //! In most cases, you will not need to use this class directly."},
{"lineNum":"  359","line":"    //! However, if you need to create nodes manually or modify names/values of nodes,"},
{"lineNum":"  360","line":"    //! you are encouraged to use memory_pool of relevant xml_document to allocate the memory."},
{"lineNum":"  361","line":"    //! Not only is this faster than allocating them by using <code>new</code> operator,"},
{"lineNum":"  362","line":"    //! but also their lifetime will be tied to the lifetime of document,"},
{"lineNum":"  363","line":"    //! possibly simplyfing memory management."},
{"lineNum":"  364","line":"    //! <br><br>"},
{"lineNum":"  365","line":"    //! Call allocate_node() or allocate_attribute() functions to obtain new nodes or attributes from the pool."},
{"lineNum":"  366","line":"    //! You can also call allocate_string() function to allocate strings."},
{"lineNum":"  367","line":"    //! Such strings can then be used as names or values of nodes without worrying about their lifetime."},
{"lineNum":"  368","line":"    //! Note that there is no <code>free()</code> function -- all allocations are freed at once when clear() function is called,"},
{"lineNum":"  369","line":"    //! or when the pool is destroyed."},
{"lineNum":"  370","line":"    //! <br><br>"},
{"lineNum":"  371","line":"    //! It is also possible to create a standalone memory_pool, and use it"},
{"lineNum":"  372","line":"    //! to allocate nodes, whose lifetime will not be tied to any document."},
{"lineNum":"  373","line":"    //! <br><br>"},
{"lineNum":"  374","line":"    //! Pool maintains <code>CEREAL_RAPIDXML_STATIC_POOL_SIZE</code> bytes of statically allocated memory."},
{"lineNum":"  375","line":"    //! Until static memory is exhausted, no dynamic memory allocations are done."},
{"lineNum":"  376","line":"    //! When static memory is exhausted, pool allocates additional blocks of memory of size <code>CEREAL_RAPIDXML_DYNAMIC_POOL_SIZE</code> each,"},
{"lineNum":"  377","line":"    //! by using global <code>new[]</code> and <code>delete[]</code> operators."},
{"lineNum":"  378","line":"    //! This behaviour can be changed by setting custom allocation routines."},
{"lineNum":"  379","line":"    //! Use set_allocator() function to set them."},
{"lineNum":"  380","line":"    //! <br><br>"},
{"lineNum":"  381","line":"    //! Allocations for nodes, attributes and strings are aligned at <code>CEREAL_RAPIDXML_ALIGNMENT</code> bytes."},
{"lineNum":"  382","line":"    //! This value defaults to the size of pointer on target architecture."},
{"lineNum":"  383","line":"    //! <br><br>"},
{"lineNum":"  384","line":"    //! To obtain absolutely top performance from the parser,"},
{"lineNum":"  385","line":"    //! it is important that all nodes are allocated from a single, contiguous block of memory."},
{"lineNum":"  386","line":"    //! Otherwise, cache misses when jumping between two (or more) disjoint blocks of memory can slow down parsing quite considerably."},
{"lineNum":"  387","line":"    //! If required, you can tweak <code>CEREAL_RAPIDXML_STATIC_POOL_SIZE</code>, <code>CEREAL_RAPIDXML_DYNAMIC_POOL_SIZE</code> and <code>CEREAL_RAPIDXML_ALIGNMENT</code>"},
{"lineNum":"  388","line":"    //! to obtain best wasted memory to performance compromise."},
{"lineNum":"  389","line":"    //! To do it, define their values before rapidxml.hpp file is included."},
{"lineNum":"  390","line":"    //! \\tparam Ch Character type of created nodes."},
{"lineNum":"  391","line":"    template<class Ch = char>"},
{"lineNum":"  392","line":"    class memory_pool"},
{"lineNum":"  393","line":"    {"},
{"lineNum":"  394","line":""},
{"lineNum":"  395","line":"    public:"},
{"lineNum":"  396","line":""},
{"lineNum":"  397","line":"        //! \\cond internal"},
{"lineNum":"  398","line":"        typedef void *(alloc_func)(std::size_t);       // Type of user-defined function used to allocate memory"},
{"lineNum":"  399","line":"        typedef void (free_func)(void *);              // Type of user-defined function used to free memory"},
{"lineNum":"  400","line":"        //! \\endcond"},
{"lineNum":"  401","line":""},
{"lineNum":"  402","line":"        //! Constructs empty pool with default allocator functions."},
{"lineNum":"  403","line":"        memory_pool()"},
{"lineNum":"  404","line":"            : m_alloc_func(0)"},
{"lineNum":"  405","line":"            , m_free_func(0)"},
{"lineNum":"  406","line":"        {"},
{"lineNum":"  407","line":"            init();"},
{"lineNum":"  408","line":"        }"},
{"lineNum":"  409","line":""},
{"lineNum":"  410","line":"        //! Destroys pool and frees all the memory."},
{"lineNum":"  411","line":"        //! This causes memory occupied by nodes allocated by the pool to be freed."},
{"lineNum":"  412","line":"        //! Nodes allocated from the pool are no longer valid."},
{"lineNum":"  413","line":"        ~memory_pool()"},
{"lineNum":"  414","line":"        {"},
{"lineNum":"  415","line":"            clear();"},
{"lineNum":"  416","line":"        }"},
{"lineNum":"  417","line":""},
{"lineNum":"  418","line":"        //! Allocates a new node from the pool, and optionally assigns name and value to it."},
{"lineNum":"  419","line":"        //! If the allocation request cannot be accomodated, this function will throw <code>std::bad_alloc</code>."},
{"lineNum":"  420","line":"        //! If exceptions are disabled by defining CEREAL_RAPIDXML_NO_EXCEPTIONS, this function"},
{"lineNum":"  421","line":"        //! will call rapidxml::parse_error_handler() function."},
{"lineNum":"  422","line":"        //! \\param type Type of node to create."},
{"lineNum":"  423","line":"        //! \\param name Name to assign to the node, or 0 to assign no name."},
{"lineNum":"  424","line":"        //! \\param value Value to assign to the node, or 0 to assign no value."},
{"lineNum":"  425","line":"        //! \\param name_size Size of name to assign, or 0 to automatically calculate size from name string."},
{"lineNum":"  426","line":"        //! \\param value_size Size of value to assign, or 0 to automatically calculate size from value string."},
{"lineNum":"  427","line":"        //! \\return Pointer to allocated node. This pointer will never be NULL."},
{"lineNum":"  428","line":"        xml_node<Ch> *allocate_node(node_type type,"},
{"lineNum":"  429","line":"                                    const Ch *name = 0, const Ch *value = 0,"},
{"lineNum":"  430","line":"                                    std::size_t name_size = 0, std::size_t value_size = 0)"},
{"lineNum":"  431","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  432","line":"            void *memory = allocate_aligned(sizeof(xml_node<Ch>));"},
{"lineNum":"  433","line":"            xml_node<Ch> *node = new(memory) xml_node<Ch>(type);"},
{"lineNum":"  434","line":"            if (name)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  435","line":"            {"},
{"lineNum":"  436","line":"                if (name_size > 0)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  437","line":"                    node->name(name, name_size);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  438","line":"                else"},
{"lineNum":"  439","line":"                    node->name(name);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  440","line":"            }"},
{"lineNum":"  441","line":"            if (value)","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  442","line":"            {"},
{"lineNum":"  443","line":"                if (value_size > 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  444","line":"                    node->value(value, value_size);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  445","line":"                else"},
{"lineNum":"  446","line":"                    node->value(value);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  447","line":"            }"},
{"lineNum":"  448","line":"            return node;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  449","line":"        }"},
{"lineNum":"  450","line":""},
{"lineNum":"  451","line":"        //! Allocates a new attribute from the pool, and optionally assigns name and value to it."},
{"lineNum":"  452","line":"        //! If the allocation request cannot be accomodated, this function will throw <code>std::bad_alloc</code>."},
{"lineNum":"  453","line":"        //! If exceptions are disabled by defining CEREAL_RAPIDXML_NO_EXCEPTIONS, this function"},
{"lineNum":"  454","line":"        //! will call rapidxml::parse_error_handler() function."},
{"lineNum":"  455","line":"        //! \\param name Name to assign to the attribute, or 0 to assign no name."},
{"lineNum":"  456","line":"        //! \\param value Value to assign to the attribute, or 0 to assign no value."},
{"lineNum":"  457","line":"        //! \\param name_size Size of name to assign, or 0 to automatically calculate size from name string."},
{"lineNum":"  458","line":"        //! \\param value_size Size of value to assign, or 0 to automatically calculate size from value string."},
{"lineNum":"  459","line":"        //! \\return Pointer to allocated attribute. This pointer will never be NULL."},
{"lineNum":"  460","line":"        xml_attribute<Ch> *allocate_attribute(const Ch *name = 0, const Ch *value = 0,"},
{"lineNum":"  461","line":"                                              std::size_t name_size = 0, std::size_t value_size = 0)"},
{"lineNum":"  462","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  463","line":"            void *memory = allocate_aligned(sizeof(xml_attribute<Ch>));"},
{"lineNum":"  464","line":"            xml_attribute<Ch> *attribute = new(memory) xml_attribute<Ch>;"},
{"lineNum":"  465","line":"            if (name)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  466","line":"            {"},
{"lineNum":"  467","line":"                if (name_size > 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  468","line":"                    attribute->name(name, name_size);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  469","line":"                else"},
{"lineNum":"  470","line":"                    attribute->name(name);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  471","line":"            }"},
{"lineNum":"  472","line":"            if (value)","class":"lineNoCov","hits":"0","possible_hits":"89",},
{"lineNum":"  473","line":"            {"},
{"lineNum":"  474","line":"                if (value_size > 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  475","line":"                    attribute->value(value, value_size);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  476","line":"                else"},
{"lineNum":"  477","line":"                    attribute->value(value);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  478","line":"            }"},
{"lineNum":"  479","line":"            return attribute;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  480","line":"        }"},
{"lineNum":"  481","line":""},
{"lineNum":"  482","line":"        //! Allocates a char array of given size from the pool, and optionally copies a given string to it."},
{"lineNum":"  483","line":"        //! If the allocation request cannot be accomodated, this function will throw <code>std::bad_alloc</code>."},
{"lineNum":"  484","line":"        //! If exceptions are disabled by defining CEREAL_RAPIDXML_NO_EXCEPTIONS, this function"},
{"lineNum":"  485","line":"        //! will call rapidxml::parse_error_handler() function."},
{"lineNum":"  486","line":"        //! \\param source String to initialize the allocated memory with, or 0 to not initialize it."},
{"lineNum":"  487","line":"        //! \\param size Number of characters to allocate, or zero to calculate it automatically from source string length; if size is 0, source string must be specified and null terminated."},
{"lineNum":"  488","line":"        //! \\return Pointer to allocated char array. This pointer will never be NULL."},
{"lineNum":"  489","line":"        Ch *allocate_string(const Ch *source = 0, std::size_t size = 0)"},
{"lineNum":"  490","line":"        {"},
{"lineNum":"  491","line":"            assert(source || size);     // Either source or size (or both) must be specified"},
{"lineNum":"  492","line":"            if (size == 0)","class":"lineNoCov","hits":"0","possible_hits":"239",},
{"lineNum":"  493","line":"                size = internal::measure(source) + 1;","class":"lineNoCov","hits":"0","possible_hits":"92",},
{"lineNum":"  494","line":"            Ch *result = static_cast<Ch *>(allocate_aligned(size * sizeof(Ch)));","class":"lineNoCov","hits":"0","possible_hits":"46",},
{"lineNum":"  495","line":"            if (source)","class":"lineNoCov","hits":"0","possible_hits":"151",},
{"lineNum":"  496","line":"                for (std::size_t i = 0; i < size; ++i)","class":"lineNoCov","hits":"0","possible_hits":"824",},
{"lineNum":"  497","line":"                    result[i] = source[i];","class":"lineNoCov","hits":"0","possible_hits":"615",},
{"lineNum":"  498","line":"            return result;"},
{"lineNum":"  499","line":"        }"},
{"lineNum":"  500","line":""},
{"lineNum":"  501","line":"        //! Clones an xml_node and its hierarchy of child nodes and attributes."},
{"lineNum":"  502","line":"        //! Nodes and attributes are allocated from this memory pool."},
{"lineNum":"  503","line":"        //! Names and values are not cloned, they are shared between the clone and the source."},
{"lineNum":"  504","line":"        //! Result node can be optionally specified as a second parameter,"},
{"lineNum":"  505","line":"        //! in which case its contents will be replaced with cloned source node."},
{"lineNum":"  506","line":"        //! This is useful when you want to clone entire document."},
{"lineNum":"  507","line":"        //! \\param source Node to clone."},
{"lineNum":"  508","line":"        //! \\param result Node to put results in, or 0 to automatically allocate result node"},
{"lineNum":"  509","line":"        //! \\return Pointer to cloned node. This pointer will never be NULL."},
{"lineNum":"  510","line":"        xml_node<Ch> *clone_node(const xml_node<Ch> *source, xml_node<Ch> *result = 0)"},
{"lineNum":"  511","line":"        {"},
{"lineNum":"  512","line":"            // Prepare result node"},
{"lineNum":"  513","line":"            if (result)"},
{"lineNum":"  514","line":"            {"},
{"lineNum":"  515","line":"                result->remove_all_attributes();"},
{"lineNum":"  516","line":"                result->remove_all_nodes();"},
{"lineNum":"  517","line":"                result->type(source->type());"},
{"lineNum":"  518","line":"            }"},
{"lineNum":"  519","line":"            else"},
{"lineNum":"  520","line":"                result = allocate_node(source->type());"},
{"lineNum":"  521","line":""},
{"lineNum":"  522","line":"            // Clone name and value"},
{"lineNum":"  523","line":"            result->name(source->name(), source->name_size());"},
{"lineNum":"  524","line":"            result->value(source->value(), source->value_size());"},
{"lineNum":"  525","line":""},
{"lineNum":"  526","line":"            // Clone child nodes and attributes"},
{"lineNum":"  527","line":"            for (xml_node<Ch> *child = source->first_node(); child; child = child->next_sibling())"},
{"lineNum":"  528","line":"                result->append_node(clone_node(child));"},
{"lineNum":"  529","line":"            for (xml_attribute<Ch> *attr = source->first_attribute(); attr; attr = attr->next_attribute())"},
{"lineNum":"  530","line":"                result->append_attribute(allocate_attribute(attr->name(), attr->value(), attr->name_size(), attr->value_size()));"},
{"lineNum":"  531","line":""},
{"lineNum":"  532","line":"            return result;"},
{"lineNum":"  533","line":"        }"},
{"lineNum":"  534","line":""},
{"lineNum":"  535","line":"        //! Clears the pool."},
{"lineNum":"  536","line":"        //! This causes memory occupied by nodes allocated by the pool to be freed."},
{"lineNum":"  537","line":"        //! Any nodes or strings allocated from the pool will no longer be valid."},
{"lineNum":"  538","line":"        void clear()"},
{"lineNum":"  539","line":"        {"},
{"lineNum":"  540","line":"            while (m_begin != m_static_memory)"},
{"lineNum":"  541","line":"            {"},
{"lineNum":"  542","line":"                char *previous_begin = reinterpret_cast<header *>(align(m_begin))->previous_begin;"},
{"lineNum":"  543","line":"                if (m_free_func)"},
{"lineNum":"  544","line":"                    m_free_func(m_begin);"},
{"lineNum":"  545","line":"                else"},
{"lineNum":"  546","line":"                    delete[] m_begin;"},
{"lineNum":"  547","line":"                m_begin = previous_begin;"},
{"lineNum":"  548","line":"            }"},
{"lineNum":"  549","line":"            init();"},
{"lineNum":"  550","line":"        }"},
{"lineNum":"  551","line":""},
{"lineNum":"  552","line":"        //! Sets or resets the user-defined memory allocation functions for the pool."},
{"lineNum":"  553","line":"        //! This can only be called when no memory is allocated from the pool yet, otherwise results are undefined."},
{"lineNum":"  554","line":"        //! Allocation function must not return invalid pointer on failure. It should either throw,"},
{"lineNum":"  555","line":"        //! stop the program, or use <code>longjmp()</code> function to pass control to other place of program."},
{"lineNum":"  556","line":"        //! If it returns invalid pointer, results are undefined."},
{"lineNum":"  557","line":"        //! <br><br>"},
{"lineNum":"  558","line":"        //! User defined allocation functions must have the following forms:"},
{"lineNum":"  559","line":"        //! <br><code>"},
{"lineNum":"  560","line":"        //! <br>void *allocate(std::size_t size);"},
{"lineNum":"  561","line":"        //! <br>void free(void *pointer);"},
{"lineNum":"  562","line":"        //! </code><br>"},
{"lineNum":"  563","line":"        //! \\param af Allocation function, or 0 to restore default function"},
{"lineNum":"  564","line":"        //! \\param ff Free function, or 0 to restore default function"},
{"lineNum":"  565","line":"        void set_allocator(alloc_func *af, free_func *ff)"},
{"lineNum":"  566","line":"        {"},
{"lineNum":"  567","line":"            assert(m_begin == m_static_memory && m_ptr == align(m_begin));    // Verify that no memory is allocated yet"},
{"lineNum":"  568","line":"            m_alloc_func = af;"},
{"lineNum":"  569","line":"            m_free_func = ff;"},
{"lineNum":"  570","line":"        }"},
{"lineNum":"  571","line":""},
{"lineNum":"  572","line":"    private:"},
{"lineNum":"  573","line":""},
{"lineNum":"  574","line":"        struct header"},
{"lineNum":"  575","line":"        {"},
{"lineNum":"  576","line":"            char *previous_begin;"},
{"lineNum":"  577","line":"        };"},
{"lineNum":"  578","line":""},
{"lineNum":"  579","line":"        void init()"},
{"lineNum":"  580","line":"        {"},
{"lineNum":"  581","line":"            m_begin = m_static_memory;"},
{"lineNum":"  582","line":"            m_ptr = align(m_begin);"},
{"lineNum":"  583","line":"            m_end = m_static_memory + sizeof(m_static_memory);"},
{"lineNum":"  584","line":"        }"},
{"lineNum":"  585","line":""},
{"lineNum":"  586","line":"        char *align(char *ptr)"},
{"lineNum":"  587","line":"        {"},
{"lineNum":"  588","line":"            std::size_t alignment = ((CEREAL_RAPIDXML_ALIGNMENT - (std::size_t(ptr) & (CEREAL_RAPIDXML_ALIGNMENT - 1))) & (CEREAL_RAPIDXML_ALIGNMENT - 1));","class":"lineNoCov","hits":"0","possible_hits":"675",},
{"lineNum":"  589","line":"            return ptr + alignment;","class":"lineNoCov","hits":"0","possible_hits":"556",},
{"lineNum":"  590","line":"        }"},
{"lineNum":"  591","line":""},
{"lineNum":"  592","line":"        char *allocate_raw(std::size_t size)"},
{"lineNum":"  593","line":"        {"},
{"lineNum":"  594","line":"            // Allocate"},
{"lineNum":"  595","line":"            void *memory;"},
{"lineNum":"  596","line":"            if (m_alloc_func)   // Allocate memory using either user-specified allocation function or global operator new[]","class":"lineNoCov","hits":"0","possible_hits":"228",},
{"lineNum":"  597","line":"            {"},
{"lineNum":"  598","line":"                memory = m_alloc_func(size);","class":"lineNoCov","hits":"0","possible_hits":"225",},
{"lineNum":"  599","line":"                assert(memory); // Allocator is not allowed to return 0, on failure it must either throw, stop the program or use longjmp"},
{"lineNum":"  600","line":"            }"},
{"lineNum":"  601","line":"            else"},
{"lineNum":"  602","line":"            {"},
{"lineNum":"  603","line":"                memory = new char[size];","class":"lineNoCov","hits":"0","possible_hits":"228",},
{"lineNum":"  604","line":"#ifdef CEREAL_RAPIDXML_NO_EXCEPTIONS"},
{"lineNum":"  605","line":"                if (!memory)            // If exceptions are disabled, verify memory allocation, because new will not be able to throw bad_alloc"},
{"lineNum":"  606","line":"                    CEREAL_RAPIDXML_PARSE_ERROR(\"out of memory\", 0);"},
{"lineNum":"  607","line":"#endif"},
{"lineNum":"  608","line":"            }"},
{"lineNum":"  609","line":"            return static_cast<char *>(memory);"},
{"lineNum":"  610","line":"        }"},
{"lineNum":"  611","line":""},
{"lineNum":"  612","line":"        void *allocate_aligned(std::size_t size)"},
{"lineNum":"  613","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  614","line":"            // Calculate aligned pointer"},
{"lineNum":"  615","line":"            char *result = align(m_ptr);","class":"lineNoCov","hits":"0","possible_hits":"225",},
{"lineNum":"  616","line":""},
{"lineNum":"  617","line":"            // If not enough memory left in current pool, allocate a new pool"},
{"lineNum":"  618","line":"            if (result + size > m_end)","class":"lineNoCov","hits":"0","possible_hits":"433",},
{"lineNum":"  619","line":"            {"},
{"lineNum":"  620","line":"                // Calculate required pool size (may be bigger than CEREAL_RAPIDXML_DYNAMIC_POOL_SIZE)"},
{"lineNum":"  621","line":"                std::size_t pool_size = CEREAL_RAPIDXML_DYNAMIC_POOL_SIZE;"},
{"lineNum":"  622","line":"                if (pool_size < size)","class":"lineNoCov","hits":"0","possible_hits":"106",},
{"lineNum":"  623","line":"                    pool_size = size;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  624","line":""},
{"lineNum":"  625","line":"                // Allocate"},
{"lineNum":"  626","line":"                std::size_t alloc_size = sizeof(header) + (2 * CEREAL_RAPIDXML_ALIGNMENT - 2) + pool_size;     // 2 alignments required in worst case: one for header, one for actual allocation","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  627","line":"                char *raw_memory = allocate_raw(alloc_size);"},
{"lineNum":"  628","line":""},
{"lineNum":"  629","line":"                // Setup new pool in allocated memory"},
{"lineNum":"  630","line":"                char *pool = align(raw_memory);"},
{"lineNum":"  631","line":"                header *new_header = reinterpret_cast<header *>(pool);"},
{"lineNum":"  632","line":"                new_header->previous_begin = m_begin;","class":"lineNoCov","hits":"0","possible_hits":"225",},
{"lineNum":"  633","line":"                m_begin = raw_memory;","class":"lineNoCov","hits":"0","possible_hits":"225",},
{"lineNum":"  634","line":"                m_ptr = pool + sizeof(header);","class":"lineNoCov","hits":"0","possible_hits":"225",},
{"lineNum":"  635","line":"                m_end = raw_memory + alloc_size;","class":"lineNoCov","hits":"0","possible_hits":"225",},
{"lineNum":"  636","line":""},
{"lineNum":"  637","line":"                // Calculate aligned pointer again using new pool"},
{"lineNum":"  638","line":"                result = align(m_ptr);"},
{"lineNum":"  639","line":"            }"},
{"lineNum":"  640","line":""},
{"lineNum":"  641","line":"            // Update pool and return aligned pointer"},
{"lineNum":"  642","line":"            m_ptr = result + size;","class":"lineNoCov","hits":"0","possible_hits":"225",},
{"lineNum":"  643","line":"            return result;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  644","line":"        }"},
{"lineNum":"  645","line":""},
{"lineNum":"  646","line":"        char *m_begin;                                      // Start of raw memory making up current pool"},
{"lineNum":"  647","line":"        char *m_ptr;                                        // First free byte in current pool"},
{"lineNum":"  648","line":"        char *m_end;                                        // One past last available byte in current pool"},
{"lineNum":"  649","line":"        char m_static_memory[CEREAL_RAPIDXML_STATIC_POOL_SIZE];    // Static raw memory"},
{"lineNum":"  650","line":"        alloc_func *m_alloc_func;                           // Allocator function, or 0 if default is to be used"},
{"lineNum":"  651","line":"        free_func *m_free_func;                             // Free function, or 0 if default is to be used"},
{"lineNum":"  652","line":"    };"},
{"lineNum":"  653","line":""},
{"lineNum":"  654","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  655","line":"    // XML base"},
{"lineNum":"  656","line":""},
{"lineNum":"  657","line":"    //! Base class for xml_node and xml_attribute implementing common functions:"},
{"lineNum":"  658","line":"    //! name(), name_size(), value(), value_size() and parent()."},
{"lineNum":"  659","line":"    //! \\tparam Ch Character type to use"},
{"lineNum":"  660","line":"    template<class Ch = char>"},
{"lineNum":"  661","line":"    class xml_base"},
{"lineNum":"  662","line":"    {"},
{"lineNum":"  663","line":""},
{"lineNum":"  664","line":"    public:"},
{"lineNum":"  665","line":""},
{"lineNum":"  666","line":"        ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  667","line":"        // Construction & destruction"},
{"lineNum":"  668","line":""},
{"lineNum":"  669","line":"        // Construct a base with empty name, value and parent"},
{"lineNum":"  670","line":"        xml_base()"},
{"lineNum":"  671","line":"            : m_name(0)"},
{"lineNum":"  672","line":"            , m_value(0)","class":"lineNoCov","hits":"0","possible_hits":"106",},
{"lineNum":"  673","line":"            , m_parent(0)","class":"lineNoCov","hits":"0","possible_hits":"119",},
{"lineNum":"  674","line":"        {"},
{"lineNum":"  675","line":"        }"},
{"lineNum":"  676","line":""},
{"lineNum":"  677","line":"        ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  678","line":"        // Node data access"},
{"lineNum":"  679","line":""},
{"lineNum":"  680","line":"        //! Gets name of the node."},
{"lineNum":"  681","line":"        //! Interpretation of name depends on type of node."},
{"lineNum":"  682","line":"        //! Note that name will not be zero-terminated if rapidxml::parse_no_string_terminators option was selected during parse."},
{"lineNum":"  683","line":"        //! <br><br>"},
{"lineNum":"  684","line":"        //! Use name_size() function to determine length of the name."},
{"lineNum":"  685","line":"        //! \\return Name of node, or empty string if node has no name."},
{"lineNum":"  686","line":"        Ch *name() const"},
{"lineNum":"  687","line":"        {"},
{"lineNum":"  688","line":"            return m_name ? m_name : nullstr();","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  689","line":"        }"},
{"lineNum":"  690","line":""},
{"lineNum":"  691","line":"        //! Gets size of node name, not including terminator character."},
{"lineNum":"  692","line":"        //! This function works correctly irrespective of whether name is or is not zero terminated."},
{"lineNum":"  693","line":"        //! \\return Size of node name, in characters."},
{"lineNum":"  694","line":"        std::size_t name_size() const"},
{"lineNum":"  695","line":"        {"},
{"lineNum":"  696","line":"            return m_name ? m_name_size : 0;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  697","line":"        }"},
{"lineNum":"  698","line":""},
{"lineNum":"  699","line":"        //! Gets value of node."},
{"lineNum":"  700","line":"        //! Interpretation of value depends on type of node."},
{"lineNum":"  701","line":"        //! Note that value will not be zero-terminated if rapidxml::parse_no_string_terminators option was selected during parse."},
{"lineNum":"  702","line":"        //! <br><br>"},
{"lineNum":"  703","line":"        //! Use value_size() function to determine length of the value."},
{"lineNum":"  704","line":"        //! \\return Value of node, or empty string if node has no value."},
{"lineNum":"  705","line":"        Ch *value() const"},
{"lineNum":"  706","line":"        {"},
{"lineNum":"  707","line":"            return m_value ? m_value : nullstr();","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"  708","line":"        }"},
{"lineNum":"  709","line":""},
{"lineNum":"  710","line":"        //! Gets size of node value, not including terminator character."},
{"lineNum":"  711","line":"        //! This function works correctly irrespective of whether value is or is not zero terminated."},
{"lineNum":"  712","line":"        //! \\return Size of node value, in characters."},
{"lineNum":"  713","line":"        std::size_t value_size() const"},
{"lineNum":"  714","line":"        {"},
{"lineNum":"  715","line":"            return m_value ? m_value_size : 0;"},
{"lineNum":"  716","line":"        }"},
{"lineNum":"  717","line":""},
{"lineNum":"  718","line":"        ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  719","line":"        // Node modification"},
{"lineNum":"  720","line":""},
{"lineNum":"  721","line":"        //! Sets name of node to a non zero-terminated string."},
{"lineNum":"  722","line":"        //! See \\ref ownership_of_strings."},
{"lineNum":"  723","line":"        //! <br><br>"},
{"lineNum":"  724","line":"        //! Note that node does not own its name or value, it only stores a pointer to it."},
{"lineNum":"  725","line":"        //! It will not delete or otherwise free the pointer on destruction."},
{"lineNum":"  726","line":"        //! It is reponsibility of the user to properly manage lifetime of the string."},
{"lineNum":"  727","line":"        //! The easiest way to achieve it is to use memory_pool of the document to allocate the string -"},
{"lineNum":"  728","line":"        //! on destruction of the document the string will be automatically freed."},
{"lineNum":"  729","line":"        //! <br><br>"},
{"lineNum":"  730","line":"        //! Size of name must be specified separately, because name does not have to be zero terminated."},
{"lineNum":"  731","line":"        //! Use name(const Ch *) function to have the length automatically calculated (string must be zero terminated)."},
{"lineNum":"  732","line":"        //! \\param name_ Name of node to set. Does not have to be zero terminated."},
{"lineNum":"  733","line":"        //! \\param size Size of name, in characters. This does not include zero terminator, if one is present."},
{"lineNum":"  734","line":"        void name(const Ch *name_, std::size_t size)"},
{"lineNum":"  735","line":"        {"},
{"lineNum":"  736","line":"            m_name = const_cast<Ch *>(name_);"},
{"lineNum":"  737","line":"            m_name_size = size;"},
{"lineNum":"  738","line":"        }"},
{"lineNum":"  739","line":""},
{"lineNum":"  740","line":"        //! Sets name of node to a zero-terminated string."},
{"lineNum":"  741","line":"        //! See also \\ref ownership_of_strings and xml_node::name(const Ch *, std::size_t)."},
{"lineNum":"  742","line":"        //! \\param name_ Name of node to set. Must be zero terminated."},
{"lineNum":"  743","line":"        void name(const Ch *name_)"},
{"lineNum":"  744","line":"        {"},
{"lineNum":"  745","line":"            this->name(name_, internal::measure(name_));"},
{"lineNum":"  746","line":"        }"},
{"lineNum":"  747","line":""},
{"lineNum":"  748","line":"        //! Sets value of node to a non zero-terminated string."},
{"lineNum":"  749","line":"        //! See \\ref ownership_of_strings."},
{"lineNum":"  750","line":"        //! <br><br>"},
{"lineNum":"  751","line":"        //! Note that node does not own its name or value, it only stores a pointer to it."},
{"lineNum":"  752","line":"        //! It will not delete or otherwise free the pointer on destruction."},
{"lineNum":"  753","line":"        //! It is reponsibility of the user to properly manage lifetime of the string."},
{"lineNum":"  754","line":"        //! The easiest way to achieve it is to use memory_pool of the document to allocate the string -"},
{"lineNum":"  755","line":"        //! on destruction of the document the string will be automatically freed."},
{"lineNum":"  756","line":"        //! <br><br>"},
{"lineNum":"  757","line":"        //! Size of value must be specified separately, because it does not have to be zero terminated."},
{"lineNum":"  758","line":"        //! Use value(const Ch *) function to have the length automatically calculated (string must be zero terminated)."},
{"lineNum":"  759","line":"        //! <br><br>"},
{"lineNum":"  760","line":"        //! If an element has a child node of type node_data, it will take precedence over element value when printing."},
{"lineNum":"  761","line":"        //! If you want to manipulate data of elements using values, use parser flag rapidxml::parse_no_data_nodes to prevent creation of data nodes by the parser."},
{"lineNum":"  762","line":"        //! \\param value_ value of node to set. Does not have to be zero terminated."},
{"lineNum":"  763","line":"        //! \\param size Size of value, in characters. This does not include zero terminator, if one is present."},
{"lineNum":"  764","line":"        void value(const Ch *value_, std::size_t size)"},
{"lineNum":"  765","line":"        {"},
{"lineNum":"  766","line":"            m_value = const_cast<Ch *>(value_);"},
{"lineNum":"  767","line":"            m_value_size = size;"},
{"lineNum":"  768","line":"        }"},
{"lineNum":"  769","line":""},
{"lineNum":"  770","line":"        //! Sets value of node to a zero-terminated string."},
{"lineNum":"  771","line":"        //! See also \\ref ownership_of_strings and xml_node::value(const Ch *, std::size_t)."},
{"lineNum":"  772","line":"        //! \\param value_ Vame of node to set. Must be zero terminated."},
{"lineNum":"  773","line":"        void value(const Ch *value_)"},
{"lineNum":"  774","line":"        {"},
{"lineNum":"  775","line":"            this->value(value_, internal::measure(value_));"},
{"lineNum":"  776","line":"        }"},
{"lineNum":"  777","line":""},
{"lineNum":"  778","line":"        ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  779","line":"        // Related nodes access"},
{"lineNum":"  780","line":""},
{"lineNum":"  781","line":"        //! Gets node parent."},
{"lineNum":"  782","line":"        //! \\return Pointer to parent node, or 0 if there is no parent."},
{"lineNum":"  783","line":"        xml_node<Ch> *parent() const"},
{"lineNum":"  784","line":"        {"},
{"lineNum":"  785","line":"            return m_parent;"},
{"lineNum":"  786","line":"        }"},
{"lineNum":"  787","line":""},
{"lineNum":"  788","line":"    protected:"},
{"lineNum":"  789","line":""},
{"lineNum":"  790","line":"        // Return empty string"},
{"lineNum":"  791","line":"        static Ch *nullstr()"},
{"lineNum":"  792","line":"        {"},
{"lineNum":"  793","line":"            static Ch zero = Ch(\'\\0\');"},
{"lineNum":"  794","line":"            return &zero;"},
{"lineNum":"  795","line":"        }"},
{"lineNum":"  796","line":""},
{"lineNum":"  797","line":"        Ch *m_name;                         // Name of node, or 0 if no name"},
{"lineNum":"  798","line":"        Ch *m_value;                        // Value of node, or 0 if no value"},
{"lineNum":"  799","line":"        std::size_t m_name_size;            // Length of node name, or undefined of no name"},
{"lineNum":"  800","line":"        std::size_t m_value_size;           // Length of node value, or undefined if no value"},
{"lineNum":"  801","line":"        xml_node<Ch> *m_parent;             // Pointer to parent node, or 0 if none"},
{"lineNum":"  802","line":""},
{"lineNum":"  803","line":"    };"},
{"lineNum":"  804","line":""},
{"lineNum":"  805","line":"    //! Class representing attribute node of XML document."},
{"lineNum":"  806","line":"    //! Each attribute has name and value strings, which are available through name() and value() functions (inherited from xml_base)."},
{"lineNum":"  807","line":"    //! Note that after parse, both name and value of attribute will point to interior of source text used for parsing."},
{"lineNum":"  808","line":"    //! Thus, this text must persist in memory for the lifetime of attribute."},
{"lineNum":"  809","line":"    //! \\tparam Ch Character type to use."},
{"lineNum":"  810","line":"    template<class Ch = char>"},
{"lineNum":"  811","line":"    class xml_attribute: public xml_base<Ch>"},
{"lineNum":"  812","line":"    {"},
{"lineNum":"  813","line":""},
{"lineNum":"  814","line":"        friend class xml_node<Ch>;"},
{"lineNum":"  815","line":""},
{"lineNum":"  816","line":"    public:"},
{"lineNum":"  817","line":""},
{"lineNum":"  818","line":"        ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  819","line":"        // Construction & destruction"},
{"lineNum":"  820","line":""},
{"lineNum":"  821","line":"        //! Constructs an empty attribute with the specified type."},
{"lineNum":"  822","line":"        //! Consider using memory_pool of appropriate xml_document if allocating attributes manually."},
{"lineNum":"  823","line":"        xml_attribute()"},
{"lineNum":"  824","line":"        {"},
{"lineNum":"  825","line":"        }"},
{"lineNum":"  826","line":""},
{"lineNum":"  827","line":"        ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  828","line":"        // Related nodes access"},
{"lineNum":"  829","line":""},
{"lineNum":"  830","line":"        //! Gets document of which attribute is a child."},
{"lineNum":"  831","line":"        //! \\return Pointer to document that contains this attribute, or 0 if there is no parent document."},
{"lineNum":"  832","line":"        xml_document<Ch> *document() const"},
{"lineNum":"  833","line":"        {"},
{"lineNum":"  834","line":"            if (xml_node<Ch> *node = this->parent())"},
{"lineNum":"  835","line":"            {"},
{"lineNum":"  836","line":"                while (node->parent())"},
{"lineNum":"  837","line":"                    node = node->parent();"},
{"lineNum":"  838","line":"                return node->type() == node_document ? static_cast<xml_document<Ch> *>(node) : 0;"},
{"lineNum":"  839","line":"            }"},
{"lineNum":"  840","line":"            else"},
{"lineNum":"  841","line":"                return 0;"},
{"lineNum":"  842","line":"        }"},
{"lineNum":"  843","line":""},
{"lineNum":"  844","line":"        //! Gets previous attribute, optionally matching attribute name."},
{"lineNum":"  845","line":"        //! \\param name Name of attribute to find, or 0 to return previous attribute regardless of its name; this string doesn\'t have to be zero-terminated if name_size is non-zero"},
{"lineNum":"  846","line":"        //! \\param name_size Size of name, in characters, or 0 to have size calculated automatically from string"},
{"lineNum":"  847","line":"        //! \\param case_sensitive Should name comparison be case-sensitive; non case-sensitive comparison works properly only for ASCII characters"},
{"lineNum":"  848","line":"        //! \\return Pointer to found attribute, or 0 if not found."},
{"lineNum":"  849","line":"        xml_attribute<Ch> *previous_attribute(const Ch *name = 0, std::size_t name_size = 0, bool case_sensitive = true) const"},
{"lineNum":"  850","line":"        {"},
{"lineNum":"  851","line":"            if (name)"},
{"lineNum":"  852","line":"            {"},
{"lineNum":"  853","line":"                if (name_size == 0)"},
{"lineNum":"  854","line":"                    name_size = internal::measure(name);"},
{"lineNum":"  855","line":"                for (xml_attribute<Ch> *attribute = m_prev_attribute; attribute; attribute = attribute->m_prev_attribute)"},
{"lineNum":"  856","line":"                    if (internal::compare(attribute->name(), attribute->name_size(), name, name_size, case_sensitive))"},
{"lineNum":"  857","line":"                        return attribute;"},
{"lineNum":"  858","line":"                return 0;"},
{"lineNum":"  859","line":"            }"},
{"lineNum":"  860","line":"            else"},
{"lineNum":"  861","line":"                return this->m_parent ? m_prev_attribute : 0;"},
{"lineNum":"  862","line":"        }"},
{"lineNum":"  863","line":""},
{"lineNum":"  864","line":"        //! Gets next attribute, optionally matching attribute name."},
{"lineNum":"  865","line":"        //! \\param name_ Name of attribute to find, or 0 to return next attribute regardless of its name; this string doesn\'t have to be zero-terminated if name_size is non-zero"},
{"lineNum":"  866","line":"        //! \\param name_size_ Size of name, in characters, or 0 to have size calculated automatically from string"},
{"lineNum":"  867","line":"        //! \\param case_sensitive Should name comparison be case-sensitive; non case-sensitive comparison works properly only for ASCII characters"},
{"lineNum":"  868","line":"        //! \\return Pointer to found attribute, or 0 if not found."},
{"lineNum":"  869","line":"        xml_attribute<Ch> *next_attribute(const Ch *name_ = 0, std::size_t name_size_ = 0, bool case_sensitive = true) const"},
{"lineNum":"  870","line":"        {"},
{"lineNum":"  871","line":"            if (name_)"},
{"lineNum":"  872","line":"            {"},
{"lineNum":"  873","line":"                if (name_size_ == 0)"},
{"lineNum":"  874","line":"                    name_size_ = internal::measure(name_);"},
{"lineNum":"  875","line":"                for (xml_attribute<Ch> *attribute = m_next_attribute; attribute; attribute = attribute->m_next_attribute)"},
{"lineNum":"  876","line":"                    if (internal::compare(attribute->name(), attribute->name_size(), name_, name_size_, case_sensitive))"},
{"lineNum":"  877","line":"                        return attribute;"},
{"lineNum":"  878","line":"                return 0;"},
{"lineNum":"  879","line":"            }"},
{"lineNum":"  880","line":"            else"},
{"lineNum":"  881","line":"                return this->m_parent ? m_next_attribute : 0;"},
{"lineNum":"  882","line":"        }"},
{"lineNum":"  883","line":""},
{"lineNum":"  884","line":"    private:"},
{"lineNum":"  885","line":""},
{"lineNum":"  886","line":"        xml_attribute<Ch> *m_prev_attribute;        // Pointer to previous sibling of attribute, or 0 if none; only valid if parent is non-zero"},
{"lineNum":"  887","line":"        xml_attribute<Ch> *m_next_attribute;        // Pointer to next sibling of attribute, or 0 if none; only valid if parent is non-zero"},
{"lineNum":"  888","line":""},
{"lineNum":"  889","line":"    };"},
{"lineNum":"  890","line":""},
{"lineNum":"  891","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  892","line":"    // XML node"},
{"lineNum":"  893","line":""},
{"lineNum":"  894","line":"    //! Class representing a node of XML document."},
{"lineNum":"  895","line":"    //! Each node may have associated name and value strings, which are available through name() and value() functions."},
{"lineNum":"  896","line":"    //! Interpretation of name and value depends on type of the node."},
{"lineNum":"  897","line":"    //! Type of node can be determined by using type() function."},
{"lineNum":"  898","line":"    //! <br><br>"},
{"lineNum":"  899","line":"    //! Note that after parse, both name and value of node, if any, will point interior of source text used for parsing."},
{"lineNum":"  900","line":"    //! Thus, this text must persist in the memory for the lifetime of node."},
{"lineNum":"  901","line":"    //! \\tparam Ch Character type to use."},
{"lineNum":"  902","line":"    template<class Ch = char>"},
{"lineNum":"  903","line":"    class xml_node: public xml_base<Ch>"},
{"lineNum":"  904","line":"    {"},
{"lineNum":"  905","line":""},
{"lineNum":"  906","line":"    public:"},
{"lineNum":"  907","line":""},
{"lineNum":"  908","line":"        ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  909","line":"        // Construction & destruction"},
{"lineNum":"  910","line":""},
{"lineNum":"  911","line":"        //! Constructs an empty node with the specified type."},
{"lineNum":"  912","line":"        //! Consider using memory_pool of appropriate document to allocate nodes manually."},
{"lineNum":"  913","line":"        //! \\param type_ Type of node to construct."},
{"lineNum":"  914","line":"        xml_node(node_type type_)"},
{"lineNum":"  915","line":"            : m_type(type_)","class":"lineNoCov","hits":"0","possible_hits":"17",},
{"lineNum":"  916","line":"            , m_first_node(0)","class":"lineNoCov","hits":"0","possible_hits":"17",},
{"lineNum":"  917","line":"            , m_first_attribute(0)","class":"lineNoCov","hits":"0","possible_hits":"17",},
{"lineNum":"  918","line":"        {"},
{"lineNum":"  919","line":"        }"},
{"lineNum":"  920","line":""},
{"lineNum":"  921","line":"        ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  922","line":"        // Node data access"},
{"lineNum":"  923","line":""},
{"lineNum":"  924","line":"        //! Gets type of node."},
{"lineNum":"  925","line":"        //! \\return Type of node."},
{"lineNum":"  926","line":"        node_type type() const"},
{"lineNum":"  927","line":"        {"},
{"lineNum":"  928","line":"            return m_type;"},
{"lineNum":"  929","line":"        }"},
{"lineNum":"  930","line":""},
{"lineNum":"  931","line":"        ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  932","line":"        // Related nodes access"},
{"lineNum":"  933","line":""},
{"lineNum":"  934","line":"        //! Gets document of which node is a child."},
{"lineNum":"  935","line":"        //! \\return Pointer to document that contains this node, or 0 if there is no parent document."},
{"lineNum":"  936","line":"        xml_document<Ch> *document() const"},
{"lineNum":"  937","line":"        {"},
{"lineNum":"  938","line":"            xml_node<Ch> *node = const_cast<xml_node<Ch> *>(this);"},
{"lineNum":"  939","line":"            while (node->parent())"},
{"lineNum":"  940","line":"                node = node->parent();"},
{"lineNum":"  941","line":"            return node->type() == node_document ? static_cast<xml_document<Ch> *>(node) : 0;"},
{"lineNum":"  942","line":"        }"},
{"lineNum":"  943","line":""},
{"lineNum":"  944","line":"        //! Gets first child node, optionally matching node name."},
{"lineNum":"  945","line":"        //! \\param name_ Name of child to find, or 0 to return first child regardless of its name; this string doesn\'t have to be zero-terminated if name_size is non-zero"},
{"lineNum":"  946","line":"        //! \\param name_size_ Size of name, in characters, or 0 to have size calculated automatically from string"},
{"lineNum":"  947","line":"        //! \\param case_sensitive Should name comparison be case-sensitive; non case-sensitive comparison works properly only for ASCII characters"},
{"lineNum":"  948","line":"        //! \\return Pointer to found child, or 0 if not found."},
{"lineNum":"  949","line":"        xml_node<Ch> *first_node(const Ch *name_ = 0, std::size_t name_size_ = 0, bool case_sensitive = true) const"},
{"lineNum":"  950","line":"        {"},
{"lineNum":"  951","line":"            if (name_)"},
{"lineNum":"  952","line":"            {"},
{"lineNum":"  953","line":"                if (name_size_ == 0)"},
{"lineNum":"  954","line":"                    name_size_ = internal::measure(name_);"},
{"lineNum":"  955","line":"                for (xml_node<Ch> *child = m_first_node; child; child = child->next_sibling())"},
{"lineNum":"  956","line":"                    if (internal::compare(child->name(), child->name_size(), name_, name_size_, case_sensitive))"},
{"lineNum":"  957","line":"                        return child;"},
{"lineNum":"  958","line":"                return 0;"},
{"lineNum":"  959","line":"            }"},
{"lineNum":"  960","line":"            else"},
{"lineNum":"  961","line":"                return m_first_node;","class":"lineNoCov","hits":"0","possible_hits":"29",},
{"lineNum":"  962","line":"        }"},
{"lineNum":"  963","line":""},
{"lineNum":"  964","line":"        //! Gets last child node, optionally matching node name."},
{"lineNum":"  965","line":"        //! Behaviour is undefined if node has no children."},
{"lineNum":"  966","line":"        //! Use first_node() to test if node has children."},
{"lineNum":"  967","line":"        //! \\param name Name of child to find, or 0 to return last child regardless of its name; this string doesn\'t have to be zero-terminated if name_size is non-zero"},
{"lineNum":"  968","line":"        //! \\param name_size Size of name, in characters, or 0 to have size calculated automatically from string"},
{"lineNum":"  969","line":"        //! \\param case_sensitive Should name comparison be case-sensitive; non case-sensitive comparison works properly only for ASCII characters"},
{"lineNum":"  970","line":"        //! \\return Pointer to found child, or 0 if not found."},
{"lineNum":"  971","line":"        xml_node<Ch> *last_node(const Ch *name = 0, std::size_t name_size = 0, bool case_sensitive = true) const"},
{"lineNum":"  972","line":"        {"},
{"lineNum":"  973","line":"            assert(m_first_node);  // Cannot query for last child if node has no children"},
{"lineNum":"  974","line":"            if (name)"},
{"lineNum":"  975","line":"            {"},
{"lineNum":"  976","line":"                if (name_size == 0)"},
{"lineNum":"  977","line":"                    name_size = internal::measure(name);"},
{"lineNum":"  978","line":"                for (xml_node<Ch> *child = m_last_node; child; child = child->previous_sibling())"},
{"lineNum":"  979","line":"                    if (internal::compare(child->name(), child->name_size(), name, name_size, case_sensitive))"},
{"lineNum":"  980","line":"                        return child;"},
{"lineNum":"  981","line":"                return 0;"},
{"lineNum":"  982","line":"            }"},
{"lineNum":"  983","line":"            else"},
{"lineNum":"  984","line":"                return m_last_node;"},
{"lineNum":"  985","line":"        }"},
{"lineNum":"  986","line":""},
{"lineNum":"  987","line":"        //! Gets previous sibling node, optionally matching node name."},
{"lineNum":"  988","line":"        //! Behaviour is undefined if node has no parent."},
{"lineNum":"  989","line":"        //! Use parent() to test if node has a parent."},
{"lineNum":"  990","line":"        //! \\param name Name of sibling to find, or 0 to return previous sibling regardless of its name; this string doesn\'t have to be zero-terminated if name_size is non-zero"},
{"lineNum":"  991","line":"        //! \\param name_size Size of name, in characters, or 0 to have size calculated automatically from string"},
{"lineNum":"  992","line":"        //! \\param case_sensitive Should name comparison be case-sensitive; non case-sensitive comparison works properly only for ASCII characters"},
{"lineNum":"  993","line":"        //! \\return Pointer to found sibling, or 0 if not found."},
{"lineNum":"  994","line":"        xml_node<Ch> *previous_sibling(const Ch *name = 0, std::size_t name_size = 0, bool case_sensitive = true) const"},
{"lineNum":"  995","line":"        {"},
{"lineNum":"  996","line":"            assert(this->m_parent);     // Cannot query for siblings if node has no parent"},
{"lineNum":"  997","line":"            if (name)"},
{"lineNum":"  998","line":"            {"},
{"lineNum":"  999","line":"                if (name_size == 0)"},
{"lineNum":" 1000","line":"                    name_size = internal::measure(name);"},
{"lineNum":" 1001","line":"                for (xml_node<Ch> *sibling = m_prev_sibling; sibling; sibling = sibling->m_prev_sibling)"},
{"lineNum":" 1002","line":"                    if (internal::compare(sibling->name(), sibling->name_size(), name, name_size, case_sensitive))"},
{"lineNum":" 1003","line":"                        return sibling;"},
{"lineNum":" 1004","line":"                return 0;"},
{"lineNum":" 1005","line":"            }"},
{"lineNum":" 1006","line":"            else"},
{"lineNum":" 1007","line":"                return m_prev_sibling;"},
{"lineNum":" 1008","line":"        }"},
{"lineNum":" 1009","line":""},
{"lineNum":" 1010","line":"        //! Gets next sibling node, optionally matching node name."},
{"lineNum":" 1011","line":"        //! Behaviour is undefined if node has no parent."},
{"lineNum":" 1012","line":"        //! Use parent() to test if node has a parent."},
{"lineNum":" 1013","line":"        //! \\param name_ Name of sibling to find, or 0 to return next sibling regardless of its name; this string doesn\'t have to be zero-terminated if name_size is non-zero"},
{"lineNum":" 1014","line":"        //! \\param name_size_ Size of name, in characters, or 0 to have size calculated automatically from string"},
{"lineNum":" 1015","line":"        //! \\param case_sensitive Should name comparison be case-sensitive; non case-sensitive comparison works properly only for ASCII characters"},
{"lineNum":" 1016","line":"        //! \\return Pointer to found sibling, or 0 if not found."},
{"lineNum":" 1017","line":"        xml_node<Ch> *next_sibling(const Ch *name_ = 0, std::size_t name_size_ = 0, bool case_sensitive = true) const"},
{"lineNum":" 1018","line":"        {"},
{"lineNum":" 1019","line":"            assert(this->m_parent);     // Cannot query for siblings if node has no parent"},
{"lineNum":" 1020","line":"            if (name_)"},
{"lineNum":" 1021","line":"            {"},
{"lineNum":" 1022","line":"                if (name_size_ == 0)"},
{"lineNum":" 1023","line":"                    name_size_ = internal::measure(name_);"},
{"lineNum":" 1024","line":"                for (xml_node<Ch> *sibling = m_next_sibling; sibling; sibling = sibling->m_next_sibling)"},
{"lineNum":" 1025","line":"                    if (internal::compare(sibling->name(), sibling->name_size(), name_, name_size_, case_sensitive))"},
{"lineNum":" 1026","line":"                        return sibling;"},
{"lineNum":" 1027","line":"                return 0;"},
{"lineNum":" 1028","line":"            }"},
{"lineNum":" 1029","line":"            else"},
{"lineNum":" 1030","line":"                return m_next_sibling;","class":"lineNoCov","hits":"0","possible_hits":"140",},
{"lineNum":" 1031","line":"        }"},
{"lineNum":" 1032","line":""},
{"lineNum":" 1033","line":"        //! Gets first attribute of node, optionally matching attribute name."},
{"lineNum":" 1034","line":"        //! \\param name_ Name of attribute to find, or 0 to return first attribute regardless of its name; this string doesn\'t have to be zero-terminated if name_size is non-zero"},
{"lineNum":" 1035","line":"        //! \\param name_size_ Size of name, in characters, or 0 to have size calculated automatically from string"},
{"lineNum":" 1036","line":"        //! \\param case_sensitive Should name comparison be case-sensitive; non case-sensitive comparison works properly only for ASCII characters"},
{"lineNum":" 1037","line":"        //! \\return Pointer to found attribute, or 0 if not found."},
{"lineNum":" 1038","line":"        xml_attribute<Ch> *first_attribute(const Ch *name_ = 0, std::size_t name_size_ = 0, bool case_sensitive = true) const"},
{"lineNum":" 1039","line":"        {"},
{"lineNum":" 1040","line":"            if (name_)"},
{"lineNum":" 1041","line":"            {"},
{"lineNum":" 1042","line":"                if (name_size_ == 0)"},
{"lineNum":" 1043","line":"                    name_size_ = internal::measure(name_);"},
{"lineNum":" 1044","line":"                for (xml_attribute<Ch> *attribute = m_first_attribute; attribute; attribute = attribute->m_next_attribute)"},
{"lineNum":" 1045","line":"                    if (internal::compare(attribute->name(), attribute->name_size(), name_, name_size_, case_sensitive))"},
{"lineNum":" 1046","line":"                        return attribute;"},
{"lineNum":" 1047","line":"                return 0;"},
{"lineNum":" 1048","line":"            }"},
{"lineNum":" 1049","line":"            else"},
{"lineNum":" 1050","line":"                return m_first_attribute;","class":"lineNoCov","hits":"0","possible_hits":"146",},
{"lineNum":" 1051","line":"        }"},
{"lineNum":" 1052","line":""},
{"lineNum":" 1053","line":"        //! Gets last attribute of node, optionally matching attribute name."},
{"lineNum":" 1054","line":"        //! \\param name Name of attribute to find, or 0 to return last attribute regardless of its name; this string doesn\'t have to be zero-terminated if name_size is non-zero"},
{"lineNum":" 1055","line":"        //! \\param name_size Size of name, in characters, or 0 to have size calculated automatically from string"},
{"lineNum":" 1056","line":"        //! \\param case_sensitive Should name comparison be case-sensitive; non case-sensitive comparison works properly only for ASCII characters"},
{"lineNum":" 1057","line":"        //! \\return Pointer to found attribute, or 0 if not found."},
{"lineNum":" 1058","line":"        xml_attribute<Ch> *last_attribute(const Ch *name = 0, std::size_t name_size = 0, bool case_sensitive = true) const"},
{"lineNum":" 1059","line":"        {"},
{"lineNum":" 1060","line":"            if (name)"},
{"lineNum":" 1061","line":"            {"},
{"lineNum":" 1062","line":"                if (name_size == 0)"},
{"lineNum":" 1063","line":"                    name_size = internal::measure(name);"},
{"lineNum":" 1064","line":"                for (xml_attribute<Ch> *attribute = m_last_attribute; attribute; attribute = attribute->m_prev_attribute)"},
{"lineNum":" 1065","line":"                    if (internal::compare(attribute->name(), attribute->name_size(), name, name_size, case_sensitive))"},
{"lineNum":" 1066","line":"                        return attribute;"},
{"lineNum":" 1067","line":"                return 0;"},
{"lineNum":" 1068","line":"            }"},
{"lineNum":" 1069","line":"            else"},
{"lineNum":" 1070","line":"                return m_first_attribute ? m_last_attribute : 0;"},
{"lineNum":" 1071","line":"        }"},
{"lineNum":" 1072","line":""},
{"lineNum":" 1073","line":"        ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":" 1074","line":"        // Node modification"},
{"lineNum":" 1075","line":""},
{"lineNum":" 1076","line":"        //! Sets type of node."},
{"lineNum":" 1077","line":"        //! \\param type_ Type of node to set."},
{"lineNum":" 1078","line":"        void type(node_type type_)"},
{"lineNum":" 1079","line":"        {"},
{"lineNum":" 1080","line":"            m_type = type_;"},
{"lineNum":" 1081","line":"        }"},
{"lineNum":" 1082","line":""},
{"lineNum":" 1083","line":"        ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":" 1084","line":"        // Node manipulation"},
{"lineNum":" 1085","line":""},
{"lineNum":" 1086","line":"        //! Prepends a new child node."},
{"lineNum":" 1087","line":"        //! The prepended child becomes the first child, and all existing children are moved one position back."},
{"lineNum":" 1088","line":"        //! \\param child Node to prepend."},
{"lineNum":" 1089","line":"        void prepend_node(xml_node<Ch> *child)"},
{"lineNum":" 1090","line":"        {"},
{"lineNum":" 1091","line":"            assert(child && !child->parent() && child->type() != node_document);"},
{"lineNum":" 1092","line":"            if (first_node())"},
{"lineNum":" 1093","line":"            {"},
{"lineNum":" 1094","line":"                child->m_next_sibling = m_first_node;"},
{"lineNum":" 1095","line":"                m_first_node->m_prev_sibling = child;"},
{"lineNum":" 1096","line":"            }"},
{"lineNum":" 1097","line":"            else"},
{"lineNum":" 1098","line":"            {"},
{"lineNum":" 1099","line":"                child->m_next_sibling = 0;"},
{"lineNum":" 1100","line":"                m_last_node = child;"},
{"lineNum":" 1101","line":"            }"},
{"lineNum":" 1102","line":"            m_first_node = child;"},
{"lineNum":" 1103","line":"            child->m_parent = this;"},
{"lineNum":" 1104","line":"            child->m_prev_sibling = 0;"},
{"lineNum":" 1105","line":"        }"},
{"lineNum":" 1106","line":""},
{"lineNum":" 1107","line":"        //! Appends a new child node."},
{"lineNum":" 1108","line":"        //! The appended child becomes the last child."},
{"lineNum":" 1109","line":"        //! \\param child Node to append."},
{"lineNum":" 1110","line":"        void append_node(xml_node<Ch> *child)"},
{"lineNum":" 1111","line":"        {"},
{"lineNum":" 1112","line":"            assert(child && !child->parent() && child->type() != node_document);"},
{"lineNum":" 1113","line":"            if (first_node())","class":"lineNoCov","hits":"0","possible_hits":"22",},
{"lineNum":" 1114","line":"            {"},
{"lineNum":" 1115","line":"                child->m_prev_sibling = m_last_node;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1116","line":"                m_last_node->m_next_sibling = child;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1117","line":"            }"},
{"lineNum":" 1118","line":"            else"},
{"lineNum":" 1119","line":"            {"},
{"lineNum":" 1120","line":"                child->m_prev_sibling = 0;","class":"lineNoCov","hits":"0","possible_hits":"22",},
{"lineNum":" 1121","line":"                m_first_node = child;"},
{"lineNum":" 1122","line":"            }"},
{"lineNum":" 1123","line":"            m_last_node = child;","class":"lineNoCov","hits":"0","possible_hits":"22",},
{"lineNum":" 1124","line":"            child->m_parent = this;","class":"lineNoCov","hits":"0","possible_hits":"22",},
{"lineNum":" 1125","line":"            child->m_next_sibling = 0;","class":"lineNoCov","hits":"0","possible_hits":"22",},
{"lineNum":" 1126","line":"        }"},
{"lineNum":" 1127","line":""},
{"lineNum":" 1128","line":"        //! Inserts a new child node at specified place inside the node."},
{"lineNum":" 1129","line":"        //! All children after and including the specified node are moved one position back."},
{"lineNum":" 1130","line":"        //! \\param where Place where to insert the child, or 0 to insert at the back."},
{"lineNum":" 1131","line":"        //! \\param child Node to insert."},
{"lineNum":" 1132","line":"        void insert_node(xml_node<Ch> *where, xml_node<Ch> *child)"},
{"lineNum":" 1133","line":"        {"},
{"lineNum":" 1134","line":"            assert(!where || where->parent() == this);"},
{"lineNum":" 1135","line":"            assert(child && !child->parent() && child->type() != node_document);"},
{"lineNum":" 1136","line":"            if (where == m_first_node)"},
{"lineNum":" 1137","line":"                prepend_node(child);"},
{"lineNum":" 1138","line":"            else if (where == 0)"},
{"lineNum":" 1139","line":"                append_node(child);"},
{"lineNum":" 1140","line":"            else"},
{"lineNum":" 1141","line":"            {"},
{"lineNum":" 1142","line":"                child->m_prev_sibling = where->m_prev_sibling;"},
{"lineNum":" 1143","line":"                child->m_next_sibling = where;"},
{"lineNum":" 1144","line":"                where->m_prev_sibling->m_next_sibling = child;"},
{"lineNum":" 1145","line":"                where->m_prev_sibling = child;"},
{"lineNum":" 1146","line":"                child->m_parent = this;"},
{"lineNum":" 1147","line":"            }"},
{"lineNum":" 1148","line":"        }"},
{"lineNum":" 1149","line":""},
{"lineNum":" 1150","line":"        //! Removes first child node."},
{"lineNum":" 1151","line":"        //! If node has no children, behaviour is undefined."},
{"lineNum":" 1152","line":"        //! Use first_node() to test if node has children."},
{"lineNum":" 1153","line":"        void remove_first_node()"},
{"lineNum":" 1154","line":"        {"},
{"lineNum":" 1155","line":"            assert(first_node());"},
{"lineNum":" 1156","line":"            xml_node<Ch> *child = m_first_node;"},
{"lineNum":" 1157","line":"            m_first_node = child->m_next_sibling;"},
{"lineNum":" 1158","line":"            if (child->m_next_sibling)"},
{"lineNum":" 1159","line":"                child->m_next_sibling->m_prev_sibling = 0;"},
{"lineNum":" 1160","line":"            else"},
{"lineNum":" 1161","line":"                m_last_node = 0;"},
{"lineNum":" 1162","line":"            child->m_parent = 0;"},
{"lineNum":" 1163","line":"        }"},
{"lineNum":" 1164","line":""},
{"lineNum":" 1165","line":"        //! Removes last child of the node."},
{"lineNum":" 1166","line":"        //! If node has no children, behaviour is undefined."},
{"lineNum":" 1167","line":"        //! Use first_node() to test if node has children."},
{"lineNum":" 1168","line":"        void remove_last_node()"},
{"lineNum":" 1169","line":"        {"},
{"lineNum":" 1170","line":"            assert(first_node());"},
{"lineNum":" 1171","line":"            xml_node<Ch> *child = m_last_node;"},
{"lineNum":" 1172","line":"            if (child->m_prev_sibling)"},
{"lineNum":" 1173","line":"            {"},
{"lineNum":" 1174","line":"                m_last_node = child->m_prev_sibling;"},
{"lineNum":" 1175","line":"                child->m_prev_sibling->m_next_sibling = 0;"},
{"lineNum":" 1176","line":"            }"},
{"lineNum":" 1177","line":"            else"},
{"lineNum":" 1178","line":"                m_first_node = 0;"},
{"lineNum":" 1179","line":"            child->m_parent = 0;"},
{"lineNum":" 1180","line":"        }"},
{"lineNum":" 1181","line":""},
{"lineNum":" 1182","line":"        //! Removes specified child from the node"},
{"lineNum":" 1183","line":"        // \\param where Pointer to child to be removed."},
{"lineNum":" 1184","line":"        void remove_node(xml_node<Ch> *where)"},
{"lineNum":" 1185","line":"        {"},
{"lineNum":" 1186","line":"            assert(where && where->parent() == this);"},
{"lineNum":" 1187","line":"            assert(first_node());"},
{"lineNum":" 1188","line":"            if (where == m_first_node)"},
{"lineNum":" 1189","line":"                remove_first_node();"},
{"lineNum":" 1190","line":"            else if (where == m_last_node)"},
{"lineNum":" 1191","line":"                remove_last_node();"},
{"lineNum":" 1192","line":"            else"},
{"lineNum":" 1193","line":"            {"},
{"lineNum":" 1194","line":"                where->m_prev_sibling->m_next_sibling = where->m_next_sibling;"},
{"lineNum":" 1195","line":"                where->m_next_sibling->m_prev_sibling = where->m_prev_sibling;"},
{"lineNum":" 1196","line":"                where->m_parent = 0;"},
{"lineNum":" 1197","line":"            }"},
{"lineNum":" 1198","line":"        }"},
{"lineNum":" 1199","line":""},
{"lineNum":" 1200","line":"        //! Removes all child nodes (but not attributes)."},
{"lineNum":" 1201","line":"        void remove_all_nodes()"},
{"lineNum":" 1202","line":"        {"},
{"lineNum":" 1203","line":"            for (xml_node<Ch> *node = first_node(); node; node = node->m_next_sibling)"},
{"lineNum":" 1204","line":"                node->m_parent = 0;"},
{"lineNum":" 1205","line":"            m_first_node = 0;"},
{"lineNum":" 1206","line":"        }"},
{"lineNum":" 1207","line":""},
{"lineNum":" 1208","line":"        //! Prepends a new attribute to the node."},
{"lineNum":" 1209","line":"        //! \\param attribute Attribute to prepend."},
{"lineNum":" 1210","line":"        void prepend_attribute(xml_attribute<Ch> *attribute)"},
{"lineNum":" 1211","line":"        {"},
{"lineNum":" 1212","line":"            assert(attribute && !attribute->parent());"},
{"lineNum":" 1213","line":"            if (first_attribute())"},
{"lineNum":" 1214","line":"            {"},
{"lineNum":" 1215","line":"                attribute->m_next_attribute = m_first_attribute;"},
{"lineNum":" 1216","line":"                m_first_attribute->m_prev_attribute = attribute;"},
{"lineNum":" 1217","line":"            }"},
{"lineNum":" 1218","line":"            else"},
{"lineNum":" 1219","line":"            {"},
{"lineNum":" 1220","line":"                attribute->m_next_attribute = 0;"},
{"lineNum":" 1221","line":"                m_last_attribute = attribute;"},
{"lineNum":" 1222","line":"            }"},
{"lineNum":" 1223","line":"            m_first_attribute = attribute;"},
{"lineNum":" 1224","line":"            attribute->m_parent = this;"},
{"lineNum":" 1225","line":"            attribute->m_prev_attribute = 0;"},
{"lineNum":" 1226","line":"        }"},
{"lineNum":" 1227","line":""},
{"lineNum":" 1228","line":"        //! Appends a new attribute to the node."},
{"lineNum":" 1229","line":"        //! \\param attribute Attribute to append."},
{"lineNum":" 1230","line":"        void append_attribute(xml_attribute<Ch> *attribute)"},
{"lineNum":" 1231","line":"        {"},
{"lineNum":" 1232","line":"            assert(attribute && !attribute->parent());"},
{"lineNum":" 1233","line":"            if (first_attribute())","class":"lineNoCov","hits":"0","possible_hits":"146",},
{"lineNum":" 1234","line":"            {"},
{"lineNum":" 1235","line":"                attribute->m_prev_attribute = m_last_attribute;","class":"lineNoCov","hits":"0","possible_hits":"45",},
{"lineNum":" 1236","line":"                m_last_attribute->m_next_attribute = attribute;","class":"lineNoCov","hits":"0","possible_hits":"45",},
{"lineNum":" 1237","line":"            }"},
{"lineNum":" 1238","line":"            else"},
{"lineNum":" 1239","line":"            {"},
{"lineNum":" 1240","line":"                attribute->m_prev_attribute = 0;","class":"lineNoCov","hits":"0","possible_hits":"146",},
{"lineNum":" 1241","line":"                m_first_attribute = attribute;"},
{"lineNum":" 1242","line":"            }"},
{"lineNum":" 1243","line":"            m_last_attribute = attribute;","class":"lineNoCov","hits":"0","possible_hits":"146",},
{"lineNum":" 1244","line":"            attribute->m_parent = this;","class":"lineNoCov","hits":"0","possible_hits":"146",},
{"lineNum":" 1245","line":"            attribute->m_next_attribute = 0;","class":"lineNoCov","hits":"0","possible_hits":"146",},
{"lineNum":" 1246","line":"        }"},
{"lineNum":" 1247","line":""},
{"lineNum":" 1248","line":"        //! Inserts a new attribute at specified place inside the node."},
{"lineNum":" 1249","line":"        //! All attributes after and including the specified attribute are moved one position back."},
{"lineNum":" 1250","line":"        //! \\param where Place where to insert the attribute, or 0 to insert at the back."},
{"lineNum":" 1251","line":"        //! \\param attribute Attribute to insert."},
{"lineNum":" 1252","line":"        void insert_attribute(xml_attribute<Ch> *where, xml_attribute<Ch> *attribute)"},
{"lineNum":" 1253","line":"        {"},
{"lineNum":" 1254","line":"            assert(!where || where->parent() == this);"},
{"lineNum":" 1255","line":"            assert(attribute && !attribute->parent());"},
{"lineNum":" 1256","line":"            if (where == m_first_attribute)"},
{"lineNum":" 1257","line":"                prepend_attribute(attribute);"},
{"lineNum":" 1258","line":"            else if (where == 0)"},
{"lineNum":" 1259","line":"                append_attribute(attribute);"},
{"lineNum":" 1260","line":"            else"},
{"lineNum":" 1261","line":"            {"},
{"lineNum":" 1262","line":"                attribute->m_prev_attribute = where->m_prev_attribute;"},
{"lineNum":" 1263","line":"                attribute->m_next_attribute = where;"},
{"lineNum":" 1264","line":"                where->m_prev_attribute->m_next_attribute = attribute;"},
{"lineNum":" 1265","line":"                where->m_prev_attribute = attribute;"},
{"lineNum":" 1266","line":"                attribute->m_parent = this;"},
{"lineNum":" 1267","line":"            }"},
{"lineNum":" 1268","line":"        }"},
{"lineNum":" 1269","line":""},
{"lineNum":" 1270","line":"        //! Removes first attribute of the node."},
{"lineNum":" 1271","line":"        //! If node has no attributes, behaviour is undefined."},
{"lineNum":" 1272","line":"        //! Use first_attribute() to test if node has attributes."},
{"lineNum":" 1273","line":"        void remove_first_attribute()"},
{"lineNum":" 1274","line":"        {"},
{"lineNum":" 1275","line":"            assert(first_attribute());"},
{"lineNum":" 1276","line":"            xml_attribute<Ch> *attribute = m_first_attribute;"},
{"lineNum":" 1277","line":"            if (attribute->m_next_attribute)"},
{"lineNum":" 1278","line":"            {"},
{"lineNum":" 1279","line":"                attribute->m_next_attribute->m_prev_attribute = 0;"},
{"lineNum":" 1280","line":"            }"},
{"lineNum":" 1281","line":"            else"},
{"lineNum":" 1282","line":"                m_last_attribute = 0;"},
{"lineNum":" 1283","line":"            attribute->m_parent = 0;"},
{"lineNum":" 1284","line":"            m_first_attribute = attribute->m_next_attribute;"},
{"lineNum":" 1285","line":"        }"},
{"lineNum":" 1286","line":""},
{"lineNum":" 1287","line":"        //! Removes last attribute of the node."},
{"lineNum":" 1288","line":"        //! If node has no attributes, behaviour is undefined."},
{"lineNum":" 1289","line":"        //! Use first_attribute() to test if node has attributes."},
{"lineNum":" 1290","line":"        void remove_last_attribute()"},
{"lineNum":" 1291","line":"        {"},
{"lineNum":" 1292","line":"            assert(first_attribute());"},
{"lineNum":" 1293","line":"            xml_attribute<Ch> *attribute = m_last_attribute;"},
{"lineNum":" 1294","line":"            if (attribute->m_prev_attribute)"},
{"lineNum":" 1295","line":"            {"},
{"lineNum":" 1296","line":"                attribute->m_prev_attribute->m_next_attribute = 0;"},
{"lineNum":" 1297","line":"                m_last_attribute = attribute->m_prev_attribute;"},
{"lineNum":" 1298","line":"            }"},
{"lineNum":" 1299","line":"            else"},
{"lineNum":" 1300","line":"                m_first_attribute = 0;"},
{"lineNum":" 1301","line":"            attribute->m_parent = 0;"},
{"lineNum":" 1302","line":"        }"},
{"lineNum":" 1303","line":""},
{"lineNum":" 1304","line":"        //! Removes specified attribute from node."},
{"lineNum":" 1305","line":"        //! \\param where Pointer to attribute to be removed."},
{"lineNum":" 1306","line":"        void remove_attribute(xml_attribute<Ch> *where)"},
{"lineNum":" 1307","line":"        {"},
{"lineNum":" 1308","line":"            assert(first_attribute() && where->parent() == this);"},
{"lineNum":" 1309","line":"            if (where == m_first_attribute)"},
{"lineNum":" 1310","line":"                remove_first_attribute();"},
{"lineNum":" 1311","line":"            else if (where == m_last_attribute)"},
{"lineNum":" 1312","line":"                remove_last_attribute();"},
{"lineNum":" 1313","line":"            else"},
{"lineNum":" 1314","line":"            {"},
{"lineNum":" 1315","line":"                where->m_prev_attribute->m_next_attribute = where->m_next_attribute;"},
{"lineNum":" 1316","line":"                where->m_next_attribute->m_prev_attribute = where->m_prev_attribute;"},
{"lineNum":" 1317","line":"                where->m_parent = 0;"},
{"lineNum":" 1318","line":"            }"},
{"lineNum":" 1319","line":"        }"},
{"lineNum":" 1320","line":""},
{"lineNum":" 1321","line":"        //! Removes all attributes of node."},
{"lineNum":" 1322","line":"        void remove_all_attributes()"},
{"lineNum":" 1323","line":"        {"},
{"lineNum":" 1324","line":"            for (xml_attribute<Ch> *attribute = first_attribute(); attribute; attribute = attribute->m_next_attribute)"},
{"lineNum":" 1325","line":"                attribute->m_parent = 0;"},
{"lineNum":" 1326","line":"            m_first_attribute = 0;"},
{"lineNum":" 1327","line":"        }"},
{"lineNum":" 1328","line":""},
{"lineNum":" 1329","line":"    private:"},
{"lineNum":" 1330","line":""},
{"lineNum":" 1331","line":"        ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":" 1332","line":"        // Restrictions"},
{"lineNum":" 1333","line":""},
{"lineNum":" 1334","line":"        // No copying"},
{"lineNum":" 1335","line":"        xml_node(const xml_node &);"},
{"lineNum":" 1336","line":"        void operator =(const xml_node &);"},
{"lineNum":" 1337","line":""},
{"lineNum":" 1338","line":"        ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":" 1339","line":"        // Data members"},
{"lineNum":" 1340","line":""},
{"lineNum":" 1341","line":"        // Note that some of the pointers below have UNDEFINED values if certain other pointers are 0."},
{"lineNum":" 1342","line":"        // This is required for maximum performance, as it allows the parser to omit initialization of"},
{"lineNum":" 1343","line":"        // unneded/redundant values."},
{"lineNum":" 1344","line":"        //"},
{"lineNum":" 1345","line":"        // The rules are as follows:"},
{"lineNum":" 1346","line":"        // 1. first_node and first_attribute contain valid pointers, or 0 if node has no children/attributes respectively"},
{"lineNum":" 1347","line":"        // 2. last_node and last_attribute are valid only if node has at least one child/attribute respectively, otherwise they contain garbage"},
{"lineNum":" 1348","line":"        // 3. prev_sibling and next_sibling are valid only if node has a parent, otherwise they contain garbage"},
{"lineNum":" 1349","line":""},
{"lineNum":" 1350","line":"        node_type m_type;                       // Type of node; always valid"},
{"lineNum":" 1351","line":"        xml_node<Ch> *m_first_node;             // Pointer to first child node, or 0 if none; always valid"},
{"lineNum":" 1352","line":"        xml_node<Ch> *m_last_node;              // Pointer to last child node, or 0 if none; this value is only valid if m_first_node is non-zero"},
{"lineNum":" 1353","line":"        xml_attribute<Ch> *m_first_attribute;   // Pointer to first attribute of node, or 0 if none; always valid"},
{"lineNum":" 1354","line":"        xml_attribute<Ch> *m_last_attribute;    // Pointer to last attribute of node, or 0 if none; this value is only valid if m_first_attribute is non-zero"},
{"lineNum":" 1355","line":"        xml_node<Ch> *m_prev_sibling;           // Pointer to previous sibling of node, or 0 if none; this value is only valid if m_parent is non-zero"},
{"lineNum":" 1356","line":"        xml_node<Ch> *m_next_sibling;           // Pointer to next sibling of node, or 0 if none; this value is only valid if m_parent is non-zero"},
{"lineNum":" 1357","line":""},
{"lineNum":" 1358","line":"    };"},
{"lineNum":" 1359","line":""},
{"lineNum":" 1360","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":" 1361","line":"    // XML document"},
{"lineNum":" 1362","line":""},
{"lineNum":" 1363","line":"    //! This class represents root of the DOM hierarchy."},
{"lineNum":" 1364","line":"    //! It is also an xml_node and a memory_pool through public inheritance."},
{"lineNum":" 1365","line":"    //! Use parse() function to build a DOM tree from a zero-terminated XML text string."},
{"lineNum":" 1366","line":"    //! parse() function allocates memory for nodes and attributes by using functions of xml_document,"},
{"lineNum":" 1367","line":"    //! which are inherited from memory_pool."},
{"lineNum":" 1368","line":"    //! To access root node of the document, use the document itself, as if it was an xml_node."},
{"lineNum":" 1369","line":"    //! \\tparam Ch Character type to use."},
{"lineNum":" 1370","line":"    template<class Ch = char>"},
{"lineNum":" 1371","line":"    class xml_document: public xml_node<Ch>, public memory_pool<Ch>"},
{"lineNum":" 1372","line":"    {"},
{"lineNum":" 1373","line":""},
{"lineNum":" 1374","line":"    public:"},
{"lineNum":" 1375","line":""},
{"lineNum":" 1376","line":"        //! Constructs empty XML document"},
{"lineNum":" 1377","line":"        xml_document()"},
{"lineNum":" 1378","line":"            : xml_node<Ch>(node_document)"},
{"lineNum":" 1379","line":"        {"},
{"lineNum":" 1380","line":"        }"},
{"lineNum":" 1381","line":""},
{"lineNum":" 1382","line":"        //! Parses zero-terminated XML string according to given flags."},
{"lineNum":" 1383","line":"        //! Passed string will be modified by the parser, unless rapidxml::parse_non_destructive flag is used."},
{"lineNum":" 1384","line":"        //! The string must persist for the lifetime of the document."},
{"lineNum":" 1385","line":"        //! In case of error, rapidxml::parse_error exception will be thrown."},
{"lineNum":" 1386","line":"        //! <br><br>"},
{"lineNum":" 1387","line":"        //! If you want to parse contents of a file, you must first load the file into the memory, and pass pointer to its beginning."},
{"lineNum":" 1388","line":"        //! Make sure that data is zero-terminated."},
{"lineNum":" 1389","line":"        //! <br><br>"},
{"lineNum":" 1390","line":"        //! Document can be parsed into multiple times."},
{"lineNum":" 1391","line":"        //! Each new call to parse removes previous nodes and attributes (if any), but does not clear memory pool."},
{"lineNum":" 1392","line":"        //! \\param text XML data to parse; pointer is non-const to denote fact that this data may be modified by the parser."},
{"lineNum":" 1393","line":"        template<int Flags>"},
{"lineNum":" 1394","line":"        void parse(Ch *text)"},
{"lineNum":" 1395","line":"        {"},
{"lineNum":" 1396","line":"            assert(text);"},
{"lineNum":" 1397","line":""},
{"lineNum":" 1398","line":"            // Remove current contents"},
{"lineNum":" 1399","line":"            this->remove_all_nodes();"},
{"lineNum":" 1400","line":"            this->remove_all_attributes();"},
{"lineNum":" 1401","line":""},
{"lineNum":" 1402","line":"            // Parse BOM, if any"},
{"lineNum":" 1403","line":"            parse_bom<Flags>(text);"},
{"lineNum":" 1404","line":""},
{"lineNum":" 1405","line":"            // Parse children"},
{"lineNum":" 1406","line":"            while (1)"},
{"lineNum":" 1407","line":"            {"},
{"lineNum":" 1408","line":"                // Skip whitespace before node"},
{"lineNum":" 1409","line":"                skip<whitespace_pred, Flags>(text);"},
{"lineNum":" 1410","line":"                if (*text == 0)"},
{"lineNum":" 1411","line":"                    break;"},
{"lineNum":" 1412","line":""},
{"lineNum":" 1413","line":"                // Parse and append new child"},
{"lineNum":" 1414","line":"                if (*text == Ch(\'<\'))"},
{"lineNum":" 1415","line":"                {"},
{"lineNum":" 1416","line":"                    ++text;     // Skip \'<\'"},
{"lineNum":" 1417","line":"                    if (xml_node<Ch> *node = parse_node<Flags>(text))"},
{"lineNum":" 1418","line":"                        this->append_node(node);"},
{"lineNum":" 1419","line":"                }"},
{"lineNum":" 1420","line":"                else"},
{"lineNum":" 1421","line":"                    CEREAL_RAPIDXML_PARSE_ERROR(\"expected <\", text);"},
{"lineNum":" 1422","line":"            }"},
{"lineNum":" 1423","line":""},
{"lineNum":" 1424","line":"        }"},
{"lineNum":" 1425","line":""},
{"lineNum":" 1426","line":"        //! Clears the document by deleting all nodes and clearing the memory pool."},
{"lineNum":" 1427","line":"        //! All nodes owned by document pool are destroyed."},
{"lineNum":" 1428","line":"        void clear()"},
{"lineNum":" 1429","line":"        {"},
{"lineNum":" 1430","line":"            this->remove_all_nodes();"},
{"lineNum":" 1431","line":"            this->remove_all_attributes();"},
{"lineNum":" 1432","line":"            memory_pool<Ch>::clear();"},
{"lineNum":" 1433","line":"        }"},
{"lineNum":" 1434","line":""},
{"lineNum":" 1435","line":"    private:"},
{"lineNum":" 1436","line":""},
{"lineNum":" 1437","line":"        ///////////////////////////////////////////////////////////////////////"},
{"lineNum":" 1438","line":"        // Internal character utility functions"},
{"lineNum":" 1439","line":""},
{"lineNum":" 1440","line":"        // Detect whitespace character"},
{"lineNum":" 1441","line":"        struct whitespace_pred"},
{"lineNum":" 1442","line":"        {"},
{"lineNum":" 1443","line":"            static unsigned char test(Ch ch)"},
{"lineNum":" 1444","line":"            {"},
{"lineNum":" 1445","line":"                return internal::lookup_tables<0>::lookup_whitespace[static_cast<unsigned char>(ch)];"},
{"lineNum":" 1446","line":"            }"},
{"lineNum":" 1447","line":"        };"},
{"lineNum":" 1448","line":""},
{"lineNum":" 1449","line":"        // Detect node name character"},
{"lineNum":" 1450","line":"        struct node_name_pred"},
{"lineNum":" 1451","line":"        {"},
{"lineNum":" 1452","line":"            static unsigned char test(Ch ch)"},
{"lineNum":" 1453","line":"            {"},
{"lineNum":" 1454","line":"                return internal::lookup_tables<0>::lookup_node_name[static_cast<unsigned char>(ch)];"},
{"lineNum":" 1455","line":"            }"},
{"lineNum":" 1456","line":"        };"},
{"lineNum":" 1457","line":""},
{"lineNum":" 1458","line":"        // Detect attribute name character"},
{"lineNum":" 1459","line":"        struct attribute_name_pred"},
{"lineNum":" 1460","line":"        {"},
{"lineNum":" 1461","line":"            static unsigned char test(Ch ch)"},
{"lineNum":" 1462","line":"            {"},
{"lineNum":" 1463","line":"                return internal::lookup_tables<0>::lookup_attribute_name[static_cast<unsigned char>(ch)];"},
{"lineNum":" 1464","line":"            }"},
{"lineNum":" 1465","line":"        };"},
{"lineNum":" 1466","line":""},
{"lineNum":" 1467","line":"        // Detect text character (PCDATA)"},
{"lineNum":" 1468","line":"        struct text_pred"},
{"lineNum":" 1469","line":"        {"},
{"lineNum":" 1470","line":"            static unsigned char test(Ch ch)"},
{"lineNum":" 1471","line":"            {"},
{"lineNum":" 1472","line":"                return internal::lookup_tables<0>::lookup_text[static_cast<unsigned char>(ch)];"},
{"lineNum":" 1473","line":"            }"},
{"lineNum":" 1474","line":"        };"},
{"lineNum":" 1475","line":""},
{"lineNum":" 1476","line":"        // Detect text character (PCDATA) that does not require processing"},
{"lineNum":" 1477","line":"        struct text_pure_no_ws_pred"},
{"lineNum":" 1478","line":"        {"},
{"lineNum":" 1479","line":"            static unsigned char test(Ch ch)"},
{"lineNum":" 1480","line":"            {"},
{"lineNum":" 1481","line":"                return internal::lookup_tables<0>::lookup_text_pure_no_ws[static_cast<unsigned char>(ch)];"},
{"lineNum":" 1482","line":"            }"},
{"lineNum":" 1483","line":"        };"},
{"lineNum":" 1484","line":""},
{"lineNum":" 1485","line":"        // Detect text character (PCDATA) that does not require processing"},
{"lineNum":" 1486","line":"        struct text_pure_with_ws_pred"},
{"lineNum":" 1487","line":"        {"},
{"lineNum":" 1488","line":"            static unsigned char test(Ch ch)"},
{"lineNum":" 1489","line":"            {"},
{"lineNum":" 1490","line":"                return internal::lookup_tables<0>::lookup_text_pure_with_ws[static_cast<unsigned char>(ch)];"},
{"lineNum":" 1491","line":"            }"},
{"lineNum":" 1492","line":"        };"},
{"lineNum":" 1493","line":""},
{"lineNum":" 1494","line":"        // Detect attribute value character"},
{"lineNum":" 1495","line":"        template<Ch Quote>"},
{"lineNum":" 1496","line":"        struct attribute_value_pred"},
{"lineNum":" 1497","line":"        {"},
{"lineNum":" 1498","line":"            static unsigned char test(Ch ch)"},
{"lineNum":" 1499","line":"            {"},
{"lineNum":" 1500","line":"                if (Quote == Ch(\'\\\'\'))"},
{"lineNum":" 1501","line":"                    return internal::lookup_tables<0>::lookup_attribute_data_1[static_cast<unsigned char>(ch)];"},
{"lineNum":" 1502","line":"                if (Quote == Ch(\'\\\"\'))"},
{"lineNum":" 1503","line":"                    return internal::lookup_tables<0>::lookup_attribute_data_2[static_cast<unsigned char>(ch)];"},
{"lineNum":" 1504","line":"                return 0;       // Should never be executed, to avoid warnings on Comeau"},
{"lineNum":" 1505","line":"            }"},
{"lineNum":" 1506","line":"        };"},
{"lineNum":" 1507","line":""},
{"lineNum":" 1508","line":"        // Detect attribute value character"},
{"lineNum":" 1509","line":"        template<Ch Quote>"},
{"lineNum":" 1510","line":"        struct attribute_value_pure_pred"},
{"lineNum":" 1511","line":"        {"},
{"lineNum":" 1512","line":"            static unsigned char test(Ch ch)"},
{"lineNum":" 1513","line":"            {"},
{"lineNum":" 1514","line":"                if (Quote == Ch(\'\\\'\'))"},
{"lineNum":" 1515","line":"                    return internal::lookup_tables<0>::lookup_attribute_data_1_pure[static_cast<unsigned char>(ch)];"},
{"lineNum":" 1516","line":"                if (Quote == Ch(\'\\\"\'))"},
{"lineNum":" 1517","line":"                    return internal::lookup_tables<0>::lookup_attribute_data_2_pure[static_cast<unsigned char>(ch)];"},
{"lineNum":" 1518","line":"                return 0;       // Should never be executed, to avoid warnings on Comeau"},
{"lineNum":" 1519","line":"            }"},
{"lineNum":" 1520","line":"        };"},
{"lineNum":" 1521","line":""},
{"lineNum":" 1522","line":"        // Insert coded character, using UTF8 or 8-bit ASCII"},
{"lineNum":" 1523","line":"        template<int Flags>"},
{"lineNum":" 1524","line":"        static void insert_coded_character(Ch *&text, unsigned long code)"},
{"lineNum":" 1525","line":"        {"},
{"lineNum":" 1526","line":"            if (Flags & parse_no_utf8)"},
{"lineNum":" 1527","line":"            {"},
{"lineNum":" 1528","line":"                // Insert 8-bit ASCII character"},
{"lineNum":" 1529","line":"                // Todo: possibly verify that code is less than 256 and use replacement char otherwise?"},
{"lineNum":" 1530","line":"                text[0] = static_cast<Ch>(code);"},
{"lineNum":" 1531","line":"                text += 1;"},
{"lineNum":" 1532","line":"            }"},
{"lineNum":" 1533","line":"            else"},
{"lineNum":" 1534","line":"            {"},
{"lineNum":" 1535","line":"                // Insert UTF8 sequence"},
{"lineNum":" 1536","line":"                if (code < 0x80)    // 1 byte sequence"},
{"lineNum":" 1537","line":"                {"},
{"lineNum":" 1538","line":"\t                text[0] = static_cast<Ch>(code);"},
{"lineNum":" 1539","line":"                    text += 1;"},
{"lineNum":" 1540","line":"                }"},
{"lineNum":" 1541","line":"                else if (code < 0x800)  // 2 byte sequence"},
{"lineNum":" 1542","line":"                {"},
{"lineNum":" 1543","line":"\t                text[1] = static_cast<Ch>((code | 0x80) & 0xBF); code >>= 6;"},
{"lineNum":" 1544","line":"\t                text[0] = static_cast<Ch>(code | 0xC0);"},
{"lineNum":" 1545","line":"                    text += 2;"},
{"lineNum":" 1546","line":"                }"},
{"lineNum":" 1547","line":"\t            else if (code < 0x10000)    // 3 byte sequence"},
{"lineNum":" 1548","line":"                {"},
{"lineNum":" 1549","line":"\t                text[2] = static_cast<Ch>((code | 0x80) & 0xBF); code >>= 6;"},
{"lineNum":" 1550","line":"\t                text[1] = static_cast<Ch>((code | 0x80) & 0xBF); code >>= 6;"},
{"lineNum":" 1551","line":"\t                text[0] = static_cast<Ch>(code | 0xE0);"},
{"lineNum":" 1552","line":"                    text += 3;"},
{"lineNum":" 1553","line":"                }"},
{"lineNum":" 1554","line":"\t            else if (code < 0x110000)   // 4 byte sequence"},
{"lineNum":" 1555","line":"                {"},
{"lineNum":" 1556","line":"\t                text[3] = static_cast<Ch>((code | 0x80) & 0xBF); code >>= 6;"},
{"lineNum":" 1557","line":"\t                text[2] = static_cast<Ch>((code | 0x80) & 0xBF); code >>= 6;"},
{"lineNum":" 1558","line":"\t                text[1] = static_cast<Ch>((code | 0x80) & 0xBF); code >>= 6;"},
{"lineNum":" 1559","line":"\t                text[0] = static_cast<Ch>(code | 0xF0);"},
{"lineNum":" 1560","line":"                    text += 4;"},
{"lineNum":" 1561","line":"                }"},
{"lineNum":" 1562","line":"                else    // Invalid, only codes up to 0x10FFFF are allowed in Unicode"},
{"lineNum":" 1563","line":"                {"},
{"lineNum":" 1564","line":"                    CEREAL_RAPIDXML_PARSE_ERROR(\"invalid numeric character entity\", text);"},
{"lineNum":" 1565","line":"                }"},
{"lineNum":" 1566","line":"            }"},
{"lineNum":" 1567","line":"        }"},
{"lineNum":" 1568","line":""},
{"lineNum":" 1569","line":"        // Skip characters until predicate evaluates to true"},
{"lineNum":" 1570","line":"        template<class StopPred, int Flags>"},
{"lineNum":" 1571","line":"        static void skip(Ch *&text)"},
{"lineNum":" 1572","line":"        {"},
{"lineNum":" 1573","line":"            Ch *tmp = text;"},
{"lineNum":" 1574","line":"            while (StopPred::test(*tmp))"},
{"lineNum":" 1575","line":"                ++tmp;"},
{"lineNum":" 1576","line":"            text = tmp;"},
{"lineNum":" 1577","line":"        }"},
{"lineNum":" 1578","line":""},
{"lineNum":" 1579","line":"        // Skip characters until predicate evaluates to true while doing the following:"},
{"lineNum":" 1580","line":"        // - replacing XML character entity references with proper characters (&apos; &amp; &quot; &lt; &gt; &#...;)"},
{"lineNum":" 1581","line":"        // - condensing whitespace sequences to single space character"},
{"lineNum":" 1582","line":"        template<class StopPred, class StopPredPure, int Flags>"},
{"lineNum":" 1583","line":"        static Ch *skip_and_expand_character_refs(Ch *&text, bool preserve_space)"},
{"lineNum":" 1584","line":"        {"},
{"lineNum":" 1585","line":"            // If entity translation, whitespace condense and whitespace trimming is disabled, use plain skip"},
{"lineNum":" 1586","line":"            if (Flags & parse_no_entity_translation &&"},
{"lineNum":" 1587","line":"                !(Flags & parse_normalize_whitespace) &&"},
{"lineNum":" 1588","line":"                !(Flags & parse_trim_whitespace))"},
{"lineNum":" 1589","line":"            {"},
{"lineNum":" 1590","line":"                skip<StopPred, Flags>(text);"},
{"lineNum":" 1591","line":"                return text;"},
{"lineNum":" 1592","line":"            }"},
{"lineNum":" 1593","line":""},
{"lineNum":" 1594","line":"            // Use simple skip until first modification is detected"},
{"lineNum":" 1595","line":"            skip<StopPredPure, Flags>(text);"},
{"lineNum":" 1596","line":""},
{"lineNum":" 1597","line":"            // Use translation skip"},
{"lineNum":" 1598","line":"            Ch *src = text;"},
{"lineNum":" 1599","line":"            Ch *dest = src;"},
{"lineNum":" 1600","line":"            while (StopPred::test(*src))"},
{"lineNum":" 1601","line":"            {"},
{"lineNum":" 1602","line":"                // If entity translation is enabled"},
{"lineNum":" 1603","line":"                if (!(Flags & parse_no_entity_translation))"},
{"lineNum":" 1604","line":"                {"},
{"lineNum":" 1605","line":"                    // Test if replacement is needed"},
{"lineNum":" 1606","line":"                    if (src[0] == Ch(\'&\'))"},
{"lineNum":" 1607","line":"                    {"},
{"lineNum":" 1608","line":"                        switch (src[1])"},
{"lineNum":" 1609","line":"                        {"},
{"lineNum":" 1610","line":""},
{"lineNum":" 1611","line":"                        // &amp; &apos;"},
{"lineNum":" 1612","line":"                        case Ch(\'a\'):"},
{"lineNum":" 1613","line":"                            if (src[2] == Ch(\'m\') && src[3] == Ch(\'p\') && src[4] == Ch(\';\'))"},
{"lineNum":" 1614","line":"                            {"},
{"lineNum":" 1615","line":"                                *dest = Ch(\'&\');"},
{"lineNum":" 1616","line":"                                ++dest;"},
{"lineNum":" 1617","line":"                                src += 5;"},
{"lineNum":" 1618","line":"                                continue;"},
{"lineNum":" 1619","line":"                            }"},
{"lineNum":" 1620","line":"                            if (src[2] == Ch(\'p\') && src[3] == Ch(\'o\') && src[4] == Ch(\'s\') && src[5] == Ch(\';\'))"},
{"lineNum":" 1621","line":"                            {"},
{"lineNum":" 1622","line":"                                *dest = Ch(\'\\\'\');"},
{"lineNum":" 1623","line":"                                ++dest;"},
{"lineNum":" 1624","line":"                                src += 6;"},
{"lineNum":" 1625","line":"                                continue;"},
{"lineNum":" 1626","line":"                            }"},
{"lineNum":" 1627","line":"                            break;"},
{"lineNum":" 1628","line":""},
{"lineNum":" 1629","line":"                        // &quot;"},
{"lineNum":" 1630","line":"                        case Ch(\'q\'):"},
{"lineNum":" 1631","line":"                            if (src[2] == Ch(\'u\') && src[3] == Ch(\'o\') && src[4] == Ch(\'t\') && src[5] == Ch(\';\'))"},
{"lineNum":" 1632","line":"                            {"},
{"lineNum":" 1633","line":"                                *dest = Ch(\'\"\');"},
{"lineNum":" 1634","line":"                                ++dest;"},
{"lineNum":" 1635","line":"                                src += 6;"},
{"lineNum":" 1636","line":"                                continue;"},
{"lineNum":" 1637","line":"                            }"},
{"lineNum":" 1638","line":"                            break;"},
{"lineNum":" 1639","line":""},
{"lineNum":" 1640","line":"                        // &gt;"},
{"lineNum":" 1641","line":"                        case Ch(\'g\'):"},
{"lineNum":" 1642","line":"                            if (src[2] == Ch(\'t\') && src[3] == Ch(\';\'))"},
{"lineNum":" 1643","line":"                            {"},
{"lineNum":" 1644","line":"                                *dest = Ch(\'>\');"},
{"lineNum":" 1645","line":"                                ++dest;"},
{"lineNum":" 1646","line":"                                src += 4;"},
{"lineNum":" 1647","line":"                                continue;"},
{"lineNum":" 1648","line":"                            }"},
{"lineNum":" 1649","line":"                            break;"},
{"lineNum":" 1650","line":""},
{"lineNum":" 1651","line":"                        // &lt;"},
{"lineNum":" 1652","line":"                        case Ch(\'l\'):"},
{"lineNum":" 1653","line":"                            if (src[2] == Ch(\'t\') && src[3] == Ch(\';\'))"},
{"lineNum":" 1654","line":"                            {"},
{"lineNum":" 1655","line":"                                *dest = Ch(\'<\');"},
{"lineNum":" 1656","line":"                                ++dest;"},
{"lineNum":" 1657","line":"                                src += 4;"},
{"lineNum":" 1658","line":"                                continue;"},
{"lineNum":" 1659","line":"                            }"},
{"lineNum":" 1660","line":"                            break;"},
{"lineNum":" 1661","line":""},
{"lineNum":" 1662","line":"                        // &#...; - assumes ASCII"},
{"lineNum":" 1663","line":"                        case Ch(\'#\'):"},
{"lineNum":" 1664","line":"                            if (src[2] == Ch(\'x\'))"},
{"lineNum":" 1665","line":"                            {"},
{"lineNum":" 1666","line":"                                unsigned long code = 0;"},
{"lineNum":" 1667","line":"                                src += 3;   // Skip &#x"},
{"lineNum":" 1668","line":"                                while (1)"},
{"lineNum":" 1669","line":"                                {"},
{"lineNum":" 1670","line":"                                    unsigned char digit = internal::lookup_tables<0>::lookup_digits[static_cast<unsigned char>(*src)];"},
{"lineNum":" 1671","line":"                                    if (digit == 0xFF)"},
{"lineNum":" 1672","line":"                                        break;"},
{"lineNum":" 1673","line":"                                    code = code * 16 + digit;"},
{"lineNum":" 1674","line":"                                    ++src;"},
{"lineNum":" 1675","line":"                                }"},
{"lineNum":" 1676","line":"                                insert_coded_character<Flags>(dest, code);    // Put character in output"},
{"lineNum":" 1677","line":"                            }"},
{"lineNum":" 1678","line":"                            else"},
{"lineNum":" 1679","line":"                            {"},
{"lineNum":" 1680","line":"                                unsigned long code = 0;"},
{"lineNum":" 1681","line":"                                src += 2;   // Skip &#"},
{"lineNum":" 1682","line":"                                while (1)"},
{"lineNum":" 1683","line":"                                {"},
{"lineNum":" 1684","line":"                                    unsigned char digit = internal::lookup_tables<0>::lookup_digits[static_cast<unsigned char>(*src)];"},
{"lineNum":" 1685","line":"                                    if (digit == 0xFF)"},
{"lineNum":" 1686","line":"                                        break;"},
{"lineNum":" 1687","line":"                                    code = code * 10 + digit;"},
{"lineNum":" 1688","line":"                                    ++src;"},
{"lineNum":" 1689","line":"                                }"},
{"lineNum":" 1690","line":"                                insert_coded_character<Flags>(dest, code);    // Put character in output"},
{"lineNum":" 1691","line":"                            }"},
{"lineNum":" 1692","line":"                            if (*src == Ch(\';\'))"},
{"lineNum":" 1693","line":"                                ++src;"},
{"lineNum":" 1694","line":"                            else"},
{"lineNum":" 1695","line":"                                CEREAL_RAPIDXML_PARSE_ERROR(\"expected ;\", src);"},
{"lineNum":" 1696","line":"                            continue;"},
{"lineNum":" 1697","line":""},
{"lineNum":" 1698","line":"                        // Something else"},
{"lineNum":" 1699","line":"                        default:"},
{"lineNum":" 1700","line":"                            // Ignore, just copy \'&\' verbatim"},
{"lineNum":" 1701","line":"                            break;"},
{"lineNum":" 1702","line":""},
{"lineNum":" 1703","line":"                        }"},
{"lineNum":" 1704","line":"                    }"},
{"lineNum":" 1705","line":"                }"},
{"lineNum":" 1706","line":""},
{"lineNum":" 1707","line":"                // If whitespace condensing is enabled"},
{"lineNum":" 1708","line":"                if ((Flags & parse_normalize_whitespace) && !preserve_space)"},
{"lineNum":" 1709","line":"                {"},
{"lineNum":" 1710","line":"                    // Test if condensing is needed"},
{"lineNum":" 1711","line":"                    if (whitespace_pred::test(*src))"},
{"lineNum":" 1712","line":"                    {"},
{"lineNum":" 1713","line":"                        *dest = Ch(\' \'); ++dest;    // Put single space in dest"},
{"lineNum":" 1714","line":"                        ++src;                      // Skip first whitespace char"},
{"lineNum":" 1715","line":"                        // Skip remaining whitespace chars"},
{"lineNum":" 1716","line":"                        while (whitespace_pred::test(*src))"},
{"lineNum":" 1717","line":"                            ++src;"},
{"lineNum":" 1718","line":"                        continue;"},
{"lineNum":" 1719","line":"                    }"},
{"lineNum":" 1720","line":"                }"},
{"lineNum":" 1721","line":""},
{"lineNum":" 1722","line":"                // No replacement, only copy character"},
{"lineNum":" 1723","line":"                *dest++ = *src++;"},
{"lineNum":" 1724","line":""},
{"lineNum":" 1725","line":"            }"},
{"lineNum":" 1726","line":""},
{"lineNum":" 1727","line":"            // Return new end"},
{"lineNum":" 1728","line":"            text = src;"},
{"lineNum":" 1729","line":"            return dest;"},
{"lineNum":" 1730","line":""},
{"lineNum":" 1731","line":"        }"},
{"lineNum":" 1732","line":""},
{"lineNum":" 1733","line":"        ///////////////////////////////////////////////////////////////////////"},
{"lineNum":" 1734","line":"        // Internal parsing functions"},
{"lineNum":" 1735","line":""},
{"lineNum":" 1736","line":"        // Parse BOM, if any"},
{"lineNum":" 1737","line":"        template<int Flags>"},
{"lineNum":" 1738","line":"        void parse_bom(Ch *&text)"},
{"lineNum":" 1739","line":"        {"},
{"lineNum":" 1740","line":"            // UTF-8?"},
{"lineNum":" 1741","line":"            if (static_cast<unsigned char>(text[0]) == 0xEF &&"},
{"lineNum":" 1742","line":"                static_cast<unsigned char>(text[1]) == 0xBB &&"},
{"lineNum":" 1743","line":"                static_cast<unsigned char>(text[2]) == 0xBF)"},
{"lineNum":" 1744","line":"            {"},
{"lineNum":" 1745","line":"                text += 3;      // Skup utf-8 bom"},
{"lineNum":" 1746","line":"            }"},
{"lineNum":" 1747","line":"        }"},
{"lineNum":" 1748","line":""},
{"lineNum":" 1749","line":"        // Parse XML declaration (<?xml...)"},
{"lineNum":" 1750","line":"        template<int Flags>"},
{"lineNum":" 1751","line":"        xml_node<Ch> *parse_xml_declaration(Ch *&text)"},
{"lineNum":" 1752","line":"        {"},
{"lineNum":" 1753","line":"            // If parsing of declaration is disabled"},
{"lineNum":" 1754","line":"            if (!(Flags & parse_declaration_node))"},
{"lineNum":" 1755","line":"            {"},
{"lineNum":" 1756","line":"                // Skip until end of declaration"},
{"lineNum":" 1757","line":"                while (text[0] != Ch(\'?\') || text[1] != Ch(\'>\'))"},
{"lineNum":" 1758","line":"                {"},
{"lineNum":" 1759","line":"                    if (!text[0])"},
{"lineNum":" 1760","line":"                        CEREAL_RAPIDXML_PARSE_ERROR(\"unexpected end of data\", text);"},
{"lineNum":" 1761","line":"                    ++text;"},
{"lineNum":" 1762","line":"                }"},
{"lineNum":" 1763","line":"                text += 2;    // Skip \'?>\'"},
{"lineNum":" 1764","line":"                return 0;"},
{"lineNum":" 1765","line":"            }"},
{"lineNum":" 1766","line":""},
{"lineNum":" 1767","line":"            // Create declaration"},
{"lineNum":" 1768","line":"            xml_node<Ch> *declaration = this->allocate_node(node_declaration);"},
{"lineNum":" 1769","line":""},
{"lineNum":" 1770","line":"            // Skip whitespace before attributes or ?>"},
{"lineNum":" 1771","line":"            skip<whitespace_pred, Flags>(text);"},
{"lineNum":" 1772","line":""},
{"lineNum":" 1773","line":"            // Parse declaration attributes"},
{"lineNum":" 1774","line":"            parse_node_attributes<Flags>(text, declaration);"},
{"lineNum":" 1775","line":""},
{"lineNum":" 1776","line":"            // Skip ?>"},
{"lineNum":" 1777","line":"            if (text[0] != Ch(\'?\') || text[1] != Ch(\'>\'))"},
{"lineNum":" 1778","line":"                CEREAL_RAPIDXML_PARSE_ERROR(\"expected ?>\", text);"},
{"lineNum":" 1779","line":"            text += 2;"},
{"lineNum":" 1780","line":""},
{"lineNum":" 1781","line":"            return declaration;"},
{"lineNum":" 1782","line":"        }"},
{"lineNum":" 1783","line":""},
{"lineNum":" 1784","line":"        // Parse XML comment (<!--...)"},
{"lineNum":" 1785","line":"        template<int Flags>"},
{"lineNum":" 1786","line":"        xml_node<Ch> *parse_comment(Ch *&text)"},
{"lineNum":" 1787","line":"        {"},
{"lineNum":" 1788","line":"            // If parsing of comments is disabled"},
{"lineNum":" 1789","line":"            if (!(Flags & parse_comment_nodes))"},
{"lineNum":" 1790","line":"            {"},
{"lineNum":" 1791","line":"                // Skip until end of comment"},
{"lineNum":" 1792","line":"                while (text[0] != Ch(\'-\') || text[1] != Ch(\'-\') || text[2] != Ch(\'>\'))"},
{"lineNum":" 1793","line":"                {"},
{"lineNum":" 1794","line":"                    if (!text[0])"},
{"lineNum":" 1795","line":"                        CEREAL_RAPIDXML_PARSE_ERROR(\"unexpected end of data\", text);"},
{"lineNum":" 1796","line":"                    ++text;"},
{"lineNum":" 1797","line":"                }"},
{"lineNum":" 1798","line":"                text += 3;     // Skip \'-->\'"},
{"lineNum":" 1799","line":"                return 0;      // Do not produce comment node"},
{"lineNum":" 1800","line":"            }"},
{"lineNum":" 1801","line":""},
{"lineNum":" 1802","line":"            // Remember value start"},
{"lineNum":" 1803","line":"            Ch *value_ = text;"},
{"lineNum":" 1804","line":""},
{"lineNum":" 1805","line":"            // Skip until end of comment"},
{"lineNum":" 1806","line":"            while (text[0] != Ch(\'-\') || text[1] != Ch(\'-\') || text[2] != Ch(\'>\'))"},
{"lineNum":" 1807","line":"            {"},
{"lineNum":" 1808","line":"                if (!text[0])"},
{"lineNum":" 1809","line":"                    CEREAL_RAPIDXML_PARSE_ERROR(\"unexpected end of data\", text);"},
{"lineNum":" 1810","line":"                ++text;"},
{"lineNum":" 1811","line":"            }"},
{"lineNum":" 1812","line":""},
{"lineNum":" 1813","line":"            // Create comment node"},
{"lineNum":" 1814","line":"            xml_node<Ch> *comment = this->allocate_node(node_comment);"},
{"lineNum":" 1815","line":"            comment->value(value_, static_cast<std::size_t>(text - value_));"},
{"lineNum":" 1816","line":""},
{"lineNum":" 1817","line":"            // Place zero terminator after comment value"},
{"lineNum":" 1818","line":"            if (!(Flags & parse_no_string_terminators))"},
{"lineNum":" 1819","line":"                *text = Ch(\'\\0\');"},
{"lineNum":" 1820","line":""},
{"lineNum":" 1821","line":"            text += 3;     // Skip \'-->\'"},
{"lineNum":" 1822","line":"            return comment;"},
{"lineNum":" 1823","line":"        }"},
{"lineNum":" 1824","line":""},
{"lineNum":" 1825","line":"        // Parse DOCTYPE"},
{"lineNum":" 1826","line":"        template<int Flags>"},
{"lineNum":" 1827","line":"        xml_node<Ch> *parse_doctype(Ch *&text)"},
{"lineNum":" 1828","line":"        {"},
{"lineNum":" 1829","line":"            // Remember value start"},
{"lineNum":" 1830","line":"            Ch *value_ = text;"},
{"lineNum":" 1831","line":""},
{"lineNum":" 1832","line":"            // Skip to >"},
{"lineNum":" 1833","line":"            while (*text != Ch(\'>\'))"},
{"lineNum":" 1834","line":"            {"},
{"lineNum":" 1835","line":"                // Determine character type"},
{"lineNum":" 1836","line":"                switch (*text)"},
{"lineNum":" 1837","line":"                {"},
{"lineNum":" 1838","line":""},
{"lineNum":" 1839","line":"                // If \'[\' encountered, scan for matching ending \']\' using naive algorithm with depth"},
{"lineNum":" 1840","line":"                // This works for all W3C test files except for 2 most wicked"},
{"lineNum":" 1841","line":"                case Ch(\'[\'):"},
{"lineNum":" 1842","line":"                {"},
{"lineNum":" 1843","line":"                    ++text;     // Skip \'[\'"},
{"lineNum":" 1844","line":"                    int depth = 1;"},
{"lineNum":" 1845","line":"                    while (depth > 0)"},
{"lineNum":" 1846","line":"                    {"},
{"lineNum":" 1847","line":"                        switch (*text)"},
{"lineNum":" 1848","line":"                        {"},
{"lineNum":" 1849","line":"                            case Ch(\'[\'): ++depth; break;"},
{"lineNum":" 1850","line":"                            case Ch(\']\'): --depth; break;"},
{"lineNum":" 1851","line":"                            case 0: CEREAL_RAPIDXML_PARSE_ERROR(\"unexpected end of data\", text);"},
{"lineNum":" 1852","line":"                        }"},
{"lineNum":" 1853","line":"                        ++text;"},
{"lineNum":" 1854","line":"                    }"},
{"lineNum":" 1855","line":"                    break;"},
{"lineNum":" 1856","line":"                }"},
{"lineNum":" 1857","line":""},
{"lineNum":" 1858","line":"                // Error on end of text"},
{"lineNum":" 1859","line":"                case Ch(\'\\0\'):"},
{"lineNum":" 1860","line":"                    CEREAL_RAPIDXML_PARSE_ERROR(\"unexpected end of data\", text);"},
{"lineNum":" 1861","line":""},
{"lineNum":" 1862","line":"                // Other character, skip it"},
{"lineNum":" 1863","line":"                default:"},
{"lineNum":" 1864","line":"                    ++text;"},
{"lineNum":" 1865","line":""},
{"lineNum":" 1866","line":"                }"},
{"lineNum":" 1867","line":"            }"},
{"lineNum":" 1868","line":""},
{"lineNum":" 1869","line":"            // If DOCTYPE nodes enabled"},
{"lineNum":" 1870","line":"            if (Flags & parse_doctype_node)"},
{"lineNum":" 1871","line":"            {"},
{"lineNum":" 1872","line":"                // Create a new doctype node"},
{"lineNum":" 1873","line":"                xml_node<Ch> *doctype = this->allocate_node(node_doctype);"},
{"lineNum":" 1874","line":"                doctype->value(value_, static_cast<std::size_t>(text - value_));"},
{"lineNum":" 1875","line":""},
{"lineNum":" 1876","line":"                // Place zero terminator after value"},
{"lineNum":" 1877","line":"                if (!(Flags & parse_no_string_terminators))"},
{"lineNum":" 1878","line":"                    *text = Ch(\'\\0\');"},
{"lineNum":" 1879","line":""},
{"lineNum":" 1880","line":"                text += 1;      // skip \'>\'"},
{"lineNum":" 1881","line":"                return doctype;"},
{"lineNum":" 1882","line":"            }"},
{"lineNum":" 1883","line":"            else"},
{"lineNum":" 1884","line":"            {"},
{"lineNum":" 1885","line":"                text += 1;      // skip \'>\'"},
{"lineNum":" 1886","line":"                return 0;"},
{"lineNum":" 1887","line":"            }"},
{"lineNum":" 1888","line":""},
{"lineNum":" 1889","line":"        }"},
{"lineNum":" 1890","line":""},
{"lineNum":" 1891","line":"        // Parse PI"},
{"lineNum":" 1892","line":"        template<int Flags>"},
{"lineNum":" 1893","line":"        xml_node<Ch> *parse_pi(Ch *&text)"},
{"lineNum":" 1894","line":"        {"},
{"lineNum":" 1895","line":"            // If creation of PI nodes is enabled"},
{"lineNum":" 1896","line":"            if (Flags & parse_pi_nodes)"},
{"lineNum":" 1897","line":"            {"},
{"lineNum":" 1898","line":"                // Create pi node"},
{"lineNum":" 1899","line":"                xml_node<Ch> *pi = this->allocate_node(node_pi);"},
{"lineNum":" 1900","line":""},
{"lineNum":" 1901","line":"                // Extract PI target name"},
{"lineNum":" 1902","line":"                Ch *name_ = text;"},
{"lineNum":" 1903","line":"                skip<node_name_pred, Flags>(text);"},
{"lineNum":" 1904","line":"                if (text == name_)"},
{"lineNum":" 1905","line":"                    CEREAL_RAPIDXML_PARSE_ERROR(\"expected PI target\", text);"},
{"lineNum":" 1906","line":"                pi->name(name_, static_cast<std::size_t>(text - name_));"},
{"lineNum":" 1907","line":""},
{"lineNum":" 1908","line":"                // Skip whitespace between pi target and pi"},
{"lineNum":" 1909","line":"                skip<whitespace_pred, Flags>(text);"},
{"lineNum":" 1910","line":""},
{"lineNum":" 1911","line":"                // Remember start of pi"},
{"lineNum":" 1912","line":"                Ch *value_ = text;"},
{"lineNum":" 1913","line":""},
{"lineNum":" 1914","line":"                // Skip to \'?>\'"},
{"lineNum":" 1915","line":"                while (text[0] != Ch(\'?\') || text[1] != Ch(\'>\'))"},
{"lineNum":" 1916","line":"                {"},
{"lineNum":" 1917","line":"                    if (*text == Ch(\'\\0\'))"},
{"lineNum":" 1918","line":"                        CEREAL_RAPIDXML_PARSE_ERROR(\"unexpected end of data\", text);"},
{"lineNum":" 1919","line":"                    ++text;"},
{"lineNum":" 1920","line":"                }"},
{"lineNum":" 1921","line":""},
{"lineNum":" 1922","line":"                // Set pi value (verbatim, no entity expansion or whitespace normalization)"},
{"lineNum":" 1923","line":"                pi->value(value_, static_cast<std::size_t>(text - value_));"},
{"lineNum":" 1924","line":""},
{"lineNum":" 1925","line":"                // Place zero terminator after name and value"},
{"lineNum":" 1926","line":"                if (!(Flags & parse_no_string_terminators))"},
{"lineNum":" 1927","line":"                {"},
{"lineNum":" 1928","line":"                    pi->name()[pi->name_size()] = Ch(\'\\0\');"},
{"lineNum":" 1929","line":"                    pi->value()[pi->value_size()] = Ch(\'\\0\');"},
{"lineNum":" 1930","line":"                }"},
{"lineNum":" 1931","line":""},
{"lineNum":" 1932","line":"                text += 2;                          // Skip \'?>\'"},
{"lineNum":" 1933","line":"                return pi;"},
{"lineNum":" 1934","line":"            }"},
{"lineNum":" 1935","line":"            else"},
{"lineNum":" 1936","line":"            {"},
{"lineNum":" 1937","line":"                // Skip to \'?>\'"},
{"lineNum":" 1938","line":"                while (text[0] != Ch(\'?\') || text[1] != Ch(\'>\'))"},
{"lineNum":" 1939","line":"                {"},
{"lineNum":" 1940","line":"                    if (*text == Ch(\'\\0\'))"},
{"lineNum":" 1941","line":"                        CEREAL_RAPIDXML_PARSE_ERROR(\"unexpected end of data\", text);"},
{"lineNum":" 1942","line":"                    ++text;"},
{"lineNum":" 1943","line":"                }"},
{"lineNum":" 1944","line":"                text += 2;    // Skip \'?>\'"},
{"lineNum":" 1945","line":"                return 0;"},
{"lineNum":" 1946","line":"            }"},
{"lineNum":" 1947","line":"        }"},
{"lineNum":" 1948","line":""},
{"lineNum":" 1949","line":"        // Parse and append data"},
{"lineNum":" 1950","line":"        // Return character that ends data."},
{"lineNum":" 1951","line":"        // This is necessary because this character might have been overwritten by a terminating 0"},
{"lineNum":" 1952","line":"        template<int Flags>"},
{"lineNum":" 1953","line":"        Ch parse_and_append_data(xml_node<Ch> *node, Ch *&text, Ch *contents_start)"},
{"lineNum":" 1954","line":"        {"},
{"lineNum":" 1955","line":"            // Backup to contents start if whitespace trimming is disabled"},
{"lineNum":" 1956","line":"            if (!(Flags & parse_trim_whitespace))"},
{"lineNum":" 1957","line":"                text = contents_start;"},
{"lineNum":" 1958","line":""},
{"lineNum":" 1959","line":"            const bool preserve_space =  internal::preserve_space(node);"},
{"lineNum":" 1960","line":""},
{"lineNum":" 1961","line":"            // Skip until end of data"},
{"lineNum":" 1962","line":"            Ch *value_ = text, *end;"},
{"lineNum":" 1963","line":"            if ((Flags & parse_normalize_whitespace) && !preserve_space)"},
{"lineNum":" 1964","line":"                end = skip_and_expand_character_refs<text_pred, text_pure_with_ws_pred, Flags>(text, false);"},
{"lineNum":" 1965","line":"            else"},
{"lineNum":" 1966","line":"                end = skip_and_expand_character_refs<text_pred, text_pure_no_ws_pred, Flags>(text, preserve_space);"},
{"lineNum":" 1967","line":""},
{"lineNum":" 1968","line":"            // Trim trailing whitespace if flag is set; leading was already trimmed by whitespace skip after >"},
{"lineNum":" 1969","line":"            if ((Flags & parse_trim_whitespace) && !preserve_space)"},
{"lineNum":" 1970","line":"            {"},
{"lineNum":" 1971","line":"                if (Flags & parse_normalize_whitespace)"},
{"lineNum":" 1972","line":"                {"},
{"lineNum":" 1973","line":"                    // Whitespace is already condensed to single space characters by skipping function, so just trim 1 char off the end"},
{"lineNum":" 1974","line":"                    if (*(end - 1) == Ch(\' \'))"},
{"lineNum":" 1975","line":"                        --end;"},
{"lineNum":" 1976","line":"                }"},
{"lineNum":" 1977","line":"                else"},
{"lineNum":" 1978","line":"                {"},
{"lineNum":" 1979","line":"                    // Backup until non-whitespace character is found"},
{"lineNum":" 1980","line":"                    while (whitespace_pred::test(*(end - 1)))"},
{"lineNum":" 1981","line":"                        --end;"},
{"lineNum":" 1982","line":"                }"},
{"lineNum":" 1983","line":"            }"},
{"lineNum":" 1984","line":""},
{"lineNum":" 1985","line":"            // If characters are still left between end and value (this test is only necessary if normalization is enabled)"},
{"lineNum":" 1986","line":"            // Create new data node"},
{"lineNum":" 1987","line":"            if (!(Flags & parse_no_data_nodes))"},
{"lineNum":" 1988","line":"            {"},
{"lineNum":" 1989","line":"                xml_node<Ch> *data = this->allocate_node(node_data);"},
{"lineNum":" 1990","line":"                data->value(value_, static_cast<std::size_t>(end - value_));"},
{"lineNum":" 1991","line":"                node->append_node(data);"},
{"lineNum":" 1992","line":"            }"},
{"lineNum":" 1993","line":""},
{"lineNum":" 1994","line":"            // Add data to parent node if no data exists yet"},
{"lineNum":" 1995","line":"            if (!(Flags & parse_no_element_values))"},
{"lineNum":" 1996","line":"                if (*node->value() == Ch(\'\\0\'))"},
{"lineNum":" 1997","line":"                    node->value(value_, static_cast<std::size_t>(end - value_));"},
{"lineNum":" 1998","line":""},
{"lineNum":" 1999","line":"            // Place zero terminator after value"},
{"lineNum":" 2000","line":"            if (!(Flags & parse_no_string_terminators))"},
{"lineNum":" 2001","line":"            {"},
{"lineNum":" 2002","line":"                Ch ch = *text;"},
{"lineNum":" 2003","line":"                *end = Ch(\'\\0\');"},
{"lineNum":" 2004","line":"                return ch;      // Return character that ends data; this is required because zero terminator overwritten it"},
{"lineNum":" 2005","line":"            }"},
{"lineNum":" 2006","line":""},
{"lineNum":" 2007","line":"            // Return character that ends data"},
{"lineNum":" 2008","line":"            return *text;"},
{"lineNum":" 2009","line":"        }"},
{"lineNum":" 2010","line":""},
{"lineNum":" 2011","line":"        // Parse CDATA"},
{"lineNum":" 2012","line":"        template<int Flags>"},
{"lineNum":" 2013","line":"        xml_node<Ch> *parse_cdata(Ch *&text)"},
{"lineNum":" 2014","line":"        {"},
{"lineNum":" 2015","line":"            // If CDATA is disabled"},
{"lineNum":" 2016","line":"            if (Flags & parse_no_data_nodes)"},
{"lineNum":" 2017","line":"            {"},
{"lineNum":" 2018","line":"                // Skip until end of cdata"},
{"lineNum":" 2019","line":"                while (text[0] != Ch(\']\') || text[1] != Ch(\']\') || text[2] != Ch(\'>\'))"},
{"lineNum":" 2020","line":"                {"},
{"lineNum":" 2021","line":"                    if (!text[0])"},
{"lineNum":" 2022","line":"                        CEREAL_RAPIDXML_PARSE_ERROR(\"unexpected end of data\", text);"},
{"lineNum":" 2023","line":"                    ++text;"},
{"lineNum":" 2024","line":"                }"},
{"lineNum":" 2025","line":"                text += 3;      // Skip ]]>"},
{"lineNum":" 2026","line":"                return 0;       // Do not produce CDATA node"},
{"lineNum":" 2027","line":"            }"},
{"lineNum":" 2028","line":""},
{"lineNum":" 2029","line":"            // Skip until end of cdata"},
{"lineNum":" 2030","line":"            Ch *value_ = text;"},
{"lineNum":" 2031","line":"            while (text[0] != Ch(\']\') || text[1] != Ch(\']\') || text[2] != Ch(\'>\'))"},
{"lineNum":" 2032","line":"            {"},
{"lineNum":" 2033","line":"                if (!text[0])"},
{"lineNum":" 2034","line":"                    CEREAL_RAPIDXML_PARSE_ERROR(\"unexpected end of data\", text);"},
{"lineNum":" 2035","line":"                ++text;"},
{"lineNum":" 2036","line":"            }"},
{"lineNum":" 2037","line":""},
{"lineNum":" 2038","line":"            // Create new cdata node"},
{"lineNum":" 2039","line":"            xml_node<Ch> *cdata = this->allocate_node(node_cdata);"},
{"lineNum":" 2040","line":"            cdata->value(value_, static_cast<std::size_t>(text - value_));"},
{"lineNum":" 2041","line":""},
{"lineNum":" 2042","line":"            // Place zero terminator after value"},
{"lineNum":" 2043","line":"            if (!(Flags & parse_no_string_terminators))"},
{"lineNum":" 2044","line":"                *text = Ch(\'\\0\');"},
{"lineNum":" 2045","line":""},
{"lineNum":" 2046","line":"            text += 3;      // Skip ]]>"},
{"lineNum":" 2047","line":"            return cdata;"},
{"lineNum":" 2048","line":"        }"},
{"lineNum":" 2049","line":""},
{"lineNum":" 2050","line":"        // Parse element node"},
{"lineNum":" 2051","line":"        template<int Flags>"},
{"lineNum":" 2052","line":"        xml_node<Ch> *parse_element(Ch *&text)"},
{"lineNum":" 2053","line":"        {"},
{"lineNum":" 2054","line":"            // Create element node"},
{"lineNum":" 2055","line":"            xml_node<Ch> *element = this->allocate_node(node_element);"},
{"lineNum":" 2056","line":""},
{"lineNum":" 2057","line":"            // Extract element name"},
{"lineNum":" 2058","line":"            Ch *name_ = text;"},
{"lineNum":" 2059","line":"            skip<node_name_pred, Flags>(text);"},
{"lineNum":" 2060","line":"            if (text == name_)"},
{"lineNum":" 2061","line":"                CEREAL_RAPIDXML_PARSE_ERROR(\"expected element name\", text);"},
{"lineNum":" 2062","line":"            element->name(name_, static_cast<std::size_t>(text - name_));"},
{"lineNum":" 2063","line":""},
{"lineNum":" 2064","line":"            // Skip whitespace between element name and attributes or >"},
{"lineNum":" 2065","line":"            skip<whitespace_pred, Flags>(text);"},
{"lineNum":" 2066","line":""},
{"lineNum":" 2067","line":"            // Parse attributes, if any"},
{"lineNum":" 2068","line":"            parse_node_attributes<Flags>(text, element);"},
{"lineNum":" 2069","line":""},
{"lineNum":" 2070","line":"            // Determine ending type"},
{"lineNum":" 2071","line":"            if (*text == Ch(\'>\'))"},
{"lineNum":" 2072","line":"            {"},
{"lineNum":" 2073","line":"                ++text;"},
{"lineNum":" 2074","line":"                parse_node_contents<Flags>(text, element);"},
{"lineNum":" 2075","line":"            }"},
{"lineNum":" 2076","line":"            else if (*text == Ch(\'/\'))"},
{"lineNum":" 2077","line":"            {"},
{"lineNum":" 2078","line":"                ++text;"},
{"lineNum":" 2079","line":"                if (*text != Ch(\'>\'))"},
{"lineNum":" 2080","line":"                    CEREAL_RAPIDXML_PARSE_ERROR(\"expected >\", text);"},
{"lineNum":" 2081","line":"                ++text;"},
{"lineNum":" 2082","line":"            }"},
{"lineNum":" 2083","line":"            else"},
{"lineNum":" 2084","line":"                CEREAL_RAPIDXML_PARSE_ERROR(\"expected >\", text);"},
{"lineNum":" 2085","line":""},
{"lineNum":" 2086","line":"            // Place zero terminator after name"},
{"lineNum":" 2087","line":"            if (!(Flags & parse_no_string_terminators))"},
{"lineNum":" 2088","line":"                element->name()[element->name_size()] = Ch(\'\\0\');"},
{"lineNum":" 2089","line":""},
{"lineNum":" 2090","line":"            // Return parsed element"},
{"lineNum":" 2091","line":"            return element;"},
{"lineNum":" 2092","line":"        }"},
{"lineNum":" 2093","line":""},
{"lineNum":" 2094","line":"        // Determine node type, and parse it"},
{"lineNum":" 2095","line":"        template<int Flags>"},
{"lineNum":" 2096","line":"        xml_node<Ch> *parse_node(Ch *&text)"},
{"lineNum":" 2097","line":"        {"},
{"lineNum":" 2098","line":"            // Parse proper node type"},
{"lineNum":" 2099","line":"            switch (text[0])"},
{"lineNum":" 2100","line":"            {"},
{"lineNum":" 2101","line":""},
{"lineNum":" 2102","line":"            // <..."},
{"lineNum":" 2103","line":"            default:"},
{"lineNum":" 2104","line":"                // Parse and append element node"},
{"lineNum":" 2105","line":"                return parse_element<Flags>(text);"},
{"lineNum":" 2106","line":""},
{"lineNum":" 2107","line":"            // <?..."},
{"lineNum":" 2108","line":"            case Ch(\'?\'):"},
{"lineNum":" 2109","line":"                ++text;     // Skip ?"},
{"lineNum":" 2110","line":"                if ((text[0] == Ch(\'x\') || text[0] == Ch(\'X\')) &&"},
{"lineNum":" 2111","line":"                    (text[1] == Ch(\'m\') || text[1] == Ch(\'M\')) &&"},
{"lineNum":" 2112","line":"                    (text[2] == Ch(\'l\') || text[2] == Ch(\'L\')) &&"},
{"lineNum":" 2113","line":"                    whitespace_pred::test(text[3]))"},
{"lineNum":" 2114","line":"                {"},
{"lineNum":" 2115","line":"                    // \'<?xml \' - xml declaration"},
{"lineNum":" 2116","line":"                    text += 4;      // Skip \'xml \'"},
{"lineNum":" 2117","line":"                    return parse_xml_declaration<Flags>(text);"},
{"lineNum":" 2118","line":"                }"},
{"lineNum":" 2119","line":"                else"},
{"lineNum":" 2120","line":"                {"},
{"lineNum":" 2121","line":"                    // Parse PI"},
{"lineNum":" 2122","line":"                    return parse_pi<Flags>(text);"},
{"lineNum":" 2123","line":"                }"},
{"lineNum":" 2124","line":""},
{"lineNum":" 2125","line":"            // <!..."},
{"lineNum":" 2126","line":"            case Ch(\'!\'):"},
{"lineNum":" 2127","line":""},
{"lineNum":" 2128","line":"                // Parse proper subset of <! node"},
{"lineNum":" 2129","line":"                switch (text[1])"},
{"lineNum":" 2130","line":"                {"},
{"lineNum":" 2131","line":""},
{"lineNum":" 2132","line":"                // <!-"},
{"lineNum":" 2133","line":"                case Ch(\'-\'):"},
{"lineNum":" 2134","line":"                    if (text[2] == Ch(\'-\'))"},
{"lineNum":" 2135","line":"                    {"},
{"lineNum":" 2136","line":"                        // \'<!--\' - xml comment"},
{"lineNum":" 2137","line":"                        text += 3;     // Skip \'!--\'"},
{"lineNum":" 2138","line":"                        return parse_comment<Flags>(text);"},
{"lineNum":" 2139","line":"                    }"},
{"lineNum":" 2140","line":"                    break;"},
{"lineNum":" 2141","line":""},
{"lineNum":" 2142","line":"                // <!["},
{"lineNum":" 2143","line":"                case Ch(\'[\'):"},
{"lineNum":" 2144","line":"                    if (text[2] == Ch(\'C\') && text[3] == Ch(\'D\') && text[4] == Ch(\'A\') &&"},
{"lineNum":" 2145","line":"                        text[5] == Ch(\'T\') && text[6] == Ch(\'A\') && text[7] == Ch(\'[\'))"},
{"lineNum":" 2146","line":"                    {"},
{"lineNum":" 2147","line":"                        // \'<![CDATA[\' - cdata"},
{"lineNum":" 2148","line":"                        text += 8;     // Skip \'![CDATA[\'"},
{"lineNum":" 2149","line":"                        return parse_cdata<Flags>(text);"},
{"lineNum":" 2150","line":"                    }"},
{"lineNum":" 2151","line":"                    break;"},
{"lineNum":" 2152","line":""},
{"lineNum":" 2153","line":"                // <!D"},
{"lineNum":" 2154","line":"                case Ch(\'D\'):"},
{"lineNum":" 2155","line":"                    if (text[2] == Ch(\'O\') && text[3] == Ch(\'C\') && text[4] == Ch(\'T\') &&"},
{"lineNum":" 2156","line":"                        text[5] == Ch(\'Y\') && text[6] == Ch(\'P\') && text[7] == Ch(\'E\') &&"},
{"lineNum":" 2157","line":"                        whitespace_pred::test(text[8]))"},
{"lineNum":" 2158","line":"                    {"},
{"lineNum":" 2159","line":"                        // \'<!DOCTYPE \' - doctype"},
{"lineNum":" 2160","line":"                        text += 9;      // skip \'!DOCTYPE \'"},
{"lineNum":" 2161","line":"                        return parse_doctype<Flags>(text);"},
{"lineNum":" 2162","line":"                    }"},
{"lineNum":" 2163","line":""},
{"lineNum":" 2164","line":"                }   // switch"},
{"lineNum":" 2165","line":""},
{"lineNum":" 2166","line":"                // Attempt to skip other, unrecognized node types starting with <!"},
{"lineNum":" 2167","line":"                ++text;     // Skip !"},
{"lineNum":" 2168","line":"                while (*text != Ch(\'>\'))"},
{"lineNum":" 2169","line":"                {"},
{"lineNum":" 2170","line":"                    if (*text == 0)"},
{"lineNum":" 2171","line":"                        CEREAL_RAPIDXML_PARSE_ERROR(\"unexpected end of data\", text);"},
{"lineNum":" 2172","line":"                    ++text;"},
{"lineNum":" 2173","line":"                }"},
{"lineNum":" 2174","line":"                ++text;     // Skip \'>\'"},
{"lineNum":" 2175","line":"                return 0;   // No node recognized"},
{"lineNum":" 2176","line":""},
{"lineNum":" 2177","line":"            }"},
{"lineNum":" 2178","line":"        }"},
{"lineNum":" 2179","line":""},
{"lineNum":" 2180","line":"        // Parse contents of the node - children, data etc."},
{"lineNum":" 2181","line":"        template<int Flags>"},
{"lineNum":" 2182","line":"        void parse_node_contents(Ch *&text, xml_node<Ch> *node)"},
{"lineNum":" 2183","line":"        {"},
{"lineNum":" 2184","line":"            // For all children and text"},
{"lineNum":" 2185","line":"            while (1)"},
{"lineNum":" 2186","line":"            {"},
{"lineNum":" 2187","line":"                // Skip whitespace between > and node contents"},
{"lineNum":" 2188","line":"                Ch *contents_start = text;      // Store start of node contents before whitespace is skipped"},
{"lineNum":" 2189","line":"                skip<whitespace_pred, Flags>(text);"},
{"lineNum":" 2190","line":"                Ch next_char = *text;"},
{"lineNum":" 2191","line":""},
{"lineNum":" 2192","line":"            // After data nodes, instead of continuing the loop, control jumps here."},
{"lineNum":" 2193","line":"            // This is because zero termination inside parse_and_append_data() function"},
{"lineNum":" 2194","line":"            // would wreak havoc with the above code."},
{"lineNum":" 2195","line":"            // Also, skipping whitespace after data nodes is unnecessary."},
{"lineNum":" 2196","line":"            after_data_node:"},
{"lineNum":" 2197","line":""},
{"lineNum":" 2198","line":"                // Determine what comes next: node closing, child node, data node, or 0?"},
{"lineNum":" 2199","line":"                switch (next_char)"},
{"lineNum":" 2200","line":"                {"},
{"lineNum":" 2201","line":""},
{"lineNum":" 2202","line":"                // Node closing or child node"},
{"lineNum":" 2203","line":"                case Ch(\'<\'):"},
{"lineNum":" 2204","line":"                    if (text[1] == Ch(\'/\'))"},
{"lineNum":" 2205","line":"                    {"},
{"lineNum":" 2206","line":"                        Ch *contents_end = 0;"},
{"lineNum":" 2207","line":"                        if (internal::preserve_space(node))"},
{"lineNum":" 2208","line":"                        {"},
{"lineNum":" 2209","line":"                            contents_end = text;"},
{"lineNum":" 2210","line":"                        }"},
{"lineNum":" 2211","line":""},
{"lineNum":" 2212","line":"                        // Node closing"},
{"lineNum":" 2213","line":"                        text += 2;      // Skip \'</\'"},
{"lineNum":" 2214","line":"                        if (Flags & parse_validate_closing_tags)"},
{"lineNum":" 2215","line":"                        {"},
{"lineNum":" 2216","line":"                            // Skip and validate closing tag name"},
{"lineNum":" 2217","line":"                            Ch *closing_name = text;"},
{"lineNum":" 2218","line":"                            skip<node_name_pred, Flags>(text);"},
{"lineNum":" 2219","line":"                            if (!internal::compare(node->name(), node->name_size(), closing_name, static_cast<std::size_t>(text - closing_name), true))"},
{"lineNum":" 2220","line":"                                CEREAL_RAPIDXML_PARSE_ERROR(\"invalid closing tag name\", text);"},
{"lineNum":" 2221","line":"                        }"},
{"lineNum":" 2222","line":"                        else"},
{"lineNum":" 2223","line":"                        {"},
{"lineNum":" 2224","line":"                            // No validation, just skip name"},
{"lineNum":" 2225","line":"                            skip<node_name_pred, Flags>(text);"},
{"lineNum":" 2226","line":"                        }"},
{"lineNum":" 2227","line":"                        // Skip remaining whitespace after node name"},
{"lineNum":" 2228","line":"                        skip<whitespace_pred, Flags>(text);"},
{"lineNum":" 2229","line":"                        if (*text != Ch(\'>\'))"},
{"lineNum":" 2230","line":"                            CEREAL_RAPIDXML_PARSE_ERROR(\"expected >\", text);"},
{"lineNum":" 2231","line":"                        ++text;     // Skip \'>\'"},
{"lineNum":" 2232","line":""},
{"lineNum":" 2233","line":"                        if (contents_end && contents_end != contents_start)"},
{"lineNum":" 2234","line":"                        {"},
{"lineNum":" 2235","line":"                            node->value(contents_start, static_cast<std::size_t>(contents_end - contents_start));"},
{"lineNum":" 2236","line":"                            node->value()[node->value_size()] = Ch(\'\\0\');"},
{"lineNum":" 2237","line":"                        }"},
{"lineNum":" 2238","line":"                        return;     // Node closed, finished parsing contents"},
{"lineNum":" 2239","line":"                    }"},
{"lineNum":" 2240","line":"                    else"},
{"lineNum":" 2241","line":"                    {"},
{"lineNum":" 2242","line":"                        // Child node"},
{"lineNum":" 2243","line":"                        ++text;     // Skip \'<\'"},
{"lineNum":" 2244","line":"                        if (xml_node<Ch> *child = parse_node<Flags>(text))"},
{"lineNum":" 2245","line":"                            node->append_node(child);"},
{"lineNum":" 2246","line":"                    }"},
{"lineNum":" 2247","line":"                    break;"},
{"lineNum":" 2248","line":""},
{"lineNum":" 2249","line":"                // End of data - error"},
{"lineNum":" 2250","line":"                case Ch(\'\\0\'):"},
{"lineNum":" 2251","line":"                    CEREAL_RAPIDXML_PARSE_ERROR(\"unexpected end of data\", text);"},
{"lineNum":" 2252","line":""},
{"lineNum":" 2253","line":"                // Data node"},
{"lineNum":" 2254","line":"                default:"},
{"lineNum":" 2255","line":"                    next_char = parse_and_append_data<Flags>(node, text, contents_start);"},
{"lineNum":" 2256","line":"                    goto after_data_node;   // Bypass regular processing after data nodes"},
{"lineNum":" 2257","line":""},
{"lineNum":" 2258","line":"                }"},
{"lineNum":" 2259","line":"            }"},
{"lineNum":" 2260","line":"        }"},
{"lineNum":" 2261","line":""},
{"lineNum":" 2262","line":"        // Parse XML attributes of the node"},
{"lineNum":" 2263","line":"        template<int Flags>"},
{"lineNum":" 2264","line":"        void parse_node_attributes(Ch *&text, xml_node<Ch> *node)"},
{"lineNum":" 2265","line":"        {"},
{"lineNum":" 2266","line":"            // For all attributes"},
{"lineNum":" 2267","line":"            while (attribute_name_pred::test(*text))"},
{"lineNum":" 2268","line":"            {"},
{"lineNum":" 2269","line":"                // Extract attribute name"},
{"lineNum":" 2270","line":"                Ch *name_ = text;"},
{"lineNum":" 2271","line":"                ++text;     // Skip first character of attribute name"},
{"lineNum":" 2272","line":"                skip<attribute_name_pred, Flags>(text);"},
{"lineNum":" 2273","line":"                if (text == name_)"},
{"lineNum":" 2274","line":"                    CEREAL_RAPIDXML_PARSE_ERROR(\"expected attribute name\", name_);"},
{"lineNum":" 2275","line":""},
{"lineNum":" 2276","line":"                // Create new attribute"},
{"lineNum":" 2277","line":"                xml_attribute<Ch> *attribute = this->allocate_attribute();"},
{"lineNum":" 2278","line":"                attribute->name(name_, static_cast<std::size_t>(text - name_));"},
{"lineNum":" 2279","line":"                node->append_attribute(attribute);"},
{"lineNum":" 2280","line":""},
{"lineNum":" 2281","line":"                // Skip whitespace after attribute name"},
{"lineNum":" 2282","line":"                skip<whitespace_pred, Flags>(text);"},
{"lineNum":" 2283","line":""},
{"lineNum":" 2284","line":"                // Skip ="},
{"lineNum":" 2285","line":"                if (*text != Ch(\'=\'))"},
{"lineNum":" 2286","line":"                    CEREAL_RAPIDXML_PARSE_ERROR(\"expected =\", text);"},
{"lineNum":" 2287","line":"                ++text;"},
{"lineNum":" 2288","line":""},
{"lineNum":" 2289","line":"                // Add terminating zero after name"},
{"lineNum":" 2290","line":"                if (!(Flags & parse_no_string_terminators))"},
{"lineNum":" 2291","line":"                    attribute->name()[attribute->name_size()] = 0;"},
{"lineNum":" 2292","line":""},
{"lineNum":" 2293","line":"                // Skip whitespace after ="},
{"lineNum":" 2294","line":"                skip<whitespace_pred, Flags>(text);"},
{"lineNum":" 2295","line":""},
{"lineNum":" 2296","line":"                // Skip quote and remember if it was \' or \""},
{"lineNum":" 2297","line":"                Ch quote = *text;"},
{"lineNum":" 2298","line":"                if (quote != Ch(\'\\\'\') && quote != Ch(\'\"\'))"},
{"lineNum":" 2299","line":"                    CEREAL_RAPIDXML_PARSE_ERROR(\"expected \' or \\\"\", text);"},
{"lineNum":" 2300","line":"                ++text;"},
{"lineNum":" 2301","line":""},
{"lineNum":" 2302","line":"                // Extract attribute value and expand char refs in it"},
{"lineNum":" 2303","line":"                Ch *value_ = text, *end;"},
{"lineNum":" 2304","line":"                const int AttFlags = Flags & ~parse_normalize_whitespace;   // No whitespace normalization in attributes"},
{"lineNum":" 2305","line":"                if (quote == Ch(\'\\\'\'))"},
{"lineNum":" 2306","line":"                    end = skip_and_expand_character_refs<attribute_value_pred<Ch(\'\\\'\')>, attribute_value_pure_pred<Ch(\'\\\'\')>, AttFlags>(text, false);"},
{"lineNum":" 2307","line":"                else"},
{"lineNum":" 2308","line":"                    end = skip_and_expand_character_refs<attribute_value_pred<Ch(\'\"\')>, attribute_value_pure_pred<Ch(\'\"\')>, AttFlags>(text, false);"},
{"lineNum":" 2309","line":""},
{"lineNum":" 2310","line":"                // Set attribute value"},
{"lineNum":" 2311","line":"                attribute->value(value_, static_cast<std::size_t>(end - value_));"},
{"lineNum":" 2312","line":""},
{"lineNum":" 2313","line":"                // Make sure that end quote is present"},
{"lineNum":" 2314","line":"                if (*text != quote)"},
{"lineNum":" 2315","line":"                    CEREAL_RAPIDXML_PARSE_ERROR(\"expected \' or \\\"\", text);"},
{"lineNum":" 2316","line":"                ++text;     // Skip quote"},
{"lineNum":" 2317","line":""},
{"lineNum":" 2318","line":"                // Add terminating zero after value"},
{"lineNum":" 2319","line":"                if (!(Flags & parse_no_string_terminators))"},
{"lineNum":" 2320","line":"                    attribute->value()[attribute->value_size()] = 0;"},
{"lineNum":" 2321","line":""},
{"lineNum":" 2322","line":"                // Skip whitespace after attribute value"},
{"lineNum":" 2323","line":"                skip<whitespace_pred, Flags>(text);"},
{"lineNum":" 2324","line":"            }"},
{"lineNum":" 2325","line":"        }"},
{"lineNum":" 2326","line":""},
{"lineNum":" 2327","line":"    };"},
{"lineNum":" 2328","line":""},
{"lineNum":" 2329","line":"    //! \\cond internal"},
{"lineNum":" 2330","line":"    namespace internal"},
{"lineNum":" 2331","line":"    {"},
{"lineNum":" 2332","line":""},
{"lineNum":" 2333","line":"        // Whitespace (space \\n \\r \\t)"},
{"lineNum":" 2334","line":"        template<int Dummy>"},
{"lineNum":" 2335","line":"        const unsigned char lookup_tables<Dummy>::lookup_whitespace[256] ="},
{"lineNum":" 2336","line":"        {"},
{"lineNum":" 2337","line":"          // 0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F"},
{"lineNum":" 2338","line":"             0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  1,  0,  0,  // 0"},
{"lineNum":" 2339","line":"             0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // 1"},
{"lineNum":" 2340","line":"             1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // 2"},
{"lineNum":" 2341","line":"             0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // 3"},
{"lineNum":" 2342","line":"             0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // 4"},
{"lineNum":" 2343","line":"             0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // 5"},
{"lineNum":" 2344","line":"             0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // 6"},
{"lineNum":" 2345","line":"             0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // 7"},
{"lineNum":" 2346","line":"             0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // 8"},
{"lineNum":" 2347","line":"             0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // 9"},
{"lineNum":" 2348","line":"             0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // A"},
{"lineNum":" 2349","line":"             0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // B"},
{"lineNum":" 2350","line":"             0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // C"},
{"lineNum":" 2351","line":"             0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // D"},
{"lineNum":" 2352","line":"             0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // E"},
{"lineNum":" 2353","line":"             0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0   // F"},
{"lineNum":" 2354","line":"        };"},
{"lineNum":" 2355","line":""},
{"lineNum":" 2356","line":"        // Node name (anything but space \\n \\r \\t / > ? \\0)"},
{"lineNum":" 2357","line":"        template<int Dummy>"},
{"lineNum":" 2358","line":"        const unsigned char lookup_tables<Dummy>::lookup_node_name[256] ="},
{"lineNum":" 2359","line":"        {"},
{"lineNum":" 2360","line":"          // 0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F"},
{"lineNum":" 2361","line":"             0,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  1,  1,  0,  1,  1,  // 0"},
{"lineNum":" 2362","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 1"},
{"lineNum":" 2363","line":"             0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  // 2"},
{"lineNum":" 2364","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  // 3"},
{"lineNum":" 2365","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 4"},
{"lineNum":" 2366","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 5"},
{"lineNum":" 2367","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 6"},
{"lineNum":" 2368","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 7"},
{"lineNum":" 2369","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 8"},
{"lineNum":" 2370","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 9"},
{"lineNum":" 2371","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // A"},
{"lineNum":" 2372","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // B"},
{"lineNum":" 2373","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // C"},
{"lineNum":" 2374","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // D"},
{"lineNum":" 2375","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // E"},
{"lineNum":" 2376","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1   // F"},
{"lineNum":" 2377","line":"        };"},
{"lineNum":" 2378","line":""},
{"lineNum":" 2379","line":"        // Text (i.e. PCDATA) (anything but < \\0)"},
{"lineNum":" 2380","line":"        template<int Dummy>"},
{"lineNum":" 2381","line":"        const unsigned char lookup_tables<Dummy>::lookup_text[256] ="},
{"lineNum":" 2382","line":"        {"},
{"lineNum":" 2383","line":"          // 0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F"},
{"lineNum":" 2384","line":"             0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 0"},
{"lineNum":" 2385","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 1"},
{"lineNum":" 2386","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 2"},
{"lineNum":" 2387","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  // 3"},
{"lineNum":" 2388","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 4"},
{"lineNum":" 2389","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 5"},
{"lineNum":" 2390","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 6"},
{"lineNum":" 2391","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 7"},
{"lineNum":" 2392","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 8"},
{"lineNum":" 2393","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 9"},
{"lineNum":" 2394","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // A"},
{"lineNum":" 2395","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // B"},
{"lineNum":" 2396","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // C"},
{"lineNum":" 2397","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // D"},
{"lineNum":" 2398","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // E"},
{"lineNum":" 2399","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1   // F"},
{"lineNum":" 2400","line":"        };"},
{"lineNum":" 2401","line":""},
{"lineNum":" 2402","line":"        // Text (i.e. PCDATA) that does not require processing when ws normalization is disabled"},
{"lineNum":" 2403","line":"        // (anything but < \\0 &)"},
{"lineNum":" 2404","line":"        template<int Dummy>"},
{"lineNum":" 2405","line":"        const unsigned char lookup_tables<Dummy>::lookup_text_pure_no_ws[256] ="},
{"lineNum":" 2406","line":"        {"},
{"lineNum":" 2407","line":"          // 0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F"},
{"lineNum":" 2408","line":"             0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 0"},
{"lineNum":" 2409","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 1"},
{"lineNum":" 2410","line":"             1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 2"},
{"lineNum":" 2411","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  // 3"},
{"lineNum":" 2412","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 4"},
{"lineNum":" 2413","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 5"},
{"lineNum":" 2414","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 6"},
{"lineNum":" 2415","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 7"},
{"lineNum":" 2416","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 8"},
{"lineNum":" 2417","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 9"},
{"lineNum":" 2418","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // A"},
{"lineNum":" 2419","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // B"},
{"lineNum":" 2420","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // C"},
{"lineNum":" 2421","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // D"},
{"lineNum":" 2422","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // E"},
{"lineNum":" 2423","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1   // F"},
{"lineNum":" 2424","line":"        };"},
{"lineNum":" 2425","line":""},
{"lineNum":" 2426","line":"        // Text (i.e. PCDATA) that does not require processing when ws normalizationis is enabled"},
{"lineNum":" 2427","line":"        // (anything but < \\0 & space \\n \\r \\t)"},
{"lineNum":" 2428","line":"        template<int Dummy>"},
{"lineNum":" 2429","line":"        const unsigned char lookup_tables<Dummy>::lookup_text_pure_with_ws[256] ="},
{"lineNum":" 2430","line":"        {"},
{"lineNum":" 2431","line":"          // 0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F"},
{"lineNum":" 2432","line":"             0,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  1,  1,  0,  1,  1,  // 0"},
{"lineNum":" 2433","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 1"},
{"lineNum":" 2434","line":"             0,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 2"},
{"lineNum":" 2435","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  // 3"},
{"lineNum":" 2436","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 4"},
{"lineNum":" 2437","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 5"},
{"lineNum":" 2438","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 6"},
{"lineNum":" 2439","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 7"},
{"lineNum":" 2440","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 8"},
{"lineNum":" 2441","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 9"},
{"lineNum":" 2442","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // A"},
{"lineNum":" 2443","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // B"},
{"lineNum":" 2444","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // C"},
{"lineNum":" 2445","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // D"},
{"lineNum":" 2446","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // E"},
{"lineNum":" 2447","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1   // F"},
{"lineNum":" 2448","line":"        };"},
{"lineNum":" 2449","line":""},
{"lineNum":" 2450","line":"        // Attribute name (anything but space \\n \\r \\t / < > = ? ! \\0)"},
{"lineNum":" 2451","line":"        template<int Dummy>"},
{"lineNum":" 2452","line":"        const unsigned char lookup_tables<Dummy>::lookup_attribute_name[256] ="},
{"lineNum":" 2453","line":"        {"},
{"lineNum":" 2454","line":"          // 0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F"},
{"lineNum":" 2455","line":"             0,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  1,  1,  0,  1,  1,  // 0"},
{"lineNum":" 2456","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 1"},
{"lineNum":" 2457","line":"             0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  // 2"},
{"lineNum":" 2458","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  // 3"},
{"lineNum":" 2459","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 4"},
{"lineNum":" 2460","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 5"},
{"lineNum":" 2461","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 6"},
{"lineNum":" 2462","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 7"},
{"lineNum":" 2463","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 8"},
{"lineNum":" 2464","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 9"},
{"lineNum":" 2465","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // A"},
{"lineNum":" 2466","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // B"},
{"lineNum":" 2467","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // C"},
{"lineNum":" 2468","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // D"},
{"lineNum":" 2469","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // E"},
{"lineNum":" 2470","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1   // F"},
{"lineNum":" 2471","line":"        };"},
{"lineNum":" 2472","line":""},
{"lineNum":" 2473","line":"        // Attribute data with single quote (anything but \' \\0)"},
{"lineNum":" 2474","line":"        template<int Dummy>"},
{"lineNum":" 2475","line":"        const unsigned char lookup_tables<Dummy>::lookup_attribute_data_1[256] ="},
{"lineNum":" 2476","line":"        {"},
{"lineNum":" 2477","line":"          // 0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F"},
{"lineNum":" 2478","line":"             0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 0"},
{"lineNum":" 2479","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 1"},
{"lineNum":" 2480","line":"             1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  // 2"},
{"lineNum":" 2481","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 3"},
{"lineNum":" 2482","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 4"},
{"lineNum":" 2483","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 5"},
{"lineNum":" 2484","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 6"},
{"lineNum":" 2485","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 7"},
{"lineNum":" 2486","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 8"},
{"lineNum":" 2487","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 9"},
{"lineNum":" 2488","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // A"},
{"lineNum":" 2489","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // B"},
{"lineNum":" 2490","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // C"},
{"lineNum":" 2491","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // D"},
{"lineNum":" 2492","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // E"},
{"lineNum":" 2493","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1   // F"},
{"lineNum":" 2494","line":"        };"},
{"lineNum":" 2495","line":""},
{"lineNum":" 2496","line":"        // Attribute data with single quote that does not require processing (anything but \' \\0 &)"},
{"lineNum":" 2497","line":"        template<int Dummy>"},
{"lineNum":" 2498","line":"        const unsigned char lookup_tables<Dummy>::lookup_attribute_data_1_pure[256] ="},
{"lineNum":" 2499","line":"        {"},
{"lineNum":" 2500","line":"          // 0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F"},
{"lineNum":" 2501","line":"             0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 0"},
{"lineNum":" 2502","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 1"},
{"lineNum":" 2503","line":"             1,  1,  1,  1,  1,  1,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  // 2"},
{"lineNum":" 2504","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 3"},
{"lineNum":" 2505","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 4"},
{"lineNum":" 2506","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 5"},
{"lineNum":" 2507","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 6"},
{"lineNum":" 2508","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 7"},
{"lineNum":" 2509","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 8"},
{"lineNum":" 2510","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 9"},
{"lineNum":" 2511","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // A"},
{"lineNum":" 2512","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // B"},
{"lineNum":" 2513","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // C"},
{"lineNum":" 2514","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // D"},
{"lineNum":" 2515","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // E"},
{"lineNum":" 2516","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1   // F"},
{"lineNum":" 2517","line":"        };"},
{"lineNum":" 2518","line":""},
{"lineNum":" 2519","line":"        // Attribute data with double quote (anything but \" \\0)"},
{"lineNum":" 2520","line":"        template<int Dummy>"},
{"lineNum":" 2521","line":"        const unsigned char lookup_tables<Dummy>::lookup_attribute_data_2[256] ="},
{"lineNum":" 2522","line":"        {"},
{"lineNum":" 2523","line":"          // 0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F"},
{"lineNum":" 2524","line":"             0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 0"},
{"lineNum":" 2525","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 1"},
{"lineNum":" 2526","line":"             1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 2"},
{"lineNum":" 2527","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 3"},
{"lineNum":" 2528","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 4"},
{"lineNum":" 2529","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 5"},
{"lineNum":" 2530","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 6"},
{"lineNum":" 2531","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 7"},
{"lineNum":" 2532","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 8"},
{"lineNum":" 2533","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 9"},
{"lineNum":" 2534","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // A"},
{"lineNum":" 2535","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // B"},
{"lineNum":" 2536","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // C"},
{"lineNum":" 2537","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // D"},
{"lineNum":" 2538","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // E"},
{"lineNum":" 2539","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1   // F"},
{"lineNum":" 2540","line":"        };"},
{"lineNum":" 2541","line":""},
{"lineNum":" 2542","line":"        // Attribute data with double quote that does not require processing (anything but \" \\0 &)"},
{"lineNum":" 2543","line":"        template<int Dummy>"},
{"lineNum":" 2544","line":"        const unsigned char lookup_tables<Dummy>::lookup_attribute_data_2_pure[256] ="},
{"lineNum":" 2545","line":"        {"},
{"lineNum":" 2546","line":"          // 0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F"},
{"lineNum":" 2547","line":"             0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 0"},
{"lineNum":" 2548","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 1"},
{"lineNum":" 2549","line":"             1,  1,  0,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 2"},
{"lineNum":" 2550","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 3"},
{"lineNum":" 2551","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 4"},
{"lineNum":" 2552","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 5"},
{"lineNum":" 2553","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 6"},
{"lineNum":" 2554","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 7"},
{"lineNum":" 2555","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 8"},
{"lineNum":" 2556","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 9"},
{"lineNum":" 2557","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // A"},
{"lineNum":" 2558","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // B"},
{"lineNum":" 2559","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // C"},
{"lineNum":" 2560","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // D"},
{"lineNum":" 2561","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // E"},
{"lineNum":" 2562","line":"             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1   // F"},
{"lineNum":" 2563","line":"        };"},
{"lineNum":" 2564","line":""},
{"lineNum":" 2565","line":"        // Digits (dec and hex, 255 denotes end of numeric character reference)"},
{"lineNum":" 2566","line":"        template<int Dummy>"},
{"lineNum":" 2567","line":"        const unsigned char lookup_tables<Dummy>::lookup_digits[256] ="},
{"lineNum":" 2568","line":"        {"},
{"lineNum":" 2569","line":"          // 0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F"},
{"lineNum":" 2570","line":"           255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  // 0"},
{"lineNum":" 2571","line":"           255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  // 1"},
{"lineNum":" 2572","line":"           255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  // 2"},
{"lineNum":" 2573","line":"             0,  1,  2,  3,  4,  5,  6,  7,  8,  9,255,255,255,255,255,255,  // 3"},
{"lineNum":" 2574","line":"           255, 10, 11, 12, 13, 14, 15,255,255,255,255,255,255,255,255,255,  // 4"},
{"lineNum":" 2575","line":"           255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  // 5"},
{"lineNum":" 2576","line":"           255, 10, 11, 12, 13, 14, 15,255,255,255,255,255,255,255,255,255,  // 6"},
{"lineNum":" 2577","line":"           255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  // 7"},
{"lineNum":" 2578","line":"           255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  // 8"},
{"lineNum":" 2579","line":"           255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  // 9"},
{"lineNum":" 2580","line":"           255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  // A"},
{"lineNum":" 2581","line":"           255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  // B"},
{"lineNum":" 2582","line":"           255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  // C"},
{"lineNum":" 2583","line":"           255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  // D"},
{"lineNum":" 2584","line":"           255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  // E"},
{"lineNum":" 2585","line":"           255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255   // F"},
{"lineNum":" 2586","line":"        };"},
{"lineNum":" 2587","line":""},
{"lineNum":" 2588","line":"        // Upper case conversion"},
{"lineNum":" 2589","line":"        template<int Dummy>"},
{"lineNum":" 2590","line":"        const unsigned char lookup_tables<Dummy>::lookup_upcase[256] ="},
{"lineNum":" 2591","line":"        {"},
{"lineNum":" 2592","line":"          // 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  A   B   C   D   E   F"},
{"lineNum":" 2593","line":"           0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15,   // 0"},
{"lineNum":" 2594","line":"           16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,   // 1"},
{"lineNum":" 2595","line":"           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,   // 2"},
{"lineNum":" 2596","line":"           48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,   // 3"},
{"lineNum":" 2597","line":"           64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,   // 4"},
{"lineNum":" 2598","line":"           80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,   // 5"},
{"lineNum":" 2599","line":"           96, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,   // 6"},
{"lineNum":" 2600","line":"           80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 123,124,125,126,127,  // 7"},
{"lineNum":" 2601","line":"           128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,  // 8"},
{"lineNum":" 2602","line":"           144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,  // 9"},
{"lineNum":" 2603","line":"           160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,  // A"},
{"lineNum":" 2604","line":"           176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,  // B"},
{"lineNum":" 2605","line":"           192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,  // C"},
{"lineNum":" 2606","line":"           208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,  // D"},
{"lineNum":" 2607","line":"           224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,  // E"},
{"lineNum":" 2608","line":"           240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255   // F"},
{"lineNum":" 2609","line":"        };"},
{"lineNum":" 2610","line":"    }"},
{"lineNum":" 2611","line":"    //! \\endcond"},
{"lineNum":" 2612","line":""},
{"lineNum":" 2613","line":"}"},
{"lineNum":" 2614","line":"} // end namespace cereal"},
{"lineNum":" 2615","line":""},
{"lineNum":" 2616","line":"// Undefine internal macros"},
{"lineNum":" 2617","line":"#undef CEREAL_RAPIDXML_PARSE_ERROR"},
{"lineNum":" 2618","line":""},
{"lineNum":" 2619","line":"// On MSVC, restore warnings state"},
{"lineNum":" 2620","line":"#ifdef _MSC_VER"},
{"lineNum":" 2621","line":"    #pragma warning(pop)"},
{"lineNum":" 2622","line":"#endif"},
{"lineNum":" 2623","line":""},
{"lineNum":" 2624","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 74, "covered" : 0,};
var merged_data = [];
