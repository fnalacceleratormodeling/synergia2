var data = {lines:[
{"lineNum":"    1","line":"// -*- C++ -*-"},
{"lineNum":"    2","line":"//===---------------------------- numeric ---------------------------------===//"},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions."},
{"lineNum":"    5","line":"// See https://llvm.org/LICENSE.txt for license information."},
{"lineNum":"    6","line":"// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef _LIBCPP_NUMERIC"},
{"lineNum":"   11","line":"#define _LIBCPP_NUMERIC"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"/*"},
{"lineNum":"   14","line":"    numeric synopsis"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"namespace std"},
{"lineNum":"   17","line":"{"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"template <class InputIterator, class T>"},
{"lineNum":"   20","line":"    constexpr T  // constexpr since C++20"},
{"lineNum":"   21","line":"    accumulate(InputIterator first, InputIterator last, T init);"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"template <class InputIterator, class T, class BinaryOperation>"},
{"lineNum":"   24","line":"    constexpr T  // constexpr since C++20"},
{"lineNum":"   25","line":"    accumulate(InputIterator first, InputIterator last, T init, BinaryOperation binary_op);"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"template<class InputIterator>"},
{"lineNum":"   28","line":"    constexpr typename iterator_traits<InputIterator>::value_type  // constexpr since C++20"},
{"lineNum":"   29","line":"    reduce(InputIterator first, InputIterator last);  // C++17"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"template<class InputIterator, class T>"},
{"lineNum":"   32","line":"    constexpr T  // constexpr since C++20"},
{"lineNum":"   33","line":"    reduce(InputIterator first, InputIterator last, T init);  // C++17"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"template<class InputIterator, class T, class BinaryOperation>"},
{"lineNum":"   36","line":"    constexpr T  // constexpr since C++20"},
{"lineNum":"   37","line":"    reduce(InputIterator first, InputIterator last, T init, BinaryOperation binary_op);  // C++17"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"template <class InputIterator1, class InputIterator2, class T>"},
{"lineNum":"   40","line":"    constexpr T  // constexpr since C++20"},
{"lineNum":"   41","line":"    inner_product(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, T init);"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"template <class InputIterator1, class InputIterator2, class T, class BinaryOperation1, class BinaryOperation2>"},
{"lineNum":"   44","line":"    constexpr T  // constexpr since C++20"},
{"lineNum":"   45","line":"    inner_product(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2,"},
{"lineNum":"   46","line":"                  T init, BinaryOperation1 binary_op1, BinaryOperation2 binary_op2);"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"template<class InputIterator1, class InputIterator2, class T>"},
{"lineNum":"   50","line":"    constexpr T  // constexpr since C++20"},
{"lineNum":"   51","line":"    transform_reduce(InputIterator1 first1, InputIterator1 last1,"},
{"lineNum":"   52","line":"                     InputIterator2 first2, T init);  // C++17"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"template<class InputIterator1, class InputIterator2, class T, class BinaryOperation1, class BinaryOperation2>"},
{"lineNum":"   55","line":"    constexpr T  // constexpr since C++20"},
{"lineNum":"   56","line":"    transform_reduce(InputIterator1 first1, InputIterator1 last1,"},
{"lineNum":"   57","line":"                     InputIterator2 first2, T init,"},
{"lineNum":"   58","line":"                     BinaryOperation1 binary_op1, BinaryOperation2 binary_op2);  // C++17"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"template<class InputIterator, class T, class BinaryOperation, class UnaryOperation>"},
{"lineNum":"   61","line":"    constexpr T  // constexpr since C++20"},
{"lineNum":"   62","line":"    transform_reduce(InputIterator first, InputIterator last, T init,"},
{"lineNum":"   63","line":"                     BinaryOperation binary_op, UnaryOperation unary_op);  // C++17"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"template <class InputIterator, class OutputIterator>"},
{"lineNum":"   66","line":"    constexpr OutputIterator  // constexpr since C++20"},
{"lineNum":"   67","line":"    partial_sum(InputIterator first, InputIterator last, OutputIterator result);"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"template <class InputIterator, class OutputIterator, class BinaryOperation>"},
{"lineNum":"   70","line":"    constexpr OutputIterator  // constexpr since C++20"},
{"lineNum":"   71","line":"    partial_sum(InputIterator first, InputIterator last, OutputIterator result, BinaryOperation binary_op);"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"template<class InputIterator, class OutputIterator, class T>"},
{"lineNum":"   74","line":"    constexpr OutputIterator  // constexpr since C++20"},
{"lineNum":"   75","line":"    exclusive_scan(InputIterator first, InputIterator last,"},
{"lineNum":"   76","line":"                   OutputIterator result, T init); // C++17"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"template<class InputIterator, class OutputIterator, class T, class BinaryOperation>"},
{"lineNum":"   79","line":"    constexpr OutputIterator  // constexpr since C++20"},
{"lineNum":"   80","line":"    exclusive_scan(InputIterator first, InputIterator last,"},
{"lineNum":"   81","line":"                   OutputIterator result, T init, BinaryOperation binary_op); // C++17"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"template<class InputIterator, class OutputIterator>"},
{"lineNum":"   84","line":"    constexpr OutputIterator  // constexpr since C++20"},
{"lineNum":"   85","line":"    inclusive_scan(InputIterator first, InputIterator last, OutputIterator result);  // C++17"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"template<class InputIterator, class OutputIterator, class BinaryOperation>"},
{"lineNum":"   88","line":"    constexpr OutputIterator  // constexpr since C++20"},
{"lineNum":"   89","line":"    inclusive_scan(InputIterator first, InputIterator last,"},
{"lineNum":"   90","line":"                   OutputIterator result, BinaryOperation binary_op);  // C++17"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"template<class InputIterator, class OutputIterator, class BinaryOperation, class T>"},
{"lineNum":"   93","line":"    constexpr OutputIterator  // constexpr since C++20"},
{"lineNum":"   94","line":"    inclusive_scan(InputIterator first, InputIterator last,"},
{"lineNum":"   95","line":"                   OutputIterator result, BinaryOperation binary_op, T init);  // C++17"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"template<class InputIterator, class OutputIterator, class T,"},
{"lineNum":"   98","line":"         class BinaryOperation, class UnaryOperation>"},
{"lineNum":"   99","line":"    constexpr OutputIterator  // constexpr since C++20"},
{"lineNum":"  100","line":"    transform_exclusive_scan(InputIterator first, InputIterator last,"},
{"lineNum":"  101","line":"                             OutputIterator result, T init,"},
{"lineNum":"  102","line":"                             BinaryOperation binary_op, UnaryOperation unary_op);  // C++17"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"template<class InputIterator, class OutputIterator,"},
{"lineNum":"  105","line":"         class BinaryOperation, class UnaryOperation>"},
{"lineNum":"  106","line":"    constexpr OutputIterator  // constexpr since C++20"},
{"lineNum":"  107","line":"    transform_inclusive_scan(InputIterator first, InputIterator last,"},
{"lineNum":"  108","line":"                             OutputIterator result,"},
{"lineNum":"  109","line":"                             BinaryOperation binary_op, UnaryOperation unary_op);  // C++17"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"template<class InputIterator, class OutputIterator,"},
{"lineNum":"  112","line":"         class BinaryOperation, class UnaryOperation, class T>"},
{"lineNum":"  113","line":"    constexpr OutputIterator  // constexpr since C++20"},
{"lineNum":"  114","line":"    transform_inclusive_scan(InputIterator first, InputIterator last,"},
{"lineNum":"  115","line":"                             OutputIterator result,"},
{"lineNum":"  116","line":"                             BinaryOperation binary_op, UnaryOperation unary_op,"},
{"lineNum":"  117","line":"                             T init);  // C++17"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"template <class InputIterator, class OutputIterator>"},
{"lineNum":"  120","line":"    constexpr OutputIterator  // constexpr since C++20"},
{"lineNum":"  121","line":"    adjacent_difference(InputIterator first, InputIterator last, OutputIterator result);"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"template <class InputIterator, class OutputIterator, class BinaryOperation>"},
{"lineNum":"  124","line":"    constexpr OutputIterator  // constexpr since C++20"},
{"lineNum":"  125","line":"    adjacent_difference(InputIterator first, InputIterator last, OutputIterator result, BinaryOperation binary_op);"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"template <class ForwardIterator, class T>"},
{"lineNum":"  128","line":"    constexpr void  // constexpr since C++20"},
{"lineNum":"  129","line":"    iota(ForwardIterator first, ForwardIterator last, T value);"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"template <class M, class N>"},
{"lineNum":"  132","line":"    constexpr common_type_t<M,N> gcd(M m, N n);    // C++17"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"template <class M, class N>"},
{"lineNum":"  135","line":"    constexpr common_type_t<M,N> lcm(M m, N n);    // C++17"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"template<class T>"},
{"lineNum":"  138","line":"    constexpr T midpoint(T a, T b) noexcept;  // C++20"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"template<class T>"},
{"lineNum":"  141","line":"    constexpr T* midpoint(T* a, T* b);        // C++20"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"}  // std"},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"*/"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"#include <__config>"},
{"lineNum":"  148","line":"#include <__debug>"},
{"lineNum":"  149","line":"#include <cmath> // for isnormal"},
{"lineNum":"  150","line":"#include <functional>"},
{"lineNum":"  151","line":"#include <iterator>"},
{"lineNum":"  152","line":"#include <limits> // for numeric_limits"},
{"lineNum":"  153","line":"#include <version>"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"},
{"lineNum":"  156","line":"#pragma GCC system_header"},
{"lineNum":"  157","line":"#endif"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"_LIBCPP_PUSH_MACROS"},
{"lineNum":"  160","line":"#include <__undef_macros>"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"_LIBCPP_BEGIN_NAMESPACE_STD"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"template <class _InputIterator, class _Tp>"},
{"lineNum":"  165","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  166","line":"_Tp"},
{"lineNum":"  167","line":"accumulate(_InputIterator __first, _InputIterator __last, _Tp __init)"},
{"lineNum":"  168","line":"{"},
{"lineNum":"  169","line":"    for (; __first != __last; ++__first)"},
{"lineNum":"  170","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":"  171","line":"        __init = _VSTD::move(__init) + *__first;"},
{"lineNum":"  172","line":"#else"},
{"lineNum":"  173","line":"        __init = __init + *__first;"},
{"lineNum":"  174","line":"#endif"},
{"lineNum":"  175","line":"    return __init;"},
{"lineNum":"  176","line":"}"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"template <class _InputIterator, class _Tp, class _BinaryOperation>"},
{"lineNum":"  179","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  180","line":"_Tp"},
{"lineNum":"  181","line":"accumulate(_InputIterator __first, _InputIterator __last, _Tp __init, _BinaryOperation __binary_op)"},
{"lineNum":"  182","line":"{"},
{"lineNum":"  183","line":"    for (; __first != __last; ++__first)"},
{"lineNum":"  184","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":"  185","line":"        __init = __binary_op(_VSTD::move(__init), *__first);"},
{"lineNum":"  186","line":"#else"},
{"lineNum":"  187","line":"        __init = __binary_op(__init, *__first);"},
{"lineNum":"  188","line":"#endif"},
{"lineNum":"  189","line":"    return __init;"},
{"lineNum":"  190","line":"}"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":"  193","line":"template <class _InputIterator, class _Tp, class _BinaryOp>"},
{"lineNum":"  194","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  195","line":"_Tp"},
{"lineNum":"  196","line":"reduce(_InputIterator __first, _InputIterator __last, _Tp __init, _BinaryOp __b)"},
{"lineNum":"  197","line":"{"},
{"lineNum":"  198","line":"    for (; __first != __last; ++__first)"},
{"lineNum":"  199","line":"        __init = __b(__init, *__first);"},
{"lineNum":"  200","line":"    return __init;"},
{"lineNum":"  201","line":"}"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"template <class _InputIterator, class _Tp>"},
{"lineNum":"  204","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  205","line":"_Tp"},
{"lineNum":"  206","line":"reduce(_InputIterator __first, _InputIterator __last, _Tp __init)"},
{"lineNum":"  207","line":"{"},
{"lineNum":"  208","line":"    return _VSTD::reduce(__first, __last, __init, _VSTD::plus<>());"},
{"lineNum":"  209","line":"}"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"template <class _InputIterator>"},
{"lineNum":"  212","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  213","line":"typename iterator_traits<_InputIterator>::value_type"},
{"lineNum":"  214","line":"reduce(_InputIterator __first, _InputIterator __last)"},
{"lineNum":"  215","line":"{"},
{"lineNum":"  216","line":"    return _VSTD::reduce(__first, __last,"},
{"lineNum":"  217","line":"       typename iterator_traits<_InputIterator>::value_type{});"},
{"lineNum":"  218","line":"}"},
{"lineNum":"  219","line":"#endif"},
{"lineNum":"  220","line":""},
{"lineNum":"  221","line":"template <class _InputIterator1, class _InputIterator2, class _Tp>"},
{"lineNum":"  222","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  223","line":"_Tp"},
{"lineNum":"  224","line":"inner_product(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _Tp __init)"},
{"lineNum":"  225","line":"{"},
{"lineNum":"  226","line":"    for (; __first1 != __last1; ++__first1, (void) ++__first2)"},
{"lineNum":"  227","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":"  228","line":"        __init = _VSTD::move(__init) + *__first1 * *__first2;"},
{"lineNum":"  229","line":"#else"},
{"lineNum":"  230","line":"        __init = __init + *__first1 * *__first2;"},
{"lineNum":"  231","line":"#endif"},
{"lineNum":"  232","line":"    return __init;"},
{"lineNum":"  233","line":"}"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"template <class _InputIterator1, class _InputIterator2, class _Tp, class _BinaryOperation1, class _BinaryOperation2>"},
{"lineNum":"  236","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  237","line":"_Tp"},
{"lineNum":"  238","line":"inner_product(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2,"},
{"lineNum":"  239","line":"              _Tp __init, _BinaryOperation1 __binary_op1, _BinaryOperation2 __binary_op2)"},
{"lineNum":"  240","line":"{"},
{"lineNum":"  241","line":"    for (; __first1 != __last1; ++__first1, (void) ++__first2)"},
{"lineNum":"  242","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":"  243","line":"        __init = __binary_op1(_VSTD::move(__init), __binary_op2(*__first1, *__first2));"},
{"lineNum":"  244","line":"#else"},
{"lineNum":"  245","line":"        __init = __binary_op1(__init, __binary_op2(*__first1, *__first2));"},
{"lineNum":"  246","line":"#endif"},
{"lineNum":"  247","line":"    return __init;"},
{"lineNum":"  248","line":"}"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":"  251","line":"template <class _InputIterator, class _Tp, class _BinaryOp, class _UnaryOp>"},
{"lineNum":"  252","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  253","line":"_Tp"},
{"lineNum":"  254","line":"transform_reduce(_InputIterator __first, _InputIterator __last,"},
{"lineNum":"  255","line":"           _Tp __init,  _BinaryOp __b, _UnaryOp __u)"},
{"lineNum":"  256","line":"{"},
{"lineNum":"  257","line":"    for (; __first != __last; ++__first)"},
{"lineNum":"  258","line":"        __init = __b(__init, __u(*__first));"},
{"lineNum":"  259","line":"    return __init;"},
{"lineNum":"  260","line":"}"},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"template <class _InputIterator1, class _InputIterator2,"},
{"lineNum":"  263","line":"          class _Tp, class _BinaryOp1, class _BinaryOp2>"},
{"lineNum":"  264","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  265","line":"_Tp"},
{"lineNum":"  266","line":"transform_reduce(_InputIterator1 __first1, _InputIterator1 __last1,"},
{"lineNum":"  267","line":"                 _InputIterator2 __first2, _Tp __init,  _BinaryOp1 __b1, _BinaryOp2 __b2)"},
{"lineNum":"  268","line":"{"},
{"lineNum":"  269","line":"    for (; __first1 != __last1; ++__first1, (void) ++__first2)"},
{"lineNum":"  270","line":"        __init = __b1(__init, __b2(*__first1, *__first2));"},
{"lineNum":"  271","line":"    return __init;"},
{"lineNum":"  272","line":"}"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"template <class _InputIterator1, class _InputIterator2, class _Tp>"},
{"lineNum":"  275","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  276","line":"_Tp"},
{"lineNum":"  277","line":"transform_reduce(_InputIterator1 __first1, _InputIterator1 __last1,"},
{"lineNum":"  278","line":"                 _InputIterator2 __first2, _Tp __init)"},
{"lineNum":"  279","line":"{"},
{"lineNum":"  280","line":"    return _VSTD::transform_reduce(__first1, __last1, __first2, _VSTD::move(__init),"},
{"lineNum":"  281","line":"                                   _VSTD::plus<>(), _VSTD::multiplies<>());"},
{"lineNum":"  282","line":"}"},
{"lineNum":"  283","line":"#endif"},
{"lineNum":"  284","line":""},
{"lineNum":"  285","line":"template <class _InputIterator, class _OutputIterator>"},
{"lineNum":"  286","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  287","line":"_OutputIterator"},
{"lineNum":"  288","line":"partial_sum(_InputIterator __first, _InputIterator __last, _OutputIterator __result)"},
{"lineNum":"  289","line":"{"},
{"lineNum":"  290","line":"    if (__first != __last)"},
{"lineNum":"  291","line":"    {"},
{"lineNum":"  292","line":"        typename iterator_traits<_InputIterator>::value_type __t(*__first);"},
{"lineNum":"  293","line":"        *__result = __t;"},
{"lineNum":"  294","line":"        for (++__first, (void) ++__result; __first != __last; ++__first, (void) ++__result)"},
{"lineNum":"  295","line":"        {"},
{"lineNum":"  296","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":"  297","line":"            __t = _VSTD::move(__t) + *__first;"},
{"lineNum":"  298","line":"#else"},
{"lineNum":"  299","line":"            __t = __t + *__first;"},
{"lineNum":"  300","line":"#endif"},
{"lineNum":"  301","line":"            *__result = __t;"},
{"lineNum":"  302","line":"        }"},
{"lineNum":"  303","line":"    }"},
{"lineNum":"  304","line":"    return __result;"},
{"lineNum":"  305","line":"}"},
{"lineNum":"  306","line":""},
{"lineNum":"  307","line":"template <class _InputIterator, class _OutputIterator, class _BinaryOperation>"},
{"lineNum":"  308","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  309","line":"_OutputIterator"},
{"lineNum":"  310","line":"partial_sum(_InputIterator __first, _InputIterator __last, _OutputIterator __result,"},
{"lineNum":"  311","line":"              _BinaryOperation __binary_op)"},
{"lineNum":"  312","line":"{"},
{"lineNum":"  313","line":"    if (__first != __last)"},
{"lineNum":"  314","line":"    {"},
{"lineNum":"  315","line":"        typename iterator_traits<_InputIterator>::value_type __t(*__first);"},
{"lineNum":"  316","line":"        *__result = __t;"},
{"lineNum":"  317","line":"        for (++__first, (void) ++__result; __first != __last; ++__first, (void) ++__result)"},
{"lineNum":"  318","line":"        {"},
{"lineNum":"  319","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":"  320","line":"            __t = __binary_op(_VSTD::move(__t), *__first);"},
{"lineNum":"  321","line":"#else"},
{"lineNum":"  322","line":"            __t = __binary_op(__t, *__first);"},
{"lineNum":"  323","line":"#endif"},
{"lineNum":"  324","line":"            *__result = __t;"},
{"lineNum":"  325","line":"        }"},
{"lineNum":"  326","line":"    }"},
{"lineNum":"  327","line":"    return __result;"},
{"lineNum":"  328","line":"}"},
{"lineNum":"  329","line":""},
{"lineNum":"  330","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":"  331","line":"template <class _InputIterator, class _OutputIterator, class _Tp, class _BinaryOp>"},
{"lineNum":"  332","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  333","line":"_OutputIterator"},
{"lineNum":"  334","line":"exclusive_scan(_InputIterator __first, _InputIterator __last,"},
{"lineNum":"  335","line":"               _OutputIterator __result, _Tp __init, _BinaryOp __b)"},
{"lineNum":"  336","line":"{"},
{"lineNum":"  337","line":"    if (__first != __last)"},
{"lineNum":"  338","line":"    {"},
{"lineNum":"  339","line":"        _Tp __tmp(__b(__init, *__first));"},
{"lineNum":"  340","line":"        while (true)"},
{"lineNum":"  341","line":"        {"},
{"lineNum":"  342","line":"            *__result = _VSTD::move(__init);"},
{"lineNum":"  343","line":"            ++__result;"},
{"lineNum":"  344","line":"            ++__first;"},
{"lineNum":"  345","line":"            if (__first == __last)"},
{"lineNum":"  346","line":"                break;"},
{"lineNum":"  347","line":"            __init = _VSTD::move(__tmp);"},
{"lineNum":"  348","line":"            __tmp = __b(__init, *__first);"},
{"lineNum":"  349","line":"        }"},
{"lineNum":"  350","line":"    }"},
{"lineNum":"  351","line":"    return __result;"},
{"lineNum":"  352","line":"}"},
{"lineNum":"  353","line":""},
{"lineNum":"  354","line":"template <class _InputIterator, class _OutputIterator, class _Tp>"},
{"lineNum":"  355","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  356","line":"_OutputIterator"},
{"lineNum":"  357","line":"exclusive_scan(_InputIterator __first, _InputIterator __last,"},
{"lineNum":"  358","line":"               _OutputIterator __result, _Tp __init)"},
{"lineNum":"  359","line":"{"},
{"lineNum":"  360","line":"    return _VSTD::exclusive_scan(__first, __last, __result, __init, _VSTD::plus<>());"},
{"lineNum":"  361","line":"}"},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"template <class _InputIterator, class _OutputIterator, class _Tp, class _BinaryOp>"},
{"lineNum":"  364","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  365","line":"_OutputIterator inclusive_scan(_InputIterator __first, _InputIterator __last,"},
{"lineNum":"  366","line":"                               _OutputIterator __result, _BinaryOp __b,  _Tp __init)"},
{"lineNum":"  367","line":"{"},
{"lineNum":"  368","line":"    for (; __first != __last; ++__first, (void) ++__result) {"},
{"lineNum":"  369","line":"        __init = __b(__init, *__first);"},
{"lineNum":"  370","line":"        *__result = __init;"},
{"lineNum":"  371","line":"    }"},
{"lineNum":"  372","line":"    return __result;"},
{"lineNum":"  373","line":"}"},
{"lineNum":"  374","line":""},
{"lineNum":"  375","line":"template <class _InputIterator, class _OutputIterator, class _BinaryOp>"},
{"lineNum":"  376","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  377","line":"_OutputIterator inclusive_scan(_InputIterator __first, _InputIterator __last,"},
{"lineNum":"  378","line":"                               _OutputIterator __result, _BinaryOp __b)"},
{"lineNum":"  379","line":"{"},
{"lineNum":"  380","line":"    if (__first != __last) {"},
{"lineNum":"  381","line":"        typename iterator_traits<_InputIterator>::value_type __init = *__first;"},
{"lineNum":"  382","line":"        *__result++ = __init;"},
{"lineNum":"  383","line":"        if (++__first != __last)"},
{"lineNum":"  384","line":"            return _VSTD::inclusive_scan(__first, __last, __result, __b, __init);"},
{"lineNum":"  385","line":"    }"},
{"lineNum":"  386","line":""},
{"lineNum":"  387","line":"    return __result;"},
{"lineNum":"  388","line":"}"},
{"lineNum":"  389","line":""},
{"lineNum":"  390","line":"template <class _InputIterator, class _OutputIterator>"},
{"lineNum":"  391","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  392","line":"_OutputIterator inclusive_scan(_InputIterator __first, _InputIterator __last,"},
{"lineNum":"  393","line":"                               _OutputIterator __result)"},
{"lineNum":"  394","line":"{"},
{"lineNum":"  395","line":"    return _VSTD::inclusive_scan(__first, __last, __result, _VSTD::plus<>());"},
{"lineNum":"  396","line":"}"},
{"lineNum":"  397","line":""},
{"lineNum":"  398","line":"template <class _InputIterator, class _OutputIterator, class _Tp,"},
{"lineNum":"  399","line":"          class _BinaryOp, class _UnaryOp>"},
{"lineNum":"  400","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  401","line":"_OutputIterator"},
{"lineNum":"  402","line":"transform_exclusive_scan(_InputIterator __first, _InputIterator __last,"},
{"lineNum":"  403","line":"                           _OutputIterator __result, _Tp __init,"},
{"lineNum":"  404","line":"                           _BinaryOp __b, _UnaryOp __u)"},
{"lineNum":"  405","line":"{"},
{"lineNum":"  406","line":"    if (__first != __last)"},
{"lineNum":"  407","line":"    {"},
{"lineNum":"  408","line":"        _Tp __saved = __init;"},
{"lineNum":"  409","line":"        do"},
{"lineNum":"  410","line":"        {"},
{"lineNum":"  411","line":"            __init = __b(__init, __u(*__first));"},
{"lineNum":"  412","line":"            *__result = __saved;"},
{"lineNum":"  413","line":"            __saved = __init;"},
{"lineNum":"  414","line":"            ++__result;"},
{"lineNum":"  415","line":"        } while (++__first != __last);"},
{"lineNum":"  416","line":"    }"},
{"lineNum":"  417","line":"    return __result;"},
{"lineNum":"  418","line":"}"},
{"lineNum":"  419","line":""},
{"lineNum":"  420","line":"template <class _InputIterator, class _OutputIterator, class _Tp, class _BinaryOp, class _UnaryOp>"},
{"lineNum":"  421","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  422","line":"_OutputIterator"},
{"lineNum":"  423","line":"transform_inclusive_scan(_InputIterator __first, _InputIterator __last,"},
{"lineNum":"  424","line":"                           _OutputIterator __result, _BinaryOp __b, _UnaryOp __u, _Tp __init)"},
{"lineNum":"  425","line":"{"},
{"lineNum":"  426","line":"    for (; __first != __last; ++__first, (void) ++__result) {"},
{"lineNum":"  427","line":"        __init = __b(__init, __u(*__first));"},
{"lineNum":"  428","line":"        *__result = __init;"},
{"lineNum":"  429","line":"        }"},
{"lineNum":"  430","line":""},
{"lineNum":"  431","line":"    return __result;"},
{"lineNum":"  432","line":"}"},
{"lineNum":"  433","line":""},
{"lineNum":"  434","line":"template <class _InputIterator, class _OutputIterator, class _BinaryOp, class _UnaryOp>"},
{"lineNum":"  435","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  436","line":"_OutputIterator"},
{"lineNum":"  437","line":"transform_inclusive_scan(_InputIterator __first, _InputIterator __last,"},
{"lineNum":"  438","line":"                               _OutputIterator __result, _BinaryOp __b, _UnaryOp __u)"},
{"lineNum":"  439","line":"{"},
{"lineNum":"  440","line":"    if (__first != __last) {"},
{"lineNum":"  441","line":"        typename iterator_traits<_InputIterator>::value_type __init = __u(*__first);"},
{"lineNum":"  442","line":"        *__result++ = __init;"},
{"lineNum":"  443","line":"        if (++__first != __last)"},
{"lineNum":"  444","line":"            return _VSTD::transform_inclusive_scan(__first, __last, __result, __b, __u, __init);"},
{"lineNum":"  445","line":"    }"},
{"lineNum":"  446","line":""},
{"lineNum":"  447","line":"    return __result;"},
{"lineNum":"  448","line":"}"},
{"lineNum":"  449","line":"#endif"},
{"lineNum":"  450","line":""},
{"lineNum":"  451","line":"template <class _InputIterator, class _OutputIterator>"},
{"lineNum":"  452","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  453","line":"_OutputIterator"},
{"lineNum":"  454","line":"adjacent_difference(_InputIterator __first, _InputIterator __last, _OutputIterator __result)"},
{"lineNum":"  455","line":"{"},
{"lineNum":"  456","line":"    if (__first != __last)"},
{"lineNum":"  457","line":"    {"},
{"lineNum":"  458","line":"        typename iterator_traits<_InputIterator>::value_type __acc(*__first);"},
{"lineNum":"  459","line":"        *__result = __acc;"},
{"lineNum":"  460","line":"        for (++__first, (void) ++__result; __first != __last; ++__first, (void) ++__result)"},
{"lineNum":"  461","line":"        {"},
{"lineNum":"  462","line":"            typename iterator_traits<_InputIterator>::value_type __val(*__first);"},
{"lineNum":"  463","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":"  464","line":"            *__result = __val - _VSTD::move(__acc);"},
{"lineNum":"  465","line":"#else"},
{"lineNum":"  466","line":"            *__result = __val - __acc;"},
{"lineNum":"  467","line":"#endif"},
{"lineNum":"  468","line":"            __acc = _VSTD::move(__val);"},
{"lineNum":"  469","line":"        }"},
{"lineNum":"  470","line":"    }"},
{"lineNum":"  471","line":"    return __result;"},
{"lineNum":"  472","line":"}"},
{"lineNum":"  473","line":""},
{"lineNum":"  474","line":"template <class _InputIterator, class _OutputIterator, class _BinaryOperation>"},
{"lineNum":"  475","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  476","line":"_OutputIterator"},
{"lineNum":"  477","line":"adjacent_difference(_InputIterator __first, _InputIterator __last, _OutputIterator __result,"},
{"lineNum":"  478","line":"                      _BinaryOperation __binary_op)"},
{"lineNum":"  479","line":"{"},
{"lineNum":"  480","line":"    if (__first != __last)"},
{"lineNum":"  481","line":"    {"},
{"lineNum":"  482","line":"        typename iterator_traits<_InputIterator>::value_type __acc(*__first);"},
{"lineNum":"  483","line":"        *__result = __acc;"},
{"lineNum":"  484","line":"        for (++__first, (void) ++__result; __first != __last; ++__first, (void) ++__result)"},
{"lineNum":"  485","line":"        {"},
{"lineNum":"  486","line":"            typename iterator_traits<_InputIterator>::value_type __val(*__first);"},
{"lineNum":"  487","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":"  488","line":"            *__result = __binary_op(__val, _VSTD::move(__acc));"},
{"lineNum":"  489","line":"#else"},
{"lineNum":"  490","line":"            *__result = __binary_op(__val, __acc);"},
{"lineNum":"  491","line":"#endif"},
{"lineNum":"  492","line":"            __acc = _VSTD::move(__val);"},
{"lineNum":"  493","line":"        }"},
{"lineNum":"  494","line":"    }"},
{"lineNum":"  495","line":"    return __result;"},
{"lineNum":"  496","line":"}"},
{"lineNum":"  497","line":""},
{"lineNum":"  498","line":"template <class _ForwardIterator, class _Tp>"},
{"lineNum":"  499","line":"_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  500","line":"void"},
{"lineNum":"  501","line":"iota(_ForwardIterator __first, _ForwardIterator __last, _Tp __value_)"},
{"lineNum":"  502","line":"{"},
{"lineNum":"  503","line":"    for (; __first != __last; ++__first, (void) ++__value_)","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  504","line":"        *__first = __value_;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  505","line":"}"},
{"lineNum":"  506","line":""},
{"lineNum":"  507","line":""},
{"lineNum":"  508","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":"  509","line":"template <typename _Result, typename _Source, bool _IsSigned = is_signed<_Source>::value> struct __ct_abs;"},
{"lineNum":"  510","line":""},
{"lineNum":"  511","line":"template <typename _Result, typename _Source>"},
{"lineNum":"  512","line":"struct __ct_abs<_Result, _Source, true> {"},
{"lineNum":"  513","line":"    _LIBCPP_CONSTEXPR _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  514","line":"    _Result operator()(_Source __t) const noexcept"},
{"lineNum":"  515","line":"    {"},
{"lineNum":"  516","line":"        if (__t >= 0) return __t;"},
{"lineNum":"  517","line":"        if (__t == numeric_limits<_Source>::min()) return -static_cast<_Result>(__t);"},
{"lineNum":"  518","line":"        return -__t;"},
{"lineNum":"  519","line":"    }"},
{"lineNum":"  520","line":"};"},
{"lineNum":"  521","line":""},
{"lineNum":"  522","line":"template <typename _Result, typename _Source>"},
{"lineNum":"  523","line":"struct __ct_abs<_Result, _Source, false> {"},
{"lineNum":"  524","line":"    _LIBCPP_CONSTEXPR _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  525","line":"    _Result operator()(_Source __t) const noexcept { return __t; }"},
{"lineNum":"  526","line":"};"},
{"lineNum":"  527","line":""},
{"lineNum":"  528","line":""},
{"lineNum":"  529","line":"template<class _Tp>"},
{"lineNum":"  530","line":"_LIBCPP_CONSTEXPR _LIBCPP_HIDDEN"},
{"lineNum":"  531","line":"_Tp __gcd(_Tp __m, _Tp __n)"},
{"lineNum":"  532","line":"{"},
{"lineNum":"  533","line":"    static_assert((!is_signed<_Tp>::value), \"\");"},
{"lineNum":"  534","line":"    return __n == 0 ? __m : _VSTD::__gcd<_Tp>(__n, __m % __n);"},
{"lineNum":"  535","line":"}"},
{"lineNum":"  536","line":""},
{"lineNum":"  537","line":""},
{"lineNum":"  538","line":"template<class _Tp, class _Up>"},
{"lineNum":"  539","line":"_LIBCPP_CONSTEXPR _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  540","line":"common_type_t<_Tp,_Up>"},
{"lineNum":"  541","line":"gcd(_Tp __m, _Up __n)"},
{"lineNum":"  542","line":"{"},
{"lineNum":"  543","line":"    static_assert((is_integral<_Tp>::value && is_integral<_Up>::value), \"Arguments to gcd must be integer types\");"},
{"lineNum":"  544","line":"    static_assert((!is_same<typename remove_cv<_Tp>::type, bool>::value), \"First argument to gcd cannot be bool\" );"},
{"lineNum":"  545","line":"    static_assert((!is_same<typename remove_cv<_Up>::type, bool>::value), \"Second argument to gcd cannot be bool\" );"},
{"lineNum":"  546","line":"    using _Rp = common_type_t<_Tp,_Up>;"},
{"lineNum":"  547","line":"    using _Wp = make_unsigned_t<_Rp>;"},
{"lineNum":"  548","line":"    return static_cast<_Rp>(_VSTD::__gcd("},
{"lineNum":"  549","line":"        static_cast<_Wp>(__ct_abs<_Rp, _Tp>()(__m)),"},
{"lineNum":"  550","line":"        static_cast<_Wp>(__ct_abs<_Rp, _Up>()(__n))));"},
{"lineNum":"  551","line":"}"},
{"lineNum":"  552","line":""},
{"lineNum":"  553","line":"template<class _Tp, class _Up>"},
{"lineNum":"  554","line":"_LIBCPP_CONSTEXPR _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  555","line":"common_type_t<_Tp,_Up>"},
{"lineNum":"  556","line":"lcm(_Tp __m, _Up __n)"},
{"lineNum":"  557","line":"{"},
{"lineNum":"  558","line":"    static_assert((is_integral<_Tp>::value && is_integral<_Up>::value), \"Arguments to lcm must be integer types\");"},
{"lineNum":"  559","line":"    static_assert((!is_same<typename remove_cv<_Tp>::type, bool>::value), \"First argument to lcm cannot be bool\" );"},
{"lineNum":"  560","line":"    static_assert((!is_same<typename remove_cv<_Up>::type, bool>::value), \"Second argument to lcm cannot be bool\" );"},
{"lineNum":"  561","line":"    if (__m == 0 || __n == 0)"},
{"lineNum":"  562","line":"        return 0;"},
{"lineNum":"  563","line":""},
{"lineNum":"  564","line":"    using _Rp = common_type_t<_Tp,_Up>;"},
{"lineNum":"  565","line":"    _Rp __val1 = __ct_abs<_Rp, _Tp>()(__m) / _VSTD::gcd(__m, __n);"},
{"lineNum":"  566","line":"    _Rp __val2 = __ct_abs<_Rp, _Up>()(__n);"},
{"lineNum":"  567","line":"    _LIBCPP_ASSERT((numeric_limits<_Rp>::max() / __val1 > __val2), \"Overflow in lcm\");"},
{"lineNum":"  568","line":"    return __val1 * __val2;"},
{"lineNum":"  569","line":"}"},
{"lineNum":"  570","line":""},
{"lineNum":"  571","line":"#endif /* _LIBCPP_STD_VER > 14 */"},
{"lineNum":"  572","line":""},
{"lineNum":"  573","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":"  574","line":"template <class _Tp>"},
{"lineNum":"  575","line":"_LIBCPP_INLINE_VISIBILITY constexpr"},
{"lineNum":"  576","line":"enable_if_t<is_integral_v<_Tp> && !is_same_v<bool, _Tp> && !is_null_pointer_v<_Tp>, _Tp>"},
{"lineNum":"  577","line":"midpoint(_Tp __a, _Tp __b) noexcept"},
{"lineNum":"  578","line":"_LIBCPP_DISABLE_UBSAN_UNSIGNED_INTEGER_CHECK"},
{"lineNum":"  579","line":"{"},
{"lineNum":"  580","line":"    using _Up = make_unsigned_t<_Tp>;"},
{"lineNum":"  581","line":"    constexpr _Up __bitshift = numeric_limits<_Up>::digits - 1;"},
{"lineNum":"  582","line":""},
{"lineNum":"  583","line":"    _Up __diff = _Up(__b) - _Up(__a);"},
{"lineNum":"  584","line":"    _Up __sign_bit = __b < __a;"},
{"lineNum":"  585","line":""},
{"lineNum":"  586","line":"    _Up __half_diff = (__diff / 2) + (__sign_bit << __bitshift) + (__sign_bit & __diff);"},
{"lineNum":"  587","line":""},
{"lineNum":"  588","line":"    return __a + __half_diff;"},
{"lineNum":"  589","line":"}"},
{"lineNum":"  590","line":""},
{"lineNum":"  591","line":""},
{"lineNum":"  592","line":"template <class _TPtr>"},
{"lineNum":"  593","line":"_LIBCPP_INLINE_VISIBILITY constexpr"},
{"lineNum":"  594","line":"enable_if_t<is_pointer_v<_TPtr>"},
{"lineNum":"  595","line":"             && is_object_v<remove_pointer_t<_TPtr>>"},
{"lineNum":"  596","line":"             && ! is_void_v<remove_pointer_t<_TPtr>>"},
{"lineNum":"  597","line":"             && (sizeof(remove_pointer_t<_TPtr>) > 0), _TPtr>"},
{"lineNum":"  598","line":"midpoint(_TPtr __a, _TPtr __b) noexcept"},
{"lineNum":"  599","line":"{"},
{"lineNum":"  600","line":"    return __a + _VSTD::midpoint(ptrdiff_t(0), __b - __a);"},
{"lineNum":"  601","line":"}"},
{"lineNum":"  602","line":""},
{"lineNum":"  603","line":""},
{"lineNum":"  604","line":"template <typename _Tp>"},
{"lineNum":"  605","line":"constexpr int __sign(_Tp __val) {"},
{"lineNum":"  606","line":"    return (_Tp(0) < __val) - (__val < _Tp(0));"},
{"lineNum":"  607","line":"}"},
{"lineNum":"  608","line":""},
{"lineNum":"  609","line":"template <typename _Fp>"},
{"lineNum":"  610","line":"constexpr _Fp __fp_abs(_Fp __f) { return __f >= 0 ? __f : -__f; }"},
{"lineNum":"  611","line":""},
{"lineNum":"  612","line":"template <class _Fp>"},
{"lineNum":"  613","line":"_LIBCPP_INLINE_VISIBILITY constexpr"},
{"lineNum":"  614","line":"enable_if_t<is_floating_point_v<_Fp>, _Fp>"},
{"lineNum":"  615","line":"midpoint(_Fp __a, _Fp __b) noexcept"},
{"lineNum":"  616","line":"{"},
{"lineNum":"  617","line":"    constexpr _Fp __lo = numeric_limits<_Fp>::min()*2;"},
{"lineNum":"  618","line":"    constexpr _Fp __hi = numeric_limits<_Fp>::max()/2;"},
{"lineNum":"  619","line":"    return __fp_abs(__a) <= __hi && __fp_abs(__b) <= __hi ?  // typical case: overflow is impossible"},
{"lineNum":"  620","line":"      (__a + __b)/2 :                                        // always correctly rounded"},
{"lineNum":"  621","line":"      __fp_abs(__a) < __lo ? __a + __b/2 :                   // not safe to halve a"},
{"lineNum":"  622","line":"      __fp_abs(__b) < __lo ? __a/2 + __b :                   // not safe to halve b"},
{"lineNum":"  623","line":"      __a/2 + __b/2;                                         // otherwise correctly rounded"},
{"lineNum":"  624","line":"}"},
{"lineNum":"  625","line":""},
{"lineNum":"  626","line":"#endif // _LIBCPP_STD_VER > 17"},
{"lineNum":"  627","line":""},
{"lineNum":"  628","line":"_LIBCPP_END_NAMESPACE_STD"},
{"lineNum":"  629","line":""},
{"lineNum":"  630","line":"_LIBCPP_POP_MACROS"},
{"lineNum":"  631","line":""},
{"lineNum":"  632","line":"#if defined(_LIBCPP_HAS_PARALLEL_ALGORITHMS) && _LIBCPP_STD_VER >= 17"},
{"lineNum":"  633","line":"#   include <__pstl_numeric>"},
{"lineNum":"  634","line":"#endif"},
{"lineNum":"  635","line":""},
{"lineNum":"  636","line":"#endif // _LIBCPP_NUMERIC"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 2, "covered" : 0,};
var merged_data = [];
