var data = {lines:[
{"lineNum":"    1","line":"// This file is part of Eigen, a lightweight C++ template library"},
{"lineNum":"    2","line":"// for linear algebra."},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Copyright (C) 2009 Gael Guennebaud <gael.guennebaud@inria.fr>"},
{"lineNum":"    5","line":"// Copyright (C) 2010 Benoit Jacob <jacob.benoit.1@gmail.com>"},
{"lineNum":"    6","line":"//"},
{"lineNum":"    7","line":"// This Source Code Form is subject to the terms of the Mozilla"},
{"lineNum":"    8","line":"// Public License v. 2.0. If a copy of the MPL was not distributed"},
{"lineNum":"    9","line":"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/."},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"#ifndef EIGEN_HOUSEHOLDER_SEQUENCE_H"},
{"lineNum":"   12","line":"#define EIGEN_HOUSEHOLDER_SEQUENCE_H"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"#include \"./InternalHeaderCheck.h\""},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"namespace Eigen {"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"/** \\ingroup Householder_Module"},
{"lineNum":"   19","line":"  * \\householder_module"},
{"lineNum":"   20","line":"  * \\class HouseholderSequence"},
{"lineNum":"   21","line":"  * \\brief Sequence of Householder reflections acting on subspaces with decreasing size"},
{"lineNum":"   22","line":"  * \\tparam VectorsType type of matrix containing the Householder vectors"},
{"lineNum":"   23","line":"  * \\tparam CoeffsType  type of vector containing the Householder coefficients"},
{"lineNum":"   24","line":"  * \\tparam Side        either OnTheLeft (the default) or OnTheRight"},
{"lineNum":"   25","line":"  *"},
{"lineNum":"   26","line":"  * This class represents a product sequence of Householder reflections where the first Householder reflection"},
{"lineNum":"   27","line":"  * acts on the whole space, the second Householder reflection leaves the one-dimensional subspace spanned by"},
{"lineNum":"   28","line":"  * the first unit vector invariant, the third Householder reflection leaves the two-dimensional subspace"},
{"lineNum":"   29","line":"  * spanned by the first two unit vectors invariant, and so on up to the last reflection which leaves all but"},
{"lineNum":"   30","line":"  * one dimensions invariant and acts only on the last dimension. Such sequences of Householder reflections"},
{"lineNum":"   31","line":"  * are used in several algorithms to zero out certain parts of a matrix. Indeed, the methods"},
{"lineNum":"   32","line":"  * HessenbergDecomposition::matrixQ(), Tridiagonalization::matrixQ(), HouseholderQR::householderQ(),"},
{"lineNum":"   33","line":"  * and ColPivHouseholderQR::householderQ() all return a %HouseholderSequence."},
{"lineNum":"   34","line":"  *"},
{"lineNum":"   35","line":"  * More precisely, the class %HouseholderSequence represents an \\f$ n \\times n \\f$ matrix \\f$ H \\f$ of the"},
{"lineNum":"   36","line":"  * form \\f$ H = \\prod_{i=0}^{n-1} H_i \\f$ where the i-th Householder reflection is \\f$ H_i = I - h_i v_i"},
{"lineNum":"   37","line":"  * v_i^* \\f$. The i-th Householder coefficient \\f$ h_i \\f$ is a scalar and the i-th Householder vector \\f$"},
{"lineNum":"   38","line":"  * v_i \\f$ is a vector of the form"},
{"lineNum":"   39","line":"  * \\f["},
{"lineNum":"   40","line":"  * v_i = [\\underbrace{0, \\ldots, 0}_{i-1\\mbox{ zeros}}, 1, \\underbrace{*, \\ldots,*}_{n-i\\mbox{ arbitrary entries}} ]."},
{"lineNum":"   41","line":"  * \\f]"},
{"lineNum":"   42","line":"  * The last \\f$ n-i \\f$ entries of \\f$ v_i \\f$ are called the essential part of the Householder vector."},
{"lineNum":"   43","line":"  *"},
{"lineNum":"   44","line":"  * Typical usages are listed below, where H is a HouseholderSequence:"},
{"lineNum":"   45","line":"  * \\code"},
{"lineNum":"   46","line":"  * A.applyOnTheRight(H);             // A = A * H"},
{"lineNum":"   47","line":"  * A.applyOnTheLeft(H);              // A = H * A"},
{"lineNum":"   48","line":"  * A.applyOnTheRight(H.adjoint());   // A = A * H^*"},
{"lineNum":"   49","line":"  * A.applyOnTheLeft(H.adjoint());    // A = H^* * A"},
{"lineNum":"   50","line":"  * MatrixXd Q = H;                   // conversion to a dense matrix"},
{"lineNum":"   51","line":"  * \\endcode"},
{"lineNum":"   52","line":"  * In addition to the adjoint, you can also apply the inverse (=adjoint), the transpose, and the conjugate operators."},
{"lineNum":"   53","line":"  *"},
{"lineNum":"   54","line":"  * See the documentation for HouseholderSequence(const VectorsType&, const CoeffsType&) for an example."},
{"lineNum":"   55","line":"  *"},
{"lineNum":"   56","line":"  * \\sa MatrixBase::applyOnTheLeft(), MatrixBase::applyOnTheRight()"},
{"lineNum":"   57","line":"  */"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"namespace internal {"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"template<typename VectorsType, typename CoeffsType, int Side>"},
{"lineNum":"   62","line":"struct traits<HouseholderSequence<VectorsType,CoeffsType,Side> >"},
{"lineNum":"   63","line":"{"},
{"lineNum":"   64","line":"  typedef typename VectorsType::Scalar Scalar;"},
{"lineNum":"   65","line":"  typedef typename VectorsType::StorageIndex StorageIndex;"},
{"lineNum":"   66","line":"  typedef typename VectorsType::StorageKind StorageKind;"},
{"lineNum":"   67","line":"  enum {"},
{"lineNum":"   68","line":"    RowsAtCompileTime = Side==OnTheLeft ? traits<VectorsType>::RowsAtCompileTime"},
{"lineNum":"   69","line":"                                        : traits<VectorsType>::ColsAtCompileTime,"},
{"lineNum":"   70","line":"    ColsAtCompileTime = RowsAtCompileTime,"},
{"lineNum":"   71","line":"    MaxRowsAtCompileTime = Side==OnTheLeft ? traits<VectorsType>::MaxRowsAtCompileTime"},
{"lineNum":"   72","line":"                                           : traits<VectorsType>::MaxColsAtCompileTime,"},
{"lineNum":"   73","line":"    MaxColsAtCompileTime = MaxRowsAtCompileTime,"},
{"lineNum":"   74","line":"    Flags = 0"},
{"lineNum":"   75","line":"  };"},
{"lineNum":"   76","line":"};"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"struct HouseholderSequenceShape {};"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"template<typename VectorsType, typename CoeffsType, int Side>"},
{"lineNum":"   81","line":"struct evaluator_traits<HouseholderSequence<VectorsType,CoeffsType,Side> >"},
{"lineNum":"   82","line":"  : public evaluator_traits_base<HouseholderSequence<VectorsType,CoeffsType,Side> >"},
{"lineNum":"   83","line":"{"},
{"lineNum":"   84","line":"  typedef HouseholderSequenceShape Shape;"},
{"lineNum":"   85","line":"};"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"template<typename VectorsType, typename CoeffsType, int Side>"},
{"lineNum":"   88","line":"struct hseq_side_dependent_impl"},
{"lineNum":"   89","line":"{"},
{"lineNum":"   90","line":"  typedef Block<const VectorsType, Dynamic, 1> EssentialVectorType;"},
{"lineNum":"   91","line":"  typedef HouseholderSequence<VectorsType, CoeffsType, OnTheLeft> HouseholderSequenceType;"},
{"lineNum":"   92","line":"  static EIGEN_DEVICE_FUNC inline const EssentialVectorType essentialVector(const HouseholderSequenceType& h, Index k)"},
{"lineNum":"   93","line":"  {"},
{"lineNum":"   94","line":"    Index start = k+1+h.m_shift;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   95","line":"    return Block<const VectorsType,Dynamic,1>(h.m_vectors, start, k, h.rows()-start, 1);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   96","line":"  }"},
{"lineNum":"   97","line":"};"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"template<typename VectorsType, typename CoeffsType>"},
{"lineNum":"  100","line":"struct hseq_side_dependent_impl<VectorsType, CoeffsType, OnTheRight>"},
{"lineNum":"  101","line":"{"},
{"lineNum":"  102","line":"  typedef Transpose<Block<const VectorsType, 1, Dynamic> > EssentialVectorType;"},
{"lineNum":"  103","line":"  typedef HouseholderSequence<VectorsType, CoeffsType, OnTheRight> HouseholderSequenceType;"},
{"lineNum":"  104","line":"  static inline const EssentialVectorType essentialVector(const HouseholderSequenceType& h, Index k)"},
{"lineNum":"  105","line":"  {"},
{"lineNum":"  106","line":"    Index start = k+1+h.m_shift;"},
{"lineNum":"  107","line":"    return Block<const VectorsType,1,Dynamic>(h.m_vectors, k, start, 1, h.rows()-start).transpose();"},
{"lineNum":"  108","line":"  }"},
{"lineNum":"  109","line":"};"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"template<typename OtherScalarType, typename MatrixType> struct matrix_type_times_scalar_type"},
{"lineNum":"  112","line":"{"},
{"lineNum":"  113","line":"  typedef typename ScalarBinaryOpTraits<OtherScalarType, typename MatrixType::Scalar>::ReturnType"},
{"lineNum":"  114","line":"    ResultScalar;"},
{"lineNum":"  115","line":"  typedef Matrix<ResultScalar, MatrixType::RowsAtCompileTime, MatrixType::ColsAtCompileTime,"},
{"lineNum":"  116","line":"                 0, MatrixType::MaxRowsAtCompileTime, MatrixType::MaxColsAtCompileTime> Type;"},
{"lineNum":"  117","line":"};"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"} // end namespace internal"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"template<typename VectorsType, typename CoeffsType, int Side> class HouseholderSequence"},
{"lineNum":"  122","line":"  : public EigenBase<HouseholderSequence<VectorsType,CoeffsType,Side> >"},
{"lineNum":"  123","line":"{"},
{"lineNum":"  124","line":"    typedef typename internal::hseq_side_dependent_impl<VectorsType,CoeffsType,Side>::EssentialVectorType EssentialVectorType;"},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"  public:"},
{"lineNum":"  127","line":"    enum {"},
{"lineNum":"  128","line":"      RowsAtCompileTime = internal::traits<HouseholderSequence>::RowsAtCompileTime,"},
{"lineNum":"  129","line":"      ColsAtCompileTime = internal::traits<HouseholderSequence>::ColsAtCompileTime,"},
{"lineNum":"  130","line":"      MaxRowsAtCompileTime = internal::traits<HouseholderSequence>::MaxRowsAtCompileTime,"},
{"lineNum":"  131","line":"      MaxColsAtCompileTime = internal::traits<HouseholderSequence>::MaxColsAtCompileTime"},
{"lineNum":"  132","line":"    };"},
{"lineNum":"  133","line":"    typedef typename internal::traits<HouseholderSequence>::Scalar Scalar;"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"    typedef HouseholderSequence<"},
{"lineNum":"  136","line":"      typename internal::conditional<NumTraits<Scalar>::IsComplex,"},
{"lineNum":"  137","line":"        typename internal::remove_all<typename VectorsType::ConjugateReturnType>::type,"},
{"lineNum":"  138","line":"        VectorsType>::type,"},
{"lineNum":"  139","line":"      typename internal::conditional<NumTraits<Scalar>::IsComplex,"},
{"lineNum":"  140","line":"        typename internal::remove_all<typename CoeffsType::ConjugateReturnType>::type,"},
{"lineNum":"  141","line":"        CoeffsType>::type,"},
{"lineNum":"  142","line":"      Side"},
{"lineNum":"  143","line":"    > ConjugateReturnType;"},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"    typedef HouseholderSequence<"},
{"lineNum":"  146","line":"      VectorsType,"},
{"lineNum":"  147","line":"      typename internal::conditional<NumTraits<Scalar>::IsComplex,"},
{"lineNum":"  148","line":"        typename internal::remove_all<typename CoeffsType::ConjugateReturnType>::type,"},
{"lineNum":"  149","line":"        CoeffsType>::type,"},
{"lineNum":"  150","line":"      Side"},
{"lineNum":"  151","line":"    > AdjointReturnType;"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"    typedef HouseholderSequence<"},
{"lineNum":"  154","line":"      typename internal::conditional<NumTraits<Scalar>::IsComplex,"},
{"lineNum":"  155","line":"        typename internal::remove_all<typename VectorsType::ConjugateReturnType>::type,"},
{"lineNum":"  156","line":"        VectorsType>::type,"},
{"lineNum":"  157","line":"      CoeffsType,"},
{"lineNum":"  158","line":"      Side"},
{"lineNum":"  159","line":"    > TransposeReturnType;"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"    typedef HouseholderSequence<"},
{"lineNum":"  162","line":"      typename internal::add_const<VectorsType>::type,"},
{"lineNum":"  163","line":"      typename internal::add_const<CoeffsType>::type,"},
{"lineNum":"  164","line":"      Side"},
{"lineNum":"  165","line":"    > ConstHouseholderSequence;"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"    /** \\brief Constructor."},
{"lineNum":"  168","line":"      * \\param[in]  v      %Matrix containing the essential parts of the Householder vectors"},
{"lineNum":"  169","line":"      * \\param[in]  h      Vector containing the Householder coefficients"},
{"lineNum":"  170","line":"      *"},
{"lineNum":"  171","line":"      * Constructs the Householder sequence with coefficients given by \\p h and vectors given by \\p v. The"},
{"lineNum":"  172","line":"      * i-th Householder coefficient \\f$ h_i \\f$ is given by \\p h(i) and the essential part of the i-th"},
{"lineNum":"  173","line":"      * Householder vector \\f$ v_i \\f$ is given by \\p v(k,i) with \\p k > \\p i (the subdiagonal part of the"},
{"lineNum":"  174","line":"      * i-th column). If \\p v has fewer columns than rows, then the Householder sequence contains as many"},
{"lineNum":"  175","line":"      * Householder reflections as there are columns."},
{"lineNum":"  176","line":"      *"},
{"lineNum":"  177","line":"      * \\note The %HouseholderSequence object stores \\p v and \\p h by reference."},
{"lineNum":"  178","line":"      *"},
{"lineNum":"  179","line":"      * Example: \\include HouseholderSequence_HouseholderSequence.cpp"},
{"lineNum":"  180","line":"      * Output: \\verbinclude HouseholderSequence_HouseholderSequence.out"},
{"lineNum":"  181","line":"      *"},
{"lineNum":"  182","line":"      * \\sa setLength(), setShift()"},
{"lineNum":"  183","line":"      */"},
{"lineNum":"  184","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"  185","line":"    HouseholderSequence(const VectorsType& v, const CoeffsType& h)"},
{"lineNum":"  186","line":"      : m_vectors(v), m_coeffs(h), m_reverse(false), m_length(v.diagonalSize()),"},
{"lineNum":"  187","line":"        m_shift(0)"},
{"lineNum":"  188","line":"    {"},
{"lineNum":"  189","line":"    }"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"    /** \\brief Copy constructor. */"},
{"lineNum":"  192","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"  193","line":"    HouseholderSequence(const HouseholderSequence& other)"},
{"lineNum":"  194","line":"      : m_vectors(other.m_vectors),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  195","line":"        m_coeffs(other.m_coeffs),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  196","line":"        m_reverse(other.m_reverse),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  197","line":"        m_length(other.m_length),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  198","line":"        m_shift(other.m_shift)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  199","line":"    {"},
{"lineNum":"  200","line":"    }"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"    /** \\brief Number of rows of transformation viewed as a matrix."},
{"lineNum":"  203","line":"      * \\returns Number of rows"},
{"lineNum":"  204","line":"      * \\details This equals the dimension of the space that the transformation acts on."},
{"lineNum":"  205","line":"      */"},
{"lineNum":"  206","line":"    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR"},
{"lineNum":"  207","line":"    Index rows() const EIGEN_NOEXCEPT { return Side==OnTheLeft ? m_vectors.rows() : m_vectors.cols(); }","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  208","line":""},
{"lineNum":"  209","line":"    /** \\brief Number of columns of transformation viewed as a matrix."},
{"lineNum":"  210","line":"      * \\returns Number of columns"},
{"lineNum":"  211","line":"      * \\details This equals the dimension of the space that the transformation acts on."},
{"lineNum":"  212","line":"      */"},
{"lineNum":"  213","line":"    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR"},
{"lineNum":"  214","line":"    Index cols() const EIGEN_NOEXCEPT { return rows(); }"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"    /** \\brief Essential part of a Householder vector."},
{"lineNum":"  217","line":"      * \\param[in]  k  Index of Householder reflection"},
{"lineNum":"  218","line":"      * \\returns    Vector containing non-trivial entries of k-th Householder vector"},
{"lineNum":"  219","line":"      *"},
{"lineNum":"  220","line":"      * This function returns the essential part of the Householder vector \\f$ v_i \\f$. This is a vector of"},
{"lineNum":"  221","line":"      * length \\f$ n-i \\f$ containing the last \\f$ n-i \\f$ entries of the vector"},
{"lineNum":"  222","line":"      * \\f["},
{"lineNum":"  223","line":"      * v_i = [\\underbrace{0, \\ldots, 0}_{i-1\\mbox{ zeros}}, 1, \\underbrace{*, \\ldots,*}_{n-i\\mbox{ arbitrary entries}} ]."},
{"lineNum":"  224","line":"      * \\f]"},
{"lineNum":"  225","line":"      * The index \\f$ i \\f$ equals \\p k + shift(), corresponding to the k-th column of the matrix \\p v"},
{"lineNum":"  226","line":"      * passed to the constructor."},
{"lineNum":"  227","line":"      *"},
{"lineNum":"  228","line":"      * \\sa setShift(), shift()"},
{"lineNum":"  229","line":"      */"},
{"lineNum":"  230","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"  231","line":"    const EssentialVectorType essentialVector(Index k) const"},
{"lineNum":"  232","line":"    {"},
{"lineNum":"  233","line":"      eigen_assert(k >= 0 && k < m_length);"},
{"lineNum":"  234","line":"      return internal::hseq_side_dependent_impl<VectorsType,CoeffsType,Side>::essentialVector(*this, k);"},
{"lineNum":"  235","line":"    }"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"    /** \\brief %Transpose of the Householder sequence. */"},
{"lineNum":"  238","line":"    TransposeReturnType transpose() const"},
{"lineNum":"  239","line":"    {"},
{"lineNum":"  240","line":"      return TransposeReturnType(m_vectors.conjugate(), m_coeffs)"},
{"lineNum":"  241","line":"              .setReverseFlag(!m_reverse)"},
{"lineNum":"  242","line":"              .setLength(m_length)"},
{"lineNum":"  243","line":"              .setShift(m_shift);"},
{"lineNum":"  244","line":"    }"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"    /** \\brief Complex conjugate of the Householder sequence. */"},
{"lineNum":"  247","line":"    ConjugateReturnType conjugate() const"},
{"lineNum":"  248","line":"    {"},
{"lineNum":"  249","line":"      return ConjugateReturnType(m_vectors.conjugate(), m_coeffs.conjugate())"},
{"lineNum":"  250","line":"             .setReverseFlag(m_reverse)"},
{"lineNum":"  251","line":"             .setLength(m_length)"},
{"lineNum":"  252","line":"             .setShift(m_shift);"},
{"lineNum":"  253","line":"    }"},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"    /** \\returns an expression of the complex conjugate of \\c *this if Cond==true,"},
{"lineNum":"  256","line":"     *           returns \\c *this otherwise."},
{"lineNum":"  257","line":"     */"},
{"lineNum":"  258","line":"    template<bool Cond>"},
{"lineNum":"  259","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"  260","line":"    inline typename internal::conditional<Cond,ConjugateReturnType,ConstHouseholderSequence>::type"},
{"lineNum":"  261","line":"    conjugateIf() const"},
{"lineNum":"  262","line":"    {"},
{"lineNum":"  263","line":"      typedef typename internal::conditional<Cond,ConjugateReturnType,ConstHouseholderSequence>::type ReturnType;"},
{"lineNum":"  264","line":"      return ReturnType(m_vectors.template conjugateIf<Cond>(), m_coeffs.template conjugateIf<Cond>());"},
{"lineNum":"  265","line":"    }"},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"    /** \\brief Adjoint (conjugate transpose) of the Householder sequence. */"},
{"lineNum":"  268","line":"    AdjointReturnType adjoint() const"},
{"lineNum":"  269","line":"    {"},
{"lineNum":"  270","line":"      return AdjointReturnType(m_vectors, m_coeffs.conjugate())"},
{"lineNum":"  271","line":"              .setReverseFlag(!m_reverse)"},
{"lineNum":"  272","line":"              .setLength(m_length)"},
{"lineNum":"  273","line":"              .setShift(m_shift);"},
{"lineNum":"  274","line":"    }"},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"    /** \\brief Inverse of the Householder sequence (equals the adjoint). */"},
{"lineNum":"  277","line":"    AdjointReturnType inverse() const { return adjoint(); }"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"    /** \\internal */"},
{"lineNum":"  280","line":"    template<typename DestType>"},
{"lineNum":"  281","line":"    inline EIGEN_DEVICE_FUNC"},
{"lineNum":"  282","line":"    void evalTo(DestType& dst) const"},
{"lineNum":"  283","line":"    {"},
{"lineNum":"  284","line":"      Matrix<Scalar, DestType::RowsAtCompileTime, 1,"},
{"lineNum":"  285","line":"             AutoAlign|ColMajor, DestType::MaxRowsAtCompileTime, 1> workspace(rows());"},
{"lineNum":"  286","line":"      evalTo(dst, workspace);"},
{"lineNum":"  287","line":"    }"},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"    /** \\internal */"},
{"lineNum":"  290","line":"    template<typename Dest, typename Workspace>"},
{"lineNum":"  291","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"  292","line":"    void evalTo(Dest& dst, Workspace& workspace) const"},
{"lineNum":"  293","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  294","line":"      workspace.resize(rows());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  295","line":"      Index vecs = m_length;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  296","line":"      if(internal::is_same_dense(dst,m_vectors))","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  297","line":"      {"},
{"lineNum":"  298","line":"        // in-place"},
{"lineNum":"  299","line":"        dst.diagonal().setOnes();"},
{"lineNum":"  300","line":"        dst.template triangularView<StrictlyUpper>().setZero();"},
{"lineNum":"  301","line":"        for(Index k = vecs-1; k >= 0; --k)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  302","line":"        {"},
{"lineNum":"  303","line":"          Index cornerSize = rows() - k - m_shift;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  304","line":"          if(m_reverse)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  305","line":"            dst.bottomRightCorner(cornerSize, cornerSize)"},
{"lineNum":"  306","line":"               .applyHouseholderOnTheRight(essentialVector(k), m_coeffs.coeff(k), workspace.data());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  307","line":"          else"},
{"lineNum":"  308","line":"            dst.bottomRightCorner(cornerSize, cornerSize)"},
{"lineNum":"  309","line":"               .applyHouseholderOnTheLeft(essentialVector(k), m_coeffs.coeff(k), workspace.data());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  310","line":""},
{"lineNum":"  311","line":"          // clear the off diagonal vector"},
{"lineNum":"  312","line":"          dst.col(k).tail(rows()-k-1).setZero();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  313","line":"        }"},
{"lineNum":"  314","line":"        // clear the remaining columns if needed"},
{"lineNum":"  315","line":"        for(Index k = 0; k<cols()-vecs ; ++k)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  316","line":"          dst.col(k).tail(rows()-k-1).setZero();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  317","line":"      }"},
{"lineNum":"  318","line":"      else if(m_length>BlockSize)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  319","line":"      {"},
{"lineNum":"  320","line":"        dst.setIdentity(rows(), rows());"},
{"lineNum":"  321","line":"        if(m_reverse)"},
{"lineNum":"  322","line":"          applyThisOnTheLeft(dst,workspace,true);"},
{"lineNum":"  323","line":"        else"},
{"lineNum":"  324","line":"          applyThisOnTheLeft(dst,workspace,true);"},
{"lineNum":"  325","line":"      }"},
{"lineNum":"  326","line":"      else"},
{"lineNum":"  327","line":"      {"},
{"lineNum":"  328","line":"        dst.setIdentity(rows(), rows());"},
{"lineNum":"  329","line":"        for(Index k = vecs-1; k >= 0; --k)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  330","line":"        {"},
{"lineNum":"  331","line":"          Index cornerSize = rows() - k - m_shift;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  332","line":"          if(m_reverse)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  333","line":"            dst.bottomRightCorner(cornerSize, cornerSize)"},
{"lineNum":"  334","line":"               .applyHouseholderOnTheRight(essentialVector(k), m_coeffs.coeff(k), workspace.data());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  335","line":"          else"},
{"lineNum":"  336","line":"            dst.bottomRightCorner(cornerSize, cornerSize)"},
{"lineNum":"  337","line":"               .applyHouseholderOnTheLeft(essentialVector(k), m_coeffs.coeff(k), workspace.data());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  338","line":"        }"},
{"lineNum":"  339","line":"      }"},
{"lineNum":"  340","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  341","line":""},
{"lineNum":"  342","line":"    /** \\internal */"},
{"lineNum":"  343","line":"    template<typename Dest> inline void applyThisOnTheRight(Dest& dst) const"},
{"lineNum":"  344","line":"    {"},
{"lineNum":"  345","line":"      Matrix<Scalar,1,Dest::RowsAtCompileTime,RowMajor,1,Dest::MaxRowsAtCompileTime> workspace(dst.rows());"},
{"lineNum":"  346","line":"      applyThisOnTheRight(dst, workspace);"},
{"lineNum":"  347","line":"    }"},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"    /** \\internal */"},
{"lineNum":"  350","line":"    template<typename Dest, typename Workspace>"},
{"lineNum":"  351","line":"    inline void applyThisOnTheRight(Dest& dst, Workspace& workspace) const"},
{"lineNum":"  352","line":"    {"},
{"lineNum":"  353","line":"      workspace.resize(dst.rows());"},
{"lineNum":"  354","line":"      for(Index k = 0; k < m_length; ++k)"},
{"lineNum":"  355","line":"      {"},
{"lineNum":"  356","line":"        Index actual_k = m_reverse ? m_length-k-1 : k;"},
{"lineNum":"  357","line":"        dst.rightCols(rows()-m_shift-actual_k)"},
{"lineNum":"  358","line":"           .applyHouseholderOnTheRight(essentialVector(actual_k), m_coeffs.coeff(actual_k), workspace.data());"},
{"lineNum":"  359","line":"      }"},
{"lineNum":"  360","line":"    }"},
{"lineNum":"  361","line":""},
{"lineNum":"  362","line":"    /** \\internal */"},
{"lineNum":"  363","line":"    template<typename Dest> inline void applyThisOnTheLeft(Dest& dst, bool inputIsIdentity = false) const"},
{"lineNum":"  364","line":"    {"},
{"lineNum":"  365","line":"      Matrix<Scalar,1,Dest::ColsAtCompileTime,RowMajor,1,Dest::MaxColsAtCompileTime> workspace;"},
{"lineNum":"  366","line":"      applyThisOnTheLeft(dst, workspace, inputIsIdentity);"},
{"lineNum":"  367","line":"    }"},
{"lineNum":"  368","line":""},
{"lineNum":"  369","line":"    /** \\internal */"},
{"lineNum":"  370","line":"    template<typename Dest, typename Workspace>"},
{"lineNum":"  371","line":"    inline void applyThisOnTheLeft(Dest& dst, Workspace& workspace, bool inputIsIdentity = false) const"},
{"lineNum":"  372","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  373","line":"      if(inputIsIdentity && m_reverse)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  374","line":"        inputIsIdentity = false;"},
{"lineNum":"  375","line":"      // if the entries are large enough, then apply the reflectors by block"},
{"lineNum":"  376","line":"      if(m_length>=BlockSize && dst.cols()>1)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  377","line":"      {"},
{"lineNum":"  378","line":"        // Make sure we have at least 2 useful blocks, otherwise it is point-less:"},
{"lineNum":"  379","line":"        Index blockSize = m_length<Index(2*BlockSize) ? (m_length+1)/2 : Index(BlockSize);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  380","line":"        for(Index i = 0; i < m_length; i+=blockSize)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  381","line":"        {"},
{"lineNum":"  382","line":"          Index end = m_reverse ? (std::min)(m_length,i+blockSize) : m_length-i;","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  383","line":"          Index k = m_reverse ? i : (std::max)(Index(0),end-blockSize);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  384","line":"          Index bs = end-k;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  385","line":"          Index start = k + m_shift;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  386","line":""},
{"lineNum":"  387","line":"          typedef Block<typename internal::remove_all<VectorsType>::type,Dynamic,Dynamic> SubVectorsType;"},
{"lineNum":"  388","line":"          SubVectorsType sub_vecs1(m_vectors.const_cast_derived(), Side==OnTheRight ? k : start,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  389","line":"                                                                   Side==OnTheRight ? start : k,"},
{"lineNum":"  390","line":"                                                                   Side==OnTheRight ? bs : m_vectors.rows()-start,","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  391","line":"                                                                   Side==OnTheRight ? m_vectors.cols()-start : bs);"},
{"lineNum":"  392","line":"          typename internal::conditional<Side==OnTheRight, Transpose<SubVectorsType>, SubVectorsType&>::type sub_vecs(sub_vecs1);"},
{"lineNum":"  393","line":""},
{"lineNum":"  394","line":"          Index dstStart = dst.rows()-rows()+m_shift+k;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  395","line":"          Index dstRows  = rows()-m_shift-k;"},
{"lineNum":"  396","line":"          Block<Dest,Dynamic,Dynamic> sub_dst(dst,"},
{"lineNum":"  397","line":"                                              dstStart,"},
{"lineNum":"  398","line":"                                              inputIsIdentity ? dstStart : 0,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  399","line":"                                              dstRows,"},
{"lineNum":"  400","line":"                                              inputIsIdentity ? dstRows : dst.cols());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  401","line":"          apply_block_householder_on_the_left(sub_dst, sub_vecs, m_coeffs.segment(k, bs), !m_reverse);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  402","line":"        }"},
{"lineNum":"  403","line":"      }"},
{"lineNum":"  404","line":"      else"},
{"lineNum":"  405","line":"      {"},
{"lineNum":"  406","line":"        workspace.resize(dst.cols());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  407","line":"        for(Index k = 0; k < m_length; ++k)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  408","line":"        {"},
{"lineNum":"  409","line":"          Index actual_k = m_reverse ? k : m_length-k-1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  410","line":"          Index dstStart = rows()-m_shift-actual_k;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  411","line":"          dst.bottomRightCorner(dstStart, inputIsIdentity ? dstStart : dst.cols())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  412","line":"            .applyHouseholderOnTheLeft(essentialVector(actual_k), m_coeffs.coeff(actual_k), workspace.data());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  413","line":"        }"},
{"lineNum":"  414","line":"      }"},
{"lineNum":"  415","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  416","line":""},
{"lineNum":"  417","line":"    /** \\brief Computes the product of a Householder sequence with a matrix."},
{"lineNum":"  418","line":"      * \\param[in]  other  %Matrix being multiplied."},
{"lineNum":"  419","line":"      * \\returns    Expression object representing the product."},
{"lineNum":"  420","line":"      *"},
{"lineNum":"  421","line":"      * This function computes \\f$ HM \\f$ where \\f$ H \\f$ is the Householder sequence represented by \\p *this"},
{"lineNum":"  422","line":"      * and \\f$ M \\f$ is the matrix \\p other."},
{"lineNum":"  423","line":"      */"},
{"lineNum":"  424","line":"    template<typename OtherDerived>"},
{"lineNum":"  425","line":"    typename internal::matrix_type_times_scalar_type<Scalar, OtherDerived>::Type operator*(const MatrixBase<OtherDerived>& other) const"},
{"lineNum":"  426","line":"    {"},
{"lineNum":"  427","line":"      typename internal::matrix_type_times_scalar_type<Scalar, OtherDerived>::Type"},
{"lineNum":"  428","line":"        res(other.template cast<typename internal::matrix_type_times_scalar_type<Scalar,OtherDerived>::ResultScalar>());"},
{"lineNum":"  429","line":"      applyThisOnTheLeft(res, internal::is_identity<OtherDerived>::value && res.rows()==res.cols());"},
{"lineNum":"  430","line":"      return res;"},
{"lineNum":"  431","line":"    }"},
{"lineNum":"  432","line":""},
{"lineNum":"  433","line":"    template<typename VectorsType_, typename CoeffsType_, int Side_> friend struct internal::hseq_side_dependent_impl;"},
{"lineNum":"  434","line":""},
{"lineNum":"  435","line":"    /** \\brief Sets the length of the Householder sequence."},
{"lineNum":"  436","line":"      * \\param [in]  length  New value for the length."},
{"lineNum":"  437","line":"      *"},
{"lineNum":"  438","line":"      * By default, the length \\f$ n \\f$ of the Householder sequence \\f$ H = H_0 H_1 \\ldots H_{n-1} \\f$ is set"},
{"lineNum":"  439","line":"      * to the number of columns of the matrix \\p v passed to the constructor, or the number of rows if that"},
{"lineNum":"  440","line":"      * is smaller. After this function is called, the length equals \\p length."},
{"lineNum":"  441","line":"      *"},
{"lineNum":"  442","line":"      * \\sa length()"},
{"lineNum":"  443","line":"      */"},
{"lineNum":"  444","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"  445","line":"    HouseholderSequence& setLength(Index length)"},
{"lineNum":"  446","line":"    {"},
{"lineNum":"  447","line":"      m_length = length;"},
{"lineNum":"  448","line":"      return *this;"},
{"lineNum":"  449","line":"    }"},
{"lineNum":"  450","line":""},
{"lineNum":"  451","line":"    /** \\brief Sets the shift of the Householder sequence."},
{"lineNum":"  452","line":"      * \\param [in]  shift  New value for the shift."},
{"lineNum":"  453","line":"      *"},
{"lineNum":"  454","line":"      * By default, a %HouseholderSequence object represents \\f$ H = H_0 H_1 \\ldots H_{n-1} \\f$ and the i-th"},
{"lineNum":"  455","line":"      * column of the matrix \\p v passed to the constructor corresponds to the i-th Householder"},
{"lineNum":"  456","line":"      * reflection. After this function is called, the object represents \\f$ H = H_{\\mathrm{shift}}"},
{"lineNum":"  457","line":"      * H_{\\mathrm{shift}+1} \\ldots H_{n-1} \\f$ and the i-th column of \\p v corresponds to the (shift+i)-th"},
{"lineNum":"  458","line":"      * Householder reflection."},
{"lineNum":"  459","line":"      *"},
{"lineNum":"  460","line":"      * \\sa shift()"},
{"lineNum":"  461","line":"      */"},
{"lineNum":"  462","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"  463","line":"    HouseholderSequence& setShift(Index shift)"},
{"lineNum":"  464","line":"    {"},
{"lineNum":"  465","line":"      m_shift = shift;"},
{"lineNum":"  466","line":"      return *this;"},
{"lineNum":"  467","line":"    }"},
{"lineNum":"  468","line":""},
{"lineNum":"  469","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"  470","line":"    Index length() const { return m_length; }  /**< \\brief Returns the length of the Householder sequence. */"},
{"lineNum":"  471","line":""},
{"lineNum":"  472","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"  473","line":"    Index shift() const { return m_shift; }    /**< \\brief Returns the shift of the Householder sequence. */"},
{"lineNum":"  474","line":""},
{"lineNum":"  475","line":"    /* Necessary for .adjoint() and .conjugate() */"},
{"lineNum":"  476","line":"    template <typename VectorsType2, typename CoeffsType2, int Side2> friend class HouseholderSequence;"},
{"lineNum":"  477","line":""},
{"lineNum":"  478","line":"  protected:"},
{"lineNum":"  479","line":""},
{"lineNum":"  480","line":"    /** \\internal"},
{"lineNum":"  481","line":"      * \\brief Sets the reverse flag."},
{"lineNum":"  482","line":"      * \\param [in]  reverse  New value of the reverse flag."},
{"lineNum":"  483","line":"      *"},
{"lineNum":"  484","line":"      * By default, the reverse flag is not set. If the reverse flag is set, then this object represents"},
{"lineNum":"  485","line":"      * \\f$ H^r = H_{n-1} \\ldots H_1 H_0 \\f$ instead of \\f$ H = H_0 H_1 \\ldots H_{n-1} \\f$."},
{"lineNum":"  486","line":"      * \\note For real valued HouseholderSequence this is equivalent to transposing \\f$ H \\f$."},
{"lineNum":"  487","line":"      *"},
{"lineNum":"  488","line":"      * \\sa reverseFlag(), transpose(), adjoint()"},
{"lineNum":"  489","line":"      */"},
{"lineNum":"  490","line":"    HouseholderSequence& setReverseFlag(bool reverse)"},
{"lineNum":"  491","line":"    {"},
{"lineNum":"  492","line":"      m_reverse = reverse;"},
{"lineNum":"  493","line":"      return *this;"},
{"lineNum":"  494","line":"    }"},
{"lineNum":"  495","line":""},
{"lineNum":"  496","line":"    bool reverseFlag() const { return m_reverse; }     /**< \\internal \\brief Returns the reverse flag. */"},
{"lineNum":"  497","line":""},
{"lineNum":"  498","line":"    typename VectorsType::Nested m_vectors;"},
{"lineNum":"  499","line":"    typename CoeffsType::Nested m_coeffs;"},
{"lineNum":"  500","line":"    bool m_reverse;"},
{"lineNum":"  501","line":"    Index m_length;"},
{"lineNum":"  502","line":"    Index m_shift;"},
{"lineNum":"  503","line":"    enum { BlockSize = 48 };"},
{"lineNum":"  504","line":"};"},
{"lineNum":"  505","line":""},
{"lineNum":"  506","line":"/** \\brief Computes the product of a matrix with a Householder sequence."},
{"lineNum":"  507","line":"  * \\param[in]  other  %Matrix being multiplied."},
{"lineNum":"  508","line":"  * \\param[in]  h      %HouseholderSequence being multiplied."},
{"lineNum":"  509","line":"  * \\returns    Expression object representing the product."},
{"lineNum":"  510","line":"  *"},
{"lineNum":"  511","line":"  * This function computes \\f$ MH \\f$ where \\f$ M \\f$ is the matrix \\p other and \\f$ H \\f$ is the"},
{"lineNum":"  512","line":"  * Householder sequence represented by \\p h."},
{"lineNum":"  513","line":"  */"},
{"lineNum":"  514","line":"template<typename OtherDerived, typename VectorsType, typename CoeffsType, int Side>"},
{"lineNum":"  515","line":"typename internal::matrix_type_times_scalar_type<typename VectorsType::Scalar,OtherDerived>::Type operator*(const MatrixBase<OtherDerived>& other, const HouseholderSequence<VectorsType,CoeffsType,Side>& h)"},
{"lineNum":"  516","line":"{"},
{"lineNum":"  517","line":"  typename internal::matrix_type_times_scalar_type<typename VectorsType::Scalar,OtherDerived>::Type"},
{"lineNum":"  518","line":"    res(other.template cast<typename internal::matrix_type_times_scalar_type<typename VectorsType::Scalar,OtherDerived>::ResultScalar>());"},
{"lineNum":"  519","line":"  h.applyThisOnTheRight(res);"},
{"lineNum":"  520","line":"  return res;"},
{"lineNum":"  521","line":"}"},
{"lineNum":"  522","line":""},
{"lineNum":"  523","line":"/** \\ingroup Householder_Module \\householder_module"},
{"lineNum":"  524","line":"  * \\brief Convenience function for constructing a Householder sequence."},
{"lineNum":"  525","line":"  * \\returns A HouseholderSequence constructed from the specified arguments."},
{"lineNum":"  526","line":"  */"},
{"lineNum":"  527","line":"template<typename VectorsType, typename CoeffsType>"},
{"lineNum":"  528","line":"HouseholderSequence<VectorsType,CoeffsType> householderSequence(const VectorsType& v, const CoeffsType& h)"},
{"lineNum":"  529","line":"{"},
{"lineNum":"  530","line":"  return HouseholderSequence<VectorsType,CoeffsType,OnTheLeft>(v, h);"},
{"lineNum":"  531","line":"}"},
{"lineNum":"  532","line":""},
{"lineNum":"  533","line":"/** \\ingroup Householder_Module \\householder_module"},
{"lineNum":"  534","line":"  * \\brief Convenience function for constructing a Householder sequence."},
{"lineNum":"  535","line":"  * \\returns A HouseholderSequence constructed from the specified arguments."},
{"lineNum":"  536","line":"  * \\details This function differs from householderSequence() in that the template argument \\p OnTheSide of"},
{"lineNum":"  537","line":"  * the constructed HouseholderSequence is set to OnTheRight, instead of the default OnTheLeft."},
{"lineNum":"  538","line":"  */"},
{"lineNum":"  539","line":"template<typename VectorsType, typename CoeffsType>"},
{"lineNum":"  540","line":"HouseholderSequence<VectorsType,CoeffsType,OnTheRight> rightHouseholderSequence(const VectorsType& v, const CoeffsType& h)"},
{"lineNum":"  541","line":"{"},
{"lineNum":"  542","line":"  return HouseholderSequence<VectorsType,CoeffsType,OnTheRight>(v, h);"},
{"lineNum":"  543","line":"}"},
{"lineNum":"  544","line":""},
{"lineNum":"  545","line":"} // end namespace Eigen"},
{"lineNum":"  546","line":""},
{"lineNum":"  547","line":"#endif // EIGEN_HOUSEHOLDER_SEQUENCE_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 49, "covered" : 0,};
var merged_data = [];
