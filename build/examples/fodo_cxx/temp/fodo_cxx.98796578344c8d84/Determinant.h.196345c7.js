var data = {lines:[
{"lineNum":"    1","line":"// This file is part of Eigen, a lightweight C++ template library"},
{"lineNum":"    2","line":"// for linear algebra."},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Copyright (C) 2008 Benoit Jacob <jacob.benoit.1@gmail.com>"},
{"lineNum":"    5","line":"//"},
{"lineNum":"    6","line":"// This Source Code Form is subject to the terms of the Mozilla"},
{"lineNum":"    7","line":"// Public License v. 2.0. If a copy of the MPL was not distributed"},
{"lineNum":"    8","line":"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/."},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef EIGEN_DETERMINANT_H"},
{"lineNum":"   11","line":"#define EIGEN_DETERMINANT_H"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"#include \"./InternalHeaderCheck.h\""},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"namespace Eigen {"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"namespace internal {"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"template<typename Derived>"},
{"lineNum":"   20","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":"   21","line":"inline const typename Derived::Scalar bruteforce_det3_helper"},
{"lineNum":"   22","line":"(const MatrixBase<Derived>& matrix, int a, int b, int c)"},
{"lineNum":"   23","line":"{"},
{"lineNum":"   24","line":"  return matrix.coeff(0,a)"},
{"lineNum":"   25","line":"         * (matrix.coeff(1,b) * matrix.coeff(2,c) - matrix.coeff(1,c) * matrix.coeff(2,b));"},
{"lineNum":"   26","line":"}"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"template<typename Derived,"},
{"lineNum":"   29","line":"         int DeterminantType = Derived::RowsAtCompileTime"},
{"lineNum":"   30","line":"> struct determinant_impl"},
{"lineNum":"   31","line":"{"},
{"lineNum":"   32","line":"  static inline typename traits<Derived>::Scalar run(const Derived& m)"},
{"lineNum":"   33","line":"  {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   34","line":"    if(Derived::ColsAtCompileTime==Dynamic && m.rows()==0)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   35","line":"      return typename traits<Derived>::Scalar(1);"},
{"lineNum":"   36","line":"    return m.partialPivLu().determinant();"},
{"lineNum":"   37","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   38","line":"};"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"template<typename Derived> struct determinant_impl<Derived, 1>"},
{"lineNum":"   41","line":"{"},
{"lineNum":"   42","line":"  static inline EIGEN_DEVICE_FUNC"},
{"lineNum":"   43","line":"  typename traits<Derived>::Scalar run(const Derived& m)"},
{"lineNum":"   44","line":"  {"},
{"lineNum":"   45","line":"    return m.coeff(0,0);"},
{"lineNum":"   46","line":"  }"},
{"lineNum":"   47","line":"};"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"template<typename Derived> struct determinant_impl<Derived, 2>"},
{"lineNum":"   50","line":"{"},
{"lineNum":"   51","line":"  static inline EIGEN_DEVICE_FUNC"},
{"lineNum":"   52","line":"  typename traits<Derived>::Scalar run(const Derived& m)"},
{"lineNum":"   53","line":"  {"},
{"lineNum":"   54","line":"    return m.coeff(0,0) * m.coeff(1,1) - m.coeff(1,0) * m.coeff(0,1);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   55","line":"  }"},
{"lineNum":"   56","line":"};"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"template<typename Derived> struct determinant_impl<Derived, 3>"},
{"lineNum":"   59","line":"{"},
{"lineNum":"   60","line":"  static inline EIGEN_DEVICE_FUNC"},
{"lineNum":"   61","line":"  typename traits<Derived>::Scalar run(const Derived& m)"},
{"lineNum":"   62","line":"  {"},
{"lineNum":"   63","line":"    return bruteforce_det3_helper(m,0,1,2)"},
{"lineNum":"   64","line":"          - bruteforce_det3_helper(m,1,0,2)"},
{"lineNum":"   65","line":"          + bruteforce_det3_helper(m,2,0,1);"},
{"lineNum":"   66","line":"  }"},
{"lineNum":"   67","line":"};"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"template<typename Derived> struct determinant_impl<Derived, 4>"},
{"lineNum":"   70","line":"{"},
{"lineNum":"   71","line":"  typedef typename traits<Derived>::Scalar Scalar;"},
{"lineNum":"   72","line":"  static EIGEN_DEVICE_FUNC"},
{"lineNum":"   73","line":"  Scalar run(const Derived& m)"},
{"lineNum":"   74","line":"  {"},
{"lineNum":"   75","line":"    Scalar d2_01 = det2(m, 0, 1);"},
{"lineNum":"   76","line":"    Scalar d2_02 = det2(m, 0, 2);"},
{"lineNum":"   77","line":"    Scalar d2_03 = det2(m, 0, 3);"},
{"lineNum":"   78","line":"    Scalar d2_12 = det2(m, 1, 2);"},
{"lineNum":"   79","line":"    Scalar d2_13 = det2(m, 1, 3);"},
{"lineNum":"   80","line":"    Scalar d2_23 = det2(m, 2, 3);"},
{"lineNum":"   81","line":"    Scalar d3_0 = det3(m, 1,d2_23, 2,d2_13, 3,d2_12);"},
{"lineNum":"   82","line":"    Scalar d3_1 = det3(m, 0,d2_23, 2,d2_03, 3,d2_02);"},
{"lineNum":"   83","line":"    Scalar d3_2 = det3(m, 0,d2_13, 1,d2_03, 3,d2_01);"},
{"lineNum":"   84","line":"    Scalar d3_3 = det3(m, 0,d2_12, 1,d2_02, 2,d2_01);"},
{"lineNum":"   85","line":"    return internal::pmadd(-m(0,3),d3_0, m(1,3)*d3_1) +","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   86","line":"           internal::pmadd(-m(2,3),d3_2, m(3,3)*d3_3);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   87","line":"  }"},
{"lineNum":"   88","line":"protected:"},
{"lineNum":"   89","line":"  static EIGEN_DEVICE_FUNC"},
{"lineNum":"   90","line":"  Scalar det2(const Derived& m, Index i0, Index i1)"},
{"lineNum":"   91","line":"  {"},
{"lineNum":"   92","line":"    return m(i0,0) * m(i1,1) - m(i1,0) * m(i0,1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   93","line":"  }"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"  static EIGEN_DEVICE_FUNC"},
{"lineNum":"   96","line":"  Scalar det3(const Derived& m, Index i0, const Scalar& d0, Index i1, const Scalar& d1, Index i2, const Scalar& d2)"},
{"lineNum":"   97","line":"  {"},
{"lineNum":"   98","line":"    return internal::pmadd(m(i0,2), d0, internal::pmadd(-m(i1,2), d1, m(i2,2)*d2));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   99","line":"  }"},
{"lineNum":"  100","line":"};"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"} // end namespace internal"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"/** \\lu_module"},
{"lineNum":"  105","line":"  *"},
{"lineNum":"  106","line":"  * \\returns the determinant of this matrix"},
{"lineNum":"  107","line":"  */"},
{"lineNum":"  108","line":"template<typename Derived>"},
{"lineNum":"  109","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":"  110","line":"inline typename internal::traits<Derived>::Scalar MatrixBase<Derived>::determinant() const"},
{"lineNum":"  111","line":"{"},
{"lineNum":"  112","line":"  eigen_assert(rows() == cols());"},
{"lineNum":"  113","line":"  typedef typename internal::nested_eval<Derived,Base::RowsAtCompileTime>::type Nested;"},
{"lineNum":"  114","line":"  return internal::determinant_impl<typename internal::remove_all<Nested>::type>::run(derived());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  115","line":"}"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"} // end namespace Eigen"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"#endif // EIGEN_DETERMINANT_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 9, "covered" : 0,};
var merged_data = [];
