var data = {lines:[
{"lineNum":"    1","line":""},
{"lineNum":"    2","line":"#include \"populate_host.h\""},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#include \"Eigen/Eigen\""},
{"lineNum":"    5","line":"#include \"Eigen/Cholesky\""},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"using namespace Eigen;"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"void"},
{"lineNum":"   10","line":"adjust_moments_host("},
{"lineNum":"   11","line":"        double const * means,"},
{"lineNum":"   12","line":"        double const * covariances,"},
{"lineNum":"   13","line":"        double const * bunch_mean,"},
{"lineNum":"   14","line":"        double const * bunch_mom2,"},
{"lineNum":"   15","line":"        int num_particles,"},
{"lineNum":"   16","line":"        int num_particles_slots,"},
{"lineNum":"   17","line":"        double * particles )"},
{"lineNum":"   18","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   19","line":"    Matrix<double, 6, 6, Eigen::RowMajor> C(covariances);"},
{"lineNum":"   20","line":"    Matrix<double, 6, 6, Eigen::RowMajor> G(C.llt().matrixL());"},
{"lineNum":"   21","line":"    Matrix<double, 6, 6, Eigen::RowMajor> X(bunch_mom2);"},
{"lineNum":"   22","line":"    Matrix<double, 6, 6, Eigen::RowMajor> H(X.llt().matrixL());"},
{"lineNum":"   23","line":"    Matrix<double, 6, 6, Eigen::RowMajor> A(G * H.inverse());"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"    // jfa: dummy exists only to work around a bad interaction betwen"},
{"lineNum":"   26","line":"    //      Eigen3 and g++ 4.1.2"},
{"lineNum":"   27","line":"    std::stringstream dummy;"},
{"lineNum":"   28","line":"    dummy << C;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"    Eigen::Map<Matrix<double, Eigen::Dynamic, Eigen::Dynamic, Eigen::ColMajor>>"},
{"lineNum":"   31","line":"            rho7(particles, num_particles_slots, 7);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"    Matrix<double, 1, 6 > rhobar6(bunch_mean);"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"    for (int part = 0; part < num_particles; ++part) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   36","line":"        rho7.block<1, 6>(part, 0) -= rhobar6;"},
{"lineNum":"   37","line":"    }"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"    rho7.block(0, 0, num_particles, 6) *= A.transpose();"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"    Matrix<double, 1, 6> means6(means);"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"    for (int part = 0; part < num_particles; ++part) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   44","line":"        rho7.block<1, 6>(part, 0) += means6;"},
{"lineNum":"   45","line":"    }"},
{"lineNum":"   46","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"void"},
{"lineNum":"   49","line":"get_correlation_matrix_host("},
{"lineNum":"   50","line":"        double * correlation_matrix,"},
{"lineNum":"   51","line":"        double const* one_turn_map,"},
{"lineNum":"   52","line":"        double arms, double brms, double crms, double beta,"},
{"lineNum":"   53","line":"        std::array<int, 3> const& rms_index)"},
{"lineNum":"   54","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"    Matrix<double, 6, 6, Eigen::RowMajor> c_matrix;"},
{"lineNum":"   57","line":"    Matrix<double, 6, 6, Eigen::RowMajor> eigen_map(one_turn_map);"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"    EigenSolver<MatrixXd> es(eigen_map);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   60","line":"    VectorXcd evals = es.eigenvalues();"},
{"lineNum":"   61","line":"    MatrixXcd evect_matrix = es.eigenvectors();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"    std::vector<MatrixXd> F;"},
{"lineNum":"   64","line":"    std::vector<int> remaining;"},
{"lineNum":"   65","line":"    for (int j=5; j>-1; j--) remaining.push_back(j);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"    for (int i=0; i<3; i++)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   68","line":"    {"},
{"lineNum":"   69","line":"        //find complex conjugate among remaining eigenvectors"},
{"lineNum":"   70","line":"        int first = remaining.back();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   71","line":"        remaining.pop_back();"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"        double best = 1.0e30;"},
{"lineNum":"   74","line":"        int conj = -1;"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"        for (int item=0; item<remaining.size(); item++)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   77","line":"        {"},
{"lineNum":"   78","line":"            VectorXcd sum = evect_matrix.col(first)"},
{"lineNum":"   79","line":"                + evect_matrix.col(remaining[item]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"            if (sum.imag().cwiseAbs().maxCoeff() < best)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   82","line":"            {"},
{"lineNum":"   83","line":"                best = sum.imag().cwiseAbs().maxCoeff();"},
{"lineNum":"   84","line":"                conj = remaining[item];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   85","line":"            }"},
{"lineNum":"   86","line":"        }"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"        if (conj==-1)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   89","line":"            throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   90","line":"                    \"failed to find a conjugate pair in \""},
{"lineNum":"   91","line":"                    \"_get_correlation_matrix\");"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"        remaining.erase("},
{"lineNum":"   94","line":"                std::remove(remaining.begin(), remaining.end(), conj),"},
{"lineNum":"   95","line":"                remaining.end() );"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"        MatrixXd tmp ="},
{"lineNum":"   98","line":"            ( evect_matrix.col(first)*evect_matrix.col(first).conjugate().transpose()"},
{"lineNum":"   99","line":"            + evect_matrix.col(conj)*evect_matrix.col(conj).conjugate().transpose() ).real();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"        F.push_back(tmp);"},
{"lineNum":"  102","line":"        //  F[i] is effectively 2*e[i] cross e^H[i]."},
{"lineNum":"  103","line":"    }"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"    // The correlation matrix is a linear combination of F[i] with"},
{"lineNum":"  106","line":"    // appropriate coefficients such that the diagonal elements C[i,i] i=(0,2,4)"},
{"lineNum":"  107","line":"    // come out to be the desired 2nd moments."},
{"lineNum":"  108","line":"    Eigen::MatrixXd S(3,3);"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"    for (int i=0;i<3;i++)"},
{"lineNum":"  111","line":"        for (int j=0;j<3;j++)"},
{"lineNum":"  112","line":"            S(i,j) = F[j](rms_index[i], rms_index[i]);","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"     Eigen::MatrixXd Sinv = S.inverse();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"     std::array<double, 6> units = {1.0, 1.0, 1.0, 1.0, 1.0/beta, 1.0};","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"     double cd1 = arms * units[rms_index[0]] * arms * units[rms_index[0]];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  119","line":"     double cd2 = brms * units[rms_index[1]] * brms * units[rms_index[1]];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  120","line":"     double cd3 = crms * units[rms_index[2]] * crms * units[rms_index[2]];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"     for (int i=0; i<6; i++)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  123","line":"     {"},
{"lineNum":"  124","line":"         for (int j=0; j<6; j++)"},
{"lineNum":"  125","line":"         {"},
{"lineNum":"  126","line":"             c_matrix(i, j) = 0.0;"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"             for (int k=0; k<3; k++)"},
{"lineNum":"  129","line":"                 c_matrix(i, j) += F[k](i,j) *","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  130","line":"                     (Sinv(k, 0) * cd1 + Sinv(k, 1) * cd2 + Sinv(k, 2) * cd3);"},
{"lineNum":"  131","line":"         }"},
{"lineNum":"  132","line":"     }"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"     for(int i=0; i<36; ++i)"},
{"lineNum":"  135","line":"         correlation_matrix[i] = c_matrix.data()[i];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  136","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 29, "covered" : 0,};
var merged_data = [];
