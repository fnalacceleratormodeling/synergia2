var data = {lines:[
{"lineNum":"    1","line":"#ifndef SIMULATION_BUNCH_SIMULATOR_H"},
{"lineNum":"    2","line":"#define SIMULATION_BUNCH_SIMULATOR_H"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#include \"synergia/bunch/bunch_train.h\""},
{"lineNum":"    5","line":"#include \"synergia/lattice/lattice.h\""},
{"lineNum":"    6","line":"#include \"synergia/simulation/propagate_actions.h\""},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"#include <cereal/types/vector.hpp>"},
{"lineNum":"    9","line":"#include <cereal/types/utility.hpp>  // std::pair"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"class Operator;"},
{"lineNum":"   12","line":"class Independent_operation;"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"class Diagnostics_loss;"},
{"lineNum":"   15","line":"class Bunch_simulator;"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"class Bunch_simulator","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   18","line":"{"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"public:"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"    static const int PRE_TURN   = -1;"},
{"lineNum":"   23","line":"    static const int FINAL_STEP = -1;"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"private:"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"#if 0"},
{"lineNum":"   28","line":"    // bool trigger(int turn, int step)"},
{"lineNum":"   29","line":"    using trigger_step_t = std::function<bool(int, int)>;"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"    // bool trigger(Lattice_element const& ele)"},
{"lineNum":"   32","line":"    using trigger_ele_t  = std::function<bool(Lattice_element const&)>;"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"    // bool trigger(Operator const& opr)"},
{"lineNum":"   35","line":"    using trigger_opr_t  = std::function<bool(Operator const&)>;"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"    // bool trigger(Operation const& opn)"},
{"lineNum":"   38","line":"    using trigger_opn_t  = std::function<bool(Independent_operation const&)>;"},
{"lineNum":"   39","line":"#endif"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"    struct trigger_step_period"},
{"lineNum":"   42","line":"    {"},
{"lineNum":"   43","line":"        int turn_period, step_period;"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"        bool operator()(int turn, int step) const"},
{"lineNum":"   46","line":"        {"},
{"lineNum":"   47","line":"            // always trigger at before_start"},
{"lineNum":"   48","line":"            if (turn == PRE_TURN && step == FINAL_STEP)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   49","line":"                return true;"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"            // only the turn number matters"},
{"lineNum":"   52","line":"            if (step_period == -1)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   53","line":"                return (turn % turn_period == 0)"},
{"lineNum":"   54","line":"                    && (step == FINAL_STEP);"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"            // at both the right turn and step"},
{"lineNum":"   57","line":"            return (turn % turn_period == 0)"},
{"lineNum":"   58","line":"                && (step % step_period == 0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   59","line":"        }"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"        template<class AR>"},
{"lineNum":"   62","line":"        void serialize(AR & ar)"},
{"lineNum":"   63","line":"        { ar(turn_period, step_period); }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   64","line":"    };"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"    struct trigger_turn_listed"},
{"lineNum":"   67","line":"    {"},
{"lineNum":"   68","line":"        std::vector<int> numbers;"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"        bool operator()(int turn, int step) const"},
{"lineNum":"   71","line":"        {"},
{"lineNum":"   72","line":"            return (step == FINAL_STEP) &&","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   73","line":"                    std::find(numbers.begin(), numbers.end(), turn) != numbers.end();"},
{"lineNum":"   74","line":"        }"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"        template<class AR>"},
{"lineNum":"   77","line":"        void serialize(AR & ar)"},
{"lineNum":"   78","line":"        { ar(numbers); }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   79","line":"    };"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"    struct trigger_element","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   82","line":"    {"},
{"lineNum":"   83","line":"        std::string name;"},
{"lineNum":"   84","line":"        int turn_period;"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"        bool operator()(int turn, Lattice_element const& ele) const"},
{"lineNum":"   87","line":"        {"},
{"lineNum":"   88","line":"            return (turn % turn_period == 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   89","line":"                && (ele.get_name() == name);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   90","line":"        }"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"        template<class AR>"},
{"lineNum":"   93","line":"        void serialize(AR & ar)"},
{"lineNum":"   94","line":"        { ar(name, turn_period); }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   95","line":"    };"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"    template<typename TriggerT>"},
{"lineNum":"   98","line":"    struct diag_tuple_t","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   99","line":"    {"},
{"lineNum":"  100","line":"        int train;"},
{"lineNum":"  101","line":"        int bunch;"},
{"lineNum":"  102","line":"        int diag_id;"},
{"lineNum":"  103","line":"        TriggerT trigger;"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"        template<class AR>"},
{"lineNum":"  106","line":"        void serialize(AR & ar)"},
{"lineNum":"  107","line":"        { ar(train, bunch, diag_id, trigger); }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  108","line":"    };"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"    using dt_step_period = diag_tuple_t<trigger_step_period>;"},
{"lineNum":"  111","line":"    using dt_turn_listed = diag_tuple_t<trigger_turn_listed>;"},
{"lineNum":"  112","line":"    using dt_element     = diag_tuple_t<trigger_element>;"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"    // void action(Bunch_simulator&, Lattice&, int turn, int step, void* data)"},
{"lineNum":"  115","line":"    using action_step_t = std::function<void(Bunch_simulator&, Lattice&, int, int)>;"},
{"lineNum":"  116","line":"    using action_data_step_t = std::function<void(Bunch_simulator&, Lattice&, int, int, void*)>;"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"    // void action(Bunch_simulator&, Lattice&, int turn, void* data)"},
{"lineNum":"  119","line":"    using action_turn_t = std::function<void(Bunch_simulator&, Lattice&, int)>;"},
{"lineNum":"  120","line":"    using action_data_turn_t = std::function<void(Bunch_simulator&, Lattice&, int, void*)>;"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"private:"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"    // constructor"},
{"lineNum":"  125","line":"    Bunch_simulator( Bunch_train && pt,"},
{"lineNum":"  126","line":"                     Bunch_train && st,"},
{"lineNum":"  127","line":"                     std::shared_ptr<Commxx> const& comm );"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"    static Bunch_simulator"},
{"lineNum":"  131","line":"        construct( Reference_particle const& ref_pri,"},
{"lineNum":"  132","line":"                   Reference_particle const& ref_sec,"},
{"lineNum":"  133","line":"                   size_t num_part,"},
{"lineNum":"  134","line":"                   size_t num_spec,"},
{"lineNum":"  135","line":"                   double num_real_part,"},
{"lineNum":"  136","line":"                   size_t num_bunches_pri,"},
{"lineNum":"  137","line":"                   size_t num_bunches_sec,"},
{"lineNum":"  138","line":"                   double spacing_pri,"},
{"lineNum":"  139","line":"                   double spacing_sec,"},
{"lineNum":"  140","line":"                   Commxx const& comm);"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"    int get_bunch_array_idx(int train, int bunch) const;"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"public:"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"    Bunch_simulator(Bunch_simulator const&) = delete;"},
{"lineNum":"  147","line":"    Bunch_simulator(Bunch_simulator &&) = default;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"    // factory methods"},
{"lineNum":"  150","line":"    static Bunch_simulator"},
{"lineNum":"  151","line":"        create_empty_bunch_simulator();"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"    static Bunch_simulator"},
{"lineNum":"  154","line":"        create_single_bunch_simulator("},
{"lineNum":"  155","line":"            Reference_particle const& ref,"},
{"lineNum":"  156","line":"            size_t num_particles,"},
{"lineNum":"  157","line":"            double num_real_particles,"},
{"lineNum":"  158","line":"            Commxx const& comm = Commxx(),"},
{"lineNum":"  159","line":"            size_t num_spectators = 0"},
{"lineNum":"  160","line":"            );"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"    static Bunch_simulator"},
{"lineNum":"  163","line":"        create_bunch_train_simulator("},
{"lineNum":"  164","line":"            Reference_particle const& ref,"},
{"lineNum":"  165","line":"            size_t num_particles,"},
{"lineNum":"  166","line":"            double num_real_particles,"},
{"lineNum":"  167","line":"            size_t num_bunches,"},
{"lineNum":"  168","line":"            double spacing,"},
{"lineNum":"  169","line":"            Commxx const& comm = Commxx(),"},
{"lineNum":"  170","line":"            size_t num_spectators = 0"},
{"lineNum":"  171","line":"            );"},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"    static Bunch_simulator"},
{"lineNum":"  174","line":"        create_two_trains_simulator("},
{"lineNum":"  175","line":"            Reference_particle const& ref_pri,"},
{"lineNum":"  176","line":"            Reference_particle const& ref_sec,"},
{"lineNum":"  177","line":"            size_t num_particles,"},
{"lineNum":"  178","line":"            double num_real_particles,"},
{"lineNum":"  179","line":"            size_t num_bunches_pri,"},
{"lineNum":"  180","line":"            size_t num_bunches_sec,"},
{"lineNum":"  181","line":"            double spacing_pri,"},
{"lineNum":"  182","line":"            double spacing_sec,"},
{"lineNum":"  183","line":"            Commxx const& comm = Commxx(),"},
{"lineNum":"  184","line":"            size_t num_spectators = 0"},
{"lineNum":"  185","line":"            );"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"    // bunch simulator id"},
{"lineNum":"  188","line":"    std::string const& id() const"},
{"lineNum":"  189","line":"    { return uuid; }"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"    // register a per-turn diagnostics (with an optional turn period)"},
{"lineNum":"  192","line":"    // the train and bunch are indexed based on actual number of"},
{"lineNum":"  193","line":"    // bunches per train"},
{"lineNum":"  194","line":"    template<class Diag>"},
{"lineNum":"  195","line":"    Diagnostics_handler"},
{"lineNum":"  196","line":"    reg_diag_period("},
{"lineNum":"  197","line":"            Diag const& diag,"},
{"lineNum":"  198","line":"            int turn_period, int step_period,"},
{"lineNum":"  199","line":"            int bunch, int train )"},
{"lineNum":"  200","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  201","line":"        int bunch_idx = get_bunch_array_idx(train, bunch);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  202","line":"        if (bunch_idx == -1) return Diagnostics_handler();","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"        auto handler = trains[train][bunch_idx]","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  205","line":"            .add_diagnostics(diag);"},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"        dt_step_period dt{ train, bunch_idx, handler.second,","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  208","line":"            trigger_step_period{turn_period, step_period}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  209","line":"        };"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"        diags_step_period.push_back(dt);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  212","line":"        return handler.first;"},
{"lineNum":"  213","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"    template<class Diag>"},
{"lineNum":"  216","line":"    Diagnostics_handler"},
{"lineNum":"  217","line":"    reg_diag_per_turn(Diag const& diag,"},
{"lineNum":"  218","line":"            int period = 1, int bunch = 0, int train = 0)"},
{"lineNum":"  219","line":"    { return reg_diag_period(diag, period, -1, bunch, train); }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  220","line":""},
{"lineNum":"  221","line":"    template<class Diag>"},
{"lineNum":"  222","line":"    Diagnostics_handler"},
{"lineNum":"  223","line":"    reg_diag_per_step(Diag const& diag,"},
{"lineNum":"  224","line":"            int period = 1, int bunch = 0, int train = 0)"},
{"lineNum":"  225","line":"    { return reg_diag_period(diag, 1, period, bunch, train); }"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"    // register a diagnsotics at specified number of turns"},
{"lineNum":"  228","line":"    template<class Diag>"},
{"lineNum":"  229","line":"    Diagnostics_handler"},
{"lineNum":"  230","line":"    reg_diag_turn_listed(Diag const& diag,"},
{"lineNum":"  231","line":"            std::vector<int> const& numbers = {},"},
{"lineNum":"  232","line":"            int bunch = 0, int train = 0 )"},
{"lineNum":"  233","line":"    {"},
{"lineNum":"  234","line":"        int bunch_idx = get_bunch_array_idx(train, bunch);"},
{"lineNum":"  235","line":"        if (bunch_idx == -1) return Diagnostics_handler();"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"        auto handler = trains[train][bunch_idx]"},
{"lineNum":"  238","line":"            .add_diagnostics(diag);"},
{"lineNum":"  239","line":""},
{"lineNum":"  240","line":"        dt_turn_listed dt{ train, bunch_idx, handler.second,"},
{"lineNum":"  241","line":"            trigger_turn_listed{numbers}"},
{"lineNum":"  242","line":"        };"},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"        diags_turn_listed.push_back(dt);"},
{"lineNum":"  245","line":"        return handler.first;"},
{"lineNum":"  246","line":"    }"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"    // register a diagnostics at specific element and"},
{"lineNum":"  249","line":"    // the period of turns"},
{"lineNum":"  250","line":"    // * this is the former forced diagnostics"},
{"lineNum":"  251","line":"    template<class Diag>"},
{"lineNum":"  252","line":"    Diagnostics_handler"},
{"lineNum":"  253","line":"    reg_diag_at_element(Diag const& diag,"},
{"lineNum":"  254","line":"            Lattice_element const& ele, int turn_period = 1,"},
{"lineNum":"  255","line":"            int bunch = 0, int train = 0)"},
{"lineNum":"  256","line":"    {"},
{"lineNum":"  257","line":"        int bunch_idx = get_bunch_array_idx(train, bunch);"},
{"lineNum":"  258","line":"        if (bunch_idx == -1) return Diagnostics_handler();"},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"        auto handler = trains[train][bunch_idx]"},
{"lineNum":"  261","line":"            .add_diagnostics(diag);"},
{"lineNum":"  262","line":""},
{"lineNum":"  263","line":"        dt_element dt{ train, bunch_idx, handler.second,"},
{"lineNum":"  264","line":"            trigger_element{ele.get_name(), turn_period}"},
{"lineNum":"  265","line":"        };"},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"        diags_element.push_back(dt);"},
{"lineNum":"  268","line":"        return handler.first;"},
{"lineNum":"  269","line":"    }"},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"    // diag loss"},
{"lineNum":"  272","line":"    void reg_diag_loss_aperture("},
{"lineNum":"  273","line":"            std::string const& filename, int bunch = 0, int train = 0 )"},
{"lineNum":"  274","line":"    { get_bunch(train, bunch).set_diag_loss_aperture(filename); }"},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"    void reg_diag_loss_zcut("},
{"lineNum":"  277","line":"            std::string const& filename, int bunch = 0, int train = 0 )"},
{"lineNum":"  278","line":"    { get_bunch(train, bunch).set_diag_loss_zcut(filename); }"},
{"lineNum":"  279","line":""},
{"lineNum":"  280","line":"#if 0"},
{"lineNum":"  281","line":"    // diag per operator"},
{"lineNum":"  282","line":"    void reg_diag_at_operator("},
{"lineNum":"  283","line":"            std::string const& name, Diagnostics & diag,"},
{"lineNum":"  284","line":"            trigger_opr_t, int bunch = 0, int train = 0 )"},
{"lineNum":"  285","line":"    { }"},
{"lineNum":"  286","line":""},
{"lineNum":"  287","line":"    // diag per operation"},
{"lineNum":"  288","line":"    void reg_diag_at_operation("},
{"lineNum":"  289","line":"            std::string const& name, Diagnostics & diag,"},
{"lineNum":"  290","line":"            trigger_opn_t, int bunch = 0, int train = 0 )"},
{"lineNum":"  291","line":"    { }"},
{"lineNum":"  292","line":"#endif"},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"    // register propagation actions"},
{"lineNum":"  295","line":"    template<class PA>"},
{"lineNum":"  296","line":"    void reg_prop_actions(PA const& pa)"},
{"lineNum":"  297","line":"    { prop_actions = std::make_shared<PA>(pa); }"},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"    // register individual propagation actions"},
{"lineNum":"  300","line":"    void reg_prop_action_step_end(action_step_t fun);"},
{"lineNum":"  301","line":"    void reg_prop_action_turn_end(action_turn_t fun);"},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"    void reg_prop_action_step_end(action_data_step_t fun, void* data = nullptr);"},
{"lineNum":"  304","line":"    void reg_prop_action_turn_end(action_data_turn_t fun, void* data = nullptr);"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"    // diag actions"},
{"lineNum":"  307","line":"    void diag_action_step_and_turn(int turn_num, int step_num);"},
{"lineNum":"  308","line":"    void diag_action_element(Lattice_element const& element);"},
{"lineNum":"  309","line":"    void diag_action_operator(Operator const& opr);"},
{"lineNum":"  310","line":"    void diag_action_operation(Independent_operation const& opn);"},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":"    // propagate actions"},
{"lineNum":"  313","line":"    void prop_action_first(Lattice & lattice);"},
{"lineNum":"  314","line":"    void prop_action_step_end(Lattice & lattice, int turn, int step);"},
{"lineNum":"  315","line":"    void prop_action_turn_end(Lattice & lattice, int turn);"},
{"lineNum":"  316","line":""},
{"lineNum":"  317","line":"    // set reference particle"},
{"lineNum":"  318","line":"    void set_lattice_reference_particle(Reference_particle const& ref);"},
{"lineNum":"  319","line":""},
{"lineNum":"  320","line":"    // accessors"},
{"lineNum":"  321","line":"    Commxx const& get_comm() const { return *comm; }"},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"    std::array<Bunch_train, 2>      & get_trains()       { return trains; }"},
{"lineNum":"  324","line":"    std::array<Bunch_train, 2> const& get_trains() const { return trains; }"},
{"lineNum":"  325","line":""},
{"lineNum":"  326","line":"    Bunch_train      & operator[](size_t idx)       { return trains[idx]; }"},
{"lineNum":"  327","line":"    Bunch_train const& operator[](size_t idx) const { return trains[idx]; }"},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"    // retrive the bunch according to its index in the train,"},
{"lineNum":"  330","line":"    // not the index in the array"},
{"lineNum":"  331","line":"    Bunch      & get_bunch(size_t train = 0, size_t bunch = 0);"},
{"lineNum":"  332","line":"    Bunch const& get_bunch(size_t train = 0, size_t bunch = 0) const;"},
{"lineNum":"  333","line":""},
{"lineNum":"  334","line":"    // test. returns false when train and bunch out of bounds"},
{"lineNum":"  335","line":"    bool has_local_bunch(size_t train, size_t bunch) const;"},
{"lineNum":"  336","line":""},
{"lineNum":"  337","line":"    // which ranks are a given bunch on"},
{"lineNum":"  338","line":"    std::vector<int> get_bunch_ranks(size_t train, size_t bunch) const;"},
{"lineNum":"  339","line":""},
{"lineNum":"  340","line":"    // turns"},
{"lineNum":"  341","line":"    void inc_turn() { ++curr_turn; }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  342","line":"    void set_max_turns(int turns) { num_turns = turns; }"},
{"lineNum":"  343","line":""},
{"lineNum":"  344","line":"    int current_turn() const { return curr_turn; }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  345","line":"    int max_turns() const { return num_turns; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"    // longitudinal boundary"},
{"lineNum":"  348","line":"    void set_longitudinal_boundary("},
{"lineNum":"  349","line":"            LongitudinalBoundary lb, double param = 0.0)"},
{"lineNum":"  350","line":"    {"},
{"lineNum":"  351","line":"        trains[0].set_longitudinal_boundary(lb, param);"},
{"lineNum":"  352","line":"        trains[1].set_longitudinal_boundary(lb, param);"},
{"lineNum":"  353","line":"    }"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"    // coordinated populate"},
{"lineNum":"  356","line":"    // the populated bunch simulator will be deterministic"},
{"lineNum":"  357","line":"    // regardless of the number of ranks in the simulation"},
{"lineNum":"  358","line":"    void populate_6d(uint64_t seed,"},
{"lineNum":"  359","line":"            const_karray1d means,"},
{"lineNum":"  360","line":"            const_karray2d_row covariances);"},
{"lineNum":"  361","line":""},
{"lineNum":"  362","line":"    void populate_6d_truncated(uint64_t seed,"},
{"lineNum":"  363","line":"            const_karray1d means,"},
{"lineNum":"  364","line":"            const_karray2d_row covariances,"},
{"lineNum":"  365","line":"            const_karray1d limits);"},
{"lineNum":"  366","line":""},
{"lineNum":"  367","line":"    // serialization helper"},
{"lineNum":"  368","line":"    void save_checkpoint_particles(std::string const& fname) const;"},
{"lineNum":"  369","line":"    void load_checkpoint_particles(std::string const& fname);"},
{"lineNum":"  370","line":""},
{"lineNum":"  371","line":"    std::string dump() const"},
{"lineNum":"  372","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  373","line":"        std::stringstream ss;"},
{"lineNum":"  374","line":"        {"},
{"lineNum":"  375","line":"            cereal::JSONOutputArchive ar(ss);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  376","line":"            ar(*this);"},
{"lineNum":"  377","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  378","line":"        return ss.str();"},
{"lineNum":"  379","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  380","line":""},
{"lineNum":"  381","line":"    static Bunch_simulator load_from_string(std::string const& str)"},
{"lineNum":"  382","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  383","line":"        std::stringstream ss(str);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  384","line":"        cereal::JSONInputArchive ar(ss);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  385","line":""},
{"lineNum":"  386","line":"        auto bs = create_empty_bunch_simulator();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  387","line":"        ar(bs);"},
{"lineNum":"  388","line":""},
{"lineNum":"  389","line":"        return bs;"},
{"lineNum":"  390","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  391","line":""},
{"lineNum":"  392","line":"private:"},
{"lineNum":"  393","line":""},
{"lineNum":"  394","line":"    std::string uuid;"},
{"lineNum":"  395","line":""},
{"lineNum":"  396","line":"    int curr_turn = 0;   // current progress in turns","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  397","line":"    int num_turns = -1;  // total number of turns (-1 no limit)"},
{"lineNum":"  398","line":""},
{"lineNum":"  399","line":"    std::shared_ptr<Commxx> comm;"},
{"lineNum":"  400","line":"    std::array<Bunch_train, 2> trains;"},
{"lineNum":"  401","line":""},
{"lineNum":"  402","line":"    // diagnostics action trigger conditions"},
{"lineNum":"  403","line":"    std::vector<dt_step_period> diags_step_period;"},
{"lineNum":"  404","line":"    std::vector<dt_turn_listed> diags_turn_listed;"},
{"lineNum":"  405","line":"    std::vector<dt_element>     diags_element;"},
{"lineNum":"  406","line":""},
{"lineNum":"  407","line":"    // it would survive the checkpoint load"},
{"lineNum":"  408","line":"    std::shared_ptr<Propagate_actions> prop_actions;"},
{"lineNum":"  409","line":""},
{"lineNum":"  410","line":"    // non-persistent propagate actions --"},
{"lineNum":"  411","line":"    // reg again after checkpoint load"},
{"lineNum":"  412","line":"    std::vector<action_step_t> prop_actions_step_end;"},
{"lineNum":"  413","line":"    std::vector<action_turn_t> prop_actions_turn_end;"},
{"lineNum":"  414","line":""},
{"lineNum":"  415","line":"private:"},
{"lineNum":"  416","line":""},
{"lineNum":"  417","line":"    friend class cereal::access;"},
{"lineNum":"  418","line":""},
{"lineNum":"  419","line":"    template<class AR>"},
{"lineNum":"  420","line":"    void serialize(AR & ar)"},
{"lineNum":"  421","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  422","line":"        ar(CEREAL_NVP(uuid));"},
{"lineNum":"  423","line":""},
{"lineNum":"  424","line":"        ar(CEREAL_NVP(curr_turn));"},
{"lineNum":"  425","line":"        ar(CEREAL_NVP(num_turns));"},
{"lineNum":"  426","line":""},
{"lineNum":"  427","line":"        ar(CEREAL_NVP(comm));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  428","line":"        ar(CEREAL_NVP(trains));"},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":"        ar(CEREAL_NVP(diags_step_period));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  431","line":"        ar(CEREAL_NVP(diags_turn_listed));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  432","line":"        ar(CEREAL_NVP(diags_element));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  433","line":""},
{"lineNum":"  434","line":"        ar(CEREAL_NVP(prop_actions));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  435","line":""},
{"lineNum":"  436","line":"        // save/load particles with parallel hdf5"},
{"lineNum":"  437","line":"        if (AR::is_saving::value)"},
{"lineNum":"  438","line":"        {"},
{"lineNum":"  439","line":"            // save particles"},
{"lineNum":"  440","line":"            std::stringstream ss;"},
{"lineNum":"  441","line":"            ss << \"bunch_simulator.h5\";","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  442","line":""},
{"lineNum":"  443","line":"            std::string particle_fname = ss.str();"},
{"lineNum":"  444","line":"            ar(CEREAL_NVP(particle_fname));"},
{"lineNum":"  445","line":""},
{"lineNum":"  446","line":"            save_checkpoint_particles(particle_fname);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  447","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  448","line":"        else"},
{"lineNum":"  449","line":"        {"},
{"lineNum":"  450","line":"            // load particle"},
{"lineNum":"  451","line":"            std::string particle_fname;"},
{"lineNum":"  452","line":"            ar(CEREAL_NVP(particle_fname));"},
{"lineNum":"  453","line":""},
{"lineNum":"  454","line":"            load_checkpoint_particles(particle_fname);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  455","line":"        }"},
{"lineNum":"  456","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  457","line":"};"},
{"lineNum":"  458","line":""},
{"lineNum":"  459","line":"template<>"},
{"lineNum":"  460","line":"inline"},
{"lineNum":"  461","line":"void Bunch_simulator::reg_prop_actions(std::shared_ptr<Propagate_actions> const& pa)"},
{"lineNum":"  462","line":"{ prop_actions = pa; }"},
{"lineNum":"  463","line":""},
{"lineNum":"  464","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 47, "covered" : 0,};
var merged_data = [];
