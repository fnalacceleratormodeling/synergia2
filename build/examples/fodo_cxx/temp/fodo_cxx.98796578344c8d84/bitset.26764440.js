var data = {lines:[
{"lineNum":"    1","line":"// -*- C++ -*-"},
{"lineNum":"    2","line":"//===---------------------------- bitset ----------------------------------===//"},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions."},
{"lineNum":"    5","line":"// See https://llvm.org/LICENSE.txt for license information."},
{"lineNum":"    6","line":"// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef _LIBCPP_BITSET"},
{"lineNum":"   11","line":"#define _LIBCPP_BITSET"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"/*"},
{"lineNum":"   14","line":"    bitset synopsis"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"namespace std"},
{"lineNum":"   17","line":"{"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"namespace std {"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"template <size_t N>"},
{"lineNum":"   22","line":"class bitset"},
{"lineNum":"   23","line":"{"},
{"lineNum":"   24","line":"public:"},
{"lineNum":"   25","line":"    // bit reference:"},
{"lineNum":"   26","line":"    class reference"},
{"lineNum":"   27","line":"    {"},
{"lineNum":"   28","line":"        friend class bitset;"},
{"lineNum":"   29","line":"        reference() noexcept;"},
{"lineNum":"   30","line":"    public:"},
{"lineNum":"   31","line":"        ~reference() noexcept;"},
{"lineNum":"   32","line":"        reference& operator=(bool x) noexcept;           // for b[i] = x;"},
{"lineNum":"   33","line":"        reference& operator=(const reference&) noexcept; // for b[i] = b[j];"},
{"lineNum":"   34","line":"        bool operator~() const noexcept;                 // flips the bit"},
{"lineNum":"   35","line":"        operator bool() const noexcept;                  // for x = b[i];"},
{"lineNum":"   36","line":"        reference& flip() noexcept;                      // for b[i].flip();"},
{"lineNum":"   37","line":"    };"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"    // 23.3.5.1 constructors:"},
{"lineNum":"   40","line":"    constexpr bitset() noexcept;"},
{"lineNum":"   41","line":"    constexpr bitset(unsigned long long val) noexcept;"},
{"lineNum":"   42","line":"    template <class charT>"},
{"lineNum":"   43","line":"        explicit bitset(const charT* str,"},
{"lineNum":"   44","line":"                        typename basic_string<charT>::size_type n = basic_string<charT>::npos,"},
{"lineNum":"   45","line":"                        charT zero = charT(\'0\'), charT one = charT(\'1\'));"},
{"lineNum":"   46","line":"    template<class charT, class traits, class Allocator>"},
{"lineNum":"   47","line":"        explicit bitset(const basic_string<charT,traits,Allocator>& str,"},
{"lineNum":"   48","line":"                        typename basic_string<charT,traits,Allocator>::size_type pos = 0,"},
{"lineNum":"   49","line":"                        typename basic_string<charT,traits,Allocator>::size_type n ="},
{"lineNum":"   50","line":"                                 basic_string<charT,traits,Allocator>::npos,"},
{"lineNum":"   51","line":"                        charT zero = charT(\'0\'), charT one = charT(\'1\'));"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"    // 23.3.5.2 bitset operations:"},
{"lineNum":"   54","line":"    bitset& operator&=(const bitset& rhs) noexcept;"},
{"lineNum":"   55","line":"    bitset& operator|=(const bitset& rhs) noexcept;"},
{"lineNum":"   56","line":"    bitset& operator^=(const bitset& rhs) noexcept;"},
{"lineNum":"   57","line":"    bitset& operator<<=(size_t pos) noexcept;"},
{"lineNum":"   58","line":"    bitset& operator>>=(size_t pos) noexcept;"},
{"lineNum":"   59","line":"    bitset& set() noexcept;"},
{"lineNum":"   60","line":"    bitset& set(size_t pos, bool val = true);"},
{"lineNum":"   61","line":"    bitset& reset() noexcept;"},
{"lineNum":"   62","line":"    bitset& reset(size_t pos);"},
{"lineNum":"   63","line":"    bitset operator~() const noexcept;"},
{"lineNum":"   64","line":"    bitset& flip() noexcept;"},
{"lineNum":"   65","line":"    bitset& flip(size_t pos);"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"    // element access:"},
{"lineNum":"   68","line":"    constexpr bool operator[](size_t pos) const; // for b[i];"},
{"lineNum":"   69","line":"    reference operator[](size_t pos);            // for b[i];"},
{"lineNum":"   70","line":"    unsigned long to_ulong() const;"},
{"lineNum":"   71","line":"    unsigned long long to_ullong() const;"},
{"lineNum":"   72","line":"    template <class charT, class traits, class Allocator>"},
{"lineNum":"   73","line":"        basic_string<charT, traits, Allocator> to_string(charT zero = charT(\'0\'), charT one = charT(\'1\')) const;"},
{"lineNum":"   74","line":"    template <class charT, class traits>"},
{"lineNum":"   75","line":"        basic_string<charT, traits, allocator<charT> > to_string(charT zero = charT(\'0\'), charT one = charT(\'1\')) const;"},
{"lineNum":"   76","line":"    template <class charT>"},
{"lineNum":"   77","line":"        basic_string<charT, char_traits<charT>, allocator<charT> > to_string(charT zero = charT(\'0\'), charT one = charT(\'1\')) const;"},
{"lineNum":"   78","line":"    basic_string<char, char_traits<char>, allocator<char> > to_string(char zero = \'0\', char one = \'1\') const;"},
{"lineNum":"   79","line":"    size_t count() const noexcept;"},
{"lineNum":"   80","line":"    constexpr size_t size() const noexcept;"},
{"lineNum":"   81","line":"    bool operator==(const bitset& rhs) const noexcept;"},
{"lineNum":"   82","line":"    bool operator!=(const bitset& rhs) const noexcept;"},
{"lineNum":"   83","line":"    bool test(size_t pos) const;"},
{"lineNum":"   84","line":"    bool all() const noexcept;"},
{"lineNum":"   85","line":"    bool any() const noexcept;"},
{"lineNum":"   86","line":"    bool none() const noexcept;"},
{"lineNum":"   87","line":"    bitset operator<<(size_t pos) const noexcept;"},
{"lineNum":"   88","line":"    bitset operator>>(size_t pos) const noexcept;"},
{"lineNum":"   89","line":"};"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"// 23.3.5.3 bitset operators:"},
{"lineNum":"   92","line":"template <size_t N>"},
{"lineNum":"   93","line":"bitset<N> operator&(const bitset<N>&, const bitset<N>&) noexcept;"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"template <size_t N>"},
{"lineNum":"   96","line":"bitset<N> operator|(const bitset<N>&, const bitset<N>&) noexcept;"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"template <size_t N>"},
{"lineNum":"   99","line":"bitset<N> operator^(const bitset<N>&, const bitset<N>&) noexcept;"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"template <class charT, class traits, size_t N>"},
{"lineNum":"  102","line":"basic_istream<charT, traits>&"},
{"lineNum":"  103","line":"operator>>(basic_istream<charT, traits>& is, bitset<N>& x);"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"template <class charT, class traits, size_t N>"},
{"lineNum":"  106","line":"basic_ostream<charT, traits>&"},
{"lineNum":"  107","line":"operator<<(basic_ostream<charT, traits>& os, const bitset<N>& x);"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"template <size_t N> struct hash<std::bitset<N>>;"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"}  // std"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"*/"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"#include <__config>"},
{"lineNum":"  116","line":"#include <__bit_reference>"},
{"lineNum":"  117","line":"#include <__functional_base>"},
{"lineNum":"  118","line":"#include <climits>"},
{"lineNum":"  119","line":"#include <cstddef>"},
{"lineNum":"  120","line":"#include <iosfwd>"},
{"lineNum":"  121","line":"#include <stdexcept>"},
{"lineNum":"  122","line":"#include <string>"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"},
{"lineNum":"  125","line":"#pragma GCC system_header"},
{"lineNum":"  126","line":"#endif"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"_LIBCPP_PUSH_MACROS"},
{"lineNum":"  129","line":"#include <__undef_macros>"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"_LIBCPP_BEGIN_NAMESPACE_STD"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"template <size_t _N_words, size_t _Size>"},
{"lineNum":"  135","line":"class __bitset;"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"template <size_t _N_words, size_t _Size>"},
{"lineNum":"  138","line":"struct __has_storage_type<__bitset<_N_words, _Size> >"},
{"lineNum":"  139","line":"{"},
{"lineNum":"  140","line":"    static const bool value = true;"},
{"lineNum":"  141","line":"};"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"template <size_t _N_words, size_t _Size>"},
{"lineNum":"  144","line":"class __bitset"},
{"lineNum":"  145","line":"{"},
{"lineNum":"  146","line":"public:"},
{"lineNum":"  147","line":"    typedef ptrdiff_t              difference_type;"},
{"lineNum":"  148","line":"    typedef size_t                 size_type;"},
{"lineNum":"  149","line":"    typedef size_type              __storage_type;"},
{"lineNum":"  150","line":"protected:"},
{"lineNum":"  151","line":"    typedef __bitset __self;"},
{"lineNum":"  152","line":"    typedef       __storage_type*  __storage_pointer;"},
{"lineNum":"  153","line":"    typedef const __storage_type*  __const_storage_pointer;"},
{"lineNum":"  154","line":"    static const unsigned __bits_per_word = static_cast<unsigned>(sizeof(__storage_type) * CHAR_BIT);"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"    friend class __bit_reference<__bitset>;"},
{"lineNum":"  157","line":"    friend class __bit_const_reference<__bitset>;"},
{"lineNum":"  158","line":"    friend class __bit_iterator<__bitset, false>;"},
{"lineNum":"  159","line":"    friend class __bit_iterator<__bitset, true>;"},
{"lineNum":"  160","line":"    friend struct __bit_array<__bitset>;"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"    __storage_type __first_[_N_words];"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"    typedef __bit_reference<__bitset>                  reference;"},
{"lineNum":"  165","line":"    typedef __bit_const_reference<__bitset>            const_reference;"},
{"lineNum":"  166","line":"    typedef __bit_iterator<__bitset, false>            iterator;"},
{"lineNum":"  167","line":"    typedef __bit_iterator<__bitset, true>             const_iterator;"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  170","line":"    _LIBCPP_CONSTEXPR __bitset() _NOEXCEPT;"},
{"lineNum":"  171","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  172","line":"    explicit _LIBCPP_CONSTEXPR __bitset(unsigned long long __v) _NOEXCEPT;"},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"    _LIBCPP_INLINE_VISIBILITY reference __make_ref(size_t __pos) _NOEXCEPT"},
{"lineNum":"  175","line":"        {return reference(__first_ + __pos / __bits_per_word, __storage_type(1) << __pos % __bits_per_word);}","class":"lineNoCov","hits":"0","possible_hits":"15",},
{"lineNum":"  176","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR const_reference __make_ref(size_t __pos) const _NOEXCEPT"},
{"lineNum":"  177","line":"        {return const_reference(__first_ + __pos / __bits_per_word, __storage_type(1) << __pos % __bits_per_word);}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  178","line":"    _LIBCPP_INLINE_VISIBILITY iterator __make_iter(size_t __pos) _NOEXCEPT"},
{"lineNum":"  179","line":"        {return iterator(__first_ + __pos / __bits_per_word, __pos % __bits_per_word);}"},
{"lineNum":"  180","line":"    _LIBCPP_INLINE_VISIBILITY const_iterator __make_iter(size_t __pos) const _NOEXCEPT"},
{"lineNum":"  181","line":"        {return const_iterator(__first_ + __pos / __bits_per_word, __pos % __bits_per_word);}"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  184","line":"    void operator&=(const __bitset& __v) _NOEXCEPT;"},
{"lineNum":"  185","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  186","line":"    void operator|=(const __bitset& __v) _NOEXCEPT;"},
{"lineNum":"  187","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  188","line":"    void operator^=(const __bitset& __v) _NOEXCEPT;"},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"    void flip() _NOEXCEPT;"},
{"lineNum":"  191","line":"    _LIBCPP_INLINE_VISIBILITY unsigned long to_ulong() const"},
{"lineNum":"  192","line":"        {return to_ulong(integral_constant<bool, _Size < sizeof(unsigned long) * CHAR_BIT>());}"},
{"lineNum":"  193","line":"    _LIBCPP_INLINE_VISIBILITY unsigned long long to_ullong() const"},
{"lineNum":"  194","line":"        {return to_ullong(integral_constant<bool, _Size < sizeof(unsigned long long) * CHAR_BIT>());}"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"    bool all() const _NOEXCEPT;"},
{"lineNum":"  197","line":"    bool any() const _NOEXCEPT;"},
{"lineNum":"  198","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  199","line":"    size_t __hash_code() const _NOEXCEPT;"},
{"lineNum":"  200","line":"private:"},
{"lineNum":"  201","line":"#ifdef _LIBCPP_CXX03_LANG"},
{"lineNum":"  202","line":"    void __init(unsigned long long __v, false_type) _NOEXCEPT;"},
{"lineNum":"  203","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  204","line":"    void __init(unsigned long long __v, true_type) _NOEXCEPT;"},
{"lineNum":"  205","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":"  206","line":"    unsigned long to_ulong(false_type) const;"},
{"lineNum":"  207","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  208","line":"    unsigned long to_ulong(true_type) const;"},
{"lineNum":"  209","line":"    unsigned long long to_ullong(false_type) const;"},
{"lineNum":"  210","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  211","line":"    unsigned long long to_ullong(true_type) const;"},
{"lineNum":"  212","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  213","line":"    unsigned long long to_ullong(true_type, false_type) const;"},
{"lineNum":"  214","line":"    unsigned long long to_ullong(true_type, true_type) const;"},
{"lineNum":"  215","line":"};"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"template <size_t _N_words, size_t _Size>"},
{"lineNum":"  218","line":"inline"},
{"lineNum":"  219","line":"_LIBCPP_CONSTEXPR"},
{"lineNum":"  220","line":"__bitset<_N_words, _Size>::__bitset() _NOEXCEPT"},
{"lineNum":"  221","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  222","line":"    : __first_{0}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  223","line":"#endif"},
{"lineNum":"  224","line":"{"},
{"lineNum":"  225","line":"#ifdef _LIBCPP_CXX03_LANG"},
{"lineNum":"  226","line":"    _VSTD::fill_n(__first_, _N_words, __storage_type(0));"},
{"lineNum":"  227","line":"#endif"},
{"lineNum":"  228","line":"}"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"#ifdef _LIBCPP_CXX03_LANG"},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"template <size_t _N_words, size_t _Size>"},
{"lineNum":"  233","line":"void"},
{"lineNum":"  234","line":"__bitset<_N_words, _Size>::__init(unsigned long long __v, false_type) _NOEXCEPT"},
{"lineNum":"  235","line":"{"},
{"lineNum":"  236","line":"    __storage_type __t[sizeof(unsigned long long) / sizeof(__storage_type)];"},
{"lineNum":"  237","line":"    size_t __sz = _Size;"},
{"lineNum":"  238","line":"    for (size_t __i = 0; __i < sizeof(__t)/sizeof(__t[0]); ++__i, __v >>= __bits_per_word, __sz -= __bits_per_word )"},
{"lineNum":"  239","line":"        if ( __sz < __bits_per_word)"},
{"lineNum":"  240","line":"            __t[__i] = static_cast<__storage_type>(__v) & ( 1ULL << __sz ) - 1;"},
{"lineNum":"  241","line":"        else"},
{"lineNum":"  242","line":"            __t[__i] = static_cast<__storage_type>(__v);"},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"    _VSTD::copy(__t, __t + sizeof(__t)/sizeof(__t[0]), __first_);"},
{"lineNum":"  245","line":"    _VSTD::fill(__first_ + sizeof(__t)/sizeof(__t[0]), __first_ + sizeof(__first_)/sizeof(__first_[0]),"},
{"lineNum":"  246","line":"               __storage_type(0));"},
{"lineNum":"  247","line":"}"},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"template <size_t _N_words, size_t _Size>"},
{"lineNum":"  250","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  251","line":"void"},
{"lineNum":"  252","line":"__bitset<_N_words, _Size>::__init(unsigned long long __v, true_type) _NOEXCEPT"},
{"lineNum":"  253","line":"{"},
{"lineNum":"  254","line":"    __first_[0] = __v;"},
{"lineNum":"  255","line":"    if (_Size < __bits_per_word)"},
{"lineNum":"  256","line":"        __first_[0] &= ( 1ULL << _Size ) - 1;"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"    _VSTD::fill(__first_ + 1, __first_ + sizeof(__first_)/sizeof(__first_[0]), __storage_type(0));"},
{"lineNum":"  259","line":"}"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":"  262","line":""},
{"lineNum":"  263","line":"template <size_t _N_words, size_t _Size>"},
{"lineNum":"  264","line":"inline"},
{"lineNum":"  265","line":"_LIBCPP_CONSTEXPR"},
{"lineNum":"  266","line":"__bitset<_N_words, _Size>::__bitset(unsigned long long __v) _NOEXCEPT"},
{"lineNum":"  267","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  268","line":"#if __SIZEOF_SIZE_T__ == 8"},
{"lineNum":"  269","line":"    : __first_{__v}"},
{"lineNum":"  270","line":"#elif __SIZEOF_SIZE_T__ == 4"},
{"lineNum":"  271","line":"    : __first_{static_cast<__storage_type>(__v),"},
{"lineNum":"  272","line":"                _Size >= 2 * __bits_per_word ? static_cast<__storage_type>(__v >> __bits_per_word)"},
{"lineNum":"  273","line":"                : static_cast<__storage_type>((__v >> __bits_per_word) & (__storage_type(1) << (_Size - __bits_per_word)) - 1)}"},
{"lineNum":"  274","line":"#else"},
{"lineNum":"  275","line":"#error This constructor has not been ported to this platform"},
{"lineNum":"  276","line":"#endif"},
{"lineNum":"  277","line":"#endif"},
{"lineNum":"  278","line":"{"},
{"lineNum":"  279","line":"#ifdef _LIBCPP_CXX03_LANG"},
{"lineNum":"  280","line":"    __init(__v, integral_constant<bool, sizeof(unsigned long long) == sizeof(__storage_type)>());"},
{"lineNum":"  281","line":"#endif"},
{"lineNum":"  282","line":"}"},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"template <size_t _N_words, size_t _Size>"},
{"lineNum":"  285","line":"inline"},
{"lineNum":"  286","line":"void"},
{"lineNum":"  287","line":"__bitset<_N_words, _Size>::operator&=(const __bitset& __v) _NOEXCEPT"},
{"lineNum":"  288","line":"{"},
{"lineNum":"  289","line":"    for (size_type __i = 0; __i < _N_words; ++__i)"},
{"lineNum":"  290","line":"        __first_[__i] &= __v.__first_[__i];"},
{"lineNum":"  291","line":"}"},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"template <size_t _N_words, size_t _Size>"},
{"lineNum":"  294","line":"inline"},
{"lineNum":"  295","line":"void"},
{"lineNum":"  296","line":"__bitset<_N_words, _Size>::operator|=(const __bitset& __v) _NOEXCEPT"},
{"lineNum":"  297","line":"{"},
{"lineNum":"  298","line":"    for (size_type __i = 0; __i < _N_words; ++__i)"},
{"lineNum":"  299","line":"        __first_[__i] |= __v.__first_[__i];"},
{"lineNum":"  300","line":"}"},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":"template <size_t _N_words, size_t _Size>"},
{"lineNum":"  303","line":"inline"},
{"lineNum":"  304","line":"void"},
{"lineNum":"  305","line":"__bitset<_N_words, _Size>::operator^=(const __bitset& __v) _NOEXCEPT"},
{"lineNum":"  306","line":"{"},
{"lineNum":"  307","line":"    for (size_type __i = 0; __i < _N_words; ++__i)"},
{"lineNum":"  308","line":"        __first_[__i] ^= __v.__first_[__i];"},
{"lineNum":"  309","line":"}"},
{"lineNum":"  310","line":""},
{"lineNum":"  311","line":"template <size_t _N_words, size_t _Size>"},
{"lineNum":"  312","line":"void"},
{"lineNum":"  313","line":"__bitset<_N_words, _Size>::flip() _NOEXCEPT"},
{"lineNum":"  314","line":"{"},
{"lineNum":"  315","line":"    // do middle whole words"},
{"lineNum":"  316","line":"    size_type __n = _Size;"},
{"lineNum":"  317","line":"    __storage_pointer __p = __first_;"},
{"lineNum":"  318","line":"    for (; __n >= __bits_per_word; ++__p, __n -= __bits_per_word)"},
{"lineNum":"  319","line":"        *__p = ~*__p;"},
{"lineNum":"  320","line":"    // do last partial word"},
{"lineNum":"  321","line":"    if (__n > 0)"},
{"lineNum":"  322","line":"    {"},
{"lineNum":"  323","line":"        __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);"},
{"lineNum":"  324","line":"        __storage_type __b = *__p & __m;"},
{"lineNum":"  325","line":"        *__p &= ~__m;"},
{"lineNum":"  326","line":"        *__p |= ~__b & __m;"},
{"lineNum":"  327","line":"    }"},
{"lineNum":"  328","line":"}"},
{"lineNum":"  329","line":""},
{"lineNum":"  330","line":"template <size_t _N_words, size_t _Size>"},
{"lineNum":"  331","line":"unsigned long"},
{"lineNum":"  332","line":"__bitset<_N_words, _Size>::to_ulong(false_type) const"},
{"lineNum":"  333","line":"{"},
{"lineNum":"  334","line":"    const_iterator __e = __make_iter(_Size);"},
{"lineNum":"  335","line":"    const_iterator __i = _VSTD::find(__make_iter(sizeof(unsigned long) * CHAR_BIT), __e, true);"},
{"lineNum":"  336","line":"    if (__i != __e)"},
{"lineNum":"  337","line":"        __throw_overflow_error(\"bitset to_ulong overflow error\");"},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"    return __first_[0];"},
{"lineNum":"  340","line":"}"},
{"lineNum":"  341","line":""},
{"lineNum":"  342","line":"template <size_t _N_words, size_t _Size>"},
{"lineNum":"  343","line":"inline"},
{"lineNum":"  344","line":"unsigned long"},
{"lineNum":"  345","line":"__bitset<_N_words, _Size>::to_ulong(true_type) const"},
{"lineNum":"  346","line":"{"},
{"lineNum":"  347","line":"    return __first_[0];"},
{"lineNum":"  348","line":"}"},
{"lineNum":"  349","line":""},
{"lineNum":"  350","line":"template <size_t _N_words, size_t _Size>"},
{"lineNum":"  351","line":"unsigned long long"},
{"lineNum":"  352","line":"__bitset<_N_words, _Size>::to_ullong(false_type) const"},
{"lineNum":"  353","line":"{"},
{"lineNum":"  354","line":"    const_iterator __e = __make_iter(_Size);"},
{"lineNum":"  355","line":"    const_iterator __i = _VSTD::find(__make_iter(sizeof(unsigned long long) * CHAR_BIT), __e, true);"},
{"lineNum":"  356","line":"    if (__i != __e)"},
{"lineNum":"  357","line":"        __throw_overflow_error(\"bitset to_ullong overflow error\");"},
{"lineNum":"  358","line":""},
{"lineNum":"  359","line":"    return to_ullong(true_type());"},
{"lineNum":"  360","line":"}"},
{"lineNum":"  361","line":""},
{"lineNum":"  362","line":"template <size_t _N_words, size_t _Size>"},
{"lineNum":"  363","line":"inline"},
{"lineNum":"  364","line":"unsigned long long"},
{"lineNum":"  365","line":"__bitset<_N_words, _Size>::to_ullong(true_type) const"},
{"lineNum":"  366","line":"{"},
{"lineNum":"  367","line":"    return to_ullong(true_type(), integral_constant<bool, sizeof(__storage_type) < sizeof(unsigned long long)>());"},
{"lineNum":"  368","line":"}"},
{"lineNum":"  369","line":""},
{"lineNum":"  370","line":"template <size_t _N_words, size_t _Size>"},
{"lineNum":"  371","line":"inline"},
{"lineNum":"  372","line":"unsigned long long"},
{"lineNum":"  373","line":"__bitset<_N_words, _Size>::to_ullong(true_type, false_type) const"},
{"lineNum":"  374","line":"{"},
{"lineNum":"  375","line":"    return __first_[0];"},
{"lineNum":"  376","line":"}"},
{"lineNum":"  377","line":""},
{"lineNum":"  378","line":"template <size_t _N_words, size_t _Size>"},
{"lineNum":"  379","line":"unsigned long long"},
{"lineNum":"  380","line":"__bitset<_N_words, _Size>::to_ullong(true_type, true_type) const"},
{"lineNum":"  381","line":"{"},
{"lineNum":"  382","line":"    unsigned long long __r = __first_[0];"},
{"lineNum":"  383","line":"    for (size_t __i = 1; __i < sizeof(unsigned long long) / sizeof(__storage_type); ++__i)"},
{"lineNum":"  384","line":"        __r |= static_cast<unsigned long long>(__first_[__i]) << (sizeof(__storage_type) * CHAR_BIT);"},
{"lineNum":"  385","line":"    return __r;"},
{"lineNum":"  386","line":"}"},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"template <size_t _N_words, size_t _Size>"},
{"lineNum":"  389","line":"bool"},
{"lineNum":"  390","line":"__bitset<_N_words, _Size>::all() const _NOEXCEPT"},
{"lineNum":"  391","line":"{"},
{"lineNum":"  392","line":"    // do middle whole words"},
{"lineNum":"  393","line":"    size_type __n = _Size;"},
{"lineNum":"  394","line":"    __const_storage_pointer __p = __first_;"},
{"lineNum":"  395","line":"    for (; __n >= __bits_per_word; ++__p, __n -= __bits_per_word)"},
{"lineNum":"  396","line":"        if (~*__p)"},
{"lineNum":"  397","line":"            return false;"},
{"lineNum":"  398","line":"    // do last partial word"},
{"lineNum":"  399","line":"    if (__n > 0)"},
{"lineNum":"  400","line":"    {"},
{"lineNum":"  401","line":"        __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);"},
{"lineNum":"  402","line":"        if (~*__p & __m)"},
{"lineNum":"  403","line":"            return false;"},
{"lineNum":"  404","line":"    }"},
{"lineNum":"  405","line":"    return true;"},
{"lineNum":"  406","line":"}"},
{"lineNum":"  407","line":""},
{"lineNum":"  408","line":"template <size_t _N_words, size_t _Size>"},
{"lineNum":"  409","line":"bool"},
{"lineNum":"  410","line":"__bitset<_N_words, _Size>::any() const _NOEXCEPT"},
{"lineNum":"  411","line":"{"},
{"lineNum":"  412","line":"    // do middle whole words"},
{"lineNum":"  413","line":"    size_type __n = _Size;"},
{"lineNum":"  414","line":"    __const_storage_pointer __p = __first_;"},
{"lineNum":"  415","line":"    for (; __n >= __bits_per_word; ++__p, __n -= __bits_per_word)"},
{"lineNum":"  416","line":"        if (*__p)"},
{"lineNum":"  417","line":"            return true;"},
{"lineNum":"  418","line":"    // do last partial word"},
{"lineNum":"  419","line":"    if (__n > 0)"},
{"lineNum":"  420","line":"    {"},
{"lineNum":"  421","line":"        __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);"},
{"lineNum":"  422","line":"        if (*__p & __m)"},
{"lineNum":"  423","line":"            return true;"},
{"lineNum":"  424","line":"    }"},
{"lineNum":"  425","line":"    return false;"},
{"lineNum":"  426","line":"}"},
{"lineNum":"  427","line":""},
{"lineNum":"  428","line":"template <size_t _N_words, size_t _Size>"},
{"lineNum":"  429","line":"inline"},
{"lineNum":"  430","line":"size_t"},
{"lineNum":"  431","line":"__bitset<_N_words, _Size>::__hash_code() const _NOEXCEPT"},
{"lineNum":"  432","line":"{"},
{"lineNum":"  433","line":"    size_t __h = 0;"},
{"lineNum":"  434","line":"    for (size_type __i = 0; __i < _N_words; ++__i)"},
{"lineNum":"  435","line":"        __h ^= __first_[__i];"},
{"lineNum":"  436","line":"    return __h;"},
{"lineNum":"  437","line":"}"},
{"lineNum":"  438","line":""},
{"lineNum":"  439","line":"template <size_t _Size>"},
{"lineNum":"  440","line":"class __bitset<1, _Size>"},
{"lineNum":"  441","line":"{"},
{"lineNum":"  442","line":"public:"},
{"lineNum":"  443","line":"    typedef ptrdiff_t              difference_type;"},
{"lineNum":"  444","line":"    typedef size_t                 size_type;"},
{"lineNum":"  445","line":"    typedef size_type              __storage_type;"},
{"lineNum":"  446","line":"protected:"},
{"lineNum":"  447","line":"    typedef __bitset __self;"},
{"lineNum":"  448","line":"    typedef       __storage_type*  __storage_pointer;"},
{"lineNum":"  449","line":"    typedef const __storage_type*  __const_storage_pointer;"},
{"lineNum":"  450","line":"    static const unsigned __bits_per_word = static_cast<unsigned>(sizeof(__storage_type) * CHAR_BIT);"},
{"lineNum":"  451","line":""},
{"lineNum":"  452","line":"    friend class __bit_reference<__bitset>;"},
{"lineNum":"  453","line":"    friend class __bit_const_reference<__bitset>;"},
{"lineNum":"  454","line":"    friend class __bit_iterator<__bitset, false>;"},
{"lineNum":"  455","line":"    friend class __bit_iterator<__bitset, true>;"},
{"lineNum":"  456","line":"    friend struct __bit_array<__bitset>;"},
{"lineNum":"  457","line":""},
{"lineNum":"  458","line":"    __storage_type __first_;"},
{"lineNum":"  459","line":""},
{"lineNum":"  460","line":"    typedef __bit_reference<__bitset>                  reference;"},
{"lineNum":"  461","line":"    typedef __bit_const_reference<__bitset>            const_reference;"},
{"lineNum":"  462","line":"    typedef __bit_iterator<__bitset, false>            iterator;"},
{"lineNum":"  463","line":"    typedef __bit_iterator<__bitset, true>             const_iterator;"},
{"lineNum":"  464","line":""},
{"lineNum":"  465","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  466","line":"    _LIBCPP_CONSTEXPR __bitset() _NOEXCEPT;"},
{"lineNum":"  467","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  468","line":"    explicit _LIBCPP_CONSTEXPR __bitset(unsigned long long __v) _NOEXCEPT;"},
{"lineNum":"  469","line":""},
{"lineNum":"  470","line":"    _LIBCPP_INLINE_VISIBILITY reference __make_ref(size_t __pos) _NOEXCEPT"},
{"lineNum":"  471","line":"        {return reference(&__first_, __storage_type(1) << __pos);}"},
{"lineNum":"  472","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR const_reference __make_ref(size_t __pos) const _NOEXCEPT"},
{"lineNum":"  473","line":"        {return const_reference(&__first_, __storage_type(1) << __pos);}"},
{"lineNum":"  474","line":"    _LIBCPP_INLINE_VISIBILITY iterator __make_iter(size_t __pos) _NOEXCEPT"},
{"lineNum":"  475","line":"        {return iterator(&__first_ + __pos / __bits_per_word, __pos % __bits_per_word);}"},
{"lineNum":"  476","line":"    _LIBCPP_INLINE_VISIBILITY const_iterator __make_iter(size_t __pos) const _NOEXCEPT"},
{"lineNum":"  477","line":"        {return const_iterator(&__first_ + __pos / __bits_per_word, __pos % __bits_per_word);}"},
{"lineNum":"  478","line":""},
{"lineNum":"  479","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  480","line":"    void operator&=(const __bitset& __v) _NOEXCEPT;"},
{"lineNum":"  481","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  482","line":"    void operator|=(const __bitset& __v) _NOEXCEPT;"},
{"lineNum":"  483","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  484","line":"    void operator^=(const __bitset& __v) _NOEXCEPT;"},
{"lineNum":"  485","line":""},
{"lineNum":"  486","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  487","line":"    void flip() _NOEXCEPT;"},
{"lineNum":"  488","line":""},
{"lineNum":"  489","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  490","line":"    unsigned long to_ulong() const;"},
{"lineNum":"  491","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  492","line":"    unsigned long long to_ullong() const;"},
{"lineNum":"  493","line":""},
{"lineNum":"  494","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  495","line":"    bool all() const _NOEXCEPT;"},
{"lineNum":"  496","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  497","line":"    bool any() const _NOEXCEPT;"},
{"lineNum":"  498","line":""},
{"lineNum":"  499","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  500","line":"    size_t __hash_code() const _NOEXCEPT;"},
{"lineNum":"  501","line":"};"},
{"lineNum":"  502","line":""},
{"lineNum":"  503","line":"template <size_t _Size>"},
{"lineNum":"  504","line":"inline"},
{"lineNum":"  505","line":"_LIBCPP_CONSTEXPR"},
{"lineNum":"  506","line":"__bitset<1, _Size>::__bitset() _NOEXCEPT"},
{"lineNum":"  507","line":"    : __first_(0)"},
{"lineNum":"  508","line":"{"},
{"lineNum":"  509","line":"}"},
{"lineNum":"  510","line":""},
{"lineNum":"  511","line":"template <size_t _Size>"},
{"lineNum":"  512","line":"inline"},
{"lineNum":"  513","line":"_LIBCPP_CONSTEXPR"},
{"lineNum":"  514","line":"__bitset<1, _Size>::__bitset(unsigned long long __v) _NOEXCEPT"},
{"lineNum":"  515","line":"    : __first_("},
{"lineNum":"  516","line":"        _Size == __bits_per_word ? static_cast<__storage_type>(__v)"},
{"lineNum":"  517","line":"                                 : static_cast<__storage_type>(__v) & ((__storage_type(1) << _Size) - 1)"},
{"lineNum":"  518","line":"    )"},
{"lineNum":"  519","line":"{"},
{"lineNum":"  520","line":"}"},
{"lineNum":"  521","line":""},
{"lineNum":"  522","line":"template <size_t _Size>"},
{"lineNum":"  523","line":"inline"},
{"lineNum":"  524","line":"void"},
{"lineNum":"  525","line":"__bitset<1, _Size>::operator&=(const __bitset& __v) _NOEXCEPT"},
{"lineNum":"  526","line":"{"},
{"lineNum":"  527","line":"    __first_ &= __v.__first_;"},
{"lineNum":"  528","line":"}"},
{"lineNum":"  529","line":""},
{"lineNum":"  530","line":"template <size_t _Size>"},
{"lineNum":"  531","line":"inline"},
{"lineNum":"  532","line":"void"},
{"lineNum":"  533","line":"__bitset<1, _Size>::operator|=(const __bitset& __v) _NOEXCEPT"},
{"lineNum":"  534","line":"{"},
{"lineNum":"  535","line":"    __first_ |= __v.__first_;"},
{"lineNum":"  536","line":"}"},
{"lineNum":"  537","line":""},
{"lineNum":"  538","line":"template <size_t _Size>"},
{"lineNum":"  539","line":"inline"},
{"lineNum":"  540","line":"void"},
{"lineNum":"  541","line":"__bitset<1, _Size>::operator^=(const __bitset& __v) _NOEXCEPT"},
{"lineNum":"  542","line":"{"},
{"lineNum":"  543","line":"    __first_ ^= __v.__first_;"},
{"lineNum":"  544","line":"}"},
{"lineNum":"  545","line":""},
{"lineNum":"  546","line":"template <size_t _Size>"},
{"lineNum":"  547","line":"inline"},
{"lineNum":"  548","line":"void"},
{"lineNum":"  549","line":"__bitset<1, _Size>::flip() _NOEXCEPT"},
{"lineNum":"  550","line":"{"},
{"lineNum":"  551","line":"    __storage_type __m = ~__storage_type(0) >> (__bits_per_word - _Size);"},
{"lineNum":"  552","line":"    __first_ = ~__first_;"},
{"lineNum":"  553","line":"    __first_ &= __m;"},
{"lineNum":"  554","line":"}"},
{"lineNum":"  555","line":""},
{"lineNum":"  556","line":"template <size_t _Size>"},
{"lineNum":"  557","line":"inline"},
{"lineNum":"  558","line":"unsigned long"},
{"lineNum":"  559","line":"__bitset<1, _Size>::to_ulong() const"},
{"lineNum":"  560","line":"{"},
{"lineNum":"  561","line":"    return __first_;"},
{"lineNum":"  562","line":"}"},
{"lineNum":"  563","line":""},
{"lineNum":"  564","line":"template <size_t _Size>"},
{"lineNum":"  565","line":"inline"},
{"lineNum":"  566","line":"unsigned long long"},
{"lineNum":"  567","line":"__bitset<1, _Size>::to_ullong() const"},
{"lineNum":"  568","line":"{"},
{"lineNum":"  569","line":"    return __first_;"},
{"lineNum":"  570","line":"}"},
{"lineNum":"  571","line":""},
{"lineNum":"  572","line":"template <size_t _Size>"},
{"lineNum":"  573","line":"inline"},
{"lineNum":"  574","line":"bool"},
{"lineNum":"  575","line":"__bitset<1, _Size>::all() const _NOEXCEPT"},
{"lineNum":"  576","line":"{"},
{"lineNum":"  577","line":"    __storage_type __m = ~__storage_type(0) >> (__bits_per_word - _Size);"},
{"lineNum":"  578","line":"    return !(~__first_ & __m);"},
{"lineNum":"  579","line":"}"},
{"lineNum":"  580","line":""},
{"lineNum":"  581","line":"template <size_t _Size>"},
{"lineNum":"  582","line":"inline"},
{"lineNum":"  583","line":"bool"},
{"lineNum":"  584","line":"__bitset<1, _Size>::any() const _NOEXCEPT"},
{"lineNum":"  585","line":"{"},
{"lineNum":"  586","line":"    __storage_type __m = ~__storage_type(0) >> (__bits_per_word - _Size);"},
{"lineNum":"  587","line":"    return __first_ & __m;"},
{"lineNum":"  588","line":"}"},
{"lineNum":"  589","line":""},
{"lineNum":"  590","line":"template <size_t _Size>"},
{"lineNum":"  591","line":"inline"},
{"lineNum":"  592","line":"size_t"},
{"lineNum":"  593","line":"__bitset<1, _Size>::__hash_code() const _NOEXCEPT"},
{"lineNum":"  594","line":"{"},
{"lineNum":"  595","line":"    return __first_;"},
{"lineNum":"  596","line":"}"},
{"lineNum":"  597","line":""},
{"lineNum":"  598","line":"template <>"},
{"lineNum":"  599","line":"class __bitset<0, 0>"},
{"lineNum":"  600","line":"{"},
{"lineNum":"  601","line":"public:"},
{"lineNum":"  602","line":"    typedef ptrdiff_t              difference_type;"},
{"lineNum":"  603","line":"    typedef size_t                 size_type;"},
{"lineNum":"  604","line":"    typedef size_type              __storage_type;"},
{"lineNum":"  605","line":"protected:"},
{"lineNum":"  606","line":"    typedef __bitset __self;"},
{"lineNum":"  607","line":"    typedef       __storage_type*  __storage_pointer;"},
{"lineNum":"  608","line":"    typedef const __storage_type*  __const_storage_pointer;"},
{"lineNum":"  609","line":"    static const unsigned __bits_per_word = static_cast<unsigned>(sizeof(__storage_type) * CHAR_BIT);"},
{"lineNum":"  610","line":""},
{"lineNum":"  611","line":"    friend class __bit_reference<__bitset>;"},
{"lineNum":"  612","line":"    friend class __bit_const_reference<__bitset>;"},
{"lineNum":"  613","line":"    friend class __bit_iterator<__bitset, false>;"},
{"lineNum":"  614","line":"    friend class __bit_iterator<__bitset, true>;"},
{"lineNum":"  615","line":"    friend struct __bit_array<__bitset>;"},
{"lineNum":"  616","line":""},
{"lineNum":"  617","line":"    typedef __bit_reference<__bitset>                  reference;"},
{"lineNum":"  618","line":"    typedef __bit_const_reference<__bitset>            const_reference;"},
{"lineNum":"  619","line":"    typedef __bit_iterator<__bitset, false>            iterator;"},
{"lineNum":"  620","line":"    typedef __bit_iterator<__bitset, true>             const_iterator;"},
{"lineNum":"  621","line":""},
{"lineNum":"  622","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  623","line":"    _LIBCPP_CONSTEXPR __bitset() _NOEXCEPT;"},
{"lineNum":"  624","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  625","line":"    explicit _LIBCPP_CONSTEXPR __bitset(unsigned long long) _NOEXCEPT;"},
{"lineNum":"  626","line":""},
{"lineNum":"  627","line":"    _LIBCPP_INLINE_VISIBILITY reference __make_ref(size_t) _NOEXCEPT"},
{"lineNum":"  628","line":"        {return reference(nullptr, 1);}"},
{"lineNum":"  629","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR const_reference __make_ref(size_t) const _NOEXCEPT"},
{"lineNum":"  630","line":"        {return const_reference(nullptr, 1);}"},
{"lineNum":"  631","line":"    _LIBCPP_INLINE_VISIBILITY iterator __make_iter(size_t) _NOEXCEPT"},
{"lineNum":"  632","line":"        {return iterator(nullptr, 0);}"},
{"lineNum":"  633","line":"    _LIBCPP_INLINE_VISIBILITY const_iterator __make_iter(size_t) const _NOEXCEPT"},
{"lineNum":"  634","line":"        {return const_iterator(nullptr, 0);}"},
{"lineNum":"  635","line":""},
{"lineNum":"  636","line":"    _LIBCPP_INLINE_VISIBILITY void operator&=(const __bitset&) _NOEXCEPT {}"},
{"lineNum":"  637","line":"    _LIBCPP_INLINE_VISIBILITY void operator|=(const __bitset&) _NOEXCEPT {}"},
{"lineNum":"  638","line":"    _LIBCPP_INLINE_VISIBILITY void operator^=(const __bitset&) _NOEXCEPT {}"},
{"lineNum":"  639","line":""},
{"lineNum":"  640","line":"    _LIBCPP_INLINE_VISIBILITY void flip() _NOEXCEPT {}"},
{"lineNum":"  641","line":""},
{"lineNum":"  642","line":"    _LIBCPP_INLINE_VISIBILITY unsigned long to_ulong() const {return 0;}"},
{"lineNum":"  643","line":"    _LIBCPP_INLINE_VISIBILITY unsigned long long to_ullong() const {return 0;}"},
{"lineNum":"  644","line":""},
{"lineNum":"  645","line":"    _LIBCPP_INLINE_VISIBILITY bool all() const _NOEXCEPT {return true;}"},
{"lineNum":"  646","line":"    _LIBCPP_INLINE_VISIBILITY bool any() const _NOEXCEPT {return false;}"},
{"lineNum":"  647","line":""},
{"lineNum":"  648","line":"    _LIBCPP_INLINE_VISIBILITY size_t __hash_code() const _NOEXCEPT {return 0;}"},
{"lineNum":"  649","line":"};"},
{"lineNum":"  650","line":""},
{"lineNum":"  651","line":"inline"},
{"lineNum":"  652","line":"_LIBCPP_CONSTEXPR"},
{"lineNum":"  653","line":"__bitset<0, 0>::__bitset() _NOEXCEPT"},
{"lineNum":"  654","line":"{"},
{"lineNum":"  655","line":"}"},
{"lineNum":"  656","line":""},
{"lineNum":"  657","line":"inline"},
{"lineNum":"  658","line":"_LIBCPP_CONSTEXPR"},
{"lineNum":"  659","line":"__bitset<0, 0>::__bitset(unsigned long long) _NOEXCEPT"},
{"lineNum":"  660","line":"{"},
{"lineNum":"  661","line":"}"},
{"lineNum":"  662","line":""},
{"lineNum":"  663","line":"template <size_t _Size> class _LIBCPP_TEMPLATE_VIS bitset;"},
{"lineNum":"  664","line":"template <size_t _Size> struct hash<bitset<_Size> >;"},
{"lineNum":"  665","line":""},
{"lineNum":"  666","line":"template <size_t _Size>"},
{"lineNum":"  667","line":"class _LIBCPP_TEMPLATE_VIS bitset"},
{"lineNum":"  668","line":"    : private __bitset<_Size == 0 ? 0 : (_Size - 1) / (sizeof(size_t) * CHAR_BIT) + 1, _Size>"},
{"lineNum":"  669","line":"{"},
{"lineNum":"  670","line":"public:"},
{"lineNum":"  671","line":"    static const unsigned __n_words = _Size == 0 ? 0 : (_Size - 1) / (sizeof(size_t) * CHAR_BIT) + 1;"},
{"lineNum":"  672","line":"    typedef __bitset<__n_words, _Size> base;"},
{"lineNum":"  673","line":""},
{"lineNum":"  674","line":"public:"},
{"lineNum":"  675","line":"    typedef typename base::reference       reference;"},
{"lineNum":"  676","line":"    typedef typename base::const_reference const_reference;"},
{"lineNum":"  677","line":""},
{"lineNum":"  678","line":"    // 23.3.5.1 constructors:"},
{"lineNum":"  679","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR bitset() _NOEXCEPT {}"},
{"lineNum":"  680","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":"  681","line":"        bitset(unsigned long long __v) _NOEXCEPT : base(__v) {}"},
{"lineNum":"  682","line":"    template<class _CharT, class = _EnableIf<_IsCharLikeType<_CharT>::value> >"},
{"lineNum":"  683","line":"        explicit bitset(const _CharT* __str,"},
{"lineNum":"  684","line":"                        typename basic_string<_CharT>::size_type __n = basic_string<_CharT>::npos,"},
{"lineNum":"  685","line":"                        _CharT __zero = _CharT(\'0\'), _CharT __one = _CharT(\'1\'));"},
{"lineNum":"  686","line":"    template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":"  687","line":"        explicit bitset(const basic_string<_CharT,_Traits,_Allocator>& __str,"},
{"lineNum":"  688","line":"                        typename basic_string<_CharT,_Traits,_Allocator>::size_type __pos = 0,"},
{"lineNum":"  689","line":"                        typename basic_string<_CharT,_Traits,_Allocator>::size_type __n ="},
{"lineNum":"  690","line":"                                (basic_string<_CharT,_Traits,_Allocator>::npos),"},
{"lineNum":"  691","line":"                        _CharT __zero = _CharT(\'0\'), _CharT __one = _CharT(\'1\'));"},
{"lineNum":"  692","line":""},
{"lineNum":"  693","line":"    // 23.3.5.2 bitset operations:"},
{"lineNum":"  694","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  695","line":"    bitset& operator&=(const bitset& __rhs) _NOEXCEPT;"},
{"lineNum":"  696","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  697","line":"    bitset& operator|=(const bitset& __rhs) _NOEXCEPT;"},
{"lineNum":"  698","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  699","line":"    bitset& operator^=(const bitset& __rhs) _NOEXCEPT;"},
{"lineNum":"  700","line":"    bitset& operator<<=(size_t __pos) _NOEXCEPT;"},
{"lineNum":"  701","line":"    bitset& operator>>=(size_t __pos) _NOEXCEPT;"},
{"lineNum":"  702","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  703","line":"    bitset& set() _NOEXCEPT;"},
{"lineNum":"  704","line":"    bitset& set(size_t __pos, bool __val = true);"},
{"lineNum":"  705","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  706","line":"    bitset& reset() _NOEXCEPT;"},
{"lineNum":"  707","line":"    bitset& reset(size_t __pos);"},
{"lineNum":"  708","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  709","line":"    bitset  operator~() const _NOEXCEPT;"},
{"lineNum":"  710","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  711","line":"    bitset& flip() _NOEXCEPT;"},
{"lineNum":"  712","line":"    bitset& flip(size_t __pos);"},
{"lineNum":"  713","line":""},
{"lineNum":"  714","line":"    // element access:"},
{"lineNum":"  715","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":"  716","line":"                              const_reference operator[](size_t __p) const {return base::__make_ref(__p);}"},
{"lineNum":"  717","line":"    _LIBCPP_INLINE_VISIBILITY       reference operator[](size_t __p)       {return base::__make_ref(__p);}"},
{"lineNum":"  718","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  719","line":"    unsigned long to_ulong() const;"},
{"lineNum":"  720","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  721","line":"    unsigned long long to_ullong() const;"},
{"lineNum":"  722","line":"    template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":"  723","line":"        basic_string<_CharT, _Traits, _Allocator> to_string(_CharT __zero = _CharT(\'0\'),"},
{"lineNum":"  724","line":"                                                            _CharT __one = _CharT(\'1\')) const;"},
{"lineNum":"  725","line":"    template <class _CharT, class _Traits>"},
{"lineNum":"  726","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  727","line":"        basic_string<_CharT, _Traits, allocator<_CharT> > to_string(_CharT __zero = _CharT(\'0\'),"},
{"lineNum":"  728","line":"                                                                    _CharT __one = _CharT(\'1\')) const;"},
{"lineNum":"  729","line":"    template <class _CharT>"},
{"lineNum":"  730","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  731","line":"        basic_string<_CharT, char_traits<_CharT>, allocator<_CharT> > to_string(_CharT __zero = _CharT(\'0\'),"},
{"lineNum":"  732","line":"                                                                                _CharT __one = _CharT(\'1\')) const;"},
{"lineNum":"  733","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  734","line":"    basic_string<char, char_traits<char>, allocator<char> > to_string(char __zero = \'0\',"},
{"lineNum":"  735","line":"                                                                      char __one = \'1\') const;"},
{"lineNum":"  736","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  737","line":"    size_t count() const _NOEXCEPT;"},
{"lineNum":"  738","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR size_t size() const _NOEXCEPT {return _Size;}"},
{"lineNum":"  739","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  740","line":"    bool operator==(const bitset& __rhs) const _NOEXCEPT;"},
{"lineNum":"  741","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  742","line":"    bool operator!=(const bitset& __rhs) const _NOEXCEPT;"},
{"lineNum":"  743","line":"    bool test(size_t __pos) const;"},
{"lineNum":"  744","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  745","line":"    bool all() const _NOEXCEPT;"},
{"lineNum":"  746","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  747","line":"    bool any() const _NOEXCEPT;"},
{"lineNum":"  748","line":"    _LIBCPP_INLINE_VISIBILITY bool none() const _NOEXCEPT {return !any();}"},
{"lineNum":"  749","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  750","line":"    bitset operator<<(size_t __pos) const _NOEXCEPT;"},
{"lineNum":"  751","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  752","line":"    bitset operator>>(size_t __pos) const _NOEXCEPT;"},
{"lineNum":"  753","line":""},
{"lineNum":"  754","line":"private:"},
{"lineNum":"  755","line":""},
{"lineNum":"  756","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  757","line":"    size_t __hash_code() const _NOEXCEPT {return base::__hash_code();}"},
{"lineNum":"  758","line":""},
{"lineNum":"  759","line":"    friend struct hash<bitset>;"},
{"lineNum":"  760","line":"};"},
{"lineNum":"  761","line":""},
{"lineNum":"  762","line":"template <size_t _Size>"},
{"lineNum":"  763","line":"template<class _CharT, class>"},
{"lineNum":"  764","line":"bitset<_Size>::bitset(const _CharT* __str,"},
{"lineNum":"  765","line":"                      typename basic_string<_CharT>::size_type __n,"},
{"lineNum":"  766","line":"                      _CharT __zero, _CharT __one)"},
{"lineNum":"  767","line":"{"},
{"lineNum":"  768","line":"    size_t __rlen = _VSTD::min(__n, char_traits<_CharT>::length(__str));"},
{"lineNum":"  769","line":"    for (size_t __i = 0; __i < __rlen; ++__i)"},
{"lineNum":"  770","line":"        if (__str[__i] != __zero && __str[__i] != __one)"},
{"lineNum":"  771","line":"            __throw_invalid_argument(\"bitset string ctor has invalid argument\");"},
{"lineNum":"  772","line":""},
{"lineNum":"  773","line":"    size_t _Mp = _VSTD::min(__rlen, _Size);"},
{"lineNum":"  774","line":"    size_t __i = 0;"},
{"lineNum":"  775","line":"    for (; __i < _Mp; ++__i)"},
{"lineNum":"  776","line":"    {"},
{"lineNum":"  777","line":"        _CharT __c = __str[_Mp - 1 - __i];"},
{"lineNum":"  778","line":"        (*this)[__i] = (__c == __one);"},
{"lineNum":"  779","line":"    }"},
{"lineNum":"  780","line":"    _VSTD::fill(base::__make_iter(__i), base::__make_iter(_Size), false);"},
{"lineNum":"  781","line":"}"},
{"lineNum":"  782","line":""},
{"lineNum":"  783","line":"template <size_t _Size>"},
{"lineNum":"  784","line":"template<class _CharT, class _Traits, class _Allocator>"},
{"lineNum":"  785","line":"bitset<_Size>::bitset(const basic_string<_CharT,_Traits,_Allocator>& __str,"},
{"lineNum":"  786","line":"       typename basic_string<_CharT,_Traits,_Allocator>::size_type __pos,"},
{"lineNum":"  787","line":"       typename basic_string<_CharT,_Traits,_Allocator>::size_type __n,"},
{"lineNum":"  788","line":"       _CharT __zero, _CharT __one)"},
{"lineNum":"  789","line":"{"},
{"lineNum":"  790","line":"    if (__pos > __str.size())"},
{"lineNum":"  791","line":"        __throw_out_of_range(\"bitset string pos out of range\");"},
{"lineNum":"  792","line":""},
{"lineNum":"  793","line":"    size_t __rlen = _VSTD::min(__n, __str.size() - __pos);"},
{"lineNum":"  794","line":"    for (size_t __i = __pos; __i < __pos + __rlen; ++__i)"},
{"lineNum":"  795","line":"        if (!_Traits::eq(__str[__i], __zero) && !_Traits::eq(__str[__i], __one))"},
{"lineNum":"  796","line":"            __throw_invalid_argument(\"bitset string ctor has invalid argument\");"},
{"lineNum":"  797","line":""},
{"lineNum":"  798","line":"    size_t _Mp = _VSTD::min(__rlen, _Size);"},
{"lineNum":"  799","line":"    size_t __i = 0;"},
{"lineNum":"  800","line":"    for (; __i < _Mp; ++__i)"},
{"lineNum":"  801","line":"    {"},
{"lineNum":"  802","line":"        _CharT __c = __str[__pos + _Mp - 1 - __i];"},
{"lineNum":"  803","line":"        (*this)[__i] = _Traits::eq(__c, __one);"},
{"lineNum":"  804","line":"    }"},
{"lineNum":"  805","line":"    _VSTD::fill(base::__make_iter(__i), base::__make_iter(_Size), false);"},
{"lineNum":"  806","line":"}"},
{"lineNum":"  807","line":""},
{"lineNum":"  808","line":"template <size_t _Size>"},
{"lineNum":"  809","line":"inline"},
{"lineNum":"  810","line":"bitset<_Size>&"},
{"lineNum":"  811","line":"bitset<_Size>::operator&=(const bitset& __rhs) _NOEXCEPT"},
{"lineNum":"  812","line":"{"},
{"lineNum":"  813","line":"    base::operator&=(__rhs);"},
{"lineNum":"  814","line":"    return *this;"},
{"lineNum":"  815","line":"}"},
{"lineNum":"  816","line":""},
{"lineNum":"  817","line":"template <size_t _Size>"},
{"lineNum":"  818","line":"inline"},
{"lineNum":"  819","line":"bitset<_Size>&"},
{"lineNum":"  820","line":"bitset<_Size>::operator|=(const bitset& __rhs) _NOEXCEPT"},
{"lineNum":"  821","line":"{"},
{"lineNum":"  822","line":"    base::operator|=(__rhs);"},
{"lineNum":"  823","line":"    return *this;"},
{"lineNum":"  824","line":"}"},
{"lineNum":"  825","line":""},
{"lineNum":"  826","line":"template <size_t _Size>"},
{"lineNum":"  827","line":"inline"},
{"lineNum":"  828","line":"bitset<_Size>&"},
{"lineNum":"  829","line":"bitset<_Size>::operator^=(const bitset& __rhs) _NOEXCEPT"},
{"lineNum":"  830","line":"{"},
{"lineNum":"  831","line":"    base::operator^=(__rhs);"},
{"lineNum":"  832","line":"    return *this;"},
{"lineNum":"  833","line":"}"},
{"lineNum":"  834","line":""},
{"lineNum":"  835","line":"template <size_t _Size>"},
{"lineNum":"  836","line":"bitset<_Size>&"},
{"lineNum":"  837","line":"bitset<_Size>::operator<<=(size_t __pos) _NOEXCEPT"},
{"lineNum":"  838","line":"{"},
{"lineNum":"  839","line":"    __pos = _VSTD::min(__pos, _Size);"},
{"lineNum":"  840","line":"    _VSTD::copy_backward(base::__make_iter(0), base::__make_iter(_Size - __pos), base::__make_iter(_Size));"},
{"lineNum":"  841","line":"    _VSTD::fill_n(base::__make_iter(0), __pos, false);"},
{"lineNum":"  842","line":"    return *this;"},
{"lineNum":"  843","line":"}"},
{"lineNum":"  844","line":""},
{"lineNum":"  845","line":"template <size_t _Size>"},
{"lineNum":"  846","line":"bitset<_Size>&"},
{"lineNum":"  847","line":"bitset<_Size>::operator>>=(size_t __pos) _NOEXCEPT"},
{"lineNum":"  848","line":"{"},
{"lineNum":"  849","line":"    __pos = _VSTD::min(__pos, _Size);"},
{"lineNum":"  850","line":"    _VSTD::copy(base::__make_iter(__pos), base::__make_iter(_Size), base::__make_iter(0));"},
{"lineNum":"  851","line":"    _VSTD::fill_n(base::__make_iter(_Size - __pos), __pos, false);"},
{"lineNum":"  852","line":"    return *this;"},
{"lineNum":"  853","line":"}"},
{"lineNum":"  854","line":""},
{"lineNum":"  855","line":"template <size_t _Size>"},
{"lineNum":"  856","line":"inline"},
{"lineNum":"  857","line":"bitset<_Size>&"},
{"lineNum":"  858","line":"bitset<_Size>::set() _NOEXCEPT"},
{"lineNum":"  859","line":"{"},
{"lineNum":"  860","line":"    _VSTD::fill_n(base::__make_iter(0), _Size, true);"},
{"lineNum":"  861","line":"    return *this;"},
{"lineNum":"  862","line":"}"},
{"lineNum":"  863","line":""},
{"lineNum":"  864","line":"template <size_t _Size>"},
{"lineNum":"  865","line":"bitset<_Size>&"},
{"lineNum":"  866","line":"bitset<_Size>::set(size_t __pos, bool __val)"},
{"lineNum":"  867","line":"{"},
{"lineNum":"  868","line":"    if (__pos >= _Size)"},
{"lineNum":"  869","line":"        __throw_out_of_range(\"bitset set argument out of range\");"},
{"lineNum":"  870","line":""},
{"lineNum":"  871","line":"    (*this)[__pos] = __val;"},
{"lineNum":"  872","line":"    return *this;"},
{"lineNum":"  873","line":"}"},
{"lineNum":"  874","line":""},
{"lineNum":"  875","line":"template <size_t _Size>"},
{"lineNum":"  876","line":"inline"},
{"lineNum":"  877","line":"bitset<_Size>&"},
{"lineNum":"  878","line":"bitset<_Size>::reset() _NOEXCEPT"},
{"lineNum":"  879","line":"{"},
{"lineNum":"  880","line":"    _VSTD::fill_n(base::__make_iter(0), _Size, false);"},
{"lineNum":"  881","line":"    return *this;"},
{"lineNum":"  882","line":"}"},
{"lineNum":"  883","line":""},
{"lineNum":"  884","line":"template <size_t _Size>"},
{"lineNum":"  885","line":"bitset<_Size>&"},
{"lineNum":"  886","line":"bitset<_Size>::reset(size_t __pos)"},
{"lineNum":"  887","line":"{"},
{"lineNum":"  888","line":"    if (__pos >= _Size)"},
{"lineNum":"  889","line":"        __throw_out_of_range(\"bitset reset argument out of range\");"},
{"lineNum":"  890","line":""},
{"lineNum":"  891","line":"    (*this)[__pos] = false;"},
{"lineNum":"  892","line":"    return *this;"},
{"lineNum":"  893","line":"}"},
{"lineNum":"  894","line":""},
{"lineNum":"  895","line":"template <size_t _Size>"},
{"lineNum":"  896","line":"inline"},
{"lineNum":"  897","line":"bitset<_Size>"},
{"lineNum":"  898","line":"bitset<_Size>::operator~() const _NOEXCEPT"},
{"lineNum":"  899","line":"{"},
{"lineNum":"  900","line":"    bitset __x(*this);"},
{"lineNum":"  901","line":"    __x.flip();"},
{"lineNum":"  902","line":"    return __x;"},
{"lineNum":"  903","line":"}"},
{"lineNum":"  904","line":""},
{"lineNum":"  905","line":"template <size_t _Size>"},
{"lineNum":"  906","line":"inline"},
{"lineNum":"  907","line":"bitset<_Size>&"},
{"lineNum":"  908","line":"bitset<_Size>::flip() _NOEXCEPT"},
{"lineNum":"  909","line":"{"},
{"lineNum":"  910","line":"    base::flip();"},
{"lineNum":"  911","line":"    return *this;"},
{"lineNum":"  912","line":"}"},
{"lineNum":"  913","line":""},
{"lineNum":"  914","line":"template <size_t _Size>"},
{"lineNum":"  915","line":"bitset<_Size>&"},
{"lineNum":"  916","line":"bitset<_Size>::flip(size_t __pos)"},
{"lineNum":"  917","line":"{"},
{"lineNum":"  918","line":"    if (__pos >= _Size)"},
{"lineNum":"  919","line":"        __throw_out_of_range(\"bitset flip argument out of range\");"},
{"lineNum":"  920","line":""},
{"lineNum":"  921","line":"    reference r = base::__make_ref(__pos);"},
{"lineNum":"  922","line":"    r = ~r;"},
{"lineNum":"  923","line":"    return *this;"},
{"lineNum":"  924","line":"}"},
{"lineNum":"  925","line":""},
{"lineNum":"  926","line":"template <size_t _Size>"},
{"lineNum":"  927","line":"inline"},
{"lineNum":"  928","line":"unsigned long"},
{"lineNum":"  929","line":"bitset<_Size>::to_ulong() const"},
{"lineNum":"  930","line":"{"},
{"lineNum":"  931","line":"    return base::to_ulong();"},
{"lineNum":"  932","line":"}"},
{"lineNum":"  933","line":""},
{"lineNum":"  934","line":"template <size_t _Size>"},
{"lineNum":"  935","line":"inline"},
{"lineNum":"  936","line":"unsigned long long"},
{"lineNum":"  937","line":"bitset<_Size>::to_ullong() const"},
{"lineNum":"  938","line":"{"},
{"lineNum":"  939","line":"    return base::to_ullong();"},
{"lineNum":"  940","line":"}"},
{"lineNum":"  941","line":""},
{"lineNum":"  942","line":"template <size_t _Size>"},
{"lineNum":"  943","line":"template <class _CharT, class _Traits, class _Allocator>"},
{"lineNum":"  944","line":"basic_string<_CharT, _Traits, _Allocator>"},
{"lineNum":"  945","line":"bitset<_Size>::to_string(_CharT __zero, _CharT __one) const"},
{"lineNum":"  946","line":"{"},
{"lineNum":"  947","line":"    basic_string<_CharT, _Traits, _Allocator> __r(_Size, __zero);"},
{"lineNum":"  948","line":"    for (size_t __i = 0; __i < _Size; ++__i)"},
{"lineNum":"  949","line":"    {"},
{"lineNum":"  950","line":"        if ((*this)[__i])"},
{"lineNum":"  951","line":"            __r[_Size - 1 - __i] = __one;"},
{"lineNum":"  952","line":"    }"},
{"lineNum":"  953","line":"    return __r;"},
{"lineNum":"  954","line":"}"},
{"lineNum":"  955","line":""},
{"lineNum":"  956","line":"template <size_t _Size>"},
{"lineNum":"  957","line":"template <class _CharT, class _Traits>"},
{"lineNum":"  958","line":"inline"},
{"lineNum":"  959","line":"basic_string<_CharT, _Traits, allocator<_CharT> >"},
{"lineNum":"  960","line":"bitset<_Size>::to_string(_CharT __zero, _CharT __one) const"},
{"lineNum":"  961","line":"{"},
{"lineNum":"  962","line":"    return to_string<_CharT, _Traits, allocator<_CharT> >(__zero, __one);"},
{"lineNum":"  963","line":"}"},
{"lineNum":"  964","line":""},
{"lineNum":"  965","line":"template <size_t _Size>"},
{"lineNum":"  966","line":"template <class _CharT>"},
{"lineNum":"  967","line":"inline"},
{"lineNum":"  968","line":"basic_string<_CharT, char_traits<_CharT>, allocator<_CharT> >"},
{"lineNum":"  969","line":"bitset<_Size>::to_string(_CharT __zero, _CharT __one) const"},
{"lineNum":"  970","line":"{"},
{"lineNum":"  971","line":"    return to_string<_CharT, char_traits<_CharT>, allocator<_CharT> >(__zero, __one);"},
{"lineNum":"  972","line":"}"},
{"lineNum":"  973","line":""},
{"lineNum":"  974","line":"template <size_t _Size>"},
{"lineNum":"  975","line":"inline"},
{"lineNum":"  976","line":"basic_string<char, char_traits<char>, allocator<char> >"},
{"lineNum":"  977","line":"bitset<_Size>::to_string(char __zero, char __one) const"},
{"lineNum":"  978","line":"{"},
{"lineNum":"  979","line":"    return to_string<char, char_traits<char>, allocator<char> >(__zero, __one);"},
{"lineNum":"  980","line":"}"},
{"lineNum":"  981","line":""},
{"lineNum":"  982","line":"template <size_t _Size>"},
{"lineNum":"  983","line":"inline"},
{"lineNum":"  984","line":"size_t"},
{"lineNum":"  985","line":"bitset<_Size>::count() const _NOEXCEPT"},
{"lineNum":"  986","line":"{"},
{"lineNum":"  987","line":"    return static_cast<size_t>(_VSTD::__count_bool_true(base::__make_iter(0), _Size));"},
{"lineNum":"  988","line":"}"},
{"lineNum":"  989","line":""},
{"lineNum":"  990","line":"template <size_t _Size>"},
{"lineNum":"  991","line":"inline"},
{"lineNum":"  992","line":"bool"},
{"lineNum":"  993","line":"bitset<_Size>::operator==(const bitset& __rhs) const _NOEXCEPT"},
{"lineNum":"  994","line":"{"},
{"lineNum":"  995","line":"    return _VSTD::equal(base::__make_iter(0), base::__make_iter(_Size), __rhs.__make_iter(0));"},
{"lineNum":"  996","line":"}"},
{"lineNum":"  997","line":""},
{"lineNum":"  998","line":"template <size_t _Size>"},
{"lineNum":"  999","line":"inline"},
{"lineNum":" 1000","line":"bool"},
{"lineNum":" 1001","line":"bitset<_Size>::operator!=(const bitset& __rhs) const _NOEXCEPT"},
{"lineNum":" 1002","line":"{"},
{"lineNum":" 1003","line":"    return !(*this == __rhs);"},
{"lineNum":" 1004","line":"}"},
{"lineNum":" 1005","line":""},
{"lineNum":" 1006","line":"template <size_t _Size>"},
{"lineNum":" 1007","line":"bool"},
{"lineNum":" 1008","line":"bitset<_Size>::test(size_t __pos) const"},
{"lineNum":" 1009","line":"{"},
{"lineNum":" 1010","line":"    if (__pos >= _Size)"},
{"lineNum":" 1011","line":"        __throw_out_of_range(\"bitset test argument out of range\");"},
{"lineNum":" 1012","line":""},
{"lineNum":" 1013","line":"    return (*this)[__pos];"},
{"lineNum":" 1014","line":"}"},
{"lineNum":" 1015","line":""},
{"lineNum":" 1016","line":"template <size_t _Size>"},
{"lineNum":" 1017","line":"inline"},
{"lineNum":" 1018","line":"bool"},
{"lineNum":" 1019","line":"bitset<_Size>::all() const _NOEXCEPT"},
{"lineNum":" 1020","line":"{"},
{"lineNum":" 1021","line":"    return base::all();"},
{"lineNum":" 1022","line":"}"},
{"lineNum":" 1023","line":""},
{"lineNum":" 1024","line":"template <size_t _Size>"},
{"lineNum":" 1025","line":"inline"},
{"lineNum":" 1026","line":"bool"},
{"lineNum":" 1027","line":"bitset<_Size>::any() const _NOEXCEPT"},
{"lineNum":" 1028","line":"{"},
{"lineNum":" 1029","line":"    return base::any();"},
{"lineNum":" 1030","line":"}"},
{"lineNum":" 1031","line":""},
{"lineNum":" 1032","line":"template <size_t _Size>"},
{"lineNum":" 1033","line":"inline"},
{"lineNum":" 1034","line":"bitset<_Size>"},
{"lineNum":" 1035","line":"bitset<_Size>::operator<<(size_t __pos) const _NOEXCEPT"},
{"lineNum":" 1036","line":"{"},
{"lineNum":" 1037","line":"    bitset __r = *this;"},
{"lineNum":" 1038","line":"    __r <<= __pos;"},
{"lineNum":" 1039","line":"    return __r;"},
{"lineNum":" 1040","line":"}"},
{"lineNum":" 1041","line":""},
{"lineNum":" 1042","line":"template <size_t _Size>"},
{"lineNum":" 1043","line":"inline"},
{"lineNum":" 1044","line":"bitset<_Size>"},
{"lineNum":" 1045","line":"bitset<_Size>::operator>>(size_t __pos) const _NOEXCEPT"},
{"lineNum":" 1046","line":"{"},
{"lineNum":" 1047","line":"    bitset __r = *this;"},
{"lineNum":" 1048","line":"    __r >>= __pos;"},
{"lineNum":" 1049","line":"    return __r;"},
{"lineNum":" 1050","line":"}"},
{"lineNum":" 1051","line":""},
{"lineNum":" 1052","line":"template <size_t _Size>"},
{"lineNum":" 1053","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1054","line":"bitset<_Size>"},
{"lineNum":" 1055","line":"operator&(const bitset<_Size>& __x, const bitset<_Size>& __y) _NOEXCEPT"},
{"lineNum":" 1056","line":"{"},
{"lineNum":" 1057","line":"    bitset<_Size> __r = __x;"},
{"lineNum":" 1058","line":"    __r &= __y;"},
{"lineNum":" 1059","line":"    return __r;"},
{"lineNum":" 1060","line":"}"},
{"lineNum":" 1061","line":""},
{"lineNum":" 1062","line":"template <size_t _Size>"},
{"lineNum":" 1063","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1064","line":"bitset<_Size>"},
{"lineNum":" 1065","line":"operator|(const bitset<_Size>& __x, const bitset<_Size>& __y) _NOEXCEPT"},
{"lineNum":" 1066","line":"{"},
{"lineNum":" 1067","line":"    bitset<_Size> __r = __x;"},
{"lineNum":" 1068","line":"    __r |= __y;"},
{"lineNum":" 1069","line":"    return __r;"},
{"lineNum":" 1070","line":"}"},
{"lineNum":" 1071","line":""},
{"lineNum":" 1072","line":"template <size_t _Size>"},
{"lineNum":" 1073","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1074","line":"bitset<_Size>"},
{"lineNum":" 1075","line":"operator^(const bitset<_Size>& __x, const bitset<_Size>& __y) _NOEXCEPT"},
{"lineNum":" 1076","line":"{"},
{"lineNum":" 1077","line":"    bitset<_Size> __r = __x;"},
{"lineNum":" 1078","line":"    __r ^= __y;"},
{"lineNum":" 1079","line":"    return __r;"},
{"lineNum":" 1080","line":"}"},
{"lineNum":" 1081","line":""},
{"lineNum":" 1082","line":"template <size_t _Size>"},
{"lineNum":" 1083","line":"struct _LIBCPP_TEMPLATE_VIS hash<bitset<_Size> >"},
{"lineNum":" 1084","line":"    : public unary_function<bitset<_Size>, size_t>"},
{"lineNum":" 1085","line":"{"},
{"lineNum":" 1086","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1087","line":"    size_t operator()(const bitset<_Size>& __bs) const _NOEXCEPT"},
{"lineNum":" 1088","line":"        {return __bs.__hash_code();}"},
{"lineNum":" 1089","line":"};"},
{"lineNum":" 1090","line":""},
{"lineNum":" 1091","line":"template <class _CharT, class _Traits, size_t _Size>"},
{"lineNum":" 1092","line":"basic_istream<_CharT, _Traits>&"},
{"lineNum":" 1093","line":"operator>>(basic_istream<_CharT, _Traits>& __is, bitset<_Size>& __x);"},
{"lineNum":" 1094","line":""},
{"lineNum":" 1095","line":"template <class _CharT, class _Traits, size_t _Size>"},
{"lineNum":" 1096","line":"basic_ostream<_CharT, _Traits>&"},
{"lineNum":" 1097","line":"operator<<(basic_ostream<_CharT, _Traits>& __os, const bitset<_Size>& __x);"},
{"lineNum":" 1098","line":""},
{"lineNum":" 1099","line":"_LIBCPP_END_NAMESPACE_STD"},
{"lineNum":" 1100","line":""},
{"lineNum":" 1101","line":"_LIBCPP_POP_MACROS"},
{"lineNum":" 1102","line":""},
{"lineNum":" 1103","line":"#endif // _LIBCPP_BITSET"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 3, "covered" : 0,};
var merged_data = [];
