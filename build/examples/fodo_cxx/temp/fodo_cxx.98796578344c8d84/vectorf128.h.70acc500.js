var data = {lines:[
{"lineNum":"    1","line":"/****************************  vectorf128.h   *******************************"},
{"lineNum":"    2","line":"* Author:        Agner Fog"},
{"lineNum":"    3","line":"* Date created:  2012-05-30"},
{"lineNum":"    4","line":"* Last modified: 2019-08-01"},
{"lineNum":"    5","line":"* Version:       1.40.00"},
{"lineNum":"    6","line":"* Project:       vector class library"},
{"lineNum":"    7","line":"* Description:"},
{"lineNum":"    8","line":"* Header file defining 128-bit floating point vector classes"},
{"lineNum":"    9","line":"*"},
{"lineNum":"   10","line":"* Instructions: see vcl_manual.pdf"},
{"lineNum":"   11","line":"*"},
{"lineNum":"   12","line":"* The following vector classes are defined here:"},
{"lineNum":"   13","line":"* Vec4f     Vector of 4 single precision floating point numbers"},
{"lineNum":"   14","line":"* Vec4fb    Vector of 4 Booleans for use with Vec4f"},
{"lineNum":"   15","line":"* Vec2d     Vector of 2 double precision floating point numbers"},
{"lineNum":"   16","line":"* Vec2db    Vector of 2 Booleans for use with Vec2d"},
{"lineNum":"   17","line":"*"},
{"lineNum":"   18","line":"* Each vector object is represented internally in the CPU as a 128-bit register."},
{"lineNum":"   19","line":"* This header file defines operators and functions for these vectors."},
{"lineNum":"   20","line":"*"},
{"lineNum":"   21","line":"* (c) Copyright 2012-2019 Agner Fog."},
{"lineNum":"   22","line":"* Apache License version 2.0 or later."},
{"lineNum":"   23","line":"*****************************************************************************/"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"// check combination of header files"},
{"lineNum":"   26","line":"#ifndef VECTORCLASS_H"},
{"lineNum":"   27","line":"#include \"vectorclass.h\""},
{"lineNum":"   28","line":"#endif"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"#if VECTORCLASS_H > 19999"},
{"lineNum":"   31","line":"#error Incompatible versions of vector class library mixed"},
{"lineNum":"   32","line":"#endif"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"#ifndef VECTORF128_H"},
{"lineNum":"   35","line":"#define VECTORF128_H"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"#ifdef VCL_NAMESPACE"},
{"lineNum":"   39","line":"namespace VCL_NAMESPACE {"},
{"lineNum":"   40","line":"#endif"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"/*****************************************************************************"},
{"lineNum":"   43","line":"*"},
{"lineNum":"   44","line":"*          select functions"},
{"lineNum":"   45","line":"*"},
{"lineNum":"   46","line":"*****************************************************************************/"},
{"lineNum":"   47","line":"// Select between two __m128 sources, element by element. Used in various functions"},
{"lineNum":"   48","line":"// and operators. Corresponds to this pseudocode:"},
{"lineNum":"   49","line":"// for (int i = 0; i < 4; i++) result[i] = s[i] ? a[i] : b[i];"},
{"lineNum":"   50","line":"// Each element in s must be either 0 (false) or 0xFFFFFFFF (true)."},
{"lineNum":"   51","line":"// No other values are allowed for broad boolean vectors."},
{"lineNum":"   52","line":"// The implementation depends on the instruction set:"},
{"lineNum":"   53","line":"// If SSE4.1 is supported then only bit 31 in each dword of s is checked,"},
{"lineNum":"   54","line":"// otherwise all bits in s are used."},
{"lineNum":"   55","line":"static inline __m128 selectf (__m128 const & s, __m128 const & a, __m128 const & b) {"},
{"lineNum":"   56","line":"#if INSTRSET >= 5   // SSE4.1 supported"},
{"lineNum":"   57","line":"    return _mm_blendv_ps (b, a, s);"},
{"lineNum":"   58","line":"    // to do in version 2: _mm_blend_ps if s is a compile time constant"},
{"lineNum":"   59","line":"#else"},
{"lineNum":"   60","line":"    return _mm_or_ps("},
{"lineNum":"   61","line":"        _mm_and_ps(s,a),"},
{"lineNum":"   62","line":"        _mm_andnot_ps(s,b));"},
{"lineNum":"   63","line":"#endif"},
{"lineNum":"   64","line":"}"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"// Same, with two __m128d sources."},
{"lineNum":"   67","line":"// and operators. Corresponds to this pseudocode:"},
{"lineNum":"   68","line":"// for (int i = 0; i < 2; i++) result[i] = s[i] ? a[i] : b[i];"},
{"lineNum":"   69","line":"// Each element in s must be either 0 (false) or 0xFFFFFFFFFFFFFFFF (true). No other"},
{"lineNum":"   70","line":"// No other values are allowed for broad boolean vectors."},
{"lineNum":"   71","line":"// The implementation depends on the instruction set:"},
{"lineNum":"   72","line":"// If SSE4.1 is supported then only bit 63 in each dword of s is checked,"},
{"lineNum":"   73","line":"// otherwise all bits in s are used."},
{"lineNum":"   74","line":"static inline __m128d selectd (__m128d const & s, __m128d const & a, __m128d const & b) {"},
{"lineNum":"   75","line":"#if INSTRSET >= 5   // SSE4.1 supported"},
{"lineNum":"   76","line":"    return _mm_blendv_pd (b, a, s);"},
{"lineNum":"   77","line":"#else"},
{"lineNum":"   78","line":"    return _mm_or_pd(","class":"lineNoCov","hits":"0","possible_hits":"91",},
{"lineNum":"   79","line":"        _mm_and_pd(s,a),","class":"lineNoCov","hits":"0","possible_hits":"87",},
{"lineNum":"   80","line":"        _mm_andnot_pd(s,b));","class":"lineNoCov","hits":"0","possible_hits":"83",},
{"lineNum":"   81","line":"#endif"},
{"lineNum":"   82","line":"}"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"/*****************************************************************************"},
{"lineNum":"   86","line":"*"},
{"lineNum":"   87","line":"*          Vec4fb: Vector of 4 Booleans for use with Vec4f"},
{"lineNum":"   88","line":"*"},
{"lineNum":"   89","line":"*****************************************************************************/"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"class Vec4fb {"},
{"lineNum":"   92","line":"protected:"},
{"lineNum":"   93","line":"    __m128 xmm; // Float vector"},
{"lineNum":"   94","line":"public:"},
{"lineNum":"   95","line":"    // Default constructor:"},
{"lineNum":"   96","line":"    Vec4fb() {"},
{"lineNum":"   97","line":"    }"},
{"lineNum":"   98","line":"    // Constructor to build from all elements:"},
{"lineNum":"   99","line":"    Vec4fb(bool b0, bool b1, bool b2, bool b3) {"},
{"lineNum":"  100","line":"        xmm = _mm_castsi128_ps(_mm_setr_epi32(-(int)b0, -(int)b1, -(int)b2, -(int)b3));"},
{"lineNum":"  101","line":"    }"},
{"lineNum":"  102","line":"    // Constructor to convert from type __m128 used in intrinsics:"},
{"lineNum":"  103","line":"    Vec4fb(__m128 const & x) {"},
{"lineNum":"  104","line":"        xmm = x;"},
{"lineNum":"  105","line":"    }"},
{"lineNum":"  106","line":"    // Assignment operator to convert from type __m128 used in intrinsics:"},
{"lineNum":"  107","line":"    Vec4fb & operator = (__m128 const & x) {"},
{"lineNum":"  108","line":"        xmm = x;"},
{"lineNum":"  109","line":"        return *this;"},
{"lineNum":"  110","line":"    }"},
{"lineNum":"  111","line":"    // Constructor to broadcast scalar value:"},
{"lineNum":"  112","line":"    Vec4fb(bool b) {"},
{"lineNum":"  113","line":"        xmm = _mm_castsi128_ps(_mm_set1_epi32(-int32_t(b)));"},
{"lineNum":"  114","line":"    }"},
{"lineNum":"  115","line":"    // Assignment operator to broadcast scalar value:"},
{"lineNum":"  116","line":"    Vec4fb & operator = (bool b) {"},
{"lineNum":"  117","line":"        *this = Vec4fb(b);"},
{"lineNum":"  118","line":"        return *this;"},
{"lineNum":"  119","line":"    }"},
{"lineNum":"  120","line":"    // Constructor to convert from type Vec4ib used as Boolean for integer vectors"},
{"lineNum":"  121","line":"    Vec4fb(Vec4ib const & x) {"},
{"lineNum":"  122","line":"        xmm = _mm_castsi128_ps(x);"},
{"lineNum":"  123","line":"    }"},
{"lineNum":"  124","line":"    // Assignment operator to convert from type Vec4ib used as Boolean for integer vectors"},
{"lineNum":"  125","line":"    Vec4fb & operator = (Vec4ib const & x) {"},
{"lineNum":"  126","line":"        xmm = _mm_castsi128_ps(x);"},
{"lineNum":"  127","line":"        return *this;"},
{"lineNum":"  128","line":"    }"},
{"lineNum":"  129","line":"    // Type cast operator to convert to __m128 used in intrinsics"},
{"lineNum":"  130","line":"    operator __m128() const {"},
{"lineNum":"  131","line":"        return xmm;"},
{"lineNum":"  132","line":"    }"},
{"lineNum":"  133","line":"    /* Clang problem:"},
{"lineNum":"  134","line":"    The Clang compiler treats the intrinsic vector types __m128, __m128i, and __m128f as identical."},
{"lineNum":"  135","line":"    I have reported this problem in 2013 but it is still not fixed in 2019!"},
{"lineNum":"  136","line":"    See the bug report at https://bugs.llvm.org/show_bug.cgi?id=17164"},
{"lineNum":"  137","line":"    Additional problem: The version number is not consistent across platforms. The Apple build has"},
{"lineNum":"  138","line":"    different version numbers. We have to rely on __apple_build_version__ on the Mac platform:"},
{"lineNum":"  139","line":"    http://llvm.org/bugs/show_bug.cgi?id=12643"},
{"lineNum":"  140","line":"    I have received reports that there was no aliasing of vector types on __apple_build_version__ = 6020053"},
{"lineNum":"  141","line":"    but apparently the problem has come back. The aliasing of vector types has been reported on"},
{"lineNum":"  142","line":"    __apple_build_version__ = 8000042"},
{"lineNum":"  143","line":"    We have to make switches here when - hopefully - the error some day has been fixed."},
{"lineNum":"  144","line":"    We need different version checks with and whithout __apple_build_version__"},
{"lineNum":"  145","line":"    */"},
{"lineNum":"  146","line":"#ifndef FIX_CLANG_VECTOR_ALIAS_AMBIGUITY"},
{"lineNum":"  147","line":"    // Type cast operator to convert to type Vec4ib used as Boolean for integer vectors"},
{"lineNum":"  148","line":"    operator Vec4ib() const {"},
{"lineNum":"  149","line":"        return _mm_castps_si128(xmm);"},
{"lineNum":"  150","line":"    }"},
{"lineNum":"  151","line":"#endif"},
{"lineNum":"  152","line":"    // Member function to change a single element in vector"},
{"lineNum":"  153","line":"    // Note: This function is inefficient. Use load function if changing more than one element"},
{"lineNum":"  154","line":"    Vec4fb const & insert(int index, bool value) {"},
{"lineNum":"  155","line":"        static const int32_t maskl[8] = {0,0,0,0,-1,0,0,0};"},
{"lineNum":"  156","line":"        __m128 mask  = _mm_loadu_ps((float const*)(maskl+4-(index & 3))); // mask with FFFFFFFF at index position"},
{"lineNum":"  157","line":"        if (value) {"},
{"lineNum":"  158","line":"            xmm = _mm_or_ps(xmm,mask);"},
{"lineNum":"  159","line":"        }"},
{"lineNum":"  160","line":"        else {"},
{"lineNum":"  161","line":"            xmm = _mm_andnot_ps(mask,xmm);"},
{"lineNum":"  162","line":"        }"},
{"lineNum":"  163","line":"        return *this;"},
{"lineNum":"  164","line":"    }"},
{"lineNum":"  165","line":"    // Member function extract a single element from vector"},
{"lineNum":"  166","line":"    bool extract(int index) const {"},
{"lineNum":"  167","line":"        return Vec4ib(_mm_castps_si128(xmm)).extract(index);"},
{"lineNum":"  168","line":"    }"},
{"lineNum":"  169","line":"    // Extract a single element. Operator [] can only read an element, not write."},
{"lineNum":"  170","line":"    bool operator [] (int index) const {"},
{"lineNum":"  171","line":"        return extract(index);"},
{"lineNum":"  172","line":"    }"},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"    // Member function to change a bitfield to a boolean vector"},
{"lineNum":"  175","line":"    Vec4fb & load_bits(uint8_t a) {"},
{"lineNum":"  176","line":"        Vec4ib b; b.load_bits(a);"},
{"lineNum":"  177","line":"        xmm = _mm_castsi128_ps(b);"},
{"lineNum":"  178","line":"        return *this;"},
{"lineNum":"  179","line":"    }"},
{"lineNum":"  180","line":"    static int size() {"},
{"lineNum":"  181","line":"        return 4;"},
{"lineNum":"  182","line":"    }"},
{"lineNum":"  183","line":"    static int elementtype() {"},
{"lineNum":"  184","line":"        return 3;"},
{"lineNum":"  185","line":"    }"},
{"lineNum":"  186","line":"private: // Prevent constructing from int, etc."},
{"lineNum":"  187","line":"    Vec4fb(int b);"},
{"lineNum":"  188","line":"    Vec4fb & operator = (int x);"},
{"lineNum":"  189","line":"};"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"/*****************************************************************************"},
{"lineNum":"  193","line":"*"},
{"lineNum":"  194","line":"*          Operators for Vec4fb"},
{"lineNum":"  195","line":"*"},
{"lineNum":"  196","line":"*****************************************************************************/"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"// vector operator & : bitwise and"},
{"lineNum":"  199","line":"static inline Vec4fb operator & (Vec4fb const & a, Vec4fb const & b) {"},
{"lineNum":"  200","line":"    return _mm_and_ps(a, b);"},
{"lineNum":"  201","line":"}"},
{"lineNum":"  202","line":"static inline Vec4fb operator && (Vec4fb const & a, Vec4fb const & b) {"},
{"lineNum":"  203","line":"    return a & b;"},
{"lineNum":"  204","line":"}"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"// vector operator &= : bitwise and"},
{"lineNum":"  207","line":"static inline Vec4fb & operator &= (Vec4fb & a, Vec4fb const & b) {"},
{"lineNum":"  208","line":"    a = a & b;"},
{"lineNum":"  209","line":"    return a;"},
{"lineNum":"  210","line":"}"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"// vector operator | : bitwise or"},
{"lineNum":"  213","line":"static inline Vec4fb operator | (Vec4fb const & a, Vec4fb const & b) {"},
{"lineNum":"  214","line":"    return _mm_or_ps(a, b);"},
{"lineNum":"  215","line":"}"},
{"lineNum":"  216","line":"static inline Vec4fb operator || (Vec4fb const & a, Vec4fb const & b) {"},
{"lineNum":"  217","line":"    return a | b;"},
{"lineNum":"  218","line":"}"},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"// vector operator |= : bitwise or"},
{"lineNum":"  221","line":"static inline Vec4fb & operator |= (Vec4fb & a, Vec4fb const & b) {"},
{"lineNum":"  222","line":"    a = a | b;"},
{"lineNum":"  223","line":"    return a;"},
{"lineNum":"  224","line":"}"},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"// vector operator ~ : bitwise not"},
{"lineNum":"  227","line":"static inline Vec4fb operator ~ (Vec4fb const & a) {"},
{"lineNum":"  228","line":"    return _mm_xor_ps(a, _mm_castsi128_ps(_mm_set1_epi32(-1)));"},
{"lineNum":"  229","line":"}"},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"// vector operator ^ : bitwise xor"},
{"lineNum":"  232","line":"static inline Vec4fb operator ^ (Vec4fb const & a, Vec4fb const & b) {"},
{"lineNum":"  233","line":"    return _mm_xor_ps(a, b);"},
{"lineNum":"  234","line":"}"},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":"// vector operator == : xnor"},
{"lineNum":"  237","line":"static inline Vec4fb operator == (Vec4fb const & a, Vec4fb const & b) {"},
{"lineNum":"  238","line":"    return Vec4fb(a ^ Vec4fb(~b));"},
{"lineNum":"  239","line":"}"},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"// vector operator != : xor"},
{"lineNum":"  242","line":"static inline Vec4fb operator != (Vec4fb const & a, Vec4fb const & b) {"},
{"lineNum":"  243","line":"    return Vec4fb(a ^ b);"},
{"lineNum":"  244","line":"}"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"// vector operator ^= : bitwise xor"},
{"lineNum":"  247","line":"static inline Vec4fb & operator ^= (Vec4fb & a, Vec4fb const & b) {"},
{"lineNum":"  248","line":"    a = a ^ b;"},
{"lineNum":"  249","line":"    return a;"},
{"lineNum":"  250","line":"}"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"// vector operator ! : logical not"},
{"lineNum":"  253","line":"// (operator ! is less efficient than operator ~. Use only where not all bits in an element are the same)"},
{"lineNum":"  254","line":"static inline Vec4fb operator ! (Vec4fb const & a) {"},
{"lineNum":"  255","line":"    return Vec4fb( ! Vec4ib(a));"},
{"lineNum":"  256","line":"}"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"// Functions for Vec4fb"},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"// andnot: a & ~ b"},
{"lineNum":"  261","line":"static inline Vec4fb andnot(Vec4fb const & a, Vec4fb const & b) {"},
{"lineNum":"  262","line":"    return _mm_andnot_ps(b, a);"},
{"lineNum":"  263","line":"}"},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":""},
{"lineNum":"  266","line":"/*****************************************************************************"},
{"lineNum":"  267","line":"*"},
{"lineNum":"  268","line":"*          Horizontal Boolean functions"},
{"lineNum":"  269","line":"*"},
{"lineNum":"  270","line":"*****************************************************************************/"},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"// horizontal_and. Returns true if all bits are 1"},
{"lineNum":"  273","line":"static inline bool horizontal_and (Vec4fb const & a) {"},
{"lineNum":"  274","line":"    return _mm_movemask_ps(a) == 0x0F;"},
{"lineNum":"  275","line":"    //return horizontal_and(Vec128b(_mm_castps_si128(a)));"},
{"lineNum":"  276","line":"}"},
{"lineNum":"  277","line":""},
{"lineNum":"  278","line":"// horizontal_or. Returns true if at least one bit is 1"},
{"lineNum":"  279","line":"static inline bool horizontal_or (Vec4fb const & a) {"},
{"lineNum":"  280","line":"    return _mm_movemask_ps(a) != 0;"},
{"lineNum":"  281","line":"    //return horizontal_or(Vec128b(_mm_castps_si128(a)));"},
{"lineNum":"  282","line":"}"},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":""},
{"lineNum":"  285","line":"/*****************************************************************************"},
{"lineNum":"  286","line":"*"},
{"lineNum":"  287","line":"*          Vec2db: Vector of 2 Booleans for use with Vec2d"},
{"lineNum":"  288","line":"*"},
{"lineNum":"  289","line":"*****************************************************************************/"},
{"lineNum":"  290","line":""},
{"lineNum":"  291","line":"class Vec2db {"},
{"lineNum":"  292","line":"protected:"},
{"lineNum":"  293","line":"    __m128d xmm; // Double vector"},
{"lineNum":"  294","line":"public:"},
{"lineNum":"  295","line":"    // Default constructor:"},
{"lineNum":"  296","line":"    Vec2db() {"},
{"lineNum":"  297","line":"    }"},
{"lineNum":"  298","line":"    // Constructor to broadcast the same value into all elements:"},
{"lineNum":"  299","line":"    // Constructor to build from all elements:"},
{"lineNum":"  300","line":"    Vec2db(bool b0, bool b1) {"},
{"lineNum":"  301","line":"        xmm = _mm_castsi128_pd(_mm_setr_epi32(-(int)b0, -(int)b0, -(int)b1, -(int)b1));"},
{"lineNum":"  302","line":"    }"},
{"lineNum":"  303","line":"    // Constructor to convert from type __m128d used in intrinsics:"},
{"lineNum":"  304","line":"    Vec2db(__m128d const & x) {"},
{"lineNum":"  305","line":"        xmm = x;"},
{"lineNum":"  306","line":"    }"},
{"lineNum":"  307","line":"    // Assignment operator to convert from type __m128d used in intrinsics:"},
{"lineNum":"  308","line":"    Vec2db & operator = (__m128d const & x) {"},
{"lineNum":"  309","line":"        xmm = x;"},
{"lineNum":"  310","line":"        return *this;"},
{"lineNum":"  311","line":"    }"},
{"lineNum":"  312","line":"    // Constructor to broadcast scalar value:"},
{"lineNum":"  313","line":"    Vec2db(bool b) {"},
{"lineNum":"  314","line":"        xmm = _mm_castsi128_pd(_mm_set1_epi32(-int32_t(b)));"},
{"lineNum":"  315","line":"    }"},
{"lineNum":"  316","line":"    // Assignment operator to broadcast scalar value:"},
{"lineNum":"  317","line":"    Vec2db & operator = (bool b) {"},
{"lineNum":"  318","line":"        *this = Vec2db(b);"},
{"lineNum":"  319","line":"        return *this;"},
{"lineNum":"  320","line":"    }"},
{"lineNum":"  321","line":"    // Constructor to convert from type Vec2qb used as Boolean for integer vectors"},
{"lineNum":"  322","line":"    Vec2db(Vec2qb const & x) {"},
{"lineNum":"  323","line":"        xmm = _mm_castsi128_pd(x);"},
{"lineNum":"  324","line":"    }"},
{"lineNum":"  325","line":"    // Assignment operator to convert from type Vec2qb used as Boolean for integer vectors"},
{"lineNum":"  326","line":"    Vec2db & operator = (Vec2qb const & x) {"},
{"lineNum":"  327","line":"        xmm = _mm_castsi128_pd(x);"},
{"lineNum":"  328","line":"        return *this;"},
{"lineNum":"  329","line":"    }"},
{"lineNum":"  330","line":"    // Type cast operator to convert to __m128d used in intrinsics"},
{"lineNum":"  331","line":"    operator __m128d() const {"},
{"lineNum":"  332","line":"        return xmm;"},
{"lineNum":"  333","line":"    }"},
{"lineNum":"  334","line":"#ifndef FIX_CLANG_VECTOR_ALIAS_AMBIGUITY"},
{"lineNum":"  335","line":"    // Type cast operator to convert to type Vec2qb used as Boolean for integer vectors"},
{"lineNum":"  336","line":"    operator Vec2qb() const {"},
{"lineNum":"  337","line":"        return _mm_castpd_si128(xmm);"},
{"lineNum":"  338","line":"    }"},
{"lineNum":"  339","line":"#endif"},
{"lineNum":"  340","line":"    // Member function to change a single element in vector"},
{"lineNum":"  341","line":"    // Note: This function is inefficient. Use load function if changing more than one element"},
{"lineNum":"  342","line":"    Vec2db const & insert(int index, bool value) {"},
{"lineNum":"  343","line":"        static const int32_t maskl[8] = {0,0,0,0,-1,-1,0,0};"},
{"lineNum":"  344","line":"        __m128 mask  = _mm_loadu_ps((float const*)(maskl+4-(index&1)*2)); // mask with FFFFFFFFFFFFFFFF at index position"},
{"lineNum":"  345","line":"        if (value) {"},
{"lineNum":"  346","line":"            xmm = _mm_or_pd(xmm,_mm_castps_pd(mask));"},
{"lineNum":"  347","line":"        }"},
{"lineNum":"  348","line":"        else {"},
{"lineNum":"  349","line":"            xmm = _mm_andnot_pd(_mm_castps_pd(mask),xmm);"},
{"lineNum":"  350","line":"        }"},
{"lineNum":"  351","line":"        return *this;"},
{"lineNum":"  352","line":"    }"},
{"lineNum":"  353","line":"    // Member function extract a single element from vector"},
{"lineNum":"  354","line":"    bool extract(int index) const {"},
{"lineNum":"  355","line":"        return Vec2qb(_mm_castpd_si128(xmm)).extract(index);"},
{"lineNum":"  356","line":"    }"},
{"lineNum":"  357","line":"    // Extract a single element. Operator [] can only read an element, not write."},
{"lineNum":"  358","line":"    bool operator [] (int index) const {"},
{"lineNum":"  359","line":"        return extract(index);"},
{"lineNum":"  360","line":"    }"},
{"lineNum":"  361","line":"    // Member function to change a bitfield to a boolean vector"},
{"lineNum":"  362","line":"    Vec2db & load_bits(uint8_t a) {"},
{"lineNum":"  363","line":"        Vec2qb b; b.load_bits(a);"},
{"lineNum":"  364","line":"        xmm = _mm_castsi128_pd(b);"},
{"lineNum":"  365","line":"        return *this;"},
{"lineNum":"  366","line":"    }"},
{"lineNum":"  367","line":"    static int size() {"},
{"lineNum":"  368","line":"        return 2;"},
{"lineNum":"  369","line":"    }"},
{"lineNum":"  370","line":"    static int elementtype() {"},
{"lineNum":"  371","line":"        return 3;"},
{"lineNum":"  372","line":"    }"},
{"lineNum":"  373","line":"private: // Prevent constructing from int, etc."},
{"lineNum":"  374","line":"    Vec2db(int b);"},
{"lineNum":"  375","line":"    Vec2db & operator = (int x);"},
{"lineNum":"  376","line":"};"},
{"lineNum":"  377","line":""},
{"lineNum":"  378","line":""},
{"lineNum":"  379","line":"/*****************************************************************************"},
{"lineNum":"  380","line":"*"},
{"lineNum":"  381","line":"*          Operators for Vec2db"},
{"lineNum":"  382","line":"*"},
{"lineNum":"  383","line":"*****************************************************************************/"},
{"lineNum":"  384","line":""},
{"lineNum":"  385","line":"// vector operator & : bitwise and"},
{"lineNum":"  386","line":"static inline Vec2db operator & (Vec2db const & a, Vec2db const & b) {"},
{"lineNum":"  387","line":"    return _mm_and_pd(a, b);","class":"lineNoCov","hits":"0","possible_hits":"32",},
{"lineNum":"  388","line":"}"},
{"lineNum":"  389","line":"static inline Vec2db operator && (Vec2db const & a, Vec2db const & b) {"},
{"lineNum":"  390","line":"    return a & b;"},
{"lineNum":"  391","line":"}"},
{"lineNum":"  392","line":""},
{"lineNum":"  393","line":"// vector operator &= : bitwise and"},
{"lineNum":"  394","line":"static inline Vec2db & operator &= (Vec2db & a, Vec2db const & b) {"},
{"lineNum":"  395","line":"    a = a & b;"},
{"lineNum":"  396","line":"    return a;"},
{"lineNum":"  397","line":"}"},
{"lineNum":"  398","line":""},
{"lineNum":"  399","line":"// vector operator | : bitwise or"},
{"lineNum":"  400","line":"static inline Vec2db operator | (Vec2db const & a, Vec2db const & b) {"},
{"lineNum":"  401","line":"    return _mm_or_pd(a, b);","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  402","line":"}"},
{"lineNum":"  403","line":"static inline Vec2db operator || (Vec2db const & a, Vec2db const & b) {"},
{"lineNum":"  404","line":"    return a | b;"},
{"lineNum":"  405","line":"}"},
{"lineNum":"  406","line":""},
{"lineNum":"  407","line":"// vector operator |= : bitwise or"},
{"lineNum":"  408","line":"static inline Vec2db & operator |= (Vec2db & a, Vec2db const & b) {"},
{"lineNum":"  409","line":"    a = a | b;"},
{"lineNum":"  410","line":"    return a;"},
{"lineNum":"  411","line":"}"},
{"lineNum":"  412","line":""},
{"lineNum":"  413","line":"// vector operator ~ : bitwise not"},
{"lineNum":"  414","line":"static inline Vec2db operator ~ (Vec2db const & a) {"},
{"lineNum":"  415","line":"    return _mm_xor_pd(a, _mm_castsi128_pd(_mm_set1_epi32(-1)));"},
{"lineNum":"  416","line":"}"},
{"lineNum":"  417","line":""},
{"lineNum":"  418","line":"// vector operator ^ : bitwise xor"},
{"lineNum":"  419","line":"static inline Vec2db operator ^ (Vec2db const & a, Vec2db const & b) {"},
{"lineNum":"  420","line":"    return _mm_xor_pd(a, b);"},
{"lineNum":"  421","line":"}"},
{"lineNum":"  422","line":""},
{"lineNum":"  423","line":"// vector operator == : xnor"},
{"lineNum":"  424","line":"static inline Vec2db operator == (Vec2db const & a, Vec2db const & b) {"},
{"lineNum":"  425","line":"    return Vec2db(a ^ Vec2db(~b));"},
{"lineNum":"  426","line":"}"},
{"lineNum":"  427","line":""},
{"lineNum":"  428","line":"// vector operator != : xor"},
{"lineNum":"  429","line":"static inline Vec2db operator != (Vec2db const & a, Vec2db const & b) {"},
{"lineNum":"  430","line":"    return Vec2db(a ^ b);"},
{"lineNum":"  431","line":"}"},
{"lineNum":"  432","line":""},
{"lineNum":"  433","line":"// vector operator ^= : bitwise xor"},
{"lineNum":"  434","line":"static inline Vec2db & operator ^= (Vec2db & a, Vec2db const & b) {"},
{"lineNum":"  435","line":"    a = a ^ b;"},
{"lineNum":"  436","line":"    return a;"},
{"lineNum":"  437","line":"}"},
{"lineNum":"  438","line":""},
{"lineNum":"  439","line":"// vector operator ! : logical not"},
{"lineNum":"  440","line":"// (operator ! is less efficient than operator ~. Use only where not all bits in an element are the same)"},
{"lineNum":"  441","line":"static inline Vec2db operator ! (Vec2db const & a) {"},
{"lineNum":"  442","line":"    return Vec2db (! Vec2qb(a));"},
{"lineNum":"  443","line":"}"},
{"lineNum":"  444","line":""},
{"lineNum":"  445","line":"// Functions for Vec2db"},
{"lineNum":"  446","line":""},
{"lineNum":"  447","line":"// andnot: a & ~ b"},
{"lineNum":"  448","line":"static inline Vec2db andnot(Vec2db const & a, Vec2db const & b) {"},
{"lineNum":"  449","line":"    return _mm_andnot_pd(b, a);"},
{"lineNum":"  450","line":"}"},
{"lineNum":"  451","line":""},
{"lineNum":"  452","line":""},
{"lineNum":"  453","line":"/*****************************************************************************"},
{"lineNum":"  454","line":"*"},
{"lineNum":"  455","line":"*          Horizontal Boolean functions"},
{"lineNum":"  456","line":"*"},
{"lineNum":"  457","line":"*****************************************************************************/"},
{"lineNum":"  458","line":""},
{"lineNum":"  459","line":"// horizontal_and. Returns true if all bits are 1"},
{"lineNum":"  460","line":"static inline bool horizontal_and (Vec2db const & a) {"},
{"lineNum":"  461","line":"    return _mm_movemask_pd(a) == 3;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  462","line":"    //return horizontal_and(Vec128b(_mm_castpd_si128(a)));"},
{"lineNum":"  463","line":"}"},
{"lineNum":"  464","line":""},
{"lineNum":"  465","line":"// horizontal_or. Returns true if at least one bit is 1"},
{"lineNum":"  466","line":"static inline bool horizontal_or (Vec2db const & a) {"},
{"lineNum":"  467","line":"    return _mm_movemask_pd(a) != 0;","class":"lineNoCov","hits":"0","possible_hits":"22",},
{"lineNum":"  468","line":"    //return horizontal_or(Vec128b(_mm_castpd_si128(a)));"},
{"lineNum":"  469","line":"}"},
{"lineNum":"  470","line":""},
{"lineNum":"  471","line":""},
{"lineNum":"  472","line":""},
{"lineNum":"  473","line":"/*****************************************************************************"},
{"lineNum":"  474","line":"*"},
{"lineNum":"  475","line":"*          Vec4f: Vector of 4 single precision floating point values"},
{"lineNum":"  476","line":"*"},
{"lineNum":"  477","line":"*****************************************************************************/"},
{"lineNum":"  478","line":""},
{"lineNum":"  479","line":"class Vec4f {"},
{"lineNum":"  480","line":"protected:"},
{"lineNum":"  481","line":"    __m128 xmm; // Float vector"},
{"lineNum":"  482","line":"public:"},
{"lineNum":"  483","line":"    // Default constructor:"},
{"lineNum":"  484","line":"    Vec4f() {"},
{"lineNum":"  485","line":"    }"},
{"lineNum":"  486","line":"    // Constructor to broadcast the same value into all elements:"},
{"lineNum":"  487","line":"    Vec4f(float f) {"},
{"lineNum":"  488","line":"        xmm = _mm_set1_ps(f);"},
{"lineNum":"  489","line":"    }"},
{"lineNum":"  490","line":"    // Constructor to build from all elements:"},
{"lineNum":"  491","line":"    Vec4f(float f0, float f1, float f2, float f3) {"},
{"lineNum":"  492","line":"        xmm = _mm_setr_ps(f0, f1, f2, f3);"},
{"lineNum":"  493","line":"    }"},
{"lineNum":"  494","line":"    // Constructor to convert from type __m128 used in intrinsics:"},
{"lineNum":"  495","line":"    Vec4f(__m128 const & x) {"},
{"lineNum":"  496","line":"        xmm = x;"},
{"lineNum":"  497","line":"    }"},
{"lineNum":"  498","line":"    // Assignment operator to convert from type __m128 used in intrinsics:"},
{"lineNum":"  499","line":"    Vec4f & operator = (__m128 const & x) {"},
{"lineNum":"  500","line":"        xmm = x;"},
{"lineNum":"  501","line":"        return *this;"},
{"lineNum":"  502","line":"    }"},
{"lineNum":"  503","line":"    // Type cast operator to convert to __m128 used in intrinsics"},
{"lineNum":"  504","line":"    operator __m128() const {"},
{"lineNum":"  505","line":"        return xmm;"},
{"lineNum":"  506","line":"    }"},
{"lineNum":"  507","line":"    // Member function to load from array (unaligned)"},
{"lineNum":"  508","line":"    Vec4f & load(float const * p) {"},
{"lineNum":"  509","line":"        xmm = _mm_loadu_ps(p);"},
{"lineNum":"  510","line":"        return *this;"},
{"lineNum":"  511","line":"    }"},
{"lineNum":"  512","line":"    // Member function to load from array, aligned by 16"},
{"lineNum":"  513","line":"    // \"load_a\" is faster than \"load\" on older Intel processors (Pentium 4, Pentium M, Core 1,"},
{"lineNum":"  514","line":"    // Merom, Wolfdale) and Atom, but not on other processors from Intel, AMD or VIA."},
{"lineNum":"  515","line":"    // You may use load_a instead of load if you are certain that p points to an address"},
{"lineNum":"  516","line":"    // divisible by 16."},
{"lineNum":"  517","line":"    Vec4f & load_a(float const * p) {"},
{"lineNum":"  518","line":"        xmm = _mm_load_ps(p);"},
{"lineNum":"  519","line":"        return *this;"},
{"lineNum":"  520","line":"    }"},
{"lineNum":"  521","line":"    // Member function to store into array (unaligned)"},
{"lineNum":"  522","line":"    void store(float * p) const {"},
{"lineNum":"  523","line":"        _mm_storeu_ps(p, xmm);"},
{"lineNum":"  524","line":"    }"},
{"lineNum":"  525","line":"    // Member function to store into array, aligned by 16"},
{"lineNum":"  526","line":"    // \"store_a\" is faster than \"store\" on older Intel processors (Pentium 4, Pentium M, Core 1,"},
{"lineNum":"  527","line":"    // Merom, Wolfdale) and Atom, but not on other processors from Intel, AMD or VIA."},
{"lineNum":"  528","line":"    // You may use store_a instead of store if you are certain that p points to an address"},
{"lineNum":"  529","line":"    // divisible by 16."},
{"lineNum":"  530","line":"    void store_a(float * p) const {"},
{"lineNum":"  531","line":"        _mm_store_ps(p, xmm);"},
{"lineNum":"  532","line":"    }"},
{"lineNum":"  533","line":"    // Partial load. Load n elements and set the rest to 0"},
{"lineNum":"  534","line":"    Vec4f & load_partial(int n, float const * p) {"},
{"lineNum":"  535","line":"#if INSTRSET >= 10  // AVX512VL"},
{"lineNum":"  536","line":"        xmm = _mm_maskz_loadu_ps(__mmask8((1u << n) - 1), p);"},
{"lineNum":"  537","line":"#else"},
{"lineNum":"  538","line":"        __m128 t1, t2;"},
{"lineNum":"  539","line":"        switch (n) {"},
{"lineNum":"  540","line":"        case 1:"},
{"lineNum":"  541","line":"            xmm = _mm_load_ss(p); break;"},
{"lineNum":"  542","line":"        case 2:"},
{"lineNum":"  543","line":"            xmm = _mm_castpd_ps(_mm_load_sd((double const*)p)); break;"},
{"lineNum":"  544","line":"        case 3:"},
{"lineNum":"  545","line":"            t1 = _mm_castpd_ps(_mm_load_sd((double const*)p));"},
{"lineNum":"  546","line":"            t2 = _mm_load_ss(p + 2);"},
{"lineNum":"  547","line":"            xmm = _mm_movelh_ps(t1, t2); break;"},
{"lineNum":"  548","line":"        case 4:"},
{"lineNum":"  549","line":"            load(p); break;"},
{"lineNum":"  550","line":"        default:"},
{"lineNum":"  551","line":"            xmm = _mm_setzero_ps();"},
{"lineNum":"  552","line":"        }"},
{"lineNum":"  553","line":"#endif"},
{"lineNum":"  554","line":"        return *this;"},
{"lineNum":"  555","line":"    }"},
{"lineNum":"  556","line":"    // Partial store. Store n elements"},
{"lineNum":"  557","line":"    void store_partial(int n, float * p) const {"},
{"lineNum":"  558","line":"#if INSTRSET >= 10  // AVX512VL"},
{"lineNum":"  559","line":"        _mm_mask_storeu_ps(p, __mmask8((1u << n) - 1), xmm);"},
{"lineNum":"  560","line":"#else"},
{"lineNum":"  561","line":"        __m128 t1;"},
{"lineNum":"  562","line":"        switch (n) {"},
{"lineNum":"  563","line":"        case 1:"},
{"lineNum":"  564","line":"            _mm_store_ss(p, xmm); break;"},
{"lineNum":"  565","line":"        case 2:"},
{"lineNum":"  566","line":"            _mm_store_sd((double*)p, _mm_castps_pd(xmm)); break;"},
{"lineNum":"  567","line":"        case 3:"},
{"lineNum":"  568","line":"            _mm_store_sd((double*)p, _mm_castps_pd(xmm));"},
{"lineNum":"  569","line":"            t1 = _mm_movehl_ps(xmm,xmm);"},
{"lineNum":"  570","line":"            _mm_store_ss(p + 2, t1); break;"},
{"lineNum":"  571","line":"        case 4:"},
{"lineNum":"  572","line":"            store(p); break;"},
{"lineNum":"  573","line":"        default:;"},
{"lineNum":"  574","line":"        }"},
{"lineNum":"  575","line":"#endif"},
{"lineNum":"  576","line":"    }"},
{"lineNum":"  577","line":"    // cut off vector to n elements. The last 4-n elements are set to zero"},
{"lineNum":"  578","line":"    Vec4f & cutoff(int n) {"},
{"lineNum":"  579","line":"#if INSTRSET >= 10"},
{"lineNum":"  580","line":"        xmm = _mm_maskz_mov_ps(__mmask8((1u << n) - 1), xmm);"},
{"lineNum":"  581","line":"#else"},
{"lineNum":"  582","line":"        if (uint32_t(n) >= 4) return *this;"},
{"lineNum":"  583","line":"        static const union {"},
{"lineNum":"  584","line":"            int32_t i[8];"},
{"lineNum":"  585","line":"            float   f[8];"},
{"lineNum":"  586","line":"        } mask = {{1,-1,-1,-1,0,0,0,0}};"},
{"lineNum":"  587","line":"        xmm = _mm_and_ps(xmm, Vec4f().load(mask.f + 4 - n));"},
{"lineNum":"  588","line":"#endif"},
{"lineNum":"  589","line":"        return *this;"},
{"lineNum":"  590","line":"    }"},
{"lineNum":"  591","line":"    // Member function to change a single element in vector"},
{"lineNum":"  592","line":"    // Note: This function is inefficient. Use load function if changing more than one element"},
{"lineNum":"  593","line":"    Vec4f const & insert(int index, float value) {"},
{"lineNum":"  594","line":"#if INSTRSET >= 10   // AVX512VL"},
{"lineNum":"  595","line":"        xmm = _mm_mask_broadcastss_ps (xmm, __mmask8(1u << index), _mm_set_ss(value));"},
{"lineNum":"  596","line":"#elif INSTRSET >= 5   // SSE4.1"},
{"lineNum":"  597","line":"        switch (index & 3) {"},
{"lineNum":"  598","line":"        case 0:"},
{"lineNum":"  599","line":"            xmm = _mm_insert_ps(xmm, _mm_set_ss(value), 0 << 4);  break;"},
{"lineNum":"  600","line":"        case 1:"},
{"lineNum":"  601","line":"            xmm = _mm_insert_ps(xmm, _mm_set_ss(value), 1 << 4);  break;"},
{"lineNum":"  602","line":"        case 2:"},
{"lineNum":"  603","line":"            xmm = _mm_insert_ps(xmm, _mm_set_ss(value), 2 << 4);  break;"},
{"lineNum":"  604","line":"        default:"},
{"lineNum":"  605","line":"            xmm = _mm_insert_ps(xmm, _mm_set_ss(value), 3 << 4);  break;"},
{"lineNum":"  606","line":"        }"},
{"lineNum":"  607","line":"#else"},
{"lineNum":"  608","line":"        static const int32_t maskl[8] = {0,0,0,0,-1,0,0,0};"},
{"lineNum":"  609","line":"        __m128 broad = _mm_set1_ps(value);  // broadcast value into all elements"},
{"lineNum":"  610","line":"        __m128 mask  = _mm_loadu_ps((float const*)(maskl+4-(index & 3))); // mask with FFFFFFFF at index position"},
{"lineNum":"  611","line":"        xmm = selectf(mask,broad,xmm);"},
{"lineNum":"  612","line":"#endif"},
{"lineNum":"  613","line":"        return *this;"},
{"lineNum":"  614","line":"    }"},
{"lineNum":"  615","line":"    // Member function extract a single element from vector"},
{"lineNum":"  616","line":"    float extract(int index) const {"},
{"lineNum":"  617","line":"#if INSTRSET >= 10"},
{"lineNum":"  618","line":"        __m128 x = _mm_maskz_compress_ps(__mmask8(1u << index), xmm);"},
{"lineNum":"  619","line":"        return _mm_cvtss_f32(x);"},
{"lineNum":"  620","line":"#else"},
{"lineNum":"  621","line":"        float x[4];"},
{"lineNum":"  622","line":"        store(x);"},
{"lineNum":"  623","line":"        return x[index & 3];"},
{"lineNum":"  624","line":"#endif"},
{"lineNum":"  625","line":"    }"},
{"lineNum":"  626","line":"    // Extract a single element. Use store function if extracting more than one element."},
{"lineNum":"  627","line":"    // Operator [] can only read an element, not write."},
{"lineNum":"  628","line":"    float operator [] (int index) const {"},
{"lineNum":"  629","line":"        return extract(index);"},
{"lineNum":"  630","line":"    }"},
{"lineNum":"  631","line":"    static int size() {"},
{"lineNum":"  632","line":"        return 4;"},
{"lineNum":"  633","line":"    }"},
{"lineNum":"  634","line":"    static int elementtype() {"},
{"lineNum":"  635","line":"        return 16;"},
{"lineNum":"  636","line":"    }"},
{"lineNum":"  637","line":"};"},
{"lineNum":"  638","line":""},
{"lineNum":"  639","line":""},
{"lineNum":"  640","line":"/*****************************************************************************"},
{"lineNum":"  641","line":"*"},
{"lineNum":"  642","line":"*          Operators for Vec4f"},
{"lineNum":"  643","line":"*"},
{"lineNum":"  644","line":"*****************************************************************************/"},
{"lineNum":"  645","line":""},
{"lineNum":"  646","line":"// vector operator + : add element by element"},
{"lineNum":"  647","line":"static inline Vec4f operator + (Vec4f const & a, Vec4f const & b) {"},
{"lineNum":"  648","line":"    return _mm_add_ps(a, b);"},
{"lineNum":"  649","line":"}"},
{"lineNum":"  650","line":""},
{"lineNum":"  651","line":"// vector operator + : add vector and scalar"},
{"lineNum":"  652","line":"static inline Vec4f operator + (Vec4f const & a, float b) {"},
{"lineNum":"  653","line":"    return a + Vec4f(b);"},
{"lineNum":"  654","line":"}"},
{"lineNum":"  655","line":"static inline Vec4f operator + (float a, Vec4f const & b) {"},
{"lineNum":"  656","line":"    return Vec4f(a) + b;"},
{"lineNum":"  657","line":"}"},
{"lineNum":"  658","line":""},
{"lineNum":"  659","line":"// vector operator += : add"},
{"lineNum":"  660","line":"static inline Vec4f & operator += (Vec4f & a, Vec4f const & b) {"},
{"lineNum":"  661","line":"    a = a + b;"},
{"lineNum":"  662","line":"    return a;"},
{"lineNum":"  663","line":"}"},
{"lineNum":"  664","line":""},
{"lineNum":"  665","line":"// postfix operator ++"},
{"lineNum":"  666","line":"static inline Vec4f operator ++ (Vec4f & a, int) {"},
{"lineNum":"  667","line":"    Vec4f a0 = a;"},
{"lineNum":"  668","line":"    a = a + 1.0f;"},
{"lineNum":"  669","line":"    return a0;"},
{"lineNum":"  670","line":"}"},
{"lineNum":"  671","line":""},
{"lineNum":"  672","line":"// prefix operator ++"},
{"lineNum":"  673","line":"static inline Vec4f & operator ++ (Vec4f & a) {"},
{"lineNum":"  674","line":"    a = a + 1.0f;"},
{"lineNum":"  675","line":"    return a;"},
{"lineNum":"  676","line":"}"},
{"lineNum":"  677","line":""},
{"lineNum":"  678","line":"// vector operator - : subtract element by element"},
{"lineNum":"  679","line":"static inline Vec4f operator - (Vec4f const & a, Vec4f const & b) {"},
{"lineNum":"  680","line":"    return _mm_sub_ps(a, b);"},
{"lineNum":"  681","line":"}"},
{"lineNum":"  682","line":""},
{"lineNum":"  683","line":"// vector operator - : subtract vector and scalar"},
{"lineNum":"  684","line":"static inline Vec4f operator - (Vec4f const & a, float b) {"},
{"lineNum":"  685","line":"    return a - Vec4f(b);"},
{"lineNum":"  686","line":"}"},
{"lineNum":"  687","line":"static inline Vec4f operator - (float a, Vec4f const & b) {"},
{"lineNum":"  688","line":"    return Vec4f(a) - b;"},
{"lineNum":"  689","line":"}"},
{"lineNum":"  690","line":""},
{"lineNum":"  691","line":"// vector operator - : unary minus"},
{"lineNum":"  692","line":"// Change sign bit, even for 0, INF and NAN"},
{"lineNum":"  693","line":"static inline Vec4f operator - (Vec4f const & a) {"},
{"lineNum":"  694","line":"    return _mm_xor_ps(a, _mm_castsi128_ps(_mm_set1_epi32(0x80000000)));"},
{"lineNum":"  695","line":"}"},
{"lineNum":"  696","line":""},
{"lineNum":"  697","line":"// vector operator -= : subtract"},
{"lineNum":"  698","line":"static inline Vec4f & operator -= (Vec4f & a, Vec4f const & b) {"},
{"lineNum":"  699","line":"    a = a - b;"},
{"lineNum":"  700","line":"    return a;"},
{"lineNum":"  701","line":"}"},
{"lineNum":"  702","line":""},
{"lineNum":"  703","line":"// postfix operator --"},
{"lineNum":"  704","line":"static inline Vec4f operator -- (Vec4f & a, int) {"},
{"lineNum":"  705","line":"    Vec4f a0 = a;"},
{"lineNum":"  706","line":"    a = a - 1.0f;"},
{"lineNum":"  707","line":"    return a0;"},
{"lineNum":"  708","line":"}"},
{"lineNum":"  709","line":""},
{"lineNum":"  710","line":"// prefix operator --"},
{"lineNum":"  711","line":"static inline Vec4f & operator -- (Vec4f & a) {"},
{"lineNum":"  712","line":"    a = a - 1.0f;"},
{"lineNum":"  713","line":"    return a;"},
{"lineNum":"  714","line":"}"},
{"lineNum":"  715","line":""},
{"lineNum":"  716","line":"// vector operator * : multiply element by element"},
{"lineNum":"  717","line":"static inline Vec4f operator * (Vec4f const & a, Vec4f const & b) {"},
{"lineNum":"  718","line":"    return _mm_mul_ps(a, b);"},
{"lineNum":"  719","line":"}"},
{"lineNum":"  720","line":""},
{"lineNum":"  721","line":"// vector operator * : multiply vector and scalar"},
{"lineNum":"  722","line":"static inline Vec4f operator * (Vec4f const & a, float b) {"},
{"lineNum":"  723","line":"    return a * Vec4f(b);"},
{"lineNum":"  724","line":"}"},
{"lineNum":"  725","line":"static inline Vec4f operator * (float a, Vec4f const & b) {"},
{"lineNum":"  726","line":"    return Vec4f(a) * b;"},
{"lineNum":"  727","line":"}"},
{"lineNum":"  728","line":""},
{"lineNum":"  729","line":"// vector operator *= : multiply"},
{"lineNum":"  730","line":"static inline Vec4f & operator *= (Vec4f & a, Vec4f const & b) {"},
{"lineNum":"  731","line":"    a = a * b;"},
{"lineNum":"  732","line":"    return a;"},
{"lineNum":"  733","line":"}"},
{"lineNum":"  734","line":""},
{"lineNum":"  735","line":"// vector operator / : divide all elements by same integer"},
{"lineNum":"  736","line":"static inline Vec4f operator / (Vec4f const & a, Vec4f const & b) {"},
{"lineNum":"  737","line":"    return _mm_div_ps(a, b);"},
{"lineNum":"  738","line":"}"},
{"lineNum":"  739","line":""},
{"lineNum":"  740","line":"// vector operator / : divide vector and scalar"},
{"lineNum":"  741","line":"static inline Vec4f operator / (Vec4f const & a, float b) {"},
{"lineNum":"  742","line":"    return a / Vec4f(b);"},
{"lineNum":"  743","line":"}"},
{"lineNum":"  744","line":"static inline Vec4f operator / (float a, Vec4f const & b) {"},
{"lineNum":"  745","line":"    return Vec4f(a) / b;"},
{"lineNum":"  746","line":"}"},
{"lineNum":"  747","line":""},
{"lineNum":"  748","line":"// vector operator /= : divide"},
{"lineNum":"  749","line":"static inline Vec4f & operator /= (Vec4f & a, Vec4f const & b) {"},
{"lineNum":"  750","line":"    a = a / b;"},
{"lineNum":"  751","line":"    return a;"},
{"lineNum":"  752","line":"}"},
{"lineNum":"  753","line":""},
{"lineNum":"  754","line":"// vector operator == : returns true for elements for which a == b"},
{"lineNum":"  755","line":"static inline Vec4fb operator == (Vec4f const & a, Vec4f const & b) {"},
{"lineNum":"  756","line":"    return _mm_cmpeq_ps(a, b);"},
{"lineNum":"  757","line":"}"},
{"lineNum":"  758","line":""},
{"lineNum":"  759","line":"// vector operator != : returns true for elements for which a != b"},
{"lineNum":"  760","line":"static inline Vec4fb operator != (Vec4f const & a, Vec4f const & b) {"},
{"lineNum":"  761","line":"    return _mm_cmpneq_ps(a, b);"},
{"lineNum":"  762","line":"}"},
{"lineNum":"  763","line":""},
{"lineNum":"  764","line":"// vector operator < : returns true for elements for which a < b"},
{"lineNum":"  765","line":"static inline Vec4fb operator < (Vec4f const & a, Vec4f const & b) {"},
{"lineNum":"  766","line":"    return _mm_cmplt_ps(a, b);"},
{"lineNum":"  767","line":"}"},
{"lineNum":"  768","line":""},
{"lineNum":"  769","line":"// vector operator <= : returns true for elements for which a <= b"},
{"lineNum":"  770","line":"static inline Vec4fb operator <= (Vec4f const & a, Vec4f const & b) {"},
{"lineNum":"  771","line":"    return _mm_cmple_ps(a, b);"},
{"lineNum":"  772","line":"}"},
{"lineNum":"  773","line":""},
{"lineNum":"  774","line":"// vector operator > : returns true for elements for which a > b"},
{"lineNum":"  775","line":"static inline Vec4fb operator > (Vec4f const & a, Vec4f const & b) {"},
{"lineNum":"  776","line":"    return b < a;"},
{"lineNum":"  777","line":"}"},
{"lineNum":"  778","line":""},
{"lineNum":"  779","line":"// vector operator >= : returns true for elements for which a >= b"},
{"lineNum":"  780","line":"static inline Vec4fb operator >= (Vec4f const & a, Vec4f const & b) {"},
{"lineNum":"  781","line":"    return b <= a;"},
{"lineNum":"  782","line":"}"},
{"lineNum":"  783","line":""},
{"lineNum":"  784","line":"// Bitwise logical operators"},
{"lineNum":"  785","line":""},
{"lineNum":"  786","line":"// vector operator & : bitwise and"},
{"lineNum":"  787","line":"static inline Vec4f operator & (Vec4f const & a, Vec4f const & b) {"},
{"lineNum":"  788","line":"    return _mm_and_ps(a, b);"},
{"lineNum":"  789","line":"}"},
{"lineNum":"  790","line":""},
{"lineNum":"  791","line":"// vector operator &= : bitwise and"},
{"lineNum":"  792","line":"static inline Vec4f & operator &= (Vec4f & a, Vec4f const & b) {"},
{"lineNum":"  793","line":"    a = a & b;"},
{"lineNum":"  794","line":"    return a;"},
{"lineNum":"  795","line":"}"},
{"lineNum":"  796","line":""},
{"lineNum":"  797","line":"// vector operator & : bitwise and of Vec4f and Vec4fb"},
{"lineNum":"  798","line":"static inline Vec4f operator & (Vec4f const & a, Vec4fb const & b) {"},
{"lineNum":"  799","line":"    return _mm_and_ps(a, b);"},
{"lineNum":"  800","line":"}"},
{"lineNum":"  801","line":"static inline Vec4f operator & (Vec4fb const & a, Vec4f const & b) {"},
{"lineNum":"  802","line":"    return _mm_and_ps(a, b);"},
{"lineNum":"  803","line":"}"},
{"lineNum":"  804","line":""},
{"lineNum":"  805","line":"// vector operator | : bitwise or"},
{"lineNum":"  806","line":"static inline Vec4f operator | (Vec4f const & a, Vec4f const & b) {"},
{"lineNum":"  807","line":"    return _mm_or_ps(a, b);"},
{"lineNum":"  808","line":"}"},
{"lineNum":"  809","line":""},
{"lineNum":"  810","line":"// vector operator |= : bitwise or"},
{"lineNum":"  811","line":"static inline Vec4f & operator |= (Vec4f & a, Vec4f const & b) {"},
{"lineNum":"  812","line":"    a = a | b;"},
{"lineNum":"  813","line":"    return a;"},
{"lineNum":"  814","line":"}"},
{"lineNum":"  815","line":""},
{"lineNum":"  816","line":"// vector operator ^ : bitwise xor"},
{"lineNum":"  817","line":"static inline Vec4f operator ^ (Vec4f const & a, Vec4f const & b) {"},
{"lineNum":"  818","line":"    return _mm_xor_ps(a, b);"},
{"lineNum":"  819","line":"}"},
{"lineNum":"  820","line":""},
{"lineNum":"  821","line":"// vector operator ^= : bitwise xor"},
{"lineNum":"  822","line":"static inline Vec4f & operator ^= (Vec4f & a, Vec4f const & b) {"},
{"lineNum":"  823","line":"    a = a ^ b;"},
{"lineNum":"  824","line":"    return a;"},
{"lineNum":"  825","line":"}"},
{"lineNum":"  826","line":""},
{"lineNum":"  827","line":"// vector operator ! : logical not. Returns Boolean vector"},
{"lineNum":"  828","line":"static inline Vec4fb operator ! (Vec4f const & a) {"},
{"lineNum":"  829","line":"    return a == Vec4f(0.0f);"},
{"lineNum":"  830","line":"}"},
{"lineNum":"  831","line":""},
{"lineNum":"  832","line":""},
{"lineNum":"  833","line":"/*****************************************************************************"},
{"lineNum":"  834","line":"*"},
{"lineNum":"  835","line":"*          Functions for Vec4f"},
{"lineNum":"  836","line":"*"},
{"lineNum":"  837","line":"*****************************************************************************/"},
{"lineNum":"  838","line":""},
{"lineNum":"  839","line":"// Select between two operands. Corresponds to this pseudocode:"},
{"lineNum":"  840","line":"// for (int i = 0; i < 4; i++) result[i] = s[i] ? a[i] : b[i];"},
{"lineNum":"  841","line":"// Each byte in s must be either 0 (false) or 0xFFFFFFFF (true). No other values are allowed."},
{"lineNum":"  842","line":"static inline Vec4f select (Vec4fb const & s, Vec4f const & a, Vec4f const & b) {"},
{"lineNum":"  843","line":"    return selectf(s,a,b);"},
{"lineNum":"  844","line":"}"},
{"lineNum":"  845","line":""},
{"lineNum":"  846","line":"// Conditional add: For all vector elements i: result[i] = f[i] ? (a[i] + b[i]) : a[i]"},
{"lineNum":"  847","line":"static inline Vec4f if_add (Vec4fb const & f, Vec4f const & a, Vec4f const & b) {"},
{"lineNum":"  848","line":"    return a + (Vec4f(f) & b);"},
{"lineNum":"  849","line":"}"},
{"lineNum":"  850","line":""},
{"lineNum":"  851","line":"// Conditional sub: For all vector elements i: result[i] = f[i] ? (a[i] - b[i]) : a[i]"},
{"lineNum":"  852","line":"static inline Vec4f if_sub (Vec4fb const & f, Vec4f const & a, Vec4f const & b) {"},
{"lineNum":"  853","line":"    return a - (Vec4f(f) & b);"},
{"lineNum":"  854","line":"}"},
{"lineNum":"  855","line":""},
{"lineNum":"  856","line":"// Conditional multiply: For all vector elements i: result[i] = f[i] ? (a[i] * b[i]) : a[i]"},
{"lineNum":"  857","line":"static inline Vec4f if_mul (Vec4fb const & f, Vec4f const & a, Vec4f const & b) {"},
{"lineNum":"  858","line":"    return a * select(f, b, 1.f);"},
{"lineNum":"  859","line":"}"},
{"lineNum":"  860","line":""},
{"lineNum":"  861","line":"// Conditional divide: For all vector elements i: result[i] = f[i] ? (a[i] / b[i]) : a[i]"},
{"lineNum":"  862","line":"static inline Vec4f if_div (Vec4fb const & f, Vec4f const & a, Vec4f const & b) {"},
{"lineNum":"  863","line":"    return a / select(f, b, 1.f);"},
{"lineNum":"  864","line":"}"},
{"lineNum":"  865","line":""},
{"lineNum":"  866","line":""},
{"lineNum":"  867","line":"// General arithmetic functions, etc."},
{"lineNum":"  868","line":""},
{"lineNum":"  869","line":"// Horizontal add: Calculates the sum of all vector elements."},
{"lineNum":"  870","line":"static inline float horizontal_add (Vec4f const & a) {"},
{"lineNum":"  871","line":"#if  INSTRSET >= 3 && false // SSE3"},
{"lineNum":"  872","line":"    // The hadd instruction is inefficient, and may be split into two instructions for faster decoding"},
{"lineNum":"  873","line":"    __m128 t1 = _mm_hadd_ps(a,a);"},
{"lineNum":"  874","line":"    __m128 t2 = _mm_hadd_ps(t1,t1);"},
{"lineNum":"  875","line":"    return _mm_cvtss_f32(t2);"},
{"lineNum":"  876","line":"#else"},
{"lineNum":"  877","line":"    __m128 t1 = _mm_movehl_ps(a,a);"},
{"lineNum":"  878","line":"    __m128 t2 = _mm_add_ps(a,t1);"},
{"lineNum":"  879","line":"    __m128 t3 = _mm_shuffle_ps(t2,t2,1);"},
{"lineNum":"  880","line":"    __m128 t4 = _mm_add_ss(t2,t3);"},
{"lineNum":"  881","line":"    return _mm_cvtss_f32(t4);"},
{"lineNum":"  882","line":"#endif"},
{"lineNum":"  883","line":"}"},
{"lineNum":"  884","line":""},
{"lineNum":"  885","line":"// function max: a > b ? a : b"},
{"lineNum":"  886","line":"static inline Vec4f max(Vec4f const & a, Vec4f const & b) {"},
{"lineNum":"  887","line":"    return _mm_max_ps(a,b);"},
{"lineNum":"  888","line":"}"},
{"lineNum":"  889","line":""},
{"lineNum":"  890","line":"// function min: a < b ? a : b"},
{"lineNum":"  891","line":"static inline Vec4f min(Vec4f const & a, Vec4f const & b) {"},
{"lineNum":"  892","line":"    return _mm_min_ps(a,b);"},
{"lineNum":"  893","line":"}"},
{"lineNum":"  894","line":""},
{"lineNum":"  895","line":"// same as max, NAN-safe"},
{"lineNum":"  896","line":"static inline Vec4f maximum(Vec4f const & a, Vec4f const & b) {"},
{"lineNum":"  897","line":"    return select(a != a, a, max(a,b));"},
{"lineNum":"  898","line":"}"},
{"lineNum":"  899","line":""},
{"lineNum":"  900","line":"// same as min, NAN-safe"},
{"lineNum":"  901","line":"static inline Vec4f minimum(Vec4f const & a, Vec4f const & b) {"},
{"lineNum":"  902","line":"    return select(a != a, a, min(a,b));"},
{"lineNum":"  903","line":"}"},
{"lineNum":"  904","line":""},
{"lineNum":"  905","line":"// function abs: absolute value"},
{"lineNum":"  906","line":"static inline Vec4f abs(Vec4f const & a) {"},
{"lineNum":"  907","line":"#if INSTRSET >= 10  // AVX512VL"},
{"lineNum":"  908","line":"    return _mm_range_ps(a, a, 8);"},
{"lineNum":"  909","line":"#else"},
{"lineNum":"  910","line":"    __m128 mask = _mm_castsi128_ps(_mm_set1_epi32(0x7FFFFFFF));"},
{"lineNum":"  911","line":"    return _mm_and_ps(a,mask);"},
{"lineNum":"  912","line":"#endif"},
{"lineNum":"  913","line":"}"},
{"lineNum":"  914","line":""},
{"lineNum":"  915","line":"// function sqrt: square root"},
{"lineNum":"  916","line":"static inline Vec4f sqrt(Vec4f const & a) {"},
{"lineNum":"  917","line":"    return _mm_sqrt_ps(a);"},
{"lineNum":"  918","line":"}"},
{"lineNum":"  919","line":""},
{"lineNum":"  920","line":"// function square: a * a"},
{"lineNum":"  921","line":"static inline Vec4f square(Vec4f const & a) {"},
{"lineNum":"  922","line":"    return a * a;"},
{"lineNum":"  923","line":"}"},
{"lineNum":"  924","line":""},
{"lineNum":"  925","line":"// pow(vector,int) function template"},
{"lineNum":"  926","line":"template <typename VTYPE>"},
{"lineNum":"  927","line":"static inline VTYPE pow_template_i(VTYPE const & x0, int n) {"},
{"lineNum":"  928","line":"    VTYPE x = x0;                      // a^(2^i)"},
{"lineNum":"  929","line":"    VTYPE y(1.0f);                     // accumulator"},
{"lineNum":"  930","line":"    if (n >= 0) {                      // make sure n is not negative"},
{"lineNum":"  931","line":"        while (true) {                 // loop for each bit in n"},
{"lineNum":"  932","line":"            if (n & 1) y *= x;         // multiply if bit = 1"},
{"lineNum":"  933","line":"            n >>= 1;                   // get next bit of n"},
{"lineNum":"  934","line":"            if (n == 0) return y;      // finished"},
{"lineNum":"  935","line":"            x *= x;                    // x = a^2, a^4, a^8, etc."},
{"lineNum":"  936","line":"        }"},
{"lineNum":"  937","line":"    }"},
{"lineNum":"  938","line":"    else {"},
{"lineNum":"  939","line":"        // n < 0"},
{"lineNum":"  940","line":"        if (uint32_t(n) == 0x80000000u) return nan_vec<VTYPE>();  // integer overflow"},
{"lineNum":"  941","line":"        return VTYPE(1.0f)/pow_template_i<VTYPE>(x0,-n);     // reciprocal"},
{"lineNum":"  942","line":"    }"},
{"lineNum":"  943","line":"}"},
{"lineNum":"  944","line":""},
{"lineNum":"  945","line":"// The purpose of this template is to prevent implicit conversion of a float"},
{"lineNum":"  946","line":"// exponent to int when calling pow(vector, float) and vectormath_exp.h is not included"},
{"lineNum":"  947","line":"template <typename TT> static Vec4f pow(Vec4f const & a, TT const & n);  // = delete"},
{"lineNum":"  948","line":""},
{"lineNum":"  949","line":"// Raise floating point numbers to integer power n"},
{"lineNum":"  950","line":"template <>"},
{"lineNum":"  951","line":"inline Vec4f pow<int>(Vec4f const & x0, int const & n) {"},
{"lineNum":"  952","line":"    return pow_template_i<Vec4f>(x0, n);"},
{"lineNum":"  953","line":"}"},
{"lineNum":"  954","line":""},
{"lineNum":"  955","line":"// allow conversion from unsigned int"},
{"lineNum":"  956","line":"template <>"},
{"lineNum":"  957","line":"inline Vec4f pow<uint32_t>(Vec4f const & x0, uint32_t const & n) {"},
{"lineNum":"  958","line":"    return pow_template_i<Vec4f>(x0, (int)n);"},
{"lineNum":"  959","line":"}"},
{"lineNum":"  960","line":""},
{"lineNum":"  961","line":"// Raise floating point numbers to integer power n, where n is a compile-time constant"},
{"lineNum":"  962","line":""},
{"lineNum":"  963","line":"// gcc can optimize pow_template_i to generate the same as the code below. MS and Clang can not."},
{"lineNum":"  964","line":"// Therefore, this code is kept"},
{"lineNum":"  965","line":"// to do: test on Intel compiler"},
{"lineNum":"  966","line":"template <typename V, int n>"},
{"lineNum":"  967","line":"static inline V pow_n(V const & a) {"},
{"lineNum":"  968","line":"    if (n == 0x80000000) return nan_vec<V>();  // integer overflow"},
{"lineNum":"  969","line":"    if (n < 0)    return V(1.0f) / pow_n<V,-n>(a);"},
{"lineNum":"  970","line":"    if (n == 0)   return V(1.0f);"},
{"lineNum":"  971","line":"    if (n >= 256) return pow(a, n);"},
{"lineNum":"  972","line":"    V x = a;                           // a^(2^i)"},
{"lineNum":"  973","line":"    V y;                               // accumulator"},
{"lineNum":"  974","line":"    const int lowest = n - (n & (n-1));// lowest set bit in n"},
{"lineNum":"  975","line":"    if (n & 1) y = x;"},
{"lineNum":"  976","line":"    if (n < 2) return y;"},
{"lineNum":"  977","line":"    x = x*x;                           // x^2"},
{"lineNum":"  978","line":"    if (n & 2) {"},
{"lineNum":"  979","line":"        if (lowest == 2) y = x; else y *= x;"},
{"lineNum":"  980","line":"    }"},
{"lineNum":"  981","line":"    if (n < 4) return y;"},
{"lineNum":"  982","line":"    x = x*x;                           // x^4"},
{"lineNum":"  983","line":"    if (n & 4) {"},
{"lineNum":"  984","line":"        if (lowest == 4) y = x; else y *= x;"},
{"lineNum":"  985","line":"    }"},
{"lineNum":"  986","line":"    if (n < 8) return y;"},
{"lineNum":"  987","line":"    x = x*x;                           // x^8"},
{"lineNum":"  988","line":"    if (n & 8) {"},
{"lineNum":"  989","line":"        if (lowest == 8) y = x; else y *= x;"},
{"lineNum":"  990","line":"    }"},
{"lineNum":"  991","line":"    if (n < 16) return y;"},
{"lineNum":"  992","line":"    x = x*x;                           // x^16"},
{"lineNum":"  993","line":"    if (n & 16) {"},
{"lineNum":"  994","line":"        if (lowest == 16) y = x; else y *= x;"},
{"lineNum":"  995","line":"    }"},
{"lineNum":"  996","line":"    if (n < 32) return y;"},
{"lineNum":"  997","line":"    x = x*x;                           // x^32"},
{"lineNum":"  998","line":"    if (n & 32) {"},
{"lineNum":"  999","line":"        if (lowest == 32) y = x; else y *= x;"},
{"lineNum":" 1000","line":"    }"},
{"lineNum":" 1001","line":"    if (n < 64) return y;"},
{"lineNum":" 1002","line":"    x = x*x;                           // x^64"},
{"lineNum":" 1003","line":"    if (n & 64) {"},
{"lineNum":" 1004","line":"        if (lowest == 64) y = x; else y *= x;"},
{"lineNum":" 1005","line":"    }"},
{"lineNum":" 1006","line":"    if (n < 128) return y;"},
{"lineNum":" 1007","line":"    x = x*x;                           // x^128"},
{"lineNum":" 1008","line":"    if (n & 128) {"},
{"lineNum":" 1009","line":"        if (lowest == 128) y = x; else y *= x;"},
{"lineNum":" 1010","line":"    }"},
{"lineNum":" 1011","line":"    return y;"},
{"lineNum":" 1012","line":"}"},
{"lineNum":" 1013","line":""},
{"lineNum":" 1014","line":"// implement as function pow(vector, const_int)"},
{"lineNum":" 1015","line":"template <int n>"},
{"lineNum":" 1016","line":"static inline Vec4f pow(Vec4f const & a, Const_int_t<n>) {"},
{"lineNum":" 1017","line":"    return pow_n<Vec4f, n>(a);"},
{"lineNum":" 1018","line":"}"},
{"lineNum":" 1019","line":""},
{"lineNum":" 1020","line":"// implement the same as macro pow_const(vector, int)"},
{"lineNum":" 1021","line":"//#define pow_const(x,n) pow_n<n>(x)"},
{"lineNum":" 1022","line":"#define pow_const(x,n) pow(x,Const_int_t<n>())"},
{"lineNum":" 1023","line":""},
{"lineNum":" 1024","line":"static inline Vec4f round(Vec4f const & a) {"},
{"lineNum":" 1025","line":"#if INSTRSET >= 5   // SSE4.1 supported"},
{"lineNum":" 1026","line":"    return _mm_round_ps(a, 8);"},
{"lineNum":" 1027","line":"#else  // SSE2"},
{"lineNum":" 1028","line":"    Vec4i y1 = _mm_cvtps_epi32 (a);          // convert to integer"},
{"lineNum":" 1029","line":"    Vec4f y2 = _mm_cvtepi32_ps(y1);          // convert back to float"},
{"lineNum":" 1030","line":"    return select(y1 != 0x80000000, y2, a);  // use original value if integer overflows"},
{"lineNum":" 1031","line":"#endif"},
{"lineNum":" 1032","line":"}"},
{"lineNum":" 1033","line":""},
{"lineNum":" 1034","line":"// function truncate: round towards zero. (result as float vector)"},
{"lineNum":" 1035","line":"static inline Vec4f truncate(Vec4f const & a) {"},
{"lineNum":" 1036","line":"#if INSTRSET >= 5   // SSE4.1 supported"},
{"lineNum":" 1037","line":"    return _mm_round_ps(a, 3+8);"},
{"lineNum":" 1038","line":"#else  // SSE2"},
{"lineNum":" 1039","line":"    Vec4i y1 = _mm_cvttps_epi32 (a);         // truncate to integer"},
{"lineNum":" 1040","line":"    Vec4f y2 = _mm_cvtepi32_ps(y1);          // convert back to float"},
{"lineNum":" 1041","line":"    return select(y1 != 0x80000000, y2, a);  // use original value if integer overflows"},
{"lineNum":" 1042","line":"#endif"},
{"lineNum":" 1043","line":"}"},
{"lineNum":" 1044","line":""},
{"lineNum":" 1045","line":"// function floor: round towards minus infinity. (result as float vector)"},
{"lineNum":" 1046","line":"static inline Vec4f floor(Vec4f const & a) {"},
{"lineNum":" 1047","line":"#if INSTRSET >= 5   // SSE4.1 supported"},
{"lineNum":" 1048","line":"    return _mm_round_ps(a, 1+8);"},
{"lineNum":" 1049","line":"#else  // SSE2"},
{"lineNum":" 1050","line":"    Vec4f y = round(a);                      // round"},
{"lineNum":" 1051","line":"    y -= Vec4f(1.f) & (y > a);               // subtract 1 if bigger"},
{"lineNum":" 1052","line":"    return y;"},
{"lineNum":" 1053","line":"#endif"},
{"lineNum":" 1054","line":"}"},
{"lineNum":" 1055","line":""},
{"lineNum":" 1056","line":"// function ceil: round towards plus infinity. (result as float vector)"},
{"lineNum":" 1057","line":"static inline Vec4f ceil(Vec4f const & a) {"},
{"lineNum":" 1058","line":"#if INSTRSET >= 5   // SSE4.1 supported"},
{"lineNum":" 1059","line":"    return _mm_round_ps(a, 2+8);"},
{"lineNum":" 1060","line":"#else  // SSE2"},
{"lineNum":" 1061","line":"    Vec4f y = round(a);                      // round"},
{"lineNum":" 1062","line":"    y += Vec4f(1.f) & (y < a);               // add 1 if bigger"},
{"lineNum":" 1063","line":"    return y;"},
{"lineNum":" 1064","line":"#endif"},
{"lineNum":" 1065","line":"}"},
{"lineNum":" 1066","line":""},
{"lineNum":" 1067","line":"// function round_to_int: round to nearest integer (even). (result as integer vector)"},
{"lineNum":" 1068","line":"static inline Vec4i roundi(Vec4f const & a) {"},
{"lineNum":" 1069","line":"    // Note: assume MXCSR control register is set to rounding"},
{"lineNum":" 1070","line":"    return _mm_cvtps_epi32(a);"},
{"lineNum":" 1071","line":"}"},
{"lineNum":" 1072","line":"static inline Vec4i round_to_int(Vec4f const & a) {return roundi(a);} // deprecated"},
{"lineNum":" 1073","line":""},
{"lineNum":" 1074","line":"// function truncatei: round towards zero. (result as integer vector)"},
{"lineNum":" 1075","line":"static inline Vec4i truncatei(Vec4f const & a) {"},
{"lineNum":" 1076","line":"    return _mm_cvttps_epi32(a);"},
{"lineNum":" 1077","line":"}"},
{"lineNum":" 1078","line":"static inline Vec4i truncate_to_int(Vec4f const & a) {return truncatei(a);} // deprecated"},
{"lineNum":" 1079","line":""},
{"lineNum":" 1080","line":"// function to_float: convert integer vector to float vector"},
{"lineNum":" 1081","line":"static inline Vec4f to_float(Vec4i const & a) {"},
{"lineNum":" 1082","line":"    return _mm_cvtepi32_ps(a);"},
{"lineNum":" 1083","line":"}"},
{"lineNum":" 1084","line":""},
{"lineNum":" 1085","line":"// function to_float: convert unsigned integer vector to float vector"},
{"lineNum":" 1086","line":"static inline Vec4f to_float(Vec4ui const & a) {"},
{"lineNum":" 1087","line":"#if INSTRSET >= 10 && (!defined(_MSC_VER) || defined(__INTEL_COMPILER)) // _mm_cvtepu32_ps missing in MS VS2019"},
{"lineNum":" 1088","line":"    return _mm_cvtepu32_ps(a);"},
{"lineNum":" 1089","line":"#elif INSTRSET >= 9  // __AVX512F__"},
{"lineNum":" 1090","line":"    return _mm512_castps512_ps128(_mm512_cvtepu32_ps(_mm512_castsi128_si512(a)));"},
{"lineNum":" 1091","line":"#else"},
{"lineNum":" 1092","line":"    Vec4f b = to_float(Vec4i(a & 0xFFFFF));             // 20 bits"},
{"lineNum":" 1093","line":"    Vec4f c = to_float(Vec4i(a >> 20));                 // remaining bits"},
{"lineNum":" 1094","line":"    Vec4f d = b + c * 1048576.f;  // 2^20"},
{"lineNum":" 1095","line":"    return d;"},
{"lineNum":" 1096","line":"#endif"},
{"lineNum":" 1097","line":"}"},
{"lineNum":" 1098","line":""},
{"lineNum":" 1099","line":"// Approximate math functions"},
{"lineNum":" 1100","line":""},
{"lineNum":" 1101","line":"// approximate reciprocal (Faster than 1.f / a. relative accuracy better than 2^-11)"},
{"lineNum":" 1102","line":"static inline Vec4f approx_recipr(Vec4f const & a) {"},
{"lineNum":" 1103","line":"#ifdef __AVX512ER__  // AVX512ER: full precision"},
{"lineNum":" 1104","line":"    // todo: if future processors have both AVX512ER and AVX512VL: _mm128_rcp28_round_ps(a, _MM_FROUND_NO_EXC);"},
{"lineNum":" 1105","line":"    return _mm512_castps512_ps128(_mm512_rcp28_round_ps(_mm512_castps128_ps512(a), _MM_FROUND_NO_EXC));"},
{"lineNum":" 1106","line":"#elif INSTRSET >= 10   // AVX512VL: 14 bit precision"},
{"lineNum":" 1107","line":"    return _mm_rcp14_ps(a);"},
{"lineNum":" 1108","line":"#elif INSTRSET >= 9  // AVX512F: 14 bit precision"},
{"lineNum":" 1109","line":"    return _mm512_castps512_ps128(_mm512_rcp14_ps(_mm512_castps128_ps512(a)));"},
{"lineNum":" 1110","line":"#else  // AVX: 11 bit precision"},
{"lineNum":" 1111","line":"    return _mm_rcp_ps(a);"},
{"lineNum":" 1112","line":"#endif"},
{"lineNum":" 1113","line":"}"},
{"lineNum":" 1114","line":""},
{"lineNum":" 1115","line":"// approximate reciprocal squareroot (Faster than 1.f / sqrt(a). Relative accuracy better than 2^-11)"},
{"lineNum":" 1116","line":"static inline Vec4f approx_rsqrt(Vec4f const & a) {"},
{"lineNum":" 1117","line":"// use more accurate version if available. (none of these will raise exceptions on zero)"},
{"lineNum":" 1118","line":"#ifdef __AVX512ER__  // AVX512ER: full precision"},
{"lineNum":" 1119","line":"    // todo: if future processors have both AVX512ER and AVX521VL: _mm128_rsqrt28_round_ps(a, _MM_FROUND_NO_EXC);"},
{"lineNum":" 1120","line":"    return _mm512_castps512_ps128(_mm512_rsqrt28_round_ps(_mm512_castps128_ps512(a), _MM_FROUND_NO_EXC));"},
{"lineNum":" 1121","line":"#elif INSTRSET >= 10 && defined(_mm_rsqrt14_ps) // missing in VS2019"},
{"lineNum":" 1122","line":"    return _mm_rsqrt14_ps(a);"},
{"lineNum":" 1123","line":"#elif INSTRSET >= 9  // AVX512F: 14 bit precision"},
{"lineNum":" 1124","line":"    return _mm512_castps512_ps128(_mm512_rsqrt14_ps(_mm512_castps128_ps512(a)));"},
{"lineNum":" 1125","line":"#else  // SSE: 11 bit precision"},
{"lineNum":" 1126","line":"    return _mm_rsqrt_ps(a);"},
{"lineNum":" 1127","line":"#endif"},
{"lineNum":" 1128","line":"}"},
{"lineNum":" 1129","line":""},
{"lineNum":" 1130","line":"// Fused multiply and add functions"},
{"lineNum":" 1131","line":""},
{"lineNum":" 1132","line":"// Multiply and add"},
{"lineNum":" 1133","line":"static inline Vec4f mul_add(Vec4f const & a, Vec4f const & b, Vec4f const & c) {"},
{"lineNum":" 1134","line":"#ifdef __FMA__"},
{"lineNum":" 1135","line":"    return _mm_fmadd_ps(a, b, c);"},
{"lineNum":" 1136","line":"#elif defined (__FMA4__)"},
{"lineNum":" 1137","line":"    return _mm_macc_ps(a, b, c);"},
{"lineNum":" 1138","line":"#else"},
{"lineNum":" 1139","line":"    return a * b + c;"},
{"lineNum":" 1140","line":"#endif"},
{"lineNum":" 1141","line":"}"},
{"lineNum":" 1142","line":""},
{"lineNum":" 1143","line":"// Multiply and subtract"},
{"lineNum":" 1144","line":"static inline Vec4f mul_sub(Vec4f const & a, Vec4f const & b, Vec4f const & c) {"},
{"lineNum":" 1145","line":"#ifdef __FMA__"},
{"lineNum":" 1146","line":"    return _mm_fmsub_ps(a, b, c);"},
{"lineNum":" 1147","line":"#elif defined (__FMA4__)"},
{"lineNum":" 1148","line":"    return _mm_msub_ps(a, b, c);"},
{"lineNum":" 1149","line":"#else"},
{"lineNum":" 1150","line":"    return a * b - c;"},
{"lineNum":" 1151","line":"#endif"},
{"lineNum":" 1152","line":"}"},
{"lineNum":" 1153","line":""},
{"lineNum":" 1154","line":"// Multiply and inverse subtract"},
{"lineNum":" 1155","line":"static inline Vec4f nmul_add(Vec4f const & a, Vec4f const & b, Vec4f const & c) {"},
{"lineNum":" 1156","line":"#ifdef __FMA__"},
{"lineNum":" 1157","line":"    return _mm_fnmadd_ps(a, b, c);"},
{"lineNum":" 1158","line":"#elif defined (__FMA4__)"},
{"lineNum":" 1159","line":"    return _mm_nmacc_ps(a, b, c);"},
{"lineNum":" 1160","line":"#else"},
{"lineNum":" 1161","line":"    return c - a * b;"},
{"lineNum":" 1162","line":"#endif"},
{"lineNum":" 1163","line":"}"},
{"lineNum":" 1164","line":""},
{"lineNum":" 1165","line":""},
{"lineNum":" 1166","line":"// Multiply and subtract with extra precision on the intermediate calculations,"},
{"lineNum":" 1167","line":"// even if FMA instructions not supported, using Veltkamp-Dekker split."},
{"lineNum":" 1168","line":"// This is used in mathematical functions. Do not use it in general code"},
{"lineNum":" 1169","line":"// because it is inaccurate in certain cases"},
{"lineNum":" 1170","line":"static inline Vec4f mul_sub_x(Vec4f const & a, Vec4f const & b, Vec4f const & c) {"},
{"lineNum":" 1171","line":"#ifdef __FMA__"},
{"lineNum":" 1172","line":"    return _mm_fmsub_ps(a, b, c);"},
{"lineNum":" 1173","line":"#elif defined (__FMA4__)"},
{"lineNum":" 1174","line":"    return _mm_msub_ps(a, b, c);"},
{"lineNum":" 1175","line":"#else"},
{"lineNum":" 1176","line":"    // calculate a * b - c with extra precision"},
{"lineNum":" 1177","line":"    Vec4i upper_mask = -(1 << 12);                         // mask to remove lower 12 bits"},
{"lineNum":" 1178","line":"    Vec4f a_high = a & Vec4f(_mm_castsi128_ps(upper_mask));// split into high and low parts"},
{"lineNum":" 1179","line":"    Vec4f b_high = b & Vec4f(_mm_castsi128_ps(upper_mask));"},
{"lineNum":" 1180","line":"    Vec4f a_low  = a - a_high;"},
{"lineNum":" 1181","line":"    Vec4f b_low  = b - b_high;"},
{"lineNum":" 1182","line":"    Vec4f r1 = a_high * b_high;                            // this product is exact"},
{"lineNum":" 1183","line":"    Vec4f r2 = r1 - c;                                     // subtract c from high product"},
{"lineNum":" 1184","line":"    Vec4f r3 = r2 + (a_high * b_low + b_high * a_low) + a_low * b_low; // add rest of product"},
{"lineNum":" 1185","line":"    return r3; // + ((r2 - r1) + c);"},
{"lineNum":" 1186","line":"#endif"},
{"lineNum":" 1187","line":"}"},
{"lineNum":" 1188","line":""},
{"lineNum":" 1189","line":"// Math functions using fast bit manipulation"},
{"lineNum":" 1190","line":""},
{"lineNum":" 1191","line":"// Extract the exponent as an integer"},
{"lineNum":" 1192","line":"// exponent(a) = floor(log2(abs(a)));"},
{"lineNum":" 1193","line":"// exponent(1.0f) = 0, exponent(0.0f) = -127, exponent(INF) = +128, exponent(NAN) = +128"},
{"lineNum":" 1194","line":"static inline Vec4i exponent(Vec4f const & a) {"},
{"lineNum":" 1195","line":"    Vec4ui t1 = _mm_castps_si128(a);   // reinterpret as 32-bit integer"},
{"lineNum":" 1196","line":"    Vec4ui t2 = t1 << 1;               // shift out sign bit"},
{"lineNum":" 1197","line":"    Vec4ui t3 = t2 >> 24;              // shift down logical to position 0"},
{"lineNum":" 1198","line":"    Vec4i  t4 = Vec4i(t3) - 0x7F;      // subtract bias from exponent"},
{"lineNum":" 1199","line":"    return t4;"},
{"lineNum":" 1200","line":"}"},
{"lineNum":" 1201","line":""},
{"lineNum":" 1202","line":"// Extract the fraction part of a floating point number"},
{"lineNum":" 1203","line":"// a = 2^exponent(a) * fraction(a), except for a = 0"},
{"lineNum":" 1204","line":"// fraction(1.0f) = 1.0f, fraction(5.0f) = 1.25f"},
{"lineNum":" 1205","line":"// NOTE: The name fraction clashes with an ENUM in MAC XCode CarbonCore script.h !"},
{"lineNum":" 1206","line":"static inline Vec4f fraction(Vec4f const & a) {"},
{"lineNum":" 1207","line":"#if INSTRSET >= 10"},
{"lineNum":" 1208","line":"    return _mm_getmant_ps(a, _MM_MANT_NORM_1_2, _MM_MANT_SIGN_zero);"},
{"lineNum":" 1209","line":"#else"},
{"lineNum":" 1210","line":"    Vec4ui t1 = _mm_castps_si128(a);   // reinterpret as 32-bit integer"},
{"lineNum":" 1211","line":"    Vec4ui t2 = Vec4ui((t1 & 0x007FFFFF) | 0x3F800000); // set exponent to 0 + bias"},
{"lineNum":" 1212","line":"    return _mm_castsi128_ps(t2);"},
{"lineNum":" 1213","line":"#endif"},
{"lineNum":" 1214","line":"}"},
{"lineNum":" 1215","line":""},
{"lineNum":" 1216","line":"// Fast calculation of pow(2,n) with n integer"},
{"lineNum":" 1217","line":"// n  =    0 gives 1.0f"},
{"lineNum":" 1218","line":"// n >=  128 gives +INF"},
{"lineNum":" 1219","line":"// n <= -127 gives 0.0f"},
{"lineNum":" 1220","line":"// This function will never produce denormals, and never raise exceptions"},
{"lineNum":" 1221","line":"static inline Vec4f exp2(Vec4i const & n) {"},
{"lineNum":" 1222","line":"    Vec4i t1 = max(n,  -0x7F);         // limit to allowed range"},
{"lineNum":" 1223","line":"    Vec4i t2 = min(t1,  0x80);"},
{"lineNum":" 1224","line":"    Vec4i t3 = t2 + 0x7F;              // add bias"},
{"lineNum":" 1225","line":"    Vec4i t4 = t3 << 23;               // put exponent into position 23"},
{"lineNum":" 1226","line":"    return _mm_castsi128_ps(t4);       // reinterpret as float"},
{"lineNum":" 1227","line":"}"},
{"lineNum":" 1228","line":"//static Vec4f exp2(Vec4f const & x); // defined in vectormath_exp.h"},
{"lineNum":" 1229","line":""},
{"lineNum":" 1230","line":""},
{"lineNum":" 1231","line":"// Control word manipulaton"},
{"lineNum":" 1232","line":"// ------------------------"},
{"lineNum":" 1233","line":"// The MXCSR control word has the following bits:"},
{"lineNum":" 1234","line":"//  0:    Invalid Operation Flag"},
{"lineNum":" 1235","line":"//  1:    Denormal Flag (=subnormal)"},
{"lineNum":" 1236","line":"//  2:    Divide-by-Zero Flag"},
{"lineNum":" 1237","line":"//  3:    Overflow Flag"},
{"lineNum":" 1238","line":"//  4:    Underflow Flag"},
{"lineNum":" 1239","line":"//  5:    Precision Flag"},
{"lineNum":" 1240","line":"//  6:    Denormals Are Zeros (=subnormals)"},
{"lineNum":" 1241","line":"//  7:    Invalid Operation Mask"},
{"lineNum":" 1242","line":"//  8:    Denormal Operation Mask (=subnormal)"},
{"lineNum":" 1243","line":"//  9:    Divide-by-Zero Mask"},
{"lineNum":" 1244","line":"// 10:    Overflow Mask"},
{"lineNum":" 1245","line":"// 11:    Underflow Mask"},
{"lineNum":" 1246","line":"// 12:    Precision Mask"},
{"lineNum":" 1247","line":"// 13-14: Rounding control"},
{"lineNum":" 1248","line":"//        00: round to nearest or even"},
{"lineNum":" 1249","line":"//        01: round down towards -infinity"},
{"lineNum":" 1250","line":"//        10: round up   towards +infinity"},
{"lineNum":" 1251","line":"//        11: round towards zero (truncate)"},
{"lineNum":" 1252","line":"// 15: Flush to Zero"},
{"lineNum":" 1253","line":""},
{"lineNum":" 1254","line":"// Function get_control_word:"},
{"lineNum":" 1255","line":"// Read the MXCSR control word"},
{"lineNum":" 1256","line":"static inline uint32_t get_control_word() {"},
{"lineNum":" 1257","line":"    return _mm_getcsr();"},
{"lineNum":" 1258","line":"}"},
{"lineNum":" 1259","line":""},
{"lineNum":" 1260","line":"// Function set_control_word:"},
{"lineNum":" 1261","line":"// Write the MXCSR control word"},
{"lineNum":" 1262","line":"static inline void set_control_word(uint32_t w) {"},
{"lineNum":" 1263","line":"    _mm_setcsr(w);"},
{"lineNum":" 1264","line":"}"},
{"lineNum":" 1265","line":""},
{"lineNum":" 1266","line":"// Function no_subnormals:"},
{"lineNum":" 1267","line":"// Set \"Denormals Are Zeros\" and \"Flush to Zero\" mode to avoid the extremely"},
{"lineNum":" 1268","line":"// time-consuming denormals in case of underflow"},
{"lineNum":" 1269","line":"static inline void no_subnormals() {"},
{"lineNum":" 1270","line":"    uint32_t t1 = get_control_word();"},
{"lineNum":" 1271","line":"    t1 |= (1 << 6) | (1 << 15);     // set bit 6 and 15 in MXCSR"},
{"lineNum":" 1272","line":"    set_control_word(t1);"},
{"lineNum":" 1273","line":"}"},
{"lineNum":" 1274","line":""},
{"lineNum":" 1275","line":"// Function reset_control_word:"},
{"lineNum":" 1276","line":"// Set the MXCSR control word to the default value 0x1F80."},
{"lineNum":" 1277","line":"// This will mask floating point exceptions, set rounding mode to nearest (or even),"},
{"lineNum":" 1278","line":"// and allow denormals."},
{"lineNum":" 1279","line":"static inline void reset_control_word() {"},
{"lineNum":" 1280","line":"    set_control_word(0x1F80);"},
{"lineNum":" 1281","line":"}"},
{"lineNum":" 1282","line":""},
{"lineNum":" 1283","line":""},
{"lineNum":" 1284","line":"// Categorization functions"},
{"lineNum":" 1285","line":""},
{"lineNum":" 1286","line":"// Function sign_bit: gives true for elements that have the sign bit set"},
{"lineNum":" 1287","line":"// even for -0.0f, -INF and -NAN"},
{"lineNum":" 1288","line":"// Note that sign_bit(Vec4f(-0.0f)) gives true, while Vec4f(-0.0f) < Vec4f(0.0f) gives false"},
{"lineNum":" 1289","line":"// (the underscore in the name avoids a conflict with a macro in Intel\'s mathimf.h)"},
{"lineNum":" 1290","line":"static inline Vec4fb sign_bit(Vec4f const & a) {"},
{"lineNum":" 1291","line":"    Vec4i t1 = _mm_castps_si128(a);    // reinterpret as 32-bit integer"},
{"lineNum":" 1292","line":"    Vec4i t2 = t1 >> 31;               // extend sign bit"},
{"lineNum":" 1293","line":"    return _mm_castsi128_ps(t2);       // reinterpret as 32-bit Boolean"},
{"lineNum":" 1294","line":"}"},
{"lineNum":" 1295","line":""},
{"lineNum":" 1296","line":"// Function sign_combine: changes the sign of a when b has the sign bit set"},
{"lineNum":" 1297","line":"// same as select(sign_bit(b), -a, a)"},
{"lineNum":" 1298","line":"static inline Vec4f sign_combine(Vec4f const & a, Vec4f const & b) {"},
{"lineNum":" 1299","line":"//    Vec4f signmask = _mm_castsi128_ps(constant4ui<0x80000000,0x80000000,0x80000000,0x80000000>());  // -0.0"},
{"lineNum":" 1300","line":"    Vec4f signmask = Vec4f(-0.f);"},
{"lineNum":" 1301","line":"    return a ^ (b & signmask);"},
{"lineNum":" 1302","line":"}"},
{"lineNum":" 1303","line":""},
{"lineNum":" 1304","line":"// Function is_finite: gives true for elements that are normal, denormal or zero,"},
{"lineNum":" 1305","line":"// false for INF and NAN"},
{"lineNum":" 1306","line":"// (the underscore in the name avoids a conflict with a macro in Intel\'s mathimf.h)"},
{"lineNum":" 1307","line":"// to do version 2: use fpclass"},
{"lineNum":" 1308","line":"static inline Vec4fb is_finite(Vec4f const & a) {"},
{"lineNum":" 1309","line":"    Vec4i t1 = _mm_castps_si128(a);    // reinterpret as 32-bit integer"},
{"lineNum":" 1310","line":"    Vec4i t2 = t1 << 1;                // shift out sign bit"},
{"lineNum":" 1311","line":"    Vec4i t3 = Vec4i(t2 & 0xFF000000) != 0xFF000000; // exponent field is not all 1s"},
{"lineNum":" 1312","line":"    return Vec4ib(t3);"},
{"lineNum":" 1313","line":"}"},
{"lineNum":" 1314","line":""},
{"lineNum":" 1315","line":"// Function is_inf: gives true for elements that are +INF or -INF"},
{"lineNum":" 1316","line":"// false for finite numbers and NAN"},
{"lineNum":" 1317","line":"// (the underscore in the name avoids a conflict with a macro in Intel\'s mathimf.h)"},
{"lineNum":" 1318","line":"static inline Vec4fb is_inf(Vec4f const & a) {"},
{"lineNum":" 1319","line":"    Vec4i t1 = _mm_castps_si128(a);    // reinterpret as 32-bit integer"},
{"lineNum":" 1320","line":"    Vec4i t2 = t1 << 1;                // shift out sign bit"},
{"lineNum":" 1321","line":"    return t2 == Vec4i(0xFF000000);    // exponent is all 1s, fraction is 0"},
{"lineNum":" 1322","line":"}"},
{"lineNum":" 1323","line":""},
{"lineNum":" 1324","line":"// Function is_nan: gives true for elements that are +NAN or -NAN"},
{"lineNum":" 1325","line":"// false for finite numbers and +/-INF"},
{"lineNum":" 1326","line":"// (the underscore in the name avoids a conflict with a macro in Intel\'s mathimf.h)"},
{"lineNum":" 1327","line":"//__attribute__ ((optimize(\"-fno-unsafe-math-optimizations\")));"},
{"lineNum":" 1328","line":"#if defined(__GNUC__) && !defined(__INTEL_COMPILER) && !defined(__clang__)"},
{"lineNum":" 1329","line":"__attribute__ ((optimize(\"-fno-unsafe-math-optimizations\")))"},
{"lineNum":" 1330","line":"#elif defined(__clang__)"},
{"lineNum":" 1331","line":"__attribute__((optnone))"},
{"lineNum":" 1332","line":"#endif"},
{"lineNum":" 1333","line":"static inline Vec4fb is_nan(Vec4f const & a)"},
{"lineNum":" 1334","line":"{"},
{"lineNum":" 1335","line":"    return a != a;"},
{"lineNum":" 1336","line":"}"},
{"lineNum":" 1337","line":""},
{"lineNum":" 1338","line":"// Function is_subnormal: gives true for elements that are denormal (subnormal)"},
{"lineNum":" 1339","line":"// false for finite numbers, zero, NAN and INF"},
{"lineNum":" 1340","line":"static inline Vec4fb is_subnormal(Vec4f const & a) {"},
{"lineNum":" 1341","line":"    Vec4i t1 = _mm_castps_si128(a);    // reinterpret as 32-bit integer"},
{"lineNum":" 1342","line":"    Vec4i t2 = t1 << 1;                // shift out sign bit"},
{"lineNum":" 1343","line":"    Vec4i t3 = 0xFF000000;             // exponent mask"},
{"lineNum":" 1344","line":"    Vec4i t4 = t2 & t3;                // exponent"},
{"lineNum":" 1345","line":"    Vec4i t5 = _mm_andnot_si128(t3,t2);// fraction"},
{"lineNum":" 1346","line":"    return Vec4ib((t4 == 0) & (t5 != 0));// exponent = 0 and fraction != 0"},
{"lineNum":" 1347","line":"}"},
{"lineNum":" 1348","line":""},
{"lineNum":" 1349","line":"// Function is_zero_or_subnormal: gives true for elements that are zero or subnormal (denormal)"},
{"lineNum":" 1350","line":"// false for finite numbers, NAN and INF"},
{"lineNum":" 1351","line":"static inline Vec4fb is_zero_or_subnormal(Vec4f const & a) {"},
{"lineNum":" 1352","line":"    Vec4i t = _mm_castps_si128(a);     // reinterpret as 32-bit integer"},
{"lineNum":" 1353","line":"          t &= 0x7F800000;             // isolate exponent"},
{"lineNum":" 1354","line":"    return t == 0;                     // exponent = 0"},
{"lineNum":" 1355","line":"}"},
{"lineNum":" 1356","line":""},
{"lineNum":" 1357","line":"// Function infinite4f: returns a vector where all elements are +INF"},
{"lineNum":" 1358","line":"static inline Vec4f infinite4f() {"},
{"lineNum":" 1359","line":"    return _mm_castsi128_ps(_mm_set1_epi32(0x7F800000));"},
{"lineNum":" 1360","line":"}"},
{"lineNum":" 1361","line":""},
{"lineNum":" 1362","line":"// Function nan4f: returns a vector where all elements are NAN (quiet)"},
{"lineNum":" 1363","line":"static inline Vec4f nan4f(int n = 0x10) {"},
{"lineNum":" 1364","line":"    return nan_vec<Vec4f>(n);"},
{"lineNum":" 1365","line":"}"},
{"lineNum":" 1366","line":""},
{"lineNum":" 1367","line":""},
{"lineNum":" 1368","line":"/*****************************************************************************"},
{"lineNum":" 1369","line":"*"},
{"lineNum":" 1370","line":"*          Vector Vec4f permute and blend functions"},
{"lineNum":" 1371","line":"*"},
{"lineNum":" 1372","line":"******************************************************************************"},
{"lineNum":" 1373","line":"*"},
{"lineNum":" 1374","line":"* The permute function can reorder the elements of a vector and optionally"},
{"lineNum":" 1375","line":"* set some elements to zero."},
{"lineNum":" 1376","line":"*"},
{"lineNum":" 1377","line":"* The indexes are inserted as template parameters in <>. These indexes must be"},
{"lineNum":" 1378","line":"* constants. Each template parameter is an index to the element you want to"},
{"lineNum":" 1379","line":"* select. A negative index will generate zero."},
{"lineNum":" 1380","line":"*"},
{"lineNum":" 1381","line":"* Example:"},
{"lineNum":" 1382","line":"* Vec4f a(10.f,11.f,12.f,13.f);        // a is (10,11,12,13)"},
{"lineNum":" 1383","line":"* Vec4f b, c;"},
{"lineNum":" 1384","line":"* b = permute4<0,0,2,2>(a);           // b is (10,10,12,12)"},
{"lineNum":" 1385","line":"* c = permute4<3,2,-1,-1>(a);         // c is (13,12, 0, 0)"},
{"lineNum":" 1386","line":"*"},
{"lineNum":" 1387","line":"*"},
{"lineNum":" 1388","line":"* The blend function can mix elements from two different vectors and"},
{"lineNum":" 1389","line":"* optionally set some elements to zero."},
{"lineNum":" 1390","line":"*"},
{"lineNum":" 1391","line":"* The indexes are inserted as template parameters in <>. These indexes must be"},
{"lineNum":" 1392","line":"* constants. Each template parameter is an index to the element you want to"},
{"lineNum":" 1393","line":"* select, where indexes 0 - 3 indicate an element from the first source"},
{"lineNum":" 1394","line":"* vector and indexes 4 - 7 indicate an element from the second source vector."},
{"lineNum":" 1395","line":"* A negative index will generate zero."},
{"lineNum":" 1396","line":"*"},
{"lineNum":" 1397","line":"*"},
{"lineNum":" 1398","line":"* Example:"},
{"lineNum":" 1399","line":"* Vec4f a(10.f,11.f,12.f,13.f);        // a is (10, 11, 12, 13)"},
{"lineNum":" 1400","line":"* Vec4f b(20.f,21.f,22.f,23.f);        // b is (20, 21, 22, 23)"},
{"lineNum":" 1401","line":"* Vec4f c;"},
{"lineNum":" 1402","line":"* c = blend4<1,4,-1,7> (a,b);         // c is (11, 20,  0, 23)"},
{"lineNum":" 1403","line":"*"},
{"lineNum":" 1404","line":"* Don\'t worry about the complicated code for these functions. Most of the"},
{"lineNum":" 1405","line":"* code is resolved at compile time to generate only a few instructions."},
{"lineNum":" 1406","line":"*****************************************************************************/"},
{"lineNum":" 1407","line":""},
{"lineNum":" 1408","line":"// permute vector Vec4f"},
{"lineNum":" 1409","line":"template <int i0, int i1, int i2, int i3>"},
{"lineNum":" 1410","line":"static inline Vec4f permute4(Vec4f const & a) {"},
{"lineNum":" 1411","line":"    // is shuffling needed"},
{"lineNum":" 1412","line":"    const bool do_shuffle = (i0 > 0) || (i1 != 1 && i1 >= 0) || (i2 != 2 && i2 >= 0) || (i3 != 3 && i3 >= 0);"},
{"lineNum":" 1413","line":"    // is zeroing needed"},
{"lineNum":" 1414","line":"    const bool do_zero    = (i0 | i1 | i2 | i3) < 0 && ((i0 | i1 | i2 | i3) & 0x80);"},
{"lineNum":" 1415","line":""},
{"lineNum":" 1416","line":"    if (!do_shuffle && !do_zero) {"},
{"lineNum":" 1417","line":"        return a;                                          // trivial case: do nothing"},
{"lineNum":" 1418","line":"    }"},
{"lineNum":" 1419","line":"    if (do_zero && !do_shuffle) {                          // zeroing, not shuffling"},
{"lineNum":" 1420","line":"        if ((i0 & i1 & i2 & i3) < 0) return _mm_setzero_ps(); // zero everything"},
{"lineNum":" 1421","line":"        // zero some elements"},
{"lineNum":" 1422","line":"        __m128i mask1 = constant4i< -int(i0>=0), -int(i1>=0), -int(i2>=0), -int(i3>=0) >();"},
{"lineNum":" 1423","line":"        return  _mm_and_ps(a,_mm_castsi128_ps(mask1));     // zero with AND mask"},
{"lineNum":" 1424","line":"    }"},
{"lineNum":" 1425","line":"    if (do_shuffle && !do_zero) {                          // shuffling, not zeroing"},
{"lineNum":" 1426","line":"        return _mm_shuffle_ps(a, a, (i0&3) | (i1&3)<<2 | (i2&3)<<4 | (i3&3)<<6);"},
{"lineNum":" 1427","line":"    }"},
{"lineNum":" 1428","line":"    // both shuffle and zero"},
{"lineNum":" 1429","line":"    if ((i0 & i1) < 0 && (i2 | i3) >= 0) {                 // zero low half, shuffle high half"},
{"lineNum":" 1430","line":"        return _mm_shuffle_ps(_mm_setzero_ps(), a, (i2&3)<<4 | (i3&3)<<6);"},
{"lineNum":" 1431","line":"    }"},
{"lineNum":" 1432","line":"    if ((i0 | i1) >= 0 && (i2 & i3) < 0) {                 // shuffle low half, zero high half"},
{"lineNum":" 1433","line":"        return _mm_shuffle_ps(a, _mm_setzero_ps(), (i0&3) | (i1&3)<<2);"},
{"lineNum":" 1434","line":"    }"},
{"lineNum":" 1435","line":"#if  INSTRSET >= 10  // AVX512VL"},
{"lineNum":" 1436","line":"    __mmask8 mmz = (i0>=0) | (i1>=0)<<1 | (i2>=0)<<2 | (i3>=0)<<3;"},
{"lineNum":" 1437","line":"    return _mm_maskz_shuffle_ps (mmz, a, a, (i0&3) | (i1&3)<<2 | (i2&3)<<4 | (i3&3)<<6);"},
{"lineNum":" 1438","line":""},
{"lineNum":" 1439","line":"#elif  INSTRSET >= 4  // SSSE3"},
{"lineNum":" 1440","line":"    // With SSSE3 we can do both with the PSHUFB instruction"},
{"lineNum":" 1441","line":"    const int j0 = (i0 & 3) << 2;"},
{"lineNum":" 1442","line":"    const int j1 = (i1 & 3) << 2;"},
{"lineNum":" 1443","line":"    const int j2 = (i2 & 3) << 2;"},
{"lineNum":" 1444","line":"    const int j3 = (i3 & 3) << 2;"},
{"lineNum":" 1445","line":"    __m128i mask2 = constant4i <"},
{"lineNum":" 1446","line":"        i0 < 0 ? -1 : j0 | (j0+1)<<8 | (j0+2)<<16 | (j0+3) << 24,"},
{"lineNum":" 1447","line":"        i1 < 0 ? -1 : j1 | (j1+1)<<8 | (j1+2)<<16 | (j1+3) << 24,"},
{"lineNum":" 1448","line":"        i2 < 0 ? -1 : j2 | (j2+1)<<8 | (j2+2)<<16 | (j2+3) << 24,"},
{"lineNum":" 1449","line":"        i3 < 0 ? -1 : j3 | (j3+1)<<8 | (j3+2)<<16 | (j3+3) << 24 > ();"},
{"lineNum":" 1450","line":"    return _mm_castsi128_ps(_mm_shuffle_epi8(_mm_castps_si128(a),mask2));"},
{"lineNum":" 1451","line":"#else"},
{"lineNum":" 1452","line":"    __m128 t1 = _mm_shuffle_ps(a, a, (i0&3) | (i1&3)<<2 | (i2&3)<<4 | (i3&3)<<6); // shuffle"},
{"lineNum":" 1453","line":"    __m128i mask3 = constant4i< -int(i0>=0), -int(i1>=0), -int(i2>=0), -int(i3>=0) >();"},
{"lineNum":" 1454","line":"    return _mm_and_ps(t1,_mm_castsi128_ps(mask3));     // zero with AND mask"},
{"lineNum":" 1455","line":"#endif"},
{"lineNum":" 1456","line":"}"},
{"lineNum":" 1457","line":""},
{"lineNum":" 1458","line":""},
{"lineNum":" 1459","line":"// blend vectors Vec4f"},
{"lineNum":" 1460","line":"template <int i0, int i1, int i2, int i3>"},
{"lineNum":" 1461","line":"static inline Vec4f blend4(Vec4f const & a, Vec4f const & b) {"},
{"lineNum":" 1462","line":""},
{"lineNum":" 1463","line":"    // Combine all the indexes into a single bitfield, with 8 bits for each"},
{"lineNum":" 1464","line":"    const int m1 = (i0&7) | (i1&7)<<8 | (i2&7)<<16 | (i3&7)<<24;"},
{"lineNum":" 1465","line":""},
{"lineNum":" 1466","line":"    // Mask to zero out negative indexes"},
{"lineNum":" 1467","line":"    const int m2 = (i0<0?0:0xFF) | (i1<0?0:0xFF)<<8 | (i2<0?0:0xFF)<<16 | (i3<0?0:0xFF)<<24;"},
{"lineNum":" 1468","line":""},
{"lineNum":" 1469","line":"    if ((m1 & 0x04040404 & m2) == 0) {"},
{"lineNum":" 1470","line":"        // all elements from a"},
{"lineNum":" 1471","line":"        return permute4<i0,i1,i2,i3>(a);"},
{"lineNum":" 1472","line":"    }"},
{"lineNum":" 1473","line":"    if (((m1^0x04040404) & 0x04040404 & m2) == 0) {"},
{"lineNum":" 1474","line":"        // all elements from b"},
{"lineNum":" 1475","line":"        return permute4<i0&~4, i1&~4, i2&~4, i3&~4>(b);"},
{"lineNum":" 1476","line":"    }"},
{"lineNum":" 1477","line":"    if (((m1 & ~0x04040404) ^ 0x03020100) == 0 && m2 == -1) {"},
{"lineNum":" 1478","line":"        // selecting without shuffling or zeroing"},
{"lineNum":" 1479","line":"        __m128i sel = constant4i <i0 & 4 ? 0 : -1, i1 & 4 ? 0 : -1, i2 & 4 ? 0 : -1, i3 & 4 ? 0 : -1> ();"},
{"lineNum":" 1480","line":"        return selectf(_mm_castsi128_ps(sel), a, b);"},
{"lineNum":" 1481","line":"    }"},
{"lineNum":" 1482","line":"#ifdef __XOP__     // Use AMD XOP instruction PPERM"},
{"lineNum":" 1483","line":"    __m128i maska = constant4i <"},
{"lineNum":" 1484","line":"        i0 < 0 ? 0x80808080 : (i0*4 & 31) + (((i0*4 & 31) + 1) << 8) + (((i0*4 & 31) + 2) << 16) + (((i0*4 & 31) + 3) << 24),"},
{"lineNum":" 1485","line":"        i1 < 0 ? 0x80808080 : (i1*4 & 31) + (((i1*4 & 31) + 1) << 8) + (((i1*4 & 31) + 2) << 16) + (((i1*4 & 31) + 3) << 24),"},
{"lineNum":" 1486","line":"        i2 < 0 ? 0x80808080 : (i2*4 & 31) + (((i2*4 & 31) + 1) << 8) + (((i2*4 & 31) + 2) << 16) + (((i2*4 & 31) + 3) << 24),"},
{"lineNum":" 1487","line":"        i3 < 0 ? 0x80808080 : (i3*4 & 31) + (((i3*4 & 31) + 1) << 8) + (((i3*4 & 31) + 2) << 16) + (((i3*4 & 31) + 3) << 24) > ();"},
{"lineNum":" 1488","line":"    return _mm_castsi128_ps(_mm_perm_epi8(_mm_castps_si128(a), _mm_castps_si128(b), maska));"},
{"lineNum":" 1489","line":"#else"},
{"lineNum":" 1490","line":"    if ((((m1 & ~0x04040404) ^ 0x03020100) & m2) == 0) {"},
{"lineNum":" 1491","line":"        // selecting and zeroing, not shuffling"},
{"lineNum":" 1492","line":"        __m128i sel1  = constant4i <i0 & 4 ? 0 : -1, i1 & 4 ? 0 : -1, i2 & 4 ? 0 : -1, i3 & 4 ? 0 : -1> ();"},
{"lineNum":" 1493","line":"        __m128i mask1 = constant4i< -int(i0>=0), -int(i1>=0), -int(i2>=0), -int(i3>=0) >();"},
{"lineNum":" 1494","line":"        __m128 t1 = selectf(_mm_castsi128_ps(sel1), a, b);   // select"},
{"lineNum":" 1495","line":"        return  _mm_and_ps(t1, _mm_castsi128_ps(mask1));     // zero"},
{"lineNum":" 1496","line":"    }"},
{"lineNum":" 1497","line":"    // special cases unpckhps, unpcklps, shufps"},
{"lineNum":" 1498","line":"    Vec4f t;"},
{"lineNum":" 1499","line":"    if (((m1 ^ 0x05010400) & m2) == 0) {"},
{"lineNum":" 1500","line":"        t = _mm_unpacklo_ps(a, b);"},
{"lineNum":" 1501","line":"        goto DOZERO;"},
{"lineNum":" 1502","line":"    }"},
{"lineNum":" 1503","line":"    if (((m1 ^ 0x01050004) & m2) == 0) {"},
{"lineNum":" 1504","line":"        t = _mm_unpacklo_ps(b, a);"},
{"lineNum":" 1505","line":"        goto DOZERO;"},
{"lineNum":" 1506","line":"    }"},
{"lineNum":" 1507","line":"    if (((m1 ^ 0x07030602) & m2) == 0) {"},
{"lineNum":" 1508","line":"        t = _mm_unpackhi_ps(a, b);"},
{"lineNum":" 1509","line":"        goto DOZERO;"},
{"lineNum":" 1510","line":"    }"},
{"lineNum":" 1511","line":"    if (((m1 ^ 0x03070206) & m2) == 0) {"},
{"lineNum":" 1512","line":"        t = _mm_unpackhi_ps(b, a);"},
{"lineNum":" 1513","line":"        goto DOZERO;"},
{"lineNum":" 1514","line":"    }"},
{"lineNum":" 1515","line":"    // first two elements from a, last two from b"},
{"lineNum":" 1516","line":"    if (((m1^0x04040000) & 0x04040404 & m2) == 0) {"},
{"lineNum":" 1517","line":"        t = _mm_shuffle_ps(a, b, (i0&3) + ((i1&3)<<2) + ((i2&3)<<4) + ((i3&3)<<6));"},
{"lineNum":" 1518","line":"        goto DOZERO;"},
{"lineNum":" 1519","line":"    }"},
{"lineNum":" 1520","line":"    // first two elements from b, last two from a"},
{"lineNum":" 1521","line":"    if (((m1^0x00000404) & 0x04040404 & m2) == 0) {"},
{"lineNum":" 1522","line":"        t = _mm_shuffle_ps(b, a, (i0&3) + ((i1&3)<<2) + ((i2&3)<<4) + ((i3&3)<<6));"},
{"lineNum":" 1523","line":"        goto DOZERO;"},
{"lineNum":" 1524","line":"    }"},
{"lineNum":" 1525","line":"    {   // general case. combine two permutes"},
{"lineNum":" 1526","line":"        __m128 a1 = permute4 <"},
{"lineNum":" 1527","line":"            (uint32_t)i0 < 4 ? i0 : -1,"},
{"lineNum":" 1528","line":"            (uint32_t)i1 < 4 ? i1 : -1,"},
{"lineNum":" 1529","line":"            (uint32_t)i2 < 4 ? i2 : -1,"},
{"lineNum":" 1530","line":"            (uint32_t)i3 < 4 ? i3 : -1  > (a);"},
{"lineNum":" 1531","line":"        __m128 b1 = permute4 <"},
{"lineNum":" 1532","line":"            (uint32_t)(i0^4) < 4 ? (i0^4) : -1,"},
{"lineNum":" 1533","line":"            (uint32_t)(i1^4) < 4 ? (i1^4) : -1,"},
{"lineNum":" 1534","line":"            (uint32_t)(i2^4) < 4 ? (i2^4) : -1,"},
{"lineNum":" 1535","line":"            (uint32_t)(i3^4) < 4 ? (i3^4) : -1  > (b);"},
{"lineNum":" 1536","line":"        return  _mm_or_ps(a1,b1);"},
{"lineNum":" 1537","line":"    }"},
{"lineNum":" 1538","line":"DOZERO:"},
{"lineNum":" 1539","line":"    if ((i0|i1|i2|i3) & 0x80) {"},
{"lineNum":" 1540","line":"        // zero some elements"},
{"lineNum":" 1541","line":"        __m128i mask1 = constant4i< -int(i0>=0), -int(i1>=0), -int(i2>=0), -int(i3>=0) >();"},
{"lineNum":" 1542","line":"        t = _mm_and_ps(t,_mm_castsi128_ps(mask1));     // zero with AND mask"},
{"lineNum":" 1543","line":"    }"},
{"lineNum":" 1544","line":"    return t;"},
{"lineNum":" 1545","line":""},
{"lineNum":" 1546","line":"#endif // __XOP__"},
{"lineNum":" 1547","line":"}"},
{"lineNum":" 1548","line":""},
{"lineNum":" 1549","line":"// change signs on vectors Vec4f"},
{"lineNum":" 1550","line":"// Each index i0 - i3 is 1 for changing sign on the corresponding element, 0 for no change"},
{"lineNum":" 1551","line":"template <int i0, int i1, int i2, int i3>"},
{"lineNum":" 1552","line":"static inline Vec4f change_sign(Vec4f const & a) {"},
{"lineNum":" 1553","line":"    if ((i0 | i1 | i2 | i3) == 0) return a;"},
{"lineNum":" 1554","line":"    __m128i mask = constant4ui<i0 ? 0x80000000 : 0, i1 ? 0x80000000 : 0, i2 ? 0x80000000 : 0, i3 ? 0x80000000 : 0>();"},
{"lineNum":" 1555","line":"    return  _mm_xor_ps(a, _mm_castsi128_ps(mask));     // flip sign bits"},
{"lineNum":" 1556","line":"}"},
{"lineNum":" 1557","line":""},
{"lineNum":" 1558","line":""},
{"lineNum":" 1559","line":"/*****************************************************************************"},
{"lineNum":" 1560","line":"*"},
{"lineNum":" 1561","line":"*          Vec2d: Vector of 2 double precision floating point values"},
{"lineNum":" 1562","line":"*"},
{"lineNum":" 1563","line":"*****************************************************************************/"},
{"lineNum":" 1564","line":""},
{"lineNum":" 1565","line":"class Vec2d {"},
{"lineNum":" 1566","line":"protected:"},
{"lineNum":" 1567","line":"    __m128d xmm; // double vector"},
{"lineNum":" 1568","line":"public:"},
{"lineNum":" 1569","line":"    // Default constructor:"},
{"lineNum":" 1570","line":"    Vec2d() {"},
{"lineNum":" 1571","line":"    }"},
{"lineNum":" 1572","line":"    // Constructor to broadcast the same value into all elements:"},
{"lineNum":" 1573","line":"    Vec2d(double d) {"},
{"lineNum":" 1574","line":"        xmm = _mm_set1_pd(d);"},
{"lineNum":" 1575","line":"    }"},
{"lineNum":" 1576","line":"    // Constructor to build from all elements:"},
{"lineNum":" 1577","line":"    Vec2d(double d0, double d1) {"},
{"lineNum":" 1578","line":"        xmm = _mm_setr_pd(d0, d1);"},
{"lineNum":" 1579","line":"    }"},
{"lineNum":" 1580","line":"    // Constructor to convert from type __m128d used in intrinsics:"},
{"lineNum":" 1581","line":"    Vec2d(__m128d const & x) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1582","line":"        xmm = x;","class":"lineNoCov","hits":"0","possible_hits":"17",},
{"lineNum":" 1583","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1584","line":"    // Assignment operator to convert from type __m128d used in intrinsics:"},
{"lineNum":" 1585","line":"    Vec2d & operator = (__m128d const & x) {"},
{"lineNum":" 1586","line":"        xmm = x;"},
{"lineNum":" 1587","line":"        return *this;"},
{"lineNum":" 1588","line":"    }"},
{"lineNum":" 1589","line":"    // Type cast operator to convert to __m128d used in intrinsics"},
{"lineNum":" 1590","line":"    operator __m128d() const {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1591","line":"        return xmm;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1592","line":"    }"},
{"lineNum":" 1593","line":"    // Member function to load from array (unaligned)"},
{"lineNum":" 1594","line":"    Vec2d & load(double const * p) {"},
{"lineNum":" 1595","line":"        xmm = _mm_loadu_pd(p);"},
{"lineNum":" 1596","line":"        return *this;"},
{"lineNum":" 1597","line":"    }"},
{"lineNum":" 1598","line":"    // Member function to load from array, aligned by 16"},
{"lineNum":" 1599","line":"    // \"load_a\" is faster than \"load\" on older Intel processors (Pentium 4, Pentium M, Core 1,"},
{"lineNum":" 1600","line":"    // Merom, Wolfdale) and Atom, but not on other processors from Intel, AMD or VIA."},
{"lineNum":" 1601","line":"    // You may use load_a instead of load if you are certain that p points to an address"},
{"lineNum":" 1602","line":"    // divisible by 16."},
{"lineNum":" 1603","line":"    Vec2d const & load_a(double const * p) {"},
{"lineNum":" 1604","line":"        xmm = _mm_load_pd(p);"},
{"lineNum":" 1605","line":"        return *this;"},
{"lineNum":" 1606","line":"    }"},
{"lineNum":" 1607","line":"    // Member function to store into array (unaligned)"},
{"lineNum":" 1608","line":"    void store(double * p) const {"},
{"lineNum":" 1609","line":"        _mm_storeu_pd(p, xmm);"},
{"lineNum":" 1610","line":"    }"},
{"lineNum":" 1611","line":"    // Member function to store into array, aligned by 16"},
{"lineNum":" 1612","line":"    // \"store_a\" is faster than \"store\" on older Intel processors (Pentium 4, Pentium M, Core 1,"},
{"lineNum":" 1613","line":"    // Merom, Wolfdale) and Atom, but not on other processors from Intel, AMD or VIA."},
{"lineNum":" 1614","line":"    // You may use store_a instead of store if you are certain that p points to an address"},
{"lineNum":" 1615","line":"    // divisible by 16."},
{"lineNum":" 1616","line":"    void store_a(double * p) const {"},
{"lineNum":" 1617","line":"        _mm_store_pd(p, xmm);"},
{"lineNum":" 1618","line":"    }"},
{"lineNum":" 1619","line":"    // Partial load. Load n elements and set the rest to 0"},
{"lineNum":" 1620","line":"    Vec2d & load_partial(int n, double const * p) {"},
{"lineNum":" 1621","line":"#if INSTRSET >= 10   // AVX512VL"},
{"lineNum":" 1622","line":"        xmm = _mm_maskz_loadu_pd(__mmask8((1u << n) - 1), p);"},
{"lineNum":" 1623","line":"#else"},
{"lineNum":" 1624","line":"        if (n == 1) {"},
{"lineNum":" 1625","line":"            xmm = _mm_load_sd(p);"},
{"lineNum":" 1626","line":"        }"},
{"lineNum":" 1627","line":"        else if (n == 2) {"},
{"lineNum":" 1628","line":"            load(p);"},
{"lineNum":" 1629","line":"        }"},
{"lineNum":" 1630","line":"        else {"},
{"lineNum":" 1631","line":"            xmm = _mm_setzero_pd();"},
{"lineNum":" 1632","line":"        }"},
{"lineNum":" 1633","line":"#endif"},
{"lineNum":" 1634","line":"        return *this;"},
{"lineNum":" 1635","line":"    }"},
{"lineNum":" 1636","line":"    // Partial store. Store n elements"},
{"lineNum":" 1637","line":"    void store_partial(int n, double * p) const {"},
{"lineNum":" 1638","line":"#if INSTRSET >= 10  // AVX512VL"},
{"lineNum":" 1639","line":"        _mm_mask_storeu_pd(p, __mmask8((1u << n) - 1), xmm);"},
{"lineNum":" 1640","line":"#else"},
{"lineNum":" 1641","line":"        if (n == 1) {"},
{"lineNum":" 1642","line":"            _mm_store_sd(p, xmm);"},
{"lineNum":" 1643","line":"        }"},
{"lineNum":" 1644","line":"        else if (n == 2) {"},
{"lineNum":" 1645","line":"            store(p);"},
{"lineNum":" 1646","line":"        }"},
{"lineNum":" 1647","line":"#endif"},
{"lineNum":" 1648","line":"    }"},
{"lineNum":" 1649","line":"    // cut off vector to n elements. The last 4-n elements are set to zero"},
{"lineNum":" 1650","line":"    Vec2d & cutoff(int n) {"},
{"lineNum":" 1651","line":"#if INSTRSET >= 10"},
{"lineNum":" 1652","line":"        xmm = _mm_maskz_mov_pd(__mmask8((1u << n) - 1), xmm);"},
{"lineNum":" 1653","line":"#else"},
{"lineNum":" 1654","line":"        xmm = _mm_castps_pd(Vec4f(_mm_castpd_ps(xmm)).cutoff(n*2));"},
{"lineNum":" 1655","line":"#endif"},
{"lineNum":" 1656","line":"        return *this;"},
{"lineNum":" 1657","line":"    }"},
{"lineNum":" 1658","line":"    // Member function to change a single element in vector"},
{"lineNum":" 1659","line":"    // Note: This function is inefficient. Use load function if changing more than one element"},
{"lineNum":" 1660","line":"    Vec2d const & insert(int index, double value) {"},
{"lineNum":" 1661","line":"#if INSTRSET >= 10   // AVX512VL"},
{"lineNum":" 1662","line":"        xmm = _mm_mask_movedup_pd (xmm, __mmask8(1u << index), _mm_set_sd(value));"},
{"lineNum":" 1663","line":"#else"},
{"lineNum":" 1664","line":"        __m128d v2 = _mm_set_sd(value);"},
{"lineNum":" 1665","line":"        if (index == 0) {"},
{"lineNum":" 1666","line":"            xmm = _mm_shuffle_pd(v2,xmm,2);"},
{"lineNum":" 1667","line":"        }"},
{"lineNum":" 1668","line":"        else {"},
{"lineNum":" 1669","line":"            xmm = _mm_shuffle_pd(xmm,v2,0);"},
{"lineNum":" 1670","line":"        }"},
{"lineNum":" 1671","line":"#endif"},
{"lineNum":" 1672","line":"        return *this;"},
{"lineNum":" 1673","line":"    };"},
{"lineNum":" 1674","line":"    // Member function extract a single element from vector"},
{"lineNum":" 1675","line":"    double extract(int index) const {"},
{"lineNum":" 1676","line":"#if INSTRSET >= 10   // AVX512VL"},
{"lineNum":" 1677","line":"        __m128d x = _mm_mask_unpackhi_pd(xmm, __mmask8(index), xmm, xmm);"},
{"lineNum":" 1678","line":"        return _mm_cvtsd_f64(x);"},
{"lineNum":" 1679","line":"#else"},
{"lineNum":" 1680","line":"        double x[2];"},
{"lineNum":" 1681","line":"        store(x);"},
{"lineNum":" 1682","line":"        return x[index & 1];"},
{"lineNum":" 1683","line":"#endif"},
{"lineNum":" 1684","line":"    }"},
{"lineNum":" 1685","line":"    // Extract a single element. Use store function if extracting more than one element."},
{"lineNum":" 1686","line":"    // Operator [] can only read an element, not write."},
{"lineNum":" 1687","line":"    double operator [] (int index) const {"},
{"lineNum":" 1688","line":"        return extract(index);"},
{"lineNum":" 1689","line":"    }"},
{"lineNum":" 1690","line":"    static int size() {"},
{"lineNum":" 1691","line":"        return 2;"},
{"lineNum":" 1692","line":"    }"},
{"lineNum":" 1693","line":"    static int elementtype() {"},
{"lineNum":" 1694","line":"        return 17;"},
{"lineNum":" 1695","line":"    }"},
{"lineNum":" 1696","line":"};"},
{"lineNum":" 1697","line":""},
{"lineNum":" 1698","line":""},
{"lineNum":" 1699","line":"/*****************************************************************************"},
{"lineNum":" 1700","line":"*"},
{"lineNum":" 1701","line":"*          Operators for Vec2d"},
{"lineNum":" 1702","line":"*"},
{"lineNum":" 1703","line":"*****************************************************************************/"},
{"lineNum":" 1704","line":""},
{"lineNum":" 1705","line":"// vector operator + : add element by element"},
{"lineNum":" 1706","line":"static inline Vec2d operator + (Vec2d const & a, Vec2d const & b) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1707","line":"    return _mm_add_pd(a, b);","class":"lineNoCov","hits":"0","possible_hits":"1225",},
{"lineNum":" 1708","line":"}"},
{"lineNum":" 1709","line":""},
{"lineNum":" 1710","line":"// vector operator + : add vector and scalar"},
{"lineNum":" 1711","line":"static inline Vec2d operator + (Vec2d const & a, double b) {"},
{"lineNum":" 1712","line":"    return a + Vec2d(b);"},
{"lineNum":" 1713","line":"}"},
{"lineNum":" 1714","line":"static inline Vec2d operator + (double a, Vec2d const & b) {"},
{"lineNum":" 1715","line":"    return Vec2d(a) + b;"},
{"lineNum":" 1716","line":"}"},
{"lineNum":" 1717","line":""},
{"lineNum":" 1718","line":"// vector operator += : add"},
{"lineNum":" 1719","line":"static inline Vec2d & operator += (Vec2d & a, Vec2d const & b) {"},
{"lineNum":" 1720","line":"    a = a + b;"},
{"lineNum":" 1721","line":"    return a;"},
{"lineNum":" 1722","line":"}"},
{"lineNum":" 1723","line":""},
{"lineNum":" 1724","line":"// postfix operator ++"},
{"lineNum":" 1725","line":"static inline Vec2d operator ++ (Vec2d & a, int) {"},
{"lineNum":" 1726","line":"    Vec2d a0 = a;"},
{"lineNum":" 1727","line":"    a = a + 1.0;"},
{"lineNum":" 1728","line":"    return a0;"},
{"lineNum":" 1729","line":"}"},
{"lineNum":" 1730","line":""},
{"lineNum":" 1731","line":"// prefix operator ++"},
{"lineNum":" 1732","line":"static inline Vec2d & operator ++ (Vec2d & a) {"},
{"lineNum":" 1733","line":"    a = a + 1.0;"},
{"lineNum":" 1734","line":"    return a;"},
{"lineNum":" 1735","line":"}"},
{"lineNum":" 1736","line":""},
{"lineNum":" 1737","line":"// vector operator - : subtract element by element"},
{"lineNum":" 1738","line":"static inline Vec2d operator - (Vec2d const & a, Vec2d const & b) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1739","line":"    return _mm_sub_pd(a, b);","class":"lineNoCov","hits":"0","possible_hits":"758",},
{"lineNum":" 1740","line":"}"},
{"lineNum":" 1741","line":""},
{"lineNum":" 1742","line":"// vector operator - : subtract vector and scalar"},
{"lineNum":" 1743","line":"static inline Vec2d operator - (Vec2d const & a, double b) {"},
{"lineNum":" 1744","line":"    return a - Vec2d(b);"},
{"lineNum":" 1745","line":"}"},
{"lineNum":" 1746","line":"static inline Vec2d operator - (double a, Vec2d const & b) {"},
{"lineNum":" 1747","line":"    return Vec2d(a) - b;"},
{"lineNum":" 1748","line":"}"},
{"lineNum":" 1749","line":""},
{"lineNum":" 1750","line":"// vector operator - : unary minus"},
{"lineNum":" 1751","line":"// Change sign bit, even for 0, INF and NAN"},
{"lineNum":" 1752","line":"static inline Vec2d operator - (Vec2d const & a) {"},
{"lineNum":" 1753","line":"    return _mm_xor_pd(a, _mm_castsi128_pd(_mm_setr_epi32(0,0x80000000,0,0x80000000)));","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1754","line":"}"},
{"lineNum":" 1755","line":""},
{"lineNum":" 1756","line":"// vector operator -= : subtract"},
{"lineNum":" 1757","line":"static inline Vec2d & operator -= (Vec2d & a, Vec2d const & b) {"},
{"lineNum":" 1758","line":"    a = a - b;"},
{"lineNum":" 1759","line":"    return a;"},
{"lineNum":" 1760","line":"}"},
{"lineNum":" 1761","line":""},
{"lineNum":" 1762","line":"// postfix operator --"},
{"lineNum":" 1763","line":"static inline Vec2d operator -- (Vec2d & a, int) {"},
{"lineNum":" 1764","line":"    Vec2d a0 = a;"},
{"lineNum":" 1765","line":"    a = a - 1.0;"},
{"lineNum":" 1766","line":"    return a0;"},
{"lineNum":" 1767","line":"}"},
{"lineNum":" 1768","line":""},
{"lineNum":" 1769","line":"// prefix operator --"},
{"lineNum":" 1770","line":"static inline Vec2d & operator -- (Vec2d & a) {"},
{"lineNum":" 1771","line":"    a = a - 1.0;"},
{"lineNum":" 1772","line":"    return a;"},
{"lineNum":" 1773","line":"}"},
{"lineNum":" 1774","line":""},
{"lineNum":" 1775","line":"// vector operator * : multiply element by element"},
{"lineNum":" 1776","line":"static inline Vec2d operator * (Vec2d const & a, Vec2d const & b) {"},
{"lineNum":" 1777","line":"    return _mm_mul_pd(a, b);","class":"lineNoCov","hits":"0","possible_hits":"1880",},
{"lineNum":" 1778","line":"}"},
{"lineNum":" 1779","line":""},
{"lineNum":" 1780","line":"// vector operator * : multiply vector and scalar"},
{"lineNum":" 1781","line":"static inline Vec2d operator * (Vec2d const & a, double b) {"},
{"lineNum":" 1782","line":"    return a * Vec2d(b);"},
{"lineNum":" 1783","line":"}"},
{"lineNum":" 1784","line":"static inline Vec2d operator * (double a, Vec2d const & b) {"},
{"lineNum":" 1785","line":"    return Vec2d(a) * b;"},
{"lineNum":" 1786","line":"}"},
{"lineNum":" 1787","line":""},
{"lineNum":" 1788","line":"// vector operator *= : multiply"},
{"lineNum":" 1789","line":"static inline Vec2d & operator *= (Vec2d & a, Vec2d const & b) {"},
{"lineNum":" 1790","line":"    a = a * b;"},
{"lineNum":" 1791","line":"    return a;"},
{"lineNum":" 1792","line":"}"},
{"lineNum":" 1793","line":""},
{"lineNum":" 1794","line":"// vector operator / : divide all elements by same integer"},
{"lineNum":" 1795","line":"static inline Vec2d operator / (Vec2d const & a, Vec2d const & b) {"},
{"lineNum":" 1796","line":"    return _mm_div_pd(a, b);","class":"lineNoCov","hits":"0","possible_hits":"255",},
{"lineNum":" 1797","line":"}"},
{"lineNum":" 1798","line":""},
{"lineNum":" 1799","line":"// vector operator / : divide vector and scalar"},
{"lineNum":" 1800","line":"static inline Vec2d operator / (Vec2d const & a, double b) {"},
{"lineNum":" 1801","line":"    return a / Vec2d(b);"},
{"lineNum":" 1802","line":"}"},
{"lineNum":" 1803","line":"static inline Vec2d operator / (double a, Vec2d const & b) {"},
{"lineNum":" 1804","line":"    return Vec2d(a) / b;"},
{"lineNum":" 1805","line":"}"},
{"lineNum":" 1806","line":""},
{"lineNum":" 1807","line":"// vector operator /= : divide"},
{"lineNum":" 1808","line":"static inline Vec2d & operator /= (Vec2d & a, Vec2d const & b) {"},
{"lineNum":" 1809","line":"    a = a / b;"},
{"lineNum":" 1810","line":"    return a;"},
{"lineNum":" 1811","line":"}"},
{"lineNum":" 1812","line":""},
{"lineNum":" 1813","line":"// vector operator == : returns true for elements for which a == b"},
{"lineNum":" 1814","line":"static inline Vec2db operator == (Vec2d const & a, Vec2d const & b) {"},
{"lineNum":" 1815","line":"    return _mm_cmpeq_pd(a, b);"},
{"lineNum":" 1816","line":"}"},
{"lineNum":" 1817","line":""},
{"lineNum":" 1818","line":"// vector operator != : returns true for elements for which a != b"},
{"lineNum":" 1819","line":"static inline Vec2db operator != (Vec2d const & a, Vec2d const & b) {"},
{"lineNum":" 1820","line":"    return _mm_cmpneq_pd(a, b);"},
{"lineNum":" 1821","line":"}"},
{"lineNum":" 1822","line":""},
{"lineNum":" 1823","line":"// vector operator < : returns true for elements for which a < b"},
{"lineNum":" 1824","line":"static inline Vec2db operator < (Vec2d const & a, Vec2d const & b) {"},
{"lineNum":" 1825","line":"    return _mm_cmplt_pd(a, b);","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":" 1826","line":"}"},
{"lineNum":" 1827","line":""},
{"lineNum":" 1828","line":"// vector operator <= : returns true for elements for which a <= b"},
{"lineNum":" 1829","line":"static inline Vec2db operator <= (Vec2d const & a, Vec2d const & b) {"},
{"lineNum":" 1830","line":"    return _mm_cmple_pd(a, b);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1831","line":"}"},
{"lineNum":" 1832","line":""},
{"lineNum":" 1833","line":"// vector operator > : returns true for elements for which a > b"},
{"lineNum":" 1834","line":"static inline Vec2db operator > (Vec2d const & a, Vec2d const & b) {"},
{"lineNum":" 1835","line":"    return b < a;"},
{"lineNum":" 1836","line":"}"},
{"lineNum":" 1837","line":""},
{"lineNum":" 1838","line":"// vector operator >= : returns true for elements for which a >= b"},
{"lineNum":" 1839","line":"static inline Vec2db operator >= (Vec2d const & a, Vec2d const & b) {"},
{"lineNum":" 1840","line":"    return b <= a;"},
{"lineNum":" 1841","line":"}"},
{"lineNum":" 1842","line":""},
{"lineNum":" 1843","line":"// Bitwise logical operators"},
{"lineNum":" 1844","line":""},
{"lineNum":" 1845","line":"// vector operator & : bitwise and"},
{"lineNum":" 1846","line":"static inline Vec2d operator & (Vec2d const & a, Vec2d const & b) {"},
{"lineNum":" 1847","line":"    return _mm_and_pd(a, b);","class":"lineNoCov","hits":"0","possible_hits":"24",},
{"lineNum":" 1848","line":"}"},
{"lineNum":" 1849","line":""},
{"lineNum":" 1850","line":"// vector operator &= : bitwise and"},
{"lineNum":" 1851","line":"static inline Vec2d & operator &= (Vec2d & a, Vec2d const & b) {"},
{"lineNum":" 1852","line":"    a = a & b;"},
{"lineNum":" 1853","line":"    return a;"},
{"lineNum":" 1854","line":"}"},
{"lineNum":" 1855","line":""},
{"lineNum":" 1856","line":"// vector operator & : bitwise and of Vec2d and Vec2db"},
{"lineNum":" 1857","line":"static inline Vec2d operator & (Vec2d const & a, Vec2db const & b) {"},
{"lineNum":" 1858","line":"    return _mm_and_pd(a, b);"},
{"lineNum":" 1859","line":"}"},
{"lineNum":" 1860","line":"static inline Vec2d operator & (Vec2db const & a, Vec2d const & b) {"},
{"lineNum":" 1861","line":"    return _mm_and_pd(a, b);"},
{"lineNum":" 1862","line":"}"},
{"lineNum":" 1863","line":""},
{"lineNum":" 1864","line":"// vector operator | : bitwise or"},
{"lineNum":" 1865","line":"static inline Vec2d operator | (Vec2d const & a, Vec2d const & b) {"},
{"lineNum":" 1866","line":"    return _mm_or_pd(a, b);"},
{"lineNum":" 1867","line":"}"},
{"lineNum":" 1868","line":""},
{"lineNum":" 1869","line":"// vector operator |= : bitwise or"},
{"lineNum":" 1870","line":"static inline Vec2d & operator |= (Vec2d & a, Vec2d const & b) {"},
{"lineNum":" 1871","line":"    a = a | b;"},
{"lineNum":" 1872","line":"    return a;"},
{"lineNum":" 1873","line":"}"},
{"lineNum":" 1874","line":""},
{"lineNum":" 1875","line":"// vector operator ^ : bitwise xor"},
{"lineNum":" 1876","line":"static inline Vec2d operator ^ (Vec2d const & a, Vec2d const & b) {"},
{"lineNum":" 1877","line":"    return _mm_xor_pd(a, b);","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":" 1878","line":"}"},
{"lineNum":" 1879","line":""},
{"lineNum":" 1880","line":"// vector operator ^= : bitwise xor"},
{"lineNum":" 1881","line":"static inline Vec2d & operator ^= (Vec2d & a, Vec2d const & b) {"},
{"lineNum":" 1882","line":"    a = a ^ b;"},
{"lineNum":" 1883","line":"    return a;"},
{"lineNum":" 1884","line":"}"},
{"lineNum":" 1885","line":""},
{"lineNum":" 1886","line":"// vector operator ! : logical not. Returns Boolean vector"},
{"lineNum":" 1887","line":"static inline Vec2db operator ! (Vec2d const & a) {"},
{"lineNum":" 1888","line":"    return a == Vec2d(0.0);"},
{"lineNum":" 1889","line":"}"},
{"lineNum":" 1890","line":""},
{"lineNum":" 1891","line":""},
{"lineNum":" 1892","line":"/*****************************************************************************"},
{"lineNum":" 1893","line":"*"},
{"lineNum":" 1894","line":"*          Functions for Vec2d"},
{"lineNum":" 1895","line":"*"},
{"lineNum":" 1896","line":"*****************************************************************************/"},
{"lineNum":" 1897","line":""},
{"lineNum":" 1898","line":"// Select between two operands. Corresponds to this pseudocode:"},
{"lineNum":" 1899","line":"// for (int i = 0; i < 2; i++) result[i] = s[i] ? a[i] : b[i];"},
{"lineNum":" 1900","line":"// Each byte in s must be either 0 (false) or 0xFFFFFFFFFFFFFFFF (true)."},
{"lineNum":" 1901","line":"// No other values are allowed."},
{"lineNum":" 1902","line":"static inline Vec2d select (Vec2db const & s, Vec2d const & a, Vec2d const & b) {"},
{"lineNum":" 1903","line":"    return selectd(s,a,b);"},
{"lineNum":" 1904","line":"}"},
{"lineNum":" 1905","line":""},
{"lineNum":" 1906","line":"// Conditional add: For all vector elements i: result[i] = f[i] ? (a[i] + b[i]) : a[i]"},
{"lineNum":" 1907","line":"static inline Vec2d if_add (Vec2db const & f, Vec2d const & a, Vec2d const & b) {"},
{"lineNum":" 1908","line":"    return a + (Vec2d(f) & b);"},
{"lineNum":" 1909","line":"}"},
{"lineNum":" 1910","line":""},
{"lineNum":" 1911","line":"// Conditional sub: For all vector elements i: result[i] = f[i] ? (a[i] - b[i]) : a[i]"},
{"lineNum":" 1912","line":"static inline Vec2d if_sub (Vec2db const & f, Vec2d const & a, Vec2d const & b) {"},
{"lineNum":" 1913","line":"    return a - (Vec2d(f) & b);"},
{"lineNum":" 1914","line":"}"},
{"lineNum":" 1915","line":""},
{"lineNum":" 1916","line":"// Conditional multiply: For all vector elements i: result[i] = f[i] ? (a[i] * b[i]) : a[i]"},
{"lineNum":" 1917","line":"static inline Vec2d if_mul (Vec2db const & f, Vec2d const & a, Vec2d const & b) {"},
{"lineNum":" 1918","line":"    return a * select(f, b, 1.);"},
{"lineNum":" 1919","line":"}"},
{"lineNum":" 1920","line":""},
{"lineNum":" 1921","line":"// Conditional divide: For all vector elements i: result[i] = f[i] ? (a[i] / b[i]) : a[i]"},
{"lineNum":" 1922","line":"static inline Vec2d if_div (Vec2db const & f, Vec2d const & a, Vec2d const & b) {"},
{"lineNum":" 1923","line":"    return a / select(f, b, 1.);"},
{"lineNum":" 1924","line":"}"},
{"lineNum":" 1925","line":""},
{"lineNum":" 1926","line":""},
{"lineNum":" 1927","line":"// General arithmetic functions, etc."},
{"lineNum":" 1928","line":""},
{"lineNum":" 1929","line":"// Horizontal add: Calculates the sum of all vector elements."},
{"lineNum":" 1930","line":"static inline double horizontal_add (Vec2d const & a) {"},
{"lineNum":" 1931","line":"#if  INSTRSET >= 3  // SSE3"},
{"lineNum":" 1932","line":"    __m128d t1 = _mm_hadd_pd(a,a);"},
{"lineNum":" 1933","line":"    return _mm_cvtsd_f64(t1);"},
{"lineNum":" 1934","line":"#else"},
{"lineNum":" 1935","line":"    __m128  t0 = _mm_castpd_ps(a);"},
{"lineNum":" 1936","line":"    __m128d t1 = _mm_castps_pd(_mm_movehl_ps(t0,t0));"},
{"lineNum":" 1937","line":"    __m128d t2 = _mm_add_sd(a,t1);"},
{"lineNum":" 1938","line":"    return _mm_cvtsd_f64(t2);"},
{"lineNum":" 1939","line":"#endif"},
{"lineNum":" 1940","line":"}"},
{"lineNum":" 1941","line":""},
{"lineNum":" 1942","line":"// function max: a > b ? a : b"},
{"lineNum":" 1943","line":"static inline Vec2d max(Vec2d const & a, Vec2d const & b) {"},
{"lineNum":" 1944","line":"    return _mm_max_pd(a,b);"},
{"lineNum":" 1945","line":"}"},
{"lineNum":" 1946","line":""},
{"lineNum":" 1947","line":"// function min: a < b ? a : b"},
{"lineNum":" 1948","line":"static inline Vec2d min(Vec2d const & a, Vec2d const & b) {"},
{"lineNum":" 1949","line":"    return _mm_min_pd(a,b);"},
{"lineNum":" 1950","line":"}"},
{"lineNum":" 1951","line":""},
{"lineNum":" 1952","line":"// same as max, NAN-safe"},
{"lineNum":" 1953","line":"static inline Vec2d maximum(Vec2d const & a, Vec2d const & b) {"},
{"lineNum":" 1954","line":"    return select(a != a, a, max(a,b));"},
{"lineNum":" 1955","line":"}"},
{"lineNum":" 1956","line":""},
{"lineNum":" 1957","line":"// same as min, NAN-safe"},
{"lineNum":" 1958","line":"static inline Vec2d minimum(Vec2d const & a, Vec2d const & b) {"},
{"lineNum":" 1959","line":"    return select(a != a, a, min(a,b));"},
{"lineNum":" 1960","line":"}"},
{"lineNum":" 1961","line":""},
{"lineNum":" 1962","line":"// function abs: absolute value"},
{"lineNum":" 1963","line":"static inline Vec2d abs(Vec2d const & a) {"},
{"lineNum":" 1964","line":"#if INSTRSET >= 10  // AVX512VL"},
{"lineNum":" 1965","line":"    return _mm_range_pd(a, a, 8);"},
{"lineNum":" 1966","line":"#else"},
{"lineNum":" 1967","line":"    __m128d mask = _mm_castsi128_pd(_mm_setr_epi32(-1,0x7FFFFFFF,-1,0x7FFFFFFF));"},
{"lineNum":" 1968","line":"    return _mm_and_pd(a,mask);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1969","line":"#endif"},
{"lineNum":" 1970","line":"}"},
{"lineNum":" 1971","line":""},
{"lineNum":" 1972","line":"// function sqrt: square root"},
{"lineNum":" 1973","line":"static inline Vec2d sqrt(Vec2d const & a) {"},
{"lineNum":" 1974","line":"    return _mm_sqrt_pd(a);","class":"lineNoCov","hits":"0","possible_hits":"146",},
{"lineNum":" 1975","line":"}"},
{"lineNum":" 1976","line":""},
{"lineNum":" 1977","line":"// function square: a * a"},
{"lineNum":" 1978","line":"static inline Vec2d square(Vec2d const & a) {"},
{"lineNum":" 1979","line":"    return a * a;"},
{"lineNum":" 1980","line":"}"},
{"lineNum":" 1981","line":""},
{"lineNum":" 1982","line":"// pow(Vec2d, int):"},
{"lineNum":" 1983","line":"// The purpose of this template is to prevent implicit conversion of a float"},
{"lineNum":" 1984","line":"// exponent to int when calling pow(vector, float) and vectormath_exp.h is"},
{"lineNum":" 1985","line":"// not included"},
{"lineNum":" 1986","line":""},
{"lineNum":" 1987","line":"template <typename TT> static Vec2d pow(Vec2d const & a, TT const & n);"},
{"lineNum":" 1988","line":""},
{"lineNum":" 1989","line":"// Raise floating point numbers to integer power n"},
{"lineNum":" 1990","line":"template <>"},
{"lineNum":" 1991","line":"inline Vec2d pow<int>(Vec2d const & x0, int const & n) {"},
{"lineNum":" 1992","line":"    return pow_template_i<Vec2d>(x0, n);"},
{"lineNum":" 1993","line":"}"},
{"lineNum":" 1994","line":""},
{"lineNum":" 1995","line":"// allow conversion from unsigned int"},
{"lineNum":" 1996","line":"template <>"},
{"lineNum":" 1997","line":"inline Vec2d pow<uint32_t>(Vec2d const & x0, uint32_t const & n) {"},
{"lineNum":" 1998","line":"    return pow_template_i<Vec2d>(x0, (int)n);"},
{"lineNum":" 1999","line":"}"},
{"lineNum":" 2000","line":""},
{"lineNum":" 2001","line":"// Raise floating point numbers to integer power n, where n is a compile-time constant"},
{"lineNum":" 2002","line":"template <int n>"},
{"lineNum":" 2003","line":"static inline Vec2d pow(Vec2d const & a, Const_int_t<n>) {"},
{"lineNum":" 2004","line":"    return pow_n<Vec2d, n>(a);"},
{"lineNum":" 2005","line":"}"},
{"lineNum":" 2006","line":""},
{"lineNum":" 2007","line":"// function round: round to nearest integer (even). (result as double vector)"},
{"lineNum":" 2008","line":"#if INSTRSET >= 5   // SSE4.1 supported"},
{"lineNum":" 2009","line":"static inline Vec2d round(Vec2d const & a) {"},
{"lineNum":" 2010","line":"    return _mm_round_pd(a, 0+8);"},
{"lineNum":" 2011","line":"}"},
{"lineNum":" 2012","line":"#else"},
{"lineNum":" 2013","line":""},
{"lineNum":" 2014","line":"// avoid unsafe optimization in function round"},
{"lineNum":" 2015","line":"#if defined(__GNUC__) && !defined(__INTEL_COMPILER) && !defined(__clang__) && INSTRSET < 5"},
{"lineNum":" 2016","line":"static inline Vec2d round(Vec2d const & a) __attribute__ ((optimize(\"-fno-unsafe-math-optimizations\")));"},
{"lineNum":" 2017","line":"#elif defined(__clang__) && INSTRSET < 5"},
{"lineNum":" 2018","line":"static inline Vec2d round(Vec2d const & a) __attribute__ ((optnone));"},
{"lineNum":" 2019","line":"#elif defined (FLOAT_CONTROL_PRECISE_FOR_ROUND)"},
{"lineNum":" 2020","line":"#pragma float_control(push)"},
{"lineNum":" 2021","line":"#pragma float_control(precise,on)"},
{"lineNum":" 2022","line":"#endif"},
{"lineNum":" 2023","line":"// function round: round to nearest integer (even). (result as double vector)"},
{"lineNum":" 2024","line":"static inline Vec2d round(Vec2d const & a) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2025","line":"    // Note: assume MXCSR control register is set to rounding"},
{"lineNum":" 2026","line":"    // (don\'t use conversion to int, it will limit the value to +/- 2^31)"},
{"lineNum":" 2027","line":"    Vec2d signmask    = _mm_castsi128_pd(constant4ui<0,0x80000000,0,0x80000000>());  // -0.0","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2028","line":"    Vec2d magic       = _mm_castsi128_pd(constant4ui<0,0x43300000,0,0x43300000>());  // magic number = 2^52","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2029","line":"    Vec2d sign        = _mm_and_pd(a, signmask);                                    // signbit of a","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2030","line":"    Vec2d signedmagic = _mm_or_pd(magic, sign);                                     // magic number with sign of a","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2031","line":"    return a + signedmagic - signedmagic;                                           // round by adding magic number","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2032","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2033","line":"#if defined (FLOAT_CONTROL_PRECISE_FOR_ROUND)"},
{"lineNum":" 2034","line":"#pragma float_control(pop)"},
{"lineNum":" 2035","line":"#endif"},
{"lineNum":" 2036","line":"#endif"},
{"lineNum":" 2037","line":""},
{"lineNum":" 2038","line":"// function truncate: round towards zero. (result as double vector)"},
{"lineNum":" 2039","line":"static inline Vec2d truncate(Vec2d const & a) {"},
{"lineNum":" 2040","line":"#if INSTRSET >= 5   // SSE4.1 supported"},
{"lineNum":" 2041","line":"    return _mm_round_pd(a, 3+8);"},
{"lineNum":" 2042","line":"#else  // SSE2"},
{"lineNum":" 2043","line":"    Vec2d a1 = abs(a);                        // abs"},
{"lineNum":" 2044","line":"    Vec2d y1 = round(a1);                     // round"},
{"lineNum":" 2045","line":"    Vec2d y2 = y1 - (Vec2d(1.0) & (y1 > a1)); // subtract 1 if bigger"},
{"lineNum":" 2046","line":"    Vec2d y3 = y2 | (a & Vec2d(-0.));         // put the sign back in"},
{"lineNum":" 2047","line":"    return y3;"},
{"lineNum":" 2048","line":"#endif"},
{"lineNum":" 2049","line":"}"},
{"lineNum":" 2050","line":""},
{"lineNum":" 2051","line":"// function floor: round towards minus infinity. (result as double vector)"},
{"lineNum":" 2052","line":"static inline Vec2d floor(Vec2d const & a) {"},
{"lineNum":" 2053","line":"#if INSTRSET >= 5   // SSE4.1 supported"},
{"lineNum":" 2054","line":"    return _mm_round_pd(a, 1+8);"},
{"lineNum":" 2055","line":"#else  // SSE2"},
{"lineNum":" 2056","line":"    Vec2d y = round(a);                      // round"},
{"lineNum":" 2057","line":"    y -= Vec2d(1.0) & (y > a);               // subtract 1 if bigger"},
{"lineNum":" 2058","line":"    return y;"},
{"lineNum":" 2059","line":"#endif"},
{"lineNum":" 2060","line":"}"},
{"lineNum":" 2061","line":""},
{"lineNum":" 2062","line":"// function ceil: round towards plus infinity. (result as double vector)"},
{"lineNum":" 2063","line":"static inline Vec2d ceil(Vec2d const & a) {"},
{"lineNum":" 2064","line":"#if INSTRSET >= 5   // SSE4.1 supported"},
{"lineNum":" 2065","line":"    return _mm_round_pd(a, 2+8);"},
{"lineNum":" 2066","line":"#else  // SSE2"},
{"lineNum":" 2067","line":"    Vec2d y = round(a);                      // round"},
{"lineNum":" 2068","line":"    y += Vec2d(1.0) & (y < a);               // add 1 if smaller"},
{"lineNum":" 2069","line":"    return y;"},
{"lineNum":" 2070","line":"#endif"},
{"lineNum":" 2071","line":"}"},
{"lineNum":" 2072","line":""},
{"lineNum":" 2073","line":"// function truncate_to_int32: round towards zero."},
{"lineNum":" 2074","line":"static inline Vec4i truncate_to_int32(Vec2d const & a, Vec2d const & b) {"},
{"lineNum":" 2075","line":"    Vec4i t1 = _mm_cvttpd_epi32(a);"},
{"lineNum":" 2076","line":"    Vec4i t2 = _mm_cvttpd_epi32(b);"},
{"lineNum":" 2077","line":"    return blend4<0,1,4,5> (t1, t2);"},
{"lineNum":" 2078","line":"}"},
{"lineNum":" 2079","line":"static inline Vec4i truncate_to_int(Vec2d const & a, Vec2d const & b) { // deprecated"},
{"lineNum":" 2080","line":"    return truncate_to_int32(a,b);"},
{"lineNum":" 2081","line":"}"},
{"lineNum":" 2082","line":""},
{"lineNum":" 2083","line":"// function truncate_to_int32: round towards zero."},
{"lineNum":" 2084","line":"static inline Vec4i truncate_to_int32(Vec2d const & a) {"},
{"lineNum":" 2085","line":"    return _mm_cvttpd_epi32(a);"},
{"lineNum":" 2086","line":"}"},
{"lineNum":" 2087","line":"static inline Vec4i truncate_to_int(Vec2d const & a) { // deprecated"},
{"lineNum":" 2088","line":"    return truncate_to_int32(a);"},
{"lineNum":" 2089","line":"}"},
{"lineNum":" 2090","line":""},
{"lineNum":" 2091","line":"// function truncatei: round towards zero. (inefficient)"},
{"lineNum":" 2092","line":"static inline Vec2q truncatei(Vec2d const & a) {"},
{"lineNum":" 2093","line":"#if INSTRSET >= 10 // __AVX512DQ__ __AVX512VL__"},
{"lineNum":" 2094","line":"    //return _mm_maskz_cvttpd_epi64( __mmask8(0xFF), a);"},
{"lineNum":" 2095","line":"    return _mm_cvttpd_epi64(a);"},
{"lineNum":" 2096","line":"#else"},
{"lineNum":" 2097","line":"    double aa[2];"},
{"lineNum":" 2098","line":"    a.store(aa);"},
{"lineNum":" 2099","line":"    return Vec2q(int64_t(aa[0]), int64_t(aa[1]));"},
{"lineNum":" 2100","line":"#endif"},
{"lineNum":" 2101","line":"}"},
{"lineNum":" 2102","line":"static inline Vec2q truncate_to_int64(Vec2d const & a) {return truncatei(a);} // deprecated"},
{"lineNum":" 2103","line":""},
{"lineNum":" 2104","line":"// function round_to_int: round to nearest integer (even)."},
{"lineNum":" 2105","line":"// result as 32-bit integer vector"},
{"lineNum":" 2106","line":"static inline Vec4i round_to_int32(Vec2d const & a, Vec2d const & b) {"},
{"lineNum":" 2107","line":"    // Note: assume MXCSR control register is set to rounding"},
{"lineNum":" 2108","line":"    Vec4i t1 = _mm_cvtpd_epi32(a);"},
{"lineNum":" 2109","line":"    Vec4i t2 = _mm_cvtpd_epi32(b);"},
{"lineNum":" 2110","line":"    return blend4<0,1,4,5> (t1, t2);"},
{"lineNum":" 2111","line":"}"},
{"lineNum":" 2112","line":"static inline Vec4i round_to_int(Vec2d const & a, Vec2d const & b) {  // deprecated"},
{"lineNum":" 2113","line":"    return round_to_int32(a,b);"},
{"lineNum":" 2114","line":"}"},
{"lineNum":" 2115","line":"// function round_to_int: round to nearest integer (even)."},
{"lineNum":" 2116","line":"// result as 32-bit integer vector. Upper two values of result are 0"},
{"lineNum":" 2117","line":"static inline Vec4i round_to_int32(Vec2d const & a) {"},
{"lineNum":" 2118","line":"    Vec4i t1 = _mm_cvtpd_epi32(a);"},
{"lineNum":" 2119","line":"    return t1;"},
{"lineNum":" 2120","line":"}"},
{"lineNum":" 2121","line":"static inline Vec4i round_to_int(Vec2d const & a) {return round_to_int32(a);}  // deprecated"},
{"lineNum":" 2122","line":""},
{"lineNum":" 2123","line":"// function round_to_int64: round to nearest or even. (inefficient)"},
{"lineNum":" 2124","line":"static inline Vec2q roundi(Vec2d const & a) {"},
{"lineNum":" 2125","line":"#if INSTRSET >= 10 // __AVX512DQ__ __AVX512VL__"},
{"lineNum":" 2126","line":"    return _mm_cvtpd_epi64(a);"},
{"lineNum":" 2127","line":"#else"},
{"lineNum":" 2128","line":"    return truncatei(round(a));"},
{"lineNum":" 2129","line":"#endif"},
{"lineNum":" 2130","line":"}"},
{"lineNum":" 2131","line":"static inline Vec2q round_to_int64(Vec2d const & a) {return roundi(a);} // deprecated"},
{"lineNum":" 2132","line":""},
{"lineNum":" 2133","line":"// function to_double: convert integer vector elements to double vector (inefficient)"},
{"lineNum":" 2134","line":"static inline Vec2d to_double(Vec2q const & a) {"},
{"lineNum":" 2135","line":"#if INSTRSET >= 10 // __AVX512DQ__ __AVX512VL__"},
{"lineNum":" 2136","line":"    return _mm_maskz_cvtepi64_pd( __mmask8(0xFF), a);"},
{"lineNum":" 2137","line":"#else"},
{"lineNum":" 2138","line":"    int64_t aa[2];"},
{"lineNum":" 2139","line":"    a.store(aa);"},
{"lineNum":" 2140","line":"    return Vec2d(double(aa[0]), double(aa[1]));"},
{"lineNum":" 2141","line":"#endif"},
{"lineNum":" 2142","line":"}"},
{"lineNum":" 2143","line":""},
{"lineNum":" 2144","line":"static inline Vec2d to_double(Vec2uq const & a){"},
{"lineNum":" 2145","line":"#if INSTRSET >= 10 // __AVX512DQ__ __AVX512VL__"},
{"lineNum":" 2146","line":"    return _mm_cvtepu64_pd(a);"},
{"lineNum":" 2147","line":"#else"},
{"lineNum":" 2148","line":"    uint64_t aa[2];      // inefficient"},
{"lineNum":" 2149","line":"    a.store(aa);"},
{"lineNum":" 2150","line":"    return Vec2d(double(aa[0]), double(aa[1]));"},
{"lineNum":" 2151","line":"#endif"},
{"lineNum":" 2152","line":"}"},
{"lineNum":" 2153","line":""},
{"lineNum":" 2154","line":"// function to_double_low: convert integer vector elements [0] and [1] to double vector"},
{"lineNum":" 2155","line":"static inline Vec2d to_double_low(Vec4i const & a) {"},
{"lineNum":" 2156","line":"    return _mm_cvtepi32_pd(a);"},
{"lineNum":" 2157","line":"}"},
{"lineNum":" 2158","line":""},
{"lineNum":" 2159","line":"// function to_double_high: convert integer vector elements [2] and [3] to double vector"},
{"lineNum":" 2160","line":"static inline Vec2d to_double_high(Vec4i const & a) {"},
{"lineNum":" 2161","line":"    return to_double_low(_mm_srli_si128(a,8));"},
{"lineNum":" 2162","line":"}"},
{"lineNum":" 2163","line":""},
{"lineNum":" 2164","line":"// function compress: convert two Vec2d to one Vec4f"},
{"lineNum":" 2165","line":"static inline Vec4f compress (Vec2d const & low, Vec2d const & high) {"},
{"lineNum":" 2166","line":"    Vec4f t1 = _mm_cvtpd_ps(low);"},
{"lineNum":" 2167","line":"    Vec4f t2 = _mm_cvtpd_ps(high);"},
{"lineNum":" 2168","line":"    return blend4<0,1,4,5> (t1, t2);"},
{"lineNum":" 2169","line":"}"},
{"lineNum":" 2170","line":""},
{"lineNum":" 2171","line":"// Function extend_low : convert Vec4f vector elements [0] and [1] to Vec2d"},
{"lineNum":" 2172","line":"static inline Vec2d extend_low (Vec4f const & a) {"},
{"lineNum":" 2173","line":"    return _mm_cvtps_pd(a);"},
{"lineNum":" 2174","line":"}"},
{"lineNum":" 2175","line":""},
{"lineNum":" 2176","line":"// Function extend_high : convert Vec4f vector elements [2] and [3] to Vec2d"},
{"lineNum":" 2177","line":"static inline Vec2d extend_high (Vec4f const & a) {"},
{"lineNum":" 2178","line":"    return _mm_cvtps_pd(_mm_movehl_ps(a,a));"},
{"lineNum":" 2179","line":"}"},
{"lineNum":" 2180","line":""},
{"lineNum":" 2181","line":""},
{"lineNum":" 2182","line":"// Fused multiply and add functions"},
{"lineNum":" 2183","line":""},
{"lineNum":" 2184","line":"// Multiply and add"},
{"lineNum":" 2185","line":"static inline Vec2d mul_add(Vec2d const & a, Vec2d const & b, Vec2d const & c) {"},
{"lineNum":" 2186","line":"#ifdef __FMA__"},
{"lineNum":" 2187","line":"    return _mm_fmadd_pd(a, b, c);"},
{"lineNum":" 2188","line":"#elif defined (__FMA4__)"},
{"lineNum":" 2189","line":"    return _mm_macc_pd(a, b, c);"},
{"lineNum":" 2190","line":"#else"},
{"lineNum":" 2191","line":"    return a * b + c;"},
{"lineNum":" 2192","line":"#endif"},
{"lineNum":" 2193","line":"}"},
{"lineNum":" 2194","line":""},
{"lineNum":" 2195","line":"// Multiply and subtract"},
{"lineNum":" 2196","line":"static inline Vec2d mul_sub(Vec2d const & a, Vec2d const & b, Vec2d const & c) {"},
{"lineNum":" 2197","line":"#ifdef __FMA__"},
{"lineNum":" 2198","line":"    return _mm_fmsub_pd(a, b, c);"},
{"lineNum":" 2199","line":"#elif defined (__FMA4__)"},
{"lineNum":" 2200","line":"    return _mm_msub_pd(a, b, c);"},
{"lineNum":" 2201","line":"#else"},
{"lineNum":" 2202","line":"    return a * b - c;"},
{"lineNum":" 2203","line":"#endif"},
{"lineNum":" 2204","line":"}"},
{"lineNum":" 2205","line":""},
{"lineNum":" 2206","line":"// Multiply and inverse subtract"},
{"lineNum":" 2207","line":"static inline Vec2d nmul_add(Vec2d const & a, Vec2d const & b, Vec2d const & c) {"},
{"lineNum":" 2208","line":"#ifdef __FMA__"},
{"lineNum":" 2209","line":"    return _mm_fnmadd_pd(a, b, c);"},
{"lineNum":" 2210","line":"#elif defined (__FMA4__)"},
{"lineNum":" 2211","line":"    return _mm_nmacc_pd(a, b, c);"},
{"lineNum":" 2212","line":"#else"},
{"lineNum":" 2213","line":"    return c - a * b;"},
{"lineNum":" 2214","line":"#endif"},
{"lineNum":" 2215","line":"}"},
{"lineNum":" 2216","line":""},
{"lineNum":" 2217","line":""},
{"lineNum":" 2218","line":"// Multiply and subtract with extra precision on the intermediate calculations,"},
{"lineNum":" 2219","line":"// even if FMA instructions not supported, using Veltkamp-Dekker split."},
{"lineNum":" 2220","line":"// This is used in mathematical functions. Do not use it in general code"},
{"lineNum":" 2221","line":"// because it is inaccurate in certain cases"},
{"lineNum":" 2222","line":"static inline Vec2d mul_sub_x(Vec2d const & a, Vec2d const & b, Vec2d const & c) {"},
{"lineNum":" 2223","line":"#ifdef __FMA__"},
{"lineNum":" 2224","line":"    return _mm_fmsub_pd(a, b, c);"},
{"lineNum":" 2225","line":"#elif defined (__FMA4__)"},
{"lineNum":" 2226","line":"    return _mm_msub_pd(a, b, c);"},
{"lineNum":" 2227","line":"#else"},
{"lineNum":" 2228","line":"    // calculate a * b - c with extra precision"},
{"lineNum":" 2229","line":"    Vec2q upper_mask = -(1LL << 27);                       // mask to remove lower 27 bits"},
{"lineNum":" 2230","line":"    Vec2d a_high = a & Vec2d(_mm_castsi128_pd(upper_mask));// split into high and low parts"},
{"lineNum":" 2231","line":"    Vec2d b_high = b & Vec2d(_mm_castsi128_pd(upper_mask));"},
{"lineNum":" 2232","line":"    Vec2d a_low  = a - a_high;"},
{"lineNum":" 2233","line":"    Vec2d b_low  = b - b_high;"},
{"lineNum":" 2234","line":"    Vec2d r1 = a_high * b_high;                            // this product is exact"},
{"lineNum":" 2235","line":"    Vec2d r2 = r1 - c;                                     // subtract c from high product"},
{"lineNum":" 2236","line":"    Vec2d r3 = r2 + (a_high * b_low + b_high * a_low) + a_low * b_low; // add rest of product"},
{"lineNum":" 2237","line":"    return r3; // + ((r2 - r1) + c);"},
{"lineNum":" 2238","line":"#endif"},
{"lineNum":" 2239","line":"}"},
{"lineNum":" 2240","line":""},
{"lineNum":" 2241","line":""},
{"lineNum":" 2242","line":"// Math functions using fast bit manipulation"},
{"lineNum":" 2243","line":""},
{"lineNum":" 2244","line":"// Extract the exponent as an integer"},
{"lineNum":" 2245","line":"// exponent(a) = floor(log2(abs(a)));"},
{"lineNum":" 2246","line":"// exponent(1.0) = 0, exponent(0.0) = -1023, exponent(INF) = +1024, exponent(NAN) = +1024"},
{"lineNum":" 2247","line":"static inline Vec2q exponent(Vec2d const & a) {"},
{"lineNum":" 2248","line":"    Vec2uq t1 = _mm_castpd_si128(a);   // reinterpret as 64-bit integer"},
{"lineNum":" 2249","line":"    Vec2uq t2 = t1 << 1;               // shift out sign bit"},
{"lineNum":" 2250","line":"    Vec2uq t3 = t2 >> 53;              // shift down logical to position 0"},
{"lineNum":" 2251","line":"    Vec2q  t4 = Vec2q(t3) - 0x3FF;     // subtract bias from exponent"},
{"lineNum":" 2252","line":"    return t4;"},
{"lineNum":" 2253","line":"}"},
{"lineNum":" 2254","line":""},
{"lineNum":" 2255","line":"// Extract the fraction part of a floating point number"},
{"lineNum":" 2256","line":"// a = 2^exponent(a) * fraction(a), except for a = 0"},
{"lineNum":" 2257","line":"// fraction(1.0) = 1.0, fraction(5.0) = 1.25"},
{"lineNum":" 2258","line":"// NOTE: The name fraction clashes with an ENUM in MAC XCode CarbonCore script.h !"},
{"lineNum":" 2259","line":"static inline Vec2d fraction(Vec2d const & a) {"},
{"lineNum":" 2260","line":"#if INSTRSET >= 10"},
{"lineNum":" 2261","line":"    return _mm_getmant_pd(a, _MM_MANT_NORM_1_2, _MM_MANT_SIGN_zero);"},
{"lineNum":" 2262","line":"#else"},
{"lineNum":" 2263","line":"    Vec2uq t1 = _mm_castpd_si128(a);   // reinterpret as 64-bit integer"},
{"lineNum":" 2264","line":"    Vec2uq t2 = Vec2uq((t1 & 0x000FFFFFFFFFFFFFll) | 0x3FF0000000000000ll); // set exponent to 0 + bias"},
{"lineNum":" 2265","line":"    return _mm_castsi128_pd(t2);"},
{"lineNum":" 2266","line":"#endif"},
{"lineNum":" 2267","line":"}"},
{"lineNum":" 2268","line":""},
{"lineNum":" 2269","line":"// Fast calculation of pow(2,n) with n integer"},
{"lineNum":" 2270","line":"// n  =     0 gives 1.0"},
{"lineNum":" 2271","line":"// n >=  1024 gives +INF"},
{"lineNum":" 2272","line":"// n <= -1023 gives 0.0"},
{"lineNum":" 2273","line":"// This function will never produce denormals, and never raise exceptions"},
{"lineNum":" 2274","line":"static inline Vec2d exp2(Vec2q const & n) {"},
{"lineNum":" 2275","line":"    Vec2q t1 = max(n,  -0x3FF);        // limit to allowed range"},
{"lineNum":" 2276","line":"    Vec2q t2 = min(t1,  0x400);"},
{"lineNum":" 2277","line":"    Vec2q t3 = t2 + 0x3FF;             // add bias"},
{"lineNum":" 2278","line":"    Vec2q t4 = t3 << 52;               // put exponent into position 52"},
{"lineNum":" 2279","line":"    return _mm_castsi128_pd(t4);       // reinterpret as double"},
{"lineNum":" 2280","line":"}"},
{"lineNum":" 2281","line":"//static Vec2d exp2(Vec2d const & x); // defined in vectormath_exp.h"},
{"lineNum":" 2282","line":""},
{"lineNum":" 2283","line":""},
{"lineNum":" 2284","line":"// Categorization functions"},
{"lineNum":" 2285","line":""},
{"lineNum":" 2286","line":"// Function sign_bit: gives true for elements that have the sign bit set"},
{"lineNum":" 2287","line":"// even for -0.0, -INF and -NAN"},
{"lineNum":" 2288","line":"// Note that sign_bit(Vec2d(-0.0)) gives true, while Vec2d(-0.0) < Vec2d(0.0) gives false"},
{"lineNum":" 2289","line":"static inline Vec2db sign_bit(Vec2d const & a) {"},
{"lineNum":" 2290","line":"    Vec2q t1 = _mm_castpd_si128(a);    // reinterpret as 64-bit integer"},
{"lineNum":" 2291","line":"    Vec2q t2 = t1 >> 63;               // extend sign bit"},
{"lineNum":" 2292","line":"    return _mm_castsi128_pd(t2);       // reinterpret as 64-bit Boolean"},
{"lineNum":" 2293","line":"}"},
{"lineNum":" 2294","line":""},
{"lineNum":" 2295","line":"// Function sign_combine: changes the sign of a when b has the sign bit set"},
{"lineNum":" 2296","line":"// same as select(sign_bit(b), -a, a)"},
{"lineNum":" 2297","line":"static inline Vec2d sign_combine(Vec2d const & a, Vec2d const & b) {"},
{"lineNum":" 2298","line":"    Vec2d signmask = _mm_castsi128_pd(constant4ui<0,0x80000000,0,0x80000000>());  // -0.0"},
{"lineNum":" 2299","line":"    return a ^ (b & signmask);"},
{"lineNum":" 2300","line":"}"},
{"lineNum":" 2301","line":""},
{"lineNum":" 2302","line":"// Function is_finite: gives true for elements that are normal, denormal or zero,"},
{"lineNum":" 2303","line":"// false for INF and NAN"},
{"lineNum":" 2304","line":"static inline Vec2db is_finite(Vec2d const & a) {"},
{"lineNum":" 2305","line":"    Vec2q t1 = _mm_castpd_si128(a);    // reinterpret as integer"},
{"lineNum":" 2306","line":"    Vec2q t2 = t1 << 1;                // shift out sign bit"},
{"lineNum":" 2307","line":"    Vec2q t3 = 0xFFE0000000000000ll;   // exponent mask"},
{"lineNum":" 2308","line":"    Vec2qb t4 = Vec2q(t2 & t3) != t3;  // exponent field is not all 1s"},
{"lineNum":" 2309","line":"    return t4;"},
{"lineNum":" 2310","line":"}"},
{"lineNum":" 2311","line":""},
{"lineNum":" 2312","line":"// Function is_inf: gives true for elements that are +INF or -INF"},
{"lineNum":" 2313","line":"// false for finite numbers and NAN"},
{"lineNum":" 2314","line":"static inline Vec2db is_inf(Vec2d const & a) {"},
{"lineNum":" 2315","line":"    Vec2q t1 = _mm_castpd_si128(a);    // reinterpret as integer"},
{"lineNum":" 2316","line":"    Vec2q t2 = t1 << 1;                // shift out sign bit"},
{"lineNum":" 2317","line":"    return t2 == 0xFFE0000000000000ll; // exponent is all 1s, fraction is 0"},
{"lineNum":" 2318","line":"}"},
{"lineNum":" 2319","line":""},
{"lineNum":" 2320","line":"// Function is_nan: gives true for elements that are +NAN or -NAN"},
{"lineNum":" 2321","line":"// false for finite numbers and +/-INF"},
{"lineNum":" 2322","line":"static inline Vec2db is_nan(Vec2d const & a) {"},
{"lineNum":" 2323","line":"    return a != a;"},
{"lineNum":" 2324","line":"}"},
{"lineNum":" 2325","line":""},
{"lineNum":" 2326","line":"// Function is_subnormal: gives true for elements that are subnormal (denormal)"},
{"lineNum":" 2327","line":"// false for finite numbers, zero, NAN and INF"},
{"lineNum":" 2328","line":"static inline Vec2db is_subnormal(Vec2d const & a) {"},
{"lineNum":" 2329","line":"    Vec2q t1 = _mm_castpd_si128(a);    // reinterpret as 32-bit integer"},
{"lineNum":" 2330","line":"    Vec2q t2 = t1 << 1;                // shift out sign bit"},
{"lineNum":" 2331","line":"    Vec2q t3 = 0xFFE0000000000000ll;   // exponent mask"},
{"lineNum":" 2332","line":"    Vec2q t4 = t2 & t3;                // exponent"},
{"lineNum":" 2333","line":"    Vec2q t5 = _mm_andnot_si128(t3,t2);// fraction"},
{"lineNum":" 2334","line":"    return Vec2qb((t4==0) & (t5!=0));  // exponent = 0 and fraction != 0"},
{"lineNum":" 2335","line":"}"},
{"lineNum":" 2336","line":""},
{"lineNum":" 2337","line":"// Function is_zero_or_subnormal: gives true for elements that are zero or subnormal (denormal)"},
{"lineNum":" 2338","line":"// false for finite numbers, NAN and INF"},
{"lineNum":" 2339","line":"static inline Vec2db is_zero_or_subnormal(Vec2d const & a) {"},
{"lineNum":" 2340","line":"    Vec2q t = _mm_castpd_si128(a);     // reinterpret as 32-bit integer"},
{"lineNum":" 2341","line":"          t &= 0x7FF0000000000000ll;   // isolate exponent"},
{"lineNum":" 2342","line":"    return t == 0;                     // exponent = 0"},
{"lineNum":" 2343","line":"}"},
{"lineNum":" 2344","line":""},
{"lineNum":" 2345","line":""},
{"lineNum":" 2346","line":"/*****************************************************************************"},
{"lineNum":" 2347","line":"*"},
{"lineNum":" 2348","line":"*          Functions for reinterpretation between vector types"},
{"lineNum":" 2349","line":"*"},
{"lineNum":" 2350","line":"*****************************************************************************/"},
{"lineNum":" 2351","line":""},
{"lineNum":" 2352","line":"static inline __m128i reinterpret_i (__m128i const & x) {"},
{"lineNum":" 2353","line":"    return x;"},
{"lineNum":" 2354","line":"}"},
{"lineNum":" 2355","line":""},
{"lineNum":" 2356","line":"static inline __m128i reinterpret_i (__m128  const & x) {"},
{"lineNum":" 2357","line":"    return _mm_castps_si128(x);"},
{"lineNum":" 2358","line":"}"},
{"lineNum":" 2359","line":""},
{"lineNum":" 2360","line":"static inline __m128i reinterpret_i (__m128d const & x) {"},
{"lineNum":" 2361","line":"    return _mm_castpd_si128(x);"},
{"lineNum":" 2362","line":"}"},
{"lineNum":" 2363","line":""},
{"lineNum":" 2364","line":"static inline __m128  reinterpret_f (__m128i const & x) {"},
{"lineNum":" 2365","line":"    return _mm_castsi128_ps(x);"},
{"lineNum":" 2366","line":"}"},
{"lineNum":" 2367","line":""},
{"lineNum":" 2368","line":"static inline __m128  reinterpret_f (__m128  const & x) {"},
{"lineNum":" 2369","line":"    return x;"},
{"lineNum":" 2370","line":"}"},
{"lineNum":" 2371","line":""},
{"lineNum":" 2372","line":"static inline __m128  reinterpret_f (__m128d const & x) {"},
{"lineNum":" 2373","line":"    return _mm_castpd_ps(x);"},
{"lineNum":" 2374","line":"}"},
{"lineNum":" 2375","line":""},
{"lineNum":" 2376","line":"static inline __m128d reinterpret_d (__m128i const & x) {"},
{"lineNum":" 2377","line":"    return _mm_castsi128_pd(x);"},
{"lineNum":" 2378","line":"}"},
{"lineNum":" 2379","line":""},
{"lineNum":" 2380","line":"static inline __m128d reinterpret_d (__m128  const & x) {"},
{"lineNum":" 2381","line":"    return _mm_castps_pd(x);"},
{"lineNum":" 2382","line":"}"},
{"lineNum":" 2383","line":""},
{"lineNum":" 2384","line":"static inline __m128d reinterpret_d (__m128d const & x) {"},
{"lineNum":" 2385","line":"    return x;"},
{"lineNum":" 2386","line":"}"},
{"lineNum":" 2387","line":""},
{"lineNum":" 2388","line":"// Function infinite2d: returns a vector where all elements are +INF"},
{"lineNum":" 2389","line":"static inline Vec2d infinite2d() {"},
{"lineNum":" 2390","line":"    return reinterpret_d(Vec2q(0x7FF0000000000000));"},
{"lineNum":" 2391","line":"}"},
{"lineNum":" 2392","line":""},
{"lineNum":" 2393","line":"// Function nan2d: returns a vector where all elements are +NAN (quiet)"},
{"lineNum":" 2394","line":"static inline Vec2d nan2d(int n = 0x10) {"},
{"lineNum":" 2395","line":"    return nan_vec<Vec2d>(n);"},
{"lineNum":" 2396","line":"    //return _mm_castsi128_pd(_mm_setr_epi32(n, 0x7FF80000, n, 0x7FF80000));"},
{"lineNum":" 2397","line":"}"},
{"lineNum":" 2398","line":""},
{"lineNum":" 2399","line":""},
{"lineNum":" 2400","line":"/*****************************************************************************"},
{"lineNum":" 2401","line":"*"},
{"lineNum":" 2402","line":"*          Vector permute and blend functions"},
{"lineNum":" 2403","line":"*"},
{"lineNum":" 2404","line":"******************************************************************************"},
{"lineNum":" 2405","line":"*"},
{"lineNum":" 2406","line":"* The permute function can reorder the elements of a vector and optionally"},
{"lineNum":" 2407","line":"* set some elements to zero."},
{"lineNum":" 2408","line":"*"},
{"lineNum":" 2409","line":"* The indexes are inserted as template parameters in <>. These indexes must be"},
{"lineNum":" 2410","line":"* constants. Each template parameter is an index to the element you want to"},
{"lineNum":" 2411","line":"* select. An index of -1 will generate zero. An index of -256 means don\'t care."},
{"lineNum":" 2412","line":"*"},
{"lineNum":" 2413","line":"* Example:"},
{"lineNum":" 2414","line":"* Vec2d a(10., 11.);              // a is (10, 11)"},
{"lineNum":" 2415","line":"* Vec2d b, c;"},
{"lineNum":" 2416","line":"* b = permute2<1,1>(a);          // b is (11, 11)"},
{"lineNum":" 2417","line":"* c = permute2<-1,0>(a);         // c is ( 0, 10)"},
{"lineNum":" 2418","line":"*"},
{"lineNum":" 2419","line":"*"},
{"lineNum":" 2420","line":"* The blend function can mix elements from two different vectors and"},
{"lineNum":" 2421","line":"* optionally set some elements to zero."},
{"lineNum":" 2422","line":"*"},
{"lineNum":" 2423","line":"* The indexes are inserted as template parameters in <>. These indexes must be"},
{"lineNum":" 2424","line":"* constants. Each template parameter is an index to the element you want to"},
{"lineNum":" 2425","line":"* select, where indexes 0 - 1 indicate an element from the first source"},
{"lineNum":" 2426","line":"* vector and indexes 2 - 3 indicate an element from the second source vector."},
{"lineNum":" 2427","line":"* An index of -1 will generate zero."},
{"lineNum":" 2428","line":"*"},
{"lineNum":" 2429","line":"*"},
{"lineNum":" 2430","line":"* Example:"},
{"lineNum":" 2431","line":"* Vec2d a(10., 11.);              // a is (10, 11)"},
{"lineNum":" 2432","line":"* Vec2d b(20., 21.);              // b is (20, 21)"},
{"lineNum":" 2433","line":"* Vec2d c;"},
{"lineNum":" 2434","line":"* c = blend2<0,3> (a,b);         // c is (10, 21)"},
{"lineNum":" 2435","line":"*"},
{"lineNum":" 2436","line":"* A lot of the code here is metaprogramming aiming to find the instructions"},
{"lineNum":" 2437","line":"* that best fit the template parameters and instruction set. The metacode"},
{"lineNum":" 2438","line":"* will be reduced out to leave only a few vector instructions in release"},
{"lineNum":" 2439","line":"* mode with optimization on."},
{"lineNum":" 2440","line":"*****************************************************************************/"},
{"lineNum":" 2441","line":""},
{"lineNum":" 2442","line":"// permute vector Vec2d"},
{"lineNum":" 2443","line":"template <int i0, int i1>"},
{"lineNum":" 2444","line":"static inline Vec2d permute2(Vec2d const & a) {"},
{"lineNum":" 2445","line":"    // is shuffling needed"},
{"lineNum":" 2446","line":"    const bool do_shuffle = (i0 > 0) || (i1 != 1 && i1 >= 0);"},
{"lineNum":" 2447","line":"    // is zeroing needed"},
{"lineNum":" 2448","line":"    const bool do_zero    = ((i0 | i1) < 0 && (i0 | i1) & 0x80);"},
{"lineNum":" 2449","line":""},
{"lineNum":" 2450","line":"    if (do_zero && !do_shuffle) {                          // zeroing, not shuffling"},
{"lineNum":" 2451","line":"        if ((i0 & i1) < 0) return _mm_setzero_pd();        // zero everything"},
{"lineNum":" 2452","line":"        // zero some elements"},
{"lineNum":" 2453","line":"        __m128i mask1 = constant4i< -int(i0>=0), -int(i0>=0), -int(i1>=0), -int(i1>=0) >();"},
{"lineNum":" 2454","line":"        return  _mm_and_pd(a,_mm_castsi128_pd(mask1));     // zero with AND mask"},
{"lineNum":" 2455","line":"    }"},
{"lineNum":" 2456","line":"    else if (do_shuffle && !do_zero) {                     // shuffling, not zeroing"},
{"lineNum":" 2457","line":"        return _mm_shuffle_pd(a, a, (i0&1) | (i1&1)<<1);"},
{"lineNum":" 2458","line":"    }"},
{"lineNum":" 2459","line":"    else if (do_shuffle && do_zero) {                      // shuffling and zeroing"},
{"lineNum":" 2460","line":"        // both shuffle and zero"},
{"lineNum":" 2461","line":"        if (i0 < 0 && i1 >= 0) {                           // zero low half, shuffle high half"},
{"lineNum":" 2462","line":"            return _mm_shuffle_pd(_mm_setzero_pd(), a, (i1 & 1) << 1);"},
{"lineNum":" 2463","line":"        }"},
{"lineNum":" 2464","line":"        if (i0 >= 0 && i1 < 0) {                           // shuffle low half, zero high half"},
{"lineNum":" 2465","line":"            return _mm_shuffle_pd(a, _mm_setzero_pd(), i0 & 1);"},
{"lineNum":" 2466","line":"        }"},
{"lineNum":" 2467","line":"    }"},
{"lineNum":" 2468","line":"    return a;"},
{"lineNum":" 2469","line":"}"},
{"lineNum":" 2470","line":""},
{"lineNum":" 2471","line":""},
{"lineNum":" 2472","line":"// blend vectors Vec2d"},
{"lineNum":" 2473","line":"template <int i0, int i1>"},
{"lineNum":" 2474","line":"static inline Vec2d blend2(Vec2d const & a, Vec2d const & b) {"},
{"lineNum":" 2475","line":""},
{"lineNum":" 2476","line":"    // Combine all the indexes into a single bitfield, with 8 bits for each"},
{"lineNum":" 2477","line":"    const int m1 = (i0 & 3) | (i1 & 3) << 8;"},
{"lineNum":" 2478","line":""},
{"lineNum":" 2479","line":"    // Mask to zero out negative indexes"},
{"lineNum":" 2480","line":"    const int m2 = (i0 < 0 ? 0 : 0xFF) | (i1 < 0 ? 0 : 0xFF) << 8;"},
{"lineNum":" 2481","line":""},
{"lineNum":" 2482","line":"    if ((m1 & 0x0202 & m2) == 0) {"},
{"lineNum":" 2483","line":"        // all elements from a"},
{"lineNum":" 2484","line":"        return permute2 <i0, i1> (a);"},
{"lineNum":" 2485","line":"    }"},
{"lineNum":" 2486","line":"    if (((m1^0x0202) & 0x0202 & m2) == 0) {"},
{"lineNum":" 2487","line":"        // all elements from b"},
{"lineNum":" 2488","line":"        return permute2 <i0 & ~2, i1 & ~2> (b);"},
{"lineNum":" 2489","line":"    }"},
{"lineNum":" 2490","line":"    // selecting from both a and b without zeroing"},
{"lineNum":" 2491","line":"    if ((i0 & 2) == 0) { // first element from a, second element from b"},
{"lineNum":" 2492","line":"        return _mm_shuffle_pd(a, b, (i0 & 1) | (i1 & 1) << 1);"},
{"lineNum":" 2493","line":"    }"},
{"lineNum":" 2494","line":"    else {         // first element from b, second element from a"},
{"lineNum":" 2495","line":"        return _mm_shuffle_pd(b, a, (i0 & 1) | (i1 & 1) << 1);"},
{"lineNum":" 2496","line":"    }"},
{"lineNum":" 2497","line":"}"},
{"lineNum":" 2498","line":""},
{"lineNum":" 2499","line":"// change signs on vectors Vec4f"},
{"lineNum":" 2500","line":"// Each index i0 - i1 is 1 for changing sign on the corresponding element, 0 for no change"},
{"lineNum":" 2501","line":"template <int i0, int i1>"},
{"lineNum":" 2502","line":"static inline Vec2d change_sign(Vec2d const & a) {"},
{"lineNum":" 2503","line":"    if ((i0 | i1) == 0) return a;"},
{"lineNum":" 2504","line":"    __m128i mask = constant4ui<0, i0 ? 0x80000000 : 0, 0, i1 ? 0x80000000 : 0> ();"},
{"lineNum":" 2505","line":"    return  _mm_xor_pd(a, _mm_castsi128_pd(mask));     // flip sign bits"},
{"lineNum":" 2506","line":"}"},
{"lineNum":" 2507","line":""},
{"lineNum":" 2508","line":"// Support names prior to version 1.40 (now deprecated)"},
{"lineNum":" 2509","line":"#define permute2d  permute2"},
{"lineNum":" 2510","line":"#define permute4f  permute4"},
{"lineNum":" 2511","line":"#define blend2d    blend2"},
{"lineNum":" 2512","line":"#define blend4f    blend4"},
{"lineNum":" 2513","line":""},
{"lineNum":" 2514","line":""},
{"lineNum":" 2515","line":"/*****************************************************************************"},
{"lineNum":" 2516","line":"*"},
{"lineNum":" 2517","line":"*          Vector lookup functions"},
{"lineNum":" 2518","line":"*"},
{"lineNum":" 2519","line":"******************************************************************************"},
{"lineNum":" 2520","line":"*"},
{"lineNum":" 2521","line":"* These functions use vector elements as indexes into a table."},
{"lineNum":" 2522","line":"* The table is given as one or more vectors or as an array."},
{"lineNum":" 2523","line":"*"},
{"lineNum":" 2524","line":"* This can be used for several purposes:"},
{"lineNum":" 2525","line":"*  - table lookup"},
{"lineNum":" 2526","line":"*  - permute or blend with variable indexes"},
{"lineNum":" 2527","line":"*  - blend from more than two sources"},
{"lineNum":" 2528","line":"*  - gather non-contiguous data"},
{"lineNum":" 2529","line":"*"},
{"lineNum":" 2530","line":"* An index out of range may produce any value - the actual value produced is"},
{"lineNum":" 2531","line":"* implementation dependent and may be different for different instruction"},
{"lineNum":" 2532","line":"* sets. An index out of range does not produce an error message or exception."},
{"lineNum":" 2533","line":"*"},
{"lineNum":" 2534","line":"* Example:"},
{"lineNum":" 2535","line":"* Vec4i a(2,0,0,3);               // index  a is (  2,   0,   0,   3)"},
{"lineNum":" 2536","line":"* Vec4f b(1.0f,1.1f,1.2f,1.3f);   // table  b is (1.0, 1.1, 1.2, 1.3)"},
{"lineNum":" 2537","line":"* Vec4f c;"},
{"lineNum":" 2538","line":"* c = lookup4 (a,b);              // result c is (1.2, 1.0, 1.0, 1.3)"},
{"lineNum":" 2539","line":"*"},
{"lineNum":" 2540","line":"*****************************************************************************/"},
{"lineNum":" 2541","line":""},
{"lineNum":" 2542","line":"static inline Vec4f lookup4(Vec4i const & index, Vec4f const & table) {"},
{"lineNum":" 2543","line":"#if INSTRSET >= 7  // AVX"},
{"lineNum":" 2544","line":"    return _mm_permutevar_ps(table, index);"},
{"lineNum":" 2545","line":"#else"},
{"lineNum":" 2546","line":"    int32_t ii[4];"},
{"lineNum":" 2547","line":"    float   tt[6];"},
{"lineNum":" 2548","line":"    table.store(tt);  (index & 3).store(ii);"},
{"lineNum":" 2549","line":"    __m128 r01 = _mm_loadh_pi(_mm_load_ss(&tt[ii[0]]), (const __m64 *)&tt[ii[1]]);"},
{"lineNum":" 2550","line":"    __m128 r23 = _mm_loadh_pi(_mm_load_ss(&tt[ii[2]]), (const __m64 *)&tt[ii[3]]);"},
{"lineNum":" 2551","line":"    return _mm_shuffle_ps(r01, r23, 0x88);"},
{"lineNum":" 2552","line":"#endif"},
{"lineNum":" 2553","line":"}"},
{"lineNum":" 2554","line":""},
{"lineNum":" 2555","line":"static inline Vec4f lookup8(Vec4i const & index, Vec4f const & table0, Vec4f const & table1) {"},
{"lineNum":" 2556","line":"#if INSTRSET >= 8  // AVX2"},
{"lineNum":" 2557","line":"    __m256 tt = _mm256_insertf128_ps(_mm256_castps128_ps256(table0), table1, 1); // combine tables"},
{"lineNum":" 2558","line":""},
{"lineNum":" 2559","line":"#if defined (_MSC_VER) && _MSC_VER < 1700 && ! defined(__INTEL_COMPILER)"},
{"lineNum":" 2560","line":"    // bug in MS VS 11 beta: operands in wrong order"},
{"lineNum":" 2561","line":"    __m128 r = _mm256_castps256_ps128(_mm256_permutevar8x32_ps(_mm256_castsi256_ps(_mm256_castsi128_si256(index)), _mm256_castps_si256(tt)));"},
{"lineNum":" 2562","line":"    r = _mm_and_ps(r,r); // fix another bug in VS 11 beta (would store r as 256 bits aligned by 16)"},
{"lineNum":" 2563","line":"#elif defined (GCC_VERSION) && GCC_VERSION <= 40700 && !defined(__INTEL_COMPILER) && !defined(__clang__)"},
{"lineNum":" 2564","line":"    // Gcc 4.7.0 has wrong parameter type and operands in wrong order"},
{"lineNum":" 2565","line":"    __m128 r = _mm256_castps256_ps128(_mm256_permutevar8x32_ps(_mm256_castsi256_ps(_mm256_castsi128_si256(index)), tt));"},
{"lineNum":" 2566","line":"#else"},
{"lineNum":" 2567","line":"    // no bug version"},
{"lineNum":" 2568","line":"    __m128 r = _mm256_castps256_ps128(_mm256_permutevar8x32_ps(tt, _mm256_castsi128_si256(index)));"},
{"lineNum":" 2569","line":"#endif"},
{"lineNum":" 2570","line":"    return r;"},
{"lineNum":" 2571","line":""},
{"lineNum":" 2572","line":"#elif INSTRSET >= 7  // AVX"},
{"lineNum":" 2573","line":"    __m128  r0 = _mm_permutevar_ps(table0, index);"},
{"lineNum":" 2574","line":"    __m128  r1 = _mm_permutevar_ps(table1, index);"},
{"lineNum":" 2575","line":"    __m128i i4 = _mm_slli_epi32(index, 29);"},
{"lineNum":" 2576","line":"    return _mm_blendv_ps(r0, r1, _mm_castsi128_ps(i4));"},
{"lineNum":" 2577","line":""},
{"lineNum":" 2578","line":"#elif INSTRSET >= 5  // SSE4.1"},
{"lineNum":" 2579","line":"    Vec4f   r0 = lookup4(index, table0);"},
{"lineNum":" 2580","line":"    Vec4f   r1 = lookup4(index, table1);"},
{"lineNum":" 2581","line":"    __m128i i4 = _mm_slli_epi32(index, 29);"},
{"lineNum":" 2582","line":"    return _mm_blendv_ps(r0, r1, _mm_castsi128_ps(i4));"},
{"lineNum":" 2583","line":""},
{"lineNum":" 2584","line":"#else               // SSE2"},
{"lineNum":" 2585","line":"    Vec4f   r0 = lookup4(index, table0);"},
{"lineNum":" 2586","line":"    Vec4f   r1 = lookup4(index, table1);"},
{"lineNum":" 2587","line":"    __m128i i4 = _mm_srai_epi32(_mm_slli_epi32(index, 29), 31);"},
{"lineNum":" 2588","line":"    return selectf(_mm_castsi128_ps(i4), r1, r0);"},
{"lineNum":" 2589","line":"#endif"},
{"lineNum":" 2590","line":"}"},
{"lineNum":" 2591","line":""},
{"lineNum":" 2592","line":"template <int n>"},
{"lineNum":" 2593","line":"static inline Vec4f lookup(Vec4i const & index, float const * table) {"},
{"lineNum":" 2594","line":"    if (n <= 0) return 0.0f;"},
{"lineNum":" 2595","line":"    if (n <= 4) return lookup4(index, Vec4f().load(table));"},
{"lineNum":" 2596","line":"    if (n <= 8) {"},
{"lineNum":" 2597","line":"#if INSTRSET >= 8  // AVX2"},
{"lineNum":" 2598","line":"        __m256 tt = _mm256_loadu_ps(table);"},
{"lineNum":" 2599","line":"#if defined (_MSC_VER) && _MSC_VER < 1700 && ! defined(__INTEL_COMPILER)"},
{"lineNum":" 2600","line":"        // bug in MS VS 11 beta: operands in wrong order"},
{"lineNum":" 2601","line":"        __m128 r = _mm256_castps256_ps128(_mm256_permutevar8x32_ps(_mm256_castsi256_ps(_mm256_castsi128_si256(index)), _mm256_castps_si256(tt)));"},
{"lineNum":" 2602","line":"        r = _mm_and_ps(r,r); // fix another bug in VS 11 beta (would store r as 256 bits aligned by 16)"},
{"lineNum":" 2603","line":"#elif defined (GCC_VERSION) && GCC_VERSION <= 40700 && !defined(__INTEL_COMPILER) && !defined(__clang__)"},
{"lineNum":" 2604","line":"        // Gcc 4.7.0 has wrong parameter type and operands in wrong order"},
{"lineNum":" 2605","line":"        __m128 r = _mm256_castps256_ps128(_mm256_permutevar8x32_ps(_mm256_castsi256_ps(_mm256_castsi128_si256(index)), tt));"},
{"lineNum":" 2606","line":"#else"},
{"lineNum":" 2607","line":"        // no bug version"},
{"lineNum":" 2608","line":"        __m128 r = _mm256_castps256_ps128(_mm256_permutevar8x32_ps(tt, _mm256_castsi128_si256(index)));"},
{"lineNum":" 2609","line":"#endif"},
{"lineNum":" 2610","line":"        return r;"},
{"lineNum":" 2611","line":"#else   // not AVX2"},
{"lineNum":" 2612","line":"        return lookup8(index, Vec4f().load(table), Vec4f().load(table+4));"},
{"lineNum":" 2613","line":"#endif  // INSTRSET"},
{"lineNum":" 2614","line":"    }"},
{"lineNum":" 2615","line":"    // n > 8. Limit index"},
{"lineNum":" 2616","line":"    Vec4ui index1;"},
{"lineNum":" 2617","line":"    if ((n & (n-1)) == 0) {"},
{"lineNum":" 2618","line":"        // n is a power of 2, make index modulo n"},
{"lineNum":" 2619","line":"        index1 = Vec4ui(index) & (n-1);"},
{"lineNum":" 2620","line":"    }"},
{"lineNum":" 2621","line":"    else {"},
{"lineNum":" 2622","line":"        // n is not a power of 2, limit to n-1"},
{"lineNum":" 2623","line":"        index1 = min(Vec4ui(index), n-1);"},
{"lineNum":" 2624","line":"    }"},
{"lineNum":" 2625","line":"#if INSTRSET >= 8  // AVX2"},
{"lineNum":" 2626","line":"    return _mm_i32gather_ps(table, index1, 4);"},
{"lineNum":" 2627","line":"#else"},
{"lineNum":" 2628","line":"    uint32_t ii[4];  index1.store(ii);"},
{"lineNum":" 2629","line":"    return Vec4f(table[ii[0]], table[ii[1]], table[ii[2]], table[ii[3]]);"},
{"lineNum":" 2630","line":"#endif"},
{"lineNum":" 2631","line":"}"},
{"lineNum":" 2632","line":""},
{"lineNum":" 2633","line":"static inline Vec2d lookup2(Vec2q const & index, Vec2d const & table) {"},
{"lineNum":" 2634","line":"#if INSTRSET >= 7  // AVX"},
{"lineNum":" 2635","line":"    return _mm_permutevar_pd(table, index + index);"},
{"lineNum":" 2636","line":"#else"},
{"lineNum":" 2637","line":"    int32_t ii[4];"},
{"lineNum":" 2638","line":"    double  tt[2];"},
{"lineNum":" 2639","line":"    table.store(tt);  (index & 1).store(ii);"},
{"lineNum":" 2640","line":"    return Vec2d(tt[ii[0]], tt[ii[2]]);"},
{"lineNum":" 2641","line":"#endif"},
{"lineNum":" 2642","line":"}"},
{"lineNum":" 2643","line":""},
{"lineNum":" 2644","line":"static inline Vec2d lookup4(Vec2q const & index, Vec2d const & table0, Vec2d const & table1) {"},
{"lineNum":" 2645","line":"#if INSTRSET >= 7  // AVX"},
{"lineNum":" 2646","line":"    Vec2q index2 = index + index;          // index << 1"},
{"lineNum":" 2647","line":"    __m128d r0 = _mm_permutevar_pd(table0, index2);"},
{"lineNum":" 2648","line":"    __m128d r1 = _mm_permutevar_pd(table1, index2);"},
{"lineNum":" 2649","line":"    __m128i i4 = _mm_slli_epi64(index, 62);"},
{"lineNum":" 2650","line":"    return _mm_blendv_pd(r0, r1, _mm_castsi128_pd(i4));"},
{"lineNum":" 2651","line":"#else"},
{"lineNum":" 2652","line":"    int32_t ii[4];"},
{"lineNum":" 2653","line":"    double  tt[4];"},
{"lineNum":" 2654","line":"    table0.store(tt);  table1.store(tt + 2);"},
{"lineNum":" 2655","line":"    (index & 3).store(ii);"},
{"lineNum":" 2656","line":"    return Vec2d(tt[ii[0]], tt[ii[2]]);"},
{"lineNum":" 2657","line":"#endif"},
{"lineNum":" 2658","line":"}"},
{"lineNum":" 2659","line":""},
{"lineNum":" 2660","line":"template <int n>"},
{"lineNum":" 2661","line":"static inline Vec2d lookup(Vec2q const & index, double const * table) {"},
{"lineNum":" 2662","line":"    if (n <= 0) return 0.0;"},
{"lineNum":" 2663","line":"    if (n <= 2) return lookup2(index, Vec2d().load(table));"},
{"lineNum":" 2664","line":"#if INSTRSET < 8  // not AVX2"},
{"lineNum":" 2665","line":"    if (n <= 4) return lookup4(index, Vec2d().load(table), Vec2d().load(table + 2));"},
{"lineNum":" 2666","line":"#endif"},
{"lineNum":" 2667","line":"    // Limit index"},
{"lineNum":" 2668","line":"    Vec2uq index1;"},
{"lineNum":" 2669","line":"    if ((n & (n-1)) == 0) {"},
{"lineNum":" 2670","line":"        // n is a power of 2, make index modulo n"},
{"lineNum":" 2671","line":"        index1 = Vec2uq(index) & (n-1);"},
{"lineNum":" 2672","line":"    }"},
{"lineNum":" 2673","line":"    else {"},
{"lineNum":" 2674","line":"        // n is not a power of 2, limit to n-1"},
{"lineNum":" 2675","line":"        index1 = min(Vec2uq(index), n-1);"},
{"lineNum":" 2676","line":"    }"},
{"lineNum":" 2677","line":"#if INSTRSET >= 8  // AVX2"},
{"lineNum":" 2678","line":"    return _mm_i64gather_pd(table, index1, 8);"},
{"lineNum":" 2679","line":"#else"},
{"lineNum":" 2680","line":"    uint32_t ii[4];  index1.store(ii);"},
{"lineNum":" 2681","line":"    return Vec2d(table[ii[0]], table[ii[2]]);"},
{"lineNum":" 2682","line":"#endif"},
{"lineNum":" 2683","line":"}"},
{"lineNum":" 2684","line":""},
{"lineNum":" 2685","line":""},
{"lineNum":" 2686","line":"/*****************************************************************************"},
{"lineNum":" 2687","line":"*"},
{"lineNum":" 2688","line":"*          Gather functions with fixed indexes"},
{"lineNum":" 2689","line":"*"},
{"lineNum":" 2690","line":"*****************************************************************************/"},
{"lineNum":" 2691","line":"// Load elements from array a with indices i0, i1, i2, i3"},
{"lineNum":" 2692","line":"template <int i0, int i1, int i2, int i3>"},
{"lineNum":" 2693","line":"static inline Vec4f gather4f(void const * a) {"},
{"lineNum":" 2694","line":"    return reinterpret_f(gather4i<i0, i1, i2, i3>(a));"},
{"lineNum":" 2695","line":"}"},
{"lineNum":" 2696","line":""},
{"lineNum":" 2697","line":"// Load elements from array a with indices i0, i1"},
{"lineNum":" 2698","line":"template <int i0, int i1>"},
{"lineNum":" 2699","line":"static inline Vec2d gather2d(void const * a) {"},
{"lineNum":" 2700","line":"    return reinterpret_d(gather2q<i0, i1>(a));"},
{"lineNum":" 2701","line":"}"},
{"lineNum":" 2702","line":""},
{"lineNum":" 2703","line":"/*****************************************************************************"},
{"lineNum":" 2704","line":"*"},
{"lineNum":" 2705","line":"*          Vector scatter functions"},
{"lineNum":" 2706","line":"*"},
{"lineNum":" 2707","line":"******************************************************************************"},
{"lineNum":" 2708","line":"*"},
{"lineNum":" 2709","line":"* These functions write the elements of a vector to arbitrary positions in an"},
{"lineNum":" 2710","line":"* array in memory. Each vector element is written to an array position"},
{"lineNum":" 2711","line":"* determined by an index. An element is not written if the corresponding"},
{"lineNum":" 2712","line":"* index is out of range."},
{"lineNum":" 2713","line":"* The indexes can be specified as constant template parameters or as an"},
{"lineNum":" 2714","line":"* integer vector."},
{"lineNum":" 2715","line":"*"},
{"lineNum":" 2716","line":"* The scatter functions are useful if the data are distributed in a sparce"},
{"lineNum":" 2717","line":"* manner into the array. If the array is dense then it is more efficient"},
{"lineNum":" 2718","line":"* to permute the data into the right positions and then write the whole"},
{"lineNum":" 2719","line":"* permuted vector into the array."},
{"lineNum":" 2720","line":"*"},
{"lineNum":" 2721","line":"* Example:"},
{"lineNum":" 2722","line":"* Vec8d a(10,11,12,13,14,15,16,17);"},
{"lineNum":" 2723","line":"* double b[16] = {0};"},
{"lineNum":" 2724","line":"* scatter<0,2,14,10,1,-1,5,9>(a,b);"},
{"lineNum":" 2725","line":"* // Now, b = {10,14,11,0,0,16,0,0,0,17,13,0,0,0,12,0}"},
{"lineNum":" 2726","line":"*"},
{"lineNum":" 2727","line":"*****************************************************************************/"},
{"lineNum":" 2728","line":""},
{"lineNum":" 2729","line":"template <int i0, int i1, int i2, int i3>"},
{"lineNum":" 2730","line":"static inline void scatter(Vec4f const & data, float * destination) {"},
{"lineNum":" 2731","line":"#if INSTRSET >= 10 //  __AVX512VL__"},
{"lineNum":" 2732","line":"    __m128i indx = constant4i<i0,i1,i2,i3>();"},
{"lineNum":" 2733","line":"    __mmask8 mask = uint8_t((i0>=0) | ((i1>=0)<<1) | ((i2>=0)<<2) | ((i3>=0)<<3));"},
{"lineNum":" 2734","line":"    _mm_mask_i32scatter_ps(destination, mask, indx, data, 4);"},
{"lineNum":" 2735","line":""},
{"lineNum":" 2736","line":"#elif INSTRSET >= 9  //  __AVX512F__"},
{"lineNum":" 2737","line":"    __m512i indx = _mm512_castsi128_si512(constant4i<i0,i1,i2,i3>());"},
{"lineNum":" 2738","line":"    __mmask16 mask = uint16_t((i0>=0) | ((i1>=0)<<1) | ((i2>=0)<<2) | ((i3>=0)<<3));"},
{"lineNum":" 2739","line":"    _mm512_mask_i32scatter_ps(destination, mask, indx, _mm512_castps128_ps512(data), 4);"},
{"lineNum":" 2740","line":""},
{"lineNum":" 2741","line":"#else"},
{"lineNum":" 2742","line":"    const int index[4] = {i0,i1,i2,i3};"},
{"lineNum":" 2743","line":"    for (int i = 0; i < 4; i++) {"},
{"lineNum":" 2744","line":"        if (index[i] >= 0) destination[index[i]] = data[i];"},
{"lineNum":" 2745","line":"    }"},
{"lineNum":" 2746","line":"#endif"},
{"lineNum":" 2747","line":"}"},
{"lineNum":" 2748","line":""},
{"lineNum":" 2749","line":"template <int i0, int i1>"},
{"lineNum":" 2750","line":"static inline void scatter(Vec2d const & data, double * destination) {"},
{"lineNum":" 2751","line":"    if (i0 >= 0) destination[i0] = data[0];"},
{"lineNum":" 2752","line":"    if (i1 >= 0) destination[i1] = data[1];"},
{"lineNum":" 2753","line":"}"},
{"lineNum":" 2754","line":""},
{"lineNum":" 2755","line":""},
{"lineNum":" 2756","line":"/*****************************************************************************"},
{"lineNum":" 2757","line":"*"},
{"lineNum":" 2758","line":"*          Scatter functions with variable indexes"},
{"lineNum":" 2759","line":"*"},
{"lineNum":" 2760","line":"*****************************************************************************/"},
{"lineNum":" 2761","line":""},
{"lineNum":" 2762","line":"static inline void scatter(Vec4i const & index, uint32_t limit, Vec4f const & data, float * destination) {"},
{"lineNum":" 2763","line":"#if INSTRSET >= 10 //  __AVX512VL__"},
{"lineNum":" 2764","line":"    __mmask8 mask = _mm_cmplt_epu32_mask(index, Vec4ui(limit));"},
{"lineNum":" 2765","line":"    _mm_mask_i32scatter_ps(destination, mask, index, data, 4);"},
{"lineNum":" 2766","line":"#else"},
{"lineNum":" 2767","line":"    for (int i = 0; i < 4; i++) {"},
{"lineNum":" 2768","line":"        if (uint32_t(index[i]) < limit) destination[index[i]] = data[i];"},
{"lineNum":" 2769","line":"    }"},
{"lineNum":" 2770","line":"#endif"},
{"lineNum":" 2771","line":"}"},
{"lineNum":" 2772","line":""},
{"lineNum":" 2773","line":"static inline void scatter(Vec2q const & index, uint32_t limit, Vec2d const & data, double * destination) {"},
{"lineNum":" 2774","line":"    if (uint64_t(index[0]) < uint64_t(limit)) destination[index[0]] = data[0];"},
{"lineNum":" 2775","line":"    if (uint64_t(index[1]) < uint64_t(limit)) destination[index[1]] = data[1];"},
{"lineNum":" 2776","line":"}"},
{"lineNum":" 2777","line":""},
{"lineNum":" 2778","line":""},
{"lineNum":" 2779","line":"/*****************************************************************************"},
{"lineNum":" 2780","line":"*"},
{"lineNum":" 2781","line":"*          Horizontal scan functions"},
{"lineNum":" 2782","line":"*"},
{"lineNum":" 2783","line":"*****************************************************************************/"},
{"lineNum":" 2784","line":""},
{"lineNum":" 2785","line":"// Get index to the first element that is true. Return -1 if all are false"},
{"lineNum":" 2786","line":"static inline int horizontal_find_first(Vec4fb const & x) {"},
{"lineNum":" 2787","line":"    return horizontal_find_first(Vec4ib(x));"},
{"lineNum":" 2788","line":"}"},
{"lineNum":" 2789","line":""},
{"lineNum":" 2790","line":"static inline int horizontal_find_first(Vec2db const & x) {"},
{"lineNum":" 2791","line":"    return horizontal_find_first(Vec2qb(x));"},
{"lineNum":" 2792","line":"}"},
{"lineNum":" 2793","line":""},
{"lineNum":" 2794","line":"// Count the number of elements that are true"},
{"lineNum":" 2795","line":"static inline uint32_t horizontal_count(Vec4fb const & x) {"},
{"lineNum":" 2796","line":"    return horizontal_count(Vec4ib(x));"},
{"lineNum":" 2797","line":"}"},
{"lineNum":" 2798","line":""},
{"lineNum":" 2799","line":"static inline uint32_t horizontal_count(Vec2db const & x) {"},
{"lineNum":" 2800","line":"    return horizontal_count(Vec2qb(x));"},
{"lineNum":" 2801","line":"}"},
{"lineNum":" 2802","line":""},
{"lineNum":" 2803","line":"/*****************************************************************************"},
{"lineNum":" 2804","line":"*"},
{"lineNum":" 2805","line":"*          Boolean <-> bitfield conversion functions"},
{"lineNum":" 2806","line":"*"},
{"lineNum":" 2807","line":"*****************************************************************************/"},
{"lineNum":" 2808","line":""},
{"lineNum":" 2809","line":"// to_bits: convert boolean vector to integer bitfield"},
{"lineNum":" 2810","line":"static inline uint8_t to_bits(Vec4fb const & x) {"},
{"lineNum":" 2811","line":"    return to_bits(Vec4ib(x));"},
{"lineNum":" 2812","line":"}"},
{"lineNum":" 2813","line":""},
{"lineNum":" 2814","line":"// to_Vec4fb: convert integer bitfield to boolean vector"},
{"lineNum":" 2815","line":"// DEPRECATED. REPLACED BY load_bits"},
{"lineNum":" 2816","line":"static inline Vec4fb to_Vec4fb(uint8_t x) {"},
{"lineNum":" 2817","line":"    return Vec4fb().load_bits(x);"},
{"lineNum":" 2818","line":"}"},
{"lineNum":" 2819","line":""},
{"lineNum":" 2820","line":"// to_bits: convert boolean vector to integer bitfield"},
{"lineNum":" 2821","line":"static inline uint8_t to_bits(Vec2db const & x) {"},
{"lineNum":" 2822","line":"    return to_bits(Vec2qb(x));"},
{"lineNum":" 2823","line":"}"},
{"lineNum":" 2824","line":""},
{"lineNum":" 2825","line":"// to_Vec2db: convert integer bitfield to boolean vector"},
{"lineNum":" 2826","line":"// DEPRECATED. REPLACED BY load_bits"},
{"lineNum":" 2827","line":"static inline Vec2db to_Vec2db(uint8_t x) {"},
{"lineNum":" 2828","line":"    return Vec2db().load_bits(x);"},
{"lineNum":" 2829","line":"}"},
{"lineNum":" 2830","line":""},
{"lineNum":" 2831","line":"#ifdef VCL_NAMESPACE"},
{"lineNum":" 2832","line":"}"},
{"lineNum":" 2833","line":"#endif"},
{"lineNum":" 2834","line":""},
{"lineNum":" 2835","line":"#endif // VECTORF128_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 32, "covered" : 0,};
var merged_data = [];
