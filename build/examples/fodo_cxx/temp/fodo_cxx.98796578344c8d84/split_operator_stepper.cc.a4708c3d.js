var data = {lines:[
{"lineNum":"    1","line":"#include \"split_operator_stepper.h\""},
{"lineNum":"    2","line":"#include \"synergia/utils/string_utils.h\""},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"namespace"},
{"lineNum":"    5","line":"{"},
{"lineNum":"    6","line":"    const std::string force_diag_attr = \"force_diagnostics\";"},
{"lineNum":"    7","line":"    const double fixed_step_tolerance = 1.0e-8;"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"    // Return an Independent_operator for a half step, starting at the"},
{"lineNum":"   10","line":"    // lattice_element given by lattice_it at position left. Both lattice_it"},
{"lineNum":"   11","line":"    // and left are updated by the function."},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"    template <typename ITER>"},
{"lineNum":"   14","line":"    std::vector<Lattice_element_slice> get_fixed_step_slices("},
{"lineNum":"   15","line":"            ITER & it, ITER const& end,"},
{"lineNum":"   16","line":"            double & left, double step_length, double & offset_fudge,"},
{"lineNum":"   17","line":"            bool end_on_force_diagnostics )"},
{"lineNum":"   18","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   19","line":"        std::vector<Lattice_element_slice> slices;"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"        double length = offset_fudge;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   22","line":"        bool complete = false;"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"        while (!complete)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   25","line":"        {"},
{"lineNum":"   26","line":"            double right = it->get_length();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"            if (length + (right - left) - fixed_step_tolerance <= step_length)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   29","line":"            {"},
{"lineNum":"   30","line":"                // The rest of the element fits in the half step"},
{"lineNum":"   31","line":"                Lattice_element_slice slice(*it, left, right);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   32","line":"                slices.push_back(slice);"},
{"lineNum":"   33","line":"                length += (right - left);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"                if (end_on_force_diagnostics","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   36","line":"                        && slice.has_right_edge()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   37","line":"                        && it->has_string_attribute(force_diag_attr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   38","line":"                        && !false_string(it->get_string_attribute(force_diag_attr)) )","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   39","line":"                {"},
{"lineNum":"   40","line":"                    complete = true;"},
{"lineNum":"   41","line":"                }"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"                ++it;"},
{"lineNum":"   44","line":"                left = 0.0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"                if (std::abs(length - step_length) < fixed_step_tolerance)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   47","line":"                {"},
{"lineNum":"   48","line":"                    if ((it == end) || (it->get_length() != 0.0))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   49","line":"                        complete = true;"},
{"lineNum":"   50","line":"                }"},
{"lineNum":"   51","line":"                else"},
{"lineNum":"   52","line":"                {"},
{"lineNum":"   53","line":"                    if (it == end)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   54","line":"                        throw std::runtime_error(\"get_step stepped beyond end of lattice\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   55","line":"                }"},
{"lineNum":"   56","line":"            }"},
{"lineNum":"   57","line":"            else"},
{"lineNum":"   58","line":"            {"},
{"lineNum":"   59","line":"                // Need to take a portion of the element..."},
{"lineNum":"   60","line":"                bool end_within_error = false;"},
{"lineNum":"   61","line":"                double old_right = right;"},
{"lineNum":"   62","line":"                right = step_length - length + left;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"                if (std::abs(old_right - right) < fixed_step_tolerance)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   65","line":"                {"},
{"lineNum":"   66","line":"                    // ... unless we are within an accumulated tolerance of the end"},
{"lineNum":"   67","line":"                    right = old_right;"},
{"lineNum":"   68","line":"                    end_within_error = true;"},
{"lineNum":"   69","line":"                }"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"                Lattice_element_slice slice(*it, left, right);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   72","line":"                slices.push_back(slice);"},
{"lineNum":"   73","line":"                length += (right - left);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"                if (end_within_error)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   76","line":"                {"},
{"lineNum":"   77","line":"                    ++it;"},
{"lineNum":"   78","line":"                    left = 0.0;"},
{"lineNum":"   79","line":"                }"},
{"lineNum":"   80","line":"                else"},
{"lineNum":"   81","line":"                {"},
{"lineNum":"   82","line":"                    left = right;"},
{"lineNum":"   83","line":"                }"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"                complete = true;"},
{"lineNum":"   86","line":"            }"},
{"lineNum":"   87","line":"        }"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"        offset_fudge = length - step_length;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   90","line":"        return slices;"},
{"lineNum":"   91","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"    template <typename ITER>"},
{"lineNum":"   94","line":"    void"},
{"lineNum":"   95","line":"    create_substep( std::vector<Step>& steps,"},
{"lineNum":"   96","line":"            std::vector<std::shared_ptr<Operator>> const& col_op_ptrs,"},
{"lineNum":"   97","line":"            ITER& it, ITER const& end,"},
{"lineNum":"   98","line":"            double left, double length, double& offset_fudge)"},
{"lineNum":"   99","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  100","line":"        // create the substep"},
{"lineNum":"  101","line":"        steps.emplace_back(length);"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"        if (length == 0.0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  104","line":"        {"},
{"lineNum":"  105","line":"            auto slices = get_fixed_step_slices(it, end,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  106","line":"                    left, 0.0, offset_fudge, true);"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"            auto & op = steps.back().append_independent(\"zero_length\", 1.0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  109","line":"            for (auto const& s : slices) op.append_slice(s);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  110","line":"        }"},
{"lineNum":"  111","line":"        else"},
{"lineNum":"  112","line":"        {"},
{"lineNum":"  113","line":"            double half_length = 0.5 * length;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"            // slices for first half substep"},
{"lineNum":"  116","line":"            auto fst_half_slices = get_fixed_step_slices(it, end,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  117","line":"                    left, half_length, offset_fudge, false);"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"            // slices for second half substep"},
{"lineNum":"  120","line":"            auto snd_half_slices = get_fixed_step_slices(it, end,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  121","line":"                    left, half_length, offset_fudge, false);"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"            auto& op1 = steps.back().append_independent(\"first_half\", 0.5);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  124","line":"            for(auto const& s : fst_half_slices) op1.append_slice(s);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"            // collective"},
{"lineNum":"  127","line":"            for(auto col_op_ptr : col_op_ptrs)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  128","line":"                steps.back().append(col_op_ptr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"            // 2nd half"},
{"lineNum":"  131","line":"            auto& op2 = steps.back().append_independent(\"second_half\", 0.5);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  132","line":"            for(auto const& s : snd_half_slices) op2.append_slice(s);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  133","line":"        }"},
{"lineNum":"  134","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  135","line":"}"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"std::vector<Step>"},
{"lineNum":"  139","line":"Split_operator_stepper::apply_impl(Lattice const & lattice) const"},
{"lineNum":"  140","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  141","line":"    std::vector<Step> steps;"},
{"lineNum":"  142","line":"    std::vector<std::shared_ptr<Operator>> col_op_ptrs;"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"    for(auto const& co_op : co_ops)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  145","line":"        col_op_ptrs.emplace_back(co_op->create_operator());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"    double step_length = lattice.get_length() / num_steps;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  148","line":"    double half_step_length = 0.5 * step_length;"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"    auto lattice_it  = lattice.get_elements().begin();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  151","line":"    auto lattice_end = lattice.get_elements().end();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"    // empty lattice"},
{"lineNum":"  154","line":"    if (lattice_it == lattice_end) return steps;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"    double left = 0.0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  157","line":"    double offset_fudge = 0.0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"    for (int i = 0; i < num_steps; ++i)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  160","line":"    {"},
{"lineNum":"  161","line":"        auto substep_lattice_it = lattice_it;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"        double substep_left = left;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  164","line":"        double substep_offset_fudge = offset_fudge;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"        // slices for first half step"},
{"lineNum":"  167","line":"        auto fst_half_slices = get_fixed_step_slices(lattice_it, lattice_end,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  168","line":"                left, half_step_length, offset_fudge, false);"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"        // slices for second half step"},
{"lineNum":"  171","line":"        auto snd_half_slices = get_fixed_step_slices(lattice_it, lattice_end,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  172","line":"                left, half_step_length, offset_fudge, false);"},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"        // merge first half slices and second half slices"},
{"lineNum":"  175","line":"        std::vector<Lattice_element_slice> all_slices;"},
{"lineNum":"  176","line":"        all_slices.reserve(fst_half_slices.size() + snd_half_slices.size());"},
{"lineNum":"  177","line":"        all_slices.insert(all_slices.end(), fst_half_slices.begin(), fst_half_slices.end());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  178","line":"        all_slices.insert(all_slices.end(), snd_half_slices.begin(), snd_half_slices.end());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"        double substep_length = 0.0;"},
{"lineNum":"  181","line":"        double all_substeps_length = 0.0;"},
{"lineNum":"  182","line":"        bool   found_force = false;"},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"        // skip the last slice"},
{"lineNum":"  185","line":"        for(int it = 0; it < all_slices.size()-1; ++it)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  186","line":"        {"},
{"lineNum":"  187","line":"            auto const& s = all_slices[it];"},
{"lineNum":"  188","line":"            auto const& ele = s.get_lattice_element();"},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"            substep_length += s.get_right() - s.get_left();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"            // force diagnostics?"},
{"lineNum":"  193","line":"            if (s.has_right_edge()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  194","line":"                    && ele.has_string_attribute(force_diag_attr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  195","line":"                    && !false_string(ele.get_string_attribute(force_diag_attr)) )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  196","line":"            {"},
{"lineNum":"  197","line":"                found_force = true;"},
{"lineNum":"  198","line":"                all_substeps_length += substep_length;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"                // create the substep"},
{"lineNum":"  201","line":"                create_substep(steps, col_op_ptrs,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  202","line":"                        substep_lattice_it, lattice_end,"},
{"lineNum":"  203","line":"                        substep_left, substep_length, substep_offset_fudge);"},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"                // reset length"},
{"lineNum":"  206","line":"                substep_length = 0.0;"},
{"lineNum":"  207","line":"            }"},
{"lineNum":"  208","line":"        }"},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"        if (found_force)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  211","line":"        {"},
{"lineNum":"  212","line":"            double remain_length = step_length - all_substeps_length;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  213","line":"            if (remain_length <= fixed_step_tolerance) remain_length = 0.0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"            // create the substep"},
{"lineNum":"  216","line":"            create_substep(steps, col_op_ptrs,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  217","line":"                    substep_lattice_it, lattice_end,"},
{"lineNum":"  218","line":"                    substep_left, remain_length, substep_offset_fudge);"},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"            if (substep_lattice_it != lattice_it)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  221","line":"                throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  222","line":"                        \"internal error: Split_operator_stepper \""},
{"lineNum":"  223","line":"                        \"created an inconsistent force_diagnostics step\");"},
{"lineNum":"  224","line":"        }"},
{"lineNum":"  225","line":"        else"},
{"lineNum":"  226","line":"        {"},
{"lineNum":"  227","line":"            // new step"},
{"lineNum":"  228","line":"            steps.emplace_back(step_length);"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"            // 1st half"},
{"lineNum":"  231","line":"            auto & op1 = steps.back().append_independent(\"first_half\", 0.5);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  232","line":"            for(auto const& s : fst_half_slices) op1.append_slice(s);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"            // collective"},
{"lineNum":"  235","line":"            for(auto col_op_ptr : col_op_ptrs)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  236","line":"                steps.back().append(col_op_ptr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"            // 2nd half"},
{"lineNum":"  239","line":"            auto & op2 = steps.back().append_independent(\"second_half\", 0.5);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  240","line":"            for(auto const& s : snd_half_slices) op2.append_slice(s);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  241","line":"        }"},
{"lineNum":"  242","line":"    }"},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"    if (lattice_it != lattice_end)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  245","line":"    {"},
{"lineNum":"  246","line":"        throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  247","line":"                \"internal error: split_operator_stepper \""},
{"lineNum":"  248","line":"                \"did not make it to the end of the lattice\\n\");"},
{"lineNum":"  249","line":"    }"},
{"lineNum":"  250","line":""},
{"lineNum":"  251","line":"    return steps;"},
{"lineNum":"  252","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"#if 0"},
{"lineNum":"  257","line":"void"},
{"lineNum":"  258","line":"Split_operator_stepper::construct("},
{"lineNum":"  259","line":"        Collective_operators const& collective_operators, int num_steps)"},
{"lineNum":"  260","line":"{"},
{"lineNum":"  261","line":"    double step_length ="},
{"lineNum":"  262","line":"            get_lattice_simulator().get_lattice_sptr()->get_length()"},
{"lineNum":"  263","line":"                    / num_steps;"},
{"lineNum":"  264","line":"    double half_step_length = 0.5 * step_length;"},
{"lineNum":"  265","line":"    Lattice_elements::iterator lattice_it ="},
{"lineNum":"  266","line":"            get_lattice_simulator().get_lattice_sptr()->get_elements().begin();"},
{"lineNum":"  267","line":"    Lattice_elements::iterator lattice_end ="},
{"lineNum":"  268","line":"            get_lattice_simulator().get_lattice_sptr()->get_elements().end();"},
{"lineNum":"  269","line":"    double left = 0.0;"},
{"lineNum":"  270","line":"    double offset_fudge = 0.0;"},
{"lineNum":"  271","line":"    for (int i = 0; i < num_steps; ++i) {"},
{"lineNum":"  272","line":"        Lattice_elements::iterator substep_lattice_it = lattice_it;"},
{"lineNum":"  273","line":"        double substep_left = left;"},
{"lineNum":"  274","line":"        double substep_offset_fudge = offset_fudge;"},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"        Independent_operator_sptr first_half_op_sptr("},
{"lineNum":"  277","line":"                Stepper::get_fixed_step(\"first_half\", lattice_it, left,"},
{"lineNum":"  278","line":"                        lattice_end, half_step_length, offset_fudge, false));"},
{"lineNum":"  279","line":"        Independent_operator_sptr second_half_op_sptr("},
{"lineNum":"  280","line":"                Stepper::get_fixed_step(\"second_half\", lattice_it, left,"},
{"lineNum":"  281","line":"                        lattice_end, half_step_length, offset_fudge, false));"},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"        double substep_length = 0.0;"},
{"lineNum":"  284","line":"        double all_substeps_length = 0.0;"},
{"lineNum":"  285","line":"        bool found_force = false;"},
{"lineNum":"  286","line":"        Lattice_element_slices all_slices(first_half_op_sptr->get_slices());"},
{"lineNum":"  287","line":"        Lattice_element_slices tmp_copy(second_half_op_sptr->get_slices());"},
{"lineNum":"  288","line":"        all_slices.splice(all_slices.end(), tmp_copy);"},
{"lineNum":"  289","line":"        for (Lattice_element_slices::const_iterator it = all_slices.begin();"},
{"lineNum":"  290","line":"                it != all_slices.end(); ++it) {"},
{"lineNum":"  291","line":"            substep_length += (*it)->get_right() - (*it)->get_left();"},
{"lineNum":"  292","line":"            // jfa: I don\'t know of a simpler way to skip the last element of a"},
{"lineNum":"  293","line":"            //      container"},
{"lineNum":"  294","line":"            Lattice_element_slices::const_iterator tmp_it(it);"},
{"lineNum":"  295","line":"            ++tmp_it;"},
{"lineNum":"  296","line":"            if (tmp_it != all_slices.end()) {"},
{"lineNum":"  297","line":"                if ((*it)->has_right_edge()"},
{"lineNum":"  298","line":"                        && (*it)->get_lattice_element().has_string_attribute("},
{"lineNum":"  299","line":"                                Stepper::force_diagnostics_attribute)) {"},
{"lineNum":"  300","line":"                    if (!false_string("},
{"lineNum":"  301","line":"                            (*it)->get_lattice_element().get_string_attribute("},
{"lineNum":"  302","line":"                                    Stepper::force_diagnostics_attribute))) {"},
{"lineNum":"  303","line":"                        found_force = true;"},
{"lineNum":"  304","line":"                        all_substeps_length += substep_length;"},
{"lineNum":"  305","line":"                        Step_sptr substep_sptr(new Step(substep_length));"},
{"lineNum":"  306","line":"                        if (substep_length == 0.0) {"},
{"lineNum":"  307","line":"                            Independent_operator_sptr zero_len_op_sptr("},
{"lineNum":"  308","line":"                                    Stepper::get_fixed_step(\"zero_length\","},
{"lineNum":"  309","line":"                                            substep_lattice_it, substep_left,"},
{"lineNum":"  310","line":"                                            lattice_end, 0.0,"},
{"lineNum":"  311","line":"                                            substep_offset_fudge, true));"},
{"lineNum":"  312","line":"                            substep_sptr->append(zero_len_op_sptr, 1.0);"},
{"lineNum":"  313","line":"                        } else {"},
{"lineNum":"  314","line":"                            double half_substep_length = 0.5 * substep_length;"},
{"lineNum":"  315","line":"                            Independent_operator_sptr subfirst_half_op_sptr("},
{"lineNum":"  316","line":"                                    Stepper::get_fixed_step(\"first_half\","},
{"lineNum":"  317","line":"                                            substep_lattice_it, substep_left,"},
{"lineNum":"  318","line":"                                            lattice_end, half_substep_length,"},
{"lineNum":"  319","line":"                                            substep_offset_fudge, false));"},
{"lineNum":"  320","line":"                            Independent_operator_sptr subsecond_half_op_sptr("},
{"lineNum":"  321","line":"                                    Stepper::get_fixed_step(\"second_half\","},
{"lineNum":"  322","line":"                                            substep_lattice_it, substep_left,"},
{"lineNum":"  323","line":"                                            lattice_end, half_substep_length,"},
{"lineNum":"  324","line":"                                            substep_offset_fudge, true));"},
{"lineNum":"  325","line":"                            substep_sptr->append(subfirst_half_op_sptr, 0.5);"},
{"lineNum":"  326","line":"                            for (Collective_operators::const_iterator coll_op_it ="},
{"lineNum":"  327","line":"                                    collective_operators.begin();"},
{"lineNum":"  328","line":"                                    coll_op_it != collective_operators.end();"},
{"lineNum":"  329","line":"                                    ++coll_op_it) {"},
{"lineNum":"  330","line":"                                Collective_operator_sptr copied_collective_operator_sptr("},
{"lineNum":"  331","line":"                                        (*coll_op_it)->clone());"},
{"lineNum":"  332","line":"                                substep_sptr->append(copied_collective_operator_sptr, 1.0);"},
{"lineNum":"  333","line":"                            }"},
{"lineNum":"  334","line":"                            substep_sptr->append(subsecond_half_op_sptr, 0.5);"},
{"lineNum":"  335","line":"                        }"},
{"lineNum":"  336","line":"                        get_steps().push_back(substep_sptr);"},
{"lineNum":"  337","line":"                        substep_length = 0.0;"},
{"lineNum":"  338","line":"                    }"},
{"lineNum":"  339","line":"                }"},
{"lineNum":"  340","line":"            } else {"},
{"lineNum":"  341","line":"                if (found_force) {"},
{"lineNum":"  342","line":"                    double remain_length = step_length - all_substeps_length;"},
{"lineNum":"  343","line":"                    if (remain_length <= fixed_step_tolerance) {"},
{"lineNum":"  344","line":"                        remain_length = 0.0;"},
{"lineNum":"  345","line":"                    }"},
{"lineNum":"  346","line":"                    Step_sptr remain_sptr(new Step(remain_length));"},
{"lineNum":"  347","line":"                    if (remain_length == 0.0) {"},
{"lineNum":"  348","line":"                        Independent_operator_sptr zero_len_op_sptr("},
{"lineNum":"  349","line":"                                Stepper::get_fixed_step(\"zero_length\","},
{"lineNum":"  350","line":"                                        substep_lattice_it, substep_left,"},
{"lineNum":"  351","line":"                                        lattice_end, 0.0, substep_offset_fudge,"},
{"lineNum":"  352","line":"                                        true));"},
{"lineNum":"  353","line":"                        remain_sptr->append(zero_len_op_sptr, 1.0);"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"                    } else {"},
{"lineNum":"  356","line":"                        double half_remain_length = 0.5 * remain_length;"},
{"lineNum":"  357","line":"                        Independent_operator_sptr remain_first_half_op_sptr("},
{"lineNum":"  358","line":"                                Stepper::get_fixed_step(\"first_half\","},
{"lineNum":"  359","line":"                                        substep_lattice_it, substep_left,"},
{"lineNum":"  360","line":"                                        lattice_end, half_remain_length,"},
{"lineNum":"  361","line":"                                        substep_offset_fudge, false));"},
{"lineNum":"  362","line":"                        Independent_operator_sptr remain_second_half_op_sptr("},
{"lineNum":"  363","line":"                                Stepper::get_fixed_step(\"second_half\","},
{"lineNum":"  364","line":"                                        substep_lattice_it, substep_left,"},
{"lineNum":"  365","line":"                                        lattice_end, half_remain_length,"},
{"lineNum":"  366","line":"                                        substep_offset_fudge, true));"},
{"lineNum":"  367","line":"                        remain_sptr->append(remain_first_half_op_sptr, 0.5);"},
{"lineNum":"  368","line":"                        for (Collective_operators::const_iterator coll_op_it ="},
{"lineNum":"  369","line":"                                collective_operators.begin();"},
{"lineNum":"  370","line":"                                coll_op_it != collective_operators.end();"},
{"lineNum":"  371","line":"                                ++coll_op_it) {"},
{"lineNum":"  372","line":"                            Collective_operator_sptr copied_collective_operator_sptr("},
{"lineNum":"  373","line":"                                    (*coll_op_it)->clone());"},
{"lineNum":"  374","line":"                            remain_sptr->append(copied_collective_operator_sptr, 1.0);"},
{"lineNum":"  375","line":"                        }"},
{"lineNum":"  376","line":"                        remain_sptr->append(remain_second_half_op_sptr, 0.5);"},
{"lineNum":"  377","line":"                    }"},
{"lineNum":"  378","line":"                    get_steps().push_back(remain_sptr);"},
{"lineNum":"  379","line":"                    if (substep_lattice_it != lattice_it) {"},
{"lineNum":"  380","line":"                        throw(std::runtime_error("},
{"lineNum":"  381","line":"                                \"internal error: Split_operator_stepper created an inconsistent force_diagnostics step\"));"},
{"lineNum":"  382","line":"                    }"},
{"lineNum":"  383","line":"                }"},
{"lineNum":"  384","line":"            }"},
{"lineNum":"  385","line":"        }"},
{"lineNum":"  386","line":"        if (!found_force) {"},
{"lineNum":"  387","line":"            Step_sptr step(new Step(step_length));"},
{"lineNum":"  388","line":"            step->append(first_half_op_sptr, 0.5);"},
{"lineNum":"  389","line":"            for (Collective_operators::const_iterator coll_op_it ="},
{"lineNum":"  390","line":"                    collective_operators.begin();"},
{"lineNum":"  391","line":"                    coll_op_it != collective_operators.end(); ++coll_op_it) {"},
{"lineNum":"  392","line":"                Collective_operator_sptr copied_collective_operator_sptr("},
{"lineNum":"  393","line":"                        (*coll_op_it)->clone());"},
{"lineNum":"  394","line":"                step->append(copied_collective_operator_sptr, 1.0);"},
{"lineNum":"  395","line":"            }"},
{"lineNum":"  396","line":"            step->append(second_half_op_sptr, 0.5);"},
{"lineNum":"  397","line":"            get_steps().push_back(step);"},
{"lineNum":"  398","line":"        }"},
{"lineNum":"  399","line":""},
{"lineNum":"  400","line":"    }"},
{"lineNum":"  401","line":"    if (lattice_it != lattice_end) {"},
{"lineNum":"  402","line":"        throw(std::runtime_error("},
{"lineNum":"  403","line":"                \"internal error: split_operator_stepper did not make it to the end of the lattice\\n\"));"},
{"lineNum":"  404","line":"    }"},
{"lineNum":"  405","line":"    get_lattice_simulator().set_slices(extract_slices(get_steps()));"},
{"lineNum":"  406","line":"}"},
{"lineNum":"  407","line":""},
{"lineNum":"  408","line":"Split_operator_stepper::Split_operator_stepper("},
{"lineNum":"  409","line":"        Lattice_sptr lattice_sptr, int map_order,"},
{"lineNum":"  410","line":"        Collective_operator_sptr collective_operator, int num_steps) :"},
{"lineNum":"  411","line":"    Stepper(lattice_sptr, map_order)"},
{"lineNum":"  412","line":"{"},
{"lineNum":"  413","line":"    Collective_operators collective_operators;"},
{"lineNum":"  414","line":"    collective_operators.push_back(collective_operator);"},
{"lineNum":"  415","line":"    construct(collective_operators, num_steps);"},
{"lineNum":"  416","line":"}"},
{"lineNum":"  417","line":""},
{"lineNum":"  418","line":"Split_operator_stepper::Split_operator_stepper("},
{"lineNum":"  419","line":"        Lattice_sptr lattice_sptr, int map_order,"},
{"lineNum":"  420","line":"        Collective_operators const& collective_operators, int num_steps) :"},
{"lineNum":"  421","line":"    Stepper(lattice_sptr, map_order)"},
{"lineNum":"  422","line":"{"},
{"lineNum":"  423","line":"    construct(collective_operators, num_steps);"},
{"lineNum":"  424","line":"}"},
{"lineNum":"  425","line":""},
{"lineNum":"  426","line":"Split_operator_stepper::Split_operator_stepper("},
{"lineNum":"  427","line":"        Lattice_simulator const& lattice_simulator,"},
{"lineNum":"  428","line":"        Collective_operator_sptr collective_operator, int num_steps) :"},
{"lineNum":"  429","line":"    Stepper(lattice_simulator)"},
{"lineNum":"  430","line":"{"},
{"lineNum":"  431","line":"    Collective_operators collective_operators;"},
{"lineNum":"  432","line":"    collective_operators.push_back(collective_operator);"},
{"lineNum":"  433","line":"    construct(collective_operators, num_steps);"},
{"lineNum":"  434","line":"}"},
{"lineNum":"  435","line":""},
{"lineNum":"  436","line":"Split_operator_stepper::Split_operator_stepper("},
{"lineNum":"  437","line":"        Lattice_simulator const& lattice_simulator,"},
{"lineNum":"  438","line":"        Collective_operators const& collective_operators, int num_steps) :"},
{"lineNum":"  439","line":"    Stepper(lattice_simulator)"},
{"lineNum":"  440","line":"{"},
{"lineNum":"  441","line":"    construct(collective_operators, num_steps);"},
{"lineNum":"  442","line":"}"},
{"lineNum":"  443","line":""},
{"lineNum":"  444","line":"Split_operator_stepper::Split_operator_stepper()"},
{"lineNum":"  445","line":"{"},
{"lineNum":"  446","line":""},
{"lineNum":"  447","line":"}"},
{"lineNum":"  448","line":""},
{"lineNum":"  449","line":"template<class Archive>"},
{"lineNum":"  450","line":"    void"},
{"lineNum":"  451","line":"    Split_operator_stepper::serialize(Archive & ar, const unsigned int version)"},
{"lineNum":"  452","line":"    {"},
{"lineNum":"  453","line":"        ar & BOOST_SERIALIZATION_BASE_OBJECT_NVP(Stepper);"},
{"lineNum":"  454","line":"    }"},
{"lineNum":"  455","line":""},
{"lineNum":"  456","line":"template"},
{"lineNum":"  457","line":"void"},
{"lineNum":"  458","line":"Split_operator_stepper::serialize<boost::archive::binary_oarchive >("},
{"lineNum":"  459","line":"        boost::archive::binary_oarchive & ar, const unsigned int version);"},
{"lineNum":"  460","line":""},
{"lineNum":"  461","line":"template"},
{"lineNum":"  462","line":"void"},
{"lineNum":"  463","line":"Split_operator_stepper::serialize<boost::archive::xml_oarchive >("},
{"lineNum":"  464","line":"        boost::archive::xml_oarchive & ar, const unsigned int version);"},
{"lineNum":"  465","line":""},
{"lineNum":"  466","line":"template"},
{"lineNum":"  467","line":"void"},
{"lineNum":"  468","line":"Split_operator_stepper::serialize<boost::archive::binary_iarchive >("},
{"lineNum":"  469","line":"        boost::archive::binary_iarchive & ar, const unsigned int version);"},
{"lineNum":"  470","line":""},
{"lineNum":"  471","line":"template"},
{"lineNum":"  472","line":"void"},
{"lineNum":"  473","line":"Split_operator_stepper::serialize<boost::archive::xml_iarchive >("},
{"lineNum":"  474","line":"        boost::archive::xml_iarchive & ar, const unsigned int version);"},
{"lineNum":"  475","line":""},
{"lineNum":"  476","line":"Split_operator_stepper::~Split_operator_stepper()"},
{"lineNum":"  477","line":"{"},
{"lineNum":"  478","line":""},
{"lineNum":"  479","line":"}"},
{"lineNum":"  480","line":""},
{"lineNum":"  481","line":"BOOST_CLASS_EXPORT_IMPLEMENT(Split_operator_stepper)"},
{"lineNum":"  482","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 77, "covered" : 0,};
var merged_data = [];
