var data = {lines:[
{"lineNum":"    1","line":"#ifndef FF_QUADRUPOLE_H"},
{"lineNum":"    2","line":"#define FF_QUADRUPOLE_H"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#include \"synergia/libFF/ff_algorithm.h\""},
{"lineNum":"    5","line":"#include \"synergia/utils/simple_timer.h\""},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"namespace quad_impl"},
{"lineNum":"    8","line":"{"},
{"lineNum":"    9","line":"    // max multipole moments"},
{"lineNum":"   10","line":"    constexpr const int max_mp_order = 8;"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"    // pure thin quadrupole kick"},
{"lineNum":"   13","line":"    template<class T>"},
{"lineNum":"   14","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   15","line":"    void kick(T const&x, T& xp, T const& y, T& yp, T const&, double const* kL)"},
{"lineNum":"   16","line":"    { FF_algorithm::thin_quadrupole_unit(x, xp, y, yp, kL); }"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"    // thin quadrupole kick with high order corrections"},
{"lineNum":"   19","line":"    template<class T>"},
{"lineNum":"   20","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   21","line":"    void cf_kick(T const&x, T& xp, T const& y, T& yp, T const&, double const* kL)"},
{"lineNum":"   22","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   23","line":"        FF_algorithm::thin_quadrupole_unit(x, xp, y, yp, kL);"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"        if (kL[2] || kL[3])   FF_algorithm::thin_quadrupole_unit(x, xp, y, yp, kL+2);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   26","line":"        if (kL[4] || kL[5])   FF_algorithm::thin_sextupole_unit(x, xp, y, yp, kL+4);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   27","line":"        if (kL[6] || kL[7])   FF_algorithm::thin_octupole_unit(x, xp, y, yp, kL+6);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   28","line":"        if (kL[8] || kL[9])   FF_algorithm::thin_magnet_unit(x, xp, y, yp, kL+8, 5);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   29","line":"        if (kL[10] || kL[11]) FF_algorithm::thin_magnet_unit(x, xp, y, yp, kL+10, 6);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   30","line":"        if (kL[12] || kL[13]) FF_algorithm::thin_magnet_unit(x, xp, y, yp, kL+12, 7);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   31","line":"        if (kL[14] || kL[15]) FF_algorithm::thin_magnet_unit(x, xp, y, yp, kL+14, 8);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   32","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"    template<class BP>"},
{"lineNum":"   35","line":"    struct PropQuadThin"},
{"lineNum":"   36","line":"    {"},
{"lineNum":"   37","line":"        typename BP::parts_t p;"},
{"lineNum":"   38","line":"        typename BP::const_masks_t masks;"},
{"lineNum":"   39","line":"        double k[2];"},
{"lineNum":"   40","line":"        double xoff, yoff;"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   43","line":"        void operator()(const int i) const"},
{"lineNum":"   44","line":"        {"},
{"lineNum":"   45","line":"            if (masks(i))"},
{"lineNum":"   46","line":"            {"},
{"lineNum":"   47","line":"                auto x = p(i, 0) - xoff;"},
{"lineNum":"   48","line":"                auto y = p(i, 2) - yoff;"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"                FF_algorithm::thin_quadrupole_unit("},
{"lineNum":"   51","line":"                        x, p(i, 1), y, p(i, 3), k);"},
{"lineNum":"   52","line":"            }"},
{"lineNum":"   53","line":"        }"},
{"lineNum":"   54","line":"    };"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"    template<class BP>"},
{"lineNum":"   57","line":"    struct PropQuadThinSimd","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   58","line":"    {"},
{"lineNum":"   59","line":"        using gsv_t = typename BP::gsv_t;"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"        typename BP::parts_t p;"},
{"lineNum":"   62","line":"        typename BP::const_masks_t masks;"},
{"lineNum":"   63","line":"        double k[2];"},
{"lineNum":"   64","line":"        gsv_t xoff, yoff;"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   67","line":"        void operator()(const int idx) const"},
{"lineNum":"   68","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   69","line":"            int i = idx * gsv_t::size();"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"            int m = 0;"},
{"lineNum":"   72","line":"            for(int x=i; x<i+gsv_t::size(); ++x) m |= masks(x);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"            if (m)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   75","line":"            {"},
{"lineNum":"   76","line":"                gsv_t p0(&p(i, 0));"},
{"lineNum":"   77","line":"                gsv_t p1(&p(i, 1));"},
{"lineNum":"   78","line":"                gsv_t p2(&p(i, 2));"},
{"lineNum":"   79","line":"                gsv_t p3(&p(i, 3));"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"                p0 = p0 - xoff;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   82","line":"                p2 = p2 - yoff;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"                FF_algorithm::thin_quadrupole_unit("},
{"lineNum":"   85","line":"                        p0, p1, p2, p3, k);"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"                p1.store(&p(i, 1));"},
{"lineNum":"   88","line":"                p3.store(&p(i, 3));"},
{"lineNum":"   89","line":"            }"},
{"lineNum":"   90","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   91","line":"    };"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"    template<class BP>"},
{"lineNum":"   94","line":"    struct PropCFQuadThinSimd"},
{"lineNum":"   95","line":"    {"},
{"lineNum":"   96","line":"        using gsv_t = typename BP::gsv_t;"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"        typename BP::parts_t p;"},
{"lineNum":"   99","line":"        typename BP::const_masks_t masks;"},
{"lineNum":"  100","line":"        kt::arr_t<double, 2*max_mp_order> k;"},
{"lineNum":"  101","line":"        gsv_t xoff, yoff;"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  104","line":"        void operator()(const int idx) const"},
{"lineNum":"  105","line":"        {"},
{"lineNum":"  106","line":"            int i = idx * gsv_t::size();"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"            int m = 0;"},
{"lineNum":"  109","line":"            for(int x=i; x<i+gsv_t::size(); ++x) m |= masks(x);"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"            if (m)"},
{"lineNum":"  112","line":"            {"},
{"lineNum":"  113","line":"                gsv_t p0(&p(i, 0));"},
{"lineNum":"  114","line":"                gsv_t p1(&p(i, 1));"},
{"lineNum":"  115","line":"                gsv_t p2(&p(i, 2));"},
{"lineNum":"  116","line":"                gsv_t p3(&p(i, 3));"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"                p0 = p0 - xoff;"},
{"lineNum":"  119","line":"                p2 = p2 - yoff;"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"                cf_kick(p0, p1, p2, p3, gsv_t(0.0), k.data);"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"                p1.store(&p(i, 1));"},
{"lineNum":"  124","line":"                p3.store(&p(i, 3));"},
{"lineNum":"  125","line":"            }"},
{"lineNum":"  126","line":"        }"},
{"lineNum":"  127","line":"    };"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"    template<class BP>"},
{"lineNum":"  131","line":"    struct PropQuad"},
{"lineNum":"  132","line":"    {"},
{"lineNum":"  133","line":"        typename BP::parts_t p;"},
{"lineNum":"  134","line":"        typename BP::const_masks_t masks;"},
{"lineNum":"  135","line":"        int steps;"},
{"lineNum":"  136","line":"        double xoff, yoff;"},
{"lineNum":"  137","line":"        double ref_p, ref_m, step_ref_t, step_l;"},
{"lineNum":"  138","line":"        double step_k[2];"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  141","line":"        void operator()(const int i) const"},
{"lineNum":"  142","line":"        {"},
{"lineNum":"  143","line":"            using part_t = typename BP::part_t;"},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"            if (masks(i))"},
{"lineNum":"  146","line":"            {"},
{"lineNum":"  147","line":"                p(i, 0) -= xoff;"},
{"lineNum":"  148","line":"                p(i, 2) -= yoff;"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"                FF_algorithm::yoshida6<part_t, kick<part_t>, 1> ("},
{"lineNum":"  151","line":"                            p(i,0), p(i,1), p(i,2),"},
{"lineNum":"  152","line":"                            p(i,3), p(i,4), p(i,5),"},
{"lineNum":"  153","line":"                            ref_p, ref_m, step_ref_t,"},
{"lineNum":"  154","line":"                            step_l, step_k, steps );"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"                p(i, 0) += xoff;"},
{"lineNum":"  157","line":"                p(i, 2) += yoff;"},
{"lineNum":"  158","line":"            }"},
{"lineNum":"  159","line":"        }"},
{"lineNum":"  160","line":"    };"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"    template<class BP>"},
{"lineNum":"  163","line":"    struct PropQuadSimd","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  164","line":"    {"},
{"lineNum":"  165","line":"        using gsv_t = typename BP::gsv_t;"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"        typename BP::parts_t p;"},
{"lineNum":"  168","line":"        typename BP::const_masks_t masks;"},
{"lineNum":"  169","line":"        int steps;"},
{"lineNum":"  170","line":"        gsv_t xoff, yoff;"},
{"lineNum":"  171","line":"        double ref_p, ref_m, step_ref_t, step_l;"},
{"lineNum":"  172","line":"        double step_k[2];"},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  175","line":"        void operator()(const int idx) const"},
{"lineNum":"  176","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  177","line":"            int i = idx * gsv_t::size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  178","line":""},
{"lineNum":"  179","line":"            int m = 0;"},
{"lineNum":"  180","line":"            for(int x=i; x<i+gsv_t::size(); ++x) m |= masks(x);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"            if (m)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  183","line":"            {"},
{"lineNum":"  184","line":"                gsv_t p0(&p(i, 0));"},
{"lineNum":"  185","line":"                gsv_t p1(&p(i, 1));"},
{"lineNum":"  186","line":"                gsv_t p2(&p(i, 2));"},
{"lineNum":"  187","line":"                gsv_t p3(&p(i, 3));"},
{"lineNum":"  188","line":"                gsv_t p4(&p(i, 4));"},
{"lineNum":"  189","line":"                gsv_t p5(&p(i, 5));"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"                p0 = p0 - xoff;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  192","line":"                p2 = p2 - yoff;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"                FF_algorithm::yoshida6<gsv_t, kick<gsv_t>, 1>(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  195","line":"                        p0, p1, p2, p3, p4, p5,"},
{"lineNum":"  196","line":"                        ref_p, ref_m, step_ref_t,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  197","line":"                        step_l, step_k, steps );","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"                p0 = p0 + xoff;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  200","line":"                p2 = p2 + yoff;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"                p0.store(&p(i, 0));"},
{"lineNum":"  203","line":"                p1.store(&p(i, 1));"},
{"lineNum":"  204","line":"                p2.store(&p(i, 2));"},
{"lineNum":"  205","line":"                p3.store(&p(i, 3));"},
{"lineNum":"  206","line":"                p4.store(&p(i, 4));"},
{"lineNum":"  207","line":"            }"},
{"lineNum":"  208","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  209","line":"    };"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"    template<class BP>"},
{"lineNum":"  212","line":"    struct PropCFQuadSimd","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  213","line":"    {"},
{"lineNum":"  214","line":"        using gsv_t = typename BP::gsv_t;"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"        typename BP::parts_t p;"},
{"lineNum":"  217","line":"        typename BP::const_masks_t masks;"},
{"lineNum":"  218","line":"        int steps;"},
{"lineNum":"  219","line":"        gsv_t xoff, yoff;"},
{"lineNum":"  220","line":"        double ref_p, ref_m, step_ref_t, step_l;"},
{"lineNum":"  221","line":"        kt::arr_t<double, 2*max_mp_order> step_k;"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"        KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  224","line":"        void operator()(const int idx) const"},
{"lineNum":"  225","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  226","line":"            int i = idx * gsv_t::size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  227","line":""},
{"lineNum":"  228","line":"            int m = 0;"},
{"lineNum":"  229","line":"            for(int x=i; x<i+gsv_t::size(); ++x) m |= masks(x);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"            if (m)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  232","line":"            {"},
{"lineNum":"  233","line":"                gsv_t p0(&p(i, 0));"},
{"lineNum":"  234","line":"                gsv_t p1(&p(i, 1));"},
{"lineNum":"  235","line":"                gsv_t p2(&p(i, 2));"},
{"lineNum":"  236","line":"                gsv_t p3(&p(i, 3));"},
{"lineNum":"  237","line":"                gsv_t p4(&p(i, 4));"},
{"lineNum":"  238","line":"                gsv_t p5(&p(i, 5));"},
{"lineNum":"  239","line":""},
{"lineNum":"  240","line":"                p0 = p0 - xoff;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  241","line":"                p2 = p2 - yoff;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"                FF_algorithm::yoshida6<gsv_t, cf_kick<gsv_t>, max_mp_order>(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  244","line":"                        p0, p1, p2, p3, p4, p5,"},
{"lineNum":"  245","line":"                        ref_p, ref_m, step_ref_t,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  246","line":"                        step_l, step_k.data, steps );","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"                p0 = p0 + xoff;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  249","line":"                p2 = p2 + yoff;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  250","line":""},
{"lineNum":"  251","line":"                p0.store(&p(i, 0));"},
{"lineNum":"  252","line":"                p1.store(&p(i, 1));"},
{"lineNum":"  253","line":"                p2.store(&p(i, 2));"},
{"lineNum":"  254","line":"                p3.store(&p(i, 3));"},
{"lineNum":"  255","line":"                p4.store(&p(i, 4));"},
{"lineNum":"  256","line":"            }"},
{"lineNum":"  257","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  258","line":"    };"},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"    inline double get_reference_cdt("},
{"lineNum":"  262","line":"            double length, int steps,"},
{"lineNum":"  263","line":"            double const* kn,"},
{"lineNum":"  264","line":"            double xoff, double yoff,"},
{"lineNum":"  265","line":"            Reference_particle& ref)"},
{"lineNum":"  266","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  267","line":"        double x  = ref.get_state()[Bunch::x];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  268","line":"        double xp = ref.get_state()[Bunch::xp];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  269","line":"        double y  = ref.get_state()[Bunch::y];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  270","line":"        double yp = ref.get_state()[Bunch::yp];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  271","line":"        double cdt  = 0.0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  272","line":"        double dpop = ref.get_state()[Bunch::dpop];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"        x -= xoff;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  275","line":"        y -= yoff;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"        if (close_to_zero(length))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  278","line":"        {"},
{"lineNum":"  279","line":"            FF_algorithm::thin_quadrupole_unit(x, xp,  y, yp, kn);"},
{"lineNum":"  280","line":"        }"},
{"lineNum":"  281","line":"        else"},
{"lineNum":"  282","line":"        {"},
{"lineNum":"  283","line":"            double ref_p = ref.get_momentum();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  284","line":"            double ref_m = ref.get_mass();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  285","line":"            double ref_cdt = 0.0;"},
{"lineNum":"  286","line":""},
{"lineNum":"  287","line":"            FF_algorithm::yoshida6<double, cf_kick<double>, max_mp_order>","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  288","line":"                    ( x, xp, y, yp, cdt, dpop,"},
{"lineNum":"  289","line":"                      ref_p, ref_m, ref_cdt,"},
{"lineNum":"  290","line":"                      length/steps, kn, steps );","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  291","line":"        }"},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"        x += xoff;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  294","line":"        y += yoff;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  295","line":""},
{"lineNum":"  296","line":"        ref.set_state(x, xp, y, yp, cdt, dpop);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":"        return cdt;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  299","line":"    }"},
{"lineNum":"  300","line":"}"},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"namespace FF_quadrupole"},
{"lineNum":"  304","line":"{"},
{"lineNum":"  305","line":"    template<class BunchT>"},
{"lineNum":"  306","line":"    inline void apply(Lattice_element_slice const& slice, BunchT & bunch)"},
{"lineNum":"  307","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  308","line":"        using namespace quad_impl;"},
{"lineNum":"  309","line":""},
{"lineNum":"  310","line":"        scoped_simple_timer timer(\"libFF_quad\");"},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":"        // element"},
{"lineNum":"  313","line":"        auto const& ele = slice.get_lattice_element();"},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"        // length"},
{"lineNum":"  316","line":"        double length = slice.get_right() - slice.get_left();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  317","line":""},
{"lineNum":"  318","line":"        // offsets"},
{"lineNum":"  319","line":"        const double xoff = ele.get_double_attribute(\"hoffset\", 0.0);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  320","line":"        const double yoff = ele.get_double_attribute(\"voffset\", 0.0);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  321","line":""},
{"lineNum":"  322","line":"        // tilt"},
{"lineNum":"  323","line":"        double tilt = ele.get_double_attribute(\"tilt\", 0.0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  324","line":""},
{"lineNum":"  325","line":"        // quadrupole strength"},
{"lineNum":"  326","line":"        // kn[0], kn[1] are the quadrupole strength"},
{"lineNum":"  327","line":"        kt::arr_t<double, 2*max_mp_order> kn;"},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"        kn[0] = ele.get_double_attribute(\"k1\", 0.0);"},
{"lineNum":"  330","line":"        kn[1] = ele.get_double_attribute(\"k1s\", 0.0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"        // quad strength is strictly k1 as it appears in the element"},
{"lineNum":"  333","line":"        double quad_str = kn[0];"},
{"lineNum":"  334","line":""},
{"lineNum":"  335","line":"        // rot_angle is phase of ck1/(order+1) (order = 1 for quadrupole)"},
{"lineNum":"  336","line":"        // for pure skew quad, phase is -pi/2, order=1 so rotation = -pi/4"},
{"lineNum":"  337","line":"        // so rot_angle is the rotation needed to turn a normal quad"},
{"lineNum":"  338","line":"        // into one with k1 and k1s components."},
{"lineNum":"  339","line":"        std::complex<double> ck1(kn[0], -kn[1]);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  340","line":"        double rot = std::arg(ck1)/2.0 + tilt;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  341","line":""},
{"lineNum":"  342","line":"        if (tilt != 0.0)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  343","line":"        {"},
{"lineNum":"  344","line":"            std::complex<double> ck2(kn[0], kn[1]);"},
{"lineNum":"  345","line":"            ck2 = ck2 * exp(std::complex<double>(0.0, -2.0*tilt));","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"            kn[0] = ck2.real();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  348","line":"            kn[1] = ck2.imag();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  349","line":"        }"},
{"lineNum":"  350","line":""},
{"lineNum":"  351","line":"        // multipole moments"},
{"lineNum":"  352","line":"        // kn[2] ... kn[2*max_mp_order-1]"},
{"lineNum":"  353","line":"        bool has_mp = false;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"        std::string a_attr = \"a0\";"},
{"lineNum":"  356","line":"        std::string b_attr = \"b0\";"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"        for(int i=1; i<max_mp_order; ++i)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  359","line":"        {"},
{"lineNum":"  360","line":"            a_attr[1] = \'0\' + i;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  361","line":"            b_attr[1] = \'0\' + i;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"            kn[i*2+0] = ele.get_double_attribute(b_attr, 0.0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  364","line":"            kn[i*2+1] = ele.get_double_attribute(a_attr, 0.0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":"            if (kn[i*2+0] || kn[i*2+1])","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  367","line":"            {"},
{"lineNum":"  368","line":"                has_mp = true;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  369","line":""},
{"lineNum":"  370","line":"                double coeff = FF_algorithm::factorial(i);"},
{"lineNum":"  371","line":""},
{"lineNum":"  372","line":"                kn[i*2+0] *= quad_str * coeff;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  373","line":"                kn[i*2+1] *= quad_str * coeff;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  374","line":""},
{"lineNum":"  375","line":"                if (rot || tilt)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  376","line":"                {"},
{"lineNum":"  377","line":"                    // the first rotate counts for the tilt in this mp"},
{"lineNum":"  378","line":"                    // second rotate is to compensate the rotate in quad"},
{"lineNum":"  379","line":"                    auto ck = std::complex<double>(kn[i*2+0], kn[i*2+1]);"},
{"lineNum":"  380","line":"                    ck *= exp(std::complex<double>(0.0, -(i+1)*tilt));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  381","line":"                    ck *= exp(std::complex<double>(0.0, -(i+1)*rot));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"                    kn[i*2+0] = ck.real();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  384","line":"                    kn[i*2+1] = ck.imag();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  385","line":"                }"},
{"lineNum":"  386","line":"            }"},
{"lineNum":"  387","line":"        }"},
{"lineNum":"  388","line":""},
{"lineNum":"  389","line":"        // scaling"},
{"lineNum":"  390","line":"        Reference_particle       & ref_l = bunch.get_design_reference_particle();"},
{"lineNum":"  391","line":"        Reference_particle const & ref_b = bunch.get_reference_particle();"},
{"lineNum":"  392","line":""},
{"lineNum":"  393","line":"        double brho_l = ref_l.get_momentum() / ref_l.get_charge();  // GV/c","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  394","line":"        double brho_b = ref_b.get_momentum()","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  395","line":"                        * (1.0 + ref_b.get_state()[Bunch::dpop])","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  396","line":"                        / ref_l.get_charge();  // GV/c","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  397","line":""},
{"lineNum":"  398","line":"        double scale = brho_l / brho_b;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  399","line":"        for(auto & k : kn) k *= scale;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  400","line":""},
{"lineNum":"  401","line":"        if (close_to_zero(length))","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  402","line":"        {"},
{"lineNum":"  403","line":"            // propagate the design reference particle"},
{"lineNum":"  404","line":"            get_reference_cdt(length, 0, kn.data, xoff, yoff, ref_l);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  405","line":""},
{"lineNum":"  406","line":"            // propagate the bunch particles"},
{"lineNum":"  407","line":"            auto apply = [&](ParticleGroup pg) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  408","line":"                auto bp = bunch.get_bunch_particles(pg);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  409","line":"                if (!bp.num_valid()) return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  410","line":""},
{"lineNum":"  411","line":"                using exec = typename BunchT::exec_space;"},
{"lineNum":"  412","line":""},
{"lineNum":"  413","line":"#if LIBFF_USE_GSV"},
{"lineNum":"  414","line":"                // thin quadrupole cant have mp components"},
{"lineNum":"  415","line":"                PropQuadThinSimd<typename BunchT::bp_t> pqt{"},
{"lineNum":"  416","line":"                    bp.parts, bp.masks, {kn[0], kn[1]}, xoff, yoff };","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  417","line":""},
{"lineNum":"  418","line":"                auto range = Kokkos::RangePolicy<exec>(0, bp.size_in_gsv());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  419","line":"                Kokkos::parallel_for(range, pqt);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  420","line":"#else"},
{"lineNum":"  421","line":"                auto range = Kokkos::RangePolicy<exec>(0, bp.size());"},
{"lineNum":"  422","line":"                PropQuadThin<typename BunchT::bp_t> pqt{"},
{"lineNum":"  423","line":"                    bp.parts, bp.masks, {kn[0], kn[1]}, xoff, yoff };"},
{"lineNum":"  424","line":"                Kokkos::parallel_for(range, pqt);"},
{"lineNum":"  425","line":"#endif"},
{"lineNum":"  426","line":"            };","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  427","line":""},
{"lineNum":"  428","line":"            // apply"},
{"lineNum":"  429","line":"            apply(ParticleGroup::regular);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  430","line":"            apply(ParticleGroup::spectator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  431","line":"        }"},
{"lineNum":"  432","line":"        else"},
{"lineNum":"  433","line":"        {"},
{"lineNum":"  434","line":"            // yoshida steps"},
{"lineNum":"  435","line":"            int steps = (int)slice","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  436","line":"                .get_lattice_element()"},
{"lineNum":"  437","line":"                .get_double_attribute(\"yoshida_steps\", 4.0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  438","line":""},
{"lineNum":"  439","line":"            //auto k2 = kn;"},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"            // perstep k"},
{"lineNum":"  442","line":"            for(auto & k : kn) k *= length/steps;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  443","line":""},
{"lineNum":"  444","line":"            // params"},
{"lineNum":"  445","line":"            double ref_p = ref_b.get_momentum();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  446","line":"            double ref_m = ref_b.get_mass();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  447","line":"            double ref_t = get_reference_cdt(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  448","line":"                    length, steps, kn.data, xoff, yoff, ref_l);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  449","line":""},
{"lineNum":"  450","line":"            // bunch particles"},
{"lineNum":"  451","line":"            auto apply = [&](ParticleGroup pg) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  452","line":"                auto bp = bunch.get_bunch_particles(pg);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  453","line":"                if (!bp.num_valid()) return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  454","line":""},
{"lineNum":"  455","line":"                using exec = typename BunchT::exec_space;"},
{"lineNum":"  456","line":""},
{"lineNum":"  457","line":"#if LIBFF_USE_GSV"},
{"lineNum":"  458","line":"                if (has_mp)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  459","line":"                {"},
{"lineNum":"  460","line":"#if 1"},
{"lineNum":"  461","line":"                    PropCFQuadSimd<typename BunchT::bp_t> pq{","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  462","line":"                        bp.parts, bp.masks, steps,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  463","line":"                        xoff, yoff, ref_p, ref_m,","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  464","line":"                        ref_t/steps, length/steps, kn","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  465","line":"                    };"},
{"lineNum":"  466","line":""},
{"lineNum":"  467","line":"                    auto range = Kokkos::RangePolicy<exec>(0, bp.size_in_gsv());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  468","line":"                    Kokkos::parallel_for(range, pq);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  469","line":"#endif"},
{"lineNum":"  470","line":""},
{"lineNum":"  471","line":"#if 0"},
{"lineNum":"  472","line":"                    // drift - kick - drift for testing"},
{"lineNum":"  473","line":"                    // also needs to make a copy of kn before scaling"},
{"lineNum":"  474","line":"                    // and comment out quad_unit in cf_kick"},
{"lineNum":"  475","line":"                    ref_t *= 0.5;"},
{"lineNum":"  476","line":"                    length *= 0.5;"},
{"lineNum":"  477","line":"                    k2[0] *= length/steps;"},
{"lineNum":"  478","line":"                    k2[1] *= length/steps;"},
{"lineNum":"  479","line":""},
{"lineNum":"  480","line":"                    auto range = Kokkos::RangePolicy<exec>("},
{"lineNum":"  481","line":"                            0, bp.size_in_gsv());"},
{"lineNum":"  482","line":""},
{"lineNum":"  483","line":"                    PropQuadSimd<typename BunchT::bp_t> pq1{"},
{"lineNum":"  484","line":"                        bp.parts, bp.masks, steps,"},
{"lineNum":"  485","line":"                        xoff, yoff, ref_p, ref_m,"},
{"lineNum":"  486","line":"                        ref_t/steps, length/steps,"},
{"lineNum":"  487","line":"                        {k2[0], k2[1]}"},
{"lineNum":"  488","line":"                    };"},
{"lineNum":"  489","line":""},
{"lineNum":"  490","line":"                    Kokkos::parallel_for(range, pq1);"},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"                    PropCFQuadThinSimd<typename BunchT::bp_t> pqt{"},
{"lineNum":"  493","line":"                        bp.parts, bp.masks, k2, xoff, yoff };"},
{"lineNum":"  494","line":""},
{"lineNum":"  495","line":"                    Kokkos::parallel_for(range, pqt);"},
{"lineNum":"  496","line":""},
{"lineNum":"  497","line":"                    PropQuadSimd<typename BunchT::bp_t> pq2{"},
{"lineNum":"  498","line":"                        bp.parts, bp.masks, steps,"},
{"lineNum":"  499","line":"                        xoff, yoff, ref_p, ref_m,"},
{"lineNum":"  500","line":"                        ref_t/steps, length/steps,"},
{"lineNum":"  501","line":"                        {k2[0], k2[1]}"},
{"lineNum":"  502","line":"                    };"},
{"lineNum":"  503","line":""},
{"lineNum":"  504","line":"                    Kokkos::parallel_for(range, pq2);"},
{"lineNum":"  505","line":"#endif"},
{"lineNum":"  506","line":"                }"},
{"lineNum":"  507","line":"                else"},
{"lineNum":"  508","line":"                {"},
{"lineNum":"  509","line":"                    PropQuadSimd<typename BunchT::bp_t> pq{","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  510","line":"                        bp.parts, bp.masks, steps,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  511","line":"                        xoff, yoff, ref_p, ref_m,","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  512","line":"                        ref_t/steps, length/steps,","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  513","line":"                        {kn[0], kn[1]}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  514","line":"                    };"},
{"lineNum":"  515","line":""},
{"lineNum":"  516","line":"                    auto range = Kokkos::RangePolicy<exec>(0, bp.size_in_gsv());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  517","line":"                    Kokkos::parallel_for(range, pq);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  518","line":"                }"},
{"lineNum":"  519","line":"#else"},
{"lineNum":"  520","line":"                if (has_mp)"},
{"lineNum":"  521","line":"                {"},
{"lineNum":"  522","line":"                    PropQuad<typename BunchT::bp_t> pq{"},
{"lineNum":"  523","line":"                        bp.parts, bp.masks, steps,"},
{"lineNum":"  524","line":"                        xoff, yoff, ref_p, ref_m,"},
{"lineNum":"  525","line":"                        ref_t/steps, length/steps,"},
{"lineNum":"  526","line":"                        {kn[0], kn[1]}"},
{"lineNum":"  527","line":"                    };"},
{"lineNum":"  528","line":""},
{"lineNum":"  529","line":"                    auto range = Kokkos::RangePolicy<exec>(0, bp.size());"},
{"lineNum":"  530","line":"                    Kokkos::parallel_for(range, pq);"},
{"lineNum":"  531","line":"                }"},
{"lineNum":"  532","line":"                else"},
{"lineNum":"  533","line":"                {"},
{"lineNum":"  534","line":"                    PropQuad<typename BunchT::bp_t> pq{"},
{"lineNum":"  535","line":"                        bp.parts, bp.masks, steps,"},
{"lineNum":"  536","line":"                        xoff, yoff, ref_p, ref_m,"},
{"lineNum":"  537","line":"                        ref_t/steps, length/steps,"},
{"lineNum":"  538","line":"                        {kn[0], kn[1]}"},
{"lineNum":"  539","line":"                    };"},
{"lineNum":"  540","line":""},
{"lineNum":"  541","line":"                    auto range = Kokkos::RangePolicy<exec>(0, bp.size());"},
{"lineNum":"  542","line":"                    Kokkos::parallel_for(range, pq);"},
{"lineNum":"  543","line":"                }"},
{"lineNum":"  544","line":"#endif"},
{"lineNum":"  545","line":"            };","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  546","line":""},
{"lineNum":"  547","line":"            // apply"},
{"lineNum":"  548","line":"            apply(ParticleGroup::regular);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  549","line":"            apply(ParticleGroup::spectator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  550","line":""},
{"lineNum":"  551","line":"            // advance the ref_part"},
{"lineNum":"  552","line":"            bunch.get_reference_particle().increment_trajectory(length);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  553","line":"        }"},
{"lineNum":"  554","line":""},
{"lineNum":"  555","line":"        Kokkos::fence();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  556","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  557","line":"}"},
{"lineNum":"  558","line":""},
{"lineNum":"  559","line":"#endif // FF_QUADRUPOLE_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 134, "covered" : 0,};
var merged_data = [];
