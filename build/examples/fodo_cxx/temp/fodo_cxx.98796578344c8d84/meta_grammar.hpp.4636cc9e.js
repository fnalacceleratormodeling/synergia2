var data = {lines:[
{"lineNum":"    1","line":"/*============================================================================="},
{"lineNum":"    2","line":"    Copyright (c) 2005-2010 Joel de Guzman"},
{"lineNum":"    3","line":"    Copyright (c) 2010 Eric Niebler"},
{"lineNum":"    4","line":"    Copyright (c) 2010 Thomas Heller"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"    Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    7","line":"    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    8","line":"==============================================================================*/"},
{"lineNum":"    9","line":"#ifndef BOOST_PHOENIX_CORE_META_GRAMMAR_HPP"},
{"lineNum":"   10","line":"#define BOOST_PHOENIX_CORE_META_GRAMMAR_HPP"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"#include <boost/phoenix/core/limits.hpp>"},
{"lineNum":"   13","line":"#include <boost/mpl/deref.hpp>"},
{"lineNum":"   14","line":"#include <boost/phoenix/core/environment.hpp>"},
{"lineNum":"   15","line":"#include <boost/proto/matches.hpp>"},
{"lineNum":"   16","line":"#include <boost/proto/transform/call.hpp>"},
{"lineNum":"   17","line":"#include <boost/proto/transform/default.hpp>"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"namespace boost { namespace phoenix"},
{"lineNum":"   20","line":"{"},
{"lineNum":"   21","line":"    /////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   22","line":"    // The grammar defining valid phoenix expressions"},
{"lineNum":"   23","line":"    struct meta_grammar"},
{"lineNum":"   24","line":"        : proto::switch_<meta_grammar>"},
{"lineNum":"   25","line":"    {"},
{"lineNum":"   26","line":"        template <typename Tag, typename Dummy = void>"},
{"lineNum":"   27","line":"        struct case_"},
{"lineNum":"   28","line":"            : proto::not_<proto::_>"},
{"lineNum":"   29","line":"        {};"},
{"lineNum":"   30","line":"    };"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"    struct evaluator"},
{"lineNum":"   33","line":"    {"},
{"lineNum":"   34","line":"        BOOST_PROTO_TRANSFORM(evaluator)"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"        template <typename Expr, typename State, typename Data>"},
{"lineNum":"   37","line":"        struct impl"},
{"lineNum":"   38","line":"            : proto::transform_impl<Expr, State, Data>"},
{"lineNum":"   39","line":"        {"},
{"lineNum":"   40","line":"            typedef meta_grammar::impl<Expr, State, Data> what;"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"            typedef typename what::result_type result_type;"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"            result_type operator()("},
{"lineNum":"   45","line":"                typename impl::expr_param e"},
{"lineNum":"   46","line":"              , typename impl::state_param s"},
{"lineNum":"   47","line":"              , typename impl::data_param d"},
{"lineNum":"   48","line":"            ) const"},
{"lineNum":"   49","line":"            {"},
{"lineNum":"   50","line":"                return what()(e, s, d);"},
{"lineNum":"   51","line":"            }"},
{"lineNum":"   52","line":"        };"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"        template <typename Expr, typename State>"},
{"lineNum":"   55","line":"        struct impl<Expr, State, proto::empty_env>"},
{"lineNum":"   56","line":"            : proto::transform_impl<Expr, State, proto::empty_env>"},
{"lineNum":"   57","line":"        {"},
{"lineNum":"   58","line":"            typedef"},
{"lineNum":"   59","line":"                meta_grammar::impl<"},
{"lineNum":"   60","line":"                    Expr"},
{"lineNum":"   61","line":"                  , typename result_of::env<State>::type"},
{"lineNum":"   62","line":"                  , typename result_of::actions<State>::type"},
{"lineNum":"   63","line":"                >"},
{"lineNum":"   64","line":"                what;"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"            typedef typename what::result_type result_type;"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"            result_type operator()("},
{"lineNum":"   69","line":"                typename impl::expr_param e"},
{"lineNum":"   70","line":"              , typename impl::state_param s"},
{"lineNum":"   71","line":"              , typename impl::data_param"},
{"lineNum":"   72","line":"            ) const"},
{"lineNum":"   73","line":"            {"},
{"lineNum":"   74","line":"                return what()(e, phoenix::env(s), actions(s));","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   75","line":"            }"},
{"lineNum":"   76","line":"        };"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"        template <typename Expr, typename State>"},
{"lineNum":"   79","line":"        struct impl<Expr, State, unused>"},
{"lineNum":"   80","line":"            : proto::transform_impl<Expr, State, unused>"},
{"lineNum":"   81","line":"        {"},
{"lineNum":"   82","line":"            typedef"},
{"lineNum":"   83","line":"                meta_grammar::impl<"},
{"lineNum":"   84","line":"                    Expr"},
{"lineNum":"   85","line":"                  , typename result_of::env<State>::type"},
{"lineNum":"   86","line":"                  , typename result_of::actions<State>::type"},
{"lineNum":"   87","line":"                >"},
{"lineNum":"   88","line":"                what;"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"            typedef typename what::result_type result_type;"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"            result_type operator()("},
{"lineNum":"   93","line":"                typename impl::expr_param e"},
{"lineNum":"   94","line":"              , typename impl::state_param s"},
{"lineNum":"   95","line":"              , typename impl::data_param"},
{"lineNum":"   96","line":"            ) const"},
{"lineNum":"   97","line":"            {"},
{"lineNum":"   98","line":"                return what()(e, phoenix::env(s), actions(s));"},
{"lineNum":"   99","line":"            }"},
{"lineNum":"  100","line":"        };"},
{"lineNum":"  101","line":"    };"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"    /////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  104","line":"    // Set of default actions. Extend this whenever you add a new phoenix"},
{"lineNum":"  105","line":"    // construct"},
{"lineNum":"  106","line":"    struct default_actions"},
{"lineNum":"  107","line":"    {"},
{"lineNum":"  108","line":"        template <typename Rule, typename Dummy = void>"},
{"lineNum":"  109","line":"        struct when"},
{"lineNum":"  110","line":"            : proto::_default<meta_grammar>"},
{"lineNum":"  111","line":"        {};"},
{"lineNum":"  112","line":"    };"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"    template <typename Rule, typename Dummy = void>"},
{"lineNum":"  115","line":"    struct enable_rule"},
{"lineNum":"  116","line":"        : proto::when<Rule, proto::external_transform>"},
{"lineNum":"  117","line":"    {};"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"    namespace result_of"},
{"lineNum":"  120","line":"    {"},
{"lineNum":"  121","line":"        template <typename Expr, typename Context>"},
{"lineNum":"  122","line":"        struct eval"},
{"lineNum":"  123","line":"            : boost::result_of< ::boost::phoenix::evaluator(Expr, Context)>"},
{"lineNum":"  124","line":"        {};"},
{"lineNum":"  125","line":"    }"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"    /////////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  128","line":"    // A function we can call to evaluate our expression"},
{"lineNum":"  129","line":"    template <typename Expr, typename Context>"},
{"lineNum":"  130","line":"    inline"},
{"lineNum":"  131","line":"    typename meta_grammar::template impl<"},
{"lineNum":"  132","line":"        Expr const&"},
{"lineNum":"  133","line":"      , typename result_of::env<Context const&>::type"},
{"lineNum":"  134","line":"      , typename result_of::actions<Context const&>::type"},
{"lineNum":"  135","line":"    >::result_type"},
{"lineNum":"  136","line":"    eval(Expr const& expr, Context const & ctx)"},
{"lineNum":"  137","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  138","line":"        static evaluator const e = {};"},
{"lineNum":"  139","line":"        return e(expr, ctx);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  140","line":"    }"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"    template <typename Expr, typename Context>"},
{"lineNum":"  143","line":"    inline"},
{"lineNum":"  144","line":"    typename meta_grammar::template impl<"},
{"lineNum":"  145","line":"        Expr &"},
{"lineNum":"  146","line":"      , typename result_of::env<Context const&>::type"},
{"lineNum":"  147","line":"      , typename result_of::actions<Context const&>::type"},
{"lineNum":"  148","line":"    >::result_type"},
{"lineNum":"  149","line":"    eval(Expr & expr, Context const & ctx)"},
{"lineNum":"  150","line":"    {"},
{"lineNum":"  151","line":"        static evaluator const e = {};"},
{"lineNum":"  152","line":"        return e(expr, ctx);"},
{"lineNum":"  153","line":"    }"},
{"lineNum":"  154","line":"}}"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 3, "covered" : 0,};
var merged_data = [];
