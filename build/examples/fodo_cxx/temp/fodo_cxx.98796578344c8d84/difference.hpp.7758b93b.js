var data = {lines:[
{"lineNum":"    1","line":"/*============================================================================="},
{"lineNum":"    2","line":"    Copyright (c) 2001-2011 Joel de Guzman"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"    Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    5","line":"    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    6","line":"=============================================================================*/"},
{"lineNum":"    7","line":"#if !defined(SPIRIT_DIFFERENCE_FEBRUARY_11_2007_1250PM)"},
{"lineNum":"    8","line":"#define SPIRIT_DIFFERENCE_FEBRUARY_11_2007_1250PM"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#if defined(_MSC_VER)"},
{"lineNum":"   11","line":"#pragma once"},
{"lineNum":"   12","line":"#endif"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"#include <boost/spirit/home/qi/domain.hpp>"},
{"lineNum":"   15","line":"#include <boost/spirit/home/qi/meta_compiler.hpp>"},
{"lineNum":"   16","line":"#include <boost/spirit/home/qi/parser.hpp>"},
{"lineNum":"   17","line":"#include <boost/spirit/home/qi/detail/attributes.hpp>"},
{"lineNum":"   18","line":"#include <boost/spirit/home/support/info.hpp>"},
{"lineNum":"   19","line":"#include <boost/spirit/home/support/has_semantic_action.hpp>"},
{"lineNum":"   20","line":"#include <boost/spirit/home/support/handles_container.hpp>"},
{"lineNum":"   21","line":"#include <boost/fusion/include/at.hpp>"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"namespace boost { namespace spirit"},
{"lineNum":"   24","line":"{"},
{"lineNum":"   25","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   26","line":"    // Enablers"},
{"lineNum":"   27","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   28","line":"    template <>"},
{"lineNum":"   29","line":"    struct use_operator<qi::domain, proto::tag::minus> // enables -"},
{"lineNum":"   30","line":"      : mpl::true_ {};"},
{"lineNum":"   31","line":"}}"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"namespace boost { namespace spirit { namespace qi"},
{"lineNum":"   34","line":"{"},
{"lineNum":"   35","line":"    template <typename Left, typename Right>"},
{"lineNum":"   36","line":"    struct difference : binary_parser<difference<Left, Right> >"},
{"lineNum":"   37","line":"    {"},
{"lineNum":"   38","line":"        typedef Left left_type;"},
{"lineNum":"   39","line":"        typedef Right right_type;"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"        template <typename Context, typename Iterator>"},
{"lineNum":"   42","line":"        struct attribute"},
{"lineNum":"   43","line":"        {"},
{"lineNum":"   44","line":"            typedef typename"},
{"lineNum":"   45","line":"                traits::attribute_of<left_type, Context, Iterator>::type"},
{"lineNum":"   46","line":"            type;"},
{"lineNum":"   47","line":"        };"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"        difference(Left const& left_, Right const& right_)"},
{"lineNum":"   50","line":"          : left(left_), right(right_) {}"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"        template <typename Iterator, typename Context"},
{"lineNum":"   53","line":"          , typename Skipper, typename Attribute>"},
{"lineNum":"   54","line":"        bool parse(Iterator& first, Iterator const& last"},
{"lineNum":"   55","line":"          , Context& context, Skipper const& skipper"},
{"lineNum":"   56","line":"          , Attribute& attr_) const"},
{"lineNum":"   57","line":"        {"},
{"lineNum":"   58","line":"            // Unlike classic Spirit, with this version of difference, the rule"},
{"lineNum":"   59","line":"            // lit(\"policeman\") - \"police\" will always fail to match."},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"            // Spirit2 does not count the matching chars while parsing and"},
{"lineNum":"   62","line":"            // there is no reliable and fast way to check if the LHS matches"},
{"lineNum":"   63","line":"            // more than the RHS."},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"            // Try RHS first"},
{"lineNum":"   66","line":"            Iterator start = first;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   67","line":"            if (right.parse(first, last, context, skipper, unused))"},
{"lineNum":"   68","line":"            {"},
{"lineNum":"   69","line":"                // RHS succeeds, we fail."},
{"lineNum":"   70","line":"                first = start;"},
{"lineNum":"   71","line":"                return false;"},
{"lineNum":"   72","line":"            }"},
{"lineNum":"   73","line":"            // RHS fails, now try LHS"},
{"lineNum":"   74","line":"            return left.parse(first, last, context, skipper, attr_);"},
{"lineNum":"   75","line":"        }"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"        template <typename Context>"},
{"lineNum":"   78","line":"        info what(Context& context) const"},
{"lineNum":"   79","line":"        {"},
{"lineNum":"   80","line":"            return info(\"difference\","},
{"lineNum":"   81","line":"                std::make_pair(left.what(context), right.what(context)));"},
{"lineNum":"   82","line":"        }"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"        Left left;"},
{"lineNum":"   85","line":"        Right right;"},
{"lineNum":"   86","line":"    };"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   89","line":"    // Parser generators: make_xxx function (objects)"},
{"lineNum":"   90","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   91","line":"    template <typename Elements, typename Modifiers>"},
{"lineNum":"   92","line":"    struct make_composite<proto::tag::minus, Elements, Modifiers>"},
{"lineNum":"   93","line":"      : make_binary_composite<Elements, difference>"},
{"lineNum":"   94","line":"    {};"},
{"lineNum":"   95","line":"}}}"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"namespace boost { namespace spirit { namespace traits"},
{"lineNum":"   98","line":"{"},
{"lineNum":"   99","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  100","line":"    template <typename Left, typename Right>"},
{"lineNum":"  101","line":"    struct has_semantic_action<qi::difference<Left, Right> >"},
{"lineNum":"  102","line":"      : binary_has_semantic_action<Left, Right> {};"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  105","line":"    template <typename Left, typename Right, typename Attribute"},
{"lineNum":"  106","line":"      , typename Context, typename Iterator>"},
{"lineNum":"  107","line":"    struct handles_container<qi::difference<Left, Right>, Attribute, Context"},
{"lineNum":"  108","line":"      , Iterator>"},
{"lineNum":"  109","line":"      : binary_handles_container<Left, Right, Attribute, Context, Iterator> {};"},
{"lineNum":"  110","line":"}}}"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 1, "covered" : 0,};
var merged_data = [];
