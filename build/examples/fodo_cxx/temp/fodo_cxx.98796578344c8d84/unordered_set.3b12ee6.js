var data = {lines:[
{"lineNum":"    1","line":"// -*- C++ -*-"},
{"lineNum":"    2","line":"//===-------------------------- unordered_set -----------------------------===//"},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions."},
{"lineNum":"    5","line":"// See https://llvm.org/LICENSE.txt for license information."},
{"lineNum":"    6","line":"// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef _LIBCPP_UNORDERED_SET"},
{"lineNum":"   11","line":"#define _LIBCPP_UNORDERED_SET"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"/*"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"    unordered_set synopsis"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"#include <initializer_list>"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"namespace std"},
{"lineNum":"   20","line":"{"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"template <class Value, class Hash = hash<Value>, class Pred = equal_to<Value>,"},
{"lineNum":"   23","line":"          class Alloc = allocator<Value>>"},
{"lineNum":"   24","line":"class unordered_set"},
{"lineNum":"   25","line":"{"},
{"lineNum":"   26","line":"public:"},
{"lineNum":"   27","line":"    // types"},
{"lineNum":"   28","line":"    typedef Value                                                      key_type;"},
{"lineNum":"   29","line":"    typedef key_type                                                   value_type;"},
{"lineNum":"   30","line":"    typedef Hash                                                       hasher;"},
{"lineNum":"   31","line":"    typedef Pred                                                       key_equal;"},
{"lineNum":"   32","line":"    typedef Alloc                                                      allocator_type;"},
{"lineNum":"   33","line":"    typedef value_type&                                                reference;"},
{"lineNum":"   34","line":"    typedef const value_type&                                          const_reference;"},
{"lineNum":"   35","line":"    typedef typename allocator_traits<allocator_type>::pointer         pointer;"},
{"lineNum":"   36","line":"    typedef typename allocator_traits<allocator_type>::const_pointer   const_pointer;"},
{"lineNum":"   37","line":"    typedef typename allocator_traits<allocator_type>::size_type       size_type;"},
{"lineNum":"   38","line":"    typedef typename allocator_traits<allocator_type>::difference_type difference_type;"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"    typedef /unspecified/ iterator;"},
{"lineNum":"   41","line":"    typedef /unspecified/ const_iterator;"},
{"lineNum":"   42","line":"    typedef /unspecified/ local_iterator;"},
{"lineNum":"   43","line":"    typedef /unspecified/ const_local_iterator;"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"    typedef unspecified node_type unspecified;                            // C++17"},
{"lineNum":"   46","line":"    typedef INSERT_RETURN_TYPE<iterator, node_type> insert_return_type;   // C++17"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"    unordered_set()"},
{"lineNum":"   49","line":"        noexcept("},
{"lineNum":"   50","line":"            is_nothrow_default_constructible<hasher>::value &&"},
{"lineNum":"   51","line":"            is_nothrow_default_constructible<key_equal>::value &&"},
{"lineNum":"   52","line":"            is_nothrow_default_constructible<allocator_type>::value);"},
{"lineNum":"   53","line":"    explicit unordered_set(size_type n, const hasher& hf = hasher(),"},
{"lineNum":"   54","line":"                           const key_equal& eql = key_equal(),"},
{"lineNum":"   55","line":"                           const allocator_type& a = allocator_type());"},
{"lineNum":"   56","line":"    template <class InputIterator>"},
{"lineNum":"   57","line":"        unordered_set(InputIterator f, InputIterator l,"},
{"lineNum":"   58","line":"                      size_type n = 0, const hasher& hf = hasher(),"},
{"lineNum":"   59","line":"                      const key_equal& eql = key_equal(),"},
{"lineNum":"   60","line":"                      const allocator_type& a = allocator_type());"},
{"lineNum":"   61","line":"    explicit unordered_set(const allocator_type&);"},
{"lineNum":"   62","line":"    unordered_set(const unordered_set&);"},
{"lineNum":"   63","line":"    unordered_set(const unordered_set&, const Allocator&);"},
{"lineNum":"   64","line":"    unordered_set(unordered_set&&)"},
{"lineNum":"   65","line":"        noexcept("},
{"lineNum":"   66","line":"            is_nothrow_move_constructible<hasher>::value &&"},
{"lineNum":"   67","line":"            is_nothrow_move_constructible<key_equal>::value &&"},
{"lineNum":"   68","line":"            is_nothrow_move_constructible<allocator_type>::value);"},
{"lineNum":"   69","line":"    unordered_set(unordered_set&&, const Allocator&);"},
{"lineNum":"   70","line":"    unordered_set(initializer_list<value_type>, size_type n = 0,"},
{"lineNum":"   71","line":"                  const hasher& hf = hasher(), const key_equal& eql = key_equal(),"},
{"lineNum":"   72","line":"                  const allocator_type& a = allocator_type());"},
{"lineNum":"   73","line":"    unordered_set(size_type n, const allocator_type& a); // C++14"},
{"lineNum":"   74","line":"    unordered_set(size_type n, const hasher& hf, const allocator_type& a); // C++14"},
{"lineNum":"   75","line":"    template <class InputIterator>"},
{"lineNum":"   76","line":"      unordered_set(InputIterator f, InputIterator l, size_type n, const allocator_type& a); // C++14"},
{"lineNum":"   77","line":"    template <class InputIterator>"},
{"lineNum":"   78","line":"      unordered_set(InputIterator f, InputIterator l, size_type n,"},
{"lineNum":"   79","line":"                    const hasher& hf,  const allocator_type& a); // C++14"},
{"lineNum":"   80","line":"    unordered_set(initializer_list<value_type> il, size_type n, const allocator_type& a); // C++14"},
{"lineNum":"   81","line":"    unordered_set(initializer_list<value_type> il, size_type n,"},
{"lineNum":"   82","line":"                  const hasher& hf,  const allocator_type& a); // C++14"},
{"lineNum":"   83","line":"    ~unordered_set();"},
{"lineNum":"   84","line":"    unordered_set& operator=(const unordered_set&);"},
{"lineNum":"   85","line":"    unordered_set& operator=(unordered_set&&)"},
{"lineNum":"   86","line":"        noexcept("},
{"lineNum":"   87","line":"            allocator_type::propagate_on_container_move_assignment::value &&"},
{"lineNum":"   88","line":"            is_nothrow_move_assignable<allocator_type>::value &&"},
{"lineNum":"   89","line":"            is_nothrow_move_assignable<hasher>::value &&"},
{"lineNum":"   90","line":"            is_nothrow_move_assignable<key_equal>::value);"},
{"lineNum":"   91","line":"    unordered_set& operator=(initializer_list<value_type>);"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"    allocator_type get_allocator() const noexcept;"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"    bool      empty() const noexcept;"},
{"lineNum":"   96","line":"    size_type size() const noexcept;"},
{"lineNum":"   97","line":"    size_type max_size() const noexcept;"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"    iterator       begin() noexcept;"},
{"lineNum":"  100","line":"    iterator       end() noexcept;"},
{"lineNum":"  101","line":"    const_iterator begin()  const noexcept;"},
{"lineNum":"  102","line":"    const_iterator end()    const noexcept;"},
{"lineNum":"  103","line":"    const_iterator cbegin() const noexcept;"},
{"lineNum":"  104","line":"    const_iterator cend()   const noexcept;"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"    template <class... Args>"},
{"lineNum":"  107","line":"        pair<iterator, bool> emplace(Args&&... args);"},
{"lineNum":"  108","line":"    template <class... Args>"},
{"lineNum":"  109","line":"        iterator emplace_hint(const_iterator position, Args&&... args);"},
{"lineNum":"  110","line":"    pair<iterator, bool> insert(const value_type& obj);"},
{"lineNum":"  111","line":"    pair<iterator, bool> insert(value_type&& obj);"},
{"lineNum":"  112","line":"    iterator insert(const_iterator hint, const value_type& obj);"},
{"lineNum":"  113","line":"    iterator insert(const_iterator hint, value_type&& obj);"},
{"lineNum":"  114","line":"    template <class InputIterator>"},
{"lineNum":"  115","line":"        void insert(InputIterator first, InputIterator last);"},
{"lineNum":"  116","line":"    void insert(initializer_list<value_type>);"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"    node_type extract(const_iterator position);                       // C++17"},
{"lineNum":"  119","line":"    node_type extract(const key_type& x);                             // C++17"},
{"lineNum":"  120","line":"    insert_return_type insert(node_type&& nh);                        // C++17"},
{"lineNum":"  121","line":"    iterator           insert(const_iterator hint, node_type&& nh);   // C++17"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"    iterator erase(const_iterator position);"},
{"lineNum":"  124","line":"    iterator erase(iterator position);  // C++14"},
{"lineNum":"  125","line":"    size_type erase(const key_type& k);"},
{"lineNum":"  126","line":"    iterator erase(const_iterator first, const_iterator last);"},
{"lineNum":"  127","line":"    void clear() noexcept;"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"    template<class H2, class P2>"},
{"lineNum":"  130","line":"      void merge(unordered_set<Key, H2, P2, Allocator>& source);         // C++17"},
{"lineNum":"  131","line":"    template<class H2, class P2>"},
{"lineNum":"  132","line":"      void merge(unordered_set<Key, H2, P2, Allocator>&& source);        // C++17"},
{"lineNum":"  133","line":"    template<class H2, class P2>"},
{"lineNum":"  134","line":"      void merge(unordered_multiset<Key, H2, P2, Allocator>& source);    // C++17"},
{"lineNum":"  135","line":"    template<class H2, class P2>"},
{"lineNum":"  136","line":"      void merge(unordered_multiset<Key, H2, P2, Allocator>&& source);   // C++17"},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"    void swap(unordered_set&)"},
{"lineNum":"  139","line":"       noexcept(allocator_traits<Allocator>::is_always_equal::value &&"},
{"lineNum":"  140","line":"                 noexcept(swap(declval<hasher&>(), declval<hasher&>())) &&"},
{"lineNum":"  141","line":"                 noexcept(swap(declval<key_equal&>(), declval<key_equal&>()))); // C++17"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"    hasher hash_function() const;"},
{"lineNum":"  144","line":"    key_equal key_eq() const;"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"    iterator       find(const key_type& k);"},
{"lineNum":"  147","line":"    const_iterator find(const key_type& k) const;"},
{"lineNum":"  148","line":"    template<typename K>"},
{"lineNum":"  149","line":"        iterator find(const K& x);              // C++20"},
{"lineNum":"  150","line":"    template<typename K>"},
{"lineNum":"  151","line":"        const_iterator find(const K& x) const;  // C++20"},
{"lineNum":"  152","line":"    size_type count(const key_type& k) const;"},
{"lineNum":"  153","line":"    template<typename K>"},
{"lineNum":"  154","line":"        size_type count(const K& k) const; // C++20"},
{"lineNum":"  155","line":"    bool contains(const key_type& k) const; // C++20"},
{"lineNum":"  156","line":"    template<typename K>"},
{"lineNum":"  157","line":"        bool contains(const K& k) const; // C++20"},
{"lineNum":"  158","line":"    pair<iterator, iterator>             equal_range(const key_type& k);"},
{"lineNum":"  159","line":"    pair<const_iterator, const_iterator> equal_range(const key_type& k) const;"},
{"lineNum":"  160","line":"    template<typename K>"},
{"lineNum":"  161","line":"        pair<iterator, iterator>             equal_range(const K& k); // C++20"},
{"lineNum":"  162","line":"    template<typename K>"},
{"lineNum":"  163","line":"        pair<const_iterator, const_iterator> equal_range(const K& k) const; // C++20"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"    size_type bucket_count() const noexcept;"},
{"lineNum":"  166","line":"    size_type max_bucket_count() const noexcept;"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"    size_type bucket_size(size_type n) const;"},
{"lineNum":"  169","line":"    size_type bucket(const key_type& k) const;"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"    local_iterator       begin(size_type n);"},
{"lineNum":"  172","line":"    local_iterator       end(size_type n);"},
{"lineNum":"  173","line":"    const_local_iterator begin(size_type n) const;"},
{"lineNum":"  174","line":"    const_local_iterator end(size_type n) const;"},
{"lineNum":"  175","line":"    const_local_iterator cbegin(size_type n) const;"},
{"lineNum":"  176","line":"    const_local_iterator cend(size_type n) const;"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"    float load_factor() const noexcept;"},
{"lineNum":"  179","line":"    float max_load_factor() const noexcept;"},
{"lineNum":"  180","line":"    void max_load_factor(float z);"},
{"lineNum":"  181","line":"    void rehash(size_type n);"},
{"lineNum":"  182","line":"    void reserve(size_type n);"},
{"lineNum":"  183","line":"};"},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"template <class Value, class Hash, class Pred, class Alloc>"},
{"lineNum":"  186","line":"    void swap(unordered_set<Value, Hash, Pred, Alloc>& x,"},
{"lineNum":"  187","line":"              unordered_set<Value, Hash, Pred, Alloc>& y)"},
{"lineNum":"  188","line":"              noexcept(noexcept(x.swap(y)));"},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"template <class Value, class Hash, class Pred, class Alloc>"},
{"lineNum":"  191","line":"    bool"},
{"lineNum":"  192","line":"    operator==(const unordered_set<Value, Hash, Pred, Alloc>& x,"},
{"lineNum":"  193","line":"               const unordered_set<Value, Hash, Pred, Alloc>& y);"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"template <class Value, class Hash, class Pred, class Alloc>"},
{"lineNum":"  196","line":"    bool"},
{"lineNum":"  197","line":"    operator!=(const unordered_set<Value, Hash, Pred, Alloc>& x,"},
{"lineNum":"  198","line":"               const unordered_set<Value, Hash, Pred, Alloc>& y);"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"template <class Value, class Hash = hash<Value>, class Pred = equal_to<Value>,"},
{"lineNum":"  201","line":"          class Alloc = allocator<Value>>"},
{"lineNum":"  202","line":"class unordered_multiset"},
{"lineNum":"  203","line":"{"},
{"lineNum":"  204","line":"public:"},
{"lineNum":"  205","line":"    // types"},
{"lineNum":"  206","line":"    typedef Value                                                      key_type;"},
{"lineNum":"  207","line":"    typedef key_type                                                   value_type;"},
{"lineNum":"  208","line":"    typedef Hash                                                       hasher;"},
{"lineNum":"  209","line":"    typedef Pred                                                       key_equal;"},
{"lineNum":"  210","line":"    typedef Alloc                                                      allocator_type;"},
{"lineNum":"  211","line":"    typedef value_type&                                                reference;"},
{"lineNum":"  212","line":"    typedef const value_type&                                          const_reference;"},
{"lineNum":"  213","line":"    typedef typename allocator_traits<allocator_type>::pointer         pointer;"},
{"lineNum":"  214","line":"    typedef typename allocator_traits<allocator_type>::const_pointer   const_pointer;"},
{"lineNum":"  215","line":"    typedef typename allocator_traits<allocator_type>::size_type       size_type;"},
{"lineNum":"  216","line":"    typedef typename allocator_traits<allocator_type>::difference_type difference_type;"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"    typedef /unspecified/ iterator;"},
{"lineNum":"  219","line":"    typedef /unspecified/ const_iterator;"},
{"lineNum":"  220","line":"    typedef /unspecified/ local_iterator;"},
{"lineNum":"  221","line":"    typedef /unspecified/ const_local_iterator;"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"    typedef unspecified node_type unspecified;   // C++17"},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"    unordered_multiset()"},
{"lineNum":"  226","line":"        noexcept("},
{"lineNum":"  227","line":"            is_nothrow_default_constructible<hasher>::value &&"},
{"lineNum":"  228","line":"            is_nothrow_default_constructible<key_equal>::value &&"},
{"lineNum":"  229","line":"            is_nothrow_default_constructible<allocator_type>::value);"},
{"lineNum":"  230","line":"    explicit unordered_multiset(size_type n, const hasher& hf = hasher(),"},
{"lineNum":"  231","line":"                           const key_equal& eql = key_equal(),"},
{"lineNum":"  232","line":"                           const allocator_type& a = allocator_type());"},
{"lineNum":"  233","line":"    template <class InputIterator>"},
{"lineNum":"  234","line":"        unordered_multiset(InputIterator f, InputIterator l,"},
{"lineNum":"  235","line":"                      size_type n = 0, const hasher& hf = hasher(),"},
{"lineNum":"  236","line":"                      const key_equal& eql = key_equal(),"},
{"lineNum":"  237","line":"                      const allocator_type& a = allocator_type());"},
{"lineNum":"  238","line":"    explicit unordered_multiset(const allocator_type&);"},
{"lineNum":"  239","line":"    unordered_multiset(const unordered_multiset&);"},
{"lineNum":"  240","line":"    unordered_multiset(const unordered_multiset&, const Allocator&);"},
{"lineNum":"  241","line":"    unordered_multiset(unordered_multiset&&)"},
{"lineNum":"  242","line":"        noexcept("},
{"lineNum":"  243","line":"            is_nothrow_move_constructible<hasher>::value &&"},
{"lineNum":"  244","line":"            is_nothrow_move_constructible<key_equal>::value &&"},
{"lineNum":"  245","line":"            is_nothrow_move_constructible<allocator_type>::value);"},
{"lineNum":"  246","line":"    unordered_multiset(unordered_multiset&&, const Allocator&);"},
{"lineNum":"  247","line":"    unordered_multiset(initializer_list<value_type>, size_type n = /see below/,"},
{"lineNum":"  248","line":"                  const hasher& hf = hasher(), const key_equal& eql = key_equal(),"},
{"lineNum":"  249","line":"                  const allocator_type& a = allocator_type());"},
{"lineNum":"  250","line":"    unordered_multiset(size_type n, const allocator_type& a); // C++14"},
{"lineNum":"  251","line":"    unordered_multiset(size_type n, const hasher& hf, const allocator_type& a); // C++14"},
{"lineNum":"  252","line":"    template <class InputIterator>"},
{"lineNum":"  253","line":"      unordered_multiset(InputIterator f, InputIterator l, size_type n, const allocator_type& a); // C++14"},
{"lineNum":"  254","line":"    template <class InputIterator>"},
{"lineNum":"  255","line":"      unordered_multiset(InputIterator f, InputIterator l, size_type n,"},
{"lineNum":"  256","line":"                         const hasher& hf, const allocator_type& a); // C++14"},
{"lineNum":"  257","line":"    unordered_multiset(initializer_list<value_type> il, size_type n, const allocator_type& a); // C++14"},
{"lineNum":"  258","line":"    unordered_multiset(initializer_list<value_type> il, size_type n,"},
{"lineNum":"  259","line":"                       const hasher& hf,  const allocator_type& a); // C++14"},
{"lineNum":"  260","line":"    ~unordered_multiset();"},
{"lineNum":"  261","line":"    unordered_multiset& operator=(const unordered_multiset&);"},
{"lineNum":"  262","line":"    unordered_multiset& operator=(unordered_multiset&&)"},
{"lineNum":"  263","line":"        noexcept("},
{"lineNum":"  264","line":"            allocator_type::propagate_on_container_move_assignment::value &&"},
{"lineNum":"  265","line":"            is_nothrow_move_assignable<allocator_type>::value &&"},
{"lineNum":"  266","line":"            is_nothrow_move_assignable<hasher>::value &&"},
{"lineNum":"  267","line":"            is_nothrow_move_assignable<key_equal>::value);"},
{"lineNum":"  268","line":"    unordered_multiset& operator=(initializer_list<value_type>);"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"    allocator_type get_allocator() const noexcept;"},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"    bool      empty() const noexcept;"},
{"lineNum":"  273","line":"    size_type size() const noexcept;"},
{"lineNum":"  274","line":"    size_type max_size() const noexcept;"},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"    iterator       begin() noexcept;"},
{"lineNum":"  277","line":"    iterator       end() noexcept;"},
{"lineNum":"  278","line":"    const_iterator begin()  const noexcept;"},
{"lineNum":"  279","line":"    const_iterator end()    const noexcept;"},
{"lineNum":"  280","line":"    const_iterator cbegin() const noexcept;"},
{"lineNum":"  281","line":"    const_iterator cend()   const noexcept;"},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"    template <class... Args>"},
{"lineNum":"  284","line":"        iterator emplace(Args&&... args);"},
{"lineNum":"  285","line":"    template <class... Args>"},
{"lineNum":"  286","line":"        iterator emplace_hint(const_iterator position, Args&&... args);"},
{"lineNum":"  287","line":"    iterator insert(const value_type& obj);"},
{"lineNum":"  288","line":"    iterator insert(value_type&& obj);"},
{"lineNum":"  289","line":"    iterator insert(const_iterator hint, const value_type& obj);"},
{"lineNum":"  290","line":"    iterator insert(const_iterator hint, value_type&& obj);"},
{"lineNum":"  291","line":"    template <class InputIterator>"},
{"lineNum":"  292","line":"        void insert(InputIterator first, InputIterator last);"},
{"lineNum":"  293","line":"    void insert(initializer_list<value_type>);"},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":"    node_type extract(const_iterator position);             // C++17"},
{"lineNum":"  296","line":"    node_type extract(const key_type& x);                   // C++17"},
{"lineNum":"  297","line":"    iterator insert(node_type&& nh);                        // C++17"},
{"lineNum":"  298","line":"    iterator insert(const_iterator hint, node_type&& nh);   // C++17"},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"    iterator erase(const_iterator position);"},
{"lineNum":"  301","line":"    iterator erase(iterator position);  // C++14"},
{"lineNum":"  302","line":"    size_type erase(const key_type& k);"},
{"lineNum":"  303","line":"    iterator erase(const_iterator first, const_iterator last);"},
{"lineNum":"  304","line":"    void clear() noexcept;"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"    template<class H2, class P2>"},
{"lineNum":"  307","line":"      void merge(unordered_multiset<Key, H2, P2, Allocator>& source);    // C++17"},
{"lineNum":"  308","line":"    template<class H2, class P2>"},
{"lineNum":"  309","line":"      void merge(unordered_multiset<Key, H2, P2, Allocator>&& source);   // C++17"},
{"lineNum":"  310","line":"    template<class H2, class P2>"},
{"lineNum":"  311","line":"      void merge(unordered_set<Key, H2, P2, Allocator>& source);         // C++17"},
{"lineNum":"  312","line":"    template<class H2, class P2>"},
{"lineNum":"  313","line":"      void merge(unordered_set<Key, H2, P2, Allocator>&& source);        // C++17"},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"    void swap(unordered_multiset&)"},
{"lineNum":"  316","line":"       noexcept(allocator_traits<Allocator>::is_always_equal::value &&"},
{"lineNum":"  317","line":"                 noexcept(swap(declval<hasher&>(), declval<hasher&>())) &&"},
{"lineNum":"  318","line":"                 noexcept(swap(declval<key_equal&>(), declval<key_equal&>()))); // C++17"},
{"lineNum":"  319","line":""},
{"lineNum":"  320","line":"    hasher hash_function() const;"},
{"lineNum":"  321","line":"    key_equal key_eq() const;"},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"    iterator       find(const key_type& k);"},
{"lineNum":"  324","line":"    const_iterator find(const key_type& k) const;"},
{"lineNum":"  325","line":"    template<typename K>"},
{"lineNum":"  326","line":"        iterator find(const K& x);              // C++20"},
{"lineNum":"  327","line":"    template<typename K>"},
{"lineNum":"  328","line":"        const_iterator find(const K& x) const;  // C++20"},
{"lineNum":"  329","line":"    size_type count(const key_type& k) const;"},
{"lineNum":"  330","line":"    template<typename K>"},
{"lineNum":"  331","line":"        size_type count(const K& k) const; // C++20"},
{"lineNum":"  332","line":"    bool contains(const key_type& k) const; // C++20"},
{"lineNum":"  333","line":"    template<typename K>"},
{"lineNum":"  334","line":"        bool contains(const K& k) const; // C++20"},
{"lineNum":"  335","line":"    pair<iterator, iterator>             equal_range(const key_type& k);"},
{"lineNum":"  336","line":"    pair<const_iterator, const_iterator> equal_range(const key_type& k) const;"},
{"lineNum":"  337","line":"    template<typename K>"},
{"lineNum":"  338","line":"        pair<iterator, iterator>             equal_range(const K& k); // C++20"},
{"lineNum":"  339","line":"    template<typename K>"},
{"lineNum":"  340","line":"        pair<const_iterator, const_iterator> equal_range(const K& k) const; // C++20"},
{"lineNum":"  341","line":""},
{"lineNum":"  342","line":"    size_type bucket_count() const noexcept;"},
{"lineNum":"  343","line":"    size_type max_bucket_count() const noexcept;"},
{"lineNum":"  344","line":""},
{"lineNum":"  345","line":"    size_type bucket_size(size_type n) const;"},
{"lineNum":"  346","line":"    size_type bucket(const key_type& k) const;"},
{"lineNum":"  347","line":""},
{"lineNum":"  348","line":"    local_iterator       begin(size_type n);"},
{"lineNum":"  349","line":"    local_iterator       end(size_type n);"},
{"lineNum":"  350","line":"    const_local_iterator begin(size_type n) const;"},
{"lineNum":"  351","line":"    const_local_iterator end(size_type n) const;"},
{"lineNum":"  352","line":"    const_local_iterator cbegin(size_type n) const;"},
{"lineNum":"  353","line":"    const_local_iterator cend(size_type n) const;"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"    float load_factor() const noexcept;"},
{"lineNum":"  356","line":"    float max_load_factor() const noexcept;"},
{"lineNum":"  357","line":"    void max_load_factor(float z);"},
{"lineNum":"  358","line":"    void rehash(size_type n);"},
{"lineNum":"  359","line":"    void reserve(size_type n);"},
{"lineNum":"  360","line":"};"},
{"lineNum":"  361","line":""},
{"lineNum":"  362","line":"template <class Value, class Hash, class Pred, class Alloc>"},
{"lineNum":"  363","line":"    void swap(unordered_multiset<Value, Hash, Pred, Alloc>& x,"},
{"lineNum":"  364","line":"              unordered_multiset<Value, Hash, Pred, Alloc>& y)"},
{"lineNum":"  365","line":"              noexcept(noexcept(x.swap(y)));"},
{"lineNum":"  366","line":""},
{"lineNum":"  367","line":"template <class K, class T, class H, class P, class A, class Predicate>"},
{"lineNum":"  368","line":"    typename unordered_set<K, T, H, P, A>::size_type"},
{"lineNum":"  369","line":"    erase_if(unordered_set<K, T, H, P, A>& c, Predicate pred);       // C++20"},
{"lineNum":"  370","line":""},
{"lineNum":"  371","line":"template <class K, class T, class H, class P, class A, class Predicate>"},
{"lineNum":"  372","line":"    typename unordered_multiset<K, T, H, P, A>::size_type"},
{"lineNum":"  373","line":"    erase_if(unordered_multiset<K, T, H, P, A>& c, Predicate pred);  // C++20"},
{"lineNum":"  374","line":""},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"template <class Value, class Hash, class Pred, class Alloc>"},
{"lineNum":"  377","line":"    bool"},
{"lineNum":"  378","line":"    operator==(const unordered_multiset<Value, Hash, Pred, Alloc>& x,"},
{"lineNum":"  379","line":"               const unordered_multiset<Value, Hash, Pred, Alloc>& y);"},
{"lineNum":"  380","line":""},
{"lineNum":"  381","line":"template <class Value, class Hash, class Pred, class Alloc>"},
{"lineNum":"  382","line":"    bool"},
{"lineNum":"  383","line":"    operator!=(const unordered_multiset<Value, Hash, Pred, Alloc>& x,"},
{"lineNum":"  384","line":"               const unordered_multiset<Value, Hash, Pred, Alloc>& y);"},
{"lineNum":"  385","line":"}  // std"},
{"lineNum":"  386","line":""},
{"lineNum":"  387","line":"*/"},
{"lineNum":"  388","line":""},
{"lineNum":"  389","line":"#include <__config>"},
{"lineNum":"  390","line":"#include <__debug>"},
{"lineNum":"  391","line":"#include <__functional/is_transparent.h>"},
{"lineNum":"  392","line":"#include <__hash_table>"},
{"lineNum":"  393","line":"#include <__node_handle>"},
{"lineNum":"  394","line":"#include <__utility/forward.h>"},
{"lineNum":"  395","line":"#include <compare>"},
{"lineNum":"  396","line":"#include <functional>"},
{"lineNum":"  397","line":"#include <iterator> // __libcpp_erase_if_container"},
{"lineNum":"  398","line":"#include <version>"},
{"lineNum":"  399","line":""},
{"lineNum":"  400","line":"#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"},
{"lineNum":"  401","line":"#pragma GCC system_header"},
{"lineNum":"  402","line":"#endif"},
{"lineNum":"  403","line":""},
{"lineNum":"  404","line":"_LIBCPP_BEGIN_NAMESPACE_STD"},
{"lineNum":"  405","line":""},
{"lineNum":"  406","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":"  407","line":"class unordered_multiset;"},
{"lineNum":"  408","line":""},
{"lineNum":"  409","line":"template <class _Value, class _Hash = hash<_Value>, class _Pred = equal_to<_Value>,"},
{"lineNum":"  410","line":"          class _Alloc = allocator<_Value> >"},
{"lineNum":"  411","line":"class _LIBCPP_TEMPLATE_VIS unordered_set"},
{"lineNum":"  412","line":"{"},
{"lineNum":"  413","line":"public:"},
{"lineNum":"  414","line":"    // types"},
{"lineNum":"  415","line":"    typedef _Value                                                     key_type;"},
{"lineNum":"  416","line":"    typedef key_type                                                   value_type;"},
{"lineNum":"  417","line":"    typedef __identity_t<_Hash>                                        hasher;"},
{"lineNum":"  418","line":"    typedef __identity_t<_Pred>                                        key_equal;"},
{"lineNum":"  419","line":"    typedef __identity_t<_Alloc>                                       allocator_type;"},
{"lineNum":"  420","line":"    typedef value_type&                                                reference;"},
{"lineNum":"  421","line":"    typedef const value_type&                                          const_reference;"},
{"lineNum":"  422","line":"    static_assert((is_same<value_type, typename allocator_type::value_type>::value),"},
{"lineNum":"  423","line":"                  \"Invalid allocator::value_type\");"},
{"lineNum":"  424","line":""},
{"lineNum":"  425","line":"private:"},
{"lineNum":"  426","line":"    typedef __hash_table<value_type, hasher, key_equal, allocator_type> __table;"},
{"lineNum":"  427","line":""},
{"lineNum":"  428","line":"    __table __table_;"},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":"public:"},
{"lineNum":"  431","line":"    typedef typename __table::pointer         pointer;"},
{"lineNum":"  432","line":"    typedef typename __table::const_pointer   const_pointer;"},
{"lineNum":"  433","line":"    typedef typename __table::size_type       size_type;"},
{"lineNum":"  434","line":"    typedef typename __table::difference_type difference_type;"},
{"lineNum":"  435","line":""},
{"lineNum":"  436","line":"    typedef typename __table::const_iterator       iterator;"},
{"lineNum":"  437","line":"    typedef typename __table::const_iterator       const_iterator;"},
{"lineNum":"  438","line":"    typedef typename __table::const_local_iterator local_iterator;"},
{"lineNum":"  439","line":"    typedef typename __table::const_local_iterator const_local_iterator;"},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":"  442","line":"    typedef __set_node_handle<typename __table::__node, allocator_type> node_type;"},
{"lineNum":"  443","line":"    typedef __insert_return_type<iterator, node_type> insert_return_type;"},
{"lineNum":"  444","line":"#endif"},
{"lineNum":"  445","line":""},
{"lineNum":"  446","line":"    template <class _Value2, class _Hash2, class _Pred2, class _Alloc2>"},
{"lineNum":"  447","line":"        friend class _LIBCPP_TEMPLATE_VIS unordered_set;"},
{"lineNum":"  448","line":"    template <class _Value2, class _Hash2, class _Pred2, class _Alloc2>"},
{"lineNum":"  449","line":"        friend class _LIBCPP_TEMPLATE_VIS unordered_multiset;"},
{"lineNum":"  450","line":""},
{"lineNum":"  451","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  452","line":"    unordered_set()"},
{"lineNum":"  453","line":"        _NOEXCEPT_(is_nothrow_default_constructible<__table>::value)"},
{"lineNum":"  454","line":"        {","class":"lineCov","hits":"1","order":"243","possible_hits":"1",},
{"lineNum":"  455","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  456","line":"            __get_db()->__insert_c(this);"},
{"lineNum":"  457","line":"#endif"},
{"lineNum":"  458","line":"        }","class":"linePartCov","hits":"1","order":"244","possible_hits":"2",},
{"lineNum":"  459","line":"    explicit unordered_set(size_type __n, const hasher& __hf = hasher(),"},
{"lineNum":"  460","line":"                           const key_equal& __eql = key_equal());"},
{"lineNum":"  461","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":"  462","line":"    inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  463","line":"    unordered_set(size_type __n, const allocator_type& __a)"},
{"lineNum":"  464","line":"        : unordered_set(__n, hasher(), key_equal(), __a) {}"},
{"lineNum":"  465","line":"    inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  466","line":"    unordered_set(size_type __n, const hasher& __hf, const allocator_type& __a)"},
{"lineNum":"  467","line":"        : unordered_set(__n, __hf, key_equal(), __a) {}"},
{"lineNum":"  468","line":"#endif"},
{"lineNum":"  469","line":"    unordered_set(size_type __n, const hasher& __hf, const key_equal& __eql,"},
{"lineNum":"  470","line":"                  const allocator_type& __a);"},
{"lineNum":"  471","line":"    template <class _InputIterator>"},
{"lineNum":"  472","line":"        unordered_set(_InputIterator __first, _InputIterator __last);"},
{"lineNum":"  473","line":"    template <class _InputIterator>"},
{"lineNum":"  474","line":"        unordered_set(_InputIterator __first, _InputIterator __last,"},
{"lineNum":"  475","line":"                      size_type __n, const hasher& __hf = hasher(),"},
{"lineNum":"  476","line":"                      const key_equal& __eql = key_equal());"},
{"lineNum":"  477","line":"    template <class _InputIterator>"},
{"lineNum":"  478","line":"        unordered_set(_InputIterator __first, _InputIterator __last,"},
{"lineNum":"  479","line":"                      size_type __n, const hasher& __hf, const key_equal& __eql,"},
{"lineNum":"  480","line":"                      const allocator_type& __a);"},
{"lineNum":"  481","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":"  482","line":"    template <class _InputIterator>"},
{"lineNum":"  483","line":"    inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  484","line":"        unordered_set(_InputIterator __first, _InputIterator __last,"},
{"lineNum":"  485","line":"                    size_type __n, const allocator_type& __a)"},
{"lineNum":"  486","line":"            : unordered_set(__first, __last, __n, hasher(), key_equal(), __a) {}"},
{"lineNum":"  487","line":"    template <class _InputIterator>"},
{"lineNum":"  488","line":"        unordered_set(_InputIterator __first, _InputIterator __last,"},
{"lineNum":"  489","line":"                      size_type __n, const hasher& __hf, const allocator_type& __a)"},
{"lineNum":"  490","line":"            : unordered_set(__first, __last, __n, __hf, key_equal(), __a) {}"},
{"lineNum":"  491","line":"#endif"},
{"lineNum":"  492","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  493","line":"    explicit unordered_set(const allocator_type& __a);"},
{"lineNum":"  494","line":"    unordered_set(const unordered_set& __u);"},
{"lineNum":"  495","line":"    unordered_set(const unordered_set& __u, const allocator_type& __a);"},
{"lineNum":"  496","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  497","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  498","line":"    unordered_set(unordered_set&& __u)"},
{"lineNum":"  499","line":"        _NOEXCEPT_(is_nothrow_move_constructible<__table>::value);"},
{"lineNum":"  500","line":"    unordered_set(unordered_set&& __u, const allocator_type& __a);"},
{"lineNum":"  501","line":"    unordered_set(initializer_list<value_type> __il);"},
{"lineNum":"  502","line":"    unordered_set(initializer_list<value_type> __il, size_type __n,"},
{"lineNum":"  503","line":"                  const hasher& __hf = hasher(),"},
{"lineNum":"  504","line":"                  const key_equal& __eql = key_equal());"},
{"lineNum":"  505","line":"    unordered_set(initializer_list<value_type> __il, size_type __n,"},
{"lineNum":"  506","line":"                  const hasher& __hf, const key_equal& __eql,"},
{"lineNum":"  507","line":"                  const allocator_type& __a);"},
{"lineNum":"  508","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":"  509","line":"    inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  510","line":"    unordered_set(initializer_list<value_type> __il, size_type __n,"},
{"lineNum":"  511","line":"                                                      const allocator_type& __a)"},
{"lineNum":"  512","line":"        : unordered_set(__il, __n, hasher(), key_equal(), __a) {}"},
{"lineNum":"  513","line":"    inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  514","line":"    unordered_set(initializer_list<value_type> __il, size_type __n,"},
{"lineNum":"  515","line":"                                  const hasher& __hf, const allocator_type& __a)"},
{"lineNum":"  516","line":"        : unordered_set(__il, __n, __hf, key_equal(), __a) {}"},
{"lineNum":"  517","line":"#endif"},
{"lineNum":"  518","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":"  519","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  520","line":"    ~unordered_set() {"},
{"lineNum":"  521","line":"        static_assert(sizeof(__diagnose_unordered_container_requirements<_Value, _Hash, _Pred>(0)), \"\");"},
{"lineNum":"  522","line":"    }","class":"linePartCov","hits":"11","order":"357","possible_hits":"23",},
{"lineNum":"  523","line":""},
{"lineNum":"  524","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  525","line":"    unordered_set& operator=(const unordered_set& __u)"},
{"lineNum":"  526","line":"    {"},
{"lineNum":"  527","line":"        __table_ = __u.__table_;"},
{"lineNum":"  528","line":"        return *this;"},
{"lineNum":"  529","line":"    }"},
{"lineNum":"  530","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  531","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  532","line":"    unordered_set& operator=(unordered_set&& __u)"},
{"lineNum":"  533","line":"        _NOEXCEPT_(is_nothrow_move_assignable<__table>::value);"},
{"lineNum":"  534","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  535","line":"    unordered_set& operator=(initializer_list<value_type> __il);"},
{"lineNum":"  536","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":"  537","line":""},
{"lineNum":"  538","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  539","line":"    allocator_type get_allocator() const _NOEXCEPT"},
{"lineNum":"  540","line":"        {return allocator_type(__table_.__node_alloc());}"},
{"lineNum":"  541","line":""},
{"lineNum":"  542","line":"    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  543","line":"    bool      empty() const _NOEXCEPT {return __table_.size() == 0;}"},
{"lineNum":"  544","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  545","line":"    size_type size() const _NOEXCEPT  {return __table_.size();}"},
{"lineNum":"  546","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  547","line":"    size_type max_size() const _NOEXCEPT {return __table_.max_size();}"},
{"lineNum":"  548","line":""},
{"lineNum":"  549","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  550","line":"    iterator       begin() _NOEXCEPT        {return __table_.begin();}"},
{"lineNum":"  551","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  552","line":"    iterator       end() _NOEXCEPT          {return __table_.end();}"},
{"lineNum":"  553","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  554","line":"    const_iterator begin()  const _NOEXCEPT {return __table_.begin();}"},
{"lineNum":"  555","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  556","line":"    const_iterator end()    const _NOEXCEPT {return __table_.end();}"},
{"lineNum":"  557","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  558","line":"    const_iterator cbegin() const _NOEXCEPT {return __table_.begin();}"},
{"lineNum":"  559","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  560","line":"    const_iterator cend()   const _NOEXCEPT {return __table_.end();}"},
{"lineNum":"  561","line":""},
{"lineNum":"  562","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  563","line":"    template <class... _Args>"},
{"lineNum":"  564","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  565","line":"        pair<iterator, bool> emplace(_Args&&... __args)"},
{"lineNum":"  566","line":"            {return __table_.__emplace_unique(_VSTD::forward<_Args>(__args)...);}"},
{"lineNum":"  567","line":"    template <class... _Args>"},
{"lineNum":"  568","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  569","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  570","line":"        iterator emplace_hint(const_iterator __p, _Args&&... __args)"},
{"lineNum":"  571","line":"        {"},
{"lineNum":"  572","line":"            _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__p) == this,"},
{"lineNum":"  573","line":"                \"unordered_set::emplace_hint(const_iterator, args...) called with an iterator not\""},
{"lineNum":"  574","line":"                \" referring to this unordered_set\");"},
{"lineNum":"  575","line":"            return __table_.__emplace_unique(_VSTD::forward<_Args>(__args)...).first;"},
{"lineNum":"  576","line":"        }"},
{"lineNum":"  577","line":"#else"},
{"lineNum":"  578","line":"        iterator emplace_hint(const_iterator, _Args&&... __args)"},
{"lineNum":"  579","line":"            {return __table_.__emplace_unique(_VSTD::forward<_Args>(__args)...).first;}"},
{"lineNum":"  580","line":"#endif"},
{"lineNum":"  581","line":""},
{"lineNum":"  582","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  583","line":"    pair<iterator, bool> insert(value_type&& __x)"},
{"lineNum":"  584","line":"        {return __table_.__insert_unique(_VSTD::move(__x));}"},
{"lineNum":"  585","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  586","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  587","line":"    iterator insert(const_iterator __p, value_type&& __x)"},
{"lineNum":"  588","line":"        {"},
{"lineNum":"  589","line":"            _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__p) == this,"},
{"lineNum":"  590","line":"                \"unordered_set::insert(const_iterator, value_type&&) called with an iterator not\""},
{"lineNum":"  591","line":"                \" referring to this unordered_set\");"},
{"lineNum":"  592","line":"            return insert(_VSTD::move(__x)).first;"},
{"lineNum":"  593","line":"        }"},
{"lineNum":"  594","line":"#else"},
{"lineNum":"  595","line":"    iterator insert(const_iterator, value_type&& __x)"},
{"lineNum":"  596","line":"        {return insert(_VSTD::move(__x)).first;}"},
{"lineNum":"  597","line":"#endif"},
{"lineNum":"  598","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  599","line":"    void insert(initializer_list<value_type> __il)"},
{"lineNum":"  600","line":"        {insert(__il.begin(), __il.end());}"},
{"lineNum":"  601","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":"  602","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  603","line":"    pair<iterator, bool> insert(const value_type& __x)"},
{"lineNum":"  604","line":"        {return __table_.__insert_unique(__x);}"},
{"lineNum":"  605","line":""},
{"lineNum":"  606","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  607","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  608","line":"    iterator insert(const_iterator __p, const value_type& __x)"},
{"lineNum":"  609","line":"        {"},
{"lineNum":"  610","line":"            _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__p) == this,"},
{"lineNum":"  611","line":"                \"unordered_set::insert(const_iterator, const value_type&) called with an iterator not\""},
{"lineNum":"  612","line":"                \" referring to this unordered_set\");"},
{"lineNum":"  613","line":"            return insert(__x).first;"},
{"lineNum":"  614","line":"        }"},
{"lineNum":"  615","line":"#else"},
{"lineNum":"  616","line":"    iterator insert(const_iterator, const value_type& __x)"},
{"lineNum":"  617","line":"        {return insert(__x).first;}"},
{"lineNum":"  618","line":"#endif"},
{"lineNum":"  619","line":"    template <class _InputIterator>"},
{"lineNum":"  620","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  621","line":"        void insert(_InputIterator __first, _InputIterator __last);"},
{"lineNum":"  622","line":""},
{"lineNum":"  623","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  624","line":"    iterator erase(const_iterator __p) {return __table_.erase(__p);}"},
{"lineNum":"  625","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  626","line":"    size_type erase(const key_type& __k) {return __table_.__erase_unique(__k);}"},
{"lineNum":"  627","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  628","line":"    iterator erase(const_iterator __first, const_iterator __last)"},
{"lineNum":"  629","line":"        {return __table_.erase(__first, __last);}"},
{"lineNum":"  630","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  631","line":"    void clear() _NOEXCEPT {__table_.clear();}"},
{"lineNum":"  632","line":""},
{"lineNum":"  633","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":"  634","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  635","line":"    insert_return_type insert(node_type&& __nh)"},
{"lineNum":"  636","line":"    {"},
{"lineNum":"  637","line":"        _LIBCPP_ASSERT(__nh.empty() || __nh.get_allocator() == get_allocator(),"},
{"lineNum":"  638","line":"            \"node_type with incompatible allocator passed to unordered_set::insert()\");"},
{"lineNum":"  639","line":"        return __table_.template __node_handle_insert_unique<"},
{"lineNum":"  640","line":"            node_type, insert_return_type>(_VSTD::move(__nh));"},
{"lineNum":"  641","line":"    }"},
{"lineNum":"  642","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  643","line":"    iterator insert(const_iterator __h, node_type&& __nh)"},
{"lineNum":"  644","line":"    {"},
{"lineNum":"  645","line":"        _LIBCPP_ASSERT(__nh.empty() || __nh.get_allocator() == get_allocator(),"},
{"lineNum":"  646","line":"            \"node_type with incompatible allocator passed to unordered_set::insert()\");"},
{"lineNum":"  647","line":"        return __table_.template __node_handle_insert_unique<node_type>("},
{"lineNum":"  648","line":"            __h, _VSTD::move(__nh));"},
{"lineNum":"  649","line":"    }"},
{"lineNum":"  650","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  651","line":"    node_type extract(key_type const& __key)"},
{"lineNum":"  652","line":"    {"},
{"lineNum":"  653","line":"        return __table_.template __node_handle_extract<node_type>(__key);"},
{"lineNum":"  654","line":"    }"},
{"lineNum":"  655","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  656","line":"    node_type extract(const_iterator __it)"},
{"lineNum":"  657","line":"    {"},
{"lineNum":"  658","line":"        return __table_.template __node_handle_extract<node_type>(__it);"},
{"lineNum":"  659","line":"    }"},
{"lineNum":"  660","line":""},
{"lineNum":"  661","line":"    template<class _H2, class _P2>"},
{"lineNum":"  662","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  663","line":"    void merge(unordered_set<key_type, _H2, _P2, allocator_type>& __source)"},
{"lineNum":"  664","line":"    {"},
{"lineNum":"  665","line":"        _LIBCPP_ASSERT(__source.get_allocator() == get_allocator(),"},
{"lineNum":"  666","line":"                       \"merging container with incompatible allocator\");"},
{"lineNum":"  667","line":"        __table_.__node_handle_merge_unique(__source.__table_);"},
{"lineNum":"  668","line":"    }"},
{"lineNum":"  669","line":"    template<class _H2, class _P2>"},
{"lineNum":"  670","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  671","line":"    void merge(unordered_set<key_type, _H2, _P2, allocator_type>&& __source)"},
{"lineNum":"  672","line":"    {"},
{"lineNum":"  673","line":"        _LIBCPP_ASSERT(__source.get_allocator() == get_allocator(),"},
{"lineNum":"  674","line":"                       \"merging container with incompatible allocator\");"},
{"lineNum":"  675","line":"        __table_.__node_handle_merge_unique(__source.__table_);"},
{"lineNum":"  676","line":"    }"},
{"lineNum":"  677","line":"    template<class _H2, class _P2>"},
{"lineNum":"  678","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  679","line":"    void merge(unordered_multiset<key_type, _H2, _P2, allocator_type>& __source)"},
{"lineNum":"  680","line":"    {"},
{"lineNum":"  681","line":"        _LIBCPP_ASSERT(__source.get_allocator() == get_allocator(),"},
{"lineNum":"  682","line":"                       \"merging container with incompatible allocator\");"},
{"lineNum":"  683","line":"        __table_.__node_handle_merge_unique(__source.__table_);"},
{"lineNum":"  684","line":"    }"},
{"lineNum":"  685","line":"    template<class _H2, class _P2>"},
{"lineNum":"  686","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  687","line":"    void merge(unordered_multiset<key_type, _H2, _P2, allocator_type>&& __source)"},
{"lineNum":"  688","line":"    {"},
{"lineNum":"  689","line":"        _LIBCPP_ASSERT(__source.get_allocator() == get_allocator(),"},
{"lineNum":"  690","line":"                       \"merging container with incompatible allocator\");"},
{"lineNum":"  691","line":"        __table_.__node_handle_merge_unique(__source.__table_);"},
{"lineNum":"  692","line":"    }"},
{"lineNum":"  693","line":"#endif"},
{"lineNum":"  694","line":""},
{"lineNum":"  695","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  696","line":"    void swap(unordered_set& __u)"},
{"lineNum":"  697","line":"        _NOEXCEPT_(__is_nothrow_swappable<__table>::value)"},
{"lineNum":"  698","line":"        {__table_.swap(__u.__table_);}"},
{"lineNum":"  699","line":""},
{"lineNum":"  700","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  701","line":"    hasher hash_function() const {return __table_.hash_function();}"},
{"lineNum":"  702","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  703","line":"    key_equal key_eq() const {return __table_.key_eq();}"},
{"lineNum":"  704","line":""},
{"lineNum":"  705","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  706","line":"    iterator       find(const key_type& __k)       {return __table_.find(__k);}"},
{"lineNum":"  707","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  708","line":"    const_iterator find(const key_type& __k) const {return __table_.find(__k);}"},
{"lineNum":"  709","line":"    #if _LIBCPP_STD_VER > 17"},
{"lineNum":"  710","line":"        template <typename _K2>"},
{"lineNum":"  711","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  712","line":"        _EnableIf<__is_transparent<hasher, _K2>::value && __is_transparent<key_equal, _K2>::value, iterator>"},
{"lineNum":"  713","line":"        find(const _K2& __k)       {return __table_.find(__k);}"},
{"lineNum":"  714","line":"        template <typename _K2>"},
{"lineNum":"  715","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  716","line":"        _EnableIf<__is_transparent<hasher, _K2>::value && __is_transparent<key_equal, _K2>::value, const_iterator>"},
{"lineNum":"  717","line":"        find(const _K2& __k) const {return __table_.find(__k);}"},
{"lineNum":"  718","line":"    #endif // _LIBCPP_STD_VER > 17"},
{"lineNum":"  719","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  720","line":"    size_type count(const key_type& __k) const {return __table_.__count_unique(__k);}"},
{"lineNum":"  721","line":"    #if _LIBCPP_STD_VER > 17"},
{"lineNum":"  722","line":"        template <typename _K2>"},
{"lineNum":"  723","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  724","line":"        _EnableIf<__is_transparent<hasher, _K2>::value && __is_transparent<key_equal, _K2>::value, size_type>"},
{"lineNum":"  725","line":"        count(const _K2& __k) const {return __table_.__count_unique(__k);}"},
{"lineNum":"  726","line":"    #endif // _LIBCPP_STD_VER > 17"},
{"lineNum":"  727","line":"    #if _LIBCPP_STD_VER > 17"},
{"lineNum":"  728","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  729","line":"        bool contains(const key_type& __k) const {return find(__k) != end();}"},
{"lineNum":"  730","line":""},
{"lineNum":"  731","line":"        template <typename _K2>"},
{"lineNum":"  732","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  733","line":"        _EnableIf<__is_transparent<hasher, _K2>::value && __is_transparent<key_equal, _K2>::value, bool>"},
{"lineNum":"  734","line":"        contains(const _K2& __k) const {return find(__k) != end();}"},
{"lineNum":"  735","line":"    #endif // _LIBCPP_STD_VER > 17"},
{"lineNum":"  736","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  737","line":"    pair<iterator, iterator>             equal_range(const key_type& __k)"},
{"lineNum":"  738","line":"        {return __table_.__equal_range_unique(__k);}"},
{"lineNum":"  739","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  740","line":"    pair<const_iterator, const_iterator> equal_range(const key_type& __k) const"},
{"lineNum":"  741","line":"        {return __table_.__equal_range_unique(__k);}"},
{"lineNum":"  742","line":"    #if _LIBCPP_STD_VER > 17"},
{"lineNum":"  743","line":"        template <typename _K2>"},
{"lineNum":"  744","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  745","line":"        _EnableIf<__is_transparent<hasher, _K2>::value && __is_transparent<key_equal, _K2>::value, pair<iterator, iterator>>"},
{"lineNum":"  746","line":"        equal_range(const _K2& __k)       {return __table_.__equal_range_unique(__k);}"},
{"lineNum":"  747","line":"        template <typename _K2>"},
{"lineNum":"  748","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  749","line":"        _EnableIf<__is_transparent<hasher, _K2>::value && __is_transparent<key_equal, _K2>::value, pair<const_iterator, const_iterator>>"},
{"lineNum":"  750","line":"        equal_range(const _K2& __k) const {return __table_.__equal_range_unique(__k);}"},
{"lineNum":"  751","line":"    #endif // _LIBCPP_STD_VER > 17"},
{"lineNum":"  752","line":""},
{"lineNum":"  753","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  754","line":"    size_type bucket_count() const _NOEXCEPT {return __table_.bucket_count();}"},
{"lineNum":"  755","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  756","line":"    size_type max_bucket_count() const _NOEXCEPT {return __table_.max_bucket_count();}"},
{"lineNum":"  757","line":""},
{"lineNum":"  758","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  759","line":"    size_type bucket_size(size_type __n) const {return __table_.bucket_size(__n);}"},
{"lineNum":"  760","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  761","line":"    size_type bucket(const key_type& __k) const {return __table_.bucket(__k);}"},
{"lineNum":"  762","line":""},
{"lineNum":"  763","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  764","line":"    local_iterator       begin(size_type __n)        {return __table_.begin(__n);}"},
{"lineNum":"  765","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  766","line":"    local_iterator       end(size_type __n)          {return __table_.end(__n);}"},
{"lineNum":"  767","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  768","line":"    const_local_iterator begin(size_type __n) const  {return __table_.cbegin(__n);}"},
{"lineNum":"  769","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  770","line":"    const_local_iterator end(size_type __n) const    {return __table_.cend(__n);}"},
{"lineNum":"  771","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  772","line":"    const_local_iterator cbegin(size_type __n) const {return __table_.cbegin(__n);}"},
{"lineNum":"  773","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  774","line":"    const_local_iterator cend(size_type __n) const   {return __table_.cend(__n);}"},
{"lineNum":"  775","line":""},
{"lineNum":"  776","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  777","line":"    float load_factor() const _NOEXCEPT {return __table_.load_factor();}"},
{"lineNum":"  778","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  779","line":"    float max_load_factor() const _NOEXCEPT {return __table_.max_load_factor();}"},
{"lineNum":"  780","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  781","line":"    void max_load_factor(float __mlf) {__table_.max_load_factor(__mlf);}"},
{"lineNum":"  782","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  783","line":"    void rehash(size_type __n) {__table_.rehash(__n);}"},
{"lineNum":"  784","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  785","line":"    void reserve(size_type __n) {__table_.reserve(__n);}"},
{"lineNum":"  786","line":""},
{"lineNum":"  787","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  788","line":""},
{"lineNum":"  789","line":"    bool __dereferenceable(const const_iterator* __i) const"},
{"lineNum":"  790","line":"        {return __table_.__dereferenceable(__i);}"},
{"lineNum":"  791","line":"    bool __decrementable(const const_iterator* __i) const"},
{"lineNum":"  792","line":"        {return __table_.__decrementable(__i);}"},
{"lineNum":"  793","line":"    bool __addable(const const_iterator* __i, ptrdiff_t __n) const"},
{"lineNum":"  794","line":"        {return __table_.__addable(__i, __n);}"},
{"lineNum":"  795","line":"    bool __subscriptable(const const_iterator* __i, ptrdiff_t __n) const"},
{"lineNum":"  796","line":"        {return __table_.__addable(__i, __n);}"},
{"lineNum":"  797","line":""},
{"lineNum":"  798","line":"#endif // _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  799","line":""},
{"lineNum":"  800","line":"};"},
{"lineNum":"  801","line":""},
{"lineNum":"  802","line":"#ifndef _LIBCPP_HAS_NO_DEDUCTION_GUIDES"},
{"lineNum":"  803","line":"template<class _InputIterator,"},
{"lineNum":"  804","line":"         class _Hash = hash<__iter_value_type<_InputIterator>>,"},
{"lineNum":"  805","line":"         class _Pred = equal_to<__iter_value_type<_InputIterator>>,"},
{"lineNum":"  806","line":"         class _Allocator = allocator<__iter_value_type<_InputIterator>>,"},
{"lineNum":"  807","line":"         class = _EnableIf<!__is_allocator<_Hash>::value>,"},
{"lineNum":"  808","line":"         class = _EnableIf<!is_integral<_Hash>::value>,"},
{"lineNum":"  809","line":"         class = _EnableIf<!__is_allocator<_Pred>::value>,"},
{"lineNum":"  810","line":"         class = _EnableIf<__is_allocator<_Allocator>::value>>"},
{"lineNum":"  811","line":"unordered_set(_InputIterator, _InputIterator, typename allocator_traits<_Allocator>::size_type = 0,"},
{"lineNum":"  812","line":"              _Hash = _Hash(), _Pred = _Pred(), _Allocator = _Allocator())"},
{"lineNum":"  813","line":"  -> unordered_set<__iter_value_type<_InputIterator>, _Hash, _Pred, _Allocator>;"},
{"lineNum":"  814","line":""},
{"lineNum":"  815","line":"template<class _Tp, class _Hash = hash<_Tp>,"},
{"lineNum":"  816","line":"         class _Pred = equal_to<_Tp>,"},
{"lineNum":"  817","line":"         class _Allocator = allocator<_Tp>,"},
{"lineNum":"  818","line":"         class = _EnableIf<!__is_allocator<_Hash>::value>,"},
{"lineNum":"  819","line":"         class = _EnableIf<!is_integral<_Hash>::value>,"},
{"lineNum":"  820","line":"         class = _EnableIf<!__is_allocator<_Pred>::value>,"},
{"lineNum":"  821","line":"         class = _EnableIf<__is_allocator<_Allocator>::value>>"},
{"lineNum":"  822","line":"unordered_set(initializer_list<_Tp>, typename allocator_traits<_Allocator>::size_type = 0,"},
{"lineNum":"  823","line":"              _Hash = _Hash(), _Pred = _Pred(), _Allocator = _Allocator())"},
{"lineNum":"  824","line":"  -> unordered_set<_Tp, _Hash, _Pred, _Allocator>;"},
{"lineNum":"  825","line":""},
{"lineNum":"  826","line":"template<class _InputIterator, class _Allocator,"},
{"lineNum":"  827","line":"         class = _EnableIf<__is_allocator<_Allocator>::value>>"},
{"lineNum":"  828","line":"unordered_set(_InputIterator, _InputIterator,"},
{"lineNum":"  829","line":"              typename allocator_traits<_Allocator>::size_type, _Allocator)"},
{"lineNum":"  830","line":"  -> unordered_set<__iter_value_type<_InputIterator>,"},
{"lineNum":"  831","line":"                   hash<__iter_value_type<_InputIterator>>,"},
{"lineNum":"  832","line":"                   equal_to<__iter_value_type<_InputIterator>>,"},
{"lineNum":"  833","line":"                   _Allocator>;"},
{"lineNum":"  834","line":""},
{"lineNum":"  835","line":"template<class _InputIterator, class _Hash, class _Allocator,"},
{"lineNum":"  836","line":"         class = _EnableIf<!__is_allocator<_Hash>::value>,"},
{"lineNum":"  837","line":"         class = _EnableIf<!is_integral<_Hash>::value>,"},
{"lineNum":"  838","line":"         class = _EnableIf<__is_allocator<_Allocator>::value>>"},
{"lineNum":"  839","line":"unordered_set(_InputIterator, _InputIterator,"},
{"lineNum":"  840","line":"              typename allocator_traits<_Allocator>::size_type, _Hash, _Allocator)"},
{"lineNum":"  841","line":"  -> unordered_set<__iter_value_type<_InputIterator>, _Hash,"},
{"lineNum":"  842","line":"                   equal_to<__iter_value_type<_InputIterator>>,"},
{"lineNum":"  843","line":"                   _Allocator>;"},
{"lineNum":"  844","line":""},
{"lineNum":"  845","line":"template<class _Tp, class _Allocator,"},
{"lineNum":"  846","line":"         class = _EnableIf<__is_allocator<_Allocator>::value>>"},
{"lineNum":"  847","line":"unordered_set(initializer_list<_Tp>, typename allocator_traits<_Allocator>::size_type, _Allocator)"},
{"lineNum":"  848","line":"  -> unordered_set<_Tp, hash<_Tp>, equal_to<_Tp>, _Allocator>;"},
{"lineNum":"  849","line":""},
{"lineNum":"  850","line":"template<class _Tp, class _Hash, class _Allocator,"},
{"lineNum":"  851","line":"         class = _EnableIf<!__is_allocator<_Hash>::value>,"},
{"lineNum":"  852","line":"         class = _EnableIf<!is_integral<_Hash>::value>,"},
{"lineNum":"  853","line":"         class = _EnableIf<__is_allocator<_Allocator>::value>>"},
{"lineNum":"  854","line":"unordered_set(initializer_list<_Tp>, typename allocator_traits<_Allocator>::size_type, _Hash, _Allocator)"},
{"lineNum":"  855","line":"  -> unordered_set<_Tp, _Hash, equal_to<_Tp>, _Allocator>;"},
{"lineNum":"  856","line":"#endif"},
{"lineNum":"  857","line":""},
{"lineNum":"  858","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":"  859","line":"unordered_set<_Value, _Hash, _Pred, _Alloc>::unordered_set(size_type __n,"},
{"lineNum":"  860","line":"        const hasher& __hf, const key_equal& __eql)"},
{"lineNum":"  861","line":"    : __table_(__hf, __eql)"},
{"lineNum":"  862","line":"{"},
{"lineNum":"  863","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  864","line":"    __get_db()->__insert_c(this);"},
{"lineNum":"  865","line":"#endif"},
{"lineNum":"  866","line":"    __table_.rehash(__n);"},
{"lineNum":"  867","line":"}"},
{"lineNum":"  868","line":""},
{"lineNum":"  869","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":"  870","line":"unordered_set<_Value, _Hash, _Pred, _Alloc>::unordered_set(size_type __n,"},
{"lineNum":"  871","line":"        const hasher& __hf, const key_equal& __eql, const allocator_type& __a)"},
{"lineNum":"  872","line":"    : __table_(__hf, __eql, __a)"},
{"lineNum":"  873","line":"{"},
{"lineNum":"  874","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  875","line":"    __get_db()->__insert_c(this);"},
{"lineNum":"  876","line":"#endif"},
{"lineNum":"  877","line":"    __table_.rehash(__n);"},
{"lineNum":"  878","line":"}"},
{"lineNum":"  879","line":""},
{"lineNum":"  880","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":"  881","line":"template <class _InputIterator>"},
{"lineNum":"  882","line":"unordered_set<_Value, _Hash, _Pred, _Alloc>::unordered_set("},
{"lineNum":"  883","line":"        _InputIterator __first, _InputIterator __last)"},
{"lineNum":"  884","line":"{"},
{"lineNum":"  885","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  886","line":"    __get_db()->__insert_c(this);"},
{"lineNum":"  887","line":"#endif"},
{"lineNum":"  888","line":"    insert(__first, __last);"},
{"lineNum":"  889","line":"}"},
{"lineNum":"  890","line":""},
{"lineNum":"  891","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":"  892","line":"template <class _InputIterator>"},
{"lineNum":"  893","line":"unordered_set<_Value, _Hash, _Pred, _Alloc>::unordered_set("},
{"lineNum":"  894","line":"        _InputIterator __first, _InputIterator __last, size_type __n,"},
{"lineNum":"  895","line":"        const hasher& __hf, const key_equal& __eql)"},
{"lineNum":"  896","line":"    : __table_(__hf, __eql)"},
{"lineNum":"  897","line":"{"},
{"lineNum":"  898","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  899","line":"    __get_db()->__insert_c(this);"},
{"lineNum":"  900","line":"#endif"},
{"lineNum":"  901","line":"    __table_.rehash(__n);"},
{"lineNum":"  902","line":"    insert(__first, __last);"},
{"lineNum":"  903","line":"}"},
{"lineNum":"  904","line":""},
{"lineNum":"  905","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":"  906","line":"template <class _InputIterator>"},
{"lineNum":"  907","line":"unordered_set<_Value, _Hash, _Pred, _Alloc>::unordered_set("},
{"lineNum":"  908","line":"        _InputIterator __first, _InputIterator __last, size_type __n,"},
{"lineNum":"  909","line":"        const hasher& __hf, const key_equal& __eql, const allocator_type& __a)"},
{"lineNum":"  910","line":"    : __table_(__hf, __eql, __a)"},
{"lineNum":"  911","line":"{"},
{"lineNum":"  912","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  913","line":"    __get_db()->__insert_c(this);"},
{"lineNum":"  914","line":"#endif"},
{"lineNum":"  915","line":"    __table_.rehash(__n);"},
{"lineNum":"  916","line":"    insert(__first, __last);"},
{"lineNum":"  917","line":"}"},
{"lineNum":"  918","line":""},
{"lineNum":"  919","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":"  920","line":"inline"},
{"lineNum":"  921","line":"unordered_set<_Value, _Hash, _Pred, _Alloc>::unordered_set("},
{"lineNum":"  922","line":"        const allocator_type& __a)"},
{"lineNum":"  923","line":"    : __table_(__a)"},
{"lineNum":"  924","line":"{"},
{"lineNum":"  925","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  926","line":"    __get_db()->__insert_c(this);"},
{"lineNum":"  927","line":"#endif"},
{"lineNum":"  928","line":"}"},
{"lineNum":"  929","line":""},
{"lineNum":"  930","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":"  931","line":"unordered_set<_Value, _Hash, _Pred, _Alloc>::unordered_set("},
{"lineNum":"  932","line":"        const unordered_set& __u)"},
{"lineNum":"  933","line":"    : __table_(__u.__table_)"},
{"lineNum":"  934","line":"{"},
{"lineNum":"  935","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  936","line":"    __get_db()->__insert_c(this);"},
{"lineNum":"  937","line":"#endif"},
{"lineNum":"  938","line":"    __table_.rehash(__u.bucket_count());"},
{"lineNum":"  939","line":"    insert(__u.begin(), __u.end());"},
{"lineNum":"  940","line":"}"},
{"lineNum":"  941","line":""},
{"lineNum":"  942","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":"  943","line":"unordered_set<_Value, _Hash, _Pred, _Alloc>::unordered_set("},
{"lineNum":"  944","line":"        const unordered_set& __u, const allocator_type& __a)"},
{"lineNum":"  945","line":"    : __table_(__u.__table_, __a)"},
{"lineNum":"  946","line":"{"},
{"lineNum":"  947","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  948","line":"    __get_db()->__insert_c(this);"},
{"lineNum":"  949","line":"#endif"},
{"lineNum":"  950","line":"    __table_.rehash(__u.bucket_count());"},
{"lineNum":"  951","line":"    insert(__u.begin(), __u.end());"},
{"lineNum":"  952","line":"}"},
{"lineNum":"  953","line":""},
{"lineNum":"  954","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  955","line":""},
{"lineNum":"  956","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":"  957","line":"inline"},
{"lineNum":"  958","line":"unordered_set<_Value, _Hash, _Pred, _Alloc>::unordered_set("},
{"lineNum":"  959","line":"        unordered_set&& __u)"},
{"lineNum":"  960","line":"    _NOEXCEPT_(is_nothrow_move_constructible<__table>::value)"},
{"lineNum":"  961","line":"    : __table_(_VSTD::move(__u.__table_))"},
{"lineNum":"  962","line":"{"},
{"lineNum":"  963","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  964","line":"    __get_db()->__insert_c(this);"},
{"lineNum":"  965","line":"    __get_db()->swap(this, &__u);"},
{"lineNum":"  966","line":"#endif"},
{"lineNum":"  967","line":"}"},
{"lineNum":"  968","line":""},
{"lineNum":"  969","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":"  970","line":"unordered_set<_Value, _Hash, _Pred, _Alloc>::unordered_set("},
{"lineNum":"  971","line":"        unordered_set&& __u, const allocator_type& __a)"},
{"lineNum":"  972","line":"    : __table_(_VSTD::move(__u.__table_), __a)"},
{"lineNum":"  973","line":"{"},
{"lineNum":"  974","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  975","line":"    __get_db()->__insert_c(this);"},
{"lineNum":"  976","line":"#endif"},
{"lineNum":"  977","line":"    if (__a != __u.get_allocator())"},
{"lineNum":"  978","line":"    {"},
{"lineNum":"  979","line":"        iterator __i = __u.begin();"},
{"lineNum":"  980","line":"        while (__u.size() != 0)"},
{"lineNum":"  981","line":"            __table_.__insert_unique(_VSTD::move(__u.__table_.remove(__i++)->__value_));"},
{"lineNum":"  982","line":"    }"},
{"lineNum":"  983","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  984","line":"    else"},
{"lineNum":"  985","line":"        __get_db()->swap(this, &__u);"},
{"lineNum":"  986","line":"#endif"},
{"lineNum":"  987","line":"}"},
{"lineNum":"  988","line":""},
{"lineNum":"  989","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":"  990","line":"unordered_set<_Value, _Hash, _Pred, _Alloc>::unordered_set("},
{"lineNum":"  991","line":"        initializer_list<value_type> __il)"},
{"lineNum":"  992","line":"{"},
{"lineNum":"  993","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  994","line":"    __get_db()->__insert_c(this);"},
{"lineNum":"  995","line":"#endif"},
{"lineNum":"  996","line":"    insert(__il.begin(), __il.end());"},
{"lineNum":"  997","line":"}"},
{"lineNum":"  998","line":""},
{"lineNum":"  999","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1000","line":"unordered_set<_Value, _Hash, _Pred, _Alloc>::unordered_set("},
{"lineNum":" 1001","line":"        initializer_list<value_type> __il, size_type __n, const hasher& __hf,"},
{"lineNum":" 1002","line":"        const key_equal& __eql)"},
{"lineNum":" 1003","line":"    : __table_(__hf, __eql)"},
{"lineNum":" 1004","line":"{"},
{"lineNum":" 1005","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1006","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1007","line":"#endif"},
{"lineNum":" 1008","line":"    __table_.rehash(__n);"},
{"lineNum":" 1009","line":"    insert(__il.begin(), __il.end());"},
{"lineNum":" 1010","line":"}"},
{"lineNum":" 1011","line":""},
{"lineNum":" 1012","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1013","line":"unordered_set<_Value, _Hash, _Pred, _Alloc>::unordered_set("},
{"lineNum":" 1014","line":"        initializer_list<value_type> __il, size_type __n, const hasher& __hf,"},
{"lineNum":" 1015","line":"        const key_equal& __eql, const allocator_type& __a)"},
{"lineNum":" 1016","line":"    : __table_(__hf, __eql, __a)"},
{"lineNum":" 1017","line":"{"},
{"lineNum":" 1018","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1019","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1020","line":"#endif"},
{"lineNum":" 1021","line":"    __table_.rehash(__n);"},
{"lineNum":" 1022","line":"    insert(__il.begin(), __il.end());"},
{"lineNum":" 1023","line":"}"},
{"lineNum":" 1024","line":""},
{"lineNum":" 1025","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1026","line":"inline"},
{"lineNum":" 1027","line":"unordered_set<_Value, _Hash, _Pred, _Alloc>&"},
{"lineNum":" 1028","line":"unordered_set<_Value, _Hash, _Pred, _Alloc>::operator=(unordered_set&& __u)"},
{"lineNum":" 1029","line":"    _NOEXCEPT_(is_nothrow_move_assignable<__table>::value)"},
{"lineNum":" 1030","line":"{"},
{"lineNum":" 1031","line":"    __table_ = _VSTD::move(__u.__table_);"},
{"lineNum":" 1032","line":"    return *this;"},
{"lineNum":" 1033","line":"}"},
{"lineNum":" 1034","line":""},
{"lineNum":" 1035","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1036","line":"inline"},
{"lineNum":" 1037","line":"unordered_set<_Value, _Hash, _Pred, _Alloc>&"},
{"lineNum":" 1038","line":"unordered_set<_Value, _Hash, _Pred, _Alloc>::operator=("},
{"lineNum":" 1039","line":"        initializer_list<value_type> __il)"},
{"lineNum":" 1040","line":"{"},
{"lineNum":" 1041","line":"    __table_.__assign_unique(__il.begin(), __il.end());"},
{"lineNum":" 1042","line":"    return *this;"},
{"lineNum":" 1043","line":"}"},
{"lineNum":" 1044","line":""},
{"lineNum":" 1045","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 1046","line":""},
{"lineNum":" 1047","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1048","line":"template <class _InputIterator>"},
{"lineNum":" 1049","line":"inline"},
{"lineNum":" 1050","line":"void"},
{"lineNum":" 1051","line":"unordered_set<_Value, _Hash, _Pred, _Alloc>::insert(_InputIterator __first,"},
{"lineNum":" 1052","line":"                                                    _InputIterator __last)"},
{"lineNum":" 1053","line":"{"},
{"lineNum":" 1054","line":"    for (; __first != __last; ++__first)"},
{"lineNum":" 1055","line":"        __table_.__insert_unique(*__first);"},
{"lineNum":" 1056","line":"}"},
{"lineNum":" 1057","line":""},
{"lineNum":" 1058","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1059","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1060","line":"void"},
{"lineNum":" 1061","line":"swap(unordered_set<_Value, _Hash, _Pred, _Alloc>& __x,"},
{"lineNum":" 1062","line":"     unordered_set<_Value, _Hash, _Pred, _Alloc>& __y)"},
{"lineNum":" 1063","line":"    _NOEXCEPT_(_NOEXCEPT_(__x.swap(__y)))"},
{"lineNum":" 1064","line":"{"},
{"lineNum":" 1065","line":"    __x.swap(__y);"},
{"lineNum":" 1066","line":"}"},
{"lineNum":" 1067","line":""},
{"lineNum":" 1068","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":" 1069","line":"template <class _Value, class _Hash, class _Pred, class _Alloc,"},
{"lineNum":" 1070","line":"          class _Predicate>"},
{"lineNum":" 1071","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1072","line":"    typename unordered_set<_Value, _Hash, _Pred, _Alloc>::size_type"},
{"lineNum":" 1073","line":"    erase_if(unordered_set<_Value, _Hash, _Pred, _Alloc>& __c,"},
{"lineNum":" 1074","line":"             _Predicate __pred) {"},
{"lineNum":" 1075","line":"  return _VSTD::__libcpp_erase_if_container(__c, __pred);"},
{"lineNum":" 1076","line":"}"},
{"lineNum":" 1077","line":"#endif"},
{"lineNum":" 1078","line":""},
{"lineNum":" 1079","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1080","line":"bool"},
{"lineNum":" 1081","line":"operator==(const unordered_set<_Value, _Hash, _Pred, _Alloc>& __x,"},
{"lineNum":" 1082","line":"           const unordered_set<_Value, _Hash, _Pred, _Alloc>& __y)"},
{"lineNum":" 1083","line":"{"},
{"lineNum":" 1084","line":"    if (__x.size() != __y.size())"},
{"lineNum":" 1085","line":"        return false;"},
{"lineNum":" 1086","line":"    typedef typename unordered_set<_Value, _Hash, _Pred, _Alloc>::const_iterator"},
{"lineNum":" 1087","line":"                                                                 const_iterator;"},
{"lineNum":" 1088","line":"    for (const_iterator __i = __x.begin(), __ex = __x.end(), __ey = __y.end();"},
{"lineNum":" 1089","line":"            __i != __ex; ++__i)"},
{"lineNum":" 1090","line":"    {"},
{"lineNum":" 1091","line":"        const_iterator __j = __y.find(*__i);"},
{"lineNum":" 1092","line":"        if (__j == __ey || !(*__i == *__j))"},
{"lineNum":" 1093","line":"            return false;"},
{"lineNum":" 1094","line":"    }"},
{"lineNum":" 1095","line":"    return true;"},
{"lineNum":" 1096","line":"}"},
{"lineNum":" 1097","line":""},
{"lineNum":" 1098","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1099","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1100","line":"bool"},
{"lineNum":" 1101","line":"operator!=(const unordered_set<_Value, _Hash, _Pred, _Alloc>& __x,"},
{"lineNum":" 1102","line":"           const unordered_set<_Value, _Hash, _Pred, _Alloc>& __y)"},
{"lineNum":" 1103","line":"{"},
{"lineNum":" 1104","line":"    return !(__x == __y);"},
{"lineNum":" 1105","line":"}"},
{"lineNum":" 1106","line":""},
{"lineNum":" 1107","line":"template <class _Value, class _Hash = hash<_Value>, class _Pred = equal_to<_Value>,"},
{"lineNum":" 1108","line":"          class _Alloc = allocator<_Value> >"},
{"lineNum":" 1109","line":"class _LIBCPP_TEMPLATE_VIS unordered_multiset"},
{"lineNum":" 1110","line":"{"},
{"lineNum":" 1111","line":"public:"},
{"lineNum":" 1112","line":"    // types"},
{"lineNum":" 1113","line":"    typedef _Value                                                     key_type;"},
{"lineNum":" 1114","line":"    typedef key_type                                                   value_type;"},
{"lineNum":" 1115","line":"    typedef __identity_t<_Hash>                                        hasher;"},
{"lineNum":" 1116","line":"    typedef __identity_t<_Pred>                                        key_equal;"},
{"lineNum":" 1117","line":"    typedef __identity_t<_Alloc>                                       allocator_type;"},
{"lineNum":" 1118","line":"    typedef value_type&                                                reference;"},
{"lineNum":" 1119","line":"    typedef const value_type&                                          const_reference;"},
{"lineNum":" 1120","line":"    static_assert((is_same<value_type, typename allocator_type::value_type>::value),"},
{"lineNum":" 1121","line":"                  \"Invalid allocator::value_type\");"},
{"lineNum":" 1122","line":""},
{"lineNum":" 1123","line":"private:"},
{"lineNum":" 1124","line":"    typedef __hash_table<value_type, hasher, key_equal, allocator_type> __table;"},
{"lineNum":" 1125","line":""},
{"lineNum":" 1126","line":"    __table __table_;"},
{"lineNum":" 1127","line":""},
{"lineNum":" 1128","line":"public:"},
{"lineNum":" 1129","line":"    typedef typename __table::pointer         pointer;"},
{"lineNum":" 1130","line":"    typedef typename __table::const_pointer   const_pointer;"},
{"lineNum":" 1131","line":"    typedef typename __table::size_type       size_type;"},
{"lineNum":" 1132","line":"    typedef typename __table::difference_type difference_type;"},
{"lineNum":" 1133","line":""},
{"lineNum":" 1134","line":"    typedef typename __table::const_iterator       iterator;"},
{"lineNum":" 1135","line":"    typedef typename __table::const_iterator       const_iterator;"},
{"lineNum":" 1136","line":"    typedef typename __table::const_local_iterator local_iterator;"},
{"lineNum":" 1137","line":"    typedef typename __table::const_local_iterator const_local_iterator;"},
{"lineNum":" 1138","line":""},
{"lineNum":" 1139","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 1140","line":"    typedef __set_node_handle<typename __table::__node, allocator_type> node_type;"},
{"lineNum":" 1141","line":"#endif"},
{"lineNum":" 1142","line":""},
{"lineNum":" 1143","line":"    template <class _Value2, class _Hash2, class _Pred2, class _Alloc2>"},
{"lineNum":" 1144","line":"        friend class _LIBCPP_TEMPLATE_VIS unordered_set;"},
{"lineNum":" 1145","line":"    template <class _Value2, class _Hash2, class _Pred2, class _Alloc2>"},
{"lineNum":" 1146","line":"        friend class _LIBCPP_TEMPLATE_VIS unordered_multiset;"},
{"lineNum":" 1147","line":""},
{"lineNum":" 1148","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1149","line":"    unordered_multiset()"},
{"lineNum":" 1150","line":"        _NOEXCEPT_(is_nothrow_default_constructible<__table>::value)"},
{"lineNum":" 1151","line":"        {"},
{"lineNum":" 1152","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1153","line":"            __get_db()->__insert_c(this);"},
{"lineNum":" 1154","line":"#endif"},
{"lineNum":" 1155","line":"        }"},
{"lineNum":" 1156","line":"    explicit unordered_multiset(size_type __n, const hasher& __hf = hasher(),"},
{"lineNum":" 1157","line":"                                const key_equal& __eql = key_equal());"},
{"lineNum":" 1158","line":"    unordered_multiset(size_type __n, const hasher& __hf,"},
{"lineNum":" 1159","line":"                       const key_equal& __eql, const allocator_type& __a);"},
{"lineNum":" 1160","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 1161","line":"    inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1162","line":"    unordered_multiset(size_type __n, const allocator_type& __a)"},
{"lineNum":" 1163","line":"        : unordered_multiset(__n, hasher(), key_equal(), __a) {}"},
{"lineNum":" 1164","line":"    inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1165","line":"    unordered_multiset(size_type __n, const hasher& __hf, const allocator_type& __a)"},
{"lineNum":" 1166","line":"        : unordered_multiset(__n, __hf, key_equal(), __a) {}"},
{"lineNum":" 1167","line":"#endif"},
{"lineNum":" 1168","line":"    template <class _InputIterator>"},
{"lineNum":" 1169","line":"        unordered_multiset(_InputIterator __first, _InputIterator __last);"},
{"lineNum":" 1170","line":"    template <class _InputIterator>"},
{"lineNum":" 1171","line":"        unordered_multiset(_InputIterator __first, _InputIterator __last,"},
{"lineNum":" 1172","line":"                      size_type __n, const hasher& __hf = hasher(),"},
{"lineNum":" 1173","line":"                      const key_equal& __eql = key_equal());"},
{"lineNum":" 1174","line":"    template <class _InputIterator>"},
{"lineNum":" 1175","line":"        unordered_multiset(_InputIterator __first, _InputIterator __last,"},
{"lineNum":" 1176","line":"                      size_type __n , const hasher& __hf,"},
{"lineNum":" 1177","line":"                      const key_equal& __eql, const allocator_type& __a);"},
{"lineNum":" 1178","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 1179","line":"    template <class _InputIterator>"},
{"lineNum":" 1180","line":"    inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1181","line":"    unordered_multiset(_InputIterator __first, _InputIterator __last,"},
{"lineNum":" 1182","line":"                       size_type __n, const allocator_type& __a)"},
{"lineNum":" 1183","line":"        : unordered_multiset(__first, __last, __n, hasher(), key_equal(), __a) {}"},
{"lineNum":" 1184","line":"    template <class _InputIterator>"},
{"lineNum":" 1185","line":"    inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1186","line":"    unordered_multiset(_InputIterator __first, _InputIterator __last,"},
{"lineNum":" 1187","line":"                       size_type __n, const hasher& __hf, const allocator_type& __a)"},
{"lineNum":" 1188","line":"        : unordered_multiset(__first, __last, __n, __hf, key_equal(), __a) {}"},
{"lineNum":" 1189","line":"#endif"},
{"lineNum":" 1190","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1191","line":"    explicit unordered_multiset(const allocator_type& __a);"},
{"lineNum":" 1192","line":"    unordered_multiset(const unordered_multiset& __u);"},
{"lineNum":" 1193","line":"    unordered_multiset(const unordered_multiset& __u, const allocator_type& __a);"},
{"lineNum":" 1194","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1195","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1196","line":"    unordered_multiset(unordered_multiset&& __u)"},
{"lineNum":" 1197","line":"        _NOEXCEPT_(is_nothrow_move_constructible<__table>::value);"},
{"lineNum":" 1198","line":"    unordered_multiset(unordered_multiset&& __u, const allocator_type& __a);"},
{"lineNum":" 1199","line":"    unordered_multiset(initializer_list<value_type> __il);"},
{"lineNum":" 1200","line":"    unordered_multiset(initializer_list<value_type> __il, size_type __n,"},
{"lineNum":" 1201","line":"                       const hasher& __hf = hasher(),"},
{"lineNum":" 1202","line":"                       const key_equal& __eql = key_equal());"},
{"lineNum":" 1203","line":"    unordered_multiset(initializer_list<value_type> __il, size_type __n,"},
{"lineNum":" 1204","line":"                       const hasher& __hf, const key_equal& __eql,"},
{"lineNum":" 1205","line":"                       const allocator_type& __a);"},
{"lineNum":" 1206","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 1207","line":"    inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1208","line":"    unordered_multiset(initializer_list<value_type> __il, size_type __n, const allocator_type& __a)"},
{"lineNum":" 1209","line":"      : unordered_multiset(__il, __n, hasher(), key_equal(), __a) {}"},
{"lineNum":" 1210","line":"    inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1211","line":"    unordered_multiset(initializer_list<value_type> __il, size_type __n, const hasher& __hf, const allocator_type& __a)"},
{"lineNum":" 1212","line":"      : unordered_multiset(__il, __n, __hf, key_equal(), __a) {}"},
{"lineNum":" 1213","line":"#endif"},
{"lineNum":" 1214","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 1215","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1216","line":"    ~unordered_multiset() {"},
{"lineNum":" 1217","line":"        static_assert(sizeof(__diagnose_unordered_container_requirements<_Value, _Hash, _Pred>(0)), \"\");"},
{"lineNum":" 1218","line":"    }"},
{"lineNum":" 1219","line":""},
{"lineNum":" 1220","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1221","line":"    unordered_multiset& operator=(const unordered_multiset& __u)"},
{"lineNum":" 1222","line":"    {"},
{"lineNum":" 1223","line":"        __table_ = __u.__table_;"},
{"lineNum":" 1224","line":"        return *this;"},
{"lineNum":" 1225","line":"    }"},
{"lineNum":" 1226","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1227","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1228","line":"    unordered_multiset& operator=(unordered_multiset&& __u)"},
{"lineNum":" 1229","line":"        _NOEXCEPT_(is_nothrow_move_assignable<__table>::value);"},
{"lineNum":" 1230","line":"    unordered_multiset& operator=(initializer_list<value_type> __il);"},
{"lineNum":" 1231","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 1232","line":""},
{"lineNum":" 1233","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1234","line":"    allocator_type get_allocator() const _NOEXCEPT"},
{"lineNum":" 1235","line":"        {return allocator_type(__table_.__node_alloc());}"},
{"lineNum":" 1236","line":""},
{"lineNum":" 1237","line":"    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1238","line":"    bool      empty() const _NOEXCEPT {return __table_.size() == 0;}"},
{"lineNum":" 1239","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1240","line":"    size_type size() const _NOEXCEPT  {return __table_.size();}"},
{"lineNum":" 1241","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1242","line":"    size_type max_size() const _NOEXCEPT {return __table_.max_size();}"},
{"lineNum":" 1243","line":""},
{"lineNum":" 1244","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1245","line":"    iterator       begin() _NOEXCEPT        {return __table_.begin();}"},
{"lineNum":" 1246","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1247","line":"    iterator       end() _NOEXCEPT          {return __table_.end();}"},
{"lineNum":" 1248","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1249","line":"    const_iterator begin()  const _NOEXCEPT {return __table_.begin();}"},
{"lineNum":" 1250","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1251","line":"    const_iterator end()    const _NOEXCEPT {return __table_.end();}"},
{"lineNum":" 1252","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1253","line":"    const_iterator cbegin() const _NOEXCEPT {return __table_.begin();}"},
{"lineNum":" 1254","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1255","line":"    const_iterator cend()   const _NOEXCEPT {return __table_.end();}"},
{"lineNum":" 1256","line":""},
{"lineNum":" 1257","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1258","line":"    template <class... _Args>"},
{"lineNum":" 1259","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1260","line":"        iterator emplace(_Args&&... __args)"},
{"lineNum":" 1261","line":"            {return __table_.__emplace_multi(_VSTD::forward<_Args>(__args)...);}"},
{"lineNum":" 1262","line":"    template <class... _Args>"},
{"lineNum":" 1263","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1264","line":"        iterator emplace_hint(const_iterator __p, _Args&&... __args)"},
{"lineNum":" 1265","line":"            {return __table_.__emplace_hint_multi(__p, _VSTD::forward<_Args>(__args)...);}"},
{"lineNum":" 1266","line":""},
{"lineNum":" 1267","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1268","line":"    iterator insert(value_type&& __x) {return __table_.__insert_multi(_VSTD::move(__x));}"},
{"lineNum":" 1269","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1270","line":"    iterator insert(const_iterator __p, value_type&& __x)"},
{"lineNum":" 1271","line":"        {return __table_.__insert_multi(__p, _VSTD::move(__x));}"},
{"lineNum":" 1272","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1273","line":"    void insert(initializer_list<value_type> __il)"},
{"lineNum":" 1274","line":"        {insert(__il.begin(), __il.end());}"},
{"lineNum":" 1275","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 1276","line":""},
{"lineNum":" 1277","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1278","line":"    iterator insert(const value_type& __x) {return __table_.__insert_multi(__x);}"},
{"lineNum":" 1279","line":""},
{"lineNum":" 1280","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1281","line":"    iterator insert(const_iterator __p, const value_type& __x)"},
{"lineNum":" 1282","line":"        {return __table_.__insert_multi(__p, __x);}"},
{"lineNum":" 1283","line":""},
{"lineNum":" 1284","line":"    template <class _InputIterator>"},
{"lineNum":" 1285","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1286","line":"        void insert(_InputIterator __first, _InputIterator __last);"},
{"lineNum":" 1287","line":""},
{"lineNum":" 1288","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 1289","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1290","line":"    iterator insert(node_type&& __nh)"},
{"lineNum":" 1291","line":"    {"},
{"lineNum":" 1292","line":"        _LIBCPP_ASSERT(__nh.empty() || __nh.get_allocator() == get_allocator(),"},
{"lineNum":" 1293","line":"            \"node_type with incompatible allocator passed to unordered_multiset::insert()\");"},
{"lineNum":" 1294","line":"        return __table_.template __node_handle_insert_multi<node_type>("},
{"lineNum":" 1295","line":"            _VSTD::move(__nh));"},
{"lineNum":" 1296","line":"    }"},
{"lineNum":" 1297","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1298","line":"    iterator insert(const_iterator __hint, node_type&& __nh)"},
{"lineNum":" 1299","line":"    {"},
{"lineNum":" 1300","line":"        _LIBCPP_ASSERT(__nh.empty() || __nh.get_allocator() == get_allocator(),"},
{"lineNum":" 1301","line":"            \"node_type with incompatible allocator passed to unordered_multiset::insert()\");"},
{"lineNum":" 1302","line":"        return __table_.template __node_handle_insert_multi<node_type>("},
{"lineNum":" 1303","line":"            __hint, _VSTD::move(__nh));"},
{"lineNum":" 1304","line":"    }"},
{"lineNum":" 1305","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1306","line":"    node_type extract(const_iterator __position)"},
{"lineNum":" 1307","line":"    {"},
{"lineNum":" 1308","line":"        return __table_.template __node_handle_extract<node_type>("},
{"lineNum":" 1309","line":"            __position);"},
{"lineNum":" 1310","line":"    }"},
{"lineNum":" 1311","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1312","line":"    node_type extract(key_type const& __key)"},
{"lineNum":" 1313","line":"    {"},
{"lineNum":" 1314","line":"        return __table_.template __node_handle_extract<node_type>(__key);"},
{"lineNum":" 1315","line":"    }"},
{"lineNum":" 1316","line":""},
{"lineNum":" 1317","line":"    template <class _H2, class _P2>"},
{"lineNum":" 1318","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1319","line":"    void merge(unordered_multiset<key_type, _H2, _P2, allocator_type>& __source)"},
{"lineNum":" 1320","line":"    {"},
{"lineNum":" 1321","line":"        _LIBCPP_ASSERT(__source.get_allocator() == get_allocator(),"},
{"lineNum":" 1322","line":"                       \"merging container with incompatible allocator\");"},
{"lineNum":" 1323","line":"        return __table_.__node_handle_merge_multi(__source.__table_);"},
{"lineNum":" 1324","line":"    }"},
{"lineNum":" 1325","line":"    template <class _H2, class _P2>"},
{"lineNum":" 1326","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1327","line":"    void merge(unordered_multiset<key_type, _H2, _P2, allocator_type>&& __source)"},
{"lineNum":" 1328","line":"    {"},
{"lineNum":" 1329","line":"        _LIBCPP_ASSERT(__source.get_allocator() == get_allocator(),"},
{"lineNum":" 1330","line":"                       \"merging container with incompatible allocator\");"},
{"lineNum":" 1331","line":"        return __table_.__node_handle_merge_multi(__source.__table_);"},
{"lineNum":" 1332","line":"    }"},
{"lineNum":" 1333","line":"    template <class _H2, class _P2>"},
{"lineNum":" 1334","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1335","line":"    void merge(unordered_set<key_type, _H2, _P2, allocator_type>& __source)"},
{"lineNum":" 1336","line":"    {"},
{"lineNum":" 1337","line":"        _LIBCPP_ASSERT(__source.get_allocator() == get_allocator(),"},
{"lineNum":" 1338","line":"                       \"merging container with incompatible allocator\");"},
{"lineNum":" 1339","line":"        return __table_.__node_handle_merge_multi(__source.__table_);"},
{"lineNum":" 1340","line":"    }"},
{"lineNum":" 1341","line":"    template <class _H2, class _P2>"},
{"lineNum":" 1342","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1343","line":"    void merge(unordered_set<key_type, _H2, _P2, allocator_type>&& __source)"},
{"lineNum":" 1344","line":"    {"},
{"lineNum":" 1345","line":"        _LIBCPP_ASSERT(__source.get_allocator() == get_allocator(),"},
{"lineNum":" 1346","line":"                       \"merging container with incompatible allocator\");"},
{"lineNum":" 1347","line":"        return __table_.__node_handle_merge_multi(__source.__table_);"},
{"lineNum":" 1348","line":"    }"},
{"lineNum":" 1349","line":"#endif"},
{"lineNum":" 1350","line":""},
{"lineNum":" 1351","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1352","line":"    iterator erase(const_iterator __p) {return __table_.erase(__p);}"},
{"lineNum":" 1353","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1354","line":"    size_type erase(const key_type& __k) {return __table_.__erase_multi(__k);}"},
{"lineNum":" 1355","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1356","line":"    iterator erase(const_iterator __first, const_iterator __last)"},
{"lineNum":" 1357","line":"        {return __table_.erase(__first, __last);}"},
{"lineNum":" 1358","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1359","line":"    void clear() _NOEXCEPT {__table_.clear();}"},
{"lineNum":" 1360","line":""},
{"lineNum":" 1361","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1362","line":"    void swap(unordered_multiset& __u)"},
{"lineNum":" 1363","line":"        _NOEXCEPT_(__is_nothrow_swappable<__table>::value)"},
{"lineNum":" 1364","line":"        {__table_.swap(__u.__table_);}"},
{"lineNum":" 1365","line":""},
{"lineNum":" 1366","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1367","line":"    hasher hash_function() const {return __table_.hash_function();}"},
{"lineNum":" 1368","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1369","line":"    key_equal key_eq() const {return __table_.key_eq();}"},
{"lineNum":" 1370","line":""},
{"lineNum":" 1371","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1372","line":"    iterator       find(const key_type& __k)       {return __table_.find(__k);}"},
{"lineNum":" 1373","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1374","line":"    const_iterator find(const key_type& __k) const {return __table_.find(__k);}"},
{"lineNum":" 1375","line":"    #if _LIBCPP_STD_VER > 17"},
{"lineNum":" 1376","line":"        template <typename _K2>"},
{"lineNum":" 1377","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1378","line":"        _EnableIf<__is_transparent<hasher, _K2>::value && __is_transparent<key_equal, _K2>::value, iterator>"},
{"lineNum":" 1379","line":"        find(const _K2& __k)       {return __table_.find(__k);}"},
{"lineNum":" 1380","line":"        template <typename _K2>"},
{"lineNum":" 1381","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1382","line":"        _EnableIf<__is_transparent<hasher, _K2>::value && __is_transparent<key_equal, _K2>::value, const_iterator>"},
{"lineNum":" 1383","line":"        find(const _K2& __k) const {return __table_.find(__k);}"},
{"lineNum":" 1384","line":"    #endif // _LIBCPP_STD_VER > 17"},
{"lineNum":" 1385","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1386","line":"    size_type count(const key_type& __k) const {return __table_.__count_multi(__k);}"},
{"lineNum":" 1387","line":"    #if _LIBCPP_STD_VER > 17"},
{"lineNum":" 1388","line":"        template <typename _K2>"},
{"lineNum":" 1389","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1390","line":"        _EnableIf<__is_transparent<hasher, _K2>::value && __is_transparent<key_equal, _K2>::value, size_type>"},
{"lineNum":" 1391","line":"        count(const _K2& __k) const {return __table_.__count_multi(__k);}"},
{"lineNum":" 1392","line":"    #endif // _LIBCPP_STD_VER > 17"},
{"lineNum":" 1393","line":"    #if _LIBCPP_STD_VER > 17"},
{"lineNum":" 1394","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1395","line":"        bool contains(const key_type& __k) const {return find(__k) != end();}"},
{"lineNum":" 1396","line":""},
{"lineNum":" 1397","line":"        template <typename _K2>"},
{"lineNum":" 1398","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1399","line":"        _EnableIf<__is_transparent<hasher, _K2>::value && __is_transparent<key_equal, _K2>::value, bool>"},
{"lineNum":" 1400","line":"        contains(const _K2& __k) const {return find(__k) != end();}"},
{"lineNum":" 1401","line":"    #endif // _LIBCPP_STD_VER > 17"},
{"lineNum":" 1402","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1403","line":"    pair<iterator, iterator>             equal_range(const key_type& __k)"},
{"lineNum":" 1404","line":"        {return __table_.__equal_range_multi(__k);}"},
{"lineNum":" 1405","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1406","line":"    pair<const_iterator, const_iterator> equal_range(const key_type& __k) const"},
{"lineNum":" 1407","line":"        {return __table_.__equal_range_multi(__k);}"},
{"lineNum":" 1408","line":"    #if _LIBCPP_STD_VER > 17"},
{"lineNum":" 1409","line":"        template <typename _K2>"},
{"lineNum":" 1410","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1411","line":"        _EnableIf<__is_transparent<hasher, _K2>::value && __is_transparent<key_equal, _K2>::value, pair<iterator, iterator>>"},
{"lineNum":" 1412","line":"        equal_range(const _K2& __k)       {return __table_.__equal_range_multi(__k);}"},
{"lineNum":" 1413","line":"        template <typename _K2>"},
{"lineNum":" 1414","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1415","line":"        _EnableIf<__is_transparent<hasher, _K2>::value && __is_transparent<key_equal, _K2>::value, pair<const_iterator, const_iterator>>"},
{"lineNum":" 1416","line":"        equal_range(const _K2& __k) const {return __table_.__equal_range_multi(__k);}"},
{"lineNum":" 1417","line":"    #endif // _LIBCPP_STD_VER > 17"},
{"lineNum":" 1418","line":""},
{"lineNum":" 1419","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1420","line":"    size_type bucket_count() const _NOEXCEPT {return __table_.bucket_count();}"},
{"lineNum":" 1421","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1422","line":"    size_type max_bucket_count() const _NOEXCEPT {return __table_.max_bucket_count();}"},
{"lineNum":" 1423","line":""},
{"lineNum":" 1424","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1425","line":"    size_type bucket_size(size_type __n) const {return __table_.bucket_size(__n);}"},
{"lineNum":" 1426","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1427","line":"    size_type bucket(const key_type& __k) const {return __table_.bucket(__k);}"},
{"lineNum":" 1428","line":""},
{"lineNum":" 1429","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1430","line":"    local_iterator       begin(size_type __n)        {return __table_.begin(__n);}"},
{"lineNum":" 1431","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1432","line":"    local_iterator       end(size_type __n)          {return __table_.end(__n);}"},
{"lineNum":" 1433","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1434","line":"    const_local_iterator begin(size_type __n) const  {return __table_.cbegin(__n);}"},
{"lineNum":" 1435","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1436","line":"    const_local_iterator end(size_type __n) const    {return __table_.cend(__n);}"},
{"lineNum":" 1437","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1438","line":"    const_local_iterator cbegin(size_type __n) const {return __table_.cbegin(__n);}"},
{"lineNum":" 1439","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1440","line":"    const_local_iterator cend(size_type __n) const   {return __table_.cend(__n);}"},
{"lineNum":" 1441","line":""},
{"lineNum":" 1442","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1443","line":"    float load_factor() const _NOEXCEPT {return __table_.load_factor();}"},
{"lineNum":" 1444","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1445","line":"    float max_load_factor() const _NOEXCEPT {return __table_.max_load_factor();}"},
{"lineNum":" 1446","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1447","line":"    void max_load_factor(float __mlf) {__table_.max_load_factor(__mlf);}"},
{"lineNum":" 1448","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1449","line":"    void rehash(size_type __n) {__table_.rehash(__n);}"},
{"lineNum":" 1450","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1451","line":"    void reserve(size_type __n) {__table_.reserve(__n);}"},
{"lineNum":" 1452","line":""},
{"lineNum":" 1453","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1454","line":""},
{"lineNum":" 1455","line":"    bool __dereferenceable(const const_iterator* __i) const"},
{"lineNum":" 1456","line":"        {return __table_.__dereferenceable(__i);}"},
{"lineNum":" 1457","line":"    bool __decrementable(const const_iterator* __i) const"},
{"lineNum":" 1458","line":"        {return __table_.__decrementable(__i);}"},
{"lineNum":" 1459","line":"    bool __addable(const const_iterator* __i, ptrdiff_t __n) const"},
{"lineNum":" 1460","line":"        {return __table_.__addable(__i, __n);}"},
{"lineNum":" 1461","line":"    bool __subscriptable(const const_iterator* __i, ptrdiff_t __n) const"},
{"lineNum":" 1462","line":"        {return __table_.__addable(__i, __n);}"},
{"lineNum":" 1463","line":""},
{"lineNum":" 1464","line":"#endif // _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1465","line":""},
{"lineNum":" 1466","line":"};"},
{"lineNum":" 1467","line":""},
{"lineNum":" 1468","line":"#ifndef _LIBCPP_HAS_NO_DEDUCTION_GUIDES"},
{"lineNum":" 1469","line":"template<class _InputIterator,"},
{"lineNum":" 1470","line":"         class _Hash = hash<__iter_value_type<_InputIterator>>,"},
{"lineNum":" 1471","line":"         class _Pred = equal_to<__iter_value_type<_InputIterator>>,"},
{"lineNum":" 1472","line":"         class _Allocator = allocator<__iter_value_type<_InputIterator>>,"},
{"lineNum":" 1473","line":"         class = _EnableIf<!__is_allocator<_Hash>::value>,"},
{"lineNum":" 1474","line":"         class = _EnableIf<!is_integral<_Hash>::value>,"},
{"lineNum":" 1475","line":"         class = _EnableIf<!__is_allocator<_Pred>::value>,"},
{"lineNum":" 1476","line":"         class = _EnableIf<__is_allocator<_Allocator>::value>>"},
{"lineNum":" 1477","line":"unordered_multiset(_InputIterator, _InputIterator, typename allocator_traits<_Allocator>::size_type = 0,"},
{"lineNum":" 1478","line":"              _Hash = _Hash(), _Pred = _Pred(), _Allocator = _Allocator())"},
{"lineNum":" 1479","line":"  -> unordered_multiset<__iter_value_type<_InputIterator>, _Hash, _Pred, _Allocator>;"},
{"lineNum":" 1480","line":""},
{"lineNum":" 1481","line":"template<class _Tp, class _Hash = hash<_Tp>,"},
{"lineNum":" 1482","line":"         class _Pred = equal_to<_Tp>, class _Allocator = allocator<_Tp>,"},
{"lineNum":" 1483","line":"         class = _EnableIf<!__is_allocator<_Hash>::value>,"},
{"lineNum":" 1484","line":"         class = _EnableIf<!is_integral<_Hash>::value>,"},
{"lineNum":" 1485","line":"         class = _EnableIf<!__is_allocator<_Pred>::value>,"},
{"lineNum":" 1486","line":"         class = _EnableIf<__is_allocator<_Allocator>::value>>"},
{"lineNum":" 1487","line":"unordered_multiset(initializer_list<_Tp>, typename allocator_traits<_Allocator>::size_type = 0,"},
{"lineNum":" 1488","line":"              _Hash = _Hash(), _Pred = _Pred(), _Allocator = _Allocator())"},
{"lineNum":" 1489","line":"  -> unordered_multiset<_Tp, _Hash, _Pred, _Allocator>;"},
{"lineNum":" 1490","line":""},
{"lineNum":" 1491","line":"template<class _InputIterator, class _Allocator,"},
{"lineNum":" 1492","line":"         class = _EnableIf<__is_allocator<_Allocator>::value>>"},
{"lineNum":" 1493","line":"unordered_multiset(_InputIterator, _InputIterator, typename allocator_traits<_Allocator>::size_type, _Allocator)"},
{"lineNum":" 1494","line":"  -> unordered_multiset<__iter_value_type<_InputIterator>,"},
{"lineNum":" 1495","line":"                   hash<__iter_value_type<_InputIterator>>,"},
{"lineNum":" 1496","line":"                   equal_to<__iter_value_type<_InputIterator>>,"},
{"lineNum":" 1497","line":"                   _Allocator>;"},
{"lineNum":" 1498","line":""},
{"lineNum":" 1499","line":"template<class _InputIterator, class _Hash, class _Allocator,"},
{"lineNum":" 1500","line":"         class = _EnableIf<!__is_allocator<_Hash>::value>,"},
{"lineNum":" 1501","line":"         class = _EnableIf<!is_integral<_Hash>::value>,"},
{"lineNum":" 1502","line":"         class = _EnableIf<__is_allocator<_Allocator>::value>>"},
{"lineNum":" 1503","line":"unordered_multiset(_InputIterator, _InputIterator, typename allocator_traits<_Allocator>::size_type,"},
{"lineNum":" 1504","line":"              _Hash, _Allocator)"},
{"lineNum":" 1505","line":"  -> unordered_multiset<__iter_value_type<_InputIterator>, _Hash,"},
{"lineNum":" 1506","line":"                   equal_to<__iter_value_type<_InputIterator>>,"},
{"lineNum":" 1507","line":"                   _Allocator>;"},
{"lineNum":" 1508","line":""},
{"lineNum":" 1509","line":"template<class _Tp, class _Allocator,"},
{"lineNum":" 1510","line":"         class = _EnableIf<__is_allocator<_Allocator>::value>>"},
{"lineNum":" 1511","line":"unordered_multiset(initializer_list<_Tp>, typename allocator_traits<_Allocator>::size_type, _Allocator)"},
{"lineNum":" 1512","line":"  -> unordered_multiset<_Tp, hash<_Tp>, equal_to<_Tp>, _Allocator>;"},
{"lineNum":" 1513","line":""},
{"lineNum":" 1514","line":"template<class _Tp, class _Hash, class _Allocator,"},
{"lineNum":" 1515","line":"         class = _EnableIf<!__is_allocator<_Hash>::value>,"},
{"lineNum":" 1516","line":"         class = _EnableIf<!is_integral<_Hash>::value>,"},
{"lineNum":" 1517","line":"         class = _EnableIf<__is_allocator<_Allocator>::value>>"},
{"lineNum":" 1518","line":"unordered_multiset(initializer_list<_Tp>, typename allocator_traits<_Allocator>::size_type, _Hash, _Allocator)"},
{"lineNum":" 1519","line":"  -> unordered_multiset<_Tp, _Hash, equal_to<_Tp>, _Allocator>;"},
{"lineNum":" 1520","line":"#endif"},
{"lineNum":" 1521","line":""},
{"lineNum":" 1522","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1523","line":"unordered_multiset<_Value, _Hash, _Pred, _Alloc>::unordered_multiset("},
{"lineNum":" 1524","line":"        size_type __n, const hasher& __hf, const key_equal& __eql)"},
{"lineNum":" 1525","line":"    : __table_(__hf, __eql)"},
{"lineNum":" 1526","line":"{"},
{"lineNum":" 1527","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1528","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1529","line":"#endif"},
{"lineNum":" 1530","line":"    __table_.rehash(__n);"},
{"lineNum":" 1531","line":"}"},
{"lineNum":" 1532","line":""},
{"lineNum":" 1533","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1534","line":"unordered_multiset<_Value, _Hash, _Pred, _Alloc>::unordered_multiset("},
{"lineNum":" 1535","line":"        size_type __n, const hasher& __hf, const key_equal& __eql,"},
{"lineNum":" 1536","line":"        const allocator_type& __a)"},
{"lineNum":" 1537","line":"    : __table_(__hf, __eql, __a)"},
{"lineNum":" 1538","line":"{"},
{"lineNum":" 1539","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1540","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1541","line":"#endif"},
{"lineNum":" 1542","line":"    __table_.rehash(__n);"},
{"lineNum":" 1543","line":"}"},
{"lineNum":" 1544","line":""},
{"lineNum":" 1545","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1546","line":"template <class _InputIterator>"},
{"lineNum":" 1547","line":"unordered_multiset<_Value, _Hash, _Pred, _Alloc>::unordered_multiset("},
{"lineNum":" 1548","line":"        _InputIterator __first, _InputIterator __last)"},
{"lineNum":" 1549","line":"{"},
{"lineNum":" 1550","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1551","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1552","line":"#endif"},
{"lineNum":" 1553","line":"    insert(__first, __last);"},
{"lineNum":" 1554","line":"}"},
{"lineNum":" 1555","line":""},
{"lineNum":" 1556","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1557","line":"template <class _InputIterator>"},
{"lineNum":" 1558","line":"unordered_multiset<_Value, _Hash, _Pred, _Alloc>::unordered_multiset("},
{"lineNum":" 1559","line":"        _InputIterator __first, _InputIterator __last, size_type __n,"},
{"lineNum":" 1560","line":"        const hasher& __hf, const key_equal& __eql)"},
{"lineNum":" 1561","line":"    : __table_(__hf, __eql)"},
{"lineNum":" 1562","line":"{"},
{"lineNum":" 1563","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1564","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1565","line":"#endif"},
{"lineNum":" 1566","line":"    __table_.rehash(__n);"},
{"lineNum":" 1567","line":"    insert(__first, __last);"},
{"lineNum":" 1568","line":"}"},
{"lineNum":" 1569","line":""},
{"lineNum":" 1570","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1571","line":"template <class _InputIterator>"},
{"lineNum":" 1572","line":"unordered_multiset<_Value, _Hash, _Pred, _Alloc>::unordered_multiset("},
{"lineNum":" 1573","line":"        _InputIterator __first, _InputIterator __last, size_type __n,"},
{"lineNum":" 1574","line":"        const hasher& __hf, const key_equal& __eql, const allocator_type& __a)"},
{"lineNum":" 1575","line":"    : __table_(__hf, __eql, __a)"},
{"lineNum":" 1576","line":"{"},
{"lineNum":" 1577","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1578","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1579","line":"#endif"},
{"lineNum":" 1580","line":"    __table_.rehash(__n);"},
{"lineNum":" 1581","line":"    insert(__first, __last);"},
{"lineNum":" 1582","line":"}"},
{"lineNum":" 1583","line":""},
{"lineNum":" 1584","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1585","line":"inline"},
{"lineNum":" 1586","line":"unordered_multiset<_Value, _Hash, _Pred, _Alloc>::unordered_multiset("},
{"lineNum":" 1587","line":"        const allocator_type& __a)"},
{"lineNum":" 1588","line":"    : __table_(__a)"},
{"lineNum":" 1589","line":"{"},
{"lineNum":" 1590","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1591","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1592","line":"#endif"},
{"lineNum":" 1593","line":"}"},
{"lineNum":" 1594","line":""},
{"lineNum":" 1595","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1596","line":"unordered_multiset<_Value, _Hash, _Pred, _Alloc>::unordered_multiset("},
{"lineNum":" 1597","line":"        const unordered_multiset& __u)"},
{"lineNum":" 1598","line":"    : __table_(__u.__table_)"},
{"lineNum":" 1599","line":"{"},
{"lineNum":" 1600","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1601","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1602","line":"#endif"},
{"lineNum":" 1603","line":"    __table_.rehash(__u.bucket_count());"},
{"lineNum":" 1604","line":"    insert(__u.begin(), __u.end());"},
{"lineNum":" 1605","line":"}"},
{"lineNum":" 1606","line":""},
{"lineNum":" 1607","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1608","line":"unordered_multiset<_Value, _Hash, _Pred, _Alloc>::unordered_multiset("},
{"lineNum":" 1609","line":"        const unordered_multiset& __u, const allocator_type& __a)"},
{"lineNum":" 1610","line":"    : __table_(__u.__table_, __a)"},
{"lineNum":" 1611","line":"{"},
{"lineNum":" 1612","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1613","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1614","line":"#endif"},
{"lineNum":" 1615","line":"    __table_.rehash(__u.bucket_count());"},
{"lineNum":" 1616","line":"    insert(__u.begin(), __u.end());"},
{"lineNum":" 1617","line":"}"},
{"lineNum":" 1618","line":""},
{"lineNum":" 1619","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1620","line":""},
{"lineNum":" 1621","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1622","line":"inline"},
{"lineNum":" 1623","line":"unordered_multiset<_Value, _Hash, _Pred, _Alloc>::unordered_multiset("},
{"lineNum":" 1624","line":"        unordered_multiset&& __u)"},
{"lineNum":" 1625","line":"    _NOEXCEPT_(is_nothrow_move_constructible<__table>::value)"},
{"lineNum":" 1626","line":"    : __table_(_VSTD::move(__u.__table_))"},
{"lineNum":" 1627","line":"{"},
{"lineNum":" 1628","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1629","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1630","line":"    __get_db()->swap(this, &__u);"},
{"lineNum":" 1631","line":"#endif"},
{"lineNum":" 1632","line":"}"},
{"lineNum":" 1633","line":""},
{"lineNum":" 1634","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1635","line":"unordered_multiset<_Value, _Hash, _Pred, _Alloc>::unordered_multiset("},
{"lineNum":" 1636","line":"        unordered_multiset&& __u, const allocator_type& __a)"},
{"lineNum":" 1637","line":"    : __table_(_VSTD::move(__u.__table_), __a)"},
{"lineNum":" 1638","line":"{"},
{"lineNum":" 1639","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1640","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1641","line":"#endif"},
{"lineNum":" 1642","line":"    if (__a != __u.get_allocator())"},
{"lineNum":" 1643","line":"    {"},
{"lineNum":" 1644","line":"        iterator __i = __u.begin();"},
{"lineNum":" 1645","line":"        while (__u.size() != 0)"},
{"lineNum":" 1646","line":"            __table_.__insert_multi(_VSTD::move(__u.__table_.remove(__i++)->__value_));"},
{"lineNum":" 1647","line":"    }"},
{"lineNum":" 1648","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1649","line":"    else"},
{"lineNum":" 1650","line":"        __get_db()->swap(this, &__u);"},
{"lineNum":" 1651","line":"#endif"},
{"lineNum":" 1652","line":"}"},
{"lineNum":" 1653","line":""},
{"lineNum":" 1654","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1655","line":"unordered_multiset<_Value, _Hash, _Pred, _Alloc>::unordered_multiset("},
{"lineNum":" 1656","line":"        initializer_list<value_type> __il)"},
{"lineNum":" 1657","line":"{"},
{"lineNum":" 1658","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1659","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1660","line":"#endif"},
{"lineNum":" 1661","line":"    insert(__il.begin(), __il.end());"},
{"lineNum":" 1662","line":"}"},
{"lineNum":" 1663","line":""},
{"lineNum":" 1664","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1665","line":"unordered_multiset<_Value, _Hash, _Pred, _Alloc>::unordered_multiset("},
{"lineNum":" 1666","line":"        initializer_list<value_type> __il, size_type __n, const hasher& __hf,"},
{"lineNum":" 1667","line":"        const key_equal& __eql)"},
{"lineNum":" 1668","line":"    : __table_(__hf, __eql)"},
{"lineNum":" 1669","line":"{"},
{"lineNum":" 1670","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1671","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1672","line":"#endif"},
{"lineNum":" 1673","line":"    __table_.rehash(__n);"},
{"lineNum":" 1674","line":"    insert(__il.begin(), __il.end());"},
{"lineNum":" 1675","line":"}"},
{"lineNum":" 1676","line":""},
{"lineNum":" 1677","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1678","line":"unordered_multiset<_Value, _Hash, _Pred, _Alloc>::unordered_multiset("},
{"lineNum":" 1679","line":"        initializer_list<value_type> __il, size_type __n, const hasher& __hf,"},
{"lineNum":" 1680","line":"        const key_equal& __eql, const allocator_type& __a)"},
{"lineNum":" 1681","line":"    : __table_(__hf, __eql, __a)"},
{"lineNum":" 1682","line":"{"},
{"lineNum":" 1683","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1684","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1685","line":"#endif"},
{"lineNum":" 1686","line":"    __table_.rehash(__n);"},
{"lineNum":" 1687","line":"    insert(__il.begin(), __il.end());"},
{"lineNum":" 1688","line":"}"},
{"lineNum":" 1689","line":""},
{"lineNum":" 1690","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1691","line":"inline"},
{"lineNum":" 1692","line":"unordered_multiset<_Value, _Hash, _Pred, _Alloc>&"},
{"lineNum":" 1693","line":"unordered_multiset<_Value, _Hash, _Pred, _Alloc>::operator=("},
{"lineNum":" 1694","line":"        unordered_multiset&& __u)"},
{"lineNum":" 1695","line":"    _NOEXCEPT_(is_nothrow_move_assignable<__table>::value)"},
{"lineNum":" 1696","line":"{"},
{"lineNum":" 1697","line":"    __table_ = _VSTD::move(__u.__table_);"},
{"lineNum":" 1698","line":"    return *this;"},
{"lineNum":" 1699","line":"}"},
{"lineNum":" 1700","line":""},
{"lineNum":" 1701","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1702","line":"inline"},
{"lineNum":" 1703","line":"unordered_multiset<_Value, _Hash, _Pred, _Alloc>&"},
{"lineNum":" 1704","line":"unordered_multiset<_Value, _Hash, _Pred, _Alloc>::operator=("},
{"lineNum":" 1705","line":"        initializer_list<value_type> __il)"},
{"lineNum":" 1706","line":"{"},
{"lineNum":" 1707","line":"    __table_.__assign_multi(__il.begin(), __il.end());"},
{"lineNum":" 1708","line":"    return *this;"},
{"lineNum":" 1709","line":"}"},
{"lineNum":" 1710","line":""},
{"lineNum":" 1711","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 1712","line":""},
{"lineNum":" 1713","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1714","line":"template <class _InputIterator>"},
{"lineNum":" 1715","line":"inline"},
{"lineNum":" 1716","line":"void"},
{"lineNum":" 1717","line":"unordered_multiset<_Value, _Hash, _Pred, _Alloc>::insert(_InputIterator __first,"},
{"lineNum":" 1718","line":"                                                         _InputIterator __last)"},
{"lineNum":" 1719","line":"{"},
{"lineNum":" 1720","line":"    for (; __first != __last; ++__first)"},
{"lineNum":" 1721","line":"        __table_.__insert_multi(*__first);"},
{"lineNum":" 1722","line":"}"},
{"lineNum":" 1723","line":""},
{"lineNum":" 1724","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1725","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1726","line":"void"},
{"lineNum":" 1727","line":"swap(unordered_multiset<_Value, _Hash, _Pred, _Alloc>& __x,"},
{"lineNum":" 1728","line":"     unordered_multiset<_Value, _Hash, _Pred, _Alloc>& __y)"},
{"lineNum":" 1729","line":"    _NOEXCEPT_(_NOEXCEPT_(__x.swap(__y)))"},
{"lineNum":" 1730","line":"{"},
{"lineNum":" 1731","line":"    __x.swap(__y);"},
{"lineNum":" 1732","line":"}"},
{"lineNum":" 1733","line":""},
{"lineNum":" 1734","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":" 1735","line":"template <class _Value, class _Hash, class _Pred, class _Alloc,"},
{"lineNum":" 1736","line":"          class _Predicate>"},
{"lineNum":" 1737","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1738","line":"    typename unordered_multiset<_Value, _Hash, _Pred, _Alloc>::size_type"},
{"lineNum":" 1739","line":"    erase_if(unordered_multiset<_Value, _Hash, _Pred, _Alloc>& __c,"},
{"lineNum":" 1740","line":"             _Predicate __pred) {"},
{"lineNum":" 1741","line":"  return _VSTD::__libcpp_erase_if_container(__c, __pred);"},
{"lineNum":" 1742","line":"}"},
{"lineNum":" 1743","line":"#endif"},
{"lineNum":" 1744","line":""},
{"lineNum":" 1745","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1746","line":"bool"},
{"lineNum":" 1747","line":"operator==(const unordered_multiset<_Value, _Hash, _Pred, _Alloc>& __x,"},
{"lineNum":" 1748","line":"           const unordered_multiset<_Value, _Hash, _Pred, _Alloc>& __y)"},
{"lineNum":" 1749","line":"{"},
{"lineNum":" 1750","line":"    if (__x.size() != __y.size())"},
{"lineNum":" 1751","line":"        return false;"},
{"lineNum":" 1752","line":"    typedef typename unordered_multiset<_Value, _Hash, _Pred, _Alloc>::const_iterator"},
{"lineNum":" 1753","line":"                                                                 const_iterator;"},
{"lineNum":" 1754","line":"    typedef pair<const_iterator, const_iterator> _EqRng;"},
{"lineNum":" 1755","line":"    for (const_iterator __i = __x.begin(), __ex = __x.end(); __i != __ex;)"},
{"lineNum":" 1756","line":"    {"},
{"lineNum":" 1757","line":"        _EqRng __xeq = __x.equal_range(*__i);"},
{"lineNum":" 1758","line":"        _EqRng __yeq = __y.equal_range(*__i);"},
{"lineNum":" 1759","line":"        if (_VSTD::distance(__xeq.first, __xeq.second) !="},
{"lineNum":" 1760","line":"            _VSTD::distance(__yeq.first, __yeq.second) ||"},
{"lineNum":" 1761","line":"                  !_VSTD::is_permutation(__xeq.first, __xeq.second, __yeq.first))"},
{"lineNum":" 1762","line":"            return false;"},
{"lineNum":" 1763","line":"        __i = __xeq.second;"},
{"lineNum":" 1764","line":"    }"},
{"lineNum":" 1765","line":"    return true;"},
{"lineNum":" 1766","line":"}"},
{"lineNum":" 1767","line":""},
{"lineNum":" 1768","line":"template <class _Value, class _Hash, class _Pred, class _Alloc>"},
{"lineNum":" 1769","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1770","line":"bool"},
{"lineNum":" 1771","line":"operator!=(const unordered_multiset<_Value, _Hash, _Pred, _Alloc>& __x,"},
{"lineNum":" 1772","line":"           const unordered_multiset<_Value, _Hash, _Pred, _Alloc>& __y)"},
{"lineNum":" 1773","line":"{"},
{"lineNum":" 1774","line":"    return !(__x == __y);"},
{"lineNum":" 1775","line":"}"},
{"lineNum":" 1776","line":""},
{"lineNum":" 1777","line":"_LIBCPP_END_NAMESPACE_STD"},
{"lineNum":" 1778","line":""},
{"lineNum":" 1779","line":"#endif // _LIBCPP_UNORDERED_SET"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 3, "covered" : 3,};
var merged_data = [];
