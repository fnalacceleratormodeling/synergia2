var data = {lines:[
{"lineNum":"    1","line":"/*============================================================================="},
{"lineNum":"    2","line":"    Copyright (c) 2001-2011 Joel de Guzman"},
{"lineNum":"    3","line":"    Copyright (c) 2001-2011 Hartmut Kaiser"},
{"lineNum":"    4","line":"    Copyright (c) 2011 Jan Frederick Eick"},
{"lineNum":"    5","line":"    Copyright (c) 2011 Christopher Jefferson"},
{"lineNum":"    6","line":"    Copyright (c) 2006 Stephen Nutt"},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"    Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    9","line":"    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"   10","line":"=============================================================================*/"},
{"lineNum":"   11","line":"#if !defined(SPIRIT_NUMERIC_UTILS_APRIL_17_2006_0816AM)"},
{"lineNum":"   12","line":"#define SPIRIT_NUMERIC_UTILS_APRIL_17_2006_0816AM"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"#if defined(_MSC_VER)"},
{"lineNum":"   15","line":"#pragma once"},
{"lineNum":"   16","line":"#endif"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"#include <boost/spirit/home/support/unused.hpp>"},
{"lineNum":"   19","line":"#include <boost/spirit/home/qi/detail/attributes.hpp>"},
{"lineNum":"   20","line":"#include <boost/spirit/home/support/char_encoding/ascii.hpp>"},
{"lineNum":"   21","line":"#include <boost/spirit/home/support/numeric_traits.hpp>"},
{"lineNum":"   22","line":"#include <boost/preprocessor/repetition/repeat.hpp>"},
{"lineNum":"   23","line":"#include <boost/preprocessor/iteration/local.hpp>"},
{"lineNum":"   24","line":"#include <boost/preprocessor/comparison/less.hpp>"},
{"lineNum":"   25","line":"#include <boost/preprocessor/control/if.hpp>"},
{"lineNum":"   26","line":"#include <boost/preprocessor/seq/elem.hpp>"},
{"lineNum":"   27","line":"#include <boost/utility/enable_if.hpp>"},
{"lineNum":"   28","line":"#include <boost/type_traits/is_integral.hpp>"},
{"lineNum":"   29","line":"#include <boost/type_traits/is_signed.hpp>"},
{"lineNum":"   30","line":"#include <boost/mpl/bool.hpp>"},
{"lineNum":"   31","line":"#include <boost/mpl/and.hpp>"},
{"lineNum":"   32","line":"#include <boost/limits.hpp>"},
{"lineNum":"   33","line":"#include <boost/static_assert.hpp>"},
{"lineNum":"   34","line":"#include <iterator> // for std::iterator_traits"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"#if defined(BOOST_MSVC)"},
{"lineNum":"   37","line":"# pragma warning(push)"},
{"lineNum":"   38","line":"# pragma warning(disable: 4127) // conditional expression is constant"},
{"lineNum":"   39","line":"#endif"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"#if !defined(SPIRIT_NUMERICS_LOOP_UNROLL)"},
{"lineNum":"   42","line":"# define SPIRIT_NUMERICS_LOOP_UNROLL 3"},
{"lineNum":"   43","line":"#endif"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"namespace boost { namespace spirit { namespace qi { namespace detail"},
{"lineNum":"   46","line":"{"},
{"lineNum":"   47","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   48","line":"    //"},
{"lineNum":"   49","line":"    //  The maximum radix digits that can be represented without"},
{"lineNum":"   50","line":"    //  overflow:"},
{"lineNum":"   51","line":"    //"},
{"lineNum":"   52","line":"    //          template<typename T, unsigned Radix>"},
{"lineNum":"   53","line":"    //          struct digits_traits::value;"},
{"lineNum":"   54","line":"    //"},
{"lineNum":"   55","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   56","line":"    template <typename T, unsigned Radix>"},
{"lineNum":"   57","line":"    struct digits_traits;"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"    template <int Digits, unsigned Radix>"},
{"lineNum":"   60","line":"    struct digits2_to_n;"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"// lookup table for log2(x) : 2 <= x <= 36"},
{"lineNum":"   63","line":"#define BOOST_SPIRIT_LOG2 (#error)(#error)                                    \\"},
{"lineNum":"   64","line":"        (1000000)(1584960)(2000000)(2321920)(2584960)(2807350)                \\"},
{"lineNum":"   65","line":"        (3000000)(3169920)(3321920)(3459430)(3584960)(3700430)                \\"},
{"lineNum":"   66","line":"        (3807350)(3906890)(4000000)(4087460)(4169920)(4247920)                \\"},
{"lineNum":"   67","line":"        (4321920)(4392310)(4459430)(4523560)(4584960)(4643850)                \\"},
{"lineNum":"   68","line":"        (4700430)(4754880)(4807350)(4857980)(4906890)(4954190)                \\"},
{"lineNum":"   69","line":"        (5000000)(5044390)(5087460)(5129280)(5169925)                         \\"},
{"lineNum":"   70","line":"    /***/"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"#define BOOST_PP_LOCAL_MACRO(Radix)                                           \\"},
{"lineNum":"   73","line":"    template <int Digits> struct digits2_to_n<Digits, Radix>                  \\"},
{"lineNum":"   74","line":"    {                                                                         \\"},
{"lineNum":"   75","line":"        BOOST_STATIC_CONSTANT(int, value = static_cast<int>(                  \\"},
{"lineNum":"   76","line":"            (Digits * 1000000) /                                              \\"},
{"lineNum":"   77","line":"                BOOST_PP_SEQ_ELEM(Radix, BOOST_SPIRIT_LOG2)));                \\"},
{"lineNum":"   78","line":"    };                                                                        \\"},
{"lineNum":"   79","line":"    /***/"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"#define BOOST_PP_LOCAL_LIMITS (2, 36)"},
{"lineNum":"   82","line":"#include BOOST_PP_LOCAL_ITERATE()"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"#undef BOOST_SPIRIT_LOG2"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"    template <typename T, unsigned Radix>"},
{"lineNum":"   87","line":"    struct digits_traits : digits2_to_n<std::numeric_limits<T>::digits, Radix>"},
{"lineNum":"   88","line":"    {"},
{"lineNum":"   89","line":"        BOOST_STATIC_ASSERT(std::numeric_limits<T>::radix == 2);"},
{"lineNum":"   90","line":"    };"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"    template <typename T>"},
{"lineNum":"   93","line":"    struct digits_traits<T, 10>"},
{"lineNum":"   94","line":"    {"},
{"lineNum":"   95","line":"        static int const value = std::numeric_limits<T>::digits10;"},
{"lineNum":"   96","line":"    };"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   99","line":"    //"},
{"lineNum":"  100","line":"    //  Traits class for radix specific number conversion"},
{"lineNum":"  101","line":"    //"},
{"lineNum":"  102","line":"    //      Test the validity of a single character:"},
{"lineNum":"  103","line":"    //"},
{"lineNum":"  104","line":"    //          template<typename Char> static bool is_valid(Char ch);"},
{"lineNum":"  105","line":"    //"},
{"lineNum":"  106","line":"    //      Convert a digit from character representation to binary"},
{"lineNum":"  107","line":"    //      representation:"},
{"lineNum":"  108","line":"    //"},
{"lineNum":"  109","line":"    //          template<typename Char> static int digit(Char ch);"},
{"lineNum":"  110","line":"    //"},
{"lineNum":"  111","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  112","line":"    template <unsigned Radix>"},
{"lineNum":"  113","line":"    struct radix_traits"},
{"lineNum":"  114","line":"    {"},
{"lineNum":"  115","line":"        template <typename Char>"},
{"lineNum":"  116","line":"        inline static bool is_valid(Char ch)"},
{"lineNum":"  117","line":"        {"},
{"lineNum":"  118","line":"            return (ch >= \'0\' && ch <= (Radix > 10 ? \'9\' : static_cast<Char>(\'0\' + Radix -1)))","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"  119","line":"                || (Radix > 10 && ch >= \'a\' && ch <= static_cast<Char>(\'a\' + Radix -10 -1))"},
{"lineNum":"  120","line":"                || (Radix > 10 && ch >= \'A\' && ch <= static_cast<Char>(\'A\' + Radix -10 -1));"},
{"lineNum":"  121","line":"        }"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"        template <typename Char>"},
{"lineNum":"  124","line":"        inline static unsigned digit(Char ch)"},
{"lineNum":"  125","line":"        {"},
{"lineNum":"  126","line":"            if (Radix <= 10 || (ch >= \'0\' && ch <= \'9\'))"},
{"lineNum":"  127","line":"                return ch - \'0\';","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  128","line":"            return spirit::char_encoding::ascii::tolower(ch) - \'a\' + 10;"},
{"lineNum":"  129","line":"        }"},
{"lineNum":"  130","line":"    };"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  133","line":"    //  positive_accumulator/negative_accumulator: Accumulator policies for"},
{"lineNum":"  134","line":"    //  extracting integers. Use positive_accumulator if number is positive."},
{"lineNum":"  135","line":"    //  Use negative_accumulator if number is negative."},
{"lineNum":"  136","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  137","line":"    template <unsigned Radix>"},
{"lineNum":"  138","line":"    struct positive_accumulator"},
{"lineNum":"  139","line":"    {"},
{"lineNum":"  140","line":"        template <typename T, typename Char>"},
{"lineNum":"  141","line":"        inline static void add(T& n, Char ch, mpl::false_) // unchecked add"},
{"lineNum":"  142","line":"        {"},
{"lineNum":"  143","line":"            const int digit = radix_traits<Radix>::digit(ch);"},
{"lineNum":"  144","line":"            n = n * T(Radix) + T(digit);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  145","line":"        }"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"        template <typename T, typename Char>"},
{"lineNum":"  148","line":"        inline static bool add(T& n, Char ch, mpl::true_) // checked add"},
{"lineNum":"  149","line":"        {"},
{"lineNum":"  150","line":"            // Ensure n *= Radix will not overflow"},
{"lineNum":"  151","line":"            T const max = (std::numeric_limits<T>::max)();"},
{"lineNum":"  152","line":"            T const val = max / Radix;"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"            if (n > val)","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  155","line":"                return false;"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"            T tmp = n * Radix;","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"            // Ensure n += digit will not overflow"},
{"lineNum":"  160","line":"            const int digit = radix_traits<Radix>::digit(ch);"},
{"lineNum":"  161","line":"            if (tmp > max - digit)","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  162","line":"                return false;"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"            n = tmp + static_cast<T>(digit);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  165","line":"            return true;"},
{"lineNum":"  166","line":"        }"},
{"lineNum":"  167","line":"    };"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"    template <unsigned Radix>"},
{"lineNum":"  170","line":"    struct negative_accumulator"},
{"lineNum":"  171","line":"    {"},
{"lineNum":"  172","line":"        template <typename T, typename Char>"},
{"lineNum":"  173","line":"        inline static void add(T& n, Char ch, mpl::false_) // unchecked subtract"},
{"lineNum":"  174","line":"        {"},
{"lineNum":"  175","line":"            const int digit = radix_traits<Radix>::digit(ch);"},
{"lineNum":"  176","line":"            n = n * T(Radix) - T(digit);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  177","line":"        }"},
{"lineNum":"  178","line":""},
{"lineNum":"  179","line":"        template <typename T, typename Char>"},
{"lineNum":"  180","line":"        inline static bool add(T& n, Char ch, mpl::true_) // checked subtract"},
{"lineNum":"  181","line":"        {"},
{"lineNum":"  182","line":"            // Ensure n *= Radix will not underflow"},
{"lineNum":"  183","line":"            T const min = (std::numeric_limits<T>::min)();"},
{"lineNum":"  184","line":"            T const val = min / T(Radix);"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"            if (n < val)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  187","line":"                return false;"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"            T tmp = n * Radix;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"            // Ensure n -= digit will not underflow"},
{"lineNum":"  192","line":"            int const digit = radix_traits<Radix>::digit(ch);"},
{"lineNum":"  193","line":"            if (tmp < min + digit)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  194","line":"                return false;"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"            n = tmp - static_cast<T>(digit);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  197","line":"            return true;"},
{"lineNum":"  198","line":"        }"},
{"lineNum":"  199","line":"    };"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  202","line":"    //  Common code for extract_int::parse specializations"},
{"lineNum":"  203","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  204","line":"    template <unsigned Radix, typename Accumulator, int MaxDigits, bool AlwaysCheckOverflow>"},
{"lineNum":"  205","line":"    struct int_extractor"},
{"lineNum":"  206","line":"    {"},
{"lineNum":"  207","line":"        template <typename Char, typename T>"},
{"lineNum":"  208","line":"        inline static bool"},
{"lineNum":"  209","line":"        call(Char ch, std::size_t count, T& n, mpl::true_)"},
{"lineNum":"  210","line":"        {"},
{"lineNum":"  211","line":"            std::size_t const overflow_free = digits_traits<T, Radix>::value - 1;"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"            if (!AlwaysCheckOverflow && (count < overflow_free))","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  214","line":"            {"},
{"lineNum":"  215","line":"                Accumulator::add(n, ch, mpl::false_());"},
{"lineNum":"  216","line":"            }"},
{"lineNum":"  217","line":"            else"},
{"lineNum":"  218","line":"            {"},
{"lineNum":"  219","line":"                if (!Accumulator::add(n, ch, mpl::true_()))"},
{"lineNum":"  220","line":"                    return false; //  over/underflow!"},
{"lineNum":"  221","line":"            }"},
{"lineNum":"  222","line":"            return true;"},
{"lineNum":"  223","line":"        }"},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"        template <typename Char, typename T>"},
{"lineNum":"  226","line":"        inline static bool"},
{"lineNum":"  227","line":"        call(Char ch, std::size_t /*count*/, T& n, mpl::false_)"},
{"lineNum":"  228","line":"        {"},
{"lineNum":"  229","line":"            // no need to check for overflow"},
{"lineNum":"  230","line":"            Accumulator::add(n, ch, mpl::false_());"},
{"lineNum":"  231","line":"            return true;"},
{"lineNum":"  232","line":"        }"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"        template <typename Char>"},
{"lineNum":"  235","line":"        inline static bool"},
{"lineNum":"  236","line":"        call(Char /*ch*/, std::size_t /*count*/, unused_type, mpl::false_)"},
{"lineNum":"  237","line":"        {"},
{"lineNum":"  238","line":"            return true;"},
{"lineNum":"  239","line":"        }"},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"        template <typename Char, typename T>"},
{"lineNum":"  242","line":"        inline static bool"},
{"lineNum":"  243","line":"        call(Char ch, std::size_t count, T& n)"},
{"lineNum":"  244","line":"        {"},
{"lineNum":"  245","line":"            return call(ch, count, n"},
{"lineNum":"  246","line":"              , mpl::bool_<"},
{"lineNum":"  247","line":"                    (   (MaxDigits < 0)"},
{"lineNum":"  248","line":"                    ||  (MaxDigits > digits_traits<T, Radix>::value)"},
{"lineNum":"  249","line":"                    )"},
{"lineNum":"  250","line":"                  && traits::check_overflow<T>::value"},
{"lineNum":"  251","line":"                >()"},
{"lineNum":"  252","line":"            );"},
{"lineNum":"  253","line":"        }"},
{"lineNum":"  254","line":"    };"},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  257","line":"    //  End of loop checking: check if the number of digits"},
{"lineNum":"  258","line":"    //  being parsed exceeds MaxDigits. Note: if MaxDigits == -1"},
{"lineNum":"  259","line":"    //  we don\'t do any checking."},
{"lineNum":"  260","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  261","line":"    template <int MaxDigits>"},
{"lineNum":"  262","line":"    struct check_max_digits"},
{"lineNum":"  263","line":"    {"},
{"lineNum":"  264","line":"        inline static bool"},
{"lineNum":"  265","line":"        call(std::size_t count)"},
{"lineNum":"  266","line":"        {"},
{"lineNum":"  267","line":"            return count < MaxDigits; // bounded"},
{"lineNum":"  268","line":"        }"},
{"lineNum":"  269","line":"    };"},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"    template <>"},
{"lineNum":"  272","line":"    struct check_max_digits<-1>"},
{"lineNum":"  273","line":"    {"},
{"lineNum":"  274","line":"        inline static bool"},
{"lineNum":"  275","line":"        call(std::size_t /*count*/)"},
{"lineNum":"  276","line":"        {"},
{"lineNum":"  277","line":"            return true; // unbounded"},
{"lineNum":"  278","line":"        }"},
{"lineNum":"  279","line":"    };"},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  282","line":"    //  extract_int: main code for extracting integers"},
{"lineNum":"  283","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  284","line":"#define SPIRIT_NUMERIC_INNER_LOOP(z, x, data)                                 \\"},
{"lineNum":"  285","line":"        if (!check_max_digits<MaxDigits>::call(count + leading_zeros)         \\"},
{"lineNum":"  286","line":"            || it == last)                                                    \\"},
{"lineNum":"  287","line":"        {                                                                     \\"},
{"lineNum":"  288","line":"            break;                                                            \\"},
{"lineNum":"  289","line":"        }                                                                     \\"},
{"lineNum":"  290","line":"        ch = *it;                                                             \\"},
{"lineNum":"  291","line":"        if (!radix_check::is_valid(ch))                                       \\"},
{"lineNum":"  292","line":"        {                                                                     \\"},
{"lineNum":"  293","line":"            break;                                                            \\"},
{"lineNum":"  294","line":"        }                                                                     \\"},
{"lineNum":"  295","line":"        if (!extractor::call(ch, count, val))                                 \\"},
{"lineNum":"  296","line":"        {                                                                     \\"},
{"lineNum":"  297","line":"            if (IgnoreOverflowDigits)                                         \\"},
{"lineNum":"  298","line":"            {                                                                 \\"},
{"lineNum":"  299","line":"                first = it;                                                   \\"},
{"lineNum":"  300","line":"            }                                                                 \\"},
{"lineNum":"  301","line":"            traits::assign_to(val, attr);                                     \\"},
{"lineNum":"  302","line":"            return IgnoreOverflowDigits;                                      \\"},
{"lineNum":"  303","line":"        }                                                                     \\"},
{"lineNum":"  304","line":"        ++it;                                                                 \\"},
{"lineNum":"  305","line":"        ++count;                                                              \\"},
{"lineNum":"  306","line":"    /**/"},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"    template <"},
{"lineNum":"  309","line":"        typename T, unsigned Radix, unsigned MinDigits, int MaxDigits"},
{"lineNum":"  310","line":"      , typename Accumulator = positive_accumulator<Radix>"},
{"lineNum":"  311","line":"      , bool Accumulate = false"},
{"lineNum":"  312","line":"      , bool IgnoreOverflowDigits = false"},
{"lineNum":"  313","line":"    >"},
{"lineNum":"  314","line":"    struct extract_int"},
{"lineNum":"  315","line":"    {"},
{"lineNum":"  316","line":"#if BOOST_WORKAROUND(BOOST_MSVC, >= 1400)"},
{"lineNum":"  317","line":"# pragma warning(push)"},
{"lineNum":"  318","line":"# pragma warning(disable: 4127)   // conditional expression is constant"},
{"lineNum":"  319","line":"#endif"},
{"lineNum":"  320","line":"        template <typename Iterator, typename Attribute>"},
{"lineNum":"  321","line":"        inline static bool"},
{"lineNum":"  322","line":"        parse_main("},
{"lineNum":"  323","line":"            Iterator& first"},
{"lineNum":"  324","line":"          , Iterator const& last"},
{"lineNum":"  325","line":"          , Attribute& attr)"},
{"lineNum":"  326","line":"        {"},
{"lineNum":"  327","line":"            typedef radix_traits<Radix> radix_check;"},
{"lineNum":"  328","line":"            typedef int_extractor<Radix, Accumulator, MaxDigits, Accumulate> extractor;"},
{"lineNum":"  329","line":"            typedef typename std::iterator_traits<Iterator>::value_type char_type;"},
{"lineNum":"  330","line":""},
{"lineNum":"  331","line":"            Iterator it = first;"},
{"lineNum":"  332","line":"            std::size_t leading_zeros = 0;"},
{"lineNum":"  333","line":"            if (!Accumulate)"},
{"lineNum":"  334","line":"            {"},
{"lineNum":"  335","line":"                // skip leading zeros"},
{"lineNum":"  336","line":"                while (it != last && *it == \'0\' && (MaxDigits < 0 || leading_zeros < static_cast< std::size_t >(MaxDigits)))"},
{"lineNum":"  337","line":"                {"},
{"lineNum":"  338","line":"                    ++it;"},
{"lineNum":"  339","line":"                    ++leading_zeros;"},
{"lineNum":"  340","line":"                }"},
{"lineNum":"  341","line":"            }"},
{"lineNum":"  342","line":""},
{"lineNum":"  343","line":"            typedef typename"},
{"lineNum":"  344","line":"                traits::attribute_type<Attribute>::type"},
{"lineNum":"  345","line":"            attribute_type;"},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"            attribute_type val = Accumulate ? attr : attribute_type(0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  348","line":"            std::size_t count = 0;"},
{"lineNum":"  349","line":"            char_type ch;"},
{"lineNum":"  350","line":""},
{"lineNum":"  351","line":"            while (true)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  352","line":"            {"},
{"lineNum":"  353","line":"                BOOST_PP_REPEAT(","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  354","line":"                    SPIRIT_NUMERICS_LOOP_UNROLL"},
{"lineNum":"  355","line":"                  , SPIRIT_NUMERIC_INNER_LOOP, _)"},
{"lineNum":"  356","line":"            }"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"            if (count + leading_zeros >= MinDigits)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  359","line":"            {"},
{"lineNum":"  360","line":"                traits::assign_to(val, attr);"},
{"lineNum":"  361","line":"                first = it;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  362","line":"                return true;"},
{"lineNum":"  363","line":"            }"},
{"lineNum":"  364","line":"            return false;"},
{"lineNum":"  365","line":"        }"},
{"lineNum":"  366","line":"#if BOOST_WORKAROUND(BOOST_MSVC, >= 1400)"},
{"lineNum":"  367","line":"# pragma warning(pop)"},
{"lineNum":"  368","line":"#endif"},
{"lineNum":"  369","line":""},
{"lineNum":"  370","line":"        template <typename Iterator>"},
{"lineNum":"  371","line":"        inline static bool"},
{"lineNum":"  372","line":"        parse("},
{"lineNum":"  373","line":"            Iterator& first"},
{"lineNum":"  374","line":"          , Iterator const& last"},
{"lineNum":"  375","line":"          , unused_type)"},
{"lineNum":"  376","line":"        {"},
{"lineNum":"  377","line":"            T n = 0; // must calculate value to detect over/underflow"},
{"lineNum":"  378","line":"            return parse_main(first, last, n);"},
{"lineNum":"  379","line":"        }"},
{"lineNum":"  380","line":""},
{"lineNum":"  381","line":"        template <typename Iterator, typename Attribute>"},
{"lineNum":"  382","line":"        inline static bool"},
{"lineNum":"  383","line":"        parse("},
{"lineNum":"  384","line":"            Iterator& first"},
{"lineNum":"  385","line":"          , Iterator const& last"},
{"lineNum":"  386","line":"          , Attribute& attr)"},
{"lineNum":"  387","line":"        {"},
{"lineNum":"  388","line":"            return parse_main(first, last, attr);"},
{"lineNum":"  389","line":"        }"},
{"lineNum":"  390","line":"    };"},
{"lineNum":"  391","line":"#undef SPIRIT_NUMERIC_INNER_LOOP"},
{"lineNum":"  392","line":""},
{"lineNum":"  393","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  394","line":"    //  extract_int: main code for extracting integers"},
{"lineNum":"  395","line":"    //  common case where MinDigits == 1 and MaxDigits = -1"},
{"lineNum":"  396","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  397","line":"#define SPIRIT_NUMERIC_INNER_LOOP(z, x, data)                                 \\"},
{"lineNum":"  398","line":"        if (it == last)                                                       \\"},
{"lineNum":"  399","line":"        {                                                                     \\"},
{"lineNum":"  400","line":"            break;                                                            \\"},
{"lineNum":"  401","line":"        }                                                                     \\"},
{"lineNum":"  402","line":"        ch = *it;                                                             \\"},
{"lineNum":"  403","line":"        if (!radix_check::is_valid(ch))                                       \\"},
{"lineNum":"  404","line":"        {                                                                     \\"},
{"lineNum":"  405","line":"            break;                                                            \\"},
{"lineNum":"  406","line":"        }                                                                     \\"},
{"lineNum":"  407","line":"        if (!extractor::call(ch, count, val))                                 \\"},
{"lineNum":"  408","line":"        {                                                                     \\"},
{"lineNum":"  409","line":"            traits::assign_to(val, attr);                                     \\"},
{"lineNum":"  410","line":"            return false;                                                     \\"},
{"lineNum":"  411","line":"        }                                                                     \\"},
{"lineNum":"  412","line":"        ++it;                                                                 \\"},
{"lineNum":"  413","line":"        ++count;                                                              \\"},
{"lineNum":"  414","line":"    /**/"},
{"lineNum":"  415","line":""},
{"lineNum":"  416","line":"    template <typename T, unsigned Radix, typename Accumulator, bool Accumulate>"},
{"lineNum":"  417","line":"    struct extract_int<T, Radix, 1, -1, Accumulator, Accumulate>"},
{"lineNum":"  418","line":"    {"},
{"lineNum":"  419","line":"#if BOOST_WORKAROUND(BOOST_MSVC, >= 1400)"},
{"lineNum":"  420","line":"# pragma warning(push)"},
{"lineNum":"  421","line":"# pragma warning(disable: 4127)   // conditional expression is constant"},
{"lineNum":"  422","line":"#endif"},
{"lineNum":"  423","line":"        template <typename Iterator, typename Attribute>"},
{"lineNum":"  424","line":"        inline static bool"},
{"lineNum":"  425","line":"        parse_main("},
{"lineNum":"  426","line":"            Iterator& first"},
{"lineNum":"  427","line":"          , Iterator const& last"},
{"lineNum":"  428","line":"          , Attribute& attr)"},
{"lineNum":"  429","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  430","line":"            typedef radix_traits<Radix> radix_check;"},
{"lineNum":"  431","line":"            typedef int_extractor<Radix, Accumulator, -1, Accumulate> extractor;"},
{"lineNum":"  432","line":"            typedef typename std::iterator_traits<Iterator>::value_type char_type;"},
{"lineNum":"  433","line":""},
{"lineNum":"  434","line":"            Iterator it = first;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  435","line":"            std::size_t count = 0;"},
{"lineNum":"  436","line":"            if (!Accumulate)"},
{"lineNum":"  437","line":"            {"},
{"lineNum":"  438","line":"                // skip leading zeros"},
{"lineNum":"  439","line":"                while (it != last && *it == \'0\')","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  440","line":"                {"},
{"lineNum":"  441","line":"                    ++it;"},
{"lineNum":"  442","line":"                    ++count;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  443","line":"                }"},
{"lineNum":"  444","line":""},
{"lineNum":"  445","line":"                if (it == last)","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  446","line":"                {"},
{"lineNum":"  447","line":"                    if (count == 0) // must have at least one digit","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  448","line":"                        return false;"},
{"lineNum":"  449","line":"                    traits::assign_to(0, attr);"},
{"lineNum":"  450","line":"                    first = it;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  451","line":"                    return true;"},
{"lineNum":"  452","line":"                }"},
{"lineNum":"  453","line":"            }"},
{"lineNum":"  454","line":""},
{"lineNum":"  455","line":"            typedef typename"},
{"lineNum":"  456","line":"                traits::attribute_type<Attribute>::type"},
{"lineNum":"  457","line":"            attribute_type;"},
{"lineNum":"  458","line":""},
{"lineNum":"  459","line":"            attribute_type val = Accumulate ? attr : attribute_type(0);"},
{"lineNum":"  460","line":"            char_type ch = *it;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  461","line":""},
{"lineNum":"  462","line":"            if (!radix_check::is_valid(ch) || !extractor::call(ch, 0, val))","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  463","line":"            {"},
{"lineNum":"  464","line":"                if (count == 0) // must have at least one digit","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  465","line":"                    return false;"},
{"lineNum":"  466","line":"                traits::assign_to(val, attr);"},
{"lineNum":"  467","line":"                first = it;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  468","line":"                return true;"},
{"lineNum":"  469","line":"            }"},
{"lineNum":"  470","line":""},
{"lineNum":"  471","line":"            // count = 0; $$$ verify: I think this is wrong $$$"},
{"lineNum":"  472","line":"            ++it;"},
{"lineNum":"  473","line":"            while (true)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  474","line":"            {"},
{"lineNum":"  475","line":"                BOOST_PP_REPEAT(","class":"lineNoCov","hits":"0","possible_hits":"38",},
{"lineNum":"  476","line":"                    SPIRIT_NUMERICS_LOOP_UNROLL"},
{"lineNum":"  477","line":"                  , SPIRIT_NUMERIC_INNER_LOOP, _)"},
{"lineNum":"  478","line":"            }"},
{"lineNum":"  479","line":""},
{"lineNum":"  480","line":"            traits::assign_to(val, attr);"},
{"lineNum":"  481","line":"            first = it;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  482","line":"            return true;"},
{"lineNum":"  483","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  484","line":"#if BOOST_WORKAROUND(BOOST_MSVC, >= 1400)"},
{"lineNum":"  485","line":"# pragma warning(pop)"},
{"lineNum":"  486","line":"#endif"},
{"lineNum":"  487","line":""},
{"lineNum":"  488","line":"        template <typename Iterator>"},
{"lineNum":"  489","line":"        inline static bool"},
{"lineNum":"  490","line":"        parse("},
{"lineNum":"  491","line":"            Iterator& first"},
{"lineNum":"  492","line":"          , Iterator const& last"},
{"lineNum":"  493","line":"          , unused_type)"},
{"lineNum":"  494","line":"        {"},
{"lineNum":"  495","line":"            T n = 0; // must calculate value to detect over/underflow"},
{"lineNum":"  496","line":"            return parse_main(first, last, n);"},
{"lineNum":"  497","line":"        }"},
{"lineNum":"  498","line":""},
{"lineNum":"  499","line":"        template <typename Iterator, typename Attribute>"},
{"lineNum":"  500","line":"        inline static bool"},
{"lineNum":"  501","line":"        parse("},
{"lineNum":"  502","line":"            Iterator& first"},
{"lineNum":"  503","line":"          , Iterator const& last"},
{"lineNum":"  504","line":"          , Attribute& attr)"},
{"lineNum":"  505","line":"        {"},
{"lineNum":"  506","line":"            return parse_main(first, last, attr);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  507","line":"        }"},
{"lineNum":"  508","line":"    };"},
{"lineNum":"  509","line":""},
{"lineNum":"  510","line":"#undef SPIRIT_NUMERIC_INNER_LOOP"},
{"lineNum":"  511","line":"}}}}"},
{"lineNum":"  512","line":""},
{"lineNum":"  513","line":"#if defined(BOOST_MSVC)"},
{"lineNum":"  514","line":"# pragma warning(pop)"},
{"lineNum":"  515","line":"#endif"},
{"lineNum":"  516","line":""},
{"lineNum":"  517","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 34, "covered" : 0,};
var merged_data = [];
