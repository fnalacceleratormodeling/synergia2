var data = {lines:[
{"lineNum":"    1","line":"#ifndef OPERATOR_H_"},
{"lineNum":"    2","line":"#define OPERATOR_H_"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#include <string>"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"#include \"synergia/lattice/lattice_element_slice.h\""},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"#include \"synergia/simulation/bunch_simulator.h\""},
{"lineNum":"    9","line":"#include \"synergia/simulation/independent_operation.h\""},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"#include \"synergia/utils/logger.h\""},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"class Propagator;"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"class Operator"},
{"lineNum":"   16","line":"{"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"private:"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"    std::string name;"},
{"lineNum":"   21","line":"    std::string type;"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"    double time_fraction;"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"private:"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"    virtual void create_operations_impl("},
{"lineNum":"   28","line":"            Lattice const & lattice) = 0;"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"    virtual void apply_impl("},
{"lineNum":"   31","line":"            Bunch_simulator & simulator,"},
{"lineNum":"   32","line":"            double time_step,"},
{"lineNum":"   33","line":"            Logger & logger) = 0;"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"    virtual void print_impl("},
{"lineNum":"   36","line":"            Logger & logger) const = 0;"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"public:"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"    Operator(std::string const & name, std::string const & type, double time)"},
{"lineNum":"   41","line":"        : name(name), type(type), time_fraction(time)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   42","line":"    { }","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"    virtual ~Operator() = default;","class":"lineNoCov","hits":"0","possible_hits":"25",},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"    std::string const & get_name() const { return name; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   47","line":"    std::string const & get_type() const { return type; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   48","line":"    double get_time_fraction() const { return time_fraction; }"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"    void create_operations(Lattice const & lattice)"},
{"lineNum":"   51","line":"    { create_operations_impl(lattice); }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"    void apply(Bunch_simulator & simulator, double time_step, Logger & logger)"},
{"lineNum":"   54","line":"    { apply_impl(simulator, time_step * time_fraction, logger); }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"    void print(Logger & logger) const"},
{"lineNum":"   57","line":"    {"},
{"lineNum":"   58","line":"        logger(LoggerV::DEBUG)"},
{"lineNum":"   59","line":"            << \"operator name = \" << name"},
{"lineNum":"   60","line":"            << \", type = \" << type"},
{"lineNum":"   61","line":"            << \", time_fraction = \" << time_fraction << \"\\n\";"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"        print_impl(logger);"},
{"lineNum":"   64","line":"    }"},
{"lineNum":"   65","line":"};"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"// collective"},
{"lineNum":"   69","line":"class Collective_operator : public Operator","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   70","line":"{"},
{"lineNum":"   71","line":"private:"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"    void create_operations_impl(Lattice const & lattice) final { }","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   74","line":"    void print_impl(Logger & logger) const override { }","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"public:"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"    Collective_operator(std::string const & name, double time)"},
{"lineNum":"   79","line":"        : Operator(name, \"collective\", time)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   80","line":"    { }","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   81","line":"};"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"// Independent"},
{"lineNum":"   85","line":"class Independent_operator : public Operator","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   86","line":"{"},
{"lineNum":"   87","line":"private:"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"    void apply_impl("},
{"lineNum":"   90","line":"            Bunch_simulator & simulator,"},
{"lineNum":"   91","line":"            double time_step,"},
{"lineNum":"   92","line":"            Logger & logger) override;"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"    void create_operations_impl("},
{"lineNum":"   95","line":"            Lattice const & lattice) override;"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"    void print_impl("},
{"lineNum":"   98","line":"            Logger & logger) const override;"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"    bool need_update("},
{"lineNum":"  101","line":"            Reference_particle const & ref,"},
{"lineNum":"  102","line":"            Logger & logger);"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"    void update_operations("},
{"lineNum":"  105","line":"            Reference_particle const & ref);"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"private:"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"    std::vector<Lattice_element_slice> slices;"},
{"lineNum":"  111","line":"    std::vector<std::unique_ptr<Independent_operation>> operations;"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"private:"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"#if 0"},
{"lineNum":"  116","line":"    Lattice_element_slices slices;"},
{"lineNum":"  117","line":"    Independent_operations operations;"},
{"lineNum":"  118","line":"    std::list<long int > operations_revisions;"},
{"lineNum":"  119","line":"    Reference_particle operations_reference_particle;"},
{"lineNum":"  120","line":"    Operation_extractor_map_sptr operation_extractor_map_sptr;"},
{"lineNum":"  121","line":"    Aperture_operation_extractor_map_sptr aperture_operation_extractor_map_sptr;"},
{"lineNum":"  122","line":"    bool have_operations;"},
{"lineNum":"  123","line":"#endif"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"public:"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"    Independent_operator(std::string const & name, double time);"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"    template<class... Args>"},
{"lineNum":"  130","line":"    Independent_operator & append_slice(Args && ... args)"},
{"lineNum":"  131","line":"    { slices.emplace_back(std::forward<Args>(args)...); return *this; }","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"    std::vector<Lattice_element_slice> const & get_slices() const"},
{"lineNum":"  134","line":"    { return slices; }"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"    friend class Propagator;"},
{"lineNum":"  137","line":"};"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"#endif /* OPERATOR_H_ */"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 14, "covered" : 0,};
var merged_data = [];
