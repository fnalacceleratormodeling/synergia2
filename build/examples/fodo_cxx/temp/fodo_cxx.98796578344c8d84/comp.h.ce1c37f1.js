var data = {lines:[
{"lineNum":"    1","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    2","line":"//"},
{"lineNum":"    3","line":"// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions."},
{"lineNum":"    4","line":"// See https://llvm.org/LICENSE.txt for license information."},
{"lineNum":"    5","line":"// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception"},
{"lineNum":"    6","line":"//"},
{"lineNum":"    7","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"#ifndef _LIBCPP___ALGORITHM_COMP_H"},
{"lineNum":"   10","line":"#define _LIBCPP___ALGORITHM_COMP_H"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"#include <__config>"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"},
{"lineNum":"   15","line":"#pragma GCC system_header"},
{"lineNum":"   16","line":"#endif"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"_LIBCPP_PUSH_MACROS"},
{"lineNum":"   19","line":"#include <__undef_macros>"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"_LIBCPP_BEGIN_NAMESPACE_STD"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"// I\'d like to replace these with _VSTD::equal_to<void>, but can\'t because:"},
{"lineNum":"   24","line":"//   * That only works with C++14 and later, and"},
{"lineNum":"   25","line":"//   * We haven\'t included <functional> here."},
{"lineNum":"   26","line":"template <class _T1, class _T2 = _T1>"},
{"lineNum":"   27","line":"struct __equal_to"},
{"lineNum":"   28","line":"{"},
{"lineNum":"   29","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 bool operator()(const _T1& __x, const _T1& __y) const {return __x == __y;}"},
{"lineNum":"   30","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 bool operator()(const _T1& __x, const _T2& __y) const {return __x == __y;}"},
{"lineNum":"   31","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 bool operator()(const _T2& __x, const _T1& __y) const {return __x == __y;}"},
{"lineNum":"   32","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 bool operator()(const _T2& __x, const _T2& __y) const {return __x == __y;}"},
{"lineNum":"   33","line":"};"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"template <class _T1>"},
{"lineNum":"   36","line":"struct __equal_to<_T1, _T1>"},
{"lineNum":"   37","line":"{"},
{"lineNum":"   38","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"   39","line":"    bool operator()(const _T1& __x, const _T1& __y) const {return __x == __y;}","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"   40","line":"};"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"template <class _T1>"},
{"lineNum":"   43","line":"struct __equal_to<const _T1, _T1>"},
{"lineNum":"   44","line":"{"},
{"lineNum":"   45","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"   46","line":"    bool operator()(const _T1& __x, const _T1& __y) const {return __x == __y;}"},
{"lineNum":"   47","line":"};"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"template <class _T1>"},
{"lineNum":"   50","line":"struct __equal_to<_T1, const _T1>"},
{"lineNum":"   51","line":"{"},
{"lineNum":"   52","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"   53","line":"    bool operator()(const _T1& __x, const _T1& __y) const {return __x == __y;}"},
{"lineNum":"   54","line":"};"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"template <class _T1, class _T2 = _T1>"},
{"lineNum":"   57","line":"struct __less"},
{"lineNum":"   58","line":"{"},
{"lineNum":"   59","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"   60","line":"    bool operator()(const _T1& __x, const _T1& __y) const {return __x < __y;}"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"   63","line":"    bool operator()(const _T1& __x, const _T2& __y) const {return __x < __y;}"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"   66","line":"    bool operator()(const _T2& __x, const _T1& __y) const {return __x < __y;}"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"   69","line":"    bool operator()(const _T2& __x, const _T2& __y) const {return __x < __y;}"},
{"lineNum":"   70","line":"};"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"template <class _T1>"},
{"lineNum":"   73","line":"struct __less<_T1, _T1>"},
{"lineNum":"   74","line":"{"},
{"lineNum":"   75","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"   76","line":"    bool operator()(const _T1& __x, const _T1& __y) const {return __x < __y;}","class":"linePartCov","hits":"1","order":"441","possible_hits":"974",},
{"lineNum":"   77","line":"};"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"template <class _T1>"},
{"lineNum":"   80","line":"struct __less<const _T1, _T1>"},
{"lineNum":"   81","line":"{"},
{"lineNum":"   82","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"   83","line":"    bool operator()(const _T1& __x, const _T1& __y) const {return __x < __y;}"},
{"lineNum":"   84","line":"};"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"template <class _T1>"},
{"lineNum":"   87","line":"struct __less<_T1, const _T1>"},
{"lineNum":"   88","line":"{"},
{"lineNum":"   89","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"   90","line":"    bool operator()(const _T1& __x, const _T1& __y) const {return __x < __y;}"},
{"lineNum":"   91","line":"};"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"_LIBCPP_END_NAMESPACE_STD"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"_LIBCPP_POP_MACROS"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"#endif // _LIBCPP___ALGORITHM_COMP_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 2, "covered" : 1,};
var merged_data = [];
