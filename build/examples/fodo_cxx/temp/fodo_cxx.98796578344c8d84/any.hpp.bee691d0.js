var data = {lines:[
{"lineNum":"    1","line":"/*============================================================================="},
{"lineNum":"    2","line":"    Copyright (c) 2001-2011 Joel de Guzman"},
{"lineNum":"    3","line":"    Copyright (c) 2005 Eric Niebler"},
{"lineNum":"    4","line":"    Copyright (c) 2007 Dan Marsden"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"    Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    7","line":"    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    8","line":"==============================================================================*/"},
{"lineNum":"    9","line":"#if !defined(FUSION_ANY_05052005_1229)"},
{"lineNum":"   10","line":"#define FUSION_ANY_05052005_1229"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"#include <boost/fusion/support/config.hpp>"},
{"lineNum":"   13","line":"#include <boost/mpl/bool.hpp>"},
{"lineNum":"   14","line":"#include <boost/fusion/sequence/intrinsic/begin.hpp>"},
{"lineNum":"   15","line":"#include <boost/fusion/sequence/intrinsic/end.hpp>"},
{"lineNum":"   16","line":"#include <boost/fusion/iterator/advance.hpp>"},
{"lineNum":"   17","line":"#include <boost/fusion/iterator/equal_to.hpp>"},
{"lineNum":"   18","line":"#include <boost/fusion/iterator/next.hpp>"},
{"lineNum":"   19","line":"#include <boost/fusion/iterator/deref.hpp>"},
{"lineNum":"   20","line":"#include <boost/fusion/iterator/distance.hpp>"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"namespace boost { namespace fusion {"},
{"lineNum":"   23","line":"    struct random_access_traversal_tag;"},
{"lineNum":"   24","line":"namespace detail"},
{"lineNum":"   25","line":"{"},
{"lineNum":"   26","line":"    template <typename First, typename Last, typename F>"},
{"lineNum":"   27","line":"    BOOST_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"   28","line":"    inline bool"},
{"lineNum":"   29","line":"    linear_any(First const&, Last const&, F const&, mpl::true_)"},
{"lineNum":"   30","line":"    {"},
{"lineNum":"   31","line":"        return false;"},
{"lineNum":"   32","line":"    }"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"    template <typename First, typename Last, typename F>"},
{"lineNum":"   35","line":"    BOOST_CXX14_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"   36","line":"    inline bool"},
{"lineNum":"   37","line":"    linear_any(First const& first, Last const& last, F& f, mpl::false_)"},
{"lineNum":"   38","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   39","line":"        typename result_of::deref<First>::type x = *first;"},
{"lineNum":"   40","line":"        return f(x) ||","class":"lineNoCov","hits":"0","possible_hits":"34",},
{"lineNum":"   41","line":"            detail::linear_any(","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   42","line":"                fusion::next(first)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   43","line":"              , last"},
{"lineNum":"   44","line":"              , f"},
{"lineNum":"   45","line":"              , result_of::equal_to<typename result_of::next<First>::type, Last>());"},
{"lineNum":"   46","line":"    }"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"    template <typename Sequence, typename F, typename Tag>"},
{"lineNum":"   49","line":"    BOOST_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"   50","line":"    inline bool"},
{"lineNum":"   51","line":"    any(Sequence const& seq, F f, Tag)"},
{"lineNum":"   52","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   53","line":"        return detail::linear_any(","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   54","line":"                fusion::begin(seq)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   55","line":"              , fusion::end(seq)"},
{"lineNum":"   56","line":"              , f"},
{"lineNum":"   57","line":"              , result_of::equal_to<"},
{"lineNum":"   58","line":"                    typename result_of::begin<Sequence>::type"},
{"lineNum":"   59","line":"                  , typename result_of::end<Sequence>::type>());"},
{"lineNum":"   60","line":"    }"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"    template<int N>"},
{"lineNum":"   63","line":"    struct unrolled_any"},
{"lineNum":"   64","line":"    {"},
{"lineNum":"   65","line":"        template <typename It, typename F>"},
{"lineNum":"   66","line":"        BOOST_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"   67","line":"        static bool call(It const& it, F f)"},
{"lineNum":"   68","line":"        {"},
{"lineNum":"   69","line":"            return"},
{"lineNum":"   70","line":"                f(*it) ||"},
{"lineNum":"   71","line":"                f(*fusion::advance_c<1>(it))||"},
{"lineNum":"   72","line":"                f(*fusion::advance_c<2>(it)) ||"},
{"lineNum":"   73","line":"                f(*fusion::advance_c<3>(it)) ||"},
{"lineNum":"   74","line":"                detail::unrolled_any<N-4>::call(fusion::advance_c<4>(it), f);"},
{"lineNum":"   75","line":"        }"},
{"lineNum":"   76","line":"    };"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"    template<>"},
{"lineNum":"   79","line":"    struct unrolled_any<3>"},
{"lineNum":"   80","line":"    {"},
{"lineNum":"   81","line":"        template <typename It, typename F>"},
{"lineNum":"   82","line":"        BOOST_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"   83","line":"        static bool call(It const& it, F f)"},
{"lineNum":"   84","line":"        {"},
{"lineNum":"   85","line":"            return"},
{"lineNum":"   86","line":"                f(*it) ||"},
{"lineNum":"   87","line":"                f(*fusion::advance_c<1>(it)) ||"},
{"lineNum":"   88","line":"                f(*fusion::advance_c<2>(it));"},
{"lineNum":"   89","line":"        }"},
{"lineNum":"   90","line":"    };"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"    template<>"},
{"lineNum":"   93","line":"    struct unrolled_any<2>"},
{"lineNum":"   94","line":"    {"},
{"lineNum":"   95","line":"        template <typename It, typename F>"},
{"lineNum":"   96","line":"        BOOST_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"   97","line":"        static bool call(It const& it, F f)"},
{"lineNum":"   98","line":"        {"},
{"lineNum":"   99","line":"            return"},
{"lineNum":"  100","line":"                f(*it) ||"},
{"lineNum":"  101","line":"                f(*fusion::advance_c<1>(it));"},
{"lineNum":"  102","line":"        }"},
{"lineNum":"  103","line":"    };"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"    template<>"},
{"lineNum":"  106","line":"    struct unrolled_any<1>"},
{"lineNum":"  107","line":"    {"},
{"lineNum":"  108","line":"        template <typename It, typename F>"},
{"lineNum":"  109","line":"        BOOST_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"  110","line":"        static bool call(It const& it, F f)"},
{"lineNum":"  111","line":"        {"},
{"lineNum":"  112","line":"            return f(*it);"},
{"lineNum":"  113","line":"        }"},
{"lineNum":"  114","line":"    };"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"    template<>"},
{"lineNum":"  117","line":"    struct unrolled_any<0>"},
{"lineNum":"  118","line":"    {"},
{"lineNum":"  119","line":"        template <typename It, typename F>"},
{"lineNum":"  120","line":"        BOOST_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"  121","line":"        static bool call(It const&, F)"},
{"lineNum":"  122","line":"        {"},
{"lineNum":"  123","line":"            return false;"},
{"lineNum":"  124","line":"        }"},
{"lineNum":"  125","line":"    };"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"    template <typename Sequence, typename F>"},
{"lineNum":"  128","line":"    BOOST_CONSTEXPR BOOST_FUSION_GPU_ENABLED"},
{"lineNum":"  129","line":"    inline bool"},
{"lineNum":"  130","line":"    any(Sequence const& seq, F f, random_access_traversal_tag)"},
{"lineNum":"  131","line":"    {"},
{"lineNum":"  132","line":"        typedef typename result_of::begin<Sequence>::type begin;"},
{"lineNum":"  133","line":"        typedef typename result_of::end<Sequence>::type end;"},
{"lineNum":"  134","line":"        return detail::unrolled_any<result_of::distance<begin, end>::type::value>::call("},
{"lineNum":"  135","line":"            fusion::begin(seq), f);"},
{"lineNum":"  136","line":"    }"},
{"lineNum":"  137","line":"}}}"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"#endif"},
{"lineNum":"  140","line":""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 7, "covered" : 0,};
var merged_data = [];
