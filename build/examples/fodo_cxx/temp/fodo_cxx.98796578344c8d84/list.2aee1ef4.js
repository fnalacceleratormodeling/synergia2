var data = {lines:[
{"lineNum":"    1","line":"// -*- C++ -*-"},
{"lineNum":"    2","line":"//===---------------------------- list ------------------------------------===//"},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions."},
{"lineNum":"    5","line":"// See https://llvm.org/LICENSE.txt for license information."},
{"lineNum":"    6","line":"// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef _LIBCPP_LIST"},
{"lineNum":"   11","line":"#define _LIBCPP_LIST"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"/*"},
{"lineNum":"   14","line":"    list synopsis"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"namespace std"},
{"lineNum":"   17","line":"{"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"template <class T, class Alloc = allocator<T> >"},
{"lineNum":"   20","line":"class list"},
{"lineNum":"   21","line":"{"},
{"lineNum":"   22","line":"public:"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"    // types:"},
{"lineNum":"   25","line":"    typedef T value_type;"},
{"lineNum":"   26","line":"    typedef Alloc allocator_type;"},
{"lineNum":"   27","line":"    typedef typename allocator_type::reference reference;"},
{"lineNum":"   28","line":"    typedef typename allocator_type::const_reference const_reference;"},
{"lineNum":"   29","line":"    typedef typename allocator_type::pointer pointer;"},
{"lineNum":"   30","line":"    typedef typename allocator_type::const_pointer const_pointer;"},
{"lineNum":"   31","line":"    typedef implementation-defined iterator;"},
{"lineNum":"   32","line":"    typedef implementation-defined const_iterator;"},
{"lineNum":"   33","line":"    typedef implementation-defined size_type;"},
{"lineNum":"   34","line":"    typedef implementation-defined difference_type;"},
{"lineNum":"   35","line":"    typedef reverse_iterator<iterator> reverse_iterator;"},
{"lineNum":"   36","line":"    typedef reverse_iterator<const_iterator> const_reverse_iterator;"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"    list()"},
{"lineNum":"   39","line":"        noexcept(is_nothrow_default_constructible<allocator_type>::value);"},
{"lineNum":"   40","line":"    explicit list(const allocator_type& a);"},
{"lineNum":"   41","line":"    explicit list(size_type n);"},
{"lineNum":"   42","line":"    explicit list(size_type n, const allocator_type& a); // C++14"},
{"lineNum":"   43","line":"    list(size_type n, const value_type& value);"},
{"lineNum":"   44","line":"    list(size_type n, const value_type& value, const allocator_type& a);"},
{"lineNum":"   45","line":"    template <class Iter>"},
{"lineNum":"   46","line":"        list(Iter first, Iter last);"},
{"lineNum":"   47","line":"    template <class Iter>"},
{"lineNum":"   48","line":"        list(Iter first, Iter last, const allocator_type& a);"},
{"lineNum":"   49","line":"    list(const list& x);"},
{"lineNum":"   50","line":"    list(const list&, const allocator_type& a);"},
{"lineNum":"   51","line":"    list(list&& x)"},
{"lineNum":"   52","line":"        noexcept(is_nothrow_move_constructible<allocator_type>::value);"},
{"lineNum":"   53","line":"    list(list&&, const allocator_type& a);"},
{"lineNum":"   54","line":"    list(initializer_list<value_type>);"},
{"lineNum":"   55","line":"    list(initializer_list<value_type>, const allocator_type& a);"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"    ~list();"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"    list& operator=(const list& x);"},
{"lineNum":"   60","line":"    list& operator=(list&& x)"},
{"lineNum":"   61","line":"        noexcept("},
{"lineNum":"   62","line":"             allocator_type::propagate_on_container_move_assignment::value &&"},
{"lineNum":"   63","line":"             is_nothrow_move_assignable<allocator_type>::value);"},
{"lineNum":"   64","line":"    list& operator=(initializer_list<value_type>);"},
{"lineNum":"   65","line":"    template <class Iter>"},
{"lineNum":"   66","line":"        void assign(Iter first, Iter last);"},
{"lineNum":"   67","line":"    void assign(size_type n, const value_type& t);"},
{"lineNum":"   68","line":"    void assign(initializer_list<value_type>);"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"    allocator_type get_allocator() const noexcept;"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"    iterator begin() noexcept;"},
{"lineNum":"   73","line":"    const_iterator begin() const noexcept;"},
{"lineNum":"   74","line":"    iterator end() noexcept;"},
{"lineNum":"   75","line":"    const_iterator end() const noexcept;"},
{"lineNum":"   76","line":"    reverse_iterator rbegin() noexcept;"},
{"lineNum":"   77","line":"    const_reverse_iterator rbegin() const noexcept;"},
{"lineNum":"   78","line":"    reverse_iterator rend() noexcept;"},
{"lineNum":"   79","line":"    const_reverse_iterator rend() const noexcept;"},
{"lineNum":"   80","line":"    const_iterator cbegin() const noexcept;"},
{"lineNum":"   81","line":"    const_iterator cend() const noexcept;"},
{"lineNum":"   82","line":"    const_reverse_iterator crbegin() const noexcept;"},
{"lineNum":"   83","line":"    const_reverse_iterator crend() const noexcept;"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"    reference front();"},
{"lineNum":"   86","line":"    const_reference front() const;"},
{"lineNum":"   87","line":"    reference back();"},
{"lineNum":"   88","line":"    const_reference back() const;"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"    bool empty() const noexcept;"},
{"lineNum":"   91","line":"    size_type size() const noexcept;"},
{"lineNum":"   92","line":"    size_type max_size() const noexcept;"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"    template <class... Args>"},
{"lineNum":"   95","line":"        reference emplace_front(Args&&... args); // reference in C++17"},
{"lineNum":"   96","line":"    void pop_front();"},
{"lineNum":"   97","line":"    template <class... Args>"},
{"lineNum":"   98","line":"        reference emplace_back(Args&&... args);  // reference in C++17"},
{"lineNum":"   99","line":"    void pop_back();"},
{"lineNum":"  100","line":"    void push_front(const value_type& x);"},
{"lineNum":"  101","line":"    void push_front(value_type&& x);"},
{"lineNum":"  102","line":"    void push_back(const value_type& x);"},
{"lineNum":"  103","line":"    void push_back(value_type&& x);"},
{"lineNum":"  104","line":"    template <class... Args>"},
{"lineNum":"  105","line":"        iterator emplace(const_iterator position, Args&&... args);"},
{"lineNum":"  106","line":"    iterator insert(const_iterator position, const value_type& x);"},
{"lineNum":"  107","line":"    iterator insert(const_iterator position, value_type&& x);"},
{"lineNum":"  108","line":"    iterator insert(const_iterator position, size_type n, const value_type& x);"},
{"lineNum":"  109","line":"    template <class Iter>"},
{"lineNum":"  110","line":"        iterator insert(const_iterator position, Iter first, Iter last);"},
{"lineNum":"  111","line":"    iterator insert(const_iterator position, initializer_list<value_type> il);"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"    iterator erase(const_iterator position);"},
{"lineNum":"  114","line":"    iterator erase(const_iterator position, const_iterator last);"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"    void resize(size_type sz);"},
{"lineNum":"  117","line":"    void resize(size_type sz, const value_type& c);"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"    void swap(list&)"},
{"lineNum":"  120","line":"        noexcept(allocator_traits<allocator_type>::is_always_equal::value);  // C++17"},
{"lineNum":"  121","line":"    void clear() noexcept;"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"    void splice(const_iterator position, list& x);"},
{"lineNum":"  124","line":"    void splice(const_iterator position, list&& x);"},
{"lineNum":"  125","line":"    void splice(const_iterator position, list& x, const_iterator i);"},
{"lineNum":"  126","line":"    void splice(const_iterator position, list&& x, const_iterator i);"},
{"lineNum":"  127","line":"    void splice(const_iterator position, list& x, const_iterator first,"},
{"lineNum":"  128","line":"                                                  const_iterator last);"},
{"lineNum":"  129","line":"    void splice(const_iterator position, list&& x, const_iterator first,"},
{"lineNum":"  130","line":"                                                  const_iterator last);"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"    size_type remove(const value_type& value);       // void before C++20"},
{"lineNum":"  133","line":"    template <class Pred>"},
{"lineNum":"  134","line":"      size_type remove_if(Pred pred);                // void before C++20"},
{"lineNum":"  135","line":"    size_type unique();                              // void before C++20"},
{"lineNum":"  136","line":"    template <class BinaryPredicate>"},
{"lineNum":"  137","line":"      size_type unique(BinaryPredicate binary_pred); // void before C++20"},
{"lineNum":"  138","line":"    void merge(list& x);"},
{"lineNum":"  139","line":"    void merge(list&& x);"},
{"lineNum":"  140","line":"    template <class Compare>"},
{"lineNum":"  141","line":"        void merge(list& x, Compare comp);"},
{"lineNum":"  142","line":"    template <class Compare>"},
{"lineNum":"  143","line":"        void merge(list&& x, Compare comp);"},
{"lineNum":"  144","line":"    void sort();"},
{"lineNum":"  145","line":"    template <class Compare>"},
{"lineNum":"  146","line":"        void sort(Compare comp);"},
{"lineNum":"  147","line":"    void reverse() noexcept;"},
{"lineNum":"  148","line":"};"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"template <class InputIterator, class Allocator = allocator<typename iterator_traits<InputIterator>::value_type>>"},
{"lineNum":"  152","line":"    list(InputIterator, InputIterator, Allocator = Allocator())"},
{"lineNum":"  153","line":"    -> list<typename iterator_traits<InputIterator>::value_type, Allocator>;  // C++17"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"template <class T, class Alloc>"},
{"lineNum":"  156","line":"    bool operator==(const list<T,Alloc>& x, const list<T,Alloc>& y);"},
{"lineNum":"  157","line":"template <class T, class Alloc>"},
{"lineNum":"  158","line":"    bool operator< (const list<T,Alloc>& x, const list<T,Alloc>& y);"},
{"lineNum":"  159","line":"template <class T, class Alloc>"},
{"lineNum":"  160","line":"    bool operator!=(const list<T,Alloc>& x, const list<T,Alloc>& y);"},
{"lineNum":"  161","line":"template <class T, class Alloc>"},
{"lineNum":"  162","line":"    bool operator> (const list<T,Alloc>& x, const list<T,Alloc>& y);"},
{"lineNum":"  163","line":"template <class T, class Alloc>"},
{"lineNum":"  164","line":"    bool operator>=(const list<T,Alloc>& x, const list<T,Alloc>& y);"},
{"lineNum":"  165","line":"template <class T, class Alloc>"},
{"lineNum":"  166","line":"    bool operator<=(const list<T,Alloc>& x, const list<T,Alloc>& y);"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"template <class T, class Alloc>"},
{"lineNum":"  169","line":"    void swap(list<T,Alloc>& x, list<T,Alloc>& y)"},
{"lineNum":"  170","line":"         noexcept(noexcept(x.swap(y)));"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"template <class T, class Allocator, class U>"},
{"lineNum":"  173","line":"    typename list<T, Allocator>::size_type"},
{"lineNum":"  174","line":"    erase(list<T, Allocator>& c, const U& value);       // C++20"},
{"lineNum":"  175","line":"template <class T, class Allocator, class Predicate>"},
{"lineNum":"  176","line":"    typename list<T, Allocator>::size_type"},
{"lineNum":"  177","line":"    erase_if(list<T, Allocator>& c, Predicate pred);    // C++20"},
{"lineNum":"  178","line":""},
{"lineNum":"  179","line":"}  // std"},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"*/"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"#include <__config>"},
{"lineNum":"  184","line":"#include <__debug>"},
{"lineNum":"  185","line":"#include <__utility/forward.h>"},
{"lineNum":"  186","line":"#include <algorithm>"},
{"lineNum":"  187","line":"#include <initializer_list>"},
{"lineNum":"  188","line":"#include <iterator>"},
{"lineNum":"  189","line":"#include <limits>"},
{"lineNum":"  190","line":"#include <memory>"},
{"lineNum":"  191","line":"#include <type_traits>"},
{"lineNum":"  192","line":"#include <version>"},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"},
{"lineNum":"  195","line":"#pragma GCC system_header"},
{"lineNum":"  196","line":"#endif"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"_LIBCPP_PUSH_MACROS"},
{"lineNum":"  199","line":"#include <__undef_macros>"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"_LIBCPP_BEGIN_NAMESPACE_STD"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"template <class _Tp, class _VoidPtr> struct __list_node;"},
{"lineNum":"  205","line":"template <class _Tp, class _VoidPtr> struct __list_node_base;"},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"template <class _Tp, class _VoidPtr>"},
{"lineNum":"  208","line":"struct __list_node_pointer_traits {"},
{"lineNum":"  209","line":"  typedef typename __rebind_pointer<_VoidPtr, __list_node<_Tp, _VoidPtr> >::type"},
{"lineNum":"  210","line":"        __node_pointer;"},
{"lineNum":"  211","line":"  typedef typename __rebind_pointer<_VoidPtr, __list_node_base<_Tp, _VoidPtr> >::type"},
{"lineNum":"  212","line":"        __base_pointer;"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"#if defined(_LIBCPP_ABI_LIST_REMOVE_NODE_POINTER_UB)"},
{"lineNum":"  215","line":"  typedef __base_pointer __link_pointer;"},
{"lineNum":"  216","line":"#else"},
{"lineNum":"  217","line":"  typedef typename conditional<"},
{"lineNum":"  218","line":"          is_pointer<_VoidPtr>::value,"},
{"lineNum":"  219","line":"          __base_pointer,"},
{"lineNum":"  220","line":"          __node_pointer"},
{"lineNum":"  221","line":"  >::type __link_pointer;"},
{"lineNum":"  222","line":"#endif"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"  typedef typename conditional<"},
{"lineNum":"  225","line":"          is_same<__link_pointer, __node_pointer>::value,"},
{"lineNum":"  226","line":"          __base_pointer,"},
{"lineNum":"  227","line":"          __node_pointer"},
{"lineNum":"  228","line":"  >::type __non_link_pointer;"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"  static _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  231","line":"  __link_pointer __unsafe_link_pointer_cast(__link_pointer __p) {"},
{"lineNum":"  232","line":"      return __p;"},
{"lineNum":"  233","line":"  }"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"  static _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  236","line":"  __link_pointer __unsafe_link_pointer_cast(__non_link_pointer __p) {"},
{"lineNum":"  237","line":"      return static_cast<__link_pointer>(static_cast<_VoidPtr>(__p));"},
{"lineNum":"  238","line":"  }"},
{"lineNum":"  239","line":""},
{"lineNum":"  240","line":"};"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"template <class _Tp, class _VoidPtr>"},
{"lineNum":"  243","line":"struct __list_node_base"},
{"lineNum":"  244","line":"{"},
{"lineNum":"  245","line":"    typedef __list_node_pointer_traits<_Tp, _VoidPtr> _NodeTraits;"},
{"lineNum":"  246","line":"    typedef typename _NodeTraits::__node_pointer __node_pointer;"},
{"lineNum":"  247","line":"    typedef typename _NodeTraits::__base_pointer __base_pointer;"},
{"lineNum":"  248","line":"    typedef typename _NodeTraits::__link_pointer __link_pointer;"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"    __link_pointer __prev_;"},
{"lineNum":"  251","line":"    __link_pointer __next_;"},
{"lineNum":"  252","line":""},
{"lineNum":"  253","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  254","line":"    __list_node_base() : __prev_(_NodeTraits::__unsafe_link_pointer_cast(__self())),","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  255","line":"                         __next_(_NodeTraits::__unsafe_link_pointer_cast(__self())) {}","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  256","line":""},
{"lineNum":"  257","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  258","line":"    __base_pointer __self() {"},
{"lineNum":"  259","line":"        return pointer_traits<__base_pointer>::pointer_to(*this);"},
{"lineNum":"  260","line":"    }"},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  263","line":"    __node_pointer __as_node() {"},
{"lineNum":"  264","line":"        return static_cast<__node_pointer>(__self());"},
{"lineNum":"  265","line":"    }"},
{"lineNum":"  266","line":"};"},
{"lineNum":"  267","line":""},
{"lineNum":"  268","line":"template <class _Tp, class _VoidPtr>"},
{"lineNum":"  269","line":"struct _LIBCPP_STANDALONE_DEBUG __list_node"},
{"lineNum":"  270","line":"    : public __list_node_base<_Tp, _VoidPtr>"},
{"lineNum":"  271","line":"{"},
{"lineNum":"  272","line":"    _Tp __value_;"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"    typedef __list_node_base<_Tp, _VoidPtr> __base;"},
{"lineNum":"  275","line":"    typedef typename __base::__link_pointer __link_pointer;"},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  278","line":"    __link_pointer __as_link() {"},
{"lineNum":"  279","line":"        return static_cast<__link_pointer>(__base::__self());"},
{"lineNum":"  280","line":"    }"},
{"lineNum":"  281","line":"};"},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"template <class _Tp, class _Alloc = allocator<_Tp> > class _LIBCPP_TEMPLATE_VIS list;"},
{"lineNum":"  284","line":"template <class _Tp, class _Alloc> class __list_imp;"},
{"lineNum":"  285","line":"template <class _Tp, class _VoidPtr> class _LIBCPP_TEMPLATE_VIS __list_const_iterator;"},
{"lineNum":"  286","line":""},
{"lineNum":"  287","line":"template <class _Tp, class _VoidPtr>"},
{"lineNum":"  288","line":"class _LIBCPP_TEMPLATE_VIS __list_iterator"},
{"lineNum":"  289","line":"{"},
{"lineNum":"  290","line":"    typedef __list_node_pointer_traits<_Tp, _VoidPtr> _NodeTraits;"},
{"lineNum":"  291","line":"    typedef typename _NodeTraits::__link_pointer __link_pointer;"},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"    __link_pointer __ptr_;"},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  296","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  297","line":"    explicit __list_iterator(__link_pointer __p, const void* __c) _NOEXCEPT"},
{"lineNum":"  298","line":"        : __ptr_(__p)"},
{"lineNum":"  299","line":"    {"},
{"lineNum":"  300","line":"        __get_db()->__insert_ic(this, __c);"},
{"lineNum":"  301","line":"    }"},
{"lineNum":"  302","line":"#else"},
{"lineNum":"  303","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  304","line":"    explicit __list_iterator(__link_pointer __p) _NOEXCEPT : __ptr_(__p) {}"},
{"lineNum":"  305","line":"#endif"},
{"lineNum":"  306","line":""},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":""},
{"lineNum":"  309","line":"    template<class, class> friend class list;"},
{"lineNum":"  310","line":"    template<class, class> friend class __list_imp;"},
{"lineNum":"  311","line":"    template<class, class> friend class __list_const_iterator;"},
{"lineNum":"  312","line":"public:"},
{"lineNum":"  313","line":"    typedef bidirectional_iterator_tag       iterator_category;"},
{"lineNum":"  314","line":"    typedef _Tp                              value_type;"},
{"lineNum":"  315","line":"    typedef value_type&                      reference;"},
{"lineNum":"  316","line":"    typedef typename __rebind_pointer<_VoidPtr, value_type>::type pointer;"},
{"lineNum":"  317","line":"    typedef typename pointer_traits<pointer>::difference_type difference_type;"},
{"lineNum":"  318","line":""},
{"lineNum":"  319","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  320","line":"    __list_iterator() _NOEXCEPT : __ptr_(nullptr)"},
{"lineNum":"  321","line":"    {"},
{"lineNum":"  322","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  323","line":"        __get_db()->__insert_i(this);"},
{"lineNum":"  324","line":"#endif"},
{"lineNum":"  325","line":"    }"},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  330","line":"    __list_iterator(const __list_iterator& __p)"},
{"lineNum":"  331","line":"        : __ptr_(__p.__ptr_)"},
{"lineNum":"  332","line":"    {"},
{"lineNum":"  333","line":"        __get_db()->__iterator_copy(this, &__p);"},
{"lineNum":"  334","line":"    }"},
{"lineNum":"  335","line":""},
{"lineNum":"  336","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  337","line":"    ~__list_iterator()"},
{"lineNum":"  338","line":"    {"},
{"lineNum":"  339","line":"        __get_db()->__erase_i(this);"},
{"lineNum":"  340","line":"    }"},
{"lineNum":"  341","line":""},
{"lineNum":"  342","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  343","line":"    __list_iterator& operator=(const __list_iterator& __p)"},
{"lineNum":"  344","line":"    {"},
{"lineNum":"  345","line":"        if (this != &__p)"},
{"lineNum":"  346","line":"        {"},
{"lineNum":"  347","line":"            __get_db()->__iterator_copy(this, &__p);"},
{"lineNum":"  348","line":"            __ptr_ = __p.__ptr_;"},
{"lineNum":"  349","line":"        }"},
{"lineNum":"  350","line":"        return *this;"},
{"lineNum":"  351","line":"    }"},
{"lineNum":"  352","line":""},
{"lineNum":"  353","line":"#endif // _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  356","line":"    reference operator*() const"},
{"lineNum":"  357","line":"    {"},
{"lineNum":"  358","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  359","line":"        _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this),"},
{"lineNum":"  360","line":"                       \"Attempted to dereference a non-dereferenceable list::iterator\");"},
{"lineNum":"  361","line":"#endif"},
{"lineNum":"  362","line":"        return __ptr_->__as_node()->__value_;","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"  363","line":"    }"},
{"lineNum":"  364","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  365","line":"    pointer operator->() const"},
{"lineNum":"  366","line":"    {"},
{"lineNum":"  367","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  368","line":"        _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this),"},
{"lineNum":"  369","line":"                       \"Attempted to dereference a non-dereferenceable list::iterator\");"},
{"lineNum":"  370","line":"#endif"},
{"lineNum":"  371","line":"        return pointer_traits<pointer>::pointer_to(__ptr_->__as_node()->__value_);"},
{"lineNum":"  372","line":"    }"},
{"lineNum":"  373","line":""},
{"lineNum":"  374","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  375","line":"    __list_iterator& operator++()"},
{"lineNum":"  376","line":"    {"},
{"lineNum":"  377","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  378","line":"        _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this),"},
{"lineNum":"  379","line":"                       \"Attempted to increment a non-incrementable list::iterator\");"},
{"lineNum":"  380","line":"#endif"},
{"lineNum":"  381","line":"        __ptr_ = __ptr_->__next_;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  382","line":"        return *this;"},
{"lineNum":"  383","line":"    }"},
{"lineNum":"  384","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  385","line":"    __list_iterator operator++(int) {__list_iterator __t(*this); ++(*this); return __t;}"},
{"lineNum":"  386","line":""},
{"lineNum":"  387","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  388","line":"    __list_iterator& operator--()"},
{"lineNum":"  389","line":"    {"},
{"lineNum":"  390","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  391","line":"        _LIBCPP_ASSERT(__get_const_db()->__decrementable(this),"},
{"lineNum":"  392","line":"                       \"Attempted to decrement a non-decrementable list::iterator\");"},
{"lineNum":"  393","line":"#endif"},
{"lineNum":"  394","line":"        __ptr_ = __ptr_->__prev_;","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  395","line":"        return *this;"},
{"lineNum":"  396","line":"    }"},
{"lineNum":"  397","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  398","line":"    __list_iterator operator--(int) {__list_iterator __t(*this); --(*this); return __t;}"},
{"lineNum":"  399","line":""},
{"lineNum":"  400","line":"    friend _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  401","line":"    bool operator==(const __list_iterator& __x, const __list_iterator& __y)"},
{"lineNum":"  402","line":"    {"},
{"lineNum":"  403","line":"        return __x.__ptr_ == __y.__ptr_;","class":"lineNoCov","hits":"0","possible_hits":"36",},
{"lineNum":"  404","line":"    }"},
{"lineNum":"  405","line":"    friend _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  406","line":"     bool operator!=(const __list_iterator& __x, const __list_iterator& __y)"},
{"lineNum":"  407","line":"        {return !(__x == __y);}"},
{"lineNum":"  408","line":"};"},
{"lineNum":"  409","line":""},
{"lineNum":"  410","line":"template <class _Tp, class _VoidPtr>"},
{"lineNum":"  411","line":"class _LIBCPP_TEMPLATE_VIS __list_const_iterator"},
{"lineNum":"  412","line":"{"},
{"lineNum":"  413","line":"    typedef __list_node_pointer_traits<_Tp, _VoidPtr> _NodeTraits;"},
{"lineNum":"  414","line":"    typedef typename _NodeTraits::__link_pointer __link_pointer;"},
{"lineNum":"  415","line":""},
{"lineNum":"  416","line":"    __link_pointer __ptr_;"},
{"lineNum":"  417","line":""},
{"lineNum":"  418","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  419","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  420","line":"    explicit __list_const_iterator(__link_pointer __p, const void* __c) _NOEXCEPT"},
{"lineNum":"  421","line":"        : __ptr_(__p)"},
{"lineNum":"  422","line":"    {"},
{"lineNum":"  423","line":"        __get_db()->__insert_ic(this, __c);"},
{"lineNum":"  424","line":"    }"},
{"lineNum":"  425","line":"#else"},
{"lineNum":"  426","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  427","line":"    explicit __list_const_iterator(__link_pointer __p) _NOEXCEPT : __ptr_(__p) {}"},
{"lineNum":"  428","line":"#endif"},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":"    template<class, class> friend class list;"},
{"lineNum":"  431","line":"    template<class, class> friend class __list_imp;"},
{"lineNum":"  432","line":"public:"},
{"lineNum":"  433","line":"    typedef bidirectional_iterator_tag       iterator_category;"},
{"lineNum":"  434","line":"    typedef _Tp                              value_type;"},
{"lineNum":"  435","line":"    typedef const value_type&                reference;"},
{"lineNum":"  436","line":"    typedef typename __rebind_pointer<_VoidPtr, const value_type>::type pointer;"},
{"lineNum":"  437","line":"    typedef typename pointer_traits<pointer>::difference_type difference_type;"},
{"lineNum":"  438","line":""},
{"lineNum":"  439","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  440","line":"    __list_const_iterator() _NOEXCEPT : __ptr_(nullptr)"},
{"lineNum":"  441","line":"    {"},
{"lineNum":"  442","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  443","line":"        __get_db()->__insert_i(this);"},
{"lineNum":"  444","line":"#endif"},
{"lineNum":"  445","line":"    }"},
{"lineNum":"  446","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  447","line":"    __list_const_iterator(const __list_iterator<_Tp, _VoidPtr>& __p) _NOEXCEPT"},
{"lineNum":"  448","line":"        : __ptr_(__p.__ptr_)"},
{"lineNum":"  449","line":"    {"},
{"lineNum":"  450","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  451","line":"        __get_db()->__iterator_copy(this, &__p);"},
{"lineNum":"  452","line":"#endif"},
{"lineNum":"  453","line":"    }"},
{"lineNum":"  454","line":""},
{"lineNum":"  455","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  456","line":""},
{"lineNum":"  457","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  458","line":"    __list_const_iterator(const __list_const_iterator& __p)"},
{"lineNum":"  459","line":"        : __ptr_(__p.__ptr_)"},
{"lineNum":"  460","line":"    {"},
{"lineNum":"  461","line":"        __get_db()->__iterator_copy(this, &__p);"},
{"lineNum":"  462","line":"    }"},
{"lineNum":"  463","line":""},
{"lineNum":"  464","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  465","line":"    ~__list_const_iterator()"},
{"lineNum":"  466","line":"    {"},
{"lineNum":"  467","line":"        __get_db()->__erase_i(this);"},
{"lineNum":"  468","line":"    }"},
{"lineNum":"  469","line":""},
{"lineNum":"  470","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  471","line":"    __list_const_iterator& operator=(const __list_const_iterator& __p)"},
{"lineNum":"  472","line":"    {"},
{"lineNum":"  473","line":"        if (this != &__p)"},
{"lineNum":"  474","line":"        {"},
{"lineNum":"  475","line":"            __get_db()->__iterator_copy(this, &__p);"},
{"lineNum":"  476","line":"            __ptr_ = __p.__ptr_;"},
{"lineNum":"  477","line":"        }"},
{"lineNum":"  478","line":"        return *this;"},
{"lineNum":"  479","line":"    }"},
{"lineNum":"  480","line":""},
{"lineNum":"  481","line":"#endif // _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  482","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  483","line":"    reference operator*() const"},
{"lineNum":"  484","line":"    {"},
{"lineNum":"  485","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  486","line":"        _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this),"},
{"lineNum":"  487","line":"                       \"Attempted to dereference a non-dereferenceable list::const_iterator\");"},
{"lineNum":"  488","line":"#endif"},
{"lineNum":"  489","line":"        return __ptr_->__as_node()->__value_;","class":"lineNoCov","hits":"0","possible_hits":"25",},
{"lineNum":"  490","line":"    }"},
{"lineNum":"  491","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  492","line":"    pointer operator->() const"},
{"lineNum":"  493","line":"    {"},
{"lineNum":"  494","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  495","line":"        _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this),"},
{"lineNum":"  496","line":"                       \"Attempted to dereference a non-dereferenceable list::const_iterator\");"},
{"lineNum":"  497","line":"#endif"},
{"lineNum":"  498","line":"        return pointer_traits<pointer>::pointer_to(__ptr_->__as_node()->__value_);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  499","line":"    }"},
{"lineNum":"  500","line":""},
{"lineNum":"  501","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  502","line":"    __list_const_iterator& operator++()"},
{"lineNum":"  503","line":"    {"},
{"lineNum":"  504","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  505","line":"        _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this),"},
{"lineNum":"  506","line":"                       \"Attempted to increment a non-incrementable list::const_iterator\");"},
{"lineNum":"  507","line":"#endif"},
{"lineNum":"  508","line":"        __ptr_ = __ptr_->__next_;","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  509","line":"        return *this;"},
{"lineNum":"  510","line":"    }"},
{"lineNum":"  511","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  512","line":"    __list_const_iterator operator++(int) {__list_const_iterator __t(*this); ++(*this); return __t;}"},
{"lineNum":"  513","line":""},
{"lineNum":"  514","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  515","line":"    __list_const_iterator& operator--()"},
{"lineNum":"  516","line":"    {"},
{"lineNum":"  517","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  518","line":"        _LIBCPP_ASSERT(__get_const_db()->__decrementable(this),"},
{"lineNum":"  519","line":"                       \"Attempted to decrement a non-decrementable list::const_iterator\");"},
{"lineNum":"  520","line":"#endif"},
{"lineNum":"  521","line":"        __ptr_ = __ptr_->__prev_;"},
{"lineNum":"  522","line":"        return *this;"},
{"lineNum":"  523","line":"    }"},
{"lineNum":"  524","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  525","line":"    __list_const_iterator operator--(int) {__list_const_iterator __t(*this); --(*this); return __t;}"},
{"lineNum":"  526","line":""},
{"lineNum":"  527","line":"    friend _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  528","line":"    bool operator==(const __list_const_iterator& __x, const __list_const_iterator& __y)"},
{"lineNum":"  529","line":"    {"},
{"lineNum":"  530","line":"        return __x.__ptr_ == __y.__ptr_;","class":"lineNoCov","hits":"0","possible_hits":"61",},
{"lineNum":"  531","line":"    }"},
{"lineNum":"  532","line":"    friend _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  533","line":"    bool operator!=(const __list_const_iterator& __x, const __list_const_iterator& __y)"},
{"lineNum":"  534","line":"        {return !(__x == __y);}"},
{"lineNum":"  535","line":"};"},
{"lineNum":"  536","line":""},
{"lineNum":"  537","line":"template <class _Tp, class _Alloc>"},
{"lineNum":"  538","line":"class __list_imp"},
{"lineNum":"  539","line":"{"},
{"lineNum":"  540","line":"    __list_imp(const __list_imp&);"},
{"lineNum":"  541","line":"    __list_imp& operator=(const __list_imp&);"},
{"lineNum":"  542","line":"public:"},
{"lineNum":"  543","line":"    typedef _Alloc                                                  allocator_type;"},
{"lineNum":"  544","line":"    typedef allocator_traits<allocator_type>                        __alloc_traits;"},
{"lineNum":"  545","line":"    typedef typename __alloc_traits::size_type                      size_type;"},
{"lineNum":"  546","line":"protected:"},
{"lineNum":"  547","line":"    typedef _Tp                                                     value_type;"},
{"lineNum":"  548","line":"    typedef typename __alloc_traits::void_pointer                   __void_pointer;"},
{"lineNum":"  549","line":"    typedef __list_iterator<value_type, __void_pointer>             iterator;"},
{"lineNum":"  550","line":"    typedef __list_const_iterator<value_type, __void_pointer>       const_iterator;"},
{"lineNum":"  551","line":"    typedef __list_node_base<value_type, __void_pointer>            __node_base;"},
{"lineNum":"  552","line":"    typedef __list_node<value_type, __void_pointer>                 __node;"},
{"lineNum":"  553","line":"    typedef typename __rebind_alloc_helper<__alloc_traits, __node>::type __node_allocator;"},
{"lineNum":"  554","line":"    typedef allocator_traits<__node_allocator>                       __node_alloc_traits;"},
{"lineNum":"  555","line":"    typedef typename __node_alloc_traits::pointer                    __node_pointer;"},
{"lineNum":"  556","line":"    typedef typename __node_alloc_traits::pointer                    __node_const_pointer;"},
{"lineNum":"  557","line":"    typedef __list_node_pointer_traits<value_type, __void_pointer> __node_pointer_traits;"},
{"lineNum":"  558","line":"    typedef typename __node_pointer_traits::__link_pointer __link_pointer;"},
{"lineNum":"  559","line":"    typedef __link_pointer __link_const_pointer;"},
{"lineNum":"  560","line":"    typedef typename __alloc_traits::pointer                         pointer;"},
{"lineNum":"  561","line":"    typedef typename __alloc_traits::const_pointer                   const_pointer;"},
{"lineNum":"  562","line":"    typedef typename __alloc_traits::difference_type                 difference_type;"},
{"lineNum":"  563","line":""},
{"lineNum":"  564","line":"    typedef typename __rebind_alloc_helper<__alloc_traits, __node_base>::type __node_base_allocator;"},
{"lineNum":"  565","line":"    typedef typename allocator_traits<__node_base_allocator>::pointer __node_base_pointer;"},
{"lineNum":"  566","line":"    static_assert((!is_same<allocator_type, __node_allocator>::value),"},
{"lineNum":"  567","line":"                  \"internal allocator type must differ from user-specified \""},
{"lineNum":"  568","line":"                  \"type; otherwise overload resolution breaks\");"},
{"lineNum":"  569","line":""},
{"lineNum":"  570","line":"    __node_base __end_;"},
{"lineNum":"  571","line":"    __compressed_pair<size_type, __node_allocator> __size_alloc_;"},
{"lineNum":"  572","line":""},
{"lineNum":"  573","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  574","line":"    __link_pointer __end_as_link() const _NOEXCEPT {"},
{"lineNum":"  575","line":"        return __node_pointer_traits::__unsafe_link_pointer_cast("},
{"lineNum":"  576","line":"                const_cast<__node_base&>(__end_).__self());"},
{"lineNum":"  577","line":"    }"},
{"lineNum":"  578","line":""},
{"lineNum":"  579","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  580","line":"          size_type& __sz() _NOEXCEPT {return __size_alloc_.first();}"},
{"lineNum":"  581","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  582","line":"    const size_type& __sz() const _NOEXCEPT"},
{"lineNum":"  583","line":"        {return __size_alloc_.first();}"},
{"lineNum":"  584","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  585","line":"          __node_allocator& __node_alloc() _NOEXCEPT"},
{"lineNum":"  586","line":"          {return __size_alloc_.second();}"},
{"lineNum":"  587","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  588","line":"    const __node_allocator& __node_alloc() const _NOEXCEPT"},
{"lineNum":"  589","line":"        {return __size_alloc_.second();}"},
{"lineNum":"  590","line":""},
{"lineNum":"  591","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  592","line":"    size_type __node_alloc_max_size() const _NOEXCEPT {"},
{"lineNum":"  593","line":"        return __node_alloc_traits::max_size(__node_alloc());"},
{"lineNum":"  594","line":"    }"},
{"lineNum":"  595","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  596","line":"    static void __unlink_nodes(__link_pointer __f, __link_pointer __l) _NOEXCEPT;"},
{"lineNum":"  597","line":""},
{"lineNum":"  598","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  599","line":"    __list_imp()"},
{"lineNum":"  600","line":"        _NOEXCEPT_(is_nothrow_default_constructible<__node_allocator>::value);"},
{"lineNum":"  601","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  602","line":"    __list_imp(const allocator_type& __a);"},
{"lineNum":"  603","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  604","line":"    __list_imp(const __node_allocator& __a);"},
{"lineNum":"  605","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  606","line":"    __list_imp(__node_allocator&& __a) _NOEXCEPT;"},
{"lineNum":"  607","line":"#endif"},
{"lineNum":"  608","line":"    ~__list_imp();"},
{"lineNum":"  609","line":"    void clear() _NOEXCEPT;"},
{"lineNum":"  610","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  611","line":"    bool empty() const _NOEXCEPT {return __sz() == 0;}","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"  612","line":""},
{"lineNum":"  613","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  614","line":"    iterator begin() _NOEXCEPT"},
{"lineNum":"  615","line":"    {"},
{"lineNum":"  616","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  617","line":"        return iterator(__end_.__next_, this);"},
{"lineNum":"  618","line":"#else"},
{"lineNum":"  619","line":"        return iterator(__end_.__next_);","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  620","line":"#endif"},
{"lineNum":"  621","line":"    }"},
{"lineNum":"  622","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  623","line":"    const_iterator begin() const  _NOEXCEPT"},
{"lineNum":"  624","line":"    {"},
{"lineNum":"  625","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  626","line":"        return const_iterator(__end_.__next_, this);"},
{"lineNum":"  627","line":"#else"},
{"lineNum":"  628","line":"        return const_iterator(__end_.__next_);","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  629","line":"#endif"},
{"lineNum":"  630","line":"    }"},
{"lineNum":"  631","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  632","line":"    iterator end() _NOEXCEPT"},
{"lineNum":"  633","line":"    {"},
{"lineNum":"  634","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  635","line":"        return iterator(__end_as_link(), this);"},
{"lineNum":"  636","line":"#else"},
{"lineNum":"  637","line":"        return iterator(__end_as_link());"},
{"lineNum":"  638","line":"#endif"},
{"lineNum":"  639","line":"    }"},
{"lineNum":"  640","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  641","line":"    const_iterator end() const _NOEXCEPT"},
{"lineNum":"  642","line":"    {"},
{"lineNum":"  643","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  644","line":"        return const_iterator(__end_as_link(), this);"},
{"lineNum":"  645","line":"#else"},
{"lineNum":"  646","line":"        return const_iterator(__end_as_link());"},
{"lineNum":"  647","line":"#endif"},
{"lineNum":"  648","line":"    }"},
{"lineNum":"  649","line":""},
{"lineNum":"  650","line":"    void swap(__list_imp& __c)"},
{"lineNum":"  651","line":"#if _LIBCPP_STD_VER >= 14"},
{"lineNum":"  652","line":"        _NOEXCEPT;"},
{"lineNum":"  653","line":"#else"},
{"lineNum":"  654","line":"        _NOEXCEPT_(!__alloc_traits::propagate_on_container_swap::value ||"},
{"lineNum":"  655","line":"                    __is_nothrow_swappable<allocator_type>::value);"},
{"lineNum":"  656","line":"#endif"},
{"lineNum":"  657","line":""},
{"lineNum":"  658","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  659","line":"    void __copy_assign_alloc(const __list_imp& __c)"},
{"lineNum":"  660","line":"        {__copy_assign_alloc(__c, integral_constant<bool,"},
{"lineNum":"  661","line":"                      __node_alloc_traits::propagate_on_container_copy_assignment::value>());}"},
{"lineNum":"  662","line":""},
{"lineNum":"  663","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  664","line":"    void __move_assign_alloc(__list_imp& __c)"},
{"lineNum":"  665","line":"        _NOEXCEPT_("},
{"lineNum":"  666","line":"            !__node_alloc_traits::propagate_on_container_move_assignment::value ||"},
{"lineNum":"  667","line":"            is_nothrow_move_assignable<__node_allocator>::value)"},
{"lineNum":"  668","line":"        {__move_assign_alloc(__c, integral_constant<bool,"},
{"lineNum":"  669","line":"                      __node_alloc_traits::propagate_on_container_move_assignment::value>());}"},
{"lineNum":"  670","line":""},
{"lineNum":"  671","line":"private:"},
{"lineNum":"  672","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  673","line":"    void __copy_assign_alloc(const __list_imp& __c, true_type)"},
{"lineNum":"  674","line":"        {"},
{"lineNum":"  675","line":"            if (__node_alloc() != __c.__node_alloc())"},
{"lineNum":"  676","line":"                clear();"},
{"lineNum":"  677","line":"            __node_alloc() = __c.__node_alloc();"},
{"lineNum":"  678","line":"        }"},
{"lineNum":"  679","line":""},
{"lineNum":"  680","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  681","line":"    void __copy_assign_alloc(const __list_imp&, false_type)"},
{"lineNum":"  682","line":"        {}"},
{"lineNum":"  683","line":""},
{"lineNum":"  684","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  685","line":"    void __move_assign_alloc(__list_imp& __c, true_type)"},
{"lineNum":"  686","line":"        _NOEXCEPT_(is_nothrow_move_assignable<__node_allocator>::value)"},
{"lineNum":"  687","line":"        {"},
{"lineNum":"  688","line":"            __node_alloc() = _VSTD::move(__c.__node_alloc());"},
{"lineNum":"  689","line":"        }"},
{"lineNum":"  690","line":""},
{"lineNum":"  691","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  692","line":"    void __move_assign_alloc(__list_imp&, false_type)"},
{"lineNum":"  693","line":"        _NOEXCEPT"},
{"lineNum":"  694","line":"        {}"},
{"lineNum":"  695","line":""},
{"lineNum":"  696","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  697","line":"    void __invalidate_all_iterators() {"},
{"lineNum":"  698","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  699","line":"      __get_db()->__invalidate_all(this);"},
{"lineNum":"  700","line":"#endif"},
{"lineNum":"  701","line":"    }"},
{"lineNum":"  702","line":"};"},
{"lineNum":"  703","line":""},
{"lineNum":"  704","line":"// Unlink nodes [__f, __l]"},
{"lineNum":"  705","line":"template <class _Tp, class _Alloc>"},
{"lineNum":"  706","line":"inline"},
{"lineNum":"  707","line":"void"},
{"lineNum":"  708","line":"__list_imp<_Tp, _Alloc>::__unlink_nodes(__link_pointer __f, __link_pointer __l)"},
{"lineNum":"  709","line":"    _NOEXCEPT"},
{"lineNum":"  710","line":"{"},
{"lineNum":"  711","line":"    __f->__prev_->__next_ = __l->__next_;","class":"lineNoCov","hits":"0","possible_hits":"23",},
{"lineNum":"  712","line":"    __l->__next_->__prev_ = __f->__prev_;","class":"lineNoCov","hits":"0","possible_hits":"23",},
{"lineNum":"  713","line":"}"},
{"lineNum":"  714","line":""},
{"lineNum":"  715","line":"template <class _Tp, class _Alloc>"},
{"lineNum":"  716","line":"inline"},
{"lineNum":"  717","line":"__list_imp<_Tp, _Alloc>::__list_imp()"},
{"lineNum":"  718","line":"        _NOEXCEPT_(is_nothrow_default_constructible<__node_allocator>::value)"},
{"lineNum":"  719","line":"    : __size_alloc_(0, __default_init_tag())"},
{"lineNum":"  720","line":"{"},
{"lineNum":"  721","line":"}"},
{"lineNum":"  722","line":""},
{"lineNum":"  723","line":"template <class _Tp, class _Alloc>"},
{"lineNum":"  724","line":"inline"},
{"lineNum":"  725","line":"__list_imp<_Tp, _Alloc>::__list_imp(const allocator_type& __a)"},
{"lineNum":"  726","line":"    : __size_alloc_(0, __node_allocator(__a))"},
{"lineNum":"  727","line":"{"},
{"lineNum":"  728","line":"}"},
{"lineNum":"  729","line":""},
{"lineNum":"  730","line":"template <class _Tp, class _Alloc>"},
{"lineNum":"  731","line":"inline __list_imp<_Tp, _Alloc>::__list_imp(const __node_allocator& __a)"},
{"lineNum":"  732","line":"    : __size_alloc_(0, __a) {}"},
{"lineNum":"  733","line":""},
{"lineNum":"  734","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  735","line":"template <class _Tp, class _Alloc>"},
{"lineNum":"  736","line":"inline __list_imp<_Tp, _Alloc>::__list_imp(__node_allocator&& __a) _NOEXCEPT"},
{"lineNum":"  737","line":"    : __size_alloc_(0, _VSTD::move(__a)) {}"},
{"lineNum":"  738","line":"#endif"},
{"lineNum":"  739","line":""},
{"lineNum":"  740","line":"template <class _Tp, class _Alloc>"},
{"lineNum":"  741","line":"__list_imp<_Tp, _Alloc>::~__list_imp() {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  742","line":"  clear();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  743","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  744","line":"    __get_db()->__erase_c(this);"},
{"lineNum":"  745","line":"#endif"},
{"lineNum":"  746","line":"}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  747","line":""},
{"lineNum":"  748","line":"template <class _Tp, class _Alloc>"},
{"lineNum":"  749","line":"void"},
{"lineNum":"  750","line":"__list_imp<_Tp, _Alloc>::clear() _NOEXCEPT"},
{"lineNum":"  751","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  752","line":"    if (!empty())","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"  753","line":"    {"},
{"lineNum":"  754","line":"        __node_allocator& __na = __node_alloc();"},
{"lineNum":"  755","line":"        __link_pointer __f = __end_.__next_;","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"  756","line":"        __link_pointer __l = __end_as_link();"},
{"lineNum":"  757","line":"        __unlink_nodes(__f, __l->__prev_);","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"  758","line":"        __sz() = 0;","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"  759","line":"        while (__f != __l)","class":"lineNoCov","hits":"0","possible_hits":"32",},
{"lineNum":"  760","line":"        {"},
{"lineNum":"  761","line":"            __node_pointer __np = __f->__as_node();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  762","line":"            __f = __f->__next_;","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"  763","line":"            __node_alloc_traits::destroy(__na, _VSTD::addressof(__np->__value_));","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  764","line":"            __node_alloc_traits::deallocate(__na, __np, 1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  765","line":"        }"},
{"lineNum":"  766","line":"        __invalidate_all_iterators();"},
{"lineNum":"  767","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  768","line":"}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  769","line":""},
{"lineNum":"  770","line":"template <class _Tp, class _Alloc>"},
{"lineNum":"  771","line":"void"},
{"lineNum":"  772","line":"__list_imp<_Tp, _Alloc>::swap(__list_imp& __c)"},
{"lineNum":"  773","line":"#if _LIBCPP_STD_VER >= 14"},
{"lineNum":"  774","line":"        _NOEXCEPT"},
{"lineNum":"  775","line":"#else"},
{"lineNum":"  776","line":"        _NOEXCEPT_(!__alloc_traits::propagate_on_container_swap::value ||"},
{"lineNum":"  777","line":"                    __is_nothrow_swappable<allocator_type>::value)"},
{"lineNum":"  778","line":"#endif"},
{"lineNum":"  779","line":"{"},
{"lineNum":"  780","line":"    _LIBCPP_ASSERT(__alloc_traits::propagate_on_container_swap::value ||"},
{"lineNum":"  781","line":"                   this->__node_alloc() == __c.__node_alloc(),"},
{"lineNum":"  782","line":"                   \"list::swap: Either propagate_on_container_swap must be true\""},
{"lineNum":"  783","line":"                   \" or the allocators must compare equal\");"},
{"lineNum":"  784","line":"    using _VSTD::swap;"},
{"lineNum":"  785","line":"    _VSTD::__swap_allocator(__node_alloc(), __c.__node_alloc());"},
{"lineNum":"  786","line":"    swap(__sz(), __c.__sz());"},
{"lineNum":"  787","line":"    swap(__end_, __c.__end_);"},
{"lineNum":"  788","line":"    if (__sz() == 0)"},
{"lineNum":"  789","line":"        __end_.__next_ = __end_.__prev_ = __end_as_link();"},
{"lineNum":"  790","line":"    else"},
{"lineNum":"  791","line":"        __end_.__prev_->__next_ = __end_.__next_->__prev_ = __end_as_link();"},
{"lineNum":"  792","line":"    if (__c.__sz() == 0)"},
{"lineNum":"  793","line":"        __c.__end_.__next_ = __c.__end_.__prev_ = __c.__end_as_link();"},
{"lineNum":"  794","line":"    else"},
{"lineNum":"  795","line":"        __c.__end_.__prev_->__next_ = __c.__end_.__next_->__prev_ = __c.__end_as_link();"},
{"lineNum":"  796","line":""},
{"lineNum":"  797","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  798","line":"    __libcpp_db* __db = __get_db();"},
{"lineNum":"  799","line":"    __c_node* __cn1 = __db->__find_c_and_lock(this);"},
{"lineNum":"  800","line":"    __c_node* __cn2 = __db->__find_c(&__c);"},
{"lineNum":"  801","line":"    _VSTD::swap(__cn1->beg_, __cn2->beg_);"},
{"lineNum":"  802","line":"    _VSTD::swap(__cn1->end_, __cn2->end_);"},
{"lineNum":"  803","line":"    _VSTD::swap(__cn1->cap_, __cn2->cap_);"},
{"lineNum":"  804","line":"    for (__i_node** __p = __cn1->end_; __p != __cn1->beg_;)"},
{"lineNum":"  805","line":"    {"},
{"lineNum":"  806","line":"        --__p;"},
{"lineNum":"  807","line":"        const_iterator* __i = static_cast<const_iterator*>((*__p)->__i_);"},
{"lineNum":"  808","line":"        if (__i->__ptr_ == __c.__end_as_link())"},
{"lineNum":"  809","line":"        {"},
{"lineNum":"  810","line":"            __cn2->__add(*__p);"},
{"lineNum":"  811","line":"            if (--__cn1->end_ != __p)"},
{"lineNum":"  812","line":"                _VSTD::memmove(__p, __p+1, (__cn1->end_ - __p)*sizeof(__i_node*));"},
{"lineNum":"  813","line":"        }"},
{"lineNum":"  814","line":"        else"},
{"lineNum":"  815","line":"            (*__p)->__c_ = __cn1;"},
{"lineNum":"  816","line":"    }"},
{"lineNum":"  817","line":"    for (__i_node** __p = __cn2->end_; __p != __cn2->beg_;)"},
{"lineNum":"  818","line":"    {"},
{"lineNum":"  819","line":"        --__p;"},
{"lineNum":"  820","line":"        const_iterator* __i = static_cast<const_iterator*>((*__p)->__i_);"},
{"lineNum":"  821","line":"        if (__i->__ptr_ == __end_as_link())"},
{"lineNum":"  822","line":"        {"},
{"lineNum":"  823","line":"            __cn1->__add(*__p);"},
{"lineNum":"  824","line":"            if (--__cn2->end_ != __p)"},
{"lineNum":"  825","line":"                _VSTD::memmove(__p, __p+1, (__cn2->end_ - __p)*sizeof(__i_node*));"},
{"lineNum":"  826","line":"        }"},
{"lineNum":"  827","line":"        else"},
{"lineNum":"  828","line":"            (*__p)->__c_ = __cn2;"},
{"lineNum":"  829","line":"    }"},
{"lineNum":"  830","line":"    __db->unlock();"},
{"lineNum":"  831","line":"#endif"},
{"lineNum":"  832","line":"}"},
{"lineNum":"  833","line":""},
{"lineNum":"  834","line":"template <class _Tp, class _Alloc /*= allocator<_Tp>*/>"},
{"lineNum":"  835","line":"class _LIBCPP_TEMPLATE_VIS list"},
{"lineNum":"  836","line":"    : private __list_imp<_Tp, _Alloc>"},
{"lineNum":"  837","line":"{"},
{"lineNum":"  838","line":"    typedef __list_imp<_Tp, _Alloc> base;"},
{"lineNum":"  839","line":"    typedef typename base::__node              __node;"},
{"lineNum":"  840","line":"    typedef typename base::__node_allocator    __node_allocator;"},
{"lineNum":"  841","line":"    typedef typename base::__node_pointer      __node_pointer;"},
{"lineNum":"  842","line":"    typedef typename base::__node_alloc_traits __node_alloc_traits;"},
{"lineNum":"  843","line":"    typedef typename base::__node_base         __node_base;"},
{"lineNum":"  844","line":"    typedef typename base::__node_base_pointer __node_base_pointer;"},
{"lineNum":"  845","line":"    typedef typename base::__link_pointer __link_pointer;"},
{"lineNum":"  846","line":""},
{"lineNum":"  847","line":"public:"},
{"lineNum":"  848","line":"    typedef _Tp                                      value_type;"},
{"lineNum":"  849","line":"    typedef _Alloc                                   allocator_type;"},
{"lineNum":"  850","line":"    static_assert((is_same<value_type, typename allocator_type::value_type>::value),"},
{"lineNum":"  851","line":"                  \"Invalid allocator::value_type\");"},
{"lineNum":"  852","line":"    typedef value_type&                              reference;"},
{"lineNum":"  853","line":"    typedef const value_type&                        const_reference;"},
{"lineNum":"  854","line":"    typedef typename base::pointer                   pointer;"},
{"lineNum":"  855","line":"    typedef typename base::const_pointer             const_pointer;"},
{"lineNum":"  856","line":"    typedef typename base::size_type                 size_type;"},
{"lineNum":"  857","line":"    typedef typename base::difference_type           difference_type;"},
{"lineNum":"  858","line":"    typedef typename base::iterator                  iterator;"},
{"lineNum":"  859","line":"    typedef typename base::const_iterator            const_iterator;"},
{"lineNum":"  860","line":"    typedef _VSTD::reverse_iterator<iterator>         reverse_iterator;"},
{"lineNum":"  861","line":"    typedef _VSTD::reverse_iterator<const_iterator>   const_reverse_iterator;"},
{"lineNum":"  862","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":"  863","line":"    typedef size_type                                __remove_return_type;"},
{"lineNum":"  864","line":"#else"},
{"lineNum":"  865","line":"    typedef void                                     __remove_return_type;"},
{"lineNum":"  866","line":"#endif"},
{"lineNum":"  867","line":""},
{"lineNum":"  868","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  869","line":"    list()"},
{"lineNum":"  870","line":"        _NOEXCEPT_(is_nothrow_default_constructible<__node_allocator>::value)"},
{"lineNum":"  871","line":"    {"},
{"lineNum":"  872","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  873","line":"        __get_db()->__insert_c(this);"},
{"lineNum":"  874","line":"#endif"},
{"lineNum":"  875","line":"    }"},
{"lineNum":"  876","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  877","line":"    explicit list(const allocator_type& __a) : base(__a)"},
{"lineNum":"  878","line":"    {"},
{"lineNum":"  879","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":"  880","line":"        __get_db()->__insert_c(this);"},
{"lineNum":"  881","line":"#endif"},
{"lineNum":"  882","line":"    }"},
{"lineNum":"  883","line":"    explicit list(size_type __n);"},
{"lineNum":"  884","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":"  885","line":"    explicit list(size_type __n, const allocator_type& __a);"},
{"lineNum":"  886","line":"#endif"},
{"lineNum":"  887","line":"    list(size_type __n, const value_type& __x);"},
{"lineNum":"  888","line":"    list(size_type __n, const value_type& __x, const allocator_type& __a);"},
{"lineNum":"  889","line":"    template <class _InpIter>"},
{"lineNum":"  890","line":"        list(_InpIter __f, _InpIter __l,"},
{"lineNum":"  891","line":"             typename enable_if<__is_cpp17_input_iterator<_InpIter>::value>::type* = 0);"},
{"lineNum":"  892","line":"    template <class _InpIter>"},
{"lineNum":"  893","line":"        list(_InpIter __f, _InpIter __l, const allocator_type& __a,"},
{"lineNum":"  894","line":"             typename enable_if<__is_cpp17_input_iterator<_InpIter>::value>::type* = 0);"},
{"lineNum":"  895","line":""},
{"lineNum":"  896","line":"    list(const list& __c);"},
{"lineNum":"  897","line":"    list(const list& __c, const __identity_t<allocator_type>& __a);"},
{"lineNum":"  898","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  899","line":"    list& operator=(const list& __c);"},
{"lineNum":"  900","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  901","line":"    list(initializer_list<value_type> __il);"},
{"lineNum":"  902","line":"    list(initializer_list<value_type> __il, const allocator_type& __a);"},
{"lineNum":"  903","line":""},
{"lineNum":"  904","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  905","line":"    list(list&& __c)"},
{"lineNum":"  906","line":"        _NOEXCEPT_(is_nothrow_move_constructible<__node_allocator>::value);"},
{"lineNum":"  907","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  908","line":"    list(list&& __c, const __identity_t<allocator_type>& __a);"},
{"lineNum":"  909","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  910","line":"    list& operator=(list&& __c)"},
{"lineNum":"  911","line":"        _NOEXCEPT_("},
{"lineNum":"  912","line":"            __node_alloc_traits::propagate_on_container_move_assignment::value &&"},
{"lineNum":"  913","line":"            is_nothrow_move_assignable<__node_allocator>::value);"},
{"lineNum":"  914","line":""},
{"lineNum":"  915","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  916","line":"    list& operator=(initializer_list<value_type> __il)"},
{"lineNum":"  917","line":"        {assign(__il.begin(), __il.end()); return *this;}"},
{"lineNum":"  918","line":""},
{"lineNum":"  919","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  920","line":"    void assign(initializer_list<value_type> __il)"},
{"lineNum":"  921","line":"        {assign(__il.begin(), __il.end());}"},
{"lineNum":"  922","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":"  923","line":""},
{"lineNum":"  924","line":"    template <class _InpIter>"},
{"lineNum":"  925","line":"        void assign(_InpIter __f, _InpIter __l,"},
{"lineNum":"  926","line":"             typename enable_if<__is_cpp17_input_iterator<_InpIter>::value>::type* = 0);"},
{"lineNum":"  927","line":"    void assign(size_type __n, const value_type& __x);"},
{"lineNum":"  928","line":""},
{"lineNum":"  929","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  930","line":"    allocator_type get_allocator() const _NOEXCEPT;"},
{"lineNum":"  931","line":""},
{"lineNum":"  932","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  933","line":"    size_type size() const _NOEXCEPT     {return base::__sz();}","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  934","line":"    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  935","line":"    bool empty() const _NOEXCEPT         {return base::empty();}"},
{"lineNum":"  936","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  937","line":"    size_type max_size() const _NOEXCEPT"},
{"lineNum":"  938","line":"        {"},
{"lineNum":"  939","line":"            return _VSTD::min<size_type>("},
{"lineNum":"  940","line":"                base::__node_alloc_max_size(),"},
{"lineNum":"  941","line":"                numeric_limits<difference_type >::max());"},
{"lineNum":"  942","line":"        }"},
{"lineNum":"  943","line":""},
{"lineNum":"  944","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  945","line":"          iterator begin() _NOEXCEPT        {return base::begin();}"},
{"lineNum":"  946","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  947","line":"    const_iterator begin()  const _NOEXCEPT {return base::begin();}"},
{"lineNum":"  948","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  949","line":"          iterator end() _NOEXCEPT          {return base::end();}"},
{"lineNum":"  950","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  951","line":"    const_iterator end()    const _NOEXCEPT {return base::end();}"},
{"lineNum":"  952","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  953","line":"    const_iterator cbegin() const _NOEXCEPT {return base::begin();}"},
{"lineNum":"  954","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  955","line":"    const_iterator cend()   const _NOEXCEPT {return base::end();}"},
{"lineNum":"  956","line":""},
{"lineNum":"  957","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  958","line":"          reverse_iterator rbegin() _NOEXCEPT"},
{"lineNum":"  959","line":"            {return       reverse_iterator(end());}"},
{"lineNum":"  960","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  961","line":"    const_reverse_iterator rbegin()  const _NOEXCEPT"},
{"lineNum":"  962","line":"        {return const_reverse_iterator(end());}"},
{"lineNum":"  963","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  964","line":"          reverse_iterator rend() _NOEXCEPT"},
{"lineNum":"  965","line":"            {return       reverse_iterator(begin());}"},
{"lineNum":"  966","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  967","line":"    const_reverse_iterator rend()    const _NOEXCEPT"},
{"lineNum":"  968","line":"        {return const_reverse_iterator(begin());}"},
{"lineNum":"  969","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  970","line":"    const_reverse_iterator crbegin() const _NOEXCEPT"},
{"lineNum":"  971","line":"        {return const_reverse_iterator(end());}"},
{"lineNum":"  972","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  973","line":"    const_reverse_iterator crend()   const _NOEXCEPT"},
{"lineNum":"  974","line":"        {return const_reverse_iterator(begin());}"},
{"lineNum":"  975","line":""},
{"lineNum":"  976","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  977","line":"    reference front()"},
{"lineNum":"  978","line":"    {"},
{"lineNum":"  979","line":"        _LIBCPP_ASSERT(!empty(), \"list::front called on empty list\");"},
{"lineNum":"  980","line":"        return base::__end_.__next_->__as_node()->__value_;"},
{"lineNum":"  981","line":"    }"},
{"lineNum":"  982","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  983","line":"    const_reference front() const"},
{"lineNum":"  984","line":"    {"},
{"lineNum":"  985","line":"        _LIBCPP_ASSERT(!empty(), \"list::front called on empty list\");"},
{"lineNum":"  986","line":"        return base::__end_.__next_->__as_node()->__value_;"},
{"lineNum":"  987","line":"    }"},
{"lineNum":"  988","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  989","line":"    reference back()"},
{"lineNum":"  990","line":"    {"},
{"lineNum":"  991","line":"        _LIBCPP_ASSERT(!empty(), \"list::back called on empty list\");"},
{"lineNum":"  992","line":"        return base::__end_.__prev_->__as_node()->__value_;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  993","line":"    }"},
{"lineNum":"  994","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  995","line":"    const_reference back() const"},
{"lineNum":"  996","line":"    {"},
{"lineNum":"  997","line":"        _LIBCPP_ASSERT(!empty(), \"list::back called on empty list\");"},
{"lineNum":"  998","line":"        return base::__end_.__prev_->__as_node()->__value_;"},
{"lineNum":"  999","line":"    }"},
{"lineNum":" 1000","line":""},
{"lineNum":" 1001","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1002","line":"    void push_front(value_type&& __x);"},
{"lineNum":" 1003","line":"    void push_back(value_type&& __x);"},
{"lineNum":" 1004","line":""},
{"lineNum":" 1005","line":"    template <class... _Args>"},
{"lineNum":" 1006","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 1007","line":"       reference emplace_front(_Args&&... __args);"},
{"lineNum":" 1008","line":"#else"},
{"lineNum":" 1009","line":"       void      emplace_front(_Args&&... __args);"},
{"lineNum":" 1010","line":"#endif"},
{"lineNum":" 1011","line":"    template <class... _Args>"},
{"lineNum":" 1012","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 1013","line":"        reference emplace_back(_Args&&... __args);"},
{"lineNum":" 1014","line":"#else"},
{"lineNum":" 1015","line":"       void       emplace_back(_Args&&... __args);"},
{"lineNum":" 1016","line":"#endif"},
{"lineNum":" 1017","line":"    template <class... _Args>"},
{"lineNum":" 1018","line":"        iterator emplace(const_iterator __p, _Args&&... __args);"},
{"lineNum":" 1019","line":""},
{"lineNum":" 1020","line":"    iterator insert(const_iterator __p, value_type&& __x);"},
{"lineNum":" 1021","line":""},
{"lineNum":" 1022","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1023","line":"    iterator insert(const_iterator __p, initializer_list<value_type> __il)"},
{"lineNum":" 1024","line":"        {return insert(__p, __il.begin(), __il.end());}"},
{"lineNum":" 1025","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 1026","line":""},
{"lineNum":" 1027","line":"    void push_front(const value_type& __x);"},
{"lineNum":" 1028","line":"    void push_back(const value_type& __x);"},
{"lineNum":" 1029","line":""},
{"lineNum":" 1030","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1031","line":"    template <class _Arg>"},
{"lineNum":" 1032","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1033","line":"    void __emplace_back(_Arg&& __arg) { emplace_back(_VSTD::forward<_Arg>(__arg)); }"},
{"lineNum":" 1034","line":"#else"},
{"lineNum":" 1035","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1036","line":"    void __emplace_back(value_type const& __arg) { push_back(__arg); }"},
{"lineNum":" 1037","line":"#endif"},
{"lineNum":" 1038","line":""},
{"lineNum":" 1039","line":"    iterator insert(const_iterator __p, const value_type& __x);"},
{"lineNum":" 1040","line":"    iterator insert(const_iterator __p, size_type __n, const value_type& __x);"},
{"lineNum":" 1041","line":"    template <class _InpIter>"},
{"lineNum":" 1042","line":"        iterator insert(const_iterator __p, _InpIter __f, _InpIter __l,"},
{"lineNum":" 1043","line":"             typename enable_if<__is_cpp17_input_iterator<_InpIter>::value>::type* = 0);"},
{"lineNum":" 1044","line":""},
{"lineNum":" 1045","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1046","line":"    void swap(list& __c)"},
{"lineNum":" 1047","line":"#if _LIBCPP_STD_VER >= 14"},
{"lineNum":" 1048","line":"        _NOEXCEPT"},
{"lineNum":" 1049","line":"#else"},
{"lineNum":" 1050","line":"        _NOEXCEPT_(!__node_alloc_traits::propagate_on_container_swap::value ||"},
{"lineNum":" 1051","line":"                   __is_nothrow_swappable<__node_allocator>::value)"},
{"lineNum":" 1052","line":"#endif"},
{"lineNum":" 1053","line":"        {base::swap(__c);}"},
{"lineNum":" 1054","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1055","line":"    void clear() _NOEXCEPT {base::clear();}"},
{"lineNum":" 1056","line":""},
{"lineNum":" 1057","line":"    void pop_front();"},
{"lineNum":" 1058","line":"    void pop_back();"},
{"lineNum":" 1059","line":""},
{"lineNum":" 1060","line":"    iterator erase(const_iterator __p);"},
{"lineNum":" 1061","line":"    iterator erase(const_iterator __f, const_iterator __l);"},
{"lineNum":" 1062","line":""},
{"lineNum":" 1063","line":"    void resize(size_type __n);"},
{"lineNum":" 1064","line":"    void resize(size_type __n, const value_type& __x);"},
{"lineNum":" 1065","line":""},
{"lineNum":" 1066","line":"    void splice(const_iterator __p, list& __c);"},
{"lineNum":" 1067","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1068","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1069","line":"    void splice(const_iterator __p, list&& __c) {splice(__p, __c);}"},
{"lineNum":" 1070","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1071","line":"    void splice(const_iterator __p, list&& __c, const_iterator __i)"},
{"lineNum":" 1072","line":"        {splice(__p, __c, __i);}"},
{"lineNum":" 1073","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1074","line":"    void splice(const_iterator __p, list&& __c, const_iterator __f, const_iterator __l)"},
{"lineNum":" 1075","line":"        {splice(__p, __c, __f, __l);}"},
{"lineNum":" 1076","line":"#endif"},
{"lineNum":" 1077","line":"    void splice(const_iterator __p, list& __c, const_iterator __i);"},
{"lineNum":" 1078","line":"    void splice(const_iterator __p, list& __c, const_iterator __f, const_iterator __l);"},
{"lineNum":" 1079","line":""},
{"lineNum":" 1080","line":"    __remove_return_type remove(const value_type& __x);"},
{"lineNum":" 1081","line":"    template <class _Pred> __remove_return_type remove_if(_Pred __pred);"},
{"lineNum":" 1082","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1083","line":"    __remove_return_type unique() { return unique(__equal_to<value_type>()); }"},
{"lineNum":" 1084","line":"    template <class _BinaryPred>"},
{"lineNum":" 1085","line":"        __remove_return_type unique(_BinaryPred __binary_pred);"},
{"lineNum":" 1086","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1087","line":"    void merge(list& __c);"},
{"lineNum":" 1088","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1089","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1090","line":"    void merge(list&& __c) {merge(__c);}"},
{"lineNum":" 1091","line":""},
{"lineNum":" 1092","line":"    template <class _Comp>"},
{"lineNum":" 1093","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1094","line":"        void merge(list&& __c, _Comp __comp) {merge(__c, __comp);}"},
{"lineNum":" 1095","line":"#endif"},
{"lineNum":" 1096","line":"    template <class _Comp>"},
{"lineNum":" 1097","line":"        void merge(list& __c, _Comp __comp);"},
{"lineNum":" 1098","line":""},
{"lineNum":" 1099","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1100","line":"    void sort();"},
{"lineNum":" 1101","line":"    template <class _Comp>"},
{"lineNum":" 1102","line":"        _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1103","line":"        void sort(_Comp __comp);"},
{"lineNum":" 1104","line":""},
{"lineNum":" 1105","line":"    void reverse() _NOEXCEPT;"},
{"lineNum":" 1106","line":""},
{"lineNum":" 1107","line":"    bool __invariants() const;"},
{"lineNum":" 1108","line":""},
{"lineNum":" 1109","line":"    typedef __allocator_destructor<__node_allocator> __node_destructor;"},
{"lineNum":" 1110","line":"    typedef unique_ptr<__node, __node_destructor> __hold_pointer;"},
{"lineNum":" 1111","line":""},
{"lineNum":" 1112","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1113","line":"    __hold_pointer __allocate_node(__node_allocator& __na) {"},
{"lineNum":" 1114","line":"      __node_pointer __p = __node_alloc_traits::allocate(__na, 1);"},
{"lineNum":" 1115","line":"      __p->__prev_ = nullptr;","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":" 1116","line":"      return __hold_pointer(__p, __node_destructor(__na, 1));"},
{"lineNum":" 1117","line":"    }"},
{"lineNum":" 1118","line":""},
{"lineNum":" 1119","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1120","line":""},
{"lineNum":" 1121","line":"    bool __dereferenceable(const const_iterator* __i) const;"},
{"lineNum":" 1122","line":"    bool __decrementable(const const_iterator* __i) const;"},
{"lineNum":" 1123","line":"    bool __addable(const const_iterator* __i, ptrdiff_t __n) const;"},
{"lineNum":" 1124","line":"    bool __subscriptable(const const_iterator* __i, ptrdiff_t __n) const;"},
{"lineNum":" 1125","line":""},
{"lineNum":" 1126","line":"#endif // _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1127","line":""},
{"lineNum":" 1128","line":"private:"},
{"lineNum":" 1129","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1130","line":"    static void __link_nodes  (__link_pointer __p, __link_pointer __f, __link_pointer __l);"},
{"lineNum":" 1131","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1132","line":"    void __link_nodes_at_front(__link_pointer __f, __link_pointer __l);"},
{"lineNum":" 1133","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1134","line":"    void __link_nodes_at_back (__link_pointer __f, __link_pointer __l);"},
{"lineNum":" 1135","line":"    iterator __iterator(size_type __n);"},
{"lineNum":" 1136","line":"    template <class _Comp>"},
{"lineNum":" 1137","line":"        static iterator __sort(iterator __f1, iterator __e2, size_type __n, _Comp& __comp);"},
{"lineNum":" 1138","line":""},
{"lineNum":" 1139","line":"    void __move_assign(list& __c, true_type)"},
{"lineNum":" 1140","line":"        _NOEXCEPT_(is_nothrow_move_assignable<__node_allocator>::value);"},
{"lineNum":" 1141","line":"    void __move_assign(list& __c, false_type);"},
{"lineNum":" 1142","line":"};"},
{"lineNum":" 1143","line":""},
{"lineNum":" 1144","line":"#ifndef _LIBCPP_HAS_NO_DEDUCTION_GUIDES"},
{"lineNum":" 1145","line":"template<class _InputIterator,"},
{"lineNum":" 1146","line":"         class _Alloc = allocator<__iter_value_type<_InputIterator>>,"},
{"lineNum":" 1147","line":"         class = _EnableIf<__is_allocator<_Alloc>::value>"},
{"lineNum":" 1148","line":"         >"},
{"lineNum":" 1149","line":"list(_InputIterator, _InputIterator)"},
{"lineNum":" 1150","line":"  -> list<__iter_value_type<_InputIterator>, _Alloc>;"},
{"lineNum":" 1151","line":""},
{"lineNum":" 1152","line":"template<class _InputIterator,"},
{"lineNum":" 1153","line":"         class _Alloc,"},
{"lineNum":" 1154","line":"         class = _EnableIf<__is_allocator<_Alloc>::value>"},
{"lineNum":" 1155","line":"         >"},
{"lineNum":" 1156","line":"list(_InputIterator, _InputIterator, _Alloc)"},
{"lineNum":" 1157","line":"  -> list<__iter_value_type<_InputIterator>, _Alloc>;"},
{"lineNum":" 1158","line":"#endif"},
{"lineNum":" 1159","line":""},
{"lineNum":" 1160","line":"// Link in nodes [__f, __l] just prior to __p"},
{"lineNum":" 1161","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1162","line":"inline"},
{"lineNum":" 1163","line":"void"},
{"lineNum":" 1164","line":"list<_Tp, _Alloc>::__link_nodes(__link_pointer __p, __link_pointer __f, __link_pointer __l)"},
{"lineNum":" 1165","line":"{"},
{"lineNum":" 1166","line":"    __p->__prev_->__next_ = __f;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1167","line":"    __f->__prev_ = __p->__prev_;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1168","line":"    __p->__prev_ = __l;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1169","line":"    __l->__next_ = __p;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1170","line":"}"},
{"lineNum":" 1171","line":""},
{"lineNum":" 1172","line":"// Link in nodes [__f, __l] at the front of the list"},
{"lineNum":" 1173","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1174","line":"inline"},
{"lineNum":" 1175","line":"void"},
{"lineNum":" 1176","line":"list<_Tp, _Alloc>::__link_nodes_at_front(__link_pointer __f, __link_pointer __l)"},
{"lineNum":" 1177","line":"{"},
{"lineNum":" 1178","line":"    __f->__prev_ = base::__end_as_link();"},
{"lineNum":" 1179","line":"    __l->__next_ = base::__end_.__next_;"},
{"lineNum":" 1180","line":"    __l->__next_->__prev_ = __l;"},
{"lineNum":" 1181","line":"    base::__end_.__next_ = __f;"},
{"lineNum":" 1182","line":"}"},
{"lineNum":" 1183","line":""},
{"lineNum":" 1184","line":"// Link in nodes [__f, __l] at the back of the list"},
{"lineNum":" 1185","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1186","line":"inline"},
{"lineNum":" 1187","line":"void"},
{"lineNum":" 1188","line":"list<_Tp, _Alloc>::__link_nodes_at_back(__link_pointer __f, __link_pointer __l)"},
{"lineNum":" 1189","line":"{"},
{"lineNum":" 1190","line":"    __l->__next_ = base::__end_as_link();","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1191","line":"    __f->__prev_ = base::__end_.__prev_;","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1192","line":"    __f->__prev_->__next_ = __f;","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1193","line":"    base::__end_.__prev_ = __l;","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":" 1194","line":"}"},
{"lineNum":" 1195","line":""},
{"lineNum":" 1196","line":""},
{"lineNum":" 1197","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1198","line":"inline"},
{"lineNum":" 1199","line":"typename list<_Tp, _Alloc>::iterator"},
{"lineNum":" 1200","line":"list<_Tp, _Alloc>::__iterator(size_type __n)"},
{"lineNum":" 1201","line":"{"},
{"lineNum":" 1202","line":"    return __n <= base::__sz() / 2 ? _VSTD::next(begin(), __n)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1203","line":"                                   : _VSTD::prev(end(), base::__sz() - __n);"},
{"lineNum":" 1204","line":"}"},
{"lineNum":" 1205","line":""},
{"lineNum":" 1206","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1207","line":"list<_Tp, _Alloc>::list(size_type __n)"},
{"lineNum":" 1208","line":"{"},
{"lineNum":" 1209","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1210","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1211","line":"#endif"},
{"lineNum":" 1212","line":"    for (; __n > 0; --__n)"},
{"lineNum":" 1213","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1214","line":"        emplace_back();"},
{"lineNum":" 1215","line":"#else"},
{"lineNum":" 1216","line":"        push_back(value_type());"},
{"lineNum":" 1217","line":"#endif"},
{"lineNum":" 1218","line":"}"},
{"lineNum":" 1219","line":""},
{"lineNum":" 1220","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 1221","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1222","line":"list<_Tp, _Alloc>::list(size_type __n, const allocator_type& __a) : base(__a)"},
{"lineNum":" 1223","line":"{"},
{"lineNum":" 1224","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1225","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1226","line":"#endif"},
{"lineNum":" 1227","line":"    for (; __n > 0; --__n)"},
{"lineNum":" 1228","line":"        emplace_back();"},
{"lineNum":" 1229","line":"}"},
{"lineNum":" 1230","line":"#endif"},
{"lineNum":" 1231","line":""},
{"lineNum":" 1232","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1233","line":"list<_Tp, _Alloc>::list(size_type __n, const value_type& __x)"},
{"lineNum":" 1234","line":"{"},
{"lineNum":" 1235","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1236","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1237","line":"#endif"},
{"lineNum":" 1238","line":"    for (; __n > 0; --__n)"},
{"lineNum":" 1239","line":"        push_back(__x);"},
{"lineNum":" 1240","line":"}"},
{"lineNum":" 1241","line":""},
{"lineNum":" 1242","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1243","line":"list<_Tp, _Alloc>::list(size_type __n, const value_type& __x, const allocator_type& __a)"},
{"lineNum":" 1244","line":"    : base(__a)"},
{"lineNum":" 1245","line":"{"},
{"lineNum":" 1246","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1247","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1248","line":"#endif"},
{"lineNum":" 1249","line":"    for (; __n > 0; --__n)"},
{"lineNum":" 1250","line":"        push_back(__x);"},
{"lineNum":" 1251","line":"}"},
{"lineNum":" 1252","line":""},
{"lineNum":" 1253","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1254","line":"template <class _InpIter>"},
{"lineNum":" 1255","line":"list<_Tp, _Alloc>::list(_InpIter __f, _InpIter __l,"},
{"lineNum":" 1256","line":"                        typename enable_if<__is_cpp17_input_iterator<_InpIter>::value>::type*)"},
{"lineNum":" 1257","line":"{"},
{"lineNum":" 1258","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1259","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1260","line":"#endif"},
{"lineNum":" 1261","line":"    for (; __f != __l; ++__f)"},
{"lineNum":" 1262","line":"        __emplace_back(*__f);"},
{"lineNum":" 1263","line":"}"},
{"lineNum":" 1264","line":""},
{"lineNum":" 1265","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1266","line":"template <class _InpIter>"},
{"lineNum":" 1267","line":"list<_Tp, _Alloc>::list(_InpIter __f, _InpIter __l, const allocator_type& __a,"},
{"lineNum":" 1268","line":"                        typename enable_if<__is_cpp17_input_iterator<_InpIter>::value>::type*)"},
{"lineNum":" 1269","line":"    : base(__a)"},
{"lineNum":" 1270","line":"{"},
{"lineNum":" 1271","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1272","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1273","line":"#endif"},
{"lineNum":" 1274","line":"    for (; __f != __l; ++__f)"},
{"lineNum":" 1275","line":"        __emplace_back(*__f);"},
{"lineNum":" 1276","line":"}"},
{"lineNum":" 1277","line":""},
{"lineNum":" 1278","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1279","line":"list<_Tp, _Alloc>::list(const list& __c)"},
{"lineNum":" 1280","line":"    : base(__node_alloc_traits::select_on_container_copy_construction("},
{"lineNum":" 1281","line":"          __c.__node_alloc())) {"},
{"lineNum":" 1282","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1283","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1284","line":"#endif"},
{"lineNum":" 1285","line":"    for (const_iterator __i = __c.begin(), __e = __c.end(); __i != __e; ++__i)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1286","line":"        push_back(*__i);"},
{"lineNum":" 1287","line":"}"},
{"lineNum":" 1288","line":""},
{"lineNum":" 1289","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1290","line":"list<_Tp, _Alloc>::list(const list& __c, const __identity_t<allocator_type>& __a)"},
{"lineNum":" 1291","line":"    : base(__a)"},
{"lineNum":" 1292","line":"{"},
{"lineNum":" 1293","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1294","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1295","line":"#endif"},
{"lineNum":" 1296","line":"    for (const_iterator __i = __c.begin(), __e = __c.end(); __i != __e; ++__i)"},
{"lineNum":" 1297","line":"        push_back(*__i);"},
{"lineNum":" 1298","line":"}"},
{"lineNum":" 1299","line":""},
{"lineNum":" 1300","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1301","line":""},
{"lineNum":" 1302","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1303","line":"list<_Tp, _Alloc>::list(initializer_list<value_type> __il, const allocator_type& __a)"},
{"lineNum":" 1304","line":"    : base(__a)"},
{"lineNum":" 1305","line":"{"},
{"lineNum":" 1306","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1307","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1308","line":"#endif"},
{"lineNum":" 1309","line":"    for (typename initializer_list<value_type>::const_iterator __i = __il.begin(),"},
{"lineNum":" 1310","line":"            __e = __il.end(); __i != __e; ++__i)"},
{"lineNum":" 1311","line":"        push_back(*__i);"},
{"lineNum":" 1312","line":"}"},
{"lineNum":" 1313","line":""},
{"lineNum":" 1314","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1315","line":"list<_Tp, _Alloc>::list(initializer_list<value_type> __il)"},
{"lineNum":" 1316","line":"{"},
{"lineNum":" 1317","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1318","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1319","line":"#endif"},
{"lineNum":" 1320","line":"    for (typename initializer_list<value_type>::const_iterator __i = __il.begin(),"},
{"lineNum":" 1321","line":"            __e = __il.end(); __i != __e; ++__i)"},
{"lineNum":" 1322","line":"        push_back(*__i);"},
{"lineNum":" 1323","line":"}"},
{"lineNum":" 1324","line":""},
{"lineNum":" 1325","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1326","line":"inline list<_Tp, _Alloc>::list(list&& __c)"},
{"lineNum":" 1327","line":"    _NOEXCEPT_(is_nothrow_move_constructible<__node_allocator>::value)"},
{"lineNum":" 1328","line":"    : base(_VSTD::move(__c.__node_alloc())) {"},
{"lineNum":" 1329","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1330","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1331","line":"#endif"},
{"lineNum":" 1332","line":"    splice(end(), __c);"},
{"lineNum":" 1333","line":"}"},
{"lineNum":" 1334","line":""},
{"lineNum":" 1335","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1336","line":"inline"},
{"lineNum":" 1337","line":"list<_Tp, _Alloc>::list(list&& __c, const __identity_t<allocator_type>& __a)"},
{"lineNum":" 1338","line":"    : base(__a)"},
{"lineNum":" 1339","line":"{"},
{"lineNum":" 1340","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1341","line":"    __get_db()->__insert_c(this);"},
{"lineNum":" 1342","line":"#endif"},
{"lineNum":" 1343","line":"    if (__a == __c.get_allocator())"},
{"lineNum":" 1344","line":"        splice(end(), __c);"},
{"lineNum":" 1345","line":"    else"},
{"lineNum":" 1346","line":"    {"},
{"lineNum":" 1347","line":"        typedef move_iterator<iterator> _Ip;"},
{"lineNum":" 1348","line":"        assign(_Ip(__c.begin()), _Ip(__c.end()));"},
{"lineNum":" 1349","line":"    }"},
{"lineNum":" 1350","line":"}"},
{"lineNum":" 1351","line":""},
{"lineNum":" 1352","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1353","line":"inline"},
{"lineNum":" 1354","line":"list<_Tp, _Alloc>&"},
{"lineNum":" 1355","line":"list<_Tp, _Alloc>::operator=(list&& __c)"},
{"lineNum":" 1356","line":"        _NOEXCEPT_("},
{"lineNum":" 1357","line":"            __node_alloc_traits::propagate_on_container_move_assignment::value &&"},
{"lineNum":" 1358","line":"            is_nothrow_move_assignable<__node_allocator>::value)"},
{"lineNum":" 1359","line":"{"},
{"lineNum":" 1360","line":"    __move_assign(__c, integral_constant<bool,"},
{"lineNum":" 1361","line":"          __node_alloc_traits::propagate_on_container_move_assignment::value>());"},
{"lineNum":" 1362","line":"    return *this;"},
{"lineNum":" 1363","line":"}"},
{"lineNum":" 1364","line":""},
{"lineNum":" 1365","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1366","line":"void"},
{"lineNum":" 1367","line":"list<_Tp, _Alloc>::__move_assign(list& __c, false_type)"},
{"lineNum":" 1368","line":"{"},
{"lineNum":" 1369","line":"    if (base::__node_alloc() != __c.__node_alloc())"},
{"lineNum":" 1370","line":"    {"},
{"lineNum":" 1371","line":"        typedef move_iterator<iterator> _Ip;"},
{"lineNum":" 1372","line":"        assign(_Ip(__c.begin()), _Ip(__c.end()));"},
{"lineNum":" 1373","line":"    }"},
{"lineNum":" 1374","line":"    else"},
{"lineNum":" 1375","line":"        __move_assign(__c, true_type());"},
{"lineNum":" 1376","line":"}"},
{"lineNum":" 1377","line":""},
{"lineNum":" 1378","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1379","line":"void"},
{"lineNum":" 1380","line":"list<_Tp, _Alloc>::__move_assign(list& __c, true_type)"},
{"lineNum":" 1381","line":"        _NOEXCEPT_(is_nothrow_move_assignable<__node_allocator>::value)"},
{"lineNum":" 1382","line":"{"},
{"lineNum":" 1383","line":"    clear();"},
{"lineNum":" 1384","line":"    base::__move_assign_alloc(__c);"},
{"lineNum":" 1385","line":"    splice(end(), __c);"},
{"lineNum":" 1386","line":"}"},
{"lineNum":" 1387","line":""},
{"lineNum":" 1388","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 1389","line":""},
{"lineNum":" 1390","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1391","line":"inline"},
{"lineNum":" 1392","line":"list<_Tp, _Alloc>&"},
{"lineNum":" 1393","line":"list<_Tp, _Alloc>::operator=(const list& __c)"},
{"lineNum":" 1394","line":"{"},
{"lineNum":" 1395","line":"    if (this != &__c)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1396","line":"    {"},
{"lineNum":" 1397","line":"        base::__copy_assign_alloc(__c);"},
{"lineNum":" 1398","line":"        assign(__c.begin(), __c.end());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1399","line":"    }"},
{"lineNum":" 1400","line":"    return *this;"},
{"lineNum":" 1401","line":"}"},
{"lineNum":" 1402","line":""},
{"lineNum":" 1403","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1404","line":"template <class _InpIter>"},
{"lineNum":" 1405","line":"void"},
{"lineNum":" 1406","line":"list<_Tp, _Alloc>::assign(_InpIter __f, _InpIter __l,"},
{"lineNum":" 1407","line":"                          typename enable_if<__is_cpp17_input_iterator<_InpIter>::value>::type*)"},
{"lineNum":" 1408","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1409","line":"    iterator __i = begin();"},
{"lineNum":" 1410","line":"    iterator __e = end();"},
{"lineNum":" 1411","line":"    for (; __f != __l && __i != __e; ++__f, ++__i)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1412","line":"        *__i = *__f;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1413","line":"    if (__i == __e)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1414","line":"        insert(__e, __f, __l);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1415","line":"    else"},
{"lineNum":" 1416","line":"        erase(__i, __e);"},
{"lineNum":" 1417","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1418","line":"      __get_db()->__invalidate_all(this);"},
{"lineNum":" 1419","line":"#endif"},
{"lineNum":" 1420","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1421","line":""},
{"lineNum":" 1422","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1423","line":"void"},
{"lineNum":" 1424","line":"list<_Tp, _Alloc>::assign(size_type __n, const value_type& __x)"},
{"lineNum":" 1425","line":"{"},
{"lineNum":" 1426","line":"    iterator __i = begin();"},
{"lineNum":" 1427","line":"    iterator __e = end();"},
{"lineNum":" 1428","line":"    for (; __n > 0 && __i != __e; --__n, ++__i)"},
{"lineNum":" 1429","line":"        *__i = __x;"},
{"lineNum":" 1430","line":"    if (__i == __e)"},
{"lineNum":" 1431","line":"        insert(__e, __n, __x);"},
{"lineNum":" 1432","line":"    else"},
{"lineNum":" 1433","line":"        erase(__i, __e);"},
{"lineNum":" 1434","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1435","line":"      __get_db()->__invalidate_all(this);"},
{"lineNum":" 1436","line":"#endif"},
{"lineNum":" 1437","line":"}"},
{"lineNum":" 1438","line":""},
{"lineNum":" 1439","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1440","line":"inline"},
{"lineNum":" 1441","line":"_Alloc"},
{"lineNum":" 1442","line":"list<_Tp, _Alloc>::get_allocator() const _NOEXCEPT"},
{"lineNum":" 1443","line":"{"},
{"lineNum":" 1444","line":"    return allocator_type(base::__node_alloc());"},
{"lineNum":" 1445","line":"}"},
{"lineNum":" 1446","line":""},
{"lineNum":" 1447","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1448","line":"typename list<_Tp, _Alloc>::iterator"},
{"lineNum":" 1449","line":"list<_Tp, _Alloc>::insert(const_iterator __p, const value_type& __x)"},
{"lineNum":" 1450","line":"{"},
{"lineNum":" 1451","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1452","line":"    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__p) == this,"},
{"lineNum":" 1453","line":"        \"list::insert(iterator, x) called with an iterator not\""},
{"lineNum":" 1454","line":"        \" referring to this list\");"},
{"lineNum":" 1455","line":"#endif"},
{"lineNum":" 1456","line":"    __node_allocator& __na = base::__node_alloc();"},
{"lineNum":" 1457","line":"    __hold_pointer __hold = __allocate_node(__na);"},
{"lineNum":" 1458","line":"    __node_alloc_traits::construct(__na, _VSTD::addressof(__hold->__value_), __x);"},
{"lineNum":" 1459","line":"    __link_nodes(__p.__ptr_, __hold->__as_link(), __hold->__as_link());"},
{"lineNum":" 1460","line":"    ++base::__sz();"},
{"lineNum":" 1461","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1462","line":"    return iterator(__hold.release()->__as_link(), this);"},
{"lineNum":" 1463","line":"#else"},
{"lineNum":" 1464","line":"    return iterator(__hold.release()->__as_link());"},
{"lineNum":" 1465","line":"#endif"},
{"lineNum":" 1466","line":"}"},
{"lineNum":" 1467","line":""},
{"lineNum":" 1468","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1469","line":"typename list<_Tp, _Alloc>::iterator"},
{"lineNum":" 1470","line":"list<_Tp, _Alloc>::insert(const_iterator __p, size_type __n, const value_type& __x)"},
{"lineNum":" 1471","line":"{"},
{"lineNum":" 1472","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1473","line":"    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__p) == this,"},
{"lineNum":" 1474","line":"        \"list::insert(iterator, n, x) called with an iterator not\""},
{"lineNum":" 1475","line":"        \" referring to this list\");"},
{"lineNum":" 1476","line":"    iterator __r(__p.__ptr_, this);"},
{"lineNum":" 1477","line":"#else"},
{"lineNum":" 1478","line":"    iterator __r(__p.__ptr_);"},
{"lineNum":" 1479","line":"#endif"},
{"lineNum":" 1480","line":"    if (__n > 0)"},
{"lineNum":" 1481","line":"    {"},
{"lineNum":" 1482","line":"        size_type __ds = 0;"},
{"lineNum":" 1483","line":"        __node_allocator& __na = base::__node_alloc();"},
{"lineNum":" 1484","line":"        __hold_pointer __hold = __allocate_node(__na);"},
{"lineNum":" 1485","line":"        __node_alloc_traits::construct(__na, _VSTD::addressof(__hold->__value_), __x);"},
{"lineNum":" 1486","line":"        ++__ds;"},
{"lineNum":" 1487","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1488","line":"        __r = iterator(__hold->__as_link(), this);"},
{"lineNum":" 1489","line":"#else"},
{"lineNum":" 1490","line":"        __r = iterator(__hold->__as_link());"},
{"lineNum":" 1491","line":"#endif"},
{"lineNum":" 1492","line":"        __hold.release();"},
{"lineNum":" 1493","line":"        iterator __e = __r;"},
{"lineNum":" 1494","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1495","line":"        try"},
{"lineNum":" 1496","line":"        {"},
{"lineNum":" 1497","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1498","line":"            for (--__n; __n != 0; --__n, ++__e, ++__ds)"},
{"lineNum":" 1499","line":"            {"},
{"lineNum":" 1500","line":"                __hold.reset(__node_alloc_traits::allocate(__na, 1));"},
{"lineNum":" 1501","line":"                __node_alloc_traits::construct(__na, _VSTD::addressof(__hold->__value_), __x);"},
{"lineNum":" 1502","line":"                __e.__ptr_->__next_ = __hold->__as_link();"},
{"lineNum":" 1503","line":"                __hold->__prev_ = __e.__ptr_;"},
{"lineNum":" 1504","line":"                __hold.release();"},
{"lineNum":" 1505","line":"            }"},
{"lineNum":" 1506","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1507","line":"        }"},
{"lineNum":" 1508","line":"        catch (...)"},
{"lineNum":" 1509","line":"        {"},
{"lineNum":" 1510","line":"            while (true)"},
{"lineNum":" 1511","line":"            {"},
{"lineNum":" 1512","line":"                __node_alloc_traits::destroy(__na, _VSTD::addressof(*__e));"},
{"lineNum":" 1513","line":"                __link_pointer __prev = __e.__ptr_->__prev_;"},
{"lineNum":" 1514","line":"                __node_alloc_traits::deallocate(__na, __e.__ptr_->__as_node(), 1);"},
{"lineNum":" 1515","line":"                if (__prev == 0)"},
{"lineNum":" 1516","line":"                    break;"},
{"lineNum":" 1517","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1518","line":"                __e = iterator(__prev, this);"},
{"lineNum":" 1519","line":"#else"},
{"lineNum":" 1520","line":"                __e = iterator(__prev);"},
{"lineNum":" 1521","line":"#endif"},
{"lineNum":" 1522","line":"            }"},
{"lineNum":" 1523","line":"            throw;"},
{"lineNum":" 1524","line":"        }"},
{"lineNum":" 1525","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1526","line":"        __link_nodes(__p.__ptr_, __r.__ptr_, __e.__ptr_);"},
{"lineNum":" 1527","line":"        base::__sz() += __ds;"},
{"lineNum":" 1528","line":"    }"},
{"lineNum":" 1529","line":"    return __r;"},
{"lineNum":" 1530","line":"}"},
{"lineNum":" 1531","line":""},
{"lineNum":" 1532","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1533","line":"template <class _InpIter>"},
{"lineNum":" 1534","line":"typename list<_Tp, _Alloc>::iterator"},
{"lineNum":" 1535","line":"list<_Tp, _Alloc>::insert(const_iterator __p, _InpIter __f, _InpIter __l,"},
{"lineNum":" 1536","line":"             typename enable_if<__is_cpp17_input_iterator<_InpIter>::value>::type*)"},
{"lineNum":" 1537","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1538","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1539","line":"    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__p) == this,"},
{"lineNum":" 1540","line":"        \"list::insert(iterator, range) called with an iterator not\""},
{"lineNum":" 1541","line":"        \" referring to this list\");"},
{"lineNum":" 1542","line":"    iterator __r(__p.__ptr_, this);"},
{"lineNum":" 1543","line":"#else"},
{"lineNum":" 1544","line":"    iterator __r(__p.__ptr_);"},
{"lineNum":" 1545","line":"#endif"},
{"lineNum":" 1546","line":"    if (__f != __l)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1547","line":"    {"},
{"lineNum":" 1548","line":"        size_type __ds = 0;"},
{"lineNum":" 1549","line":"        __node_allocator& __na = base::__node_alloc();"},
{"lineNum":" 1550","line":"        __hold_pointer __hold = __allocate_node(__na);"},
{"lineNum":" 1551","line":"        __node_alloc_traits::construct(__na, _VSTD::addressof(__hold->__value_), *__f);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1552","line":"        ++__ds;"},
{"lineNum":" 1553","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1554","line":"        __r = iterator(__hold.get()->__as_link(), this);"},
{"lineNum":" 1555","line":"#else"},
{"lineNum":" 1556","line":"        __r = iterator(__hold.get()->__as_link());"},
{"lineNum":" 1557","line":"#endif"},
{"lineNum":" 1558","line":"        __hold.release();"},
{"lineNum":" 1559","line":"        iterator __e = __r;"},
{"lineNum":" 1560","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1561","line":"        try"},
{"lineNum":" 1562","line":"        {"},
{"lineNum":" 1563","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1564","line":"            for (++__f; __f != __l; ++__f, (void) ++__e, (void) ++__ds)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1565","line":"            {"},
{"lineNum":" 1566","line":"                __hold.reset(__node_alloc_traits::allocate(__na, 1));"},
{"lineNum":" 1567","line":"                __node_alloc_traits::construct(__na, _VSTD::addressof(__hold->__value_), *__f);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1568","line":"                __e.__ptr_->__next_ = __hold.get()->__as_link();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1569","line":"                __hold->__prev_ = __e.__ptr_;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1570","line":"                __hold.release();"},
{"lineNum":" 1571","line":"            }"},
{"lineNum":" 1572","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1573","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1574","line":"        catch (...)"},
{"lineNum":" 1575","line":"        {"},
{"lineNum":" 1576","line":"            while (true)"},
{"lineNum":" 1577","line":"            {"},
{"lineNum":" 1578","line":"                __node_alloc_traits::destroy(__na, _VSTD::addressof(*__e));"},
{"lineNum":" 1579","line":"                __link_pointer __prev = __e.__ptr_->__prev_;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1580","line":"                __node_alloc_traits::deallocate(__na, __e.__ptr_->__as_node(), 1);"},
{"lineNum":" 1581","line":"                if (__prev == 0)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1582","line":"                    break;"},
{"lineNum":" 1583","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1584","line":"                __e = iterator(__prev, this);"},
{"lineNum":" 1585","line":"#else"},
{"lineNum":" 1586","line":"                __e = iterator(__prev);"},
{"lineNum":" 1587","line":"#endif"},
{"lineNum":" 1588","line":"            }"},
{"lineNum":" 1589","line":"            throw;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1590","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1591","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1592","line":"        __link_nodes(__p.__ptr_, __r.__ptr_, __e.__ptr_);"},
{"lineNum":" 1593","line":"        base::__sz() += __ds;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1594","line":"    }"},
{"lineNum":" 1595","line":"    return __r;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1596","line":"}"},
{"lineNum":" 1597","line":""},
{"lineNum":" 1598","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1599","line":"void"},
{"lineNum":" 1600","line":"list<_Tp, _Alloc>::push_front(const value_type& __x)"},
{"lineNum":" 1601","line":"{"},
{"lineNum":" 1602","line":"    __node_allocator& __na = base::__node_alloc();"},
{"lineNum":" 1603","line":"    __hold_pointer __hold = __allocate_node(__na);"},
{"lineNum":" 1604","line":"    __node_alloc_traits::construct(__na, _VSTD::addressof(__hold->__value_), __x);"},
{"lineNum":" 1605","line":"    __link_pointer __nl = __hold->__as_link();"},
{"lineNum":" 1606","line":"    __link_nodes_at_front(__nl, __nl);"},
{"lineNum":" 1607","line":"    ++base::__sz();"},
{"lineNum":" 1608","line":"    __hold.release();"},
{"lineNum":" 1609","line":"}"},
{"lineNum":" 1610","line":""},
{"lineNum":" 1611","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1612","line":"void"},
{"lineNum":" 1613","line":"list<_Tp, _Alloc>::push_back(const value_type& __x)"},
{"lineNum":" 1614","line":"{"},
{"lineNum":" 1615","line":"    __node_allocator& __na = base::__node_alloc();"},
{"lineNum":" 1616","line":"    __hold_pointer __hold = __allocate_node(__na);"},
{"lineNum":" 1617","line":"    __node_alloc_traits::construct(__na, _VSTD::addressof(__hold->__value_), __x);","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1618","line":"    __link_nodes_at_back(__hold.get()->__as_link(), __hold.get()->__as_link());"},
{"lineNum":" 1619","line":"    ++base::__sz();","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1620","line":"    __hold.release();"},
{"lineNum":" 1621","line":"}"},
{"lineNum":" 1622","line":""},
{"lineNum":" 1623","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1624","line":""},
{"lineNum":" 1625","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1626","line":"void"},
{"lineNum":" 1627","line":"list<_Tp, _Alloc>::push_front(value_type&& __x)"},
{"lineNum":" 1628","line":"{"},
{"lineNum":" 1629","line":"    __node_allocator& __na = base::__node_alloc();"},
{"lineNum":" 1630","line":"    __hold_pointer __hold = __allocate_node(__na);"},
{"lineNum":" 1631","line":"    __node_alloc_traits::construct(__na, _VSTD::addressof(__hold->__value_), _VSTD::move(__x));"},
{"lineNum":" 1632","line":"    __link_nodes_at_front(__hold.get()->__as_link(), __hold.get()->__as_link());"},
{"lineNum":" 1633","line":"    ++base::__sz();"},
{"lineNum":" 1634","line":"    __hold.release();"},
{"lineNum":" 1635","line":"}"},
{"lineNum":" 1636","line":""},
{"lineNum":" 1637","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1638","line":"void"},
{"lineNum":" 1639","line":"list<_Tp, _Alloc>::push_back(value_type&& __x)"},
{"lineNum":" 1640","line":"{"},
{"lineNum":" 1641","line":"    __node_allocator& __na = base::__node_alloc();"},
{"lineNum":" 1642","line":"    __hold_pointer __hold = __allocate_node(__na);"},
{"lineNum":" 1643","line":"    __node_alloc_traits::construct(__na, _VSTD::addressof(__hold->__value_), _VSTD::move(__x));"},
{"lineNum":" 1644","line":"    __link_nodes_at_back(__hold.get()->__as_link(), __hold.get()->__as_link());"},
{"lineNum":" 1645","line":"    ++base::__sz();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1646","line":"    __hold.release();"},
{"lineNum":" 1647","line":"}"},
{"lineNum":" 1648","line":""},
{"lineNum":" 1649","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1650","line":"template <class... _Args>"},
{"lineNum":" 1651","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 1652","line":"typename list<_Tp, _Alloc>::reference"},
{"lineNum":" 1653","line":"#else"},
{"lineNum":" 1654","line":"void"},
{"lineNum":" 1655","line":"#endif"},
{"lineNum":" 1656","line":"list<_Tp, _Alloc>::emplace_front(_Args&&... __args)"},
{"lineNum":" 1657","line":"{"},
{"lineNum":" 1658","line":"    __node_allocator& __na = base::__node_alloc();"},
{"lineNum":" 1659","line":"    __hold_pointer __hold = __allocate_node(__na);"},
{"lineNum":" 1660","line":"    __node_alloc_traits::construct(__na, _VSTD::addressof(__hold->__value_), _VSTD::forward<_Args>(__args)...);"},
{"lineNum":" 1661","line":"    __link_nodes_at_front(__hold.get()->__as_link(), __hold.get()->__as_link());"},
{"lineNum":" 1662","line":"    ++base::__sz();"},
{"lineNum":" 1663","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 1664","line":"    return __hold.release()->__value_;"},
{"lineNum":" 1665","line":"#else"},
{"lineNum":" 1666","line":"    __hold.release();"},
{"lineNum":" 1667","line":"#endif"},
{"lineNum":" 1668","line":"}"},
{"lineNum":" 1669","line":""},
{"lineNum":" 1670","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1671","line":"template <class... _Args>"},
{"lineNum":" 1672","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 1673","line":"typename list<_Tp, _Alloc>::reference"},
{"lineNum":" 1674","line":"#else"},
{"lineNum":" 1675","line":"void"},
{"lineNum":" 1676","line":"#endif"},
{"lineNum":" 1677","line":"list<_Tp, _Alloc>::emplace_back(_Args&&... __args)"},
{"lineNum":" 1678","line":"{"},
{"lineNum":" 1679","line":"    __node_allocator& __na = base::__node_alloc();"},
{"lineNum":" 1680","line":"    __hold_pointer __hold = __allocate_node(__na);"},
{"lineNum":" 1681","line":"    __node_alloc_traits::construct(__na, _VSTD::addressof(__hold->__value_), _VSTD::forward<_Args>(__args)...);"},
{"lineNum":" 1682","line":"    __link_pointer __nl = __hold->__as_link();"},
{"lineNum":" 1683","line":"    __link_nodes_at_back(__nl, __nl);"},
{"lineNum":" 1684","line":"    ++base::__sz();"},
{"lineNum":" 1685","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 1686","line":"    return __hold.release()->__value_;"},
{"lineNum":" 1687","line":"#else"},
{"lineNum":" 1688","line":"    __hold.release();"},
{"lineNum":" 1689","line":"#endif"},
{"lineNum":" 1690","line":"}"},
{"lineNum":" 1691","line":""},
{"lineNum":" 1692","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1693","line":"template <class... _Args>"},
{"lineNum":" 1694","line":"typename list<_Tp, _Alloc>::iterator"},
{"lineNum":" 1695","line":"list<_Tp, _Alloc>::emplace(const_iterator __p, _Args&&... __args)"},
{"lineNum":" 1696","line":"{"},
{"lineNum":" 1697","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1698","line":"    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__p) == this,"},
{"lineNum":" 1699","line":"        \"list::emplace(iterator, args...) called with an iterator not\""},
{"lineNum":" 1700","line":"        \" referring to this list\");"},
{"lineNum":" 1701","line":"#endif"},
{"lineNum":" 1702","line":"    __node_allocator& __na = base::__node_alloc();"},
{"lineNum":" 1703","line":"    __hold_pointer __hold = __allocate_node(__na);"},
{"lineNum":" 1704","line":"    __node_alloc_traits::construct(__na, _VSTD::addressof(__hold->__value_), _VSTD::forward<_Args>(__args)...);"},
{"lineNum":" 1705","line":"    __link_pointer __nl = __hold.get()->__as_link();"},
{"lineNum":" 1706","line":"    __link_nodes(__p.__ptr_, __nl, __nl);"},
{"lineNum":" 1707","line":"    ++base::__sz();"},
{"lineNum":" 1708","line":"    __hold.release();"},
{"lineNum":" 1709","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1710","line":"    return iterator(__nl, this);"},
{"lineNum":" 1711","line":"#else"},
{"lineNum":" 1712","line":"    return iterator(__nl);"},
{"lineNum":" 1713","line":"#endif"},
{"lineNum":" 1714","line":"}"},
{"lineNum":" 1715","line":""},
{"lineNum":" 1716","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1717","line":"typename list<_Tp, _Alloc>::iterator"},
{"lineNum":" 1718","line":"list<_Tp, _Alloc>::insert(const_iterator __p, value_type&& __x)"},
{"lineNum":" 1719","line":"{"},
{"lineNum":" 1720","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1721","line":"    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__p) == this,"},
{"lineNum":" 1722","line":"        \"list::insert(iterator, x) called with an iterator not\""},
{"lineNum":" 1723","line":"        \" referring to this list\");"},
{"lineNum":" 1724","line":"#endif"},
{"lineNum":" 1725","line":"    __node_allocator& __na = base::__node_alloc();"},
{"lineNum":" 1726","line":"    __hold_pointer __hold = __allocate_node(__na);"},
{"lineNum":" 1727","line":"    __node_alloc_traits::construct(__na, _VSTD::addressof(__hold->__value_), _VSTD::move(__x));"},
{"lineNum":" 1728","line":"    __link_pointer __nl = __hold->__as_link();"},
{"lineNum":" 1729","line":"    __link_nodes(__p.__ptr_, __nl, __nl);"},
{"lineNum":" 1730","line":"    ++base::__sz();"},
{"lineNum":" 1731","line":"    __hold.release();"},
{"lineNum":" 1732","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1733","line":"    return iterator(__nl, this);"},
{"lineNum":" 1734","line":"#else"},
{"lineNum":" 1735","line":"    return iterator(__nl);"},
{"lineNum":" 1736","line":"#endif"},
{"lineNum":" 1737","line":"}"},
{"lineNum":" 1738","line":""},
{"lineNum":" 1739","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 1740","line":""},
{"lineNum":" 1741","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1742","line":"void"},
{"lineNum":" 1743","line":"list<_Tp, _Alloc>::pop_front()"},
{"lineNum":" 1744","line":"{"},
{"lineNum":" 1745","line":"    _LIBCPP_ASSERT(!empty(), \"list::pop_front() called with empty list\");"},
{"lineNum":" 1746","line":"    __node_allocator& __na = base::__node_alloc();"},
{"lineNum":" 1747","line":"    __link_pointer __n = base::__end_.__next_;"},
{"lineNum":" 1748","line":"    base::__unlink_nodes(__n, __n);"},
{"lineNum":" 1749","line":"    --base::__sz();"},
{"lineNum":" 1750","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1751","line":"    __c_node* __c = __get_db()->__find_c_and_lock(this);"},
{"lineNum":" 1752","line":"    for (__i_node** __p = __c->end_; __p != __c->beg_; )"},
{"lineNum":" 1753","line":"    {"},
{"lineNum":" 1754","line":"        --__p;"},
{"lineNum":" 1755","line":"        iterator* __i = static_cast<iterator*>((*__p)->__i_);"},
{"lineNum":" 1756","line":"        if (__i->__ptr_ == __n)"},
{"lineNum":" 1757","line":"        {"},
{"lineNum":" 1758","line":"            (*__p)->__c_ = nullptr;"},
{"lineNum":" 1759","line":"            if (--__c->end_ != __p)"},
{"lineNum":" 1760","line":"                _VSTD::memmove(__p, __p+1, (__c->end_ - __p)*sizeof(__i_node*));"},
{"lineNum":" 1761","line":"        }"},
{"lineNum":" 1762","line":"    }"},
{"lineNum":" 1763","line":"    __get_db()->unlock();"},
{"lineNum":" 1764","line":"#endif"},
{"lineNum":" 1765","line":"    __node_pointer __np = __n->__as_node();"},
{"lineNum":" 1766","line":"    __node_alloc_traits::destroy(__na, _VSTD::addressof(__np->__value_));"},
{"lineNum":" 1767","line":"    __node_alloc_traits::deallocate(__na, __np, 1);"},
{"lineNum":" 1768","line":"}"},
{"lineNum":" 1769","line":""},
{"lineNum":" 1770","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1771","line":"void"},
{"lineNum":" 1772","line":"list<_Tp, _Alloc>::pop_back()"},
{"lineNum":" 1773","line":"{"},
{"lineNum":" 1774","line":"    _LIBCPP_ASSERT(!empty(), \"list::pop_back() called on an empty list\");"},
{"lineNum":" 1775","line":"    __node_allocator& __na = base::__node_alloc();"},
{"lineNum":" 1776","line":"    __link_pointer __n = base::__end_.__prev_;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1777","line":"    base::__unlink_nodes(__n, __n);"},
{"lineNum":" 1778","line":"    --base::__sz();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1779","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1780","line":"    __c_node* __c = __get_db()->__find_c_and_lock(this);"},
{"lineNum":" 1781","line":"    for (__i_node** __p = __c->end_; __p != __c->beg_; )"},
{"lineNum":" 1782","line":"    {"},
{"lineNum":" 1783","line":"        --__p;"},
{"lineNum":" 1784","line":"        iterator* __i = static_cast<iterator*>((*__p)->__i_);"},
{"lineNum":" 1785","line":"        if (__i->__ptr_ == __n)"},
{"lineNum":" 1786","line":"        {"},
{"lineNum":" 1787","line":"            (*__p)->__c_ = nullptr;"},
{"lineNum":" 1788","line":"            if (--__c->end_ != __p)"},
{"lineNum":" 1789","line":"                _VSTD::memmove(__p, __p+1, (__c->end_ - __p)*sizeof(__i_node*));"},
{"lineNum":" 1790","line":"        }"},
{"lineNum":" 1791","line":"    }"},
{"lineNum":" 1792","line":"    __get_db()->unlock();"},
{"lineNum":" 1793","line":"#endif"},
{"lineNum":" 1794","line":"    __node_pointer __np = __n->__as_node();"},
{"lineNum":" 1795","line":"    __node_alloc_traits::destroy(__na, _VSTD::addressof(__np->__value_));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1796","line":"    __node_alloc_traits::deallocate(__na, __np, 1);"},
{"lineNum":" 1797","line":"}"},
{"lineNum":" 1798","line":""},
{"lineNum":" 1799","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1800","line":"typename list<_Tp, _Alloc>::iterator"},
{"lineNum":" 1801","line":"list<_Tp, _Alloc>::erase(const_iterator __p)"},
{"lineNum":" 1802","line":"{"},
{"lineNum":" 1803","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1804","line":"    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__p) == this,"},
{"lineNum":" 1805","line":"        \"list::erase(iterator) called with an iterator not\""},
{"lineNum":" 1806","line":"        \" referring to this list\");"},
{"lineNum":" 1807","line":"#endif"},
{"lineNum":" 1808","line":"    _LIBCPP_ASSERT(__p != end(),"},
{"lineNum":" 1809","line":"        \"list::erase(iterator) called with a non-dereferenceable iterator\");"},
{"lineNum":" 1810","line":"    __node_allocator& __na = base::__node_alloc();"},
{"lineNum":" 1811","line":"    __link_pointer __n = __p.__ptr_;"},
{"lineNum":" 1812","line":"    __link_pointer __r = __n->__next_;"},
{"lineNum":" 1813","line":"    base::__unlink_nodes(__n, __n);"},
{"lineNum":" 1814","line":"    --base::__sz();"},
{"lineNum":" 1815","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1816","line":"    __c_node* __c = __get_db()->__find_c_and_lock(this);"},
{"lineNum":" 1817","line":"    for (__i_node** __ip = __c->end_; __ip != __c->beg_; )"},
{"lineNum":" 1818","line":"    {"},
{"lineNum":" 1819","line":"        --__ip;"},
{"lineNum":" 1820","line":"        iterator* __i = static_cast<iterator*>((*__ip)->__i_);"},
{"lineNum":" 1821","line":"        if (__i->__ptr_ == __n)"},
{"lineNum":" 1822","line":"        {"},
{"lineNum":" 1823","line":"            (*__ip)->__c_ = nullptr;"},
{"lineNum":" 1824","line":"            if (--__c->end_ != __ip)"},
{"lineNum":" 1825","line":"                _VSTD::memmove(__ip, __ip+1, (__c->end_ - __ip)*sizeof(__i_node*));"},
{"lineNum":" 1826","line":"        }"},
{"lineNum":" 1827","line":"    }"},
{"lineNum":" 1828","line":"    __get_db()->unlock();"},
{"lineNum":" 1829","line":"#endif"},
{"lineNum":" 1830","line":"    __node_pointer __np = __n->__as_node();"},
{"lineNum":" 1831","line":"    __node_alloc_traits::destroy(__na, _VSTD::addressof(__np->__value_));"},
{"lineNum":" 1832","line":"    __node_alloc_traits::deallocate(__na, __np, 1);"},
{"lineNum":" 1833","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1834","line":"    return iterator(__r, this);"},
{"lineNum":" 1835","line":"#else"},
{"lineNum":" 1836","line":"    return iterator(__r);"},
{"lineNum":" 1837","line":"#endif"},
{"lineNum":" 1838","line":"}"},
{"lineNum":" 1839","line":""},
{"lineNum":" 1840","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1841","line":"typename list<_Tp, _Alloc>::iterator"},
{"lineNum":" 1842","line":"list<_Tp, _Alloc>::erase(const_iterator __f, const_iterator __l)"},
{"lineNum":" 1843","line":"{"},
{"lineNum":" 1844","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1845","line":"    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__f) == this,"},
{"lineNum":" 1846","line":"        \"list::erase(iterator, iterator) called with an iterator not\""},
{"lineNum":" 1847","line":"        \" referring to this list\");"},
{"lineNum":" 1848","line":"   _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__l) == this,"},
{"lineNum":" 1849","line":"        \"list::erase(iterator, iterator) called with an iterator not\""},
{"lineNum":" 1850","line":"        \" referring to this list\");"},
{"lineNum":" 1851","line":"#endif"},
{"lineNum":" 1852","line":"    if (__f != __l)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1853","line":"    {"},
{"lineNum":" 1854","line":"        __node_allocator& __na = base::__node_alloc();"},
{"lineNum":" 1855","line":"        base::__unlink_nodes(__f.__ptr_, __l.__ptr_->__prev_);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1856","line":"        while (__f != __l)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1857","line":"        {"},
{"lineNum":" 1858","line":"            __link_pointer __n = __f.__ptr_;"},
{"lineNum":" 1859","line":"            ++__f;"},
{"lineNum":" 1860","line":"            --base::__sz();","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1861","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1862","line":"            __c_node* __c = __get_db()->__find_c_and_lock(this);"},
{"lineNum":" 1863","line":"            for (__i_node** __p = __c->end_; __p != __c->beg_; )"},
{"lineNum":" 1864","line":"            {"},
{"lineNum":" 1865","line":"                --__p;"},
{"lineNum":" 1866","line":"                iterator* __i = static_cast<iterator*>((*__p)->__i_);"},
{"lineNum":" 1867","line":"                if (__i->__ptr_ == __n)"},
{"lineNum":" 1868","line":"                {"},
{"lineNum":" 1869","line":"                    (*__p)->__c_ = nullptr;"},
{"lineNum":" 1870","line":"                    if (--__c->end_ != __p)"},
{"lineNum":" 1871","line":"                        _VSTD::memmove(__p, __p+1, (__c->end_ - __p)*sizeof(__i_node*));"},
{"lineNum":" 1872","line":"                }"},
{"lineNum":" 1873","line":"            }"},
{"lineNum":" 1874","line":"            __get_db()->unlock();"},
{"lineNum":" 1875","line":"#endif"},
{"lineNum":" 1876","line":"            __node_pointer __np = __n->__as_node();"},
{"lineNum":" 1877","line":"            __node_alloc_traits::destroy(__na, _VSTD::addressof(__np->__value_));","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1878","line":"            __node_alloc_traits::deallocate(__na, __np, 1);"},
{"lineNum":" 1879","line":"        }"},
{"lineNum":" 1880","line":"    }"},
{"lineNum":" 1881","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1882","line":"    return iterator(__l.__ptr_, this);"},
{"lineNum":" 1883","line":"#else"},
{"lineNum":" 1884","line":"    return iterator(__l.__ptr_);"},
{"lineNum":" 1885","line":"#endif"},
{"lineNum":" 1886","line":"}"},
{"lineNum":" 1887","line":""},
{"lineNum":" 1888","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1889","line":"void"},
{"lineNum":" 1890","line":"list<_Tp, _Alloc>::resize(size_type __n)"},
{"lineNum":" 1891","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1892","line":"    if (__n < base::__sz())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1893","line":"        erase(__iterator(__n), end());"},
{"lineNum":" 1894","line":"    else if (__n > base::__sz())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1895","line":"    {"},
{"lineNum":" 1896","line":"        __n -= base::__sz();"},
{"lineNum":" 1897","line":"        size_type __ds = 0;"},
{"lineNum":" 1898","line":"        __node_allocator& __na = base::__node_alloc();"},
{"lineNum":" 1899","line":"        __hold_pointer __hold = __allocate_node(__na);"},
{"lineNum":" 1900","line":"        __node_alloc_traits::construct(__na, _VSTD::addressof(__hold->__value_));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1901","line":"        ++__ds;"},
{"lineNum":" 1902","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1903","line":"        iterator __r = iterator(__hold.release()->__as_link(), this);"},
{"lineNum":" 1904","line":"#else"},
{"lineNum":" 1905","line":"        iterator __r = iterator(__hold.release()->__as_link());"},
{"lineNum":" 1906","line":"#endif"},
{"lineNum":" 1907","line":"        iterator __e = __r;"},
{"lineNum":" 1908","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1909","line":"        try"},
{"lineNum":" 1910","line":"        {"},
{"lineNum":" 1911","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1912","line":"            for (--__n; __n != 0; --__n, ++__e, ++__ds)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1913","line":"            {"},
{"lineNum":" 1914","line":"                __hold.reset(__node_alloc_traits::allocate(__na, 1));"},
{"lineNum":" 1915","line":"                __node_alloc_traits::construct(__na, _VSTD::addressof(__hold->__value_));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1916","line":"                __e.__ptr_->__next_ = __hold.get()->__as_link();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1917","line":"                __hold->__prev_ = __e.__ptr_;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1918","line":"                __hold.release();"},
{"lineNum":" 1919","line":"            }"},
{"lineNum":" 1920","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1921","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1922","line":"        catch (...)"},
{"lineNum":" 1923","line":"        {"},
{"lineNum":" 1924","line":"            while (true)"},
{"lineNum":" 1925","line":"            {"},
{"lineNum":" 1926","line":"                __node_alloc_traits::destroy(__na, _VSTD::addressof(*__e));"},
{"lineNum":" 1927","line":"                __link_pointer __prev = __e.__ptr_->__prev_;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1928","line":"                __node_alloc_traits::deallocate(__na, __e.__ptr_->__as_node(), 1);"},
{"lineNum":" 1929","line":"                if (__prev == 0)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1930","line":"                    break;"},
{"lineNum":" 1931","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1932","line":"                __e = iterator(__prev, this);"},
{"lineNum":" 1933","line":"#else"},
{"lineNum":" 1934","line":"                __e = iterator(__prev);"},
{"lineNum":" 1935","line":"#endif"},
{"lineNum":" 1936","line":"            }"},
{"lineNum":" 1937","line":"            throw;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1938","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1939","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1940","line":"        __link_nodes_at_back(__r.__ptr_, __e.__ptr_);"},
{"lineNum":" 1941","line":"        base::__sz() += __ds;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1942","line":"    }"},
{"lineNum":" 1943","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1944","line":""},
{"lineNum":" 1945","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 1946","line":"void"},
{"lineNum":" 1947","line":"list<_Tp, _Alloc>::resize(size_type __n, const value_type& __x)"},
{"lineNum":" 1948","line":"{"},
{"lineNum":" 1949","line":"    if (__n < base::__sz())"},
{"lineNum":" 1950","line":"        erase(__iterator(__n), end());"},
{"lineNum":" 1951","line":"    else if (__n > base::__sz())"},
{"lineNum":" 1952","line":"    {"},
{"lineNum":" 1953","line":"        __n -= base::__sz();"},
{"lineNum":" 1954","line":"        size_type __ds = 0;"},
{"lineNum":" 1955","line":"        __node_allocator& __na = base::__node_alloc();"},
{"lineNum":" 1956","line":"        __hold_pointer __hold = __allocate_node(__na);"},
{"lineNum":" 1957","line":"        __node_alloc_traits::construct(__na, _VSTD::addressof(__hold->__value_), __x);"},
{"lineNum":" 1958","line":"        ++__ds;"},
{"lineNum":" 1959","line":"        __link_pointer __nl = __hold.release()->__as_link();"},
{"lineNum":" 1960","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1961","line":"        iterator __r = iterator(__nl, this);"},
{"lineNum":" 1962","line":"#else"},
{"lineNum":" 1963","line":"        iterator __r = iterator(__nl);"},
{"lineNum":" 1964","line":"#endif"},
{"lineNum":" 1965","line":"        iterator __e = __r;"},
{"lineNum":" 1966","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1967","line":"        try"},
{"lineNum":" 1968","line":"        {"},
{"lineNum":" 1969","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1970","line":"            for (--__n; __n != 0; --__n, ++__e, ++__ds)"},
{"lineNum":" 1971","line":"            {"},
{"lineNum":" 1972","line":"                __hold.reset(__node_alloc_traits::allocate(__na, 1));"},
{"lineNum":" 1973","line":"                __node_alloc_traits::construct(__na, _VSTD::addressof(__hold->__value_), __x);"},
{"lineNum":" 1974","line":"                __e.__ptr_->__next_ = __hold.get()->__as_link();"},
{"lineNum":" 1975","line":"                __hold->__prev_ = __e.__ptr_;"},
{"lineNum":" 1976","line":"                __hold.release();"},
{"lineNum":" 1977","line":"            }"},
{"lineNum":" 1978","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1979","line":"        }"},
{"lineNum":" 1980","line":"        catch (...)"},
{"lineNum":" 1981","line":"        {"},
{"lineNum":" 1982","line":"            while (true)"},
{"lineNum":" 1983","line":"            {"},
{"lineNum":" 1984","line":"                __node_alloc_traits::destroy(__na, _VSTD::addressof(*__e));"},
{"lineNum":" 1985","line":"                __link_pointer __prev = __e.__ptr_->__prev_;"},
{"lineNum":" 1986","line":"                __node_alloc_traits::deallocate(__na, __e.__ptr_->__as_node(), 1);"},
{"lineNum":" 1987","line":"                if (__prev == 0)"},
{"lineNum":" 1988","line":"                    break;"},
{"lineNum":" 1989","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 1990","line":"                __e = iterator(__prev, this);"},
{"lineNum":" 1991","line":"#else"},
{"lineNum":" 1992","line":"                __e = iterator(__prev);"},
{"lineNum":" 1993","line":"#endif"},
{"lineNum":" 1994","line":"            }"},
{"lineNum":" 1995","line":"            throw;"},
{"lineNum":" 1996","line":"        }"},
{"lineNum":" 1997","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 1998","line":"        __link_nodes(base::__end_as_link(), __r.__ptr_, __e.__ptr_);"},
{"lineNum":" 1999","line":"        base::__sz() += __ds;"},
{"lineNum":" 2000","line":"    }"},
{"lineNum":" 2001","line":"}"},
{"lineNum":" 2002","line":""},
{"lineNum":" 2003","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 2004","line":"void"},
{"lineNum":" 2005","line":"list<_Tp, _Alloc>::splice(const_iterator __p, list& __c)"},
{"lineNum":" 2006","line":"{"},
{"lineNum":" 2007","line":"    _LIBCPP_ASSERT(this != &__c,"},
{"lineNum":" 2008","line":"                   \"list::splice(iterator, list) called with this == &list\");"},
{"lineNum":" 2009","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2010","line":"    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__p) == this,"},
{"lineNum":" 2011","line":"        \"list::splice(iterator, list) called with an iterator not\""},
{"lineNum":" 2012","line":"        \" referring to this list\");"},
{"lineNum":" 2013","line":"#endif"},
{"lineNum":" 2014","line":"    if (!__c.empty())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2015","line":"    {"},
{"lineNum":" 2016","line":"        __link_pointer __f = __c.__end_.__next_;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2017","line":"        __link_pointer __l = __c.__end_.__prev_;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2018","line":"        base::__unlink_nodes(__f, __l);"},
{"lineNum":" 2019","line":"        __link_nodes(__p.__ptr_, __f, __l);"},
{"lineNum":" 2020","line":"        base::__sz() += __c.__sz();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2021","line":"        __c.__sz() = 0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2022","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2023","line":"        if (&__c != this) {"},
{"lineNum":" 2024","line":"            __libcpp_db* __db = __get_db();"},
{"lineNum":" 2025","line":"            __c_node* __cn1 = __db->__find_c_and_lock(this);"},
{"lineNum":" 2026","line":"            __c_node* __cn2 = __db->__find_c(&__c);"},
{"lineNum":" 2027","line":"            for (__i_node** __ip = __cn2->end_; __ip != __cn2->beg_;)"},
{"lineNum":" 2028","line":"            {"},
{"lineNum":" 2029","line":"                --__ip;"},
{"lineNum":" 2030","line":"                iterator* __i = static_cast<iterator*>((*__ip)->__i_);"},
{"lineNum":" 2031","line":"                if (__i->__ptr_ != __c.__end_as_link())"},
{"lineNum":" 2032","line":"                {"},
{"lineNum":" 2033","line":"                    __cn1->__add(*__ip);"},
{"lineNum":" 2034","line":"                    (*__ip)->__c_ = __cn1;"},
{"lineNum":" 2035","line":"                    if (--__cn2->end_ != __ip)"},
{"lineNum":" 2036","line":"                        _VSTD::memmove(__ip, __ip+1, (__cn2->end_ - __ip)*sizeof(__i_node*));"},
{"lineNum":" 2037","line":"                }"},
{"lineNum":" 2038","line":"            }"},
{"lineNum":" 2039","line":"            __db->unlock();"},
{"lineNum":" 2040","line":"        }"},
{"lineNum":" 2041","line":"#endif"},
{"lineNum":" 2042","line":"    }"},
{"lineNum":" 2043","line":"}"},
{"lineNum":" 2044","line":""},
{"lineNum":" 2045","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 2046","line":"void"},
{"lineNum":" 2047","line":"list<_Tp, _Alloc>::splice(const_iterator __p, list& __c, const_iterator __i)"},
{"lineNum":" 2048","line":"{"},
{"lineNum":" 2049","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2050","line":"    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__p) == this,"},
{"lineNum":" 2051","line":"        \"list::splice(iterator, list, iterator) called with the first iterator\""},
{"lineNum":" 2052","line":"        \" not referring to this list\");"},
{"lineNum":" 2053","line":"    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__i) == &__c,"},
{"lineNum":" 2054","line":"        \"list::splice(iterator, list, iterator) called with the second iterator\""},
{"lineNum":" 2055","line":"        \" not referring to the list argument\");"},
{"lineNum":" 2056","line":"    _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(&__i),"},
{"lineNum":" 2057","line":"        \"list::splice(iterator, list, iterator) called with the second iterator\""},
{"lineNum":" 2058","line":"        \" not dereferenceable\");"},
{"lineNum":" 2059","line":"#endif"},
{"lineNum":" 2060","line":"    if (__p.__ptr_ != __i.__ptr_ && __p.__ptr_ != __i.__ptr_->__next_)"},
{"lineNum":" 2061","line":"    {"},
{"lineNum":" 2062","line":"        __link_pointer __f = __i.__ptr_;"},
{"lineNum":" 2063","line":"        base::__unlink_nodes(__f, __f);"},
{"lineNum":" 2064","line":"        __link_nodes(__p.__ptr_, __f, __f);"},
{"lineNum":" 2065","line":"        --__c.__sz();"},
{"lineNum":" 2066","line":"        ++base::__sz();"},
{"lineNum":" 2067","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2068","line":"        if (&__c != this) {"},
{"lineNum":" 2069","line":"            __libcpp_db* __db = __get_db();"},
{"lineNum":" 2070","line":"            __c_node* __cn1 = __db->__find_c_and_lock(this);"},
{"lineNum":" 2071","line":"            __c_node* __cn2 = __db->__find_c(&__c);"},
{"lineNum":" 2072","line":"            for (__i_node** __ip = __cn2->end_; __ip != __cn2->beg_;)"},
{"lineNum":" 2073","line":"            {"},
{"lineNum":" 2074","line":"                --__ip;"},
{"lineNum":" 2075","line":"                iterator* __j = static_cast<iterator*>((*__ip)->__i_);"},
{"lineNum":" 2076","line":"                if (__j->__ptr_ == __f)"},
{"lineNum":" 2077","line":"                {"},
{"lineNum":" 2078","line":"                    __cn1->__add(*__ip);"},
{"lineNum":" 2079","line":"                    (*__ip)->__c_ = __cn1;"},
{"lineNum":" 2080","line":"                    if (--__cn2->end_ != __ip)"},
{"lineNum":" 2081","line":"                        _VSTD::memmove(__ip, __ip+1, (__cn2->end_ - __ip)*sizeof(__i_node*));"},
{"lineNum":" 2082","line":"                }"},
{"lineNum":" 2083","line":"            }"},
{"lineNum":" 2084","line":"            __db->unlock();"},
{"lineNum":" 2085","line":"        }"},
{"lineNum":" 2086","line":"#endif"},
{"lineNum":" 2087","line":"    }"},
{"lineNum":" 2088","line":"}"},
{"lineNum":" 2089","line":""},
{"lineNum":" 2090","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 2091","line":"void"},
{"lineNum":" 2092","line":"list<_Tp, _Alloc>::splice(const_iterator __p, list& __c, const_iterator __f, const_iterator __l)"},
{"lineNum":" 2093","line":"{"},
{"lineNum":" 2094","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2095","line":"    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__p) == this,"},
{"lineNum":" 2096","line":"        \"list::splice(iterator, list, iterator, iterator) called with first iterator not\""},
{"lineNum":" 2097","line":"        \" referring to this list\");"},
{"lineNum":" 2098","line":"    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__f) == &__c,"},
{"lineNum":" 2099","line":"        \"list::splice(iterator, list, iterator, iterator) called with second iterator not\""},
{"lineNum":" 2100","line":"        \" referring to the list argument\");"},
{"lineNum":" 2101","line":"    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__l) == &__c,"},
{"lineNum":" 2102","line":"        \"list::splice(iterator, list, iterator, iterator) called with third iterator not\""},
{"lineNum":" 2103","line":"        \" referring to the list argument\");"},
{"lineNum":" 2104","line":"    if (this == &__c)"},
{"lineNum":" 2105","line":"    {"},
{"lineNum":" 2106","line":"        for (const_iterator __i = __f; __i != __l; ++__i)"},
{"lineNum":" 2107","line":"            _LIBCPP_ASSERT(__i != __p,"},
{"lineNum":" 2108","line":"                           \"list::splice(iterator, list, iterator, iterator)\""},
{"lineNum":" 2109","line":"                           \" called with the first iterator within the range\""},
{"lineNum":" 2110","line":"                           \" of the second and third iterators\");"},
{"lineNum":" 2111","line":"    }"},
{"lineNum":" 2112","line":"#endif"},
{"lineNum":" 2113","line":"    if (__f != __l)"},
{"lineNum":" 2114","line":"    {"},
{"lineNum":" 2115","line":"        __link_pointer __first = __f.__ptr_;"},
{"lineNum":" 2116","line":"        --__l;"},
{"lineNum":" 2117","line":"        __link_pointer __last = __l.__ptr_;"},
{"lineNum":" 2118","line":"        if (this != &__c)"},
{"lineNum":" 2119","line":"        {"},
{"lineNum":" 2120","line":"            size_type __s = _VSTD::distance(__f, __l) + 1;"},
{"lineNum":" 2121","line":"            __c.__sz() -= __s;"},
{"lineNum":" 2122","line":"            base::__sz() += __s;"},
{"lineNum":" 2123","line":"        }"},
{"lineNum":" 2124","line":"        base::__unlink_nodes(__first, __last);"},
{"lineNum":" 2125","line":"        __link_nodes(__p.__ptr_, __first, __last);"},
{"lineNum":" 2126","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2127","line":"        if (&__c != this) {"},
{"lineNum":" 2128","line":"            __libcpp_db* __db = __get_db();"},
{"lineNum":" 2129","line":"            __c_node* __cn1 = __db->__find_c_and_lock(this);"},
{"lineNum":" 2130","line":"            __c_node* __cn2 = __db->__find_c(&__c);"},
{"lineNum":" 2131","line":"            for (__i_node** __ip = __cn2->end_; __ip != __cn2->beg_;)"},
{"lineNum":" 2132","line":"            {"},
{"lineNum":" 2133","line":"                --__ip;"},
{"lineNum":" 2134","line":"                iterator* __j = static_cast<iterator*>((*__ip)->__i_);"},
{"lineNum":" 2135","line":"                for (__link_pointer __k = __f.__ptr_;"},
{"lineNum":" 2136","line":"                                              __k != __l.__ptr_; __k = __k->__next_)"},
{"lineNum":" 2137","line":"                {"},
{"lineNum":" 2138","line":"                    if (__j->__ptr_ == __k)"},
{"lineNum":" 2139","line":"                    {"},
{"lineNum":" 2140","line":"                        __cn1->__add(*__ip);"},
{"lineNum":" 2141","line":"                        (*__ip)->__c_ = __cn1;"},
{"lineNum":" 2142","line":"                        if (--__cn2->end_ != __ip)"},
{"lineNum":" 2143","line":"                            _VSTD::memmove(__ip, __ip+1, (__cn2->end_ - __ip)*sizeof(__i_node*));"},
{"lineNum":" 2144","line":"                    }"},
{"lineNum":" 2145","line":"                }"},
{"lineNum":" 2146","line":"            }"},
{"lineNum":" 2147","line":"            __db->unlock();"},
{"lineNum":" 2148","line":"        }"},
{"lineNum":" 2149","line":"#endif"},
{"lineNum":" 2150","line":"    }"},
{"lineNum":" 2151","line":"}"},
{"lineNum":" 2152","line":""},
{"lineNum":" 2153","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 2154","line":"typename list<_Tp, _Alloc>::__remove_return_type"},
{"lineNum":" 2155","line":"list<_Tp, _Alloc>::remove(const value_type& __x)"},
{"lineNum":" 2156","line":"{"},
{"lineNum":" 2157","line":"    list<_Tp, _Alloc> __deleted_nodes(get_allocator()); // collect the nodes we\'re removing"},
{"lineNum":" 2158","line":"    for (const_iterator __i = begin(), __e = end(); __i != __e;)"},
{"lineNum":" 2159","line":"    {"},
{"lineNum":" 2160","line":"        if (*__i == __x)"},
{"lineNum":" 2161","line":"        {"},
{"lineNum":" 2162","line":"            const_iterator __j = _VSTD::next(__i);"},
{"lineNum":" 2163","line":"            for (; __j != __e && *__j == __x; ++__j)"},
{"lineNum":" 2164","line":"                ;"},
{"lineNum":" 2165","line":"            __deleted_nodes.splice(__deleted_nodes.end(), *this, __i, __j);"},
{"lineNum":" 2166","line":"            __i = __j;"},
{"lineNum":" 2167","line":"            if (__i != __e)"},
{"lineNum":" 2168","line":"                ++__i;"},
{"lineNum":" 2169","line":"        }"},
{"lineNum":" 2170","line":"        else"},
{"lineNum":" 2171","line":"            ++__i;"},
{"lineNum":" 2172","line":"    }"},
{"lineNum":" 2173","line":""},
{"lineNum":" 2174","line":"    return (__remove_return_type) __deleted_nodes.size();"},
{"lineNum":" 2175","line":"}"},
{"lineNum":" 2176","line":""},
{"lineNum":" 2177","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 2178","line":"template <class _Pred>"},
{"lineNum":" 2179","line":"typename list<_Tp, _Alloc>::__remove_return_type"},
{"lineNum":" 2180","line":"list<_Tp, _Alloc>::remove_if(_Pred __pred)"},
{"lineNum":" 2181","line":"{"},
{"lineNum":" 2182","line":"    list<_Tp, _Alloc> __deleted_nodes(get_allocator()); // collect the nodes we\'re removing"},
{"lineNum":" 2183","line":"    for (iterator __i = begin(), __e = end(); __i != __e;)"},
{"lineNum":" 2184","line":"    {"},
{"lineNum":" 2185","line":"        if (__pred(*__i))"},
{"lineNum":" 2186","line":"        {"},
{"lineNum":" 2187","line":"            iterator __j = _VSTD::next(__i);"},
{"lineNum":" 2188","line":"            for (; __j != __e && __pred(*__j); ++__j)"},
{"lineNum":" 2189","line":"                ;"},
{"lineNum":" 2190","line":"            __deleted_nodes.splice(__deleted_nodes.end(), *this, __i, __j);"},
{"lineNum":" 2191","line":"            __i = __j;"},
{"lineNum":" 2192","line":"            if (__i != __e)"},
{"lineNum":" 2193","line":"                ++__i;"},
{"lineNum":" 2194","line":"        }"},
{"lineNum":" 2195","line":"        else"},
{"lineNum":" 2196","line":"            ++__i;"},
{"lineNum":" 2197","line":"    }"},
{"lineNum":" 2198","line":""},
{"lineNum":" 2199","line":"    return (__remove_return_type) __deleted_nodes.size();"},
{"lineNum":" 2200","line":"}"},
{"lineNum":" 2201","line":""},
{"lineNum":" 2202","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 2203","line":"template <class _BinaryPred>"},
{"lineNum":" 2204","line":"typename list<_Tp, _Alloc>::__remove_return_type"},
{"lineNum":" 2205","line":"list<_Tp, _Alloc>::unique(_BinaryPred __binary_pred)"},
{"lineNum":" 2206","line":"{"},
{"lineNum":" 2207","line":"    list<_Tp, _Alloc> __deleted_nodes(get_allocator()); // collect the nodes we\'re removing"},
{"lineNum":" 2208","line":"    for (iterator __i = begin(), __e = end(); __i != __e;)"},
{"lineNum":" 2209","line":"    {"},
{"lineNum":" 2210","line":"        iterator __j = _VSTD::next(__i);"},
{"lineNum":" 2211","line":"        for (; __j != __e && __binary_pred(*__i, *__j); ++__j)"},
{"lineNum":" 2212","line":"            ;"},
{"lineNum":" 2213","line":"        if (++__i != __j) {"},
{"lineNum":" 2214","line":"            __deleted_nodes.splice(__deleted_nodes.end(), *this, __i, __j);"},
{"lineNum":" 2215","line":"            __i = __j;"},
{"lineNum":" 2216","line":"            }"},
{"lineNum":" 2217","line":"    }"},
{"lineNum":" 2218","line":""},
{"lineNum":" 2219","line":"    return (__remove_return_type) __deleted_nodes.size();"},
{"lineNum":" 2220","line":"}"},
{"lineNum":" 2221","line":""},
{"lineNum":" 2222","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 2223","line":"inline"},
{"lineNum":" 2224","line":"void"},
{"lineNum":" 2225","line":"list<_Tp, _Alloc>::merge(list& __c)"},
{"lineNum":" 2226","line":"{"},
{"lineNum":" 2227","line":"    merge(__c, __less<value_type>());"},
{"lineNum":" 2228","line":"}"},
{"lineNum":" 2229","line":""},
{"lineNum":" 2230","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 2231","line":"template <class _Comp>"},
{"lineNum":" 2232","line":"void"},
{"lineNum":" 2233","line":"list<_Tp, _Alloc>::merge(list& __c, _Comp __comp)"},
{"lineNum":" 2234","line":"{"},
{"lineNum":" 2235","line":"    if (this != _VSTD::addressof(__c))"},
{"lineNum":" 2236","line":"    {"},
{"lineNum":" 2237","line":"        iterator __f1 = begin();"},
{"lineNum":" 2238","line":"        iterator __e1 = end();"},
{"lineNum":" 2239","line":"        iterator __f2 = __c.begin();"},
{"lineNum":" 2240","line":"        iterator __e2 = __c.end();"},
{"lineNum":" 2241","line":"        while (__f1 != __e1 && __f2 != __e2)"},
{"lineNum":" 2242","line":"        {"},
{"lineNum":" 2243","line":"            if (__comp(*__f2, *__f1))"},
{"lineNum":" 2244","line":"            {"},
{"lineNum":" 2245","line":"                size_type __ds = 1;"},
{"lineNum":" 2246","line":"                iterator __m2 = _VSTD::next(__f2);"},
{"lineNum":" 2247","line":"                for (; __m2 != __e2 && __comp(*__m2, *__f1); ++__m2, ++__ds)"},
{"lineNum":" 2248","line":"                    ;"},
{"lineNum":" 2249","line":"                base::__sz() += __ds;"},
{"lineNum":" 2250","line":"                __c.__sz() -= __ds;"},
{"lineNum":" 2251","line":"                __link_pointer __f = __f2.__ptr_;"},
{"lineNum":" 2252","line":"                __link_pointer __l = __m2.__ptr_->__prev_;"},
{"lineNum":" 2253","line":"                __f2 = __m2;"},
{"lineNum":" 2254","line":"                base::__unlink_nodes(__f, __l);"},
{"lineNum":" 2255","line":"                __m2 = _VSTD::next(__f1);"},
{"lineNum":" 2256","line":"                __link_nodes(__f1.__ptr_, __f, __l);"},
{"lineNum":" 2257","line":"                __f1 = __m2;"},
{"lineNum":" 2258","line":"            }"},
{"lineNum":" 2259","line":"            else"},
{"lineNum":" 2260","line":"                ++__f1;"},
{"lineNum":" 2261","line":"        }"},
{"lineNum":" 2262","line":"        splice(__e1, __c);"},
{"lineNum":" 2263","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2264","line":"        __libcpp_db* __db = __get_db();"},
{"lineNum":" 2265","line":"        __c_node* __cn1 = __db->__find_c_and_lock(this);"},
{"lineNum":" 2266","line":"        __c_node* __cn2 = __db->__find_c(&__c);"},
{"lineNum":" 2267","line":"        for (__i_node** __p = __cn2->end_; __p != __cn2->beg_;)"},
{"lineNum":" 2268","line":"        {"},
{"lineNum":" 2269","line":"            --__p;"},
{"lineNum":" 2270","line":"            iterator* __i = static_cast<iterator*>((*__p)->__i_);"},
{"lineNum":" 2271","line":"            if (__i->__ptr_ != __c.__end_as_link())"},
{"lineNum":" 2272","line":"            {"},
{"lineNum":" 2273","line":"                __cn1->__add(*__p);"},
{"lineNum":" 2274","line":"                (*__p)->__c_ = __cn1;"},
{"lineNum":" 2275","line":"                if (--__cn2->end_ != __p)"},
{"lineNum":" 2276","line":"                    _VSTD::memmove(__p, __p+1, (__cn2->end_ - __p)*sizeof(__i_node*));"},
{"lineNum":" 2277","line":"            }"},
{"lineNum":" 2278","line":"        }"},
{"lineNum":" 2279","line":"        __db->unlock();"},
{"lineNum":" 2280","line":"#endif"},
{"lineNum":" 2281","line":"    }"},
{"lineNum":" 2282","line":"}"},
{"lineNum":" 2283","line":""},
{"lineNum":" 2284","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 2285","line":"inline"},
{"lineNum":" 2286","line":"void"},
{"lineNum":" 2287","line":"list<_Tp, _Alloc>::sort()"},
{"lineNum":" 2288","line":"{"},
{"lineNum":" 2289","line":"    sort(__less<value_type>());"},
{"lineNum":" 2290","line":"}"},
{"lineNum":" 2291","line":""},
{"lineNum":" 2292","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 2293","line":"template <class _Comp>"},
{"lineNum":" 2294","line":"inline"},
{"lineNum":" 2295","line":"void"},
{"lineNum":" 2296","line":"list<_Tp, _Alloc>::sort(_Comp __comp)"},
{"lineNum":" 2297","line":"{"},
{"lineNum":" 2298","line":"    __sort(begin(), end(), base::__sz(), __comp);"},
{"lineNum":" 2299","line":"}"},
{"lineNum":" 2300","line":""},
{"lineNum":" 2301","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 2302","line":"template <class _Comp>"},
{"lineNum":" 2303","line":"typename list<_Tp, _Alloc>::iterator"},
{"lineNum":" 2304","line":"list<_Tp, _Alloc>::__sort(iterator __f1, iterator __e2, size_type __n, _Comp& __comp)"},
{"lineNum":" 2305","line":"{"},
{"lineNum":" 2306","line":"    switch (__n)"},
{"lineNum":" 2307","line":"    {"},
{"lineNum":" 2308","line":"    case 0:"},
{"lineNum":" 2309","line":"    case 1:"},
{"lineNum":" 2310","line":"        return __f1;"},
{"lineNum":" 2311","line":"    case 2:"},
{"lineNum":" 2312","line":"        if (__comp(*--__e2, *__f1))"},
{"lineNum":" 2313","line":"        {"},
{"lineNum":" 2314","line":"            __link_pointer __f = __e2.__ptr_;"},
{"lineNum":" 2315","line":"            base::__unlink_nodes(__f, __f);"},
{"lineNum":" 2316","line":"            __link_nodes(__f1.__ptr_, __f, __f);"},
{"lineNum":" 2317","line":"            return __e2;"},
{"lineNum":" 2318","line":"        }"},
{"lineNum":" 2319","line":"        return __f1;"},
{"lineNum":" 2320","line":"    }"},
{"lineNum":" 2321","line":"    size_type __n2 = __n / 2;"},
{"lineNum":" 2322","line":"    iterator __e1 = _VSTD::next(__f1, __n2);"},
{"lineNum":" 2323","line":"    iterator  __r = __f1 = __sort(__f1, __e1, __n2, __comp);"},
{"lineNum":" 2324","line":"    iterator __f2 = __e1 = __sort(__e1, __e2, __n - __n2, __comp);"},
{"lineNum":" 2325","line":"    if (__comp(*__f2, *__f1))"},
{"lineNum":" 2326","line":"    {"},
{"lineNum":" 2327","line":"        iterator __m2 = _VSTD::next(__f2);"},
{"lineNum":" 2328","line":"        for (; __m2 != __e2 && __comp(*__m2, *__f1); ++__m2)"},
{"lineNum":" 2329","line":"            ;"},
{"lineNum":" 2330","line":"        __link_pointer __f = __f2.__ptr_;"},
{"lineNum":" 2331","line":"        __link_pointer __l = __m2.__ptr_->__prev_;"},
{"lineNum":" 2332","line":"        __r = __f2;"},
{"lineNum":" 2333","line":"        __e1 = __f2 = __m2;"},
{"lineNum":" 2334","line":"        base::__unlink_nodes(__f, __l);"},
{"lineNum":" 2335","line":"        __m2 = _VSTD::next(__f1);"},
{"lineNum":" 2336","line":"        __link_nodes(__f1.__ptr_, __f, __l);"},
{"lineNum":" 2337","line":"        __f1 = __m2;"},
{"lineNum":" 2338","line":"    }"},
{"lineNum":" 2339","line":"    else"},
{"lineNum":" 2340","line":"        ++__f1;"},
{"lineNum":" 2341","line":"    while (__f1 != __e1 && __f2 != __e2)"},
{"lineNum":" 2342","line":"    {"},
{"lineNum":" 2343","line":"        if (__comp(*__f2, *__f1))"},
{"lineNum":" 2344","line":"        {"},
{"lineNum":" 2345","line":"            iterator __m2 = _VSTD::next(__f2);"},
{"lineNum":" 2346","line":"            for (; __m2 != __e2 && __comp(*__m2, *__f1); ++__m2)"},
{"lineNum":" 2347","line":"                ;"},
{"lineNum":" 2348","line":"            __link_pointer __f = __f2.__ptr_;"},
{"lineNum":" 2349","line":"            __link_pointer __l = __m2.__ptr_->__prev_;"},
{"lineNum":" 2350","line":"            if (__e1 == __f2)"},
{"lineNum":" 2351","line":"                __e1 = __m2;"},
{"lineNum":" 2352","line":"            __f2 = __m2;"},
{"lineNum":" 2353","line":"            base::__unlink_nodes(__f, __l);"},
{"lineNum":" 2354","line":"            __m2 = _VSTD::next(__f1);"},
{"lineNum":" 2355","line":"            __link_nodes(__f1.__ptr_, __f, __l);"},
{"lineNum":" 2356","line":"            __f1 = __m2;"},
{"lineNum":" 2357","line":"        }"},
{"lineNum":" 2358","line":"        else"},
{"lineNum":" 2359","line":"            ++__f1;"},
{"lineNum":" 2360","line":"    }"},
{"lineNum":" 2361","line":"    return __r;"},
{"lineNum":" 2362","line":"}"},
{"lineNum":" 2363","line":""},
{"lineNum":" 2364","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 2365","line":"void"},
{"lineNum":" 2366","line":"list<_Tp, _Alloc>::reverse() _NOEXCEPT"},
{"lineNum":" 2367","line":"{"},
{"lineNum":" 2368","line":"    if (base::__sz() > 1)"},
{"lineNum":" 2369","line":"    {"},
{"lineNum":" 2370","line":"        iterator __e = end();"},
{"lineNum":" 2371","line":"        for (iterator __i = begin(); __i.__ptr_ != __e.__ptr_;)"},
{"lineNum":" 2372","line":"        {"},
{"lineNum":" 2373","line":"            _VSTD::swap(__i.__ptr_->__prev_, __i.__ptr_->__next_);"},
{"lineNum":" 2374","line":"            __i.__ptr_ = __i.__ptr_->__prev_;"},
{"lineNum":" 2375","line":"        }"},
{"lineNum":" 2376","line":"        _VSTD::swap(__e.__ptr_->__prev_, __e.__ptr_->__next_);"},
{"lineNum":" 2377","line":"    }"},
{"lineNum":" 2378","line":"}"},
{"lineNum":" 2379","line":""},
{"lineNum":" 2380","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 2381","line":"bool"},
{"lineNum":" 2382","line":"list<_Tp, _Alloc>::__invariants() const"},
{"lineNum":" 2383","line":"{"},
{"lineNum":" 2384","line":"    return size() == _VSTD::distance(begin(), end());"},
{"lineNum":" 2385","line":"}"},
{"lineNum":" 2386","line":""},
{"lineNum":" 2387","line":"#if _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2388","line":""},
{"lineNum":" 2389","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 2390","line":"bool"},
{"lineNum":" 2391","line":"list<_Tp, _Alloc>::__dereferenceable(const const_iterator* __i) const"},
{"lineNum":" 2392","line":"{"},
{"lineNum":" 2393","line":"    return __i->__ptr_ != this->__end_as_link();"},
{"lineNum":" 2394","line":"}"},
{"lineNum":" 2395","line":""},
{"lineNum":" 2396","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 2397","line":"bool"},
{"lineNum":" 2398","line":"list<_Tp, _Alloc>::__decrementable(const const_iterator* __i) const"},
{"lineNum":" 2399","line":"{"},
{"lineNum":" 2400","line":"    return !empty() &&  __i->__ptr_ != base::__end_.__next_;"},
{"lineNum":" 2401","line":"}"},
{"lineNum":" 2402","line":""},
{"lineNum":" 2403","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 2404","line":"bool"},
{"lineNum":" 2405","line":"list<_Tp, _Alloc>::__addable(const const_iterator*, ptrdiff_t) const"},
{"lineNum":" 2406","line":"{"},
{"lineNum":" 2407","line":"    return false;"},
{"lineNum":" 2408","line":"}"},
{"lineNum":" 2409","line":""},
{"lineNum":" 2410","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 2411","line":"bool"},
{"lineNum":" 2412","line":"list<_Tp, _Alloc>::__subscriptable(const const_iterator*, ptrdiff_t) const"},
{"lineNum":" 2413","line":"{"},
{"lineNum":" 2414","line":"    return false;"},
{"lineNum":" 2415","line":"}"},
{"lineNum":" 2416","line":""},
{"lineNum":" 2417","line":"#endif // _LIBCPP_DEBUG_LEVEL == 2"},
{"lineNum":" 2418","line":""},
{"lineNum":" 2419","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 2420","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2421","line":"bool"},
{"lineNum":" 2422","line":"operator==(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)"},
{"lineNum":" 2423","line":"{"},
{"lineNum":" 2424","line":"    return __x.size() == __y.size() && _VSTD::equal(__x.begin(), __x.end(), __y.begin());"},
{"lineNum":" 2425","line":"}"},
{"lineNum":" 2426","line":""},
{"lineNum":" 2427","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 2428","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2429","line":"bool"},
{"lineNum":" 2430","line":"operator< (const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)"},
{"lineNum":" 2431","line":"{"},
{"lineNum":" 2432","line":"    return _VSTD::lexicographical_compare(__x.begin(), __x.end(), __y.begin(), __y.end());"},
{"lineNum":" 2433","line":"}"},
{"lineNum":" 2434","line":""},
{"lineNum":" 2435","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 2436","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2437","line":"bool"},
{"lineNum":" 2438","line":"operator!=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)"},
{"lineNum":" 2439","line":"{"},
{"lineNum":" 2440","line":"    return !(__x == __y);"},
{"lineNum":" 2441","line":"}"},
{"lineNum":" 2442","line":""},
{"lineNum":" 2443","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 2444","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2445","line":"bool"},
{"lineNum":" 2446","line":"operator> (const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)"},
{"lineNum":" 2447","line":"{"},
{"lineNum":" 2448","line":"    return __y < __x;"},
{"lineNum":" 2449","line":"}"},
{"lineNum":" 2450","line":""},
{"lineNum":" 2451","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 2452","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2453","line":"bool"},
{"lineNum":" 2454","line":"operator>=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)"},
{"lineNum":" 2455","line":"{"},
{"lineNum":" 2456","line":"    return !(__x < __y);"},
{"lineNum":" 2457","line":"}"},
{"lineNum":" 2458","line":""},
{"lineNum":" 2459","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 2460","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2461","line":"bool"},
{"lineNum":" 2462","line":"operator<=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)"},
{"lineNum":" 2463","line":"{"},
{"lineNum":" 2464","line":"    return !(__y < __x);"},
{"lineNum":" 2465","line":"}"},
{"lineNum":" 2466","line":""},
{"lineNum":" 2467","line":"template <class _Tp, class _Alloc>"},
{"lineNum":" 2468","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2469","line":"void"},
{"lineNum":" 2470","line":"swap(list<_Tp, _Alloc>& __x, list<_Tp, _Alloc>& __y)"},
{"lineNum":" 2471","line":"    _NOEXCEPT_(_NOEXCEPT_(__x.swap(__y)))"},
{"lineNum":" 2472","line":"{"},
{"lineNum":" 2473","line":"    __x.swap(__y);"},
{"lineNum":" 2474","line":"}"},
{"lineNum":" 2475","line":""},
{"lineNum":" 2476","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":" 2477","line":"template <class _Tp, class _Allocator, class _Predicate>"},
{"lineNum":" 2478","line":"inline _LIBCPP_INLINE_VISIBILITY typename list<_Tp, _Allocator>::size_type"},
{"lineNum":" 2479","line":"erase_if(list<_Tp, _Allocator>& __c, _Predicate __pred) {"},
{"lineNum":" 2480","line":"  return __c.remove_if(__pred);"},
{"lineNum":" 2481","line":"}"},
{"lineNum":" 2482","line":""},
{"lineNum":" 2483","line":"template <class _Tp, class _Allocator, class _Up>"},
{"lineNum":" 2484","line":"inline _LIBCPP_INLINE_VISIBILITY typename list<_Tp, _Allocator>::size_type"},
{"lineNum":" 2485","line":"erase(list<_Tp, _Allocator>& __c, const _Up& __v) {"},
{"lineNum":" 2486","line":"  return _VSTD::erase_if(__c, [&](auto& __elem) { return __elem == __v; });"},
{"lineNum":" 2487","line":"}"},
{"lineNum":" 2488","line":"#endif"},
{"lineNum":" 2489","line":""},
{"lineNum":" 2490","line":"_LIBCPP_END_NAMESPACE_STD"},
{"lineNum":" 2491","line":""},
{"lineNum":" 2492","line":"_LIBCPP_POP_MACROS"},
{"lineNum":" 2493","line":""},
{"lineNum":" 2494","line":"#endif // _LIBCPP_LIST"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 96, "covered" : 0,};
var merged_data = [];
