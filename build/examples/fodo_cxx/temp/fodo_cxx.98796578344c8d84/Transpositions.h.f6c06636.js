var data = {lines:[
{"lineNum":"    1","line":"// This file is part of Eigen, a lightweight C++ template library"},
{"lineNum":"    2","line":"// for linear algebra."},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Copyright (C) 2010-2011 Gael Guennebaud <gael.guennebaud@inria.fr>"},
{"lineNum":"    5","line":"//"},
{"lineNum":"    6","line":"// This Source Code Form is subject to the terms of the Mozilla"},
{"lineNum":"    7","line":"// Public License v. 2.0. If a copy of the MPL was not distributed"},
{"lineNum":"    8","line":"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/."},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef EIGEN_TRANSPOSITIONS_H"},
{"lineNum":"   11","line":"#define EIGEN_TRANSPOSITIONS_H"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"#include \"./InternalHeaderCheck.h\""},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"namespace Eigen {"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"template<typename Derived>"},
{"lineNum":"   18","line":"class TranspositionsBase"},
{"lineNum":"   19","line":"{"},
{"lineNum":"   20","line":"    typedef internal::traits<Derived> Traits;"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"  public:"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"    typedef typename Traits::IndicesType IndicesType;"},
{"lineNum":"   25","line":"    typedef typename IndicesType::Scalar StorageIndex;"},
{"lineNum":"   26","line":"    typedef Eigen::Index Index; ///< \\deprecated since Eigen 3.3"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"   29","line":"    Derived& derived() { return *static_cast<Derived*>(this); }"},
{"lineNum":"   30","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"   31","line":"    const Derived& derived() const { return *static_cast<const Derived*>(this); }"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"    /** Copies the \\a other transpositions into \\c *this */"},
{"lineNum":"   34","line":"    template<typename OtherDerived>"},
{"lineNum":"   35","line":"    Derived& operator=(const TranspositionsBase<OtherDerived>& other)"},
{"lineNum":"   36","line":"    {"},
{"lineNum":"   37","line":"      indices() = other.indices();"},
{"lineNum":"   38","line":"      return derived();"},
{"lineNum":"   39","line":"    }"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"    /** \\returns the number of transpositions */"},
{"lineNum":"   42","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"   43","line":"    Index size() const { return indices().size(); }"},
{"lineNum":"   44","line":"    /** \\returns the number of rows of the equivalent permutation matrix */"},
{"lineNum":"   45","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"   46","line":"    Index rows() const { return indices().size(); }"},
{"lineNum":"   47","line":"    /** \\returns the number of columns of the equivalent permutation matrix */"},
{"lineNum":"   48","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"   49","line":"    Index cols() const { return indices().size(); }"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"    /** Direct access to the underlying index vector */"},
{"lineNum":"   52","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"   53","line":"    inline const StorageIndex& coeff(Index i) const { return indices().coeff(i); }"},
{"lineNum":"   54","line":"    /** Direct access to the underlying index vector */"},
{"lineNum":"   55","line":"    inline StorageIndex& coeffRef(Index i) { return indices().coeffRef(i); }"},
{"lineNum":"   56","line":"    /** Direct access to the underlying index vector */"},
{"lineNum":"   57","line":"    inline const StorageIndex& operator()(Index i) const { return indices()(i); }"},
{"lineNum":"   58","line":"    /** Direct access to the underlying index vector */"},
{"lineNum":"   59","line":"    inline StorageIndex& operator()(Index i) { return indices()(i); }"},
{"lineNum":"   60","line":"    /** Direct access to the underlying index vector */"},
{"lineNum":"   61","line":"    inline const StorageIndex& operator[](Index i) const { return indices()(i); }"},
{"lineNum":"   62","line":"    /** Direct access to the underlying index vector */"},
{"lineNum":"   63","line":"    inline StorageIndex& operator[](Index i) { return indices()(i); }"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"    /** const version of indices(). */"},
{"lineNum":"   66","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"   67","line":"    const IndicesType& indices() const { return derived().indices(); }"},
{"lineNum":"   68","line":"    /** \\returns a reference to the stored array representing the transpositions. */"},
{"lineNum":"   69","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"   70","line":"    IndicesType& indices() { return derived().indices(); }"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"    /** Resizes to given size. */"},
{"lineNum":"   73","line":"    inline void resize(Index newSize)"},
{"lineNum":"   74","line":"    {"},
{"lineNum":"   75","line":"      indices().resize(newSize);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   76","line":"    }"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"    /** Sets \\c *this to represents an identity transformation */"},
{"lineNum":"   79","line":"    void setIdentity()"},
{"lineNum":"   80","line":"    {"},
{"lineNum":"   81","line":"      for(StorageIndex i = 0; i < indices().size(); ++i)"},
{"lineNum":"   82","line":"        coeffRef(i) = i;"},
{"lineNum":"   83","line":"    }"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"    // FIXME: do we want such methods ?"},
{"lineNum":"   86","line":"    // might be useful when the target matrix expression is complex, e.g.:"},
{"lineNum":"   87","line":"    // object.matrix().block(..,..,..,..) = trans * object.matrix().block(..,..,..,..);"},
{"lineNum":"   88","line":"    /*"},
{"lineNum":"   89","line":"    template<typename MatrixType>"},
{"lineNum":"   90","line":"    void applyForwardToRows(MatrixType& mat) const"},
{"lineNum":"   91","line":"    {"},
{"lineNum":"   92","line":"      for(Index k=0 ; k<size() ; ++k)"},
{"lineNum":"   93","line":"        if(m_indices(k)!=k)"},
{"lineNum":"   94","line":"          mat.row(k).swap(mat.row(m_indices(k)));"},
{"lineNum":"   95","line":"    }"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"    template<typename MatrixType>"},
{"lineNum":"   98","line":"    void applyBackwardToRows(MatrixType& mat) const"},
{"lineNum":"   99","line":"    {"},
{"lineNum":"  100","line":"      for(Index k=size()-1 ; k>=0 ; --k)"},
{"lineNum":"  101","line":"        if(m_indices(k)!=k)"},
{"lineNum":"  102","line":"          mat.row(k).swap(mat.row(m_indices(k)));"},
{"lineNum":"  103","line":"    }"},
{"lineNum":"  104","line":"    */"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"    /** \\returns the inverse transformation */"},
{"lineNum":"  107","line":"    inline Transpose<TranspositionsBase> inverse() const"},
{"lineNum":"  108","line":"    { return Transpose<TranspositionsBase>(derived()); }"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"    /** \\returns the tranpose transformation */"},
{"lineNum":"  111","line":"    inline Transpose<TranspositionsBase> transpose() const"},
{"lineNum":"  112","line":"    { return Transpose<TranspositionsBase>(derived()); }"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"  protected:"},
{"lineNum":"  115","line":"};"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"namespace internal {"},
{"lineNum":"  118","line":"template<int SizeAtCompileTime, int MaxSizeAtCompileTime, typename StorageIndex_>"},
{"lineNum":"  119","line":"struct traits<Transpositions<SizeAtCompileTime,MaxSizeAtCompileTime,StorageIndex_> >"},
{"lineNum":"  120","line":" : traits<PermutationMatrix<SizeAtCompileTime,MaxSizeAtCompileTime,StorageIndex_> >"},
{"lineNum":"  121","line":"{"},
{"lineNum":"  122","line":"  typedef Matrix<StorageIndex_, SizeAtCompileTime, 1, 0, MaxSizeAtCompileTime, 1> IndicesType;"},
{"lineNum":"  123","line":"  typedef TranspositionsStorage StorageKind;"},
{"lineNum":"  124","line":"};"},
{"lineNum":"  125","line":"}"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"/** \\class Transpositions"},
{"lineNum":"  128","line":"  * \\ingroup Core_Module"},
{"lineNum":"  129","line":"  *"},
{"lineNum":"  130","line":"  * \\brief Represents a sequence of transpositions (row/column interchange)"},
{"lineNum":"  131","line":"  *"},
{"lineNum":"  132","line":"  * \\tparam SizeAtCompileTime the number of transpositions, or Dynamic"},
{"lineNum":"  133","line":"  * \\tparam MaxSizeAtCompileTime the maximum number of transpositions, or Dynamic. This optional parameter defaults to SizeAtCompileTime. Most of the time, you should not have to specify it."},
{"lineNum":"  134","line":"  *"},
{"lineNum":"  135","line":"  * This class represents a permutation transformation as a sequence of \\em n transpositions"},
{"lineNum":"  136","line":"  * \\f$[T_{n-1} \\ldots T_{i} \\ldots T_{0}]\\f$. It is internally stored as a vector of integers \\c indices."},
{"lineNum":"  137","line":"  * Each transposition \\f$ T_{i} \\f$ applied on the left of a matrix (\\f$ T_{i} M\\f$) interchanges"},
{"lineNum":"  138","line":"  * the rows \\c i and \\c indices[i] of the matrix \\c M."},
{"lineNum":"  139","line":"  * A transposition applied on the right (e.g., \\f$ M T_{i}\\f$) yields a column interchange."},
{"lineNum":"  140","line":"  *"},
{"lineNum":"  141","line":"  * Compared to the class PermutationMatrix, such a sequence of transpositions is what is"},
{"lineNum":"  142","line":"  * computed during a decomposition with pivoting, and it is faster when applying the permutation in-place."},
{"lineNum":"  143","line":"  *"},
{"lineNum":"  144","line":"  * To apply a sequence of transpositions to a matrix, simply use the operator * as in the following example:"},
{"lineNum":"  145","line":"  * \\code"},
{"lineNum":"  146","line":"  * Transpositions tr;"},
{"lineNum":"  147","line":"  * MatrixXf mat;"},
{"lineNum":"  148","line":"  * mat = tr * mat;"},
{"lineNum":"  149","line":"  * \\endcode"},
{"lineNum":"  150","line":"  * In this example, we detect that the matrix appears on both side, and so the transpositions"},
{"lineNum":"  151","line":"  * are applied in-place without any temporary or extra copy."},
{"lineNum":"  152","line":"  *"},
{"lineNum":"  153","line":"  * \\sa class PermutationMatrix"},
{"lineNum":"  154","line":"  */"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"template<int SizeAtCompileTime, int MaxSizeAtCompileTime, typename StorageIndex_>"},
{"lineNum":"  157","line":"class Transpositions : public TranspositionsBase<Transpositions<SizeAtCompileTime,MaxSizeAtCompileTime,StorageIndex_> >"},
{"lineNum":"  158","line":"{"},
{"lineNum":"  159","line":"    typedef internal::traits<Transpositions> Traits;"},
{"lineNum":"  160","line":"  public:"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"    typedef TranspositionsBase<Transpositions> Base;"},
{"lineNum":"  163","line":"    typedef typename Traits::IndicesType IndicesType;"},
{"lineNum":"  164","line":"    typedef typename IndicesType::Scalar StorageIndex;"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"    inline Transpositions() {}"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"    /** Copy constructor. */"},
{"lineNum":"  169","line":"    template<typename OtherDerived>"},
{"lineNum":"  170","line":"    inline Transpositions(const TranspositionsBase<OtherDerived>& other)"},
{"lineNum":"  171","line":"      : m_indices(other.indices()) {}"},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"    /** Generic constructor from expression of the transposition indices. */"},
{"lineNum":"  174","line":"    template<typename Other>"},
{"lineNum":"  175","line":"    explicit inline Transpositions(const MatrixBase<Other>& indices) : m_indices(indices)"},
{"lineNum":"  176","line":"    {}"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"    /** Copies the \\a other transpositions into \\c *this */"},
{"lineNum":"  179","line":"    template<typename OtherDerived>"},
{"lineNum":"  180","line":"    Transpositions& operator=(const TranspositionsBase<OtherDerived>& other)"},
{"lineNum":"  181","line":"    {"},
{"lineNum":"  182","line":"      return Base::operator=(other);"},
{"lineNum":"  183","line":"    }"},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"    /** Constructs an uninitialized permutation matrix of given size."},
{"lineNum":"  186","line":"      */"},
{"lineNum":"  187","line":"    inline Transpositions(Index size) : m_indices(size)"},
{"lineNum":"  188","line":"    {}"},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"    /** const version of indices(). */"},
{"lineNum":"  191","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"  192","line":"    const IndicesType& indices() const { return m_indices; }"},
{"lineNum":"  193","line":"    /** \\returns a reference to the stored array representing the transpositions. */"},
{"lineNum":"  194","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"  195","line":"    IndicesType& indices() { return m_indices; }"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"  protected:"},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"    IndicesType m_indices;"},
{"lineNum":"  200","line":"};"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"namespace internal {"},
{"lineNum":"  204","line":"template<int SizeAtCompileTime, int MaxSizeAtCompileTime, typename StorageIndex_, int _PacketAccess>"},
{"lineNum":"  205","line":"struct traits<Map<Transpositions<SizeAtCompileTime,MaxSizeAtCompileTime,StorageIndex_>,_PacketAccess> >"},
{"lineNum":"  206","line":" : traits<PermutationMatrix<SizeAtCompileTime,MaxSizeAtCompileTime,StorageIndex_> >"},
{"lineNum":"  207","line":"{"},
{"lineNum":"  208","line":"  typedef Map<const Matrix<StorageIndex_,SizeAtCompileTime,1,0,MaxSizeAtCompileTime,1>, _PacketAccess> IndicesType;"},
{"lineNum":"  209","line":"  typedef StorageIndex_ StorageIndex;"},
{"lineNum":"  210","line":"  typedef TranspositionsStorage StorageKind;"},
{"lineNum":"  211","line":"};"},
{"lineNum":"  212","line":"}"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"template<int SizeAtCompileTime, int MaxSizeAtCompileTime, typename StorageIndex_, int PacketAccess>"},
{"lineNum":"  215","line":"class Map<Transpositions<SizeAtCompileTime,MaxSizeAtCompileTime,StorageIndex_>,PacketAccess>"},
{"lineNum":"  216","line":" : public TranspositionsBase<Map<Transpositions<SizeAtCompileTime,MaxSizeAtCompileTime,StorageIndex_>,PacketAccess> >"},
{"lineNum":"  217","line":"{"},
{"lineNum":"  218","line":"    typedef internal::traits<Map> Traits;"},
{"lineNum":"  219","line":"  public:"},
{"lineNum":"  220","line":""},
{"lineNum":"  221","line":"    typedef TranspositionsBase<Map> Base;"},
{"lineNum":"  222","line":"    typedef typename Traits::IndicesType IndicesType;"},
{"lineNum":"  223","line":"    typedef typename IndicesType::Scalar StorageIndex;"},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"    explicit inline Map(const StorageIndex* indicesPtr)"},
{"lineNum":"  226","line":"      : m_indices(indicesPtr)"},
{"lineNum":"  227","line":"    {}"},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"    inline Map(const StorageIndex* indicesPtr, Index size)"},
{"lineNum":"  230","line":"      : m_indices(indicesPtr,size)"},
{"lineNum":"  231","line":"    {}"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"    /** Copies the \\a other transpositions into \\c *this */"},
{"lineNum":"  234","line":"    template<typename OtherDerived>"},
{"lineNum":"  235","line":"    Map& operator=(const TranspositionsBase<OtherDerived>& other)"},
{"lineNum":"  236","line":"    {"},
{"lineNum":"  237","line":"      return Base::operator=(other);"},
{"lineNum":"  238","line":"    }"},
{"lineNum":"  239","line":""},
{"lineNum":"  240","line":"    #ifndef EIGEN_PARSED_BY_DOXYGEN"},
{"lineNum":"  241","line":"    /** This is a special case of the templated operator=. Its purpose is to"},
{"lineNum":"  242","line":"      * prevent a default operator= from hiding the templated operator=."},
{"lineNum":"  243","line":"      */"},
{"lineNum":"  244","line":"    Map& operator=(const Map& other)"},
{"lineNum":"  245","line":"    {"},
{"lineNum":"  246","line":"      m_indices = other.m_indices;"},
{"lineNum":"  247","line":"      return *this;"},
{"lineNum":"  248","line":"    }"},
{"lineNum":"  249","line":"    #endif"},
{"lineNum":"  250","line":""},
{"lineNum":"  251","line":"    /** const version of indices(). */"},
{"lineNum":"  252","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"  253","line":"    const IndicesType& indices() const { return m_indices; }"},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"    /** \\returns a reference to the stored array representing the transpositions. */"},
{"lineNum":"  256","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"  257","line":"    IndicesType& indices() { return m_indices; }"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"  protected:"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"    IndicesType m_indices;"},
{"lineNum":"  262","line":"};"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"namespace internal {"},
{"lineNum":"  265","line":"template<typename IndicesType_>"},
{"lineNum":"  266","line":"struct traits<TranspositionsWrapper<IndicesType_> >"},
{"lineNum":"  267","line":" : traits<PermutationWrapper<IndicesType_> >"},
{"lineNum":"  268","line":"{"},
{"lineNum":"  269","line":"  typedef TranspositionsStorage StorageKind;"},
{"lineNum":"  270","line":"};"},
{"lineNum":"  271","line":"}"},
{"lineNum":"  272","line":""},
{"lineNum":"  273","line":"template<typename IndicesType_>"},
{"lineNum":"  274","line":"class TranspositionsWrapper"},
{"lineNum":"  275","line":" : public TranspositionsBase<TranspositionsWrapper<IndicesType_> >"},
{"lineNum":"  276","line":"{"},
{"lineNum":"  277","line":"    typedef internal::traits<TranspositionsWrapper> Traits;"},
{"lineNum":"  278","line":"  public:"},
{"lineNum":"  279","line":""},
{"lineNum":"  280","line":"    typedef TranspositionsBase<TranspositionsWrapper> Base;"},
{"lineNum":"  281","line":"    typedef typename Traits::IndicesType IndicesType;"},
{"lineNum":"  282","line":"    typedef typename IndicesType::Scalar StorageIndex;"},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"    explicit inline TranspositionsWrapper(IndicesType& indices)"},
{"lineNum":"  285","line":"      : m_indices(indices)"},
{"lineNum":"  286","line":"    {}"},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"    /** Copies the \\a other transpositions into \\c *this */"},
{"lineNum":"  289","line":"    template<typename OtherDerived>"},
{"lineNum":"  290","line":"    TranspositionsWrapper& operator=(const TranspositionsBase<OtherDerived>& other)"},
{"lineNum":"  291","line":"    {"},
{"lineNum":"  292","line":"      return Base::operator=(other);"},
{"lineNum":"  293","line":"    }"},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":"    /** const version of indices(). */"},
{"lineNum":"  296","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"  297","line":"    const IndicesType& indices() const { return m_indices; }"},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"    /** \\returns a reference to the stored array representing the transpositions. */"},
{"lineNum":"  300","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"  301","line":"    IndicesType& indices() { return m_indices; }"},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"  protected:"},
{"lineNum":"  304","line":""},
{"lineNum":"  305","line":"    typename IndicesType::Nested m_indices;"},
{"lineNum":"  306","line":"};"},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":""},
{"lineNum":"  309","line":""},
{"lineNum":"  310","line":"/** \\returns the \\a matrix with the \\a transpositions applied to the columns."},
{"lineNum":"  311","line":"  */"},
{"lineNum":"  312","line":"template<typename MatrixDerived, typename TranspositionsDerived>"},
{"lineNum":"  313","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":"  314","line":"const Product<MatrixDerived, TranspositionsDerived, AliasFreeProduct>"},
{"lineNum":"  315","line":"operator*(const MatrixBase<MatrixDerived> &matrix,"},
{"lineNum":"  316","line":"          const TranspositionsBase<TranspositionsDerived>& transpositions)"},
{"lineNum":"  317","line":"{"},
{"lineNum":"  318","line":"  return Product<MatrixDerived, TranspositionsDerived, AliasFreeProduct>"},
{"lineNum":"  319","line":"            (matrix.derived(), transpositions.derived());"},
{"lineNum":"  320","line":"}"},
{"lineNum":"  321","line":""},
{"lineNum":"  322","line":"/** \\returns the \\a matrix with the \\a transpositions applied to the rows."},
{"lineNum":"  323","line":"  */"},
{"lineNum":"  324","line":"template<typename TranspositionsDerived, typename MatrixDerived>"},
{"lineNum":"  325","line":"EIGEN_DEVICE_FUNC"},
{"lineNum":"  326","line":"const Product<TranspositionsDerived, MatrixDerived, AliasFreeProduct>"},
{"lineNum":"  327","line":"operator*(const TranspositionsBase<TranspositionsDerived> &transpositions,"},
{"lineNum":"  328","line":"          const MatrixBase<MatrixDerived>& matrix)"},
{"lineNum":"  329","line":"{"},
{"lineNum":"  330","line":"  return Product<TranspositionsDerived, MatrixDerived, AliasFreeProduct>"},
{"lineNum":"  331","line":"            (transpositions.derived(), matrix.derived());"},
{"lineNum":"  332","line":"}"},
{"lineNum":"  333","line":""},
{"lineNum":"  334","line":"// Template partial specialization for transposed/inverse transpositions"},
{"lineNum":"  335","line":""},
{"lineNum":"  336","line":"namespace internal {"},
{"lineNum":"  337","line":""},
{"lineNum":"  338","line":"template<typename Derived>"},
{"lineNum":"  339","line":"struct traits<Transpose<TranspositionsBase<Derived> > >"},
{"lineNum":"  340","line":" : traits<Derived>"},
{"lineNum":"  341","line":"{};"},
{"lineNum":"  342","line":""},
{"lineNum":"  343","line":"} // end namespace internal"},
{"lineNum":"  344","line":""},
{"lineNum":"  345","line":"template<typename TranspositionsDerived>"},
{"lineNum":"  346","line":"class Transpose<TranspositionsBase<TranspositionsDerived> >"},
{"lineNum":"  347","line":"{"},
{"lineNum":"  348","line":"    typedef TranspositionsDerived TranspositionType;"},
{"lineNum":"  349","line":"    typedef typename TranspositionType::IndicesType IndicesType;"},
{"lineNum":"  350","line":"  public:"},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"    explicit Transpose(const TranspositionType& t) : m_transpositions(t) {}"},
{"lineNum":"  353","line":""},
{"lineNum":"  354","line":"    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR"},
{"lineNum":"  355","line":"    Index size() const EIGEN_NOEXCEPT { return m_transpositions.size(); }"},
{"lineNum":"  356","line":"    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR"},
{"lineNum":"  357","line":"    Index rows() const EIGEN_NOEXCEPT { return m_transpositions.size(); }"},
{"lineNum":"  358","line":"    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR"},
{"lineNum":"  359","line":"    Index cols() const EIGEN_NOEXCEPT { return m_transpositions.size(); }"},
{"lineNum":"  360","line":""},
{"lineNum":"  361","line":"    /** \\returns the \\a matrix with the inverse transpositions applied to the columns."},
{"lineNum":"  362","line":"      */"},
{"lineNum":"  363","line":"    template<typename OtherDerived> friend"},
{"lineNum":"  364","line":"    const Product<OtherDerived, Transpose, AliasFreeProduct>"},
{"lineNum":"  365","line":"    operator*(const MatrixBase<OtherDerived>& matrix, const Transpose& trt)"},
{"lineNum":"  366","line":"    {"},
{"lineNum":"  367","line":"      return Product<OtherDerived, Transpose, AliasFreeProduct>(matrix.derived(), trt);"},
{"lineNum":"  368","line":"    }"},
{"lineNum":"  369","line":""},
{"lineNum":"  370","line":"    /** \\returns the \\a matrix with the inverse transpositions applied to the rows."},
{"lineNum":"  371","line":"      */"},
{"lineNum":"  372","line":"    template<typename OtherDerived>"},
{"lineNum":"  373","line":"    const Product<Transpose, OtherDerived, AliasFreeProduct>"},
{"lineNum":"  374","line":"    operator*(const MatrixBase<OtherDerived>& matrix) const"},
{"lineNum":"  375","line":"    {"},
{"lineNum":"  376","line":"      return Product<Transpose, OtherDerived, AliasFreeProduct>(*this, matrix.derived());"},
{"lineNum":"  377","line":"    }"},
{"lineNum":"  378","line":""},
{"lineNum":"  379","line":"    EIGEN_DEVICE_FUNC"},
{"lineNum":"  380","line":"    const TranspositionType& nestedExpression() const { return m_transpositions; }"},
{"lineNum":"  381","line":""},
{"lineNum":"  382","line":"  protected:"},
{"lineNum":"  383","line":"    const TranspositionType& m_transpositions;"},
{"lineNum":"  384","line":"};"},
{"lineNum":"  385","line":""},
{"lineNum":"  386","line":"} // end namespace Eigen"},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"#endif // EIGEN_TRANSPOSITIONS_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 1, "covered" : 0,};
var merged_data = [];
