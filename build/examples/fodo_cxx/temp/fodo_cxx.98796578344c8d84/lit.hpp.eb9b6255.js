var data = {lines:[
{"lineNum":"    1","line":"/*============================================================================="},
{"lineNum":"    2","line":"    Copyright (c) 2001-2011 Joel de Guzman"},
{"lineNum":"    3","line":"    Copyright (c) 2001-2011 Hartmut Kaiser"},
{"lineNum":"    4","line":"    Copyright (c)      2010 Bryce Lelbach"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"    Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    7","line":"    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    8","line":"==============================================================================*/"},
{"lineNum":"    9","line":"#if !defined(BOOST_SPIRIT_LIT_APR_18_2006_1125PM)"},
{"lineNum":"   10","line":"#define BOOST_SPIRIT_LIT_APR_18_2006_1125PM"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"#if defined(_MSC_VER)"},
{"lineNum":"   13","line":"#pragma once"},
{"lineNum":"   14","line":"#endif"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"#include <boost/spirit/home/qi/domain.hpp>"},
{"lineNum":"   17","line":"#include <boost/spirit/home/qi/skip_over.hpp>"},
{"lineNum":"   18","line":"#include <boost/spirit/home/qi/detail/string_parse.hpp>"},
{"lineNum":"   19","line":"#include <boost/spirit/home/qi/parser.hpp>"},
{"lineNum":"   20","line":"#include <boost/spirit/home/qi/meta_compiler.hpp>"},
{"lineNum":"   21","line":"#include <boost/spirit/home/qi/auxiliary/lazy.hpp>"},
{"lineNum":"   22","line":"#include <boost/spirit/home/qi/detail/enable_lit.hpp>"},
{"lineNum":"   23","line":"#include <boost/spirit/home/support/info.hpp>"},
{"lineNum":"   24","line":"#include <boost/spirit/home/support/char_class.hpp>"},
{"lineNum":"   25","line":"#include <boost/spirit/home/support/modify.hpp>"},
{"lineNum":"   26","line":"#include <boost/spirit/home/support/unused.hpp>"},
{"lineNum":"   27","line":"#include <boost/spirit/home/support/common_terminals.hpp>"},
{"lineNum":"   28","line":"#include <boost/spirit/home/support/string_traits.hpp>"},
{"lineNum":"   29","line":"#include <boost/spirit/home/support/detail/get_encoding.hpp>"},
{"lineNum":"   30","line":"#include <boost/spirit/home/support/handles_container.hpp>"},
{"lineNum":"   31","line":"#include <boost/fusion/include/at.hpp>"},
{"lineNum":"   32","line":"#include <boost/fusion/include/value_at.hpp>"},
{"lineNum":"   33","line":"#include <boost/type_traits/add_reference.hpp>"},
{"lineNum":"   34","line":"#include <boost/type_traits/add_const.hpp>"},
{"lineNum":"   35","line":"#include <boost/mpl/assert.hpp>"},
{"lineNum":"   36","line":"#include <boost/mpl/if.hpp>"},
{"lineNum":"   37","line":"#include <boost/detail/workaround.hpp>"},
{"lineNum":"   38","line":"#include <boost/utility/enable_if.hpp>"},
{"lineNum":"   39","line":"#include <string>"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"namespace boost { namespace spirit"},
{"lineNum":"   42","line":"{"},
{"lineNum":"   43","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   44","line":"    // Enablers"},
{"lineNum":"   45","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   46","line":"    template <typename T>"},
{"lineNum":"   47","line":"    struct use_terminal<qi::domain, T"},
{"lineNum":"   48","line":"      , typename enable_if<traits::is_string<T> >::type> // enables strings"},
{"lineNum":"   49","line":"      : mpl::true_ {};"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"    template <typename CharEncoding, typename A0>"},
{"lineNum":"   52","line":"    struct use_terminal<qi::domain"},
{"lineNum":"   53","line":"      , terminal_ex<"},
{"lineNum":"   54","line":"            tag::char_code<tag::string, CharEncoding>   // enables string(str)"},
{"lineNum":"   55","line":"          , fusion::vector1<A0> >"},
{"lineNum":"   56","line":"    > : traits::is_string<A0> {};"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"    template <typename CharEncoding>                    // enables string(f)"},
{"lineNum":"   59","line":"    struct use_lazy_terminal<"},
{"lineNum":"   60","line":"        qi::domain"},
{"lineNum":"   61","line":"      , tag::char_code<tag::string, CharEncoding>"},
{"lineNum":"   62","line":"      , 1 /*arity*/"},
{"lineNum":"   63","line":"    > : mpl::true_ {};"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"    // enables lit(...)"},
{"lineNum":"   66","line":"    template <typename A0>"},
{"lineNum":"   67","line":"    struct use_terminal<qi::domain"},
{"lineNum":"   68","line":"          , terminal_ex<tag::lit, fusion::vector1<A0> >"},
{"lineNum":"   69","line":"          , typename enable_if<traits::is_string<A0> >::type>"},
{"lineNum":"   70","line":"      : mpl::true_ {};"},
{"lineNum":"   71","line":"}}"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"namespace boost { namespace spirit { namespace qi"},
{"lineNum":"   74","line":"{"},
{"lineNum":"   75","line":"#ifndef BOOST_SPIRIT_NO_PREDEFINED_TERMINALS"},
{"lineNum":"   76","line":"    using spirit::lit;"},
{"lineNum":"   77","line":"#endif"},
{"lineNum":"   78","line":"    using spirit::lit_type;"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   81","line":"    // Parse for literal strings"},
{"lineNum":"   82","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   83","line":"    template <typename String, bool no_attribute>"},
{"lineNum":"   84","line":"    struct literal_string"},
{"lineNum":"   85","line":"      : primitive_parser<literal_string<String, no_attribute> >"},
{"lineNum":"   86","line":"    {"},
{"lineNum":"   87","line":"        typedef typename"},
{"lineNum":"   88","line":"            remove_const<typename traits::char_type_of<String>::type>::type"},
{"lineNum":"   89","line":"        char_type;"},
{"lineNum":"   90","line":"        typedef std::basic_string<char_type> string_type;"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"        literal_string(typename add_reference<String>::type str_)"},
{"lineNum":"   93","line":"          : str(str_)"},
{"lineNum":"   94","line":"        {}"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"        template <typename Context, typename Iterator>"},
{"lineNum":"   97","line":"        struct attribute"},
{"lineNum":"   98","line":"        {"},
{"lineNum":"   99","line":"            typedef typename mpl::if_c<"},
{"lineNum":"  100","line":"                no_attribute, unused_type, string_type>::type"},
{"lineNum":"  101","line":"            type;"},
{"lineNum":"  102","line":"        };"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"        template <typename Iterator, typename Context"},
{"lineNum":"  105","line":"          , typename Skipper, typename Attribute>"},
{"lineNum":"  106","line":"        bool parse(Iterator& first, Iterator const& last"},
{"lineNum":"  107","line":"          , Context& /*context*/, Skipper const& skipper, Attribute& attr_) const"},
{"lineNum":"  108","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  109","line":"            qi::skip_over(first, last, skipper);"},
{"lineNum":"  110","line":"            return detail::string_parse(str, first, last, attr_);","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  111","line":"        }"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"        template <typename Context>"},
{"lineNum":"  114","line":"        info what(Context& /*context*/) const"},
{"lineNum":"  115","line":"        {"},
{"lineNum":"  116","line":"            return info(\"literal-string\", str);"},
{"lineNum":"  117","line":"        }"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"        String str;"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"    private:"},
{"lineNum":"  122","line":"        // silence MSVC warning C4512: assignment operator could not be generated"},
{"lineNum":"  123","line":"        literal_string& operator= (literal_string const&);"},
{"lineNum":"  124","line":"    };"},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"    template <typename String, bool no_attribute>"},
{"lineNum":"  127","line":"    struct no_case_literal_string","class":"lineNoCov","hits":"0","possible_hits":"95",},
{"lineNum":"  128","line":"      : primitive_parser<no_case_literal_string<String, no_attribute> >"},
{"lineNum":"  129","line":"    {"},
{"lineNum":"  130","line":"        typedef typename"},
{"lineNum":"  131","line":"            remove_const<typename traits::char_type_of<String>::type>::type"},
{"lineNum":"  132","line":"        char_type;"},
{"lineNum":"  133","line":"        typedef std::basic_string<char_type> string_type;"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"        template <typename CharEncoding>"},
{"lineNum":"  136","line":"        no_case_literal_string(char_type const* in, CharEncoding encoding)"},
{"lineNum":"  137","line":"          : str_lo(in)"},
{"lineNum":"  138","line":"          , str_hi(in)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  139","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  140","line":"#if BOOST_WORKAROUND(BOOST_MSVC, BOOST_TESTED_AT(1600))"},
{"lineNum":"  141","line":"            encoding; // suppresses warning: C4100: \'encoding\' : unreferenced formal parameter"},
{"lineNum":"  142","line":"#endif"},
{"lineNum":"  143","line":"            typename string_type::iterator loi = str_lo.begin();"},
{"lineNum":"  144","line":"            typename string_type::iterator hii = str_hi.begin();"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"            for (; loi != str_lo.end(); ++loi, ++hii, ++in)","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":"  147","line":"            {"},
{"lineNum":"  148","line":"                typedef typename CharEncoding::char_type encoded_char_type;"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"                *loi = static_cast<char_type>(encoding.tolower(encoded_char_type(*loi)));","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  151","line":"                *hii = static_cast<char_type>(encoding.toupper(encoded_char_type(*hii)));","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  152","line":"            }"},
{"lineNum":"  153","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"        template <typename Context, typename Iterator>"},
{"lineNum":"  156","line":"        struct attribute"},
{"lineNum":"  157","line":"        {"},
{"lineNum":"  158","line":"            typedef typename mpl::if_c<"},
{"lineNum":"  159","line":"                no_attribute, unused_type, string_type>::type"},
{"lineNum":"  160","line":"            type;"},
{"lineNum":"  161","line":"        };"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"        template <typename Iterator, typename Context"},
{"lineNum":"  164","line":"          , typename Skipper, typename Attribute>"},
{"lineNum":"  165","line":"        bool parse(Iterator& first, Iterator const& last"},
{"lineNum":"  166","line":"          , Context& /*context*/, Skipper const& skipper, Attribute& attr_) const"},
{"lineNum":"  167","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  168","line":"            qi::skip_over(first, last, skipper);"},
{"lineNum":"  169","line":"            return detail::string_parse(str_lo, str_hi, first, last, attr_);","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  170","line":"        }"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"        template <typename Context>"},
{"lineNum":"  173","line":"        info what(Context& /*context*/) const"},
{"lineNum":"  174","line":"        {"},
{"lineNum":"  175","line":"            return info(\"no-case-literal-string\", str_lo);"},
{"lineNum":"  176","line":"        }"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"        string_type str_lo, str_hi;"},
{"lineNum":"  179","line":"    };"},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  182","line":"    // Parser generators: make_xxx function (objects)"},
{"lineNum":"  183","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  184","line":"    template <typename T, typename Modifiers>"},
{"lineNum":"  185","line":"    struct make_primitive<T, Modifiers"},
{"lineNum":"  186","line":"      , typename enable_if<traits::is_string<T> >::type>"},
{"lineNum":"  187","line":"    {"},
{"lineNum":"  188","line":"        typedef has_modifier<Modifiers, tag::char_code_base<tag::no_case> > no_case;"},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"        typedef typename add_const<T>::type const_string;"},
{"lineNum":"  191","line":"        typedef typename mpl::if_<"},
{"lineNum":"  192","line":"            no_case"},
{"lineNum":"  193","line":"          , no_case_literal_string<const_string, true>"},
{"lineNum":"  194","line":"          , literal_string<const_string, true> >::type"},
{"lineNum":"  195","line":"        result_type;"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"        result_type operator()("},
{"lineNum":"  198","line":"            typename add_reference<const_string>::type str, unused_type) const"},
{"lineNum":"  199","line":"        {"},
{"lineNum":"  200","line":"            return op(str, no_case());"},
{"lineNum":"  201","line":"        }"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"        template <typename String>"},
{"lineNum":"  204","line":"        result_type op(String const& str, mpl::false_) const"},
{"lineNum":"  205","line":"        {"},
{"lineNum":"  206","line":"            return result_type(str);"},
{"lineNum":"  207","line":"        }"},
{"lineNum":"  208","line":""},
{"lineNum":"  209","line":"        template <typename String>"},
{"lineNum":"  210","line":"        result_type op(String const& str, mpl::true_) const"},
{"lineNum":"  211","line":"        {"},
{"lineNum":"  212","line":"            typename spirit::detail::get_encoding<Modifiers,"},
{"lineNum":"  213","line":"                spirit::char_encoding::standard>::type encoding;"},
{"lineNum":"  214","line":"            return result_type(traits::get_c_string(str), encoding);","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  215","line":"        }"},
{"lineNum":"  216","line":"    };"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"    // lit(\"...\")"},
{"lineNum":"  219","line":"    template <typename Modifiers, typename A0>"},
{"lineNum":"  220","line":"    struct make_primitive<"},
{"lineNum":"  221","line":"        terminal_ex<tag::lit, fusion::vector1<A0> >"},
{"lineNum":"  222","line":"      , Modifiers"},
{"lineNum":"  223","line":"      , typename enable_if<traits::is_string<A0> >::type>"},
{"lineNum":"  224","line":"    {"},
{"lineNum":"  225","line":"        typedef has_modifier<Modifiers, tag::char_code_base<tag::no_case> > no_case;"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"        typedef typename add_const<A0>::type const_string;"},
{"lineNum":"  228","line":"        typedef typename mpl::if_<"},
{"lineNum":"  229","line":"            no_case"},
{"lineNum":"  230","line":"          , no_case_literal_string<const_string, true>"},
{"lineNum":"  231","line":"          , literal_string<const_string, true> >::type"},
{"lineNum":"  232","line":"        result_type;"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"        template <typename Terminal>"},
{"lineNum":"  235","line":"        result_type operator()(Terminal const& term, unused_type) const"},
{"lineNum":"  236","line":"        {"},
{"lineNum":"  237","line":"            return op(fusion::at_c<0>(term.args), no_case());"},
{"lineNum":"  238","line":"        }"},
{"lineNum":"  239","line":""},
{"lineNum":"  240","line":"        template <typename String>"},
{"lineNum":"  241","line":"        result_type op(String const& str, mpl::false_) const"},
{"lineNum":"  242","line":"        {"},
{"lineNum":"  243","line":"            return result_type(str);"},
{"lineNum":"  244","line":"        }"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"        template <typename String>"},
{"lineNum":"  247","line":"        result_type op(String const& str, mpl::true_) const"},
{"lineNum":"  248","line":"        {"},
{"lineNum":"  249","line":"            typedef typename traits::char_encoding_from_char<"},
{"lineNum":"  250","line":"                typename traits::char_type_of<A0>::type>::type encoding_type;"},
{"lineNum":"  251","line":"            typename spirit::detail::get_encoding<Modifiers,"},
{"lineNum":"  252","line":"                encoding_type>::type encoding;"},
{"lineNum":"  253","line":"            return result_type(traits::get_c_string(str), encoding);"},
{"lineNum":"  254","line":"        }"},
{"lineNum":"  255","line":"    };"},
{"lineNum":"  256","line":""},
{"lineNum":"  257","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  258","line":"    // string(\"...\")"},
{"lineNum":"  259","line":"    template <typename CharEncoding, typename Modifiers, typename A0>"},
{"lineNum":"  260","line":"    struct make_primitive<"},
{"lineNum":"  261","line":"        terminal_ex<"},
{"lineNum":"  262","line":"            tag::char_code<tag::string, CharEncoding>"},
{"lineNum":"  263","line":"          , fusion::vector1<A0> >"},
{"lineNum":"  264","line":"      , Modifiers>"},
{"lineNum":"  265","line":"    {"},
{"lineNum":"  266","line":"        typedef CharEncoding encoding;"},
{"lineNum":"  267","line":"        typedef has_modifier<Modifiers, tag::char_code_base<tag::no_case> > no_case;"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"        typedef typename add_const<A0>::type const_string;"},
{"lineNum":"  270","line":"        typedef typename mpl::if_<"},
{"lineNum":"  271","line":"            no_case"},
{"lineNum":"  272","line":"          , no_case_literal_string<const_string, false>"},
{"lineNum":"  273","line":"          , literal_string<const_string, false> >::type"},
{"lineNum":"  274","line":"        result_type;"},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"        template <typename Terminal>"},
{"lineNum":"  277","line":"        result_type operator()(Terminal const& term, unused_type) const"},
{"lineNum":"  278","line":"        {"},
{"lineNum":"  279","line":"            return op(fusion::at_c<0>(term.args), no_case());"},
{"lineNum":"  280","line":"        }"},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"        template <typename String>"},
{"lineNum":"  283","line":"        result_type op(String const& str, mpl::false_) const"},
{"lineNum":"  284","line":"        {"},
{"lineNum":"  285","line":"            return result_type(str);"},
{"lineNum":"  286","line":"        }"},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"        template <typename String>"},
{"lineNum":"  289","line":"        result_type op(String const& str, mpl::true_) const"},
{"lineNum":"  290","line":"        {"},
{"lineNum":"  291","line":"            return result_type(traits::get_c_string(str), encoding());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  292","line":"        }"},
{"lineNum":"  293","line":"    };"},
{"lineNum":"  294","line":"}}}"},
{"lineNum":"  295","line":""},
{"lineNum":"  296","line":"namespace boost { namespace spirit { namespace traits"},
{"lineNum":"  297","line":"{"},
{"lineNum":"  298","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  299","line":"    template <typename String, bool no_attribute, typename Attribute"},
{"lineNum":"  300","line":"      ,typename Context, typename Iterator>"},
{"lineNum":"  301","line":"    struct handles_container<qi::literal_string<String, no_attribute>"},
{"lineNum":"  302","line":"      , Attribute, Context, Iterator>"},
{"lineNum":"  303","line":"      : mpl::true_ {};"},
{"lineNum":"  304","line":""},
{"lineNum":"  305","line":"    template <typename String, bool no_attribute, typename Attribute"},
{"lineNum":"  306","line":"      , typename Context, typename Iterator>"},
{"lineNum":"  307","line":"    struct handles_container<qi::no_case_literal_string<String, no_attribute>"},
{"lineNum":"  308","line":"      , Attribute, Context, Iterator>"},
{"lineNum":"  309","line":"      : mpl::true_ {};"},
{"lineNum":"  310","line":"}}}"},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 13, "covered" : 0,};
var merged_data = [];
