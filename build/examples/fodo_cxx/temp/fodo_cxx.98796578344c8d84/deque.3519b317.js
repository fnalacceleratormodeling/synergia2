var data = {lines:[
{"lineNum":"    1","line":"// -*- C++ -*-"},
{"lineNum":"    2","line":"//===---------------------------- deque -----------------------------------===//"},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions."},
{"lineNum":"    5","line":"// See https://llvm.org/LICENSE.txt for license information."},
{"lineNum":"    6","line":"// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef _LIBCPP_DEQUE"},
{"lineNum":"   11","line":"#define _LIBCPP_DEQUE"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"/*"},
{"lineNum":"   14","line":"    deque synopsis"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"namespace std"},
{"lineNum":"   17","line":"{"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"template <class T, class Allocator = allocator<T> >"},
{"lineNum":"   20","line":"class deque"},
{"lineNum":"   21","line":"{"},
{"lineNum":"   22","line":"public:"},
{"lineNum":"   23","line":"    // types:"},
{"lineNum":"   24","line":"    typedef T value_type;"},
{"lineNum":"   25","line":"    typedef Allocator allocator_type;"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"    typedef typename allocator_type::reference       reference;"},
{"lineNum":"   28","line":"    typedef typename allocator_type::const_reference const_reference;"},
{"lineNum":"   29","line":"    typedef implementation-defined                   iterator;"},
{"lineNum":"   30","line":"    typedef implementation-defined                   const_iterator;"},
{"lineNum":"   31","line":"    typedef typename allocator_type::size_type       size_type;"},
{"lineNum":"   32","line":"    typedef typename allocator_type::difference_type difference_type;"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"    typedef typename allocator_type::pointer         pointer;"},
{"lineNum":"   35","line":"    typedef typename allocator_type::const_pointer   const_pointer;"},
{"lineNum":"   36","line":"    typedef std::reverse_iterator<iterator>          reverse_iterator;"},
{"lineNum":"   37","line":"    typedef std::reverse_iterator<const_iterator>    const_reverse_iterator;"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"    // construct/copy/destroy:"},
{"lineNum":"   40","line":"    deque() noexcept(is_nothrow_default_constructible<allocator_type>::value);"},
{"lineNum":"   41","line":"    explicit deque(const allocator_type& a);"},
{"lineNum":"   42","line":"    explicit deque(size_type n);"},
{"lineNum":"   43","line":"    explicit deque(size_type n, const allocator_type& a); // C++14"},
{"lineNum":"   44","line":"    deque(size_type n, const value_type& v);"},
{"lineNum":"   45","line":"    deque(size_type n, const value_type& v, const allocator_type& a);"},
{"lineNum":"   46","line":"    template <class InputIterator>"},
{"lineNum":"   47","line":"        deque(InputIterator f, InputIterator l);"},
{"lineNum":"   48","line":"    template <class InputIterator>"},
{"lineNum":"   49","line":"        deque(InputIterator f, InputIterator l, const allocator_type& a);"},
{"lineNum":"   50","line":"    deque(const deque& c);"},
{"lineNum":"   51","line":"    deque(deque&& c)"},
{"lineNum":"   52","line":"        noexcept(is_nothrow_move_constructible<allocator_type>::value);"},
{"lineNum":"   53","line":"    deque(initializer_list<value_type> il, const Allocator& a = allocator_type());"},
{"lineNum":"   54","line":"    deque(const deque& c, const allocator_type& a);"},
{"lineNum":"   55","line":"    deque(deque&& c, const allocator_type& a);"},
{"lineNum":"   56","line":"    ~deque();"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"    deque& operator=(const deque& c);"},
{"lineNum":"   59","line":"    deque& operator=(deque&& c)"},
{"lineNum":"   60","line":"        noexcept("},
{"lineNum":"   61","line":"             allocator_type::propagate_on_container_move_assignment::value &&"},
{"lineNum":"   62","line":"             is_nothrow_move_assignable<allocator_type>::value);"},
{"lineNum":"   63","line":"    deque& operator=(initializer_list<value_type> il);"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"    template <class InputIterator>"},
{"lineNum":"   66","line":"        void assign(InputIterator f, InputIterator l);"},
{"lineNum":"   67","line":"    void assign(size_type n, const value_type& v);"},
{"lineNum":"   68","line":"    void assign(initializer_list<value_type> il);"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"    allocator_type get_allocator() const noexcept;"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"    // iterators:"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"    iterator       begin() noexcept;"},
{"lineNum":"   75","line":"    const_iterator begin() const noexcept;"},
{"lineNum":"   76","line":"    iterator       end() noexcept;"},
{"lineNum":"   77","line":"    const_iterator end() const noexcept;"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"    reverse_iterator       rbegin() noexcept;"},
{"lineNum":"   80","line":"    const_reverse_iterator rbegin() const noexcept;"},
{"lineNum":"   81","line":"    reverse_iterator       rend() noexcept;"},
{"lineNum":"   82","line":"    const_reverse_iterator rend() const noexcept;"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"    const_iterator         cbegin() const noexcept;"},
{"lineNum":"   85","line":"    const_iterator         cend() const noexcept;"},
{"lineNum":"   86","line":"    const_reverse_iterator crbegin() const noexcept;"},
{"lineNum":"   87","line":"    const_reverse_iterator crend() const noexcept;"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"    // capacity:"},
{"lineNum":"   90","line":"    size_type size() const noexcept;"},
{"lineNum":"   91","line":"    size_type max_size() const noexcept;"},
{"lineNum":"   92","line":"    void resize(size_type n);"},
{"lineNum":"   93","line":"    void resize(size_type n, const value_type& v);"},
{"lineNum":"   94","line":"    void shrink_to_fit();"},
{"lineNum":"   95","line":"    bool empty() const noexcept;"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"    // element access:"},
{"lineNum":"   98","line":"    reference operator[](size_type i);"},
{"lineNum":"   99","line":"    const_reference operator[](size_type i) const;"},
{"lineNum":"  100","line":"    reference at(size_type i);"},
{"lineNum":"  101","line":"    const_reference at(size_type i) const;"},
{"lineNum":"  102","line":"    reference front();"},
{"lineNum":"  103","line":"    const_reference front() const;"},
{"lineNum":"  104","line":"    reference back();"},
{"lineNum":"  105","line":"    const_reference back() const;"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"    // modifiers:"},
{"lineNum":"  108","line":"    void push_front(const value_type& v);"},
{"lineNum":"  109","line":"    void push_front(value_type&& v);"},
{"lineNum":"  110","line":"    void push_back(const value_type& v);"},
{"lineNum":"  111","line":"    void push_back(value_type&& v);"},
{"lineNum":"  112","line":"    template <class... Args> reference emplace_front(Args&&... args);  // reference in C++17"},
{"lineNum":"  113","line":"    template <class... Args> reference emplace_back(Args&&... args);   // reference in C++17"},
{"lineNum":"  114","line":"    template <class... Args> iterator emplace(const_iterator p, Args&&... args);"},
{"lineNum":"  115","line":"    iterator insert(const_iterator p, const value_type& v);"},
{"lineNum":"  116","line":"    iterator insert(const_iterator p, value_type&& v);"},
{"lineNum":"  117","line":"    iterator insert(const_iterator p, size_type n, const value_type& v);"},
{"lineNum":"  118","line":"    template <class InputIterator>"},
{"lineNum":"  119","line":"        iterator insert(const_iterator p, InputIterator f, InputIterator l);"},
{"lineNum":"  120","line":"    iterator insert(const_iterator p, initializer_list<value_type> il);"},
{"lineNum":"  121","line":"    void pop_front();"},
{"lineNum":"  122","line":"    void pop_back();"},
{"lineNum":"  123","line":"    iterator erase(const_iterator p);"},
{"lineNum":"  124","line":"    iterator erase(const_iterator f, const_iterator l);"},
{"lineNum":"  125","line":"    void swap(deque& c)"},
{"lineNum":"  126","line":"        noexcept(allocator_traits<allocator_type>::is_always_equal::value);  // C++17"},
{"lineNum":"  127","line":"    void clear() noexcept;"},
{"lineNum":"  128","line":"};"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"template <class InputIterator, class Allocator = allocator<typename iterator_traits<InputIterator>::value_type>>"},
{"lineNum":"  131","line":"   deque(InputIterator, InputIterator, Allocator = Allocator())"},
{"lineNum":"  132","line":"   -> deque<typename iterator_traits<InputIterator>::value_type, Allocator>;"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"template <class T, class Allocator>"},
{"lineNum":"  135","line":"    bool operator==(const deque<T,Allocator>& x, const deque<T,Allocator>& y);"},
{"lineNum":"  136","line":"template <class T, class Allocator>"},
{"lineNum":"  137","line":"    bool operator< (const deque<T,Allocator>& x, const deque<T,Allocator>& y);"},
{"lineNum":"  138","line":"template <class T, class Allocator>"},
{"lineNum":"  139","line":"    bool operator!=(const deque<T,Allocator>& x, const deque<T,Allocator>& y);"},
{"lineNum":"  140","line":"template <class T, class Allocator>"},
{"lineNum":"  141","line":"    bool operator> (const deque<T,Allocator>& x, const deque<T,Allocator>& y);"},
{"lineNum":"  142","line":"template <class T, class Allocator>"},
{"lineNum":"  143","line":"    bool operator>=(const deque<T,Allocator>& x, const deque<T,Allocator>& y);"},
{"lineNum":"  144","line":"template <class T, class Allocator>"},
{"lineNum":"  145","line":"    bool operator<=(const deque<T,Allocator>& x, const deque<T,Allocator>& y);"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"// specialized algorithms:"},
{"lineNum":"  148","line":"template <class T, class Allocator>"},
{"lineNum":"  149","line":"    void swap(deque<T,Allocator>& x, deque<T,Allocator>& y)"},
{"lineNum":"  150","line":"         noexcept(noexcept(x.swap(y)));"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"template <class T, class Allocator, class U>"},
{"lineNum":"  153","line":"    typename deque<T, Allocator>::size_type"},
{"lineNum":"  154","line":"    erase(deque<T, Allocator>& c, const U& value);       // C++20"},
{"lineNum":"  155","line":"template <class T, class Allocator, class Predicate>"},
{"lineNum":"  156","line":"    typename deque<T, Allocator>::size_type"},
{"lineNum":"  157","line":"    erase_if(deque<T, Allocator>& c, Predicate pred);    // C++20"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"}  // std"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"*/"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"#include <__config>"},
{"lineNum":"  164","line":"#include <__debug>"},
{"lineNum":"  165","line":"#include <__split_buffer>"},
{"lineNum":"  166","line":"#include <__utility/forward.h>"},
{"lineNum":"  167","line":"#include <algorithm>"},
{"lineNum":"  168","line":"#include <compare>"},
{"lineNum":"  169","line":"#include <initializer_list>"},
{"lineNum":"  170","line":"#include <iterator>"},
{"lineNum":"  171","line":"#include <limits>"},
{"lineNum":"  172","line":"#include <stdexcept>"},
{"lineNum":"  173","line":"#include <type_traits>"},
{"lineNum":"  174","line":"#include <version>"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"},
{"lineNum":"  177","line":"#pragma GCC system_header"},
{"lineNum":"  178","line":"#endif"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"_LIBCPP_PUSH_MACROS"},
{"lineNum":"  181","line":"#include <__undef_macros>"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"_LIBCPP_BEGIN_NAMESPACE_STD"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"template <class _Tp, class _Allocator> class __deque_base;"},
{"lineNum":"  187","line":"template <class _Tp, class _Allocator = allocator<_Tp> > class _LIBCPP_TEMPLATE_VIS deque;"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"template <class _ValueType, class _Pointer, class _Reference, class _MapPointer,"},
{"lineNum":"  190","line":"          class _DiffType, _DiffType _BlockSize>"},
{"lineNum":"  191","line":"class _LIBCPP_TEMPLATE_VIS __deque_iterator;"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"template <class _RAIter,"},
{"lineNum":"  194","line":"          class _V2, class _P2, class _R2, class _M2, class _D2, _D2 _B2>"},
{"lineNum":"  195","line":"__deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2>"},
{"lineNum":"  196","line":"copy(_RAIter __f,"},
{"lineNum":"  197","line":"     _RAIter __l,"},
{"lineNum":"  198","line":"     __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2> __r,"},
{"lineNum":"  199","line":"     typename enable_if<__is_cpp17_random_access_iterator<_RAIter>::value>::type* = 0);"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"template <class _V1, class _P1, class _R1, class _M1, class _D1, _D1 _B1,"},
{"lineNum":"  202","line":"          class _OutputIterator>"},
{"lineNum":"  203","line":"_OutputIterator"},
{"lineNum":"  204","line":"copy(__deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __f,"},
{"lineNum":"  205","line":"     __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __l,"},
{"lineNum":"  206","line":"     _OutputIterator __r);"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"template <class _V1, class _P1, class _R1, class _M1, class _D1, _D1 _B1,"},
{"lineNum":"  209","line":"          class _V2, class _P2, class _R2, class _M2, class _D2, _D2 _B2>"},
{"lineNum":"  210","line":"__deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2>"},
{"lineNum":"  211","line":"copy(__deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __f,"},
{"lineNum":"  212","line":"     __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __l,"},
{"lineNum":"  213","line":"     __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2> __r);"},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"template <class _RAIter,"},
{"lineNum":"  216","line":"          class _V2, class _P2, class _R2, class _M2, class _D2, _D2 _B2>"},
{"lineNum":"  217","line":"__deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2>"},
{"lineNum":"  218","line":"copy_backward(_RAIter __f,"},
{"lineNum":"  219","line":"              _RAIter __l,"},
{"lineNum":"  220","line":"              __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2> __r,"},
{"lineNum":"  221","line":"              typename enable_if<__is_cpp17_random_access_iterator<_RAIter>::value>::type* = 0);"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"template <class _V1, class _P1, class _R1, class _M1, class _D1, _D1 _B1,"},
{"lineNum":"  224","line":"          class _OutputIterator>"},
{"lineNum":"  225","line":"_OutputIterator"},
{"lineNum":"  226","line":"copy_backward(__deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __f,"},
{"lineNum":"  227","line":"              __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __l,"},
{"lineNum":"  228","line":"              _OutputIterator __r);"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"template <class _V1, class _P1, class _R1, class _M1, class _D1, _D1 _B1,"},
{"lineNum":"  231","line":"          class _V2, class _P2, class _R2, class _M2, class _D2, _D2 _B2>"},
{"lineNum":"  232","line":"__deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2>"},
{"lineNum":"  233","line":"copy_backward(__deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __f,"},
{"lineNum":"  234","line":"              __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __l,"},
{"lineNum":"  235","line":"              __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2> __r);"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"template <class _RAIter,"},
{"lineNum":"  238","line":"          class _V2, class _P2, class _R2, class _M2, class _D2, _D2 _B2>"},
{"lineNum":"  239","line":"__deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2>"},
{"lineNum":"  240","line":"move(_RAIter __f,"},
{"lineNum":"  241","line":"     _RAIter __l,"},
{"lineNum":"  242","line":"     __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2> __r,"},
{"lineNum":"  243","line":"     typename enable_if<__is_cpp17_random_access_iterator<_RAIter>::value>::type* = 0);"},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"template <class _V1, class _P1, class _R1, class _M1, class _D1, _D1 _B1,"},
{"lineNum":"  246","line":"          class _OutputIterator>"},
{"lineNum":"  247","line":"_OutputIterator"},
{"lineNum":"  248","line":"move(__deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __f,"},
{"lineNum":"  249","line":"     __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __l,"},
{"lineNum":"  250","line":"     _OutputIterator __r);"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"template <class _V1, class _P1, class _R1, class _M1, class _D1, _D1 _B1,"},
{"lineNum":"  253","line":"          class _V2, class _P2, class _R2, class _M2, class _D2, _D2 _B2>"},
{"lineNum":"  254","line":"__deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2>"},
{"lineNum":"  255","line":"move(__deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __f,"},
{"lineNum":"  256","line":"     __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __l,"},
{"lineNum":"  257","line":"     __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2> __r);"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"template <class _RAIter,"},
{"lineNum":"  260","line":"          class _V2, class _P2, class _R2, class _M2, class _D2, _D2 _B2>"},
{"lineNum":"  261","line":"__deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2>"},
{"lineNum":"  262","line":"move_backward(_RAIter __f,"},
{"lineNum":"  263","line":"              _RAIter __l,"},
{"lineNum":"  264","line":"              __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2> __r,"},
{"lineNum":"  265","line":"              typename enable_if<__is_cpp17_random_access_iterator<_RAIter>::value>::type* = 0);"},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"template <class _V1, class _P1, class _R1, class _M1, class _D1, _D1 _B1,"},
{"lineNum":"  268","line":"          class _OutputIterator>"},
{"lineNum":"  269","line":"_OutputIterator"},
{"lineNum":"  270","line":"move_backward(__deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __f,"},
{"lineNum":"  271","line":"              __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __l,"},
{"lineNum":"  272","line":"              _OutputIterator __r);"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"template <class _V1, class _P1, class _R1, class _M1, class _D1, _D1 _B1,"},
{"lineNum":"  275","line":"          class _V2, class _P2, class _R2, class _M2, class _D2, _D2 _B2>"},
{"lineNum":"  276","line":"__deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2>"},
{"lineNum":"  277","line":"move_backward(__deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __f,"},
{"lineNum":"  278","line":"              __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __l,"},
{"lineNum":"  279","line":"              __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2> __r);"},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"template <class _ValueType, class _DiffType>"},
{"lineNum":"  282","line":"struct __deque_block_size {"},
{"lineNum":"  283","line":"  static const _DiffType value = sizeof(_ValueType) < 256 ? 4096 / sizeof(_ValueType) : 16;"},
{"lineNum":"  284","line":"};"},
{"lineNum":"  285","line":""},
{"lineNum":"  286","line":"template <class _ValueType, class _Pointer, class _Reference, class _MapPointer,"},
{"lineNum":"  287","line":"          class _DiffType, _DiffType _BS ="},
{"lineNum":"  288","line":"#ifdef _LIBCPP_ABI_INCOMPLETE_TYPES_IN_DEQUE"},
{"lineNum":"  289","line":"// Keep template parameter to avoid changing all template declarations thoughout"},
{"lineNum":"  290","line":"// this file."},
{"lineNum":"  291","line":"                               0"},
{"lineNum":"  292","line":"#else"},
{"lineNum":"  293","line":"                               __deque_block_size<_ValueType, _DiffType>::value"},
{"lineNum":"  294","line":"#endif"},
{"lineNum":"  295","line":"          >"},
{"lineNum":"  296","line":"class _LIBCPP_TEMPLATE_VIS __deque_iterator"},
{"lineNum":"  297","line":"{"},
{"lineNum":"  298","line":"    typedef _MapPointer __map_iterator;"},
{"lineNum":"  299","line":"public:"},
{"lineNum":"  300","line":"    typedef _Pointer  pointer;"},
{"lineNum":"  301","line":"    typedef _DiffType difference_type;"},
{"lineNum":"  302","line":"private:"},
{"lineNum":"  303","line":"    __map_iterator __m_iter_;"},
{"lineNum":"  304","line":"    pointer        __ptr_;"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"    static const difference_type __block_size;"},
{"lineNum":"  307","line":"public:"},
{"lineNum":"  308","line":"    typedef _ValueType                  value_type;"},
{"lineNum":"  309","line":"    typedef random_access_iterator_tag  iterator_category;"},
{"lineNum":"  310","line":"    typedef _Reference                  reference;"},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":"    _LIBCPP_INLINE_VISIBILITY __deque_iterator() _NOEXCEPT"},
{"lineNum":"  313","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":"  314","line":"     : __m_iter_(nullptr), __ptr_(nullptr)"},
{"lineNum":"  315","line":"#endif"},
{"lineNum":"  316","line":"     {}"},
{"lineNum":"  317","line":""},
{"lineNum":"  318","line":"    template <class _Pp, class _Rp, class _MP>"},
{"lineNum":"  319","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  320","line":"    __deque_iterator(const __deque_iterator<value_type, _Pp, _Rp, _MP, difference_type, _BS>& __it,"},
{"lineNum":"  321","line":"                typename enable_if<is_convertible<_Pp, pointer>::value>::type* = 0) _NOEXCEPT"},
{"lineNum":"  322","line":"        : __m_iter_(__it.__m_iter_), __ptr_(__it.__ptr_) {}"},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"    _LIBCPP_INLINE_VISIBILITY reference operator*() const {return *__ptr_;}"},
{"lineNum":"  325","line":"    _LIBCPP_INLINE_VISIBILITY pointer operator->() const {return __ptr_;}"},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"    _LIBCPP_INLINE_VISIBILITY __deque_iterator& operator++()"},
{"lineNum":"  328","line":"    {"},
{"lineNum":"  329","line":"        if (++__ptr_ - *__m_iter_ == __block_size)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  330","line":"        {"},
{"lineNum":"  331","line":"            ++__m_iter_;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  332","line":"            __ptr_ = *__m_iter_;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  333","line":"        }"},
{"lineNum":"  334","line":"        return *this;"},
{"lineNum":"  335","line":"    }"},
{"lineNum":"  336","line":""},
{"lineNum":"  337","line":"    _LIBCPP_INLINE_VISIBILITY __deque_iterator operator++(int)"},
{"lineNum":"  338","line":"    {"},
{"lineNum":"  339","line":"        __deque_iterator __tmp = *this;"},
{"lineNum":"  340","line":"        ++(*this);"},
{"lineNum":"  341","line":"        return __tmp;"},
{"lineNum":"  342","line":"    }"},
{"lineNum":"  343","line":""},
{"lineNum":"  344","line":"    _LIBCPP_INLINE_VISIBILITY __deque_iterator& operator--()"},
{"lineNum":"  345","line":"    {"},
{"lineNum":"  346","line":"        if (__ptr_ == *__m_iter_)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  347","line":"        {"},
{"lineNum":"  348","line":"            --__m_iter_;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  349","line":"            __ptr_ = *__m_iter_ + __block_size;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  350","line":"        }"},
{"lineNum":"  351","line":"        --__ptr_;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  352","line":"        return *this;"},
{"lineNum":"  353","line":"    }"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"    _LIBCPP_INLINE_VISIBILITY __deque_iterator operator--(int)"},
{"lineNum":"  356","line":"    {"},
{"lineNum":"  357","line":"        __deque_iterator __tmp = *this;"},
{"lineNum":"  358","line":"        --(*this);"},
{"lineNum":"  359","line":"        return __tmp;"},
{"lineNum":"  360","line":"    }"},
{"lineNum":"  361","line":""},
{"lineNum":"  362","line":"    _LIBCPP_INLINE_VISIBILITY __deque_iterator& operator+=(difference_type __n)"},
{"lineNum":"  363","line":"    {"},
{"lineNum":"  364","line":"        if (__n != 0)"},
{"lineNum":"  365","line":"        {"},
{"lineNum":"  366","line":"            __n += __ptr_ - *__m_iter_;"},
{"lineNum":"  367","line":"            if (__n > 0)"},
{"lineNum":"  368","line":"            {"},
{"lineNum":"  369","line":"                __m_iter_ += __n / __block_size;"},
{"lineNum":"  370","line":"                __ptr_ = *__m_iter_ + __n % __block_size;"},
{"lineNum":"  371","line":"            }"},
{"lineNum":"  372","line":"            else // (__n < 0)"},
{"lineNum":"  373","line":"            {"},
{"lineNum":"  374","line":"                difference_type __z = __block_size - 1 - __n;"},
{"lineNum":"  375","line":"                __m_iter_ -= __z / __block_size;"},
{"lineNum":"  376","line":"                __ptr_ = *__m_iter_ + (__block_size - 1 - __z % __block_size);"},
{"lineNum":"  377","line":"            }"},
{"lineNum":"  378","line":"        }"},
{"lineNum":"  379","line":"        return *this;"},
{"lineNum":"  380","line":"    }"},
{"lineNum":"  381","line":""},
{"lineNum":"  382","line":"    _LIBCPP_INLINE_VISIBILITY __deque_iterator& operator-=(difference_type __n)"},
{"lineNum":"  383","line":"    {"},
{"lineNum":"  384","line":"        return *this += -__n;"},
{"lineNum":"  385","line":"    }"},
{"lineNum":"  386","line":""},
{"lineNum":"  387","line":"    _LIBCPP_INLINE_VISIBILITY __deque_iterator operator+(difference_type __n) const"},
{"lineNum":"  388","line":"    {"},
{"lineNum":"  389","line":"        __deque_iterator __t(*this);"},
{"lineNum":"  390","line":"        __t += __n;"},
{"lineNum":"  391","line":"        return __t;"},
{"lineNum":"  392","line":"    }"},
{"lineNum":"  393","line":""},
{"lineNum":"  394","line":"    _LIBCPP_INLINE_VISIBILITY __deque_iterator operator-(difference_type __n) const"},
{"lineNum":"  395","line":"    {"},
{"lineNum":"  396","line":"        __deque_iterator __t(*this);"},
{"lineNum":"  397","line":"        __t -= __n;"},
{"lineNum":"  398","line":"        return __t;"},
{"lineNum":"  399","line":"    }"},
{"lineNum":"  400","line":""},
{"lineNum":"  401","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  402","line":"    friend __deque_iterator operator+(difference_type __n, const __deque_iterator& __it)"},
{"lineNum":"  403","line":"        {return __it + __n;}"},
{"lineNum":"  404","line":""},
{"lineNum":"  405","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  406","line":"    friend difference_type operator-(const __deque_iterator& __x, const __deque_iterator& __y)"},
{"lineNum":"  407","line":"    {"},
{"lineNum":"  408","line":"        if (__x != __y)"},
{"lineNum":"  409","line":"            return (__x.__m_iter_ - __y.__m_iter_) * __block_size"},
{"lineNum":"  410","line":"                 + (__x.__ptr_ - *__x.__m_iter_)"},
{"lineNum":"  411","line":"                 - (__y.__ptr_ - *__y.__m_iter_);"},
{"lineNum":"  412","line":"        return 0;"},
{"lineNum":"  413","line":"    }"},
{"lineNum":"  414","line":""},
{"lineNum":"  415","line":"    _LIBCPP_INLINE_VISIBILITY reference operator[](difference_type __n) const"},
{"lineNum":"  416","line":"        {return *(*this + __n);}"},
{"lineNum":"  417","line":""},
{"lineNum":"  418","line":"    _LIBCPP_INLINE_VISIBILITY friend"},
{"lineNum":"  419","line":"        bool operator==(const __deque_iterator& __x, const __deque_iterator& __y)"},
{"lineNum":"  420","line":"        {return __x.__ptr_ == __y.__ptr_;}","class":"linePartCov","hits":"1","order":"370","possible_hits":"4",},
{"lineNum":"  421","line":""},
{"lineNum":"  422","line":"    _LIBCPP_INLINE_VISIBILITY friend"},
{"lineNum":"  423","line":"        bool operator!=(const __deque_iterator& __x, const __deque_iterator& __y)"},
{"lineNum":"  424","line":"        {return !(__x == __y);}"},
{"lineNum":"  425","line":""},
{"lineNum":"  426","line":"    _LIBCPP_INLINE_VISIBILITY friend"},
{"lineNum":"  427","line":"        bool operator<(const __deque_iterator& __x, const __deque_iterator& __y)"},
{"lineNum":"  428","line":"        {return __x.__m_iter_ < __y.__m_iter_ ||"},
{"lineNum":"  429","line":"               (__x.__m_iter_ == __y.__m_iter_ && __x.__ptr_ < __y.__ptr_);}"},
{"lineNum":"  430","line":""},
{"lineNum":"  431","line":"    _LIBCPP_INLINE_VISIBILITY friend"},
{"lineNum":"  432","line":"        bool operator>(const __deque_iterator& __x, const __deque_iterator& __y)"},
{"lineNum":"  433","line":"        {return __y < __x;}"},
{"lineNum":"  434","line":""},
{"lineNum":"  435","line":"    _LIBCPP_INLINE_VISIBILITY friend"},
{"lineNum":"  436","line":"        bool operator<=(const __deque_iterator& __x, const __deque_iterator& __y)"},
{"lineNum":"  437","line":"        {return !(__y < __x);}"},
{"lineNum":"  438","line":""},
{"lineNum":"  439","line":"    _LIBCPP_INLINE_VISIBILITY friend"},
{"lineNum":"  440","line":"        bool operator>=(const __deque_iterator& __x, const __deque_iterator& __y)"},
{"lineNum":"  441","line":"        {return !(__x < __y);}"},
{"lineNum":"  442","line":""},
{"lineNum":"  443","line":"private:"},
{"lineNum":"  444","line":"    _LIBCPP_INLINE_VISIBILITY __deque_iterator(__map_iterator __m, pointer __p) _NOEXCEPT"},
{"lineNum":"  445","line":"        : __m_iter_(__m), __ptr_(__p) {}"},
{"lineNum":"  446","line":""},
{"lineNum":"  447","line":"    template <class _Tp, class _Ap> friend class __deque_base;"},
{"lineNum":"  448","line":"    template <class _Tp, class _Ap> friend class _LIBCPP_TEMPLATE_VIS deque;"},
{"lineNum":"  449","line":"    template <class _Vp, class _Pp, class _Rp, class _MP, class _Dp, _Dp>"},
{"lineNum":"  450","line":"        friend class _LIBCPP_TEMPLATE_VIS __deque_iterator;"},
{"lineNum":"  451","line":""},
{"lineNum":"  452","line":"    template <class _RAIter,"},
{"lineNum":"  453","line":"              class _V2, class _P2, class _R2, class _M2, class _D2, _D2 _B2>"},
{"lineNum":"  454","line":"    friend"},
{"lineNum":"  455","line":"    __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2>"},
{"lineNum":"  456","line":"    copy(_RAIter __f,"},
{"lineNum":"  457","line":"         _RAIter __l,"},
{"lineNum":"  458","line":"         __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2> __r,"},
{"lineNum":"  459","line":"         typename enable_if<__is_cpp17_random_access_iterator<_RAIter>::value>::type*);"},
{"lineNum":"  460","line":""},
{"lineNum":"  461","line":"    template <class _V1, class _P1, class _R1, class _M1, class _D1, _D1 _B1,"},
{"lineNum":"  462","line":"              class _OutputIterator>"},
{"lineNum":"  463","line":"    friend"},
{"lineNum":"  464","line":"    _OutputIterator"},
{"lineNum":"  465","line":"    copy(__deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __f,"},
{"lineNum":"  466","line":"         __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __l,"},
{"lineNum":"  467","line":"         _OutputIterator __r);"},
{"lineNum":"  468","line":""},
{"lineNum":"  469","line":"    template <class _V1, class _P1, class _R1, class _M1, class _D1, _D1 _B1,"},
{"lineNum":"  470","line":"              class _V2, class _P2, class _R2, class _M2, class _D2, _D2 _B2>"},
{"lineNum":"  471","line":"    friend"},
{"lineNum":"  472","line":"    __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2>"},
{"lineNum":"  473","line":"    copy(__deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __f,"},
{"lineNum":"  474","line":"         __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __l,"},
{"lineNum":"  475","line":"         __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2> __r);"},
{"lineNum":"  476","line":""},
{"lineNum":"  477","line":"    template <class _RAIter,"},
{"lineNum":"  478","line":"              class _V2, class _P2, class _R2, class _M2, class _D2, _D2 _B2>"},
{"lineNum":"  479","line":"    friend"},
{"lineNum":"  480","line":"    __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2>"},
{"lineNum":"  481","line":"    copy_backward(_RAIter __f,"},
{"lineNum":"  482","line":"                  _RAIter __l,"},
{"lineNum":"  483","line":"                  __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2> __r,"},
{"lineNum":"  484","line":"                  typename enable_if<__is_cpp17_random_access_iterator<_RAIter>::value>::type*);"},
{"lineNum":"  485","line":""},
{"lineNum":"  486","line":"    template <class _V1, class _P1, class _R1, class _M1, class _D1, _D1 _B1,"},
{"lineNum":"  487","line":"              class _OutputIterator>"},
{"lineNum":"  488","line":"    friend"},
{"lineNum":"  489","line":"    _OutputIterator"},
{"lineNum":"  490","line":"    copy_backward(__deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __f,"},
{"lineNum":"  491","line":"                  __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __l,"},
{"lineNum":"  492","line":"                  _OutputIterator __r);"},
{"lineNum":"  493","line":""},
{"lineNum":"  494","line":"    template <class _V1, class _P1, class _R1, class _M1, class _D1, _D1 _B1,"},
{"lineNum":"  495","line":"              class _V2, class _P2, class _R2, class _M2, class _D2, _D2 _B2>"},
{"lineNum":"  496","line":"    friend"},
{"lineNum":"  497","line":"    __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2>"},
{"lineNum":"  498","line":"    copy_backward(__deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __f,"},
{"lineNum":"  499","line":"                  __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __l,"},
{"lineNum":"  500","line":"                  __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2> __r);"},
{"lineNum":"  501","line":""},
{"lineNum":"  502","line":"    template <class _RAIter,"},
{"lineNum":"  503","line":"              class _V2, class _P2, class _R2, class _M2, class _D2, _D2 _B2>"},
{"lineNum":"  504","line":"    friend"},
{"lineNum":"  505","line":"    __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2>"},
{"lineNum":"  506","line":"    move(_RAIter __f,"},
{"lineNum":"  507","line":"         _RAIter __l,"},
{"lineNum":"  508","line":"         __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2> __r,"},
{"lineNum":"  509","line":"         typename enable_if<__is_cpp17_random_access_iterator<_RAIter>::value>::type*);"},
{"lineNum":"  510","line":""},
{"lineNum":"  511","line":"    template <class _V1, class _P1, class _R1, class _M1, class _D1, _D1 _B1,"},
{"lineNum":"  512","line":"              class _OutputIterator>"},
{"lineNum":"  513","line":"    friend"},
{"lineNum":"  514","line":"    _OutputIterator"},
{"lineNum":"  515","line":"    move(__deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __f,"},
{"lineNum":"  516","line":"         __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __l,"},
{"lineNum":"  517","line":"         _OutputIterator __r);"},
{"lineNum":"  518","line":""},
{"lineNum":"  519","line":"    template <class _V1, class _P1, class _R1, class _M1, class _D1, _D1 _B1,"},
{"lineNum":"  520","line":"              class _V2, class _P2, class _R2, class _M2, class _D2, _D2 _B2>"},
{"lineNum":"  521","line":"    friend"},
{"lineNum":"  522","line":"    __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2>"},
{"lineNum":"  523","line":"    move(__deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __f,"},
{"lineNum":"  524","line":"         __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __l,"},
{"lineNum":"  525","line":"         __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2> __r);"},
{"lineNum":"  526","line":""},
{"lineNum":"  527","line":"    template <class _RAIter,"},
{"lineNum":"  528","line":"              class _V2, class _P2, class _R2, class _M2, class _D2, _D2 _B2>"},
{"lineNum":"  529","line":"    friend"},
{"lineNum":"  530","line":"    __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2>"},
{"lineNum":"  531","line":"    move_backward(_RAIter __f,"},
{"lineNum":"  532","line":"                  _RAIter __l,"},
{"lineNum":"  533","line":"                  __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2> __r,"},
{"lineNum":"  534","line":"                  typename enable_if<__is_cpp17_random_access_iterator<_RAIter>::value>::type*);"},
{"lineNum":"  535","line":""},
{"lineNum":"  536","line":"    template <class _V1, class _P1, class _R1, class _M1, class _D1, _D1 _B1,"},
{"lineNum":"  537","line":"              class _OutputIterator>"},
{"lineNum":"  538","line":"    friend"},
{"lineNum":"  539","line":"    _OutputIterator"},
{"lineNum":"  540","line":"    move_backward(__deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __f,"},
{"lineNum":"  541","line":"                  __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __l,"},
{"lineNum":"  542","line":"                  _OutputIterator __r);"},
{"lineNum":"  543","line":""},
{"lineNum":"  544","line":"    template <class _V1, class _P1, class _R1, class _M1, class _D1, _D1 _B1,"},
{"lineNum":"  545","line":"              class _V2, class _P2, class _R2, class _M2, class _D2, _D2 _B2>"},
{"lineNum":"  546","line":"    friend"},
{"lineNum":"  547","line":"    __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2>"},
{"lineNum":"  548","line":"    move_backward(__deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __f,"},
{"lineNum":"  549","line":"                  __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __l,"},
{"lineNum":"  550","line":"                  __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2> __r);"},
{"lineNum":"  551","line":"};"},
{"lineNum":"  552","line":""},
{"lineNum":"  553","line":"template <class _ValueType, class _Pointer, class _Reference, class _MapPointer,"},
{"lineNum":"  554","line":"          class _DiffType, _DiffType _BlockSize>"},
{"lineNum":"  555","line":"const _DiffType __deque_iterator<_ValueType, _Pointer, _Reference, _MapPointer,"},
{"lineNum":"  556","line":"                                 _DiffType, _BlockSize>::__block_size ="},
{"lineNum":"  557","line":"    __deque_block_size<_ValueType, _DiffType>::value;"},
{"lineNum":"  558","line":""},
{"lineNum":"  559","line":"// copy"},
{"lineNum":"  560","line":""},
{"lineNum":"  561","line":"template <class _RAIter,"},
{"lineNum":"  562","line":"          class _V2, class _P2, class _R2, class _M2, class _D2, _D2 _B2>"},
{"lineNum":"  563","line":"__deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2>"},
{"lineNum":"  564","line":"copy(_RAIter __f,"},
{"lineNum":"  565","line":"     _RAIter __l,"},
{"lineNum":"  566","line":"     __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2> __r,"},
{"lineNum":"  567","line":"     typename enable_if<__is_cpp17_random_access_iterator<_RAIter>::value>::type*)"},
{"lineNum":"  568","line":"{"},
{"lineNum":"  569","line":"    typedef typename __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2>::difference_type difference_type;"},
{"lineNum":"  570","line":"    typedef typename __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2>::pointer pointer;"},
{"lineNum":"  571","line":"    const difference_type __block_size = __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2>::__block_size;"},
{"lineNum":"  572","line":"    while (__f != __l)"},
{"lineNum":"  573","line":"    {"},
{"lineNum":"  574","line":"        pointer __rb = __r.__ptr_;"},
{"lineNum":"  575","line":"        pointer __re = *__r.__m_iter_ + __block_size;"},
{"lineNum":"  576","line":"        difference_type __bs = __re - __rb;"},
{"lineNum":"  577","line":"        difference_type __n = __l - __f;"},
{"lineNum":"  578","line":"        _RAIter __m = __l;"},
{"lineNum":"  579","line":"        if (__n > __bs)"},
{"lineNum":"  580","line":"        {"},
{"lineNum":"  581","line":"            __n = __bs;"},
{"lineNum":"  582","line":"            __m = __f + __n;"},
{"lineNum":"  583","line":"        }"},
{"lineNum":"  584","line":"        _VSTD::copy(__f, __m, __rb);"},
{"lineNum":"  585","line":"        __f = __m;"},
{"lineNum":"  586","line":"        __r += __n;"},
{"lineNum":"  587","line":"    }"},
{"lineNum":"  588","line":"    return __r;"},
{"lineNum":"  589","line":"}"},
{"lineNum":"  590","line":""},
{"lineNum":"  591","line":"template <class _V1, class _P1, class _R1, class _M1, class _D1, _D1 _B1,"},
{"lineNum":"  592","line":"          class _OutputIterator>"},
{"lineNum":"  593","line":"_OutputIterator"},
{"lineNum":"  594","line":"copy(__deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __f,"},
{"lineNum":"  595","line":"     __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __l,"},
{"lineNum":"  596","line":"     _OutputIterator __r)"},
{"lineNum":"  597","line":"{"},
{"lineNum":"  598","line":"    typedef typename __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1>::difference_type difference_type;"},
{"lineNum":"  599","line":"    typedef typename __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1>::pointer pointer;"},
{"lineNum":"  600","line":"    const difference_type __block_size = __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1>::__block_size;"},
{"lineNum":"  601","line":"    difference_type __n = __l - __f;"},
{"lineNum":"  602","line":"    while (__n > 0)"},
{"lineNum":"  603","line":"    {"},
{"lineNum":"  604","line":"        pointer __fb = __f.__ptr_;"},
{"lineNum":"  605","line":"        pointer __fe = *__f.__m_iter_ + __block_size;"},
{"lineNum":"  606","line":"        difference_type __bs = __fe - __fb;"},
{"lineNum":"  607","line":"        if (__bs > __n)"},
{"lineNum":"  608","line":"        {"},
{"lineNum":"  609","line":"            __bs = __n;"},
{"lineNum":"  610","line":"            __fe = __fb + __bs;"},
{"lineNum":"  611","line":"        }"},
{"lineNum":"  612","line":"        __r = _VSTD::copy(__fb, __fe, __r);"},
{"lineNum":"  613","line":"        __n -= __bs;"},
{"lineNum":"  614","line":"        __f += __bs;"},
{"lineNum":"  615","line":"    }"},
{"lineNum":"  616","line":"    return __r;"},
{"lineNum":"  617","line":"}"},
{"lineNum":"  618","line":""},
{"lineNum":"  619","line":"template <class _V1, class _P1, class _R1, class _M1, class _D1, _D1 _B1,"},
{"lineNum":"  620","line":"          class _V2, class _P2, class _R2, class _M2, class _D2, _D2 _B2>"},
{"lineNum":"  621","line":"__deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2>"},
{"lineNum":"  622","line":"copy(__deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __f,"},
{"lineNum":"  623","line":"     __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __l,"},
{"lineNum":"  624","line":"     __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2> __r)"},
{"lineNum":"  625","line":"{"},
{"lineNum":"  626","line":"    typedef typename __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1>::difference_type difference_type;"},
{"lineNum":"  627","line":"    typedef typename __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1>::pointer pointer;"},
{"lineNum":"  628","line":"    const difference_type __block_size = __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1>::__block_size;"},
{"lineNum":"  629","line":"    difference_type __n = __l - __f;"},
{"lineNum":"  630","line":"    while (__n > 0)"},
{"lineNum":"  631","line":"    {"},
{"lineNum":"  632","line":"        pointer __fb = __f.__ptr_;"},
{"lineNum":"  633","line":"        pointer __fe = *__f.__m_iter_ + __block_size;"},
{"lineNum":"  634","line":"        difference_type __bs = __fe - __fb;"},
{"lineNum":"  635","line":"        if (__bs > __n)"},
{"lineNum":"  636","line":"        {"},
{"lineNum":"  637","line":"            __bs = __n;"},
{"lineNum":"  638","line":"            __fe = __fb + __bs;"},
{"lineNum":"  639","line":"        }"},
{"lineNum":"  640","line":"        __r = _VSTD::copy(__fb, __fe, __r);"},
{"lineNum":"  641","line":"        __n -= __bs;"},
{"lineNum":"  642","line":"        __f += __bs;"},
{"lineNum":"  643","line":"    }"},
{"lineNum":"  644","line":"    return __r;"},
{"lineNum":"  645","line":"}"},
{"lineNum":"  646","line":""},
{"lineNum":"  647","line":"// copy_backward"},
{"lineNum":"  648","line":""},
{"lineNum":"  649","line":"template <class _RAIter,"},
{"lineNum":"  650","line":"          class _V2, class _P2, class _R2, class _M2, class _D2, _D2 _B2>"},
{"lineNum":"  651","line":"__deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2>"},
{"lineNum":"  652","line":"copy_backward(_RAIter __f,"},
{"lineNum":"  653","line":"              _RAIter __l,"},
{"lineNum":"  654","line":"              __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2> __r,"},
{"lineNum":"  655","line":"              typename enable_if<__is_cpp17_random_access_iterator<_RAIter>::value>::type*)"},
{"lineNum":"  656","line":"{"},
{"lineNum":"  657","line":"    typedef typename __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2>::difference_type difference_type;"},
{"lineNum":"  658","line":"    typedef typename __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2>::pointer pointer;"},
{"lineNum":"  659","line":"    while (__f != __l)"},
{"lineNum":"  660","line":"    {"},
{"lineNum":"  661","line":"        __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2> __rp = _VSTD::prev(__r);"},
{"lineNum":"  662","line":"        pointer __rb = *__rp.__m_iter_;"},
{"lineNum":"  663","line":"        pointer __re = __rp.__ptr_ + 1;"},
{"lineNum":"  664","line":"        difference_type __bs = __re - __rb;"},
{"lineNum":"  665","line":"        difference_type __n = __l - __f;"},
{"lineNum":"  666","line":"        _RAIter __m = __f;"},
{"lineNum":"  667","line":"        if (__n > __bs)"},
{"lineNum":"  668","line":"        {"},
{"lineNum":"  669","line":"            __n = __bs;"},
{"lineNum":"  670","line":"            __m = __l - __n;"},
{"lineNum":"  671","line":"        }"},
{"lineNum":"  672","line":"        _VSTD::copy_backward(__m, __l, __re);"},
{"lineNum":"  673","line":"        __l = __m;"},
{"lineNum":"  674","line":"        __r -= __n;"},
{"lineNum":"  675","line":"    }"},
{"lineNum":"  676","line":"    return __r;"},
{"lineNum":"  677","line":"}"},
{"lineNum":"  678","line":""},
{"lineNum":"  679","line":"template <class _V1, class _P1, class _R1, class _M1, class _D1, _D1 _B1,"},
{"lineNum":"  680","line":"          class _OutputIterator>"},
{"lineNum":"  681","line":"_OutputIterator"},
{"lineNum":"  682","line":"copy_backward(__deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __f,"},
{"lineNum":"  683","line":"              __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __l,"},
{"lineNum":"  684","line":"              _OutputIterator __r)"},
{"lineNum":"  685","line":"{"},
{"lineNum":"  686","line":"    typedef typename __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1>::difference_type difference_type;"},
{"lineNum":"  687","line":"    typedef typename __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1>::pointer pointer;"},
{"lineNum":"  688","line":"    difference_type __n = __l - __f;"},
{"lineNum":"  689","line":"    while (__n > 0)"},
{"lineNum":"  690","line":"    {"},
{"lineNum":"  691","line":"        --__l;"},
{"lineNum":"  692","line":"        pointer __lb = *__l.__m_iter_;"},
{"lineNum":"  693","line":"        pointer __le = __l.__ptr_ + 1;"},
{"lineNum":"  694","line":"        difference_type __bs = __le - __lb;"},
{"lineNum":"  695","line":"        if (__bs > __n)"},
{"lineNum":"  696","line":"        {"},
{"lineNum":"  697","line":"            __bs = __n;"},
{"lineNum":"  698","line":"            __lb = __le - __bs;"},
{"lineNum":"  699","line":"        }"},
{"lineNum":"  700","line":"        __r = _VSTD::copy_backward(__lb, __le, __r);"},
{"lineNum":"  701","line":"        __n -= __bs;"},
{"lineNum":"  702","line":"        __l -= __bs - 1;"},
{"lineNum":"  703","line":"    }"},
{"lineNum":"  704","line":"    return __r;"},
{"lineNum":"  705","line":"}"},
{"lineNum":"  706","line":""},
{"lineNum":"  707","line":"template <class _V1, class _P1, class _R1, class _M1, class _D1, _D1 _B1,"},
{"lineNum":"  708","line":"          class _V2, class _P2, class _R2, class _M2, class _D2, _D2 _B2>"},
{"lineNum":"  709","line":"__deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2>"},
{"lineNum":"  710","line":"copy_backward(__deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __f,"},
{"lineNum":"  711","line":"              __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __l,"},
{"lineNum":"  712","line":"              __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2> __r)"},
{"lineNum":"  713","line":"{"},
{"lineNum":"  714","line":"    typedef typename __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1>::difference_type difference_type;"},
{"lineNum":"  715","line":"    typedef typename __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1>::pointer pointer;"},
{"lineNum":"  716","line":"    difference_type __n = __l - __f;"},
{"lineNum":"  717","line":"    while (__n > 0)"},
{"lineNum":"  718","line":"    {"},
{"lineNum":"  719","line":"        --__l;"},
{"lineNum":"  720","line":"        pointer __lb = *__l.__m_iter_;"},
{"lineNum":"  721","line":"        pointer __le = __l.__ptr_ + 1;"},
{"lineNum":"  722","line":"        difference_type __bs = __le - __lb;"},
{"lineNum":"  723","line":"        if (__bs > __n)"},
{"lineNum":"  724","line":"        {"},
{"lineNum":"  725","line":"            __bs = __n;"},
{"lineNum":"  726","line":"            __lb = __le - __bs;"},
{"lineNum":"  727","line":"        }"},
{"lineNum":"  728","line":"        __r = _VSTD::copy_backward(__lb, __le, __r);"},
{"lineNum":"  729","line":"        __n -= __bs;"},
{"lineNum":"  730","line":"        __l -= __bs - 1;"},
{"lineNum":"  731","line":"    }"},
{"lineNum":"  732","line":"    return __r;"},
{"lineNum":"  733","line":"}"},
{"lineNum":"  734","line":""},
{"lineNum":"  735","line":"// move"},
{"lineNum":"  736","line":""},
{"lineNum":"  737","line":"template <class _RAIter,"},
{"lineNum":"  738","line":"          class _V2, class _P2, class _R2, class _M2, class _D2, _D2 _B2>"},
{"lineNum":"  739","line":"__deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2>"},
{"lineNum":"  740","line":"move(_RAIter __f,"},
{"lineNum":"  741","line":"     _RAIter __l,"},
{"lineNum":"  742","line":"     __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2> __r,"},
{"lineNum":"  743","line":"     typename enable_if<__is_cpp17_random_access_iterator<_RAIter>::value>::type*)"},
{"lineNum":"  744","line":"{"},
{"lineNum":"  745","line":"    typedef typename __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2>::difference_type difference_type;"},
{"lineNum":"  746","line":"    typedef typename __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2>::pointer pointer;"},
{"lineNum":"  747","line":"    const difference_type __block_size = __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2>::__block_size;"},
{"lineNum":"  748","line":"    while (__f != __l)"},
{"lineNum":"  749","line":"    {"},
{"lineNum":"  750","line":"        pointer __rb = __r.__ptr_;"},
{"lineNum":"  751","line":"        pointer __re = *__r.__m_iter_ + __block_size;"},
{"lineNum":"  752","line":"        difference_type __bs = __re - __rb;"},
{"lineNum":"  753","line":"        difference_type __n = __l - __f;"},
{"lineNum":"  754","line":"        _RAIter __m = __l;"},
{"lineNum":"  755","line":"        if (__n > __bs)"},
{"lineNum":"  756","line":"        {"},
{"lineNum":"  757","line":"            __n = __bs;"},
{"lineNum":"  758","line":"            __m = __f + __n;"},
{"lineNum":"  759","line":"        }"},
{"lineNum":"  760","line":"        _VSTD::move(__f, __m, __rb);"},
{"lineNum":"  761","line":"        __f = __m;"},
{"lineNum":"  762","line":"        __r += __n;"},
{"lineNum":"  763","line":"    }"},
{"lineNum":"  764","line":"    return __r;"},
{"lineNum":"  765","line":"}"},
{"lineNum":"  766","line":""},
{"lineNum":"  767","line":"template <class _V1, class _P1, class _R1, class _M1, class _D1, _D1 _B1,"},
{"lineNum":"  768","line":"          class _OutputIterator>"},
{"lineNum":"  769","line":"_OutputIterator"},
{"lineNum":"  770","line":"move(__deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __f,"},
{"lineNum":"  771","line":"     __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __l,"},
{"lineNum":"  772","line":"     _OutputIterator __r)"},
{"lineNum":"  773","line":"{"},
{"lineNum":"  774","line":"    typedef typename __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1>::difference_type difference_type;"},
{"lineNum":"  775","line":"    typedef typename __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1>::pointer pointer;"},
{"lineNum":"  776","line":"    const difference_type __block_size = __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1>::__block_size;"},
{"lineNum":"  777","line":"    difference_type __n = __l - __f;"},
{"lineNum":"  778","line":"    while (__n > 0)"},
{"lineNum":"  779","line":"    {"},
{"lineNum":"  780","line":"        pointer __fb = __f.__ptr_;"},
{"lineNum":"  781","line":"        pointer __fe = *__f.__m_iter_ + __block_size;"},
{"lineNum":"  782","line":"        difference_type __bs = __fe - __fb;"},
{"lineNum":"  783","line":"        if (__bs > __n)"},
{"lineNum":"  784","line":"        {"},
{"lineNum":"  785","line":"            __bs = __n;"},
{"lineNum":"  786","line":"            __fe = __fb + __bs;"},
{"lineNum":"  787","line":"        }"},
{"lineNum":"  788","line":"        __r = _VSTD::move(__fb, __fe, __r);"},
{"lineNum":"  789","line":"        __n -= __bs;"},
{"lineNum":"  790","line":"        __f += __bs;"},
{"lineNum":"  791","line":"    }"},
{"lineNum":"  792","line":"    return __r;"},
{"lineNum":"  793","line":"}"},
{"lineNum":"  794","line":""},
{"lineNum":"  795","line":"template <class _V1, class _P1, class _R1, class _M1, class _D1, _D1 _B1,"},
{"lineNum":"  796","line":"          class _V2, class _P2, class _R2, class _M2, class _D2, _D2 _B2>"},
{"lineNum":"  797","line":"__deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2>"},
{"lineNum":"  798","line":"move(__deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __f,"},
{"lineNum":"  799","line":"     __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __l,"},
{"lineNum":"  800","line":"     __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2> __r)"},
{"lineNum":"  801","line":"{"},
{"lineNum":"  802","line":"    typedef typename __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1>::difference_type difference_type;"},
{"lineNum":"  803","line":"    typedef typename __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1>::pointer pointer;"},
{"lineNum":"  804","line":"    const difference_type __block_size = __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1>::__block_size;"},
{"lineNum":"  805","line":"    difference_type __n = __l - __f;"},
{"lineNum":"  806","line":"    while (__n > 0)"},
{"lineNum":"  807","line":"    {"},
{"lineNum":"  808","line":"        pointer __fb = __f.__ptr_;"},
{"lineNum":"  809","line":"        pointer __fe = *__f.__m_iter_ + __block_size;"},
{"lineNum":"  810","line":"        difference_type __bs = __fe - __fb;"},
{"lineNum":"  811","line":"        if (__bs > __n)"},
{"lineNum":"  812","line":"        {"},
{"lineNum":"  813","line":"            __bs = __n;"},
{"lineNum":"  814","line":"            __fe = __fb + __bs;"},
{"lineNum":"  815","line":"        }"},
{"lineNum":"  816","line":"        __r = _VSTD::move(__fb, __fe, __r);"},
{"lineNum":"  817","line":"        __n -= __bs;"},
{"lineNum":"  818","line":"        __f += __bs;"},
{"lineNum":"  819","line":"    }"},
{"lineNum":"  820","line":"    return __r;"},
{"lineNum":"  821","line":"}"},
{"lineNum":"  822","line":""},
{"lineNum":"  823","line":"// move_backward"},
{"lineNum":"  824","line":""},
{"lineNum":"  825","line":"template <class _RAIter,"},
{"lineNum":"  826","line":"          class _V2, class _P2, class _R2, class _M2, class _D2, _D2 _B2>"},
{"lineNum":"  827","line":"__deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2>"},
{"lineNum":"  828","line":"move_backward(_RAIter __f,"},
{"lineNum":"  829","line":"              _RAIter __l,"},
{"lineNum":"  830","line":"              __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2> __r,"},
{"lineNum":"  831","line":"              typename enable_if<__is_cpp17_random_access_iterator<_RAIter>::value>::type*)"},
{"lineNum":"  832","line":"{"},
{"lineNum":"  833","line":"    typedef typename __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2>::difference_type difference_type;"},
{"lineNum":"  834","line":"    typedef typename __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2>::pointer pointer;"},
{"lineNum":"  835","line":"    while (__f != __l)"},
{"lineNum":"  836","line":"    {"},
{"lineNum":"  837","line":"        __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2> __rp = _VSTD::prev(__r);"},
{"lineNum":"  838","line":"        pointer __rb = *__rp.__m_iter_;"},
{"lineNum":"  839","line":"        pointer __re = __rp.__ptr_ + 1;"},
{"lineNum":"  840","line":"        difference_type __bs = __re - __rb;"},
{"lineNum":"  841","line":"        difference_type __n = __l - __f;"},
{"lineNum":"  842","line":"        _RAIter __m = __f;"},
{"lineNum":"  843","line":"        if (__n > __bs)"},
{"lineNum":"  844","line":"        {"},
{"lineNum":"  845","line":"            __n = __bs;"},
{"lineNum":"  846","line":"            __m = __l - __n;"},
{"lineNum":"  847","line":"        }"},
{"lineNum":"  848","line":"        _VSTD::move_backward(__m, __l, __re);"},
{"lineNum":"  849","line":"        __l = __m;"},
{"lineNum":"  850","line":"        __r -= __n;"},
{"lineNum":"  851","line":"    }"},
{"lineNum":"  852","line":"    return __r;"},
{"lineNum":"  853","line":"}"},
{"lineNum":"  854","line":""},
{"lineNum":"  855","line":"template <class _V1, class _P1, class _R1, class _M1, class _D1, _D1 _B1,"},
{"lineNum":"  856","line":"          class _OutputIterator>"},
{"lineNum":"  857","line":"_OutputIterator"},
{"lineNum":"  858","line":"move_backward(__deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __f,"},
{"lineNum":"  859","line":"              __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __l,"},
{"lineNum":"  860","line":"              _OutputIterator __r)"},
{"lineNum":"  861","line":"{"},
{"lineNum":"  862","line":"    typedef typename __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1>::difference_type difference_type;"},
{"lineNum":"  863","line":"    typedef typename __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1>::pointer pointer;"},
{"lineNum":"  864","line":"    difference_type __n = __l - __f;"},
{"lineNum":"  865","line":"    while (__n > 0)"},
{"lineNum":"  866","line":"    {"},
{"lineNum":"  867","line":"        --__l;"},
{"lineNum":"  868","line":"        pointer __lb = *__l.__m_iter_;"},
{"lineNum":"  869","line":"        pointer __le = __l.__ptr_ + 1;"},
{"lineNum":"  870","line":"        difference_type __bs = __le - __lb;"},
{"lineNum":"  871","line":"        if (__bs > __n)"},
{"lineNum":"  872","line":"        {"},
{"lineNum":"  873","line":"            __bs = __n;"},
{"lineNum":"  874","line":"            __lb = __le - __bs;"},
{"lineNum":"  875","line":"        }"},
{"lineNum":"  876","line":"        __r = _VSTD::move_backward(__lb, __le, __r);"},
{"lineNum":"  877","line":"        __n -= __bs;"},
{"lineNum":"  878","line":"        __l -= __bs - 1;"},
{"lineNum":"  879","line":"    }"},
{"lineNum":"  880","line":"    return __r;"},
{"lineNum":"  881","line":"}"},
{"lineNum":"  882","line":""},
{"lineNum":"  883","line":"template <class _V1, class _P1, class _R1, class _M1, class _D1, _D1 _B1,"},
{"lineNum":"  884","line":"          class _V2, class _P2, class _R2, class _M2, class _D2, _D2 _B2>"},
{"lineNum":"  885","line":"__deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2>"},
{"lineNum":"  886","line":"move_backward(__deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __f,"},
{"lineNum":"  887","line":"              __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __l,"},
{"lineNum":"  888","line":"              __deque_iterator<_V2, _P2, _R2, _M2, _D2, _B2> __r)"},
{"lineNum":"  889","line":"{"},
{"lineNum":"  890","line":"    typedef typename __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1>::difference_type difference_type;"},
{"lineNum":"  891","line":"    typedef typename __deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1>::pointer pointer;"},
{"lineNum":"  892","line":"    difference_type __n = __l - __f;"},
{"lineNum":"  893","line":"    while (__n > 0)"},
{"lineNum":"  894","line":"    {"},
{"lineNum":"  895","line":"        --__l;"},
{"lineNum":"  896","line":"        pointer __lb = *__l.__m_iter_;"},
{"lineNum":"  897","line":"        pointer __le = __l.__ptr_ + 1;"},
{"lineNum":"  898","line":"        difference_type __bs = __le - __lb;"},
{"lineNum":"  899","line":"        if (__bs > __n)"},
{"lineNum":"  900","line":"        {"},
{"lineNum":"  901","line":"            __bs = __n;"},
{"lineNum":"  902","line":"            __lb = __le - __bs;"},
{"lineNum":"  903","line":"        }"},
{"lineNum":"  904","line":"        __r = _VSTD::move_backward(__lb, __le, __r);"},
{"lineNum":"  905","line":"        __n -= __bs;"},
{"lineNum":"  906","line":"        __l -= __bs - 1;"},
{"lineNum":"  907","line":"    }"},
{"lineNum":"  908","line":"    return __r;"},
{"lineNum":"  909","line":"}"},
{"lineNum":"  910","line":""},
{"lineNum":"  911","line":"template <bool>"},
{"lineNum":"  912","line":"class __deque_base_common"},
{"lineNum":"  913","line":"{"},
{"lineNum":"  914","line":"protected:"},
{"lineNum":"  915","line":"    _LIBCPP_NORETURN void __throw_length_error() const;"},
{"lineNum":"  916","line":"    _LIBCPP_NORETURN void __throw_out_of_range() const;"},
{"lineNum":"  917","line":"};"},
{"lineNum":"  918","line":""},
{"lineNum":"  919","line":"template <bool __b>"},
{"lineNum":"  920","line":"void"},
{"lineNum":"  921","line":"__deque_base_common<__b>::__throw_length_error() const"},
{"lineNum":"  922","line":"{"},
{"lineNum":"  923","line":"    _VSTD::__throw_length_error(\"deque\");"},
{"lineNum":"  924","line":"}"},
{"lineNum":"  925","line":""},
{"lineNum":"  926","line":"template <bool __b>"},
{"lineNum":"  927","line":"void"},
{"lineNum":"  928","line":"__deque_base_common<__b>::__throw_out_of_range() const"},
{"lineNum":"  929","line":"{"},
{"lineNum":"  930","line":"    _VSTD::__throw_out_of_range(\"deque\");"},
{"lineNum":"  931","line":"}"},
{"lineNum":"  932","line":""},
{"lineNum":"  933","line":"template <class _Tp, class _Allocator>"},
{"lineNum":"  934","line":"class __deque_base"},
{"lineNum":"  935","line":"    : protected __deque_base_common<true>"},
{"lineNum":"  936","line":"{"},
{"lineNum":"  937","line":"    __deque_base(const __deque_base& __c);"},
{"lineNum":"  938","line":"    __deque_base& operator=(const __deque_base& __c);"},
{"lineNum":"  939","line":"public:"},
{"lineNum":"  940","line":"    typedef _Allocator                               allocator_type;"},
{"lineNum":"  941","line":"    typedef allocator_traits<allocator_type>         __alloc_traits;"},
{"lineNum":"  942","line":"    typedef typename __alloc_traits::size_type       size_type;"},
{"lineNum":"  943","line":""},
{"lineNum":"  944","line":"    typedef _Tp                                      value_type;"},
{"lineNum":"  945","line":"    typedef value_type&                              reference;"},
{"lineNum":"  946","line":"    typedef const value_type&                        const_reference;"},
{"lineNum":"  947","line":"    typedef typename __alloc_traits::difference_type difference_type;"},
{"lineNum":"  948","line":"    typedef typename __alloc_traits::pointer         pointer;"},
{"lineNum":"  949","line":"    typedef typename __alloc_traits::const_pointer   const_pointer;"},
{"lineNum":"  950","line":""},
{"lineNum":"  951","line":"    static const difference_type __block_size;"},
{"lineNum":"  952","line":""},
{"lineNum":"  953","line":"    typedef typename __rebind_alloc_helper<__alloc_traits, pointer>::type __pointer_allocator;"},
{"lineNum":"  954","line":"    typedef allocator_traits<__pointer_allocator>        __map_traits;"},
{"lineNum":"  955","line":"    typedef typename __map_traits::pointer               __map_pointer;"},
{"lineNum":"  956","line":"    typedef typename __rebind_alloc_helper<__alloc_traits, const_pointer>::type __const_pointer_allocator;"},
{"lineNum":"  957","line":"    typedef typename allocator_traits<__const_pointer_allocator>::const_pointer __map_const_pointer;"},
{"lineNum":"  958","line":"    typedef __split_buffer<pointer, __pointer_allocator> __map;"},
{"lineNum":"  959","line":""},
{"lineNum":"  960","line":"    typedef __deque_iterator<value_type, pointer, reference, __map_pointer,"},
{"lineNum":"  961","line":"                             difference_type>    iterator;"},
{"lineNum":"  962","line":"    typedef __deque_iterator<value_type, const_pointer, const_reference, __map_const_pointer,"},
{"lineNum":"  963","line":"                             difference_type>    const_iterator;"},
{"lineNum":"  964","line":""},
{"lineNum":"  965","line":"    struct __deque_block_range {"},
{"lineNum":"  966","line":"      explicit __deque_block_range(pointer __b, pointer __e) _NOEXCEPT : __begin_(__b), __end_(__e) {}"},
{"lineNum":"  967","line":"      const pointer __begin_;"},
{"lineNum":"  968","line":"      const pointer __end_;"},
{"lineNum":"  969","line":"    };"},
{"lineNum":"  970","line":""},
{"lineNum":"  971","line":"    struct __deque_range {"},
{"lineNum":"  972","line":"      iterator __pos_;"},
{"lineNum":"  973","line":"      const iterator __end_;"},
{"lineNum":"  974","line":""},
{"lineNum":"  975","line":"      __deque_range(iterator __pos, iterator __e) _NOEXCEPT"},
{"lineNum":"  976","line":"        : __pos_(__pos), __end_(__e) {}"},
{"lineNum":"  977","line":""},
{"lineNum":"  978","line":"      explicit operator bool() const _NOEXCEPT {"},
{"lineNum":"  979","line":"        return __pos_ != __end_;"},
{"lineNum":"  980","line":"      }"},
{"lineNum":"  981","line":""},
{"lineNum":"  982","line":"      __deque_range begin() const {"},
{"lineNum":"  983","line":"        return *this;"},
{"lineNum":"  984","line":"      }"},
{"lineNum":"  985","line":""},
{"lineNum":"  986","line":"      __deque_range end() const {"},
{"lineNum":"  987","line":"        return __deque_range(__end_, __end_);"},
{"lineNum":"  988","line":"      }"},
{"lineNum":"  989","line":"      __deque_block_range operator*() const _NOEXCEPT {"},
{"lineNum":"  990","line":"         if (__pos_.__m_iter_ == __end_.__m_iter_) {"},
{"lineNum":"  991","line":"          return __deque_block_range(__pos_.__ptr_, __end_.__ptr_);"},
{"lineNum":"  992","line":"        }"},
{"lineNum":"  993","line":"        return __deque_block_range(__pos_.__ptr_, *__pos_.__m_iter_ + __block_size);"},
{"lineNum":"  994","line":"      }"},
{"lineNum":"  995","line":""},
{"lineNum":"  996","line":"      __deque_range& operator++() _NOEXCEPT {"},
{"lineNum":"  997","line":"        if (__pos_.__m_iter_ == __end_.__m_iter_) {"},
{"lineNum":"  998","line":"          __pos_ = __end_;"},
{"lineNum":"  999","line":"        } else {"},
{"lineNum":" 1000","line":"          ++__pos_.__m_iter_;"},
{"lineNum":" 1001","line":"          __pos_.__ptr_ = *__pos_.__m_iter_;"},
{"lineNum":" 1002","line":"        }"},
{"lineNum":" 1003","line":"        return *this;"},
{"lineNum":" 1004","line":"      }"},
{"lineNum":" 1005","line":""},
{"lineNum":" 1006","line":""},
{"lineNum":" 1007","line":"      friend bool operator==(__deque_range const& __lhs, __deque_range const& __rhs) {"},
{"lineNum":" 1008","line":"        return __lhs.__pos_ == __rhs.__pos_;"},
{"lineNum":" 1009","line":"      }"},
{"lineNum":" 1010","line":"      friend bool operator!=(__deque_range const& __lhs, __deque_range const& __rhs) {"},
{"lineNum":" 1011","line":"        return !(__lhs == __rhs);"},
{"lineNum":" 1012","line":"      }"},
{"lineNum":" 1013","line":"    };"},
{"lineNum":" 1014","line":""},
{"lineNum":" 1015","line":""},
{"lineNum":" 1016","line":""},
{"lineNum":" 1017","line":"    struct _ConstructTransaction {"},
{"lineNum":" 1018","line":"      _ConstructTransaction(__deque_base* __db, __deque_block_range& __r)"},
{"lineNum":" 1019","line":"        : __pos_(__r.__begin_), __end_(__r.__end_), __begin_(__r.__begin_), __base_(__db) {}"},
{"lineNum":" 1020","line":""},
{"lineNum":" 1021","line":""},
{"lineNum":" 1022","line":"      ~_ConstructTransaction() {"},
{"lineNum":" 1023","line":"        __base_->size() += (__pos_ - __begin_);"},
{"lineNum":" 1024","line":"      }"},
{"lineNum":" 1025","line":""},
{"lineNum":" 1026","line":"      pointer __pos_;"},
{"lineNum":" 1027","line":"      const pointer __end_;"},
{"lineNum":" 1028","line":"    private:"},
{"lineNum":" 1029","line":"      const pointer __begin_;"},
{"lineNum":" 1030","line":"      __deque_base * const __base_;"},
{"lineNum":" 1031","line":"    };"},
{"lineNum":" 1032","line":""},
{"lineNum":" 1033","line":"protected:"},
{"lineNum":" 1034","line":"    __map __map_;"},
{"lineNum":" 1035","line":"    size_type __start_;"},
{"lineNum":" 1036","line":"    __compressed_pair<size_type, allocator_type> __size_;"},
{"lineNum":" 1037","line":""},
{"lineNum":" 1038","line":"    iterator       begin() _NOEXCEPT;"},
{"lineNum":" 1039","line":"    const_iterator begin() const _NOEXCEPT;"},
{"lineNum":" 1040","line":"    iterator       end() _NOEXCEPT;"},
{"lineNum":" 1041","line":"    const_iterator end() const _NOEXCEPT;"},
{"lineNum":" 1042","line":""},
{"lineNum":" 1043","line":"    _LIBCPP_INLINE_VISIBILITY size_type&            size()          {return __size_.first();}"},
{"lineNum":" 1044","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1045","line":"    const size_type& size() const _NOEXCEPT {return __size_.first();}"},
{"lineNum":" 1046","line":"    _LIBCPP_INLINE_VISIBILITY allocator_type&       __alloc()       {return __size_.second();}"},
{"lineNum":" 1047","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1048","line":"    const allocator_type& __alloc() const _NOEXCEPT {return __size_.second();}"},
{"lineNum":" 1049","line":""},
{"lineNum":" 1050","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1051","line":"    __deque_base()"},
{"lineNum":" 1052","line":"        _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value);"},
{"lineNum":" 1053","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1054","line":"    explicit __deque_base(const allocator_type& __a);"},
{"lineNum":" 1055","line":"public:"},
{"lineNum":" 1056","line":"    ~__deque_base();"},
{"lineNum":" 1057","line":""},
{"lineNum":" 1058","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1059","line":"    __deque_base(__deque_base&& __c)"},
{"lineNum":" 1060","line":"        _NOEXCEPT_(is_nothrow_move_constructible<allocator_type>::value);"},
{"lineNum":" 1061","line":"    __deque_base(__deque_base&& __c, const allocator_type& __a);"},
{"lineNum":" 1062","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 1063","line":""},
{"lineNum":" 1064","line":"    void swap(__deque_base& __c)"},
{"lineNum":" 1065","line":"#if _LIBCPP_STD_VER >= 14"},
{"lineNum":" 1066","line":"        _NOEXCEPT;"},
{"lineNum":" 1067","line":"#else"},
{"lineNum":" 1068","line":"        _NOEXCEPT_(!__alloc_traits::propagate_on_container_swap::value ||"},
{"lineNum":" 1069","line":"                    __is_nothrow_swappable<allocator_type>::value);"},
{"lineNum":" 1070","line":"#endif"},
{"lineNum":" 1071","line":"protected:"},
{"lineNum":" 1072","line":"    void clear() _NOEXCEPT;"},
{"lineNum":" 1073","line":""},
{"lineNum":" 1074","line":"    bool __invariants() const;"},
{"lineNum":" 1075","line":""},
{"lineNum":" 1076","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1077","line":"    void __move_assign(__deque_base& __c)"},
{"lineNum":" 1078","line":"        _NOEXCEPT_(__alloc_traits::propagate_on_container_move_assignment::value &&"},
{"lineNum":" 1079","line":"                   is_nothrow_move_assignable<allocator_type>::value)"},
{"lineNum":" 1080","line":"    {"},
{"lineNum":" 1081","line":"        __map_ = _VSTD::move(__c.__map_);"},
{"lineNum":" 1082","line":"        __start_ = __c.__start_;"},
{"lineNum":" 1083","line":"        size() = __c.size();"},
{"lineNum":" 1084","line":"        __move_assign_alloc(__c);"},
{"lineNum":" 1085","line":"        __c.__start_ = __c.size() = 0;"},
{"lineNum":" 1086","line":"    }"},
{"lineNum":" 1087","line":""},
{"lineNum":" 1088","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1089","line":"    void __move_assign_alloc(__deque_base& __c)"},
{"lineNum":" 1090","line":"        _NOEXCEPT_(!__alloc_traits::propagate_on_container_move_assignment::value ||"},
{"lineNum":" 1091","line":"                   is_nothrow_move_assignable<allocator_type>::value)"},
{"lineNum":" 1092","line":"        {__move_assign_alloc(__c, integral_constant<bool,"},
{"lineNum":" 1093","line":"                      __alloc_traits::propagate_on_container_move_assignment::value>());}"},
{"lineNum":" 1094","line":""},
{"lineNum":" 1095","line":"private:"},
{"lineNum":" 1096","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1097","line":"    void __move_assign_alloc(__deque_base& __c, true_type)"},
{"lineNum":" 1098","line":"        _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value)"},
{"lineNum":" 1099","line":"        {"},
{"lineNum":" 1100","line":"            __alloc() = _VSTD::move(__c.__alloc());"},
{"lineNum":" 1101","line":"        }"},
{"lineNum":" 1102","line":""},
{"lineNum":" 1103","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1104","line":"    void __move_assign_alloc(__deque_base&, false_type) _NOEXCEPT"},
{"lineNum":" 1105","line":"        {}"},
{"lineNum":" 1106","line":"};"},
{"lineNum":" 1107","line":""},
{"lineNum":" 1108","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1109","line":"const typename __deque_base<_Tp, _Allocator>::difference_type"},
{"lineNum":" 1110","line":"    __deque_base<_Tp, _Allocator>::__block_size ="},
{"lineNum":" 1111","line":"        __deque_block_size<value_type, difference_type>::value;"},
{"lineNum":" 1112","line":""},
{"lineNum":" 1113","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1114","line":"bool"},
{"lineNum":" 1115","line":"__deque_base<_Tp, _Allocator>::__invariants() const"},
{"lineNum":" 1116","line":"{"},
{"lineNum":" 1117","line":"    if (!__map_.__invariants())"},
{"lineNum":" 1118","line":"        return false;"},
{"lineNum":" 1119","line":"    if (__map_.size() >= size_type(-1) / __block_size)"},
{"lineNum":" 1120","line":"        return false;"},
{"lineNum":" 1121","line":"    for (typename __map::const_iterator __i = __map_.begin(), __e = __map_.end();"},
{"lineNum":" 1122","line":"         __i != __e; ++__i)"},
{"lineNum":" 1123","line":"        if (*__i == nullptr)"},
{"lineNum":" 1124","line":"            return false;"},
{"lineNum":" 1125","line":"    if (__map_.size() != 0)"},
{"lineNum":" 1126","line":"    {"},
{"lineNum":" 1127","line":"        if (size() >= __map_.size() * __block_size)"},
{"lineNum":" 1128","line":"            return false;"},
{"lineNum":" 1129","line":"        if (__start_ >= __map_.size() * __block_size - size())"},
{"lineNum":" 1130","line":"            return false;"},
{"lineNum":" 1131","line":"    }"},
{"lineNum":" 1132","line":"    else"},
{"lineNum":" 1133","line":"    {"},
{"lineNum":" 1134","line":"        if (size() != 0)"},
{"lineNum":" 1135","line":"            return false;"},
{"lineNum":" 1136","line":"        if (__start_ != 0)"},
{"lineNum":" 1137","line":"            return false;"},
{"lineNum":" 1138","line":"    }"},
{"lineNum":" 1139","line":"    return true;"},
{"lineNum":" 1140","line":"}"},
{"lineNum":" 1141","line":""},
{"lineNum":" 1142","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1143","line":"typename __deque_base<_Tp, _Allocator>::iterator"},
{"lineNum":" 1144","line":"__deque_base<_Tp, _Allocator>::begin() _NOEXCEPT"},
{"lineNum":" 1145","line":"{"},
{"lineNum":" 1146","line":"    __map_pointer __mp = __map_.begin() + __start_ / __block_size;","class":"linePartCov","hits":"1","order":"367","possible_hits":"3",},
{"lineNum":" 1147","line":"    return iterator(__mp, __map_.empty() ? 0 : *__mp + __start_ % __block_size);","class":"linePartCov","hits":"1","order":"369","possible_hits":"5",},
{"lineNum":" 1148","line":"}"},
{"lineNum":" 1149","line":""},
{"lineNum":" 1150","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1151","line":"typename __deque_base<_Tp, _Allocator>::const_iterator"},
{"lineNum":" 1152","line":"__deque_base<_Tp, _Allocator>::begin() const _NOEXCEPT"},
{"lineNum":" 1153","line":"{"},
{"lineNum":" 1154","line":"    __map_const_pointer __mp = static_cast<__map_const_pointer>(__map_.begin() + __start_ / __block_size);"},
{"lineNum":" 1155","line":"    return const_iterator(__mp, __map_.empty() ? 0 : *__mp + __start_ % __block_size);"},
{"lineNum":" 1156","line":"}"},
{"lineNum":" 1157","line":""},
{"lineNum":" 1158","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1159","line":"typename __deque_base<_Tp, _Allocator>::iterator"},
{"lineNum":" 1160","line":"__deque_base<_Tp, _Allocator>::end() _NOEXCEPT"},
{"lineNum":" 1161","line":"{"},
{"lineNum":" 1162","line":"    size_type __p = size() + __start_;","class":"linePartCov","hits":"2","order":"272","possible_hits":"79",},
{"lineNum":" 1163","line":"    __map_pointer __mp = __map_.begin() + __p / __block_size;","class":"linePartCov","hits":"2","order":"273","possible_hits":"68",},
{"lineNum":" 1164","line":"    return iterator(__mp, __map_.empty() ? 0 : *__mp + __p % __block_size);","class":"linePartCov","hits":"3","order":"274","possible_hits":"84",},
{"lineNum":" 1165","line":"}"},
{"lineNum":" 1166","line":""},
{"lineNum":" 1167","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1168","line":"typename __deque_base<_Tp, _Allocator>::const_iterator"},
{"lineNum":" 1169","line":"__deque_base<_Tp, _Allocator>::end() const _NOEXCEPT"},
{"lineNum":" 1170","line":"{"},
{"lineNum":" 1171","line":"    size_type __p = size() + __start_;"},
{"lineNum":" 1172","line":"    __map_const_pointer __mp = static_cast<__map_const_pointer>(__map_.begin() + __p / __block_size);"},
{"lineNum":" 1173","line":"    return const_iterator(__mp, __map_.empty() ? 0 : *__mp + __p % __block_size);"},
{"lineNum":" 1174","line":"}"},
{"lineNum":" 1175","line":""},
{"lineNum":" 1176","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1177","line":"inline"},
{"lineNum":" 1178","line":"__deque_base<_Tp, _Allocator>::__deque_base()"},
{"lineNum":" 1179","line":"    _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value)"},
{"lineNum":" 1180","line":"    : __start_(0), __size_(0, __default_init_tag()) {}","class":"linePartCov","hits":"11","order":"241","possible_hits":"36",},
{"lineNum":" 1181","line":""},
{"lineNum":" 1182","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1183","line":"inline"},
{"lineNum":" 1184","line":"__deque_base<_Tp, _Allocator>::__deque_base(const allocator_type& __a)"},
{"lineNum":" 1185","line":"    : __map_(__pointer_allocator(__a)), __start_(0), __size_(0, __a) {}"},
{"lineNum":" 1186","line":""},
{"lineNum":" 1187","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1188","line":"__deque_base<_Tp, _Allocator>::~__deque_base()"},
{"lineNum":" 1189","line":"{","class":"linePartCov","hits":"1","order":"364","possible_hits":"4",},
{"lineNum":" 1190","line":"    clear();","class":"linePartCov","hits":"1","order":"365","possible_hits":"3",},
{"lineNum":" 1191","line":"    typename __map::iterator __i = __map_.begin();"},
{"lineNum":" 1192","line":"    typename __map::iterator __e = __map_.end();"},
{"lineNum":" 1193","line":"    for (; __i != __e; ++__i)","class":"linePartCov","hits":"2","order":"377","possible_hits":"106",},
{"lineNum":" 1194","line":"        __alloc_traits::deallocate(__alloc(), *__i, __block_size);","class":"linePartCov","hits":"1","order":"378","possible_hits":"53",},
{"lineNum":" 1195","line":"}","class":"linePartCov","hits":"1","order":"379","possible_hits":"8",},
{"lineNum":" 1196","line":""},
{"lineNum":" 1197","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1198","line":""},
{"lineNum":" 1199","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1200","line":"__deque_base<_Tp, _Allocator>::__deque_base(__deque_base&& __c)"},
{"lineNum":" 1201","line":"    _NOEXCEPT_(is_nothrow_move_constructible<allocator_type>::value)"},
{"lineNum":" 1202","line":"    : __map_(_VSTD::move(__c.__map_)),"},
{"lineNum":" 1203","line":"      __start_(_VSTD::move(__c.__start_)),"},
{"lineNum":" 1204","line":"      __size_(_VSTD::move(__c.__size_))"},
{"lineNum":" 1205","line":"{"},
{"lineNum":" 1206","line":"    __c.__start_ = 0;"},
{"lineNum":" 1207","line":"    __c.size() = 0;"},
{"lineNum":" 1208","line":"}"},
{"lineNum":" 1209","line":""},
{"lineNum":" 1210","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1211","line":"__deque_base<_Tp, _Allocator>::__deque_base(__deque_base&& __c, const allocator_type& __a)"},
{"lineNum":" 1212","line":"    : __map_(_VSTD::move(__c.__map_), __pointer_allocator(__a)),"},
{"lineNum":" 1213","line":"      __start_(_VSTD::move(__c.__start_)),"},
{"lineNum":" 1214","line":"      __size_(_VSTD::move(__c.size()), __a)"},
{"lineNum":" 1215","line":"{"},
{"lineNum":" 1216","line":"    if (__a == __c.__alloc())"},
{"lineNum":" 1217","line":"    {"},
{"lineNum":" 1218","line":"        __c.__start_ = 0;"},
{"lineNum":" 1219","line":"        __c.size() = 0;"},
{"lineNum":" 1220","line":"    }"},
{"lineNum":" 1221","line":"    else"},
{"lineNum":" 1222","line":"    {"},
{"lineNum":" 1223","line":"        __map_.clear();"},
{"lineNum":" 1224","line":"        __start_ = 0;"},
{"lineNum":" 1225","line":"        size() = 0;"},
{"lineNum":" 1226","line":"    }"},
{"lineNum":" 1227","line":"}"},
{"lineNum":" 1228","line":""},
{"lineNum":" 1229","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 1230","line":""},
{"lineNum":" 1231","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1232","line":"void"},
{"lineNum":" 1233","line":"__deque_base<_Tp, _Allocator>::swap(__deque_base& __c)"},
{"lineNum":" 1234","line":"#if _LIBCPP_STD_VER >= 14"},
{"lineNum":" 1235","line":"        _NOEXCEPT"},
{"lineNum":" 1236","line":"#else"},
{"lineNum":" 1237","line":"        _NOEXCEPT_(!__alloc_traits::propagate_on_container_swap::value ||"},
{"lineNum":" 1238","line":"                    __is_nothrow_swappable<allocator_type>::value)"},
{"lineNum":" 1239","line":"#endif"},
{"lineNum":" 1240","line":"{"},
{"lineNum":" 1241","line":"    __map_.swap(__c.__map_);"},
{"lineNum":" 1242","line":"    _VSTD::swap(__start_, __c.__start_);"},
{"lineNum":" 1243","line":"    _VSTD::swap(size(), __c.size());"},
{"lineNum":" 1244","line":"    _VSTD::__swap_allocator(__alloc(), __c.__alloc());"},
{"lineNum":" 1245","line":"}"},
{"lineNum":" 1246","line":""},
{"lineNum":" 1247","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1248","line":"void"},
{"lineNum":" 1249","line":"__deque_base<_Tp, _Allocator>::clear() _NOEXCEPT"},
{"lineNum":" 1250","line":"{","class":"linePartCov","hits":"1","order":"366","possible_hits":"2",},
{"lineNum":" 1251","line":"    allocator_type& __a = __alloc();"},
{"lineNum":" 1252","line":"    for (iterator __i = begin(), __e = end(); __i != __e; ++__i)","class":"linePartCov","hits":"1","order":"371","possible_hits":"5",},
{"lineNum":" 1253","line":"        __alloc_traits::destroy(__a, _VSTD::addressof(*__i));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1254","line":"    size() = 0;","class":"linePartCov","hits":"1","order":"372","possible_hits":"52",},
{"lineNum":" 1255","line":"    while (__map_.size() > 2)","class":"linePartCov","hits":"1","order":"373","possible_hits":"105",},
{"lineNum":" 1256","line":"    {"},
{"lineNum":" 1257","line":"        __alloc_traits::deallocate(__a, __map_.front(), __block_size);","class":"lineNoCov","hits":"0","possible_hits":"52",},
{"lineNum":" 1258","line":"        __map_.pop_front();"},
{"lineNum":" 1259","line":"    }"},
{"lineNum":" 1260","line":"    switch (__map_.size())","class":"linePartCov","hits":"2","order":"374","possible_hits":"53",},
{"lineNum":" 1261","line":"    {"},
{"lineNum":" 1262","line":"    case 1:"},
{"lineNum":" 1263","line":"        __start_ = __block_size / 2;","class":"lineCov","hits":"1","order":"375","possible_hits":"1",},
{"lineNum":" 1264","line":"        break;"},
{"lineNum":" 1265","line":"    case 2:"},
{"lineNum":" 1266","line":"        __start_ = __block_size;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1267","line":"        break;"},
{"lineNum":" 1268","line":"    }"},
{"lineNum":" 1269","line":"}","class":"linePartCov","hits":"1","order":"376","possible_hits":"4",},
{"lineNum":" 1270","line":""},
{"lineNum":" 1271","line":"template <class _Tp, class _Allocator /*= allocator<_Tp>*/>"},
{"lineNum":" 1272","line":"class _LIBCPP_TEMPLATE_VIS deque"},
{"lineNum":" 1273","line":"    : private __deque_base<_Tp, _Allocator>"},
{"lineNum":" 1274","line":"{"},
{"lineNum":" 1275","line":"public:"},
{"lineNum":" 1276","line":"    // types:"},
{"lineNum":" 1277","line":""},
{"lineNum":" 1278","line":"    typedef _Tp value_type;"},
{"lineNum":" 1279","line":"    typedef _Allocator allocator_type;"},
{"lineNum":" 1280","line":""},
{"lineNum":" 1281","line":"    static_assert((is_same<typename allocator_type::value_type, value_type>::value),"},
{"lineNum":" 1282","line":"                  \"Allocator::value_type must be same type as value_type\");"},
{"lineNum":" 1283","line":""},
{"lineNum":" 1284","line":"    typedef __deque_base<value_type, allocator_type> __base;"},
{"lineNum":" 1285","line":""},
{"lineNum":" 1286","line":"    typedef typename __base::__alloc_traits        __alloc_traits;"},
{"lineNum":" 1287","line":"    typedef typename __base::reference             reference;"},
{"lineNum":" 1288","line":"    typedef typename __base::const_reference       const_reference;"},
{"lineNum":" 1289","line":"    typedef typename __base::iterator              iterator;"},
{"lineNum":" 1290","line":"    typedef typename __base::const_iterator        const_iterator;"},
{"lineNum":" 1291","line":"    typedef typename __base::size_type             size_type;"},
{"lineNum":" 1292","line":"    typedef typename __base::difference_type       difference_type;"},
{"lineNum":" 1293","line":""},
{"lineNum":" 1294","line":"    typedef typename __base::pointer               pointer;"},
{"lineNum":" 1295","line":"    typedef typename __base::const_pointer         const_pointer;"},
{"lineNum":" 1296","line":"    typedef _VSTD::reverse_iterator<iterator>       reverse_iterator;"},
{"lineNum":" 1297","line":"    typedef _VSTD::reverse_iterator<const_iterator> const_reverse_iterator;"},
{"lineNum":" 1298","line":""},
{"lineNum":" 1299","line":"    using typename __base::__deque_range;"},
{"lineNum":" 1300","line":"    using typename __base::__deque_block_range;"},
{"lineNum":" 1301","line":"    using typename __base::_ConstructTransaction;"},
{"lineNum":" 1302","line":""},
{"lineNum":" 1303","line":"    // construct/copy/destroy:"},
{"lineNum":" 1304","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1305","line":"    deque()"},
{"lineNum":" 1306","line":"        _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value)"},
{"lineNum":" 1307","line":"        {}"},
{"lineNum":" 1308","line":"    _LIBCPP_INLINE_VISIBILITY explicit deque(const allocator_type& __a) : __base(__a) {}"},
{"lineNum":" 1309","line":"    explicit deque(size_type __n);"},
{"lineNum":" 1310","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 1311","line":"    explicit deque(size_type __n, const _Allocator& __a);"},
{"lineNum":" 1312","line":"#endif"},
{"lineNum":" 1313","line":"    deque(size_type __n, const value_type& __v);"},
{"lineNum":" 1314","line":"    deque(size_type __n, const value_type& __v, const allocator_type& __a);"},
{"lineNum":" 1315","line":"    template <class _InputIter>"},
{"lineNum":" 1316","line":"        deque(_InputIter __f, _InputIter __l,"},
{"lineNum":" 1317","line":"              typename enable_if<__is_cpp17_input_iterator<_InputIter>::value>::type* = 0);"},
{"lineNum":" 1318","line":"    template <class _InputIter>"},
{"lineNum":" 1319","line":"        deque(_InputIter __f, _InputIter __l, const allocator_type& __a,"},
{"lineNum":" 1320","line":"              typename enable_if<__is_cpp17_input_iterator<_InputIter>::value>::type* = 0);"},
{"lineNum":" 1321","line":"    deque(const deque& __c);"},
{"lineNum":" 1322","line":"    deque(const deque& __c, const __identity_t<allocator_type>& __a);"},
{"lineNum":" 1323","line":""},
{"lineNum":" 1324","line":"    deque& operator=(const deque& __c);"},
{"lineNum":" 1325","line":""},
{"lineNum":" 1326","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1327","line":"    deque(initializer_list<value_type> __il);"},
{"lineNum":" 1328","line":"    deque(initializer_list<value_type> __il, const allocator_type& __a);"},
{"lineNum":" 1329","line":""},
{"lineNum":" 1330","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1331","line":"    deque& operator=(initializer_list<value_type> __il) {assign(__il); return *this;}"},
{"lineNum":" 1332","line":""},
{"lineNum":" 1333","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1334","line":"    deque(deque&& __c) _NOEXCEPT_(is_nothrow_move_constructible<__base>::value);"},
{"lineNum":" 1335","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1336","line":"    deque(deque&& __c, const __identity_t<allocator_type>& __a);"},
{"lineNum":" 1337","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1338","line":"    deque& operator=(deque&& __c)"},
{"lineNum":" 1339","line":"        _NOEXCEPT_(__alloc_traits::propagate_on_container_move_assignment::value &&"},
{"lineNum":" 1340","line":"                   is_nothrow_move_assignable<allocator_type>::value);"},
{"lineNum":" 1341","line":""},
{"lineNum":" 1342","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1343","line":"    void assign(initializer_list<value_type> __il) {assign(__il.begin(), __il.end());}"},
{"lineNum":" 1344","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 1345","line":""},
{"lineNum":" 1346","line":"    template <class _InputIter>"},
{"lineNum":" 1347","line":"        void assign(_InputIter __f, _InputIter __l,"},
{"lineNum":" 1348","line":"                    typename enable_if<__is_cpp17_input_iterator<_InputIter>::value &&"},
{"lineNum":" 1349","line":"                                      !__is_cpp17_random_access_iterator<_InputIter>::value>::type* = 0);"},
{"lineNum":" 1350","line":"    template <class _RAIter>"},
{"lineNum":" 1351","line":"        void assign(_RAIter __f, _RAIter __l,"},
{"lineNum":" 1352","line":"                    typename enable_if<__is_cpp17_random_access_iterator<_RAIter>::value>::type* = 0);"},
{"lineNum":" 1353","line":"    void assign(size_type __n, const value_type& __v);"},
{"lineNum":" 1354","line":""},
{"lineNum":" 1355","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1356","line":"    allocator_type get_allocator() const _NOEXCEPT;"},
{"lineNum":" 1357","line":""},
{"lineNum":" 1358","line":"    // iterators:"},
{"lineNum":" 1359","line":""},
{"lineNum":" 1360","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1361","line":"    iterator       begin() _NOEXCEPT       {return __base::begin();}"},
{"lineNum":" 1362","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1363","line":"    const_iterator begin() const _NOEXCEPT {return __base::begin();}"},
{"lineNum":" 1364","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1365","line":"    iterator       end() _NOEXCEPT         {return __base::end();}"},
{"lineNum":" 1366","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1367","line":"    const_iterator end()   const _NOEXCEPT {return __base::end();}"},
{"lineNum":" 1368","line":""},
{"lineNum":" 1369","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1370","line":"    reverse_iterator       rbegin() _NOEXCEPT"},
{"lineNum":" 1371","line":"        {return       reverse_iterator(__base::end());}"},
{"lineNum":" 1372","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1373","line":"    const_reverse_iterator rbegin() const _NOEXCEPT"},
{"lineNum":" 1374","line":"        {return const_reverse_iterator(__base::end());}"},
{"lineNum":" 1375","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1376","line":"    reverse_iterator       rend() _NOEXCEPT"},
{"lineNum":" 1377","line":"        {return       reverse_iterator(__base::begin());}"},
{"lineNum":" 1378","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1379","line":"    const_reverse_iterator rend()   const _NOEXCEPT"},
{"lineNum":" 1380","line":"        {return const_reverse_iterator(__base::begin());}"},
{"lineNum":" 1381","line":""},
{"lineNum":" 1382","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1383","line":"    const_iterator         cbegin()  const _NOEXCEPT"},
{"lineNum":" 1384","line":"        {return __base::begin();}"},
{"lineNum":" 1385","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1386","line":"    const_iterator         cend()    const _NOEXCEPT"},
{"lineNum":" 1387","line":"        {return __base::end();}"},
{"lineNum":" 1388","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1389","line":"    const_reverse_iterator crbegin() const _NOEXCEPT"},
{"lineNum":" 1390","line":"        {return const_reverse_iterator(__base::end());}"},
{"lineNum":" 1391","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1392","line":"    const_reverse_iterator crend()   const _NOEXCEPT"},
{"lineNum":" 1393","line":"        {return const_reverse_iterator(__base::begin());}"},
{"lineNum":" 1394","line":""},
{"lineNum":" 1395","line":"    // capacity:"},
{"lineNum":" 1396","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1397","line":"    size_type size() const _NOEXCEPT {return __base::size();}"},
{"lineNum":" 1398","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1399","line":"    size_type max_size() const _NOEXCEPT"},
{"lineNum":" 1400","line":"        {return _VSTD::min<size_type>("},
{"lineNum":" 1401","line":"            __alloc_traits::max_size(__base::__alloc()),"},
{"lineNum":" 1402","line":"            numeric_limits<difference_type>::max());}"},
{"lineNum":" 1403","line":"    void resize(size_type __n);"},
{"lineNum":" 1404","line":"    void resize(size_type __n, const value_type& __v);"},
{"lineNum":" 1405","line":"    void shrink_to_fit() _NOEXCEPT;"},
{"lineNum":" 1406","line":"    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1407","line":"    bool empty() const _NOEXCEPT {return __base::size() == 0;}","class":"linePartCov","hits":"11","order":"287","possible_hits":"63",},
{"lineNum":" 1408","line":""},
{"lineNum":" 1409","line":"    // element access:"},
{"lineNum":" 1410","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1411","line":"    reference operator[](size_type __i) _NOEXCEPT;"},
{"lineNum":" 1412","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1413","line":"    const_reference operator[](size_type __i) const _NOEXCEPT;"},
{"lineNum":" 1414","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1415","line":"    reference at(size_type __i);"},
{"lineNum":" 1416","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1417","line":"    const_reference at(size_type __i) const;"},
{"lineNum":" 1418","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1419","line":"    reference front() _NOEXCEPT;"},
{"lineNum":" 1420","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1421","line":"    const_reference front() const _NOEXCEPT;"},
{"lineNum":" 1422","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1423","line":"    reference back() _NOEXCEPT;"},
{"lineNum":" 1424","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1425","line":"    const_reference back() const _NOEXCEPT;"},
{"lineNum":" 1426","line":""},
{"lineNum":" 1427","line":"    // 23.2.2.3 modifiers:"},
{"lineNum":" 1428","line":"    void push_front(const value_type& __v);"},
{"lineNum":" 1429","line":"    void push_back(const value_type& __v);"},
{"lineNum":" 1430","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1431","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 1432","line":"    template <class... _Args> reference emplace_front(_Args&&... __args);"},
{"lineNum":" 1433","line":"    template <class... _Args> reference emplace_back (_Args&&... __args);"},
{"lineNum":" 1434","line":"#else"},
{"lineNum":" 1435","line":"    template <class... _Args> void      emplace_front(_Args&&... __args);"},
{"lineNum":" 1436","line":"    template <class... _Args> void      emplace_back (_Args&&... __args);"},
{"lineNum":" 1437","line":"#endif"},
{"lineNum":" 1438","line":"    template <class... _Args> iterator emplace(const_iterator __p, _Args&&... __args);"},
{"lineNum":" 1439","line":""},
{"lineNum":" 1440","line":"    void push_front(value_type&& __v);"},
{"lineNum":" 1441","line":"    void push_back(value_type&& __v);"},
{"lineNum":" 1442","line":"    iterator insert(const_iterator __p, value_type&& __v);"},
{"lineNum":" 1443","line":""},
{"lineNum":" 1444","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1445","line":"    iterator insert(const_iterator __p, initializer_list<value_type> __il)"},
{"lineNum":" 1446","line":"        {return insert(__p, __il.begin(), __il.end());}"},
{"lineNum":" 1447","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 1448","line":"    iterator insert(const_iterator __p, const value_type& __v);"},
{"lineNum":" 1449","line":"    iterator insert(const_iterator __p, size_type __n, const value_type& __v);"},
{"lineNum":" 1450","line":"    template <class _InputIter>"},
{"lineNum":" 1451","line":"        iterator insert(const_iterator __p, _InputIter __f, _InputIter __l,"},
{"lineNum":" 1452","line":"                         typename enable_if<__is_cpp17_input_iterator<_InputIter>::value"},
{"lineNum":" 1453","line":"                                         &&!__is_cpp17_forward_iterator<_InputIter>::value>::type* = 0);"},
{"lineNum":" 1454","line":"    template <class _ForwardIterator>"},
{"lineNum":" 1455","line":"        iterator insert(const_iterator __p, _ForwardIterator __f, _ForwardIterator __l,"},
{"lineNum":" 1456","line":"                               typename enable_if<__is_cpp17_forward_iterator<_ForwardIterator>::value"},
{"lineNum":" 1457","line":"                                         &&!__is_cpp17_bidirectional_iterator<_ForwardIterator>::value>::type* = 0);"},
{"lineNum":" 1458","line":"    template <class _BiIter>"},
{"lineNum":" 1459","line":"        iterator insert(const_iterator __p, _BiIter __f, _BiIter __l,"},
{"lineNum":" 1460","line":"                         typename enable_if<__is_cpp17_bidirectional_iterator<_BiIter>::value>::type* = 0);"},
{"lineNum":" 1461","line":""},
{"lineNum":" 1462","line":"    void pop_front();"},
{"lineNum":" 1463","line":"    void pop_back();"},
{"lineNum":" 1464","line":"    iterator erase(const_iterator __p);"},
{"lineNum":" 1465","line":"    iterator erase(const_iterator __f, const_iterator __l);"},
{"lineNum":" 1466","line":""},
{"lineNum":" 1467","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1468","line":"    void swap(deque& __c)"},
{"lineNum":" 1469","line":"#if _LIBCPP_STD_VER >= 14"},
{"lineNum":" 1470","line":"        _NOEXCEPT;"},
{"lineNum":" 1471","line":"#else"},
{"lineNum":" 1472","line":"        _NOEXCEPT_(!__alloc_traits::propagate_on_container_swap::value ||"},
{"lineNum":" 1473","line":"                   __is_nothrow_swappable<allocator_type>::value);"},
{"lineNum":" 1474","line":"#endif"},
{"lineNum":" 1475","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1476","line":"    void clear() _NOEXCEPT;"},
{"lineNum":" 1477","line":""},
{"lineNum":" 1478","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1479","line":"    bool __invariants() const {return __base::__invariants();}"},
{"lineNum":" 1480","line":""},
{"lineNum":" 1481","line":"    typedef typename __base::__map_const_pointer __map_const_pointer;"},
{"lineNum":" 1482","line":""},
{"lineNum":" 1483","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1484","line":"    static size_type __recommend_blocks(size_type __n)"},
{"lineNum":" 1485","line":"    {"},
{"lineNum":" 1486","line":"        return __n / __base::__block_size + (__n % __base::__block_size != 0);"},
{"lineNum":" 1487","line":"    }"},
{"lineNum":" 1488","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1489","line":"    size_type __capacity() const"},
{"lineNum":" 1490","line":"    {"},
{"lineNum":" 1491","line":"        return __base::__map_.size() == 0 ? 0 : __base::__map_.size() * __base::__block_size - 1;","class":"linePartCov","hits":"2","order":"248","possible_hits":"453",},
{"lineNum":" 1492","line":"    }"},
{"lineNum":" 1493","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1494","line":"    size_type __block_count() const"},
{"lineNum":" 1495","line":"    {"},
{"lineNum":" 1496","line":"        return __base::__map_.size();"},
{"lineNum":" 1497","line":"    }"},
{"lineNum":" 1498","line":""},
{"lineNum":" 1499","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1500","line":"    size_type __front_spare() const"},
{"lineNum":" 1501","line":"    {"},
{"lineNum":" 1502","line":"        return __base::__start_;","class":"linePartCov","hits":"1","order":"253","possible_hits":"22",},
{"lineNum":" 1503","line":"    }"},
{"lineNum":" 1504","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1505","line":"    size_type __front_spare_blocks() const {"},
{"lineNum":" 1506","line":"      return __front_spare() / __base::__block_size;"},
{"lineNum":" 1507","line":"    }"},
{"lineNum":" 1508","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1509","line":"    size_type __back_spare() const"},
{"lineNum":" 1510","line":"    {"},
{"lineNum":" 1511","line":"        return __capacity() - (__base::__start_ + __base::size());","class":"linePartCov","hits":"2","order":"249","possible_hits":"451",},
{"lineNum":" 1512","line":"    }"},
{"lineNum":" 1513","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1514","line":"    size_type __back_spare_blocks() const {"},
{"lineNum":" 1515","line":"      return __back_spare() / __base::__block_size;"},
{"lineNum":" 1516","line":"    }"},
{"lineNum":" 1517","line":""},
{"lineNum":" 1518","line":" private:"},
{"lineNum":" 1519","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1520","line":"    bool __maybe_remove_front_spare(bool __keep_one = true) {"},
{"lineNum":" 1521","line":"      if (__front_spare_blocks() >= 2 || (!__keep_one && __front_spare_blocks())) {"},
{"lineNum":" 1522","line":"        __alloc_traits::deallocate(__base::__alloc(), __base::__map_.front(),"},
{"lineNum":" 1523","line":"                                   __base::__block_size);"},
{"lineNum":" 1524","line":"        __base::__map_.pop_front();"},
{"lineNum":" 1525","line":"        __base::__start_ -= __base::__block_size;"},
{"lineNum":" 1526","line":"        return true;"},
{"lineNum":" 1527","line":"      }"},
{"lineNum":" 1528","line":"      return false;"},
{"lineNum":" 1529","line":"    }"},
{"lineNum":" 1530","line":""},
{"lineNum":" 1531","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1532","line":"    bool __maybe_remove_back_spare(bool __keep_one = true) {","class":"linePartCov","hits":"1","order":"296","possible_hits":"5",},
{"lineNum":" 1533","line":"      if (__back_spare_blocks() >= 2 || (!__keep_one && __back_spare_blocks())) {","class":"linePartCov","hits":"2","order":"297","possible_hits":"410",},
{"lineNum":" 1534","line":"        __alloc_traits::deallocate(__base::__alloc(), __base::__map_.back(),","class":"lineNoCov","hits":"0","possible_hits":"382",},
{"lineNum":" 1535","line":"                                   __base::__block_size);"},
{"lineNum":" 1536","line":"        __base::__map_.pop_back();"},
{"lineNum":" 1537","line":"        return true;"},
{"lineNum":" 1538","line":"      }"},
{"lineNum":" 1539","line":"      return false;","class":"linePartCov","hits":"1","order":"298","possible_hits":"5",},
{"lineNum":" 1540","line":"    }","class":"linePartCov","hits":"1","order":"299","possible_hits":"10",},
{"lineNum":" 1541","line":""},
{"lineNum":" 1542","line":"    template <class _InpIter>"},
{"lineNum":" 1543","line":"        void __append(_InpIter __f, _InpIter __l,"},
{"lineNum":" 1544","line":"                 typename enable_if<__is_cpp17_input_iterator<_InpIter>::value &&"},
{"lineNum":" 1545","line":"                                   !__is_cpp17_forward_iterator<_InpIter>::value>::type* = 0);"},
{"lineNum":" 1546","line":"    template <class _ForIter>"},
{"lineNum":" 1547","line":"        void __append(_ForIter __f, _ForIter __l,"},
{"lineNum":" 1548","line":"                      typename enable_if<__is_cpp17_forward_iterator<_ForIter>::value>::type* = 0);"},
{"lineNum":" 1549","line":"    void __append(size_type __n);"},
{"lineNum":" 1550","line":"    void __append(size_type __n, const value_type& __v);"},
{"lineNum":" 1551","line":"    void __erase_to_end(const_iterator __f);"},
{"lineNum":" 1552","line":"    void __add_front_capacity();"},
{"lineNum":" 1553","line":"    void __add_front_capacity(size_type __n);"},
{"lineNum":" 1554","line":"    void __add_back_capacity();"},
{"lineNum":" 1555","line":"    void __add_back_capacity(size_type __n);"},
{"lineNum":" 1556","line":"    iterator __move_and_check(iterator __f, iterator __l, iterator __r,"},
{"lineNum":" 1557","line":"                              const_pointer& __vt);"},
{"lineNum":" 1558","line":"    iterator __move_backward_and_check(iterator __f, iterator __l, iterator __r,"},
{"lineNum":" 1559","line":"                                       const_pointer& __vt);"},
{"lineNum":" 1560","line":"    void __move_construct_and_check(iterator __f, iterator __l,"},
{"lineNum":" 1561","line":"                                    iterator __r, const_pointer& __vt);"},
{"lineNum":" 1562","line":"    void __move_construct_backward_and_check(iterator __f, iterator __l,"},
{"lineNum":" 1563","line":"                                             iterator __r, const_pointer& __vt);"},
{"lineNum":" 1564","line":""},
{"lineNum":" 1565","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1566","line":"    void __copy_assign_alloc(const deque& __c)"},
{"lineNum":" 1567","line":"        {__copy_assign_alloc(__c, integral_constant<bool,"},
{"lineNum":" 1568","line":"                      __alloc_traits::propagate_on_container_copy_assignment::value>());}"},
{"lineNum":" 1569","line":""},
{"lineNum":" 1570","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1571","line":"    void __copy_assign_alloc(const deque& __c, true_type)"},
{"lineNum":" 1572","line":"        {"},
{"lineNum":" 1573","line":"            if (__base::__alloc() != __c.__alloc())"},
{"lineNum":" 1574","line":"            {"},
{"lineNum":" 1575","line":"                clear();"},
{"lineNum":" 1576","line":"                shrink_to_fit();"},
{"lineNum":" 1577","line":"            }"},
{"lineNum":" 1578","line":"            __base::__alloc() = __c.__alloc();"},
{"lineNum":" 1579","line":"            __base::__map_.__alloc() = __c.__map_.__alloc();"},
{"lineNum":" 1580","line":"        }"},
{"lineNum":" 1581","line":""},
{"lineNum":" 1582","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1583","line":"    void __copy_assign_alloc(const deque&, false_type)"},
{"lineNum":" 1584","line":"        {}"},
{"lineNum":" 1585","line":""},
{"lineNum":" 1586","line":"    void __move_assign(deque& __c, true_type)"},
{"lineNum":" 1587","line":"        _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value);"},
{"lineNum":" 1588","line":"    void __move_assign(deque& __c, false_type);"},
{"lineNum":" 1589","line":"};"},
{"lineNum":" 1590","line":""},
{"lineNum":" 1591","line":"#ifndef _LIBCPP_HAS_NO_DEDUCTION_GUIDES"},
{"lineNum":" 1592","line":"template<class _InputIterator,"},
{"lineNum":" 1593","line":"         class _Alloc = allocator<__iter_value_type<_InputIterator>>,"},
{"lineNum":" 1594","line":"         class = _EnableIf<__is_allocator<_Alloc>::value>"},
{"lineNum":" 1595","line":"         >"},
{"lineNum":" 1596","line":"deque(_InputIterator, _InputIterator)"},
{"lineNum":" 1597","line":"  -> deque<__iter_value_type<_InputIterator>, _Alloc>;"},
{"lineNum":" 1598","line":""},
{"lineNum":" 1599","line":"template<class _InputIterator,"},
{"lineNum":" 1600","line":"         class _Alloc,"},
{"lineNum":" 1601","line":"         class = _EnableIf<__is_allocator<_Alloc>::value>"},
{"lineNum":" 1602","line":"         >"},
{"lineNum":" 1603","line":"deque(_InputIterator, _InputIterator, _Alloc)"},
{"lineNum":" 1604","line":"  -> deque<__iter_value_type<_InputIterator>, _Alloc>;"},
{"lineNum":" 1605","line":"#endif"},
{"lineNum":" 1606","line":""},
{"lineNum":" 1607","line":""},
{"lineNum":" 1608","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1609","line":"deque<_Tp, _Allocator>::deque(size_type __n)"},
{"lineNum":" 1610","line":"{"},
{"lineNum":" 1611","line":"    if (__n > 0)"},
{"lineNum":" 1612","line":"        __append(__n);"},
{"lineNum":" 1613","line":"}"},
{"lineNum":" 1614","line":""},
{"lineNum":" 1615","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 1616","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1617","line":"deque<_Tp, _Allocator>::deque(size_type __n, const _Allocator& __a)"},
{"lineNum":" 1618","line":"    : __base(__a)"},
{"lineNum":" 1619","line":"{"},
{"lineNum":" 1620","line":"    if (__n > 0)"},
{"lineNum":" 1621","line":"        __append(__n);"},
{"lineNum":" 1622","line":"}"},
{"lineNum":" 1623","line":"#endif"},
{"lineNum":" 1624","line":""},
{"lineNum":" 1625","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1626","line":"deque<_Tp, _Allocator>::deque(size_type __n, const value_type& __v)"},
{"lineNum":" 1627","line":"{"},
{"lineNum":" 1628","line":"    if (__n > 0)"},
{"lineNum":" 1629","line":"        __append(__n, __v);"},
{"lineNum":" 1630","line":"}"},
{"lineNum":" 1631","line":""},
{"lineNum":" 1632","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1633","line":"deque<_Tp, _Allocator>::deque(size_type __n, const value_type& __v, const allocator_type& __a)"},
{"lineNum":" 1634","line":"    : __base(__a)"},
{"lineNum":" 1635","line":"{"},
{"lineNum":" 1636","line":"    if (__n > 0)"},
{"lineNum":" 1637","line":"        __append(__n, __v);"},
{"lineNum":" 1638","line":"}"},
{"lineNum":" 1639","line":""},
{"lineNum":" 1640","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1641","line":"template <class _InputIter>"},
{"lineNum":" 1642","line":"deque<_Tp, _Allocator>::deque(_InputIter __f, _InputIter __l,"},
{"lineNum":" 1643","line":"              typename enable_if<__is_cpp17_input_iterator<_InputIter>::value>::type*)"},
{"lineNum":" 1644","line":"{"},
{"lineNum":" 1645","line":"    __append(__f, __l);"},
{"lineNum":" 1646","line":"}"},
{"lineNum":" 1647","line":""},
{"lineNum":" 1648","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1649","line":"template <class _InputIter>"},
{"lineNum":" 1650","line":"deque<_Tp, _Allocator>::deque(_InputIter __f, _InputIter __l, const allocator_type& __a,"},
{"lineNum":" 1651","line":"              typename enable_if<__is_cpp17_input_iterator<_InputIter>::value>::type*)"},
{"lineNum":" 1652","line":"    : __base(__a)"},
{"lineNum":" 1653","line":"{"},
{"lineNum":" 1654","line":"    __append(__f, __l);"},
{"lineNum":" 1655","line":"}"},
{"lineNum":" 1656","line":""},
{"lineNum":" 1657","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1658","line":"deque<_Tp, _Allocator>::deque(const deque& __c)"},
{"lineNum":" 1659","line":"    : __base(__alloc_traits::select_on_container_copy_construction(__c.__alloc()))"},
{"lineNum":" 1660","line":"{"},
{"lineNum":" 1661","line":"    __append(__c.begin(), __c.end());"},
{"lineNum":" 1662","line":"}"},
{"lineNum":" 1663","line":""},
{"lineNum":" 1664","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1665","line":"deque<_Tp, _Allocator>::deque(const deque& __c, const __identity_t<allocator_type>& __a)"},
{"lineNum":" 1666","line":"    : __base(__a)"},
{"lineNum":" 1667","line":"{"},
{"lineNum":" 1668","line":"    __append(__c.begin(), __c.end());"},
{"lineNum":" 1669","line":"}"},
{"lineNum":" 1670","line":""},
{"lineNum":" 1671","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1672","line":"deque<_Tp, _Allocator>&"},
{"lineNum":" 1673","line":"deque<_Tp, _Allocator>::operator=(const deque& __c)"},
{"lineNum":" 1674","line":"{"},
{"lineNum":" 1675","line":"    if (this != &__c)"},
{"lineNum":" 1676","line":"    {"},
{"lineNum":" 1677","line":"        __copy_assign_alloc(__c);"},
{"lineNum":" 1678","line":"        assign(__c.begin(), __c.end());"},
{"lineNum":" 1679","line":"    }"},
{"lineNum":" 1680","line":"    return *this;"},
{"lineNum":" 1681","line":"}"},
{"lineNum":" 1682","line":""},
{"lineNum":" 1683","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1684","line":""},
{"lineNum":" 1685","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1686","line":"deque<_Tp, _Allocator>::deque(initializer_list<value_type> __il)"},
{"lineNum":" 1687","line":"{"},
{"lineNum":" 1688","line":"    __append(__il.begin(), __il.end());"},
{"lineNum":" 1689","line":"}"},
{"lineNum":" 1690","line":""},
{"lineNum":" 1691","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1692","line":"deque<_Tp, _Allocator>::deque(initializer_list<value_type> __il, const allocator_type& __a)"},
{"lineNum":" 1693","line":"    : __base(__a)"},
{"lineNum":" 1694","line":"{"},
{"lineNum":" 1695","line":"    __append(__il.begin(), __il.end());"},
{"lineNum":" 1696","line":"}"},
{"lineNum":" 1697","line":""},
{"lineNum":" 1698","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1699","line":"inline"},
{"lineNum":" 1700","line":"deque<_Tp, _Allocator>::deque(deque&& __c)"},
{"lineNum":" 1701","line":"    _NOEXCEPT_(is_nothrow_move_constructible<__base>::value)"},
{"lineNum":" 1702","line":"    : __base(_VSTD::move(__c))"},
{"lineNum":" 1703","line":"{"},
{"lineNum":" 1704","line":"}"},
{"lineNum":" 1705","line":""},
{"lineNum":" 1706","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1707","line":"inline"},
{"lineNum":" 1708","line":"deque<_Tp, _Allocator>::deque(deque&& __c, const __identity_t<allocator_type>& __a)"},
{"lineNum":" 1709","line":"    : __base(_VSTD::move(__c), __a)"},
{"lineNum":" 1710","line":"{"},
{"lineNum":" 1711","line":"    if (__a != __c.__alloc())"},
{"lineNum":" 1712","line":"    {"},
{"lineNum":" 1713","line":"        typedef move_iterator<iterator> _Ip;"},
{"lineNum":" 1714","line":"        assign(_Ip(__c.begin()), _Ip(__c.end()));"},
{"lineNum":" 1715","line":"    }"},
{"lineNum":" 1716","line":"}"},
{"lineNum":" 1717","line":""},
{"lineNum":" 1718","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1719","line":"inline"},
{"lineNum":" 1720","line":"deque<_Tp, _Allocator>&"},
{"lineNum":" 1721","line":"deque<_Tp, _Allocator>::operator=(deque&& __c)"},
{"lineNum":" 1722","line":"        _NOEXCEPT_(__alloc_traits::propagate_on_container_move_assignment::value &&"},
{"lineNum":" 1723","line":"                   is_nothrow_move_assignable<allocator_type>::value)"},
{"lineNum":" 1724","line":"{"},
{"lineNum":" 1725","line":"    __move_assign(__c, integral_constant<bool,"},
{"lineNum":" 1726","line":"          __alloc_traits::propagate_on_container_move_assignment::value>());"},
{"lineNum":" 1727","line":"    return *this;"},
{"lineNum":" 1728","line":"}"},
{"lineNum":" 1729","line":""},
{"lineNum":" 1730","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1731","line":"void"},
{"lineNum":" 1732","line":"deque<_Tp, _Allocator>::__move_assign(deque& __c, false_type)"},
{"lineNum":" 1733","line":"{"},
{"lineNum":" 1734","line":"    if (__base::__alloc() != __c.__alloc())"},
{"lineNum":" 1735","line":"    {"},
{"lineNum":" 1736","line":"        typedef move_iterator<iterator> _Ip;"},
{"lineNum":" 1737","line":"        assign(_Ip(__c.begin()), _Ip(__c.end()));"},
{"lineNum":" 1738","line":"    }"},
{"lineNum":" 1739","line":"    else"},
{"lineNum":" 1740","line":"        __move_assign(__c, true_type());"},
{"lineNum":" 1741","line":"}"},
{"lineNum":" 1742","line":""},
{"lineNum":" 1743","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1744","line":"void"},
{"lineNum":" 1745","line":"deque<_Tp, _Allocator>::__move_assign(deque& __c, true_type)"},
{"lineNum":" 1746","line":"    _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value)"},
{"lineNum":" 1747","line":"{"},
{"lineNum":" 1748","line":"    clear();"},
{"lineNum":" 1749","line":"    shrink_to_fit();"},
{"lineNum":" 1750","line":"    __base::__move_assign(__c);"},
{"lineNum":" 1751","line":"}"},
{"lineNum":" 1752","line":""},
{"lineNum":" 1753","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 1754","line":""},
{"lineNum":" 1755","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1756","line":"template <class _InputIter>"},
{"lineNum":" 1757","line":"void"},
{"lineNum":" 1758","line":"deque<_Tp, _Allocator>::assign(_InputIter __f, _InputIter __l,"},
{"lineNum":" 1759","line":"                               typename enable_if<__is_cpp17_input_iterator<_InputIter>::value &&"},
{"lineNum":" 1760","line":"                                                 !__is_cpp17_random_access_iterator<_InputIter>::value>::type*)"},
{"lineNum":" 1761","line":"{"},
{"lineNum":" 1762","line":"    iterator __i = __base::begin();"},
{"lineNum":" 1763","line":"    iterator __e = __base::end();"},
{"lineNum":" 1764","line":"    for (; __f != __l && __i != __e; ++__f, (void) ++__i)"},
{"lineNum":" 1765","line":"        *__i = *__f;"},
{"lineNum":" 1766","line":"    if (__f != __l)"},
{"lineNum":" 1767","line":"        __append(__f, __l);"},
{"lineNum":" 1768","line":"    else"},
{"lineNum":" 1769","line":"        __erase_to_end(__i);"},
{"lineNum":" 1770","line":"}"},
{"lineNum":" 1771","line":""},
{"lineNum":" 1772","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1773","line":"template <class _RAIter>"},
{"lineNum":" 1774","line":"void"},
{"lineNum":" 1775","line":"deque<_Tp, _Allocator>::assign(_RAIter __f, _RAIter __l,"},
{"lineNum":" 1776","line":"                               typename enable_if<__is_cpp17_random_access_iterator<_RAIter>::value>::type*)"},
{"lineNum":" 1777","line":"{"},
{"lineNum":" 1778","line":"    if (static_cast<size_type>(__l - __f) > __base::size())"},
{"lineNum":" 1779","line":"    {"},
{"lineNum":" 1780","line":"        _RAIter __m = __f + __base::size();"},
{"lineNum":" 1781","line":"        _VSTD::copy(__f, __m, __base::begin());"},
{"lineNum":" 1782","line":"        __append(__m, __l);"},
{"lineNum":" 1783","line":"    }"},
{"lineNum":" 1784","line":"    else"},
{"lineNum":" 1785","line":"        __erase_to_end(_VSTD::copy(__f, __l, __base::begin()));"},
{"lineNum":" 1786","line":"}"},
{"lineNum":" 1787","line":""},
{"lineNum":" 1788","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1789","line":"void"},
{"lineNum":" 1790","line":"deque<_Tp, _Allocator>::assign(size_type __n, const value_type& __v)"},
{"lineNum":" 1791","line":"{"},
{"lineNum":" 1792","line":"    if (__n > __base::size())"},
{"lineNum":" 1793","line":"    {"},
{"lineNum":" 1794","line":"        _VSTD::fill_n(__base::begin(), __base::size(), __v);"},
{"lineNum":" 1795","line":"        __n -= __base::size();"},
{"lineNum":" 1796","line":"        __append(__n, __v);"},
{"lineNum":" 1797","line":"    }"},
{"lineNum":" 1798","line":"    else"},
{"lineNum":" 1799","line":"        __erase_to_end(_VSTD::fill_n(__base::begin(), __n, __v));"},
{"lineNum":" 1800","line":"}"},
{"lineNum":" 1801","line":""},
{"lineNum":" 1802","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1803","line":"inline"},
{"lineNum":" 1804","line":"_Allocator"},
{"lineNum":" 1805","line":"deque<_Tp, _Allocator>::get_allocator() const _NOEXCEPT"},
{"lineNum":" 1806","line":"{"},
{"lineNum":" 1807","line":"    return __base::__alloc();"},
{"lineNum":" 1808","line":"}"},
{"lineNum":" 1809","line":""},
{"lineNum":" 1810","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1811","line":"void"},
{"lineNum":" 1812","line":"deque<_Tp, _Allocator>::resize(size_type __n)"},
{"lineNum":" 1813","line":"{"},
{"lineNum":" 1814","line":"    if (__n > __base::size())"},
{"lineNum":" 1815","line":"        __append(__n - __base::size());"},
{"lineNum":" 1816","line":"    else if (__n < __base::size())"},
{"lineNum":" 1817","line":"        __erase_to_end(__base::begin() + __n);"},
{"lineNum":" 1818","line":"}"},
{"lineNum":" 1819","line":""},
{"lineNum":" 1820","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1821","line":"void"},
{"lineNum":" 1822","line":"deque<_Tp, _Allocator>::resize(size_type __n, const value_type& __v)"},
{"lineNum":" 1823","line":"{"},
{"lineNum":" 1824","line":"    if (__n > __base::size())"},
{"lineNum":" 1825","line":"        __append(__n - __base::size(), __v);"},
{"lineNum":" 1826","line":"    else if (__n < __base::size())"},
{"lineNum":" 1827","line":"        __erase_to_end(__base::begin() + __n);"},
{"lineNum":" 1828","line":"}"},
{"lineNum":" 1829","line":""},
{"lineNum":" 1830","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1831","line":"void"},
{"lineNum":" 1832","line":"deque<_Tp, _Allocator>::shrink_to_fit() _NOEXCEPT"},
{"lineNum":" 1833","line":"{"},
{"lineNum":" 1834","line":"    allocator_type& __a = __base::__alloc();"},
{"lineNum":" 1835","line":"    if (empty())"},
{"lineNum":" 1836","line":"    {"},
{"lineNum":" 1837","line":"        while (__base::__map_.size() > 0)"},
{"lineNum":" 1838","line":"        {"},
{"lineNum":" 1839","line":"            __alloc_traits::deallocate(__a, __base::__map_.back(), __base::__block_size);"},
{"lineNum":" 1840","line":"            __base::__map_.pop_back();"},
{"lineNum":" 1841","line":"        }"},
{"lineNum":" 1842","line":"        __base::__start_ = 0;"},
{"lineNum":" 1843","line":"    }"},
{"lineNum":" 1844","line":"    else"},
{"lineNum":" 1845","line":"    {"},
{"lineNum":" 1846","line":"      __maybe_remove_front_spare(/*__keep_one=*/false);"},
{"lineNum":" 1847","line":"      __maybe_remove_back_spare(/*__keep_one=*/false);"},
{"lineNum":" 1848","line":"    }"},
{"lineNum":" 1849","line":"    __base::__map_.shrink_to_fit();"},
{"lineNum":" 1850","line":"}"},
{"lineNum":" 1851","line":""},
{"lineNum":" 1852","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1853","line":"inline"},
{"lineNum":" 1854","line":"typename deque<_Tp, _Allocator>::reference"},
{"lineNum":" 1855","line":"deque<_Tp, _Allocator>::operator[](size_type __i) _NOEXCEPT"},
{"lineNum":" 1856","line":"{"},
{"lineNum":" 1857","line":"    size_type __p = __base::__start_ + __i;"},
{"lineNum":" 1858","line":"    return *(*(__base::__map_.begin() + __p / __base::__block_size) + __p % __base::__block_size);"},
{"lineNum":" 1859","line":"}"},
{"lineNum":" 1860","line":""},
{"lineNum":" 1861","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1862","line":"inline"},
{"lineNum":" 1863","line":"typename deque<_Tp, _Allocator>::const_reference"},
{"lineNum":" 1864","line":"deque<_Tp, _Allocator>::operator[](size_type __i) const _NOEXCEPT"},
{"lineNum":" 1865","line":"{"},
{"lineNum":" 1866","line":"    size_type __p = __base::__start_ + __i;"},
{"lineNum":" 1867","line":"    return *(*(__base::__map_.begin() + __p / __base::__block_size) + __p % __base::__block_size);"},
{"lineNum":" 1868","line":"}"},
{"lineNum":" 1869","line":""},
{"lineNum":" 1870","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1871","line":"inline"},
{"lineNum":" 1872","line":"typename deque<_Tp, _Allocator>::reference"},
{"lineNum":" 1873","line":"deque<_Tp, _Allocator>::at(size_type __i)"},
{"lineNum":" 1874","line":"{"},
{"lineNum":" 1875","line":"    if (__i >= __base::size())"},
{"lineNum":" 1876","line":"        __base::__throw_out_of_range();"},
{"lineNum":" 1877","line":"    size_type __p = __base::__start_ + __i;"},
{"lineNum":" 1878","line":"    return *(*(__base::__map_.begin() + __p / __base::__block_size) + __p % __base::__block_size);"},
{"lineNum":" 1879","line":"}"},
{"lineNum":" 1880","line":""},
{"lineNum":" 1881","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1882","line":"inline"},
{"lineNum":" 1883","line":"typename deque<_Tp, _Allocator>::const_reference"},
{"lineNum":" 1884","line":"deque<_Tp, _Allocator>::at(size_type __i) const"},
{"lineNum":" 1885","line":"{"},
{"lineNum":" 1886","line":"    if (__i >= __base::size())"},
{"lineNum":" 1887","line":"        __base::__throw_out_of_range();"},
{"lineNum":" 1888","line":"    size_type __p = __base::__start_ + __i;"},
{"lineNum":" 1889","line":"    return *(*(__base::__map_.begin() + __p / __base::__block_size) + __p % __base::__block_size);"},
{"lineNum":" 1890","line":"}"},
{"lineNum":" 1891","line":""},
{"lineNum":" 1892","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1893","line":"inline"},
{"lineNum":" 1894","line":"typename deque<_Tp, _Allocator>::reference"},
{"lineNum":" 1895","line":"deque<_Tp, _Allocator>::front() _NOEXCEPT"},
{"lineNum":" 1896","line":"{"},
{"lineNum":" 1897","line":"    return *(*(__base::__map_.begin() + __base::__start_ / __base::__block_size)"},
{"lineNum":" 1898","line":"                                      + __base::__start_ % __base::__block_size);"},
{"lineNum":" 1899","line":"}"},
{"lineNum":" 1900","line":""},
{"lineNum":" 1901","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1902","line":"inline"},
{"lineNum":" 1903","line":"typename deque<_Tp, _Allocator>::const_reference"},
{"lineNum":" 1904","line":"deque<_Tp, _Allocator>::front() const _NOEXCEPT"},
{"lineNum":" 1905","line":"{"},
{"lineNum":" 1906","line":"    return *(*(__base::__map_.begin() + __base::__start_ / __base::__block_size)"},
{"lineNum":" 1907","line":"                                      + __base::__start_ % __base::__block_size);"},
{"lineNum":" 1908","line":"}"},
{"lineNum":" 1909","line":""},
{"lineNum":" 1910","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1911","line":"inline"},
{"lineNum":" 1912","line":"typename deque<_Tp, _Allocator>::reference"},
{"lineNum":" 1913","line":"deque<_Tp, _Allocator>::back() _NOEXCEPT"},
{"lineNum":" 1914","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1915","line":"    size_type __p = __base::size() + __base::__start_ - 1;","class":"linePartCov","hits":"11","order":"291","possible_hits":"1344",},
{"lineNum":" 1916","line":"    return *(*(__base::__map_.begin() + __p / __base::__block_size) + __p % __base::__block_size);","class":"linePartCov","hits":"11","order":"292","possible_hits":"915",},
{"lineNum":" 1917","line":"}"},
{"lineNum":" 1918","line":""},
{"lineNum":" 1919","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1920","line":"inline"},
{"lineNum":" 1921","line":"typename deque<_Tp, _Allocator>::const_reference"},
{"lineNum":" 1922","line":"deque<_Tp, _Allocator>::back() const _NOEXCEPT"},
{"lineNum":" 1923","line":"{"},
{"lineNum":" 1924","line":"    size_type __p = __base::size() + __base::__start_ - 1;"},
{"lineNum":" 1925","line":"    return *(*(__base::__map_.begin() + __p / __base::__block_size) + __p % __base::__block_size);"},
{"lineNum":" 1926","line":"}"},
{"lineNum":" 1927","line":""},
{"lineNum":" 1928","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1929","line":"void"},
{"lineNum":" 1930","line":"deque<_Tp, _Allocator>::push_back(const value_type& __v)"},
{"lineNum":" 1931","line":"{","class":"lineCov","hits":"1","order":"246","possible_hits":"1",},
{"lineNum":" 1932","line":"    allocator_type& __a = __base::__alloc();"},
{"lineNum":" 1933","line":"    if (__back_spare() == 0)","class":"linePartCov","hits":"1","order":"250","possible_hits":"25",},
{"lineNum":" 1934","line":"        __add_back_capacity();","class":"linePartCov","hits":"1","order":"251","possible_hits":"49",},
{"lineNum":" 1935","line":"    // __back_spare() >= 1"},
{"lineNum":" 1936","line":"    __alloc_traits::construct(__a, _VSTD::addressof(*__base::end()), __v);"},
{"lineNum":" 1937","line":"    ++__base::size();","class":"linePartCov","hits":"1","order":"275","possible_hits":"49",},
{"lineNum":" 1938","line":"}","class":"linePartCov","hits":"1","order":"276","possible_hits":"2",},
{"lineNum":" 1939","line":""},
{"lineNum":" 1940","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1941","line":"void"},
{"lineNum":" 1942","line":"deque<_Tp, _Allocator>::push_front(const value_type& __v)"},
{"lineNum":" 1943","line":"{"},
{"lineNum":" 1944","line":"    allocator_type& __a = __base::__alloc();"},
{"lineNum":" 1945","line":"    if (__front_spare() == 0)"},
{"lineNum":" 1946","line":"        __add_front_capacity();"},
{"lineNum":" 1947","line":"    // __front_spare() >= 1"},
{"lineNum":" 1948","line":"    __alloc_traits::construct(__a, _VSTD::addressof(*--__base::begin()), __v);"},
{"lineNum":" 1949","line":"    --__base::__start_;"},
{"lineNum":" 1950","line":"    ++__base::size();"},
{"lineNum":" 1951","line":"}"},
{"lineNum":" 1952","line":""},
{"lineNum":" 1953","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1954","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1955","line":"void"},
{"lineNum":" 1956","line":"deque<_Tp, _Allocator>::push_back(value_type&& __v)"},
{"lineNum":" 1957","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1958","line":"    allocator_type& __a = __base::__alloc();"},
{"lineNum":" 1959","line":"    if (__back_spare() == 0)","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":" 1960","line":"        __add_back_capacity();","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":" 1961","line":"    // __back_spare() >= 1"},
{"lineNum":" 1962","line":"    __alloc_traits::construct(__a, _VSTD::addressof(*__base::end()), _VSTD::move(__v));"},
{"lineNum":" 1963","line":"    ++__base::size();","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":" 1964","line":"}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1965","line":""},
{"lineNum":" 1966","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1967","line":"template <class... _Args>"},
{"lineNum":" 1968","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 1969","line":"typename deque<_Tp, _Allocator>::reference"},
{"lineNum":" 1970","line":"#else"},
{"lineNum":" 1971","line":"void"},
{"lineNum":" 1972","line":"#endif"},
{"lineNum":" 1973","line":"deque<_Tp, _Allocator>::emplace_back(_Args&&... __args)"},
{"lineNum":" 1974","line":"{","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1975","line":"    allocator_type& __a = __base::__alloc();"},
{"lineNum":" 1976","line":"    if (__back_spare() == 0)","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 1977","line":"        __add_back_capacity();","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 1978","line":"    // __back_spare() >= 1"},
{"lineNum":" 1979","line":"    __alloc_traits::construct(__a, _VSTD::addressof(*__base::end()),"},
{"lineNum":" 1980","line":"                              _VSTD::forward<_Args>(__args)...);"},
{"lineNum":" 1981","line":"    ++__base::size();","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 1982","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 1983","line":"    return *--__base::end();","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":" 1984","line":"#endif"},
{"lineNum":" 1985","line":"}"},
{"lineNum":" 1986","line":""},
{"lineNum":" 1987","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 1988","line":"void"},
{"lineNum":" 1989","line":"deque<_Tp, _Allocator>::push_front(value_type&& __v)"},
{"lineNum":" 1990","line":"{"},
{"lineNum":" 1991","line":"    allocator_type& __a = __base::__alloc();"},
{"lineNum":" 1992","line":"    if (__front_spare() == 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1993","line":"        __add_front_capacity();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1994","line":"    // __front_spare() >= 1"},
{"lineNum":" 1995","line":"    __alloc_traits::construct(__a, _VSTD::addressof(*--__base::begin()), _VSTD::move(__v));"},
{"lineNum":" 1996","line":"    --__base::__start_;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1997","line":"    ++__base::size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1998","line":"}"},
{"lineNum":" 1999","line":""},
{"lineNum":" 2000","line":""},
{"lineNum":" 2001","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2002","line":"template <class... _Args>"},
{"lineNum":" 2003","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 2004","line":"typename deque<_Tp, _Allocator>::reference"},
{"lineNum":" 2005","line":"#else"},
{"lineNum":" 2006","line":"void"},
{"lineNum":" 2007","line":"#endif"},
{"lineNum":" 2008","line":"deque<_Tp, _Allocator>::emplace_front(_Args&&... __args)"},
{"lineNum":" 2009","line":"{"},
{"lineNum":" 2010","line":"    allocator_type& __a = __base::__alloc();"},
{"lineNum":" 2011","line":"    if (__front_spare() == 0)"},
{"lineNum":" 2012","line":"        __add_front_capacity();"},
{"lineNum":" 2013","line":"    // __front_spare() >= 1"},
{"lineNum":" 2014","line":"    __alloc_traits::construct(__a, _VSTD::addressof(*--__base::begin()), _VSTD::forward<_Args>(__args)...);"},
{"lineNum":" 2015","line":"    --__base::__start_;"},
{"lineNum":" 2016","line":"    ++__base::size();"},
{"lineNum":" 2017","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 2018","line":"    return *__base::begin();"},
{"lineNum":" 2019","line":"#endif"},
{"lineNum":" 2020","line":"}"},
{"lineNum":" 2021","line":""},
{"lineNum":" 2022","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2023","line":"typename deque<_Tp, _Allocator>::iterator"},
{"lineNum":" 2024","line":"deque<_Tp, _Allocator>::insert(const_iterator __p, value_type&& __v)"},
{"lineNum":" 2025","line":"{"},
{"lineNum":" 2026","line":"    size_type __pos = __p - __base::begin();"},
{"lineNum":" 2027","line":"    size_type __to_end = __base::size() - __pos;"},
{"lineNum":" 2028","line":"    allocator_type& __a = __base::__alloc();"},
{"lineNum":" 2029","line":"    if (__pos < __to_end)"},
{"lineNum":" 2030","line":"    {   // insert by shifting things backward"},
{"lineNum":" 2031","line":"        if (__front_spare() == 0)"},
{"lineNum":" 2032","line":"            __add_front_capacity();"},
{"lineNum":" 2033","line":"        // __front_spare() >= 1"},
{"lineNum":" 2034","line":"        if (__pos == 0)"},
{"lineNum":" 2035","line":"        {"},
{"lineNum":" 2036","line":"            __alloc_traits::construct(__a, _VSTD::addressof(*--__base::begin()), _VSTD::move(__v));"},
{"lineNum":" 2037","line":"            --__base::__start_;"},
{"lineNum":" 2038","line":"            ++__base::size();"},
{"lineNum":" 2039","line":"        }"},
{"lineNum":" 2040","line":"        else"},
{"lineNum":" 2041","line":"        {"},
{"lineNum":" 2042","line":"            iterator __b = __base::begin();"},
{"lineNum":" 2043","line":"            iterator __bm1 = _VSTD::prev(__b);"},
{"lineNum":" 2044","line":"            __alloc_traits::construct(__a, _VSTD::addressof(*__bm1), _VSTD::move(*__b));"},
{"lineNum":" 2045","line":"            --__base::__start_;"},
{"lineNum":" 2046","line":"            ++__base::size();"},
{"lineNum":" 2047","line":"            if (__pos > 1)"},
{"lineNum":" 2048","line":"                __b = _VSTD::move(_VSTD::next(__b), __b + __pos, __b);"},
{"lineNum":" 2049","line":"            *__b = _VSTD::move(__v);"},
{"lineNum":" 2050","line":"        }"},
{"lineNum":" 2051","line":"    }"},
{"lineNum":" 2052","line":"    else"},
{"lineNum":" 2053","line":"    {   // insert by shifting things forward"},
{"lineNum":" 2054","line":"        if (__back_spare() == 0)"},
{"lineNum":" 2055","line":"            __add_back_capacity();"},
{"lineNum":" 2056","line":"        // __back_capacity >= 1"},
{"lineNum":" 2057","line":"        size_type __de = __base::size() - __pos;"},
{"lineNum":" 2058","line":"        if (__de == 0)"},
{"lineNum":" 2059","line":"        {"},
{"lineNum":" 2060","line":"            __alloc_traits::construct(__a, _VSTD::addressof(*__base::end()), _VSTD::move(__v));"},
{"lineNum":" 2061","line":"            ++__base::size();"},
{"lineNum":" 2062","line":"        }"},
{"lineNum":" 2063","line":"        else"},
{"lineNum":" 2064","line":"        {"},
{"lineNum":" 2065","line":"            iterator __e = __base::end();"},
{"lineNum":" 2066","line":"            iterator __em1 = _VSTD::prev(__e);"},
{"lineNum":" 2067","line":"            __alloc_traits::construct(__a, _VSTD::addressof(*__e), _VSTD::move(*__em1));"},
{"lineNum":" 2068","line":"            ++__base::size();"},
{"lineNum":" 2069","line":"            if (__de > 1)"},
{"lineNum":" 2070","line":"                __e = _VSTD::move_backward(__e - __de, __em1, __e);"},
{"lineNum":" 2071","line":"            *--__e = _VSTD::move(__v);"},
{"lineNum":" 2072","line":"        }"},
{"lineNum":" 2073","line":"    }"},
{"lineNum":" 2074","line":"    return __base::begin() + __pos;"},
{"lineNum":" 2075","line":"}"},
{"lineNum":" 2076","line":""},
{"lineNum":" 2077","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2078","line":"template <class... _Args>"},
{"lineNum":" 2079","line":"typename deque<_Tp, _Allocator>::iterator"},
{"lineNum":" 2080","line":"deque<_Tp, _Allocator>::emplace(const_iterator __p, _Args&&... __args)"},
{"lineNum":" 2081","line":"{"},
{"lineNum":" 2082","line":"    size_type __pos = __p - __base::begin();"},
{"lineNum":" 2083","line":"    size_type __to_end = __base::size() - __pos;"},
{"lineNum":" 2084","line":"    allocator_type& __a = __base::__alloc();"},
{"lineNum":" 2085","line":"    if (__pos < __to_end)"},
{"lineNum":" 2086","line":"    {   // insert by shifting things backward"},
{"lineNum":" 2087","line":"        if (__front_spare() == 0)"},
{"lineNum":" 2088","line":"            __add_front_capacity();"},
{"lineNum":" 2089","line":"        // __front_spare() >= 1"},
{"lineNum":" 2090","line":"        if (__pos == 0)"},
{"lineNum":" 2091","line":"        {"},
{"lineNum":" 2092","line":"            __alloc_traits::construct(__a, _VSTD::addressof(*--__base::begin()), _VSTD::forward<_Args>(__args)...);"},
{"lineNum":" 2093","line":"            --__base::__start_;"},
{"lineNum":" 2094","line":"            ++__base::size();"},
{"lineNum":" 2095","line":"        }"},
{"lineNum":" 2096","line":"        else"},
{"lineNum":" 2097","line":"        {"},
{"lineNum":" 2098","line":"            __temp_value<value_type, _Allocator> __tmp(this->__alloc(), _VSTD::forward<_Args>(__args)...);"},
{"lineNum":" 2099","line":"            iterator __b = __base::begin();"},
{"lineNum":" 2100","line":"            iterator __bm1 = _VSTD::prev(__b);"},
{"lineNum":" 2101","line":"            __alloc_traits::construct(__a, _VSTD::addressof(*__bm1), _VSTD::move(*__b));"},
{"lineNum":" 2102","line":"            --__base::__start_;"},
{"lineNum":" 2103","line":"            ++__base::size();"},
{"lineNum":" 2104","line":"            if (__pos > 1)"},
{"lineNum":" 2105","line":"                __b = _VSTD::move(_VSTD::next(__b), __b + __pos, __b);"},
{"lineNum":" 2106","line":"            *__b = _VSTD::move(__tmp.get());"},
{"lineNum":" 2107","line":"        }"},
{"lineNum":" 2108","line":"    }"},
{"lineNum":" 2109","line":"    else"},
{"lineNum":" 2110","line":"    {   // insert by shifting things forward"},
{"lineNum":" 2111","line":"        if (__back_spare() == 0)"},
{"lineNum":" 2112","line":"            __add_back_capacity();"},
{"lineNum":" 2113","line":"        // __back_capacity >= 1"},
{"lineNum":" 2114","line":"        size_type __de = __base::size() - __pos;"},
{"lineNum":" 2115","line":"        if (__de == 0)"},
{"lineNum":" 2116","line":"        {"},
{"lineNum":" 2117","line":"            __alloc_traits::construct(__a, _VSTD::addressof(*__base::end()), _VSTD::forward<_Args>(__args)...);"},
{"lineNum":" 2118","line":"            ++__base::size();"},
{"lineNum":" 2119","line":"        }"},
{"lineNum":" 2120","line":"        else"},
{"lineNum":" 2121","line":"        {"},
{"lineNum":" 2122","line":"            __temp_value<value_type, _Allocator> __tmp(this->__alloc(), _VSTD::forward<_Args>(__args)...);"},
{"lineNum":" 2123","line":"            iterator __e = __base::end();"},
{"lineNum":" 2124","line":"            iterator __em1 = _VSTD::prev(__e);"},
{"lineNum":" 2125","line":"            __alloc_traits::construct(__a, _VSTD::addressof(*__e), _VSTD::move(*__em1));"},
{"lineNum":" 2126","line":"            ++__base::size();"},
{"lineNum":" 2127","line":"            if (__de > 1)"},
{"lineNum":" 2128","line":"                __e = _VSTD::move_backward(__e - __de, __em1, __e);"},
{"lineNum":" 2129","line":"            *--__e = _VSTD::move(__tmp.get());"},
{"lineNum":" 2130","line":"        }"},
{"lineNum":" 2131","line":"    }"},
{"lineNum":" 2132","line":"    return __base::begin() + __pos;"},
{"lineNum":" 2133","line":"}"},
{"lineNum":" 2134","line":""},
{"lineNum":" 2135","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 2136","line":""},
{"lineNum":" 2137","line":""},
{"lineNum":" 2138","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2139","line":"typename deque<_Tp, _Allocator>::iterator"},
{"lineNum":" 2140","line":"deque<_Tp, _Allocator>::insert(const_iterator __p, const value_type& __v)"},
{"lineNum":" 2141","line":"{"},
{"lineNum":" 2142","line":"    size_type __pos = __p - __base::begin();"},
{"lineNum":" 2143","line":"    size_type __to_end = __base::size() - __pos;"},
{"lineNum":" 2144","line":"    allocator_type& __a = __base::__alloc();"},
{"lineNum":" 2145","line":"    if (__pos < __to_end)"},
{"lineNum":" 2146","line":"    {   // insert by shifting things backward"},
{"lineNum":" 2147","line":"        if (__front_spare() == 0)"},
{"lineNum":" 2148","line":"            __add_front_capacity();"},
{"lineNum":" 2149","line":"        // __front_spare() >= 1"},
{"lineNum":" 2150","line":"        if (__pos == 0)"},
{"lineNum":" 2151","line":"        {"},
{"lineNum":" 2152","line":"            __alloc_traits::construct(__a, _VSTD::addressof(*--__base::begin()), __v);"},
{"lineNum":" 2153","line":"            --__base::__start_;"},
{"lineNum":" 2154","line":"            ++__base::size();"},
{"lineNum":" 2155","line":"        }"},
{"lineNum":" 2156","line":"        else"},
{"lineNum":" 2157","line":"        {"},
{"lineNum":" 2158","line":"            const_pointer __vt = pointer_traits<const_pointer>::pointer_to(__v);"},
{"lineNum":" 2159","line":"            iterator __b = __base::begin();"},
{"lineNum":" 2160","line":"            iterator __bm1 = _VSTD::prev(__b);"},
{"lineNum":" 2161","line":"            if (__vt == pointer_traits<const_pointer>::pointer_to(*__b))"},
{"lineNum":" 2162","line":"                __vt = pointer_traits<const_pointer>::pointer_to(*__bm1);"},
{"lineNum":" 2163","line":"            __alloc_traits::construct(__a, _VSTD::addressof(*__bm1), _VSTD::move(*__b));"},
{"lineNum":" 2164","line":"            --__base::__start_;"},
{"lineNum":" 2165","line":"            ++__base::size();"},
{"lineNum":" 2166","line":"            if (__pos > 1)"},
{"lineNum":" 2167","line":"                __b = __move_and_check(_VSTD::next(__b), __b + __pos, __b, __vt);"},
{"lineNum":" 2168","line":"            *__b = *__vt;"},
{"lineNum":" 2169","line":"        }"},
{"lineNum":" 2170","line":"    }"},
{"lineNum":" 2171","line":"    else"},
{"lineNum":" 2172","line":"    {   // insert by shifting things forward"},
{"lineNum":" 2173","line":"        if (__back_spare() == 0)"},
{"lineNum":" 2174","line":"            __add_back_capacity();"},
{"lineNum":" 2175","line":"        // __back_capacity >= 1"},
{"lineNum":" 2176","line":"        size_type __de = __base::size() - __pos;"},
{"lineNum":" 2177","line":"        if (__de == 0)"},
{"lineNum":" 2178","line":"        {"},
{"lineNum":" 2179","line":"            __alloc_traits::construct(__a, _VSTD::addressof(*__base::end()), __v);"},
{"lineNum":" 2180","line":"            ++__base::size();"},
{"lineNum":" 2181","line":"        }"},
{"lineNum":" 2182","line":"        else"},
{"lineNum":" 2183","line":"        {"},
{"lineNum":" 2184","line":"            const_pointer __vt = pointer_traits<const_pointer>::pointer_to(__v);"},
{"lineNum":" 2185","line":"            iterator __e = __base::end();"},
{"lineNum":" 2186","line":"            iterator __em1 = _VSTD::prev(__e);"},
{"lineNum":" 2187","line":"            if (__vt == pointer_traits<const_pointer>::pointer_to(*__em1))"},
{"lineNum":" 2188","line":"                __vt = pointer_traits<const_pointer>::pointer_to(*__e);"},
{"lineNum":" 2189","line":"            __alloc_traits::construct(__a, _VSTD::addressof(*__e), _VSTD::move(*__em1));"},
{"lineNum":" 2190","line":"            ++__base::size();"},
{"lineNum":" 2191","line":"            if (__de > 1)"},
{"lineNum":" 2192","line":"                __e = __move_backward_and_check(__e - __de, __em1, __e, __vt);"},
{"lineNum":" 2193","line":"            *--__e = *__vt;"},
{"lineNum":" 2194","line":"        }"},
{"lineNum":" 2195","line":"    }"},
{"lineNum":" 2196","line":"    return __base::begin() + __pos;"},
{"lineNum":" 2197","line":"}"},
{"lineNum":" 2198","line":""},
{"lineNum":" 2199","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2200","line":"typename deque<_Tp, _Allocator>::iterator"},
{"lineNum":" 2201","line":"deque<_Tp, _Allocator>::insert(const_iterator __p, size_type __n, const value_type& __v)"},
{"lineNum":" 2202","line":"{"},
{"lineNum":" 2203","line":"    size_type __pos = __p - __base::begin();"},
{"lineNum":" 2204","line":"    size_type __to_end = __base::size() - __pos;"},
{"lineNum":" 2205","line":"    allocator_type& __a = __base::__alloc();"},
{"lineNum":" 2206","line":"    if (__pos < __to_end)"},
{"lineNum":" 2207","line":"    {   // insert by shifting things backward"},
{"lineNum":" 2208","line":"        if (__n > __front_spare())"},
{"lineNum":" 2209","line":"            __add_front_capacity(__n - __front_spare());"},
{"lineNum":" 2210","line":"        // __n <= __front_spare()"},
{"lineNum":" 2211","line":"        iterator __old_begin = __base::begin();"},
{"lineNum":" 2212","line":"        iterator __i = __old_begin;"},
{"lineNum":" 2213","line":"        if (__n > __pos)"},
{"lineNum":" 2214","line":"        {"},
{"lineNum":" 2215","line":"            for (size_type __m = __n - __pos; __m; --__m, --__base::__start_, ++__base::size())"},
{"lineNum":" 2216","line":"                __alloc_traits::construct(__a, _VSTD::addressof(*--__i), __v);"},
{"lineNum":" 2217","line":"            __n = __pos;"},
{"lineNum":" 2218","line":"        }"},
{"lineNum":" 2219","line":"        if (__n > 0)"},
{"lineNum":" 2220","line":"        {"},
{"lineNum":" 2221","line":"            const_pointer __vt = pointer_traits<const_pointer>::pointer_to(__v);"},
{"lineNum":" 2222","line":"            iterator __obn = __old_begin + __n;"},
{"lineNum":" 2223","line":"            __move_construct_backward_and_check(__old_begin, __obn, __i, __vt);"},
{"lineNum":" 2224","line":"            if (__n < __pos)"},
{"lineNum":" 2225","line":"                __old_begin = __move_and_check(__obn, __old_begin + __pos, __old_begin, __vt);"},
{"lineNum":" 2226","line":"            _VSTD::fill_n(__old_begin, __n, *__vt);"},
{"lineNum":" 2227","line":"        }"},
{"lineNum":" 2228","line":"    }"},
{"lineNum":" 2229","line":"    else"},
{"lineNum":" 2230","line":"    {   // insert by shifting things forward"},
{"lineNum":" 2231","line":"        size_type __back_capacity = __back_spare();"},
{"lineNum":" 2232","line":"        if (__n > __back_capacity)"},
{"lineNum":" 2233","line":"            __add_back_capacity(__n - __back_capacity);"},
{"lineNum":" 2234","line":"        // __n <= __back_capacity"},
{"lineNum":" 2235","line":"        iterator __old_end = __base::end();"},
{"lineNum":" 2236","line":"        iterator __i = __old_end;"},
{"lineNum":" 2237","line":"        size_type __de = __base::size() - __pos;"},
{"lineNum":" 2238","line":"        if (__n > __de)"},
{"lineNum":" 2239","line":"        {"},
{"lineNum":" 2240","line":"            for (size_type __m = __n - __de; __m; --__m, ++__i, ++__base::size())"},
{"lineNum":" 2241","line":"                __alloc_traits::construct(__a, _VSTD::addressof(*__i), __v);"},
{"lineNum":" 2242","line":"            __n = __de;"},
{"lineNum":" 2243","line":"        }"},
{"lineNum":" 2244","line":"        if (__n > 0)"},
{"lineNum":" 2245","line":"        {"},
{"lineNum":" 2246","line":"            const_pointer __vt = pointer_traits<const_pointer>::pointer_to(__v);"},
{"lineNum":" 2247","line":"            iterator __oen = __old_end - __n;"},
{"lineNum":" 2248","line":"            __move_construct_and_check(__oen, __old_end, __i, __vt);"},
{"lineNum":" 2249","line":"            if (__n < __de)"},
{"lineNum":" 2250","line":"                __old_end = __move_backward_and_check(__old_end - __de, __oen, __old_end, __vt);"},
{"lineNum":" 2251","line":"            _VSTD::fill_n(__old_end - __n, __n, *__vt);"},
{"lineNum":" 2252","line":"        }"},
{"lineNum":" 2253","line":"    }"},
{"lineNum":" 2254","line":"    return __base::begin() + __pos;"},
{"lineNum":" 2255","line":"}"},
{"lineNum":" 2256","line":""},
{"lineNum":" 2257","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2258","line":"template <class _InputIter>"},
{"lineNum":" 2259","line":"typename deque<_Tp, _Allocator>::iterator"},
{"lineNum":" 2260","line":"deque<_Tp, _Allocator>::insert(const_iterator __p, _InputIter __f, _InputIter __l,"},
{"lineNum":" 2261","line":"                               typename enable_if<__is_cpp17_input_iterator<_InputIter>::value"},
{"lineNum":" 2262","line":"                                               &&!__is_cpp17_forward_iterator<_InputIter>::value>::type*)"},
{"lineNum":" 2263","line":"{"},
{"lineNum":" 2264","line":"    __split_buffer<value_type, allocator_type&> __buf(__base::__alloc());"},
{"lineNum":" 2265","line":"    __buf.__construct_at_end(__f, __l);"},
{"lineNum":" 2266","line":"    typedef typename __split_buffer<value_type, allocator_type&>::iterator __bi;"},
{"lineNum":" 2267","line":"    return insert(__p, move_iterator<__bi>(__buf.begin()), move_iterator<__bi>(__buf.end()));"},
{"lineNum":" 2268","line":"}"},
{"lineNum":" 2269","line":""},
{"lineNum":" 2270","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2271","line":"template <class _ForwardIterator>"},
{"lineNum":" 2272","line":"typename deque<_Tp, _Allocator>::iterator"},
{"lineNum":" 2273","line":"deque<_Tp, _Allocator>::insert(const_iterator __p, _ForwardIterator __f, _ForwardIterator __l,"},
{"lineNum":" 2274","line":"                               typename enable_if<__is_cpp17_forward_iterator<_ForwardIterator>::value"},
{"lineNum":" 2275","line":"                                               &&!__is_cpp17_bidirectional_iterator<_ForwardIterator>::value>::type*)"},
{"lineNum":" 2276","line":"{"},
{"lineNum":" 2277","line":"    size_type __n = _VSTD::distance(__f, __l);"},
{"lineNum":" 2278","line":"    __split_buffer<value_type, allocator_type&> __buf(__n, 0, __base::__alloc());"},
{"lineNum":" 2279","line":"    __buf.__construct_at_end(__f, __l);"},
{"lineNum":" 2280","line":"    typedef typename __split_buffer<value_type, allocator_type&>::iterator __fwd;"},
{"lineNum":" 2281","line":"    return insert(__p, move_iterator<__fwd>(__buf.begin()), move_iterator<__fwd>(__buf.end()));"},
{"lineNum":" 2282","line":"}"},
{"lineNum":" 2283","line":""},
{"lineNum":" 2284","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2285","line":"template <class _BiIter>"},
{"lineNum":" 2286","line":"typename deque<_Tp, _Allocator>::iterator"},
{"lineNum":" 2287","line":"deque<_Tp, _Allocator>::insert(const_iterator __p, _BiIter __f, _BiIter __l,"},
{"lineNum":" 2288","line":"                               typename enable_if<__is_cpp17_bidirectional_iterator<_BiIter>::value>::type*)"},
{"lineNum":" 2289","line":"{"},
{"lineNum":" 2290","line":"    size_type __n = _VSTD::distance(__f, __l);"},
{"lineNum":" 2291","line":"    size_type __pos = __p - __base::begin();"},
{"lineNum":" 2292","line":"    size_type __to_end = __base::size() - __pos;"},
{"lineNum":" 2293","line":"    allocator_type& __a = __base::__alloc();"},
{"lineNum":" 2294","line":"    if (__pos < __to_end)"},
{"lineNum":" 2295","line":"    {   // insert by shifting things backward"},
{"lineNum":" 2296","line":"        if (__n > __front_spare())"},
{"lineNum":" 2297","line":"            __add_front_capacity(__n - __front_spare());"},
{"lineNum":" 2298","line":"        // __n <= __front_spare()"},
{"lineNum":" 2299","line":"        iterator __old_begin = __base::begin();"},
{"lineNum":" 2300","line":"        iterator __i = __old_begin;"},
{"lineNum":" 2301","line":"        _BiIter __m = __f;"},
{"lineNum":" 2302","line":"        if (__n > __pos)"},
{"lineNum":" 2303","line":"        {"},
{"lineNum":" 2304","line":"            __m = __pos < __n / 2 ? _VSTD::prev(__l, __pos) : _VSTD::next(__f, __n - __pos);"},
{"lineNum":" 2305","line":"            for (_BiIter __j = __m; __j != __f; --__base::__start_, ++__base::size())"},
{"lineNum":" 2306","line":"                __alloc_traits::construct(__a, _VSTD::addressof(*--__i), *--__j);"},
{"lineNum":" 2307","line":"            __n = __pos;"},
{"lineNum":" 2308","line":"        }"},
{"lineNum":" 2309","line":"        if (__n > 0)"},
{"lineNum":" 2310","line":"        {"},
{"lineNum":" 2311","line":"            iterator __obn = __old_begin + __n;"},
{"lineNum":" 2312","line":"            for (iterator __j = __obn; __j != __old_begin;)"},
{"lineNum":" 2313","line":"            {"},
{"lineNum":" 2314","line":"                __alloc_traits::construct(__a, _VSTD::addressof(*--__i), _VSTD::move(*--__j));"},
{"lineNum":" 2315","line":"                --__base::__start_;"},
{"lineNum":" 2316","line":"                ++__base::size();"},
{"lineNum":" 2317","line":"            }"},
{"lineNum":" 2318","line":"            if (__n < __pos)"},
{"lineNum":" 2319","line":"                __old_begin = _VSTD::move(__obn, __old_begin + __pos, __old_begin);"},
{"lineNum":" 2320","line":"            _VSTD::copy(__m, __l, __old_begin);"},
{"lineNum":" 2321","line":"        }"},
{"lineNum":" 2322","line":"    }"},
{"lineNum":" 2323","line":"    else"},
{"lineNum":" 2324","line":"    {   // insert by shifting things forward"},
{"lineNum":" 2325","line":"        size_type __back_capacity = __back_spare();"},
{"lineNum":" 2326","line":"        if (__n > __back_capacity)"},
{"lineNum":" 2327","line":"            __add_back_capacity(__n - __back_capacity);"},
{"lineNum":" 2328","line":"        // __n <= __back_capacity"},
{"lineNum":" 2329","line":"        iterator __old_end = __base::end();"},
{"lineNum":" 2330","line":"        iterator __i = __old_end;"},
{"lineNum":" 2331","line":"        _BiIter __m = __l;"},
{"lineNum":" 2332","line":"        size_type __de = __base::size() - __pos;"},
{"lineNum":" 2333","line":"        if (__n > __de)"},
{"lineNum":" 2334","line":"        {"},
{"lineNum":" 2335","line":"            __m = __de < __n / 2 ? _VSTD::next(__f, __de) : _VSTD::prev(__l, __n - __de);"},
{"lineNum":" 2336","line":"            for (_BiIter __j = __m; __j != __l; ++__i, (void) ++__j, ++__base::size())"},
{"lineNum":" 2337","line":"                __alloc_traits::construct(__a, _VSTD::addressof(*__i), *__j);"},
{"lineNum":" 2338","line":"            __n = __de;"},
{"lineNum":" 2339","line":"        }"},
{"lineNum":" 2340","line":"        if (__n > 0)"},
{"lineNum":" 2341","line":"        {"},
{"lineNum":" 2342","line":"            iterator __oen = __old_end - __n;"},
{"lineNum":" 2343","line":"            for (iterator __j = __oen; __j != __old_end; ++__i, ++__j, ++__base::size())"},
{"lineNum":" 2344","line":"                __alloc_traits::construct(__a, _VSTD::addressof(*__i), _VSTD::move(*__j));"},
{"lineNum":" 2345","line":"            if (__n < __de)"},
{"lineNum":" 2346","line":"                __old_end = _VSTD::move_backward(__old_end - __de, __oen, __old_end);"},
{"lineNum":" 2347","line":"            _VSTD::copy_backward(__f, __m, __old_end);"},
{"lineNum":" 2348","line":"        }"},
{"lineNum":" 2349","line":"    }"},
{"lineNum":" 2350","line":"    return __base::begin() + __pos;"},
{"lineNum":" 2351","line":"}"},
{"lineNum":" 2352","line":""},
{"lineNum":" 2353","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2354","line":"template <class _InpIter>"},
{"lineNum":" 2355","line":"void"},
{"lineNum":" 2356","line":"deque<_Tp, _Allocator>::__append(_InpIter __f, _InpIter __l,"},
{"lineNum":" 2357","line":"                                 typename enable_if<__is_cpp17_input_iterator<_InpIter>::value &&"},
{"lineNum":" 2358","line":"                                                   !__is_cpp17_forward_iterator<_InpIter>::value>::type*)"},
{"lineNum":" 2359","line":"{"},
{"lineNum":" 2360","line":"    for (; __f != __l; ++__f)"},
{"lineNum":" 2361","line":"#ifdef _LIBCPP_CXX03_LANG"},
{"lineNum":" 2362","line":"        push_back(*__f);"},
{"lineNum":" 2363","line":"#else"},
{"lineNum":" 2364","line":"        emplace_back(*__f);"},
{"lineNum":" 2365","line":"#endif"},
{"lineNum":" 2366","line":"}"},
{"lineNum":" 2367","line":""},
{"lineNum":" 2368","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2369","line":"template <class _ForIter>"},
{"lineNum":" 2370","line":"void"},
{"lineNum":" 2371","line":"deque<_Tp, _Allocator>::__append(_ForIter __f, _ForIter __l,"},
{"lineNum":" 2372","line":"                                 typename enable_if<__is_cpp17_forward_iterator<_ForIter>::value>::type*)"},
{"lineNum":" 2373","line":"{"},
{"lineNum":" 2374","line":"    size_type __n = _VSTD::distance(__f, __l);"},
{"lineNum":" 2375","line":"    allocator_type& __a = __base::__alloc();"},
{"lineNum":" 2376","line":"    size_type __back_capacity = __back_spare();"},
{"lineNum":" 2377","line":"    if (__n > __back_capacity)"},
{"lineNum":" 2378","line":"        __add_back_capacity(__n - __back_capacity);"},
{"lineNum":" 2379","line":"    // __n <= __back_capacity"},
{"lineNum":" 2380","line":"    for (__deque_block_range __br : __deque_range(__base::end(), __base::end() + __n)) {"},
{"lineNum":" 2381","line":"      _ConstructTransaction __tx(this, __br);"},
{"lineNum":" 2382","line":"      for (; __tx.__pos_ != __tx.__end_; ++__tx.__pos_, (void)++__f) {"},
{"lineNum":" 2383","line":"        __alloc_traits::construct(__a, _VSTD::__to_address(__tx.__pos_), *__f);"},
{"lineNum":" 2384","line":"      }"},
{"lineNum":" 2385","line":"    }"},
{"lineNum":" 2386","line":"}"},
{"lineNum":" 2387","line":""},
{"lineNum":" 2388","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2389","line":"void"},
{"lineNum":" 2390","line":"deque<_Tp, _Allocator>::__append(size_type __n)"},
{"lineNum":" 2391","line":"{"},
{"lineNum":" 2392","line":"    allocator_type& __a = __base::__alloc();"},
{"lineNum":" 2393","line":"    size_type __back_capacity = __back_spare();"},
{"lineNum":" 2394","line":"    if (__n > __back_capacity)"},
{"lineNum":" 2395","line":"        __add_back_capacity(__n - __back_capacity);"},
{"lineNum":" 2396","line":"    // __n <= __back_capacity"},
{"lineNum":" 2397","line":"    for (__deque_block_range __br : __deque_range(__base::end(), __base::end() + __n)) {"},
{"lineNum":" 2398","line":"      _ConstructTransaction __tx(this, __br);"},
{"lineNum":" 2399","line":"      for (; __tx.__pos_ != __tx.__end_; ++__tx.__pos_) {"},
{"lineNum":" 2400","line":"        __alloc_traits::construct(__a, _VSTD::__to_address(__tx.__pos_));"},
{"lineNum":" 2401","line":"      }"},
{"lineNum":" 2402","line":"    }"},
{"lineNum":" 2403","line":"}"},
{"lineNum":" 2404","line":""},
{"lineNum":" 2405","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2406","line":"void"},
{"lineNum":" 2407","line":"deque<_Tp, _Allocator>::__append(size_type __n, const value_type& __v)"},
{"lineNum":" 2408","line":"{"},
{"lineNum":" 2409","line":"    allocator_type& __a = __base::__alloc();"},
{"lineNum":" 2410","line":"    size_type __back_capacity = __back_spare();"},
{"lineNum":" 2411","line":"    if (__n > __back_capacity)"},
{"lineNum":" 2412","line":"        __add_back_capacity(__n - __back_capacity);"},
{"lineNum":" 2413","line":"    // __n <= __back_capacity"},
{"lineNum":" 2414","line":"    for (__deque_block_range __br : __deque_range(__base::end(), __base::end() + __n)) {"},
{"lineNum":" 2415","line":"      _ConstructTransaction __tx(this, __br);"},
{"lineNum":" 2416","line":"      for (; __tx.__pos_ != __tx.__end_; ++__tx.__pos_) {"},
{"lineNum":" 2417","line":"        __alloc_traits::construct(__a, _VSTD::__to_address(__tx.__pos_), __v);"},
{"lineNum":" 2418","line":"      }"},
{"lineNum":" 2419","line":"    }"},
{"lineNum":" 2420","line":""},
{"lineNum":" 2421","line":"}"},
{"lineNum":" 2422","line":""},
{"lineNum":" 2423","line":"// Create front capacity for one block of elements."},
{"lineNum":" 2424","line":"// Strong guarantee.  Either do it or don\'t touch anything."},
{"lineNum":" 2425","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2426","line":"void"},
{"lineNum":" 2427","line":"deque<_Tp, _Allocator>::__add_front_capacity()"},
{"lineNum":" 2428","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2429","line":"    allocator_type& __a = __base::__alloc();"},
{"lineNum":" 2430","line":"    if (__back_spare() >= __base::__block_size)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2431","line":"    {"},
{"lineNum":" 2432","line":"        __base::__start_ += __base::__block_size;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2433","line":"        pointer __pt = __base::__map_.back();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2434","line":"        __base::__map_.pop_back();"},
{"lineNum":" 2435","line":"        __base::__map_.push_front(__pt);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2436","line":"    }"},
{"lineNum":" 2437","line":"    // Else if __base::__map_.size() < __base::__map_.capacity() then we need to allocate 1 buffer"},
{"lineNum":" 2438","line":"    else if (__base::__map_.size() < __base::__map_.capacity())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2439","line":"    {   // we can put the new buffer into the map, but don\'t shift things around"},
{"lineNum":" 2440","line":"        // until all buffers are allocated.  If we throw, we don\'t need to fix"},
{"lineNum":" 2441","line":"        // anything up (any added buffers are undetectible)"},
{"lineNum":" 2442","line":"        if (__base::__map_.__front_spare() > 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2443","line":"            __base::__map_.push_front(__alloc_traits::allocate(__a, __base::__block_size));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2444","line":"        else"},
{"lineNum":" 2445","line":"        {"},
{"lineNum":" 2446","line":"            __base::__map_.push_back(__alloc_traits::allocate(__a, __base::__block_size));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2447","line":"            // Done allocating, reorder capacity"},
{"lineNum":" 2448","line":"            pointer __pt = __base::__map_.back();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2449","line":"            __base::__map_.pop_back();"},
{"lineNum":" 2450","line":"            __base::__map_.push_front(__pt);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2451","line":"        }"},
{"lineNum":" 2452","line":"        __base::__start_ = __base::__map_.size() == 1 ?","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2453","line":"                               __base::__block_size / 2 :"},
{"lineNum":" 2454","line":"                               __base::__start_ + __base::__block_size;"},
{"lineNum":" 2455","line":"    }"},
{"lineNum":" 2456","line":"    // Else need to allocate 1 buffer, *and* we need to reallocate __map_."},
{"lineNum":" 2457","line":"    else"},
{"lineNum":" 2458","line":"    {"},
{"lineNum":" 2459","line":"        __split_buffer<pointer, typename __base::__pointer_allocator&>"},
{"lineNum":" 2460","line":"            __buf(max<size_type>(2 * __base::__map_.capacity(), 1),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2461","line":"                  0, __base::__map_.__alloc());"},
{"lineNum":" 2462","line":""},
{"lineNum":" 2463","line":"        typedef __allocator_destructor<_Allocator> _Dp;"},
{"lineNum":" 2464","line":"        unique_ptr<pointer, _Dp> __hold("},
{"lineNum":" 2465","line":"            __alloc_traits::allocate(__a, __base::__block_size),"},
{"lineNum":" 2466","line":"                _Dp(__a, __base::__block_size));"},
{"lineNum":" 2467","line":"        __buf.push_back(__hold.get());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2468","line":"        __hold.release();"},
{"lineNum":" 2469","line":""},
{"lineNum":" 2470","line":"        for (typename __base::__map_pointer __i = __base::__map_.begin();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2471","line":"                __i != __base::__map_.end(); ++__i)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2472","line":"            __buf.push_back(*__i);"},
{"lineNum":" 2473","line":"        _VSTD::swap(__base::__map_.__first_, __buf.__first_);"},
{"lineNum":" 2474","line":"        _VSTD::swap(__base::__map_.__begin_, __buf.__begin_);"},
{"lineNum":" 2475","line":"        _VSTD::swap(__base::__map_.__end_, __buf.__end_);"},
{"lineNum":" 2476","line":"        _VSTD::swap(__base::__map_.__end_cap(), __buf.__end_cap());"},
{"lineNum":" 2477","line":"        __base::__start_ = __base::__map_.size() == 1 ?","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2478","line":"                               __base::__block_size / 2 :"},
{"lineNum":" 2479","line":"                               __base::__start_ + __base::__block_size;"},
{"lineNum":" 2480","line":"    }"},
{"lineNum":" 2481","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2482","line":""},
{"lineNum":" 2483","line":"// Create front capacity for __n elements."},
{"lineNum":" 2484","line":"// Strong guarantee.  Either do it or don\'t touch anything."},
{"lineNum":" 2485","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2486","line":"void"},
{"lineNum":" 2487","line":"deque<_Tp, _Allocator>::__add_front_capacity(size_type __n)"},
{"lineNum":" 2488","line":"{"},
{"lineNum":" 2489","line":"    allocator_type& __a = __base::__alloc();"},
{"lineNum":" 2490","line":"    size_type __nb = __recommend_blocks(__n + __base::__map_.empty());"},
{"lineNum":" 2491","line":"    // Number of unused blocks at back:"},
{"lineNum":" 2492","line":"    size_type __back_capacity = __back_spare() / __base::__block_size;"},
{"lineNum":" 2493","line":"    __back_capacity = _VSTD::min(__back_capacity, __nb);  // don\'t take more than you need"},
{"lineNum":" 2494","line":"    __nb -= __back_capacity;  // number of blocks need to allocate"},
{"lineNum":" 2495","line":"    // If __nb == 0, then we have sufficient capacity."},
{"lineNum":" 2496","line":"    if (__nb == 0)"},
{"lineNum":" 2497","line":"    {"},
{"lineNum":" 2498","line":"        __base::__start_ += __base::__block_size * __back_capacity;"},
{"lineNum":" 2499","line":"        for (; __back_capacity > 0; --__back_capacity)"},
{"lineNum":" 2500","line":"        {"},
{"lineNum":" 2501","line":"            pointer __pt = __base::__map_.back();"},
{"lineNum":" 2502","line":"            __base::__map_.pop_back();"},
{"lineNum":" 2503","line":"            __base::__map_.push_front(__pt);"},
{"lineNum":" 2504","line":"        }"},
{"lineNum":" 2505","line":"    }"},
{"lineNum":" 2506","line":"    // Else if __nb <= __map_.capacity() - __map_.size() then we need to allocate __nb buffers"},
{"lineNum":" 2507","line":"    else if (__nb <= __base::__map_.capacity() - __base::__map_.size())"},
{"lineNum":" 2508","line":"    {   // we can put the new buffers into the map, but don\'t shift things around"},
{"lineNum":" 2509","line":"        // until all buffers are allocated.  If we throw, we don\'t need to fix"},
{"lineNum":" 2510","line":"        // anything up (any added buffers are undetectible)"},
{"lineNum":" 2511","line":"        for (; __nb > 0; --__nb, __base::__start_ += __base::__block_size - (__base::__map_.size() == 1))"},
{"lineNum":" 2512","line":"        {"},
{"lineNum":" 2513","line":"            if (__base::__map_.__front_spare() == 0)"},
{"lineNum":" 2514","line":"                break;"},
{"lineNum":" 2515","line":"            __base::__map_.push_front(__alloc_traits::allocate(__a, __base::__block_size));"},
{"lineNum":" 2516","line":"        }"},
{"lineNum":" 2517","line":"        for (; __nb > 0; --__nb, ++__back_capacity)"},
{"lineNum":" 2518","line":"            __base::__map_.push_back(__alloc_traits::allocate(__a, __base::__block_size));"},
{"lineNum":" 2519","line":"        // Done allocating, reorder capacity"},
{"lineNum":" 2520","line":"        __base::__start_ += __back_capacity * __base::__block_size;"},
{"lineNum":" 2521","line":"        for (; __back_capacity > 0; --__back_capacity)"},
{"lineNum":" 2522","line":"        {"},
{"lineNum":" 2523","line":"            pointer __pt = __base::__map_.back();"},
{"lineNum":" 2524","line":"            __base::__map_.pop_back();"},
{"lineNum":" 2525","line":"            __base::__map_.push_front(__pt);"},
{"lineNum":" 2526","line":"        }"},
{"lineNum":" 2527","line":"    }"},
{"lineNum":" 2528","line":"    // Else need to allocate __nb buffers, *and* we need to reallocate __map_."},
{"lineNum":" 2529","line":"    else"},
{"lineNum":" 2530","line":"    {"},
{"lineNum":" 2531","line":"        size_type __ds = (__nb + __back_capacity) * __base::__block_size - __base::__map_.empty();"},
{"lineNum":" 2532","line":"        __split_buffer<pointer, typename __base::__pointer_allocator&>"},
{"lineNum":" 2533","line":"            __buf(max<size_type>(2* __base::__map_.capacity(),"},
{"lineNum":" 2534","line":"                                 __nb + __base::__map_.size()),"},
{"lineNum":" 2535","line":"                  0, __base::__map_.__alloc());"},
{"lineNum":" 2536","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 2537","line":"        try"},
{"lineNum":" 2538","line":"        {"},
{"lineNum":" 2539","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 2540","line":"            for (; __nb > 0; --__nb)"},
{"lineNum":" 2541","line":"                __buf.push_back(__alloc_traits::allocate(__a, __base::__block_size));"},
{"lineNum":" 2542","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 2543","line":"        }"},
{"lineNum":" 2544","line":"        catch (...)"},
{"lineNum":" 2545","line":"        {"},
{"lineNum":" 2546","line":"            for (typename __base::__map_pointer __i = __buf.begin();"},
{"lineNum":" 2547","line":"                    __i != __buf.end(); ++__i)"},
{"lineNum":" 2548","line":"                __alloc_traits::deallocate(__a, *__i, __base::__block_size);"},
{"lineNum":" 2549","line":"            throw;"},
{"lineNum":" 2550","line":"        }"},
{"lineNum":" 2551","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 2552","line":"        for (; __back_capacity > 0; --__back_capacity)"},
{"lineNum":" 2553","line":"        {"},
{"lineNum":" 2554","line":"            __buf.push_back(__base::__map_.back());"},
{"lineNum":" 2555","line":"            __base::__map_.pop_back();"},
{"lineNum":" 2556","line":"        }"},
{"lineNum":" 2557","line":"        for (typename __base::__map_pointer __i = __base::__map_.begin();"},
{"lineNum":" 2558","line":"                __i != __base::__map_.end(); ++__i)"},
{"lineNum":" 2559","line":"            __buf.push_back(*__i);"},
{"lineNum":" 2560","line":"        _VSTD::swap(__base::__map_.__first_, __buf.__first_);"},
{"lineNum":" 2561","line":"        _VSTD::swap(__base::__map_.__begin_, __buf.__begin_);"},
{"lineNum":" 2562","line":"        _VSTD::swap(__base::__map_.__end_, __buf.__end_);"},
{"lineNum":" 2563","line":"        _VSTD::swap(__base::__map_.__end_cap(), __buf.__end_cap());"},
{"lineNum":" 2564","line":"        __base::__start_ += __ds;"},
{"lineNum":" 2565","line":"    }"},
{"lineNum":" 2566","line":"}"},
{"lineNum":" 2567","line":""},
{"lineNum":" 2568","line":"// Create back capacity for one block of elements."},
{"lineNum":" 2569","line":"// Strong guarantee.  Either do it or don\'t touch anything."},
{"lineNum":" 2570","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2571","line":"void"},
{"lineNum":" 2572","line":"deque<_Tp, _Allocator>::__add_back_capacity()"},
{"lineNum":" 2573","line":"{","class":"linePartCov","hits":"1","order":"252","possible_hits":"21",},
{"lineNum":" 2574","line":"    allocator_type& __a = __base::__alloc();"},
{"lineNum":" 2575","line":"    if (__front_spare() >= __base::__block_size)","class":"linePartCov","hits":"1","order":"254","possible_hits":"21",},
{"lineNum":" 2576","line":"    {"},
{"lineNum":" 2577","line":"        __base::__start_ -= __base::__block_size;","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":" 2578","line":"        pointer __pt = __base::__map_.front();","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":" 2579","line":"        __base::__map_.pop_front();"},
{"lineNum":" 2580","line":"        __base::__map_.push_back(__pt);"},
{"lineNum":" 2581","line":"    }"},
{"lineNum":" 2582","line":"    // Else if __nb <= __map_.capacity() - __map_.size() then we need to allocate __nb buffers"},
{"lineNum":" 2583","line":"    else if (__base::__map_.size() < __base::__map_.capacity())","class":"linePartCov","hits":"1","order":"256","possible_hits":"21",},
{"lineNum":" 2584","line":"    {   // we can put the new buffer into the map, but don\'t shift things around"},
{"lineNum":" 2585","line":"        // until it is allocated.  If we throw, we don\'t need to fix"},
{"lineNum":" 2586","line":"        // anything up (any added buffers are undetectible)"},
{"lineNum":" 2587","line":"        if (__base::__map_.__back_spare() != 0)","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":" 2588","line":"            __base::__map_.push_back(__alloc_traits::allocate(__a, __base::__block_size));","class":"lineNoCov","hits":"0","possible_hits":"26",},
{"lineNum":" 2589","line":"        else"},
{"lineNum":" 2590","line":"        {"},
{"lineNum":" 2591","line":"            __base::__map_.push_front(__alloc_traits::allocate(__a, __base::__block_size));","class":"lineNoCov","hits":"0","possible_hits":"26",},
{"lineNum":" 2592","line":"            // Done allocating, reorder capacity"},
{"lineNum":" 2593","line":"            pointer __pt = __base::__map_.front();","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":" 2594","line":"            __base::__map_.pop_front();"},
{"lineNum":" 2595","line":"            __base::__map_.push_back(__pt);"},
{"lineNum":" 2596","line":"        }"},
{"lineNum":" 2597","line":"    }"},
{"lineNum":" 2598","line":"    // Else need to allocate 1 buffer, *and* we need to reallocate __map_."},
{"lineNum":" 2599","line":"    else"},
{"lineNum":" 2600","line":"    {"},
{"lineNum":" 2601","line":"        __split_buffer<pointer, typename __base::__pointer_allocator&>"},
{"lineNum":" 2602","line":"            __buf(max<size_type>(2* __base::__map_.capacity(), 1),","class":"linePartCov","hits":"2","order":"257","possible_hits":"42",},
{"lineNum":" 2603","line":"                  __base::__map_.size(),"},
{"lineNum":" 2604","line":"                  __base::__map_.__alloc());"},
{"lineNum":" 2605","line":""},
{"lineNum":" 2606","line":"        typedef __allocator_destructor<_Allocator> _Dp;"},
{"lineNum":" 2607","line":"        unique_ptr<pointer, _Dp> __hold("},
{"lineNum":" 2608","line":"            __alloc_traits::allocate(__a, __base::__block_size),"},
{"lineNum":" 2609","line":"                _Dp(__a, __base::__block_size));"},
{"lineNum":" 2610","line":"        __buf.push_back(__hold.get());","class":"linePartCov","hits":"1","order":"259","possible_hits":"21",},
{"lineNum":" 2611","line":"        __hold.release();"},
{"lineNum":" 2612","line":""},
{"lineNum":" 2613","line":"        for (typename __base::__map_pointer __i = __base::__map_.end();","class":"linePartCov","hits":"1","order":"267","possible_hits":"47",},
{"lineNum":" 2614","line":"                __i != __base::__map_.begin();)","class":"linePartCov","hits":"1","order":"266","possible_hits":"26",},
{"lineNum":" 2615","line":"            __buf.push_front(*--__i);","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":" 2616","line":"        _VSTD::swap(__base::__map_.__first_, __buf.__first_);","class":"linePartCov","hits":"1","order":"268","possible_hits":"5",},
{"lineNum":" 2617","line":"        _VSTD::swap(__base::__map_.__begin_, __buf.__begin_);"},
{"lineNum":" 2618","line":"        _VSTD::swap(__base::__map_.__end_, __buf.__end_);"},
{"lineNum":" 2619","line":"        _VSTD::swap(__base::__map_.__end_cap(), __buf.__end_cap());"},
{"lineNum":" 2620","line":"    }","class":"linePartCov","hits":"1","order":"269","possible_hits":"10",},
{"lineNum":" 2621","line":"}","class":"linePartCov","hits":"1","order":"270","possible_hits":"26",},
{"lineNum":" 2622","line":""},
{"lineNum":" 2623","line":"// Create back capacity for __n elements."},
{"lineNum":" 2624","line":"// Strong guarantee.  Either do it or don\'t touch anything."},
{"lineNum":" 2625","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2626","line":"void"},
{"lineNum":" 2627","line":"deque<_Tp, _Allocator>::__add_back_capacity(size_type __n)"},
{"lineNum":" 2628","line":"{"},
{"lineNum":" 2629","line":"    allocator_type& __a = __base::__alloc();"},
{"lineNum":" 2630","line":"    size_type __nb = __recommend_blocks(__n + __base::__map_.empty());"},
{"lineNum":" 2631","line":"    // Number of unused blocks at front:"},
{"lineNum":" 2632","line":"    size_type __front_capacity = __front_spare() / __base::__block_size;"},
{"lineNum":" 2633","line":"    __front_capacity = _VSTD::min(__front_capacity, __nb);  // don\'t take more than you need"},
{"lineNum":" 2634","line":"    __nb -= __front_capacity;  // number of blocks need to allocate"},
{"lineNum":" 2635","line":"    // If __nb == 0, then we have sufficient capacity."},
{"lineNum":" 2636","line":"    if (__nb == 0)"},
{"lineNum":" 2637","line":"    {"},
{"lineNum":" 2638","line":"        __base::__start_ -= __base::__block_size * __front_capacity;"},
{"lineNum":" 2639","line":"        for (; __front_capacity > 0; --__front_capacity)"},
{"lineNum":" 2640","line":"        {"},
{"lineNum":" 2641","line":"            pointer __pt = __base::__map_.front();"},
{"lineNum":" 2642","line":"            __base::__map_.pop_front();"},
{"lineNum":" 2643","line":"            __base::__map_.push_back(__pt);"},
{"lineNum":" 2644","line":"        }"},
{"lineNum":" 2645","line":"    }"},
{"lineNum":" 2646","line":"    // Else if __nb <= __map_.capacity() - __map_.size() then we need to allocate __nb buffers"},
{"lineNum":" 2647","line":"    else if (__nb <= __base::__map_.capacity() - __base::__map_.size())"},
{"lineNum":" 2648","line":"    {   // we can put the new buffers into the map, but don\'t shift things around"},
{"lineNum":" 2649","line":"        // until all buffers are allocated.  If we throw, we don\'t need to fix"},
{"lineNum":" 2650","line":"        // anything up (any added buffers are undetectible)"},
{"lineNum":" 2651","line":"        for (; __nb > 0; --__nb)"},
{"lineNum":" 2652","line":"        {"},
{"lineNum":" 2653","line":"            if (__base::__map_.__back_spare() == 0)"},
{"lineNum":" 2654","line":"                break;"},
{"lineNum":" 2655","line":"            __base::__map_.push_back(__alloc_traits::allocate(__a, __base::__block_size));"},
{"lineNum":" 2656","line":"        }"},
{"lineNum":" 2657","line":"        for (; __nb > 0; --__nb, ++__front_capacity, __base::__start_ +="},
{"lineNum":" 2658","line":"                                 __base::__block_size - (__base::__map_.size() == 1))"},
{"lineNum":" 2659","line":"            __base::__map_.push_front(__alloc_traits::allocate(__a, __base::__block_size));"},
{"lineNum":" 2660","line":"        // Done allocating, reorder capacity"},
{"lineNum":" 2661","line":"        __base::__start_ -= __base::__block_size * __front_capacity;"},
{"lineNum":" 2662","line":"        for (; __front_capacity > 0; --__front_capacity)"},
{"lineNum":" 2663","line":"        {"},
{"lineNum":" 2664","line":"            pointer __pt = __base::__map_.front();"},
{"lineNum":" 2665","line":"            __base::__map_.pop_front();"},
{"lineNum":" 2666","line":"            __base::__map_.push_back(__pt);"},
{"lineNum":" 2667","line":"        }"},
{"lineNum":" 2668","line":"    }"},
{"lineNum":" 2669","line":"    // Else need to allocate __nb buffers, *and* we need to reallocate __map_."},
{"lineNum":" 2670","line":"    else"},
{"lineNum":" 2671","line":"    {"},
{"lineNum":" 2672","line":"        size_type __ds = __front_capacity * __base::__block_size;"},
{"lineNum":" 2673","line":"        __split_buffer<pointer, typename __base::__pointer_allocator&>"},
{"lineNum":" 2674","line":"            __buf(max<size_type>(2* __base::__map_.capacity(),"},
{"lineNum":" 2675","line":"                                 __nb + __base::__map_.size()),"},
{"lineNum":" 2676","line":"                  __base::__map_.size() - __front_capacity,"},
{"lineNum":" 2677","line":"                  __base::__map_.__alloc());"},
{"lineNum":" 2678","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 2679","line":"        try"},
{"lineNum":" 2680","line":"        {"},
{"lineNum":" 2681","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 2682","line":"            for (; __nb > 0; --__nb)"},
{"lineNum":" 2683","line":"                __buf.push_back(__alloc_traits::allocate(__a, __base::__block_size));"},
{"lineNum":" 2684","line":"#ifndef _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 2685","line":"        }"},
{"lineNum":" 2686","line":"        catch (...)"},
{"lineNum":" 2687","line":"        {"},
{"lineNum":" 2688","line":"            for (typename __base::__map_pointer __i = __buf.begin();"},
{"lineNum":" 2689","line":"                    __i != __buf.end(); ++__i)"},
{"lineNum":" 2690","line":"                __alloc_traits::deallocate(__a, *__i, __base::__block_size);"},
{"lineNum":" 2691","line":"            throw;"},
{"lineNum":" 2692","line":"        }"},
{"lineNum":" 2693","line":"#endif // _LIBCPP_NO_EXCEPTIONS"},
{"lineNum":" 2694","line":"        for (; __front_capacity > 0; --__front_capacity)"},
{"lineNum":" 2695","line":"        {"},
{"lineNum":" 2696","line":"            __buf.push_back(__base::__map_.front());"},
{"lineNum":" 2697","line":"            __base::__map_.pop_front();"},
{"lineNum":" 2698","line":"        }"},
{"lineNum":" 2699","line":"        for (typename __base::__map_pointer __i = __base::__map_.end();"},
{"lineNum":" 2700","line":"                __i != __base::__map_.begin();)"},
{"lineNum":" 2701","line":"            __buf.push_front(*--__i);"},
{"lineNum":" 2702","line":"        _VSTD::swap(__base::__map_.__first_, __buf.__first_);"},
{"lineNum":" 2703","line":"        _VSTD::swap(__base::__map_.__begin_, __buf.__begin_);"},
{"lineNum":" 2704","line":"        _VSTD::swap(__base::__map_.__end_, __buf.__end_);"},
{"lineNum":" 2705","line":"        _VSTD::swap(__base::__map_.__end_cap(), __buf.__end_cap());"},
{"lineNum":" 2706","line":"        __base::__start_ -= __ds;"},
{"lineNum":" 2707","line":"    }"},
{"lineNum":" 2708","line":"}"},
{"lineNum":" 2709","line":""},
{"lineNum":" 2710","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2711","line":"void"},
{"lineNum":" 2712","line":"deque<_Tp, _Allocator>::pop_front()"},
{"lineNum":" 2713","line":"{"},
{"lineNum":" 2714","line":"    allocator_type& __a = __base::__alloc();"},
{"lineNum":" 2715","line":"    __alloc_traits::destroy(__a, _VSTD::__to_address(*(__base::__map_.begin() +"},
{"lineNum":" 2716","line":"                                                    __base::__start_ / __base::__block_size) +"},
{"lineNum":" 2717","line":"                                                    __base::__start_ % __base::__block_size));"},
{"lineNum":" 2718","line":"    --__base::size();"},
{"lineNum":" 2719","line":"    ++__base::__start_;"},
{"lineNum":" 2720","line":"    __maybe_remove_front_spare();"},
{"lineNum":" 2721","line":"}"},
{"lineNum":" 2722","line":""},
{"lineNum":" 2723","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2724","line":"void"},
{"lineNum":" 2725","line":"deque<_Tp, _Allocator>::pop_back()"},
{"lineNum":" 2726","line":"{"},
{"lineNum":" 2727","line":"    _LIBCPP_ASSERT(!empty(), \"deque::pop_back called on an empty deque\");"},
{"lineNum":" 2728","line":"    allocator_type& __a = __base::__alloc();"},
{"lineNum":" 2729","line":"    size_type __p = __base::size() + __base::__start_ - 1;","class":"lineNoCov","hits":"0","possible_hits":"442",},
{"lineNum":" 2730","line":"    __alloc_traits::destroy(__a, _VSTD::__to_address(*(__base::__map_.begin() +","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2731","line":"                                                    __p / __base::__block_size) +"},
{"lineNum":" 2732","line":"                                                    __p % __base::__block_size));","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2733","line":"    --__base::size();","class":"linePartCov","hits":"11","order":"294","possible_hits":"475",},
{"lineNum":" 2734","line":"    __maybe_remove_back_spare();","class":"linePartCov","hits":"11","order":"295","possible_hits":"89",},
{"lineNum":" 2735","line":"}"},
{"lineNum":" 2736","line":""},
{"lineNum":" 2737","line":"// move assign [__f, __l) to [__r, __r + (__l-__f))."},
{"lineNum":" 2738","line":"// If __vt points into [__f, __l), then subtract (__f - __r) from __vt."},
{"lineNum":" 2739","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2740","line":"typename deque<_Tp, _Allocator>::iterator"},
{"lineNum":" 2741","line":"deque<_Tp, _Allocator>::__move_and_check(iterator __f, iterator __l, iterator __r,"},
{"lineNum":" 2742","line":"                                         const_pointer& __vt)"},
{"lineNum":" 2743","line":"{"},
{"lineNum":" 2744","line":"    // as if"},
{"lineNum":" 2745","line":"    //   for (; __f != __l; ++__f, ++__r)"},
{"lineNum":" 2746","line":"    //       *__r = _VSTD::move(*__f);"},
{"lineNum":" 2747","line":"    difference_type __n = __l - __f;"},
{"lineNum":" 2748","line":"    while (__n > 0)"},
{"lineNum":" 2749","line":"    {"},
{"lineNum":" 2750","line":"        pointer __fb = __f.__ptr_;"},
{"lineNum":" 2751","line":"        pointer __fe = *__f.__m_iter_ + __base::__block_size;"},
{"lineNum":" 2752","line":"        difference_type __bs = __fe - __fb;"},
{"lineNum":" 2753","line":"        if (__bs > __n)"},
{"lineNum":" 2754","line":"        {"},
{"lineNum":" 2755","line":"            __bs = __n;"},
{"lineNum":" 2756","line":"            __fe = __fb + __bs;"},
{"lineNum":" 2757","line":"        }"},
{"lineNum":" 2758","line":"        if (__fb <= __vt && __vt < __fe)"},
{"lineNum":" 2759","line":"            __vt = (const_iterator(static_cast<__map_const_pointer>(__f.__m_iter_), __vt) -= __f - __r).__ptr_;"},
{"lineNum":" 2760","line":"        __r = _VSTD::move(__fb, __fe, __r);"},
{"lineNum":" 2761","line":"        __n -= __bs;"},
{"lineNum":" 2762","line":"        __f += __bs;"},
{"lineNum":" 2763","line":"    }"},
{"lineNum":" 2764","line":"    return __r;"},
{"lineNum":" 2765","line":"}"},
{"lineNum":" 2766","line":""},
{"lineNum":" 2767","line":"// move assign [__f, __l) to [__r - (__l-__f), __r) backwards."},
{"lineNum":" 2768","line":"// If __vt points into [__f, __l), then add (__r - __l) to __vt."},
{"lineNum":" 2769","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2770","line":"typename deque<_Tp, _Allocator>::iterator"},
{"lineNum":" 2771","line":"deque<_Tp, _Allocator>::__move_backward_and_check(iterator __f, iterator __l, iterator __r,"},
{"lineNum":" 2772","line":"                                                  const_pointer& __vt)"},
{"lineNum":" 2773","line":"{"},
{"lineNum":" 2774","line":"    // as if"},
{"lineNum":" 2775","line":"    //   while (__f != __l)"},
{"lineNum":" 2776","line":"    //       *--__r = _VSTD::move(*--__l);"},
{"lineNum":" 2777","line":"    difference_type __n = __l - __f;"},
{"lineNum":" 2778","line":"    while (__n > 0)"},
{"lineNum":" 2779","line":"    {"},
{"lineNum":" 2780","line":"        --__l;"},
{"lineNum":" 2781","line":"        pointer __lb = *__l.__m_iter_;"},
{"lineNum":" 2782","line":"        pointer __le = __l.__ptr_ + 1;"},
{"lineNum":" 2783","line":"        difference_type __bs = __le - __lb;"},
{"lineNum":" 2784","line":"        if (__bs > __n)"},
{"lineNum":" 2785","line":"        {"},
{"lineNum":" 2786","line":"            __bs = __n;"},
{"lineNum":" 2787","line":"            __lb = __le - __bs;"},
{"lineNum":" 2788","line":"        }"},
{"lineNum":" 2789","line":"        if (__lb <= __vt && __vt < __le)"},
{"lineNum":" 2790","line":"            __vt = (const_iterator(static_cast<__map_const_pointer>(__l.__m_iter_), __vt) += __r - __l - 1).__ptr_;"},
{"lineNum":" 2791","line":"        __r = _VSTD::move_backward(__lb, __le, __r);"},
{"lineNum":" 2792","line":"        __n -= __bs;"},
{"lineNum":" 2793","line":"        __l -= __bs - 1;"},
{"lineNum":" 2794","line":"    }"},
{"lineNum":" 2795","line":"    return __r;"},
{"lineNum":" 2796","line":"}"},
{"lineNum":" 2797","line":""},
{"lineNum":" 2798","line":"// move construct [__f, __l) to [__r, __r + (__l-__f))."},
{"lineNum":" 2799","line":"// If __vt points into [__f, __l), then add (__r - __f) to __vt."},
{"lineNum":" 2800","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2801","line":"void"},
{"lineNum":" 2802","line":"deque<_Tp, _Allocator>::__move_construct_and_check(iterator __f, iterator __l,"},
{"lineNum":" 2803","line":"                                                   iterator __r, const_pointer& __vt)"},
{"lineNum":" 2804","line":"{"},
{"lineNum":" 2805","line":"    allocator_type& __a = __base::__alloc();"},
{"lineNum":" 2806","line":"    // as if"},
{"lineNum":" 2807","line":"    //   for (; __f != __l; ++__r, ++__f, ++__base::size())"},
{"lineNum":" 2808","line":"    //       __alloc_traits::construct(__a, _VSTD::addressof(*__r), _VSTD::move(*__f));"},
{"lineNum":" 2809","line":"    difference_type __n = __l - __f;"},
{"lineNum":" 2810","line":"    while (__n > 0)"},
{"lineNum":" 2811","line":"    {"},
{"lineNum":" 2812","line":"        pointer __fb = __f.__ptr_;"},
{"lineNum":" 2813","line":"        pointer __fe = *__f.__m_iter_ + __base::__block_size;"},
{"lineNum":" 2814","line":"        difference_type __bs = __fe - __fb;"},
{"lineNum":" 2815","line":"        if (__bs > __n)"},
{"lineNum":" 2816","line":"        {"},
{"lineNum":" 2817","line":"            __bs = __n;"},
{"lineNum":" 2818","line":"            __fe = __fb + __bs;"},
{"lineNum":" 2819","line":"        }"},
{"lineNum":" 2820","line":"        if (__fb <= __vt && __vt < __fe)"},
{"lineNum":" 2821","line":"            __vt = (const_iterator(static_cast<__map_const_pointer>(__f.__m_iter_), __vt) += __r - __f).__ptr_;"},
{"lineNum":" 2822","line":"        for (; __fb != __fe; ++__fb, ++__r, ++__base::size())"},
{"lineNum":" 2823","line":"            __alloc_traits::construct(__a, _VSTD::addressof(*__r), _VSTD::move(*__fb));"},
{"lineNum":" 2824","line":"        __n -= __bs;"},
{"lineNum":" 2825","line":"        __f += __bs;"},
{"lineNum":" 2826","line":"    }"},
{"lineNum":" 2827","line":"}"},
{"lineNum":" 2828","line":""},
{"lineNum":" 2829","line":"// move construct [__f, __l) to [__r - (__l-__f), __r) backwards."},
{"lineNum":" 2830","line":"// If __vt points into [__f, __l), then subtract (__l - __r) from __vt."},
{"lineNum":" 2831","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2832","line":"void"},
{"lineNum":" 2833","line":"deque<_Tp, _Allocator>::__move_construct_backward_and_check(iterator __f, iterator __l,"},
{"lineNum":" 2834","line":"                                                            iterator __r, const_pointer& __vt)"},
{"lineNum":" 2835","line":"{"},
{"lineNum":" 2836","line":"    allocator_type& __a = __base::__alloc();"},
{"lineNum":" 2837","line":"    // as if"},
{"lineNum":" 2838","line":"    //   for (iterator __j = __l; __j != __f;)"},
{"lineNum":" 2839","line":"    //   {"},
{"lineNum":" 2840","line":"    //       __alloc_traitsconstruct(__a, _VSTD::addressof(*--__r), _VSTD::move(*--__j));"},
{"lineNum":" 2841","line":"    //       --__base::__start_;"},
{"lineNum":" 2842","line":"    //       ++__base::size();"},
{"lineNum":" 2843","line":"    //   }"},
{"lineNum":" 2844","line":"    difference_type __n = __l - __f;"},
{"lineNum":" 2845","line":"    while (__n > 0)"},
{"lineNum":" 2846","line":"    {"},
{"lineNum":" 2847","line":"        --__l;"},
{"lineNum":" 2848","line":"        pointer __lb = *__l.__m_iter_;"},
{"lineNum":" 2849","line":"        pointer __le = __l.__ptr_ + 1;"},
{"lineNum":" 2850","line":"        difference_type __bs = __le - __lb;"},
{"lineNum":" 2851","line":"        if (__bs > __n)"},
{"lineNum":" 2852","line":"        {"},
{"lineNum":" 2853","line":"            __bs = __n;"},
{"lineNum":" 2854","line":"            __lb = __le - __bs;"},
{"lineNum":" 2855","line":"        }"},
{"lineNum":" 2856","line":"        if (__lb <= __vt && __vt < __le)"},
{"lineNum":" 2857","line":"            __vt = (const_iterator(static_cast<__map_const_pointer>(__l.__m_iter_), __vt) -= __l - __r + 1).__ptr_;"},
{"lineNum":" 2858","line":"        while (__le != __lb)"},
{"lineNum":" 2859","line":"        {"},
{"lineNum":" 2860","line":"            __alloc_traits::construct(__a, _VSTD::addressof(*--__r), _VSTD::move(*--__le));"},
{"lineNum":" 2861","line":"            --__base::__start_;"},
{"lineNum":" 2862","line":"            ++__base::size();"},
{"lineNum":" 2863","line":"        }"},
{"lineNum":" 2864","line":"        __n -= __bs;"},
{"lineNum":" 2865","line":"        __l -= __bs - 1;"},
{"lineNum":" 2866","line":"    }"},
{"lineNum":" 2867","line":"}"},
{"lineNum":" 2868","line":""},
{"lineNum":" 2869","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2870","line":"typename deque<_Tp, _Allocator>::iterator"},
{"lineNum":" 2871","line":"deque<_Tp, _Allocator>::erase(const_iterator __f)"},
{"lineNum":" 2872","line":"{"},
{"lineNum":" 2873","line":"    iterator __b = __base::begin();"},
{"lineNum":" 2874","line":"    difference_type __pos = __f - __b;"},
{"lineNum":" 2875","line":"    iterator __p = __b + __pos;"},
{"lineNum":" 2876","line":"    allocator_type& __a = __base::__alloc();"},
{"lineNum":" 2877","line":"    if (static_cast<size_t>(__pos) <= (__base::size() - 1) / 2)"},
{"lineNum":" 2878","line":"    {   // erase from front"},
{"lineNum":" 2879","line":"        _VSTD::move_backward(__b, __p, _VSTD::next(__p));"},
{"lineNum":" 2880","line":"        __alloc_traits::destroy(__a, _VSTD::addressof(*__b));"},
{"lineNum":" 2881","line":"        --__base::size();"},
{"lineNum":" 2882","line":"        ++__base::__start_;"},
{"lineNum":" 2883","line":"        __maybe_remove_front_spare();"},
{"lineNum":" 2884","line":"    }"},
{"lineNum":" 2885","line":"    else"},
{"lineNum":" 2886","line":"    {   // erase from back"},
{"lineNum":" 2887","line":"        iterator __i = _VSTD::move(_VSTD::next(__p), __base::end(), __p);"},
{"lineNum":" 2888","line":"        __alloc_traits::destroy(__a, _VSTD::addressof(*__i));"},
{"lineNum":" 2889","line":"        --__base::size();"},
{"lineNum":" 2890","line":"        __maybe_remove_back_spare();"},
{"lineNum":" 2891","line":"    }"},
{"lineNum":" 2892","line":"    return __base::begin() + __pos;"},
{"lineNum":" 2893","line":"}"},
{"lineNum":" 2894","line":""},
{"lineNum":" 2895","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2896","line":"typename deque<_Tp, _Allocator>::iterator"},
{"lineNum":" 2897","line":"deque<_Tp, _Allocator>::erase(const_iterator __f, const_iterator __l)"},
{"lineNum":" 2898","line":"{"},
{"lineNum":" 2899","line":"    difference_type __n = __l - __f;"},
{"lineNum":" 2900","line":"    iterator __b = __base::begin();"},
{"lineNum":" 2901","line":"    difference_type __pos = __f - __b;"},
{"lineNum":" 2902","line":"    iterator __p = __b + __pos;"},
{"lineNum":" 2903","line":"    if (__n > 0)"},
{"lineNum":" 2904","line":"    {"},
{"lineNum":" 2905","line":"        allocator_type& __a = __base::__alloc();"},
{"lineNum":" 2906","line":"        if (static_cast<size_t>(__pos) <= (__base::size() - __n) / 2)"},
{"lineNum":" 2907","line":"        {   // erase from front"},
{"lineNum":" 2908","line":"            iterator __i = _VSTD::move_backward(__b, __p, __p + __n);"},
{"lineNum":" 2909","line":"            for (; __b != __i; ++__b)"},
{"lineNum":" 2910","line":"                __alloc_traits::destroy(__a, _VSTD::addressof(*__b));"},
{"lineNum":" 2911","line":"            __base::size() -= __n;"},
{"lineNum":" 2912","line":"            __base::__start_ += __n;"},
{"lineNum":" 2913","line":"            while (__maybe_remove_front_spare()) {"},
{"lineNum":" 2914","line":"            }"},
{"lineNum":" 2915","line":"        }"},
{"lineNum":" 2916","line":"        else"},
{"lineNum":" 2917","line":"        {   // erase from back"},
{"lineNum":" 2918","line":"            iterator __i = _VSTD::move(__p + __n, __base::end(), __p);"},
{"lineNum":" 2919","line":"            for (iterator __e = __base::end(); __i != __e; ++__i)"},
{"lineNum":" 2920","line":"                __alloc_traits::destroy(__a, _VSTD::addressof(*__i));"},
{"lineNum":" 2921","line":"            __base::size() -= __n;"},
{"lineNum":" 2922","line":"            while (__maybe_remove_back_spare()) {"},
{"lineNum":" 2923","line":"            }"},
{"lineNum":" 2924","line":"        }"},
{"lineNum":" 2925","line":"    }"},
{"lineNum":" 2926","line":"    return __base::begin() + __pos;"},
{"lineNum":" 2927","line":"}"},
{"lineNum":" 2928","line":""},
{"lineNum":" 2929","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2930","line":"void"},
{"lineNum":" 2931","line":"deque<_Tp, _Allocator>::__erase_to_end(const_iterator __f)"},
{"lineNum":" 2932","line":"{"},
{"lineNum":" 2933","line":"    iterator __e = __base::end();"},
{"lineNum":" 2934","line":"    difference_type __n = __e - __f;"},
{"lineNum":" 2935","line":"    if (__n > 0)"},
{"lineNum":" 2936","line":"    {"},
{"lineNum":" 2937","line":"        allocator_type& __a = __base::__alloc();"},
{"lineNum":" 2938","line":"        iterator __b = __base::begin();"},
{"lineNum":" 2939","line":"        difference_type __pos = __f - __b;"},
{"lineNum":" 2940","line":"        for (iterator __p = __b + __pos; __p != __e; ++__p)"},
{"lineNum":" 2941","line":"            __alloc_traits::destroy(__a, _VSTD::addressof(*__p));"},
{"lineNum":" 2942","line":"        __base::size() -= __n;"},
{"lineNum":" 2943","line":"        while (__maybe_remove_back_spare()) {"},
{"lineNum":" 2944","line":"        }"},
{"lineNum":" 2945","line":"    }"},
{"lineNum":" 2946","line":"}"},
{"lineNum":" 2947","line":""},
{"lineNum":" 2948","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2949","line":"inline"},
{"lineNum":" 2950","line":"void"},
{"lineNum":" 2951","line":"deque<_Tp, _Allocator>::swap(deque& __c)"},
{"lineNum":" 2952","line":"#if _LIBCPP_STD_VER >= 14"},
{"lineNum":" 2953","line":"        _NOEXCEPT"},
{"lineNum":" 2954","line":"#else"},
{"lineNum":" 2955","line":"        _NOEXCEPT_(!__alloc_traits::propagate_on_container_swap::value ||"},
{"lineNum":" 2956","line":"                    __is_nothrow_swappable<allocator_type>::value)"},
{"lineNum":" 2957","line":"#endif"},
{"lineNum":" 2958","line":"{"},
{"lineNum":" 2959","line":"    __base::swap(__c);"},
{"lineNum":" 2960","line":"}"},
{"lineNum":" 2961","line":""},
{"lineNum":" 2962","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2963","line":"inline"},
{"lineNum":" 2964","line":"void"},
{"lineNum":" 2965","line":"deque<_Tp, _Allocator>::clear() _NOEXCEPT"},
{"lineNum":" 2966","line":"{"},
{"lineNum":" 2967","line":"    __base::clear();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2968","line":"}"},
{"lineNum":" 2969","line":""},
{"lineNum":" 2970","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2971","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2972","line":"bool"},
{"lineNum":" 2973","line":"operator==(const deque<_Tp, _Allocator>& __x, const deque<_Tp, _Allocator>& __y)"},
{"lineNum":" 2974","line":"{"},
{"lineNum":" 2975","line":"    const typename deque<_Tp, _Allocator>::size_type __sz = __x.size();"},
{"lineNum":" 2976","line":"    return __sz == __y.size() && _VSTD::equal(__x.begin(), __x.end(), __y.begin());"},
{"lineNum":" 2977","line":"}"},
{"lineNum":" 2978","line":""},
{"lineNum":" 2979","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2980","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2981","line":"bool"},
{"lineNum":" 2982","line":"operator!=(const deque<_Tp, _Allocator>& __x, const deque<_Tp, _Allocator>& __y)"},
{"lineNum":" 2983","line":"{"},
{"lineNum":" 2984","line":"    return !(__x == __y);"},
{"lineNum":" 2985","line":"}"},
{"lineNum":" 2986","line":""},
{"lineNum":" 2987","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2988","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2989","line":"bool"},
{"lineNum":" 2990","line":"operator< (const deque<_Tp, _Allocator>& __x, const deque<_Tp, _Allocator>& __y)"},
{"lineNum":" 2991","line":"{"},
{"lineNum":" 2992","line":"    return _VSTD::lexicographical_compare(__x.begin(), __x.end(), __y.begin(), __y.end());"},
{"lineNum":" 2993","line":"}"},
{"lineNum":" 2994","line":""},
{"lineNum":" 2995","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 2996","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 2997","line":"bool"},
{"lineNum":" 2998","line":"operator> (const deque<_Tp, _Allocator>& __x, const deque<_Tp, _Allocator>& __y)"},
{"lineNum":" 2999","line":"{"},
{"lineNum":" 3000","line":"    return __y < __x;"},
{"lineNum":" 3001","line":"}"},
{"lineNum":" 3002","line":""},
{"lineNum":" 3003","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 3004","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 3005","line":"bool"},
{"lineNum":" 3006","line":"operator>=(const deque<_Tp, _Allocator>& __x, const deque<_Tp, _Allocator>& __y)"},
{"lineNum":" 3007","line":"{"},
{"lineNum":" 3008","line":"    return !(__x < __y);"},
{"lineNum":" 3009","line":"}"},
{"lineNum":" 3010","line":""},
{"lineNum":" 3011","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 3012","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 3013","line":"bool"},
{"lineNum":" 3014","line":"operator<=(const deque<_Tp, _Allocator>& __x, const deque<_Tp, _Allocator>& __y)"},
{"lineNum":" 3015","line":"{"},
{"lineNum":" 3016","line":"    return !(__y < __x);"},
{"lineNum":" 3017","line":"}"},
{"lineNum":" 3018","line":""},
{"lineNum":" 3019","line":"template <class _Tp, class _Allocator>"},
{"lineNum":" 3020","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 3021","line":"void"},
{"lineNum":" 3022","line":"swap(deque<_Tp, _Allocator>& __x, deque<_Tp, _Allocator>& __y)"},
{"lineNum":" 3023","line":"    _NOEXCEPT_(_NOEXCEPT_(__x.swap(__y)))"},
{"lineNum":" 3024","line":"{"},
{"lineNum":" 3025","line":"    __x.swap(__y);"},
{"lineNum":" 3026","line":"}"},
{"lineNum":" 3027","line":""},
{"lineNum":" 3028","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":" 3029","line":"template <class _Tp, class _Allocator, class _Up>"},
{"lineNum":" 3030","line":"inline _LIBCPP_INLINE_VISIBILITY typename deque<_Tp, _Allocator>::size_type"},
{"lineNum":" 3031","line":"erase(deque<_Tp, _Allocator>& __c, const _Up& __v) {"},
{"lineNum":" 3032","line":"  auto __old_size = __c.size();"},
{"lineNum":" 3033","line":"  __c.erase(_VSTD::remove(__c.begin(), __c.end(), __v), __c.end());"},
{"lineNum":" 3034","line":"  return __old_size - __c.size();"},
{"lineNum":" 3035","line":"}"},
{"lineNum":" 3036","line":""},
{"lineNum":" 3037","line":"template <class _Tp, class _Allocator, class _Predicate>"},
{"lineNum":" 3038","line":"inline _LIBCPP_INLINE_VISIBILITY typename deque<_Tp, _Allocator>::size_type"},
{"lineNum":" 3039","line":"erase_if(deque<_Tp, _Allocator>& __c, _Predicate __pred) {"},
{"lineNum":" 3040","line":"  auto __old_size = __c.size();"},
{"lineNum":" 3041","line":"  __c.erase(_VSTD::remove_if(__c.begin(), __c.end(), __pred), __c.end());"},
{"lineNum":" 3042","line":"  return __old_size - __c.size();"},
{"lineNum":" 3043","line":"}"},
{"lineNum":" 3044","line":"#endif"},
{"lineNum":" 3045","line":""},
{"lineNum":" 3046","line":""},
{"lineNum":" 3047","line":"_LIBCPP_END_NAMESPACE_STD"},
{"lineNum":" 3048","line":""},
{"lineNum":" 3049","line":"_LIBCPP_POP_MACROS"},
{"lineNum":" 3050","line":""},
{"lineNum":" 3051","line":"#endif // _LIBCPP_DEQUE"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 101, "covered" : 46,};
var merged_data = [];
