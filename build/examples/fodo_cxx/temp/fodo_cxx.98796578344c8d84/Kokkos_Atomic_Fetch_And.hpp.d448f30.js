var data = {lines:[
{"lineNum":"    1","line":"/*"},
{"lineNum":"    2","line":"//@HEADER"},
{"lineNum":"    3","line":"// ************************************************************************"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"//                        Kokkos v. 3.0"},
{"lineNum":"    6","line":"//       Copyright (2020) National Technology & Engineering"},
{"lineNum":"    7","line":"//               Solutions of Sandia, LLC (NTESS)."},
{"lineNum":"    8","line":"//"},
{"lineNum":"    9","line":"// Under the terms of Contract DE-NA0003525 with NTESS,"},
{"lineNum":"   10","line":"// the U.S. Government retains certain rights in this software."},
{"lineNum":"   11","line":"//"},
{"lineNum":"   12","line":"// Redistribution and use in source and binary forms, with or without"},
{"lineNum":"   13","line":"// modification, are permitted provided that the following conditions are"},
{"lineNum":"   14","line":"// met:"},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"// 1. Redistributions of source code must retain the above copyright"},
{"lineNum":"   17","line":"// notice, this list of conditions and the following disclaimer."},
{"lineNum":"   18","line":"//"},
{"lineNum":"   19","line":"// 2. Redistributions in binary form must reproduce the above copyright"},
{"lineNum":"   20","line":"// notice, this list of conditions and the following disclaimer in the"},
{"lineNum":"   21","line":"// documentation and/or other materials provided with the distribution."},
{"lineNum":"   22","line":"//"},
{"lineNum":"   23","line":"// 3. Neither the name of the Corporation nor the names of the"},
{"lineNum":"   24","line":"// contributors may be used to endorse or promote products derived from"},
{"lineNum":"   25","line":"// this software without specific prior written permission."},
{"lineNum":"   26","line":"//"},
{"lineNum":"   27","line":"// THIS SOFTWARE IS PROVIDED BY NTESS \"AS IS\" AND ANY"},
{"lineNum":"   28","line":"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"},
{"lineNum":"   29","line":"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR"},
{"lineNum":"   30","line":"// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NTESS OR THE"},
{"lineNum":"   31","line":"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,"},
{"lineNum":"   32","line":"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,"},
{"lineNum":"   33","line":"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR"},
{"lineNum":"   34","line":"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF"},
{"lineNum":"   35","line":"// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING"},
{"lineNum":"   36","line":"// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"},
{"lineNum":"   37","line":"// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   38","line":"//"},
{"lineNum":"   39","line":"// Questions? Contact Christian R. Trott (crtrott@sandia.gov)"},
{"lineNum":"   40","line":"//"},
{"lineNum":"   41","line":"// ************************************************************************"},
{"lineNum":"   42","line":"//@HEADER"},
{"lineNum":"   43","line":"*/"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"#if defined(KOKKOS_ENABLE_RFO_PREFETCH)"},
{"lineNum":"   46","line":"#include <xmmintrin.h>"},
{"lineNum":"   47","line":"#endif"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"#include <Kokkos_Macros.hpp>"},
{"lineNum":"   50","line":"#if defined(KOKKOS_ATOMIC_HPP) && !defined(KOKKOS_ATOMIC_FETCH_AND_HPP)"},
{"lineNum":"   51","line":"#define KOKKOS_ATOMIC_FETCH_AND_HPP"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"namespace Kokkos {"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"//----------------------------------------------------------------------------"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"#if defined(KOKKOS_ENABLE_CUDA)"},
{"lineNum":"   58","line":"#if defined(__CUDA_ARCH__) || defined(KOKKOS_IMPL_CUDA_CLANG_WORKAROUND)"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"// Support for int, unsigned int, unsigned long long int, and float"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"__inline__ __device__ int atomic_fetch_and(volatile int* const dest,"},
{"lineNum":"   63","line":"                                           const int val) {"},
{"lineNum":"   64","line":"  return atomicAnd((int*)dest, val);"},
{"lineNum":"   65","line":"}"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"__inline__ __device__ unsigned int atomic_fetch_and("},
{"lineNum":"   68","line":"    volatile unsigned int* const dest, const unsigned int val) {"},
{"lineNum":"   69","line":"  return atomicAnd((unsigned int*)dest, val);"},
{"lineNum":"   70","line":"}"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"#if defined(__CUDA_ARCH__) && (350 <= __CUDA_ARCH__)"},
{"lineNum":"   73","line":"__inline__ __device__ unsigned long long int atomic_fetch_and("},
{"lineNum":"   74","line":"    volatile unsigned long long int* const dest,"},
{"lineNum":"   75","line":"    const unsigned long long int val) {"},
{"lineNum":"   76","line":"  return atomicAnd((unsigned long long int*)dest, val);"},
{"lineNum":"   77","line":"}"},
{"lineNum":"   78","line":"#endif"},
{"lineNum":"   79","line":"#endif"},
{"lineNum":"   80","line":"#endif"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"// 08/05/20 Overload to work around https://bugs.llvm.org/show_bug.cgi?id=46922"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"#if (defined(KOKKOS_ENABLE_CUDA) &&                   \\"},
{"lineNum":"   85","line":"     (defined(__CUDA_ARCH__) ||                       \\"},
{"lineNum":"   86","line":"      defined(KOKKOS_IMPL_CUDA_CLANG_WORKAROUND))) || \\"},
{"lineNum":"   87","line":"    (defined(KOKKOS_ENABLE_HIP))"},
{"lineNum":"   88","line":"__inline__ __device__ unsigned long atomic_fetch_and("},
{"lineNum":"   89","line":"    volatile unsigned long* const dest, const unsigned long val) {"},
{"lineNum":"   90","line":"  return atomic_fetch_and<unsigned long>(dest, val);"},
{"lineNum":"   91","line":"}"},
{"lineNum":"   92","line":"__inline__ __device__ long atomic_fetch_and(volatile long* const dest,"},
{"lineNum":"   93","line":"                                            long val) {"},
{"lineNum":"   94","line":"  return atomic_fetch_and<long>(dest, val);"},
{"lineNum":"   95","line":"}"},
{"lineNum":"   96","line":"#endif"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"//----------------------------------------------------------------------------"},
{"lineNum":"   99","line":"#if !defined(__CUDA_ARCH__) || defined(KOKKOS_IMPL_CUDA_CLANG_WORKAROUND)"},
{"lineNum":"  100","line":"#if defined(KOKKOS_ENABLE_GNU_ATOMICS) || defined(KOKKOS_ENABLE_INTEL_ATOMICS)"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"inline int atomic_fetch_and(volatile int* const dest, const int val) {"},
{"lineNum":"  103","line":"#if defined(KOKKOS_ENABLE_RFO_PREFETCH)"},
{"lineNum":"  104","line":"  _mm_prefetch((const char*)dest, _MM_HINT_ET0);"},
{"lineNum":"  105","line":"#endif"},
{"lineNum":"  106","line":"  return __sync_fetch_and_and(dest, val);"},
{"lineNum":"  107","line":"}"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"inline long int atomic_fetch_and(volatile long int* const dest,"},
{"lineNum":"  110","line":"                                 const long int val) {"},
{"lineNum":"  111","line":"#if defined(KOKKOS_ENABLE_RFO_PREFETCH)"},
{"lineNum":"  112","line":"  _mm_prefetch((const char*)dest, _MM_HINT_ET0);"},
{"lineNum":"  113","line":"#endif"},
{"lineNum":"  114","line":"  return __sync_fetch_and_and(dest, val);"},
{"lineNum":"  115","line":"}"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"#if defined(KOKKOS_ENABLE_GNU_ATOMICS)"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"inline unsigned int atomic_fetch_and(volatile unsigned int* const dest,"},
{"lineNum":"  120","line":"                                     const unsigned int val) {"},
{"lineNum":"  121","line":"#if defined(KOKKOS_ENABLE_RFO_PREFETCH)"},
{"lineNum":"  122","line":"  _mm_prefetch((const char*)dest, _MM_HINT_ET0);"},
{"lineNum":"  123","line":"#endif"},
{"lineNum":"  124","line":"  return __sync_fetch_and_and(dest, val);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  125","line":"}"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"inline unsigned long int atomic_fetch_and("},
{"lineNum":"  128","line":"    volatile unsigned long int* const dest, const unsigned long int val) {"},
{"lineNum":"  129","line":"#if defined(KOKKOS_ENABLE_RFO_PREFETCH)"},
{"lineNum":"  130","line":"  _mm_prefetch((const char*)dest, _MM_HINT_ET0);"},
{"lineNum":"  131","line":"#endif"},
{"lineNum":"  132","line":"  return __sync_fetch_and_and(dest, val);"},
{"lineNum":"  133","line":"}"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"inline unsigned long long int atomic_fetch_and("},
{"lineNum":"  136","line":"    volatile unsigned long long int* const dest,"},
{"lineNum":"  137","line":"    const unsigned long long int val) {"},
{"lineNum":"  138","line":"#if defined(KOKKOS_ENABLE_RFO_PREFETCH)"},
{"lineNum":"  139","line":"  _mm_prefetch((const char*)dest, _MM_HINT_ET0);"},
{"lineNum":"  140","line":"#endif"},
{"lineNum":"  141","line":"  return __sync_fetch_and_and(dest, val);"},
{"lineNum":"  142","line":"}"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"#endif"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"#elif defined(KOKKOS_ENABLE_OPENMP_ATOMICS)"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"template <typename T>"},
{"lineNum":"  151","line":"T atomic_fetch_and(volatile T* const dest, const T val) {"},
{"lineNum":"  152","line":"  T retval;"},
{"lineNum":"  153","line":"#pragma omp atomic capture"},
{"lineNum":"  154","line":"  {"},
{"lineNum":"  155","line":"    retval = dest[0];"},
{"lineNum":"  156","line":"    dest[0] &= val;"},
{"lineNum":"  157","line":"  }"},
{"lineNum":"  158","line":"  return retval;"},
{"lineNum":"  159","line":"}"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"#elif defined(KOKKOS_ENABLE_SERIAL_ATOMICS)"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"template <typename T>"},
{"lineNum":"  164","line":"T atomic_fetch_and(volatile T* const dest_v, const T val) {"},
{"lineNum":"  165","line":"  T* dest  = const_cast<T*>(dest_v);"},
{"lineNum":"  166","line":"  T retval = *dest;"},
{"lineNum":"  167","line":"  *dest &= val;"},
{"lineNum":"  168","line":"  return retval;"},
{"lineNum":"  169","line":"}"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"#endif"},
{"lineNum":"  172","line":"#endif"},
{"lineNum":"  173","line":"//----------------------------------------------------------------------------"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"// dummy for non-CUDA Kokkos headers being processed by NVCC"},
{"lineNum":"  176","line":"#if defined(__CUDA_ARCH__) && !defined(KOKKOS_ENABLE_CUDA)"},
{"lineNum":"  177","line":"template <typename T>"},
{"lineNum":"  178","line":"__inline__ __device__ T atomic_fetch_and(volatile T* const,"},
{"lineNum":"  179","line":"                                         Kokkos::Impl::identity_t<T>) {"},
{"lineNum":"  180","line":"  return T();"},
{"lineNum":"  181","line":"}"},
{"lineNum":"  182","line":"#endif"},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"// Simpler version of atomic_fetch_and without the fetch"},
{"lineNum":"  185","line":"template <typename T>"},
{"lineNum":"  186","line":"KOKKOS_INLINE_FUNCTION void atomic_and(volatile T* const dest, const T src) {"},
{"lineNum":"  187","line":"  (void)atomic_fetch_and(dest, src);"},
{"lineNum":"  188","line":"}"},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"}  // namespace Kokkos"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 1, "covered" : 0,};
var merged_data = [];
