var data = {lines:[
{"lineNum":"    1","line":"/*! \\file base_class.hpp"},
{"lineNum":"    2","line":"    \\brief Support for base classes (virtual and non-virtual)"},
{"lineNum":"    3","line":"    \\ingroup OtherTypes */"},
{"lineNum":"    4","line":"/*"},
{"lineNum":"    5","line":"  Copyright (c) 2014, Randolph Voorhies, Shane Grant"},
{"lineNum":"    6","line":"  All rights reserved."},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"  Redistribution and use in source and binary forms, with or without"},
{"lineNum":"    9","line":"  modification, are permitted provided that the following conditions are met:"},
{"lineNum":"   10","line":"      * Redistributions of source code must retain the above copyright"},
{"lineNum":"   11","line":"        notice, this list of conditions and the following disclaimer."},
{"lineNum":"   12","line":"      * Redistributions in binary form must reproduce the above copyright"},
{"lineNum":"   13","line":"        notice, this list of conditions and the following disclaimer in the"},
{"lineNum":"   14","line":"        documentation and/or other materials provided with the distribution."},
{"lineNum":"   15","line":"      * Neither the name of cereal nor the"},
{"lineNum":"   16","line":"        names of its contributors may be used to endorse or promote products"},
{"lineNum":"   17","line":"        derived from this software without specific prior written permission."},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND"},
{"lineNum":"   20","line":"  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED"},
{"lineNum":"   21","line":"  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE"},
{"lineNum":"   22","line":"  DISCLAIMED. IN NO EVENT SHALL RANDOLPH VOORHIES OR SHANE GRANT BE LIABLE FOR ANY"},
{"lineNum":"   23","line":"  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES"},
{"lineNum":"   24","line":"  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;"},
{"lineNum":"   25","line":"  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"},
{"lineNum":"   26","line":"  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT"},
{"lineNum":"   27","line":"  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"},
{"lineNum":"   28","line":"  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   29","line":"*/"},
{"lineNum":"   30","line":"#ifndef CEREAL_TYPES_BASE_CLASS_HPP_"},
{"lineNum":"   31","line":"#define CEREAL_TYPES_BASE_CLASS_HPP_"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"#include \"cereal/details/traits.hpp\""},
{"lineNum":"   34","line":"#include \"cereal/details/polymorphic_impl_fwd.hpp\""},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"namespace cereal"},
{"lineNum":"   37","line":"{"},
{"lineNum":"   38","line":"  namespace base_class_detail"},
{"lineNum":"   39","line":"  {"},
{"lineNum":"   40","line":"    //! Used to register polymorphic relations and avoid the need to include"},
{"lineNum":"   41","line":"    //! polymorphic.hpp when no polymorphism is used"},
{"lineNum":"   42","line":"    /*! @internal */"},
{"lineNum":"   43","line":"    template <class Base, class Derived, bool IsPolymorphic = std::is_polymorphic<Base>::value>"},
{"lineNum":"   44","line":"    struct RegisterPolymorphicBaseClass"},
{"lineNum":"   45","line":"    {"},
{"lineNum":"   46","line":"      static void bind()"},
{"lineNum":"   47","line":"      { }"},
{"lineNum":"   48","line":"    };"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"    //! Polymorphic version"},
{"lineNum":"   51","line":"    /*! @internal */"},
{"lineNum":"   52","line":"    template <class Base, class Derived>"},
{"lineNum":"   53","line":"    struct RegisterPolymorphicBaseClass<Base, Derived, true>"},
{"lineNum":"   54","line":"    {"},
{"lineNum":"   55","line":"      static void bind()"},
{"lineNum":"   56","line":"      { detail::RegisterPolymorphicCaster<Base, Derived>::bind(); }","class":"lineNoCov","hits":"0","possible_hits":"72",},
{"lineNum":"   57","line":"    };"},
{"lineNum":"   58","line":"  }"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"  //! Casts a derived class to its non-virtual base class in a way that safely supports abstract classes"},
{"lineNum":"   61","line":"  /*! This should be used in cases when a derived type needs to serialize its base type. This is better than directly"},
{"lineNum":"   62","line":"      using static_cast, as it allows for serialization of pure virtual (abstract) base classes."},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"      This also automatically registers polymorphic relation between the base and derived class, assuming they"},
{"lineNum":"   65","line":"      are indeed polymorphic. Note this is not the same as polymorphic type registration. For more information"},
{"lineNum":"   66","line":"      see the documentation on polymorphism. If using a polymorphic class, be sure to include support for"},
{"lineNum":"   67","line":"      polymorphism (cereal/types/polymorphic.hpp)."},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"      \\sa virtual_base_class"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"      @code{.cpp}"},
{"lineNum":"   72","line":"      struct MyBase"},
{"lineNum":"   73","line":"      {"},
{"lineNum":"   74","line":"        int x;"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"        virtual void foo() = 0;"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"        template <class Archive>"},
{"lineNum":"   79","line":"        void serialize( Archive & ar )"},
{"lineNum":"   80","line":"        {"},
{"lineNum":"   81","line":"          ar( x );"},
{"lineNum":"   82","line":"        }"},
{"lineNum":"   83","line":"      };"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"      struct MyDerived : public MyBase //<-- Note non-virtual inheritance"},
{"lineNum":"   86","line":"      {"},
{"lineNum":"   87","line":"        int y;"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"        virtual void foo() {};"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"        template <class Archive>"},
{"lineNum":"   92","line":"        void serialize( Archive & ar )"},
{"lineNum":"   93","line":"        {"},
{"lineNum":"   94","line":"          ar( cereal::base_class<MyBase>(this) );"},
{"lineNum":"   95","line":"          ar( y );"},
{"lineNum":"   96","line":"        }"},
{"lineNum":"   97","line":"      };"},
{"lineNum":"   98","line":"      @endcode */"},
{"lineNum":"   99","line":"  template<class Base>"},
{"lineNum":"  100","line":"    struct base_class : private traits::detail::BaseCastBase"},
{"lineNum":"  101","line":"    {"},
{"lineNum":"  102","line":"      template<class Derived>"},
{"lineNum":"  103","line":"        base_class(Derived const * derived) :"},
{"lineNum":"  104","line":"          base_ptr(const_cast<Base*>(static_cast<Base const *>(derived)))","class":"lineNoCov","hits":"0","possible_hits":"32",},
{"lineNum":"  105","line":"      {"},
{"lineNum":"  106","line":"        static_assert( std::is_base_of<Base, Derived>::value, \"Can only use base_class on a valid base class\" );"},
{"lineNum":"  107","line":"        base_class_detail::RegisterPolymorphicBaseClass<Base, Derived>::bind();"},
{"lineNum":"  108","line":"      }"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"        Base * base_ptr;"},
{"lineNum":"  111","line":"    };"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"  //! Casts a derived class to its virtual base class in a way that allows cereal to track inheritance"},
{"lineNum":"  114","line":"  /*! This should be used in cases when a derived type features virtual inheritance from some"},
{"lineNum":"  115","line":"      base type.  This allows cereal to track the inheritance and to avoid making duplicate copies"},
{"lineNum":"  116","line":"      during serialization."},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"      It is safe to use virtual_base_class in all circumstances for serializing base classes, even in cases"},
{"lineNum":"  119","line":"      where virtual inheritance does not take place, though it may be slightly faster to utilize"},
{"lineNum":"  120","line":"      cereal::base_class<> if you do not need to worry about virtual inheritance."},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"      This also automatically registers polymorphic relation between the base and derived class, assuming they"},
{"lineNum":"  123","line":"      are indeed polymorphic. Note this is not the same as polymorphic type registration. For more information"},
{"lineNum":"  124","line":"      see the documentation on polymorphism. If using a polymorphic class, be sure to include support for"},
{"lineNum":"  125","line":"      polymorphism (cereal/types/polymorphic.hpp)."},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"      \\sa base_class"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"      @code{.cpp}"},
{"lineNum":"  130","line":"      struct MyBase"},
{"lineNum":"  131","line":"      {"},
{"lineNum":"  132","line":"        int x;"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"        template <class Archive>"},
{"lineNum":"  135","line":"        void serialize( Archive & ar )"},
{"lineNum":"  136","line":"        {"},
{"lineNum":"  137","line":"          ar( x );"},
{"lineNum":"  138","line":"        }"},
{"lineNum":"  139","line":"      };"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"      struct MyLeft : virtual MyBase //<-- Note the virtual inheritance"},
{"lineNum":"  142","line":"      {"},
{"lineNum":"  143","line":"        int y;"},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"        template <class Archive>"},
{"lineNum":"  146","line":"        void serialize( Archive & ar )"},
{"lineNum":"  147","line":"        {"},
{"lineNum":"  148","line":"          ar( cereal::virtual_base_class<MyBase>( this ) );"},
{"lineNum":"  149","line":"          ar( y );"},
{"lineNum":"  150","line":"        }"},
{"lineNum":"  151","line":"      };"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"      struct MyRight : virtual MyBase"},
{"lineNum":"  154","line":"      {"},
{"lineNum":"  155","line":"        int z;"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"        template <class Archive>"},
{"lineNum":"  158","line":"        void serialize( Archive & ar )"},
{"lineNum":"  159","line":"        {"},
{"lineNum":"  160","line":"          ar( cereal::virtual_base_clas<MyBase>( this ) );"},
{"lineNum":"  161","line":"          ar( z );"},
{"lineNum":"  162","line":"        }"},
{"lineNum":"  163","line":"      };"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"      // diamond virtual inheritance; contains one copy of each base class"},
{"lineNum":"  166","line":"      struct MyDerived : virtual MyLeft, virtual MyRight"},
{"lineNum":"  167","line":"      {"},
{"lineNum":"  168","line":"        int a;"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"        template <class Archive>"},
{"lineNum":"  171","line":"        void serialize( Archive & ar )"},
{"lineNum":"  172","line":"        {"},
{"lineNum":"  173","line":"          ar( cereal::virtual_base_class<MyLeft>( this ) );  // safely serialize data members in MyLeft"},
{"lineNum":"  174","line":"          ar( cereal::virtual_base_class<MyRight>( this ) ); // safely serialize data members in MyRight"},
{"lineNum":"  175","line":"          ar( a );"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"          // Because we used virtual_base_class, cereal will ensure that only one instance of MyBase is"},
{"lineNum":"  178","line":"          // serialized as we traverse the inheritance heirarchy. This means that there will be one copy"},
{"lineNum":"  179","line":"          // each of the variables x, y, z, and a"},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"          // If we had chosen to use static_cast<> instead, cereal would perform no tracking and"},
{"lineNum":"  182","line":"          // assume that every base class should be serialized (in this case leading to a duplicate"},
{"lineNum":"  183","line":"          // serialization of MyBase due to diamond inheritance"},
{"lineNum":"  184","line":"      };"},
{"lineNum":"  185","line":"     }"},
{"lineNum":"  186","line":"     @endcode */"},
{"lineNum":"  187","line":"  template<class Base>"},
{"lineNum":"  188","line":"    struct virtual_base_class : private traits::detail::BaseCastBase"},
{"lineNum":"  189","line":"    {"},
{"lineNum":"  190","line":"      template<class Derived>"},
{"lineNum":"  191","line":"        virtual_base_class(Derived const * derived) :"},
{"lineNum":"  192","line":"          base_ptr(const_cast<Base*>(static_cast<Base const *>(derived)))","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  193","line":"      {"},
{"lineNum":"  194","line":"        static_assert( std::is_base_of<Base, Derived>::value, \"Can only use virtual_base_class on a valid base class\" );"},
{"lineNum":"  195","line":"        base_class_detail::RegisterPolymorphicBaseClass<Base, Derived>::bind();"},
{"lineNum":"  196","line":"      }"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"        Base * base_ptr;"},
{"lineNum":"  199","line":"    };"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"} // namespace cereal"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"#endif // CEREAL_TYPES_BASE_CLASS_HPP_"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 3, "covered" : 0,};
var merged_data = [];
