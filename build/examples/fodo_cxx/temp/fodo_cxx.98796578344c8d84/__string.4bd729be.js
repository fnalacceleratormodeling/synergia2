var data = {lines:[
{"lineNum":"    1","line":"// -*- C++ -*-"},
{"lineNum":"    2","line":"//===-------------------------- __string ----------------------------------===//"},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions."},
{"lineNum":"    5","line":"// See https://llvm.org/LICENSE.txt for license information."},
{"lineNum":"    6","line":"// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef _LIBCPP___STRING"},
{"lineNum":"   11","line":"#define _LIBCPP___STRING"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"#include <__config>"},
{"lineNum":"   14","line":"#include <__algorithm/copy.h>"},
{"lineNum":"   15","line":"#include <__algorithm/copy_backward.h>"},
{"lineNum":"   16","line":"#include <__algorithm/copy_n.h>"},
{"lineNum":"   17","line":"#include <__algorithm/fill_n.h>"},
{"lineNum":"   18","line":"#include <__algorithm/find_first_of.h>"},
{"lineNum":"   19","line":"#include <__algorithm/find_end.h>"},
{"lineNum":"   20","line":"#include <__algorithm/min.h>"},
{"lineNum":"   21","line":"#include <__functional/hash.h>     // for __murmur2_or_cityhash"},
{"lineNum":"   22","line":"#include <__iterator/iterator_traits.h>"},
{"lineNum":"   23","line":"#include <cstdio>      // for EOF"},
{"lineNum":"   24","line":"#include <cstdint>     // for uint_least16_t"},
{"lineNum":"   25","line":"#include <cstring>     // for memcpy"},
{"lineNum":"   26","line":"#include <cwchar>      // for wmemcpy"},
{"lineNum":"   27","line":"#include <type_traits> // for __libcpp_is_constant_evaluated"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"#include <__debug>"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"},
{"lineNum":"   32","line":"#pragma GCC system_header"},
{"lineNum":"   33","line":"#endif"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"_LIBCPP_PUSH_MACROS"},
{"lineNum":"   36","line":"#include <__undef_macros>"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"_LIBCPP_BEGIN_NAMESPACE_STD"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"// The the extern template ABI lists are kept outside of <string> to improve the"},
{"lineNum":"   42","line":"// readability of that header."},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"// The extern template ABI lists are kept outside of <string> to improve the"},
{"lineNum":"   45","line":"// readability of that header. We maintain 2 ABI lists:"},
{"lineNum":"   46","line":"// - _LIBCPP_STRING_V1_EXTERN_TEMPLATE_LIST"},
{"lineNum":"   47","line":"// - _LIBCPP_STRING_UNSTABLE_EXTERN_TEMPLATE_LIST"},
{"lineNum":"   48","line":"// As the name implies, the ABI lists define the V1 (Stable) and unstable ABI."},
{"lineNum":"   49","line":"//"},
{"lineNum":"   50","line":"// For unstable, we may explicitly remove function that are external in V1,"},
{"lineNum":"   51","line":"// and add (new) external functions to better control inlining and compiler"},
{"lineNum":"   52","line":"// optimization opportunities."},
{"lineNum":"   53","line":"//"},
{"lineNum":"   54","line":"// For stable, the ABI list should rarely change, except for adding new"},
{"lineNum":"   55","line":"// functions supporting new c++ version / API changes. Typically entries"},
{"lineNum":"   56","line":"// must never be removed from the stable list."},
{"lineNum":"   57","line":"#define _LIBCPP_STRING_V1_EXTERN_TEMPLATE_LIST(_Func, _CharType) \\"},
{"lineNum":"   58","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::replace(size_type, size_type, value_type const*, size_type)) \\"},
{"lineNum":"   59","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::size_type basic_string<_CharType>::rfind(value_type const*, size_type, size_type) const) \\"},
{"lineNum":"   60","line":"  _Func(_LIBCPP_FUNC_VIS void basic_string<_CharType>::__init(value_type const*, size_type, size_type)) \\"},
{"lineNum":"   61","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::basic_string(basic_string const&)) \\"},
{"lineNum":"   62","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::replace(size_type, size_type, value_type const*)) \\"},
{"lineNum":"   63","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::basic_string(basic_string const&, allocator<_CharType> const&)) \\"},
{"lineNum":"   64","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::size_type basic_string<_CharType>::find_last_not_of(value_type const*, size_type, size_type) const) \\"},
{"lineNum":"   65","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::~basic_string()) \\"},
{"lineNum":"   66","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::size_type basic_string<_CharType>::find_first_not_of(value_type const*, size_type, size_type) const) \\"},
{"lineNum":"   67","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::insert(size_type, size_type, value_type)) \\"},
{"lineNum":"   68","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::operator=(value_type)) \\"},
{"lineNum":"   69","line":"  _Func(_LIBCPP_FUNC_VIS void basic_string<_CharType>::__init(value_type const*, size_type)) \\"},
{"lineNum":"   70","line":"  _Func(_LIBCPP_FUNC_VIS const _CharType& basic_string<_CharType>::at(size_type) const) \\"},
{"lineNum":"   71","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::insert(size_type, value_type const*, size_type)) \\"},
{"lineNum":"   72","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::size_type basic_string<_CharType>::find_first_of(value_type const*, size_type, size_type) const) \\"},
{"lineNum":"   73","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::replace(size_type, size_type, size_type, value_type)) \\"},
{"lineNum":"   74","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::assign(value_type const*, size_type)) \\"},
{"lineNum":"   75","line":"  _Func(_LIBCPP_FUNC_VIS void basic_string<_CharType>::reserve(size_type)) \\"},
{"lineNum":"   76","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::append(value_type const*, size_type)) \\"},
{"lineNum":"   77","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::assign(basic_string const&, size_type, size_type)) \\"},
{"lineNum":"   78","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::size_type basic_string<_CharType>::copy(value_type*, size_type, size_type) const) \\"},
{"lineNum":"   79","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::basic_string(basic_string const&, size_type, size_type, allocator<_CharType> const&)) \\"},
{"lineNum":"   80","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::size_type basic_string<_CharType>::find(value_type, size_type) const) \\"},
{"lineNum":"   81","line":"  _Func(_LIBCPP_FUNC_VIS void basic_string<_CharType>::__init(size_type, value_type)) \\"},
{"lineNum":"   82","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::insert(size_type, value_type const*)) \\"},
{"lineNum":"   83","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::size_type basic_string<_CharType>::find_last_of(value_type const*, size_type, size_type) const) \\"},
{"lineNum":"   84","line":"  _Func(_LIBCPP_FUNC_VIS void basic_string<_CharType>::__grow_by(size_type, size_type, size_type, size_type, size_type, size_type)) \\"},
{"lineNum":"   85","line":"  _Func(_LIBCPP_FUNC_VIS void basic_string<_CharType>::__grow_by_and_replace(size_type, size_type, size_type, size_type, size_type, size_type, value_type const*)) \\"},
{"lineNum":"   86","line":"  _Func(_LIBCPP_FUNC_VIS void basic_string<_CharType>::push_back(value_type)) \\"},
{"lineNum":"   87","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::append(size_type, value_type)) \\"},
{"lineNum":"   88","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::size_type basic_string<_CharType>::rfind(value_type, size_type) const) \\"},
{"lineNum":"   89","line":"  _Func(_LIBCPP_FUNC_VIS const basic_string<_CharType>::size_type basic_string<_CharType>::npos) \\"},
{"lineNum":"   90","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::assign(size_type, value_type)) \\"},
{"lineNum":"   91","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::erase(size_type, size_type)) \\"},
{"lineNum":"   92","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::append(basic_string const&, size_type, size_type)) \\"},
{"lineNum":"   93","line":"  _Func(_LIBCPP_FUNC_VIS int basic_string<_CharType>::compare(value_type const*) const) \\"},
{"lineNum":"   94","line":"  _Func(_LIBCPP_FUNC_VIS int basic_string<_CharType>::compare(size_type, size_type, value_type const*) const) \\"},
{"lineNum":"   95","line":"  _Func(_LIBCPP_FUNC_VIS _CharType& basic_string<_CharType>::at(size_type)) \\"},
{"lineNum":"   96","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::assign(value_type const*)) \\"},
{"lineNum":"   97","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::size_type basic_string<_CharType>::find(value_type const*, size_type, size_type) const) \\"},
{"lineNum":"   98","line":"  _Func(_LIBCPP_FUNC_VIS int basic_string<_CharType>::compare(size_type, size_type, basic_string const&, size_type, size_type) const) \\"},
{"lineNum":"   99","line":"  _Func(_LIBCPP_FUNC_VIS int basic_string<_CharType>::compare(size_type, size_type, value_type const*, size_type) const) \\"},
{"lineNum":"  100","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::operator=(basic_string const&)) \\"},
{"lineNum":"  101","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::append(value_type const*)) \\"},
{"lineNum":"  102","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::replace(size_type, size_type, basic_string const&, size_type, size_type)) \\"},
{"lineNum":"  103","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::iterator basic_string<_CharType>::insert(basic_string::const_iterator, value_type)) \\"},
{"lineNum":"  104","line":"  _Func(_LIBCPP_FUNC_VIS void basic_string<_CharType>::resize(size_type, value_type)) \\"},
{"lineNum":"  105","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::insert(size_type, basic_string const&, size_type, size_type))"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"#define _LIBCPP_STRING_UNSTABLE_EXTERN_TEMPLATE_LIST(_Func, _CharType) \\"},
{"lineNum":"  108","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::replace(size_type, size_type, value_type const*, size_type)) \\"},
{"lineNum":"  109","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::size_type basic_string<_CharType>::rfind(value_type const*, size_type, size_type) const) \\"},
{"lineNum":"  110","line":"  _Func(_LIBCPP_FUNC_VIS void basic_string<_CharType>::__init(value_type const*, size_type, size_type)) \\"},
{"lineNum":"  111","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::replace(size_type, size_type, value_type const*)) \\"},
{"lineNum":"  112","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::size_type basic_string<_CharType>::find_last_not_of(value_type const*, size_type, size_type) const) \\"},
{"lineNum":"  113","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::~basic_string()) \\"},
{"lineNum":"  114","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::size_type basic_string<_CharType>::find_first_not_of(value_type const*, size_type, size_type) const) \\"},
{"lineNum":"  115","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::insert(size_type, size_type, value_type)) \\"},
{"lineNum":"  116","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::operator=(value_type)) \\"},
{"lineNum":"  117","line":"  _Func(_LIBCPP_FUNC_VIS void basic_string<_CharType>::__init(value_type const*, size_type)) \\"},
{"lineNum":"  118","line":"  _Func(_LIBCPP_FUNC_VIS void basic_string<_CharType>::__init_copy_ctor_external(value_type const*, size_type)) \\"},
{"lineNum":"  119","line":"  _Func(_LIBCPP_FUNC_VIS const _CharType& basic_string<_CharType>::at(size_type) const) \\"},
{"lineNum":"  120","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::insert(size_type, value_type const*, size_type)) \\"},
{"lineNum":"  121","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::size_type basic_string<_CharType>::find_first_of(value_type const*, size_type, size_type) const) \\"},
{"lineNum":"  122","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::replace(size_type, size_type, size_type, value_type)) \\"},
{"lineNum":"  123","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::__assign_external(value_type const*, size_type)) \\"},
{"lineNum":"  124","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::__assign_external(value_type const*)) \\"},
{"lineNum":"  125","line":"  _Func(_LIBCPP_FUNC_VIS void basic_string<_CharType>::reserve(size_type)) \\"},
{"lineNum":"  126","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::append(value_type const*, size_type)) \\"},
{"lineNum":"  127","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::assign(basic_string const&, size_type, size_type)) \\"},
{"lineNum":"  128","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::size_type basic_string<_CharType>::copy(value_type*, size_type, size_type) const) \\"},
{"lineNum":"  129","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::basic_string(basic_string const&, size_type, size_type, allocator<_CharType> const&)) \\"},
{"lineNum":"  130","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::size_type basic_string<_CharType>::find(value_type, size_type) const) \\"},
{"lineNum":"  131","line":"  _Func(_LIBCPP_FUNC_VIS void basic_string<_CharType>::__init(size_type, value_type)) \\"},
{"lineNum":"  132","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::insert(size_type, value_type const*)) \\"},
{"lineNum":"  133","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::size_type basic_string<_CharType>::find_last_of(value_type const*, size_type, size_type) const) \\"},
{"lineNum":"  134","line":"  _Func(_LIBCPP_FUNC_VIS void basic_string<_CharType>::__grow_by(size_type, size_type, size_type, size_type, size_type, size_type)) \\"},
{"lineNum":"  135","line":"  _Func(_LIBCPP_FUNC_VIS void basic_string<_CharType>::__grow_by_and_replace(size_type, size_type, size_type, size_type, size_type, size_type, value_type const*)) \\"},
{"lineNum":"  136","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::__assign_no_alias<false>(value_type const*, size_type)) \\"},
{"lineNum":"  137","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::__assign_no_alias<true>(value_type const*, size_type)) \\"},
{"lineNum":"  138","line":"  _Func(_LIBCPP_FUNC_VIS void basic_string<_CharType>::push_back(value_type)) \\"},
{"lineNum":"  139","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::append(size_type, value_type)) \\"},
{"lineNum":"  140","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::size_type basic_string<_CharType>::rfind(value_type, size_type) const) \\"},
{"lineNum":"  141","line":"  _Func(_LIBCPP_FUNC_VIS const basic_string<_CharType>::size_type basic_string<_CharType>::npos) \\"},
{"lineNum":"  142","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::assign(size_type, value_type)) \\"},
{"lineNum":"  143","line":"  _Func(_LIBCPP_FUNC_VIS void basic_string<_CharType>::__erase_external_with_move(size_type, size_type)) \\"},
{"lineNum":"  144","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::append(basic_string const&, size_type, size_type)) \\"},
{"lineNum":"  145","line":"  _Func(_LIBCPP_FUNC_VIS int basic_string<_CharType>::compare(value_type const*) const) \\"},
{"lineNum":"  146","line":"  _Func(_LIBCPP_FUNC_VIS int basic_string<_CharType>::compare(size_type, size_type, value_type const*) const) \\"},
{"lineNum":"  147","line":"  _Func(_LIBCPP_FUNC_VIS _CharType& basic_string<_CharType>::at(size_type)) \\"},
{"lineNum":"  148","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::size_type basic_string<_CharType>::find(value_type const*, size_type, size_type) const) \\"},
{"lineNum":"  149","line":"  _Func(_LIBCPP_FUNC_VIS int basic_string<_CharType>::compare(size_type, size_type, basic_string const&, size_type, size_type) const) \\"},
{"lineNum":"  150","line":"  _Func(_LIBCPP_FUNC_VIS int basic_string<_CharType>::compare(size_type, size_type, value_type const*, size_type) const) \\"},
{"lineNum":"  151","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::append(value_type const*)) \\"},
{"lineNum":"  152","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::replace(size_type, size_type, basic_string const&, size_type, size_type)) \\"},
{"lineNum":"  153","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>::iterator basic_string<_CharType>::insert(basic_string::const_iterator, value_type)) \\"},
{"lineNum":"  154","line":"  _Func(_LIBCPP_FUNC_VIS void basic_string<_CharType>::resize(size_type, value_type)) \\"},
{"lineNum":"  155","line":"  _Func(_LIBCPP_FUNC_VIS basic_string<_CharType>& basic_string<_CharType>::insert(size_type, basic_string const&, size_type, size_type))"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"// char_traits"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"template <class _CharT>"},
{"lineNum":"  161","line":"struct _LIBCPP_TEMPLATE_VIS char_traits"},
{"lineNum":"  162","line":"{"},
{"lineNum":"  163","line":"    typedef _CharT    char_type;"},
{"lineNum":"  164","line":"    typedef int       int_type;"},
{"lineNum":"  165","line":"    typedef streamoff off_type;"},
{"lineNum":"  166","line":"    typedef streampos pos_type;"},
{"lineNum":"  167","line":"    typedef mbstate_t state_type;"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"    static inline void _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  170","line":"        assign(char_type& __c1, const char_type& __c2) _NOEXCEPT {__c1 = __c2;}"},
{"lineNum":"  171","line":"    static inline _LIBCPP_CONSTEXPR bool eq(char_type __c1, char_type __c2) _NOEXCEPT"},
{"lineNum":"  172","line":"        {return __c1 == __c2;}"},
{"lineNum":"  173","line":"    static inline _LIBCPP_CONSTEXPR bool lt(char_type __c1, char_type __c2) _NOEXCEPT"},
{"lineNum":"  174","line":"        {return __c1 < __c2;}"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"    static _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  177","line":"    int compare(const char_type* __s1, const char_type* __s2, size_t __n);"},
{"lineNum":"  178","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  179","line":"    size_t length(const char_type* __s);"},
{"lineNum":"  180","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  181","line":"    const char_type* find(const char_type* __s, size_t __n, const char_type& __a);"},
{"lineNum":"  182","line":"    static _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  183","line":"    char_type*       move(char_type* __s1, const char_type* __s2, size_t __n);"},
{"lineNum":"  184","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  185","line":"    static _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  186","line":"    char_type*       copy(char_type* __s1, const char_type* __s2, size_t __n);"},
{"lineNum":"  187","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  188","line":"    static _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  189","line":"    char_type*       assign(char_type* __s, size_t __n, char_type __a);"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"    static inline _LIBCPP_CONSTEXPR int_type  not_eof(int_type __c) _NOEXCEPT"},
{"lineNum":"  192","line":"        {return eq_int_type(__c, eof()) ? ~eof() : __c;}"},
{"lineNum":"  193","line":"    static inline _LIBCPP_CONSTEXPR char_type to_char_type(int_type __c) _NOEXCEPT"},
{"lineNum":"  194","line":"        {return char_type(__c);}"},
{"lineNum":"  195","line":"    static inline _LIBCPP_CONSTEXPR int_type  to_int_type(char_type __c) _NOEXCEPT"},
{"lineNum":"  196","line":"        {return int_type(__c);}"},
{"lineNum":"  197","line":"    static inline _LIBCPP_CONSTEXPR bool      eq_int_type(int_type __c1, int_type __c2) _NOEXCEPT"},
{"lineNum":"  198","line":"        {return __c1 == __c2;}"},
{"lineNum":"  199","line":"    static inline _LIBCPP_CONSTEXPR int_type  eof() _NOEXCEPT"},
{"lineNum":"  200","line":"        {return int_type(EOF);}"},
{"lineNum":"  201","line":"};"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"template <class _CharT>"},
{"lineNum":"  204","line":"_LIBCPP_CONSTEXPR_AFTER_CXX14 int"},
{"lineNum":"  205","line":"char_traits<_CharT>::compare(const char_type* __s1, const char_type* __s2, size_t __n)"},
{"lineNum":"  206","line":"{"},
{"lineNum":"  207","line":"    for (; __n; --__n, ++__s1, ++__s2)"},
{"lineNum":"  208","line":"    {"},
{"lineNum":"  209","line":"        if (lt(*__s1, *__s2))"},
{"lineNum":"  210","line":"            return -1;"},
{"lineNum":"  211","line":"        if (lt(*__s2, *__s1))"},
{"lineNum":"  212","line":"            return 1;"},
{"lineNum":"  213","line":"    }"},
{"lineNum":"  214","line":"    return 0;"},
{"lineNum":"  215","line":"}"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"template <class _CharT>"},
{"lineNum":"  218","line":"inline"},
{"lineNum":"  219","line":"_LIBCPP_CONSTEXPR_AFTER_CXX14 size_t"},
{"lineNum":"  220","line":"char_traits<_CharT>::length(const char_type* __s)"},
{"lineNum":"  221","line":"{"},
{"lineNum":"  222","line":"    size_t __len = 0;"},
{"lineNum":"  223","line":"    for (; !eq(*__s, char_type(0)); ++__s)"},
{"lineNum":"  224","line":"        ++__len;"},
{"lineNum":"  225","line":"    return __len;"},
{"lineNum":"  226","line":"}"},
{"lineNum":"  227","line":""},
{"lineNum":"  228","line":"template <class _CharT>"},
{"lineNum":"  229","line":"inline"},
{"lineNum":"  230","line":"_LIBCPP_CONSTEXPR_AFTER_CXX14 const _CharT*"},
{"lineNum":"  231","line":"char_traits<_CharT>::find(const char_type* __s, size_t __n, const char_type& __a)"},
{"lineNum":"  232","line":"{"},
{"lineNum":"  233","line":"    for (; __n; --__n)"},
{"lineNum":"  234","line":"    {"},
{"lineNum":"  235","line":"        if (eq(*__s, __a))"},
{"lineNum":"  236","line":"            return __s;"},
{"lineNum":"  237","line":"        ++__s;"},
{"lineNum":"  238","line":"    }"},
{"lineNum":"  239","line":"    return nullptr;"},
{"lineNum":"  240","line":"}"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"template <class _CharT>"},
{"lineNum":"  243","line":"_LIBCPP_CONSTEXPR_AFTER_CXX17 _CharT*"},
{"lineNum":"  244","line":"char_traits<_CharT>::move(char_type* __s1, const char_type* __s2, size_t __n)"},
{"lineNum":"  245","line":"{"},
{"lineNum":"  246","line":"    if (__n == 0) return __s1;"},
{"lineNum":"  247","line":"    char_type* __r = __s1;"},
{"lineNum":"  248","line":"    if (__s1 < __s2)"},
{"lineNum":"  249","line":"    {"},
{"lineNum":"  250","line":"        for (; __n; --__n, ++__s1, ++__s2)"},
{"lineNum":"  251","line":"            assign(*__s1, *__s2);"},
{"lineNum":"  252","line":"    }"},
{"lineNum":"  253","line":"    else if (__s2 < __s1)"},
{"lineNum":"  254","line":"    {"},
{"lineNum":"  255","line":"        __s1 += __n;"},
{"lineNum":"  256","line":"        __s2 += __n;"},
{"lineNum":"  257","line":"        for (; __n; --__n)"},
{"lineNum":"  258","line":"            assign(*--__s1, *--__s2);"},
{"lineNum":"  259","line":"    }"},
{"lineNum":"  260","line":"    return __r;"},
{"lineNum":"  261","line":"}"},
{"lineNum":"  262","line":""},
{"lineNum":"  263","line":"template <class _CharT>"},
{"lineNum":"  264","line":"inline _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  265","line":"_CharT*"},
{"lineNum":"  266","line":"char_traits<_CharT>::copy(char_type* __s1, const char_type* __s2, size_t __n)"},
{"lineNum":"  267","line":"{"},
{"lineNum":"  268","line":"    _LIBCPP_ASSERT(__s2 < __s1 || __s2 >= __s1+__n, \"char_traits::copy overlapped range\");"},
{"lineNum":"  269","line":"    char_type* __r = __s1;"},
{"lineNum":"  270","line":"    for (; __n; --__n, ++__s1, ++__s2)"},
{"lineNum":"  271","line":"        assign(*__s1, *__s2);"},
{"lineNum":"  272","line":"    return __r;"},
{"lineNum":"  273","line":"}"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"template <class _CharT>"},
{"lineNum":"  276","line":"inline _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  277","line":"_CharT*"},
{"lineNum":"  278","line":"char_traits<_CharT>::assign(char_type* __s, size_t __n, char_type __a)"},
{"lineNum":"  279","line":"{"},
{"lineNum":"  280","line":"    char_type* __r = __s;"},
{"lineNum":"  281","line":"    for (; __n; --__n, ++__s)"},
{"lineNum":"  282","line":"        assign(*__s, __a);"},
{"lineNum":"  283","line":"    return __r;"},
{"lineNum":"  284","line":"}"},
{"lineNum":"  285","line":""},
{"lineNum":"  286","line":"// constexpr versions of move/copy/assign."},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"template <class _CharT>"},
{"lineNum":"  289","line":"static inline _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  290","line":"_CharT* __move_constexpr(_CharT* __s1, const _CharT* __s2, size_t __n) _NOEXCEPT"},
{"lineNum":"  291","line":"{"},
{"lineNum":"  292","line":"    if (__n == 0) return __s1;"},
{"lineNum":"  293","line":"    if (__s1 < __s2) {"},
{"lineNum":"  294","line":"      _VSTD::copy(__s2, __s2 + __n, __s1);"},
{"lineNum":"  295","line":"    } else if (__s2 < __s1) {"},
{"lineNum":"  296","line":"      _VSTD::copy_backward(__s2, __s2 + __n, __s1 + __n);"},
{"lineNum":"  297","line":"    }"},
{"lineNum":"  298","line":"    return __s1;"},
{"lineNum":"  299","line":"}"},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"template <class _CharT>"},
{"lineNum":"  302","line":"static inline _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  303","line":"_CharT* __copy_constexpr(_CharT* __s1, const _CharT* __s2, size_t __n) _NOEXCEPT"},
{"lineNum":"  304","line":"{"},
{"lineNum":"  305","line":"    _VSTD::copy_n(__s2, __n, __s1);"},
{"lineNum":"  306","line":"    return __s1;"},
{"lineNum":"  307","line":"}"},
{"lineNum":"  308","line":""},
{"lineNum":"  309","line":"template <class _CharT>"},
{"lineNum":"  310","line":"static inline _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  311","line":"_CharT* __assign_constexpr(_CharT* __s, size_t __n, _CharT __a) _NOEXCEPT"},
{"lineNum":"  312","line":"{"},
{"lineNum":"  313","line":"     _VSTD::fill_n(__s, __n, __a);"},
{"lineNum":"  314","line":"     return __s;"},
{"lineNum":"  315","line":"}"},
{"lineNum":"  316","line":""},
{"lineNum":"  317","line":"// char_traits<char>"},
{"lineNum":"  318","line":""},
{"lineNum":"  319","line":"template <>"},
{"lineNum":"  320","line":"struct _LIBCPP_TEMPLATE_VIS char_traits<char>"},
{"lineNum":"  321","line":"{"},
{"lineNum":"  322","line":"    typedef char      char_type;"},
{"lineNum":"  323","line":"    typedef int       int_type;"},
{"lineNum":"  324","line":"    typedef streamoff off_type;"},
{"lineNum":"  325","line":"    typedef streampos pos_type;"},
{"lineNum":"  326","line":"    typedef mbstate_t state_type;"},
{"lineNum":"  327","line":""},
{"lineNum":"  328","line":"    static inline _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  329","line":"    void assign(char_type& __c1, const char_type& __c2) _NOEXCEPT {__c1 = __c2;}","class":"linePartCov","hits":"2","order":"704","possible_hits":"1450",},
{"lineNum":"  330","line":"    static inline _LIBCPP_CONSTEXPR bool eq(char_type __c1, char_type __c2) _NOEXCEPT"},
{"lineNum":"  331","line":"            {return __c1 == __c2;}","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":"  332","line":"    static inline _LIBCPP_CONSTEXPR bool lt(char_type __c1, char_type __c2) _NOEXCEPT"},
{"lineNum":"  333","line":"        {return (unsigned char)__c1 < (unsigned char)__c2;}"},
{"lineNum":"  334","line":""},
{"lineNum":"  335","line":"    static _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  336","line":"    int compare(const char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT;"},
{"lineNum":"  337","line":"    static inline size_t _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  338","line":"    length(const char_type* __s)  _NOEXCEPT {return __builtin_strlen(__s);}","class":"lineNoCov","hits":"0","possible_hits":"408",},
{"lineNum":"  339","line":"    static _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  340","line":"    const char_type* find(const char_type* __s, size_t __n, const char_type& __a) _NOEXCEPT;"},
{"lineNum":"  341","line":"    static inline _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  342","line":"    char_type* move(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT"},
{"lineNum":"  343","line":"        {"},
{"lineNum":"  344","line":"            return __libcpp_is_constant_evaluated()"},
{"lineNum":"  345","line":"                       ? _VSTD::__move_constexpr(__s1, __s2, __n)"},
{"lineNum":"  346","line":"                       : __n == 0 ? __s1 : (char_type*)_VSTD::memmove(__s1, __s2, __n);"},
{"lineNum":"  347","line":"        }"},
{"lineNum":"  348","line":"    static inline _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  349","line":"    char_type* copy(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT"},
{"lineNum":"  350","line":"        {"},
{"lineNum":"  351","line":"            _LIBCPP_ASSERT(__s2 < __s1 || __s2 >= __s1+__n, \"char_traits::copy overlapped range\");"},
{"lineNum":"  352","line":"            return __libcpp_is_constant_evaluated()"},
{"lineNum":"  353","line":"                       ? _VSTD::__copy_constexpr(__s1, __s2, __n)"},
{"lineNum":"  354","line":"                       : __n == 0 ? __s1 : (char_type*)_VSTD::memcpy(__s1, __s2, __n);","class":"linePartCov","hits":"2","order":"703","possible_hits":"1779",},
{"lineNum":"  355","line":"        }"},
{"lineNum":"  356","line":"    static inline _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  357","line":"    char_type* assign(char_type* __s, size_t __n, char_type __a) _NOEXCEPT"},
{"lineNum":"  358","line":"        {"},
{"lineNum":"  359","line":"            return __libcpp_is_constant_evaluated()"},
{"lineNum":"  360","line":"                       ? _VSTD::__assign_constexpr(__s, __n, __a)"},
{"lineNum":"  361","line":"                       : __n == 0 ? __s : (char_type*)_VSTD::memset(__s, to_int_type(__a), __n);","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":"  362","line":"        }"},
{"lineNum":"  363","line":""},
{"lineNum":"  364","line":"    static inline _LIBCPP_CONSTEXPR int_type  not_eof(int_type __c) _NOEXCEPT"},
{"lineNum":"  365","line":"        {return eq_int_type(__c, eof()) ? ~eof() : __c;}","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  366","line":"    static inline _LIBCPP_CONSTEXPR char_type to_char_type(int_type __c) _NOEXCEPT"},
{"lineNum":"  367","line":"        {return char_type(__c);}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  368","line":"    static inline _LIBCPP_CONSTEXPR int_type to_int_type(char_type __c) _NOEXCEPT"},
{"lineNum":"  369","line":"        {return int_type((unsigned char)__c);}","class":"lineNoCov","hits":"0","possible_hits":"22",},
{"lineNum":"  370","line":"    static inline _LIBCPP_CONSTEXPR bool eq_int_type(int_type __c1, int_type __c2) _NOEXCEPT"},
{"lineNum":"  371","line":"        {return __c1 == __c2;}","class":"lineNoCov","hits":"0","possible_hits":"66",},
{"lineNum":"  372","line":"    static inline _LIBCPP_CONSTEXPR int_type  eof() _NOEXCEPT"},
{"lineNum":"  373","line":"        {return int_type(EOF);}","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  374","line":"};"},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"inline _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  377","line":"int"},
{"lineNum":"  378","line":"char_traits<char>::compare(const char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT"},
{"lineNum":"  379","line":"{"},
{"lineNum":"  380","line":"    if (__n == 0)","class":"linePartCov","hits":"1","order":"443","possible_hits":"199",},
{"lineNum":"  381","line":"        return 0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  382","line":"#if __has_feature(cxx_constexpr_string_builtins)"},
{"lineNum":"  383","line":"    return __builtin_memcmp(__s1, __s2, __n);","class":"linePartCov","hits":"1","order":"444","possible_hits":"298",},
{"lineNum":"  384","line":"#elif _LIBCPP_STD_VER <= 14"},
{"lineNum":"  385","line":"    return _VSTD::memcmp(__s1, __s2, __n);"},
{"lineNum":"  386","line":"#else"},
{"lineNum":"  387","line":"    for (; __n; --__n, ++__s1, ++__s2)"},
{"lineNum":"  388","line":"    {"},
{"lineNum":"  389","line":"        if (lt(*__s1, *__s2))"},
{"lineNum":"  390","line":"            return -1;"},
{"lineNum":"  391","line":"        if (lt(*__s2, *__s1))"},
{"lineNum":"  392","line":"            return 1;"},
{"lineNum":"  393","line":"    }"},
{"lineNum":"  394","line":"    return 0;"},
{"lineNum":"  395","line":"#endif"},
{"lineNum":"  396","line":"}"},
{"lineNum":"  397","line":""},
{"lineNum":"  398","line":"inline _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  399","line":"const char*"},
{"lineNum":"  400","line":"char_traits<char>::find(const char_type* __s, size_t __n, const char_type& __a) _NOEXCEPT"},
{"lineNum":"  401","line":"{"},
{"lineNum":"  402","line":"    if (__n == 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  403","line":"        return nullptr;"},
{"lineNum":"  404","line":"#if __has_feature(cxx_constexpr_string_builtins)"},
{"lineNum":"  405","line":"    return __builtin_char_memchr(__s, to_int_type(__a), __n);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  406","line":"#elif _LIBCPP_STD_VER <= 14"},
{"lineNum":"  407","line":"    return (const char_type*) _VSTD::memchr(__s, to_int_type(__a), __n);"},
{"lineNum":"  408","line":"#else"},
{"lineNum":"  409","line":"    for (; __n; --__n)"},
{"lineNum":"  410","line":"    {"},
{"lineNum":"  411","line":"        if (eq(*__s, __a))"},
{"lineNum":"  412","line":"            return __s;"},
{"lineNum":"  413","line":"        ++__s;"},
{"lineNum":"  414","line":"    }"},
{"lineNum":"  415","line":"    return nullptr;"},
{"lineNum":"  416","line":"#endif"},
{"lineNum":"  417","line":"}"},
{"lineNum":"  418","line":""},
{"lineNum":"  419","line":""},
{"lineNum":"  420","line":"// char_traits<wchar_t>"},
{"lineNum":"  421","line":""},
{"lineNum":"  422","line":"template <>"},
{"lineNum":"  423","line":"struct _LIBCPP_TEMPLATE_VIS char_traits<wchar_t>"},
{"lineNum":"  424","line":"{"},
{"lineNum":"  425","line":"    typedef wchar_t   char_type;"},
{"lineNum":"  426","line":"    typedef wint_t    int_type;"},
{"lineNum":"  427","line":"    typedef streamoff off_type;"},
{"lineNum":"  428","line":"    typedef streampos pos_type;"},
{"lineNum":"  429","line":"    typedef mbstate_t state_type;"},
{"lineNum":"  430","line":""},
{"lineNum":"  431","line":"    static inline _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  432","line":"    void assign(char_type& __c1, const char_type& __c2) _NOEXCEPT {__c1 = __c2;}"},
{"lineNum":"  433","line":"    static inline _LIBCPP_CONSTEXPR bool eq(char_type __c1, char_type __c2) _NOEXCEPT"},
{"lineNum":"  434","line":"        {return __c1 == __c2;}"},
{"lineNum":"  435","line":"    static inline _LIBCPP_CONSTEXPR bool lt(char_type __c1, char_type __c2) _NOEXCEPT"},
{"lineNum":"  436","line":"        {return __c1 < __c2;}"},
{"lineNum":"  437","line":""},
{"lineNum":"  438","line":"    static _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  439","line":"    int compare(const char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT;"},
{"lineNum":"  440","line":"    static _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  441","line":"    size_t length(const char_type* __s) _NOEXCEPT;"},
{"lineNum":"  442","line":"    static _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  443","line":"    const char_type* find(const char_type* __s, size_t __n, const char_type& __a) _NOEXCEPT;"},
{"lineNum":"  444","line":"    static inline _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  445","line":"    char_type* move(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT"},
{"lineNum":"  446","line":"        {"},
{"lineNum":"  447","line":"            return __libcpp_is_constant_evaluated()"},
{"lineNum":"  448","line":"                       ? _VSTD::__move_constexpr(__s1, __s2, __n)"},
{"lineNum":"  449","line":"                       : __n == 0 ? __s1 : _VSTD::wmemmove(__s1, __s2, __n);"},
{"lineNum":"  450","line":"        }"},
{"lineNum":"  451","line":"    static inline _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  452","line":"    char_type* copy(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT"},
{"lineNum":"  453","line":"        {"},
{"lineNum":"  454","line":"            _LIBCPP_ASSERT(__s2 < __s1 || __s2 >= __s1+__n, \"char_traits::copy overlapped range\");"},
{"lineNum":"  455","line":"            return __libcpp_is_constant_evaluated()"},
{"lineNum":"  456","line":"                       ? _VSTD::__copy_constexpr(__s1, __s2, __n)"},
{"lineNum":"  457","line":"                       : __n == 0 ? __s1 : _VSTD::wmemcpy(__s1, __s2, __n);"},
{"lineNum":"  458","line":"        }"},
{"lineNum":"  459","line":"    static inline _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  460","line":"    char_type* assign(char_type* __s, size_t __n, char_type __a) _NOEXCEPT"},
{"lineNum":"  461","line":"        {"},
{"lineNum":"  462","line":"            return __libcpp_is_constant_evaluated()"},
{"lineNum":"  463","line":"                       ? _VSTD::__assign_constexpr(__s, __n, __a)"},
{"lineNum":"  464","line":"                       : __n == 0 ? __s : _VSTD::wmemset(__s, __a, __n);"},
{"lineNum":"  465","line":"        }"},
{"lineNum":"  466","line":"    static inline _LIBCPP_CONSTEXPR int_type  not_eof(int_type __c) _NOEXCEPT"},
{"lineNum":"  467","line":"        {return eq_int_type(__c, eof()) ? ~eof() : __c;}"},
{"lineNum":"  468","line":"    static inline _LIBCPP_CONSTEXPR char_type to_char_type(int_type __c) _NOEXCEPT"},
{"lineNum":"  469","line":"        {return char_type(__c);}"},
{"lineNum":"  470","line":"    static inline _LIBCPP_CONSTEXPR int_type to_int_type(char_type __c) _NOEXCEPT"},
{"lineNum":"  471","line":"        {return int_type(__c);}"},
{"lineNum":"  472","line":"    static inline _LIBCPP_CONSTEXPR bool eq_int_type(int_type __c1, int_type __c2) _NOEXCEPT"},
{"lineNum":"  473","line":"        {return __c1 == __c2;}"},
{"lineNum":"  474","line":"    static inline _LIBCPP_CONSTEXPR int_type eof() _NOEXCEPT"},
{"lineNum":"  475","line":"        {return int_type(WEOF);}"},
{"lineNum":"  476","line":"};"},
{"lineNum":"  477","line":""},
{"lineNum":"  478","line":"inline _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  479","line":"int"},
{"lineNum":"  480","line":"char_traits<wchar_t>::compare(const char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT"},
{"lineNum":"  481","line":"{"},
{"lineNum":"  482","line":"    if (__n == 0)"},
{"lineNum":"  483","line":"        return 0;"},
{"lineNum":"  484","line":"#if __has_feature(cxx_constexpr_string_builtins)"},
{"lineNum":"  485","line":"    return __builtin_wmemcmp(__s1, __s2, __n);"},
{"lineNum":"  486","line":"#elif _LIBCPP_STD_VER <= 14"},
{"lineNum":"  487","line":"    return _VSTD::wmemcmp(__s1, __s2, __n);"},
{"lineNum":"  488","line":"#else"},
{"lineNum":"  489","line":"    for (; __n; --__n, ++__s1, ++__s2)"},
{"lineNum":"  490","line":"    {"},
{"lineNum":"  491","line":"        if (lt(*__s1, *__s2))"},
{"lineNum":"  492","line":"            return -1;"},
{"lineNum":"  493","line":"        if (lt(*__s2, *__s1))"},
{"lineNum":"  494","line":"            return 1;"},
{"lineNum":"  495","line":"    }"},
{"lineNum":"  496","line":"    return 0;"},
{"lineNum":"  497","line":"#endif"},
{"lineNum":"  498","line":"}"},
{"lineNum":"  499","line":""},
{"lineNum":"  500","line":""},
{"lineNum":"  501","line":"template <class _Traits>"},
{"lineNum":"  502","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  503","line":"_LIBCPP_CONSTEXPR"},
{"lineNum":"  504","line":"inline size_t __char_traits_length_checked(const typename _Traits::char_type* __s) _NOEXCEPT {"},
{"lineNum":"  505","line":"#if _LIBCPP_DEBUG_LEVEL >= 1"},
{"lineNum":"  506","line":"  return __s ? _Traits::length(__s) : (_VSTD::__libcpp_debug_function(_VSTD::__libcpp_debug_info(__FILE__, __LINE__, \"p == nullptr\", \"null pointer pass to non-null argument of char_traits<...>::length\")), 0);"},
{"lineNum":"  507","line":"#else"},
{"lineNum":"  508","line":"  return _Traits::length(__s);"},
{"lineNum":"  509","line":"#endif"},
{"lineNum":"  510","line":"}"},
{"lineNum":"  511","line":""},
{"lineNum":"  512","line":"inline _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  513","line":"size_t"},
{"lineNum":"  514","line":"char_traits<wchar_t>::length(const char_type* __s) _NOEXCEPT"},
{"lineNum":"  515","line":"{"},
{"lineNum":"  516","line":"#if __has_feature(cxx_constexpr_string_builtins)"},
{"lineNum":"  517","line":"    return __builtin_wcslen(__s);"},
{"lineNum":"  518","line":"#elif _LIBCPP_STD_VER <= 14"},
{"lineNum":"  519","line":"    return _VSTD::wcslen(__s);"},
{"lineNum":"  520","line":"#else"},
{"lineNum":"  521","line":"    size_t __len = 0;"},
{"lineNum":"  522","line":"    for (; !eq(*__s, char_type(0)); ++__s)"},
{"lineNum":"  523","line":"        ++__len;"},
{"lineNum":"  524","line":"    return __len;"},
{"lineNum":"  525","line":"#endif"},
{"lineNum":"  526","line":"}"},
{"lineNum":"  527","line":""},
{"lineNum":"  528","line":"inline _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  529","line":"const wchar_t*"},
{"lineNum":"  530","line":"char_traits<wchar_t>::find(const char_type* __s, size_t __n, const char_type& __a) _NOEXCEPT"},
{"lineNum":"  531","line":"{"},
{"lineNum":"  532","line":"    if (__n == 0)"},
{"lineNum":"  533","line":"        return nullptr;"},
{"lineNum":"  534","line":"#if __has_feature(cxx_constexpr_string_builtins)"},
{"lineNum":"  535","line":"    return __builtin_wmemchr(__s, __a, __n);"},
{"lineNum":"  536","line":"#elif _LIBCPP_STD_VER <= 14"},
{"lineNum":"  537","line":"    return _VSTD::wmemchr(__s, __a, __n);"},
{"lineNum":"  538","line":"#else"},
{"lineNum":"  539","line":"    for (; __n; --__n)"},
{"lineNum":"  540","line":"    {"},
{"lineNum":"  541","line":"        if (eq(*__s, __a))"},
{"lineNum":"  542","line":"            return __s;"},
{"lineNum":"  543","line":"        ++__s;"},
{"lineNum":"  544","line":"    }"},
{"lineNum":"  545","line":"    return nullptr;"},
{"lineNum":"  546","line":"#endif"},
{"lineNum":"  547","line":"}"},
{"lineNum":"  548","line":""},
{"lineNum":"  549","line":""},
{"lineNum":"  550","line":"#ifndef _LIBCPP_HAS_NO_CHAR8_T"},
{"lineNum":"  551","line":""},
{"lineNum":"  552","line":"template <>"},
{"lineNum":"  553","line":"struct _LIBCPP_TEMPLATE_VIS char_traits<char8_t>"},
{"lineNum":"  554","line":"{"},
{"lineNum":"  555","line":"    typedef char8_t        char_type;"},
{"lineNum":"  556","line":"    typedef unsigned int   int_type;"},
{"lineNum":"  557","line":"    typedef streamoff      off_type;"},
{"lineNum":"  558","line":"    typedef u8streampos    pos_type;"},
{"lineNum":"  559","line":"    typedef mbstate_t      state_type;"},
{"lineNum":"  560","line":""},
{"lineNum":"  561","line":"    static inline constexpr void assign(char_type& __c1, const char_type& __c2) noexcept"},
{"lineNum":"  562","line":"        {__c1 = __c2;}"},
{"lineNum":"  563","line":"    static inline constexpr bool eq(char_type __c1, char_type __c2) noexcept"},
{"lineNum":"  564","line":"        {return __c1 == __c2;}"},
{"lineNum":"  565","line":"    static inline constexpr bool lt(char_type __c1, char_type __c2) noexcept"},
{"lineNum":"  566","line":"        {return __c1 < __c2;}"},
{"lineNum":"  567","line":""},
{"lineNum":"  568","line":"    static constexpr"},
{"lineNum":"  569","line":"    int              compare(const char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT;"},
{"lineNum":"  570","line":""},
{"lineNum":"  571","line":"    static constexpr"},
{"lineNum":"  572","line":"    size_t           length(const char_type* __s) _NOEXCEPT;"},
{"lineNum":"  573","line":""},
{"lineNum":"  574","line":"    _LIBCPP_INLINE_VISIBILITY static constexpr"},
{"lineNum":"  575","line":"    const char_type* find(const char_type* __s, size_t __n, const char_type& __a) _NOEXCEPT;"},
{"lineNum":"  576","line":""},
{"lineNum":"  577","line":"    static _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  578","line":"    char_type*       move(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT"},
{"lineNum":"  579","line":"        {"},
{"lineNum":"  580","line":"            return __libcpp_is_constant_evaluated()"},
{"lineNum":"  581","line":"                       ? _VSTD::__move_constexpr(__s1, __s2, __n)"},
{"lineNum":"  582","line":"                       : __n == 0 ? __s1 : (char_type*)_VSTD::memmove(__s1, __s2, __n);"},
{"lineNum":"  583","line":"        }"},
{"lineNum":"  584","line":""},
{"lineNum":"  585","line":"    static _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  586","line":"    char_type*       copy(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT"},
{"lineNum":"  587","line":"       {"},
{"lineNum":"  588","line":"            _LIBCPP_ASSERT(__s2 < __s1 || __s2 >= __s1+__n, \"char_traits::copy overlapped range\");"},
{"lineNum":"  589","line":"            return __libcpp_is_constant_evaluated()"},
{"lineNum":"  590","line":"                       ? _VSTD::__copy_constexpr(__s1, __s2, __n)"},
{"lineNum":"  591","line":"                       : __n == 0 ? __s1 : (char_type*)_VSTD::memcpy(__s1, __s2, __n);"},
{"lineNum":"  592","line":"        }"},
{"lineNum":"  593","line":""},
{"lineNum":"  594","line":"    static _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  595","line":"    char_type*       assign(char_type* __s, size_t __n, char_type __a) _NOEXCEPT"},
{"lineNum":"  596","line":"        {"},
{"lineNum":"  597","line":"            return __libcpp_is_constant_evaluated()"},
{"lineNum":"  598","line":"                       ? _VSTD::__assign_constexpr(__s, __n, __a)"},
{"lineNum":"  599","line":"                       : __n == 0 ? __s : (char_type*)_VSTD::memset(__s, to_int_type(__a), __n);"},
{"lineNum":"  600","line":"        }"},
{"lineNum":"  601","line":""},
{"lineNum":"  602","line":"    static inline constexpr int_type  not_eof(int_type __c) noexcept"},
{"lineNum":"  603","line":"        {return eq_int_type(__c, eof()) ? ~eof() : __c;}"},
{"lineNum":"  604","line":"    static inline constexpr char_type to_char_type(int_type __c) noexcept"},
{"lineNum":"  605","line":"        {return char_type(__c);}"},
{"lineNum":"  606","line":"    static inline constexpr int_type to_int_type(char_type __c) noexcept"},
{"lineNum":"  607","line":"        {return int_type(__c);}"},
{"lineNum":"  608","line":"    static inline constexpr bool eq_int_type(int_type __c1, int_type __c2) noexcept"},
{"lineNum":"  609","line":"        {return __c1 == __c2;}"},
{"lineNum":"  610","line":"    static inline constexpr int_type eof() noexcept"},
{"lineNum":"  611","line":"        {return int_type(EOF);}"},
{"lineNum":"  612","line":"};"},
{"lineNum":"  613","line":""},
{"lineNum":"  614","line":"// TODO use \'__builtin_strlen\' if it ever supports char8_t ??"},
{"lineNum":"  615","line":"inline constexpr"},
{"lineNum":"  616","line":"size_t"},
{"lineNum":"  617","line":"char_traits<char8_t>::length(const char_type* __s) _NOEXCEPT"},
{"lineNum":"  618","line":"{"},
{"lineNum":"  619","line":"    size_t __len = 0;"},
{"lineNum":"  620","line":"    for (; !eq(*__s, char_type(0)); ++__s)"},
{"lineNum":"  621","line":"        ++__len;"},
{"lineNum":"  622","line":"    return __len;"},
{"lineNum":"  623","line":"}"},
{"lineNum":"  624","line":""},
{"lineNum":"  625","line":"inline constexpr"},
{"lineNum":"  626","line":"int"},
{"lineNum":"  627","line":"char_traits<char8_t>::compare(const char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT"},
{"lineNum":"  628","line":"{"},
{"lineNum":"  629","line":"#if __has_feature(cxx_constexpr_string_builtins)"},
{"lineNum":"  630","line":"    return __builtin_memcmp(__s1, __s2, __n);"},
{"lineNum":"  631","line":"#else"},
{"lineNum":"  632","line":"    for (; __n; --__n, ++__s1, ++__s2)"},
{"lineNum":"  633","line":"    {"},
{"lineNum":"  634","line":"        if (lt(*__s1, *__s2))"},
{"lineNum":"  635","line":"            return -1;"},
{"lineNum":"  636","line":"        if (lt(*__s2, *__s1))"},
{"lineNum":"  637","line":"            return 1;"},
{"lineNum":"  638","line":"    }"},
{"lineNum":"  639","line":"    return 0;"},
{"lineNum":"  640","line":"#endif"},
{"lineNum":"  641","line":"}"},
{"lineNum":"  642","line":""},
{"lineNum":"  643","line":"// TODO use \'__builtin_char_memchr\' if it ever supports char8_t ??"},
{"lineNum":"  644","line":"inline constexpr"},
{"lineNum":"  645","line":"const char8_t*"},
{"lineNum":"  646","line":"char_traits<char8_t>::find(const char_type* __s, size_t __n, const char_type& __a) _NOEXCEPT"},
{"lineNum":"  647","line":"{"},
{"lineNum":"  648","line":"    for (; __n; --__n)"},
{"lineNum":"  649","line":"    {"},
{"lineNum":"  650","line":"        if (eq(*__s, __a))"},
{"lineNum":"  651","line":"            return __s;"},
{"lineNum":"  652","line":"        ++__s;"},
{"lineNum":"  653","line":"    }"},
{"lineNum":"  654","line":"    return nullptr;"},
{"lineNum":"  655","line":"}"},
{"lineNum":"  656","line":""},
{"lineNum":"  657","line":"#endif // #_LIBCPP_HAS_NO_CHAR8_T"},
{"lineNum":"  658","line":""},
{"lineNum":"  659","line":"#ifndef _LIBCPP_HAS_NO_UNICODE_CHARS"},
{"lineNum":"  660","line":""},
{"lineNum":"  661","line":"template <>"},
{"lineNum":"  662","line":"struct _LIBCPP_TEMPLATE_VIS char_traits<char16_t>"},
{"lineNum":"  663","line":"{"},
{"lineNum":"  664","line":"    typedef char16_t       char_type;"},
{"lineNum":"  665","line":"    typedef uint_least16_t int_type;"},
{"lineNum":"  666","line":"    typedef streamoff      off_type;"},
{"lineNum":"  667","line":"    typedef u16streampos   pos_type;"},
{"lineNum":"  668","line":"    typedef mbstate_t      state_type;"},
{"lineNum":"  669","line":""},
{"lineNum":"  670","line":"    static inline _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  671","line":"    void assign(char_type& __c1, const char_type& __c2) _NOEXCEPT {__c1 = __c2;}"},
{"lineNum":"  672","line":"    static inline _LIBCPP_CONSTEXPR bool eq(char_type __c1, char_type __c2) _NOEXCEPT"},
{"lineNum":"  673","line":"        {return __c1 == __c2;}"},
{"lineNum":"  674","line":"    static inline _LIBCPP_CONSTEXPR bool lt(char_type __c1, char_type __c2) _NOEXCEPT"},
{"lineNum":"  675","line":"        {return __c1 < __c2;}"},
{"lineNum":"  676","line":""},
{"lineNum":"  677","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  678","line":"    int              compare(const char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT;"},
{"lineNum":"  679","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  680","line":"    size_t           length(const char_type* __s) _NOEXCEPT;"},
{"lineNum":"  681","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  682","line":"    const char_type* find(const char_type* __s, size_t __n, const char_type& __a) _NOEXCEPT;"},
{"lineNum":"  683","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  684","line":"    static char_type*       move(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT;"},
{"lineNum":"  685","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  686","line":"    static char_type*       copy(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT;"},
{"lineNum":"  687","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  688","line":"    static char_type*       assign(char_type* __s, size_t __n, char_type __a) _NOEXCEPT;"},
{"lineNum":"  689","line":""},
{"lineNum":"  690","line":"    static inline _LIBCPP_CONSTEXPR int_type  not_eof(int_type __c) _NOEXCEPT"},
{"lineNum":"  691","line":"        {return eq_int_type(__c, eof()) ? ~eof() : __c;}"},
{"lineNum":"  692","line":"    static inline _LIBCPP_CONSTEXPR char_type to_char_type(int_type __c) _NOEXCEPT"},
{"lineNum":"  693","line":"        {return char_type(__c);}"},
{"lineNum":"  694","line":"    static inline _LIBCPP_CONSTEXPR int_type to_int_type(char_type __c) _NOEXCEPT"},
{"lineNum":"  695","line":"        {return int_type(__c);}"},
{"lineNum":"  696","line":"    static inline _LIBCPP_CONSTEXPR bool eq_int_type(int_type __c1, int_type __c2) _NOEXCEPT"},
{"lineNum":"  697","line":"        {return __c1 == __c2;}"},
{"lineNum":"  698","line":"    static inline _LIBCPP_CONSTEXPR int_type eof() _NOEXCEPT"},
{"lineNum":"  699","line":"        {return int_type(0xFFFF);}"},
{"lineNum":"  700","line":"};"},
{"lineNum":"  701","line":""},
{"lineNum":"  702","line":"inline _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  703","line":"int"},
{"lineNum":"  704","line":"char_traits<char16_t>::compare(const char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT"},
{"lineNum":"  705","line":"{"},
{"lineNum":"  706","line":"    for (; __n; --__n, ++__s1, ++__s2)"},
{"lineNum":"  707","line":"    {"},
{"lineNum":"  708","line":"        if (lt(*__s1, *__s2))"},
{"lineNum":"  709","line":"            return -1;"},
{"lineNum":"  710","line":"        if (lt(*__s2, *__s1))"},
{"lineNum":"  711","line":"            return 1;"},
{"lineNum":"  712","line":"    }"},
{"lineNum":"  713","line":"    return 0;"},
{"lineNum":"  714","line":"}"},
{"lineNum":"  715","line":""},
{"lineNum":"  716","line":"inline _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  717","line":"size_t"},
{"lineNum":"  718","line":"char_traits<char16_t>::length(const char_type* __s) _NOEXCEPT"},
{"lineNum":"  719","line":"{"},
{"lineNum":"  720","line":"    size_t __len = 0;"},
{"lineNum":"  721","line":"    for (; !eq(*__s, char_type(0)); ++__s)"},
{"lineNum":"  722","line":"        ++__len;"},
{"lineNum":"  723","line":"    return __len;"},
{"lineNum":"  724","line":"}"},
{"lineNum":"  725","line":""},
{"lineNum":"  726","line":"inline _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  727","line":"const char16_t*"},
{"lineNum":"  728","line":"char_traits<char16_t>::find(const char_type* __s, size_t __n, const char_type& __a) _NOEXCEPT"},
{"lineNum":"  729","line":"{"},
{"lineNum":"  730","line":"    for (; __n; --__n)"},
{"lineNum":"  731","line":"    {"},
{"lineNum":"  732","line":"        if (eq(*__s, __a))"},
{"lineNum":"  733","line":"            return __s;"},
{"lineNum":"  734","line":"        ++__s;"},
{"lineNum":"  735","line":"    }"},
{"lineNum":"  736","line":"    return nullptr;"},
{"lineNum":"  737","line":"}"},
{"lineNum":"  738","line":""},
{"lineNum":"  739","line":"inline _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  740","line":"char16_t*"},
{"lineNum":"  741","line":"char_traits<char16_t>::move(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT"},
{"lineNum":"  742","line":"{"},
{"lineNum":"  743","line":"    if (__n == 0) return __s1;"},
{"lineNum":"  744","line":"    char_type* __r = __s1;"},
{"lineNum":"  745","line":"    if (__s1 < __s2)"},
{"lineNum":"  746","line":"    {"},
{"lineNum":"  747","line":"        for (; __n; --__n, ++__s1, ++__s2)"},
{"lineNum":"  748","line":"            assign(*__s1, *__s2);"},
{"lineNum":"  749","line":"    }"},
{"lineNum":"  750","line":"    else if (__s2 < __s1)"},
{"lineNum":"  751","line":"    {"},
{"lineNum":"  752","line":"        __s1 += __n;"},
{"lineNum":"  753","line":"        __s2 += __n;"},
{"lineNum":"  754","line":"        for (; __n; --__n)"},
{"lineNum":"  755","line":"            assign(*--__s1, *--__s2);"},
{"lineNum":"  756","line":"    }"},
{"lineNum":"  757","line":"    return __r;"},
{"lineNum":"  758","line":"}"},
{"lineNum":"  759","line":""},
{"lineNum":"  760","line":"inline _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  761","line":"char16_t*"},
{"lineNum":"  762","line":"char_traits<char16_t>::copy(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT"},
{"lineNum":"  763","line":"{"},
{"lineNum":"  764","line":"    _LIBCPP_ASSERT(__s2 < __s1 || __s2 >= __s1+__n, \"char_traits::copy overlapped range\");"},
{"lineNum":"  765","line":"    char_type* __r = __s1;"},
{"lineNum":"  766","line":"    for (; __n; --__n, ++__s1, ++__s2)"},
{"lineNum":"  767","line":"        assign(*__s1, *__s2);"},
{"lineNum":"  768","line":"    return __r;"},
{"lineNum":"  769","line":"}"},
{"lineNum":"  770","line":""},
{"lineNum":"  771","line":"inline _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  772","line":"char16_t*"},
{"lineNum":"  773","line":"char_traits<char16_t>::assign(char_type* __s, size_t __n, char_type __a) _NOEXCEPT"},
{"lineNum":"  774","line":"{"},
{"lineNum":"  775","line":"    char_type* __r = __s;"},
{"lineNum":"  776","line":"    for (; __n; --__n, ++__s)"},
{"lineNum":"  777","line":"        assign(*__s, __a);"},
{"lineNum":"  778","line":"    return __r;"},
{"lineNum":"  779","line":"}"},
{"lineNum":"  780","line":""},
{"lineNum":"  781","line":"template <>"},
{"lineNum":"  782","line":"struct _LIBCPP_TEMPLATE_VIS char_traits<char32_t>"},
{"lineNum":"  783","line":"{"},
{"lineNum":"  784","line":"    typedef char32_t       char_type;"},
{"lineNum":"  785","line":"    typedef uint_least32_t int_type;"},
{"lineNum":"  786","line":"    typedef streamoff      off_type;"},
{"lineNum":"  787","line":"    typedef u32streampos   pos_type;"},
{"lineNum":"  788","line":"    typedef mbstate_t      state_type;"},
{"lineNum":"  789","line":""},
{"lineNum":"  790","line":"    static inline _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  791","line":"    void assign(char_type& __c1, const char_type& __c2) _NOEXCEPT {__c1 = __c2;}"},
{"lineNum":"  792","line":"    static inline _LIBCPP_CONSTEXPR bool eq(char_type __c1, char_type __c2) _NOEXCEPT"},
{"lineNum":"  793","line":"        {return __c1 == __c2;}"},
{"lineNum":"  794","line":"    static inline _LIBCPP_CONSTEXPR bool lt(char_type __c1, char_type __c2) _NOEXCEPT"},
{"lineNum":"  795","line":"        {return __c1 < __c2;}"},
{"lineNum":"  796","line":""},
{"lineNum":"  797","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  798","line":"    int              compare(const char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT;"},
{"lineNum":"  799","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  800","line":"    size_t           length(const char_type* __s) _NOEXCEPT;"},
{"lineNum":"  801","line":"    _LIBCPP_INLINE_VISIBILITY static _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  802","line":"    const char_type* find(const char_type* __s, size_t __n, const char_type& __a) _NOEXCEPT;"},
{"lineNum":"  803","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  804","line":"    static char_type*       move(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT;"},
{"lineNum":"  805","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  806","line":"    static char_type*       copy(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT;"},
{"lineNum":"  807","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  808","line":"    static char_type*       assign(char_type* __s, size_t __n, char_type __a) _NOEXCEPT;"},
{"lineNum":"  809","line":""},
{"lineNum":"  810","line":"    static inline _LIBCPP_CONSTEXPR int_type  not_eof(int_type __c) _NOEXCEPT"},
{"lineNum":"  811","line":"        {return eq_int_type(__c, eof()) ? ~eof() : __c;}"},
{"lineNum":"  812","line":"    static inline _LIBCPP_CONSTEXPR char_type to_char_type(int_type __c) _NOEXCEPT"},
{"lineNum":"  813","line":"        {return char_type(__c);}"},
{"lineNum":"  814","line":"    static inline _LIBCPP_CONSTEXPR int_type to_int_type(char_type __c) _NOEXCEPT"},
{"lineNum":"  815","line":"        {return int_type(__c);}"},
{"lineNum":"  816","line":"    static inline _LIBCPP_CONSTEXPR bool eq_int_type(int_type __c1, int_type __c2) _NOEXCEPT"},
{"lineNum":"  817","line":"        {return __c1 == __c2;}"},
{"lineNum":"  818","line":"    static inline _LIBCPP_CONSTEXPR int_type eof() _NOEXCEPT"},
{"lineNum":"  819","line":"        {return int_type(0xFFFFFFFF);}"},
{"lineNum":"  820","line":"};"},
{"lineNum":"  821","line":""},
{"lineNum":"  822","line":"inline _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  823","line":"int"},
{"lineNum":"  824","line":"char_traits<char32_t>::compare(const char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT"},
{"lineNum":"  825","line":"{"},
{"lineNum":"  826","line":"    for (; __n; --__n, ++__s1, ++__s2)"},
{"lineNum":"  827","line":"    {"},
{"lineNum":"  828","line":"        if (lt(*__s1, *__s2))"},
{"lineNum":"  829","line":"            return -1;"},
{"lineNum":"  830","line":"        if (lt(*__s2, *__s1))"},
{"lineNum":"  831","line":"            return 1;"},
{"lineNum":"  832","line":"    }"},
{"lineNum":"  833","line":"    return 0;"},
{"lineNum":"  834","line":"}"},
{"lineNum":"  835","line":""},
{"lineNum":"  836","line":"inline _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  837","line":"size_t"},
{"lineNum":"  838","line":"char_traits<char32_t>::length(const char_type* __s) _NOEXCEPT"},
{"lineNum":"  839","line":"{"},
{"lineNum":"  840","line":"    size_t __len = 0;"},
{"lineNum":"  841","line":"    for (; !eq(*__s, char_type(0)); ++__s)"},
{"lineNum":"  842","line":"        ++__len;"},
{"lineNum":"  843","line":"    return __len;"},
{"lineNum":"  844","line":"}"},
{"lineNum":"  845","line":""},
{"lineNum":"  846","line":"inline _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  847","line":"const char32_t*"},
{"lineNum":"  848","line":"char_traits<char32_t>::find(const char_type* __s, size_t __n, const char_type& __a) _NOEXCEPT"},
{"lineNum":"  849","line":"{"},
{"lineNum":"  850","line":"    for (; __n; --__n)"},
{"lineNum":"  851","line":"    {"},
{"lineNum":"  852","line":"        if (eq(*__s, __a))"},
{"lineNum":"  853","line":"            return __s;"},
{"lineNum":"  854","line":"        ++__s;"},
{"lineNum":"  855","line":"    }"},
{"lineNum":"  856","line":"    return nullptr;"},
{"lineNum":"  857","line":"}"},
{"lineNum":"  858","line":""},
{"lineNum":"  859","line":"inline _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  860","line":"char32_t*"},
{"lineNum":"  861","line":"char_traits<char32_t>::move(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT"},
{"lineNum":"  862","line":"{"},
{"lineNum":"  863","line":"    if (__n == 0) return __s1;"},
{"lineNum":"  864","line":"    char_type* __r = __s1;"},
{"lineNum":"  865","line":"    if (__s1 < __s2)"},
{"lineNum":"  866","line":"    {"},
{"lineNum":"  867","line":"        for (; __n; --__n, ++__s1, ++__s2)"},
{"lineNum":"  868","line":"            assign(*__s1, *__s2);"},
{"lineNum":"  869","line":"    }"},
{"lineNum":"  870","line":"    else if (__s2 < __s1)"},
{"lineNum":"  871","line":"    {"},
{"lineNum":"  872","line":"        __s1 += __n;"},
{"lineNum":"  873","line":"        __s2 += __n;"},
{"lineNum":"  874","line":"        for (; __n; --__n)"},
{"lineNum":"  875","line":"            assign(*--__s1, *--__s2);"},
{"lineNum":"  876","line":"    }"},
{"lineNum":"  877","line":"    return __r;"},
{"lineNum":"  878","line":"}"},
{"lineNum":"  879","line":""},
{"lineNum":"  880","line":"inline _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  881","line":"char32_t*"},
{"lineNum":"  882","line":"char_traits<char32_t>::copy(char_type* __s1, const char_type* __s2, size_t __n) _NOEXCEPT"},
{"lineNum":"  883","line":"{"},
{"lineNum":"  884","line":"    _LIBCPP_ASSERT(__s2 < __s1 || __s2 >= __s1+__n, \"char_traits::copy overlapped range\");"},
{"lineNum":"  885","line":"    char_type* __r = __s1;"},
{"lineNum":"  886","line":"    for (; __n; --__n, ++__s1, ++__s2)"},
{"lineNum":"  887","line":"        assign(*__s1, *__s2);"},
{"lineNum":"  888","line":"    return __r;"},
{"lineNum":"  889","line":"}"},
{"lineNum":"  890","line":""},
{"lineNum":"  891","line":"inline _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  892","line":"char32_t*"},
{"lineNum":"  893","line":"char_traits<char32_t>::assign(char_type* __s, size_t __n, char_type __a) _NOEXCEPT"},
{"lineNum":"  894","line":"{"},
{"lineNum":"  895","line":"    char_type* __r = __s;"},
{"lineNum":"  896","line":"    for (; __n; --__n, ++__s)"},
{"lineNum":"  897","line":"        assign(*__s, __a);"},
{"lineNum":"  898","line":"    return __r;"},
{"lineNum":"  899","line":"}"},
{"lineNum":"  900","line":""},
{"lineNum":"  901","line":"#endif // _LIBCPP_HAS_NO_UNICODE_CHARS"},
{"lineNum":"  902","line":""},
{"lineNum":"  903","line":"// helper fns for basic_string and string_view"},
{"lineNum":"  904","line":""},
{"lineNum":"  905","line":"// __str_find"},
{"lineNum":"  906","line":"template<class _CharT, class _SizeT, class _Traits, _SizeT __npos>"},
{"lineNum":"  907","line":"inline _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  908","line":"__str_find(const _CharT *__p, _SizeT __sz,"},
{"lineNum":"  909","line":"             _CharT __c, _SizeT __pos) _NOEXCEPT"},
{"lineNum":"  910","line":"{"},
{"lineNum":"  911","line":"    if (__pos >= __sz)"},
{"lineNum":"  912","line":"        return __npos;"},
{"lineNum":"  913","line":"    const _CharT* __r = _Traits::find(__p + __pos, __sz - __pos, __c);"},
{"lineNum":"  914","line":"    if (__r == nullptr)"},
{"lineNum":"  915","line":"        return __npos;"},
{"lineNum":"  916","line":"    return static_cast<_SizeT>(__r - __p);"},
{"lineNum":"  917","line":"}"},
{"lineNum":"  918","line":""},
{"lineNum":"  919","line":"template <class _CharT, class _Traits>"},
{"lineNum":"  920","line":"inline _LIBCPP_CONSTEXPR_AFTER_CXX11 const _CharT *"},
{"lineNum":"  921","line":"__search_substring(const _CharT *__first1, const _CharT *__last1,"},
{"lineNum":"  922","line":"                   const _CharT *__first2, const _CharT *__last2) _NOEXCEPT {"},
{"lineNum":"  923","line":"  // Take advantage of knowing source and pattern lengths."},
{"lineNum":"  924","line":"  // Stop short when source is smaller than pattern."},
{"lineNum":"  925","line":"  const ptrdiff_t __len2 = __last2 - __first2;"},
{"lineNum":"  926","line":"  if (__len2 == 0)"},
{"lineNum":"  927","line":"    return __first1;"},
{"lineNum":"  928","line":""},
{"lineNum":"  929","line":"  ptrdiff_t __len1 = __last1 - __first1;"},
{"lineNum":"  930","line":"  if (__len1 < __len2)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  931","line":"    return __last1;"},
{"lineNum":"  932","line":""},
{"lineNum":"  933","line":"  // First element of __first2 is loop invariant."},
{"lineNum":"  934","line":"  _CharT __f2 = *__first2;"},
{"lineNum":"  935","line":"  while (true) {"},
{"lineNum":"  936","line":"    __len1 = __last1 - __first1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  937","line":"    // Check whether __first1 still has at least __len2 bytes."},
{"lineNum":"  938","line":"    if (__len1 < __len2)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  939","line":"      return __last1;"},
{"lineNum":"  940","line":""},
{"lineNum":"  941","line":"    // Find __f2 the first byte matching in __first1."},
{"lineNum":"  942","line":"    __first1 = _Traits::find(__first1, __len1 - __len2 + 1, __f2);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  943","line":"    if (__first1 == nullptr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  944","line":"      return __last1;"},
{"lineNum":"  945","line":""},
{"lineNum":"  946","line":"    // It is faster to compare from the first byte of __first1 even if we"},
{"lineNum":"  947","line":"    // already know that it matches the first byte of __first2: this is because"},
{"lineNum":"  948","line":"    // __first2 is most likely aligned, as it is user\'s \"pattern\" string, and"},
{"lineNum":"  949","line":"    // __first1 + 1 is most likely not aligned, as the match is in the middle of"},
{"lineNum":"  950","line":"    // the string."},
{"lineNum":"  951","line":"    if (_Traits::compare(__first1, __first2, __len2) == 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  952","line":"      return __first1;"},
{"lineNum":"  953","line":""},
{"lineNum":"  954","line":"    ++__first1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  955","line":"  }"},
{"lineNum":"  956","line":"}"},
{"lineNum":"  957","line":""},
{"lineNum":"  958","line":"template<class _CharT, class _SizeT, class _Traits, _SizeT __npos>"},
{"lineNum":"  959","line":"inline _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  960","line":"__str_find(const _CharT *__p, _SizeT __sz,"},
{"lineNum":"  961","line":"       const _CharT* __s, _SizeT __pos, _SizeT __n) _NOEXCEPT"},
{"lineNum":"  962","line":"{"},
{"lineNum":"  963","line":"    if (__pos > __sz)"},
{"lineNum":"  964","line":"        return __npos;"},
{"lineNum":"  965","line":""},
{"lineNum":"  966","line":"    if (__n == 0) // There is nothing to search, just return __pos."},
{"lineNum":"  967","line":"        return __pos;"},
{"lineNum":"  968","line":""},
{"lineNum":"  969","line":"    const _CharT *__r = __search_substring<_CharT, _Traits>("},
{"lineNum":"  970","line":"        __p + __pos, __p + __sz, __s, __s + __n);"},
{"lineNum":"  971","line":""},
{"lineNum":"  972","line":"    if (__r == __p + __sz)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  973","line":"        return __npos;"},
{"lineNum":"  974","line":"    return static_cast<_SizeT>(__r - __p);"},
{"lineNum":"  975","line":"}"},
{"lineNum":"  976","line":""},
{"lineNum":"  977","line":""},
{"lineNum":"  978","line":"// __str_rfind"},
{"lineNum":"  979","line":""},
{"lineNum":"  980","line":"template<class _CharT, class _SizeT, class _Traits, _SizeT __npos>"},
{"lineNum":"  981","line":"inline _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  982","line":"__str_rfind(const _CharT *__p, _SizeT __sz,"},
{"lineNum":"  983","line":"              _CharT __c, _SizeT __pos) _NOEXCEPT"},
{"lineNum":"  984","line":"{"},
{"lineNum":"  985","line":"    if (__sz < 1)"},
{"lineNum":"  986","line":"        return __npos;"},
{"lineNum":"  987","line":"    if (__pos < __sz)"},
{"lineNum":"  988","line":"        ++__pos;"},
{"lineNum":"  989","line":"    else"},
{"lineNum":"  990","line":"        __pos = __sz;"},
{"lineNum":"  991","line":"    for (const _CharT* __ps = __p + __pos; __ps != __p;)"},
{"lineNum":"  992","line":"    {"},
{"lineNum":"  993","line":"        if (_Traits::eq(*--__ps, __c))"},
{"lineNum":"  994","line":"            return static_cast<_SizeT>(__ps - __p);"},
{"lineNum":"  995","line":"    }"},
{"lineNum":"  996","line":"    return __npos;"},
{"lineNum":"  997","line":"}"},
{"lineNum":"  998","line":""},
{"lineNum":"  999","line":"template<class _CharT, class _SizeT, class _Traits, _SizeT __npos>"},
{"lineNum":" 1000","line":"inline _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1001","line":"__str_rfind(const _CharT *__p, _SizeT __sz,"},
{"lineNum":" 1002","line":"        const _CharT* __s, _SizeT __pos, _SizeT __n) _NOEXCEPT"},
{"lineNum":" 1003","line":"{"},
{"lineNum":" 1004","line":"    __pos = _VSTD::min(__pos, __sz);"},
{"lineNum":" 1005","line":"    if (__n < __sz - __pos)"},
{"lineNum":" 1006","line":"        __pos += __n;"},
{"lineNum":" 1007","line":"    else"},
{"lineNum":" 1008","line":"        __pos = __sz;"},
{"lineNum":" 1009","line":"    const _CharT* __r = _VSTD::__find_end("},
{"lineNum":" 1010","line":"                  __p, __p + __pos, __s, __s + __n, _Traits::eq,"},
{"lineNum":" 1011","line":"                        random_access_iterator_tag(), random_access_iterator_tag());"},
{"lineNum":" 1012","line":"    if (__n > 0 && __r == __p + __pos)"},
{"lineNum":" 1013","line":"        return __npos;"},
{"lineNum":" 1014","line":"    return static_cast<_SizeT>(__r - __p);"},
{"lineNum":" 1015","line":"}"},
{"lineNum":" 1016","line":""},
{"lineNum":" 1017","line":"// __str_find_first_of"},
{"lineNum":" 1018","line":"template<class _CharT, class _SizeT, class _Traits, _SizeT __npos>"},
{"lineNum":" 1019","line":"inline _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1020","line":"__str_find_first_of(const _CharT *__p, _SizeT __sz,"},
{"lineNum":" 1021","line":"                const _CharT* __s, _SizeT __pos, _SizeT __n) _NOEXCEPT"},
{"lineNum":" 1022","line":"{"},
{"lineNum":" 1023","line":"    if (__pos >= __sz || __n == 0)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1024","line":"        return __npos;"},
{"lineNum":" 1025","line":"    const _CharT* __r = _VSTD::__find_first_of_ce"},
{"lineNum":" 1026","line":"        (__p + __pos, __p + __sz, __s, __s + __n, _Traits::eq );","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1027","line":"    if (__r == __p + __sz)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1028","line":"        return __npos;"},
{"lineNum":" 1029","line":"    return static_cast<_SizeT>(__r - __p);"},
{"lineNum":" 1030","line":"}"},
{"lineNum":" 1031","line":""},
{"lineNum":" 1032","line":""},
{"lineNum":" 1033","line":"// __str_find_last_of"},
{"lineNum":" 1034","line":"template<class _CharT, class _SizeT, class _Traits, _SizeT __npos>"},
{"lineNum":" 1035","line":"inline _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1036","line":"__str_find_last_of(const _CharT *__p, _SizeT __sz,"},
{"lineNum":" 1037","line":"               const _CharT* __s, _SizeT __pos, _SizeT __n) _NOEXCEPT"},
{"lineNum":" 1038","line":"    {"},
{"lineNum":" 1039","line":"    if (__n != 0)"},
{"lineNum":" 1040","line":"    {"},
{"lineNum":" 1041","line":"        if (__pos < __sz)"},
{"lineNum":" 1042","line":"            ++__pos;"},
{"lineNum":" 1043","line":"        else"},
{"lineNum":" 1044","line":"            __pos = __sz;"},
{"lineNum":" 1045","line":"        for (const _CharT* __ps = __p + __pos; __ps != __p;)"},
{"lineNum":" 1046","line":"        {"},
{"lineNum":" 1047","line":"            const _CharT* __r = _Traits::find(__s, __n, *--__ps);"},
{"lineNum":" 1048","line":"            if (__r)"},
{"lineNum":" 1049","line":"                return static_cast<_SizeT>(__ps - __p);"},
{"lineNum":" 1050","line":"        }"},
{"lineNum":" 1051","line":"    }"},
{"lineNum":" 1052","line":"    return __npos;"},
{"lineNum":" 1053","line":"}"},
{"lineNum":" 1054","line":""},
{"lineNum":" 1055","line":""},
{"lineNum":" 1056","line":"// __str_find_first_not_of"},
{"lineNum":" 1057","line":"template<class _CharT, class _SizeT, class _Traits, _SizeT __npos>"},
{"lineNum":" 1058","line":"inline _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1059","line":"__str_find_first_not_of(const _CharT *__p, _SizeT __sz,"},
{"lineNum":" 1060","line":"                    const _CharT* __s, _SizeT __pos, _SizeT __n) _NOEXCEPT"},
{"lineNum":" 1061","line":"{"},
{"lineNum":" 1062","line":"    if (__pos < __sz)"},
{"lineNum":" 1063","line":"    {"},
{"lineNum":" 1064","line":"        const _CharT* __pe = __p + __sz;"},
{"lineNum":" 1065","line":"        for (const _CharT* __ps = __p + __pos; __ps != __pe; ++__ps)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1066","line":"            if (_Traits::find(__s, __n, *__ps) == nullptr)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1067","line":"                return static_cast<_SizeT>(__ps - __p);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1068","line":"    }"},
{"lineNum":" 1069","line":"    return __npos;"},
{"lineNum":" 1070","line":"}"},
{"lineNum":" 1071","line":""},
{"lineNum":" 1072","line":""},
{"lineNum":" 1073","line":"template<class _CharT, class _SizeT, class _Traits, _SizeT __npos>"},
{"lineNum":" 1074","line":"inline _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1075","line":"__str_find_first_not_of(const _CharT *__p, _SizeT __sz,"},
{"lineNum":" 1076","line":"                          _CharT __c, _SizeT __pos) _NOEXCEPT"},
{"lineNum":" 1077","line":"{"},
{"lineNum":" 1078","line":"    if (__pos < __sz)"},
{"lineNum":" 1079","line":"    {"},
{"lineNum":" 1080","line":"        const _CharT* __pe = __p + __sz;"},
{"lineNum":" 1081","line":"        for (const _CharT* __ps = __p + __pos; __ps != __pe; ++__ps)"},
{"lineNum":" 1082","line":"            if (!_Traits::eq(*__ps, __c))"},
{"lineNum":" 1083","line":"                return static_cast<_SizeT>(__ps - __p);"},
{"lineNum":" 1084","line":"    }"},
{"lineNum":" 1085","line":"    return __npos;"},
{"lineNum":" 1086","line":"}"},
{"lineNum":" 1087","line":""},
{"lineNum":" 1088","line":""},
{"lineNum":" 1089","line":"// __str_find_last_not_of"},
{"lineNum":" 1090","line":"template<class _CharT, class _SizeT, class _Traits, _SizeT __npos>"},
{"lineNum":" 1091","line":"inline _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1092","line":"__str_find_last_not_of(const _CharT *__p, _SizeT __sz,"},
{"lineNum":" 1093","line":"                   const _CharT* __s, _SizeT __pos, _SizeT __n) _NOEXCEPT"},
{"lineNum":" 1094","line":"{"},
{"lineNum":" 1095","line":"    if (__pos < __sz)"},
{"lineNum":" 1096","line":"        ++__pos;"},
{"lineNum":" 1097","line":"    else"},
{"lineNum":" 1098","line":"        __pos = __sz;"},
{"lineNum":" 1099","line":"    for (const _CharT* __ps = __p + __pos; __ps != __p;)"},
{"lineNum":" 1100","line":"        if (_Traits::find(__s, __n, *--__ps) == nullptr)"},
{"lineNum":" 1101","line":"            return static_cast<_SizeT>(__ps - __p);"},
{"lineNum":" 1102","line":"    return __npos;"},
{"lineNum":" 1103","line":"}"},
{"lineNum":" 1104","line":""},
{"lineNum":" 1105","line":""},
{"lineNum":" 1106","line":"template<class _CharT, class _SizeT, class _Traits, _SizeT __npos>"},
{"lineNum":" 1107","line":"inline _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1108","line":"__str_find_last_not_of(const _CharT *__p, _SizeT __sz,"},
{"lineNum":" 1109","line":"                         _CharT __c, _SizeT __pos) _NOEXCEPT"},
{"lineNum":" 1110","line":"{"},
{"lineNum":" 1111","line":"    if (__pos < __sz)"},
{"lineNum":" 1112","line":"        ++__pos;"},
{"lineNum":" 1113","line":"    else"},
{"lineNum":" 1114","line":"        __pos = __sz;"},
{"lineNum":" 1115","line":"    for (const _CharT* __ps = __p + __pos; __ps != __p;)"},
{"lineNum":" 1116","line":"        if (!_Traits::eq(*--__ps, __c))"},
{"lineNum":" 1117","line":"            return static_cast<_SizeT>(__ps - __p);"},
{"lineNum":" 1118","line":"    return __npos;"},
{"lineNum":" 1119","line":"}"},
{"lineNum":" 1120","line":""},
{"lineNum":" 1121","line":"template<class _Ptr>"},
{"lineNum":" 1122","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1123","line":"size_t __do_string_hash(_Ptr __p, _Ptr __e)"},
{"lineNum":" 1124","line":"{"},
{"lineNum":" 1125","line":"    typedef typename iterator_traits<_Ptr>::value_type value_type;"},
{"lineNum":" 1126","line":"    return __murmur2_or_cityhash<size_t>()(__p, (__e-__p)*sizeof(value_type));","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1127","line":"}"},
{"lineNum":" 1128","line":""},
{"lineNum":" 1129","line":"template <class _CharT, class _Iter, class _Traits=char_traits<_CharT> >"},
{"lineNum":" 1130","line":"struct __quoted_output_proxy"},
{"lineNum":" 1131","line":"{"},
{"lineNum":" 1132","line":"    _Iter  __first;"},
{"lineNum":" 1133","line":"    _Iter  __last;"},
{"lineNum":" 1134","line":"    _CharT  __delim;"},
{"lineNum":" 1135","line":"    _CharT  __escape;"},
{"lineNum":" 1136","line":""},
{"lineNum":" 1137","line":"    __quoted_output_proxy(_Iter __f, _Iter __l, _CharT __d, _CharT __e)"},
{"lineNum":" 1138","line":"    : __first(__f), __last(__l), __delim(__d), __escape(__e) {}"},
{"lineNum":" 1139","line":"    //  This would be a nice place for a string_ref"},
{"lineNum":" 1140","line":"};"},
{"lineNum":" 1141","line":""},
{"lineNum":" 1142","line":"_LIBCPP_END_NAMESPACE_STD"},
{"lineNum":" 1143","line":""},
{"lineNum":" 1144","line":"_LIBCPP_POP_MACROS"},
{"lineNum":" 1145","line":""},
{"lineNum":" 1146","line":"#endif // _LIBCPP___STRING"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 30, "covered" : 4,};
var merged_data = [];
