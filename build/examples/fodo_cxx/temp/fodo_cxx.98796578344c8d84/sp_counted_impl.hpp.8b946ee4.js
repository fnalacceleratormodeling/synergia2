var data = {lines:[
{"lineNum":"    1","line":"#ifndef BOOST_SMART_PTR_DETAIL_SP_COUNTED_IMPL_HPP_INCLUDED"},
{"lineNum":"    2","line":"#define BOOST_SMART_PTR_DETAIL_SP_COUNTED_IMPL_HPP_INCLUDED"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"// MS compatible compilers support #pragma once"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"#if defined(_MSC_VER) && (_MSC_VER >= 1020)"},
{"lineNum":"    7","line":"# pragma once"},
{"lineNum":"    8","line":"#endif"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"//"},
{"lineNum":"   11","line":"//  detail/sp_counted_impl.hpp"},
{"lineNum":"   12","line":"//"},
{"lineNum":"   13","line":"//  Copyright (c) 2001, 2002, 2003 Peter Dimov and Multi Media Ltd."},
{"lineNum":"   14","line":"//  Copyright 2004-2005 Peter Dimov"},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"// Distributed under the Boost Software License, Version 1.0. (See"},
{"lineNum":"   17","line":"// accompanying file LICENSE_1_0.txt or copy at"},
{"lineNum":"   18","line":"// http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"   19","line":"//"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"#include <boost/config.hpp>"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"#if defined(BOOST_SP_USE_STD_ALLOCATOR) && defined(BOOST_SP_USE_QUICK_ALLOCATOR)"},
{"lineNum":"   24","line":"# error BOOST_SP_USE_STD_ALLOCATOR and BOOST_SP_USE_QUICK_ALLOCATOR are incompatible."},
{"lineNum":"   25","line":"#endif"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"#include <boost/checked_delete.hpp>"},
{"lineNum":"   28","line":"#include <boost/smart_ptr/detail/sp_counted_base.hpp>"},
{"lineNum":"   29","line":"#include <boost/smart_ptr/detail/sp_noexcept.hpp>"},
{"lineNum":"   30","line":"#include <boost/core/addressof.hpp>"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"#if defined(BOOST_SP_USE_QUICK_ALLOCATOR)"},
{"lineNum":"   33","line":"#include <boost/smart_ptr/detail/quick_allocator.hpp>"},
{"lineNum":"   34","line":"#endif"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"#if defined(BOOST_SP_USE_STD_ALLOCATOR)"},
{"lineNum":"   37","line":"#include <memory>           // std::allocator"},
{"lineNum":"   38","line":"#endif"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"#include <cstddef>          // std::size_t"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"namespace boost"},
{"lineNum":"   43","line":"{"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"#if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"void sp_scalar_constructor_hook( void * px, std::size_t size, void * pn );"},
{"lineNum":"   48","line":"void sp_scalar_destructor_hook( void * px, std::size_t size, void * pn );"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"#endif"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"namespace detail"},
{"lineNum":"   53","line":"{"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"// get_local_deleter"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"template<class D> class local_sp_deleter;"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"template<class D> D * get_local_deleter( D * /*p*/ ) BOOST_SP_NOEXCEPT"},
{"lineNum":"   60","line":"{"},
{"lineNum":"   61","line":"    return 0;"},
{"lineNum":"   62","line":"}"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"template<class D> D * get_local_deleter( local_sp_deleter<D> * p ) BOOST_SP_NOEXCEPT;"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"//"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"template<class X> class BOOST_SYMBOL_VISIBLE sp_counted_impl_p: public sp_counted_base","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"   69","line":"{"},
{"lineNum":"   70","line":"private:"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"    X * px_;"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"    sp_counted_impl_p( sp_counted_impl_p const & );"},
{"lineNum":"   75","line":"    sp_counted_impl_p & operator= ( sp_counted_impl_p const & );"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"    typedef sp_counted_impl_p<X> this_type;"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"public:"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"    explicit sp_counted_impl_p( X * px ): px_( px )","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   82","line":"    {"},
{"lineNum":"   83","line":"#if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)"},
{"lineNum":"   84","line":"        boost::sp_scalar_constructor_hook( px, sizeof(X), this );"},
{"lineNum":"   85","line":"#endif"},
{"lineNum":"   86","line":"    }"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"    virtual void dispose() BOOST_SP_NOEXCEPT"},
{"lineNum":"   89","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   90","line":"#if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)"},
{"lineNum":"   91","line":"        boost::sp_scalar_destructor_hook( px_, sizeof(X), this );"},
{"lineNum":"   92","line":"#endif"},
{"lineNum":"   93","line":"        boost::checked_delete( px_ );","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   94","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"    virtual void * get_deleter( sp_typeinfo const & ) BOOST_SP_NOEXCEPT"},
{"lineNum":"   97","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   98","line":"        return 0;","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"   99","line":"    }"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"    virtual void * get_local_deleter( sp_typeinfo const & ) BOOST_SP_NOEXCEPT"},
{"lineNum":"  102","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  103","line":"        return 0;","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  104","line":"    }"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"    virtual void * get_untyped_deleter() BOOST_SP_NOEXCEPT"},
{"lineNum":"  107","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  108","line":"        return 0;","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  109","line":"    }"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"#if defined(BOOST_SP_USE_STD_ALLOCATOR)"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"    void * operator new( std::size_t )"},
{"lineNum":"  114","line":"    {"},
{"lineNum":"  115","line":"        return std::allocator<this_type>().allocate( 1, static_cast<this_type *>(0) );"},
{"lineNum":"  116","line":"    }"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"    void operator delete( void * p )"},
{"lineNum":"  119","line":"    {"},
{"lineNum":"  120","line":"        std::allocator<this_type>().deallocate( static_cast<this_type *>(p), 1 );"},
{"lineNum":"  121","line":"    }"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"#endif"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"#if defined(BOOST_SP_USE_QUICK_ALLOCATOR)"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"    void * operator new( std::size_t )"},
{"lineNum":"  128","line":"    {"},
{"lineNum":"  129","line":"        return quick_allocator<this_type>::alloc();"},
{"lineNum":"  130","line":"    }"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"    void operator delete( void * p )"},
{"lineNum":"  133","line":"    {"},
{"lineNum":"  134","line":"        quick_allocator<this_type>::dealloc( p );"},
{"lineNum":"  135","line":"    }"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"#endif"},
{"lineNum":"  138","line":"};"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"//"},
{"lineNum":"  141","line":"// Borland\'s Codeguard trips up over the -Vx- option here:"},
{"lineNum":"  142","line":"//"},
{"lineNum":"  143","line":"#ifdef __CODEGUARD__"},
{"lineNum":"  144","line":"# pragma option push -Vx-"},
{"lineNum":"  145","line":"#endif"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"template<class P, class D> class BOOST_SYMBOL_VISIBLE sp_counted_impl_pd: public sp_counted_base"},
{"lineNum":"  148","line":"{"},
{"lineNum":"  149","line":"private:"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"    P ptr; // copy constructor must not throw"},
{"lineNum":"  152","line":"    D del; // copy constructor must not throw"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"    sp_counted_impl_pd( sp_counted_impl_pd const & );"},
{"lineNum":"  155","line":"    sp_counted_impl_pd & operator= ( sp_counted_impl_pd const & );"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"    typedef sp_counted_impl_pd<P, D> this_type;"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"public:"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"    // pre: d(p) must not throw"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"    sp_counted_impl_pd( P p, D & d ): ptr( p ), del( d )"},
{"lineNum":"  164","line":"    {"},
{"lineNum":"  165","line":"    }"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"    sp_counted_impl_pd( P p ): ptr( p ), del()"},
{"lineNum":"  168","line":"    {"},
{"lineNum":"  169","line":"    }"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"    virtual void dispose() BOOST_SP_NOEXCEPT"},
{"lineNum":"  172","line":"    {"},
{"lineNum":"  173","line":"        del( ptr );"},
{"lineNum":"  174","line":"    }"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"    virtual void * get_deleter( sp_typeinfo const & ti ) BOOST_SP_NOEXCEPT"},
{"lineNum":"  177","line":"    {"},
{"lineNum":"  178","line":"        return ti == BOOST_SP_TYPEID(D)? &reinterpret_cast<char&>( del ): 0;"},
{"lineNum":"  179","line":"    }"},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"    virtual void * get_local_deleter( sp_typeinfo const & ti ) BOOST_SP_NOEXCEPT"},
{"lineNum":"  182","line":"    {"},
{"lineNum":"  183","line":"        return ti == BOOST_SP_TYPEID(D)? boost::detail::get_local_deleter( boost::addressof( del ) ): 0;"},
{"lineNum":"  184","line":"    }"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"    virtual void * get_untyped_deleter() BOOST_SP_NOEXCEPT"},
{"lineNum":"  187","line":"    {"},
{"lineNum":"  188","line":"        return &reinterpret_cast<char&>( del );"},
{"lineNum":"  189","line":"    }"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"#if defined(BOOST_SP_USE_STD_ALLOCATOR)"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"    void * operator new( std::size_t )"},
{"lineNum":"  194","line":"    {"},
{"lineNum":"  195","line":"        return std::allocator<this_type>().allocate( 1, static_cast<this_type *>(0) );"},
{"lineNum":"  196","line":"    }"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"    void operator delete( void * p )"},
{"lineNum":"  199","line":"    {"},
{"lineNum":"  200","line":"        std::allocator<this_type>().deallocate( static_cast<this_type *>(p), 1 );"},
{"lineNum":"  201","line":"    }"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"#endif"},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"#if defined(BOOST_SP_USE_QUICK_ALLOCATOR)"},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"    void * operator new( std::size_t )"},
{"lineNum":"  208","line":"    {"},
{"lineNum":"  209","line":"        return quick_allocator<this_type>::alloc();"},
{"lineNum":"  210","line":"    }"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"    void operator delete( void * p )"},
{"lineNum":"  213","line":"    {"},
{"lineNum":"  214","line":"        quick_allocator<this_type>::dealloc( p );"},
{"lineNum":"  215","line":"    }"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"#endif"},
{"lineNum":"  218","line":"};"},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"template<class P, class D, class A> class BOOST_SYMBOL_VISIBLE sp_counted_impl_pda: public sp_counted_base"},
{"lineNum":"  221","line":"{"},
{"lineNum":"  222","line":"private:"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"    P p_; // copy constructor must not throw"},
{"lineNum":"  225","line":"    D d_; // copy constructor must not throw"},
{"lineNum":"  226","line":"    A a_; // copy constructor must not throw"},
{"lineNum":"  227","line":""},
{"lineNum":"  228","line":"    sp_counted_impl_pda( sp_counted_impl_pda const & );"},
{"lineNum":"  229","line":"    sp_counted_impl_pda & operator= ( sp_counted_impl_pda const & );"},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"    typedef sp_counted_impl_pda<P, D, A> this_type;"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"public:"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"    // pre: d( p ) must not throw"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"    sp_counted_impl_pda( P p, D & d, A a ): p_( p ), d_( d ), a_( a )"},
{"lineNum":"  238","line":"    {"},
{"lineNum":"  239","line":"    }"},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"    sp_counted_impl_pda( P p, A a ): p_( p ), d_( a ), a_( a )"},
{"lineNum":"  242","line":"    {"},
{"lineNum":"  243","line":"    }"},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"    virtual void dispose() BOOST_SP_NOEXCEPT"},
{"lineNum":"  246","line":"    {"},
{"lineNum":"  247","line":"        d_( p_ );"},
{"lineNum":"  248","line":"    }"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"    virtual void destroy() BOOST_SP_NOEXCEPT"},
{"lineNum":"  251","line":"    {"},
{"lineNum":"  252","line":"#if !defined( BOOST_NO_CXX11_ALLOCATOR )"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"        typedef typename std::allocator_traits<A>::template rebind_alloc< this_type > A2;"},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"#else"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"        typedef typename A::template rebind< this_type >::other A2;"},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"#endif"},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"        A2 a2( a_ );"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"        this->~this_type();"},
{"lineNum":"  265","line":""},
{"lineNum":"  266","line":"        a2.deallocate( this, 1 );"},
{"lineNum":"  267","line":"    }"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"    virtual void * get_deleter( sp_typeinfo const & ti ) BOOST_SP_NOEXCEPT"},
{"lineNum":"  270","line":"    {"},
{"lineNum":"  271","line":"        return ti == BOOST_SP_TYPEID( D )? &reinterpret_cast<char&>( d_ ): 0;"},
{"lineNum":"  272","line":"    }"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"    virtual void * get_local_deleter( sp_typeinfo const & ti ) BOOST_SP_NOEXCEPT"},
{"lineNum":"  275","line":"    {"},
{"lineNum":"  276","line":"        return ti == BOOST_SP_TYPEID(D)? boost::detail::get_local_deleter( boost::addressof( d_ ) ): 0;"},
{"lineNum":"  277","line":"    }"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"    virtual void * get_untyped_deleter() BOOST_SP_NOEXCEPT"},
{"lineNum":"  280","line":"    {"},
{"lineNum":"  281","line":"        return &reinterpret_cast<char&>( d_ );"},
{"lineNum":"  282","line":"    }"},
{"lineNum":"  283","line":"};"},
{"lineNum":"  284","line":""},
{"lineNum":"  285","line":"#ifdef __CODEGUARD__"},
{"lineNum":"  286","line":"# pragma option pop"},
{"lineNum":"  287","line":"#endif"},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"} // namespace detail"},
{"lineNum":"  290","line":""},
{"lineNum":"  291","line":"} // namespace boost"},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"#endif  // #ifndef BOOST_SMART_PTR_DETAIL_SP_COUNTED_IMPL_HPP_INCLUDED"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 11, "covered" : 0,};
var merged_data = [];
