var data = {lines:[
{"lineNum":"    1","line":"// -*- C++ -*-"},
{"lineNum":"    2","line":"//===---------------------------- array -----------------------------------===//"},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions."},
{"lineNum":"    5","line":"// See https://llvm.org/LICENSE.txt for license information."},
{"lineNum":"    6","line":"// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef _LIBCPP_ARRAY"},
{"lineNum":"   11","line":"#define _LIBCPP_ARRAY"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"/*"},
{"lineNum":"   14","line":"    array synopsis"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"namespace std"},
{"lineNum":"   17","line":"{"},
{"lineNum":"   18","line":"template <class T, size_t N >"},
{"lineNum":"   19","line":"struct array"},
{"lineNum":"   20","line":"{"},
{"lineNum":"   21","line":"    // types:"},
{"lineNum":"   22","line":"    typedef T & reference;"},
{"lineNum":"   23","line":"    typedef const T & const_reference;"},
{"lineNum":"   24","line":"    typedef implementation defined iterator;"},
{"lineNum":"   25","line":"    typedef implementation defined const_iterator;"},
{"lineNum":"   26","line":"    typedef size_t size_type;"},
{"lineNum":"   27","line":"    typedef ptrdiff_t difference_type;"},
{"lineNum":"   28","line":"    typedef T value_type;"},
{"lineNum":"   29","line":"    typedef T* pointer;"},
{"lineNum":"   30","line":"    typedef const T* const_pointer;"},
{"lineNum":"   31","line":"    typedef std::reverse_iterator<iterator> reverse_iterator;"},
{"lineNum":"   32","line":"    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"    // No explicit construct/copy/destroy for aggregate type"},
{"lineNum":"   35","line":"    void fill(const T& u);                                      // constexpr in C++20"},
{"lineNum":"   36","line":"    void swap(array& a) noexcept(is_nothrow_swappable_v<T>);    // constexpr in C++20"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"    // iterators:"},
{"lineNum":"   39","line":"    iterator begin() noexcept;                                  // constexpr in C++17"},
{"lineNum":"   40","line":"    const_iterator begin() const noexcept;                      // constexpr in C++17"},
{"lineNum":"   41","line":"    iterator end() noexcept;                                    // constexpr in C++17"},
{"lineNum":"   42","line":"    const_iterator end() const noexcept;                        // constexpr in C++17"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"    reverse_iterator rbegin() noexcept;                         // constexpr in C++17"},
{"lineNum":"   45","line":"    const_reverse_iterator rbegin() const noexcept;             // constexpr in C++17"},
{"lineNum":"   46","line":"    reverse_iterator rend() noexcept;                           // constexpr in C++17"},
{"lineNum":"   47","line":"    const_reverse_iterator rend() const noexcept;               // constexpr in C++17"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"    const_iterator cbegin() const noexcept;                     // constexpr in C++17"},
{"lineNum":"   50","line":"    const_iterator cend() const noexcept;                       // constexpr in C++17"},
{"lineNum":"   51","line":"    const_reverse_iterator crbegin() const noexcept;            // constexpr in C++17"},
{"lineNum":"   52","line":"    const_reverse_iterator crend() const noexcept;              // constexpr in C++17"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"    // capacity:"},
{"lineNum":"   55","line":"    constexpr size_type size() const noexcept;"},
{"lineNum":"   56","line":"    constexpr size_type max_size() const noexcept;"},
{"lineNum":"   57","line":"    constexpr bool empty() const noexcept;"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"    // element access:"},
{"lineNum":"   60","line":"    reference operator[](size_type n);                          // constexpr in C++17"},
{"lineNum":"   61","line":"    const_reference operator[](size_type n) const;              // constexpr in C++14"},
{"lineNum":"   62","line":"    reference at(size_type n);                                  // constexpr in C++17"},
{"lineNum":"   63","line":"    const_reference at(size_type n) const;                      // constexpr in C++14"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"    reference front();                                          // constexpr in C++17"},
{"lineNum":"   66","line":"    const_reference front() const;                              // constexpr in C++14"},
{"lineNum":"   67","line":"    reference back();                                           // constexpr in C++17"},
{"lineNum":"   68","line":"    const_reference back() const;                               // constexpr in C++14"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"    T* data() noexcept;                                         // constexpr in C++17"},
{"lineNum":"   71","line":"    const T* data() const noexcept;                             // constexpr in C++17"},
{"lineNum":"   72","line":"};"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"template <class T, class... U>"},
{"lineNum":"   75","line":"  array(T, U...) -> array<T, 1 + sizeof...(U)>;                 // C++17"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"template <class T, size_t N>"},
{"lineNum":"   78","line":"  bool operator==(const array<T,N>& x, const array<T,N>& y);    // constexpr in C++20"},
{"lineNum":"   79","line":"template <class T, size_t N>"},
{"lineNum":"   80","line":"  bool operator!=(const array<T,N>& x, const array<T,N>& y);    // constexpr in C++20"},
{"lineNum":"   81","line":"template <class T, size_t N>"},
{"lineNum":"   82","line":"  bool operator<(const array<T,N>& x, const array<T,N>& y);     // constexpr in C++20"},
{"lineNum":"   83","line":"template <class T, size_t N>"},
{"lineNum":"   84","line":"  bool operator>(const array<T,N>& x, const array<T,N>& y);     // constexpr in C++20"},
{"lineNum":"   85","line":"template <class T, size_t N>"},
{"lineNum":"   86","line":"  bool operator<=(const array<T,N>& x, const array<T,N>& y);    // constexpr in C++20"},
{"lineNum":"   87","line":"template <class T, size_t N>"},
{"lineNum":"   88","line":"  bool operator>=(const array<T,N>& x, const array<T,N>& y);    // constexpr in C++20"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"template <class T, size_t N >"},
{"lineNum":"   91","line":"  void swap(array<T,N>& x, array<T,N>& y) noexcept(noexcept(x.swap(y))); // constexpr in C++20"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"template <class T, size_t N>"},
{"lineNum":"   94","line":"  constexpr array<remove_cv_t<T>, N> to_array(T (&a)[N]);  // C++20"},
{"lineNum":"   95","line":"template <class T, size_t N>"},
{"lineNum":"   96","line":"  constexpr array<remove_cv_t<T>, N> to_array(T (&&a)[N]); // C++20"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"template <class T> struct tuple_size;"},
{"lineNum":"   99","line":"template <size_t I, class T> struct tuple_element;"},
{"lineNum":"  100","line":"template <class T, size_t N> struct tuple_size<array<T, N>>;"},
{"lineNum":"  101","line":"template <size_t I, class T, size_t N> struct tuple_element<I, array<T, N>>;"},
{"lineNum":"  102","line":"template <size_t I, class T, size_t N> T& get(array<T, N>&) noexcept;               // constexpr in C++14"},
{"lineNum":"  103","line":"template <size_t I, class T, size_t N> const T& get(const array<T, N>&) noexcept;   // constexpr in C++14"},
{"lineNum":"  104","line":"template <size_t I, class T, size_t N> T&& get(array<T, N>&&) noexcept;             // constexpr in C++14"},
{"lineNum":"  105","line":"template <size_t I, class T, size_t N> const T&& get(const array<T, N>&&) noexcept; // constexpr in C++14"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"}  // std"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"*/"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"#include <__config>"},
{"lineNum":"  112","line":"#include <__debug>"},
{"lineNum":"  113","line":"#include <__tuple>"},
{"lineNum":"  114","line":"#include <algorithm>"},
{"lineNum":"  115","line":"#include <cstdlib> // for _LIBCPP_UNREACHABLE"},
{"lineNum":"  116","line":"#include <iterator>"},
{"lineNum":"  117","line":"#include <stdexcept>"},
{"lineNum":"  118","line":"#include <type_traits>"},
{"lineNum":"  119","line":"#include <utility>"},
{"lineNum":"  120","line":"#include <version>"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"},
{"lineNum":"  123","line":"#pragma GCC system_header"},
{"lineNum":"  124","line":"#endif"},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"_LIBCPP_BEGIN_NAMESPACE_STD"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"template <class _Tp, size_t _Size>"},
{"lineNum":"  129","line":"struct _LIBCPP_TEMPLATE_VIS array","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  130","line":"{"},
{"lineNum":"  131","line":"    // types:"},
{"lineNum":"  132","line":"    typedef array __self;"},
{"lineNum":"  133","line":"    typedef _Tp                                   value_type;"},
{"lineNum":"  134","line":"    typedef value_type&                           reference;"},
{"lineNum":"  135","line":"    typedef const value_type&                     const_reference;"},
{"lineNum":"  136","line":"    typedef value_type*                           iterator;"},
{"lineNum":"  137","line":"    typedef const value_type*                     const_iterator;"},
{"lineNum":"  138","line":"    typedef value_type*                           pointer;"},
{"lineNum":"  139","line":"    typedef const value_type*                     const_pointer;"},
{"lineNum":"  140","line":"    typedef size_t                                size_type;"},
{"lineNum":"  141","line":"    typedef ptrdiff_t                             difference_type;"},
{"lineNum":"  142","line":"    typedef _VSTD::reverse_iterator<iterator>       reverse_iterator;"},
{"lineNum":"  143","line":"    typedef _VSTD::reverse_iterator<const_iterator> const_reverse_iterator;"},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"    _Tp __elems_[_Size];"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"    // No explicit construct/copy/destroy for aggregate type"},
{"lineNum":"  148","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  149","line":"    void fill(const value_type& __u) {"},
{"lineNum":"  150","line":"        _VSTD::fill_n(data(), _Size, __u);"},
{"lineNum":"  151","line":"    }"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  154","line":"    void swap(array& __a) _NOEXCEPT_(__is_nothrow_swappable<_Tp>::value) {"},
{"lineNum":"  155","line":"        _VSTD::swap_ranges(data(), data() + _Size, __a.data());"},
{"lineNum":"  156","line":"    }"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"    // iterators:"},
{"lineNum":"  159","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  160","line":"    iterator begin() _NOEXCEPT {return iterator(data());}"},
{"lineNum":"  161","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  162","line":"    const_iterator begin() const _NOEXCEPT {return const_iterator(data());}"},
{"lineNum":"  163","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  164","line":"    iterator end() _NOEXCEPT {return iterator(data() + _Size);}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  165","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  166","line":"    const_iterator end() const _NOEXCEPT {return const_iterator(data() + _Size);}"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  169","line":"    reverse_iterator rbegin() _NOEXCEPT {return reverse_iterator(end());}"},
{"lineNum":"  170","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  171","line":"    const_reverse_iterator rbegin() const _NOEXCEPT {return const_reverse_iterator(end());}"},
{"lineNum":"  172","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  173","line":"    reverse_iterator rend() _NOEXCEPT {return reverse_iterator(begin());}"},
{"lineNum":"  174","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  175","line":"    const_reverse_iterator rend() const _NOEXCEPT {return const_reverse_iterator(begin());}"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  178","line":"    const_iterator cbegin() const _NOEXCEPT {return begin();}"},
{"lineNum":"  179","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  180","line":"    const_iterator cend() const _NOEXCEPT {return end();}"},
{"lineNum":"  181","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  182","line":"    const_reverse_iterator crbegin() const _NOEXCEPT {return rbegin();}"},
{"lineNum":"  183","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  184","line":"    const_reverse_iterator crend() const _NOEXCEPT {return rend();}"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"    // capacity:"},
{"lineNum":"  187","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  188","line":"    _LIBCPP_CONSTEXPR size_type size() const _NOEXCEPT {return _Size;}"},
{"lineNum":"  189","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  190","line":"    _LIBCPP_CONSTEXPR size_type max_size() const _NOEXCEPT {return _Size;}"},
{"lineNum":"  191","line":"    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  192","line":"    _LIBCPP_CONSTEXPR bool empty() const _NOEXCEPT {return _Size == 0;}"},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"    // element access:"},
{"lineNum":"  195","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  196","line":"    reference operator[](size_type __n) _NOEXCEPT {"},
{"lineNum":"  197","line":"        _LIBCPP_ASSERT(__n < _Size, \"out-of-bounds access in std::array<T, N>\");"},
{"lineNum":"  198","line":"        return __elems_[__n];","class":"lineNoCov","hits":"0","possible_hits":"29",},
{"lineNum":"  199","line":"    }"},
{"lineNum":"  200","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  201","line":"    const_reference operator[](size_type __n) const _NOEXCEPT {"},
{"lineNum":"  202","line":"        _LIBCPP_ASSERT(__n < _Size, \"out-of-bounds access in std::array<T, N>\");"},
{"lineNum":"  203","line":"        return __elems_[__n];","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  204","line":"    }"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"    _LIBCPP_CONSTEXPR_AFTER_CXX14 reference at(size_type __n)"},
{"lineNum":"  207","line":"    {"},
{"lineNum":"  208","line":"        if (__n >= _Size)"},
{"lineNum":"  209","line":"            __throw_out_of_range(\"array::at\");"},
{"lineNum":"  210","line":"        return __elems_[__n];"},
{"lineNum":"  211","line":"    }"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"    _LIBCPP_CONSTEXPR_AFTER_CXX11 const_reference at(size_type __n) const"},
{"lineNum":"  214","line":"    {"},
{"lineNum":"  215","line":"        if (__n >= _Size)"},
{"lineNum":"  216","line":"            __throw_out_of_range(\"array::at\");"},
{"lineNum":"  217","line":"        return __elems_[__n];"},
{"lineNum":"  218","line":"    }"},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 reference front()             _NOEXCEPT {return (*this)[0];}"},
{"lineNum":"  221","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 const_reference front() const _NOEXCEPT {return (*this)[0];}"},
{"lineNum":"  222","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 reference back()              _NOEXCEPT {return (*this)[_Size - 1];}"},
{"lineNum":"  223","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 const_reference back() const  _NOEXCEPT {return (*this)[_Size - 1];}"},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  226","line":"    value_type* data() _NOEXCEPT {return __elems_;}","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  227","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  228","line":"    const value_type* data() const _NOEXCEPT {return __elems_;}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  229","line":"};"},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"template <class _Tp>"},
{"lineNum":"  232","line":"struct _LIBCPP_TEMPLATE_VIS array<_Tp, 0>"},
{"lineNum":"  233","line":"{"},
{"lineNum":"  234","line":"    // types:"},
{"lineNum":"  235","line":"    typedef array __self;"},
{"lineNum":"  236","line":"    typedef _Tp                                   value_type;"},
{"lineNum":"  237","line":"    typedef value_type&                           reference;"},
{"lineNum":"  238","line":"    typedef const value_type&                     const_reference;"},
{"lineNum":"  239","line":"    typedef value_type*                           iterator;"},
{"lineNum":"  240","line":"    typedef const value_type*                     const_iterator;"},
{"lineNum":"  241","line":"    typedef value_type*                           pointer;"},
{"lineNum":"  242","line":"    typedef const value_type*                     const_pointer;"},
{"lineNum":"  243","line":"    typedef size_t                                size_type;"},
{"lineNum":"  244","line":"    typedef ptrdiff_t                             difference_type;"},
{"lineNum":"  245","line":"    typedef _VSTD::reverse_iterator<iterator>       reverse_iterator;"},
{"lineNum":"  246","line":"    typedef _VSTD::reverse_iterator<const_iterator> const_reverse_iterator;"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"    typedef typename conditional<is_const<_Tp>::value, const char,"},
{"lineNum":"  249","line":"                                char>::type _CharType;"},
{"lineNum":"  250","line":""},
{"lineNum":"  251","line":"    struct  _ArrayInStructT { _Tp __data_[1]; };"},
{"lineNum":"  252","line":"    _ALIGNAS_TYPE(_ArrayInStructT) _CharType __elems_[sizeof(_ArrayInStructT)];"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  255","line":"    value_type* data() _NOEXCEPT {return nullptr;}"},
{"lineNum":"  256","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  257","line":"    const value_type* data() const _NOEXCEPT {return nullptr;}"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"    // No explicit construct/copy/destroy for aggregate type"},
{"lineNum":"  260","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  261","line":"    void fill(const value_type&) {"},
{"lineNum":"  262","line":"      static_assert(!is_const<_Tp>::value,"},
{"lineNum":"  263","line":"                    \"cannot fill zero-sized array of type \'const T\'\");"},
{"lineNum":"  264","line":"    }"},
{"lineNum":"  265","line":""},
{"lineNum":"  266","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  267","line":"    void swap(array&) _NOEXCEPT {"},
{"lineNum":"  268","line":"      static_assert(!is_const<_Tp>::value,"},
{"lineNum":"  269","line":"                    \"cannot swap zero-sized array of type \'const T\'\");"},
{"lineNum":"  270","line":"    }"},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"    // iterators:"},
{"lineNum":"  273","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  274","line":"    iterator begin() _NOEXCEPT {return iterator(data());}"},
{"lineNum":"  275","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  276","line":"    const_iterator begin() const _NOEXCEPT {return const_iterator(data());}"},
{"lineNum":"  277","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  278","line":"    iterator end() _NOEXCEPT {return iterator(data());}"},
{"lineNum":"  279","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  280","line":"    const_iterator end() const _NOEXCEPT {return const_iterator(data());}"},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  283","line":"    reverse_iterator rbegin() _NOEXCEPT {return reverse_iterator(end());}"},
{"lineNum":"  284","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  285","line":"    const_reverse_iterator rbegin() const _NOEXCEPT {return const_reverse_iterator(end());}"},
{"lineNum":"  286","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  287","line":"    reverse_iterator rend() _NOEXCEPT {return reverse_iterator(begin());}"},
{"lineNum":"  288","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  289","line":"    const_reverse_iterator rend() const _NOEXCEPT {return const_reverse_iterator(begin());}"},
{"lineNum":"  290","line":""},
{"lineNum":"  291","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  292","line":"    const_iterator cbegin() const _NOEXCEPT {return begin();}"},
{"lineNum":"  293","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  294","line":"    const_iterator cend() const _NOEXCEPT {return end();}"},
{"lineNum":"  295","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  296","line":"    const_reverse_iterator crbegin() const _NOEXCEPT {return rbegin();}"},
{"lineNum":"  297","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  298","line":"    const_reverse_iterator crend() const _NOEXCEPT {return rend();}"},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"    // capacity:"},
{"lineNum":"  301","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  302","line":"    _LIBCPP_CONSTEXPR size_type size() const _NOEXCEPT {return 0; }"},
{"lineNum":"  303","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  304","line":"    _LIBCPP_CONSTEXPR size_type max_size() const _NOEXCEPT {return 0;}"},
{"lineNum":"  305","line":"    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  306","line":"    _LIBCPP_CONSTEXPR bool empty() const _NOEXCEPT {return true;}"},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"    // element access:"},
{"lineNum":"  309","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  310","line":"    reference operator[](size_type) _NOEXCEPT {"},
{"lineNum":"  311","line":"      _LIBCPP_ASSERT(false, \"cannot call array<T, 0>::operator[] on a zero-sized array\");"},
{"lineNum":"  312","line":"      _LIBCPP_UNREACHABLE();"},
{"lineNum":"  313","line":"    }"},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  316","line":"    const_reference operator[](size_type) const _NOEXCEPT {"},
{"lineNum":"  317","line":"      _LIBCPP_ASSERT(false, \"cannot call array<T, 0>::operator[] on a zero-sized array\");"},
{"lineNum":"  318","line":"      _LIBCPP_UNREACHABLE();"},
{"lineNum":"  319","line":"    }"},
{"lineNum":"  320","line":""},
{"lineNum":"  321","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  322","line":"    reference at(size_type) {"},
{"lineNum":"  323","line":"      __throw_out_of_range(\"array<T, 0>::at\");"},
{"lineNum":"  324","line":"      _LIBCPP_UNREACHABLE();"},
{"lineNum":"  325","line":"    }"},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  328","line":"    const_reference at(size_type) const {"},
{"lineNum":"  329","line":"      __throw_out_of_range(\"array<T, 0>::at\");"},
{"lineNum":"  330","line":"      _LIBCPP_UNREACHABLE();"},
{"lineNum":"  331","line":"    }"},
{"lineNum":"  332","line":""},
{"lineNum":"  333","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  334","line":"    reference front() _NOEXCEPT {"},
{"lineNum":"  335","line":"      _LIBCPP_ASSERT(false, \"cannot call array<T, 0>::front() on a zero-sized array\");"},
{"lineNum":"  336","line":"      _LIBCPP_UNREACHABLE();"},
{"lineNum":"  337","line":"    }"},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  340","line":"    const_reference front() const _NOEXCEPT {"},
{"lineNum":"  341","line":"      _LIBCPP_ASSERT(false, \"cannot call array<T, 0>::front() on a zero-sized array\");"},
{"lineNum":"  342","line":"      _LIBCPP_UNREACHABLE();"},
{"lineNum":"  343","line":"    }"},
{"lineNum":"  344","line":""},
{"lineNum":"  345","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"  346","line":"    reference back() _NOEXCEPT {"},
{"lineNum":"  347","line":"      _LIBCPP_ASSERT(false, \"cannot call array<T, 0>::back() on a zero-sized array\");"},
{"lineNum":"  348","line":"      _LIBCPP_UNREACHABLE();"},
{"lineNum":"  349","line":"    }"},
{"lineNum":"  350","line":""},
{"lineNum":"  351","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  352","line":"    const_reference back() const _NOEXCEPT {"},
{"lineNum":"  353","line":"      _LIBCPP_ASSERT(false, \"cannot call array<T, 0>::back() on a zero-sized array\");"},
{"lineNum":"  354","line":"      _LIBCPP_UNREACHABLE();"},
{"lineNum":"  355","line":"    }"},
{"lineNum":"  356","line":"};"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":""},
{"lineNum":"  359","line":"#ifndef _LIBCPP_HAS_NO_DEDUCTION_GUIDES"},
{"lineNum":"  360","line":"template<class _Tp, class... _Args,"},
{"lineNum":"  361","line":"         class = _EnableIf<__all<_IsSame<_Tp, _Args>::value...>::value>"},
{"lineNum":"  362","line":"         >"},
{"lineNum":"  363","line":"array(_Tp, _Args...)"},
{"lineNum":"  364","line":"  -> array<_Tp, 1 + sizeof...(_Args)>;"},
{"lineNum":"  365","line":"#endif"},
{"lineNum":"  366","line":""},
{"lineNum":"  367","line":"template <class _Tp, size_t _Size>"},
{"lineNum":"  368","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  369","line":"_LIBCPP_CONSTEXPR_AFTER_CXX17 bool"},
{"lineNum":"  370","line":"operator==(const array<_Tp, _Size>& __x, const array<_Tp, _Size>& __y)"},
{"lineNum":"  371","line":"{"},
{"lineNum":"  372","line":"    return _VSTD::equal(__x.begin(), __x.end(), __y.begin());"},
{"lineNum":"  373","line":"}"},
{"lineNum":"  374","line":""},
{"lineNum":"  375","line":"template <class _Tp, size_t _Size>"},
{"lineNum":"  376","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  377","line":"_LIBCPP_CONSTEXPR_AFTER_CXX17 bool"},
{"lineNum":"  378","line":"operator!=(const array<_Tp, _Size>& __x, const array<_Tp, _Size>& __y)"},
{"lineNum":"  379","line":"{"},
{"lineNum":"  380","line":"    return !(__x == __y);"},
{"lineNum":"  381","line":"}"},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"template <class _Tp, size_t _Size>"},
{"lineNum":"  384","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  385","line":"_LIBCPP_CONSTEXPR_AFTER_CXX17 bool"},
{"lineNum":"  386","line":"operator<(const array<_Tp, _Size>& __x, const array<_Tp, _Size>& __y)"},
{"lineNum":"  387","line":"{"},
{"lineNum":"  388","line":"    return _VSTD::lexicographical_compare(__x.begin(), __x.end(),"},
{"lineNum":"  389","line":"                                          __y.begin(), __y.end());"},
{"lineNum":"  390","line":"}"},
{"lineNum":"  391","line":""},
{"lineNum":"  392","line":"template <class _Tp, size_t _Size>"},
{"lineNum":"  393","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  394","line":"_LIBCPP_CONSTEXPR_AFTER_CXX17 bool"},
{"lineNum":"  395","line":"operator>(const array<_Tp, _Size>& __x, const array<_Tp, _Size>& __y)"},
{"lineNum":"  396","line":"{"},
{"lineNum":"  397","line":"    return __y < __x;"},
{"lineNum":"  398","line":"}"},
{"lineNum":"  399","line":""},
{"lineNum":"  400","line":"template <class _Tp, size_t _Size>"},
{"lineNum":"  401","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  402","line":"_LIBCPP_CONSTEXPR_AFTER_CXX17 bool"},
{"lineNum":"  403","line":"operator<=(const array<_Tp, _Size>& __x, const array<_Tp, _Size>& __y)"},
{"lineNum":"  404","line":"{"},
{"lineNum":"  405","line":"    return !(__y < __x);"},
{"lineNum":"  406","line":"}"},
{"lineNum":"  407","line":""},
{"lineNum":"  408","line":"template <class _Tp, size_t _Size>"},
{"lineNum":"  409","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  410","line":"_LIBCPP_CONSTEXPR_AFTER_CXX17 bool"},
{"lineNum":"  411","line":"operator>=(const array<_Tp, _Size>& __x, const array<_Tp, _Size>& __y)"},
{"lineNum":"  412","line":"{"},
{"lineNum":"  413","line":"    return !(__x < __y);"},
{"lineNum":"  414","line":"}"},
{"lineNum":"  415","line":""},
{"lineNum":"  416","line":"template <class _Tp, size_t _Size>"},
{"lineNum":"  417","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  418","line":"typename enable_if"},
{"lineNum":"  419","line":"<"},
{"lineNum":"  420","line":"    _Size == 0 ||"},
{"lineNum":"  421","line":"    __is_swappable<_Tp>::value,"},
{"lineNum":"  422","line":"    void"},
{"lineNum":"  423","line":">::type"},
{"lineNum":"  424","line":"swap(array<_Tp, _Size>& __x, array<_Tp, _Size>& __y)"},
{"lineNum":"  425","line":"                                  _NOEXCEPT_(noexcept(__x.swap(__y)))"},
{"lineNum":"  426","line":"{"},
{"lineNum":"  427","line":"    __x.swap(__y);"},
{"lineNum":"  428","line":"}"},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":"template <class _Tp, size_t _Size>"},
{"lineNum":"  431","line":"struct _LIBCPP_TEMPLATE_VIS tuple_size<array<_Tp, _Size> >"},
{"lineNum":"  432","line":"    : public integral_constant<size_t, _Size> {};"},
{"lineNum":"  433","line":""},
{"lineNum":"  434","line":"template <size_t _Ip, class _Tp, size_t _Size>"},
{"lineNum":"  435","line":"struct _LIBCPP_TEMPLATE_VIS tuple_element<_Ip, array<_Tp, _Size> >"},
{"lineNum":"  436","line":"{"},
{"lineNum":"  437","line":"    static_assert(_Ip < _Size, \"Index out of bounds in std::tuple_element<> (std::array)\");"},
{"lineNum":"  438","line":"    typedef _Tp type;"},
{"lineNum":"  439","line":"};"},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"template <size_t _Ip, class _Tp, size_t _Size>"},
{"lineNum":"  442","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  443","line":"_Tp&"},
{"lineNum":"  444","line":"get(array<_Tp, _Size>& __a) _NOEXCEPT"},
{"lineNum":"  445","line":"{"},
{"lineNum":"  446","line":"    static_assert(_Ip < _Size, \"Index out of bounds in std::get<> (std::array)\");"},
{"lineNum":"  447","line":"    return __a.__elems_[_Ip];"},
{"lineNum":"  448","line":"}"},
{"lineNum":"  449","line":""},
{"lineNum":"  450","line":"template <size_t _Ip, class _Tp, size_t _Size>"},
{"lineNum":"  451","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  452","line":"const _Tp&"},
{"lineNum":"  453","line":"get(const array<_Tp, _Size>& __a) _NOEXCEPT"},
{"lineNum":"  454","line":"{"},
{"lineNum":"  455","line":"    static_assert(_Ip < _Size, \"Index out of bounds in std::get<> (const std::array)\");"},
{"lineNum":"  456","line":"    return __a.__elems_[_Ip];"},
{"lineNum":"  457","line":"}"},
{"lineNum":"  458","line":""},
{"lineNum":"  459","line":"template <size_t _Ip, class _Tp, size_t _Size>"},
{"lineNum":"  460","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  461","line":"_Tp&&"},
{"lineNum":"  462","line":"get(array<_Tp, _Size>&& __a) _NOEXCEPT"},
{"lineNum":"  463","line":"{"},
{"lineNum":"  464","line":"    static_assert(_Ip < _Size, \"Index out of bounds in std::get<> (std::array &&)\");"},
{"lineNum":"  465","line":"    return _VSTD::move(__a.__elems_[_Ip]);"},
{"lineNum":"  466","line":"}"},
{"lineNum":"  467","line":""},
{"lineNum":"  468","line":"template <size_t _Ip, class _Tp, size_t _Size>"},
{"lineNum":"  469","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11"},
{"lineNum":"  470","line":"const _Tp&&"},
{"lineNum":"  471","line":"get(const array<_Tp, _Size>&& __a) _NOEXCEPT"},
{"lineNum":"  472","line":"{"},
{"lineNum":"  473","line":"    static_assert(_Ip < _Size, \"Index out of bounds in std::get<> (const std::array &&)\");"},
{"lineNum":"  474","line":"    return _VSTD::move(__a.__elems_[_Ip]);"},
{"lineNum":"  475","line":"}"},
{"lineNum":"  476","line":""},
{"lineNum":"  477","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":"  478","line":""},
{"lineNum":"  479","line":"template <typename _Tp, size_t _Size, size_t... _Index>"},
{"lineNum":"  480","line":"_LIBCPP_INLINE_VISIBILITY constexpr array<remove_cv_t<_Tp>, _Size>"},
{"lineNum":"  481","line":"__to_array_lvalue_impl(_Tp (&__arr)[_Size], index_sequence<_Index...>) {"},
{"lineNum":"  482","line":"  return {{__arr[_Index]...}};"},
{"lineNum":"  483","line":"}"},
{"lineNum":"  484","line":""},
{"lineNum":"  485","line":"template <typename _Tp, size_t _Size, size_t... _Index>"},
{"lineNum":"  486","line":"_LIBCPP_INLINE_VISIBILITY constexpr array<remove_cv_t<_Tp>, _Size>"},
{"lineNum":"  487","line":"__to_array_rvalue_impl(_Tp(&&__arr)[_Size], index_sequence<_Index...>) {"},
{"lineNum":"  488","line":"  return {{_VSTD::move(__arr[_Index])...}};"},
{"lineNum":"  489","line":"}"},
{"lineNum":"  490","line":""},
{"lineNum":"  491","line":"template <typename _Tp, size_t _Size>"},
{"lineNum":"  492","line":"_LIBCPP_INLINE_VISIBILITY constexpr array<remove_cv_t<_Tp>, _Size>"},
{"lineNum":"  493","line":"to_array(_Tp (&__arr)[_Size]) noexcept(is_nothrow_constructible_v<_Tp, _Tp&>) {"},
{"lineNum":"  494","line":"  static_assert("},
{"lineNum":"  495","line":"      !is_array_v<_Tp>,"},
{"lineNum":"  496","line":"      \"[array.creation]/1: to_array does not accept multidimensional arrays.\");"},
{"lineNum":"  497","line":"  static_assert("},
{"lineNum":"  498","line":"      is_constructible_v<_Tp, _Tp&>,"},
{"lineNum":"  499","line":"      \"[array.creation]/1: to_array requires copy constructible elements.\");"},
{"lineNum":"  500","line":"  return _VSTD::__to_array_lvalue_impl(__arr, make_index_sequence<_Size>());"},
{"lineNum":"  501","line":"}"},
{"lineNum":"  502","line":""},
{"lineNum":"  503","line":"template <typename _Tp, size_t _Size>"},
{"lineNum":"  504","line":"_LIBCPP_INLINE_VISIBILITY constexpr array<remove_cv_t<_Tp>, _Size>"},
{"lineNum":"  505","line":"to_array(_Tp(&&__arr)[_Size]) noexcept(is_nothrow_move_constructible_v<_Tp>) {"},
{"lineNum":"  506","line":"  static_assert("},
{"lineNum":"  507","line":"      !is_array_v<_Tp>,"},
{"lineNum":"  508","line":"      \"[array.creation]/4: to_array does not accept multidimensional arrays.\");"},
{"lineNum":"  509","line":"  static_assert("},
{"lineNum":"  510","line":"      is_move_constructible_v<_Tp>,"},
{"lineNum":"  511","line":"      \"[array.creation]/4: to_array requires move constructible elements.\");"},
{"lineNum":"  512","line":"  return _VSTD::__to_array_rvalue_impl(_VSTD::move(__arr),"},
{"lineNum":"  513","line":"                                       make_index_sequence<_Size>());"},
{"lineNum":"  514","line":"}"},
{"lineNum":"  515","line":""},
{"lineNum":"  516","line":"#endif // _LIBCPP_STD_VER > 17"},
{"lineNum":"  517","line":""},
{"lineNum":"  518","line":"_LIBCPP_END_NAMESPACE_STD"},
{"lineNum":"  519","line":""},
{"lineNum":"  520","line":"#endif // _LIBCPP_ARRAY"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 6, "covered" : 0,};
var merged_data = [];
